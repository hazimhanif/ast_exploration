SOURCE_FILE	111:0	148:0	0	
FUNCTION_DEF	111:0	122:0	1	
RETURN_TYPE	111:0	111:7	2	static int
LEAF_NODE	111:0	111:0	3	static
TYPE_NAME	111:7	111:7	3	int
LEAF_NODE	111:7	111:7	4	int
FUNCTION_NAME	112:0	112:0	2	_notConfigured
LEAF_NODE	112:0	112:0	3	_notConfigured
PARAMETER_LIST	112:14	112:24	2	( TIFF * tif )
LEAF_NODE	112:14	112:14	3	(
PARAMETER_DECL	112:15	112:21	3	TIFF * tif
TYPE	112:15	112:19	4	TIFF *
TYPE_NAME	112:15	112:15	5	TIFF
LEAF_NODE	112:15	112:15	6	TIFF
POINTER	112:19	112:19	5	*
LEAF_NODE	112:19	112:19	6	*
NAME	112:21	112:21	4	tif
LEAF_NODE	112:21	112:21	5	tif
LEAF_NODE	112:24	112:24	3	)
LEAF_NODE	113:0	113:0	2	{
STATEMENTS	114:1	121:1	2	
SIMPLE_DECL	114:1	114:64	3	const TIFFCodec * c ; c = TIFFFindCODEC ( tif -> tif_dir . td_compression ) ;
VAR_DECL	114:1	114:18	4	const TIFFCodec * c ; c = TIFFFindCODEC ( tif -> tif_dir . td_compression )
TYPE	114:1	114:16	5	const TIFFCodec *
TYPE_NAME	114:1	114:7	6	const TIFFCodec
LEAF_NODE	114:1	114:1	7	const
LEAF_NODE	114:7	114:7	7	TIFFCodec
POINTER	114:16	114:16	6	*
LEAF_NODE	114:16	114:16	7	*
NAME	114:18	114:18	5	c
LEAF_NODE	114:18	114:18	6	c
LEAF_NODE	0:0	0:0	5	;
INIT	114:18	114:18	5	c = TIFFFindCODEC ( tif -> tif_dir . td_compression )
ASSIGN	114:18	114:22	6	c = TIFFFindCODEC ( tif -> tif_dir . td_compression )
LVAL	114:18	114:18	7	c
NAME	114:18	114:18	8	c
LEAF_NODE	114:18	114:18	9	c
ASSIGN_OP	114:20	114:20	7	=
LEAF_NODE	114:20	114:20	8	=
RVAL	114:22	114:22	7	TIFFFindCODEC ( tif -> tif_dir . td_compression )
FUNCTION_CALL	114:22	114:63	8	TIFFFindCODEC ( tif -> tif_dir . td_compression )
CALLEE	114:22	114:22	9	TIFFFindCODEC
LEAF_NODE	114:22	114:22	10	TIFFFindCODEC
LEAF_NODE	114:35	114:35	9	(
ARGUMENT	114:36	114:36	9	tif -> tif_dir . td_compression
FIELD	114:36	114:49	10	tif -> tif_dir . td_compression
LEAF_NODE	114:36	114:36	11	tif
LEAF_NODE	114:39	114:39	11	->
LEAF_NODE	114:41	114:41	11	tif_dir
LEAF_NODE	114:48	114:48	11	.
LEAF_NODE	114:49	114:49	11	td_compression
LEAF_NODE	114:63	114:63	9	)
LEAF_NODE	114:64	114:64	4	;
SIMPLE_DECL	115:8	115:33	3	char [ 20 ] compression_code ;
VAR_DECL	115:8	115:13	4	char [ 20 ] compression_code
TYPE	115:8	115:29	5	char [ 20 ]
TYPE_NAME	115:8	115:8	6	char
LEAF_NODE	115:8	115:8	7	char
TYPE_SUFFIX	115:29	115:32	6	[ 20 ]
LEAF_NODE	115:29	115:29	7	[
FIELD	115:30	115:30	7	20
LEAF_NODE	115:30	115:30	8	20
LEAF_NODE	115:32	115:32	7	]
NAME	115:13	115:13	5	compression_code
LEAF_NODE	115:13	115:13	6	compression_code
LEAF_NODE	115:33	115:33	4	;
EXPR_STATEMENT	117:8	117:68	3	sprintf ( compression_code , "%d" , tif -> tif_dir . td_compression ) ;
EXPR	117:8	117:8	4	sprintf ( compression_code , "%d" , tif -> tif_dir . td_compression )
FUNCTION_CALL	117:8	117:67	5	sprintf ( compression_code , "%d" , tif -> tif_dir . td_compression )
CALLEE	117:8	117:8	6	sprintf
LEAF_NODE	117:8	117:8	7	sprintf
LEAF_NODE	117:15	117:15	6	(
ARGUMENT	117:16	117:16	6	compression_code
FIELD	117:16	117:16	7	compression_code
LEAF_NODE	117:16	117:16	8	compression_code
LEAF_NODE	117:32	117:32	6	,
ARGUMENT	117:34	117:34	6	"%d"
FIELD	117:34	117:34	7	"%d"
LEAF_NODE	117:34	117:34	8	"%d"
LEAF_NODE	117:38	117:38	6	,
ARGUMENT	117:39	117:39	6	tif -> tif_dir . td_compression
FIELD	117:39	117:52	7	tif -> tif_dir . td_compression
LEAF_NODE	117:39	117:39	8	tif
LEAF_NODE	117:42	117:42	8	->
LEAF_NODE	117:44	117:44	8	tif_dir
LEAF_NODE	117:51	117:51	8	.
LEAF_NODE	117:52	117:52	8	td_compression
LEAF_NODE	117:67	117:67	6	)
LEAF_NODE	117:68	117:68	4	;
EXPR_STATEMENT	118:1	120:53	3	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%s compression support is not configured" , c ? c -> name : compression_code ) ;
EXPR	118:1	118:1	4	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%s compression support is not configured" , c ? c -> name : compression_code )
FUNCTION_CALL	118:1	120:52	5	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%s compression support is not configured" , c ? c -> name : compression_code )
CALLEE	118:1	118:1	6	TIFFErrorExt
LEAF_NODE	118:1	118:1	7	TIFFErrorExt
LEAF_NODE	118:13	118:13	6	(
ARGUMENT	118:14	118:14	6	tif -> tif_clientdata
FIELD	118:14	118:19	7	tif -> tif_clientdata
LEAF_NODE	118:14	118:14	8	tif
LEAF_NODE	118:17	118:17	8	->
LEAF_NODE	118:19	118:19	8	tif_clientdata
LEAF_NODE	118:33	118:33	6	,
ARGUMENT	118:35	118:35	6	tif -> tif_name
FIELD	118:35	118:40	7	tif -> tif_name
LEAF_NODE	118:35	118:35	8	tif
LEAF_NODE	118:38	118:38	8	->
LEAF_NODE	118:40	118:40	8	tif_name
LEAF_NODE	118:48	118:48	6	,
ARGUMENT	119:21	119:21	6	"%s compression support is not configured"
FIELD	119:21	119:21	7	"%s compression support is not configured"
LEAF_NODE	119:21	119:21	8	"%s compression support is not configured"
LEAF_NODE	119:63	119:63	6	,
ARGUMENT	120:21	120:21	6	c ? c -> name : compression_code
COND_EXPR	120:21	120:35	7	c ? c -> name : compression_code
CONDITION	120:21	120:21	8	c
FIELD	120:21	120:21	9	c
LEAF_NODE	120:21	120:21	10	c
LEAF_NODE	120:23	120:23	8	?
EXPR	120:25	120:25	8	c -> name
FIELD	120:25	120:28	9	c -> name
LEAF_NODE	120:25	120:25	10	c
LEAF_NODE	120:26	120:26	10	->
LEAF_NODE	120:28	120:28	10	name
LEAF_NODE	120:33	120:33	8	:
FIELD	120:35	120:35	8	compression_code
LEAF_NODE	120:35	120:35	9	compression_code
LEAF_NODE	120:52	120:52	6	)
LEAF_NODE	120:53	120:53	4	;
JUMP_STATEMENT	121:1	121:11	3	return ( 0 ) ;
KEYWORD	121:1	121:1	4	return
LEAF_NODE	121:1	121:1	5	return
DESTINATION	121:8	121:8	4	( 0 )
EXPR	121:8	121:10	5	( 0 )
LEAF_NODE	121:8	121:8	6	(
FIELD	121:9	121:9	6	0
LEAF_NODE	121:9	121:9	7	0
LEAF_NODE	121:10	121:10	6	)
LEAF_NODE	121:11	121:11	4	;
LEAF_NODE	122:0	122:0	2	}
FUNCTION_DEF	124:0	135:0	1	
RETURN_TYPE	124:0	124:7	2	static int
LEAF_NODE	124:0	124:0	3	static
TYPE_NAME	124:7	124:7	3	int
LEAF_NODE	124:7	124:7	4	int
FUNCTION_NAME	125:0	125:0	2	NotConfigured
LEAF_NODE	125:0	125:0	3	NotConfigured
PARAMETER_LIST	125:13	125:35	2	( TIFF * tif , int scheme )
LEAF_NODE	125:13	125:13	3	(
PARAMETER_DECL	125:14	125:20	3	TIFF * tif
TYPE	125:14	125:18	4	TIFF *
TYPE_NAME	125:14	125:14	5	TIFF
LEAF_NODE	125:14	125:14	6	TIFF
POINTER	125:18	125:18	5	*
LEAF_NODE	125:18	125:18	6	*
NAME	125:20	125:20	4	tif
LEAF_NODE	125:20	125:20	5	tif
LEAF_NODE	125:23	125:23	3	,
PARAMETER_DECL	125:25	125:29	3	int scheme
TYPE	125:25	125:25	4	int
TYPE_NAME	125:25	125:25	5	int
LEAF_NODE	125:25	125:25	6	int
NAME	125:29	125:29	4	scheme
LEAF_NODE	125:29	125:29	5	scheme
LEAF_NODE	125:35	125:35	3	)
LEAF_NODE	126:0	126:0	2	{
STATEMENTS	127:1	134:1	2	
EXPR_STATEMENT	127:1	127:14	3	( void ) scheme ;
EXPR	127:1	127:8	4	( void ) scheme
LEAF_NODE	127:1	127:1	5	(
TYPE_NAME	127:2	127:2	5	void
LEAF_NODE	127:2	127:2	6	void
LEAF_NODE	127:6	127:6	5	)
FIELD	127:8	127:8	5	scheme
LEAF_NODE	127:8	127:8	6	scheme
LEAF_NODE	127:14	127:14	4	;
EXPR_STATEMENT	129:1	129:36	3	tif -> tif_fixuptags = _notConfigured ;
EXPR	129:1	129:1	4	tif -> tif_fixuptags = _notConfigured
ASSIGN	129:1	129:22	5	tif -> tif_fixuptags = _notConfigured
LVAL	129:1	129:1	6	tif -> tif_fixuptags
FIELD	129:1	129:6	7	tif -> tif_fixuptags
LEAF_NODE	129:1	129:1	8	tif
LEAF_NODE	129:4	129:4	8	->
LEAF_NODE	129:6	129:6	8	tif_fixuptags
ASSIGN_OP	129:20	129:20	6	=
LEAF_NODE	129:20	129:20	7	=
RVAL	129:22	129:22	6	_notConfigured
FIELD	129:22	129:22	7	_notConfigured
LEAF_NODE	129:22	129:22	8	_notConfigured
LEAF_NODE	129:36	129:36	4	;
EXPR_STATEMENT	130:1	130:30	3	tif -> tif_decodestatus = FALSE ;
EXPR	130:1	130:1	4	tif -> tif_decodestatus = FALSE
ASSIGN	130:1	130:25	5	tif -> tif_decodestatus = FALSE
LVAL	130:1	130:1	6	tif -> tif_decodestatus
FIELD	130:1	130:6	7	tif -> tif_decodestatus
LEAF_NODE	130:1	130:1	8	tif
LEAF_NODE	130:4	130:4	8	->
LEAF_NODE	130:6	130:6	8	tif_decodestatus
ASSIGN_OP	130:23	130:23	6	=
LEAF_NODE	130:23	130:23	7	=
RVAL	130:25	130:25	6	FALSE
FIELD	130:25	130:25	7	FALSE
LEAF_NODE	130:25	130:25	8	FALSE
LEAF_NODE	130:30	130:30	4	;
EXPR_STATEMENT	131:1	131:38	3	tif -> tif_setupdecode = _notConfigured ;
EXPR	131:1	131:1	4	tif -> tif_setupdecode = _notConfigured
ASSIGN	131:1	131:24	5	tif -> tif_setupdecode = _notConfigured
LVAL	131:1	131:1	6	tif -> tif_setupdecode
FIELD	131:1	131:6	7	tif -> tif_setupdecode
LEAF_NODE	131:1	131:1	8	tif
LEAF_NODE	131:4	131:4	8	->
LEAF_NODE	131:6	131:6	8	tif_setupdecode
ASSIGN_OP	131:22	131:22	6	=
LEAF_NODE	131:22	131:22	7	=
RVAL	131:24	131:24	6	_notConfigured
FIELD	131:24	131:24	7	_notConfigured
LEAF_NODE	131:24	131:24	8	_notConfigured
LEAF_NODE	131:38	131:38	4	;
EXPR_STATEMENT	132:1	132:30	3	tif -> tif_encodestatus = FALSE ;
EXPR	132:1	132:1	4	tif -> tif_encodestatus = FALSE
ASSIGN	132:1	132:25	5	tif -> tif_encodestatus = FALSE
LVAL	132:1	132:1	6	tif -> tif_encodestatus
FIELD	132:1	132:6	7	tif -> tif_encodestatus
LEAF_NODE	132:1	132:1	8	tif
LEAF_NODE	132:4	132:4	8	->
LEAF_NODE	132:6	132:6	8	tif_encodestatus
ASSIGN_OP	132:23	132:23	6	=
LEAF_NODE	132:23	132:23	7	=
RVAL	132:25	132:25	6	FALSE
FIELD	132:25	132:25	7	FALSE
LEAF_NODE	132:25	132:25	8	FALSE
LEAF_NODE	132:30	132:30	4	;
EXPR_STATEMENT	133:1	133:38	3	tif -> tif_setupencode = _notConfigured ;
EXPR	133:1	133:1	4	tif -> tif_setupencode = _notConfigured
ASSIGN	133:1	133:24	5	tif -> tif_setupencode = _notConfigured
LVAL	133:1	133:1	6	tif -> tif_setupencode
FIELD	133:1	133:6	7	tif -> tif_setupencode
LEAF_NODE	133:1	133:1	8	tif
LEAF_NODE	133:4	133:4	8	->
LEAF_NODE	133:6	133:6	8	tif_setupencode
ASSIGN_OP	133:22	133:22	6	=
LEAF_NODE	133:22	133:22	7	=
RVAL	133:24	133:24	6	_notConfigured
FIELD	133:24	133:24	7	_notConfigured
LEAF_NODE	133:24	133:24	8	_notConfigured
LEAF_NODE	133:38	133:38	4	;
JUMP_STATEMENT	134:1	134:11	3	return ( 1 ) ;
KEYWORD	134:1	134:1	4	return
LEAF_NODE	134:1	134:1	5	return
DESTINATION	134:8	134:8	4	( 1 )
EXPR	134:8	134:10	5	( 1 )
LEAF_NODE	134:8	134:8	6	(
FIELD	134:9	134:9	6	1
LEAF_NODE	134:9	134:9	7	1
LEAF_NODE	134:10	134:10	6	)
LEAF_NODE	134:11	134:11	4	;
LEAF_NODE	135:0	135:0	2	}
FUNCTION_DEF	148:0	163:0	1	
RETURN_TYPE	148:0	148:0	2	int
TYPE_NAME	148:0	148:0	3	int
LEAF_NODE	148:0	148:0	4	int
FUNCTION_NAME	149:0	149:0	2	TIFFIsCODECConfigured
LEAF_NODE	149:0	149:0	3	TIFFIsCODECConfigured
PARAMETER_LIST	149:21	149:35	2	( uint16 scheme )
LEAF_NODE	149:21	149:21	3	(
PARAMETER_DECL	149:22	149:29	3	uint16 scheme
TYPE	149:22	149:22	4	uint16
TYPE_NAME	149:22	149:22	5	uint16
LEAF_NODE	149:22	149:22	6	uint16
NAME	149:29	149:29	4	scheme
LEAF_NODE	149:29	149:29	5	scheme
LEAF_NODE	149:35	149:35	3	)
LEAF_NODE	150:0	150:0	2	{
STATEMENTS	151:1	162:1	2	
SIMPLE_DECL	151:1	151:47	3	const TIFFCodec * codec ; codec = TIFFFindCODEC ( scheme ) ;
VAR_DECL	151:1	151:18	4	const TIFFCodec * codec ; codec = TIFFFindCODEC ( scheme )
TYPE	151:1	151:16	5	const TIFFCodec *
TYPE_NAME	151:1	151:7	6	const TIFFCodec
LEAF_NODE	151:1	151:1	7	const
LEAF_NODE	151:7	151:7	7	TIFFCodec
POINTER	151:16	151:16	6	*
LEAF_NODE	151:16	151:16	7	*
NAME	151:18	151:18	5	codec
LEAF_NODE	151:18	151:18	6	codec
LEAF_NODE	0:0	0:0	5	;
INIT	151:18	151:18	5	codec = TIFFFindCODEC ( scheme )
ASSIGN	151:18	151:26	6	codec = TIFFFindCODEC ( scheme )
LVAL	151:18	151:18	7	codec
NAME	151:18	151:18	8	codec
LEAF_NODE	151:18	151:18	9	codec
ASSIGN_OP	151:24	151:24	7	=
LEAF_NODE	151:24	151:24	8	=
RVAL	151:26	151:26	7	TIFFFindCODEC ( scheme )
FUNCTION_CALL	151:26	151:46	8	TIFFFindCODEC ( scheme )
CALLEE	151:26	151:26	9	TIFFFindCODEC
LEAF_NODE	151:26	151:26	10	TIFFFindCODEC
LEAF_NODE	151:39	151:39	9	(
ARGUMENT	151:40	151:40	9	scheme
FIELD	151:40	151:40	10	scheme
LEAF_NODE	151:40	151:40	11	scheme
LEAF_NODE	151:46	151:46	9	)
LEAF_NODE	151:47	151:47	4	;
SELECTION	153:1	153:19	3	
KEYWORD	153:1	153:1	4	if
LEAF_NODE	153:1	153:1	5	if
LEAF_NODE	153:3	153:3	4	(
CONDITION	153:4	153:4	4	codec == NULL
EXPR	153:4	153:13	5	codec == NULL
FIELD	153:4	153:4	6	codec
LEAF_NODE	153:4	153:4	7	codec
EQ_OPERATOR	153:10	153:10	6	==
LEAF_NODE	153:10	153:10	7	==
FIELD	153:13	153:13	6	NULL
LEAF_NODE	153:13	153:13	7	NULL
LEAF_NODE	153:17	153:17	4	)
STATEMENTS	153:19	155:1	4	
LEAF_NODE	153:19	153:19	5	{
STATEMENTS	154:2	154:2	5	
JUMP_STATEMENT	154:2	154:10	6	return 0 ;
KEYWORD	154:2	154:2	7	return
LEAF_NODE	154:2	154:2	8	return
DESTINATION	154:9	154:9	7	0
EXPR	154:9	154:9	8	0
FIELD	154:9	154:9	9	0
LEAF_NODE	154:9	154:9	10	0
LEAF_NODE	154:10	154:10	7	;
LEAF_NODE	155:1	155:1	5	}
SELECTION	156:1	156:25	3	
KEYWORD	156:1	156:1	4	if
LEAF_NODE	156:1	156:1	5	if
LEAF_NODE	156:3	156:3	4	(
CONDITION	156:4	156:4	4	codec -> init == NULL
EXPR	156:4	156:19	5	codec -> init == NULL
FIELD	156:4	156:11	6	codec -> init
LEAF_NODE	156:4	156:4	7	codec
LEAF_NODE	156:9	156:9	7	->
LEAF_NODE	156:11	156:11	7	init
EQ_OPERATOR	156:16	156:16	6	==
LEAF_NODE	156:16	156:16	7	==
FIELD	156:19	156:19	6	NULL
LEAF_NODE	156:19	156:19	7	NULL
LEAF_NODE	156:23	156:23	4	)
STATEMENTS	156:25	158:1	4	
LEAF_NODE	156:25	156:25	5	{
STATEMENTS	157:2	157:2	5	
JUMP_STATEMENT	157:2	157:10	6	return 0 ;
KEYWORD	157:2	157:2	7	return
LEAF_NODE	157:2	157:2	8	return
DESTINATION	157:9	157:9	7	0
EXPR	157:9	157:9	8	0
FIELD	157:9	157:9	9	0
LEAF_NODE	157:9	157:9	10	0
LEAF_NODE	157:10	157:10	7	;
LEAF_NODE	158:1	158:1	5	}
SELECTION	159:1	159:33	3	
KEYWORD	159:1	159:1	4	if
LEAF_NODE	159:1	159:1	5	if
LEAF_NODE	159:3	159:3	4	(
CONDITION	159:4	159:4	4	codec -> init != NotConfigured
EXPR	159:4	159:19	5	codec -> init != NotConfigured
FIELD	159:4	159:11	6	codec -> init
LEAF_NODE	159:4	159:4	7	codec
LEAF_NODE	159:9	159:9	7	->
LEAF_NODE	159:11	159:11	7	init
EQ_OPERATOR	159:16	159:16	6	!=
LEAF_NODE	159:16	159:16	7	!=
FIELD	159:19	159:19	6	NotConfigured
LEAF_NODE	159:19	159:19	7	NotConfigured
LEAF_NODE	159:32	159:32	4	)
STATEMENTS	159:33	161:1	4	
LEAF_NODE	159:33	159:33	5	{
STATEMENTS	160:2	160:2	5	
JUMP_STATEMENT	160:2	160:10	6	return 1 ;
KEYWORD	160:2	160:2	7	return
LEAF_NODE	160:2	160:2	8	return
DESTINATION	160:9	160:9	7	1
EXPR	160:9	160:9	8	1
FIELD	160:9	160:9	9	1
LEAF_NODE	160:9	160:9	10	1
LEAF_NODE	160:10	160:10	7	;
LEAF_NODE	161:1	161:1	5	}
JUMP_STATEMENT	162:1	162:9	3	return 0 ;
KEYWORD	162:1	162:1	4	return
LEAF_NODE	162:1	162:1	5	return
DESTINATION	162:8	162:8	4	0
EXPR	162:8	162:8	5	0
FIELD	162:8	162:8	6	0
LEAF_NODE	162:8	162:8	7	0
LEAF_NODE	162:9	162:9	4	;
LEAF_NODE	163:0	163:0	2	}
