SOURCE_FILE	48:0	325:0	0	
SIMPLE_DECL	48:0	48:17	1	uint32 imagewidth ;
VAR_DECL	48:0	48:7	2	uint32 imagewidth
TYPE	48:0	48:0	3	uint32
TYPE_NAME	48:0	48:0	4	uint32
LEAF_NODE	48:0	48:0	5	uint32
NAME	48:7	48:7	3	imagewidth
LEAF_NODE	48:7	48:7	4	imagewidth
LEAF_NODE	48:17	48:17	2	;
SIMPLE_DECL	49:0	49:18	1	uint32 imagelength ;
VAR_DECL	49:0	49:7	2	uint32 imagelength
TYPE	49:0	49:0	3	uint32
TYPE_NAME	49:0	49:0	4	uint32
LEAF_NODE	49:0	49:0	5	uint32
NAME	49:7	49:7	3	imagelength
LEAF_NODE	49:7	49:7	4	imagelength
LEAF_NODE	49:18	49:18	2	;
SIMPLE_DECL	50:0	50:19	1	int threshold ; threshold = 128 ;
VAR_DECL	50:0	50:4	2	int threshold ; threshold = 128
TYPE	50:0	50:0	3	int
TYPE_NAME	50:0	50:0	4	int
LEAF_NODE	50:0	50:0	5	int
NAME	50:4	50:4	3	threshold
LEAF_NODE	50:4	50:4	4	threshold
LEAF_NODE	0:0	0:0	3	;
INIT	50:4	50:4	3	threshold = 128
ASSIGN	50:4	50:16	4	threshold = 128
LVAL	50:4	50:4	5	threshold
NAME	50:4	50:4	6	threshold
LEAF_NODE	50:4	50:4	7	threshold
ASSIGN_OP	50:14	50:14	5	=
LEAF_NODE	50:14	50:14	6	=
RVAL	50:16	50:16	5	128
FIELD	50:16	50:16	6	128
LEAF_NODE	50:16	50:16	7	128
LEAF_NODE	50:19	50:19	2	;
SIMPLE_DECL	52:7	52:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	52:7	52:12	2	void usage ; usage usage ( void )
TYPE	52:7	52:7	3	void
TYPE_NAME	52:7	52:7	4	void
LEAF_NODE	52:7	52:7	5	void
NAME	52:12	52:12	3	usage
LEAF_NODE	52:12	52:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	52:12	52:12	3	usage usage ( void )
ASSIGN	52:12	52:17	4	usage usage ( void )
LVAL	52:12	52:12	5	usage
NAME	52:12	52:12	6	usage
LEAF_NODE	52:12	52:12	7	usage
ASSIGN_OP	52:12	52:12	5	usage
NAME	52:12	52:12	6	usage
LEAF_NODE	52:12	52:12	7	usage
RVAL	52:17	52:22	5	( void )
LEAF_NODE	52:17	52:17	6	(
EXPR	52:18	52:18	6	void
FIELD	52:18	52:18	7	void
LEAF_NODE	52:18	52:18	8	void
LEAF_NODE	52:22	52:22	6	)
LEAF_NODE	52:23	52:23	2	;
FUNCTION_DEF	58:0	150:0	1	
RETURN_TYPE	58:0	58:7	2	static int
LEAF_NODE	58:0	58:0	3	static
TYPE_NAME	58:7	58:7	3	int
LEAF_NODE	58:7	58:7	4	int
FUNCTION_NAME	59:0	59:0	2	fsdither
LEAF_NODE	59:0	59:0	3	fsdither
PARAMETER_LIST	59:8	59:28	2	( TIFF * in , TIFF * out )
LEAF_NODE	59:8	59:8	3	(
PARAMETER_DECL	59:9	59:15	3	TIFF * in
TYPE	59:9	59:13	4	TIFF *
TYPE_NAME	59:9	59:9	5	TIFF
LEAF_NODE	59:9	59:9	6	TIFF
POINTER	59:13	59:13	5	*
LEAF_NODE	59:13	59:13	6	*
NAME	59:15	59:15	4	in
LEAF_NODE	59:15	59:15	5	in
LEAF_NODE	59:17	59:17	3	,
PARAMETER_DECL	59:19	59:25	3	TIFF * out
TYPE	59:19	59:23	4	TIFF *
TYPE_NAME	59:19	59:19	5	TIFF
LEAF_NODE	59:19	59:19	6	TIFF
POINTER	59:23	59:23	5	*
LEAF_NODE	59:23	59:23	6	*
NAME	59:25	59:25	4	out
LEAF_NODE	59:25	59:25	5	out
LEAF_NODE	59:28	59:28	3	)
LEAF_NODE	60:0	60:0	2	{
STATEMENTS	61:1	149:1	2	
SIMPLE_DECL	61:1	61:43	3	unsigned char * outline , unsigned char * inputline , unsigned char * inptr ;
INIT_DECL_LIST	61:1	61:1	4	unsigned char * outline , unsigned char * inputline , unsigned char * inptr
VAR_DECL	61:1	61:16	5	unsigned char * outline
TYPE	61:1	61:15	6	unsigned char *
TYPE_NAME	61:1	61:10	7	unsigned char
LEAF_NODE	61:1	61:1	8	unsigned
LEAF_NODE	61:10	61:10	8	char
POINTER	61:15	61:15	7	*
LEAF_NODE	61:15	61:15	8	*
NAME	61:16	61:16	6	outline
LEAF_NODE	61:16	61:16	7	outline
LEAF_NODE	61:23	61:23	5	,
INIT_DECL_LIST	61:1	61:1	5	unsigned char * inputline , unsigned char * inptr
VAR_DECL	61:1	61:26	6	unsigned char * inputline
TYPE	61:1	61:25	7	unsigned char *
TYPE_NAME	61:1	61:10	8	unsigned char
LEAF_NODE	61:1	61:1	9	unsigned
LEAF_NODE	61:10	61:10	9	char
POINTER	61:25	61:25	8	*
LEAF_NODE	61:25	61:25	9	*
NAME	61:26	61:26	7	inputline
LEAF_NODE	61:26	61:26	8	inputline
LEAF_NODE	61:35	61:35	6	,
VAR_DECL	61:1	61:38	6	unsigned char * inptr
TYPE	61:1	61:37	7	unsigned char *
TYPE_NAME	61:1	61:10	8	unsigned char
LEAF_NODE	61:1	61:1	9	unsigned
LEAF_NODE	61:10	61:10	9	char
POINTER	61:37	61:37	8	*
LEAF_NODE	61:37	61:37	9	*
NAME	61:38	61:38	7	inptr
LEAF_NODE	61:38	61:38	8	inptr
LEAF_NODE	61:43	61:43	4	;
SIMPLE_DECL	62:1	62:36	3	short * thisline , short * nextline , short * tmpptr ;
INIT_DECL_LIST	62:1	62:1	4	short * thisline , short * nextline , short * tmpptr
VAR_DECL	62:1	62:8	5	short * thisline
TYPE	62:1	62:7	6	short *
TYPE_NAME	62:1	62:1	7	short
LEAF_NODE	62:1	62:1	8	short
POINTER	62:7	62:7	7	*
LEAF_NODE	62:7	62:7	8	*
NAME	62:8	62:8	6	thisline
LEAF_NODE	62:8	62:8	7	thisline
LEAF_NODE	62:16	62:16	5	,
INIT_DECL_LIST	62:1	62:1	5	short * nextline , short * tmpptr
VAR_DECL	62:1	62:19	6	short * nextline
TYPE	62:1	62:18	7	short *
TYPE_NAME	62:1	62:1	8	short
LEAF_NODE	62:1	62:1	9	short
POINTER	62:18	62:18	8	*
LEAF_NODE	62:18	62:18	9	*
NAME	62:19	62:19	7	nextline
LEAF_NODE	62:19	62:19	8	nextline
LEAF_NODE	62:27	62:27	6	,
VAR_DECL	62:1	62:30	6	short * tmpptr
TYPE	62:1	62:29	7	short *
TYPE_NAME	62:1	62:1	8	short
LEAF_NODE	62:1	62:1	9	short
POINTER	62:29	62:29	8	*
LEAF_NODE	62:29	62:29	9	*
NAME	62:30	62:30	7	tmpptr
LEAF_NODE	62:30	62:30	8	tmpptr
LEAF_NODE	62:36	62:36	4	;
LEAF_NODE	63:1	63:1	3	register
SIMPLE_DECL	63:10	63:31	3	unsigned char * outptr ;
VAR_DECL	63:10	63:25	4	unsigned char * outptr
TYPE	63:10	63:24	5	unsigned char *
TYPE_NAME	63:10	63:19	6	unsigned char
LEAF_NODE	63:10	63:10	7	unsigned
LEAF_NODE	63:19	63:19	7	char
POINTER	63:24	63:24	6	*
LEAF_NODE	63:24	63:24	7	*
NAME	63:25	63:25	5	outptr
LEAF_NODE	63:25	63:25	6	outptr
LEAF_NODE	63:31	63:31	4	;
LEAF_NODE	64:1	64:1	3	register
SIMPLE_DECL	64:10	64:34	3	short * thisptr , short * nextptr ;
INIT_DECL_LIST	64:10	64:10	4	short * thisptr , short * nextptr
VAR_DECL	64:10	64:17	5	short * thisptr
TYPE	64:10	64:16	6	short *
TYPE_NAME	64:10	64:10	7	short
LEAF_NODE	64:10	64:10	8	short
POINTER	64:16	64:16	7	*
LEAF_NODE	64:16	64:16	8	*
NAME	64:17	64:17	6	thisptr
LEAF_NODE	64:17	64:17	7	thisptr
LEAF_NODE	64:24	64:24	5	,
VAR_DECL	64:10	64:27	5	short * nextptr
TYPE	64:10	64:26	6	short *
TYPE_NAME	64:10	64:10	7	short
LEAF_NODE	64:10	64:10	8	short
POINTER	64:26	64:26	7	*
LEAF_NODE	64:26	64:26	8	*
NAME	64:27	64:27	6	nextptr
LEAF_NODE	64:27	64:27	7	nextptr
LEAF_NODE	64:34	64:34	4	;
LEAF_NODE	65:1	65:1	3	register
SIMPLE_DECL	65:10	65:21	3	uint32 i , uint32 j ;
INIT_DECL_LIST	65:10	65:10	4	uint32 i , uint32 j
VAR_DECL	65:10	65:17	5	uint32 i
TYPE	65:10	65:10	6	uint32
TYPE_NAME	65:10	65:10	7	uint32
LEAF_NODE	65:10	65:10	8	uint32
NAME	65:17	65:17	6	i
LEAF_NODE	65:17	65:17	7	i
LEAF_NODE	65:18	65:18	5	,
VAR_DECL	65:10	65:20	5	uint32 j
TYPE	65:10	65:10	6	uint32
TYPE_NAME	65:10	65:10	7	uint32
LEAF_NODE	65:10	65:10	8	uint32
NAME	65:20	65:20	6	j
LEAF_NODE	65:20	65:20	7	j
LEAF_NODE	65:21	65:21	4	;
SIMPLE_DECL	66:1	66:18	3	uint32 imax , uint32 jmax ;
INIT_DECL_LIST	66:1	66:1	4	uint32 imax , uint32 jmax
VAR_DECL	66:1	66:8	5	uint32 imax
TYPE	66:1	66:1	6	uint32
TYPE_NAME	66:1	66:1	7	uint32
LEAF_NODE	66:1	66:1	8	uint32
NAME	66:8	66:8	6	imax
LEAF_NODE	66:8	66:8	7	imax
LEAF_NODE	66:12	66:12	5	,
VAR_DECL	66:1	66:14	5	uint32 jmax
TYPE	66:1	66:1	6	uint32
TYPE_NAME	66:1	66:1	7	uint32
LEAF_NODE	66:1	66:1	8	uint32
NAME	66:14	66:14	6	jmax
LEAF_NODE	66:14	66:14	7	jmax
LEAF_NODE	66:18	66:18	4	;
SIMPLE_DECL	67:1	67:24	3	int lastline , int lastpixel ;
INIT_DECL_LIST	67:1	67:1	4	int lastline , int lastpixel
VAR_DECL	67:1	67:5	5	int lastline
TYPE	67:1	67:1	6	int
TYPE_NAME	67:1	67:1	7	int
LEAF_NODE	67:1	67:1	8	int
NAME	67:5	67:5	6	lastline
LEAF_NODE	67:5	67:5	7	lastline
LEAF_NODE	67:13	67:13	5	,
VAR_DECL	67:1	67:15	5	int lastpixel
TYPE	67:1	67:1	6	int
TYPE_NAME	67:1	67:1	7	int
LEAF_NODE	67:1	67:1	8	int
NAME	67:15	67:15	6	lastpixel
LEAF_NODE	67:15	67:15	7	lastpixel
LEAF_NODE	67:24	67:24	4	;
SIMPLE_DECL	68:1	68:8	3	int bit ;
VAR_DECL	68:1	68:5	4	int bit
TYPE	68:1	68:1	5	int
TYPE_NAME	68:1	68:1	6	int
LEAF_NODE	68:1	68:1	7	int
NAME	68:5	68:5	5	bit
LEAF_NODE	68:5	68:5	6	bit
LEAF_NODE	68:8	68:8	4	;
SIMPLE_DECL	69:1	69:20	3	tsize_t outlinesize ;
VAR_DECL	69:1	69:9	4	tsize_t outlinesize
TYPE	69:1	69:1	5	tsize_t
TYPE_NAME	69:1	69:1	6	tsize_t
LEAF_NODE	69:1	69:1	7	tsize_t
NAME	69:9	69:9	5	outlinesize
LEAF_NODE	69:9	69:9	6	outlinesize
LEAF_NODE	69:20	69:20	4	;
SIMPLE_DECL	70:1	70:16	3	int errcode ; errcode = 0 ;
VAR_DECL	70:1	70:5	4	int errcode ; errcode = 0
TYPE	70:1	70:1	5	int
TYPE_NAME	70:1	70:1	6	int
LEAF_NODE	70:1	70:1	7	int
NAME	70:5	70:5	5	errcode
LEAF_NODE	70:5	70:5	6	errcode
LEAF_NODE	0:0	0:0	5	;
INIT	70:5	70:5	5	errcode = 0
ASSIGN	70:5	70:15	6	errcode = 0
LVAL	70:5	70:5	7	errcode
NAME	70:5	70:5	8	errcode
LEAF_NODE	70:5	70:5	9	errcode
ASSIGN_OP	70:13	70:13	7	=
LEAF_NODE	70:13	70:13	8	=
RVAL	70:15	70:15	7	0
FIELD	70:15	70:15	8	0
LEAF_NODE	70:15	70:15	9	0
LEAF_NODE	70:16	70:16	4	;
EXPR_STATEMENT	72:1	72:23	3	imax = imagelength - 1 ;
EXPR	72:1	72:1	4	imax = imagelength - 1
ASSIGN	72:1	72:8	5	imax = imagelength - 1
LVAL	72:1	72:1	6	imax
FIELD	72:1	72:1	7	imax
LEAF_NODE	72:1	72:1	8	imax
ASSIGN_OP	72:6	72:6	6	=
LEAF_NODE	72:6	72:6	7	=
RVAL	72:8	72:22	6	imagelength - 1
FIELD	72:8	72:8	7	imagelength
LEAF_NODE	72:8	72:8	8	imagelength
LEAF_NODE	72:20	72:20	7	-
FIELD	72:22	72:22	7	1
LEAF_NODE	72:22	72:22	8	1
LEAF_NODE	72:23	72:23	4	;
EXPR_STATEMENT	73:1	73:22	3	jmax = imagewidth - 1 ;
EXPR	73:1	73:1	4	jmax = imagewidth - 1
ASSIGN	73:1	73:8	5	jmax = imagewidth - 1
LVAL	73:1	73:1	6	jmax
FIELD	73:1	73:1	7	jmax
LEAF_NODE	73:1	73:1	8	jmax
ASSIGN_OP	73:6	73:6	6	=
LEAF_NODE	73:6	73:6	7	=
RVAL	73:8	73:21	6	imagewidth - 1
FIELD	73:8	73:8	7	imagewidth
LEAF_NODE	73:8	73:8	8	imagewidth
LEAF_NODE	73:19	73:19	7	-
FIELD	73:21	73:21	7	1
LEAF_NODE	73:21	73:21	8	1
LEAF_NODE	73:22	73:22	4	;
EXPR_STATEMENT	74:1	74:63	3	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) ) ;
EXPR	74:1	74:1	4	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
ASSIGN	74:1	74:13	5	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LVAL	74:1	74:1	6	inputline
FIELD	74:1	74:1	7	inputline
LEAF_NODE	74:1	74:1	8	inputline
ASSIGN_OP	74:11	74:11	6	=
LEAF_NODE	74:11	74:11	7	=
RVAL	74:13	74:30	6	( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LEAF_NODE	74:13	74:13	7	(
TYPE_NAME	74:14	74:23	7	unsigned char
LEAF_NODE	74:14	74:14	8	unsigned
LEAF_NODE	74:23	74:23	8	char
LEAF_NODE	74:28	74:28	7	*
LEAF_NODE	74:29	74:29	7	)
FUNCTION_CALL	74:30	74:62	7	_TIFFmalloc ( TIFFScanlineSize ( in ) )
CALLEE	74:30	74:30	8	_TIFFmalloc
LEAF_NODE	74:30	74:30	9	_TIFFmalloc
LEAF_NODE	74:41	74:41	8	(
ARGUMENT	74:42	74:42	8	TIFFScanlineSize ( in )
FUNCTION_CALL	74:42	74:61	9	TIFFScanlineSize ( in )
CALLEE	74:42	74:42	10	TIFFScanlineSize
LEAF_NODE	74:42	74:42	11	TIFFScanlineSize
LEAF_NODE	74:58	74:58	10	(
ARGUMENT	74:59	74:59	10	in
FIELD	74:59	74:59	11	in
LEAF_NODE	74:59	74:59	12	in
LEAF_NODE	74:61	74:61	10	)
LEAF_NODE	74:62	74:62	8	)
LEAF_NODE	74:63	74:63	4	;
EXPR_STATEMENT	75:1	75:88	3	thisline = ( short * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) ) ) ;
EXPR	75:1	75:1	4	thisline = ( short * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) ) )
ASSIGN	75:1	75:12	5	thisline = ( short * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) ) )
LVAL	75:1	75:1	6	thisline
FIELD	75:1	75:1	7	thisline
LEAF_NODE	75:1	75:1	8	thisline
ASSIGN_OP	75:10	75:10	6	=
LEAF_NODE	75:10	75:10	7	=
RVAL	75:12	75:21	6	( short * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) ) )
LEAF_NODE	75:12	75:12	7	(
TYPE_NAME	75:13	75:13	7	short
LEAF_NODE	75:13	75:13	8	short
LEAF_NODE	75:19	75:19	7	*
LEAF_NODE	75:20	75:20	7	)
FUNCTION_CALL	75:21	75:87	7	_TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) ) )
CALLEE	75:21	75:21	8	_TIFFmalloc
LEAF_NODE	75:21	75:21	9	_TIFFmalloc
LEAF_NODE	75:32	75:32	8	(
ARGUMENT	75:33	75:33	8	TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) )
FUNCTION_CALL	75:33	75:86	9	TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) )
CALLEE	75:33	75:33	10	TIFFSafeMultiply
LEAF_NODE	75:33	75:33	11	TIFFSafeMultiply
LEAF_NODE	75:49	75:49	10	(
ARGUMENT	75:50	75:50	10	tmsize_t
FIELD	75:50	75:50	11	tmsize_t
LEAF_NODE	75:50	75:50	12	tmsize_t
LEAF_NODE	75:58	75:58	10	,
ARGUMENT	75:60	75:60	10	imagewidth
FIELD	75:60	75:60	11	imagewidth
LEAF_NODE	75:60	75:60	12	imagewidth
LEAF_NODE	75:70	75:70	10	,
ARGUMENT	75:72	75:72	10	sizeof ( short )
FUNCTION_CALL	75:72	75:85	11	sizeof ( short )
CALLEE	75:72	75:72	12	sizeof
LEAF_NODE	75:72	75:72	13	sizeof
LEAF_NODE	75:79	75:79	12	(
ARGUMENT	75:80	75:80	12	short
FIELD	75:80	75:80	13	short
LEAF_NODE	75:80	75:80	14	short
LEAF_NODE	75:85	75:85	12	)
LEAF_NODE	75:86	75:86	10	)
LEAF_NODE	75:87	75:87	8	)
LEAF_NODE	75:88	75:88	4	;
EXPR_STATEMENT	76:1	76:88	3	nextline = ( short * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) ) ) ;
EXPR	76:1	76:1	4	nextline = ( short * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) ) )
ASSIGN	76:1	76:12	5	nextline = ( short * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) ) )
LVAL	76:1	76:1	6	nextline
FIELD	76:1	76:1	7	nextline
LEAF_NODE	76:1	76:1	8	nextline
ASSIGN_OP	76:10	76:10	6	=
LEAF_NODE	76:10	76:10	7	=
RVAL	76:12	76:21	6	( short * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) ) )
LEAF_NODE	76:12	76:12	7	(
TYPE_NAME	76:13	76:13	7	short
LEAF_NODE	76:13	76:13	8	short
LEAF_NODE	76:19	76:19	7	*
LEAF_NODE	76:20	76:20	7	)
FUNCTION_CALL	76:21	76:87	7	_TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) ) )
CALLEE	76:21	76:21	8	_TIFFmalloc
LEAF_NODE	76:21	76:21	9	_TIFFmalloc
LEAF_NODE	76:32	76:32	8	(
ARGUMENT	76:33	76:33	8	TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) )
FUNCTION_CALL	76:33	76:86	9	TIFFSafeMultiply ( tmsize_t , imagewidth , sizeof ( short ) )
CALLEE	76:33	76:33	10	TIFFSafeMultiply
LEAF_NODE	76:33	76:33	11	TIFFSafeMultiply
LEAF_NODE	76:49	76:49	10	(
ARGUMENT	76:50	76:50	10	tmsize_t
FIELD	76:50	76:50	11	tmsize_t
LEAF_NODE	76:50	76:50	12	tmsize_t
LEAF_NODE	76:58	76:58	10	,
ARGUMENT	76:60	76:60	10	imagewidth
FIELD	76:60	76:60	11	imagewidth
LEAF_NODE	76:60	76:60	12	imagewidth
LEAF_NODE	76:70	76:70	10	,
ARGUMENT	76:72	76:72	10	sizeof ( short )
FUNCTION_CALL	76:72	76:85	11	sizeof ( short )
CALLEE	76:72	76:72	12	sizeof
LEAF_NODE	76:72	76:72	13	sizeof
LEAF_NODE	76:79	76:79	12	(
ARGUMENT	76:80	76:80	12	short
FIELD	76:80	76:80	13	short
LEAF_NODE	76:80	76:80	14	short
LEAF_NODE	76:85	76:85	12	)
LEAF_NODE	76:86	76:86	10	)
LEAF_NODE	76:87	76:87	8	)
LEAF_NODE	76:88	76:88	4	;
EXPR_STATEMENT	77:1	77:36	3	outlinesize = TIFFScanlineSize ( out ) ;
EXPR	77:1	77:1	4	outlinesize = TIFFScanlineSize ( out )
ASSIGN	77:1	77:15	5	outlinesize = TIFFScanlineSize ( out )
LVAL	77:1	77:1	6	outlinesize
FIELD	77:1	77:1	7	outlinesize
LEAF_NODE	77:1	77:1	8	outlinesize
ASSIGN_OP	77:13	77:13	6	=
LEAF_NODE	77:13	77:13	7	=
RVAL	77:15	77:15	6	TIFFScanlineSize ( out )
FUNCTION_CALL	77:15	77:35	7	TIFFScanlineSize ( out )
CALLEE	77:15	77:15	8	TIFFScanlineSize
LEAF_NODE	77:15	77:15	9	TIFFScanlineSize
LEAF_NODE	77:31	77:31	8	(
ARGUMENT	77:32	77:32	8	out
FIELD	77:32	77:32	9	out
LEAF_NODE	77:32	77:32	10	out
LEAF_NODE	77:35	77:35	8	)
LEAF_NODE	77:36	77:36	4	;
EXPR_STATEMENT	78:1	78:53	3	outline = ( unsigned char * ) _TIFFmalloc ( outlinesize ) ;
EXPR	78:1	78:1	4	outline = ( unsigned char * ) _TIFFmalloc ( outlinesize )
ASSIGN	78:1	78:11	5	outline = ( unsigned char * ) _TIFFmalloc ( outlinesize )
LVAL	78:1	78:1	6	outline
FIELD	78:1	78:1	7	outline
LEAF_NODE	78:1	78:1	8	outline
ASSIGN_OP	78:9	78:9	6	=
LEAF_NODE	78:9	78:9	7	=
RVAL	78:11	78:29	6	( unsigned char * ) _TIFFmalloc ( outlinesize )
LEAF_NODE	78:11	78:11	7	(
TYPE_NAME	78:12	78:21	7	unsigned char
LEAF_NODE	78:12	78:12	8	unsigned
LEAF_NODE	78:21	78:21	8	char
LEAF_NODE	78:26	78:26	7	*
LEAF_NODE	78:27	78:27	7	)
FUNCTION_CALL	78:29	78:52	7	_TIFFmalloc ( outlinesize )
CALLEE	78:29	78:29	8	_TIFFmalloc
LEAF_NODE	78:29	78:29	9	_TIFFmalloc
LEAF_NODE	78:40	78:40	8	(
ARGUMENT	78:41	78:41	8	outlinesize
FIELD	78:41	78:41	9	outlinesize
LEAF_NODE	78:41	78:41	10	outlinesize
LEAF_NODE	78:52	78:52	8	)
LEAF_NODE	78:53	78:53	4	;
SELECTION	79:1	79:55	3	
KEYWORD	79:1	79:1	4	if
LEAF_NODE	79:1	79:1	5	if
LEAF_NODE	79:4	79:4	4	(
CONDITION	79:5	79:5	4	! ( inputline && thisline && nextline && outline )
EXPR	79:5	79:5	5	! ( inputline && thisline && nextline && outline )
UNARY_EXPR	79:5	79:52	6	! ( inputline && thisline && nextline && outline )
UNARY_OPERATOR	79:5	79:5	7	!
LEAF_NODE	79:5	79:5	8	!
LEAF_NODE	79:7	79:7	7	(
AND	79:8	79:21	7	inputline && thisline && nextline && outline
EXPR	79:8	79:8	8	inputline
FIELD	79:8	79:8	9	inputline
LEAF_NODE	79:8	79:8	10	inputline
LEAF_NODE	79:18	79:18	8	&&
EXPR	79:21	79:21	8	thisline && nextline && outline
AND	79:21	79:33	9	thisline && nextline && outline
EXPR	79:21	79:21	10	thisline
FIELD	79:21	79:21	11	thisline
LEAF_NODE	79:21	79:21	12	thisline
LEAF_NODE	79:30	79:30	10	&&
EXPR	79:33	79:33	10	nextline && outline
AND	79:33	79:45	11	nextline && outline
EXPR	79:33	79:33	12	nextline
FIELD	79:33	79:33	13	nextline
LEAF_NODE	79:33	79:33	14	nextline
LEAF_NODE	79:42	79:42	12	&&
EXPR	79:45	79:45	12	outline
FIELD	79:45	79:45	13	outline
LEAF_NODE	79:45	79:45	14	outline
LEAF_NODE	79:52	79:52	7	)
LEAF_NODE	79:53	79:53	4	)
STATEMENTS	79:55	82:1	4	
LEAF_NODE	79:55	79:55	5	{
STATEMENTS	80:5	81:5	5	
EXPR_STATEMENT	80:5	80:40	6	fprintf ( stderr , "Out of memory.\n" ) ;
EXPR	80:5	80:5	7	fprintf ( stderr , "Out of memory.\n" )
FUNCTION_CALL	80:5	80:39	8	fprintf ( stderr , "Out of memory.\n" )
CALLEE	80:5	80:5	9	fprintf
LEAF_NODE	80:5	80:5	10	fprintf
LEAF_NODE	80:12	80:12	9	(
ARGUMENT	80:13	80:13	9	stderr
FIELD	80:13	80:13	10	stderr
LEAF_NODE	80:13	80:13	11	stderr
LEAF_NODE	80:19	80:19	9	,
ARGUMENT	80:21	80:21	9	"Out of memory.\n"
FIELD	80:21	80:21	10	"Out of memory.\n"
LEAF_NODE	80:21	80:21	11	"Out of memory.\n"
LEAF_NODE	80:39	80:39	9	)
LEAF_NODE	80:40	80:40	7	;
JUMP_STATEMENT	81:5	81:23	6	goto skip_on_error ;
KEYWORD	81:5	81:5	7	goto
LEAF_NODE	81:5	81:5	8	goto
DESTINATION	81:10	81:10	7	skip_on_error
LEAF_NODE	81:10	81:10	8	skip_on_error
LEAF_NODE	81:23	81:23	7	;
LEAF_NODE	82:1	82:1	5	}
SELECTION	87:1	88:12	3	
KEYWORD	87:1	87:1	4	if
LEAF_NODE	87:1	87:1	5	if
LEAF_NODE	87:4	87:4	4	(
CONDITION	87:5	87:5	4	TIFFReadScanline ( in , inputline , 0 , 0 ) <= 0
EXPR	87:5	87:46	5	TIFFReadScanline ( in , inputline , 0 , 0 ) <= 0
FUNCTION_CALL	87:5	87:41	6	TIFFReadScanline ( in , inputline , 0 , 0 )
CALLEE	87:5	87:5	7	TIFFReadScanline
LEAF_NODE	87:5	87:5	8	TIFFReadScanline
LEAF_NODE	87:21	87:21	7	(
ARGUMENT	87:22	87:22	7	in
FIELD	87:22	87:22	8	in
LEAF_NODE	87:22	87:22	9	in
LEAF_NODE	87:24	87:24	7	,
ARGUMENT	87:26	87:26	7	inputline
FIELD	87:26	87:26	8	inputline
LEAF_NODE	87:26	87:26	9	inputline
LEAF_NODE	87:35	87:35	7	,
ARGUMENT	87:37	87:37	7	0
FIELD	87:37	87:37	8	0
LEAF_NODE	87:37	87:37	9	0
LEAF_NODE	87:38	87:38	7	,
ARGUMENT	87:40	87:40	7	0
FIELD	87:40	87:40	8	0
LEAF_NODE	87:40	87:40	9	0
LEAF_NODE	87:41	87:41	7	)
REL_OPERATOR	87:43	87:43	6	<=
LEAF_NODE	87:43	87:43	7	<=
FIELD	87:46	87:46	6	0
LEAF_NODE	87:46	87:46	7	0
LEAF_NODE	87:47	87:47	4	)
STATEMENTS	88:12	88:12	4	
JUMP_STATEMENT	88:12	88:30	5	goto skip_on_error ;
KEYWORD	88:12	88:12	6	goto
LEAF_NODE	88:12	88:12	7	goto
DESTINATION	88:17	88:17	6	skip_on_error
LEAF_NODE	88:17	88:17	7	skip_on_error
LEAF_NODE	88:30	88:30	6	;
EXPR_STATEMENT	90:1	90:18	3	inptr = inputline ;
EXPR	90:1	90:1	4	inptr = inputline
ASSIGN	90:1	90:9	5	inptr = inputline
LVAL	90:1	90:1	6	inptr
FIELD	90:1	90:1	7	inptr
LEAF_NODE	90:1	90:1	8	inptr
ASSIGN_OP	90:7	90:7	6	=
LEAF_NODE	90:7	90:7	7	=
RVAL	90:9	90:9	6	inputline
FIELD	90:9	90:9	7	inputline
LEAF_NODE	90:9	90:9	8	inputline
LEAF_NODE	90:18	90:18	4	;
EXPR_STATEMENT	91:1	91:19	3	nextptr = nextline ;
EXPR	91:1	91:1	4	nextptr = nextline
ASSIGN	91:1	91:11	5	nextptr = nextline
LVAL	91:1	91:1	6	nextptr
FIELD	91:1	91:1	7	nextptr
LEAF_NODE	91:1	91:1	8	nextptr
ASSIGN_OP	91:9	91:9	6	=
LEAF_NODE	91:9	91:9	7	=
RVAL	91:11	91:11	6	nextline
FIELD	91:11	91:11	7	nextline
LEAF_NODE	91:11	91:11	8	nextline
LEAF_NODE	91:19	91:19	4	;
ITERATION	92:1	93:2	3	
KEYWORD	92:1	92:1	4	for
LEAF_NODE	92:1	92:1	5	for
LEAF_NODE	92:5	92:5	4	(
FOR_INIT	92:6	92:11	4	j = 0 ;
EXPR	92:6	92:6	5	j = 0
ASSIGN	92:6	92:10	6	j = 0
LVAL	92:6	92:6	7	j
FIELD	92:6	92:6	8	j
LEAF_NODE	92:6	92:6	9	j
ASSIGN_OP	92:8	92:8	7	=
LEAF_NODE	92:8	92:8	8	=
RVAL	92:10	92:10	7	0
FIELD	92:10	92:10	8	0
LEAF_NODE	92:10	92:10	9	0
LEAF_NODE	92:11	92:11	5	;
CONDITION	92:13	92:13	4	j < imagewidth
EXPR	92:13	92:17	5	j < imagewidth
FIELD	92:13	92:13	6	j
LEAF_NODE	92:13	92:13	7	j
REL_OPERATOR	92:15	92:15	6	<
LEAF_NODE	92:15	92:15	7	<
FIELD	92:17	92:17	6	imagewidth
LEAF_NODE	92:17	92:17	7	imagewidth
LEAF_NODE	92:27	92:27	4	;
FOR_EXPR	92:29	92:29	4	++ j
EXPR	92:29	92:31	5	++ j
LEAF_NODE	92:29	92:29	6	++
FIELD	92:31	92:31	6	j
LEAF_NODE	92:31	92:31	7	j
LEAF_NODE	92:32	92:32	4	)
STATEMENTS	93:2	93:2	4	
EXPR_STATEMENT	93:2	93:23	5	* nextptr ++ = * inptr ++ ;
EXPR	93:2	93:2	6	* nextptr ++ = * inptr ++
ASSIGN	93:2	93:15	7	* nextptr ++ = * inptr ++
LVAL	93:2	93:2	8	* nextptr ++
UNARY_EXPR	93:2	93:3	9	* nextptr ++
UNARY_OPERATOR	93:2	93:2	10	*
LEAF_NODE	93:2	93:2	11	*
FIELD	93:3	93:10	10	nextptr ++
LEAF_NODE	93:3	93:3	11	nextptr
LEAF_NODE	93:10	93:10	11	++
ASSIGN_OP	93:13	93:13	8	=
LEAF_NODE	93:13	93:13	9	=
RVAL	93:15	93:15	8	* inptr ++
UNARY_EXPR	93:15	93:16	9	* inptr ++
UNARY_OPERATOR	93:15	93:15	10	*
LEAF_NODE	93:15	93:15	11	*
FIELD	93:16	93:21	10	inptr ++
LEAF_NODE	93:16	93:16	11	inptr
LEAF_NODE	93:21	93:21	11	++
LEAF_NODE	93:23	93:23	6	;
ITERATION	94:1	94:35	3	
KEYWORD	94:1	94:1	4	for
LEAF_NODE	94:1	94:1	5	for
LEAF_NODE	94:5	94:5	4	(
FOR_INIT	94:6	94:11	4	i = 1 ;
EXPR	94:6	94:6	5	i = 1
ASSIGN	94:6	94:10	6	i = 1
LVAL	94:6	94:6	7	i
FIELD	94:6	94:6	8	i
LEAF_NODE	94:6	94:6	9	i
ASSIGN_OP	94:8	94:8	7	=
LEAF_NODE	94:8	94:8	8	=
RVAL	94:10	94:10	7	1
FIELD	94:10	94:10	8	1
LEAF_NODE	94:10	94:10	9	1
LEAF_NODE	94:11	94:11	5	;
CONDITION	94:13	94:13	4	i < imagelength
EXPR	94:13	94:17	5	i < imagelength
FIELD	94:13	94:13	6	i
LEAF_NODE	94:13	94:13	7	i
REL_OPERATOR	94:15	94:15	6	<
LEAF_NODE	94:15	94:15	7	<
FIELD	94:17	94:17	6	imagelength
LEAF_NODE	94:17	94:17	7	imagelength
LEAF_NODE	94:28	94:28	4	;
FOR_EXPR	94:30	94:30	4	++ i
EXPR	94:30	94:32	5	++ i
LEAF_NODE	94:30	94:30	6	++
FIELD	94:32	94:32	6	i
LEAF_NODE	94:32	94:32	7	i
LEAF_NODE	94:33	94:33	4	)
STATEMENTS	94:35	139:1	4	
LEAF_NODE	94:35	94:35	5	{
STATEMENTS	95:2	137:2	5	
EXPR_STATEMENT	95:2	95:19	6	tmpptr = thisline ;
EXPR	95:2	95:2	7	tmpptr = thisline
ASSIGN	95:2	95:11	8	tmpptr = thisline
LVAL	95:2	95:2	9	tmpptr
FIELD	95:2	95:2	10	tmpptr
LEAF_NODE	95:2	95:2	11	tmpptr
ASSIGN_OP	95:9	95:9	9	=
LEAF_NODE	95:9	95:9	10	=
RVAL	95:11	95:11	9	thisline
FIELD	95:11	95:11	10	thisline
LEAF_NODE	95:11	95:11	11	thisline
LEAF_NODE	95:19	95:19	7	;
EXPR_STATEMENT	96:2	96:21	6	thisline = nextline ;
EXPR	96:2	96:2	7	thisline = nextline
ASSIGN	96:2	96:13	8	thisline = nextline
LVAL	96:2	96:2	9	thisline
FIELD	96:2	96:2	10	thisline
LEAF_NODE	96:2	96:2	11	thisline
ASSIGN_OP	96:11	96:11	9	=
LEAF_NODE	96:11	96:11	10	=
RVAL	96:13	96:13	9	nextline
FIELD	96:13	96:13	10	nextline
LEAF_NODE	96:13	96:13	11	nextline
LEAF_NODE	96:21	96:21	7	;
EXPR_STATEMENT	97:2	97:19	6	nextline = tmpptr ;
EXPR	97:2	97:2	7	nextline = tmpptr
ASSIGN	97:2	97:13	8	nextline = tmpptr
LVAL	97:2	97:2	9	nextline
FIELD	97:2	97:2	10	nextline
LEAF_NODE	97:2	97:2	11	nextline
ASSIGN_OP	97:11	97:11	9	=
LEAF_NODE	97:11	97:11	10	=
RVAL	97:13	97:13	9	tmpptr
FIELD	97:13	97:13	10	tmpptr
LEAF_NODE	97:13	97:13	11	tmpptr
LEAF_NODE	97:19	97:19	7	;
EXPR_STATEMENT	98:2	98:24	6	lastline = ( i == imax ) ;
EXPR	98:2	98:2	7	lastline = ( i == imax )
ASSIGN	98:2	98:13	8	lastline = ( i == imax )
LVAL	98:2	98:2	9	lastline
FIELD	98:2	98:2	10	lastline
LEAF_NODE	98:2	98:2	11	lastline
ASSIGN_OP	98:11	98:11	9	=
LEAF_NODE	98:11	98:11	10	=
RVAL	98:13	98:23	9	( i == imax )
LEAF_NODE	98:13	98:13	10	(
FIELD	98:14	98:14	10	i
LEAF_NODE	98:14	98:14	11	i
EQ_OPERATOR	98:16	98:16	10	==
LEAF_NODE	98:16	98:16	11	==
FIELD	98:19	98:19	10	imax
LEAF_NODE	98:19	98:19	11	imax
LEAF_NODE	98:23	98:23	10	)
LEAF_NODE	98:24	98:24	7	;
SELECTION	99:2	100:3	6	
KEYWORD	99:2	99:2	7	if
LEAF_NODE	99:2	99:2	8	if
LEAF_NODE	99:5	99:5	7	(
CONDITION	99:6	99:6	7	TIFFReadScanline ( in , inputline , i , 0 ) <= 0
EXPR	99:6	99:47	8	TIFFReadScanline ( in , inputline , i , 0 ) <= 0
FUNCTION_CALL	99:6	99:42	9	TIFFReadScanline ( in , inputline , i , 0 )
CALLEE	99:6	99:6	10	TIFFReadScanline
LEAF_NODE	99:6	99:6	11	TIFFReadScanline
LEAF_NODE	99:22	99:22	10	(
ARGUMENT	99:23	99:23	10	in
FIELD	99:23	99:23	11	in
LEAF_NODE	99:23	99:23	12	in
LEAF_NODE	99:25	99:25	10	,
ARGUMENT	99:27	99:27	10	inputline
FIELD	99:27	99:27	11	inputline
LEAF_NODE	99:27	99:27	12	inputline
LEAF_NODE	99:36	99:36	10	,
ARGUMENT	99:38	99:38	10	i
FIELD	99:38	99:38	11	i
LEAF_NODE	99:38	99:38	12	i
LEAF_NODE	99:39	99:39	10	,
ARGUMENT	99:41	99:41	10	0
FIELD	99:41	99:41	11	0
LEAF_NODE	99:41	99:41	12	0
LEAF_NODE	99:42	99:42	10	)
REL_OPERATOR	99:44	99:44	9	<=
LEAF_NODE	99:44	99:44	10	<=
FIELD	99:47	99:47	9	0
LEAF_NODE	99:47	99:47	10	0
LEAF_NODE	99:48	99:48	7	)
STATEMENTS	100:3	100:3	7	
JUMP_STATEMENT	100:3	100:21	8	goto skip_on_error ;
KEYWORD	100:3	100:3	9	goto
LEAF_NODE	100:3	100:3	10	goto
DESTINATION	100:8	100:8	9	skip_on_error
LEAF_NODE	100:8	100:8	10	skip_on_error
LEAF_NODE	100:21	100:21	9	;
EXPR_STATEMENT	101:2	101:19	6	inptr = inputline ;
EXPR	101:2	101:2	7	inptr = inputline
ASSIGN	101:2	101:10	8	inptr = inputline
LVAL	101:2	101:2	9	inptr
FIELD	101:2	101:2	10	inptr
LEAF_NODE	101:2	101:2	11	inptr
ASSIGN_OP	101:8	101:8	9	=
LEAF_NODE	101:8	101:8	10	=
RVAL	101:10	101:10	9	inputline
FIELD	101:10	101:10	10	inputline
LEAF_NODE	101:10	101:10	11	inputline
LEAF_NODE	101:19	101:19	7	;
EXPR_STATEMENT	102:2	102:20	6	nextptr = nextline ;
EXPR	102:2	102:2	7	nextptr = nextline
ASSIGN	102:2	102:12	8	nextptr = nextline
LVAL	102:2	102:2	9	nextptr
FIELD	102:2	102:2	10	nextptr
LEAF_NODE	102:2	102:2	11	nextptr
ASSIGN_OP	102:10	102:10	9	=
LEAF_NODE	102:10	102:10	10	=
RVAL	102:12	102:12	9	nextline
FIELD	102:12	102:12	10	nextline
LEAF_NODE	102:12	102:12	11	nextline
LEAF_NODE	102:20	102:20	7	;
ITERATION	103:2	104:3	6	
KEYWORD	103:2	103:2	7	for
LEAF_NODE	103:2	103:2	8	for
LEAF_NODE	103:6	103:6	7	(
FOR_INIT	103:7	103:12	7	j = 0 ;
EXPR	103:7	103:7	8	j = 0
ASSIGN	103:7	103:11	9	j = 0
LVAL	103:7	103:7	10	j
FIELD	103:7	103:7	11	j
LEAF_NODE	103:7	103:7	12	j
ASSIGN_OP	103:9	103:9	10	=
LEAF_NODE	103:9	103:9	11	=
RVAL	103:11	103:11	10	0
FIELD	103:11	103:11	11	0
LEAF_NODE	103:11	103:11	12	0
LEAF_NODE	103:12	103:12	8	;
CONDITION	103:14	103:14	7	j < imagewidth
EXPR	103:14	103:18	8	j < imagewidth
FIELD	103:14	103:14	9	j
LEAF_NODE	103:14	103:14	10	j
REL_OPERATOR	103:16	103:16	9	<
LEAF_NODE	103:16	103:16	10	<
FIELD	103:18	103:18	9	imagewidth
LEAF_NODE	103:18	103:18	10	imagewidth
LEAF_NODE	103:28	103:28	7	;
FOR_EXPR	103:30	103:30	7	++ j
EXPR	103:30	103:32	8	++ j
LEAF_NODE	103:30	103:30	9	++
FIELD	103:32	103:32	9	j
LEAF_NODE	103:32	103:32	10	j
LEAF_NODE	103:33	103:33	7	)
STATEMENTS	104:3	104:3	7	
EXPR_STATEMENT	104:3	104:24	8	* nextptr ++ = * inptr ++ ;
EXPR	104:3	104:3	9	* nextptr ++ = * inptr ++
ASSIGN	104:3	104:16	10	* nextptr ++ = * inptr ++
LVAL	104:3	104:3	11	* nextptr ++
UNARY_EXPR	104:3	104:4	12	* nextptr ++
UNARY_OPERATOR	104:3	104:3	13	*
LEAF_NODE	104:3	104:3	14	*
FIELD	104:4	104:11	13	nextptr ++
LEAF_NODE	104:4	104:4	14	nextptr
LEAF_NODE	104:11	104:11	14	++
ASSIGN_OP	104:14	104:14	11	=
LEAF_NODE	104:14	104:14	12	=
RVAL	104:16	104:16	11	* inptr ++
UNARY_EXPR	104:16	104:17	12	* inptr ++
UNARY_OPERATOR	104:16	104:16	13	*
LEAF_NODE	104:16	104:16	14	*
FIELD	104:17	104:22	13	inptr ++
LEAF_NODE	104:17	104:17	14	inptr
LEAF_NODE	104:22	104:22	14	++
LEAF_NODE	104:24	104:24	9	;
EXPR_STATEMENT	105:2	105:20	6	thisptr = thisline ;
EXPR	105:2	105:2	7	thisptr = thisline
ASSIGN	105:2	105:12	8	thisptr = thisline
LVAL	105:2	105:2	9	thisptr
FIELD	105:2	105:2	10	thisptr
LEAF_NODE	105:2	105:2	11	thisptr
ASSIGN_OP	105:10	105:10	9	=
LEAF_NODE	105:10	105:10	10	=
RVAL	105:12	105:12	9	thisline
FIELD	105:12	105:12	10	thisline
LEAF_NODE	105:12	105:12	11	thisline
LEAF_NODE	105:20	105:20	7	;
EXPR_STATEMENT	106:2	106:20	6	nextptr = nextline ;
EXPR	106:2	106:2	7	nextptr = nextline
ASSIGN	106:2	106:12	8	nextptr = nextline
LVAL	106:2	106:2	9	nextptr
FIELD	106:2	106:2	10	nextptr
LEAF_NODE	106:2	106:2	11	nextptr
ASSIGN_OP	106:10	106:10	9	=
LEAF_NODE	106:10	106:10	10	=
RVAL	106:12	106:12	9	nextline
FIELD	106:12	106:12	10	nextline
LEAF_NODE	106:12	106:12	11	nextline
LEAF_NODE	106:20	106:20	7	;
EXPR_STATEMENT	107:2	107:47	6	_TIFFmemset ( outptr = outline , 0 , outlinesize ) ;
EXPR	107:2	107:2	7	_TIFFmemset ( outptr = outline , 0 , outlinesize )
FUNCTION_CALL	107:2	107:46	8	_TIFFmemset ( outptr = outline , 0 , outlinesize )
CALLEE	107:2	107:2	9	_TIFFmemset
LEAF_NODE	107:2	107:2	10	_TIFFmemset
LEAF_NODE	107:13	107:13	9	(
ARGUMENT	107:14	107:14	9	outptr = outline
ASSIGN	107:14	107:23	10	outptr = outline
LVAL	107:14	107:14	11	outptr
FIELD	107:14	107:14	12	outptr
LEAF_NODE	107:14	107:14	13	outptr
ASSIGN_OP	107:21	107:21	11	=
LEAF_NODE	107:21	107:21	12	=
RVAL	107:23	107:23	11	outline
FIELD	107:23	107:23	12	outline
LEAF_NODE	107:23	107:23	13	outline
LEAF_NODE	107:30	107:30	9	,
ARGUMENT	107:32	107:32	9	0
FIELD	107:32	107:32	10	0
LEAF_NODE	107:32	107:32	11	0
LEAF_NODE	107:33	107:33	9	,
ARGUMENT	107:35	107:35	9	outlinesize
FIELD	107:35	107:35	10	outlinesize
LEAF_NODE	107:35	107:35	11	outlinesize
LEAF_NODE	107:46	107:46	9	)
LEAF_NODE	107:47	107:47	7	;
EXPR_STATEMENT	108:2	108:12	6	bit = 0x80 ;
EXPR	108:2	108:2	7	bit = 0x80
ASSIGN	108:2	108:8	8	bit = 0x80
LVAL	108:2	108:2	9	bit
FIELD	108:2	108:2	10	bit
LEAF_NODE	108:2	108:2	11	bit
ASSIGN_OP	108:6	108:6	9	=
LEAF_NODE	108:6	108:6	10	=
RVAL	108:8	108:8	9	0x80
FIELD	108:8	108:8	10	0x80
LEAF_NODE	108:8	108:8	11	0x80
LEAF_NODE	108:12	108:12	7	;
ITERATION	109:2	109:35	6	
KEYWORD	109:2	109:2	7	for
LEAF_NODE	109:2	109:2	8	for
LEAF_NODE	109:6	109:6	7	(
FOR_INIT	109:7	109:12	7	j = 0 ;
EXPR	109:7	109:7	8	j = 0
ASSIGN	109:7	109:11	9	j = 0
LVAL	109:7	109:7	10	j
FIELD	109:7	109:7	11	j
LEAF_NODE	109:7	109:7	12	j
ASSIGN_OP	109:9	109:9	10	=
LEAF_NODE	109:9	109:9	11	=
RVAL	109:11	109:11	10	0
FIELD	109:11	109:11	11	0
LEAF_NODE	109:11	109:11	12	0
LEAF_NODE	109:12	109:12	8	;
CONDITION	109:14	109:14	7	j < imagewidth
EXPR	109:14	109:18	8	j < imagewidth
FIELD	109:14	109:14	9	j
LEAF_NODE	109:14	109:14	10	j
REL_OPERATOR	109:16	109:16	9	<
LEAF_NODE	109:16	109:16	10	<
FIELD	109:18	109:18	9	imagewidth
LEAF_NODE	109:18	109:18	10	imagewidth
LEAF_NODE	109:28	109:28	7	;
FOR_EXPR	109:30	109:30	7	++ j
EXPR	109:30	109:32	8	++ j
LEAF_NODE	109:30	109:30	9	++
FIELD	109:32	109:32	9	j
LEAF_NODE	109:32	109:32	10	j
LEAF_NODE	109:33	109:33	7	)
STATEMENTS	109:35	136:2	7	
LEAF_NODE	109:35	109:35	8	{
STATEMENTS	110:3	129:3	8	
LEAF_NODE	110:3	110:3	9	register
SIMPLE_DECL	110:12	110:17	9	int v ;
VAR_DECL	110:12	110:16	10	int v
TYPE	110:12	110:12	11	int
TYPE_NAME	110:12	110:12	12	int
LEAF_NODE	110:12	110:12	13	int
NAME	110:16	110:16	11	v
LEAF_NODE	110:16	110:16	12	v
LEAF_NODE	110:17	110:17	10	;
EXPR_STATEMENT	112:3	112:26	9	lastpixel = ( j == jmax ) ;
EXPR	112:3	112:3	10	lastpixel = ( j == jmax )
ASSIGN	112:3	112:15	11	lastpixel = ( j == jmax )
LVAL	112:3	112:3	12	lastpixel
FIELD	112:3	112:3	13	lastpixel
LEAF_NODE	112:3	112:3	14	lastpixel
ASSIGN_OP	112:13	112:13	12	=
LEAF_NODE	112:13	112:13	13	=
RVAL	112:15	112:25	12	( j == jmax )
LEAF_NODE	112:15	112:15	13	(
FIELD	112:16	112:16	13	j
LEAF_NODE	112:16	112:16	14	j
EQ_OPERATOR	112:18	112:18	13	==
LEAF_NODE	112:18	112:18	14	==
FIELD	112:21	112:21	13	jmax
LEAF_NODE	112:21	112:21	14	jmax
LEAF_NODE	112:25	112:25	13	)
LEAF_NODE	112:26	112:26	10	;
EXPR_STATEMENT	113:3	113:17	9	v = * thisptr ++ ;
EXPR	113:3	113:3	10	v = * thisptr ++
ASSIGN	113:3	113:7	11	v = * thisptr ++
LVAL	113:3	113:3	12	v
FIELD	113:3	113:3	13	v
LEAF_NODE	113:3	113:3	14	v
ASSIGN_OP	113:5	113:5	12	=
LEAF_NODE	113:5	113:5	13	=
RVAL	113:7	113:7	12	* thisptr ++
UNARY_EXPR	113:7	113:8	13	* thisptr ++
UNARY_OPERATOR	113:7	113:7	14	*
LEAF_NODE	113:7	113:7	15	*
FIELD	113:8	113:15	14	thisptr ++
LEAF_NODE	113:8	113:8	15	thisptr
LEAF_NODE	113:15	113:15	15	++
LEAF_NODE	113:17	113:17	10	;
SELECTION	114:3	115:4	9	
KEYWORD	114:3	114:3	10	if
LEAF_NODE	114:3	114:3	11	if
LEAF_NODE	114:6	114:6	10	(
CONDITION	114:7	114:7	10	v < 0
EXPR	114:7	114:11	11	v < 0
FIELD	114:7	114:7	12	v
LEAF_NODE	114:7	114:7	13	v
REL_OPERATOR	114:9	114:9	12	<
LEAF_NODE	114:9	114:9	13	<
FIELD	114:11	114:11	12	0
LEAF_NODE	114:11	114:11	13	0
LEAF_NODE	114:12	114:12	10	)
STATEMENTS	115:4	115:4	10	
EXPR_STATEMENT	115:4	115:9	11	v = 0 ;
EXPR	115:4	115:4	12	v = 0
ASSIGN	115:4	115:8	13	v = 0
LVAL	115:4	115:4	14	v
FIELD	115:4	115:4	15	v
LEAF_NODE	115:4	115:4	16	v
ASSIGN_OP	115:6	115:6	14	=
LEAF_NODE	115:6	115:6	15	=
RVAL	115:8	115:8	14	0
FIELD	115:8	115:8	15	0
LEAF_NODE	115:8	115:8	16	0
LEAF_NODE	115:9	115:9	12	;
SELECTION	116:3	116:8	9	
KEYWORD	116:3	116:3	10	else
LEAF_NODE	116:3	116:3	11	else
STATEMENTS	116:8	116:8	10	
SELECTION	116:8	117:4	11	
KEYWORD	116:8	116:8	12	if
LEAF_NODE	116:8	116:8	13	if
LEAF_NODE	116:11	116:11	12	(
CONDITION	116:12	116:12	12	v > 255
EXPR	116:12	116:16	13	v > 255
FIELD	116:12	116:12	14	v
LEAF_NODE	116:12	116:12	15	v
REL_OPERATOR	116:14	116:14	14	>
LEAF_NODE	116:14	116:14	15	>
FIELD	116:16	116:16	14	255
LEAF_NODE	116:16	116:16	15	255
LEAF_NODE	116:19	116:19	12	)
STATEMENTS	117:4	117:4	12	
EXPR_STATEMENT	117:4	117:11	13	v = 255 ;
EXPR	117:4	117:4	14	v = 255
ASSIGN	117:4	117:8	15	v = 255
LVAL	117:4	117:4	16	v
FIELD	117:4	117:4	17	v
LEAF_NODE	117:4	117:4	18	v
ASSIGN_OP	117:6	117:6	16	=
LEAF_NODE	117:6	117:6	17	=
RVAL	117:8	117:8	16	255
FIELD	117:8	117:8	17	255
LEAF_NODE	117:8	117:8	18	255
LEAF_NODE	117:11	117:11	14	;
SELECTION	118:3	118:22	9	
KEYWORD	118:3	118:3	10	if
LEAF_NODE	118:3	118:3	11	if
LEAF_NODE	118:6	118:6	10	(
CONDITION	118:7	118:7	10	v > threshold
EXPR	118:7	118:11	11	v > threshold
FIELD	118:7	118:7	12	v
LEAF_NODE	118:7	118:7	13	v
REL_OPERATOR	118:9	118:9	12	>
LEAF_NODE	118:9	118:9	13	>
FIELD	118:11	118:11	12	threshold
LEAF_NODE	118:11	118:11	13	threshold
LEAF_NODE	118:20	118:20	10	)
STATEMENTS	118:22	121:3	10	
LEAF_NODE	118:22	118:22	11	{
STATEMENTS	119:4	120:4	11	
EXPR_STATEMENT	119:4	119:18	12	* outptr |= bit ;
EXPR	119:4	119:4	13	* outptr |= bit
ASSIGN	119:4	119:15	14	* outptr |= bit
LVAL	119:4	119:4	15	* outptr
UNARY_EXPR	119:4	119:5	16	* outptr
UNARY_OPERATOR	119:4	119:4	17	*
LEAF_NODE	119:4	119:4	18	*
FIELD	119:5	119:5	17	outptr
LEAF_NODE	119:5	119:5	18	outptr
ASSIGN_OP	119:12	119:12	15	|=
LEAF_NODE	119:12	119:12	16	|=
RVAL	119:15	119:15	15	bit
FIELD	119:15	119:15	16	bit
LEAF_NODE	119:15	119:15	17	bit
LEAF_NODE	119:18	119:18	13	;
EXPR_STATEMENT	120:4	120:12	12	v -= 255 ;
EXPR	120:4	120:4	13	v -= 255
ASSIGN	120:4	120:9	14	v -= 255
LVAL	120:4	120:4	15	v
FIELD	120:4	120:4	16	v
LEAF_NODE	120:4	120:4	17	v
ASSIGN_OP	120:6	120:6	15	-=
LEAF_NODE	120:6	120:6	16	-=
RVAL	120:9	120:9	15	255
FIELD	120:9	120:9	16	255
LEAF_NODE	120:9	120:9	17	255
LEAF_NODE	120:12	120:12	13	;
LEAF_NODE	121:3	121:3	11	}
EXPR_STATEMENT	122:3	122:12	9	bit >>= 1 ;
EXPR	122:3	122:3	10	bit >>= 1
ASSIGN	122:3	122:11	11	bit >>= 1
LVAL	122:3	122:3	12	bit
FIELD	122:3	122:3	13	bit
LEAF_NODE	122:3	122:3	14	bit
ASSIGN_OP	122:7	122:7	12	>>=
LEAF_NODE	122:7	122:7	13	>>=
RVAL	122:11	122:11	12	1
FIELD	122:11	122:11	13	1
LEAF_NODE	122:11	122:11	14	1
LEAF_NODE	122:12	122:12	10	;
SELECTION	123:3	123:17	9	
KEYWORD	123:3	123:3	10	if
LEAF_NODE	123:3	123:3	11	if
LEAF_NODE	123:6	123:6	10	(
CONDITION	123:7	123:7	10	bit == 0
EXPR	123:7	123:14	11	bit == 0
FIELD	123:7	123:7	12	bit
LEAF_NODE	123:7	123:7	13	bit
EQ_OPERATOR	123:11	123:11	12	==
LEAF_NODE	123:11	123:11	13	==
FIELD	123:14	123:14	12	0
LEAF_NODE	123:14	123:14	13	0
LEAF_NODE	123:15	123:15	10	)
STATEMENTS	123:17	126:3	10	
LEAF_NODE	123:17	123:17	11	{
STATEMENTS	124:4	125:4	11	
EXPR_STATEMENT	124:4	124:12	12	outptr ++ ;
EXPR	124:4	124:4	13	outptr ++
FIELD	124:4	124:10	14	outptr ++
LEAF_NODE	124:4	124:4	15	outptr
LEAF_NODE	124:10	124:10	15	++
LEAF_NODE	124:12	124:12	13	;
EXPR_STATEMENT	125:4	125:14	12	bit = 0x80 ;
EXPR	125:4	125:4	13	bit = 0x80
ASSIGN	125:4	125:10	14	bit = 0x80
LVAL	125:4	125:4	15	bit
FIELD	125:4	125:4	16	bit
LEAF_NODE	125:4	125:4	17	bit
ASSIGN_OP	125:8	125:8	15	=
LEAF_NODE	125:8	125:8	16	=
RVAL	125:10	125:10	15	0x80
FIELD	125:10	125:10	16	0x80
LEAF_NODE	125:10	125:10	17	0x80
LEAF_NODE	125:14	125:14	13	;
LEAF_NODE	126:3	126:3	11	}
SELECTION	127:3	128:4	9	
KEYWORD	127:3	127:3	10	if
LEAF_NODE	127:3	127:3	11	if
LEAF_NODE	127:6	127:6	10	(
CONDITION	127:7	127:7	10	! lastpixel
EXPR	127:7	127:7	11	! lastpixel
UNARY_EXPR	127:7	127:8	12	! lastpixel
UNARY_OPERATOR	127:7	127:7	13	!
LEAF_NODE	127:7	127:7	14	!
FIELD	127:8	127:8	13	lastpixel
LEAF_NODE	127:8	127:8	14	lastpixel
LEAF_NODE	127:17	127:17	10	)
STATEMENTS	128:4	128:4	10	
LEAF_NODE	128:4	128:4	11	thisptr
LEAF_NODE	128:11	128:11	9	[
LEAF_NODE	128:12	128:12	9	0
LEAF_NODE	128:13	128:13	9	]
LEAF_NODE	128:15	128:15	9	+=
LEAF_NODE	128:18	128:18	9	v
EXPR_STATEMENT	128:20	128:28	9	* 7 / 16 ;
EXPR	128:20	128:26	10	* 7 / 16
UNARY_EXPR	128:20	128:22	11	* 7
UNARY_OPERATOR	128:20	128:20	12	*
LEAF_NODE	128:20	128:20	13	*
FIELD	128:22	128:22	12	7
LEAF_NODE	128:22	128:22	13	7
LEAF_NODE	128:24	128:24	11	/
FIELD	128:26	128:26	11	16
LEAF_NODE	128:26	128:26	12	16
LEAF_NODE	128:28	128:28	10	;
SELECTION	129:3	129:18	9	
KEYWORD	129:3	129:3	10	if
LEAF_NODE	129:3	129:3	11	if
LEAF_NODE	129:6	129:6	10	(
CONDITION	129:7	129:7	10	! lastline
EXPR	129:7	129:7	11	! lastline
UNARY_EXPR	129:7	129:8	12	! lastline
UNARY_OPERATOR	129:7	129:7	13	!
LEAF_NODE	129:7	129:7	14	!
FIELD	129:8	129:8	13	lastline
LEAF_NODE	129:8	129:8	14	lastline
LEAF_NODE	129:16	129:16	10	)
STATEMENTS	129:18	135:3	10	
LEAF_NODE	129:18	129:18	11	{
STATEMENTS	130:4	133:4	11	
SELECTION	130:4	131:5	12	
KEYWORD	130:4	130:4	13	if
LEAF_NODE	130:4	130:4	14	if
LEAF_NODE	130:7	130:7	13	(
CONDITION	130:8	130:8	13	j != 0
EXPR	130:8	130:13	14	j != 0
FIELD	130:8	130:8	15	j
LEAF_NODE	130:8	130:8	16	j
EQ_OPERATOR	130:10	130:10	15	!=
LEAF_NODE	130:10	130:10	16	!=
FIELD	130:13	130:13	15	0
LEAF_NODE	130:13	130:13	16	0
LEAF_NODE	130:14	130:14	13	)
STATEMENTS	131:5	131:5	13	
LEAF_NODE	131:5	131:5	14	nextptr
LEAF_NODE	131:12	131:12	12	[
LEAF_NODE	131:13	131:13	12	-
LEAF_NODE	131:14	131:14	12	1
LEAF_NODE	131:15	131:15	12	]
LEAF_NODE	131:17	131:17	12	+=
LEAF_NODE	131:20	131:20	12	v
EXPR_STATEMENT	131:22	131:30	12	* 3 / 16 ;
EXPR	131:22	131:28	13	* 3 / 16
UNARY_EXPR	131:22	131:24	14	* 3
UNARY_OPERATOR	131:22	131:22	15	*
LEAF_NODE	131:22	131:22	16	*
FIELD	131:24	131:24	15	3
LEAF_NODE	131:24	131:24	16	3
LEAF_NODE	131:26	131:26	14	/
FIELD	131:28	131:28	14	16
LEAF_NODE	131:28	131:28	15	16
LEAF_NODE	131:30	131:30	13	;
LEAF_NODE	132:4	132:4	12	*
LEAF_NODE	132:5	132:5	12	nextptr
LEAF_NODE	132:12	132:12	12	++
LEAF_NODE	132:15	132:15	12	+=
LEAF_NODE	132:18	132:18	12	v
EXPR_STATEMENT	132:20	132:28	12	* 5 / 16 ;
EXPR	132:20	132:26	13	* 5 / 16
UNARY_EXPR	132:20	132:22	14	* 5
UNARY_OPERATOR	132:20	132:20	15	*
LEAF_NODE	132:20	132:20	16	*
FIELD	132:22	132:22	15	5
LEAF_NODE	132:22	132:22	16	5
LEAF_NODE	132:24	132:24	14	/
FIELD	132:26	132:26	14	16
LEAF_NODE	132:26	132:26	15	16
LEAF_NODE	132:28	132:28	13	;
SELECTION	133:4	134:5	12	
KEYWORD	133:4	133:4	13	if
LEAF_NODE	133:4	133:4	14	if
LEAF_NODE	133:7	133:7	13	(
CONDITION	133:8	133:8	13	! lastpixel
EXPR	133:8	133:8	14	! lastpixel
UNARY_EXPR	133:8	133:9	15	! lastpixel
UNARY_OPERATOR	133:8	133:8	16	!
LEAF_NODE	133:8	133:8	17	!
FIELD	133:9	133:9	16	lastpixel
LEAF_NODE	133:9	133:9	17	lastpixel
LEAF_NODE	133:18	133:18	13	)
STATEMENTS	134:5	134:5	13	
EXPR_STATEMENT	134:5	134:25	14	nextptr [ 0 ] += v / 16 ;
EXPR	134:5	134:5	15	nextptr [ 0 ] += v / 16
ASSIGN	134:5	134:19	16	nextptr [ 0 ] += v / 16
LVAL	134:5	134:5	17	nextptr [ 0 ]
FIELD	134:5	134:14	18	nextptr [ 0 ]
LEAF_NODE	134:5	134:5	19	nextptr
LEAF_NODE	134:12	134:12	19	[
EXPR	134:13	134:13	19	0
FIELD	134:13	134:13	20	0
LEAF_NODE	134:13	134:13	21	0
LEAF_NODE	134:14	134:14	19	]
ASSIGN_OP	134:16	134:16	17	+=
LEAF_NODE	134:16	134:16	18	+=
RVAL	134:19	134:23	17	v / 16
FIELD	134:19	134:19	18	v
LEAF_NODE	134:19	134:19	19	v
LEAF_NODE	134:21	134:21	18	/
FIELD	134:23	134:23	18	16
LEAF_NODE	134:23	134:23	19	16
LEAF_NODE	134:25	134:25	15	;
LEAF_NODE	135:3	135:3	11	}
LEAF_NODE	136:2	136:2	8	}
SELECTION	137:2	138:3	6	
KEYWORD	137:2	137:2	7	if
LEAF_NODE	137:2	137:2	8	if
LEAF_NODE	137:5	137:5	7	(
CONDITION	137:6	137:6	7	TIFFWriteScanline ( out , outline , i - 1 , 0 ) < 0
EXPR	137:6	137:48	8	TIFFWriteScanline ( out , outline , i - 1 , 0 ) < 0
FUNCTION_CALL	137:6	137:44	9	TIFFWriteScanline ( out , outline , i - 1 , 0 )
CALLEE	137:6	137:6	10	TIFFWriteScanline
LEAF_NODE	137:6	137:6	11	TIFFWriteScanline
LEAF_NODE	137:23	137:23	10	(
ARGUMENT	137:24	137:24	10	out
FIELD	137:24	137:24	11	out
LEAF_NODE	137:24	137:24	12	out
LEAF_NODE	137:27	137:27	10	,
ARGUMENT	137:29	137:29	10	outline
FIELD	137:29	137:29	11	outline
LEAF_NODE	137:29	137:29	12	outline
LEAF_NODE	137:36	137:36	10	,
ARGUMENT	137:38	137:40	10	i - 1
FIELD	137:38	137:38	11	i
LEAF_NODE	137:38	137:38	12	i
LEAF_NODE	137:39	137:39	11	-
FIELD	137:40	137:40	11	1
LEAF_NODE	137:40	137:40	12	1
LEAF_NODE	137:41	137:41	10	,
ARGUMENT	137:43	137:43	10	0
FIELD	137:43	137:43	11	0
LEAF_NODE	137:43	137:43	12	0
LEAF_NODE	137:44	137:44	10	)
REL_OPERATOR	137:46	137:46	9	<
LEAF_NODE	137:46	137:46	10	<
FIELD	137:48	137:48	9	0
LEAF_NODE	137:48	137:48	10	0
LEAF_NODE	137:49	137:49	7	)
STATEMENTS	138:3	138:3	7	
JUMP_STATEMENT	138:3	138:21	8	goto skip_on_error ;
KEYWORD	138:3	138:3	9	goto
LEAF_NODE	138:3	138:3	10	goto
DESTINATION	138:8	138:8	9	skip_on_error
LEAF_NODE	138:8	138:8	10	skip_on_error
LEAF_NODE	138:21	138:21	9	;
LEAF_NODE	139:1	139:1	5	}
JUMP_STATEMENT	140:1	140:16	3	goto exit_label ;
KEYWORD	140:1	140:1	4	goto
LEAF_NODE	140:1	140:1	5	goto
DESTINATION	140:6	140:6	4	exit_label
LEAF_NODE	140:6	140:6	5	exit_label
LEAF_NODE	140:16	140:16	4	;
LABEL	142:2	142:15	3	skip_on_error :
LEAF_NODE	142:2	142:2	4	skip_on_error
LEAF_NODE	142:15	142:15	4	:
EXPR_STATEMENT	143:1	143:12	3	errcode = 1 ;
EXPR	143:1	143:1	4	errcode = 1
ASSIGN	143:1	143:11	5	errcode = 1
LVAL	143:1	143:1	6	errcode
FIELD	143:1	143:1	7	errcode
LEAF_NODE	143:1	143:1	8	errcode
ASSIGN_OP	143:9	143:9	6	=
LEAF_NODE	143:9	143:9	7	=
RVAL	143:11	143:11	6	1
FIELD	143:11	143:11	7	1
LEAF_NODE	143:11	143:11	8	1
LEAF_NODE	143:12	143:12	4	;
LABEL	144:2	144:12	3	exit_label :
LEAF_NODE	144:2	144:2	4	exit_label
LEAF_NODE	144:12	144:12	4	:
EXPR_STATEMENT	145:1	145:21	3	_TIFFfree ( inputline ) ;
EXPR	145:1	145:1	4	_TIFFfree ( inputline )
FUNCTION_CALL	145:1	145:20	5	_TIFFfree ( inputline )
CALLEE	145:1	145:1	6	_TIFFfree
LEAF_NODE	145:1	145:1	7	_TIFFfree
LEAF_NODE	145:10	145:10	6	(
ARGUMENT	145:11	145:11	6	inputline
FIELD	145:11	145:11	7	inputline
LEAF_NODE	145:11	145:11	8	inputline
LEAF_NODE	145:20	145:20	6	)
LEAF_NODE	145:21	145:21	4	;
EXPR_STATEMENT	146:1	146:20	3	_TIFFfree ( thisline ) ;
EXPR	146:1	146:1	4	_TIFFfree ( thisline )
FUNCTION_CALL	146:1	146:19	5	_TIFFfree ( thisline )
CALLEE	146:1	146:1	6	_TIFFfree
LEAF_NODE	146:1	146:1	7	_TIFFfree
LEAF_NODE	146:10	146:10	6	(
ARGUMENT	146:11	146:11	6	thisline
FIELD	146:11	146:11	7	thisline
LEAF_NODE	146:11	146:11	8	thisline
LEAF_NODE	146:19	146:19	6	)
LEAF_NODE	146:20	146:20	4	;
EXPR_STATEMENT	147:1	147:20	3	_TIFFfree ( nextline ) ;
EXPR	147:1	147:1	4	_TIFFfree ( nextline )
FUNCTION_CALL	147:1	147:19	5	_TIFFfree ( nextline )
CALLEE	147:1	147:1	6	_TIFFfree
LEAF_NODE	147:1	147:1	7	_TIFFfree
LEAF_NODE	147:10	147:10	6	(
ARGUMENT	147:11	147:11	6	nextline
FIELD	147:11	147:11	7	nextline
LEAF_NODE	147:11	147:11	8	nextline
LEAF_NODE	147:19	147:19	6	)
LEAF_NODE	147:20	147:20	4	;
EXPR_STATEMENT	148:1	148:19	3	_TIFFfree ( outline ) ;
EXPR	148:1	148:1	4	_TIFFfree ( outline )
FUNCTION_CALL	148:1	148:18	5	_TIFFfree ( outline )
CALLEE	148:1	148:1	6	_TIFFfree
LEAF_NODE	148:1	148:1	7	_TIFFfree
LEAF_NODE	148:10	148:10	6	(
ARGUMENT	148:11	148:11	6	outline
FIELD	148:11	148:11	7	outline
LEAF_NODE	148:11	148:11	8	outline
LEAF_NODE	148:18	148:18	6	)
LEAF_NODE	148:19	148:19	4	;
JUMP_STATEMENT	149:1	149:15	3	return errcode ;
KEYWORD	149:1	149:1	4	return
LEAF_NODE	149:1	149:1	5	return
DESTINATION	149:8	149:8	4	errcode
EXPR	149:8	149:8	5	errcode
FIELD	149:8	149:8	6	errcode
LEAF_NODE	149:8	149:8	7	errcode
LEAF_NODE	149:15	149:15	4	;
LEAF_NODE	150:0	150:0	2	}
SIMPLE_DECL	152:7	152:48	1	uint16 compression ; compression = COMPRESSION_PACKBITS ;
VAR_DECL	152:7	152:14	2	uint16 compression ; compression = COMPRESSION_PACKBITS
TYPE	152:7	152:7	3	uint16
TYPE_NAME	152:7	152:7	4	uint16
LEAF_NODE	152:7	152:7	5	uint16
NAME	152:14	152:14	3	compression
LEAF_NODE	152:14	152:14	4	compression
LEAF_NODE	0:0	0:0	3	;
INIT	152:14	152:14	3	compression = COMPRESSION_PACKBITS
ASSIGN	152:14	152:28	4	compression = COMPRESSION_PACKBITS
LVAL	152:14	152:14	5	compression
NAME	152:14	152:14	6	compression
LEAF_NODE	152:14	152:14	7	compression
ASSIGN_OP	152:26	152:26	5	=
LEAF_NODE	152:26	152:26	6	=
RVAL	152:28	152:28	5	COMPRESSION_PACKBITS
FIELD	152:28	152:28	6	COMPRESSION_PACKBITS
LEAF_NODE	152:28	152:28	7	COMPRESSION_PACKBITS
LEAF_NODE	152:48	152:48	2	;
SIMPLE_DECL	153:7	153:27	1	uint16 predictor ; predictor = 0 ;
VAR_DECL	153:7	153:14	2	uint16 predictor ; predictor = 0
TYPE	153:7	153:7	3	uint16
TYPE_NAME	153:7	153:7	4	uint16
LEAF_NODE	153:7	153:7	5	uint16
NAME	153:14	153:14	3	predictor
LEAF_NODE	153:14	153:14	4	predictor
LEAF_NODE	0:0	0:0	3	;
INIT	153:14	153:14	3	predictor = 0
ASSIGN	153:14	153:26	4	predictor = 0
LVAL	153:14	153:14	5	predictor
NAME	153:14	153:14	6	predictor
LEAF_NODE	153:14	153:14	7	predictor
ASSIGN_OP	153:24	153:24	5	=
LEAF_NODE	153:24	153:24	6	=
RVAL	153:26	153:26	5	0
FIELD	153:26	153:26	6	0
LEAF_NODE	153:26	153:26	7	0
LEAF_NODE	153:27	153:27	2	;
SIMPLE_DECL	154:7	154:31	1	uint32 group3options ; group3options = 0 ;
VAR_DECL	154:7	154:14	2	uint32 group3options ; group3options = 0
TYPE	154:7	154:7	3	uint32
TYPE_NAME	154:7	154:7	4	uint32
LEAF_NODE	154:7	154:7	5	uint32
NAME	154:14	154:14	3	group3options
LEAF_NODE	154:14	154:14	4	group3options
LEAF_NODE	0:0	0:0	3	;
INIT	154:14	154:14	3	group3options = 0
ASSIGN	154:14	154:30	4	group3options = 0
LVAL	154:14	154:14	5	group3options
NAME	154:14	154:14	6	group3options
LEAF_NODE	154:14	154:14	7	group3options
ASSIGN_OP	154:28	154:28	5	=
LEAF_NODE	154:28	154:28	6	=
RVAL	154:30	154:30	5	0
FIELD	154:30	154:30	6	0
LEAF_NODE	154:30	154:30	7	0
LEAF_NODE	154:31	154:31	2	;
FUNCTION_DEF	156:0	172:0	1	
RETURN_TYPE	156:0	156:7	2	static void
LEAF_NODE	156:0	156:0	3	static
TYPE_NAME	156:7	156:7	3	void
LEAF_NODE	156:7	156:7	4	void
FUNCTION_NAME	157:0	157:0	2	processG3Options
LEAF_NODE	157:0	157:0	3	processG3Options
PARAMETER_LIST	157:16	157:25	2	( char * cp )
LEAF_NODE	157:16	157:16	3	(
PARAMETER_DECL	157:17	157:23	3	char * cp
TYPE	157:17	157:21	4	char *
TYPE_NAME	157:17	157:17	5	char
LEAF_NODE	157:17	157:17	6	char
POINTER	157:21	157:21	5	*
LEAF_NODE	157:21	157:21	6	*
NAME	157:23	157:23	4	cp
LEAF_NODE	157:23	157:23	5	cp
LEAF_NODE	157:25	157:25	3	)
LEAF_NODE	158:0	158:0	2	{
STATEMENTS	159:1	159:1	2	
SELECTION	159:1	159:29	3	
KEYWORD	159:1	159:1	4	if
LEAF_NODE	159:1	159:1	5	if
LEAF_NODE	159:4	159:4	4	(
CONDITION	159:5	159:5	4	( cp = strchr ( cp , ':' ) )
EXPR	159:5	159:26	5	( cp = strchr ( cp , ':' ) )
LEAF_NODE	159:5	159:5	6	(
ASSIGN	159:6	159:11	6	cp = strchr ( cp , ':' )
LVAL	159:6	159:6	7	cp
FIELD	159:6	159:6	8	cp
LEAF_NODE	159:6	159:6	9	cp
ASSIGN_OP	159:9	159:9	7	=
LEAF_NODE	159:9	159:9	8	=
RVAL	159:11	159:11	7	strchr ( cp , ':' )
FUNCTION_CALL	159:11	159:25	8	strchr ( cp , ':' )
CALLEE	159:11	159:11	9	strchr
LEAF_NODE	159:11	159:11	10	strchr
LEAF_NODE	159:17	159:17	9	(
ARGUMENT	159:18	159:18	9	cp
FIELD	159:18	159:18	10	cp
LEAF_NODE	159:18	159:18	11	cp
LEAF_NODE	159:20	159:20	9	,
ARGUMENT	159:22	159:22	9	':'
FIELD	159:22	159:22	10	':'
LEAF_NODE	159:22	159:22	11	':'
LEAF_NODE	159:25	159:25	9	)
LEAF_NODE	159:26	159:26	6	)
LEAF_NODE	159:27	159:27	4	)
STATEMENTS	159:29	171:1	4	
LEAF_NODE	159:29	159:29	5	{
STATEMENTS	160:2	170:34	5	
ITERATION	160:2	160:5	6	
KEYWORD	160:2	160:2	7	do
LEAF_NODE	160:2	160:2	8	do
LEAF_NODE	170:10	170:10	7	(
CONDITION	170:11	170:11	7	( cp = strchr ( cp , ':' ) )
EXPR	170:11	170:32	8	( cp = strchr ( cp , ':' ) )
LEAF_NODE	170:11	170:11	9	(
ASSIGN	170:12	170:17	9	cp = strchr ( cp , ':' )
LVAL	170:12	170:12	10	cp
FIELD	170:12	170:12	11	cp
LEAF_NODE	170:12	170:12	12	cp
ASSIGN_OP	170:15	170:15	10	=
LEAF_NODE	170:15	170:15	11	=
RVAL	170:17	170:17	10	strchr ( cp , ':' )
FUNCTION_CALL	170:17	170:31	11	strchr ( cp , ':' )
CALLEE	170:17	170:17	12	strchr
LEAF_NODE	170:17	170:17	13	strchr
LEAF_NODE	170:23	170:23	12	(
ARGUMENT	170:24	170:24	12	cp
FIELD	170:24	170:24	13	cp
LEAF_NODE	170:24	170:24	14	cp
LEAF_NODE	170:26	170:26	12	,
ARGUMENT	170:28	170:28	12	':'
FIELD	170:28	170:28	13	':'
LEAF_NODE	170:28	170:28	14	':'
LEAF_NODE	170:31	170:31	12	)
LEAF_NODE	170:32	170:32	9	)
LEAF_NODE	170:33	170:33	7	)
STATEMENTS	160:5	170:2	7	
LEAF_NODE	160:5	160:5	8	{
STATEMENTS	161:3	168:3	8	
EXPR_STATEMENT	161:3	161:7	9	cp ++ ;
EXPR	161:3	161:3	10	cp ++
FIELD	161:3	161:5	11	cp ++
LEAF_NODE	161:3	161:3	12	cp
LEAF_NODE	161:5	161:5	12	++
LEAF_NODE	161:7	161:7	10	;
SELECTION	162:3	163:4	9	
KEYWORD	162:3	162:3	10	if
LEAF_NODE	162:3	162:3	11	if
LEAF_NODE	162:6	162:6	10	(
CONDITION	162:7	162:7	10	strneq ( cp , "1d" , 2 )
EXPR	162:7	162:7	11	strneq ( cp , "1d" , 2 )
FUNCTION_CALL	162:7	162:25	12	strneq ( cp , "1d" , 2 )
CALLEE	162:7	162:7	13	strneq
LEAF_NODE	162:7	162:7	14	strneq
LEAF_NODE	162:13	162:13	13	(
ARGUMENT	162:14	162:14	13	cp
FIELD	162:14	162:14	14	cp
LEAF_NODE	162:14	162:14	15	cp
LEAF_NODE	162:16	162:16	13	,
ARGUMENT	162:18	162:18	13	"1d"
FIELD	162:18	162:18	14	"1d"
LEAF_NODE	162:18	162:18	15	"1d"
LEAF_NODE	162:22	162:22	13	,
ARGUMENT	162:24	162:24	13	2
FIELD	162:24	162:24	14	2
LEAF_NODE	162:24	162:24	15	2
LEAF_NODE	162:25	162:25	13	)
LEAF_NODE	162:26	162:26	10	)
STATEMENTS	163:4	163:4	10	
EXPR_STATEMENT	163:4	163:42	11	group3options &= ~GROUP3OPT_2DENCODING ;
EXPR	163:4	163:4	12	group3options &= ~GROUP3OPT_2DENCODING
ASSIGN	163:4	163:21	13	group3options &= ~GROUP3OPT_2DENCODING
LVAL	163:4	163:4	14	group3options
FIELD	163:4	163:4	15	group3options
LEAF_NODE	163:4	163:4	16	group3options
ASSIGN_OP	163:18	163:18	14	&=
LEAF_NODE	163:18	163:18	15	&=
RVAL	163:21	163:21	14	~GROUP3OPT_2DENCODING
FIELD	163:21	163:21	15	~GROUP3OPT_2DENCODING
LEAF_NODE	163:21	163:21	16	~GROUP3OPT_2DENCODING
LEAF_NODE	163:42	163:42	12	;
SELECTION	164:3	164:8	9	
KEYWORD	164:3	164:3	10	else
LEAF_NODE	164:3	164:3	11	else
STATEMENTS	164:8	164:8	10	
SELECTION	164:8	165:4	11	
KEYWORD	164:8	164:8	12	if
LEAF_NODE	164:8	164:8	13	if
LEAF_NODE	164:11	164:11	12	(
CONDITION	164:12	164:12	12	strneq ( cp , "2d" , 2 )
EXPR	164:12	164:12	13	strneq ( cp , "2d" , 2 )
FUNCTION_CALL	164:12	164:30	14	strneq ( cp , "2d" , 2 )
CALLEE	164:12	164:12	15	strneq
LEAF_NODE	164:12	164:12	16	strneq
LEAF_NODE	164:18	164:18	15	(
ARGUMENT	164:19	164:19	15	cp
FIELD	164:19	164:19	16	cp
LEAF_NODE	164:19	164:19	17	cp
LEAF_NODE	164:21	164:21	15	,
ARGUMENT	164:23	164:23	15	"2d"
FIELD	164:23	164:23	16	"2d"
LEAF_NODE	164:23	164:23	17	"2d"
LEAF_NODE	164:27	164:27	15	,
ARGUMENT	164:29	164:29	15	2
FIELD	164:29	164:29	16	2
LEAF_NODE	164:29	164:29	17	2
LEAF_NODE	164:30	164:30	15	)
LEAF_NODE	164:31	164:31	12	)
STATEMENTS	165:4	165:4	12	
EXPR_STATEMENT	165:4	165:41	13	group3options |= GROUP3OPT_2DENCODING ;
EXPR	165:4	165:4	14	group3options |= GROUP3OPT_2DENCODING
ASSIGN	165:4	165:21	15	group3options |= GROUP3OPT_2DENCODING
LVAL	165:4	165:4	16	group3options
FIELD	165:4	165:4	17	group3options
LEAF_NODE	165:4	165:4	18	group3options
ASSIGN_OP	165:18	165:18	16	|=
LEAF_NODE	165:18	165:18	17	|=
RVAL	165:21	165:21	16	GROUP3OPT_2DENCODING
FIELD	165:21	165:21	17	GROUP3OPT_2DENCODING
LEAF_NODE	165:21	165:21	18	GROUP3OPT_2DENCODING
LEAF_NODE	165:41	165:41	14	;
SELECTION	166:3	166:8	9	
KEYWORD	166:3	166:3	10	else
LEAF_NODE	166:3	166:3	11	else
STATEMENTS	166:8	166:8	10	
SELECTION	166:8	167:4	11	
KEYWORD	166:8	166:8	12	if
LEAF_NODE	166:8	166:8	13	if
LEAF_NODE	166:11	166:11	12	(
CONDITION	166:12	166:12	12	strneq ( cp , "fill" , 4 )
EXPR	166:12	166:12	13	strneq ( cp , "fill" , 4 )
FUNCTION_CALL	166:12	166:32	14	strneq ( cp , "fill" , 4 )
CALLEE	166:12	166:12	15	strneq
LEAF_NODE	166:12	166:12	16	strneq
LEAF_NODE	166:18	166:18	15	(
ARGUMENT	166:19	166:19	15	cp
FIELD	166:19	166:19	16	cp
LEAF_NODE	166:19	166:19	17	cp
LEAF_NODE	166:21	166:21	15	,
ARGUMENT	166:23	166:23	15	"fill"
FIELD	166:23	166:23	16	"fill"
LEAF_NODE	166:23	166:23	17	"fill"
LEAF_NODE	166:29	166:29	15	,
ARGUMENT	166:31	166:31	15	4
FIELD	166:31	166:31	16	4
LEAF_NODE	166:31	166:31	17	4
LEAF_NODE	166:32	166:32	15	)
LEAF_NODE	166:33	166:33	12	)
STATEMENTS	167:4	167:4	12	
EXPR_STATEMENT	167:4	167:39	13	group3options |= GROUP3OPT_FILLBITS ;
EXPR	167:4	167:4	14	group3options |= GROUP3OPT_FILLBITS
ASSIGN	167:4	167:21	15	group3options |= GROUP3OPT_FILLBITS
LVAL	167:4	167:4	16	group3options
FIELD	167:4	167:4	17	group3options
LEAF_NODE	167:4	167:4	18	group3options
ASSIGN_OP	167:18	167:18	16	|=
LEAF_NODE	167:18	167:18	17	|=
RVAL	167:21	167:21	16	GROUP3OPT_FILLBITS
FIELD	167:21	167:21	17	GROUP3OPT_FILLBITS
LEAF_NODE	167:21	167:21	18	GROUP3OPT_FILLBITS
LEAF_NODE	167:39	167:39	14	;
SELECTION	168:3	169:4	9	
KEYWORD	168:3	168:3	10	else
LEAF_NODE	168:3	168:3	11	else
STATEMENTS	169:4	169:4	10	
EXPR_STATEMENT	169:4	169:11	11	usage ( ) ;
EXPR	169:4	169:4	12	usage ( )
FUNCTION_CALL	169:4	169:10	13	usage ( )
CALLEE	169:4	169:4	14	usage
LEAF_NODE	169:4	169:4	15	usage
LEAF_NODE	169:9	169:9	14	(
LEAF_NODE	169:10	169:10	14	)
LEAF_NODE	169:11	169:11	12	;
LEAF_NODE	170:2	170:2	8	}
LEAF_NODE	170:34	170:34	6	;
LEAF_NODE	171:1	171:1	5	}
LEAF_NODE	172:0	172:0	2	}
FUNCTION_DEF	174:0	199:0	1	
RETURN_TYPE	174:0	174:7	2	static int
LEAF_NODE	174:0	174:0	3	static
TYPE_NAME	174:7	174:7	3	int
LEAF_NODE	174:7	174:7	4	int
FUNCTION_NAME	175:0	175:0	2	processCompressOptions
LEAF_NODE	175:0	175:0	3	processCompressOptions
PARAMETER_LIST	175:22	175:32	2	( char * opt )
LEAF_NODE	175:22	175:22	3	(
PARAMETER_DECL	175:23	175:29	3	char * opt
TYPE	175:23	175:27	4	char *
TYPE_NAME	175:23	175:23	5	char
LEAF_NODE	175:23	175:23	6	char
POINTER	175:27	175:27	5	*
LEAF_NODE	175:27	175:27	6	*
NAME	175:29	175:29	4	opt
LEAF_NODE	175:29	175:29	5	opt
LEAF_NODE	175:32	175:32	3	)
LEAF_NODE	176:0	176:0	2	{
STATEMENTS	177:1	198:1	2	
SELECTION	177:1	178:2	3	
KEYWORD	177:1	177:1	4	if
LEAF_NODE	177:1	177:1	5	if
LEAF_NODE	177:4	177:4	4	(
CONDITION	177:5	177:5	4	streq ( opt , "none" )
EXPR	177:5	177:5	5	streq ( opt , "none" )
FUNCTION_CALL	177:5	177:22	6	streq ( opt , "none" )
CALLEE	177:5	177:5	7	streq
LEAF_NODE	177:5	177:5	8	streq
LEAF_NODE	177:10	177:10	7	(
ARGUMENT	177:11	177:11	7	opt
FIELD	177:11	177:11	8	opt
LEAF_NODE	177:11	177:11	9	opt
LEAF_NODE	177:14	177:14	7	,
ARGUMENT	177:16	177:16	7	"none"
FIELD	177:16	177:16	8	"none"
LEAF_NODE	177:16	177:16	9	"none"
LEAF_NODE	177:22	177:22	7	)
LEAF_NODE	177:23	177:23	4	)
STATEMENTS	178:2	178:2	4	
EXPR_STATEMENT	178:2	178:32	5	compression = COMPRESSION_NONE ;
EXPR	178:2	178:2	6	compression = COMPRESSION_NONE
ASSIGN	178:2	178:16	7	compression = COMPRESSION_NONE
LVAL	178:2	178:2	8	compression
FIELD	178:2	178:2	9	compression
LEAF_NODE	178:2	178:2	10	compression
ASSIGN_OP	178:14	178:14	8	=
LEAF_NODE	178:14	178:14	9	=
RVAL	178:16	178:16	8	COMPRESSION_NONE
FIELD	178:16	178:16	9	COMPRESSION_NONE
LEAF_NODE	178:16	178:16	10	COMPRESSION_NONE
LEAF_NODE	178:32	178:32	6	;
SELECTION	179:1	179:6	3	
KEYWORD	179:1	179:1	4	else
LEAF_NODE	179:1	179:1	5	else
STATEMENTS	179:6	179:6	4	
SELECTION	179:6	180:2	5	
KEYWORD	179:6	179:6	6	if
LEAF_NODE	179:6	179:6	7	if
LEAF_NODE	179:9	179:9	6	(
CONDITION	179:10	179:10	6	streq ( opt , "packbits" )
EXPR	179:10	179:10	7	streq ( opt , "packbits" )
FUNCTION_CALL	179:10	179:31	8	streq ( opt , "packbits" )
CALLEE	179:10	179:10	9	streq
LEAF_NODE	179:10	179:10	10	streq
LEAF_NODE	179:15	179:15	9	(
ARGUMENT	179:16	179:16	9	opt
FIELD	179:16	179:16	10	opt
LEAF_NODE	179:16	179:16	11	opt
LEAF_NODE	179:19	179:19	9	,
ARGUMENT	179:21	179:21	9	"packbits"
FIELD	179:21	179:21	10	"packbits"
LEAF_NODE	179:21	179:21	11	"packbits"
LEAF_NODE	179:31	179:31	9	)
LEAF_NODE	179:32	179:32	6	)
STATEMENTS	180:2	180:2	6	
EXPR_STATEMENT	180:2	180:36	7	compression = COMPRESSION_PACKBITS ;
EXPR	180:2	180:2	8	compression = COMPRESSION_PACKBITS
ASSIGN	180:2	180:16	9	compression = COMPRESSION_PACKBITS
LVAL	180:2	180:2	10	compression
FIELD	180:2	180:2	11	compression
LEAF_NODE	180:2	180:2	12	compression
ASSIGN_OP	180:14	180:14	10	=
LEAF_NODE	180:14	180:14	11	=
RVAL	180:16	180:16	10	COMPRESSION_PACKBITS
FIELD	180:16	180:16	11	COMPRESSION_PACKBITS
LEAF_NODE	180:16	180:16	12	COMPRESSION_PACKBITS
LEAF_NODE	180:36	180:36	8	;
SELECTION	181:1	181:6	3	
KEYWORD	181:1	181:1	4	else
LEAF_NODE	181:1	181:1	5	else
STATEMENTS	181:6	181:6	4	
SELECTION	181:6	181:32	5	
KEYWORD	181:6	181:6	6	if
LEAF_NODE	181:6	181:6	7	if
LEAF_NODE	181:9	181:9	6	(
CONDITION	181:10	181:10	6	strneq ( opt , "g3" , 2 )
EXPR	181:10	181:10	7	strneq ( opt , "g3" , 2 )
FUNCTION_CALL	181:10	181:29	8	strneq ( opt , "g3" , 2 )
CALLEE	181:10	181:10	9	strneq
LEAF_NODE	181:10	181:10	10	strneq
LEAF_NODE	181:16	181:16	9	(
ARGUMENT	181:17	181:17	9	opt
FIELD	181:17	181:17	10	opt
LEAF_NODE	181:17	181:17	11	opt
LEAF_NODE	181:20	181:20	9	,
ARGUMENT	181:22	181:22	9	"g3"
FIELD	181:22	181:22	10	"g3"
LEAF_NODE	181:22	181:22	11	"g3"
LEAF_NODE	181:26	181:26	9	,
ARGUMENT	181:28	181:28	9	2
FIELD	181:28	181:28	10	2
LEAF_NODE	181:28	181:28	11	2
LEAF_NODE	181:29	181:29	9	)
LEAF_NODE	181:30	181:30	6	)
STATEMENTS	181:32	184:1	6	
LEAF_NODE	181:32	181:32	7	{
STATEMENTS	182:2	183:2	7	
EXPR_STATEMENT	182:2	182:23	8	processG3Options ( opt ) ;
EXPR	182:2	182:2	9	processG3Options ( opt )
FUNCTION_CALL	182:2	182:22	10	processG3Options ( opt )
CALLEE	182:2	182:2	11	processG3Options
LEAF_NODE	182:2	182:2	12	processG3Options
LEAF_NODE	182:18	182:18	11	(
ARGUMENT	182:19	182:19	11	opt
FIELD	182:19	182:19	12	opt
LEAF_NODE	182:19	182:19	13	opt
LEAF_NODE	182:22	182:22	11	)
LEAF_NODE	182:23	182:23	9	;
EXPR_STATEMENT	183:2	183:37	8	compression = COMPRESSION_CCITTFAX3 ;
EXPR	183:2	183:2	9	compression = COMPRESSION_CCITTFAX3
ASSIGN	183:2	183:16	10	compression = COMPRESSION_CCITTFAX3
LVAL	183:2	183:2	11	compression
FIELD	183:2	183:2	12	compression
LEAF_NODE	183:2	183:2	13	compression
ASSIGN_OP	183:14	183:14	11	=
LEAF_NODE	183:14	183:14	12	=
RVAL	183:16	183:16	11	COMPRESSION_CCITTFAX3
FIELD	183:16	183:16	12	COMPRESSION_CCITTFAX3
LEAF_NODE	183:16	183:16	13	COMPRESSION_CCITTFAX3
LEAF_NODE	183:37	183:37	9	;
LEAF_NODE	184:1	184:1	7	}
SELECTION	184:3	184:8	3	
KEYWORD	184:3	184:3	4	else
LEAF_NODE	184:3	184:3	5	else
STATEMENTS	184:8	184:8	4	
SELECTION	184:8	185:2	5	
KEYWORD	184:8	184:8	6	if
LEAF_NODE	184:8	184:8	7	if
LEAF_NODE	184:11	184:11	6	(
CONDITION	184:12	184:12	6	streq ( opt , "g4" )
EXPR	184:12	184:12	7	streq ( opt , "g4" )
FUNCTION_CALL	184:12	184:27	8	streq ( opt , "g4" )
CALLEE	184:12	184:12	9	streq
LEAF_NODE	184:12	184:12	10	streq
LEAF_NODE	184:17	184:17	9	(
ARGUMENT	184:18	184:18	9	opt
FIELD	184:18	184:18	10	opt
LEAF_NODE	184:18	184:18	11	opt
LEAF_NODE	184:21	184:21	9	,
ARGUMENT	184:23	184:23	9	"g4"
FIELD	184:23	184:23	10	"g4"
LEAF_NODE	184:23	184:23	11	"g4"
LEAF_NODE	184:27	184:27	9	)
LEAF_NODE	184:28	184:28	6	)
STATEMENTS	185:2	185:2	6	
EXPR_STATEMENT	185:2	185:37	7	compression = COMPRESSION_CCITTFAX4 ;
EXPR	185:2	185:2	8	compression = COMPRESSION_CCITTFAX4
ASSIGN	185:2	185:16	9	compression = COMPRESSION_CCITTFAX4
LVAL	185:2	185:2	10	compression
FIELD	185:2	185:2	11	compression
LEAF_NODE	185:2	185:2	12	compression
ASSIGN_OP	185:14	185:14	10	=
LEAF_NODE	185:14	185:14	11	=
RVAL	185:16	185:16	10	COMPRESSION_CCITTFAX4
FIELD	185:16	185:16	11	COMPRESSION_CCITTFAX4
LEAF_NODE	185:16	185:16	12	COMPRESSION_CCITTFAX4
LEAF_NODE	185:37	185:37	8	;
SELECTION	186:1	186:6	3	
KEYWORD	186:1	186:1	4	else
LEAF_NODE	186:1	186:1	5	else
STATEMENTS	186:6	186:6	4	
SELECTION	186:6	186:33	5	
KEYWORD	186:6	186:6	6	if
LEAF_NODE	186:6	186:6	7	if
LEAF_NODE	186:9	186:9	6	(
CONDITION	186:10	186:10	6	strneq ( opt , "lzw" , 3 )
EXPR	186:10	186:10	7	strneq ( opt , "lzw" , 3 )
FUNCTION_CALL	186:10	186:30	8	strneq ( opt , "lzw" , 3 )
CALLEE	186:10	186:10	9	strneq
LEAF_NODE	186:10	186:10	10	strneq
LEAF_NODE	186:16	186:16	9	(
ARGUMENT	186:17	186:17	9	opt
FIELD	186:17	186:17	10	opt
LEAF_NODE	186:17	186:17	11	opt
LEAF_NODE	186:20	186:20	9	,
ARGUMENT	186:22	186:22	9	"lzw"
FIELD	186:22	186:22	10	"lzw"
LEAF_NODE	186:22	186:22	11	"lzw"
LEAF_NODE	186:27	186:27	9	,
ARGUMENT	186:29	186:29	9	3
FIELD	186:29	186:29	10	3
LEAF_NODE	186:29	186:29	11	3
LEAF_NODE	186:30	186:30	9	)
LEAF_NODE	186:31	186:31	6	)
STATEMENTS	186:33	191:1	6	
LEAF_NODE	186:33	186:33	7	{
STATEMENTS	187:2	190:2	7	
SIMPLE_DECL	187:2	187:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	187:2	187:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	187:2	187:6	10	char *
TYPE_NAME	187:2	187:2	11	char
LEAF_NODE	187:2	187:2	12	char
POINTER	187:6	187:6	11	*
LEAF_NODE	187:6	187:6	12	*
NAME	187:8	187:8	10	cp
LEAF_NODE	187:8	187:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	187:8	187:8	10	cp = strchr ( opt , ':' )
ASSIGN	187:8	187:13	11	cp = strchr ( opt , ':' )
LVAL	187:8	187:8	12	cp
NAME	187:8	187:8	13	cp
LEAF_NODE	187:8	187:8	14	cp
ASSIGN_OP	187:11	187:11	12	=
LEAF_NODE	187:11	187:11	13	=
RVAL	187:13	187:13	12	strchr ( opt , ':' )
FUNCTION_CALL	187:13	187:28	13	strchr ( opt , ':' )
CALLEE	187:13	187:13	14	strchr
LEAF_NODE	187:13	187:13	15	strchr
LEAF_NODE	187:19	187:19	14	(
ARGUMENT	187:20	187:20	14	opt
FIELD	187:20	187:20	15	opt
LEAF_NODE	187:20	187:20	16	opt
LEAF_NODE	187:23	187:23	14	,
ARGUMENT	187:25	187:25	14	':'
FIELD	187:25	187:25	15	':'
LEAF_NODE	187:25	187:25	16	':'
LEAF_NODE	187:28	187:28	14	)
LEAF_NODE	187:29	187:29	9	;
SELECTION	188:2	189:3	8	
KEYWORD	188:2	188:2	9	if
LEAF_NODE	188:2	188:2	10	if
LEAF_NODE	188:5	188:5	9	(
CONDITION	188:6	188:6	9	cp
EXPR	188:6	188:6	10	cp
FIELD	188:6	188:6	11	cp
LEAF_NODE	188:6	188:6	12	cp
LEAF_NODE	188:8	188:8	9	)
STATEMENTS	189:3	189:3	9	
EXPR_STATEMENT	189:3	189:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	189:3	189:3	11	predictor = atoi ( cp + 1 )
ASSIGN	189:3	189:15	12	predictor = atoi ( cp + 1 )
LVAL	189:3	189:3	13	predictor
FIELD	189:3	189:3	14	predictor
LEAF_NODE	189:3	189:3	15	predictor
ASSIGN_OP	189:13	189:13	13	=
LEAF_NODE	189:13	189:13	14	=
RVAL	189:15	189:15	13	atoi ( cp + 1 )
FUNCTION_CALL	189:15	189:24	14	atoi ( cp + 1 )
CALLEE	189:15	189:15	15	atoi
LEAF_NODE	189:15	189:15	16	atoi
LEAF_NODE	189:19	189:19	15	(
ARGUMENT	189:20	189:23	15	cp + 1
FIELD	189:20	189:20	16	cp
LEAF_NODE	189:20	189:20	17	cp
LEAF_NODE	189:22	189:22	16	+
FIELD	189:23	189:23	16	1
LEAF_NODE	189:23	189:23	17	1
LEAF_NODE	189:24	189:24	15	)
LEAF_NODE	189:25	189:25	11	;
EXPR_STATEMENT	190:2	190:31	8	compression = COMPRESSION_LZW ;
EXPR	190:2	190:2	9	compression = COMPRESSION_LZW
ASSIGN	190:2	190:16	10	compression = COMPRESSION_LZW
LVAL	190:2	190:2	11	compression
FIELD	190:2	190:2	12	compression
LEAF_NODE	190:2	190:2	13	compression
ASSIGN_OP	190:14	190:14	11	=
LEAF_NODE	190:14	190:14	12	=
RVAL	190:16	190:16	11	COMPRESSION_LZW
FIELD	190:16	190:16	12	COMPRESSION_LZW
LEAF_NODE	190:16	190:16	13	COMPRESSION_LZW
LEAF_NODE	190:31	190:31	9	;
LEAF_NODE	191:1	191:1	7	}
SELECTION	191:3	191:8	3	
KEYWORD	191:3	191:3	4	else
LEAF_NODE	191:3	191:3	5	else
STATEMENTS	191:8	191:8	4	
SELECTION	191:8	191:35	5	
KEYWORD	191:8	191:8	6	if
LEAF_NODE	191:8	191:8	7	if
LEAF_NODE	191:11	191:11	6	(
CONDITION	191:12	191:12	6	strneq ( opt , "zip" , 3 )
EXPR	191:12	191:12	7	strneq ( opt , "zip" , 3 )
FUNCTION_CALL	191:12	191:32	8	strneq ( opt , "zip" , 3 )
CALLEE	191:12	191:12	9	strneq
LEAF_NODE	191:12	191:12	10	strneq
LEAF_NODE	191:18	191:18	9	(
ARGUMENT	191:19	191:19	9	opt
FIELD	191:19	191:19	10	opt
LEAF_NODE	191:19	191:19	11	opt
LEAF_NODE	191:22	191:22	9	,
ARGUMENT	191:24	191:24	9	"zip"
FIELD	191:24	191:24	10	"zip"
LEAF_NODE	191:24	191:24	11	"zip"
LEAF_NODE	191:29	191:29	9	,
ARGUMENT	191:31	191:31	9	3
FIELD	191:31	191:31	10	3
LEAF_NODE	191:31	191:31	11	3
LEAF_NODE	191:32	191:32	9	)
LEAF_NODE	191:33	191:33	6	)
STATEMENTS	191:35	196:1	6	
LEAF_NODE	191:35	191:35	7	{
STATEMENTS	192:2	195:2	7	
SIMPLE_DECL	192:2	192:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	192:2	192:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	192:2	192:6	10	char *
TYPE_NAME	192:2	192:2	11	char
LEAF_NODE	192:2	192:2	12	char
POINTER	192:6	192:6	11	*
LEAF_NODE	192:6	192:6	12	*
NAME	192:8	192:8	10	cp
LEAF_NODE	192:8	192:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	192:8	192:8	10	cp = strchr ( opt , ':' )
ASSIGN	192:8	192:13	11	cp = strchr ( opt , ':' )
LVAL	192:8	192:8	12	cp
NAME	192:8	192:8	13	cp
LEAF_NODE	192:8	192:8	14	cp
ASSIGN_OP	192:11	192:11	12	=
LEAF_NODE	192:11	192:11	13	=
RVAL	192:13	192:13	12	strchr ( opt , ':' )
FUNCTION_CALL	192:13	192:28	13	strchr ( opt , ':' )
CALLEE	192:13	192:13	14	strchr
LEAF_NODE	192:13	192:13	15	strchr
LEAF_NODE	192:19	192:19	14	(
ARGUMENT	192:20	192:20	14	opt
FIELD	192:20	192:20	15	opt
LEAF_NODE	192:20	192:20	16	opt
LEAF_NODE	192:23	192:23	14	,
ARGUMENT	192:25	192:25	14	':'
FIELD	192:25	192:25	15	':'
LEAF_NODE	192:25	192:25	16	':'
LEAF_NODE	192:28	192:28	14	)
LEAF_NODE	192:29	192:29	9	;
SELECTION	193:2	194:3	8	
KEYWORD	193:2	193:2	9	if
LEAF_NODE	193:2	193:2	10	if
LEAF_NODE	193:5	193:5	9	(
CONDITION	193:6	193:6	9	cp
EXPR	193:6	193:6	10	cp
FIELD	193:6	193:6	11	cp
LEAF_NODE	193:6	193:6	12	cp
LEAF_NODE	193:8	193:8	9	)
STATEMENTS	194:3	194:3	9	
EXPR_STATEMENT	194:3	194:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	194:3	194:3	11	predictor = atoi ( cp + 1 )
ASSIGN	194:3	194:15	12	predictor = atoi ( cp + 1 )
LVAL	194:3	194:3	13	predictor
FIELD	194:3	194:3	14	predictor
LEAF_NODE	194:3	194:3	15	predictor
ASSIGN_OP	194:13	194:13	13	=
LEAF_NODE	194:13	194:13	14	=
RVAL	194:15	194:15	13	atoi ( cp + 1 )
FUNCTION_CALL	194:15	194:24	14	atoi ( cp + 1 )
CALLEE	194:15	194:15	15	atoi
LEAF_NODE	194:15	194:15	16	atoi
LEAF_NODE	194:19	194:19	15	(
ARGUMENT	194:20	194:23	15	cp + 1
FIELD	194:20	194:20	16	cp
LEAF_NODE	194:20	194:20	17	cp
LEAF_NODE	194:22	194:22	16	+
FIELD	194:23	194:23	16	1
LEAF_NODE	194:23	194:23	17	1
LEAF_NODE	194:24	194:24	15	)
LEAF_NODE	194:25	194:25	11	;
EXPR_STATEMENT	195:2	195:35	8	compression = COMPRESSION_DEFLATE ;
EXPR	195:2	195:2	9	compression = COMPRESSION_DEFLATE
ASSIGN	195:2	195:16	10	compression = COMPRESSION_DEFLATE
LVAL	195:2	195:2	11	compression
FIELD	195:2	195:2	12	compression
LEAF_NODE	195:2	195:2	13	compression
ASSIGN_OP	195:14	195:14	11	=
LEAF_NODE	195:14	195:14	12	=
RVAL	195:16	195:16	11	COMPRESSION_DEFLATE
FIELD	195:16	195:16	12	COMPRESSION_DEFLATE
LEAF_NODE	195:16	195:16	13	COMPRESSION_DEFLATE
LEAF_NODE	195:35	195:35	9	;
LEAF_NODE	196:1	196:1	7	}
SELECTION	196:3	197:2	3	
KEYWORD	196:3	196:3	4	else
LEAF_NODE	196:3	196:3	5	else
STATEMENTS	197:2	197:2	4	
JUMP_STATEMENT	197:2	197:12	5	return ( 0 ) ;
KEYWORD	197:2	197:2	6	return
LEAF_NODE	197:2	197:2	7	return
DESTINATION	197:9	197:9	6	( 0 )
EXPR	197:9	197:11	7	( 0 )
LEAF_NODE	197:9	197:9	8	(
FIELD	197:10	197:10	8	0
LEAF_NODE	197:10	197:10	9	0
LEAF_NODE	197:11	197:11	8	)
LEAF_NODE	197:12	197:12	6	;
JUMP_STATEMENT	198:1	198:11	3	return ( 1 ) ;
KEYWORD	198:1	198:1	4	return
LEAF_NODE	198:1	198:1	5	return
DESTINATION	198:8	198:8	4	( 1 )
EXPR	198:8	198:10	5	( 1 )
LEAF_NODE	198:8	198:8	6	(
FIELD	198:9	198:9	6	1
LEAF_NODE	198:9	198:9	7	1
LEAF_NODE	198:10	198:10	6	)
LEAF_NODE	198:11	198:11	4	;
LEAF_NODE	199:0	199:0	2	}
FUNCTION_DEF	201:0	297:0	1	
RETURN_TYPE	201:0	201:0	2	int
TYPE_NAME	201:0	201:0	3	int
LEAF_NODE	201:0	201:0	4	int
FUNCTION_NAME	202:0	202:0	2	main
LEAF_NODE	202:0	202:0	3	main
PARAMETER_LIST	202:4	202:27	2	( int argc , char * [ ] argv )
LEAF_NODE	202:4	202:4	3	(
PARAMETER_DECL	202:5	202:9	3	int argc
TYPE	202:5	202:5	4	int
TYPE_NAME	202:5	202:5	5	int
LEAF_NODE	202:5	202:5	6	int
NAME	202:9	202:9	4	argc
LEAF_NODE	202:9	202:9	5	argc
LEAF_NODE	202:13	202:13	3	,
PARAMETER_DECL	202:15	202:21	3	char * [ ] argv
TYPE	202:15	202:25	4	char * [ ]
TYPE_NAME	202:15	202:15	5	char
LEAF_NODE	202:15	202:15	6	char
POINTER	202:19	202:19	5	*
LEAF_NODE	202:19	202:19	6	*
TYPE_SUFFIX	202:25	202:26	5	[ ]
LEAF_NODE	202:25	202:25	6	[
LEAF_NODE	202:26	202:26	6	]
NAME	202:21	202:21	4	argv
LEAF_NODE	202:21	202:21	5	argv
LEAF_NODE	202:27	202:27	3	)
LEAF_NODE	203:0	203:0	2	{
STATEMENTS	204:1	296:1	2	
SIMPLE_DECL	204:1	204:15	3	TIFF * in , TIFF * out ;
INIT_DECL_LIST	204:1	204:1	4	TIFF * in , TIFF * out
VAR_DECL	204:1	204:7	5	TIFF * in
TYPE	204:1	204:6	6	TIFF *
TYPE_NAME	204:1	204:1	7	TIFF
LEAF_NODE	204:1	204:1	8	TIFF
POINTER	204:6	204:6	7	*
LEAF_NODE	204:6	204:6	8	*
NAME	204:7	204:7	6	in
LEAF_NODE	204:7	204:7	7	in
LEAF_NODE	204:9	204:9	5	,
VAR_DECL	204:1	204:12	5	TIFF * out
TYPE	204:1	204:11	6	TIFF *
TYPE_NAME	204:1	204:1	7	TIFF
LEAF_NODE	204:1	204:1	8	TIFF
POINTER	204:11	204:11	7	*
LEAF_NODE	204:11	204:11	8	*
NAME	204:12	204:12	6	out
LEAF_NODE	204:12	204:12	7	out
LEAF_NODE	204:15	204:15	4	;
SIMPLE_DECL	205:1	205:50	3	uint16 samplesperpixel , uint16 bitspersample ; bitspersample = 1 , uint16 shortv ;
INIT_DECL_LIST	205:1	205:1	4	uint16 samplesperpixel , uint16 bitspersample ; bitspersample = 1 , uint16 shortv
VAR_DECL	205:1	205:8	5	uint16 samplesperpixel
TYPE	205:1	205:1	6	uint16
TYPE_NAME	205:1	205:1	7	uint16
LEAF_NODE	205:1	205:1	8	uint16
NAME	205:8	205:8	6	samplesperpixel
LEAF_NODE	205:8	205:8	7	samplesperpixel
LEAF_NODE	205:23	205:23	5	,
INIT_DECL_LIST	205:1	205:1	5	uint16 bitspersample ; bitspersample = 1 , uint16 shortv
VAR_DECL	205:1	205:25	6	uint16 bitspersample ; bitspersample = 1
TYPE	205:1	205:1	7	uint16
TYPE_NAME	205:1	205:1	8	uint16
LEAF_NODE	205:1	205:1	9	uint16
NAME	205:25	205:25	7	bitspersample
LEAF_NODE	205:25	205:25	8	bitspersample
LEAF_NODE	0:0	0:0	7	;
INIT	205:25	205:25	7	bitspersample = 1
ASSIGN	205:25	205:41	8	bitspersample = 1
LVAL	205:25	205:25	9	bitspersample
NAME	205:25	205:25	10	bitspersample
LEAF_NODE	205:25	205:25	11	bitspersample
ASSIGN_OP	205:39	205:39	9	=
LEAF_NODE	205:39	205:39	10	=
RVAL	205:41	205:41	9	1
FIELD	205:41	205:41	10	1
LEAF_NODE	205:41	205:41	11	1
LEAF_NODE	205:42	205:42	6	,
VAR_DECL	205:1	205:44	6	uint16 shortv
TYPE	205:1	205:1	7	uint16
TYPE_NAME	205:1	205:1	8	uint16
LEAF_NODE	205:1	205:1	9	uint16
NAME	205:44	205:44	7	shortv
LEAF_NODE	205:44	205:44	8	shortv
LEAF_NODE	205:50	205:50	4	;
SIMPLE_DECL	206:1	206:13	3	float floatv ;
VAR_DECL	206:1	206:7	4	float floatv
TYPE	206:1	206:1	5	float
TYPE_NAME	206:1	206:1	6	float
LEAF_NODE	206:1	206:1	7	float
NAME	206:7	206:7	5	floatv
LEAF_NODE	206:7	206:7	6	floatv
LEAF_NODE	206:13	206:13	4	;
SIMPLE_DECL	207:1	207:17	3	char [ 1024 ] thing ;
VAR_DECL	207:1	207:6	4	char [ 1024 ] thing
TYPE	207:1	207:11	5	char [ 1024 ]
TYPE_NAME	207:1	207:1	6	char
LEAF_NODE	207:1	207:1	7	char
TYPE_SUFFIX	207:11	207:16	6	[ 1024 ]
LEAF_NODE	207:11	207:11	7	[
FIELD	207:12	207:12	7	1024
LEAF_NODE	207:12	207:12	8	1024
LEAF_NODE	207:16	207:16	7	]
NAME	207:6	207:6	5	thing
LEAF_NODE	207:6	207:6	6	thing
LEAF_NODE	207:17	207:17	4	;
SIMPLE_DECL	208:1	208:34	3	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	208:1	208:8	4	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	208:1	208:1	5	uint32
TYPE_NAME	208:1	208:1	6	uint32
LEAF_NODE	208:1	208:1	7	uint32
NAME	208:8	208:8	5	rowsperstrip
LEAF_NODE	208:8	208:8	6	rowsperstrip
LEAF_NODE	0:0	0:0	5	;
INIT	208:8	208:8	5	rowsperstrip = ( uint32 ) - 1
ASSIGN	208:8	208:23	6	rowsperstrip = ( uint32 ) - 1
LVAL	208:8	208:8	7	rowsperstrip
NAME	208:8	208:8	8	rowsperstrip
LEAF_NODE	208:8	208:8	9	rowsperstrip
ASSIGN_OP	208:21	208:21	7	=
LEAF_NODE	208:21	208:21	8	=
RVAL	208:23	208:32	7	( uint32 ) - 1
LEAF_NODE	208:23	208:23	8	(
TYPE_NAME	208:24	208:24	8	uint32
LEAF_NODE	208:24	208:24	9	uint32
LEAF_NODE	208:30	208:30	8	)
UNARY_EXPR	208:32	208:33	8	- 1
UNARY_OPERATOR	208:32	208:32	9	-
LEAF_NODE	208:32	208:32	10	-
FIELD	208:33	208:33	9	1
LEAF_NODE	208:33	208:33	10	1
LEAF_NODE	208:34	208:34	4	;
SIMPLE_DECL	209:1	209:21	3	uint16 fillorder ; fillorder = 0 ;
VAR_DECL	209:1	209:8	4	uint16 fillorder ; fillorder = 0
TYPE	209:1	209:1	5	uint16
TYPE_NAME	209:1	209:1	6	uint16
LEAF_NODE	209:1	209:1	7	uint16
NAME	209:8	209:8	5	fillorder
LEAF_NODE	209:8	209:8	6	fillorder
LEAF_NODE	0:0	0:0	5	;
INIT	209:8	209:8	5	fillorder = 0
ASSIGN	209:8	209:20	6	fillorder = 0
LVAL	209:8	209:8	7	fillorder
NAME	209:8	209:8	8	fillorder
LEAF_NODE	209:8	209:8	9	fillorder
ASSIGN_OP	209:18	209:18	7	=
LEAF_NODE	209:18	209:18	8	=
RVAL	209:20	209:20	7	0
FIELD	209:20	209:20	8	0
LEAF_NODE	209:20	209:20	9	0
LEAF_NODE	209:21	209:21	4	;
SIMPLE_DECL	210:1	210:6	3	int c ;
VAR_DECL	210:1	210:5	4	int c
TYPE	210:1	210:1	5	int
TYPE_NAME	210:1	210:1	6	int
LEAF_NODE	210:1	210:1	7	int
NAME	210:5	210:5	5	c
LEAF_NODE	210:5	210:5	6	c
LEAF_NODE	210:6	210:6	4	;
LEAF_NODE	212:1	212:1	3	extern
SIMPLE_DECL	212:8	212:18	3	int optind ;
VAR_DECL	212:8	212:12	4	int optind
TYPE	212:8	212:8	5	int
TYPE_NAME	212:8	212:8	6	int
LEAF_NODE	212:8	212:8	7	int
NAME	212:12	212:12	5	optind
LEAF_NODE	212:12	212:12	6	optind
LEAF_NODE	212:18	212:18	4	;
LEAF_NODE	213:1	213:1	3	extern
SIMPLE_DECL	213:8	213:20	3	char * optarg ;
VAR_DECL	213:8	213:14	4	char * optarg
TYPE	213:8	213:13	5	char *
TYPE_NAME	213:8	213:8	6	char
LEAF_NODE	213:8	213:8	7	char
POINTER	213:13	213:13	6	*
LEAF_NODE	213:13	213:13	7	*
NAME	213:14	213:14	5	optarg
LEAF_NODE	213:14	213:14	6	optarg
LEAF_NODE	213:20	213:20	4	;
ITERATION	216:1	217:2	3	
KEYWORD	216:1	216:1	4	while
LEAF_NODE	216:1	216:1	5	while
LEAF_NODE	216:7	216:7	4	(
CONDITION	216:8	216:8	4	( c = getopt ( argc , argv , "c:f:r:t:" ) ) != - 1
EXPR	216:8	216:48	5	( c = getopt ( argc , argv , "c:f:r:t:" ) ) != - 1
LEAF_NODE	216:8	216:8	6	(
ASSIGN	216:9	216:13	6	c = getopt ( argc , argv , "c:f:r:t:" )
LVAL	216:9	216:9	7	c
FIELD	216:9	216:9	8	c
LEAF_NODE	216:9	216:9	9	c
ASSIGN_OP	216:11	216:11	7	=
LEAF_NODE	216:11	216:11	8	=
RVAL	216:13	216:13	7	getopt ( argc , argv , "c:f:r:t:" )
FUNCTION_CALL	216:13	216:42	8	getopt ( argc , argv , "c:f:r:t:" )
CALLEE	216:13	216:13	9	getopt
LEAF_NODE	216:13	216:13	10	getopt
LEAF_NODE	216:19	216:19	9	(
ARGUMENT	216:20	216:20	9	argc
FIELD	216:20	216:20	10	argc
LEAF_NODE	216:20	216:20	11	argc
LEAF_NODE	216:24	216:24	9	,
ARGUMENT	216:26	216:26	9	argv
FIELD	216:26	216:26	10	argv
LEAF_NODE	216:26	216:26	11	argv
LEAF_NODE	216:30	216:30	9	,
ARGUMENT	216:32	216:32	9	"c:f:r:t:"
FIELD	216:32	216:32	10	"c:f:r:t:"
LEAF_NODE	216:32	216:32	11	"c:f:r:t:"
LEAF_NODE	216:42	216:42	9	)
LEAF_NODE	216:43	216:43	6	)
EQ_OPERATOR	216:45	216:45	6	!=
LEAF_NODE	216:45	216:45	7	!=
UNARY_EXPR	216:48	216:49	6	- 1
UNARY_OPERATOR	216:48	216:48	7	-
LEAF_NODE	216:48	216:48	8	-
FIELD	216:49	216:49	7	1
LEAF_NODE	216:49	216:49	8	1
LEAF_NODE	216:50	216:50	4	)
STATEMENTS	217:2	217:2	4	
SELECTION	217:2	217:13	5	
KEYWORD	217:2	217:2	6	switch
LEAF_NODE	217:2	217:2	7	switch
LEAF_NODE	217:9	217:9	6	(
CONDITION	217:10	217:10	6	c
EXPR	217:10	217:10	7	c
FIELD	217:10	217:10	8	c
LEAF_NODE	217:10	217:10	9	c
LEAF_NODE	217:11	217:11	6	)
STATEMENTS	217:13	243:2	6	
LEAF_NODE	217:13	217:13	7	{
STATEMENTS	218:2	241:3	7	
LEAF_NODE	218:2	218:2	8	case
LEAF_NODE	218:7	218:7	8	'c'
LEAF_NODE	218:10	218:10	8	:
SELECTION	219:3	220:4	8	
KEYWORD	219:3	219:3	9	if
LEAF_NODE	219:3	219:3	10	if
LEAF_NODE	219:6	219:6	9	(
CONDITION	219:7	219:7	9	! processCompressOptions ( optarg )
EXPR	219:7	219:7	10	! processCompressOptions ( optarg )
UNARY_EXPR	219:7	219:8	11	! processCompressOptions ( optarg )
UNARY_OPERATOR	219:7	219:7	12	!
LEAF_NODE	219:7	219:7	13	!
FUNCTION_CALL	219:8	219:37	12	processCompressOptions ( optarg )
CALLEE	219:8	219:8	13	processCompressOptions
LEAF_NODE	219:8	219:8	14	processCompressOptions
LEAF_NODE	219:30	219:30	13	(
ARGUMENT	219:31	219:31	13	optarg
FIELD	219:31	219:31	14	optarg
LEAF_NODE	219:31	219:31	15	optarg
LEAF_NODE	219:37	219:37	13	)
LEAF_NODE	219:38	219:38	9	)
STATEMENTS	220:4	220:4	9	
EXPR_STATEMENT	220:4	220:11	10	usage ( ) ;
EXPR	220:4	220:4	11	usage ( )
FUNCTION_CALL	220:4	220:10	12	usage ( )
CALLEE	220:4	220:4	13	usage
LEAF_NODE	220:4	220:4	14	usage
LEAF_NODE	220:9	220:9	13	(
LEAF_NODE	220:10	220:10	13	)
LEAF_NODE	220:11	220:11	11	;
JUMP_STATEMENT	221:3	221:8	8	break DESTINATION ;
KEYWORD	221:3	221:3	9	break
LEAF_NODE	221:3	221:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	221:8	221:8	9	;
LEAF_NODE	222:2	222:2	8	case
LEAF_NODE	222:7	222:7	8	'f'
LEAF_NODE	222:10	222:10	8	:
SELECTION	223:3	224:4	8	
KEYWORD	223:3	223:3	9	if
LEAF_NODE	223:3	223:3	10	if
LEAF_NODE	223:6	223:6	9	(
CONDITION	223:7	223:7	9	streq ( optarg , "lsb2msb" )
EXPR	223:7	223:7	10	streq ( optarg , "lsb2msb" )
FUNCTION_CALL	223:7	223:30	11	streq ( optarg , "lsb2msb" )
CALLEE	223:7	223:7	12	streq
LEAF_NODE	223:7	223:7	13	streq
LEAF_NODE	223:12	223:12	12	(
ARGUMENT	223:13	223:13	12	optarg
FIELD	223:13	223:13	13	optarg
LEAF_NODE	223:13	223:13	14	optarg
LEAF_NODE	223:19	223:19	12	,
ARGUMENT	223:21	223:21	12	"lsb2msb"
FIELD	223:21	223:21	13	"lsb2msb"
LEAF_NODE	223:21	223:21	14	"lsb2msb"
LEAF_NODE	223:30	223:30	12	)
LEAF_NODE	223:31	223:31	9	)
STATEMENTS	224:4	224:4	9	
EXPR_STATEMENT	224:4	224:33	10	fillorder = FILLORDER_LSB2MSB ;
EXPR	224:4	224:4	11	fillorder = FILLORDER_LSB2MSB
ASSIGN	224:4	224:16	12	fillorder = FILLORDER_LSB2MSB
LVAL	224:4	224:4	13	fillorder
FIELD	224:4	224:4	14	fillorder
LEAF_NODE	224:4	224:4	15	fillorder
ASSIGN_OP	224:14	224:14	13	=
LEAF_NODE	224:14	224:14	14	=
RVAL	224:16	224:16	13	FILLORDER_LSB2MSB
FIELD	224:16	224:16	14	FILLORDER_LSB2MSB
LEAF_NODE	224:16	224:16	15	FILLORDER_LSB2MSB
LEAF_NODE	224:33	224:33	11	;
SELECTION	225:3	225:8	8	
KEYWORD	225:3	225:3	9	else
LEAF_NODE	225:3	225:3	10	else
STATEMENTS	225:8	225:8	9	
SELECTION	225:8	226:4	10	
KEYWORD	225:8	225:8	11	if
LEAF_NODE	225:8	225:8	12	if
LEAF_NODE	225:11	225:11	11	(
CONDITION	225:12	225:12	11	streq ( optarg , "msb2lsb" )
EXPR	225:12	225:12	12	streq ( optarg , "msb2lsb" )
FUNCTION_CALL	225:12	225:35	13	streq ( optarg , "msb2lsb" )
CALLEE	225:12	225:12	14	streq
LEAF_NODE	225:12	225:12	15	streq
LEAF_NODE	225:17	225:17	14	(
ARGUMENT	225:18	225:18	14	optarg
FIELD	225:18	225:18	15	optarg
LEAF_NODE	225:18	225:18	16	optarg
LEAF_NODE	225:24	225:24	14	,
ARGUMENT	225:26	225:26	14	"msb2lsb"
FIELD	225:26	225:26	15	"msb2lsb"
LEAF_NODE	225:26	225:26	16	"msb2lsb"
LEAF_NODE	225:35	225:35	14	)
LEAF_NODE	225:36	225:36	11	)
STATEMENTS	226:4	226:4	11	
EXPR_STATEMENT	226:4	226:33	12	fillorder = FILLORDER_MSB2LSB ;
EXPR	226:4	226:4	13	fillorder = FILLORDER_MSB2LSB
ASSIGN	226:4	226:16	14	fillorder = FILLORDER_MSB2LSB
LVAL	226:4	226:4	15	fillorder
FIELD	226:4	226:4	16	fillorder
LEAF_NODE	226:4	226:4	17	fillorder
ASSIGN_OP	226:14	226:14	15	=
LEAF_NODE	226:14	226:14	16	=
RVAL	226:16	226:16	15	FILLORDER_MSB2LSB
FIELD	226:16	226:16	16	FILLORDER_MSB2LSB
LEAF_NODE	226:16	226:16	17	FILLORDER_MSB2LSB
LEAF_NODE	226:33	226:33	13	;
SELECTION	227:3	228:4	8	
KEYWORD	227:3	227:3	9	else
LEAF_NODE	227:3	227:3	10	else
STATEMENTS	228:4	228:4	9	
EXPR_STATEMENT	228:4	228:11	10	usage ( ) ;
EXPR	228:4	228:4	11	usage ( )
FUNCTION_CALL	228:4	228:10	12	usage ( )
CALLEE	228:4	228:4	13	usage
LEAF_NODE	228:4	228:4	14	usage
LEAF_NODE	228:9	228:9	13	(
LEAF_NODE	228:10	228:10	13	)
LEAF_NODE	228:11	228:11	11	;
JUMP_STATEMENT	229:3	229:8	8	break DESTINATION ;
KEYWORD	229:3	229:3	9	break
LEAF_NODE	229:3	229:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	229:8	229:8	9	;
LEAF_NODE	230:2	230:2	8	case
LEAF_NODE	230:7	230:7	8	'r'
LEAF_NODE	230:10	230:10	8	:
EXPR_STATEMENT	231:3	231:30	8	rowsperstrip = atoi ( optarg ) ;
EXPR	231:3	231:3	9	rowsperstrip = atoi ( optarg )
ASSIGN	231:3	231:18	10	rowsperstrip = atoi ( optarg )
LVAL	231:3	231:3	11	rowsperstrip
FIELD	231:3	231:3	12	rowsperstrip
LEAF_NODE	231:3	231:3	13	rowsperstrip
ASSIGN_OP	231:16	231:16	11	=
LEAF_NODE	231:16	231:16	12	=
RVAL	231:18	231:18	11	atoi ( optarg )
FUNCTION_CALL	231:18	231:29	12	atoi ( optarg )
CALLEE	231:18	231:18	13	atoi
LEAF_NODE	231:18	231:18	14	atoi
LEAF_NODE	231:22	231:22	13	(
ARGUMENT	231:23	231:23	13	optarg
FIELD	231:23	231:23	14	optarg
LEAF_NODE	231:23	231:23	15	optarg
LEAF_NODE	231:29	231:29	13	)
LEAF_NODE	231:30	231:30	9	;
JUMP_STATEMENT	232:3	232:8	8	break DESTINATION ;
KEYWORD	232:3	232:3	9	break
LEAF_NODE	232:3	232:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	232:8	232:8	9	;
LEAF_NODE	233:2	233:2	8	case
LEAF_NODE	233:7	233:7	8	't'
LEAF_NODE	233:10	233:10	8	:
EXPR_STATEMENT	234:3	234:27	8	threshold = atoi ( optarg ) ;
EXPR	234:3	234:3	9	threshold = atoi ( optarg )
ASSIGN	234:3	234:15	10	threshold = atoi ( optarg )
LVAL	234:3	234:3	11	threshold
FIELD	234:3	234:3	12	threshold
LEAF_NODE	234:3	234:3	13	threshold
ASSIGN_OP	234:13	234:13	11	=
LEAF_NODE	234:13	234:13	12	=
RVAL	234:15	234:15	11	atoi ( optarg )
FUNCTION_CALL	234:15	234:26	12	atoi ( optarg )
CALLEE	234:15	234:15	13	atoi
LEAF_NODE	234:15	234:15	14	atoi
LEAF_NODE	234:19	234:19	13	(
ARGUMENT	234:20	234:20	13	optarg
FIELD	234:20	234:20	14	optarg
LEAF_NODE	234:20	234:20	15	optarg
LEAF_NODE	234:26	234:26	13	)
LEAF_NODE	234:27	234:27	9	;
SELECTION	235:3	236:4	8	
KEYWORD	235:3	235:3	9	if
LEAF_NODE	235:3	235:3	10	if
LEAF_NODE	235:6	235:6	9	(
CONDITION	235:7	235:7	9	threshold < 0
EXPR	235:7	235:19	10	threshold < 0
FIELD	235:7	235:7	11	threshold
LEAF_NODE	235:7	235:7	12	threshold
REL_OPERATOR	235:17	235:17	11	<
LEAF_NODE	235:17	235:17	12	<
FIELD	235:19	235:19	11	0
LEAF_NODE	235:19	235:19	12	0
LEAF_NODE	235:20	235:20	9	)
STATEMENTS	236:4	236:4	9	
EXPR_STATEMENT	236:4	236:17	10	threshold = 0 ;
EXPR	236:4	236:4	11	threshold = 0
ASSIGN	236:4	236:16	12	threshold = 0
LVAL	236:4	236:4	13	threshold
FIELD	236:4	236:4	14	threshold
LEAF_NODE	236:4	236:4	15	threshold
ASSIGN_OP	236:14	236:14	13	=
LEAF_NODE	236:14	236:14	14	=
RVAL	236:16	236:16	13	0
FIELD	236:16	236:16	14	0
LEAF_NODE	236:16	236:16	15	0
LEAF_NODE	236:17	236:17	11	;
SELECTION	237:3	237:8	8	
KEYWORD	237:3	237:3	9	else
LEAF_NODE	237:3	237:3	10	else
STATEMENTS	237:8	237:8	9	
SELECTION	237:8	238:4	10	
KEYWORD	237:8	237:8	11	if
LEAF_NODE	237:8	237:8	12	if
LEAF_NODE	237:11	237:11	11	(
CONDITION	237:12	237:12	11	threshold > 255
EXPR	237:12	237:24	12	threshold > 255
FIELD	237:12	237:12	13	threshold
LEAF_NODE	237:12	237:12	14	threshold
REL_OPERATOR	237:22	237:22	13	>
LEAF_NODE	237:22	237:22	14	>
FIELD	237:24	237:24	13	255
LEAF_NODE	237:24	237:24	14	255
LEAF_NODE	237:27	237:27	11	)
STATEMENTS	238:4	238:4	11	
EXPR_STATEMENT	238:4	238:19	12	threshold = 255 ;
EXPR	238:4	238:4	13	threshold = 255
ASSIGN	238:4	238:16	14	threshold = 255
LVAL	238:4	238:4	15	threshold
FIELD	238:4	238:4	16	threshold
LEAF_NODE	238:4	238:4	17	threshold
ASSIGN_OP	238:14	238:14	15	=
LEAF_NODE	238:14	238:14	16	=
RVAL	238:16	238:16	15	255
FIELD	238:16	238:16	16	255
LEAF_NODE	238:16	238:16	17	255
LEAF_NODE	238:19	238:19	13	;
JUMP_STATEMENT	239:3	239:8	8	break DESTINATION ;
KEYWORD	239:3	239:3	9	break
LEAF_NODE	239:3	239:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	239:8	239:8	9	;
LEAF_NODE	240:2	240:2	8	case
LEAF_NODE	240:7	240:7	8	'?'
LEAF_NODE	240:10	240:10	8	:
EXPR_STATEMENT	241:3	241:10	8	usage ( ) ;
EXPR	241:3	241:3	9	usage ( )
FUNCTION_CALL	241:3	241:9	10	usage ( )
CALLEE	241:3	241:3	11	usage
LEAF_NODE	241:3	241:3	12	usage
LEAF_NODE	241:8	241:8	11	(
LEAF_NODE	241:9	241:9	11	)
LEAF_NODE	241:10	241:10	9	;
LEAF_NODE	243:2	243:2	7	}
SELECTION	244:1	245:2	3	
KEYWORD	244:1	244:1	4	if
LEAF_NODE	244:1	244:1	5	if
LEAF_NODE	244:4	244:4	4	(
CONDITION	244:5	244:5	4	argc - optind < 2
EXPR	244:5	244:21	5	argc - optind < 2
FIELD	244:5	244:5	6	argc
LEAF_NODE	244:5	244:5	7	argc
LEAF_NODE	244:10	244:10	6	-
FIELD	244:12	244:12	6	optind
LEAF_NODE	244:12	244:12	7	optind
REL_OPERATOR	244:19	244:19	6	<
LEAF_NODE	244:19	244:19	7	<
FIELD	244:21	244:21	6	2
LEAF_NODE	244:21	244:21	7	2
LEAF_NODE	244:22	244:22	4	)
STATEMENTS	245:2	245:2	4	
EXPR_STATEMENT	245:2	245:9	5	usage ( ) ;
EXPR	245:2	245:2	6	usage ( )
FUNCTION_CALL	245:2	245:8	7	usage ( )
CALLEE	245:2	245:2	8	usage
LEAF_NODE	245:2	245:2	9	usage
LEAF_NODE	245:7	245:7	8	(
LEAF_NODE	245:8	245:8	8	)
LEAF_NODE	245:9	245:9	6	;
EXPR_STATEMENT	246:1	246:33	3	in = TIFFOpen ( argv [ optind ] , "r" ) ;
EXPR	246:1	246:1	4	in = TIFFOpen ( argv [ optind ] , "r" )
ASSIGN	246:1	246:6	5	in = TIFFOpen ( argv [ optind ] , "r" )
LVAL	246:1	246:1	6	in
FIELD	246:1	246:1	7	in
LEAF_NODE	246:1	246:1	8	in
ASSIGN_OP	246:4	246:4	6	=
LEAF_NODE	246:4	246:4	7	=
RVAL	246:6	246:6	6	TIFFOpen ( argv [ optind ] , "r" )
FUNCTION_CALL	246:6	246:32	7	TIFFOpen ( argv [ optind ] , "r" )
CALLEE	246:6	246:6	8	TIFFOpen
LEAF_NODE	246:6	246:6	9	TIFFOpen
LEAF_NODE	246:14	246:14	8	(
ARGUMENT	246:15	246:15	8	argv [ optind ]
FIELD	246:15	246:26	9	argv [ optind ]
LEAF_NODE	246:15	246:15	10	argv
LEAF_NODE	246:19	246:19	10	[
EXPR	246:20	246:20	10	optind
FIELD	246:20	246:20	11	optind
LEAF_NODE	246:20	246:20	12	optind
LEAF_NODE	246:26	246:26	10	]
LEAF_NODE	246:27	246:27	8	,
ARGUMENT	246:29	246:29	8	"r"
FIELD	246:29	246:29	9	"r"
LEAF_NODE	246:29	246:29	10	"r"
LEAF_NODE	246:32	246:32	8	)
LEAF_NODE	246:33	246:33	4	;
SELECTION	247:1	248:2	3	
KEYWORD	247:1	247:1	4	if
LEAF_NODE	247:1	247:1	5	if
LEAF_NODE	247:4	247:4	4	(
CONDITION	247:5	247:5	4	in == NULL
EXPR	247:5	247:11	5	in == NULL
FIELD	247:5	247:5	6	in
LEAF_NODE	247:5	247:5	7	in
EQ_OPERATOR	247:8	247:8	6	==
LEAF_NODE	247:8	247:8	7	==
FIELD	247:11	247:11	6	NULL
LEAF_NODE	247:11	247:11	7	NULL
LEAF_NODE	247:15	247:15	4	)
STATEMENTS	248:2	248:2	4	
JUMP_STATEMENT	248:2	248:13	5	return ( - 1 ) ;
KEYWORD	248:2	248:2	6	return
LEAF_NODE	248:2	248:2	7	return
DESTINATION	248:9	248:9	6	( - 1 )
EXPR	248:9	248:12	7	( - 1 )
LEAF_NODE	248:9	248:9	8	(
UNARY_EXPR	248:10	248:11	8	- 1
UNARY_OPERATOR	248:10	248:10	9	-
LEAF_NODE	248:10	248:10	10	-
FIELD	248:11	248:11	9	1
LEAF_NODE	248:11	248:11	10	1
LEAF_NODE	248:12	248:12	8	)
LEAF_NODE	248:13	248:13	6	;
EXPR_STATEMENT	249:1	249:60	3	TIFFGetField ( in , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel ) ;
EXPR	249:1	249:1	4	TIFFGetField ( in , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
FUNCTION_CALL	249:1	249:59	5	TIFFGetField ( in , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
CALLEE	249:1	249:1	6	TIFFGetField
LEAF_NODE	249:1	249:1	7	TIFFGetField
LEAF_NODE	249:13	249:13	6	(
ARGUMENT	249:14	249:14	6	in
FIELD	249:14	249:14	7	in
LEAF_NODE	249:14	249:14	8	in
LEAF_NODE	249:16	249:16	6	,
ARGUMENT	249:18	249:18	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	249:18	249:18	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	249:18	249:18	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	249:41	249:41	6	,
ARGUMENT	249:43	249:43	6	& samplesperpixel
UNARY_EXPR	249:43	249:44	7	& samplesperpixel
UNARY_OPERATOR	249:43	249:43	8	&
LEAF_NODE	249:43	249:43	9	&
FIELD	249:44	249:44	8	samplesperpixel
LEAF_NODE	249:44	249:44	9	samplesperpixel
LEAF_NODE	249:59	249:59	6	)
LEAF_NODE	249:60	249:60	4	;
SELECTION	250:1	250:27	3	
KEYWORD	250:1	250:1	4	if
LEAF_NODE	250:1	250:1	5	if
LEAF_NODE	250:4	250:4	4	(
CONDITION	250:5	250:5	4	samplesperpixel != 1
EXPR	250:5	250:24	5	samplesperpixel != 1
FIELD	250:5	250:5	6	samplesperpixel
LEAF_NODE	250:5	250:5	7	samplesperpixel
EQ_OPERATOR	250:21	250:21	6	!=
LEAF_NODE	250:21	250:21	7	!=
FIELD	250:24	250:24	6	1
LEAF_NODE	250:24	250:24	7	1
LEAF_NODE	250:25	250:25	4	)
STATEMENTS	250:27	253:1	4	
LEAF_NODE	250:27	250:27	5	{
STATEMENTS	251:2	252:2	5	
EXPR_STATEMENT	251:2	251:52	6	fprintf ( stderr , "%s: Not a b&w image.\n" , argv [ 0 ] ) ;
EXPR	251:2	251:2	7	fprintf ( stderr , "%s: Not a b&w image.\n" , argv [ 0 ] )
FUNCTION_CALL	251:2	251:51	8	fprintf ( stderr , "%s: Not a b&w image.\n" , argv [ 0 ] )
CALLEE	251:2	251:2	9	fprintf
LEAF_NODE	251:2	251:2	10	fprintf
LEAF_NODE	251:9	251:9	9	(
ARGUMENT	251:10	251:10	9	stderr
FIELD	251:10	251:10	10	stderr
LEAF_NODE	251:10	251:10	11	stderr
LEAF_NODE	251:16	251:16	9	,
ARGUMENT	251:18	251:18	9	"%s: Not a b&w image.\n"
FIELD	251:18	251:18	10	"%s: Not a b&w image.\n"
LEAF_NODE	251:18	251:18	11	"%s: Not a b&w image.\n"
LEAF_NODE	251:42	251:42	9	,
ARGUMENT	251:44	251:44	9	argv [ 0 ]
FIELD	251:44	251:50	10	argv [ 0 ]
LEAF_NODE	251:44	251:44	11	argv
LEAF_NODE	251:48	251:48	11	[
EXPR	251:49	251:49	11	0
FIELD	251:49	251:49	12	0
LEAF_NODE	251:49	251:49	13	0
LEAF_NODE	251:50	251:50	11	]
LEAF_NODE	251:51	251:51	9	)
LEAF_NODE	251:52	251:52	7	;
JUMP_STATEMENT	252:2	252:13	6	return ( - 1 ) ;
KEYWORD	252:2	252:2	7	return
LEAF_NODE	252:2	252:2	8	return
DESTINATION	252:9	252:9	7	( - 1 )
EXPR	252:9	252:12	8	( - 1 )
LEAF_NODE	252:9	252:9	9	(
UNARY_EXPR	252:10	252:11	9	- 1
UNARY_OPERATOR	252:10	252:10	10	-
LEAF_NODE	252:10	252:10	11	-
FIELD	252:11	252:11	10	1
LEAF_NODE	252:11	252:11	11	1
LEAF_NODE	252:12	252:12	9	)
LEAF_NODE	252:13	252:13	7	;
LEAF_NODE	253:1	253:1	5	}
EXPR_STATEMENT	254:1	254:56	3	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample ) ;
EXPR	254:1	254:1	4	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample )
FUNCTION_CALL	254:1	254:55	5	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample )
CALLEE	254:1	254:1	6	TIFFGetField
LEAF_NODE	254:1	254:1	7	TIFFGetField
LEAF_NODE	254:13	254:13	6	(
ARGUMENT	254:14	254:14	6	in
FIELD	254:14	254:14	7	in
LEAF_NODE	254:14	254:14	8	in
LEAF_NODE	254:16	254:16	6	,
ARGUMENT	254:18	254:18	6	TIFFTAG_BITSPERSAMPLE
FIELD	254:18	254:18	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	254:18	254:18	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	254:39	254:39	6	,
ARGUMENT	254:41	254:41	6	& bitspersample
UNARY_EXPR	254:41	254:42	7	& bitspersample
UNARY_OPERATOR	254:41	254:41	8	&
LEAF_NODE	254:41	254:41	9	&
FIELD	254:42	254:42	8	bitspersample
LEAF_NODE	254:42	254:42	9	bitspersample
LEAF_NODE	254:55	254:55	6	)
LEAF_NODE	254:56	254:56	4	;
SELECTION	255:1	255:25	3	
KEYWORD	255:1	255:1	4	if
LEAF_NODE	255:1	255:1	5	if
LEAF_NODE	255:4	255:4	4	(
CONDITION	255:5	255:5	4	bitspersample != 8
EXPR	255:5	255:22	5	bitspersample != 8
FIELD	255:5	255:5	6	bitspersample
LEAF_NODE	255:5	255:5	7	bitspersample
EQ_OPERATOR	255:19	255:19	6	!=
LEAF_NODE	255:19	255:19	7	!=
FIELD	255:22	255:22	6	8
LEAF_NODE	255:22	255:22	7	8
LEAF_NODE	255:23	255:23	4	)
STATEMENTS	255:25	259:1	4	
LEAF_NODE	255:25	255:25	5	{
STATEMENTS	256:2	258:2	5	
EXPR_STATEMENT	256:2	257:58	6	fprintf ( stderr , " %s: Sorry, only handle 8-bit samples.\n" , argv [ 0 ] ) ;
EXPR	256:2	256:2	7	fprintf ( stderr , " %s: Sorry, only handle 8-bit samples.\n" , argv [ 0 ] )
FUNCTION_CALL	256:2	257:57	8	fprintf ( stderr , " %s: Sorry, only handle 8-bit samples.\n" , argv [ 0 ] )
CALLEE	256:2	256:2	9	fprintf
LEAF_NODE	256:2	256:2	10	fprintf
LEAF_NODE	256:9	256:9	9	(
ARGUMENT	256:10	256:10	9	stderr
FIELD	256:10	256:10	10	stderr
LEAF_NODE	256:10	256:10	11	stderr
LEAF_NODE	256:16	256:16	9	,
ARGUMENT	257:6	257:6	9	" %s: Sorry, only handle 8-bit samples.\n"
FIELD	257:6	257:6	10	" %s: Sorry, only handle 8-bit samples.\n"
LEAF_NODE	257:6	257:6	11	" %s: Sorry, only handle 8-bit samples.\n"
LEAF_NODE	257:48	257:48	9	,
ARGUMENT	257:50	257:50	9	argv [ 0 ]
FIELD	257:50	257:56	10	argv [ 0 ]
LEAF_NODE	257:50	257:50	11	argv
LEAF_NODE	257:54	257:54	11	[
EXPR	257:55	257:55	11	0
FIELD	257:55	257:55	12	0
LEAF_NODE	257:55	257:55	13	0
LEAF_NODE	257:56	257:56	11	]
LEAF_NODE	257:57	257:57	9	)
LEAF_NODE	257:58	257:58	7	;
JUMP_STATEMENT	258:2	258:13	6	return ( - 1 ) ;
KEYWORD	258:2	258:2	7	return
LEAF_NODE	258:2	258:2	8	return
DESTINATION	258:9	258:9	7	( - 1 )
EXPR	258:9	258:12	8	( - 1 )
LEAF_NODE	258:9	258:9	9	(
UNARY_EXPR	258:10	258:11	9	- 1
UNARY_OPERATOR	258:10	258:10	10	-
LEAF_NODE	258:10	258:10	11	-
FIELD	258:11	258:11	10	1
LEAF_NODE	258:11	258:11	11	1
LEAF_NODE	258:12	258:12	9	)
LEAF_NODE	258:13	258:13	7	;
LEAF_NODE	259:1	259:1	5	}
EXPR_STATEMENT	260:1	260:36	3	out = TIFFOpen ( argv [ optind + 1 ] , "w" ) ;
EXPR	260:1	260:1	4	out = TIFFOpen ( argv [ optind + 1 ] , "w" )
ASSIGN	260:1	260:7	5	out = TIFFOpen ( argv [ optind + 1 ] , "w" )
LVAL	260:1	260:1	6	out
FIELD	260:1	260:1	7	out
LEAF_NODE	260:1	260:1	8	out
ASSIGN_OP	260:5	260:5	6	=
LEAF_NODE	260:5	260:5	7	=
RVAL	260:7	260:7	6	TIFFOpen ( argv [ optind + 1 ] , "w" )
FUNCTION_CALL	260:7	260:35	7	TIFFOpen ( argv [ optind + 1 ] , "w" )
CALLEE	260:7	260:7	8	TIFFOpen
LEAF_NODE	260:7	260:7	9	TIFFOpen
LEAF_NODE	260:15	260:15	8	(
ARGUMENT	260:16	260:16	8	argv [ optind + 1 ]
FIELD	260:16	260:29	9	argv [ optind + 1 ]
LEAF_NODE	260:16	260:16	10	argv
LEAF_NODE	260:20	260:20	10	[
EXPR	260:21	260:28	10	optind + 1
FIELD	260:21	260:21	11	optind
LEAF_NODE	260:21	260:21	12	optind
LEAF_NODE	260:27	260:27	11	+
FIELD	260:28	260:28	11	1
LEAF_NODE	260:28	260:28	12	1
LEAF_NODE	260:29	260:29	10	]
LEAF_NODE	260:30	260:30	8	,
ARGUMENT	260:32	260:32	8	"w"
FIELD	260:32	260:32	9	"w"
LEAF_NODE	260:32	260:32	10	"w"
LEAF_NODE	260:35	260:35	8	)
LEAF_NODE	260:36	260:36	4	;
SELECTION	261:1	262:2	3	
KEYWORD	261:1	261:1	4	if
LEAF_NODE	261:1	261:1	5	if
LEAF_NODE	261:4	261:4	4	(
CONDITION	261:5	261:5	4	out == NULL
EXPR	261:5	261:12	5	out == NULL
FIELD	261:5	261:5	6	out
LEAF_NODE	261:5	261:5	7	out
EQ_OPERATOR	261:9	261:9	6	==
LEAF_NODE	261:9	261:9	7	==
FIELD	261:12	261:12	6	NULL
LEAF_NODE	261:12	261:12	7	NULL
LEAF_NODE	261:16	261:16	4	)
STATEMENTS	262:2	262:2	4	
JUMP_STATEMENT	262:2	262:13	5	return ( - 1 ) ;
KEYWORD	262:2	262:2	6	return
LEAF_NODE	262:2	262:2	7	return
DESTINATION	262:9	262:9	6	( - 1 )
EXPR	262:9	262:12	7	( - 1 )
LEAF_NODE	262:9	262:9	8	(
UNARY_EXPR	262:10	262:11	8	- 1
UNARY_OPERATOR	262:10	262:10	9	-
LEAF_NODE	262:10	262:10	10	-
FIELD	262:11	262:11	9	1
LEAF_NODE	262:11	262:11	10	1
LEAF_NODE	262:12	262:12	8	)
LEAF_NODE	262:13	262:13	6	;
EXPR_STATEMENT	263:1	263:42	3	CopyField ( TIFFTAG_IMAGEWIDTH , imagewidth ) ;
EXPR	263:1	263:1	4	CopyField ( TIFFTAG_IMAGEWIDTH , imagewidth )
FUNCTION_CALL	263:1	263:41	5	CopyField ( TIFFTAG_IMAGEWIDTH , imagewidth )
CALLEE	263:1	263:1	6	CopyField
LEAF_NODE	263:1	263:1	7	CopyField
LEAF_NODE	263:10	263:10	6	(
ARGUMENT	263:11	263:11	6	TIFFTAG_IMAGEWIDTH
FIELD	263:11	263:11	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	263:11	263:11	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	263:29	263:29	6	,
ARGUMENT	263:31	263:31	6	imagewidth
FIELD	263:31	263:31	7	imagewidth
LEAF_NODE	263:31	263:31	8	imagewidth
LEAF_NODE	263:41	263:41	6	)
LEAF_NODE	263:42	263:42	4	;
EXPR_STATEMENT	264:1	264:52	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & imagelength ) ;
EXPR	264:1	264:1	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & imagelength )
FUNCTION_CALL	264:1	264:51	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & imagelength )
CALLEE	264:1	264:1	6	TIFFGetField
LEAF_NODE	264:1	264:1	7	TIFFGetField
LEAF_NODE	264:13	264:13	6	(
ARGUMENT	264:14	264:14	6	in
FIELD	264:14	264:14	7	in
LEAF_NODE	264:14	264:14	8	in
LEAF_NODE	264:16	264:16	6	,
ARGUMENT	264:18	264:18	6	TIFFTAG_IMAGELENGTH
FIELD	264:18	264:18	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	264:18	264:18	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	264:37	264:37	6	,
ARGUMENT	264:39	264:39	6	& imagelength
UNARY_EXPR	264:39	264:40	7	& imagelength
UNARY_OPERATOR	264:39	264:39	8	&
LEAF_NODE	264:39	264:39	9	&
FIELD	264:40	264:40	8	imagelength
LEAF_NODE	264:40	264:40	9	imagelength
LEAF_NODE	264:51	264:51	6	)
LEAF_NODE	264:52	264:52	4	;
EXPR_STATEMENT	265:1	265:54	3	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , imagelength - 1 ) ;
EXPR	265:1	265:1	4	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , imagelength - 1 )
FUNCTION_CALL	265:1	265:53	5	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , imagelength - 1 )
CALLEE	265:1	265:1	6	TIFFSetField
LEAF_NODE	265:1	265:1	7	TIFFSetField
LEAF_NODE	265:13	265:13	6	(
ARGUMENT	265:14	265:14	6	out
FIELD	265:14	265:14	7	out
LEAF_NODE	265:14	265:14	8	out
LEAF_NODE	265:17	265:17	6	,
ARGUMENT	265:19	265:19	6	TIFFTAG_IMAGELENGTH
FIELD	265:19	265:19	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	265:19	265:19	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	265:38	265:38	6	,
ARGUMENT	265:40	265:52	6	imagelength - 1
FIELD	265:40	265:40	7	imagelength
LEAF_NODE	265:40	265:40	8	imagelength
LEAF_NODE	265:51	265:51	7	-
FIELD	265:52	265:52	7	1
LEAF_NODE	265:52	265:52	8	1
LEAF_NODE	265:53	265:53	6	)
LEAF_NODE	265:54	265:54	4	;
EXPR_STATEMENT	266:1	266:44	3	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 1 ) ;
EXPR	266:1	266:1	4	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 1 )
FUNCTION_CALL	266:1	266:43	5	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 1 )
CALLEE	266:1	266:1	6	TIFFSetField
LEAF_NODE	266:1	266:1	7	TIFFSetField
LEAF_NODE	266:13	266:13	6	(
ARGUMENT	266:14	266:14	6	out
FIELD	266:14	266:14	7	out
LEAF_NODE	266:14	266:14	8	out
LEAF_NODE	266:17	266:17	6	,
ARGUMENT	266:19	266:19	6	TIFFTAG_BITSPERSAMPLE
FIELD	266:19	266:19	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	266:19	266:19	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	266:40	266:40	6	,
ARGUMENT	266:42	266:42	6	1
FIELD	266:42	266:42	7	1
LEAF_NODE	266:42	266:42	8	1
LEAF_NODE	266:43	266:43	6	)
LEAF_NODE	266:44	266:44	4	;
EXPR_STATEMENT	267:1	267:46	3	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 1 ) ;
EXPR	267:1	267:1	4	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 1 )
FUNCTION_CALL	267:1	267:45	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	267:1	267:1	6	TIFFSetField
LEAF_NODE	267:1	267:1	7	TIFFSetField
LEAF_NODE	267:13	267:13	6	(
ARGUMENT	267:14	267:14	6	out
FIELD	267:14	267:14	7	out
LEAF_NODE	267:14	267:14	8	out
LEAF_NODE	267:17	267:17	6	,
ARGUMENT	267:19	267:19	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	267:19	267:19	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	267:19	267:19	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	267:42	267:42	6	,
ARGUMENT	267:44	267:44	6	1
FIELD	267:44	267:44	7	1
LEAF_NODE	267:44	267:44	8	1
LEAF_NODE	267:45	267:45	6	)
LEAF_NODE	267:46	267:46	4	;
EXPR_STATEMENT	268:1	268:61	3	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	268:1	268:1	4	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	268:1	268:60	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	268:1	268:1	6	TIFFSetField
LEAF_NODE	268:1	268:1	7	TIFFSetField
LEAF_NODE	268:13	268:13	6	(
ARGUMENT	268:14	268:14	6	out
FIELD	268:14	268:14	7	out
LEAF_NODE	268:14	268:14	8	out
LEAF_NODE	268:17	268:17	6	,
ARGUMENT	268:19	268:19	6	TIFFTAG_PLANARCONFIG
FIELD	268:19	268:19	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	268:19	268:19	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	268:39	268:39	6	,
ARGUMENT	268:41	268:41	6	PLANARCONFIG_CONTIG
FIELD	268:41	268:41	7	PLANARCONFIG_CONTIG
LEAF_NODE	268:41	268:41	8	PLANARCONFIG_CONTIG
LEAF_NODE	268:60	268:60	6	)
LEAF_NODE	268:61	268:61	4	;
EXPR_STATEMENT	269:1	269:52	3	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	269:1	269:1	4	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	269:1	269:51	5	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	269:1	269:1	6	TIFFSetField
LEAF_NODE	269:1	269:1	7	TIFFSetField
LEAF_NODE	269:13	269:13	6	(
ARGUMENT	269:14	269:14	6	out
FIELD	269:14	269:14	7	out
LEAF_NODE	269:14	269:14	8	out
LEAF_NODE	269:17	269:17	6	,
ARGUMENT	269:19	269:19	6	TIFFTAG_COMPRESSION
FIELD	269:19	269:19	7	TIFFTAG_COMPRESSION
LEAF_NODE	269:19	269:19	8	TIFFTAG_COMPRESSION
LEAF_NODE	269:38	269:38	6	,
ARGUMENT	269:40	269:40	6	compression
FIELD	269:40	269:40	7	compression
LEAF_NODE	269:40	269:40	8	compression
LEAF_NODE	269:51	269:51	6	)
LEAF_NODE	269:52	269:52	4	;
SELECTION	270:1	271:2	3	
KEYWORD	270:1	270:1	4	if
LEAF_NODE	270:1	270:1	5	if
LEAF_NODE	270:4	270:4	4	(
CONDITION	270:5	270:5	4	fillorder
EXPR	270:5	270:5	5	fillorder
FIELD	270:5	270:5	6	fillorder
LEAF_NODE	270:5	270:5	7	fillorder
LEAF_NODE	270:14	270:14	4	)
STATEMENTS	271:2	271:2	4	
EXPR_STATEMENT	271:2	271:49	5	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder ) ;
EXPR	271:2	271:2	6	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder )
FUNCTION_CALL	271:2	271:48	7	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder )
CALLEE	271:2	271:2	8	TIFFSetField
LEAF_NODE	271:2	271:2	9	TIFFSetField
LEAF_NODE	271:14	271:14	8	(
ARGUMENT	271:15	271:15	8	out
FIELD	271:15	271:15	9	out
LEAF_NODE	271:15	271:15	10	out
LEAF_NODE	271:18	271:18	8	,
ARGUMENT	271:20	271:20	8	TIFFTAG_FILLORDER
FIELD	271:20	271:20	9	TIFFTAG_FILLORDER
LEAF_NODE	271:20	271:20	10	TIFFTAG_FILLORDER
LEAF_NODE	271:37	271:37	8	,
ARGUMENT	271:39	271:39	8	fillorder
FIELD	271:39	271:39	9	fillorder
LEAF_NODE	271:39	271:39	10	fillorder
LEAF_NODE	271:48	271:48	8	)
LEAF_NODE	271:49	271:49	6	;
SELECTION	272:1	273:2	3	
KEYWORD	272:1	272:1	4	else
LEAF_NODE	272:1	272:1	5	else
STATEMENTS	273:2	273:2	4	
EXPR_STATEMENT	273:2	273:38	5	CopyField ( TIFFTAG_FILLORDER , shortv ) ;
EXPR	273:2	273:2	6	CopyField ( TIFFTAG_FILLORDER , shortv )
FUNCTION_CALL	273:2	273:37	7	CopyField ( TIFFTAG_FILLORDER , shortv )
CALLEE	273:2	273:2	8	CopyField
LEAF_NODE	273:2	273:2	9	CopyField
LEAF_NODE	273:11	273:11	8	(
ARGUMENT	273:12	273:12	8	TIFFTAG_FILLORDER
FIELD	273:12	273:12	9	TIFFTAG_FILLORDER
LEAF_NODE	273:12	273:12	10	TIFFTAG_FILLORDER
LEAF_NODE	273:29	273:29	8	,
ARGUMENT	273:31	273:31	8	shortv
FIELD	273:31	273:31	9	shortv
LEAF_NODE	273:31	273:31	10	shortv
LEAF_NODE	273:37	273:37	8	)
LEAF_NODE	273:38	273:38	6	;
EXPR_STATEMENT	274:1	274:75	3	snprintf ( thing , sizeof ( thing ) , "Dithered B&W version of %s" , argv [ optind ] ) ;
EXPR	274:1	274:1	4	snprintf ( thing , sizeof ( thing ) , "Dithered B&W version of %s" , argv [ optind ] )
FUNCTION_CALL	274:1	274:74	5	snprintf ( thing , sizeof ( thing ) , "Dithered B&W version of %s" , argv [ optind ] )
CALLEE	274:1	274:1	6	snprintf
LEAF_NODE	274:1	274:1	7	snprintf
LEAF_NODE	274:9	274:9	6	(
ARGUMENT	274:10	274:10	6	thing
FIELD	274:10	274:10	7	thing
LEAF_NODE	274:10	274:10	8	thing
LEAF_NODE	274:15	274:15	6	,
ARGUMENT	274:17	274:17	6	sizeof ( thing )
FUNCTION_CALL	274:17	274:29	7	sizeof ( thing )
CALLEE	274:17	274:17	8	sizeof
LEAF_NODE	274:17	274:17	9	sizeof
LEAF_NODE	274:23	274:23	8	(
ARGUMENT	274:24	274:24	8	thing
FIELD	274:24	274:24	9	thing
LEAF_NODE	274:24	274:24	10	thing
LEAF_NODE	274:29	274:29	8	)
LEAF_NODE	274:30	274:30	6	,
ARGUMENT	274:32	274:32	6	"Dithered B&W version of %s"
FIELD	274:32	274:32	7	"Dithered B&W version of %s"
LEAF_NODE	274:32	274:32	8	"Dithered B&W version of %s"
LEAF_NODE	274:60	274:60	6	,
ARGUMENT	274:62	274:62	6	argv [ optind ]
FIELD	274:62	274:73	7	argv [ optind ]
LEAF_NODE	274:62	274:62	8	argv
LEAF_NODE	274:66	274:66	8	[
EXPR	274:67	274:67	8	optind
FIELD	274:67	274:67	9	optind
LEAF_NODE	274:67	274:67	10	optind
LEAF_NODE	274:73	274:73	8	]
LEAF_NODE	274:74	274:74	6	)
LEAF_NODE	274:75	274:75	4	;
EXPR_STATEMENT	275:1	275:51	3	TIFFSetField ( out , TIFFTAG_IMAGEDESCRIPTION , thing ) ;
EXPR	275:1	275:1	4	TIFFSetField ( out , TIFFTAG_IMAGEDESCRIPTION , thing )
FUNCTION_CALL	275:1	275:50	5	TIFFSetField ( out , TIFFTAG_IMAGEDESCRIPTION , thing )
CALLEE	275:1	275:1	6	TIFFSetField
LEAF_NODE	275:1	275:1	7	TIFFSetField
LEAF_NODE	275:13	275:13	6	(
ARGUMENT	275:14	275:14	6	out
FIELD	275:14	275:14	7	out
LEAF_NODE	275:14	275:14	8	out
LEAF_NODE	275:17	275:17	6	,
ARGUMENT	275:19	275:19	6	TIFFTAG_IMAGEDESCRIPTION
FIELD	275:19	275:19	7	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	275:19	275:19	8	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	275:43	275:43	6	,
ARGUMENT	275:45	275:45	6	thing
FIELD	275:45	275:45	7	thing
LEAF_NODE	275:45	275:45	8	thing
LEAF_NODE	275:50	275:50	6	)
LEAF_NODE	275:51	275:51	4	;
EXPR_STATEMENT	276:1	276:39	3	CopyField ( TIFFTAG_PHOTOMETRIC , shortv ) ;
EXPR	276:1	276:1	4	CopyField ( TIFFTAG_PHOTOMETRIC , shortv )
FUNCTION_CALL	276:1	276:38	5	CopyField ( TIFFTAG_PHOTOMETRIC , shortv )
CALLEE	276:1	276:1	6	CopyField
LEAF_NODE	276:1	276:1	7	CopyField
LEAF_NODE	276:10	276:10	6	(
ARGUMENT	276:11	276:11	6	TIFFTAG_PHOTOMETRIC
FIELD	276:11	276:11	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	276:11	276:11	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	276:30	276:30	6	,
ARGUMENT	276:32	276:32	6	shortv
FIELD	276:32	276:32	7	shortv
LEAF_NODE	276:32	276:32	8	shortv
LEAF_NODE	276:38	276:38	6	)
LEAF_NODE	276:39	276:39	4	;
EXPR_STATEMENT	277:1	277:39	3	CopyField ( TIFFTAG_ORIENTATION , shortv ) ;
EXPR	277:1	277:1	4	CopyField ( TIFFTAG_ORIENTATION , shortv )
FUNCTION_CALL	277:1	277:38	5	CopyField ( TIFFTAG_ORIENTATION , shortv )
CALLEE	277:1	277:1	6	CopyField
LEAF_NODE	277:1	277:1	7	CopyField
LEAF_NODE	277:10	277:10	6	(
ARGUMENT	277:11	277:11	6	TIFFTAG_ORIENTATION
FIELD	277:11	277:11	7	TIFFTAG_ORIENTATION
LEAF_NODE	277:11	277:11	8	TIFFTAG_ORIENTATION
LEAF_NODE	277:30	277:30	6	,
ARGUMENT	277:32	277:32	6	shortv
FIELD	277:32	277:32	7	shortv
LEAF_NODE	277:32	277:32	8	shortv
LEAF_NODE	277:38	277:38	6	)
LEAF_NODE	277:39	277:39	4	;
EXPR_STATEMENT	278:1	278:39	3	CopyField ( TIFFTAG_XRESOLUTION , floatv ) ;
EXPR	278:1	278:1	4	CopyField ( TIFFTAG_XRESOLUTION , floatv )
FUNCTION_CALL	278:1	278:38	5	CopyField ( TIFFTAG_XRESOLUTION , floatv )
CALLEE	278:1	278:1	6	CopyField
LEAF_NODE	278:1	278:1	7	CopyField
LEAF_NODE	278:10	278:10	6	(
ARGUMENT	278:11	278:11	6	TIFFTAG_XRESOLUTION
FIELD	278:11	278:11	7	TIFFTAG_XRESOLUTION
LEAF_NODE	278:11	278:11	8	TIFFTAG_XRESOLUTION
LEAF_NODE	278:30	278:30	6	,
ARGUMENT	278:32	278:32	6	floatv
FIELD	278:32	278:32	7	floatv
LEAF_NODE	278:32	278:32	8	floatv
LEAF_NODE	278:38	278:38	6	)
LEAF_NODE	278:39	278:39	4	;
EXPR_STATEMENT	279:1	279:39	3	CopyField ( TIFFTAG_YRESOLUTION , floatv ) ;
EXPR	279:1	279:1	4	CopyField ( TIFFTAG_YRESOLUTION , floatv )
FUNCTION_CALL	279:1	279:38	5	CopyField ( TIFFTAG_YRESOLUTION , floatv )
CALLEE	279:1	279:1	6	CopyField
LEAF_NODE	279:1	279:1	7	CopyField
LEAF_NODE	279:10	279:10	6	(
ARGUMENT	279:11	279:11	6	TIFFTAG_YRESOLUTION
FIELD	279:11	279:11	7	TIFFTAG_YRESOLUTION
LEAF_NODE	279:11	279:11	8	TIFFTAG_YRESOLUTION
LEAF_NODE	279:30	279:30	6	,
ARGUMENT	279:32	279:32	6	floatv
FIELD	279:32	279:32	7	floatv
LEAF_NODE	279:32	279:32	8	floatv
LEAF_NODE	279:38	279:38	6	)
LEAF_NODE	279:39	279:39	4	;
EXPR_STATEMENT	280:1	280:42	3	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv ) ;
EXPR	280:1	280:1	4	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv )
FUNCTION_CALL	280:1	280:41	5	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv )
CALLEE	280:1	280:1	6	CopyField
LEAF_NODE	280:1	280:1	7	CopyField
LEAF_NODE	280:10	280:10	6	(
ARGUMENT	280:11	280:11	6	TIFFTAG_RESOLUTIONUNIT
FIELD	280:11	280:11	7	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	280:11	280:11	8	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	280:33	280:33	6	,
ARGUMENT	280:35	280:35	6	shortv
FIELD	280:35	280:35	7	shortv
LEAF_NODE	280:35	280:35	8	shortv
LEAF_NODE	280:41	280:41	6	)
LEAF_NODE	280:42	280:42	4	;
EXPR_STATEMENT	281:8	281:62	3	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip ) ;
EXPR	281:8	281:8	4	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
ASSIGN	281:8	281:23	5	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
LVAL	281:8	281:8	6	rowsperstrip
FIELD	281:8	281:8	7	rowsperstrip
LEAF_NODE	281:8	281:8	8	rowsperstrip
ASSIGN_OP	281:21	281:21	6	=
LEAF_NODE	281:21	281:21	7	=
RVAL	281:23	281:23	6	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	281:23	281:61	7	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	281:23	281:23	8	TIFFDefaultStripSize
LEAF_NODE	281:23	281:23	9	TIFFDefaultStripSize
LEAF_NODE	281:43	281:43	8	(
ARGUMENT	281:44	281:44	8	out
FIELD	281:44	281:44	9	out
LEAF_NODE	281:44	281:44	10	out
LEAF_NODE	281:47	281:47	8	,
ARGUMENT	281:49	281:49	8	rowsperstrip
FIELD	281:49	281:49	9	rowsperstrip
LEAF_NODE	281:49	281:49	10	rowsperstrip
LEAF_NODE	281:61	281:61	8	)
LEAF_NODE	281:62	281:62	4	;
EXPR_STATEMENT	282:1	282:54	3	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ;
EXPR	282:1	282:1	4	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
FUNCTION_CALL	282:1	282:53	5	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
CALLEE	282:1	282:1	6	TIFFSetField
LEAF_NODE	282:1	282:1	7	TIFFSetField
LEAF_NODE	282:13	282:13	6	(
ARGUMENT	282:14	282:14	6	out
FIELD	282:14	282:14	7	out
LEAF_NODE	282:14	282:14	8	out
LEAF_NODE	282:17	282:17	6	,
ARGUMENT	282:19	282:19	6	TIFFTAG_ROWSPERSTRIP
FIELD	282:19	282:19	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	282:19	282:19	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	282:39	282:39	6	,
ARGUMENT	282:41	282:41	6	rowsperstrip
FIELD	282:41	282:41	7	rowsperstrip
LEAF_NODE	282:41	282:41	8	rowsperstrip
LEAF_NODE	282:53	282:53	6	)
LEAF_NODE	282:54	282:54	4	;
SELECTION	283:1	283:22	3	
KEYWORD	283:1	283:1	4	switch
LEAF_NODE	283:1	283:1	5	switch
LEAF_NODE	283:8	283:8	4	(
CONDITION	283:9	283:9	4	compression
EXPR	283:9	283:9	5	compression
FIELD	283:9	283:9	6	compression
LEAF_NODE	283:9	283:9	7	compression
LEAF_NODE	283:20	283:20	4	)
STATEMENTS	283:22	292:1	4	
LEAF_NODE	283:22	283:22	5	{
STATEMENTS	284:1	291:2	5	
LABEL	284:1	284:27	6	case COMPRESSION_CCITTFAX3 :
LEAF_NODE	284:1	284:1	7	case
LEAF_NODE	284:6	284:6	7	COMPRESSION_CCITTFAX3
LEAF_NODE	284:27	284:27	7	:
EXPR_STATEMENT	285:2	285:57	6	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , group3options ) ;
EXPR	285:2	285:2	7	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , group3options )
FUNCTION_CALL	285:2	285:56	8	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , group3options )
CALLEE	285:2	285:2	9	TIFFSetField
LEAF_NODE	285:2	285:2	10	TIFFSetField
LEAF_NODE	285:14	285:14	9	(
ARGUMENT	285:15	285:15	9	out
FIELD	285:15	285:15	10	out
LEAF_NODE	285:15	285:15	11	out
LEAF_NODE	285:18	285:18	9	,
ARGUMENT	285:20	285:20	9	TIFFTAG_GROUP3OPTIONS
FIELD	285:20	285:20	10	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	285:20	285:20	11	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	285:41	285:41	9	,
ARGUMENT	285:43	285:43	9	group3options
FIELD	285:43	285:43	10	group3options
LEAF_NODE	285:43	285:43	11	group3options
LEAF_NODE	285:56	285:56	9	)
LEAF_NODE	285:57	285:57	7	;
JUMP_STATEMENT	286:2	286:7	6	break DESTINATION ;
KEYWORD	286:2	286:2	7	break
LEAF_NODE	286:2	286:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	286:7	286:7	7	;
LABEL	287:1	287:21	6	case COMPRESSION_LZW :
LEAF_NODE	287:1	287:1	7	case
LEAF_NODE	287:6	287:6	7	COMPRESSION_LZW
LEAF_NODE	287:21	287:21	7	:
LABEL	288:1	288:25	6	case COMPRESSION_DEFLATE :
LEAF_NODE	288:1	288:1	7	case
LEAF_NODE	288:6	288:6	7	COMPRESSION_DEFLATE
LEAF_NODE	288:25	288:25	7	:
SELECTION	289:2	290:3	6	
KEYWORD	289:2	289:2	7	if
LEAF_NODE	289:2	289:2	8	if
LEAF_NODE	289:5	289:5	7	(
CONDITION	289:6	289:6	7	predictor
EXPR	289:6	289:6	8	predictor
FIELD	289:6	289:6	9	predictor
LEAF_NODE	289:6	289:6	10	predictor
LEAF_NODE	289:15	289:15	7	)
STATEMENTS	290:3	290:3	7	
EXPR_STATEMENT	290:3	290:50	8	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor ) ;
EXPR	290:3	290:3	9	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	290:3	290:49	10	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
CALLEE	290:3	290:3	11	TIFFSetField
LEAF_NODE	290:3	290:3	12	TIFFSetField
LEAF_NODE	290:15	290:15	11	(
ARGUMENT	290:16	290:16	11	out
FIELD	290:16	290:16	12	out
LEAF_NODE	290:16	290:16	13	out
LEAF_NODE	290:19	290:19	11	,
ARGUMENT	290:21	290:21	11	TIFFTAG_PREDICTOR
FIELD	290:21	290:21	12	TIFFTAG_PREDICTOR
LEAF_NODE	290:21	290:21	13	TIFFTAG_PREDICTOR
LEAF_NODE	290:38	290:38	11	,
ARGUMENT	290:40	290:40	11	predictor
FIELD	290:40	290:40	12	predictor
LEAF_NODE	290:40	290:40	13	predictor
LEAF_NODE	290:49	290:49	11	)
LEAF_NODE	290:50	290:50	9	;
JUMP_STATEMENT	291:2	291:7	6	break DESTINATION ;
KEYWORD	291:2	291:2	7	break
LEAF_NODE	291:2	291:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	291:7	291:7	7	;
LEAF_NODE	292:1	292:1	5	}
EXPR_STATEMENT	293:1	293:18	3	fsdither ( in , out ) ;
EXPR	293:1	293:1	4	fsdither ( in , out )
FUNCTION_CALL	293:1	293:17	5	fsdither ( in , out )
CALLEE	293:1	293:1	6	fsdither
LEAF_NODE	293:1	293:1	7	fsdither
LEAF_NODE	293:9	293:9	6	(
ARGUMENT	293:10	293:10	6	in
FIELD	293:10	293:10	7	in
LEAF_NODE	293:10	293:10	8	in
LEAF_NODE	293:12	293:12	6	,
ARGUMENT	293:14	293:14	6	out
FIELD	293:14	293:14	7	out
LEAF_NODE	293:14	293:14	8	out
LEAF_NODE	293:17	293:17	6	)
LEAF_NODE	293:18	293:18	4	;
EXPR_STATEMENT	294:1	294:14	3	TIFFClose ( in ) ;
EXPR	294:1	294:1	4	TIFFClose ( in )
FUNCTION_CALL	294:1	294:13	5	TIFFClose ( in )
CALLEE	294:1	294:1	6	TIFFClose
LEAF_NODE	294:1	294:1	7	TIFFClose
LEAF_NODE	294:10	294:10	6	(
ARGUMENT	294:11	294:11	6	in
FIELD	294:11	294:11	7	in
LEAF_NODE	294:11	294:11	8	in
LEAF_NODE	294:13	294:13	6	)
LEAF_NODE	294:14	294:14	4	;
EXPR_STATEMENT	295:1	295:15	3	TIFFClose ( out ) ;
EXPR	295:1	295:1	4	TIFFClose ( out )
FUNCTION_CALL	295:1	295:14	5	TIFFClose ( out )
CALLEE	295:1	295:1	6	TIFFClose
LEAF_NODE	295:1	295:1	7	TIFFClose
LEAF_NODE	295:10	295:10	6	(
ARGUMENT	295:11	295:11	6	out
FIELD	295:11	295:11	7	out
LEAF_NODE	295:11	295:11	8	out
LEAF_NODE	295:14	295:14	6	)
LEAF_NODE	295:15	295:15	4	;
JUMP_STATEMENT	296:1	296:11	3	return ( 0 ) ;
KEYWORD	296:1	296:1	4	return
LEAF_NODE	296:1	296:1	5	return
DESTINATION	296:8	296:8	4	( 0 )
EXPR	296:8	296:10	5	( 0 )
LEAF_NODE	296:8	296:8	6	(
FIELD	296:9	296:9	6	0
LEAF_NODE	296:9	296:9	7	0
LEAF_NODE	296:10	296:10	6	)
LEAF_NODE	296:11	296:11	4	;
LEAF_NODE	297:0	297:0	2	}
FUNCTION_DEF	325:0	336:0	1	
RETURN_TYPE	325:0	325:7	2	static void
LEAF_NODE	325:0	325:0	3	static
TYPE_NAME	325:7	325:7	3	void
LEAF_NODE	325:7	325:7	4	void
FUNCTION_NAME	326:0	326:0	2	usage
LEAF_NODE	326:0	326:0	3	usage
PARAMETER_LIST	326:5	326:10	2	( void )
LEAF_NODE	326:5	326:5	3	(
PARAMETER_DECL	326:6	326:6	3	void
LEAF_NODE	326:6	326:6	4	void
LEAF_NODE	326:10	326:10	3	)
LEAF_NODE	327:0	327:0	2	{
STATEMENTS	328:1	335:1	2	
SIMPLE_DECL	328:1	328:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	328:1	328:6	4	char [ BUFSIZ ] buf
TYPE	328:1	328:9	5	char [ BUFSIZ ]
TYPE_NAME	328:1	328:1	6	char
LEAF_NODE	328:1	328:1	7	char
TYPE_SUFFIX	328:9	328:16	6	[ BUFSIZ ]
LEAF_NODE	328:9	328:9	7	[
FIELD	328:10	328:10	7	BUFSIZ
LEAF_NODE	328:10	328:10	8	BUFSIZ
LEAF_NODE	328:16	328:16	7	]
NAME	328:6	328:6	5	buf
LEAF_NODE	328:6	328:6	6	buf
LEAF_NODE	328:17	328:17	4	;
SIMPLE_DECL	329:1	329:6	3	int i ;
VAR_DECL	329:1	329:5	4	int i
TYPE	329:1	329:1	5	int
TYPE_NAME	329:1	329:1	6	int
LEAF_NODE	329:1	329:1	7	int
NAME	329:5	329:5	5	i
LEAF_NODE	329:5	329:5	6	i
LEAF_NODE	329:6	329:6	4	;
EXPR_STATEMENT	331:1	331:20	3	setbuf ( stderr , buf ) ;
EXPR	331:1	331:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	331:1	331:19	5	setbuf ( stderr , buf )
CALLEE	331:1	331:1	6	setbuf
LEAF_NODE	331:1	331:1	7	setbuf
LEAF_NODE	331:7	331:7	6	(
ARGUMENT	331:8	331:8	6	stderr
FIELD	331:8	331:8	7	stderr
LEAF_NODE	331:8	331:8	8	stderr
LEAF_NODE	331:14	331:14	6	,
ARGUMENT	331:16	331:16	6	buf
FIELD	331:16	331:16	7	buf
LEAF_NODE	331:16	331:16	8	buf
LEAF_NODE	331:19	331:19	6	)
LEAF_NODE	331:20	331:20	4	;
EXPR_STATEMENT	332:8	332:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	332:8	332:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	332:8	332:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	332:8	332:8	6	fprintf
LEAF_NODE	332:8	332:8	7	fprintf
LEAF_NODE	332:15	332:15	6	(
ARGUMENT	332:16	332:16	6	stderr
FIELD	332:16	332:16	7	stderr
LEAF_NODE	332:16	332:16	8	stderr
LEAF_NODE	332:22	332:22	6	,
ARGUMENT	332:24	332:24	6	"%s\n\n"
FIELD	332:24	332:24	7	"%s\n\n"
LEAF_NODE	332:24	332:24	8	"%s\n\n"
LEAF_NODE	332:32	332:32	6	,
ARGUMENT	332:34	332:34	6	TIFFGetVersion ( )
FUNCTION_CALL	332:34	332:49	7	TIFFGetVersion ( )
CALLEE	332:34	332:34	8	TIFFGetVersion
LEAF_NODE	332:34	332:34	9	TIFFGetVersion
LEAF_NODE	332:48	332:48	8	(
LEAF_NODE	332:49	332:49	8	)
LEAF_NODE	332:50	332:50	6	)
LEAF_NODE	332:51	332:51	4	;
ITERATION	333:1	334:2	3	
KEYWORD	333:1	333:1	4	for
LEAF_NODE	333:1	333:1	5	for
LEAF_NODE	333:5	333:5	4	(
FOR_INIT	333:6	333:11	4	i = 0 ;
EXPR	333:6	333:6	5	i = 0
ASSIGN	333:6	333:10	6	i = 0
LVAL	333:6	333:6	7	i
FIELD	333:6	333:6	8	i
LEAF_NODE	333:6	333:6	9	i
ASSIGN_OP	333:8	333:8	7	=
LEAF_NODE	333:8	333:8	8	=
RVAL	333:10	333:10	7	0
FIELD	333:10	333:10	8	0
LEAF_NODE	333:10	333:10	9	0
LEAF_NODE	333:11	333:11	5	;
CONDITION	333:13	333:13	4	stuff [ i ] != NULL
EXPR	333:13	333:25	5	stuff [ i ] != NULL
FIELD	333:13	333:20	6	stuff [ i ]
LEAF_NODE	333:13	333:13	7	stuff
LEAF_NODE	333:18	333:18	7	[
EXPR	333:19	333:19	7	i
FIELD	333:19	333:19	8	i
LEAF_NODE	333:19	333:19	9	i
LEAF_NODE	333:20	333:20	7	]
EQ_OPERATOR	333:22	333:22	6	!=
LEAF_NODE	333:22	333:22	7	!=
FIELD	333:25	333:25	6	NULL
LEAF_NODE	333:25	333:25	7	NULL
LEAF_NODE	333:29	333:29	4	;
FOR_EXPR	333:31	333:31	4	i ++
EXPR	333:31	333:31	5	i ++
FIELD	333:31	333:32	6	i ++
LEAF_NODE	333:31	333:31	7	i
LEAF_NODE	333:32	333:32	7	++
LEAF_NODE	333:34	333:34	4	)
STATEMENTS	334:2	334:2	4	
EXPR_STATEMENT	334:2	334:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	334:2	334:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	334:2	334:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	334:2	334:2	8	fprintf
LEAF_NODE	334:2	334:2	9	fprintf
LEAF_NODE	334:9	334:9	8	(
ARGUMENT	334:10	334:10	8	stderr
FIELD	334:10	334:10	9	stderr
LEAF_NODE	334:10	334:10	10	stderr
LEAF_NODE	334:16	334:16	8	,
ARGUMENT	334:18	334:18	8	"%s\n"
FIELD	334:18	334:18	9	"%s\n"
LEAF_NODE	334:18	334:18	10	"%s\n"
LEAF_NODE	334:24	334:24	8	,
ARGUMENT	334:26	334:26	8	stuff [ i ]
FIELD	334:26	334:33	9	stuff [ i ]
LEAF_NODE	334:26	334:26	10	stuff
LEAF_NODE	334:31	334:31	10	[
EXPR	334:32	334:32	10	i
FIELD	334:32	334:32	11	i
LEAF_NODE	334:32	334:32	12	i
LEAF_NODE	334:33	334:33	10	]
LEAF_NODE	334:34	334:34	8	)
LEAF_NODE	334:35	334:35	6	;
EXPR_STATEMENT	335:1	335:9	3	exit ( - 1 ) ;
EXPR	335:1	335:1	4	exit ( - 1 )
FUNCTION_CALL	335:1	335:8	5	exit ( - 1 )
CALLEE	335:1	335:1	6	exit
LEAF_NODE	335:1	335:1	7	exit
LEAF_NODE	335:5	335:5	6	(
ARGUMENT	335:6	335:6	6	- 1
UNARY_EXPR	335:6	335:7	7	- 1
UNARY_OPERATOR	335:6	335:6	8	-
LEAF_NODE	335:6	335:6	9	-
FIELD	335:7	335:7	8	1
LEAF_NODE	335:7	335:7	9	1
LEAF_NODE	335:8	335:8	6	)
LEAF_NODE	335:9	335:9	4	;
LEAF_NODE	336:0	336:0	2	}
