SOURCE_FILE	89:8	1160:0	0	
SIMPLE_DECL	89:8	99:14	1	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; unsigned short nbits ; unsigned short maxcode ; unsigned short free_ent ; unsigned long nextdata ; long nextbits ; int rw_mode ; } LZWBaseState ;
VAR_DECL	89:8	99:2	2	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; unsigned short nbits ; unsigned short maxcode ; unsigned short free_ent ; unsigned long nextdata ; long nextbits ; int rw_mode ; } LZWBaseState
TYPE	89:8	89:8	3	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; unsigned short nbits ; unsigned short maxcode ; unsigned short free_ent ; unsigned long nextdata ; long nextbits ; int rw_mode ; }
CLASS_DEF	89:8	99:0	4	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; unsigned short nbits ; unsigned short maxcode ; unsigned short free_ent ; unsigned long nextdata ; long nextbits ; int rw_mode ; }
LEAF_NODE	89:8	89:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	89:15	89:15	5	{
CLASS_CONTENT	90:1	98:1	5	TIFFPredictorState predict ; unsigned short nbits ; unsigned short maxcode ; unsigned short free_ent ; unsigned long nextdata ; long nextbits ; int rw_mode ;
SIMPLE_DECL	90:1	90:27	6	TIFFPredictorState predict ;
VAR_DECL	90:1	90:20	7	TIFFPredictorState predict
TYPE	90:1	90:1	8	TIFFPredictorState
TYPE_NAME	90:1	90:1	9	TIFFPredictorState
LEAF_NODE	90:1	90:1	10	TIFFPredictorState
NAME	90:20	90:20	8	predict
LEAF_NODE	90:20	90:20	9	predict
LEAF_NODE	90:27	90:27	7	;
SIMPLE_DECL	92:1	92:22	6	unsigned short nbits ;
VAR_DECL	92:1	92:17	7	unsigned short nbits
TYPE	92:1	92:1	8	unsigned short
TYPE_NAME	92:1	92:10	9	unsigned short
LEAF_NODE	92:1	92:1	10	unsigned
LEAF_NODE	92:10	92:10	10	short
NAME	92:17	92:17	8	nbits
LEAF_NODE	92:17	92:17	9	nbits
LEAF_NODE	92:22	92:22	7	;
SIMPLE_DECL	93:1	93:24	6	unsigned short maxcode ;
VAR_DECL	93:1	93:17	7	unsigned short maxcode
TYPE	93:1	93:1	8	unsigned short
TYPE_NAME	93:1	93:10	9	unsigned short
LEAF_NODE	93:1	93:1	10	unsigned
LEAF_NODE	93:10	93:10	10	short
NAME	93:17	93:17	8	maxcode
LEAF_NODE	93:17	93:17	9	maxcode
LEAF_NODE	93:24	93:24	7	;
SIMPLE_DECL	94:1	94:25	6	unsigned short free_ent ;
VAR_DECL	94:1	94:17	7	unsigned short free_ent
TYPE	94:1	94:1	8	unsigned short
TYPE_NAME	94:1	94:10	9	unsigned short
LEAF_NODE	94:1	94:1	10	unsigned
LEAF_NODE	94:10	94:10	10	short
NAME	94:17	94:17	8	free_ent
LEAF_NODE	94:17	94:17	9	free_ent
LEAF_NODE	94:25	94:25	7	;
SIMPLE_DECL	95:1	95:25	6	unsigned long nextdata ;
VAR_DECL	95:1	95:17	7	unsigned long nextdata
TYPE	95:1	95:1	8	unsigned long
TYPE_NAME	95:1	95:10	9	unsigned long
LEAF_NODE	95:1	95:1	10	unsigned
LEAF_NODE	95:10	95:10	10	long
NAME	95:17	95:17	8	nextdata
LEAF_NODE	95:17	95:17	9	nextdata
LEAF_NODE	95:25	95:25	7	;
SIMPLE_DECL	96:1	96:25	6	long nextbits ;
VAR_DECL	96:1	96:17	7	long nextbits
TYPE	96:1	96:1	8	long
TYPE_NAME	96:1	96:1	9	long
LEAF_NODE	96:1	96:1	10	long
NAME	96:17	96:17	8	nextbits
LEAF_NODE	96:17	96:17	9	nextbits
LEAF_NODE	96:25	96:25	7	;
SIMPLE_DECL	98:1	98:24	6	int rw_mode ;
VAR_DECL	98:1	98:17	7	int rw_mode
TYPE	98:1	98:1	8	int
TYPE_NAME	98:1	98:1	9	int
LEAF_NODE	98:1	98:1	10	int
NAME	98:17	98:17	8	rw_mode
LEAF_NODE	98:17	98:17	9	rw_mode
LEAF_NODE	98:24	98:24	7	;
LEAF_NODE	99:0	99:0	5	}
NAME	99:2	99:2	3	LZWBaseState
LEAF_NODE	99:2	99:2	4	LZWBaseState
LEAF_NODE	99:14	99:14	2	;
SIMPLE_DECL	110:8	110:22	1	uint16 hcode_t ;
VAR_DECL	110:8	110:15	2	uint16 hcode_t
TYPE	110:8	110:8	3	uint16
TYPE_NAME	110:8	110:8	4	uint16
LEAF_NODE	110:8	110:8	5	uint16
NAME	110:15	110:15	3	hcode_t
LEAF_NODE	110:15	110:15	4	hcode_t
LEAF_NODE	110:22	110:22	2	;
SIMPLE_DECL	111:8	114:8	1	struct CLASS_NAME BASE_CLASSES { long hash ; hcode_t code ; } hash_t ;
VAR_DECL	111:8	114:2	2	struct CLASS_NAME BASE_CLASSES { long hash ; hcode_t code ; } hash_t
TYPE	111:8	111:8	3	struct CLASS_NAME BASE_CLASSES { long hash ; hcode_t code ; }
CLASS_DEF	111:8	114:0	4	struct CLASS_NAME BASE_CLASSES { long hash ; hcode_t code ; }
LEAF_NODE	111:8	111:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	111:15	111:15	5	{
CLASS_CONTENT	112:1	113:1	5	long hash ; hcode_t code ;
SIMPLE_DECL	112:1	112:10	6	long hash ;
VAR_DECL	112:1	112:6	7	long hash
TYPE	112:1	112:1	8	long
TYPE_NAME	112:1	112:1	9	long
LEAF_NODE	112:1	112:1	10	long
NAME	112:6	112:6	8	hash
LEAF_NODE	112:6	112:6	9	hash
LEAF_NODE	112:10	112:10	7	;
SIMPLE_DECL	113:1	113:13	6	hcode_t code ;
VAR_DECL	113:1	113:9	7	hcode_t code
TYPE	113:1	113:1	8	hcode_t
TYPE_NAME	113:1	113:1	9	hcode_t
LEAF_NODE	113:1	113:1	10	hcode_t
NAME	113:9	113:9	8	code
LEAF_NODE	113:9	113:9	9	code
LEAF_NODE	113:13	113:13	7	;
LEAF_NODE	114:0	114:0	5	}
NAME	114:2	114:2	3	hash_t
LEAF_NODE	114:2	114:2	4	hash_t
LEAF_NODE	114:8	114:8	2	;
SIMPLE_DECL	119:8	124:8	1	struct code_ent BASE_CLASSES { struct code_ent * next ; unsigned short length ; unsigned char value ; unsigned char firstchar ; } code_t ;
VAR_DECL	119:8	124:2	2	struct code_ent BASE_CLASSES { struct code_ent * next ; unsigned short length ; unsigned char value ; unsigned char firstchar ; } code_t
TYPE	119:8	119:8	3	struct code_ent BASE_CLASSES { struct code_ent * next ; unsigned short length ; unsigned char value ; unsigned char firstchar ; }
CLASS_DEF	119:8	124:0	4	struct code_ent BASE_CLASSES { struct code_ent * next ; unsigned short length ; unsigned char value ; unsigned char firstchar ; }
LEAF_NODE	119:8	119:8	5	struct
CLASS_NAME	119:15	119:15	5	code_ent
LEAF_NODE	119:15	119:15	6	code_ent
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	119:24	119:24	5	{
CLASS_CONTENT	120:1	123:1	5	struct code_ent * next ; unsigned short length ; unsigned char value ; unsigned char firstchar ;
SIMPLE_DECL	120:1	120:22	6	struct code_ent * next ;
VAR_DECL	120:1	120:18	7	struct code_ent * next
TYPE	120:1	120:17	8	struct code_ent *
TYPE_NAME	120:1	120:8	9	struct code_ent
LEAF_NODE	120:1	120:1	10	struct
LEAF_NODE	120:8	120:8	10	code_ent
POINTER	120:17	120:17	9	*
LEAF_NODE	120:17	120:17	10	*
NAME	120:18	120:18	8	next
LEAF_NODE	120:18	120:18	9	next
LEAF_NODE	120:22	120:22	7	;
SIMPLE_DECL	121:1	121:22	6	unsigned short length ;
VAR_DECL	121:1	121:16	7	unsigned short length
TYPE	121:1	121:1	8	unsigned short
TYPE_NAME	121:1	121:10	9	unsigned short
LEAF_NODE	121:1	121:1	10	unsigned
LEAF_NODE	121:10	121:10	10	short
NAME	121:16	121:16	8	length
LEAF_NODE	121:16	121:16	9	length
LEAF_NODE	121:22	121:22	7	;
SIMPLE_DECL	122:1	122:20	6	unsigned char value ;
VAR_DECL	122:1	122:15	7	unsigned char value
TYPE	122:1	122:1	8	unsigned char
TYPE_NAME	122:1	122:10	9	unsigned char
LEAF_NODE	122:1	122:1	10	unsigned
LEAF_NODE	122:10	122:10	10	char
NAME	122:15	122:15	8	value
LEAF_NODE	122:15	122:15	9	value
LEAF_NODE	122:20	122:20	7	;
SIMPLE_DECL	123:1	123:24	6	unsigned char firstchar ;
VAR_DECL	123:1	123:15	7	unsigned char firstchar
TYPE	123:1	123:1	8	unsigned char
TYPE_NAME	123:1	123:10	9	unsigned char
LEAF_NODE	123:1	123:1	10	unsigned
LEAF_NODE	123:10	123:10	10	char
NAME	123:15	123:15	8	firstchar
LEAF_NODE	123:15	123:15	9	firstchar
LEAF_NODE	123:24	123:24	7	;
LEAF_NODE	124:0	124:0	5	}
NAME	124:2	124:2	3	code_t
LEAF_NODE	124:2	124:2	4	code_t
LEAF_NODE	124:8	124:8	2	;
SIMPLE_DECL	128:8	154:15	1	struct CLASS_NAME BASE_CLASSES { LZWBaseState base ; long dec_nbitsmask ; long dec_restart ; uint64 dec_bitsleft ; tmsize_t old_tif_rawcc ; decodeFunc dec_decode ; code_t * dec_codep ; code_t * dec_oldcodep ; code_t * dec_free_entp ; code_t * dec_maxcodep ; code_t * dec_codetab ; int enc_oldcode ; long enc_checkpoint ; long enc_ratio ; long enc_incount ; long enc_outcount ; uint8 * enc_rawlimit ; hash_t * enc_hashtab ; } LZWCodecState ;
VAR_DECL	128:8	154:2	2	struct CLASS_NAME BASE_CLASSES { LZWBaseState base ; long dec_nbitsmask ; long dec_restart ; uint64 dec_bitsleft ; tmsize_t old_tif_rawcc ; decodeFunc dec_decode ; code_t * dec_codep ; code_t * dec_oldcodep ; code_t * dec_free_entp ; code_t * dec_maxcodep ; code_t * dec_codetab ; int enc_oldcode ; long enc_checkpoint ; long enc_ratio ; long enc_incount ; long enc_outcount ; uint8 * enc_rawlimit ; hash_t * enc_hashtab ; } LZWCodecState
TYPE	128:8	128:8	3	struct CLASS_NAME BASE_CLASSES { LZWBaseState base ; long dec_nbitsmask ; long dec_restart ; uint64 dec_bitsleft ; tmsize_t old_tif_rawcc ; decodeFunc dec_decode ; code_t * dec_codep ; code_t * dec_oldcodep ; code_t * dec_free_entp ; code_t * dec_maxcodep ; code_t * dec_codetab ; int enc_oldcode ; long enc_checkpoint ; long enc_ratio ; long enc_incount ; long enc_outcount ; uint8 * enc_rawlimit ; hash_t * enc_hashtab ; }
CLASS_DEF	128:8	154:0	4	struct CLASS_NAME BASE_CLASSES { LZWBaseState base ; long dec_nbitsmask ; long dec_restart ; uint64 dec_bitsleft ; tmsize_t old_tif_rawcc ; decodeFunc dec_decode ; code_t * dec_codep ; code_t * dec_oldcodep ; code_t * dec_free_entp ; code_t * dec_maxcodep ; code_t * dec_codetab ; int enc_oldcode ; long enc_checkpoint ; long enc_ratio ; long enc_incount ; long enc_outcount ; uint8 * enc_rawlimit ; hash_t * enc_hashtab ; }
LEAF_NODE	128:8	128:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	128:15	128:15	5	{
CLASS_CONTENT	129:1	153:1	5	LZWBaseState base ; long dec_nbitsmask ; long dec_restart ; uint64 dec_bitsleft ; tmsize_t old_tif_rawcc ; decodeFunc dec_decode ; code_t * dec_codep ; code_t * dec_oldcodep ; code_t * dec_free_entp ; code_t * dec_maxcodep ; code_t * dec_codetab ; int enc_oldcode ; long enc_checkpoint ; long enc_ratio ; long enc_incount ; long enc_outcount ; uint8 * enc_rawlimit ; hash_t * enc_hashtab ;
SIMPLE_DECL	129:1	129:18	6	LZWBaseState base ;
VAR_DECL	129:1	129:14	7	LZWBaseState base
TYPE	129:1	129:1	8	LZWBaseState
TYPE_NAME	129:1	129:1	9	LZWBaseState
LEAF_NODE	129:1	129:1	10	LZWBaseState
NAME	129:14	129:14	8	base
LEAF_NODE	129:14	129:14	9	base
LEAF_NODE	129:18	129:18	7	;
SIMPLE_DECL	132:1	132:22	6	long dec_nbitsmask ;
VAR_DECL	132:1	132:9	7	long dec_nbitsmask
TYPE	132:1	132:1	8	long
TYPE_NAME	132:1	132:1	9	long
LEAF_NODE	132:1	132:1	10	long
NAME	132:9	132:9	8	dec_nbitsmask
LEAF_NODE	132:9	132:9	9	dec_nbitsmask
LEAF_NODE	132:22	132:22	7	;
SIMPLE_DECL	133:1	133:20	6	long dec_restart ;
VAR_DECL	133:1	133:9	7	long dec_restart
TYPE	133:1	133:1	8	long
TYPE_NAME	133:1	133:1	9	long
LEAF_NODE	133:1	133:1	10	long
NAME	133:9	133:9	8	dec_restart
LEAF_NODE	133:9	133:9	9	dec_restart
LEAF_NODE	133:20	133:20	7	;
SIMPLE_DECL	135:1	135:21	6	uint64 dec_bitsleft ;
VAR_DECL	135:1	135:9	7	uint64 dec_bitsleft
TYPE	135:1	135:1	8	uint64
TYPE_NAME	135:1	135:1	9	uint64
LEAF_NODE	135:1	135:1	10	uint64
NAME	135:9	135:9	8	dec_bitsleft
LEAF_NODE	135:9	135:9	9	dec_bitsleft
LEAF_NODE	135:21	135:21	7	;
SIMPLE_DECL	136:1	136:23	6	tmsize_t old_tif_rawcc ;
VAR_DECL	136:1	136:10	7	tmsize_t old_tif_rawcc
TYPE	136:1	136:1	8	tmsize_t
TYPE_NAME	136:1	136:1	9	tmsize_t
LEAF_NODE	136:1	136:1	10	tmsize_t
NAME	136:10	136:10	8	old_tif_rawcc
LEAF_NODE	136:10	136:10	9	old_tif_rawcc
LEAF_NODE	136:23	136:23	7	;
SIMPLE_DECL	138:1	138:22	6	decodeFunc dec_decode ;
VAR_DECL	138:1	138:12	7	decodeFunc dec_decode
TYPE	138:1	138:1	8	decodeFunc
TYPE_NAME	138:1	138:1	9	decodeFunc
LEAF_NODE	138:1	138:1	10	decodeFunc
NAME	138:12	138:12	8	dec_decode
LEAF_NODE	138:12	138:12	9	dec_decode
LEAF_NODE	138:22	138:22	7	;
SIMPLE_DECL	139:1	139:18	6	code_t * dec_codep ;
VAR_DECL	139:1	139:9	7	code_t * dec_codep
TYPE	139:1	139:7	8	code_t *
TYPE_NAME	139:1	139:1	9	code_t
LEAF_NODE	139:1	139:1	10	code_t
POINTER	139:7	139:7	9	*
LEAF_NODE	139:7	139:7	10	*
NAME	139:9	139:9	8	dec_codep
LEAF_NODE	139:9	139:9	9	dec_codep
LEAF_NODE	139:18	139:18	7	;
SIMPLE_DECL	140:1	140:21	6	code_t * dec_oldcodep ;
VAR_DECL	140:1	140:9	7	code_t * dec_oldcodep
TYPE	140:1	140:7	8	code_t *
TYPE_NAME	140:1	140:1	9	code_t
LEAF_NODE	140:1	140:1	10	code_t
POINTER	140:7	140:7	9	*
LEAF_NODE	140:7	140:7	10	*
NAME	140:9	140:9	8	dec_oldcodep
LEAF_NODE	140:9	140:9	9	dec_oldcodep
LEAF_NODE	140:21	140:21	7	;
SIMPLE_DECL	141:1	141:22	6	code_t * dec_free_entp ;
VAR_DECL	141:1	141:9	7	code_t * dec_free_entp
TYPE	141:1	141:7	8	code_t *
TYPE_NAME	141:1	141:1	9	code_t
LEAF_NODE	141:1	141:1	10	code_t
POINTER	141:7	141:7	9	*
LEAF_NODE	141:7	141:7	10	*
NAME	141:9	141:9	8	dec_free_entp
LEAF_NODE	141:9	141:9	9	dec_free_entp
LEAF_NODE	141:22	141:22	7	;
SIMPLE_DECL	142:1	142:21	6	code_t * dec_maxcodep ;
VAR_DECL	142:1	142:9	7	code_t * dec_maxcodep
TYPE	142:1	142:7	8	code_t *
TYPE_NAME	142:1	142:1	9	code_t
LEAF_NODE	142:1	142:1	10	code_t
POINTER	142:7	142:7	9	*
LEAF_NODE	142:7	142:7	10	*
NAME	142:9	142:9	8	dec_maxcodep
LEAF_NODE	142:9	142:9	9	dec_maxcodep
LEAF_NODE	142:21	142:21	7	;
SIMPLE_DECL	143:1	143:20	6	code_t * dec_codetab ;
VAR_DECL	143:1	143:9	7	code_t * dec_codetab
TYPE	143:1	143:7	8	code_t *
TYPE_NAME	143:1	143:1	9	code_t
LEAF_NODE	143:1	143:1	10	code_t
POINTER	143:7	143:7	9	*
LEAF_NODE	143:7	143:7	10	*
NAME	143:9	143:9	8	dec_codetab
LEAF_NODE	143:9	143:9	9	dec_codetab
LEAF_NODE	143:20	143:20	7	;
SIMPLE_DECL	146:1	146:20	6	int enc_oldcode ;
VAR_DECL	146:1	146:9	7	int enc_oldcode
TYPE	146:1	146:1	8	int
TYPE_NAME	146:1	146:1	9	int
LEAF_NODE	146:1	146:1	10	int
NAME	146:9	146:9	8	enc_oldcode
LEAF_NODE	146:9	146:9	9	enc_oldcode
LEAF_NODE	146:20	146:20	7	;
SIMPLE_DECL	147:1	147:23	6	long enc_checkpoint ;
VAR_DECL	147:1	147:9	7	long enc_checkpoint
TYPE	147:1	147:1	8	long
TYPE_NAME	147:1	147:1	9	long
LEAF_NODE	147:1	147:1	10	long
NAME	147:9	147:9	8	enc_checkpoint
LEAF_NODE	147:9	147:9	9	enc_checkpoint
LEAF_NODE	147:23	147:23	7	;
SIMPLE_DECL	149:1	149:18	6	long enc_ratio ;
VAR_DECL	149:1	149:9	7	long enc_ratio
TYPE	149:1	149:1	8	long
TYPE_NAME	149:1	149:1	9	long
LEAF_NODE	149:1	149:1	10	long
NAME	149:9	149:9	8	enc_ratio
LEAF_NODE	149:9	149:9	9	enc_ratio
LEAF_NODE	149:18	149:18	7	;
SIMPLE_DECL	150:1	150:20	6	long enc_incount ;
VAR_DECL	150:1	150:9	7	long enc_incount
TYPE	150:1	150:1	8	long
TYPE_NAME	150:1	150:1	9	long
LEAF_NODE	150:1	150:1	10	long
NAME	150:9	150:9	8	enc_incount
LEAF_NODE	150:9	150:9	9	enc_incount
LEAF_NODE	150:20	150:20	7	;
SIMPLE_DECL	151:1	151:21	6	long enc_outcount ;
VAR_DECL	151:1	151:9	7	long enc_outcount
TYPE	151:1	151:1	8	long
TYPE_NAME	151:1	151:1	9	long
LEAF_NODE	151:1	151:1	10	long
NAME	151:9	151:9	8	enc_outcount
LEAF_NODE	151:9	151:9	9	enc_outcount
LEAF_NODE	151:21	151:21	7	;
SIMPLE_DECL	152:1	152:21	6	uint8 * enc_rawlimit ;
VAR_DECL	152:1	152:9	7	uint8 * enc_rawlimit
TYPE	152:1	152:6	8	uint8 *
TYPE_NAME	152:1	152:1	9	uint8
LEAF_NODE	152:1	152:1	10	uint8
POINTER	152:6	152:6	9	*
LEAF_NODE	152:6	152:6	10	*
NAME	152:9	152:9	8	enc_rawlimit
LEAF_NODE	152:9	152:9	9	enc_rawlimit
LEAF_NODE	152:21	152:21	7	;
SIMPLE_DECL	153:1	153:20	6	hash_t * enc_hashtab ;
VAR_DECL	153:1	153:9	7	hash_t * enc_hashtab
TYPE	153:1	153:7	8	hash_t *
TYPE_NAME	153:1	153:1	9	hash_t
LEAF_NODE	153:1	153:1	10	hash_t
POINTER	153:7	153:7	9	*
LEAF_NODE	153:7	153:7	10	*
NAME	153:9	153:9	8	enc_hashtab
LEAF_NODE	153:9	153:9	9	enc_hashtab
LEAF_NODE	153:20	153:20	7	;
LEAF_NODE	154:0	154:0	5	}
NAME	154:2	154:2	3	LZWCodecState
LEAF_NODE	154:2	154:2	4	LZWCodecState
LEAF_NODE	154:15	154:15	2	;
FUNCTION_DEF	190:0	195:0	1	
RETURN_TYPE	190:0	190:7	2	static int
LEAF_NODE	190:0	190:0	3	static
TYPE_NAME	190:7	190:7	3	int
LEAF_NODE	190:7	190:7	4	int
FUNCTION_NAME	191:0	191:0	2	LZWFixupTags
LEAF_NODE	191:0	191:0	3	LZWFixupTags
PARAMETER_LIST	191:12	191:22	2	( TIFF * tif )
LEAF_NODE	191:12	191:12	3	(
PARAMETER_DECL	191:13	191:19	3	TIFF * tif
TYPE	191:13	191:17	4	TIFF *
TYPE_NAME	191:13	191:13	5	TIFF
LEAF_NODE	191:13	191:13	6	TIFF
POINTER	191:17	191:17	5	*
LEAF_NODE	191:17	191:17	6	*
NAME	191:19	191:19	4	tif
LEAF_NODE	191:19	191:19	5	tif
LEAF_NODE	191:22	191:22	3	)
LEAF_NODE	192:0	192:0	2	{
STATEMENTS	193:1	194:1	2	
EXPR_STATEMENT	193:1	193:11	3	( void ) tif ;
EXPR	193:1	193:8	4	( void ) tif
LEAF_NODE	193:1	193:1	5	(
TYPE_NAME	193:2	193:2	5	void
LEAF_NODE	193:2	193:2	6	void
LEAF_NODE	193:6	193:6	5	)
FIELD	193:8	193:8	5	tif
LEAF_NODE	193:8	193:8	6	tif
LEAF_NODE	193:11	193:11	4	;
JUMP_STATEMENT	194:1	194:11	3	return ( 1 ) ;
KEYWORD	194:1	194:1	4	return
LEAF_NODE	194:1	194:1	5	return
DESTINATION	194:8	194:8	4	( 1 )
EXPR	194:8	194:10	5	( 1 )
LEAF_NODE	194:8	194:8	6	(
FIELD	194:9	194:9	6	1
LEAF_NODE	194:9	194:9	7	1
LEAF_NODE	194:10	194:10	6	)
LEAF_NODE	194:11	194:11	4	;
LEAF_NODE	195:0	195:0	2	}
FUNCTION_DEF	197:0	256:0	1	
RETURN_TYPE	197:0	197:7	2	static int
LEAF_NODE	197:0	197:0	3	static
TYPE_NAME	197:7	197:7	3	int
LEAF_NODE	197:7	197:7	4	int
FUNCTION_NAME	198:0	198:0	2	LZWSetupDecode
LEAF_NODE	198:0	198:0	3	LZWSetupDecode
PARAMETER_LIST	198:14	198:24	2	( TIFF * tif )
LEAF_NODE	198:14	198:14	3	(
PARAMETER_DECL	198:15	198:21	3	TIFF * tif
TYPE	198:15	198:19	4	TIFF *
TYPE_NAME	198:15	198:15	5	TIFF
LEAF_NODE	198:15	198:15	6	TIFF
POINTER	198:19	198:19	5	*
LEAF_NODE	198:19	198:19	6	*
NAME	198:21	198:21	4	tif
LEAF_NODE	198:21	198:21	5	tif
LEAF_NODE	198:24	198:24	3	)
LEAF_NODE	199:0	199:0	2	{
STATEMENTS	200:1	255:1	2	
LEAF_NODE	200:1	200:1	3	static
SIMPLE_DECL	200:8	200:46	3	const char [ ] module ; module = "LZWSetupDecode" ;
VAR_DECL	200:8	200:19	4	const char [ ] module ; module = "LZWSetupDecode"
TYPE	200:8	200:25	5	const char [ ]
TYPE_NAME	200:8	200:14	6	const char
LEAF_NODE	200:8	200:8	7	const
LEAF_NODE	200:14	200:14	7	char
TYPE_SUFFIX	200:25	200:26	6	[ ]
LEAF_NODE	200:25	200:25	7	[
LEAF_NODE	200:26	200:26	7	]
NAME	200:19	200:19	5	module
LEAF_NODE	200:19	200:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	200:19	200:19	5	module = "LZWSetupDecode"
ASSIGN	200:19	200:30	6	module = "LZWSetupDecode"
LVAL	200:19	200:19	7	module
NAME	200:19	200:19	8	module
LEAF_NODE	200:19	200:19	9	module
ASSIGN_OP	200:28	200:28	7	=
LEAF_NODE	200:28	200:28	8	=
RVAL	200:30	200:30	7	"LZWSetupDecode"
FIELD	200:30	200:30	8	"LZWSetupDecode"
LEAF_NODE	200:30	200:30	9	"LZWSetupDecode"
LEAF_NODE	200:46	200:46	4	;
SIMPLE_DECL	201:1	201:38	3	LZWCodecState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	201:1	201:16	4	LZWCodecState * sp ; sp = DecoderState ( tif )
TYPE	201:1	201:14	5	LZWCodecState *
TYPE_NAME	201:1	201:1	6	LZWCodecState
LEAF_NODE	201:1	201:1	7	LZWCodecState
POINTER	201:14	201:14	6	*
LEAF_NODE	201:14	201:14	7	*
NAME	201:16	201:16	5	sp
LEAF_NODE	201:16	201:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	201:16	201:16	5	sp = DecoderState ( tif )
ASSIGN	201:16	201:21	6	sp = DecoderState ( tif )
LVAL	201:16	201:16	7	sp
NAME	201:16	201:16	8	sp
LEAF_NODE	201:16	201:16	9	sp
ASSIGN_OP	201:19	201:19	7	=
LEAF_NODE	201:19	201:19	8	=
RVAL	201:21	201:21	7	DecoderState ( tif )
FUNCTION_CALL	201:21	201:37	8	DecoderState ( tif )
CALLEE	201:21	201:21	9	DecoderState
LEAF_NODE	201:21	201:21	10	DecoderState
LEAF_NODE	201:33	201:33	9	(
ARGUMENT	201:34	201:34	9	tif
FIELD	201:34	201:34	10	tif
LEAF_NODE	201:34	201:34	11	tif
LEAF_NODE	201:37	201:37	9	)
LEAF_NODE	201:38	201:38	4	;
SIMPLE_DECL	202:1	202:9	3	int code ;
VAR_DECL	202:1	202:5	4	int code
TYPE	202:1	202:1	5	int
TYPE_NAME	202:1	202:1	6	int
LEAF_NODE	202:1	202:1	7	int
NAME	202:5	202:5	5	code
LEAF_NODE	202:5	202:5	6	code
LEAF_NODE	202:9	202:9	4	;
SELECTION	204:1	205:1	3	
KEYWORD	204:1	204:1	4	if
LEAF_NODE	204:1	204:1	5	if
LEAF_NODE	204:3	204:3	4	(
CONDITION	204:5	204:5	4	sp == NULL
EXPR	204:5	204:11	5	sp == NULL
FIELD	204:5	204:5	6	sp
LEAF_NODE	204:5	204:5	7	sp
EQ_OPERATOR	204:8	204:8	6	==
LEAF_NODE	204:8	204:8	7	==
FIELD	204:11	204:11	6	NULL
LEAF_NODE	204:11	204:11	7	NULL
LEAF_NODE	204:16	204:16	4	)
STATEMENTS	205:1	226:1	4	
LEAF_NODE	205:1	205:1	5	{
STATEMENTS	210:2	225:2	5	
EXPR_STATEMENT	210:2	210:61	6	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( LZWCodecState ) ) ;
EXPR	210:2	210:2	7	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( LZWCodecState ) )
ASSIGN	210:2	210:18	8	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( LZWCodecState ) )
LVAL	210:2	210:2	9	tif -> tif_data
FIELD	210:2	210:7	10	tif -> tif_data
LEAF_NODE	210:2	210:2	11	tif
LEAF_NODE	210:5	210:5	11	->
LEAF_NODE	210:7	210:7	11	tif_data
ASSIGN_OP	210:16	210:16	9	=
LEAF_NODE	210:16	210:16	10	=
RVAL	210:18	210:27	9	( uint8 * ) _TIFFmalloc ( sizeof ( LZWCodecState ) )
LEAF_NODE	210:18	210:18	10	(
TYPE_NAME	210:19	210:19	10	uint8
LEAF_NODE	210:19	210:19	11	uint8
LEAF_NODE	210:24	210:24	10	*
LEAF_NODE	210:25	210:25	10	)
FUNCTION_CALL	210:27	210:60	10	_TIFFmalloc ( sizeof ( LZWCodecState ) )
CALLEE	210:27	210:27	11	_TIFFmalloc
LEAF_NODE	210:27	210:27	12	_TIFFmalloc
LEAF_NODE	210:38	210:38	11	(
ARGUMENT	210:39	210:39	11	sizeof ( LZWCodecState )
FUNCTION_CALL	210:39	210:59	12	sizeof ( LZWCodecState )
CALLEE	210:39	210:39	13	sizeof
LEAF_NODE	210:39	210:39	14	sizeof
LEAF_NODE	210:45	210:45	13	(
ARGUMENT	210:46	210:46	13	LZWCodecState
FIELD	210:46	210:46	14	LZWCodecState
LEAF_NODE	210:46	210:46	15	LZWCodecState
LEAF_NODE	210:59	210:59	13	)
LEAF_NODE	210:60	210:60	11	)
LEAF_NODE	210:61	210:61	7	;
SELECTION	211:2	212:2	6	
KEYWORD	211:2	211:2	7	if
LEAF_NODE	211:2	211:2	8	if
LEAF_NODE	211:5	211:5	7	(
CONDITION	211:6	211:6	7	tif -> tif_data == NULL
EXPR	211:6	211:23	8	tif -> tif_data == NULL
FIELD	211:6	211:11	9	tif -> tif_data
LEAF_NODE	211:6	211:6	10	tif
LEAF_NODE	211:9	211:9	10	->
LEAF_NODE	211:11	211:11	10	tif_data
EQ_OPERATOR	211:20	211:20	9	==
LEAF_NODE	211:20	211:20	10	==
FIELD	211:23	211:23	9	NULL
LEAF_NODE	211:23	211:23	10	NULL
LEAF_NODE	211:27	211:27	7	)
STATEMENTS	212:2	215:2	7	
LEAF_NODE	212:2	212:2	8	{
STATEMENTS	213:3	214:3	8	
EXPR_STATEMENT	213:3	213:76	9	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW state block" ) ;
EXPR	213:3	213:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW state block" )
FUNCTION_CALL	213:3	213:75	11	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW state block" )
CALLEE	213:3	213:3	12	TIFFErrorExt
LEAF_NODE	213:3	213:3	13	TIFFErrorExt
LEAF_NODE	213:15	213:15	12	(
ARGUMENT	213:16	213:16	12	tif -> tif_clientdata
FIELD	213:16	213:21	13	tif -> tif_clientdata
LEAF_NODE	213:16	213:16	14	tif
LEAF_NODE	213:19	213:19	14	->
LEAF_NODE	213:21	213:21	14	tif_clientdata
LEAF_NODE	213:35	213:35	12	,
ARGUMENT	213:37	213:37	12	module
FIELD	213:37	213:37	13	module
LEAF_NODE	213:37	213:37	14	module
LEAF_NODE	213:43	213:43	12	,
ARGUMENT	213:45	213:45	12	"No space for LZW state block"
FIELD	213:45	213:45	13	"No space for LZW state block"
LEAF_NODE	213:45	213:45	14	"No space for LZW state block"
LEAF_NODE	213:75	213:75	12	)
LEAF_NODE	213:76	213:76	10	;
JUMP_STATEMENT	214:3	214:13	9	return ( 0 ) ;
KEYWORD	214:3	214:3	10	return
LEAF_NODE	214:3	214:3	11	return
DESTINATION	214:10	214:10	10	( 0 )
EXPR	214:10	214:12	11	( 0 )
LEAF_NODE	214:10	214:10	12	(
FIELD	214:11	214:11	12	0
LEAF_NODE	214:11	214:11	13	0
LEAF_NODE	214:12	214:12	12	)
LEAF_NODE	214:13	214:13	10	;
LEAF_NODE	215:2	215:2	8	}
EXPR_STATEMENT	217:2	217:39	6	DecoderState ( tif ) -> dec_codetab = NULL ;
EXPR	217:2	217:2	7	DecoderState ( tif ) -> dec_codetab = NULL
ASSIGN	217:2	217:35	8	DecoderState ( tif ) -> dec_codetab = NULL
LVAL	217:2	217:21	9	DecoderState ( tif ) -> dec_codetab
FUNCTION_CALL	217:2	217:18	10	DecoderState ( tif )
CALLEE	217:2	217:2	11	DecoderState
LEAF_NODE	217:2	217:2	12	DecoderState
LEAF_NODE	217:14	217:14	11	(
ARGUMENT	217:15	217:15	11	tif
FIELD	217:15	217:15	12	tif
LEAF_NODE	217:15	217:15	13	tif
LEAF_NODE	217:18	217:18	11	)
LEAF_NODE	217:19	217:19	10	->
LEAF_NODE	217:21	217:21	10	dec_codetab
ASSIGN_OP	217:33	217:33	9	=
LEAF_NODE	217:33	217:33	10	=
RVAL	217:35	217:35	9	NULL
FIELD	217:35	217:35	10	NULL
LEAF_NODE	217:35	217:35	11	NULL
LEAF_NODE	217:39	217:39	7	;
EXPR_STATEMENT	218:2	218:38	6	DecoderState ( tif ) -> dec_decode = NULL ;
EXPR	218:2	218:2	7	DecoderState ( tif ) -> dec_decode = NULL
ASSIGN	218:2	218:34	8	DecoderState ( tif ) -> dec_decode = NULL
LVAL	218:2	218:21	9	DecoderState ( tif ) -> dec_decode
FUNCTION_CALL	218:2	218:18	10	DecoderState ( tif )
CALLEE	218:2	218:2	11	DecoderState
LEAF_NODE	218:2	218:2	12	DecoderState
LEAF_NODE	218:14	218:14	11	(
ARGUMENT	218:15	218:15	11	tif
FIELD	218:15	218:15	12	tif
LEAF_NODE	218:15	218:15	13	tif
LEAF_NODE	218:18	218:18	11	)
LEAF_NODE	218:19	218:19	10	->
LEAF_NODE	218:21	218:21	10	dec_decode
ASSIGN_OP	218:32	218:32	9	=
LEAF_NODE	218:32	218:32	10	=
RVAL	218:34	218:34	9	NULL
FIELD	218:34	218:34	10	NULL
LEAF_NODE	218:34	218:34	11	NULL
LEAF_NODE	218:38	218:38	7	;
EXPR_STATEMENT	223:2	223:31	6	( void ) TIFFPredictorInit ( tif ) ;
EXPR	223:2	223:9	7	( void ) TIFFPredictorInit ( tif )
LEAF_NODE	223:2	223:2	8	(
TYPE_NAME	223:3	223:3	8	void
LEAF_NODE	223:3	223:3	9	void
LEAF_NODE	223:7	223:7	8	)
FUNCTION_CALL	223:9	223:30	8	TIFFPredictorInit ( tif )
CALLEE	223:9	223:9	9	TIFFPredictorInit
LEAF_NODE	223:9	223:9	10	TIFFPredictorInit
LEAF_NODE	223:26	223:26	9	(
ARGUMENT	223:27	223:27	9	tif
FIELD	223:27	223:27	10	tif
LEAF_NODE	223:27	223:27	11	tif
LEAF_NODE	223:30	223:30	9	)
LEAF_NODE	223:31	223:31	7	;
EXPR_STATEMENT	225:2	225:24	6	sp = DecoderState ( tif ) ;
EXPR	225:2	225:2	7	sp = DecoderState ( tif )
ASSIGN	225:2	225:7	8	sp = DecoderState ( tif )
LVAL	225:2	225:2	9	sp
FIELD	225:2	225:2	10	sp
LEAF_NODE	225:2	225:2	11	sp
ASSIGN_OP	225:5	225:5	9	=
LEAF_NODE	225:5	225:5	10	=
RVAL	225:7	225:7	9	DecoderState ( tif )
FUNCTION_CALL	225:7	225:23	10	DecoderState ( tif )
CALLEE	225:7	225:7	11	DecoderState
LEAF_NODE	225:7	225:7	12	DecoderState
LEAF_NODE	225:19	225:19	11	(
ARGUMENT	225:20	225:20	11	tif
FIELD	225:20	225:20	12	tif
LEAF_NODE	225:20	225:20	13	tif
LEAF_NODE	225:23	225:23	11	)
LEAF_NODE	225:24	225:24	7	;
LEAF_NODE	226:1	226:1	5	}
EXPR_STATEMENT	228:1	228:19	3	assert ( sp != NULL ) ;
EXPR	228:1	228:1	4	assert ( sp != NULL )
FUNCTION_CALL	228:1	228:18	5	assert ( sp != NULL )
CALLEE	228:1	228:1	6	assert
LEAF_NODE	228:1	228:1	7	assert
LEAF_NODE	228:7	228:7	6	(
ARGUMENT	228:8	228:14	6	sp != NULL
FIELD	228:8	228:8	7	sp
LEAF_NODE	228:8	228:8	8	sp
EQ_OPERATOR	228:11	228:11	7	!=
LEAF_NODE	228:11	228:11	8	!=
FIELD	228:14	228:14	7	NULL
LEAF_NODE	228:14	228:14	8	NULL
LEAF_NODE	228:18	228:18	6	)
LEAF_NODE	228:19	228:19	4	;
SELECTION	230:1	230:30	3	
KEYWORD	230:1	230:1	4	if
LEAF_NODE	230:1	230:1	5	if
LEAF_NODE	230:4	230:4	4	(
CONDITION	230:5	230:5	4	sp -> dec_codetab == NULL
EXPR	230:5	230:24	5	sp -> dec_codetab == NULL
FIELD	230:5	230:9	6	sp -> dec_codetab
LEAF_NODE	230:5	230:5	7	sp
LEAF_NODE	230:7	230:7	7	->
LEAF_NODE	230:9	230:9	7	dec_codetab
EQ_OPERATOR	230:21	230:21	6	==
LEAF_NODE	230:21	230:21	7	==
FIELD	230:24	230:24	6	NULL
LEAF_NODE	230:24	230:24	7	NULL
LEAF_NODE	230:28	230:28	4	)
STATEMENTS	230:30	254:1	4	
LEAF_NODE	230:30	230:30	5	{
STATEMENTS	231:2	252:17	5	
EXPR_STATEMENT	231:2	231:63	6	sp -> dec_codetab = ( code_t * ) _TIFFmalloc ( CSIZE * sizeof ( code_t ) ) ;
EXPR	231:2	231:2	7	sp -> dec_codetab = ( code_t * ) _TIFFmalloc ( CSIZE * sizeof ( code_t ) )
ASSIGN	231:2	231:20	8	sp -> dec_codetab = ( code_t * ) _TIFFmalloc ( CSIZE * sizeof ( code_t ) )
LVAL	231:2	231:2	9	sp -> dec_codetab
FIELD	231:2	231:6	10	sp -> dec_codetab
LEAF_NODE	231:2	231:2	11	sp
LEAF_NODE	231:4	231:4	11	->
LEAF_NODE	231:6	231:6	11	dec_codetab
ASSIGN_OP	231:18	231:18	9	=
LEAF_NODE	231:18	231:18	10	=
RVAL	231:20	231:29	9	( code_t * ) _TIFFmalloc ( CSIZE * sizeof ( code_t ) )
LEAF_NODE	231:20	231:20	10	(
TYPE_NAME	231:21	231:21	10	code_t
LEAF_NODE	231:21	231:21	11	code_t
LEAF_NODE	231:27	231:27	10	*
LEAF_NODE	231:28	231:28	10	)
FUNCTION_CALL	231:29	231:62	10	_TIFFmalloc ( CSIZE * sizeof ( code_t ) )
CALLEE	231:29	231:29	11	_TIFFmalloc
LEAF_NODE	231:29	231:29	12	_TIFFmalloc
LEAF_NODE	231:40	231:40	11	(
ARGUMENT	231:41	231:47	11	CSIZE * sizeof ( code_t )
FIELD	231:41	231:41	12	CSIZE
LEAF_NODE	231:41	231:41	13	CSIZE
LEAF_NODE	231:46	231:46	12	*
FUNCTION_CALL	231:47	231:61	12	sizeof ( code_t )
CALLEE	231:47	231:47	13	sizeof
LEAF_NODE	231:47	231:47	14	sizeof
LEAF_NODE	231:54	231:54	13	(
ARGUMENT	231:55	231:55	13	code_t
FIELD	231:55	231:55	14	code_t
LEAF_NODE	231:55	231:55	15	code_t
LEAF_NODE	231:61	231:61	13	)
LEAF_NODE	231:62	231:62	11	)
LEAF_NODE	231:63	231:63	7	;
SELECTION	232:2	232:31	6	
KEYWORD	232:2	232:2	7	if
LEAF_NODE	232:2	232:2	8	if
LEAF_NODE	232:5	232:5	7	(
CONDITION	232:6	232:6	7	sp -> dec_codetab == NULL
EXPR	232:6	232:25	8	sp -> dec_codetab == NULL
FIELD	232:6	232:10	9	sp -> dec_codetab
LEAF_NODE	232:6	232:6	10	sp
LEAF_NODE	232:8	232:8	10	->
LEAF_NODE	232:10	232:10	10	dec_codetab
EQ_OPERATOR	232:22	232:22	9	==
LEAF_NODE	232:22	232:22	10	==
FIELD	232:25	232:25	9	NULL
LEAF_NODE	232:25	232:25	10	NULL
LEAF_NODE	232:29	232:29	7	)
STATEMENTS	232:31	236:2	7	
LEAF_NODE	232:31	232:31	8	{
STATEMENTS	233:3	235:3	8	
EXPR_STATEMENT	233:3	234:39	9	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW code table" ) ;
EXPR	233:3	233:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW code table" )
FUNCTION_CALL	233:3	234:38	11	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW code table" )
CALLEE	233:3	233:3	12	TIFFErrorExt
LEAF_NODE	233:3	233:3	13	TIFFErrorExt
LEAF_NODE	233:15	233:15	12	(
ARGUMENT	233:16	233:16	12	tif -> tif_clientdata
FIELD	233:16	233:21	13	tif -> tif_clientdata
LEAF_NODE	233:16	233:16	14	tif
LEAF_NODE	233:19	233:19	14	->
LEAF_NODE	233:21	233:21	14	tif_clientdata
LEAF_NODE	233:35	233:35	12	,
ARGUMENT	233:37	233:37	12	module
FIELD	233:37	233:37	13	module
LEAF_NODE	233:37	233:37	14	module
LEAF_NODE	233:43	233:43	12	,
ARGUMENT	234:9	234:9	12	"No space for LZW code table"
FIELD	234:9	234:9	13	"No space for LZW code table"
LEAF_NODE	234:9	234:9	14	"No space for LZW code table"
LEAF_NODE	234:38	234:38	12	)
LEAF_NODE	234:39	234:39	10	;
JUMP_STATEMENT	235:3	235:13	9	return ( 0 ) ;
KEYWORD	235:3	235:3	10	return
LEAF_NODE	235:3	235:3	11	return
DESTINATION	235:10	235:10	10	( 0 )
EXPR	235:10	235:12	11	( 0 )
LEAF_NODE	235:10	235:10	12	(
FIELD	235:11	235:11	12	0
LEAF_NODE	235:11	235:11	13	0
LEAF_NODE	235:12	235:12	12	)
LEAF_NODE	235:13	235:13	10	;
LEAF_NODE	236:2	236:2	8	}
EXPR_STATEMENT	240:2	240:12	6	code = 255 ;
EXPR	240:2	240:2	7	code = 255
ASSIGN	240:2	240:9	8	code = 255
LVAL	240:2	240:2	9	code
FIELD	240:2	240:2	10	code
LEAF_NODE	240:2	240:2	11	code
ASSIGN_OP	240:7	240:7	9	=
LEAF_NODE	240:7	240:7	10	=
RVAL	240:9	240:9	9	255
FIELD	240:9	240:9	10	255
LEAF_NODE	240:9	240:9	11	255
LEAF_NODE	240:12	240:12	7	;
ITERATION	241:2	241:5	6	
KEYWORD	241:2	241:2	7	do
LEAF_NODE	241:2	241:2	8	do
LEAF_NODE	246:10	246:10	7	(
CONDITION	246:11	246:11	7	code --
EXPR	246:11	246:11	8	code --
FIELD	246:11	246:15	9	code --
LEAF_NODE	246:11	246:11	10	code
LEAF_NODE	246:15	246:15	10	--
LEAF_NODE	246:17	246:17	7	)
STATEMENTS	241:5	246:2	7	
LEAF_NODE	241:5	241:5	8	{
STATEMENTS	242:3	245:3	8	
EXPR_STATEMENT	242:3	242:52	9	sp -> dec_codetab [ code ] . value = ( unsigned char ) code ;
EXPR	242:3	242:3	10	sp -> dec_codetab [ code ] . value = ( unsigned char ) code
ASSIGN	242:3	242:33	11	sp -> dec_codetab [ code ] . value = ( unsigned char ) code
LVAL	242:3	242:3	12	sp -> dec_codetab [ code ] . value
FIELD	242:3	242:25	13	sp -> dec_codetab [ code ] . value
LEAF_NODE	242:3	242:3	14	sp
LEAF_NODE	242:5	242:5	14	->
LEAF_NODE	242:7	242:7	14	dec_codetab
LEAF_NODE	242:18	242:18	14	[
EXPR	242:19	242:19	14	code
FIELD	242:19	242:19	15	code
LEAF_NODE	242:19	242:19	16	code
LEAF_NODE	242:23	242:23	14	]
LEAF_NODE	242:24	242:24	14	.
LEAF_NODE	242:25	242:25	14	value
ASSIGN_OP	242:31	242:31	12	=
LEAF_NODE	242:31	242:31	13	=
RVAL	242:33	242:48	12	( unsigned char ) code
LEAF_NODE	242:33	242:33	13	(
TYPE_NAME	242:34	242:43	13	unsigned char
LEAF_NODE	242:34	242:34	14	unsigned
LEAF_NODE	242:43	242:43	14	char
LEAF_NODE	242:47	242:47	13	)
FIELD	242:48	242:48	13	code
LEAF_NODE	242:48	242:48	14	code
LEAF_NODE	242:52	242:52	10	;
EXPR_STATEMENT	243:3	243:56	9	sp -> dec_codetab [ code ] . firstchar = ( unsigned char ) code ;
EXPR	243:3	243:3	10	sp -> dec_codetab [ code ] . firstchar = ( unsigned char ) code
ASSIGN	243:3	243:37	11	sp -> dec_codetab [ code ] . firstchar = ( unsigned char ) code
LVAL	243:3	243:3	12	sp -> dec_codetab [ code ] . firstchar
FIELD	243:3	243:25	13	sp -> dec_codetab [ code ] . firstchar
LEAF_NODE	243:3	243:3	14	sp
LEAF_NODE	243:5	243:5	14	->
LEAF_NODE	243:7	243:7	14	dec_codetab
LEAF_NODE	243:18	243:18	14	[
EXPR	243:19	243:19	14	code
FIELD	243:19	243:19	15	code
LEAF_NODE	243:19	243:19	16	code
LEAF_NODE	243:23	243:23	14	]
LEAF_NODE	243:24	243:24	14	.
LEAF_NODE	243:25	243:25	14	firstchar
ASSIGN_OP	243:35	243:35	12	=
LEAF_NODE	243:35	243:35	13	=
RVAL	243:37	243:52	12	( unsigned char ) code
LEAF_NODE	243:37	243:37	13	(
TYPE_NAME	243:38	243:47	13	unsigned char
LEAF_NODE	243:38	243:38	14	unsigned
LEAF_NODE	243:47	243:47	14	char
LEAF_NODE	243:51	243:51	13	)
FIELD	243:52	243:52	13	code
LEAF_NODE	243:52	243:52	14	code
LEAF_NODE	243:56	243:56	10	;
EXPR_STATEMENT	244:3	244:35	9	sp -> dec_codetab [ code ] . length = 1 ;
EXPR	244:3	244:3	10	sp -> dec_codetab [ code ] . length = 1
ASSIGN	244:3	244:34	11	sp -> dec_codetab [ code ] . length = 1
LVAL	244:3	244:3	12	sp -> dec_codetab [ code ] . length
FIELD	244:3	244:25	13	sp -> dec_codetab [ code ] . length
LEAF_NODE	244:3	244:3	14	sp
LEAF_NODE	244:5	244:5	14	->
LEAF_NODE	244:7	244:7	14	dec_codetab
LEAF_NODE	244:18	244:18	14	[
EXPR	244:19	244:19	14	code
FIELD	244:19	244:19	15	code
LEAF_NODE	244:19	244:19	16	code
LEAF_NODE	244:23	244:23	14	]
LEAF_NODE	244:24	244:24	14	.
LEAF_NODE	244:25	244:25	14	length
ASSIGN_OP	244:32	244:32	12	=
LEAF_NODE	244:32	244:32	13	=
RVAL	244:34	244:34	12	1
FIELD	244:34	244:34	13	1
LEAF_NODE	244:34	244:34	14	1
LEAF_NODE	244:35	244:35	10	;
EXPR_STATEMENT	245:3	245:36	9	sp -> dec_codetab [ code ] . next = NULL ;
EXPR	245:3	245:3	10	sp -> dec_codetab [ code ] . next = NULL
ASSIGN	245:3	245:32	11	sp -> dec_codetab [ code ] . next = NULL
LVAL	245:3	245:3	12	sp -> dec_codetab [ code ] . next
FIELD	245:3	245:25	13	sp -> dec_codetab [ code ] . next
LEAF_NODE	245:3	245:3	14	sp
LEAF_NODE	245:5	245:5	14	->
LEAF_NODE	245:7	245:7	14	dec_codetab
LEAF_NODE	245:18	245:18	14	[
EXPR	245:19	245:19	14	code
FIELD	245:19	245:19	15	code
LEAF_NODE	245:19	245:19	16	code
LEAF_NODE	245:23	245:23	14	]
LEAF_NODE	245:24	245:24	14	.
LEAF_NODE	245:25	245:25	14	next
ASSIGN_OP	245:30	245:30	12	=
LEAF_NODE	245:30	245:30	13	=
RVAL	245:32	245:32	12	NULL
FIELD	245:32	245:32	13	NULL
LEAF_NODE	245:32	245:32	14	NULL
LEAF_NODE	245:36	245:36	10	;
LEAF_NODE	246:2	246:2	8	}
LEAF_NODE	246:18	246:18	6	;
EXPR_STATEMENT	252:17	253:52	6	_TIFFmemset ( & sp -> dec_codetab [ CODE_CLEAR ] , 0 , ( CODE_FIRST - CODE_CLEAR ) * sizeof ( code_t ) ) ;
EXPR	252:17	252:17	7	_TIFFmemset ( & sp -> dec_codetab [ CODE_CLEAR ] , 0 , ( CODE_FIRST - CODE_CLEAR ) * sizeof ( code_t ) )
FUNCTION_CALL	252:17	253:51	8	_TIFFmemset ( & sp -> dec_codetab [ CODE_CLEAR ] , 0 , ( CODE_FIRST - CODE_CLEAR ) * sizeof ( code_t ) )
CALLEE	252:17	252:17	9	_TIFFmemset
LEAF_NODE	252:17	252:17	10	_TIFFmemset
LEAF_NODE	252:28	252:28	9	(
ARGUMENT	252:29	252:29	9	& sp -> dec_codetab [ CODE_CLEAR ]
UNARY_EXPR	252:29	252:30	10	& sp -> dec_codetab [ CODE_CLEAR ]
UNARY_OPERATOR	252:29	252:29	11	&
LEAF_NODE	252:29	252:29	12	&
FIELD	252:30	252:56	11	sp -> dec_codetab [ CODE_CLEAR ]
LEAF_NODE	252:30	252:30	12	sp
LEAF_NODE	252:32	252:32	12	->
LEAF_NODE	252:34	252:34	12	dec_codetab
LEAF_NODE	252:45	252:45	12	[
EXPR	252:46	252:46	12	CODE_CLEAR
FIELD	252:46	252:46	13	CODE_CLEAR
LEAF_NODE	252:46	252:46	14	CODE_CLEAR
LEAF_NODE	252:56	252:56	12	]
LEAF_NODE	252:57	252:57	9	,
ARGUMENT	252:59	252:59	9	0
FIELD	252:59	252:59	10	0
LEAF_NODE	252:59	252:59	11	0
LEAF_NODE	252:60	252:60	9	,
ARGUMENT	253:8	253:36	9	( CODE_FIRST - CODE_CLEAR ) * sizeof ( code_t )
LEAF_NODE	253:8	253:8	10	(
FIELD	253:9	253:9	10	CODE_FIRST
LEAF_NODE	253:9	253:9	11	CODE_FIRST
LEAF_NODE	253:20	253:20	10	-
FIELD	253:22	253:22	10	CODE_CLEAR
LEAF_NODE	253:22	253:22	11	CODE_CLEAR
LEAF_NODE	253:32	253:32	10	)
LEAF_NODE	253:34	253:34	10	*
FUNCTION_CALL	253:36	253:50	10	sizeof ( code_t )
CALLEE	253:36	253:36	11	sizeof
LEAF_NODE	253:36	253:36	12	sizeof
LEAF_NODE	253:43	253:43	11	(
ARGUMENT	253:44	253:44	11	code_t
FIELD	253:44	253:44	12	code_t
LEAF_NODE	253:44	253:44	13	code_t
LEAF_NODE	253:50	253:50	11	)
LEAF_NODE	253:51	253:51	9	)
LEAF_NODE	253:52	253:52	7	;
LEAF_NODE	254:1	254:1	5	}
JUMP_STATEMENT	255:1	255:11	3	return ( 1 ) ;
KEYWORD	255:1	255:1	4	return
LEAF_NODE	255:1	255:1	5	return
DESTINATION	255:8	255:8	4	( 1 )
EXPR	255:8	255:10	5	( 1 )
LEAF_NODE	255:8	255:8	6	(
FIELD	255:9	255:9	6	1
LEAF_NODE	255:9	255:9	7	1
LEAF_NODE	255:10	255:10	6	)
LEAF_NODE	255:11	255:11	4	;
LEAF_NODE	256:0	256:0	2	}
FUNCTION_DEF	261:0	338:0	1	
RETURN_TYPE	261:0	261:7	2	static int
LEAF_NODE	261:0	261:0	3	static
TYPE_NAME	261:7	261:7	3	int
LEAF_NODE	261:7	261:7	4	int
FUNCTION_NAME	262:0	262:0	2	LZWPreDecode
LEAF_NODE	262:0	262:0	3	LZWPreDecode
PARAMETER_LIST	262:12	262:32	2	( TIFF * tif , uint16 s )
LEAF_NODE	262:12	262:12	3	(
PARAMETER_DECL	262:13	262:19	3	TIFF * tif
TYPE	262:13	262:17	4	TIFF *
TYPE_NAME	262:13	262:13	5	TIFF
LEAF_NODE	262:13	262:13	6	TIFF
POINTER	262:17	262:17	5	*
LEAF_NODE	262:17	262:17	6	*
NAME	262:19	262:19	4	tif
LEAF_NODE	262:19	262:19	5	tif
LEAF_NODE	262:22	262:22	3	,
PARAMETER_DECL	262:24	262:31	3	uint16 s
TYPE	262:24	262:24	4	uint16
TYPE_NAME	262:24	262:24	5	uint16
LEAF_NODE	262:24	262:24	6	uint16
NAME	262:31	262:31	4	s
LEAF_NODE	262:31	262:31	5	s
LEAF_NODE	262:32	262:32	3	)
LEAF_NODE	263:0	263:0	2	{
STATEMENTS	264:1	337:1	2	
LEAF_NODE	264:1	264:1	3	static
SIMPLE_DECL	264:8	264:44	3	const char [ ] module ; module = "LZWPreDecode" ;
VAR_DECL	264:8	264:19	4	const char [ ] module ; module = "LZWPreDecode"
TYPE	264:8	264:25	5	const char [ ]
TYPE_NAME	264:8	264:14	6	const char
LEAF_NODE	264:8	264:8	7	const
LEAF_NODE	264:14	264:14	7	char
TYPE_SUFFIX	264:25	264:26	6	[ ]
LEAF_NODE	264:25	264:25	7	[
LEAF_NODE	264:26	264:26	7	]
NAME	264:19	264:19	5	module
LEAF_NODE	264:19	264:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	264:19	264:19	5	module = "LZWPreDecode"
ASSIGN	264:19	264:30	6	module = "LZWPreDecode"
LVAL	264:19	264:19	7	module
NAME	264:19	264:19	8	module
LEAF_NODE	264:19	264:19	9	module
ASSIGN_OP	264:28	264:28	7	=
LEAF_NODE	264:28	264:28	8	=
RVAL	264:30	264:30	7	"LZWPreDecode"
FIELD	264:30	264:30	8	"LZWPreDecode"
LEAF_NODE	264:30	264:30	9	"LZWPreDecode"
LEAF_NODE	264:44	264:44	4	;
SIMPLE_DECL	265:1	265:38	3	LZWCodecState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	265:1	265:16	4	LZWCodecState * sp ; sp = DecoderState ( tif )
TYPE	265:1	265:15	5	LZWCodecState *
TYPE_NAME	265:1	265:1	6	LZWCodecState
LEAF_NODE	265:1	265:1	7	LZWCodecState
POINTER	265:15	265:15	6	*
LEAF_NODE	265:15	265:15	7	*
NAME	265:16	265:16	5	sp
LEAF_NODE	265:16	265:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	265:16	265:16	5	sp = DecoderState ( tif )
ASSIGN	265:16	265:21	6	sp = DecoderState ( tif )
LVAL	265:16	265:16	7	sp
NAME	265:16	265:16	8	sp
LEAF_NODE	265:16	265:16	9	sp
ASSIGN_OP	265:19	265:19	7	=
LEAF_NODE	265:19	265:19	8	=
RVAL	265:21	265:21	7	DecoderState ( tif )
FUNCTION_CALL	265:21	265:37	8	DecoderState ( tif )
CALLEE	265:21	265:21	9	DecoderState
LEAF_NODE	265:21	265:21	10	DecoderState
LEAF_NODE	265:33	265:33	9	(
ARGUMENT	265:34	265:34	9	tif
FIELD	265:34	265:34	10	tif
LEAF_NODE	265:34	265:34	11	tif
LEAF_NODE	265:37	265:37	9	)
LEAF_NODE	265:38	265:38	4	;
EXPR_STATEMENT	267:1	267:9	3	( void ) s ;
EXPR	267:1	267:8	4	( void ) s
LEAF_NODE	267:1	267:1	5	(
TYPE_NAME	267:2	267:2	5	void
LEAF_NODE	267:2	267:2	6	void
LEAF_NODE	267:6	267:6	5	)
FIELD	267:8	267:8	5	s
LEAF_NODE	267:8	267:8	6	s
LEAF_NODE	267:9	267:9	4	;
EXPR_STATEMENT	268:1	268:19	3	assert ( sp != NULL ) ;
EXPR	268:1	268:1	4	assert ( sp != NULL )
FUNCTION_CALL	268:1	268:18	5	assert ( sp != NULL )
CALLEE	268:1	268:1	6	assert
LEAF_NODE	268:1	268:1	7	assert
LEAF_NODE	268:7	268:7	6	(
ARGUMENT	268:8	268:14	6	sp != NULL
FIELD	268:8	268:8	7	sp
LEAF_NODE	268:8	268:8	8	sp
EQ_OPERATOR	268:11	268:11	7	!=
LEAF_NODE	268:11	268:11	8	!=
FIELD	268:14	268:14	7	NULL
LEAF_NODE	268:14	268:14	8	NULL
LEAF_NODE	268:18	268:18	6	)
LEAF_NODE	268:19	268:19	4	;
SELECTION	269:1	270:8	3	
KEYWORD	269:1	269:1	4	if
LEAF_NODE	269:1	269:1	5	if
LEAF_NODE	269:3	269:3	4	(
CONDITION	269:5	269:5	4	sp -> dec_codetab == NULL
EXPR	269:5	269:24	5	sp -> dec_codetab == NULL
FIELD	269:5	269:9	6	sp -> dec_codetab
LEAF_NODE	269:5	269:5	7	sp
LEAF_NODE	269:7	269:7	7	->
LEAF_NODE	269:9	269:9	7	dec_codetab
EQ_OPERATOR	269:21	269:21	6	==
LEAF_NODE	269:21	269:21	7	==
FIELD	269:24	269:24	6	NULL
LEAF_NODE	269:24	269:24	7	NULL
LEAF_NODE	269:29	269:29	4	)
STATEMENTS	270:8	274:8	4	
LEAF_NODE	270:8	270:8	5	{
STATEMENTS	271:12	272:5	5	
EXPR_STATEMENT	271:12	271:39	6	tif -> tif_setupdecode ( tif ) ;
EXPR	271:12	271:12	7	tif -> tif_setupdecode ( tif )
FUNCTION_CALL	271:12	271:38	8	tif -> tif_setupdecode ( tif )
CALLEE	271:12	271:17	9	tif -> tif_setupdecode
LEAF_NODE	271:12	271:12	10	tif
LEAF_NODE	271:15	271:15	10	->
LEAF_NODE	271:17	271:17	10	tif_setupdecode
LEAF_NODE	271:32	271:32	9	(
ARGUMENT	271:34	271:34	9	tif
FIELD	271:34	271:34	10	tif
LEAF_NODE	271:34	271:34	11	tif
LEAF_NODE	271:38	271:38	9	)
LEAF_NODE	271:39	271:39	7	;
SELECTION	272:5	273:2	6	
KEYWORD	272:5	272:5	7	if
LEAF_NODE	272:5	272:5	8	if
LEAF_NODE	272:7	272:7	7	(
CONDITION	272:9	272:9	7	sp -> dec_codetab == NULL
EXPR	272:9	272:28	8	sp -> dec_codetab == NULL
FIELD	272:9	272:13	9	sp -> dec_codetab
LEAF_NODE	272:9	272:9	10	sp
LEAF_NODE	272:11	272:11	10	->
LEAF_NODE	272:13	272:13	10	dec_codetab
EQ_OPERATOR	272:25	272:25	9	==
LEAF_NODE	272:25	272:25	10	==
FIELD	272:28	272:28	9	NULL
LEAF_NODE	272:28	272:28	10	NULL
LEAF_NODE	272:33	272:33	7	)
STATEMENTS	273:2	273:2	7	
JUMP_STATEMENT	273:2	273:12	8	return ( 0 ) ;
KEYWORD	273:2	273:2	9	return
LEAF_NODE	273:2	273:2	10	return
DESTINATION	273:9	273:9	9	( 0 )
EXPR	273:9	273:11	10	( 0 )
LEAF_NODE	273:9	273:9	11	(
FIELD	273:10	273:10	11	0
LEAF_NODE	273:10	273:10	12	0
LEAF_NODE	273:11	273:11	11	)
LEAF_NODE	273:12	273:12	9	;
LEAF_NODE	274:8	274:8	5	}
SELECTION	279:1	280:62	3	
KEYWORD	279:1	279:1	4	if
LEAF_NODE	279:1	279:1	5	if
LEAF_NODE	279:4	279:4	4	(
CONDITION	279:5	279:5	4	tif -> tif_rawcc >= 2 && tif -> tif_rawdata [ 0 ] == 0 && ( tif -> tif_rawdata [ 1 ] & 0x1 )
EXPR	279:5	279:5	5	tif -> tif_rawcc >= 2 && tif -> tif_rawdata [ 0 ] == 0 && ( tif -> tif_rawdata [ 1 ] & 0x1 )
AND	279:5	280:5	6	tif -> tif_rawcc >= 2 && tif -> tif_rawdata [ 0 ] == 0 && ( tif -> tif_rawdata [ 1 ] & 0x1 )
EXPR	279:5	279:23	7	tif -> tif_rawcc >= 2
FIELD	279:5	279:10	8	tif -> tif_rawcc
LEAF_NODE	279:5	279:5	9	tif
LEAF_NODE	279:8	279:8	9	->
LEAF_NODE	279:10	279:10	9	tif_rawcc
REL_OPERATOR	279:20	279:20	8	>=
LEAF_NODE	279:20	279:20	9	>=
FIELD	279:23	279:23	8	2
LEAF_NODE	279:23	279:23	9	2
LEAF_NODE	279:25	279:25	7	&&
EXPR	280:5	280:5	7	tif -> tif_rawdata [ 0 ] == 0 && ( tif -> tif_rawdata [ 1 ] & 0x1 )
AND	280:5	280:33	8	tif -> tif_rawdata [ 0 ] == 0 && ( tif -> tif_rawdata [ 1 ] & 0x1 )
EXPR	280:5	280:28	9	tif -> tif_rawdata [ 0 ] == 0
FIELD	280:5	280:23	10	tif -> tif_rawdata [ 0 ]
LEAF_NODE	280:5	280:5	11	tif
LEAF_NODE	280:8	280:8	11	->
LEAF_NODE	280:10	280:10	11	tif_rawdata
LEAF_NODE	280:21	280:21	11	[
EXPR	280:22	280:22	11	0
FIELD	280:22	280:22	12	0
LEAF_NODE	280:22	280:22	13	0
LEAF_NODE	280:23	280:23	11	]
EQ_OPERATOR	280:25	280:25	10	==
LEAF_NODE	280:25	280:25	11	==
FIELD	280:28	280:28	10	0
LEAF_NODE	280:28	280:28	11	0
LEAF_NODE	280:30	280:30	9	&&
EXPR	280:33	280:59	9	( tif -> tif_rawdata [ 1 ] & 0x1 )
LEAF_NODE	280:33	280:33	10	(
FIELD	280:34	280:52	10	tif -> tif_rawdata [ 1 ]
LEAF_NODE	280:34	280:34	11	tif
LEAF_NODE	280:37	280:37	11	->
LEAF_NODE	280:39	280:39	11	tif_rawdata
LEAF_NODE	280:50	280:50	11	[
EXPR	280:51	280:51	11	1
FIELD	280:51	280:51	12	1
LEAF_NODE	280:51	280:51	13	1
LEAF_NODE	280:52	280:52	11	]
LEAF_NODE	280:54	280:54	10	&
FIELD	280:56	280:56	10	0x1
LEAF_NODE	280:56	280:56	11	0x1
LEAF_NODE	280:59	280:59	10	)
LEAF_NODE	280:60	280:60	4	)
STATEMENTS	280:62	312:1	4	
LEAF_NODE	280:62	280:62	5	{
STATEMENTS	282:2	310:2	5	
SELECTION	282:2	282:23	6	
KEYWORD	282:2	282:2	7	if
LEAF_NODE	282:2	282:2	8	if
LEAF_NODE	282:5	282:5	7	(
CONDITION	282:6	282:6	7	! sp -> dec_decode
EXPR	282:6	282:6	8	! sp -> dec_decode
UNARY_EXPR	282:6	282:7	9	! sp -> dec_decode
UNARY_OPERATOR	282:6	282:6	10	!
LEAF_NODE	282:6	282:6	11	!
FIELD	282:7	282:11	10	sp -> dec_decode
LEAF_NODE	282:7	282:7	11	sp
LEAF_NODE	282:9	282:9	11	->
LEAF_NODE	282:11	282:11	11	dec_decode
LEAF_NODE	282:21	282:21	7	)
STATEMENTS	282:23	302:2	7	
LEAF_NODE	282:23	282:23	8	{
STATEMENTS	283:3	301:3	8	
EXPR_STATEMENT	283:3	284:43	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Old-style LZW codes, convert file" ) ;
EXPR	283:3	283:3	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Old-style LZW codes, convert file" )
FUNCTION_CALL	283:3	284:42	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Old-style LZW codes, convert file" )
CALLEE	283:3	283:3	12	TIFFWarningExt
LEAF_NODE	283:3	283:3	13	TIFFWarningExt
LEAF_NODE	283:17	283:17	12	(
ARGUMENT	283:18	283:18	12	tif -> tif_clientdata
FIELD	283:18	283:23	13	tif -> tif_clientdata
LEAF_NODE	283:18	283:18	14	tif
LEAF_NODE	283:21	283:21	14	->
LEAF_NODE	283:23	283:23	14	tif_clientdata
LEAF_NODE	283:37	283:37	12	,
ARGUMENT	283:39	283:39	12	module
FIELD	283:39	283:39	13	module
LEAF_NODE	283:39	283:39	14	module
LEAF_NODE	283:45	283:45	12	,
ARGUMENT	284:7	284:7	12	"Old-style LZW codes, convert file"
FIELD	284:7	284:7	13	"Old-style LZW codes, convert file"
LEAF_NODE	284:7	284:7	14	"Old-style LZW codes, convert file"
LEAF_NODE	284:42	284:42	12	)
LEAF_NODE	284:43	284:43	10	;
EXPR_STATEMENT	292:3	292:39	9	tif -> tif_decoderow = LZWDecodeCompat ;
EXPR	292:3	292:3	10	tif -> tif_decoderow = LZWDecodeCompat
ASSIGN	292:3	292:24	11	tif -> tif_decoderow = LZWDecodeCompat
LVAL	292:3	292:3	12	tif -> tif_decoderow
FIELD	292:3	292:8	13	tif -> tif_decoderow
LEAF_NODE	292:3	292:3	14	tif
LEAF_NODE	292:6	292:6	14	->
LEAF_NODE	292:8	292:8	14	tif_decoderow
ASSIGN_OP	292:22	292:22	12	=
LEAF_NODE	292:22	292:22	13	=
RVAL	292:24	292:24	12	LZWDecodeCompat
FIELD	292:24	292:24	13	LZWDecodeCompat
LEAF_NODE	292:24	292:24	14	LZWDecodeCompat
LEAF_NODE	292:39	292:39	10	;
EXPR_STATEMENT	293:3	293:41	9	tif -> tif_decodestrip = LZWDecodeCompat ;
EXPR	293:3	293:3	10	tif -> tif_decodestrip = LZWDecodeCompat
ASSIGN	293:3	293:26	11	tif -> tif_decodestrip = LZWDecodeCompat
LVAL	293:3	293:3	12	tif -> tif_decodestrip
FIELD	293:3	293:8	13	tif -> tif_decodestrip
LEAF_NODE	293:3	293:3	14	tif
LEAF_NODE	293:6	293:6	14	->
LEAF_NODE	293:8	293:8	14	tif_decodestrip
ASSIGN_OP	293:24	293:24	12	=
LEAF_NODE	293:24	293:24	13	=
RVAL	293:26	293:26	12	LZWDecodeCompat
FIELD	293:26	293:26	13	LZWDecodeCompat
LEAF_NODE	293:26	293:26	14	LZWDecodeCompat
LEAF_NODE	293:41	293:41	10	;
EXPR_STATEMENT	294:3	294:40	9	tif -> tif_decodetile = LZWDecodeCompat ;
EXPR	294:3	294:3	10	tif -> tif_decodetile = LZWDecodeCompat
ASSIGN	294:3	294:25	11	tif -> tif_decodetile = LZWDecodeCompat
LVAL	294:3	294:3	12	tif -> tif_decodetile
FIELD	294:3	294:8	13	tif -> tif_decodetile
LEAF_NODE	294:3	294:3	14	tif
LEAF_NODE	294:6	294:6	14	->
LEAF_NODE	294:8	294:8	14	tif_decodetile
ASSIGN_OP	294:23	294:23	12	=
LEAF_NODE	294:23	294:23	13	=
RVAL	294:25	294:25	12	LZWDecodeCompat
FIELD	294:25	294:25	13	LZWDecodeCompat
LEAF_NODE	294:25	294:25	14	LZWDecodeCompat
LEAF_NODE	294:40	294:40	10	;
EXPR_STATEMENT	300:3	300:31	9	( * tif -> tif_setupdecode ) ( tif ) ;
EXPR	300:3	300:3	10	( * tif -> tif_setupdecode ) ( tif )
FUNCTION_CALL	300:3	300:30	11	( * tif -> tif_setupdecode ) ( tif )
CALLEE	300:3	300:25	12	( * tif -> tif_setupdecode )
LEAF_NODE	300:3	300:3	13	(
UNARY_EXPR	300:4	300:5	13	* tif -> tif_setupdecode
UNARY_OPERATOR	300:4	300:4	14	*
LEAF_NODE	300:4	300:4	15	*
FIELD	300:5	300:10	14	tif -> tif_setupdecode
LEAF_NODE	300:5	300:5	15	tif
LEAF_NODE	300:8	300:8	15	->
LEAF_NODE	300:10	300:10	15	tif_setupdecode
LEAF_NODE	300:25	300:25	13	)
LEAF_NODE	300:26	300:26	12	(
ARGUMENT	300:27	300:27	12	tif
FIELD	300:27	300:27	13	tif
LEAF_NODE	300:27	300:27	14	tif
LEAF_NODE	300:30	300:30	12	)
LEAF_NODE	300:31	300:31	10	;
EXPR_STATEMENT	301:3	301:35	9	sp -> dec_decode = LZWDecodeCompat ;
EXPR	301:3	301:3	10	sp -> dec_decode = LZWDecodeCompat
ASSIGN	301:3	301:20	11	sp -> dec_decode = LZWDecodeCompat
LVAL	301:3	301:3	12	sp -> dec_decode
FIELD	301:3	301:7	13	sp -> dec_decode
LEAF_NODE	301:3	301:3	14	sp
LEAF_NODE	301:5	301:5	14	->
LEAF_NODE	301:7	301:7	14	dec_decode
ASSIGN_OP	301:18	301:18	12	=
LEAF_NODE	301:18	301:18	13	=
RVAL	301:20	301:20	12	LZWDecodeCompat
FIELD	301:20	301:20	13	LZWDecodeCompat
LEAF_NODE	301:20	301:20	14	LZWDecodeCompat
LEAF_NODE	301:35	301:35	10	;
LEAF_NODE	302:2	302:2	8	}
EXPR_STATEMENT	303:2	303:37	6	sp -> lzw_maxcode = MAXCODE ( BITS_MIN ) ;
EXPR	303:2	303:2	7	sp -> lzw_maxcode = MAXCODE ( BITS_MIN )
ASSIGN	303:2	303:20	8	sp -> lzw_maxcode = MAXCODE ( BITS_MIN )
LVAL	303:2	303:2	9	sp -> lzw_maxcode
FIELD	303:2	303:6	10	sp -> lzw_maxcode
LEAF_NODE	303:2	303:2	11	sp
LEAF_NODE	303:4	303:4	11	->
LEAF_NODE	303:6	303:6	11	lzw_maxcode
ASSIGN_OP	303:18	303:18	9	=
LEAF_NODE	303:18	303:18	10	=
RVAL	303:20	303:20	9	MAXCODE ( BITS_MIN )
FUNCTION_CALL	303:20	303:36	10	MAXCODE ( BITS_MIN )
CALLEE	303:20	303:20	11	MAXCODE
LEAF_NODE	303:20	303:20	12	MAXCODE
LEAF_NODE	303:27	303:27	11	(
ARGUMENT	303:28	303:28	11	BITS_MIN
FIELD	303:28	303:28	12	BITS_MIN
LEAF_NODE	303:28	303:28	13	BITS_MIN
LEAF_NODE	303:36	303:36	11	)
LEAF_NODE	303:37	303:37	7	;
SELECTION	305:2	305:23	6	
KEYWORD	305:2	305:2	7	if
LEAF_NODE	305:2	305:2	8	if
LEAF_NODE	305:5	305:5	7	(
CONDITION	305:6	305:6	7	! sp -> dec_decode
EXPR	305:6	305:6	8	! sp -> dec_decode
UNARY_EXPR	305:6	305:7	9	! sp -> dec_decode
UNARY_OPERATOR	305:6	305:6	10	!
LEAF_NODE	305:6	305:6	11	!
FIELD	305:7	305:11	10	sp -> dec_decode
LEAF_NODE	305:7	305:7	11	sp
LEAF_NODE	305:9	305:9	11	->
LEAF_NODE	305:11	305:11	11	dec_decode
LEAF_NODE	305:21	305:21	7	)
STATEMENTS	305:23	309:2	7	
LEAF_NODE	305:23	305:23	8	{
STATEMENTS	306:3	308:3	8	
EXPR_STATEMENT	306:3	307:43	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Old-style LZW codes not supported" ) ;
EXPR	306:3	306:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Old-style LZW codes not supported" )
FUNCTION_CALL	306:3	307:42	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Old-style LZW codes not supported" )
CALLEE	306:3	306:3	12	TIFFErrorExt
LEAF_NODE	306:3	306:3	13	TIFFErrorExt
LEAF_NODE	306:15	306:15	12	(
ARGUMENT	306:16	306:16	12	tif -> tif_clientdata
FIELD	306:16	306:21	13	tif -> tif_clientdata
LEAF_NODE	306:16	306:16	14	tif
LEAF_NODE	306:19	306:19	14	->
LEAF_NODE	306:21	306:21	14	tif_clientdata
LEAF_NODE	306:35	306:35	12	,
ARGUMENT	306:37	306:37	12	module
FIELD	306:37	306:37	13	module
LEAF_NODE	306:37	306:37	14	module
LEAF_NODE	306:43	306:43	12	,
ARGUMENT	307:7	307:7	12	"Old-style LZW codes not supported"
FIELD	307:7	307:7	13	"Old-style LZW codes not supported"
LEAF_NODE	307:7	307:7	14	"Old-style LZW codes not supported"
LEAF_NODE	307:42	307:42	12	)
LEAF_NODE	307:43	307:43	10	;
EXPR_STATEMENT	308:3	308:29	9	sp -> dec_decode = LZWDecode ;
EXPR	308:3	308:3	10	sp -> dec_decode = LZWDecode
ASSIGN	308:3	308:20	11	sp -> dec_decode = LZWDecode
LVAL	308:3	308:3	12	sp -> dec_decode
FIELD	308:3	308:7	13	sp -> dec_decode
LEAF_NODE	308:3	308:3	14	sp
LEAF_NODE	308:5	308:5	14	->
LEAF_NODE	308:7	308:7	14	dec_decode
ASSIGN_OP	308:18	308:18	12	=
LEAF_NODE	308:18	308:18	13	=
RVAL	308:20	308:20	12	LZWDecode
FIELD	308:20	308:20	13	LZWDecode
LEAF_NODE	308:20	308:20	14	LZWDecode
LEAF_NODE	308:29	308:29	10	;
LEAF_NODE	309:2	309:2	8	}
JUMP_STATEMENT	310:2	310:12	6	return ( 0 ) ;
KEYWORD	310:2	310:2	7	return
LEAF_NODE	310:2	310:2	8	return
DESTINATION	310:9	310:9	7	( 0 )
EXPR	310:9	310:11	8	( 0 )
LEAF_NODE	310:9	310:9	9	(
FIELD	310:10	310:10	9	0
LEAF_NODE	310:10	310:10	10	0
LEAF_NODE	310:11	310:11	9	)
LEAF_NODE	310:12	310:12	7	;
LEAF_NODE	312:1	312:1	5	}
SELECTION	312:3	312:8	3	
KEYWORD	312:3	312:3	4	else
LEAF_NODE	312:3	312:3	5	else
STATEMENTS	312:8	315:1	4	
LEAF_NODE	312:8	312:8	5	{
STATEMENTS	313:2	314:2	5	
EXPR_STATEMENT	313:2	313:39	6	sp -> lzw_maxcode = MAXCODE ( BITS_MIN ) - 1 ;
EXPR	313:2	313:2	7	sp -> lzw_maxcode = MAXCODE ( BITS_MIN ) - 1
ASSIGN	313:2	313:20	8	sp -> lzw_maxcode = MAXCODE ( BITS_MIN ) - 1
LVAL	313:2	313:2	9	sp -> lzw_maxcode
FIELD	313:2	313:6	10	sp -> lzw_maxcode
LEAF_NODE	313:2	313:2	11	sp
LEAF_NODE	313:4	313:4	11	->
LEAF_NODE	313:6	313:6	11	lzw_maxcode
ASSIGN_OP	313:18	313:18	9	=
LEAF_NODE	313:18	313:18	10	=
RVAL	313:20	313:38	9	MAXCODE ( BITS_MIN ) - 1
FUNCTION_CALL	313:20	313:36	10	MAXCODE ( BITS_MIN )
CALLEE	313:20	313:20	11	MAXCODE
LEAF_NODE	313:20	313:20	12	MAXCODE
LEAF_NODE	313:27	313:27	11	(
ARGUMENT	313:28	313:28	11	BITS_MIN
FIELD	313:28	313:28	12	BITS_MIN
LEAF_NODE	313:28	313:28	13	BITS_MIN
LEAF_NODE	313:36	313:36	11	)
LEAF_NODE	313:37	313:37	10	-
FIELD	313:38	313:38	10	1
LEAF_NODE	313:38	313:38	11	1
LEAF_NODE	313:39	313:39	7	;
EXPR_STATEMENT	314:2	314:28	6	sp -> dec_decode = LZWDecode ;
EXPR	314:2	314:2	7	sp -> dec_decode = LZWDecode
ASSIGN	314:2	314:19	8	sp -> dec_decode = LZWDecode
LVAL	314:2	314:2	9	sp -> dec_decode
FIELD	314:2	314:6	10	sp -> dec_decode
LEAF_NODE	314:2	314:2	11	sp
LEAF_NODE	314:4	314:4	11	->
LEAF_NODE	314:6	314:6	11	dec_decode
ASSIGN_OP	314:17	314:17	9	=
LEAF_NODE	314:17	314:17	10	=
RVAL	314:19	314:19	9	LZWDecode
FIELD	314:19	314:19	10	LZWDecode
LEAF_NODE	314:19	314:19	11	LZWDecode
LEAF_NODE	314:28	314:28	7	;
LEAF_NODE	315:1	315:1	5	}
EXPR_STATEMENT	316:1	316:25	3	sp -> lzw_nbits = BITS_MIN ;
EXPR	316:1	316:1	4	sp -> lzw_nbits = BITS_MIN
ASSIGN	316:1	316:17	5	sp -> lzw_nbits = BITS_MIN
LVAL	316:1	316:1	6	sp -> lzw_nbits
FIELD	316:1	316:5	7	sp -> lzw_nbits
LEAF_NODE	316:1	316:1	8	sp
LEAF_NODE	316:3	316:3	8	->
LEAF_NODE	316:5	316:5	8	lzw_nbits
ASSIGN_OP	316:15	316:15	6	=
LEAF_NODE	316:15	316:15	7	=
RVAL	316:17	316:17	6	BITS_MIN
FIELD	316:17	316:17	7	BITS_MIN
LEAF_NODE	316:17	316:17	8	BITS_MIN
LEAF_NODE	316:25	316:25	4	;
EXPR_STATEMENT	317:1	317:21	3	sp -> lzw_nextbits = 0 ;
EXPR	317:1	317:1	4	sp -> lzw_nextbits = 0
ASSIGN	317:1	317:20	5	sp -> lzw_nextbits = 0
LVAL	317:1	317:1	6	sp -> lzw_nextbits
FIELD	317:1	317:5	7	sp -> lzw_nextbits
LEAF_NODE	317:1	317:1	8	sp
LEAF_NODE	317:3	317:3	8	->
LEAF_NODE	317:5	317:5	8	lzw_nextbits
ASSIGN_OP	317:18	317:18	6	=
LEAF_NODE	317:18	317:18	7	=
RVAL	317:20	317:20	6	0
FIELD	317:20	317:20	7	0
LEAF_NODE	317:20	317:20	8	0
LEAF_NODE	317:21	317:21	4	;
EXPR_STATEMENT	318:1	318:21	3	sp -> lzw_nextdata = 0 ;
EXPR	318:1	318:1	4	sp -> lzw_nextdata = 0
ASSIGN	318:1	318:20	5	sp -> lzw_nextdata = 0
LVAL	318:1	318:1	6	sp -> lzw_nextdata
FIELD	318:1	318:5	7	sp -> lzw_nextdata
LEAF_NODE	318:1	318:1	8	sp
LEAF_NODE	318:3	318:3	8	->
LEAF_NODE	318:5	318:5	8	lzw_nextdata
ASSIGN_OP	318:18	318:18	6	=
LEAF_NODE	318:18	318:18	7	=
RVAL	318:20	318:20	6	0
FIELD	318:20	318:20	7	0
LEAF_NODE	318:20	318:20	8	0
LEAF_NODE	318:21	318:21	4	;
EXPR_STATEMENT	320:1	320:20	3	sp -> dec_restart = 0 ;
EXPR	320:1	320:1	4	sp -> dec_restart = 0
ASSIGN	320:1	320:19	5	sp -> dec_restart = 0
LVAL	320:1	320:1	6	sp -> dec_restart
FIELD	320:1	320:5	7	sp -> dec_restart
LEAF_NODE	320:1	320:1	8	sp
LEAF_NODE	320:3	320:3	8	->
LEAF_NODE	320:5	320:5	8	dec_restart
ASSIGN_OP	320:17	320:17	6	=
LEAF_NODE	320:17	320:17	7	=
RVAL	320:19	320:19	6	0
FIELD	320:19	320:19	7	0
LEAF_NODE	320:19	320:19	8	0
LEAF_NODE	320:20	320:20	4	;
EXPR_STATEMENT	321:1	321:38	3	sp -> dec_nbitsmask = MAXCODE ( BITS_MIN ) ;
EXPR	321:1	321:1	4	sp -> dec_nbitsmask = MAXCODE ( BITS_MIN )
ASSIGN	321:1	321:21	5	sp -> dec_nbitsmask = MAXCODE ( BITS_MIN )
LVAL	321:1	321:1	6	sp -> dec_nbitsmask
FIELD	321:1	321:5	7	sp -> dec_nbitsmask
LEAF_NODE	321:1	321:1	8	sp
LEAF_NODE	321:3	321:3	8	->
LEAF_NODE	321:5	321:5	8	dec_nbitsmask
ASSIGN_OP	321:19	321:19	6	=
LEAF_NODE	321:19	321:19	7	=
RVAL	321:21	321:21	6	MAXCODE ( BITS_MIN )
FUNCTION_CALL	321:21	321:37	7	MAXCODE ( BITS_MIN )
CALLEE	321:21	321:21	8	MAXCODE
LEAF_NODE	321:21	321:21	9	MAXCODE
LEAF_NODE	321:28	321:28	8	(
ARGUMENT	321:29	321:29	8	BITS_MIN
FIELD	321:29	321:29	9	BITS_MIN
LEAF_NODE	321:29	321:29	10	BITS_MIN
LEAF_NODE	321:37	321:37	8	)
LEAF_NODE	321:38	321:38	4	;
EXPR_STATEMENT	323:1	323:21	3	sp -> dec_bitsleft = 0 ;
EXPR	323:1	323:1	4	sp -> dec_bitsleft = 0
ASSIGN	323:1	323:20	5	sp -> dec_bitsleft = 0
LVAL	323:1	323:1	6	sp -> dec_bitsleft
FIELD	323:1	323:5	7	sp -> dec_bitsleft
LEAF_NODE	323:1	323:1	8	sp
LEAF_NODE	323:3	323:3	8	->
LEAF_NODE	323:5	323:5	8	dec_bitsleft
ASSIGN_OP	323:18	323:18	6	=
LEAF_NODE	323:18	323:18	7	=
RVAL	323:20	323:20	6	0
FIELD	323:20	323:20	7	0
LEAF_NODE	323:20	323:20	8	0
LEAF_NODE	323:21	323:21	4	;
EXPR_STATEMENT	324:8	324:29	3	sp -> old_tif_rawcc = 0 ;
EXPR	324:8	324:8	4	sp -> old_tif_rawcc = 0
ASSIGN	324:8	324:28	5	sp -> old_tif_rawcc = 0
LVAL	324:8	324:8	6	sp -> old_tif_rawcc
FIELD	324:8	324:12	7	sp -> old_tif_rawcc
LEAF_NODE	324:8	324:8	8	sp
LEAF_NODE	324:10	324:10	8	->
LEAF_NODE	324:12	324:12	8	old_tif_rawcc
ASSIGN_OP	324:26	324:26	6	=
LEAF_NODE	324:26	324:26	7	=
RVAL	324:28	324:28	6	0
FIELD	324:28	324:28	7	0
LEAF_NODE	324:28	324:28	8	0
LEAF_NODE	324:29	324:29	4	;
EXPR_STATEMENT	326:1	326:49	3	sp -> dec_free_entp = sp -> dec_codetab + CODE_FIRST ;
EXPR	326:1	326:1	4	sp -> dec_free_entp = sp -> dec_codetab + CODE_FIRST
ASSIGN	326:1	326:21	5	sp -> dec_free_entp = sp -> dec_codetab + CODE_FIRST
LVAL	326:1	326:1	6	sp -> dec_free_entp
FIELD	326:1	326:5	7	sp -> dec_free_entp
LEAF_NODE	326:1	326:1	8	sp
LEAF_NODE	326:3	326:3	8	->
LEAF_NODE	326:5	326:5	8	dec_free_entp
ASSIGN_OP	326:19	326:19	6	=
LEAF_NODE	326:19	326:19	7	=
RVAL	326:21	326:39	6	sp -> dec_codetab + CODE_FIRST
FIELD	326:21	326:25	7	sp -> dec_codetab
LEAF_NODE	326:21	326:21	8	sp
LEAF_NODE	326:23	326:23	8	->
LEAF_NODE	326:25	326:25	8	dec_codetab
LEAF_NODE	326:37	326:37	7	+
FIELD	326:39	326:39	7	CODE_FIRST
LEAF_NODE	326:39	326:39	8	CODE_FIRST
LEAF_NODE	326:49	326:49	4	;
EXPR_STATEMENT	334:1	334:70	3	_TIFFmemset ( sp -> dec_free_entp , 0 , ( CSIZE - CODE_FIRST ) * sizeof ( code_t ) ) ;
EXPR	334:1	334:1	4	_TIFFmemset ( sp -> dec_free_entp , 0 , ( CSIZE - CODE_FIRST ) * sizeof ( code_t ) )
FUNCTION_CALL	334:1	334:69	5	_TIFFmemset ( sp -> dec_free_entp , 0 , ( CSIZE - CODE_FIRST ) * sizeof ( code_t ) )
CALLEE	334:1	334:1	6	_TIFFmemset
LEAF_NODE	334:1	334:1	7	_TIFFmemset
LEAF_NODE	334:12	334:12	6	(
ARGUMENT	334:13	334:13	6	sp -> dec_free_entp
FIELD	334:13	334:17	7	sp -> dec_free_entp
LEAF_NODE	334:13	334:13	8	sp
LEAF_NODE	334:15	334:15	8	->
LEAF_NODE	334:17	334:17	8	dec_free_entp
LEAF_NODE	334:30	334:30	6	,
ARGUMENT	334:32	334:32	6	0
FIELD	334:32	334:32	7	0
LEAF_NODE	334:32	334:32	8	0
LEAF_NODE	334:33	334:33	6	,
ARGUMENT	334:35	334:54	6	( CSIZE - CODE_FIRST ) * sizeof ( code_t )
LEAF_NODE	334:35	334:35	7	(
FIELD	334:36	334:36	7	CSIZE
LEAF_NODE	334:36	334:36	8	CSIZE
LEAF_NODE	334:41	334:41	7	-
FIELD	334:42	334:42	7	CODE_FIRST
LEAF_NODE	334:42	334:42	8	CODE_FIRST
LEAF_NODE	334:52	334:52	7	)
LEAF_NODE	334:53	334:53	7	*
FUNCTION_CALL	334:54	334:68	7	sizeof ( code_t )
CALLEE	334:54	334:54	8	sizeof
LEAF_NODE	334:54	334:54	9	sizeof
LEAF_NODE	334:61	334:61	8	(
ARGUMENT	334:62	334:62	8	code_t
FIELD	334:62	334:62	9	code_t
LEAF_NODE	334:62	334:62	10	code_t
LEAF_NODE	334:68	334:68	8	)
LEAF_NODE	334:69	334:69	6	)
LEAF_NODE	334:70	334:70	4	;
EXPR_STATEMENT	335:1	335:40	3	sp -> dec_oldcodep = & sp -> dec_codetab [ - 1 ] ;
EXPR	335:1	335:1	4	sp -> dec_oldcodep = & sp -> dec_codetab [ - 1 ]
ASSIGN	335:1	335:20	5	sp -> dec_oldcodep = & sp -> dec_codetab [ - 1 ]
LVAL	335:1	335:1	6	sp -> dec_oldcodep
FIELD	335:1	335:5	7	sp -> dec_oldcodep
LEAF_NODE	335:1	335:1	8	sp
LEAF_NODE	335:3	335:3	8	->
LEAF_NODE	335:5	335:5	8	dec_oldcodep
ASSIGN_OP	335:18	335:18	6	=
LEAF_NODE	335:18	335:18	7	=
RVAL	335:20	335:20	6	& sp -> dec_codetab [ - 1 ]
UNARY_EXPR	335:20	335:21	7	& sp -> dec_codetab [ - 1 ]
UNARY_OPERATOR	335:20	335:20	8	&
LEAF_NODE	335:20	335:20	9	&
FIELD	335:21	335:39	8	sp -> dec_codetab [ - 1 ]
LEAF_NODE	335:21	335:21	9	sp
LEAF_NODE	335:23	335:23	9	->
LEAF_NODE	335:25	335:25	9	dec_codetab
LEAF_NODE	335:36	335:36	9	[
EXPR	335:37	335:37	9	- 1
UNARY_EXPR	335:37	335:38	10	- 1
UNARY_OPERATOR	335:37	335:37	11	-
LEAF_NODE	335:37	335:37	12	-
FIELD	335:38	335:38	11	1
LEAF_NODE	335:38	335:38	12	1
LEAF_NODE	335:39	335:39	9	]
LEAF_NODE	335:40	335:40	4	;
EXPR_STATEMENT	336:1	336:57	3	sp -> dec_maxcodep = & sp -> dec_codetab [ sp -> dec_nbitsmask - 1 ] ;
EXPR	336:1	336:1	4	sp -> dec_maxcodep = & sp -> dec_codetab [ sp -> dec_nbitsmask - 1 ]
ASSIGN	336:1	336:20	5	sp -> dec_maxcodep = & sp -> dec_codetab [ sp -> dec_nbitsmask - 1 ]
LVAL	336:1	336:1	6	sp -> dec_maxcodep
FIELD	336:1	336:5	7	sp -> dec_maxcodep
LEAF_NODE	336:1	336:1	8	sp
LEAF_NODE	336:3	336:3	8	->
LEAF_NODE	336:5	336:5	8	dec_maxcodep
ASSIGN_OP	336:18	336:18	6	=
LEAF_NODE	336:18	336:18	7	=
RVAL	336:20	336:20	6	& sp -> dec_codetab [ sp -> dec_nbitsmask - 1 ]
UNARY_EXPR	336:20	336:21	7	& sp -> dec_codetab [ sp -> dec_nbitsmask - 1 ]
UNARY_OPERATOR	336:20	336:20	8	&
LEAF_NODE	336:20	336:20	9	&
FIELD	336:21	336:56	8	sp -> dec_codetab [ sp -> dec_nbitsmask - 1 ]
LEAF_NODE	336:21	336:21	9	sp
LEAF_NODE	336:23	336:23	9	->
LEAF_NODE	336:25	336:25	9	dec_codetab
LEAF_NODE	336:36	336:36	9	[
EXPR	336:37	336:55	9	sp -> dec_nbitsmask - 1
FIELD	336:37	336:41	10	sp -> dec_nbitsmask
LEAF_NODE	336:37	336:37	11	sp
LEAF_NODE	336:39	336:39	11	->
LEAF_NODE	336:41	336:41	11	dec_nbitsmask
LEAF_NODE	336:54	336:54	10	-
FIELD	336:55	336:55	10	1
LEAF_NODE	336:55	336:55	11	1
LEAF_NODE	336:56	336:56	9	]
LEAF_NODE	336:57	336:57	4	;
JUMP_STATEMENT	337:1	337:11	3	return ( 1 ) ;
KEYWORD	337:1	337:1	4	return
LEAF_NODE	337:1	337:1	5	return
DESTINATION	337:8	337:8	4	( 1 )
EXPR	337:8	337:10	5	( 1 )
LEAF_NODE	337:8	337:8	6	(
FIELD	337:9	337:9	6	1
LEAF_NODE	337:9	337:9	7	1
LEAF_NODE	337:10	337:10	6	)
LEAF_NODE	337:11	337:11	4	;
LEAF_NODE	338:0	338:0	2	}
FUNCTION_DEF	354:0	360:0	1	
RETURN_TYPE	354:0	354:7	2	static void
LEAF_NODE	354:0	354:0	3	static
TYPE_NAME	354:7	354:7	3	void
LEAF_NODE	354:7	354:7	4	void
FUNCTION_NAME	355:0	355:0	2	codeLoop
LEAF_NODE	355:0	355:0	3	codeLoop
PARAMETER_LIST	355:8	355:38	2	( TIFF * tif , const char * module )
LEAF_NODE	355:8	355:8	3	(
PARAMETER_DECL	355:9	355:15	3	TIFF * tif
TYPE	355:9	355:13	4	TIFF *
TYPE_NAME	355:9	355:9	5	TIFF
LEAF_NODE	355:9	355:9	6	TIFF
POINTER	355:13	355:13	5	*
LEAF_NODE	355:13	355:13	6	*
NAME	355:15	355:15	4	tif
LEAF_NODE	355:15	355:15	5	tif
LEAF_NODE	355:18	355:18	3	,
PARAMETER_DECL	355:20	355:32	3	const char * module
TYPE	355:20	355:30	4	const char *
TYPE_NAME	355:20	355:26	5	const char
LEAF_NODE	355:20	355:20	6	const
LEAF_NODE	355:26	355:26	6	char
POINTER	355:30	355:30	5	*
LEAF_NODE	355:30	355:30	6	*
NAME	355:32	355:32	4	module
LEAF_NODE	355:32	355:32	5	module
LEAF_NODE	355:38	355:38	3	)
LEAF_NODE	356:0	356:0	2	{
STATEMENTS	357:1	357:1	2	
EXPR_STATEMENT	357:1	359:18	3	TIFFErrorExt ( tif -> tif_clientdata , module , "Bogus encoding, loop in the code table; scanline %d" , tif -> tif_row ) ;
EXPR	357:1	357:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "Bogus encoding, loop in the code table; scanline %d" , tif -> tif_row )
FUNCTION_CALL	357:1	359:17	5	TIFFErrorExt ( tif -> tif_clientdata , module , "Bogus encoding, loop in the code table; scanline %d" , tif -> tif_row )
CALLEE	357:1	357:1	6	TIFFErrorExt
LEAF_NODE	357:1	357:1	7	TIFFErrorExt
LEAF_NODE	357:13	357:13	6	(
ARGUMENT	357:14	357:14	6	tif -> tif_clientdata
FIELD	357:14	357:19	7	tif -> tif_clientdata
LEAF_NODE	357:14	357:14	8	tif
LEAF_NODE	357:17	357:17	8	->
LEAF_NODE	357:19	357:19	8	tif_clientdata
LEAF_NODE	357:33	357:33	6	,
ARGUMENT	357:35	357:35	6	module
FIELD	357:35	357:35	7	module
LEAF_NODE	357:35	357:35	8	module
LEAF_NODE	357:41	357:41	6	,
ARGUMENT	358:5	358:5	6	"Bogus encoding, loop in the code table; scanline %d"
FIELD	358:5	358:5	7	"Bogus encoding, loop in the code table; scanline %d"
LEAF_NODE	358:5	358:5	8	"Bogus encoding, loop in the code table; scanline %d"
LEAF_NODE	358:58	358:58	6	,
ARGUMENT	359:5	359:5	6	tif -> tif_row
FIELD	359:5	359:10	7	tif -> tif_row
LEAF_NODE	359:5	359:5	8	tif
LEAF_NODE	359:8	359:8	8	->
LEAF_NODE	359:10	359:10	8	tif_row
LEAF_NODE	359:17	359:17	6	)
LEAF_NODE	359:18	359:18	4	;
LEAF_NODE	360:0	360:0	2	}
FUNCTION_DEF	362:0	584:0	1	
RETURN_TYPE	362:0	362:7	2	static int
LEAF_NODE	362:0	362:0	3	static
TYPE_NAME	362:7	362:7	3	int
LEAF_NODE	362:7	362:7	4	int
FUNCTION_NAME	363:0	363:0	2	LZWDecode
LEAF_NODE	363:0	363:0	3	LZWDecode
PARAMETER_LIST	363:9	363:56	2	( TIFF * tif , uint8 * op0 , tmsize_t occ0 , uint16 s )
LEAF_NODE	363:9	363:9	3	(
PARAMETER_DECL	363:10	363:16	3	TIFF * tif
TYPE	363:10	363:14	4	TIFF *
TYPE_NAME	363:10	363:10	5	TIFF
LEAF_NODE	363:10	363:10	6	TIFF
POINTER	363:14	363:14	5	*
LEAF_NODE	363:14	363:14	6	*
NAME	363:16	363:16	4	tif
LEAF_NODE	363:16	363:16	5	tif
LEAF_NODE	363:19	363:19	3	,
PARAMETER_DECL	363:21	363:28	3	uint8 * op0
TYPE	363:21	363:26	4	uint8 *
TYPE_NAME	363:21	363:21	5	uint8
LEAF_NODE	363:21	363:21	6	uint8
POINTER	363:26	363:26	5	*
LEAF_NODE	363:26	363:26	6	*
NAME	363:28	363:28	4	op0
LEAF_NODE	363:28	363:28	5	op0
LEAF_NODE	363:31	363:31	3	,
PARAMETER_DECL	363:33	363:42	3	tmsize_t occ0
TYPE	363:33	363:33	4	tmsize_t
TYPE_NAME	363:33	363:33	5	tmsize_t
LEAF_NODE	363:33	363:33	6	tmsize_t
NAME	363:42	363:42	4	occ0
LEAF_NODE	363:42	363:42	5	occ0
LEAF_NODE	363:46	363:46	3	,
PARAMETER_DECL	363:48	363:55	3	uint16 s
TYPE	363:48	363:48	4	uint16
TYPE_NAME	363:48	363:48	5	uint16
LEAF_NODE	363:48	363:48	6	uint16
NAME	363:55	363:55	4	s
LEAF_NODE	363:55	363:55	5	s
LEAF_NODE	363:56	363:56	3	)
LEAF_NODE	364:0	364:0	2	{
STATEMENTS	365:1	583:1	2	
LEAF_NODE	365:1	365:1	3	static
SIMPLE_DECL	365:8	365:41	3	const char [ ] module ; module = "LZWDecode" ;
VAR_DECL	365:8	365:19	4	const char [ ] module ; module = "LZWDecode"
TYPE	365:8	365:25	5	const char [ ]
TYPE_NAME	365:8	365:14	6	const char
LEAF_NODE	365:8	365:8	7	const
LEAF_NODE	365:14	365:14	7	char
TYPE_SUFFIX	365:25	365:26	6	[ ]
LEAF_NODE	365:25	365:25	7	[
LEAF_NODE	365:26	365:26	7	]
NAME	365:19	365:19	5	module
LEAF_NODE	365:19	365:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	365:19	365:19	5	module = "LZWDecode"
ASSIGN	365:19	365:30	6	module = "LZWDecode"
LVAL	365:19	365:19	7	module
NAME	365:19	365:19	8	module
LEAF_NODE	365:19	365:19	9	module
ASSIGN_OP	365:28	365:28	7	=
LEAF_NODE	365:28	365:28	8	=
RVAL	365:30	365:30	7	"LZWDecode"
FIELD	365:30	365:30	8	"LZWDecode"
LEAF_NODE	365:30	365:30	9	"LZWDecode"
LEAF_NODE	365:41	365:41	4	;
SIMPLE_DECL	366:1	366:38	3	LZWCodecState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	366:1	366:16	4	LZWCodecState * sp ; sp = DecoderState ( tif )
TYPE	366:1	366:15	5	LZWCodecState *
TYPE_NAME	366:1	366:1	6	LZWCodecState
LEAF_NODE	366:1	366:1	7	LZWCodecState
POINTER	366:15	366:15	6	*
LEAF_NODE	366:15	366:15	7	*
NAME	366:16	366:16	5	sp
LEAF_NODE	366:16	366:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	366:16	366:16	5	sp = DecoderState ( tif )
ASSIGN	366:16	366:21	6	sp = DecoderState ( tif )
LVAL	366:16	366:16	7	sp
NAME	366:16	366:16	8	sp
LEAF_NODE	366:16	366:16	9	sp
ASSIGN_OP	366:19	366:19	7	=
LEAF_NODE	366:19	366:19	8	=
RVAL	366:21	366:21	7	DecoderState ( tif )
FUNCTION_CALL	366:21	366:37	8	DecoderState ( tif )
CALLEE	366:21	366:21	9	DecoderState
LEAF_NODE	366:21	366:21	10	DecoderState
LEAF_NODE	366:33	366:33	9	(
ARGUMENT	366:34	366:34	9	tif
FIELD	366:34	366:34	10	tif
LEAF_NODE	366:34	366:34	11	tif
LEAF_NODE	366:37	366:37	9	)
LEAF_NODE	366:38	366:38	4	;
SIMPLE_DECL	367:1	367:23	3	char * op ; op = ( char * ) op0 ;
VAR_DECL	367:1	367:7	4	char * op ; op = ( char * ) op0
TYPE	367:1	367:6	5	char *
TYPE_NAME	367:1	367:1	6	char
LEAF_NODE	367:1	367:1	7	char
POINTER	367:6	367:6	6	*
LEAF_NODE	367:6	367:6	7	*
NAME	367:7	367:7	5	op
LEAF_NODE	367:7	367:7	6	op
LEAF_NODE	0:0	0:0	5	;
INIT	367:7	367:7	5	op = ( char * ) op0
ASSIGN	367:7	367:12	6	op = ( char * ) op0
LVAL	367:7	367:7	7	op
NAME	367:7	367:7	8	op
LEAF_NODE	367:7	367:7	9	op
ASSIGN_OP	367:10	367:10	7	=
LEAF_NODE	367:10	367:10	8	=
RVAL	367:12	367:20	7	( char * ) op0
LEAF_NODE	367:12	367:12	8	(
TYPE_NAME	367:13	367:13	8	char
LEAF_NODE	367:13	367:13	9	char
LEAF_NODE	367:17	367:17	8	*
LEAF_NODE	367:18	367:18	8	)
FIELD	367:20	367:20	8	op0
LEAF_NODE	367:20	367:20	9	op0
LEAF_NODE	367:23	367:23	4	;
SIMPLE_DECL	368:1	368:23	3	long occ ; occ = ( long ) occ0 ;
VAR_DECL	368:1	368:6	4	long occ ; occ = ( long ) occ0
TYPE	368:1	368:1	5	long
TYPE_NAME	368:1	368:1	6	long
LEAF_NODE	368:1	368:1	7	long
NAME	368:6	368:6	5	occ
LEAF_NODE	368:6	368:6	6	occ
LEAF_NODE	0:0	0:0	5	;
INIT	368:6	368:6	5	occ = ( long ) occ0
ASSIGN	368:6	368:12	6	occ = ( long ) occ0
LVAL	368:6	368:6	7	occ
NAME	368:6	368:6	8	occ
LEAF_NODE	368:6	368:6	9	occ
ASSIGN_OP	368:10	368:10	7	=
LEAF_NODE	368:10	368:10	8	=
RVAL	368:12	368:19	7	( long ) occ0
LEAF_NODE	368:12	368:12	8	(
TYPE_NAME	368:13	368:13	8	long
LEAF_NODE	368:13	368:13	9	long
LEAF_NODE	368:17	368:17	8	)
FIELD	368:19	368:19	8	occ0
LEAF_NODE	368:19	368:19	9	occ0
LEAF_NODE	368:23	368:23	4	;
SIMPLE_DECL	369:1	369:9	3	char * tp ;
VAR_DECL	369:1	369:7	4	char * tp
TYPE	369:1	369:6	5	char *
TYPE_NAME	369:1	369:1	6	char
LEAF_NODE	369:1	369:1	7	char
POINTER	369:6	369:6	6	*
LEAF_NODE	369:6	369:6	7	*
NAME	369:7	369:7	5	tp
LEAF_NODE	369:7	369:7	6	tp
LEAF_NODE	369:9	369:9	4	;
SIMPLE_DECL	370:1	370:18	3	unsigned char * bp ;
VAR_DECL	370:1	370:16	4	unsigned char * bp
TYPE	370:1	370:15	5	unsigned char *
TYPE_NAME	370:1	370:10	6	unsigned char
LEAF_NODE	370:1	370:1	7	unsigned
LEAF_NODE	370:10	370:10	7	char
POINTER	370:15	370:15	6	*
LEAF_NODE	370:15	370:15	7	*
NAME	370:16	370:16	5	bp
LEAF_NODE	370:16	370:16	6	bp
LEAF_NODE	370:18	370:18	4	;
SIMPLE_DECL	371:1	371:13	3	hcode_t code ;
VAR_DECL	371:1	371:9	4	hcode_t code
TYPE	371:1	371:1	5	hcode_t
TYPE_NAME	371:1	371:1	6	hcode_t
LEAF_NODE	371:1	371:1	7	hcode_t
NAME	371:9	371:9	5	code
LEAF_NODE	371:9	371:9	6	code
LEAF_NODE	371:13	371:13	4	;
SIMPLE_DECL	372:1	372:8	3	int len ;
VAR_DECL	372:1	372:5	4	int len
TYPE	372:1	372:1	5	int
TYPE_NAME	372:1	372:1	6	int
LEAF_NODE	372:1	372:1	7	int
NAME	372:5	372:5	5	len
LEAF_NODE	372:5	372:5	6	len
LEAF_NODE	372:8	372:8	4	;
SIMPLE_DECL	373:1	373:32	3	long nbits , long nextbits , long nbitsmask ;
INIT_DECL_LIST	373:1	373:1	4	long nbits , long nextbits , long nbitsmask
VAR_DECL	373:1	373:6	5	long nbits
TYPE	373:1	373:1	6	long
TYPE_NAME	373:1	373:1	7	long
LEAF_NODE	373:1	373:1	8	long
NAME	373:6	373:6	6	nbits
LEAF_NODE	373:6	373:6	7	nbits
LEAF_NODE	373:11	373:11	5	,
INIT_DECL_LIST	373:1	373:1	5	long nextbits , long nbitsmask
VAR_DECL	373:1	373:13	6	long nextbits
TYPE	373:1	373:1	7	long
TYPE_NAME	373:1	373:1	8	long
LEAF_NODE	373:1	373:1	9	long
NAME	373:13	373:13	7	nextbits
LEAF_NODE	373:13	373:13	8	nextbits
LEAF_NODE	373:21	373:21	6	,
VAR_DECL	373:1	373:23	6	long nbitsmask
TYPE	373:1	373:1	7	long
TYPE_NAME	373:1	373:1	8	long
LEAF_NODE	373:1	373:1	9	long
NAME	373:23	373:23	7	nbitsmask
LEAF_NODE	373:23	373:23	8	nbitsmask
LEAF_NODE	373:32	373:32	4	;
SIMPLE_DECL	374:8	374:30	3	unsigned long nextdata ;
VAR_DECL	374:8	374:22	4	unsigned long nextdata
TYPE	374:8	374:8	5	unsigned long
TYPE_NAME	374:8	374:17	6	unsigned long
LEAF_NODE	374:8	374:8	7	unsigned
LEAF_NODE	374:17	374:17	7	long
NAME	374:22	374:22	5	nextdata
LEAF_NODE	374:22	374:22	6	nextdata
LEAF_NODE	374:30	374:30	4	;
SIMPLE_DECL	375:1	375:48	3	code_t * codep , code_t * free_entp , code_t * maxcodep , code_t * oldcodep ;
INIT_DECL_LIST	375:1	375:1	4	code_t * codep , code_t * free_entp , code_t * maxcodep , code_t * oldcodep
VAR_DECL	375:1	375:9	5	code_t * codep
TYPE	375:1	375:8	6	code_t *
TYPE_NAME	375:1	375:1	7	code_t
LEAF_NODE	375:1	375:1	8	code_t
POINTER	375:8	375:8	7	*
LEAF_NODE	375:8	375:8	8	*
NAME	375:9	375:9	6	codep
LEAF_NODE	375:9	375:9	7	codep
LEAF_NODE	375:14	375:14	5	,
INIT_DECL_LIST	375:1	375:1	5	code_t * free_entp , code_t * maxcodep , code_t * oldcodep
VAR_DECL	375:1	375:17	6	code_t * free_entp
TYPE	375:1	375:16	7	code_t *
TYPE_NAME	375:1	375:1	8	code_t
LEAF_NODE	375:1	375:1	9	code_t
POINTER	375:16	375:16	8	*
LEAF_NODE	375:16	375:16	9	*
NAME	375:17	375:17	7	free_entp
LEAF_NODE	375:17	375:17	8	free_entp
LEAF_NODE	375:26	375:26	6	,
INIT_DECL_LIST	375:1	375:1	6	code_t * maxcodep , code_t * oldcodep
VAR_DECL	375:1	375:29	7	code_t * maxcodep
TYPE	375:1	375:28	8	code_t *
TYPE_NAME	375:1	375:1	9	code_t
LEAF_NODE	375:1	375:1	10	code_t
POINTER	375:28	375:28	9	*
LEAF_NODE	375:28	375:28	10	*
NAME	375:29	375:29	8	maxcodep
LEAF_NODE	375:29	375:29	9	maxcodep
LEAF_NODE	375:37	375:37	7	,
VAR_DECL	375:1	375:40	7	code_t * oldcodep
TYPE	375:1	375:39	8	code_t *
TYPE_NAME	375:1	375:1	9	code_t
LEAF_NODE	375:1	375:1	10	code_t
POINTER	375:39	375:39	9	*
LEAF_NODE	375:39	375:39	10	*
NAME	375:40	375:40	8	oldcodep
LEAF_NODE	375:40	375:40	9	oldcodep
LEAF_NODE	375:48	375:48	4	;
EXPR_STATEMENT	377:1	377:9	3	( void ) s ;
EXPR	377:1	377:8	4	( void ) s
LEAF_NODE	377:1	377:1	5	(
TYPE_NAME	377:2	377:2	5	void
LEAF_NODE	377:2	377:2	6	void
LEAF_NODE	377:6	377:6	5	)
FIELD	377:8	377:8	5	s
LEAF_NODE	377:8	377:8	6	s
LEAF_NODE	377:9	377:9	4	;
EXPR_STATEMENT	378:1	378:19	3	assert ( sp != NULL ) ;
EXPR	378:1	378:1	4	assert ( sp != NULL )
FUNCTION_CALL	378:1	378:18	5	assert ( sp != NULL )
CALLEE	378:1	378:1	6	assert
LEAF_NODE	378:1	378:1	7	assert
LEAF_NODE	378:7	378:7	6	(
ARGUMENT	378:8	378:14	6	sp != NULL
FIELD	378:8	378:8	7	sp
LEAF_NODE	378:8	378:8	8	sp
EQ_OPERATOR	378:11	378:11	7	!=
LEAF_NODE	378:11	378:11	8	!=
FIELD	378:14	378:14	7	NULL
LEAF_NODE	378:14	378:14	8	NULL
LEAF_NODE	378:18	378:18	6	)
LEAF_NODE	378:19	378:19	4	;
EXPR_STATEMENT	379:8	379:39	3	assert ( sp -> dec_codetab != NULL ) ;
EXPR	379:8	379:8	4	assert ( sp -> dec_codetab != NULL )
FUNCTION_CALL	379:8	379:38	5	assert ( sp -> dec_codetab != NULL )
CALLEE	379:8	379:8	6	assert
LEAF_NODE	379:8	379:8	7	assert
LEAF_NODE	379:14	379:14	6	(
ARGUMENT	379:15	379:34	6	sp -> dec_codetab != NULL
FIELD	379:15	379:19	7	sp -> dec_codetab
LEAF_NODE	379:15	379:15	8	sp
LEAF_NODE	379:17	379:17	8	->
LEAF_NODE	379:19	379:19	8	dec_codetab
EQ_OPERATOR	379:31	379:31	7	!=
LEAF_NODE	379:31	379:31	8	!=
FIELD	379:34	379:34	7	NULL
LEAF_NODE	379:34	379:34	8	NULL
LEAF_NODE	379:38	379:38	6	)
LEAF_NODE	379:39	379:39	4	;
SELECTION	384:1	385:9	3	
KEYWORD	384:1	384:1	4	if
LEAF_NODE	384:1	384:1	5	if
LEAF_NODE	384:4	384:4	4	(
CONDITION	384:5	384:5	4	( tmsize_t ) occ != occ0
EXPR	384:5	384:23	5	( tmsize_t ) occ != occ0
LEAF_NODE	384:5	384:5	6	(
TYPE_NAME	384:6	384:6	6	tmsize_t
LEAF_NODE	384:6	384:6	7	tmsize_t
LEAF_NODE	384:14	384:14	6	)
FIELD	384:16	384:16	6	occ
LEAF_NODE	384:16	384:16	7	occ
EQ_OPERATOR	384:20	384:20	6	!=
LEAF_NODE	384:20	384:20	7	!=
FIELD	384:23	384:23	6	occ0
LEAF_NODE	384:23	384:23	7	occ0
LEAF_NODE	384:27	384:27	4	)
STATEMENTS	385:9	385:9	4	
JUMP_STATEMENT	385:9	385:19	5	return ( 0 ) ;
KEYWORD	385:9	385:9	6	return
LEAF_NODE	385:9	385:9	7	return
DESTINATION	385:16	385:16	6	( 0 )
EXPR	385:16	385:18	7	( 0 )
LEAF_NODE	385:16	385:16	8	(
FIELD	385:17	385:17	8	0
LEAF_NODE	385:17	385:17	9	0
LEAF_NODE	385:18	385:18	8	)
LEAF_NODE	385:19	385:19	6	;
SELECTION	389:1	389:22	3	
KEYWORD	389:1	389:1	4	if
LEAF_NODE	389:1	389:1	5	if
LEAF_NODE	389:4	389:4	4	(
CONDITION	389:5	389:5	4	sp -> dec_restart
EXPR	389:5	389:5	5	sp -> dec_restart
FIELD	389:5	389:9	6	sp -> dec_restart
LEAF_NODE	389:5	389:5	7	sp
LEAF_NODE	389:7	389:7	7	->
LEAF_NODE	389:9	389:9	7	dec_restart
LEAF_NODE	389:20	389:20	4	)
STATEMENTS	389:22	428:1	4	
LEAF_NODE	389:22	389:22	5	{
STATEMENTS	390:2	427:2	5	
SIMPLE_DECL	390:2	390:14	6	long residue ;
VAR_DECL	390:2	390:7	7	long residue
TYPE	390:2	390:2	8	long
TYPE_NAME	390:2	390:2	9	long
LEAF_NODE	390:2	390:2	10	long
NAME	390:7	390:7	8	residue
LEAF_NODE	390:7	390:7	9	residue
LEAF_NODE	390:14	390:14	7	;
EXPR_STATEMENT	392:2	392:23	6	codep = sp -> dec_codep ;
EXPR	392:2	392:2	7	codep = sp -> dec_codep
ASSIGN	392:2	392:10	8	codep = sp -> dec_codep
LVAL	392:2	392:2	9	codep
FIELD	392:2	392:2	10	codep
LEAF_NODE	392:2	392:2	11	codep
ASSIGN_OP	392:8	392:8	9	=
LEAF_NODE	392:8	392:8	10	=
RVAL	392:10	392:10	9	sp -> dec_codep
FIELD	392:10	392:14	10	sp -> dec_codep
LEAF_NODE	392:10	392:10	11	sp
LEAF_NODE	392:12	392:12	11	->
LEAF_NODE	392:14	392:14	11	dec_codep
LEAF_NODE	392:23	392:23	7	;
EXPR_STATEMENT	393:2	393:43	6	residue = codep -> length - sp -> dec_restart ;
EXPR	393:2	393:2	7	residue = codep -> length - sp -> dec_restart
ASSIGN	393:2	393:12	8	residue = codep -> length - sp -> dec_restart
LVAL	393:2	393:2	9	residue
FIELD	393:2	393:2	10	residue
LEAF_NODE	393:2	393:2	11	residue
ASSIGN_OP	393:10	393:10	9	=
LEAF_NODE	393:10	393:10	10	=
RVAL	393:12	393:28	9	codep -> length - sp -> dec_restart
FIELD	393:12	393:19	10	codep -> length
LEAF_NODE	393:12	393:12	11	codep
LEAF_NODE	393:17	393:17	11	->
LEAF_NODE	393:19	393:19	11	length
LEAF_NODE	393:26	393:26	10	-
FIELD	393:28	393:32	10	sp -> dec_restart
LEAF_NODE	393:28	393:28	11	sp
LEAF_NODE	393:30	393:30	11	->
LEAF_NODE	393:32	393:32	11	dec_restart
LEAF_NODE	393:43	393:43	7	;
SELECTION	394:2	394:21	6	
KEYWORD	394:2	394:2	7	if
LEAF_NODE	394:2	394:2	8	if
LEAF_NODE	394:5	394:5	7	(
CONDITION	394:6	394:6	7	residue > occ
EXPR	394:6	394:16	8	residue > occ
FIELD	394:6	394:6	9	residue
LEAF_NODE	394:6	394:6	10	residue
REL_OPERATOR	394:14	394:14	9	>
LEAF_NODE	394:14	394:14	10	>
FIELD	394:16	394:16	9	occ
LEAF_NODE	394:16	394:16	10	occ
LEAF_NODE	394:19	394:19	7	)
STATEMENTS	394:21	413:2	7	
LEAF_NODE	394:21	394:21	8	{
STATEMENTS	401:3	412:3	8	
EXPR_STATEMENT	401:3	401:25	9	sp -> dec_restart += occ ;
EXPR	401:3	401:3	10	sp -> dec_restart += occ
ASSIGN	401:3	401:22	11	sp -> dec_restart += occ
LVAL	401:3	401:3	12	sp -> dec_restart
FIELD	401:3	401:7	13	sp -> dec_restart
LEAF_NODE	401:3	401:3	14	sp
LEAF_NODE	401:5	401:5	14	->
LEAF_NODE	401:7	401:7	14	dec_restart
ASSIGN_OP	401:19	401:19	12	+=
LEAF_NODE	401:19	401:19	13	+=
RVAL	401:22	401:22	12	occ
FIELD	401:22	401:22	13	occ
LEAF_NODE	401:22	401:22	14	occ
LEAF_NODE	401:25	401:25	10	;
ITERATION	402:3	402:6	9	
KEYWORD	402:3	402:3	10	do
LEAF_NODE	402:3	402:3	11	do
LEAF_NODE	404:11	404:11	10	(
CONDITION	404:12	404:12	10	-- residue > occ && codep
EXPR	404:12	404:12	11	-- residue > occ && codep
AND	404:12	404:31	12	-- residue > occ && codep
EXPR	404:12	404:24	13	-- residue > occ
LEAF_NODE	404:12	404:12	14	--
FIELD	404:14	404:14	14	residue
LEAF_NODE	404:14	404:14	15	residue
REL_OPERATOR	404:22	404:22	14	>
LEAF_NODE	404:22	404:22	15	>
FIELD	404:24	404:24	14	occ
LEAF_NODE	404:24	404:24	15	occ
LEAF_NODE	404:28	404:28	13	&&
EXPR	404:31	404:31	13	codep
FIELD	404:31	404:31	14	codep
LEAF_NODE	404:31	404:31	15	codep
LEAF_NODE	404:36	404:36	10	)
STATEMENTS	402:6	404:3	10	
LEAF_NODE	402:6	402:6	11	{
STATEMENTS	403:4	403:4	11	
EXPR_STATEMENT	403:4	403:23	12	codep = codep -> next ;
EXPR	403:4	403:4	13	codep = codep -> next
ASSIGN	403:4	403:12	14	codep = codep -> next
LVAL	403:4	403:4	15	codep
FIELD	403:4	403:4	16	codep
LEAF_NODE	403:4	403:4	17	codep
ASSIGN_OP	403:10	403:10	15	=
LEAF_NODE	403:10	403:10	16	=
RVAL	403:12	403:12	15	codep -> next
FIELD	403:12	403:19	16	codep -> next
LEAF_NODE	403:12	403:12	17	codep
LEAF_NODE	403:17	403:17	17	->
LEAF_NODE	403:19	403:19	17	next
LEAF_NODE	403:23	403:23	13	;
LEAF_NODE	404:3	404:3	11	}
LEAF_NODE	404:37	404:37	9	;
SELECTION	405:3	405:14	9	
KEYWORD	405:3	405:3	10	if
LEAF_NODE	405:3	405:3	11	if
LEAF_NODE	405:6	405:6	10	(
CONDITION	405:7	405:7	10	codep
EXPR	405:7	405:7	11	codep
FIELD	405:7	405:7	12	codep
LEAF_NODE	405:7	405:7	13	codep
LEAF_NODE	405:12	405:12	10	)
STATEMENTS	405:14	411:3	10	
LEAF_NODE	405:14	405:14	11	{
STATEMENTS	406:4	410:28	11	
EXPR_STATEMENT	406:4	406:17	12	tp = op + occ ;
EXPR	406:4	406:4	13	tp = op + occ
ASSIGN	406:4	406:9	14	tp = op + occ
LVAL	406:4	406:4	15	tp
FIELD	406:4	406:4	16	tp
LEAF_NODE	406:4	406:4	17	tp
ASSIGN_OP	406:7	406:7	15	=
LEAF_NODE	406:7	406:7	16	=
RVAL	406:9	406:14	15	op + occ
FIELD	406:9	406:9	16	op
LEAF_NODE	406:9	406:9	17	op
LEAF_NODE	406:12	406:12	16	+
FIELD	406:14	406:14	16	occ
LEAF_NODE	406:14	406:14	17	occ
LEAF_NODE	406:17	406:17	13	;
ITERATION	407:4	407:7	12	
KEYWORD	407:4	407:4	13	do
LEAF_NODE	407:4	407:4	14	do
LEAF_NODE	410:12	410:12	13	(
CONDITION	410:13	410:13	13	-- occ && codep
EXPR	410:13	410:13	14	-- occ && codep
AND	410:13	410:22	15	-- occ && codep
EXPR	410:13	410:15	16	-- occ
LEAF_NODE	410:13	410:13	17	--
FIELD	410:15	410:15	17	occ
LEAF_NODE	410:15	410:15	18	occ
LEAF_NODE	410:19	410:19	16	&&
EXPR	410:22	410:22	16	codep
FIELD	410:22	410:22	17	codep
LEAF_NODE	410:22	410:22	18	codep
LEAF_NODE	410:27	410:27	13	)
STATEMENTS	407:7	410:4	13	
LEAF_NODE	407:7	407:7	14	{
STATEMENTS	408:5	409:5	14	
LEAF_NODE	408:5	408:5	15	*
EXPR_STATEMENT	408:6	408:25	15	-- tp = codep -> value ;
EXPR	408:6	408:6	16	-- tp = codep -> value
ASSIGN	408:6	408:13	17	-- tp = codep -> value
LVAL	408:6	408:8	18	-- tp
LEAF_NODE	408:6	408:6	19	--
FIELD	408:8	408:8	19	tp
LEAF_NODE	408:8	408:8	20	tp
ASSIGN_OP	408:11	408:11	18	=
LEAF_NODE	408:11	408:11	19	=
RVAL	408:13	408:13	18	codep -> value
FIELD	408:13	408:20	19	codep -> value
LEAF_NODE	408:13	408:13	20	codep
LEAF_NODE	408:18	408:18	20	->
LEAF_NODE	408:20	408:20	20	value
LEAF_NODE	408:25	408:25	16	;
EXPR_STATEMENT	409:5	409:24	15	codep = codep -> next ;
EXPR	409:5	409:5	16	codep = codep -> next
ASSIGN	409:5	409:13	17	codep = codep -> next
LVAL	409:5	409:5	18	codep
FIELD	409:5	409:5	19	codep
LEAF_NODE	409:5	409:5	20	codep
ASSIGN_OP	409:11	409:11	18	=
LEAF_NODE	409:11	409:11	19	=
RVAL	409:13	409:13	18	codep -> next
FIELD	409:13	409:20	19	codep -> next
LEAF_NODE	409:13	409:13	20	codep
LEAF_NODE	409:18	409:18	20	->
LEAF_NODE	409:20	409:20	20	next
LEAF_NODE	409:24	409:24	16	;
LEAF_NODE	410:4	410:4	14	}
LEAF_NODE	410:28	410:28	12	;
LEAF_NODE	411:3	411:3	11	}
JUMP_STATEMENT	412:3	412:13	9	return ( 1 ) ;
KEYWORD	412:3	412:3	10	return
LEAF_NODE	412:3	412:3	11	return
DESTINATION	412:10	412:10	10	( 1 )
EXPR	412:10	412:12	11	( 1 )
LEAF_NODE	412:10	412:10	12	(
FIELD	412:11	412:11	12	1
LEAF_NODE	412:11	412:11	13	1
LEAF_NODE	412:12	412:12	12	)
LEAF_NODE	412:13	412:13	10	;
LEAF_NODE	413:2	413:2	8	}
EXPR_STATEMENT	417:2	417:15	6	op += residue ;
EXPR	417:2	417:2	7	op += residue
ASSIGN	417:2	417:8	8	op += residue
LVAL	417:2	417:2	9	op
FIELD	417:2	417:2	10	op
LEAF_NODE	417:2	417:2	11	op
ASSIGN_OP	417:5	417:5	9	+=
LEAF_NODE	417:5	417:5	10	+=
RVAL	417:8	417:8	9	residue
FIELD	417:8	417:8	10	residue
LEAF_NODE	417:8	417:8	11	residue
LEAF_NODE	417:15	417:15	7	;
EXPR_STATEMENT	418:2	418:16	6	occ -= residue ;
EXPR	418:2	418:2	7	occ -= residue
ASSIGN	418:2	418:9	8	occ -= residue
LVAL	418:2	418:2	9	occ
FIELD	418:2	418:2	10	occ
LEAF_NODE	418:2	418:2	11	occ
ASSIGN_OP	418:6	418:6	9	-=
LEAF_NODE	418:6	418:6	10	-=
RVAL	418:9	418:9	9	residue
FIELD	418:9	418:9	10	residue
LEAF_NODE	418:9	418:9	11	residue
LEAF_NODE	418:16	418:16	7	;
EXPR_STATEMENT	419:2	419:9	6	tp = op ;
EXPR	419:2	419:2	7	tp = op
ASSIGN	419:2	419:7	8	tp = op
LVAL	419:2	419:2	9	tp
FIELD	419:2	419:2	10	tp
LEAF_NODE	419:2	419:2	11	tp
ASSIGN_OP	419:5	419:5	9	=
LEAF_NODE	419:5	419:5	10	=
RVAL	419:7	419:7	9	op
FIELD	419:7	419:7	10	op
LEAF_NODE	419:7	419:7	11	op
LEAF_NODE	419:9	419:9	7	;
ITERATION	420:2	420:5	6	
KEYWORD	420:2	420:2	7	do
LEAF_NODE	420:2	420:2	8	do
LEAF_NODE	426:10	426:10	7	(
CONDITION	426:11	426:11	7	-- residue && codep
EXPR	426:11	426:11	8	-- residue && codep
AND	426:11	426:24	9	-- residue && codep
EXPR	426:11	426:13	10	-- residue
LEAF_NODE	426:11	426:11	11	--
FIELD	426:13	426:13	11	residue
LEAF_NODE	426:13	426:13	12	residue
LEAF_NODE	426:21	426:21	10	&&
EXPR	426:24	426:24	10	codep
FIELD	426:24	426:24	11	codep
LEAF_NODE	426:24	426:24	12	codep
LEAF_NODE	426:29	426:29	7	)
STATEMENTS	420:5	426:2	7	
LEAF_NODE	420:5	420:5	8	{
STATEMENTS	421:3	425:3	8	
SIMPLE_DECL	421:3	421:8	9	int t ;
VAR_DECL	421:3	421:7	10	int t
TYPE	421:3	421:3	11	int
TYPE_NAME	421:3	421:3	12	int
LEAF_NODE	421:3	421:3	13	int
NAME	421:7	421:7	11	t
LEAF_NODE	421:7	421:7	12	t
LEAF_NODE	421:8	421:8	10	;
EXPR_STATEMENT	422:3	422:7	9	-- tp ;
EXPR	422:3	422:5	10	-- tp
LEAF_NODE	422:3	422:3	11	--
FIELD	422:5	422:5	11	tp
LEAF_NODE	422:5	422:5	12	tp
LEAF_NODE	422:7	422:7	10	;
EXPR_STATEMENT	423:3	423:19	9	t = codep -> value ;
EXPR	423:3	423:3	10	t = codep -> value
ASSIGN	423:3	423:7	11	t = codep -> value
LVAL	423:3	423:3	12	t
FIELD	423:3	423:3	13	t
LEAF_NODE	423:3	423:3	14	t
ASSIGN_OP	423:5	423:5	12	=
LEAF_NODE	423:5	423:5	13	=
RVAL	423:7	423:7	12	codep -> value
FIELD	423:7	423:14	13	codep -> value
LEAF_NODE	423:7	423:7	14	codep
LEAF_NODE	423:12	423:12	14	->
LEAF_NODE	423:14	423:14	14	value
LEAF_NODE	423:19	423:19	10	;
EXPR_STATEMENT	424:3	424:22	9	codep = codep -> next ;
EXPR	424:3	424:3	10	codep = codep -> next
ASSIGN	424:3	424:11	11	codep = codep -> next
LVAL	424:3	424:3	12	codep
FIELD	424:3	424:3	13	codep
LEAF_NODE	424:3	424:3	14	codep
ASSIGN_OP	424:9	424:9	12	=
LEAF_NODE	424:9	424:9	13	=
RVAL	424:11	424:11	12	codep -> next
FIELD	424:11	424:18	13	codep -> next
LEAF_NODE	424:11	424:11	14	codep
LEAF_NODE	424:16	424:16	14	->
LEAF_NODE	424:18	424:18	14	next
LEAF_NODE	424:22	424:22	10	;
EXPR_STATEMENT	425:3	425:16	9	* tp = ( char ) t ;
EXPR	425:3	425:3	10	* tp = ( char ) t
ASSIGN	425:3	425:9	11	* tp = ( char ) t
LVAL	425:3	425:3	12	* tp
UNARY_EXPR	425:3	425:4	13	* tp
UNARY_OPERATOR	425:3	425:3	14	*
LEAF_NODE	425:3	425:3	15	*
FIELD	425:4	425:4	14	tp
LEAF_NODE	425:4	425:4	15	tp
ASSIGN_OP	425:7	425:7	12	=
LEAF_NODE	425:7	425:7	13	=
RVAL	425:9	425:15	12	( char ) t
LEAF_NODE	425:9	425:9	13	(
TYPE_NAME	425:10	425:10	13	char
LEAF_NODE	425:10	425:10	14	char
LEAF_NODE	425:14	425:14	13	)
FIELD	425:15	425:15	13	t
LEAF_NODE	425:15	425:15	14	t
LEAF_NODE	425:16	425:16	10	;
LEAF_NODE	426:2	426:2	8	}
LEAF_NODE	426:30	426:30	6	;
EXPR_STATEMENT	427:2	427:21	6	sp -> dec_restart = 0 ;
EXPR	427:2	427:2	7	sp -> dec_restart = 0
ASSIGN	427:2	427:20	8	sp -> dec_restart = 0
LVAL	427:2	427:2	9	sp -> dec_restart
FIELD	427:2	427:6	10	sp -> dec_restart
LEAF_NODE	427:2	427:2	11	sp
LEAF_NODE	427:4	427:4	11	->
LEAF_NODE	427:6	427:6	11	dec_restart
ASSIGN_OP	427:18	427:18	9	=
LEAF_NODE	427:18	427:18	10	=
RVAL	427:20	427:20	9	0
FIELD	427:20	427:20	10	0
LEAF_NODE	427:20	427:20	11	0
LEAF_NODE	427:21	427:21	7	;
LEAF_NODE	428:1	428:1	5	}
EXPR_STATEMENT	430:1	430:37	3	bp = ( unsigned char * ) tif -> tif_rawcp ;
EXPR	430:1	430:1	4	bp = ( unsigned char * ) tif -> tif_rawcp
ASSIGN	430:1	430:6	5	bp = ( unsigned char * ) tif -> tif_rawcp
LVAL	430:1	430:1	6	bp
FIELD	430:1	430:1	7	bp
LEAF_NODE	430:1	430:1	8	bp
ASSIGN_OP	430:4	430:4	6	=
LEAF_NODE	430:4	430:4	7	=
RVAL	430:6	430:23	6	( unsigned char * ) tif -> tif_rawcp
LEAF_NODE	430:6	430:6	7	(
TYPE_NAME	430:7	430:16	7	unsigned char
LEAF_NODE	430:7	430:7	8	unsigned
LEAF_NODE	430:16	430:16	8	char
LEAF_NODE	430:21	430:21	7	*
LEAF_NODE	430:22	430:22	7	)
FIELD	430:23	430:28	7	tif -> tif_rawcp
LEAF_NODE	430:23	430:23	8	tif
LEAF_NODE	430:26	430:26	8	->
LEAF_NODE	430:28	430:28	8	tif_rawcp
LEAF_NODE	430:37	430:37	4	;
EXPR_STATEMENT	432:1	432:72	3	sp -> dec_bitsleft += ( ( ( uint64 ) tif -> tif_rawcc - sp -> old_tif_rawcc ) << 3 ) ;
EXPR	432:1	432:1	4	sp -> dec_bitsleft += ( ( ( uint64 ) tif -> tif_rawcc - sp -> old_tif_rawcc ) << 3 )
ASSIGN	432:1	432:21	5	sp -> dec_bitsleft += ( ( ( uint64 ) tif -> tif_rawcc - sp -> old_tif_rawcc ) << 3 )
LVAL	432:1	432:1	6	sp -> dec_bitsleft
FIELD	432:1	432:5	7	sp -> dec_bitsleft
LEAF_NODE	432:1	432:1	8	sp
LEAF_NODE	432:3	432:3	8	->
LEAF_NODE	432:5	432:5	8	dec_bitsleft
ASSIGN_OP	432:18	432:18	6	+=
LEAF_NODE	432:18	432:18	7	+=
RVAL	432:21	432:71	6	( ( ( uint64 ) tif -> tif_rawcc - sp -> old_tif_rawcc ) << 3 )
LEAF_NODE	432:21	432:21	7	(
LEAF_NODE	432:22	432:22	7	(
LEAF_NODE	432:23	432:23	7	(
TYPE_NAME	432:24	432:24	7	uint64
LEAF_NODE	432:24	432:24	8	uint64
LEAF_NODE	432:30	432:30	7	)
FIELD	432:31	432:36	7	tif -> tif_rawcc
LEAF_NODE	432:31	432:31	8	tif
LEAF_NODE	432:34	432:34	8	->
LEAF_NODE	432:36	432:36	8	tif_rawcc
LEAF_NODE	432:46	432:46	7	-
FIELD	432:48	432:52	7	sp -> old_tif_rawcc
LEAF_NODE	432:48	432:48	8	sp
LEAF_NODE	432:50	432:50	8	->
LEAF_NODE	432:52	432:52	8	old_tif_rawcc
LEAF_NODE	432:65	432:65	7	)
LEAF_NODE	432:67	432:67	7	<<
FIELD	432:70	432:70	7	3
LEAF_NODE	432:70	432:70	8	3
LEAF_NODE	432:71	432:71	7	)
LEAF_NODE	432:72	432:72	4	;
EXPR_STATEMENT	434:1	434:22	3	nbits = sp -> lzw_nbits ;
EXPR	434:1	434:1	4	nbits = sp -> lzw_nbits
ASSIGN	434:1	434:9	5	nbits = sp -> lzw_nbits
LVAL	434:1	434:1	6	nbits
FIELD	434:1	434:1	7	nbits
LEAF_NODE	434:1	434:1	8	nbits
ASSIGN_OP	434:7	434:7	6	=
LEAF_NODE	434:7	434:7	7	=
RVAL	434:9	434:9	6	sp -> lzw_nbits
FIELD	434:9	434:13	7	sp -> lzw_nbits
LEAF_NODE	434:9	434:9	8	sp
LEAF_NODE	434:11	434:11	8	->
LEAF_NODE	434:13	434:13	8	lzw_nbits
LEAF_NODE	434:22	434:22	4	;
EXPR_STATEMENT	435:1	435:28	3	nextdata = sp -> lzw_nextdata ;
EXPR	435:1	435:1	4	nextdata = sp -> lzw_nextdata
ASSIGN	435:1	435:12	5	nextdata = sp -> lzw_nextdata
LVAL	435:1	435:1	6	nextdata
FIELD	435:1	435:1	7	nextdata
LEAF_NODE	435:1	435:1	8	nextdata
ASSIGN_OP	435:10	435:10	6	=
LEAF_NODE	435:10	435:10	7	=
RVAL	435:12	435:12	6	sp -> lzw_nextdata
FIELD	435:12	435:16	7	sp -> lzw_nextdata
LEAF_NODE	435:12	435:12	8	sp
LEAF_NODE	435:14	435:14	8	->
LEAF_NODE	435:16	435:16	8	lzw_nextdata
LEAF_NODE	435:28	435:28	4	;
EXPR_STATEMENT	436:1	436:28	3	nextbits = sp -> lzw_nextbits ;
EXPR	436:1	436:1	4	nextbits = sp -> lzw_nextbits
ASSIGN	436:1	436:12	5	nextbits = sp -> lzw_nextbits
LVAL	436:1	436:1	6	nextbits
FIELD	436:1	436:1	7	nextbits
LEAF_NODE	436:1	436:1	8	nextbits
ASSIGN_OP	436:10	436:10	6	=
LEAF_NODE	436:10	436:10	7	=
RVAL	436:12	436:12	6	sp -> lzw_nextbits
FIELD	436:12	436:16	7	sp -> lzw_nextbits
LEAF_NODE	436:12	436:12	8	sp
LEAF_NODE	436:14	436:14	8	->
LEAF_NODE	436:16	436:16	8	lzw_nextbits
LEAF_NODE	436:28	436:28	4	;
EXPR_STATEMENT	437:1	437:30	3	nbitsmask = sp -> dec_nbitsmask ;
EXPR	437:1	437:1	4	nbitsmask = sp -> dec_nbitsmask
ASSIGN	437:1	437:13	5	nbitsmask = sp -> dec_nbitsmask
LVAL	437:1	437:1	6	nbitsmask
FIELD	437:1	437:1	7	nbitsmask
LEAF_NODE	437:1	437:1	8	nbitsmask
ASSIGN_OP	437:11	437:11	6	=
LEAF_NODE	437:11	437:11	7	=
RVAL	437:13	437:13	6	sp -> dec_nbitsmask
FIELD	437:13	437:17	7	sp -> dec_nbitsmask
LEAF_NODE	437:13	437:13	8	sp
LEAF_NODE	437:15	437:15	8	->
LEAF_NODE	437:17	437:17	8	dec_nbitsmask
LEAF_NODE	437:30	437:30	4	;
EXPR_STATEMENT	438:1	438:28	3	oldcodep = sp -> dec_oldcodep ;
EXPR	438:1	438:1	4	oldcodep = sp -> dec_oldcodep
ASSIGN	438:1	438:12	5	oldcodep = sp -> dec_oldcodep
LVAL	438:1	438:1	6	oldcodep
FIELD	438:1	438:1	7	oldcodep
LEAF_NODE	438:1	438:1	8	oldcodep
ASSIGN_OP	438:10	438:10	6	=
LEAF_NODE	438:10	438:10	7	=
RVAL	438:12	438:12	6	sp -> dec_oldcodep
FIELD	438:12	438:16	7	sp -> dec_oldcodep
LEAF_NODE	438:12	438:12	8	sp
LEAF_NODE	438:14	438:14	8	->
LEAF_NODE	438:16	438:16	8	dec_oldcodep
LEAF_NODE	438:28	438:28	4	;
EXPR_STATEMENT	439:1	439:30	3	free_entp = sp -> dec_free_entp ;
EXPR	439:1	439:1	4	free_entp = sp -> dec_free_entp
ASSIGN	439:1	439:13	5	free_entp = sp -> dec_free_entp
LVAL	439:1	439:1	6	free_entp
FIELD	439:1	439:1	7	free_entp
LEAF_NODE	439:1	439:1	8	free_entp
ASSIGN_OP	439:11	439:11	6	=
LEAF_NODE	439:11	439:11	7	=
RVAL	439:13	439:13	6	sp -> dec_free_entp
FIELD	439:13	439:17	7	sp -> dec_free_entp
LEAF_NODE	439:13	439:13	8	sp
LEAF_NODE	439:15	439:15	8	->
LEAF_NODE	439:17	439:17	8	dec_free_entp
LEAF_NODE	439:30	439:30	4	;
EXPR_STATEMENT	440:1	440:28	3	maxcodep = sp -> dec_maxcodep ;
EXPR	440:1	440:1	4	maxcodep = sp -> dec_maxcodep
ASSIGN	440:1	440:12	5	maxcodep = sp -> dec_maxcodep
LVAL	440:1	440:1	6	maxcodep
FIELD	440:1	440:1	7	maxcodep
LEAF_NODE	440:1	440:1	8	maxcodep
ASSIGN_OP	440:10	440:10	6	=
LEAF_NODE	440:10	440:10	7	=
RVAL	440:12	440:12	6	sp -> dec_maxcodep
FIELD	440:12	440:16	7	sp -> dec_maxcodep
LEAF_NODE	440:12	440:12	8	sp
LEAF_NODE	440:14	440:14	8	->
LEAF_NODE	440:16	440:16	8	dec_maxcodep
LEAF_NODE	440:28	440:28	4	;
ITERATION	442:1	442:17	3	
KEYWORD	442:1	442:1	4	while
LEAF_NODE	442:1	442:1	5	while
LEAF_NODE	442:7	442:7	4	(
CONDITION	442:8	442:8	4	occ > 0
EXPR	442:8	442:14	5	occ > 0
FIELD	442:8	442:8	6	occ
LEAF_NODE	442:8	442:8	7	occ
REL_OPERATOR	442:12	442:12	6	>
LEAF_NODE	442:12	442:12	7	>
FIELD	442:14	442:14	6	0
LEAF_NODE	442:14	442:14	7	0
LEAF_NODE	442:15	442:15	4	)
STATEMENTS	442:17	556:1	4	
LEAF_NODE	442:17	442:17	5	{
STATEMENTS	443:2	552:4	5	
EXPR_STATEMENT	443:2	443:42	6	NextCode ( tif , sp , bp , code , GetNextCode ) ;
EXPR	443:2	443:2	7	NextCode ( tif , sp , bp , code , GetNextCode )
FUNCTION_CALL	443:2	443:41	8	NextCode ( tif , sp , bp , code , GetNextCode )
CALLEE	443:2	443:2	9	NextCode
LEAF_NODE	443:2	443:2	10	NextCode
LEAF_NODE	443:10	443:10	9	(
ARGUMENT	443:11	443:11	9	tif
FIELD	443:11	443:11	10	tif
LEAF_NODE	443:11	443:11	11	tif
LEAF_NODE	443:14	443:14	9	,
ARGUMENT	443:16	443:16	9	sp
FIELD	443:16	443:16	10	sp
LEAF_NODE	443:16	443:16	11	sp
LEAF_NODE	443:18	443:18	9	,
ARGUMENT	443:20	443:20	9	bp
FIELD	443:20	443:20	10	bp
LEAF_NODE	443:20	443:20	11	bp
LEAF_NODE	443:22	443:22	9	,
ARGUMENT	443:24	443:24	9	code
FIELD	443:24	443:24	10	code
LEAF_NODE	443:24	443:24	11	code
LEAF_NODE	443:28	443:28	9	,
ARGUMENT	443:30	443:30	9	GetNextCode
FIELD	443:30	443:30	10	GetNextCode
LEAF_NODE	443:30	443:30	11	GetNextCode
LEAF_NODE	443:41	443:41	9	)
LEAF_NODE	443:42	443:42	7	;
SELECTION	444:2	445:3	6	
KEYWORD	444:2	444:2	7	if
LEAF_NODE	444:2	444:2	8	if
LEAF_NODE	444:5	444:5	7	(
CONDITION	444:6	444:6	7	code == CODE_EOI
EXPR	444:6	444:14	8	code == CODE_EOI
FIELD	444:6	444:6	9	code
LEAF_NODE	444:6	444:6	10	code
EQ_OPERATOR	444:11	444:11	9	==
LEAF_NODE	444:11	444:11	10	==
FIELD	444:14	444:14	9	CODE_EOI
LEAF_NODE	444:14	444:14	10	CODE_EOI
LEAF_NODE	444:22	444:22	7	)
STATEMENTS	445:3	445:3	7	
JUMP_STATEMENT	445:3	445:8	8	break DESTINATION ;
KEYWORD	445:3	445:3	9	break
LEAF_NODE	445:3	445:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	445:8	445:8	9	;
SELECTION	446:2	446:26	6	
KEYWORD	446:2	446:2	7	if
LEAF_NODE	446:2	446:2	8	if
LEAF_NODE	446:5	446:5	7	(
CONDITION	446:6	446:6	7	code == CODE_CLEAR
EXPR	446:6	446:14	8	code == CODE_CLEAR
FIELD	446:6	446:6	9	code
LEAF_NODE	446:6	446:6	10	code
EQ_OPERATOR	446:11	446:11	9	==
LEAF_NODE	446:11	446:11	10	==
FIELD	446:14	446:14	9	CODE_CLEAR
LEAF_NODE	446:14	446:14	10	CODE_CLEAR
LEAF_NODE	446:24	446:24	7	)
STATEMENTS	446:26	468:2	7	
LEAF_NODE	446:26	446:26	8	{
STATEMENTS	447:3	467:3	8	
ITERATION	447:3	447:6	9	
KEYWORD	447:3	447:3	10	do
LEAF_NODE	447:3	447:3	11	do
LEAF_NODE	455:11	455:11	10	(
CONDITION	455:12	455:12	10	code == CODE_CLEAR
EXPR	455:12	455:20	11	code == CODE_CLEAR
FIELD	455:12	455:12	12	code
LEAF_NODE	455:12	455:12	13	code
EQ_OPERATOR	455:17	455:17	12	==
LEAF_NODE	455:17	455:17	13	==
FIELD	455:20	455:20	12	CODE_CLEAR
LEAF_NODE	455:20	455:20	13	CODE_CLEAR
LEAF_NODE	455:30	455:30	10	)
STATEMENTS	447:6	455:3	10	
LEAF_NODE	447:6	447:6	11	{
STATEMENTS	448:4	454:4	11	
EXPR_STATEMENT	448:4	448:44	12	free_entp = sp -> dec_codetab + CODE_FIRST ;
EXPR	448:4	448:4	13	free_entp = sp -> dec_codetab + CODE_FIRST
ASSIGN	448:4	448:16	14	free_entp = sp -> dec_codetab + CODE_FIRST
LVAL	448:4	448:4	15	free_entp
FIELD	448:4	448:4	16	free_entp
LEAF_NODE	448:4	448:4	17	free_entp
ASSIGN_OP	448:14	448:14	15	=
LEAF_NODE	448:14	448:14	16	=
RVAL	448:16	448:34	15	sp -> dec_codetab + CODE_FIRST
FIELD	448:16	448:20	16	sp -> dec_codetab
LEAF_NODE	448:16	448:16	17	sp
LEAF_NODE	448:18	448:18	17	->
LEAF_NODE	448:20	448:20	17	dec_codetab
LEAF_NODE	448:32	448:32	16	+
FIELD	448:34	448:34	16	CODE_FIRST
LEAF_NODE	448:34	448:34	17	CODE_FIRST
LEAF_NODE	448:44	448:44	13	;
EXPR_STATEMENT	449:4	450:48	12	_TIFFmemset ( free_entp , 0 , ( CSIZE - CODE_FIRST ) * sizeof ( code_t ) ) ;
EXPR	449:4	449:4	13	_TIFFmemset ( free_entp , 0 , ( CSIZE - CODE_FIRST ) * sizeof ( code_t ) )
FUNCTION_CALL	449:4	450:47	14	_TIFFmemset ( free_entp , 0 , ( CSIZE - CODE_FIRST ) * sizeof ( code_t ) )
CALLEE	449:4	449:4	15	_TIFFmemset
LEAF_NODE	449:4	449:4	16	_TIFFmemset
LEAF_NODE	449:15	449:15	15	(
ARGUMENT	449:16	449:16	15	free_entp
FIELD	449:16	449:16	16	free_entp
LEAF_NODE	449:16	449:16	17	free_entp
LEAF_NODE	449:25	449:25	15	,
ARGUMENT	449:27	449:27	15	0
FIELD	449:27	449:27	16	0
LEAF_NODE	449:27	449:27	17	0
LEAF_NODE	449:28	449:28	15	,
ARGUMENT	450:9	450:32	15	( CSIZE - CODE_FIRST ) * sizeof ( code_t )
LEAF_NODE	450:9	450:9	16	(
FIELD	450:10	450:10	16	CSIZE
LEAF_NODE	450:10	450:10	17	CSIZE
LEAF_NODE	450:16	450:16	16	-
FIELD	450:18	450:18	16	CODE_FIRST
LEAF_NODE	450:18	450:18	17	CODE_FIRST
LEAF_NODE	450:28	450:28	16	)
LEAF_NODE	450:30	450:30	16	*
FUNCTION_CALL	450:32	450:46	16	sizeof ( code_t )
CALLEE	450:32	450:32	17	sizeof
LEAF_NODE	450:32	450:32	18	sizeof
LEAF_NODE	450:39	450:39	17	(
ARGUMENT	450:40	450:40	17	code_t
FIELD	450:40	450:40	18	code_t
LEAF_NODE	450:40	450:40	19	code_t
LEAF_NODE	450:46	450:46	17	)
LEAF_NODE	450:47	450:47	15	)
LEAF_NODE	450:48	450:48	13	;
EXPR_STATEMENT	451:4	451:20	12	nbits = BITS_MIN ;
EXPR	451:4	451:4	13	nbits = BITS_MIN
ASSIGN	451:4	451:12	14	nbits = BITS_MIN
LVAL	451:4	451:4	15	nbits
FIELD	451:4	451:4	16	nbits
LEAF_NODE	451:4	451:4	17	nbits
ASSIGN_OP	451:10	451:10	15	=
LEAF_NODE	451:10	451:10	16	=
RVAL	451:12	451:12	15	BITS_MIN
FIELD	451:12	451:12	16	BITS_MIN
LEAF_NODE	451:12	451:12	17	BITS_MIN
LEAF_NODE	451:20	451:20	13	;
EXPR_STATEMENT	452:4	452:33	12	nbitsmask = MAXCODE ( BITS_MIN ) ;
EXPR	452:4	452:4	13	nbitsmask = MAXCODE ( BITS_MIN )
ASSIGN	452:4	452:16	14	nbitsmask = MAXCODE ( BITS_MIN )
LVAL	452:4	452:4	15	nbitsmask
FIELD	452:4	452:4	16	nbitsmask
LEAF_NODE	452:4	452:4	17	nbitsmask
ASSIGN_OP	452:14	452:14	15	=
LEAF_NODE	452:14	452:14	16	=
RVAL	452:16	452:16	15	MAXCODE ( BITS_MIN )
FUNCTION_CALL	452:16	452:32	16	MAXCODE ( BITS_MIN )
CALLEE	452:16	452:16	17	MAXCODE
LEAF_NODE	452:16	452:16	18	MAXCODE
LEAF_NODE	452:23	452:23	17	(
ARGUMENT	452:24	452:24	17	BITS_MIN
FIELD	452:24	452:24	18	BITS_MIN
LEAF_NODE	452:24	452:24	19	BITS_MIN
LEAF_NODE	452:32	452:32	17	)
LEAF_NODE	452:33	452:33	13	;
EXPR_STATEMENT	453:4	453:44	12	maxcodep = sp -> dec_codetab + nbitsmask - 1 ;
EXPR	453:4	453:4	13	maxcodep = sp -> dec_codetab + nbitsmask - 1
ASSIGN	453:4	453:15	14	maxcodep = sp -> dec_codetab + nbitsmask - 1
LVAL	453:4	453:4	15	maxcodep
FIELD	453:4	453:4	16	maxcodep
LEAF_NODE	453:4	453:4	17	maxcodep
ASSIGN_OP	453:13	453:13	15	=
LEAF_NODE	453:13	453:13	16	=
RVAL	453:15	453:43	15	sp -> dec_codetab + nbitsmask - 1
FIELD	453:15	453:19	16	sp -> dec_codetab
LEAF_NODE	453:15	453:15	17	sp
LEAF_NODE	453:17	453:17	17	->
LEAF_NODE	453:19	453:19	17	dec_codetab
LEAF_NODE	453:31	453:31	16	+
FIELD	453:33	453:33	16	nbitsmask
LEAF_NODE	453:33	453:33	17	nbitsmask
LEAF_NODE	453:42	453:42	16	-
FIELD	453:43	453:43	16	1
LEAF_NODE	453:43	453:43	17	1
LEAF_NODE	453:44	453:44	13	;
EXPR_STATEMENT	454:4	454:44	12	NextCode ( tif , sp , bp , code , GetNextCode ) ;
EXPR	454:4	454:4	13	NextCode ( tif , sp , bp , code , GetNextCode )
FUNCTION_CALL	454:4	454:43	14	NextCode ( tif , sp , bp , code , GetNextCode )
CALLEE	454:4	454:4	15	NextCode
LEAF_NODE	454:4	454:4	16	NextCode
LEAF_NODE	454:12	454:12	15	(
ARGUMENT	454:13	454:13	15	tif
FIELD	454:13	454:13	16	tif
LEAF_NODE	454:13	454:13	17	tif
LEAF_NODE	454:16	454:16	15	,
ARGUMENT	454:18	454:18	15	sp
FIELD	454:18	454:18	16	sp
LEAF_NODE	454:18	454:18	17	sp
LEAF_NODE	454:20	454:20	15	,
ARGUMENT	454:22	454:22	15	bp
FIELD	454:22	454:22	16	bp
LEAF_NODE	454:22	454:22	17	bp
LEAF_NODE	454:24	454:24	15	,
ARGUMENT	454:26	454:26	15	code
FIELD	454:26	454:26	16	code
LEAF_NODE	454:26	454:26	17	code
LEAF_NODE	454:30	454:30	15	,
ARGUMENT	454:32	454:32	15	GetNextCode
FIELD	454:32	454:32	16	GetNextCode
LEAF_NODE	454:32	454:32	17	GetNextCode
LEAF_NODE	454:43	454:43	15	)
LEAF_NODE	454:44	454:44	13	;
LEAF_NODE	455:3	455:3	11	}
LEAF_NODE	455:31	455:31	9	;
SELECTION	456:3	457:4	9	
KEYWORD	456:3	456:3	10	if
LEAF_NODE	456:3	456:3	11	if
LEAF_NODE	456:6	456:6	10	(
CONDITION	456:7	456:7	10	code == CODE_EOI
EXPR	456:7	456:15	11	code == CODE_EOI
FIELD	456:7	456:7	12	code
LEAF_NODE	456:7	456:7	13	code
EQ_OPERATOR	456:12	456:12	12	==
LEAF_NODE	456:12	456:12	13	==
FIELD	456:15	456:15	12	CODE_EOI
LEAF_NODE	456:15	456:15	13	CODE_EOI
LEAF_NODE	456:23	456:23	10	)
STATEMENTS	457:4	457:4	10	
JUMP_STATEMENT	457:4	457:9	11	break DESTINATION ;
KEYWORD	457:4	457:4	12	break
LEAF_NODE	457:4	457:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	457:9	457:9	12	;
SELECTION	458:3	458:26	9	
KEYWORD	458:3	458:3	10	if
LEAF_NODE	458:3	458:3	11	if
LEAF_NODE	458:6	458:6	10	(
CONDITION	458:7	458:7	10	code > CODE_CLEAR
EXPR	458:7	458:14	11	code > CODE_CLEAR
FIELD	458:7	458:7	12	code
LEAF_NODE	458:7	458:7	13	code
REL_OPERATOR	458:12	458:12	12	>
LEAF_NODE	458:12	458:12	13	>
FIELD	458:14	458:14	12	CODE_CLEAR
LEAF_NODE	458:14	458:14	13	CODE_CLEAR
LEAF_NODE	458:24	458:24	10	)
STATEMENTS	458:26	463:3	10	
LEAF_NODE	458:26	458:26	11	{
STATEMENTS	459:4	462:4	11	
EXPR_STATEMENT	459:4	461:23	12	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "LZWDecode: Corrupted LZW table at scanline %d" , tif -> tif_row ) ;
EXPR	459:4	459:4	13	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "LZWDecode: Corrupted LZW table at scanline %d" , tif -> tif_row )
FUNCTION_CALL	459:4	461:22	14	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "LZWDecode: Corrupted LZW table at scanline %d" , tif -> tif_row )
CALLEE	459:4	459:4	15	TIFFErrorExt
LEAF_NODE	459:4	459:4	16	TIFFErrorExt
LEAF_NODE	459:16	459:16	15	(
ARGUMENT	459:17	459:17	15	tif -> tif_clientdata
FIELD	459:17	459:22	16	tif -> tif_clientdata
LEAF_NODE	459:17	459:17	17	tif
LEAF_NODE	459:20	459:20	17	->
LEAF_NODE	459:22	459:22	17	tif_clientdata
LEAF_NODE	459:36	459:36	15	,
ARGUMENT	459:38	459:38	15	tif -> tif_name
FIELD	459:38	459:43	16	tif -> tif_name
LEAF_NODE	459:38	459:38	17	tif
LEAF_NODE	459:41	459:41	17	->
LEAF_NODE	459:43	459:43	17	tif_name
LEAF_NODE	459:51	459:51	15	,
ARGUMENT	460:4	460:4	15	"LZWDecode: Corrupted LZW table at scanline %d"
FIELD	460:4	460:4	16	"LZWDecode: Corrupted LZW table at scanline %d"
LEAF_NODE	460:4	460:4	17	"LZWDecode: Corrupted LZW table at scanline %d"
LEAF_NODE	460:51	460:51	15	,
ARGUMENT	461:10	461:10	15	tif -> tif_row
FIELD	461:10	461:15	16	tif -> tif_row
LEAF_NODE	461:10	461:10	17	tif
LEAF_NODE	461:13	461:13	17	->
LEAF_NODE	461:15	461:15	17	tif_row
LEAF_NODE	461:22	461:22	15	)
LEAF_NODE	461:23	461:23	13	;
JUMP_STATEMENT	462:4	462:14	12	return ( 0 ) ;
KEYWORD	462:4	462:4	13	return
LEAF_NODE	462:4	462:4	14	return
DESTINATION	462:11	462:11	13	( 0 )
EXPR	462:11	462:13	14	( 0 )
LEAF_NODE	462:11	462:11	15	(
FIELD	462:12	462:12	15	0
LEAF_NODE	462:12	462:12	16	0
LEAF_NODE	462:13	462:13	15	)
LEAF_NODE	462:14	462:14	13	;
LEAF_NODE	463:3	463:3	11	}
EXPR_STATEMENT	464:3	464:21	9	* op ++ = ( char ) code ;
EXPR	464:3	464:3	10	* op ++ = ( char ) code
ASSIGN	464:3	464:11	11	* op ++ = ( char ) code
LVAL	464:3	464:3	12	* op ++
UNARY_EXPR	464:3	464:4	13	* op ++
UNARY_OPERATOR	464:3	464:3	14	*
LEAF_NODE	464:3	464:3	15	*
FIELD	464:4	464:6	14	op ++
LEAF_NODE	464:4	464:4	15	op
LEAF_NODE	464:6	464:6	15	++
ASSIGN_OP	464:9	464:9	12	=
LEAF_NODE	464:9	464:9	13	=
RVAL	464:11	464:17	12	( char ) code
LEAF_NODE	464:11	464:11	13	(
TYPE_NAME	464:12	464:12	13	char
LEAF_NODE	464:12	464:12	14	char
LEAF_NODE	464:16	464:16	13	)
FIELD	464:17	464:17	13	code
LEAF_NODE	464:17	464:17	14	code
LEAF_NODE	464:21	464:21	10	;
EXPR_STATEMENT	465:3	465:8	9	occ -- ;
EXPR	465:3	465:3	10	occ --
FIELD	465:3	465:6	11	occ --
LEAF_NODE	465:3	465:3	12	occ
LEAF_NODE	465:6	465:6	12	--
LEAF_NODE	465:8	465:8	10	;
EXPR_STATEMENT	466:3	466:36	9	oldcodep = sp -> dec_codetab + code ;
EXPR	466:3	466:3	10	oldcodep = sp -> dec_codetab + code
ASSIGN	466:3	466:14	11	oldcodep = sp -> dec_codetab + code
LVAL	466:3	466:3	12	oldcodep
FIELD	466:3	466:3	13	oldcodep
LEAF_NODE	466:3	466:3	14	oldcodep
ASSIGN_OP	466:12	466:12	12	=
LEAF_NODE	466:12	466:12	13	=
RVAL	466:14	466:32	12	sp -> dec_codetab + code
FIELD	466:14	466:18	13	sp -> dec_codetab
LEAF_NODE	466:14	466:14	14	sp
LEAF_NODE	466:16	466:16	14	->
LEAF_NODE	466:18	466:18	14	dec_codetab
LEAF_NODE	466:30	466:30	13	+
FIELD	466:32	466:32	13	code
LEAF_NODE	466:32	466:32	14	code
LEAF_NODE	466:36	466:36	10	;
JUMP_STATEMENT	467:3	467:11	9	continue DESTINATION ;
KEYWORD	467:3	467:3	10	continue
LEAF_NODE	467:3	467:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	467:11	467:11	10	;
LEAF_NODE	468:2	468:2	8	}
EXPR_STATEMENT	469:2	469:32	6	codep = sp -> dec_codetab + code ;
EXPR	469:2	469:2	7	codep = sp -> dec_codetab + code
ASSIGN	469:2	469:10	8	codep = sp -> dec_codetab + code
LVAL	469:2	469:2	9	codep
FIELD	469:2	469:2	10	codep
LEAF_NODE	469:2	469:2	11	codep
ASSIGN_OP	469:8	469:8	9	=
LEAF_NODE	469:8	469:8	10	=
RVAL	469:10	469:28	9	sp -> dec_codetab + code
FIELD	469:10	469:14	10	sp -> dec_codetab
LEAF_NODE	469:10	469:10	11	sp
LEAF_NODE	469:12	469:12	11	->
LEAF_NODE	469:14	469:14	11	dec_codetab
LEAF_NODE	469:26	469:26	10	+
FIELD	469:28	469:28	10	code
LEAF_NODE	469:28	469:28	11	code
LEAF_NODE	469:32	469:32	7	;
SELECTION	474:2	475:44	6	
KEYWORD	474:2	474:2	7	if
LEAF_NODE	474:2	474:2	8	if
LEAF_NODE	474:5	474:5	7	(
CONDITION	474:6	474:6	7	free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ]
EXPR	474:6	474:6	8	free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ]
OR	474:6	475:6	9	free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ]
EXPR	474:6	474:18	10	free_entp < & sp -> dec_codetab [ 0 ]
FIELD	474:6	474:6	11	free_entp
LEAF_NODE	474:6	474:6	12	free_entp
REL_OPERATOR	474:16	474:16	11	<
LEAF_NODE	474:16	474:16	12	<
UNARY_EXPR	474:18	474:19	11	& sp -> dec_codetab [ 0 ]
UNARY_OPERATOR	474:18	474:18	12	&
LEAF_NODE	474:18	474:18	13	&
FIELD	474:19	474:36	12	sp -> dec_codetab [ 0 ]
LEAF_NODE	474:19	474:19	13	sp
LEAF_NODE	474:21	474:21	13	->
LEAF_NODE	474:23	474:23	13	dec_codetab
LEAF_NODE	474:34	474:34	13	[
EXPR	474:35	474:35	13	0
FIELD	474:35	474:35	14	0
LEAF_NODE	474:35	474:35	15	0
LEAF_NODE	474:36	474:36	13	]
LEAF_NODE	474:38	474:38	10	||
EXPR	475:6	475:19	10	free_entp >= & sp -> dec_codetab [ CSIZE ]
FIELD	475:6	475:6	11	free_entp
LEAF_NODE	475:6	475:6	12	free_entp
REL_OPERATOR	475:16	475:16	11	>=
LEAF_NODE	475:16	475:16	12	>=
UNARY_EXPR	475:19	475:20	11	& sp -> dec_codetab [ CSIZE ]
UNARY_OPERATOR	475:19	475:19	12	&
LEAF_NODE	475:19	475:19	13	&
FIELD	475:20	475:41	12	sp -> dec_codetab [ CSIZE ]
LEAF_NODE	475:20	475:20	13	sp
LEAF_NODE	475:22	475:22	13	->
LEAF_NODE	475:24	475:24	13	dec_codetab
LEAF_NODE	475:35	475:35	13	[
EXPR	475:36	475:36	13	CSIZE
FIELD	475:36	475:36	14	CSIZE
LEAF_NODE	475:36	475:36	15	CSIZE
LEAF_NODE	475:41	475:41	13	]
LEAF_NODE	475:42	475:42	7	)
STATEMENTS	475:44	480:2	7	
LEAF_NODE	475:44	475:44	8	{
STATEMENTS	476:3	479:3	8	
EXPR_STATEMENT	476:3	478:20	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row ) ;
EXPR	476:3	476:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row )
FUNCTION_CALL	476:3	478:19	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row )
CALLEE	476:3	476:3	12	TIFFErrorExt
LEAF_NODE	476:3	476:3	13	TIFFErrorExt
LEAF_NODE	476:15	476:15	12	(
ARGUMENT	476:16	476:16	12	tif -> tif_clientdata
FIELD	476:16	476:21	13	tif -> tif_clientdata
LEAF_NODE	476:16	476:16	14	tif
LEAF_NODE	476:19	476:19	14	->
LEAF_NODE	476:21	476:21	14	tif_clientdata
LEAF_NODE	476:35	476:35	12	,
ARGUMENT	476:37	476:37	12	module
FIELD	476:37	476:37	13	module
LEAF_NODE	476:37	476:37	14	module
LEAF_NODE	476:43	476:43	12	,
ARGUMENT	477:7	477:7	12	"Corrupted LZW table at scanline %d"
FIELD	477:7	477:7	13	"Corrupted LZW table at scanline %d"
LEAF_NODE	477:7	477:7	14	"Corrupted LZW table at scanline %d"
LEAF_NODE	477:43	477:43	12	,
ARGUMENT	478:7	478:7	12	tif -> tif_row
FIELD	478:7	478:12	13	tif -> tif_row
LEAF_NODE	478:7	478:7	14	tif
LEAF_NODE	478:10	478:10	14	->
LEAF_NODE	478:12	478:12	14	tif_row
LEAF_NODE	478:19	478:19	12	)
LEAF_NODE	478:20	478:20	10	;
JUMP_STATEMENT	479:3	479:13	9	return ( 0 ) ;
KEYWORD	479:3	479:3	10	return
LEAF_NODE	479:3	479:3	11	return
DESTINATION	479:10	479:10	10	( 0 )
EXPR	479:10	479:12	11	( 0 )
LEAF_NODE	479:10	479:10	12	(
FIELD	479:11	479:11	12	0
LEAF_NODE	479:11	479:11	13	0
LEAF_NODE	479:12	479:12	12	)
LEAF_NODE	479:13	479:13	10	;
LEAF_NODE	480:2	480:2	8	}
EXPR_STATEMENT	482:2	482:28	6	free_entp -> next = oldcodep ;
EXPR	482:2	482:2	7	free_entp -> next = oldcodep
ASSIGN	482:2	482:20	8	free_entp -> next = oldcodep
LVAL	482:2	482:2	9	free_entp -> next
FIELD	482:2	482:13	10	free_entp -> next
LEAF_NODE	482:2	482:2	11	free_entp
LEAF_NODE	482:11	482:11	11	->
LEAF_NODE	482:13	482:13	11	next
ASSIGN_OP	482:18	482:18	9	=
LEAF_NODE	482:18	482:18	10	=
RVAL	482:20	482:20	9	oldcodep
FIELD	482:20	482:20	10	oldcodep
LEAF_NODE	482:20	482:20	11	oldcodep
LEAF_NODE	482:28	482:28	7	;
SELECTION	483:2	484:50	6	
KEYWORD	483:2	483:2	7	if
LEAF_NODE	483:2	483:2	8	if
LEAF_NODE	483:5	483:5	7	(
CONDITION	483:6	483:6	7	free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
EXPR	483:6	483:6	8	free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
OR	483:6	484:6	9	free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
EXPR	483:6	483:24	10	free_entp -> next < & sp -> dec_codetab [ 0 ]
FIELD	483:6	483:17	11	free_entp -> next
LEAF_NODE	483:6	483:6	12	free_entp
LEAF_NODE	483:15	483:15	12	->
LEAF_NODE	483:17	483:17	12	next
REL_OPERATOR	483:22	483:22	11	<
LEAF_NODE	483:22	483:22	12	<
UNARY_EXPR	483:24	483:25	11	& sp -> dec_codetab [ 0 ]
UNARY_OPERATOR	483:24	483:24	12	&
LEAF_NODE	483:24	483:24	13	&
FIELD	483:25	483:42	12	sp -> dec_codetab [ 0 ]
LEAF_NODE	483:25	483:25	13	sp
LEAF_NODE	483:27	483:27	13	->
LEAF_NODE	483:29	483:29	13	dec_codetab
LEAF_NODE	483:40	483:40	13	[
EXPR	483:41	483:41	13	0
FIELD	483:41	483:41	14	0
LEAF_NODE	483:41	483:41	15	0
LEAF_NODE	483:42	483:42	13	]
LEAF_NODE	483:44	483:44	10	||
EXPR	484:6	484:25	10	free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
FIELD	484:6	484:17	11	free_entp -> next
LEAF_NODE	484:6	484:6	12	free_entp
LEAF_NODE	484:15	484:15	12	->
LEAF_NODE	484:17	484:17	12	next
REL_OPERATOR	484:22	484:22	11	>=
LEAF_NODE	484:22	484:22	12	>=
UNARY_EXPR	484:25	484:26	11	& sp -> dec_codetab [ CSIZE ]
UNARY_OPERATOR	484:25	484:25	12	&
LEAF_NODE	484:25	484:25	13	&
FIELD	484:26	484:47	12	sp -> dec_codetab [ CSIZE ]
LEAF_NODE	484:26	484:26	13	sp
LEAF_NODE	484:28	484:28	13	->
LEAF_NODE	484:30	484:30	13	dec_codetab
LEAF_NODE	484:41	484:41	13	[
EXPR	484:42	484:42	13	CSIZE
FIELD	484:42	484:42	14	CSIZE
LEAF_NODE	484:42	484:42	15	CSIZE
LEAF_NODE	484:47	484:47	13	]
LEAF_NODE	484:48	484:48	7	)
STATEMENTS	484:50	489:2	7	
LEAF_NODE	484:50	484:50	8	{
STATEMENTS	485:3	488:3	8	
EXPR_STATEMENT	485:3	487:20	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row ) ;
EXPR	485:3	485:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row )
FUNCTION_CALL	485:3	487:19	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row )
CALLEE	485:3	485:3	12	TIFFErrorExt
LEAF_NODE	485:3	485:3	13	TIFFErrorExt
LEAF_NODE	485:15	485:15	12	(
ARGUMENT	485:16	485:16	12	tif -> tif_clientdata
FIELD	485:16	485:21	13	tif -> tif_clientdata
LEAF_NODE	485:16	485:16	14	tif
LEAF_NODE	485:19	485:19	14	->
LEAF_NODE	485:21	485:21	14	tif_clientdata
LEAF_NODE	485:35	485:35	12	,
ARGUMENT	485:37	485:37	12	module
FIELD	485:37	485:37	13	module
LEAF_NODE	485:37	485:37	14	module
LEAF_NODE	485:43	485:43	12	,
ARGUMENT	486:7	486:7	12	"Corrupted LZW table at scanline %d"
FIELD	486:7	486:7	13	"Corrupted LZW table at scanline %d"
LEAF_NODE	486:7	486:7	14	"Corrupted LZW table at scanline %d"
LEAF_NODE	486:43	486:43	12	,
ARGUMENT	487:7	487:7	12	tif -> tif_row
FIELD	487:7	487:12	13	tif -> tif_row
LEAF_NODE	487:7	487:7	14	tif
LEAF_NODE	487:10	487:10	14	->
LEAF_NODE	487:12	487:12	14	tif_row
LEAF_NODE	487:19	487:19	12	)
LEAF_NODE	487:20	487:20	10	;
JUMP_STATEMENT	488:3	488:13	9	return ( 0 ) ;
KEYWORD	488:3	488:3	10	return
LEAF_NODE	488:3	488:3	11	return
DESTINATION	488:10	488:10	10	( 0 )
EXPR	488:10	488:12	11	( 0 )
LEAF_NODE	488:10	488:10	12	(
FIELD	488:11	488:11	12	0
LEAF_NODE	488:11	488:11	13	0
LEAF_NODE	488:12	488:12	12	)
LEAF_NODE	488:13	488:13	10	;
LEAF_NODE	489:2	489:2	8	}
EXPR_STATEMENT	490:2	490:51	6	free_entp -> firstchar = free_entp -> next -> firstchar ;
EXPR	490:2	490:2	7	free_entp -> firstchar = free_entp -> next -> firstchar
ASSIGN	490:2	490:25	8	free_entp -> firstchar = free_entp -> next -> firstchar
LVAL	490:2	490:2	9	free_entp -> firstchar
FIELD	490:2	490:13	10	free_entp -> firstchar
LEAF_NODE	490:2	490:2	11	free_entp
LEAF_NODE	490:11	490:11	11	->
LEAF_NODE	490:13	490:13	11	firstchar
ASSIGN_OP	490:23	490:23	9	=
LEAF_NODE	490:23	490:23	10	=
RVAL	490:25	490:25	9	free_entp -> next -> firstchar
FIELD	490:25	490:42	10	free_entp -> next -> firstchar
LEAF_NODE	490:25	490:25	11	free_entp
LEAF_NODE	490:34	490:34	11	->
LEAF_NODE	490:36	490:36	11	next
LEAF_NODE	490:40	490:40	11	->
LEAF_NODE	490:42	490:42	11	firstchar
LEAF_NODE	490:51	490:51	7	;
EXPR_STATEMENT	491:2	491:47	6	free_entp -> length = free_entp -> next -> length + 1 ;
EXPR	491:2	491:2	7	free_entp -> length = free_entp -> next -> length + 1
ASSIGN	491:2	491:22	8	free_entp -> length = free_entp -> next -> length + 1
LVAL	491:2	491:2	9	free_entp -> length
FIELD	491:2	491:13	10	free_entp -> length
LEAF_NODE	491:2	491:2	11	free_entp
LEAF_NODE	491:11	491:11	11	->
LEAF_NODE	491:13	491:13	11	length
ASSIGN_OP	491:20	491:20	9	=
LEAF_NODE	491:20	491:20	10	=
RVAL	491:22	491:46	9	free_entp -> next -> length + 1
FIELD	491:22	491:39	10	free_entp -> next -> length
LEAF_NODE	491:22	491:22	11	free_entp
LEAF_NODE	491:31	491:31	11	->
LEAF_NODE	491:33	491:33	11	next
LEAF_NODE	491:37	491:37	11	->
LEAF_NODE	491:39	491:39	11	length
LEAF_NODE	491:45	491:45	10	+
FIELD	491:46	491:46	10	1
LEAF_NODE	491:46	491:46	11	1
LEAF_NODE	491:47	491:47	7	;
EXPR_STATEMENT	492:2	493:45	6	free_entp -> value = ( codep < free_entp ) ? codep -> firstchar : free_entp -> firstchar ;
EXPR	492:2	492:2	7	free_entp -> value = ( codep < free_entp ) ? codep -> firstchar : free_entp -> firstchar
ASSIGN	492:2	492:21	8	free_entp -> value = ( codep < free_entp ) ? codep -> firstchar : free_entp -> firstchar
LVAL	492:2	492:2	9	free_entp -> value
FIELD	492:2	492:13	10	free_entp -> value
LEAF_NODE	492:2	492:2	11	free_entp
LEAF_NODE	492:11	492:11	11	->
LEAF_NODE	492:13	492:13	11	value
ASSIGN_OP	492:19	492:19	9	=
LEAF_NODE	492:19	492:19	10	=
RVAL	492:21	492:21	9	( codep < free_entp ) ? codep -> firstchar : free_entp -> firstchar
COND_EXPR	492:21	493:25	10	( codep < free_entp ) ? codep -> firstchar : free_entp -> firstchar
CONDITION	492:21	492:39	11	( codep < free_entp )
LEAF_NODE	492:21	492:21	12	(
FIELD	492:22	492:22	12	codep
LEAF_NODE	492:22	492:22	13	codep
REL_OPERATOR	492:28	492:28	12	<
LEAF_NODE	492:28	492:28	13	<
FIELD	492:30	492:30	12	free_entp
LEAF_NODE	492:30	492:30	13	free_entp
LEAF_NODE	492:39	492:39	12	)
LEAF_NODE	492:41	492:41	11	?
EXPR	493:6	493:6	11	codep -> firstchar
FIELD	493:6	493:13	12	codep -> firstchar
LEAF_NODE	493:6	493:6	13	codep
LEAF_NODE	493:11	493:11	13	->
LEAF_NODE	493:13	493:13	13	firstchar
LEAF_NODE	493:23	493:23	11	:
FIELD	493:25	493:36	11	free_entp -> firstchar
LEAF_NODE	493:25	493:25	12	free_entp
LEAF_NODE	493:34	493:34	12	->
LEAF_NODE	493:36	493:36	12	firstchar
LEAF_NODE	493:45	493:45	7	;
SELECTION	494:2	494:30	6	
KEYWORD	494:2	494:2	7	if
LEAF_NODE	494:2	494:2	8	if
LEAF_NODE	494:5	494:5	7	(
CONDITION	494:6	494:6	7	++ free_entp > maxcodep
EXPR	494:6	494:20	8	++ free_entp > maxcodep
LEAF_NODE	494:6	494:6	9	++
FIELD	494:8	494:8	9	free_entp
LEAF_NODE	494:8	494:8	10	free_entp
REL_OPERATOR	494:18	494:18	9	>
LEAF_NODE	494:18	494:18	10	>
FIELD	494:20	494:20	9	maxcodep
LEAF_NODE	494:20	494:20	10	maxcodep
LEAF_NODE	494:28	494:28	7	)
STATEMENTS	494:30	499:2	7	
LEAF_NODE	494:30	494:30	8	{
STATEMENTS	495:3	498:3	8	
SELECTION	495:3	496:4	9	
KEYWORD	495:3	495:3	10	if
LEAF_NODE	495:3	495:3	11	if
LEAF_NODE	495:6	495:6	10	(
CONDITION	495:7	495:7	10	++ nbits > BITS_MAX
EXPR	495:7	495:17	11	++ nbits > BITS_MAX
LEAF_NODE	495:7	495:7	12	++
FIELD	495:9	495:9	12	nbits
LEAF_NODE	495:9	495:9	13	nbits
REL_OPERATOR	495:15	495:15	12	>
LEAF_NODE	495:15	495:15	13	>
FIELD	495:17	495:17	12	BITS_MAX
LEAF_NODE	495:17	495:17	13	BITS_MAX
LEAF_NODE	495:25	495:25	10	)
STATEMENTS	496:4	496:4	10	
EXPR_STATEMENT	496:4	496:20	11	nbits = BITS_MAX ;
EXPR	496:4	496:4	12	nbits = BITS_MAX
ASSIGN	496:4	496:12	13	nbits = BITS_MAX
LVAL	496:4	496:4	14	nbits
FIELD	496:4	496:4	15	nbits
LEAF_NODE	496:4	496:4	16	nbits
ASSIGN_OP	496:10	496:10	14	=
LEAF_NODE	496:10	496:10	15	=
RVAL	496:12	496:12	14	BITS_MAX
FIELD	496:12	496:12	15	BITS_MAX
LEAF_NODE	496:12	496:12	16	BITS_MAX
LEAF_NODE	496:20	496:20	12	;
EXPR_STATEMENT	497:3	497:29	9	nbitsmask = MAXCODE ( nbits ) ;
EXPR	497:3	497:3	10	nbitsmask = MAXCODE ( nbits )
ASSIGN	497:3	497:15	11	nbitsmask = MAXCODE ( nbits )
LVAL	497:3	497:3	12	nbitsmask
FIELD	497:3	497:3	13	nbitsmask
LEAF_NODE	497:3	497:3	14	nbitsmask
ASSIGN_OP	497:13	497:13	12	=
LEAF_NODE	497:13	497:13	13	=
RVAL	497:15	497:15	12	MAXCODE ( nbits )
FUNCTION_CALL	497:15	497:28	13	MAXCODE ( nbits )
CALLEE	497:15	497:15	14	MAXCODE
LEAF_NODE	497:15	497:15	15	MAXCODE
LEAF_NODE	497:22	497:22	14	(
ARGUMENT	497:23	497:23	14	nbits
FIELD	497:23	497:23	15	nbits
LEAF_NODE	497:23	497:23	16	nbits
LEAF_NODE	497:28	497:28	14	)
LEAF_NODE	497:29	497:29	10	;
EXPR_STATEMENT	498:3	498:43	9	maxcodep = sp -> dec_codetab + nbitsmask - 1 ;
EXPR	498:3	498:3	10	maxcodep = sp -> dec_codetab + nbitsmask - 1
ASSIGN	498:3	498:14	11	maxcodep = sp -> dec_codetab + nbitsmask - 1
LVAL	498:3	498:3	12	maxcodep
FIELD	498:3	498:3	13	maxcodep
LEAF_NODE	498:3	498:3	14	maxcodep
ASSIGN_OP	498:12	498:12	12	=
LEAF_NODE	498:12	498:12	13	=
RVAL	498:14	498:42	12	sp -> dec_codetab + nbitsmask - 1
FIELD	498:14	498:18	13	sp -> dec_codetab
LEAF_NODE	498:14	498:14	14	sp
LEAF_NODE	498:16	498:16	14	->
LEAF_NODE	498:18	498:18	14	dec_codetab
LEAF_NODE	498:30	498:30	13	+
FIELD	498:32	498:32	13	nbitsmask
LEAF_NODE	498:32	498:32	14	nbitsmask
LEAF_NODE	498:41	498:41	13	-
FIELD	498:42	498:42	13	1
LEAF_NODE	498:42	498:42	14	1
LEAF_NODE	498:43	498:43	10	;
LEAF_NODE	499:2	499:2	8	}
EXPR_STATEMENT	500:2	500:18	6	oldcodep = codep ;
EXPR	500:2	500:2	7	oldcodep = codep
ASSIGN	500:2	500:13	8	oldcodep = codep
LVAL	500:2	500:2	9	oldcodep
FIELD	500:2	500:2	10	oldcodep
LEAF_NODE	500:2	500:2	11	oldcodep
ASSIGN_OP	500:11	500:11	9	=
LEAF_NODE	500:11	500:11	10	=
RVAL	500:13	500:13	9	codep
FIELD	500:13	500:13	10	codep
LEAF_NODE	500:13	500:13	11	codep
LEAF_NODE	500:18	500:18	7	;
SELECTION	501:2	501:19	6	
KEYWORD	501:2	501:2	7	if
LEAF_NODE	501:2	501:2	8	if
LEAF_NODE	501:5	501:5	7	(
CONDITION	501:6	501:6	7	code >= 256
EXPR	501:6	501:14	8	code >= 256
FIELD	501:6	501:6	9	code
LEAF_NODE	501:6	501:6	10	code
REL_OPERATOR	501:11	501:11	9	>=
LEAF_NODE	501:11	501:11	10	>=
FIELD	501:14	501:14	9	256
LEAF_NODE	501:14	501:14	10	256
LEAF_NODE	501:17	501:17	7	)
STATEMENTS	501:19	552:2	7	
LEAF_NODE	501:19	501:19	8	{
STATEMENTS	506:3	551:3	8	
SELECTION	506:3	506:26	9	
KEYWORD	506:3	506:3	10	if
LEAF_NODE	506:3	506:3	11	if
LEAF_NODE	506:5	506:5	10	(
CONDITION	506:6	506:6	10	codep -> length == 0
EXPR	506:6	506:23	11	codep -> length == 0
FIELD	506:6	506:13	12	codep -> length
LEAF_NODE	506:6	506:6	13	codep
LEAF_NODE	506:11	506:11	13	->
LEAF_NODE	506:13	506:13	13	length
EQ_OPERATOR	506:20	506:20	12	==
LEAF_NODE	506:20	506:20	13	==
FIELD	506:23	506:23	12	0
LEAF_NODE	506:23	506:23	13	0
LEAF_NODE	506:24	506:24	10	)
STATEMENTS	506:26	512:3	10	
LEAF_NODE	506:26	506:26	11	{
STATEMENTS	507:4	511:4	11	
LEAF_NODE	507:4	507:4	12	TIFFErrorExt
LEAF_NODE	507:16	507:16	12	(
LEAF_NODE	507:17	507:17	12	tif
LEAF_NODE	507:20	507:20	12	->
LEAF_NODE	507:22	507:22	12	tif_clientdata
LEAF_NODE	507:36	507:36	12	,
LEAF_NODE	507:38	507:38	12	module
LEAF_NODE	507:44	507:44	12	,
LEAF_NODE	508:8	508:8	12	"Wrong length of decoded string: "
LEAF_NODE	509:8	509:8	12	"data probably corrupted at scanline %d"
LEAF_NODE	509:48	509:48	12	,
LEAF_NODE	510:8	510:8	12	tif
LEAF_NODE	510:11	510:11	12	->
LEAF_NODE	510:13	510:13	12	tif_row
LEAF_NODE	510:20	510:20	12	)
LEAF_NODE	510:21	510:21	12	;
JUMP_STATEMENT	511:4	511:14	12	return ( 0 ) ;
KEYWORD	511:4	511:4	13	return
LEAF_NODE	511:4	511:4	14	return
DESTINATION	511:11	511:11	13	( 0 )
EXPR	511:11	511:13	14	( 0 )
LEAF_NODE	511:11	511:11	15	(
FIELD	511:12	511:12	15	0
LEAF_NODE	511:12	511:12	16	0
LEAF_NODE	511:13	511:13	15	)
LEAF_NODE	511:14	511:14	13	;
LEAF_NODE	512:3	512:3	11	}
SELECTION	513:3	513:28	9	
KEYWORD	513:3	513:3	10	if
LEAF_NODE	513:3	513:3	11	if
LEAF_NODE	513:6	513:6	10	(
CONDITION	513:7	513:7	10	codep -> length > occ
EXPR	513:7	513:23	11	codep -> length > occ
FIELD	513:7	513:14	12	codep -> length
LEAF_NODE	513:7	513:7	13	codep
LEAF_NODE	513:12	513:12	13	->
LEAF_NODE	513:14	513:14	13	length
REL_OPERATOR	513:21	513:21	12	>
LEAF_NODE	513:21	513:21	13	>
FIELD	513:23	513:23	12	occ
LEAF_NODE	513:23	513:23	13	occ
LEAF_NODE	513:26	513:26	10	)
STATEMENTS	513:28	535:3	10	
LEAF_NODE	513:28	513:28	11	{
STATEMENTS	520:4	534:4	11	
EXPR_STATEMENT	520:4	520:25	12	sp -> dec_codep = codep ;
EXPR	520:4	520:4	13	sp -> dec_codep = codep
ASSIGN	520:4	520:20	14	sp -> dec_codep = codep
LVAL	520:4	520:4	15	sp -> dec_codep
FIELD	520:4	520:8	16	sp -> dec_codep
LEAF_NODE	520:4	520:4	17	sp
LEAF_NODE	520:6	520:6	17	->
LEAF_NODE	520:8	520:8	17	dec_codep
ASSIGN_OP	520:18	520:18	15	=
LEAF_NODE	520:18	520:18	16	=
RVAL	520:20	520:20	15	codep
FIELD	520:20	520:20	16	codep
LEAF_NODE	520:20	520:20	17	codep
LEAF_NODE	520:25	520:25	13	;
ITERATION	521:4	521:7	12	
KEYWORD	521:4	521:4	13	do
LEAF_NODE	521:4	521:4	14	do
LEAF_NODE	523:12	523:12	13	(
CONDITION	523:13	523:13	13	codep && codep -> length > occ
EXPR	523:13	523:13	14	codep && codep -> length > occ
AND	523:13	523:22	15	codep && codep -> length > occ
EXPR	523:13	523:13	16	codep
FIELD	523:13	523:13	17	codep
LEAF_NODE	523:13	523:13	18	codep
LEAF_NODE	523:19	523:19	16	&&
EXPR	523:22	523:38	16	codep -> length > occ
FIELD	523:22	523:29	17	codep -> length
LEAF_NODE	523:22	523:22	18	codep
LEAF_NODE	523:27	523:27	18	->
LEAF_NODE	523:29	523:29	18	length
REL_OPERATOR	523:36	523:36	17	>
LEAF_NODE	523:36	523:36	18	>
FIELD	523:38	523:38	17	occ
LEAF_NODE	523:38	523:38	18	occ
LEAF_NODE	523:41	523:41	13	)
STATEMENTS	521:7	523:4	13	
LEAF_NODE	521:7	521:7	14	{
STATEMENTS	522:5	522:5	14	
EXPR_STATEMENT	522:5	522:24	15	codep = codep -> next ;
EXPR	522:5	522:5	16	codep = codep -> next
ASSIGN	522:5	522:13	17	codep = codep -> next
LVAL	522:5	522:5	18	codep
FIELD	522:5	522:5	19	codep
LEAF_NODE	522:5	522:5	20	codep
ASSIGN_OP	522:11	522:11	18	=
LEAF_NODE	522:11	522:11	19	=
RVAL	522:13	522:13	18	codep -> next
FIELD	522:13	522:20	19	codep -> next
LEAF_NODE	522:13	522:13	20	codep
LEAF_NODE	522:18	522:18	20	->
LEAF_NODE	522:20	522:20	20	next
LEAF_NODE	522:24	522:24	16	;
LEAF_NODE	523:4	523:4	14	}
LEAF_NODE	523:42	523:42	12	;
SELECTION	524:4	524:15	12	
KEYWORD	524:4	524:4	13	if
LEAF_NODE	524:4	524:4	14	if
LEAF_NODE	524:7	524:7	13	(
CONDITION	524:8	524:8	13	codep
EXPR	524:8	524:8	14	codep
FIELD	524:8	524:8	15	codep
LEAF_NODE	524:8	524:8	16	codep
LEAF_NODE	524:13	524:13	13	)
STATEMENTS	524:15	533:4	13	
LEAF_NODE	524:15	524:15	14	{
STATEMENTS	525:5	531:5	14	
EXPR_STATEMENT	525:5	525:32	15	sp -> dec_restart = ( long ) occ ;
EXPR	525:5	525:5	16	sp -> dec_restart = ( long ) occ
ASSIGN	525:5	525:23	17	sp -> dec_restart = ( long ) occ
LVAL	525:5	525:5	18	sp -> dec_restart
FIELD	525:5	525:9	19	sp -> dec_restart
LEAF_NODE	525:5	525:5	20	sp
LEAF_NODE	525:7	525:7	20	->
LEAF_NODE	525:9	525:9	20	dec_restart
ASSIGN_OP	525:21	525:21	18	=
LEAF_NODE	525:21	525:21	19	=
RVAL	525:23	525:29	18	( long ) occ
LEAF_NODE	525:23	525:23	19	(
TYPE_NAME	525:24	525:24	19	long
LEAF_NODE	525:24	525:24	20	long
LEAF_NODE	525:28	525:28	19	)
FIELD	525:29	525:29	19	occ
LEAF_NODE	525:29	525:29	20	occ
LEAF_NODE	525:32	525:32	16	;
EXPR_STATEMENT	526:5	526:18	15	tp = op + occ ;
EXPR	526:5	526:5	16	tp = op + occ
ASSIGN	526:5	526:10	17	tp = op + occ
LVAL	526:5	526:5	18	tp
FIELD	526:5	526:5	19	tp
LEAF_NODE	526:5	526:5	20	tp
ASSIGN_OP	526:8	526:8	18	=
LEAF_NODE	526:8	526:8	19	=
RVAL	526:10	526:15	18	op + occ
FIELD	526:10	526:10	19	op
LEAF_NODE	526:10	526:10	20	op
LEAF_NODE	526:13	526:13	19	+
FIELD	526:15	526:15	19	occ
LEAF_NODE	526:15	526:15	20	occ
LEAF_NODE	526:18	526:18	16	;
ITERATION	527:5	527:9	15	
KEYWORD	527:5	527:5	16	do
LEAF_NODE	527:5	527:5	17	do
LEAF_NODE	530:14	530:14	16	(
CONDITION	530:15	530:15	16	-- occ && codep
EXPR	530:15	530:15	17	-- occ && codep
AND	530:15	530:24	18	-- occ && codep
EXPR	530:15	530:17	19	-- occ
LEAF_NODE	530:15	530:15	20	--
FIELD	530:17	530:17	20	occ
LEAF_NODE	530:17	530:17	21	occ
LEAF_NODE	530:21	530:21	19	&&
EXPR	530:24	530:24	19	codep
FIELD	530:24	530:24	20	codep
LEAF_NODE	530:24	530:24	21	codep
LEAF_NODE	530:29	530:29	16	)
STATEMENTS	527:9	530:5	16	
LEAF_NODE	527:9	527:9	17	{
STATEMENTS	528:6	529:6	17	
LEAF_NODE	528:6	528:6	18	*
EXPR_STATEMENT	528:7	528:26	18	-- tp = codep -> value ;
EXPR	528:7	528:7	19	-- tp = codep -> value
ASSIGN	528:7	528:14	20	-- tp = codep -> value
LVAL	528:7	528:9	21	-- tp
LEAF_NODE	528:7	528:7	22	--
FIELD	528:9	528:9	22	tp
LEAF_NODE	528:9	528:9	23	tp
ASSIGN_OP	528:12	528:12	21	=
LEAF_NODE	528:12	528:12	22	=
RVAL	528:14	528:14	21	codep -> value
FIELD	528:14	528:21	22	codep -> value
LEAF_NODE	528:14	528:14	23	codep
LEAF_NODE	528:19	528:19	23	->
LEAF_NODE	528:21	528:21	23	value
LEAF_NODE	528:26	528:26	19	;
EXPR_STATEMENT	529:6	529:25	18	codep = codep -> next ;
EXPR	529:6	529:6	19	codep = codep -> next
ASSIGN	529:6	529:14	20	codep = codep -> next
LVAL	529:6	529:6	21	codep
FIELD	529:6	529:6	22	codep
LEAF_NODE	529:6	529:6	23	codep
ASSIGN_OP	529:12	529:12	21	=
LEAF_NODE	529:12	529:12	22	=
RVAL	529:14	529:14	21	codep -> next
FIELD	529:14	529:21	22	codep -> next
LEAF_NODE	529:14	529:14	23	codep
LEAF_NODE	529:19	529:19	23	->
LEAF_NODE	529:21	529:21	23	next
LEAF_NODE	529:25	529:25	19	;
LEAF_NODE	530:5	530:5	17	}
LEAF_NODE	530:30	530:30	15	;
SELECTION	531:5	532:6	15	
KEYWORD	531:5	531:5	16	if
LEAF_NODE	531:5	531:5	17	if
LEAF_NODE	531:8	531:8	16	(
CONDITION	531:9	531:9	16	codep
EXPR	531:9	531:9	17	codep
FIELD	531:9	531:9	18	codep
LEAF_NODE	531:9	531:9	19	codep
LEAF_NODE	531:14	531:14	16	)
STATEMENTS	532:6	532:6	16	
EXPR_STATEMENT	532:6	532:27	17	codeLoop ( tif , module ) ;
EXPR	532:6	532:6	18	codeLoop ( tif , module )
FUNCTION_CALL	532:6	532:26	19	codeLoop ( tif , module )
CALLEE	532:6	532:6	20	codeLoop
LEAF_NODE	532:6	532:6	21	codeLoop
LEAF_NODE	532:14	532:14	20	(
ARGUMENT	532:15	532:15	20	tif
FIELD	532:15	532:15	21	tif
LEAF_NODE	532:15	532:15	22	tif
LEAF_NODE	532:18	532:18	20	,
ARGUMENT	532:20	532:20	20	module
FIELD	532:20	532:20	21	module
LEAF_NODE	532:20	532:20	22	module
LEAF_NODE	532:26	532:26	20	)
LEAF_NODE	532:27	532:27	18	;
LEAF_NODE	533:4	533:4	14	}
JUMP_STATEMENT	534:4	534:9	12	break DESTINATION ;
KEYWORD	534:4	534:4	13	break
LEAF_NODE	534:4	534:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	534:9	534:9	13	;
LEAF_NODE	535:3	535:3	11	}
EXPR_STATEMENT	536:3	536:22	9	len = codep -> length ;
EXPR	536:3	536:3	10	len = codep -> length
ASSIGN	536:3	536:9	11	len = codep -> length
LVAL	536:3	536:3	12	len
FIELD	536:3	536:3	13	len
LEAF_NODE	536:3	536:3	14	len
ASSIGN_OP	536:7	536:7	12	=
LEAF_NODE	536:7	536:7	13	=
RVAL	536:9	536:9	12	codep -> length
FIELD	536:9	536:16	13	codep -> length
LEAF_NODE	536:9	536:9	14	codep
LEAF_NODE	536:14	536:14	14	->
LEAF_NODE	536:16	536:16	14	length
LEAF_NODE	536:22	536:22	10	;
EXPR_STATEMENT	537:3	537:16	9	tp = op + len ;
EXPR	537:3	537:3	10	tp = op + len
ASSIGN	537:3	537:8	11	tp = op + len
LVAL	537:3	537:3	12	tp
FIELD	537:3	537:3	13	tp
LEAF_NODE	537:3	537:3	14	tp
ASSIGN_OP	537:6	537:6	12	=
LEAF_NODE	537:6	537:6	13	=
RVAL	537:8	537:13	12	op + len
FIELD	537:8	537:8	13	op
LEAF_NODE	537:8	537:8	14	op
LEAF_NODE	537:11	537:11	13	+
FIELD	537:13	537:13	13	len
LEAF_NODE	537:13	537:13	14	len
LEAF_NODE	537:16	537:16	10	;
ITERATION	538:3	538:6	9	
KEYWORD	538:3	538:3	10	do
LEAF_NODE	538:3	538:3	11	do
LEAF_NODE	544:11	544:11	10	(
CONDITION	544:12	544:12	10	codep && tp > op
EXPR	544:12	544:12	11	codep && tp > op
AND	544:12	544:21	12	codep && tp > op
EXPR	544:12	544:12	13	codep
FIELD	544:12	544:12	14	codep
LEAF_NODE	544:12	544:12	15	codep
LEAF_NODE	544:18	544:18	13	&&
EXPR	544:21	544:26	13	tp > op
FIELD	544:21	544:21	14	tp
LEAF_NODE	544:21	544:21	15	tp
REL_OPERATOR	544:24	544:24	14	>
LEAF_NODE	544:24	544:24	15	>
FIELD	544:26	544:26	14	op
LEAF_NODE	544:26	544:26	15	op
LEAF_NODE	544:28	544:28	10	)
STATEMENTS	538:6	544:3	10	
LEAF_NODE	538:6	538:6	11	{
STATEMENTS	539:4	543:4	11	
SIMPLE_DECL	539:4	539:9	12	int t ;
VAR_DECL	539:4	539:8	13	int t
TYPE	539:4	539:4	14	int
TYPE_NAME	539:4	539:4	15	int
LEAF_NODE	539:4	539:4	16	int
NAME	539:8	539:8	14	t
LEAF_NODE	539:8	539:8	15	t
LEAF_NODE	539:9	539:9	13	;
EXPR_STATEMENT	540:4	540:8	12	-- tp ;
EXPR	540:4	540:6	13	-- tp
LEAF_NODE	540:4	540:4	14	--
FIELD	540:6	540:6	14	tp
LEAF_NODE	540:6	540:6	15	tp
LEAF_NODE	540:8	540:8	13	;
EXPR_STATEMENT	541:4	541:20	12	t = codep -> value ;
EXPR	541:4	541:4	13	t = codep -> value
ASSIGN	541:4	541:8	14	t = codep -> value
LVAL	541:4	541:4	15	t
FIELD	541:4	541:4	16	t
LEAF_NODE	541:4	541:4	17	t
ASSIGN_OP	541:6	541:6	15	=
LEAF_NODE	541:6	541:6	16	=
RVAL	541:8	541:8	15	codep -> value
FIELD	541:8	541:15	16	codep -> value
LEAF_NODE	541:8	541:8	17	codep
LEAF_NODE	541:13	541:13	17	->
LEAF_NODE	541:15	541:15	17	value
LEAF_NODE	541:20	541:20	13	;
EXPR_STATEMENT	542:4	542:23	12	codep = codep -> next ;
EXPR	542:4	542:4	13	codep = codep -> next
ASSIGN	542:4	542:12	14	codep = codep -> next
LVAL	542:4	542:4	15	codep
FIELD	542:4	542:4	16	codep
LEAF_NODE	542:4	542:4	17	codep
ASSIGN_OP	542:10	542:10	15	=
LEAF_NODE	542:10	542:10	16	=
RVAL	542:12	542:12	15	codep -> next
FIELD	542:12	542:19	16	codep -> next
LEAF_NODE	542:12	542:12	17	codep
LEAF_NODE	542:17	542:17	17	->
LEAF_NODE	542:19	542:19	17	next
LEAF_NODE	542:23	542:23	13	;
EXPR_STATEMENT	543:4	543:17	12	* tp = ( char ) t ;
EXPR	543:4	543:4	13	* tp = ( char ) t
ASSIGN	543:4	543:10	14	* tp = ( char ) t
LVAL	543:4	543:4	15	* tp
UNARY_EXPR	543:4	543:5	16	* tp
UNARY_OPERATOR	543:4	543:4	17	*
LEAF_NODE	543:4	543:4	18	*
FIELD	543:5	543:5	17	tp
LEAF_NODE	543:5	543:5	18	tp
ASSIGN_OP	543:8	543:8	15	=
LEAF_NODE	543:8	543:8	16	=
RVAL	543:10	543:16	15	( char ) t
LEAF_NODE	543:10	543:10	16	(
TYPE_NAME	543:11	543:11	16	char
LEAF_NODE	543:11	543:11	17	char
LEAF_NODE	543:15	543:15	16	)
FIELD	543:16	543:16	16	t
LEAF_NODE	543:16	543:16	17	t
LEAF_NODE	543:17	543:17	13	;
LEAF_NODE	544:3	544:3	11	}
LEAF_NODE	544:29	544:29	9	;
SELECTION	545:3	545:14	9	
KEYWORD	545:3	545:3	10	if
LEAF_NODE	545:3	545:3	11	if
LEAF_NODE	545:6	545:6	10	(
CONDITION	545:7	545:7	10	codep
EXPR	545:7	545:7	11	codep
FIELD	545:7	545:7	12	codep
LEAF_NODE	545:7	545:7	13	codep
LEAF_NODE	545:12	545:12	10	)
STATEMENTS	545:14	548:3	10	
LEAF_NODE	545:14	545:14	11	{
STATEMENTS	546:7	547:7	11	
EXPR_STATEMENT	546:7	546:28	12	codeLoop ( tif , module ) ;
EXPR	546:7	546:7	13	codeLoop ( tif , module )
FUNCTION_CALL	546:7	546:27	14	codeLoop ( tif , module )
CALLEE	546:7	546:7	15	codeLoop
LEAF_NODE	546:7	546:7	16	codeLoop
LEAF_NODE	546:15	546:15	15	(
ARGUMENT	546:16	546:16	15	tif
FIELD	546:16	546:16	16	tif
LEAF_NODE	546:16	546:16	17	tif
LEAF_NODE	546:19	546:19	15	,
ARGUMENT	546:21	546:21	15	module
FIELD	546:21	546:21	16	module
LEAF_NODE	546:21	546:21	17	module
LEAF_NODE	546:27	546:27	15	)
LEAF_NODE	546:28	546:28	13	;
JUMP_STATEMENT	547:7	547:12	12	break DESTINATION ;
KEYWORD	547:7	547:7	13	break
LEAF_NODE	547:7	547:7	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	547:12	547:12	13	;
LEAF_NODE	548:3	548:3	11	}
EXPR_STATEMENT	549:3	549:21	9	assert ( occ >= len ) ;
EXPR	549:3	549:3	10	assert ( occ >= len )
FUNCTION_CALL	549:3	549:20	11	assert ( occ >= len )
CALLEE	549:3	549:3	12	assert
LEAF_NODE	549:3	549:3	13	assert
LEAF_NODE	549:9	549:9	12	(
ARGUMENT	549:10	549:17	12	occ >= len
FIELD	549:10	549:10	13	occ
LEAF_NODE	549:10	549:10	14	occ
REL_OPERATOR	549:14	549:14	13	>=
LEAF_NODE	549:14	549:14	14	>=
FIELD	549:17	549:17	13	len
LEAF_NODE	549:17	549:17	14	len
LEAF_NODE	549:20	549:20	12	)
LEAF_NODE	549:21	549:21	10	;
EXPR_STATEMENT	550:3	550:12	9	op += len ;
EXPR	550:3	550:3	10	op += len
ASSIGN	550:3	550:9	11	op += len
LVAL	550:3	550:3	12	op
FIELD	550:3	550:3	13	op
LEAF_NODE	550:3	550:3	14	op
ASSIGN_OP	550:6	550:6	12	+=
LEAF_NODE	550:6	550:6	13	+=
RVAL	550:9	550:9	12	len
FIELD	550:9	550:9	13	len
LEAF_NODE	550:9	550:9	14	len
LEAF_NODE	550:12	550:12	10	;
EXPR_STATEMENT	551:3	551:13	9	occ -= len ;
EXPR	551:3	551:3	10	occ -= len
ASSIGN	551:3	551:10	11	occ -= len
LVAL	551:3	551:3	12	occ
FIELD	551:3	551:3	13	occ
LEAF_NODE	551:3	551:3	14	occ
ASSIGN_OP	551:7	551:7	12	-=
LEAF_NODE	551:7	551:7	13	-=
RVAL	551:10	551:10	12	len
FIELD	551:10	551:10	13	len
LEAF_NODE	551:10	551:10	14	len
LEAF_NODE	551:13	551:13	10	;
LEAF_NODE	552:2	552:2	8	}
SELECTION	552:4	552:9	6	
KEYWORD	552:4	552:4	7	else
LEAF_NODE	552:4	552:4	8	else
STATEMENTS	552:9	555:2	7	
LEAF_NODE	552:9	552:9	8	{
STATEMENTS	553:3	554:3	8	
EXPR_STATEMENT	553:3	553:21	9	* op ++ = ( char ) code ;
EXPR	553:3	553:3	10	* op ++ = ( char ) code
ASSIGN	553:3	553:11	11	* op ++ = ( char ) code
LVAL	553:3	553:3	12	* op ++
UNARY_EXPR	553:3	553:4	13	* op ++
UNARY_OPERATOR	553:3	553:3	14	*
LEAF_NODE	553:3	553:3	15	*
FIELD	553:4	553:6	14	op ++
LEAF_NODE	553:4	553:4	15	op
LEAF_NODE	553:6	553:6	15	++
ASSIGN_OP	553:9	553:9	12	=
LEAF_NODE	553:9	553:9	13	=
RVAL	553:11	553:17	12	( char ) code
LEAF_NODE	553:11	553:11	13	(
TYPE_NAME	553:12	553:12	13	char
LEAF_NODE	553:12	553:12	14	char
LEAF_NODE	553:16	553:16	13	)
FIELD	553:17	553:17	13	code
LEAF_NODE	553:17	553:17	14	code
LEAF_NODE	553:21	553:21	10	;
EXPR_STATEMENT	554:3	554:8	9	occ -- ;
EXPR	554:3	554:3	10	occ --
FIELD	554:3	554:6	11	occ --
LEAF_NODE	554:3	554:3	12	occ
LEAF_NODE	554:6	554:6	12	--
LEAF_NODE	554:8	554:8	10	;
LEAF_NODE	555:2	555:2	8	}
LEAF_NODE	556:1	556:1	5	}
EXPR_STATEMENT	558:1	558:61	3	tif -> tif_rawcc -= ( tmsize_t ) ( ( uint8 * ) bp - tif -> tif_rawcp ) ;
EXPR	558:1	558:1	4	tif -> tif_rawcc -= ( tmsize_t ) ( ( uint8 * ) bp - tif -> tif_rawcp )
ASSIGN	558:1	558:19	5	tif -> tif_rawcc -= ( tmsize_t ) ( ( uint8 * ) bp - tif -> tif_rawcp )
LVAL	558:1	558:1	6	tif -> tif_rawcc
FIELD	558:1	558:6	7	tif -> tif_rawcc
LEAF_NODE	558:1	558:1	8	tif
LEAF_NODE	558:4	558:4	8	->
LEAF_NODE	558:6	558:6	8	tif_rawcc
ASSIGN_OP	558:16	558:16	6	-=
LEAF_NODE	558:16	558:16	7	-=
RVAL	558:19	558:60	6	( tmsize_t ) ( ( uint8 * ) bp - tif -> tif_rawcp )
LEAF_NODE	558:19	558:19	7	(
TYPE_NAME	558:20	558:20	7	tmsize_t
LEAF_NODE	558:20	558:20	8	tmsize_t
LEAF_NODE	558:28	558:28	7	)
LEAF_NODE	558:29	558:29	7	(
LEAF_NODE	558:31	558:31	7	(
TYPE_NAME	558:32	558:32	7	uint8
LEAF_NODE	558:32	558:32	8	uint8
LEAF_NODE	558:37	558:37	7	*
LEAF_NODE	558:38	558:38	7	)
FIELD	558:40	558:40	7	bp
LEAF_NODE	558:40	558:40	8	bp
LEAF_NODE	558:43	558:43	7	-
FIELD	558:45	558:50	7	tif -> tif_rawcp
LEAF_NODE	558:45	558:45	8	tif
LEAF_NODE	558:48	558:48	8	->
LEAF_NODE	558:50	558:50	8	tif_rawcp
LEAF_NODE	558:60	558:60	7	)
LEAF_NODE	558:61	558:61	4	;
EXPR_STATEMENT	559:1	559:29	3	tif -> tif_rawcp = ( uint8 * ) bp ;
EXPR	559:1	559:1	4	tif -> tif_rawcp = ( uint8 * ) bp
ASSIGN	559:1	559:18	5	tif -> tif_rawcp = ( uint8 * ) bp
LVAL	559:1	559:1	6	tif -> tif_rawcp
FIELD	559:1	559:6	7	tif -> tif_rawcp
LEAF_NODE	559:1	559:1	8	tif
LEAF_NODE	559:4	559:4	8	->
LEAF_NODE	559:6	559:6	8	tif_rawcp
ASSIGN_OP	559:16	559:16	6	=
LEAF_NODE	559:16	559:16	7	=
RVAL	559:18	559:27	6	( uint8 * ) bp
LEAF_NODE	559:18	559:18	7	(
TYPE_NAME	559:19	559:19	7	uint8
LEAF_NODE	559:19	559:19	8	uint8
LEAF_NODE	559:24	559:24	7	*
LEAF_NODE	559:25	559:25	7	)
FIELD	559:27	559:27	7	bp
LEAF_NODE	559:27	559:27	8	bp
LEAF_NODE	559:29	559:29	4	;
EXPR_STATEMENT	561:1	561:35	3	sp -> old_tif_rawcc = tif -> tif_rawcc ;
EXPR	561:1	561:1	4	sp -> old_tif_rawcc = tif -> tif_rawcc
ASSIGN	561:1	561:21	5	sp -> old_tif_rawcc = tif -> tif_rawcc
LVAL	561:1	561:1	6	sp -> old_tif_rawcc
FIELD	561:1	561:5	7	sp -> old_tif_rawcc
LEAF_NODE	561:1	561:1	8	sp
LEAF_NODE	561:3	561:3	8	->
LEAF_NODE	561:5	561:5	8	old_tif_rawcc
ASSIGN_OP	561:19	561:19	6	=
LEAF_NODE	561:19	561:19	7	=
RVAL	561:21	561:21	6	tif -> tif_rawcc
FIELD	561:21	561:26	7	tif -> tif_rawcc
LEAF_NODE	561:21	561:21	8	tif
LEAF_NODE	561:24	561:24	8	->
LEAF_NODE	561:26	561:26	8	tif_rawcc
LEAF_NODE	561:35	561:35	4	;
EXPR_STATEMENT	563:1	563:39	3	sp -> lzw_nbits = ( unsigned short ) nbits ;
EXPR	563:1	563:1	4	sp -> lzw_nbits = ( unsigned short ) nbits
ASSIGN	563:1	563:17	5	sp -> lzw_nbits = ( unsigned short ) nbits
LVAL	563:1	563:1	6	sp -> lzw_nbits
FIELD	563:1	563:5	7	sp -> lzw_nbits
LEAF_NODE	563:1	563:1	8	sp
LEAF_NODE	563:3	563:3	8	->
LEAF_NODE	563:5	563:5	8	lzw_nbits
ASSIGN_OP	563:15	563:15	6	=
LEAF_NODE	563:15	563:15	7	=
RVAL	563:17	563:34	6	( unsigned short ) nbits
LEAF_NODE	563:17	563:17	7	(
TYPE_NAME	563:18	563:27	7	unsigned short
LEAF_NODE	563:18	563:18	8	unsigned
LEAF_NODE	563:27	563:27	8	short
LEAF_NODE	563:32	563:32	7	)
FIELD	563:34	563:34	7	nbits
LEAF_NODE	563:34	563:34	8	nbits
LEAF_NODE	563:39	563:39	4	;
EXPR_STATEMENT	564:1	564:28	3	sp -> lzw_nextdata = nextdata ;
EXPR	564:1	564:1	4	sp -> lzw_nextdata = nextdata
ASSIGN	564:1	564:20	5	sp -> lzw_nextdata = nextdata
LVAL	564:1	564:1	6	sp -> lzw_nextdata
FIELD	564:1	564:5	7	sp -> lzw_nextdata
LEAF_NODE	564:1	564:1	8	sp
LEAF_NODE	564:3	564:3	8	->
LEAF_NODE	564:5	564:5	8	lzw_nextdata
ASSIGN_OP	564:18	564:18	6	=
LEAF_NODE	564:18	564:18	7	=
RVAL	564:20	564:20	6	nextdata
FIELD	564:20	564:20	7	nextdata
LEAF_NODE	564:20	564:20	8	nextdata
LEAF_NODE	564:28	564:28	4	;
EXPR_STATEMENT	565:1	565:28	3	sp -> lzw_nextbits = nextbits ;
EXPR	565:1	565:1	4	sp -> lzw_nextbits = nextbits
ASSIGN	565:1	565:20	5	sp -> lzw_nextbits = nextbits
LVAL	565:1	565:1	6	sp -> lzw_nextbits
FIELD	565:1	565:5	7	sp -> lzw_nextbits
LEAF_NODE	565:1	565:1	8	sp
LEAF_NODE	565:3	565:3	8	->
LEAF_NODE	565:5	565:5	8	lzw_nextbits
ASSIGN_OP	565:18	565:18	6	=
LEAF_NODE	565:18	565:18	7	=
RVAL	565:20	565:20	6	nextbits
FIELD	565:20	565:20	7	nextbits
LEAF_NODE	565:20	565:20	8	nextbits
LEAF_NODE	565:28	565:28	4	;
EXPR_STATEMENT	566:1	566:30	3	sp -> dec_nbitsmask = nbitsmask ;
EXPR	566:1	566:1	4	sp -> dec_nbitsmask = nbitsmask
ASSIGN	566:1	566:21	5	sp -> dec_nbitsmask = nbitsmask
LVAL	566:1	566:1	6	sp -> dec_nbitsmask
FIELD	566:1	566:5	7	sp -> dec_nbitsmask
LEAF_NODE	566:1	566:1	8	sp
LEAF_NODE	566:3	566:3	8	->
LEAF_NODE	566:5	566:5	8	dec_nbitsmask
ASSIGN_OP	566:19	566:19	6	=
LEAF_NODE	566:19	566:19	7	=
RVAL	566:21	566:21	6	nbitsmask
FIELD	566:21	566:21	7	nbitsmask
LEAF_NODE	566:21	566:21	8	nbitsmask
LEAF_NODE	566:30	566:30	4	;
EXPR_STATEMENT	567:1	567:28	3	sp -> dec_oldcodep = oldcodep ;
EXPR	567:1	567:1	4	sp -> dec_oldcodep = oldcodep
ASSIGN	567:1	567:20	5	sp -> dec_oldcodep = oldcodep
LVAL	567:1	567:1	6	sp -> dec_oldcodep
FIELD	567:1	567:5	7	sp -> dec_oldcodep
LEAF_NODE	567:1	567:1	8	sp
LEAF_NODE	567:3	567:3	8	->
LEAF_NODE	567:5	567:5	8	dec_oldcodep
ASSIGN_OP	567:18	567:18	6	=
LEAF_NODE	567:18	567:18	7	=
RVAL	567:20	567:20	6	oldcodep
FIELD	567:20	567:20	7	oldcodep
LEAF_NODE	567:20	567:20	8	oldcodep
LEAF_NODE	567:28	567:28	4	;
EXPR_STATEMENT	568:1	568:30	3	sp -> dec_free_entp = free_entp ;
EXPR	568:1	568:1	4	sp -> dec_free_entp = free_entp
ASSIGN	568:1	568:21	5	sp -> dec_free_entp = free_entp
LVAL	568:1	568:1	6	sp -> dec_free_entp
FIELD	568:1	568:5	7	sp -> dec_free_entp
LEAF_NODE	568:1	568:1	8	sp
LEAF_NODE	568:3	568:3	8	->
LEAF_NODE	568:5	568:5	8	dec_free_entp
ASSIGN_OP	568:19	568:19	6	=
LEAF_NODE	568:19	568:19	7	=
RVAL	568:21	568:21	6	free_entp
FIELD	568:21	568:21	7	free_entp
LEAF_NODE	568:21	568:21	8	free_entp
LEAF_NODE	568:30	568:30	4	;
EXPR_STATEMENT	569:1	569:28	3	sp -> dec_maxcodep = maxcodep ;
EXPR	569:1	569:1	4	sp -> dec_maxcodep = maxcodep
ASSIGN	569:1	569:20	5	sp -> dec_maxcodep = maxcodep
LVAL	569:1	569:1	6	sp -> dec_maxcodep
FIELD	569:1	569:5	7	sp -> dec_maxcodep
LEAF_NODE	569:1	569:1	8	sp
LEAF_NODE	569:3	569:3	8	->
LEAF_NODE	569:5	569:5	8	dec_maxcodep
ASSIGN_OP	569:18	569:18	6	=
LEAF_NODE	569:18	569:18	7	=
RVAL	569:20	569:20	6	maxcodep
FIELD	569:20	569:20	7	maxcodep
LEAF_NODE	569:20	569:20	8	maxcodep
LEAF_NODE	569:28	569:28	4	;
SELECTION	571:1	571:14	3	
KEYWORD	571:1	571:1	4	if
LEAF_NODE	571:1	571:1	5	if
LEAF_NODE	571:4	571:4	4	(
CONDITION	571:5	571:5	4	occ > 0
EXPR	571:5	571:11	5	occ > 0
FIELD	571:5	571:5	6	occ
LEAF_NODE	571:5	571:5	7	occ
REL_OPERATOR	571:9	571:9	6	>
LEAF_NODE	571:9	571:9	7	>
FIELD	571:11	571:11	6	0
LEAF_NODE	571:11	571:11	7	0
LEAF_NODE	571:12	571:12	4	)
STATEMENTS	571:14	582:1	4	
LEAF_NODE	571:14	571:14	5	{
STATEMENTS	573:2	581:2	5	
EXPR_STATEMENT	573:2	575:45	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at scanline %d (short %I64d bytes)" , tif -> tif_row , ( unsigned __int64 ) occ ) ;
EXPR	573:2	573:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at scanline %d (short %I64d bytes)" , tif -> tif_row , ( unsigned __int64 ) occ )
FUNCTION_CALL	573:2	575:44	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at scanline %d (short %I64d bytes)" , tif -> tif_row , ( unsigned __int64 ) occ )
CALLEE	573:2	573:2	9	TIFFErrorExt
LEAF_NODE	573:2	573:2	10	TIFFErrorExt
LEAF_NODE	573:14	573:14	9	(
ARGUMENT	573:15	573:15	9	tif -> tif_clientdata
FIELD	573:15	573:20	10	tif -> tif_clientdata
LEAF_NODE	573:15	573:15	11	tif
LEAF_NODE	573:18	573:18	11	->
LEAF_NODE	573:20	573:20	11	tif_clientdata
LEAF_NODE	573:34	573:34	9	,
ARGUMENT	573:36	573:36	9	module
FIELD	573:36	573:36	10	module
LEAF_NODE	573:36	573:36	11	module
LEAF_NODE	573:42	573:42	9	,
ARGUMENT	574:3	574:3	9	"Not enough data at scanline %d (short %I64d bytes)"
FIELD	574:3	574:3	10	"Not enough data at scanline %d (short %I64d bytes)"
LEAF_NODE	574:3	574:3	11	"Not enough data at scanline %d (short %I64d bytes)"
LEAF_NODE	574:55	574:55	9	,
ARGUMENT	575:8	575:8	9	tif -> tif_row
FIELD	575:8	575:13	10	tif -> tif_row
LEAF_NODE	575:8	575:8	11	tif
LEAF_NODE	575:11	575:11	11	->
LEAF_NODE	575:13	575:13	11	tif_row
LEAF_NODE	575:20	575:20	9	,
ARGUMENT	575:22	575:41	9	( unsigned __int64 ) occ
LEAF_NODE	575:22	575:22	10	(
TYPE_NAME	575:23	575:32	10	unsigned __int64
LEAF_NODE	575:23	575:23	11	unsigned
LEAF_NODE	575:32	575:32	11	__int64
LEAF_NODE	575:39	575:39	10	)
FIELD	575:41	575:41	10	occ
LEAF_NODE	575:41	575:41	11	occ
LEAF_NODE	575:44	575:44	9	)
LEAF_NODE	575:45	575:45	7	;
LEAF_NODE	577:2	577:2	6	TIFFErrorExt
LEAF_NODE	577:14	577:14	6	(
LEAF_NODE	577:15	577:15	6	tif
LEAF_NODE	577:18	577:18	6	->
LEAF_NODE	577:20	577:20	6	tif_clientdata
LEAF_NODE	577:34	577:34	6	,
LEAF_NODE	577:36	577:36	6	module
LEAF_NODE	577:42	577:42	6	,
LEAF_NODE	578:3	578:3	6	"Not enough data at scanline %d (short %llu bytes)"
LEAF_NODE	578:54	578:54	6	,
LEAF_NODE	579:8	579:8	6	tif
LEAF_NODE	579:11	579:11	6	->
LEAF_NODE	579:13	579:13	6	tif_row
LEAF_NODE	579:20	579:20	6	,
LEAF_NODE	579:22	579:22	6	(
LEAF_NODE	579:23	579:23	6	unsigned
LEAF_NODE	579:32	579:32	6	long
LEAF_NODE	579:37	579:37	6	long
LEAF_NODE	579:41	579:41	6	)
LEAF_NODE	579:43	579:43	6	occ
LEAF_NODE	579:46	579:46	6	)
LEAF_NODE	579:47	579:47	6	;
JUMP_STATEMENT	581:2	581:12	6	return ( 0 ) ;
KEYWORD	581:2	581:2	7	return
LEAF_NODE	581:2	581:2	8	return
DESTINATION	581:9	581:9	7	( 0 )
EXPR	581:9	581:11	8	( 0 )
LEAF_NODE	581:9	581:9	9	(
FIELD	581:10	581:10	9	0
LEAF_NODE	581:10	581:10	10	0
LEAF_NODE	581:11	581:11	9	)
LEAF_NODE	581:12	581:12	7	;
LEAF_NODE	582:1	582:1	5	}
JUMP_STATEMENT	583:1	583:11	3	return ( 1 ) ;
KEYWORD	583:1	583:1	4	return
LEAF_NODE	583:1	583:1	5	return
DESTINATION	583:8	583:8	4	( 1 )
EXPR	583:8	583:10	5	( 1 )
LEAF_NODE	583:8	583:8	6	(
FIELD	583:9	583:9	6	1
LEAF_NODE	583:9	583:9	7	1
LEAF_NODE	583:10	583:10	6	)
LEAF_NODE	583:11	583:11	4	;
LEAF_NODE	584:0	584:0	2	}
FUNCTION_DEF	602:0	808:0	1	
RETURN_TYPE	602:0	602:7	2	static int
LEAF_NODE	602:0	602:0	3	static
TYPE_NAME	602:7	602:7	3	int
LEAF_NODE	602:7	602:7	4	int
FUNCTION_NAME	603:0	603:0	2	LZWDecodeCompat
LEAF_NODE	603:0	603:0	3	LZWDecodeCompat
PARAMETER_LIST	603:15	603:62	2	( TIFF * tif , uint8 * op0 , tmsize_t occ0 , uint16 s )
LEAF_NODE	603:15	603:15	3	(
PARAMETER_DECL	603:16	603:22	3	TIFF * tif
TYPE	603:16	603:20	4	TIFF *
TYPE_NAME	603:16	603:16	5	TIFF
LEAF_NODE	603:16	603:16	6	TIFF
POINTER	603:20	603:20	5	*
LEAF_NODE	603:20	603:20	6	*
NAME	603:22	603:22	4	tif
LEAF_NODE	603:22	603:22	5	tif
LEAF_NODE	603:25	603:25	3	,
PARAMETER_DECL	603:27	603:34	3	uint8 * op0
TYPE	603:27	603:32	4	uint8 *
TYPE_NAME	603:27	603:27	5	uint8
LEAF_NODE	603:27	603:27	6	uint8
POINTER	603:32	603:32	5	*
LEAF_NODE	603:32	603:32	6	*
NAME	603:34	603:34	4	op0
LEAF_NODE	603:34	603:34	5	op0
LEAF_NODE	603:37	603:37	3	,
PARAMETER_DECL	603:39	603:48	3	tmsize_t occ0
TYPE	603:39	603:39	4	tmsize_t
TYPE_NAME	603:39	603:39	5	tmsize_t
LEAF_NODE	603:39	603:39	6	tmsize_t
NAME	603:48	603:48	4	occ0
LEAF_NODE	603:48	603:48	5	occ0
LEAF_NODE	603:52	603:52	3	,
PARAMETER_DECL	603:54	603:61	3	uint16 s
TYPE	603:54	603:54	4	uint16
TYPE_NAME	603:54	603:54	5	uint16
LEAF_NODE	603:54	603:54	6	uint16
NAME	603:61	603:61	4	s
LEAF_NODE	603:61	603:61	5	s
LEAF_NODE	603:62	603:62	3	)
LEAF_NODE	604:0	604:0	2	{
STATEMENTS	605:1	807:1	2	
LEAF_NODE	605:1	605:1	3	static
SIMPLE_DECL	605:8	605:47	3	const char [ ] module ; module = "LZWDecodeCompat" ;
VAR_DECL	605:8	605:19	4	const char [ ] module ; module = "LZWDecodeCompat"
TYPE	605:8	605:25	5	const char [ ]
TYPE_NAME	605:8	605:14	6	const char
LEAF_NODE	605:8	605:8	7	const
LEAF_NODE	605:14	605:14	7	char
TYPE_SUFFIX	605:25	605:26	6	[ ]
LEAF_NODE	605:25	605:25	7	[
LEAF_NODE	605:26	605:26	7	]
NAME	605:19	605:19	5	module
LEAF_NODE	605:19	605:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	605:19	605:19	5	module = "LZWDecodeCompat"
ASSIGN	605:19	605:30	6	module = "LZWDecodeCompat"
LVAL	605:19	605:19	7	module
NAME	605:19	605:19	8	module
LEAF_NODE	605:19	605:19	9	module
ASSIGN_OP	605:28	605:28	7	=
LEAF_NODE	605:28	605:28	8	=
RVAL	605:30	605:30	7	"LZWDecodeCompat"
FIELD	605:30	605:30	8	"LZWDecodeCompat"
LEAF_NODE	605:30	605:30	9	"LZWDecodeCompat"
LEAF_NODE	605:47	605:47	4	;
SIMPLE_DECL	606:1	606:38	3	LZWCodecState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	606:1	606:16	4	LZWCodecState * sp ; sp = DecoderState ( tif )
TYPE	606:1	606:15	5	LZWCodecState *
TYPE_NAME	606:1	606:1	6	LZWCodecState
LEAF_NODE	606:1	606:1	7	LZWCodecState
POINTER	606:15	606:15	6	*
LEAF_NODE	606:15	606:15	7	*
NAME	606:16	606:16	5	sp
LEAF_NODE	606:16	606:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	606:16	606:16	5	sp = DecoderState ( tif )
ASSIGN	606:16	606:21	6	sp = DecoderState ( tif )
LVAL	606:16	606:16	7	sp
NAME	606:16	606:16	8	sp
LEAF_NODE	606:16	606:16	9	sp
ASSIGN_OP	606:19	606:19	7	=
LEAF_NODE	606:19	606:19	8	=
RVAL	606:21	606:21	7	DecoderState ( tif )
FUNCTION_CALL	606:21	606:37	8	DecoderState ( tif )
CALLEE	606:21	606:21	9	DecoderState
LEAF_NODE	606:21	606:21	10	DecoderState
LEAF_NODE	606:33	606:33	9	(
ARGUMENT	606:34	606:34	9	tif
FIELD	606:34	606:34	10	tif
LEAF_NODE	606:34	606:34	11	tif
LEAF_NODE	606:37	606:37	9	)
LEAF_NODE	606:38	606:38	4	;
SIMPLE_DECL	607:1	607:23	3	char * op ; op = ( char * ) op0 ;
VAR_DECL	607:1	607:7	4	char * op ; op = ( char * ) op0
TYPE	607:1	607:6	5	char *
TYPE_NAME	607:1	607:1	6	char
LEAF_NODE	607:1	607:1	7	char
POINTER	607:6	607:6	6	*
LEAF_NODE	607:6	607:6	7	*
NAME	607:7	607:7	5	op
LEAF_NODE	607:7	607:7	6	op
LEAF_NODE	0:0	0:0	5	;
INIT	607:7	607:7	5	op = ( char * ) op0
ASSIGN	607:7	607:12	6	op = ( char * ) op0
LVAL	607:7	607:7	7	op
NAME	607:7	607:7	8	op
LEAF_NODE	607:7	607:7	9	op
ASSIGN_OP	607:10	607:10	7	=
LEAF_NODE	607:10	607:10	8	=
RVAL	607:12	607:20	7	( char * ) op0
LEAF_NODE	607:12	607:12	8	(
TYPE_NAME	607:13	607:13	8	char
LEAF_NODE	607:13	607:13	9	char
LEAF_NODE	607:17	607:17	8	*
LEAF_NODE	607:18	607:18	8	)
FIELD	607:20	607:20	8	op0
LEAF_NODE	607:20	607:20	9	op0
LEAF_NODE	607:23	607:23	4	;
SIMPLE_DECL	608:1	608:23	3	long occ ; occ = ( long ) occ0 ;
VAR_DECL	608:1	608:6	4	long occ ; occ = ( long ) occ0
TYPE	608:1	608:1	5	long
TYPE_NAME	608:1	608:1	6	long
LEAF_NODE	608:1	608:1	7	long
NAME	608:6	608:6	5	occ
LEAF_NODE	608:6	608:6	6	occ
LEAF_NODE	0:0	0:0	5	;
INIT	608:6	608:6	5	occ = ( long ) occ0
ASSIGN	608:6	608:12	6	occ = ( long ) occ0
LVAL	608:6	608:6	7	occ
NAME	608:6	608:6	8	occ
LEAF_NODE	608:6	608:6	9	occ
ASSIGN_OP	608:10	608:10	7	=
LEAF_NODE	608:10	608:10	8	=
RVAL	608:12	608:19	7	( long ) occ0
LEAF_NODE	608:12	608:12	8	(
TYPE_NAME	608:13	608:13	8	long
LEAF_NODE	608:13	608:13	9	long
LEAF_NODE	608:17	608:17	8	)
FIELD	608:19	608:19	8	occ0
LEAF_NODE	608:19	608:19	9	occ0
LEAF_NODE	608:23	608:23	4	;
SIMPLE_DECL	609:1	609:9	3	char * tp ;
VAR_DECL	609:1	609:7	4	char * tp
TYPE	609:1	609:6	5	char *
TYPE_NAME	609:1	609:1	6	char
LEAF_NODE	609:1	609:1	7	char
POINTER	609:6	609:6	6	*
LEAF_NODE	609:6	609:6	7	*
NAME	609:7	609:7	5	tp
LEAF_NODE	609:7	609:7	6	tp
LEAF_NODE	609:9	609:9	4	;
SIMPLE_DECL	610:1	610:18	3	unsigned char * bp ;
VAR_DECL	610:1	610:16	4	unsigned char * bp
TYPE	610:1	610:15	5	unsigned char *
TYPE_NAME	610:1	610:10	6	unsigned char
LEAF_NODE	610:1	610:1	7	unsigned
LEAF_NODE	610:10	610:10	7	char
POINTER	610:15	610:15	6	*
LEAF_NODE	610:15	610:15	7	*
NAME	610:16	610:16	5	bp
LEAF_NODE	610:16	610:16	6	bp
LEAF_NODE	610:18	610:18	4	;
SIMPLE_DECL	611:1	611:16	3	int code , int nbits ;
INIT_DECL_LIST	611:1	611:1	4	int code , int nbits
VAR_DECL	611:1	611:5	5	int code
TYPE	611:1	611:1	6	int
TYPE_NAME	611:1	611:1	7	int
LEAF_NODE	611:1	611:1	8	int
NAME	611:5	611:5	6	code
LEAF_NODE	611:5	611:5	7	code
LEAF_NODE	611:9	611:9	5	,
VAR_DECL	611:1	611:11	5	int nbits
TYPE	611:1	611:1	6	int
TYPE_NAME	611:1	611:1	7	int
LEAF_NODE	611:1	611:1	8	int
NAME	611:11	611:11	6	nbits
LEAF_NODE	611:11	611:11	7	nbits
LEAF_NODE	611:16	611:16	4	;
SIMPLE_DECL	612:1	612:8	3	int len ;
VAR_DECL	612:1	612:5	4	int len
TYPE	612:1	612:1	5	int
TYPE_NAME	612:1	612:1	6	int
LEAF_NODE	612:1	612:1	7	int
NAME	612:5	612:5	5	len
LEAF_NODE	612:5	612:5	6	len
LEAF_NODE	612:8	612:8	4	;
SIMPLE_DECL	613:1	613:35	3	long nextbits , long nextdata , long nbitsmask ;
INIT_DECL_LIST	613:1	613:1	4	long nextbits , long nextdata , long nbitsmask
VAR_DECL	613:1	613:6	5	long nextbits
TYPE	613:1	613:1	6	long
TYPE_NAME	613:1	613:1	7	long
LEAF_NODE	613:1	613:1	8	long
NAME	613:6	613:6	6	nextbits
LEAF_NODE	613:6	613:6	7	nextbits
LEAF_NODE	613:14	613:14	5	,
INIT_DECL_LIST	613:1	613:1	5	long nextdata , long nbitsmask
VAR_DECL	613:1	613:16	6	long nextdata
TYPE	613:1	613:1	7	long
TYPE_NAME	613:1	613:1	8	long
LEAF_NODE	613:1	613:1	9	long
NAME	613:16	613:16	7	nextdata
LEAF_NODE	613:16	613:16	8	nextdata
LEAF_NODE	613:24	613:24	6	,
VAR_DECL	613:1	613:26	6	long nbitsmask
TYPE	613:1	613:1	7	long
TYPE_NAME	613:1	613:1	8	long
LEAF_NODE	613:1	613:1	9	long
NAME	613:26	613:26	7	nbitsmask
LEAF_NODE	613:26	613:26	8	nbitsmask
LEAF_NODE	613:35	613:35	4	;
SIMPLE_DECL	614:1	614:48	3	code_t * codep , code_t * free_entp , code_t * maxcodep , code_t * oldcodep ;
INIT_DECL_LIST	614:1	614:1	4	code_t * codep , code_t * free_entp , code_t * maxcodep , code_t * oldcodep
VAR_DECL	614:1	614:9	5	code_t * codep
TYPE	614:1	614:8	6	code_t *
TYPE_NAME	614:1	614:1	7	code_t
LEAF_NODE	614:1	614:1	8	code_t
POINTER	614:8	614:8	7	*
LEAF_NODE	614:8	614:8	8	*
NAME	614:9	614:9	6	codep
LEAF_NODE	614:9	614:9	7	codep
LEAF_NODE	614:14	614:14	5	,
INIT_DECL_LIST	614:1	614:1	5	code_t * free_entp , code_t * maxcodep , code_t * oldcodep
VAR_DECL	614:1	614:17	6	code_t * free_entp
TYPE	614:1	614:16	7	code_t *
TYPE_NAME	614:1	614:1	8	code_t
LEAF_NODE	614:1	614:1	9	code_t
POINTER	614:16	614:16	8	*
LEAF_NODE	614:16	614:16	9	*
NAME	614:17	614:17	7	free_entp
LEAF_NODE	614:17	614:17	8	free_entp
LEAF_NODE	614:26	614:26	6	,
INIT_DECL_LIST	614:1	614:1	6	code_t * maxcodep , code_t * oldcodep
VAR_DECL	614:1	614:29	7	code_t * maxcodep
TYPE	614:1	614:28	8	code_t *
TYPE_NAME	614:1	614:1	9	code_t
LEAF_NODE	614:1	614:1	10	code_t
POINTER	614:28	614:28	9	*
LEAF_NODE	614:28	614:28	10	*
NAME	614:29	614:29	8	maxcodep
LEAF_NODE	614:29	614:29	9	maxcodep
LEAF_NODE	614:37	614:37	7	,
VAR_DECL	614:1	614:40	7	code_t * oldcodep
TYPE	614:1	614:39	8	code_t *
TYPE_NAME	614:1	614:1	9	code_t
LEAF_NODE	614:1	614:1	10	code_t
POINTER	614:39	614:39	9	*
LEAF_NODE	614:39	614:39	10	*
NAME	614:40	614:40	8	oldcodep
LEAF_NODE	614:40	614:40	9	oldcodep
LEAF_NODE	614:48	614:48	4	;
EXPR_STATEMENT	616:1	616:9	3	( void ) s ;
EXPR	616:1	616:8	4	( void ) s
LEAF_NODE	616:1	616:1	5	(
TYPE_NAME	616:2	616:2	5	void
LEAF_NODE	616:2	616:2	6	void
LEAF_NODE	616:6	616:6	5	)
FIELD	616:8	616:8	5	s
LEAF_NODE	616:8	616:8	6	s
LEAF_NODE	616:9	616:9	4	;
EXPR_STATEMENT	617:1	617:19	3	assert ( sp != NULL ) ;
EXPR	617:1	617:1	4	assert ( sp != NULL )
FUNCTION_CALL	617:1	617:18	5	assert ( sp != NULL )
CALLEE	617:1	617:1	6	assert
LEAF_NODE	617:1	617:1	7	assert
LEAF_NODE	617:7	617:7	6	(
ARGUMENT	617:8	617:14	6	sp != NULL
FIELD	617:8	617:8	7	sp
LEAF_NODE	617:8	617:8	8	sp
EQ_OPERATOR	617:11	617:11	7	!=
LEAF_NODE	617:11	617:11	8	!=
FIELD	617:14	617:14	7	NULL
LEAF_NODE	617:14	617:14	8	NULL
LEAF_NODE	617:18	617:18	6	)
LEAF_NODE	617:19	617:19	4	;
SELECTION	622:1	623:9	3	
KEYWORD	622:1	622:1	4	if
LEAF_NODE	622:1	622:1	5	if
LEAF_NODE	622:4	622:4	4	(
CONDITION	622:5	622:5	4	( tmsize_t ) occ != occ0
EXPR	622:5	622:23	5	( tmsize_t ) occ != occ0
LEAF_NODE	622:5	622:5	6	(
TYPE_NAME	622:6	622:6	6	tmsize_t
LEAF_NODE	622:6	622:6	7	tmsize_t
LEAF_NODE	622:14	622:14	6	)
FIELD	622:16	622:16	6	occ
LEAF_NODE	622:16	622:16	7	occ
EQ_OPERATOR	622:20	622:20	6	!=
LEAF_NODE	622:20	622:20	7	!=
FIELD	622:23	622:23	6	occ0
LEAF_NODE	622:23	622:23	7	occ0
LEAF_NODE	622:27	622:27	4	)
STATEMENTS	623:9	623:9	4	
JUMP_STATEMENT	623:9	623:19	5	return ( 0 ) ;
KEYWORD	623:9	623:9	6	return
LEAF_NODE	623:9	623:9	7	return
DESTINATION	623:16	623:16	6	( 0 )
EXPR	623:16	623:18	7	( 0 )
LEAF_NODE	623:16	623:16	8	(
FIELD	623:17	623:17	8	0
LEAF_NODE	623:17	623:17	9	0
LEAF_NODE	623:18	623:18	8	)
LEAF_NODE	623:19	623:19	6	;
SELECTION	628:1	628:22	3	
KEYWORD	628:1	628:1	4	if
LEAF_NODE	628:1	628:1	5	if
LEAF_NODE	628:4	628:4	4	(
CONDITION	628:5	628:5	4	sp -> dec_restart
EXPR	628:5	628:5	5	sp -> dec_restart
FIELD	628:5	628:9	6	sp -> dec_restart
LEAF_NODE	628:5	628:5	7	sp
LEAF_NODE	628:7	628:7	7	->
LEAF_NODE	628:9	628:9	7	dec_restart
LEAF_NODE	628:20	628:20	4	)
STATEMENTS	628:22	662:1	4	
LEAF_NODE	628:22	628:22	5	{
STATEMENTS	629:2	661:2	5	
SIMPLE_DECL	629:2	629:14	6	long residue ;
VAR_DECL	629:2	629:7	7	long residue
TYPE	629:2	629:2	8	long
TYPE_NAME	629:2	629:2	9	long
LEAF_NODE	629:2	629:2	10	long
NAME	629:7	629:7	8	residue
LEAF_NODE	629:7	629:7	9	residue
LEAF_NODE	629:14	629:14	7	;
EXPR_STATEMENT	631:2	631:23	6	codep = sp -> dec_codep ;
EXPR	631:2	631:2	7	codep = sp -> dec_codep
ASSIGN	631:2	631:10	8	codep = sp -> dec_codep
LVAL	631:2	631:2	9	codep
FIELD	631:2	631:2	10	codep
LEAF_NODE	631:2	631:2	11	codep
ASSIGN_OP	631:8	631:8	9	=
LEAF_NODE	631:8	631:8	10	=
RVAL	631:10	631:10	9	sp -> dec_codep
FIELD	631:10	631:14	10	sp -> dec_codep
LEAF_NODE	631:10	631:10	11	sp
LEAF_NODE	631:12	631:12	11	->
LEAF_NODE	631:14	631:14	11	dec_codep
LEAF_NODE	631:23	631:23	7	;
EXPR_STATEMENT	632:2	632:43	6	residue = codep -> length - sp -> dec_restart ;
EXPR	632:2	632:2	7	residue = codep -> length - sp -> dec_restart
ASSIGN	632:2	632:12	8	residue = codep -> length - sp -> dec_restart
LVAL	632:2	632:2	9	residue
FIELD	632:2	632:2	10	residue
LEAF_NODE	632:2	632:2	11	residue
ASSIGN_OP	632:10	632:10	9	=
LEAF_NODE	632:10	632:10	10	=
RVAL	632:12	632:28	9	codep -> length - sp -> dec_restart
FIELD	632:12	632:19	10	codep -> length
LEAF_NODE	632:12	632:12	11	codep
LEAF_NODE	632:17	632:17	11	->
LEAF_NODE	632:19	632:19	11	length
LEAF_NODE	632:26	632:26	10	-
FIELD	632:28	632:32	10	sp -> dec_restart
LEAF_NODE	632:28	632:28	11	sp
LEAF_NODE	632:30	632:30	11	->
LEAF_NODE	632:32	632:32	11	dec_restart
LEAF_NODE	632:43	632:43	7	;
SELECTION	633:2	633:21	6	
KEYWORD	633:2	633:2	7	if
LEAF_NODE	633:2	633:2	8	if
LEAF_NODE	633:5	633:5	7	(
CONDITION	633:6	633:6	7	residue > occ
EXPR	633:6	633:16	8	residue > occ
FIELD	633:6	633:6	9	residue
LEAF_NODE	633:6	633:6	10	residue
REL_OPERATOR	633:14	633:14	9	>
LEAF_NODE	633:14	633:14	10	>
FIELD	633:16	633:16	9	occ
LEAF_NODE	633:16	633:16	10	occ
LEAF_NODE	633:19	633:19	7	)
STATEMENTS	633:21	650:2	7	
LEAF_NODE	633:21	633:21	8	{
STATEMENTS	640:3	649:3	8	
EXPR_STATEMENT	640:3	640:25	9	sp -> dec_restart += occ ;
EXPR	640:3	640:3	10	sp -> dec_restart += occ
ASSIGN	640:3	640:22	11	sp -> dec_restart += occ
LVAL	640:3	640:3	12	sp -> dec_restart
FIELD	640:3	640:7	13	sp -> dec_restart
LEAF_NODE	640:3	640:3	14	sp
LEAF_NODE	640:5	640:5	14	->
LEAF_NODE	640:7	640:7	14	dec_restart
ASSIGN_OP	640:19	640:19	12	+=
LEAF_NODE	640:19	640:19	13	+=
RVAL	640:22	640:22	12	occ
FIELD	640:22	640:22	13	occ
LEAF_NODE	640:22	640:22	14	occ
LEAF_NODE	640:25	640:25	10	;
ITERATION	641:3	641:6	9	
KEYWORD	641:3	641:3	10	do
LEAF_NODE	641:3	641:3	11	do
LEAF_NODE	643:11	643:11	10	(
CONDITION	643:12	643:12	10	-- residue > occ
EXPR	643:12	643:24	11	-- residue > occ
LEAF_NODE	643:12	643:12	12	--
FIELD	643:14	643:14	12	residue
LEAF_NODE	643:14	643:14	13	residue
REL_OPERATOR	643:22	643:22	12	>
LEAF_NODE	643:22	643:22	13	>
FIELD	643:24	643:24	12	occ
LEAF_NODE	643:24	643:24	13	occ
LEAF_NODE	643:27	643:27	10	)
STATEMENTS	641:6	643:3	10	
LEAF_NODE	641:6	641:6	11	{
STATEMENTS	642:4	642:4	11	
EXPR_STATEMENT	642:4	642:23	12	codep = codep -> next ;
EXPR	642:4	642:4	13	codep = codep -> next
ASSIGN	642:4	642:12	14	codep = codep -> next
LVAL	642:4	642:4	15	codep
FIELD	642:4	642:4	16	codep
LEAF_NODE	642:4	642:4	17	codep
ASSIGN_OP	642:10	642:10	15	=
LEAF_NODE	642:10	642:10	16	=
RVAL	642:12	642:12	15	codep -> next
FIELD	642:12	642:19	16	codep -> next
LEAF_NODE	642:12	642:12	17	codep
LEAF_NODE	642:17	642:17	17	->
LEAF_NODE	642:19	642:19	17	next
LEAF_NODE	642:23	642:23	13	;
LEAF_NODE	643:3	643:3	11	}
LEAF_NODE	643:28	643:28	9	;
EXPR_STATEMENT	644:3	644:16	9	tp = op + occ ;
EXPR	644:3	644:3	10	tp = op + occ
ASSIGN	644:3	644:8	11	tp = op + occ
LVAL	644:3	644:3	12	tp
FIELD	644:3	644:3	13	tp
LEAF_NODE	644:3	644:3	14	tp
ASSIGN_OP	644:6	644:6	12	=
LEAF_NODE	644:6	644:6	13	=
RVAL	644:8	644:13	12	op + occ
FIELD	644:8	644:8	13	op
LEAF_NODE	644:8	644:8	14	op
LEAF_NODE	644:11	644:11	13	+
FIELD	644:13	644:13	13	occ
LEAF_NODE	644:13	644:13	14	occ
LEAF_NODE	644:16	644:16	10	;
ITERATION	645:3	645:6	9	
KEYWORD	645:3	645:3	10	do
LEAF_NODE	645:3	645:3	11	do
LEAF_NODE	648:11	648:11	10	(
CONDITION	648:12	648:12	10	-- occ
EXPR	648:12	648:14	11	-- occ
LEAF_NODE	648:12	648:12	12	--
FIELD	648:14	648:14	12	occ
LEAF_NODE	648:14	648:14	13	occ
LEAF_NODE	648:17	648:17	10	)
STATEMENTS	645:6	648:3	10	
LEAF_NODE	645:6	645:6	11	{
STATEMENTS	646:4	647:4	11	
LEAF_NODE	646:4	646:4	12	*
EXPR_STATEMENT	646:5	646:24	12	-- tp = codep -> value ;
EXPR	646:5	646:5	13	-- tp = codep -> value
ASSIGN	646:5	646:12	14	-- tp = codep -> value
LVAL	646:5	646:7	15	-- tp
LEAF_NODE	646:5	646:5	16	--
FIELD	646:7	646:7	16	tp
LEAF_NODE	646:7	646:7	17	tp
ASSIGN_OP	646:10	646:10	15	=
LEAF_NODE	646:10	646:10	16	=
RVAL	646:12	646:12	15	codep -> value
FIELD	646:12	646:19	16	codep -> value
LEAF_NODE	646:12	646:12	17	codep
LEAF_NODE	646:17	646:17	17	->
LEAF_NODE	646:19	646:19	17	value
LEAF_NODE	646:24	646:24	13	;
EXPR_STATEMENT	647:4	647:23	12	codep = codep -> next ;
EXPR	647:4	647:4	13	codep = codep -> next
ASSIGN	647:4	647:12	14	codep = codep -> next
LVAL	647:4	647:4	15	codep
FIELD	647:4	647:4	16	codep
LEAF_NODE	647:4	647:4	17	codep
ASSIGN_OP	647:10	647:10	15	=
LEAF_NODE	647:10	647:10	16	=
RVAL	647:12	647:12	15	codep -> next
FIELD	647:12	647:19	16	codep -> next
LEAF_NODE	647:12	647:12	17	codep
LEAF_NODE	647:17	647:17	17	->
LEAF_NODE	647:19	647:19	17	next
LEAF_NODE	647:23	647:23	13	;
LEAF_NODE	648:3	648:3	11	}
LEAF_NODE	648:18	648:18	9	;
JUMP_STATEMENT	649:3	649:13	9	return ( 1 ) ;
KEYWORD	649:3	649:3	10	return
LEAF_NODE	649:3	649:3	11	return
DESTINATION	649:10	649:10	10	( 1 )
EXPR	649:10	649:12	11	( 1 )
LEAF_NODE	649:10	649:10	12	(
FIELD	649:11	649:11	12	1
LEAF_NODE	649:11	649:11	13	1
LEAF_NODE	649:12	649:12	12	)
LEAF_NODE	649:13	649:13	10	;
LEAF_NODE	650:2	650:2	8	}
EXPR_STATEMENT	654:2	654:15	6	op += residue ;
EXPR	654:2	654:2	7	op += residue
ASSIGN	654:2	654:8	8	op += residue
LVAL	654:2	654:2	9	op
FIELD	654:2	654:2	10	op
LEAF_NODE	654:2	654:2	11	op
ASSIGN_OP	654:5	654:5	9	+=
LEAF_NODE	654:5	654:5	10	+=
RVAL	654:8	654:8	9	residue
FIELD	654:8	654:8	10	residue
LEAF_NODE	654:8	654:8	11	residue
LEAF_NODE	654:15	654:15	7	;
EXPR_STATEMENT	655:2	655:16	6	occ -= residue ;
EXPR	655:2	655:2	7	occ -= residue
ASSIGN	655:2	655:9	8	occ -= residue
LVAL	655:2	655:2	9	occ
FIELD	655:2	655:2	10	occ
LEAF_NODE	655:2	655:2	11	occ
ASSIGN_OP	655:6	655:6	9	-=
LEAF_NODE	655:6	655:6	10	-=
RVAL	655:9	655:9	9	residue
FIELD	655:9	655:9	10	residue
LEAF_NODE	655:9	655:9	11	residue
LEAF_NODE	655:16	655:16	7	;
EXPR_STATEMENT	656:2	656:9	6	tp = op ;
EXPR	656:2	656:2	7	tp = op
ASSIGN	656:2	656:7	8	tp = op
LVAL	656:2	656:2	9	tp
FIELD	656:2	656:2	10	tp
LEAF_NODE	656:2	656:2	11	tp
ASSIGN_OP	656:5	656:5	9	=
LEAF_NODE	656:5	656:5	10	=
RVAL	656:7	656:7	9	op
FIELD	656:7	656:7	10	op
LEAF_NODE	656:7	656:7	11	op
LEAF_NODE	656:9	656:9	7	;
ITERATION	657:2	657:5	6	
KEYWORD	657:2	657:2	7	do
LEAF_NODE	657:2	657:2	8	do
LEAF_NODE	660:10	660:10	7	(
CONDITION	660:11	660:11	7	-- residue
EXPR	660:11	660:13	8	-- residue
LEAF_NODE	660:11	660:11	9	--
FIELD	660:13	660:13	9	residue
LEAF_NODE	660:13	660:13	10	residue
LEAF_NODE	660:20	660:20	7	)
STATEMENTS	657:5	660:2	7	
LEAF_NODE	657:5	657:5	8	{
STATEMENTS	658:3	659:3	8	
LEAF_NODE	658:3	658:3	9	*
EXPR_STATEMENT	658:4	658:23	9	-- tp = codep -> value ;
EXPR	658:4	658:4	10	-- tp = codep -> value
ASSIGN	658:4	658:11	11	-- tp = codep -> value
LVAL	658:4	658:6	12	-- tp
LEAF_NODE	658:4	658:4	13	--
FIELD	658:6	658:6	13	tp
LEAF_NODE	658:6	658:6	14	tp
ASSIGN_OP	658:9	658:9	12	=
LEAF_NODE	658:9	658:9	13	=
RVAL	658:11	658:11	12	codep -> value
FIELD	658:11	658:18	13	codep -> value
LEAF_NODE	658:11	658:11	14	codep
LEAF_NODE	658:16	658:16	14	->
LEAF_NODE	658:18	658:18	14	value
LEAF_NODE	658:23	658:23	10	;
EXPR_STATEMENT	659:3	659:22	9	codep = codep -> next ;
EXPR	659:3	659:3	10	codep = codep -> next
ASSIGN	659:3	659:11	11	codep = codep -> next
LVAL	659:3	659:3	12	codep
FIELD	659:3	659:3	13	codep
LEAF_NODE	659:3	659:3	14	codep
ASSIGN_OP	659:9	659:9	12	=
LEAF_NODE	659:9	659:9	13	=
RVAL	659:11	659:11	12	codep -> next
FIELD	659:11	659:18	13	codep -> next
LEAF_NODE	659:11	659:11	14	codep
LEAF_NODE	659:16	659:16	14	->
LEAF_NODE	659:18	659:18	14	next
LEAF_NODE	659:22	659:22	10	;
LEAF_NODE	660:2	660:2	8	}
LEAF_NODE	660:21	660:21	6	;
EXPR_STATEMENT	661:2	661:21	6	sp -> dec_restart = 0 ;
EXPR	661:2	661:2	7	sp -> dec_restart = 0
ASSIGN	661:2	661:20	8	sp -> dec_restart = 0
LVAL	661:2	661:2	9	sp -> dec_restart
FIELD	661:2	661:6	10	sp -> dec_restart
LEAF_NODE	661:2	661:2	11	sp
LEAF_NODE	661:4	661:4	11	->
LEAF_NODE	661:6	661:6	11	dec_restart
ASSIGN_OP	661:18	661:18	9	=
LEAF_NODE	661:18	661:18	10	=
RVAL	661:20	661:20	9	0
FIELD	661:20	661:20	10	0
LEAF_NODE	661:20	661:20	11	0
LEAF_NODE	661:21	661:21	7	;
LEAF_NODE	662:1	662:1	5	}
EXPR_STATEMENT	664:1	664:37	3	bp = ( unsigned char * ) tif -> tif_rawcp ;
EXPR	664:1	664:1	4	bp = ( unsigned char * ) tif -> tif_rawcp
ASSIGN	664:1	664:6	5	bp = ( unsigned char * ) tif -> tif_rawcp
LVAL	664:1	664:1	6	bp
FIELD	664:1	664:1	7	bp
LEAF_NODE	664:1	664:1	8	bp
ASSIGN_OP	664:4	664:4	6	=
LEAF_NODE	664:4	664:4	7	=
RVAL	664:6	664:23	6	( unsigned char * ) tif -> tif_rawcp
LEAF_NODE	664:6	664:6	7	(
TYPE_NAME	664:7	664:16	7	unsigned char
LEAF_NODE	664:7	664:7	8	unsigned
LEAF_NODE	664:16	664:16	8	char
LEAF_NODE	664:21	664:21	7	*
LEAF_NODE	664:22	664:22	7	)
FIELD	664:23	664:28	7	tif -> tif_rawcp
LEAF_NODE	664:23	664:23	8	tif
LEAF_NODE	664:26	664:26	8	->
LEAF_NODE	664:28	664:28	8	tif_rawcp
LEAF_NODE	664:37	664:37	4	;
EXPR_STATEMENT	666:1	666:72	3	sp -> dec_bitsleft += ( ( ( uint64 ) tif -> tif_rawcc - sp -> old_tif_rawcc ) << 3 ) ;
EXPR	666:1	666:1	4	sp -> dec_bitsleft += ( ( ( uint64 ) tif -> tif_rawcc - sp -> old_tif_rawcc ) << 3 )
ASSIGN	666:1	666:21	5	sp -> dec_bitsleft += ( ( ( uint64 ) tif -> tif_rawcc - sp -> old_tif_rawcc ) << 3 )
LVAL	666:1	666:1	6	sp -> dec_bitsleft
FIELD	666:1	666:5	7	sp -> dec_bitsleft
LEAF_NODE	666:1	666:1	8	sp
LEAF_NODE	666:3	666:3	8	->
LEAF_NODE	666:5	666:5	8	dec_bitsleft
ASSIGN_OP	666:18	666:18	6	+=
LEAF_NODE	666:18	666:18	7	+=
RVAL	666:21	666:71	6	( ( ( uint64 ) tif -> tif_rawcc - sp -> old_tif_rawcc ) << 3 )
LEAF_NODE	666:21	666:21	7	(
LEAF_NODE	666:22	666:22	7	(
LEAF_NODE	666:23	666:23	7	(
TYPE_NAME	666:24	666:24	7	uint64
LEAF_NODE	666:24	666:24	8	uint64
LEAF_NODE	666:30	666:30	7	)
FIELD	666:31	666:36	7	tif -> tif_rawcc
LEAF_NODE	666:31	666:31	8	tif
LEAF_NODE	666:34	666:34	8	->
LEAF_NODE	666:36	666:36	8	tif_rawcc
LEAF_NODE	666:46	666:46	7	-
FIELD	666:48	666:52	7	sp -> old_tif_rawcc
LEAF_NODE	666:48	666:48	8	sp
LEAF_NODE	666:50	666:50	8	->
LEAF_NODE	666:52	666:52	8	old_tif_rawcc
LEAF_NODE	666:65	666:65	7	)
LEAF_NODE	666:67	666:67	7	<<
FIELD	666:70	666:70	7	3
LEAF_NODE	666:70	666:70	8	3
LEAF_NODE	666:71	666:71	7	)
LEAF_NODE	666:72	666:72	4	;
EXPR_STATEMENT	668:1	668:22	3	nbits = sp -> lzw_nbits ;
EXPR	668:1	668:1	4	nbits = sp -> lzw_nbits
ASSIGN	668:1	668:9	5	nbits = sp -> lzw_nbits
LVAL	668:1	668:1	6	nbits
FIELD	668:1	668:1	7	nbits
LEAF_NODE	668:1	668:1	8	nbits
ASSIGN_OP	668:7	668:7	6	=
LEAF_NODE	668:7	668:7	7	=
RVAL	668:9	668:9	6	sp -> lzw_nbits
FIELD	668:9	668:13	7	sp -> lzw_nbits
LEAF_NODE	668:9	668:9	8	sp
LEAF_NODE	668:11	668:11	8	->
LEAF_NODE	668:13	668:13	8	lzw_nbits
LEAF_NODE	668:22	668:22	4	;
EXPR_STATEMENT	669:1	669:28	3	nextdata = sp -> lzw_nextdata ;
EXPR	669:1	669:1	4	nextdata = sp -> lzw_nextdata
ASSIGN	669:1	669:12	5	nextdata = sp -> lzw_nextdata
LVAL	669:1	669:1	6	nextdata
FIELD	669:1	669:1	7	nextdata
LEAF_NODE	669:1	669:1	8	nextdata
ASSIGN_OP	669:10	669:10	6	=
LEAF_NODE	669:10	669:10	7	=
RVAL	669:12	669:12	6	sp -> lzw_nextdata
FIELD	669:12	669:16	7	sp -> lzw_nextdata
LEAF_NODE	669:12	669:12	8	sp
LEAF_NODE	669:14	669:14	8	->
LEAF_NODE	669:16	669:16	8	lzw_nextdata
LEAF_NODE	669:28	669:28	4	;
EXPR_STATEMENT	670:1	670:28	3	nextbits = sp -> lzw_nextbits ;
EXPR	670:1	670:1	4	nextbits = sp -> lzw_nextbits
ASSIGN	670:1	670:12	5	nextbits = sp -> lzw_nextbits
LVAL	670:1	670:1	6	nextbits
FIELD	670:1	670:1	7	nextbits
LEAF_NODE	670:1	670:1	8	nextbits
ASSIGN_OP	670:10	670:10	6	=
LEAF_NODE	670:10	670:10	7	=
RVAL	670:12	670:12	6	sp -> lzw_nextbits
FIELD	670:12	670:16	7	sp -> lzw_nextbits
LEAF_NODE	670:12	670:12	8	sp
LEAF_NODE	670:14	670:14	8	->
LEAF_NODE	670:16	670:16	8	lzw_nextbits
LEAF_NODE	670:28	670:28	4	;
EXPR_STATEMENT	671:1	671:30	3	nbitsmask = sp -> dec_nbitsmask ;
EXPR	671:1	671:1	4	nbitsmask = sp -> dec_nbitsmask
ASSIGN	671:1	671:13	5	nbitsmask = sp -> dec_nbitsmask
LVAL	671:1	671:1	6	nbitsmask
FIELD	671:1	671:1	7	nbitsmask
LEAF_NODE	671:1	671:1	8	nbitsmask
ASSIGN_OP	671:11	671:11	6	=
LEAF_NODE	671:11	671:11	7	=
RVAL	671:13	671:13	6	sp -> dec_nbitsmask
FIELD	671:13	671:17	7	sp -> dec_nbitsmask
LEAF_NODE	671:13	671:13	8	sp
LEAF_NODE	671:15	671:15	8	->
LEAF_NODE	671:17	671:17	8	dec_nbitsmask
LEAF_NODE	671:30	671:30	4	;
EXPR_STATEMENT	672:1	672:28	3	oldcodep = sp -> dec_oldcodep ;
EXPR	672:1	672:1	4	oldcodep = sp -> dec_oldcodep
ASSIGN	672:1	672:12	5	oldcodep = sp -> dec_oldcodep
LVAL	672:1	672:1	6	oldcodep
FIELD	672:1	672:1	7	oldcodep
LEAF_NODE	672:1	672:1	8	oldcodep
ASSIGN_OP	672:10	672:10	6	=
LEAF_NODE	672:10	672:10	7	=
RVAL	672:12	672:12	6	sp -> dec_oldcodep
FIELD	672:12	672:16	7	sp -> dec_oldcodep
LEAF_NODE	672:12	672:12	8	sp
LEAF_NODE	672:14	672:14	8	->
LEAF_NODE	672:16	672:16	8	dec_oldcodep
LEAF_NODE	672:28	672:28	4	;
EXPR_STATEMENT	673:1	673:30	3	free_entp = sp -> dec_free_entp ;
EXPR	673:1	673:1	4	free_entp = sp -> dec_free_entp
ASSIGN	673:1	673:13	5	free_entp = sp -> dec_free_entp
LVAL	673:1	673:1	6	free_entp
FIELD	673:1	673:1	7	free_entp
LEAF_NODE	673:1	673:1	8	free_entp
ASSIGN_OP	673:11	673:11	6	=
LEAF_NODE	673:11	673:11	7	=
RVAL	673:13	673:13	6	sp -> dec_free_entp
FIELD	673:13	673:17	7	sp -> dec_free_entp
LEAF_NODE	673:13	673:13	8	sp
LEAF_NODE	673:15	673:15	8	->
LEAF_NODE	673:17	673:17	8	dec_free_entp
LEAF_NODE	673:30	673:30	4	;
EXPR_STATEMENT	674:1	674:28	3	maxcodep = sp -> dec_maxcodep ;
EXPR	674:1	674:1	4	maxcodep = sp -> dec_maxcodep
ASSIGN	674:1	674:12	5	maxcodep = sp -> dec_maxcodep
LVAL	674:1	674:1	6	maxcodep
FIELD	674:1	674:1	7	maxcodep
LEAF_NODE	674:1	674:1	8	maxcodep
ASSIGN_OP	674:10	674:10	6	=
LEAF_NODE	674:10	674:10	7	=
RVAL	674:12	674:12	6	sp -> dec_maxcodep
FIELD	674:12	674:16	7	sp -> dec_maxcodep
LEAF_NODE	674:12	674:12	8	sp
LEAF_NODE	674:14	674:14	8	->
LEAF_NODE	674:16	674:16	8	dec_maxcodep
LEAF_NODE	674:28	674:28	4	;
ITERATION	676:1	676:17	3	
KEYWORD	676:1	676:1	4	while
LEAF_NODE	676:1	676:1	5	while
LEAF_NODE	676:7	676:7	4	(
CONDITION	676:8	676:8	4	occ > 0
EXPR	676:8	676:14	5	occ > 0
FIELD	676:8	676:8	6	occ
LEAF_NODE	676:8	676:8	7	occ
REL_OPERATOR	676:12	676:12	6	>
LEAF_NODE	676:12	676:12	7	>
FIELD	676:14	676:14	6	0
LEAF_NODE	676:14	676:14	7	0
LEAF_NODE	676:15	676:15	4	)
STATEMENTS	676:17	780:1	4	
LEAF_NODE	676:17	676:17	5	{
STATEMENTS	677:2	776:4	5	
EXPR_STATEMENT	677:2	677:48	6	NextCode ( tif , sp , bp , code , GetNextCodeCompat ) ;
EXPR	677:2	677:2	7	NextCode ( tif , sp , bp , code , GetNextCodeCompat )
FUNCTION_CALL	677:2	677:47	8	NextCode ( tif , sp , bp , code , GetNextCodeCompat )
CALLEE	677:2	677:2	9	NextCode
LEAF_NODE	677:2	677:2	10	NextCode
LEAF_NODE	677:10	677:10	9	(
ARGUMENT	677:11	677:11	9	tif
FIELD	677:11	677:11	10	tif
LEAF_NODE	677:11	677:11	11	tif
LEAF_NODE	677:14	677:14	9	,
ARGUMENT	677:16	677:16	9	sp
FIELD	677:16	677:16	10	sp
LEAF_NODE	677:16	677:16	11	sp
LEAF_NODE	677:18	677:18	9	,
ARGUMENT	677:20	677:20	9	bp
FIELD	677:20	677:20	10	bp
LEAF_NODE	677:20	677:20	11	bp
LEAF_NODE	677:22	677:22	9	,
ARGUMENT	677:24	677:24	9	code
FIELD	677:24	677:24	10	code
LEAF_NODE	677:24	677:24	11	code
LEAF_NODE	677:28	677:28	9	,
ARGUMENT	677:30	677:30	9	GetNextCodeCompat
FIELD	677:30	677:30	10	GetNextCodeCompat
LEAF_NODE	677:30	677:30	11	GetNextCodeCompat
LEAF_NODE	677:47	677:47	9	)
LEAF_NODE	677:48	677:48	7	;
SELECTION	678:2	679:3	6	
KEYWORD	678:2	678:2	7	if
LEAF_NODE	678:2	678:2	8	if
LEAF_NODE	678:5	678:5	7	(
CONDITION	678:6	678:6	7	code == CODE_EOI
EXPR	678:6	678:14	8	code == CODE_EOI
FIELD	678:6	678:6	9	code
LEAF_NODE	678:6	678:6	10	code
EQ_OPERATOR	678:11	678:11	9	==
LEAF_NODE	678:11	678:11	10	==
FIELD	678:14	678:14	9	CODE_EOI
LEAF_NODE	678:14	678:14	10	CODE_EOI
LEAF_NODE	678:22	678:22	7	)
STATEMENTS	679:3	679:3	7	
JUMP_STATEMENT	679:3	679:8	8	break DESTINATION ;
KEYWORD	679:3	679:3	9	break
LEAF_NODE	679:3	679:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	679:8	679:8	9	;
SELECTION	680:2	680:26	6	
KEYWORD	680:2	680:2	7	if
LEAF_NODE	680:2	680:2	8	if
LEAF_NODE	680:5	680:5	7	(
CONDITION	680:6	680:6	7	code == CODE_CLEAR
EXPR	680:6	680:14	8	code == CODE_CLEAR
FIELD	680:6	680:6	9	code
LEAF_NODE	680:6	680:6	10	code
EQ_OPERATOR	680:11	680:11	9	==
LEAF_NODE	680:11	680:11	10	==
FIELD	680:14	680:14	9	CODE_CLEAR
LEAF_NODE	680:14	680:14	10	CODE_CLEAR
LEAF_NODE	680:24	680:24	7	)
STATEMENTS	680:26	702:2	7	
LEAF_NODE	680:26	680:26	8	{
STATEMENTS	681:3	701:3	8	
ITERATION	681:3	681:6	9	
KEYWORD	681:3	681:3	10	do
LEAF_NODE	681:3	681:3	11	do
LEAF_NODE	689:11	689:11	10	(
CONDITION	689:12	689:12	10	code == CODE_CLEAR
EXPR	689:12	689:20	11	code == CODE_CLEAR
FIELD	689:12	689:12	12	code
LEAF_NODE	689:12	689:12	13	code
EQ_OPERATOR	689:17	689:17	12	==
LEAF_NODE	689:17	689:17	13	==
FIELD	689:20	689:20	12	CODE_CLEAR
LEAF_NODE	689:20	689:20	13	CODE_CLEAR
LEAF_NODE	689:30	689:30	10	)
STATEMENTS	681:6	689:3	10	
LEAF_NODE	681:6	681:6	11	{
STATEMENTS	682:4	688:4	11	
EXPR_STATEMENT	682:4	682:44	12	free_entp = sp -> dec_codetab + CODE_FIRST ;
EXPR	682:4	682:4	13	free_entp = sp -> dec_codetab + CODE_FIRST
ASSIGN	682:4	682:16	14	free_entp = sp -> dec_codetab + CODE_FIRST
LVAL	682:4	682:4	15	free_entp
FIELD	682:4	682:4	16	free_entp
LEAF_NODE	682:4	682:4	17	free_entp
ASSIGN_OP	682:14	682:14	15	=
LEAF_NODE	682:14	682:14	16	=
RVAL	682:16	682:34	15	sp -> dec_codetab + CODE_FIRST
FIELD	682:16	682:20	16	sp -> dec_codetab
LEAF_NODE	682:16	682:16	17	sp
LEAF_NODE	682:18	682:18	17	->
LEAF_NODE	682:20	682:20	17	dec_codetab
LEAF_NODE	682:32	682:32	16	+
FIELD	682:34	682:34	16	CODE_FIRST
LEAF_NODE	682:34	682:34	17	CODE_FIRST
LEAF_NODE	682:44	682:44	13	;
EXPR_STATEMENT	683:4	684:48	12	_TIFFmemset ( free_entp , 0 , ( CSIZE - CODE_FIRST ) * sizeof ( code_t ) ) ;
EXPR	683:4	683:4	13	_TIFFmemset ( free_entp , 0 , ( CSIZE - CODE_FIRST ) * sizeof ( code_t ) )
FUNCTION_CALL	683:4	684:47	14	_TIFFmemset ( free_entp , 0 , ( CSIZE - CODE_FIRST ) * sizeof ( code_t ) )
CALLEE	683:4	683:4	15	_TIFFmemset
LEAF_NODE	683:4	683:4	16	_TIFFmemset
LEAF_NODE	683:15	683:15	15	(
ARGUMENT	683:16	683:16	15	free_entp
FIELD	683:16	683:16	16	free_entp
LEAF_NODE	683:16	683:16	17	free_entp
LEAF_NODE	683:25	683:25	15	,
ARGUMENT	683:27	683:27	15	0
FIELD	683:27	683:27	16	0
LEAF_NODE	683:27	683:27	17	0
LEAF_NODE	683:28	683:28	15	,
ARGUMENT	684:9	684:32	15	( CSIZE - CODE_FIRST ) * sizeof ( code_t )
LEAF_NODE	684:9	684:9	16	(
FIELD	684:10	684:10	16	CSIZE
LEAF_NODE	684:10	684:10	17	CSIZE
LEAF_NODE	684:16	684:16	16	-
FIELD	684:18	684:18	16	CODE_FIRST
LEAF_NODE	684:18	684:18	17	CODE_FIRST
LEAF_NODE	684:28	684:28	16	)
LEAF_NODE	684:30	684:30	16	*
FUNCTION_CALL	684:32	684:46	16	sizeof ( code_t )
CALLEE	684:32	684:32	17	sizeof
LEAF_NODE	684:32	684:32	18	sizeof
LEAF_NODE	684:39	684:39	17	(
ARGUMENT	684:40	684:40	17	code_t
FIELD	684:40	684:40	18	code_t
LEAF_NODE	684:40	684:40	19	code_t
LEAF_NODE	684:46	684:46	17	)
LEAF_NODE	684:47	684:47	15	)
LEAF_NODE	684:48	684:48	13	;
EXPR_STATEMENT	685:4	685:20	12	nbits = BITS_MIN ;
EXPR	685:4	685:4	13	nbits = BITS_MIN
ASSIGN	685:4	685:12	14	nbits = BITS_MIN
LVAL	685:4	685:4	15	nbits
FIELD	685:4	685:4	16	nbits
LEAF_NODE	685:4	685:4	17	nbits
ASSIGN_OP	685:10	685:10	15	=
LEAF_NODE	685:10	685:10	16	=
RVAL	685:12	685:12	15	BITS_MIN
FIELD	685:12	685:12	16	BITS_MIN
LEAF_NODE	685:12	685:12	17	BITS_MIN
LEAF_NODE	685:20	685:20	13	;
EXPR_STATEMENT	686:4	686:33	12	nbitsmask = MAXCODE ( BITS_MIN ) ;
EXPR	686:4	686:4	13	nbitsmask = MAXCODE ( BITS_MIN )
ASSIGN	686:4	686:16	14	nbitsmask = MAXCODE ( BITS_MIN )
LVAL	686:4	686:4	15	nbitsmask
FIELD	686:4	686:4	16	nbitsmask
LEAF_NODE	686:4	686:4	17	nbitsmask
ASSIGN_OP	686:14	686:14	15	=
LEAF_NODE	686:14	686:14	16	=
RVAL	686:16	686:16	15	MAXCODE ( BITS_MIN )
FUNCTION_CALL	686:16	686:32	16	MAXCODE ( BITS_MIN )
CALLEE	686:16	686:16	17	MAXCODE
LEAF_NODE	686:16	686:16	18	MAXCODE
LEAF_NODE	686:23	686:23	17	(
ARGUMENT	686:24	686:24	17	BITS_MIN
FIELD	686:24	686:24	18	BITS_MIN
LEAF_NODE	686:24	686:24	19	BITS_MIN
LEAF_NODE	686:32	686:32	17	)
LEAF_NODE	686:33	686:33	13	;
EXPR_STATEMENT	687:4	687:42	12	maxcodep = sp -> dec_codetab + nbitsmask ;
EXPR	687:4	687:4	13	maxcodep = sp -> dec_codetab + nbitsmask
ASSIGN	687:4	687:15	14	maxcodep = sp -> dec_codetab + nbitsmask
LVAL	687:4	687:4	15	maxcodep
FIELD	687:4	687:4	16	maxcodep
LEAF_NODE	687:4	687:4	17	maxcodep
ASSIGN_OP	687:13	687:13	15	=
LEAF_NODE	687:13	687:13	16	=
RVAL	687:15	687:33	15	sp -> dec_codetab + nbitsmask
FIELD	687:15	687:19	16	sp -> dec_codetab
LEAF_NODE	687:15	687:15	17	sp
LEAF_NODE	687:17	687:17	17	->
LEAF_NODE	687:19	687:19	17	dec_codetab
LEAF_NODE	687:31	687:31	16	+
FIELD	687:33	687:33	16	nbitsmask
LEAF_NODE	687:33	687:33	17	nbitsmask
LEAF_NODE	687:42	687:42	13	;
EXPR_STATEMENT	688:4	688:50	12	NextCode ( tif , sp , bp , code , GetNextCodeCompat ) ;
EXPR	688:4	688:4	13	NextCode ( tif , sp , bp , code , GetNextCodeCompat )
FUNCTION_CALL	688:4	688:49	14	NextCode ( tif , sp , bp , code , GetNextCodeCompat )
CALLEE	688:4	688:4	15	NextCode
LEAF_NODE	688:4	688:4	16	NextCode
LEAF_NODE	688:12	688:12	15	(
ARGUMENT	688:13	688:13	15	tif
FIELD	688:13	688:13	16	tif
LEAF_NODE	688:13	688:13	17	tif
LEAF_NODE	688:16	688:16	15	,
ARGUMENT	688:18	688:18	15	sp
FIELD	688:18	688:18	16	sp
LEAF_NODE	688:18	688:18	17	sp
LEAF_NODE	688:20	688:20	15	,
ARGUMENT	688:22	688:22	15	bp
FIELD	688:22	688:22	16	bp
LEAF_NODE	688:22	688:22	17	bp
LEAF_NODE	688:24	688:24	15	,
ARGUMENT	688:26	688:26	15	code
FIELD	688:26	688:26	16	code
LEAF_NODE	688:26	688:26	17	code
LEAF_NODE	688:30	688:30	15	,
ARGUMENT	688:32	688:32	15	GetNextCodeCompat
FIELD	688:32	688:32	16	GetNextCodeCompat
LEAF_NODE	688:32	688:32	17	GetNextCodeCompat
LEAF_NODE	688:49	688:49	15	)
LEAF_NODE	688:50	688:50	13	;
LEAF_NODE	689:3	689:3	11	}
LEAF_NODE	689:31	689:31	9	;
SELECTION	690:3	691:4	9	
KEYWORD	690:3	690:3	10	if
LEAF_NODE	690:3	690:3	11	if
LEAF_NODE	690:6	690:6	10	(
CONDITION	690:7	690:7	10	code == CODE_EOI
EXPR	690:7	690:15	11	code == CODE_EOI
FIELD	690:7	690:7	12	code
LEAF_NODE	690:7	690:7	13	code
EQ_OPERATOR	690:12	690:12	12	==
LEAF_NODE	690:12	690:12	13	==
FIELD	690:15	690:15	12	CODE_EOI
LEAF_NODE	690:15	690:15	13	CODE_EOI
LEAF_NODE	690:23	690:23	10	)
STATEMENTS	691:4	691:4	10	
JUMP_STATEMENT	691:4	691:9	11	break DESTINATION ;
KEYWORD	691:4	691:4	12	break
LEAF_NODE	691:4	691:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	691:9	691:9	12	;
SELECTION	692:3	692:26	9	
KEYWORD	692:3	692:3	10	if
LEAF_NODE	692:3	692:3	11	if
LEAF_NODE	692:6	692:6	10	(
CONDITION	692:7	692:7	10	code > CODE_CLEAR
EXPR	692:7	692:14	11	code > CODE_CLEAR
FIELD	692:7	692:7	12	code
LEAF_NODE	692:7	692:7	13	code
REL_OPERATOR	692:12	692:12	12	>
LEAF_NODE	692:12	692:12	13	>
FIELD	692:14	692:14	12	CODE_CLEAR
LEAF_NODE	692:14	692:14	13	CODE_CLEAR
LEAF_NODE	692:24	692:24	10	)
STATEMENTS	692:26	697:3	10	
LEAF_NODE	692:26	692:26	11	{
STATEMENTS	693:4	696:4	11	
EXPR_STATEMENT	693:4	695:23	12	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "LZWDecode: Corrupted LZW table at scanline %d" , tif -> tif_row ) ;
EXPR	693:4	693:4	13	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "LZWDecode: Corrupted LZW table at scanline %d" , tif -> tif_row )
FUNCTION_CALL	693:4	695:22	14	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "LZWDecode: Corrupted LZW table at scanline %d" , tif -> tif_row )
CALLEE	693:4	693:4	15	TIFFErrorExt
LEAF_NODE	693:4	693:4	16	TIFFErrorExt
LEAF_NODE	693:16	693:16	15	(
ARGUMENT	693:17	693:17	15	tif -> tif_clientdata
FIELD	693:17	693:22	16	tif -> tif_clientdata
LEAF_NODE	693:17	693:17	17	tif
LEAF_NODE	693:20	693:20	17	->
LEAF_NODE	693:22	693:22	17	tif_clientdata
LEAF_NODE	693:36	693:36	15	,
ARGUMENT	693:38	693:38	15	tif -> tif_name
FIELD	693:38	693:43	16	tif -> tif_name
LEAF_NODE	693:38	693:38	17	tif
LEAF_NODE	693:41	693:41	17	->
LEAF_NODE	693:43	693:43	17	tif_name
LEAF_NODE	693:51	693:51	15	,
ARGUMENT	694:4	694:4	15	"LZWDecode: Corrupted LZW table at scanline %d"
FIELD	694:4	694:4	16	"LZWDecode: Corrupted LZW table at scanline %d"
LEAF_NODE	694:4	694:4	17	"LZWDecode: Corrupted LZW table at scanline %d"
LEAF_NODE	694:51	694:51	15	,
ARGUMENT	695:10	695:10	15	tif -> tif_row
FIELD	695:10	695:15	16	tif -> tif_row
LEAF_NODE	695:10	695:10	17	tif
LEAF_NODE	695:13	695:13	17	->
LEAF_NODE	695:15	695:15	17	tif_row
LEAF_NODE	695:22	695:22	15	)
LEAF_NODE	695:23	695:23	13	;
JUMP_STATEMENT	696:4	696:14	12	return ( 0 ) ;
KEYWORD	696:4	696:4	13	return
LEAF_NODE	696:4	696:4	14	return
DESTINATION	696:11	696:11	13	( 0 )
EXPR	696:11	696:13	14	( 0 )
LEAF_NODE	696:11	696:11	15	(
FIELD	696:12	696:12	15	0
LEAF_NODE	696:12	696:12	16	0
LEAF_NODE	696:13	696:13	15	)
LEAF_NODE	696:14	696:14	13	;
LEAF_NODE	697:3	697:3	11	}
EXPR_STATEMENT	698:3	698:21	9	* op ++ = ( char ) code ;
EXPR	698:3	698:3	10	* op ++ = ( char ) code
ASSIGN	698:3	698:11	11	* op ++ = ( char ) code
LVAL	698:3	698:3	12	* op ++
UNARY_EXPR	698:3	698:4	13	* op ++
UNARY_OPERATOR	698:3	698:3	14	*
LEAF_NODE	698:3	698:3	15	*
FIELD	698:4	698:6	14	op ++
LEAF_NODE	698:4	698:4	15	op
LEAF_NODE	698:6	698:6	15	++
ASSIGN_OP	698:9	698:9	12	=
LEAF_NODE	698:9	698:9	13	=
RVAL	698:11	698:17	12	( char ) code
LEAF_NODE	698:11	698:11	13	(
TYPE_NAME	698:12	698:12	13	char
LEAF_NODE	698:12	698:12	14	char
LEAF_NODE	698:16	698:16	13	)
FIELD	698:17	698:17	13	code
LEAF_NODE	698:17	698:17	14	code
LEAF_NODE	698:21	698:21	10	;
EXPR_STATEMENT	699:3	699:8	9	occ -- ;
EXPR	699:3	699:3	10	occ --
FIELD	699:3	699:6	11	occ --
LEAF_NODE	699:3	699:3	12	occ
LEAF_NODE	699:6	699:6	12	--
LEAF_NODE	699:8	699:8	10	;
EXPR_STATEMENT	700:3	700:36	9	oldcodep = sp -> dec_codetab + code ;
EXPR	700:3	700:3	10	oldcodep = sp -> dec_codetab + code
ASSIGN	700:3	700:14	11	oldcodep = sp -> dec_codetab + code
LVAL	700:3	700:3	12	oldcodep
FIELD	700:3	700:3	13	oldcodep
LEAF_NODE	700:3	700:3	14	oldcodep
ASSIGN_OP	700:12	700:12	12	=
LEAF_NODE	700:12	700:12	13	=
RVAL	700:14	700:32	12	sp -> dec_codetab + code
FIELD	700:14	700:18	13	sp -> dec_codetab
LEAF_NODE	700:14	700:14	14	sp
LEAF_NODE	700:16	700:16	14	->
LEAF_NODE	700:18	700:18	14	dec_codetab
LEAF_NODE	700:30	700:30	13	+
FIELD	700:32	700:32	13	code
LEAF_NODE	700:32	700:32	14	code
LEAF_NODE	700:36	700:36	10	;
JUMP_STATEMENT	701:3	701:11	9	continue DESTINATION ;
KEYWORD	701:3	701:3	10	continue
LEAF_NODE	701:3	701:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	701:11	701:11	10	;
LEAF_NODE	702:2	702:2	8	}
EXPR_STATEMENT	703:2	703:32	6	codep = sp -> dec_codetab + code ;
EXPR	703:2	703:2	7	codep = sp -> dec_codetab + code
ASSIGN	703:2	703:10	8	codep = sp -> dec_codetab + code
LVAL	703:2	703:2	9	codep
FIELD	703:2	703:2	10	codep
LEAF_NODE	703:2	703:2	11	codep
ASSIGN_OP	703:8	703:8	9	=
LEAF_NODE	703:8	703:8	10	=
RVAL	703:10	703:28	9	sp -> dec_codetab + code
FIELD	703:10	703:14	10	sp -> dec_codetab
LEAF_NODE	703:10	703:10	11	sp
LEAF_NODE	703:12	703:12	11	->
LEAF_NODE	703:14	703:14	11	dec_codetab
LEAF_NODE	703:26	703:26	10	+
FIELD	703:28	703:28	10	code
LEAF_NODE	703:28	703:28	11	code
LEAF_NODE	703:32	703:32	7	;
SELECTION	708:2	709:44	6	
KEYWORD	708:2	708:2	7	if
LEAF_NODE	708:2	708:2	8	if
LEAF_NODE	708:5	708:5	7	(
CONDITION	708:6	708:6	7	free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ]
EXPR	708:6	708:6	8	free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ]
OR	708:6	709:6	9	free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ]
EXPR	708:6	708:18	10	free_entp < & sp -> dec_codetab [ 0 ]
FIELD	708:6	708:6	11	free_entp
LEAF_NODE	708:6	708:6	12	free_entp
REL_OPERATOR	708:16	708:16	11	<
LEAF_NODE	708:16	708:16	12	<
UNARY_EXPR	708:18	708:19	11	& sp -> dec_codetab [ 0 ]
UNARY_OPERATOR	708:18	708:18	12	&
LEAF_NODE	708:18	708:18	13	&
FIELD	708:19	708:36	12	sp -> dec_codetab [ 0 ]
LEAF_NODE	708:19	708:19	13	sp
LEAF_NODE	708:21	708:21	13	->
LEAF_NODE	708:23	708:23	13	dec_codetab
LEAF_NODE	708:34	708:34	13	[
EXPR	708:35	708:35	13	0
FIELD	708:35	708:35	14	0
LEAF_NODE	708:35	708:35	15	0
LEAF_NODE	708:36	708:36	13	]
LEAF_NODE	708:38	708:38	10	||
EXPR	709:6	709:19	10	free_entp >= & sp -> dec_codetab [ CSIZE ]
FIELD	709:6	709:6	11	free_entp
LEAF_NODE	709:6	709:6	12	free_entp
REL_OPERATOR	709:16	709:16	11	>=
LEAF_NODE	709:16	709:16	12	>=
UNARY_EXPR	709:19	709:20	11	& sp -> dec_codetab [ CSIZE ]
UNARY_OPERATOR	709:19	709:19	12	&
LEAF_NODE	709:19	709:19	13	&
FIELD	709:20	709:41	12	sp -> dec_codetab [ CSIZE ]
LEAF_NODE	709:20	709:20	13	sp
LEAF_NODE	709:22	709:22	13	->
LEAF_NODE	709:24	709:24	13	dec_codetab
LEAF_NODE	709:35	709:35	13	[
EXPR	709:36	709:36	13	CSIZE
FIELD	709:36	709:36	14	CSIZE
LEAF_NODE	709:36	709:36	15	CSIZE
LEAF_NODE	709:41	709:41	13	]
LEAF_NODE	709:42	709:42	7	)
STATEMENTS	709:44	713:2	7	
LEAF_NODE	709:44	709:44	8	{
STATEMENTS	710:3	712:3	8	
EXPR_STATEMENT	710:3	711:58	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row ) ;
EXPR	710:3	710:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row )
FUNCTION_CALL	710:3	711:57	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row )
CALLEE	710:3	710:3	12	TIFFErrorExt
LEAF_NODE	710:3	710:3	13	TIFFErrorExt
LEAF_NODE	710:15	710:15	12	(
ARGUMENT	710:16	710:16	12	tif -> tif_clientdata
FIELD	710:16	710:21	13	tif -> tif_clientdata
LEAF_NODE	710:16	710:16	14	tif
LEAF_NODE	710:19	710:19	14	->
LEAF_NODE	710:21	710:21	14	tif_clientdata
LEAF_NODE	710:35	710:35	12	,
ARGUMENT	710:37	710:37	12	module
FIELD	710:37	710:37	13	module
LEAF_NODE	710:37	710:37	14	module
LEAF_NODE	710:43	710:43	12	,
ARGUMENT	711:7	711:7	12	"Corrupted LZW table at scanline %d"
FIELD	711:7	711:7	13	"Corrupted LZW table at scanline %d"
LEAF_NODE	711:7	711:7	14	"Corrupted LZW table at scanline %d"
LEAF_NODE	711:43	711:43	12	,
ARGUMENT	711:45	711:45	12	tif -> tif_row
FIELD	711:45	711:50	13	tif -> tif_row
LEAF_NODE	711:45	711:45	14	tif
LEAF_NODE	711:48	711:48	14	->
LEAF_NODE	711:50	711:50	14	tif_row
LEAF_NODE	711:57	711:57	12	)
LEAF_NODE	711:58	711:58	10	;
JUMP_STATEMENT	712:3	712:13	9	return ( 0 ) ;
KEYWORD	712:3	712:3	10	return
LEAF_NODE	712:3	712:3	11	return
DESTINATION	712:10	712:10	10	( 0 )
EXPR	712:10	712:12	11	( 0 )
LEAF_NODE	712:10	712:10	12	(
FIELD	712:11	712:11	12	0
LEAF_NODE	712:11	712:11	13	0
LEAF_NODE	712:12	712:12	12	)
LEAF_NODE	712:13	712:13	10	;
LEAF_NODE	713:2	713:2	8	}
EXPR_STATEMENT	715:2	715:28	6	free_entp -> next = oldcodep ;
EXPR	715:2	715:2	7	free_entp -> next = oldcodep
ASSIGN	715:2	715:20	8	free_entp -> next = oldcodep
LVAL	715:2	715:2	9	free_entp -> next
FIELD	715:2	715:13	10	free_entp -> next
LEAF_NODE	715:2	715:2	11	free_entp
LEAF_NODE	715:11	715:11	11	->
LEAF_NODE	715:13	715:13	11	next
ASSIGN_OP	715:18	715:18	9	=
LEAF_NODE	715:18	715:18	10	=
RVAL	715:20	715:20	9	oldcodep
FIELD	715:20	715:20	10	oldcodep
LEAF_NODE	715:20	715:20	11	oldcodep
LEAF_NODE	715:28	715:28	7	;
SELECTION	716:2	717:50	6	
KEYWORD	716:2	716:2	7	if
LEAF_NODE	716:2	716:2	8	if
LEAF_NODE	716:5	716:5	7	(
CONDITION	716:6	716:6	7	free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
EXPR	716:6	716:6	8	free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
OR	716:6	717:6	9	free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
EXPR	716:6	716:24	10	free_entp -> next < & sp -> dec_codetab [ 0 ]
FIELD	716:6	716:17	11	free_entp -> next
LEAF_NODE	716:6	716:6	12	free_entp
LEAF_NODE	716:15	716:15	12	->
LEAF_NODE	716:17	716:17	12	next
REL_OPERATOR	716:22	716:22	11	<
LEAF_NODE	716:22	716:22	12	<
UNARY_EXPR	716:24	716:25	11	& sp -> dec_codetab [ 0 ]
UNARY_OPERATOR	716:24	716:24	12	&
LEAF_NODE	716:24	716:24	13	&
FIELD	716:25	716:42	12	sp -> dec_codetab [ 0 ]
LEAF_NODE	716:25	716:25	13	sp
LEAF_NODE	716:27	716:27	13	->
LEAF_NODE	716:29	716:29	13	dec_codetab
LEAF_NODE	716:40	716:40	13	[
EXPR	716:41	716:41	13	0
FIELD	716:41	716:41	14	0
LEAF_NODE	716:41	716:41	15	0
LEAF_NODE	716:42	716:42	13	]
LEAF_NODE	716:44	716:44	10	||
EXPR	717:6	717:25	10	free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
FIELD	717:6	717:17	11	free_entp -> next
LEAF_NODE	717:6	717:6	12	free_entp
LEAF_NODE	717:15	717:15	12	->
LEAF_NODE	717:17	717:17	12	next
REL_OPERATOR	717:22	717:22	11	>=
LEAF_NODE	717:22	717:22	12	>=
UNARY_EXPR	717:25	717:26	11	& sp -> dec_codetab [ CSIZE ]
UNARY_OPERATOR	717:25	717:25	12	&
LEAF_NODE	717:25	717:25	13	&
FIELD	717:26	717:47	12	sp -> dec_codetab [ CSIZE ]
LEAF_NODE	717:26	717:26	13	sp
LEAF_NODE	717:28	717:28	13	->
LEAF_NODE	717:30	717:30	13	dec_codetab
LEAF_NODE	717:41	717:41	13	[
EXPR	717:42	717:42	13	CSIZE
FIELD	717:42	717:42	14	CSIZE
LEAF_NODE	717:42	717:42	15	CSIZE
LEAF_NODE	717:47	717:47	13	]
LEAF_NODE	717:48	717:48	7	)
STATEMENTS	717:50	721:2	7	
LEAF_NODE	717:50	717:50	8	{
STATEMENTS	718:3	720:3	8	
EXPR_STATEMENT	718:3	719:58	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row ) ;
EXPR	718:3	718:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row )
FUNCTION_CALL	718:3	719:57	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupted LZW table at scanline %d" , tif -> tif_row )
CALLEE	718:3	718:3	12	TIFFErrorExt
LEAF_NODE	718:3	718:3	13	TIFFErrorExt
LEAF_NODE	718:15	718:15	12	(
ARGUMENT	718:16	718:16	12	tif -> tif_clientdata
FIELD	718:16	718:21	13	tif -> tif_clientdata
LEAF_NODE	718:16	718:16	14	tif
LEAF_NODE	718:19	718:19	14	->
LEAF_NODE	718:21	718:21	14	tif_clientdata
LEAF_NODE	718:35	718:35	12	,
ARGUMENT	718:37	718:37	12	module
FIELD	718:37	718:37	13	module
LEAF_NODE	718:37	718:37	14	module
LEAF_NODE	718:43	718:43	12	,
ARGUMENT	719:7	719:7	12	"Corrupted LZW table at scanline %d"
FIELD	719:7	719:7	13	"Corrupted LZW table at scanline %d"
LEAF_NODE	719:7	719:7	14	"Corrupted LZW table at scanline %d"
LEAF_NODE	719:43	719:43	12	,
ARGUMENT	719:45	719:45	12	tif -> tif_row
FIELD	719:45	719:50	13	tif -> tif_row
LEAF_NODE	719:45	719:45	14	tif
LEAF_NODE	719:48	719:48	14	->
LEAF_NODE	719:50	719:50	14	tif_row
LEAF_NODE	719:57	719:57	12	)
LEAF_NODE	719:58	719:58	10	;
JUMP_STATEMENT	720:3	720:13	9	return ( 0 ) ;
KEYWORD	720:3	720:3	10	return
LEAF_NODE	720:3	720:3	11	return
DESTINATION	720:10	720:10	10	( 0 )
EXPR	720:10	720:12	11	( 0 )
LEAF_NODE	720:10	720:10	12	(
FIELD	720:11	720:11	12	0
LEAF_NODE	720:11	720:11	13	0
LEAF_NODE	720:12	720:12	12	)
LEAF_NODE	720:13	720:13	10	;
LEAF_NODE	721:2	721:2	8	}
EXPR_STATEMENT	722:2	722:51	6	free_entp -> firstchar = free_entp -> next -> firstchar ;
EXPR	722:2	722:2	7	free_entp -> firstchar = free_entp -> next -> firstchar
ASSIGN	722:2	722:25	8	free_entp -> firstchar = free_entp -> next -> firstchar
LVAL	722:2	722:2	9	free_entp -> firstchar
FIELD	722:2	722:13	10	free_entp -> firstchar
LEAF_NODE	722:2	722:2	11	free_entp
LEAF_NODE	722:11	722:11	11	->
LEAF_NODE	722:13	722:13	11	firstchar
ASSIGN_OP	722:23	722:23	9	=
LEAF_NODE	722:23	722:23	10	=
RVAL	722:25	722:25	9	free_entp -> next -> firstchar
FIELD	722:25	722:42	10	free_entp -> next -> firstchar
LEAF_NODE	722:25	722:25	11	free_entp
LEAF_NODE	722:34	722:34	11	->
LEAF_NODE	722:36	722:36	11	next
LEAF_NODE	722:40	722:40	11	->
LEAF_NODE	722:42	722:42	11	firstchar
LEAF_NODE	722:51	722:51	7	;
EXPR_STATEMENT	723:2	723:47	6	free_entp -> length = free_entp -> next -> length + 1 ;
EXPR	723:2	723:2	7	free_entp -> length = free_entp -> next -> length + 1
ASSIGN	723:2	723:22	8	free_entp -> length = free_entp -> next -> length + 1
LVAL	723:2	723:2	9	free_entp -> length
FIELD	723:2	723:13	10	free_entp -> length
LEAF_NODE	723:2	723:2	11	free_entp
LEAF_NODE	723:11	723:11	11	->
LEAF_NODE	723:13	723:13	11	length
ASSIGN_OP	723:20	723:20	9	=
LEAF_NODE	723:20	723:20	10	=
RVAL	723:22	723:46	9	free_entp -> next -> length + 1
FIELD	723:22	723:39	10	free_entp -> next -> length
LEAF_NODE	723:22	723:22	11	free_entp
LEAF_NODE	723:31	723:31	11	->
LEAF_NODE	723:33	723:33	11	next
LEAF_NODE	723:37	723:37	11	->
LEAF_NODE	723:39	723:39	11	length
LEAF_NODE	723:45	723:45	10	+
FIELD	723:46	723:46	10	1
LEAF_NODE	723:46	723:46	11	1
LEAF_NODE	723:47	723:47	7	;
EXPR_STATEMENT	724:2	725:45	6	free_entp -> value = ( codep < free_entp ) ? codep -> firstchar : free_entp -> firstchar ;
EXPR	724:2	724:2	7	free_entp -> value = ( codep < free_entp ) ? codep -> firstchar : free_entp -> firstchar
ASSIGN	724:2	724:21	8	free_entp -> value = ( codep < free_entp ) ? codep -> firstchar : free_entp -> firstchar
LVAL	724:2	724:2	9	free_entp -> value
FIELD	724:2	724:13	10	free_entp -> value
LEAF_NODE	724:2	724:2	11	free_entp
LEAF_NODE	724:11	724:11	11	->
LEAF_NODE	724:13	724:13	11	value
ASSIGN_OP	724:19	724:19	9	=
LEAF_NODE	724:19	724:19	10	=
RVAL	724:21	724:21	9	( codep < free_entp ) ? codep -> firstchar : free_entp -> firstchar
COND_EXPR	724:21	725:25	10	( codep < free_entp ) ? codep -> firstchar : free_entp -> firstchar
CONDITION	724:21	724:39	11	( codep < free_entp )
LEAF_NODE	724:21	724:21	12	(
FIELD	724:22	724:22	12	codep
LEAF_NODE	724:22	724:22	13	codep
REL_OPERATOR	724:28	724:28	12	<
LEAF_NODE	724:28	724:28	13	<
FIELD	724:30	724:30	12	free_entp
LEAF_NODE	724:30	724:30	13	free_entp
LEAF_NODE	724:39	724:39	12	)
LEAF_NODE	724:41	724:41	11	?
EXPR	725:6	725:6	11	codep -> firstchar
FIELD	725:6	725:13	12	codep -> firstchar
LEAF_NODE	725:6	725:6	13	codep
LEAF_NODE	725:11	725:11	13	->
LEAF_NODE	725:13	725:13	13	firstchar
LEAF_NODE	725:23	725:23	11	:
FIELD	725:25	725:36	11	free_entp -> firstchar
LEAF_NODE	725:25	725:25	12	free_entp
LEAF_NODE	725:34	725:34	12	->
LEAF_NODE	725:36	725:36	12	firstchar
LEAF_NODE	725:45	725:45	7	;
SELECTION	726:2	726:30	6	
KEYWORD	726:2	726:2	7	if
LEAF_NODE	726:2	726:2	8	if
LEAF_NODE	726:5	726:5	7	(
CONDITION	726:6	726:6	7	++ free_entp > maxcodep
EXPR	726:6	726:20	8	++ free_entp > maxcodep
LEAF_NODE	726:6	726:6	9	++
FIELD	726:8	726:8	9	free_entp
LEAF_NODE	726:8	726:8	10	free_entp
REL_OPERATOR	726:18	726:18	9	>
LEAF_NODE	726:18	726:18	10	>
FIELD	726:20	726:20	9	maxcodep
LEAF_NODE	726:20	726:20	10	maxcodep
LEAF_NODE	726:28	726:28	7	)
STATEMENTS	726:30	731:2	7	
LEAF_NODE	726:30	726:30	8	{
STATEMENTS	727:3	730:3	8	
SELECTION	727:3	728:4	9	
KEYWORD	727:3	727:3	10	if
LEAF_NODE	727:3	727:3	11	if
LEAF_NODE	727:6	727:6	10	(
CONDITION	727:7	727:7	10	++ nbits > BITS_MAX
EXPR	727:7	727:17	11	++ nbits > BITS_MAX
LEAF_NODE	727:7	727:7	12	++
FIELD	727:9	727:9	12	nbits
LEAF_NODE	727:9	727:9	13	nbits
REL_OPERATOR	727:15	727:15	12	>
LEAF_NODE	727:15	727:15	13	>
FIELD	727:17	727:17	12	BITS_MAX
LEAF_NODE	727:17	727:17	13	BITS_MAX
LEAF_NODE	727:25	727:25	10	)
STATEMENTS	728:4	728:4	10	
EXPR_STATEMENT	728:4	728:20	11	nbits = BITS_MAX ;
EXPR	728:4	728:4	12	nbits = BITS_MAX
ASSIGN	728:4	728:12	13	nbits = BITS_MAX
LVAL	728:4	728:4	14	nbits
FIELD	728:4	728:4	15	nbits
LEAF_NODE	728:4	728:4	16	nbits
ASSIGN_OP	728:10	728:10	14	=
LEAF_NODE	728:10	728:10	15	=
RVAL	728:12	728:12	14	BITS_MAX
FIELD	728:12	728:12	15	BITS_MAX
LEAF_NODE	728:12	728:12	16	BITS_MAX
LEAF_NODE	728:20	728:20	12	;
EXPR_STATEMENT	729:3	729:29	9	nbitsmask = MAXCODE ( nbits ) ;
EXPR	729:3	729:3	10	nbitsmask = MAXCODE ( nbits )
ASSIGN	729:3	729:15	11	nbitsmask = MAXCODE ( nbits )
LVAL	729:3	729:3	12	nbitsmask
FIELD	729:3	729:3	13	nbitsmask
LEAF_NODE	729:3	729:3	14	nbitsmask
ASSIGN_OP	729:13	729:13	12	=
LEAF_NODE	729:13	729:13	13	=
RVAL	729:15	729:15	12	MAXCODE ( nbits )
FUNCTION_CALL	729:15	729:28	13	MAXCODE ( nbits )
CALLEE	729:15	729:15	14	MAXCODE
LEAF_NODE	729:15	729:15	15	MAXCODE
LEAF_NODE	729:22	729:22	14	(
ARGUMENT	729:23	729:23	14	nbits
FIELD	729:23	729:23	15	nbits
LEAF_NODE	729:23	729:23	16	nbits
LEAF_NODE	729:28	729:28	14	)
LEAF_NODE	729:29	729:29	10	;
EXPR_STATEMENT	730:3	730:41	9	maxcodep = sp -> dec_codetab + nbitsmask ;
EXPR	730:3	730:3	10	maxcodep = sp -> dec_codetab + nbitsmask
ASSIGN	730:3	730:14	11	maxcodep = sp -> dec_codetab + nbitsmask
LVAL	730:3	730:3	12	maxcodep
FIELD	730:3	730:3	13	maxcodep
LEAF_NODE	730:3	730:3	14	maxcodep
ASSIGN_OP	730:12	730:12	12	=
LEAF_NODE	730:12	730:12	13	=
RVAL	730:14	730:32	12	sp -> dec_codetab + nbitsmask
FIELD	730:14	730:18	13	sp -> dec_codetab
LEAF_NODE	730:14	730:14	14	sp
LEAF_NODE	730:16	730:16	14	->
LEAF_NODE	730:18	730:18	14	dec_codetab
LEAF_NODE	730:30	730:30	13	+
FIELD	730:32	730:32	13	nbitsmask
LEAF_NODE	730:32	730:32	14	nbitsmask
LEAF_NODE	730:41	730:41	10	;
LEAF_NODE	731:2	731:2	8	}
EXPR_STATEMENT	732:2	732:18	6	oldcodep = codep ;
EXPR	732:2	732:2	7	oldcodep = codep
ASSIGN	732:2	732:13	8	oldcodep = codep
LVAL	732:2	732:2	9	oldcodep
FIELD	732:2	732:2	10	oldcodep
LEAF_NODE	732:2	732:2	11	oldcodep
ASSIGN_OP	732:11	732:11	9	=
LEAF_NODE	732:11	732:11	10	=
RVAL	732:13	732:13	9	codep
FIELD	732:13	732:13	10	codep
LEAF_NODE	732:13	732:13	11	codep
LEAF_NODE	732:18	732:18	7	;
SELECTION	733:2	733:19	6	
KEYWORD	733:2	733:2	7	if
LEAF_NODE	733:2	733:2	8	if
LEAF_NODE	733:5	733:5	7	(
CONDITION	733:6	733:6	7	code >= 256
EXPR	733:6	733:14	8	code >= 256
FIELD	733:6	733:6	9	code
LEAF_NODE	733:6	733:6	10	code
REL_OPERATOR	733:11	733:11	9	>=
LEAF_NODE	733:11	733:11	10	>=
FIELD	733:14	733:14	9	256
LEAF_NODE	733:14	733:14	10	256
LEAF_NODE	733:17	733:17	7	)
STATEMENTS	733:19	776:2	7	
LEAF_NODE	733:19	733:19	8	{
STATEMENTS	738:3	775:3	8	
SELECTION	738:3	738:26	9	
KEYWORD	738:3	738:3	10	if
LEAF_NODE	738:3	738:3	11	if
LEAF_NODE	738:5	738:5	10	(
CONDITION	738:6	738:6	10	codep -> length == 0
EXPR	738:6	738:23	11	codep -> length == 0
FIELD	738:6	738:13	12	codep -> length
LEAF_NODE	738:6	738:6	13	codep
LEAF_NODE	738:11	738:11	13	->
LEAF_NODE	738:13	738:13	13	length
EQ_OPERATOR	738:20	738:20	12	==
LEAF_NODE	738:20	738:20	13	==
FIELD	738:23	738:23	12	0
LEAF_NODE	738:23	738:23	13	0
LEAF_NODE	738:24	738:24	10	)
STATEMENTS	738:26	744:3	10	
LEAF_NODE	738:26	738:26	11	{
STATEMENTS	739:4	743:4	11	
LEAF_NODE	739:4	739:4	12	TIFFErrorExt
LEAF_NODE	739:16	739:16	12	(
LEAF_NODE	739:17	739:17	12	tif
LEAF_NODE	739:20	739:20	12	->
LEAF_NODE	739:22	739:22	12	tif_clientdata
LEAF_NODE	739:36	739:36	12	,
LEAF_NODE	739:38	739:38	12	module
LEAF_NODE	739:44	739:44	12	,
LEAF_NODE	740:8	740:8	12	"Wrong length of decoded "
LEAF_NODE	741:8	741:8	12	"string: data probably corrupted at scanline %d"
LEAF_NODE	741:56	741:56	12	,
LEAF_NODE	742:8	742:8	12	tif
LEAF_NODE	742:11	742:11	12	->
LEAF_NODE	742:13	742:13	12	tif_row
LEAF_NODE	742:20	742:20	12	)
LEAF_NODE	742:21	742:21	12	;
JUMP_STATEMENT	743:4	743:14	12	return ( 0 ) ;
KEYWORD	743:4	743:4	13	return
LEAF_NODE	743:4	743:4	14	return
DESTINATION	743:11	743:11	13	( 0 )
EXPR	743:11	743:13	14	( 0 )
LEAF_NODE	743:11	743:11	15	(
FIELD	743:12	743:12	15	0
LEAF_NODE	743:12	743:12	16	0
LEAF_NODE	743:13	743:13	15	)
LEAF_NODE	743:14	743:14	13	;
LEAF_NODE	744:3	744:3	11	}
SELECTION	745:3	745:28	9	
KEYWORD	745:3	745:3	10	if
LEAF_NODE	745:3	745:3	11	if
LEAF_NODE	745:6	745:6	10	(
CONDITION	745:7	745:7	10	codep -> length > occ
EXPR	745:7	745:23	11	codep -> length > occ
FIELD	745:7	745:14	12	codep -> length
LEAF_NODE	745:7	745:7	13	codep
LEAF_NODE	745:12	745:12	13	->
LEAF_NODE	745:14	745:14	13	length
REL_OPERATOR	745:21	745:21	12	>
LEAF_NODE	745:21	745:21	13	>
FIELD	745:23	745:23	12	occ
LEAF_NODE	745:23	745:23	13	occ
LEAF_NODE	745:26	745:26	10	)
STATEMENTS	745:28	763:3	10	
LEAF_NODE	745:28	745:28	11	{
STATEMENTS	752:4	762:4	11	
EXPR_STATEMENT	752:4	752:25	12	sp -> dec_codep = codep ;
EXPR	752:4	752:4	13	sp -> dec_codep = codep
ASSIGN	752:4	752:20	14	sp -> dec_codep = codep
LVAL	752:4	752:4	15	sp -> dec_codep
FIELD	752:4	752:8	16	sp -> dec_codep
LEAF_NODE	752:4	752:4	17	sp
LEAF_NODE	752:6	752:6	17	->
LEAF_NODE	752:8	752:8	17	dec_codep
ASSIGN_OP	752:18	752:18	15	=
LEAF_NODE	752:18	752:18	16	=
RVAL	752:20	752:20	15	codep
FIELD	752:20	752:20	16	codep
LEAF_NODE	752:20	752:20	17	codep
LEAF_NODE	752:25	752:25	13	;
ITERATION	753:4	753:7	12	
KEYWORD	753:4	753:4	13	do
LEAF_NODE	753:4	753:4	14	do
LEAF_NODE	755:12	755:12	13	(
CONDITION	755:13	755:13	13	codep -> length > occ
EXPR	755:13	755:29	14	codep -> length > occ
FIELD	755:13	755:20	15	codep -> length
LEAF_NODE	755:13	755:13	16	codep
LEAF_NODE	755:18	755:18	16	->
LEAF_NODE	755:20	755:20	16	length
REL_OPERATOR	755:27	755:27	15	>
LEAF_NODE	755:27	755:27	16	>
FIELD	755:29	755:29	15	occ
LEAF_NODE	755:29	755:29	16	occ
LEAF_NODE	755:32	755:32	13	)
STATEMENTS	753:7	755:4	13	
LEAF_NODE	753:7	753:7	14	{
STATEMENTS	754:5	754:5	14	
EXPR_STATEMENT	754:5	754:24	15	codep = codep -> next ;
EXPR	754:5	754:5	16	codep = codep -> next
ASSIGN	754:5	754:13	17	codep = codep -> next
LVAL	754:5	754:5	18	codep
FIELD	754:5	754:5	19	codep
LEAF_NODE	754:5	754:5	20	codep
ASSIGN_OP	754:11	754:11	18	=
LEAF_NODE	754:11	754:11	19	=
RVAL	754:13	754:13	18	codep -> next
FIELD	754:13	754:20	19	codep -> next
LEAF_NODE	754:13	754:13	20	codep
LEAF_NODE	754:18	754:18	20	->
LEAF_NODE	754:20	754:20	20	next
LEAF_NODE	754:24	754:24	16	;
LEAF_NODE	755:4	755:4	14	}
LEAF_NODE	755:33	755:33	12	;
EXPR_STATEMENT	756:4	756:25	12	sp -> dec_restart = occ ;
EXPR	756:4	756:4	13	sp -> dec_restart = occ
ASSIGN	756:4	756:22	14	sp -> dec_restart = occ
LVAL	756:4	756:4	15	sp -> dec_restart
FIELD	756:4	756:8	16	sp -> dec_restart
LEAF_NODE	756:4	756:4	17	sp
LEAF_NODE	756:6	756:6	17	->
LEAF_NODE	756:8	756:8	17	dec_restart
ASSIGN_OP	756:20	756:20	15	=
LEAF_NODE	756:20	756:20	16	=
RVAL	756:22	756:22	15	occ
FIELD	756:22	756:22	16	occ
LEAF_NODE	756:22	756:22	17	occ
LEAF_NODE	756:25	756:25	13	;
EXPR_STATEMENT	757:4	757:17	12	tp = op + occ ;
EXPR	757:4	757:4	13	tp = op + occ
ASSIGN	757:4	757:9	14	tp = op + occ
LVAL	757:4	757:4	15	tp
FIELD	757:4	757:4	16	tp
LEAF_NODE	757:4	757:4	17	tp
ASSIGN_OP	757:7	757:7	15	=
LEAF_NODE	757:7	757:7	16	=
RVAL	757:9	757:14	15	op + occ
FIELD	757:9	757:9	16	op
LEAF_NODE	757:9	757:9	17	op
LEAF_NODE	757:12	757:12	16	+
FIELD	757:14	757:14	16	occ
LEAF_NODE	757:14	757:14	17	occ
LEAF_NODE	757:17	757:17	13	;
ITERATION	758:4	758:8	12	
KEYWORD	758:4	758:4	13	do
LEAF_NODE	758:4	758:4	14	do
LEAF_NODE	761:13	761:13	13	(
CONDITION	761:14	761:14	13	-- occ
EXPR	761:14	761:16	14	-- occ
LEAF_NODE	761:14	761:14	15	--
FIELD	761:16	761:16	15	occ
LEAF_NODE	761:16	761:16	16	occ
LEAF_NODE	761:19	761:19	13	)
STATEMENTS	758:8	761:4	13	
LEAF_NODE	758:8	758:8	14	{
STATEMENTS	759:5	760:5	14	
LEAF_NODE	759:5	759:5	15	*
EXPR_STATEMENT	759:6	759:25	15	-- tp = codep -> value ;
EXPR	759:6	759:6	16	-- tp = codep -> value
ASSIGN	759:6	759:13	17	-- tp = codep -> value
LVAL	759:6	759:8	18	-- tp
LEAF_NODE	759:6	759:6	19	--
FIELD	759:8	759:8	19	tp
LEAF_NODE	759:8	759:8	20	tp
ASSIGN_OP	759:11	759:11	18	=
LEAF_NODE	759:11	759:11	19	=
RVAL	759:13	759:13	18	codep -> value
FIELD	759:13	759:20	19	codep -> value
LEAF_NODE	759:13	759:13	20	codep
LEAF_NODE	759:18	759:18	20	->
LEAF_NODE	759:20	759:20	20	value
LEAF_NODE	759:25	759:25	16	;
EXPR_STATEMENT	760:5	760:24	15	codep = codep -> next ;
EXPR	760:5	760:5	16	codep = codep -> next
ASSIGN	760:5	760:13	17	codep = codep -> next
LVAL	760:5	760:5	18	codep
FIELD	760:5	760:5	19	codep
LEAF_NODE	760:5	760:5	20	codep
ASSIGN_OP	760:11	760:11	18	=
LEAF_NODE	760:11	760:11	19	=
RVAL	760:13	760:13	18	codep -> next
FIELD	760:13	760:20	19	codep -> next
LEAF_NODE	760:13	760:13	20	codep
LEAF_NODE	760:18	760:18	20	->
LEAF_NODE	760:20	760:20	20	next
LEAF_NODE	760:24	760:24	16	;
LEAF_NODE	761:4	761:4	14	}
LEAF_NODE	761:20	761:20	12	;
JUMP_STATEMENT	762:4	762:9	12	break DESTINATION ;
KEYWORD	762:4	762:4	13	break
LEAF_NODE	762:4	762:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	762:9	762:9	13	;
LEAF_NODE	763:3	763:3	11	}
EXPR_STATEMENT	764:3	764:22	9	len = codep -> length ;
EXPR	764:3	764:3	10	len = codep -> length
ASSIGN	764:3	764:9	11	len = codep -> length
LVAL	764:3	764:3	12	len
FIELD	764:3	764:3	13	len
LEAF_NODE	764:3	764:3	14	len
ASSIGN_OP	764:7	764:7	12	=
LEAF_NODE	764:7	764:7	13	=
RVAL	764:9	764:9	12	codep -> length
FIELD	764:9	764:16	13	codep -> length
LEAF_NODE	764:9	764:9	14	codep
LEAF_NODE	764:14	764:14	14	->
LEAF_NODE	764:16	764:16	14	length
LEAF_NODE	764:22	764:22	10	;
EXPR_STATEMENT	765:3	765:16	9	tp = op + len ;
EXPR	765:3	765:3	10	tp = op + len
ASSIGN	765:3	765:8	11	tp = op + len
LVAL	765:3	765:3	12	tp
FIELD	765:3	765:3	13	tp
LEAF_NODE	765:3	765:3	14	tp
ASSIGN_OP	765:6	765:6	12	=
LEAF_NODE	765:6	765:6	13	=
RVAL	765:8	765:13	12	op + len
FIELD	765:8	765:8	13	op
LEAF_NODE	765:8	765:8	14	op
LEAF_NODE	765:11	765:11	13	+
FIELD	765:13	765:13	13	len
LEAF_NODE	765:13	765:13	14	len
LEAF_NODE	765:16	765:16	10	;
ITERATION	766:3	766:6	9	
KEYWORD	766:3	766:3	10	do
LEAF_NODE	766:3	766:3	11	do
LEAF_NODE	772:11	772:11	10	(
CONDITION	772:12	772:12	10	codep && tp > op
EXPR	772:12	772:12	11	codep && tp > op
AND	772:12	772:21	12	codep && tp > op
EXPR	772:12	772:12	13	codep
FIELD	772:12	772:12	14	codep
LEAF_NODE	772:12	772:12	15	codep
LEAF_NODE	772:18	772:18	13	&&
EXPR	772:21	772:26	13	tp > op
FIELD	772:21	772:21	14	tp
LEAF_NODE	772:21	772:21	15	tp
REL_OPERATOR	772:24	772:24	14	>
LEAF_NODE	772:24	772:24	15	>
FIELD	772:26	772:26	14	op
LEAF_NODE	772:26	772:26	15	op
LEAF_NODE	772:28	772:28	10	)
STATEMENTS	766:6	772:3	10	
LEAF_NODE	766:6	766:6	11	{
STATEMENTS	767:4	771:4	11	
SIMPLE_DECL	767:4	767:9	12	int t ;
VAR_DECL	767:4	767:8	13	int t
TYPE	767:4	767:4	14	int
TYPE_NAME	767:4	767:4	15	int
LEAF_NODE	767:4	767:4	16	int
NAME	767:8	767:8	14	t
LEAF_NODE	767:8	767:8	15	t
LEAF_NODE	767:9	767:9	13	;
EXPR_STATEMENT	768:4	768:8	12	-- tp ;
EXPR	768:4	768:6	13	-- tp
LEAF_NODE	768:4	768:4	14	--
FIELD	768:6	768:6	14	tp
LEAF_NODE	768:6	768:6	15	tp
LEAF_NODE	768:8	768:8	13	;
EXPR_STATEMENT	769:4	769:20	12	t = codep -> value ;
EXPR	769:4	769:4	13	t = codep -> value
ASSIGN	769:4	769:8	14	t = codep -> value
LVAL	769:4	769:4	15	t
FIELD	769:4	769:4	16	t
LEAF_NODE	769:4	769:4	17	t
ASSIGN_OP	769:6	769:6	15	=
LEAF_NODE	769:6	769:6	16	=
RVAL	769:8	769:8	15	codep -> value
FIELD	769:8	769:15	16	codep -> value
LEAF_NODE	769:8	769:8	17	codep
LEAF_NODE	769:13	769:13	17	->
LEAF_NODE	769:15	769:15	17	value
LEAF_NODE	769:20	769:20	13	;
EXPR_STATEMENT	770:4	770:23	12	codep = codep -> next ;
EXPR	770:4	770:4	13	codep = codep -> next
ASSIGN	770:4	770:12	14	codep = codep -> next
LVAL	770:4	770:4	15	codep
FIELD	770:4	770:4	16	codep
LEAF_NODE	770:4	770:4	17	codep
ASSIGN_OP	770:10	770:10	15	=
LEAF_NODE	770:10	770:10	16	=
RVAL	770:12	770:12	15	codep -> next
FIELD	770:12	770:19	16	codep -> next
LEAF_NODE	770:12	770:12	17	codep
LEAF_NODE	770:17	770:17	17	->
LEAF_NODE	770:19	770:19	17	next
LEAF_NODE	770:23	770:23	13	;
EXPR_STATEMENT	771:4	771:17	12	* tp = ( char ) t ;
EXPR	771:4	771:4	13	* tp = ( char ) t
ASSIGN	771:4	771:10	14	* tp = ( char ) t
LVAL	771:4	771:4	15	* tp
UNARY_EXPR	771:4	771:5	16	* tp
UNARY_OPERATOR	771:4	771:4	17	*
LEAF_NODE	771:4	771:4	18	*
FIELD	771:5	771:5	17	tp
LEAF_NODE	771:5	771:5	18	tp
ASSIGN_OP	771:8	771:8	15	=
LEAF_NODE	771:8	771:8	16	=
RVAL	771:10	771:16	15	( char ) t
LEAF_NODE	771:10	771:10	16	(
TYPE_NAME	771:11	771:11	16	char
LEAF_NODE	771:11	771:11	17	char
LEAF_NODE	771:15	771:15	16	)
FIELD	771:16	771:16	16	t
LEAF_NODE	771:16	771:16	17	t
LEAF_NODE	771:17	771:17	13	;
LEAF_NODE	772:3	772:3	11	}
LEAF_NODE	772:29	772:29	9	;
EXPR_STATEMENT	773:3	773:21	9	assert ( occ >= len ) ;
EXPR	773:3	773:3	10	assert ( occ >= len )
FUNCTION_CALL	773:3	773:20	11	assert ( occ >= len )
CALLEE	773:3	773:3	12	assert
LEAF_NODE	773:3	773:3	13	assert
LEAF_NODE	773:9	773:9	12	(
ARGUMENT	773:10	773:17	12	occ >= len
FIELD	773:10	773:10	13	occ
LEAF_NODE	773:10	773:10	14	occ
REL_OPERATOR	773:14	773:14	13	>=
LEAF_NODE	773:14	773:14	14	>=
FIELD	773:17	773:17	13	len
LEAF_NODE	773:17	773:17	14	len
LEAF_NODE	773:20	773:20	12	)
LEAF_NODE	773:21	773:21	10	;
EXPR_STATEMENT	774:3	774:12	9	op += len ;
EXPR	774:3	774:3	10	op += len
ASSIGN	774:3	774:9	11	op += len
LVAL	774:3	774:3	12	op
FIELD	774:3	774:3	13	op
LEAF_NODE	774:3	774:3	14	op
ASSIGN_OP	774:6	774:6	12	+=
LEAF_NODE	774:6	774:6	13	+=
RVAL	774:9	774:9	12	len
FIELD	774:9	774:9	13	len
LEAF_NODE	774:9	774:9	14	len
LEAF_NODE	774:12	774:12	10	;
EXPR_STATEMENT	775:3	775:13	9	occ -= len ;
EXPR	775:3	775:3	10	occ -= len
ASSIGN	775:3	775:10	11	occ -= len
LVAL	775:3	775:3	12	occ
FIELD	775:3	775:3	13	occ
LEAF_NODE	775:3	775:3	14	occ
ASSIGN_OP	775:7	775:7	12	-=
LEAF_NODE	775:7	775:7	13	-=
RVAL	775:10	775:10	12	len
FIELD	775:10	775:10	13	len
LEAF_NODE	775:10	775:10	14	len
LEAF_NODE	775:13	775:13	10	;
LEAF_NODE	776:2	776:2	8	}
SELECTION	776:4	776:9	6	
KEYWORD	776:4	776:4	7	else
LEAF_NODE	776:4	776:4	8	else
STATEMENTS	776:9	779:2	7	
LEAF_NODE	776:9	776:9	8	{
STATEMENTS	777:3	778:3	8	
EXPR_STATEMENT	777:3	777:21	9	* op ++ = ( char ) code ;
EXPR	777:3	777:3	10	* op ++ = ( char ) code
ASSIGN	777:3	777:11	11	* op ++ = ( char ) code
LVAL	777:3	777:3	12	* op ++
UNARY_EXPR	777:3	777:4	13	* op ++
UNARY_OPERATOR	777:3	777:3	14	*
LEAF_NODE	777:3	777:3	15	*
FIELD	777:4	777:6	14	op ++
LEAF_NODE	777:4	777:4	15	op
LEAF_NODE	777:6	777:6	15	++
ASSIGN_OP	777:9	777:9	12	=
LEAF_NODE	777:9	777:9	13	=
RVAL	777:11	777:17	12	( char ) code
LEAF_NODE	777:11	777:11	13	(
TYPE_NAME	777:12	777:12	13	char
LEAF_NODE	777:12	777:12	14	char
LEAF_NODE	777:16	777:16	13	)
FIELD	777:17	777:17	13	code
LEAF_NODE	777:17	777:17	14	code
LEAF_NODE	777:21	777:21	10	;
EXPR_STATEMENT	778:3	778:8	9	occ -- ;
EXPR	778:3	778:3	10	occ --
FIELD	778:3	778:6	11	occ --
LEAF_NODE	778:3	778:3	12	occ
LEAF_NODE	778:6	778:6	12	--
LEAF_NODE	778:8	778:8	10	;
LEAF_NODE	779:2	779:2	8	}
LEAF_NODE	780:1	780:1	5	}
EXPR_STATEMENT	782:1	782:61	3	tif -> tif_rawcc -= ( tmsize_t ) ( ( uint8 * ) bp - tif -> tif_rawcp ) ;
EXPR	782:1	782:1	4	tif -> tif_rawcc -= ( tmsize_t ) ( ( uint8 * ) bp - tif -> tif_rawcp )
ASSIGN	782:1	782:19	5	tif -> tif_rawcc -= ( tmsize_t ) ( ( uint8 * ) bp - tif -> tif_rawcp )
LVAL	782:1	782:1	6	tif -> tif_rawcc
FIELD	782:1	782:6	7	tif -> tif_rawcc
LEAF_NODE	782:1	782:1	8	tif
LEAF_NODE	782:4	782:4	8	->
LEAF_NODE	782:6	782:6	8	tif_rawcc
ASSIGN_OP	782:16	782:16	6	-=
LEAF_NODE	782:16	782:16	7	-=
RVAL	782:19	782:60	6	( tmsize_t ) ( ( uint8 * ) bp - tif -> tif_rawcp )
LEAF_NODE	782:19	782:19	7	(
TYPE_NAME	782:20	782:20	7	tmsize_t
LEAF_NODE	782:20	782:20	8	tmsize_t
LEAF_NODE	782:28	782:28	7	)
LEAF_NODE	782:29	782:29	7	(
LEAF_NODE	782:31	782:31	7	(
TYPE_NAME	782:32	782:32	7	uint8
LEAF_NODE	782:32	782:32	8	uint8
LEAF_NODE	782:37	782:37	7	*
LEAF_NODE	782:38	782:38	7	)
FIELD	782:40	782:40	7	bp
LEAF_NODE	782:40	782:40	8	bp
LEAF_NODE	782:43	782:43	7	-
FIELD	782:45	782:50	7	tif -> tif_rawcp
LEAF_NODE	782:45	782:45	8	tif
LEAF_NODE	782:48	782:48	8	->
LEAF_NODE	782:50	782:50	8	tif_rawcp
LEAF_NODE	782:60	782:60	7	)
LEAF_NODE	782:61	782:61	4	;
EXPR_STATEMENT	783:1	783:29	3	tif -> tif_rawcp = ( uint8 * ) bp ;
EXPR	783:1	783:1	4	tif -> tif_rawcp = ( uint8 * ) bp
ASSIGN	783:1	783:18	5	tif -> tif_rawcp = ( uint8 * ) bp
LVAL	783:1	783:1	6	tif -> tif_rawcp
FIELD	783:1	783:6	7	tif -> tif_rawcp
LEAF_NODE	783:1	783:1	8	tif
LEAF_NODE	783:4	783:4	8	->
LEAF_NODE	783:6	783:6	8	tif_rawcp
ASSIGN_OP	783:16	783:16	6	=
LEAF_NODE	783:16	783:16	7	=
RVAL	783:18	783:27	6	( uint8 * ) bp
LEAF_NODE	783:18	783:18	7	(
TYPE_NAME	783:19	783:19	7	uint8
LEAF_NODE	783:19	783:19	8	uint8
LEAF_NODE	783:24	783:24	7	*
LEAF_NODE	783:25	783:25	7	)
FIELD	783:27	783:27	7	bp
LEAF_NODE	783:27	783:27	8	bp
LEAF_NODE	783:29	783:29	4	;
EXPR_STATEMENT	785:1	785:35	3	sp -> old_tif_rawcc = tif -> tif_rawcc ;
EXPR	785:1	785:1	4	sp -> old_tif_rawcc = tif -> tif_rawcc
ASSIGN	785:1	785:21	5	sp -> old_tif_rawcc = tif -> tif_rawcc
LVAL	785:1	785:1	6	sp -> old_tif_rawcc
FIELD	785:1	785:5	7	sp -> old_tif_rawcc
LEAF_NODE	785:1	785:1	8	sp
LEAF_NODE	785:3	785:3	8	->
LEAF_NODE	785:5	785:5	8	old_tif_rawcc
ASSIGN_OP	785:19	785:19	6	=
LEAF_NODE	785:19	785:19	7	=
RVAL	785:21	785:21	6	tif -> tif_rawcc
FIELD	785:21	785:26	7	tif -> tif_rawcc
LEAF_NODE	785:21	785:21	8	tif
LEAF_NODE	785:24	785:24	8	->
LEAF_NODE	785:26	785:26	8	tif_rawcc
LEAF_NODE	785:35	785:35	4	;
EXPR_STATEMENT	787:1	787:38	3	sp -> lzw_nbits = ( unsigned short ) nbits ;
EXPR	787:1	787:1	4	sp -> lzw_nbits = ( unsigned short ) nbits
ASSIGN	787:1	787:17	5	sp -> lzw_nbits = ( unsigned short ) nbits
LVAL	787:1	787:1	6	sp -> lzw_nbits
FIELD	787:1	787:5	7	sp -> lzw_nbits
LEAF_NODE	787:1	787:1	8	sp
LEAF_NODE	787:3	787:3	8	->
LEAF_NODE	787:5	787:5	8	lzw_nbits
ASSIGN_OP	787:15	787:15	6	=
LEAF_NODE	787:15	787:15	7	=
RVAL	787:17	787:33	6	( unsigned short ) nbits
LEAF_NODE	787:17	787:17	7	(
TYPE_NAME	787:18	787:27	7	unsigned short
LEAF_NODE	787:18	787:18	8	unsigned
LEAF_NODE	787:27	787:27	8	short
LEAF_NODE	787:32	787:32	7	)
FIELD	787:33	787:33	7	nbits
LEAF_NODE	787:33	787:33	8	nbits
LEAF_NODE	787:38	787:38	4	;
EXPR_STATEMENT	788:1	788:28	3	sp -> lzw_nextdata = nextdata ;
EXPR	788:1	788:1	4	sp -> lzw_nextdata = nextdata
ASSIGN	788:1	788:20	5	sp -> lzw_nextdata = nextdata
LVAL	788:1	788:1	6	sp -> lzw_nextdata
FIELD	788:1	788:5	7	sp -> lzw_nextdata
LEAF_NODE	788:1	788:1	8	sp
LEAF_NODE	788:3	788:3	8	->
LEAF_NODE	788:5	788:5	8	lzw_nextdata
ASSIGN_OP	788:18	788:18	6	=
LEAF_NODE	788:18	788:18	7	=
RVAL	788:20	788:20	6	nextdata
FIELD	788:20	788:20	7	nextdata
LEAF_NODE	788:20	788:20	8	nextdata
LEAF_NODE	788:28	788:28	4	;
EXPR_STATEMENT	789:1	789:28	3	sp -> lzw_nextbits = nextbits ;
EXPR	789:1	789:1	4	sp -> lzw_nextbits = nextbits
ASSIGN	789:1	789:20	5	sp -> lzw_nextbits = nextbits
LVAL	789:1	789:1	6	sp -> lzw_nextbits
FIELD	789:1	789:5	7	sp -> lzw_nextbits
LEAF_NODE	789:1	789:1	8	sp
LEAF_NODE	789:3	789:3	8	->
LEAF_NODE	789:5	789:5	8	lzw_nextbits
ASSIGN_OP	789:18	789:18	6	=
LEAF_NODE	789:18	789:18	7	=
RVAL	789:20	789:20	6	nextbits
FIELD	789:20	789:20	7	nextbits
LEAF_NODE	789:20	789:20	8	nextbits
LEAF_NODE	789:28	789:28	4	;
EXPR_STATEMENT	790:1	790:30	3	sp -> dec_nbitsmask = nbitsmask ;
EXPR	790:1	790:1	4	sp -> dec_nbitsmask = nbitsmask
ASSIGN	790:1	790:21	5	sp -> dec_nbitsmask = nbitsmask
LVAL	790:1	790:1	6	sp -> dec_nbitsmask
FIELD	790:1	790:5	7	sp -> dec_nbitsmask
LEAF_NODE	790:1	790:1	8	sp
LEAF_NODE	790:3	790:3	8	->
LEAF_NODE	790:5	790:5	8	dec_nbitsmask
ASSIGN_OP	790:19	790:19	6	=
LEAF_NODE	790:19	790:19	7	=
RVAL	790:21	790:21	6	nbitsmask
FIELD	790:21	790:21	7	nbitsmask
LEAF_NODE	790:21	790:21	8	nbitsmask
LEAF_NODE	790:30	790:30	4	;
EXPR_STATEMENT	791:1	791:28	3	sp -> dec_oldcodep = oldcodep ;
EXPR	791:1	791:1	4	sp -> dec_oldcodep = oldcodep
ASSIGN	791:1	791:20	5	sp -> dec_oldcodep = oldcodep
LVAL	791:1	791:1	6	sp -> dec_oldcodep
FIELD	791:1	791:5	7	sp -> dec_oldcodep
LEAF_NODE	791:1	791:1	8	sp
LEAF_NODE	791:3	791:3	8	->
LEAF_NODE	791:5	791:5	8	dec_oldcodep
ASSIGN_OP	791:18	791:18	6	=
LEAF_NODE	791:18	791:18	7	=
RVAL	791:20	791:20	6	oldcodep
FIELD	791:20	791:20	7	oldcodep
LEAF_NODE	791:20	791:20	8	oldcodep
LEAF_NODE	791:28	791:28	4	;
EXPR_STATEMENT	792:1	792:30	3	sp -> dec_free_entp = free_entp ;
EXPR	792:1	792:1	4	sp -> dec_free_entp = free_entp
ASSIGN	792:1	792:21	5	sp -> dec_free_entp = free_entp
LVAL	792:1	792:1	6	sp -> dec_free_entp
FIELD	792:1	792:5	7	sp -> dec_free_entp
LEAF_NODE	792:1	792:1	8	sp
LEAF_NODE	792:3	792:3	8	->
LEAF_NODE	792:5	792:5	8	dec_free_entp
ASSIGN_OP	792:19	792:19	6	=
LEAF_NODE	792:19	792:19	7	=
RVAL	792:21	792:21	6	free_entp
FIELD	792:21	792:21	7	free_entp
LEAF_NODE	792:21	792:21	8	free_entp
LEAF_NODE	792:30	792:30	4	;
EXPR_STATEMENT	793:1	793:28	3	sp -> dec_maxcodep = maxcodep ;
EXPR	793:1	793:1	4	sp -> dec_maxcodep = maxcodep
ASSIGN	793:1	793:20	5	sp -> dec_maxcodep = maxcodep
LVAL	793:1	793:1	6	sp -> dec_maxcodep
FIELD	793:1	793:5	7	sp -> dec_maxcodep
LEAF_NODE	793:1	793:1	8	sp
LEAF_NODE	793:3	793:3	8	->
LEAF_NODE	793:5	793:5	8	dec_maxcodep
ASSIGN_OP	793:18	793:18	6	=
LEAF_NODE	793:18	793:18	7	=
RVAL	793:20	793:20	6	maxcodep
FIELD	793:20	793:20	7	maxcodep
LEAF_NODE	793:20	793:20	8	maxcodep
LEAF_NODE	793:28	793:28	4	;
SELECTION	795:1	795:14	3	
KEYWORD	795:1	795:1	4	if
LEAF_NODE	795:1	795:1	5	if
LEAF_NODE	795:4	795:4	4	(
CONDITION	795:5	795:5	4	occ > 0
EXPR	795:5	795:11	5	occ > 0
FIELD	795:5	795:5	6	occ
LEAF_NODE	795:5	795:5	7	occ
REL_OPERATOR	795:9	795:9	6	>
LEAF_NODE	795:9	795:9	7	>
FIELD	795:11	795:11	6	0
LEAF_NODE	795:11	795:11	7	0
LEAF_NODE	795:12	795:12	4	)
STATEMENTS	795:14	806:1	4	
LEAF_NODE	795:14	795:14	5	{
STATEMENTS	797:2	805:2	5	
EXPR_STATEMENT	797:2	799:45	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at scanline %d (short %I64d bytes)" , tif -> tif_row , ( unsigned __int64 ) occ ) ;
EXPR	797:2	797:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at scanline %d (short %I64d bytes)" , tif -> tif_row , ( unsigned __int64 ) occ )
FUNCTION_CALL	797:2	799:44	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at scanline %d (short %I64d bytes)" , tif -> tif_row , ( unsigned __int64 ) occ )
CALLEE	797:2	797:2	9	TIFFErrorExt
LEAF_NODE	797:2	797:2	10	TIFFErrorExt
LEAF_NODE	797:14	797:14	9	(
ARGUMENT	797:15	797:15	9	tif -> tif_clientdata
FIELD	797:15	797:20	10	tif -> tif_clientdata
LEAF_NODE	797:15	797:15	11	tif
LEAF_NODE	797:18	797:18	11	->
LEAF_NODE	797:20	797:20	11	tif_clientdata
LEAF_NODE	797:34	797:34	9	,
ARGUMENT	797:36	797:36	9	module
FIELD	797:36	797:36	10	module
LEAF_NODE	797:36	797:36	11	module
LEAF_NODE	797:42	797:42	9	,
ARGUMENT	798:3	798:3	9	"Not enough data at scanline %d (short %I64d bytes)"
FIELD	798:3	798:3	10	"Not enough data at scanline %d (short %I64d bytes)"
LEAF_NODE	798:3	798:3	11	"Not enough data at scanline %d (short %I64d bytes)"
LEAF_NODE	798:55	798:55	9	,
ARGUMENT	799:8	799:8	9	tif -> tif_row
FIELD	799:8	799:13	10	tif -> tif_row
LEAF_NODE	799:8	799:8	11	tif
LEAF_NODE	799:11	799:11	11	->
LEAF_NODE	799:13	799:13	11	tif_row
LEAF_NODE	799:20	799:20	9	,
ARGUMENT	799:22	799:41	9	( unsigned __int64 ) occ
LEAF_NODE	799:22	799:22	10	(
TYPE_NAME	799:23	799:32	10	unsigned __int64
LEAF_NODE	799:23	799:23	11	unsigned
LEAF_NODE	799:32	799:32	11	__int64
LEAF_NODE	799:39	799:39	10	)
FIELD	799:41	799:41	10	occ
LEAF_NODE	799:41	799:41	11	occ
LEAF_NODE	799:44	799:44	9	)
LEAF_NODE	799:45	799:45	7	;
LEAF_NODE	801:2	801:2	6	TIFFErrorExt
LEAF_NODE	801:14	801:14	6	(
LEAF_NODE	801:15	801:15	6	tif
LEAF_NODE	801:18	801:18	6	->
LEAF_NODE	801:20	801:20	6	tif_clientdata
LEAF_NODE	801:34	801:34	6	,
LEAF_NODE	801:36	801:36	6	module
LEAF_NODE	801:42	801:42	6	,
LEAF_NODE	802:3	802:3	6	"Not enough data at scanline %d (short %llu bytes)"
LEAF_NODE	802:54	802:54	6	,
LEAF_NODE	803:8	803:8	6	tif
LEAF_NODE	803:11	803:11	6	->
LEAF_NODE	803:13	803:13	6	tif_row
LEAF_NODE	803:20	803:20	6	,
LEAF_NODE	803:22	803:22	6	(
LEAF_NODE	803:23	803:23	6	unsigned
LEAF_NODE	803:32	803:32	6	long
LEAF_NODE	803:37	803:37	6	long
LEAF_NODE	803:41	803:41	6	)
LEAF_NODE	803:43	803:43	6	occ
LEAF_NODE	803:46	803:46	6	)
LEAF_NODE	803:47	803:47	6	;
JUMP_STATEMENT	805:2	805:12	6	return ( 0 ) ;
KEYWORD	805:2	805:2	7	return
LEAF_NODE	805:2	805:2	8	return
DESTINATION	805:9	805:9	7	( 0 )
EXPR	805:9	805:11	8	( 0 )
LEAF_NODE	805:9	805:9	9	(
FIELD	805:10	805:10	9	0
LEAF_NODE	805:10	805:10	10	0
LEAF_NODE	805:11	805:11	9	)
LEAF_NODE	805:12	805:12	7	;
LEAF_NODE	806:1	806:1	5	}
JUMP_STATEMENT	807:1	807:11	3	return ( 1 ) ;
KEYWORD	807:1	807:1	4	return
LEAF_NODE	807:1	807:1	5	return
DESTINATION	807:8	807:8	4	( 1 )
EXPR	807:8	807:10	5	( 1 )
LEAF_NODE	807:8	807:8	6	(
FIELD	807:9	807:9	6	1
LEAF_NODE	807:9	807:9	7	1
LEAF_NODE	807:10	807:10	6	)
LEAF_NODE	807:11	807:11	4	;
LEAF_NODE	808:0	808:0	2	}
FUNCTION_DEF	815:0	829:0	1	
RETURN_TYPE	815:0	815:7	2	static int
LEAF_NODE	815:0	815:0	3	static
TYPE_NAME	815:7	815:7	3	int
LEAF_NODE	815:7	815:7	4	int
FUNCTION_NAME	816:0	816:0	2	LZWSetupEncode
LEAF_NODE	816:0	816:0	3	LZWSetupEncode
PARAMETER_LIST	816:14	816:24	2	( TIFF * tif )
LEAF_NODE	816:14	816:14	3	(
PARAMETER_DECL	816:15	816:21	3	TIFF * tif
TYPE	816:15	816:19	4	TIFF *
TYPE_NAME	816:15	816:15	5	TIFF
LEAF_NODE	816:15	816:15	6	TIFF
POINTER	816:19	816:19	5	*
LEAF_NODE	816:19	816:19	6	*
NAME	816:21	816:21	4	tif
LEAF_NODE	816:21	816:21	5	tif
LEAF_NODE	816:24	816:24	3	)
LEAF_NODE	817:0	817:0	2	{
STATEMENTS	818:1	828:1	2	
LEAF_NODE	818:1	818:1	3	static
SIMPLE_DECL	818:8	818:46	3	const char [ ] module ; module = "LZWSetupEncode" ;
VAR_DECL	818:8	818:19	4	const char [ ] module ; module = "LZWSetupEncode"
TYPE	818:8	818:25	5	const char [ ]
TYPE_NAME	818:8	818:14	6	const char
LEAF_NODE	818:8	818:8	7	const
LEAF_NODE	818:14	818:14	7	char
TYPE_SUFFIX	818:25	818:26	6	[ ]
LEAF_NODE	818:25	818:25	7	[
LEAF_NODE	818:26	818:26	7	]
NAME	818:19	818:19	5	module
LEAF_NODE	818:19	818:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	818:19	818:19	5	module = "LZWSetupEncode"
ASSIGN	818:19	818:30	6	module = "LZWSetupEncode"
LVAL	818:19	818:19	7	module
NAME	818:19	818:19	8	module
LEAF_NODE	818:19	818:19	9	module
ASSIGN_OP	818:28	818:28	7	=
LEAF_NODE	818:28	818:28	8	=
RVAL	818:30	818:30	7	"LZWSetupEncode"
FIELD	818:30	818:30	8	"LZWSetupEncode"
LEAF_NODE	818:30	818:30	9	"LZWSetupEncode"
LEAF_NODE	818:46	818:46	4	;
SIMPLE_DECL	819:1	819:38	3	LZWCodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	819:1	819:16	4	LZWCodecState * sp ; sp = EncoderState ( tif )
TYPE	819:1	819:14	5	LZWCodecState *
TYPE_NAME	819:1	819:1	6	LZWCodecState
LEAF_NODE	819:1	819:1	7	LZWCodecState
POINTER	819:14	819:14	6	*
LEAF_NODE	819:14	819:14	7	*
NAME	819:16	819:16	5	sp
LEAF_NODE	819:16	819:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	819:16	819:16	5	sp = EncoderState ( tif )
ASSIGN	819:16	819:21	6	sp = EncoderState ( tif )
LVAL	819:16	819:16	7	sp
NAME	819:16	819:16	8	sp
LEAF_NODE	819:16	819:16	9	sp
ASSIGN_OP	819:19	819:19	7	=
LEAF_NODE	819:19	819:19	8	=
RVAL	819:21	819:21	7	EncoderState ( tif )
FUNCTION_CALL	819:21	819:37	8	EncoderState ( tif )
CALLEE	819:21	819:21	9	EncoderState
LEAF_NODE	819:21	819:21	10	EncoderState
LEAF_NODE	819:33	819:33	9	(
ARGUMENT	819:34	819:34	9	tif
FIELD	819:34	819:34	10	tif
LEAF_NODE	819:34	819:34	11	tif
LEAF_NODE	819:37	819:37	9	)
LEAF_NODE	819:38	819:38	4	;
EXPR_STATEMENT	821:1	821:19	3	assert ( sp != NULL ) ;
EXPR	821:1	821:1	4	assert ( sp != NULL )
FUNCTION_CALL	821:1	821:18	5	assert ( sp != NULL )
CALLEE	821:1	821:1	6	assert
LEAF_NODE	821:1	821:1	7	assert
LEAF_NODE	821:7	821:7	6	(
ARGUMENT	821:8	821:14	6	sp != NULL
FIELD	821:8	821:8	7	sp
LEAF_NODE	821:8	821:8	8	sp
EQ_OPERATOR	821:11	821:11	7	!=
LEAF_NODE	821:11	821:11	8	!=
FIELD	821:14	821:14	7	NULL
LEAF_NODE	821:14	821:14	8	NULL
LEAF_NODE	821:18	821:18	6	)
LEAF_NODE	821:19	821:19	4	;
EXPR_STATEMENT	822:1	822:63	3	sp -> enc_hashtab = ( hash_t * ) _TIFFmalloc ( HSIZE * sizeof ( hash_t ) ) ;
EXPR	822:1	822:1	4	sp -> enc_hashtab = ( hash_t * ) _TIFFmalloc ( HSIZE * sizeof ( hash_t ) )
ASSIGN	822:1	822:19	5	sp -> enc_hashtab = ( hash_t * ) _TIFFmalloc ( HSIZE * sizeof ( hash_t ) )
LVAL	822:1	822:1	6	sp -> enc_hashtab
FIELD	822:1	822:5	7	sp -> enc_hashtab
LEAF_NODE	822:1	822:1	8	sp
LEAF_NODE	822:3	822:3	8	->
LEAF_NODE	822:5	822:5	8	enc_hashtab
ASSIGN_OP	822:17	822:17	6	=
LEAF_NODE	822:17	822:17	7	=
RVAL	822:19	822:29	6	( hash_t * ) _TIFFmalloc ( HSIZE * sizeof ( hash_t ) )
LEAF_NODE	822:19	822:19	7	(
TYPE_NAME	822:20	822:20	7	hash_t
LEAF_NODE	822:20	822:20	8	hash_t
LEAF_NODE	822:26	822:26	7	*
LEAF_NODE	822:27	822:27	7	)
FUNCTION_CALL	822:29	822:62	7	_TIFFmalloc ( HSIZE * sizeof ( hash_t ) )
CALLEE	822:29	822:29	8	_TIFFmalloc
LEAF_NODE	822:29	822:29	9	_TIFFmalloc
LEAF_NODE	822:40	822:40	8	(
ARGUMENT	822:41	822:47	8	HSIZE * sizeof ( hash_t )
FIELD	822:41	822:41	9	HSIZE
LEAF_NODE	822:41	822:41	10	HSIZE
LEAF_NODE	822:46	822:46	9	*
FUNCTION_CALL	822:47	822:61	9	sizeof ( hash_t )
CALLEE	822:47	822:47	10	sizeof
LEAF_NODE	822:47	822:47	11	sizeof
LEAF_NODE	822:54	822:54	10	(
ARGUMENT	822:55	822:55	10	hash_t
FIELD	822:55	822:55	11	hash_t
LEAF_NODE	822:55	822:55	12	hash_t
LEAF_NODE	822:61	822:61	10	)
LEAF_NODE	822:62	822:62	8	)
LEAF_NODE	822:63	822:63	4	;
SELECTION	823:1	823:30	3	
KEYWORD	823:1	823:1	4	if
LEAF_NODE	823:1	823:1	5	if
LEAF_NODE	823:4	823:4	4	(
CONDITION	823:5	823:5	4	sp -> enc_hashtab == NULL
EXPR	823:5	823:24	5	sp -> enc_hashtab == NULL
FIELD	823:5	823:9	6	sp -> enc_hashtab
LEAF_NODE	823:5	823:5	7	sp
LEAF_NODE	823:7	823:7	7	->
LEAF_NODE	823:9	823:9	7	enc_hashtab
EQ_OPERATOR	823:21	823:21	6	==
LEAF_NODE	823:21	823:21	7	==
FIELD	823:24	823:24	6	NULL
LEAF_NODE	823:24	823:24	7	NULL
LEAF_NODE	823:28	823:28	4	)
STATEMENTS	823:30	827:1	4	
LEAF_NODE	823:30	823:30	5	{
STATEMENTS	824:2	826:2	5	
EXPR_STATEMENT	824:2	825:38	6	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW hash table" ) ;
EXPR	824:2	824:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW hash table" )
FUNCTION_CALL	824:2	825:37	8	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW hash table" )
CALLEE	824:2	824:2	9	TIFFErrorExt
LEAF_NODE	824:2	824:2	10	TIFFErrorExt
LEAF_NODE	824:14	824:14	9	(
ARGUMENT	824:15	824:15	9	tif -> tif_clientdata
FIELD	824:15	824:20	10	tif -> tif_clientdata
LEAF_NODE	824:15	824:15	11	tif
LEAF_NODE	824:18	824:18	11	->
LEAF_NODE	824:20	824:20	11	tif_clientdata
LEAF_NODE	824:34	824:34	9	,
ARGUMENT	824:36	824:36	9	module
FIELD	824:36	824:36	10	module
LEAF_NODE	824:36	824:36	11	module
LEAF_NODE	824:42	824:42	9	,
ARGUMENT	825:8	825:8	9	"No space for LZW hash table"
FIELD	825:8	825:8	10	"No space for LZW hash table"
LEAF_NODE	825:8	825:8	11	"No space for LZW hash table"
LEAF_NODE	825:37	825:37	9	)
LEAF_NODE	825:38	825:38	7	;
JUMP_STATEMENT	826:2	826:12	6	return ( 0 ) ;
KEYWORD	826:2	826:2	7	return
LEAF_NODE	826:2	826:2	8	return
DESTINATION	826:9	826:9	7	( 0 )
EXPR	826:9	826:11	8	( 0 )
LEAF_NODE	826:9	826:9	9	(
FIELD	826:10	826:10	9	0
LEAF_NODE	826:10	826:10	10	0
LEAF_NODE	826:11	826:11	9	)
LEAF_NODE	826:12	826:12	7	;
LEAF_NODE	827:1	827:1	5	}
JUMP_STATEMENT	828:1	828:11	3	return ( 1 ) ;
KEYWORD	828:1	828:1	4	return
LEAF_NODE	828:1	828:1	5	return
DESTINATION	828:8	828:8	4	( 1 )
EXPR	828:8	828:10	5	( 1 )
LEAF_NODE	828:8	828:8	6	(
FIELD	828:9	828:9	6	1
LEAF_NODE	828:9	828:9	7	1
LEAF_NODE	828:10	828:10	6	)
LEAF_NODE	828:11	828:11	4	;
LEAF_NODE	829:0	829:0	2	}
FUNCTION_DEF	834:0	864:0	1	
RETURN_TYPE	834:0	834:7	2	static int
LEAF_NODE	834:0	834:0	3	static
TYPE_NAME	834:7	834:7	3	int
LEAF_NODE	834:7	834:7	4	int
FUNCTION_NAME	835:0	835:0	2	LZWPreEncode
LEAF_NODE	835:0	835:0	3	LZWPreEncode
PARAMETER_LIST	835:12	835:32	2	( TIFF * tif , uint16 s )
LEAF_NODE	835:12	835:12	3	(
PARAMETER_DECL	835:13	835:19	3	TIFF * tif
TYPE	835:13	835:17	4	TIFF *
TYPE_NAME	835:13	835:13	5	TIFF
LEAF_NODE	835:13	835:13	6	TIFF
POINTER	835:17	835:17	5	*
LEAF_NODE	835:17	835:17	6	*
NAME	835:19	835:19	4	tif
LEAF_NODE	835:19	835:19	5	tif
LEAF_NODE	835:22	835:22	3	,
PARAMETER_DECL	835:24	835:31	3	uint16 s
TYPE	835:24	835:24	4	uint16
TYPE_NAME	835:24	835:24	5	uint16
LEAF_NODE	835:24	835:24	6	uint16
NAME	835:31	835:31	4	s
LEAF_NODE	835:31	835:31	5	s
LEAF_NODE	835:32	835:32	3	)
LEAF_NODE	836:0	836:0	2	{
STATEMENTS	837:1	863:1	2	
SIMPLE_DECL	837:1	837:38	3	LZWCodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	837:1	837:16	4	LZWCodecState * sp ; sp = EncoderState ( tif )
TYPE	837:1	837:15	5	LZWCodecState *
TYPE_NAME	837:1	837:1	6	LZWCodecState
LEAF_NODE	837:1	837:1	7	LZWCodecState
POINTER	837:15	837:15	6	*
LEAF_NODE	837:15	837:15	7	*
NAME	837:16	837:16	5	sp
LEAF_NODE	837:16	837:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	837:16	837:16	5	sp = EncoderState ( tif )
ASSIGN	837:16	837:21	6	sp = EncoderState ( tif )
LVAL	837:16	837:16	7	sp
NAME	837:16	837:16	8	sp
LEAF_NODE	837:16	837:16	9	sp
ASSIGN_OP	837:19	837:19	7	=
LEAF_NODE	837:19	837:19	8	=
RVAL	837:21	837:21	7	EncoderState ( tif )
FUNCTION_CALL	837:21	837:37	8	EncoderState ( tif )
CALLEE	837:21	837:21	9	EncoderState
LEAF_NODE	837:21	837:21	10	EncoderState
LEAF_NODE	837:33	837:33	9	(
ARGUMENT	837:34	837:34	9	tif
FIELD	837:34	837:34	10	tif
LEAF_NODE	837:34	837:34	11	tif
LEAF_NODE	837:37	837:37	9	)
LEAF_NODE	837:38	837:38	4	;
EXPR_STATEMENT	839:1	839:9	3	( void ) s ;
EXPR	839:1	839:8	4	( void ) s
LEAF_NODE	839:1	839:1	5	(
TYPE_NAME	839:2	839:2	5	void
LEAF_NODE	839:2	839:2	6	void
LEAF_NODE	839:6	839:6	5	)
FIELD	839:8	839:8	5	s
LEAF_NODE	839:8	839:8	6	s
LEAF_NODE	839:9	839:9	4	;
EXPR_STATEMENT	840:1	840:19	3	assert ( sp != NULL ) ;
EXPR	840:1	840:1	4	assert ( sp != NULL )
FUNCTION_CALL	840:1	840:18	5	assert ( sp != NULL )
CALLEE	840:1	840:1	6	assert
LEAF_NODE	840:1	840:1	7	assert
LEAF_NODE	840:7	840:7	6	(
ARGUMENT	840:8	840:14	6	sp != NULL
FIELD	840:8	840:8	7	sp
LEAF_NODE	840:8	840:8	8	sp
EQ_OPERATOR	840:11	840:11	7	!=
LEAF_NODE	840:11	840:11	8	!=
FIELD	840:14	840:14	7	NULL
LEAF_NODE	840:14	840:14	8	NULL
LEAF_NODE	840:18	840:18	6	)
LEAF_NODE	840:19	840:19	4	;
SELECTION	842:1	843:8	3	
KEYWORD	842:1	842:1	4	if
LEAF_NODE	842:1	842:1	5	if
LEAF_NODE	842:3	842:3	4	(
CONDITION	842:5	842:5	4	sp -> enc_hashtab == NULL
EXPR	842:5	842:24	5	sp -> enc_hashtab == NULL
FIELD	842:5	842:9	6	sp -> enc_hashtab
LEAF_NODE	842:5	842:5	7	sp
LEAF_NODE	842:7	842:7	7	->
LEAF_NODE	842:9	842:9	7	enc_hashtab
EQ_OPERATOR	842:21	842:21	6	==
LEAF_NODE	842:21	842:21	7	==
FIELD	842:24	842:24	6	NULL
LEAF_NODE	842:24	842:24	7	NULL
LEAF_NODE	842:29	842:29	4	)
STATEMENTS	843:8	845:8	4	
LEAF_NODE	843:8	843:8	5	{
STATEMENTS	844:12	844:12	5	
EXPR_STATEMENT	844:12	844:39	6	tif -> tif_setupencode ( tif ) ;
EXPR	844:12	844:12	7	tif -> tif_setupencode ( tif )
FUNCTION_CALL	844:12	844:38	8	tif -> tif_setupencode ( tif )
CALLEE	844:12	844:17	9	tif -> tif_setupencode
LEAF_NODE	844:12	844:12	10	tif
LEAF_NODE	844:15	844:15	10	->
LEAF_NODE	844:17	844:17	10	tif_setupencode
LEAF_NODE	844:32	844:32	9	(
ARGUMENT	844:34	844:34	9	tif
FIELD	844:34	844:34	10	tif
LEAF_NODE	844:34	844:34	11	tif
LEAF_NODE	844:38	844:38	9	)
LEAF_NODE	844:39	844:39	7	;
LEAF_NODE	845:8	845:8	5	}
EXPR_STATEMENT	847:1	847:25	3	sp -> lzw_nbits = BITS_MIN ;
EXPR	847:1	847:1	4	sp -> lzw_nbits = BITS_MIN
ASSIGN	847:1	847:17	5	sp -> lzw_nbits = BITS_MIN
LVAL	847:1	847:1	6	sp -> lzw_nbits
FIELD	847:1	847:5	7	sp -> lzw_nbits
LEAF_NODE	847:1	847:1	8	sp
LEAF_NODE	847:3	847:3	8	->
LEAF_NODE	847:5	847:5	8	lzw_nbits
ASSIGN_OP	847:15	847:15	6	=
LEAF_NODE	847:15	847:15	7	=
RVAL	847:17	847:17	6	BITS_MIN
FIELD	847:17	847:17	7	BITS_MIN
LEAF_NODE	847:17	847:17	8	BITS_MIN
LEAF_NODE	847:25	847:25	4	;
EXPR_STATEMENT	848:1	848:36	3	sp -> lzw_maxcode = MAXCODE ( BITS_MIN ) ;
EXPR	848:1	848:1	4	sp -> lzw_maxcode = MAXCODE ( BITS_MIN )
ASSIGN	848:1	848:19	5	sp -> lzw_maxcode = MAXCODE ( BITS_MIN )
LVAL	848:1	848:1	6	sp -> lzw_maxcode
FIELD	848:1	848:5	7	sp -> lzw_maxcode
LEAF_NODE	848:1	848:1	8	sp
LEAF_NODE	848:3	848:3	8	->
LEAF_NODE	848:5	848:5	8	lzw_maxcode
ASSIGN_OP	848:17	848:17	6	=
LEAF_NODE	848:17	848:17	7	=
RVAL	848:19	848:19	6	MAXCODE ( BITS_MIN )
FUNCTION_CALL	848:19	848:35	7	MAXCODE ( BITS_MIN )
CALLEE	848:19	848:19	8	MAXCODE
LEAF_NODE	848:19	848:19	9	MAXCODE
LEAF_NODE	848:26	848:26	8	(
ARGUMENT	848:27	848:27	8	BITS_MIN
FIELD	848:27	848:27	9	BITS_MIN
LEAF_NODE	848:27	848:27	10	BITS_MIN
LEAF_NODE	848:35	848:35	8	)
LEAF_NODE	848:36	848:36	4	;
EXPR_STATEMENT	849:1	849:30	3	sp -> lzw_free_ent = CODE_FIRST ;
EXPR	849:1	849:1	4	sp -> lzw_free_ent = CODE_FIRST
ASSIGN	849:1	849:20	5	sp -> lzw_free_ent = CODE_FIRST
LVAL	849:1	849:1	6	sp -> lzw_free_ent
FIELD	849:1	849:5	7	sp -> lzw_free_ent
LEAF_NODE	849:1	849:1	8	sp
LEAF_NODE	849:3	849:3	8	->
LEAF_NODE	849:5	849:5	8	lzw_free_ent
ASSIGN_OP	849:18	849:18	6	=
LEAF_NODE	849:18	849:18	7	=
RVAL	849:20	849:20	6	CODE_FIRST
FIELD	849:20	849:20	7	CODE_FIRST
LEAF_NODE	849:20	849:20	8	CODE_FIRST
LEAF_NODE	849:30	849:30	4	;
EXPR_STATEMENT	850:1	850:21	3	sp -> lzw_nextbits = 0 ;
EXPR	850:1	850:1	4	sp -> lzw_nextbits = 0
ASSIGN	850:1	850:20	5	sp -> lzw_nextbits = 0
LVAL	850:1	850:1	6	sp -> lzw_nextbits
FIELD	850:1	850:5	7	sp -> lzw_nextbits
LEAF_NODE	850:1	850:1	8	sp
LEAF_NODE	850:3	850:3	8	->
LEAF_NODE	850:5	850:5	8	lzw_nextbits
ASSIGN_OP	850:18	850:18	6	=
LEAF_NODE	850:18	850:18	7	=
RVAL	850:20	850:20	6	0
FIELD	850:20	850:20	7	0
LEAF_NODE	850:20	850:20	8	0
LEAF_NODE	850:21	850:21	4	;
EXPR_STATEMENT	851:1	851:21	3	sp -> lzw_nextdata = 0 ;
EXPR	851:1	851:1	4	sp -> lzw_nextdata = 0
ASSIGN	851:1	851:20	5	sp -> lzw_nextdata = 0
LVAL	851:1	851:1	6	sp -> lzw_nextdata
FIELD	851:1	851:5	7	sp -> lzw_nextdata
LEAF_NODE	851:1	851:1	8	sp
LEAF_NODE	851:3	851:3	8	->
LEAF_NODE	851:5	851:5	8	lzw_nextdata
ASSIGN_OP	851:18	851:18	6	=
LEAF_NODE	851:18	851:18	7	=
RVAL	851:20	851:20	6	0
FIELD	851:20	851:20	7	0
LEAF_NODE	851:20	851:20	8	0
LEAF_NODE	851:21	851:21	4	;
EXPR_STATEMENT	852:1	852:31	3	sp -> enc_checkpoint = CHECK_GAP ;
EXPR	852:1	852:1	4	sp -> enc_checkpoint = CHECK_GAP
ASSIGN	852:1	852:22	5	sp -> enc_checkpoint = CHECK_GAP
LVAL	852:1	852:1	6	sp -> enc_checkpoint
FIELD	852:1	852:5	7	sp -> enc_checkpoint
LEAF_NODE	852:1	852:1	8	sp
LEAF_NODE	852:3	852:3	8	->
LEAF_NODE	852:5	852:5	8	enc_checkpoint
ASSIGN_OP	852:20	852:20	6	=
LEAF_NODE	852:20	852:20	7	=
RVAL	852:22	852:22	6	CHECK_GAP
FIELD	852:22	852:22	7	CHECK_GAP
LEAF_NODE	852:22	852:22	8	CHECK_GAP
LEAF_NODE	852:31	852:31	4	;
EXPR_STATEMENT	853:1	853:18	3	sp -> enc_ratio = 0 ;
EXPR	853:1	853:1	4	sp -> enc_ratio = 0
ASSIGN	853:1	853:17	5	sp -> enc_ratio = 0
LVAL	853:1	853:1	6	sp -> enc_ratio
FIELD	853:1	853:5	7	sp -> enc_ratio
LEAF_NODE	853:1	853:1	8	sp
LEAF_NODE	853:3	853:3	8	->
LEAF_NODE	853:5	853:5	8	enc_ratio
ASSIGN_OP	853:15	853:15	6	=
LEAF_NODE	853:15	853:15	7	=
RVAL	853:17	853:17	6	0
FIELD	853:17	853:17	7	0
LEAF_NODE	853:17	853:17	8	0
LEAF_NODE	853:18	853:18	4	;
EXPR_STATEMENT	854:1	854:20	3	sp -> enc_incount = 0 ;
EXPR	854:1	854:1	4	sp -> enc_incount = 0
ASSIGN	854:1	854:19	5	sp -> enc_incount = 0
LVAL	854:1	854:1	6	sp -> enc_incount
FIELD	854:1	854:5	7	sp -> enc_incount
LEAF_NODE	854:1	854:1	8	sp
LEAF_NODE	854:3	854:3	8	->
LEAF_NODE	854:5	854:5	8	enc_incount
ASSIGN_OP	854:17	854:17	6	=
LEAF_NODE	854:17	854:17	7	=
RVAL	854:19	854:19	6	0
FIELD	854:19	854:19	7	0
LEAF_NODE	854:19	854:19	8	0
LEAF_NODE	854:20	854:20	4	;
EXPR_STATEMENT	855:1	855:21	3	sp -> enc_outcount = 0 ;
EXPR	855:1	855:1	4	sp -> enc_outcount = 0
ASSIGN	855:1	855:20	5	sp -> enc_outcount = 0
LVAL	855:1	855:1	6	sp -> enc_outcount
FIELD	855:1	855:5	7	sp -> enc_outcount
LEAF_NODE	855:1	855:1	8	sp
LEAF_NODE	855:3	855:3	8	->
LEAF_NODE	855:5	855:5	8	enc_outcount
ASSIGN_OP	855:18	855:18	6	=
LEAF_NODE	855:18	855:18	7	=
RVAL	855:20	855:20	6	0
FIELD	855:20	855:20	7	0
LEAF_NODE	855:20	855:20	8	0
LEAF_NODE	855:21	855:21	4	;
EXPR_STATEMENT	860:1	860:65	3	sp -> enc_rawlimit = tif -> tif_rawdata + tif -> tif_rawdatasize - 1 - 4 ;
EXPR	860:1	860:1	4	sp -> enc_rawlimit = tif -> tif_rawdata + tif -> tif_rawdatasize - 1 - 4
ASSIGN	860:1	860:20	5	sp -> enc_rawlimit = tif -> tif_rawdata + tif -> tif_rawdatasize - 1 - 4
LVAL	860:1	860:1	6	sp -> enc_rawlimit
FIELD	860:1	860:5	7	sp -> enc_rawlimit
LEAF_NODE	860:1	860:1	8	sp
LEAF_NODE	860:3	860:3	8	->
LEAF_NODE	860:5	860:5	8	enc_rawlimit
ASSIGN_OP	860:18	860:18	6	=
LEAF_NODE	860:18	860:18	7	=
RVAL	860:20	860:64	6	tif -> tif_rawdata + tif -> tif_rawdatasize - 1 - 4
FIELD	860:20	860:25	7	tif -> tif_rawdata
LEAF_NODE	860:20	860:20	8	tif
LEAF_NODE	860:23	860:23	8	->
LEAF_NODE	860:25	860:25	8	tif_rawdata
LEAF_NODE	860:37	860:37	7	+
FIELD	860:39	860:44	7	tif -> tif_rawdatasize
LEAF_NODE	860:39	860:39	8	tif
LEAF_NODE	860:42	860:42	8	->
LEAF_NODE	860:44	860:44	8	tif_rawdatasize
LEAF_NODE	860:59	860:59	7	-
FIELD	860:60	860:60	7	1
LEAF_NODE	860:60	860:60	8	1
LEAF_NODE	860:62	860:62	7	-
FIELD	860:64	860:64	7	4
LEAF_NODE	860:64	860:64	8	4
LEAF_NODE	860:65	860:65	4	;
EXPR_STATEMENT	861:1	861:12	3	cl_hash ( sp ) ;
EXPR	861:1	861:1	4	cl_hash ( sp )
FUNCTION_CALL	861:1	861:11	5	cl_hash ( sp )
CALLEE	861:1	861:1	6	cl_hash
LEAF_NODE	861:1	861:1	7	cl_hash
LEAF_NODE	861:8	861:8	6	(
ARGUMENT	861:9	861:9	6	sp
FIELD	861:9	861:9	7	sp
LEAF_NODE	861:9	861:9	8	sp
LEAF_NODE	861:11	861:11	6	)
LEAF_NODE	861:12	861:12	4	;
EXPR_STATEMENT	862:1	862:31	3	sp -> enc_oldcode = ( hcode_t ) - 1 ;
EXPR	862:1	862:1	4	sp -> enc_oldcode = ( hcode_t ) - 1
ASSIGN	862:1	862:19	5	sp -> enc_oldcode = ( hcode_t ) - 1
LVAL	862:1	862:1	6	sp -> enc_oldcode
FIELD	862:1	862:5	7	sp -> enc_oldcode
LEAF_NODE	862:1	862:1	8	sp
LEAF_NODE	862:3	862:3	8	->
LEAF_NODE	862:5	862:5	8	enc_oldcode
ASSIGN_OP	862:17	862:17	6	=
LEAF_NODE	862:17	862:17	7	=
RVAL	862:19	862:29	6	( hcode_t ) - 1
LEAF_NODE	862:19	862:19	7	(
TYPE_NAME	862:20	862:20	7	hcode_t
LEAF_NODE	862:20	862:20	8	hcode_t
LEAF_NODE	862:27	862:27	7	)
UNARY_EXPR	862:29	862:30	7	- 1
UNARY_OPERATOR	862:29	862:29	8	-
LEAF_NODE	862:29	862:29	9	-
FIELD	862:30	862:30	8	1
LEAF_NODE	862:30	862:30	9	1
LEAF_NODE	862:31	862:31	4	;
JUMP_STATEMENT	863:1	863:11	3	return ( 1 ) ;
KEYWORD	863:1	863:1	4	return
LEAF_NODE	863:1	863:1	5	return
DESTINATION	863:8	863:8	4	( 1 )
EXPR	863:8	863:10	5	( 1 )
LEAF_NODE	863:8	863:8	6	(
FIELD	863:9	863:9	6	1
LEAF_NODE	863:9	863:9	7	1
LEAF_NODE	863:10	863:10	6	)
LEAF_NODE	863:11	863:11	4	;
LEAF_NODE	864:0	864:0	2	}
FUNCTION_DEF	901:0	1063:0	1	
RETURN_TYPE	901:0	901:7	2	static int
LEAF_NODE	901:0	901:0	3	static
TYPE_NAME	901:7	901:7	3	int
LEAF_NODE	901:7	901:7	4	int
FUNCTION_NAME	902:0	902:0	2	LZWEncode
LEAF_NODE	902:0	902:0	3	LZWEncode
PARAMETER_LIST	902:9	902:53	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	902:9	902:9	3	(
PARAMETER_DECL	902:10	902:16	3	TIFF * tif
TYPE	902:10	902:14	4	TIFF *
TYPE_NAME	902:10	902:10	5	TIFF
LEAF_NODE	902:10	902:10	6	TIFF
POINTER	902:14	902:14	5	*
LEAF_NODE	902:14	902:14	6	*
NAME	902:16	902:16	4	tif
LEAF_NODE	902:16	902:16	5	tif
LEAF_NODE	902:19	902:19	3	,
PARAMETER_DECL	902:21	902:28	3	uint8 * bp
TYPE	902:21	902:26	4	uint8 *
TYPE_NAME	902:21	902:21	5	uint8
LEAF_NODE	902:21	902:21	6	uint8
POINTER	902:26	902:26	5	*
LEAF_NODE	902:26	902:26	6	*
NAME	902:28	902:28	4	bp
LEAF_NODE	902:28	902:28	5	bp
LEAF_NODE	902:30	902:30	3	,
PARAMETER_DECL	902:32	902:41	3	tmsize_t cc
TYPE	902:32	902:32	4	tmsize_t
TYPE_NAME	902:32	902:32	5	tmsize_t
LEAF_NODE	902:32	902:32	6	tmsize_t
NAME	902:41	902:41	4	cc
LEAF_NODE	902:41	902:41	5	cc
LEAF_NODE	902:43	902:43	3	,
PARAMETER_DECL	902:45	902:52	3	uint16 s
TYPE	902:45	902:45	4	uint16
TYPE_NAME	902:45	902:45	5	uint16
LEAF_NODE	902:45	902:45	6	uint16
NAME	902:52	902:52	4	s
LEAF_NODE	902:52	902:52	5	s
LEAF_NODE	902:53	902:53	3	)
LEAF_NODE	903:0	903:0	2	{
STATEMENTS	904:1	1062:1	2	
LEAF_NODE	904:1	904:1	3	register
SIMPLE_DECL	904:10	904:47	3	LZWCodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	904:10	904:25	4	LZWCodecState * sp ; sp = EncoderState ( tif )
TYPE	904:10	904:24	5	LZWCodecState *
TYPE_NAME	904:10	904:10	6	LZWCodecState
LEAF_NODE	904:10	904:10	7	LZWCodecState
POINTER	904:24	904:24	6	*
LEAF_NODE	904:24	904:24	7	*
NAME	904:25	904:25	5	sp
LEAF_NODE	904:25	904:25	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	904:25	904:25	5	sp = EncoderState ( tif )
ASSIGN	904:25	904:30	6	sp = EncoderState ( tif )
LVAL	904:25	904:25	7	sp
NAME	904:25	904:25	8	sp
LEAF_NODE	904:25	904:25	9	sp
ASSIGN_OP	904:28	904:28	7	=
LEAF_NODE	904:28	904:28	8	=
RVAL	904:30	904:30	7	EncoderState ( tif )
FUNCTION_CALL	904:30	904:46	8	EncoderState ( tif )
CALLEE	904:30	904:30	9	EncoderState
LEAF_NODE	904:30	904:30	10	EncoderState
LEAF_NODE	904:42	904:42	9	(
ARGUMENT	904:43	904:43	9	tif
FIELD	904:43	904:43	10	tif
LEAF_NODE	904:43	904:43	11	tif
LEAF_NODE	904:46	904:46	9	)
LEAF_NODE	904:47	904:47	4	;
LEAF_NODE	905:1	905:1	3	register
SIMPLE_DECL	905:10	905:20	3	long fcode ;
VAR_DECL	905:10	905:15	4	long fcode
TYPE	905:10	905:10	5	long
TYPE_NAME	905:10	905:10	6	long
LEAF_NODE	905:10	905:10	7	long
NAME	905:15	905:15	5	fcode
LEAF_NODE	905:15	905:15	6	fcode
LEAF_NODE	905:20	905:20	4	;
LEAF_NODE	906:1	906:1	3	register
SIMPLE_DECL	906:10	906:20	3	hash_t * hp ;
VAR_DECL	906:10	906:18	4	hash_t * hp
TYPE	906:10	906:17	5	hash_t *
TYPE_NAME	906:10	906:10	6	hash_t
LEAF_NODE	906:10	906:10	7	hash_t
POINTER	906:17	906:17	6	*
LEAF_NODE	906:17	906:17	7	*
NAME	906:18	906:18	5	hp
LEAF_NODE	906:18	906:18	6	hp
LEAF_NODE	906:20	906:20	4	;
LEAF_NODE	907:1	907:1	3	register
SIMPLE_DECL	907:10	907:18	3	int h , int c ;
INIT_DECL_LIST	907:10	907:10	4	int h , int c
VAR_DECL	907:10	907:14	5	int h
TYPE	907:10	907:10	6	int
TYPE_NAME	907:10	907:10	7	int
LEAF_NODE	907:10	907:10	8	int
NAME	907:14	907:14	6	h
LEAF_NODE	907:14	907:14	7	h
LEAF_NODE	907:15	907:15	5	,
VAR_DECL	907:10	907:17	5	int c
TYPE	907:10	907:10	6	int
TYPE_NAME	907:10	907:10	7	int
LEAF_NODE	907:10	907:10	8	int
NAME	907:17	907:17	6	c
LEAF_NODE	907:17	907:17	7	c
LEAF_NODE	907:18	907:18	4	;
SIMPLE_DECL	908:1	908:12	3	hcode_t ent ;
VAR_DECL	908:1	908:9	4	hcode_t ent
TYPE	908:1	908:1	5	hcode_t
TYPE_NAME	908:1	908:1	6	hcode_t
LEAF_NODE	908:1	908:1	7	hcode_t
NAME	908:9	908:9	5	ent
LEAF_NODE	908:9	908:9	6	ent
LEAF_NODE	908:12	908:12	4	;
SIMPLE_DECL	909:1	909:10	3	long disp ;
VAR_DECL	909:1	909:6	4	long disp
TYPE	909:1	909:1	5	long
TYPE_NAME	909:1	909:1	6	long
LEAF_NODE	909:1	909:1	7	long
NAME	909:6	909:6	5	disp
LEAF_NODE	909:6	909:6	6	disp
LEAF_NODE	909:10	909:10	4	;
SIMPLE_DECL	910:1	910:35	3	long incount , long outcount , long checkpoint ;
INIT_DECL_LIST	910:1	910:1	4	long incount , long outcount , long checkpoint
VAR_DECL	910:1	910:6	5	long incount
TYPE	910:1	910:1	6	long
TYPE_NAME	910:1	910:1	7	long
LEAF_NODE	910:1	910:1	8	long
NAME	910:6	910:6	6	incount
LEAF_NODE	910:6	910:6	7	incount
LEAF_NODE	910:13	910:13	5	,
INIT_DECL_LIST	910:1	910:1	5	long outcount , long checkpoint
VAR_DECL	910:1	910:15	6	long outcount
TYPE	910:1	910:1	7	long
TYPE_NAME	910:1	910:1	8	long
LEAF_NODE	910:1	910:1	9	long
NAME	910:15	910:15	7	outcount
LEAF_NODE	910:15	910:15	8	outcount
LEAF_NODE	910:23	910:23	6	,
VAR_DECL	910:1	910:25	6	long checkpoint
TYPE	910:1	910:1	7	long
TYPE_NAME	910:1	910:1	8	long
LEAF_NODE	910:1	910:1	9	long
NAME	910:25	910:25	7	checkpoint
LEAF_NODE	910:25	910:25	8	checkpoint
LEAF_NODE	910:35	910:35	4	;
SIMPLE_DECL	911:1	911:23	3	unsigned long nextdata ;
VAR_DECL	911:1	911:15	4	unsigned long nextdata
TYPE	911:1	911:1	5	unsigned long
TYPE_NAME	911:1	911:10	6	unsigned long
LEAF_NODE	911:1	911:1	7	unsigned
LEAF_NODE	911:10	911:10	7	long
NAME	911:15	911:15	5	nextdata
LEAF_NODE	911:15	911:15	6	nextdata
LEAF_NODE	911:23	911:23	4	;
SIMPLE_DECL	912:8	912:21	3	long nextbits ;
VAR_DECL	912:8	912:13	4	long nextbits
TYPE	912:8	912:8	5	long
TYPE_NAME	912:8	912:8	6	long
LEAF_NODE	912:8	912:8	7	long
NAME	912:13	912:13	5	nextbits
LEAF_NODE	912:13	912:13	6	nextbits
LEAF_NODE	912:21	912:21	4	;
SIMPLE_DECL	913:1	913:29	3	int free_ent , int maxcode , int nbits ;
INIT_DECL_LIST	913:1	913:1	4	int free_ent , int maxcode , int nbits
VAR_DECL	913:1	913:5	5	int free_ent
TYPE	913:1	913:1	6	int
TYPE_NAME	913:1	913:1	7	int
LEAF_NODE	913:1	913:1	8	int
NAME	913:5	913:5	6	free_ent
LEAF_NODE	913:5	913:5	7	free_ent
LEAF_NODE	913:13	913:13	5	,
INIT_DECL_LIST	913:1	913:1	5	int maxcode , int nbits
VAR_DECL	913:1	913:15	6	int maxcode
TYPE	913:1	913:1	7	int
TYPE_NAME	913:1	913:1	8	int
LEAF_NODE	913:1	913:1	9	int
NAME	913:15	913:15	7	maxcode
LEAF_NODE	913:15	913:15	8	maxcode
LEAF_NODE	913:22	913:22	6	,
VAR_DECL	913:1	913:24	6	int nbits
TYPE	913:1	913:1	7	int
TYPE_NAME	913:1	913:1	8	int
LEAF_NODE	913:1	913:1	9	int
NAME	913:24	913:24	7	nbits
LEAF_NODE	913:24	913:24	8	nbits
LEAF_NODE	913:29	913:29	4	;
SIMPLE_DECL	914:1	914:10	3	uint8 * op ;
VAR_DECL	914:1	914:8	4	uint8 * op
TYPE	914:1	914:6	5	uint8 *
TYPE_NAME	914:1	914:1	6	uint8
LEAF_NODE	914:1	914:1	7	uint8
POINTER	914:6	914:6	6	*
LEAF_NODE	914:6	914:6	7	*
NAME	914:8	914:8	5	op
LEAF_NODE	914:8	914:8	6	op
LEAF_NODE	914:10	914:10	4	;
SIMPLE_DECL	915:1	915:13	3	uint8 * limit ;
VAR_DECL	915:1	915:8	4	uint8 * limit
TYPE	915:1	915:6	5	uint8 *
TYPE_NAME	915:1	915:1	6	uint8
LEAF_NODE	915:1	915:1	7	uint8
POINTER	915:6	915:6	6	*
LEAF_NODE	915:6	915:6	7	*
NAME	915:8	915:8	5	limit
LEAF_NODE	915:8	915:8	6	limit
LEAF_NODE	915:13	915:13	4	;
EXPR_STATEMENT	917:1	917:9	3	( void ) s ;
EXPR	917:1	917:8	4	( void ) s
LEAF_NODE	917:1	917:1	5	(
TYPE_NAME	917:2	917:2	5	void
LEAF_NODE	917:2	917:2	6	void
LEAF_NODE	917:6	917:6	5	)
FIELD	917:8	917:8	5	s
LEAF_NODE	917:8	917:8	6	s
LEAF_NODE	917:9	917:9	4	;
SELECTION	918:1	919:2	3	
KEYWORD	918:1	918:1	4	if
LEAF_NODE	918:1	918:1	5	if
LEAF_NODE	918:4	918:4	4	(
CONDITION	918:5	918:5	4	sp == NULL
EXPR	918:5	918:11	5	sp == NULL
FIELD	918:5	918:5	6	sp
LEAF_NODE	918:5	918:5	7	sp
EQ_OPERATOR	918:8	918:8	6	==
LEAF_NODE	918:8	918:8	7	==
FIELD	918:11	918:11	6	NULL
LEAF_NODE	918:11	918:11	7	NULL
LEAF_NODE	918:15	918:15	4	)
STATEMENTS	919:2	919:2	4	
JUMP_STATEMENT	919:2	919:12	5	return ( 0 ) ;
KEYWORD	919:2	919:2	6	return
LEAF_NODE	919:2	919:2	7	return
DESTINATION	919:9	919:9	6	( 0 )
EXPR	919:9	919:11	7	( 0 )
LEAF_NODE	919:9	919:9	8	(
FIELD	919:10	919:10	8	0
LEAF_NODE	919:10	919:10	9	0
LEAF_NODE	919:11	919:11	8	)
LEAF_NODE	919:12	919:12	6	;
EXPR_STATEMENT	921:8	921:39	3	assert ( sp -> enc_hashtab != NULL ) ;
EXPR	921:8	921:8	4	assert ( sp -> enc_hashtab != NULL )
FUNCTION_CALL	921:8	921:38	5	assert ( sp -> enc_hashtab != NULL )
CALLEE	921:8	921:8	6	assert
LEAF_NODE	921:8	921:8	7	assert
LEAF_NODE	921:14	921:14	6	(
ARGUMENT	921:15	921:34	6	sp -> enc_hashtab != NULL
FIELD	921:15	921:19	7	sp -> enc_hashtab
LEAF_NODE	921:15	921:15	8	sp
LEAF_NODE	921:17	921:17	8	->
LEAF_NODE	921:19	921:19	8	enc_hashtab
EQ_OPERATOR	921:31	921:31	7	!=
LEAF_NODE	921:31	921:31	8	!=
FIELD	921:34	921:34	7	NULL
LEAF_NODE	921:34	921:34	8	NULL
LEAF_NODE	921:38	921:38	6	)
LEAF_NODE	921:39	921:39	4	;
EXPR_STATEMENT	926:1	926:26	3	incount = sp -> enc_incount ;
EXPR	926:1	926:1	4	incount = sp -> enc_incount
ASSIGN	926:1	926:11	5	incount = sp -> enc_incount
LVAL	926:1	926:1	6	incount
FIELD	926:1	926:1	7	incount
LEAF_NODE	926:1	926:1	8	incount
ASSIGN_OP	926:9	926:9	6	=
LEAF_NODE	926:9	926:9	7	=
RVAL	926:11	926:11	6	sp -> enc_incount
FIELD	926:11	926:15	7	sp -> enc_incount
LEAF_NODE	926:11	926:11	8	sp
LEAF_NODE	926:13	926:13	8	->
LEAF_NODE	926:15	926:15	8	enc_incount
LEAF_NODE	926:26	926:26	4	;
EXPR_STATEMENT	927:1	927:28	3	outcount = sp -> enc_outcount ;
EXPR	927:1	927:1	4	outcount = sp -> enc_outcount
ASSIGN	927:1	927:12	5	outcount = sp -> enc_outcount
LVAL	927:1	927:1	6	outcount
FIELD	927:1	927:1	7	outcount
LEAF_NODE	927:1	927:1	8	outcount
ASSIGN_OP	927:10	927:10	6	=
LEAF_NODE	927:10	927:10	7	=
RVAL	927:12	927:12	6	sp -> enc_outcount
FIELD	927:12	927:16	7	sp -> enc_outcount
LEAF_NODE	927:12	927:12	8	sp
LEAF_NODE	927:14	927:14	8	->
LEAF_NODE	927:16	927:16	8	enc_outcount
LEAF_NODE	927:28	927:28	4	;
EXPR_STATEMENT	928:1	928:32	3	checkpoint = sp -> enc_checkpoint ;
EXPR	928:1	928:1	4	checkpoint = sp -> enc_checkpoint
ASSIGN	928:1	928:14	5	checkpoint = sp -> enc_checkpoint
LVAL	928:1	928:1	6	checkpoint
FIELD	928:1	928:1	7	checkpoint
LEAF_NODE	928:1	928:1	8	checkpoint
ASSIGN_OP	928:12	928:12	6	=
LEAF_NODE	928:12	928:12	7	=
RVAL	928:14	928:14	6	sp -> enc_checkpoint
FIELD	928:14	928:18	7	sp -> enc_checkpoint
LEAF_NODE	928:14	928:14	8	sp
LEAF_NODE	928:16	928:16	8	->
LEAF_NODE	928:18	928:18	8	enc_checkpoint
LEAF_NODE	928:32	928:32	4	;
EXPR_STATEMENT	929:1	929:28	3	nextdata = sp -> lzw_nextdata ;
EXPR	929:1	929:1	4	nextdata = sp -> lzw_nextdata
ASSIGN	929:1	929:12	5	nextdata = sp -> lzw_nextdata
LVAL	929:1	929:1	6	nextdata
FIELD	929:1	929:1	7	nextdata
LEAF_NODE	929:1	929:1	8	nextdata
ASSIGN_OP	929:10	929:10	6	=
LEAF_NODE	929:10	929:10	7	=
RVAL	929:12	929:12	6	sp -> lzw_nextdata
FIELD	929:12	929:16	7	sp -> lzw_nextdata
LEAF_NODE	929:12	929:12	8	sp
LEAF_NODE	929:14	929:14	8	->
LEAF_NODE	929:16	929:16	8	lzw_nextdata
LEAF_NODE	929:28	929:28	4	;
EXPR_STATEMENT	930:1	930:28	3	nextbits = sp -> lzw_nextbits ;
EXPR	930:1	930:1	4	nextbits = sp -> lzw_nextbits
ASSIGN	930:1	930:12	5	nextbits = sp -> lzw_nextbits
LVAL	930:1	930:1	6	nextbits
FIELD	930:1	930:1	7	nextbits
LEAF_NODE	930:1	930:1	8	nextbits
ASSIGN_OP	930:10	930:10	6	=
LEAF_NODE	930:10	930:10	7	=
RVAL	930:12	930:12	6	sp -> lzw_nextbits
FIELD	930:12	930:16	7	sp -> lzw_nextbits
LEAF_NODE	930:12	930:12	8	sp
LEAF_NODE	930:14	930:14	8	->
LEAF_NODE	930:16	930:16	8	lzw_nextbits
LEAF_NODE	930:28	930:28	4	;
EXPR_STATEMENT	931:1	931:28	3	free_ent = sp -> lzw_free_ent ;
EXPR	931:1	931:1	4	free_ent = sp -> lzw_free_ent
ASSIGN	931:1	931:12	5	free_ent = sp -> lzw_free_ent
LVAL	931:1	931:1	6	free_ent
FIELD	931:1	931:1	7	free_ent
LEAF_NODE	931:1	931:1	8	free_ent
ASSIGN_OP	931:10	931:10	6	=
LEAF_NODE	931:10	931:10	7	=
RVAL	931:12	931:12	6	sp -> lzw_free_ent
FIELD	931:12	931:16	7	sp -> lzw_free_ent
LEAF_NODE	931:12	931:12	8	sp
LEAF_NODE	931:14	931:14	8	->
LEAF_NODE	931:16	931:16	8	lzw_free_ent
LEAF_NODE	931:28	931:28	4	;
EXPR_STATEMENT	932:1	932:26	3	maxcode = sp -> lzw_maxcode ;
EXPR	932:1	932:1	4	maxcode = sp -> lzw_maxcode
ASSIGN	932:1	932:11	5	maxcode = sp -> lzw_maxcode
LVAL	932:1	932:1	6	maxcode
FIELD	932:1	932:1	7	maxcode
LEAF_NODE	932:1	932:1	8	maxcode
ASSIGN_OP	932:9	932:9	6	=
LEAF_NODE	932:9	932:9	7	=
RVAL	932:11	932:11	6	sp -> lzw_maxcode
FIELD	932:11	932:15	7	sp -> lzw_maxcode
LEAF_NODE	932:11	932:11	8	sp
LEAF_NODE	932:13	932:13	8	->
LEAF_NODE	932:15	932:15	8	lzw_maxcode
LEAF_NODE	932:26	932:26	4	;
EXPR_STATEMENT	933:1	933:22	3	nbits = sp -> lzw_nbits ;
EXPR	933:1	933:1	4	nbits = sp -> lzw_nbits
ASSIGN	933:1	933:9	5	nbits = sp -> lzw_nbits
LVAL	933:1	933:1	6	nbits
FIELD	933:1	933:1	7	nbits
LEAF_NODE	933:1	933:1	8	nbits
ASSIGN_OP	933:7	933:7	6	=
LEAF_NODE	933:7	933:7	7	=
RVAL	933:9	933:9	6	sp -> lzw_nbits
FIELD	933:9	933:13	7	sp -> lzw_nbits
LEAF_NODE	933:9	933:9	8	sp
LEAF_NODE	933:11	933:11	8	->
LEAF_NODE	933:13	933:13	8	lzw_nbits
LEAF_NODE	933:22	933:22	4	;
EXPR_STATEMENT	934:1	934:20	3	op = tif -> tif_rawcp ;
EXPR	934:1	934:1	4	op = tif -> tif_rawcp
ASSIGN	934:1	934:6	5	op = tif -> tif_rawcp
LVAL	934:1	934:1	6	op
FIELD	934:1	934:1	7	op
LEAF_NODE	934:1	934:1	8	op
ASSIGN_OP	934:4	934:4	6	=
LEAF_NODE	934:4	934:4	7	=
RVAL	934:6	934:6	6	tif -> tif_rawcp
FIELD	934:6	934:11	7	tif -> tif_rawcp
LEAF_NODE	934:6	934:6	8	tif
LEAF_NODE	934:9	934:9	8	->
LEAF_NODE	934:11	934:11	8	tif_rawcp
LEAF_NODE	934:20	934:20	4	;
EXPR_STATEMENT	935:1	935:25	3	limit = sp -> enc_rawlimit ;
EXPR	935:1	935:1	4	limit = sp -> enc_rawlimit
ASSIGN	935:1	935:9	5	limit = sp -> enc_rawlimit
LVAL	935:1	935:1	6	limit
FIELD	935:1	935:1	7	limit
LEAF_NODE	935:1	935:1	8	limit
ASSIGN_OP	935:7	935:7	6	=
LEAF_NODE	935:7	935:7	7	=
RVAL	935:9	935:9	6	sp -> enc_rawlimit
FIELD	935:9	935:13	7	sp -> enc_rawlimit
LEAF_NODE	935:9	935:9	8	sp
LEAF_NODE	935:11	935:11	8	->
LEAF_NODE	935:13	935:13	8	enc_rawlimit
LEAF_NODE	935:25	935:25	4	;
EXPR_STATEMENT	936:1	936:31	3	ent = ( hcode_t ) sp -> enc_oldcode ;
EXPR	936:1	936:1	4	ent = ( hcode_t ) sp -> enc_oldcode
ASSIGN	936:1	936:7	5	ent = ( hcode_t ) sp -> enc_oldcode
LVAL	936:1	936:1	6	ent
FIELD	936:1	936:1	7	ent
LEAF_NODE	936:1	936:1	8	ent
ASSIGN_OP	936:5	936:5	6	=
LEAF_NODE	936:5	936:5	7	=
RVAL	936:7	936:16	6	( hcode_t ) sp -> enc_oldcode
LEAF_NODE	936:7	936:7	7	(
TYPE_NAME	936:8	936:8	7	hcode_t
LEAF_NODE	936:8	936:8	8	hcode_t
LEAF_NODE	936:15	936:15	7	)
FIELD	936:16	936:20	7	sp -> enc_oldcode
LEAF_NODE	936:16	936:16	8	sp
LEAF_NODE	936:18	936:18	8	->
LEAF_NODE	936:20	936:20	8	enc_oldcode
LEAF_NODE	936:31	936:31	4	;
SELECTION	938:1	938:36	3	
KEYWORD	938:1	938:1	4	if
LEAF_NODE	938:1	938:1	5	if
LEAF_NODE	938:4	938:4	4	(
CONDITION	938:5	938:5	4	ent == ( hcode_t ) - 1 && cc > 0
EXPR	938:5	938:5	5	ent == ( hcode_t ) - 1 && cc > 0
AND	938:5	938:28	6	ent == ( hcode_t ) - 1 && cc > 0
EXPR	938:5	938:22	7	ent == ( hcode_t ) - 1
FIELD	938:5	938:5	8	ent
LEAF_NODE	938:5	938:5	9	ent
EQ_OPERATOR	938:9	938:9	8	==
LEAF_NODE	938:9	938:9	9	==
LEAF_NODE	938:12	938:12	8	(
TYPE_NAME	938:13	938:13	8	hcode_t
LEAF_NODE	938:13	938:13	9	hcode_t
LEAF_NODE	938:20	938:20	8	)
UNARY_EXPR	938:22	938:23	8	- 1
UNARY_OPERATOR	938:22	938:22	9	-
LEAF_NODE	938:22	938:22	10	-
FIELD	938:23	938:23	9	1
LEAF_NODE	938:23	938:23	10	1
LEAF_NODE	938:25	938:25	7	&&
EXPR	938:28	938:33	7	cc > 0
FIELD	938:28	938:28	8	cc
LEAF_NODE	938:28	938:28	9	cc
REL_OPERATOR	938:31	938:31	8	>
LEAF_NODE	938:31	938:31	9	>
FIELD	938:33	938:33	8	0
LEAF_NODE	938:33	938:33	9	0
LEAF_NODE	938:34	938:34	4	)
STATEMENTS	938:36	946:1	4	
LEAF_NODE	938:36	938:36	5	{
STATEMENTS	944:2	945:21	5	
EXPR_STATEMENT	944:2	944:29	6	PutNextCode ( op , CODE_CLEAR ) ;
EXPR	944:2	944:2	7	PutNextCode ( op , CODE_CLEAR )
FUNCTION_CALL	944:2	944:28	8	PutNextCode ( op , CODE_CLEAR )
CALLEE	944:2	944:2	9	PutNextCode
LEAF_NODE	944:2	944:2	10	PutNextCode
LEAF_NODE	944:13	944:13	9	(
ARGUMENT	944:14	944:14	9	op
FIELD	944:14	944:14	10	op
LEAF_NODE	944:14	944:14	11	op
LEAF_NODE	944:16	944:16	9	,
ARGUMENT	944:18	944:18	9	CODE_CLEAR
FIELD	944:18	944:18	10	CODE_CLEAR
LEAF_NODE	944:18	944:18	11	CODE_CLEAR
LEAF_NODE	944:28	944:28	9	)
LEAF_NODE	944:29	944:29	7	;
EXPR_STATEMENT	945:2	945:13	6	ent = * bp ++ ;
EXPR	945:2	945:2	7	ent = * bp ++
ASSIGN	945:2	945:8	8	ent = * bp ++
LVAL	945:2	945:2	9	ent
FIELD	945:2	945:2	10	ent
LEAF_NODE	945:2	945:2	11	ent
ASSIGN_OP	945:6	945:6	9	=
LEAF_NODE	945:6	945:6	10	=
RVAL	945:8	945:8	9	* bp ++
UNARY_EXPR	945:8	945:9	10	* bp ++
UNARY_OPERATOR	945:8	945:8	11	*
LEAF_NODE	945:8	945:8	12	*
FIELD	945:9	945:11	11	bp ++
LEAF_NODE	945:9	945:9	12	bp
LEAF_NODE	945:11	945:11	12	++
LEAF_NODE	945:13	945:13	7	;
EXPR_STATEMENT	945:15	945:19	6	cc -- ;
EXPR	945:15	945:15	7	cc --
FIELD	945:15	945:17	8	cc --
LEAF_NODE	945:15	945:15	9	cc
LEAF_NODE	945:17	945:17	9	--
LEAF_NODE	945:19	945:19	7	;
EXPR_STATEMENT	945:21	945:30	6	incount ++ ;
EXPR	945:21	945:21	7	incount ++
FIELD	945:21	945:28	8	incount ++
LEAF_NODE	945:21	945:21	9	incount
LEAF_NODE	945:28	945:28	9	++
LEAF_NODE	945:30	945:30	7	;
LEAF_NODE	946:1	946:1	5	}
ITERATION	947:1	947:16	3	
KEYWORD	947:1	947:1	4	while
LEAF_NODE	947:1	947:1	5	while
LEAF_NODE	947:7	947:7	4	(
CONDITION	947:8	947:8	4	cc > 0
EXPR	947:8	947:13	5	cc > 0
FIELD	947:8	947:8	6	cc
LEAF_NODE	947:8	947:8	7	cc
REL_OPERATOR	947:11	947:11	6	>
LEAF_NODE	947:11	947:11	7	>
FIELD	947:13	947:13	6	0
LEAF_NODE	947:13	947:13	7	0
LEAF_NODE	947:14	947:14	4	)
STATEMENTS	947:16	1047:1	4	
LEAF_NODE	947:16	947:16	5	{
STATEMENTS	948:2	1046:2	5	
EXPR_STATEMENT	948:2	948:11	6	c = * bp ++ ;
EXPR	948:2	948:2	7	c = * bp ++
ASSIGN	948:2	948:6	8	c = * bp ++
LVAL	948:2	948:2	9	c
FIELD	948:2	948:2	10	c
LEAF_NODE	948:2	948:2	11	c
ASSIGN_OP	948:4	948:4	9	=
LEAF_NODE	948:4	948:4	10	=
RVAL	948:6	948:6	9	* bp ++
UNARY_EXPR	948:6	948:7	10	* bp ++
UNARY_OPERATOR	948:6	948:6	11	*
LEAF_NODE	948:6	948:6	12	*
FIELD	948:7	948:9	11	bp ++
LEAF_NODE	948:7	948:7	12	bp
LEAF_NODE	948:9	948:9	12	++
LEAF_NODE	948:11	948:11	7	;
EXPR_STATEMENT	948:13	948:17	6	cc -- ;
EXPR	948:13	948:13	7	cc --
FIELD	948:13	948:15	8	cc --
LEAF_NODE	948:13	948:13	9	cc
LEAF_NODE	948:15	948:15	9	--
LEAF_NODE	948:17	948:17	7	;
EXPR_STATEMENT	948:19	948:28	6	incount ++ ;
EXPR	948:19	948:19	7	incount ++
FIELD	948:19	948:26	8	incount ++
LEAF_NODE	948:19	948:19	9	incount
LEAF_NODE	948:26	948:26	9	++
LEAF_NODE	948:28	948:28	7	;
EXPR_STATEMENT	949:2	949:37	6	fcode = ( ( long ) c << BITS_MAX ) + ent ;
EXPR	949:2	949:2	7	fcode = ( ( long ) c << BITS_MAX ) + ent
ASSIGN	949:2	949:10	8	fcode = ( ( long ) c << BITS_MAX ) + ent
LVAL	949:2	949:2	9	fcode
FIELD	949:2	949:2	10	fcode
LEAF_NODE	949:2	949:2	11	fcode
ASSIGN_OP	949:8	949:8	9	=
LEAF_NODE	949:8	949:8	10	=
RVAL	949:10	949:34	9	( ( long ) c << BITS_MAX ) + ent
LEAF_NODE	949:10	949:10	10	(
LEAF_NODE	949:11	949:11	10	(
TYPE_NAME	949:12	949:12	10	long
LEAF_NODE	949:12	949:12	11	long
LEAF_NODE	949:16	949:16	10	)
FIELD	949:17	949:17	10	c
LEAF_NODE	949:17	949:17	11	c
LEAF_NODE	949:19	949:19	10	<<
FIELD	949:22	949:22	10	BITS_MAX
LEAF_NODE	949:22	949:22	11	BITS_MAX
LEAF_NODE	949:30	949:30	10	)
LEAF_NODE	949:32	949:32	10	+
FIELD	949:34	949:34	10	ent
LEAF_NODE	949:34	949:34	11	ent
LEAF_NODE	949:37	949:37	7	;
EXPR_STATEMENT	950:2	950:25	6	h = ( c << HSHIFT ) ^ ent ;
EXPR	950:2	950:2	7	h = ( c << HSHIFT ) ^ ent
ASSIGN	950:2	950:6	8	h = ( c << HSHIFT ) ^ ent
LVAL	950:2	950:2	9	h
FIELD	950:2	950:2	10	h
LEAF_NODE	950:2	950:2	11	h
ASSIGN_OP	950:4	950:4	9	=
LEAF_NODE	950:4	950:4	10	=
RVAL	950:6	950:22	9	( c << HSHIFT ) ^ ent
LEAF_NODE	950:6	950:6	10	(
FIELD	950:7	950:7	10	c
LEAF_NODE	950:7	950:7	11	c
LEAF_NODE	950:9	950:9	10	<<
FIELD	950:12	950:12	10	HSHIFT
LEAF_NODE	950:12	950:12	11	HSHIFT
LEAF_NODE	950:18	950:18	10	)
LEAF_NODE	950:20	950:20	10	^
FIELD	950:22	950:22	10	ent
LEAF_NODE	950:22	950:22	11	ent
LEAF_NODE	950:25	950:25	7	;
SELECTION	955:2	956:3	6	
KEYWORD	955:2	955:2	7	if
LEAF_NODE	955:2	955:2	8	if
LEAF_NODE	955:5	955:5	7	(
CONDITION	955:6	955:6	7	h >= HSIZE
EXPR	955:6	955:11	8	h >= HSIZE
FIELD	955:6	955:6	9	h
LEAF_NODE	955:6	955:6	10	h
REL_OPERATOR	955:8	955:8	9	>=
LEAF_NODE	955:8	955:8	10	>=
FIELD	955:11	955:11	9	HSIZE
LEAF_NODE	955:11	955:11	10	HSIZE
LEAF_NODE	955:16	955:16	7	)
STATEMENTS	956:3	956:3	7	
EXPR_STATEMENT	956:3	956:13	8	h -= HSIZE ;
EXPR	956:3	956:3	9	h -= HSIZE
ASSIGN	956:3	956:8	10	h -= HSIZE
LVAL	956:3	956:3	11	h
FIELD	956:3	956:3	12	h
LEAF_NODE	956:3	956:3	13	h
ASSIGN_OP	956:5	956:5	11	-=
LEAF_NODE	956:5	956:5	12	-=
RVAL	956:8	956:8	11	HSIZE
FIELD	956:8	956:8	12	HSIZE
LEAF_NODE	956:8	956:8	13	HSIZE
LEAF_NODE	956:13	956:13	9	;
EXPR_STATEMENT	958:2	958:26	6	hp = & sp -> enc_hashtab [ h ] ;
EXPR	958:2	958:2	7	hp = & sp -> enc_hashtab [ h ]
ASSIGN	958:2	958:7	8	hp = & sp -> enc_hashtab [ h ]
LVAL	958:2	958:2	9	hp
FIELD	958:2	958:2	10	hp
LEAF_NODE	958:2	958:2	11	hp
ASSIGN_OP	958:5	958:5	9	=
LEAF_NODE	958:5	958:5	10	=
RVAL	958:7	958:7	9	& sp -> enc_hashtab [ h ]
UNARY_EXPR	958:7	958:8	10	& sp -> enc_hashtab [ h ]
UNARY_OPERATOR	958:7	958:7	11	&
LEAF_NODE	958:7	958:7	12	&
FIELD	958:8	958:25	11	sp -> enc_hashtab [ h ]
LEAF_NODE	958:8	958:8	12	sp
LEAF_NODE	958:10	958:10	12	->
LEAF_NODE	958:12	958:12	12	enc_hashtab
LEAF_NODE	958:23	958:23	12	[
EXPR	958:24	958:24	12	h
FIELD	958:24	958:24	13	h
LEAF_NODE	958:24	958:24	14	h
LEAF_NODE	958:25	958:25	12	]
LEAF_NODE	958:26	958:26	7	;
SELECTION	959:2	959:25	6	
KEYWORD	959:2	959:2	7	if
LEAF_NODE	959:2	959:2	8	if
LEAF_NODE	959:5	959:5	7	(
CONDITION	959:6	959:6	7	hp -> hash == fcode
EXPR	959:6	959:18	8	hp -> hash == fcode
FIELD	959:6	959:10	9	hp -> hash
LEAF_NODE	959:6	959:6	10	hp
LEAF_NODE	959:8	959:8	10	->
LEAF_NODE	959:10	959:10	10	hash
EQ_OPERATOR	959:15	959:15	9	==
LEAF_NODE	959:15	959:15	10	==
FIELD	959:18	959:18	9	fcode
LEAF_NODE	959:18	959:18	10	fcode
LEAF_NODE	959:23	959:23	7	)
STATEMENTS	959:25	962:2	7	
LEAF_NODE	959:25	959:25	8	{
STATEMENTS	960:3	961:3	8	
EXPR_STATEMENT	960:3	960:17	9	ent = hp -> code ;
EXPR	960:3	960:3	10	ent = hp -> code
ASSIGN	960:3	960:9	11	ent = hp -> code
LVAL	960:3	960:3	12	ent
FIELD	960:3	960:3	13	ent
LEAF_NODE	960:3	960:3	14	ent
ASSIGN_OP	960:7	960:7	12	=
LEAF_NODE	960:7	960:7	13	=
RVAL	960:9	960:9	12	hp -> code
FIELD	960:9	960:13	13	hp -> code
LEAF_NODE	960:9	960:9	14	hp
LEAF_NODE	960:11	960:11	14	->
LEAF_NODE	960:13	960:13	14	code
LEAF_NODE	960:17	960:17	10	;
JUMP_STATEMENT	961:3	961:11	9	continue DESTINATION ;
KEYWORD	961:3	961:3	10	continue
LEAF_NODE	961:3	961:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	961:11	961:11	10	;
LEAF_NODE	962:2	962:2	8	}
SELECTION	963:2	963:21	6	
KEYWORD	963:2	963:2	7	if
LEAF_NODE	963:2	963:2	8	if
LEAF_NODE	963:5	963:5	7	(
CONDITION	963:6	963:6	7	hp -> hash >= 0
EXPR	963:6	963:18	8	hp -> hash >= 0
FIELD	963:6	963:10	9	hp -> hash
LEAF_NODE	963:6	963:6	10	hp
LEAF_NODE	963:8	963:8	10	->
LEAF_NODE	963:10	963:10	10	hash
REL_OPERATOR	963:15	963:15	9	>=
LEAF_NODE	963:15	963:15	10	>=
FIELD	963:18	963:18	9	0
LEAF_NODE	963:18	963:18	10	0
LEAF_NODE	963:19	963:19	7	)
STATEMENTS	963:21	983:2	7	
LEAF_NODE	963:21	963:21	8	{
STATEMENTS	967:3	982:26	8	
EXPR_STATEMENT	967:3	967:19	9	disp = HSIZE - h ;
EXPR	967:3	967:3	10	disp = HSIZE - h
ASSIGN	967:3	967:10	11	disp = HSIZE - h
LVAL	967:3	967:3	12	disp
FIELD	967:3	967:3	13	disp
LEAF_NODE	967:3	967:3	14	disp
ASSIGN_OP	967:8	967:8	12	=
LEAF_NODE	967:8	967:8	13	=
RVAL	967:10	967:18	12	HSIZE - h
FIELD	967:10	967:10	13	HSIZE
LEAF_NODE	967:10	967:10	14	HSIZE
LEAF_NODE	967:16	967:16	13	-
FIELD	967:18	967:18	13	h
LEAF_NODE	967:18	967:18	14	h
LEAF_NODE	967:19	967:19	10	;
SELECTION	968:3	969:4	9	
KEYWORD	968:3	968:3	10	if
LEAF_NODE	968:3	968:3	11	if
LEAF_NODE	968:6	968:6	10	(
CONDITION	968:7	968:7	10	h == 0
EXPR	968:7	968:12	11	h == 0
FIELD	968:7	968:7	12	h
LEAF_NODE	968:7	968:7	13	h
EQ_OPERATOR	968:9	968:9	12	==
LEAF_NODE	968:9	968:9	13	==
FIELD	968:12	968:12	12	0
LEAF_NODE	968:12	968:12	13	0
LEAF_NODE	968:13	968:13	10	)
STATEMENTS	969:4	969:4	10	
EXPR_STATEMENT	969:4	969:12	11	disp = 1 ;
EXPR	969:4	969:4	12	disp = 1
ASSIGN	969:4	969:11	13	disp = 1
LVAL	969:4	969:4	14	disp
FIELD	969:4	969:4	15	disp
LEAF_NODE	969:4	969:4	16	disp
ASSIGN_OP	969:9	969:9	14	=
LEAF_NODE	969:9	969:9	15	=
RVAL	969:11	969:11	14	1
FIELD	969:11	969:11	15	1
LEAF_NODE	969:11	969:11	16	1
LEAF_NODE	969:12	969:12	12	;
ITERATION	970:3	970:6	9	
KEYWORD	970:3	970:3	10	do
LEAF_NODE	970:3	970:3	11	do
LEAF_NODE	982:11	982:11	10	(
CONDITION	982:12	982:12	10	hp -> hash >= 0
EXPR	982:12	982:24	11	hp -> hash >= 0
FIELD	982:12	982:16	12	hp -> hash
LEAF_NODE	982:12	982:12	13	hp
LEAF_NODE	982:14	982:14	13	->
LEAF_NODE	982:16	982:16	13	hash
REL_OPERATOR	982:21	982:21	12	>=
LEAF_NODE	982:21	982:21	13	>=
FIELD	982:24	982:24	12	0
LEAF_NODE	982:24	982:24	13	0
LEAF_NODE	982:25	982:25	10	)
STATEMENTS	970:6	982:3	10	
LEAF_NODE	970:6	970:6	11	{
STATEMENTS	975:4	978:4	11	
SELECTION	975:4	976:5	12	
KEYWORD	975:4	975:4	13	if
LEAF_NODE	975:4	975:4	14	if
LEAF_NODE	975:7	975:7	13	(
CONDITION	975:8	975:8	13	( h -= disp ) < 0
EXPR	975:8	975:22	14	( h -= disp ) < 0
LEAF_NODE	975:8	975:8	15	(
ASSIGN	975:9	975:14	15	h -= disp
LVAL	975:9	975:9	16	h
FIELD	975:9	975:9	17	h
LEAF_NODE	975:9	975:9	18	h
ASSIGN_OP	975:11	975:11	16	-=
LEAF_NODE	975:11	975:11	17	-=
RVAL	975:14	975:14	16	disp
FIELD	975:14	975:14	17	disp
LEAF_NODE	975:14	975:14	18	disp
LEAF_NODE	975:18	975:18	15	)
REL_OPERATOR	975:20	975:20	15	<
LEAF_NODE	975:20	975:20	16	<
FIELD	975:22	975:22	15	0
LEAF_NODE	975:22	975:22	16	0
LEAF_NODE	975:23	975:23	13	)
STATEMENTS	976:5	976:5	13	
EXPR_STATEMENT	976:5	976:15	14	h += HSIZE ;
EXPR	976:5	976:5	15	h += HSIZE
ASSIGN	976:5	976:10	16	h += HSIZE
LVAL	976:5	976:5	17	h
FIELD	976:5	976:5	18	h
LEAF_NODE	976:5	976:5	19	h
ASSIGN_OP	976:7	976:7	17	+=
LEAF_NODE	976:7	976:7	18	+=
RVAL	976:10	976:10	17	HSIZE
FIELD	976:10	976:10	18	HSIZE
LEAF_NODE	976:10	976:10	19	HSIZE
LEAF_NODE	976:15	976:15	15	;
EXPR_STATEMENT	977:4	977:28	12	hp = & sp -> enc_hashtab [ h ] ;
EXPR	977:4	977:4	13	hp = & sp -> enc_hashtab [ h ]
ASSIGN	977:4	977:9	14	hp = & sp -> enc_hashtab [ h ]
LVAL	977:4	977:4	15	hp
FIELD	977:4	977:4	16	hp
LEAF_NODE	977:4	977:4	17	hp
ASSIGN_OP	977:7	977:7	15	=
LEAF_NODE	977:7	977:7	16	=
RVAL	977:9	977:9	15	& sp -> enc_hashtab [ h ]
UNARY_EXPR	977:9	977:10	16	& sp -> enc_hashtab [ h ]
UNARY_OPERATOR	977:9	977:9	17	&
LEAF_NODE	977:9	977:9	18	&
FIELD	977:10	977:27	17	sp -> enc_hashtab [ h ]
LEAF_NODE	977:10	977:10	18	sp
LEAF_NODE	977:12	977:12	18	->
LEAF_NODE	977:14	977:14	18	enc_hashtab
LEAF_NODE	977:25	977:25	18	[
EXPR	977:26	977:26	18	h
FIELD	977:26	977:26	19	h
LEAF_NODE	977:26	977:26	20	h
LEAF_NODE	977:27	977:27	18	]
LEAF_NODE	977:28	977:28	13	;
SELECTION	978:4	978:27	12	
KEYWORD	978:4	978:4	13	if
LEAF_NODE	978:4	978:4	14	if
LEAF_NODE	978:7	978:7	13	(
CONDITION	978:8	978:8	13	hp -> hash == fcode
EXPR	978:8	978:20	14	hp -> hash == fcode
FIELD	978:8	978:12	15	hp -> hash
LEAF_NODE	978:8	978:8	16	hp
LEAF_NODE	978:10	978:10	16	->
LEAF_NODE	978:12	978:12	16	hash
EQ_OPERATOR	978:17	978:17	15	==
LEAF_NODE	978:17	978:17	16	==
FIELD	978:20	978:20	15	fcode
LEAF_NODE	978:20	978:20	16	fcode
LEAF_NODE	978:25	978:25	13	)
STATEMENTS	978:27	981:4	13	
LEAF_NODE	978:27	978:27	14	{
STATEMENTS	979:5	980:5	14	
EXPR_STATEMENT	979:5	979:19	15	ent = hp -> code ;
EXPR	979:5	979:5	16	ent = hp -> code
ASSIGN	979:5	979:11	17	ent = hp -> code
LVAL	979:5	979:5	18	ent
FIELD	979:5	979:5	19	ent
LEAF_NODE	979:5	979:5	20	ent
ASSIGN_OP	979:9	979:9	18	=
LEAF_NODE	979:9	979:9	19	=
RVAL	979:11	979:11	18	hp -> code
FIELD	979:11	979:15	19	hp -> code
LEAF_NODE	979:11	979:11	20	hp
LEAF_NODE	979:13	979:13	20	->
LEAF_NODE	979:15	979:15	20	code
LEAF_NODE	979:19	979:19	16	;
JUMP_STATEMENT	980:5	980:13	15	goto hit ;
KEYWORD	980:5	980:5	16	goto
LEAF_NODE	980:5	980:5	17	goto
DESTINATION	980:10	980:10	16	hit
LEAF_NODE	980:10	980:10	17	hit
LEAF_NODE	980:13	980:13	16	;
LEAF_NODE	981:4	981:4	14	}
LEAF_NODE	982:3	982:3	11	}
LEAF_NODE	982:26	982:26	9	;
LEAF_NODE	983:2	983:2	8	}
SELECTION	993:2	993:18	6	
KEYWORD	993:2	993:2	7	if
LEAF_NODE	993:2	993:2	8	if
LEAF_NODE	993:5	993:5	7	(
CONDITION	993:6	993:6	7	op > limit
EXPR	993:6	993:11	8	op > limit
FIELD	993:6	993:6	9	op
LEAF_NODE	993:6	993:6	10	op
REL_OPERATOR	993:9	993:9	9	>
LEAF_NODE	993:9	993:9	10	>
FIELD	993:11	993:11	9	limit
LEAF_NODE	993:11	993:11	10	limit
LEAF_NODE	993:16	993:16	7	)
STATEMENTS	993:18	998:2	7	
LEAF_NODE	993:18	993:18	8	{
STATEMENTS	994:3	997:3	8	
EXPR_STATEMENT	994:3	994:53	9	tif -> tif_rawcc = ( tmsize_t ) ( op - tif -> tif_rawdata ) ;
EXPR	994:3	994:3	10	tif -> tif_rawcc = ( tmsize_t ) ( op - tif -> tif_rawdata )
ASSIGN	994:3	994:20	11	tif -> tif_rawcc = ( tmsize_t ) ( op - tif -> tif_rawdata )
LVAL	994:3	994:3	12	tif -> tif_rawcc
FIELD	994:3	994:8	13	tif -> tif_rawcc
LEAF_NODE	994:3	994:3	14	tif
LEAF_NODE	994:6	994:6	14	->
LEAF_NODE	994:8	994:8	14	tif_rawcc
ASSIGN_OP	994:18	994:18	12	=
LEAF_NODE	994:18	994:18	13	=
RVAL	994:20	994:52	12	( tmsize_t ) ( op - tif -> tif_rawdata )
LEAF_NODE	994:20	994:20	13	(
TYPE_NAME	994:21	994:21	13	tmsize_t
LEAF_NODE	994:21	994:21	14	tmsize_t
LEAF_NODE	994:29	994:29	13	)
LEAF_NODE	994:30	994:30	13	(
FIELD	994:31	994:31	13	op
LEAF_NODE	994:31	994:31	14	op
LEAF_NODE	994:34	994:34	13	-
FIELD	994:36	994:41	13	tif -> tif_rawdata
LEAF_NODE	994:36	994:36	14	tif
LEAF_NODE	994:39	994:39	14	->
LEAF_NODE	994:41	994:41	14	tif_rawdata
LEAF_NODE	994:52	994:52	13	)
LEAF_NODE	994:53	994:53	10	;
SELECTION	995:3	996:28	9	
KEYWORD	995:3	995:3	10	if
LEAF_NODE	995:3	995:3	11	if
LEAF_NODE	995:5	995:5	10	(
CONDITION	995:7	995:7	10	! TIFFFlushData1 ( tif )
EXPR	995:7	995:7	11	! TIFFFlushData1 ( tif )
UNARY_EXPR	995:7	995:8	12	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	995:7	995:7	13	!
LEAF_NODE	995:7	995:7	14	!
FUNCTION_CALL	995:8	995:26	13	TIFFFlushData1 ( tif )
CALLEE	995:8	995:8	14	TIFFFlushData1
LEAF_NODE	995:8	995:8	15	TIFFFlushData1
LEAF_NODE	995:22	995:22	14	(
ARGUMENT	995:23	995:23	14	tif
FIELD	995:23	995:23	15	tif
LEAF_NODE	995:23	995:23	16	tif
LEAF_NODE	995:26	995:26	14	)
LEAF_NODE	995:28	995:28	10	)
STATEMENTS	996:28	996:28	10	
JUMP_STATEMENT	996:28	996:36	11	return 0 ;
KEYWORD	996:28	996:28	12	return
LEAF_NODE	996:28	996:28	13	return
DESTINATION	996:35	996:35	12	0
EXPR	996:35	996:35	13	0
FIELD	996:35	996:35	14	0
LEAF_NODE	996:35	996:35	15	0
LEAF_NODE	996:36	996:36	12	;
EXPR_STATEMENT	997:3	997:24	9	op = tif -> tif_rawdata ;
EXPR	997:3	997:3	10	op = tif -> tif_rawdata
ASSIGN	997:3	997:8	11	op = tif -> tif_rawdata
LVAL	997:3	997:3	12	op
FIELD	997:3	997:3	13	op
LEAF_NODE	997:3	997:3	14	op
ASSIGN_OP	997:6	997:6	12	=
LEAF_NODE	997:6	997:6	13	=
RVAL	997:8	997:8	12	tif -> tif_rawdata
FIELD	997:8	997:13	13	tif -> tif_rawdata
LEAF_NODE	997:8	997:8	14	tif
LEAF_NODE	997:11	997:11	14	->
LEAF_NODE	997:13	997:13	14	tif_rawdata
LEAF_NODE	997:24	997:24	10	;
LEAF_NODE	998:2	998:2	8	}
EXPR_STATEMENT	999:2	999:22	6	PutNextCode ( op , ent ) ;
EXPR	999:2	999:2	7	PutNextCode ( op , ent )
FUNCTION_CALL	999:2	999:21	8	PutNextCode ( op , ent )
CALLEE	999:2	999:2	9	PutNextCode
LEAF_NODE	999:2	999:2	10	PutNextCode
LEAF_NODE	999:13	999:13	9	(
ARGUMENT	999:14	999:14	9	op
FIELD	999:14	999:14	10	op
LEAF_NODE	999:14	999:14	11	op
LEAF_NODE	999:16	999:16	9	,
ARGUMENT	999:18	999:18	9	ent
FIELD	999:18	999:18	10	ent
LEAF_NODE	999:18	999:18	11	ent
LEAF_NODE	999:21	999:21	9	)
LEAF_NODE	999:22	999:22	7	;
EXPR_STATEMENT	1000:2	1000:18	6	ent = ( hcode_t ) c ;
EXPR	1000:2	1000:2	7	ent = ( hcode_t ) c
ASSIGN	1000:2	1000:8	8	ent = ( hcode_t ) c
LVAL	1000:2	1000:2	9	ent
FIELD	1000:2	1000:2	10	ent
LEAF_NODE	1000:2	1000:2	11	ent
ASSIGN_OP	1000:6	1000:6	9	=
LEAF_NODE	1000:6	1000:6	10	=
RVAL	1000:8	1000:17	9	( hcode_t ) c
LEAF_NODE	1000:8	1000:8	10	(
TYPE_NAME	1000:9	1000:9	10	hcode_t
LEAF_NODE	1000:9	1000:9	11	hcode_t
LEAF_NODE	1000:16	1000:16	10	)
FIELD	1000:17	1000:17	10	c
LEAF_NODE	1000:17	1000:17	11	c
LEAF_NODE	1000:18	1000:18	7	;
EXPR_STATEMENT	1001:2	1001:34	6	hp -> code = ( hcode_t ) ( free_ent ++ ) ;
EXPR	1001:2	1001:2	7	hp -> code = ( hcode_t ) ( free_ent ++ )
ASSIGN	1001:2	1001:13	8	hp -> code = ( hcode_t ) ( free_ent ++ )
LVAL	1001:2	1001:2	9	hp -> code
FIELD	1001:2	1001:6	10	hp -> code
LEAF_NODE	1001:2	1001:2	11	hp
LEAF_NODE	1001:4	1001:4	11	->
LEAF_NODE	1001:6	1001:6	11	code
ASSIGN_OP	1001:11	1001:11	9	=
LEAF_NODE	1001:11	1001:11	10	=
RVAL	1001:13	1001:33	9	( hcode_t ) ( free_ent ++ )
LEAF_NODE	1001:13	1001:13	10	(
TYPE_NAME	1001:14	1001:14	10	hcode_t
LEAF_NODE	1001:14	1001:14	11	hcode_t
LEAF_NODE	1001:21	1001:21	10	)
LEAF_NODE	1001:22	1001:22	10	(
FIELD	1001:23	1001:31	10	free_ent ++
LEAF_NODE	1001:23	1001:23	11	free_ent
LEAF_NODE	1001:31	1001:31	11	++
LEAF_NODE	1001:33	1001:33	10	)
LEAF_NODE	1001:34	1001:34	7	;
EXPR_STATEMENT	1002:2	1002:18	6	hp -> hash = fcode ;
EXPR	1002:2	1002:2	7	hp -> hash = fcode
ASSIGN	1002:2	1002:13	8	hp -> hash = fcode
LVAL	1002:2	1002:2	9	hp -> hash
FIELD	1002:2	1002:6	10	hp -> hash
LEAF_NODE	1002:2	1002:2	11	hp
LEAF_NODE	1002:4	1002:4	11	->
LEAF_NODE	1002:6	1002:6	11	hash
ASSIGN_OP	1002:11	1002:11	9	=
LEAF_NODE	1002:11	1002:11	10	=
RVAL	1002:13	1002:13	9	fcode
FIELD	1002:13	1002:13	10	fcode
LEAF_NODE	1002:13	1002:13	11	fcode
LEAF_NODE	1002:18	1002:18	7	;
SELECTION	1003:2	1003:30	6	
KEYWORD	1003:2	1003:2	7	if
LEAF_NODE	1003:2	1003:2	8	if
LEAF_NODE	1003:5	1003:5	7	(
CONDITION	1003:6	1003:6	7	free_ent == CODE_MAX - 1
EXPR	1003:6	1003:27	8	free_ent == CODE_MAX - 1
FIELD	1003:6	1003:6	9	free_ent
LEAF_NODE	1003:6	1003:6	10	free_ent
EQ_OPERATOR	1003:15	1003:15	9	==
LEAF_NODE	1003:15	1003:15	10	==
FIELD	1003:18	1003:18	9	CODE_MAX
LEAF_NODE	1003:18	1003:18	10	CODE_MAX
LEAF_NODE	1003:26	1003:26	9	-
FIELD	1003:27	1003:27	9	1
LEAF_NODE	1003:27	1003:27	10	1
LEAF_NODE	1003:28	1003:28	7	)
STATEMENTS	1003:30	1013:2	7	
LEAF_NODE	1003:30	1003:30	8	{
STATEMENTS	1005:3	1012:3	8	
EXPR_STATEMENT	1005:3	1005:14	9	cl_hash ( sp ) ;
EXPR	1005:3	1005:3	10	cl_hash ( sp )
FUNCTION_CALL	1005:3	1005:13	11	cl_hash ( sp )
CALLEE	1005:3	1005:3	12	cl_hash
LEAF_NODE	1005:3	1005:3	13	cl_hash
LEAF_NODE	1005:10	1005:10	12	(
ARGUMENT	1005:11	1005:11	12	sp
FIELD	1005:11	1005:11	13	sp
LEAF_NODE	1005:11	1005:11	14	sp
LEAF_NODE	1005:13	1005:13	12	)
LEAF_NODE	1005:14	1005:14	10	;
EXPR_STATEMENT	1006:3	1006:20	9	sp -> enc_ratio = 0 ;
EXPR	1006:3	1006:3	10	sp -> enc_ratio = 0
ASSIGN	1006:3	1006:19	11	sp -> enc_ratio = 0
LVAL	1006:3	1006:3	12	sp -> enc_ratio
FIELD	1006:3	1006:7	13	sp -> enc_ratio
LEAF_NODE	1006:3	1006:3	14	sp
LEAF_NODE	1006:5	1006:5	14	->
LEAF_NODE	1006:7	1006:7	14	enc_ratio
ASSIGN_OP	1006:17	1006:17	12	=
LEAF_NODE	1006:17	1006:17	13	=
RVAL	1006:19	1006:19	12	0
FIELD	1006:19	1006:19	13	0
LEAF_NODE	1006:19	1006:19	14	0
LEAF_NODE	1006:20	1006:20	10	;
EXPR_STATEMENT	1007:3	1007:14	9	incount = 0 ;
EXPR	1007:3	1007:3	10	incount = 0
ASSIGN	1007:3	1007:13	11	incount = 0
LVAL	1007:3	1007:3	12	incount
FIELD	1007:3	1007:3	13	incount
LEAF_NODE	1007:3	1007:3	14	incount
ASSIGN_OP	1007:11	1007:11	12	=
LEAF_NODE	1007:11	1007:11	13	=
RVAL	1007:13	1007:13	12	0
FIELD	1007:13	1007:13	13	0
LEAF_NODE	1007:13	1007:13	14	0
LEAF_NODE	1007:14	1007:14	10	;
EXPR_STATEMENT	1008:3	1008:15	9	outcount = 0 ;
EXPR	1008:3	1008:3	10	outcount = 0
ASSIGN	1008:3	1008:14	11	outcount = 0
LVAL	1008:3	1008:3	12	outcount
FIELD	1008:3	1008:3	13	outcount
LEAF_NODE	1008:3	1008:3	14	outcount
ASSIGN_OP	1008:12	1008:12	12	=
LEAF_NODE	1008:12	1008:12	13	=
RVAL	1008:14	1008:14	12	0
FIELD	1008:14	1008:14	13	0
LEAF_NODE	1008:14	1008:14	14	0
LEAF_NODE	1008:15	1008:15	10	;
EXPR_STATEMENT	1009:3	1009:24	9	free_ent = CODE_FIRST ;
EXPR	1009:3	1009:3	10	free_ent = CODE_FIRST
ASSIGN	1009:3	1009:14	11	free_ent = CODE_FIRST
LVAL	1009:3	1009:3	12	free_ent
FIELD	1009:3	1009:3	13	free_ent
LEAF_NODE	1009:3	1009:3	14	free_ent
ASSIGN_OP	1009:12	1009:12	12	=
LEAF_NODE	1009:12	1009:12	13	=
RVAL	1009:14	1009:14	12	CODE_FIRST
FIELD	1009:14	1009:14	13	CODE_FIRST
LEAF_NODE	1009:14	1009:14	14	CODE_FIRST
LEAF_NODE	1009:24	1009:24	10	;
EXPR_STATEMENT	1010:3	1010:30	9	PutNextCode ( op , CODE_CLEAR ) ;
EXPR	1010:3	1010:3	10	PutNextCode ( op , CODE_CLEAR )
FUNCTION_CALL	1010:3	1010:29	11	PutNextCode ( op , CODE_CLEAR )
CALLEE	1010:3	1010:3	12	PutNextCode
LEAF_NODE	1010:3	1010:3	13	PutNextCode
LEAF_NODE	1010:14	1010:14	12	(
ARGUMENT	1010:15	1010:15	12	op
FIELD	1010:15	1010:15	13	op
LEAF_NODE	1010:15	1010:15	14	op
LEAF_NODE	1010:17	1010:17	12	,
ARGUMENT	1010:19	1010:19	12	CODE_CLEAR
FIELD	1010:19	1010:19	13	CODE_CLEAR
LEAF_NODE	1010:19	1010:19	14	CODE_CLEAR
LEAF_NODE	1010:29	1010:29	12	)
LEAF_NODE	1010:30	1010:30	10	;
EXPR_STATEMENT	1011:3	1011:19	9	nbits = BITS_MIN ;
EXPR	1011:3	1011:3	10	nbits = BITS_MIN
ASSIGN	1011:3	1011:11	11	nbits = BITS_MIN
LVAL	1011:3	1011:3	12	nbits
FIELD	1011:3	1011:3	13	nbits
LEAF_NODE	1011:3	1011:3	14	nbits
ASSIGN_OP	1011:9	1011:9	12	=
LEAF_NODE	1011:9	1011:9	13	=
RVAL	1011:11	1011:11	12	BITS_MIN
FIELD	1011:11	1011:11	13	BITS_MIN
LEAF_NODE	1011:11	1011:11	14	BITS_MIN
LEAF_NODE	1011:19	1011:19	10	;
EXPR_STATEMENT	1012:3	1012:30	9	maxcode = MAXCODE ( BITS_MIN ) ;
EXPR	1012:3	1012:3	10	maxcode = MAXCODE ( BITS_MIN )
ASSIGN	1012:3	1012:13	11	maxcode = MAXCODE ( BITS_MIN )
LVAL	1012:3	1012:3	12	maxcode
FIELD	1012:3	1012:3	13	maxcode
LEAF_NODE	1012:3	1012:3	14	maxcode
ASSIGN_OP	1012:11	1012:11	12	=
LEAF_NODE	1012:11	1012:11	13	=
RVAL	1012:13	1012:13	12	MAXCODE ( BITS_MIN )
FUNCTION_CALL	1012:13	1012:29	13	MAXCODE ( BITS_MIN )
CALLEE	1012:13	1012:13	14	MAXCODE
LEAF_NODE	1012:13	1012:13	15	MAXCODE
LEAF_NODE	1012:20	1012:20	14	(
ARGUMENT	1012:21	1012:21	14	BITS_MIN
FIELD	1012:21	1012:21	15	BITS_MIN
LEAF_NODE	1012:21	1012:21	16	BITS_MIN
LEAF_NODE	1012:29	1012:29	14	)
LEAF_NODE	1012:30	1012:30	10	;
LEAF_NODE	1013:2	1013:2	8	}
SELECTION	1013:4	1013:9	6	
KEYWORD	1013:4	1013:4	7	else
LEAF_NODE	1013:4	1013:4	8	else
STATEMENTS	1013:9	1044:2	7	
LEAF_NODE	1013:9	1013:9	8	{
STATEMENTS	1018:3	1022:5	8	
SELECTION	1018:3	1018:27	9	
KEYWORD	1018:3	1018:3	10	if
LEAF_NODE	1018:3	1018:3	11	if
LEAF_NODE	1018:6	1018:6	10	(
CONDITION	1018:7	1018:7	10	free_ent > maxcode
EXPR	1018:7	1018:18	11	free_ent > maxcode
FIELD	1018:7	1018:7	12	free_ent
LEAF_NODE	1018:7	1018:7	13	free_ent
REL_OPERATOR	1018:16	1018:16	12	>
LEAF_NODE	1018:16	1018:16	13	>
FIELD	1018:18	1018:18	12	maxcode
LEAF_NODE	1018:18	1018:18	13	maxcode
LEAF_NODE	1018:25	1018:25	10	)
STATEMENTS	1018:27	1022:3	10	
LEAF_NODE	1018:27	1018:27	11	{
STATEMENTS	1019:4	1021:4	11	
EXPR_STATEMENT	1019:4	1019:11	12	nbits ++ ;
EXPR	1019:4	1019:4	13	nbits ++
FIELD	1019:4	1019:9	14	nbits ++
LEAF_NODE	1019:4	1019:4	15	nbits
LEAF_NODE	1019:9	1019:9	15	++
LEAF_NODE	1019:11	1019:11	13	;
EXPR_STATEMENT	1020:4	1020:29	12	assert ( nbits <= BITS_MAX ) ;
EXPR	1020:4	1020:4	13	assert ( nbits <= BITS_MAX )
FUNCTION_CALL	1020:4	1020:28	14	assert ( nbits <= BITS_MAX )
CALLEE	1020:4	1020:4	15	assert
LEAF_NODE	1020:4	1020:4	16	assert
LEAF_NODE	1020:10	1020:10	15	(
ARGUMENT	1020:11	1020:20	15	nbits <= BITS_MAX
FIELD	1020:11	1020:11	16	nbits
LEAF_NODE	1020:11	1020:11	17	nbits
REL_OPERATOR	1020:17	1020:17	16	<=
LEAF_NODE	1020:17	1020:17	17	<=
FIELD	1020:20	1020:20	16	BITS_MAX
LEAF_NODE	1020:20	1020:20	17	BITS_MAX
LEAF_NODE	1020:28	1020:28	15	)
LEAF_NODE	1020:29	1020:29	13	;
EXPR_STATEMENT	1021:4	1021:34	12	maxcode = ( int ) MAXCODE ( nbits ) ;
EXPR	1021:4	1021:4	13	maxcode = ( int ) MAXCODE ( nbits )
ASSIGN	1021:4	1021:14	14	maxcode = ( int ) MAXCODE ( nbits )
LVAL	1021:4	1021:4	15	maxcode
FIELD	1021:4	1021:4	16	maxcode
LEAF_NODE	1021:4	1021:4	17	maxcode
ASSIGN_OP	1021:12	1021:12	15	=
LEAF_NODE	1021:12	1021:12	16	=
RVAL	1021:14	1021:20	15	( int ) MAXCODE ( nbits )
LEAF_NODE	1021:14	1021:14	16	(
TYPE_NAME	1021:15	1021:15	16	int
LEAF_NODE	1021:15	1021:15	17	int
LEAF_NODE	1021:18	1021:18	16	)
FUNCTION_CALL	1021:20	1021:33	16	MAXCODE ( nbits )
CALLEE	1021:20	1021:20	17	MAXCODE
LEAF_NODE	1021:20	1021:20	18	MAXCODE
LEAF_NODE	1021:27	1021:27	17	(
ARGUMENT	1021:28	1021:28	17	nbits
FIELD	1021:28	1021:28	18	nbits
LEAF_NODE	1021:28	1021:28	19	nbits
LEAF_NODE	1021:33	1021:33	17	)
LEAF_NODE	1021:34	1021:34	13	;
LEAF_NODE	1022:3	1022:3	11	}
SELECTION	1022:5	1022:10	9	
KEYWORD	1022:5	1022:5	10	else
LEAF_NODE	1022:5	1022:5	11	else
STATEMENTS	1022:10	1022:10	10	
SELECTION	1022:10	1022:37	11	
KEYWORD	1022:10	1022:10	12	if
LEAF_NODE	1022:10	1022:10	13	if
LEAF_NODE	1022:13	1022:13	12	(
CONDITION	1022:14	1022:14	12	incount >= checkpoint
EXPR	1022:14	1022:25	13	incount >= checkpoint
FIELD	1022:14	1022:14	14	incount
LEAF_NODE	1022:14	1022:14	15	incount
REL_OPERATOR	1022:22	1022:22	14	>=
LEAF_NODE	1022:22	1022:22	15	>=
FIELD	1022:25	1022:25	14	checkpoint
LEAF_NODE	1022:25	1022:25	15	checkpoint
LEAF_NODE	1022:35	1022:35	12	)
STATEMENTS	1022:37	1043:3	12	
LEAF_NODE	1022:37	1022:37	13	{
STATEMENTS	1023:4	1041:6	13	
SIMPLE_DECL	1023:4	1023:12	14	long rat ;
VAR_DECL	1023:4	1023:9	15	long rat
TYPE	1023:4	1023:4	16	long
TYPE_NAME	1023:4	1023:4	17	long
LEAF_NODE	1023:4	1023:4	18	long
NAME	1023:9	1023:9	16	rat
LEAF_NODE	1023:9	1023:9	17	rat
LEAF_NODE	1023:12	1023:12	15	;
EXPR_STATEMENT	1030:4	1030:34	14	checkpoint = incount + CHECK_GAP ;
EXPR	1030:4	1030:4	15	checkpoint = incount + CHECK_GAP
ASSIGN	1030:4	1030:17	16	checkpoint = incount + CHECK_GAP
LVAL	1030:4	1030:4	17	checkpoint
FIELD	1030:4	1030:4	18	checkpoint
LEAF_NODE	1030:4	1030:4	19	checkpoint
ASSIGN_OP	1030:15	1030:15	17	=
LEAF_NODE	1030:15	1030:15	18	=
RVAL	1030:17	1030:25	17	incount + CHECK_GAP
FIELD	1030:17	1030:17	18	incount
LEAF_NODE	1030:17	1030:17	19	incount
LEAF_NODE	1030:24	1030:24	18	+
FIELD	1030:25	1030:25	18	CHECK_GAP
LEAF_NODE	1030:25	1030:25	19	CHECK_GAP
LEAF_NODE	1030:34	1030:34	15	;
EXPR_STATEMENT	1031:4	1031:22	14	CALCRATIO ( sp , rat ) ;
EXPR	1031:4	1031:4	15	CALCRATIO ( sp , rat )
FUNCTION_CALL	1031:4	1031:21	16	CALCRATIO ( sp , rat )
CALLEE	1031:4	1031:4	17	CALCRATIO
LEAF_NODE	1031:4	1031:4	18	CALCRATIO
LEAF_NODE	1031:13	1031:13	17	(
ARGUMENT	1031:14	1031:14	17	sp
FIELD	1031:14	1031:14	18	sp
LEAF_NODE	1031:14	1031:14	19	sp
LEAF_NODE	1031:16	1031:16	17	,
ARGUMENT	1031:18	1031:18	17	rat
FIELD	1031:18	1031:18	18	rat
LEAF_NODE	1031:18	1031:18	19	rat
LEAF_NODE	1031:21	1031:21	17	)
LEAF_NODE	1031:22	1031:22	15	;
SELECTION	1032:4	1032:30	14	
KEYWORD	1032:4	1032:4	15	if
LEAF_NODE	1032:4	1032:4	16	if
LEAF_NODE	1032:7	1032:7	15	(
CONDITION	1032:8	1032:8	15	rat <= sp -> enc_ratio
EXPR	1032:8	1032:15	16	rat <= sp -> enc_ratio
FIELD	1032:8	1032:8	17	rat
LEAF_NODE	1032:8	1032:8	18	rat
REL_OPERATOR	1032:12	1032:12	17	<=
LEAF_NODE	1032:12	1032:12	18	<=
FIELD	1032:15	1032:19	17	sp -> enc_ratio
LEAF_NODE	1032:15	1032:15	18	sp
LEAF_NODE	1032:17	1032:17	18	->
LEAF_NODE	1032:19	1032:19	18	enc_ratio
LEAF_NODE	1032:28	1032:28	15	)
STATEMENTS	1032:30	1041:4	15	
LEAF_NODE	1032:30	1032:30	16	{
STATEMENTS	1033:5	1040:5	16	
EXPR_STATEMENT	1033:5	1033:16	17	cl_hash ( sp ) ;
EXPR	1033:5	1033:5	18	cl_hash ( sp )
FUNCTION_CALL	1033:5	1033:15	19	cl_hash ( sp )
CALLEE	1033:5	1033:5	20	cl_hash
LEAF_NODE	1033:5	1033:5	21	cl_hash
LEAF_NODE	1033:12	1033:12	20	(
ARGUMENT	1033:13	1033:13	20	sp
FIELD	1033:13	1033:13	21	sp
LEAF_NODE	1033:13	1033:13	22	sp
LEAF_NODE	1033:15	1033:15	20	)
LEAF_NODE	1033:16	1033:16	18	;
EXPR_STATEMENT	1034:5	1034:22	17	sp -> enc_ratio = 0 ;
EXPR	1034:5	1034:5	18	sp -> enc_ratio = 0
ASSIGN	1034:5	1034:21	19	sp -> enc_ratio = 0
LVAL	1034:5	1034:5	20	sp -> enc_ratio
FIELD	1034:5	1034:9	21	sp -> enc_ratio
LEAF_NODE	1034:5	1034:5	22	sp
LEAF_NODE	1034:7	1034:7	22	->
LEAF_NODE	1034:9	1034:9	22	enc_ratio
ASSIGN_OP	1034:19	1034:19	20	=
LEAF_NODE	1034:19	1034:19	21	=
RVAL	1034:21	1034:21	20	0
FIELD	1034:21	1034:21	21	0
LEAF_NODE	1034:21	1034:21	22	0
LEAF_NODE	1034:22	1034:22	18	;
EXPR_STATEMENT	1035:5	1035:16	17	incount = 0 ;
EXPR	1035:5	1035:5	18	incount = 0
ASSIGN	1035:5	1035:15	19	incount = 0
LVAL	1035:5	1035:5	20	incount
FIELD	1035:5	1035:5	21	incount
LEAF_NODE	1035:5	1035:5	22	incount
ASSIGN_OP	1035:13	1035:13	20	=
LEAF_NODE	1035:13	1035:13	21	=
RVAL	1035:15	1035:15	20	0
FIELD	1035:15	1035:15	21	0
LEAF_NODE	1035:15	1035:15	22	0
LEAF_NODE	1035:16	1035:16	18	;
EXPR_STATEMENT	1036:5	1036:17	17	outcount = 0 ;
EXPR	1036:5	1036:5	18	outcount = 0
ASSIGN	1036:5	1036:16	19	outcount = 0
LVAL	1036:5	1036:5	20	outcount
FIELD	1036:5	1036:5	21	outcount
LEAF_NODE	1036:5	1036:5	22	outcount
ASSIGN_OP	1036:14	1036:14	20	=
LEAF_NODE	1036:14	1036:14	21	=
RVAL	1036:16	1036:16	20	0
FIELD	1036:16	1036:16	21	0
LEAF_NODE	1036:16	1036:16	22	0
LEAF_NODE	1036:17	1036:17	18	;
EXPR_STATEMENT	1037:5	1037:26	17	free_ent = CODE_FIRST ;
EXPR	1037:5	1037:5	18	free_ent = CODE_FIRST
ASSIGN	1037:5	1037:16	19	free_ent = CODE_FIRST
LVAL	1037:5	1037:5	20	free_ent
FIELD	1037:5	1037:5	21	free_ent
LEAF_NODE	1037:5	1037:5	22	free_ent
ASSIGN_OP	1037:14	1037:14	20	=
LEAF_NODE	1037:14	1037:14	21	=
RVAL	1037:16	1037:16	20	CODE_FIRST
FIELD	1037:16	1037:16	21	CODE_FIRST
LEAF_NODE	1037:16	1037:16	22	CODE_FIRST
LEAF_NODE	1037:26	1037:26	18	;
EXPR_STATEMENT	1038:5	1038:32	17	PutNextCode ( op , CODE_CLEAR ) ;
EXPR	1038:5	1038:5	18	PutNextCode ( op , CODE_CLEAR )
FUNCTION_CALL	1038:5	1038:31	19	PutNextCode ( op , CODE_CLEAR )
CALLEE	1038:5	1038:5	20	PutNextCode
LEAF_NODE	1038:5	1038:5	21	PutNextCode
LEAF_NODE	1038:16	1038:16	20	(
ARGUMENT	1038:17	1038:17	20	op
FIELD	1038:17	1038:17	21	op
LEAF_NODE	1038:17	1038:17	22	op
LEAF_NODE	1038:19	1038:19	20	,
ARGUMENT	1038:21	1038:21	20	CODE_CLEAR
FIELD	1038:21	1038:21	21	CODE_CLEAR
LEAF_NODE	1038:21	1038:21	22	CODE_CLEAR
LEAF_NODE	1038:31	1038:31	20	)
LEAF_NODE	1038:32	1038:32	18	;
EXPR_STATEMENT	1039:5	1039:21	17	nbits = BITS_MIN ;
EXPR	1039:5	1039:5	18	nbits = BITS_MIN
ASSIGN	1039:5	1039:13	19	nbits = BITS_MIN
LVAL	1039:5	1039:5	20	nbits
FIELD	1039:5	1039:5	21	nbits
LEAF_NODE	1039:5	1039:5	22	nbits
ASSIGN_OP	1039:11	1039:11	20	=
LEAF_NODE	1039:11	1039:11	21	=
RVAL	1039:13	1039:13	20	BITS_MIN
FIELD	1039:13	1039:13	21	BITS_MIN
LEAF_NODE	1039:13	1039:13	22	BITS_MIN
LEAF_NODE	1039:21	1039:21	18	;
EXPR_STATEMENT	1040:5	1040:32	17	maxcode = MAXCODE ( BITS_MIN ) ;
EXPR	1040:5	1040:5	18	maxcode = MAXCODE ( BITS_MIN )
ASSIGN	1040:5	1040:15	19	maxcode = MAXCODE ( BITS_MIN )
LVAL	1040:5	1040:5	20	maxcode
FIELD	1040:5	1040:5	21	maxcode
LEAF_NODE	1040:5	1040:5	22	maxcode
ASSIGN_OP	1040:13	1040:13	20	=
LEAF_NODE	1040:13	1040:13	21	=
RVAL	1040:15	1040:15	20	MAXCODE ( BITS_MIN )
FUNCTION_CALL	1040:15	1040:31	21	MAXCODE ( BITS_MIN )
CALLEE	1040:15	1040:15	22	MAXCODE
LEAF_NODE	1040:15	1040:15	23	MAXCODE
LEAF_NODE	1040:22	1040:22	22	(
ARGUMENT	1040:23	1040:23	22	BITS_MIN
FIELD	1040:23	1040:23	23	BITS_MIN
LEAF_NODE	1040:23	1040:23	24	BITS_MIN
LEAF_NODE	1040:31	1040:31	22	)
LEAF_NODE	1040:32	1040:32	18	;
LEAF_NODE	1041:4	1041:4	16	}
SELECTION	1041:6	1042:5	14	
KEYWORD	1041:6	1041:6	15	else
LEAF_NODE	1041:6	1041:6	16	else
STATEMENTS	1042:5	1042:5	15	
EXPR_STATEMENT	1042:5	1042:24	16	sp -> enc_ratio = rat ;
EXPR	1042:5	1042:5	17	sp -> enc_ratio = rat
ASSIGN	1042:5	1042:21	18	sp -> enc_ratio = rat
LVAL	1042:5	1042:5	19	sp -> enc_ratio
FIELD	1042:5	1042:9	20	sp -> enc_ratio
LEAF_NODE	1042:5	1042:5	21	sp
LEAF_NODE	1042:7	1042:7	21	->
LEAF_NODE	1042:9	1042:9	21	enc_ratio
ASSIGN_OP	1042:19	1042:19	19	=
LEAF_NODE	1042:19	1042:19	20	=
RVAL	1042:21	1042:21	19	rat
FIELD	1042:21	1042:21	20	rat
LEAF_NODE	1042:21	1042:21	21	rat
LEAF_NODE	1042:24	1042:24	17	;
LEAF_NODE	1043:3	1043:3	13	}
LEAF_NODE	1044:2	1044:2	8	}
LABEL	1045:1	1045:4	6	hit :
LEAF_NODE	1045:1	1045:1	7	hit
LEAF_NODE	1045:4	1045:4	7	:
LEAF_NODE	1046:2	1046:2	6	;
LEAF_NODE	1047:1	1047:1	5	}
EXPR_STATEMENT	1052:1	1052:26	3	sp -> enc_incount = incount ;
EXPR	1052:1	1052:1	4	sp -> enc_incount = incount
ASSIGN	1052:1	1052:19	5	sp -> enc_incount = incount
LVAL	1052:1	1052:1	6	sp -> enc_incount
FIELD	1052:1	1052:5	7	sp -> enc_incount
LEAF_NODE	1052:1	1052:1	8	sp
LEAF_NODE	1052:3	1052:3	8	->
LEAF_NODE	1052:5	1052:5	8	enc_incount
ASSIGN_OP	1052:17	1052:17	6	=
LEAF_NODE	1052:17	1052:17	7	=
RVAL	1052:19	1052:19	6	incount
FIELD	1052:19	1052:19	7	incount
LEAF_NODE	1052:19	1052:19	8	incount
LEAF_NODE	1052:26	1052:26	4	;
EXPR_STATEMENT	1053:1	1053:28	3	sp -> enc_outcount = outcount ;
EXPR	1053:1	1053:1	4	sp -> enc_outcount = outcount
ASSIGN	1053:1	1053:20	5	sp -> enc_outcount = outcount
LVAL	1053:1	1053:1	6	sp -> enc_outcount
FIELD	1053:1	1053:5	7	sp -> enc_outcount
LEAF_NODE	1053:1	1053:1	8	sp
LEAF_NODE	1053:3	1053:3	8	->
LEAF_NODE	1053:5	1053:5	8	enc_outcount
ASSIGN_OP	1053:18	1053:18	6	=
LEAF_NODE	1053:18	1053:18	7	=
RVAL	1053:20	1053:20	6	outcount
FIELD	1053:20	1053:20	7	outcount
LEAF_NODE	1053:20	1053:20	8	outcount
LEAF_NODE	1053:28	1053:28	4	;
EXPR_STATEMENT	1054:1	1054:32	3	sp -> enc_checkpoint = checkpoint ;
EXPR	1054:1	1054:1	4	sp -> enc_checkpoint = checkpoint
ASSIGN	1054:1	1054:22	5	sp -> enc_checkpoint = checkpoint
LVAL	1054:1	1054:1	6	sp -> enc_checkpoint
FIELD	1054:1	1054:5	7	sp -> enc_checkpoint
LEAF_NODE	1054:1	1054:1	8	sp
LEAF_NODE	1054:3	1054:3	8	->
LEAF_NODE	1054:5	1054:5	8	enc_checkpoint
ASSIGN_OP	1054:20	1054:20	6	=
LEAF_NODE	1054:20	1054:20	7	=
RVAL	1054:22	1054:22	6	checkpoint
FIELD	1054:22	1054:22	7	checkpoint
LEAF_NODE	1054:22	1054:22	8	checkpoint
LEAF_NODE	1054:32	1054:32	4	;
EXPR_STATEMENT	1055:1	1055:22	3	sp -> enc_oldcode = ent ;
EXPR	1055:1	1055:1	4	sp -> enc_oldcode = ent
ASSIGN	1055:1	1055:19	5	sp -> enc_oldcode = ent
LVAL	1055:1	1055:1	6	sp -> enc_oldcode
FIELD	1055:1	1055:5	7	sp -> enc_oldcode
LEAF_NODE	1055:1	1055:1	8	sp
LEAF_NODE	1055:3	1055:3	8	->
LEAF_NODE	1055:5	1055:5	8	enc_oldcode
ASSIGN_OP	1055:17	1055:17	6	=
LEAF_NODE	1055:17	1055:17	7	=
RVAL	1055:19	1055:19	6	ent
FIELD	1055:19	1055:19	7	ent
LEAF_NODE	1055:19	1055:19	8	ent
LEAF_NODE	1055:22	1055:22	4	;
EXPR_STATEMENT	1056:1	1056:28	3	sp -> lzw_nextdata = nextdata ;
EXPR	1056:1	1056:1	4	sp -> lzw_nextdata = nextdata
ASSIGN	1056:1	1056:20	5	sp -> lzw_nextdata = nextdata
LVAL	1056:1	1056:1	6	sp -> lzw_nextdata
FIELD	1056:1	1056:5	7	sp -> lzw_nextdata
LEAF_NODE	1056:1	1056:1	8	sp
LEAF_NODE	1056:3	1056:3	8	->
LEAF_NODE	1056:5	1056:5	8	lzw_nextdata
ASSIGN_OP	1056:18	1056:18	6	=
LEAF_NODE	1056:18	1056:18	7	=
RVAL	1056:20	1056:20	6	nextdata
FIELD	1056:20	1056:20	7	nextdata
LEAF_NODE	1056:20	1056:20	8	nextdata
LEAF_NODE	1056:28	1056:28	4	;
EXPR_STATEMENT	1057:1	1057:28	3	sp -> lzw_nextbits = nextbits ;
EXPR	1057:1	1057:1	4	sp -> lzw_nextbits = nextbits
ASSIGN	1057:1	1057:20	5	sp -> lzw_nextbits = nextbits
LVAL	1057:1	1057:1	6	sp -> lzw_nextbits
FIELD	1057:1	1057:5	7	sp -> lzw_nextbits
LEAF_NODE	1057:1	1057:1	8	sp
LEAF_NODE	1057:3	1057:3	8	->
LEAF_NODE	1057:5	1057:5	8	lzw_nextbits
ASSIGN_OP	1057:18	1057:18	6	=
LEAF_NODE	1057:18	1057:18	7	=
RVAL	1057:20	1057:20	6	nextbits
FIELD	1057:20	1057:20	7	nextbits
LEAF_NODE	1057:20	1057:20	8	nextbits
LEAF_NODE	1057:28	1057:28	4	;
EXPR_STATEMENT	1058:1	1058:44	3	sp -> lzw_free_ent = ( unsigned short ) free_ent ;
EXPR	1058:1	1058:1	4	sp -> lzw_free_ent = ( unsigned short ) free_ent
ASSIGN	1058:1	1058:20	5	sp -> lzw_free_ent = ( unsigned short ) free_ent
LVAL	1058:1	1058:1	6	sp -> lzw_free_ent
FIELD	1058:1	1058:5	7	sp -> lzw_free_ent
LEAF_NODE	1058:1	1058:1	8	sp
LEAF_NODE	1058:3	1058:3	8	->
LEAF_NODE	1058:5	1058:5	8	lzw_free_ent
ASSIGN_OP	1058:18	1058:18	6	=
LEAF_NODE	1058:18	1058:18	7	=
RVAL	1058:20	1058:36	6	( unsigned short ) free_ent
LEAF_NODE	1058:20	1058:20	7	(
TYPE_NAME	1058:21	1058:30	7	unsigned short
LEAF_NODE	1058:21	1058:21	8	unsigned
LEAF_NODE	1058:30	1058:30	8	short
LEAF_NODE	1058:35	1058:35	7	)
FIELD	1058:36	1058:36	7	free_ent
LEAF_NODE	1058:36	1058:36	8	free_ent
LEAF_NODE	1058:44	1058:44	4	;
EXPR_STATEMENT	1059:1	1059:42	3	sp -> lzw_maxcode = ( unsigned short ) maxcode ;
EXPR	1059:1	1059:1	4	sp -> lzw_maxcode = ( unsigned short ) maxcode
ASSIGN	1059:1	1059:19	5	sp -> lzw_maxcode = ( unsigned short ) maxcode
LVAL	1059:1	1059:1	6	sp -> lzw_maxcode
FIELD	1059:1	1059:5	7	sp -> lzw_maxcode
LEAF_NODE	1059:1	1059:1	8	sp
LEAF_NODE	1059:3	1059:3	8	->
LEAF_NODE	1059:5	1059:5	8	lzw_maxcode
ASSIGN_OP	1059:17	1059:17	6	=
LEAF_NODE	1059:17	1059:17	7	=
RVAL	1059:19	1059:35	6	( unsigned short ) maxcode
LEAF_NODE	1059:19	1059:19	7	(
TYPE_NAME	1059:20	1059:29	7	unsigned short
LEAF_NODE	1059:20	1059:20	8	unsigned
LEAF_NODE	1059:29	1059:29	8	short
LEAF_NODE	1059:34	1059:34	7	)
FIELD	1059:35	1059:35	7	maxcode
LEAF_NODE	1059:35	1059:35	8	maxcode
LEAF_NODE	1059:42	1059:42	4	;
EXPR_STATEMENT	1060:1	1060:38	3	sp -> lzw_nbits = ( unsigned short ) nbits ;
EXPR	1060:1	1060:1	4	sp -> lzw_nbits = ( unsigned short ) nbits
ASSIGN	1060:1	1060:17	5	sp -> lzw_nbits = ( unsigned short ) nbits
LVAL	1060:1	1060:1	6	sp -> lzw_nbits
FIELD	1060:1	1060:5	7	sp -> lzw_nbits
LEAF_NODE	1060:1	1060:1	8	sp
LEAF_NODE	1060:3	1060:3	8	->
LEAF_NODE	1060:5	1060:5	8	lzw_nbits
ASSIGN_OP	1060:15	1060:15	6	=
LEAF_NODE	1060:15	1060:15	7	=
RVAL	1060:17	1060:33	6	( unsigned short ) nbits
LEAF_NODE	1060:17	1060:17	7	(
TYPE_NAME	1060:18	1060:27	7	unsigned short
LEAF_NODE	1060:18	1060:18	8	unsigned
LEAF_NODE	1060:27	1060:27	8	short
LEAF_NODE	1060:32	1060:32	7	)
FIELD	1060:33	1060:33	7	nbits
LEAF_NODE	1060:33	1060:33	8	nbits
LEAF_NODE	1060:38	1060:38	4	;
EXPR_STATEMENT	1061:1	1061:20	3	tif -> tif_rawcp = op ;
EXPR	1061:1	1061:1	4	tif -> tif_rawcp = op
ASSIGN	1061:1	1061:18	5	tif -> tif_rawcp = op
LVAL	1061:1	1061:1	6	tif -> tif_rawcp
FIELD	1061:1	1061:6	7	tif -> tif_rawcp
LEAF_NODE	1061:1	1061:1	8	tif
LEAF_NODE	1061:4	1061:4	8	->
LEAF_NODE	1061:6	1061:6	8	tif_rawcp
ASSIGN_OP	1061:16	1061:16	6	=
LEAF_NODE	1061:16	1061:16	7	=
RVAL	1061:18	1061:18	6	op
FIELD	1061:18	1061:18	7	op
LEAF_NODE	1061:18	1061:18	8	op
LEAF_NODE	1061:20	1061:20	4	;
JUMP_STATEMENT	1062:1	1062:11	3	return ( 1 ) ;
KEYWORD	1062:1	1062:1	4	return
LEAF_NODE	1062:1	1062:1	5	return
DESTINATION	1062:8	1062:8	4	( 1 )
EXPR	1062:8	1062:10	5	( 1 )
LEAF_NODE	1062:8	1062:8	6	(
FIELD	1062:9	1062:9	6	1
LEAF_NODE	1062:9	1062:9	7	1
LEAF_NODE	1062:10	1062:10	6	)
LEAF_NODE	1062:11	1062:11	4	;
LEAF_NODE	1063:0	1063:0	2	}
FUNCTION_DEF	1069:0	1114:0	1	
RETURN_TYPE	1069:0	1069:7	2	static int
LEAF_NODE	1069:0	1069:0	3	static
TYPE_NAME	1069:7	1069:7	3	int
LEAF_NODE	1069:7	1069:7	4	int
FUNCTION_NAME	1070:0	1070:0	2	LZWPostEncode
LEAF_NODE	1070:0	1070:0	3	LZWPostEncode
PARAMETER_LIST	1070:13	1070:23	2	( TIFF * tif )
LEAF_NODE	1070:13	1070:13	3	(
PARAMETER_DECL	1070:14	1070:20	3	TIFF * tif
TYPE	1070:14	1070:18	4	TIFF *
TYPE_NAME	1070:14	1070:14	5	TIFF
LEAF_NODE	1070:14	1070:14	6	TIFF
POINTER	1070:18	1070:18	5	*
LEAF_NODE	1070:18	1070:18	6	*
NAME	1070:20	1070:20	4	tif
LEAF_NODE	1070:20	1070:20	5	tif
LEAF_NODE	1070:23	1070:23	3	)
LEAF_NODE	1071:0	1071:0	2	{
STATEMENTS	1072:1	1113:1	2	
LEAF_NODE	1072:1	1072:1	3	register
SIMPLE_DECL	1072:10	1072:47	3	LZWCodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	1072:10	1072:25	4	LZWCodecState * sp ; sp = EncoderState ( tif )
TYPE	1072:10	1072:24	5	LZWCodecState *
TYPE_NAME	1072:10	1072:10	6	LZWCodecState
LEAF_NODE	1072:10	1072:10	7	LZWCodecState
POINTER	1072:24	1072:24	6	*
LEAF_NODE	1072:24	1072:24	7	*
NAME	1072:25	1072:25	5	sp
LEAF_NODE	1072:25	1072:25	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1072:25	1072:25	5	sp = EncoderState ( tif )
ASSIGN	1072:25	1072:30	6	sp = EncoderState ( tif )
LVAL	1072:25	1072:25	7	sp
NAME	1072:25	1072:25	8	sp
LEAF_NODE	1072:25	1072:25	9	sp
ASSIGN_OP	1072:28	1072:28	7	=
LEAF_NODE	1072:28	1072:28	8	=
RVAL	1072:30	1072:30	7	EncoderState ( tif )
FUNCTION_CALL	1072:30	1072:46	8	EncoderState ( tif )
CALLEE	1072:30	1072:30	9	EncoderState
LEAF_NODE	1072:30	1072:30	10	EncoderState
LEAF_NODE	1072:42	1072:42	9	(
ARGUMENT	1072:43	1072:43	9	tif
FIELD	1072:43	1072:43	10	tif
LEAF_NODE	1072:43	1072:43	11	tif
LEAF_NODE	1072:46	1072:46	9	)
LEAF_NODE	1072:47	1072:47	4	;
SIMPLE_DECL	1073:1	1073:27	3	uint8 * op ; op = tif -> tif_rawcp ;
VAR_DECL	1073:1	1073:8	4	uint8 * op ; op = tif -> tif_rawcp
TYPE	1073:1	1073:6	5	uint8 *
TYPE_NAME	1073:1	1073:1	6	uint8
LEAF_NODE	1073:1	1073:1	7	uint8
POINTER	1073:6	1073:6	6	*
LEAF_NODE	1073:6	1073:6	7	*
NAME	1073:8	1073:8	5	op
LEAF_NODE	1073:8	1073:8	6	op
LEAF_NODE	0:0	0:0	5	;
INIT	1073:8	1073:8	5	op = tif -> tif_rawcp
ASSIGN	1073:8	1073:13	6	op = tif -> tif_rawcp
LVAL	1073:8	1073:8	7	op
NAME	1073:8	1073:8	8	op
LEAF_NODE	1073:8	1073:8	9	op
ASSIGN_OP	1073:11	1073:11	7	=
LEAF_NODE	1073:11	1073:11	8	=
RVAL	1073:13	1073:13	7	tif -> tif_rawcp
FIELD	1073:13	1073:18	8	tif -> tif_rawcp
LEAF_NODE	1073:13	1073:13	9	tif
LEAF_NODE	1073:16	1073:16	9	->
LEAF_NODE	1073:18	1073:18	9	tif_rawcp
LEAF_NODE	1073:27	1073:27	4	;
SIMPLE_DECL	1074:1	1074:33	3	long nextbits ; nextbits = sp -> lzw_nextbits ;
VAR_DECL	1074:1	1074:6	4	long nextbits ; nextbits = sp -> lzw_nextbits
TYPE	1074:1	1074:1	5	long
TYPE_NAME	1074:1	1074:1	6	long
LEAF_NODE	1074:1	1074:1	7	long
NAME	1074:6	1074:6	5	nextbits
LEAF_NODE	1074:6	1074:6	6	nextbits
LEAF_NODE	0:0	0:0	5	;
INIT	1074:6	1074:6	5	nextbits = sp -> lzw_nextbits
ASSIGN	1074:6	1074:17	6	nextbits = sp -> lzw_nextbits
LVAL	1074:6	1074:6	7	nextbits
NAME	1074:6	1074:6	8	nextbits
LEAF_NODE	1074:6	1074:6	9	nextbits
ASSIGN_OP	1074:15	1074:15	7	=
LEAF_NODE	1074:15	1074:15	8	=
RVAL	1074:17	1074:17	7	sp -> lzw_nextbits
FIELD	1074:17	1074:21	8	sp -> lzw_nextbits
LEAF_NODE	1074:17	1074:17	9	sp
LEAF_NODE	1074:19	1074:19	9	->
LEAF_NODE	1074:21	1074:21	9	lzw_nextbits
LEAF_NODE	1074:33	1074:33	4	;
SIMPLE_DECL	1075:1	1075:42	3	unsigned long nextdata ; nextdata = sp -> lzw_nextdata ;
VAR_DECL	1075:1	1075:15	4	unsigned long nextdata ; nextdata = sp -> lzw_nextdata
TYPE	1075:1	1075:1	5	unsigned long
TYPE_NAME	1075:1	1075:10	6	unsigned long
LEAF_NODE	1075:1	1075:1	7	unsigned
LEAF_NODE	1075:10	1075:10	7	long
NAME	1075:15	1075:15	5	nextdata
LEAF_NODE	1075:15	1075:15	6	nextdata
LEAF_NODE	0:0	0:0	5	;
INIT	1075:15	1075:15	5	nextdata = sp -> lzw_nextdata
ASSIGN	1075:15	1075:26	6	nextdata = sp -> lzw_nextdata
LVAL	1075:15	1075:15	7	nextdata
NAME	1075:15	1075:15	8	nextdata
LEAF_NODE	1075:15	1075:15	9	nextdata
ASSIGN_OP	1075:24	1075:24	7	=
LEAF_NODE	1075:24	1075:24	8	=
RVAL	1075:26	1075:26	7	sp -> lzw_nextdata
FIELD	1075:26	1075:30	8	sp -> lzw_nextdata
LEAF_NODE	1075:26	1075:26	9	sp
LEAF_NODE	1075:28	1075:28	9	->
LEAF_NODE	1075:30	1075:30	9	lzw_nextdata
LEAF_NODE	1075:42	1075:42	4	;
SIMPLE_DECL	1076:1	1076:33	3	long outcount ; outcount = sp -> enc_outcount ;
VAR_DECL	1076:1	1076:6	4	long outcount ; outcount = sp -> enc_outcount
TYPE	1076:1	1076:1	5	long
TYPE_NAME	1076:1	1076:1	6	long
LEAF_NODE	1076:1	1076:1	7	long
NAME	1076:6	1076:6	5	outcount
LEAF_NODE	1076:6	1076:6	6	outcount
LEAF_NODE	0:0	0:0	5	;
INIT	1076:6	1076:6	5	outcount = sp -> enc_outcount
ASSIGN	1076:6	1076:17	6	outcount = sp -> enc_outcount
LVAL	1076:6	1076:6	7	outcount
NAME	1076:6	1076:6	8	outcount
LEAF_NODE	1076:6	1076:6	9	outcount
ASSIGN_OP	1076:15	1076:15	7	=
LEAF_NODE	1076:15	1076:15	8	=
RVAL	1076:17	1076:17	7	sp -> enc_outcount
FIELD	1076:17	1076:21	8	sp -> enc_outcount
LEAF_NODE	1076:17	1076:17	9	sp
LEAF_NODE	1076:19	1076:19	9	->
LEAF_NODE	1076:21	1076:21	9	enc_outcount
LEAF_NODE	1076:33	1076:33	4	;
SIMPLE_DECL	1077:1	1077:26	3	int nbits ; nbits = sp -> lzw_nbits ;
VAR_DECL	1077:1	1077:5	4	int nbits ; nbits = sp -> lzw_nbits
TYPE	1077:1	1077:1	5	int
TYPE_NAME	1077:1	1077:1	6	int
LEAF_NODE	1077:1	1077:1	7	int
NAME	1077:5	1077:5	5	nbits
LEAF_NODE	1077:5	1077:5	6	nbits
LEAF_NODE	0:0	0:0	5	;
INIT	1077:5	1077:5	5	nbits = sp -> lzw_nbits
ASSIGN	1077:5	1077:13	6	nbits = sp -> lzw_nbits
LVAL	1077:5	1077:5	7	nbits
NAME	1077:5	1077:5	8	nbits
LEAF_NODE	1077:5	1077:5	9	nbits
ASSIGN_OP	1077:11	1077:11	7	=
LEAF_NODE	1077:11	1077:11	8	=
RVAL	1077:13	1077:13	7	sp -> lzw_nbits
FIELD	1077:13	1077:17	8	sp -> lzw_nbits
LEAF_NODE	1077:13	1077:13	9	sp
LEAF_NODE	1077:15	1077:15	9	->
LEAF_NODE	1077:17	1077:17	9	lzw_nbits
LEAF_NODE	1077:26	1077:26	4	;
SELECTION	1079:1	1079:28	3	
KEYWORD	1079:1	1079:1	4	if
LEAF_NODE	1079:1	1079:1	5	if
LEAF_NODE	1079:4	1079:4	4	(
CONDITION	1079:5	1079:5	4	op > sp -> enc_rawlimit
EXPR	1079:5	1079:10	5	op > sp -> enc_rawlimit
FIELD	1079:5	1079:5	6	op
LEAF_NODE	1079:5	1079:5	7	op
REL_OPERATOR	1079:8	1079:8	6	>
LEAF_NODE	1079:8	1079:8	7	>
FIELD	1079:10	1079:14	6	sp -> enc_rawlimit
LEAF_NODE	1079:10	1079:10	7	sp
LEAF_NODE	1079:12	1079:12	7	->
LEAF_NODE	1079:14	1079:14	7	enc_rawlimit
LEAF_NODE	1079:26	1079:26	4	)
STATEMENTS	1079:28	1084:1	4	
LEAF_NODE	1079:28	1079:28	5	{
STATEMENTS	1080:2	1083:2	5	
EXPR_STATEMENT	1080:2	1080:52	6	tif -> tif_rawcc = ( tmsize_t ) ( op - tif -> tif_rawdata ) ;
EXPR	1080:2	1080:2	7	tif -> tif_rawcc = ( tmsize_t ) ( op - tif -> tif_rawdata )
ASSIGN	1080:2	1080:19	8	tif -> tif_rawcc = ( tmsize_t ) ( op - tif -> tif_rawdata )
LVAL	1080:2	1080:2	9	tif -> tif_rawcc
FIELD	1080:2	1080:7	10	tif -> tif_rawcc
LEAF_NODE	1080:2	1080:2	11	tif
LEAF_NODE	1080:5	1080:5	11	->
LEAF_NODE	1080:7	1080:7	11	tif_rawcc
ASSIGN_OP	1080:17	1080:17	9	=
LEAF_NODE	1080:17	1080:17	10	=
RVAL	1080:19	1080:51	9	( tmsize_t ) ( op - tif -> tif_rawdata )
LEAF_NODE	1080:19	1080:19	10	(
TYPE_NAME	1080:20	1080:20	10	tmsize_t
LEAF_NODE	1080:20	1080:20	11	tmsize_t
LEAF_NODE	1080:28	1080:28	10	)
LEAF_NODE	1080:29	1080:29	10	(
FIELD	1080:30	1080:30	10	op
LEAF_NODE	1080:30	1080:30	11	op
LEAF_NODE	1080:33	1080:33	10	-
FIELD	1080:35	1080:40	10	tif -> tif_rawdata
LEAF_NODE	1080:35	1080:35	11	tif
LEAF_NODE	1080:38	1080:38	11	->
LEAF_NODE	1080:40	1080:40	11	tif_rawdata
LEAF_NODE	1080:51	1080:51	10	)
LEAF_NODE	1080:52	1080:52	7	;
SELECTION	1081:2	1082:20	6	
KEYWORD	1081:2	1081:2	7	if
LEAF_NODE	1081:2	1081:2	8	if
LEAF_NODE	1081:4	1081:4	7	(
CONDITION	1081:6	1081:6	7	! TIFFFlushData1 ( tif )
EXPR	1081:6	1081:6	8	! TIFFFlushData1 ( tif )
UNARY_EXPR	1081:6	1081:7	9	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	1081:6	1081:6	10	!
LEAF_NODE	1081:6	1081:6	11	!
FUNCTION_CALL	1081:7	1081:25	10	TIFFFlushData1 ( tif )
CALLEE	1081:7	1081:7	11	TIFFFlushData1
LEAF_NODE	1081:7	1081:7	12	TIFFFlushData1
LEAF_NODE	1081:21	1081:21	11	(
ARGUMENT	1081:22	1081:22	11	tif
FIELD	1081:22	1081:22	12	tif
LEAF_NODE	1081:22	1081:22	13	tif
LEAF_NODE	1081:25	1081:25	11	)
LEAF_NODE	1081:27	1081:27	7	)
STATEMENTS	1082:20	1082:20	7	
JUMP_STATEMENT	1082:20	1082:28	8	return 0 ;
KEYWORD	1082:20	1082:20	9	return
LEAF_NODE	1082:20	1082:20	10	return
DESTINATION	1082:27	1082:27	9	0
EXPR	1082:27	1082:27	10	0
FIELD	1082:27	1082:27	11	0
LEAF_NODE	1082:27	1082:27	12	0
LEAF_NODE	1082:28	1082:28	9	;
EXPR_STATEMENT	1083:2	1083:23	6	op = tif -> tif_rawdata ;
EXPR	1083:2	1083:2	7	op = tif -> tif_rawdata
ASSIGN	1083:2	1083:7	8	op = tif -> tif_rawdata
LVAL	1083:2	1083:2	9	op
FIELD	1083:2	1083:2	10	op
LEAF_NODE	1083:2	1083:2	11	op
ASSIGN_OP	1083:5	1083:5	9	=
LEAF_NODE	1083:5	1083:5	10	=
RVAL	1083:7	1083:7	9	tif -> tif_rawdata
FIELD	1083:7	1083:12	10	tif -> tif_rawdata
LEAF_NODE	1083:7	1083:7	11	tif
LEAF_NODE	1083:10	1083:10	11	->
LEAF_NODE	1083:12	1083:12	11	tif_rawdata
LEAF_NODE	1083:23	1083:23	7	;
LEAF_NODE	1084:1	1084:1	5	}
SELECTION	1085:1	1085:38	3	
KEYWORD	1085:1	1085:1	4	if
LEAF_NODE	1085:1	1085:1	5	if
LEAF_NODE	1085:4	1085:4	4	(
CONDITION	1085:5	1085:5	4	sp -> enc_oldcode != ( hcode_t ) - 1
EXPR	1085:5	1085:34	5	sp -> enc_oldcode != ( hcode_t ) - 1
FIELD	1085:5	1085:9	6	sp -> enc_oldcode
LEAF_NODE	1085:5	1085:5	7	sp
LEAF_NODE	1085:7	1085:7	7	->
LEAF_NODE	1085:9	1085:9	7	enc_oldcode
EQ_OPERATOR	1085:21	1085:21	6	!=
LEAF_NODE	1085:21	1085:21	7	!=
LEAF_NODE	1085:24	1085:24	6	(
TYPE_NAME	1085:25	1085:25	6	hcode_t
LEAF_NODE	1085:25	1085:25	7	hcode_t
LEAF_NODE	1085:32	1085:32	6	)
UNARY_EXPR	1085:34	1085:35	6	- 1
UNARY_OPERATOR	1085:34	1085:34	7	-
LEAF_NODE	1085:34	1085:34	8	-
FIELD	1085:35	1085:35	7	1
LEAF_NODE	1085:35	1085:35	8	1
LEAF_NODE	1085:36	1085:36	4	)
STATEMENTS	1085:38	1107:1	4	
LEAF_NODE	1085:38	1085:38	5	{
STATEMENTS	1086:16	1097:18	5	
SIMPLE_DECL	1086:16	1086:47	6	int free_ent ; free_ent = sp -> lzw_free_ent ;
VAR_DECL	1086:16	1086:20	7	int free_ent ; free_ent = sp -> lzw_free_ent
TYPE	1086:16	1086:16	8	int
TYPE_NAME	1086:16	1086:16	9	int
LEAF_NODE	1086:16	1086:16	10	int
NAME	1086:20	1086:20	8	free_ent
LEAF_NODE	1086:20	1086:20	9	free_ent
LEAF_NODE	0:0	0:0	8	;
INIT	1086:20	1086:20	8	free_ent = sp -> lzw_free_ent
ASSIGN	1086:20	1086:31	9	free_ent = sp -> lzw_free_ent
LVAL	1086:20	1086:20	10	free_ent
NAME	1086:20	1086:20	11	free_ent
LEAF_NODE	1086:20	1086:20	12	free_ent
ASSIGN_OP	1086:29	1086:29	10	=
LEAF_NODE	1086:29	1086:29	11	=
RVAL	1086:31	1086:31	10	sp -> lzw_free_ent
FIELD	1086:31	1086:35	11	sp -> lzw_free_ent
LEAF_NODE	1086:31	1086:31	12	sp
LEAF_NODE	1086:33	1086:33	12	->
LEAF_NODE	1086:35	1086:35	12	lzw_free_ent
LEAF_NODE	1086:47	1086:47	7	;
EXPR_STATEMENT	1088:2	1088:34	6	PutNextCode ( op , sp -> enc_oldcode ) ;
EXPR	1088:2	1088:2	7	PutNextCode ( op , sp -> enc_oldcode )
FUNCTION_CALL	1088:2	1088:33	8	PutNextCode ( op , sp -> enc_oldcode )
CALLEE	1088:2	1088:2	9	PutNextCode
LEAF_NODE	1088:2	1088:2	10	PutNextCode
LEAF_NODE	1088:13	1088:13	9	(
ARGUMENT	1088:14	1088:14	9	op
FIELD	1088:14	1088:14	10	op
LEAF_NODE	1088:14	1088:14	11	op
LEAF_NODE	1088:16	1088:16	9	,
ARGUMENT	1088:18	1088:18	9	sp -> enc_oldcode
FIELD	1088:18	1088:22	10	sp -> enc_oldcode
LEAF_NODE	1088:18	1088:18	11	sp
LEAF_NODE	1088:20	1088:20	11	->
LEAF_NODE	1088:22	1088:22	11	enc_oldcode
LEAF_NODE	1088:33	1088:33	9	)
LEAF_NODE	1088:34	1088:34	7	;
EXPR_STATEMENT	1089:2	1089:32	6	sp -> enc_oldcode = ( hcode_t ) - 1 ;
EXPR	1089:2	1089:2	7	sp -> enc_oldcode = ( hcode_t ) - 1
ASSIGN	1089:2	1089:20	8	sp -> enc_oldcode = ( hcode_t ) - 1
LVAL	1089:2	1089:2	9	sp -> enc_oldcode
FIELD	1089:2	1089:6	10	sp -> enc_oldcode
LEAF_NODE	1089:2	1089:2	11	sp
LEAF_NODE	1089:4	1089:4	11	->
LEAF_NODE	1089:6	1089:6	11	enc_oldcode
ASSIGN_OP	1089:18	1089:18	9	=
LEAF_NODE	1089:18	1089:18	10	=
RVAL	1089:20	1089:30	9	( hcode_t ) - 1
LEAF_NODE	1089:20	1089:20	10	(
TYPE_NAME	1089:21	1089:21	10	hcode_t
LEAF_NODE	1089:21	1089:21	11	hcode_t
LEAF_NODE	1089:28	1089:28	10	)
UNARY_EXPR	1089:30	1089:31	10	- 1
UNARY_OPERATOR	1089:30	1089:30	11	-
LEAF_NODE	1089:30	1089:30	12	-
FIELD	1089:31	1089:31	11	1
LEAF_NODE	1089:31	1089:31	12	1
LEAF_NODE	1089:32	1089:32	7	;
EXPR_STATEMENT	1090:16	1090:27	6	free_ent ++ ;
EXPR	1090:16	1090:16	7	free_ent ++
FIELD	1090:16	1090:25	8	free_ent ++
LEAF_NODE	1090:16	1090:16	9	free_ent
LEAF_NODE	1090:25	1090:25	9	++
LEAF_NODE	1090:27	1090:27	7	;
SELECTION	1092:16	1092:44	6	
KEYWORD	1092:16	1092:16	7	if
LEAF_NODE	1092:16	1092:16	8	if
LEAF_NODE	1092:19	1092:19	7	(
CONDITION	1092:20	1092:20	7	free_ent == CODE_MAX - 1
EXPR	1092:20	1092:41	8	free_ent == CODE_MAX - 1
FIELD	1092:20	1092:20	9	free_ent
LEAF_NODE	1092:20	1092:20	10	free_ent
EQ_OPERATOR	1092:29	1092:29	9	==
LEAF_NODE	1092:29	1092:29	10	==
FIELD	1092:32	1092:32	9	CODE_MAX
LEAF_NODE	1092:32	1092:32	10	CODE_MAX
LEAF_NODE	1092:40	1092:40	9	-
FIELD	1092:41	1092:41	9	1
LEAF_NODE	1092:41	1092:41	10	1
LEAF_NODE	1092:42	1092:42	7	)
STATEMENTS	1092:44	1097:16	7	
LEAF_NODE	1092:44	1092:44	8	{
STATEMENTS	1094:24	1096:24	8	
EXPR_STATEMENT	1094:24	1094:36	9	outcount = 0 ;
EXPR	1094:24	1094:24	10	outcount = 0
ASSIGN	1094:24	1094:35	11	outcount = 0
LVAL	1094:24	1094:24	12	outcount
FIELD	1094:24	1094:24	13	outcount
LEAF_NODE	1094:24	1094:24	14	outcount
ASSIGN_OP	1094:33	1094:33	12	=
LEAF_NODE	1094:33	1094:33	13	=
RVAL	1094:35	1094:35	12	0
FIELD	1094:35	1094:35	13	0
LEAF_NODE	1094:35	1094:35	14	0
LEAF_NODE	1094:36	1094:36	10	;
EXPR_STATEMENT	1095:24	1095:51	9	PutNextCode ( op , CODE_CLEAR ) ;
EXPR	1095:24	1095:24	10	PutNextCode ( op , CODE_CLEAR )
FUNCTION_CALL	1095:24	1095:50	11	PutNextCode ( op , CODE_CLEAR )
CALLEE	1095:24	1095:24	12	PutNextCode
LEAF_NODE	1095:24	1095:24	13	PutNextCode
LEAF_NODE	1095:35	1095:35	12	(
ARGUMENT	1095:36	1095:36	12	op
FIELD	1095:36	1095:36	13	op
LEAF_NODE	1095:36	1095:36	14	op
LEAF_NODE	1095:38	1095:38	12	,
ARGUMENT	1095:40	1095:40	12	CODE_CLEAR
FIELD	1095:40	1095:40	13	CODE_CLEAR
LEAF_NODE	1095:40	1095:40	14	CODE_CLEAR
LEAF_NODE	1095:50	1095:50	12	)
LEAF_NODE	1095:51	1095:51	10	;
EXPR_STATEMENT	1096:24	1096:40	9	nbits = BITS_MIN ;
EXPR	1096:24	1096:24	10	nbits = BITS_MIN
ASSIGN	1096:24	1096:32	11	nbits = BITS_MIN
LVAL	1096:24	1096:24	12	nbits
FIELD	1096:24	1096:24	13	nbits
LEAF_NODE	1096:24	1096:24	14	nbits
ASSIGN_OP	1096:30	1096:30	12	=
LEAF_NODE	1096:30	1096:30	13	=
RVAL	1096:32	1096:32	12	BITS_MIN
FIELD	1096:32	1096:32	13	BITS_MIN
LEAF_NODE	1096:32	1096:32	14	BITS_MIN
LEAF_NODE	1096:40	1096:40	10	;
LEAF_NODE	1097:16	1097:16	8	}
SELECTION	1097:18	1097:23	6	
KEYWORD	1097:18	1097:18	7	else
LEAF_NODE	1097:18	1097:18	8	else
STATEMENTS	1097:23	1106:16	7	
LEAF_NODE	1097:23	1097:23	8	{
STATEMENTS	1102:24	1102:24	8	
SELECTION	1102:24	1102:56	9	
KEYWORD	1102:24	1102:24	10	if
LEAF_NODE	1102:24	1102:24	11	if
LEAF_NODE	1102:27	1102:27	10	(
CONDITION	1102:28	1102:28	10	free_ent > sp -> lzw_maxcode
EXPR	1102:28	1102:39	11	free_ent > sp -> lzw_maxcode
FIELD	1102:28	1102:28	12	free_ent
LEAF_NODE	1102:28	1102:28	13	free_ent
REL_OPERATOR	1102:37	1102:37	12	>
LEAF_NODE	1102:37	1102:37	13	>
FIELD	1102:39	1102:43	12	sp -> lzw_maxcode
LEAF_NODE	1102:39	1102:39	13	sp
LEAF_NODE	1102:41	1102:41	13	->
LEAF_NODE	1102:43	1102:43	13	lzw_maxcode
LEAF_NODE	1102:54	1102:54	10	)
STATEMENTS	1102:56	1105:24	10	
LEAF_NODE	1102:56	1102:56	11	{
STATEMENTS	1103:32	1104:32	11	
EXPR_STATEMENT	1103:32	1103:39	12	nbits ++ ;
EXPR	1103:32	1103:32	13	nbits ++
FIELD	1103:32	1103:37	14	nbits ++
LEAF_NODE	1103:32	1103:32	15	nbits
LEAF_NODE	1103:37	1103:37	15	++
LEAF_NODE	1103:39	1103:39	13	;
EXPR_STATEMENT	1104:32	1104:57	12	assert ( nbits <= BITS_MAX ) ;
EXPR	1104:32	1104:32	13	assert ( nbits <= BITS_MAX )
FUNCTION_CALL	1104:32	1104:56	14	assert ( nbits <= BITS_MAX )
CALLEE	1104:32	1104:32	15	assert
LEAF_NODE	1104:32	1104:32	16	assert
LEAF_NODE	1104:38	1104:38	15	(
ARGUMENT	1104:39	1104:48	15	nbits <= BITS_MAX
FIELD	1104:39	1104:39	16	nbits
LEAF_NODE	1104:39	1104:39	17	nbits
REL_OPERATOR	1104:45	1104:45	16	<=
LEAF_NODE	1104:45	1104:45	17	<=
FIELD	1104:48	1104:48	16	BITS_MAX
LEAF_NODE	1104:48	1104:48	17	BITS_MAX
LEAF_NODE	1104:56	1104:56	15	)
LEAF_NODE	1104:57	1104:57	13	;
LEAF_NODE	1105:24	1105:24	11	}
LEAF_NODE	1106:16	1106:16	8	}
LEAF_NODE	1107:1	1107:1	5	}
EXPR_STATEMENT	1108:1	1108:26	3	PutNextCode ( op , CODE_EOI ) ;
EXPR	1108:1	1108:1	4	PutNextCode ( op , CODE_EOI )
FUNCTION_CALL	1108:1	1108:25	5	PutNextCode ( op , CODE_EOI )
CALLEE	1108:1	1108:1	6	PutNextCode
LEAF_NODE	1108:1	1108:1	7	PutNextCode
LEAF_NODE	1108:12	1108:12	6	(
ARGUMENT	1108:13	1108:13	6	op
FIELD	1108:13	1108:13	7	op
LEAF_NODE	1108:13	1108:13	8	op
LEAF_NODE	1108:15	1108:15	6	,
ARGUMENT	1108:17	1108:17	6	CODE_EOI
FIELD	1108:17	1108:17	7	CODE_EOI
LEAF_NODE	1108:17	1108:17	8	CODE_EOI
LEAF_NODE	1108:25	1108:25	6	)
LEAF_NODE	1108:26	1108:26	4	;
SELECTION	1110:1	1111:2	3	
KEYWORD	1110:1	1110:1	4	if
LEAF_NODE	1110:1	1110:1	5	if
LEAF_NODE	1110:4	1110:4	4	(
CONDITION	1110:5	1110:5	4	nextbits > 0
EXPR	1110:5	1110:16	5	nextbits > 0
FIELD	1110:5	1110:5	6	nextbits
LEAF_NODE	1110:5	1110:5	7	nextbits
REL_OPERATOR	1110:14	1110:14	6	>
LEAF_NODE	1110:14	1110:14	7	>
FIELD	1110:16	1110:16	6	0
LEAF_NODE	1110:16	1110:16	7	0
LEAF_NODE	1110:17	1110:17	4	)
STATEMENTS	1111:2	1111:2	4	
EXPR_STATEMENT	1111:2	1111:58	5	* op ++ = ( unsigned char ) ( ( nextdata << ( 8 - nextbits ) ) & 0xff ) ;
EXPR	1111:2	1111:2	6	* op ++ = ( unsigned char ) ( ( nextdata << ( 8 - nextbits ) ) & 0xff )
ASSIGN	1111:2	1111:10	7	* op ++ = ( unsigned char ) ( ( nextdata << ( 8 - nextbits ) ) & 0xff )
LVAL	1111:2	1111:2	8	* op ++
UNARY_EXPR	1111:2	1111:3	9	* op ++
UNARY_OPERATOR	1111:2	1111:2	10	*
LEAF_NODE	1111:2	1111:2	11	*
FIELD	1111:3	1111:5	10	op ++
LEAF_NODE	1111:3	1111:3	11	op
LEAF_NODE	1111:5	1111:5	11	++
ASSIGN_OP	1111:8	1111:8	8	=
LEAF_NODE	1111:8	1111:8	9	=
RVAL	1111:10	1111:57	8	( unsigned char ) ( ( nextdata << ( 8 - nextbits ) ) & 0xff )
LEAF_NODE	1111:10	1111:10	9	(
TYPE_NAME	1111:11	1111:20	9	unsigned char
LEAF_NODE	1111:11	1111:11	10	unsigned
LEAF_NODE	1111:20	1111:20	10	char
LEAF_NODE	1111:24	1111:24	9	)
LEAF_NODE	1111:25	1111:25	9	(
LEAF_NODE	1111:26	1111:26	9	(
FIELD	1111:27	1111:27	9	nextdata
LEAF_NODE	1111:27	1111:27	10	nextdata
LEAF_NODE	1111:36	1111:36	9	<<
LEAF_NODE	1111:39	1111:39	9	(
FIELD	1111:40	1111:40	9	8
LEAF_NODE	1111:40	1111:40	10	8
LEAF_NODE	1111:41	1111:41	9	-
FIELD	1111:42	1111:42	9	nextbits
LEAF_NODE	1111:42	1111:42	10	nextbits
LEAF_NODE	1111:50	1111:50	9	)
LEAF_NODE	1111:51	1111:51	9	)
LEAF_NODE	1111:52	1111:52	9	&
FIELD	1111:53	1111:53	9	0xff
LEAF_NODE	1111:53	1111:53	10	0xff
LEAF_NODE	1111:57	1111:57	9	)
LEAF_NODE	1111:58	1111:58	6	;
EXPR_STATEMENT	1112:1	1112:51	3	tif -> tif_rawcc = ( tmsize_t ) ( op - tif -> tif_rawdata ) ;
EXPR	1112:1	1112:1	4	tif -> tif_rawcc = ( tmsize_t ) ( op - tif -> tif_rawdata )
ASSIGN	1112:1	1112:18	5	tif -> tif_rawcc = ( tmsize_t ) ( op - tif -> tif_rawdata )
LVAL	1112:1	1112:1	6	tif -> tif_rawcc
FIELD	1112:1	1112:6	7	tif -> tif_rawcc
LEAF_NODE	1112:1	1112:1	8	tif
LEAF_NODE	1112:4	1112:4	8	->
LEAF_NODE	1112:6	1112:6	8	tif_rawcc
ASSIGN_OP	1112:16	1112:16	6	=
LEAF_NODE	1112:16	1112:16	7	=
RVAL	1112:18	1112:50	6	( tmsize_t ) ( op - tif -> tif_rawdata )
LEAF_NODE	1112:18	1112:18	7	(
TYPE_NAME	1112:19	1112:19	7	tmsize_t
LEAF_NODE	1112:19	1112:19	8	tmsize_t
LEAF_NODE	1112:27	1112:27	7	)
LEAF_NODE	1112:28	1112:28	7	(
FIELD	1112:29	1112:29	7	op
LEAF_NODE	1112:29	1112:29	8	op
LEAF_NODE	1112:32	1112:32	7	-
FIELD	1112:34	1112:39	7	tif -> tif_rawdata
LEAF_NODE	1112:34	1112:34	8	tif
LEAF_NODE	1112:37	1112:37	8	->
LEAF_NODE	1112:39	1112:39	8	tif_rawdata
LEAF_NODE	1112:50	1112:50	7	)
LEAF_NODE	1112:51	1112:51	4	;
JUMP_STATEMENT	1113:1	1113:11	3	return ( 1 ) ;
KEYWORD	1113:1	1113:1	4	return
LEAF_NODE	1113:1	1113:1	5	return
DESTINATION	1113:8	1113:8	4	( 1 )
EXPR	1113:8	1113:10	5	( 1 )
LEAF_NODE	1113:8	1113:8	6	(
FIELD	1113:9	1113:9	6	1
LEAF_NODE	1113:9	1113:9	7	1
LEAF_NODE	1113:10	1113:10	6	)
LEAF_NODE	1113:11	1113:11	4	;
LEAF_NODE	1114:0	1114:0	2	}
FUNCTION_DEF	1119:0	1139:0	1	
RETURN_TYPE	1119:0	1119:7	2	static void
LEAF_NODE	1119:0	1119:0	3	static
TYPE_NAME	1119:7	1119:7	3	void
LEAF_NODE	1119:7	1119:7	4	void
FUNCTION_NAME	1120:0	1120:0	2	cl_hash
LEAF_NODE	1120:0	1120:0	3	cl_hash
PARAMETER_LIST	1120:7	1120:25	2	( LZWCodecState * sp )
LEAF_NODE	1120:7	1120:7	3	(
PARAMETER_DECL	1120:8	1120:23	3	LZWCodecState * sp
TYPE	1120:8	1120:21	4	LZWCodecState *
TYPE_NAME	1120:8	1120:8	5	LZWCodecState
LEAF_NODE	1120:8	1120:8	6	LZWCodecState
POINTER	1120:21	1120:21	5	*
LEAF_NODE	1120:21	1120:21	6	*
NAME	1120:23	1120:23	4	sp
LEAF_NODE	1120:23	1120:23	5	sp
LEAF_NODE	1120:25	1120:25	3	)
LEAF_NODE	1121:0	1121:0	2	{
STATEMENTS	1122:1	1137:1	2	
LEAF_NODE	1122:1	1122:1	3	register
SIMPLE_DECL	1122:10	1122:48	3	hash_t * hp ; hp = & sp -> enc_hashtab [ HSIZE - 1 ] ;
VAR_DECL	1122:10	1122:18	4	hash_t * hp ; hp = & sp -> enc_hashtab [ HSIZE - 1 ]
TYPE	1122:10	1122:17	5	hash_t *
TYPE_NAME	1122:10	1122:10	6	hash_t
LEAF_NODE	1122:10	1122:10	7	hash_t
POINTER	1122:17	1122:17	6	*
LEAF_NODE	1122:17	1122:17	7	*
NAME	1122:18	1122:18	5	hp
LEAF_NODE	1122:18	1122:18	6	hp
LEAF_NODE	0:0	0:0	5	;
INIT	1122:18	1122:18	5	hp = & sp -> enc_hashtab [ HSIZE - 1 ]
ASSIGN	1122:18	1122:23	6	hp = & sp -> enc_hashtab [ HSIZE - 1 ]
LVAL	1122:18	1122:18	7	hp
NAME	1122:18	1122:18	8	hp
LEAF_NODE	1122:18	1122:18	9	hp
ASSIGN_OP	1122:21	1122:21	7	=
LEAF_NODE	1122:21	1122:21	8	=
RVAL	1122:23	1122:23	7	& sp -> enc_hashtab [ HSIZE - 1 ]
UNARY_EXPR	1122:23	1122:24	8	& sp -> enc_hashtab [ HSIZE - 1 ]
UNARY_OPERATOR	1122:23	1122:23	9	&
LEAF_NODE	1122:23	1122:23	10	&
FIELD	1122:24	1122:47	9	sp -> enc_hashtab [ HSIZE - 1 ]
LEAF_NODE	1122:24	1122:24	10	sp
LEAF_NODE	1122:26	1122:26	10	->
LEAF_NODE	1122:28	1122:28	10	enc_hashtab
LEAF_NODE	1122:39	1122:39	10	[
EXPR	1122:40	1122:46	10	HSIZE - 1
FIELD	1122:40	1122:40	11	HSIZE
LEAF_NODE	1122:40	1122:40	12	HSIZE
LEAF_NODE	1122:45	1122:45	11	-
FIELD	1122:46	1122:46	11	1
LEAF_NODE	1122:46	1122:46	12	1
LEAF_NODE	1122:47	1122:47	10	]
LEAF_NODE	1122:48	1122:48	4	;
LEAF_NODE	1123:1	1123:1	3	register
SIMPLE_DECL	1123:10	1123:26	3	long i ; i = HSIZE - 8 ;
VAR_DECL	1123:10	1123:15	4	long i ; i = HSIZE - 8
TYPE	1123:10	1123:10	5	long
TYPE_NAME	1123:10	1123:10	6	long
LEAF_NODE	1123:10	1123:10	7	long
NAME	1123:15	1123:15	5	i
LEAF_NODE	1123:15	1123:15	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	1123:15	1123:15	5	i = HSIZE - 8
ASSIGN	1123:15	1123:19	6	i = HSIZE - 8
LVAL	1123:15	1123:15	7	i
NAME	1123:15	1123:15	8	i
LEAF_NODE	1123:15	1123:15	9	i
ASSIGN_OP	1123:17	1123:17	7	=
LEAF_NODE	1123:17	1123:17	8	=
RVAL	1123:19	1123:25	7	HSIZE - 8
FIELD	1123:19	1123:19	8	HSIZE
LEAF_NODE	1123:19	1123:19	9	HSIZE
LEAF_NODE	1123:24	1123:24	8	-
FIELD	1123:25	1123:25	8	8
LEAF_NODE	1123:25	1123:25	9	8
LEAF_NODE	1123:26	1123:26	4	;
ITERATION	1125:1	1125:4	3	
KEYWORD	1125:1	1125:1	4	do
LEAF_NODE	1125:1	1125:1	5	do
LEAF_NODE	1136:9	1136:9	4	(
CONDITION	1136:10	1136:10	4	i >= 0
EXPR	1136:10	1136:15	5	i >= 0
FIELD	1136:10	1136:10	6	i
LEAF_NODE	1136:10	1136:10	7	i
REL_OPERATOR	1136:12	1136:12	6	>=
LEAF_NODE	1136:12	1136:12	7	>=
FIELD	1136:15	1136:15	6	0
LEAF_NODE	1136:15	1136:15	7	0
LEAF_NODE	1136:16	1136:16	4	)
STATEMENTS	1125:4	1136:1	4	
LEAF_NODE	1125:4	1125:4	5	{
STATEMENTS	1126:2	1135:2	5	
EXPR_STATEMENT	1126:2	1126:8	6	i -= 8 ;
EXPR	1126:2	1126:2	7	i -= 8
ASSIGN	1126:2	1126:7	8	i -= 8
LVAL	1126:2	1126:2	9	i
FIELD	1126:2	1126:2	10	i
LEAF_NODE	1126:2	1126:2	11	i
ASSIGN_OP	1126:4	1126:4	9	-=
LEAF_NODE	1126:4	1126:4	10	-=
RVAL	1126:7	1126:7	9	8
FIELD	1126:7	1126:7	10	8
LEAF_NODE	1126:7	1126:7	11	8
LEAF_NODE	1126:8	1126:8	7	;
EXPR_STATEMENT	1127:2	1127:18	6	hp [ - 7 ] . hash = - 1 ;
EXPR	1127:2	1127:2	7	hp [ - 7 ] . hash = - 1
ASSIGN	1127:2	1127:16	8	hp [ - 7 ] . hash = - 1
LVAL	1127:2	1127:2	9	hp [ - 7 ] . hash
FIELD	1127:2	1127:9	10	hp [ - 7 ] . hash
LEAF_NODE	1127:2	1127:2	11	hp
LEAF_NODE	1127:4	1127:4	11	[
EXPR	1127:5	1127:5	11	- 7
UNARY_EXPR	1127:5	1127:6	12	- 7
UNARY_OPERATOR	1127:5	1127:5	13	-
LEAF_NODE	1127:5	1127:5	14	-
FIELD	1127:6	1127:6	13	7
LEAF_NODE	1127:6	1127:6	14	7
LEAF_NODE	1127:7	1127:7	11	]
LEAF_NODE	1127:8	1127:8	11	.
LEAF_NODE	1127:9	1127:9	11	hash
ASSIGN_OP	1127:14	1127:14	9	=
LEAF_NODE	1127:14	1127:14	10	=
RVAL	1127:16	1127:16	9	- 1
UNARY_EXPR	1127:16	1127:17	10	- 1
UNARY_OPERATOR	1127:16	1127:16	11	-
LEAF_NODE	1127:16	1127:16	12	-
FIELD	1127:17	1127:17	11	1
LEAF_NODE	1127:17	1127:17	12	1
LEAF_NODE	1127:18	1127:18	7	;
EXPR_STATEMENT	1128:2	1128:18	6	hp [ - 6 ] . hash = - 1 ;
EXPR	1128:2	1128:2	7	hp [ - 6 ] . hash = - 1
ASSIGN	1128:2	1128:16	8	hp [ - 6 ] . hash = - 1
LVAL	1128:2	1128:2	9	hp [ - 6 ] . hash
FIELD	1128:2	1128:9	10	hp [ - 6 ] . hash
LEAF_NODE	1128:2	1128:2	11	hp
LEAF_NODE	1128:4	1128:4	11	[
EXPR	1128:5	1128:5	11	- 6
UNARY_EXPR	1128:5	1128:6	12	- 6
UNARY_OPERATOR	1128:5	1128:5	13	-
LEAF_NODE	1128:5	1128:5	14	-
FIELD	1128:6	1128:6	13	6
LEAF_NODE	1128:6	1128:6	14	6
LEAF_NODE	1128:7	1128:7	11	]
LEAF_NODE	1128:8	1128:8	11	.
LEAF_NODE	1128:9	1128:9	11	hash
ASSIGN_OP	1128:14	1128:14	9	=
LEAF_NODE	1128:14	1128:14	10	=
RVAL	1128:16	1128:16	9	- 1
UNARY_EXPR	1128:16	1128:17	10	- 1
UNARY_OPERATOR	1128:16	1128:16	11	-
LEAF_NODE	1128:16	1128:16	12	-
FIELD	1128:17	1128:17	11	1
LEAF_NODE	1128:17	1128:17	12	1
LEAF_NODE	1128:18	1128:18	7	;
EXPR_STATEMENT	1129:2	1129:18	6	hp [ - 5 ] . hash = - 1 ;
EXPR	1129:2	1129:2	7	hp [ - 5 ] . hash = - 1
ASSIGN	1129:2	1129:16	8	hp [ - 5 ] . hash = - 1
LVAL	1129:2	1129:2	9	hp [ - 5 ] . hash
FIELD	1129:2	1129:9	10	hp [ - 5 ] . hash
LEAF_NODE	1129:2	1129:2	11	hp
LEAF_NODE	1129:4	1129:4	11	[
EXPR	1129:5	1129:5	11	- 5
UNARY_EXPR	1129:5	1129:6	12	- 5
UNARY_OPERATOR	1129:5	1129:5	13	-
LEAF_NODE	1129:5	1129:5	14	-
FIELD	1129:6	1129:6	13	5
LEAF_NODE	1129:6	1129:6	14	5
LEAF_NODE	1129:7	1129:7	11	]
LEAF_NODE	1129:8	1129:8	11	.
LEAF_NODE	1129:9	1129:9	11	hash
ASSIGN_OP	1129:14	1129:14	9	=
LEAF_NODE	1129:14	1129:14	10	=
RVAL	1129:16	1129:16	9	- 1
UNARY_EXPR	1129:16	1129:17	10	- 1
UNARY_OPERATOR	1129:16	1129:16	11	-
LEAF_NODE	1129:16	1129:16	12	-
FIELD	1129:17	1129:17	11	1
LEAF_NODE	1129:17	1129:17	12	1
LEAF_NODE	1129:18	1129:18	7	;
EXPR_STATEMENT	1130:2	1130:18	6	hp [ - 4 ] . hash = - 1 ;
EXPR	1130:2	1130:2	7	hp [ - 4 ] . hash = - 1
ASSIGN	1130:2	1130:16	8	hp [ - 4 ] . hash = - 1
LVAL	1130:2	1130:2	9	hp [ - 4 ] . hash
FIELD	1130:2	1130:9	10	hp [ - 4 ] . hash
LEAF_NODE	1130:2	1130:2	11	hp
LEAF_NODE	1130:4	1130:4	11	[
EXPR	1130:5	1130:5	11	- 4
UNARY_EXPR	1130:5	1130:6	12	- 4
UNARY_OPERATOR	1130:5	1130:5	13	-
LEAF_NODE	1130:5	1130:5	14	-
FIELD	1130:6	1130:6	13	4
LEAF_NODE	1130:6	1130:6	14	4
LEAF_NODE	1130:7	1130:7	11	]
LEAF_NODE	1130:8	1130:8	11	.
LEAF_NODE	1130:9	1130:9	11	hash
ASSIGN_OP	1130:14	1130:14	9	=
LEAF_NODE	1130:14	1130:14	10	=
RVAL	1130:16	1130:16	9	- 1
UNARY_EXPR	1130:16	1130:17	10	- 1
UNARY_OPERATOR	1130:16	1130:16	11	-
LEAF_NODE	1130:16	1130:16	12	-
FIELD	1130:17	1130:17	11	1
LEAF_NODE	1130:17	1130:17	12	1
LEAF_NODE	1130:18	1130:18	7	;
EXPR_STATEMENT	1131:2	1131:18	6	hp [ - 3 ] . hash = - 1 ;
EXPR	1131:2	1131:2	7	hp [ - 3 ] . hash = - 1
ASSIGN	1131:2	1131:16	8	hp [ - 3 ] . hash = - 1
LVAL	1131:2	1131:2	9	hp [ - 3 ] . hash
FIELD	1131:2	1131:9	10	hp [ - 3 ] . hash
LEAF_NODE	1131:2	1131:2	11	hp
LEAF_NODE	1131:4	1131:4	11	[
EXPR	1131:5	1131:5	11	- 3
UNARY_EXPR	1131:5	1131:6	12	- 3
UNARY_OPERATOR	1131:5	1131:5	13	-
LEAF_NODE	1131:5	1131:5	14	-
FIELD	1131:6	1131:6	13	3
LEAF_NODE	1131:6	1131:6	14	3
LEAF_NODE	1131:7	1131:7	11	]
LEAF_NODE	1131:8	1131:8	11	.
LEAF_NODE	1131:9	1131:9	11	hash
ASSIGN_OP	1131:14	1131:14	9	=
LEAF_NODE	1131:14	1131:14	10	=
RVAL	1131:16	1131:16	9	- 1
UNARY_EXPR	1131:16	1131:17	10	- 1
UNARY_OPERATOR	1131:16	1131:16	11	-
LEAF_NODE	1131:16	1131:16	12	-
FIELD	1131:17	1131:17	11	1
LEAF_NODE	1131:17	1131:17	12	1
LEAF_NODE	1131:18	1131:18	7	;
EXPR_STATEMENT	1132:2	1132:18	6	hp [ - 2 ] . hash = - 1 ;
EXPR	1132:2	1132:2	7	hp [ - 2 ] . hash = - 1
ASSIGN	1132:2	1132:16	8	hp [ - 2 ] . hash = - 1
LVAL	1132:2	1132:2	9	hp [ - 2 ] . hash
FIELD	1132:2	1132:9	10	hp [ - 2 ] . hash
LEAF_NODE	1132:2	1132:2	11	hp
LEAF_NODE	1132:4	1132:4	11	[
EXPR	1132:5	1132:5	11	- 2
UNARY_EXPR	1132:5	1132:6	12	- 2
UNARY_OPERATOR	1132:5	1132:5	13	-
LEAF_NODE	1132:5	1132:5	14	-
FIELD	1132:6	1132:6	13	2
LEAF_NODE	1132:6	1132:6	14	2
LEAF_NODE	1132:7	1132:7	11	]
LEAF_NODE	1132:8	1132:8	11	.
LEAF_NODE	1132:9	1132:9	11	hash
ASSIGN_OP	1132:14	1132:14	9	=
LEAF_NODE	1132:14	1132:14	10	=
RVAL	1132:16	1132:16	9	- 1
UNARY_EXPR	1132:16	1132:17	10	- 1
UNARY_OPERATOR	1132:16	1132:16	11	-
LEAF_NODE	1132:16	1132:16	12	-
FIELD	1132:17	1132:17	11	1
LEAF_NODE	1132:17	1132:17	12	1
LEAF_NODE	1132:18	1132:18	7	;
EXPR_STATEMENT	1133:2	1133:18	6	hp [ - 1 ] . hash = - 1 ;
EXPR	1133:2	1133:2	7	hp [ - 1 ] . hash = - 1
ASSIGN	1133:2	1133:16	8	hp [ - 1 ] . hash = - 1
LVAL	1133:2	1133:2	9	hp [ - 1 ] . hash
FIELD	1133:2	1133:9	10	hp [ - 1 ] . hash
LEAF_NODE	1133:2	1133:2	11	hp
LEAF_NODE	1133:4	1133:4	11	[
EXPR	1133:5	1133:5	11	- 1
UNARY_EXPR	1133:5	1133:6	12	- 1
UNARY_OPERATOR	1133:5	1133:5	13	-
LEAF_NODE	1133:5	1133:5	14	-
FIELD	1133:6	1133:6	13	1
LEAF_NODE	1133:6	1133:6	14	1
LEAF_NODE	1133:7	1133:7	11	]
LEAF_NODE	1133:8	1133:8	11	.
LEAF_NODE	1133:9	1133:9	11	hash
ASSIGN_OP	1133:14	1133:14	9	=
LEAF_NODE	1133:14	1133:14	10	=
RVAL	1133:16	1133:16	9	- 1
UNARY_EXPR	1133:16	1133:17	10	- 1
UNARY_OPERATOR	1133:16	1133:16	11	-
LEAF_NODE	1133:16	1133:16	12	-
FIELD	1133:17	1133:17	11	1
LEAF_NODE	1133:17	1133:17	12	1
LEAF_NODE	1133:18	1133:18	7	;
EXPR_STATEMENT	1134:2	1134:18	6	hp [ 0 ] . hash = - 1 ;
EXPR	1134:2	1134:2	7	hp [ 0 ] . hash = - 1
ASSIGN	1134:2	1134:16	8	hp [ 0 ] . hash = - 1
LVAL	1134:2	1134:2	9	hp [ 0 ] . hash
FIELD	1134:2	1134:9	10	hp [ 0 ] . hash
LEAF_NODE	1134:2	1134:2	11	hp
LEAF_NODE	1134:4	1134:4	11	[
EXPR	1134:6	1134:6	11	0
FIELD	1134:6	1134:6	12	0
LEAF_NODE	1134:6	1134:6	13	0
LEAF_NODE	1134:7	1134:7	11	]
LEAF_NODE	1134:8	1134:8	11	.
LEAF_NODE	1134:9	1134:9	11	hash
ASSIGN_OP	1134:14	1134:14	9	=
LEAF_NODE	1134:14	1134:14	10	=
RVAL	1134:16	1134:16	9	- 1
UNARY_EXPR	1134:16	1134:17	10	- 1
UNARY_OPERATOR	1134:16	1134:16	11	-
LEAF_NODE	1134:16	1134:16	12	-
FIELD	1134:17	1134:17	11	1
LEAF_NODE	1134:17	1134:17	12	1
LEAF_NODE	1134:18	1134:18	7	;
EXPR_STATEMENT	1135:2	1135:9	6	hp -= 8 ;
EXPR	1135:2	1135:2	7	hp -= 8
ASSIGN	1135:2	1135:8	8	hp -= 8
LVAL	1135:2	1135:2	9	hp
FIELD	1135:2	1135:2	10	hp
LEAF_NODE	1135:2	1135:2	11	hp
ASSIGN_OP	1135:5	1135:5	9	-=
LEAF_NODE	1135:5	1135:5	10	-=
RVAL	1135:8	1135:8	9	8
FIELD	1135:8	1135:8	10	8
LEAF_NODE	1135:8	1135:8	11	8
LEAF_NODE	1135:9	1135:9	7	;
LEAF_NODE	1136:1	1136:1	5	}
LEAF_NODE	1136:17	1136:17	3	;
ITERATION	1137:1	1138:2	3	
KEYWORD	1137:1	1137:1	4	for
LEAF_NODE	1137:1	1137:1	5	for
LEAF_NODE	1137:5	1137:5	4	(
FOR_INIT	1137:6	1137:12	4	i += 8 ;
EXPR	1137:6	1137:6	5	i += 8
ASSIGN	1137:6	1137:11	6	i += 8
LVAL	1137:6	1137:6	7	i
FIELD	1137:6	1137:6	8	i
LEAF_NODE	1137:6	1137:6	9	i
ASSIGN_OP	1137:8	1137:8	7	+=
LEAF_NODE	1137:8	1137:8	8	+=
RVAL	1137:11	1137:11	7	8
FIELD	1137:11	1137:11	8	8
LEAF_NODE	1137:11	1137:11	9	8
LEAF_NODE	1137:12	1137:12	5	;
CONDITION	1137:14	1137:14	4	i > 0
EXPR	1137:14	1137:18	5	i > 0
FIELD	1137:14	1137:14	6	i
LEAF_NODE	1137:14	1137:14	7	i
REL_OPERATOR	1137:16	1137:16	6	>
LEAF_NODE	1137:16	1137:16	7	>
FIELD	1137:18	1137:18	6	0
LEAF_NODE	1137:18	1137:18	7	0
LEAF_NODE	1137:19	1137:19	4	;
FOR_EXPR	1137:21	1137:21	4	i -- , hp --
EXPR	1137:21	1137:26	5	i -- , hp --
FIELD	1137:21	1137:22	6	i --
LEAF_NODE	1137:21	1137:21	7	i
LEAF_NODE	1137:22	1137:22	7	--
LEAF_NODE	1137:24	1137:24	6	,
FIELD	1137:26	1137:28	6	hp --
LEAF_NODE	1137:26	1137:26	7	hp
LEAF_NODE	1137:28	1137:28	7	--
LEAF_NODE	1137:30	1137:30	4	)
STATEMENTS	1138:2	1138:2	4	
EXPR_STATEMENT	1138:2	1138:15	5	hp -> hash = - 1 ;
EXPR	1138:2	1138:2	6	hp -> hash = - 1
ASSIGN	1138:2	1138:13	7	hp -> hash = - 1
LVAL	1138:2	1138:2	8	hp -> hash
FIELD	1138:2	1138:6	9	hp -> hash
LEAF_NODE	1138:2	1138:2	10	hp
LEAF_NODE	1138:4	1138:4	10	->
LEAF_NODE	1138:6	1138:6	10	hash
ASSIGN_OP	1138:11	1138:11	8	=
LEAF_NODE	1138:11	1138:11	9	=
RVAL	1138:13	1138:13	8	- 1
UNARY_EXPR	1138:13	1138:14	9	- 1
UNARY_OPERATOR	1138:13	1138:13	10	-
LEAF_NODE	1138:13	1138:13	11	-
FIELD	1138:14	1138:14	10	1
LEAF_NODE	1138:14	1138:14	11	1
LEAF_NODE	1138:15	1138:15	6	;
LEAF_NODE	1139:0	1139:0	2	}
FUNCTION_DEF	1141:0	1158:0	1	
RETURN_TYPE	1141:0	1141:7	2	static void
LEAF_NODE	1141:0	1141:0	3	static
TYPE_NAME	1141:7	1141:7	3	void
LEAF_NODE	1141:7	1141:7	4	void
FUNCTION_NAME	1142:0	1142:0	2	LZWCleanup
LEAF_NODE	1142:0	1142:0	3	LZWCleanup
PARAMETER_LIST	1142:10	1142:20	2	( TIFF * tif )
LEAF_NODE	1142:10	1142:10	3	(
PARAMETER_DECL	1142:11	1142:17	3	TIFF * tif
TYPE	1142:11	1142:15	4	TIFF *
TYPE_NAME	1142:11	1142:11	5	TIFF
LEAF_NODE	1142:11	1142:11	6	TIFF
POINTER	1142:15	1142:15	5	*
LEAF_NODE	1142:15	1142:15	6	*
NAME	1142:17	1142:17	4	tif
LEAF_NODE	1142:17	1142:17	5	tif
LEAF_NODE	1142:20	1142:20	3	)
LEAF_NODE	1143:0	1143:0	2	{
STATEMENTS	1144:1	1157:1	2	
EXPR_STATEMENT	1144:1	1144:32	3	( void ) TIFFPredictorCleanup ( tif ) ;
EXPR	1144:1	1144:7	4	( void ) TIFFPredictorCleanup ( tif )
LEAF_NODE	1144:1	1144:1	5	(
TYPE_NAME	1144:2	1144:2	5	void
LEAF_NODE	1144:2	1144:2	6	void
LEAF_NODE	1144:6	1144:6	5	)
FUNCTION_CALL	1144:7	1144:31	5	TIFFPredictorCleanup ( tif )
CALLEE	1144:7	1144:7	6	TIFFPredictorCleanup
LEAF_NODE	1144:7	1144:7	7	TIFFPredictorCleanup
LEAF_NODE	1144:27	1144:27	6	(
ARGUMENT	1144:28	1144:28	6	tif
FIELD	1144:28	1144:28	7	tif
LEAF_NODE	1144:28	1144:28	8	tif
LEAF_NODE	1144:31	1144:31	6	)
LEAF_NODE	1144:32	1144:32	4	;
EXPR_STATEMENT	1146:1	1146:27	3	assert ( tif -> tif_data != 0 ) ;
EXPR	1146:1	1146:1	4	assert ( tif -> tif_data != 0 )
FUNCTION_CALL	1146:1	1146:26	5	assert ( tif -> tif_data != 0 )
CALLEE	1146:1	1146:1	6	assert
LEAF_NODE	1146:1	1146:1	7	assert
LEAF_NODE	1146:7	1146:7	6	(
ARGUMENT	1146:8	1146:25	6	tif -> tif_data != 0
FIELD	1146:8	1146:13	7	tif -> tif_data
LEAF_NODE	1146:8	1146:8	8	tif
LEAF_NODE	1146:11	1146:11	8	->
LEAF_NODE	1146:13	1146:13	8	tif_data
EQ_OPERATOR	1146:22	1146:22	7	!=
LEAF_NODE	1146:22	1146:22	8	!=
FIELD	1146:25	1146:25	7	0
LEAF_NODE	1146:25	1146:25	8	0
LEAF_NODE	1146:26	1146:26	6	)
LEAF_NODE	1146:27	1146:27	4	;
SELECTION	1148:1	1149:2	3	
KEYWORD	1148:1	1148:1	4	if
LEAF_NODE	1148:1	1148:1	5	if
LEAF_NODE	1148:4	1148:4	4	(
CONDITION	1148:5	1148:5	4	DecoderState ( tif ) -> dec_codetab
EXPR	1148:5	1148:24	5	DecoderState ( tif ) -> dec_codetab
FUNCTION_CALL	1148:5	1148:21	6	DecoderState ( tif )
CALLEE	1148:5	1148:5	7	DecoderState
LEAF_NODE	1148:5	1148:5	8	DecoderState
LEAF_NODE	1148:17	1148:17	7	(
ARGUMENT	1148:18	1148:18	7	tif
FIELD	1148:18	1148:18	8	tif
LEAF_NODE	1148:18	1148:18	9	tif
LEAF_NODE	1148:21	1148:21	7	)
LEAF_NODE	1148:22	1148:22	6	->
LEAF_NODE	1148:24	1148:24	6	dec_codetab
LEAF_NODE	1148:35	1148:35	4	)
STATEMENTS	1149:2	1149:2	4	
EXPR_STATEMENT	1149:2	1149:43	5	_TIFFfree ( DecoderState ( tif ) -> dec_codetab ) ;
EXPR	1149:2	1149:2	6	_TIFFfree ( DecoderState ( tif ) -> dec_codetab )
FUNCTION_CALL	1149:2	1149:42	7	_TIFFfree ( DecoderState ( tif ) -> dec_codetab )
CALLEE	1149:2	1149:2	8	_TIFFfree
LEAF_NODE	1149:2	1149:2	9	_TIFFfree
LEAF_NODE	1149:11	1149:11	8	(
ARGUMENT	1149:12	1149:31	8	DecoderState ( tif ) -> dec_codetab
FUNCTION_CALL	1149:12	1149:28	9	DecoderState ( tif )
CALLEE	1149:12	1149:12	10	DecoderState
LEAF_NODE	1149:12	1149:12	11	DecoderState
LEAF_NODE	1149:24	1149:24	10	(
ARGUMENT	1149:25	1149:25	10	tif
FIELD	1149:25	1149:25	11	tif
LEAF_NODE	1149:25	1149:25	12	tif
LEAF_NODE	1149:28	1149:28	10	)
LEAF_NODE	1149:29	1149:29	9	->
LEAF_NODE	1149:31	1149:31	9	dec_codetab
LEAF_NODE	1149:42	1149:42	8	)
LEAF_NODE	1149:43	1149:43	6	;
SELECTION	1151:1	1152:2	3	
KEYWORD	1151:1	1151:1	4	if
LEAF_NODE	1151:1	1151:1	5	if
LEAF_NODE	1151:4	1151:4	4	(
CONDITION	1151:5	1151:5	4	EncoderState ( tif ) -> enc_hashtab
EXPR	1151:5	1151:24	5	EncoderState ( tif ) -> enc_hashtab
FUNCTION_CALL	1151:5	1151:21	6	EncoderState ( tif )
CALLEE	1151:5	1151:5	7	EncoderState
LEAF_NODE	1151:5	1151:5	8	EncoderState
LEAF_NODE	1151:17	1151:17	7	(
ARGUMENT	1151:18	1151:18	7	tif
FIELD	1151:18	1151:18	8	tif
LEAF_NODE	1151:18	1151:18	9	tif
LEAF_NODE	1151:21	1151:21	7	)
LEAF_NODE	1151:22	1151:22	6	->
LEAF_NODE	1151:24	1151:24	6	enc_hashtab
LEAF_NODE	1151:35	1151:35	4	)
STATEMENTS	1152:2	1152:2	4	
EXPR_STATEMENT	1152:2	1152:43	5	_TIFFfree ( EncoderState ( tif ) -> enc_hashtab ) ;
EXPR	1152:2	1152:2	6	_TIFFfree ( EncoderState ( tif ) -> enc_hashtab )
FUNCTION_CALL	1152:2	1152:42	7	_TIFFfree ( EncoderState ( tif ) -> enc_hashtab )
CALLEE	1152:2	1152:2	8	_TIFFfree
LEAF_NODE	1152:2	1152:2	9	_TIFFfree
LEAF_NODE	1152:11	1152:11	8	(
ARGUMENT	1152:12	1152:31	8	EncoderState ( tif ) -> enc_hashtab
FUNCTION_CALL	1152:12	1152:28	9	EncoderState ( tif )
CALLEE	1152:12	1152:12	10	EncoderState
LEAF_NODE	1152:12	1152:12	11	EncoderState
LEAF_NODE	1152:24	1152:24	10	(
ARGUMENT	1152:25	1152:25	10	tif
FIELD	1152:25	1152:25	11	tif
LEAF_NODE	1152:25	1152:25	12	tif
LEAF_NODE	1152:28	1152:28	10	)
LEAF_NODE	1152:29	1152:29	9	->
LEAF_NODE	1152:31	1152:31	9	enc_hashtab
LEAF_NODE	1152:42	1152:42	8	)
LEAF_NODE	1152:43	1152:43	6	;
EXPR_STATEMENT	1154:1	1154:25	3	_TIFFfree ( tif -> tif_data ) ;
EXPR	1154:1	1154:1	4	_TIFFfree ( tif -> tif_data )
FUNCTION_CALL	1154:1	1154:24	5	_TIFFfree ( tif -> tif_data )
CALLEE	1154:1	1154:1	6	_TIFFfree
LEAF_NODE	1154:1	1154:1	7	_TIFFfree
LEAF_NODE	1154:10	1154:10	6	(
ARGUMENT	1154:11	1154:11	6	tif -> tif_data
FIELD	1154:11	1154:16	7	tif -> tif_data
LEAF_NODE	1154:11	1154:11	8	tif
LEAF_NODE	1154:14	1154:14	8	->
LEAF_NODE	1154:16	1154:16	8	tif_data
LEAF_NODE	1154:24	1154:24	6	)
LEAF_NODE	1154:25	1154:25	4	;
EXPR_STATEMENT	1155:1	1155:21	3	tif -> tif_data = NULL ;
EXPR	1155:1	1155:1	4	tif -> tif_data = NULL
ASSIGN	1155:1	1155:17	5	tif -> tif_data = NULL
LVAL	1155:1	1155:1	6	tif -> tif_data
FIELD	1155:1	1155:6	7	tif -> tif_data
LEAF_NODE	1155:1	1155:1	8	tif
LEAF_NODE	1155:4	1155:4	8	->
LEAF_NODE	1155:6	1155:6	8	tif_data
ASSIGN_OP	1155:15	1155:15	6	=
LEAF_NODE	1155:15	1155:15	7	=
RVAL	1155:17	1155:17	6	NULL
FIELD	1155:17	1155:17	7	NULL
LEAF_NODE	1155:17	1155:17	8	NULL
LEAF_NODE	1155:21	1155:21	4	;
EXPR_STATEMENT	1157:1	1157:37	3	_TIFFSetDefaultCompressionState ( tif ) ;
EXPR	1157:1	1157:1	4	_TIFFSetDefaultCompressionState ( tif )
FUNCTION_CALL	1157:1	1157:36	5	_TIFFSetDefaultCompressionState ( tif )
CALLEE	1157:1	1157:1	6	_TIFFSetDefaultCompressionState
LEAF_NODE	1157:1	1157:1	7	_TIFFSetDefaultCompressionState
LEAF_NODE	1157:32	1157:32	6	(
ARGUMENT	1157:33	1157:33	6	tif
FIELD	1157:33	1157:33	7	tif
LEAF_NODE	1157:33	1157:33	8	tif
LEAF_NODE	1157:36	1157:36	6	)
LEAF_NODE	1157:37	1157:37	4	;
LEAF_NODE	1158:0	1158:0	2	}
FUNCTION_DEF	1160:0	1201:0	1	
RETURN_TYPE	1160:0	1160:0	2	int
TYPE_NAME	1160:0	1160:0	3	int
LEAF_NODE	1160:0	1160:0	4	int
FUNCTION_NAME	1161:0	1161:0	2	TIFFInitLZW
LEAF_NODE	1161:0	1161:0	3	TIFFInitLZW
PARAMETER_LIST	1161:11	1161:33	2	( TIFF * tif , int scheme )
LEAF_NODE	1161:11	1161:11	3	(
PARAMETER_DECL	1161:12	1161:18	3	TIFF * tif
TYPE	1161:12	1161:16	4	TIFF *
TYPE_NAME	1161:12	1161:12	5	TIFF
LEAF_NODE	1161:12	1161:12	6	TIFF
POINTER	1161:16	1161:16	5	*
LEAF_NODE	1161:16	1161:16	6	*
NAME	1161:18	1161:18	4	tif
LEAF_NODE	1161:18	1161:18	5	tif
LEAF_NODE	1161:21	1161:21	3	,
PARAMETER_DECL	1161:23	1161:27	3	int scheme
TYPE	1161:23	1161:23	4	int
TYPE_NAME	1161:23	1161:23	5	int
LEAF_NODE	1161:23	1161:23	6	int
NAME	1161:27	1161:27	4	scheme
LEAF_NODE	1161:27	1161:27	5	scheme
LEAF_NODE	1161:33	1161:33	3	)
LEAF_NODE	1162:0	1162:0	2	{
STATEMENTS	1163:1	1200:1	2	
LEAF_NODE	1163:1	1163:1	3	static
SIMPLE_DECL	1163:8	1163:43	3	const char [ ] module ; module = "TIFFInitLZW" ;
VAR_DECL	1163:8	1163:19	4	const char [ ] module ; module = "TIFFInitLZW"
TYPE	1163:8	1163:25	5	const char [ ]
TYPE_NAME	1163:8	1163:14	6	const char
LEAF_NODE	1163:8	1163:8	7	const
LEAF_NODE	1163:14	1163:14	7	char
TYPE_SUFFIX	1163:25	1163:26	6	[ ]
LEAF_NODE	1163:25	1163:25	7	[
LEAF_NODE	1163:26	1163:26	7	]
NAME	1163:19	1163:19	5	module
LEAF_NODE	1163:19	1163:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1163:19	1163:19	5	module = "TIFFInitLZW"
ASSIGN	1163:19	1163:30	6	module = "TIFFInitLZW"
LVAL	1163:19	1163:19	7	module
NAME	1163:19	1163:19	8	module
LEAF_NODE	1163:19	1163:19	9	module
ASSIGN_OP	1163:28	1163:28	7	=
LEAF_NODE	1163:28	1163:28	8	=
RVAL	1163:30	1163:30	7	"TIFFInitLZW"
FIELD	1163:30	1163:30	8	"TIFFInitLZW"
LEAF_NODE	1163:30	1163:30	9	"TIFFInitLZW"
LEAF_NODE	1163:43	1163:43	4	;
EXPR_STATEMENT	1164:1	1164:34	3	assert ( scheme == COMPRESSION_LZW ) ;
EXPR	1164:1	1164:1	4	assert ( scheme == COMPRESSION_LZW )
FUNCTION_CALL	1164:1	1164:33	5	assert ( scheme == COMPRESSION_LZW )
CALLEE	1164:1	1164:1	6	assert
LEAF_NODE	1164:1	1164:1	7	assert
LEAF_NODE	1164:7	1164:7	6	(
ARGUMENT	1164:8	1164:18	6	scheme == COMPRESSION_LZW
FIELD	1164:8	1164:8	7	scheme
LEAF_NODE	1164:8	1164:8	8	scheme
EQ_OPERATOR	1164:15	1164:15	7	==
LEAF_NODE	1164:15	1164:15	8	==
FIELD	1164:18	1164:18	7	COMPRESSION_LZW
LEAF_NODE	1164:18	1164:18	8	COMPRESSION_LZW
LEAF_NODE	1164:33	1164:33	6	)
LEAF_NODE	1164:34	1164:34	4	;
EXPR_STATEMENT	1168:1	1168:61	3	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( LZWCodecState ) ) ;
EXPR	1168:1	1168:1	4	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( LZWCodecState ) )
ASSIGN	1168:1	1168:17	5	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( LZWCodecState ) )
LVAL	1168:1	1168:1	6	tif -> tif_data
FIELD	1168:1	1168:6	7	tif -> tif_data
LEAF_NODE	1168:1	1168:1	8	tif
LEAF_NODE	1168:4	1168:4	8	->
LEAF_NODE	1168:6	1168:6	8	tif_data
ASSIGN_OP	1168:15	1168:15	6	=
LEAF_NODE	1168:15	1168:15	7	=
RVAL	1168:17	1168:26	6	( uint8 * ) _TIFFmalloc ( sizeof ( LZWCodecState ) )
LEAF_NODE	1168:17	1168:17	7	(
TYPE_NAME	1168:18	1168:18	7	uint8
LEAF_NODE	1168:18	1168:18	8	uint8
LEAF_NODE	1168:23	1168:23	7	*
LEAF_NODE	1168:24	1168:24	7	)
FUNCTION_CALL	1168:26	1168:60	7	_TIFFmalloc ( sizeof ( LZWCodecState ) )
CALLEE	1168:26	1168:26	8	_TIFFmalloc
LEAF_NODE	1168:26	1168:26	9	_TIFFmalloc
LEAF_NODE	1168:37	1168:37	8	(
ARGUMENT	1168:38	1168:38	8	sizeof ( LZWCodecState )
FUNCTION_CALL	1168:38	1168:59	9	sizeof ( LZWCodecState )
CALLEE	1168:38	1168:38	10	sizeof
LEAF_NODE	1168:38	1168:38	11	sizeof
LEAF_NODE	1168:45	1168:45	10	(
ARGUMENT	1168:46	1168:46	10	LZWCodecState
FIELD	1168:46	1168:46	11	LZWCodecState
LEAF_NODE	1168:46	1168:46	12	LZWCodecState
LEAF_NODE	1168:59	1168:59	10	)
LEAF_NODE	1168:60	1168:60	8	)
LEAF_NODE	1168:61	1168:61	4	;
SELECTION	1169:1	1170:2	3	
KEYWORD	1169:1	1169:1	4	if
LEAF_NODE	1169:1	1169:1	5	if
LEAF_NODE	1169:4	1169:4	4	(
CONDITION	1169:5	1169:5	4	tif -> tif_data == NULL
EXPR	1169:5	1169:22	5	tif -> tif_data == NULL
FIELD	1169:5	1169:10	6	tif -> tif_data
LEAF_NODE	1169:5	1169:5	7	tif
LEAF_NODE	1169:8	1169:8	7	->
LEAF_NODE	1169:10	1169:10	7	tif_data
EQ_OPERATOR	1169:19	1169:19	6	==
LEAF_NODE	1169:19	1169:19	7	==
FIELD	1169:22	1169:22	6	NULL
LEAF_NODE	1169:22	1169:22	7	NULL
LEAF_NODE	1169:26	1169:26	4	)
STATEMENTS	1170:2	1170:2	4	
JUMP_STATEMENT	1170:2	1170:10	5	goto bad ;
KEYWORD	1170:2	1170:2	6	goto
LEAF_NODE	1170:2	1170:2	7	goto
DESTINATION	1170:7	1170:7	6	bad
LEAF_NODE	1170:7	1170:7	7	bad
LEAF_NODE	1170:10	1170:10	6	;
EXPR_STATEMENT	1171:1	1171:38	3	DecoderState ( tif ) -> dec_codetab = NULL ;
EXPR	1171:1	1171:1	4	DecoderState ( tif ) -> dec_codetab = NULL
ASSIGN	1171:1	1171:34	5	DecoderState ( tif ) -> dec_codetab = NULL
LVAL	1171:1	1171:20	6	DecoderState ( tif ) -> dec_codetab
FUNCTION_CALL	1171:1	1171:17	7	DecoderState ( tif )
CALLEE	1171:1	1171:1	8	DecoderState
LEAF_NODE	1171:1	1171:1	9	DecoderState
LEAF_NODE	1171:13	1171:13	8	(
ARGUMENT	1171:14	1171:14	8	tif
FIELD	1171:14	1171:14	9	tif
LEAF_NODE	1171:14	1171:14	10	tif
LEAF_NODE	1171:17	1171:17	8	)
LEAF_NODE	1171:18	1171:18	7	->
LEAF_NODE	1171:20	1171:20	7	dec_codetab
ASSIGN_OP	1171:32	1171:32	6	=
LEAF_NODE	1171:32	1171:32	7	=
RVAL	1171:34	1171:34	6	NULL
FIELD	1171:34	1171:34	7	NULL
LEAF_NODE	1171:34	1171:34	8	NULL
LEAF_NODE	1171:38	1171:38	4	;
EXPR_STATEMENT	1172:1	1172:37	3	DecoderState ( tif ) -> dec_decode = NULL ;
EXPR	1172:1	1172:1	4	DecoderState ( tif ) -> dec_decode = NULL
ASSIGN	1172:1	1172:33	5	DecoderState ( tif ) -> dec_decode = NULL
LVAL	1172:1	1172:20	6	DecoderState ( tif ) -> dec_decode
FUNCTION_CALL	1172:1	1172:17	7	DecoderState ( tif )
CALLEE	1172:1	1172:1	8	DecoderState
LEAF_NODE	1172:1	1172:1	9	DecoderState
LEAF_NODE	1172:13	1172:13	8	(
ARGUMENT	1172:14	1172:14	8	tif
FIELD	1172:14	1172:14	9	tif
LEAF_NODE	1172:14	1172:14	10	tif
LEAF_NODE	1172:17	1172:17	8	)
LEAF_NODE	1172:18	1172:18	7	->
LEAF_NODE	1172:20	1172:20	7	dec_decode
ASSIGN_OP	1172:31	1172:31	6	=
LEAF_NODE	1172:31	1172:31	7	=
RVAL	1172:33	1172:33	6	NULL
FIELD	1172:33	1172:33	7	NULL
LEAF_NODE	1172:33	1172:33	8	NULL
LEAF_NODE	1172:37	1172:37	4	;
EXPR_STATEMENT	1173:1	1173:38	3	EncoderState ( tif ) -> enc_hashtab = NULL ;
EXPR	1173:1	1173:1	4	EncoderState ( tif ) -> enc_hashtab = NULL
ASSIGN	1173:1	1173:34	5	EncoderState ( tif ) -> enc_hashtab = NULL
LVAL	1173:1	1173:20	6	EncoderState ( tif ) -> enc_hashtab
FUNCTION_CALL	1173:1	1173:17	7	EncoderState ( tif )
CALLEE	1173:1	1173:1	8	EncoderState
LEAF_NODE	1173:1	1173:1	9	EncoderState
LEAF_NODE	1173:13	1173:13	8	(
ARGUMENT	1173:14	1173:14	8	tif
FIELD	1173:14	1173:14	9	tif
LEAF_NODE	1173:14	1173:14	10	tif
LEAF_NODE	1173:17	1173:17	8	)
LEAF_NODE	1173:18	1173:18	7	->
LEAF_NODE	1173:20	1173:20	7	enc_hashtab
ASSIGN_OP	1173:32	1173:32	6	=
LEAF_NODE	1173:32	1173:32	7	=
RVAL	1173:34	1173:34	6	NULL
FIELD	1173:34	1173:34	7	NULL
LEAF_NODE	1173:34	1173:34	8	NULL
LEAF_NODE	1173:38	1173:38	4	;
EXPR_STATEMENT	1174:8	1174:46	3	LZWState ( tif ) -> rw_mode = tif -> tif_mode ;
EXPR	1174:8	1174:8	4	LZWState ( tif ) -> rw_mode = tif -> tif_mode
ASSIGN	1174:8	1174:33	5	LZWState ( tif ) -> rw_mode = tif -> tif_mode
LVAL	1174:8	1174:23	6	LZWState ( tif ) -> rw_mode
FUNCTION_CALL	1174:8	1174:20	7	LZWState ( tif )
CALLEE	1174:8	1174:8	8	LZWState
LEAF_NODE	1174:8	1174:8	9	LZWState
LEAF_NODE	1174:16	1174:16	8	(
ARGUMENT	1174:17	1174:17	8	tif
FIELD	1174:17	1174:17	9	tif
LEAF_NODE	1174:17	1174:17	10	tif
LEAF_NODE	1174:20	1174:20	8	)
LEAF_NODE	1174:21	1174:21	7	->
LEAF_NODE	1174:23	1174:23	7	rw_mode
ASSIGN_OP	1174:31	1174:31	6	=
LEAF_NODE	1174:31	1174:31	7	=
RVAL	1174:33	1174:33	6	tif -> tif_mode
FIELD	1174:33	1174:38	7	tif -> tif_mode
LEAF_NODE	1174:33	1174:33	8	tif
LEAF_NODE	1174:36	1174:36	8	->
LEAF_NODE	1174:38	1174:38	8	tif_mode
LEAF_NODE	1174:46	1174:46	4	;
EXPR_STATEMENT	1179:1	1179:34	3	tif -> tif_fixuptags = LZWFixupTags ;
EXPR	1179:1	1179:1	4	tif -> tif_fixuptags = LZWFixupTags
ASSIGN	1179:1	1179:22	5	tif -> tif_fixuptags = LZWFixupTags
LVAL	1179:1	1179:1	6	tif -> tif_fixuptags
FIELD	1179:1	1179:6	7	tif -> tif_fixuptags
LEAF_NODE	1179:1	1179:1	8	tif
LEAF_NODE	1179:4	1179:4	8	->
LEAF_NODE	1179:6	1179:6	8	tif_fixuptags
ASSIGN_OP	1179:20	1179:20	6	=
LEAF_NODE	1179:20	1179:20	7	=
RVAL	1179:22	1179:22	6	LZWFixupTags
FIELD	1179:22	1179:22	7	LZWFixupTags
LEAF_NODE	1179:22	1179:22	8	LZWFixupTags
LEAF_NODE	1179:34	1179:34	4	;
EXPR_STATEMENT	1180:1	1180:38	3	tif -> tif_setupdecode = LZWSetupDecode ;
EXPR	1180:1	1180:1	4	tif -> tif_setupdecode = LZWSetupDecode
ASSIGN	1180:1	1180:24	5	tif -> tif_setupdecode = LZWSetupDecode
LVAL	1180:1	1180:1	6	tif -> tif_setupdecode
FIELD	1180:1	1180:6	7	tif -> tif_setupdecode
LEAF_NODE	1180:1	1180:1	8	tif
LEAF_NODE	1180:4	1180:4	8	->
LEAF_NODE	1180:6	1180:6	8	tif_setupdecode
ASSIGN_OP	1180:22	1180:22	6	=
LEAF_NODE	1180:22	1180:22	7	=
RVAL	1180:24	1180:24	6	LZWSetupDecode
FIELD	1180:24	1180:24	7	LZWSetupDecode
LEAF_NODE	1180:24	1180:24	8	LZWSetupDecode
LEAF_NODE	1180:38	1180:38	4	;
EXPR_STATEMENT	1181:1	1181:34	3	tif -> tif_predecode = LZWPreDecode ;
EXPR	1181:1	1181:1	4	tif -> tif_predecode = LZWPreDecode
ASSIGN	1181:1	1181:22	5	tif -> tif_predecode = LZWPreDecode
LVAL	1181:1	1181:1	6	tif -> tif_predecode
FIELD	1181:1	1181:6	7	tif -> tif_predecode
LEAF_NODE	1181:1	1181:1	8	tif
LEAF_NODE	1181:4	1181:4	8	->
LEAF_NODE	1181:6	1181:6	8	tif_predecode
ASSIGN_OP	1181:20	1181:20	6	=
LEAF_NODE	1181:20	1181:20	7	=
RVAL	1181:22	1181:22	6	LZWPreDecode
FIELD	1181:22	1181:22	7	LZWPreDecode
LEAF_NODE	1181:22	1181:22	8	LZWPreDecode
LEAF_NODE	1181:34	1181:34	4	;
EXPR_STATEMENT	1182:1	1182:31	3	tif -> tif_decoderow = LZWDecode ;
EXPR	1182:1	1182:1	4	tif -> tif_decoderow = LZWDecode
ASSIGN	1182:1	1182:22	5	tif -> tif_decoderow = LZWDecode
LVAL	1182:1	1182:1	6	tif -> tif_decoderow
FIELD	1182:1	1182:6	7	tif -> tif_decoderow
LEAF_NODE	1182:1	1182:1	8	tif
LEAF_NODE	1182:4	1182:4	8	->
LEAF_NODE	1182:6	1182:6	8	tif_decoderow
ASSIGN_OP	1182:20	1182:20	6	=
LEAF_NODE	1182:20	1182:20	7	=
RVAL	1182:22	1182:22	6	LZWDecode
FIELD	1182:22	1182:22	7	LZWDecode
LEAF_NODE	1182:22	1182:22	8	LZWDecode
LEAF_NODE	1182:31	1182:31	4	;
EXPR_STATEMENT	1183:1	1183:33	3	tif -> tif_decodestrip = LZWDecode ;
EXPR	1183:1	1183:1	4	tif -> tif_decodestrip = LZWDecode
ASSIGN	1183:1	1183:24	5	tif -> tif_decodestrip = LZWDecode
LVAL	1183:1	1183:1	6	tif -> tif_decodestrip
FIELD	1183:1	1183:6	7	tif -> tif_decodestrip
LEAF_NODE	1183:1	1183:1	8	tif
LEAF_NODE	1183:4	1183:4	8	->
LEAF_NODE	1183:6	1183:6	8	tif_decodestrip
ASSIGN_OP	1183:22	1183:22	6	=
LEAF_NODE	1183:22	1183:22	7	=
RVAL	1183:24	1183:24	6	LZWDecode
FIELD	1183:24	1183:24	7	LZWDecode
LEAF_NODE	1183:24	1183:24	8	LZWDecode
LEAF_NODE	1183:33	1183:33	4	;
EXPR_STATEMENT	1184:1	1184:32	3	tif -> tif_decodetile = LZWDecode ;
EXPR	1184:1	1184:1	4	tif -> tif_decodetile = LZWDecode
ASSIGN	1184:1	1184:23	5	tif -> tif_decodetile = LZWDecode
LVAL	1184:1	1184:1	6	tif -> tif_decodetile
FIELD	1184:1	1184:6	7	tif -> tif_decodetile
LEAF_NODE	1184:1	1184:1	8	tif
LEAF_NODE	1184:4	1184:4	8	->
LEAF_NODE	1184:6	1184:6	8	tif_decodetile
ASSIGN_OP	1184:21	1184:21	6	=
LEAF_NODE	1184:21	1184:21	7	=
RVAL	1184:23	1184:23	6	LZWDecode
FIELD	1184:23	1184:23	7	LZWDecode
LEAF_NODE	1184:23	1184:23	8	LZWDecode
LEAF_NODE	1184:32	1184:32	4	;
EXPR_STATEMENT	1185:1	1185:38	3	tif -> tif_setupencode = LZWSetupEncode ;
EXPR	1185:1	1185:1	4	tif -> tif_setupencode = LZWSetupEncode
ASSIGN	1185:1	1185:24	5	tif -> tif_setupencode = LZWSetupEncode
LVAL	1185:1	1185:1	6	tif -> tif_setupencode
FIELD	1185:1	1185:6	7	tif -> tif_setupencode
LEAF_NODE	1185:1	1185:1	8	tif
LEAF_NODE	1185:4	1185:4	8	->
LEAF_NODE	1185:6	1185:6	8	tif_setupencode
ASSIGN_OP	1185:22	1185:22	6	=
LEAF_NODE	1185:22	1185:22	7	=
RVAL	1185:24	1185:24	6	LZWSetupEncode
FIELD	1185:24	1185:24	7	LZWSetupEncode
LEAF_NODE	1185:24	1185:24	8	LZWSetupEncode
LEAF_NODE	1185:38	1185:38	4	;
EXPR_STATEMENT	1186:1	1186:34	3	tif -> tif_preencode = LZWPreEncode ;
EXPR	1186:1	1186:1	4	tif -> tif_preencode = LZWPreEncode
ASSIGN	1186:1	1186:22	5	tif -> tif_preencode = LZWPreEncode
LVAL	1186:1	1186:1	6	tif -> tif_preencode
FIELD	1186:1	1186:6	7	tif -> tif_preencode
LEAF_NODE	1186:1	1186:1	8	tif
LEAF_NODE	1186:4	1186:4	8	->
LEAF_NODE	1186:6	1186:6	8	tif_preencode
ASSIGN_OP	1186:20	1186:20	6	=
LEAF_NODE	1186:20	1186:20	7	=
RVAL	1186:22	1186:22	6	LZWPreEncode
FIELD	1186:22	1186:22	7	LZWPreEncode
LEAF_NODE	1186:22	1186:22	8	LZWPreEncode
LEAF_NODE	1186:34	1186:34	4	;
EXPR_STATEMENT	1187:1	1187:36	3	tif -> tif_postencode = LZWPostEncode ;
EXPR	1187:1	1187:1	4	tif -> tif_postencode = LZWPostEncode
ASSIGN	1187:1	1187:23	5	tif -> tif_postencode = LZWPostEncode
LVAL	1187:1	1187:1	6	tif -> tif_postencode
FIELD	1187:1	1187:6	7	tif -> tif_postencode
LEAF_NODE	1187:1	1187:1	8	tif
LEAF_NODE	1187:4	1187:4	8	->
LEAF_NODE	1187:6	1187:6	8	tif_postencode
ASSIGN_OP	1187:21	1187:21	6	=
LEAF_NODE	1187:21	1187:21	7	=
RVAL	1187:23	1187:23	6	LZWPostEncode
FIELD	1187:23	1187:23	7	LZWPostEncode
LEAF_NODE	1187:23	1187:23	8	LZWPostEncode
LEAF_NODE	1187:36	1187:36	4	;
EXPR_STATEMENT	1188:1	1188:31	3	tif -> tif_encoderow = LZWEncode ;
EXPR	1188:1	1188:1	4	tif -> tif_encoderow = LZWEncode
ASSIGN	1188:1	1188:22	5	tif -> tif_encoderow = LZWEncode
LVAL	1188:1	1188:1	6	tif -> tif_encoderow
FIELD	1188:1	1188:6	7	tif -> tif_encoderow
LEAF_NODE	1188:1	1188:1	8	tif
LEAF_NODE	1188:4	1188:4	8	->
LEAF_NODE	1188:6	1188:6	8	tif_encoderow
ASSIGN_OP	1188:20	1188:20	6	=
LEAF_NODE	1188:20	1188:20	7	=
RVAL	1188:22	1188:22	6	LZWEncode
FIELD	1188:22	1188:22	7	LZWEncode
LEAF_NODE	1188:22	1188:22	8	LZWEncode
LEAF_NODE	1188:31	1188:31	4	;
EXPR_STATEMENT	1189:1	1189:33	3	tif -> tif_encodestrip = LZWEncode ;
EXPR	1189:1	1189:1	4	tif -> tif_encodestrip = LZWEncode
ASSIGN	1189:1	1189:24	5	tif -> tif_encodestrip = LZWEncode
LVAL	1189:1	1189:1	6	tif -> tif_encodestrip
FIELD	1189:1	1189:6	7	tif -> tif_encodestrip
LEAF_NODE	1189:1	1189:1	8	tif
LEAF_NODE	1189:4	1189:4	8	->
LEAF_NODE	1189:6	1189:6	8	tif_encodestrip
ASSIGN_OP	1189:22	1189:22	6	=
LEAF_NODE	1189:22	1189:22	7	=
RVAL	1189:24	1189:24	6	LZWEncode
FIELD	1189:24	1189:24	7	LZWEncode
LEAF_NODE	1189:24	1189:24	8	LZWEncode
LEAF_NODE	1189:33	1189:33	4	;
EXPR_STATEMENT	1190:1	1190:32	3	tif -> tif_encodetile = LZWEncode ;
EXPR	1190:1	1190:1	4	tif -> tif_encodetile = LZWEncode
ASSIGN	1190:1	1190:23	5	tif -> tif_encodetile = LZWEncode
LVAL	1190:1	1190:1	6	tif -> tif_encodetile
FIELD	1190:1	1190:6	7	tif -> tif_encodetile
LEAF_NODE	1190:1	1190:1	8	tif
LEAF_NODE	1190:4	1190:4	8	->
LEAF_NODE	1190:6	1190:6	8	tif_encodetile
ASSIGN_OP	1190:21	1190:21	6	=
LEAF_NODE	1190:21	1190:21	7	=
RVAL	1190:23	1190:23	6	LZWEncode
FIELD	1190:23	1190:23	7	LZWEncode
LEAF_NODE	1190:23	1190:23	8	LZWEncode
LEAF_NODE	1190:32	1190:32	4	;
EXPR_STATEMENT	1191:1	1191:30	3	tif -> tif_cleanup = LZWCleanup ;
EXPR	1191:1	1191:1	4	tif -> tif_cleanup = LZWCleanup
ASSIGN	1191:1	1191:20	5	tif -> tif_cleanup = LZWCleanup
LVAL	1191:1	1191:1	6	tif -> tif_cleanup
FIELD	1191:1	1191:6	7	tif -> tif_cleanup
LEAF_NODE	1191:1	1191:1	8	tif
LEAF_NODE	1191:4	1191:4	8	->
LEAF_NODE	1191:6	1191:6	8	tif_cleanup
ASSIGN_OP	1191:18	1191:18	6	=
LEAF_NODE	1191:18	1191:18	7	=
RVAL	1191:20	1191:20	6	LZWCleanup
FIELD	1191:20	1191:20	7	LZWCleanup
LEAF_NODE	1191:20	1191:20	8	LZWCleanup
LEAF_NODE	1191:30	1191:30	4	;
EXPR_STATEMENT	1195:1	1195:30	3	( void ) TIFFPredictorInit ( tif ) ;
EXPR	1195:1	1195:8	4	( void ) TIFFPredictorInit ( tif )
LEAF_NODE	1195:1	1195:1	5	(
TYPE_NAME	1195:2	1195:2	5	void
LEAF_NODE	1195:2	1195:2	6	void
LEAF_NODE	1195:6	1195:6	5	)
FUNCTION_CALL	1195:8	1195:29	5	TIFFPredictorInit ( tif )
CALLEE	1195:8	1195:8	6	TIFFPredictorInit
LEAF_NODE	1195:8	1195:8	7	TIFFPredictorInit
LEAF_NODE	1195:25	1195:25	6	(
ARGUMENT	1195:26	1195:26	6	tif
FIELD	1195:26	1195:26	7	tif
LEAF_NODE	1195:26	1195:26	8	tif
LEAF_NODE	1195:29	1195:29	6	)
LEAF_NODE	1195:30	1195:30	4	;
JUMP_STATEMENT	1196:1	1196:11	3	return ( 1 ) ;
KEYWORD	1196:1	1196:1	4	return
LEAF_NODE	1196:1	1196:1	5	return
DESTINATION	1196:8	1196:8	4	( 1 )
EXPR	1196:8	1196:10	5	( 1 )
LEAF_NODE	1196:8	1196:8	6	(
FIELD	1196:9	1196:9	6	1
LEAF_NODE	1196:9	1196:9	7	1
LEAF_NODE	1196:10	1196:10	6	)
LEAF_NODE	1196:11	1196:11	4	;
LABEL	1197:0	1197:3	3	bad :
LEAF_NODE	1197:0	1197:0	4	bad
LEAF_NODE	1197:3	1197:3	4	:
EXPR_STATEMENT	1198:1	1199:38	3	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW state block" ) ;
EXPR	1198:1	1198:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW state block" )
FUNCTION_CALL	1198:1	1199:37	5	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for LZW state block" )
CALLEE	1198:1	1198:1	6	TIFFErrorExt
LEAF_NODE	1198:1	1198:1	7	TIFFErrorExt
LEAF_NODE	1198:13	1198:13	6	(
ARGUMENT	1198:14	1198:14	6	tif -> tif_clientdata
FIELD	1198:14	1198:19	7	tif -> tif_clientdata
LEAF_NODE	1198:14	1198:14	8	tif
LEAF_NODE	1198:17	1198:17	8	->
LEAF_NODE	1198:19	1198:19	8	tif_clientdata
LEAF_NODE	1198:33	1198:33	6	,
ARGUMENT	1198:35	1198:35	6	module
FIELD	1198:35	1198:35	7	module
LEAF_NODE	1198:35	1198:35	8	module
LEAF_NODE	1198:41	1198:41	6	,
ARGUMENT	1199:7	1199:7	6	"No space for LZW state block"
FIELD	1199:7	1199:7	7	"No space for LZW state block"
LEAF_NODE	1199:7	1199:7	8	"No space for LZW state block"
LEAF_NODE	1199:37	1199:37	6	)
LEAF_NODE	1199:38	1199:38	4	;
JUMP_STATEMENT	1200:1	1200:11	3	return ( 0 ) ;
KEYWORD	1200:1	1200:1	4	return
LEAF_NODE	1200:1	1200:1	5	return
DESTINATION	1200:8	1200:8	4	( 0 )
EXPR	1200:8	1200:10	5	( 0 )
LEAF_NODE	1200:8	1200:8	6	(
FIELD	1200:9	1200:9	6	0
LEAF_NODE	1200:9	1200:9	7	0
LEAF_NODE	1200:10	1200:10	6	)
LEAF_NODE	1200:11	1200:11	4	;
LEAF_NODE	1201:0	1201:0	2	}
