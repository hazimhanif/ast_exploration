SOURCE_FILE	51:0	547:0	0	
SIMPLE_DECL	51:0	51:41	1	uint16 compression ; compression = COMPRESSION_PACKBITS ;
VAR_DECL	51:0	51:7	2	uint16 compression ; compression = COMPRESSION_PACKBITS
TYPE	51:0	51:0	3	uint16
TYPE_NAME	51:0	51:0	4	uint16
LEAF_NODE	51:0	51:0	5	uint16
NAME	51:7	51:7	3	compression
LEAF_NODE	51:7	51:7	4	compression
LEAF_NODE	0:0	0:0	3	;
INIT	51:7	51:7	3	compression = COMPRESSION_PACKBITS
ASSIGN	51:7	51:21	4	compression = COMPRESSION_PACKBITS
LVAL	51:7	51:7	5	compression
NAME	51:7	51:7	6	compression
LEAF_NODE	51:7	51:7	7	compression
ASSIGN_OP	51:19	51:19	5	=
LEAF_NODE	51:19	51:19	6	=
RVAL	51:21	51:21	5	COMPRESSION_PACKBITS
FIELD	51:21	51:21	6	COMPRESSION_PACKBITS
LEAF_NODE	51:21	51:21	7	COMPRESSION_PACKBITS
LEAF_NODE	51:41	51:41	2	;
SIMPLE_DECL	52:0	52:33	1	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	52:0	52:7	2	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	52:0	52:0	3	uint32
TYPE_NAME	52:0	52:0	4	uint32
LEAF_NODE	52:0	52:0	5	uint32
NAME	52:7	52:7	3	rowsperstrip
LEAF_NODE	52:7	52:7	4	rowsperstrip
LEAF_NODE	0:0	0:0	3	;
INIT	52:7	52:7	3	rowsperstrip = ( uint32 ) - 1
ASSIGN	52:7	52:22	4	rowsperstrip = ( uint32 ) - 1
LVAL	52:7	52:7	5	rowsperstrip
NAME	52:7	52:7	6	rowsperstrip
LEAF_NODE	52:7	52:7	7	rowsperstrip
ASSIGN_OP	52:20	52:20	5	=
LEAF_NODE	52:20	52:20	6	=
RVAL	52:22	52:31	5	( uint32 ) - 1
LEAF_NODE	52:22	52:22	6	(
TYPE_NAME	52:23	52:23	6	uint32
LEAF_NODE	52:23	52:23	7	uint32
LEAF_NODE	52:29	52:29	6	)
UNARY_EXPR	52:31	52:32	6	- 1
UNARY_OPERATOR	52:31	52:31	7	-
LEAF_NODE	52:31	52:31	8	-
FIELD	52:32	52:32	7	1
LEAF_NODE	52:32	52:32	8	1
LEAF_NODE	52:33	52:33	2	;
SIMPLE_DECL	53:0	53:24	1	int process_by_block ; process_by_block = 0 ;
VAR_DECL	53:0	53:4	2	int process_by_block ; process_by_block = 0
TYPE	53:0	53:0	3	int
TYPE_NAME	53:0	53:0	4	int
LEAF_NODE	53:0	53:0	5	int
NAME	53:4	53:4	3	process_by_block
LEAF_NODE	53:4	53:4	4	process_by_block
LEAF_NODE	0:0	0:0	3	;
INIT	53:4	53:4	3	process_by_block = 0
ASSIGN	53:4	53:23	4	process_by_block = 0
LVAL	53:4	53:4	5	process_by_block
NAME	53:4	53:4	6	process_by_block
LEAF_NODE	53:4	53:4	7	process_by_block
ASSIGN_OP	53:21	53:21	5	=
LEAF_NODE	53:21	53:21	6	=
RVAL	53:23	53:23	5	0
FIELD	53:23	53:23	6	0
LEAF_NODE	53:23	53:23	7	0
LEAF_NODE	53:24	53:24	2	;
SIMPLE_DECL	54:0	54:16	1	int no_alpha ; no_alpha = 0 ;
VAR_DECL	54:0	54:4	2	int no_alpha ; no_alpha = 0
TYPE	54:0	54:0	3	int
TYPE_NAME	54:0	54:0	4	int
LEAF_NODE	54:0	54:0	5	int
NAME	54:4	54:4	3	no_alpha
LEAF_NODE	54:4	54:4	4	no_alpha
LEAF_NODE	0:0	0:0	3	;
INIT	54:4	54:4	3	no_alpha = 0
ASSIGN	54:4	54:15	4	no_alpha = 0
LVAL	54:4	54:4	5	no_alpha
NAME	54:4	54:4	6	no_alpha
LEAF_NODE	54:4	54:4	7	no_alpha
ASSIGN_OP	54:13	54:13	5	=
LEAF_NODE	54:13	54:13	6	=
RVAL	54:15	54:15	5	0
FIELD	54:15	54:15	6	0
LEAF_NODE	54:15	54:15	7	0
LEAF_NODE	54:16	54:16	2	;
SIMPLE_DECL	55:0	55:22	1	int bigtiff_output ; bigtiff_output = 0 ;
VAR_DECL	55:0	55:4	2	int bigtiff_output ; bigtiff_output = 0
TYPE	55:0	55:0	3	int
TYPE_NAME	55:0	55:0	4	int
LEAF_NODE	55:0	55:0	5	int
NAME	55:4	55:4	3	bigtiff_output
LEAF_NODE	55:4	55:4	4	bigtiff_output
LEAF_NODE	0:0	0:0	3	;
INIT	55:4	55:4	3	bigtiff_output = 0
ASSIGN	55:4	55:21	4	bigtiff_output = 0
LVAL	55:4	55:4	5	bigtiff_output
NAME	55:4	55:4	6	bigtiff_output
LEAF_NODE	55:4	55:4	7	bigtiff_output
ASSIGN_OP	55:19	55:19	5	=
LEAF_NODE	55:19	55:19	6	=
RVAL	55:21	55:21	5	0
FIELD	55:21	55:21	6	0
LEAF_NODE	55:21	55:21	7	0
LEAF_NODE	55:22	55:22	2	;
SIMPLE_DECL	58:7	58:39	1	int tiffcvt ; tiffcvt tiffcvt ( TIFF * in , TIFF * out ) ;
VAR_DECL	58:7	58:11	2	int tiffcvt ; tiffcvt tiffcvt ( TIFF * in , TIFF * out )
TYPE	58:7	58:7	3	int
TYPE_NAME	58:7	58:7	4	int
LEAF_NODE	58:7	58:7	5	int
NAME	58:11	58:11	3	tiffcvt
LEAF_NODE	58:11	58:11	4	tiffcvt
LEAF_NODE	0:0	0:0	3	;
INIT	58:11	58:11	3	tiffcvt tiffcvt ( TIFF * in , TIFF * out )
ASSIGN	58:11	58:18	4	tiffcvt tiffcvt ( TIFF * in , TIFF * out )
LVAL	58:11	58:11	5	tiffcvt
NAME	58:11	58:11	6	tiffcvt
LEAF_NODE	58:11	58:11	7	tiffcvt
ASSIGN_OP	58:11	58:11	5	tiffcvt
NAME	58:11	58:11	6	tiffcvt
LEAF_NODE	58:11	58:11	7	tiffcvt
RVAL	58:18	58:38	5	( TIFF * in , TIFF * out )
LEAF_NODE	58:18	58:18	6	(
EXPR	58:19	58:35	6	TIFF * in , TIFF * out
FIELD	58:19	58:19	7	TIFF
LEAF_NODE	58:19	58:19	8	TIFF
LEAF_NODE	58:23	58:23	7	*
FIELD	58:25	58:25	7	in
LEAF_NODE	58:25	58:25	8	in
LEAF_NODE	58:27	58:27	7	,
FIELD	58:29	58:29	7	TIFF
LEAF_NODE	58:29	58:29	8	TIFF
LEAF_NODE	58:33	58:33	7	*
FIELD	58:35	58:35	7	out
LEAF_NODE	58:35	58:35	8	out
LEAF_NODE	58:38	58:38	6	)
LEAF_NODE	58:39	58:39	2	;
FUNCTION_DEF	61:0	136:0	1	
RETURN_TYPE	61:0	61:0	2	int
TYPE_NAME	61:0	61:0	3	int
LEAF_NODE	61:0	61:0	4	int
FUNCTION_NAME	62:0	62:0	2	main
LEAF_NODE	62:0	62:0	3	main
PARAMETER_LIST	62:4	62:27	2	( int argc , char * [ ] argv )
LEAF_NODE	62:4	62:4	3	(
PARAMETER_DECL	62:5	62:9	3	int argc
TYPE	62:5	62:5	4	int
TYPE_NAME	62:5	62:5	5	int
LEAF_NODE	62:5	62:5	6	int
NAME	62:9	62:9	4	argc
LEAF_NODE	62:9	62:9	5	argc
LEAF_NODE	62:13	62:13	3	,
PARAMETER_DECL	62:15	62:21	3	char * [ ] argv
TYPE	62:15	62:25	4	char * [ ]
TYPE_NAME	62:15	62:15	5	char
LEAF_NODE	62:15	62:15	6	char
POINTER	62:19	62:19	5	*
LEAF_NODE	62:19	62:19	6	*
TYPE_SUFFIX	62:25	62:26	5	[ ]
LEAF_NODE	62:25	62:25	6	[
LEAF_NODE	62:26	62:26	6	]
NAME	62:21	62:21	4	argv
LEAF_NODE	62:21	62:21	5	argv
LEAF_NODE	62:27	62:27	3	)
LEAF_NODE	63:0	63:0	2	{
STATEMENTS	64:1	135:1	2	
SIMPLE_DECL	64:1	64:15	3	TIFF * in , TIFF * out ;
INIT_DECL_LIST	64:1	64:1	4	TIFF * in , TIFF * out
VAR_DECL	64:1	64:7	5	TIFF * in
TYPE	64:1	64:6	6	TIFF *
TYPE_NAME	64:1	64:1	7	TIFF
LEAF_NODE	64:1	64:1	8	TIFF
POINTER	64:6	64:6	7	*
LEAF_NODE	64:6	64:6	8	*
NAME	64:7	64:7	6	in
LEAF_NODE	64:7	64:7	7	in
LEAF_NODE	64:9	64:9	5	,
VAR_DECL	64:1	64:12	5	TIFF * out
TYPE	64:1	64:11	6	TIFF *
TYPE_NAME	64:1	64:1	7	TIFF
LEAF_NODE	64:1	64:1	8	TIFF
POINTER	64:11	64:11	7	*
LEAF_NODE	64:11	64:11	8	*
NAME	64:12	64:12	6	out
LEAF_NODE	64:12	64:12	7	out
LEAF_NODE	64:15	64:15	4	;
SIMPLE_DECL	65:1	65:6	3	int c ;
VAR_DECL	65:1	65:5	4	int c
TYPE	65:1	65:1	5	int
TYPE_NAME	65:1	65:1	6	int
LEAF_NODE	65:1	65:1	7	int
NAME	65:5	65:5	5	c
LEAF_NODE	65:5	65:5	6	c
LEAF_NODE	65:6	65:6	4	;
LEAF_NODE	67:1	67:1	3	extern
SIMPLE_DECL	67:8	67:18	3	int optind ;
VAR_DECL	67:8	67:12	4	int optind
TYPE	67:8	67:8	5	int
TYPE_NAME	67:8	67:8	6	int
LEAF_NODE	67:8	67:8	7	int
NAME	67:12	67:12	5	optind
LEAF_NODE	67:12	67:12	6	optind
LEAF_NODE	67:18	67:18	4	;
LEAF_NODE	68:1	68:1	3	extern
SIMPLE_DECL	68:8	68:20	3	char * optarg ;
VAR_DECL	68:8	68:14	4	char * optarg
TYPE	68:8	68:13	5	char *
TYPE_NAME	68:8	68:8	6	char
LEAF_NODE	68:8	68:8	7	char
POINTER	68:13	68:13	6	*
LEAF_NODE	68:13	68:13	7	*
NAME	68:14	68:14	5	optarg
LEAF_NODE	68:14	68:14	6	optarg
LEAF_NODE	68:20	68:20	4	;
ITERATION	71:1	72:2	3	
KEYWORD	71:1	71:1	4	while
LEAF_NODE	71:1	71:1	5	while
LEAF_NODE	71:7	71:7	4	(
CONDITION	71:8	71:8	4	( c = getopt ( argc , argv , "c:r:t:bn8" ) ) != - 1
EXPR	71:8	71:49	5	( c = getopt ( argc , argv , "c:r:t:bn8" ) ) != - 1
LEAF_NODE	71:8	71:8	6	(
ASSIGN	71:9	71:13	6	c = getopt ( argc , argv , "c:r:t:bn8" )
LVAL	71:9	71:9	7	c
FIELD	71:9	71:9	8	c
LEAF_NODE	71:9	71:9	9	c
ASSIGN_OP	71:11	71:11	7	=
LEAF_NODE	71:11	71:11	8	=
RVAL	71:13	71:13	7	getopt ( argc , argv , "c:r:t:bn8" )
FUNCTION_CALL	71:13	71:43	8	getopt ( argc , argv , "c:r:t:bn8" )
CALLEE	71:13	71:13	9	getopt
LEAF_NODE	71:13	71:13	10	getopt
LEAF_NODE	71:19	71:19	9	(
ARGUMENT	71:20	71:20	9	argc
FIELD	71:20	71:20	10	argc
LEAF_NODE	71:20	71:20	11	argc
LEAF_NODE	71:24	71:24	9	,
ARGUMENT	71:26	71:26	9	argv
FIELD	71:26	71:26	10	argv
LEAF_NODE	71:26	71:26	11	argv
LEAF_NODE	71:30	71:30	9	,
ARGUMENT	71:32	71:32	9	"c:r:t:bn8"
FIELD	71:32	71:32	10	"c:r:t:bn8"
LEAF_NODE	71:32	71:32	11	"c:r:t:bn8"
LEAF_NODE	71:43	71:43	9	)
LEAF_NODE	71:44	71:44	6	)
EQ_OPERATOR	71:46	71:46	6	!=
LEAF_NODE	71:46	71:46	7	!=
UNARY_EXPR	71:49	71:50	6	- 1
UNARY_OPERATOR	71:49	71:49	7	-
LEAF_NODE	71:49	71:49	8	-
FIELD	71:50	71:50	7	1
LEAF_NODE	71:50	71:50	8	1
LEAF_NODE	71:51	71:51	4	)
STATEMENTS	72:2	72:2	4	
SELECTION	72:2	72:13	5	
KEYWORD	72:2	72:2	6	switch
LEAF_NODE	72:2	72:2	7	switch
LEAF_NODE	72:9	72:9	6	(
CONDITION	72:10	72:10	6	c
EXPR	72:10	72:10	7	c
FIELD	72:10	72:10	8	c
LEAF_NODE	72:10	72:10	9	c
LEAF_NODE	72:11	72:11	6	)
STATEMENTS	72:13	111:2	6	
LEAF_NODE	72:13	72:13	7	{
STATEMENTS	73:3	109:4	7	
LEAF_NODE	73:3	73:3	8	case
LEAF_NODE	73:8	73:8	8	'b'
LEAF_NODE	73:11	73:11	8	:
EXPR_STATEMENT	74:4	74:24	8	process_by_block = 1 ;
EXPR	74:4	74:4	9	process_by_block = 1
ASSIGN	74:4	74:23	10	process_by_block = 1
LVAL	74:4	74:4	11	process_by_block
FIELD	74:4	74:4	12	process_by_block
LEAF_NODE	74:4	74:4	13	process_by_block
ASSIGN_OP	74:21	74:21	11	=
LEAF_NODE	74:21	74:21	12	=
RVAL	74:23	74:23	11	1
FIELD	74:23	74:23	12	1
LEAF_NODE	74:23	74:23	13	1
LEAF_NODE	74:24	74:24	9	;
JUMP_STATEMENT	75:4	75:9	8	break DESTINATION ;
KEYWORD	75:4	75:4	9	break
LEAF_NODE	75:4	75:4	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	75:9	75:9	9	;
LEAF_NODE	77:3	77:3	8	case
LEAF_NODE	77:8	77:8	8	'c'
LEAF_NODE	77:11	77:11	8	:
SELECTION	78:4	79:5	8	
KEYWORD	78:4	78:4	9	if
LEAF_NODE	78:4	78:4	10	if
LEAF_NODE	78:7	78:7	9	(
CONDITION	78:8	78:8	9	streq ( optarg , "none" )
EXPR	78:8	78:8	10	streq ( optarg , "none" )
FUNCTION_CALL	78:8	78:28	11	streq ( optarg , "none" )
CALLEE	78:8	78:8	12	streq
LEAF_NODE	78:8	78:8	13	streq
LEAF_NODE	78:13	78:13	12	(
ARGUMENT	78:14	78:14	12	optarg
FIELD	78:14	78:14	13	optarg
LEAF_NODE	78:14	78:14	14	optarg
LEAF_NODE	78:20	78:20	12	,
ARGUMENT	78:22	78:22	12	"none"
FIELD	78:22	78:22	13	"none"
LEAF_NODE	78:22	78:22	14	"none"
LEAF_NODE	78:28	78:28	12	)
LEAF_NODE	78:29	78:29	9	)
STATEMENTS	79:5	79:5	9	
EXPR_STATEMENT	79:5	79:35	10	compression = COMPRESSION_NONE ;
EXPR	79:5	79:5	11	compression = COMPRESSION_NONE
ASSIGN	79:5	79:19	12	compression = COMPRESSION_NONE
LVAL	79:5	79:5	13	compression
FIELD	79:5	79:5	14	compression
LEAF_NODE	79:5	79:5	15	compression
ASSIGN_OP	79:17	79:17	13	=
LEAF_NODE	79:17	79:17	14	=
RVAL	79:19	79:19	13	COMPRESSION_NONE
FIELD	79:19	79:19	14	COMPRESSION_NONE
LEAF_NODE	79:19	79:19	15	COMPRESSION_NONE
LEAF_NODE	79:35	79:35	11	;
SELECTION	80:4	80:9	8	
KEYWORD	80:4	80:4	9	else
LEAF_NODE	80:4	80:4	10	else
STATEMENTS	80:9	80:9	9	
SELECTION	80:9	81:5	10	
KEYWORD	80:9	80:9	11	if
LEAF_NODE	80:9	80:9	12	if
LEAF_NODE	80:12	80:12	11	(
CONDITION	80:13	80:13	11	streq ( optarg , "packbits" )
EXPR	80:13	80:13	12	streq ( optarg , "packbits" )
FUNCTION_CALL	80:13	80:37	13	streq ( optarg , "packbits" )
CALLEE	80:13	80:13	14	streq
LEAF_NODE	80:13	80:13	15	streq
LEAF_NODE	80:18	80:18	14	(
ARGUMENT	80:19	80:19	14	optarg
FIELD	80:19	80:19	15	optarg
LEAF_NODE	80:19	80:19	16	optarg
LEAF_NODE	80:25	80:25	14	,
ARGUMENT	80:27	80:27	14	"packbits"
FIELD	80:27	80:27	15	"packbits"
LEAF_NODE	80:27	80:27	16	"packbits"
LEAF_NODE	80:37	80:37	14	)
LEAF_NODE	80:38	80:38	11	)
STATEMENTS	81:5	81:5	11	
EXPR_STATEMENT	81:5	81:39	12	compression = COMPRESSION_PACKBITS ;
EXPR	81:5	81:5	13	compression = COMPRESSION_PACKBITS
ASSIGN	81:5	81:19	14	compression = COMPRESSION_PACKBITS
LVAL	81:5	81:5	15	compression
FIELD	81:5	81:5	16	compression
LEAF_NODE	81:5	81:5	17	compression
ASSIGN_OP	81:17	81:17	15	=
LEAF_NODE	81:17	81:17	16	=
RVAL	81:19	81:19	15	COMPRESSION_PACKBITS
FIELD	81:19	81:19	16	COMPRESSION_PACKBITS
LEAF_NODE	81:19	81:19	17	COMPRESSION_PACKBITS
LEAF_NODE	81:39	81:39	13	;
SELECTION	82:4	82:9	8	
KEYWORD	82:4	82:4	9	else
LEAF_NODE	82:4	82:4	10	else
STATEMENTS	82:9	82:9	9	
SELECTION	82:9	83:5	10	
KEYWORD	82:9	82:9	11	if
LEAF_NODE	82:9	82:9	12	if
LEAF_NODE	82:12	82:12	11	(
CONDITION	82:13	82:13	11	streq ( optarg , "lzw" )
EXPR	82:13	82:13	12	streq ( optarg , "lzw" )
FUNCTION_CALL	82:13	82:32	13	streq ( optarg , "lzw" )
CALLEE	82:13	82:13	14	streq
LEAF_NODE	82:13	82:13	15	streq
LEAF_NODE	82:18	82:18	14	(
ARGUMENT	82:19	82:19	14	optarg
FIELD	82:19	82:19	15	optarg
LEAF_NODE	82:19	82:19	16	optarg
LEAF_NODE	82:25	82:25	14	,
ARGUMENT	82:27	82:27	14	"lzw"
FIELD	82:27	82:27	15	"lzw"
LEAF_NODE	82:27	82:27	16	"lzw"
LEAF_NODE	82:32	82:32	14	)
LEAF_NODE	82:33	82:33	11	)
STATEMENTS	83:5	83:5	11	
EXPR_STATEMENT	83:5	83:34	12	compression = COMPRESSION_LZW ;
EXPR	83:5	83:5	13	compression = COMPRESSION_LZW
ASSIGN	83:5	83:19	14	compression = COMPRESSION_LZW
LVAL	83:5	83:5	15	compression
FIELD	83:5	83:5	16	compression
LEAF_NODE	83:5	83:5	17	compression
ASSIGN_OP	83:17	83:17	15	=
LEAF_NODE	83:17	83:17	16	=
RVAL	83:19	83:19	15	COMPRESSION_LZW
FIELD	83:19	83:19	16	COMPRESSION_LZW
LEAF_NODE	83:19	83:19	17	COMPRESSION_LZW
LEAF_NODE	83:34	83:34	13	;
SELECTION	84:4	84:9	8	
KEYWORD	84:4	84:4	9	else
LEAF_NODE	84:4	84:4	10	else
STATEMENTS	84:9	84:9	9	
SELECTION	84:9	85:5	10	
KEYWORD	84:9	84:9	11	if
LEAF_NODE	84:9	84:9	12	if
LEAF_NODE	84:12	84:12	11	(
CONDITION	84:13	84:13	11	streq ( optarg , "jpeg" )
EXPR	84:13	84:13	12	streq ( optarg , "jpeg" )
FUNCTION_CALL	84:13	84:33	13	streq ( optarg , "jpeg" )
CALLEE	84:13	84:13	14	streq
LEAF_NODE	84:13	84:13	15	streq
LEAF_NODE	84:18	84:18	14	(
ARGUMENT	84:19	84:19	14	optarg
FIELD	84:19	84:19	15	optarg
LEAF_NODE	84:19	84:19	16	optarg
LEAF_NODE	84:25	84:25	14	,
ARGUMENT	84:27	84:27	14	"jpeg"
FIELD	84:27	84:27	15	"jpeg"
LEAF_NODE	84:27	84:27	16	"jpeg"
LEAF_NODE	84:33	84:33	14	)
LEAF_NODE	84:34	84:34	11	)
STATEMENTS	85:5	85:5	11	
EXPR_STATEMENT	85:5	85:35	12	compression = COMPRESSION_JPEG ;
EXPR	85:5	85:5	13	compression = COMPRESSION_JPEG
ASSIGN	85:5	85:19	14	compression = COMPRESSION_JPEG
LVAL	85:5	85:5	15	compression
FIELD	85:5	85:5	16	compression
LEAF_NODE	85:5	85:5	17	compression
ASSIGN_OP	85:17	85:17	15	=
LEAF_NODE	85:17	85:17	16	=
RVAL	85:19	85:19	15	COMPRESSION_JPEG
FIELD	85:19	85:19	16	COMPRESSION_JPEG
LEAF_NODE	85:19	85:19	17	COMPRESSION_JPEG
LEAF_NODE	85:35	85:35	13	;
SELECTION	86:4	86:9	8	
KEYWORD	86:4	86:4	9	else
LEAF_NODE	86:4	86:4	10	else
STATEMENTS	86:9	86:9	9	
SELECTION	86:9	87:5	10	
KEYWORD	86:9	86:9	11	if
LEAF_NODE	86:9	86:9	12	if
LEAF_NODE	86:12	86:12	11	(
CONDITION	86:13	86:13	11	streq ( optarg , "zip" )
EXPR	86:13	86:13	12	streq ( optarg , "zip" )
FUNCTION_CALL	86:13	86:32	13	streq ( optarg , "zip" )
CALLEE	86:13	86:13	14	streq
LEAF_NODE	86:13	86:13	15	streq
LEAF_NODE	86:18	86:18	14	(
ARGUMENT	86:19	86:19	14	optarg
FIELD	86:19	86:19	15	optarg
LEAF_NODE	86:19	86:19	16	optarg
LEAF_NODE	86:25	86:25	14	,
ARGUMENT	86:27	86:27	14	"zip"
FIELD	86:27	86:27	15	"zip"
LEAF_NODE	86:27	86:27	16	"zip"
LEAF_NODE	86:32	86:32	14	)
LEAF_NODE	86:33	86:33	11	)
STATEMENTS	87:5	87:5	11	
EXPR_STATEMENT	87:5	87:38	12	compression = COMPRESSION_DEFLATE ;
EXPR	87:5	87:5	13	compression = COMPRESSION_DEFLATE
ASSIGN	87:5	87:19	14	compression = COMPRESSION_DEFLATE
LVAL	87:5	87:5	15	compression
FIELD	87:5	87:5	16	compression
LEAF_NODE	87:5	87:5	17	compression
ASSIGN_OP	87:17	87:17	15	=
LEAF_NODE	87:17	87:17	16	=
RVAL	87:19	87:19	15	COMPRESSION_DEFLATE
FIELD	87:19	87:19	16	COMPRESSION_DEFLATE
LEAF_NODE	87:19	87:19	17	COMPRESSION_DEFLATE
LEAF_NODE	87:38	87:38	13	;
SELECTION	88:4	89:5	8	
KEYWORD	88:4	88:4	9	else
LEAF_NODE	88:4	88:4	10	else
STATEMENTS	89:5	89:5	9	
EXPR_STATEMENT	89:5	89:14	10	usage ( - 1 ) ;
EXPR	89:5	89:5	11	usage ( - 1 )
FUNCTION_CALL	89:5	89:13	12	usage ( - 1 )
CALLEE	89:5	89:5	13	usage
LEAF_NODE	89:5	89:5	14	usage
LEAF_NODE	89:10	89:10	13	(
ARGUMENT	89:11	89:11	13	- 1
UNARY_EXPR	89:11	89:12	14	- 1
UNARY_OPERATOR	89:11	89:11	15	-
LEAF_NODE	89:11	89:11	16	-
FIELD	89:12	89:12	15	1
LEAF_NODE	89:12	89:12	16	1
LEAF_NODE	89:13	89:13	13	)
LEAF_NODE	89:14	89:14	11	;
JUMP_STATEMENT	90:4	90:9	8	break DESTINATION ;
KEYWORD	90:4	90:4	9	break
LEAF_NODE	90:4	90:4	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	90:9	90:9	9	;
LEAF_NODE	92:3	92:3	8	case
LEAF_NODE	92:8	92:8	8	'r'
LEAF_NODE	92:11	92:11	8	:
EXPR_STATEMENT	93:4	93:31	8	rowsperstrip = atoi ( optarg ) ;
EXPR	93:4	93:4	9	rowsperstrip = atoi ( optarg )
ASSIGN	93:4	93:19	10	rowsperstrip = atoi ( optarg )
LVAL	93:4	93:4	11	rowsperstrip
FIELD	93:4	93:4	12	rowsperstrip
LEAF_NODE	93:4	93:4	13	rowsperstrip
ASSIGN_OP	93:17	93:17	11	=
LEAF_NODE	93:17	93:17	12	=
RVAL	93:19	93:19	11	atoi ( optarg )
FUNCTION_CALL	93:19	93:30	12	atoi ( optarg )
CALLEE	93:19	93:19	13	atoi
LEAF_NODE	93:19	93:19	14	atoi
LEAF_NODE	93:23	93:23	13	(
ARGUMENT	93:24	93:24	13	optarg
FIELD	93:24	93:24	14	optarg
LEAF_NODE	93:24	93:24	15	optarg
LEAF_NODE	93:30	93:30	13	)
LEAF_NODE	93:31	93:31	9	;
JUMP_STATEMENT	94:4	94:9	8	break DESTINATION ;
KEYWORD	94:4	94:4	9	break
LEAF_NODE	94:4	94:4	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	94:9	94:9	9	;
LEAF_NODE	96:3	96:3	8	case
LEAF_NODE	96:8	96:8	8	't'
LEAF_NODE	96:11	96:11	8	:
EXPR_STATEMENT	97:4	97:31	8	rowsperstrip = atoi ( optarg ) ;
EXPR	97:4	97:4	9	rowsperstrip = atoi ( optarg )
ASSIGN	97:4	97:19	10	rowsperstrip = atoi ( optarg )
LVAL	97:4	97:4	11	rowsperstrip
FIELD	97:4	97:4	12	rowsperstrip
LEAF_NODE	97:4	97:4	13	rowsperstrip
ASSIGN_OP	97:17	97:17	11	=
LEAF_NODE	97:17	97:17	12	=
RVAL	97:19	97:19	11	atoi ( optarg )
FUNCTION_CALL	97:19	97:30	12	atoi ( optarg )
CALLEE	97:19	97:19	13	atoi
LEAF_NODE	97:19	97:19	14	atoi
LEAF_NODE	97:23	97:23	13	(
ARGUMENT	97:24	97:24	13	optarg
FIELD	97:24	97:24	14	optarg
LEAF_NODE	97:24	97:24	15	optarg
LEAF_NODE	97:30	97:30	13	)
LEAF_NODE	97:31	97:31	9	;
JUMP_STATEMENT	98:4	98:9	8	break DESTINATION ;
KEYWORD	98:4	98:4	9	break
LEAF_NODE	98:4	98:4	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	98:9	98:9	9	;
LEAF_NODE	100:3	100:3	8	case
LEAF_NODE	100:8	100:8	8	'n'
LEAF_NODE	100:11	100:11	8	:
EXPR_STATEMENT	101:4	101:16	8	no_alpha = 1 ;
EXPR	101:4	101:4	9	no_alpha = 1
ASSIGN	101:4	101:15	10	no_alpha = 1
LVAL	101:4	101:4	11	no_alpha
FIELD	101:4	101:4	12	no_alpha
LEAF_NODE	101:4	101:4	13	no_alpha
ASSIGN_OP	101:13	101:13	11	=
LEAF_NODE	101:13	101:13	12	=
RVAL	101:15	101:15	11	1
FIELD	101:15	101:15	12	1
LEAF_NODE	101:15	101:15	13	1
LEAF_NODE	101:16	101:16	9	;
JUMP_STATEMENT	102:4	102:9	8	break DESTINATION ;
KEYWORD	102:4	102:4	9	break
LEAF_NODE	102:4	102:4	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	102:9	102:9	9	;
LEAF_NODE	104:3	104:3	8	case
LEAF_NODE	104:8	104:8	8	'8'
LEAF_NODE	104:11	104:11	8	:
EXPR_STATEMENT	105:4	105:22	8	bigtiff_output = 1 ;
EXPR	105:4	105:4	9	bigtiff_output = 1
ASSIGN	105:4	105:21	10	bigtiff_output = 1
LVAL	105:4	105:4	11	bigtiff_output
FIELD	105:4	105:4	12	bigtiff_output
LEAF_NODE	105:4	105:4	13	bigtiff_output
ASSIGN_OP	105:19	105:19	11	=
LEAF_NODE	105:19	105:19	12	=
RVAL	105:21	105:21	11	1
FIELD	105:21	105:21	12	1
LEAF_NODE	105:21	105:21	13	1
LEAF_NODE	105:22	105:22	9	;
JUMP_STATEMENT	106:4	106:9	8	break DESTINATION ;
KEYWORD	106:4	106:4	9	break
LEAF_NODE	106:4	106:4	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	106:9	106:9	9	;
LEAF_NODE	108:3	108:3	8	case
LEAF_NODE	108:8	108:8	8	'?'
LEAF_NODE	108:11	108:11	8	:
EXPR_STATEMENT	109:4	109:12	8	usage ( 0 ) ;
EXPR	109:4	109:4	9	usage ( 0 )
FUNCTION_CALL	109:4	109:11	10	usage ( 0 )
CALLEE	109:4	109:4	11	usage
LEAF_NODE	109:4	109:4	12	usage
LEAF_NODE	109:9	109:9	11	(
ARGUMENT	109:10	109:10	11	0
FIELD	109:10	109:10	12	0
LEAF_NODE	109:10	109:10	13	0
LEAF_NODE	109:11	109:11	11	)
LEAF_NODE	109:12	109:12	9	;
LEAF_NODE	111:2	111:2	7	}
SELECTION	113:1	114:2	3	
KEYWORD	113:1	113:1	4	if
LEAF_NODE	113:1	113:1	5	if
LEAF_NODE	113:4	113:4	4	(
CONDITION	113:5	113:5	4	argc - optind < 2
EXPR	113:5	113:21	5	argc - optind < 2
FIELD	113:5	113:5	6	argc
LEAF_NODE	113:5	113:5	7	argc
LEAF_NODE	113:10	113:10	6	-
FIELD	113:12	113:12	6	optind
LEAF_NODE	113:12	113:12	7	optind
REL_OPERATOR	113:19	113:19	6	<
LEAF_NODE	113:19	113:19	7	<
FIELD	113:21	113:21	6	2
LEAF_NODE	113:21	113:21	7	2
LEAF_NODE	113:22	113:22	4	)
STATEMENTS	114:2	114:2	4	
EXPR_STATEMENT	114:2	114:11	5	usage ( - 1 ) ;
EXPR	114:2	114:2	6	usage ( - 1 )
FUNCTION_CALL	114:2	114:10	7	usage ( - 1 )
CALLEE	114:2	114:2	8	usage
LEAF_NODE	114:2	114:2	9	usage
LEAF_NODE	114:7	114:7	8	(
ARGUMENT	114:8	114:8	8	- 1
UNARY_EXPR	114:8	114:9	9	- 1
UNARY_OPERATOR	114:8	114:8	10	-
LEAF_NODE	114:8	114:8	11	-
FIELD	114:9	114:9	10	1
LEAF_NODE	114:9	114:9	11	1
LEAF_NODE	114:10	114:10	8	)
LEAF_NODE	114:11	114:11	6	;
EXPR_STATEMENT	116:1	116:54	3	out = TIFFOpen ( argv [ argc - 1 ] , bigtiff_output ? "w8" : "w" ) ;
EXPR	116:1	116:1	4	out = TIFFOpen ( argv [ argc - 1 ] , bigtiff_output ? "w8" : "w" )
ASSIGN	116:1	116:7	5	out = TIFFOpen ( argv [ argc - 1 ] , bigtiff_output ? "w8" : "w" )
LVAL	116:1	116:1	6	out
FIELD	116:1	116:1	7	out
LEAF_NODE	116:1	116:1	8	out
ASSIGN_OP	116:5	116:5	6	=
LEAF_NODE	116:5	116:5	7	=
RVAL	116:7	116:7	6	TIFFOpen ( argv [ argc - 1 ] , bigtiff_output ? "w8" : "w" )
FUNCTION_CALL	116:7	116:53	7	TIFFOpen ( argv [ argc - 1 ] , bigtiff_output ? "w8" : "w" )
CALLEE	116:7	116:7	8	TIFFOpen
LEAF_NODE	116:7	116:7	9	TIFFOpen
LEAF_NODE	116:15	116:15	8	(
ARGUMENT	116:16	116:16	8	argv [ argc - 1 ]
FIELD	116:16	116:27	9	argv [ argc - 1 ]
LEAF_NODE	116:16	116:16	10	argv
LEAF_NODE	116:20	116:20	10	[
EXPR	116:21	116:26	10	argc - 1
FIELD	116:21	116:21	11	argc
LEAF_NODE	116:21	116:21	12	argc
LEAF_NODE	116:25	116:25	11	-
FIELD	116:26	116:26	11	1
LEAF_NODE	116:26	116:26	12	1
LEAF_NODE	116:27	116:27	10	]
LEAF_NODE	116:28	116:28	8	,
ARGUMENT	116:30	116:30	8	bigtiff_output ? "w8" : "w"
COND_EXPR	116:30	116:50	9	bigtiff_output ? "w8" : "w"
CONDITION	116:30	116:30	10	bigtiff_output
FIELD	116:30	116:30	11	bigtiff_output
LEAF_NODE	116:30	116:30	12	bigtiff_output
LEAF_NODE	116:44	116:44	10	?
EXPR	116:45	116:45	10	"w8"
FIELD	116:45	116:45	11	"w8"
LEAF_NODE	116:45	116:45	12	"w8"
LEAF_NODE	116:49	116:49	10	:
FIELD	116:50	116:50	10	"w"
LEAF_NODE	116:50	116:50	11	"w"
LEAF_NODE	116:53	116:53	8	)
LEAF_NODE	116:54	116:54	4	;
SELECTION	117:1	118:2	3	
KEYWORD	117:1	117:1	4	if
LEAF_NODE	117:1	117:1	5	if
LEAF_NODE	117:4	117:4	4	(
CONDITION	117:5	117:5	4	out == NULL
EXPR	117:5	117:12	5	out == NULL
FIELD	117:5	117:5	6	out
LEAF_NODE	117:5	117:5	7	out
EQ_OPERATOR	117:9	117:9	6	==
LEAF_NODE	117:9	117:9	7	==
FIELD	117:12	117:12	6	NULL
LEAF_NODE	117:12	117:12	7	NULL
LEAF_NODE	117:16	117:16	4	)
STATEMENTS	118:2	118:2	4	
JUMP_STATEMENT	118:2	118:13	5	return ( - 2 ) ;
KEYWORD	118:2	118:2	6	return
LEAF_NODE	118:2	118:2	7	return
DESTINATION	118:9	118:9	6	( - 2 )
EXPR	118:9	118:12	7	( - 2 )
LEAF_NODE	118:9	118:9	8	(
UNARY_EXPR	118:10	118:11	8	- 2
UNARY_OPERATOR	118:10	118:10	9	-
LEAF_NODE	118:10	118:10	10	-
FIELD	118:11	118:11	9	2
LEAF_NODE	118:11	118:11	10	2
LEAF_NODE	118:12	118:12	8	)
LEAF_NODE	118:13	118:13	6	;
ITERATION	120:1	120:35	3	
KEYWORD	120:1	120:1	4	for
LEAF_NODE	120:1	120:1	5	for
LEAF_NODE	120:5	120:5	4	(
FOR_INIT	120:6	120:6	4	;
LEAF_NODE	120:6	120:6	5	;
CONDITION	120:8	120:8	4	optind < argc - 1
EXPR	120:8	120:22	5	optind < argc - 1
FIELD	120:8	120:8	6	optind
LEAF_NODE	120:8	120:8	7	optind
REL_OPERATOR	120:15	120:15	6	<
LEAF_NODE	120:15	120:15	7	<
FIELD	120:17	120:17	6	argc
LEAF_NODE	120:17	120:17	7	argc
LEAF_NODE	120:21	120:21	6	-
FIELD	120:22	120:22	6	1
LEAF_NODE	120:22	120:22	7	1
LEAF_NODE	120:23	120:23	4	;
FOR_EXPR	120:25	120:25	4	optind ++
EXPR	120:25	120:25	5	optind ++
FIELD	120:25	120:31	6	optind ++
LEAF_NODE	120:25	120:25	7	optind
LEAF_NODE	120:31	120:31	7	++
LEAF_NODE	120:33	120:33	4	)
STATEMENTS	120:35	133:1	4	
LEAF_NODE	120:35	120:35	5	{
STATEMENTS	121:2	122:2	5	
EXPR_STATEMENT	121:2	121:34	6	in = TIFFOpen ( argv [ optind ] , "r" ) ;
EXPR	121:2	121:2	7	in = TIFFOpen ( argv [ optind ] , "r" )
ASSIGN	121:2	121:7	8	in = TIFFOpen ( argv [ optind ] , "r" )
LVAL	121:2	121:2	9	in
FIELD	121:2	121:2	10	in
LEAF_NODE	121:2	121:2	11	in
ASSIGN_OP	121:5	121:5	9	=
LEAF_NODE	121:5	121:5	10	=
RVAL	121:7	121:7	9	TIFFOpen ( argv [ optind ] , "r" )
FUNCTION_CALL	121:7	121:33	10	TIFFOpen ( argv [ optind ] , "r" )
CALLEE	121:7	121:7	11	TIFFOpen
LEAF_NODE	121:7	121:7	12	TIFFOpen
LEAF_NODE	121:15	121:15	11	(
ARGUMENT	121:16	121:16	11	argv [ optind ]
FIELD	121:16	121:27	12	argv [ optind ]
LEAF_NODE	121:16	121:16	13	argv
LEAF_NODE	121:20	121:20	13	[
EXPR	121:21	121:21	13	optind
FIELD	121:21	121:21	14	optind
LEAF_NODE	121:21	121:21	15	optind
LEAF_NODE	121:27	121:27	13	]
LEAF_NODE	121:28	121:28	11	,
ARGUMENT	121:30	121:30	11	"r"
FIELD	121:30	121:30	12	"r"
LEAF_NODE	121:30	121:30	13	"r"
LEAF_NODE	121:33	121:33	11	)
LEAF_NODE	121:34	121:34	7	;
SELECTION	122:2	122:18	6	
KEYWORD	122:2	122:2	7	if
LEAF_NODE	122:2	122:2	8	if
LEAF_NODE	122:5	122:5	7	(
CONDITION	122:6	122:6	7	in != NULL
EXPR	122:6	122:12	8	in != NULL
FIELD	122:6	122:6	9	in
LEAF_NODE	122:6	122:6	10	in
EQ_OPERATOR	122:9	122:9	9	!=
LEAF_NODE	122:9	122:9	10	!=
FIELD	122:12	122:12	9	NULL
LEAF_NODE	122:12	122:12	10	NULL
LEAF_NODE	122:16	122:16	7	)
STATEMENTS	122:18	132:2	7	
LEAF_NODE	122:18	122:18	8	{
STATEMENTS	123:3	131:3	8	
ITERATION	123:3	123:6	9	
KEYWORD	123:3	123:3	10	do
LEAF_NODE	123:3	123:3	11	do
LEAF_NODE	130:11	130:11	10	(
CONDITION	130:12	130:12	10	TIFFReadDirectory ( in )
EXPR	130:12	130:12	11	TIFFReadDirectory ( in )
FUNCTION_CALL	130:12	130:32	12	TIFFReadDirectory ( in )
CALLEE	130:12	130:12	13	TIFFReadDirectory
LEAF_NODE	130:12	130:12	14	TIFFReadDirectory
LEAF_NODE	130:29	130:29	13	(
ARGUMENT	130:30	130:30	13	in
FIELD	130:30	130:30	14	in
LEAF_NODE	130:30	130:30	15	in
LEAF_NODE	130:32	130:32	13	)
LEAF_NODE	130:33	130:33	10	)
STATEMENTS	123:6	130:3	10	
LEAF_NODE	123:6	123:6	11	{
STATEMENTS	124:4	124:4	11	
SELECTION	124:4	125:34	12	
KEYWORD	124:4	124:4	13	if
LEAF_NODE	124:4	124:4	14	if
LEAF_NODE	124:7	124:7	13	(
CONDITION	124:8	124:8	13	! tiffcvt ( in , out ) || ! TIFFWriteDirectory ( out )
EXPR	124:8	124:8	14	! tiffcvt ( in , out ) || ! TIFFWriteDirectory ( out )
OR	124:8	125:8	15	! tiffcvt ( in , out ) || ! TIFFWriteDirectory ( out )
EXPR	124:8	124:8	16	! tiffcvt ( in , out )
UNARY_EXPR	124:8	124:9	17	! tiffcvt ( in , out )
UNARY_OPERATOR	124:8	124:8	18	!
LEAF_NODE	124:8	124:8	19	!
FUNCTION_CALL	124:9	124:24	18	tiffcvt ( in , out )
CALLEE	124:9	124:9	19	tiffcvt
LEAF_NODE	124:9	124:9	20	tiffcvt
LEAF_NODE	124:16	124:16	19	(
ARGUMENT	124:17	124:17	19	in
FIELD	124:17	124:17	20	in
LEAF_NODE	124:17	124:17	21	in
LEAF_NODE	124:19	124:19	19	,
ARGUMENT	124:21	124:21	19	out
FIELD	124:21	124:21	20	out
LEAF_NODE	124:21	124:21	21	out
LEAF_NODE	124:24	124:24	19	)
LEAF_NODE	124:26	124:26	16	||
EXPR	125:8	125:8	16	! TIFFWriteDirectory ( out )
UNARY_EXPR	125:8	125:9	17	! TIFFWriteDirectory ( out )
UNARY_OPERATOR	125:8	125:8	18	!
LEAF_NODE	125:8	125:8	19	!
FUNCTION_CALL	125:9	125:31	18	TIFFWriteDirectory ( out )
CALLEE	125:9	125:9	19	TIFFWriteDirectory
LEAF_NODE	125:9	125:9	20	TIFFWriteDirectory
LEAF_NODE	125:27	125:27	19	(
ARGUMENT	125:28	125:28	19	out
FIELD	125:28	125:28	20	out
LEAF_NODE	125:28	125:28	21	out
LEAF_NODE	125:31	125:31	19	)
LEAF_NODE	125:32	125:32	13	)
STATEMENTS	125:34	129:4	13	
LEAF_NODE	125:34	125:34	14	{
STATEMENTS	126:5	128:5	14	
EXPR_STATEMENT	126:5	126:26	15	( void ) TIFFClose ( out ) ;
EXPR	126:5	126:12	16	( void ) TIFFClose ( out )
LEAF_NODE	126:5	126:5	17	(
TYPE_NAME	126:6	126:6	17	void
LEAF_NODE	126:6	126:6	18	void
LEAF_NODE	126:10	126:10	17	)
FUNCTION_CALL	126:12	126:25	17	TIFFClose ( out )
CALLEE	126:12	126:12	18	TIFFClose
LEAF_NODE	126:12	126:12	19	TIFFClose
LEAF_NODE	126:21	126:21	18	(
ARGUMENT	126:22	126:22	18	out
FIELD	126:22	126:22	19	out
LEAF_NODE	126:22	126:22	20	out
LEAF_NODE	126:25	126:25	18	)
LEAF_NODE	126:26	126:26	16	;
EXPR_STATEMENT	127:5	127:25	15	( void ) TIFFClose ( in ) ;
EXPR	127:5	127:12	16	( void ) TIFFClose ( in )
LEAF_NODE	127:5	127:5	17	(
TYPE_NAME	127:6	127:6	17	void
LEAF_NODE	127:6	127:6	18	void
LEAF_NODE	127:10	127:10	17	)
FUNCTION_CALL	127:12	127:24	17	TIFFClose ( in )
CALLEE	127:12	127:12	18	TIFFClose
LEAF_NODE	127:12	127:12	19	TIFFClose
LEAF_NODE	127:21	127:21	18	(
ARGUMENT	127:22	127:22	18	in
FIELD	127:22	127:22	19	in
LEAF_NODE	127:22	127:22	20	in
LEAF_NODE	127:24	127:24	18	)
LEAF_NODE	127:25	127:25	16	;
JUMP_STATEMENT	128:5	128:15	15	return ( 1 ) ;
KEYWORD	128:5	128:5	16	return
LEAF_NODE	128:5	128:5	17	return
DESTINATION	128:12	128:12	16	( 1 )
EXPR	128:12	128:14	17	( 1 )
LEAF_NODE	128:12	128:12	18	(
FIELD	128:13	128:13	18	1
LEAF_NODE	128:13	128:13	19	1
LEAF_NODE	128:14	128:14	18	)
LEAF_NODE	128:15	128:15	16	;
LEAF_NODE	129:4	129:4	14	}
LEAF_NODE	130:3	130:3	11	}
LEAF_NODE	130:34	130:34	9	;
EXPR_STATEMENT	131:3	131:23	9	( void ) TIFFClose ( in ) ;
EXPR	131:3	131:10	10	( void ) TIFFClose ( in )
LEAF_NODE	131:3	131:3	11	(
TYPE_NAME	131:4	131:4	11	void
LEAF_NODE	131:4	131:4	12	void
LEAF_NODE	131:8	131:8	11	)
FUNCTION_CALL	131:10	131:22	11	TIFFClose ( in )
CALLEE	131:10	131:10	12	TIFFClose
LEAF_NODE	131:10	131:10	13	TIFFClose
LEAF_NODE	131:19	131:19	12	(
ARGUMENT	131:20	131:20	12	in
FIELD	131:20	131:20	13	in
LEAF_NODE	131:20	131:20	14	in
LEAF_NODE	131:22	131:22	12	)
LEAF_NODE	131:23	131:23	10	;
LEAF_NODE	132:2	132:2	8	}
LEAF_NODE	133:1	133:1	5	}
EXPR_STATEMENT	134:1	134:22	3	( void ) TIFFClose ( out ) ;
EXPR	134:1	134:8	4	( void ) TIFFClose ( out )
LEAF_NODE	134:1	134:1	5	(
TYPE_NAME	134:2	134:2	5	void
LEAF_NODE	134:2	134:2	6	void
LEAF_NODE	134:6	134:6	5	)
FUNCTION_CALL	134:8	134:21	5	TIFFClose ( out )
CALLEE	134:8	134:8	6	TIFFClose
LEAF_NODE	134:8	134:8	7	TIFFClose
LEAF_NODE	134:17	134:17	6	(
ARGUMENT	134:18	134:18	6	out
FIELD	134:18	134:18	7	out
LEAF_NODE	134:18	134:18	8	out
LEAF_NODE	134:21	134:21	6	)
LEAF_NODE	134:22	134:22	4	;
JUMP_STATEMENT	135:1	135:11	3	return ( 0 ) ;
KEYWORD	135:1	135:1	4	return
LEAF_NODE	135:1	135:1	5	return
DESTINATION	135:8	135:8	4	( 0 )
EXPR	135:8	135:10	5	( 0 )
LEAF_NODE	135:8	135:8	6	(
FIELD	135:9	135:9	6	0
LEAF_NODE	135:9	135:9	7	0
LEAF_NODE	135:10	135:10	6	)
LEAF_NODE	135:11	135:11	4	;
LEAF_NODE	136:0	136:0	2	}
FUNCTION_DEF	138:0	252:0	1	
RETURN_TYPE	138:0	138:7	2	static int
LEAF_NODE	138:0	138:0	3	static
TYPE_NAME	138:7	138:7	3	int
LEAF_NODE	138:7	138:7	4	int
FUNCTION_NAME	139:0	139:0	2	cvt_by_tile
LEAF_NODE	139:0	139:0	3	cvt_by_tile
PARAMETER_LIST	139:11	139:33	2	( TIFF * in , TIFF * out )
LEAF_NODE	139:11	139:11	3	(
PARAMETER_DECL	139:13	139:19	3	TIFF * in
TYPE	139:13	139:18	4	TIFF *
TYPE_NAME	139:13	139:13	5	TIFF
LEAF_NODE	139:13	139:13	6	TIFF
POINTER	139:18	139:18	5	*
LEAF_NODE	139:18	139:18	6	*
NAME	139:19	139:19	4	in
LEAF_NODE	139:19	139:19	5	in
LEAF_NODE	139:21	139:21	3	,
PARAMETER_DECL	139:23	139:29	3	TIFF * out
TYPE	139:23	139:28	4	TIFF *
TYPE_NAME	139:23	139:23	5	TIFF
LEAF_NODE	139:23	139:23	6	TIFF
POINTER	139:28	139:28	5	*
LEAF_NODE	139:28	139:28	6	*
NAME	139:29	139:29	4	out
LEAF_NODE	139:29	139:29	5	out
LEAF_NODE	139:33	139:33	3	)
LEAF_NODE	141:0	141:0	2	{
STATEMENTS	142:4	251:4	2	
SIMPLE_DECL	142:4	142:18	3	uint32 * raster ;
VAR_DECL	142:4	142:12	4	uint32 * raster
TYPE	142:4	142:10	5	uint32 *
TYPE_NAME	142:4	142:4	6	uint32
LEAF_NODE	142:4	142:4	7	uint32
POINTER	142:10	142:10	6	*
LEAF_NODE	142:10	142:10	7	*
NAME	142:12	142:12	5	raster
LEAF_NODE	142:12	142:12	6	raster
LEAF_NODE	142:18	142:18	4	;
SIMPLE_DECL	143:4	143:25	3	uint32 width , uint32 height ;
INIT_DECL_LIST	143:4	143:4	4	uint32 width , uint32 height
VAR_DECL	143:4	143:12	5	uint32 width
TYPE	143:4	143:4	6	uint32
TYPE_NAME	143:4	143:4	7	uint32
LEAF_NODE	143:4	143:4	8	uint32
NAME	143:12	143:12	6	width
LEAF_NODE	143:12	143:12	7	width
LEAF_NODE	143:17	143:17	5	,
VAR_DECL	143:4	143:19	5	uint32 height
TYPE	143:4	143:4	6	uint32
TYPE_NAME	143:4	143:4	7	uint32
LEAF_NODE	143:4	143:4	8	uint32
NAME	143:19	143:19	6	height
LEAF_NODE	143:19	143:19	7	height
LEAF_NODE	143:25	143:25	4	;
SIMPLE_DECL	144:4	144:35	3	uint32 tile_width , uint32 tile_height ;
INIT_DECL_LIST	144:4	144:4	4	uint32 tile_width , uint32 tile_height
VAR_DECL	144:4	144:12	5	uint32 tile_width
TYPE	144:4	144:4	6	uint32
TYPE_NAME	144:4	144:4	7	uint32
LEAF_NODE	144:4	144:4	8	uint32
NAME	144:12	144:12	6	tile_width
LEAF_NODE	144:12	144:12	7	tile_width
LEAF_NODE	144:22	144:22	5	,
VAR_DECL	144:4	144:24	5	uint32 tile_height
TYPE	144:4	144:4	6	uint32
TYPE_NAME	144:4	144:4	7	uint32
LEAF_NODE	144:4	144:4	8	uint32
NAME	144:24	144:24	6	tile_height
LEAF_NODE	144:24	144:24	7	tile_height
LEAF_NODE	144:35	144:35	4	;
SIMPLE_DECL	145:4	145:20	3	uint32 row , uint32 col ;
INIT_DECL_LIST	145:4	145:4	4	uint32 row , uint32 col
VAR_DECL	145:4	145:12	5	uint32 row
TYPE	145:4	145:4	6	uint32
TYPE_NAME	145:4	145:4	7	uint32
LEAF_NODE	145:4	145:4	8	uint32
NAME	145:12	145:12	6	row
LEAF_NODE	145:12	145:12	7	row
LEAF_NODE	145:15	145:15	5	,
VAR_DECL	145:4	145:17	5	uint32 col
TYPE	145:4	145:4	6	uint32
TYPE_NAME	145:4	145:4	7	uint32
LEAF_NODE	145:4	145:4	8	uint32
NAME	145:17	145:17	6	col
LEAF_NODE	145:17	145:17	7	col
LEAF_NODE	145:20	145:20	4	;
SIMPLE_DECL	146:4	146:21	3	uint32 * wrk_line ;
VAR_DECL	146:4	146:13	4	uint32 * wrk_line
TYPE	146:4	146:12	5	uint32 *
TYPE_NAME	146:4	146:4	6	uint32
LEAF_NODE	146:4	146:4	7	uint32
POINTER	146:12	146:12	6	*
LEAF_NODE	146:12	146:12	7	*
NAME	146:13	146:13	5	wrk_line
LEAF_NODE	146:13	146:13	6	wrk_line
LEAF_NODE	146:21	146:21	4	;
SIMPLE_DECL	147:4	147:18	3	int ok ; ok = 1 ;
VAR_DECL	147:4	147:12	4	int ok ; ok = 1
TYPE	147:4	147:4	5	int
TYPE_NAME	147:4	147:4	6	int
LEAF_NODE	147:4	147:4	7	int
NAME	147:12	147:12	5	ok
LEAF_NODE	147:12	147:12	6	ok
LEAF_NODE	0:0	0:0	5	;
INIT	147:12	147:12	5	ok = 1
ASSIGN	147:12	147:17	6	ok = 1
LVAL	147:12	147:12	7	ok
NAME	147:12	147:12	8	ok
LEAF_NODE	147:12	147:12	9	ok
ASSIGN_OP	147:15	147:15	7	=
LEAF_NODE	147:15	147:15	8	=
RVAL	147:17	147:17	7	1
FIELD	147:17	147:17	8	1
LEAF_NODE	147:17	147:17	9	1
LEAF_NODE	147:18	147:18	4	;
SIMPLE_DECL	148:4	148:36	3	uint32 rastersize , uint32 wrk_linesize ;
INIT_DECL_LIST	148:4	148:4	4	uint32 rastersize , uint32 wrk_linesize
VAR_DECL	148:4	148:12	5	uint32 rastersize
TYPE	148:4	148:4	6	uint32
TYPE_NAME	148:4	148:4	7	uint32
LEAF_NODE	148:4	148:4	8	uint32
NAME	148:12	148:12	6	rastersize
LEAF_NODE	148:12	148:12	7	rastersize
LEAF_NODE	148:22	148:22	5	,
VAR_DECL	148:4	148:24	5	uint32 wrk_linesize
TYPE	148:4	148:4	6	uint32
TYPE_NAME	148:4	148:4	7	uint32
LEAF_NODE	148:4	148:4	8	uint32
NAME	148:24	148:24	6	wrk_linesize
LEAF_NODE	148:24	148:24	7	wrk_linesize
LEAF_NODE	148:36	148:36	4	;
EXPR_STATEMENT	150:4	150:48	3	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width ) ;
EXPR	150:4	150:4	4	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
FUNCTION_CALL	150:4	150:47	5	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
CALLEE	150:4	150:4	6	TIFFGetField
LEAF_NODE	150:4	150:4	7	TIFFGetField
LEAF_NODE	150:16	150:16	6	(
ARGUMENT	150:17	150:17	6	in
FIELD	150:17	150:17	7	in
LEAF_NODE	150:17	150:17	8	in
LEAF_NODE	150:19	150:19	6	,
ARGUMENT	150:21	150:21	6	TIFFTAG_IMAGEWIDTH
FIELD	150:21	150:21	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	150:21	150:21	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	150:39	150:39	6	,
ARGUMENT	150:41	150:41	6	& width
UNARY_EXPR	150:41	150:42	7	& width
UNARY_OPERATOR	150:41	150:41	8	&
LEAF_NODE	150:41	150:41	9	&
FIELD	150:42	150:42	8	width
LEAF_NODE	150:42	150:42	9	width
LEAF_NODE	150:47	150:47	6	)
LEAF_NODE	150:48	150:48	4	;
EXPR_STATEMENT	151:4	151:50	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height ) ;
EXPR	151:4	151:4	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height )
FUNCTION_CALL	151:4	151:49	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height )
CALLEE	151:4	151:4	6	TIFFGetField
LEAF_NODE	151:4	151:4	7	TIFFGetField
LEAF_NODE	151:16	151:16	6	(
ARGUMENT	151:17	151:17	6	in
FIELD	151:17	151:17	7	in
LEAF_NODE	151:17	151:17	8	in
LEAF_NODE	151:19	151:19	6	,
ARGUMENT	151:21	151:21	6	TIFFTAG_IMAGELENGTH
FIELD	151:21	151:21	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	151:21	151:21	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	151:40	151:40	6	,
ARGUMENT	151:42	151:42	6	& height
UNARY_EXPR	151:42	151:43	7	& height
UNARY_OPERATOR	151:42	151:42	8	&
LEAF_NODE	151:42	151:42	9	&
FIELD	151:43	151:43	8	height
LEAF_NODE	151:43	151:43	9	height
LEAF_NODE	151:49	151:49	6	)
LEAF_NODE	151:50	151:50	4	;
SELECTION	153:4	154:65	3	
KEYWORD	153:4	153:4	4	if
LEAF_NODE	153:4	153:4	5	if
LEAF_NODE	153:6	153:6	4	(
CONDITION	153:8	153:8	4	! TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tile_width ) || ! TIFFGetField ( in , TIFFTAG_TILELENGTH , & tile_height )
EXPR	153:8	153:8	5	! TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tile_width ) || ! TIFFGetField ( in , TIFFTAG_TILELENGTH , & tile_height )
OR	153:8	154:11	6	! TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tile_width ) || ! TIFFGetField ( in , TIFFTAG_TILELENGTH , & tile_height )
EXPR	153:8	153:8	7	! TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tile_width )
UNARY_EXPR	153:8	153:9	8	! TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tile_width )
UNARY_OPERATOR	153:8	153:8	9	!
LEAF_NODE	153:8	153:8	10	!
FUNCTION_CALL	153:9	153:56	9	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tile_width )
CALLEE	153:9	153:9	10	TIFFGetField
LEAF_NODE	153:9	153:9	11	TIFFGetField
LEAF_NODE	153:21	153:21	10	(
ARGUMENT	153:22	153:22	10	in
FIELD	153:22	153:22	11	in
LEAF_NODE	153:22	153:22	12	in
LEAF_NODE	153:24	153:24	10	,
ARGUMENT	153:26	153:26	10	TIFFTAG_TILEWIDTH
FIELD	153:26	153:26	11	TIFFTAG_TILEWIDTH
LEAF_NODE	153:26	153:26	12	TIFFTAG_TILEWIDTH
LEAF_NODE	153:43	153:43	10	,
ARGUMENT	153:45	153:45	10	& tile_width
UNARY_EXPR	153:45	153:46	11	& tile_width
UNARY_OPERATOR	153:45	153:45	12	&
LEAF_NODE	153:45	153:45	13	&
FIELD	153:46	153:46	12	tile_width
LEAF_NODE	153:46	153:46	13	tile_width
LEAF_NODE	153:56	153:56	10	)
LEAF_NODE	154:8	154:8	7	||
EXPR	154:11	154:11	7	! TIFFGetField ( in , TIFFTAG_TILELENGTH , & tile_height )
UNARY_EXPR	154:11	154:12	8	! TIFFGetField ( in , TIFFTAG_TILELENGTH , & tile_height )
UNARY_OPERATOR	154:11	154:11	9	!
LEAF_NODE	154:11	154:11	10	!
FUNCTION_CALL	154:12	154:61	9	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tile_height )
CALLEE	154:12	154:12	10	TIFFGetField
LEAF_NODE	154:12	154:12	11	TIFFGetField
LEAF_NODE	154:24	154:24	10	(
ARGUMENT	154:25	154:25	10	in
FIELD	154:25	154:25	11	in
LEAF_NODE	154:25	154:25	12	in
LEAF_NODE	154:27	154:27	10	,
ARGUMENT	154:29	154:29	10	TIFFTAG_TILELENGTH
FIELD	154:29	154:29	11	TIFFTAG_TILELENGTH
LEAF_NODE	154:29	154:29	12	TIFFTAG_TILELENGTH
LEAF_NODE	154:47	154:47	10	,
ARGUMENT	154:49	154:49	10	& tile_height
UNARY_EXPR	154:49	154:50	11	& tile_height
UNARY_OPERATOR	154:49	154:49	12	&
LEAF_NODE	154:49	154:49	13	&
FIELD	154:50	154:50	12	tile_height
LEAF_NODE	154:50	154:50	13	tile_height
LEAF_NODE	154:61	154:61	10	)
LEAF_NODE	154:63	154:63	4	)
STATEMENTS	154:65	157:4	4	
LEAF_NODE	154:65	154:65	5	{
STATEMENTS	155:8	156:8	5	
EXPR_STATEMENT	155:8	155:61	6	TIFFError ( TIFFFileName ( in ) , "Source image not tiled" ) ;
EXPR	155:8	155:8	7	TIFFError ( TIFFFileName ( in ) , "Source image not tiled" )
FUNCTION_CALL	155:8	155:60	8	TIFFError ( TIFFFileName ( in ) , "Source image not tiled" )
CALLEE	155:8	155:8	9	TIFFError
LEAF_NODE	155:8	155:8	10	TIFFError
LEAF_NODE	155:17	155:17	9	(
ARGUMENT	155:18	155:18	9	TIFFFileName ( in )
FUNCTION_CALL	155:18	155:33	10	TIFFFileName ( in )
CALLEE	155:18	155:18	11	TIFFFileName
LEAF_NODE	155:18	155:18	12	TIFFFileName
LEAF_NODE	155:30	155:30	11	(
ARGUMENT	155:31	155:31	11	in
FIELD	155:31	155:31	12	in
LEAF_NODE	155:31	155:31	13	in
LEAF_NODE	155:33	155:33	11	)
LEAF_NODE	155:34	155:34	9	,
ARGUMENT	155:36	155:36	9	"Source image not tiled"
FIELD	155:36	155:36	10	"Source image not tiled"
LEAF_NODE	155:36	155:36	11	"Source image not tiled"
LEAF_NODE	155:60	155:60	9	)
LEAF_NODE	155:61	155:61	7	;
JUMP_STATEMENT	156:8	156:18	6	return ( 0 ) ;
KEYWORD	156:8	156:8	7	return
LEAF_NODE	156:8	156:8	8	return
DESTINATION	156:15	156:15	7	( 0 )
EXPR	156:15	156:17	8	( 0 )
LEAF_NODE	156:15	156:15	9	(
FIELD	156:16	156:16	9	0
LEAF_NODE	156:16	156:16	10	0
LEAF_NODE	156:17	156:17	9	)
LEAF_NODE	156:18	156:18	7	;
LEAF_NODE	157:4	157:4	5	}
EXPR_STATEMENT	159:4	159:53	3	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tile_width ) ;
EXPR	159:4	159:4	4	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tile_width )
FUNCTION_CALL	159:4	159:52	5	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tile_width )
CALLEE	159:4	159:4	6	TIFFSetField
LEAF_NODE	159:4	159:4	7	TIFFSetField
LEAF_NODE	159:16	159:16	6	(
ARGUMENT	159:17	159:17	6	out
FIELD	159:17	159:17	7	out
LEAF_NODE	159:17	159:17	8	out
LEAF_NODE	159:20	159:20	6	,
ARGUMENT	159:22	159:22	6	TIFFTAG_TILEWIDTH
FIELD	159:22	159:22	7	TIFFTAG_TILEWIDTH
LEAF_NODE	159:22	159:22	8	TIFFTAG_TILEWIDTH
LEAF_NODE	159:39	159:39	6	,
ARGUMENT	159:41	159:41	6	tile_width
FIELD	159:41	159:41	7	tile_width
LEAF_NODE	159:41	159:41	8	tile_width
LEAF_NODE	159:52	159:52	6	)
LEAF_NODE	159:53	159:53	4	;
EXPR_STATEMENT	160:4	160:55	3	TIFFSetField ( out , TIFFTAG_TILELENGTH , tile_height ) ;
EXPR	160:4	160:4	4	TIFFSetField ( out , TIFFTAG_TILELENGTH , tile_height )
FUNCTION_CALL	160:4	160:54	5	TIFFSetField ( out , TIFFTAG_TILELENGTH , tile_height )
CALLEE	160:4	160:4	6	TIFFSetField
LEAF_NODE	160:4	160:4	7	TIFFSetField
LEAF_NODE	160:16	160:16	6	(
ARGUMENT	160:17	160:17	6	out
FIELD	160:17	160:17	7	out
LEAF_NODE	160:17	160:17	8	out
LEAF_NODE	160:20	160:20	6	,
ARGUMENT	160:22	160:22	6	TIFFTAG_TILELENGTH
FIELD	160:22	160:22	7	TIFFTAG_TILELENGTH
LEAF_NODE	160:22	160:22	8	TIFFTAG_TILELENGTH
LEAF_NODE	160:40	160:40	6	,
ARGUMENT	160:42	160:42	6	tile_height
FIELD	160:42	160:42	7	tile_height
LEAF_NODE	160:42	160:42	8	tile_height
LEAF_NODE	160:54	160:54	6	)
LEAF_NODE	160:55	160:55	4	;
LEAF_NODE	165:4	165:4	3	rastersize
LEAF_NODE	165:15	165:15	3	=
LEAF_NODE	165:17	165:17	3	tile_width
EXPR_STATEMENT	165:28	165:59	3	* tile_height * sizeof ( uint32 ) ;
EXPR	165:28	165:44	4	* tile_height * sizeof ( uint32 )
UNARY_EXPR	165:28	165:30	5	* tile_height
UNARY_OPERATOR	165:28	165:28	6	*
LEAF_NODE	165:28	165:28	7	*
FIELD	165:30	165:30	6	tile_height
LEAF_NODE	165:30	165:30	7	tile_height
LEAF_NODE	165:42	165:42	5	*
FUNCTION_CALL	165:44	165:58	5	sizeof ( uint32 )
CALLEE	165:44	165:44	6	sizeof
LEAF_NODE	165:44	165:44	7	sizeof
LEAF_NODE	165:51	165:51	6	(
ARGUMENT	165:52	165:52	6	uint32
FIELD	165:52	165:52	7	uint32
LEAF_NODE	165:52	165:52	8	uint32
LEAF_NODE	165:58	165:58	6	)
LEAF_NODE	165:59	165:59	4	;
SELECTION	166:4	167:4	3	
KEYWORD	166:4	166:4	4	if
LEAF_NODE	166:4	166:4	5	if
LEAF_NODE	166:7	166:7	4	(
CONDITION	166:8	166:8	4	tile_width != ( rastersize / tile_height ) / sizeof ( uint32 )
EXPR	166:8	166:51	5	tile_width != ( rastersize / tile_height ) / sizeof ( uint32 )
FIELD	166:8	166:8	6	tile_width
LEAF_NODE	166:8	166:8	7	tile_width
EQ_OPERATOR	166:19	166:19	6	!=
LEAF_NODE	166:19	166:19	7	!=
LEAF_NODE	166:22	166:22	6	(
FIELD	166:23	166:23	6	rastersize
LEAF_NODE	166:23	166:23	7	rastersize
LEAF_NODE	166:34	166:34	6	/
FIELD	166:36	166:36	6	tile_height
LEAF_NODE	166:36	166:36	7	tile_height
LEAF_NODE	166:47	166:47	6	)
LEAF_NODE	166:49	166:49	6	/
FUNCTION_CALL	166:51	166:65	6	sizeof ( uint32 )
CALLEE	166:51	166:51	7	sizeof
LEAF_NODE	166:51	166:51	8	sizeof
LEAF_NODE	166:57	166:57	7	(
ARGUMENT	166:59	166:59	7	uint32
FIELD	166:59	166:59	8	uint32
LEAF_NODE	166:59	166:59	9	uint32
LEAF_NODE	166:65	166:65	7	)
LEAF_NODE	166:66	166:66	4	)
STATEMENTS	167:4	170:4	4	
LEAF_NODE	167:4	167:4	5	{
STATEMENTS	168:1	169:1	5	
EXPR_STATEMENT	168:1	168:79	6	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating raster buffer" ) ;
EXPR	168:1	168:1	7	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating raster buffer" )
FUNCTION_CALL	168:1	168:78	8	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating raster buffer" )
CALLEE	168:1	168:1	9	TIFFError
LEAF_NODE	168:1	168:1	10	TIFFError
LEAF_NODE	168:10	168:10	9	(
ARGUMENT	168:11	168:11	9	TIFFFileName ( in )
FUNCTION_CALL	168:11	168:26	10	TIFFFileName ( in )
CALLEE	168:11	168:11	11	TIFFFileName
LEAF_NODE	168:11	168:11	12	TIFFFileName
LEAF_NODE	168:23	168:23	11	(
ARGUMENT	168:24	168:24	11	in
FIELD	168:24	168:24	12	in
LEAF_NODE	168:24	168:24	13	in
LEAF_NODE	168:26	168:26	11	)
LEAF_NODE	168:27	168:27	9	,
ARGUMENT	168:29	168:29	9	"Integer overflow when calculating raster buffer"
FIELD	168:29	168:29	10	"Integer overflow when calculating raster buffer"
LEAF_NODE	168:29	168:29	11	"Integer overflow when calculating raster buffer"
LEAF_NODE	168:78	168:78	9	)
LEAF_NODE	168:79	168:79	7	;
EXPR_STATEMENT	169:1	169:9	6	exit ( - 1 ) ;
EXPR	169:1	169:1	7	exit ( - 1 )
FUNCTION_CALL	169:1	169:8	8	exit ( - 1 )
CALLEE	169:1	169:1	9	exit
LEAF_NODE	169:1	169:1	10	exit
LEAF_NODE	169:5	169:5	9	(
ARGUMENT	169:6	169:6	9	- 1
UNARY_EXPR	169:6	169:7	10	- 1
UNARY_OPERATOR	169:6	169:6	11	-
LEAF_NODE	169:6	169:6	12	-
FIELD	169:7	169:7	11	1
LEAF_NODE	169:7	169:7	12	1
LEAF_NODE	169:8	169:8	9	)
LEAF_NODE	169:9	169:9	7	;
LEAF_NODE	170:4	170:4	5	}
EXPR_STATEMENT	171:4	171:45	3	raster = ( uint32 * ) _TIFFmalloc ( rastersize ) ;
EXPR	171:4	171:4	4	raster = ( uint32 * ) _TIFFmalloc ( rastersize )
ASSIGN	171:4	171:13	5	raster = ( uint32 * ) _TIFFmalloc ( rastersize )
LVAL	171:4	171:4	6	raster
FIELD	171:4	171:4	7	raster
LEAF_NODE	171:4	171:4	8	raster
ASSIGN_OP	171:11	171:11	6	=
LEAF_NODE	171:11	171:11	7	=
RVAL	171:13	171:22	6	( uint32 * ) _TIFFmalloc ( rastersize )
LEAF_NODE	171:13	171:13	7	(
TYPE_NAME	171:14	171:14	7	uint32
LEAF_NODE	171:14	171:14	8	uint32
LEAF_NODE	171:20	171:20	7	*
LEAF_NODE	171:21	171:21	7	)
FUNCTION_CALL	171:22	171:44	7	_TIFFmalloc ( rastersize )
CALLEE	171:22	171:22	8	_TIFFmalloc
LEAF_NODE	171:22	171:22	9	_TIFFmalloc
LEAF_NODE	171:33	171:33	8	(
ARGUMENT	171:34	171:34	8	rastersize
FIELD	171:34	171:34	9	rastersize
LEAF_NODE	171:34	171:34	10	rastersize
LEAF_NODE	171:44	171:44	8	)
LEAF_NODE	171:45	171:45	4	;
SELECTION	172:4	172:21	3	
KEYWORD	172:4	172:4	4	if
LEAF_NODE	172:4	172:4	5	if
LEAF_NODE	172:7	172:7	4	(
CONDITION	172:8	172:8	4	raster == 0
EXPR	172:8	172:18	5	raster == 0
FIELD	172:8	172:8	6	raster
LEAF_NODE	172:8	172:8	7	raster
EQ_OPERATOR	172:15	172:15	6	==
LEAF_NODE	172:15	172:15	7	==
FIELD	172:18	172:18	6	0
LEAF_NODE	172:18	172:18	7	0
LEAF_NODE	172:19	172:19	4	)
STATEMENTS	172:21	175:4	4	
LEAF_NODE	172:21	172:21	5	{
STATEMENTS	173:8	174:8	5	
EXPR_STATEMENT	173:8	173:65	6	TIFFError ( TIFFFileName ( in ) , "No space for raster buffer" ) ;
EXPR	173:8	173:8	7	TIFFError ( TIFFFileName ( in ) , "No space for raster buffer" )
FUNCTION_CALL	173:8	173:64	8	TIFFError ( TIFFFileName ( in ) , "No space for raster buffer" )
CALLEE	173:8	173:8	9	TIFFError
LEAF_NODE	173:8	173:8	10	TIFFError
LEAF_NODE	173:17	173:17	9	(
ARGUMENT	173:18	173:18	9	TIFFFileName ( in )
FUNCTION_CALL	173:18	173:33	10	TIFFFileName ( in )
CALLEE	173:18	173:18	11	TIFFFileName
LEAF_NODE	173:18	173:18	12	TIFFFileName
LEAF_NODE	173:30	173:30	11	(
ARGUMENT	173:31	173:31	11	in
FIELD	173:31	173:31	12	in
LEAF_NODE	173:31	173:31	13	in
LEAF_NODE	173:33	173:33	11	)
LEAF_NODE	173:34	173:34	9	,
ARGUMENT	173:36	173:36	9	"No space for raster buffer"
FIELD	173:36	173:36	10	"No space for raster buffer"
LEAF_NODE	173:36	173:36	11	"No space for raster buffer"
LEAF_NODE	173:64	173:64	9	)
LEAF_NODE	173:65	173:65	7	;
JUMP_STATEMENT	174:8	174:18	6	return ( 0 ) ;
KEYWORD	174:8	174:8	7	return
LEAF_NODE	174:8	174:8	8	return
DESTINATION	174:15	174:15	7	( 0 )
EXPR	174:15	174:17	8	( 0 )
LEAF_NODE	174:15	174:15	9	(
FIELD	174:16	174:16	9	0
LEAF_NODE	174:16	174:16	10	0
LEAF_NODE	174:17	174:17	9	)
LEAF_NODE	174:18	174:18	7	;
LEAF_NODE	175:4	175:4	5	}
EXPR_STATEMENT	181:4	181:47	3	wrk_linesize = tile_width * sizeof ( uint32 ) ;
EXPR	181:4	181:4	4	wrk_linesize = tile_width * sizeof ( uint32 )
ASSIGN	181:4	181:19	5	wrk_linesize = tile_width * sizeof ( uint32 )
LVAL	181:4	181:4	6	wrk_linesize
FIELD	181:4	181:4	7	wrk_linesize
LEAF_NODE	181:4	181:4	8	wrk_linesize
ASSIGN_OP	181:17	181:17	6	=
LEAF_NODE	181:17	181:17	7	=
RVAL	181:19	181:32	6	tile_width * sizeof ( uint32 )
FIELD	181:19	181:19	7	tile_width
LEAF_NODE	181:19	181:19	8	tile_width
LEAF_NODE	181:30	181:30	7	*
FUNCTION_CALL	181:32	181:46	7	sizeof ( uint32 )
CALLEE	181:32	181:32	8	sizeof
LEAF_NODE	181:32	181:32	9	sizeof
LEAF_NODE	181:39	181:39	8	(
ARGUMENT	181:40	181:40	8	uint32
FIELD	181:40	181:40	9	uint32
LEAF_NODE	181:40	181:40	10	uint32
LEAF_NODE	181:46	181:46	8	)
LEAF_NODE	181:47	181:47	4	;
SELECTION	182:4	183:4	3	
KEYWORD	182:4	182:4	4	if
LEAF_NODE	182:4	182:4	5	if
LEAF_NODE	182:7	182:7	4	(
CONDITION	182:8	182:8	4	tile_width != wrk_linesize / sizeof ( uint32 )
EXPR	182:8	182:37	5	tile_width != wrk_linesize / sizeof ( uint32 )
FIELD	182:8	182:8	6	tile_width
LEAF_NODE	182:8	182:8	7	tile_width
EQ_OPERATOR	182:19	182:19	6	!=
LEAF_NODE	182:19	182:19	7	!=
FIELD	182:22	182:22	6	wrk_linesize
LEAF_NODE	182:22	182:22	7	wrk_linesize
LEAF_NODE	182:35	182:35	6	/
FUNCTION_CALL	182:37	182:51	6	sizeof ( uint32 )
CALLEE	182:37	182:37	7	sizeof
LEAF_NODE	182:37	182:37	8	sizeof
LEAF_NODE	182:44	182:44	7	(
ARGUMENT	182:45	182:45	7	uint32
FIELD	182:45	182:45	8	uint32
LEAF_NODE	182:45	182:45	9	uint32
LEAF_NODE	182:51	182:51	7	)
LEAF_NODE	182:52	182:52	4	)
STATEMENTS	183:4	186:4	4	
LEAF_NODE	183:4	183:4	5	{
STATEMENTS	184:8	185:1	5	
EXPR_STATEMENT	184:8	184:88	6	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating wrk_line buffer" ) ;
EXPR	184:8	184:8	7	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating wrk_line buffer" )
FUNCTION_CALL	184:8	184:87	8	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating wrk_line buffer" )
CALLEE	184:8	184:8	9	TIFFError
LEAF_NODE	184:8	184:8	10	TIFFError
LEAF_NODE	184:17	184:17	9	(
ARGUMENT	184:18	184:18	9	TIFFFileName ( in )
FUNCTION_CALL	184:18	184:33	10	TIFFFileName ( in )
CALLEE	184:18	184:18	11	TIFFFileName
LEAF_NODE	184:18	184:18	12	TIFFFileName
LEAF_NODE	184:30	184:30	11	(
ARGUMENT	184:31	184:31	11	in
FIELD	184:31	184:31	12	in
LEAF_NODE	184:31	184:31	13	in
LEAF_NODE	184:33	184:33	11	)
LEAF_NODE	184:34	184:34	9	,
ARGUMENT	184:36	184:36	9	"Integer overflow when calculating wrk_line buffer"
FIELD	184:36	184:36	10	"Integer overflow when calculating wrk_line buffer"
LEAF_NODE	184:36	184:36	11	"Integer overflow when calculating wrk_line buffer"
LEAF_NODE	184:87	184:87	9	)
LEAF_NODE	184:88	184:88	7	;
EXPR_STATEMENT	185:1	185:9	6	exit ( - 1 ) ;
EXPR	185:1	185:1	7	exit ( - 1 )
FUNCTION_CALL	185:1	185:8	8	exit ( - 1 )
CALLEE	185:1	185:1	9	exit
LEAF_NODE	185:1	185:1	10	exit
LEAF_NODE	185:5	185:5	9	(
ARGUMENT	185:6	185:6	9	- 1
UNARY_EXPR	185:6	185:7	10	- 1
UNARY_OPERATOR	185:6	185:6	11	-
LEAF_NODE	185:6	185:6	12	-
FIELD	185:7	185:7	11	1
LEAF_NODE	185:7	185:7	12	1
LEAF_NODE	185:8	185:8	9	)
LEAF_NODE	185:9	185:9	7	;
LEAF_NODE	186:4	186:4	5	}
EXPR_STATEMENT	187:4	187:49	3	wrk_line = ( uint32 * ) _TIFFmalloc ( wrk_linesize ) ;
EXPR	187:4	187:4	4	wrk_line = ( uint32 * ) _TIFFmalloc ( wrk_linesize )
ASSIGN	187:4	187:15	5	wrk_line = ( uint32 * ) _TIFFmalloc ( wrk_linesize )
LVAL	187:4	187:4	6	wrk_line
FIELD	187:4	187:4	7	wrk_line
LEAF_NODE	187:4	187:4	8	wrk_line
ASSIGN_OP	187:13	187:13	6	=
LEAF_NODE	187:13	187:13	7	=
RVAL	187:15	187:24	6	( uint32 * ) _TIFFmalloc ( wrk_linesize )
LEAF_NODE	187:15	187:15	7	(
TYPE_NAME	187:16	187:16	7	uint32
LEAF_NODE	187:16	187:16	8	uint32
LEAF_NODE	187:22	187:22	7	*
LEAF_NODE	187:23	187:23	7	)
FUNCTION_CALL	187:24	187:48	7	_TIFFmalloc ( wrk_linesize )
CALLEE	187:24	187:24	8	_TIFFmalloc
LEAF_NODE	187:24	187:24	9	_TIFFmalloc
LEAF_NODE	187:35	187:35	8	(
ARGUMENT	187:36	187:36	8	wrk_linesize
FIELD	187:36	187:36	9	wrk_linesize
LEAF_NODE	187:36	187:36	10	wrk_linesize
LEAF_NODE	187:48	187:48	8	)
LEAF_NODE	187:49	187:49	4	;
SELECTION	188:4	188:19	3	
KEYWORD	188:4	188:4	4	if
LEAF_NODE	188:4	188:4	5	if
LEAF_NODE	188:7	188:7	4	(
CONDITION	188:8	188:8	4	! wrk_line
EXPR	188:8	188:8	5	! wrk_line
UNARY_EXPR	188:8	188:9	6	! wrk_line
UNARY_OPERATOR	188:8	188:8	7	!
LEAF_NODE	188:8	188:8	8	!
FIELD	188:9	188:9	7	wrk_line
LEAF_NODE	188:9	188:9	8	wrk_line
LEAF_NODE	188:17	188:17	4	)
STATEMENTS	188:19	191:4	4	
LEAF_NODE	188:19	188:19	5	{
STATEMENTS	189:8	190:8	5	
EXPR_STATEMENT	189:8	189:74	6	TIFFError ( TIFFFileName ( in ) , "No space for raster scanline buffer" ) ;
EXPR	189:8	189:8	7	TIFFError ( TIFFFileName ( in ) , "No space for raster scanline buffer" )
FUNCTION_CALL	189:8	189:73	8	TIFFError ( TIFFFileName ( in ) , "No space for raster scanline buffer" )
CALLEE	189:8	189:8	9	TIFFError
LEAF_NODE	189:8	189:8	10	TIFFError
LEAF_NODE	189:17	189:17	9	(
ARGUMENT	189:18	189:18	9	TIFFFileName ( in )
FUNCTION_CALL	189:18	189:33	10	TIFFFileName ( in )
CALLEE	189:18	189:18	11	TIFFFileName
LEAF_NODE	189:18	189:18	12	TIFFFileName
LEAF_NODE	189:30	189:30	11	(
ARGUMENT	189:31	189:31	11	in
FIELD	189:31	189:31	12	in
LEAF_NODE	189:31	189:31	13	in
LEAF_NODE	189:33	189:33	11	)
LEAF_NODE	189:34	189:34	9	,
ARGUMENT	189:36	189:36	9	"No space for raster scanline buffer"
FIELD	189:36	189:36	10	"No space for raster scanline buffer"
LEAF_NODE	189:36	189:36	11	"No space for raster scanline buffer"
LEAF_NODE	189:73	189:73	9	)
LEAF_NODE	189:74	189:74	7	;
EXPR_STATEMENT	190:8	190:14	6	ok = 0 ;
EXPR	190:8	190:8	7	ok = 0
ASSIGN	190:8	190:13	8	ok = 0
LVAL	190:8	190:8	9	ok
FIELD	190:8	190:8	10	ok
LEAF_NODE	190:8	190:8	11	ok
ASSIGN_OP	190:11	190:11	9	=
LEAF_NODE	190:11	190:11	10	=
RVAL	190:13	190:13	9	0
FIELD	190:13	190:13	10	0
LEAF_NODE	190:13	190:13	11	0
LEAF_NODE	190:14	190:14	7	;
LEAF_NODE	191:4	191:4	5	}
ITERATION	196:4	197:4	3	
KEYWORD	196:4	196:4	4	for
LEAF_NODE	196:4	196:4	5	for
LEAF_NODE	196:7	196:7	4	(
FOR_INIT	196:9	196:16	4	row = 0 ;
EXPR	196:9	196:9	5	row = 0
ASSIGN	196:9	196:15	6	row = 0
LVAL	196:9	196:9	7	row
FIELD	196:9	196:9	8	row
LEAF_NODE	196:9	196:9	9	row
ASSIGN_OP	196:13	196:13	7	=
LEAF_NODE	196:13	196:13	8	=
RVAL	196:15	196:15	7	0
FIELD	196:15	196:15	8	0
LEAF_NODE	196:15	196:15	9	0
LEAF_NODE	196:16	196:16	5	;
CONDITION	196:18	196:18	4	ok && row < height
EXPR	196:18	196:18	5	ok && row < height
AND	196:18	196:24	6	ok && row < height
EXPR	196:18	196:18	7	ok
FIELD	196:18	196:18	8	ok
LEAF_NODE	196:18	196:18	9	ok
LEAF_NODE	196:21	196:21	7	&&
EXPR	196:24	196:30	7	row < height
FIELD	196:24	196:24	8	row
LEAF_NODE	196:24	196:24	9	row
REL_OPERATOR	196:28	196:28	8	<
LEAF_NODE	196:28	196:28	9	<
FIELD	196:30	196:30	8	height
LEAF_NODE	196:30	196:30	9	height
LEAF_NODE	196:36	196:36	4	;
FOR_EXPR	196:38	196:38	4	row += tile_height
EXPR	196:38	196:38	5	row += tile_height
ASSIGN	196:38	196:45	6	row += tile_height
LVAL	196:38	196:38	7	row
FIELD	196:38	196:38	8	row
LEAF_NODE	196:38	196:38	9	row
ASSIGN_OP	196:42	196:42	7	+=
LEAF_NODE	196:42	196:42	8	+=
RVAL	196:45	196:45	7	tile_height
FIELD	196:45	196:45	8	tile_height
LEAF_NODE	196:45	196:45	9	tile_height
LEAF_NODE	196:57	196:57	4	)
STATEMENTS	197:4	246:4	4	
LEAF_NODE	197:4	197:4	5	{
STATEMENTS	198:8	198:8	5	
ITERATION	198:8	199:8	6	
KEYWORD	198:8	198:8	7	for
LEAF_NODE	198:8	198:8	8	for
LEAF_NODE	198:11	198:11	7	(
FOR_INIT	198:13	198:20	7	col = 0 ;
EXPR	198:13	198:13	8	col = 0
ASSIGN	198:13	198:19	9	col = 0
LVAL	198:13	198:13	10	col
FIELD	198:13	198:13	11	col
LEAF_NODE	198:13	198:13	12	col
ASSIGN_OP	198:17	198:17	10	=
LEAF_NODE	198:17	198:17	11	=
RVAL	198:19	198:19	10	0
FIELD	198:19	198:19	11	0
LEAF_NODE	198:19	198:19	12	0
LEAF_NODE	198:20	198:20	8	;
CONDITION	198:22	198:22	7	ok && col < width
EXPR	198:22	198:22	8	ok && col < width
AND	198:22	198:28	9	ok && col < width
EXPR	198:22	198:22	10	ok
FIELD	198:22	198:22	11	ok
LEAF_NODE	198:22	198:22	12	ok
LEAF_NODE	198:25	198:25	10	&&
EXPR	198:28	198:34	10	col < width
FIELD	198:28	198:28	11	col
LEAF_NODE	198:28	198:28	12	col
REL_OPERATOR	198:32	198:32	11	<
LEAF_NODE	198:32	198:32	12	<
FIELD	198:34	198:34	11	width
LEAF_NODE	198:34	198:34	12	width
LEAF_NODE	198:39	198:39	7	;
FOR_EXPR	198:41	198:41	7	col += tile_width
EXPR	198:41	198:41	8	col += tile_width
ASSIGN	198:41	198:48	9	col += tile_width
LVAL	198:41	198:41	10	col
FIELD	198:41	198:41	11	col
LEAF_NODE	198:41	198:41	12	col
ASSIGN_OP	198:45	198:45	10	+=
LEAF_NODE	198:45	198:45	11	+=
RVAL	198:48	198:48	10	tile_width
FIELD	198:48	198:48	11	tile_width
LEAF_NODE	198:48	198:48	12	tile_width
LEAF_NODE	198:59	198:59	7	)
STATEMENTS	199:8	245:8	7	
LEAF_NODE	199:8	199:8	8	{
STATEMENTS	200:12	244:12	8	
SIMPLE_DECL	200:12	200:24	9	uint32 i_row ;
VAR_DECL	200:12	200:19	10	uint32 i_row
TYPE	200:12	200:12	11	uint32
TYPE_NAME	200:12	200:12	12	uint32
LEAF_NODE	200:12	200:12	13	uint32
NAME	200:19	200:19	11	i_row
LEAF_NODE	200:19	200:19	12	i_row
LEAF_NODE	200:24	200:24	10	;
SELECTION	203:12	203:57	9	
KEYWORD	203:12	203:12	10	if
LEAF_NODE	203:12	203:12	11	if
LEAF_NODE	203:15	203:15	10	(
CONDITION	203:16	203:16	10	! TIFFReadRGBATile ( in , col , row , raster )
EXPR	203:16	203:16	11	! TIFFReadRGBATile ( in , col , row , raster )
UNARY_EXPR	203:16	203:17	12	! TIFFReadRGBATile ( in , col , row , raster )
UNARY_OPERATOR	203:16	203:16	13	!
LEAF_NODE	203:16	203:16	14	!
FUNCTION_CALL	203:17	203:54	13	TIFFReadRGBATile ( in , col , row , raster )
CALLEE	203:17	203:17	14	TIFFReadRGBATile
LEAF_NODE	203:17	203:17	15	TIFFReadRGBATile
LEAF_NODE	203:33	203:33	14	(
ARGUMENT	203:34	203:34	14	in
FIELD	203:34	203:34	15	in
LEAF_NODE	203:34	203:34	16	in
LEAF_NODE	203:36	203:36	14	,
ARGUMENT	203:38	203:38	14	col
FIELD	203:38	203:38	15	col
LEAF_NODE	203:38	203:38	16	col
LEAF_NODE	203:41	203:41	14	,
ARGUMENT	203:43	203:43	14	row
FIELD	203:43	203:43	15	row
LEAF_NODE	203:43	203:43	16	row
LEAF_NODE	203:46	203:46	14	,
ARGUMENT	203:48	203:48	14	raster
FIELD	203:48	203:48	15	raster
LEAF_NODE	203:48	203:48	16	raster
LEAF_NODE	203:54	203:54	14	)
LEAF_NODE	203:55	203:55	10	)
STATEMENTS	203:57	206:12	10	
LEAF_NODE	203:57	203:57	11	{
STATEMENTS	204:16	205:16	11	
EXPR_STATEMENT	204:16	204:22	12	ok = 0 ;
EXPR	204:16	204:16	13	ok = 0
ASSIGN	204:16	204:21	14	ok = 0
LVAL	204:16	204:16	15	ok
FIELD	204:16	204:16	16	ok
LEAF_NODE	204:16	204:16	17	ok
ASSIGN_OP	204:19	204:19	15	=
LEAF_NODE	204:19	204:19	16	=
RVAL	204:21	204:21	15	0
FIELD	204:21	204:21	16	0
LEAF_NODE	204:21	204:21	17	0
LEAF_NODE	204:22	204:22	13	;
JUMP_STATEMENT	205:16	205:21	12	break DESTINATION ;
KEYWORD	205:16	205:16	13	break
LEAF_NODE	205:16	205:16	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	205:21	205:21	13	;
LEAF_NODE	206:12	206:12	11	}
EXPR_STATEMENT	214:5	214:58	9	TIFFSwabArrayOfLong ( raster , tile_width * tile_height ) ;
EXPR	214:5	214:5	10	TIFFSwabArrayOfLong ( raster , tile_width * tile_height )
FUNCTION_CALL	214:5	214:57	11	TIFFSwabArrayOfLong ( raster , tile_width * tile_height )
CALLEE	214:5	214:5	12	TIFFSwabArrayOfLong
LEAF_NODE	214:5	214:5	13	TIFFSwabArrayOfLong
LEAF_NODE	214:24	214:24	12	(
ARGUMENT	214:25	214:25	12	raster
FIELD	214:25	214:25	13	raster
LEAF_NODE	214:25	214:25	14	raster
LEAF_NODE	214:31	214:31	12	,
ARGUMENT	214:33	214:46	12	tile_width * tile_height
FIELD	214:33	214:33	13	tile_width
LEAF_NODE	214:33	214:33	14	tile_width
LEAF_NODE	214:44	214:44	13	*
FIELD	214:46	214:46	13	tile_height
LEAF_NODE	214:46	214:46	14	tile_height
LEAF_NODE	214:57	214:57	12	)
LEAF_NODE	214:58	214:58	10	;
ITERATION	221:12	222:12	9	
KEYWORD	221:12	221:12	10	for
LEAF_NODE	221:12	221:12	11	for
LEAF_NODE	221:15	221:15	10	(
FOR_INIT	221:17	221:26	10	i_row = 0 ;
EXPR	221:17	221:17	11	i_row = 0
ASSIGN	221:17	221:25	12	i_row = 0
LVAL	221:17	221:17	13	i_row
FIELD	221:17	221:17	14	i_row
LEAF_NODE	221:17	221:17	15	i_row
ASSIGN_OP	221:23	221:23	13	=
LEAF_NODE	221:23	221:23	14	=
RVAL	221:25	221:25	13	0
FIELD	221:25	221:25	14	0
LEAF_NODE	221:25	221:25	15	0
LEAF_NODE	221:26	221:26	11	;
CONDITION	221:28	221:28	10	i_row < tile_height / 2
EXPR	221:28	221:50	11	i_row < tile_height / 2
FIELD	221:28	221:28	12	i_row
LEAF_NODE	221:28	221:28	13	i_row
REL_OPERATOR	221:34	221:34	12	<
LEAF_NODE	221:34	221:34	13	<
FIELD	221:36	221:36	12	tile_height
LEAF_NODE	221:36	221:36	13	tile_height
LEAF_NODE	221:48	221:48	12	/
FIELD	221:50	221:50	12	2
LEAF_NODE	221:50	221:50	13	2
LEAF_NODE	221:51	221:51	10	;
FOR_EXPR	221:53	221:53	10	i_row ++
EXPR	221:53	221:53	11	i_row ++
FIELD	221:53	221:58	12	i_row ++
LEAF_NODE	221:53	221:53	13	i_row
LEAF_NODE	221:58	221:58	13	++
LEAF_NODE	221:61	221:61	10	)
STATEMENTS	222:12	231:12	10	
LEAF_NODE	222:12	222:12	11	{
STATEMENTS	223:16	230:16	11	
SIMPLE_DECL	223:16	223:46	12	uint32 * top_line , uint32 * bottom_line ;
INIT_DECL_LIST	223:16	223:16	13	uint32 * top_line , uint32 * bottom_line
VAR_DECL	223:16	223:24	14	uint32 * top_line
TYPE	223:16	223:23	15	uint32 *
TYPE_NAME	223:16	223:16	16	uint32
LEAF_NODE	223:16	223:16	17	uint32
POINTER	223:23	223:23	16	*
LEAF_NODE	223:23	223:23	17	*
NAME	223:24	223:24	15	top_line
LEAF_NODE	223:24	223:24	16	top_line
LEAF_NODE	223:32	223:32	14	,
VAR_DECL	223:16	223:35	14	uint32 * bottom_line
TYPE	223:16	223:34	15	uint32 *
TYPE_NAME	223:16	223:16	16	uint32
LEAF_NODE	223:16	223:16	17	uint32
POINTER	223:34	223:34	16	*
LEAF_NODE	223:34	223:34	17	*
NAME	223:35	223:35	15	bottom_line
LEAF_NODE	223:35	223:35	16	bottom_line
LEAF_NODE	223:46	223:46	13	;
EXPR_STATEMENT	225:16	225:54	12	top_line = raster + tile_width * i_row ;
EXPR	225:16	225:16	13	top_line = raster + tile_width * i_row
ASSIGN	225:16	225:27	14	top_line = raster + tile_width * i_row
LVAL	225:16	225:16	15	top_line
FIELD	225:16	225:16	16	top_line
LEAF_NODE	225:16	225:16	17	top_line
ASSIGN_OP	225:25	225:25	15	=
LEAF_NODE	225:25	225:25	16	=
RVAL	225:27	225:49	15	raster + tile_width * i_row
FIELD	225:27	225:27	16	raster
LEAF_NODE	225:27	225:27	17	raster
LEAF_NODE	225:34	225:34	16	+
FIELD	225:36	225:36	16	tile_width
LEAF_NODE	225:36	225:36	17	tile_width
LEAF_NODE	225:47	225:47	16	*
FIELD	225:49	225:49	16	i_row
LEAF_NODE	225:49	225:49	17	i_row
LEAF_NODE	225:54	225:54	13	;
EXPR_STATEMENT	226:16	226:73	12	bottom_line = raster + tile_width * ( tile_height - i_row - 1 ) ;
EXPR	226:16	226:16	13	bottom_line = raster + tile_width * ( tile_height - i_row - 1 )
ASSIGN	226:16	226:30	14	bottom_line = raster + tile_width * ( tile_height - i_row - 1 )
LVAL	226:16	226:16	15	bottom_line
FIELD	226:16	226:16	16	bottom_line
LEAF_NODE	226:16	226:16	17	bottom_line
ASSIGN_OP	226:28	226:28	15	=
LEAF_NODE	226:28	226:28	16	=
RVAL	226:30	226:72	15	raster + tile_width * ( tile_height - i_row - 1 )
FIELD	226:30	226:30	16	raster
LEAF_NODE	226:30	226:30	17	raster
LEAF_NODE	226:37	226:37	16	+
FIELD	226:39	226:39	16	tile_width
LEAF_NODE	226:39	226:39	17	tile_width
LEAF_NODE	226:50	226:50	16	*
LEAF_NODE	226:52	226:52	16	(
FIELD	226:53	226:53	16	tile_height
LEAF_NODE	226:53	226:53	17	tile_height
LEAF_NODE	226:64	226:64	16	-
FIELD	226:65	226:65	16	i_row
LEAF_NODE	226:65	226:65	17	i_row
LEAF_NODE	226:70	226:70	16	-
FIELD	226:71	226:71	16	1
LEAF_NODE	226:71	226:71	17	1
LEAF_NODE	226:72	226:72	16	)
LEAF_NODE	226:73	226:73	13	;
EXPR_STATEMENT	228:16	228:61	12	_TIFFmemcpy ( wrk_line , top_line , 4 * tile_width ) ;
EXPR	228:16	228:16	13	_TIFFmemcpy ( wrk_line , top_line , 4 * tile_width )
FUNCTION_CALL	228:16	228:60	14	_TIFFmemcpy ( wrk_line , top_line , 4 * tile_width )
CALLEE	228:16	228:16	15	_TIFFmemcpy
LEAF_NODE	228:16	228:16	16	_TIFFmemcpy
LEAF_NODE	228:27	228:27	15	(
ARGUMENT	228:28	228:28	15	wrk_line
FIELD	228:28	228:28	16	wrk_line
LEAF_NODE	228:28	228:28	17	wrk_line
LEAF_NODE	228:36	228:36	15	,
ARGUMENT	228:38	228:38	15	top_line
FIELD	228:38	228:38	16	top_line
LEAF_NODE	228:38	228:38	17	top_line
LEAF_NODE	228:46	228:46	15	,
ARGUMENT	228:48	228:50	15	4 * tile_width
FIELD	228:48	228:48	16	4
LEAF_NODE	228:48	228:48	17	4
LEAF_NODE	228:49	228:49	16	*
FIELD	228:50	228:50	16	tile_width
LEAF_NODE	228:50	228:50	17	tile_width
LEAF_NODE	228:60	228:60	15	)
LEAF_NODE	228:61	228:61	13	;
EXPR_STATEMENT	229:16	229:64	12	_TIFFmemcpy ( top_line , bottom_line , 4 * tile_width ) ;
EXPR	229:16	229:16	13	_TIFFmemcpy ( top_line , bottom_line , 4 * tile_width )
FUNCTION_CALL	229:16	229:63	14	_TIFFmemcpy ( top_line , bottom_line , 4 * tile_width )
CALLEE	229:16	229:16	15	_TIFFmemcpy
LEAF_NODE	229:16	229:16	16	_TIFFmemcpy
LEAF_NODE	229:27	229:27	15	(
ARGUMENT	229:28	229:28	15	top_line
FIELD	229:28	229:28	16	top_line
LEAF_NODE	229:28	229:28	17	top_line
LEAF_NODE	229:36	229:36	15	,
ARGUMENT	229:38	229:38	15	bottom_line
FIELD	229:38	229:38	16	bottom_line
LEAF_NODE	229:38	229:38	17	bottom_line
LEAF_NODE	229:49	229:49	15	,
ARGUMENT	229:51	229:53	15	4 * tile_width
FIELD	229:51	229:51	16	4
LEAF_NODE	229:51	229:51	17	4
LEAF_NODE	229:52	229:52	16	*
FIELD	229:53	229:53	16	tile_width
LEAF_NODE	229:53	229:53	17	tile_width
LEAF_NODE	229:63	229:63	15	)
LEAF_NODE	229:64	229:64	13	;
EXPR_STATEMENT	230:16	230:64	12	_TIFFmemcpy ( bottom_line , wrk_line , 4 * tile_width ) ;
EXPR	230:16	230:16	13	_TIFFmemcpy ( bottom_line , wrk_line , 4 * tile_width )
FUNCTION_CALL	230:16	230:63	14	_TIFFmemcpy ( bottom_line , wrk_line , 4 * tile_width )
CALLEE	230:16	230:16	15	_TIFFmemcpy
LEAF_NODE	230:16	230:16	16	_TIFFmemcpy
LEAF_NODE	230:27	230:27	15	(
ARGUMENT	230:28	230:28	15	bottom_line
FIELD	230:28	230:28	16	bottom_line
LEAF_NODE	230:28	230:28	17	bottom_line
LEAF_NODE	230:39	230:39	15	,
ARGUMENT	230:41	230:41	15	wrk_line
FIELD	230:41	230:41	16	wrk_line
LEAF_NODE	230:41	230:41	17	wrk_line
LEAF_NODE	230:49	230:49	15	,
ARGUMENT	230:51	230:53	15	4 * tile_width
FIELD	230:51	230:51	16	4
LEAF_NODE	230:51	230:51	17	4
LEAF_NODE	230:52	230:52	16	*
FIELD	230:53	230:53	16	tile_width
LEAF_NODE	230:53	230:53	17	tile_width
LEAF_NODE	230:63	230:63	15	)
LEAF_NODE	230:64	230:64	13	;
LEAF_NODE	231:12	231:12	11	}
LEAF_NODE	237:12	237:12	9	if
LEAF_NODE	237:14	237:14	9	(
LEAF_NODE	237:16	237:16	9	TIFFWriteEncodedTile
LEAF_NODE	237:36	237:36	9	(
LEAF_NODE	237:38	237:38	9	out
LEAF_NODE	237:41	237:41	9	,
LEAF_NODE	238:38	238:38	9	TIFFComputeTile
LEAF_NODE	238:53	238:53	9	(
LEAF_NODE	238:55	238:55	9	out
LEAF_NODE	238:58	238:58	9	,
LEAF_NODE	238:60	238:60	9	col
LEAF_NODE	238:63	238:63	9	,
LEAF_NODE	238:65	238:65	9	row
LEAF_NODE	238:68	238:68	9	,
LEAF_NODE	238:70	238:70	9	0
LEAF_NODE	238:71	238:71	9	,
LEAF_NODE	238:73	238:73	9	0
LEAF_NODE	238:74	238:74	9	)
LEAF_NODE	238:75	238:75	9	,
LEAF_NODE	239:38	239:38	9	raster
LEAF_NODE	239:44	239:44	9	,
LEAF_NODE	240:38	240:38	9	4
LEAF_NODE	240:40	240:40	9	*
LEAF_NODE	240:42	240:42	9	tile_width
LEAF_NODE	240:53	240:53	9	*
LEAF_NODE	240:55	240:55	9	tile_height
LEAF_NODE	240:67	240:67	9	)
LEAF_NODE	240:69	240:69	9	==
LEAF_NODE	240:72	240:72	9	-
LEAF_NODE	240:73	240:73	9	1
LEAF_NODE	240:75	240:75	9	)
LEAF_NODE	241:12	241:12	9	{
STATEMENTS	242:16	243:16	9	
EXPR_STATEMENT	242:16	242:22	10	ok = 0 ;
EXPR	242:16	242:16	11	ok = 0
ASSIGN	242:16	242:21	12	ok = 0
LVAL	242:16	242:16	13	ok
FIELD	242:16	242:16	14	ok
LEAF_NODE	242:16	242:16	15	ok
ASSIGN_OP	242:19	242:19	13	=
LEAF_NODE	242:19	242:19	14	=
RVAL	242:21	242:21	13	0
FIELD	242:21	242:21	14	0
LEAF_NODE	242:21	242:21	15	0
LEAF_NODE	242:22	242:22	11	;
JUMP_STATEMENT	243:16	243:21	10	break DESTINATION ;
KEYWORD	243:16	243:16	11	break
LEAF_NODE	243:16	243:16	12	break
LEAF_NODE	0:0	0:0	11	DESTINATION
LEAF_NODE	243:21	243:21	11	;
LEAF_NODE	244:12	244:12	9	}
LEAF_NODE	245:8	245:8	8	}
LEAF_NODE	246:4	246:4	5	}
EXPR_STATEMENT	248:4	248:23	3	_TIFFfree ( raster ) ;
EXPR	248:4	248:4	4	_TIFFfree ( raster )
FUNCTION_CALL	248:4	248:22	5	_TIFFfree ( raster )
CALLEE	248:4	248:4	6	_TIFFfree
LEAF_NODE	248:4	248:4	7	_TIFFfree
LEAF_NODE	248:13	248:13	6	(
ARGUMENT	248:15	248:15	6	raster
FIELD	248:15	248:15	7	raster
LEAF_NODE	248:15	248:15	8	raster
LEAF_NODE	248:22	248:22	6	)
LEAF_NODE	248:23	248:23	4	;
EXPR_STATEMENT	249:4	249:25	3	_TIFFfree ( wrk_line ) ;
EXPR	249:4	249:4	4	_TIFFfree ( wrk_line )
FUNCTION_CALL	249:4	249:24	5	_TIFFfree ( wrk_line )
CALLEE	249:4	249:4	6	_TIFFfree
LEAF_NODE	249:4	249:4	7	_TIFFfree
LEAF_NODE	249:13	249:13	6	(
ARGUMENT	249:15	249:15	6	wrk_line
FIELD	249:15	249:15	7	wrk_line
LEAF_NODE	249:15	249:15	8	wrk_line
LEAF_NODE	249:24	249:24	6	)
LEAF_NODE	249:25	249:25	4	;
JUMP_STATEMENT	251:4	251:13	3	return ok ;
KEYWORD	251:4	251:4	4	return
LEAF_NODE	251:4	251:4	5	return
DESTINATION	251:11	251:11	4	ok
EXPR	251:11	251:11	5	ok
FIELD	251:11	251:11	6	ok
LEAF_NODE	251:11	251:11	7	ok
LEAF_NODE	251:13	251:13	4	;
LEAF_NODE	252:0	252:0	2	}
FUNCTION_DEF	254:0	368:0	1	
RETURN_TYPE	254:0	254:7	2	static int
LEAF_NODE	254:0	254:0	3	static
TYPE_NAME	254:7	254:7	3	int
LEAF_NODE	254:7	254:7	4	int
FUNCTION_NAME	255:0	255:0	2	cvt_by_strip
LEAF_NODE	255:0	255:0	3	cvt_by_strip
PARAMETER_LIST	255:12	255:34	2	( TIFF * in , TIFF * out )
LEAF_NODE	255:12	255:12	3	(
PARAMETER_DECL	255:14	255:20	3	TIFF * in
TYPE	255:14	255:19	4	TIFF *
TYPE_NAME	255:14	255:14	5	TIFF
LEAF_NODE	255:14	255:14	6	TIFF
POINTER	255:19	255:19	5	*
LEAF_NODE	255:19	255:19	6	*
NAME	255:20	255:20	4	in
LEAF_NODE	255:20	255:20	5	in
LEAF_NODE	255:22	255:22	3	,
PARAMETER_DECL	255:24	255:30	3	TIFF * out
TYPE	255:24	255:29	4	TIFF *
TYPE_NAME	255:24	255:24	5	TIFF
LEAF_NODE	255:24	255:24	6	TIFF
POINTER	255:29	255:29	5	*
LEAF_NODE	255:29	255:29	6	*
NAME	255:30	255:30	4	out
LEAF_NODE	255:30	255:30	5	out
LEAF_NODE	255:34	255:34	3	)
LEAF_NODE	257:0	257:0	2	{
STATEMENTS	258:4	367:4	2	
SIMPLE_DECL	258:4	258:18	3	uint32 * raster ;
VAR_DECL	258:4	258:12	4	uint32 * raster
TYPE	258:4	258:10	5	uint32 *
TYPE_NAME	258:4	258:4	6	uint32
LEAF_NODE	258:4	258:4	7	uint32
POINTER	258:10	258:10	6	*
LEAF_NODE	258:10	258:10	7	*
NAME	258:12	258:12	5	raster
LEAF_NODE	258:12	258:12	6	raster
LEAF_NODE	258:18	258:18	4	;
SIMPLE_DECL	259:4	259:25	3	uint32 width , uint32 height ;
INIT_DECL_LIST	259:4	259:4	4	uint32 width , uint32 height
VAR_DECL	259:4	259:12	5	uint32 width
TYPE	259:4	259:4	6	uint32
TYPE_NAME	259:4	259:4	7	uint32
LEAF_NODE	259:4	259:4	8	uint32
NAME	259:12	259:12	6	width
LEAF_NODE	259:12	259:12	7	width
LEAF_NODE	259:17	259:17	5	,
VAR_DECL	259:4	259:19	5	uint32 height
TYPE	259:4	259:4	6	uint32
TYPE_NAME	259:4	259:4	7	uint32
LEAF_NODE	259:4	259:4	8	uint32
NAME	259:19	259:19	6	height
LEAF_NODE	259:19	259:19	7	height
LEAF_NODE	259:25	259:25	4	;
SIMPLE_DECL	260:4	260:15	3	uint32 row ;
VAR_DECL	260:4	260:12	4	uint32 row
TYPE	260:4	260:4	5	uint32
TYPE_NAME	260:4	260:4	6	uint32
LEAF_NODE	260:4	260:4	7	uint32
NAME	260:12	260:12	5	row
LEAF_NODE	260:12	260:12	6	row
LEAF_NODE	260:15	260:15	4	;
SIMPLE_DECL	261:4	261:21	3	uint32 * wrk_line ;
VAR_DECL	261:4	261:13	4	uint32 * wrk_line
TYPE	261:4	261:12	5	uint32 *
TYPE_NAME	261:4	261:4	6	uint32
LEAF_NODE	261:4	261:4	7	uint32
POINTER	261:12	261:12	6	*
LEAF_NODE	261:12	261:12	7	*
NAME	261:13	261:13	5	wrk_line
LEAF_NODE	261:13	261:13	6	wrk_line
LEAF_NODE	261:21	261:21	4	;
SIMPLE_DECL	262:4	262:18	3	int ok ; ok = 1 ;
VAR_DECL	262:4	262:12	4	int ok ; ok = 1
TYPE	262:4	262:4	5	int
TYPE_NAME	262:4	262:4	6	int
LEAF_NODE	262:4	262:4	7	int
NAME	262:12	262:12	5	ok
LEAF_NODE	262:12	262:12	6	ok
LEAF_NODE	0:0	0:0	5	;
INIT	262:12	262:12	5	ok = 1
ASSIGN	262:12	262:17	6	ok = 1
LVAL	262:12	262:12	7	ok
NAME	262:12	262:12	8	ok
LEAF_NODE	262:12	262:12	9	ok
ASSIGN_OP	262:15	262:15	7	=
LEAF_NODE	262:15	262:15	8	=
RVAL	262:17	262:17	7	1
FIELD	262:17	262:17	8	1
LEAF_NODE	262:17	262:17	9	1
LEAF_NODE	262:18	262:18	4	;
SIMPLE_DECL	263:4	263:36	3	uint32 rastersize , uint32 wrk_linesize ;
INIT_DECL_LIST	263:4	263:4	4	uint32 rastersize , uint32 wrk_linesize
VAR_DECL	263:4	263:12	5	uint32 rastersize
TYPE	263:4	263:4	6	uint32
TYPE_NAME	263:4	263:4	7	uint32
LEAF_NODE	263:4	263:4	8	uint32
NAME	263:12	263:12	6	rastersize
LEAF_NODE	263:12	263:12	7	rastersize
LEAF_NODE	263:22	263:22	5	,
VAR_DECL	263:4	263:24	5	uint32 wrk_linesize
TYPE	263:4	263:4	6	uint32
TYPE_NAME	263:4	263:4	7	uint32
LEAF_NODE	263:4	263:4	8	uint32
NAME	263:24	263:24	6	wrk_linesize
LEAF_NODE	263:24	263:24	7	wrk_linesize
LEAF_NODE	263:36	263:36	4	;
EXPR_STATEMENT	265:4	265:48	3	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width ) ;
EXPR	265:4	265:4	4	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
FUNCTION_CALL	265:4	265:47	5	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
CALLEE	265:4	265:4	6	TIFFGetField
LEAF_NODE	265:4	265:4	7	TIFFGetField
LEAF_NODE	265:16	265:16	6	(
ARGUMENT	265:17	265:17	6	in
FIELD	265:17	265:17	7	in
LEAF_NODE	265:17	265:17	8	in
LEAF_NODE	265:19	265:19	6	,
ARGUMENT	265:21	265:21	6	TIFFTAG_IMAGEWIDTH
FIELD	265:21	265:21	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	265:21	265:21	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	265:39	265:39	6	,
ARGUMENT	265:41	265:41	6	& width
UNARY_EXPR	265:41	265:42	7	& width
UNARY_OPERATOR	265:41	265:41	8	&
LEAF_NODE	265:41	265:41	9	&
FIELD	265:42	265:42	8	width
LEAF_NODE	265:42	265:42	9	width
LEAF_NODE	265:47	265:47	6	)
LEAF_NODE	265:48	265:48	4	;
EXPR_STATEMENT	266:4	266:50	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height ) ;
EXPR	266:4	266:4	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height )
FUNCTION_CALL	266:4	266:49	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height )
CALLEE	266:4	266:4	6	TIFFGetField
LEAF_NODE	266:4	266:4	7	TIFFGetField
LEAF_NODE	266:16	266:16	6	(
ARGUMENT	266:17	266:17	6	in
FIELD	266:17	266:17	7	in
LEAF_NODE	266:17	266:17	8	in
LEAF_NODE	266:19	266:19	6	,
ARGUMENT	266:21	266:21	6	TIFFTAG_IMAGELENGTH
FIELD	266:21	266:21	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	266:21	266:21	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	266:40	266:40	6	,
ARGUMENT	266:42	266:42	6	& height
UNARY_EXPR	266:42	266:43	7	& height
UNARY_OPERATOR	266:42	266:42	8	&
LEAF_NODE	266:42	266:42	9	&
FIELD	266:43	266:43	8	height
LEAF_NODE	266:43	266:43	9	height
LEAF_NODE	266:49	266:49	6	)
LEAF_NODE	266:50	266:50	4	;
SELECTION	268:4	268:65	3	
KEYWORD	268:4	268:4	4	if
LEAF_NODE	268:4	268:4	5	if
LEAF_NODE	268:6	268:6	4	(
CONDITION	268:8	268:8	4	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
EXPR	268:8	268:8	5	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
UNARY_EXPR	268:8	268:9	6	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
UNARY_OPERATOR	268:8	268:8	7	!
LEAF_NODE	268:8	268:8	8	!
FUNCTION_CALL	268:9	268:61	7	TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	268:9	268:9	8	TIFFGetField
LEAF_NODE	268:9	268:9	9	TIFFGetField
LEAF_NODE	268:21	268:21	8	(
ARGUMENT	268:22	268:22	8	in
FIELD	268:22	268:22	9	in
LEAF_NODE	268:22	268:22	10	in
LEAF_NODE	268:24	268:24	8	,
ARGUMENT	268:26	268:26	8	TIFFTAG_ROWSPERSTRIP
FIELD	268:26	268:26	9	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	268:26	268:26	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	268:46	268:46	8	,
ARGUMENT	268:48	268:48	8	& rowsperstrip
UNARY_EXPR	268:48	268:49	9	& rowsperstrip
UNARY_OPERATOR	268:48	268:48	10	&
LEAF_NODE	268:48	268:48	11	&
FIELD	268:49	268:49	10	rowsperstrip
LEAF_NODE	268:49	268:49	11	rowsperstrip
LEAF_NODE	268:61	268:61	8	)
LEAF_NODE	268:63	268:63	4	)
STATEMENTS	268:65	271:4	4	
LEAF_NODE	268:65	268:65	5	{
STATEMENTS	269:8	270:8	5	
EXPR_STATEMENT	269:8	269:65	6	TIFFError ( TIFFFileName ( in ) , "Source image not in strips" ) ;
EXPR	269:8	269:8	7	TIFFError ( TIFFFileName ( in ) , "Source image not in strips" )
FUNCTION_CALL	269:8	269:64	8	TIFFError ( TIFFFileName ( in ) , "Source image not in strips" )
CALLEE	269:8	269:8	9	TIFFError
LEAF_NODE	269:8	269:8	10	TIFFError
LEAF_NODE	269:17	269:17	9	(
ARGUMENT	269:18	269:18	9	TIFFFileName ( in )
FUNCTION_CALL	269:18	269:33	10	TIFFFileName ( in )
CALLEE	269:18	269:18	11	TIFFFileName
LEAF_NODE	269:18	269:18	12	TIFFFileName
LEAF_NODE	269:30	269:30	11	(
ARGUMENT	269:31	269:31	11	in
FIELD	269:31	269:31	12	in
LEAF_NODE	269:31	269:31	13	in
LEAF_NODE	269:33	269:33	11	)
LEAF_NODE	269:34	269:34	9	,
ARGUMENT	269:36	269:36	9	"Source image not in strips"
FIELD	269:36	269:36	10	"Source image not in strips"
LEAF_NODE	269:36	269:36	11	"Source image not in strips"
LEAF_NODE	269:64	269:64	9	)
LEAF_NODE	269:65	269:65	7	;
JUMP_STATEMENT	270:8	270:18	6	return ( 0 ) ;
KEYWORD	270:8	270:8	7	return
LEAF_NODE	270:8	270:8	8	return
DESTINATION	270:15	270:15	7	( 0 )
EXPR	270:15	270:17	8	( 0 )
LEAF_NODE	270:15	270:15	9	(
FIELD	270:16	270:16	9	0
LEAF_NODE	270:16	270:16	10	0
LEAF_NODE	270:17	270:17	9	)
LEAF_NODE	270:18	270:18	7	;
LEAF_NODE	271:4	271:4	5	}
EXPR_STATEMENT	273:4	273:57	3	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ;
EXPR	273:4	273:4	4	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
FUNCTION_CALL	273:4	273:56	5	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
CALLEE	273:4	273:4	6	TIFFSetField
LEAF_NODE	273:4	273:4	7	TIFFSetField
LEAF_NODE	273:16	273:16	6	(
ARGUMENT	273:17	273:17	6	out
FIELD	273:17	273:17	7	out
LEAF_NODE	273:17	273:17	8	out
LEAF_NODE	273:20	273:20	6	,
ARGUMENT	273:22	273:22	6	TIFFTAG_ROWSPERSTRIP
FIELD	273:22	273:22	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	273:22	273:22	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	273:42	273:42	6	,
ARGUMENT	273:44	273:44	6	rowsperstrip
FIELD	273:44	273:44	7	rowsperstrip
LEAF_NODE	273:44	273:44	8	rowsperstrip
LEAF_NODE	273:56	273:56	6	)
LEAF_NODE	273:57	273:57	4	;
LEAF_NODE	278:4	278:4	3	rastersize
LEAF_NODE	278:15	278:15	3	=
LEAF_NODE	278:17	278:17	3	width
EXPR_STATEMENT	278:23	278:55	3	* rowsperstrip * sizeof ( uint32 ) ;
EXPR	278:23	278:40	4	* rowsperstrip * sizeof ( uint32 )
UNARY_EXPR	278:23	278:25	5	* rowsperstrip
UNARY_OPERATOR	278:23	278:23	6	*
LEAF_NODE	278:23	278:23	7	*
FIELD	278:25	278:25	6	rowsperstrip
LEAF_NODE	278:25	278:25	7	rowsperstrip
LEAF_NODE	278:38	278:38	5	*
FUNCTION_CALL	278:40	278:54	5	sizeof ( uint32 )
CALLEE	278:40	278:40	6	sizeof
LEAF_NODE	278:40	278:40	7	sizeof
LEAF_NODE	278:47	278:47	6	(
ARGUMENT	278:48	278:48	6	uint32
FIELD	278:48	278:48	7	uint32
LEAF_NODE	278:48	278:48	8	uint32
LEAF_NODE	278:54	278:54	6	)
LEAF_NODE	278:55	278:55	4	;
SELECTION	279:4	280:4	3	
KEYWORD	279:4	279:4	4	if
LEAF_NODE	279:4	279:4	5	if
LEAF_NODE	279:7	279:7	4	(
CONDITION	279:8	279:8	4	width != ( rastersize / rowsperstrip ) / sizeof ( uint32 )
EXPR	279:8	279:47	5	width != ( rastersize / rowsperstrip ) / sizeof ( uint32 )
FIELD	279:8	279:8	6	width
LEAF_NODE	279:8	279:8	7	width
EQ_OPERATOR	279:14	279:14	6	!=
LEAF_NODE	279:14	279:14	7	!=
LEAF_NODE	279:17	279:17	6	(
FIELD	279:18	279:18	6	rastersize
LEAF_NODE	279:18	279:18	7	rastersize
LEAF_NODE	279:29	279:29	6	/
FIELD	279:31	279:31	6	rowsperstrip
LEAF_NODE	279:31	279:31	7	rowsperstrip
LEAF_NODE	279:43	279:43	6	)
LEAF_NODE	279:45	279:45	6	/
FUNCTION_CALL	279:47	279:61	6	sizeof ( uint32 )
CALLEE	279:47	279:47	7	sizeof
LEAF_NODE	279:47	279:47	8	sizeof
LEAF_NODE	279:53	279:53	7	(
ARGUMENT	279:55	279:55	7	uint32
FIELD	279:55	279:55	8	uint32
LEAF_NODE	279:55	279:55	9	uint32
LEAF_NODE	279:61	279:61	7	)
LEAF_NODE	279:62	279:62	4	)
STATEMENTS	280:4	283:4	4	
LEAF_NODE	280:4	280:4	5	{
STATEMENTS	281:1	282:1	5	
EXPR_STATEMENT	281:1	281:79	6	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating raster buffer" ) ;
EXPR	281:1	281:1	7	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating raster buffer" )
FUNCTION_CALL	281:1	281:78	8	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating raster buffer" )
CALLEE	281:1	281:1	9	TIFFError
LEAF_NODE	281:1	281:1	10	TIFFError
LEAF_NODE	281:10	281:10	9	(
ARGUMENT	281:11	281:11	9	TIFFFileName ( in )
FUNCTION_CALL	281:11	281:26	10	TIFFFileName ( in )
CALLEE	281:11	281:11	11	TIFFFileName
LEAF_NODE	281:11	281:11	12	TIFFFileName
LEAF_NODE	281:23	281:23	11	(
ARGUMENT	281:24	281:24	11	in
FIELD	281:24	281:24	12	in
LEAF_NODE	281:24	281:24	13	in
LEAF_NODE	281:26	281:26	11	)
LEAF_NODE	281:27	281:27	9	,
ARGUMENT	281:29	281:29	9	"Integer overflow when calculating raster buffer"
FIELD	281:29	281:29	10	"Integer overflow when calculating raster buffer"
LEAF_NODE	281:29	281:29	11	"Integer overflow when calculating raster buffer"
LEAF_NODE	281:78	281:78	9	)
LEAF_NODE	281:79	281:79	7	;
EXPR_STATEMENT	282:1	282:9	6	exit ( - 1 ) ;
EXPR	282:1	282:1	7	exit ( - 1 )
FUNCTION_CALL	282:1	282:8	8	exit ( - 1 )
CALLEE	282:1	282:1	9	exit
LEAF_NODE	282:1	282:1	10	exit
LEAF_NODE	282:5	282:5	9	(
ARGUMENT	282:6	282:6	9	- 1
UNARY_EXPR	282:6	282:7	10	- 1
UNARY_OPERATOR	282:6	282:6	11	-
LEAF_NODE	282:6	282:6	12	-
FIELD	282:7	282:7	11	1
LEAF_NODE	282:7	282:7	12	1
LEAF_NODE	282:8	282:8	9	)
LEAF_NODE	282:9	282:9	7	;
LEAF_NODE	283:4	283:4	5	}
EXPR_STATEMENT	284:4	284:45	3	raster = ( uint32 * ) _TIFFmalloc ( rastersize ) ;
EXPR	284:4	284:4	4	raster = ( uint32 * ) _TIFFmalloc ( rastersize )
ASSIGN	284:4	284:13	5	raster = ( uint32 * ) _TIFFmalloc ( rastersize )
LVAL	284:4	284:4	6	raster
FIELD	284:4	284:4	7	raster
LEAF_NODE	284:4	284:4	8	raster
ASSIGN_OP	284:11	284:11	6	=
LEAF_NODE	284:11	284:11	7	=
RVAL	284:13	284:22	6	( uint32 * ) _TIFFmalloc ( rastersize )
LEAF_NODE	284:13	284:13	7	(
TYPE_NAME	284:14	284:14	7	uint32
LEAF_NODE	284:14	284:14	8	uint32
LEAF_NODE	284:20	284:20	7	*
LEAF_NODE	284:21	284:21	7	)
FUNCTION_CALL	284:22	284:44	7	_TIFFmalloc ( rastersize )
CALLEE	284:22	284:22	8	_TIFFmalloc
LEAF_NODE	284:22	284:22	9	_TIFFmalloc
LEAF_NODE	284:33	284:33	8	(
ARGUMENT	284:34	284:34	8	rastersize
FIELD	284:34	284:34	9	rastersize
LEAF_NODE	284:34	284:34	10	rastersize
LEAF_NODE	284:44	284:44	8	)
LEAF_NODE	284:45	284:45	4	;
SELECTION	285:4	285:21	3	
KEYWORD	285:4	285:4	4	if
LEAF_NODE	285:4	285:4	5	if
LEAF_NODE	285:7	285:7	4	(
CONDITION	285:8	285:8	4	raster == 0
EXPR	285:8	285:18	5	raster == 0
FIELD	285:8	285:8	6	raster
LEAF_NODE	285:8	285:8	7	raster
EQ_OPERATOR	285:15	285:15	6	==
LEAF_NODE	285:15	285:15	7	==
FIELD	285:18	285:18	6	0
LEAF_NODE	285:18	285:18	7	0
LEAF_NODE	285:19	285:19	4	)
STATEMENTS	285:21	288:4	4	
LEAF_NODE	285:21	285:21	5	{
STATEMENTS	286:8	287:8	5	
EXPR_STATEMENT	286:8	286:65	6	TIFFError ( TIFFFileName ( in ) , "No space for raster buffer" ) ;
EXPR	286:8	286:8	7	TIFFError ( TIFFFileName ( in ) , "No space for raster buffer" )
FUNCTION_CALL	286:8	286:64	8	TIFFError ( TIFFFileName ( in ) , "No space for raster buffer" )
CALLEE	286:8	286:8	9	TIFFError
LEAF_NODE	286:8	286:8	10	TIFFError
LEAF_NODE	286:17	286:17	9	(
ARGUMENT	286:18	286:18	9	TIFFFileName ( in )
FUNCTION_CALL	286:18	286:33	10	TIFFFileName ( in )
CALLEE	286:18	286:18	11	TIFFFileName
LEAF_NODE	286:18	286:18	12	TIFFFileName
LEAF_NODE	286:30	286:30	11	(
ARGUMENT	286:31	286:31	11	in
FIELD	286:31	286:31	12	in
LEAF_NODE	286:31	286:31	13	in
LEAF_NODE	286:33	286:33	11	)
LEAF_NODE	286:34	286:34	9	,
ARGUMENT	286:36	286:36	9	"No space for raster buffer"
FIELD	286:36	286:36	10	"No space for raster buffer"
LEAF_NODE	286:36	286:36	11	"No space for raster buffer"
LEAF_NODE	286:64	286:64	9	)
LEAF_NODE	286:65	286:65	7	;
JUMP_STATEMENT	287:8	287:18	6	return ( 0 ) ;
KEYWORD	287:8	287:8	7	return
LEAF_NODE	287:8	287:8	8	return
DESTINATION	287:15	287:15	7	( 0 )
EXPR	287:15	287:17	8	( 0 )
LEAF_NODE	287:15	287:15	9	(
FIELD	287:16	287:16	9	0
LEAF_NODE	287:16	287:16	10	0
LEAF_NODE	287:17	287:17	9	)
LEAF_NODE	287:18	287:18	7	;
LEAF_NODE	288:4	288:4	5	}
EXPR_STATEMENT	294:4	294:42	3	wrk_linesize = width * sizeof ( uint32 ) ;
EXPR	294:4	294:4	4	wrk_linesize = width * sizeof ( uint32 )
ASSIGN	294:4	294:19	5	wrk_linesize = width * sizeof ( uint32 )
LVAL	294:4	294:4	6	wrk_linesize
FIELD	294:4	294:4	7	wrk_linesize
LEAF_NODE	294:4	294:4	8	wrk_linesize
ASSIGN_OP	294:17	294:17	6	=
LEAF_NODE	294:17	294:17	7	=
RVAL	294:19	294:27	6	width * sizeof ( uint32 )
FIELD	294:19	294:19	7	width
LEAF_NODE	294:19	294:19	8	width
LEAF_NODE	294:25	294:25	7	*
FUNCTION_CALL	294:27	294:41	7	sizeof ( uint32 )
CALLEE	294:27	294:27	8	sizeof
LEAF_NODE	294:27	294:27	9	sizeof
LEAF_NODE	294:34	294:34	8	(
ARGUMENT	294:35	294:35	8	uint32
FIELD	294:35	294:35	9	uint32
LEAF_NODE	294:35	294:35	10	uint32
LEAF_NODE	294:41	294:41	8	)
LEAF_NODE	294:42	294:42	4	;
SELECTION	295:4	296:4	3	
KEYWORD	295:4	295:4	4	if
LEAF_NODE	295:4	295:4	5	if
LEAF_NODE	295:7	295:7	4	(
CONDITION	295:8	295:8	4	width != wrk_linesize / sizeof ( uint32 )
EXPR	295:8	295:32	5	width != wrk_linesize / sizeof ( uint32 )
FIELD	295:8	295:8	6	width
LEAF_NODE	295:8	295:8	7	width
EQ_OPERATOR	295:14	295:14	6	!=
LEAF_NODE	295:14	295:14	7	!=
FIELD	295:17	295:17	6	wrk_linesize
LEAF_NODE	295:17	295:17	7	wrk_linesize
LEAF_NODE	295:30	295:30	6	/
FUNCTION_CALL	295:32	295:46	6	sizeof ( uint32 )
CALLEE	295:32	295:32	7	sizeof
LEAF_NODE	295:32	295:32	8	sizeof
LEAF_NODE	295:39	295:39	7	(
ARGUMENT	295:40	295:40	7	uint32
FIELD	295:40	295:40	8	uint32
LEAF_NODE	295:40	295:40	9	uint32
LEAF_NODE	295:46	295:46	7	)
LEAF_NODE	295:47	295:47	4	)
STATEMENTS	296:4	299:4	4	
LEAF_NODE	296:4	296:4	5	{
STATEMENTS	297:8	298:1	5	
EXPR_STATEMENT	297:8	297:88	6	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating wrk_line buffer" ) ;
EXPR	297:8	297:8	7	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating wrk_line buffer" )
FUNCTION_CALL	297:8	297:87	8	TIFFError ( TIFFFileName ( in ) , "Integer overflow when calculating wrk_line buffer" )
CALLEE	297:8	297:8	9	TIFFError
LEAF_NODE	297:8	297:8	10	TIFFError
LEAF_NODE	297:17	297:17	9	(
ARGUMENT	297:18	297:18	9	TIFFFileName ( in )
FUNCTION_CALL	297:18	297:33	10	TIFFFileName ( in )
CALLEE	297:18	297:18	11	TIFFFileName
LEAF_NODE	297:18	297:18	12	TIFFFileName
LEAF_NODE	297:30	297:30	11	(
ARGUMENT	297:31	297:31	11	in
FIELD	297:31	297:31	12	in
LEAF_NODE	297:31	297:31	13	in
LEAF_NODE	297:33	297:33	11	)
LEAF_NODE	297:34	297:34	9	,
ARGUMENT	297:36	297:36	9	"Integer overflow when calculating wrk_line buffer"
FIELD	297:36	297:36	10	"Integer overflow when calculating wrk_line buffer"
LEAF_NODE	297:36	297:36	11	"Integer overflow when calculating wrk_line buffer"
LEAF_NODE	297:87	297:87	9	)
LEAF_NODE	297:88	297:88	7	;
EXPR_STATEMENT	298:1	298:9	6	exit ( - 1 ) ;
EXPR	298:1	298:1	7	exit ( - 1 )
FUNCTION_CALL	298:1	298:8	8	exit ( - 1 )
CALLEE	298:1	298:1	9	exit
LEAF_NODE	298:1	298:1	10	exit
LEAF_NODE	298:5	298:5	9	(
ARGUMENT	298:6	298:6	9	- 1
UNARY_EXPR	298:6	298:7	10	- 1
UNARY_OPERATOR	298:6	298:6	11	-
LEAF_NODE	298:6	298:6	12	-
FIELD	298:7	298:7	11	1
LEAF_NODE	298:7	298:7	12	1
LEAF_NODE	298:8	298:8	9	)
LEAF_NODE	298:9	298:9	7	;
LEAF_NODE	299:4	299:4	5	}
EXPR_STATEMENT	300:4	300:49	3	wrk_line = ( uint32 * ) _TIFFmalloc ( wrk_linesize ) ;
EXPR	300:4	300:4	4	wrk_line = ( uint32 * ) _TIFFmalloc ( wrk_linesize )
ASSIGN	300:4	300:15	5	wrk_line = ( uint32 * ) _TIFFmalloc ( wrk_linesize )
LVAL	300:4	300:4	6	wrk_line
FIELD	300:4	300:4	7	wrk_line
LEAF_NODE	300:4	300:4	8	wrk_line
ASSIGN_OP	300:13	300:13	6	=
LEAF_NODE	300:13	300:13	7	=
RVAL	300:15	300:24	6	( uint32 * ) _TIFFmalloc ( wrk_linesize )
LEAF_NODE	300:15	300:15	7	(
TYPE_NAME	300:16	300:16	7	uint32
LEAF_NODE	300:16	300:16	8	uint32
LEAF_NODE	300:22	300:22	7	*
LEAF_NODE	300:23	300:23	7	)
FUNCTION_CALL	300:24	300:48	7	_TIFFmalloc ( wrk_linesize )
CALLEE	300:24	300:24	8	_TIFFmalloc
LEAF_NODE	300:24	300:24	9	_TIFFmalloc
LEAF_NODE	300:35	300:35	8	(
ARGUMENT	300:36	300:36	8	wrk_linesize
FIELD	300:36	300:36	9	wrk_linesize
LEAF_NODE	300:36	300:36	10	wrk_linesize
LEAF_NODE	300:48	300:48	8	)
LEAF_NODE	300:49	300:49	4	;
SELECTION	301:4	301:19	3	
KEYWORD	301:4	301:4	4	if
LEAF_NODE	301:4	301:4	5	if
LEAF_NODE	301:7	301:7	4	(
CONDITION	301:8	301:8	4	! wrk_line
EXPR	301:8	301:8	5	! wrk_line
UNARY_EXPR	301:8	301:9	6	! wrk_line
UNARY_OPERATOR	301:8	301:8	7	!
LEAF_NODE	301:8	301:8	8	!
FIELD	301:9	301:9	7	wrk_line
LEAF_NODE	301:9	301:9	8	wrk_line
LEAF_NODE	301:17	301:17	4	)
STATEMENTS	301:19	304:4	4	
LEAF_NODE	301:19	301:19	5	{
STATEMENTS	302:8	303:8	5	
EXPR_STATEMENT	302:8	302:74	6	TIFFError ( TIFFFileName ( in ) , "No space for raster scanline buffer" ) ;
EXPR	302:8	302:8	7	TIFFError ( TIFFFileName ( in ) , "No space for raster scanline buffer" )
FUNCTION_CALL	302:8	302:73	8	TIFFError ( TIFFFileName ( in ) , "No space for raster scanline buffer" )
CALLEE	302:8	302:8	9	TIFFError
LEAF_NODE	302:8	302:8	10	TIFFError
LEAF_NODE	302:17	302:17	9	(
ARGUMENT	302:18	302:18	9	TIFFFileName ( in )
FUNCTION_CALL	302:18	302:33	10	TIFFFileName ( in )
CALLEE	302:18	302:18	11	TIFFFileName
LEAF_NODE	302:18	302:18	12	TIFFFileName
LEAF_NODE	302:30	302:30	11	(
ARGUMENT	302:31	302:31	11	in
FIELD	302:31	302:31	12	in
LEAF_NODE	302:31	302:31	13	in
LEAF_NODE	302:33	302:33	11	)
LEAF_NODE	302:34	302:34	9	,
ARGUMENT	302:36	302:36	9	"No space for raster scanline buffer"
FIELD	302:36	302:36	10	"No space for raster scanline buffer"
LEAF_NODE	302:36	302:36	11	"No space for raster scanline buffer"
LEAF_NODE	302:73	302:73	9	)
LEAF_NODE	302:74	302:74	7	;
EXPR_STATEMENT	303:8	303:14	6	ok = 0 ;
EXPR	303:8	303:8	7	ok = 0
ASSIGN	303:8	303:13	8	ok = 0
LVAL	303:8	303:8	9	ok
FIELD	303:8	303:8	10	ok
LEAF_NODE	303:8	303:8	11	ok
ASSIGN_OP	303:11	303:11	9	=
LEAF_NODE	303:11	303:11	10	=
RVAL	303:13	303:13	9	0
FIELD	303:13	303:13	10	0
LEAF_NODE	303:13	303:13	11	0
LEAF_NODE	303:14	303:14	7	;
LEAF_NODE	304:4	304:4	5	}
ITERATION	309:4	310:4	3	
KEYWORD	309:4	309:4	4	for
LEAF_NODE	309:4	309:4	5	for
LEAF_NODE	309:7	309:7	4	(
FOR_INIT	309:9	309:16	4	row = 0 ;
EXPR	309:9	309:9	5	row = 0
ASSIGN	309:9	309:15	6	row = 0
LVAL	309:9	309:9	7	row
FIELD	309:9	309:9	8	row
LEAF_NODE	309:9	309:9	9	row
ASSIGN_OP	309:13	309:13	7	=
LEAF_NODE	309:13	309:13	8	=
RVAL	309:15	309:15	7	0
FIELD	309:15	309:15	8	0
LEAF_NODE	309:15	309:15	9	0
LEAF_NODE	309:16	309:16	5	;
CONDITION	309:18	309:18	4	ok && row < height
EXPR	309:18	309:18	5	ok && row < height
AND	309:18	309:24	6	ok && row < height
EXPR	309:18	309:18	7	ok
FIELD	309:18	309:18	8	ok
LEAF_NODE	309:18	309:18	9	ok
LEAF_NODE	309:21	309:21	7	&&
EXPR	309:24	309:30	7	row < height
FIELD	309:24	309:24	8	row
LEAF_NODE	309:24	309:24	9	row
REL_OPERATOR	309:28	309:28	8	<
LEAF_NODE	309:28	309:28	9	<
FIELD	309:30	309:30	8	height
LEAF_NODE	309:30	309:30	9	height
LEAF_NODE	309:36	309:36	4	;
FOR_EXPR	309:38	309:38	4	row += rowsperstrip
EXPR	309:38	309:38	5	row += rowsperstrip
ASSIGN	309:38	309:45	6	row += rowsperstrip
LVAL	309:38	309:38	7	row
FIELD	309:38	309:38	8	row
LEAF_NODE	309:38	309:38	9	row
ASSIGN_OP	309:42	309:42	7	+=
LEAF_NODE	309:42	309:42	8	+=
RVAL	309:45	309:45	7	rowsperstrip
FIELD	309:45	309:45	8	rowsperstrip
LEAF_NODE	309:45	309:45	9	rowsperstrip
LEAF_NODE	309:58	309:58	4	)
STATEMENTS	310:4	362:4	4	
LEAF_NODE	310:4	310:4	5	{
STATEMENTS	311:8	361:8	5	
SIMPLE_DECL	311:8	311:32	6	int rows_to_write , int i_row ;
INIT_DECL_LIST	311:8	311:8	7	int rows_to_write , int i_row
VAR_DECL	311:8	311:12	8	int rows_to_write
TYPE	311:8	311:8	9	int
TYPE_NAME	311:8	311:8	10	int
LEAF_NODE	311:8	311:8	11	int
NAME	311:12	311:12	9	rows_to_write
LEAF_NODE	311:12	311:12	10	rows_to_write
LEAF_NODE	311:25	311:25	8	,
VAR_DECL	311:8	311:27	8	int i_row
TYPE	311:8	311:8	9	int
TYPE_NAME	311:8	311:8	10	int
LEAF_NODE	311:8	311:8	11	int
NAME	311:27	311:27	9	i_row
LEAF_NODE	311:27	311:27	10	i_row
LEAF_NODE	311:32	311:32	7	;
SELECTION	314:8	314:49	6	
KEYWORD	314:8	314:8	7	if
LEAF_NODE	314:8	314:8	8	if
LEAF_NODE	314:11	314:11	7	(
CONDITION	314:12	314:12	7	! TIFFReadRGBAStrip ( in , row , raster )
EXPR	314:12	314:12	8	! TIFFReadRGBAStrip ( in , row , raster )
UNARY_EXPR	314:12	314:13	9	! TIFFReadRGBAStrip ( in , row , raster )
UNARY_OPERATOR	314:12	314:12	10	!
LEAF_NODE	314:12	314:12	11	!
FUNCTION_CALL	314:13	314:46	10	TIFFReadRGBAStrip ( in , row , raster )
CALLEE	314:13	314:13	11	TIFFReadRGBAStrip
LEAF_NODE	314:13	314:13	12	TIFFReadRGBAStrip
LEAF_NODE	314:30	314:30	11	(
ARGUMENT	314:31	314:31	11	in
FIELD	314:31	314:31	12	in
LEAF_NODE	314:31	314:31	13	in
LEAF_NODE	314:33	314:33	11	,
ARGUMENT	314:35	314:35	11	row
FIELD	314:35	314:35	12	row
LEAF_NODE	314:35	314:35	13	row
LEAF_NODE	314:38	314:38	11	,
ARGUMENT	314:40	314:40	11	raster
FIELD	314:40	314:40	12	raster
LEAF_NODE	314:40	314:40	13	raster
LEAF_NODE	314:46	314:46	11	)
LEAF_NODE	314:47	314:47	7	)
STATEMENTS	314:49	317:8	7	
LEAF_NODE	314:49	314:49	8	{
STATEMENTS	315:12	316:12	8	
EXPR_STATEMENT	315:12	315:18	9	ok = 0 ;
EXPR	315:12	315:12	10	ok = 0
ASSIGN	315:12	315:17	11	ok = 0
LVAL	315:12	315:12	12	ok
FIELD	315:12	315:12	13	ok
LEAF_NODE	315:12	315:12	14	ok
ASSIGN_OP	315:15	315:15	12	=
LEAF_NODE	315:15	315:15	13	=
RVAL	315:17	315:17	12	0
FIELD	315:17	315:17	13	0
LEAF_NODE	315:17	315:17	14	0
LEAF_NODE	315:18	315:18	10	;
JUMP_STATEMENT	316:12	316:17	9	break DESTINATION ;
KEYWORD	316:12	316:12	10	break
LEAF_NODE	316:12	316:12	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	316:17	316:17	10	;
LEAF_NODE	317:8	317:8	8	}
EXPR_STATEMENT	324:1	324:50	6	TIFFSwabArrayOfLong ( raster , width * rowsperstrip ) ;
EXPR	324:1	324:1	7	TIFFSwabArrayOfLong ( raster , width * rowsperstrip )
FUNCTION_CALL	324:1	324:49	8	TIFFSwabArrayOfLong ( raster , width * rowsperstrip )
CALLEE	324:1	324:1	9	TIFFSwabArrayOfLong
LEAF_NODE	324:1	324:1	10	TIFFSwabArrayOfLong
LEAF_NODE	324:20	324:20	9	(
ARGUMENT	324:21	324:21	9	raster
FIELD	324:21	324:21	10	raster
LEAF_NODE	324:21	324:21	11	raster
LEAF_NODE	324:27	324:27	9	,
ARGUMENT	324:29	324:37	9	width * rowsperstrip
FIELD	324:29	324:29	10	width
LEAF_NODE	324:29	324:29	11	width
LEAF_NODE	324:35	324:35	10	*
FIELD	324:37	324:37	10	rowsperstrip
LEAF_NODE	324:37	324:37	11	rowsperstrip
LEAF_NODE	324:49	324:49	9	)
LEAF_NODE	324:50	324:50	7	;
SELECTION	330:8	331:12	6	
KEYWORD	330:8	330:8	7	if
LEAF_NODE	330:8	330:8	8	if
LEAF_NODE	330:10	330:10	7	(
CONDITION	330:12	330:12	7	row + rowsperstrip > height
EXPR	330:12	330:33	8	row + rowsperstrip > height
FIELD	330:12	330:12	9	row
LEAF_NODE	330:12	330:12	10	row
LEAF_NODE	330:16	330:16	9	+
FIELD	330:18	330:18	9	rowsperstrip
LEAF_NODE	330:18	330:18	10	rowsperstrip
REL_OPERATOR	330:31	330:31	9	>
LEAF_NODE	330:31	330:31	10	>
FIELD	330:33	330:33	9	height
LEAF_NODE	330:33	330:33	10	height
LEAF_NODE	330:40	330:40	7	)
STATEMENTS	331:12	331:12	7	
EXPR_STATEMENT	331:12	331:40	8	rows_to_write = height - row ;
EXPR	331:12	331:12	9	rows_to_write = height - row
ASSIGN	331:12	331:28	10	rows_to_write = height - row
LVAL	331:12	331:12	11	rows_to_write
FIELD	331:12	331:12	12	rows_to_write
LEAF_NODE	331:12	331:12	13	rows_to_write
ASSIGN_OP	331:26	331:26	11	=
LEAF_NODE	331:26	331:26	12	=
RVAL	331:28	331:37	11	height - row
FIELD	331:28	331:28	12	height
LEAF_NODE	331:28	331:28	13	height
LEAF_NODE	331:35	331:35	12	-
FIELD	331:37	331:37	12	row
LEAF_NODE	331:37	331:37	13	row
LEAF_NODE	331:40	331:40	9	;
SELECTION	332:8	333:12	6	
KEYWORD	332:8	332:8	7	else
LEAF_NODE	332:8	332:8	8	else
STATEMENTS	333:12	333:12	7	
EXPR_STATEMENT	333:12	333:40	8	rows_to_write = rowsperstrip ;
EXPR	333:12	333:12	9	rows_to_write = rowsperstrip
ASSIGN	333:12	333:28	10	rows_to_write = rowsperstrip
LVAL	333:12	333:12	11	rows_to_write
FIELD	333:12	333:12	12	rows_to_write
LEAF_NODE	333:12	333:12	13	rows_to_write
ASSIGN_OP	333:26	333:26	11	=
LEAF_NODE	333:26	333:26	12	=
RVAL	333:28	333:28	11	rowsperstrip
FIELD	333:28	333:28	12	rowsperstrip
LEAF_NODE	333:28	333:28	13	rowsperstrip
LEAF_NODE	333:40	333:40	9	;
ITERATION	340:8	341:8	6	
KEYWORD	340:8	340:8	7	for
LEAF_NODE	340:8	340:8	8	for
LEAF_NODE	340:11	340:11	7	(
FOR_INIT	340:13	340:22	7	i_row = 0 ;
EXPR	340:13	340:13	8	i_row = 0
ASSIGN	340:13	340:21	9	i_row = 0
LVAL	340:13	340:13	10	i_row
FIELD	340:13	340:13	11	i_row
LEAF_NODE	340:13	340:13	12	i_row
ASSIGN_OP	340:19	340:19	10	=
LEAF_NODE	340:19	340:19	11	=
RVAL	340:21	340:21	10	0
FIELD	340:21	340:21	11	0
LEAF_NODE	340:21	340:21	12	0
LEAF_NODE	340:22	340:22	8	;
CONDITION	340:24	340:24	7	i_row < rows_to_write / 2
EXPR	340:24	340:48	8	i_row < rows_to_write / 2
FIELD	340:24	340:24	9	i_row
LEAF_NODE	340:24	340:24	10	i_row
REL_OPERATOR	340:30	340:30	9	<
LEAF_NODE	340:30	340:30	10	<
FIELD	340:32	340:32	9	rows_to_write
LEAF_NODE	340:32	340:32	10	rows_to_write
LEAF_NODE	340:46	340:46	9	/
FIELD	340:48	340:48	9	2
LEAF_NODE	340:48	340:48	10	2
LEAF_NODE	340:49	340:49	7	;
FOR_EXPR	340:51	340:51	7	i_row ++
EXPR	340:51	340:51	8	i_row ++
FIELD	340:51	340:56	9	i_row ++
LEAF_NODE	340:51	340:51	10	i_row
LEAF_NODE	340:56	340:56	10	++
LEAF_NODE	340:59	340:59	7	)
STATEMENTS	341:8	350:8	7	
LEAF_NODE	341:8	341:8	8	{
STATEMENTS	342:12	349:12	8	
SIMPLE_DECL	342:12	342:42	9	uint32 * top_line , uint32 * bottom_line ;
INIT_DECL_LIST	342:12	342:12	10	uint32 * top_line , uint32 * bottom_line
VAR_DECL	342:12	342:20	11	uint32 * top_line
TYPE	342:12	342:19	12	uint32 *
TYPE_NAME	342:12	342:12	13	uint32
LEAF_NODE	342:12	342:12	14	uint32
POINTER	342:19	342:19	13	*
LEAF_NODE	342:19	342:19	14	*
NAME	342:20	342:20	12	top_line
LEAF_NODE	342:20	342:20	13	top_line
LEAF_NODE	342:28	342:28	11	,
VAR_DECL	342:12	342:31	11	uint32 * bottom_line
TYPE	342:12	342:30	12	uint32 *
TYPE_NAME	342:12	342:12	13	uint32
LEAF_NODE	342:12	342:12	14	uint32
POINTER	342:30	342:30	13	*
LEAF_NODE	342:30	342:30	14	*
NAME	342:31	342:31	12	bottom_line
LEAF_NODE	342:31	342:31	13	bottom_line
LEAF_NODE	342:42	342:42	10	;
EXPR_STATEMENT	344:12	344:45	9	top_line = raster + width * i_row ;
EXPR	344:12	344:12	10	top_line = raster + width * i_row
ASSIGN	344:12	344:23	11	top_line = raster + width * i_row
LVAL	344:12	344:12	12	top_line
FIELD	344:12	344:12	13	top_line
LEAF_NODE	344:12	344:12	14	top_line
ASSIGN_OP	344:21	344:21	12	=
LEAF_NODE	344:21	344:21	13	=
RVAL	344:23	344:40	12	raster + width * i_row
FIELD	344:23	344:23	13	raster
LEAF_NODE	344:23	344:23	14	raster
LEAF_NODE	344:30	344:30	13	+
FIELD	344:32	344:32	13	width
LEAF_NODE	344:32	344:32	14	width
LEAF_NODE	344:38	344:38	13	*
FIELD	344:40	344:40	13	i_row
LEAF_NODE	344:40	344:40	14	i_row
LEAF_NODE	344:45	344:45	10	;
EXPR_STATEMENT	345:12	345:66	9	bottom_line = raster + width * ( rows_to_write - i_row - 1 ) ;
EXPR	345:12	345:12	10	bottom_line = raster + width * ( rows_to_write - i_row - 1 )
ASSIGN	345:12	345:26	11	bottom_line = raster + width * ( rows_to_write - i_row - 1 )
LVAL	345:12	345:12	12	bottom_line
FIELD	345:12	345:12	13	bottom_line
LEAF_NODE	345:12	345:12	14	bottom_line
ASSIGN_OP	345:24	345:24	12	=
LEAF_NODE	345:24	345:24	13	=
RVAL	345:26	345:65	12	raster + width * ( rows_to_write - i_row - 1 )
FIELD	345:26	345:26	13	raster
LEAF_NODE	345:26	345:26	14	raster
LEAF_NODE	345:33	345:33	13	+
FIELD	345:35	345:35	13	width
LEAF_NODE	345:35	345:35	14	width
LEAF_NODE	345:41	345:41	13	*
LEAF_NODE	345:43	345:43	13	(
FIELD	345:44	345:44	13	rows_to_write
LEAF_NODE	345:44	345:44	14	rows_to_write
LEAF_NODE	345:57	345:57	13	-
FIELD	345:58	345:58	13	i_row
LEAF_NODE	345:58	345:58	14	i_row
LEAF_NODE	345:63	345:63	13	-
FIELD	345:64	345:64	13	1
LEAF_NODE	345:64	345:64	14	1
LEAF_NODE	345:65	345:65	13	)
LEAF_NODE	345:66	345:66	10	;
EXPR_STATEMENT	347:12	347:52	9	_TIFFmemcpy ( wrk_line , top_line , 4 * width ) ;
EXPR	347:12	347:12	10	_TIFFmemcpy ( wrk_line , top_line , 4 * width )
FUNCTION_CALL	347:12	347:51	11	_TIFFmemcpy ( wrk_line , top_line , 4 * width )
CALLEE	347:12	347:12	12	_TIFFmemcpy
LEAF_NODE	347:12	347:12	13	_TIFFmemcpy
LEAF_NODE	347:23	347:23	12	(
ARGUMENT	347:24	347:24	12	wrk_line
FIELD	347:24	347:24	13	wrk_line
LEAF_NODE	347:24	347:24	14	wrk_line
LEAF_NODE	347:32	347:32	12	,
ARGUMENT	347:34	347:34	12	top_line
FIELD	347:34	347:34	13	top_line
LEAF_NODE	347:34	347:34	14	top_line
LEAF_NODE	347:42	347:42	12	,
ARGUMENT	347:44	347:46	12	4 * width
FIELD	347:44	347:44	13	4
LEAF_NODE	347:44	347:44	14	4
LEAF_NODE	347:45	347:45	13	*
FIELD	347:46	347:46	13	width
LEAF_NODE	347:46	347:46	14	width
LEAF_NODE	347:51	347:51	12	)
LEAF_NODE	347:52	347:52	10	;
EXPR_STATEMENT	348:12	348:55	9	_TIFFmemcpy ( top_line , bottom_line , 4 * width ) ;
EXPR	348:12	348:12	10	_TIFFmemcpy ( top_line , bottom_line , 4 * width )
FUNCTION_CALL	348:12	348:54	11	_TIFFmemcpy ( top_line , bottom_line , 4 * width )
CALLEE	348:12	348:12	12	_TIFFmemcpy
LEAF_NODE	348:12	348:12	13	_TIFFmemcpy
LEAF_NODE	348:23	348:23	12	(
ARGUMENT	348:24	348:24	12	top_line
FIELD	348:24	348:24	13	top_line
LEAF_NODE	348:24	348:24	14	top_line
LEAF_NODE	348:32	348:32	12	,
ARGUMENT	348:34	348:34	12	bottom_line
FIELD	348:34	348:34	13	bottom_line
LEAF_NODE	348:34	348:34	14	bottom_line
LEAF_NODE	348:45	348:45	12	,
ARGUMENT	348:47	348:49	12	4 * width
FIELD	348:47	348:47	13	4
LEAF_NODE	348:47	348:47	14	4
LEAF_NODE	348:48	348:48	13	*
FIELD	348:49	348:49	13	width
LEAF_NODE	348:49	348:49	14	width
LEAF_NODE	348:54	348:54	12	)
LEAF_NODE	348:55	348:55	10	;
EXPR_STATEMENT	349:12	349:55	9	_TIFFmemcpy ( bottom_line , wrk_line , 4 * width ) ;
EXPR	349:12	349:12	10	_TIFFmemcpy ( bottom_line , wrk_line , 4 * width )
FUNCTION_CALL	349:12	349:54	11	_TIFFmemcpy ( bottom_line , wrk_line , 4 * width )
CALLEE	349:12	349:12	12	_TIFFmemcpy
LEAF_NODE	349:12	349:12	13	_TIFFmemcpy
LEAF_NODE	349:23	349:23	12	(
ARGUMENT	349:24	349:24	12	bottom_line
FIELD	349:24	349:24	13	bottom_line
LEAF_NODE	349:24	349:24	14	bottom_line
LEAF_NODE	349:35	349:35	12	,
ARGUMENT	349:37	349:37	12	wrk_line
FIELD	349:37	349:37	13	wrk_line
LEAF_NODE	349:37	349:37	14	wrk_line
LEAF_NODE	349:45	349:45	12	,
ARGUMENT	349:47	349:49	12	4 * width
FIELD	349:47	349:47	13	4
LEAF_NODE	349:47	349:47	14	4
LEAF_NODE	349:48	349:48	13	*
FIELD	349:49	349:49	13	width
LEAF_NODE	349:49	349:49	14	width
LEAF_NODE	349:54	349:54	12	)
LEAF_NODE	349:55	349:55	10	;
LEAF_NODE	350:8	350:8	8	}
LEAF_NODE	356:8	356:8	6	if
LEAF_NODE	356:10	356:10	6	(
LEAF_NODE	356:12	356:12	6	TIFFWriteEncodedStrip
LEAF_NODE	356:33	356:33	6	(
LEAF_NODE	356:35	356:35	6	out
LEAF_NODE	356:38	356:38	6	,
LEAF_NODE	356:40	356:40	6	row
LEAF_NODE	356:44	356:44	6	/
LEAF_NODE	356:46	356:46	6	rowsperstrip
LEAF_NODE	356:58	356:58	6	,
LEAF_NODE	356:60	356:60	6	raster
LEAF_NODE	356:66	356:66	6	,
LEAF_NODE	357:35	357:35	6	4
LEAF_NODE	357:37	357:37	6	*
LEAF_NODE	357:39	357:39	6	rows_to_write
LEAF_NODE	357:53	357:53	6	*
LEAF_NODE	357:55	357:55	6	width
LEAF_NODE	357:61	357:61	6	)
LEAF_NODE	357:63	357:63	6	==
LEAF_NODE	357:66	357:66	6	-
LEAF_NODE	357:67	357:67	6	1
LEAF_NODE	357:69	357:69	6	)
LEAF_NODE	358:8	358:8	6	{
STATEMENTS	359:12	360:12	6	
EXPR_STATEMENT	359:12	359:18	7	ok = 0 ;
EXPR	359:12	359:12	8	ok = 0
ASSIGN	359:12	359:17	9	ok = 0
LVAL	359:12	359:12	10	ok
FIELD	359:12	359:12	11	ok
LEAF_NODE	359:12	359:12	12	ok
ASSIGN_OP	359:15	359:15	10	=
LEAF_NODE	359:15	359:15	11	=
RVAL	359:17	359:17	10	0
FIELD	359:17	359:17	11	0
LEAF_NODE	359:17	359:17	12	0
LEAF_NODE	359:18	359:18	8	;
JUMP_STATEMENT	360:12	360:17	7	break DESTINATION ;
KEYWORD	360:12	360:12	8	break
LEAF_NODE	360:12	360:12	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	360:17	360:17	8	;
LEAF_NODE	361:8	361:8	6	}
LEAF_NODE	362:4	362:4	5	}
EXPR_STATEMENT	364:4	364:23	3	_TIFFfree ( raster ) ;
EXPR	364:4	364:4	4	_TIFFfree ( raster )
FUNCTION_CALL	364:4	364:22	5	_TIFFfree ( raster )
CALLEE	364:4	364:4	6	_TIFFfree
LEAF_NODE	364:4	364:4	7	_TIFFfree
LEAF_NODE	364:13	364:13	6	(
ARGUMENT	364:15	364:15	6	raster
FIELD	364:15	364:15	7	raster
LEAF_NODE	364:15	364:15	8	raster
LEAF_NODE	364:22	364:22	6	)
LEAF_NODE	364:23	364:23	4	;
EXPR_STATEMENT	365:4	365:25	3	_TIFFfree ( wrk_line ) ;
EXPR	365:4	365:4	4	_TIFFfree ( wrk_line )
FUNCTION_CALL	365:4	365:24	5	_TIFFfree ( wrk_line )
CALLEE	365:4	365:4	6	_TIFFfree
LEAF_NODE	365:4	365:4	7	_TIFFfree
LEAF_NODE	365:13	365:13	6	(
ARGUMENT	365:15	365:15	6	wrk_line
FIELD	365:15	365:15	7	wrk_line
LEAF_NODE	365:15	365:15	8	wrk_line
LEAF_NODE	365:24	365:24	6	)
LEAF_NODE	365:25	365:25	4	;
JUMP_STATEMENT	367:4	367:13	3	return ok ;
KEYWORD	367:4	367:4	4	return
LEAF_NODE	367:4	367:4	5	return
DESTINATION	367:11	367:11	4	ok
EXPR	367:11	367:11	5	ok
FIELD	367:11	367:11	6	ok
LEAF_NODE	367:11	367:11	7	ok
LEAF_NODE	367:13	367:13	4	;
LEAF_NODE	368:0	368:0	2	}
FUNCTION_DEF	378:0	479:0	1	
RETURN_TYPE	378:0	378:7	2	static int
LEAF_NODE	378:0	378:0	3	static
TYPE_NAME	378:7	378:7	3	int
LEAF_NODE	378:7	378:7	4	int
FUNCTION_NAME	379:0	379:0	2	cvt_whole_image
LEAF_NODE	379:0	379:0	3	cvt_whole_image
PARAMETER_LIST	379:15	379:37	2	( TIFF * in , TIFF * out )
LEAF_NODE	379:15	379:15	3	(
PARAMETER_DECL	379:17	379:23	3	TIFF * in
TYPE	379:17	379:22	4	TIFF *
TYPE_NAME	379:17	379:17	5	TIFF
LEAF_NODE	379:17	379:17	6	TIFF
POINTER	379:22	379:22	5	*
LEAF_NODE	379:22	379:22	6	*
NAME	379:23	379:23	4	in
LEAF_NODE	379:23	379:23	5	in
LEAF_NODE	379:25	379:25	3	,
PARAMETER_DECL	379:27	379:33	3	TIFF * out
TYPE	379:27	379:32	4	TIFF *
TYPE_NAME	379:27	379:27	5	TIFF
LEAF_NODE	379:27	379:27	6	TIFF
POINTER	379:32	379:32	5	*
LEAF_NODE	379:32	379:32	6	*
NAME	379:33	379:33	4	out
LEAF_NODE	379:33	379:33	5	out
LEAF_NODE	379:37	379:37	3	)
LEAF_NODE	381:0	381:0	2	{
STATEMENTS	382:4	478:4	2	
SIMPLE_DECL	382:4	382:18	3	uint32 * raster ;
VAR_DECL	382:4	382:12	4	uint32 * raster
TYPE	382:4	382:10	5	uint32 *
TYPE_NAME	382:4	382:4	6	uint32
LEAF_NODE	382:4	382:4	7	uint32
POINTER	382:10	382:10	6	*
LEAF_NODE	382:10	382:10	7	*
NAME	382:12	382:12	5	raster
LEAF_NODE	382:12	382:12	6	raster
LEAF_NODE	382:18	382:18	4	;
SIMPLE_DECL	383:4	383:25	3	uint32 width , uint32 height ;
INIT_DECL_LIST	383:4	383:4	4	uint32 width , uint32 height
VAR_DECL	383:4	383:12	5	uint32 width
TYPE	383:4	383:4	6	uint32
TYPE_NAME	383:4	383:4	7	uint32
LEAF_NODE	383:4	383:4	8	uint32
NAME	383:12	383:12	6	width
LEAF_NODE	383:12	383:12	7	width
LEAF_NODE	383:17	383:17	5	,
VAR_DECL	383:4	383:19	5	uint32 height
TYPE	383:4	383:4	6	uint32
TYPE_NAME	383:4	383:4	7	uint32
LEAF_NODE	383:4	383:4	8	uint32
NAME	383:19	383:19	6	height
LEAF_NODE	383:19	383:19	7	height
LEAF_NODE	383:25	383:25	4	;
SIMPLE_DECL	384:4	384:15	3	uint32 row ;
VAR_DECL	384:4	384:12	4	uint32 row
TYPE	384:4	384:4	5	uint32
TYPE_NAME	384:4	384:4	6	uint32
LEAF_NODE	384:4	384:4	7	uint32
NAME	384:12	384:12	5	row
LEAF_NODE	384:12	384:12	6	row
LEAF_NODE	384:15	384:15	4	;
SIMPLE_DECL	385:4	385:22	3	size_t pixel_count ;
VAR_DECL	385:4	385:11	4	size_t pixel_count
TYPE	385:4	385:4	5	size_t
TYPE_NAME	385:4	385:4	6	size_t
LEAF_NODE	385:4	385:4	7	size_t
NAME	385:11	385:11	5	pixel_count
LEAF_NODE	385:11	385:11	6	pixel_count
LEAF_NODE	385:22	385:22	4	;
EXPR_STATEMENT	387:4	387:48	3	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width ) ;
EXPR	387:4	387:4	4	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
FUNCTION_CALL	387:4	387:47	5	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
CALLEE	387:4	387:4	6	TIFFGetField
LEAF_NODE	387:4	387:4	7	TIFFGetField
LEAF_NODE	387:16	387:16	6	(
ARGUMENT	387:17	387:17	6	in
FIELD	387:17	387:17	7	in
LEAF_NODE	387:17	387:17	8	in
LEAF_NODE	387:19	387:19	6	,
ARGUMENT	387:21	387:21	6	TIFFTAG_IMAGEWIDTH
FIELD	387:21	387:21	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	387:21	387:21	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	387:39	387:39	6	,
ARGUMENT	387:41	387:41	6	& width
UNARY_EXPR	387:41	387:42	7	& width
UNARY_OPERATOR	387:41	387:41	8	&
LEAF_NODE	387:41	387:41	9	&
FIELD	387:42	387:42	8	width
LEAF_NODE	387:42	387:42	9	width
LEAF_NODE	387:47	387:47	6	)
LEAF_NODE	387:48	387:48	4	;
EXPR_STATEMENT	388:4	388:50	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height ) ;
EXPR	388:4	388:4	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height )
FUNCTION_CALL	388:4	388:49	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height )
CALLEE	388:4	388:4	6	TIFFGetField
LEAF_NODE	388:4	388:4	7	TIFFGetField
LEAF_NODE	388:16	388:16	6	(
ARGUMENT	388:17	388:17	6	in
FIELD	388:17	388:17	7	in
LEAF_NODE	388:17	388:17	8	in
LEAF_NODE	388:19	388:19	6	,
ARGUMENT	388:21	388:21	6	TIFFTAG_IMAGELENGTH
FIELD	388:21	388:21	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	388:21	388:21	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	388:40	388:40	6	,
ARGUMENT	388:42	388:42	6	& height
UNARY_EXPR	388:42	388:43	7	& height
UNARY_OPERATOR	388:42	388:42	8	&
LEAF_NODE	388:42	388:42	9	&
FIELD	388:43	388:43	8	height
LEAF_NODE	388:43	388:43	9	height
LEAF_NODE	388:49	388:49	6	)
LEAF_NODE	388:50	388:50	4	;
EXPR_STATEMENT	389:4	389:32	3	pixel_count = width * height ;
EXPR	389:4	389:4	4	pixel_count = width * height
ASSIGN	389:4	389:18	5	pixel_count = width * height
LVAL	389:4	389:4	6	pixel_count
FIELD	389:4	389:4	7	pixel_count
LEAF_NODE	389:4	389:4	8	pixel_count
ASSIGN_OP	389:16	389:16	6	=
LEAF_NODE	389:16	389:16	7	=
RVAL	389:18	389:26	6	width * height
FIELD	389:18	389:18	7	width
LEAF_NODE	389:18	389:18	8	width
LEAF_NODE	389:24	389:24	7	*
FIELD	389:26	389:26	7	height
LEAF_NODE	389:26	389:26	8	height
LEAF_NODE	389:32	389:32	4	;
SELECTION	392:4	392:60	3	
KEYWORD	392:4	392:4	4	if
LEAF_NODE	392:4	392:4	5	if
LEAF_NODE	392:7	392:7	4	(
CONDITION	392:8	392:8	4	! width || ! height || pixel_count / width != height
EXPR	392:8	392:8	5	! width || ! height || pixel_count / width != height
OR	392:8	392:18	6	! width || ! height || pixel_count / width != height
EXPR	392:8	392:8	7	! width
UNARY_EXPR	392:8	392:9	8	! width
UNARY_OPERATOR	392:8	392:8	9	!
LEAF_NODE	392:8	392:8	10	!
FIELD	392:9	392:9	9	width
LEAF_NODE	392:9	392:9	10	width
LEAF_NODE	392:15	392:15	7	||
EXPR	392:18	392:18	7	! height || pixel_count / width != height
OR	392:18	392:29	8	! height || pixel_count / width != height
EXPR	392:18	392:18	9	! height
UNARY_EXPR	392:18	392:19	10	! height
UNARY_OPERATOR	392:18	392:18	11	!
LEAF_NODE	392:18	392:18	12	!
FIELD	392:19	392:19	11	height
LEAF_NODE	392:19	392:19	12	height
LEAF_NODE	392:26	392:26	9	||
EXPR	392:29	392:52	9	pixel_count / width != height
FIELD	392:29	392:29	10	pixel_count
LEAF_NODE	392:29	392:29	11	pixel_count
LEAF_NODE	392:41	392:41	10	/
FIELD	392:43	392:43	10	width
LEAF_NODE	392:43	392:43	11	width
EQ_OPERATOR	392:49	392:49	10	!=
LEAF_NODE	392:49	392:49	11	!=
FIELD	392:52	392:52	10	height
LEAF_NODE	392:52	392:52	11	height
LEAF_NODE	392:58	392:58	4	)
STATEMENTS	392:60	397:4	4	
LEAF_NODE	392:60	392:60	5	{
STATEMENTS	393:8	396:8	5	
EXPR_STATEMENT	393:8	395:48	6	TIFFError ( TIFFFileName ( in ) , "Malformed input file; can't allocate buffer for raster of %lux%lu size" , ( unsigned long ) width , ( unsigned long ) height ) ;
EXPR	393:8	393:8	7	TIFFError ( TIFFFileName ( in ) , "Malformed input file; can't allocate buffer for raster of %lux%lu size" , ( unsigned long ) width , ( unsigned long ) height )
FUNCTION_CALL	393:8	395:47	8	TIFFError ( TIFFFileName ( in ) , "Malformed input file; can't allocate buffer for raster of %lux%lu size" , ( unsigned long ) width , ( unsigned long ) height )
CALLEE	393:8	393:8	9	TIFFError
LEAF_NODE	393:8	393:8	10	TIFFError
LEAF_NODE	393:17	393:17	9	(
ARGUMENT	393:18	393:18	9	TIFFFileName ( in )
FUNCTION_CALL	393:18	393:33	10	TIFFFileName ( in )
CALLEE	393:18	393:18	11	TIFFFileName
LEAF_NODE	393:18	393:18	12	TIFFFileName
LEAF_NODE	393:30	393:30	11	(
ARGUMENT	393:31	393:31	11	in
FIELD	393:31	393:31	12	in
LEAF_NODE	393:31	393:31	13	in
LEAF_NODE	393:33	393:33	11	)
LEAF_NODE	393:34	393:34	9	,
ARGUMENT	394:4	394:4	9	"Malformed input file; can't allocate buffer for raster of %lux%lu size"
FIELD	394:4	394:4	10	"Malformed input file; can't allocate buffer for raster of %lux%lu size"
LEAF_NODE	394:4	394:4	11	"Malformed input file; can't allocate buffer for raster of %lux%lu size"
LEAF_NODE	394:76	394:76	9	,
ARGUMENT	395:4	395:19	9	( unsigned long ) width
LEAF_NODE	395:4	395:4	10	(
TYPE_NAME	395:5	395:14	10	unsigned long
LEAF_NODE	395:5	395:5	11	unsigned
LEAF_NODE	395:14	395:14	11	long
LEAF_NODE	395:18	395:18	10	)
FIELD	395:19	395:19	10	width
LEAF_NODE	395:19	395:19	11	width
LEAF_NODE	395:24	395:24	9	,
ARGUMENT	395:26	395:41	9	( unsigned long ) height
LEAF_NODE	395:26	395:26	10	(
TYPE_NAME	395:27	395:36	10	unsigned long
LEAF_NODE	395:27	395:27	11	unsigned
LEAF_NODE	395:36	395:36	11	long
LEAF_NODE	395:40	395:40	10	)
FIELD	395:41	395:41	10	height
LEAF_NODE	395:41	395:41	11	height
LEAF_NODE	395:47	395:47	9	)
LEAF_NODE	395:48	395:48	7	;
JUMP_STATEMENT	396:8	396:16	6	return 0 ;
KEYWORD	396:8	396:8	7	return
LEAF_NODE	396:8	396:8	8	return
DESTINATION	396:15	396:15	7	0
EXPR	396:15	396:15	8	0
FIELD	396:15	396:15	9	0
LEAF_NODE	396:15	396:15	10	0
LEAF_NODE	396:16	396:16	7	;
LEAF_NODE	397:4	397:4	5	}
EXPR_STATEMENT	399:4	399:58	3	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip ) ;
EXPR	399:4	399:4	4	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
ASSIGN	399:4	399:19	5	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
LVAL	399:4	399:4	6	rowsperstrip
FIELD	399:4	399:4	7	rowsperstrip
LEAF_NODE	399:4	399:4	8	rowsperstrip
ASSIGN_OP	399:17	399:17	6	=
LEAF_NODE	399:17	399:17	7	=
RVAL	399:19	399:19	6	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	399:19	399:57	7	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	399:19	399:19	8	TIFFDefaultStripSize
LEAF_NODE	399:19	399:19	9	TIFFDefaultStripSize
LEAF_NODE	399:39	399:39	8	(
ARGUMENT	399:40	399:40	8	out
FIELD	399:40	399:40	9	out
LEAF_NODE	399:40	399:40	10	out
LEAF_NODE	399:43	399:43	8	,
ARGUMENT	399:45	399:45	8	rowsperstrip
FIELD	399:45	399:45	9	rowsperstrip
LEAF_NODE	399:45	399:45	10	rowsperstrip
LEAF_NODE	399:57	399:57	8	)
LEAF_NODE	399:58	399:58	4	;
EXPR_STATEMENT	400:4	400:57	3	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ;
EXPR	400:4	400:4	4	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
FUNCTION_CALL	400:4	400:56	5	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
CALLEE	400:4	400:4	6	TIFFSetField
LEAF_NODE	400:4	400:4	7	TIFFSetField
LEAF_NODE	400:16	400:16	6	(
ARGUMENT	400:17	400:17	6	out
FIELD	400:17	400:17	7	out
LEAF_NODE	400:17	400:17	8	out
LEAF_NODE	400:20	400:20	6	,
ARGUMENT	400:22	400:22	6	TIFFTAG_ROWSPERSTRIP
FIELD	400:22	400:22	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	400:22	400:22	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	400:42	400:42	6	,
ARGUMENT	400:44	400:44	6	rowsperstrip
FIELD	400:44	400:44	7	rowsperstrip
LEAF_NODE	400:44	400:44	8	rowsperstrip
LEAF_NODE	400:56	400:56	6	)
LEAF_NODE	400:57	400:57	4	;
EXPR_STATEMENT	402:4	402:88	3	raster = ( uint32 * ) _TIFFCheckMalloc ( in , pixel_count , sizeof ( uint32 ) , "raster buffer" ) ;
EXPR	402:4	402:4	4	raster = ( uint32 * ) _TIFFCheckMalloc ( in , pixel_count , sizeof ( uint32 ) , "raster buffer" )
ASSIGN	402:4	402:13	5	raster = ( uint32 * ) _TIFFCheckMalloc ( in , pixel_count , sizeof ( uint32 ) , "raster buffer" )
LVAL	402:4	402:4	6	raster
FIELD	402:4	402:4	7	raster
LEAF_NODE	402:4	402:4	8	raster
ASSIGN_OP	402:11	402:11	6	=
LEAF_NODE	402:11	402:11	7	=
RVAL	402:13	402:22	6	( uint32 * ) _TIFFCheckMalloc ( in , pixel_count , sizeof ( uint32 ) , "raster buffer" )
LEAF_NODE	402:13	402:13	7	(
TYPE_NAME	402:14	402:14	7	uint32
LEAF_NODE	402:14	402:14	8	uint32
LEAF_NODE	402:20	402:20	7	*
LEAF_NODE	402:21	402:21	7	)
FUNCTION_CALL	402:22	402:87	7	_TIFFCheckMalloc ( in , pixel_count , sizeof ( uint32 ) , "raster buffer" )
CALLEE	402:22	402:22	8	_TIFFCheckMalloc
LEAF_NODE	402:22	402:22	9	_TIFFCheckMalloc
LEAF_NODE	402:38	402:38	8	(
ARGUMENT	402:39	402:39	8	in
FIELD	402:39	402:39	9	in
LEAF_NODE	402:39	402:39	10	in
LEAF_NODE	402:41	402:41	8	,
ARGUMENT	402:43	402:43	8	pixel_count
FIELD	402:43	402:43	9	pixel_count
LEAF_NODE	402:43	402:43	10	pixel_count
LEAF_NODE	402:54	402:54	8	,
ARGUMENT	402:56	402:56	8	sizeof ( uint32 )
FUNCTION_CALL	402:56	402:69	9	sizeof ( uint32 )
CALLEE	402:56	402:56	10	sizeof
LEAF_NODE	402:56	402:56	11	sizeof
LEAF_NODE	402:62	402:62	10	(
ARGUMENT	402:63	402:63	10	uint32
FIELD	402:63	402:63	11	uint32
LEAF_NODE	402:63	402:63	12	uint32
LEAF_NODE	402:69	402:69	10	)
LEAF_NODE	402:70	402:70	8	,
ARGUMENT	402:72	402:72	8	"raster buffer"
FIELD	402:72	402:72	9	"raster buffer"
LEAF_NODE	402:72	402:72	10	"raster buffer"
LEAF_NODE	402:87	402:87	8	)
LEAF_NODE	402:88	402:88	4	;
SELECTION	403:4	403:21	3	
KEYWORD	403:4	403:4	4	if
LEAF_NODE	403:4	403:4	5	if
LEAF_NODE	403:7	403:7	4	(
CONDITION	403:8	403:8	4	raster == 0
EXPR	403:8	403:18	5	raster == 0
FIELD	403:8	403:8	6	raster
LEAF_NODE	403:8	403:8	7	raster
EQ_OPERATOR	403:15	403:15	6	==
LEAF_NODE	403:15	403:15	7	==
FIELD	403:18	403:18	6	0
LEAF_NODE	403:18	403:18	7	0
LEAF_NODE	403:19	403:19	4	)
STATEMENTS	403:21	407:4	4	
LEAF_NODE	403:21	403:21	5	{
STATEMENTS	404:8	406:8	5	
EXPR_STATEMENT	404:8	405:62	6	TIFFError ( TIFFFileName ( in ) , "Failed to allocate buffer (%lu elements of %lu each)" , ( unsigned long ) pixel_count , ( unsigned long ) sizeof ( uint32 ) ) ;
EXPR	404:8	404:8	7	TIFFError ( TIFFFileName ( in ) , "Failed to allocate buffer (%lu elements of %lu each)" , ( unsigned long ) pixel_count , ( unsigned long ) sizeof ( uint32 ) )
FUNCTION_CALL	404:8	405:61	8	TIFFError ( TIFFFileName ( in ) , "Failed to allocate buffer (%lu elements of %lu each)" , ( unsigned long ) pixel_count , ( unsigned long ) sizeof ( uint32 ) )
CALLEE	404:8	404:8	9	TIFFError
LEAF_NODE	404:8	404:8	10	TIFFError
LEAF_NODE	404:17	404:17	9	(
ARGUMENT	404:18	404:18	9	TIFFFileName ( in )
FUNCTION_CALL	404:18	404:33	10	TIFFFileName ( in )
CALLEE	404:18	404:18	11	TIFFFileName
LEAF_NODE	404:18	404:18	12	TIFFFileName
LEAF_NODE	404:30	404:30	11	(
ARGUMENT	404:31	404:31	11	in
FIELD	404:31	404:31	12	in
LEAF_NODE	404:31	404:31	13	in
LEAF_NODE	404:33	404:33	11	)
LEAF_NODE	404:34	404:34	9	,
ARGUMENT	404:36	404:36	9	"Failed to allocate buffer (%lu elements of %lu each)"
FIELD	404:36	404:36	10	"Failed to allocate buffer (%lu elements of %lu each)"
LEAF_NODE	404:36	404:36	11	"Failed to allocate buffer (%lu elements of %lu each)"
LEAF_NODE	404:90	404:90	9	,
ARGUMENT	405:4	405:19	9	( unsigned long ) pixel_count
LEAF_NODE	405:4	405:4	10	(
TYPE_NAME	405:5	405:14	10	unsigned long
LEAF_NODE	405:5	405:5	11	unsigned
LEAF_NODE	405:14	405:14	11	long
LEAF_NODE	405:18	405:18	10	)
FIELD	405:19	405:19	10	pixel_count
LEAF_NODE	405:19	405:19	11	pixel_count
LEAF_NODE	405:30	405:30	9	,
ARGUMENT	405:32	405:47	9	( unsigned long ) sizeof ( uint32 )
LEAF_NODE	405:32	405:32	10	(
TYPE_NAME	405:33	405:42	10	unsigned long
LEAF_NODE	405:33	405:33	11	unsigned
LEAF_NODE	405:42	405:42	11	long
LEAF_NODE	405:46	405:46	10	)
FUNCTION_CALL	405:47	405:60	10	sizeof ( uint32 )
CALLEE	405:47	405:47	11	sizeof
LEAF_NODE	405:47	405:47	12	sizeof
LEAF_NODE	405:53	405:53	11	(
ARGUMENT	405:54	405:54	11	uint32
FIELD	405:54	405:54	12	uint32
LEAF_NODE	405:54	405:54	13	uint32
LEAF_NODE	405:60	405:60	11	)
LEAF_NODE	405:61	405:61	9	)
LEAF_NODE	405:62	405:62	7	;
JUMP_STATEMENT	406:8	406:18	6	return ( 0 ) ;
KEYWORD	406:8	406:8	7	return
LEAF_NODE	406:8	406:8	8	return
DESTINATION	406:15	406:15	7	( 0 )
EXPR	406:15	406:17	8	( 0 )
LEAF_NODE	406:15	406:15	9	(
FIELD	406:16	406:16	9	0
LEAF_NODE	406:16	406:16	10	0
LEAF_NODE	406:17	406:17	9	)
LEAF_NODE	406:18	406:18	7	;
LEAF_NODE	407:4	407:4	5	}
SELECTION	410:4	411:60	3	
KEYWORD	410:4	410:4	4	if
LEAF_NODE	410:4	410:4	5	if
LEAF_NODE	410:7	410:7	4	(
CONDITION	410:8	410:8	4	! TIFFReadRGBAImageOriented ( in , width , height , raster , ORIENTATION_TOPLEFT , 0 )
EXPR	410:8	410:8	5	! TIFFReadRGBAImageOriented ( in , width , height , raster , ORIENTATION_TOPLEFT , 0 )
UNARY_EXPR	410:8	410:9	6	! TIFFReadRGBAImageOriented ( in , width , height , raster , ORIENTATION_TOPLEFT , 0 )
UNARY_OPERATOR	410:8	410:8	7	!
LEAF_NODE	410:8	410:8	8	!
FUNCTION_CALL	410:9	411:57	7	TIFFReadRGBAImageOriented ( in , width , height , raster , ORIENTATION_TOPLEFT , 0 )
CALLEE	410:9	410:9	8	TIFFReadRGBAImageOriented
LEAF_NODE	410:9	410:9	9	TIFFReadRGBAImageOriented
LEAF_NODE	410:34	410:34	8	(
ARGUMENT	410:35	410:35	8	in
FIELD	410:35	410:35	9	in
LEAF_NODE	410:35	410:35	10	in
LEAF_NODE	410:37	410:37	8	,
ARGUMENT	410:39	410:39	8	width
FIELD	410:39	410:39	9	width
LEAF_NODE	410:39	410:39	10	width
LEAF_NODE	410:44	410:44	8	,
ARGUMENT	410:46	410:46	8	height
FIELD	410:46	410:46	9	height
LEAF_NODE	410:46	410:46	10	height
LEAF_NODE	410:52	410:52	8	,
ARGUMENT	410:54	410:54	8	raster
FIELD	410:54	410:54	9	raster
LEAF_NODE	410:54	410:54	10	raster
LEAF_NODE	410:60	410:60	8	,
ARGUMENT	411:35	411:35	8	ORIENTATION_TOPLEFT
FIELD	411:35	411:35	9	ORIENTATION_TOPLEFT
LEAF_NODE	411:35	411:35	10	ORIENTATION_TOPLEFT
LEAF_NODE	411:54	411:54	8	,
ARGUMENT	411:56	411:56	8	0
FIELD	411:56	411:56	9	0
LEAF_NODE	411:56	411:56	10	0
LEAF_NODE	411:57	411:57	8	)
LEAF_NODE	411:58	411:58	4	)
STATEMENTS	411:60	414:4	4	
LEAF_NODE	411:60	411:60	5	{
STATEMENTS	412:8	413:8	5	
EXPR_STATEMENT	412:8	412:25	6	_TIFFfree ( raster ) ;
EXPR	412:8	412:8	7	_TIFFfree ( raster )
FUNCTION_CALL	412:8	412:24	8	_TIFFfree ( raster )
CALLEE	412:8	412:8	9	_TIFFfree
LEAF_NODE	412:8	412:8	10	_TIFFfree
LEAF_NODE	412:17	412:17	9	(
ARGUMENT	412:18	412:18	9	raster
FIELD	412:18	412:18	10	raster
LEAF_NODE	412:18	412:18	11	raster
LEAF_NODE	412:24	412:24	9	)
LEAF_NODE	412:25	412:25	7	;
JUMP_STATEMENT	413:8	413:18	6	return ( 0 ) ;
KEYWORD	413:8	413:8	7	return
LEAF_NODE	413:8	413:8	8	return
DESTINATION	413:15	413:15	7	( 0 )
EXPR	413:15	413:17	8	( 0 )
LEAF_NODE	413:15	413:15	9	(
FIELD	413:16	413:16	9	0
LEAF_NODE	413:16	413:16	10	0
LEAF_NODE	413:17	413:17	9	)
LEAF_NODE	413:18	413:18	7	;
LEAF_NODE	414:4	414:4	5	}
EXPR_STATEMENT	421:4	421:47	3	TIFFSwabArrayOfLong ( raster , width * height ) ;
EXPR	421:4	421:4	4	TIFFSwabArrayOfLong ( raster , width * height )
FUNCTION_CALL	421:4	421:46	5	TIFFSwabArrayOfLong ( raster , width * height )
CALLEE	421:4	421:4	6	TIFFSwabArrayOfLong
LEAF_NODE	421:4	421:4	7	TIFFSwabArrayOfLong
LEAF_NODE	421:23	421:23	6	(
ARGUMENT	421:24	421:24	6	raster
FIELD	421:24	421:24	7	raster
LEAF_NODE	421:24	421:24	8	raster
LEAF_NODE	421:30	421:30	6	,
ARGUMENT	421:32	421:40	6	width * height
FIELD	421:32	421:32	7	width
LEAF_NODE	421:32	421:32	8	width
LEAF_NODE	421:38	421:38	7	*
FIELD	421:40	421:40	7	height
LEAF_NODE	421:40	421:40	8	height
LEAF_NODE	421:46	421:46	6	)
LEAF_NODE	421:47	421:47	4	;
SELECTION	427:4	428:4	3	
KEYWORD	427:4	427:4	4	if
LEAF_NODE	427:4	427:4	5	if
LEAF_NODE	427:7	427:7	4	(
CONDITION	427:8	427:8	4	no_alpha
EXPR	427:8	427:8	5	no_alpha
FIELD	427:8	427:8	6	no_alpha
LEAF_NODE	427:8	427:8	7	no_alpha
LEAF_NODE	427:16	427:16	4	)
STATEMENTS	428:4	441:4	4	
LEAF_NODE	428:4	428:4	5	{
STATEMENTS	429:8	433:8	5	
SIMPLE_DECL	429:8	429:34	6	size_t count ; count = pixel_count ;
VAR_DECL	429:8	429:15	7	size_t count ; count = pixel_count
TYPE	429:8	429:8	8	size_t
TYPE_NAME	429:8	429:8	9	size_t
LEAF_NODE	429:8	429:8	10	size_t
NAME	429:15	429:15	8	count
LEAF_NODE	429:15	429:15	9	count
LEAF_NODE	0:0	0:0	8	;
INIT	429:15	429:15	8	count = pixel_count
ASSIGN	429:15	429:23	9	count = pixel_count
LVAL	429:15	429:15	10	count
NAME	429:15	429:15	11	count
LEAF_NODE	429:15	429:15	12	count
ASSIGN_OP	429:21	429:21	10	=
LEAF_NODE	429:21	429:21	11	=
RVAL	429:23	429:23	10	pixel_count
FIELD	429:23	429:23	11	pixel_count
LEAF_NODE	429:23	429:23	12	pixel_count
LEAF_NODE	429:34	429:34	7	;
SIMPLE_DECL	430:8	430:32	6	unsigned char * src , unsigned char * dst ;
INIT_DECL_LIST	430:8	430:8	7	unsigned char * src , unsigned char * dst
VAR_DECL	430:8	430:23	8	unsigned char * src
TYPE	430:8	430:22	9	unsigned char *
TYPE_NAME	430:8	430:17	10	unsigned char
LEAF_NODE	430:8	430:8	11	unsigned
LEAF_NODE	430:17	430:17	11	char
POINTER	430:22	430:22	10	*
LEAF_NODE	430:22	430:22	11	*
NAME	430:23	430:23	9	src
LEAF_NODE	430:23	430:23	10	src
LEAF_NODE	430:26	430:26	8	,
VAR_DECL	430:8	430:29	8	unsigned char * dst
TYPE	430:8	430:28	9	unsigned char *
TYPE_NAME	430:8	430:17	10	unsigned char
LEAF_NODE	430:8	430:8	11	unsigned
LEAF_NODE	430:17	430:17	11	char
POINTER	430:28	430:28	10	*
LEAF_NODE	430:28	430:28	11	*
NAME	430:29	430:29	9	dst
LEAF_NODE	430:29	430:29	10	dst
LEAF_NODE	430:32	430:32	7	;
EXPR_STATEMENT	432:1	432:37	6	src = dst = ( unsigned char * ) raster ;
EXPR	432:1	432:1	7	src = dst = ( unsigned char * ) raster
ASSIGN	432:1	432:7	8	src = dst = ( unsigned char * ) raster
LVAL	432:1	432:1	9	src
FIELD	432:1	432:1	10	src
LEAF_NODE	432:1	432:1	11	src
ASSIGN_OP	432:5	432:5	9	=
LEAF_NODE	432:5	432:5	10	=
RVAL	432:7	432:7	9	dst = ( unsigned char * ) raster
ASSIGN	432:7	432:13	10	dst = ( unsigned char * ) raster
LVAL	432:7	432:7	11	dst
FIELD	432:7	432:7	12	dst
LEAF_NODE	432:7	432:7	13	dst
ASSIGN_OP	432:11	432:11	11	=
LEAF_NODE	432:11	432:11	12	=
RVAL	432:13	432:31	11	( unsigned char * ) raster
LEAF_NODE	432:13	432:13	12	(
TYPE_NAME	432:14	432:23	12	unsigned char
LEAF_NODE	432:14	432:14	13	unsigned
LEAF_NODE	432:23	432:23	13	char
LEAF_NODE	432:28	432:28	12	*
LEAF_NODE	432:29	432:29	12	)
FIELD	432:31	432:31	12	raster
LEAF_NODE	432:31	432:31	13	raster
LEAF_NODE	432:37	432:37	7	;
ITERATION	433:8	434:8	6	
KEYWORD	433:8	433:8	7	while
LEAF_NODE	433:8	433:8	8	while
LEAF_NODE	433:14	433:14	7	(
CONDITION	433:15	433:15	7	count > 0
EXPR	433:15	433:23	8	count > 0
FIELD	433:15	433:15	9	count
LEAF_NODE	433:15	433:15	10	count
REL_OPERATOR	433:21	433:21	9	>
LEAF_NODE	433:21	433:21	10	>
FIELD	433:23	433:23	9	0
LEAF_NODE	433:23	433:23	10	0
LEAF_NODE	433:24	433:24	7	)
STATEMENTS	434:8	440:8	7	
LEAF_NODE	434:8	434:8	8	{
STATEMENTS	435:5	439:5	8	
EXPR_STATEMENT	435:5	435:24	9	* ( dst ++ ) = * ( src ++ ) ;
EXPR	435:5	435:5	10	* ( dst ++ ) = * ( src ++ )
ASSIGN	435:5	435:16	11	* ( dst ++ ) = * ( src ++ )
LVAL	435:5	435:5	12	* ( dst ++ )
UNARY_EXPR	435:5	435:12	13	* ( dst ++ )
UNARY_OPERATOR	435:5	435:5	14	*
LEAF_NODE	435:5	435:5	15	*
LEAF_NODE	435:6	435:6	14	(
FIELD	435:7	435:10	14	dst ++
LEAF_NODE	435:7	435:7	15	dst
LEAF_NODE	435:10	435:10	15	++
LEAF_NODE	435:12	435:12	14	)
ASSIGN_OP	435:14	435:14	12	=
LEAF_NODE	435:14	435:14	13	=
RVAL	435:16	435:16	12	* ( src ++ )
UNARY_EXPR	435:16	435:23	13	* ( src ++ )
UNARY_OPERATOR	435:16	435:16	14	*
LEAF_NODE	435:16	435:16	15	*
LEAF_NODE	435:17	435:17	14	(
FIELD	435:18	435:21	14	src ++
LEAF_NODE	435:18	435:18	15	src
LEAF_NODE	435:21	435:21	15	++
LEAF_NODE	435:23	435:23	14	)
LEAF_NODE	435:24	435:24	10	;
EXPR_STATEMENT	436:5	436:24	9	* ( dst ++ ) = * ( src ++ ) ;
EXPR	436:5	436:5	10	* ( dst ++ ) = * ( src ++ )
ASSIGN	436:5	436:16	11	* ( dst ++ ) = * ( src ++ )
LVAL	436:5	436:5	12	* ( dst ++ )
UNARY_EXPR	436:5	436:12	13	* ( dst ++ )
UNARY_OPERATOR	436:5	436:5	14	*
LEAF_NODE	436:5	436:5	15	*
LEAF_NODE	436:6	436:6	14	(
FIELD	436:7	436:10	14	dst ++
LEAF_NODE	436:7	436:7	15	dst
LEAF_NODE	436:10	436:10	15	++
LEAF_NODE	436:12	436:12	14	)
ASSIGN_OP	436:14	436:14	12	=
LEAF_NODE	436:14	436:14	13	=
RVAL	436:16	436:16	12	* ( src ++ )
UNARY_EXPR	436:16	436:23	13	* ( src ++ )
UNARY_OPERATOR	436:16	436:16	14	*
LEAF_NODE	436:16	436:16	15	*
LEAF_NODE	436:17	436:17	14	(
FIELD	436:18	436:21	14	src ++
LEAF_NODE	436:18	436:18	15	src
LEAF_NODE	436:21	436:21	15	++
LEAF_NODE	436:23	436:23	14	)
LEAF_NODE	436:24	436:24	10	;
EXPR_STATEMENT	437:5	437:24	9	* ( dst ++ ) = * ( src ++ ) ;
EXPR	437:5	437:5	10	* ( dst ++ ) = * ( src ++ )
ASSIGN	437:5	437:16	11	* ( dst ++ ) = * ( src ++ )
LVAL	437:5	437:5	12	* ( dst ++ )
UNARY_EXPR	437:5	437:12	13	* ( dst ++ )
UNARY_OPERATOR	437:5	437:5	14	*
LEAF_NODE	437:5	437:5	15	*
LEAF_NODE	437:6	437:6	14	(
FIELD	437:7	437:10	14	dst ++
LEAF_NODE	437:7	437:7	15	dst
LEAF_NODE	437:10	437:10	15	++
LEAF_NODE	437:12	437:12	14	)
ASSIGN_OP	437:14	437:14	12	=
LEAF_NODE	437:14	437:14	13	=
RVAL	437:16	437:16	12	* ( src ++ )
UNARY_EXPR	437:16	437:23	13	* ( src ++ )
UNARY_OPERATOR	437:16	437:16	14	*
LEAF_NODE	437:16	437:16	15	*
LEAF_NODE	437:17	437:17	14	(
FIELD	437:18	437:21	14	src ++
LEAF_NODE	437:18	437:18	15	src
LEAF_NODE	437:21	437:21	15	++
LEAF_NODE	437:23	437:23	14	)
LEAF_NODE	437:24	437:24	10	;
EXPR_STATEMENT	438:5	438:10	9	src ++ ;
EXPR	438:5	438:5	10	src ++
FIELD	438:5	438:8	11	src ++
LEAF_NODE	438:5	438:5	12	src
LEAF_NODE	438:8	438:8	12	++
LEAF_NODE	438:10	438:10	10	;
EXPR_STATEMENT	439:5	439:12	9	count -- ;
EXPR	439:5	439:5	10	count --
FIELD	439:5	439:10	11	count --
LEAF_NODE	439:5	439:5	12	count
LEAF_NODE	439:10	439:10	12	--
LEAF_NODE	439:12	439:12	10	;
LEAF_NODE	440:8	440:8	8	}
LEAF_NODE	441:4	441:4	5	}
ITERATION	446:4	447:4	3	
KEYWORD	446:4	446:4	4	for
LEAF_NODE	446:4	446:4	5	for
LEAF_NODE	446:8	446:8	4	(
FOR_INIT	446:9	446:16	4	row = 0 ;
EXPR	446:9	446:9	5	row = 0
ASSIGN	446:9	446:15	6	row = 0
LVAL	446:9	446:9	7	row
FIELD	446:9	446:9	8	row
LEAF_NODE	446:9	446:9	9	row
ASSIGN_OP	446:13	446:13	7	=
LEAF_NODE	446:13	446:13	8	=
RVAL	446:15	446:15	7	0
FIELD	446:15	446:15	8	0
LEAF_NODE	446:15	446:15	9	0
LEAF_NODE	446:16	446:16	5	;
CONDITION	446:18	446:18	4	row < height
EXPR	446:18	446:24	5	row < height
FIELD	446:18	446:18	6	row
LEAF_NODE	446:18	446:18	7	row
REL_OPERATOR	446:22	446:22	6	<
LEAF_NODE	446:22	446:22	7	<
FIELD	446:24	446:24	6	height
LEAF_NODE	446:24	446:24	7	height
LEAF_NODE	446:30	446:30	4	;
FOR_EXPR	446:32	446:32	4	row += rowsperstrip
EXPR	446:32	446:32	5	row += rowsperstrip
ASSIGN	446:32	446:39	6	row += rowsperstrip
LVAL	446:32	446:32	7	row
FIELD	446:32	446:32	8	row
LEAF_NODE	446:32	446:32	9	row
ASSIGN_OP	446:36	446:36	7	+=
LEAF_NODE	446:36	446:36	8	+=
RVAL	446:39	446:39	7	rowsperstrip
FIELD	446:39	446:39	8	rowsperstrip
LEAF_NODE	446:39	446:39	9	rowsperstrip
LEAF_NODE	446:51	446:51	4	)
STATEMENTS	447:4	474:4	4	
LEAF_NODE	447:4	447:4	5	{
STATEMENTS	448:8	473:8	5	
SIMPLE_DECL	448:8	448:36	6	unsigned char * raster_strip ;
VAR_DECL	448:8	448:24	7	unsigned char * raster_strip
TYPE	448:8	448:22	8	unsigned char *
TYPE_NAME	448:8	448:17	9	unsigned char
LEAF_NODE	448:8	448:8	10	unsigned
LEAF_NODE	448:17	448:17	10	char
POINTER	448:22	448:22	9	*
LEAF_NODE	448:22	448:22	10	*
NAME	448:24	448:24	8	raster_strip
LEAF_NODE	448:24	448:24	9	raster_strip
LEAF_NODE	448:36	448:36	7	;
SIMPLE_DECL	449:8	449:25	6	int rows_to_write ;
VAR_DECL	449:8	449:12	7	int rows_to_write
TYPE	449:8	449:8	8	int
TYPE_NAME	449:8	449:8	9	int
LEAF_NODE	449:8	449:8	10	int
NAME	449:12	449:12	8	rows_to_write
LEAF_NODE	449:12	449:12	9	rows_to_write
LEAF_NODE	449:25	449:25	7	;
SIMPLE_DECL	450:8	450:27	6	int bytes_per_pixel ;
VAR_DECL	450:8	450:12	7	int bytes_per_pixel
TYPE	450:8	450:8	8	int
TYPE_NAME	450:8	450:8	9	int
LEAF_NODE	450:8	450:8	10	int
NAME	450:12	450:12	8	bytes_per_pixel
LEAF_NODE	450:12	450:12	9	bytes_per_pixel
LEAF_NODE	450:27	450:27	7	;
SELECTION	452:8	453:8	6	
KEYWORD	452:8	452:8	7	if
LEAF_NODE	452:8	452:8	8	if
LEAF_NODE	452:11	452:11	7	(
CONDITION	452:12	452:12	7	no_alpha
EXPR	452:12	452:12	8	no_alpha
FIELD	452:12	452:12	9	no_alpha
LEAF_NODE	452:12	452:12	10	no_alpha
LEAF_NODE	452:20	452:20	7	)
STATEMENTS	453:8	456:8	7	
LEAF_NODE	453:8	453:8	8	{
STATEMENTS	454:12	455:12	8	
LEAF_NODE	454:12	454:12	9	raster_strip
LEAF_NODE	454:25	454:25	9	=
LEAF_NODE	454:27	454:27	9	(
LEAF_NODE	454:28	454:28	9	(
LEAF_NODE	454:29	454:29	9	unsigned
LEAF_NODE	454:38	454:38	9	char
LEAF_NODE	454:43	454:43	9	*
LEAF_NODE	454:44	454:44	9	)
LEAF_NODE	454:46	454:46	9	raster
LEAF_NODE	454:52	454:52	9	)
LEAF_NODE	454:54	454:54	9	+
LEAF_NODE	454:56	454:56	9	3
EXPR_STATEMENT	454:58	454:71	9	* row * width ;
EXPR	454:58	454:66	10	* row * width
UNARY_EXPR	454:58	454:60	11	* row
UNARY_OPERATOR	454:58	454:58	12	*
LEAF_NODE	454:58	454:58	13	*
FIELD	454:60	454:60	12	row
LEAF_NODE	454:60	454:60	13	row
LEAF_NODE	454:64	454:64	11	*
FIELD	454:66	454:66	11	width
LEAF_NODE	454:66	454:66	12	width
LEAF_NODE	454:71	454:71	10	;
EXPR_STATEMENT	455:12	455:31	9	bytes_per_pixel = 3 ;
EXPR	455:12	455:12	10	bytes_per_pixel = 3
ASSIGN	455:12	455:30	11	bytes_per_pixel = 3
LVAL	455:12	455:12	12	bytes_per_pixel
FIELD	455:12	455:12	13	bytes_per_pixel
LEAF_NODE	455:12	455:12	14	bytes_per_pixel
ASSIGN_OP	455:28	455:28	12	=
LEAF_NODE	455:28	455:28	13	=
RVAL	455:30	455:30	12	3
FIELD	455:30	455:30	13	3
LEAF_NODE	455:30	455:30	14	3
LEAF_NODE	455:31	455:31	10	;
LEAF_NODE	456:8	456:8	8	}
SELECTION	457:8	458:8	6	
KEYWORD	457:8	457:8	7	else
LEAF_NODE	457:8	457:8	8	else
STATEMENTS	458:8	461:8	7	
LEAF_NODE	458:8	458:8	8	{
STATEMENTS	459:12	460:12	8	
EXPR_STATEMENT	459:12	459:67	9	raster_strip = ( unsigned char * ) ( raster + row * width ) ;
EXPR	459:12	459:12	10	raster_strip = ( unsigned char * ) ( raster + row * width )
ASSIGN	459:12	459:27	11	raster_strip = ( unsigned char * ) ( raster + row * width )
LVAL	459:12	459:12	12	raster_strip
FIELD	459:12	459:12	13	raster_strip
LEAF_NODE	459:12	459:12	14	raster_strip
ASSIGN_OP	459:25	459:25	12	=
LEAF_NODE	459:25	459:25	13	=
RVAL	459:27	459:66	12	( unsigned char * ) ( raster + row * width )
LEAF_NODE	459:27	459:27	13	(
TYPE_NAME	459:28	459:37	13	unsigned char
LEAF_NODE	459:28	459:28	14	unsigned
LEAF_NODE	459:37	459:37	14	char
LEAF_NODE	459:42	459:42	13	*
LEAF_NODE	459:43	459:43	13	)
LEAF_NODE	459:45	459:45	13	(
FIELD	459:46	459:46	13	raster
LEAF_NODE	459:46	459:46	14	raster
LEAF_NODE	459:53	459:53	13	+
FIELD	459:55	459:55	13	row
LEAF_NODE	459:55	459:55	14	row
LEAF_NODE	459:59	459:59	13	*
FIELD	459:61	459:61	13	width
LEAF_NODE	459:61	459:61	14	width
LEAF_NODE	459:66	459:66	13	)
LEAF_NODE	459:67	459:67	10	;
EXPR_STATEMENT	460:12	460:31	9	bytes_per_pixel = 4 ;
EXPR	460:12	460:12	10	bytes_per_pixel = 4
ASSIGN	460:12	460:30	11	bytes_per_pixel = 4
LVAL	460:12	460:12	12	bytes_per_pixel
FIELD	460:12	460:12	13	bytes_per_pixel
LEAF_NODE	460:12	460:12	14	bytes_per_pixel
ASSIGN_OP	460:28	460:28	12	=
LEAF_NODE	460:28	460:28	13	=
RVAL	460:30	460:30	12	4
FIELD	460:30	460:30	13	4
LEAF_NODE	460:30	460:30	14	4
LEAF_NODE	460:31	460:31	10	;
LEAF_NODE	461:8	461:8	8	}
SELECTION	463:8	464:12	6	
KEYWORD	463:8	463:8	7	if
LEAF_NODE	463:8	463:8	8	if
LEAF_NODE	463:10	463:10	7	(
CONDITION	463:12	463:12	7	row + rowsperstrip > height
EXPR	463:12	463:33	8	row + rowsperstrip > height
FIELD	463:12	463:12	9	row
LEAF_NODE	463:12	463:12	10	row
LEAF_NODE	463:16	463:16	9	+
FIELD	463:18	463:18	9	rowsperstrip
LEAF_NODE	463:18	463:18	10	rowsperstrip
REL_OPERATOR	463:31	463:31	9	>
LEAF_NODE	463:31	463:31	10	>
FIELD	463:33	463:33	9	height
LEAF_NODE	463:33	463:33	10	height
LEAF_NODE	463:40	463:40	7	)
STATEMENTS	464:12	464:12	7	
EXPR_STATEMENT	464:12	464:40	8	rows_to_write = height - row ;
EXPR	464:12	464:12	9	rows_to_write = height - row
ASSIGN	464:12	464:28	10	rows_to_write = height - row
LVAL	464:12	464:12	11	rows_to_write
FIELD	464:12	464:12	12	rows_to_write
LEAF_NODE	464:12	464:12	13	rows_to_write
ASSIGN_OP	464:26	464:26	11	=
LEAF_NODE	464:26	464:26	12	=
RVAL	464:28	464:37	11	height - row
FIELD	464:28	464:28	12	height
LEAF_NODE	464:28	464:28	13	height
LEAF_NODE	464:35	464:35	12	-
FIELD	464:37	464:37	12	row
LEAF_NODE	464:37	464:37	13	row
LEAF_NODE	464:40	464:40	9	;
SELECTION	465:8	466:12	6	
KEYWORD	465:8	465:8	7	else
LEAF_NODE	465:8	465:8	8	else
STATEMENTS	466:12	466:12	7	
EXPR_STATEMENT	466:12	466:40	8	rows_to_write = rowsperstrip ;
EXPR	466:12	466:12	9	rows_to_write = rowsperstrip
ASSIGN	466:12	466:28	10	rows_to_write = rowsperstrip
LVAL	466:12	466:12	11	rows_to_write
FIELD	466:12	466:12	12	rows_to_write
LEAF_NODE	466:12	466:12	13	rows_to_write
ASSIGN_OP	466:26	466:26	11	=
LEAF_NODE	466:26	466:26	12	=
RVAL	466:28	466:28	11	rowsperstrip
FIELD	466:28	466:28	12	rowsperstrip
LEAF_NODE	466:28	466:28	13	rowsperstrip
LEAF_NODE	466:40	466:40	9	;
LEAF_NODE	468:8	468:8	6	if
LEAF_NODE	468:10	468:10	6	(
LEAF_NODE	468:12	468:12	6	TIFFWriteEncodedStrip
LEAF_NODE	468:33	468:33	6	(
LEAF_NODE	468:35	468:35	6	out
LEAF_NODE	468:38	468:38	6	,
LEAF_NODE	468:40	468:40	6	row
LEAF_NODE	468:44	468:44	6	/
LEAF_NODE	468:46	468:46	6	rowsperstrip
LEAF_NODE	468:58	468:58	6	,
LEAF_NODE	468:60	468:60	6	raster_strip
LEAF_NODE	468:72	468:72	6	,
LEAF_NODE	469:29	469:29	6	bytes_per_pixel
LEAF_NODE	469:45	469:45	6	*
LEAF_NODE	469:47	469:47	6	rows_to_write
LEAF_NODE	469:61	469:61	6	*
LEAF_NODE	469:63	469:63	6	width
LEAF_NODE	469:69	469:69	6	)
LEAF_NODE	469:71	469:71	6	==
LEAF_NODE	469:74	469:74	6	-
LEAF_NODE	469:75	469:75	6	1
LEAF_NODE	469:77	469:77	6	)
LEAF_NODE	470:8	470:8	6	{
STATEMENTS	471:12	472:12	6	
EXPR_STATEMENT	471:12	471:31	7	_TIFFfree ( raster ) ;
EXPR	471:12	471:12	8	_TIFFfree ( raster )
FUNCTION_CALL	471:12	471:30	9	_TIFFfree ( raster )
CALLEE	471:12	471:12	10	_TIFFfree
LEAF_NODE	471:12	471:12	11	_TIFFfree
LEAF_NODE	471:21	471:21	10	(
ARGUMENT	471:23	471:23	10	raster
FIELD	471:23	471:23	11	raster
LEAF_NODE	471:23	471:23	12	raster
LEAF_NODE	471:30	471:30	10	)
LEAF_NODE	471:31	471:31	8	;
JUMP_STATEMENT	472:12	472:20	7	return 0 ;
KEYWORD	472:12	472:12	8	return
LEAF_NODE	472:12	472:12	9	return
DESTINATION	472:19	472:19	8	0
EXPR	472:19	472:19	9	0
FIELD	472:19	472:19	10	0
LEAF_NODE	472:19	472:19	11	0
LEAF_NODE	472:20	472:20	8	;
LEAF_NODE	473:8	473:8	6	}
LEAF_NODE	474:4	474:4	5	}
EXPR_STATEMENT	476:4	476:23	3	_TIFFfree ( raster ) ;
EXPR	476:4	476:4	4	_TIFFfree ( raster )
FUNCTION_CALL	476:4	476:22	5	_TIFFfree ( raster )
CALLEE	476:4	476:4	6	_TIFFfree
LEAF_NODE	476:4	476:4	7	_TIFFfree
LEAF_NODE	476:13	476:13	6	(
ARGUMENT	476:15	476:15	6	raster
FIELD	476:15	476:15	7	raster
LEAF_NODE	476:15	476:15	8	raster
LEAF_NODE	476:22	476:22	6	)
LEAF_NODE	476:23	476:23	4	;
JUMP_STATEMENT	478:4	478:12	3	return 1 ;
KEYWORD	478:4	478:4	4	return
LEAF_NODE	478:4	478:4	5	return
DESTINATION	478:11	478:11	4	1
EXPR	478:11	478:11	5	1
FIELD	478:11	478:11	6	1
LEAF_NODE	478:11	478:11	7	1
LEAF_NODE	478:12	478:12	4	;
LEAF_NODE	479:0	479:0	2	}
FUNCTION_DEF	482:0	529:0	1	
RETURN_TYPE	482:0	482:7	2	static int
LEAF_NODE	482:0	482:0	3	static
TYPE_NAME	482:7	482:7	3	int
LEAF_NODE	482:7	482:7	4	int
FUNCTION_NAME	483:0	483:0	2	tiffcvt
LEAF_NODE	483:0	483:0	3	tiffcvt
PARAMETER_LIST	483:7	483:27	2	( TIFF * in , TIFF * out )
LEAF_NODE	483:7	483:7	3	(
PARAMETER_DECL	483:8	483:14	3	TIFF * in
TYPE	483:8	483:12	4	TIFF *
TYPE_NAME	483:8	483:8	5	TIFF
LEAF_NODE	483:8	483:8	6	TIFF
POINTER	483:12	483:12	5	*
LEAF_NODE	483:12	483:12	6	*
NAME	483:14	483:14	4	in
LEAF_NODE	483:14	483:14	5	in
LEAF_NODE	483:16	483:16	3	,
PARAMETER_DECL	483:18	483:24	3	TIFF * out
TYPE	483:18	483:22	4	TIFF *
TYPE_NAME	483:18	483:18	5	TIFF
LEAF_NODE	483:18	483:18	6	TIFF
POINTER	483:22	483:22	5	*
LEAF_NODE	483:22	483:22	6	*
NAME	483:24	483:24	4	out
LEAF_NODE	483:24	483:24	5	out
LEAF_NODE	483:27	483:27	3	)
LEAF_NODE	484:0	484:0	2	{
STATEMENTS	485:1	527:8	2	
SIMPLE_DECL	485:1	485:21	3	uint32 width , uint32 height ;
INIT_DECL_LIST	485:1	485:1	4	uint32 width , uint32 height
VAR_DECL	485:1	485:8	5	uint32 width
TYPE	485:1	485:1	6	uint32
TYPE_NAME	485:1	485:1	7	uint32
LEAF_NODE	485:1	485:1	8	uint32
NAME	485:8	485:8	6	width
LEAF_NODE	485:8	485:8	7	width
LEAF_NODE	485:13	485:13	5	,
VAR_DECL	485:1	485:15	5	uint32 height
TYPE	485:1	485:1	6	uint32
TYPE_NAME	485:1	485:1	7	uint32
LEAF_NODE	485:1	485:1	8	uint32
NAME	485:15	485:15	6	height
LEAF_NODE	485:15	485:15	7	height
LEAF_NODE	485:21	485:21	4	;
SIMPLE_DECL	486:1	486:14	3	uint16 shortv ;
VAR_DECL	486:1	486:8	4	uint16 shortv
TYPE	486:1	486:1	5	uint16
TYPE_NAME	486:1	486:1	6	uint16
LEAF_NODE	486:1	486:1	7	uint16
NAME	486:8	486:8	5	shortv
LEAF_NODE	486:8	486:8	6	shortv
LEAF_NODE	486:14	486:14	4	;
SIMPLE_DECL	487:1	487:13	3	float floatv ;
VAR_DECL	487:1	487:7	4	float floatv
TYPE	487:1	487:1	5	float
TYPE_NAME	487:1	487:1	6	float
LEAF_NODE	487:1	487:1	7	float
NAME	487:7	487:7	5	floatv
LEAF_NODE	487:7	487:7	6	floatv
LEAF_NODE	487:13	487:13	4	;
SIMPLE_DECL	488:1	488:14	3	char * stringv ;
VAR_DECL	488:1	488:7	4	char * stringv
TYPE	488:1	488:6	5	char *
TYPE_NAME	488:1	488:1	6	char
LEAF_NODE	488:1	488:1	7	char
POINTER	488:6	488:6	6	*
LEAF_NODE	488:6	488:6	7	*
NAME	488:7	488:7	5	stringv
LEAF_NODE	488:7	488:7	6	stringv
LEAF_NODE	488:14	488:14	4	;
SIMPLE_DECL	489:1	489:13	3	uint32 longv ;
VAR_DECL	489:1	489:8	4	uint32 longv
TYPE	489:1	489:1	5	uint32
TYPE_NAME	489:1	489:1	6	uint32
LEAF_NODE	489:1	489:1	7	uint32
NAME	489:8	489:8	5	longv
LEAF_NODE	489:8	489:8	6	longv
LEAF_NODE	489:13	489:13	4	;
SIMPLE_DECL	490:8	490:19	3	uint16 [ 1 ] v ;
VAR_DECL	490:8	490:15	4	uint16 [ 1 ] v
TYPE	490:8	490:16	5	uint16 [ 1 ]
TYPE_NAME	490:8	490:8	6	uint16
LEAF_NODE	490:8	490:8	7	uint16
TYPE_SUFFIX	490:16	490:18	6	[ 1 ]
LEAF_NODE	490:16	490:16	7	[
FIELD	490:17	490:17	7	1
LEAF_NODE	490:17	490:17	8	1
LEAF_NODE	490:18	490:18	7	]
NAME	490:15	490:15	5	v
LEAF_NODE	490:15	490:15	6	v
LEAF_NODE	490:19	490:19	4	;
EXPR_STATEMENT	492:1	492:45	3	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width ) ;
EXPR	492:1	492:1	4	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
FUNCTION_CALL	492:1	492:44	5	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
CALLEE	492:1	492:1	6	TIFFGetField
LEAF_NODE	492:1	492:1	7	TIFFGetField
LEAF_NODE	492:13	492:13	6	(
ARGUMENT	492:14	492:14	6	in
FIELD	492:14	492:14	7	in
LEAF_NODE	492:14	492:14	8	in
LEAF_NODE	492:16	492:16	6	,
ARGUMENT	492:18	492:18	6	TIFFTAG_IMAGEWIDTH
FIELD	492:18	492:18	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	492:18	492:18	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	492:36	492:36	6	,
ARGUMENT	492:38	492:38	6	& width
UNARY_EXPR	492:38	492:39	7	& width
UNARY_OPERATOR	492:38	492:38	8	&
LEAF_NODE	492:38	492:38	9	&
FIELD	492:39	492:39	8	width
LEAF_NODE	492:39	492:39	9	width
LEAF_NODE	492:44	492:44	6	)
LEAF_NODE	492:45	492:45	4	;
EXPR_STATEMENT	493:1	493:47	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height ) ;
EXPR	493:1	493:1	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height )
FUNCTION_CALL	493:1	493:46	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height )
CALLEE	493:1	493:1	6	TIFFGetField
LEAF_NODE	493:1	493:1	7	TIFFGetField
LEAF_NODE	493:13	493:13	6	(
ARGUMENT	493:14	493:14	6	in
FIELD	493:14	493:14	7	in
LEAF_NODE	493:14	493:14	8	in
LEAF_NODE	493:16	493:16	6	,
ARGUMENT	493:18	493:18	6	TIFFTAG_IMAGELENGTH
FIELD	493:18	493:18	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	493:18	493:18	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	493:37	493:37	6	,
ARGUMENT	493:39	493:39	6	& height
UNARY_EXPR	493:39	493:40	7	& height
UNARY_OPERATOR	493:39	493:39	8	&
LEAF_NODE	493:39	493:39	9	&
FIELD	493:40	493:40	8	height
LEAF_NODE	493:40	493:40	9	height
LEAF_NODE	493:46	493:46	6	)
LEAF_NODE	493:47	493:47	4	;
EXPR_STATEMENT	495:1	495:38	3	CopyField ( TIFFTAG_SUBFILETYPE , longv ) ;
EXPR	495:1	495:1	4	CopyField ( TIFFTAG_SUBFILETYPE , longv )
FUNCTION_CALL	495:1	495:37	5	CopyField ( TIFFTAG_SUBFILETYPE , longv )
CALLEE	495:1	495:1	6	CopyField
LEAF_NODE	495:1	495:1	7	CopyField
LEAF_NODE	495:10	495:10	6	(
ARGUMENT	495:11	495:11	6	TIFFTAG_SUBFILETYPE
FIELD	495:11	495:11	7	TIFFTAG_SUBFILETYPE
LEAF_NODE	495:11	495:11	8	TIFFTAG_SUBFILETYPE
LEAF_NODE	495:30	495:30	6	,
ARGUMENT	495:32	495:32	6	longv
FIELD	495:32	495:32	7	longv
LEAF_NODE	495:32	495:32	8	longv
LEAF_NODE	495:37	495:37	6	)
LEAF_NODE	495:38	495:38	4	;
EXPR_STATEMENT	496:1	496:45	3	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width ) ;
EXPR	496:1	496:1	4	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width )
FUNCTION_CALL	496:1	496:44	5	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width )
CALLEE	496:1	496:1	6	TIFFSetField
LEAF_NODE	496:1	496:1	7	TIFFSetField
LEAF_NODE	496:13	496:13	6	(
ARGUMENT	496:14	496:14	6	out
FIELD	496:14	496:14	7	out
LEAF_NODE	496:14	496:14	8	out
LEAF_NODE	496:17	496:17	6	,
ARGUMENT	496:19	496:19	6	TIFFTAG_IMAGEWIDTH
FIELD	496:19	496:19	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	496:19	496:19	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	496:37	496:37	6	,
ARGUMENT	496:39	496:39	6	width
FIELD	496:39	496:39	7	width
LEAF_NODE	496:39	496:39	8	width
LEAF_NODE	496:44	496:44	6	)
LEAF_NODE	496:45	496:45	4	;
EXPR_STATEMENT	497:1	497:47	3	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , height ) ;
EXPR	497:1	497:1	4	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , height )
FUNCTION_CALL	497:1	497:46	5	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , height )
CALLEE	497:1	497:1	6	TIFFSetField
LEAF_NODE	497:1	497:1	7	TIFFSetField
LEAF_NODE	497:13	497:13	6	(
ARGUMENT	497:14	497:14	6	out
FIELD	497:14	497:14	7	out
LEAF_NODE	497:14	497:14	8	out
LEAF_NODE	497:17	497:17	6	,
ARGUMENT	497:19	497:19	6	TIFFTAG_IMAGELENGTH
FIELD	497:19	497:19	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	497:19	497:19	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	497:38	497:38	6	,
ARGUMENT	497:40	497:40	6	height
FIELD	497:40	497:40	7	height
LEAF_NODE	497:40	497:40	8	height
LEAF_NODE	497:46	497:46	6	)
LEAF_NODE	497:47	497:47	4	;
EXPR_STATEMENT	498:1	498:44	3	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 8 ) ;
EXPR	498:1	498:1	4	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 8 )
FUNCTION_CALL	498:1	498:43	5	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 8 )
CALLEE	498:1	498:1	6	TIFFSetField
LEAF_NODE	498:1	498:1	7	TIFFSetField
LEAF_NODE	498:13	498:13	6	(
ARGUMENT	498:14	498:14	6	out
FIELD	498:14	498:14	7	out
LEAF_NODE	498:14	498:14	8	out
LEAF_NODE	498:17	498:17	6	,
ARGUMENT	498:19	498:19	6	TIFFTAG_BITSPERSAMPLE
FIELD	498:19	498:19	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	498:19	498:19	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	498:40	498:40	6	,
ARGUMENT	498:42	498:42	6	8
FIELD	498:42	498:42	7	8
LEAF_NODE	498:42	498:42	8	8
LEAF_NODE	498:43	498:43	6	)
LEAF_NODE	498:44	498:44	4	;
EXPR_STATEMENT	499:1	499:52	3	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	499:1	499:1	4	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	499:1	499:51	5	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	499:1	499:1	6	TIFFSetField
LEAF_NODE	499:1	499:1	7	TIFFSetField
LEAF_NODE	499:13	499:13	6	(
ARGUMENT	499:14	499:14	6	out
FIELD	499:14	499:14	7	out
LEAF_NODE	499:14	499:14	8	out
LEAF_NODE	499:17	499:17	6	,
ARGUMENT	499:19	499:19	6	TIFFTAG_COMPRESSION
FIELD	499:19	499:19	7	TIFFTAG_COMPRESSION
LEAF_NODE	499:19	499:19	8	TIFFTAG_COMPRESSION
LEAF_NODE	499:38	499:38	6	,
ARGUMENT	499:40	499:40	6	compression
FIELD	499:40	499:40	7	compression
LEAF_NODE	499:40	499:40	8	compression
LEAF_NODE	499:51	499:51	6	)
LEAF_NODE	499:52	499:52	4	;
EXPR_STATEMENT	500:1	500:56	3	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_RGB ) ;
EXPR	500:1	500:1	4	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_RGB )
FUNCTION_CALL	500:1	500:55	5	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_RGB )
CALLEE	500:1	500:1	6	TIFFSetField
LEAF_NODE	500:1	500:1	7	TIFFSetField
LEAF_NODE	500:13	500:13	6	(
ARGUMENT	500:14	500:14	6	out
FIELD	500:14	500:14	7	out
LEAF_NODE	500:14	500:14	8	out
LEAF_NODE	500:17	500:17	6	,
ARGUMENT	500:19	500:19	6	TIFFTAG_PHOTOMETRIC
FIELD	500:19	500:19	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	500:19	500:19	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	500:38	500:38	6	,
ARGUMENT	500:40	500:40	6	PHOTOMETRIC_RGB
FIELD	500:40	500:40	7	PHOTOMETRIC_RGB
LEAF_NODE	500:40	500:40	8	PHOTOMETRIC_RGB
LEAF_NODE	500:55	500:55	6	)
LEAF_NODE	500:56	500:56	4	;
EXPR_STATEMENT	502:1	502:37	3	CopyField ( TIFFTAG_FILLORDER , shortv ) ;
EXPR	502:1	502:1	4	CopyField ( TIFFTAG_FILLORDER , shortv )
FUNCTION_CALL	502:1	502:36	5	CopyField ( TIFFTAG_FILLORDER , shortv )
CALLEE	502:1	502:1	6	CopyField
LEAF_NODE	502:1	502:1	7	CopyField
LEAF_NODE	502:10	502:10	6	(
ARGUMENT	502:11	502:11	6	TIFFTAG_FILLORDER
FIELD	502:11	502:11	7	TIFFTAG_FILLORDER
LEAF_NODE	502:11	502:11	8	TIFFTAG_FILLORDER
LEAF_NODE	502:28	502:28	6	,
ARGUMENT	502:30	502:30	6	shortv
FIELD	502:30	502:30	7	shortv
LEAF_NODE	502:30	502:30	8	shortv
LEAF_NODE	502:36	502:36	6	)
LEAF_NODE	502:37	502:37	4	;
EXPR_STATEMENT	503:1	503:60	3	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT ) ;
EXPR	503:1	503:1	4	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
FUNCTION_CALL	503:1	503:59	5	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
CALLEE	503:1	503:1	6	TIFFSetField
LEAF_NODE	503:1	503:1	7	TIFFSetField
LEAF_NODE	503:13	503:13	6	(
ARGUMENT	503:14	503:14	6	out
FIELD	503:14	503:14	7	out
LEAF_NODE	503:14	503:14	8	out
LEAF_NODE	503:17	503:17	6	,
ARGUMENT	503:19	503:19	6	TIFFTAG_ORIENTATION
FIELD	503:19	503:19	7	TIFFTAG_ORIENTATION
LEAF_NODE	503:19	503:19	8	TIFFTAG_ORIENTATION
LEAF_NODE	503:38	503:38	6	,
ARGUMENT	503:40	503:40	6	ORIENTATION_TOPLEFT
FIELD	503:40	503:40	7	ORIENTATION_TOPLEFT
LEAF_NODE	503:40	503:40	8	ORIENTATION_TOPLEFT
LEAF_NODE	503:59	503:59	6	)
LEAF_NODE	503:60	503:60	4	;
SELECTION	505:8	506:12	3	
KEYWORD	505:8	505:8	4	if
LEAF_NODE	505:8	505:8	5	if
LEAF_NODE	505:10	505:10	4	(
CONDITION	505:12	505:12	4	no_alpha
EXPR	505:12	505:12	5	no_alpha
FIELD	505:12	505:12	6	no_alpha
LEAF_NODE	505:12	505:12	7	no_alpha
LEAF_NODE	505:21	505:21	4	)
STATEMENTS	506:12	506:12	4	
EXPR_STATEMENT	506:12	506:57	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 3 ) ;
EXPR	506:12	506:12	6	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 3 )
FUNCTION_CALL	506:12	506:56	7	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 3 )
CALLEE	506:12	506:12	8	TIFFSetField
LEAF_NODE	506:12	506:12	9	TIFFSetField
LEAF_NODE	506:24	506:24	8	(
ARGUMENT	506:25	506:25	8	out
FIELD	506:25	506:25	9	out
LEAF_NODE	506:25	506:25	10	out
LEAF_NODE	506:28	506:28	8	,
ARGUMENT	506:30	506:30	8	TIFFTAG_SAMPLESPERPIXEL
FIELD	506:30	506:30	9	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	506:30	506:30	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	506:53	506:53	8	,
ARGUMENT	506:55	506:55	8	3
FIELD	506:55	506:55	9	3
LEAF_NODE	506:55	506:55	10	3
LEAF_NODE	506:56	506:56	8	)
LEAF_NODE	506:57	506:57	6	;
SELECTION	507:8	508:12	3	
KEYWORD	507:8	507:8	4	else
LEAF_NODE	507:8	507:8	5	else
STATEMENTS	508:12	508:12	4	
EXPR_STATEMENT	508:12	508:57	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 4 ) ;
EXPR	508:12	508:12	6	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 4 )
FUNCTION_CALL	508:12	508:56	7	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 4 )
CALLEE	508:12	508:12	8	TIFFSetField
LEAF_NODE	508:12	508:12	9	TIFFSetField
LEAF_NODE	508:24	508:24	8	(
ARGUMENT	508:25	508:25	8	out
FIELD	508:25	508:25	9	out
LEAF_NODE	508:25	508:25	10	out
LEAF_NODE	508:28	508:28	8	,
ARGUMENT	508:30	508:30	8	TIFFTAG_SAMPLESPERPIXEL
FIELD	508:30	508:30	9	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	508:30	508:30	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	508:53	508:53	8	,
ARGUMENT	508:55	508:55	8	4
FIELD	508:55	508:55	9	4
LEAF_NODE	508:55	508:55	10	4
LEAF_NODE	508:56	508:56	8	)
LEAF_NODE	508:57	508:57	6	;
SELECTION	510:8	511:8	3	
KEYWORD	510:8	510:8	4	if
LEAF_NODE	510:8	510:8	5	if
LEAF_NODE	510:10	510:10	4	(
CONDITION	510:12	510:12	4	! no_alpha
EXPR	510:12	510:12	5	! no_alpha
UNARY_EXPR	510:12	510:13	6	! no_alpha
UNARY_OPERATOR	510:12	510:12	7	!
LEAF_NODE	510:12	510:12	8	!
FIELD	510:13	510:13	7	no_alpha
LEAF_NODE	510:13	510:13	8	no_alpha
LEAF_NODE	510:22	510:22	4	)
STATEMENTS	511:8	514:8	4	
LEAF_NODE	511:8	511:8	5	{
STATEMENTS	512:12	513:12	5	
EXPR_STATEMENT	512:12	512:41	6	v [ 0 ] = EXTRASAMPLE_ASSOCALPHA ;
EXPR	512:12	512:12	7	v [ 0 ] = EXTRASAMPLE_ASSOCALPHA
ASSIGN	512:12	512:19	8	v [ 0 ] = EXTRASAMPLE_ASSOCALPHA
LVAL	512:12	512:12	9	v [ 0 ]
FIELD	512:12	512:15	10	v [ 0 ]
LEAF_NODE	512:12	512:12	11	v
LEAF_NODE	512:13	512:13	11	[
EXPR	512:14	512:14	11	0
FIELD	512:14	512:14	12	0
LEAF_NODE	512:14	512:14	13	0
LEAF_NODE	512:15	512:15	11	]
ASSIGN_OP	512:17	512:17	9	=
LEAF_NODE	512:17	512:17	10	=
RVAL	512:19	512:19	9	EXTRASAMPLE_ASSOCALPHA
FIELD	512:19	512:19	10	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	512:19	512:19	11	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	512:41	512:41	7	;
EXPR_STATEMENT	513:12	513:57	6	TIFFSetField ( out , TIFFTAG_EXTRASAMPLES , 1 , v ) ;
EXPR	513:12	513:12	7	TIFFSetField ( out , TIFFTAG_EXTRASAMPLES , 1 , v )
FUNCTION_CALL	513:12	513:56	8	TIFFSetField ( out , TIFFTAG_EXTRASAMPLES , 1 , v )
CALLEE	513:12	513:12	9	TIFFSetField
LEAF_NODE	513:12	513:12	10	TIFFSetField
LEAF_NODE	513:24	513:24	9	(
ARGUMENT	513:25	513:25	9	out
FIELD	513:25	513:25	10	out
LEAF_NODE	513:25	513:25	11	out
LEAF_NODE	513:28	513:28	9	,
ARGUMENT	513:30	513:30	9	TIFFTAG_EXTRASAMPLES
FIELD	513:30	513:30	10	TIFFTAG_EXTRASAMPLES
LEAF_NODE	513:30	513:30	11	TIFFTAG_EXTRASAMPLES
LEAF_NODE	513:50	513:50	9	,
ARGUMENT	513:52	513:52	9	1
FIELD	513:52	513:52	10	1
LEAF_NODE	513:52	513:52	11	1
LEAF_NODE	513:53	513:53	9	,
ARGUMENT	513:55	513:55	9	v
FIELD	513:55	513:55	10	v
LEAF_NODE	513:55	513:55	11	v
LEAF_NODE	513:56	513:56	9	)
LEAF_NODE	513:57	513:57	7	;
LEAF_NODE	514:8	514:8	5	}
EXPR_STATEMENT	516:1	516:39	3	CopyField ( TIFFTAG_XRESOLUTION , floatv ) ;
EXPR	516:1	516:1	4	CopyField ( TIFFTAG_XRESOLUTION , floatv )
FUNCTION_CALL	516:1	516:38	5	CopyField ( TIFFTAG_XRESOLUTION , floatv )
CALLEE	516:1	516:1	6	CopyField
LEAF_NODE	516:1	516:1	7	CopyField
LEAF_NODE	516:10	516:10	6	(
ARGUMENT	516:11	516:11	6	TIFFTAG_XRESOLUTION
FIELD	516:11	516:11	7	TIFFTAG_XRESOLUTION
LEAF_NODE	516:11	516:11	8	TIFFTAG_XRESOLUTION
LEAF_NODE	516:30	516:30	6	,
ARGUMENT	516:32	516:32	6	floatv
FIELD	516:32	516:32	7	floatv
LEAF_NODE	516:32	516:32	8	floatv
LEAF_NODE	516:38	516:38	6	)
LEAF_NODE	516:39	516:39	4	;
EXPR_STATEMENT	517:1	517:39	3	CopyField ( TIFFTAG_YRESOLUTION , floatv ) ;
EXPR	517:1	517:1	4	CopyField ( TIFFTAG_YRESOLUTION , floatv )
FUNCTION_CALL	517:1	517:38	5	CopyField ( TIFFTAG_YRESOLUTION , floatv )
CALLEE	517:1	517:1	6	CopyField
LEAF_NODE	517:1	517:1	7	CopyField
LEAF_NODE	517:10	517:10	6	(
ARGUMENT	517:11	517:11	6	TIFFTAG_YRESOLUTION
FIELD	517:11	517:11	7	TIFFTAG_YRESOLUTION
LEAF_NODE	517:11	517:11	8	TIFFTAG_YRESOLUTION
LEAF_NODE	517:30	517:30	6	,
ARGUMENT	517:32	517:32	6	floatv
FIELD	517:32	517:32	7	floatv
LEAF_NODE	517:32	517:32	8	floatv
LEAF_NODE	517:38	517:38	6	)
LEAF_NODE	517:39	517:39	4	;
EXPR_STATEMENT	518:1	518:42	3	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv ) ;
EXPR	518:1	518:1	4	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv )
FUNCTION_CALL	518:1	518:41	5	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv )
CALLEE	518:1	518:1	6	CopyField
LEAF_NODE	518:1	518:1	7	CopyField
LEAF_NODE	518:10	518:10	6	(
ARGUMENT	518:11	518:11	6	TIFFTAG_RESOLUTIONUNIT
FIELD	518:11	518:11	7	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	518:11	518:11	8	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	518:33	518:33	6	,
ARGUMENT	518:35	518:35	6	shortv
FIELD	518:35	518:35	7	shortv
LEAF_NODE	518:35	518:35	8	shortv
LEAF_NODE	518:41	518:41	6	)
LEAF_NODE	518:42	518:42	4	;
EXPR_STATEMENT	519:1	519:61	3	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	519:1	519:1	4	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	519:1	519:60	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	519:1	519:1	6	TIFFSetField
LEAF_NODE	519:1	519:1	7	TIFFSetField
LEAF_NODE	519:13	519:13	6	(
ARGUMENT	519:14	519:14	6	out
FIELD	519:14	519:14	7	out
LEAF_NODE	519:14	519:14	8	out
LEAF_NODE	519:17	519:17	6	,
ARGUMENT	519:19	519:19	6	TIFFTAG_PLANARCONFIG
FIELD	519:19	519:19	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	519:19	519:19	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	519:39	519:39	6	,
ARGUMENT	519:41	519:41	6	PLANARCONFIG_CONTIG
FIELD	519:41	519:41	7	PLANARCONFIG_CONTIG
LEAF_NODE	519:41	519:41	8	PLANARCONFIG_CONTIG
LEAF_NODE	519:60	519:60	6	)
LEAF_NODE	519:61	519:61	4	;
EXPR_STATEMENT	520:1	520:54	3	TIFFSetField ( out , TIFFTAG_SOFTWARE , TIFFGetVersion ( ) ) ;
EXPR	520:1	520:1	4	TIFFSetField ( out , TIFFTAG_SOFTWARE , TIFFGetVersion ( ) )
FUNCTION_CALL	520:1	520:53	5	TIFFSetField ( out , TIFFTAG_SOFTWARE , TIFFGetVersion ( ) )
CALLEE	520:1	520:1	6	TIFFSetField
LEAF_NODE	520:1	520:1	7	TIFFSetField
LEAF_NODE	520:13	520:13	6	(
ARGUMENT	520:14	520:14	6	out
FIELD	520:14	520:14	7	out
LEAF_NODE	520:14	520:14	8	out
LEAF_NODE	520:17	520:17	6	,
ARGUMENT	520:19	520:19	6	TIFFTAG_SOFTWARE
FIELD	520:19	520:19	7	TIFFTAG_SOFTWARE
LEAF_NODE	520:19	520:19	8	TIFFTAG_SOFTWARE
LEAF_NODE	520:35	520:35	6	,
ARGUMENT	520:37	520:37	6	TIFFGetVersion ( )
FUNCTION_CALL	520:37	520:52	7	TIFFGetVersion ( )
CALLEE	520:37	520:37	8	TIFFGetVersion
LEAF_NODE	520:37	520:37	9	TIFFGetVersion
LEAF_NODE	520:51	520:51	8	(
LEAF_NODE	520:52	520:52	8	)
LEAF_NODE	520:53	520:53	6	)
LEAF_NODE	520:54	520:54	4	;
EXPR_STATEMENT	521:1	521:41	3	CopyField ( TIFFTAG_DOCUMENTNAME , stringv ) ;
EXPR	521:1	521:1	4	CopyField ( TIFFTAG_DOCUMENTNAME , stringv )
FUNCTION_CALL	521:1	521:40	5	CopyField ( TIFFTAG_DOCUMENTNAME , stringv )
CALLEE	521:1	521:1	6	CopyField
LEAF_NODE	521:1	521:1	7	CopyField
LEAF_NODE	521:10	521:10	6	(
ARGUMENT	521:11	521:11	6	TIFFTAG_DOCUMENTNAME
FIELD	521:11	521:11	7	TIFFTAG_DOCUMENTNAME
LEAF_NODE	521:11	521:11	8	TIFFTAG_DOCUMENTNAME
LEAF_NODE	521:31	521:31	6	,
ARGUMENT	521:33	521:33	6	stringv
FIELD	521:33	521:33	7	stringv
LEAF_NODE	521:33	521:33	8	stringv
LEAF_NODE	521:40	521:40	6	)
LEAF_NODE	521:41	521:41	4	;
SELECTION	523:8	524:12	3	
KEYWORD	523:8	523:8	4	if
LEAF_NODE	523:8	523:8	5	if
LEAF_NODE	523:10	523:10	4	(
CONDITION	523:12	523:12	4	process_by_block && TIFFIsTiled ( in )
EXPR	523:12	523:12	5	process_by_block && TIFFIsTiled ( in )
AND	523:12	523:32	6	process_by_block && TIFFIsTiled ( in )
EXPR	523:12	523:12	7	process_by_block
FIELD	523:12	523:12	8	process_by_block
LEAF_NODE	523:12	523:12	9	process_by_block
LEAF_NODE	523:29	523:29	7	&&
EXPR	523:32	523:32	7	TIFFIsTiled ( in )
FUNCTION_CALL	523:32	523:48	8	TIFFIsTiled ( in )
CALLEE	523:32	523:32	9	TIFFIsTiled
LEAF_NODE	523:32	523:32	10	TIFFIsTiled
LEAF_NODE	523:43	523:43	9	(
ARGUMENT	523:45	523:45	9	in
FIELD	523:45	523:45	10	in
LEAF_NODE	523:45	523:45	11	in
LEAF_NODE	523:48	523:48	9	)
LEAF_NODE	523:50	523:50	4	)
STATEMENTS	524:12	524:12	4	
JUMP_STATEMENT	524:12	524:44	5	return ( cvt_by_tile ( in , out ) ) ;
KEYWORD	524:12	524:12	6	return
LEAF_NODE	524:12	524:12	7	return
DESTINATION	524:18	524:18	6	( cvt_by_tile ( in , out ) )
EXPR	524:18	524:43	7	( cvt_by_tile ( in , out ) )
LEAF_NODE	524:18	524:18	8	(
FUNCTION_CALL	524:20	524:41	8	cvt_by_tile ( in , out )
CALLEE	524:20	524:20	9	cvt_by_tile
LEAF_NODE	524:20	524:20	10	cvt_by_tile
LEAF_NODE	524:31	524:31	9	(
ARGUMENT	524:33	524:33	9	in
FIELD	524:33	524:33	10	in
LEAF_NODE	524:33	524:33	11	in
LEAF_NODE	524:35	524:35	9	,
ARGUMENT	524:37	524:37	9	out
FIELD	524:37	524:37	10	out
LEAF_NODE	524:37	524:37	11	out
LEAF_NODE	524:41	524:41	9	)
LEAF_NODE	524:43	524:43	8	)
LEAF_NODE	524:44	524:44	6	;
SELECTION	525:8	525:13	3	
KEYWORD	525:8	525:8	4	else
LEAF_NODE	525:8	525:8	5	else
STATEMENTS	525:13	525:13	4	
SELECTION	525:13	526:12	5	
KEYWORD	525:13	525:13	6	if
LEAF_NODE	525:13	525:13	7	if
LEAF_NODE	525:15	525:15	6	(
CONDITION	525:17	525:17	6	process_by_block
EXPR	525:17	525:17	7	process_by_block
FIELD	525:17	525:17	8	process_by_block
LEAF_NODE	525:17	525:17	9	process_by_block
LEAF_NODE	525:34	525:34	6	)
STATEMENTS	526:12	526:12	6	
JUMP_STATEMENT	526:12	526:45	7	return ( cvt_by_strip ( in , out ) ) ;
KEYWORD	526:12	526:12	8	return
LEAF_NODE	526:12	526:12	9	return
DESTINATION	526:18	526:18	8	( cvt_by_strip ( in , out ) )
EXPR	526:18	526:44	9	( cvt_by_strip ( in , out ) )
LEAF_NODE	526:18	526:18	10	(
FUNCTION_CALL	526:20	526:42	10	cvt_by_strip ( in , out )
CALLEE	526:20	526:20	11	cvt_by_strip
LEAF_NODE	526:20	526:20	12	cvt_by_strip
LEAF_NODE	526:32	526:32	11	(
ARGUMENT	526:34	526:34	11	in
FIELD	526:34	526:34	12	in
LEAF_NODE	526:34	526:34	13	in
LEAF_NODE	526:36	526:36	11	,
ARGUMENT	526:38	526:38	11	out
FIELD	526:38	526:38	12	out
LEAF_NODE	526:38	526:38	13	out
LEAF_NODE	526:42	526:42	11	)
LEAF_NODE	526:44	526:44	10	)
LEAF_NODE	526:45	526:45	8	;
SELECTION	527:8	528:12	3	
KEYWORD	527:8	527:8	4	else
LEAF_NODE	527:8	527:8	5	else
STATEMENTS	528:12	528:12	4	
JUMP_STATEMENT	528:12	528:48	5	return ( cvt_whole_image ( in , out ) ) ;
KEYWORD	528:12	528:12	6	return
LEAF_NODE	528:12	528:12	7	return
DESTINATION	528:18	528:18	6	( cvt_whole_image ( in , out ) )
EXPR	528:18	528:47	7	( cvt_whole_image ( in , out ) )
LEAF_NODE	528:18	528:18	8	(
FUNCTION_CALL	528:20	528:45	8	cvt_whole_image ( in , out )
CALLEE	528:20	528:20	9	cvt_whole_image
LEAF_NODE	528:20	528:20	10	cvt_whole_image
LEAF_NODE	528:35	528:35	9	(
ARGUMENT	528:37	528:37	9	in
FIELD	528:37	528:37	10	in
LEAF_NODE	528:37	528:37	11	in
LEAF_NODE	528:39	528:39	9	,
ARGUMENT	528:41	528:41	9	out
FIELD	528:41	528:41	10	out
LEAF_NODE	528:41	528:41	11	out
LEAF_NODE	528:45	528:45	9	)
LEAF_NODE	528:47	528:47	8	)
LEAF_NODE	528:48	528:48	6	;
LEAF_NODE	529:0	529:0	2	}
FUNCTION_DEF	547:0	558:0	1	
RETURN_TYPE	547:0	547:7	2	static void
LEAF_NODE	547:0	547:0	3	static
TYPE_NAME	547:7	547:7	3	void
LEAF_NODE	547:7	547:7	4	void
FUNCTION_NAME	548:0	548:0	2	usage
LEAF_NODE	548:0	548:0	3	usage
PARAMETER_LIST	548:5	548:14	2	( int code )
LEAF_NODE	548:5	548:5	3	(
PARAMETER_DECL	548:6	548:10	3	int code
TYPE	548:6	548:6	4	int
TYPE_NAME	548:6	548:6	5	int
LEAF_NODE	548:6	548:6	6	int
NAME	548:10	548:10	4	code
LEAF_NODE	548:10	548:10	5	code
LEAF_NODE	548:14	548:14	3	)
LEAF_NODE	549:0	549:0	2	{
STATEMENTS	550:1	557:1	2	
SIMPLE_DECL	550:1	550:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	550:1	550:6	4	char [ BUFSIZ ] buf
TYPE	550:1	550:9	5	char [ BUFSIZ ]
TYPE_NAME	550:1	550:1	6	char
LEAF_NODE	550:1	550:1	7	char
TYPE_SUFFIX	550:9	550:16	6	[ BUFSIZ ]
LEAF_NODE	550:9	550:9	7	[
FIELD	550:10	550:10	7	BUFSIZ
LEAF_NODE	550:10	550:10	8	BUFSIZ
LEAF_NODE	550:16	550:16	7	]
NAME	550:6	550:6	5	buf
LEAF_NODE	550:6	550:6	6	buf
LEAF_NODE	550:17	550:17	4	;
SIMPLE_DECL	551:1	551:6	3	int i ;
VAR_DECL	551:1	551:5	4	int i
TYPE	551:1	551:1	5	int
TYPE_NAME	551:1	551:1	6	int
LEAF_NODE	551:1	551:1	7	int
NAME	551:5	551:5	5	i
LEAF_NODE	551:5	551:5	6	i
LEAF_NODE	551:6	551:6	4	;
EXPR_STATEMENT	553:1	553:20	3	setbuf ( stderr , buf ) ;
EXPR	553:1	553:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	553:1	553:19	5	setbuf ( stderr , buf )
CALLEE	553:1	553:1	6	setbuf
LEAF_NODE	553:1	553:1	7	setbuf
LEAF_NODE	553:7	553:7	6	(
ARGUMENT	553:8	553:8	6	stderr
FIELD	553:8	553:8	7	stderr
LEAF_NODE	553:8	553:8	8	stderr
LEAF_NODE	553:14	553:14	6	,
ARGUMENT	553:16	553:16	6	buf
FIELD	553:16	553:16	7	buf
LEAF_NODE	553:16	553:16	8	buf
LEAF_NODE	553:19	553:19	6	)
LEAF_NODE	553:20	553:20	4	;
EXPR_STATEMENT	554:8	554:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	554:8	554:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	554:8	554:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	554:8	554:8	6	fprintf
LEAF_NODE	554:8	554:8	7	fprintf
LEAF_NODE	554:15	554:15	6	(
ARGUMENT	554:16	554:16	6	stderr
FIELD	554:16	554:16	7	stderr
LEAF_NODE	554:16	554:16	8	stderr
LEAF_NODE	554:22	554:22	6	,
ARGUMENT	554:24	554:24	6	"%s\n\n"
FIELD	554:24	554:24	7	"%s\n\n"
LEAF_NODE	554:24	554:24	8	"%s\n\n"
LEAF_NODE	554:32	554:32	6	,
ARGUMENT	554:34	554:34	6	TIFFGetVersion ( )
FUNCTION_CALL	554:34	554:49	7	TIFFGetVersion ( )
CALLEE	554:34	554:34	8	TIFFGetVersion
LEAF_NODE	554:34	554:34	9	TIFFGetVersion
LEAF_NODE	554:48	554:48	8	(
LEAF_NODE	554:49	554:49	8	)
LEAF_NODE	554:50	554:50	6	)
LEAF_NODE	554:51	554:51	4	;
ITERATION	555:1	556:2	3	
KEYWORD	555:1	555:1	4	for
LEAF_NODE	555:1	555:1	5	for
LEAF_NODE	555:5	555:5	4	(
FOR_INIT	555:6	555:11	4	i = 0 ;
EXPR	555:6	555:6	5	i = 0
ASSIGN	555:6	555:10	6	i = 0
LVAL	555:6	555:6	7	i
FIELD	555:6	555:6	8	i
LEAF_NODE	555:6	555:6	9	i
ASSIGN_OP	555:8	555:8	7	=
LEAF_NODE	555:8	555:8	8	=
RVAL	555:10	555:10	7	0
FIELD	555:10	555:10	8	0
LEAF_NODE	555:10	555:10	9	0
LEAF_NODE	555:11	555:11	5	;
CONDITION	555:13	555:13	4	stuff [ i ] != NULL
EXPR	555:13	555:25	5	stuff [ i ] != NULL
FIELD	555:13	555:20	6	stuff [ i ]
LEAF_NODE	555:13	555:13	7	stuff
LEAF_NODE	555:18	555:18	7	[
EXPR	555:19	555:19	7	i
FIELD	555:19	555:19	8	i
LEAF_NODE	555:19	555:19	9	i
LEAF_NODE	555:20	555:20	7	]
EQ_OPERATOR	555:22	555:22	6	!=
LEAF_NODE	555:22	555:22	7	!=
FIELD	555:25	555:25	6	NULL
LEAF_NODE	555:25	555:25	7	NULL
LEAF_NODE	555:29	555:29	4	;
FOR_EXPR	555:31	555:31	4	i ++
EXPR	555:31	555:31	5	i ++
FIELD	555:31	555:32	6	i ++
LEAF_NODE	555:31	555:31	7	i
LEAF_NODE	555:32	555:32	7	++
LEAF_NODE	555:34	555:34	4	)
STATEMENTS	556:2	556:2	4	
EXPR_STATEMENT	556:2	556:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	556:2	556:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	556:2	556:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	556:2	556:2	8	fprintf
LEAF_NODE	556:2	556:2	9	fprintf
LEAF_NODE	556:9	556:9	8	(
ARGUMENT	556:10	556:10	8	stderr
FIELD	556:10	556:10	9	stderr
LEAF_NODE	556:10	556:10	10	stderr
LEAF_NODE	556:16	556:16	8	,
ARGUMENT	556:18	556:18	8	"%s\n"
FIELD	556:18	556:18	9	"%s\n"
LEAF_NODE	556:18	556:18	10	"%s\n"
LEAF_NODE	556:24	556:24	8	,
ARGUMENT	556:26	556:26	8	stuff [ i ]
FIELD	556:26	556:33	9	stuff [ i ]
LEAF_NODE	556:26	556:26	10	stuff
LEAF_NODE	556:31	556:31	10	[
EXPR	556:32	556:32	10	i
FIELD	556:32	556:32	11	i
LEAF_NODE	556:32	556:32	12	i
LEAF_NODE	556:33	556:33	10	]
LEAF_NODE	556:34	556:34	8	)
LEAF_NODE	556:35	556:35	6	;
EXPR_STATEMENT	557:1	557:11	3	exit ( code ) ;
EXPR	557:1	557:1	4	exit ( code )
FUNCTION_CALL	557:1	557:10	5	exit ( code )
CALLEE	557:1	557:1	6	exit
LEAF_NODE	557:1	557:1	7	exit
LEAF_NODE	557:5	557:5	6	(
ARGUMENT	557:6	557:6	6	code
FIELD	557:6	557:6	7	code
LEAF_NODE	557:6	557:6	8	code
LEAF_NODE	557:10	557:10	6	)
LEAF_NODE	557:11	557:11	4	;
LEAF_NODE	558:0	558:0	2	}
