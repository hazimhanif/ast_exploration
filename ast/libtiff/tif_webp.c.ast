SOURCE_FILE	45:8	625:0	0	
SIMPLE_DECL	45:8	64:11	1	struct CLASS_NAME BASE_CLASSES { uint16 nSamples ; int lossless ; int quality_level ; WebPPicture sPicture ; WebPConfig sEncoderConfig ; uint8 * pBuffer ; unsigned int buffer_offset ; unsigned int buffer_size ; WebPIDecoder * psDecoder ; WebPDecBuffer sDecBuffer ; int last_y ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; } WebPState ;
VAR_DECL	45:8	64:2	2	struct CLASS_NAME BASE_CLASSES { uint16 nSamples ; int lossless ; int quality_level ; WebPPicture sPicture ; WebPConfig sEncoderConfig ; uint8 * pBuffer ; unsigned int buffer_offset ; unsigned int buffer_size ; WebPIDecoder * psDecoder ; WebPDecBuffer sDecBuffer ; int last_y ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; } WebPState
TYPE	45:8	45:8	3	struct CLASS_NAME BASE_CLASSES { uint16 nSamples ; int lossless ; int quality_level ; WebPPicture sPicture ; WebPConfig sEncoderConfig ; uint8 * pBuffer ; unsigned int buffer_offset ; unsigned int buffer_size ; WebPIDecoder * psDecoder ; WebPDecBuffer sDecBuffer ; int last_y ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; }
CLASS_DEF	45:8	64:0	4	struct CLASS_NAME BASE_CLASSES { uint16 nSamples ; int lossless ; int quality_level ; WebPPicture sPicture ; WebPConfig sEncoderConfig ; uint8 * pBuffer ; unsigned int buffer_offset ; unsigned int buffer_size ; WebPIDecoder * psDecoder ; WebPDecBuffer sDecBuffer ; int last_y ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; }
LEAF_NODE	45:8	45:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	45:15	45:15	5	{
CLASS_CONTENT	46:2	63:1	5	uint16 nSamples ; int lossless ; int quality_level ; WebPPicture sPicture ; WebPConfig sEncoderConfig ; uint8 * pBuffer ; unsigned int buffer_offset ; unsigned int buffer_size ; WebPIDecoder * psDecoder ; WebPDecBuffer sDecBuffer ; int last_y ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ;
SIMPLE_DECL	46:2	46:27	6	uint16 nSamples ;
VAR_DECL	46:2	46:19	7	uint16 nSamples
TYPE	46:2	46:2	8	uint16
TYPE_NAME	46:2	46:2	9	uint16
LEAF_NODE	46:2	46:2	10	uint16
NAME	46:19	46:19	8	nSamples
LEAF_NODE	46:19	46:19	9	nSamples
LEAF_NODE	46:27	46:27	7	;
SIMPLE_DECL	48:2	48:27	6	int lossless ;
VAR_DECL	48:2	48:19	7	int lossless
TYPE	48:2	48:2	8	int
TYPE_NAME	48:2	48:2	9	int
LEAF_NODE	48:2	48:2	10	int
NAME	48:19	48:19	8	lossless
LEAF_NODE	48:19	48:19	9	lossless
LEAF_NODE	48:27	48:27	7	;
SIMPLE_DECL	49:2	49:32	6	int quality_level ;
VAR_DECL	49:2	49:19	7	int quality_level
TYPE	49:2	49:2	8	int
TYPE_NAME	49:2	49:2	9	int
LEAF_NODE	49:2	49:2	10	int
NAME	49:19	49:19	8	quality_level
LEAF_NODE	49:19	49:19	9	quality_level
LEAF_NODE	49:32	49:32	7	;
SIMPLE_DECL	50:2	50:27	6	WebPPicture sPicture ;
VAR_DECL	50:2	50:19	7	WebPPicture sPicture
TYPE	50:2	50:2	8	WebPPicture
TYPE_NAME	50:2	50:2	9	WebPPicture
LEAF_NODE	50:2	50:2	10	WebPPicture
NAME	50:19	50:19	8	sPicture
LEAF_NODE	50:19	50:19	9	sPicture
LEAF_NODE	50:27	50:27	7	;
SIMPLE_DECL	51:2	51:33	6	WebPConfig sEncoderConfig ;
VAR_DECL	51:2	51:19	7	WebPConfig sEncoderConfig
TYPE	51:2	51:2	8	WebPConfig
TYPE_NAME	51:2	51:2	9	WebPConfig
LEAF_NODE	51:2	51:2	10	WebPConfig
NAME	51:19	51:19	8	sEncoderConfig
LEAF_NODE	51:19	51:19	9	sEncoderConfig
LEAF_NODE	51:33	51:33	7	;
SIMPLE_DECL	52:2	52:26	6	uint8 * pBuffer ;
VAR_DECL	52:2	52:19	7	uint8 * pBuffer
TYPE	52:2	52:7	8	uint8 *
TYPE_NAME	52:2	52:2	9	uint8
LEAF_NODE	52:2	52:2	10	uint8
POINTER	52:7	52:7	9	*
LEAF_NODE	52:7	52:7	10	*
NAME	52:19	52:19	8	pBuffer
LEAF_NODE	52:19	52:19	9	pBuffer
LEAF_NODE	52:26	52:26	7	;
SIMPLE_DECL	53:2	53:32	6	unsigned int buffer_offset ;
VAR_DECL	53:2	53:19	7	unsigned int buffer_offset
TYPE	53:2	53:2	8	unsigned int
TYPE_NAME	53:2	53:11	9	unsigned int
LEAF_NODE	53:2	53:2	10	unsigned
LEAF_NODE	53:11	53:11	10	int
NAME	53:19	53:19	8	buffer_offset
LEAF_NODE	53:19	53:19	9	buffer_offset
LEAF_NODE	53:32	53:32	7	;
SIMPLE_DECL	54:2	54:30	6	unsigned int buffer_size ;
VAR_DECL	54:2	54:19	7	unsigned int buffer_size
TYPE	54:2	54:2	8	unsigned int
TYPE_NAME	54:2	54:11	9	unsigned int
LEAF_NODE	54:2	54:2	10	unsigned
LEAF_NODE	54:11	54:11	10	int
NAME	54:19	54:19	8	buffer_size
LEAF_NODE	54:19	54:19	9	buffer_size
LEAF_NODE	54:30	54:30	7	;
SIMPLE_DECL	56:2	56:28	6	WebPIDecoder * psDecoder ;
VAR_DECL	56:2	56:19	7	WebPIDecoder * psDecoder
TYPE	56:2	56:14	8	WebPIDecoder *
TYPE_NAME	56:2	56:2	9	WebPIDecoder
LEAF_NODE	56:2	56:2	10	WebPIDecoder
POINTER	56:14	56:14	9	*
LEAF_NODE	56:14	56:14	10	*
NAME	56:19	56:19	8	psDecoder
LEAF_NODE	56:19	56:19	9	psDecoder
LEAF_NODE	56:28	56:28	7	;
SIMPLE_DECL	57:2	57:29	6	WebPDecBuffer sDecBuffer ;
VAR_DECL	57:2	57:19	7	WebPDecBuffer sDecBuffer
TYPE	57:2	57:2	8	WebPDecBuffer
TYPE_NAME	57:2	57:2	9	WebPDecBuffer
LEAF_NODE	57:2	57:2	10	WebPDecBuffer
NAME	57:19	57:19	8	sDecBuffer
LEAF_NODE	57:19	57:19	9	sDecBuffer
LEAF_NODE	57:29	57:29	7	;
SIMPLE_DECL	58:2	58:25	6	int last_y ;
VAR_DECL	58:2	58:19	7	int last_y
TYPE	58:2	58:2	8	int
TYPE_NAME	58:2	58:2	9	int
LEAF_NODE	58:2	58:2	10	int
NAME	58:19	58:19	8	last_y
LEAF_NODE	58:19	58:19	9	last_y
LEAF_NODE	58:25	58:25	7	;
SIMPLE_DECL	60:2	60:24	6	int state ;
VAR_DECL	60:2	60:19	7	int state
TYPE	60:2	60:2	8	int
TYPE_NAME	60:2	60:2	9	int
LEAF_NODE	60:2	60:2	10	int
NAME	60:19	60:19	8	state
LEAF_NODE	60:19	60:19	9	state
LEAF_NODE	60:24	60:24	7	;
SIMPLE_DECL	62:1	62:28	6	TIFFVGetMethod vgetparent ;
VAR_DECL	62:1	62:18	7	TIFFVGetMethod vgetparent
TYPE	62:1	62:1	8	TIFFVGetMethod
TYPE_NAME	62:1	62:1	9	TIFFVGetMethod
LEAF_NODE	62:1	62:1	10	TIFFVGetMethod
NAME	62:18	62:18	8	vgetparent
LEAF_NODE	62:18	62:18	9	vgetparent
LEAF_NODE	62:28	62:28	7	;
SIMPLE_DECL	63:1	63:28	6	TIFFVSetMethod vsetparent ;
VAR_DECL	63:1	63:18	7	TIFFVSetMethod vsetparent
TYPE	63:1	63:1	8	TIFFVSetMethod
TYPE_NAME	63:1	63:1	9	TIFFVSetMethod
LEAF_NODE	63:1	63:1	10	TIFFVSetMethod
NAME	63:18	63:18	8	vsetparent
LEAF_NODE	63:18	63:18	9	vsetparent
LEAF_NODE	63:28	63:28	7	;
LEAF_NODE	64:0	64:0	5	}
NAME	64:2	64:2	3	WebPState
LEAF_NODE	64:2	64:2	4	WebPState
LEAF_NODE	64:11	64:11	2	;
SIMPLE_DECL	77:9	77:51	1	const char [ ] module ; module = "TWebPDatasetWriter" ;
VAR_DECL	77:9	77:20	2	const char [ ] module ; module = "TWebPDatasetWriter"
TYPE	77:9	77:26	3	const char [ ]
TYPE_NAME	77:9	77:15	4	const char
LEAF_NODE	77:9	77:9	5	const
LEAF_NODE	77:15	77:15	5	char
TYPE_SUFFIX	77:26	77:27	4	[ ]
LEAF_NODE	77:26	77:26	5	[
LEAF_NODE	77:27	77:27	5	]
NAME	77:20	77:20	3	module
LEAF_NODE	77:20	77:20	4	module
LEAF_NODE	0:0	0:0	3	;
INIT	77:20	77:20	3	module = "TWebPDatasetWriter"
ASSIGN	77:20	77:31	4	module = "TWebPDatasetWriter"
LVAL	77:20	77:20	5	module
NAME	77:20	77:20	6	module
LEAF_NODE	77:20	77:20	7	module
ASSIGN_OP	77:29	77:29	5	=
LEAF_NODE	77:29	77:29	6	=
RVAL	77:31	77:31	5	"TWebPDatasetWriter"
FIELD	77:31	77:31	6	"TWebPDatasetWriter"
LEAF_NODE	77:31	77:31	7	"TWebPDatasetWriter"
LEAF_NODE	77:51	77:51	2	;
SIMPLE_DECL	78:2	78:42	1	TIFF * tif ; tif = ( TIFF * ) ( picture -> custom_ptr ) ;
VAR_DECL	78:2	78:8	2	TIFF * tif ; tif = ( TIFF * ) ( picture -> custom_ptr )
TYPE	78:2	78:6	3	TIFF *
TYPE_NAME	78:2	78:2	4	TIFF
LEAF_NODE	78:2	78:2	5	TIFF
POINTER	78:6	78:6	4	*
LEAF_NODE	78:6	78:6	5	*
NAME	78:8	78:8	3	tif
LEAF_NODE	78:8	78:8	4	tif
LEAF_NODE	0:0	0:0	3	;
INIT	78:8	78:8	3	tif = ( TIFF * ) ( picture -> custom_ptr )
ASSIGN	78:8	78:14	4	tif = ( TIFF * ) ( picture -> custom_ptr )
LVAL	78:8	78:8	5	tif
NAME	78:8	78:8	6	tif
LEAF_NODE	78:8	78:8	7	tif
ASSIGN_OP	78:12	78:12	5	=
LEAF_NODE	78:12	78:12	6	=
RVAL	78:14	78:41	5	( TIFF * ) ( picture -> custom_ptr )
LEAF_NODE	78:14	78:14	6	(
TYPE_NAME	78:15	78:15	6	TIFF
LEAF_NODE	78:15	78:15	7	TIFF
LEAF_NODE	78:19	78:19	6	*
LEAF_NODE	78:20	78:20	6	)
LEAF_NODE	78:21	78:21	6	(
FIELD	78:22	78:31	6	picture -> custom_ptr
LEAF_NODE	78:22	78:22	7	picture
LEAF_NODE	78:29	78:29	7	->
LEAF_NODE	78:31	78:31	7	custom_ptr
LEAF_NODE	78:41	78:41	6	)
LEAF_NODE	78:42	78:42	2	;
FUNCTION_DEF	96:0	120:0	1	
RETURN_TYPE	96:0	96:7	2	static int
LEAF_NODE	96:0	96:0	3	static
TYPE_NAME	96:7	96:7	3	int
LEAF_NODE	96:7	96:7	4	int
FUNCTION_NAME	97:0	97:0	2	TWebPEncode
LEAF_NODE	97:0	97:0	3	TWebPEncode
PARAMETER_LIST	97:11	97:55	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	97:11	97:11	3	(
PARAMETER_DECL	97:12	97:18	3	TIFF * tif
TYPE	97:12	97:16	4	TIFF *
TYPE_NAME	97:12	97:12	5	TIFF
LEAF_NODE	97:12	97:12	6	TIFF
POINTER	97:16	97:16	5	*
LEAF_NODE	97:16	97:16	6	*
NAME	97:18	97:18	4	tif
LEAF_NODE	97:18	97:18	5	tif
LEAF_NODE	97:21	97:21	3	,
PARAMETER_DECL	97:23	97:30	3	uint8 * bp
TYPE	97:23	97:28	4	uint8 *
TYPE_NAME	97:23	97:23	5	uint8
LEAF_NODE	97:23	97:23	6	uint8
POINTER	97:28	97:28	5	*
LEAF_NODE	97:28	97:28	6	*
NAME	97:30	97:30	4	bp
LEAF_NODE	97:30	97:30	5	bp
LEAF_NODE	97:32	97:32	3	,
PARAMETER_DECL	97:34	97:43	3	tmsize_t cc
TYPE	97:34	97:34	4	tmsize_t
TYPE_NAME	97:34	97:34	5	tmsize_t
LEAF_NODE	97:34	97:34	6	tmsize_t
NAME	97:43	97:43	4	cc
LEAF_NODE	97:43	97:43	5	cc
LEAF_NODE	97:45	97:45	3	,
PARAMETER_DECL	97:47	97:54	3	uint16 s
TYPE	97:47	97:47	4	uint16
TYPE_NAME	97:47	97:47	5	uint16
LEAF_NODE	97:47	97:47	6	uint16
NAME	97:54	97:54	4	s
LEAF_NODE	97:54	97:54	5	s
LEAF_NODE	97:55	97:55	3	)
LEAF_NODE	98:0	98:0	2	{
STATEMENTS	99:2	118:2	2	
LEAF_NODE	99:2	99:2	3	static
SIMPLE_DECL	99:9	99:44	3	const char [ ] module ; module = "TWebPEncode" ;
VAR_DECL	99:9	99:20	4	const char [ ] module ; module = "TWebPEncode"
TYPE	99:9	99:26	5	const char [ ]
TYPE_NAME	99:9	99:15	6	const char
LEAF_NODE	99:9	99:9	7	const
LEAF_NODE	99:15	99:15	7	char
TYPE_SUFFIX	99:26	99:27	6	[ ]
LEAF_NODE	99:26	99:26	7	[
LEAF_NODE	99:27	99:27	7	]
NAME	99:20	99:20	5	module
LEAF_NODE	99:20	99:20	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	99:20	99:20	5	module = "TWebPEncode"
ASSIGN	99:20	99:31	6	module = "TWebPEncode"
LVAL	99:20	99:20	7	module
NAME	99:20	99:20	8	module
LEAF_NODE	99:20	99:20	9	module
ASSIGN_OP	99:29	99:29	7	=
LEAF_NODE	99:29	99:29	8	=
RVAL	99:31	99:31	7	"TWebPEncode"
FIELD	99:31	99:31	8	"TWebPEncode"
LEAF_NODE	99:31	99:31	9	"TWebPEncode"
LEAF_NODE	99:44	99:44	4	;
SIMPLE_DECL	100:2	100:35	3	WebPState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	100:2	100:13	4	WebPState * sp ; sp = EncoderState ( tif )
TYPE	100:2	100:12	5	WebPState *
TYPE_NAME	100:2	100:2	6	WebPState
LEAF_NODE	100:2	100:2	7	WebPState
POINTER	100:12	100:12	6	*
LEAF_NODE	100:12	100:12	7	*
NAME	100:13	100:13	5	sp
LEAF_NODE	100:13	100:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	100:13	100:13	5	sp = EncoderState ( tif )
ASSIGN	100:13	100:18	6	sp = EncoderState ( tif )
LVAL	100:13	100:13	7	sp
NAME	100:13	100:13	8	sp
LEAF_NODE	100:13	100:13	9	sp
ASSIGN_OP	100:16	100:16	7	=
LEAF_NODE	100:16	100:16	8	=
RVAL	100:18	100:18	7	EncoderState ( tif )
FUNCTION_CALL	100:18	100:34	8	EncoderState ( tif )
CALLEE	100:18	100:18	9	EncoderState
LEAF_NODE	100:18	100:18	10	EncoderState
LEAF_NODE	100:30	100:30	9	(
ARGUMENT	100:31	100:31	9	tif
FIELD	100:31	100:31	10	tif
LEAF_NODE	100:31	100:31	11	tif
LEAF_NODE	100:34	100:34	9	)
LEAF_NODE	100:35	100:35	4	;
EXPR_STATEMENT	101:2	101:10	3	( void ) s ;
EXPR	101:2	101:9	4	( void ) s
LEAF_NODE	101:2	101:2	5	(
TYPE_NAME	101:3	101:3	5	void
LEAF_NODE	101:3	101:3	6	void
LEAF_NODE	101:7	101:7	5	)
FIELD	101:9	101:9	5	s
LEAF_NODE	101:9	101:9	6	s
LEAF_NODE	101:10	101:10	4	;
EXPR_STATEMENT	103:2	103:20	3	assert ( sp != NULL ) ;
EXPR	103:2	103:2	4	assert ( sp != NULL )
FUNCTION_CALL	103:2	103:19	5	assert ( sp != NULL )
CALLEE	103:2	103:2	6	assert
LEAF_NODE	103:2	103:2	7	assert
LEAF_NODE	103:8	103:8	6	(
ARGUMENT	103:9	103:15	6	sp != NULL
FIELD	103:9	103:9	7	sp
LEAF_NODE	103:9	103:9	8	sp
EQ_OPERATOR	103:12	103:12	7	!=
LEAF_NODE	103:12	103:12	8	!=
FIELD	103:15	103:15	7	NULL
LEAF_NODE	103:15	103:15	8	NULL
LEAF_NODE	103:19	103:19	6	)
LEAF_NODE	103:20	103:20	4	;
EXPR_STATEMENT	104:2	104:41	3	assert ( sp -> state == LSTATE_INIT_ENCODE ) ;
EXPR	104:2	104:2	4	assert ( sp -> state == LSTATE_INIT_ENCODE )
FUNCTION_CALL	104:2	104:40	5	assert ( sp -> state == LSTATE_INIT_ENCODE )
CALLEE	104:2	104:2	6	assert
LEAF_NODE	104:2	104:2	7	assert
LEAF_NODE	104:8	104:8	6	(
ARGUMENT	104:9	104:22	6	sp -> state == LSTATE_INIT_ENCODE
FIELD	104:9	104:13	7	sp -> state
LEAF_NODE	104:9	104:9	8	sp
LEAF_NODE	104:11	104:11	8	->
LEAF_NODE	104:13	104:13	8	state
EQ_OPERATOR	104:19	104:19	7	==
LEAF_NODE	104:19	104:19	8	==
FIELD	104:22	104:22	7	LSTATE_INIT_ENCODE
LEAF_NODE	104:22	104:22	8	LSTATE_INIT_ENCODE
LEAF_NODE	104:40	104:40	6	)
LEAF_NODE	104:41	104:41	4	;
SELECTION	106:2	108:2	3	
KEYWORD	106:2	106:2	4	if
LEAF_NODE	106:2	106:2	5	if
LEAF_NODE	106:4	106:4	4	(
CONDITION	106:6	106:6	4	( uint64 ) sp -> buffer_offset + ( uint64 ) cc > sp -> buffer_size
EXPR	106:6	107:41	5	( uint64 ) sp -> buffer_offset + ( uint64 ) cc > sp -> buffer_size
LEAF_NODE	106:6	106:6	6	(
TYPE_NAME	106:7	106:7	6	uint64
LEAF_NODE	106:7	106:7	7	uint64
LEAF_NODE	106:13	106:13	6	)
FIELD	106:14	106:18	6	sp -> buffer_offset
LEAF_NODE	106:14	106:14	7	sp
LEAF_NODE	106:16	106:16	7	->
LEAF_NODE	106:18	106:18	7	buffer_offset
LEAF_NODE	106:32	106:32	6	+
LEAF_NODE	107:28	107:28	6	(
TYPE_NAME	107:29	107:29	6	uint64
LEAF_NODE	107:29	107:29	7	uint64
LEAF_NODE	107:35	107:35	6	)
FIELD	107:36	107:36	6	cc
LEAF_NODE	107:36	107:36	7	cc
REL_OPERATOR	107:39	107:39	6	>
LEAF_NODE	107:39	107:39	7	>
FIELD	107:41	107:45	6	sp -> buffer_size
LEAF_NODE	107:41	107:41	7	sp
LEAF_NODE	107:43	107:43	7	->
LEAF_NODE	107:45	107:45	7	buffer_size
LEAF_NODE	107:57	107:57	4	)
STATEMENTS	108:2	112:2	4	
LEAF_NODE	108:2	108:2	5	{
STATEMENTS	109:6	111:6	5	
EXPR_STATEMENT	109:6	110:50	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Too many bytes to be written" ) ;
EXPR	109:6	109:6	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Too many bytes to be written" )
FUNCTION_CALL	109:6	110:49	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Too many bytes to be written" )
CALLEE	109:6	109:6	9	TIFFErrorExt
LEAF_NODE	109:6	109:6	10	TIFFErrorExt
LEAF_NODE	109:18	109:18	9	(
ARGUMENT	109:19	109:19	9	tif -> tif_clientdata
FIELD	109:19	109:24	10	tif -> tif_clientdata
LEAF_NODE	109:19	109:19	11	tif
LEAF_NODE	109:22	109:22	11	->
LEAF_NODE	109:24	109:24	11	tif_clientdata
LEAF_NODE	109:38	109:38	9	,
ARGUMENT	109:40	109:40	9	module
FIELD	109:40	109:40	10	module
LEAF_NODE	109:40	109:40	11	module
LEAF_NODE	109:46	109:46	9	,
ARGUMENT	110:19	110:19	9	"Too many bytes to be written"
FIELD	110:19	110:19	10	"Too many bytes to be written"
LEAF_NODE	110:19	110:19	11	"Too many bytes to be written"
LEAF_NODE	110:49	110:49	9	)
LEAF_NODE	110:50	110:50	7	;
JUMP_STATEMENT	111:6	111:14	6	return 0 ;
KEYWORD	111:6	111:6	7	return
LEAF_NODE	111:6	111:6	8	return
DESTINATION	111:13	111:13	7	0
EXPR	111:13	111:13	8	0
FIELD	111:13	111:13	9	0
LEAF_NODE	111:13	111:13	10	0
LEAF_NODE	111:14	111:14	7	;
LEAF_NODE	112:2	112:2	5	}
EXPR_STATEMENT	114:2	115:16	3	memcpy ( sp -> pBuffer + sp -> buffer_offset , bp , cc ) ;
EXPR	114:2	114:2	4	memcpy ( sp -> pBuffer + sp -> buffer_offset , bp , cc )
FUNCTION_CALL	114:2	115:15	5	memcpy ( sp -> pBuffer + sp -> buffer_offset , bp , cc )
CALLEE	114:2	114:2	6	memcpy
LEAF_NODE	114:2	114:2	7	memcpy
LEAF_NODE	114:8	114:8	6	(
ARGUMENT	114:9	114:23	6	sp -> pBuffer + sp -> buffer_offset
FIELD	114:9	114:13	7	sp -> pBuffer
LEAF_NODE	114:9	114:9	8	sp
LEAF_NODE	114:11	114:11	8	->
LEAF_NODE	114:13	114:13	8	pBuffer
LEAF_NODE	114:21	114:21	7	+
FIELD	114:23	114:27	7	sp -> buffer_offset
LEAF_NODE	114:23	114:23	8	sp
LEAF_NODE	114:25	114:25	8	->
LEAF_NODE	114:27	114:27	8	buffer_offset
LEAF_NODE	114:40	114:40	6	,
ARGUMENT	115:9	115:9	6	bp
FIELD	115:9	115:9	7	bp
LEAF_NODE	115:9	115:9	8	bp
LEAF_NODE	115:11	115:11	6	,
ARGUMENT	115:13	115:13	6	cc
FIELD	115:13	115:13	7	cc
LEAF_NODE	115:13	115:13	8	cc
LEAF_NODE	115:15	115:15	6	)
LEAF_NODE	115:16	115:16	4	;
LEAF_NODE	116:2	116:2	3	sp
LEAF_NODE	116:4	116:4	3	->
LEAF_NODE	116:6	116:6	3	buffer_offset
LEAF_NODE	116:20	116:20	3	+=
LEAF_NODE	116:23	116:23	3	(
LEAF_NODE	116:24	116:24	3	unsigned
LEAF_NODE	116:32	116:32	3	)
EXPR_STATEMENT	116:33	116:35	3	cc ;
EXPR	116:33	116:33	4	cc
FIELD	116:33	116:33	5	cc
LEAF_NODE	116:33	116:33	6	cc
LEAF_NODE	116:35	116:35	4	;
JUMP_STATEMENT	118:2	118:10	3	return 1 ;
KEYWORD	118:2	118:2	4	return
LEAF_NODE	118:2	118:2	5	return
DESTINATION	118:9	118:9	4	1
EXPR	118:9	118:9	5	1
FIELD	118:9	118:9	6	1
LEAF_NODE	118:9	118:9	7	1
LEAF_NODE	118:10	118:10	4	;
LEAF_NODE	120:0	120:0	2	}
FUNCTION_DEF	122:0	176:0	1	
RETURN_TYPE	122:0	122:7	2	static int
LEAF_NODE	122:0	122:0	3	static
TYPE_NAME	122:7	122:7	3	int
LEAF_NODE	122:7	122:7	4	int
FUNCTION_NAME	123:0	123:0	2	TWebPDecode
LEAF_NODE	123:0	123:0	3	TWebPDecode
PARAMETER_LIST	123:11	123:56	2	( TIFF * tif , uint8 * op , tmsize_t occ , uint16 s )
LEAF_NODE	123:11	123:11	3	(
PARAMETER_DECL	123:12	123:18	3	TIFF * tif
TYPE	123:12	123:16	4	TIFF *
TYPE_NAME	123:12	123:12	5	TIFF
LEAF_NODE	123:12	123:12	6	TIFF
POINTER	123:16	123:16	5	*
LEAF_NODE	123:16	123:16	6	*
NAME	123:18	123:18	4	tif
LEAF_NODE	123:18	123:18	5	tif
LEAF_NODE	123:21	123:21	3	,
PARAMETER_DECL	123:23	123:30	3	uint8 * op
TYPE	123:23	123:28	4	uint8 *
TYPE_NAME	123:23	123:23	5	uint8
LEAF_NODE	123:23	123:23	6	uint8
POINTER	123:28	123:28	5	*
LEAF_NODE	123:28	123:28	6	*
NAME	123:30	123:30	4	op
LEAF_NODE	123:30	123:30	5	op
LEAF_NODE	123:32	123:32	3	,
PARAMETER_DECL	123:34	123:43	3	tmsize_t occ
TYPE	123:34	123:34	4	tmsize_t
TYPE_NAME	123:34	123:34	5	tmsize_t
LEAF_NODE	123:34	123:34	6	tmsize_t
NAME	123:43	123:43	4	occ
LEAF_NODE	123:43	123:43	5	occ
LEAF_NODE	123:46	123:46	3	,
PARAMETER_DECL	123:48	123:55	3	uint16 s
TYPE	123:48	123:48	4	uint16
TYPE_NAME	123:48	123:48	5	uint16
LEAF_NODE	123:48	123:48	6	uint16
NAME	123:55	123:55	4	s
LEAF_NODE	123:55	123:55	5	s
LEAF_NODE	123:56	123:56	3	)
LEAF_NODE	124:0	124:0	2	{
STATEMENTS	125:2	154:4	2	
LEAF_NODE	125:2	125:2	3	static
SIMPLE_DECL	125:9	125:43	3	const char [ ] module ; module = "WebPDecode" ;
VAR_DECL	125:9	125:20	4	const char [ ] module ; module = "WebPDecode"
TYPE	125:9	125:26	5	const char [ ]
TYPE_NAME	125:9	125:15	6	const char
LEAF_NODE	125:9	125:9	7	const
LEAF_NODE	125:15	125:15	7	char
TYPE_SUFFIX	125:26	125:27	6	[ ]
LEAF_NODE	125:26	125:26	7	[
LEAF_NODE	125:27	125:27	7	]
NAME	125:20	125:20	5	module
LEAF_NODE	125:20	125:20	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	125:20	125:20	5	module = "WebPDecode"
ASSIGN	125:20	125:31	6	module = "WebPDecode"
LVAL	125:20	125:20	7	module
NAME	125:20	125:20	8	module
LEAF_NODE	125:20	125:20	9	module
ASSIGN_OP	125:29	125:29	7	=
LEAF_NODE	125:29	125:29	8	=
RVAL	125:31	125:31	7	"WebPDecode"
FIELD	125:31	125:31	8	"WebPDecode"
LEAF_NODE	125:31	125:31	9	"WebPDecode"
LEAF_NODE	125:43	125:43	4	;
SIMPLE_DECL	126:2	126:38	3	VP8StatusCode status ; status = VP8_STATUS_OK ;
VAR_DECL	126:2	126:16	4	VP8StatusCode status ; status = VP8_STATUS_OK
TYPE	126:2	126:2	5	VP8StatusCode
TYPE_NAME	126:2	126:2	6	VP8StatusCode
LEAF_NODE	126:2	126:2	7	VP8StatusCode
NAME	126:16	126:16	5	status
LEAF_NODE	126:16	126:16	6	status
LEAF_NODE	0:0	0:0	5	;
INIT	126:16	126:16	5	status = VP8_STATUS_OK
ASSIGN	126:16	126:25	6	status = VP8_STATUS_OK
LVAL	126:16	126:16	7	status
NAME	126:16	126:16	8	status
LEAF_NODE	126:16	126:16	9	status
ASSIGN_OP	126:23	126:23	7	=
LEAF_NODE	126:23	126:23	8	=
RVAL	126:25	126:25	7	VP8_STATUS_OK
FIELD	126:25	126:25	8	VP8_STATUS_OK
LEAF_NODE	126:25	126:25	9	VP8_STATUS_OK
LEAF_NODE	126:38	126:38	4	;
SIMPLE_DECL	127:2	127:35	3	WebPState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	127:2	127:13	4	WebPState * sp ; sp = DecoderState ( tif )
TYPE	127:2	127:12	5	WebPState *
TYPE_NAME	127:2	127:2	6	WebPState
LEAF_NODE	127:2	127:2	7	WebPState
POINTER	127:12	127:12	6	*
LEAF_NODE	127:12	127:12	7	*
NAME	127:13	127:13	5	sp
LEAF_NODE	127:13	127:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	127:13	127:13	5	sp = DecoderState ( tif )
ASSIGN	127:13	127:18	6	sp = DecoderState ( tif )
LVAL	127:13	127:13	7	sp
NAME	127:13	127:13	8	sp
LEAF_NODE	127:13	127:13	9	sp
ASSIGN_OP	127:16	127:16	7	=
LEAF_NODE	127:16	127:16	8	=
RVAL	127:18	127:18	7	DecoderState ( tif )
FUNCTION_CALL	127:18	127:34	8	DecoderState ( tif )
CALLEE	127:18	127:18	9	DecoderState
LEAF_NODE	127:18	127:18	10	DecoderState
LEAF_NODE	127:30	127:30	9	(
ARGUMENT	127:31	127:31	9	tif
FIELD	127:31	127:31	10	tif
LEAF_NODE	127:31	127:31	11	tif
LEAF_NODE	127:34	127:34	9	)
LEAF_NODE	127:35	127:35	4	;
EXPR_STATEMENT	128:2	128:10	3	( void ) s ;
EXPR	128:2	128:9	4	( void ) s
LEAF_NODE	128:2	128:2	5	(
TYPE_NAME	128:3	128:3	5	void
LEAF_NODE	128:3	128:3	6	void
LEAF_NODE	128:7	128:7	5	)
FIELD	128:9	128:9	5	s
LEAF_NODE	128:9	128:9	6	s
LEAF_NODE	128:10	128:10	4	;
EXPR_STATEMENT	130:2	130:20	3	assert ( sp != NULL ) ;
EXPR	130:2	130:2	4	assert ( sp != NULL )
FUNCTION_CALL	130:2	130:19	5	assert ( sp != NULL )
CALLEE	130:2	130:2	6	assert
LEAF_NODE	130:2	130:2	7	assert
LEAF_NODE	130:8	130:8	6	(
ARGUMENT	130:9	130:15	6	sp != NULL
FIELD	130:9	130:9	7	sp
LEAF_NODE	130:9	130:9	8	sp
EQ_OPERATOR	130:12	130:12	7	!=
LEAF_NODE	130:12	130:12	8	!=
FIELD	130:15	130:15	7	NULL
LEAF_NODE	130:15	130:15	8	NULL
LEAF_NODE	130:19	130:19	6	)
LEAF_NODE	130:20	130:20	4	;
EXPR_STATEMENT	131:2	131:41	3	assert ( sp -> state == LSTATE_INIT_DECODE ) ;
EXPR	131:2	131:2	4	assert ( sp -> state == LSTATE_INIT_DECODE )
FUNCTION_CALL	131:2	131:40	5	assert ( sp -> state == LSTATE_INIT_DECODE )
CALLEE	131:2	131:2	6	assert
LEAF_NODE	131:2	131:2	7	assert
LEAF_NODE	131:8	131:8	6	(
ARGUMENT	131:9	131:22	6	sp -> state == LSTATE_INIT_DECODE
FIELD	131:9	131:13	7	sp -> state
LEAF_NODE	131:9	131:9	8	sp
LEAF_NODE	131:11	131:11	8	->
LEAF_NODE	131:13	131:13	8	state
EQ_OPERATOR	131:19	131:19	7	==
LEAF_NODE	131:19	131:19	8	==
FIELD	131:22	131:22	7	LSTATE_INIT_DECODE
LEAF_NODE	131:22	131:22	8	LSTATE_INIT_DECODE
LEAF_NODE	131:40	131:40	6	)
LEAF_NODE	131:41	131:41	4	;
SELECTION	133:2	134:2	3	
KEYWORD	133:2	133:2	4	if
LEAF_NODE	133:2	133:2	5	if
LEAF_NODE	133:5	133:5	4	(
CONDITION	133:6	133:6	4	occ % sp -> sDecBuffer . u . RGBA . stride
EXPR	133:6	133:12	5	occ % sp -> sDecBuffer . u . RGBA . stride
FIELD	133:6	133:6	6	occ
LEAF_NODE	133:6	133:6	7	occ
LEAF_NODE	133:10	133:10	6	%
FIELD	133:12	133:34	6	sp -> sDecBuffer . u . RGBA . stride
LEAF_NODE	133:12	133:12	7	sp
LEAF_NODE	133:14	133:14	7	->
LEAF_NODE	133:16	133:16	7	sDecBuffer
LEAF_NODE	133:26	133:26	7	.
LEAF_NODE	133:27	133:27	7	u
LEAF_NODE	133:28	133:28	7	.
LEAF_NODE	133:29	133:29	7	RGBA
LEAF_NODE	133:33	133:33	7	.
LEAF_NODE	133:34	133:34	7	stride
LEAF_NODE	133:40	133:40	4	)
STATEMENTS	134:2	138:2	4	
LEAF_NODE	134:2	134:2	5	{
STATEMENTS	135:4	137:4	5	
EXPR_STATEMENT	135:4	136:55	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" ) ;
EXPR	135:4	135:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
FUNCTION_CALL	135:4	136:54	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
CALLEE	135:4	135:4	9	TIFFErrorExt
LEAF_NODE	135:4	135:4	10	TIFFErrorExt
LEAF_NODE	135:16	135:16	9	(
ARGUMENT	135:17	135:17	9	tif -> tif_clientdata
FIELD	135:17	135:22	10	tif -> tif_clientdata
LEAF_NODE	135:17	135:17	11	tif
LEAF_NODE	135:20	135:20	11	->
LEAF_NODE	135:22	135:22	11	tif_clientdata
LEAF_NODE	135:36	135:36	9	,
ARGUMENT	135:38	135:38	9	module
FIELD	135:38	135:38	10	module
LEAF_NODE	135:38	135:38	11	module
LEAF_NODE	135:44	135:44	9	,
ARGUMENT	136:17	136:17	9	"Fractional scanlines cannot be read"
FIELD	136:17	136:17	10	"Fractional scanlines cannot be read"
LEAF_NODE	136:17	136:17	11	"Fractional scanlines cannot be read"
LEAF_NODE	136:54	136:54	9	)
LEAF_NODE	136:55	136:55	7	;
JUMP_STATEMENT	137:4	137:12	6	return 0 ;
KEYWORD	137:4	137:4	7	return
LEAF_NODE	137:4	137:4	8	return
DESTINATION	137:11	137:11	7	0
EXPR	137:11	137:11	8	0
FIELD	137:11	137:11	9	0
LEAF_NODE	137:11	137:11	10	0
LEAF_NODE	137:12	137:12	7	;
LEAF_NODE	138:2	138:2	5	}
EXPR_STATEMENT	140:2	140:69	3	status = WebPIAppend ( sp -> psDecoder , tif -> tif_rawcp , tif -> tif_rawcc ) ;
EXPR	140:2	140:2	4	status = WebPIAppend ( sp -> psDecoder , tif -> tif_rawcp , tif -> tif_rawcc )
ASSIGN	140:2	140:11	5	status = WebPIAppend ( sp -> psDecoder , tif -> tif_rawcp , tif -> tif_rawcc )
LVAL	140:2	140:2	6	status
FIELD	140:2	140:2	7	status
LEAF_NODE	140:2	140:2	8	status
ASSIGN_OP	140:9	140:9	6	=
LEAF_NODE	140:9	140:9	7	=
RVAL	140:11	140:11	6	WebPIAppend ( sp -> psDecoder , tif -> tif_rawcp , tif -> tif_rawcc )
FUNCTION_CALL	140:11	140:68	7	WebPIAppend ( sp -> psDecoder , tif -> tif_rawcp , tif -> tif_rawcc )
CALLEE	140:11	140:11	8	WebPIAppend
LEAF_NODE	140:11	140:11	9	WebPIAppend
LEAF_NODE	140:22	140:22	8	(
ARGUMENT	140:23	140:23	8	sp -> psDecoder
FIELD	140:23	140:27	9	sp -> psDecoder
LEAF_NODE	140:23	140:23	10	sp
LEAF_NODE	140:25	140:25	10	->
LEAF_NODE	140:27	140:27	10	psDecoder
LEAF_NODE	140:36	140:36	8	,
ARGUMENT	140:38	140:38	8	tif -> tif_rawcp
FIELD	140:38	140:43	9	tif -> tif_rawcp
LEAF_NODE	140:38	140:38	10	tif
LEAF_NODE	140:41	140:41	10	->
LEAF_NODE	140:43	140:43	10	tif_rawcp
LEAF_NODE	140:52	140:52	8	,
ARGUMENT	140:54	140:54	8	tif -> tif_rawcc
FIELD	140:54	140:59	9	tif -> tif_rawcc
LEAF_NODE	140:54	140:54	10	tif
LEAF_NODE	140:57	140:57	10	->
LEAF_NODE	140:59	140:59	10	tif_rawcc
LEAF_NODE	140:68	140:68	8	)
LEAF_NODE	140:69	140:69	4	;
SELECTION	142:2	142:65	3	
KEYWORD	142:2	142:2	4	if
LEAF_NODE	142:2	142:2	5	if
LEAF_NODE	142:5	142:5	4	(
CONDITION	142:6	142:6	4	status != VP8_STATUS_OK && status != VP8_STATUS_SUSPENDED
EXPR	142:6	142:6	5	status != VP8_STATUS_OK && status != VP8_STATUS_SUSPENDED
AND	142:6	142:33	6	status != VP8_STATUS_OK && status != VP8_STATUS_SUSPENDED
EXPR	142:6	142:16	7	status != VP8_STATUS_OK
FIELD	142:6	142:6	8	status
LEAF_NODE	142:6	142:6	9	status
EQ_OPERATOR	142:13	142:13	8	!=
LEAF_NODE	142:13	142:13	9	!=
FIELD	142:16	142:16	8	VP8_STATUS_OK
LEAF_NODE	142:16	142:16	9	VP8_STATUS_OK
LEAF_NODE	142:30	142:30	7	&&
EXPR	142:33	142:43	7	status != VP8_STATUS_SUSPENDED
FIELD	142:33	142:33	8	status
LEAF_NODE	142:33	142:33	9	status
EQ_OPERATOR	142:40	142:40	8	!=
LEAF_NODE	142:40	142:40	9	!=
FIELD	142:43	142:43	8	VP8_STATUS_SUSPENDED
LEAF_NODE	142:43	142:43	9	VP8_STATUS_SUSPENDED
LEAF_NODE	142:63	142:63	4	)
STATEMENTS	142:65	154:2	4	
LEAF_NODE	142:65	142:65	5	{
STATEMENTS	143:4	153:4	5	
SELECTION	143:4	143:44	6	
KEYWORD	143:4	143:4	7	if
LEAF_NODE	143:4	143:4	8	if
LEAF_NODE	143:7	143:7	7	(
CONDITION	143:8	143:8	7	status == VP8_STATUS_INVALID_PARAM
EXPR	143:8	143:18	8	status == VP8_STATUS_INVALID_PARAM
FIELD	143:8	143:8	9	status
LEAF_NODE	143:8	143:8	10	status
EQ_OPERATOR	143:15	143:15	9	==
LEAF_NODE	143:15	143:15	10	==
FIELD	143:18	143:18	9	VP8_STATUS_INVALID_PARAM
LEAF_NODE	143:18	143:18	10	VP8_STATUS_INVALID_PARAM
LEAF_NODE	143:42	143:42	7	)
STATEMENTS	143:44	146:4	7	
LEAF_NODE	143:44	143:44	8	{
STATEMENTS	144:7	144:7	8	
EXPR_STATEMENT	144:7	145:35	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid parameter used." ) ;
EXPR	144:7	144:7	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid parameter used." )
FUNCTION_CALL	144:7	145:34	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid parameter used." )
CALLEE	144:7	144:7	12	TIFFErrorExt
LEAF_NODE	144:7	144:7	13	TIFFErrorExt
LEAF_NODE	144:19	144:19	12	(
ARGUMENT	144:20	144:20	12	tif -> tif_clientdata
FIELD	144:20	144:25	13	tif -> tif_clientdata
LEAF_NODE	144:20	144:20	14	tif
LEAF_NODE	144:23	144:23	14	->
LEAF_NODE	144:25	144:25	14	tif_clientdata
LEAF_NODE	144:39	144:39	12	,
ARGUMENT	144:41	144:41	12	module
FIELD	144:41	144:41	13	module
LEAF_NODE	144:41	144:41	14	module
LEAF_NODE	144:47	144:47	12	,
ARGUMENT	145:9	145:9	12	"Invalid parameter used."
FIELD	145:9	145:9	13	"Invalid parameter used."
LEAF_NODE	145:9	145:9	14	"Invalid parameter used."
LEAF_NODE	145:34	145:34	12	)
LEAF_NODE	145:35	145:35	10	;
LEAF_NODE	146:4	146:4	8	}
SELECTION	146:6	146:11	6	
KEYWORD	146:6	146:6	7	else
LEAF_NODE	146:6	146:6	8	else
STATEMENTS	146:11	146:11	7	
SELECTION	146:11	146:51	8	
KEYWORD	146:11	146:11	9	if
LEAF_NODE	146:11	146:11	10	if
LEAF_NODE	146:14	146:14	9	(
CONDITION	146:15	146:15	9	status == VP8_STATUS_OUT_OF_MEMORY
EXPR	146:15	146:25	10	status == VP8_STATUS_OUT_OF_MEMORY
FIELD	146:15	146:15	11	status
LEAF_NODE	146:15	146:15	12	status
EQ_OPERATOR	146:22	146:22	11	==
LEAF_NODE	146:22	146:22	12	==
FIELD	146:25	146:25	11	VP8_STATUS_OUT_OF_MEMORY
LEAF_NODE	146:25	146:25	12	VP8_STATUS_OUT_OF_MEMORY
LEAF_NODE	146:49	146:49	9	)
STATEMENTS	146:51	149:4	9	
LEAF_NODE	146:51	146:51	10	{
STATEMENTS	147:6	147:6	10	
EXPR_STATEMENT	147:6	148:25	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory." ) ;
EXPR	147:6	147:6	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory." )
FUNCTION_CALL	147:6	148:24	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory." )
CALLEE	147:6	147:6	14	TIFFErrorExt
LEAF_NODE	147:6	147:6	15	TIFFErrorExt
LEAF_NODE	147:18	147:18	14	(
ARGUMENT	147:19	147:19	14	tif -> tif_clientdata
FIELD	147:19	147:24	15	tif -> tif_clientdata
LEAF_NODE	147:19	147:19	16	tif
LEAF_NODE	147:22	147:22	16	->
LEAF_NODE	147:24	147:24	16	tif_clientdata
LEAF_NODE	147:38	147:38	14	,
ARGUMENT	147:40	147:40	14	module
FIELD	147:40	147:40	15	module
LEAF_NODE	147:40	147:40	16	module
LEAF_NODE	147:46	147:46	14	,
ARGUMENT	148:8	148:8	14	"Out of memory."
FIELD	148:8	148:8	15	"Out of memory."
LEAF_NODE	148:8	148:8	16	"Out of memory."
LEAF_NODE	148:24	148:24	14	)
LEAF_NODE	148:25	148:25	12	;
LEAF_NODE	149:4	149:4	10	}
SELECTION	149:6	149:11	6	
KEYWORD	149:6	149:6	7	else
LEAF_NODE	149:6	149:6	8	else
STATEMENTS	149:11	152:4	7	
LEAF_NODE	149:11	149:11	8	{
STATEMENTS	150:6	150:6	8	
EXPR_STATEMENT	150:6	151:30	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Unrecognized error." ) ;
EXPR	150:6	150:6	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Unrecognized error." )
FUNCTION_CALL	150:6	151:29	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Unrecognized error." )
CALLEE	150:6	150:6	12	TIFFErrorExt
LEAF_NODE	150:6	150:6	13	TIFFErrorExt
LEAF_NODE	150:18	150:18	12	(
ARGUMENT	150:19	150:19	12	tif -> tif_clientdata
FIELD	150:19	150:24	13	tif -> tif_clientdata
LEAF_NODE	150:19	150:19	14	tif
LEAF_NODE	150:22	150:22	14	->
LEAF_NODE	150:24	150:24	14	tif_clientdata
LEAF_NODE	150:38	150:38	12	,
ARGUMENT	150:40	150:40	12	module
FIELD	150:40	150:40	13	module
LEAF_NODE	150:40	150:40	14	module
LEAF_NODE	150:46	150:46	12	,
ARGUMENT	151:8	151:8	12	"Unrecognized error."
FIELD	151:8	151:8	13	"Unrecognized error."
LEAF_NODE	151:8	151:8	14	"Unrecognized error."
LEAF_NODE	151:29	151:29	12	)
LEAF_NODE	151:30	151:30	10	;
LEAF_NODE	152:4	152:4	8	}
JUMP_STATEMENT	153:4	153:12	6	return 0 ;
KEYWORD	153:4	153:4	7	return
LEAF_NODE	153:4	153:4	8	return
DESTINATION	153:11	153:11	7	0
EXPR	153:11	153:11	8	0
FIELD	153:11	153:11	9	0
LEAF_NODE	153:11	153:11	10	0
LEAF_NODE	153:12	153:12	7	;
LEAF_NODE	154:2	154:2	5	}
SELECTION	154:4	154:9	3	
KEYWORD	154:4	154:4	4	else
LEAF_NODE	154:4	154:4	5	else
STATEMENTS	154:9	175:2	4	
LEAF_NODE	154:9	154:9	5	{
STATEMENTS	155:4	171:6	5	
SIMPLE_DECL	155:4	155:25	6	int current_y , int stride ;
INIT_DECL_LIST	155:4	155:4	7	int current_y , int stride
VAR_DECL	155:4	155:8	8	int current_y
TYPE	155:4	155:4	9	int
TYPE_NAME	155:4	155:4	10	int
LEAF_NODE	155:4	155:4	11	int
NAME	155:8	155:8	9	current_y
LEAF_NODE	155:8	155:8	10	current_y
LEAF_NODE	155:17	155:17	8	,
VAR_DECL	155:4	155:19	8	int stride
TYPE	155:4	155:4	9	int
TYPE_NAME	155:4	155:4	10	int
LEAF_NODE	155:4	155:4	11	int
NAME	155:19	155:19	9	stride
LEAF_NODE	155:19	155:19	10	stride
LEAF_NODE	155:25	155:25	7	;
SIMPLE_DECL	156:4	156:16	6	uint8_t * buf ;
VAR_DECL	156:4	156:13	7	uint8_t * buf
TYPE	156:4	156:11	8	uint8_t *
TYPE_NAME	156:4	156:4	9	uint8_t
LEAF_NODE	156:4	156:4	10	uint8_t
POINTER	156:11	156:11	9	*
LEAF_NODE	156:11	156:11	10	*
NAME	156:13	156:13	8	buf
LEAF_NODE	156:13	156:13	9	buf
LEAF_NODE	156:16	156:16	7	;
EXPR_STATEMENT	159:4	159:72	6	buf = WebPIDecGetRGB ( sp -> psDecoder , & current_y , NULL , NULL , & stride ) ;
EXPR	159:4	159:4	7	buf = WebPIDecGetRGB ( sp -> psDecoder , & current_y , NULL , NULL , & stride )
ASSIGN	159:4	159:10	8	buf = WebPIDecGetRGB ( sp -> psDecoder , & current_y , NULL , NULL , & stride )
LVAL	159:4	159:4	9	buf
FIELD	159:4	159:4	10	buf
LEAF_NODE	159:4	159:4	11	buf
ASSIGN_OP	159:8	159:8	9	=
LEAF_NODE	159:8	159:8	10	=
RVAL	159:10	159:10	9	WebPIDecGetRGB ( sp -> psDecoder , & current_y , NULL , NULL , & stride )
FUNCTION_CALL	159:10	159:71	10	WebPIDecGetRGB ( sp -> psDecoder , & current_y , NULL , NULL , & stride )
CALLEE	159:10	159:10	11	WebPIDecGetRGB
LEAF_NODE	159:10	159:10	12	WebPIDecGetRGB
LEAF_NODE	159:24	159:24	11	(
ARGUMENT	159:25	159:25	11	sp -> psDecoder
FIELD	159:25	159:29	12	sp -> psDecoder
LEAF_NODE	159:25	159:25	13	sp
LEAF_NODE	159:27	159:27	13	->
LEAF_NODE	159:29	159:29	13	psDecoder
LEAF_NODE	159:38	159:38	11	,
ARGUMENT	159:40	159:40	11	& current_y
UNARY_EXPR	159:40	159:41	12	& current_y
UNARY_OPERATOR	159:40	159:40	13	&
LEAF_NODE	159:40	159:40	14	&
FIELD	159:41	159:41	13	current_y
LEAF_NODE	159:41	159:41	14	current_y
LEAF_NODE	159:50	159:50	11	,
ARGUMENT	159:52	159:52	11	NULL
FIELD	159:52	159:52	12	NULL
LEAF_NODE	159:52	159:52	13	NULL
LEAF_NODE	159:56	159:56	11	,
ARGUMENT	159:58	159:58	11	NULL
FIELD	159:58	159:58	12	NULL
LEAF_NODE	159:58	159:58	13	NULL
LEAF_NODE	159:62	159:62	11	,
ARGUMENT	159:64	159:64	11	& stride
UNARY_EXPR	159:64	159:65	12	& stride
UNARY_OPERATOR	159:64	159:64	13	&
LEAF_NODE	159:64	159:64	14	&
FIELD	159:65	159:65	13	stride
LEAF_NODE	159:65	159:65	14	stride
LEAF_NODE	159:71	159:71	11	)
LEAF_NODE	159:72	159:72	7	;
SELECTION	161:4	162:52	6	
KEYWORD	161:4	161:4	7	if
LEAF_NODE	161:4	161:4	8	if
LEAF_NODE	161:7	161:7	7	(
CONDITION	161:8	161:8	7	( buf != NULL ) && ( occ <= stride * ( current_y - sp -> last_y ) )
EXPR	161:8	161:8	8	( buf != NULL ) && ( occ <= stride * ( current_y - sp -> last_y ) )
AND	161:8	162:8	9	( buf != NULL ) && ( occ <= stride * ( current_y - sp -> last_y ) )
EXPR	161:8	161:20	10	( buf != NULL )
LEAF_NODE	161:8	161:8	11	(
FIELD	161:9	161:9	11	buf
LEAF_NODE	161:9	161:9	12	buf
EQ_OPERATOR	161:13	161:13	11	!=
LEAF_NODE	161:13	161:13	12	!=
FIELD	161:16	161:16	11	NULL
LEAF_NODE	161:16	161:16	12	NULL
LEAF_NODE	161:20	161:20	11	)
LEAF_NODE	161:22	161:22	10	&&
EXPR	162:8	162:49	10	( occ <= stride * ( current_y - sp -> last_y ) )
LEAF_NODE	162:8	162:8	11	(
FIELD	162:9	162:9	11	occ
LEAF_NODE	162:9	162:9	12	occ
REL_OPERATOR	162:13	162:13	11	<=
LEAF_NODE	162:13	162:13	12	<=
FIELD	162:16	162:16	11	stride
LEAF_NODE	162:16	162:16	12	stride
LEAF_NODE	162:23	162:23	11	*
LEAF_NODE	162:25	162:25	11	(
FIELD	162:26	162:26	11	current_y
LEAF_NODE	162:26	162:26	12	current_y
LEAF_NODE	162:36	162:36	11	-
FIELD	162:38	162:42	11	sp -> last_y
LEAF_NODE	162:38	162:38	12	sp
LEAF_NODE	162:40	162:40	12	->
LEAF_NODE	162:42	162:42	12	last_y
LEAF_NODE	162:48	162:48	11	)
LEAF_NODE	162:49	162:49	11	)
LEAF_NODE	162:50	162:50	7	)
STATEMENTS	162:52	171:4	7	
LEAF_NODE	162:52	162:52	8	{
STATEMENTS	163:6	170:6	8	
EXPR_STATEMENT	163:6	165:13	9	memcpy ( op , buf + ( sp -> last_y * stride ) , occ ) ;
EXPR	163:6	163:6	10	memcpy ( op , buf + ( sp -> last_y * stride ) , occ )
FUNCTION_CALL	163:6	165:12	11	memcpy ( op , buf + ( sp -> last_y * stride ) , occ )
CALLEE	163:6	163:6	12	memcpy
LEAF_NODE	163:6	163:6	13	memcpy
LEAF_NODE	163:12	163:12	12	(
ARGUMENT	163:13	163:13	12	op
FIELD	163:13	163:13	13	op
LEAF_NODE	163:13	163:13	14	op
LEAF_NODE	163:15	163:15	12	,
ARGUMENT	164:9	164:35	12	buf + ( sp -> last_y * stride )
FIELD	164:9	164:9	13	buf
LEAF_NODE	164:9	164:9	14	buf
LEAF_NODE	164:13	164:13	13	+
LEAF_NODE	164:15	164:15	13	(
FIELD	164:16	164:20	13	sp -> last_y
LEAF_NODE	164:16	164:16	14	sp
LEAF_NODE	164:18	164:18	14	->
LEAF_NODE	164:20	164:20	14	last_y
LEAF_NODE	164:27	164:27	13	*
FIELD	164:29	164:29	13	stride
LEAF_NODE	164:29	164:29	14	stride
LEAF_NODE	164:35	164:35	13	)
LEAF_NODE	164:36	164:36	12	,
ARGUMENT	165:9	165:9	12	occ
FIELD	165:9	165:9	13	occ
LEAF_NODE	165:9	165:9	14	occ
LEAF_NODE	165:12	165:12	12	)
LEAF_NODE	165:13	165:13	10	;
EXPR_STATEMENT	167:6	167:38	9	tif -> tif_rawcp += tif -> tif_rawcc ;
EXPR	167:6	167:6	10	tif -> tif_rawcp += tif -> tif_rawcc
ASSIGN	167:6	167:24	11	tif -> tif_rawcp += tif -> tif_rawcc
LVAL	167:6	167:6	12	tif -> tif_rawcp
FIELD	167:6	167:11	13	tif -> tif_rawcp
LEAF_NODE	167:6	167:6	14	tif
LEAF_NODE	167:9	167:9	14	->
LEAF_NODE	167:11	167:11	14	tif_rawcp
ASSIGN_OP	167:21	167:21	12	+=
LEAF_NODE	167:21	167:21	13	+=
RVAL	167:24	167:24	12	tif -> tif_rawcc
FIELD	167:24	167:29	13	tif -> tif_rawcc
LEAF_NODE	167:24	167:24	14	tif
LEAF_NODE	167:27	167:27	14	->
LEAF_NODE	167:29	167:29	14	tif_rawcc
LEAF_NODE	167:38	167:38	10	;
EXPR_STATEMENT	168:6	168:24	9	tif -> tif_rawcc = 0 ;
EXPR	168:6	168:6	10	tif -> tif_rawcc = 0
ASSIGN	168:6	168:23	11	tif -> tif_rawcc = 0
LVAL	168:6	168:6	12	tif -> tif_rawcc
FIELD	168:6	168:11	13	tif -> tif_rawcc
LEAF_NODE	168:6	168:6	14	tif
LEAF_NODE	168:9	168:9	14	->
LEAF_NODE	168:11	168:11	14	tif_rawcc
ASSIGN_OP	168:21	168:21	12	=
LEAF_NODE	168:21	168:21	13	=
RVAL	168:23	168:23	12	0
FIELD	168:23	168:23	13	0
LEAF_NODE	168:23	168:23	14	0
LEAF_NODE	168:24	168:24	10	;
EXPR_STATEMENT	169:6	169:54	9	sp -> last_y += occ / sp -> sDecBuffer . u . RGBA . stride ;
EXPR	169:6	169:6	10	sp -> last_y += occ / sp -> sDecBuffer . u . RGBA . stride
ASSIGN	169:6	169:20	11	sp -> last_y += occ / sp -> sDecBuffer . u . RGBA . stride
LVAL	169:6	169:6	12	sp -> last_y
FIELD	169:6	169:10	13	sp -> last_y
LEAF_NODE	169:6	169:6	14	sp
LEAF_NODE	169:8	169:8	14	->
LEAF_NODE	169:10	169:10	14	last_y
ASSIGN_OP	169:17	169:17	12	+=
LEAF_NODE	169:17	169:17	13	+=
RVAL	169:20	169:26	12	occ / sp -> sDecBuffer . u . RGBA . stride
FIELD	169:20	169:20	13	occ
LEAF_NODE	169:20	169:20	14	occ
LEAF_NODE	169:24	169:24	13	/
FIELD	169:26	169:48	13	sp -> sDecBuffer . u . RGBA . stride
LEAF_NODE	169:26	169:26	14	sp
LEAF_NODE	169:28	169:28	14	->
LEAF_NODE	169:30	169:30	14	sDecBuffer
LEAF_NODE	169:40	169:40	14	.
LEAF_NODE	169:41	169:41	14	u
LEAF_NODE	169:42	169:42	14	.
LEAF_NODE	169:43	169:43	14	RGBA
LEAF_NODE	169:47	169:47	14	.
LEAF_NODE	169:48	169:48	14	stride
LEAF_NODE	169:54	169:54	10	;
JUMP_STATEMENT	170:6	170:14	9	return 1 ;
KEYWORD	170:6	170:6	10	return
LEAF_NODE	170:6	170:6	11	return
DESTINATION	170:13	170:13	10	1
EXPR	170:13	170:13	11	1
FIELD	170:13	170:13	12	1
LEAF_NODE	170:13	170:13	13	1
LEAF_NODE	170:14	170:14	10	;
LEAF_NODE	171:4	171:4	8	}
SELECTION	171:6	171:11	6	
KEYWORD	171:6	171:6	7	else
LEAF_NODE	171:6	171:6	8	else
STATEMENTS	171:11	174:4	7	
LEAF_NODE	171:11	171:11	8	{
STATEMENTS	172:6	173:6	8	
EXPR_STATEMENT	172:6	172:78	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Unable to decode WebP data." ) ;
EXPR	172:6	172:6	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Unable to decode WebP data." )
FUNCTION_CALL	172:6	172:77	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Unable to decode WebP data." )
CALLEE	172:6	172:6	12	TIFFErrorExt
LEAF_NODE	172:6	172:6	13	TIFFErrorExt
LEAF_NODE	172:18	172:18	12	(
ARGUMENT	172:19	172:19	12	tif -> tif_clientdata
FIELD	172:19	172:24	13	tif -> tif_clientdata
LEAF_NODE	172:19	172:19	14	tif
LEAF_NODE	172:22	172:22	14	->
LEAF_NODE	172:24	172:24	14	tif_clientdata
LEAF_NODE	172:38	172:38	12	,
ARGUMENT	172:40	172:40	12	module
FIELD	172:40	172:40	13	module
LEAF_NODE	172:40	172:40	14	module
LEAF_NODE	172:46	172:46	12	,
ARGUMENT	172:48	172:48	12	"Unable to decode WebP data."
FIELD	172:48	172:48	13	"Unable to decode WebP data."
LEAF_NODE	172:48	172:48	14	"Unable to decode WebP data."
LEAF_NODE	172:77	172:77	12	)
LEAF_NODE	172:78	172:78	10	;
JUMP_STATEMENT	173:6	173:14	9	return 0 ;
KEYWORD	173:6	173:6	10	return
LEAF_NODE	173:6	173:6	11	return
DESTINATION	173:13	173:13	10	0
EXPR	173:13	173:13	11	0
FIELD	173:13	173:13	12	0
LEAF_NODE	173:13	173:13	13	0
LEAF_NODE	173:14	173:14	10	;
LEAF_NODE	174:4	174:4	8	}
LEAF_NODE	175:2	175:2	5	}
LEAF_NODE	176:0	176:0	2	}
FUNCTION_DEF	178:0	193:0	1	
RETURN_TYPE	178:0	178:7	2	static int
LEAF_NODE	178:0	178:0	3	static
TYPE_NAME	178:7	178:7	3	int
LEAF_NODE	178:7	178:7	4	int
FUNCTION_NAME	179:0	179:0	2	TWebPFixupTags
LEAF_NODE	179:0	179:0	3	TWebPFixupTags
PARAMETER_LIST	179:14	179:24	2	( TIFF * tif )
LEAF_NODE	179:14	179:14	3	(
PARAMETER_DECL	179:15	179:21	3	TIFF * tif
TYPE	179:15	179:19	4	TIFF *
TYPE_NAME	179:15	179:15	5	TIFF
LEAF_NODE	179:15	179:15	6	TIFF
POINTER	179:19	179:19	5	*
LEAF_NODE	179:19	179:19	6	*
NAME	179:21	179:21	4	tif
LEAF_NODE	179:21	179:21	5	tif
LEAF_NODE	179:24	179:24	3	)
LEAF_NODE	180:0	180:0	2	{
STATEMENTS	181:2	192:2	2	
EXPR_STATEMENT	181:2	181:12	3	( void ) tif ;
EXPR	181:2	181:9	4	( void ) tif
LEAF_NODE	181:2	181:2	5	(
TYPE_NAME	181:3	181:3	5	void
LEAF_NODE	181:3	181:3	6	void
LEAF_NODE	181:7	181:7	5	)
FIELD	181:9	181:9	5	tif
LEAF_NODE	181:9	181:9	6	tif
LEAF_NODE	181:12	181:12	4	;
SELECTION	182:2	182:59	3	
KEYWORD	182:2	182:2	4	if
LEAF_NODE	182:2	182:2	5	if
LEAF_NODE	182:5	182:5	4	(
CONDITION	182:6	182:6	4	tif -> tif_dir . td_planarconfig != PLANARCONFIG_CONTIG
EXPR	182:6	182:38	5	tif -> tif_dir . td_planarconfig != PLANARCONFIG_CONTIG
FIELD	182:6	182:19	6	tif -> tif_dir . td_planarconfig
LEAF_NODE	182:6	182:6	7	tif
LEAF_NODE	182:9	182:9	7	->
LEAF_NODE	182:11	182:11	7	tif_dir
LEAF_NODE	182:18	182:18	7	.
LEAF_NODE	182:19	182:19	7	td_planarconfig
EQ_OPERATOR	182:35	182:35	6	!=
LEAF_NODE	182:35	182:35	7	!=
FIELD	182:38	182:38	6	PLANARCONFIG_CONTIG
LEAF_NODE	182:38	182:38	7	PLANARCONFIG_CONTIG
LEAF_NODE	182:57	182:57	4	)
STATEMENTS	182:59	191:2	4	
LEAF_NODE	182:59	182:59	5	{
STATEMENTS	183:4	190:4	5	
LEAF_NODE	183:4	183:4	6	static
SIMPLE_DECL	183:11	183:49	6	const char [ ] module ; module = "TWebPFixupTags" ;
VAR_DECL	183:11	183:22	7	const char [ ] module ; module = "TWebPFixupTags"
TYPE	183:11	183:28	8	const char [ ]
TYPE_NAME	183:11	183:17	9	const char
LEAF_NODE	183:11	183:11	10	const
LEAF_NODE	183:17	183:17	10	char
TYPE_SUFFIX	183:28	183:29	9	[ ]
LEAF_NODE	183:28	183:28	10	[
LEAF_NODE	183:29	183:29	10	]
NAME	183:22	183:22	8	module
LEAF_NODE	183:22	183:22	9	module
LEAF_NODE	0:0	0:0	8	;
INIT	183:22	183:22	8	module = "TWebPFixupTags"
ASSIGN	183:22	183:33	9	module = "TWebPFixupTags"
LVAL	183:22	183:22	10	module
NAME	183:22	183:22	11	module
LEAF_NODE	183:22	183:22	12	module
ASSIGN_OP	183:31	183:31	10	=
LEAF_NODE	183:31	183:31	11	=
RVAL	183:33	183:33	10	"TWebPFixupTags"
FIELD	183:33	183:33	11	"TWebPFixupTags"
LEAF_NODE	183:33	183:33	12	"TWebPFixupTags"
LEAF_NODE	183:49	183:49	7	;
LEAF_NODE	184:4	184:4	6	TIFFErrorExt
LEAF_NODE	184:16	184:16	6	(
LEAF_NODE	184:17	184:17	6	tif
LEAF_NODE	184:20	184:20	6	->
LEAF_NODE	184:22	184:22	6	tif_clientdata
LEAF_NODE	184:36	184:36	6	,
LEAF_NODE	184:38	184:38	6	module
LEAF_NODE	184:44	184:44	6	,
LEAF_NODE	185:6	185:6	6	"TIFF WEBP requires data to be stored contiguously in RGB e.g. RGBRGBRGB "
LEAF_NODE	187:6	187:6	6	"or RGBARGBARGBA"
LEAF_NODE	189:4	189:4	6	)
LEAF_NODE	189:5	189:5	6	;
JUMP_STATEMENT	190:4	190:12	6	return 0 ;
KEYWORD	190:4	190:4	7	return
LEAF_NODE	190:4	190:4	8	return
DESTINATION	190:11	190:11	7	0
EXPR	190:11	190:11	8	0
FIELD	190:11	190:11	9	0
LEAF_NODE	190:11	190:11	10	0
LEAF_NODE	190:12	190:12	7	;
LEAF_NODE	191:2	191:2	5	}
JUMP_STATEMENT	192:2	192:10	3	return 1 ;
KEYWORD	192:2	192:2	4	return
LEAF_NODE	192:2	192:2	5	return
DESTINATION	192:9	192:9	4	1
EXPR	192:9	192:9	5	1
FIELD	192:9	192:9	6	1
LEAF_NODE	192:9	192:9	7	1
LEAF_NODE	192:10	192:10	4	;
LEAF_NODE	193:0	193:0	2	}
FUNCTION_DEF	195:0	245:0	1	
RETURN_TYPE	195:0	195:7	2	static int
LEAF_NODE	195:0	195:0	3	static
TYPE_NAME	195:7	195:7	3	int
LEAF_NODE	195:7	195:7	4	int
FUNCTION_NAME	196:0	196:0	2	TWebPSetupDecode
LEAF_NODE	196:0	196:0	3	TWebPSetupDecode
PARAMETER_LIST	196:16	196:26	2	( TIFF * tif )
LEAF_NODE	196:16	196:16	3	(
PARAMETER_DECL	196:17	196:23	3	TIFF * tif
TYPE	196:17	196:21	4	TIFF *
TYPE_NAME	196:17	196:17	5	TIFF
LEAF_NODE	196:17	196:17	6	TIFF
POINTER	196:21	196:21	5	*
LEAF_NODE	196:21	196:21	6	*
NAME	196:23	196:23	4	tif
LEAF_NODE	196:23	196:23	5	tif
LEAF_NODE	196:26	196:26	3	)
LEAF_NODE	197:0	197:0	2	{
STATEMENTS	198:2	244:2	2	
LEAF_NODE	198:2	198:2	3	static
SIMPLE_DECL	198:9	198:48	3	const char [ ] module ; module = "WebPSetupDecode" ;
VAR_DECL	198:9	198:20	4	const char [ ] module ; module = "WebPSetupDecode"
TYPE	198:9	198:26	5	const char [ ]
TYPE_NAME	198:9	198:15	6	const char
LEAF_NODE	198:9	198:9	7	const
LEAF_NODE	198:15	198:15	7	char
TYPE_SUFFIX	198:26	198:27	6	[ ]
LEAF_NODE	198:26	198:26	7	[
LEAF_NODE	198:27	198:27	7	]
NAME	198:20	198:20	5	module
LEAF_NODE	198:20	198:20	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	198:20	198:20	5	module = "WebPSetupDecode"
ASSIGN	198:20	198:31	6	module = "WebPSetupDecode"
LVAL	198:20	198:20	7	module
NAME	198:20	198:20	8	module
LEAF_NODE	198:20	198:20	9	module
ASSIGN_OP	198:29	198:29	7	=
LEAF_NODE	198:29	198:29	8	=
RVAL	198:31	198:31	7	"WebPSetupDecode"
FIELD	198:31	198:31	8	"WebPSetupDecode"
LEAF_NODE	198:31	198:31	9	"WebPSetupDecode"
LEAF_NODE	198:48	198:48	4	;
SIMPLE_DECL	199:2	199:55	3	uint16 nBitsPerSample ; nBitsPerSample = tif -> tif_dir . td_bitspersample ;
VAR_DECL	199:2	199:9	4	uint16 nBitsPerSample ; nBitsPerSample = tif -> tif_dir . td_bitspersample
TYPE	199:2	199:2	5	uint16
TYPE_NAME	199:2	199:2	6	uint16
LEAF_NODE	199:2	199:2	7	uint16
NAME	199:9	199:9	5	nBitsPerSample
LEAF_NODE	199:9	199:9	6	nBitsPerSample
LEAF_NODE	0:0	0:0	5	;
INIT	199:9	199:9	5	nBitsPerSample = tif -> tif_dir . td_bitspersample
ASSIGN	199:9	199:26	6	nBitsPerSample = tif -> tif_dir . td_bitspersample
LVAL	199:9	199:9	7	nBitsPerSample
NAME	199:9	199:9	8	nBitsPerSample
LEAF_NODE	199:9	199:9	9	nBitsPerSample
ASSIGN_OP	199:24	199:24	7	=
LEAF_NODE	199:24	199:24	8	=
RVAL	199:26	199:26	7	tif -> tif_dir . td_bitspersample
FIELD	199:26	199:39	8	tif -> tif_dir . td_bitspersample
LEAF_NODE	199:26	199:26	9	tif
LEAF_NODE	199:29	199:29	9	->
LEAF_NODE	199:31	199:31	9	tif_dir
LEAF_NODE	199:38	199:38	9	.
LEAF_NODE	199:39	199:39	9	td_bitspersample
LEAF_NODE	199:55	199:55	4	;
SIMPLE_DECL	200:2	200:52	3	uint16 sampleFormat ; sampleFormat = tif -> tif_dir . td_sampleformat ;
VAR_DECL	200:2	200:9	4	uint16 sampleFormat ; sampleFormat = tif -> tif_dir . td_sampleformat
TYPE	200:2	200:2	5	uint16
TYPE_NAME	200:2	200:2	6	uint16
LEAF_NODE	200:2	200:2	7	uint16
NAME	200:9	200:9	5	sampleFormat
LEAF_NODE	200:9	200:9	6	sampleFormat
LEAF_NODE	0:0	0:0	5	;
INIT	200:9	200:9	5	sampleFormat = tif -> tif_dir . td_sampleformat
ASSIGN	200:9	200:24	6	sampleFormat = tif -> tif_dir . td_sampleformat
LVAL	200:9	200:9	7	sampleFormat
NAME	200:9	200:9	8	sampleFormat
LEAF_NODE	200:9	200:9	9	sampleFormat
ASSIGN_OP	200:22	200:22	7	=
LEAF_NODE	200:22	200:22	8	=
RVAL	200:24	200:24	7	tif -> tif_dir . td_sampleformat
FIELD	200:24	200:37	8	tif -> tif_dir . td_sampleformat
LEAF_NODE	200:24	200:24	9	tif
LEAF_NODE	200:27	200:27	9	->
LEAF_NODE	200:29	200:29	9	tif_dir
LEAF_NODE	200:36	200:36	9	.
LEAF_NODE	200:37	200:37	9	td_sampleformat
LEAF_NODE	200:52	200:52	4	;
SIMPLE_DECL	202:2	202:35	3	WebPState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	202:2	202:13	4	WebPState * sp ; sp = DecoderState ( tif )
TYPE	202:2	202:11	5	WebPState *
TYPE_NAME	202:2	202:2	6	WebPState
LEAF_NODE	202:2	202:2	7	WebPState
POINTER	202:11	202:11	6	*
LEAF_NODE	202:11	202:11	7	*
NAME	202:13	202:13	5	sp
LEAF_NODE	202:13	202:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	202:13	202:13	5	sp = DecoderState ( tif )
ASSIGN	202:13	202:18	6	sp = DecoderState ( tif )
LVAL	202:13	202:13	7	sp
NAME	202:13	202:13	8	sp
LEAF_NODE	202:13	202:13	9	sp
ASSIGN_OP	202:16	202:16	7	=
LEAF_NODE	202:16	202:16	8	=
RVAL	202:18	202:18	7	DecoderState ( tif )
FUNCTION_CALL	202:18	202:34	8	DecoderState ( tif )
CALLEE	202:18	202:18	9	DecoderState
LEAF_NODE	202:18	202:18	10	DecoderState
LEAF_NODE	202:30	202:30	9	(
ARGUMENT	202:31	202:31	9	tif
FIELD	202:31	202:31	10	tif
LEAF_NODE	202:31	202:31	11	tif
LEAF_NODE	202:34	202:34	9	)
LEAF_NODE	202:35	202:35	4	;
EXPR_STATEMENT	203:2	203:20	3	assert ( sp != NULL ) ;
EXPR	203:2	203:2	4	assert ( sp != NULL )
FUNCTION_CALL	203:2	203:19	5	assert ( sp != NULL )
CALLEE	203:2	203:2	6	assert
LEAF_NODE	203:2	203:2	7	assert
LEAF_NODE	203:8	203:8	6	(
ARGUMENT	203:9	203:15	6	sp != NULL
FIELD	203:9	203:9	7	sp
LEAF_NODE	203:9	203:9	8	sp
EQ_OPERATOR	203:12	203:12	7	!=
LEAF_NODE	203:12	203:12	8	!=
FIELD	203:15	203:15	7	NULL
LEAF_NODE	203:15	203:15	8	NULL
LEAF_NODE	203:19	203:19	6	)
LEAF_NODE	203:20	203:20	4	;
EXPR_STATEMENT	205:2	205:48	3	sp -> nSamples = tif -> tif_dir . td_samplesperpixel ;
EXPR	205:2	205:2	4	sp -> nSamples = tif -> tif_dir . td_samplesperpixel
ASSIGN	205:2	205:17	5	sp -> nSamples = tif -> tif_dir . td_samplesperpixel
LVAL	205:2	205:2	6	sp -> nSamples
FIELD	205:2	205:6	7	sp -> nSamples
LEAF_NODE	205:2	205:2	8	sp
LEAF_NODE	205:4	205:4	8	->
LEAF_NODE	205:6	205:6	8	nSamples
ASSIGN_OP	205:15	205:15	6	=
LEAF_NODE	205:15	205:15	7	=
RVAL	205:17	205:17	6	tif -> tif_dir . td_samplesperpixel
FIELD	205:17	205:30	7	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	205:17	205:17	8	tif
LEAF_NODE	205:20	205:20	8	->
LEAF_NODE	205:22	205:22	8	tif_dir
LEAF_NODE	205:29	205:29	8	.
LEAF_NODE	205:30	205:30	8	td_samplesperpixel
LEAF_NODE	205:48	205:48	4	;
SELECTION	208:2	213:2	3	
KEYWORD	208:2	208:2	4	if
LEAF_NODE	208:2	208:2	5	if
LEAF_NODE	208:5	208:5	4	(
CONDITION	208:7	208:7	4	sp -> nSamples != 3 && sp -> nSamples != 4
EXPR	208:7	208:7	5	sp -> nSamples != 3 && sp -> nSamples != 4
AND	208:7	210:7	6	sp -> nSamples != 3 && sp -> nSamples != 4
EXPR	208:7	208:23	7	sp -> nSamples != 3
FIELD	208:7	208:11	8	sp -> nSamples
LEAF_NODE	208:7	208:7	9	sp
LEAF_NODE	208:9	208:9	9	->
LEAF_NODE	208:11	208:11	9	nSamples
EQ_OPERATOR	208:20	208:20	8	!=
LEAF_NODE	208:20	208:20	9	!=
FIELD	208:23	208:23	8	3
LEAF_NODE	208:23	208:23	9	3
LEAF_NODE	210:4	210:4	7	&&
EXPR	210:7	210:23	7	sp -> nSamples != 4
FIELD	210:7	210:11	8	sp -> nSamples
LEAF_NODE	210:7	210:7	9	sp
LEAF_NODE	210:9	210:9	9	->
LEAF_NODE	210:11	210:11	9	nSamples
EQ_OPERATOR	210:20	210:20	8	!=
LEAF_NODE	210:20	210:20	9	!=
FIELD	210:23	210:23	8	4
LEAF_NODE	210:23	210:23	9	4
LEAF_NODE	212:2	212:2	4	)
STATEMENTS	213:2	222:2	4	
LEAF_NODE	213:2	213:2	5	{
STATEMENTS	214:4	221:4	5	
LEAF_NODE	214:4	214:4	6	TIFFErrorExt
LEAF_NODE	214:16	214:16	6	(
LEAF_NODE	214:17	214:17	6	tif
LEAF_NODE	214:20	214:20	6	->
LEAF_NODE	214:22	214:22	6	tif_clientdata
LEAF_NODE	214:36	214:36	6	,
LEAF_NODE	214:38	214:38	6	module
LEAF_NODE	214:44	214:44	6	,
LEAF_NODE	215:6	215:6	6	"WEBP driver doesn't support %d bands. Must be 3 (RGB) "
LEAF_NODE	217:6	217:6	6	"or 4 (RGBA) "
LEAF_NODE	219:4	219:4	6	"bands."
LEAF_NODE	219:12	219:12	6	,
LEAF_NODE	220:4	220:4	6	sp
LEAF_NODE	220:6	220:6	6	->
LEAF_NODE	220:8	220:8	6	nSamples
LEAF_NODE	220:17	220:17	6	)
LEAF_NODE	220:18	220:18	6	;
JUMP_STATEMENT	221:4	221:12	6	return 0 ;
KEYWORD	221:4	221:4	7	return
LEAF_NODE	221:4	221:4	8	return
DESTINATION	221:11	221:11	7	0
EXPR	221:11	221:11	8	0
FIELD	221:11	221:11	9	0
LEAF_NODE	221:11	221:11	10	0
LEAF_NODE	221:12	221:12	7	;
LEAF_NODE	222:2	222:2	5	}
SELECTION	225:2	225:52	3	
KEYWORD	225:2	225:2	4	if
LEAF_NODE	225:2	225:2	5	if
LEAF_NODE	225:5	225:5	4	(
CONDITION	225:6	225:6	4	( nBitsPerSample != 8 ) && ( sampleFormat != 1 )
EXPR	225:6	225:6	5	( nBitsPerSample != 8 ) && ( sampleFormat != 1 )
AND	225:6	225:31	6	( nBitsPerSample != 8 ) && ( sampleFormat != 1 )
EXPR	225:6	225:26	7	( nBitsPerSample != 8 )
LEAF_NODE	225:6	225:6	8	(
FIELD	225:7	225:7	8	nBitsPerSample
LEAF_NODE	225:7	225:7	9	nBitsPerSample
EQ_OPERATOR	225:22	225:22	8	!=
LEAF_NODE	225:22	225:22	9	!=
FIELD	225:25	225:25	8	8
LEAF_NODE	225:25	225:25	9	8
LEAF_NODE	225:26	225:26	8	)
LEAF_NODE	225:28	225:28	7	&&
EXPR	225:31	225:49	7	( sampleFormat != 1 )
LEAF_NODE	225:31	225:31	8	(
FIELD	225:32	225:32	8	sampleFormat
LEAF_NODE	225:32	225:32	9	sampleFormat
EQ_OPERATOR	225:45	225:45	8	!=
LEAF_NODE	225:45	225:45	9	!=
FIELD	225:48	225:48	8	1
LEAF_NODE	225:48	225:48	9	1
LEAF_NODE	225:49	225:49	8	)
LEAF_NODE	225:50	225:50	4	)
STATEMENTS	225:52	229:2	4	
LEAF_NODE	225:52	225:52	5	{
STATEMENTS	226:4	228:4	5	
EXPR_STATEMENT	226:4	227:59	6	TIFFErrorExt ( tif -> tif_clientdata , module , "WEBP driver requires 8 bit unsigned data" ) ;
EXPR	226:4	226:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "WEBP driver requires 8 bit unsigned data" )
FUNCTION_CALL	226:4	227:58	8	TIFFErrorExt ( tif -> tif_clientdata , module , "WEBP driver requires 8 bit unsigned data" )
CALLEE	226:4	226:4	9	TIFFErrorExt
LEAF_NODE	226:4	226:4	10	TIFFErrorExt
LEAF_NODE	226:16	226:16	9	(
ARGUMENT	226:17	226:17	9	tif -> tif_clientdata
FIELD	226:17	226:22	10	tif -> tif_clientdata
LEAF_NODE	226:17	226:17	11	tif
LEAF_NODE	226:20	226:20	11	->
LEAF_NODE	226:22	226:22	11	tif_clientdata
LEAF_NODE	226:36	226:36	9	,
ARGUMENT	226:38	226:38	9	module
FIELD	226:38	226:38	10	module
LEAF_NODE	226:38	226:38	11	module
LEAF_NODE	226:44	226:44	9	,
ARGUMENT	227:16	227:16	9	"WEBP driver requires 8 bit unsigned data"
FIELD	227:16	227:16	10	"WEBP driver requires 8 bit unsigned data"
LEAF_NODE	227:16	227:16	11	"WEBP driver requires 8 bit unsigned data"
LEAF_NODE	227:58	227:58	9	)
LEAF_NODE	227:59	227:59	7	;
JUMP_STATEMENT	228:4	228:12	6	return 0 ;
KEYWORD	228:4	228:4	7	return
LEAF_NODE	228:4	228:4	8	return
DESTINATION	228:11	228:11	7	0
EXPR	228:11	228:11	8	0
FIELD	228:11	228:11	9	0
LEAF_NODE	228:11	228:11	10	0
LEAF_NODE	228:12	228:12	7	;
LEAF_NODE	229:2	229:2	5	}
SELECTION	232:2	232:38	3	
KEYWORD	232:2	232:2	4	if
LEAF_NODE	232:2	232:2	5	if
LEAF_NODE	232:5	232:5	4	(
CONDITION	232:6	232:6	4	sp -> state & LSTATE_INIT_ENCODE
EXPR	232:6	232:18	5	sp -> state & LSTATE_INIT_ENCODE
FIELD	232:6	232:10	6	sp -> state
LEAF_NODE	232:6	232:6	7	sp
LEAF_NODE	232:8	232:8	7	->
LEAF_NODE	232:10	232:10	7	state
LEAF_NODE	232:16	232:16	6	&
FIELD	232:18	232:18	6	LSTATE_INIT_ENCODE
LEAF_NODE	232:18	232:18	7	LSTATE_INIT_ENCODE
LEAF_NODE	232:36	232:36	4	)
STATEMENTS	232:38	240:2	4	
LEAF_NODE	232:38	232:38	5	{
STATEMENTS	233:6	239:6	5	
EXPR_STATEMENT	233:6	233:36	6	WebPPictureFree ( & sp -> sPicture ) ;
EXPR	233:6	233:6	7	WebPPictureFree ( & sp -> sPicture )
FUNCTION_CALL	233:6	233:35	8	WebPPictureFree ( & sp -> sPicture )
CALLEE	233:6	233:6	9	WebPPictureFree
LEAF_NODE	233:6	233:6	10	WebPPictureFree
LEAF_NODE	233:21	233:21	9	(
ARGUMENT	233:22	233:22	9	& sp -> sPicture
UNARY_EXPR	233:22	233:23	10	& sp -> sPicture
UNARY_OPERATOR	233:22	233:22	11	&
LEAF_NODE	233:22	233:22	12	&
FIELD	233:23	233:27	11	sp -> sPicture
LEAF_NODE	233:23	233:23	12	sp
LEAF_NODE	233:25	233:25	12	->
LEAF_NODE	233:27	233:27	12	sPicture
LEAF_NODE	233:35	233:35	9	)
LEAF_NODE	233:36	233:36	7	;
SELECTION	234:6	234:31	6	
KEYWORD	234:6	234:6	7	if
LEAF_NODE	234:6	234:6	8	if
LEAF_NODE	234:9	234:9	7	(
CONDITION	234:10	234:10	7	sp -> pBuffer != NULL
EXPR	234:10	234:25	8	sp -> pBuffer != NULL
FIELD	234:10	234:14	9	sp -> pBuffer
LEAF_NODE	234:10	234:10	10	sp
LEAF_NODE	234:12	234:12	10	->
LEAF_NODE	234:14	234:14	10	pBuffer
EQ_OPERATOR	234:22	234:22	9	!=
LEAF_NODE	234:22	234:22	10	!=
FIELD	234:25	234:25	9	NULL
LEAF_NODE	234:25	234:25	10	NULL
LEAF_NODE	234:29	234:29	7	)
STATEMENTS	234:31	237:6	7	
LEAF_NODE	234:31	234:31	8	{
STATEMENTS	235:8	236:8	8	
EXPR_STATEMENT	235:8	235:30	9	_TIFFfree ( sp -> pBuffer ) ;
EXPR	235:8	235:8	10	_TIFFfree ( sp -> pBuffer )
FUNCTION_CALL	235:8	235:29	11	_TIFFfree ( sp -> pBuffer )
CALLEE	235:8	235:8	12	_TIFFfree
LEAF_NODE	235:8	235:8	13	_TIFFfree
LEAF_NODE	235:17	235:17	12	(
ARGUMENT	235:18	235:18	12	sp -> pBuffer
FIELD	235:18	235:22	13	sp -> pBuffer
LEAF_NODE	235:18	235:18	14	sp
LEAF_NODE	235:20	235:20	14	->
LEAF_NODE	235:22	235:22	14	pBuffer
LEAF_NODE	235:29	235:29	12	)
LEAF_NODE	235:30	235:30	10	;
EXPR_STATEMENT	236:8	236:26	9	sp -> pBuffer = NULL ;
EXPR	236:8	236:8	10	sp -> pBuffer = NULL
ASSIGN	236:8	236:22	11	sp -> pBuffer = NULL
LVAL	236:8	236:8	12	sp -> pBuffer
FIELD	236:8	236:12	13	sp -> pBuffer
LEAF_NODE	236:8	236:8	14	sp
LEAF_NODE	236:10	236:10	14	->
LEAF_NODE	236:12	236:12	14	pBuffer
ASSIGN_OP	236:20	236:20	12	=
LEAF_NODE	236:20	236:20	13	=
RVAL	236:22	236:22	12	NULL
FIELD	236:22	236:22	13	NULL
LEAF_NODE	236:22	236:22	14	NULL
LEAF_NODE	236:26	236:26	10	;
LEAF_NODE	237:6	237:6	8	}
EXPR_STATEMENT	238:6	238:27	6	sp -> buffer_offset = 0 ;
EXPR	238:6	238:6	7	sp -> buffer_offset = 0
ASSIGN	238:6	238:26	8	sp -> buffer_offset = 0
LVAL	238:6	238:6	9	sp -> buffer_offset
FIELD	238:6	238:10	10	sp -> buffer_offset
LEAF_NODE	238:6	238:6	11	sp
LEAF_NODE	238:8	238:8	11	->
LEAF_NODE	238:10	238:10	11	buffer_offset
ASSIGN_OP	238:24	238:24	9	=
LEAF_NODE	238:24	238:24	10	=
RVAL	238:26	238:26	9	0
FIELD	238:26	238:26	10	0
LEAF_NODE	238:26	238:26	11	0
LEAF_NODE	238:27	238:27	7	;
EXPR_STATEMENT	239:6	239:19	6	sp -> state = 0 ;
EXPR	239:6	239:6	7	sp -> state = 0
ASSIGN	239:6	239:18	8	sp -> state = 0
LVAL	239:6	239:6	9	sp -> state
FIELD	239:6	239:10	10	sp -> state
LEAF_NODE	239:6	239:6	11	sp
LEAF_NODE	239:8	239:8	11	->
LEAF_NODE	239:10	239:10	11	state
ASSIGN_OP	239:16	239:16	9	=
LEAF_NODE	239:16	239:16	10	=
RVAL	239:18	239:18	9	0
FIELD	239:18	239:18	10	0
LEAF_NODE	239:18	239:18	11	0
LEAF_NODE	239:19	239:19	7	;
LEAF_NODE	240:2	240:2	5	}
EXPR_STATEMENT	242:2	242:33	3	sp -> state |= LSTATE_INIT_DECODE ;
EXPR	242:2	242:2	4	sp -> state |= LSTATE_INIT_DECODE
ASSIGN	242:2	242:15	5	sp -> state |= LSTATE_INIT_DECODE
LVAL	242:2	242:2	6	sp -> state
FIELD	242:2	242:6	7	sp -> state
LEAF_NODE	242:2	242:2	8	sp
LEAF_NODE	242:4	242:4	8	->
LEAF_NODE	242:6	242:6	8	state
ASSIGN_OP	242:12	242:12	6	|=
LEAF_NODE	242:12	242:12	7	|=
RVAL	242:15	242:15	6	LSTATE_INIT_DECODE
FIELD	242:15	242:15	7	LSTATE_INIT_DECODE
LEAF_NODE	242:15	242:15	8	LSTATE_INIT_DECODE
LEAF_NODE	242:33	242:33	4	;
JUMP_STATEMENT	244:2	244:10	3	return 1 ;
KEYWORD	244:2	244:2	4	return
LEAF_NODE	244:2	244:2	5	return
DESTINATION	244:9	244:9	4	1
EXPR	244:9	244:9	5	1
FIELD	244:9	244:9	6	1
LEAF_NODE	244:9	244:9	7	1
LEAF_NODE	244:10	244:10	4	;
LEAF_NODE	245:0	245:0	2	}
FUNCTION_DEF	250:0	304:0	1	
RETURN_TYPE	250:0	250:7	2	static int
LEAF_NODE	250:0	250:0	3	static
TYPE_NAME	250:7	250:7	3	int
LEAF_NODE	250:7	250:7	4	int
FUNCTION_NAME	251:0	251:0	2	TWebPPreDecode
LEAF_NODE	251:0	251:0	3	TWebPPreDecode
PARAMETER_LIST	251:14	251:34	2	( TIFF * tif , uint16 s )
LEAF_NODE	251:14	251:14	3	(
PARAMETER_DECL	251:15	251:21	3	TIFF * tif
TYPE	251:15	251:19	4	TIFF *
TYPE_NAME	251:15	251:15	5	TIFF
LEAF_NODE	251:15	251:15	6	TIFF
POINTER	251:19	251:19	5	*
LEAF_NODE	251:19	251:19	6	*
NAME	251:21	251:21	4	tif
LEAF_NODE	251:21	251:21	5	tif
LEAF_NODE	251:24	251:24	3	,
PARAMETER_DECL	251:26	251:33	3	uint16 s
TYPE	251:26	251:26	4	uint16
TYPE_NAME	251:26	251:26	5	uint16
LEAF_NODE	251:26	251:26	6	uint16
NAME	251:33	251:33	4	s
LEAF_NODE	251:33	251:33	5	s
LEAF_NODE	251:34	251:34	3	)
LEAF_NODE	252:0	252:0	2	{
STATEMENTS	253:2	303:2	2	
LEAF_NODE	253:2	253:2	3	static
SIMPLE_DECL	253:9	253:47	3	const char [ ] module ; module = "TWebPPreDecode" ;
VAR_DECL	253:9	253:20	4	const char [ ] module ; module = "TWebPPreDecode"
TYPE	253:9	253:26	5	const char [ ]
TYPE_NAME	253:9	253:15	6	const char
LEAF_NODE	253:9	253:9	7	const
LEAF_NODE	253:15	253:15	7	char
TYPE_SUFFIX	253:26	253:27	6	[ ]
LEAF_NODE	253:26	253:26	7	[
LEAF_NODE	253:27	253:27	7	]
NAME	253:20	253:20	5	module
LEAF_NODE	253:20	253:20	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	253:20	253:20	5	module = "TWebPPreDecode"
ASSIGN	253:20	253:31	6	module = "TWebPPreDecode"
LVAL	253:20	253:20	7	module
NAME	253:20	253:20	8	module
LEAF_NODE	253:20	253:20	9	module
ASSIGN_OP	253:29	253:29	7	=
LEAF_NODE	253:29	253:29	8	=
RVAL	253:31	253:31	7	"TWebPPreDecode"
FIELD	253:31	253:31	8	"TWebPPreDecode"
LEAF_NODE	253:31	253:31	9	"TWebPPreDecode"
LEAF_NODE	253:47	253:47	4	;
SIMPLE_DECL	254:2	254:38	3	uint32 segment_width , uint32 segment_height ;
INIT_DECL_LIST	254:2	254:2	4	uint32 segment_width , uint32 segment_height
VAR_DECL	254:2	254:9	5	uint32 segment_width
TYPE	254:2	254:2	6	uint32
TYPE_NAME	254:2	254:2	7	uint32
LEAF_NODE	254:2	254:2	8	uint32
NAME	254:9	254:9	6	segment_width
LEAF_NODE	254:9	254:9	7	segment_width
LEAF_NODE	254:22	254:22	5	,
VAR_DECL	254:2	254:24	5	uint32 segment_height
TYPE	254:2	254:2	6	uint32
TYPE_NAME	254:2	254:2	7	uint32
LEAF_NODE	254:2	254:2	8	uint32
NAME	254:24	254:24	6	segment_height
LEAF_NODE	254:24	254:24	7	segment_height
LEAF_NODE	254:38	254:38	4	;
SIMPLE_DECL	255:2	255:35	3	WebPState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	255:2	255:13	4	WebPState * sp ; sp = DecoderState ( tif )
TYPE	255:2	255:11	5	WebPState *
TYPE_NAME	255:2	255:2	6	WebPState
LEAF_NODE	255:2	255:2	7	WebPState
POINTER	255:11	255:11	6	*
LEAF_NODE	255:11	255:11	7	*
NAME	255:13	255:13	5	sp
LEAF_NODE	255:13	255:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	255:13	255:13	5	sp = DecoderState ( tif )
ASSIGN	255:13	255:18	6	sp = DecoderState ( tif )
LVAL	255:13	255:13	7	sp
NAME	255:13	255:13	8	sp
LEAF_NODE	255:13	255:13	9	sp
ASSIGN_OP	255:16	255:16	7	=
LEAF_NODE	255:16	255:16	8	=
RVAL	255:18	255:18	7	DecoderState ( tif )
FUNCTION_CALL	255:18	255:34	8	DecoderState ( tif )
CALLEE	255:18	255:18	9	DecoderState
LEAF_NODE	255:18	255:18	10	DecoderState
LEAF_NODE	255:30	255:30	9	(
ARGUMENT	255:31	255:31	9	tif
FIELD	255:31	255:31	10	tif
LEAF_NODE	255:31	255:31	11	tif
LEAF_NODE	255:34	255:34	9	)
LEAF_NODE	255:35	255:35	4	;
SIMPLE_DECL	256:2	256:35	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	256:2	256:17	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	256:2	256:15	5	TIFFDirectory *
TYPE_NAME	256:2	256:2	6	TIFFDirectory
LEAF_NODE	256:2	256:2	7	TIFFDirectory
POINTER	256:15	256:15	6	*
LEAF_NODE	256:15	256:15	7	*
NAME	256:17	256:17	5	td
LEAF_NODE	256:17	256:17	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	256:17	256:17	5	td = & tif -> tif_dir
ASSIGN	256:17	256:22	6	td = & tif -> tif_dir
LVAL	256:17	256:17	7	td
NAME	256:17	256:17	8	td
LEAF_NODE	256:17	256:17	9	td
ASSIGN_OP	256:20	256:20	7	=
LEAF_NODE	256:20	256:20	8	=
RVAL	256:22	256:22	7	& tif -> tif_dir
UNARY_EXPR	256:22	256:23	8	& tif -> tif_dir
UNARY_OPERATOR	256:22	256:22	9	&
LEAF_NODE	256:22	256:22	10	&
FIELD	256:23	256:28	9	tif -> tif_dir
LEAF_NODE	256:23	256:23	10	tif
LEAF_NODE	256:26	256:26	10	->
LEAF_NODE	256:28	256:28	10	tif_dir
LEAF_NODE	256:35	256:35	4	;
EXPR_STATEMENT	257:2	257:10	3	( void ) s ;
EXPR	257:2	257:9	4	( void ) s
LEAF_NODE	257:2	257:2	5	(
TYPE_NAME	257:3	257:3	5	void
LEAF_NODE	257:3	257:3	6	void
LEAF_NODE	257:7	257:7	5	)
FIELD	257:9	257:9	5	s
LEAF_NODE	257:9	257:9	6	s
LEAF_NODE	257:10	257:10	4	;
EXPR_STATEMENT	258:2	258:20	3	assert ( sp != NULL ) ;
EXPR	258:2	258:2	4	assert ( sp != NULL )
FUNCTION_CALL	258:2	258:19	5	assert ( sp != NULL )
CALLEE	258:2	258:2	6	assert
LEAF_NODE	258:2	258:2	7	assert
LEAF_NODE	258:8	258:8	6	(
ARGUMENT	258:9	258:15	6	sp != NULL
FIELD	258:9	258:9	7	sp
LEAF_NODE	258:9	258:9	8	sp
EQ_OPERATOR	258:12	258:12	7	!=
LEAF_NODE	258:12	258:12	8	!=
FIELD	258:15	258:15	7	NULL
LEAF_NODE	258:15	258:15	8	NULL
LEAF_NODE	258:19	258:19	6	)
LEAF_NODE	258:20	258:20	4	;
SELECTION	260:2	260:20	3	
KEYWORD	260:2	260:2	4	if
LEAF_NODE	260:2	260:2	5	if
LEAF_NODE	260:5	260:5	4	(
CONDITION	260:6	260:6	4	isTiled ( tif )
EXPR	260:6	260:6	5	isTiled ( tif )
FUNCTION_CALL	260:6	260:17	6	isTiled ( tif )
CALLEE	260:6	260:6	7	isTiled
LEAF_NODE	260:6	260:6	8	isTiled
LEAF_NODE	260:13	260:13	7	(
ARGUMENT	260:14	260:14	7	tif
FIELD	260:14	260:14	8	tif
LEAF_NODE	260:14	260:14	9	tif
LEAF_NODE	260:17	260:17	7	)
LEAF_NODE	260:18	260:18	4	)
STATEMENTS	260:20	263:2	4	
LEAF_NODE	260:20	260:20	5	{
STATEMENTS	261:4	262:4	5	
EXPR_STATEMENT	261:4	261:36	6	segment_width = td -> td_tilewidth ;
EXPR	261:4	261:4	7	segment_width = td -> td_tilewidth
ASSIGN	261:4	261:20	8	segment_width = td -> td_tilewidth
LVAL	261:4	261:4	9	segment_width
FIELD	261:4	261:4	10	segment_width
LEAF_NODE	261:4	261:4	11	segment_width
ASSIGN_OP	261:18	261:18	9	=
LEAF_NODE	261:18	261:18	10	=
RVAL	261:20	261:20	9	td -> td_tilewidth
FIELD	261:20	261:24	10	td -> td_tilewidth
LEAF_NODE	261:20	261:20	11	td
LEAF_NODE	261:22	261:22	11	->
LEAF_NODE	261:24	261:24	11	td_tilewidth
LEAF_NODE	261:36	261:36	7	;
EXPR_STATEMENT	262:4	262:38	6	segment_height = td -> td_tilelength ;
EXPR	262:4	262:4	7	segment_height = td -> td_tilelength
ASSIGN	262:4	262:21	8	segment_height = td -> td_tilelength
LVAL	262:4	262:4	9	segment_height
FIELD	262:4	262:4	10	segment_height
LEAF_NODE	262:4	262:4	11	segment_height
ASSIGN_OP	262:19	262:19	9	=
LEAF_NODE	262:19	262:19	10	=
RVAL	262:21	262:21	9	td -> td_tilelength
FIELD	262:21	262:25	10	td -> td_tilelength
LEAF_NODE	262:21	262:21	11	td
LEAF_NODE	262:23	262:23	11	->
LEAF_NODE	262:25	262:25	11	td_tilelength
LEAF_NODE	262:38	262:38	7	;
LEAF_NODE	263:2	263:2	5	}
SELECTION	263:4	263:9	3	
KEYWORD	263:4	263:4	4	else
LEAF_NODE	263:4	263:4	5	else
STATEMENTS	263:9	268:2	4	
LEAF_NODE	263:9	263:9	5	{
STATEMENTS	264:4	266:4	5	
EXPR_STATEMENT	264:4	264:37	6	segment_width = td -> td_imagewidth ;
EXPR	264:4	264:4	7	segment_width = td -> td_imagewidth
ASSIGN	264:4	264:20	8	segment_width = td -> td_imagewidth
LVAL	264:4	264:4	9	segment_width
FIELD	264:4	264:4	10	segment_width
LEAF_NODE	264:4	264:4	11	segment_width
ASSIGN_OP	264:18	264:18	9	=
LEAF_NODE	264:18	264:18	10	=
RVAL	264:20	264:20	9	td -> td_imagewidth
FIELD	264:20	264:24	10	td -> td_imagewidth
LEAF_NODE	264:20	264:20	11	td
LEAF_NODE	264:22	264:22	11	->
LEAF_NODE	264:24	264:24	11	td_imagewidth
LEAF_NODE	264:37	264:37	7	;
EXPR_STATEMENT	265:4	265:54	6	segment_height = td -> td_imagelength - tif -> tif_row ;
EXPR	265:4	265:4	7	segment_height = td -> td_imagelength - tif -> tif_row
ASSIGN	265:4	265:21	8	segment_height = td -> td_imagelength - tif -> tif_row
LVAL	265:4	265:4	9	segment_height
FIELD	265:4	265:4	10	segment_height
LEAF_NODE	265:4	265:4	11	segment_height
ASSIGN_OP	265:19	265:19	9	=
LEAF_NODE	265:19	265:19	10	=
RVAL	265:21	265:42	9	td -> td_imagelength - tif -> tif_row
FIELD	265:21	265:25	10	td -> td_imagelength
LEAF_NODE	265:21	265:21	11	td
LEAF_NODE	265:23	265:23	11	->
LEAF_NODE	265:25	265:25	11	td_imagelength
LEAF_NODE	265:40	265:40	10	-
FIELD	265:42	265:47	10	tif -> tif_row
LEAF_NODE	265:42	265:42	11	tif
LEAF_NODE	265:45	265:45	11	->
LEAF_NODE	265:47	265:47	11	tif_row
LEAF_NODE	265:54	265:54	7	;
SELECTION	266:4	267:6	6	
KEYWORD	266:4	266:4	7	if
LEAF_NODE	266:4	266:4	8	if
LEAF_NODE	266:7	266:7	7	(
CONDITION	266:8	266:8	7	segment_height > td -> td_rowsperstrip
EXPR	266:8	266:25	8	segment_height > td -> td_rowsperstrip
FIELD	266:8	266:8	9	segment_height
LEAF_NODE	266:8	266:8	10	segment_height
REL_OPERATOR	266:23	266:23	9	>
LEAF_NODE	266:23	266:23	10	>
FIELD	266:25	266:29	9	td -> td_rowsperstrip
LEAF_NODE	266:25	266:25	10	td
LEAF_NODE	266:27	266:27	10	->
LEAF_NODE	266:29	266:29	10	td_rowsperstrip
LEAF_NODE	266:44	266:44	7	)
STATEMENTS	267:6	267:6	7	
EXPR_STATEMENT	267:6	267:42	8	segment_height = td -> td_rowsperstrip ;
EXPR	267:6	267:6	9	segment_height = td -> td_rowsperstrip
ASSIGN	267:6	267:23	10	segment_height = td -> td_rowsperstrip
LVAL	267:6	267:6	11	segment_height
FIELD	267:6	267:6	12	segment_height
LEAF_NODE	267:6	267:6	13	segment_height
ASSIGN_OP	267:21	267:21	11	=
LEAF_NODE	267:21	267:21	12	=
RVAL	267:23	267:23	11	td -> td_rowsperstrip
FIELD	267:23	267:27	12	td -> td_rowsperstrip
LEAF_NODE	267:23	267:23	13	td
LEAF_NODE	267:25	267:25	13	->
LEAF_NODE	267:27	267:27	13	td_rowsperstrip
LEAF_NODE	267:42	267:42	9	;
LEAF_NODE	268:2	268:2	5	}
SELECTION	270:2	271:6	3	
KEYWORD	270:2	270:2	4	if
LEAF_NODE	270:2	270:2	5	if
LEAF_NODE	270:4	270:4	4	(
CONDITION	270:6	270:6	4	( sp -> state & LSTATE_INIT_DECODE ) == 0
EXPR	270:6	270:42	5	( sp -> state & LSTATE_INIT_DECODE ) == 0
LEAF_NODE	270:6	270:6	6	(
FIELD	270:7	270:11	6	sp -> state
LEAF_NODE	270:7	270:7	7	sp
LEAF_NODE	270:9	270:9	7	->
LEAF_NODE	270:11	270:11	7	state
LEAF_NODE	270:17	270:17	6	&
FIELD	270:19	270:19	6	LSTATE_INIT_DECODE
LEAF_NODE	270:19	270:19	7	LSTATE_INIT_DECODE
LEAF_NODE	270:37	270:37	6	)
EQ_OPERATOR	270:39	270:39	6	==
LEAF_NODE	270:39	270:39	7	==
FIELD	270:42	270:42	6	0
LEAF_NODE	270:42	270:42	7	0
LEAF_NODE	270:44	270:44	4	)
STATEMENTS	271:6	271:6	4	
EXPR_STATEMENT	271:6	271:31	5	tif -> tif_setupdecode ( tif ) ;
EXPR	271:6	271:6	6	tif -> tif_setupdecode ( tif )
FUNCTION_CALL	271:6	271:30	7	tif -> tif_setupdecode ( tif )
CALLEE	271:6	271:11	8	tif -> tif_setupdecode
LEAF_NODE	271:6	271:6	9	tif
LEAF_NODE	271:9	271:9	9	->
LEAF_NODE	271:11	271:11	9	tif_setupdecode
LEAF_NODE	271:26	271:26	8	(
ARGUMENT	271:27	271:27	8	tif
FIELD	271:27	271:27	9	tif
LEAF_NODE	271:27	271:27	10	tif
LEAF_NODE	271:30	271:30	8	)
LEAF_NODE	271:31	271:31	6	;
SELECTION	273:2	273:29	3	
KEYWORD	273:2	273:2	4	if
LEAF_NODE	273:2	273:2	5	if
LEAF_NODE	273:5	273:5	4	(
CONDITION	273:6	273:6	4	sp -> psDecoder != NULL
EXPR	273:6	273:23	5	sp -> psDecoder != NULL
FIELD	273:6	273:10	6	sp -> psDecoder
LEAF_NODE	273:6	273:6	7	sp
LEAF_NODE	273:8	273:8	7	->
LEAF_NODE	273:10	273:10	7	psDecoder
EQ_OPERATOR	273:20	273:20	6	!=
LEAF_NODE	273:20	273:20	7	!=
FIELD	273:23	273:23	6	NULL
LEAF_NODE	273:23	273:23	7	NULL
LEAF_NODE	273:27	273:27	4	)
STATEMENTS	273:29	277:2	4	
LEAF_NODE	273:29	273:29	5	{
STATEMENTS	274:4	276:4	5	
EXPR_STATEMENT	274:4	274:30	6	WebPIDelete ( sp -> psDecoder ) ;
EXPR	274:4	274:4	7	WebPIDelete ( sp -> psDecoder )
FUNCTION_CALL	274:4	274:29	8	WebPIDelete ( sp -> psDecoder )
CALLEE	274:4	274:4	9	WebPIDelete
LEAF_NODE	274:4	274:4	10	WebPIDelete
LEAF_NODE	274:15	274:15	9	(
ARGUMENT	274:16	274:16	9	sp -> psDecoder
FIELD	274:16	274:20	10	sp -> psDecoder
LEAF_NODE	274:16	274:16	11	sp
LEAF_NODE	274:18	274:18	11	->
LEAF_NODE	274:20	274:20	11	psDecoder
LEAF_NODE	274:29	274:29	9	)
LEAF_NODE	274:30	274:30	7	;
EXPR_STATEMENT	275:4	275:38	6	WebPFreeDecBuffer ( & sp -> sDecBuffer ) ;
EXPR	275:4	275:4	7	WebPFreeDecBuffer ( & sp -> sDecBuffer )
FUNCTION_CALL	275:4	275:37	8	WebPFreeDecBuffer ( & sp -> sDecBuffer )
CALLEE	275:4	275:4	9	WebPFreeDecBuffer
LEAF_NODE	275:4	275:4	10	WebPFreeDecBuffer
LEAF_NODE	275:21	275:21	9	(
ARGUMENT	275:22	275:22	9	& sp -> sDecBuffer
UNARY_EXPR	275:22	275:23	10	& sp -> sDecBuffer
UNARY_OPERATOR	275:22	275:22	11	&
LEAF_NODE	275:22	275:22	12	&
FIELD	275:23	275:27	11	sp -> sDecBuffer
LEAF_NODE	275:23	275:23	12	sp
LEAF_NODE	275:25	275:25	12	->
LEAF_NODE	275:27	275:27	12	sDecBuffer
LEAF_NODE	275:37	275:37	9	)
LEAF_NODE	275:38	275:38	7	;
EXPR_STATEMENT	276:4	276:24	6	sp -> psDecoder = NULL ;
EXPR	276:4	276:4	7	sp -> psDecoder = NULL
ASSIGN	276:4	276:20	8	sp -> psDecoder = NULL
LVAL	276:4	276:4	9	sp -> psDecoder
FIELD	276:4	276:8	10	sp -> psDecoder
LEAF_NODE	276:4	276:4	11	sp
LEAF_NODE	276:6	276:6	11	->
LEAF_NODE	276:8	276:8	11	psDecoder
ASSIGN_OP	276:18	276:18	9	=
LEAF_NODE	276:18	276:18	10	=
RVAL	276:20	276:20	9	NULL
FIELD	276:20	276:20	10	NULL
LEAF_NODE	276:20	276:20	11	NULL
LEAF_NODE	276:24	276:24	7	;
LEAF_NODE	277:2	277:2	5	}
EXPR_STATEMENT	279:2	279:16	3	sp -> last_y = 0 ;
EXPR	279:2	279:2	4	sp -> last_y = 0
ASSIGN	279:2	279:15	5	sp -> last_y = 0
LVAL	279:2	279:2	6	sp -> last_y
FIELD	279:2	279:6	7	sp -> last_y
LEAF_NODE	279:2	279:2	8	sp
LEAF_NODE	279:4	279:4	8	->
LEAF_NODE	279:6	279:6	8	last_y
ASSIGN_OP	279:13	279:13	6	=
LEAF_NODE	279:13	279:13	7	=
RVAL	279:15	279:15	6	0
FIELD	279:15	279:15	7	0
LEAF_NODE	279:15	279:15	8	0
LEAF_NODE	279:16	279:16	4	;
EXPR_STATEMENT	281:2	281:36	3	WebPInitDecBuffer ( & sp -> sDecBuffer ) ;
EXPR	281:2	281:2	4	WebPInitDecBuffer ( & sp -> sDecBuffer )
FUNCTION_CALL	281:2	281:35	5	WebPInitDecBuffer ( & sp -> sDecBuffer )
CALLEE	281:2	281:2	6	WebPInitDecBuffer
LEAF_NODE	281:2	281:2	7	WebPInitDecBuffer
LEAF_NODE	281:19	281:19	6	(
ARGUMENT	281:20	281:20	6	& sp -> sDecBuffer
UNARY_EXPR	281:20	281:21	7	& sp -> sDecBuffer
UNARY_OPERATOR	281:20	281:20	8	&
LEAF_NODE	281:20	281:20	9	&
FIELD	281:21	281:25	8	sp -> sDecBuffer
LEAF_NODE	281:21	281:21	9	sp
LEAF_NODE	281:23	281:23	9	->
LEAF_NODE	281:25	281:25	9	sDecBuffer
LEAF_NODE	281:35	281:35	6	)
LEAF_NODE	281:36	281:36	4	;
EXPR_STATEMENT	283:2	283:39	3	sp -> sDecBuffer . is_external_memory = 0 ;
EXPR	283:2	283:2	4	sp -> sDecBuffer . is_external_memory = 0
ASSIGN	283:2	283:38	5	sp -> sDecBuffer . is_external_memory = 0
LVAL	283:2	283:2	6	sp -> sDecBuffer . is_external_memory
FIELD	283:2	283:17	7	sp -> sDecBuffer . is_external_memory
LEAF_NODE	283:2	283:2	8	sp
LEAF_NODE	283:4	283:4	8	->
LEAF_NODE	283:6	283:6	8	sDecBuffer
LEAF_NODE	283:16	283:16	8	.
LEAF_NODE	283:17	283:17	8	is_external_memory
ASSIGN_OP	283:36	283:36	6	=
LEAF_NODE	283:36	283:36	7	=
RVAL	283:38	283:38	6	0
FIELD	283:38	283:38	7	0
LEAF_NODE	283:38	283:38	8	0
LEAF_NODE	283:39	283:39	4	;
EXPR_STATEMENT	284:2	284:38	3	sp -> sDecBuffer . width = segment_width ;
EXPR	284:2	284:2	4	sp -> sDecBuffer . width = segment_width
ASSIGN	284:2	284:25	5	sp -> sDecBuffer . width = segment_width
LVAL	284:2	284:2	6	sp -> sDecBuffer . width
FIELD	284:2	284:17	7	sp -> sDecBuffer . width
LEAF_NODE	284:2	284:2	8	sp
LEAF_NODE	284:4	284:4	8	->
LEAF_NODE	284:6	284:6	8	sDecBuffer
LEAF_NODE	284:16	284:16	8	.
LEAF_NODE	284:17	284:17	8	width
ASSIGN_OP	284:23	284:23	6	=
LEAF_NODE	284:23	284:23	7	=
RVAL	284:25	284:25	6	segment_width
FIELD	284:25	284:25	7	segment_width
LEAF_NODE	284:25	284:25	8	segment_width
LEAF_NODE	284:38	284:38	4	;
EXPR_STATEMENT	285:2	285:40	3	sp -> sDecBuffer . height = segment_height ;
EXPR	285:2	285:2	4	sp -> sDecBuffer . height = segment_height
ASSIGN	285:2	285:26	5	sp -> sDecBuffer . height = segment_height
LVAL	285:2	285:2	6	sp -> sDecBuffer . height
FIELD	285:2	285:17	7	sp -> sDecBuffer . height
LEAF_NODE	285:2	285:2	8	sp
LEAF_NODE	285:4	285:4	8	->
LEAF_NODE	285:6	285:6	8	sDecBuffer
LEAF_NODE	285:16	285:16	8	.
LEAF_NODE	285:17	285:17	8	height
ASSIGN_OP	285:24	285:24	6	=
LEAF_NODE	285:24	285:24	7	=
RVAL	285:26	285:26	6	segment_height
FIELD	285:26	285:26	7	segment_height
LEAF_NODE	285:26	285:26	8	segment_height
LEAF_NODE	285:40	285:40	4	;
EXPR_STATEMENT	286:2	286:61	3	sp -> sDecBuffer . u . RGBA . stride = segment_width * sp -> nSamples ;
EXPR	286:2	286:2	4	sp -> sDecBuffer . u . RGBA . stride = segment_width * sp -> nSamples
ASSIGN	286:2	286:33	5	sp -> sDecBuffer . u . RGBA . stride = segment_width * sp -> nSamples
LVAL	286:2	286:2	6	sp -> sDecBuffer . u . RGBA . stride
FIELD	286:2	286:24	7	sp -> sDecBuffer . u . RGBA . stride
LEAF_NODE	286:2	286:2	8	sp
LEAF_NODE	286:4	286:4	8	->
LEAF_NODE	286:6	286:6	8	sDecBuffer
LEAF_NODE	286:16	286:16	8	.
LEAF_NODE	286:17	286:17	8	u
LEAF_NODE	286:18	286:18	8	.
LEAF_NODE	286:19	286:19	8	RGBA
LEAF_NODE	286:23	286:23	8	.
LEAF_NODE	286:24	286:24	8	stride
ASSIGN_OP	286:31	286:31	6	=
LEAF_NODE	286:31	286:31	7	=
RVAL	286:33	286:49	6	segment_width * sp -> nSamples
FIELD	286:33	286:33	7	segment_width
LEAF_NODE	286:33	286:33	8	segment_width
LEAF_NODE	286:47	286:47	7	*
FIELD	286:49	286:53	7	sp -> nSamples
LEAF_NODE	286:49	286:49	8	sp
LEAF_NODE	286:51	286:51	8	->
LEAF_NODE	286:53	286:53	8	nSamples
LEAF_NODE	286:61	286:61	4	;
LEAF_NODE	287:2	287:2	3	sp
LEAF_NODE	287:4	287:4	3	->
LEAF_NODE	287:6	287:6	3	sDecBuffer
LEAF_NODE	287:16	287:16	3	.
LEAF_NODE	287:17	287:17	3	u
LEAF_NODE	287:18	287:18	3	.
LEAF_NODE	287:19	287:19	3	RGBA
LEAF_NODE	287:23	287:23	3	.
LEAF_NODE	287:24	287:24	3	size
LEAF_NODE	287:29	287:29	3	=
LEAF_NODE	287:31	287:31	3	segment_width
EXPR_STATEMENT	287:45	287:76	3	* sp -> nSamples * segment_height ;
EXPR	287:45	287:62	4	* sp -> nSamples * segment_height
UNARY_EXPR	287:45	287:47	5	* sp -> nSamples
UNARY_OPERATOR	287:45	287:45	6	*
LEAF_NODE	287:45	287:45	7	*
FIELD	287:47	287:51	6	sp -> nSamples
LEAF_NODE	287:47	287:47	7	sp
LEAF_NODE	287:49	287:49	7	->
LEAF_NODE	287:51	287:51	7	nSamples
LEAF_NODE	287:60	287:60	5	*
FIELD	287:62	287:62	5	segment_height
LEAF_NODE	287:62	287:62	6	segment_height
LEAF_NODE	287:76	287:76	4	;
SELECTION	289:2	289:24	3	
KEYWORD	289:2	289:2	4	if
LEAF_NODE	289:2	289:2	5	if
LEAF_NODE	289:5	289:5	4	(
CONDITION	289:6	289:6	4	sp -> nSamples > 3
EXPR	289:6	289:21	5	sp -> nSamples > 3
FIELD	289:6	289:10	6	sp -> nSamples
LEAF_NODE	289:6	289:6	7	sp
LEAF_NODE	289:8	289:8	7	->
LEAF_NODE	289:10	289:10	7	nSamples
REL_OPERATOR	289:19	289:19	6	>
LEAF_NODE	289:19	289:19	7	>
FIELD	289:21	289:21	6	3
LEAF_NODE	289:21	289:21	7	3
LEAF_NODE	289:22	289:22	4	)
STATEMENTS	289:24	291:2	4	
LEAF_NODE	289:24	289:24	5	{
STATEMENTS	290:4	290:4	5	
EXPR_STATEMENT	290:4	290:41	6	sp -> sDecBuffer . colorspace = MODE_RGBA ;
EXPR	290:4	290:4	7	sp -> sDecBuffer . colorspace = MODE_RGBA
ASSIGN	290:4	290:32	8	sp -> sDecBuffer . colorspace = MODE_RGBA
LVAL	290:4	290:4	9	sp -> sDecBuffer . colorspace
FIELD	290:4	290:19	10	sp -> sDecBuffer . colorspace
LEAF_NODE	290:4	290:4	11	sp
LEAF_NODE	290:6	290:6	11	->
LEAF_NODE	290:8	290:8	11	sDecBuffer
LEAF_NODE	290:18	290:18	11	.
LEAF_NODE	290:19	290:19	11	colorspace
ASSIGN_OP	290:30	290:30	9	=
LEAF_NODE	290:30	290:30	10	=
RVAL	290:32	290:32	9	MODE_RGBA
FIELD	290:32	290:32	10	MODE_RGBA
LEAF_NODE	290:32	290:32	11	MODE_RGBA
LEAF_NODE	290:41	290:41	7	;
LEAF_NODE	291:2	291:2	5	}
SELECTION	291:4	291:9	3	
KEYWORD	291:4	291:4	4	else
LEAF_NODE	291:4	291:4	5	else
STATEMENTS	291:9	293:2	4	
LEAF_NODE	291:9	291:9	5	{
STATEMENTS	292:4	292:4	5	
EXPR_STATEMENT	292:4	292:40	6	sp -> sDecBuffer . colorspace = MODE_RGB ;
EXPR	292:4	292:4	7	sp -> sDecBuffer . colorspace = MODE_RGB
ASSIGN	292:4	292:32	8	sp -> sDecBuffer . colorspace = MODE_RGB
LVAL	292:4	292:4	9	sp -> sDecBuffer . colorspace
FIELD	292:4	292:19	10	sp -> sDecBuffer . colorspace
LEAF_NODE	292:4	292:4	11	sp
LEAF_NODE	292:6	292:6	11	->
LEAF_NODE	292:8	292:8	11	sDecBuffer
LEAF_NODE	292:18	292:18	11	.
LEAF_NODE	292:19	292:19	11	colorspace
ASSIGN_OP	292:30	292:30	9	=
LEAF_NODE	292:30	292:30	10	=
RVAL	292:32	292:32	9	MODE_RGB
FIELD	292:32	292:32	10	MODE_RGB
LEAF_NODE	292:32	292:32	11	MODE_RGB
LEAF_NODE	292:40	292:40	7	;
LEAF_NODE	293:2	293:2	5	}
EXPR_STATEMENT	295:2	295:50	3	sp -> psDecoder = WebPINewDecoder ( & sp -> sDecBuffer ) ;
EXPR	295:2	295:2	4	sp -> psDecoder = WebPINewDecoder ( & sp -> sDecBuffer )
ASSIGN	295:2	295:18	5	sp -> psDecoder = WebPINewDecoder ( & sp -> sDecBuffer )
LVAL	295:2	295:2	6	sp -> psDecoder
FIELD	295:2	295:6	7	sp -> psDecoder
LEAF_NODE	295:2	295:2	8	sp
LEAF_NODE	295:4	295:4	8	->
LEAF_NODE	295:6	295:6	8	psDecoder
ASSIGN_OP	295:16	295:16	6	=
LEAF_NODE	295:16	295:16	7	=
RVAL	295:18	295:18	6	WebPINewDecoder ( & sp -> sDecBuffer )
FUNCTION_CALL	295:18	295:49	7	WebPINewDecoder ( & sp -> sDecBuffer )
CALLEE	295:18	295:18	8	WebPINewDecoder
LEAF_NODE	295:18	295:18	9	WebPINewDecoder
LEAF_NODE	295:33	295:33	8	(
ARGUMENT	295:34	295:34	8	& sp -> sDecBuffer
UNARY_EXPR	295:34	295:35	9	& sp -> sDecBuffer
UNARY_OPERATOR	295:34	295:34	10	&
LEAF_NODE	295:34	295:34	11	&
FIELD	295:35	295:39	10	sp -> sDecBuffer
LEAF_NODE	295:35	295:35	11	sp
LEAF_NODE	295:37	295:37	11	->
LEAF_NODE	295:39	295:39	11	sDecBuffer
LEAF_NODE	295:49	295:49	8	)
LEAF_NODE	295:50	295:50	4	;
SELECTION	297:2	297:29	3	
KEYWORD	297:2	297:2	4	if
LEAF_NODE	297:2	297:2	5	if
LEAF_NODE	297:5	297:5	4	(
CONDITION	297:6	297:6	4	sp -> psDecoder == NULL
EXPR	297:6	297:23	5	sp -> psDecoder == NULL
FIELD	297:6	297:10	6	sp -> psDecoder
LEAF_NODE	297:6	297:6	7	sp
LEAF_NODE	297:8	297:8	7	->
LEAF_NODE	297:10	297:10	7	psDecoder
EQ_OPERATOR	297:20	297:20	6	==
LEAF_NODE	297:20	297:20	7	==
FIELD	297:23	297:23	6	NULL
LEAF_NODE	297:23	297:23	7	NULL
LEAF_NODE	297:27	297:27	4	)
STATEMENTS	297:29	301:2	4	
LEAF_NODE	297:29	297:29	5	{
STATEMENTS	298:4	300:4	5	
EXPR_STATEMENT	298:4	299:51	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Unable to allocate WebP decoder." ) ;
EXPR	298:4	298:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Unable to allocate WebP decoder." )
FUNCTION_CALL	298:4	299:50	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Unable to allocate WebP decoder." )
CALLEE	298:4	298:4	9	TIFFErrorExt
LEAF_NODE	298:4	298:4	10	TIFFErrorExt
LEAF_NODE	298:16	298:16	9	(
ARGUMENT	298:17	298:17	9	tif -> tif_clientdata
FIELD	298:17	298:22	10	tif -> tif_clientdata
LEAF_NODE	298:17	298:17	11	tif
LEAF_NODE	298:20	298:20	11	->
LEAF_NODE	298:22	298:22	11	tif_clientdata
LEAF_NODE	298:36	298:36	9	,
ARGUMENT	298:38	298:38	9	module
FIELD	298:38	298:38	10	module
LEAF_NODE	298:38	298:38	11	module
LEAF_NODE	298:44	298:44	9	,
ARGUMENT	299:16	299:16	9	"Unable to allocate WebP decoder."
FIELD	299:16	299:16	10	"Unable to allocate WebP decoder."
LEAF_NODE	299:16	299:16	11	"Unable to allocate WebP decoder."
LEAF_NODE	299:50	299:50	9	)
LEAF_NODE	299:51	299:51	7	;
JUMP_STATEMENT	300:4	300:12	6	return 0 ;
KEYWORD	300:4	300:4	7	return
LEAF_NODE	300:4	300:4	8	return
DESTINATION	300:11	300:11	7	0
EXPR	300:11	300:11	8	0
FIELD	300:11	300:11	9	0
LEAF_NODE	300:11	300:11	10	0
LEAF_NODE	300:12	300:12	7	;
LEAF_NODE	301:2	301:2	5	}
JUMP_STATEMENT	303:2	303:10	3	return 1 ;
KEYWORD	303:2	303:2	4	return
LEAF_NODE	303:2	303:2	5	return
DESTINATION	303:9	303:9	4	1
EXPR	303:9	303:9	5	1
FIELD	303:9	303:9	6	1
LEAF_NODE	303:9	303:9	7	1
LEAF_NODE	303:10	303:10	4	;
LEAF_NODE	304:0	304:0	2	}
FUNCTION_DEF	306:0	381:0	1	
RETURN_TYPE	306:0	306:7	2	static int
LEAF_NODE	306:0	306:0	3	static
TYPE_NAME	306:7	306:7	3	int
LEAF_NODE	306:7	306:7	4	int
FUNCTION_NAME	307:0	307:0	2	TWebPSetupEncode
LEAF_NODE	307:0	307:0	3	TWebPSetupEncode
PARAMETER_LIST	307:16	307:26	2	( TIFF * tif )
LEAF_NODE	307:16	307:16	3	(
PARAMETER_DECL	307:17	307:23	3	TIFF * tif
TYPE	307:17	307:21	4	TIFF *
TYPE_NAME	307:17	307:17	5	TIFF
LEAF_NODE	307:17	307:17	6	TIFF
POINTER	307:21	307:21	5	*
LEAF_NODE	307:21	307:21	6	*
NAME	307:23	307:23	4	tif
LEAF_NODE	307:23	307:23	5	tif
LEAF_NODE	307:26	307:26	3	)
LEAF_NODE	308:0	308:0	2	{
STATEMENTS	309:2	380:2	2	
LEAF_NODE	309:2	309:2	3	static
SIMPLE_DECL	309:9	309:48	3	const char [ ] module ; module = "WebPSetupEncode" ;
VAR_DECL	309:9	309:20	4	const char [ ] module ; module = "WebPSetupEncode"
TYPE	309:9	309:26	5	const char [ ]
TYPE_NAME	309:9	309:15	6	const char
LEAF_NODE	309:9	309:9	7	const
LEAF_NODE	309:15	309:15	7	char
TYPE_SUFFIX	309:26	309:27	6	[ ]
LEAF_NODE	309:26	309:26	7	[
LEAF_NODE	309:27	309:27	7	]
NAME	309:20	309:20	5	module
LEAF_NODE	309:20	309:20	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	309:20	309:20	5	module = "WebPSetupEncode"
ASSIGN	309:20	309:31	6	module = "WebPSetupEncode"
LVAL	309:20	309:20	7	module
NAME	309:20	309:20	8	module
LEAF_NODE	309:20	309:20	9	module
ASSIGN_OP	309:29	309:29	7	=
LEAF_NODE	309:29	309:29	8	=
RVAL	309:31	309:31	7	"WebPSetupEncode"
FIELD	309:31	309:31	8	"WebPSetupEncode"
LEAF_NODE	309:31	309:31	9	"WebPSetupEncode"
LEAF_NODE	309:48	309:48	4	;
SIMPLE_DECL	310:2	310:55	3	uint16 nBitsPerSample ; nBitsPerSample = tif -> tif_dir . td_bitspersample ;
VAR_DECL	310:2	310:9	4	uint16 nBitsPerSample ; nBitsPerSample = tif -> tif_dir . td_bitspersample
TYPE	310:2	310:2	5	uint16
TYPE_NAME	310:2	310:2	6	uint16
LEAF_NODE	310:2	310:2	7	uint16
NAME	310:9	310:9	5	nBitsPerSample
LEAF_NODE	310:9	310:9	6	nBitsPerSample
LEAF_NODE	0:0	0:0	5	;
INIT	310:9	310:9	5	nBitsPerSample = tif -> tif_dir . td_bitspersample
ASSIGN	310:9	310:26	6	nBitsPerSample = tif -> tif_dir . td_bitspersample
LVAL	310:9	310:9	7	nBitsPerSample
NAME	310:9	310:9	8	nBitsPerSample
LEAF_NODE	310:9	310:9	9	nBitsPerSample
ASSIGN_OP	310:24	310:24	7	=
LEAF_NODE	310:24	310:24	8	=
RVAL	310:26	310:26	7	tif -> tif_dir . td_bitspersample
FIELD	310:26	310:39	8	tif -> tif_dir . td_bitspersample
LEAF_NODE	310:26	310:26	9	tif
LEAF_NODE	310:29	310:29	9	->
LEAF_NODE	310:31	310:31	9	tif_dir
LEAF_NODE	310:38	310:38	9	.
LEAF_NODE	310:39	310:39	9	td_bitspersample
LEAF_NODE	310:55	310:55	4	;
SIMPLE_DECL	311:2	311:52	3	uint16 sampleFormat ; sampleFormat = tif -> tif_dir . td_sampleformat ;
VAR_DECL	311:2	311:9	4	uint16 sampleFormat ; sampleFormat = tif -> tif_dir . td_sampleformat
TYPE	311:2	311:2	5	uint16
TYPE_NAME	311:2	311:2	6	uint16
LEAF_NODE	311:2	311:2	7	uint16
NAME	311:9	311:9	5	sampleFormat
LEAF_NODE	311:9	311:9	6	sampleFormat
LEAF_NODE	0:0	0:0	5	;
INIT	311:9	311:9	5	sampleFormat = tif -> tif_dir . td_sampleformat
ASSIGN	311:9	311:24	6	sampleFormat = tif -> tif_dir . td_sampleformat
LVAL	311:9	311:9	7	sampleFormat
NAME	311:9	311:9	8	sampleFormat
LEAF_NODE	311:9	311:9	9	sampleFormat
ASSIGN_OP	311:22	311:22	7	=
LEAF_NODE	311:22	311:22	8	=
RVAL	311:24	311:24	7	tif -> tif_dir . td_sampleformat
FIELD	311:24	311:37	8	tif -> tif_dir . td_sampleformat
LEAF_NODE	311:24	311:24	9	tif
LEAF_NODE	311:27	311:27	9	->
LEAF_NODE	311:29	311:29	9	tif_dir
LEAF_NODE	311:36	311:36	9	.
LEAF_NODE	311:37	311:37	9	td_sampleformat
LEAF_NODE	311:52	311:52	4	;
SIMPLE_DECL	313:2	313:35	3	WebPState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	313:2	313:13	4	WebPState * sp ; sp = EncoderState ( tif )
TYPE	313:2	313:11	5	WebPState *
TYPE_NAME	313:2	313:2	6	WebPState
LEAF_NODE	313:2	313:2	7	WebPState
POINTER	313:11	313:11	6	*
LEAF_NODE	313:11	313:11	7	*
NAME	313:13	313:13	5	sp
LEAF_NODE	313:13	313:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	313:13	313:13	5	sp = EncoderState ( tif )
ASSIGN	313:13	313:18	6	sp = EncoderState ( tif )
LVAL	313:13	313:13	7	sp
NAME	313:13	313:13	8	sp
LEAF_NODE	313:13	313:13	9	sp
ASSIGN_OP	313:16	313:16	7	=
LEAF_NODE	313:16	313:16	8	=
RVAL	313:18	313:18	7	EncoderState ( tif )
FUNCTION_CALL	313:18	313:34	8	EncoderState ( tif )
CALLEE	313:18	313:18	9	EncoderState
LEAF_NODE	313:18	313:18	10	EncoderState
LEAF_NODE	313:30	313:30	9	(
ARGUMENT	313:31	313:31	9	tif
FIELD	313:31	313:31	10	tif
LEAF_NODE	313:31	313:31	11	tif
LEAF_NODE	313:34	313:34	9	)
LEAF_NODE	313:35	313:35	4	;
EXPR_STATEMENT	314:2	314:20	3	assert ( sp != NULL ) ;
EXPR	314:2	314:2	4	assert ( sp != NULL )
FUNCTION_CALL	314:2	314:19	5	assert ( sp != NULL )
CALLEE	314:2	314:2	6	assert
LEAF_NODE	314:2	314:2	7	assert
LEAF_NODE	314:8	314:8	6	(
ARGUMENT	314:9	314:15	6	sp != NULL
FIELD	314:9	314:9	7	sp
LEAF_NODE	314:9	314:9	8	sp
EQ_OPERATOR	314:12	314:12	7	!=
LEAF_NODE	314:12	314:12	8	!=
FIELD	314:15	314:15	7	NULL
LEAF_NODE	314:15	314:15	8	NULL
LEAF_NODE	314:19	314:19	6	)
LEAF_NODE	314:20	314:20	4	;
EXPR_STATEMENT	316:2	316:48	3	sp -> nSamples = tif -> tif_dir . td_samplesperpixel ;
EXPR	316:2	316:2	4	sp -> nSamples = tif -> tif_dir . td_samplesperpixel
ASSIGN	316:2	316:17	5	sp -> nSamples = tif -> tif_dir . td_samplesperpixel
LVAL	316:2	316:2	6	sp -> nSamples
FIELD	316:2	316:6	7	sp -> nSamples
LEAF_NODE	316:2	316:2	8	sp
LEAF_NODE	316:4	316:4	8	->
LEAF_NODE	316:6	316:6	8	nSamples
ASSIGN_OP	316:15	316:15	6	=
LEAF_NODE	316:15	316:15	7	=
RVAL	316:17	316:17	6	tif -> tif_dir . td_samplesperpixel
FIELD	316:17	316:30	7	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	316:17	316:17	8	tif
LEAF_NODE	316:20	316:20	8	->
LEAF_NODE	316:22	316:22	8	tif_dir
LEAF_NODE	316:29	316:29	8	.
LEAF_NODE	316:30	316:30	8	td_samplesperpixel
LEAF_NODE	316:48	316:48	4	;
SELECTION	319:2	324:2	3	
KEYWORD	319:2	319:2	4	if
LEAF_NODE	319:2	319:2	5	if
LEAF_NODE	319:5	319:5	4	(
CONDITION	319:7	319:7	4	sp -> nSamples != 3 && sp -> nSamples != 4
EXPR	319:7	319:7	5	sp -> nSamples != 3 && sp -> nSamples != 4
AND	319:7	321:7	6	sp -> nSamples != 3 && sp -> nSamples != 4
EXPR	319:7	319:23	7	sp -> nSamples != 3
FIELD	319:7	319:11	8	sp -> nSamples
LEAF_NODE	319:7	319:7	9	sp
LEAF_NODE	319:9	319:9	9	->
LEAF_NODE	319:11	319:11	9	nSamples
EQ_OPERATOR	319:20	319:20	8	!=
LEAF_NODE	319:20	319:20	9	!=
FIELD	319:23	319:23	8	3
LEAF_NODE	319:23	319:23	9	3
LEAF_NODE	321:4	321:4	7	&&
EXPR	321:7	321:23	7	sp -> nSamples != 4
FIELD	321:7	321:11	8	sp -> nSamples
LEAF_NODE	321:7	321:7	9	sp
LEAF_NODE	321:9	321:9	9	->
LEAF_NODE	321:11	321:11	9	nSamples
EQ_OPERATOR	321:20	321:20	8	!=
LEAF_NODE	321:20	321:20	9	!=
FIELD	321:23	321:23	8	4
LEAF_NODE	321:23	321:23	9	4
LEAF_NODE	323:2	323:2	4	)
STATEMENTS	324:2	333:2	4	
LEAF_NODE	324:2	324:2	5	{
STATEMENTS	325:4	332:4	5	
LEAF_NODE	325:4	325:4	6	TIFFErrorExt
LEAF_NODE	325:16	325:16	6	(
LEAF_NODE	325:17	325:17	6	tif
LEAF_NODE	325:20	325:20	6	->
LEAF_NODE	325:22	325:22	6	tif_clientdata
LEAF_NODE	325:36	325:36	6	,
LEAF_NODE	325:38	325:38	6	module
LEAF_NODE	325:44	325:44	6	,
LEAF_NODE	326:6	326:6	6	"WEBP driver doesn't support %d bands. Must be 3 (RGB) "
LEAF_NODE	328:6	328:6	6	"or 4 (RGBA) "
LEAF_NODE	330:4	330:4	6	"bands."
LEAF_NODE	330:12	330:12	6	,
LEAF_NODE	331:4	331:4	6	sp
LEAF_NODE	331:6	331:6	6	->
LEAF_NODE	331:8	331:8	6	nSamples
LEAF_NODE	331:17	331:17	6	)
LEAF_NODE	331:18	331:18	6	;
JUMP_STATEMENT	332:4	332:12	6	return 0 ;
KEYWORD	332:4	332:4	7	return
LEAF_NODE	332:4	332:4	8	return
DESTINATION	332:11	332:11	7	0
EXPR	332:11	332:11	8	0
FIELD	332:11	332:11	9	0
LEAF_NODE	332:11	332:11	10	0
LEAF_NODE	332:12	332:12	7	;
LEAF_NODE	333:2	333:2	5	}
SELECTION	336:2	336:52	3	
KEYWORD	336:2	336:2	4	if
LEAF_NODE	336:2	336:2	5	if
LEAF_NODE	336:5	336:5	4	(
CONDITION	336:6	336:6	4	( nBitsPerSample != 8 ) && ( sampleFormat != 1 )
EXPR	336:6	336:6	5	( nBitsPerSample != 8 ) && ( sampleFormat != 1 )
AND	336:6	336:31	6	( nBitsPerSample != 8 ) && ( sampleFormat != 1 )
EXPR	336:6	336:26	7	( nBitsPerSample != 8 )
LEAF_NODE	336:6	336:6	8	(
FIELD	336:7	336:7	8	nBitsPerSample
LEAF_NODE	336:7	336:7	9	nBitsPerSample
EQ_OPERATOR	336:22	336:22	8	!=
LEAF_NODE	336:22	336:22	9	!=
FIELD	336:25	336:25	8	8
LEAF_NODE	336:25	336:25	9	8
LEAF_NODE	336:26	336:26	8	)
LEAF_NODE	336:28	336:28	7	&&
EXPR	336:31	336:49	7	( sampleFormat != 1 )
LEAF_NODE	336:31	336:31	8	(
FIELD	336:32	336:32	8	sampleFormat
LEAF_NODE	336:32	336:32	9	sampleFormat
EQ_OPERATOR	336:45	336:45	8	!=
LEAF_NODE	336:45	336:45	9	!=
FIELD	336:48	336:48	8	1
LEAF_NODE	336:48	336:48	9	1
LEAF_NODE	336:49	336:49	8	)
LEAF_NODE	336:50	336:50	4	)
STATEMENTS	336:52	340:2	4	
LEAF_NODE	336:52	336:52	5	{
STATEMENTS	337:4	339:4	5	
EXPR_STATEMENT	337:4	338:59	6	TIFFErrorExt ( tif -> tif_clientdata , module , "WEBP driver requires 8 bit unsigned data" ) ;
EXPR	337:4	337:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "WEBP driver requires 8 bit unsigned data" )
FUNCTION_CALL	337:4	338:58	8	TIFFErrorExt ( tif -> tif_clientdata , module , "WEBP driver requires 8 bit unsigned data" )
CALLEE	337:4	337:4	9	TIFFErrorExt
LEAF_NODE	337:4	337:4	10	TIFFErrorExt
LEAF_NODE	337:16	337:16	9	(
ARGUMENT	337:17	337:17	9	tif -> tif_clientdata
FIELD	337:17	337:22	10	tif -> tif_clientdata
LEAF_NODE	337:17	337:17	11	tif
LEAF_NODE	337:20	337:20	11	->
LEAF_NODE	337:22	337:22	11	tif_clientdata
LEAF_NODE	337:36	337:36	9	,
ARGUMENT	337:38	337:38	9	module
FIELD	337:38	337:38	10	module
LEAF_NODE	337:38	337:38	11	module
LEAF_NODE	337:44	337:44	9	,
ARGUMENT	338:16	338:16	9	"WEBP driver requires 8 bit unsigned data"
FIELD	338:16	338:16	10	"WEBP driver requires 8 bit unsigned data"
LEAF_NODE	338:16	338:16	11	"WEBP driver requires 8 bit unsigned data"
LEAF_NODE	338:58	338:58	9	)
LEAF_NODE	338:59	338:59	7	;
JUMP_STATEMENT	339:4	339:12	6	return 0 ;
KEYWORD	339:4	339:4	7	return
LEAF_NODE	339:4	339:4	8	return
DESTINATION	339:11	339:11	7	0
EXPR	339:11	339:11	8	0
FIELD	339:11	339:11	9	0
LEAF_NODE	339:11	339:11	10	0
LEAF_NODE	339:12	339:12	7	;
LEAF_NODE	340:2	340:2	5	}
SELECTION	342:2	342:38	3	
KEYWORD	342:2	342:2	4	if
LEAF_NODE	342:2	342:2	5	if
LEAF_NODE	342:5	342:5	4	(
CONDITION	342:6	342:6	4	sp -> state & LSTATE_INIT_DECODE
EXPR	342:6	342:18	5	sp -> state & LSTATE_INIT_DECODE
FIELD	342:6	342:10	6	sp -> state
LEAF_NODE	342:6	342:6	7	sp
LEAF_NODE	342:8	342:8	7	->
LEAF_NODE	342:10	342:10	7	state
LEAF_NODE	342:16	342:16	6	&
FIELD	342:18	342:18	6	LSTATE_INIT_DECODE
LEAF_NODE	342:18	342:18	7	LSTATE_INIT_DECODE
LEAF_NODE	342:36	342:36	4	)
STATEMENTS	342:38	348:2	4	
LEAF_NODE	342:38	342:38	5	{
STATEMENTS	343:4	347:4	5	
EXPR_STATEMENT	343:4	343:30	6	WebPIDelete ( sp -> psDecoder ) ;
EXPR	343:4	343:4	7	WebPIDelete ( sp -> psDecoder )
FUNCTION_CALL	343:4	343:29	8	WebPIDelete ( sp -> psDecoder )
CALLEE	343:4	343:4	9	WebPIDelete
LEAF_NODE	343:4	343:4	10	WebPIDelete
LEAF_NODE	343:15	343:15	9	(
ARGUMENT	343:16	343:16	9	sp -> psDecoder
FIELD	343:16	343:20	10	sp -> psDecoder
LEAF_NODE	343:16	343:16	11	sp
LEAF_NODE	343:18	343:18	11	->
LEAF_NODE	343:20	343:20	11	psDecoder
LEAF_NODE	343:29	343:29	9	)
LEAF_NODE	343:30	343:30	7	;
EXPR_STATEMENT	344:4	344:38	6	WebPFreeDecBuffer ( & sp -> sDecBuffer ) ;
EXPR	344:4	344:4	7	WebPFreeDecBuffer ( & sp -> sDecBuffer )
FUNCTION_CALL	344:4	344:37	8	WebPFreeDecBuffer ( & sp -> sDecBuffer )
CALLEE	344:4	344:4	9	WebPFreeDecBuffer
LEAF_NODE	344:4	344:4	10	WebPFreeDecBuffer
LEAF_NODE	344:21	344:21	9	(
ARGUMENT	344:22	344:22	9	& sp -> sDecBuffer
UNARY_EXPR	344:22	344:23	10	& sp -> sDecBuffer
UNARY_OPERATOR	344:22	344:22	11	&
LEAF_NODE	344:22	344:22	12	&
FIELD	344:23	344:27	11	sp -> sDecBuffer
LEAF_NODE	344:23	344:23	12	sp
LEAF_NODE	344:25	344:25	12	->
LEAF_NODE	344:27	344:27	12	sDecBuffer
LEAF_NODE	344:37	344:37	9	)
LEAF_NODE	344:38	344:38	7	;
EXPR_STATEMENT	345:4	345:24	6	sp -> psDecoder = NULL ;
EXPR	345:4	345:4	7	sp -> psDecoder = NULL
ASSIGN	345:4	345:20	8	sp -> psDecoder = NULL
LVAL	345:4	345:4	9	sp -> psDecoder
FIELD	345:4	345:8	10	sp -> psDecoder
LEAF_NODE	345:4	345:4	11	sp
LEAF_NODE	345:6	345:6	11	->
LEAF_NODE	345:8	345:8	11	psDecoder
ASSIGN_OP	345:18	345:18	9	=
LEAF_NODE	345:18	345:18	10	=
RVAL	345:20	345:20	9	NULL
FIELD	345:20	345:20	10	NULL
LEAF_NODE	345:20	345:20	11	NULL
LEAF_NODE	345:24	345:24	7	;
EXPR_STATEMENT	346:4	346:18	6	sp -> last_y = 0 ;
EXPR	346:4	346:4	7	sp -> last_y = 0
ASSIGN	346:4	346:17	8	sp -> last_y = 0
LVAL	346:4	346:4	9	sp -> last_y
FIELD	346:4	346:8	10	sp -> last_y
LEAF_NODE	346:4	346:4	11	sp
LEAF_NODE	346:6	346:6	11	->
LEAF_NODE	346:8	346:8	11	last_y
ASSIGN_OP	346:15	346:15	9	=
LEAF_NODE	346:15	346:15	10	=
RVAL	346:17	346:17	9	0
FIELD	346:17	346:17	10	0
LEAF_NODE	346:17	346:17	11	0
LEAF_NODE	346:18	346:18	7	;
EXPR_STATEMENT	347:4	347:17	6	sp -> state = 0 ;
EXPR	347:4	347:4	7	sp -> state = 0
ASSIGN	347:4	347:16	8	sp -> state = 0
LVAL	347:4	347:4	9	sp -> state
FIELD	347:4	347:8	10	sp -> state
LEAF_NODE	347:4	347:4	11	sp
LEAF_NODE	347:6	347:6	11	->
LEAF_NODE	347:8	347:8	11	state
ASSIGN_OP	347:14	347:14	9	=
LEAF_NODE	347:14	347:14	10	=
RVAL	347:16	347:16	9	0
FIELD	347:16	347:16	10	0
LEAF_NODE	347:16	347:16	11	0
LEAF_NODE	347:17	347:17	7	;
LEAF_NODE	348:2	348:2	5	}
EXPR_STATEMENT	350:2	350:33	3	sp -> state |= LSTATE_INIT_ENCODE ;
EXPR	350:2	350:2	4	sp -> state |= LSTATE_INIT_ENCODE
ASSIGN	350:2	350:15	5	sp -> state |= LSTATE_INIT_ENCODE
LVAL	350:2	350:2	6	sp -> state
FIELD	350:2	350:6	7	sp -> state
LEAF_NODE	350:2	350:2	8	sp
LEAF_NODE	350:4	350:4	8	->
LEAF_NODE	350:6	350:6	8	state
ASSIGN_OP	350:12	350:12	6	|=
LEAF_NODE	350:12	350:12	7	|=
RVAL	350:15	350:15	6	LSTATE_INIT_ENCODE
FIELD	350:15	350:15	7	LSTATE_INIT_ENCODE
LEAF_NODE	350:15	350:15	8	LSTATE_INIT_ENCODE
LEAF_NODE	350:33	350:33	4	;
SELECTION	352:2	352:39	3	
KEYWORD	352:2	352:2	4	if
LEAF_NODE	352:2	352:2	5	if
LEAF_NODE	352:5	352:5	4	(
CONDITION	352:6	352:6	4	! WebPPictureInit ( & sp -> sPicture )
EXPR	352:6	352:6	5	! WebPPictureInit ( & sp -> sPicture )
UNARY_EXPR	352:6	352:7	6	! WebPPictureInit ( & sp -> sPicture )
UNARY_OPERATOR	352:6	352:6	7	!
LEAF_NODE	352:6	352:6	8	!
FUNCTION_CALL	352:7	352:36	7	WebPPictureInit ( & sp -> sPicture )
CALLEE	352:7	352:7	8	WebPPictureInit
LEAF_NODE	352:7	352:7	9	WebPPictureInit
LEAF_NODE	352:22	352:22	8	(
ARGUMENT	352:23	352:23	8	& sp -> sPicture
UNARY_EXPR	352:23	352:24	9	& sp -> sPicture
UNARY_OPERATOR	352:23	352:23	10	&
LEAF_NODE	352:23	352:23	11	&
FIELD	352:24	352:28	10	sp -> sPicture
LEAF_NODE	352:24	352:24	11	sp
LEAF_NODE	352:26	352:26	11	->
LEAF_NODE	352:28	352:28	11	sPicture
LEAF_NODE	352:36	352:36	8	)
LEAF_NODE	352:37	352:37	4	)
STATEMENTS	352:39	356:2	4	
LEAF_NODE	352:39	352:39	5	{
STATEMENTS	353:4	355:4	5	
EXPR_STATEMENT	353:4	354:43	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Error initializing WebP picture." ) ;
EXPR	353:4	353:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Error initializing WebP picture." )
FUNCTION_CALL	353:4	354:42	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Error initializing WebP picture." )
CALLEE	353:4	353:4	9	TIFFErrorExt
LEAF_NODE	353:4	353:4	10	TIFFErrorExt
LEAF_NODE	353:16	353:16	9	(
ARGUMENT	353:17	353:17	9	tif -> tif_clientdata
FIELD	353:17	353:22	10	tif -> tif_clientdata
LEAF_NODE	353:17	353:17	11	tif
LEAF_NODE	353:20	353:20	11	->
LEAF_NODE	353:22	353:22	11	tif_clientdata
LEAF_NODE	353:36	353:36	9	,
ARGUMENT	353:38	353:38	9	module
FIELD	353:38	353:38	10	module
LEAF_NODE	353:38	353:38	11	module
LEAF_NODE	353:44	353:44	9	,
ARGUMENT	354:8	354:8	9	"Error initializing WebP picture."
FIELD	354:8	354:8	10	"Error initializing WebP picture."
LEAF_NODE	354:8	354:8	11	"Error initializing WebP picture."
LEAF_NODE	354:42	354:42	9	)
LEAF_NODE	354:43	354:43	7	;
JUMP_STATEMENT	355:4	355:12	6	return 0 ;
KEYWORD	355:4	355:4	7	return
LEAF_NODE	355:4	355:4	8	return
DESTINATION	355:11	355:11	7	0
EXPR	355:11	355:11	8	0
FIELD	355:11	355:11	9	0
LEAF_NODE	355:11	355:11	10	0
LEAF_NODE	355:12	355:12	7	;
LEAF_NODE	356:2	356:2	5	}
SELECTION	358:2	360:57	3	
KEYWORD	358:2	358:2	4	if
LEAF_NODE	358:2	358:2	5	if
LEAF_NODE	358:5	358:5	4	(
CONDITION	358:6	358:6	4	! WebPConfigInitInternal ( & sp -> sEncoderConfig , WEBP_PRESET_DEFAULT , sp -> quality_level , WEBP_ENCODER_ABI_VERSION )
EXPR	358:6	358:6	5	! WebPConfigInitInternal ( & sp -> sEncoderConfig , WEBP_PRESET_DEFAULT , sp -> quality_level , WEBP_ENCODER_ABI_VERSION )
UNARY_EXPR	358:6	358:7	6	! WebPConfigInitInternal ( & sp -> sEncoderConfig , WEBP_PRESET_DEFAULT , sp -> quality_level , WEBP_ENCODER_ABI_VERSION )
UNARY_OPERATOR	358:6	358:6	7	!
LEAF_NODE	358:6	358:6	8	!
FUNCTION_CALL	358:7	360:54	7	WebPConfigInitInternal ( & sp -> sEncoderConfig , WEBP_PRESET_DEFAULT , sp -> quality_level , WEBP_ENCODER_ABI_VERSION )
CALLEE	358:7	358:7	8	WebPConfigInitInternal
LEAF_NODE	358:7	358:7	9	WebPConfigInitInternal
LEAF_NODE	358:29	358:29	8	(
ARGUMENT	358:30	358:30	8	& sp -> sEncoderConfig
UNARY_EXPR	358:30	358:31	9	& sp -> sEncoderConfig
UNARY_OPERATOR	358:30	358:30	10	&
LEAF_NODE	358:30	358:30	11	&
FIELD	358:31	358:35	10	sp -> sEncoderConfig
LEAF_NODE	358:31	358:31	11	sp
LEAF_NODE	358:33	358:33	11	->
LEAF_NODE	358:35	358:35	11	sEncoderConfig
LEAF_NODE	358:49	358:49	8	,
ARGUMENT	358:51	358:51	8	WEBP_PRESET_DEFAULT
FIELD	358:51	358:51	9	WEBP_PRESET_DEFAULT
LEAF_NODE	358:51	358:51	10	WEBP_PRESET_DEFAULT
LEAF_NODE	358:70	358:70	8	,
ARGUMENT	359:30	359:30	8	sp -> quality_level
FIELD	359:30	359:34	9	sp -> quality_level
LEAF_NODE	359:30	359:30	10	sp
LEAF_NODE	359:32	359:32	10	->
LEAF_NODE	359:34	359:34	10	quality_level
LEAF_NODE	359:47	359:47	8	,
ARGUMENT	360:30	360:30	8	WEBP_ENCODER_ABI_VERSION
FIELD	360:30	360:30	9	WEBP_ENCODER_ABI_VERSION
LEAF_NODE	360:30	360:30	10	WEBP_ENCODER_ABI_VERSION
LEAF_NODE	360:54	360:54	8	)
LEAF_NODE	360:55	360:55	4	)
STATEMENTS	360:57	364:2	4	
LEAF_NODE	360:57	360:57	5	{
STATEMENTS	361:4	363:4	5	
EXPR_STATEMENT	361:4	362:51	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Error creating WebP encoder configuration." ) ;
EXPR	361:4	361:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Error creating WebP encoder configuration." )
FUNCTION_CALL	361:4	362:50	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Error creating WebP encoder configuration." )
CALLEE	361:4	361:4	9	TIFFErrorExt
LEAF_NODE	361:4	361:4	10	TIFFErrorExt
LEAF_NODE	361:16	361:16	9	(
ARGUMENT	361:17	361:17	9	tif -> tif_clientdata
FIELD	361:17	361:22	10	tif -> tif_clientdata
LEAF_NODE	361:17	361:17	11	tif
LEAF_NODE	361:20	361:20	11	->
LEAF_NODE	361:22	361:22	11	tif_clientdata
LEAF_NODE	361:36	361:36	9	,
ARGUMENT	361:38	361:38	9	module
FIELD	361:38	361:38	10	module
LEAF_NODE	361:38	361:38	11	module
LEAF_NODE	361:44	361:44	9	,
ARGUMENT	362:6	362:6	9	"Error creating WebP encoder configuration."
FIELD	362:6	362:6	10	"Error creating WebP encoder configuration."
LEAF_NODE	362:6	362:6	11	"Error creating WebP encoder configuration."
LEAF_NODE	362:50	362:50	9	)
LEAF_NODE	362:51	362:51	7	;
JUMP_STATEMENT	363:4	363:12	6	return 0 ;
KEYWORD	363:4	363:4	7	return
LEAF_NODE	363:4	363:4	8	return
DESTINATION	363:11	363:11	7	0
EXPR	363:11	363:11	8	0
FIELD	363:11	363:11	9	0
LEAF_NODE	363:11	363:11	10	0
LEAF_NODE	363:12	363:12	7	;
LEAF_NODE	364:2	364:2	5	}
EXPR_STATEMENT	368:4	368:46	3	sp -> sEncoderConfig . lossless = sp -> lossless ;
EXPR	368:4	368:4	4	sp -> sEncoderConfig . lossless = sp -> lossless
ASSIGN	368:4	368:34	5	sp -> sEncoderConfig . lossless = sp -> lossless
LVAL	368:4	368:4	6	sp -> sEncoderConfig . lossless
FIELD	368:4	368:23	7	sp -> sEncoderConfig . lossless
LEAF_NODE	368:4	368:4	8	sp
LEAF_NODE	368:6	368:6	8	->
LEAF_NODE	368:8	368:8	8	sEncoderConfig
LEAF_NODE	368:22	368:22	8	.
LEAF_NODE	368:23	368:23	8	lossless
ASSIGN_OP	368:32	368:32	6	=
LEAF_NODE	368:32	368:32	7	=
RVAL	368:34	368:34	6	sp -> lossless
FIELD	368:34	368:38	7	sp -> lossless
LEAF_NODE	368:34	368:34	8	sp
LEAF_NODE	368:36	368:36	8	->
LEAF_NODE	368:38	368:38	8	lossless
LEAF_NODE	368:46	368:46	4	;
SELECTION	369:4	369:22	3	
KEYWORD	369:4	369:4	4	if
LEAF_NODE	369:4	369:4	5	if
LEAF_NODE	369:7	369:7	4	(
CONDITION	369:8	369:8	4	sp -> lossless
EXPR	369:8	369:8	5	sp -> lossless
FIELD	369:8	369:12	6	sp -> lossless
LEAF_NODE	369:8	369:8	7	sp
LEAF_NODE	369:10	369:10	7	->
LEAF_NODE	369:12	369:12	7	lossless
LEAF_NODE	369:20	369:20	4	)
STATEMENTS	369:22	371:4	4	
LEAF_NODE	369:22	369:22	5	{
STATEMENTS	370:6	370:6	5	
EXPR_STATEMENT	370:6	370:31	6	sp -> sPicture . use_argb = 1 ;
EXPR	370:6	370:6	7	sp -> sPicture . use_argb = 1
ASSIGN	370:6	370:30	8	sp -> sPicture . use_argb = 1
LVAL	370:6	370:6	9	sp -> sPicture . use_argb
FIELD	370:6	370:19	10	sp -> sPicture . use_argb
LEAF_NODE	370:6	370:6	11	sp
LEAF_NODE	370:8	370:8	11	->
LEAF_NODE	370:10	370:10	11	sPicture
LEAF_NODE	370:18	370:18	11	.
LEAF_NODE	370:19	370:19	11	use_argb
ASSIGN_OP	370:28	370:28	9	=
LEAF_NODE	370:28	370:28	10	=
RVAL	370:30	370:30	9	1
FIELD	370:30	370:30	10	1
LEAF_NODE	370:30	370:30	11	1
LEAF_NODE	370:31	370:31	7	;
LEAF_NODE	371:4	371:4	5	}
SELECTION	374:2	374:48	3	
KEYWORD	374:2	374:2	4	if
LEAF_NODE	374:2	374:2	5	if
LEAF_NODE	374:5	374:5	4	(
CONDITION	374:6	374:6	4	! WebPValidateConfig ( & sp -> sEncoderConfig )
EXPR	374:6	374:6	5	! WebPValidateConfig ( & sp -> sEncoderConfig )
UNARY_EXPR	374:6	374:7	6	! WebPValidateConfig ( & sp -> sEncoderConfig )
UNARY_OPERATOR	374:6	374:6	7	!
LEAF_NODE	374:6	374:6	8	!
FUNCTION_CALL	374:7	374:45	7	WebPValidateConfig ( & sp -> sEncoderConfig )
CALLEE	374:7	374:7	8	WebPValidateConfig
LEAF_NODE	374:7	374:7	9	WebPValidateConfig
LEAF_NODE	374:25	374:25	8	(
ARGUMENT	374:26	374:26	8	& sp -> sEncoderConfig
UNARY_EXPR	374:26	374:27	9	& sp -> sEncoderConfig
UNARY_OPERATOR	374:26	374:26	10	&
LEAF_NODE	374:26	374:26	11	&
FIELD	374:27	374:31	10	sp -> sEncoderConfig
LEAF_NODE	374:27	374:27	11	sp
LEAF_NODE	374:29	374:29	11	->
LEAF_NODE	374:31	374:31	11	sEncoderConfig
LEAF_NODE	374:45	374:45	8	)
LEAF_NODE	374:46	374:46	4	)
STATEMENTS	374:48	378:2	4	
LEAF_NODE	374:48	374:48	5	{
STATEMENTS	375:4	377:4	5	
EXPR_STATEMENT	375:4	376:47	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Error with WebP encoder configuration." ) ;
EXPR	375:4	375:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Error with WebP encoder configuration." )
FUNCTION_CALL	375:4	376:46	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Error with WebP encoder configuration." )
CALLEE	375:4	375:4	9	TIFFErrorExt
LEAF_NODE	375:4	375:4	10	TIFFErrorExt
LEAF_NODE	375:16	375:16	9	(
ARGUMENT	375:17	375:17	9	tif -> tif_clientdata
FIELD	375:17	375:22	10	tif -> tif_clientdata
LEAF_NODE	375:17	375:17	11	tif
LEAF_NODE	375:20	375:20	11	->
LEAF_NODE	375:22	375:22	11	tif_clientdata
LEAF_NODE	375:36	375:36	9	,
ARGUMENT	375:38	375:38	9	module
FIELD	375:38	375:38	10	module
LEAF_NODE	375:38	375:38	11	module
LEAF_NODE	375:44	375:44	9	,
ARGUMENT	376:6	376:6	9	"Error with WebP encoder configuration."
FIELD	376:6	376:6	10	"Error with WebP encoder configuration."
LEAF_NODE	376:6	376:6	11	"Error with WebP encoder configuration."
LEAF_NODE	376:46	376:46	9	)
LEAF_NODE	376:47	376:47	7	;
JUMP_STATEMENT	377:4	377:12	6	return 0 ;
KEYWORD	377:4	377:4	7	return
LEAF_NODE	377:4	377:4	8	return
DESTINATION	377:11	377:11	7	0
EXPR	377:11	377:11	8	0
FIELD	377:11	377:11	9	0
LEAF_NODE	377:11	377:11	10	0
LEAF_NODE	377:12	377:12	7	;
LEAF_NODE	378:2	378:2	5	}
JUMP_STATEMENT	380:2	380:10	3	return 1 ;
KEYWORD	380:2	380:2	4	return
LEAF_NODE	380:2	380:2	5	return
DESTINATION	380:9	380:9	4	1
EXPR	380:9	380:9	5	1
FIELD	380:9	380:9	6	1
LEAF_NODE	380:9	380:9	7	1
LEAF_NODE	380:10	380:10	4	;
LEAF_NODE	381:0	381:0	2	}
FUNCTION_DEF	386:0	441:0	1	
RETURN_TYPE	386:0	386:7	2	static int
LEAF_NODE	386:0	386:0	3	static
TYPE_NAME	386:7	386:7	3	int
LEAF_NODE	386:7	386:7	4	int
FUNCTION_NAME	387:0	387:0	2	TWebPPreEncode
LEAF_NODE	387:0	387:0	3	TWebPPreEncode
PARAMETER_LIST	387:14	387:34	2	( TIFF * tif , uint16 s )
LEAF_NODE	387:14	387:14	3	(
PARAMETER_DECL	387:15	387:21	3	TIFF * tif
TYPE	387:15	387:19	4	TIFF *
TYPE_NAME	387:15	387:15	5	TIFF
LEAF_NODE	387:15	387:15	6	TIFF
POINTER	387:19	387:19	5	*
LEAF_NODE	387:19	387:19	6	*
NAME	387:21	387:21	4	tif
LEAF_NODE	387:21	387:21	5	tif
LEAF_NODE	387:24	387:24	3	,
PARAMETER_DECL	387:26	387:33	3	uint16 s
TYPE	387:26	387:26	4	uint16
TYPE_NAME	387:26	387:26	5	uint16
LEAF_NODE	387:26	387:26	6	uint16
NAME	387:33	387:33	4	s
LEAF_NODE	387:33	387:33	5	s
LEAF_NODE	387:34	387:34	3	)
LEAF_NODE	388:0	388:0	2	{
STATEMENTS	389:2	440:2	2	
LEAF_NODE	389:2	389:2	3	static
SIMPLE_DECL	389:9	389:47	3	const char [ ] module ; module = "TWebPPreEncode" ;
VAR_DECL	389:9	389:20	4	const char [ ] module ; module = "TWebPPreEncode"
TYPE	389:9	389:26	5	const char [ ]
TYPE_NAME	389:9	389:15	6	const char
LEAF_NODE	389:9	389:9	7	const
LEAF_NODE	389:15	389:15	7	char
TYPE_SUFFIX	389:26	389:27	6	[ ]
LEAF_NODE	389:26	389:26	7	[
LEAF_NODE	389:27	389:27	7	]
NAME	389:20	389:20	5	module
LEAF_NODE	389:20	389:20	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	389:20	389:20	5	module = "TWebPPreEncode"
ASSIGN	389:20	389:31	6	module = "TWebPPreEncode"
LVAL	389:20	389:20	7	module
NAME	389:20	389:20	8	module
LEAF_NODE	389:20	389:20	9	module
ASSIGN_OP	389:29	389:29	7	=
LEAF_NODE	389:29	389:29	8	=
RVAL	389:31	389:31	7	"TWebPPreEncode"
FIELD	389:31	389:31	8	"TWebPPreEncode"
LEAF_NODE	389:31	389:31	9	"TWebPPreEncode"
LEAF_NODE	389:47	389:47	4	;
SIMPLE_DECL	390:2	390:38	3	uint32 segment_width , uint32 segment_height ;
INIT_DECL_LIST	390:2	390:2	4	uint32 segment_width , uint32 segment_height
VAR_DECL	390:2	390:9	5	uint32 segment_width
TYPE	390:2	390:2	6	uint32
TYPE_NAME	390:2	390:2	7	uint32
LEAF_NODE	390:2	390:2	8	uint32
NAME	390:9	390:9	6	segment_width
LEAF_NODE	390:9	390:9	7	segment_width
LEAF_NODE	390:22	390:22	5	,
VAR_DECL	390:2	390:24	5	uint32 segment_height
TYPE	390:2	390:2	6	uint32
TYPE_NAME	390:2	390:2	7	uint32
LEAF_NODE	390:2	390:2	8	uint32
NAME	390:24	390:24	6	segment_height
LEAF_NODE	390:24	390:24	7	segment_height
LEAF_NODE	390:38	390:38	4	;
SIMPLE_DECL	391:2	391:35	3	WebPState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	391:2	391:13	4	WebPState * sp ; sp = EncoderState ( tif )
TYPE	391:2	391:12	5	WebPState *
TYPE_NAME	391:2	391:2	6	WebPState
LEAF_NODE	391:2	391:2	7	WebPState
POINTER	391:12	391:12	6	*
LEAF_NODE	391:12	391:12	7	*
NAME	391:13	391:13	5	sp
LEAF_NODE	391:13	391:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	391:13	391:13	5	sp = EncoderState ( tif )
ASSIGN	391:13	391:18	6	sp = EncoderState ( tif )
LVAL	391:13	391:13	7	sp
NAME	391:13	391:13	8	sp
LEAF_NODE	391:13	391:13	9	sp
ASSIGN_OP	391:16	391:16	7	=
LEAF_NODE	391:16	391:16	8	=
RVAL	391:18	391:18	7	EncoderState ( tif )
FUNCTION_CALL	391:18	391:34	8	EncoderState ( tif )
CALLEE	391:18	391:18	9	EncoderState
LEAF_NODE	391:18	391:18	10	EncoderState
LEAF_NODE	391:30	391:30	9	(
ARGUMENT	391:31	391:31	9	tif
FIELD	391:31	391:31	10	tif
LEAF_NODE	391:31	391:31	11	tif
LEAF_NODE	391:34	391:34	9	)
LEAF_NODE	391:35	391:35	4	;
SIMPLE_DECL	392:2	392:35	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	392:2	392:17	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	392:2	392:15	5	TIFFDirectory *
TYPE_NAME	392:2	392:2	6	TIFFDirectory
LEAF_NODE	392:2	392:2	7	TIFFDirectory
POINTER	392:15	392:15	6	*
LEAF_NODE	392:15	392:15	7	*
NAME	392:17	392:17	5	td
LEAF_NODE	392:17	392:17	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	392:17	392:17	5	td = & tif -> tif_dir
ASSIGN	392:17	392:22	6	td = & tif -> tif_dir
LVAL	392:17	392:17	7	td
NAME	392:17	392:17	8	td
LEAF_NODE	392:17	392:17	9	td
ASSIGN_OP	392:20	392:20	7	=
LEAF_NODE	392:20	392:20	8	=
RVAL	392:22	392:22	7	& tif -> tif_dir
UNARY_EXPR	392:22	392:23	8	& tif -> tif_dir
UNARY_OPERATOR	392:22	392:22	9	&
LEAF_NODE	392:22	392:22	10	&
FIELD	392:23	392:28	9	tif -> tif_dir
LEAF_NODE	392:23	392:23	10	tif
LEAF_NODE	392:26	392:26	10	->
LEAF_NODE	392:28	392:28	10	tif_dir
LEAF_NODE	392:35	392:35	4	;
EXPR_STATEMENT	394:2	394:10	3	( void ) s ;
EXPR	394:2	394:9	4	( void ) s
LEAF_NODE	394:2	394:2	5	(
TYPE_NAME	394:3	394:3	5	void
LEAF_NODE	394:3	394:3	6	void
LEAF_NODE	394:7	394:7	5	)
FIELD	394:9	394:9	5	s
LEAF_NODE	394:9	394:9	6	s
LEAF_NODE	394:10	394:10	4	;
EXPR_STATEMENT	396:2	396:20	3	assert ( sp != NULL ) ;
EXPR	396:2	396:2	4	assert ( sp != NULL )
FUNCTION_CALL	396:2	396:19	5	assert ( sp != NULL )
CALLEE	396:2	396:2	6	assert
LEAF_NODE	396:2	396:2	7	assert
LEAF_NODE	396:8	396:8	6	(
ARGUMENT	396:9	396:15	6	sp != NULL
FIELD	396:9	396:9	7	sp
LEAF_NODE	396:9	396:9	8	sp
EQ_OPERATOR	396:12	396:12	7	!=
LEAF_NODE	396:12	396:12	8	!=
FIELD	396:15	396:15	7	NULL
LEAF_NODE	396:15	396:15	8	NULL
LEAF_NODE	396:19	396:19	6	)
LEAF_NODE	396:20	396:20	4	;
SELECTION	397:2	398:4	3	
KEYWORD	397:2	397:2	4	if
LEAF_NODE	397:2	397:2	5	if
LEAF_NODE	397:4	397:4	4	(
CONDITION	397:6	397:6	4	sp -> state != LSTATE_INIT_ENCODE
EXPR	397:6	397:19	5	sp -> state != LSTATE_INIT_ENCODE
FIELD	397:6	397:10	6	sp -> state
LEAF_NODE	397:6	397:6	7	sp
LEAF_NODE	397:8	397:8	7	->
LEAF_NODE	397:10	397:10	7	state
EQ_OPERATOR	397:16	397:16	6	!=
LEAF_NODE	397:16	397:16	7	!=
FIELD	397:19	397:19	6	LSTATE_INIT_ENCODE
LEAF_NODE	397:19	397:19	7	LSTATE_INIT_ENCODE
LEAF_NODE	397:38	397:38	4	)
STATEMENTS	398:4	398:4	4	
EXPR_STATEMENT	398:4	398:29	5	tif -> tif_setupencode ( tif ) ;
EXPR	398:4	398:4	6	tif -> tif_setupencode ( tif )
FUNCTION_CALL	398:4	398:28	7	tif -> tif_setupencode ( tif )
CALLEE	398:4	398:9	8	tif -> tif_setupencode
LEAF_NODE	398:4	398:4	9	tif
LEAF_NODE	398:7	398:7	9	->
LEAF_NODE	398:9	398:9	9	tif_setupencode
LEAF_NODE	398:24	398:24	8	(
ARGUMENT	398:25	398:25	8	tif
FIELD	398:25	398:25	9	tif
LEAF_NODE	398:25	398:25	10	tif
LEAF_NODE	398:28	398:28	8	)
LEAF_NODE	398:29	398:29	6	;
SELECTION	403:2	403:20	3	
KEYWORD	403:2	403:2	4	if
LEAF_NODE	403:2	403:2	5	if
LEAF_NODE	403:5	403:5	4	(
CONDITION	403:6	403:6	4	isTiled ( tif )
EXPR	403:6	403:6	5	isTiled ( tif )
FUNCTION_CALL	403:6	403:17	6	isTiled ( tif )
CALLEE	403:6	403:6	7	isTiled
LEAF_NODE	403:6	403:6	8	isTiled
LEAF_NODE	403:13	403:13	7	(
ARGUMENT	403:14	403:14	7	tif
FIELD	403:14	403:14	8	tif
LEAF_NODE	403:14	403:14	9	tif
LEAF_NODE	403:17	403:17	7	)
LEAF_NODE	403:18	403:18	4	)
STATEMENTS	403:20	406:2	4	
LEAF_NODE	403:20	403:20	5	{
STATEMENTS	404:4	405:4	5	
EXPR_STATEMENT	404:4	404:36	6	segment_width = td -> td_tilewidth ;
EXPR	404:4	404:4	7	segment_width = td -> td_tilewidth
ASSIGN	404:4	404:20	8	segment_width = td -> td_tilewidth
LVAL	404:4	404:4	9	segment_width
FIELD	404:4	404:4	10	segment_width
LEAF_NODE	404:4	404:4	11	segment_width
ASSIGN_OP	404:18	404:18	9	=
LEAF_NODE	404:18	404:18	10	=
RVAL	404:20	404:20	9	td -> td_tilewidth
FIELD	404:20	404:24	10	td -> td_tilewidth
LEAF_NODE	404:20	404:20	11	td
LEAF_NODE	404:22	404:22	11	->
LEAF_NODE	404:24	404:24	11	td_tilewidth
LEAF_NODE	404:36	404:36	7	;
EXPR_STATEMENT	405:4	405:38	6	segment_height = td -> td_tilelength ;
EXPR	405:4	405:4	7	segment_height = td -> td_tilelength
ASSIGN	405:4	405:21	8	segment_height = td -> td_tilelength
LVAL	405:4	405:4	9	segment_height
FIELD	405:4	405:4	10	segment_height
LEAF_NODE	405:4	405:4	11	segment_height
ASSIGN_OP	405:19	405:19	9	=
LEAF_NODE	405:19	405:19	10	=
RVAL	405:21	405:21	9	td -> td_tilelength
FIELD	405:21	405:25	10	td -> td_tilelength
LEAF_NODE	405:21	405:21	11	td
LEAF_NODE	405:23	405:23	11	->
LEAF_NODE	405:25	405:25	11	td_tilelength
LEAF_NODE	405:38	405:38	7	;
LEAF_NODE	406:2	406:2	5	}
SELECTION	406:4	406:9	3	
KEYWORD	406:4	406:4	4	else
LEAF_NODE	406:4	406:4	5	else
STATEMENTS	406:9	411:2	4	
LEAF_NODE	406:9	406:9	5	{
STATEMENTS	407:4	409:4	5	
EXPR_STATEMENT	407:4	407:37	6	segment_width = td -> td_imagewidth ;
EXPR	407:4	407:4	7	segment_width = td -> td_imagewidth
ASSIGN	407:4	407:20	8	segment_width = td -> td_imagewidth
LVAL	407:4	407:4	9	segment_width
FIELD	407:4	407:4	10	segment_width
LEAF_NODE	407:4	407:4	11	segment_width
ASSIGN_OP	407:18	407:18	9	=
LEAF_NODE	407:18	407:18	10	=
RVAL	407:20	407:20	9	td -> td_imagewidth
FIELD	407:20	407:24	10	td -> td_imagewidth
LEAF_NODE	407:20	407:20	11	td
LEAF_NODE	407:22	407:22	11	->
LEAF_NODE	407:24	407:24	11	td_imagewidth
LEAF_NODE	407:37	407:37	7	;
EXPR_STATEMENT	408:4	408:54	6	segment_height = td -> td_imagelength - tif -> tif_row ;
EXPR	408:4	408:4	7	segment_height = td -> td_imagelength - tif -> tif_row
ASSIGN	408:4	408:21	8	segment_height = td -> td_imagelength - tif -> tif_row
LVAL	408:4	408:4	9	segment_height
FIELD	408:4	408:4	10	segment_height
LEAF_NODE	408:4	408:4	11	segment_height
ASSIGN_OP	408:19	408:19	9	=
LEAF_NODE	408:19	408:19	10	=
RVAL	408:21	408:42	9	td -> td_imagelength - tif -> tif_row
FIELD	408:21	408:25	10	td -> td_imagelength
LEAF_NODE	408:21	408:21	11	td
LEAF_NODE	408:23	408:23	11	->
LEAF_NODE	408:25	408:25	11	td_imagelength
LEAF_NODE	408:40	408:40	10	-
FIELD	408:42	408:47	10	tif -> tif_row
LEAF_NODE	408:42	408:42	11	tif
LEAF_NODE	408:45	408:45	11	->
LEAF_NODE	408:47	408:47	11	tif_row
LEAF_NODE	408:54	408:54	7	;
SELECTION	409:4	410:6	6	
KEYWORD	409:4	409:4	7	if
LEAF_NODE	409:4	409:4	8	if
LEAF_NODE	409:7	409:7	7	(
CONDITION	409:8	409:8	7	segment_height > td -> td_rowsperstrip
EXPR	409:8	409:25	8	segment_height > td -> td_rowsperstrip
FIELD	409:8	409:8	9	segment_height
LEAF_NODE	409:8	409:8	10	segment_height
REL_OPERATOR	409:23	409:23	9	>
LEAF_NODE	409:23	409:23	10	>
FIELD	409:25	409:29	9	td -> td_rowsperstrip
LEAF_NODE	409:25	409:25	10	td
LEAF_NODE	409:27	409:27	10	->
LEAF_NODE	409:29	409:29	10	td_rowsperstrip
LEAF_NODE	409:44	409:44	7	)
STATEMENTS	410:6	410:6	7	
EXPR_STATEMENT	410:6	410:42	8	segment_height = td -> td_rowsperstrip ;
EXPR	410:6	410:6	9	segment_height = td -> td_rowsperstrip
ASSIGN	410:6	410:23	10	segment_height = td -> td_rowsperstrip
LVAL	410:6	410:6	11	segment_height
FIELD	410:6	410:6	12	segment_height
LEAF_NODE	410:6	410:6	13	segment_height
ASSIGN_OP	410:21	410:21	11	=
LEAF_NODE	410:21	410:21	12	=
RVAL	410:23	410:23	11	td -> td_rowsperstrip
FIELD	410:23	410:27	12	td -> td_rowsperstrip
LEAF_NODE	410:23	410:23	13	td
LEAF_NODE	410:25	410:25	13	->
LEAF_NODE	410:27	410:27	13	td_rowsperstrip
LEAF_NODE	410:42	410:42	9	;
LEAF_NODE	411:2	411:2	5	}
SELECTION	413:2	413:56	3	
KEYWORD	413:2	413:2	4	if
LEAF_NODE	413:2	413:2	5	if
LEAF_NODE	413:4	413:4	4	(
CONDITION	413:6	413:6	4	segment_width > 16383 || segment_height > 16383
EXPR	413:6	413:6	5	segment_width > 16383 || segment_height > 16383
OR	413:6	413:31	6	segment_width > 16383 || segment_height > 16383
EXPR	413:6	413:22	7	segment_width > 16383
FIELD	413:6	413:6	8	segment_width
LEAF_NODE	413:6	413:6	9	segment_width
REL_OPERATOR	413:20	413:20	8	>
LEAF_NODE	413:20	413:20	9	>
FIELD	413:22	413:22	8	16383
LEAF_NODE	413:22	413:22	9	16383
LEAF_NODE	413:28	413:28	7	||
EXPR	413:31	413:48	7	segment_height > 16383
FIELD	413:31	413:31	8	segment_height
LEAF_NODE	413:31	413:31	9	segment_height
REL_OPERATOR	413:46	413:46	8	>
LEAF_NODE	413:46	413:46	9	>
FIELD	413:48	413:48	8	16383
LEAF_NODE	413:48	413:48	9	16383
LEAF_NODE	413:54	413:54	4	)
STATEMENTS	413:56	417:2	4	
LEAF_NODE	413:56	413:56	5	{
STATEMENTS	414:6	416:6	5	
EXPR_STATEMENT	414:6	415:70	6	TIFFErrorExt ( tif -> tif_clientdata , module , "WEBP maximum image dimensions are 16383 x 16383." ) ;
EXPR	414:6	414:6	7	TIFFErrorExt ( tif -> tif_clientdata , module , "WEBP maximum image dimensions are 16383 x 16383." )
FUNCTION_CALL	414:6	415:69	8	TIFFErrorExt ( tif -> tif_clientdata , module , "WEBP maximum image dimensions are 16383 x 16383." )
CALLEE	414:6	414:6	9	TIFFErrorExt
LEAF_NODE	414:6	414:6	10	TIFFErrorExt
LEAF_NODE	414:18	414:18	9	(
ARGUMENT	414:19	414:19	9	tif -> tif_clientdata
FIELD	414:19	414:24	10	tif -> tif_clientdata
LEAF_NODE	414:19	414:19	11	tif
LEAF_NODE	414:22	414:22	11	->
LEAF_NODE	414:24	414:24	11	tif_clientdata
LEAF_NODE	414:38	414:38	9	,
ARGUMENT	414:40	414:40	9	module
FIELD	414:40	414:40	10	module
LEAF_NODE	414:40	414:40	11	module
LEAF_NODE	414:46	414:46	9	,
ARGUMENT	415:19	415:19	9	"WEBP maximum image dimensions are 16383 x 16383."
FIELD	415:19	415:19	10	"WEBP maximum image dimensions are 16383 x 16383."
LEAF_NODE	415:19	415:19	11	"WEBP maximum image dimensions are 16383 x 16383."
LEAF_NODE	415:69	415:69	9	)
LEAF_NODE	415:70	415:70	7	;
JUMP_STATEMENT	416:6	416:14	6	return 0 ;
KEYWORD	416:6	416:6	7	return
LEAF_NODE	416:6	416:6	8	return
DESTINATION	416:13	416:13	7	0
EXPR	416:13	416:13	8	0
FIELD	416:13	416:13	9	0
LEAF_NODE	416:13	416:13	10	0
LEAF_NODE	416:14	416:14	7	;
LEAF_NODE	417:2	417:2	5	}
LEAF_NODE	421:2	421:2	3	sp
LEAF_NODE	421:4	421:4	3	->
LEAF_NODE	421:6	421:6	3	buffer_size
LEAF_NODE	421:18	421:18	3	=
LEAF_NODE	421:20	421:20	3	segment_width
EXPR_STATEMENT	421:34	421:65	3	* segment_height * sp -> nSamples ;
EXPR	421:34	421:53	4	* segment_height * sp -> nSamples
UNARY_EXPR	421:34	421:36	5	* segment_height
UNARY_OPERATOR	421:34	421:34	6	*
LEAF_NODE	421:34	421:34	7	*
FIELD	421:36	421:36	6	segment_height
LEAF_NODE	421:36	421:36	7	segment_height
LEAF_NODE	421:51	421:51	5	*
FIELD	421:53	421:57	5	sp -> nSamples
LEAF_NODE	421:53	421:53	6	sp
LEAF_NODE	421:55	421:55	6	->
LEAF_NODE	421:57	421:57	6	nSamples
LEAF_NODE	421:65	421:65	4	;
SELECTION	423:2	423:27	3	
KEYWORD	423:2	423:2	4	if
LEAF_NODE	423:2	423:2	5	if
LEAF_NODE	423:5	423:5	4	(
CONDITION	423:6	423:6	4	sp -> pBuffer != NULL
EXPR	423:6	423:21	5	sp -> pBuffer != NULL
FIELD	423:6	423:10	6	sp -> pBuffer
LEAF_NODE	423:6	423:6	7	sp
LEAF_NODE	423:8	423:8	7	->
LEAF_NODE	423:10	423:10	7	pBuffer
EQ_OPERATOR	423:18	423:18	6	!=
LEAF_NODE	423:18	423:18	7	!=
FIELD	423:21	423:21	6	NULL
LEAF_NODE	423:21	423:21	7	NULL
LEAF_NODE	423:25	423:25	4	)
STATEMENTS	423:27	426:2	4	
LEAF_NODE	423:27	423:27	5	{
STATEMENTS	424:6	425:6	5	
EXPR_STATEMENT	424:6	424:28	6	_TIFFfree ( sp -> pBuffer ) ;
EXPR	424:6	424:6	7	_TIFFfree ( sp -> pBuffer )
FUNCTION_CALL	424:6	424:27	8	_TIFFfree ( sp -> pBuffer )
CALLEE	424:6	424:6	9	_TIFFfree
LEAF_NODE	424:6	424:6	10	_TIFFfree
LEAF_NODE	424:15	424:15	9	(
ARGUMENT	424:16	424:16	9	sp -> pBuffer
FIELD	424:16	424:20	10	sp -> pBuffer
LEAF_NODE	424:16	424:16	11	sp
LEAF_NODE	424:18	424:18	11	->
LEAF_NODE	424:20	424:20	11	pBuffer
LEAF_NODE	424:27	424:27	9	)
LEAF_NODE	424:28	424:28	7	;
EXPR_STATEMENT	425:6	425:24	6	sp -> pBuffer = NULL ;
EXPR	425:6	425:6	7	sp -> pBuffer = NULL
ASSIGN	425:6	425:20	8	sp -> pBuffer = NULL
LVAL	425:6	425:6	9	sp -> pBuffer
FIELD	425:6	425:10	10	sp -> pBuffer
LEAF_NODE	425:6	425:6	11	sp
LEAF_NODE	425:8	425:8	11	->
LEAF_NODE	425:10	425:10	11	pBuffer
ASSIGN_OP	425:18	425:18	9	=
LEAF_NODE	425:18	425:18	10	=
RVAL	425:20	425:20	9	NULL
FIELD	425:20	425:20	10	NULL
LEAF_NODE	425:20	425:20	11	NULL
LEAF_NODE	425:24	425:24	7	;
LEAF_NODE	426:2	426:2	5	}
EXPR_STATEMENT	428:2	428:44	3	sp -> pBuffer = _TIFFmalloc ( sp -> buffer_size ) ;
EXPR	428:2	428:2	4	sp -> pBuffer = _TIFFmalloc ( sp -> buffer_size )
ASSIGN	428:2	428:16	5	sp -> pBuffer = _TIFFmalloc ( sp -> buffer_size )
LVAL	428:2	428:2	6	sp -> pBuffer
FIELD	428:2	428:6	7	sp -> pBuffer
LEAF_NODE	428:2	428:2	8	sp
LEAF_NODE	428:4	428:4	8	->
LEAF_NODE	428:6	428:6	8	pBuffer
ASSIGN_OP	428:14	428:14	6	=
LEAF_NODE	428:14	428:14	7	=
RVAL	428:16	428:16	6	_TIFFmalloc ( sp -> buffer_size )
FUNCTION_CALL	428:16	428:43	7	_TIFFmalloc ( sp -> buffer_size )
CALLEE	428:16	428:16	8	_TIFFmalloc
LEAF_NODE	428:16	428:16	9	_TIFFmalloc
LEAF_NODE	428:27	428:27	8	(
ARGUMENT	428:28	428:28	8	sp -> buffer_size
FIELD	428:28	428:32	9	sp -> buffer_size
LEAF_NODE	428:28	428:28	10	sp
LEAF_NODE	428:30	428:30	10	->
LEAF_NODE	428:32	428:32	10	buffer_size
LEAF_NODE	428:43	428:43	8	)
LEAF_NODE	428:44	428:44	4	;
SELECTION	429:2	429:20	3	
KEYWORD	429:2	429:2	4	if
LEAF_NODE	429:2	429:2	5	if
LEAF_NODE	429:4	429:4	4	(
CONDITION	429:6	429:6	4	! sp -> pBuffer
EXPR	429:6	429:6	5	! sp -> pBuffer
UNARY_EXPR	429:6	429:7	6	! sp -> pBuffer
UNARY_OPERATOR	429:6	429:6	7	!
LEAF_NODE	429:6	429:6	8	!
FIELD	429:7	429:11	7	sp -> pBuffer
LEAF_NODE	429:7	429:7	8	sp
LEAF_NODE	429:9	429:9	8	->
LEAF_NODE	429:11	429:11	8	pBuffer
LEAF_NODE	429:18	429:18	4	)
STATEMENTS	429:20	432:2	4	
LEAF_NODE	429:20	429:20	5	{
STATEMENTS	430:6	431:6	5	
EXPR_STATEMENT	430:6	430:73	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate buffer" ) ;
EXPR	430:6	430:6	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate buffer" )
FUNCTION_CALL	430:6	430:72	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate buffer" )
CALLEE	430:6	430:6	9	TIFFErrorExt
LEAF_NODE	430:6	430:6	10	TIFFErrorExt
LEAF_NODE	430:18	430:18	9	(
ARGUMENT	430:19	430:19	9	tif -> tif_clientdata
FIELD	430:19	430:24	10	tif -> tif_clientdata
LEAF_NODE	430:19	430:19	11	tif
LEAF_NODE	430:22	430:22	11	->
LEAF_NODE	430:24	430:24	11	tif_clientdata
LEAF_NODE	430:38	430:38	9	,
ARGUMENT	430:40	430:40	9	module
FIELD	430:40	430:40	10	module
LEAF_NODE	430:40	430:40	11	module
LEAF_NODE	430:46	430:46	9	,
ARGUMENT	430:48	430:48	9	"Cannot allocate buffer"
FIELD	430:48	430:48	10	"Cannot allocate buffer"
LEAF_NODE	430:48	430:48	11	"Cannot allocate buffer"
LEAF_NODE	430:72	430:72	9	)
LEAF_NODE	430:73	430:73	7	;
JUMP_STATEMENT	431:6	431:14	6	return 0 ;
KEYWORD	431:6	431:6	7	return
LEAF_NODE	431:6	431:6	8	return
DESTINATION	431:13	431:13	7	0
EXPR	431:13	431:13	8	0
FIELD	431:13	431:13	9	0
LEAF_NODE	431:13	431:13	10	0
LEAF_NODE	431:14	431:14	7	;
LEAF_NODE	432:2	432:2	5	}
EXPR_STATEMENT	433:2	433:23	3	sp -> buffer_offset = 0 ;
EXPR	433:2	433:2	4	sp -> buffer_offset = 0
ASSIGN	433:2	433:22	5	sp -> buffer_offset = 0
LVAL	433:2	433:2	6	sp -> buffer_offset
FIELD	433:2	433:6	7	sp -> buffer_offset
LEAF_NODE	433:2	433:2	8	sp
LEAF_NODE	433:4	433:4	8	->
LEAF_NODE	433:6	433:6	8	buffer_offset
ASSIGN_OP	433:20	433:20	6	=
LEAF_NODE	433:20	433:20	7	=
RVAL	433:22	433:22	6	0
FIELD	433:22	433:22	7	0
LEAF_NODE	433:22	433:22	8	0
LEAF_NODE	433:23	433:23	4	;
EXPR_STATEMENT	435:2	435:36	3	sp -> sPicture . width = segment_width ;
EXPR	435:2	435:2	4	sp -> sPicture . width = segment_width
ASSIGN	435:2	435:23	5	sp -> sPicture . width = segment_width
LVAL	435:2	435:2	6	sp -> sPicture . width
FIELD	435:2	435:15	7	sp -> sPicture . width
LEAF_NODE	435:2	435:2	8	sp
LEAF_NODE	435:4	435:4	8	->
LEAF_NODE	435:6	435:6	8	sPicture
LEAF_NODE	435:14	435:14	8	.
LEAF_NODE	435:15	435:15	8	width
ASSIGN_OP	435:21	435:21	6	=
LEAF_NODE	435:21	435:21	7	=
RVAL	435:23	435:23	6	segment_width
FIELD	435:23	435:23	7	segment_width
LEAF_NODE	435:23	435:23	8	segment_width
LEAF_NODE	435:36	435:36	4	;
EXPR_STATEMENT	436:2	436:38	3	sp -> sPicture . height = segment_height ;
EXPR	436:2	436:2	4	sp -> sPicture . height = segment_height
ASSIGN	436:2	436:24	5	sp -> sPicture . height = segment_height
LVAL	436:2	436:2	6	sp -> sPicture . height
FIELD	436:2	436:15	7	sp -> sPicture . height
LEAF_NODE	436:2	436:2	8	sp
LEAF_NODE	436:4	436:4	8	->
LEAF_NODE	436:6	436:6	8	sPicture
LEAF_NODE	436:14	436:14	8	.
LEAF_NODE	436:15	436:15	8	height
ASSIGN_OP	436:22	436:22	6	=
LEAF_NODE	436:22	436:22	7	=
RVAL	436:24	436:24	6	segment_height
FIELD	436:24	436:24	7	segment_height
LEAF_NODE	436:24	436:24	8	segment_height
LEAF_NODE	436:38	436:38	4	;
EXPR_STATEMENT	437:2	437:42	3	sp -> sPicture . writer = TWebPDatasetWriter ;
EXPR	437:2	437:2	4	sp -> sPicture . writer = TWebPDatasetWriter
ASSIGN	437:2	437:24	5	sp -> sPicture . writer = TWebPDatasetWriter
LVAL	437:2	437:2	6	sp -> sPicture . writer
FIELD	437:2	437:15	7	sp -> sPicture . writer
LEAF_NODE	437:2	437:2	8	sp
LEAF_NODE	437:4	437:4	8	->
LEAF_NODE	437:6	437:6	8	sPicture
LEAF_NODE	437:14	437:14	8	.
LEAF_NODE	437:15	437:15	8	writer
ASSIGN_OP	437:22	437:22	6	=
LEAF_NODE	437:22	437:22	7	=
RVAL	437:24	437:24	6	TWebPDatasetWriter
FIELD	437:24	437:24	7	TWebPDatasetWriter
LEAF_NODE	437:24	437:24	8	TWebPDatasetWriter
LEAF_NODE	437:42	437:42	4	;
EXPR_STATEMENT	438:2	438:31	3	sp -> sPicture . custom_ptr = tif ;
EXPR	438:2	438:2	4	sp -> sPicture . custom_ptr = tif
ASSIGN	438:2	438:28	5	sp -> sPicture . custom_ptr = tif
LVAL	438:2	438:2	6	sp -> sPicture . custom_ptr
FIELD	438:2	438:15	7	sp -> sPicture . custom_ptr
LEAF_NODE	438:2	438:2	8	sp
LEAF_NODE	438:4	438:4	8	->
LEAF_NODE	438:6	438:6	8	sPicture
LEAF_NODE	438:14	438:14	8	.
LEAF_NODE	438:15	438:15	8	custom_ptr
ASSIGN_OP	438:26	438:26	6	=
LEAF_NODE	438:26	438:26	7	=
RVAL	438:28	438:28	6	tif
FIELD	438:28	438:28	7	tif
LEAF_NODE	438:28	438:28	8	tif
LEAF_NODE	438:31	438:31	4	;
JUMP_STATEMENT	440:2	440:10	3	return 1 ;
KEYWORD	440:2	440:2	4	return
LEAF_NODE	440:2	440:2	5	return
DESTINATION	440:9	440:9	4	1
EXPR	440:9	440:9	5	1
FIELD	440:9	440:9	6	1
LEAF_NODE	440:9	440:9	7	1
LEAF_NODE	440:10	440:10	4	;
LEAF_NODE	441:0	441:0	2	}
FUNCTION_DEF	446:0	529:0	1	
RETURN_TYPE	446:0	446:7	2	static int
LEAF_NODE	446:0	446:0	3	static
TYPE_NAME	446:7	446:7	3	int
LEAF_NODE	446:7	446:7	4	int
FUNCTION_NAME	447:0	447:0	2	TWebPPostEncode
LEAF_NODE	447:0	447:0	3	TWebPPostEncode
PARAMETER_LIST	447:15	447:25	2	( TIFF * tif )
LEAF_NODE	447:15	447:15	3	(
PARAMETER_DECL	447:16	447:22	3	TIFF * tif
TYPE	447:16	447:20	4	TIFF *
TYPE_NAME	447:16	447:16	5	TIFF
LEAF_NODE	447:16	447:16	6	TIFF
POINTER	447:20	447:20	5	*
LEAF_NODE	447:20	447:20	6	*
NAME	447:22	447:22	4	tif
LEAF_NODE	447:22	447:22	5	tif
LEAF_NODE	447:25	447:25	3	)
LEAF_NODE	448:0	448:0	2	{
STATEMENTS	449:2	528:2	2	
LEAF_NODE	449:2	449:2	3	static
SIMPLE_DECL	449:9	449:47	3	const char [ ] module ; module = "WebPPostEncode" ;
VAR_DECL	449:9	449:20	4	const char [ ] module ; module = "WebPPostEncode"
TYPE	449:9	449:26	5	const char [ ]
TYPE_NAME	449:9	449:15	6	const char
LEAF_NODE	449:9	449:9	7	const
LEAF_NODE	449:15	449:15	7	char
TYPE_SUFFIX	449:26	449:27	6	[ ]
LEAF_NODE	449:26	449:26	7	[
LEAF_NODE	449:27	449:27	7	]
NAME	449:20	449:20	5	module
LEAF_NODE	449:20	449:20	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	449:20	449:20	5	module = "WebPPostEncode"
ASSIGN	449:20	449:31	6	module = "WebPPostEncode"
LVAL	449:20	449:20	7	module
NAME	449:20	449:20	8	module
LEAF_NODE	449:20	449:20	9	module
ASSIGN_OP	449:29	449:29	7	=
LEAF_NODE	449:29	449:29	8	=
RVAL	449:31	449:31	7	"WebPPostEncode"
FIELD	449:31	449:31	8	"WebPPostEncode"
LEAF_NODE	449:31	449:31	9	"WebPPostEncode"
LEAF_NODE	449:47	449:47	4	;
SIMPLE_DECL	450:2	450:16	3	int64_t stride ;
VAR_DECL	450:2	450:10	4	int64_t stride
TYPE	450:2	450:2	5	int64_t
TYPE_NAME	450:2	450:2	6	int64_t
LEAF_NODE	450:2	450:2	7	int64_t
NAME	450:10	450:10	5	stride
LEAF_NODE	450:10	450:10	6	stride
LEAF_NODE	450:16	450:16	4	;
SIMPLE_DECL	451:2	451:35	3	WebPState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	451:2	451:13	4	WebPState * sp ; sp = EncoderState ( tif )
TYPE	451:2	451:12	5	WebPState *
TYPE_NAME	451:2	451:2	6	WebPState
LEAF_NODE	451:2	451:2	7	WebPState
POINTER	451:12	451:12	6	*
LEAF_NODE	451:12	451:12	7	*
NAME	451:13	451:13	5	sp
LEAF_NODE	451:13	451:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	451:13	451:13	5	sp = EncoderState ( tif )
ASSIGN	451:13	451:18	6	sp = EncoderState ( tif )
LVAL	451:13	451:13	7	sp
NAME	451:13	451:13	8	sp
LEAF_NODE	451:13	451:13	9	sp
ASSIGN_OP	451:16	451:16	7	=
LEAF_NODE	451:16	451:16	8	=
RVAL	451:18	451:18	7	EncoderState ( tif )
FUNCTION_CALL	451:18	451:34	8	EncoderState ( tif )
CALLEE	451:18	451:18	9	EncoderState
LEAF_NODE	451:18	451:18	10	EncoderState
LEAF_NODE	451:30	451:30	9	(
ARGUMENT	451:31	451:31	9	tif
FIELD	451:31	451:31	10	tif
LEAF_NODE	451:31	451:31	11	tif
LEAF_NODE	451:34	451:34	9	)
LEAF_NODE	451:35	451:35	4	;
EXPR_STATEMENT	452:2	452:20	3	assert ( sp != NULL ) ;
EXPR	452:2	452:2	4	assert ( sp != NULL )
FUNCTION_CALL	452:2	452:19	5	assert ( sp != NULL )
CALLEE	452:2	452:2	6	assert
LEAF_NODE	452:2	452:2	7	assert
LEAF_NODE	452:8	452:8	6	(
ARGUMENT	452:9	452:15	6	sp != NULL
FIELD	452:9	452:9	7	sp
LEAF_NODE	452:9	452:9	8	sp
EQ_OPERATOR	452:12	452:12	7	!=
LEAF_NODE	452:12	452:12	8	!=
FIELD	452:15	452:15	7	NULL
LEAF_NODE	452:15	452:15	8	NULL
LEAF_NODE	452:19	452:19	6	)
LEAF_NODE	452:20	452:20	4	;
EXPR_STATEMENT	454:2	454:41	3	assert ( sp -> state == LSTATE_INIT_ENCODE ) ;
EXPR	454:2	454:2	4	assert ( sp -> state == LSTATE_INIT_ENCODE )
FUNCTION_CALL	454:2	454:40	5	assert ( sp -> state == LSTATE_INIT_ENCODE )
CALLEE	454:2	454:2	6	assert
LEAF_NODE	454:2	454:2	7	assert
LEAF_NODE	454:8	454:8	6	(
ARGUMENT	454:9	454:22	6	sp -> state == LSTATE_INIT_ENCODE
FIELD	454:9	454:13	7	sp -> state
LEAF_NODE	454:9	454:9	8	sp
LEAF_NODE	454:11	454:11	8	->
LEAF_NODE	454:13	454:13	8	state
EQ_OPERATOR	454:19	454:19	7	==
LEAF_NODE	454:19	454:19	8	==
FIELD	454:22	454:22	7	LSTATE_INIT_ENCODE
LEAF_NODE	454:22	454:22	8	LSTATE_INIT_ENCODE
LEAF_NODE	454:40	454:40	6	)
LEAF_NODE	454:41	454:41	4	;
EXPR_STATEMENT	456:2	456:53	3	stride = ( int64_t ) sp -> sPicture . width * sp -> nSamples ;
EXPR	456:2	456:2	4	stride = ( int64_t ) sp -> sPicture . width * sp -> nSamples
ASSIGN	456:2	456:11	5	stride = ( int64_t ) sp -> sPicture . width * sp -> nSamples
LVAL	456:2	456:2	6	stride
FIELD	456:2	456:2	7	stride
LEAF_NODE	456:2	456:2	8	stride
ASSIGN_OP	456:9	456:9	6	=
LEAF_NODE	456:9	456:9	7	=
RVAL	456:11	456:41	6	( int64_t ) sp -> sPicture . width * sp -> nSamples
LEAF_NODE	456:11	456:11	7	(
TYPE_NAME	456:12	456:12	7	int64_t
LEAF_NODE	456:12	456:12	8	int64_t
LEAF_NODE	456:19	456:19	7	)
FIELD	456:20	456:33	7	sp -> sPicture . width
LEAF_NODE	456:20	456:20	8	sp
LEAF_NODE	456:22	456:22	8	->
LEAF_NODE	456:24	456:24	8	sPicture
LEAF_NODE	456:32	456:32	8	.
LEAF_NODE	456:33	456:33	8	width
LEAF_NODE	456:39	456:39	7	*
FIELD	456:41	456:45	7	sp -> nSamples
LEAF_NODE	456:41	456:41	8	sp
LEAF_NODE	456:43	456:43	8	->
LEAF_NODE	456:45	456:45	8	nSamples
LEAF_NODE	456:53	456:53	4	;
SELECTION	459:2	459:25	3	
KEYWORD	459:2	459:2	4	if
LEAF_NODE	459:2	459:2	5	if
LEAF_NODE	459:5	459:5	4	(
CONDITION	459:6	459:6	4	sp -> nSamples == 4
EXPR	459:6	459:22	5	sp -> nSamples == 4
FIELD	459:6	459:10	6	sp -> nSamples
LEAF_NODE	459:6	459:6	7	sp
LEAF_NODE	459:8	459:8	7	->
LEAF_NODE	459:10	459:10	7	nSamples
EQ_OPERATOR	459:19	459:19	6	==
LEAF_NODE	459:19	459:19	7	==
FIELD	459:22	459:22	6	4
LEAF_NODE	459:22	459:22	7	4
LEAF_NODE	459:23	459:23	4	)
STATEMENTS	459:25	465:2	4	
LEAF_NODE	459:25	459:25	5	{
STATEMENTS	460:6	460:6	5	
SELECTION	460:6	460:75	6	
KEYWORD	460:6	460:6	7	if
LEAF_NODE	460:6	460:6	8	if
LEAF_NODE	460:9	460:9	7	(
CONDITION	460:10	460:10	7	! WebPPictureImportRGBA ( & sp -> sPicture , sp -> pBuffer , ( int ) stride )
EXPR	460:10	460:10	8	! WebPPictureImportRGBA ( & sp -> sPicture , sp -> pBuffer , ( int ) stride )
UNARY_EXPR	460:10	460:11	9	! WebPPictureImportRGBA ( & sp -> sPicture , sp -> pBuffer , ( int ) stride )
UNARY_OPERATOR	460:10	460:10	10	!
LEAF_NODE	460:10	460:10	11	!
FUNCTION_CALL	460:11	460:72	10	WebPPictureImportRGBA ( & sp -> sPicture , sp -> pBuffer , ( int ) stride )
CALLEE	460:11	460:11	11	WebPPictureImportRGBA
LEAF_NODE	460:11	460:11	12	WebPPictureImportRGBA
LEAF_NODE	460:32	460:32	11	(
ARGUMENT	460:33	460:33	11	& sp -> sPicture
UNARY_EXPR	460:33	460:34	12	& sp -> sPicture
UNARY_OPERATOR	460:33	460:33	13	&
LEAF_NODE	460:33	460:33	14	&
FIELD	460:34	460:38	13	sp -> sPicture
LEAF_NODE	460:34	460:34	14	sp
LEAF_NODE	460:36	460:36	14	->
LEAF_NODE	460:38	460:38	14	sPicture
LEAF_NODE	460:46	460:46	11	,
ARGUMENT	460:48	460:48	11	sp -> pBuffer
FIELD	460:48	460:52	12	sp -> pBuffer
LEAF_NODE	460:48	460:48	13	sp
LEAF_NODE	460:50	460:50	13	->
LEAF_NODE	460:52	460:52	13	pBuffer
LEAF_NODE	460:59	460:59	11	,
ARGUMENT	460:61	460:66	11	( int ) stride
LEAF_NODE	460:61	460:61	12	(
TYPE_NAME	460:62	460:62	12	int
LEAF_NODE	460:62	460:62	13	int
LEAF_NODE	460:65	460:65	12	)
FIELD	460:66	460:66	12	stride
LEAF_NODE	460:66	460:66	13	stride
LEAF_NODE	460:72	460:72	11	)
LEAF_NODE	460:73	460:73	7	)
STATEMENTS	460:75	464:6	7	
LEAF_NODE	460:75	460:75	8	{
STATEMENTS	461:10	463:10	8	
EXPR_STATEMENT	461:10	462:54	9	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPPictureImportRGBA() failed" ) ;
EXPR	461:10	461:10	10	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPPictureImportRGBA() failed" )
FUNCTION_CALL	461:10	462:53	11	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPPictureImportRGBA() failed" )
CALLEE	461:10	461:10	12	TIFFErrorExt
LEAF_NODE	461:10	461:10	13	TIFFErrorExt
LEAF_NODE	461:22	461:22	12	(
ARGUMENT	461:23	461:23	12	tif -> tif_clientdata
FIELD	461:23	461:28	13	tif -> tif_clientdata
LEAF_NODE	461:23	461:23	14	tif
LEAF_NODE	461:26	461:26	14	->
LEAF_NODE	461:28	461:28	14	tif_clientdata
LEAF_NODE	461:42	461:42	12	,
ARGUMENT	461:44	461:44	12	module
FIELD	461:44	461:44	13	module
LEAF_NODE	461:44	461:44	14	module
LEAF_NODE	461:50	461:50	12	,
ARGUMENT	462:20	462:20	12	"WebPPictureImportRGBA() failed"
FIELD	462:20	462:20	13	"WebPPictureImportRGBA() failed"
LEAF_NODE	462:20	462:20	14	"WebPPictureImportRGBA() failed"
LEAF_NODE	462:53	462:53	12	)
LEAF_NODE	462:54	462:54	10	;
JUMP_STATEMENT	463:10	463:18	9	return 0 ;
KEYWORD	463:10	463:10	10	return
LEAF_NODE	463:10	463:10	11	return
DESTINATION	463:17	463:17	10	0
EXPR	463:17	463:17	11	0
FIELD	463:17	463:17	12	0
LEAF_NODE	463:17	463:17	13	0
LEAF_NODE	463:18	463:18	10	;
LEAF_NODE	464:6	464:6	8	}
LEAF_NODE	465:2	465:2	5	}
SELECTION	466:2	468:2	3	
KEYWORD	466:2	466:2	4	else
LEAF_NODE	466:2	466:2	5	else
STATEMENTS	468:2	468:2	4	
SELECTION	468:2	468:70	5	
KEYWORD	468:2	468:2	6	if
LEAF_NODE	468:2	468:2	7	if
LEAF_NODE	468:5	468:5	6	(
CONDITION	468:6	468:6	6	! WebPPictureImportRGB ( & sp -> sPicture , sp -> pBuffer , ( int ) stride )
EXPR	468:6	468:6	7	! WebPPictureImportRGB ( & sp -> sPicture , sp -> pBuffer , ( int ) stride )
UNARY_EXPR	468:6	468:7	8	! WebPPictureImportRGB ( & sp -> sPicture , sp -> pBuffer , ( int ) stride )
UNARY_OPERATOR	468:6	468:6	9	!
LEAF_NODE	468:6	468:6	10	!
FUNCTION_CALL	468:7	468:67	9	WebPPictureImportRGB ( & sp -> sPicture , sp -> pBuffer , ( int ) stride )
CALLEE	468:7	468:7	10	WebPPictureImportRGB
LEAF_NODE	468:7	468:7	11	WebPPictureImportRGB
LEAF_NODE	468:27	468:27	10	(
ARGUMENT	468:28	468:28	10	& sp -> sPicture
UNARY_EXPR	468:28	468:29	11	& sp -> sPicture
UNARY_OPERATOR	468:28	468:28	12	&
LEAF_NODE	468:28	468:28	13	&
FIELD	468:29	468:33	12	sp -> sPicture
LEAF_NODE	468:29	468:29	13	sp
LEAF_NODE	468:31	468:31	13	->
LEAF_NODE	468:33	468:33	13	sPicture
LEAF_NODE	468:41	468:41	10	,
ARGUMENT	468:43	468:43	10	sp -> pBuffer
FIELD	468:43	468:47	11	sp -> pBuffer
LEAF_NODE	468:43	468:43	12	sp
LEAF_NODE	468:45	468:45	12	->
LEAF_NODE	468:47	468:47	12	pBuffer
LEAF_NODE	468:54	468:54	10	,
ARGUMENT	468:56	468:61	10	( int ) stride
LEAF_NODE	468:56	468:56	11	(
TYPE_NAME	468:57	468:57	11	int
LEAF_NODE	468:57	468:57	12	int
LEAF_NODE	468:60	468:60	11	)
FIELD	468:61	468:61	11	stride
LEAF_NODE	468:61	468:61	12	stride
LEAF_NODE	468:67	468:67	10	)
LEAF_NODE	468:68	468:68	6	)
STATEMENTS	468:70	472:2	6	
LEAF_NODE	468:70	468:70	7	{
STATEMENTS	469:6	471:6	7	
EXPR_STATEMENT	469:6	470:52	8	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPPictureImportRGB() failed" ) ;
EXPR	469:6	469:6	9	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPPictureImportRGB() failed" )
FUNCTION_CALL	469:6	470:51	10	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPPictureImportRGB() failed" )
CALLEE	469:6	469:6	11	TIFFErrorExt
LEAF_NODE	469:6	469:6	12	TIFFErrorExt
LEAF_NODE	469:18	469:18	11	(
ARGUMENT	469:19	469:19	11	tif -> tif_clientdata
FIELD	469:19	469:24	12	tif -> tif_clientdata
LEAF_NODE	469:19	469:19	13	tif
LEAF_NODE	469:22	469:22	13	->
LEAF_NODE	469:24	469:24	13	tif_clientdata
LEAF_NODE	469:38	469:38	11	,
ARGUMENT	469:40	469:40	11	module
FIELD	469:40	469:40	12	module
LEAF_NODE	469:40	469:40	13	module
LEAF_NODE	469:46	469:46	11	,
ARGUMENT	470:20	470:20	11	"WebPPictureImportRGB() failed"
FIELD	470:20	470:20	12	"WebPPictureImportRGB() failed"
LEAF_NODE	470:20	470:20	13	"WebPPictureImportRGB() failed"
LEAF_NODE	470:51	470:51	11	)
LEAF_NODE	470:52	470:52	9	;
JUMP_STATEMENT	471:6	471:14	8	return 0 ;
KEYWORD	471:6	471:6	9	return
LEAF_NODE	471:6	471:6	10	return
DESTINATION	471:13	471:13	9	0
EXPR	471:13	471:13	10	0
FIELD	471:13	471:13	11	0
LEAF_NODE	471:13	471:13	12	0
LEAF_NODE	471:14	471:14	9	;
LEAF_NODE	472:2	472:2	7	}
SELECTION	474:2	474:55	3	
KEYWORD	474:2	474:2	4	if
LEAF_NODE	474:2	474:2	5	if
LEAF_NODE	474:5	474:5	4	(
CONDITION	474:6	474:6	4	! WebPEncode ( & sp -> sEncoderConfig , & sp -> sPicture )
EXPR	474:6	474:6	5	! WebPEncode ( & sp -> sEncoderConfig , & sp -> sPicture )
UNARY_EXPR	474:6	474:7	6	! WebPEncode ( & sp -> sEncoderConfig , & sp -> sPicture )
UNARY_OPERATOR	474:6	474:6	7	!
LEAF_NODE	474:6	474:6	8	!
FUNCTION_CALL	474:7	474:52	7	WebPEncode ( & sp -> sEncoderConfig , & sp -> sPicture )
CALLEE	474:7	474:7	8	WebPEncode
LEAF_NODE	474:7	474:7	9	WebPEncode
LEAF_NODE	474:17	474:17	8	(
ARGUMENT	474:18	474:18	8	& sp -> sEncoderConfig
UNARY_EXPR	474:18	474:19	9	& sp -> sEncoderConfig
UNARY_OPERATOR	474:18	474:18	10	&
LEAF_NODE	474:18	474:18	11	&
FIELD	474:19	474:23	10	sp -> sEncoderConfig
LEAF_NODE	474:19	474:19	11	sp
LEAF_NODE	474:21	474:21	11	->
LEAF_NODE	474:23	474:23	11	sEncoderConfig
LEAF_NODE	474:37	474:37	8	,
ARGUMENT	474:39	474:39	8	& sp -> sPicture
UNARY_EXPR	474:39	474:40	9	& sp -> sPicture
UNARY_OPERATOR	474:39	474:39	10	&
LEAF_NODE	474:39	474:39	11	&
FIELD	474:40	474:44	10	sp -> sPicture
LEAF_NODE	474:40	474:40	11	sp
LEAF_NODE	474:42	474:42	11	->
LEAF_NODE	474:44	474:44	11	sPicture
LEAF_NODE	474:52	474:52	8	)
LEAF_NODE	474:53	474:53	4	)
STATEMENTS	474:55	517:2	4	
LEAF_NODE	474:55	474:55	5	{
STATEMENTS	477:4	516:4	5	
SIMPLE_DECL	477:4	477:34	6	const char * pszErrorMsg ; pszErrorMsg = NULL ;
VAR_DECL	477:4	477:16	7	const char * pszErrorMsg ; pszErrorMsg = NULL
TYPE	477:4	477:14	8	const char *
TYPE_NAME	477:4	477:10	9	const char
LEAF_NODE	477:4	477:4	10	const
LEAF_NODE	477:10	477:10	10	char
POINTER	477:14	477:14	9	*
LEAF_NODE	477:14	477:14	10	*
NAME	477:16	477:16	8	pszErrorMsg
LEAF_NODE	477:16	477:16	9	pszErrorMsg
LEAF_NODE	0:0	0:0	8	;
INIT	477:16	477:16	8	pszErrorMsg = NULL
ASSIGN	477:16	477:30	9	pszErrorMsg = NULL
LVAL	477:16	477:16	10	pszErrorMsg
NAME	477:16	477:16	11	pszErrorMsg
LEAF_NODE	477:16	477:16	12	pszErrorMsg
ASSIGN_OP	477:28	477:28	10	=
LEAF_NODE	477:28	477:28	11	=
RVAL	477:30	477:30	10	NULL
FIELD	477:30	477:30	11	NULL
LEAF_NODE	477:30	477:30	12	NULL
LEAF_NODE	477:34	477:34	7	;
SELECTION	478:4	478:36	6	
KEYWORD	478:4	478:4	7	switch
LEAF_NODE	478:4	478:4	8	switch
LEAF_NODE	478:10	478:10	7	(
CONDITION	478:11	478:11	7	sp -> sPicture . error_code
EXPR	478:11	478:11	8	sp -> sPicture . error_code
FIELD	478:11	478:24	9	sp -> sPicture . error_code
LEAF_NODE	478:11	478:11	10	sp
LEAF_NODE	478:13	478:13	10	->
LEAF_NODE	478:15	478:15	10	sPicture
LEAF_NODE	478:23	478:23	10	.
LEAF_NODE	478:24	478:24	10	error_code
LEAF_NODE	478:34	478:34	7	)
STATEMENTS	478:36	509:4	7	
LEAF_NODE	478:36	478:36	8	{
STATEMENTS	479:4	508:8	8	
LABEL	479:4	479:36	9	case VP8_ENC_ERROR_OUT_OF_MEMORY :
LEAF_NODE	479:4	479:4	10	case
LEAF_NODE	479:9	479:9	10	VP8_ENC_ERROR_OUT_OF_MEMORY
LEAF_NODE	479:36	479:36	10	:
EXPR_STATEMENT	480:8	480:37	9	pszErrorMsg = "Out of memory" ;
EXPR	480:8	480:8	10	pszErrorMsg = "Out of memory"
ASSIGN	480:8	480:22	11	pszErrorMsg = "Out of memory"
LVAL	480:8	480:8	12	pszErrorMsg
FIELD	480:8	480:8	13	pszErrorMsg
LEAF_NODE	480:8	480:8	14	pszErrorMsg
ASSIGN_OP	480:20	480:20	12	=
LEAF_NODE	480:20	480:20	13	=
RVAL	480:22	480:22	12	"Out of memory"
FIELD	480:22	480:22	13	"Out of memory"
LEAF_NODE	480:22	480:22	14	"Out of memory"
LEAF_NODE	480:37	480:37	10	;
JUMP_STATEMENT	480:39	480:44	9	break DESTINATION ;
KEYWORD	480:39	480:39	10	break
LEAF_NODE	480:39	480:39	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	480:44	480:44	10	;
LABEL	481:4	481:46	9	case VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY :
LEAF_NODE	481:4	481:4	10	case
LEAF_NODE	481:9	481:9	10	VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY
LEAF_NODE	481:46	481:46	10	:
EXPR_STATEMENT	482:8	482:57	9	pszErrorMsg = "Out of memory while flushing bits" ;
EXPR	482:8	482:8	10	pszErrorMsg = "Out of memory while flushing bits"
ASSIGN	482:8	482:22	11	pszErrorMsg = "Out of memory while flushing bits"
LVAL	482:8	482:8	12	pszErrorMsg
FIELD	482:8	482:8	13	pszErrorMsg
LEAF_NODE	482:8	482:8	14	pszErrorMsg
ASSIGN_OP	482:20	482:20	12	=
LEAF_NODE	482:20	482:20	13	=
RVAL	482:22	482:22	12	"Out of memory while flushing bits"
FIELD	482:22	482:22	13	"Out of memory while flushing bits"
LEAF_NODE	482:22	482:22	14	"Out of memory while flushing bits"
LEAF_NODE	482:57	482:57	10	;
JUMP_STATEMENT	482:59	482:64	9	break DESTINATION ;
KEYWORD	482:59	482:59	10	break
LEAF_NODE	482:59	482:59	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	482:64	482:64	10	;
LABEL	483:4	483:37	9	case VP8_ENC_ERROR_NULL_PARAMETER :
LEAF_NODE	483:4	483:4	10	case
LEAF_NODE	483:9	483:9	10	VP8_ENC_ERROR_NULL_PARAMETER
LEAF_NODE	483:37	483:37	10	:
EXPR_STATEMENT	484:8	484:51	9	pszErrorMsg = "A pointer parameter is NULL" ;
EXPR	484:8	484:8	10	pszErrorMsg = "A pointer parameter is NULL"
ASSIGN	484:8	484:22	11	pszErrorMsg = "A pointer parameter is NULL"
LVAL	484:8	484:8	12	pszErrorMsg
FIELD	484:8	484:8	13	pszErrorMsg
LEAF_NODE	484:8	484:8	14	pszErrorMsg
ASSIGN_OP	484:20	484:20	12	=
LEAF_NODE	484:20	484:20	13	=
RVAL	484:22	484:22	12	"A pointer parameter is NULL"
FIELD	484:22	484:22	13	"A pointer parameter is NULL"
LEAF_NODE	484:22	484:22	14	"A pointer parameter is NULL"
LEAF_NODE	484:51	484:51	10	;
JUMP_STATEMENT	484:53	484:58	9	break DESTINATION ;
KEYWORD	484:53	484:53	10	break
LEAF_NODE	484:53	484:53	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	484:58	484:58	10	;
LABEL	485:4	485:44	9	case VP8_ENC_ERROR_INVALID_CONFIGURATION :
LEAF_NODE	485:4	485:4	10	case
LEAF_NODE	485:9	485:9	10	VP8_ENC_ERROR_INVALID_CONFIGURATION
LEAF_NODE	485:44	485:44	10	:
EXPR_STATEMENT	486:8	486:48	9	pszErrorMsg = "Configuration is invalid" ;
EXPR	486:8	486:8	10	pszErrorMsg = "Configuration is invalid"
ASSIGN	486:8	486:22	11	pszErrorMsg = "Configuration is invalid"
LVAL	486:8	486:8	12	pszErrorMsg
FIELD	486:8	486:8	13	pszErrorMsg
LEAF_NODE	486:8	486:8	14	pszErrorMsg
ASSIGN_OP	486:20	486:20	12	=
LEAF_NODE	486:20	486:20	13	=
RVAL	486:22	486:22	12	"Configuration is invalid"
FIELD	486:22	486:22	13	"Configuration is invalid"
LEAF_NODE	486:22	486:22	14	"Configuration is invalid"
LEAF_NODE	486:48	486:48	10	;
JUMP_STATEMENT	486:50	486:55	9	break DESTINATION ;
KEYWORD	486:50	486:50	10	break
LEAF_NODE	486:50	486:50	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	486:55	486:55	10	;
LABEL	487:4	487:36	9	case VP8_ENC_ERROR_BAD_DIMENSION :
LEAF_NODE	487:4	487:4	10	case
LEAF_NODE	487:9	487:9	10	VP8_ENC_ERROR_BAD_DIMENSION
LEAF_NODE	487:36	487:36	10	:
EXPR_STATEMENT	488:8	488:56	9	pszErrorMsg = "Picture has invalid width/height" ;
EXPR	488:8	488:8	10	pszErrorMsg = "Picture has invalid width/height"
ASSIGN	488:8	488:22	11	pszErrorMsg = "Picture has invalid width/height"
LVAL	488:8	488:8	12	pszErrorMsg
FIELD	488:8	488:8	13	pszErrorMsg
LEAF_NODE	488:8	488:8	14	pszErrorMsg
ASSIGN_OP	488:20	488:20	12	=
LEAF_NODE	488:20	488:20	13	=
RVAL	488:22	488:22	12	"Picture has invalid width/height"
FIELD	488:22	488:22	13	"Picture has invalid width/height"
LEAF_NODE	488:22	488:22	14	"Picture has invalid width/height"
LEAF_NODE	488:56	488:56	10	;
JUMP_STATEMENT	488:58	488:63	9	break DESTINATION ;
KEYWORD	488:58	488:58	10	break
LEAF_NODE	488:58	488:58	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	488:63	488:63	10	;
LABEL	489:4	489:42	9	case VP8_ENC_ERROR_PARTITION0_OVERFLOW :
LEAF_NODE	489:4	489:4	10	case
LEAF_NODE	489:9	489:9	10	VP8_ENC_ERROR_PARTITION0_OVERFLOW
LEAF_NODE	489:42	489:42	10	:
LEAF_NODE	490:8	490:8	9	pszErrorMsg
LEAF_NODE	490:20	490:20	9	=
LEAF_NODE	490:22	490:22	9	"Partition is bigger than 512k. Try using less "
EXPR_STATEMENT	491:12	491:57	9	"SEGMENTS, or increase PARTITION_LIMIT value" ;
EXPR	491:12	491:12	10	"SEGMENTS, or increase PARTITION_LIMIT value"
FIELD	491:12	491:12	11	"SEGMENTS, or increase PARTITION_LIMIT value"
LEAF_NODE	491:12	491:12	12	"SEGMENTS, or increase PARTITION_LIMIT value"
LEAF_NODE	491:57	491:57	10	;
JUMP_STATEMENT	492:8	492:13	9	break DESTINATION ;
KEYWORD	492:8	492:8	10	break
LEAF_NODE	492:8	492:8	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	492:13	492:13	10	;
LABEL	493:4	493:41	9	case VP8_ENC_ERROR_PARTITION_OVERFLOW :
LEAF_NODE	493:4	493:4	10	case
LEAF_NODE	493:9	493:9	10	VP8_ENC_ERROR_PARTITION_OVERFLOW
LEAF_NODE	493:41	493:41	10	:
EXPR_STATEMENT	494:8	494:52	9	pszErrorMsg = "Partition is bigger than 16M" ;
EXPR	494:8	494:8	10	pszErrorMsg = "Partition is bigger than 16M"
ASSIGN	494:8	494:22	11	pszErrorMsg = "Partition is bigger than 16M"
LVAL	494:8	494:8	12	pszErrorMsg
FIELD	494:8	494:8	13	pszErrorMsg
LEAF_NODE	494:8	494:8	14	pszErrorMsg
ASSIGN_OP	494:20	494:20	12	=
LEAF_NODE	494:20	494:20	13	=
RVAL	494:22	494:22	12	"Partition is bigger than 16M"
FIELD	494:22	494:22	13	"Partition is bigger than 16M"
LEAF_NODE	494:22	494:22	14	"Partition is bigger than 16M"
LEAF_NODE	494:52	494:52	10	;
JUMP_STATEMENT	495:8	495:13	9	break DESTINATION ;
KEYWORD	495:8	495:8	10	break
LEAF_NODE	495:8	495:8	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	495:13	495:13	10	;
LABEL	496:4	496:32	9	case VP8_ENC_ERROR_BAD_WRITE :
LEAF_NODE	496:4	496:4	10	case
LEAF_NODE	496:9	496:9	10	VP8_ENC_ERROR_BAD_WRITE
LEAF_NODE	496:32	496:32	10	:
EXPR_STATEMENT	497:8	497:51	9	pszErrorMsg = "Error while fludshing bytes" ;
EXPR	497:8	497:8	10	pszErrorMsg = "Error while fludshing bytes"
ASSIGN	497:8	497:22	11	pszErrorMsg = "Error while fludshing bytes"
LVAL	497:8	497:8	12	pszErrorMsg
FIELD	497:8	497:8	13	pszErrorMsg
LEAF_NODE	497:8	497:8	14	pszErrorMsg
ASSIGN_OP	497:20	497:20	12	=
LEAF_NODE	497:20	497:20	13	=
RVAL	497:22	497:22	12	"Error while fludshing bytes"
FIELD	497:22	497:22	13	"Error while fludshing bytes"
LEAF_NODE	497:22	497:22	14	"Error while fludshing bytes"
LEAF_NODE	497:51	497:51	10	;
JUMP_STATEMENT	497:53	497:58	9	break DESTINATION ;
KEYWORD	497:53	497:53	10	break
LEAF_NODE	497:53	497:53	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	497:58	497:58	10	;
LABEL	498:4	498:35	9	case VP8_ENC_ERROR_FILE_TOO_BIG :
LEAF_NODE	498:4	498:4	10	case
LEAF_NODE	498:9	498:9	10	VP8_ENC_ERROR_FILE_TOO_BIG
LEAF_NODE	498:35	498:35	10	:
EXPR_STATEMENT	499:8	499:46	9	pszErrorMsg = "File is bigger than 4G" ;
EXPR	499:8	499:8	10	pszErrorMsg = "File is bigger than 4G"
ASSIGN	499:8	499:22	11	pszErrorMsg = "File is bigger than 4G"
LVAL	499:8	499:8	12	pszErrorMsg
FIELD	499:8	499:8	13	pszErrorMsg
LEAF_NODE	499:8	499:8	14	pszErrorMsg
ASSIGN_OP	499:20	499:20	12	=
LEAF_NODE	499:20	499:20	13	=
RVAL	499:22	499:22	12	"File is bigger than 4G"
FIELD	499:22	499:22	13	"File is bigger than 4G"
LEAF_NODE	499:22	499:22	14	"File is bigger than 4G"
LEAF_NODE	499:46	499:46	10	;
JUMP_STATEMENT	499:48	499:53	9	break DESTINATION ;
KEYWORD	499:48	499:48	10	break
LEAF_NODE	499:48	499:48	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	499:53	499:53	10	;
LABEL	500:4	500:33	9	case VP8_ENC_ERROR_USER_ABORT :
LEAF_NODE	500:4	500:4	10	case
LEAF_NODE	500:9	500:9	10	VP8_ENC_ERROR_USER_ABORT
LEAF_NODE	500:33	500:33	10	:
EXPR_STATEMENT	501:8	501:40	9	pszErrorMsg = "User interrupted" ;
EXPR	501:8	501:8	10	pszErrorMsg = "User interrupted"
ASSIGN	501:8	501:22	11	pszErrorMsg = "User interrupted"
LVAL	501:8	501:8	12	pszErrorMsg
FIELD	501:8	501:8	13	pszErrorMsg
LEAF_NODE	501:8	501:8	14	pszErrorMsg
ASSIGN_OP	501:20	501:20	12	=
LEAF_NODE	501:20	501:20	13	=
RVAL	501:22	501:22	12	"User interrupted"
FIELD	501:22	501:22	13	"User interrupted"
LEAF_NODE	501:22	501:22	14	"User interrupted"
LEAF_NODE	501:40	501:40	10	;
JUMP_STATEMENT	502:8	502:13	9	break DESTINATION ;
KEYWORD	502:8	502:8	10	break
LEAF_NODE	502:8	502:8	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	502:13	502:13	10	;
LABEL	503:4	503:11	9	default :
LEAF_NODE	503:4	503:4	10	default
LEAF_NODE	503:11	503:11	10	:
EXPR_STATEMENT	504:8	506:40	9	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPEncode returned an unknown error code: %d" , sp -> sPicture . error_code ) ;
EXPR	504:8	504:8	10	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPEncode returned an unknown error code: %d" , sp -> sPicture . error_code )
FUNCTION_CALL	504:8	506:39	11	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPEncode returned an unknown error code: %d" , sp -> sPicture . error_code )
CALLEE	504:8	504:8	12	TIFFErrorExt
LEAF_NODE	504:8	504:8	13	TIFFErrorExt
LEAF_NODE	504:20	504:20	12	(
ARGUMENT	504:21	504:21	12	tif -> tif_clientdata
FIELD	504:21	504:26	13	tif -> tif_clientdata
LEAF_NODE	504:21	504:21	14	tif
LEAF_NODE	504:24	504:24	14	->
LEAF_NODE	504:26	504:26	14	tif_clientdata
LEAF_NODE	504:40	504:40	12	,
ARGUMENT	504:42	504:42	12	module
FIELD	504:42	504:42	13	module
LEAF_NODE	504:42	504:42	14	module
LEAF_NODE	504:48	504:48	12	,
ARGUMENT	505:16	505:16	12	"WebPEncode returned an unknown error code: %d"
FIELD	505:16	505:16	13	"WebPEncode returned an unknown error code: %d"
LEAF_NODE	505:16	505:16	14	"WebPEncode returned an unknown error code: %d"
LEAF_NODE	505:63	505:63	12	,
ARGUMENT	506:16	506:16	12	sp -> sPicture . error_code
FIELD	506:16	506:29	13	sp -> sPicture . error_code
LEAF_NODE	506:16	506:16	14	sp
LEAF_NODE	506:18	506:18	14	->
LEAF_NODE	506:20	506:20	14	sPicture
LEAF_NODE	506:28	506:28	14	.
LEAF_NODE	506:29	506:29	14	error_code
LEAF_NODE	506:39	506:39	12	)
LEAF_NODE	506:40	506:40	10	;
EXPR_STATEMENT	507:8	507:48	9	pszErrorMsg = "Unknown WebP error type." ;
EXPR	507:8	507:8	10	pszErrorMsg = "Unknown WebP error type."
ASSIGN	507:8	507:22	11	pszErrorMsg = "Unknown WebP error type."
LVAL	507:8	507:8	12	pszErrorMsg
FIELD	507:8	507:8	13	pszErrorMsg
LEAF_NODE	507:8	507:8	14	pszErrorMsg
ASSIGN_OP	507:20	507:20	12	=
LEAF_NODE	507:20	507:20	13	=
RVAL	507:22	507:22	12	"Unknown WebP error type."
FIELD	507:22	507:22	13	"Unknown WebP error type."
LEAF_NODE	507:22	507:22	14	"Unknown WebP error type."
LEAF_NODE	507:48	507:48	10	;
JUMP_STATEMENT	508:8	508:13	9	break DESTINATION ;
KEYWORD	508:8	508:8	10	break
LEAF_NODE	508:8	508:8	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	508:13	508:13	10	;
LEAF_NODE	509:4	509:4	8	}
EXPR_STATEMENT	510:4	511:53	6	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPEncode() failed : %s" , pszErrorMsg ) ;
EXPR	510:4	510:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPEncode() failed : %s" , pszErrorMsg )
FUNCTION_CALL	510:4	511:52	8	TIFFErrorExt ( tif -> tif_clientdata , module , "WebPEncode() failed : %s" , pszErrorMsg )
CALLEE	510:4	510:4	9	TIFFErrorExt
LEAF_NODE	510:4	510:4	10	TIFFErrorExt
LEAF_NODE	510:16	510:16	9	(
ARGUMENT	510:17	510:17	9	tif -> tif_clientdata
FIELD	510:17	510:22	10	tif -> tif_clientdata
LEAF_NODE	510:17	510:17	11	tif
LEAF_NODE	510:20	510:20	11	->
LEAF_NODE	510:22	510:22	11	tif_clientdata
LEAF_NODE	510:36	510:36	9	,
ARGUMENT	510:38	510:38	9	module
FIELD	510:38	510:38	10	module
LEAF_NODE	510:38	510:38	11	module
LEAF_NODE	510:44	510:44	9	,
ARGUMENT	511:13	511:13	9	"WebPEncode() failed : %s"
FIELD	511:13	511:13	10	"WebPEncode() failed : %s"
LEAF_NODE	511:13	511:13	11	"WebPEncode() failed : %s"
LEAF_NODE	511:39	511:39	9	,
ARGUMENT	511:41	511:41	9	pszErrorMsg
FIELD	511:41	511:41	10	pszErrorMsg
LEAF_NODE	511:41	511:41	11	pszErrorMsg
LEAF_NODE	511:52	511:52	9	)
LEAF_NODE	511:53	511:53	7	;
EXPR_STATEMENT	513:4	514:37	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in WebPEncode()" ) ;
EXPR	513:4	513:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in WebPEncode()" )
FUNCTION_CALL	513:4	514:36	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in WebPEncode()" )
CALLEE	513:4	513:4	9	TIFFErrorExt
LEAF_NODE	513:4	513:4	10	TIFFErrorExt
LEAF_NODE	513:16	513:16	9	(
ARGUMENT	513:17	513:17	9	tif -> tif_clientdata
FIELD	513:17	513:22	10	tif -> tif_clientdata
LEAF_NODE	513:17	513:17	11	tif
LEAF_NODE	513:20	513:20	11	->
LEAF_NODE	513:22	513:22	11	tif_clientdata
LEAF_NODE	513:36	513:36	9	,
ARGUMENT	513:38	513:38	9	module
FIELD	513:38	513:38	10	module
LEAF_NODE	513:38	513:38	11	module
LEAF_NODE	513:44	513:44	9	,
ARGUMENT	514:13	514:13	9	"Error in WebPEncode()"
FIELD	514:13	514:13	10	"Error in WebPEncode()"
LEAF_NODE	514:13	514:13	11	"Error in WebPEncode()"
LEAF_NODE	514:36	514:36	9	)
LEAF_NODE	514:37	514:37	7	;
JUMP_STATEMENT	516:4	516:12	6	return 0 ;
KEYWORD	516:4	516:4	7	return
LEAF_NODE	516:4	516:4	8	return
DESTINATION	516:11	516:11	7	0
EXPR	516:11	516:11	8	0
FIELD	516:11	516:11	9	0
LEAF_NODE	516:11	516:11	10	0
LEAF_NODE	516:12	516:12	7	;
LEAF_NODE	517:2	517:2	5	}
EXPR_STATEMENT	519:2	519:32	3	sp -> sPicture . custom_ptr = NULL ;
EXPR	519:2	519:2	4	sp -> sPicture . custom_ptr = NULL
ASSIGN	519:2	519:28	5	sp -> sPicture . custom_ptr = NULL
LVAL	519:2	519:2	6	sp -> sPicture . custom_ptr
FIELD	519:2	519:15	7	sp -> sPicture . custom_ptr
LEAF_NODE	519:2	519:2	8	sp
LEAF_NODE	519:4	519:4	8	->
LEAF_NODE	519:6	519:6	8	sPicture
LEAF_NODE	519:14	519:14	8	.
LEAF_NODE	519:15	519:15	8	custom_ptr
ASSIGN_OP	519:26	519:26	6	=
LEAF_NODE	519:26	519:26	7	=
RVAL	519:28	519:28	6	NULL
FIELD	519:28	519:28	7	NULL
LEAF_NODE	519:28	519:28	8	NULL
LEAF_NODE	519:32	519:32	4	;
SELECTION	521:2	522:2	3	
KEYWORD	521:2	521:2	4	if
LEAF_NODE	521:2	521:2	5	if
LEAF_NODE	521:5	521:5	4	(
CONDITION	521:6	521:6	4	! TIFFFlushData1 ( tif )
EXPR	521:6	521:6	5	! TIFFFlushData1 ( tif )
UNARY_EXPR	521:6	521:7	6	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	521:6	521:6	7	!
LEAF_NODE	521:6	521:6	8	!
FUNCTION_CALL	521:7	521:25	7	TIFFFlushData1 ( tif )
CALLEE	521:7	521:7	8	TIFFFlushData1
LEAF_NODE	521:7	521:7	9	TIFFFlushData1
LEAF_NODE	521:21	521:21	8	(
ARGUMENT	521:22	521:22	8	tif
FIELD	521:22	521:22	9	tif
LEAF_NODE	521:22	521:22	10	tif
LEAF_NODE	521:25	521:25	8	)
LEAF_NODE	521:26	521:26	4	)
STATEMENTS	522:2	526:2	4	
LEAF_NODE	522:2	522:2	5	{
STATEMENTS	523:4	525:4	5	
EXPR_STATEMENT	523:4	524:42	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Error flushing TIFF WebP encoder." ) ;
EXPR	523:4	523:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Error flushing TIFF WebP encoder." )
FUNCTION_CALL	523:4	524:41	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Error flushing TIFF WebP encoder." )
CALLEE	523:4	523:4	9	TIFFErrorExt
LEAF_NODE	523:4	523:4	10	TIFFErrorExt
LEAF_NODE	523:16	523:16	9	(
ARGUMENT	523:17	523:17	9	tif -> tif_clientdata
FIELD	523:17	523:22	10	tif -> tif_clientdata
LEAF_NODE	523:17	523:17	11	tif
LEAF_NODE	523:20	523:20	11	->
LEAF_NODE	523:22	523:22	11	tif_clientdata
LEAF_NODE	523:36	523:36	9	,
ARGUMENT	523:38	523:38	9	module
FIELD	523:38	523:38	10	module
LEAF_NODE	523:38	523:38	11	module
LEAF_NODE	523:44	523:44	9	,
ARGUMENT	524:6	524:6	9	"Error flushing TIFF WebP encoder."
FIELD	524:6	524:6	10	"Error flushing TIFF WebP encoder."
LEAF_NODE	524:6	524:6	11	"Error flushing TIFF WebP encoder."
LEAF_NODE	524:41	524:41	9	)
LEAF_NODE	524:42	524:42	7	;
JUMP_STATEMENT	525:4	525:12	6	return 0 ;
KEYWORD	525:4	525:4	7	return
LEAF_NODE	525:4	525:4	8	return
DESTINATION	525:11	525:11	7	0
EXPR	525:11	525:11	8	0
FIELD	525:11	525:11	9	0
LEAF_NODE	525:11	525:11	10	0
LEAF_NODE	525:12	525:12	7	;
LEAF_NODE	526:2	526:2	5	}
JUMP_STATEMENT	528:2	528:10	3	return 1 ;
KEYWORD	528:2	528:2	4	return
LEAF_NODE	528:2	528:2	5	return
DESTINATION	528:9	528:9	4	1
EXPR	528:9	528:9	5	1
FIELD	528:9	528:9	6	1
LEAF_NODE	528:9	528:9	7	1
LEAF_NODE	528:10	528:10	4	;
LEAF_NODE	529:0	529:0	2	}
FUNCTION_DEF	531:0	561:0	1	
RETURN_TYPE	531:0	531:7	2	static void
LEAF_NODE	531:0	531:0	3	static
TYPE_NAME	531:7	531:7	3	void
LEAF_NODE	531:7	531:7	4	void
FUNCTION_NAME	532:0	532:0	2	TWebPCleanup
LEAF_NODE	532:0	532:0	3	TWebPCleanup
PARAMETER_LIST	532:12	532:22	2	( TIFF * tif )
LEAF_NODE	532:12	532:12	3	(
PARAMETER_DECL	532:13	532:19	3	TIFF * tif
TYPE	532:13	532:17	4	TIFF *
TYPE_NAME	532:13	532:13	5	TIFF
LEAF_NODE	532:13	532:13	6	TIFF
POINTER	532:17	532:17	5	*
LEAF_NODE	532:17	532:17	6	*
NAME	532:19	532:19	4	tif
LEAF_NODE	532:19	532:19	5	tif
LEAF_NODE	532:22	532:22	3	)
LEAF_NODE	533:0	533:0	2	{
STATEMENTS	534:2	560:2	2	
SIMPLE_DECL	534:2	534:29	3	WebPState * sp ; sp = LState ( tif ) ;
VAR_DECL	534:2	534:13	4	WebPState * sp ; sp = LState ( tif )
TYPE	534:2	534:11	5	WebPState *
TYPE_NAME	534:2	534:2	6	WebPState
LEAF_NODE	534:2	534:2	7	WebPState
POINTER	534:11	534:11	6	*
LEAF_NODE	534:11	534:11	7	*
NAME	534:13	534:13	5	sp
LEAF_NODE	534:13	534:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	534:13	534:13	5	sp = LState ( tif )
ASSIGN	534:13	534:18	6	sp = LState ( tif )
LVAL	534:13	534:13	7	sp
NAME	534:13	534:13	8	sp
LEAF_NODE	534:13	534:13	9	sp
ASSIGN_OP	534:16	534:16	7	=
LEAF_NODE	534:16	534:16	8	=
RVAL	534:18	534:18	7	LState ( tif )
FUNCTION_CALL	534:18	534:28	8	LState ( tif )
CALLEE	534:18	534:18	9	LState
LEAF_NODE	534:18	534:18	10	LState
LEAF_NODE	534:24	534:24	9	(
ARGUMENT	534:25	534:25	9	tif
FIELD	534:25	534:25	10	tif
LEAF_NODE	534:25	534:25	11	tif
LEAF_NODE	534:28	534:28	9	)
LEAF_NODE	534:29	534:29	4	;
EXPR_STATEMENT	536:2	536:17	3	assert ( sp != 0 ) ;
EXPR	536:2	536:2	4	assert ( sp != 0 )
FUNCTION_CALL	536:2	536:16	5	assert ( sp != 0 )
CALLEE	536:2	536:2	6	assert
LEAF_NODE	536:2	536:2	7	assert
LEAF_NODE	536:8	536:8	6	(
ARGUMENT	536:9	536:15	6	sp != 0
FIELD	536:9	536:9	7	sp
LEAF_NODE	536:9	536:9	8	sp
EQ_OPERATOR	536:12	536:12	7	!=
LEAF_NODE	536:12	536:12	8	!=
FIELD	536:15	536:15	7	0
LEAF_NODE	536:15	536:15	8	0
LEAF_NODE	536:16	536:16	6	)
LEAF_NODE	536:17	536:17	4	;
EXPR_STATEMENT	538:2	538:48	3	tif -> tif_tagmethods . vgetfield = sp -> vgetparent ;
EXPR	538:2	538:2	4	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
ASSIGN	538:2	538:34	5	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
LVAL	538:2	538:2	6	tif -> tif_tagmethods . vgetfield
FIELD	538:2	538:22	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	538:2	538:2	8	tif
LEAF_NODE	538:5	538:5	8	->
LEAF_NODE	538:7	538:7	8	tif_tagmethods
LEAF_NODE	538:21	538:21	8	.
LEAF_NODE	538:22	538:22	8	vgetfield
ASSIGN_OP	538:32	538:32	6	=
LEAF_NODE	538:32	538:32	7	=
RVAL	538:34	538:34	6	sp -> vgetparent
FIELD	538:34	538:38	7	sp -> vgetparent
LEAF_NODE	538:34	538:34	8	sp
LEAF_NODE	538:36	538:36	8	->
LEAF_NODE	538:38	538:38	8	vgetparent
LEAF_NODE	538:48	538:48	4	;
EXPR_STATEMENT	539:2	539:48	3	tif -> tif_tagmethods . vsetfield = sp -> vsetparent ;
EXPR	539:2	539:2	4	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
ASSIGN	539:2	539:34	5	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
LVAL	539:2	539:2	6	tif -> tif_tagmethods . vsetfield
FIELD	539:2	539:22	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	539:2	539:2	8	tif
LEAF_NODE	539:5	539:5	8	->
LEAF_NODE	539:7	539:7	8	tif_tagmethods
LEAF_NODE	539:21	539:21	8	.
LEAF_NODE	539:22	539:22	8	vsetfield
ASSIGN_OP	539:32	539:32	6	=
LEAF_NODE	539:32	539:32	7	=
RVAL	539:34	539:34	6	sp -> vsetparent
FIELD	539:34	539:38	7	sp -> vsetparent
LEAF_NODE	539:34	539:34	8	sp
LEAF_NODE	539:36	539:36	8	->
LEAF_NODE	539:38	539:38	8	vsetparent
LEAF_NODE	539:48	539:48	4	;
SELECTION	541:2	541:38	3	
KEYWORD	541:2	541:2	4	if
LEAF_NODE	541:2	541:2	5	if
LEAF_NODE	541:5	541:5	4	(
CONDITION	541:6	541:6	4	sp -> state & LSTATE_INIT_ENCODE
EXPR	541:6	541:18	5	sp -> state & LSTATE_INIT_ENCODE
FIELD	541:6	541:10	6	sp -> state
LEAF_NODE	541:6	541:6	7	sp
LEAF_NODE	541:8	541:8	7	->
LEAF_NODE	541:10	541:10	7	state
LEAF_NODE	541:16	541:16	6	&
FIELD	541:18	541:18	6	LSTATE_INIT_ENCODE
LEAF_NODE	541:18	541:18	7	LSTATE_INIT_ENCODE
LEAF_NODE	541:36	541:36	4	)
STATEMENTS	541:38	543:2	4	
LEAF_NODE	541:38	541:38	5	{
STATEMENTS	542:4	542:4	5	
EXPR_STATEMENT	542:4	542:34	6	WebPPictureFree ( & sp -> sPicture ) ;
EXPR	542:4	542:4	7	WebPPictureFree ( & sp -> sPicture )
FUNCTION_CALL	542:4	542:33	8	WebPPictureFree ( & sp -> sPicture )
CALLEE	542:4	542:4	9	WebPPictureFree
LEAF_NODE	542:4	542:4	10	WebPPictureFree
LEAF_NODE	542:19	542:19	9	(
ARGUMENT	542:20	542:20	9	& sp -> sPicture
UNARY_EXPR	542:20	542:21	10	& sp -> sPicture
UNARY_OPERATOR	542:20	542:20	11	&
LEAF_NODE	542:20	542:20	12	&
FIELD	542:21	542:25	11	sp -> sPicture
LEAF_NODE	542:21	542:21	12	sp
LEAF_NODE	542:23	542:23	12	->
LEAF_NODE	542:25	542:25	12	sPicture
LEAF_NODE	542:33	542:33	9	)
LEAF_NODE	542:34	542:34	7	;
LEAF_NODE	543:2	543:2	5	}
SELECTION	545:2	545:29	3	
KEYWORD	545:2	545:2	4	if
LEAF_NODE	545:2	545:2	5	if
LEAF_NODE	545:5	545:5	4	(
CONDITION	545:6	545:6	4	sp -> psDecoder != NULL
EXPR	545:6	545:23	5	sp -> psDecoder != NULL
FIELD	545:6	545:10	6	sp -> psDecoder
LEAF_NODE	545:6	545:6	7	sp
LEAF_NODE	545:8	545:8	7	->
LEAF_NODE	545:10	545:10	7	psDecoder
EQ_OPERATOR	545:20	545:20	6	!=
LEAF_NODE	545:20	545:20	7	!=
FIELD	545:23	545:23	6	NULL
LEAF_NODE	545:23	545:23	7	NULL
LEAF_NODE	545:27	545:27	4	)
STATEMENTS	545:29	550:2	4	
LEAF_NODE	545:29	545:29	5	{
STATEMENTS	546:4	549:4	5	
EXPR_STATEMENT	546:4	546:30	6	WebPIDelete ( sp -> psDecoder ) ;
EXPR	546:4	546:4	7	WebPIDelete ( sp -> psDecoder )
FUNCTION_CALL	546:4	546:29	8	WebPIDelete ( sp -> psDecoder )
CALLEE	546:4	546:4	9	WebPIDelete
LEAF_NODE	546:4	546:4	10	WebPIDelete
LEAF_NODE	546:15	546:15	9	(
ARGUMENT	546:16	546:16	9	sp -> psDecoder
FIELD	546:16	546:20	10	sp -> psDecoder
LEAF_NODE	546:16	546:16	11	sp
LEAF_NODE	546:18	546:18	11	->
LEAF_NODE	546:20	546:20	11	psDecoder
LEAF_NODE	546:29	546:29	9	)
LEAF_NODE	546:30	546:30	7	;
EXPR_STATEMENT	547:4	547:38	6	WebPFreeDecBuffer ( & sp -> sDecBuffer ) ;
EXPR	547:4	547:4	7	WebPFreeDecBuffer ( & sp -> sDecBuffer )
FUNCTION_CALL	547:4	547:37	8	WebPFreeDecBuffer ( & sp -> sDecBuffer )
CALLEE	547:4	547:4	9	WebPFreeDecBuffer
LEAF_NODE	547:4	547:4	10	WebPFreeDecBuffer
LEAF_NODE	547:21	547:21	9	(
ARGUMENT	547:22	547:22	9	& sp -> sDecBuffer
UNARY_EXPR	547:22	547:23	10	& sp -> sDecBuffer
UNARY_OPERATOR	547:22	547:22	11	&
LEAF_NODE	547:22	547:22	12	&
FIELD	547:23	547:27	11	sp -> sDecBuffer
LEAF_NODE	547:23	547:23	12	sp
LEAF_NODE	547:25	547:25	12	->
LEAF_NODE	547:27	547:27	12	sDecBuffer
LEAF_NODE	547:37	547:37	9	)
LEAF_NODE	547:38	547:38	7	;
EXPR_STATEMENT	548:4	548:24	6	sp -> psDecoder = NULL ;
EXPR	548:4	548:4	7	sp -> psDecoder = NULL
ASSIGN	548:4	548:20	8	sp -> psDecoder = NULL
LVAL	548:4	548:4	9	sp -> psDecoder
FIELD	548:4	548:8	10	sp -> psDecoder
LEAF_NODE	548:4	548:4	11	sp
LEAF_NODE	548:6	548:6	11	->
LEAF_NODE	548:8	548:8	11	psDecoder
ASSIGN_OP	548:18	548:18	9	=
LEAF_NODE	548:18	548:18	10	=
RVAL	548:20	548:20	9	NULL
FIELD	548:20	548:20	10	NULL
LEAF_NODE	548:20	548:20	11	NULL
LEAF_NODE	548:24	548:24	7	;
EXPR_STATEMENT	549:4	549:18	6	sp -> last_y = 0 ;
EXPR	549:4	549:4	7	sp -> last_y = 0
ASSIGN	549:4	549:17	8	sp -> last_y = 0
LVAL	549:4	549:4	9	sp -> last_y
FIELD	549:4	549:8	10	sp -> last_y
LEAF_NODE	549:4	549:4	11	sp
LEAF_NODE	549:6	549:6	11	->
LEAF_NODE	549:8	549:8	11	last_y
ASSIGN_OP	549:15	549:15	9	=
LEAF_NODE	549:15	549:15	10	=
RVAL	549:17	549:17	9	0
FIELD	549:17	549:17	10	0
LEAF_NODE	549:17	549:17	11	0
LEAF_NODE	549:18	549:18	7	;
LEAF_NODE	550:2	550:2	5	}
SELECTION	552:2	552:27	3	
KEYWORD	552:2	552:2	4	if
LEAF_NODE	552:2	552:2	5	if
LEAF_NODE	552:5	552:5	4	(
CONDITION	552:6	552:6	4	sp -> pBuffer != NULL
EXPR	552:6	552:21	5	sp -> pBuffer != NULL
FIELD	552:6	552:10	6	sp -> pBuffer
LEAF_NODE	552:6	552:6	7	sp
LEAF_NODE	552:8	552:8	7	->
LEAF_NODE	552:10	552:10	7	pBuffer
EQ_OPERATOR	552:18	552:18	6	!=
LEAF_NODE	552:18	552:18	7	!=
FIELD	552:21	552:21	6	NULL
LEAF_NODE	552:21	552:21	7	NULL
LEAF_NODE	552:25	552:25	4	)
STATEMENTS	552:27	555:2	4	
LEAF_NODE	552:27	552:27	5	{
STATEMENTS	553:6	554:6	5	
EXPR_STATEMENT	553:6	553:28	6	_TIFFfree ( sp -> pBuffer ) ;
EXPR	553:6	553:6	7	_TIFFfree ( sp -> pBuffer )
FUNCTION_CALL	553:6	553:27	8	_TIFFfree ( sp -> pBuffer )
CALLEE	553:6	553:6	9	_TIFFfree
LEAF_NODE	553:6	553:6	10	_TIFFfree
LEAF_NODE	553:15	553:15	9	(
ARGUMENT	553:16	553:16	9	sp -> pBuffer
FIELD	553:16	553:20	10	sp -> pBuffer
LEAF_NODE	553:16	553:16	11	sp
LEAF_NODE	553:18	553:18	11	->
LEAF_NODE	553:20	553:20	11	pBuffer
LEAF_NODE	553:27	553:27	9	)
LEAF_NODE	553:28	553:28	7	;
EXPR_STATEMENT	554:6	554:24	6	sp -> pBuffer = NULL ;
EXPR	554:6	554:6	7	sp -> pBuffer = NULL
ASSIGN	554:6	554:20	8	sp -> pBuffer = NULL
LVAL	554:6	554:6	9	sp -> pBuffer
FIELD	554:6	554:10	10	sp -> pBuffer
LEAF_NODE	554:6	554:6	11	sp
LEAF_NODE	554:8	554:8	11	->
LEAF_NODE	554:10	554:10	11	pBuffer
ASSIGN_OP	554:18	554:18	9	=
LEAF_NODE	554:18	554:18	10	=
RVAL	554:20	554:20	9	NULL
FIELD	554:20	554:20	10	NULL
LEAF_NODE	554:20	554:20	11	NULL
LEAF_NODE	554:24	554:24	7	;
LEAF_NODE	555:2	555:2	5	}
EXPR_STATEMENT	557:2	557:26	3	_TIFFfree ( tif -> tif_data ) ;
EXPR	557:2	557:2	4	_TIFFfree ( tif -> tif_data )
FUNCTION_CALL	557:2	557:25	5	_TIFFfree ( tif -> tif_data )
CALLEE	557:2	557:2	6	_TIFFfree
LEAF_NODE	557:2	557:2	7	_TIFFfree
LEAF_NODE	557:11	557:11	6	(
ARGUMENT	557:12	557:12	6	tif -> tif_data
FIELD	557:12	557:17	7	tif -> tif_data
LEAF_NODE	557:12	557:12	8	tif
LEAF_NODE	557:15	557:15	8	->
LEAF_NODE	557:17	557:17	8	tif_data
LEAF_NODE	557:25	557:25	6	)
LEAF_NODE	557:26	557:26	4	;
EXPR_STATEMENT	558:2	558:22	3	tif -> tif_data = NULL ;
EXPR	558:2	558:2	4	tif -> tif_data = NULL
ASSIGN	558:2	558:18	5	tif -> tif_data = NULL
LVAL	558:2	558:2	6	tif -> tif_data
FIELD	558:2	558:7	7	tif -> tif_data
LEAF_NODE	558:2	558:2	8	tif
LEAF_NODE	558:5	558:5	8	->
LEAF_NODE	558:7	558:7	8	tif_data
ASSIGN_OP	558:16	558:16	6	=
LEAF_NODE	558:16	558:16	7	=
RVAL	558:18	558:18	6	NULL
FIELD	558:18	558:18	7	NULL
LEAF_NODE	558:18	558:18	8	NULL
LEAF_NODE	558:22	558:22	4	;
EXPR_STATEMENT	560:2	560:38	3	_TIFFSetDefaultCompressionState ( tif ) ;
EXPR	560:2	560:2	4	_TIFFSetDefaultCompressionState ( tif )
FUNCTION_CALL	560:2	560:37	5	_TIFFSetDefaultCompressionState ( tif )
CALLEE	560:2	560:2	6	_TIFFSetDefaultCompressionState
LEAF_NODE	560:2	560:2	7	_TIFFSetDefaultCompressionState
LEAF_NODE	560:33	560:33	6	(
ARGUMENT	560:34	560:34	6	tif
FIELD	560:34	560:34	7	tif
LEAF_NODE	560:34	560:34	8	tif
LEAF_NODE	560:37	560:37	6	)
LEAF_NODE	560:38	560:38	4	;
LEAF_NODE	561:0	561:0	2	}
FUNCTION_DEF	563:0	595:0	1	
RETURN_TYPE	563:0	563:7	2	static int
LEAF_NODE	563:0	563:0	3	static
TYPE_NAME	563:7	563:7	3	int
LEAF_NODE	563:7	563:7	4	int
FUNCTION_NAME	564:0	564:0	2	TWebPVSetField
LEAF_NODE	564:0	564:0	3	TWebPVSetField
PARAMETER_LIST	564:14	564:48	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	564:14	564:14	3	(
PARAMETER_DECL	564:15	564:21	3	TIFF * tif
TYPE	564:15	564:19	4	TIFF *
TYPE_NAME	564:15	564:15	5	TIFF
LEAF_NODE	564:15	564:15	6	TIFF
POINTER	564:19	564:19	5	*
LEAF_NODE	564:19	564:19	6	*
NAME	564:21	564:21	4	tif
LEAF_NODE	564:21	564:21	5	tif
LEAF_NODE	564:24	564:24	3	,
PARAMETER_DECL	564:26	564:33	3	uint32 tag
TYPE	564:26	564:26	4	uint32
TYPE_NAME	564:26	564:26	5	uint32
LEAF_NODE	564:26	564:26	6	uint32
NAME	564:33	564:33	4	tag
LEAF_NODE	564:33	564:33	5	tag
LEAF_NODE	564:36	564:36	3	,
PARAMETER_DECL	564:38	564:46	3	va_list ap
TYPE	564:38	564:38	4	va_list
TYPE_NAME	564:38	564:38	5	va_list
LEAF_NODE	564:38	564:38	6	va_list
NAME	564:46	564:46	4	ap
LEAF_NODE	564:46	564:46	5	ap
LEAF_NODE	564:48	564:48	3	)
LEAF_NODE	565:0	565:0	2	{
STATEMENTS	566:1	569:2	2	
LEAF_NODE	566:1	566:1	3	static
SIMPLE_DECL	566:8	566:45	3	const char [ ] module ; module = "WebPVSetField" ;
VAR_DECL	566:8	566:19	4	const char [ ] module ; module = "WebPVSetField"
TYPE	566:8	566:25	5	const char [ ]
TYPE_NAME	566:8	566:14	6	const char
LEAF_NODE	566:8	566:8	7	const
LEAF_NODE	566:14	566:14	7	char
TYPE_SUFFIX	566:25	566:26	6	[ ]
LEAF_NODE	566:25	566:25	7	[
LEAF_NODE	566:26	566:26	7	]
NAME	566:19	566:19	5	module
LEAF_NODE	566:19	566:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	566:19	566:19	5	module = "WebPVSetField"
ASSIGN	566:19	566:30	6	module = "WebPVSetField"
LVAL	566:19	566:19	7	module
NAME	566:19	566:19	8	module
LEAF_NODE	566:19	566:19	9	module
ASSIGN_OP	566:28	566:28	7	=
LEAF_NODE	566:28	566:28	8	=
RVAL	566:30	566:30	7	"WebPVSetField"
FIELD	566:30	566:30	8	"WebPVSetField"
LEAF_NODE	566:30	566:30	9	"WebPVSetField"
LEAF_NODE	566:45	566:45	4	;
SIMPLE_DECL	567:2	567:29	3	WebPState * sp ; sp = LState ( tif ) ;
VAR_DECL	567:2	567:13	4	WebPState * sp ; sp = LState ( tif )
TYPE	567:2	567:11	5	WebPState *
TYPE_NAME	567:2	567:2	6	WebPState
LEAF_NODE	567:2	567:2	7	WebPState
POINTER	567:11	567:11	6	*
LEAF_NODE	567:11	567:11	7	*
NAME	567:13	567:13	5	sp
LEAF_NODE	567:13	567:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	567:13	567:13	5	sp = LState ( tif )
ASSIGN	567:13	567:18	6	sp = LState ( tif )
LVAL	567:13	567:13	7	sp
NAME	567:13	567:13	8	sp
LEAF_NODE	567:13	567:13	9	sp
ASSIGN_OP	567:16	567:16	7	=
LEAF_NODE	567:16	567:16	8	=
RVAL	567:18	567:18	7	LState ( tif )
FUNCTION_CALL	567:18	567:28	8	LState ( tif )
CALLEE	567:18	567:18	9	LState
LEAF_NODE	567:18	567:18	10	LState
LEAF_NODE	567:24	567:24	9	(
ARGUMENT	567:25	567:25	9	tif
FIELD	567:25	567:25	10	tif
LEAF_NODE	567:25	567:25	11	tif
LEAF_NODE	567:28	567:28	9	)
LEAF_NODE	567:29	567:29	4	;
SELECTION	569:2	569:15	3	
KEYWORD	569:2	569:2	4	switch
LEAF_NODE	569:2	569:2	5	switch
LEAF_NODE	569:9	569:9	4	(
CONDITION	569:10	569:10	4	tag
EXPR	569:10	569:10	5	tag
FIELD	569:10	569:10	6	tag
LEAF_NODE	569:10	569:10	7	tag
LEAF_NODE	569:13	569:13	4	)
STATEMENTS	569:15	593:2	4	
LEAF_NODE	569:15	569:15	5	{
STATEMENTS	570:2	592:4	5	
LABEL	570:2	570:25	6	case TIFFTAG_WEBP_LEVEL :
LEAF_NODE	570:2	570:2	7	case
LEAF_NODE	570:7	570:7	7	TIFFTAG_WEBP_LEVEL
LEAF_NODE	570:25	570:25	7	:
EXPR_STATEMENT	571:4	571:45	6	sp -> quality_level = ( int ) va_arg ( ap , int ) ;
EXPR	571:4	571:4	7	sp -> quality_level = ( int ) va_arg ( ap , int )
ASSIGN	571:4	571:24	8	sp -> quality_level = ( int ) va_arg ( ap , int )
LVAL	571:4	571:4	9	sp -> quality_level
FIELD	571:4	571:8	10	sp -> quality_level
LEAF_NODE	571:4	571:4	11	sp
LEAF_NODE	571:6	571:6	11	->
LEAF_NODE	571:8	571:8	11	quality_level
ASSIGN_OP	571:22	571:22	9	=
LEAF_NODE	571:22	571:22	10	=
RVAL	571:24	571:30	9	( int ) va_arg ( ap , int )
LEAF_NODE	571:24	571:24	10	(
TYPE_NAME	571:25	571:25	10	int
LEAF_NODE	571:25	571:25	11	int
LEAF_NODE	571:28	571:28	10	)
FUNCTION_CALL	571:30	571:44	10	va_arg ( ap , int )
CALLEE	571:30	571:30	11	va_arg
LEAF_NODE	571:30	571:30	12	va_arg
LEAF_NODE	571:36	571:36	11	(
ARGUMENT	571:37	571:37	11	ap
FIELD	571:37	571:37	12	ap
LEAF_NODE	571:37	571:37	13	ap
LEAF_NODE	571:39	571:39	11	,
ARGUMENT	571:41	571:41	11	int
FIELD	571:41	571:41	12	int
LEAF_NODE	571:41	571:41	13	int
LEAF_NODE	571:44	571:44	11	)
LEAF_NODE	571:45	571:45	7	;
SELECTION	572:4	573:37	6	
KEYWORD	572:4	572:4	7	if
LEAF_NODE	572:4	572:4	8	if
LEAF_NODE	572:6	572:6	7	(
CONDITION	572:8	572:8	7	sp -> quality_level <= 0 || sp -> quality_level > 100.0f
EXPR	572:8	572:8	8	sp -> quality_level <= 0 || sp -> quality_level > 100.0f
OR	572:8	573:8	9	sp -> quality_level <= 0 || sp -> quality_level > 100.0f
EXPR	572:8	572:29	10	sp -> quality_level <= 0
FIELD	572:8	572:12	11	sp -> quality_level
LEAF_NODE	572:8	572:8	12	sp
LEAF_NODE	572:10	572:10	12	->
LEAF_NODE	572:12	572:12	12	quality_level
REL_OPERATOR	572:26	572:26	11	<=
LEAF_NODE	572:26	572:26	12	<=
FIELD	572:29	572:29	11	0
LEAF_NODE	572:29	572:29	12	0
LEAF_NODE	572:31	572:31	10	||
EXPR	573:8	573:28	10	sp -> quality_level > 100.0f
FIELD	573:8	573:12	11	sp -> quality_level
LEAF_NODE	573:8	573:8	12	sp
LEAF_NODE	573:10	573:10	12	->
LEAF_NODE	573:12	573:12	12	quality_level
REL_OPERATOR	573:26	573:26	11	>
LEAF_NODE	573:26	573:26	12	>
FIELD	573:28	573:28	11	100.0f
LEAF_NODE	573:28	573:28	12	100.0f
LEAF_NODE	573:35	573:35	7	)
STATEMENTS	573:37	576:4	7	
LEAF_NODE	573:37	573:37	8	{
STATEMENTS	574:6	574:6	8	
EXPR_STATEMENT	574:6	575:62	9	TIFFWarningExt ( tif -> tif_clientdata , module , "WEBP_LEVEL should be between 1 and 100" ) ;
EXPR	574:6	574:6	10	TIFFWarningExt ( tif -> tif_clientdata , module , "WEBP_LEVEL should be between 1 and 100" )
FUNCTION_CALL	574:6	575:61	11	TIFFWarningExt ( tif -> tif_clientdata , module , "WEBP_LEVEL should be between 1 and 100" )
CALLEE	574:6	574:6	12	TIFFWarningExt
LEAF_NODE	574:6	574:6	13	TIFFWarningExt
LEAF_NODE	574:20	574:20	12	(
ARGUMENT	574:21	574:21	12	tif -> tif_clientdata
FIELD	574:21	574:26	13	tif -> tif_clientdata
LEAF_NODE	574:21	574:21	14	tif
LEAF_NODE	574:24	574:24	14	->
LEAF_NODE	574:26	574:26	14	tif_clientdata
LEAF_NODE	574:40	574:40	12	,
ARGUMENT	574:42	574:42	12	module
FIELD	574:42	574:42	13	module
LEAF_NODE	574:42	574:42	14	module
LEAF_NODE	574:48	574:48	12	,
ARGUMENT	575:21	575:21	12	"WEBP_LEVEL should be between 1 and 100"
FIELD	575:21	575:21	13	"WEBP_LEVEL should be between 1 and 100"
LEAF_NODE	575:21	575:21	14	"WEBP_LEVEL should be between 1 and 100"
LEAF_NODE	575:61	575:61	12	)
LEAF_NODE	575:62	575:62	10	;
LEAF_NODE	576:4	576:4	8	}
JUMP_STATEMENT	577:4	577:12	6	return 1 ;
KEYWORD	577:4	577:4	7	return
LEAF_NODE	577:4	577:4	8	return
DESTINATION	577:11	577:11	7	1
EXPR	577:11	577:11	8	1
FIELD	577:11	577:11	9	1
LEAF_NODE	577:11	577:11	10	1
LEAF_NODE	577:12	577:12	7	;
LABEL	578:2	578:28	6	case TIFFTAG_WEBP_LOSSLESS :
LEAF_NODE	578:2	578:2	7	case
LEAF_NODE	578:7	578:7	7	TIFFTAG_WEBP_LOSSLESS
LEAF_NODE	578:28	578:28	7	:
EXPR_STATEMENT	580:4	580:34	6	sp -> lossless = va_arg ( ap , int ) ;
EXPR	580:4	580:4	7	sp -> lossless = va_arg ( ap , int )
ASSIGN	580:4	580:19	8	sp -> lossless = va_arg ( ap , int )
LVAL	580:4	580:4	9	sp -> lossless
FIELD	580:4	580:8	10	sp -> lossless
LEAF_NODE	580:4	580:4	11	sp
LEAF_NODE	580:6	580:6	11	->
LEAF_NODE	580:8	580:8	11	lossless
ASSIGN_OP	580:17	580:17	9	=
LEAF_NODE	580:17	580:17	10	=
RVAL	580:19	580:19	9	va_arg ( ap , int )
FUNCTION_CALL	580:19	580:33	10	va_arg ( ap , int )
CALLEE	580:19	580:19	11	va_arg
LEAF_NODE	580:19	580:19	12	va_arg
LEAF_NODE	580:25	580:25	11	(
ARGUMENT	580:26	580:26	11	ap
FIELD	580:26	580:26	12	ap
LEAF_NODE	580:26	580:26	13	ap
LEAF_NODE	580:28	580:28	11	,
ARGUMENT	580:30	580:30	11	int
FIELD	580:30	580:30	12	int
LEAF_NODE	580:30	580:30	13	int
LEAF_NODE	580:33	580:33	11	)
LEAF_NODE	580:34	580:34	7	;
SELECTION	581:4	581:21	6	
KEYWORD	581:4	581:4	7	if
LEAF_NODE	581:4	581:4	8	if
LEAF_NODE	581:7	581:7	7	(
CONDITION	581:8	581:8	7	sp -> lossless
EXPR	581:8	581:8	8	sp -> lossless
FIELD	581:8	581:12	9	sp -> lossless
LEAF_NODE	581:8	581:8	10	sp
LEAF_NODE	581:10	581:10	10	->
LEAF_NODE	581:12	581:12	10	lossless
LEAF_NODE	581:20	581:20	7	)
STATEMENTS	581:21	583:4	7	
LEAF_NODE	581:21	581:21	8	{
STATEMENTS	582:6	582:6	8	
EXPR_STATEMENT	582:6	582:32	9	sp -> quality_level = 100.0f ;
EXPR	582:6	582:6	10	sp -> quality_level = 100.0f
ASSIGN	582:6	582:26	11	sp -> quality_level = 100.0f
LVAL	582:6	582:6	12	sp -> quality_level
FIELD	582:6	582:10	13	sp -> quality_level
LEAF_NODE	582:6	582:6	14	sp
LEAF_NODE	582:8	582:8	14	->
LEAF_NODE	582:10	582:10	14	quality_level
ASSIGN_OP	582:24	582:24	12	=
LEAF_NODE	582:24	582:24	13	=
RVAL	582:26	582:26	12	100.0f
FIELD	582:26	582:26	13	100.0f
LEAF_NODE	582:26	582:26	14	100.0f
LEAF_NODE	582:32	582:32	10	;
LEAF_NODE	583:4	583:4	8	}
JUMP_STATEMENT	584:4	584:12	6	return 1 ;
KEYWORD	584:4	584:4	7	return
LEAF_NODE	584:4	584:4	8	return
DESTINATION	584:11	584:11	7	1
EXPR	584:11	584:11	8	1
FIELD	584:11	584:11	9	1
LEAF_NODE	584:11	584:11	10	1
LEAF_NODE	584:12	584:12	7	;
LEAF_NODE	586:6	586:6	6	TIFFErrorExt
LEAF_NODE	586:18	586:18	6	(
LEAF_NODE	586:19	586:19	6	tif
LEAF_NODE	586:22	586:22	6	->
LEAF_NODE	586:24	586:24	6	tif_clientdata
LEAF_NODE	586:38	586:38	6	,
LEAF_NODE	586:40	586:40	6	module
LEAF_NODE	586:46	586:46	6	,
LEAF_NODE	587:18	587:18	6	"Need to upgrade WEBP driver, this version doesn't support "
LEAF_NODE	588:18	588:18	6	"lossless compression."
LEAF_NODE	588:41	588:41	6	)
LEAF_NODE	588:42	588:42	6	;
JUMP_STATEMENT	589:6	589:14	6	return 0 ;
KEYWORD	589:6	589:6	7	return
LEAF_NODE	589:6	589:6	8	return
DESTINATION	589:13	589:13	7	0
EXPR	589:13	589:13	8	0
FIELD	589:13	589:13	9	0
LEAF_NODE	589:13	589:13	10	0
LEAF_NODE	589:14	589:14	7	;
LABEL	591:2	591:9	6	default :
LEAF_NODE	591:2	591:2	7	default
LEAF_NODE	591:9	591:9	7	:
JUMP_STATEMENT	592:4	592:42	6	return ( * sp -> vsetparent ) ( tif , tag , ap ) ;
KEYWORD	592:4	592:4	7	return
LEAF_NODE	592:4	592:4	8	return
DESTINATION	592:11	592:11	7	( * sp -> vsetparent ) ( tif , tag , ap )
EXPR	592:11	592:11	8	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	592:11	592:41	9	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	592:11	592:27	10	( * sp -> vsetparent )
LEAF_NODE	592:11	592:11	11	(
UNARY_EXPR	592:12	592:13	11	* sp -> vsetparent
UNARY_OPERATOR	592:12	592:12	12	*
LEAF_NODE	592:12	592:12	13	*
FIELD	592:13	592:17	12	sp -> vsetparent
LEAF_NODE	592:13	592:13	13	sp
LEAF_NODE	592:15	592:15	13	->
LEAF_NODE	592:17	592:17	13	vsetparent
LEAF_NODE	592:27	592:27	11	)
LEAF_NODE	592:28	592:28	10	(
ARGUMENT	592:29	592:29	10	tif
FIELD	592:29	592:29	11	tif
LEAF_NODE	592:29	592:29	12	tif
LEAF_NODE	592:32	592:32	10	,
ARGUMENT	592:34	592:34	10	tag
FIELD	592:34	592:34	11	tag
LEAF_NODE	592:34	592:34	12	tag
LEAF_NODE	592:37	592:37	10	,
ARGUMENT	592:39	592:39	10	ap
FIELD	592:39	592:39	11	ap
LEAF_NODE	592:39	592:39	12	ap
LEAF_NODE	592:41	592:41	10	)
LEAF_NODE	592:42	592:42	7	;
LEAF_NODE	593:2	593:2	5	}
LEAF_NODE	595:0	595:0	2	}
FUNCTION_DEF	597:0	613:0	1	
RETURN_TYPE	597:0	597:7	2	static int
LEAF_NODE	597:0	597:0	3	static
TYPE_NAME	597:7	597:7	3	int
LEAF_NODE	597:7	597:7	4	int
FUNCTION_NAME	598:0	598:0	2	TWebPVGetField
LEAF_NODE	598:0	598:0	3	TWebPVGetField
PARAMETER_LIST	598:14	598:48	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	598:14	598:14	3	(
PARAMETER_DECL	598:15	598:21	3	TIFF * tif
TYPE	598:15	598:19	4	TIFF *
TYPE_NAME	598:15	598:15	5	TIFF
LEAF_NODE	598:15	598:15	6	TIFF
POINTER	598:19	598:19	5	*
LEAF_NODE	598:19	598:19	6	*
NAME	598:21	598:21	4	tif
LEAF_NODE	598:21	598:21	5	tif
LEAF_NODE	598:24	598:24	3	,
PARAMETER_DECL	598:26	598:33	3	uint32 tag
TYPE	598:26	598:26	4	uint32
TYPE_NAME	598:26	598:26	5	uint32
LEAF_NODE	598:26	598:26	6	uint32
NAME	598:33	598:33	4	tag
LEAF_NODE	598:33	598:33	5	tag
LEAF_NODE	598:36	598:36	3	,
PARAMETER_DECL	598:38	598:46	3	va_list ap
TYPE	598:38	598:38	4	va_list
TYPE_NAME	598:38	598:38	5	va_list
LEAF_NODE	598:38	598:38	6	va_list
NAME	598:46	598:46	4	ap
LEAF_NODE	598:46	598:46	5	ap
LEAF_NODE	598:48	598:48	3	)
LEAF_NODE	599:0	599:0	2	{
STATEMENTS	600:2	612:2	2	
SIMPLE_DECL	600:2	600:29	3	WebPState * sp ; sp = LState ( tif ) ;
VAR_DECL	600:2	600:13	4	WebPState * sp ; sp = LState ( tif )
TYPE	600:2	600:11	5	WebPState *
TYPE_NAME	600:2	600:2	6	WebPState
LEAF_NODE	600:2	600:2	7	WebPState
POINTER	600:11	600:11	6	*
LEAF_NODE	600:11	600:11	7	*
NAME	600:13	600:13	5	sp
LEAF_NODE	600:13	600:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	600:13	600:13	5	sp = LState ( tif )
ASSIGN	600:13	600:18	6	sp = LState ( tif )
LVAL	600:13	600:13	7	sp
NAME	600:13	600:13	8	sp
LEAF_NODE	600:13	600:13	9	sp
ASSIGN_OP	600:16	600:16	7	=
LEAF_NODE	600:16	600:16	8	=
RVAL	600:18	600:18	7	LState ( tif )
FUNCTION_CALL	600:18	600:28	8	LState ( tif )
CALLEE	600:18	600:18	9	LState
LEAF_NODE	600:18	600:18	10	LState
LEAF_NODE	600:24	600:24	9	(
ARGUMENT	600:25	600:25	9	tif
FIELD	600:25	600:25	10	tif
LEAF_NODE	600:25	600:25	11	tif
LEAF_NODE	600:28	600:28	9	)
LEAF_NODE	600:29	600:29	4	;
SELECTION	602:2	602:15	3	
KEYWORD	602:2	602:2	4	switch
LEAF_NODE	602:2	602:2	5	switch
LEAF_NODE	602:9	602:9	4	(
CONDITION	602:10	602:10	4	tag
EXPR	602:10	602:10	5	tag
FIELD	602:10	602:10	6	tag
LEAF_NODE	602:10	602:10	7	tag
LEAF_NODE	602:13	602:13	4	)
STATEMENTS	602:15	611:2	4	
LEAF_NODE	602:15	602:15	5	{
STATEMENTS	603:2	610:4	5	
LABEL	603:2	603:25	6	case TIFFTAG_WEBP_LEVEL :
LEAF_NODE	603:2	603:2	7	case
LEAF_NODE	603:7	603:7	7	TIFFTAG_WEBP_LEVEL
LEAF_NODE	603:25	603:25	7	:
LEAF_NODE	604:4	604:4	6	*
LEAF_NODE	604:5	604:5	6	va_arg
LEAF_NODE	604:11	604:11	6	(
LEAF_NODE	604:12	604:12	6	ap
LEAF_NODE	604:14	604:14	6	,
LEAF_NODE	604:16	604:16	6	int
LEAF_NODE	604:19	604:19	6	*
LEAF_NODE	604:20	604:20	6	)
LEAF_NODE	604:22	604:22	6	=
EXPR_STATEMENT	604:24	604:41	6	sp -> quality_level ;
EXPR	604:24	604:24	7	sp -> quality_level
FIELD	604:24	604:28	8	sp -> quality_level
LEAF_NODE	604:24	604:24	9	sp
LEAF_NODE	604:26	604:26	9	->
LEAF_NODE	604:28	604:28	9	quality_level
LEAF_NODE	604:41	604:41	7	;
JUMP_STATEMENT	605:4	605:9	6	break DESTINATION ;
KEYWORD	605:4	605:4	7	break
LEAF_NODE	605:4	605:4	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	605:9	605:9	7	;
LABEL	606:2	606:28	6	case TIFFTAG_WEBP_LOSSLESS :
LEAF_NODE	606:2	606:2	7	case
LEAF_NODE	606:7	606:7	7	TIFFTAG_WEBP_LOSSLESS
LEAF_NODE	606:28	606:28	7	:
LEAF_NODE	607:4	607:4	6	*
LEAF_NODE	607:5	607:5	6	va_arg
LEAF_NODE	607:11	607:11	6	(
LEAF_NODE	607:12	607:12	6	ap
LEAF_NODE	607:14	607:14	6	,
LEAF_NODE	607:16	607:16	6	int
LEAF_NODE	607:19	607:19	6	*
LEAF_NODE	607:20	607:20	6	)
LEAF_NODE	607:22	607:22	6	=
EXPR_STATEMENT	607:24	607:36	6	sp -> lossless ;
EXPR	607:24	607:24	7	sp -> lossless
FIELD	607:24	607:28	8	sp -> lossless
LEAF_NODE	607:24	607:24	9	sp
LEAF_NODE	607:26	607:26	9	->
LEAF_NODE	607:28	607:28	9	lossless
LEAF_NODE	607:36	607:36	7	;
JUMP_STATEMENT	608:4	608:9	6	break DESTINATION ;
KEYWORD	608:4	608:4	7	break
LEAF_NODE	608:4	608:4	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	608:9	608:9	7	;
LABEL	609:2	609:9	6	default :
LEAF_NODE	609:2	609:2	7	default
LEAF_NODE	609:9	609:9	7	:
JUMP_STATEMENT	610:4	610:42	6	return ( * sp -> vgetparent ) ( tif , tag , ap ) ;
KEYWORD	610:4	610:4	7	return
LEAF_NODE	610:4	610:4	8	return
DESTINATION	610:11	610:11	7	( * sp -> vgetparent ) ( tif , tag , ap )
EXPR	610:11	610:11	8	( * sp -> vgetparent ) ( tif , tag , ap )
FUNCTION_CALL	610:11	610:41	9	( * sp -> vgetparent ) ( tif , tag , ap )
CALLEE	610:11	610:27	10	( * sp -> vgetparent )
LEAF_NODE	610:11	610:11	11	(
UNARY_EXPR	610:12	610:13	11	* sp -> vgetparent
UNARY_OPERATOR	610:12	610:12	12	*
LEAF_NODE	610:12	610:12	13	*
FIELD	610:13	610:17	12	sp -> vgetparent
LEAF_NODE	610:13	610:13	13	sp
LEAF_NODE	610:15	610:15	13	->
LEAF_NODE	610:17	610:17	13	vgetparent
LEAF_NODE	610:27	610:27	11	)
LEAF_NODE	610:28	610:28	10	(
ARGUMENT	610:29	610:29	10	tif
FIELD	610:29	610:29	11	tif
LEAF_NODE	610:29	610:29	12	tif
LEAF_NODE	610:32	610:32	10	,
ARGUMENT	610:34	610:34	10	tag
FIELD	610:34	610:34	11	tag
LEAF_NODE	610:34	610:34	12	tag
LEAF_NODE	610:37	610:37	10	,
ARGUMENT	610:39	610:39	10	ap
FIELD	610:39	610:39	11	ap
LEAF_NODE	610:39	610:39	12	ap
LEAF_NODE	610:41	610:41	10	)
LEAF_NODE	610:42	610:42	7	;
LEAF_NODE	611:2	611:2	5	}
JUMP_STATEMENT	612:2	612:10	3	return 1 ;
KEYWORD	612:2	612:2	4	return
LEAF_NODE	612:2	612:2	5	return
DESTINATION	612:9	612:9	4	1
EXPR	612:9	612:9	5	1
FIELD	612:9	612:9	6	1
LEAF_NODE	612:9	612:9	7	1
LEAF_NODE	612:10	612:10	4	;
LEAF_NODE	613:0	613:0	2	}
FUNCTION_DEF	625:0	693:0	1	
RETURN_TYPE	625:0	625:0	2	int
TYPE_NAME	625:0	625:0	3	int
LEAF_NODE	625:0	625:0	4	int
FUNCTION_NAME	626:0	626:0	2	TIFFInitWebP
LEAF_NODE	626:0	626:0	3	TIFFInitWebP
PARAMETER_LIST	626:12	626:34	2	( TIFF * tif , int scheme )
LEAF_NODE	626:12	626:12	3	(
PARAMETER_DECL	626:13	626:19	3	TIFF * tif
TYPE	626:13	626:17	4	TIFF *
TYPE_NAME	626:13	626:13	5	TIFF
LEAF_NODE	626:13	626:13	6	TIFF
POINTER	626:17	626:17	5	*
LEAF_NODE	626:17	626:17	6	*
NAME	626:19	626:19	4	tif
LEAF_NODE	626:19	626:19	5	tif
LEAF_NODE	626:22	626:22	3	,
PARAMETER_DECL	626:24	626:28	3	int scheme
TYPE	626:24	626:24	4	int
TYPE_NAME	626:24	626:24	5	int
LEAF_NODE	626:24	626:24	6	int
NAME	626:28	626:28	4	scheme
LEAF_NODE	626:28	626:28	5	scheme
LEAF_NODE	626:34	626:34	3	)
LEAF_NODE	627:0	627:0	2	{
STATEMENTS	628:2	692:2	2	
LEAF_NODE	628:2	628:2	3	static
SIMPLE_DECL	628:9	628:45	3	const char [ ] module ; module = "TIFFInitWebP" ;
VAR_DECL	628:9	628:20	4	const char [ ] module ; module = "TIFFInitWebP"
TYPE	628:9	628:26	5	const char [ ]
TYPE_NAME	628:9	628:15	6	const char
LEAF_NODE	628:9	628:9	7	const
LEAF_NODE	628:15	628:15	7	char
TYPE_SUFFIX	628:26	628:27	6	[ ]
LEAF_NODE	628:26	628:26	7	[
LEAF_NODE	628:27	628:27	7	]
NAME	628:20	628:20	5	module
LEAF_NODE	628:20	628:20	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	628:20	628:20	5	module = "TIFFInitWebP"
ASSIGN	628:20	628:31	6	module = "TIFFInitWebP"
LVAL	628:20	628:20	7	module
NAME	628:20	628:20	8	module
LEAF_NODE	628:20	628:20	9	module
ASSIGN_OP	628:29	628:29	7	=
LEAF_NODE	628:29	628:29	8	=
RVAL	628:31	628:31	7	"TIFFInitWebP"
FIELD	628:31	628:31	8	"TIFFInitWebP"
LEAF_NODE	628:31	628:31	9	"TIFFInitWebP"
LEAF_NODE	628:45	628:45	4	;
SIMPLE_DECL	629:2	629:15	3	WebPState * sp ;
VAR_DECL	629:2	629:13	4	WebPState * sp
TYPE	629:2	629:11	5	WebPState *
TYPE_NAME	629:2	629:2	6	WebPState
LEAF_NODE	629:2	629:2	7	WebPState
POINTER	629:11	629:11	6	*
LEAF_NODE	629:11	629:11	7	*
NAME	629:13	629:13	5	sp
LEAF_NODE	629:13	629:13	6	sp
LEAF_NODE	629:15	629:15	4	;
EXPR_STATEMENT	631:2	631:38	3	assert ( scheme == COMPRESSION_WEBP ) ;
EXPR	631:2	631:2	4	assert ( scheme == COMPRESSION_WEBP )
FUNCTION_CALL	631:2	631:37	5	assert ( scheme == COMPRESSION_WEBP )
CALLEE	631:2	631:2	6	assert
LEAF_NODE	631:2	631:2	7	assert
LEAF_NODE	631:8	631:8	6	(
ARGUMENT	631:10	631:20	6	scheme == COMPRESSION_WEBP
FIELD	631:10	631:10	7	scheme
LEAF_NODE	631:10	631:10	8	scheme
EQ_OPERATOR	631:17	631:17	7	==
LEAF_NODE	631:17	631:17	8	==
FIELD	631:20	631:20	7	COMPRESSION_WEBP
LEAF_NODE	631:20	631:20	8	COMPRESSION_WEBP
LEAF_NODE	631:37	631:37	6	)
LEAF_NODE	631:38	631:38	4	;
SELECTION	636:2	636:74	3	
KEYWORD	636:2	636:2	4	if
LEAF_NODE	636:2	636:2	5	if
LEAF_NODE	636:5	636:5	4	(
CONDITION	636:7	636:7	4	! _TIFFMergeFields ( tif , TWebPFields , TIFFArrayCount ( TWebPFields ) )
EXPR	636:7	636:7	5	! _TIFFMergeFields ( tif , TWebPFields , TIFFArrayCount ( TWebPFields ) )
UNARY_EXPR	636:7	636:8	6	! _TIFFMergeFields ( tif , TWebPFields , TIFFArrayCount ( TWebPFields ) )
UNARY_OPERATOR	636:7	636:7	7	!
LEAF_NODE	636:7	636:7	8	!
FUNCTION_CALL	636:8	636:70	7	_TIFFMergeFields ( tif , TWebPFields , TIFFArrayCount ( TWebPFields ) )
CALLEE	636:8	636:8	8	_TIFFMergeFields
LEAF_NODE	636:8	636:8	9	_TIFFMergeFields
LEAF_NODE	636:24	636:24	8	(
ARGUMENT	636:25	636:25	8	tif
FIELD	636:25	636:25	9	tif
LEAF_NODE	636:25	636:25	10	tif
LEAF_NODE	636:28	636:28	8	,
ARGUMENT	636:30	636:30	8	TWebPFields
FIELD	636:30	636:30	9	TWebPFields
LEAF_NODE	636:30	636:30	10	TWebPFields
LEAF_NODE	636:41	636:41	8	,
ARGUMENT	636:43	636:43	8	TIFFArrayCount ( TWebPFields )
FUNCTION_CALL	636:43	636:69	9	TIFFArrayCount ( TWebPFields )
CALLEE	636:43	636:43	10	TIFFArrayCount
LEAF_NODE	636:43	636:43	11	TIFFArrayCount
LEAF_NODE	636:57	636:57	10	(
ARGUMENT	636:58	636:58	10	TWebPFields
FIELD	636:58	636:58	11	TWebPFields
LEAF_NODE	636:58	636:58	12	TWebPFields
LEAF_NODE	636:69	636:69	10	)
LEAF_NODE	636:70	636:70	8	)
LEAF_NODE	636:72	636:72	4	)
STATEMENTS	636:74	640:2	4	
LEAF_NODE	636:74	636:74	5	{
STATEMENTS	637:4	639:4	5	
EXPR_STATEMENT	637:4	638:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging WebP codec-specific tags failed" ) ;
EXPR	637:4	637:4	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging WebP codec-specific tags failed" )
FUNCTION_CALL	637:4	638:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging WebP codec-specific tags failed" )
CALLEE	637:4	637:4	9	TIFFErrorExt
LEAF_NODE	637:4	637:4	10	TIFFErrorExt
LEAF_NODE	637:16	637:16	9	(
ARGUMENT	637:17	637:17	9	tif -> tif_clientdata
FIELD	637:17	637:22	10	tif -> tif_clientdata
LEAF_NODE	637:17	637:17	11	tif
LEAF_NODE	637:20	637:20	11	->
LEAF_NODE	637:22	637:22	11	tif_clientdata
LEAF_NODE	637:36	637:36	9	,
ARGUMENT	637:38	637:38	9	module
FIELD	637:38	637:38	10	module
LEAF_NODE	637:38	637:38	11	module
LEAF_NODE	637:44	637:44	9	,
ARGUMENT	638:16	638:16	9	"Merging WebP codec-specific tags failed"
FIELD	638:16	638:16	10	"Merging WebP codec-specific tags failed"
LEAF_NODE	638:16	638:16	11	"Merging WebP codec-specific tags failed"
LEAF_NODE	638:57	638:57	9	)
LEAF_NODE	638:58	638:58	7	;
JUMP_STATEMENT	639:4	639:12	6	return 0 ;
KEYWORD	639:4	639:4	7	return
LEAF_NODE	639:4	639:4	8	return
DESTINATION	639:11	639:11	7	0
EXPR	639:11	639:11	8	0
FIELD	639:11	639:11	9	0
LEAF_NODE	639:11	639:11	10	0
LEAF_NODE	639:12	639:12	7	;
LEAF_NODE	640:2	640:2	5	}
EXPR_STATEMENT	645:2	645:57	3	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( WebPState ) ) ;
EXPR	645:2	645:2	4	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( WebPState ) )
ASSIGN	645:2	645:18	5	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( WebPState ) )
LVAL	645:2	645:2	6	tif -> tif_data
FIELD	645:2	645:7	7	tif -> tif_data
LEAF_NODE	645:2	645:2	8	tif
LEAF_NODE	645:5	645:5	8	->
LEAF_NODE	645:7	645:7	8	tif_data
ASSIGN_OP	645:16	645:16	6	=
LEAF_NODE	645:16	645:16	7	=
RVAL	645:18	645:27	6	( uint8 * ) _TIFFmalloc ( sizeof ( WebPState ) )
LEAF_NODE	645:18	645:18	7	(
TYPE_NAME	645:19	645:19	7	uint8
LEAF_NODE	645:19	645:19	8	uint8
LEAF_NODE	645:24	645:24	7	*
LEAF_NODE	645:25	645:25	7	)
FUNCTION_CALL	645:27	645:56	7	_TIFFmalloc ( sizeof ( WebPState ) )
CALLEE	645:27	645:27	8	_TIFFmalloc
LEAF_NODE	645:27	645:27	9	_TIFFmalloc
LEAF_NODE	645:38	645:38	8	(
ARGUMENT	645:39	645:39	8	sizeof ( WebPState )
FUNCTION_CALL	645:39	645:55	9	sizeof ( WebPState )
CALLEE	645:39	645:39	10	sizeof
LEAF_NODE	645:39	645:39	11	sizeof
LEAF_NODE	645:45	645:45	10	(
ARGUMENT	645:46	645:46	10	WebPState
FIELD	645:46	645:46	11	WebPState
LEAF_NODE	645:46	645:46	12	WebPState
LEAF_NODE	645:55	645:55	10	)
LEAF_NODE	645:56	645:56	8	)
LEAF_NODE	645:57	645:57	4	;
SELECTION	646:2	647:4	3	
KEYWORD	646:2	646:2	4	if
LEAF_NODE	646:2	646:2	5	if
LEAF_NODE	646:5	646:5	4	(
CONDITION	646:6	646:6	4	tif -> tif_data == NULL
EXPR	646:6	646:23	5	tif -> tif_data == NULL
FIELD	646:6	646:11	6	tif -> tif_data
LEAF_NODE	646:6	646:6	7	tif
LEAF_NODE	646:9	646:9	7	->
LEAF_NODE	646:11	646:11	7	tif_data
EQ_OPERATOR	646:20	646:20	6	==
LEAF_NODE	646:20	646:20	7	==
FIELD	646:23	646:23	6	NULL
LEAF_NODE	646:23	646:23	7	NULL
LEAF_NODE	646:27	646:27	4	)
STATEMENTS	647:4	647:4	4	
JUMP_STATEMENT	647:4	647:12	5	goto bad ;
KEYWORD	647:4	647:4	6	goto
LEAF_NODE	647:4	647:4	7	goto
DESTINATION	647:9	647:9	6	bad
LEAF_NODE	647:9	647:9	7	bad
LEAF_NODE	647:12	647:12	6	;
EXPR_STATEMENT	648:2	648:18	3	sp = LState ( tif ) ;
EXPR	648:2	648:2	4	sp = LState ( tif )
ASSIGN	648:2	648:7	5	sp = LState ( tif )
LVAL	648:2	648:2	6	sp
FIELD	648:2	648:2	7	sp
LEAF_NODE	648:2	648:2	8	sp
ASSIGN_OP	648:5	648:5	6	=
LEAF_NODE	648:5	648:5	7	=
RVAL	648:7	648:7	6	LState ( tif )
FUNCTION_CALL	648:7	648:17	7	LState ( tif )
CALLEE	648:7	648:7	8	LState
LEAF_NODE	648:7	648:7	9	LState
LEAF_NODE	648:13	648:13	8	(
ARGUMENT	648:14	648:14	8	tif
FIELD	648:14	648:14	9	tif
LEAF_NODE	648:14	648:14	10	tif
LEAF_NODE	648:17	648:17	8	)
LEAF_NODE	648:18	648:18	4	;
EXPR_STATEMENT	653:2	653:48	3	sp -> vgetparent = tif -> tif_tagmethods . vgetfield ;
EXPR	653:2	653:2	4	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
ASSIGN	653:2	653:19	5	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
LVAL	653:2	653:2	6	sp -> vgetparent
FIELD	653:2	653:6	7	sp -> vgetparent
LEAF_NODE	653:2	653:2	8	sp
LEAF_NODE	653:4	653:4	8	->
LEAF_NODE	653:6	653:6	8	vgetparent
ASSIGN_OP	653:17	653:17	6	=
LEAF_NODE	653:17	653:17	7	=
RVAL	653:19	653:19	6	tif -> tif_tagmethods . vgetfield
FIELD	653:19	653:39	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	653:19	653:19	8	tif
LEAF_NODE	653:22	653:22	8	->
LEAF_NODE	653:24	653:24	8	tif_tagmethods
LEAF_NODE	653:38	653:38	8	.
LEAF_NODE	653:39	653:39	8	vgetfield
LEAF_NODE	653:48	653:48	4	;
EXPR_STATEMENT	654:2	654:48	3	tif -> tif_tagmethods . vgetfield = TWebPVGetField ;
EXPR	654:2	654:2	4	tif -> tif_tagmethods . vgetfield = TWebPVGetField
ASSIGN	654:2	654:34	5	tif -> tif_tagmethods . vgetfield = TWebPVGetField
LVAL	654:2	654:2	6	tif -> tif_tagmethods . vgetfield
FIELD	654:2	654:22	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	654:2	654:2	8	tif
LEAF_NODE	654:5	654:5	8	->
LEAF_NODE	654:7	654:7	8	tif_tagmethods
LEAF_NODE	654:21	654:21	8	.
LEAF_NODE	654:22	654:22	8	vgetfield
ASSIGN_OP	654:32	654:32	6	=
LEAF_NODE	654:32	654:32	7	=
RVAL	654:34	654:34	6	TWebPVGetField
FIELD	654:34	654:34	7	TWebPVGetField
LEAF_NODE	654:34	654:34	8	TWebPVGetField
LEAF_NODE	654:48	654:48	4	;
EXPR_STATEMENT	655:2	655:48	3	sp -> vsetparent = tif -> tif_tagmethods . vsetfield ;
EXPR	655:2	655:2	4	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
ASSIGN	655:2	655:19	5	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
LVAL	655:2	655:2	6	sp -> vsetparent
FIELD	655:2	655:6	7	sp -> vsetparent
LEAF_NODE	655:2	655:2	8	sp
LEAF_NODE	655:4	655:4	8	->
LEAF_NODE	655:6	655:6	8	vsetparent
ASSIGN_OP	655:17	655:17	6	=
LEAF_NODE	655:17	655:17	7	=
RVAL	655:19	655:19	6	tif -> tif_tagmethods . vsetfield
FIELD	655:19	655:39	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	655:19	655:19	8	tif
LEAF_NODE	655:22	655:22	8	->
LEAF_NODE	655:24	655:24	8	tif_tagmethods
LEAF_NODE	655:38	655:38	8	.
LEAF_NODE	655:39	655:39	8	vsetfield
LEAF_NODE	655:48	655:48	4	;
EXPR_STATEMENT	656:2	656:48	3	tif -> tif_tagmethods . vsetfield = TWebPVSetField ;
EXPR	656:2	656:2	4	tif -> tif_tagmethods . vsetfield = TWebPVSetField
ASSIGN	656:2	656:34	5	tif -> tif_tagmethods . vsetfield = TWebPVSetField
LVAL	656:2	656:2	6	tif -> tif_tagmethods . vsetfield
FIELD	656:2	656:22	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	656:2	656:2	8	tif
LEAF_NODE	656:5	656:5	8	->
LEAF_NODE	656:7	656:7	8	tif_tagmethods
LEAF_NODE	656:21	656:21	8	.
LEAF_NODE	656:22	656:22	8	vsetfield
ASSIGN_OP	656:32	656:32	6	=
LEAF_NODE	656:32	656:32	7	=
RVAL	656:34	656:34	6	TWebPVSetField
FIELD	656:34	656:34	7	TWebPVSetField
LEAF_NODE	656:34	656:34	8	TWebPVSetField
LEAF_NODE	656:48	656:48	4	;
EXPR_STATEMENT	659:2	659:27	3	sp -> quality_level = 75.0f ;
EXPR	659:2	659:2	4	sp -> quality_level = 75.0f
ASSIGN	659:2	659:22	5	sp -> quality_level = 75.0f
LVAL	659:2	659:2	6	sp -> quality_level
FIELD	659:2	659:6	7	sp -> quality_level
LEAF_NODE	659:2	659:2	8	sp
LEAF_NODE	659:4	659:4	8	->
LEAF_NODE	659:6	659:6	8	quality_level
ASSIGN_OP	659:20	659:20	6	=
LEAF_NODE	659:20	659:20	7	=
RVAL	659:22	659:22	6	75.0f
FIELD	659:22	659:22	7	75.0f
LEAF_NODE	659:22	659:22	8	75.0f
LEAF_NODE	659:27	659:27	4	;
EXPR_STATEMENT	660:2	660:18	3	sp -> lossless = 0 ;
EXPR	660:2	660:2	4	sp -> lossless = 0
ASSIGN	660:2	660:17	5	sp -> lossless = 0
LVAL	660:2	660:2	6	sp -> lossless
FIELD	660:2	660:6	7	sp -> lossless
LEAF_NODE	660:2	660:2	8	sp
LEAF_NODE	660:4	660:4	8	->
LEAF_NODE	660:6	660:6	8	lossless
ASSIGN_OP	660:15	660:15	6	=
LEAF_NODE	660:15	660:15	7	=
RVAL	660:17	660:17	6	0
FIELD	660:17	660:17	7	0
LEAF_NODE	660:17	660:17	8	0
LEAF_NODE	660:18	660:18	4	;
EXPR_STATEMENT	661:2	661:15	3	sp -> state = 0 ;
EXPR	661:2	661:2	4	sp -> state = 0
ASSIGN	661:2	661:14	5	sp -> state = 0
LVAL	661:2	661:2	6	sp -> state
FIELD	661:2	661:6	7	sp -> state
LEAF_NODE	661:2	661:2	8	sp
LEAF_NODE	661:4	661:4	8	->
LEAF_NODE	661:6	661:6	8	state
ASSIGN_OP	661:12	661:12	6	=
LEAF_NODE	661:12	661:12	7	=
RVAL	661:14	661:14	6	0
FIELD	661:14	661:14	7	0
LEAF_NODE	661:14	661:14	8	0
LEAF_NODE	661:15	661:15	4	;
EXPR_STATEMENT	662:2	662:18	3	sp -> nSamples = 0 ;
EXPR	662:2	662:2	4	sp -> nSamples = 0
ASSIGN	662:2	662:17	5	sp -> nSamples = 0
LVAL	662:2	662:2	6	sp -> nSamples
FIELD	662:2	662:6	7	sp -> nSamples
LEAF_NODE	662:2	662:2	8	sp
LEAF_NODE	662:4	662:4	8	->
LEAF_NODE	662:6	662:6	8	nSamples
ASSIGN_OP	662:15	662:15	6	=
LEAF_NODE	662:15	662:15	7	=
RVAL	662:17	662:17	6	0
FIELD	662:17	662:17	7	0
LEAF_NODE	662:17	662:17	8	0
LEAF_NODE	662:18	662:18	4	;
EXPR_STATEMENT	663:2	663:22	3	sp -> psDecoder = NULL ;
EXPR	663:2	663:2	4	sp -> psDecoder = NULL
ASSIGN	663:2	663:18	5	sp -> psDecoder = NULL
LVAL	663:2	663:2	6	sp -> psDecoder
FIELD	663:2	663:6	7	sp -> psDecoder
LEAF_NODE	663:2	663:2	8	sp
LEAF_NODE	663:4	663:4	8	->
LEAF_NODE	663:6	663:6	8	psDecoder
ASSIGN_OP	663:16	663:16	6	=
LEAF_NODE	663:16	663:16	7	=
RVAL	663:18	663:18	6	NULL
FIELD	663:18	663:18	7	NULL
LEAF_NODE	663:18	663:18	8	NULL
LEAF_NODE	663:22	663:22	4	;
EXPR_STATEMENT	664:2	664:16	3	sp -> last_y = 0 ;
EXPR	664:2	664:2	4	sp -> last_y = 0
ASSIGN	664:2	664:15	5	sp -> last_y = 0
LVAL	664:2	664:2	6	sp -> last_y
FIELD	664:2	664:6	7	sp -> last_y
LEAF_NODE	664:2	664:2	8	sp
LEAF_NODE	664:4	664:4	8	->
LEAF_NODE	664:6	664:6	8	last_y
ASSIGN_OP	664:13	664:13	6	=
LEAF_NODE	664:13	664:13	7	=
RVAL	664:15	664:15	6	0
FIELD	664:15	664:15	7	0
LEAF_NODE	664:15	664:15	8	0
LEAF_NODE	664:16	664:16	4	;
EXPR_STATEMENT	666:2	666:23	3	sp -> buffer_offset = 0 ;
EXPR	666:2	666:2	4	sp -> buffer_offset = 0
ASSIGN	666:2	666:22	5	sp -> buffer_offset = 0
LVAL	666:2	666:2	6	sp -> buffer_offset
FIELD	666:2	666:6	7	sp -> buffer_offset
LEAF_NODE	666:2	666:2	8	sp
LEAF_NODE	666:4	666:4	8	->
LEAF_NODE	666:6	666:6	8	buffer_offset
ASSIGN_OP	666:20	666:20	6	=
LEAF_NODE	666:20	666:20	7	=
RVAL	666:22	666:22	6	0
FIELD	666:22	666:22	7	0
LEAF_NODE	666:22	666:22	8	0
LEAF_NODE	666:23	666:23	4	;
EXPR_STATEMENT	667:2	667:20	3	sp -> pBuffer = NULL ;
EXPR	667:2	667:2	4	sp -> pBuffer = NULL
ASSIGN	667:2	667:16	5	sp -> pBuffer = NULL
LVAL	667:2	667:2	6	sp -> pBuffer
FIELD	667:2	667:6	7	sp -> pBuffer
LEAF_NODE	667:2	667:2	8	sp
LEAF_NODE	667:4	667:4	8	->
LEAF_NODE	667:6	667:6	8	pBuffer
ASSIGN_OP	667:14	667:14	6	=
LEAF_NODE	667:14	667:14	7	=
RVAL	667:16	667:16	6	NULL
FIELD	667:16	667:16	7	NULL
LEAF_NODE	667:16	667:16	8	NULL
LEAF_NODE	667:20	667:20	4	;
EXPR_STATEMENT	674:2	674:37	3	tif -> tif_fixuptags = TWebPFixupTags ;
EXPR	674:2	674:2	4	tif -> tif_fixuptags = TWebPFixupTags
ASSIGN	674:2	674:23	5	tif -> tif_fixuptags = TWebPFixupTags
LVAL	674:2	674:2	6	tif -> tif_fixuptags
FIELD	674:2	674:7	7	tif -> tif_fixuptags
LEAF_NODE	674:2	674:2	8	tif
LEAF_NODE	674:5	674:5	8	->
LEAF_NODE	674:7	674:7	8	tif_fixuptags
ASSIGN_OP	674:21	674:21	6	=
LEAF_NODE	674:21	674:21	7	=
RVAL	674:23	674:23	6	TWebPFixupTags
FIELD	674:23	674:23	7	TWebPFixupTags
LEAF_NODE	674:23	674:23	8	TWebPFixupTags
LEAF_NODE	674:37	674:37	4	;
EXPR_STATEMENT	675:2	675:41	3	tif -> tif_setupdecode = TWebPSetupDecode ;
EXPR	675:2	675:2	4	tif -> tif_setupdecode = TWebPSetupDecode
ASSIGN	675:2	675:25	5	tif -> tif_setupdecode = TWebPSetupDecode
LVAL	675:2	675:2	6	tif -> tif_setupdecode
FIELD	675:2	675:7	7	tif -> tif_setupdecode
LEAF_NODE	675:2	675:2	8	tif
LEAF_NODE	675:5	675:5	8	->
LEAF_NODE	675:7	675:7	8	tif_setupdecode
ASSIGN_OP	675:23	675:23	6	=
LEAF_NODE	675:23	675:23	7	=
RVAL	675:25	675:25	6	TWebPSetupDecode
FIELD	675:25	675:25	7	TWebPSetupDecode
LEAF_NODE	675:25	675:25	8	TWebPSetupDecode
LEAF_NODE	675:41	675:41	4	;
EXPR_STATEMENT	676:2	676:37	3	tif -> tif_predecode = TWebPPreDecode ;
EXPR	676:2	676:2	4	tif -> tif_predecode = TWebPPreDecode
ASSIGN	676:2	676:23	5	tif -> tif_predecode = TWebPPreDecode
LVAL	676:2	676:2	6	tif -> tif_predecode
FIELD	676:2	676:7	7	tif -> tif_predecode
LEAF_NODE	676:2	676:2	8	tif
LEAF_NODE	676:5	676:5	8	->
LEAF_NODE	676:7	676:7	8	tif_predecode
ASSIGN_OP	676:21	676:21	6	=
LEAF_NODE	676:21	676:21	7	=
RVAL	676:23	676:23	6	TWebPPreDecode
FIELD	676:23	676:23	7	TWebPPreDecode
LEAF_NODE	676:23	676:23	8	TWebPPreDecode
LEAF_NODE	676:37	676:37	4	;
EXPR_STATEMENT	677:2	677:34	3	tif -> tif_decoderow = TWebPDecode ;
EXPR	677:2	677:2	4	tif -> tif_decoderow = TWebPDecode
ASSIGN	677:2	677:23	5	tif -> tif_decoderow = TWebPDecode
LVAL	677:2	677:2	6	tif -> tif_decoderow
FIELD	677:2	677:7	7	tif -> tif_decoderow
LEAF_NODE	677:2	677:2	8	tif
LEAF_NODE	677:5	677:5	8	->
LEAF_NODE	677:7	677:7	8	tif_decoderow
ASSIGN_OP	677:21	677:21	6	=
LEAF_NODE	677:21	677:21	7	=
RVAL	677:23	677:23	6	TWebPDecode
FIELD	677:23	677:23	7	TWebPDecode
LEAF_NODE	677:23	677:23	8	TWebPDecode
LEAF_NODE	677:34	677:34	4	;
EXPR_STATEMENT	678:2	678:36	3	tif -> tif_decodestrip = TWebPDecode ;
EXPR	678:2	678:2	4	tif -> tif_decodestrip = TWebPDecode
ASSIGN	678:2	678:25	5	tif -> tif_decodestrip = TWebPDecode
LVAL	678:2	678:2	6	tif -> tif_decodestrip
FIELD	678:2	678:7	7	tif -> tif_decodestrip
LEAF_NODE	678:2	678:2	8	tif
LEAF_NODE	678:5	678:5	8	->
LEAF_NODE	678:7	678:7	8	tif_decodestrip
ASSIGN_OP	678:23	678:23	6	=
LEAF_NODE	678:23	678:23	7	=
RVAL	678:25	678:25	6	TWebPDecode
FIELD	678:25	678:25	7	TWebPDecode
LEAF_NODE	678:25	678:25	8	TWebPDecode
LEAF_NODE	678:36	678:36	4	;
EXPR_STATEMENT	679:2	679:35	3	tif -> tif_decodetile = TWebPDecode ;
EXPR	679:2	679:2	4	tif -> tif_decodetile = TWebPDecode
ASSIGN	679:2	679:24	5	tif -> tif_decodetile = TWebPDecode
LVAL	679:2	679:2	6	tif -> tif_decodetile
FIELD	679:2	679:7	7	tif -> tif_decodetile
LEAF_NODE	679:2	679:2	8	tif
LEAF_NODE	679:5	679:5	8	->
LEAF_NODE	679:7	679:7	8	tif_decodetile
ASSIGN_OP	679:22	679:22	6	=
LEAF_NODE	679:22	679:22	7	=
RVAL	679:24	679:24	6	TWebPDecode
FIELD	679:24	679:24	7	TWebPDecode
LEAF_NODE	679:24	679:24	8	TWebPDecode
LEAF_NODE	679:35	679:35	4	;
EXPR_STATEMENT	680:2	680:41	3	tif -> tif_setupencode = TWebPSetupEncode ;
EXPR	680:2	680:2	4	tif -> tif_setupencode = TWebPSetupEncode
ASSIGN	680:2	680:25	5	tif -> tif_setupencode = TWebPSetupEncode
LVAL	680:2	680:2	6	tif -> tif_setupencode
FIELD	680:2	680:7	7	tif -> tif_setupencode
LEAF_NODE	680:2	680:2	8	tif
LEAF_NODE	680:5	680:5	8	->
LEAF_NODE	680:7	680:7	8	tif_setupencode
ASSIGN_OP	680:23	680:23	6	=
LEAF_NODE	680:23	680:23	7	=
RVAL	680:25	680:25	6	TWebPSetupEncode
FIELD	680:25	680:25	7	TWebPSetupEncode
LEAF_NODE	680:25	680:25	8	TWebPSetupEncode
LEAF_NODE	680:41	680:41	4	;
EXPR_STATEMENT	681:2	681:37	3	tif -> tif_preencode = TWebPPreEncode ;
EXPR	681:2	681:2	4	tif -> tif_preencode = TWebPPreEncode
ASSIGN	681:2	681:23	5	tif -> tif_preencode = TWebPPreEncode
LVAL	681:2	681:2	6	tif -> tif_preencode
FIELD	681:2	681:7	7	tif -> tif_preencode
LEAF_NODE	681:2	681:2	8	tif
LEAF_NODE	681:5	681:5	8	->
LEAF_NODE	681:7	681:7	8	tif_preencode
ASSIGN_OP	681:21	681:21	6	=
LEAF_NODE	681:21	681:21	7	=
RVAL	681:23	681:23	6	TWebPPreEncode
FIELD	681:23	681:23	7	TWebPPreEncode
LEAF_NODE	681:23	681:23	8	TWebPPreEncode
LEAF_NODE	681:37	681:37	4	;
EXPR_STATEMENT	682:2	682:39	3	tif -> tif_postencode = TWebPPostEncode ;
EXPR	682:2	682:2	4	tif -> tif_postencode = TWebPPostEncode
ASSIGN	682:2	682:24	5	tif -> tif_postencode = TWebPPostEncode
LVAL	682:2	682:2	6	tif -> tif_postencode
FIELD	682:2	682:7	7	tif -> tif_postencode
LEAF_NODE	682:2	682:2	8	tif
LEAF_NODE	682:5	682:5	8	->
LEAF_NODE	682:7	682:7	8	tif_postencode
ASSIGN_OP	682:22	682:22	6	=
LEAF_NODE	682:22	682:22	7	=
RVAL	682:24	682:24	6	TWebPPostEncode
FIELD	682:24	682:24	7	TWebPPostEncode
LEAF_NODE	682:24	682:24	8	TWebPPostEncode
LEAF_NODE	682:39	682:39	4	;
EXPR_STATEMENT	683:2	683:34	3	tif -> tif_encoderow = TWebPEncode ;
EXPR	683:2	683:2	4	tif -> tif_encoderow = TWebPEncode
ASSIGN	683:2	683:23	5	tif -> tif_encoderow = TWebPEncode
LVAL	683:2	683:2	6	tif -> tif_encoderow
FIELD	683:2	683:7	7	tif -> tif_encoderow
LEAF_NODE	683:2	683:2	8	tif
LEAF_NODE	683:5	683:5	8	->
LEAF_NODE	683:7	683:7	8	tif_encoderow
ASSIGN_OP	683:21	683:21	6	=
LEAF_NODE	683:21	683:21	7	=
RVAL	683:23	683:23	6	TWebPEncode
FIELD	683:23	683:23	7	TWebPEncode
LEAF_NODE	683:23	683:23	8	TWebPEncode
LEAF_NODE	683:34	683:34	4	;
EXPR_STATEMENT	684:2	684:36	3	tif -> tif_encodestrip = TWebPEncode ;
EXPR	684:2	684:2	4	tif -> tif_encodestrip = TWebPEncode
ASSIGN	684:2	684:25	5	tif -> tif_encodestrip = TWebPEncode
LVAL	684:2	684:2	6	tif -> tif_encodestrip
FIELD	684:2	684:7	7	tif -> tif_encodestrip
LEAF_NODE	684:2	684:2	8	tif
LEAF_NODE	684:5	684:5	8	->
LEAF_NODE	684:7	684:7	8	tif_encodestrip
ASSIGN_OP	684:23	684:23	6	=
LEAF_NODE	684:23	684:23	7	=
RVAL	684:25	684:25	6	TWebPEncode
FIELD	684:25	684:25	7	TWebPEncode
LEAF_NODE	684:25	684:25	8	TWebPEncode
LEAF_NODE	684:36	684:36	4	;
EXPR_STATEMENT	685:2	685:35	3	tif -> tif_encodetile = TWebPEncode ;
EXPR	685:2	685:2	4	tif -> tif_encodetile = TWebPEncode
ASSIGN	685:2	685:24	5	tif -> tif_encodetile = TWebPEncode
LVAL	685:2	685:2	6	tif -> tif_encodetile
FIELD	685:2	685:7	7	tif -> tif_encodetile
LEAF_NODE	685:2	685:2	8	tif
LEAF_NODE	685:5	685:5	8	->
LEAF_NODE	685:7	685:7	8	tif_encodetile
ASSIGN_OP	685:22	685:22	6	=
LEAF_NODE	685:22	685:22	7	=
RVAL	685:24	685:24	6	TWebPEncode
FIELD	685:24	685:24	7	TWebPEncode
LEAF_NODE	685:24	685:24	8	TWebPEncode
LEAF_NODE	685:35	685:35	4	;
EXPR_STATEMENT	686:2	686:33	3	tif -> tif_cleanup = TWebPCleanup ;
EXPR	686:2	686:2	4	tif -> tif_cleanup = TWebPCleanup
ASSIGN	686:2	686:21	5	tif -> tif_cleanup = TWebPCleanup
LVAL	686:2	686:2	6	tif -> tif_cleanup
FIELD	686:2	686:7	7	tif -> tif_cleanup
LEAF_NODE	686:2	686:2	8	tif
LEAF_NODE	686:5	686:5	8	->
LEAF_NODE	686:7	686:7	8	tif_cleanup
ASSIGN_OP	686:19	686:19	6	=
LEAF_NODE	686:19	686:19	7	=
RVAL	686:21	686:21	6	TWebPCleanup
FIELD	686:21	686:21	7	TWebPCleanup
LEAF_NODE	686:21	686:21	8	TWebPCleanup
LEAF_NODE	686:33	686:33	4	;
JUMP_STATEMENT	688:2	688:10	3	return 1 ;
KEYWORD	688:2	688:2	4	return
LEAF_NODE	688:2	688:2	5	return
DESTINATION	688:9	688:9	4	1
EXPR	688:9	688:9	5	1
FIELD	688:9	688:9	6	1
LEAF_NODE	688:9	688:9	7	1
LEAF_NODE	688:10	688:10	4	;
LABEL	689:0	689:3	3	bad :
LEAF_NODE	689:0	689:0	4	bad
LEAF_NODE	689:3	689:3	4	:
EXPR_STATEMENT	690:2	691:40	3	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for WebP state block" ) ;
EXPR	690:2	690:2	4	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for WebP state block" )
FUNCTION_CALL	690:2	691:39	5	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for WebP state block" )
CALLEE	690:2	690:2	6	TIFFErrorExt
LEAF_NODE	690:2	690:2	7	TIFFErrorExt
LEAF_NODE	690:14	690:14	6	(
ARGUMENT	690:15	690:15	6	tif -> tif_clientdata
FIELD	690:15	690:20	7	tif -> tif_clientdata
LEAF_NODE	690:15	690:15	8	tif
LEAF_NODE	690:18	690:18	8	->
LEAF_NODE	690:20	690:20	8	tif_clientdata
LEAF_NODE	690:34	690:34	6	,
ARGUMENT	690:36	690:36	6	module
FIELD	690:36	690:36	7	module
LEAF_NODE	690:36	690:36	8	module
LEAF_NODE	690:42	690:42	6	,
ARGUMENT	691:8	691:8	6	"No space for WebP state block"
FIELD	691:8	691:8	7	"No space for WebP state block"
LEAF_NODE	691:8	691:8	8	"No space for WebP state block"
LEAF_NODE	691:39	691:39	6	)
LEAF_NODE	691:40	691:40	4	;
JUMP_STATEMENT	692:2	692:10	3	return 0 ;
KEYWORD	692:2	692:2	4	return
LEAF_NODE	692:2	692:2	5	return
DESTINATION	692:9	692:9	4	0
EXPR	692:9	692:9	5	0
FIELD	692:9	692:9	6	0
LEAF_NODE	692:9	692:9	7	0
LEAF_NODE	692:10	692:10	4	;
LEAF_NODE	693:0	693:0	2	}
