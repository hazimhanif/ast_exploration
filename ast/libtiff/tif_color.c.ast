SOURCE_FILE	43:0	233:0	0	
FUNCTION_DEF	43:0	69:0	1	
RETURN_TYPE	43:0	43:0	2	void
TYPE_NAME	43:0	43:0	3	void
LEAF_NODE	43:0	43:0	4	void
FUNCTION_NAME	44:0	44:0	2	TIFFCIELabToXYZ
LEAF_NODE	44:0	44:0	3	TIFFCIELabToXYZ
PARAMETER_LIST	44:15	45:30	2	( TIFFCIELabToRGB * cielab , uint32 l , int32 a , int32 b , float * X , float * Y , float * Z )
LEAF_NODE	44:15	44:15	3	(
PARAMETER_DECL	44:16	44:33	3	TIFFCIELabToRGB * cielab
TYPE	44:16	44:32	4	TIFFCIELabToRGB *
TYPE_NAME	44:16	44:16	5	TIFFCIELabToRGB
LEAF_NODE	44:16	44:16	6	TIFFCIELabToRGB
POINTER	44:32	44:32	5	*
LEAF_NODE	44:32	44:32	6	*
NAME	44:33	44:33	4	cielab
LEAF_NODE	44:33	44:33	5	cielab
LEAF_NODE	44:39	44:39	3	,
PARAMETER_DECL	44:41	44:48	3	uint32 l
TYPE	44:41	44:41	4	uint32
TYPE_NAME	44:41	44:41	5	uint32
LEAF_NODE	44:41	44:41	6	uint32
NAME	44:48	44:48	4	l
LEAF_NODE	44:48	44:48	5	l
LEAF_NODE	44:49	44:49	3	,
PARAMETER_DECL	44:51	44:57	3	int32 a
TYPE	44:51	44:51	4	int32
TYPE_NAME	44:51	44:51	5	int32
LEAF_NODE	44:51	44:51	6	int32
NAME	44:57	44:57	4	a
LEAF_NODE	44:57	44:57	5	a
LEAF_NODE	44:58	44:58	3	,
PARAMETER_DECL	44:60	44:66	3	int32 b
TYPE	44:60	44:60	4	int32
TYPE_NAME	44:60	44:60	5	int32
LEAF_NODE	44:60	44:60	6	int32
NAME	44:66	44:66	4	b
LEAF_NODE	44:66	44:66	5	b
LEAF_NODE	44:67	44:67	3	,
PARAMETER_DECL	45:2	45:9	3	float * X
TYPE	45:2	45:8	4	float *
TYPE_NAME	45:2	45:2	5	float
LEAF_NODE	45:2	45:2	6	float
POINTER	45:8	45:8	5	*
LEAF_NODE	45:8	45:8	6	*
NAME	45:9	45:9	4	X
LEAF_NODE	45:9	45:9	5	X
LEAF_NODE	45:10	45:10	3	,
PARAMETER_DECL	45:12	45:19	3	float * Y
TYPE	45:12	45:18	4	float *
TYPE_NAME	45:12	45:12	5	float
LEAF_NODE	45:12	45:12	6	float
POINTER	45:18	45:18	5	*
LEAF_NODE	45:18	45:18	6	*
NAME	45:19	45:19	4	Y
LEAF_NODE	45:19	45:19	5	Y
LEAF_NODE	45:20	45:20	3	,
PARAMETER_DECL	45:22	45:29	3	float * Z
TYPE	45:22	45:28	4	float *
TYPE_NAME	45:22	45:22	5	float
LEAF_NODE	45:22	45:22	6	float
POINTER	45:28	45:28	5	*
LEAF_NODE	45:28	45:28	6	*
NAME	45:29	45:29	4	Z
LEAF_NODE	45:29	45:29	5	Z
LEAF_NODE	45:30	45:30	3	)
LEAF_NODE	46:0	46:0	2	{
STATEMENTS	47:1	68:24	2	
LEAF_NODE	47:1	47:1	3	float
LEAF_NODE	47:7	47:7	3	L
LEAF_NODE	47:9	47:9	3	=
LEAF_NODE	47:11	47:11	3	(
LEAF_NODE	47:12	47:12	3	float
LEAF_NODE	47:17	47:17	3	)
LEAF_NODE	47:18	47:18	3	l
EXPR_STATEMENT	47:20	47:37	3	* 100.0F / 255.0F ;
EXPR	47:20	47:31	4	* 100.0F / 255.0F
UNARY_EXPR	47:20	47:22	5	* 100.0F
UNARY_OPERATOR	47:20	47:20	6	*
LEAF_NODE	47:20	47:20	7	*
FIELD	47:22	47:22	6	100.0F
LEAF_NODE	47:22	47:22	7	100.0F
LEAF_NODE	47:29	47:29	5	/
FIELD	47:31	47:31	5	255.0F
LEAF_NODE	47:31	47:31	6	255.0F
LEAF_NODE	47:37	47:37	4	;
SIMPLE_DECL	48:1	48:15	3	float cby , float tmp ;
INIT_DECL_LIST	48:1	48:1	4	float cby , float tmp
VAR_DECL	48:1	48:7	5	float cby
TYPE	48:1	48:1	6	float
TYPE_NAME	48:1	48:1	7	float
LEAF_NODE	48:1	48:1	8	float
NAME	48:7	48:7	6	cby
LEAF_NODE	48:7	48:7	7	cby
LEAF_NODE	48:10	48:10	5	,
VAR_DECL	48:1	48:12	5	float tmp
TYPE	48:1	48:1	6	float
TYPE_NAME	48:1	48:1	7	float
LEAF_NODE	48:1	48:1	8	float
NAME	48:12	48:12	6	tmp
LEAF_NODE	48:12	48:12	7	tmp
LEAF_NODE	48:15	48:15	4	;
SELECTION	50:1	50:18	3	
KEYWORD	50:1	50:1	4	if
LEAF_NODE	50:1	50:1	5	if
LEAF_NODE	50:3	50:3	4	(
CONDITION	50:5	50:5	4	L < 8.856F
EXPR	50:5	50:9	5	L < 8.856F
FIELD	50:5	50:5	6	L
LEAF_NODE	50:5	50:5	7	L
REL_OPERATOR	50:7	50:7	6	<
LEAF_NODE	50:7	50:7	7	<
FIELD	50:9	50:9	6	8.856F
LEAF_NODE	50:9	50:9	7	8.856F
LEAF_NODE	50:16	50:16	4	)
STATEMENTS	50:18	53:1	4	
LEAF_NODE	50:18	50:18	5	{
STATEMENTS	51:2	52:2	5	
EXPR_STATEMENT	51:2	51:34	6	* Y = ( L * cielab -> Y0 ) / 903.292F ;
EXPR	51:2	51:2	7	* Y = ( L * cielab -> Y0 ) / 903.292F
ASSIGN	51:2	51:7	8	* Y = ( L * cielab -> Y0 ) / 903.292F
LVAL	51:2	51:2	9	* Y
UNARY_EXPR	51:2	51:3	10	* Y
UNARY_OPERATOR	51:2	51:2	11	*
LEAF_NODE	51:2	51:2	12	*
FIELD	51:3	51:3	11	Y
LEAF_NODE	51:3	51:3	12	Y
ASSIGN_OP	51:5	51:5	9	=
LEAF_NODE	51:5	51:5	10	=
RVAL	51:7	51:26	9	( L * cielab -> Y0 ) / 903.292F
LEAF_NODE	51:7	51:7	10	(
FIELD	51:8	51:8	10	L
LEAF_NODE	51:8	51:8	11	L
LEAF_NODE	51:10	51:10	10	*
FIELD	51:12	51:20	10	cielab -> Y0
LEAF_NODE	51:12	51:12	11	cielab
LEAF_NODE	51:18	51:18	11	->
LEAF_NODE	51:20	51:20	11	Y0
LEAF_NODE	51:22	51:22	10	)
LEAF_NODE	51:24	51:24	10	/
FIELD	51:26	51:26	10	903.292F
LEAF_NODE	51:26	51:26	11	903.292F
LEAF_NODE	51:34	51:34	7	;
EXPR_STATEMENT	52:2	52:51	6	cby = 7.787F * ( * Y / cielab -> Y0 ) + 16.0F / 116.0F ;
EXPR	52:2	52:2	7	cby = 7.787F * ( * Y / cielab -> Y0 ) + 16.0F / 116.0F
ASSIGN	52:2	52:8	8	cby = 7.787F * ( * Y / cielab -> Y0 ) + 16.0F / 116.0F
LVAL	52:2	52:2	9	cby
FIELD	52:2	52:2	10	cby
LEAF_NODE	52:2	52:2	11	cby
ASSIGN_OP	52:6	52:6	9	=
LEAF_NODE	52:6	52:6	10	=
RVAL	52:8	52:45	9	7.787F * ( * Y / cielab -> Y0 ) + 16.0F / 116.0F
FIELD	52:8	52:8	10	7.787F
LEAF_NODE	52:8	52:8	11	7.787F
LEAF_NODE	52:15	52:15	10	*
LEAF_NODE	52:17	52:17	10	(
UNARY_EXPR	52:18	52:19	10	* Y
UNARY_OPERATOR	52:18	52:18	11	*
LEAF_NODE	52:18	52:18	12	*
FIELD	52:19	52:19	11	Y
LEAF_NODE	52:19	52:19	12	Y
LEAF_NODE	52:21	52:21	10	/
FIELD	52:23	52:31	10	cielab -> Y0
LEAF_NODE	52:23	52:23	11	cielab
LEAF_NODE	52:29	52:29	11	->
LEAF_NODE	52:31	52:31	11	Y0
LEAF_NODE	52:33	52:33	10	)
LEAF_NODE	52:35	52:35	10	+
FIELD	52:37	52:37	10	16.0F
LEAF_NODE	52:37	52:37	11	16.0F
LEAF_NODE	52:43	52:43	10	/
FIELD	52:45	52:45	10	116.0F
LEAF_NODE	52:45	52:45	11	116.0F
LEAF_NODE	52:51	52:51	7	;
LEAF_NODE	53:1	53:1	5	}
SELECTION	53:3	53:8	3	
KEYWORD	53:3	53:3	4	else
LEAF_NODE	53:3	53:3	5	else
STATEMENTS	53:8	56:1	4	
LEAF_NODE	53:8	53:8	5	{
STATEMENTS	54:2	55:24	5	
EXPR_STATEMENT	54:2	54:28	6	cby = ( L + 16.0F ) / 116.0F ;
EXPR	54:2	54:2	7	cby = ( L + 16.0F ) / 116.0F
ASSIGN	54:2	54:8	8	cby = ( L + 16.0F ) / 116.0F
LVAL	54:2	54:2	9	cby
FIELD	54:2	54:2	10	cby
LEAF_NODE	54:2	54:2	11	cby
ASSIGN_OP	54:6	54:6	9	=
LEAF_NODE	54:6	54:6	10	=
RVAL	54:8	54:22	9	( L + 16.0F ) / 116.0F
LEAF_NODE	54:8	54:8	10	(
FIELD	54:9	54:9	10	L
LEAF_NODE	54:9	54:9	11	L
LEAF_NODE	54:11	54:11	10	+
FIELD	54:13	54:13	10	16.0F
LEAF_NODE	54:13	54:13	11	16.0F
LEAF_NODE	54:18	54:18	10	)
LEAF_NODE	54:20	54:20	10	/
FIELD	54:22	54:22	10	116.0F
LEAF_NODE	54:22	54:22	11	116.0F
LEAF_NODE	54:28	54:28	7	;
LEAF_NODE	55:2	55:2	6	*
LEAF_NODE	55:3	55:3	6	Y
LEAF_NODE	55:5	55:5	6	=
LEAF_NODE	55:7	55:7	6	cielab
LEAF_NODE	55:13	55:13	6	->
LEAF_NODE	55:15	55:15	6	Y0
LEAF_NODE	55:18	55:18	6	*
LEAF_NODE	55:20	55:20	6	cby
EXPR_STATEMENT	55:24	55:35	6	* cby * cby ;
EXPR	55:24	55:32	7	* cby * cby
UNARY_EXPR	55:24	55:26	8	* cby
UNARY_OPERATOR	55:24	55:24	9	*
LEAF_NODE	55:24	55:24	10	*
FIELD	55:26	55:26	9	cby
LEAF_NODE	55:26	55:26	10	cby
LEAF_NODE	55:30	55:30	8	*
FIELD	55:32	55:32	8	cby
LEAF_NODE	55:32	55:32	9	cby
LEAF_NODE	55:35	55:35	7	;
LEAF_NODE	56:1	56:1	5	}
EXPR_STATEMENT	58:1	58:30	3	tmp = ( float ) a / 500.0F + cby ;
EXPR	58:1	58:1	4	tmp = ( float ) a / 500.0F + cby
ASSIGN	58:1	58:7	5	tmp = ( float ) a / 500.0F + cby
LVAL	58:1	58:1	6	tmp
FIELD	58:1	58:1	7	tmp
LEAF_NODE	58:1	58:1	8	tmp
ASSIGN_OP	58:5	58:5	6	=
LEAF_NODE	58:5	58:5	7	=
RVAL	58:7	58:27	6	( float ) a / 500.0F + cby
LEAF_NODE	58:7	58:7	7	(
TYPE_NAME	58:8	58:8	7	float
LEAF_NODE	58:8	58:8	8	float
LEAF_NODE	58:13	58:13	7	)
FIELD	58:14	58:14	7	a
LEAF_NODE	58:14	58:14	8	a
LEAF_NODE	58:16	58:16	7	/
FIELD	58:18	58:18	7	500.0F
LEAF_NODE	58:18	58:18	8	500.0F
LEAF_NODE	58:25	58:25	7	+
FIELD	58:27	58:27	7	cby
LEAF_NODE	58:27	58:27	8	cby
LEAF_NODE	58:30	58:30	4	;
SELECTION	59:1	60:2	3	
KEYWORD	59:1	59:1	4	if
LEAF_NODE	59:1	59:1	5	if
LEAF_NODE	59:3	59:3	4	(
CONDITION	59:5	59:5	4	tmp < 0.2069F
EXPR	59:5	59:11	5	tmp < 0.2069F
FIELD	59:5	59:5	6	tmp
LEAF_NODE	59:5	59:5	7	tmp
REL_OPERATOR	59:9	59:9	6	<
LEAF_NODE	59:9	59:9	7	<
FIELD	59:11	59:11	6	0.2069F
LEAF_NODE	59:11	59:11	7	0.2069F
LEAF_NODE	59:19	59:19	4	)
STATEMENTS	60:2	60:2	4	
LEAF_NODE	60:2	60:2	5	*
LEAF_NODE	60:3	60:3	3	X
LEAF_NODE	60:5	60:5	3	=
LEAF_NODE	60:7	60:7	3	cielab
LEAF_NODE	60:13	60:13	3	->
LEAF_NODE	60:15	60:15	3	X0
EXPR_STATEMENT	60:18	60:45	3	* ( tmp - 0.13793F ) / 7.787F ;
EXPR	60:18	60:39	4	* ( tmp - 0.13793F ) / 7.787F
UNARY_EXPR	60:18	60:35	5	* ( tmp - 0.13793F )
UNARY_OPERATOR	60:18	60:18	6	*
LEAF_NODE	60:18	60:18	7	*
LEAF_NODE	60:20	60:20	6	(
FIELD	60:21	60:21	6	tmp
LEAF_NODE	60:21	60:21	7	tmp
LEAF_NODE	60:25	60:25	6	-
FIELD	60:27	60:27	6	0.13793F
LEAF_NODE	60:27	60:27	7	0.13793F
LEAF_NODE	60:35	60:35	6	)
LEAF_NODE	60:37	60:37	5	/
FIELD	60:39	60:39	5	7.787F
LEAF_NODE	60:39	60:39	6	7.787F
LEAF_NODE	60:45	60:45	4	;
SELECTION	61:1	62:2	3	
KEYWORD	61:1	61:1	4	else
LEAF_NODE	61:1	61:1	5	else
STATEMENTS	62:2	62:2	4	
LEAF_NODE	62:2	62:2	5	*
LEAF_NODE	62:3	62:3	3	X
LEAF_NODE	62:5	62:5	3	=
LEAF_NODE	62:7	62:7	3	cielab
LEAF_NODE	62:13	62:13	3	->
LEAF_NODE	62:15	62:15	3	X0
LEAF_NODE	62:18	62:18	3	*
LEAF_NODE	62:20	62:20	3	tmp
EXPR_STATEMENT	62:24	62:35	3	* tmp * tmp ;
EXPR	62:24	62:32	4	* tmp * tmp
UNARY_EXPR	62:24	62:26	5	* tmp
UNARY_OPERATOR	62:24	62:24	6	*
LEAF_NODE	62:24	62:24	7	*
FIELD	62:26	62:26	6	tmp
LEAF_NODE	62:26	62:26	7	tmp
LEAF_NODE	62:30	62:30	5	*
FIELD	62:32	62:32	5	tmp
LEAF_NODE	62:32	62:32	6	tmp
LEAF_NODE	62:35	62:35	4	;
EXPR_STATEMENT	64:1	64:30	3	tmp = cby - ( float ) b / 200.0F ;
EXPR	64:1	64:1	4	tmp = cby - ( float ) b / 200.0F
ASSIGN	64:1	64:7	5	tmp = cby - ( float ) b / 200.0F
LVAL	64:1	64:1	6	tmp
FIELD	64:1	64:1	7	tmp
LEAF_NODE	64:1	64:1	8	tmp
ASSIGN_OP	64:5	64:5	6	=
LEAF_NODE	64:5	64:5	7	=
RVAL	64:7	64:24	6	cby - ( float ) b / 200.0F
FIELD	64:7	64:7	7	cby
LEAF_NODE	64:7	64:7	8	cby
LEAF_NODE	64:11	64:11	7	-
LEAF_NODE	64:13	64:13	7	(
TYPE_NAME	64:14	64:14	7	float
LEAF_NODE	64:14	64:14	8	float
LEAF_NODE	64:19	64:19	7	)
FIELD	64:20	64:20	7	b
LEAF_NODE	64:20	64:20	8	b
LEAF_NODE	64:22	64:22	7	/
FIELD	64:24	64:24	7	200.0F
LEAF_NODE	64:24	64:24	8	200.0F
LEAF_NODE	64:30	64:30	4	;
SELECTION	65:1	66:2	3	
KEYWORD	65:1	65:1	4	if
LEAF_NODE	65:1	65:1	5	if
LEAF_NODE	65:3	65:3	4	(
CONDITION	65:5	65:5	4	tmp < 0.2069F
EXPR	65:5	65:11	5	tmp < 0.2069F
FIELD	65:5	65:5	6	tmp
LEAF_NODE	65:5	65:5	7	tmp
REL_OPERATOR	65:9	65:9	6	<
LEAF_NODE	65:9	65:9	7	<
FIELD	65:11	65:11	6	0.2069F
LEAF_NODE	65:11	65:11	7	0.2069F
LEAF_NODE	65:19	65:19	4	)
STATEMENTS	66:2	66:2	4	
LEAF_NODE	66:2	66:2	5	*
LEAF_NODE	66:3	66:3	3	Z
LEAF_NODE	66:5	66:5	3	=
LEAF_NODE	66:7	66:7	3	cielab
LEAF_NODE	66:13	66:13	3	->
LEAF_NODE	66:15	66:15	3	Z0
EXPR_STATEMENT	66:18	66:45	3	* ( tmp - 0.13793F ) / 7.787F ;
EXPR	66:18	66:39	4	* ( tmp - 0.13793F ) / 7.787F
UNARY_EXPR	66:18	66:35	5	* ( tmp - 0.13793F )
UNARY_OPERATOR	66:18	66:18	6	*
LEAF_NODE	66:18	66:18	7	*
LEAF_NODE	66:20	66:20	6	(
FIELD	66:21	66:21	6	tmp
LEAF_NODE	66:21	66:21	7	tmp
LEAF_NODE	66:25	66:25	6	-
FIELD	66:27	66:27	6	0.13793F
LEAF_NODE	66:27	66:27	7	0.13793F
LEAF_NODE	66:35	66:35	6	)
LEAF_NODE	66:37	66:37	5	/
FIELD	66:39	66:39	5	7.787F
LEAF_NODE	66:39	66:39	6	7.787F
LEAF_NODE	66:45	66:45	4	;
SELECTION	67:1	68:2	3	
KEYWORD	67:1	67:1	4	else
LEAF_NODE	67:1	67:1	5	else
STATEMENTS	68:2	68:2	4	
LEAF_NODE	68:2	68:2	5	*
LEAF_NODE	68:3	68:3	3	Z
LEAF_NODE	68:5	68:5	3	=
LEAF_NODE	68:7	68:7	3	cielab
LEAF_NODE	68:13	68:13	3	->
LEAF_NODE	68:15	68:15	3	Z0
LEAF_NODE	68:18	68:18	3	*
LEAF_NODE	68:20	68:20	3	tmp
EXPR_STATEMENT	68:24	68:35	3	* tmp * tmp ;
EXPR	68:24	68:32	4	* tmp * tmp
UNARY_EXPR	68:24	68:26	5	* tmp
UNARY_OPERATOR	68:24	68:24	6	*
LEAF_NODE	68:24	68:24	7	*
FIELD	68:26	68:26	6	tmp
LEAF_NODE	68:26	68:26	7	tmp
LEAF_NODE	68:30	68:30	5	*
FIELD	68:32	68:32	5	tmp
LEAF_NODE	68:32	68:32	6	tmp
LEAF_NODE	68:35	68:35	4	;
LEAF_NODE	69:0	69:0	2	}
FUNCTION_DEF	75:0	115:0	1	
RETURN_TYPE	75:0	75:0	2	void
TYPE_NAME	75:0	75:0	3	void
LEAF_NODE	75:0	75:0	4	void
FUNCTION_NAME	76:0	76:0	2	TIFFXYZToRGB
LEAF_NODE	76:0	76:0	3	TIFFXYZToRGB
PARAMETER_LIST	76:12	77:37	2	( TIFFCIELabToRGB * cielab , float X , float Y , float Z , uint32 * r , uint32 * g , uint32 * b )
LEAF_NODE	76:12	76:12	3	(
PARAMETER_DECL	76:13	76:30	3	TIFFCIELabToRGB * cielab
TYPE	76:13	76:29	4	TIFFCIELabToRGB *
TYPE_NAME	76:13	76:13	5	TIFFCIELabToRGB
LEAF_NODE	76:13	76:13	6	TIFFCIELabToRGB
POINTER	76:29	76:29	5	*
LEAF_NODE	76:29	76:29	6	*
NAME	76:30	76:30	4	cielab
LEAF_NODE	76:30	76:30	5	cielab
LEAF_NODE	76:36	76:36	3	,
PARAMETER_DECL	76:38	76:44	3	float X
TYPE	76:38	76:38	4	float
TYPE_NAME	76:38	76:38	5	float
LEAF_NODE	76:38	76:38	6	float
NAME	76:44	76:44	4	X
LEAF_NODE	76:44	76:44	5	X
LEAF_NODE	76:45	76:45	3	,
PARAMETER_DECL	76:47	76:53	3	float Y
TYPE	76:47	76:47	4	float
TYPE_NAME	76:47	76:47	5	float
LEAF_NODE	76:47	76:47	6	float
NAME	76:53	76:53	4	Y
LEAF_NODE	76:53	76:53	5	Y
LEAF_NODE	76:54	76:54	3	,
PARAMETER_DECL	76:56	76:62	3	float Z
TYPE	76:56	76:56	4	float
TYPE_NAME	76:56	76:56	5	float
LEAF_NODE	76:56	76:56	6	float
NAME	76:62	76:62	4	Z
LEAF_NODE	76:62	76:62	5	Z
LEAF_NODE	76:63	76:63	3	,
PARAMETER_DECL	77:6	77:14	3	uint32 * r
TYPE	77:6	77:13	4	uint32 *
TYPE_NAME	77:6	77:6	5	uint32
LEAF_NODE	77:6	77:6	6	uint32
POINTER	77:13	77:13	5	*
LEAF_NODE	77:13	77:13	6	*
NAME	77:14	77:14	4	r
LEAF_NODE	77:14	77:14	5	r
LEAF_NODE	77:15	77:15	3	,
PARAMETER_DECL	77:17	77:25	3	uint32 * g
TYPE	77:17	77:24	4	uint32 *
TYPE_NAME	77:17	77:17	5	uint32
LEAF_NODE	77:17	77:17	6	uint32
POINTER	77:24	77:24	5	*
LEAF_NODE	77:24	77:24	6	*
NAME	77:25	77:25	4	g
LEAF_NODE	77:25	77:25	5	g
LEAF_NODE	77:26	77:26	3	,
PARAMETER_DECL	77:28	77:36	3	uint32 * b
TYPE	77:28	77:35	4	uint32 *
TYPE_NAME	77:28	77:28	5	uint32
LEAF_NODE	77:28	77:28	6	uint32
POINTER	77:35	77:35	5	*
LEAF_NODE	77:35	77:35	6	*
NAME	77:36	77:36	4	b
LEAF_NODE	77:36	77:36	5	b
LEAF_NODE	77:37	77:37	3	)
LEAF_NODE	78:0	78:0	2	{
STATEMENTS	79:1	114:1	2	
SIMPLE_DECL	79:1	79:6	3	int i ;
VAR_DECL	79:1	79:5	4	int i
TYPE	79:1	79:1	5	int
TYPE_NAME	79:1	79:1	6	int
LEAF_NODE	79:1	79:1	7	int
NAME	79:5	79:5	5	i
LEAF_NODE	79:5	79:5	6	i
LEAF_NODE	79:6	79:6	4	;
SIMPLE_DECL	80:1	80:17	3	float Yr , float Yg , float Yb ;
INIT_DECL_LIST	80:1	80:1	4	float Yr , float Yg , float Yb
VAR_DECL	80:1	80:7	5	float Yr
TYPE	80:1	80:1	6	float
TYPE_NAME	80:1	80:1	7	float
LEAF_NODE	80:1	80:1	8	float
NAME	80:7	80:7	6	Yr
LEAF_NODE	80:7	80:7	7	Yr
LEAF_NODE	80:9	80:9	5	,
INIT_DECL_LIST	80:1	80:1	5	float Yg , float Yb
VAR_DECL	80:1	80:11	6	float Yg
TYPE	80:1	80:1	7	float
TYPE_NAME	80:1	80:1	8	float
LEAF_NODE	80:1	80:1	9	float
NAME	80:11	80:11	7	Yg
LEAF_NODE	80:11	80:11	8	Yg
LEAF_NODE	80:13	80:13	6	,
VAR_DECL	80:1	80:15	6	float Yb
TYPE	80:1	80:1	7	float
TYPE_NAME	80:1	80:1	8	float
LEAF_NODE	80:1	80:1	9	float
NAME	80:15	80:15	7	Yb
LEAF_NODE	80:15	80:15	8	Yb
LEAF_NODE	80:17	80:17	4	;
SIMPLE_DECL	81:1	81:45	3	float * matrix ; matrix = & cielab -> display . d_mat [ 0 ] [ 0 ] ;
VAR_DECL	81:1	81:8	4	float * matrix ; matrix = & cielab -> display . d_mat [ 0 ] [ 0 ]
TYPE	81:1	81:7	5	float *
TYPE_NAME	81:1	81:1	6	float
LEAF_NODE	81:1	81:1	7	float
POINTER	81:7	81:7	6	*
LEAF_NODE	81:7	81:7	7	*
NAME	81:8	81:8	5	matrix
LEAF_NODE	81:8	81:8	6	matrix
LEAF_NODE	0:0	0:0	5	;
INIT	81:8	81:8	5	matrix = & cielab -> display . d_mat [ 0 ] [ 0 ]
ASSIGN	81:8	81:17	6	matrix = & cielab -> display . d_mat [ 0 ] [ 0 ]
LVAL	81:8	81:8	7	matrix
NAME	81:8	81:8	8	matrix
LEAF_NODE	81:8	81:8	9	matrix
ASSIGN_OP	81:15	81:15	7	=
LEAF_NODE	81:15	81:15	8	=
RVAL	81:17	81:17	7	& cielab -> display . d_mat [ 0 ] [ 0 ]
UNARY_EXPR	81:17	81:18	8	& cielab -> display . d_mat [ 0 ] [ 0 ]
UNARY_OPERATOR	81:17	81:17	9	&
LEAF_NODE	81:17	81:17	10	&
FIELD	81:18	81:44	9	cielab -> display . d_mat [ 0 ] [ 0 ]
LEAF_NODE	81:18	81:18	10	cielab
LEAF_NODE	81:24	81:24	10	->
LEAF_NODE	81:26	81:26	10	display
LEAF_NODE	81:33	81:33	10	.
LEAF_NODE	81:34	81:34	10	d_mat
LEAF_NODE	81:39	81:39	10	[
EXPR	81:40	81:40	10	0
FIELD	81:40	81:40	11	0
LEAF_NODE	81:40	81:40	12	0
LEAF_NODE	81:41	81:41	10	]
LEAF_NODE	81:42	81:42	10	[
EXPR	81:43	81:43	10	0
FIELD	81:43	81:43	11	0
LEAF_NODE	81:43	81:43	12	0
LEAF_NODE	81:44	81:44	10	]
LEAF_NODE	81:45	81:45	4	;
EXPR_STATEMENT	84:1	84:52	3	Yr = matrix [ 0 ] * X + matrix [ 1 ] * Y + matrix [ 2 ] * Z ;
EXPR	84:1	84:1	4	Yr = matrix [ 0 ] * X + matrix [ 1 ] * Y + matrix [ 2 ] * Z
ASSIGN	84:1	84:7	5	Yr = matrix [ 0 ] * X + matrix [ 1 ] * Y + matrix [ 2 ] * Z
LVAL	84:1	84:1	6	Yr
FIELD	84:1	84:1	7	Yr
LEAF_NODE	84:1	84:1	8	Yr
ASSIGN_OP	84:4	84:4	6	=
LEAF_NODE	84:4	84:4	7	=
RVAL	84:7	84:51	6	matrix [ 0 ] * X + matrix [ 1 ] * Y + matrix [ 2 ] * Z
FIELD	84:7	84:15	7	matrix [ 0 ]
LEAF_NODE	84:7	84:7	8	matrix
LEAF_NODE	84:13	84:13	8	[
EXPR	84:14	84:14	8	0
FIELD	84:14	84:14	9	0
LEAF_NODE	84:14	84:14	10	0
LEAF_NODE	84:15	84:15	8	]
LEAF_NODE	84:17	84:17	7	*
FIELD	84:19	84:19	7	X
LEAF_NODE	84:19	84:19	8	X
LEAF_NODE	84:21	84:21	7	+
FIELD	84:23	84:31	7	matrix [ 1 ]
LEAF_NODE	84:23	84:23	8	matrix
LEAF_NODE	84:29	84:29	8	[
EXPR	84:30	84:30	8	1
FIELD	84:30	84:30	9	1
LEAF_NODE	84:30	84:30	10	1
LEAF_NODE	84:31	84:31	8	]
LEAF_NODE	84:33	84:33	7	*
FIELD	84:35	84:35	7	Y
LEAF_NODE	84:35	84:35	8	Y
LEAF_NODE	84:37	84:37	7	+
FIELD	84:39	84:47	7	matrix [ 2 ]
LEAF_NODE	84:39	84:39	8	matrix
LEAF_NODE	84:45	84:45	8	[
EXPR	84:46	84:46	8	2
FIELD	84:46	84:46	9	2
LEAF_NODE	84:46	84:46	10	2
LEAF_NODE	84:47	84:47	8	]
LEAF_NODE	84:49	84:49	7	*
FIELD	84:51	84:51	7	Z
LEAF_NODE	84:51	84:51	8	Z
LEAF_NODE	84:52	84:52	4	;
EXPR_STATEMENT	85:1	85:52	3	Yg = matrix [ 3 ] * X + matrix [ 4 ] * Y + matrix [ 5 ] * Z ;
EXPR	85:1	85:1	4	Yg = matrix [ 3 ] * X + matrix [ 4 ] * Y + matrix [ 5 ] * Z
ASSIGN	85:1	85:7	5	Yg = matrix [ 3 ] * X + matrix [ 4 ] * Y + matrix [ 5 ] * Z
LVAL	85:1	85:1	6	Yg
FIELD	85:1	85:1	7	Yg
LEAF_NODE	85:1	85:1	8	Yg
ASSIGN_OP	85:4	85:4	6	=
LEAF_NODE	85:4	85:4	7	=
RVAL	85:7	85:51	6	matrix [ 3 ] * X + matrix [ 4 ] * Y + matrix [ 5 ] * Z
FIELD	85:7	85:15	7	matrix [ 3 ]
LEAF_NODE	85:7	85:7	8	matrix
LEAF_NODE	85:13	85:13	8	[
EXPR	85:14	85:14	8	3
FIELD	85:14	85:14	9	3
LEAF_NODE	85:14	85:14	10	3
LEAF_NODE	85:15	85:15	8	]
LEAF_NODE	85:17	85:17	7	*
FIELD	85:19	85:19	7	X
LEAF_NODE	85:19	85:19	8	X
LEAF_NODE	85:21	85:21	7	+
FIELD	85:23	85:31	7	matrix [ 4 ]
LEAF_NODE	85:23	85:23	8	matrix
LEAF_NODE	85:29	85:29	8	[
EXPR	85:30	85:30	8	4
FIELD	85:30	85:30	9	4
LEAF_NODE	85:30	85:30	10	4
LEAF_NODE	85:31	85:31	8	]
LEAF_NODE	85:33	85:33	7	*
FIELD	85:35	85:35	7	Y
LEAF_NODE	85:35	85:35	8	Y
LEAF_NODE	85:37	85:37	7	+
FIELD	85:39	85:47	7	matrix [ 5 ]
LEAF_NODE	85:39	85:39	8	matrix
LEAF_NODE	85:45	85:45	8	[
EXPR	85:46	85:46	8	5
FIELD	85:46	85:46	9	5
LEAF_NODE	85:46	85:46	10	5
LEAF_NODE	85:47	85:47	8	]
LEAF_NODE	85:49	85:49	7	*
FIELD	85:51	85:51	7	Z
LEAF_NODE	85:51	85:51	8	Z
LEAF_NODE	85:52	85:52	4	;
EXPR_STATEMENT	86:1	86:52	3	Yb = matrix [ 6 ] * X + matrix [ 7 ] * Y + matrix [ 8 ] * Z ;
EXPR	86:1	86:1	4	Yb = matrix [ 6 ] * X + matrix [ 7 ] * Y + matrix [ 8 ] * Z
ASSIGN	86:1	86:7	5	Yb = matrix [ 6 ] * X + matrix [ 7 ] * Y + matrix [ 8 ] * Z
LVAL	86:1	86:1	6	Yb
FIELD	86:1	86:1	7	Yb
LEAF_NODE	86:1	86:1	8	Yb
ASSIGN_OP	86:4	86:4	6	=
LEAF_NODE	86:4	86:4	7	=
RVAL	86:7	86:51	6	matrix [ 6 ] * X + matrix [ 7 ] * Y + matrix [ 8 ] * Z
FIELD	86:7	86:15	7	matrix [ 6 ]
LEAF_NODE	86:7	86:7	8	matrix
LEAF_NODE	86:13	86:13	8	[
EXPR	86:14	86:14	8	6
FIELD	86:14	86:14	9	6
LEAF_NODE	86:14	86:14	10	6
LEAF_NODE	86:15	86:15	8	]
LEAF_NODE	86:17	86:17	7	*
FIELD	86:19	86:19	7	X
LEAF_NODE	86:19	86:19	8	X
LEAF_NODE	86:21	86:21	7	+
FIELD	86:23	86:31	7	matrix [ 7 ]
LEAF_NODE	86:23	86:23	8	matrix
LEAF_NODE	86:29	86:29	8	[
EXPR	86:30	86:30	8	7
FIELD	86:30	86:30	9	7
LEAF_NODE	86:30	86:30	10	7
LEAF_NODE	86:31	86:31	8	]
LEAF_NODE	86:33	86:33	7	*
FIELD	86:35	86:35	7	Y
LEAF_NODE	86:35	86:35	8	Y
LEAF_NODE	86:37	86:37	7	+
FIELD	86:39	86:47	7	matrix [ 8 ]
LEAF_NODE	86:39	86:39	8	matrix
LEAF_NODE	86:45	86:45	8	[
EXPR	86:46	86:46	8	8
FIELD	86:46	86:46	9	8
LEAF_NODE	86:46	86:46	10	8
LEAF_NODE	86:47	86:47	8	]
LEAF_NODE	86:49	86:49	7	*
FIELD	86:51	86:51	7	Z
LEAF_NODE	86:51	86:51	8	Z
LEAF_NODE	86:52	86:52	4	;
EXPR_STATEMENT	89:1	89:40	3	Yr = TIFFmax ( Yr , cielab -> display . d_Y0R ) ;
EXPR	89:1	89:1	4	Yr = TIFFmax ( Yr , cielab -> display . d_Y0R )
ASSIGN	89:1	89:6	5	Yr = TIFFmax ( Yr , cielab -> display . d_Y0R )
LVAL	89:1	89:1	6	Yr
FIELD	89:1	89:1	7	Yr
LEAF_NODE	89:1	89:1	8	Yr
ASSIGN_OP	89:4	89:4	6	=
LEAF_NODE	89:4	89:4	7	=
RVAL	89:6	89:6	6	TIFFmax ( Yr , cielab -> display . d_Y0R )
FUNCTION_CALL	89:6	89:39	7	TIFFmax ( Yr , cielab -> display . d_Y0R )
CALLEE	89:6	89:6	8	TIFFmax
LEAF_NODE	89:6	89:6	9	TIFFmax
LEAF_NODE	89:13	89:13	8	(
ARGUMENT	89:14	89:14	8	Yr
FIELD	89:14	89:14	9	Yr
LEAF_NODE	89:14	89:14	10	Yr
LEAF_NODE	89:16	89:16	8	,
ARGUMENT	89:18	89:18	8	cielab -> display . d_Y0R
FIELD	89:18	89:34	9	cielab -> display . d_Y0R
LEAF_NODE	89:18	89:18	10	cielab
LEAF_NODE	89:24	89:24	10	->
LEAF_NODE	89:26	89:26	10	display
LEAF_NODE	89:33	89:33	10	.
LEAF_NODE	89:34	89:34	10	d_Y0R
LEAF_NODE	89:39	89:39	8	)
LEAF_NODE	89:40	89:40	4	;
EXPR_STATEMENT	90:1	90:40	3	Yg = TIFFmax ( Yg , cielab -> display . d_Y0G ) ;
EXPR	90:1	90:1	4	Yg = TIFFmax ( Yg , cielab -> display . d_Y0G )
ASSIGN	90:1	90:6	5	Yg = TIFFmax ( Yg , cielab -> display . d_Y0G )
LVAL	90:1	90:1	6	Yg
FIELD	90:1	90:1	7	Yg
LEAF_NODE	90:1	90:1	8	Yg
ASSIGN_OP	90:4	90:4	6	=
LEAF_NODE	90:4	90:4	7	=
RVAL	90:6	90:6	6	TIFFmax ( Yg , cielab -> display . d_Y0G )
FUNCTION_CALL	90:6	90:39	7	TIFFmax ( Yg , cielab -> display . d_Y0G )
CALLEE	90:6	90:6	8	TIFFmax
LEAF_NODE	90:6	90:6	9	TIFFmax
LEAF_NODE	90:13	90:13	8	(
ARGUMENT	90:14	90:14	8	Yg
FIELD	90:14	90:14	9	Yg
LEAF_NODE	90:14	90:14	10	Yg
LEAF_NODE	90:16	90:16	8	,
ARGUMENT	90:18	90:18	8	cielab -> display . d_Y0G
FIELD	90:18	90:34	9	cielab -> display . d_Y0G
LEAF_NODE	90:18	90:18	10	cielab
LEAF_NODE	90:24	90:24	10	->
LEAF_NODE	90:26	90:26	10	display
LEAF_NODE	90:33	90:33	10	.
LEAF_NODE	90:34	90:34	10	d_Y0G
LEAF_NODE	90:39	90:39	8	)
LEAF_NODE	90:40	90:40	4	;
EXPR_STATEMENT	91:1	91:40	3	Yb = TIFFmax ( Yb , cielab -> display . d_Y0B ) ;
EXPR	91:1	91:1	4	Yb = TIFFmax ( Yb , cielab -> display . d_Y0B )
ASSIGN	91:1	91:6	5	Yb = TIFFmax ( Yb , cielab -> display . d_Y0B )
LVAL	91:1	91:1	6	Yb
FIELD	91:1	91:1	7	Yb
LEAF_NODE	91:1	91:1	8	Yb
ASSIGN_OP	91:4	91:4	6	=
LEAF_NODE	91:4	91:4	7	=
RVAL	91:6	91:6	6	TIFFmax ( Yb , cielab -> display . d_Y0B )
FUNCTION_CALL	91:6	91:39	7	TIFFmax ( Yb , cielab -> display . d_Y0B )
CALLEE	91:6	91:6	8	TIFFmax
LEAF_NODE	91:6	91:6	9	TIFFmax
LEAF_NODE	91:13	91:13	8	(
ARGUMENT	91:14	91:14	8	Yb
FIELD	91:14	91:14	9	Yb
LEAF_NODE	91:14	91:14	10	Yb
LEAF_NODE	91:16	91:16	8	,
ARGUMENT	91:18	91:18	8	cielab -> display . d_Y0B
FIELD	91:18	91:34	9	cielab -> display . d_Y0B
LEAF_NODE	91:18	91:18	10	cielab
LEAF_NODE	91:24	91:24	10	->
LEAF_NODE	91:26	91:26	10	display
LEAF_NODE	91:33	91:33	10	.
LEAF_NODE	91:34	91:34	10	d_Y0B
LEAF_NODE	91:39	91:39	8	)
LEAF_NODE	91:40	91:40	4	;
EXPR_STATEMENT	94:1	94:40	3	Yr = TIFFmin ( Yr , cielab -> display . d_YCR ) ;
EXPR	94:1	94:1	4	Yr = TIFFmin ( Yr , cielab -> display . d_YCR )
ASSIGN	94:1	94:6	5	Yr = TIFFmin ( Yr , cielab -> display . d_YCR )
LVAL	94:1	94:1	6	Yr
FIELD	94:1	94:1	7	Yr
LEAF_NODE	94:1	94:1	8	Yr
ASSIGN_OP	94:4	94:4	6	=
LEAF_NODE	94:4	94:4	7	=
RVAL	94:6	94:6	6	TIFFmin ( Yr , cielab -> display . d_YCR )
FUNCTION_CALL	94:6	94:39	7	TIFFmin ( Yr , cielab -> display . d_YCR )
CALLEE	94:6	94:6	8	TIFFmin
LEAF_NODE	94:6	94:6	9	TIFFmin
LEAF_NODE	94:13	94:13	8	(
ARGUMENT	94:14	94:14	8	Yr
FIELD	94:14	94:14	9	Yr
LEAF_NODE	94:14	94:14	10	Yr
LEAF_NODE	94:16	94:16	8	,
ARGUMENT	94:18	94:18	8	cielab -> display . d_YCR
FIELD	94:18	94:34	9	cielab -> display . d_YCR
LEAF_NODE	94:18	94:18	10	cielab
LEAF_NODE	94:24	94:24	10	->
LEAF_NODE	94:26	94:26	10	display
LEAF_NODE	94:33	94:33	10	.
LEAF_NODE	94:34	94:34	10	d_YCR
LEAF_NODE	94:39	94:39	8	)
LEAF_NODE	94:40	94:40	4	;
EXPR_STATEMENT	95:1	95:40	3	Yg = TIFFmin ( Yg , cielab -> display . d_YCG ) ;
EXPR	95:1	95:1	4	Yg = TIFFmin ( Yg , cielab -> display . d_YCG )
ASSIGN	95:1	95:6	5	Yg = TIFFmin ( Yg , cielab -> display . d_YCG )
LVAL	95:1	95:1	6	Yg
FIELD	95:1	95:1	7	Yg
LEAF_NODE	95:1	95:1	8	Yg
ASSIGN_OP	95:4	95:4	6	=
LEAF_NODE	95:4	95:4	7	=
RVAL	95:6	95:6	6	TIFFmin ( Yg , cielab -> display . d_YCG )
FUNCTION_CALL	95:6	95:39	7	TIFFmin ( Yg , cielab -> display . d_YCG )
CALLEE	95:6	95:6	8	TIFFmin
LEAF_NODE	95:6	95:6	9	TIFFmin
LEAF_NODE	95:13	95:13	8	(
ARGUMENT	95:14	95:14	8	Yg
FIELD	95:14	95:14	9	Yg
LEAF_NODE	95:14	95:14	10	Yg
LEAF_NODE	95:16	95:16	8	,
ARGUMENT	95:18	95:18	8	cielab -> display . d_YCG
FIELD	95:18	95:34	9	cielab -> display . d_YCG
LEAF_NODE	95:18	95:18	10	cielab
LEAF_NODE	95:24	95:24	10	->
LEAF_NODE	95:26	95:26	10	display
LEAF_NODE	95:33	95:33	10	.
LEAF_NODE	95:34	95:34	10	d_YCG
LEAF_NODE	95:39	95:39	8	)
LEAF_NODE	95:40	95:40	4	;
EXPR_STATEMENT	96:1	96:40	3	Yb = TIFFmin ( Yb , cielab -> display . d_YCB ) ;
EXPR	96:1	96:1	4	Yb = TIFFmin ( Yb , cielab -> display . d_YCB )
ASSIGN	96:1	96:6	5	Yb = TIFFmin ( Yb , cielab -> display . d_YCB )
LVAL	96:1	96:1	6	Yb
FIELD	96:1	96:1	7	Yb
LEAF_NODE	96:1	96:1	8	Yb
ASSIGN_OP	96:4	96:4	6	=
LEAF_NODE	96:4	96:4	7	=
RVAL	96:6	96:6	6	TIFFmin ( Yb , cielab -> display . d_YCB )
FUNCTION_CALL	96:6	96:39	7	TIFFmin ( Yb , cielab -> display . d_YCB )
CALLEE	96:6	96:6	8	TIFFmin
LEAF_NODE	96:6	96:6	9	TIFFmin
LEAF_NODE	96:13	96:13	8	(
ARGUMENT	96:14	96:14	8	Yb
FIELD	96:14	96:14	9	Yb
LEAF_NODE	96:14	96:14	10	Yb
LEAF_NODE	96:16	96:16	8	,
ARGUMENT	96:18	96:18	8	cielab -> display . d_YCB
FIELD	96:18	96:34	9	cielab -> display . d_YCB
LEAF_NODE	96:18	96:18	10	cielab
LEAF_NODE	96:24	96:24	10	->
LEAF_NODE	96:26	96:26	10	display
LEAF_NODE	96:33	96:33	10	.
LEAF_NODE	96:34	96:34	10	d_YCB
LEAF_NODE	96:39	96:39	8	)
LEAF_NODE	96:40	96:40	4	;
EXPR_STATEMENT	99:1	99:56	3	i = ( int ) ( ( Yr - cielab -> display . d_Y0R ) / cielab -> rstep ) ;
EXPR	99:1	99:1	4	i = ( int ) ( ( Yr - cielab -> display . d_Y0R ) / cielab -> rstep )
ASSIGN	99:1	99:5	5	i = ( int ) ( ( Yr - cielab -> display . d_Y0R ) / cielab -> rstep )
LVAL	99:1	99:1	6	i
FIELD	99:1	99:1	7	i
LEAF_NODE	99:1	99:1	8	i
ASSIGN_OP	99:3	99:3	6	=
LEAF_NODE	99:3	99:3	7	=
RVAL	99:5	99:55	6	( int ) ( ( Yr - cielab -> display . d_Y0R ) / cielab -> rstep )
LEAF_NODE	99:5	99:5	7	(
TYPE_NAME	99:6	99:6	7	int
LEAF_NODE	99:6	99:6	8	int
LEAF_NODE	99:9	99:9	7	)
LEAF_NODE	99:10	99:10	7	(
LEAF_NODE	99:11	99:11	7	(
FIELD	99:12	99:12	7	Yr
LEAF_NODE	99:12	99:12	8	Yr
LEAF_NODE	99:15	99:15	7	-
FIELD	99:17	99:33	7	cielab -> display . d_Y0R
LEAF_NODE	99:17	99:17	8	cielab
LEAF_NODE	99:23	99:23	8	->
LEAF_NODE	99:25	99:25	8	display
LEAF_NODE	99:32	99:32	8	.
LEAF_NODE	99:33	99:33	8	d_Y0R
LEAF_NODE	99:38	99:38	7	)
LEAF_NODE	99:40	99:40	7	/
FIELD	99:42	99:50	7	cielab -> rstep
LEAF_NODE	99:42	99:42	8	cielab
LEAF_NODE	99:48	99:48	8	->
LEAF_NODE	99:50	99:50	8	rstep
LEAF_NODE	99:55	99:55	7	)
LEAF_NODE	99:56	99:56	4	;
EXPR_STATEMENT	100:1	100:30	3	i = TIFFmin ( cielab -> range , i ) ;
EXPR	100:1	100:1	4	i = TIFFmin ( cielab -> range , i )
ASSIGN	100:1	100:5	5	i = TIFFmin ( cielab -> range , i )
LVAL	100:1	100:1	6	i
FIELD	100:1	100:1	7	i
LEAF_NODE	100:1	100:1	8	i
ASSIGN_OP	100:3	100:3	6	=
LEAF_NODE	100:3	100:3	7	=
RVAL	100:5	100:5	6	TIFFmin ( cielab -> range , i )
FUNCTION_CALL	100:5	100:29	7	TIFFmin ( cielab -> range , i )
CALLEE	100:5	100:5	8	TIFFmin
LEAF_NODE	100:5	100:5	9	TIFFmin
LEAF_NODE	100:12	100:12	8	(
ARGUMENT	100:13	100:13	8	cielab -> range
FIELD	100:13	100:21	9	cielab -> range
LEAF_NODE	100:13	100:13	10	cielab
LEAF_NODE	100:19	100:19	10	->
LEAF_NODE	100:21	100:21	10	range
LEAF_NODE	100:26	100:26	8	,
ARGUMENT	100:28	100:28	8	i
FIELD	100:28	100:28	9	i
LEAF_NODE	100:28	100:28	10	i
LEAF_NODE	100:29	100:29	8	)
LEAF_NODE	100:30	100:30	4	;
EXPR_STATEMENT	101:1	101:27	3	* r = RINT ( cielab -> Yr2r [ i ] ) ;
EXPR	101:1	101:1	4	* r = RINT ( cielab -> Yr2r [ i ] )
ASSIGN	101:1	101:6	5	* r = RINT ( cielab -> Yr2r [ i ] )
LVAL	101:1	101:1	6	* r
UNARY_EXPR	101:1	101:2	7	* r
UNARY_OPERATOR	101:1	101:1	8	*
LEAF_NODE	101:1	101:1	9	*
FIELD	101:2	101:2	8	r
LEAF_NODE	101:2	101:2	9	r
ASSIGN_OP	101:4	101:4	6	=
LEAF_NODE	101:4	101:4	7	=
RVAL	101:6	101:6	6	RINT ( cielab -> Yr2r [ i ] )
FUNCTION_CALL	101:6	101:26	7	RINT ( cielab -> Yr2r [ i ] )
CALLEE	101:6	101:6	8	RINT
LEAF_NODE	101:6	101:6	9	RINT
LEAF_NODE	101:10	101:10	8	(
ARGUMENT	101:11	101:11	8	cielab -> Yr2r [ i ]
FIELD	101:11	101:25	9	cielab -> Yr2r [ i ]
LEAF_NODE	101:11	101:11	10	cielab
LEAF_NODE	101:17	101:17	10	->
LEAF_NODE	101:19	101:19	10	Yr2r
LEAF_NODE	101:23	101:23	10	[
EXPR	101:24	101:24	10	i
FIELD	101:24	101:24	11	i
LEAF_NODE	101:24	101:24	12	i
LEAF_NODE	101:25	101:25	10	]
LEAF_NODE	101:26	101:26	8	)
LEAF_NODE	101:27	101:27	4	;
EXPR_STATEMENT	103:1	103:56	3	i = ( int ) ( ( Yg - cielab -> display . d_Y0G ) / cielab -> gstep ) ;
EXPR	103:1	103:1	4	i = ( int ) ( ( Yg - cielab -> display . d_Y0G ) / cielab -> gstep )
ASSIGN	103:1	103:5	5	i = ( int ) ( ( Yg - cielab -> display . d_Y0G ) / cielab -> gstep )
LVAL	103:1	103:1	6	i
FIELD	103:1	103:1	7	i
LEAF_NODE	103:1	103:1	8	i
ASSIGN_OP	103:3	103:3	6	=
LEAF_NODE	103:3	103:3	7	=
RVAL	103:5	103:55	6	( int ) ( ( Yg - cielab -> display . d_Y0G ) / cielab -> gstep )
LEAF_NODE	103:5	103:5	7	(
TYPE_NAME	103:6	103:6	7	int
LEAF_NODE	103:6	103:6	8	int
LEAF_NODE	103:9	103:9	7	)
LEAF_NODE	103:10	103:10	7	(
LEAF_NODE	103:11	103:11	7	(
FIELD	103:12	103:12	7	Yg
LEAF_NODE	103:12	103:12	8	Yg
LEAF_NODE	103:15	103:15	7	-
FIELD	103:17	103:33	7	cielab -> display . d_Y0G
LEAF_NODE	103:17	103:17	8	cielab
LEAF_NODE	103:23	103:23	8	->
LEAF_NODE	103:25	103:25	8	display
LEAF_NODE	103:32	103:32	8	.
LEAF_NODE	103:33	103:33	8	d_Y0G
LEAF_NODE	103:38	103:38	7	)
LEAF_NODE	103:40	103:40	7	/
FIELD	103:42	103:50	7	cielab -> gstep
LEAF_NODE	103:42	103:42	8	cielab
LEAF_NODE	103:48	103:48	8	->
LEAF_NODE	103:50	103:50	8	gstep
LEAF_NODE	103:55	103:55	7	)
LEAF_NODE	103:56	103:56	4	;
EXPR_STATEMENT	104:1	104:30	3	i = TIFFmin ( cielab -> range , i ) ;
EXPR	104:1	104:1	4	i = TIFFmin ( cielab -> range , i )
ASSIGN	104:1	104:5	5	i = TIFFmin ( cielab -> range , i )
LVAL	104:1	104:1	6	i
FIELD	104:1	104:1	7	i
LEAF_NODE	104:1	104:1	8	i
ASSIGN_OP	104:3	104:3	6	=
LEAF_NODE	104:3	104:3	7	=
RVAL	104:5	104:5	6	TIFFmin ( cielab -> range , i )
FUNCTION_CALL	104:5	104:29	7	TIFFmin ( cielab -> range , i )
CALLEE	104:5	104:5	8	TIFFmin
LEAF_NODE	104:5	104:5	9	TIFFmin
LEAF_NODE	104:12	104:12	8	(
ARGUMENT	104:13	104:13	8	cielab -> range
FIELD	104:13	104:21	9	cielab -> range
LEAF_NODE	104:13	104:13	10	cielab
LEAF_NODE	104:19	104:19	10	->
LEAF_NODE	104:21	104:21	10	range
LEAF_NODE	104:26	104:26	8	,
ARGUMENT	104:28	104:28	8	i
FIELD	104:28	104:28	9	i
LEAF_NODE	104:28	104:28	10	i
LEAF_NODE	104:29	104:29	8	)
LEAF_NODE	104:30	104:30	4	;
EXPR_STATEMENT	105:1	105:27	3	* g = RINT ( cielab -> Yg2g [ i ] ) ;
EXPR	105:1	105:1	4	* g = RINT ( cielab -> Yg2g [ i ] )
ASSIGN	105:1	105:6	5	* g = RINT ( cielab -> Yg2g [ i ] )
LVAL	105:1	105:1	6	* g
UNARY_EXPR	105:1	105:2	7	* g
UNARY_OPERATOR	105:1	105:1	8	*
LEAF_NODE	105:1	105:1	9	*
FIELD	105:2	105:2	8	g
LEAF_NODE	105:2	105:2	9	g
ASSIGN_OP	105:4	105:4	6	=
LEAF_NODE	105:4	105:4	7	=
RVAL	105:6	105:6	6	RINT ( cielab -> Yg2g [ i ] )
FUNCTION_CALL	105:6	105:26	7	RINT ( cielab -> Yg2g [ i ] )
CALLEE	105:6	105:6	8	RINT
LEAF_NODE	105:6	105:6	9	RINT
LEAF_NODE	105:10	105:10	8	(
ARGUMENT	105:11	105:11	8	cielab -> Yg2g [ i ]
FIELD	105:11	105:25	9	cielab -> Yg2g [ i ]
LEAF_NODE	105:11	105:11	10	cielab
LEAF_NODE	105:17	105:17	10	->
LEAF_NODE	105:19	105:19	10	Yg2g
LEAF_NODE	105:23	105:23	10	[
EXPR	105:24	105:24	10	i
FIELD	105:24	105:24	11	i
LEAF_NODE	105:24	105:24	12	i
LEAF_NODE	105:25	105:25	10	]
LEAF_NODE	105:26	105:26	8	)
LEAF_NODE	105:27	105:27	4	;
EXPR_STATEMENT	107:1	107:56	3	i = ( int ) ( ( Yb - cielab -> display . d_Y0B ) / cielab -> bstep ) ;
EXPR	107:1	107:1	4	i = ( int ) ( ( Yb - cielab -> display . d_Y0B ) / cielab -> bstep )
ASSIGN	107:1	107:5	5	i = ( int ) ( ( Yb - cielab -> display . d_Y0B ) / cielab -> bstep )
LVAL	107:1	107:1	6	i
FIELD	107:1	107:1	7	i
LEAF_NODE	107:1	107:1	8	i
ASSIGN_OP	107:3	107:3	6	=
LEAF_NODE	107:3	107:3	7	=
RVAL	107:5	107:55	6	( int ) ( ( Yb - cielab -> display . d_Y0B ) / cielab -> bstep )
LEAF_NODE	107:5	107:5	7	(
TYPE_NAME	107:6	107:6	7	int
LEAF_NODE	107:6	107:6	8	int
LEAF_NODE	107:9	107:9	7	)
LEAF_NODE	107:10	107:10	7	(
LEAF_NODE	107:11	107:11	7	(
FIELD	107:12	107:12	7	Yb
LEAF_NODE	107:12	107:12	8	Yb
LEAF_NODE	107:15	107:15	7	-
FIELD	107:17	107:33	7	cielab -> display . d_Y0B
LEAF_NODE	107:17	107:17	8	cielab
LEAF_NODE	107:23	107:23	8	->
LEAF_NODE	107:25	107:25	8	display
LEAF_NODE	107:32	107:32	8	.
LEAF_NODE	107:33	107:33	8	d_Y0B
LEAF_NODE	107:38	107:38	7	)
LEAF_NODE	107:40	107:40	7	/
FIELD	107:42	107:50	7	cielab -> bstep
LEAF_NODE	107:42	107:42	8	cielab
LEAF_NODE	107:48	107:48	8	->
LEAF_NODE	107:50	107:50	8	bstep
LEAF_NODE	107:55	107:55	7	)
LEAF_NODE	107:56	107:56	4	;
EXPR_STATEMENT	108:1	108:30	3	i = TIFFmin ( cielab -> range , i ) ;
EXPR	108:1	108:1	4	i = TIFFmin ( cielab -> range , i )
ASSIGN	108:1	108:5	5	i = TIFFmin ( cielab -> range , i )
LVAL	108:1	108:1	6	i
FIELD	108:1	108:1	7	i
LEAF_NODE	108:1	108:1	8	i
ASSIGN_OP	108:3	108:3	6	=
LEAF_NODE	108:3	108:3	7	=
RVAL	108:5	108:5	6	TIFFmin ( cielab -> range , i )
FUNCTION_CALL	108:5	108:29	7	TIFFmin ( cielab -> range , i )
CALLEE	108:5	108:5	8	TIFFmin
LEAF_NODE	108:5	108:5	9	TIFFmin
LEAF_NODE	108:12	108:12	8	(
ARGUMENT	108:13	108:13	8	cielab -> range
FIELD	108:13	108:21	9	cielab -> range
LEAF_NODE	108:13	108:13	10	cielab
LEAF_NODE	108:19	108:19	10	->
LEAF_NODE	108:21	108:21	10	range
LEAF_NODE	108:26	108:26	8	,
ARGUMENT	108:28	108:28	8	i
FIELD	108:28	108:28	9	i
LEAF_NODE	108:28	108:28	10	i
LEAF_NODE	108:29	108:29	8	)
LEAF_NODE	108:30	108:30	4	;
EXPR_STATEMENT	109:1	109:27	3	* b = RINT ( cielab -> Yb2b [ i ] ) ;
EXPR	109:1	109:1	4	* b = RINT ( cielab -> Yb2b [ i ] )
ASSIGN	109:1	109:6	5	* b = RINT ( cielab -> Yb2b [ i ] )
LVAL	109:1	109:1	6	* b
UNARY_EXPR	109:1	109:2	7	* b
UNARY_OPERATOR	109:1	109:1	8	*
LEAF_NODE	109:1	109:1	9	*
FIELD	109:2	109:2	8	b
LEAF_NODE	109:2	109:2	9	b
ASSIGN_OP	109:4	109:4	6	=
LEAF_NODE	109:4	109:4	7	=
RVAL	109:6	109:6	6	RINT ( cielab -> Yb2b [ i ] )
FUNCTION_CALL	109:6	109:26	7	RINT ( cielab -> Yb2b [ i ] )
CALLEE	109:6	109:6	8	RINT
LEAF_NODE	109:6	109:6	9	RINT
LEAF_NODE	109:10	109:10	8	(
ARGUMENT	109:11	109:11	8	cielab -> Yb2b [ i ]
FIELD	109:11	109:25	9	cielab -> Yb2b [ i ]
LEAF_NODE	109:11	109:11	10	cielab
LEAF_NODE	109:17	109:17	10	->
LEAF_NODE	109:19	109:19	10	Yb2b
LEAF_NODE	109:23	109:23	10	[
EXPR	109:24	109:24	10	i
FIELD	109:24	109:24	11	i
LEAF_NODE	109:24	109:24	12	i
LEAF_NODE	109:25	109:25	10	]
LEAF_NODE	109:26	109:26	8	)
LEAF_NODE	109:27	109:27	4	;
EXPR_STATEMENT	112:1	112:41	3	* r = TIFFmin ( * r , cielab -> display . d_Vrwr ) ;
EXPR	112:1	112:1	4	* r = TIFFmin ( * r , cielab -> display . d_Vrwr )
ASSIGN	112:1	112:6	5	* r = TIFFmin ( * r , cielab -> display . d_Vrwr )
LVAL	112:1	112:1	6	* r
UNARY_EXPR	112:1	112:2	7	* r
UNARY_OPERATOR	112:1	112:1	8	*
LEAF_NODE	112:1	112:1	9	*
FIELD	112:2	112:2	8	r
LEAF_NODE	112:2	112:2	9	r
ASSIGN_OP	112:4	112:4	6	=
LEAF_NODE	112:4	112:4	7	=
RVAL	112:6	112:6	6	TIFFmin ( * r , cielab -> display . d_Vrwr )
FUNCTION_CALL	112:6	112:40	7	TIFFmin ( * r , cielab -> display . d_Vrwr )
CALLEE	112:6	112:6	8	TIFFmin
LEAF_NODE	112:6	112:6	9	TIFFmin
LEAF_NODE	112:13	112:13	8	(
ARGUMENT	112:14	112:14	8	* r
UNARY_EXPR	112:14	112:15	9	* r
UNARY_OPERATOR	112:14	112:14	10	*
LEAF_NODE	112:14	112:14	11	*
FIELD	112:15	112:15	10	r
LEAF_NODE	112:15	112:15	11	r
LEAF_NODE	112:16	112:16	8	,
ARGUMENT	112:18	112:18	8	cielab -> display . d_Vrwr
FIELD	112:18	112:34	9	cielab -> display . d_Vrwr
LEAF_NODE	112:18	112:18	10	cielab
LEAF_NODE	112:24	112:24	10	->
LEAF_NODE	112:26	112:26	10	display
LEAF_NODE	112:33	112:33	10	.
LEAF_NODE	112:34	112:34	10	d_Vrwr
LEAF_NODE	112:40	112:40	8	)
LEAF_NODE	112:41	112:41	4	;
EXPR_STATEMENT	113:1	113:41	3	* g = TIFFmin ( * g , cielab -> display . d_Vrwg ) ;
EXPR	113:1	113:1	4	* g = TIFFmin ( * g , cielab -> display . d_Vrwg )
ASSIGN	113:1	113:6	5	* g = TIFFmin ( * g , cielab -> display . d_Vrwg )
LVAL	113:1	113:1	6	* g
UNARY_EXPR	113:1	113:2	7	* g
UNARY_OPERATOR	113:1	113:1	8	*
LEAF_NODE	113:1	113:1	9	*
FIELD	113:2	113:2	8	g
LEAF_NODE	113:2	113:2	9	g
ASSIGN_OP	113:4	113:4	6	=
LEAF_NODE	113:4	113:4	7	=
RVAL	113:6	113:6	6	TIFFmin ( * g , cielab -> display . d_Vrwg )
FUNCTION_CALL	113:6	113:40	7	TIFFmin ( * g , cielab -> display . d_Vrwg )
CALLEE	113:6	113:6	8	TIFFmin
LEAF_NODE	113:6	113:6	9	TIFFmin
LEAF_NODE	113:13	113:13	8	(
ARGUMENT	113:14	113:14	8	* g
UNARY_EXPR	113:14	113:15	9	* g
UNARY_OPERATOR	113:14	113:14	10	*
LEAF_NODE	113:14	113:14	11	*
FIELD	113:15	113:15	10	g
LEAF_NODE	113:15	113:15	11	g
LEAF_NODE	113:16	113:16	8	,
ARGUMENT	113:18	113:18	8	cielab -> display . d_Vrwg
FIELD	113:18	113:34	9	cielab -> display . d_Vrwg
LEAF_NODE	113:18	113:18	10	cielab
LEAF_NODE	113:24	113:24	10	->
LEAF_NODE	113:26	113:26	10	display
LEAF_NODE	113:33	113:33	10	.
LEAF_NODE	113:34	113:34	10	d_Vrwg
LEAF_NODE	113:40	113:40	8	)
LEAF_NODE	113:41	113:41	4	;
EXPR_STATEMENT	114:1	114:41	3	* b = TIFFmin ( * b , cielab -> display . d_Vrwb ) ;
EXPR	114:1	114:1	4	* b = TIFFmin ( * b , cielab -> display . d_Vrwb )
ASSIGN	114:1	114:6	5	* b = TIFFmin ( * b , cielab -> display . d_Vrwb )
LVAL	114:1	114:1	6	* b
UNARY_EXPR	114:1	114:2	7	* b
UNARY_OPERATOR	114:1	114:1	8	*
LEAF_NODE	114:1	114:1	9	*
FIELD	114:2	114:2	8	b
LEAF_NODE	114:2	114:2	9	b
ASSIGN_OP	114:4	114:4	6	=
LEAF_NODE	114:4	114:4	7	=
RVAL	114:6	114:6	6	TIFFmin ( * b , cielab -> display . d_Vrwb )
FUNCTION_CALL	114:6	114:40	7	TIFFmin ( * b , cielab -> display . d_Vrwb )
CALLEE	114:6	114:6	8	TIFFmin
LEAF_NODE	114:6	114:6	9	TIFFmin
LEAF_NODE	114:13	114:13	8	(
ARGUMENT	114:14	114:14	8	* b
UNARY_EXPR	114:14	114:15	9	* b
UNARY_OPERATOR	114:14	114:14	10	*
LEAF_NODE	114:14	114:14	11	*
FIELD	114:15	114:15	10	b
LEAF_NODE	114:15	114:15	11	b
LEAF_NODE	114:16	114:16	8	,
ARGUMENT	114:18	114:18	8	cielab -> display . d_Vrwb
FIELD	114:18	114:34	9	cielab -> display . d_Vrwb
LEAF_NODE	114:18	114:18	10	cielab
LEAF_NODE	114:24	114:24	10	->
LEAF_NODE	114:26	114:26	10	display
LEAF_NODE	114:33	114:33	10	.
LEAF_NODE	114:34	114:34	10	d_Vrwb
LEAF_NODE	114:40	114:40	8	)
LEAF_NODE	114:41	114:41	4	;
LEAF_NODE	115:0	115:0	2	}
FUNCTION_DEF	122:0	166:0	1	
RETURN_TYPE	122:0	122:0	2	int
TYPE_NAME	122:0	122:0	3	int
LEAF_NODE	122:0	122:0	4	int
FUNCTION_NAME	123:0	123:0	2	TIFFCIELabToRGBInit
LEAF_NODE	123:0	123:0	3	TIFFCIELabToRGBInit
PARAMETER_LIST	123:19	124:49	2	( TIFFCIELabToRGB * cielab , const TIFFDisplay * display , float * refWhite )
LEAF_NODE	123:19	123:19	3	(
PARAMETER_DECL	123:20	123:37	3	TIFFCIELabToRGB * cielab
TYPE	123:20	123:35	4	TIFFCIELabToRGB *
TYPE_NAME	123:20	123:20	5	TIFFCIELabToRGB
LEAF_NODE	123:20	123:20	6	TIFFCIELabToRGB
POINTER	123:35	123:35	5	*
LEAF_NODE	123:35	123:35	6	*
NAME	123:37	123:37	4	cielab
LEAF_NODE	123:37	123:37	5	cielab
LEAF_NODE	123:43	123:43	3	,
PARAMETER_DECL	124:6	124:25	3	const TIFFDisplay * display
TYPE	124:6	124:24	4	const TIFFDisplay *
TYPE_NAME	124:6	124:12	5	const TIFFDisplay
LEAF_NODE	124:6	124:6	6	const
LEAF_NODE	124:12	124:12	6	TIFFDisplay
POINTER	124:24	124:24	5	*
LEAF_NODE	124:24	124:24	6	*
NAME	124:25	124:25	4	display
LEAF_NODE	124:25	124:25	5	display
LEAF_NODE	124:32	124:32	3	,
PARAMETER_DECL	124:34	124:41	3	float * refWhite
TYPE	124:34	124:40	4	float *
TYPE_NAME	124:34	124:34	5	float
LEAF_NODE	124:34	124:34	6	float
POINTER	124:40	124:40	5	*
LEAF_NODE	124:40	124:40	6	*
NAME	124:41	124:41	4	refWhite
LEAF_NODE	124:41	124:41	5	refWhite
LEAF_NODE	124:49	124:49	3	)
LEAF_NODE	125:0	125:0	2	{
STATEMENTS	126:1	165:1	2	
SIMPLE_DECL	126:1	126:6	3	int i ;
VAR_DECL	126:1	126:5	4	int i
TYPE	126:1	126:1	5	int
TYPE_NAME	126:1	126:1	6	int
LEAF_NODE	126:1	126:1	7	int
NAME	126:5	126:5	5	i
LEAF_NODE	126:5	126:5	6	i
LEAF_NODE	126:6	126:6	4	;
SIMPLE_DECL	127:1	127:15	3	double dfGamma ;
VAR_DECL	127:1	127:8	4	double dfGamma
TYPE	127:1	127:1	5	double
TYPE_NAME	127:1	127:1	6	double
LEAF_NODE	127:1	127:1	7	double
NAME	127:8	127:8	5	dfGamma
LEAF_NODE	127:8	127:8	6	dfGamma
LEAF_NODE	127:15	127:15	4	;
EXPR_STATEMENT	129:1	129:40	3	cielab -> range = CIELABTORGB_TABLE_RANGE ;
EXPR	129:1	129:1	4	cielab -> range = CIELABTORGB_TABLE_RANGE
ASSIGN	129:1	129:17	5	cielab -> range = CIELABTORGB_TABLE_RANGE
LVAL	129:1	129:1	6	cielab -> range
FIELD	129:1	129:9	7	cielab -> range
LEAF_NODE	129:1	129:1	8	cielab
LEAF_NODE	129:7	129:7	8	->
LEAF_NODE	129:9	129:9	8	range
ASSIGN_OP	129:15	129:15	6	=
LEAF_NODE	129:15	129:15	7	=
RVAL	129:17	129:17	6	CIELABTORGB_TABLE_RANGE
FIELD	129:17	129:17	7	CIELABTORGB_TABLE_RANGE
LEAF_NODE	129:17	129:17	8	CIELABTORGB_TABLE_RANGE
LEAF_NODE	129:40	129:40	4	;
EXPR_STATEMENT	131:1	131:60	3	_TIFFmemcpy ( & cielab -> display , display , sizeof ( TIFFDisplay ) ) ;
EXPR	131:1	131:1	4	_TIFFmemcpy ( & cielab -> display , display , sizeof ( TIFFDisplay ) )
FUNCTION_CALL	131:1	131:59	5	_TIFFmemcpy ( & cielab -> display , display , sizeof ( TIFFDisplay ) )
CALLEE	131:1	131:1	6	_TIFFmemcpy
LEAF_NODE	131:1	131:1	7	_TIFFmemcpy
LEAF_NODE	131:12	131:12	6	(
ARGUMENT	131:13	131:13	6	& cielab -> display
UNARY_EXPR	131:13	131:14	7	& cielab -> display
UNARY_OPERATOR	131:13	131:13	8	&
LEAF_NODE	131:13	131:13	9	&
FIELD	131:14	131:22	8	cielab -> display
LEAF_NODE	131:14	131:14	9	cielab
LEAF_NODE	131:20	131:20	9	->
LEAF_NODE	131:22	131:22	9	display
LEAF_NODE	131:29	131:29	6	,
ARGUMENT	131:31	131:31	6	display
FIELD	131:31	131:31	7	display
LEAF_NODE	131:31	131:31	8	display
LEAF_NODE	131:38	131:38	6	,
ARGUMENT	131:40	131:40	6	sizeof ( TIFFDisplay )
FUNCTION_CALL	131:40	131:58	7	sizeof ( TIFFDisplay )
CALLEE	131:40	131:40	8	sizeof
LEAF_NODE	131:40	131:40	9	sizeof
LEAF_NODE	131:46	131:46	8	(
ARGUMENT	131:47	131:47	8	TIFFDisplay
FIELD	131:47	131:47	9	TIFFDisplay
LEAF_NODE	131:47	131:47	10	TIFFDisplay
LEAF_NODE	131:58	131:58	8	)
LEAF_NODE	131:59	131:59	6	)
LEAF_NODE	131:60	131:60	4	;
EXPR_STATEMENT	134:1	134:42	3	dfGamma = 1.0 / cielab -> display . d_gammaR ;
EXPR	134:1	134:1	4	dfGamma = 1.0 / cielab -> display . d_gammaR
ASSIGN	134:1	134:11	5	dfGamma = 1.0 / cielab -> display . d_gammaR
LVAL	134:1	134:1	6	dfGamma
FIELD	134:1	134:1	7	dfGamma
LEAF_NODE	134:1	134:1	8	dfGamma
ASSIGN_OP	134:9	134:9	6	=
LEAF_NODE	134:9	134:9	7	=
RVAL	134:11	134:17	6	1.0 / cielab -> display . d_gammaR
FIELD	134:11	134:11	7	1.0
LEAF_NODE	134:11	134:11	8	1.0
LEAF_NODE	134:15	134:15	7	/
FIELD	134:17	134:33	7	cielab -> display . d_gammaR
LEAF_NODE	134:17	134:17	8	cielab
LEAF_NODE	134:23	134:23	8	->
LEAF_NODE	134:25	134:25	8	display
LEAF_NODE	134:32	134:32	8	.
LEAF_NODE	134:33	134:33	8	d_gammaR
LEAF_NODE	134:42	134:42	4	;
EXPR_STATEMENT	135:1	136:65	3	cielab -> rstep = ( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range ;
EXPR	135:1	135:1	4	cielab -> rstep = ( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range
ASSIGN	135:1	136:2	5	cielab -> rstep = ( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range
LVAL	135:1	135:1	6	cielab -> rstep
FIELD	135:1	135:9	7	cielab -> rstep
LEAF_NODE	135:1	135:1	8	cielab
LEAF_NODE	135:7	135:7	8	->
LEAF_NODE	135:9	135:9	8	rstep
ASSIGN_OP	135:15	135:15	6	=
LEAF_NODE	135:15	135:15	7	=
RVAL	136:2	136:52	6	( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range
LEAF_NODE	136:2	136:2	7	(
FIELD	136:3	136:19	7	cielab -> display . d_YCR
LEAF_NODE	136:3	136:3	8	cielab
LEAF_NODE	136:9	136:9	8	->
LEAF_NODE	136:11	136:11	8	display
LEAF_NODE	136:18	136:18	8	.
LEAF_NODE	136:19	136:19	8	d_YCR
LEAF_NODE	136:25	136:25	7	-
FIELD	136:27	136:43	7	cielab -> display . d_Y0R
LEAF_NODE	136:27	136:27	8	cielab
LEAF_NODE	136:33	136:33	8	->
LEAF_NODE	136:35	136:35	8	display
LEAF_NODE	136:42	136:42	8	.
LEAF_NODE	136:43	136:43	8	d_Y0R
LEAF_NODE	136:48	136:48	7	)
LEAF_NODE	136:50	136:50	7	/
FIELD	136:52	136:60	7	cielab -> range
LEAF_NODE	136:52	136:52	8	cielab
LEAF_NODE	136:58	136:58	8	->
LEAF_NODE	136:60	136:60	8	range
LEAF_NODE	136:65	136:65	4	;
ITERATION	137:1	137:37	3	
KEYWORD	137:1	137:1	4	for
LEAF_NODE	137:1	137:1	5	for
LEAF_NODE	137:4	137:4	4	(
FOR_INIT	137:5	137:10	4	i = 0 ;
EXPR	137:5	137:5	5	i = 0
ASSIGN	137:5	137:9	6	i = 0
LVAL	137:5	137:5	7	i
FIELD	137:5	137:5	8	i
LEAF_NODE	137:5	137:5	9	i
ASSIGN_OP	137:7	137:7	7	=
LEAF_NODE	137:7	137:7	8	=
RVAL	137:9	137:9	7	0
FIELD	137:9	137:9	8	0
LEAF_NODE	137:9	137:9	9	0
LEAF_NODE	137:10	137:10	5	;
CONDITION	137:12	137:12	4	i <= cielab -> range
EXPR	137:12	137:17	5	i <= cielab -> range
FIELD	137:12	137:12	6	i
LEAF_NODE	137:12	137:12	7	i
REL_OPERATOR	137:14	137:14	6	<=
LEAF_NODE	137:14	137:14	7	<=
FIELD	137:17	137:25	6	cielab -> range
LEAF_NODE	137:17	137:17	7	cielab
LEAF_NODE	137:23	137:23	7	->
LEAF_NODE	137:25	137:25	7	range
LEAF_NODE	137:30	137:30	4	;
FOR_EXPR	137:32	137:32	4	i ++
EXPR	137:32	137:32	5	i ++
FIELD	137:32	137:33	6	i ++
LEAF_NODE	137:32	137:32	7	i
LEAF_NODE	137:33	137:33	7	++
LEAF_NODE	137:35	137:35	4	)
STATEMENTS	137:37	140:1	4	
LEAF_NODE	137:37	137:37	5	{
STATEMENTS	138:2	138:2	5	
EXPR_STATEMENT	138:2	139:56	6	cielab -> Yr2r [ i ] = cielab -> display . d_Vrwr * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) ) ;
EXPR	138:2	138:2	7	cielab -> Yr2r [ i ] = cielab -> display . d_Vrwr * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) )
ASSIGN	138:2	138:20	8	cielab -> Yr2r [ i ] = cielab -> display . d_Vrwr * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) )
LVAL	138:2	138:2	9	cielab -> Yr2r [ i ]
FIELD	138:2	138:16	10	cielab -> Yr2r [ i ]
LEAF_NODE	138:2	138:2	11	cielab
LEAF_NODE	138:8	138:8	11	->
LEAF_NODE	138:10	138:10	11	Yr2r
LEAF_NODE	138:14	138:14	11	[
EXPR	138:15	138:15	11	i
FIELD	138:15	138:15	12	i
LEAF_NODE	138:15	138:15	13	i
LEAF_NODE	138:16	138:16	11	]
ASSIGN_OP	138:18	138:18	9	=
LEAF_NODE	138:18	138:18	10	=
RVAL	138:20	139:55	9	cielab -> display . d_Vrwr * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) )
FIELD	138:20	138:36	10	cielab -> display . d_Vrwr
LEAF_NODE	138:20	138:20	11	cielab
LEAF_NODE	138:26	138:26	11	->
LEAF_NODE	138:28	138:28	11	display
LEAF_NODE	138:35	138:35	11	.
LEAF_NODE	138:36	138:36	11	d_Vrwr
LEAF_NODE	139:6	139:6	10	*
LEAF_NODE	139:8	139:8	10	(
LEAF_NODE	139:9	139:9	10	(
TYPE_NAME	139:10	139:10	10	float
LEAF_NODE	139:10	139:10	11	float
LEAF_NODE	139:15	139:15	10	)
FUNCTION_CALL	139:16	139:54	10	pow ( ( double ) i / cielab -> range , dfGamma )
CALLEE	139:16	139:16	11	pow
LEAF_NODE	139:16	139:16	12	pow
LEAF_NODE	139:19	139:19	11	(
ARGUMENT	139:20	139:32	11	( double ) i / cielab -> range
LEAF_NODE	139:20	139:20	12	(
TYPE_NAME	139:21	139:21	12	double
LEAF_NODE	139:21	139:21	13	double
LEAF_NODE	139:27	139:27	12	)
FIELD	139:28	139:28	12	i
LEAF_NODE	139:28	139:28	13	i
LEAF_NODE	139:30	139:30	12	/
FIELD	139:32	139:40	12	cielab -> range
LEAF_NODE	139:32	139:32	13	cielab
LEAF_NODE	139:38	139:38	13	->
LEAF_NODE	139:40	139:40	13	range
LEAF_NODE	139:45	139:45	11	,
ARGUMENT	139:47	139:47	11	dfGamma
FIELD	139:47	139:47	12	dfGamma
LEAF_NODE	139:47	139:47	13	dfGamma
LEAF_NODE	139:54	139:54	11	)
LEAF_NODE	139:55	139:55	10	)
LEAF_NODE	139:56	139:56	7	;
LEAF_NODE	140:1	140:1	5	}
EXPR_STATEMENT	143:1	143:42	3	dfGamma = 1.0 / cielab -> display . d_gammaG ;
EXPR	143:1	143:1	4	dfGamma = 1.0 / cielab -> display . d_gammaG
ASSIGN	143:1	143:11	5	dfGamma = 1.0 / cielab -> display . d_gammaG
LVAL	143:1	143:1	6	dfGamma
FIELD	143:1	143:1	7	dfGamma
LEAF_NODE	143:1	143:1	8	dfGamma
ASSIGN_OP	143:9	143:9	6	=
LEAF_NODE	143:9	143:9	7	=
RVAL	143:11	143:17	6	1.0 / cielab -> display . d_gammaG
FIELD	143:11	143:11	7	1.0
LEAF_NODE	143:11	143:11	8	1.0
LEAF_NODE	143:15	143:15	7	/
FIELD	143:17	143:33	7	cielab -> display . d_gammaG
LEAF_NODE	143:17	143:17	8	cielab
LEAF_NODE	143:23	143:23	8	->
LEAF_NODE	143:25	143:25	8	display
LEAF_NODE	143:32	143:32	8	.
LEAF_NODE	143:33	143:33	8	d_gammaG
LEAF_NODE	143:42	143:42	4	;
EXPR_STATEMENT	144:1	145:68	3	cielab -> gstep = ( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range ;
EXPR	144:1	144:1	4	cielab -> gstep = ( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range
ASSIGN	144:1	145:5	5	cielab -> gstep = ( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range
LVAL	144:1	144:1	6	cielab -> gstep
FIELD	144:1	144:9	7	cielab -> gstep
LEAF_NODE	144:1	144:1	8	cielab
LEAF_NODE	144:7	144:7	8	->
LEAF_NODE	144:9	144:9	8	gstep
ASSIGN_OP	144:15	144:15	6	=
LEAF_NODE	144:15	144:15	7	=
RVAL	145:5	145:55	6	( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range
LEAF_NODE	145:5	145:5	7	(
FIELD	145:6	145:22	7	cielab -> display . d_YCR
LEAF_NODE	145:6	145:6	8	cielab
LEAF_NODE	145:12	145:12	8	->
LEAF_NODE	145:14	145:14	8	display
LEAF_NODE	145:21	145:21	8	.
LEAF_NODE	145:22	145:22	8	d_YCR
LEAF_NODE	145:28	145:28	7	-
FIELD	145:30	145:46	7	cielab -> display . d_Y0R
LEAF_NODE	145:30	145:30	8	cielab
LEAF_NODE	145:36	145:36	8	->
LEAF_NODE	145:38	145:38	8	display
LEAF_NODE	145:45	145:45	8	.
LEAF_NODE	145:46	145:46	8	d_Y0R
LEAF_NODE	145:51	145:51	7	)
LEAF_NODE	145:53	145:53	7	/
FIELD	145:55	145:63	7	cielab -> range
LEAF_NODE	145:55	145:55	8	cielab
LEAF_NODE	145:61	145:61	8	->
LEAF_NODE	145:63	145:63	8	range
LEAF_NODE	145:68	145:68	4	;
ITERATION	146:1	146:37	3	
KEYWORD	146:1	146:1	4	for
LEAF_NODE	146:1	146:1	5	for
LEAF_NODE	146:4	146:4	4	(
FOR_INIT	146:5	146:10	4	i = 0 ;
EXPR	146:5	146:5	5	i = 0
ASSIGN	146:5	146:9	6	i = 0
LVAL	146:5	146:5	7	i
FIELD	146:5	146:5	8	i
LEAF_NODE	146:5	146:5	9	i
ASSIGN_OP	146:7	146:7	7	=
LEAF_NODE	146:7	146:7	8	=
RVAL	146:9	146:9	7	0
FIELD	146:9	146:9	8	0
LEAF_NODE	146:9	146:9	9	0
LEAF_NODE	146:10	146:10	5	;
CONDITION	146:12	146:12	4	i <= cielab -> range
EXPR	146:12	146:17	5	i <= cielab -> range
FIELD	146:12	146:12	6	i
LEAF_NODE	146:12	146:12	7	i
REL_OPERATOR	146:14	146:14	6	<=
LEAF_NODE	146:14	146:14	7	<=
FIELD	146:17	146:25	6	cielab -> range
LEAF_NODE	146:17	146:17	7	cielab
LEAF_NODE	146:23	146:23	7	->
LEAF_NODE	146:25	146:25	7	range
LEAF_NODE	146:30	146:30	4	;
FOR_EXPR	146:32	146:32	4	i ++
EXPR	146:32	146:32	5	i ++
FIELD	146:32	146:33	6	i ++
LEAF_NODE	146:32	146:32	7	i
LEAF_NODE	146:33	146:33	7	++
LEAF_NODE	146:35	146:35	4	)
STATEMENTS	146:37	149:1	4	
LEAF_NODE	146:37	146:37	5	{
STATEMENTS	147:2	147:2	5	
EXPR_STATEMENT	147:2	148:56	6	cielab -> Yg2g [ i ] = cielab -> display . d_Vrwg * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) ) ;
EXPR	147:2	147:2	7	cielab -> Yg2g [ i ] = cielab -> display . d_Vrwg * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) )
ASSIGN	147:2	147:20	8	cielab -> Yg2g [ i ] = cielab -> display . d_Vrwg * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) )
LVAL	147:2	147:2	9	cielab -> Yg2g [ i ]
FIELD	147:2	147:16	10	cielab -> Yg2g [ i ]
LEAF_NODE	147:2	147:2	11	cielab
LEAF_NODE	147:8	147:8	11	->
LEAF_NODE	147:10	147:10	11	Yg2g
LEAF_NODE	147:14	147:14	11	[
EXPR	147:15	147:15	11	i
FIELD	147:15	147:15	12	i
LEAF_NODE	147:15	147:15	13	i
LEAF_NODE	147:16	147:16	11	]
ASSIGN_OP	147:18	147:18	9	=
LEAF_NODE	147:18	147:18	10	=
RVAL	147:20	148:55	9	cielab -> display . d_Vrwg * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) )
FIELD	147:20	147:36	10	cielab -> display . d_Vrwg
LEAF_NODE	147:20	147:20	11	cielab
LEAF_NODE	147:26	147:26	11	->
LEAF_NODE	147:28	147:28	11	display
LEAF_NODE	147:35	147:35	11	.
LEAF_NODE	147:36	147:36	11	d_Vrwg
LEAF_NODE	148:6	148:6	10	*
LEAF_NODE	148:8	148:8	10	(
LEAF_NODE	148:9	148:9	10	(
TYPE_NAME	148:10	148:10	10	float
LEAF_NODE	148:10	148:10	11	float
LEAF_NODE	148:15	148:15	10	)
FUNCTION_CALL	148:16	148:54	10	pow ( ( double ) i / cielab -> range , dfGamma )
CALLEE	148:16	148:16	11	pow
LEAF_NODE	148:16	148:16	12	pow
LEAF_NODE	148:19	148:19	11	(
ARGUMENT	148:20	148:32	11	( double ) i / cielab -> range
LEAF_NODE	148:20	148:20	12	(
TYPE_NAME	148:21	148:21	12	double
LEAF_NODE	148:21	148:21	13	double
LEAF_NODE	148:27	148:27	12	)
FIELD	148:28	148:28	12	i
LEAF_NODE	148:28	148:28	13	i
LEAF_NODE	148:30	148:30	12	/
FIELD	148:32	148:40	12	cielab -> range
LEAF_NODE	148:32	148:32	13	cielab
LEAF_NODE	148:38	148:38	13	->
LEAF_NODE	148:40	148:40	13	range
LEAF_NODE	148:45	148:45	11	,
ARGUMENT	148:47	148:47	11	dfGamma
FIELD	148:47	148:47	12	dfGamma
LEAF_NODE	148:47	148:47	13	dfGamma
LEAF_NODE	148:54	148:54	11	)
LEAF_NODE	148:55	148:55	10	)
LEAF_NODE	148:56	148:56	7	;
LEAF_NODE	149:1	149:1	5	}
EXPR_STATEMENT	152:1	152:42	3	dfGamma = 1.0 / cielab -> display . d_gammaB ;
EXPR	152:1	152:1	4	dfGamma = 1.0 / cielab -> display . d_gammaB
ASSIGN	152:1	152:11	5	dfGamma = 1.0 / cielab -> display . d_gammaB
LVAL	152:1	152:1	6	dfGamma
FIELD	152:1	152:1	7	dfGamma
LEAF_NODE	152:1	152:1	8	dfGamma
ASSIGN_OP	152:9	152:9	6	=
LEAF_NODE	152:9	152:9	7	=
RVAL	152:11	152:17	6	1.0 / cielab -> display . d_gammaB
FIELD	152:11	152:11	7	1.0
LEAF_NODE	152:11	152:11	8	1.0
LEAF_NODE	152:15	152:15	7	/
FIELD	152:17	152:33	7	cielab -> display . d_gammaB
LEAF_NODE	152:17	152:17	8	cielab
LEAF_NODE	152:23	152:23	8	->
LEAF_NODE	152:25	152:25	8	display
LEAF_NODE	152:32	152:32	8	.
LEAF_NODE	152:33	152:33	8	d_gammaB
LEAF_NODE	152:42	152:42	4	;
EXPR_STATEMENT	153:1	154:68	3	cielab -> bstep = ( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range ;
EXPR	153:1	153:1	4	cielab -> bstep = ( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range
ASSIGN	153:1	154:5	5	cielab -> bstep = ( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range
LVAL	153:1	153:1	6	cielab -> bstep
FIELD	153:1	153:9	7	cielab -> bstep
LEAF_NODE	153:1	153:1	8	cielab
LEAF_NODE	153:7	153:7	8	->
LEAF_NODE	153:9	153:9	8	bstep
ASSIGN_OP	153:15	153:15	6	=
LEAF_NODE	153:15	153:15	7	=
RVAL	154:5	154:55	6	( cielab -> display . d_YCR - cielab -> display . d_Y0R ) / cielab -> range
LEAF_NODE	154:5	154:5	7	(
FIELD	154:6	154:22	7	cielab -> display . d_YCR
LEAF_NODE	154:6	154:6	8	cielab
LEAF_NODE	154:12	154:12	8	->
LEAF_NODE	154:14	154:14	8	display
LEAF_NODE	154:21	154:21	8	.
LEAF_NODE	154:22	154:22	8	d_YCR
LEAF_NODE	154:28	154:28	7	-
FIELD	154:30	154:46	7	cielab -> display . d_Y0R
LEAF_NODE	154:30	154:30	8	cielab
LEAF_NODE	154:36	154:36	8	->
LEAF_NODE	154:38	154:38	8	display
LEAF_NODE	154:45	154:45	8	.
LEAF_NODE	154:46	154:46	8	d_Y0R
LEAF_NODE	154:51	154:51	7	)
LEAF_NODE	154:53	154:53	7	/
FIELD	154:55	154:63	7	cielab -> range
LEAF_NODE	154:55	154:55	8	cielab
LEAF_NODE	154:61	154:61	8	->
LEAF_NODE	154:63	154:63	8	range
LEAF_NODE	154:68	154:68	4	;
ITERATION	155:1	155:37	3	
KEYWORD	155:1	155:1	4	for
LEAF_NODE	155:1	155:1	5	for
LEAF_NODE	155:4	155:4	4	(
FOR_INIT	155:5	155:10	4	i = 0 ;
EXPR	155:5	155:5	5	i = 0
ASSIGN	155:5	155:9	6	i = 0
LVAL	155:5	155:5	7	i
FIELD	155:5	155:5	8	i
LEAF_NODE	155:5	155:5	9	i
ASSIGN_OP	155:7	155:7	7	=
LEAF_NODE	155:7	155:7	8	=
RVAL	155:9	155:9	7	0
FIELD	155:9	155:9	8	0
LEAF_NODE	155:9	155:9	9	0
LEAF_NODE	155:10	155:10	5	;
CONDITION	155:12	155:12	4	i <= cielab -> range
EXPR	155:12	155:17	5	i <= cielab -> range
FIELD	155:12	155:12	6	i
LEAF_NODE	155:12	155:12	7	i
REL_OPERATOR	155:14	155:14	6	<=
LEAF_NODE	155:14	155:14	7	<=
FIELD	155:17	155:25	6	cielab -> range
LEAF_NODE	155:17	155:17	7	cielab
LEAF_NODE	155:23	155:23	7	->
LEAF_NODE	155:25	155:25	7	range
LEAF_NODE	155:30	155:30	4	;
FOR_EXPR	155:32	155:32	4	i ++
EXPR	155:32	155:32	5	i ++
FIELD	155:32	155:33	6	i ++
LEAF_NODE	155:32	155:32	7	i
LEAF_NODE	155:33	155:33	7	++
LEAF_NODE	155:35	155:35	4	)
STATEMENTS	155:37	158:1	4	
LEAF_NODE	155:37	155:37	5	{
STATEMENTS	156:2	156:2	5	
EXPR_STATEMENT	156:2	157:56	6	cielab -> Yb2b [ i ] = cielab -> display . d_Vrwb * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) ) ;
EXPR	156:2	156:2	7	cielab -> Yb2b [ i ] = cielab -> display . d_Vrwb * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) )
ASSIGN	156:2	156:20	8	cielab -> Yb2b [ i ] = cielab -> display . d_Vrwb * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) )
LVAL	156:2	156:2	9	cielab -> Yb2b [ i ]
FIELD	156:2	156:16	10	cielab -> Yb2b [ i ]
LEAF_NODE	156:2	156:2	11	cielab
LEAF_NODE	156:8	156:8	11	->
LEAF_NODE	156:10	156:10	11	Yb2b
LEAF_NODE	156:14	156:14	11	[
EXPR	156:15	156:15	11	i
FIELD	156:15	156:15	12	i
LEAF_NODE	156:15	156:15	13	i
LEAF_NODE	156:16	156:16	11	]
ASSIGN_OP	156:18	156:18	9	=
LEAF_NODE	156:18	156:18	10	=
RVAL	156:20	157:55	9	cielab -> display . d_Vrwb * ( ( float ) pow ( ( double ) i / cielab -> range , dfGamma ) )
FIELD	156:20	156:36	10	cielab -> display . d_Vrwb
LEAF_NODE	156:20	156:20	11	cielab
LEAF_NODE	156:26	156:26	11	->
LEAF_NODE	156:28	156:28	11	display
LEAF_NODE	156:35	156:35	11	.
LEAF_NODE	156:36	156:36	11	d_Vrwb
LEAF_NODE	157:6	157:6	10	*
LEAF_NODE	157:8	157:8	10	(
LEAF_NODE	157:9	157:9	10	(
TYPE_NAME	157:10	157:10	10	float
LEAF_NODE	157:10	157:10	11	float
LEAF_NODE	157:15	157:15	10	)
FUNCTION_CALL	157:16	157:54	10	pow ( ( double ) i / cielab -> range , dfGamma )
CALLEE	157:16	157:16	11	pow
LEAF_NODE	157:16	157:16	12	pow
LEAF_NODE	157:19	157:19	11	(
ARGUMENT	157:20	157:32	11	( double ) i / cielab -> range
LEAF_NODE	157:20	157:20	12	(
TYPE_NAME	157:21	157:21	12	double
LEAF_NODE	157:21	157:21	13	double
LEAF_NODE	157:27	157:27	12	)
FIELD	157:28	157:28	12	i
LEAF_NODE	157:28	157:28	13	i
LEAF_NODE	157:30	157:30	12	/
FIELD	157:32	157:40	12	cielab -> range
LEAF_NODE	157:32	157:32	13	cielab
LEAF_NODE	157:38	157:38	13	->
LEAF_NODE	157:40	157:40	13	range
LEAF_NODE	157:45	157:45	11	,
ARGUMENT	157:47	157:47	11	dfGamma
FIELD	157:47	157:47	12	dfGamma
LEAF_NODE	157:47	157:47	13	dfGamma
LEAF_NODE	157:54	157:54	11	)
LEAF_NODE	157:55	157:55	10	)
LEAF_NODE	157:56	157:56	7	;
LEAF_NODE	158:1	158:1	5	}
EXPR_STATEMENT	161:1	161:25	3	cielab -> X0 = refWhite [ 0 ] ;
EXPR	161:1	161:1	4	cielab -> X0 = refWhite [ 0 ]
ASSIGN	161:1	161:14	5	cielab -> X0 = refWhite [ 0 ]
LVAL	161:1	161:1	6	cielab -> X0
FIELD	161:1	161:9	7	cielab -> X0
LEAF_NODE	161:1	161:1	8	cielab
LEAF_NODE	161:7	161:7	8	->
LEAF_NODE	161:9	161:9	8	X0
ASSIGN_OP	161:12	161:12	6	=
LEAF_NODE	161:12	161:12	7	=
RVAL	161:14	161:14	6	refWhite [ 0 ]
FIELD	161:14	161:24	7	refWhite [ 0 ]
LEAF_NODE	161:14	161:14	8	refWhite
LEAF_NODE	161:22	161:22	8	[
EXPR	161:23	161:23	8	0
FIELD	161:23	161:23	9	0
LEAF_NODE	161:23	161:23	10	0
LEAF_NODE	161:24	161:24	8	]
LEAF_NODE	161:25	161:25	4	;
EXPR_STATEMENT	162:1	162:25	3	cielab -> Y0 = refWhite [ 1 ] ;
EXPR	162:1	162:1	4	cielab -> Y0 = refWhite [ 1 ]
ASSIGN	162:1	162:14	5	cielab -> Y0 = refWhite [ 1 ]
LVAL	162:1	162:1	6	cielab -> Y0
FIELD	162:1	162:9	7	cielab -> Y0
LEAF_NODE	162:1	162:1	8	cielab
LEAF_NODE	162:7	162:7	8	->
LEAF_NODE	162:9	162:9	8	Y0
ASSIGN_OP	162:12	162:12	6	=
LEAF_NODE	162:12	162:12	7	=
RVAL	162:14	162:14	6	refWhite [ 1 ]
FIELD	162:14	162:24	7	refWhite [ 1 ]
LEAF_NODE	162:14	162:14	8	refWhite
LEAF_NODE	162:22	162:22	8	[
EXPR	162:23	162:23	8	1
FIELD	162:23	162:23	9	1
LEAF_NODE	162:23	162:23	10	1
LEAF_NODE	162:24	162:24	8	]
LEAF_NODE	162:25	162:25	4	;
EXPR_STATEMENT	163:1	163:25	3	cielab -> Z0 = refWhite [ 2 ] ;
EXPR	163:1	163:1	4	cielab -> Z0 = refWhite [ 2 ]
ASSIGN	163:1	163:14	5	cielab -> Z0 = refWhite [ 2 ]
LVAL	163:1	163:1	6	cielab -> Z0
FIELD	163:1	163:9	7	cielab -> Z0
LEAF_NODE	163:1	163:1	8	cielab
LEAF_NODE	163:7	163:7	8	->
LEAF_NODE	163:9	163:9	8	Z0
ASSIGN_OP	163:12	163:12	6	=
LEAF_NODE	163:12	163:12	7	=
RVAL	163:14	163:14	6	refWhite [ 2 ]
FIELD	163:14	163:24	7	refWhite [ 2 ]
LEAF_NODE	163:14	163:14	8	refWhite
LEAF_NODE	163:22	163:22	8	[
EXPR	163:23	163:23	8	2
FIELD	163:23	163:23	9	2
LEAF_NODE	163:23	163:23	10	2
LEAF_NODE	163:24	163:24	8	]
LEAF_NODE	163:25	163:25	4	;
JUMP_STATEMENT	165:1	165:9	3	return 0 ;
KEYWORD	165:1	165:1	4	return
LEAF_NODE	165:1	165:1	5	return
DESTINATION	165:8	165:8	4	0
EXPR	165:8	165:8	5	0
FIELD	165:8	165:8	6	0
LEAF_NODE	165:8	165:8	7	0
LEAF_NODE	165:9	165:9	4	;
LEAF_NODE	166:0	166:0	2	}
FUNCTION_DEF	180:0	198:0	1	
RETURN_TYPE	180:0	180:0	2	void
TYPE_NAME	180:0	180:0	3	void
LEAF_NODE	180:0	180:0	4	void
FUNCTION_NAME	181:0	181:0	2	TIFFYCbCrtoRGB
LEAF_NODE	181:0	181:0	3	TIFFYCbCrtoRGB
PARAMETER_LIST	181:14	182:39	2	( TIFFYCbCrToRGB * ycbcr , uint32 Y , int32 Cb , int32 Cr , uint32 * r , uint32 * g , uint32 * b )
LEAF_NODE	181:14	181:14	3	(
PARAMETER_DECL	181:15	181:31	3	TIFFYCbCrToRGB * ycbcr
TYPE	181:15	181:30	4	TIFFYCbCrToRGB *
TYPE_NAME	181:15	181:15	5	TIFFYCbCrToRGB
LEAF_NODE	181:15	181:15	6	TIFFYCbCrToRGB
POINTER	181:30	181:30	5	*
LEAF_NODE	181:30	181:30	6	*
NAME	181:31	181:31	4	ycbcr
LEAF_NODE	181:31	181:31	5	ycbcr
LEAF_NODE	181:36	181:36	3	,
PARAMETER_DECL	181:38	181:45	3	uint32 Y
TYPE	181:38	181:38	4	uint32
TYPE_NAME	181:38	181:38	5	uint32
LEAF_NODE	181:38	181:38	6	uint32
NAME	181:45	181:45	4	Y
LEAF_NODE	181:45	181:45	5	Y
LEAF_NODE	181:46	181:46	3	,
PARAMETER_DECL	181:48	181:54	3	int32 Cb
TYPE	181:48	181:48	4	int32
TYPE_NAME	181:48	181:48	5	int32
LEAF_NODE	181:48	181:48	6	int32
NAME	181:54	181:54	4	Cb
LEAF_NODE	181:54	181:54	5	Cb
LEAF_NODE	181:56	181:56	3	,
PARAMETER_DECL	181:58	181:64	3	int32 Cr
TYPE	181:58	181:58	4	int32
TYPE_NAME	181:58	181:58	5	int32
LEAF_NODE	181:58	181:58	6	int32
NAME	181:64	181:64	4	Cr
LEAF_NODE	181:64	181:64	5	Cr
LEAF_NODE	181:66	181:66	3	,
PARAMETER_DECL	182:8	182:16	3	uint32 * r
TYPE	182:8	182:15	4	uint32 *
TYPE_NAME	182:8	182:8	5	uint32
LEAF_NODE	182:8	182:8	6	uint32
POINTER	182:15	182:15	5	*
LEAF_NODE	182:15	182:15	6	*
NAME	182:16	182:16	4	r
LEAF_NODE	182:16	182:16	5	r
LEAF_NODE	182:17	182:17	3	,
PARAMETER_DECL	182:19	182:27	3	uint32 * g
TYPE	182:19	182:26	4	uint32 *
TYPE_NAME	182:19	182:19	5	uint32
LEAF_NODE	182:19	182:19	6	uint32
POINTER	182:26	182:26	5	*
LEAF_NODE	182:26	182:26	6	*
NAME	182:27	182:27	4	g
LEAF_NODE	182:27	182:27	5	g
LEAF_NODE	182:28	182:28	3	,
PARAMETER_DECL	182:30	182:38	3	uint32 * b
TYPE	182:30	182:37	4	uint32 *
TYPE_NAME	182:30	182:30	5	uint32
LEAF_NODE	182:30	182:30	6	uint32
POINTER	182:37	182:37	5	*
LEAF_NODE	182:37	182:37	6	*
NAME	182:38	182:38	4	b
LEAF_NODE	182:38	182:38	5	b
LEAF_NODE	182:39	182:39	3	)
LEAF_NODE	183:0	183:0	2	{
STATEMENTS	184:1	197:1	2	
SIMPLE_DECL	184:1	184:8	3	int32 i ;
VAR_DECL	184:1	184:7	4	int32 i
TYPE	184:1	184:1	5	int32
TYPE_NAME	184:1	184:1	6	int32
LEAF_NODE	184:1	184:1	7	int32
NAME	184:7	184:7	5	i
LEAF_NODE	184:7	184:7	6	i
LEAF_NODE	184:8	184:8	4	;
EXPR_STATEMENT	187:1	187:20	3	Y = HICLAMP ( Y , 255 ) ;
EXPR	187:1	187:1	4	Y = HICLAMP ( Y , 255 )
ASSIGN	187:1	187:5	5	Y = HICLAMP ( Y , 255 )
LVAL	187:1	187:1	6	Y
FIELD	187:1	187:1	7	Y
LEAF_NODE	187:1	187:1	8	Y
ASSIGN_OP	187:3	187:3	6	=
LEAF_NODE	187:3	187:3	7	=
RVAL	187:5	187:5	6	HICLAMP ( Y , 255 )
FUNCTION_CALL	187:5	187:19	7	HICLAMP ( Y , 255 )
CALLEE	187:5	187:5	8	HICLAMP
LEAF_NODE	187:5	187:5	9	HICLAMP
LEAF_NODE	187:12	187:12	8	(
ARGUMENT	187:13	187:13	8	Y
FIELD	187:13	187:13	9	Y
LEAF_NODE	187:13	187:13	10	Y
LEAF_NODE	187:14	187:14	8	,
ARGUMENT	187:16	187:16	8	255
FIELD	187:16	187:16	9	255
LEAF_NODE	187:16	187:16	10	255
LEAF_NODE	187:19	187:19	8	)
LEAF_NODE	187:20	187:20	4	;
EXPR_STATEMENT	188:1	188:23	3	Cb = CLAMP ( Cb , 0 , 255 ) ;
EXPR	188:1	188:1	4	Cb = CLAMP ( Cb , 0 , 255 )
ASSIGN	188:1	188:6	5	Cb = CLAMP ( Cb , 0 , 255 )
LVAL	188:1	188:1	6	Cb
FIELD	188:1	188:1	7	Cb
LEAF_NODE	188:1	188:1	8	Cb
ASSIGN_OP	188:4	188:4	6	=
LEAF_NODE	188:4	188:4	7	=
RVAL	188:6	188:6	6	CLAMP ( Cb , 0 , 255 )
FUNCTION_CALL	188:6	188:22	7	CLAMP ( Cb , 0 , 255 )
CALLEE	188:6	188:6	8	CLAMP
LEAF_NODE	188:6	188:6	9	CLAMP
LEAF_NODE	188:11	188:11	8	(
ARGUMENT	188:12	188:12	8	Cb
FIELD	188:12	188:12	9	Cb
LEAF_NODE	188:12	188:12	10	Cb
LEAF_NODE	188:14	188:14	8	,
ARGUMENT	188:16	188:16	8	0
FIELD	188:16	188:16	9	0
LEAF_NODE	188:16	188:16	10	0
LEAF_NODE	188:17	188:17	8	,
ARGUMENT	188:19	188:19	8	255
FIELD	188:19	188:19	9	255
LEAF_NODE	188:19	188:19	10	255
LEAF_NODE	188:22	188:22	8	)
LEAF_NODE	188:23	188:23	4	;
EXPR_STATEMENT	189:1	189:23	3	Cr = CLAMP ( Cr , 0 , 255 ) ;
EXPR	189:1	189:1	4	Cr = CLAMP ( Cr , 0 , 255 )
ASSIGN	189:1	189:6	5	Cr = CLAMP ( Cr , 0 , 255 )
LVAL	189:1	189:1	6	Cr
FIELD	189:1	189:1	7	Cr
LEAF_NODE	189:1	189:1	8	Cr
ASSIGN_OP	189:4	189:4	6	=
LEAF_NODE	189:4	189:4	7	=
RVAL	189:6	189:6	6	CLAMP ( Cr , 0 , 255 )
FUNCTION_CALL	189:6	189:22	7	CLAMP ( Cr , 0 , 255 )
CALLEE	189:6	189:6	8	CLAMP
LEAF_NODE	189:6	189:6	9	CLAMP
LEAF_NODE	189:11	189:11	8	(
ARGUMENT	189:12	189:12	8	Cr
FIELD	189:12	189:12	9	Cr
LEAF_NODE	189:12	189:12	10	Cr
LEAF_NODE	189:14	189:14	8	,
ARGUMENT	189:16	189:16	8	0
FIELD	189:16	189:16	9	0
LEAF_NODE	189:16	189:16	10	0
LEAF_NODE	189:17	189:17	8	,
ARGUMENT	189:19	189:19	8	255
FIELD	189:19	189:19	9	255
LEAF_NODE	189:19	189:19	10	255
LEAF_NODE	189:22	189:22	8	)
LEAF_NODE	189:23	189:23	4	;
EXPR_STATEMENT	191:1	191:42	3	i = ycbcr -> Y_tab [ Y ] + ycbcr -> Cr_r_tab [ Cr ] ;
EXPR	191:1	191:1	4	i = ycbcr -> Y_tab [ Y ] + ycbcr -> Cr_r_tab [ Cr ]
ASSIGN	191:1	191:5	5	i = ycbcr -> Y_tab [ Y ] + ycbcr -> Cr_r_tab [ Cr ]
LVAL	191:1	191:1	6	i
FIELD	191:1	191:1	7	i
LEAF_NODE	191:1	191:1	8	i
ASSIGN_OP	191:3	191:3	6	=
LEAF_NODE	191:3	191:3	7	=
RVAL	191:5	191:23	6	ycbcr -> Y_tab [ Y ] + ycbcr -> Cr_r_tab [ Cr ]
FIELD	191:5	191:19	7	ycbcr -> Y_tab [ Y ]
LEAF_NODE	191:5	191:5	8	ycbcr
LEAF_NODE	191:10	191:10	8	->
LEAF_NODE	191:12	191:12	8	Y_tab
LEAF_NODE	191:17	191:17	8	[
EXPR	191:18	191:18	8	Y
FIELD	191:18	191:18	9	Y
LEAF_NODE	191:18	191:18	10	Y
LEAF_NODE	191:19	191:19	8	]
LEAF_NODE	191:21	191:21	7	+
FIELD	191:23	191:41	7	ycbcr -> Cr_r_tab [ Cr ]
LEAF_NODE	191:23	191:23	8	ycbcr
LEAF_NODE	191:28	191:28	8	->
LEAF_NODE	191:30	191:30	8	Cr_r_tab
LEAF_NODE	191:38	191:38	8	[
EXPR	191:39	191:39	8	Cr
FIELD	191:39	191:39	9	Cr
LEAF_NODE	191:39	191:39	10	Cr
LEAF_NODE	191:41	191:41	8	]
LEAF_NODE	191:42	191:42	4	;
EXPR_STATEMENT	192:1	192:22	3	* r = CLAMP ( i , 0 , 255 ) ;
EXPR	192:1	192:1	4	* r = CLAMP ( i , 0 , 255 )
ASSIGN	192:1	192:6	5	* r = CLAMP ( i , 0 , 255 )
LVAL	192:1	192:1	6	* r
UNARY_EXPR	192:1	192:2	7	* r
UNARY_OPERATOR	192:1	192:1	8	*
LEAF_NODE	192:1	192:1	9	*
FIELD	192:2	192:2	8	r
LEAF_NODE	192:2	192:2	9	r
ASSIGN_OP	192:4	192:4	6	=
LEAF_NODE	192:4	192:4	7	=
RVAL	192:6	192:6	6	CLAMP ( i , 0 , 255 )
FUNCTION_CALL	192:6	192:21	7	CLAMP ( i , 0 , 255 )
CALLEE	192:6	192:6	8	CLAMP
LEAF_NODE	192:6	192:6	9	CLAMP
LEAF_NODE	192:11	192:11	8	(
ARGUMENT	192:12	192:12	8	i
FIELD	192:12	192:12	9	i
LEAF_NODE	192:12	192:12	10	i
LEAF_NODE	192:13	192:13	8	,
ARGUMENT	192:15	192:15	8	0
FIELD	192:15	192:15	9	0
LEAF_NODE	192:15	192:15	10	0
LEAF_NODE	192:16	192:16	8	,
ARGUMENT	192:18	192:18	8	255
FIELD	192:18	192:18	9	255
LEAF_NODE	192:18	192:18	10	255
LEAF_NODE	192:21	192:21	8	)
LEAF_NODE	192:22	192:22	4	;
EXPR_STATEMENT	193:1	194:66	3	i = ycbcr -> Y_tab [ Y ] + ( int ) ( ( ycbcr -> Cb_g_tab [ Cb ] + ycbcr -> Cr_g_tab [ Cr ] ) >> SHIFT ) ;
EXPR	193:1	193:1	4	i = ycbcr -> Y_tab [ Y ] + ( int ) ( ( ycbcr -> Cb_g_tab [ Cb ] + ycbcr -> Cr_g_tab [ Cr ] ) >> SHIFT )
ASSIGN	193:1	193:5	5	i = ycbcr -> Y_tab [ Y ] + ( int ) ( ( ycbcr -> Cb_g_tab [ Cb ] + ycbcr -> Cr_g_tab [ Cr ] ) >> SHIFT )
LVAL	193:1	193:1	6	i
FIELD	193:1	193:1	7	i
LEAF_NODE	193:1	193:1	8	i
ASSIGN_OP	193:3	193:3	6	=
LEAF_NODE	193:3	193:3	7	=
RVAL	193:5	194:65	6	ycbcr -> Y_tab [ Y ] + ( int ) ( ( ycbcr -> Cb_g_tab [ Cb ] + ycbcr -> Cr_g_tab [ Cr ] ) >> SHIFT )
FIELD	193:5	193:19	7	ycbcr -> Y_tab [ Y ]
LEAF_NODE	193:5	193:5	8	ycbcr
LEAF_NODE	193:10	193:10	8	->
LEAF_NODE	193:12	193:12	8	Y_tab
LEAF_NODE	193:17	193:17	8	[
EXPR	193:18	193:18	8	Y
FIELD	193:18	193:18	9	Y
LEAF_NODE	193:18	193:18	10	Y
LEAF_NODE	193:19	193:19	8	]
LEAF_NODE	194:5	194:5	7	+
LEAF_NODE	194:7	194:7	7	(
TYPE_NAME	194:8	194:8	7	int
LEAF_NODE	194:8	194:8	8	int
LEAF_NODE	194:11	194:11	7	)
LEAF_NODE	194:12	194:12	7	(
LEAF_NODE	194:13	194:13	7	(
FIELD	194:14	194:32	7	ycbcr -> Cb_g_tab [ Cb ]
LEAF_NODE	194:14	194:14	8	ycbcr
LEAF_NODE	194:19	194:19	8	->
LEAF_NODE	194:21	194:21	8	Cb_g_tab
LEAF_NODE	194:29	194:29	8	[
EXPR	194:30	194:30	8	Cb
FIELD	194:30	194:30	9	Cb
LEAF_NODE	194:30	194:30	10	Cb
LEAF_NODE	194:32	194:32	8	]
LEAF_NODE	194:34	194:34	7	+
FIELD	194:36	194:54	7	ycbcr -> Cr_g_tab [ Cr ]
LEAF_NODE	194:36	194:36	8	ycbcr
LEAF_NODE	194:41	194:41	8	->
LEAF_NODE	194:43	194:43	8	Cr_g_tab
LEAF_NODE	194:51	194:51	8	[
EXPR	194:52	194:52	8	Cr
FIELD	194:52	194:52	9	Cr
LEAF_NODE	194:52	194:52	10	Cr
LEAF_NODE	194:54	194:54	8	]
LEAF_NODE	194:55	194:55	7	)
LEAF_NODE	194:57	194:57	7	>>
FIELD	194:60	194:60	7	SHIFT
LEAF_NODE	194:60	194:60	8	SHIFT
LEAF_NODE	194:65	194:65	7	)
LEAF_NODE	194:66	194:66	4	;
EXPR_STATEMENT	195:1	195:22	3	* g = CLAMP ( i , 0 , 255 ) ;
EXPR	195:1	195:1	4	* g = CLAMP ( i , 0 , 255 )
ASSIGN	195:1	195:6	5	* g = CLAMP ( i , 0 , 255 )
LVAL	195:1	195:1	6	* g
UNARY_EXPR	195:1	195:2	7	* g
UNARY_OPERATOR	195:1	195:1	8	*
LEAF_NODE	195:1	195:1	9	*
FIELD	195:2	195:2	8	g
LEAF_NODE	195:2	195:2	9	g
ASSIGN_OP	195:4	195:4	6	=
LEAF_NODE	195:4	195:4	7	=
RVAL	195:6	195:6	6	CLAMP ( i , 0 , 255 )
FUNCTION_CALL	195:6	195:21	7	CLAMP ( i , 0 , 255 )
CALLEE	195:6	195:6	8	CLAMP
LEAF_NODE	195:6	195:6	9	CLAMP
LEAF_NODE	195:11	195:11	8	(
ARGUMENT	195:12	195:12	8	i
FIELD	195:12	195:12	9	i
LEAF_NODE	195:12	195:12	10	i
LEAF_NODE	195:13	195:13	8	,
ARGUMENT	195:15	195:15	8	0
FIELD	195:15	195:15	9	0
LEAF_NODE	195:15	195:15	10	0
LEAF_NODE	195:16	195:16	8	,
ARGUMENT	195:18	195:18	8	255
FIELD	195:18	195:18	9	255
LEAF_NODE	195:18	195:18	10	255
LEAF_NODE	195:21	195:21	8	)
LEAF_NODE	195:22	195:22	4	;
EXPR_STATEMENT	196:1	196:42	3	i = ycbcr -> Y_tab [ Y ] + ycbcr -> Cb_b_tab [ Cb ] ;
EXPR	196:1	196:1	4	i = ycbcr -> Y_tab [ Y ] + ycbcr -> Cb_b_tab [ Cb ]
ASSIGN	196:1	196:5	5	i = ycbcr -> Y_tab [ Y ] + ycbcr -> Cb_b_tab [ Cb ]
LVAL	196:1	196:1	6	i
FIELD	196:1	196:1	7	i
LEAF_NODE	196:1	196:1	8	i
ASSIGN_OP	196:3	196:3	6	=
LEAF_NODE	196:3	196:3	7	=
RVAL	196:5	196:23	6	ycbcr -> Y_tab [ Y ] + ycbcr -> Cb_b_tab [ Cb ]
FIELD	196:5	196:19	7	ycbcr -> Y_tab [ Y ]
LEAF_NODE	196:5	196:5	8	ycbcr
LEAF_NODE	196:10	196:10	8	->
LEAF_NODE	196:12	196:12	8	Y_tab
LEAF_NODE	196:17	196:17	8	[
EXPR	196:18	196:18	8	Y
FIELD	196:18	196:18	9	Y
LEAF_NODE	196:18	196:18	10	Y
LEAF_NODE	196:19	196:19	8	]
LEAF_NODE	196:21	196:21	7	+
FIELD	196:23	196:41	7	ycbcr -> Cb_b_tab [ Cb ]
LEAF_NODE	196:23	196:23	8	ycbcr
LEAF_NODE	196:28	196:28	8	->
LEAF_NODE	196:30	196:30	8	Cb_b_tab
LEAF_NODE	196:38	196:38	8	[
EXPR	196:39	196:39	8	Cb
FIELD	196:39	196:39	9	Cb
LEAF_NODE	196:39	196:39	10	Cb
LEAF_NODE	196:41	196:41	8	]
LEAF_NODE	196:42	196:42	4	;
EXPR_STATEMENT	197:1	197:22	3	* b = CLAMP ( i , 0 , 255 ) ;
EXPR	197:1	197:1	4	* b = CLAMP ( i , 0 , 255 )
ASSIGN	197:1	197:6	5	* b = CLAMP ( i , 0 , 255 )
LVAL	197:1	197:1	6	* b
UNARY_EXPR	197:1	197:2	7	* b
UNARY_OPERATOR	197:1	197:1	8	*
LEAF_NODE	197:1	197:1	9	*
FIELD	197:2	197:2	8	b
LEAF_NODE	197:2	197:2	9	b
ASSIGN_OP	197:4	197:4	6	=
LEAF_NODE	197:4	197:4	7	=
RVAL	197:6	197:6	6	CLAMP ( i , 0 , 255 )
FUNCTION_CALL	197:6	197:21	7	CLAMP ( i , 0 , 255 )
CALLEE	197:6	197:6	8	CLAMP
LEAF_NODE	197:6	197:6	9	CLAMP
LEAF_NODE	197:11	197:11	8	(
ARGUMENT	197:12	197:12	8	i
FIELD	197:12	197:12	9	i
LEAF_NODE	197:12	197:12	10	i
LEAF_NODE	197:13	197:13	8	,
ARGUMENT	197:15	197:15	8	0
FIELD	197:15	197:15	9	0
LEAF_NODE	197:15	197:15	10	0
LEAF_NODE	197:16	197:16	8	,
ARGUMENT	197:18	197:18	8	255
FIELD	197:18	197:18	9	255
LEAF_NODE	197:18	197:18	10	255
LEAF_NODE	197:21	197:21	8	)
LEAF_NODE	197:22	197:22	4	;
LEAF_NODE	198:0	198:0	2	}
FUNCTION_DEF	202:0	215:0	1	
RETURN_TYPE	202:0	202:7	2	static float
LEAF_NODE	202:0	202:0	3	static
TYPE_NAME	202:7	202:7	3	float
LEAF_NODE	202:7	202:7	4	float
FUNCTION_NAME	202:13	202:13	2	CLAMPw
LEAF_NODE	202:13	202:13	3	CLAMPw
PARAMETER_LIST	202:19	202:51	2	( float v , float vmin , float vmax )
LEAF_NODE	202:19	202:19	3	(
PARAMETER_DECL	202:20	202:26	3	float v
TYPE	202:20	202:20	4	float
TYPE_NAME	202:20	202:20	5	float
LEAF_NODE	202:20	202:20	6	float
NAME	202:26	202:26	4	v
LEAF_NODE	202:26	202:26	5	v
LEAF_NODE	202:27	202:27	3	,
PARAMETER_DECL	202:29	202:35	3	float vmin
TYPE	202:29	202:29	4	float
TYPE_NAME	202:29	202:29	5	float
LEAF_NODE	202:29	202:29	6	float
NAME	202:35	202:35	4	vmin
LEAF_NODE	202:35	202:35	5	vmin
LEAF_NODE	202:39	202:39	3	,
PARAMETER_DECL	202:41	202:47	3	float vmax
TYPE	202:41	202:41	4	float
TYPE_NAME	202:41	202:41	5	float
LEAF_NODE	202:41	202:41	6	float
NAME	202:47	202:47	4	vmax
LEAF_NODE	202:47	202:47	5	vmax
LEAF_NODE	202:51	202:51	3	)
LEAF_NODE	203:0	203:0	2	{
STATEMENTS	204:4	214:4	2	
SELECTION	204:4	205:4	3	
KEYWORD	204:4	204:4	4	if
LEAF_NODE	204:4	204:4	5	if
LEAF_NODE	204:6	204:6	4	(
CONDITION	204:8	204:8	4	v < vmin
EXPR	204:8	204:12	5	v < vmin
FIELD	204:8	204:8	6	v
LEAF_NODE	204:8	204:8	7	v
REL_OPERATOR	204:10	204:10	6	<
LEAF_NODE	204:10	204:10	7	<
FIELD	204:12	204:12	6	vmin
LEAF_NODE	204:12	204:12	7	vmin
LEAF_NODE	204:17	204:17	4	)
STATEMENTS	205:4	208:4	4	
LEAF_NODE	205:4	205:4	5	{
STATEMENTS	207:8	207:8	5	
JUMP_STATEMENT	207:8	207:19	6	return vmin ;
KEYWORD	207:8	207:8	7	return
LEAF_NODE	207:8	207:8	8	return
DESTINATION	207:15	207:15	7	vmin
EXPR	207:15	207:15	8	vmin
FIELD	207:15	207:15	9	vmin
LEAF_NODE	207:15	207:15	10	vmin
LEAF_NODE	207:19	207:19	7	;
LEAF_NODE	208:4	208:4	5	}
SELECTION	209:4	210:4	3	
KEYWORD	209:4	209:4	4	if
LEAF_NODE	209:4	209:4	5	if
LEAF_NODE	209:6	209:6	4	(
CONDITION	209:8	209:8	4	v > vmax
EXPR	209:8	209:12	5	v > vmax
FIELD	209:8	209:8	6	v
LEAF_NODE	209:8	209:8	7	v
REL_OPERATOR	209:10	209:10	6	>
LEAF_NODE	209:10	209:10	7	>
FIELD	209:12	209:12	6	vmax
LEAF_NODE	209:12	209:12	7	vmax
LEAF_NODE	209:17	209:17	4	)
STATEMENTS	210:4	213:4	4	
LEAF_NODE	210:4	210:4	5	{
STATEMENTS	212:8	212:8	5	
JUMP_STATEMENT	212:8	212:19	6	return vmax ;
KEYWORD	212:8	212:8	7	return
LEAF_NODE	212:8	212:8	8	return
DESTINATION	212:15	212:15	7	vmax
EXPR	212:15	212:15	8	vmax
FIELD	212:15	212:15	9	vmax
LEAF_NODE	212:15	212:15	10	vmax
LEAF_NODE	212:19	212:19	7	;
LEAF_NODE	213:4	213:4	5	}
JUMP_STATEMENT	214:4	214:12	3	return v ;
KEYWORD	214:4	214:4	4	return
LEAF_NODE	214:4	214:4	5	return
DESTINATION	214:11	214:11	4	v
EXPR	214:11	214:11	5	v
FIELD	214:11	214:11	6	v
LEAF_NODE	214:11	214:11	7	v
LEAF_NODE	214:12	214:12	4	;
LEAF_NODE	215:0	215:0	2	}
FUNCTION_DEF	233:0	292:0	1	
RETURN_TYPE	233:0	233:0	2	int
TYPE_NAME	233:0	233:0	3	int
LEAF_NODE	233:0	233:0	4	int
FUNCTION_NAME	234:0	234:0	2	TIFFYCbCrToRGBInit
LEAF_NODE	234:0	234:0	3	TIFFYCbCrToRGBInit
PARAMETER_LIST	234:18	234:75	2	( TIFFYCbCrToRGB * ycbcr , float * luma , float * refBlackWhite )
LEAF_NODE	234:18	234:18	3	(
PARAMETER_DECL	234:19	234:35	3	TIFFYCbCrToRGB * ycbcr
TYPE	234:19	234:33	4	TIFFYCbCrToRGB *
TYPE_NAME	234:19	234:19	5	TIFFYCbCrToRGB
LEAF_NODE	234:19	234:19	6	TIFFYCbCrToRGB
POINTER	234:33	234:33	5	*
LEAF_NODE	234:33	234:33	6	*
NAME	234:35	234:35	4	ycbcr
LEAF_NODE	234:35	234:35	5	ycbcr
LEAF_NODE	234:40	234:40	3	,
PARAMETER_DECL	234:42	234:49	3	float * luma
TYPE	234:42	234:48	4	float *
TYPE_NAME	234:42	234:42	5	float
LEAF_NODE	234:42	234:42	6	float
POINTER	234:48	234:48	5	*
LEAF_NODE	234:48	234:48	6	*
NAME	234:49	234:49	4	luma
LEAF_NODE	234:49	234:49	5	luma
LEAF_NODE	234:53	234:53	3	,
PARAMETER_DECL	234:55	234:62	3	float * refBlackWhite
TYPE	234:55	234:61	4	float *
TYPE_NAME	234:55	234:55	5	float
LEAF_NODE	234:55	234:55	6	float
POINTER	234:61	234:61	5	*
LEAF_NODE	234:61	234:61	6	*
NAME	234:62	234:62	4	refBlackWhite
LEAF_NODE	234:62	234:62	5	refBlackWhite
LEAF_NODE	234:75	234:75	3	)
LEAF_NODE	235:0	235:0	2	{
STATEMENTS	236:4	291:4	2	
SIMPLE_DECL	236:4	236:26	3	TIFFRGBValue * clamptab ;
VAR_DECL	236:4	236:18	4	TIFFRGBValue * clamptab
TYPE	236:4	236:16	5	TIFFRGBValue *
TYPE_NAME	236:4	236:4	6	TIFFRGBValue
LEAF_NODE	236:4	236:4	7	TIFFRGBValue
POINTER	236:16	236:16	6	*
LEAF_NODE	236:16	236:16	7	*
NAME	236:18	236:18	5	clamptab
LEAF_NODE	236:18	236:18	6	clamptab
LEAF_NODE	236:26	236:26	4	;
SIMPLE_DECL	237:4	237:9	3	int i ;
VAR_DECL	237:4	237:8	4	int i
TYPE	237:4	237:4	5	int
TYPE_NAME	237:4	237:4	6	int
LEAF_NODE	237:4	237:4	7	int
NAME	237:8	237:8	5	i
LEAF_NODE	237:8	237:8	6	i
LEAF_NODE	237:9	237:9	4	;
EXPR_STATEMENT	243:4	244:71	3	clamptab = ( TIFFRGBValue * ) ( ( uint8 * ) ycbcr + TIFFroundup_32 ( sizeof ( TIFFYCbCrToRGB ) , sizeof ( long ) ) ) ;
EXPR	243:4	243:4	4	clamptab = ( TIFFRGBValue * ) ( ( uint8 * ) ycbcr + TIFFroundup_32 ( sizeof ( TIFFYCbCrToRGB ) , sizeof ( long ) ) )
ASSIGN	243:4	243:15	5	clamptab = ( TIFFRGBValue * ) ( ( uint8 * ) ycbcr + TIFFroundup_32 ( sizeof ( TIFFYCbCrToRGB ) , sizeof ( long ) ) )
LVAL	243:4	243:4	6	clamptab
FIELD	243:4	243:4	7	clamptab
LEAF_NODE	243:4	243:4	8	clamptab
ASSIGN_OP	243:13	243:13	6	=
LEAF_NODE	243:13	243:13	7	=
RVAL	243:15	244:70	6	( TIFFRGBValue * ) ( ( uint8 * ) ycbcr + TIFFroundup_32 ( sizeof ( TIFFYCbCrToRGB ) , sizeof ( long ) ) )
LEAF_NODE	243:15	243:15	7	(
TYPE_NAME	243:16	243:16	7	TIFFRGBValue
LEAF_NODE	243:16	243:16	8	TIFFRGBValue
LEAF_NODE	243:28	243:28	7	*
LEAF_NODE	243:29	243:29	7	)
LEAF_NODE	243:30	243:30	7	(
LEAF_NODE	244:1	244:1	7	(
TYPE_NAME	244:2	244:2	7	uint8
LEAF_NODE	244:2	244:2	8	uint8
LEAF_NODE	244:7	244:7	7	*
LEAF_NODE	244:8	244:8	7	)
FIELD	244:10	244:10	7	ycbcr
LEAF_NODE	244:10	244:10	8	ycbcr
LEAF_NODE	244:15	244:15	7	+
FUNCTION_CALL	244:16	244:69	7	TIFFroundup_32 ( sizeof ( TIFFYCbCrToRGB ) , sizeof ( long ) )
CALLEE	244:16	244:16	8	TIFFroundup_32
LEAF_NODE	244:16	244:16	9	TIFFroundup_32
LEAF_NODE	244:30	244:30	8	(
ARGUMENT	244:31	244:31	8	sizeof ( TIFFYCbCrToRGB )
FUNCTION_CALL	244:31	244:53	9	sizeof ( TIFFYCbCrToRGB )
CALLEE	244:31	244:31	10	sizeof
LEAF_NODE	244:31	244:31	11	sizeof
LEAF_NODE	244:38	244:38	10	(
ARGUMENT	244:39	244:39	10	TIFFYCbCrToRGB
FIELD	244:39	244:39	11	TIFFYCbCrToRGB
LEAF_NODE	244:39	244:39	12	TIFFYCbCrToRGB
LEAF_NODE	244:53	244:53	10	)
LEAF_NODE	244:54	244:54	8	,
ARGUMENT	244:56	244:56	8	sizeof ( long )
FUNCTION_CALL	244:56	244:68	9	sizeof ( long )
CALLEE	244:56	244:56	10	sizeof
LEAF_NODE	244:56	244:56	11	sizeof
LEAF_NODE	244:63	244:63	10	(
ARGUMENT	244:64	244:64	10	long
FIELD	244:64	244:64	11	long
LEAF_NODE	244:64	244:64	12	long
LEAF_NODE	244:68	244:68	10	)
LEAF_NODE	244:69	244:69	8	)
LEAF_NODE	244:70	244:70	7	)
LEAF_NODE	244:71	244:71	4	;
EXPR_STATEMENT	245:4	245:33	3	_TIFFmemset ( clamptab , 0 , 256 ) ;
EXPR	245:4	245:4	4	_TIFFmemset ( clamptab , 0 , 256 )
FUNCTION_CALL	245:4	245:32	5	_TIFFmemset ( clamptab , 0 , 256 )
CALLEE	245:4	245:4	6	_TIFFmemset
LEAF_NODE	245:4	245:4	7	_TIFFmemset
LEAF_NODE	245:15	245:15	6	(
ARGUMENT	245:16	245:16	6	clamptab
FIELD	245:16	245:16	7	clamptab
LEAF_NODE	245:16	245:16	8	clamptab
LEAF_NODE	245:24	245:24	6	,
ARGUMENT	245:26	245:26	6	0
FIELD	245:26	245:26	7	0
LEAF_NODE	245:26	245:26	8	0
LEAF_NODE	245:27	245:27	6	,
ARGUMENT	245:29	245:29	6	256
FIELD	245:29	245:29	7	256
LEAF_NODE	245:29	245:29	8	256
LEAF_NODE	245:32	245:32	6	)
LEAF_NODE	245:33	245:33	4	;
EXPR_STATEMENT	246:4	246:39	3	ycbcr -> clamptab = ( clamptab += 256 ) ;
EXPR	246:4	246:4	4	ycbcr -> clamptab = ( clamptab += 256 )
ASSIGN	246:4	246:22	5	ycbcr -> clamptab = ( clamptab += 256 )
LVAL	246:4	246:4	6	ycbcr -> clamptab
FIELD	246:4	246:11	7	ycbcr -> clamptab
LEAF_NODE	246:4	246:4	8	ycbcr
LEAF_NODE	246:9	246:9	8	->
LEAF_NODE	246:11	246:11	8	clamptab
ASSIGN_OP	246:20	246:20	6	=
LEAF_NODE	246:20	246:20	7	=
RVAL	246:22	246:38	6	( clamptab += 256 )
LEAF_NODE	246:22	246:22	7	(
ASSIGN	246:23	246:35	7	clamptab += 256
LVAL	246:23	246:23	8	clamptab
FIELD	246:23	246:23	9	clamptab
LEAF_NODE	246:23	246:23	10	clamptab
ASSIGN_OP	246:32	246:32	8	+=
LEAF_NODE	246:32	246:32	9	+=
RVAL	246:35	246:35	8	256
FIELD	246:35	246:35	9	256
LEAF_NODE	246:35	246:35	10	256
LEAF_NODE	246:38	246:38	7	)
LEAF_NODE	246:39	246:39	4	;
ITERATION	247:4	248:1	3	
KEYWORD	247:4	247:4	4	for
LEAF_NODE	247:4	247:4	5	for
LEAF_NODE	247:8	247:8	4	(
FOR_INIT	247:9	247:14	4	i = 0 ;
EXPR	247:9	247:9	5	i = 0
ASSIGN	247:9	247:13	6	i = 0
LVAL	247:9	247:9	7	i
FIELD	247:9	247:9	8	i
LEAF_NODE	247:9	247:9	9	i
ASSIGN_OP	247:11	247:11	7	=
LEAF_NODE	247:11	247:11	8	=
RVAL	247:13	247:13	7	0
FIELD	247:13	247:13	8	0
LEAF_NODE	247:13	247:13	9	0
LEAF_NODE	247:14	247:14	5	;
CONDITION	247:16	247:16	4	i < 256
EXPR	247:16	247:20	5	i < 256
FIELD	247:16	247:16	6	i
LEAF_NODE	247:16	247:16	7	i
REL_OPERATOR	247:18	247:18	6	<
LEAF_NODE	247:18	247:18	7	<
FIELD	247:20	247:20	6	256
LEAF_NODE	247:20	247:20	7	256
LEAF_NODE	247:23	247:23	4	;
FOR_EXPR	247:25	247:25	4	i ++
EXPR	247:25	247:25	5	i ++
FIELD	247:25	247:26	6	i ++
LEAF_NODE	247:25	247:25	7	i
LEAF_NODE	247:26	247:26	7	++
LEAF_NODE	247:28	247:28	4	)
STATEMENTS	248:1	248:1	4	
EXPR_STATEMENT	248:1	248:31	5	clamptab [ i ] = ( TIFFRGBValue ) i ;
EXPR	248:1	248:1	6	clamptab [ i ] = ( TIFFRGBValue ) i
ASSIGN	248:1	248:15	7	clamptab [ i ] = ( TIFFRGBValue ) i
LVAL	248:1	248:1	8	clamptab [ i ]
FIELD	248:1	248:11	9	clamptab [ i ]
LEAF_NODE	248:1	248:1	10	clamptab
LEAF_NODE	248:9	248:9	10	[
EXPR	248:10	248:10	10	i
FIELD	248:10	248:10	11	i
LEAF_NODE	248:10	248:10	12	i
LEAF_NODE	248:11	248:11	10	]
ASSIGN_OP	248:13	248:13	8	=
LEAF_NODE	248:13	248:13	9	=
RVAL	248:15	248:30	8	( TIFFRGBValue ) i
LEAF_NODE	248:15	248:15	9	(
TYPE_NAME	248:16	248:16	9	TIFFRGBValue
LEAF_NODE	248:16	248:16	10	TIFFRGBValue
LEAF_NODE	248:28	248:28	9	)
FIELD	248:30	248:30	9	i
LEAF_NODE	248:30	248:30	10	i
LEAF_NODE	248:31	248:31	6	;
EXPR_STATEMENT	249:4	249:41	3	_TIFFmemset ( clamptab + 256 , 255 , 2 * 256 ) ;
EXPR	249:4	249:4	4	_TIFFmemset ( clamptab + 256 , 255 , 2 * 256 )
FUNCTION_CALL	249:4	249:40	5	_TIFFmemset ( clamptab + 256 , 255 , 2 * 256 )
CALLEE	249:4	249:4	6	_TIFFmemset
LEAF_NODE	249:4	249:4	7	_TIFFmemset
LEAF_NODE	249:15	249:15	6	(
ARGUMENT	249:16	249:25	6	clamptab + 256
FIELD	249:16	249:16	7	clamptab
LEAF_NODE	249:16	249:16	8	clamptab
LEAF_NODE	249:24	249:24	7	+
FIELD	249:25	249:25	7	256
LEAF_NODE	249:25	249:25	8	256
LEAF_NODE	249:28	249:28	6	,
ARGUMENT	249:30	249:30	6	255
FIELD	249:30	249:30	7	255
LEAF_NODE	249:30	249:30	8	255
LEAF_NODE	249:33	249:33	6	,
ARGUMENT	249:35	249:37	6	2 * 256
FIELD	249:35	249:35	7	2
LEAF_NODE	249:35	249:35	8	2
LEAF_NODE	249:36	249:36	7	*
FIELD	249:37	249:37	7	256
LEAF_NODE	249:37	249:37	8	256
LEAF_NODE	249:40	249:40	6	)
LEAF_NODE	249:41	249:41	4	;
EXPR_STATEMENT	250:4	250:47	3	ycbcr -> Cr_r_tab = ( int * ) ( clamptab + 3 * 256 ) ;
EXPR	250:4	250:4	4	ycbcr -> Cr_r_tab = ( int * ) ( clamptab + 3 * 256 )
ASSIGN	250:4	250:22	5	ycbcr -> Cr_r_tab = ( int * ) ( clamptab + 3 * 256 )
LVAL	250:4	250:4	6	ycbcr -> Cr_r_tab
FIELD	250:4	250:11	7	ycbcr -> Cr_r_tab
LEAF_NODE	250:4	250:4	8	ycbcr
LEAF_NODE	250:9	250:9	8	->
LEAF_NODE	250:11	250:11	8	Cr_r_tab
ASSIGN_OP	250:20	250:20	6	=
LEAF_NODE	250:20	250:20	7	=
RVAL	250:22	250:46	6	( int * ) ( clamptab + 3 * 256 )
LEAF_NODE	250:22	250:22	7	(
TYPE_NAME	250:23	250:23	7	int
LEAF_NODE	250:23	250:23	8	int
LEAF_NODE	250:26	250:26	7	*
LEAF_NODE	250:27	250:27	7	)
LEAF_NODE	250:29	250:29	7	(
FIELD	250:30	250:30	7	clamptab
LEAF_NODE	250:30	250:30	8	clamptab
LEAF_NODE	250:39	250:39	7	+
FIELD	250:41	250:41	7	3
LEAF_NODE	250:41	250:41	8	3
LEAF_NODE	250:42	250:42	7	*
FIELD	250:43	250:43	7	256
LEAF_NODE	250:43	250:43	8	256
LEAF_NODE	250:46	250:46	7	)
LEAF_NODE	250:47	250:47	4	;
EXPR_STATEMENT	251:4	251:43	3	ycbcr -> Cb_b_tab = ycbcr -> Cr_r_tab + 256 ;
EXPR	251:4	251:4	4	ycbcr -> Cb_b_tab = ycbcr -> Cr_r_tab + 256
ASSIGN	251:4	251:22	5	ycbcr -> Cb_b_tab = ycbcr -> Cr_r_tab + 256
LVAL	251:4	251:4	6	ycbcr -> Cb_b_tab
FIELD	251:4	251:11	7	ycbcr -> Cb_b_tab
LEAF_NODE	251:4	251:4	8	ycbcr
LEAF_NODE	251:9	251:9	8	->
LEAF_NODE	251:11	251:11	8	Cb_b_tab
ASSIGN_OP	251:20	251:20	6	=
LEAF_NODE	251:20	251:20	7	=
RVAL	251:22	251:40	6	ycbcr -> Cr_r_tab + 256
FIELD	251:22	251:29	7	ycbcr -> Cr_r_tab
LEAF_NODE	251:22	251:22	8	ycbcr
LEAF_NODE	251:27	251:27	8	->
LEAF_NODE	251:29	251:29	8	Cr_r_tab
LEAF_NODE	251:38	251:38	7	+
FIELD	251:40	251:40	7	256
LEAF_NODE	251:40	251:40	8	256
LEAF_NODE	251:43	251:43	4	;
EXPR_STATEMENT	252:4	252:54	3	ycbcr -> Cr_g_tab = ( int32 * ) ( ycbcr -> Cb_b_tab + 256 ) ;
EXPR	252:4	252:4	4	ycbcr -> Cr_g_tab = ( int32 * ) ( ycbcr -> Cb_b_tab + 256 )
ASSIGN	252:4	252:22	5	ycbcr -> Cr_g_tab = ( int32 * ) ( ycbcr -> Cb_b_tab + 256 )
LVAL	252:4	252:4	6	ycbcr -> Cr_g_tab
FIELD	252:4	252:11	7	ycbcr -> Cr_g_tab
LEAF_NODE	252:4	252:4	8	ycbcr
LEAF_NODE	252:9	252:9	8	->
LEAF_NODE	252:11	252:11	8	Cr_g_tab
ASSIGN_OP	252:20	252:20	6	=
LEAF_NODE	252:20	252:20	7	=
RVAL	252:22	252:53	6	( int32 * ) ( ycbcr -> Cb_b_tab + 256 )
LEAF_NODE	252:22	252:22	7	(
TYPE_NAME	252:23	252:23	7	int32
LEAF_NODE	252:23	252:23	8	int32
LEAF_NODE	252:28	252:28	7	*
LEAF_NODE	252:29	252:29	7	)
LEAF_NODE	252:31	252:31	7	(
FIELD	252:32	252:39	7	ycbcr -> Cb_b_tab
LEAF_NODE	252:32	252:32	8	ycbcr
LEAF_NODE	252:37	252:37	8	->
LEAF_NODE	252:39	252:39	8	Cb_b_tab
LEAF_NODE	252:48	252:48	7	+
FIELD	252:50	252:50	7	256
LEAF_NODE	252:50	252:50	8	256
LEAF_NODE	252:53	252:53	7	)
LEAF_NODE	252:54	252:54	4	;
EXPR_STATEMENT	253:4	253:43	3	ycbcr -> Cb_g_tab = ycbcr -> Cr_g_tab + 256 ;
EXPR	253:4	253:4	4	ycbcr -> Cb_g_tab = ycbcr -> Cr_g_tab + 256
ASSIGN	253:4	253:22	5	ycbcr -> Cb_g_tab = ycbcr -> Cr_g_tab + 256
LVAL	253:4	253:4	6	ycbcr -> Cb_g_tab
FIELD	253:4	253:11	7	ycbcr -> Cb_g_tab
LEAF_NODE	253:4	253:4	8	ycbcr
LEAF_NODE	253:9	253:9	8	->
LEAF_NODE	253:11	253:11	8	Cb_g_tab
ASSIGN_OP	253:20	253:20	6	=
LEAF_NODE	253:20	253:20	7	=
RVAL	253:22	253:40	6	ycbcr -> Cr_g_tab + 256
FIELD	253:22	253:29	7	ycbcr -> Cr_g_tab
LEAF_NODE	253:22	253:22	8	ycbcr
LEAF_NODE	253:27	253:27	8	->
LEAF_NODE	253:29	253:29	8	Cr_g_tab
LEAF_NODE	253:38	253:38	7	+
FIELD	253:40	253:40	7	256
LEAF_NODE	253:40	253:40	8	256
LEAF_NODE	253:43	253:43	4	;
EXPR_STATEMENT	254:4	254:40	3	ycbcr -> Y_tab = ycbcr -> Cb_g_tab + 256 ;
EXPR	254:4	254:4	4	ycbcr -> Y_tab = ycbcr -> Cb_g_tab + 256
ASSIGN	254:4	254:19	5	ycbcr -> Y_tab = ycbcr -> Cb_g_tab + 256
LVAL	254:4	254:4	6	ycbcr -> Y_tab
FIELD	254:4	254:11	7	ycbcr -> Y_tab
LEAF_NODE	254:4	254:4	8	ycbcr
LEAF_NODE	254:9	254:9	8	->
LEAF_NODE	254:11	254:11	8	Y_tab
ASSIGN_OP	254:17	254:17	6	=
LEAF_NODE	254:17	254:17	7	=
RVAL	254:19	254:37	6	ycbcr -> Cb_g_tab + 256
FIELD	254:19	254:26	7	ycbcr -> Cb_g_tab
LEAF_NODE	254:19	254:19	8	ycbcr
LEAF_NODE	254:24	254:24	8	->
LEAF_NODE	254:26	254:26	8	Cb_g_tab
LEAF_NODE	254:35	254:35	7	+
FIELD	254:37	254:37	7	256
LEAF_NODE	254:37	254:37	8	256
LEAF_NODE	254:40	254:40	4	;
LEAF_NODE	256:4	256:4	3	{
STATEMENTS	256:6	273:6	3	
SIMPLE_DECL	256:6	256:28	4	float f1 ; f1 = 2 - 2 * LumaRed ;
VAR_DECL	256:6	256:12	5	float f1 ; f1 = 2 - 2 * LumaRed
TYPE	256:6	256:6	6	float
TYPE_NAME	256:6	256:6	7	float
LEAF_NODE	256:6	256:6	8	float
NAME	256:12	256:12	6	f1
LEAF_NODE	256:12	256:12	7	f1
LEAF_NODE	0:0	0:0	6	;
INIT	256:12	256:12	6	f1 = 2 - 2 * LumaRed
ASSIGN	256:12	256:17	7	f1 = 2 - 2 * LumaRed
LVAL	256:12	256:12	8	f1
NAME	256:12	256:12	9	f1
LEAF_NODE	256:12	256:12	10	f1
ASSIGN_OP	256:15	256:15	8	=
LEAF_NODE	256:15	256:15	9	=
RVAL	256:17	256:21	8	2 - 2 * LumaRed
FIELD	256:17	256:17	9	2
LEAF_NODE	256:17	256:17	10	2
LEAF_NODE	256:18	256:18	9	-
FIELD	256:19	256:19	9	2
LEAF_NODE	256:19	256:19	10	2
LEAF_NODE	256:20	256:20	9	*
FIELD	256:21	256:21	9	LumaRed
LEAF_NODE	256:21	256:21	10	LumaRed
LEAF_NODE	256:28	256:28	5	;
SIMPLE_DECL	256:31	256:66	4	int32 D1 ; D1 = FIX ( CLAMP ( f1 , 0.0F , 2.0F ) ) ;
VAR_DECL	256:31	256:37	5	int32 D1 ; D1 = FIX ( CLAMP ( f1 , 0.0F , 2.0F ) )
TYPE	256:31	256:31	6	int32
TYPE_NAME	256:31	256:31	7	int32
LEAF_NODE	256:31	256:31	8	int32
NAME	256:37	256:37	6	D1
LEAF_NODE	256:37	256:37	7	D1
LEAF_NODE	0:0	0:0	6	;
INIT	256:37	256:37	6	D1 = FIX ( CLAMP ( f1 , 0.0F , 2.0F ) )
ASSIGN	256:37	256:42	7	D1 = FIX ( CLAMP ( f1 , 0.0F , 2.0F ) )
LVAL	256:37	256:37	8	D1
NAME	256:37	256:37	9	D1
LEAF_NODE	256:37	256:37	10	D1
ASSIGN_OP	256:40	256:40	8	=
LEAF_NODE	256:40	256:40	9	=
RVAL	256:42	256:42	8	FIX ( CLAMP ( f1 , 0.0F , 2.0F ) )
FUNCTION_CALL	256:42	256:65	9	FIX ( CLAMP ( f1 , 0.0F , 2.0F ) )
CALLEE	256:42	256:42	10	FIX
LEAF_NODE	256:42	256:42	11	FIX
LEAF_NODE	256:45	256:45	10	(
ARGUMENT	256:46	256:46	10	CLAMP ( f1 , 0.0F , 2.0F )
FUNCTION_CALL	256:46	256:64	11	CLAMP ( f1 , 0.0F , 2.0F )
CALLEE	256:46	256:46	12	CLAMP
LEAF_NODE	256:46	256:46	13	CLAMP
LEAF_NODE	256:51	256:51	12	(
ARGUMENT	256:52	256:52	12	f1
FIELD	256:52	256:52	13	f1
LEAF_NODE	256:52	256:52	14	f1
LEAF_NODE	256:54	256:54	12	,
ARGUMENT	256:55	256:55	12	0.0F
FIELD	256:55	256:55	13	0.0F
LEAF_NODE	256:55	256:55	14	0.0F
LEAF_NODE	256:59	256:59	12	,
ARGUMENT	256:60	256:60	12	2.0F
FIELD	256:60	256:60	13	2.0F
LEAF_NODE	256:60	256:60	14	2.0F
LEAF_NODE	256:64	256:64	12	)
LEAF_NODE	256:65	256:65	10	)
LEAF_NODE	256:66	256:66	5	;
LEAF_NODE	257:6	257:6	4	float
LEAF_NODE	257:12	257:12	4	f2
LEAF_NODE	257:15	257:15	4	=
LEAF_NODE	257:17	257:17	4	LumaRed
EXPR_STATEMENT	257:24	257:37	4	* f1 / LumaGreen ;
EXPR	257:24	257:28	5	* f1 / LumaGreen
UNARY_EXPR	257:24	257:25	6	* f1
UNARY_OPERATOR	257:24	257:24	7	*
LEAF_NODE	257:24	257:24	8	*
FIELD	257:25	257:25	7	f1
LEAF_NODE	257:25	257:25	8	f1
LEAF_NODE	257:27	257:27	6	/
FIELD	257:28	257:28	6	LumaGreen
LEAF_NODE	257:28	257:28	7	LumaGreen
LEAF_NODE	257:37	257:37	5	;
SIMPLE_DECL	257:39	257:75	4	int32 D2 ; D2 = - FIX ( CLAMP ( f2 , 0.0F , 2.0F ) ) ;
VAR_DECL	257:39	257:45	5	int32 D2 ; D2 = - FIX ( CLAMP ( f2 , 0.0F , 2.0F ) )
TYPE	257:39	257:39	6	int32
TYPE_NAME	257:39	257:39	7	int32
LEAF_NODE	257:39	257:39	8	int32
NAME	257:45	257:45	6	D2
LEAF_NODE	257:45	257:45	7	D2
LEAF_NODE	0:0	0:0	6	;
INIT	257:45	257:45	6	D2 = - FIX ( CLAMP ( f2 , 0.0F , 2.0F ) )
ASSIGN	257:45	257:50	7	D2 = - FIX ( CLAMP ( f2 , 0.0F , 2.0F ) )
LVAL	257:45	257:45	8	D2
NAME	257:45	257:45	9	D2
LEAF_NODE	257:45	257:45	10	D2
ASSIGN_OP	257:48	257:48	8	=
LEAF_NODE	257:48	257:48	9	=
RVAL	257:50	257:50	8	- FIX ( CLAMP ( f2 , 0.0F , 2.0F ) )
UNARY_EXPR	257:50	257:51	9	- FIX ( CLAMP ( f2 , 0.0F , 2.0F ) )
UNARY_OPERATOR	257:50	257:50	10	-
LEAF_NODE	257:50	257:50	11	-
FUNCTION_CALL	257:51	257:74	10	FIX ( CLAMP ( f2 , 0.0F , 2.0F ) )
CALLEE	257:51	257:51	11	FIX
LEAF_NODE	257:51	257:51	12	FIX
LEAF_NODE	257:54	257:54	11	(
ARGUMENT	257:55	257:55	11	CLAMP ( f2 , 0.0F , 2.0F )
FUNCTION_CALL	257:55	257:73	12	CLAMP ( f2 , 0.0F , 2.0F )
CALLEE	257:55	257:55	13	CLAMP
LEAF_NODE	257:55	257:55	14	CLAMP
LEAF_NODE	257:60	257:60	13	(
ARGUMENT	257:61	257:61	13	f2
FIELD	257:61	257:61	14	f2
LEAF_NODE	257:61	257:61	15	f2
LEAF_NODE	257:63	257:63	13	,
ARGUMENT	257:64	257:64	13	0.0F
FIELD	257:64	257:64	14	0.0F
LEAF_NODE	257:64	257:64	15	0.0F
LEAF_NODE	257:68	257:68	13	,
ARGUMENT	257:69	257:69	13	2.0F
FIELD	257:69	257:69	14	2.0F
LEAF_NODE	257:69	257:69	15	2.0F
LEAF_NODE	257:73	257:73	13	)
LEAF_NODE	257:74	257:74	11	)
LEAF_NODE	257:75	257:75	5	;
SIMPLE_DECL	258:6	258:29	4	float f3 ; f3 = 2 - 2 * LumaBlue ;
VAR_DECL	258:6	258:12	5	float f3 ; f3 = 2 - 2 * LumaBlue
TYPE	258:6	258:6	6	float
TYPE_NAME	258:6	258:6	7	float
LEAF_NODE	258:6	258:6	8	float
NAME	258:12	258:12	6	f3
LEAF_NODE	258:12	258:12	7	f3
LEAF_NODE	0:0	0:0	6	;
INIT	258:12	258:12	6	f3 = 2 - 2 * LumaBlue
ASSIGN	258:12	258:17	7	f3 = 2 - 2 * LumaBlue
LVAL	258:12	258:12	8	f3
NAME	258:12	258:12	9	f3
LEAF_NODE	258:12	258:12	10	f3
ASSIGN_OP	258:15	258:15	8	=
LEAF_NODE	258:15	258:15	9	=
RVAL	258:17	258:21	8	2 - 2 * LumaBlue
FIELD	258:17	258:17	9	2
LEAF_NODE	258:17	258:17	10	2
LEAF_NODE	258:18	258:18	9	-
FIELD	258:19	258:19	9	2
LEAF_NODE	258:19	258:19	10	2
LEAF_NODE	258:20	258:20	9	*
FIELD	258:21	258:21	9	LumaBlue
LEAF_NODE	258:21	258:21	10	LumaBlue
LEAF_NODE	258:29	258:29	5	;
SIMPLE_DECL	258:32	258:67	4	int32 D3 ; D3 = FIX ( CLAMP ( f3 , 0.0F , 2.0F ) ) ;
VAR_DECL	258:32	258:38	5	int32 D3 ; D3 = FIX ( CLAMP ( f3 , 0.0F , 2.0F ) )
TYPE	258:32	258:32	6	int32
TYPE_NAME	258:32	258:32	7	int32
LEAF_NODE	258:32	258:32	8	int32
NAME	258:38	258:38	6	D3
LEAF_NODE	258:38	258:38	7	D3
LEAF_NODE	0:0	0:0	6	;
INIT	258:38	258:38	6	D3 = FIX ( CLAMP ( f3 , 0.0F , 2.0F ) )
ASSIGN	258:38	258:43	7	D3 = FIX ( CLAMP ( f3 , 0.0F , 2.0F ) )
LVAL	258:38	258:38	8	D3
NAME	258:38	258:38	9	D3
LEAF_NODE	258:38	258:38	10	D3
ASSIGN_OP	258:41	258:41	8	=
LEAF_NODE	258:41	258:41	9	=
RVAL	258:43	258:43	8	FIX ( CLAMP ( f3 , 0.0F , 2.0F ) )
FUNCTION_CALL	258:43	258:66	9	FIX ( CLAMP ( f3 , 0.0F , 2.0F ) )
CALLEE	258:43	258:43	10	FIX
LEAF_NODE	258:43	258:43	11	FIX
LEAF_NODE	258:46	258:46	10	(
ARGUMENT	258:47	258:47	10	CLAMP ( f3 , 0.0F , 2.0F )
FUNCTION_CALL	258:47	258:65	11	CLAMP ( f3 , 0.0F , 2.0F )
CALLEE	258:47	258:47	12	CLAMP
LEAF_NODE	258:47	258:47	13	CLAMP
LEAF_NODE	258:52	258:52	12	(
ARGUMENT	258:53	258:53	12	f3
FIELD	258:53	258:53	13	f3
LEAF_NODE	258:53	258:53	14	f3
LEAF_NODE	258:55	258:55	12	,
ARGUMENT	258:56	258:56	12	0.0F
FIELD	258:56	258:56	13	0.0F
LEAF_NODE	258:56	258:56	14	0.0F
LEAF_NODE	258:60	258:60	12	,
ARGUMENT	258:61	258:61	12	2.0F
FIELD	258:61	258:61	13	2.0F
LEAF_NODE	258:61	258:61	14	2.0F
LEAF_NODE	258:65	258:65	12	)
LEAF_NODE	258:66	258:66	10	)
LEAF_NODE	258:67	258:67	5	;
LEAF_NODE	259:6	259:6	4	float
LEAF_NODE	259:12	259:12	4	f4
LEAF_NODE	259:15	259:15	4	=
LEAF_NODE	259:17	259:17	4	LumaBlue
EXPR_STATEMENT	259:25	259:38	4	* f3 / LumaGreen ;
EXPR	259:25	259:29	5	* f3 / LumaGreen
UNARY_EXPR	259:25	259:26	6	* f3
UNARY_OPERATOR	259:25	259:25	7	*
LEAF_NODE	259:25	259:25	8	*
FIELD	259:26	259:26	7	f3
LEAF_NODE	259:26	259:26	8	f3
LEAF_NODE	259:28	259:28	6	/
FIELD	259:29	259:29	6	LumaGreen
LEAF_NODE	259:29	259:29	7	LumaGreen
LEAF_NODE	259:38	259:38	5	;
SIMPLE_DECL	259:40	259:76	4	int32 D4 ; D4 = - FIX ( CLAMP ( f4 , 0.0F , 2.0F ) ) ;
VAR_DECL	259:40	259:46	5	int32 D4 ; D4 = - FIX ( CLAMP ( f4 , 0.0F , 2.0F ) )
TYPE	259:40	259:40	6	int32
TYPE_NAME	259:40	259:40	7	int32
LEAF_NODE	259:40	259:40	8	int32
NAME	259:46	259:46	6	D4
LEAF_NODE	259:46	259:46	7	D4
LEAF_NODE	0:0	0:0	6	;
INIT	259:46	259:46	6	D4 = - FIX ( CLAMP ( f4 , 0.0F , 2.0F ) )
ASSIGN	259:46	259:51	7	D4 = - FIX ( CLAMP ( f4 , 0.0F , 2.0F ) )
LVAL	259:46	259:46	8	D4
NAME	259:46	259:46	9	D4
LEAF_NODE	259:46	259:46	10	D4
ASSIGN_OP	259:49	259:49	8	=
LEAF_NODE	259:49	259:49	9	=
RVAL	259:51	259:51	8	- FIX ( CLAMP ( f4 , 0.0F , 2.0F ) )
UNARY_EXPR	259:51	259:52	9	- FIX ( CLAMP ( f4 , 0.0F , 2.0F ) )
UNARY_OPERATOR	259:51	259:51	10	-
LEAF_NODE	259:51	259:51	11	-
FUNCTION_CALL	259:52	259:75	10	FIX ( CLAMP ( f4 , 0.0F , 2.0F ) )
CALLEE	259:52	259:52	11	FIX
LEAF_NODE	259:52	259:52	12	FIX
LEAF_NODE	259:55	259:55	11	(
ARGUMENT	259:56	259:56	11	CLAMP ( f4 , 0.0F , 2.0F )
FUNCTION_CALL	259:56	259:74	12	CLAMP ( f4 , 0.0F , 2.0F )
CALLEE	259:56	259:56	13	CLAMP
LEAF_NODE	259:56	259:56	14	CLAMP
LEAF_NODE	259:61	259:61	13	(
ARGUMENT	259:62	259:62	13	f4
FIELD	259:62	259:62	14	f4
LEAF_NODE	259:62	259:62	15	f4
LEAF_NODE	259:64	259:64	13	,
ARGUMENT	259:65	259:65	13	0.0F
FIELD	259:65	259:65	14	0.0F
LEAF_NODE	259:65	259:65	15	0.0F
LEAF_NODE	259:69	259:69	13	,
ARGUMENT	259:70	259:70	13	2.0F
FIELD	259:70	259:70	14	2.0F
LEAF_NODE	259:70	259:70	15	2.0F
LEAF_NODE	259:74	259:74	13	)
LEAF_NODE	259:75	259:75	11	)
LEAF_NODE	259:76	259:76	5	;
SIMPLE_DECL	260:6	260:11	4	int x ;
VAR_DECL	260:6	260:10	5	int x
TYPE	260:6	260:6	6	int
TYPE_NAME	260:6	260:6	7	int
LEAF_NODE	260:6	260:6	8	int
NAME	260:10	260:10	6	x
LEAF_NODE	260:10	260:10	7	x
LEAF_NODE	260:11	260:11	5	;
ITERATION	273:6	273:47	4	
KEYWORD	273:6	273:6	5	for
LEAF_NODE	273:6	273:6	6	for
LEAF_NODE	273:10	273:10	5	(
FOR_INIT	273:11	273:26	5	i = 0 , x = - 128 ;
EXPR	273:11	273:18	6	i = 0 , x = - 128
ASSIGN	273:11	273:15	7	i = 0
LVAL	273:11	273:11	8	i
FIELD	273:11	273:11	9	i
LEAF_NODE	273:11	273:11	10	i
ASSIGN_OP	273:13	273:13	8	=
LEAF_NODE	273:13	273:13	9	=
RVAL	273:15	273:15	8	0
FIELD	273:15	273:15	9	0
LEAF_NODE	273:15	273:15	10	0
LEAF_NODE	273:16	273:16	7	,
ASSIGN	273:18	273:22	7	x = - 128
LVAL	273:18	273:18	8	x
FIELD	273:18	273:18	9	x
LEAF_NODE	273:18	273:18	10	x
ASSIGN_OP	273:20	273:20	8	=
LEAF_NODE	273:20	273:20	9	=
RVAL	273:22	273:22	8	- 128
UNARY_EXPR	273:22	273:23	9	- 128
UNARY_OPERATOR	273:22	273:22	10	-
LEAF_NODE	273:22	273:22	11	-
FIELD	273:23	273:23	10	128
LEAF_NODE	273:23	273:23	11	128
LEAF_NODE	273:26	273:26	6	;
CONDITION	273:28	273:28	5	i < 256
EXPR	273:28	273:32	6	i < 256
FIELD	273:28	273:28	7	i
LEAF_NODE	273:28	273:28	8	i
REL_OPERATOR	273:30	273:30	7	<
LEAF_NODE	273:30	273:30	8	<
FIELD	273:32	273:32	7	256
LEAF_NODE	273:32	273:32	8	256
LEAF_NODE	273:35	273:35	5	;
FOR_EXPR	273:37	273:37	5	i ++ , x ++
EXPR	273:37	273:42	6	i ++ , x ++
FIELD	273:37	273:38	7	i ++
LEAF_NODE	273:37	273:37	8	i
LEAF_NODE	273:38	273:38	8	++
LEAF_NODE	273:40	273:40	7	,
FIELD	273:42	273:43	7	x ++
LEAF_NODE	273:42	273:42	8	x
LEAF_NODE	273:43	273:43	8	++
LEAF_NODE	273:45	273:45	5	)
STATEMENTS	273:47	288:6	5	
LEAF_NODE	273:47	273:47	6	{
STATEMENTS	274:5	285:5	6	
SIMPLE_DECL	274:5	276:54	7	int32 Cr ; Cr = ( int32 ) CLAMPw ( Code2V ( x , refBlackWhite [ 4 ] - 128.0F , refBlackWhite [ 5 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 ) ;
VAR_DECL	274:5	274:11	8	int32 Cr ; Cr = ( int32 ) CLAMPw ( Code2V ( x , refBlackWhite [ 4 ] - 128.0F , refBlackWhite [ 5 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 )
TYPE	274:5	274:5	9	int32
TYPE_NAME	274:5	274:5	10	int32
LEAF_NODE	274:5	274:5	11	int32
NAME	274:11	274:11	9	Cr
LEAF_NODE	274:11	274:11	10	Cr
LEAF_NODE	0:0	0:0	9	;
INIT	274:11	274:11	9	Cr = ( int32 ) CLAMPw ( Code2V ( x , refBlackWhite [ 4 ] - 128.0F , refBlackWhite [ 5 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 )
ASSIGN	274:11	274:16	10	Cr = ( int32 ) CLAMPw ( Code2V ( x , refBlackWhite [ 4 ] - 128.0F , refBlackWhite [ 5 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 )
LVAL	274:11	274:11	11	Cr
NAME	274:11	274:11	12	Cr
LEAF_NODE	274:11	274:11	13	Cr
ASSIGN_OP	274:14	274:14	11	=
LEAF_NODE	274:14	274:14	12	=
RVAL	274:16	274:23	11	( int32 ) CLAMPw ( Code2V ( x , refBlackWhite [ 4 ] - 128.0F , refBlackWhite [ 5 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 )
LEAF_NODE	274:16	274:16	12	(
TYPE_NAME	274:17	274:17	12	int32
LEAF_NODE	274:17	274:17	13	int32
LEAF_NODE	274:22	274:22	12	)
FUNCTION_CALL	274:23	276:53	12	CLAMPw ( Code2V ( x , refBlackWhite [ 4 ] - 128.0F , refBlackWhite [ 5 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 )
CALLEE	274:23	274:23	13	CLAMPw
LEAF_NODE	274:23	274:23	14	CLAMPw
LEAF_NODE	274:29	274:29	13	(
ARGUMENT	274:30	274:30	13	Code2V ( x , refBlackWhite [ 4 ] - 128.0F , refBlackWhite [ 5 ] - 128.0F , 127 )
FUNCTION_CALL	274:30	275:37	14	Code2V ( x , refBlackWhite [ 4 ] - 128.0F , refBlackWhite [ 5 ] - 128.0F , 127 )
CALLEE	274:30	274:30	15	Code2V
LEAF_NODE	274:30	274:30	16	Code2V
LEAF_NODE	274:36	274:36	15	(
ARGUMENT	274:37	274:37	15	x
FIELD	274:37	274:37	16	x
LEAF_NODE	274:37	274:37	17	x
LEAF_NODE	274:38	274:38	15	,
ARGUMENT	274:40	274:59	15	refBlackWhite [ 4 ] - 128.0F
FIELD	274:40	274:55	16	refBlackWhite [ 4 ]
LEAF_NODE	274:40	274:40	17	refBlackWhite
LEAF_NODE	274:53	274:53	17	[
EXPR	274:54	274:54	17	4
FIELD	274:54	274:54	18	4
LEAF_NODE	274:54	274:54	19	4
LEAF_NODE	274:55	274:55	17	]
LEAF_NODE	274:57	274:57	16	-
FIELD	274:59	274:59	16	128.0F
LEAF_NODE	274:59	274:59	17	128.0F
LEAF_NODE	274:65	274:65	15	,
ARGUMENT	275:7	275:26	15	refBlackWhite [ 5 ] - 128.0F
FIELD	275:7	275:22	16	refBlackWhite [ 5 ]
LEAF_NODE	275:7	275:7	17	refBlackWhite
LEAF_NODE	275:20	275:20	17	[
EXPR	275:21	275:21	17	5
FIELD	275:21	275:21	18	5
LEAF_NODE	275:21	275:21	19	5
LEAF_NODE	275:22	275:22	17	]
LEAF_NODE	275:24	275:24	16	-
FIELD	275:26	275:26	16	128.0F
LEAF_NODE	275:26	275:26	17	128.0F
LEAF_NODE	275:32	275:32	15	,
ARGUMENT	275:34	275:34	15	127
FIELD	275:34	275:34	16	127
LEAF_NODE	275:34	275:34	17	127
LEAF_NODE	275:37	275:37	15	)
LEAF_NODE	275:38	275:38	13	,
ARGUMENT	276:28	276:38	13	- 128.0F * 32
UNARY_EXPR	276:28	276:29	14	- 128.0F
UNARY_OPERATOR	276:28	276:28	15	-
LEAF_NODE	276:28	276:28	16	-
FIELD	276:29	276:29	15	128.0F
LEAF_NODE	276:29	276:29	16	128.0F
LEAF_NODE	276:36	276:36	14	*
FIELD	276:38	276:38	14	32
LEAF_NODE	276:38	276:38	15	32
LEAF_NODE	276:40	276:40	13	,
ARGUMENT	276:42	276:51	13	128.0F * 32
FIELD	276:42	276:42	14	128.0F
LEAF_NODE	276:42	276:42	15	128.0F
LEAF_NODE	276:49	276:49	14	*
FIELD	276:51	276:51	14	32
LEAF_NODE	276:51	276:51	15	32
LEAF_NODE	276:53	276:53	13	)
LEAF_NODE	276:54	276:54	8	;
SIMPLE_DECL	277:5	279:54	7	int32 Cb ; Cb = ( int32 ) CLAMPw ( Code2V ( x , refBlackWhite [ 2 ] - 128.0F , refBlackWhite [ 3 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 ) ;
VAR_DECL	277:5	277:11	8	int32 Cb ; Cb = ( int32 ) CLAMPw ( Code2V ( x , refBlackWhite [ 2 ] - 128.0F , refBlackWhite [ 3 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 )
TYPE	277:5	277:5	9	int32
TYPE_NAME	277:5	277:5	10	int32
LEAF_NODE	277:5	277:5	11	int32
NAME	277:11	277:11	9	Cb
LEAF_NODE	277:11	277:11	10	Cb
LEAF_NODE	0:0	0:0	9	;
INIT	277:11	277:11	9	Cb = ( int32 ) CLAMPw ( Code2V ( x , refBlackWhite [ 2 ] - 128.0F , refBlackWhite [ 3 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 )
ASSIGN	277:11	277:16	10	Cb = ( int32 ) CLAMPw ( Code2V ( x , refBlackWhite [ 2 ] - 128.0F , refBlackWhite [ 3 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 )
LVAL	277:11	277:11	11	Cb
NAME	277:11	277:11	12	Cb
LEAF_NODE	277:11	277:11	13	Cb
ASSIGN_OP	277:14	277:14	11	=
LEAF_NODE	277:14	277:14	12	=
RVAL	277:16	277:23	11	( int32 ) CLAMPw ( Code2V ( x , refBlackWhite [ 2 ] - 128.0F , refBlackWhite [ 3 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 )
LEAF_NODE	277:16	277:16	12	(
TYPE_NAME	277:17	277:17	12	int32
LEAF_NODE	277:17	277:17	13	int32
LEAF_NODE	277:22	277:22	12	)
FUNCTION_CALL	277:23	279:53	12	CLAMPw ( Code2V ( x , refBlackWhite [ 2 ] - 128.0F , refBlackWhite [ 3 ] - 128.0F , 127 ) , - 128.0F * 32 , 128.0F * 32 )
CALLEE	277:23	277:23	13	CLAMPw
LEAF_NODE	277:23	277:23	14	CLAMPw
LEAF_NODE	277:29	277:29	13	(
ARGUMENT	277:30	277:30	13	Code2V ( x , refBlackWhite [ 2 ] - 128.0F , refBlackWhite [ 3 ] - 128.0F , 127 )
FUNCTION_CALL	277:30	278:37	14	Code2V ( x , refBlackWhite [ 2 ] - 128.0F , refBlackWhite [ 3 ] - 128.0F , 127 )
CALLEE	277:30	277:30	15	Code2V
LEAF_NODE	277:30	277:30	16	Code2V
LEAF_NODE	277:36	277:36	15	(
ARGUMENT	277:37	277:37	15	x
FIELD	277:37	277:37	16	x
LEAF_NODE	277:37	277:37	17	x
LEAF_NODE	277:38	277:38	15	,
ARGUMENT	277:40	277:59	15	refBlackWhite [ 2 ] - 128.0F
FIELD	277:40	277:55	16	refBlackWhite [ 2 ]
LEAF_NODE	277:40	277:40	17	refBlackWhite
LEAF_NODE	277:53	277:53	17	[
EXPR	277:54	277:54	17	2
FIELD	277:54	277:54	18	2
LEAF_NODE	277:54	277:54	19	2
LEAF_NODE	277:55	277:55	17	]
LEAF_NODE	277:57	277:57	16	-
FIELD	277:59	277:59	16	128.0F
LEAF_NODE	277:59	277:59	17	128.0F
LEAF_NODE	277:65	277:65	15	,
ARGUMENT	278:7	278:26	15	refBlackWhite [ 3 ] - 128.0F
FIELD	278:7	278:22	16	refBlackWhite [ 3 ]
LEAF_NODE	278:7	278:7	17	refBlackWhite
LEAF_NODE	278:20	278:20	17	[
EXPR	278:21	278:21	17	3
FIELD	278:21	278:21	18	3
LEAF_NODE	278:21	278:21	19	3
LEAF_NODE	278:22	278:22	17	]
LEAF_NODE	278:24	278:24	16	-
FIELD	278:26	278:26	16	128.0F
LEAF_NODE	278:26	278:26	17	128.0F
LEAF_NODE	278:32	278:32	15	,
ARGUMENT	278:34	278:34	15	127
FIELD	278:34	278:34	16	127
LEAF_NODE	278:34	278:34	17	127
LEAF_NODE	278:37	278:37	15	)
LEAF_NODE	278:38	278:38	13	,
ARGUMENT	279:28	279:38	13	- 128.0F * 32
UNARY_EXPR	279:28	279:29	14	- 128.0F
UNARY_OPERATOR	279:28	279:28	15	-
LEAF_NODE	279:28	279:28	16	-
FIELD	279:29	279:29	15	128.0F
LEAF_NODE	279:29	279:29	16	128.0F
LEAF_NODE	279:36	279:36	14	*
FIELD	279:38	279:38	14	32
LEAF_NODE	279:38	279:38	15	32
LEAF_NODE	279:40	279:40	13	,
ARGUMENT	279:42	279:51	13	128.0F * 32
FIELD	279:42	279:42	14	128.0F
LEAF_NODE	279:42	279:42	15	128.0F
LEAF_NODE	279:49	279:49	14	*
FIELD	279:51	279:51	14	32
LEAF_NODE	279:51	279:51	15	32
LEAF_NODE	279:53	279:53	13	)
LEAF_NODE	279:54	279:54	8	;
EXPR_STATEMENT	281:5	281:60	7	ycbcr -> Cr_r_tab [ i ] = ( int32 ) ( ( D1 * Cr + ONE_HALF ) >> SHIFT ) ;
EXPR	281:5	281:5	8	ycbcr -> Cr_r_tab [ i ] = ( int32 ) ( ( D1 * Cr + ONE_HALF ) >> SHIFT )
ASSIGN	281:5	281:26	9	ycbcr -> Cr_r_tab [ i ] = ( int32 ) ( ( D1 * Cr + ONE_HALF ) >> SHIFT )
LVAL	281:5	281:5	10	ycbcr -> Cr_r_tab [ i ]
FIELD	281:5	281:22	11	ycbcr -> Cr_r_tab [ i ]
LEAF_NODE	281:5	281:5	12	ycbcr
LEAF_NODE	281:10	281:10	12	->
LEAF_NODE	281:12	281:12	12	Cr_r_tab
LEAF_NODE	281:20	281:20	12	[
EXPR	281:21	281:21	12	i
FIELD	281:21	281:21	13	i
LEAF_NODE	281:21	281:21	14	i
LEAF_NODE	281:22	281:22	12	]
ASSIGN_OP	281:24	281:24	10	=
LEAF_NODE	281:24	281:24	11	=
RVAL	281:26	281:59	10	( int32 ) ( ( D1 * Cr + ONE_HALF ) >> SHIFT )
LEAF_NODE	281:26	281:26	11	(
TYPE_NAME	281:27	281:27	11	int32
LEAF_NODE	281:27	281:27	12	int32
LEAF_NODE	281:32	281:32	11	)
LEAF_NODE	281:33	281:33	11	(
LEAF_NODE	281:34	281:34	11	(
FIELD	281:35	281:35	11	D1
LEAF_NODE	281:35	281:35	12	D1
LEAF_NODE	281:37	281:37	11	*
FIELD	281:38	281:38	11	Cr
LEAF_NODE	281:38	281:38	12	Cr
LEAF_NODE	281:41	281:41	11	+
FIELD	281:43	281:43	11	ONE_HALF
LEAF_NODE	281:43	281:43	12	ONE_HALF
LEAF_NODE	281:51	281:51	11	)
LEAF_NODE	281:52	281:52	11	>>
FIELD	281:54	281:54	11	SHIFT
LEAF_NODE	281:54	281:54	12	SHIFT
LEAF_NODE	281:59	281:59	11	)
LEAF_NODE	281:60	281:60	8	;
EXPR_STATEMENT	282:5	282:60	7	ycbcr -> Cb_b_tab [ i ] = ( int32 ) ( ( D3 * Cb + ONE_HALF ) >> SHIFT ) ;
EXPR	282:5	282:5	8	ycbcr -> Cb_b_tab [ i ] = ( int32 ) ( ( D3 * Cb + ONE_HALF ) >> SHIFT )
ASSIGN	282:5	282:26	9	ycbcr -> Cb_b_tab [ i ] = ( int32 ) ( ( D3 * Cb + ONE_HALF ) >> SHIFT )
LVAL	282:5	282:5	10	ycbcr -> Cb_b_tab [ i ]
FIELD	282:5	282:22	11	ycbcr -> Cb_b_tab [ i ]
LEAF_NODE	282:5	282:5	12	ycbcr
LEAF_NODE	282:10	282:10	12	->
LEAF_NODE	282:12	282:12	12	Cb_b_tab
LEAF_NODE	282:20	282:20	12	[
EXPR	282:21	282:21	12	i
FIELD	282:21	282:21	13	i
LEAF_NODE	282:21	282:21	14	i
LEAF_NODE	282:22	282:22	12	]
ASSIGN_OP	282:24	282:24	10	=
LEAF_NODE	282:24	282:24	11	=
RVAL	282:26	282:59	10	( int32 ) ( ( D3 * Cb + ONE_HALF ) >> SHIFT )
LEAF_NODE	282:26	282:26	11	(
TYPE_NAME	282:27	282:27	11	int32
LEAF_NODE	282:27	282:27	12	int32
LEAF_NODE	282:32	282:32	11	)
LEAF_NODE	282:33	282:33	11	(
LEAF_NODE	282:34	282:34	11	(
FIELD	282:35	282:35	11	D3
LEAF_NODE	282:35	282:35	12	D3
LEAF_NODE	282:37	282:37	11	*
FIELD	282:38	282:38	11	Cb
LEAF_NODE	282:38	282:38	12	Cb
LEAF_NODE	282:41	282:41	11	+
FIELD	282:43	282:43	11	ONE_HALF
LEAF_NODE	282:43	282:43	12	ONE_HALF
LEAF_NODE	282:51	282:51	11	)
LEAF_NODE	282:52	282:52	11	>>
FIELD	282:54	282:54	11	SHIFT
LEAF_NODE	282:54	282:54	12	SHIFT
LEAF_NODE	282:59	282:59	11	)
LEAF_NODE	282:60	282:60	8	;
EXPR_STATEMENT	283:5	283:31	7	ycbcr -> Cr_g_tab [ i ] = D2 * Cr ;
EXPR	283:5	283:5	8	ycbcr -> Cr_g_tab [ i ] = D2 * Cr
ASSIGN	283:5	283:26	9	ycbcr -> Cr_g_tab [ i ] = D2 * Cr
LVAL	283:5	283:5	10	ycbcr -> Cr_g_tab [ i ]
FIELD	283:5	283:22	11	ycbcr -> Cr_g_tab [ i ]
LEAF_NODE	283:5	283:5	12	ycbcr
LEAF_NODE	283:10	283:10	12	->
LEAF_NODE	283:12	283:12	12	Cr_g_tab
LEAF_NODE	283:20	283:20	12	[
EXPR	283:21	283:21	12	i
FIELD	283:21	283:21	13	i
LEAF_NODE	283:21	283:21	14	i
LEAF_NODE	283:22	283:22	12	]
ASSIGN_OP	283:24	283:24	10	=
LEAF_NODE	283:24	283:24	11	=
RVAL	283:26	283:29	10	D2 * Cr
FIELD	283:26	283:26	11	D2
LEAF_NODE	283:26	283:26	12	D2
LEAF_NODE	283:28	283:28	11	*
FIELD	283:29	283:29	11	Cr
LEAF_NODE	283:29	283:29	12	Cr
LEAF_NODE	283:31	283:31	8	;
EXPR_STATEMENT	284:5	284:42	7	ycbcr -> Cb_g_tab [ i ] = D4 * Cb + ONE_HALF ;
EXPR	284:5	284:5	8	ycbcr -> Cb_g_tab [ i ] = D4 * Cb + ONE_HALF
ASSIGN	284:5	284:26	9	ycbcr -> Cb_g_tab [ i ] = D4 * Cb + ONE_HALF
LVAL	284:5	284:5	10	ycbcr -> Cb_g_tab [ i ]
FIELD	284:5	284:22	11	ycbcr -> Cb_g_tab [ i ]
LEAF_NODE	284:5	284:5	12	ycbcr
LEAF_NODE	284:10	284:10	12	->
LEAF_NODE	284:12	284:12	12	Cb_g_tab
LEAF_NODE	284:20	284:20	12	[
EXPR	284:21	284:21	12	i
FIELD	284:21	284:21	13	i
LEAF_NODE	284:21	284:21	14	i
LEAF_NODE	284:22	284:22	12	]
ASSIGN_OP	284:24	284:24	10	=
LEAF_NODE	284:24	284:24	11	=
RVAL	284:26	284:34	10	D4 * Cb + ONE_HALF
FIELD	284:26	284:26	11	D4
LEAF_NODE	284:26	284:26	12	D4
LEAF_NODE	284:28	284:28	11	*
FIELD	284:29	284:29	11	Cb
LEAF_NODE	284:29	284:29	12	Cb
LEAF_NODE	284:32	284:32	11	+
FIELD	284:34	284:34	11	ONE_HALF
LEAF_NODE	284:34	284:34	12	ONE_HALF
LEAF_NODE	284:42	284:42	8	;
EXPR_STATEMENT	285:5	287:60	7	ycbcr -> Y_tab [ i ] = ( int32 ) CLAMPw ( Code2V ( x + 128 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 ) , - 128.0F * 32 , 128.0F * 32 ) ;
EXPR	285:5	285:5	8	ycbcr -> Y_tab [ i ] = ( int32 ) CLAMPw ( Code2V ( x + 128 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 ) , - 128.0F * 32 , 128.0F * 32 )
ASSIGN	285:5	286:6	9	ycbcr -> Y_tab [ i ] = ( int32 ) CLAMPw ( Code2V ( x + 128 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 ) , - 128.0F * 32 , 128.0F * 32 )
LVAL	285:5	285:5	10	ycbcr -> Y_tab [ i ]
FIELD	285:5	285:19	11	ycbcr -> Y_tab [ i ]
LEAF_NODE	285:5	285:5	12	ycbcr
LEAF_NODE	285:10	285:10	12	->
LEAF_NODE	285:12	285:12	12	Y_tab
LEAF_NODE	285:17	285:17	12	[
EXPR	285:18	285:18	12	i
FIELD	285:18	285:18	13	i
LEAF_NODE	285:18	285:18	14	i
LEAF_NODE	285:19	285:19	12	]
ASSIGN_OP	285:21	285:21	10	=
LEAF_NODE	285:21	285:21	11	=
RVAL	286:6	286:13	10	( int32 ) CLAMPw ( Code2V ( x + 128 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 ) , - 128.0F * 32 , 128.0F * 32 )
LEAF_NODE	286:6	286:6	11	(
TYPE_NAME	286:7	286:7	11	int32
LEAF_NODE	286:7	286:7	12	int32
LEAF_NODE	286:12	286:12	11	)
FUNCTION_CALL	286:13	287:59	11	CLAMPw ( Code2V ( x + 128 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 ) , - 128.0F * 32 , 128.0F * 32 )
CALLEE	286:13	286:13	12	CLAMPw
LEAF_NODE	286:13	286:13	13	CLAMPw
LEAF_NODE	286:19	286:19	12	(
ARGUMENT	286:20	286:20	12	Code2V ( x + 128 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
FUNCTION_CALL	286:20	286:75	13	Code2V ( x + 128 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
CALLEE	286:20	286:20	14	Code2V
LEAF_NODE	286:20	286:20	15	Code2V
LEAF_NODE	286:26	286:26	14	(
ARGUMENT	286:27	286:31	14	x + 128
FIELD	286:27	286:27	15	x
LEAF_NODE	286:27	286:27	16	x
LEAF_NODE	286:29	286:29	15	+
FIELD	286:31	286:31	15	128
LEAF_NODE	286:31	286:31	16	128
LEAF_NODE	286:34	286:34	14	,
ARGUMENT	286:36	286:36	14	refBlackWhite [ 0 ]
FIELD	286:36	286:51	15	refBlackWhite [ 0 ]
LEAF_NODE	286:36	286:36	16	refBlackWhite
LEAF_NODE	286:49	286:49	16	[
EXPR	286:50	286:50	16	0
FIELD	286:50	286:50	17	0
LEAF_NODE	286:50	286:50	18	0
LEAF_NODE	286:51	286:51	16	]
LEAF_NODE	286:52	286:52	14	,
ARGUMENT	286:54	286:54	14	refBlackWhite [ 1 ]
FIELD	286:54	286:69	15	refBlackWhite [ 1 ]
LEAF_NODE	286:54	286:54	16	refBlackWhite
LEAF_NODE	286:67	286:67	16	[
EXPR	286:68	286:68	16	1
FIELD	286:68	286:68	17	1
LEAF_NODE	286:68	286:68	18	1
LEAF_NODE	286:69	286:69	16	]
LEAF_NODE	286:70	286:70	14	,
ARGUMENT	286:72	286:72	14	255
FIELD	286:72	286:72	15	255
LEAF_NODE	286:72	286:72	16	255
LEAF_NODE	286:75	286:75	14	)
LEAF_NODE	286:76	286:76	12	,
ARGUMENT	287:34	287:44	12	- 128.0F * 32
UNARY_EXPR	287:34	287:35	13	- 128.0F
UNARY_OPERATOR	287:34	287:34	14	-
LEAF_NODE	287:34	287:34	15	-
FIELD	287:35	287:35	14	128.0F
LEAF_NODE	287:35	287:35	15	128.0F
LEAF_NODE	287:42	287:42	13	*
FIELD	287:44	287:44	13	32
LEAF_NODE	287:44	287:44	14	32
LEAF_NODE	287:46	287:46	12	,
ARGUMENT	287:48	287:57	12	128.0F * 32
FIELD	287:48	287:48	13	128.0F
LEAF_NODE	287:48	287:48	14	128.0F
LEAF_NODE	287:55	287:55	13	*
FIELD	287:57	287:57	13	32
LEAF_NODE	287:57	287:57	14	32
LEAF_NODE	287:59	287:59	12	)
LEAF_NODE	287:60	287:60	8	;
LEAF_NODE	288:6	288:6	6	}
LEAF_NODE	289:4	289:4	3	}
JUMP_STATEMENT	291:4	291:12	3	return 0 ;
KEYWORD	291:4	291:4	4	return
LEAF_NODE	291:4	291:4	5	return
DESTINATION	291:11	291:11	4	0
EXPR	291:11	291:11	5	0
FIELD	291:11	291:11	6	0
LEAF_NODE	291:11	291:11	7	0
LEAF_NODE	291:12	291:12	4	;
LEAF_NODE	292:0	292:0	2	}
