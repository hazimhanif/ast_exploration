SOURCE_FILE	178:0	2822:0	0	
FUNCTION_DEF	178:0	182:0	1	
RETURN_TYPE	178:0	178:0	2	int
TYPE_NAME	178:0	178:0	3	int
LEAF_NODE	178:0	178:0	4	int
FUNCTION_NAME	179:0	179:0	2	TIFFWriteDirectory
LEAF_NODE	179:0	179:0	3	TIFFWriteDirectory
PARAMETER_LIST	179:18	179:28	2	( TIFF * tif )
LEAF_NODE	179:18	179:18	3	(
PARAMETER_DECL	179:19	179:25	3	TIFF * tif
TYPE	179:19	179:23	4	TIFF *
TYPE_NAME	179:19	179:19	5	TIFF
LEAF_NODE	179:19	179:19	6	TIFF
POINTER	179:23	179:23	5	*
LEAF_NODE	179:23	179:23	6	*
NAME	179:25	179:25	4	tif
LEAF_NODE	179:25	179:25	5	tif
LEAF_NODE	179:28	179:28	3	)
LEAF_NODE	180:0	180:0	2	{
STATEMENTS	181:1	181:1	2	
JUMP_STATEMENT	181:1	181:49	3	return TIFFWriteDirectorySec ( tif , TRUE , TRUE , NULL ) ;
KEYWORD	181:1	181:1	4	return
LEAF_NODE	181:1	181:1	5	return
DESTINATION	181:8	181:8	4	TIFFWriteDirectorySec ( tif , TRUE , TRUE , NULL )
EXPR	181:8	181:8	5	TIFFWriteDirectorySec ( tif , TRUE , TRUE , NULL )
FUNCTION_CALL	181:8	181:48	6	TIFFWriteDirectorySec ( tif , TRUE , TRUE , NULL )
CALLEE	181:8	181:8	7	TIFFWriteDirectorySec
LEAF_NODE	181:8	181:8	8	TIFFWriteDirectorySec
LEAF_NODE	181:29	181:29	7	(
ARGUMENT	181:30	181:30	7	tif
FIELD	181:30	181:30	8	tif
LEAF_NODE	181:30	181:30	9	tif
LEAF_NODE	181:33	181:33	7	,
ARGUMENT	181:34	181:34	7	TRUE
FIELD	181:34	181:34	8	TRUE
LEAF_NODE	181:34	181:34	9	TRUE
LEAF_NODE	181:38	181:38	7	,
ARGUMENT	181:39	181:39	7	TRUE
FIELD	181:39	181:39	8	TRUE
LEAF_NODE	181:39	181:39	9	TRUE
LEAF_NODE	181:43	181:43	7	,
ARGUMENT	181:44	181:44	7	NULL
FIELD	181:44	181:44	8	NULL
LEAF_NODE	181:44	181:44	9	NULL
LEAF_NODE	181:48	181:48	7	)
LEAF_NODE	181:49	181:49	4	;
LEAF_NODE	182:0	182:0	2	}
FUNCTION_DEF	209:0	227:0	1	
RETURN_TYPE	209:0	209:0	2	int
TYPE_NAME	209:0	209:0	3	int
LEAF_NODE	209:0	209:0	4	int
FUNCTION_NAME	209:4	209:4	2	TIFFDeferStrileArrayWriting
LEAF_NODE	209:4	209:4	3	TIFFDeferStrileArrayWriting
PARAMETER_LIST	209:31	209:41	2	( TIFF * tif )
LEAF_NODE	209:31	209:31	3	(
PARAMETER_DECL	209:32	209:38	3	TIFF * tif
TYPE	209:32	209:36	4	TIFF *
TYPE_NAME	209:32	209:32	5	TIFF
LEAF_NODE	209:32	209:32	6	TIFF
POINTER	209:36	209:36	5	*
LEAF_NODE	209:36	209:36	6	*
NAME	209:38	209:38	4	tif
LEAF_NODE	209:38	209:38	5	tif
LEAF_NODE	209:41	209:41	3	)
LEAF_NODE	210:0	210:0	2	{
STATEMENTS	211:4	226:4	2	
LEAF_NODE	211:4	211:4	3	static
SIMPLE_DECL	211:11	211:62	3	const char [ ] module ; module = "TIFFDeferStrileArrayWriting" ;
VAR_DECL	211:11	211:22	4	const char [ ] module ; module = "TIFFDeferStrileArrayWriting"
TYPE	211:11	211:28	5	const char [ ]
TYPE_NAME	211:11	211:17	6	const char
LEAF_NODE	211:11	211:11	7	const
LEAF_NODE	211:17	211:17	7	char
TYPE_SUFFIX	211:28	211:29	6	[ ]
LEAF_NODE	211:28	211:28	7	[
LEAF_NODE	211:29	211:29	7	]
NAME	211:22	211:22	5	module
LEAF_NODE	211:22	211:22	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	211:22	211:22	5	module = "TIFFDeferStrileArrayWriting"
ASSIGN	211:22	211:33	6	module = "TIFFDeferStrileArrayWriting"
LVAL	211:22	211:22	7	module
NAME	211:22	211:22	8	module
LEAF_NODE	211:22	211:22	9	module
ASSIGN_OP	211:31	211:31	7	=
LEAF_NODE	211:31	211:31	8	=
RVAL	211:33	211:33	7	"TIFFDeferStrileArrayWriting"
FIELD	211:33	211:33	8	"TIFFDeferStrileArrayWriting"
LEAF_NODE	211:33	211:33	9	"TIFFDeferStrileArrayWriting"
LEAF_NODE	211:62	211:62	4	;
SELECTION	212:4	213:4	3	
KEYWORD	212:4	212:4	4	if
LEAF_NODE	212:4	212:4	5	if
LEAF_NODE	212:7	212:7	4	(
CONDITION	212:8	212:8	4	tif -> tif_mode == O_RDONLY
EXPR	212:8	212:25	5	tif -> tif_mode == O_RDONLY
FIELD	212:8	212:13	6	tif -> tif_mode
LEAF_NODE	212:8	212:8	7	tif
LEAF_NODE	212:11	212:11	7	->
LEAF_NODE	212:13	212:13	7	tif_mode
EQ_OPERATOR	212:22	212:22	6	==
LEAF_NODE	212:22	212:22	7	==
FIELD	212:25	212:25	6	O_RDONLY
LEAF_NODE	212:25	212:25	7	O_RDONLY
LEAF_NODE	212:33	212:33	4	)
STATEMENTS	213:4	217:4	4	
LEAF_NODE	213:4	213:4	5	{
STATEMENTS	214:8	216:8	5	
EXPR_STATEMENT	214:8	215:53	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "File opened in read-only mode" ) ;
EXPR	214:8	214:8	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "File opened in read-only mode" )
FUNCTION_CALL	214:8	215:52	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "File opened in read-only mode" )
CALLEE	214:8	214:8	9	TIFFErrorExt
LEAF_NODE	214:8	214:8	10	TIFFErrorExt
LEAF_NODE	214:20	214:20	9	(
ARGUMENT	214:21	214:21	9	tif -> tif_clientdata
FIELD	214:21	214:26	10	tif -> tif_clientdata
LEAF_NODE	214:21	214:21	11	tif
LEAF_NODE	214:24	214:24	11	->
LEAF_NODE	214:26	214:26	11	tif_clientdata
LEAF_NODE	214:40	214:40	9	,
ARGUMENT	214:42	214:42	9	tif -> tif_name
FIELD	214:42	214:47	10	tif -> tif_name
LEAF_NODE	214:42	214:42	11	tif
LEAF_NODE	214:45	214:45	11	->
LEAF_NODE	214:47	214:47	11	tif_name
LEAF_NODE	214:55	214:55	9	,
ARGUMENT	215:21	215:21	9	"File opened in read-only mode"
FIELD	215:21	215:21	10	"File opened in read-only mode"
LEAF_NODE	215:21	215:21	11	"File opened in read-only mode"
LEAF_NODE	215:52	215:52	9	)
LEAF_NODE	215:53	215:53	7	;
JUMP_STATEMENT	216:8	216:16	6	return 0 ;
KEYWORD	216:8	216:8	7	return
LEAF_NODE	216:8	216:8	8	return
DESTINATION	216:15	216:15	7	0
EXPR	216:15	216:15	8	0
FIELD	216:15	216:15	9	0
LEAF_NODE	216:15	216:15	10	0
LEAF_NODE	216:16	216:16	7	;
LEAF_NODE	217:4	217:4	5	}
SELECTION	218:4	219:4	3	
KEYWORD	218:4	218:4	4	if
LEAF_NODE	218:4	218:4	5	if
LEAF_NODE	218:6	218:6	4	(
CONDITION	218:8	218:8	4	tif -> tif_diroff != 0
EXPR	218:8	218:27	5	tif -> tif_diroff != 0
FIELD	218:8	218:13	6	tif -> tif_diroff
LEAF_NODE	218:8	218:8	7	tif
LEAF_NODE	218:11	218:11	7	->
LEAF_NODE	218:13	218:13	7	tif_diroff
EQ_OPERATOR	218:24	218:24	6	!=
LEAF_NODE	218:24	218:24	7	!=
FIELD	218:27	218:27	6	0
LEAF_NODE	218:27	218:27	7	0
LEAF_NODE	218:29	218:29	4	)
STATEMENTS	219:4	223:4	4	
LEAF_NODE	219:4	219:4	5	{
STATEMENTS	220:8	222:8	5	
EXPR_STATEMENT	220:8	221:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Directory has already been written" ) ;
EXPR	220:8	220:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Directory has already been written" )
FUNCTION_CALL	220:8	221:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Directory has already been written" )
CALLEE	220:8	220:8	9	TIFFErrorExt
LEAF_NODE	220:8	220:8	10	TIFFErrorExt
LEAF_NODE	220:20	220:20	9	(
ARGUMENT	220:21	220:21	9	tif -> tif_clientdata
FIELD	220:21	220:26	10	tif -> tif_clientdata
LEAF_NODE	220:21	220:21	11	tif
LEAF_NODE	220:24	220:24	11	->
LEAF_NODE	220:26	220:26	11	tif_clientdata
LEAF_NODE	220:40	220:40	9	,
ARGUMENT	220:42	220:42	9	module
FIELD	220:42	220:42	10	module
LEAF_NODE	220:42	220:42	11	module
LEAF_NODE	220:48	220:48	9	,
ARGUMENT	221:21	221:21	9	"Directory has already been written"
FIELD	221:21	221:21	10	"Directory has already been written"
LEAF_NODE	221:21	221:21	11	"Directory has already been written"
LEAF_NODE	221:57	221:57	9	)
LEAF_NODE	221:58	221:58	7	;
JUMP_STATEMENT	222:8	222:16	6	return 0 ;
KEYWORD	222:8	222:8	7	return
LEAF_NODE	222:8	222:8	8	return
DESTINATION	222:15	222:15	7	0
EXPR	222:15	222:15	8	0
FIELD	222:15	222:15	9	0
LEAF_NODE	222:15	222:15	10	0
LEAF_NODE	222:16	222:16	7	;
LEAF_NODE	223:4	223:4	5	}
EXPR_STATEMENT	225:4	225:50	3	tif -> tif_dir . td_deferstrilearraywriting = TRUE ;
EXPR	225:4	225:4	4	tif -> tif_dir . td_deferstrilearraywriting = TRUE
ASSIGN	225:4	225:46	5	tif -> tif_dir . td_deferstrilearraywriting = TRUE
LVAL	225:4	225:4	6	tif -> tif_dir . td_deferstrilearraywriting
FIELD	225:4	225:17	7	tif -> tif_dir . td_deferstrilearraywriting
LEAF_NODE	225:4	225:4	8	tif
LEAF_NODE	225:7	225:7	8	->
LEAF_NODE	225:9	225:9	8	tif_dir
LEAF_NODE	225:16	225:16	8	.
LEAF_NODE	225:17	225:17	8	td_deferstrilearraywriting
ASSIGN_OP	225:44	225:44	6	=
LEAF_NODE	225:44	225:44	7	=
RVAL	225:46	225:46	6	TRUE
FIELD	225:46	225:46	7	TRUE
LEAF_NODE	225:46	225:46	8	TRUE
LEAF_NODE	225:50	225:50	4	;
JUMP_STATEMENT	226:4	226:12	3	return 1 ;
KEYWORD	226:4	226:4	4	return
LEAF_NODE	226:4	226:4	5	return
DESTINATION	226:11	226:11	4	1
EXPR	226:11	226:11	5	1
FIELD	226:11	226:11	6	1
LEAF_NODE	226:11	226:11	7	1
LEAF_NODE	226:12	226:12	4	;
LEAF_NODE	227:0	227:0	2	}
FUNCTION_DEF	235:0	245:0	1	
RETURN_TYPE	235:0	235:0	2	int
TYPE_NAME	235:0	235:0	3	int
LEAF_NODE	235:0	235:0	4	int
FUNCTION_NAME	236:0	236:0	2	TIFFCheckpointDirectory
LEAF_NODE	236:0	236:0	3	TIFFCheckpointDirectory
PARAMETER_LIST	236:23	236:33	2	( TIFF * tif )
LEAF_NODE	236:23	236:23	3	(
PARAMETER_DECL	236:24	236:30	3	TIFF * tif
TYPE	236:24	236:28	4	TIFF *
TYPE_NAME	236:24	236:24	5	TIFF
LEAF_NODE	236:24	236:24	6	TIFF
POINTER	236:28	236:28	5	*
LEAF_NODE	236:28	236:28	6	*
NAME	236:30	236:30	4	tif
LEAF_NODE	236:30	236:30	5	tif
LEAF_NODE	236:33	236:33	3	)
LEAF_NODE	237:0	237:0	2	{
STATEMENTS	238:1	244:1	2	
SIMPLE_DECL	238:1	238:7	3	int rc ;
VAR_DECL	238:1	238:5	4	int rc
TYPE	238:1	238:1	5	int
TYPE_NAME	238:1	238:1	6	int
LEAF_NODE	238:1	238:1	7	int
NAME	238:5	238:5	5	rc
LEAF_NODE	238:5	238:5	6	rc
LEAF_NODE	238:7	238:7	4	;
SELECTION	240:1	241:5	3	
KEYWORD	240:1	240:1	4	if
LEAF_NODE	240:1	240:1	5	if
LEAF_NODE	240:4	240:4	4	(
CONDITION	240:5	240:5	4	tif -> tif_dir . td_stripoffset_p == NULL
EXPR	240:5	240:38	5	tif -> tif_dir . td_stripoffset_p == NULL
FIELD	240:5	240:18	6	tif -> tif_dir . td_stripoffset_p
LEAF_NODE	240:5	240:5	7	tif
LEAF_NODE	240:8	240:8	7	->
LEAF_NODE	240:10	240:10	7	tif_dir
LEAF_NODE	240:17	240:17	7	.
LEAF_NODE	240:18	240:18	7	td_stripoffset_p
EQ_OPERATOR	240:35	240:35	6	==
LEAF_NODE	240:35	240:35	7	==
FIELD	240:38	240:38	6	NULL
LEAF_NODE	240:38	240:38	7	NULL
LEAF_NODE	240:42	240:42	4	)
STATEMENTS	241:5	241:5	4	
EXPR_STATEMENT	241:5	241:32	5	( void ) TIFFSetupStrips ( tif ) ;
EXPR	241:5	241:12	6	( void ) TIFFSetupStrips ( tif )
LEAF_NODE	241:5	241:5	7	(
TYPE_NAME	241:6	241:6	7	void
LEAF_NODE	241:6	241:6	8	void
LEAF_NODE	241:10	241:10	7	)
FUNCTION_CALL	241:12	241:31	7	TIFFSetupStrips ( tif )
CALLEE	241:12	241:12	8	TIFFSetupStrips
LEAF_NODE	241:12	241:12	9	TIFFSetupStrips
LEAF_NODE	241:27	241:27	8	(
ARGUMENT	241:28	241:28	8	tif
FIELD	241:28	241:28	9	tif
LEAF_NODE	241:28	241:28	10	tif
LEAF_NODE	241:31	241:31	8	)
LEAF_NODE	241:32	241:32	6	;
EXPR_STATEMENT	242:1	242:48	3	rc = TIFFWriteDirectorySec ( tif , TRUE , FALSE , NULL ) ;
EXPR	242:1	242:1	4	rc = TIFFWriteDirectorySec ( tif , TRUE , FALSE , NULL )
ASSIGN	242:1	242:6	5	rc = TIFFWriteDirectorySec ( tif , TRUE , FALSE , NULL )
LVAL	242:1	242:1	6	rc
FIELD	242:1	242:1	7	rc
LEAF_NODE	242:1	242:1	8	rc
ASSIGN_OP	242:4	242:4	6	=
LEAF_NODE	242:4	242:4	7	=
RVAL	242:6	242:6	6	TIFFWriteDirectorySec ( tif , TRUE , FALSE , NULL )
FUNCTION_CALL	242:6	242:47	7	TIFFWriteDirectorySec ( tif , TRUE , FALSE , NULL )
CALLEE	242:6	242:6	8	TIFFWriteDirectorySec
LEAF_NODE	242:6	242:6	9	TIFFWriteDirectorySec
LEAF_NODE	242:27	242:27	8	(
ARGUMENT	242:28	242:28	8	tif
FIELD	242:28	242:28	9	tif
LEAF_NODE	242:28	242:28	10	tif
LEAF_NODE	242:31	242:31	8	,
ARGUMENT	242:32	242:32	8	TRUE
FIELD	242:32	242:32	9	TRUE
LEAF_NODE	242:32	242:32	10	TRUE
LEAF_NODE	242:36	242:36	8	,
ARGUMENT	242:37	242:37	8	FALSE
FIELD	242:37	242:37	9	FALSE
LEAF_NODE	242:37	242:37	10	FALSE
LEAF_NODE	242:42	242:42	8	,
ARGUMENT	242:43	242:43	8	NULL
FIELD	242:43	242:43	9	NULL
LEAF_NODE	242:43	242:43	10	NULL
LEAF_NODE	242:47	242:47	8	)
LEAF_NODE	242:48	242:48	4	;
EXPR_STATEMENT	243:1	243:63	3	( void ) TIFFSetWriteOffset ( tif , TIFFSeekFile ( tif , 0 , SEEK_END ) ) ;
EXPR	243:1	243:8	4	( void ) TIFFSetWriteOffset ( tif , TIFFSeekFile ( tif , 0 , SEEK_END ) )
LEAF_NODE	243:1	243:1	5	(
TYPE_NAME	243:2	243:2	5	void
LEAF_NODE	243:2	243:2	6	void
LEAF_NODE	243:6	243:6	5	)
FUNCTION_CALL	243:8	243:62	5	TIFFSetWriteOffset ( tif , TIFFSeekFile ( tif , 0 , SEEK_END ) )
CALLEE	243:8	243:8	6	TIFFSetWriteOffset
LEAF_NODE	243:8	243:8	7	TIFFSetWriteOffset
LEAF_NODE	243:26	243:26	6	(
ARGUMENT	243:27	243:27	6	tif
FIELD	243:27	243:27	7	tif
LEAF_NODE	243:27	243:27	8	tif
LEAF_NODE	243:30	243:30	6	,
ARGUMENT	243:32	243:32	6	TIFFSeekFile ( tif , 0 , SEEK_END )
FUNCTION_CALL	243:32	243:61	7	TIFFSeekFile ( tif , 0 , SEEK_END )
CALLEE	243:32	243:32	8	TIFFSeekFile
LEAF_NODE	243:32	243:32	9	TIFFSeekFile
LEAF_NODE	243:44	243:44	8	(
ARGUMENT	243:45	243:45	8	tif
FIELD	243:45	243:45	9	tif
LEAF_NODE	243:45	243:45	10	tif
LEAF_NODE	243:48	243:48	8	,
ARGUMENT	243:50	243:50	8	0
FIELD	243:50	243:50	9	0
LEAF_NODE	243:50	243:50	10	0
LEAF_NODE	243:51	243:51	8	,
ARGUMENT	243:53	243:53	8	SEEK_END
FIELD	243:53	243:53	9	SEEK_END
LEAF_NODE	243:53	243:53	10	SEEK_END
LEAF_NODE	243:61	243:61	8	)
LEAF_NODE	243:62	243:62	6	)
LEAF_NODE	243:63	243:63	4	;
JUMP_STATEMENT	244:1	244:10	3	return rc ;
KEYWORD	244:1	244:1	4	return
LEAF_NODE	244:1	244:1	5	return
DESTINATION	244:8	244:8	4	rc
EXPR	244:8	244:8	5	rc
FIELD	244:8	244:8	6	rc
LEAF_NODE	244:8	244:8	7	rc
LEAF_NODE	244:10	244:10	4	;
LEAF_NODE	245:0	245:0	2	}
FUNCTION_DEF	247:0	251:0	1	
RETURN_TYPE	247:0	247:0	2	int
TYPE_NAME	247:0	247:0	3	int
LEAF_NODE	247:0	247:0	4	int
FUNCTION_NAME	248:0	248:0	2	TIFFWriteCustomDirectory
LEAF_NODE	248:0	248:0	3	TIFFWriteCustomDirectory
PARAMETER_LIST	248:24	248:51	2	( TIFF * tif , uint64 * pdiroff )
LEAF_NODE	248:24	248:24	3	(
PARAMETER_DECL	248:25	248:31	3	TIFF * tif
TYPE	248:25	248:29	4	TIFF *
TYPE_NAME	248:25	248:25	5	TIFF
LEAF_NODE	248:25	248:25	6	TIFF
POINTER	248:29	248:29	5	*
LEAF_NODE	248:29	248:29	6	*
NAME	248:31	248:31	4	tif
LEAF_NODE	248:31	248:31	5	tif
LEAF_NODE	248:34	248:34	3	,
PARAMETER_DECL	248:36	248:44	3	uint64 * pdiroff
TYPE	248:36	248:42	4	uint64 *
TYPE_NAME	248:36	248:36	5	uint64
LEAF_NODE	248:36	248:36	6	uint64
POINTER	248:42	248:42	5	*
LEAF_NODE	248:42	248:42	6	*
NAME	248:44	248:44	4	pdiroff
LEAF_NODE	248:44	248:44	5	pdiroff
LEAF_NODE	248:51	248:51	3	)
LEAF_NODE	249:0	249:0	2	{
STATEMENTS	250:1	250:1	2	
JUMP_STATEMENT	250:1	250:54	3	return TIFFWriteDirectorySec ( tif , FALSE , FALSE , pdiroff ) ;
KEYWORD	250:1	250:1	4	return
LEAF_NODE	250:1	250:1	5	return
DESTINATION	250:8	250:8	4	TIFFWriteDirectorySec ( tif , FALSE , FALSE , pdiroff )
EXPR	250:8	250:8	5	TIFFWriteDirectorySec ( tif , FALSE , FALSE , pdiroff )
FUNCTION_CALL	250:8	250:53	6	TIFFWriteDirectorySec ( tif , FALSE , FALSE , pdiroff )
CALLEE	250:8	250:8	7	TIFFWriteDirectorySec
LEAF_NODE	250:8	250:8	8	TIFFWriteDirectorySec
LEAF_NODE	250:29	250:29	7	(
ARGUMENT	250:30	250:30	7	tif
FIELD	250:30	250:30	8	tif
LEAF_NODE	250:30	250:30	9	tif
LEAF_NODE	250:33	250:33	7	,
ARGUMENT	250:34	250:34	7	FALSE
FIELD	250:34	250:34	8	FALSE
LEAF_NODE	250:34	250:34	9	FALSE
LEAF_NODE	250:39	250:39	7	,
ARGUMENT	250:40	250:40	7	FALSE
FIELD	250:40	250:40	8	FALSE
LEAF_NODE	250:40	250:40	9	FALSE
LEAF_NODE	250:45	250:45	7	,
ARGUMENT	250:46	250:46	7	pdiroff
FIELD	250:46	250:46	8	pdiroff
LEAF_NODE	250:46	250:46	9	pdiroff
LEAF_NODE	250:53	250:53	7	)
LEAF_NODE	250:54	250:54	4	;
LEAF_NODE	251:0	251:0	2	}
FUNCTION_DEF	259:0	403:0	1	
RETURN_TYPE	259:0	259:0	2	int
TYPE_NAME	259:0	259:0	3	int
LEAF_NODE	259:0	259:0	4	int
FUNCTION_NAME	260:0	260:0	2	TIFFRewriteDirectory
LEAF_NODE	260:0	260:0	3	TIFFRewriteDirectory
PARAMETER_LIST	260:20	260:32	2	( TIFF * tif )
LEAF_NODE	260:20	260:20	3	(
PARAMETER_DECL	260:22	260:28	3	TIFF * tif
TYPE	260:22	260:27	4	TIFF *
TYPE_NAME	260:22	260:22	5	TIFF
LEAF_NODE	260:22	260:22	6	TIFF
POINTER	260:27	260:27	5	*
LEAF_NODE	260:27	260:27	6	*
NAME	260:28	260:28	4	tif
LEAF_NODE	260:28	260:28	5	tif
LEAF_NODE	260:32	260:32	3	)
LEAF_NODE	261:0	261:0	2	{
STATEMENTS	262:1	402:1	2	
LEAF_NODE	262:1	262:1	3	static
SIMPLE_DECL	262:8	262:52	3	const char [ ] module ; module = "TIFFRewriteDirectory" ;
VAR_DECL	262:8	262:19	4	const char [ ] module ; module = "TIFFRewriteDirectory"
TYPE	262:8	262:25	5	const char [ ]
TYPE_NAME	262:8	262:14	6	const char
LEAF_NODE	262:8	262:8	7	const
LEAF_NODE	262:14	262:14	7	char
TYPE_SUFFIX	262:25	262:26	6	[ ]
LEAF_NODE	262:25	262:25	7	[
LEAF_NODE	262:26	262:26	7	]
NAME	262:19	262:19	5	module
LEAF_NODE	262:19	262:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	262:19	262:19	5	module = "TIFFRewriteDirectory"
ASSIGN	262:19	262:30	6	module = "TIFFRewriteDirectory"
LVAL	262:19	262:19	7	module
NAME	262:19	262:19	8	module
LEAF_NODE	262:19	262:19	9	module
ASSIGN_OP	262:28	262:28	7	=
LEAF_NODE	262:28	262:28	8	=
RVAL	262:30	262:30	7	"TIFFRewriteDirectory"
FIELD	262:30	262:30	8	"TIFFRewriteDirectory"
LEAF_NODE	262:30	262:30	9	"TIFFRewriteDirectory"
LEAF_NODE	262:52	262:52	4	;
SELECTION	265:1	266:2	3	
KEYWORD	265:1	265:1	4	if
LEAF_NODE	265:1	265:1	5	if
LEAF_NODE	265:3	265:3	4	(
CONDITION	265:5	265:5	4	tif -> tif_diroff == 0
EXPR	265:5	265:24	5	tif -> tif_diroff == 0
FIELD	265:5	265:10	6	tif -> tif_diroff
LEAF_NODE	265:5	265:5	7	tif
LEAF_NODE	265:8	265:8	7	->
LEAF_NODE	265:10	265:10	7	tif_diroff
EQ_OPERATOR	265:21	265:21	6	==
LEAF_NODE	265:21	265:21	7	==
FIELD	265:24	265:24	6	0
LEAF_NODE	265:24	265:24	7	0
LEAF_NODE	265:26	265:26	4	)
STATEMENTS	266:2	266:2	4	
JUMP_STATEMENT	266:2	266:34	5	return TIFFWriteDirectory ( tif ) ;
KEYWORD	266:2	266:2	6	return
LEAF_NODE	266:2	266:2	7	return
DESTINATION	266:9	266:9	6	TIFFWriteDirectory ( tif )
EXPR	266:9	266:9	7	TIFFWriteDirectory ( tif )
FUNCTION_CALL	266:9	266:33	8	TIFFWriteDirectory ( tif )
CALLEE	266:9	266:9	9	TIFFWriteDirectory
LEAF_NODE	266:9	266:9	10	TIFFWriteDirectory
LEAF_NODE	266:27	266:27	9	(
ARGUMENT	266:29	266:29	9	tif
FIELD	266:29	266:29	10	tif
LEAF_NODE	266:29	266:29	11	tif
LEAF_NODE	266:33	266:33	9	)
LEAF_NODE	266:34	266:34	6	;
SELECTION	273:1	274:1	3	
KEYWORD	273:1	273:1	4	if
LEAF_NODE	273:1	273:1	5	if
LEAF_NODE	273:4	273:4	4	(
CONDITION	273:5	273:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	273:5	273:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	273:5	273:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	273:5	273:5	7	!
LEAF_NODE	273:5	273:5	8	!
LEAF_NODE	273:6	273:6	7	(
FIELD	273:7	273:12	7	tif -> tif_flags
LEAF_NODE	273:7	273:7	8	tif
LEAF_NODE	273:10	273:10	8	->
LEAF_NODE	273:12	273:12	8	tif_flags
LEAF_NODE	273:21	273:21	7	&
FIELD	273:22	273:22	7	TIFF_BIGTIFF
LEAF_NODE	273:22	273:22	8	TIFF_BIGTIFF
LEAF_NODE	273:34	273:34	7	)
LEAF_NODE	273:35	273:35	4	)
STATEMENTS	274:1	330:1	4	
LEAF_NODE	274:1	274:1	5	{
STATEMENTS	275:2	288:2	5	
SELECTION	275:2	276:2	6	
KEYWORD	275:2	275:2	7	if
LEAF_NODE	275:2	275:2	8	if
LEAF_NODE	275:5	275:5	7	(
CONDITION	275:6	275:6	7	tif -> tif_header . classic . tiff_diroff == tif -> tif_diroff
EXPR	275:6	275:45	8	tif -> tif_header . classic . tiff_diroff == tif -> tif_diroff
FIELD	275:6	275:30	9	tif -> tif_header . classic . tiff_diroff
LEAF_NODE	275:6	275:6	10	tif
LEAF_NODE	275:9	275:9	10	->
LEAF_NODE	275:11	275:11	10	tif_header
LEAF_NODE	275:21	275:21	10	.
LEAF_NODE	275:22	275:22	10	classic
LEAF_NODE	275:29	275:29	10	.
LEAF_NODE	275:30	275:30	10	tiff_diroff
EQ_OPERATOR	275:42	275:42	9	==
LEAF_NODE	275:42	275:42	10	==
FIELD	275:45	275:50	9	tif -> tif_diroff
LEAF_NODE	275:45	275:45	10	tif
LEAF_NODE	275:48	275:48	10	->
LEAF_NODE	275:50	275:50	10	tif_diroff
LEAF_NODE	275:60	275:60	7	)
STATEMENTS	276:2	287:2	7	
LEAF_NODE	276:2	276:2	8	{
STATEMENTS	277:3	281:3	8	
EXPR_STATEMENT	277:3	277:42	9	tif -> tif_header . classic . tiff_diroff = 0 ;
EXPR	277:3	277:3	10	tif -> tif_header . classic . tiff_diroff = 0
ASSIGN	277:3	277:41	11	tif -> tif_header . classic . tiff_diroff = 0
LVAL	277:3	277:3	12	tif -> tif_header . classic . tiff_diroff
FIELD	277:3	277:27	13	tif -> tif_header . classic . tiff_diroff
LEAF_NODE	277:3	277:3	14	tif
LEAF_NODE	277:6	277:6	14	->
LEAF_NODE	277:8	277:8	14	tif_header
LEAF_NODE	277:18	277:18	14	.
LEAF_NODE	277:19	277:19	14	classic
LEAF_NODE	277:26	277:26	14	.
LEAF_NODE	277:27	277:27	14	tiff_diroff
ASSIGN_OP	277:39	277:39	12	=
LEAF_NODE	277:39	277:39	13	=
RVAL	277:41	277:41	12	0
FIELD	277:41	277:41	13	0
LEAF_NODE	277:41	277:41	14	0
LEAF_NODE	277:42	277:42	10	;
EXPR_STATEMENT	278:3	278:22	9	tif -> tif_diroff = 0 ;
EXPR	278:3	278:3	10	tif -> tif_diroff = 0
ASSIGN	278:3	278:21	11	tif -> tif_diroff = 0
LVAL	278:3	278:3	12	tif -> tif_diroff
FIELD	278:3	278:8	13	tif -> tif_diroff
LEAF_NODE	278:3	278:3	14	tif
LEAF_NODE	278:6	278:6	14	->
LEAF_NODE	278:8	278:8	14	tif_diroff
ASSIGN_OP	278:19	278:19	12	=
LEAF_NODE	278:19	278:19	13	=
RVAL	278:21	278:21	12	0
FIELD	278:21	278:21	13	0
LEAF_NODE	278:21	278:21	14	0
LEAF_NODE	278:22	278:22	10	;
EXPR_STATEMENT	280:3	280:31	9	TIFFSeekFile ( tif , 4 , SEEK_SET ) ;
EXPR	280:3	280:3	10	TIFFSeekFile ( tif , 4 , SEEK_SET )
FUNCTION_CALL	280:3	280:30	11	TIFFSeekFile ( tif , 4 , SEEK_SET )
CALLEE	280:3	280:3	12	TIFFSeekFile
LEAF_NODE	280:3	280:3	13	TIFFSeekFile
LEAF_NODE	280:15	280:15	12	(
ARGUMENT	280:16	280:16	12	tif
FIELD	280:16	280:16	13	tif
LEAF_NODE	280:16	280:16	14	tif
LEAF_NODE	280:19	280:19	12	,
ARGUMENT	280:20	280:20	12	4
FIELD	280:20	280:20	13	4
LEAF_NODE	280:20	280:20	14	4
LEAF_NODE	280:21	280:21	12	,
ARGUMENT	280:22	280:22	12	SEEK_SET
FIELD	280:22	280:22	13	SEEK_SET
LEAF_NODE	280:22	280:22	14	SEEK_SET
LEAF_NODE	280:30	280:30	12	)
LEAF_NODE	280:31	280:31	10	;
SELECTION	281:3	282:3	9	
KEYWORD	281:3	281:3	10	if
LEAF_NODE	281:3	281:3	11	if
LEAF_NODE	281:6	281:6	10	(
CONDITION	281:7	281:7	10	! WriteOK ( tif , & ( tif -> tif_header . classic . tiff_diroff ) , 4 )
EXPR	281:7	281:7	11	! WriteOK ( tif , & ( tif -> tif_header . classic . tiff_diroff ) , 4 )
UNARY_EXPR	281:7	281:8	12	! WriteOK ( tif , & ( tif -> tif_header . classic . tiff_diroff ) , 4 )
UNARY_OPERATOR	281:7	281:7	13	!
LEAF_NODE	281:7	281:7	14	!
FUNCTION_CALL	281:8	281:61	13	WriteOK ( tif , & ( tif -> tif_header . classic . tiff_diroff ) , 4 )
CALLEE	281:8	281:8	14	WriteOK
LEAF_NODE	281:8	281:8	15	WriteOK
LEAF_NODE	281:15	281:15	14	(
ARGUMENT	281:16	281:16	14	tif
FIELD	281:16	281:16	15	tif
LEAF_NODE	281:16	281:16	16	tif
LEAF_NODE	281:19	281:19	14	,
ARGUMENT	281:21	281:21	14	& ( tif -> tif_header . classic . tiff_diroff )
UNARY_EXPR	281:21	281:58	15	& ( tif -> tif_header . classic . tiff_diroff )
UNARY_OPERATOR	281:21	281:21	16	&
LEAF_NODE	281:21	281:21	17	&
LEAF_NODE	281:22	281:22	16	(
FIELD	281:23	281:47	16	tif -> tif_header . classic . tiff_diroff
LEAF_NODE	281:23	281:23	17	tif
LEAF_NODE	281:26	281:26	17	->
LEAF_NODE	281:28	281:28	17	tif_header
LEAF_NODE	281:38	281:38	17	.
LEAF_NODE	281:39	281:39	17	classic
LEAF_NODE	281:46	281:46	17	.
LEAF_NODE	281:47	281:47	17	tiff_diroff
LEAF_NODE	281:58	281:58	16	)
LEAF_NODE	281:59	281:59	14	,
ARGUMENT	281:60	281:60	14	4
FIELD	281:60	281:60	15	4
LEAF_NODE	281:60	281:60	16	4
LEAF_NODE	281:61	281:61	14	)
LEAF_NODE	281:62	281:62	10	)
STATEMENTS	282:3	286:3	10	
LEAF_NODE	282:3	282:3	11	{
STATEMENTS	283:4	285:4	11	
EXPR_STATEMENT	283:4	284:37	12	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error updating TIFF header" ) ;
EXPR	283:4	283:4	13	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error updating TIFF header" )
FUNCTION_CALL	283:4	284:36	14	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error updating TIFF header" )
CALLEE	283:4	283:4	15	TIFFErrorExt
LEAF_NODE	283:4	283:4	16	TIFFErrorExt
LEAF_NODE	283:16	283:16	15	(
ARGUMENT	283:17	283:17	15	tif -> tif_clientdata
FIELD	283:17	283:22	16	tif -> tif_clientdata
LEAF_NODE	283:17	283:17	17	tif
LEAF_NODE	283:20	283:20	17	->
LEAF_NODE	283:22	283:22	17	tif_clientdata
LEAF_NODE	283:36	283:36	15	,
ARGUMENT	283:38	283:38	15	tif -> tif_name
FIELD	283:38	283:43	16	tif -> tif_name
LEAF_NODE	283:38	283:38	17	tif
LEAF_NODE	283:41	283:41	17	->
LEAF_NODE	283:43	283:43	17	tif_name
LEAF_NODE	283:51	283:51	15	,
ARGUMENT	284:8	284:8	15	"Error updating TIFF header"
FIELD	284:8	284:8	16	"Error updating TIFF header"
LEAF_NODE	284:8	284:8	17	"Error updating TIFF header"
LEAF_NODE	284:36	284:36	15	)
LEAF_NODE	284:37	284:37	13	;
JUMP_STATEMENT	285:4	285:14	12	return ( 0 ) ;
KEYWORD	285:4	285:4	13	return
LEAF_NODE	285:4	285:4	14	return
DESTINATION	285:11	285:11	13	( 0 )
EXPR	285:11	285:13	14	( 0 )
LEAF_NODE	285:11	285:11	15	(
FIELD	285:12	285:12	15	0
LEAF_NODE	285:12	285:12	16	0
LEAF_NODE	285:13	285:13	15	)
LEAF_NODE	285:14	285:14	13	;
LEAF_NODE	286:3	286:3	11	}
LEAF_NODE	287:2	287:2	8	}
SELECTION	288:2	289:2	6	
KEYWORD	288:2	288:2	7	else
LEAF_NODE	288:2	288:2	8	else
STATEMENTS	289:2	329:2	7	
LEAF_NODE	289:2	289:2	8	{
STATEMENTS	290:3	292:3	8	
SIMPLE_DECL	290:3	290:17	9	uint32 nextdir ;
VAR_DECL	290:3	290:10	10	uint32 nextdir
TYPE	290:3	290:3	11	uint32
TYPE_NAME	290:3	290:3	12	uint32
LEAF_NODE	290:3	290:3	13	uint32
NAME	290:10	290:10	11	nextdir
LEAF_NODE	290:10	290:10	12	nextdir
LEAF_NODE	290:17	290:17	10	;
EXPR_STATEMENT	291:3	291:48	9	nextdir = tif -> tif_header . classic . tiff_diroff ;
EXPR	291:3	291:3	10	nextdir = tif -> tif_header . classic . tiff_diroff
ASSIGN	291:3	291:13	11	nextdir = tif -> tif_header . classic . tiff_diroff
LVAL	291:3	291:3	12	nextdir
FIELD	291:3	291:3	13	nextdir
LEAF_NODE	291:3	291:3	14	nextdir
ASSIGN_OP	291:11	291:11	12	=
LEAF_NODE	291:11	291:11	13	=
RVAL	291:13	291:13	12	tif -> tif_header . classic . tiff_diroff
FIELD	291:13	291:37	13	tif -> tif_header . classic . tiff_diroff
LEAF_NODE	291:13	291:13	14	tif
LEAF_NODE	291:16	291:16	14	->
LEAF_NODE	291:18	291:18	14	tif_header
LEAF_NODE	291:28	291:28	14	.
LEAF_NODE	291:29	291:29	14	classic
LEAF_NODE	291:36	291:36	14	.
LEAF_NODE	291:37	291:37	14	tiff_diroff
LEAF_NODE	291:48	291:48	10	;
ITERATION	292:3	292:12	9	
KEYWORD	292:3	292:3	10	while
LEAF_NODE	292:3	292:3	11	while
LEAF_NODE	292:8	292:8	10	(
CONDITION	292:9	292:9	10	1
EXPR	292:9	292:9	11	1
FIELD	292:9	292:9	12	1
LEAF_NODE	292:9	292:9	13	1
LEAF_NODE	292:10	292:10	10	)
STATEMENTS	292:12	328:3	10	
LEAF_NODE	292:12	292:12	11	{
STATEMENTS	293:4	327:4	11	
SIMPLE_DECL	293:4	293:19	12	uint16 dircount ;
VAR_DECL	293:4	293:11	13	uint16 dircount
TYPE	293:4	293:4	14	uint16
TYPE_NAME	293:4	293:4	15	uint16
LEAF_NODE	293:4	293:4	16	uint16
NAME	293:11	293:11	14	dircount
LEAF_NODE	293:11	293:11	15	dircount
LEAF_NODE	293:19	293:19	13	;
SIMPLE_DECL	294:4	294:22	12	uint32 nextnextdir ;
VAR_DECL	294:4	294:11	13	uint32 nextnextdir
TYPE	294:4	294:4	14	uint32
TYPE_NAME	294:4	294:4	15	uint32
LEAF_NODE	294:4	294:4	16	uint32
NAME	294:11	294:11	14	nextnextdir
LEAF_NODE	294:11	294:11	15	nextnextdir
LEAF_NODE	294:22	294:22	13	;
SELECTION	296:4	297:36	12	
KEYWORD	296:4	296:4	13	if
LEAF_NODE	296:4	296:4	14	if
LEAF_NODE	296:7	296:7	13	(
CONDITION	296:8	296:8	13	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount , 2 )
EXPR	296:8	296:8	14	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount , 2 )
OR	296:8	297:8	15	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount , 2 )
EXPR	296:8	296:8	16	! SeekOK ( tif , nextdir )
UNARY_EXPR	296:8	296:9	17	! SeekOK ( tif , nextdir )
UNARY_OPERATOR	296:8	296:8	18	!
LEAF_NODE	296:8	296:8	19	!
FUNCTION_CALL	296:9	296:28	18	SeekOK ( tif , nextdir )
CALLEE	296:9	296:9	19	SeekOK
LEAF_NODE	296:9	296:9	20	SeekOK
LEAF_NODE	296:15	296:15	19	(
ARGUMENT	296:16	296:16	19	tif
FIELD	296:16	296:16	20	tif
LEAF_NODE	296:16	296:16	21	tif
LEAF_NODE	296:19	296:19	19	,
ARGUMENT	296:21	296:21	19	nextdir
FIELD	296:21	296:21	20	nextdir
LEAF_NODE	296:21	296:21	21	nextdir
LEAF_NODE	296:28	296:28	19	)
LEAF_NODE	296:30	296:30	16	||
EXPR	297:8	297:8	16	! ReadOK ( tif , & dircount , 2 )
UNARY_EXPR	297:8	297:9	17	! ReadOK ( tif , & dircount , 2 )
UNARY_OPERATOR	297:8	297:8	18	!
LEAF_NODE	297:8	297:8	19	!
FUNCTION_CALL	297:9	297:33	18	ReadOK ( tif , & dircount , 2 )
CALLEE	297:9	297:9	19	ReadOK
LEAF_NODE	297:9	297:9	20	ReadOK
LEAF_NODE	297:15	297:15	19	(
ARGUMENT	297:16	297:16	19	tif
FIELD	297:16	297:16	20	tif
LEAF_NODE	297:16	297:16	21	tif
LEAF_NODE	297:19	297:19	19	,
ARGUMENT	297:21	297:21	19	& dircount
UNARY_EXPR	297:21	297:22	20	& dircount
UNARY_OPERATOR	297:21	297:21	21	&
LEAF_NODE	297:21	297:21	22	&
FIELD	297:22	297:22	21	dircount
LEAF_NODE	297:22	297:22	22	dircount
LEAF_NODE	297:30	297:30	19	,
ARGUMENT	297:32	297:32	19	2
FIELD	297:32	297:32	20	2
LEAF_NODE	297:32	297:32	21	2
LEAF_NODE	297:33	297:33	19	)
LEAF_NODE	297:34	297:34	13	)
STATEMENTS	297:36	301:4	13	
LEAF_NODE	297:36	297:36	14	{
STATEMENTS	298:5	300:5	14	
EXPR_STATEMENT	298:5	299:43	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" ) ;
EXPR	298:5	298:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
FUNCTION_CALL	298:5	299:42	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
CALLEE	298:5	298:5	18	TIFFErrorExt
LEAF_NODE	298:5	298:5	19	TIFFErrorExt
LEAF_NODE	298:17	298:17	18	(
ARGUMENT	298:18	298:18	18	tif -> tif_clientdata
FIELD	298:18	298:23	19	tif -> tif_clientdata
LEAF_NODE	298:18	298:18	20	tif
LEAF_NODE	298:21	298:21	20	->
LEAF_NODE	298:23	298:23	20	tif_clientdata
LEAF_NODE	298:37	298:37	18	,
ARGUMENT	298:39	298:39	18	module
FIELD	298:39	298:39	19	module
LEAF_NODE	298:39	298:39	20	module
LEAF_NODE	298:45	298:45	18	,
ARGUMENT	299:10	299:10	18	"Error fetching directory count"
FIELD	299:10	299:10	19	"Error fetching directory count"
LEAF_NODE	299:10	299:10	20	"Error fetching directory count"
LEAF_NODE	299:42	299:42	18	)
LEAF_NODE	299:43	299:43	16	;
JUMP_STATEMENT	300:5	300:15	15	return ( 0 ) ;
KEYWORD	300:5	300:5	16	return
LEAF_NODE	300:5	300:5	17	return
DESTINATION	300:12	300:12	16	( 0 )
EXPR	300:12	300:14	17	( 0 )
LEAF_NODE	300:12	300:12	18	(
FIELD	300:13	300:13	18	0
LEAF_NODE	300:13	300:13	19	0
LEAF_NODE	300:14	300:14	18	)
LEAF_NODE	300:15	300:15	16	;
LEAF_NODE	301:4	301:4	14	}
SELECTION	302:4	303:5	12	
KEYWORD	302:4	302:4	13	if
LEAF_NODE	302:4	302:4	14	if
LEAF_NODE	302:7	302:7	13	(
CONDITION	302:8	302:8	13	tif -> tif_flags & TIFF_SWAB
EXPR	302:8	302:25	14	tif -> tif_flags & TIFF_SWAB
FIELD	302:8	302:13	15	tif -> tif_flags
LEAF_NODE	302:8	302:8	16	tif
LEAF_NODE	302:11	302:11	16	->
LEAF_NODE	302:13	302:13	16	tif_flags
LEAF_NODE	302:23	302:23	15	&
FIELD	302:25	302:25	15	TIFF_SWAB
LEAF_NODE	302:25	302:25	16	TIFF_SWAB
LEAF_NODE	302:34	302:34	13	)
STATEMENTS	303:5	303:5	13	
EXPR_STATEMENT	303:5	303:29	14	TIFFSwabShort ( & dircount ) ;
EXPR	303:5	303:5	15	TIFFSwabShort ( & dircount )
FUNCTION_CALL	303:5	303:28	16	TIFFSwabShort ( & dircount )
CALLEE	303:5	303:5	17	TIFFSwabShort
LEAF_NODE	303:5	303:5	18	TIFFSwabShort
LEAF_NODE	303:18	303:18	17	(
ARGUMENT	303:19	303:19	17	& dircount
UNARY_EXPR	303:19	303:20	18	& dircount
UNARY_OPERATOR	303:19	303:19	19	&
LEAF_NODE	303:19	303:19	20	&
FIELD	303:20	303:20	19	dircount
LEAF_NODE	303:20	303:20	20	dircount
LEAF_NODE	303:28	303:28	17	)
LEAF_NODE	303:29	303:29	15	;
EXPR_STATEMENT	304:4	305:40	12	( void ) TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET ) ;
EXPR	304:4	304:11	13	( void ) TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET )
LEAF_NODE	304:4	304:4	14	(
TYPE_NAME	304:5	304:5	14	void
LEAF_NODE	304:5	304:5	15	void
LEAF_NODE	304:9	304:9	14	)
FUNCTION_CALL	304:11	305:39	14	TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET )
CALLEE	304:11	304:11	15	TIFFSeekFile
LEAF_NODE	304:11	304:11	16	TIFFSeekFile
LEAF_NODE	304:23	304:23	15	(
ARGUMENT	304:24	304:24	15	tif
FIELD	304:24	304:24	16	tif
LEAF_NODE	304:24	304:24	17	tif
LEAF_NODE	304:27	304:27	15	,
ARGUMENT	305:8	305:27	15	nextdir + 2 + dircount * 12
FIELD	305:8	305:8	16	nextdir
LEAF_NODE	305:8	305:8	17	nextdir
LEAF_NODE	305:15	305:15	16	+
FIELD	305:16	305:16	16	2
LEAF_NODE	305:16	305:16	17	2
LEAF_NODE	305:17	305:17	16	+
FIELD	305:18	305:18	16	dircount
LEAF_NODE	305:18	305:18	17	dircount
LEAF_NODE	305:26	305:26	16	*
FIELD	305:27	305:27	16	12
LEAF_NODE	305:27	305:27	17	12
LEAF_NODE	305:29	305:29	15	,
ARGUMENT	305:31	305:31	15	SEEK_SET
FIELD	305:31	305:31	16	SEEK_SET
LEAF_NODE	305:31	305:31	17	SEEK_SET
LEAF_NODE	305:39	305:39	15	)
LEAF_NODE	305:40	305:40	13	;
SELECTION	306:4	306:39	12	
KEYWORD	306:4	306:4	13	if
LEAF_NODE	306:4	306:4	14	if
LEAF_NODE	306:7	306:7	13	(
CONDITION	306:8	306:8	13	! ReadOK ( tif , & nextnextdir , 4 )
EXPR	306:8	306:8	14	! ReadOK ( tif , & nextnextdir , 4 )
UNARY_EXPR	306:8	306:9	15	! ReadOK ( tif , & nextnextdir , 4 )
UNARY_OPERATOR	306:8	306:8	16	!
LEAF_NODE	306:8	306:8	17	!
FUNCTION_CALL	306:9	306:36	16	ReadOK ( tif , & nextnextdir , 4 )
CALLEE	306:9	306:9	17	ReadOK
LEAF_NODE	306:9	306:9	18	ReadOK
LEAF_NODE	306:15	306:15	17	(
ARGUMENT	306:16	306:16	17	tif
FIELD	306:16	306:16	18	tif
LEAF_NODE	306:16	306:16	19	tif
LEAF_NODE	306:19	306:19	17	,
ARGUMENT	306:21	306:21	17	& nextnextdir
UNARY_EXPR	306:21	306:22	18	& nextnextdir
UNARY_OPERATOR	306:21	306:21	19	&
LEAF_NODE	306:21	306:21	20	&
FIELD	306:22	306:22	19	nextnextdir
LEAF_NODE	306:22	306:22	20	nextnextdir
LEAF_NODE	306:33	306:33	17	,
ARGUMENT	306:35	306:35	17	4
FIELD	306:35	306:35	18	4
LEAF_NODE	306:35	306:35	19	4
LEAF_NODE	306:36	306:36	17	)
LEAF_NODE	306:37	306:37	13	)
STATEMENTS	306:39	310:4	13	
LEAF_NODE	306:39	306:39	14	{
STATEMENTS	307:5	309:5	14	
EXPR_STATEMENT	307:5	308:42	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" ) ;
EXPR	307:5	307:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
FUNCTION_CALL	307:5	308:41	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
CALLEE	307:5	307:5	18	TIFFErrorExt
LEAF_NODE	307:5	307:5	19	TIFFErrorExt
LEAF_NODE	307:17	307:17	18	(
ARGUMENT	307:18	307:18	18	tif -> tif_clientdata
FIELD	307:18	307:23	19	tif -> tif_clientdata
LEAF_NODE	307:18	307:18	20	tif
LEAF_NODE	307:21	307:21	20	->
LEAF_NODE	307:23	307:23	20	tif_clientdata
LEAF_NODE	307:37	307:37	18	,
ARGUMENT	307:39	307:39	18	module
FIELD	307:39	307:39	19	module
LEAF_NODE	307:39	307:39	20	module
LEAF_NODE	307:45	307:45	18	,
ARGUMENT	308:10	308:10	18	"Error fetching directory link"
FIELD	308:10	308:10	19	"Error fetching directory link"
LEAF_NODE	308:10	308:10	20	"Error fetching directory link"
LEAF_NODE	308:41	308:41	18	)
LEAF_NODE	308:42	308:42	16	;
JUMP_STATEMENT	309:5	309:15	15	return ( 0 ) ;
KEYWORD	309:5	309:5	16	return
LEAF_NODE	309:5	309:5	17	return
DESTINATION	309:12	309:12	16	( 0 )
EXPR	309:12	309:14	17	( 0 )
LEAF_NODE	309:12	309:12	18	(
FIELD	309:13	309:13	18	0
LEAF_NODE	309:13	309:13	19	0
LEAF_NODE	309:14	309:14	18	)
LEAF_NODE	309:15	309:15	16	;
LEAF_NODE	310:4	310:4	14	}
SELECTION	311:4	312:5	12	
KEYWORD	311:4	311:4	13	if
LEAF_NODE	311:4	311:4	14	if
LEAF_NODE	311:7	311:7	13	(
CONDITION	311:8	311:8	13	tif -> tif_flags & TIFF_SWAB
EXPR	311:8	311:25	14	tif -> tif_flags & TIFF_SWAB
FIELD	311:8	311:13	15	tif -> tif_flags
LEAF_NODE	311:8	311:8	16	tif
LEAF_NODE	311:11	311:11	16	->
LEAF_NODE	311:13	311:13	16	tif_flags
LEAF_NODE	311:23	311:23	15	&
FIELD	311:25	311:25	15	TIFF_SWAB
LEAF_NODE	311:25	311:25	16	TIFF_SWAB
LEAF_NODE	311:34	311:34	13	)
STATEMENTS	312:5	312:5	13	
EXPR_STATEMENT	312:5	312:31	14	TIFFSwabLong ( & nextnextdir ) ;
EXPR	312:5	312:5	15	TIFFSwabLong ( & nextnextdir )
FUNCTION_CALL	312:5	312:30	16	TIFFSwabLong ( & nextnextdir )
CALLEE	312:5	312:5	17	TIFFSwabLong
LEAF_NODE	312:5	312:5	18	TIFFSwabLong
LEAF_NODE	312:17	312:17	17	(
ARGUMENT	312:18	312:18	17	& nextnextdir
UNARY_EXPR	312:18	312:19	18	& nextnextdir
UNARY_OPERATOR	312:18	312:18	19	&
LEAF_NODE	312:18	312:18	20	&
FIELD	312:19	312:19	19	nextnextdir
LEAF_NODE	312:19	312:19	20	nextnextdir
LEAF_NODE	312:30	312:30	17	)
LEAF_NODE	312:31	312:31	15	;
SELECTION	313:4	314:4	12	
KEYWORD	313:4	313:4	13	if
LEAF_NODE	313:4	313:4	14	if
LEAF_NODE	313:7	313:7	13	(
CONDITION	313:8	313:8	13	nextnextdir == tif -> tif_diroff
EXPR	313:8	313:21	14	nextnextdir == tif -> tif_diroff
FIELD	313:8	313:8	15	nextnextdir
LEAF_NODE	313:8	313:8	16	nextnextdir
EQ_OPERATOR	313:19	313:19	15	==
LEAF_NODE	313:19	313:19	16	==
FIELD	313:21	313:26	15	tif -> tif_diroff
LEAF_NODE	313:21	313:21	16	tif
LEAF_NODE	313:24	313:24	16	->
LEAF_NODE	313:26	313:26	16	tif_diroff
LEAF_NODE	313:36	313:36	13	)
STATEMENTS	314:4	326:4	13	
LEAF_NODE	314:4	314:4	14	{
STATEMENTS	315:5	325:5	14	
SIMPLE_DECL	315:5	315:13	15	uint32 m ;
VAR_DECL	315:5	315:12	16	uint32 m
TYPE	315:5	315:5	17	uint32
TYPE_NAME	315:5	315:5	18	uint32
LEAF_NODE	315:5	315:5	19	uint32
NAME	315:12	315:12	17	m
LEAF_NODE	315:12	315:12	18	m
LEAF_NODE	315:13	315:13	16	;
EXPR_STATEMENT	316:5	316:8	15	m = 0 ;
EXPR	316:5	316:5	16	m = 0
ASSIGN	316:5	316:7	17	m = 0
LVAL	316:5	316:5	18	m
FIELD	316:5	316:5	19	m
LEAF_NODE	316:5	316:5	20	m
ASSIGN_OP	316:6	316:6	18	=
LEAF_NODE	316:6	316:6	19	=
RVAL	316:7	316:7	18	0
FIELD	316:7	316:7	19	0
LEAF_NODE	316:7	316:7	20	0
LEAF_NODE	316:8	316:8	16	;
EXPR_STATEMENT	317:5	318:41	15	( void ) TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET ) ;
EXPR	317:5	317:12	16	( void ) TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET )
LEAF_NODE	317:5	317:5	17	(
TYPE_NAME	317:6	317:6	17	void
LEAF_NODE	317:6	317:6	18	void
LEAF_NODE	317:10	317:10	17	)
FUNCTION_CALL	317:12	318:40	17	TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET )
CALLEE	317:12	317:12	18	TIFFSeekFile
LEAF_NODE	317:12	317:12	19	TIFFSeekFile
LEAF_NODE	317:24	317:24	18	(
ARGUMENT	317:25	317:25	18	tif
FIELD	317:25	317:25	19	tif
LEAF_NODE	317:25	317:25	20	tif
LEAF_NODE	317:28	317:28	18	,
ARGUMENT	318:9	318:28	18	nextdir + 2 + dircount * 12
FIELD	318:9	318:9	19	nextdir
LEAF_NODE	318:9	318:9	20	nextdir
LEAF_NODE	318:16	318:16	19	+
FIELD	318:17	318:17	19	2
LEAF_NODE	318:17	318:17	20	2
LEAF_NODE	318:18	318:18	19	+
FIELD	318:19	318:19	19	dircount
LEAF_NODE	318:19	318:19	20	dircount
LEAF_NODE	318:27	318:27	19	*
FIELD	318:28	318:28	19	12
LEAF_NODE	318:28	318:28	20	12
LEAF_NODE	318:30	318:30	18	,
ARGUMENT	318:32	318:32	18	SEEK_SET
FIELD	318:32	318:32	19	SEEK_SET
LEAF_NODE	318:32	318:32	20	SEEK_SET
LEAF_NODE	318:40	318:40	18	)
LEAF_NODE	318:41	318:41	16	;
SELECTION	319:5	319:31	15	
KEYWORD	319:5	319:5	16	if
LEAF_NODE	319:5	319:5	17	if
LEAF_NODE	319:8	319:8	16	(
CONDITION	319:9	319:9	16	! WriteOK ( tif , & m , 4 )
EXPR	319:9	319:9	17	! WriteOK ( tif , & m , 4 )
UNARY_EXPR	319:9	319:10	18	! WriteOK ( tif , & m , 4 )
UNARY_OPERATOR	319:9	319:9	19	!
LEAF_NODE	319:9	319:9	20	!
FUNCTION_CALL	319:10	319:28	19	WriteOK ( tif , & m , 4 )
CALLEE	319:10	319:10	20	WriteOK
LEAF_NODE	319:10	319:10	21	WriteOK
LEAF_NODE	319:17	319:17	20	(
ARGUMENT	319:18	319:18	20	tif
FIELD	319:18	319:18	21	tif
LEAF_NODE	319:18	319:18	22	tif
LEAF_NODE	319:21	319:21	20	,
ARGUMENT	319:23	319:23	20	& m
UNARY_EXPR	319:23	319:24	21	& m
UNARY_OPERATOR	319:23	319:23	22	&
LEAF_NODE	319:23	319:23	23	&
FIELD	319:24	319:24	22	m
LEAF_NODE	319:24	319:24	23	m
LEAF_NODE	319:25	319:25	20	,
ARGUMENT	319:27	319:27	20	4
FIELD	319:27	319:27	21	4
LEAF_NODE	319:27	319:27	22	4
LEAF_NODE	319:28	319:28	20	)
LEAF_NODE	319:29	319:29	16	)
STATEMENTS	319:31	323:5	16	
LEAF_NODE	319:31	319:31	17	{
STATEMENTS	320:6	322:6	17	
EXPR_STATEMENT	320:6	321:42	18	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" ) ;
EXPR	320:6	320:6	19	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
FUNCTION_CALL	320:6	321:41	20	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
CALLEE	320:6	320:6	21	TIFFErrorExt
LEAF_NODE	320:6	320:6	22	TIFFErrorExt
LEAF_NODE	320:18	320:18	21	(
ARGUMENT	320:19	320:19	21	tif -> tif_clientdata
FIELD	320:19	320:24	22	tif -> tif_clientdata
LEAF_NODE	320:19	320:19	23	tif
LEAF_NODE	320:22	320:22	23	->
LEAF_NODE	320:24	320:24	23	tif_clientdata
LEAF_NODE	320:38	320:38	21	,
ARGUMENT	320:40	320:40	21	module
FIELD	320:40	320:40	22	module
LEAF_NODE	320:40	320:40	23	module
LEAF_NODE	320:46	320:46	21	,
ARGUMENT	321:11	321:11	21	"Error writing directory link"
FIELD	321:11	321:11	22	"Error writing directory link"
LEAF_NODE	321:11	321:11	23	"Error writing directory link"
LEAF_NODE	321:41	321:41	21	)
LEAF_NODE	321:42	321:42	19	;
JUMP_STATEMENT	322:6	322:16	18	return ( 0 ) ;
KEYWORD	322:6	322:6	19	return
LEAF_NODE	322:6	322:6	20	return
DESTINATION	322:13	322:13	19	( 0 )
EXPR	322:13	322:15	20	( 0 )
LEAF_NODE	322:13	322:13	21	(
FIELD	322:14	322:14	21	0
LEAF_NODE	322:14	322:14	22	0
LEAF_NODE	322:15	322:15	21	)
LEAF_NODE	322:16	322:16	19	;
LEAF_NODE	323:5	323:5	17	}
EXPR_STATEMENT	324:5	324:22	15	tif -> tif_diroff = 0 ;
EXPR	324:5	324:5	16	tif -> tif_diroff = 0
ASSIGN	324:5	324:21	17	tif -> tif_diroff = 0
LVAL	324:5	324:5	18	tif -> tif_diroff
FIELD	324:5	324:10	19	tif -> tif_diroff
LEAF_NODE	324:5	324:5	20	tif
LEAF_NODE	324:8	324:8	20	->
LEAF_NODE	324:10	324:10	20	tif_diroff
ASSIGN_OP	324:20	324:20	18	=
LEAF_NODE	324:20	324:20	19	=
RVAL	324:21	324:21	18	0
FIELD	324:21	324:21	19	0
LEAF_NODE	324:21	324:21	20	0
LEAF_NODE	324:22	324:22	16	;
JUMP_STATEMENT	325:5	325:10	15	break DESTINATION ;
KEYWORD	325:5	325:5	16	break
LEAF_NODE	325:5	325:5	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	325:10	325:10	16	;
LEAF_NODE	326:4	326:4	14	}
EXPR_STATEMENT	327:4	327:23	12	nextdir = nextnextdir ;
EXPR	327:4	327:4	13	nextdir = nextnextdir
ASSIGN	327:4	327:12	14	nextdir = nextnextdir
LVAL	327:4	327:4	15	nextdir
FIELD	327:4	327:4	16	nextdir
LEAF_NODE	327:4	327:4	17	nextdir
ASSIGN_OP	327:11	327:11	15	=
LEAF_NODE	327:11	327:11	16	=
RVAL	327:12	327:12	15	nextnextdir
FIELD	327:12	327:12	16	nextnextdir
LEAF_NODE	327:12	327:12	17	nextnextdir
LEAF_NODE	327:23	327:23	13	;
LEAF_NODE	328:3	328:3	11	}
LEAF_NODE	329:2	329:2	8	}
LEAF_NODE	330:1	330:1	5	}
SELECTION	331:1	332:1	3	
KEYWORD	331:1	331:1	4	else
LEAF_NODE	331:1	331:1	5	else
STATEMENTS	332:1	396:1	4	
LEAF_NODE	332:1	332:1	5	{
STATEMENTS	333:2	346:2	5	
SELECTION	333:2	334:2	6	
KEYWORD	333:2	333:2	7	if
LEAF_NODE	333:2	333:2	8	if
LEAF_NODE	333:5	333:5	7	(
CONDITION	333:6	333:6	7	tif -> tif_header . big . tiff_diroff == tif -> tif_diroff
EXPR	333:6	333:41	8	tif -> tif_header . big . tiff_diroff == tif -> tif_diroff
FIELD	333:6	333:26	9	tif -> tif_header . big . tiff_diroff
LEAF_NODE	333:6	333:6	10	tif
LEAF_NODE	333:9	333:9	10	->
LEAF_NODE	333:11	333:11	10	tif_header
LEAF_NODE	333:21	333:21	10	.
LEAF_NODE	333:22	333:22	10	big
LEAF_NODE	333:25	333:25	10	.
LEAF_NODE	333:26	333:26	10	tiff_diroff
EQ_OPERATOR	333:38	333:38	9	==
LEAF_NODE	333:38	333:38	10	==
FIELD	333:41	333:46	9	tif -> tif_diroff
LEAF_NODE	333:41	333:41	10	tif
LEAF_NODE	333:44	333:44	10	->
LEAF_NODE	333:46	333:46	10	tif_diroff
LEAF_NODE	333:56	333:56	7	)
STATEMENTS	334:2	345:2	7	
LEAF_NODE	334:2	334:2	8	{
STATEMENTS	335:3	339:3	8	
EXPR_STATEMENT	335:3	335:38	9	tif -> tif_header . big . tiff_diroff = 0 ;
EXPR	335:3	335:3	10	tif -> tif_header . big . tiff_diroff = 0
ASSIGN	335:3	335:37	11	tif -> tif_header . big . tiff_diroff = 0
LVAL	335:3	335:3	12	tif -> tif_header . big . tiff_diroff
FIELD	335:3	335:23	13	tif -> tif_header . big . tiff_diroff
LEAF_NODE	335:3	335:3	14	tif
LEAF_NODE	335:6	335:6	14	->
LEAF_NODE	335:8	335:8	14	tif_header
LEAF_NODE	335:18	335:18	14	.
LEAF_NODE	335:19	335:19	14	big
LEAF_NODE	335:22	335:22	14	.
LEAF_NODE	335:23	335:23	14	tiff_diroff
ASSIGN_OP	335:35	335:35	12	=
LEAF_NODE	335:35	335:35	13	=
RVAL	335:37	335:37	12	0
FIELD	335:37	335:37	13	0
LEAF_NODE	335:37	335:37	14	0
LEAF_NODE	335:38	335:38	10	;
EXPR_STATEMENT	336:3	336:22	9	tif -> tif_diroff = 0 ;
EXPR	336:3	336:3	10	tif -> tif_diroff = 0
ASSIGN	336:3	336:21	11	tif -> tif_diroff = 0
LVAL	336:3	336:3	12	tif -> tif_diroff
FIELD	336:3	336:8	13	tif -> tif_diroff
LEAF_NODE	336:3	336:3	14	tif
LEAF_NODE	336:6	336:6	14	->
LEAF_NODE	336:8	336:8	14	tif_diroff
ASSIGN_OP	336:19	336:19	12	=
LEAF_NODE	336:19	336:19	13	=
RVAL	336:21	336:21	12	0
FIELD	336:21	336:21	13	0
LEAF_NODE	336:21	336:21	14	0
LEAF_NODE	336:22	336:22	10	;
EXPR_STATEMENT	338:3	338:31	9	TIFFSeekFile ( tif , 8 , SEEK_SET ) ;
EXPR	338:3	338:3	10	TIFFSeekFile ( tif , 8 , SEEK_SET )
FUNCTION_CALL	338:3	338:30	11	TIFFSeekFile ( tif , 8 , SEEK_SET )
CALLEE	338:3	338:3	12	TIFFSeekFile
LEAF_NODE	338:3	338:3	13	TIFFSeekFile
LEAF_NODE	338:15	338:15	12	(
ARGUMENT	338:16	338:16	12	tif
FIELD	338:16	338:16	13	tif
LEAF_NODE	338:16	338:16	14	tif
LEAF_NODE	338:19	338:19	12	,
ARGUMENT	338:20	338:20	12	8
FIELD	338:20	338:20	13	8
LEAF_NODE	338:20	338:20	14	8
LEAF_NODE	338:21	338:21	12	,
ARGUMENT	338:22	338:22	12	SEEK_SET
FIELD	338:22	338:22	13	SEEK_SET
LEAF_NODE	338:22	338:22	14	SEEK_SET
LEAF_NODE	338:30	338:30	12	)
LEAF_NODE	338:31	338:31	10	;
SELECTION	339:3	340:3	9	
KEYWORD	339:3	339:3	10	if
LEAF_NODE	339:3	339:3	11	if
LEAF_NODE	339:6	339:6	10	(
CONDITION	339:7	339:7	10	! WriteOK ( tif , & ( tif -> tif_header . big . tiff_diroff ) , 8 )
EXPR	339:7	339:7	11	! WriteOK ( tif , & ( tif -> tif_header . big . tiff_diroff ) , 8 )
UNARY_EXPR	339:7	339:8	12	! WriteOK ( tif , & ( tif -> tif_header . big . tiff_diroff ) , 8 )
UNARY_OPERATOR	339:7	339:7	13	!
LEAF_NODE	339:7	339:7	14	!
FUNCTION_CALL	339:8	339:57	13	WriteOK ( tif , & ( tif -> tif_header . big . tiff_diroff ) , 8 )
CALLEE	339:8	339:8	14	WriteOK
LEAF_NODE	339:8	339:8	15	WriteOK
LEAF_NODE	339:15	339:15	14	(
ARGUMENT	339:16	339:16	14	tif
FIELD	339:16	339:16	15	tif
LEAF_NODE	339:16	339:16	16	tif
LEAF_NODE	339:19	339:19	14	,
ARGUMENT	339:21	339:21	14	& ( tif -> tif_header . big . tiff_diroff )
UNARY_EXPR	339:21	339:54	15	& ( tif -> tif_header . big . tiff_diroff )
UNARY_OPERATOR	339:21	339:21	16	&
LEAF_NODE	339:21	339:21	17	&
LEAF_NODE	339:22	339:22	16	(
FIELD	339:23	339:43	16	tif -> tif_header . big . tiff_diroff
LEAF_NODE	339:23	339:23	17	tif
LEAF_NODE	339:26	339:26	17	->
LEAF_NODE	339:28	339:28	17	tif_header
LEAF_NODE	339:38	339:38	17	.
LEAF_NODE	339:39	339:39	17	big
LEAF_NODE	339:42	339:42	17	.
LEAF_NODE	339:43	339:43	17	tiff_diroff
LEAF_NODE	339:54	339:54	16	)
LEAF_NODE	339:55	339:55	14	,
ARGUMENT	339:56	339:56	14	8
FIELD	339:56	339:56	15	8
LEAF_NODE	339:56	339:56	16	8
LEAF_NODE	339:57	339:57	14	)
LEAF_NODE	339:58	339:58	10	)
STATEMENTS	340:3	344:3	10	
LEAF_NODE	340:3	340:3	11	{
STATEMENTS	341:4	343:4	11	
EXPR_STATEMENT	341:4	342:37	12	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error updating TIFF header" ) ;
EXPR	341:4	341:4	13	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error updating TIFF header" )
FUNCTION_CALL	341:4	342:36	14	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error updating TIFF header" )
CALLEE	341:4	341:4	15	TIFFErrorExt
LEAF_NODE	341:4	341:4	16	TIFFErrorExt
LEAF_NODE	341:16	341:16	15	(
ARGUMENT	341:17	341:17	15	tif -> tif_clientdata
FIELD	341:17	341:22	16	tif -> tif_clientdata
LEAF_NODE	341:17	341:17	17	tif
LEAF_NODE	341:20	341:20	17	->
LEAF_NODE	341:22	341:22	17	tif_clientdata
LEAF_NODE	341:36	341:36	15	,
ARGUMENT	341:38	341:38	15	tif -> tif_name
FIELD	341:38	341:43	16	tif -> tif_name
LEAF_NODE	341:38	341:38	17	tif
LEAF_NODE	341:41	341:41	17	->
LEAF_NODE	341:43	341:43	17	tif_name
LEAF_NODE	341:51	341:51	15	,
ARGUMENT	342:8	342:8	15	"Error updating TIFF header"
FIELD	342:8	342:8	16	"Error updating TIFF header"
LEAF_NODE	342:8	342:8	17	"Error updating TIFF header"
LEAF_NODE	342:36	342:36	15	)
LEAF_NODE	342:37	342:37	13	;
JUMP_STATEMENT	343:4	343:14	12	return ( 0 ) ;
KEYWORD	343:4	343:4	13	return
LEAF_NODE	343:4	343:4	14	return
DESTINATION	343:11	343:11	13	( 0 )
EXPR	343:11	343:13	14	( 0 )
LEAF_NODE	343:11	343:11	15	(
FIELD	343:12	343:12	15	0
LEAF_NODE	343:12	343:12	16	0
LEAF_NODE	343:13	343:13	15	)
LEAF_NODE	343:14	343:14	13	;
LEAF_NODE	344:3	344:3	11	}
LEAF_NODE	345:2	345:2	8	}
SELECTION	346:2	347:2	6	
KEYWORD	346:2	346:2	7	else
LEAF_NODE	346:2	346:2	8	else
STATEMENTS	347:2	395:2	7	
LEAF_NODE	347:2	347:2	8	{
STATEMENTS	348:3	350:3	8	
SIMPLE_DECL	348:3	348:17	9	uint64 nextdir ;
VAR_DECL	348:3	348:10	10	uint64 nextdir
TYPE	348:3	348:3	11	uint64
TYPE_NAME	348:3	348:3	12	uint64
LEAF_NODE	348:3	348:3	13	uint64
NAME	348:10	348:10	11	nextdir
LEAF_NODE	348:10	348:10	12	nextdir
LEAF_NODE	348:17	348:17	10	;
EXPR_STATEMENT	349:3	349:44	9	nextdir = tif -> tif_header . big . tiff_diroff ;
EXPR	349:3	349:3	10	nextdir = tif -> tif_header . big . tiff_diroff
ASSIGN	349:3	349:13	11	nextdir = tif -> tif_header . big . tiff_diroff
LVAL	349:3	349:3	12	nextdir
FIELD	349:3	349:3	13	nextdir
LEAF_NODE	349:3	349:3	14	nextdir
ASSIGN_OP	349:11	349:11	12	=
LEAF_NODE	349:11	349:11	13	=
RVAL	349:13	349:13	12	tif -> tif_header . big . tiff_diroff
FIELD	349:13	349:33	13	tif -> tif_header . big . tiff_diroff
LEAF_NODE	349:13	349:13	14	tif
LEAF_NODE	349:16	349:16	14	->
LEAF_NODE	349:18	349:18	14	tif_header
LEAF_NODE	349:28	349:28	14	.
LEAF_NODE	349:29	349:29	14	big
LEAF_NODE	349:32	349:32	14	.
LEAF_NODE	349:33	349:33	14	tiff_diroff
LEAF_NODE	349:44	349:44	10	;
ITERATION	350:3	350:12	9	
KEYWORD	350:3	350:3	10	while
LEAF_NODE	350:3	350:3	11	while
LEAF_NODE	350:8	350:8	10	(
CONDITION	350:9	350:9	10	1
EXPR	350:9	350:9	11	1
FIELD	350:9	350:9	12	1
LEAF_NODE	350:9	350:9	13	1
LEAF_NODE	350:10	350:10	10	)
STATEMENTS	350:12	394:3	10	
LEAF_NODE	350:12	350:12	11	{
STATEMENTS	351:4	393:4	11	
SIMPLE_DECL	351:4	351:21	12	uint64 dircount64 ;
VAR_DECL	351:4	351:11	13	uint64 dircount64
TYPE	351:4	351:4	14	uint64
TYPE_NAME	351:4	351:4	15	uint64
LEAF_NODE	351:4	351:4	16	uint64
NAME	351:11	351:11	14	dircount64
LEAF_NODE	351:11	351:11	15	dircount64
LEAF_NODE	351:21	351:21	13	;
SIMPLE_DECL	352:4	352:19	12	uint16 dircount ;
VAR_DECL	352:4	352:11	13	uint16 dircount
TYPE	352:4	352:4	14	uint16
TYPE_NAME	352:4	352:4	15	uint16
LEAF_NODE	352:4	352:4	16	uint16
NAME	352:11	352:11	14	dircount
LEAF_NODE	352:11	352:11	15	dircount
LEAF_NODE	352:19	352:19	13	;
SIMPLE_DECL	353:4	353:22	12	uint64 nextnextdir ;
VAR_DECL	353:4	353:11	13	uint64 nextnextdir
TYPE	353:4	353:4	14	uint64
TYPE_NAME	353:4	353:4	15	uint64
LEAF_NODE	353:4	353:4	16	uint64
NAME	353:11	353:11	14	nextnextdir
LEAF_NODE	353:11	353:11	15	nextnextdir
LEAF_NODE	353:22	353:22	13	;
SELECTION	355:4	356:38	12	
KEYWORD	355:4	355:4	13	if
LEAF_NODE	355:4	355:4	14	if
LEAF_NODE	355:7	355:7	13	(
CONDITION	355:8	355:8	13	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount64 , 8 )
EXPR	355:8	355:8	14	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount64 , 8 )
OR	355:8	356:8	15	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount64 , 8 )
EXPR	355:8	355:8	16	! SeekOK ( tif , nextdir )
UNARY_EXPR	355:8	355:9	17	! SeekOK ( tif , nextdir )
UNARY_OPERATOR	355:8	355:8	18	!
LEAF_NODE	355:8	355:8	19	!
FUNCTION_CALL	355:9	355:28	18	SeekOK ( tif , nextdir )
CALLEE	355:9	355:9	19	SeekOK
LEAF_NODE	355:9	355:9	20	SeekOK
LEAF_NODE	355:15	355:15	19	(
ARGUMENT	355:16	355:16	19	tif
FIELD	355:16	355:16	20	tif
LEAF_NODE	355:16	355:16	21	tif
LEAF_NODE	355:19	355:19	19	,
ARGUMENT	355:21	355:21	19	nextdir
FIELD	355:21	355:21	20	nextdir
LEAF_NODE	355:21	355:21	21	nextdir
LEAF_NODE	355:28	355:28	19	)
LEAF_NODE	355:30	355:30	16	||
EXPR	356:8	356:8	16	! ReadOK ( tif , & dircount64 , 8 )
UNARY_EXPR	356:8	356:9	17	! ReadOK ( tif , & dircount64 , 8 )
UNARY_OPERATOR	356:8	356:8	18	!
LEAF_NODE	356:8	356:8	19	!
FUNCTION_CALL	356:9	356:35	18	ReadOK ( tif , & dircount64 , 8 )
CALLEE	356:9	356:9	19	ReadOK
LEAF_NODE	356:9	356:9	20	ReadOK
LEAF_NODE	356:15	356:15	19	(
ARGUMENT	356:16	356:16	19	tif
FIELD	356:16	356:16	20	tif
LEAF_NODE	356:16	356:16	21	tif
LEAF_NODE	356:19	356:19	19	,
ARGUMENT	356:21	356:21	19	& dircount64
UNARY_EXPR	356:21	356:22	20	& dircount64
UNARY_OPERATOR	356:21	356:21	21	&
LEAF_NODE	356:21	356:21	22	&
FIELD	356:22	356:22	21	dircount64
LEAF_NODE	356:22	356:22	22	dircount64
LEAF_NODE	356:32	356:32	19	,
ARGUMENT	356:34	356:34	19	8
FIELD	356:34	356:34	20	8
LEAF_NODE	356:34	356:34	21	8
LEAF_NODE	356:35	356:35	19	)
LEAF_NODE	356:36	356:36	13	)
STATEMENTS	356:38	360:4	13	
LEAF_NODE	356:38	356:38	14	{
STATEMENTS	357:5	359:5	14	
EXPR_STATEMENT	357:5	358:43	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" ) ;
EXPR	357:5	357:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
FUNCTION_CALL	357:5	358:42	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
CALLEE	357:5	357:5	18	TIFFErrorExt
LEAF_NODE	357:5	357:5	19	TIFFErrorExt
LEAF_NODE	357:17	357:17	18	(
ARGUMENT	357:18	357:18	18	tif -> tif_clientdata
FIELD	357:18	357:23	19	tif -> tif_clientdata
LEAF_NODE	357:18	357:18	20	tif
LEAF_NODE	357:21	357:21	20	->
LEAF_NODE	357:23	357:23	20	tif_clientdata
LEAF_NODE	357:37	357:37	18	,
ARGUMENT	357:39	357:39	18	module
FIELD	357:39	357:39	19	module
LEAF_NODE	357:39	357:39	20	module
LEAF_NODE	357:45	357:45	18	,
ARGUMENT	358:10	358:10	18	"Error fetching directory count"
FIELD	358:10	358:10	19	"Error fetching directory count"
LEAF_NODE	358:10	358:10	20	"Error fetching directory count"
LEAF_NODE	358:42	358:42	18	)
LEAF_NODE	358:43	358:43	16	;
JUMP_STATEMENT	359:5	359:15	15	return ( 0 ) ;
KEYWORD	359:5	359:5	16	return
LEAF_NODE	359:5	359:5	17	return
DESTINATION	359:12	359:12	16	( 0 )
EXPR	359:12	359:14	17	( 0 )
LEAF_NODE	359:12	359:12	18	(
FIELD	359:13	359:13	18	0
LEAF_NODE	359:13	359:13	19	0
LEAF_NODE	359:14	359:14	18	)
LEAF_NODE	359:15	359:15	16	;
LEAF_NODE	360:4	360:4	14	}
SELECTION	361:4	362:5	12	
KEYWORD	361:4	361:4	13	if
LEAF_NODE	361:4	361:4	14	if
LEAF_NODE	361:7	361:7	13	(
CONDITION	361:8	361:8	13	tif -> tif_flags & TIFF_SWAB
EXPR	361:8	361:25	14	tif -> tif_flags & TIFF_SWAB
FIELD	361:8	361:13	15	tif -> tif_flags
LEAF_NODE	361:8	361:8	16	tif
LEAF_NODE	361:11	361:11	16	->
LEAF_NODE	361:13	361:13	16	tif_flags
LEAF_NODE	361:23	361:23	15	&
FIELD	361:25	361:25	15	TIFF_SWAB
LEAF_NODE	361:25	361:25	16	TIFF_SWAB
LEAF_NODE	361:34	361:34	13	)
STATEMENTS	362:5	362:5	13	
EXPR_STATEMENT	362:5	362:31	14	TIFFSwabLong8 ( & dircount64 ) ;
EXPR	362:5	362:5	15	TIFFSwabLong8 ( & dircount64 )
FUNCTION_CALL	362:5	362:30	16	TIFFSwabLong8 ( & dircount64 )
CALLEE	362:5	362:5	17	TIFFSwabLong8
LEAF_NODE	362:5	362:5	18	TIFFSwabLong8
LEAF_NODE	362:18	362:18	17	(
ARGUMENT	362:19	362:19	17	& dircount64
UNARY_EXPR	362:19	362:20	18	& dircount64
UNARY_OPERATOR	362:19	362:19	19	&
LEAF_NODE	362:19	362:19	20	&
FIELD	362:20	362:20	19	dircount64
LEAF_NODE	362:20	362:20	20	dircount64
LEAF_NODE	362:30	362:30	17	)
LEAF_NODE	362:31	362:31	15	;
SELECTION	363:4	364:4	12	
KEYWORD	363:4	363:4	13	if
LEAF_NODE	363:4	363:4	14	if
LEAF_NODE	363:7	363:7	13	(
CONDITION	363:8	363:8	13	dircount64 > 0xFFFF
EXPR	363:8	363:19	14	dircount64 > 0xFFFF
FIELD	363:8	363:8	15	dircount64
LEAF_NODE	363:8	363:8	16	dircount64
REL_OPERATOR	363:18	363:18	15	>
LEAF_NODE	363:18	363:18	16	>
FIELD	363:19	363:19	15	0xFFFF
LEAF_NODE	363:19	363:19	16	0xFFFF
LEAF_NODE	363:25	363:25	13	)
STATEMENTS	364:4	368:4	13	
LEAF_NODE	364:4	364:4	14	{
STATEMENTS	365:5	367:5	14	
EXPR_STATEMENT	365:5	366:66	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on tag count failed, likely corrupt TIFF" ) ;
EXPR	365:5	365:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on tag count failed, likely corrupt TIFF" )
FUNCTION_CALL	365:5	366:65	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on tag count failed, likely corrupt TIFF" )
CALLEE	365:5	365:5	18	TIFFErrorExt
LEAF_NODE	365:5	365:5	19	TIFFErrorExt
LEAF_NODE	365:17	365:17	18	(
ARGUMENT	365:18	365:18	18	tif -> tif_clientdata
FIELD	365:18	365:23	19	tif -> tif_clientdata
LEAF_NODE	365:18	365:18	20	tif
LEAF_NODE	365:21	365:21	20	->
LEAF_NODE	365:23	365:23	20	tif_clientdata
LEAF_NODE	365:37	365:37	18	,
ARGUMENT	365:39	365:39	18	module
FIELD	365:39	365:39	19	module
LEAF_NODE	365:39	365:39	20	module
LEAF_NODE	365:45	365:45	18	,
ARGUMENT	366:10	366:10	18	"Sanity check on tag count failed, likely corrupt TIFF"
FIELD	366:10	366:10	19	"Sanity check on tag count failed, likely corrupt TIFF"
LEAF_NODE	366:10	366:10	20	"Sanity check on tag count failed, likely corrupt TIFF"
LEAF_NODE	366:65	366:65	18	)
LEAF_NODE	366:66	366:66	16	;
JUMP_STATEMENT	367:5	367:15	15	return ( 0 ) ;
KEYWORD	367:5	367:5	16	return
LEAF_NODE	367:5	367:5	17	return
DESTINATION	367:12	367:12	16	( 0 )
EXPR	367:12	367:14	17	( 0 )
LEAF_NODE	367:12	367:12	18	(
FIELD	367:13	367:13	18	0
LEAF_NODE	367:13	367:13	19	0
LEAF_NODE	367:14	367:14	18	)
LEAF_NODE	367:15	367:15	16	;
LEAF_NODE	368:4	368:4	14	}
EXPR_STATEMENT	369:4	369:31	12	dircount = ( uint16 ) dircount64 ;
EXPR	369:4	369:4	13	dircount = ( uint16 ) dircount64
ASSIGN	369:4	369:13	14	dircount = ( uint16 ) dircount64
LVAL	369:4	369:4	15	dircount
FIELD	369:4	369:4	16	dircount
LEAF_NODE	369:4	369:4	17	dircount
ASSIGN_OP	369:12	369:12	15	=
LEAF_NODE	369:12	369:12	16	=
RVAL	369:13	369:21	15	( uint16 ) dircount64
LEAF_NODE	369:13	369:13	16	(
TYPE_NAME	369:14	369:14	16	uint16
LEAF_NODE	369:14	369:14	17	uint16
LEAF_NODE	369:20	369:20	16	)
FIELD	369:21	369:21	16	dircount64
LEAF_NODE	369:21	369:21	17	dircount64
LEAF_NODE	369:31	369:31	13	;
EXPR_STATEMENT	370:4	371:40	12	( void ) TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET ) ;
EXPR	370:4	370:11	13	( void ) TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET )
LEAF_NODE	370:4	370:4	14	(
TYPE_NAME	370:5	370:5	14	void
LEAF_NODE	370:5	370:5	15	void
LEAF_NODE	370:9	370:9	14	)
FUNCTION_CALL	370:11	371:39	14	TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET )
CALLEE	370:11	370:11	15	TIFFSeekFile
LEAF_NODE	370:11	370:11	16	TIFFSeekFile
LEAF_NODE	370:23	370:23	15	(
ARGUMENT	370:24	370:24	15	tif
FIELD	370:24	370:24	16	tif
LEAF_NODE	370:24	370:24	17	tif
LEAF_NODE	370:27	370:27	15	,
ARGUMENT	371:8	371:27	15	nextdir + 8 + dircount * 20
FIELD	371:8	371:8	16	nextdir
LEAF_NODE	371:8	371:8	17	nextdir
LEAF_NODE	371:15	371:15	16	+
FIELD	371:16	371:16	16	8
LEAF_NODE	371:16	371:16	17	8
LEAF_NODE	371:17	371:17	16	+
FIELD	371:18	371:18	16	dircount
LEAF_NODE	371:18	371:18	17	dircount
LEAF_NODE	371:26	371:26	16	*
FIELD	371:27	371:27	16	20
LEAF_NODE	371:27	371:27	17	20
LEAF_NODE	371:29	371:29	15	,
ARGUMENT	371:31	371:31	15	SEEK_SET
FIELD	371:31	371:31	16	SEEK_SET
LEAF_NODE	371:31	371:31	17	SEEK_SET
LEAF_NODE	371:39	371:39	15	)
LEAF_NODE	371:40	371:40	13	;
SELECTION	372:4	372:39	12	
KEYWORD	372:4	372:4	13	if
LEAF_NODE	372:4	372:4	14	if
LEAF_NODE	372:7	372:7	13	(
CONDITION	372:8	372:8	13	! ReadOK ( tif , & nextnextdir , 8 )
EXPR	372:8	372:8	14	! ReadOK ( tif , & nextnextdir , 8 )
UNARY_EXPR	372:8	372:9	15	! ReadOK ( tif , & nextnextdir , 8 )
UNARY_OPERATOR	372:8	372:8	16	!
LEAF_NODE	372:8	372:8	17	!
FUNCTION_CALL	372:9	372:36	16	ReadOK ( tif , & nextnextdir , 8 )
CALLEE	372:9	372:9	17	ReadOK
LEAF_NODE	372:9	372:9	18	ReadOK
LEAF_NODE	372:15	372:15	17	(
ARGUMENT	372:16	372:16	17	tif
FIELD	372:16	372:16	18	tif
LEAF_NODE	372:16	372:16	19	tif
LEAF_NODE	372:19	372:19	17	,
ARGUMENT	372:21	372:21	17	& nextnextdir
UNARY_EXPR	372:21	372:22	18	& nextnextdir
UNARY_OPERATOR	372:21	372:21	19	&
LEAF_NODE	372:21	372:21	20	&
FIELD	372:22	372:22	19	nextnextdir
LEAF_NODE	372:22	372:22	20	nextnextdir
LEAF_NODE	372:33	372:33	17	,
ARGUMENT	372:35	372:35	17	8
FIELD	372:35	372:35	18	8
LEAF_NODE	372:35	372:35	19	8
LEAF_NODE	372:36	372:36	17	)
LEAF_NODE	372:37	372:37	13	)
STATEMENTS	372:39	376:4	13	
LEAF_NODE	372:39	372:39	14	{
STATEMENTS	373:5	375:5	14	
EXPR_STATEMENT	373:5	374:42	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" ) ;
EXPR	373:5	373:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
FUNCTION_CALL	373:5	374:41	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
CALLEE	373:5	373:5	18	TIFFErrorExt
LEAF_NODE	373:5	373:5	19	TIFFErrorExt
LEAF_NODE	373:17	373:17	18	(
ARGUMENT	373:18	373:18	18	tif -> tif_clientdata
FIELD	373:18	373:23	19	tif -> tif_clientdata
LEAF_NODE	373:18	373:18	20	tif
LEAF_NODE	373:21	373:21	20	->
LEAF_NODE	373:23	373:23	20	tif_clientdata
LEAF_NODE	373:37	373:37	18	,
ARGUMENT	373:39	373:39	18	module
FIELD	373:39	373:39	19	module
LEAF_NODE	373:39	373:39	20	module
LEAF_NODE	373:45	373:45	18	,
ARGUMENT	374:10	374:10	18	"Error fetching directory link"
FIELD	374:10	374:10	19	"Error fetching directory link"
LEAF_NODE	374:10	374:10	20	"Error fetching directory link"
LEAF_NODE	374:41	374:41	18	)
LEAF_NODE	374:42	374:42	16	;
JUMP_STATEMENT	375:5	375:15	15	return ( 0 ) ;
KEYWORD	375:5	375:5	16	return
LEAF_NODE	375:5	375:5	17	return
DESTINATION	375:12	375:12	16	( 0 )
EXPR	375:12	375:14	17	( 0 )
LEAF_NODE	375:12	375:12	18	(
FIELD	375:13	375:13	18	0
LEAF_NODE	375:13	375:13	19	0
LEAF_NODE	375:14	375:14	18	)
LEAF_NODE	375:15	375:15	16	;
LEAF_NODE	376:4	376:4	14	}
SELECTION	377:4	378:5	12	
KEYWORD	377:4	377:4	13	if
LEAF_NODE	377:4	377:4	14	if
LEAF_NODE	377:7	377:7	13	(
CONDITION	377:8	377:8	13	tif -> tif_flags & TIFF_SWAB
EXPR	377:8	377:25	14	tif -> tif_flags & TIFF_SWAB
FIELD	377:8	377:13	15	tif -> tif_flags
LEAF_NODE	377:8	377:8	16	tif
LEAF_NODE	377:11	377:11	16	->
LEAF_NODE	377:13	377:13	16	tif_flags
LEAF_NODE	377:23	377:23	15	&
FIELD	377:25	377:25	15	TIFF_SWAB
LEAF_NODE	377:25	377:25	16	TIFF_SWAB
LEAF_NODE	377:34	377:34	13	)
STATEMENTS	378:5	378:5	13	
EXPR_STATEMENT	378:5	378:32	14	TIFFSwabLong8 ( & nextnextdir ) ;
EXPR	378:5	378:5	15	TIFFSwabLong8 ( & nextnextdir )
FUNCTION_CALL	378:5	378:31	16	TIFFSwabLong8 ( & nextnextdir )
CALLEE	378:5	378:5	17	TIFFSwabLong8
LEAF_NODE	378:5	378:5	18	TIFFSwabLong8
LEAF_NODE	378:18	378:18	17	(
ARGUMENT	378:19	378:19	17	& nextnextdir
UNARY_EXPR	378:19	378:20	18	& nextnextdir
UNARY_OPERATOR	378:19	378:19	19	&
LEAF_NODE	378:19	378:19	20	&
FIELD	378:20	378:20	19	nextnextdir
LEAF_NODE	378:20	378:20	20	nextnextdir
LEAF_NODE	378:31	378:31	17	)
LEAF_NODE	378:32	378:32	15	;
SELECTION	379:4	380:4	12	
KEYWORD	379:4	379:4	13	if
LEAF_NODE	379:4	379:4	14	if
LEAF_NODE	379:7	379:7	13	(
CONDITION	379:8	379:8	13	nextnextdir == tif -> tif_diroff
EXPR	379:8	379:21	14	nextnextdir == tif -> tif_diroff
FIELD	379:8	379:8	15	nextnextdir
LEAF_NODE	379:8	379:8	16	nextnextdir
EQ_OPERATOR	379:19	379:19	15	==
LEAF_NODE	379:19	379:19	16	==
FIELD	379:21	379:26	15	tif -> tif_diroff
LEAF_NODE	379:21	379:21	16	tif
LEAF_NODE	379:24	379:24	16	->
LEAF_NODE	379:26	379:26	16	tif_diroff
LEAF_NODE	379:36	379:36	13	)
STATEMENTS	380:4	392:4	13	
LEAF_NODE	380:4	380:4	14	{
STATEMENTS	381:5	391:5	14	
SIMPLE_DECL	381:5	381:13	15	uint64 m ;
VAR_DECL	381:5	381:12	16	uint64 m
TYPE	381:5	381:5	17	uint64
TYPE_NAME	381:5	381:5	18	uint64
LEAF_NODE	381:5	381:5	19	uint64
NAME	381:12	381:12	17	m
LEAF_NODE	381:12	381:12	18	m
LEAF_NODE	381:13	381:13	16	;
EXPR_STATEMENT	382:5	382:8	15	m = 0 ;
EXPR	382:5	382:5	16	m = 0
ASSIGN	382:5	382:7	17	m = 0
LVAL	382:5	382:5	18	m
FIELD	382:5	382:5	19	m
LEAF_NODE	382:5	382:5	20	m
ASSIGN_OP	382:6	382:6	18	=
LEAF_NODE	382:6	382:6	19	=
RVAL	382:7	382:7	18	0
FIELD	382:7	382:7	19	0
LEAF_NODE	382:7	382:7	20	0
LEAF_NODE	382:8	382:8	16	;
EXPR_STATEMENT	383:5	384:41	15	( void ) TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET ) ;
EXPR	383:5	383:12	16	( void ) TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET )
LEAF_NODE	383:5	383:5	17	(
TYPE_NAME	383:6	383:6	17	void
LEAF_NODE	383:6	383:6	18	void
LEAF_NODE	383:10	383:10	17	)
FUNCTION_CALL	383:12	384:40	17	TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET )
CALLEE	383:12	383:12	18	TIFFSeekFile
LEAF_NODE	383:12	383:12	19	TIFFSeekFile
LEAF_NODE	383:24	383:24	18	(
ARGUMENT	383:25	383:25	18	tif
FIELD	383:25	383:25	19	tif
LEAF_NODE	383:25	383:25	20	tif
LEAF_NODE	383:28	383:28	18	,
ARGUMENT	384:9	384:28	18	nextdir + 8 + dircount * 20
FIELD	384:9	384:9	19	nextdir
LEAF_NODE	384:9	384:9	20	nextdir
LEAF_NODE	384:16	384:16	19	+
FIELD	384:17	384:17	19	8
LEAF_NODE	384:17	384:17	20	8
LEAF_NODE	384:18	384:18	19	+
FIELD	384:19	384:19	19	dircount
LEAF_NODE	384:19	384:19	20	dircount
LEAF_NODE	384:27	384:27	19	*
FIELD	384:28	384:28	19	20
LEAF_NODE	384:28	384:28	20	20
LEAF_NODE	384:30	384:30	18	,
ARGUMENT	384:32	384:32	18	SEEK_SET
FIELD	384:32	384:32	19	SEEK_SET
LEAF_NODE	384:32	384:32	20	SEEK_SET
LEAF_NODE	384:40	384:40	18	)
LEAF_NODE	384:41	384:41	16	;
SELECTION	385:5	385:31	15	
KEYWORD	385:5	385:5	16	if
LEAF_NODE	385:5	385:5	17	if
LEAF_NODE	385:8	385:8	16	(
CONDITION	385:9	385:9	16	! WriteOK ( tif , & m , 8 )
EXPR	385:9	385:9	17	! WriteOK ( tif , & m , 8 )
UNARY_EXPR	385:9	385:10	18	! WriteOK ( tif , & m , 8 )
UNARY_OPERATOR	385:9	385:9	19	!
LEAF_NODE	385:9	385:9	20	!
FUNCTION_CALL	385:10	385:28	19	WriteOK ( tif , & m , 8 )
CALLEE	385:10	385:10	20	WriteOK
LEAF_NODE	385:10	385:10	21	WriteOK
LEAF_NODE	385:17	385:17	20	(
ARGUMENT	385:18	385:18	20	tif
FIELD	385:18	385:18	21	tif
LEAF_NODE	385:18	385:18	22	tif
LEAF_NODE	385:21	385:21	20	,
ARGUMENT	385:23	385:23	20	& m
UNARY_EXPR	385:23	385:24	21	& m
UNARY_OPERATOR	385:23	385:23	22	&
LEAF_NODE	385:23	385:23	23	&
FIELD	385:24	385:24	22	m
LEAF_NODE	385:24	385:24	23	m
LEAF_NODE	385:25	385:25	20	,
ARGUMENT	385:27	385:27	20	8
FIELD	385:27	385:27	21	8
LEAF_NODE	385:27	385:27	22	8
LEAF_NODE	385:28	385:28	20	)
LEAF_NODE	385:29	385:29	16	)
STATEMENTS	385:31	389:5	16	
LEAF_NODE	385:31	385:31	17	{
STATEMENTS	386:6	388:6	17	
EXPR_STATEMENT	386:6	387:42	18	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" ) ;
EXPR	386:6	386:6	19	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
FUNCTION_CALL	386:6	387:41	20	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
CALLEE	386:6	386:6	21	TIFFErrorExt
LEAF_NODE	386:6	386:6	22	TIFFErrorExt
LEAF_NODE	386:18	386:18	21	(
ARGUMENT	386:19	386:19	21	tif -> tif_clientdata
FIELD	386:19	386:24	22	tif -> tif_clientdata
LEAF_NODE	386:19	386:19	23	tif
LEAF_NODE	386:22	386:22	23	->
LEAF_NODE	386:24	386:24	23	tif_clientdata
LEAF_NODE	386:38	386:38	21	,
ARGUMENT	386:40	386:40	21	module
FIELD	386:40	386:40	22	module
LEAF_NODE	386:40	386:40	23	module
LEAF_NODE	386:46	386:46	21	,
ARGUMENT	387:11	387:11	21	"Error writing directory link"
FIELD	387:11	387:11	22	"Error writing directory link"
LEAF_NODE	387:11	387:11	23	"Error writing directory link"
LEAF_NODE	387:41	387:41	21	)
LEAF_NODE	387:42	387:42	19	;
JUMP_STATEMENT	388:6	388:16	18	return ( 0 ) ;
KEYWORD	388:6	388:6	19	return
LEAF_NODE	388:6	388:6	20	return
DESTINATION	388:13	388:13	19	( 0 )
EXPR	388:13	388:15	20	( 0 )
LEAF_NODE	388:13	388:13	21	(
FIELD	388:14	388:14	21	0
LEAF_NODE	388:14	388:14	22	0
LEAF_NODE	388:15	388:15	21	)
LEAF_NODE	388:16	388:16	19	;
LEAF_NODE	389:5	389:5	17	}
EXPR_STATEMENT	390:5	390:22	15	tif -> tif_diroff = 0 ;
EXPR	390:5	390:5	16	tif -> tif_diroff = 0
ASSIGN	390:5	390:21	17	tif -> tif_diroff = 0
LVAL	390:5	390:5	18	tif -> tif_diroff
FIELD	390:5	390:10	19	tif -> tif_diroff
LEAF_NODE	390:5	390:5	20	tif
LEAF_NODE	390:8	390:8	20	->
LEAF_NODE	390:10	390:10	20	tif_diroff
ASSIGN_OP	390:20	390:20	18	=
LEAF_NODE	390:20	390:20	19	=
RVAL	390:21	390:21	18	0
FIELD	390:21	390:21	19	0
LEAF_NODE	390:21	390:21	20	0
LEAF_NODE	390:22	390:22	16	;
JUMP_STATEMENT	391:5	391:10	15	break DESTINATION ;
KEYWORD	391:5	391:5	16	break
LEAF_NODE	391:5	391:5	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	391:10	391:10	16	;
LEAF_NODE	392:4	392:4	14	}
EXPR_STATEMENT	393:4	393:23	12	nextdir = nextnextdir ;
EXPR	393:4	393:4	13	nextdir = nextnextdir
ASSIGN	393:4	393:12	14	nextdir = nextnextdir
LVAL	393:4	393:4	15	nextdir
FIELD	393:4	393:4	16	nextdir
LEAF_NODE	393:4	393:4	17	nextdir
ASSIGN_OP	393:11	393:11	15	=
LEAF_NODE	393:11	393:11	16	=
RVAL	393:12	393:12	15	nextnextdir
FIELD	393:12	393:12	16	nextnextdir
LEAF_NODE	393:12	393:12	17	nextnextdir
LEAF_NODE	393:23	393:23	13	;
LEAF_NODE	394:3	394:3	11	}
LEAF_NODE	395:2	395:2	8	}
LEAF_NODE	396:1	396:1	5	}
JUMP_STATEMENT	402:1	402:33	3	return TIFFWriteDirectory ( tif ) ;
KEYWORD	402:1	402:1	4	return
LEAF_NODE	402:1	402:1	5	return
DESTINATION	402:8	402:8	4	TIFFWriteDirectory ( tif )
EXPR	402:8	402:8	5	TIFFWriteDirectory ( tif )
FUNCTION_CALL	402:8	402:32	6	TIFFWriteDirectory ( tif )
CALLEE	402:8	402:8	7	TIFFWriteDirectory
LEAF_NODE	402:8	402:8	8	TIFFWriteDirectory
LEAF_NODE	402:26	402:26	7	(
ARGUMENT	402:28	402:28	7	tif
FIELD	402:28	402:28	8	tif
LEAF_NODE	402:28	402:28	9	tif
LEAF_NODE	402:32	402:32	7	)
LEAF_NODE	402:33	402:33	4	;
LEAF_NODE	403:0	403:0	2	}
FUNCTION_DEF	405:0	991:0	1	
RETURN_TYPE	405:0	405:7	2	static int
LEAF_NODE	405:0	405:0	3	static
TYPE_NAME	405:7	405:7	3	int
LEAF_NODE	405:7	405:7	4	int
FUNCTION_NAME	406:0	406:0	2	TIFFWriteDirectorySec
LEAF_NODE	406:0	406:0	3	TIFFWriteDirectorySec
PARAMETER_LIST	406:21	406:76	2	( TIFF * tif , int isimage , int imagedone , uint64 * pdiroff )
LEAF_NODE	406:21	406:21	3	(
PARAMETER_DECL	406:22	406:28	3	TIFF * tif
TYPE	406:22	406:26	4	TIFF *
TYPE_NAME	406:22	406:22	5	TIFF
LEAF_NODE	406:22	406:22	6	TIFF
POINTER	406:26	406:26	5	*
LEAF_NODE	406:26	406:26	6	*
NAME	406:28	406:28	4	tif
LEAF_NODE	406:28	406:28	5	tif
LEAF_NODE	406:31	406:31	3	,
PARAMETER_DECL	406:33	406:37	3	int isimage
TYPE	406:33	406:33	4	int
TYPE_NAME	406:33	406:33	5	int
LEAF_NODE	406:33	406:33	6	int
NAME	406:37	406:37	4	isimage
LEAF_NODE	406:37	406:37	5	isimage
LEAF_NODE	406:44	406:44	3	,
PARAMETER_DECL	406:46	406:50	3	int imagedone
TYPE	406:46	406:46	4	int
TYPE_NAME	406:46	406:46	5	int
LEAF_NODE	406:46	406:46	6	int
NAME	406:50	406:50	4	imagedone
LEAF_NODE	406:50	406:50	5	imagedone
LEAF_NODE	406:59	406:59	3	,
PARAMETER_DECL	406:61	406:69	3	uint64 * pdiroff
TYPE	406:61	406:67	4	uint64 *
TYPE_NAME	406:61	406:61	5	uint64
LEAF_NODE	406:61	406:61	6	uint64
POINTER	406:67	406:67	5	*
LEAF_NODE	406:67	406:67	6	*
NAME	406:69	406:69	4	pdiroff
LEAF_NODE	406:69	406:69	5	pdiroff
LEAF_NODE	406:76	406:76	3	)
LEAF_NODE	407:0	407:0	2	{
STATEMENTS	408:1	990:1	2	
LEAF_NODE	408:1	408:1	3	static
SIMPLE_DECL	408:8	408:53	3	const char [ ] module ; module = "TIFFWriteDirectorySec" ;
VAR_DECL	408:8	408:19	4	const char [ ] module ; module = "TIFFWriteDirectorySec"
TYPE	408:8	408:25	5	const char [ ]
TYPE_NAME	408:8	408:14	6	const char
LEAF_NODE	408:8	408:8	7	const
LEAF_NODE	408:14	408:14	7	char
TYPE_SUFFIX	408:25	408:26	6	[ ]
LEAF_NODE	408:25	408:25	7	[
LEAF_NODE	408:26	408:26	7	]
NAME	408:19	408:19	5	module
LEAF_NODE	408:19	408:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	408:19	408:19	5	module = "TIFFWriteDirectorySec"
ASSIGN	408:19	408:30	6	module = "TIFFWriteDirectorySec"
LVAL	408:19	408:19	7	module
NAME	408:19	408:19	8	module
LEAF_NODE	408:19	408:19	9	module
ASSIGN_OP	408:28	408:28	7	=
LEAF_NODE	408:28	408:28	8	=
RVAL	408:30	408:30	7	"TIFFWriteDirectorySec"
FIELD	408:30	408:30	8	"TIFFWriteDirectorySec"
LEAF_NODE	408:30	408:30	9	"TIFFWriteDirectorySec"
LEAF_NODE	408:53	408:53	4	;
SIMPLE_DECL	409:1	409:12	3	uint32 ndir ;
VAR_DECL	409:1	409:8	4	uint32 ndir
TYPE	409:1	409:1	5	uint32
TYPE_NAME	409:1	409:1	6	uint32
LEAF_NODE	409:1	409:1	7	uint32
NAME	409:8	409:8	5	ndir
LEAF_NODE	409:8	409:8	6	ndir
LEAF_NODE	409:12	409:12	4	;
SIMPLE_DECL	410:1	410:18	3	TIFFDirEntry * dir ;
VAR_DECL	410:1	410:15	4	TIFFDirEntry * dir
TYPE	410:1	410:13	5	TIFFDirEntry *
TYPE_NAME	410:1	410:1	6	TIFFDirEntry
LEAF_NODE	410:1	410:1	7	TIFFDirEntry
POINTER	410:13	410:13	6	*
LEAF_NODE	410:13	410:13	7	*
NAME	410:15	410:15	5	dir
LEAF_NODE	410:15	410:15	6	dir
LEAF_NODE	410:18	410:18	4	;
SIMPLE_DECL	411:1	411:15	3	uint32 dirsize ;
VAR_DECL	411:1	411:8	4	uint32 dirsize
TYPE	411:1	411:1	5	uint32
TYPE_NAME	411:1	411:1	6	uint32
LEAF_NODE	411:1	411:1	7	uint32
NAME	411:8	411:8	5	dirsize
LEAF_NODE	411:8	411:8	6	dirsize
LEAF_NODE	411:15	411:15	4	;
SIMPLE_DECL	412:1	412:13	3	void * dirmem ;
VAR_DECL	412:1	412:7	4	void * dirmem
TYPE	412:1	412:5	5	void *
TYPE_NAME	412:1	412:1	6	void
LEAF_NODE	412:1	412:1	7	void
POINTER	412:5	412:5	6	*
LEAF_NODE	412:5	412:5	7	*
NAME	412:7	412:7	5	dirmem
LEAF_NODE	412:7	412:7	6	dirmem
LEAF_NODE	412:13	412:13	4	;
SIMPLE_DECL	413:1	413:9	3	uint32 m ;
VAR_DECL	413:1	413:8	4	uint32 m
TYPE	413:1	413:1	5	uint32
TYPE_NAME	413:1	413:1	6	uint32
LEAF_NODE	413:1	413:1	7	uint32
NAME	413:8	413:8	5	m
LEAF_NODE	413:8	413:8	6	m
LEAF_NODE	413:9	413:9	4	;
SELECTION	414:1	415:2	3	
KEYWORD	414:1	414:1	4	if
LEAF_NODE	414:1	414:1	5	if
LEAF_NODE	414:4	414:4	4	(
CONDITION	414:5	414:5	4	tif -> tif_mode == O_RDONLY
EXPR	414:5	414:22	5	tif -> tif_mode == O_RDONLY
FIELD	414:5	414:10	6	tif -> tif_mode
LEAF_NODE	414:5	414:5	7	tif
LEAF_NODE	414:8	414:8	7	->
LEAF_NODE	414:10	414:10	7	tif_mode
EQ_OPERATOR	414:19	414:19	6	==
LEAF_NODE	414:19	414:19	7	==
FIELD	414:22	414:22	6	O_RDONLY
LEAF_NODE	414:22	414:22	7	O_RDONLY
LEAF_NODE	414:30	414:30	4	)
STATEMENTS	415:2	415:2	4	
JUMP_STATEMENT	415:2	415:12	5	return ( 1 ) ;
KEYWORD	415:2	415:2	6	return
LEAF_NODE	415:2	415:2	7	return
DESTINATION	415:9	415:9	6	( 1 )
EXPR	415:9	415:11	7	( 1 )
LEAF_NODE	415:9	415:9	8	(
FIELD	415:10	415:10	8	1
LEAF_NODE	415:10	415:10	9	1
LEAF_NODE	415:11	415:11	8	)
LEAF_NODE	415:12	415:12	6	;
EXPR_STATEMENT	417:8	417:31	3	_TIFFFillStriles ( tif ) ;
EXPR	417:8	417:8	4	_TIFFFillStriles ( tif )
FUNCTION_CALL	417:8	417:30	5	_TIFFFillStriles ( tif )
CALLEE	417:8	417:8	6	_TIFFFillStriles
LEAF_NODE	417:8	417:8	7	_TIFFFillStriles
LEAF_NODE	417:24	417:24	6	(
ARGUMENT	417:26	417:26	6	tif
FIELD	417:26	417:26	7	tif
LEAF_NODE	417:26	417:26	8	tif
LEAF_NODE	417:30	417:30	6	)
LEAF_NODE	417:31	417:31	4	;
SELECTION	424:1	425:1	3	
KEYWORD	424:1	424:1	4	if
LEAF_NODE	424:1	424:1	5	if
LEAF_NODE	424:4	424:4	4	(
CONDITION	424:5	424:5	4	imagedone
EXPR	424:5	424:5	5	imagedone
FIELD	424:5	424:5	6	imagedone
LEAF_NODE	424:5	424:5	7	imagedone
LEAF_NODE	424:14	424:14	4	)
STATEMENTS	425:1	464:1	4	
LEAF_NODE	425:1	425:1	5	{
STATEMENTS	426:2	463:2	5	
SELECTION	426:2	427:2	6	
KEYWORD	426:2	426:2	7	if
LEAF_NODE	426:2	426:2	8	if
LEAF_NODE	426:5	426:5	7	(
CONDITION	426:6	426:6	7	tif -> tif_flags & TIFF_POSTENCODE
EXPR	426:6	426:23	8	tif -> tif_flags & TIFF_POSTENCODE
FIELD	426:6	426:11	9	tif -> tif_flags
LEAF_NODE	426:6	426:6	10	tif
LEAF_NODE	426:9	426:9	10	->
LEAF_NODE	426:11	426:11	10	tif_flags
LEAF_NODE	426:21	426:21	9	&
FIELD	426:23	426:23	9	TIFF_POSTENCODE
LEAF_NODE	426:23	426:23	10	TIFF_POSTENCODE
LEAF_NODE	426:38	426:38	7	)
STATEMENTS	427:2	435:2	7	
LEAF_NODE	427:2	427:2	8	{
STATEMENTS	428:3	429:3	8	
EXPR_STATEMENT	428:3	428:37	9	tif -> tif_flags &= ~TIFF_POSTENCODE ;
EXPR	428:3	428:3	10	tif -> tif_flags &= ~TIFF_POSTENCODE
ASSIGN	428:3	428:21	11	tif -> tif_flags &= ~TIFF_POSTENCODE
LVAL	428:3	428:3	12	tif -> tif_flags
FIELD	428:3	428:8	13	tif -> tif_flags
LEAF_NODE	428:3	428:3	14	tif
LEAF_NODE	428:6	428:6	14	->
LEAF_NODE	428:8	428:8	14	tif_flags
ASSIGN_OP	428:18	428:18	12	&=
LEAF_NODE	428:18	428:18	13	&=
RVAL	428:21	428:21	12	~TIFF_POSTENCODE
FIELD	428:21	428:21	13	~TIFF_POSTENCODE
LEAF_NODE	428:21	428:21	14	~TIFF_POSTENCODE
LEAF_NODE	428:37	428:37	10	;
SELECTION	429:3	430:3	9	
KEYWORD	429:3	429:3	10	if
LEAF_NODE	429:3	429:3	11	if
LEAF_NODE	429:6	429:6	10	(
CONDITION	429:7	429:7	10	! ( * tif -> tif_postencode ) ( tif )
EXPR	429:7	429:7	11	! ( * tif -> tif_postencode ) ( tif )
UNARY_EXPR	429:7	429:8	12	! ( * tif -> tif_postencode ) ( tif )
UNARY_OPERATOR	429:7	429:7	13	!
LEAF_NODE	429:7	429:7	14	!
FUNCTION_CALL	429:8	429:34	13	( * tif -> tif_postencode ) ( tif )
CALLEE	429:8	429:29	14	( * tif -> tif_postencode )
LEAF_NODE	429:8	429:8	15	(
UNARY_EXPR	429:9	429:10	15	* tif -> tif_postencode
UNARY_OPERATOR	429:9	429:9	16	*
LEAF_NODE	429:9	429:9	17	*
FIELD	429:10	429:15	16	tif -> tif_postencode
LEAF_NODE	429:10	429:10	17	tif
LEAF_NODE	429:13	429:13	17	->
LEAF_NODE	429:15	429:15	17	tif_postencode
LEAF_NODE	429:29	429:29	15	)
LEAF_NODE	429:30	429:30	14	(
ARGUMENT	429:31	429:31	14	tif
FIELD	429:31	429:31	15	tif
LEAF_NODE	429:31	429:31	16	tif
LEAF_NODE	429:34	429:34	14	)
LEAF_NODE	429:35	429:35	10	)
STATEMENTS	430:3	434:3	10	
LEAF_NODE	430:3	430:3	11	{
STATEMENTS	431:4	433:4	11	
EXPR_STATEMENT	431:4	432:53	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error post-encoding before directory write" ) ;
EXPR	431:4	431:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error post-encoding before directory write" )
FUNCTION_CALL	431:4	432:52	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error post-encoding before directory write" )
CALLEE	431:4	431:4	15	TIFFErrorExt
LEAF_NODE	431:4	431:4	16	TIFFErrorExt
LEAF_NODE	431:16	431:16	15	(
ARGUMENT	431:17	431:17	15	tif -> tif_clientdata
FIELD	431:17	431:22	16	tif -> tif_clientdata
LEAF_NODE	431:17	431:17	17	tif
LEAF_NODE	431:20	431:20	17	->
LEAF_NODE	431:22	431:22	17	tif_clientdata
LEAF_NODE	431:36	431:36	15	,
ARGUMENT	431:37	431:37	15	module
FIELD	431:37	431:37	16	module
LEAF_NODE	431:37	431:37	17	module
LEAF_NODE	431:43	431:43	15	,
ARGUMENT	432:8	432:8	15	"Error post-encoding before directory write"
FIELD	432:8	432:8	16	"Error post-encoding before directory write"
LEAF_NODE	432:8	432:8	17	"Error post-encoding before directory write"
LEAF_NODE	432:52	432:52	15	)
LEAF_NODE	432:53	432:53	13	;
JUMP_STATEMENT	433:4	433:14	12	return ( 0 ) ;
KEYWORD	433:4	433:4	13	return
LEAF_NODE	433:4	433:4	14	return
DESTINATION	433:11	433:11	13	( 0 )
EXPR	433:11	433:13	14	( 0 )
LEAF_NODE	433:11	433:11	15	(
FIELD	433:12	433:12	15	0
LEAF_NODE	433:12	433:12	16	0
LEAF_NODE	433:13	433:13	15	)
LEAF_NODE	433:14	433:14	13	;
LEAF_NODE	434:3	434:3	11	}
LEAF_NODE	435:2	435:2	8	}
EXPR_STATEMENT	436:2	436:24	6	( * tif -> tif_close ) ( tif ) ;
EXPR	436:2	436:2	7	( * tif -> tif_close ) ( tif )
FUNCTION_CALL	436:2	436:23	8	( * tif -> tif_close ) ( tif )
CALLEE	436:2	436:18	9	( * tif -> tif_close )
LEAF_NODE	436:2	436:2	10	(
UNARY_EXPR	436:3	436:4	10	* tif -> tif_close
UNARY_OPERATOR	436:3	436:3	11	*
LEAF_NODE	436:3	436:3	12	*
FIELD	436:4	436:9	11	tif -> tif_close
LEAF_NODE	436:4	436:4	12	tif
LEAF_NODE	436:7	436:7	12	->
LEAF_NODE	436:9	436:9	12	tif_close
LEAF_NODE	436:18	436:18	10	)
LEAF_NODE	436:19	436:19	9	(
ARGUMENT	436:20	436:20	9	tif
FIELD	436:20	436:20	10	tif
LEAF_NODE	436:20	436:20	11	tif
LEAF_NODE	436:23	436:23	9	)
LEAF_NODE	436:24	436:24	7	;
SELECTION	444:2	446:2	6	
KEYWORD	444:2	444:2	7	if
LEAF_NODE	444:2	444:2	8	if
LEAF_NODE	444:5	444:5	7	(
CONDITION	444:6	444:6	7	tif -> tif_rawcc > 0 && ( tif -> tif_flags & TIFF_BEENWRITING ) != 0
EXPR	444:6	444:6	8	tif -> tif_rawcc > 0 && ( tif -> tif_flags & TIFF_BEENWRITING ) != 0
AND	444:6	445:9	9	tif -> tif_rawcc > 0 && ( tif -> tif_flags & TIFF_BEENWRITING ) != 0
EXPR	444:6	444:23	10	tif -> tif_rawcc > 0
FIELD	444:6	444:11	11	tif -> tif_rawcc
LEAF_NODE	444:6	444:6	12	tif
LEAF_NODE	444:9	444:9	12	->
LEAF_NODE	444:11	444:11	12	tif_rawcc
REL_OPERATOR	444:21	444:21	11	>
LEAF_NODE	444:21	444:21	12	>
FIELD	444:23	444:23	11	0
LEAF_NODE	444:23	444:23	12	0
LEAF_NODE	445:6	445:6	10	&&
EXPR	445:9	445:48	10	( tif -> tif_flags & TIFF_BEENWRITING ) != 0
LEAF_NODE	445:9	445:9	11	(
FIELD	445:10	445:15	11	tif -> tif_flags
LEAF_NODE	445:10	445:10	12	tif
LEAF_NODE	445:13	445:13	12	->
LEAF_NODE	445:15	445:15	12	tif_flags
LEAF_NODE	445:25	445:25	11	&
FIELD	445:27	445:27	11	TIFF_BEENWRITING
LEAF_NODE	445:27	445:27	12	TIFF_BEENWRITING
LEAF_NODE	445:43	445:43	11	)
EQ_OPERATOR	445:45	445:45	11	!=
LEAF_NODE	445:45	445:45	12	!=
FIELD	445:48	445:48	11	0
LEAF_NODE	445:48	445:48	12	0
LEAF_NODE	445:50	445:50	7	)
STATEMENTS	446:2	453:2	7	
LEAF_NODE	446:2	446:2	8	{
STATEMENTS	447:6	447:6	8	
SELECTION	447:6	448:20	9	
KEYWORD	447:6	447:6	10	if
LEAF_NODE	447:6	447:6	11	if
LEAF_NODE	447:8	447:8	10	(
CONDITION	447:10	447:10	10	! TIFFFlushData1 ( tif )
EXPR	447:10	447:10	11	! TIFFFlushData1 ( tif )
UNARY_EXPR	447:10	447:11	12	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	447:10	447:10	13	!
LEAF_NODE	447:10	447:10	14	!
FUNCTION_CALL	447:11	447:29	13	TIFFFlushData1 ( tif )
CALLEE	447:11	447:11	14	TIFFFlushData1
LEAF_NODE	447:11	447:11	15	TIFFFlushData1
LEAF_NODE	447:25	447:25	14	(
ARGUMENT	447:26	447:26	14	tif
FIELD	447:26	447:26	15	tif
LEAF_NODE	447:26	447:26	16	tif
LEAF_NODE	447:29	447:29	14	)
LEAF_NODE	447:31	447:31	10	)
STATEMENTS	448:20	452:20	10	
LEAF_NODE	448:20	448:20	11	{
STATEMENTS	449:3	451:3	11	
EXPR_STATEMENT	449:3	450:52	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error flushing data before directory write" ) ;
EXPR	449:3	449:3	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error flushing data before directory write" )
FUNCTION_CALL	449:3	450:51	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error flushing data before directory write" )
CALLEE	449:3	449:3	15	TIFFErrorExt
LEAF_NODE	449:3	449:3	16	TIFFErrorExt
LEAF_NODE	449:15	449:15	15	(
ARGUMENT	449:16	449:16	15	tif -> tif_clientdata
FIELD	449:16	449:21	16	tif -> tif_clientdata
LEAF_NODE	449:16	449:16	17	tif
LEAF_NODE	449:19	449:19	17	->
LEAF_NODE	449:21	449:21	17	tif_clientdata
LEAF_NODE	449:35	449:35	15	,
ARGUMENT	449:37	449:37	15	module
FIELD	449:37	449:37	16	module
LEAF_NODE	449:37	449:37	17	module
LEAF_NODE	449:43	449:43	15	,
ARGUMENT	450:7	450:7	15	"Error flushing data before directory write"
FIELD	450:7	450:7	16	"Error flushing data before directory write"
LEAF_NODE	450:7	450:7	17	"Error flushing data before directory write"
LEAF_NODE	450:51	450:51	15	)
LEAF_NODE	450:52	450:52	13	;
JUMP_STATEMENT	451:3	451:13	12	return ( 0 ) ;
KEYWORD	451:3	451:3	13	return
LEAF_NODE	451:3	451:3	14	return
DESTINATION	451:10	451:10	13	( 0 )
EXPR	451:10	451:12	14	( 0 )
LEAF_NODE	451:10	451:10	15	(
FIELD	451:11	451:11	15	0
LEAF_NODE	451:11	451:11	16	0
LEAF_NODE	451:12	451:12	15	)
LEAF_NODE	451:13	451:13	13	;
LEAF_NODE	452:20	452:20	11	}
LEAF_NODE	453:2	453:2	8	}
SELECTION	454:2	455:2	6	
KEYWORD	454:2	454:2	7	if
LEAF_NODE	454:2	454:2	8	if
LEAF_NODE	454:5	454:5	7	(
CONDITION	454:6	454:6	7	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
EXPR	454:6	454:6	8	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
AND	454:6	454:42	9	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
EXPR	454:6	454:37	10	( tif -> tif_flags & TIFF_MYBUFFER )
LEAF_NODE	454:6	454:6	11	(
FIELD	454:7	454:12	11	tif -> tif_flags
LEAF_NODE	454:7	454:7	12	tif
LEAF_NODE	454:10	454:10	12	->
LEAF_NODE	454:12	454:12	12	tif_flags
LEAF_NODE	454:22	454:22	11	&
FIELD	454:24	454:24	11	TIFF_MYBUFFER
LEAF_NODE	454:24	454:24	12	TIFF_MYBUFFER
LEAF_NODE	454:37	454:37	11	)
LEAF_NODE	454:39	454:39	10	&&
EXPR	454:42	454:42	10	tif -> tif_rawdata
FIELD	454:42	454:47	11	tif -> tif_rawdata
LEAF_NODE	454:42	454:42	12	tif
LEAF_NODE	454:45	454:45	12	->
LEAF_NODE	454:47	454:47	12	tif_rawdata
LEAF_NODE	454:58	454:58	7	)
STATEMENTS	455:2	462:2	7	
LEAF_NODE	455:2	455:2	8	{
STATEMENTS	456:3	461:24	8	
EXPR_STATEMENT	456:3	456:30	9	_TIFFfree ( tif -> tif_rawdata ) ;
EXPR	456:3	456:3	10	_TIFFfree ( tif -> tif_rawdata )
FUNCTION_CALL	456:3	456:29	11	_TIFFfree ( tif -> tif_rawdata )
CALLEE	456:3	456:3	12	_TIFFfree
LEAF_NODE	456:3	456:3	13	_TIFFfree
LEAF_NODE	456:12	456:12	12	(
ARGUMENT	456:13	456:13	12	tif -> tif_rawdata
FIELD	456:13	456:18	13	tif -> tif_rawdata
LEAF_NODE	456:13	456:13	14	tif
LEAF_NODE	456:16	456:16	14	->
LEAF_NODE	456:18	456:18	14	tif_rawdata
LEAF_NODE	456:29	456:29	12	)
LEAF_NODE	456:30	456:30	10	;
EXPR_STATEMENT	457:3	457:26	9	tif -> tif_rawdata = NULL ;
EXPR	457:3	457:3	10	tif -> tif_rawdata = NULL
ASSIGN	457:3	457:22	11	tif -> tif_rawdata = NULL
LVAL	457:3	457:3	12	tif -> tif_rawdata
FIELD	457:3	457:8	13	tif -> tif_rawdata
LEAF_NODE	457:3	457:3	14	tif
LEAF_NODE	457:6	457:6	14	->
LEAF_NODE	457:8	457:8	14	tif_rawdata
ASSIGN_OP	457:20	457:20	12	=
LEAF_NODE	457:20	457:20	13	=
RVAL	457:22	457:22	12	NULL
FIELD	457:22	457:22	13	NULL
LEAF_NODE	457:22	457:22	14	NULL
LEAF_NODE	457:26	457:26	10	;
EXPR_STATEMENT	458:3	458:21	9	tif -> tif_rawcc = 0 ;
EXPR	458:3	458:3	10	tif -> tif_rawcc = 0
ASSIGN	458:3	458:20	11	tif -> tif_rawcc = 0
LVAL	458:3	458:3	12	tif -> tif_rawcc
FIELD	458:3	458:8	13	tif -> tif_rawcc
LEAF_NODE	458:3	458:3	14	tif
LEAF_NODE	458:6	458:6	14	->
LEAF_NODE	458:8	458:8	14	tif_rawcc
ASSIGN_OP	458:18	458:18	12	=
LEAF_NODE	458:18	458:18	13	=
RVAL	458:20	458:20	12	0
FIELD	458:20	458:20	13	0
LEAF_NODE	458:20	458:20	14	0
LEAF_NODE	458:21	458:21	10	;
EXPR_STATEMENT	459:3	459:27	9	tif -> tif_rawdatasize = 0 ;
EXPR	459:3	459:3	10	tif -> tif_rawdatasize = 0
ASSIGN	459:3	459:26	11	tif -> tif_rawdatasize = 0
LVAL	459:3	459:3	12	tif -> tif_rawdatasize
FIELD	459:3	459:8	13	tif -> tif_rawdatasize
LEAF_NODE	459:3	459:3	14	tif
LEAF_NODE	459:6	459:6	14	->
LEAF_NODE	459:8	459:8	14	tif_rawdatasize
ASSIGN_OP	459:24	459:24	12	=
LEAF_NODE	459:24	459:24	13	=
RVAL	459:26	459:26	12	0
FIELD	459:26	459:26	13	0
LEAF_NODE	459:26	459:26	14	0
LEAF_NODE	459:27	459:27	10	;
EXPR_STATEMENT	460:24	460:47	9	tif -> tif_rawdataoff = 0 ;
EXPR	460:24	460:24	10	tif -> tif_rawdataoff = 0
ASSIGN	460:24	460:46	11	tif -> tif_rawdataoff = 0
LVAL	460:24	460:24	12	tif -> tif_rawdataoff
FIELD	460:24	460:29	13	tif -> tif_rawdataoff
LEAF_NODE	460:24	460:24	14	tif
LEAF_NODE	460:27	460:27	14	->
LEAF_NODE	460:29	460:29	14	tif_rawdataoff
ASSIGN_OP	460:44	460:44	12	=
LEAF_NODE	460:44	460:44	13	=
RVAL	460:46	460:46	12	0
FIELD	460:46	460:46	13	0
LEAF_NODE	460:46	460:46	14	0
LEAF_NODE	460:47	460:47	10	;
EXPR_STATEMENT	461:24	461:50	9	tif -> tif_rawdataloaded = 0 ;
EXPR	461:24	461:24	10	tif -> tif_rawdataloaded = 0
ASSIGN	461:24	461:49	11	tif -> tif_rawdataloaded = 0
LVAL	461:24	461:24	12	tif -> tif_rawdataloaded
FIELD	461:24	461:29	13	tif -> tif_rawdataloaded
LEAF_NODE	461:24	461:24	14	tif
LEAF_NODE	461:27	461:27	14	->
LEAF_NODE	461:29	461:29	14	tif_rawdataloaded
ASSIGN_OP	461:47	461:47	12	=
LEAF_NODE	461:47	461:47	13	=
RVAL	461:49	461:49	12	0
FIELD	461:49	461:49	13	0
LEAF_NODE	461:49	461:49	14	0
LEAF_NODE	461:50	461:50	10	;
LEAF_NODE	462:2	462:2	8	}
EXPR_STATEMENT	463:2	463:56	6	tif -> tif_flags &= ~ ( TIFF_BEENWRITING | TIFF_BUFFERSETUP ) ;
EXPR	463:2	463:2	7	tif -> tif_flags &= ~ ( TIFF_BEENWRITING | TIFF_BUFFERSETUP )
ASSIGN	463:2	463:20	8	tif -> tif_flags &= ~ ( TIFF_BEENWRITING | TIFF_BUFFERSETUP )
LVAL	463:2	463:2	9	tif -> tif_flags
FIELD	463:2	463:7	10	tif -> tif_flags
LEAF_NODE	463:2	463:2	11	tif
LEAF_NODE	463:5	463:5	11	->
LEAF_NODE	463:7	463:7	11	tif_flags
ASSIGN_OP	463:17	463:17	9	&=
LEAF_NODE	463:17	463:17	10	&=
RVAL	463:20	463:20	9	~ ( TIFF_BEENWRITING | TIFF_BUFFERSETUP )
UNARY_EXPR	463:20	463:55	10	~ ( TIFF_BEENWRITING | TIFF_BUFFERSETUP )
UNARY_OPERATOR	463:20	463:20	11	~
LEAF_NODE	463:20	463:20	12	~
LEAF_NODE	463:21	463:21	11	(
BIT_OR	463:22	463:39	11	TIFF_BEENWRITING | TIFF_BUFFERSETUP
BIT_OR_ELEM	463:22	463:22	12	TIFF_BEENWRITING
FIELD	463:22	463:22	13	TIFF_BEENWRITING
LEAF_NODE	463:22	463:22	14	TIFF_BEENWRITING
LEAF_NODE	463:38	463:38	12	|
BIT_OR_ELEM	463:39	463:39	12	TIFF_BUFFERSETUP
FIELD	463:39	463:39	13	TIFF_BUFFERSETUP
LEAF_NODE	463:39	463:39	14	TIFF_BUFFERSETUP
LEAF_NODE	463:55	463:55	11	)
LEAF_NODE	463:56	463:56	7	;
LEAF_NODE	464:1	464:1	5	}
EXPR_STATEMENT	465:1	465:9	3	dir = NULL ;
EXPR	465:1	465:1	4	dir = NULL
ASSIGN	465:1	465:5	5	dir = NULL
LVAL	465:1	465:1	6	dir
FIELD	465:1	465:1	7	dir
LEAF_NODE	465:1	465:1	8	dir
ASSIGN_OP	465:4	465:4	6	=
LEAF_NODE	465:4	465:4	7	=
RVAL	465:5	465:5	6	NULL
FIELD	465:5	465:5	7	NULL
LEAF_NODE	465:5	465:5	8	NULL
LEAF_NODE	465:9	465:9	4	;
EXPR_STATEMENT	466:1	466:12	3	dirmem = NULL ;
EXPR	466:1	466:1	4	dirmem = NULL
ASSIGN	466:1	466:8	5	dirmem = NULL
LVAL	466:1	466:1	6	dirmem
FIELD	466:1	466:1	7	dirmem
LEAF_NODE	466:1	466:1	8	dirmem
ASSIGN_OP	466:7	466:7	6	=
LEAF_NODE	466:7	466:7	7	=
RVAL	466:8	466:8	6	NULL
FIELD	466:8	466:8	7	NULL
LEAF_NODE	466:8	466:8	8	NULL
LEAF_NODE	466:12	466:12	4	;
EXPR_STATEMENT	467:1	467:10	3	dirsize = 0 ;
EXPR	467:1	467:1	4	dirsize = 0
ASSIGN	467:1	467:9	5	dirsize = 0
LVAL	467:1	467:1	6	dirsize
FIELD	467:1	467:1	7	dirsize
LEAF_NODE	467:1	467:1	8	dirsize
ASSIGN_OP	467:8	467:8	6	=
LEAF_NODE	467:8	467:8	7	=
RVAL	467:9	467:9	6	0
FIELD	467:9	467:9	7	0
LEAF_NODE	467:9	467:9	8	0
LEAF_NODE	467:10	467:10	4	;
ITERATION	468:1	469:1	3	
KEYWORD	468:1	468:1	4	while
LEAF_NODE	468:1	468:1	5	while
LEAF_NODE	468:7	468:7	4	(
CONDITION	468:8	468:8	4	1
EXPR	468:8	468:8	5	1
FIELD	468:8	468:8	6	1
LEAF_NODE	468:8	468:8	7	1
LEAF_NODE	468:9	468:9	4	)
STATEMENTS	469:1	860:1	4	
LEAF_NODE	469:1	469:1	5	{
STATEMENTS	470:2	858:2	5	
EXPR_STATEMENT	470:2	470:8	6	ndir = 0 ;
EXPR	470:2	470:2	7	ndir = 0
ASSIGN	470:2	470:7	8	ndir = 0
LVAL	470:2	470:2	9	ndir
FIELD	470:2	470:2	10	ndir
LEAF_NODE	470:2	470:2	11	ndir
ASSIGN_OP	470:6	470:6	9	=
LEAF_NODE	470:6	470:6	10	=
RVAL	470:7	470:7	9	0
FIELD	470:7	470:7	10	0
LEAF_NODE	470:7	470:7	11	0
LEAF_NODE	470:8	470:8	7	;
SELECTION	471:2	472:2	6	
KEYWORD	471:2	471:2	7	if
LEAF_NODE	471:2	471:2	8	if
LEAF_NODE	471:5	471:5	7	(
CONDITION	471:6	471:6	7	isimage
EXPR	471:6	471:6	8	isimage
FIELD	471:6	471:6	9	isimage
LEAF_NODE	471:6	471:6	10	isimage
LEAF_NODE	471:13	471:13	7	)
STATEMENTS	472:2	751:2	7	
LEAF_NODE	472:2	472:2	8	{
STATEMENTS	473:3	750:3	8	
SELECTION	473:3	474:3	9	
KEYWORD	473:3	473:3	10	if
LEAF_NODE	473:3	473:3	11	if
LEAF_NODE	473:6	473:6	10	(
CONDITION	473:7	473:7	10	TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
EXPR	473:7	473:7	11	TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
FUNCTION_CALL	473:7	473:45	12	TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
CALLEE	473:7	473:7	13	TIFFFieldSet
LEAF_NODE	473:7	473:7	14	TIFFFieldSet
LEAF_NODE	473:19	473:19	13	(
ARGUMENT	473:20	473:20	13	tif
FIELD	473:20	473:20	14	tif
LEAF_NODE	473:20	473:20	15	tif
LEAF_NODE	473:23	473:23	13	,
ARGUMENT	473:24	473:24	13	FIELD_IMAGEDIMENSIONS
FIELD	473:24	473:24	14	FIELD_IMAGEDIMENSIONS
LEAF_NODE	473:24	473:24	15	FIELD_IMAGEDIMENSIONS
LEAF_NODE	473:45	473:45	13	)
LEAF_NODE	473:46	473:46	10	)
STATEMENTS	474:3	479:3	10	
LEAF_NODE	474:3	474:3	11	{
STATEMENTS	475:4	477:4	11	
SELECTION	475:4	476:5	12	
KEYWORD	475:4	475:4	13	if
LEAF_NODE	475:4	475:4	14	if
LEAF_NODE	475:7	475:7	13	(
CONDITION	475:8	475:8	13	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_IMAGEWIDTH , tif -> tif_dir . td_imagewidth )
EXPR	475:8	475:8	14	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_IMAGEWIDTH , tif -> tif_dir . td_imagewidth )
UNARY_EXPR	475:8	475:9	15	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_IMAGEWIDTH , tif -> tif_dir . td_imagewidth )
UNARY_OPERATOR	475:8	475:8	16	!
LEAF_NODE	475:8	475:8	17	!
FUNCTION_CALL	475:9	475:99	16	TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_IMAGEWIDTH , tif -> tif_dir . td_imagewidth )
CALLEE	475:9	475:9	17	TIFFWriteDirectoryTagShortLong
LEAF_NODE	475:9	475:9	18	TIFFWriteDirectoryTagShortLong
LEAF_NODE	475:39	475:39	17	(
ARGUMENT	475:40	475:40	17	tif
FIELD	475:40	475:40	18	tif
LEAF_NODE	475:40	475:40	19	tif
LEAF_NODE	475:43	475:43	17	,
ARGUMENT	475:44	475:44	17	& ndir
UNARY_EXPR	475:44	475:45	18	& ndir
UNARY_OPERATOR	475:44	475:44	19	&
LEAF_NODE	475:44	475:44	20	&
FIELD	475:45	475:45	19	ndir
LEAF_NODE	475:45	475:45	20	ndir
LEAF_NODE	475:49	475:49	17	,
ARGUMENT	475:50	475:50	17	dir
FIELD	475:50	475:50	18	dir
LEAF_NODE	475:50	475:50	19	dir
LEAF_NODE	475:53	475:53	17	,
ARGUMENT	475:54	475:54	17	TIFFTAG_IMAGEWIDTH
FIELD	475:54	475:54	18	TIFFTAG_IMAGEWIDTH
LEAF_NODE	475:54	475:54	19	TIFFTAG_IMAGEWIDTH
LEAF_NODE	475:72	475:72	17	,
ARGUMENT	475:73	475:73	17	tif -> tif_dir . td_imagewidth
FIELD	475:73	475:86	18	tif -> tif_dir . td_imagewidth
LEAF_NODE	475:73	475:73	19	tif
LEAF_NODE	475:76	475:76	19	->
LEAF_NODE	475:78	475:78	19	tif_dir
LEAF_NODE	475:85	475:85	19	.
LEAF_NODE	475:86	475:86	19	td_imagewidth
LEAF_NODE	475:99	475:99	17	)
LEAF_NODE	475:100	475:100	13	)
STATEMENTS	476:5	476:5	13	
JUMP_STATEMENT	476:5	476:13	14	goto bad ;
KEYWORD	476:5	476:5	15	goto
LEAF_NODE	476:5	476:5	16	goto
DESTINATION	476:10	476:10	15	bad
LEAF_NODE	476:10	476:10	16	bad
LEAF_NODE	476:13	476:13	15	;
SELECTION	477:4	478:5	12	
KEYWORD	477:4	477:4	13	if
LEAF_NODE	477:4	477:4	14	if
LEAF_NODE	477:7	477:7	13	(
CONDITION	477:8	477:8	13	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_IMAGELENGTH , tif -> tif_dir . td_imagelength )
EXPR	477:8	477:8	14	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_IMAGELENGTH , tif -> tif_dir . td_imagelength )
UNARY_EXPR	477:8	477:9	15	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_IMAGELENGTH , tif -> tif_dir . td_imagelength )
UNARY_OPERATOR	477:8	477:8	16	!
LEAF_NODE	477:8	477:8	17	!
FUNCTION_CALL	477:9	477:101	16	TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_IMAGELENGTH , tif -> tif_dir . td_imagelength )
CALLEE	477:9	477:9	17	TIFFWriteDirectoryTagShortLong
LEAF_NODE	477:9	477:9	18	TIFFWriteDirectoryTagShortLong
LEAF_NODE	477:39	477:39	17	(
ARGUMENT	477:40	477:40	17	tif
FIELD	477:40	477:40	18	tif
LEAF_NODE	477:40	477:40	19	tif
LEAF_NODE	477:43	477:43	17	,
ARGUMENT	477:44	477:44	17	& ndir
UNARY_EXPR	477:44	477:45	18	& ndir
UNARY_OPERATOR	477:44	477:44	19	&
LEAF_NODE	477:44	477:44	20	&
FIELD	477:45	477:45	19	ndir
LEAF_NODE	477:45	477:45	20	ndir
LEAF_NODE	477:49	477:49	17	,
ARGUMENT	477:50	477:50	17	dir
FIELD	477:50	477:50	18	dir
LEAF_NODE	477:50	477:50	19	dir
LEAF_NODE	477:53	477:53	17	,
ARGUMENT	477:54	477:54	17	TIFFTAG_IMAGELENGTH
FIELD	477:54	477:54	18	TIFFTAG_IMAGELENGTH
LEAF_NODE	477:54	477:54	19	TIFFTAG_IMAGELENGTH
LEAF_NODE	477:73	477:73	17	,
ARGUMENT	477:74	477:74	17	tif -> tif_dir . td_imagelength
FIELD	477:74	477:87	18	tif -> tif_dir . td_imagelength
LEAF_NODE	477:74	477:74	19	tif
LEAF_NODE	477:77	477:77	19	->
LEAF_NODE	477:79	477:79	19	tif_dir
LEAF_NODE	477:86	477:86	19	.
LEAF_NODE	477:87	477:87	19	td_imagelength
LEAF_NODE	477:101	477:101	17	)
LEAF_NODE	477:102	477:102	13	)
STATEMENTS	478:5	478:5	13	
JUMP_STATEMENT	478:5	478:13	14	goto bad ;
KEYWORD	478:5	478:5	15	goto
LEAF_NODE	478:5	478:5	16	goto
DESTINATION	478:10	478:10	15	bad
LEAF_NODE	478:10	478:10	16	bad
LEAF_NODE	478:13	478:13	15	;
LEAF_NODE	479:3	479:3	11	}
SELECTION	480:3	481:3	9	
KEYWORD	480:3	480:3	10	if
LEAF_NODE	480:3	480:3	11	if
LEAF_NODE	480:6	480:6	10	(
CONDITION	480:7	480:7	10	TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
EXPR	480:7	480:7	11	TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
FUNCTION_CALL	480:7	480:44	12	TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
CALLEE	480:7	480:7	13	TIFFFieldSet
LEAF_NODE	480:7	480:7	14	TIFFFieldSet
LEAF_NODE	480:19	480:19	13	(
ARGUMENT	480:20	480:20	13	tif
FIELD	480:20	480:20	14	tif
LEAF_NODE	480:20	480:20	15	tif
LEAF_NODE	480:23	480:23	13	,
ARGUMENT	480:24	480:24	13	FIELD_TILEDIMENSIONS
FIELD	480:24	480:24	14	FIELD_TILEDIMENSIONS
LEAF_NODE	480:24	480:24	15	FIELD_TILEDIMENSIONS
LEAF_NODE	480:44	480:44	13	)
LEAF_NODE	480:45	480:45	10	)
STATEMENTS	481:3	486:3	10	
LEAF_NODE	481:3	481:3	11	{
STATEMENTS	482:4	484:4	11	
SELECTION	482:4	483:5	12	
KEYWORD	482:4	482:4	13	if
LEAF_NODE	482:4	482:4	14	if
LEAF_NODE	482:7	482:7	13	(
CONDITION	482:8	482:8	13	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_TILEWIDTH , tif -> tif_dir . td_tilewidth )
EXPR	482:8	482:8	14	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_TILEWIDTH , tif -> tif_dir . td_tilewidth )
UNARY_EXPR	482:8	482:9	15	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_TILEWIDTH , tif -> tif_dir . td_tilewidth )
UNARY_OPERATOR	482:8	482:8	16	!
LEAF_NODE	482:8	482:8	17	!
FUNCTION_CALL	482:9	482:97	16	TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_TILEWIDTH , tif -> tif_dir . td_tilewidth )
CALLEE	482:9	482:9	17	TIFFWriteDirectoryTagShortLong
LEAF_NODE	482:9	482:9	18	TIFFWriteDirectoryTagShortLong
LEAF_NODE	482:39	482:39	17	(
ARGUMENT	482:40	482:40	17	tif
FIELD	482:40	482:40	18	tif
LEAF_NODE	482:40	482:40	19	tif
LEAF_NODE	482:43	482:43	17	,
ARGUMENT	482:44	482:44	17	& ndir
UNARY_EXPR	482:44	482:45	18	& ndir
UNARY_OPERATOR	482:44	482:44	19	&
LEAF_NODE	482:44	482:44	20	&
FIELD	482:45	482:45	19	ndir
LEAF_NODE	482:45	482:45	20	ndir
LEAF_NODE	482:49	482:49	17	,
ARGUMENT	482:50	482:50	17	dir
FIELD	482:50	482:50	18	dir
LEAF_NODE	482:50	482:50	19	dir
LEAF_NODE	482:53	482:53	17	,
ARGUMENT	482:54	482:54	17	TIFFTAG_TILEWIDTH
FIELD	482:54	482:54	18	TIFFTAG_TILEWIDTH
LEAF_NODE	482:54	482:54	19	TIFFTAG_TILEWIDTH
LEAF_NODE	482:71	482:71	17	,
ARGUMENT	482:72	482:72	17	tif -> tif_dir . td_tilewidth
FIELD	482:72	482:85	18	tif -> tif_dir . td_tilewidth
LEAF_NODE	482:72	482:72	19	tif
LEAF_NODE	482:75	482:75	19	->
LEAF_NODE	482:77	482:77	19	tif_dir
LEAF_NODE	482:84	482:84	19	.
LEAF_NODE	482:85	482:85	19	td_tilewidth
LEAF_NODE	482:97	482:97	17	)
LEAF_NODE	482:98	482:98	13	)
STATEMENTS	483:5	483:5	13	
JUMP_STATEMENT	483:5	483:13	14	goto bad ;
KEYWORD	483:5	483:5	15	goto
LEAF_NODE	483:5	483:5	16	goto
DESTINATION	483:10	483:10	15	bad
LEAF_NODE	483:10	483:10	16	bad
LEAF_NODE	483:13	483:13	15	;
SELECTION	484:4	485:5	12	
KEYWORD	484:4	484:4	13	if
LEAF_NODE	484:4	484:4	14	if
LEAF_NODE	484:7	484:7	13	(
CONDITION	484:8	484:8	13	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_TILELENGTH , tif -> tif_dir . td_tilelength )
EXPR	484:8	484:8	14	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_TILELENGTH , tif -> tif_dir . td_tilelength )
UNARY_EXPR	484:8	484:9	15	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_TILELENGTH , tif -> tif_dir . td_tilelength )
UNARY_OPERATOR	484:8	484:8	16	!
LEAF_NODE	484:8	484:8	17	!
FUNCTION_CALL	484:9	484:99	16	TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_TILELENGTH , tif -> tif_dir . td_tilelength )
CALLEE	484:9	484:9	17	TIFFWriteDirectoryTagShortLong
LEAF_NODE	484:9	484:9	18	TIFFWriteDirectoryTagShortLong
LEAF_NODE	484:39	484:39	17	(
ARGUMENT	484:40	484:40	17	tif
FIELD	484:40	484:40	18	tif
LEAF_NODE	484:40	484:40	19	tif
LEAF_NODE	484:43	484:43	17	,
ARGUMENT	484:44	484:44	17	& ndir
UNARY_EXPR	484:44	484:45	18	& ndir
UNARY_OPERATOR	484:44	484:44	19	&
LEAF_NODE	484:44	484:44	20	&
FIELD	484:45	484:45	19	ndir
LEAF_NODE	484:45	484:45	20	ndir
LEAF_NODE	484:49	484:49	17	,
ARGUMENT	484:50	484:50	17	dir
FIELD	484:50	484:50	18	dir
LEAF_NODE	484:50	484:50	19	dir
LEAF_NODE	484:53	484:53	17	,
ARGUMENT	484:54	484:54	17	TIFFTAG_TILELENGTH
FIELD	484:54	484:54	18	TIFFTAG_TILELENGTH
LEAF_NODE	484:54	484:54	19	TIFFTAG_TILELENGTH
LEAF_NODE	484:72	484:72	17	,
ARGUMENT	484:73	484:73	17	tif -> tif_dir . td_tilelength
FIELD	484:73	484:86	18	tif -> tif_dir . td_tilelength
LEAF_NODE	484:73	484:73	19	tif
LEAF_NODE	484:76	484:76	19	->
LEAF_NODE	484:78	484:78	19	tif_dir
LEAF_NODE	484:85	484:85	19	.
LEAF_NODE	484:86	484:86	19	td_tilelength
LEAF_NODE	484:99	484:99	17	)
LEAF_NODE	484:100	484:100	13	)
STATEMENTS	485:5	485:5	13	
JUMP_STATEMENT	485:5	485:13	14	goto bad ;
KEYWORD	485:5	485:5	15	goto
LEAF_NODE	485:5	485:5	16	goto
DESTINATION	485:10	485:10	15	bad
LEAF_NODE	485:10	485:10	16	bad
LEAF_NODE	485:13	485:13	15	;
LEAF_NODE	486:3	486:3	11	}
SELECTION	487:3	488:3	9	
KEYWORD	487:3	487:3	10	if
LEAF_NODE	487:3	487:3	11	if
LEAF_NODE	487:6	487:6	10	(
CONDITION	487:7	487:7	10	TIFFFieldSet ( tif , FIELD_RESOLUTION )
EXPR	487:7	487:7	11	TIFFFieldSet ( tif , FIELD_RESOLUTION )
FUNCTION_CALL	487:7	487:40	12	TIFFFieldSet ( tif , FIELD_RESOLUTION )
CALLEE	487:7	487:7	13	TIFFFieldSet
LEAF_NODE	487:7	487:7	14	TIFFFieldSet
LEAF_NODE	487:19	487:19	13	(
ARGUMENT	487:20	487:20	13	tif
FIELD	487:20	487:20	14	tif
LEAF_NODE	487:20	487:20	15	tif
LEAF_NODE	487:23	487:23	13	,
ARGUMENT	487:24	487:24	13	FIELD_RESOLUTION
FIELD	487:24	487:24	14	FIELD_RESOLUTION
LEAF_NODE	487:24	487:24	15	FIELD_RESOLUTION
LEAF_NODE	487:40	487:40	13	)
LEAF_NODE	487:41	487:41	10	)
STATEMENTS	488:3	493:3	10	
LEAF_NODE	488:3	488:3	11	{
STATEMENTS	489:4	491:4	11	
SELECTION	489:4	490:5	12	
KEYWORD	489:4	489:4	13	if
LEAF_NODE	489:4	489:4	14	if
LEAF_NODE	489:7	489:7	13	(
CONDITION	489:8	489:8	13	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_XRESOLUTION , tif -> tif_dir . td_xresolution )
EXPR	489:8	489:8	14	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_XRESOLUTION , tif -> tif_dir . td_xresolution )
UNARY_EXPR	489:8	489:9	15	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_XRESOLUTION , tif -> tif_dir . td_xresolution )
UNARY_OPERATOR	489:8	489:8	16	!
LEAF_NODE	489:8	489:8	17	!
FUNCTION_CALL	489:9	489:100	16	TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_XRESOLUTION , tif -> tif_dir . td_xresolution )
CALLEE	489:9	489:9	17	TIFFWriteDirectoryTagRational
LEAF_NODE	489:9	489:9	18	TIFFWriteDirectoryTagRational
LEAF_NODE	489:38	489:38	17	(
ARGUMENT	489:39	489:39	17	tif
FIELD	489:39	489:39	18	tif
LEAF_NODE	489:39	489:39	19	tif
LEAF_NODE	489:42	489:42	17	,
ARGUMENT	489:43	489:43	17	& ndir
UNARY_EXPR	489:43	489:44	18	& ndir
UNARY_OPERATOR	489:43	489:43	19	&
LEAF_NODE	489:43	489:43	20	&
FIELD	489:44	489:44	19	ndir
LEAF_NODE	489:44	489:44	20	ndir
LEAF_NODE	489:48	489:48	17	,
ARGUMENT	489:49	489:49	17	dir
FIELD	489:49	489:49	18	dir
LEAF_NODE	489:49	489:49	19	dir
LEAF_NODE	489:52	489:52	17	,
ARGUMENT	489:53	489:53	17	TIFFTAG_XRESOLUTION
FIELD	489:53	489:53	18	TIFFTAG_XRESOLUTION
LEAF_NODE	489:53	489:53	19	TIFFTAG_XRESOLUTION
LEAF_NODE	489:72	489:72	17	,
ARGUMENT	489:73	489:73	17	tif -> tif_dir . td_xresolution
FIELD	489:73	489:86	18	tif -> tif_dir . td_xresolution
LEAF_NODE	489:73	489:73	19	tif
LEAF_NODE	489:76	489:76	19	->
LEAF_NODE	489:78	489:78	19	tif_dir
LEAF_NODE	489:85	489:85	19	.
LEAF_NODE	489:86	489:86	19	td_xresolution
LEAF_NODE	489:100	489:100	17	)
LEAF_NODE	489:101	489:101	13	)
STATEMENTS	490:5	490:5	13	
JUMP_STATEMENT	490:5	490:13	14	goto bad ;
KEYWORD	490:5	490:5	15	goto
LEAF_NODE	490:5	490:5	16	goto
DESTINATION	490:10	490:10	15	bad
LEAF_NODE	490:10	490:10	16	bad
LEAF_NODE	490:13	490:13	15	;
SELECTION	491:4	492:5	12	
KEYWORD	491:4	491:4	13	if
LEAF_NODE	491:4	491:4	14	if
LEAF_NODE	491:7	491:7	13	(
CONDITION	491:8	491:8	13	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_YRESOLUTION , tif -> tif_dir . td_yresolution )
EXPR	491:8	491:8	14	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_YRESOLUTION , tif -> tif_dir . td_yresolution )
UNARY_EXPR	491:8	491:9	15	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_YRESOLUTION , tif -> tif_dir . td_yresolution )
UNARY_OPERATOR	491:8	491:8	16	!
LEAF_NODE	491:8	491:8	17	!
FUNCTION_CALL	491:9	491:100	16	TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_YRESOLUTION , tif -> tif_dir . td_yresolution )
CALLEE	491:9	491:9	17	TIFFWriteDirectoryTagRational
LEAF_NODE	491:9	491:9	18	TIFFWriteDirectoryTagRational
LEAF_NODE	491:38	491:38	17	(
ARGUMENT	491:39	491:39	17	tif
FIELD	491:39	491:39	18	tif
LEAF_NODE	491:39	491:39	19	tif
LEAF_NODE	491:42	491:42	17	,
ARGUMENT	491:43	491:43	17	& ndir
UNARY_EXPR	491:43	491:44	18	& ndir
UNARY_OPERATOR	491:43	491:43	19	&
LEAF_NODE	491:43	491:43	20	&
FIELD	491:44	491:44	19	ndir
LEAF_NODE	491:44	491:44	20	ndir
LEAF_NODE	491:48	491:48	17	,
ARGUMENT	491:49	491:49	17	dir
FIELD	491:49	491:49	18	dir
LEAF_NODE	491:49	491:49	19	dir
LEAF_NODE	491:52	491:52	17	,
ARGUMENT	491:53	491:53	17	TIFFTAG_YRESOLUTION
FIELD	491:53	491:53	18	TIFFTAG_YRESOLUTION
LEAF_NODE	491:53	491:53	19	TIFFTAG_YRESOLUTION
LEAF_NODE	491:72	491:72	17	,
ARGUMENT	491:73	491:73	17	tif -> tif_dir . td_yresolution
FIELD	491:73	491:86	18	tif -> tif_dir . td_yresolution
LEAF_NODE	491:73	491:73	19	tif
LEAF_NODE	491:76	491:76	19	->
LEAF_NODE	491:78	491:78	19	tif_dir
LEAF_NODE	491:85	491:85	19	.
LEAF_NODE	491:86	491:86	19	td_yresolution
LEAF_NODE	491:100	491:100	17	)
LEAF_NODE	491:101	491:101	13	)
STATEMENTS	492:5	492:5	13	
JUMP_STATEMENT	492:5	492:13	14	goto bad ;
KEYWORD	492:5	492:5	15	goto
LEAF_NODE	492:5	492:5	16	goto
DESTINATION	492:10	492:10	15	bad
LEAF_NODE	492:10	492:10	16	bad
LEAF_NODE	492:13	492:13	15	;
LEAF_NODE	493:3	493:3	11	}
SELECTION	494:3	495:3	9	
KEYWORD	494:3	494:3	10	if
LEAF_NODE	494:3	494:3	11	if
LEAF_NODE	494:6	494:6	10	(
CONDITION	494:7	494:7	10	TIFFFieldSet ( tif , FIELD_POSITION )
EXPR	494:7	494:7	11	TIFFFieldSet ( tif , FIELD_POSITION )
FUNCTION_CALL	494:7	494:38	12	TIFFFieldSet ( tif , FIELD_POSITION )
CALLEE	494:7	494:7	13	TIFFFieldSet
LEAF_NODE	494:7	494:7	14	TIFFFieldSet
LEAF_NODE	494:19	494:19	13	(
ARGUMENT	494:20	494:20	13	tif
FIELD	494:20	494:20	14	tif
LEAF_NODE	494:20	494:20	15	tif
LEAF_NODE	494:23	494:23	13	,
ARGUMENT	494:24	494:24	13	FIELD_POSITION
FIELD	494:24	494:24	14	FIELD_POSITION
LEAF_NODE	494:24	494:24	15	FIELD_POSITION
LEAF_NODE	494:38	494:38	13	)
LEAF_NODE	494:39	494:39	10	)
STATEMENTS	495:3	500:3	10	
LEAF_NODE	495:3	495:3	11	{
STATEMENTS	496:4	498:4	11	
SELECTION	496:4	497:5	12	
KEYWORD	496:4	496:4	13	if
LEAF_NODE	496:4	496:4	14	if
LEAF_NODE	496:7	496:7	13	(
CONDITION	496:8	496:8	13	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_XPOSITION , tif -> tif_dir . td_xposition )
EXPR	496:8	496:8	14	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_XPOSITION , tif -> tif_dir . td_xposition )
UNARY_EXPR	496:8	496:9	15	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_XPOSITION , tif -> tif_dir . td_xposition )
UNARY_OPERATOR	496:8	496:8	16	!
LEAF_NODE	496:8	496:8	17	!
FUNCTION_CALL	496:9	496:96	16	TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_XPOSITION , tif -> tif_dir . td_xposition )
CALLEE	496:9	496:9	17	TIFFWriteDirectoryTagRational
LEAF_NODE	496:9	496:9	18	TIFFWriteDirectoryTagRational
LEAF_NODE	496:38	496:38	17	(
ARGUMENT	496:39	496:39	17	tif
FIELD	496:39	496:39	18	tif
LEAF_NODE	496:39	496:39	19	tif
LEAF_NODE	496:42	496:42	17	,
ARGUMENT	496:43	496:43	17	& ndir
UNARY_EXPR	496:43	496:44	18	& ndir
UNARY_OPERATOR	496:43	496:43	19	&
LEAF_NODE	496:43	496:43	20	&
FIELD	496:44	496:44	19	ndir
LEAF_NODE	496:44	496:44	20	ndir
LEAF_NODE	496:48	496:48	17	,
ARGUMENT	496:49	496:49	17	dir
FIELD	496:49	496:49	18	dir
LEAF_NODE	496:49	496:49	19	dir
LEAF_NODE	496:52	496:52	17	,
ARGUMENT	496:53	496:53	17	TIFFTAG_XPOSITION
FIELD	496:53	496:53	18	TIFFTAG_XPOSITION
LEAF_NODE	496:53	496:53	19	TIFFTAG_XPOSITION
LEAF_NODE	496:70	496:70	17	,
ARGUMENT	496:71	496:71	17	tif -> tif_dir . td_xposition
FIELD	496:71	496:84	18	tif -> tif_dir . td_xposition
LEAF_NODE	496:71	496:71	19	tif
LEAF_NODE	496:74	496:74	19	->
LEAF_NODE	496:76	496:76	19	tif_dir
LEAF_NODE	496:83	496:83	19	.
LEAF_NODE	496:84	496:84	19	td_xposition
LEAF_NODE	496:96	496:96	17	)
LEAF_NODE	496:97	496:97	13	)
STATEMENTS	497:5	497:5	13	
JUMP_STATEMENT	497:5	497:13	14	goto bad ;
KEYWORD	497:5	497:5	15	goto
LEAF_NODE	497:5	497:5	16	goto
DESTINATION	497:10	497:10	15	bad
LEAF_NODE	497:10	497:10	16	bad
LEAF_NODE	497:13	497:13	15	;
SELECTION	498:4	499:5	12	
KEYWORD	498:4	498:4	13	if
LEAF_NODE	498:4	498:4	14	if
LEAF_NODE	498:7	498:7	13	(
CONDITION	498:8	498:8	13	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_YPOSITION , tif -> tif_dir . td_yposition )
EXPR	498:8	498:8	14	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_YPOSITION , tif -> tif_dir . td_yposition )
UNARY_EXPR	498:8	498:9	15	! TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_YPOSITION , tif -> tif_dir . td_yposition )
UNARY_OPERATOR	498:8	498:8	16	!
LEAF_NODE	498:8	498:8	17	!
FUNCTION_CALL	498:9	498:96	16	TIFFWriteDirectoryTagRational ( tif , & ndir , dir , TIFFTAG_YPOSITION , tif -> tif_dir . td_yposition )
CALLEE	498:9	498:9	17	TIFFWriteDirectoryTagRational
LEAF_NODE	498:9	498:9	18	TIFFWriteDirectoryTagRational
LEAF_NODE	498:38	498:38	17	(
ARGUMENT	498:39	498:39	17	tif
FIELD	498:39	498:39	18	tif
LEAF_NODE	498:39	498:39	19	tif
LEAF_NODE	498:42	498:42	17	,
ARGUMENT	498:43	498:43	17	& ndir
UNARY_EXPR	498:43	498:44	18	& ndir
UNARY_OPERATOR	498:43	498:43	19	&
LEAF_NODE	498:43	498:43	20	&
FIELD	498:44	498:44	19	ndir
LEAF_NODE	498:44	498:44	20	ndir
LEAF_NODE	498:48	498:48	17	,
ARGUMENT	498:49	498:49	17	dir
FIELD	498:49	498:49	18	dir
LEAF_NODE	498:49	498:49	19	dir
LEAF_NODE	498:52	498:52	17	,
ARGUMENT	498:53	498:53	17	TIFFTAG_YPOSITION
FIELD	498:53	498:53	18	TIFFTAG_YPOSITION
LEAF_NODE	498:53	498:53	19	TIFFTAG_YPOSITION
LEAF_NODE	498:70	498:70	17	,
ARGUMENT	498:71	498:71	17	tif -> tif_dir . td_yposition
FIELD	498:71	498:84	18	tif -> tif_dir . td_yposition
LEAF_NODE	498:71	498:71	19	tif
LEAF_NODE	498:74	498:74	19	->
LEAF_NODE	498:76	498:76	19	tif_dir
LEAF_NODE	498:83	498:83	19	.
LEAF_NODE	498:84	498:84	19	td_yposition
LEAF_NODE	498:96	498:96	17	)
LEAF_NODE	498:97	498:97	13	)
STATEMENTS	499:5	499:5	13	
JUMP_STATEMENT	499:5	499:13	14	goto bad ;
KEYWORD	499:5	499:5	15	goto
LEAF_NODE	499:5	499:5	16	goto
DESTINATION	499:10	499:10	15	bad
LEAF_NODE	499:10	499:10	16	bad
LEAF_NODE	499:13	499:13	15	;
LEAF_NODE	500:3	500:3	11	}
SELECTION	501:3	502:3	9	
KEYWORD	501:3	501:3	10	if
LEAF_NODE	501:3	501:3	11	if
LEAF_NODE	501:6	501:6	10	(
CONDITION	501:7	501:7	10	TIFFFieldSet ( tif , FIELD_SUBFILETYPE )
EXPR	501:7	501:7	11	TIFFFieldSet ( tif , FIELD_SUBFILETYPE )
FUNCTION_CALL	501:7	501:41	12	TIFFFieldSet ( tif , FIELD_SUBFILETYPE )
CALLEE	501:7	501:7	13	TIFFFieldSet
LEAF_NODE	501:7	501:7	14	TIFFFieldSet
LEAF_NODE	501:19	501:19	13	(
ARGUMENT	501:20	501:20	13	tif
FIELD	501:20	501:20	14	tif
LEAF_NODE	501:20	501:20	15	tif
LEAF_NODE	501:23	501:23	13	,
ARGUMENT	501:24	501:24	13	FIELD_SUBFILETYPE
FIELD	501:24	501:24	14	FIELD_SUBFILETYPE
LEAF_NODE	501:24	501:24	15	FIELD_SUBFILETYPE
LEAF_NODE	501:41	501:41	13	)
LEAF_NODE	501:42	501:42	10	)
STATEMENTS	502:3	505:3	10	
LEAF_NODE	502:3	502:3	11	{
STATEMENTS	503:4	503:4	11	
SELECTION	503:4	504:5	12	
KEYWORD	503:4	503:4	13	if
LEAF_NODE	503:4	503:4	14	if
LEAF_NODE	503:7	503:7	13	(
CONDITION	503:8	503:8	13	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_SUBFILETYPE , tif -> tif_dir . td_subfiletype )
EXPR	503:8	503:8	14	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_SUBFILETYPE , tif -> tif_dir . td_subfiletype )
UNARY_EXPR	503:8	503:9	15	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_SUBFILETYPE , tif -> tif_dir . td_subfiletype )
UNARY_OPERATOR	503:8	503:8	16	!
LEAF_NODE	503:8	503:8	17	!
FUNCTION_CALL	503:9	503:96	16	TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_SUBFILETYPE , tif -> tif_dir . td_subfiletype )
CALLEE	503:9	503:9	17	TIFFWriteDirectoryTagLong
LEAF_NODE	503:9	503:9	18	TIFFWriteDirectoryTagLong
LEAF_NODE	503:34	503:34	17	(
ARGUMENT	503:35	503:35	17	tif
FIELD	503:35	503:35	18	tif
LEAF_NODE	503:35	503:35	19	tif
LEAF_NODE	503:38	503:38	17	,
ARGUMENT	503:39	503:39	17	& ndir
UNARY_EXPR	503:39	503:40	18	& ndir
UNARY_OPERATOR	503:39	503:39	19	&
LEAF_NODE	503:39	503:39	20	&
FIELD	503:40	503:40	19	ndir
LEAF_NODE	503:40	503:40	20	ndir
LEAF_NODE	503:44	503:44	17	,
ARGUMENT	503:45	503:45	17	dir
FIELD	503:45	503:45	18	dir
LEAF_NODE	503:45	503:45	19	dir
LEAF_NODE	503:48	503:48	17	,
ARGUMENT	503:49	503:49	17	TIFFTAG_SUBFILETYPE
FIELD	503:49	503:49	18	TIFFTAG_SUBFILETYPE
LEAF_NODE	503:49	503:49	19	TIFFTAG_SUBFILETYPE
LEAF_NODE	503:68	503:68	17	,
ARGUMENT	503:69	503:69	17	tif -> tif_dir . td_subfiletype
FIELD	503:69	503:82	18	tif -> tif_dir . td_subfiletype
LEAF_NODE	503:69	503:69	19	tif
LEAF_NODE	503:72	503:72	19	->
LEAF_NODE	503:74	503:74	19	tif_dir
LEAF_NODE	503:81	503:81	19	.
LEAF_NODE	503:82	503:82	19	td_subfiletype
LEAF_NODE	503:96	503:96	17	)
LEAF_NODE	503:97	503:97	13	)
STATEMENTS	504:5	504:5	13	
JUMP_STATEMENT	504:5	504:13	14	goto bad ;
KEYWORD	504:5	504:5	15	goto
LEAF_NODE	504:5	504:5	16	goto
DESTINATION	504:10	504:10	15	bad
LEAF_NODE	504:10	504:10	16	bad
LEAF_NODE	504:13	504:13	15	;
LEAF_NODE	505:3	505:3	11	}
SELECTION	506:3	507:3	9	
KEYWORD	506:3	506:3	10	if
LEAF_NODE	506:3	506:3	11	if
LEAF_NODE	506:6	506:6	10	(
CONDITION	506:7	506:7	10	TIFFFieldSet ( tif , FIELD_BITSPERSAMPLE )
EXPR	506:7	506:7	11	TIFFFieldSet ( tif , FIELD_BITSPERSAMPLE )
FUNCTION_CALL	506:7	506:43	12	TIFFFieldSet ( tif , FIELD_BITSPERSAMPLE )
CALLEE	506:7	506:7	13	TIFFFieldSet
LEAF_NODE	506:7	506:7	14	TIFFFieldSet
LEAF_NODE	506:19	506:19	13	(
ARGUMENT	506:20	506:20	13	tif
FIELD	506:20	506:20	14	tif
LEAF_NODE	506:20	506:20	15	tif
LEAF_NODE	506:23	506:23	13	,
ARGUMENT	506:24	506:24	13	FIELD_BITSPERSAMPLE
FIELD	506:24	506:24	14	FIELD_BITSPERSAMPLE
LEAF_NODE	506:24	506:24	15	FIELD_BITSPERSAMPLE
LEAF_NODE	506:43	506:43	13	)
LEAF_NODE	506:44	506:44	10	)
STATEMENTS	507:3	510:3	10	
LEAF_NODE	507:3	507:3	11	{
STATEMENTS	508:4	508:4	11	
SELECTION	508:4	509:5	12	
KEYWORD	508:4	508:4	13	if
LEAF_NODE	508:4	508:4	14	if
LEAF_NODE	508:7	508:7	13	(
CONDITION	508:8	508:8	13	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_BITSPERSAMPLE , tif -> tif_dir . td_bitspersample )
EXPR	508:8	508:8	14	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_BITSPERSAMPLE , tif -> tif_dir . td_bitspersample )
UNARY_EXPR	508:8	508:9	15	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_BITSPERSAMPLE , tif -> tif_dir . td_bitspersample )
UNARY_OPERATOR	508:8	508:8	16	!
LEAF_NODE	508:8	508:8	17	!
FUNCTION_CALL	508:9	508:110	16	TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_BITSPERSAMPLE , tif -> tif_dir . td_bitspersample )
CALLEE	508:9	508:9	17	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	508:9	508:9	18	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	508:44	508:44	17	(
ARGUMENT	508:45	508:45	17	tif
FIELD	508:45	508:45	18	tif
LEAF_NODE	508:45	508:45	19	tif
LEAF_NODE	508:48	508:48	17	,
ARGUMENT	508:49	508:49	17	& ndir
UNARY_EXPR	508:49	508:50	18	& ndir
UNARY_OPERATOR	508:49	508:49	19	&
LEAF_NODE	508:49	508:49	20	&
FIELD	508:50	508:50	19	ndir
LEAF_NODE	508:50	508:50	20	ndir
LEAF_NODE	508:54	508:54	17	,
ARGUMENT	508:55	508:55	17	dir
FIELD	508:55	508:55	18	dir
LEAF_NODE	508:55	508:55	19	dir
LEAF_NODE	508:58	508:58	17	,
ARGUMENT	508:59	508:59	17	TIFFTAG_BITSPERSAMPLE
FIELD	508:59	508:59	18	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	508:59	508:59	19	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	508:80	508:80	17	,
ARGUMENT	508:81	508:81	17	tif -> tif_dir . td_bitspersample
FIELD	508:81	508:94	18	tif -> tif_dir . td_bitspersample
LEAF_NODE	508:81	508:81	19	tif
LEAF_NODE	508:84	508:84	19	->
LEAF_NODE	508:86	508:86	19	tif_dir
LEAF_NODE	508:93	508:93	19	.
LEAF_NODE	508:94	508:94	19	td_bitspersample
LEAF_NODE	508:110	508:110	17	)
LEAF_NODE	508:111	508:111	13	)
STATEMENTS	509:5	509:5	13	
JUMP_STATEMENT	509:5	509:13	14	goto bad ;
KEYWORD	509:5	509:5	15	goto
LEAF_NODE	509:5	509:5	16	goto
DESTINATION	509:10	509:10	15	bad
LEAF_NODE	509:10	509:10	16	bad
LEAF_NODE	509:13	509:13	15	;
LEAF_NODE	510:3	510:3	11	}
SELECTION	511:3	512:3	9	
KEYWORD	511:3	511:3	10	if
LEAF_NODE	511:3	511:3	11	if
LEAF_NODE	511:6	511:6	10	(
CONDITION	511:7	511:7	10	TIFFFieldSet ( tif , FIELD_COMPRESSION )
EXPR	511:7	511:7	11	TIFFFieldSet ( tif , FIELD_COMPRESSION )
FUNCTION_CALL	511:7	511:41	12	TIFFFieldSet ( tif , FIELD_COMPRESSION )
CALLEE	511:7	511:7	13	TIFFFieldSet
LEAF_NODE	511:7	511:7	14	TIFFFieldSet
LEAF_NODE	511:19	511:19	13	(
ARGUMENT	511:20	511:20	13	tif
FIELD	511:20	511:20	14	tif
LEAF_NODE	511:20	511:20	15	tif
LEAF_NODE	511:23	511:23	13	,
ARGUMENT	511:24	511:24	13	FIELD_COMPRESSION
FIELD	511:24	511:24	14	FIELD_COMPRESSION
LEAF_NODE	511:24	511:24	15	FIELD_COMPRESSION
LEAF_NODE	511:41	511:41	13	)
LEAF_NODE	511:42	511:42	10	)
STATEMENTS	512:3	515:3	10	
LEAF_NODE	512:3	512:3	11	{
STATEMENTS	513:4	513:4	11	
SELECTION	513:4	514:5	12	
KEYWORD	513:4	513:4	13	if
LEAF_NODE	513:4	513:4	14	if
LEAF_NODE	513:7	513:7	13	(
CONDITION	513:8	513:8	13	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_COMPRESSION , tif -> tif_dir . td_compression )
EXPR	513:8	513:8	14	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_COMPRESSION , tif -> tif_dir . td_compression )
UNARY_EXPR	513:8	513:9	15	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_COMPRESSION , tif -> tif_dir . td_compression )
UNARY_OPERATOR	513:8	513:8	16	!
LEAF_NODE	513:8	513:8	17	!
FUNCTION_CALL	513:9	513:97	16	TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_COMPRESSION , tif -> tif_dir . td_compression )
CALLEE	513:9	513:9	17	TIFFWriteDirectoryTagShort
LEAF_NODE	513:9	513:9	18	TIFFWriteDirectoryTagShort
LEAF_NODE	513:35	513:35	17	(
ARGUMENT	513:36	513:36	17	tif
FIELD	513:36	513:36	18	tif
LEAF_NODE	513:36	513:36	19	tif
LEAF_NODE	513:39	513:39	17	,
ARGUMENT	513:40	513:40	17	& ndir
UNARY_EXPR	513:40	513:41	18	& ndir
UNARY_OPERATOR	513:40	513:40	19	&
LEAF_NODE	513:40	513:40	20	&
FIELD	513:41	513:41	19	ndir
LEAF_NODE	513:41	513:41	20	ndir
LEAF_NODE	513:45	513:45	17	,
ARGUMENT	513:46	513:46	17	dir
FIELD	513:46	513:46	18	dir
LEAF_NODE	513:46	513:46	19	dir
LEAF_NODE	513:49	513:49	17	,
ARGUMENT	513:50	513:50	17	TIFFTAG_COMPRESSION
FIELD	513:50	513:50	18	TIFFTAG_COMPRESSION
LEAF_NODE	513:50	513:50	19	TIFFTAG_COMPRESSION
LEAF_NODE	513:69	513:69	17	,
ARGUMENT	513:70	513:70	17	tif -> tif_dir . td_compression
FIELD	513:70	513:83	18	tif -> tif_dir . td_compression
LEAF_NODE	513:70	513:70	19	tif
LEAF_NODE	513:73	513:73	19	->
LEAF_NODE	513:75	513:75	19	tif_dir
LEAF_NODE	513:82	513:82	19	.
LEAF_NODE	513:83	513:83	19	td_compression
LEAF_NODE	513:97	513:97	17	)
LEAF_NODE	513:98	513:98	13	)
STATEMENTS	514:5	514:5	13	
JUMP_STATEMENT	514:5	514:13	14	goto bad ;
KEYWORD	514:5	514:5	15	goto
LEAF_NODE	514:5	514:5	16	goto
DESTINATION	514:10	514:10	15	bad
LEAF_NODE	514:10	514:10	16	bad
LEAF_NODE	514:13	514:13	15	;
LEAF_NODE	515:3	515:3	11	}
SELECTION	516:3	517:3	9	
KEYWORD	516:3	516:3	10	if
LEAF_NODE	516:3	516:3	11	if
LEAF_NODE	516:6	516:6	10	(
CONDITION	516:7	516:7	10	TIFFFieldSet ( tif , FIELD_PHOTOMETRIC )
EXPR	516:7	516:7	11	TIFFFieldSet ( tif , FIELD_PHOTOMETRIC )
FUNCTION_CALL	516:7	516:41	12	TIFFFieldSet ( tif , FIELD_PHOTOMETRIC )
CALLEE	516:7	516:7	13	TIFFFieldSet
LEAF_NODE	516:7	516:7	14	TIFFFieldSet
LEAF_NODE	516:19	516:19	13	(
ARGUMENT	516:20	516:20	13	tif
FIELD	516:20	516:20	14	tif
LEAF_NODE	516:20	516:20	15	tif
LEAF_NODE	516:23	516:23	13	,
ARGUMENT	516:24	516:24	13	FIELD_PHOTOMETRIC
FIELD	516:24	516:24	14	FIELD_PHOTOMETRIC
LEAF_NODE	516:24	516:24	15	FIELD_PHOTOMETRIC
LEAF_NODE	516:41	516:41	13	)
LEAF_NODE	516:42	516:42	10	)
STATEMENTS	517:3	520:3	10	
LEAF_NODE	517:3	517:3	11	{
STATEMENTS	518:4	518:4	11	
SELECTION	518:4	519:5	12	
KEYWORD	518:4	518:4	13	if
LEAF_NODE	518:4	518:4	14	if
LEAF_NODE	518:7	518:7	13	(
CONDITION	518:8	518:8	13	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_PHOTOMETRIC , tif -> tif_dir . td_photometric )
EXPR	518:8	518:8	14	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_PHOTOMETRIC , tif -> tif_dir . td_photometric )
UNARY_EXPR	518:8	518:9	15	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_PHOTOMETRIC , tif -> tif_dir . td_photometric )
UNARY_OPERATOR	518:8	518:8	16	!
LEAF_NODE	518:8	518:8	17	!
FUNCTION_CALL	518:9	518:97	16	TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_PHOTOMETRIC , tif -> tif_dir . td_photometric )
CALLEE	518:9	518:9	17	TIFFWriteDirectoryTagShort
LEAF_NODE	518:9	518:9	18	TIFFWriteDirectoryTagShort
LEAF_NODE	518:35	518:35	17	(
ARGUMENT	518:36	518:36	17	tif
FIELD	518:36	518:36	18	tif
LEAF_NODE	518:36	518:36	19	tif
LEAF_NODE	518:39	518:39	17	,
ARGUMENT	518:40	518:40	17	& ndir
UNARY_EXPR	518:40	518:41	18	& ndir
UNARY_OPERATOR	518:40	518:40	19	&
LEAF_NODE	518:40	518:40	20	&
FIELD	518:41	518:41	19	ndir
LEAF_NODE	518:41	518:41	20	ndir
LEAF_NODE	518:45	518:45	17	,
ARGUMENT	518:46	518:46	17	dir
FIELD	518:46	518:46	18	dir
LEAF_NODE	518:46	518:46	19	dir
LEAF_NODE	518:49	518:49	17	,
ARGUMENT	518:50	518:50	17	TIFFTAG_PHOTOMETRIC
FIELD	518:50	518:50	18	TIFFTAG_PHOTOMETRIC
LEAF_NODE	518:50	518:50	19	TIFFTAG_PHOTOMETRIC
LEAF_NODE	518:69	518:69	17	,
ARGUMENT	518:70	518:70	17	tif -> tif_dir . td_photometric
FIELD	518:70	518:83	18	tif -> tif_dir . td_photometric
LEAF_NODE	518:70	518:70	19	tif
LEAF_NODE	518:73	518:73	19	->
LEAF_NODE	518:75	518:75	19	tif_dir
LEAF_NODE	518:82	518:82	19	.
LEAF_NODE	518:83	518:83	19	td_photometric
LEAF_NODE	518:97	518:97	17	)
LEAF_NODE	518:98	518:98	13	)
STATEMENTS	519:5	519:5	13	
JUMP_STATEMENT	519:5	519:13	14	goto bad ;
KEYWORD	519:5	519:5	15	goto
LEAF_NODE	519:5	519:5	16	goto
DESTINATION	519:10	519:10	15	bad
LEAF_NODE	519:10	519:10	16	bad
LEAF_NODE	519:13	519:13	15	;
LEAF_NODE	520:3	520:3	11	}
SELECTION	521:3	522:3	9	
KEYWORD	521:3	521:3	10	if
LEAF_NODE	521:3	521:3	11	if
LEAF_NODE	521:6	521:6	10	(
CONDITION	521:7	521:7	10	TIFFFieldSet ( tif , FIELD_THRESHHOLDING )
EXPR	521:7	521:7	11	TIFFFieldSet ( tif , FIELD_THRESHHOLDING )
FUNCTION_CALL	521:7	521:43	12	TIFFFieldSet ( tif , FIELD_THRESHHOLDING )
CALLEE	521:7	521:7	13	TIFFFieldSet
LEAF_NODE	521:7	521:7	14	TIFFFieldSet
LEAF_NODE	521:19	521:19	13	(
ARGUMENT	521:20	521:20	13	tif
FIELD	521:20	521:20	14	tif
LEAF_NODE	521:20	521:20	15	tif
LEAF_NODE	521:23	521:23	13	,
ARGUMENT	521:24	521:24	13	FIELD_THRESHHOLDING
FIELD	521:24	521:24	14	FIELD_THRESHHOLDING
LEAF_NODE	521:24	521:24	15	FIELD_THRESHHOLDING
LEAF_NODE	521:43	521:43	13	)
LEAF_NODE	521:44	521:44	10	)
STATEMENTS	522:3	525:3	10	
LEAF_NODE	522:3	522:3	11	{
STATEMENTS	523:4	523:4	11	
SELECTION	523:4	524:5	12	
KEYWORD	523:4	523:4	13	if
LEAF_NODE	523:4	523:4	14	if
LEAF_NODE	523:7	523:7	13	(
CONDITION	523:8	523:8	13	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_THRESHHOLDING , tif -> tif_dir . td_threshholding )
EXPR	523:8	523:8	14	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_THRESHHOLDING , tif -> tif_dir . td_threshholding )
UNARY_EXPR	523:8	523:9	15	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_THRESHHOLDING , tif -> tif_dir . td_threshholding )
UNARY_OPERATOR	523:8	523:8	16	!
LEAF_NODE	523:8	523:8	17	!
FUNCTION_CALL	523:9	523:101	16	TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_THRESHHOLDING , tif -> tif_dir . td_threshholding )
CALLEE	523:9	523:9	17	TIFFWriteDirectoryTagShort
LEAF_NODE	523:9	523:9	18	TIFFWriteDirectoryTagShort
LEAF_NODE	523:35	523:35	17	(
ARGUMENT	523:36	523:36	17	tif
FIELD	523:36	523:36	18	tif
LEAF_NODE	523:36	523:36	19	tif
LEAF_NODE	523:39	523:39	17	,
ARGUMENT	523:40	523:40	17	& ndir
UNARY_EXPR	523:40	523:41	18	& ndir
UNARY_OPERATOR	523:40	523:40	19	&
LEAF_NODE	523:40	523:40	20	&
FIELD	523:41	523:41	19	ndir
LEAF_NODE	523:41	523:41	20	ndir
LEAF_NODE	523:45	523:45	17	,
ARGUMENT	523:46	523:46	17	dir
FIELD	523:46	523:46	18	dir
LEAF_NODE	523:46	523:46	19	dir
LEAF_NODE	523:49	523:49	17	,
ARGUMENT	523:50	523:50	17	TIFFTAG_THRESHHOLDING
FIELD	523:50	523:50	18	TIFFTAG_THRESHHOLDING
LEAF_NODE	523:50	523:50	19	TIFFTAG_THRESHHOLDING
LEAF_NODE	523:71	523:71	17	,
ARGUMENT	523:72	523:72	17	tif -> tif_dir . td_threshholding
FIELD	523:72	523:85	18	tif -> tif_dir . td_threshholding
LEAF_NODE	523:72	523:72	19	tif
LEAF_NODE	523:75	523:75	19	->
LEAF_NODE	523:77	523:77	19	tif_dir
LEAF_NODE	523:84	523:84	19	.
LEAF_NODE	523:85	523:85	19	td_threshholding
LEAF_NODE	523:101	523:101	17	)
LEAF_NODE	523:102	523:102	13	)
STATEMENTS	524:5	524:5	13	
JUMP_STATEMENT	524:5	524:13	14	goto bad ;
KEYWORD	524:5	524:5	15	goto
LEAF_NODE	524:5	524:5	16	goto
DESTINATION	524:10	524:10	15	bad
LEAF_NODE	524:10	524:10	16	bad
LEAF_NODE	524:13	524:13	15	;
LEAF_NODE	525:3	525:3	11	}
SELECTION	526:3	527:3	9	
KEYWORD	526:3	526:3	10	if
LEAF_NODE	526:3	526:3	11	if
LEAF_NODE	526:6	526:6	10	(
CONDITION	526:7	526:7	10	TIFFFieldSet ( tif , FIELD_FILLORDER )
EXPR	526:7	526:7	11	TIFFFieldSet ( tif , FIELD_FILLORDER )
FUNCTION_CALL	526:7	526:39	12	TIFFFieldSet ( tif , FIELD_FILLORDER )
CALLEE	526:7	526:7	13	TIFFFieldSet
LEAF_NODE	526:7	526:7	14	TIFFFieldSet
LEAF_NODE	526:19	526:19	13	(
ARGUMENT	526:20	526:20	13	tif
FIELD	526:20	526:20	14	tif
LEAF_NODE	526:20	526:20	15	tif
LEAF_NODE	526:23	526:23	13	,
ARGUMENT	526:24	526:24	13	FIELD_FILLORDER
FIELD	526:24	526:24	14	FIELD_FILLORDER
LEAF_NODE	526:24	526:24	15	FIELD_FILLORDER
LEAF_NODE	526:39	526:39	13	)
LEAF_NODE	526:40	526:40	10	)
STATEMENTS	527:3	530:3	10	
LEAF_NODE	527:3	527:3	11	{
STATEMENTS	528:4	528:4	11	
SELECTION	528:4	529:5	12	
KEYWORD	528:4	528:4	13	if
LEAF_NODE	528:4	528:4	14	if
LEAF_NODE	528:7	528:7	13	(
CONDITION	528:8	528:8	13	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_FILLORDER , tif -> tif_dir . td_fillorder )
EXPR	528:8	528:8	14	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_FILLORDER , tif -> tif_dir . td_fillorder )
UNARY_EXPR	528:8	528:9	15	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_FILLORDER , tif -> tif_dir . td_fillorder )
UNARY_OPERATOR	528:8	528:8	16	!
LEAF_NODE	528:8	528:8	17	!
FUNCTION_CALL	528:9	528:93	16	TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_FILLORDER , tif -> tif_dir . td_fillorder )
CALLEE	528:9	528:9	17	TIFFWriteDirectoryTagShort
LEAF_NODE	528:9	528:9	18	TIFFWriteDirectoryTagShort
LEAF_NODE	528:35	528:35	17	(
ARGUMENT	528:36	528:36	17	tif
FIELD	528:36	528:36	18	tif
LEAF_NODE	528:36	528:36	19	tif
LEAF_NODE	528:39	528:39	17	,
ARGUMENT	528:40	528:40	17	& ndir
UNARY_EXPR	528:40	528:41	18	& ndir
UNARY_OPERATOR	528:40	528:40	19	&
LEAF_NODE	528:40	528:40	20	&
FIELD	528:41	528:41	19	ndir
LEAF_NODE	528:41	528:41	20	ndir
LEAF_NODE	528:45	528:45	17	,
ARGUMENT	528:46	528:46	17	dir
FIELD	528:46	528:46	18	dir
LEAF_NODE	528:46	528:46	19	dir
LEAF_NODE	528:49	528:49	17	,
ARGUMENT	528:50	528:50	17	TIFFTAG_FILLORDER
FIELD	528:50	528:50	18	TIFFTAG_FILLORDER
LEAF_NODE	528:50	528:50	19	TIFFTAG_FILLORDER
LEAF_NODE	528:67	528:67	17	,
ARGUMENT	528:68	528:68	17	tif -> tif_dir . td_fillorder
FIELD	528:68	528:81	18	tif -> tif_dir . td_fillorder
LEAF_NODE	528:68	528:68	19	tif
LEAF_NODE	528:71	528:71	19	->
LEAF_NODE	528:73	528:73	19	tif_dir
LEAF_NODE	528:80	528:80	19	.
LEAF_NODE	528:81	528:81	19	td_fillorder
LEAF_NODE	528:93	528:93	17	)
LEAF_NODE	528:94	528:94	13	)
STATEMENTS	529:5	529:5	13	
JUMP_STATEMENT	529:5	529:13	14	goto bad ;
KEYWORD	529:5	529:5	15	goto
LEAF_NODE	529:5	529:5	16	goto
DESTINATION	529:10	529:10	15	bad
LEAF_NODE	529:10	529:10	16	bad
LEAF_NODE	529:13	529:13	15	;
LEAF_NODE	530:3	530:3	11	}
SELECTION	531:3	532:3	9	
KEYWORD	531:3	531:3	10	if
LEAF_NODE	531:3	531:3	11	if
LEAF_NODE	531:6	531:6	10	(
CONDITION	531:7	531:7	10	TIFFFieldSet ( tif , FIELD_ORIENTATION )
EXPR	531:7	531:7	11	TIFFFieldSet ( tif , FIELD_ORIENTATION )
FUNCTION_CALL	531:7	531:41	12	TIFFFieldSet ( tif , FIELD_ORIENTATION )
CALLEE	531:7	531:7	13	TIFFFieldSet
LEAF_NODE	531:7	531:7	14	TIFFFieldSet
LEAF_NODE	531:19	531:19	13	(
ARGUMENT	531:20	531:20	13	tif
FIELD	531:20	531:20	14	tif
LEAF_NODE	531:20	531:20	15	tif
LEAF_NODE	531:23	531:23	13	,
ARGUMENT	531:24	531:24	13	FIELD_ORIENTATION
FIELD	531:24	531:24	14	FIELD_ORIENTATION
LEAF_NODE	531:24	531:24	15	FIELD_ORIENTATION
LEAF_NODE	531:41	531:41	13	)
LEAF_NODE	531:42	531:42	10	)
STATEMENTS	532:3	535:3	10	
LEAF_NODE	532:3	532:3	11	{
STATEMENTS	533:4	533:4	11	
SELECTION	533:4	534:5	12	
KEYWORD	533:4	533:4	13	if
LEAF_NODE	533:4	533:4	14	if
LEAF_NODE	533:7	533:7	13	(
CONDITION	533:8	533:8	13	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_ORIENTATION , tif -> tif_dir . td_orientation )
EXPR	533:8	533:8	14	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_ORIENTATION , tif -> tif_dir . td_orientation )
UNARY_EXPR	533:8	533:9	15	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_ORIENTATION , tif -> tif_dir . td_orientation )
UNARY_OPERATOR	533:8	533:8	16	!
LEAF_NODE	533:8	533:8	17	!
FUNCTION_CALL	533:9	533:97	16	TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_ORIENTATION , tif -> tif_dir . td_orientation )
CALLEE	533:9	533:9	17	TIFFWriteDirectoryTagShort
LEAF_NODE	533:9	533:9	18	TIFFWriteDirectoryTagShort
LEAF_NODE	533:35	533:35	17	(
ARGUMENT	533:36	533:36	17	tif
FIELD	533:36	533:36	18	tif
LEAF_NODE	533:36	533:36	19	tif
LEAF_NODE	533:39	533:39	17	,
ARGUMENT	533:40	533:40	17	& ndir
UNARY_EXPR	533:40	533:41	18	& ndir
UNARY_OPERATOR	533:40	533:40	19	&
LEAF_NODE	533:40	533:40	20	&
FIELD	533:41	533:41	19	ndir
LEAF_NODE	533:41	533:41	20	ndir
LEAF_NODE	533:45	533:45	17	,
ARGUMENT	533:46	533:46	17	dir
FIELD	533:46	533:46	18	dir
LEAF_NODE	533:46	533:46	19	dir
LEAF_NODE	533:49	533:49	17	,
ARGUMENT	533:50	533:50	17	TIFFTAG_ORIENTATION
FIELD	533:50	533:50	18	TIFFTAG_ORIENTATION
LEAF_NODE	533:50	533:50	19	TIFFTAG_ORIENTATION
LEAF_NODE	533:69	533:69	17	,
ARGUMENT	533:70	533:70	17	tif -> tif_dir . td_orientation
FIELD	533:70	533:83	18	tif -> tif_dir . td_orientation
LEAF_NODE	533:70	533:70	19	tif
LEAF_NODE	533:73	533:73	19	->
LEAF_NODE	533:75	533:75	19	tif_dir
LEAF_NODE	533:82	533:82	19	.
LEAF_NODE	533:83	533:83	19	td_orientation
LEAF_NODE	533:97	533:97	17	)
LEAF_NODE	533:98	533:98	13	)
STATEMENTS	534:5	534:5	13	
JUMP_STATEMENT	534:5	534:13	14	goto bad ;
KEYWORD	534:5	534:5	15	goto
LEAF_NODE	534:5	534:5	16	goto
DESTINATION	534:10	534:10	15	bad
LEAF_NODE	534:10	534:10	16	bad
LEAF_NODE	534:13	534:13	15	;
LEAF_NODE	535:3	535:3	11	}
SELECTION	536:3	537:3	9	
KEYWORD	536:3	536:3	10	if
LEAF_NODE	536:3	536:3	11	if
LEAF_NODE	536:6	536:6	10	(
CONDITION	536:7	536:7	10	TIFFFieldSet ( tif , FIELD_SAMPLESPERPIXEL )
EXPR	536:7	536:7	11	TIFFFieldSet ( tif , FIELD_SAMPLESPERPIXEL )
FUNCTION_CALL	536:7	536:45	12	TIFFFieldSet ( tif , FIELD_SAMPLESPERPIXEL )
CALLEE	536:7	536:7	13	TIFFFieldSet
LEAF_NODE	536:7	536:7	14	TIFFFieldSet
LEAF_NODE	536:19	536:19	13	(
ARGUMENT	536:20	536:20	13	tif
FIELD	536:20	536:20	14	tif
LEAF_NODE	536:20	536:20	15	tif
LEAF_NODE	536:23	536:23	13	,
ARGUMENT	536:24	536:24	13	FIELD_SAMPLESPERPIXEL
FIELD	536:24	536:24	14	FIELD_SAMPLESPERPIXEL
LEAF_NODE	536:24	536:24	15	FIELD_SAMPLESPERPIXEL
LEAF_NODE	536:45	536:45	13	)
LEAF_NODE	536:46	536:46	10	)
STATEMENTS	537:3	540:3	10	
LEAF_NODE	537:3	537:3	11	{
STATEMENTS	538:4	538:4	11	
SELECTION	538:4	539:5	12	
KEYWORD	538:4	538:4	13	if
LEAF_NODE	538:4	538:4	14	if
LEAF_NODE	538:7	538:7	13	(
CONDITION	538:8	538:8	13	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_SAMPLESPERPIXEL , tif -> tif_dir . td_samplesperpixel )
EXPR	538:8	538:8	14	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_SAMPLESPERPIXEL , tif -> tif_dir . td_samplesperpixel )
UNARY_EXPR	538:8	538:9	15	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_SAMPLESPERPIXEL , tif -> tif_dir . td_samplesperpixel )
UNARY_OPERATOR	538:8	538:8	16	!
LEAF_NODE	538:8	538:8	17	!
FUNCTION_CALL	538:9	538:105	16	TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_SAMPLESPERPIXEL , tif -> tif_dir . td_samplesperpixel )
CALLEE	538:9	538:9	17	TIFFWriteDirectoryTagShort
LEAF_NODE	538:9	538:9	18	TIFFWriteDirectoryTagShort
LEAF_NODE	538:35	538:35	17	(
ARGUMENT	538:36	538:36	17	tif
FIELD	538:36	538:36	18	tif
LEAF_NODE	538:36	538:36	19	tif
LEAF_NODE	538:39	538:39	17	,
ARGUMENT	538:40	538:40	17	& ndir
UNARY_EXPR	538:40	538:41	18	& ndir
UNARY_OPERATOR	538:40	538:40	19	&
LEAF_NODE	538:40	538:40	20	&
FIELD	538:41	538:41	19	ndir
LEAF_NODE	538:41	538:41	20	ndir
LEAF_NODE	538:45	538:45	17	,
ARGUMENT	538:46	538:46	17	dir
FIELD	538:46	538:46	18	dir
LEAF_NODE	538:46	538:46	19	dir
LEAF_NODE	538:49	538:49	17	,
ARGUMENT	538:50	538:50	17	TIFFTAG_SAMPLESPERPIXEL
FIELD	538:50	538:50	18	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	538:50	538:50	19	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	538:73	538:73	17	,
ARGUMENT	538:74	538:74	17	tif -> tif_dir . td_samplesperpixel
FIELD	538:74	538:87	18	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	538:74	538:74	19	tif
LEAF_NODE	538:77	538:77	19	->
LEAF_NODE	538:79	538:79	19	tif_dir
LEAF_NODE	538:86	538:86	19	.
LEAF_NODE	538:87	538:87	19	td_samplesperpixel
LEAF_NODE	538:105	538:105	17	)
LEAF_NODE	538:106	538:106	13	)
STATEMENTS	539:5	539:5	13	
JUMP_STATEMENT	539:5	539:13	14	goto bad ;
KEYWORD	539:5	539:5	15	goto
LEAF_NODE	539:5	539:5	16	goto
DESTINATION	539:10	539:10	15	bad
LEAF_NODE	539:10	539:10	16	bad
LEAF_NODE	539:13	539:13	15	;
LEAF_NODE	540:3	540:3	11	}
SELECTION	541:3	542:3	9	
KEYWORD	541:3	541:3	10	if
LEAF_NODE	541:3	541:3	11	if
LEAF_NODE	541:6	541:6	10	(
CONDITION	541:7	541:7	10	TIFFFieldSet ( tif , FIELD_ROWSPERSTRIP )
EXPR	541:7	541:7	11	TIFFFieldSet ( tif , FIELD_ROWSPERSTRIP )
FUNCTION_CALL	541:7	541:42	12	TIFFFieldSet ( tif , FIELD_ROWSPERSTRIP )
CALLEE	541:7	541:7	13	TIFFFieldSet
LEAF_NODE	541:7	541:7	14	TIFFFieldSet
LEAF_NODE	541:19	541:19	13	(
ARGUMENT	541:20	541:20	13	tif
FIELD	541:20	541:20	14	tif
LEAF_NODE	541:20	541:20	15	tif
LEAF_NODE	541:23	541:23	13	,
ARGUMENT	541:24	541:24	13	FIELD_ROWSPERSTRIP
FIELD	541:24	541:24	14	FIELD_ROWSPERSTRIP
LEAF_NODE	541:24	541:24	15	FIELD_ROWSPERSTRIP
LEAF_NODE	541:42	541:42	13	)
LEAF_NODE	541:43	541:43	10	)
STATEMENTS	542:3	545:3	10	
LEAF_NODE	542:3	542:3	11	{
STATEMENTS	543:4	543:4	11	
SELECTION	543:4	544:5	12	
KEYWORD	543:4	543:4	13	if
LEAF_NODE	543:4	543:4	14	if
LEAF_NODE	543:7	543:7	13	(
CONDITION	543:8	543:8	13	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_ROWSPERSTRIP , tif -> tif_dir . td_rowsperstrip )
EXPR	543:8	543:8	14	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_ROWSPERSTRIP , tif -> tif_dir . td_rowsperstrip )
UNARY_EXPR	543:8	543:9	15	! TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_ROWSPERSTRIP , tif -> tif_dir . td_rowsperstrip )
UNARY_OPERATOR	543:8	543:8	16	!
LEAF_NODE	543:8	543:8	17	!
FUNCTION_CALL	543:9	543:103	16	TIFFWriteDirectoryTagShortLong ( tif , & ndir , dir , TIFFTAG_ROWSPERSTRIP , tif -> tif_dir . td_rowsperstrip )
CALLEE	543:9	543:9	17	TIFFWriteDirectoryTagShortLong
LEAF_NODE	543:9	543:9	18	TIFFWriteDirectoryTagShortLong
LEAF_NODE	543:39	543:39	17	(
ARGUMENT	543:40	543:40	17	tif
FIELD	543:40	543:40	18	tif
LEAF_NODE	543:40	543:40	19	tif
LEAF_NODE	543:43	543:43	17	,
ARGUMENT	543:44	543:44	17	& ndir
UNARY_EXPR	543:44	543:45	18	& ndir
UNARY_OPERATOR	543:44	543:44	19	&
LEAF_NODE	543:44	543:44	20	&
FIELD	543:45	543:45	19	ndir
LEAF_NODE	543:45	543:45	20	ndir
LEAF_NODE	543:49	543:49	17	,
ARGUMENT	543:50	543:50	17	dir
FIELD	543:50	543:50	18	dir
LEAF_NODE	543:50	543:50	19	dir
LEAF_NODE	543:53	543:53	17	,
ARGUMENT	543:54	543:54	17	TIFFTAG_ROWSPERSTRIP
FIELD	543:54	543:54	18	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	543:54	543:54	19	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	543:74	543:74	17	,
ARGUMENT	543:75	543:75	17	tif -> tif_dir . td_rowsperstrip
FIELD	543:75	543:88	18	tif -> tif_dir . td_rowsperstrip
LEAF_NODE	543:75	543:75	19	tif
LEAF_NODE	543:78	543:78	19	->
LEAF_NODE	543:80	543:80	19	tif_dir
LEAF_NODE	543:87	543:87	19	.
LEAF_NODE	543:88	543:88	19	td_rowsperstrip
LEAF_NODE	543:103	543:103	17	)
LEAF_NODE	543:104	543:104	13	)
STATEMENTS	544:5	544:5	13	
JUMP_STATEMENT	544:5	544:13	14	goto bad ;
KEYWORD	544:5	544:5	15	goto
LEAF_NODE	544:5	544:5	16	goto
DESTINATION	544:10	544:10	15	bad
LEAF_NODE	544:10	544:10	16	bad
LEAF_NODE	544:13	544:13	15	;
LEAF_NODE	545:3	545:3	11	}
SELECTION	546:3	547:3	9	
KEYWORD	546:3	546:3	10	if
LEAF_NODE	546:3	546:3	11	if
LEAF_NODE	546:6	546:6	10	(
CONDITION	546:7	546:7	10	TIFFFieldSet ( tif , FIELD_MINSAMPLEVALUE )
EXPR	546:7	546:7	11	TIFFFieldSet ( tif , FIELD_MINSAMPLEVALUE )
FUNCTION_CALL	546:7	546:44	12	TIFFFieldSet ( tif , FIELD_MINSAMPLEVALUE )
CALLEE	546:7	546:7	13	TIFFFieldSet
LEAF_NODE	546:7	546:7	14	TIFFFieldSet
LEAF_NODE	546:19	546:19	13	(
ARGUMENT	546:20	546:20	13	tif
FIELD	546:20	546:20	14	tif
LEAF_NODE	546:20	546:20	15	tif
LEAF_NODE	546:23	546:23	13	,
ARGUMENT	546:24	546:24	13	FIELD_MINSAMPLEVALUE
FIELD	546:24	546:24	14	FIELD_MINSAMPLEVALUE
LEAF_NODE	546:24	546:24	15	FIELD_MINSAMPLEVALUE
LEAF_NODE	546:44	546:44	13	)
LEAF_NODE	546:45	546:45	10	)
STATEMENTS	547:3	550:3	10	
LEAF_NODE	547:3	547:3	11	{
STATEMENTS	548:4	548:4	11	
SELECTION	548:4	549:5	12	
KEYWORD	548:4	548:4	13	if
LEAF_NODE	548:4	548:4	14	if
LEAF_NODE	548:7	548:7	13	(
CONDITION	548:8	548:8	13	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_MINSAMPLEVALUE , tif -> tif_dir . td_minsamplevalue )
EXPR	548:8	548:8	14	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_MINSAMPLEVALUE , tif -> tif_dir . td_minsamplevalue )
UNARY_EXPR	548:8	548:9	15	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_MINSAMPLEVALUE , tif -> tif_dir . td_minsamplevalue )
UNARY_OPERATOR	548:8	548:8	16	!
LEAF_NODE	548:8	548:8	17	!
FUNCTION_CALL	548:9	548:112	16	TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_MINSAMPLEVALUE , tif -> tif_dir . td_minsamplevalue )
CALLEE	548:9	548:9	17	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	548:9	548:9	18	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	548:44	548:44	17	(
ARGUMENT	548:45	548:45	17	tif
FIELD	548:45	548:45	18	tif
LEAF_NODE	548:45	548:45	19	tif
LEAF_NODE	548:48	548:48	17	,
ARGUMENT	548:49	548:49	17	& ndir
UNARY_EXPR	548:49	548:50	18	& ndir
UNARY_OPERATOR	548:49	548:49	19	&
LEAF_NODE	548:49	548:49	20	&
FIELD	548:50	548:50	19	ndir
LEAF_NODE	548:50	548:50	20	ndir
LEAF_NODE	548:54	548:54	17	,
ARGUMENT	548:55	548:55	17	dir
FIELD	548:55	548:55	18	dir
LEAF_NODE	548:55	548:55	19	dir
LEAF_NODE	548:58	548:58	17	,
ARGUMENT	548:59	548:59	17	TIFFTAG_MINSAMPLEVALUE
FIELD	548:59	548:59	18	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	548:59	548:59	19	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	548:81	548:81	17	,
ARGUMENT	548:82	548:82	17	tif -> tif_dir . td_minsamplevalue
FIELD	548:82	548:95	18	tif -> tif_dir . td_minsamplevalue
LEAF_NODE	548:82	548:82	19	tif
LEAF_NODE	548:85	548:85	19	->
LEAF_NODE	548:87	548:87	19	tif_dir
LEAF_NODE	548:94	548:94	19	.
LEAF_NODE	548:95	548:95	19	td_minsamplevalue
LEAF_NODE	548:112	548:112	17	)
LEAF_NODE	548:113	548:113	13	)
STATEMENTS	549:5	549:5	13	
JUMP_STATEMENT	549:5	549:13	14	goto bad ;
KEYWORD	549:5	549:5	15	goto
LEAF_NODE	549:5	549:5	16	goto
DESTINATION	549:10	549:10	15	bad
LEAF_NODE	549:10	549:10	16	bad
LEAF_NODE	549:13	549:13	15	;
LEAF_NODE	550:3	550:3	11	}
SELECTION	551:3	552:3	9	
KEYWORD	551:3	551:3	10	if
LEAF_NODE	551:3	551:3	11	if
LEAF_NODE	551:6	551:6	10	(
CONDITION	551:7	551:7	10	TIFFFieldSet ( tif , FIELD_MAXSAMPLEVALUE )
EXPR	551:7	551:7	11	TIFFFieldSet ( tif , FIELD_MAXSAMPLEVALUE )
FUNCTION_CALL	551:7	551:44	12	TIFFFieldSet ( tif , FIELD_MAXSAMPLEVALUE )
CALLEE	551:7	551:7	13	TIFFFieldSet
LEAF_NODE	551:7	551:7	14	TIFFFieldSet
LEAF_NODE	551:19	551:19	13	(
ARGUMENT	551:20	551:20	13	tif
FIELD	551:20	551:20	14	tif
LEAF_NODE	551:20	551:20	15	tif
LEAF_NODE	551:23	551:23	13	,
ARGUMENT	551:24	551:24	13	FIELD_MAXSAMPLEVALUE
FIELD	551:24	551:24	14	FIELD_MAXSAMPLEVALUE
LEAF_NODE	551:24	551:24	15	FIELD_MAXSAMPLEVALUE
LEAF_NODE	551:44	551:44	13	)
LEAF_NODE	551:45	551:45	10	)
STATEMENTS	552:3	555:3	10	
LEAF_NODE	552:3	552:3	11	{
STATEMENTS	553:4	553:4	11	
SELECTION	553:4	554:5	12	
KEYWORD	553:4	553:4	13	if
LEAF_NODE	553:4	553:4	14	if
LEAF_NODE	553:7	553:7	13	(
CONDITION	553:8	553:8	13	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_MAXSAMPLEVALUE , tif -> tif_dir . td_maxsamplevalue )
EXPR	553:8	553:8	14	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_MAXSAMPLEVALUE , tif -> tif_dir . td_maxsamplevalue )
UNARY_EXPR	553:8	553:9	15	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_MAXSAMPLEVALUE , tif -> tif_dir . td_maxsamplevalue )
UNARY_OPERATOR	553:8	553:8	16	!
LEAF_NODE	553:8	553:8	17	!
FUNCTION_CALL	553:9	553:112	16	TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_MAXSAMPLEVALUE , tif -> tif_dir . td_maxsamplevalue )
CALLEE	553:9	553:9	17	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	553:9	553:9	18	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	553:44	553:44	17	(
ARGUMENT	553:45	553:45	17	tif
FIELD	553:45	553:45	18	tif
LEAF_NODE	553:45	553:45	19	tif
LEAF_NODE	553:48	553:48	17	,
ARGUMENT	553:49	553:49	17	& ndir
UNARY_EXPR	553:49	553:50	18	& ndir
UNARY_OPERATOR	553:49	553:49	19	&
LEAF_NODE	553:49	553:49	20	&
FIELD	553:50	553:50	19	ndir
LEAF_NODE	553:50	553:50	20	ndir
LEAF_NODE	553:54	553:54	17	,
ARGUMENT	553:55	553:55	17	dir
FIELD	553:55	553:55	18	dir
LEAF_NODE	553:55	553:55	19	dir
LEAF_NODE	553:58	553:58	17	,
ARGUMENT	553:59	553:59	17	TIFFTAG_MAXSAMPLEVALUE
FIELD	553:59	553:59	18	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	553:59	553:59	19	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	553:81	553:81	17	,
ARGUMENT	553:82	553:82	17	tif -> tif_dir . td_maxsamplevalue
FIELD	553:82	553:95	18	tif -> tif_dir . td_maxsamplevalue
LEAF_NODE	553:82	553:82	19	tif
LEAF_NODE	553:85	553:85	19	->
LEAF_NODE	553:87	553:87	19	tif_dir
LEAF_NODE	553:94	553:94	19	.
LEAF_NODE	553:95	553:95	19	td_maxsamplevalue
LEAF_NODE	553:112	553:112	17	)
LEAF_NODE	553:113	553:113	13	)
STATEMENTS	554:5	554:5	13	
JUMP_STATEMENT	554:5	554:13	14	goto bad ;
KEYWORD	554:5	554:5	15	goto
LEAF_NODE	554:5	554:5	16	goto
DESTINATION	554:10	554:10	15	bad
LEAF_NODE	554:10	554:10	16	bad
LEAF_NODE	554:13	554:13	15	;
LEAF_NODE	555:3	555:3	11	}
SELECTION	556:3	557:3	9	
KEYWORD	556:3	556:3	10	if
LEAF_NODE	556:3	556:3	11	if
LEAF_NODE	556:6	556:6	10	(
CONDITION	556:7	556:7	10	TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
EXPR	556:7	556:7	11	TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
FUNCTION_CALL	556:7	556:42	12	TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
CALLEE	556:7	556:7	13	TIFFFieldSet
LEAF_NODE	556:7	556:7	14	TIFFFieldSet
LEAF_NODE	556:19	556:19	13	(
ARGUMENT	556:20	556:20	13	tif
FIELD	556:20	556:20	14	tif
LEAF_NODE	556:20	556:20	15	tif
LEAF_NODE	556:23	556:23	13	,
ARGUMENT	556:24	556:24	13	FIELD_PLANARCONFIG
FIELD	556:24	556:24	14	FIELD_PLANARCONFIG
LEAF_NODE	556:24	556:24	15	FIELD_PLANARCONFIG
LEAF_NODE	556:42	556:42	13	)
LEAF_NODE	556:43	556:43	10	)
STATEMENTS	557:3	560:3	10	
LEAF_NODE	557:3	557:3	11	{
STATEMENTS	558:4	558:4	11	
SELECTION	558:4	559:5	12	
KEYWORD	558:4	558:4	13	if
LEAF_NODE	558:4	558:4	14	if
LEAF_NODE	558:7	558:7	13	(
CONDITION	558:8	558:8	13	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_PLANARCONFIG , tif -> tif_dir . td_planarconfig )
EXPR	558:8	558:8	14	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_PLANARCONFIG , tif -> tif_dir . td_planarconfig )
UNARY_EXPR	558:8	558:9	15	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_PLANARCONFIG , tif -> tif_dir . td_planarconfig )
UNARY_OPERATOR	558:8	558:8	16	!
LEAF_NODE	558:8	558:8	17	!
FUNCTION_CALL	558:9	558:99	16	TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_PLANARCONFIG , tif -> tif_dir . td_planarconfig )
CALLEE	558:9	558:9	17	TIFFWriteDirectoryTagShort
LEAF_NODE	558:9	558:9	18	TIFFWriteDirectoryTagShort
LEAF_NODE	558:35	558:35	17	(
ARGUMENT	558:36	558:36	17	tif
FIELD	558:36	558:36	18	tif
LEAF_NODE	558:36	558:36	19	tif
LEAF_NODE	558:39	558:39	17	,
ARGUMENT	558:40	558:40	17	& ndir
UNARY_EXPR	558:40	558:41	18	& ndir
UNARY_OPERATOR	558:40	558:40	19	&
LEAF_NODE	558:40	558:40	20	&
FIELD	558:41	558:41	19	ndir
LEAF_NODE	558:41	558:41	20	ndir
LEAF_NODE	558:45	558:45	17	,
ARGUMENT	558:46	558:46	17	dir
FIELD	558:46	558:46	18	dir
LEAF_NODE	558:46	558:46	19	dir
LEAF_NODE	558:49	558:49	17	,
ARGUMENT	558:50	558:50	17	TIFFTAG_PLANARCONFIG
FIELD	558:50	558:50	18	TIFFTAG_PLANARCONFIG
LEAF_NODE	558:50	558:50	19	TIFFTAG_PLANARCONFIG
LEAF_NODE	558:70	558:70	17	,
ARGUMENT	558:71	558:71	17	tif -> tif_dir . td_planarconfig
FIELD	558:71	558:84	18	tif -> tif_dir . td_planarconfig
LEAF_NODE	558:71	558:71	19	tif
LEAF_NODE	558:74	558:74	19	->
LEAF_NODE	558:76	558:76	19	tif_dir
LEAF_NODE	558:83	558:83	19	.
LEAF_NODE	558:84	558:84	19	td_planarconfig
LEAF_NODE	558:99	558:99	17	)
LEAF_NODE	558:100	558:100	13	)
STATEMENTS	559:5	559:5	13	
JUMP_STATEMENT	559:5	559:13	14	goto bad ;
KEYWORD	559:5	559:5	15	goto
LEAF_NODE	559:5	559:5	16	goto
DESTINATION	559:10	559:10	15	bad
LEAF_NODE	559:10	559:10	16	bad
LEAF_NODE	559:13	559:13	15	;
LEAF_NODE	560:3	560:3	11	}
SELECTION	561:3	562:3	9	
KEYWORD	561:3	561:3	10	if
LEAF_NODE	561:3	561:3	11	if
LEAF_NODE	561:6	561:6	10	(
CONDITION	561:7	561:7	10	TIFFFieldSet ( tif , FIELD_RESOLUTIONUNIT )
EXPR	561:7	561:7	11	TIFFFieldSet ( tif , FIELD_RESOLUTIONUNIT )
FUNCTION_CALL	561:7	561:44	12	TIFFFieldSet ( tif , FIELD_RESOLUTIONUNIT )
CALLEE	561:7	561:7	13	TIFFFieldSet
LEAF_NODE	561:7	561:7	14	TIFFFieldSet
LEAF_NODE	561:19	561:19	13	(
ARGUMENT	561:20	561:20	13	tif
FIELD	561:20	561:20	14	tif
LEAF_NODE	561:20	561:20	15	tif
LEAF_NODE	561:23	561:23	13	,
ARGUMENT	561:24	561:24	13	FIELD_RESOLUTIONUNIT
FIELD	561:24	561:24	14	FIELD_RESOLUTIONUNIT
LEAF_NODE	561:24	561:24	15	FIELD_RESOLUTIONUNIT
LEAF_NODE	561:44	561:44	13	)
LEAF_NODE	561:45	561:45	10	)
STATEMENTS	562:3	565:3	10	
LEAF_NODE	562:3	562:3	11	{
STATEMENTS	563:4	563:4	11	
SELECTION	563:4	564:5	12	
KEYWORD	563:4	563:4	13	if
LEAF_NODE	563:4	563:4	14	if
LEAF_NODE	563:7	563:7	13	(
CONDITION	563:8	563:8	13	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_RESOLUTIONUNIT , tif -> tif_dir . td_resolutionunit )
EXPR	563:8	563:8	14	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_RESOLUTIONUNIT , tif -> tif_dir . td_resolutionunit )
UNARY_EXPR	563:8	563:9	15	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_RESOLUTIONUNIT , tif -> tif_dir . td_resolutionunit )
UNARY_OPERATOR	563:8	563:8	16	!
LEAF_NODE	563:8	563:8	17	!
FUNCTION_CALL	563:9	563:103	16	TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_RESOLUTIONUNIT , tif -> tif_dir . td_resolutionunit )
CALLEE	563:9	563:9	17	TIFFWriteDirectoryTagShort
LEAF_NODE	563:9	563:9	18	TIFFWriteDirectoryTagShort
LEAF_NODE	563:35	563:35	17	(
ARGUMENT	563:36	563:36	17	tif
FIELD	563:36	563:36	18	tif
LEAF_NODE	563:36	563:36	19	tif
LEAF_NODE	563:39	563:39	17	,
ARGUMENT	563:40	563:40	17	& ndir
UNARY_EXPR	563:40	563:41	18	& ndir
UNARY_OPERATOR	563:40	563:40	19	&
LEAF_NODE	563:40	563:40	20	&
FIELD	563:41	563:41	19	ndir
LEAF_NODE	563:41	563:41	20	ndir
LEAF_NODE	563:45	563:45	17	,
ARGUMENT	563:46	563:46	17	dir
FIELD	563:46	563:46	18	dir
LEAF_NODE	563:46	563:46	19	dir
LEAF_NODE	563:49	563:49	17	,
ARGUMENT	563:50	563:50	17	TIFFTAG_RESOLUTIONUNIT
FIELD	563:50	563:50	18	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	563:50	563:50	19	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	563:72	563:72	17	,
ARGUMENT	563:73	563:73	17	tif -> tif_dir . td_resolutionunit
FIELD	563:73	563:86	18	tif -> tif_dir . td_resolutionunit
LEAF_NODE	563:73	563:73	19	tif
LEAF_NODE	563:76	563:76	19	->
LEAF_NODE	563:78	563:78	19	tif_dir
LEAF_NODE	563:85	563:85	19	.
LEAF_NODE	563:86	563:86	19	td_resolutionunit
LEAF_NODE	563:103	563:103	17	)
LEAF_NODE	563:104	563:104	13	)
STATEMENTS	564:5	564:5	13	
JUMP_STATEMENT	564:5	564:13	14	goto bad ;
KEYWORD	564:5	564:5	15	goto
LEAF_NODE	564:5	564:5	16	goto
DESTINATION	564:10	564:10	15	bad
LEAF_NODE	564:10	564:10	16	bad
LEAF_NODE	564:13	564:13	15	;
LEAF_NODE	565:3	565:3	11	}
SELECTION	566:3	567:3	9	
KEYWORD	566:3	566:3	10	if
LEAF_NODE	566:3	566:3	11	if
LEAF_NODE	566:6	566:6	10	(
CONDITION	566:7	566:7	10	TIFFFieldSet ( tif , FIELD_PAGENUMBER )
EXPR	566:7	566:7	11	TIFFFieldSet ( tif , FIELD_PAGENUMBER )
FUNCTION_CALL	566:7	566:40	12	TIFFFieldSet ( tif , FIELD_PAGENUMBER )
CALLEE	566:7	566:7	13	TIFFFieldSet
LEAF_NODE	566:7	566:7	14	TIFFFieldSet
LEAF_NODE	566:19	566:19	13	(
ARGUMENT	566:20	566:20	13	tif
FIELD	566:20	566:20	14	tif
LEAF_NODE	566:20	566:20	15	tif
LEAF_NODE	566:23	566:23	13	,
ARGUMENT	566:24	566:24	13	FIELD_PAGENUMBER
FIELD	566:24	566:24	14	FIELD_PAGENUMBER
LEAF_NODE	566:24	566:24	15	FIELD_PAGENUMBER
LEAF_NODE	566:40	566:40	13	)
LEAF_NODE	566:41	566:41	10	)
STATEMENTS	567:3	570:3	10	
LEAF_NODE	567:3	567:3	11	{
STATEMENTS	568:4	568:4	11	
SELECTION	568:4	569:5	12	
KEYWORD	568:4	568:4	13	if
LEAF_NODE	568:4	568:4	14	if
LEAF_NODE	568:7	568:7	13	(
CONDITION	568:8	568:8	13	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_PAGENUMBER , 2 , & tif -> tif_dir . td_pagenumber [ 0 ] )
EXPR	568:8	568:8	14	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_PAGENUMBER , 2 , & tif -> tif_dir . td_pagenumber [ 0 ] )
UNARY_EXPR	568:8	568:9	15	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_PAGENUMBER , 2 , & tif -> tif_dir . td_pagenumber [ 0 ] )
UNARY_OPERATOR	568:8	568:8	16	!
LEAF_NODE	568:8	568:8	17	!
FUNCTION_CALL	568:9	568:106	16	TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_PAGENUMBER , 2 , & tif -> tif_dir . td_pagenumber [ 0 ] )
CALLEE	568:9	568:9	17	TIFFWriteDirectoryTagShortArray
LEAF_NODE	568:9	568:9	18	TIFFWriteDirectoryTagShortArray
LEAF_NODE	568:40	568:40	17	(
ARGUMENT	568:41	568:41	17	tif
FIELD	568:41	568:41	18	tif
LEAF_NODE	568:41	568:41	19	tif
LEAF_NODE	568:44	568:44	17	,
ARGUMENT	568:45	568:45	17	& ndir
UNARY_EXPR	568:45	568:46	18	& ndir
UNARY_OPERATOR	568:45	568:45	19	&
LEAF_NODE	568:45	568:45	20	&
FIELD	568:46	568:46	19	ndir
LEAF_NODE	568:46	568:46	20	ndir
LEAF_NODE	568:50	568:50	17	,
ARGUMENT	568:51	568:51	17	dir
FIELD	568:51	568:51	18	dir
LEAF_NODE	568:51	568:51	19	dir
LEAF_NODE	568:54	568:54	17	,
ARGUMENT	568:55	568:55	17	TIFFTAG_PAGENUMBER
FIELD	568:55	568:55	18	TIFFTAG_PAGENUMBER
LEAF_NODE	568:55	568:55	19	TIFFTAG_PAGENUMBER
LEAF_NODE	568:73	568:73	17	,
ARGUMENT	568:74	568:74	17	2
FIELD	568:74	568:74	18	2
LEAF_NODE	568:74	568:74	19	2
LEAF_NODE	568:75	568:75	17	,
ARGUMENT	568:76	568:76	17	& tif -> tif_dir . td_pagenumber [ 0 ]
UNARY_EXPR	568:76	568:77	18	& tif -> tif_dir . td_pagenumber [ 0 ]
UNARY_OPERATOR	568:76	568:76	19	&
LEAF_NODE	568:76	568:76	20	&
FIELD	568:77	568:105	19	tif -> tif_dir . td_pagenumber [ 0 ]
LEAF_NODE	568:77	568:77	20	tif
LEAF_NODE	568:80	568:80	20	->
LEAF_NODE	568:82	568:82	20	tif_dir
LEAF_NODE	568:89	568:89	20	.
LEAF_NODE	568:90	568:90	20	td_pagenumber
LEAF_NODE	568:103	568:103	20	[
EXPR	568:104	568:104	20	0
FIELD	568:104	568:104	21	0
LEAF_NODE	568:104	568:104	22	0
LEAF_NODE	568:105	568:105	20	]
LEAF_NODE	568:106	568:106	17	)
LEAF_NODE	568:107	568:107	13	)
STATEMENTS	569:5	569:5	13	
JUMP_STATEMENT	569:5	569:13	14	goto bad ;
KEYWORD	569:5	569:5	15	goto
LEAF_NODE	569:5	569:5	16	goto
DESTINATION	569:10	569:10	15	bad
LEAF_NODE	569:10	569:10	16	bad
LEAF_NODE	569:13	569:13	15	;
LEAF_NODE	570:3	570:3	11	}
SELECTION	571:3	572:3	9	
KEYWORD	571:3	571:3	10	if
LEAF_NODE	571:3	571:3	11	if
LEAF_NODE	571:6	571:6	10	(
CONDITION	571:7	571:7	10	TIFFFieldSet ( tif , FIELD_STRIPBYTECOUNTS )
EXPR	571:7	571:7	11	TIFFFieldSet ( tif , FIELD_STRIPBYTECOUNTS )
FUNCTION_CALL	571:7	571:45	12	TIFFFieldSet ( tif , FIELD_STRIPBYTECOUNTS )
CALLEE	571:7	571:7	13	TIFFFieldSet
LEAF_NODE	571:7	571:7	14	TIFFFieldSet
LEAF_NODE	571:19	571:19	13	(
ARGUMENT	571:20	571:20	13	tif
FIELD	571:20	571:20	14	tif
LEAF_NODE	571:20	571:20	15	tif
LEAF_NODE	571:23	571:23	13	,
ARGUMENT	571:24	571:24	13	FIELD_STRIPBYTECOUNTS
FIELD	571:24	571:24	14	FIELD_STRIPBYTECOUNTS
LEAF_NODE	571:24	571:24	15	FIELD_STRIPBYTECOUNTS
LEAF_NODE	571:45	571:45	13	)
LEAF_NODE	571:46	571:46	10	)
STATEMENTS	572:3	583:3	10	
LEAF_NODE	572:3	572:3	11	{
STATEMENTS	573:4	578:4	11	
SELECTION	573:4	574:4	12	
KEYWORD	573:4	573:4	13	if
LEAF_NODE	573:4	573:4	14	if
LEAF_NODE	573:7	573:7	13	(
CONDITION	573:8	573:8	13	! isTiled ( tif )
EXPR	573:8	573:8	14	! isTiled ( tif )
UNARY_EXPR	573:8	573:9	15	! isTiled ( tif )
UNARY_OPERATOR	573:8	573:8	16	!
LEAF_NODE	573:8	573:8	17	!
FUNCTION_CALL	573:9	573:20	16	isTiled ( tif )
CALLEE	573:9	573:9	17	isTiled
LEAF_NODE	573:9	573:9	18	isTiled
LEAF_NODE	573:16	573:16	17	(
ARGUMENT	573:17	573:17	17	tif
FIELD	573:17	573:17	18	tif
LEAF_NODE	573:17	573:17	19	tif
LEAF_NODE	573:20	573:20	17	)
LEAF_NODE	573:21	573:21	13	)
STATEMENTS	574:4	577:4	13	
LEAF_NODE	574:4	574:4	14	{
STATEMENTS	575:5	575:5	14	
SELECTION	575:5	576:6	15	
KEYWORD	575:5	575:5	16	if
LEAF_NODE	575:5	575:5	17	if
LEAF_NODE	575:8	575:8	16	(
CONDITION	575:9	575:9	16	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_STRIPBYTECOUNTS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripbytecount_p )
EXPR	575:9	575:9	17	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_STRIPBYTECOUNTS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripbytecount_p )
UNARY_EXPR	575:9	575:10	18	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_STRIPBYTECOUNTS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripbytecount_p )
UNARY_OPERATOR	575:9	575:9	19	!
LEAF_NODE	575:9	575:9	20	!
FUNCTION_CALL	575:10	575:140	19	TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_STRIPBYTECOUNTS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripbytecount_p )
CALLEE	575:10	575:10	20	TIFFWriteDirectoryTagLongLong8Array
LEAF_NODE	575:10	575:10	21	TIFFWriteDirectoryTagLongLong8Array
LEAF_NODE	575:45	575:45	20	(
ARGUMENT	575:46	575:46	20	tif
FIELD	575:46	575:46	21	tif
LEAF_NODE	575:46	575:46	22	tif
LEAF_NODE	575:49	575:49	20	,
ARGUMENT	575:50	575:50	20	& ndir
UNARY_EXPR	575:50	575:51	21	& ndir
UNARY_OPERATOR	575:50	575:50	22	&
LEAF_NODE	575:50	575:50	23	&
FIELD	575:51	575:51	22	ndir
LEAF_NODE	575:51	575:51	23	ndir
LEAF_NODE	575:55	575:55	20	,
ARGUMENT	575:56	575:56	20	dir
FIELD	575:56	575:56	21	dir
LEAF_NODE	575:56	575:56	22	dir
LEAF_NODE	575:59	575:59	20	,
ARGUMENT	575:60	575:60	20	TIFFTAG_STRIPBYTECOUNTS
FIELD	575:60	575:60	21	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	575:60	575:60	22	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	575:83	575:83	20	,
ARGUMENT	575:84	575:84	20	tif -> tif_dir . td_nstrips
FIELD	575:84	575:97	21	tif -> tif_dir . td_nstrips
LEAF_NODE	575:84	575:84	22	tif
LEAF_NODE	575:87	575:87	22	->
LEAF_NODE	575:89	575:89	22	tif_dir
LEAF_NODE	575:96	575:96	22	.
LEAF_NODE	575:97	575:97	22	td_nstrips
LEAF_NODE	575:107	575:107	20	,
ARGUMENT	575:108	575:108	20	tif -> tif_dir . td_stripbytecount_p
FIELD	575:108	575:121	21	tif -> tif_dir . td_stripbytecount_p
LEAF_NODE	575:108	575:108	22	tif
LEAF_NODE	575:111	575:111	22	->
LEAF_NODE	575:113	575:113	22	tif_dir
LEAF_NODE	575:120	575:120	22	.
LEAF_NODE	575:121	575:121	22	td_stripbytecount_p
LEAF_NODE	575:140	575:140	20	)
LEAF_NODE	575:141	575:141	16	)
STATEMENTS	576:6	576:6	16	
JUMP_STATEMENT	576:6	576:14	17	goto bad ;
KEYWORD	576:6	576:6	18	goto
LEAF_NODE	576:6	576:6	19	goto
DESTINATION	576:11	576:11	18	bad
LEAF_NODE	576:11	576:11	19	bad
LEAF_NODE	576:14	576:14	18	;
LEAF_NODE	577:4	577:4	14	}
SELECTION	578:4	579:4	12	
KEYWORD	578:4	578:4	13	else
LEAF_NODE	578:4	578:4	14	else
STATEMENTS	579:4	582:4	13	
LEAF_NODE	579:4	579:4	14	{
STATEMENTS	580:5	580:5	14	
SELECTION	580:5	581:6	15	
KEYWORD	580:5	580:5	16	if
LEAF_NODE	580:5	580:5	17	if
LEAF_NODE	580:8	580:8	16	(
CONDITION	580:9	580:9	16	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_TILEBYTECOUNTS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripbytecount_p )
EXPR	580:9	580:9	17	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_TILEBYTECOUNTS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripbytecount_p )
UNARY_EXPR	580:9	580:10	18	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_TILEBYTECOUNTS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripbytecount_p )
UNARY_OPERATOR	580:9	580:9	19	!
LEAF_NODE	580:9	580:9	20	!
FUNCTION_CALL	580:10	580:139	19	TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_TILEBYTECOUNTS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripbytecount_p )
CALLEE	580:10	580:10	20	TIFFWriteDirectoryTagLongLong8Array
LEAF_NODE	580:10	580:10	21	TIFFWriteDirectoryTagLongLong8Array
LEAF_NODE	580:45	580:45	20	(
ARGUMENT	580:46	580:46	20	tif
FIELD	580:46	580:46	21	tif
LEAF_NODE	580:46	580:46	22	tif
LEAF_NODE	580:49	580:49	20	,
ARGUMENT	580:50	580:50	20	& ndir
UNARY_EXPR	580:50	580:51	21	& ndir
UNARY_OPERATOR	580:50	580:50	22	&
LEAF_NODE	580:50	580:50	23	&
FIELD	580:51	580:51	22	ndir
LEAF_NODE	580:51	580:51	23	ndir
LEAF_NODE	580:55	580:55	20	,
ARGUMENT	580:56	580:56	20	dir
FIELD	580:56	580:56	21	dir
LEAF_NODE	580:56	580:56	22	dir
LEAF_NODE	580:59	580:59	20	,
ARGUMENT	580:60	580:60	20	TIFFTAG_TILEBYTECOUNTS
FIELD	580:60	580:60	21	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	580:60	580:60	22	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	580:82	580:82	20	,
ARGUMENT	580:83	580:83	20	tif -> tif_dir . td_nstrips
FIELD	580:83	580:96	21	tif -> tif_dir . td_nstrips
LEAF_NODE	580:83	580:83	22	tif
LEAF_NODE	580:86	580:86	22	->
LEAF_NODE	580:88	580:88	22	tif_dir
LEAF_NODE	580:95	580:95	22	.
LEAF_NODE	580:96	580:96	22	td_nstrips
LEAF_NODE	580:106	580:106	20	,
ARGUMENT	580:107	580:107	20	tif -> tif_dir . td_stripbytecount_p
FIELD	580:107	580:120	21	tif -> tif_dir . td_stripbytecount_p
LEAF_NODE	580:107	580:107	22	tif
LEAF_NODE	580:110	580:110	22	->
LEAF_NODE	580:112	580:112	22	tif_dir
LEAF_NODE	580:119	580:119	22	.
LEAF_NODE	580:120	580:120	22	td_stripbytecount_p
LEAF_NODE	580:139	580:139	20	)
LEAF_NODE	580:140	580:140	16	)
STATEMENTS	581:6	581:6	16	
JUMP_STATEMENT	581:6	581:14	17	goto bad ;
KEYWORD	581:6	581:6	18	goto
LEAF_NODE	581:6	581:6	19	goto
DESTINATION	581:11	581:11	18	bad
LEAF_NODE	581:11	581:11	19	bad
LEAF_NODE	581:14	581:14	18	;
LEAF_NODE	582:4	582:4	14	}
LEAF_NODE	583:3	583:3	11	}
SELECTION	584:3	585:3	9	
KEYWORD	584:3	584:3	10	if
LEAF_NODE	584:3	584:3	11	if
LEAF_NODE	584:6	584:6	10	(
CONDITION	584:7	584:7	10	TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
EXPR	584:7	584:7	11	TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
FUNCTION_CALL	584:7	584:42	12	TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
CALLEE	584:7	584:7	13	TIFFFieldSet
LEAF_NODE	584:7	584:7	14	TIFFFieldSet
LEAF_NODE	584:19	584:19	13	(
ARGUMENT	584:20	584:20	13	tif
FIELD	584:20	584:20	14	tif
LEAF_NODE	584:20	584:20	15	tif
LEAF_NODE	584:23	584:23	13	,
ARGUMENT	584:24	584:24	13	FIELD_STRIPOFFSETS
FIELD	584:24	584:24	14	FIELD_STRIPOFFSETS
LEAF_NODE	584:24	584:24	15	FIELD_STRIPOFFSETS
LEAF_NODE	584:42	584:42	13	)
LEAF_NODE	584:43	584:43	10	)
STATEMENTS	585:3	608:3	10	
LEAF_NODE	585:3	585:3	11	{
STATEMENTS	586:4	603:4	11	
SELECTION	586:4	587:4	12	
KEYWORD	586:4	586:4	13	if
LEAF_NODE	586:4	586:4	14	if
LEAF_NODE	586:7	586:7	13	(
CONDITION	586:8	586:8	13	! isTiled ( tif )
EXPR	586:8	586:8	14	! isTiled ( tif )
UNARY_EXPR	586:8	586:9	15	! isTiled ( tif )
UNARY_OPERATOR	586:8	586:8	16	!
LEAF_NODE	586:8	586:8	17	!
FUNCTION_CALL	586:9	586:20	16	isTiled ( tif )
CALLEE	586:9	586:9	17	isTiled
LEAF_NODE	586:9	586:9	18	isTiled
LEAF_NODE	586:16	586:16	17	(
ARGUMENT	586:17	586:17	17	tif
FIELD	586:17	586:17	18	tif
LEAF_NODE	586:17	586:17	19	tif
LEAF_NODE	586:20	586:20	17	)
LEAF_NODE	586:21	586:21	13	)
STATEMENTS	587:4	602:4	13	
LEAF_NODE	587:4	587:4	14	{
STATEMENTS	599:20	599:20	14	
SELECTION	599:20	601:24	15	
KEYWORD	599:20	599:20	16	if
LEAF_NODE	599:20	599:20	17	if
LEAF_NODE	599:23	599:23	16	(
CONDITION	599:24	599:24	16	tif -> tif_dir . td_stripoffset_p != NULL && ! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_STRIPOFFSETS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripoffset_p )
EXPR	599:24	599:24	17	tif -> tif_dir . td_stripoffset_p != NULL && ! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_STRIPOFFSETS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripoffset_p )
AND	599:24	600:24	18	tif -> tif_dir . td_stripoffset_p != NULL && ! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_STRIPOFFSETS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripoffset_p )
EXPR	599:24	599:57	19	tif -> tif_dir . td_stripoffset_p != NULL
FIELD	599:24	599:37	20	tif -> tif_dir . td_stripoffset_p
LEAF_NODE	599:24	599:24	21	tif
LEAF_NODE	599:27	599:27	21	->
LEAF_NODE	599:29	599:29	21	tif_dir
LEAF_NODE	599:36	599:36	21	.
LEAF_NODE	599:37	599:37	21	td_stripoffset_p
EQ_OPERATOR	599:54	599:54	20	!=
LEAF_NODE	599:54	599:54	21	!=
FIELD	599:57	599:57	20	NULL
LEAF_NODE	599:57	599:57	21	NULL
LEAF_NODE	599:62	599:62	19	&&
EXPR	600:24	600:24	19	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_STRIPOFFSETS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripoffset_p )
UNARY_EXPR	600:24	600:25	20	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_STRIPOFFSETS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripoffset_p )
UNARY_OPERATOR	600:24	600:24	21	!
LEAF_NODE	600:24	600:24	22	!
FUNCTION_CALL	600:25	600:149	21	TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_STRIPOFFSETS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripoffset_p )
CALLEE	600:25	600:25	22	TIFFWriteDirectoryTagLongLong8Array
LEAF_NODE	600:25	600:25	23	TIFFWriteDirectoryTagLongLong8Array
LEAF_NODE	600:60	600:60	22	(
ARGUMENT	600:61	600:61	22	tif
FIELD	600:61	600:61	23	tif
LEAF_NODE	600:61	600:61	24	tif
LEAF_NODE	600:64	600:64	22	,
ARGUMENT	600:65	600:65	22	& ndir
UNARY_EXPR	600:65	600:66	23	& ndir
UNARY_OPERATOR	600:65	600:65	24	&
LEAF_NODE	600:65	600:65	25	&
FIELD	600:66	600:66	24	ndir
LEAF_NODE	600:66	600:66	25	ndir
LEAF_NODE	600:70	600:70	22	,
ARGUMENT	600:71	600:71	22	dir
FIELD	600:71	600:71	23	dir
LEAF_NODE	600:71	600:71	24	dir
LEAF_NODE	600:74	600:74	22	,
ARGUMENT	600:75	600:75	22	TIFFTAG_STRIPOFFSETS
FIELD	600:75	600:75	23	TIFFTAG_STRIPOFFSETS
LEAF_NODE	600:75	600:75	24	TIFFTAG_STRIPOFFSETS
LEAF_NODE	600:95	600:95	22	,
ARGUMENT	600:96	600:96	22	tif -> tif_dir . td_nstrips
FIELD	600:96	600:109	23	tif -> tif_dir . td_nstrips
LEAF_NODE	600:96	600:96	24	tif
LEAF_NODE	600:99	600:99	24	->
LEAF_NODE	600:101	600:101	24	tif_dir
LEAF_NODE	600:108	600:108	24	.
LEAF_NODE	600:109	600:109	24	td_nstrips
LEAF_NODE	600:119	600:119	22	,
ARGUMENT	600:120	600:120	22	tif -> tif_dir . td_stripoffset_p
FIELD	600:120	600:133	23	tif -> tif_dir . td_stripoffset_p
LEAF_NODE	600:120	600:120	24	tif
LEAF_NODE	600:123	600:123	24	->
LEAF_NODE	600:125	600:125	24	tif_dir
LEAF_NODE	600:132	600:132	24	.
LEAF_NODE	600:133	600:133	24	td_stripoffset_p
LEAF_NODE	600:149	600:149	22	)
LEAF_NODE	600:150	600:150	16	)
STATEMENTS	601:24	601:24	16	
JUMP_STATEMENT	601:24	601:32	17	goto bad ;
KEYWORD	601:24	601:24	18	goto
LEAF_NODE	601:24	601:24	19	goto
DESTINATION	601:29	601:29	18	bad
LEAF_NODE	601:29	601:29	19	bad
LEAF_NODE	601:32	601:32	18	;
LEAF_NODE	602:4	602:4	14	}
SELECTION	603:4	604:4	12	
KEYWORD	603:4	603:4	13	else
LEAF_NODE	603:4	603:4	14	else
STATEMENTS	604:4	607:4	13	
LEAF_NODE	604:4	604:4	14	{
STATEMENTS	605:5	605:5	14	
SELECTION	605:5	606:6	15	
KEYWORD	605:5	605:5	16	if
LEAF_NODE	605:5	605:5	17	if
LEAF_NODE	605:8	605:8	16	(
CONDITION	605:9	605:9	16	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_TILEOFFSETS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripoffset_p )
EXPR	605:9	605:9	17	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_TILEOFFSETS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripoffset_p )
UNARY_EXPR	605:9	605:10	18	! TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_TILEOFFSETS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripoffset_p )
UNARY_OPERATOR	605:9	605:9	19	!
LEAF_NODE	605:9	605:9	20	!
FUNCTION_CALL	605:10	605:133	19	TIFFWriteDirectoryTagLongLong8Array ( tif , & ndir , dir , TIFFTAG_TILEOFFSETS , tif -> tif_dir . td_nstrips , tif -> tif_dir . td_stripoffset_p )
CALLEE	605:10	605:10	20	TIFFWriteDirectoryTagLongLong8Array
LEAF_NODE	605:10	605:10	21	TIFFWriteDirectoryTagLongLong8Array
LEAF_NODE	605:45	605:45	20	(
ARGUMENT	605:46	605:46	20	tif
FIELD	605:46	605:46	21	tif
LEAF_NODE	605:46	605:46	22	tif
LEAF_NODE	605:49	605:49	20	,
ARGUMENT	605:50	605:50	20	& ndir
UNARY_EXPR	605:50	605:51	21	& ndir
UNARY_OPERATOR	605:50	605:50	22	&
LEAF_NODE	605:50	605:50	23	&
FIELD	605:51	605:51	22	ndir
LEAF_NODE	605:51	605:51	23	ndir
LEAF_NODE	605:55	605:55	20	,
ARGUMENT	605:56	605:56	20	dir
FIELD	605:56	605:56	21	dir
LEAF_NODE	605:56	605:56	22	dir
LEAF_NODE	605:59	605:59	20	,
ARGUMENT	605:60	605:60	20	TIFFTAG_TILEOFFSETS
FIELD	605:60	605:60	21	TIFFTAG_TILEOFFSETS
LEAF_NODE	605:60	605:60	22	TIFFTAG_TILEOFFSETS
LEAF_NODE	605:79	605:79	20	,
ARGUMENT	605:80	605:80	20	tif -> tif_dir . td_nstrips
FIELD	605:80	605:93	21	tif -> tif_dir . td_nstrips
LEAF_NODE	605:80	605:80	22	tif
LEAF_NODE	605:83	605:83	22	->
LEAF_NODE	605:85	605:85	22	tif_dir
LEAF_NODE	605:92	605:92	22	.
LEAF_NODE	605:93	605:93	22	td_nstrips
LEAF_NODE	605:103	605:103	20	,
ARGUMENT	605:104	605:104	20	tif -> tif_dir . td_stripoffset_p
FIELD	605:104	605:117	21	tif -> tif_dir . td_stripoffset_p
LEAF_NODE	605:104	605:104	22	tif
LEAF_NODE	605:107	605:107	22	->
LEAF_NODE	605:109	605:109	22	tif_dir
LEAF_NODE	605:116	605:116	22	.
LEAF_NODE	605:117	605:117	22	td_stripoffset_p
LEAF_NODE	605:133	605:133	20	)
LEAF_NODE	605:134	605:134	16	)
STATEMENTS	606:6	606:6	16	
JUMP_STATEMENT	606:6	606:14	17	goto bad ;
KEYWORD	606:6	606:6	18	goto
LEAF_NODE	606:6	606:6	19	goto
DESTINATION	606:11	606:11	18	bad
LEAF_NODE	606:11	606:11	19	bad
LEAF_NODE	606:14	606:14	18	;
LEAF_NODE	607:4	607:4	14	}
LEAF_NODE	608:3	608:3	11	}
SELECTION	609:3	610:3	9	
KEYWORD	609:3	609:3	10	if
LEAF_NODE	609:3	609:3	11	if
LEAF_NODE	609:6	609:6	10	(
CONDITION	609:7	609:7	10	TIFFFieldSet ( tif , FIELD_COLORMAP )
EXPR	609:7	609:7	11	TIFFFieldSet ( tif , FIELD_COLORMAP )
FUNCTION_CALL	609:7	609:38	12	TIFFFieldSet ( tif , FIELD_COLORMAP )
CALLEE	609:7	609:7	13	TIFFFieldSet
LEAF_NODE	609:7	609:7	14	TIFFFieldSet
LEAF_NODE	609:19	609:19	13	(
ARGUMENT	609:20	609:20	13	tif
FIELD	609:20	609:20	14	tif
LEAF_NODE	609:20	609:20	15	tif
LEAF_NODE	609:23	609:23	13	,
ARGUMENT	609:24	609:24	13	FIELD_COLORMAP
FIELD	609:24	609:24	14	FIELD_COLORMAP
LEAF_NODE	609:24	609:24	15	FIELD_COLORMAP
LEAF_NODE	609:38	609:38	13	)
LEAF_NODE	609:39	609:39	10	)
STATEMENTS	610:3	613:3	10	
LEAF_NODE	610:3	610:3	11	{
STATEMENTS	611:4	611:4	11	
SELECTION	611:4	612:5	12	
KEYWORD	611:4	611:4	13	if
LEAF_NODE	611:4	611:4	14	if
LEAF_NODE	611:7	611:7	13	(
CONDITION	611:8	611:8	13	! TIFFWriteDirectoryTagColormap ( tif , & ndir , dir )
EXPR	611:8	611:8	14	! TIFFWriteDirectoryTagColormap ( tif , & ndir , dir )
UNARY_EXPR	611:8	611:9	15	! TIFFWriteDirectoryTagColormap ( tif , & ndir , dir )
UNARY_OPERATOR	611:8	611:8	16	!
LEAF_NODE	611:8	611:8	17	!
FUNCTION_CALL	611:9	611:52	16	TIFFWriteDirectoryTagColormap ( tif , & ndir , dir )
CALLEE	611:9	611:9	17	TIFFWriteDirectoryTagColormap
LEAF_NODE	611:9	611:9	18	TIFFWriteDirectoryTagColormap
LEAF_NODE	611:38	611:38	17	(
ARGUMENT	611:39	611:39	17	tif
FIELD	611:39	611:39	18	tif
LEAF_NODE	611:39	611:39	19	tif
LEAF_NODE	611:42	611:42	17	,
ARGUMENT	611:43	611:43	17	& ndir
UNARY_EXPR	611:43	611:44	18	& ndir
UNARY_OPERATOR	611:43	611:43	19	&
LEAF_NODE	611:43	611:43	20	&
FIELD	611:44	611:44	19	ndir
LEAF_NODE	611:44	611:44	20	ndir
LEAF_NODE	611:48	611:48	17	,
ARGUMENT	611:49	611:49	17	dir
FIELD	611:49	611:49	18	dir
LEAF_NODE	611:49	611:49	19	dir
LEAF_NODE	611:52	611:52	17	)
LEAF_NODE	611:53	611:53	13	)
STATEMENTS	612:5	612:5	13	
JUMP_STATEMENT	612:5	612:13	14	goto bad ;
KEYWORD	612:5	612:5	15	goto
LEAF_NODE	612:5	612:5	16	goto
DESTINATION	612:10	612:10	15	bad
LEAF_NODE	612:10	612:10	16	bad
LEAF_NODE	612:13	612:13	15	;
LEAF_NODE	613:3	613:3	11	}
SELECTION	614:3	615:3	9	
KEYWORD	614:3	614:3	10	if
LEAF_NODE	614:3	614:3	11	if
LEAF_NODE	614:6	614:6	10	(
CONDITION	614:7	614:7	10	TIFFFieldSet ( tif , FIELD_EXTRASAMPLES )
EXPR	614:7	614:7	11	TIFFFieldSet ( tif , FIELD_EXTRASAMPLES )
FUNCTION_CALL	614:7	614:42	12	TIFFFieldSet ( tif , FIELD_EXTRASAMPLES )
CALLEE	614:7	614:7	13	TIFFFieldSet
LEAF_NODE	614:7	614:7	14	TIFFFieldSet
LEAF_NODE	614:19	614:19	13	(
ARGUMENT	614:20	614:20	13	tif
FIELD	614:20	614:20	14	tif
LEAF_NODE	614:20	614:20	15	tif
LEAF_NODE	614:23	614:23	13	,
ARGUMENT	614:24	614:24	13	FIELD_EXTRASAMPLES
FIELD	614:24	614:24	14	FIELD_EXTRASAMPLES
LEAF_NODE	614:24	614:24	15	FIELD_EXTRASAMPLES
LEAF_NODE	614:42	614:42	13	)
LEAF_NODE	614:43	614:43	10	)
STATEMENTS	615:3	624:3	10	
LEAF_NODE	615:3	615:3	11	{
STATEMENTS	616:4	616:4	11	
SELECTION	616:4	617:4	12	
KEYWORD	616:4	616:4	13	if
LEAF_NODE	616:4	616:4	14	if
LEAF_NODE	616:7	616:7	13	(
CONDITION	616:8	616:8	13	tif -> tif_dir . td_extrasamples
EXPR	616:8	616:8	14	tif -> tif_dir . td_extrasamples
FIELD	616:8	616:21	15	tif -> tif_dir . td_extrasamples
LEAF_NODE	616:8	616:8	16	tif
LEAF_NODE	616:11	616:11	16	->
LEAF_NODE	616:13	616:13	16	tif_dir
LEAF_NODE	616:20	616:20	16	.
LEAF_NODE	616:21	616:21	16	td_extrasamples
LEAF_NODE	616:36	616:36	13	)
STATEMENTS	617:4	623:4	13	
LEAF_NODE	617:4	617:4	14	{
STATEMENTS	618:5	621:5	14	
SIMPLE_DECL	618:5	618:14	15	uint16 na ;
VAR_DECL	618:5	618:12	16	uint16 na
TYPE	618:5	618:5	17	uint16
TYPE_NAME	618:5	618:5	18	uint16
LEAF_NODE	618:5	618:5	19	uint16
NAME	618:12	618:12	17	na
LEAF_NODE	618:12	618:12	18	na
LEAF_NODE	618:14	618:14	16	;
SIMPLE_DECL	619:5	619:15	15	uint16 * nb ;
VAR_DECL	619:5	619:13	16	uint16 * nb
TYPE	619:5	619:11	17	uint16 *
TYPE_NAME	619:5	619:5	18	uint16
LEAF_NODE	619:5	619:5	19	uint16
POINTER	619:11	619:11	18	*
LEAF_NODE	619:11	619:11	19	*
NAME	619:13	619:13	17	nb
LEAF_NODE	619:13	619:13	18	nb
LEAF_NODE	619:15	619:15	16	;
EXPR_STATEMENT	620:5	620:60	15	TIFFGetFieldDefaulted ( tif , TIFFTAG_EXTRASAMPLES , & na , & nb ) ;
EXPR	620:5	620:5	16	TIFFGetFieldDefaulted ( tif , TIFFTAG_EXTRASAMPLES , & na , & nb )
FUNCTION_CALL	620:5	620:59	17	TIFFGetFieldDefaulted ( tif , TIFFTAG_EXTRASAMPLES , & na , & nb )
CALLEE	620:5	620:5	18	TIFFGetFieldDefaulted
LEAF_NODE	620:5	620:5	19	TIFFGetFieldDefaulted
LEAF_NODE	620:26	620:26	18	(
ARGUMENT	620:27	620:27	18	tif
FIELD	620:27	620:27	19	tif
LEAF_NODE	620:27	620:27	20	tif
LEAF_NODE	620:30	620:30	18	,
ARGUMENT	620:31	620:31	18	TIFFTAG_EXTRASAMPLES
FIELD	620:31	620:31	19	TIFFTAG_EXTRASAMPLES
LEAF_NODE	620:31	620:31	20	TIFFTAG_EXTRASAMPLES
LEAF_NODE	620:51	620:51	18	,
ARGUMENT	620:52	620:52	18	& na
UNARY_EXPR	620:52	620:53	19	& na
UNARY_OPERATOR	620:52	620:52	20	&
LEAF_NODE	620:52	620:52	21	&
FIELD	620:53	620:53	20	na
LEAF_NODE	620:53	620:53	21	na
LEAF_NODE	620:55	620:55	18	,
ARGUMENT	620:56	620:56	18	& nb
UNARY_EXPR	620:56	620:57	19	& nb
UNARY_OPERATOR	620:56	620:56	20	&
LEAF_NODE	620:56	620:56	21	&
FIELD	620:57	620:57	20	nb
LEAF_NODE	620:57	620:57	21	nb
LEAF_NODE	620:59	620:59	18	)
LEAF_NODE	620:60	620:60	16	;
SELECTION	621:5	622:6	15	
KEYWORD	621:5	621:5	16	if
LEAF_NODE	621:5	621:5	17	if
LEAF_NODE	621:8	621:8	16	(
CONDITION	621:9	621:9	16	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_EXTRASAMPLES , na , nb )
EXPR	621:9	621:9	17	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_EXTRASAMPLES , na , nb )
UNARY_EXPR	621:9	621:10	18	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_EXTRASAMPLES , na , nb )
UNARY_OPERATOR	621:9	621:9	19	!
LEAF_NODE	621:9	621:9	20	!
FUNCTION_CALL	621:10	621:82	19	TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_EXTRASAMPLES , na , nb )
CALLEE	621:10	621:10	20	TIFFWriteDirectoryTagShortArray
LEAF_NODE	621:10	621:10	21	TIFFWriteDirectoryTagShortArray
LEAF_NODE	621:41	621:41	20	(
ARGUMENT	621:42	621:42	20	tif
FIELD	621:42	621:42	21	tif
LEAF_NODE	621:42	621:42	22	tif
LEAF_NODE	621:45	621:45	20	,
ARGUMENT	621:46	621:46	20	& ndir
UNARY_EXPR	621:46	621:47	21	& ndir
UNARY_OPERATOR	621:46	621:46	22	&
LEAF_NODE	621:46	621:46	23	&
FIELD	621:47	621:47	22	ndir
LEAF_NODE	621:47	621:47	23	ndir
LEAF_NODE	621:51	621:51	20	,
ARGUMENT	621:52	621:52	20	dir
FIELD	621:52	621:52	21	dir
LEAF_NODE	621:52	621:52	22	dir
LEAF_NODE	621:55	621:55	20	,
ARGUMENT	621:56	621:56	20	TIFFTAG_EXTRASAMPLES
FIELD	621:56	621:56	21	TIFFTAG_EXTRASAMPLES
LEAF_NODE	621:56	621:56	22	TIFFTAG_EXTRASAMPLES
LEAF_NODE	621:76	621:76	20	,
ARGUMENT	621:77	621:77	20	na
FIELD	621:77	621:77	21	na
LEAF_NODE	621:77	621:77	22	na
LEAF_NODE	621:79	621:79	20	,
ARGUMENT	621:80	621:80	20	nb
FIELD	621:80	621:80	21	nb
LEAF_NODE	621:80	621:80	22	nb
LEAF_NODE	621:82	621:82	20	)
LEAF_NODE	621:83	621:83	16	)
STATEMENTS	622:6	622:6	16	
JUMP_STATEMENT	622:6	622:14	17	goto bad ;
KEYWORD	622:6	622:6	18	goto
LEAF_NODE	622:6	622:6	19	goto
DESTINATION	622:11	622:11	18	bad
LEAF_NODE	622:11	622:11	19	bad
LEAF_NODE	622:14	622:14	18	;
LEAF_NODE	623:4	623:4	14	}
LEAF_NODE	624:3	624:3	11	}
SELECTION	625:3	626:3	9	
KEYWORD	625:3	625:3	10	if
LEAF_NODE	625:3	625:3	11	if
LEAF_NODE	625:6	625:6	10	(
CONDITION	625:7	625:7	10	TIFFFieldSet ( tif , FIELD_SAMPLEFORMAT )
EXPR	625:7	625:7	11	TIFFFieldSet ( tif , FIELD_SAMPLEFORMAT )
FUNCTION_CALL	625:7	625:42	12	TIFFFieldSet ( tif , FIELD_SAMPLEFORMAT )
CALLEE	625:7	625:7	13	TIFFFieldSet
LEAF_NODE	625:7	625:7	14	TIFFFieldSet
LEAF_NODE	625:19	625:19	13	(
ARGUMENT	625:20	625:20	13	tif
FIELD	625:20	625:20	14	tif
LEAF_NODE	625:20	625:20	15	tif
LEAF_NODE	625:23	625:23	13	,
ARGUMENT	625:24	625:24	13	FIELD_SAMPLEFORMAT
FIELD	625:24	625:24	14	FIELD_SAMPLEFORMAT
LEAF_NODE	625:24	625:24	15	FIELD_SAMPLEFORMAT
LEAF_NODE	625:42	625:42	13	)
LEAF_NODE	625:43	625:43	10	)
STATEMENTS	626:3	629:3	10	
LEAF_NODE	626:3	626:3	11	{
STATEMENTS	627:4	627:4	11	
SELECTION	627:4	628:5	12	
KEYWORD	627:4	627:4	13	if
LEAF_NODE	627:4	627:4	14	if
LEAF_NODE	627:7	627:7	13	(
CONDITION	627:8	627:8	13	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_SAMPLEFORMAT , tif -> tif_dir . td_sampleformat )
EXPR	627:8	627:8	14	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_SAMPLEFORMAT , tif -> tif_dir . td_sampleformat )
UNARY_EXPR	627:8	627:9	15	! TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_SAMPLEFORMAT , tif -> tif_dir . td_sampleformat )
UNARY_OPERATOR	627:8	627:8	16	!
LEAF_NODE	627:8	627:8	17	!
FUNCTION_CALL	627:9	627:108	16	TIFFWriteDirectoryTagShortPerSample ( tif , & ndir , dir , TIFFTAG_SAMPLEFORMAT , tif -> tif_dir . td_sampleformat )
CALLEE	627:9	627:9	17	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	627:9	627:9	18	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	627:44	627:44	17	(
ARGUMENT	627:45	627:45	17	tif
FIELD	627:45	627:45	18	tif
LEAF_NODE	627:45	627:45	19	tif
LEAF_NODE	627:48	627:48	17	,
ARGUMENT	627:49	627:49	17	& ndir
UNARY_EXPR	627:49	627:50	18	& ndir
UNARY_OPERATOR	627:49	627:49	19	&
LEAF_NODE	627:49	627:49	20	&
FIELD	627:50	627:50	19	ndir
LEAF_NODE	627:50	627:50	20	ndir
LEAF_NODE	627:54	627:54	17	,
ARGUMENT	627:55	627:55	17	dir
FIELD	627:55	627:55	18	dir
LEAF_NODE	627:55	627:55	19	dir
LEAF_NODE	627:58	627:58	17	,
ARGUMENT	627:59	627:59	17	TIFFTAG_SAMPLEFORMAT
FIELD	627:59	627:59	18	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	627:59	627:59	19	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	627:79	627:79	17	,
ARGUMENT	627:80	627:80	17	tif -> tif_dir . td_sampleformat
FIELD	627:80	627:93	18	tif -> tif_dir . td_sampleformat
LEAF_NODE	627:80	627:80	19	tif
LEAF_NODE	627:83	627:83	19	->
LEAF_NODE	627:85	627:85	19	tif_dir
LEAF_NODE	627:92	627:92	19	.
LEAF_NODE	627:93	627:93	19	td_sampleformat
LEAF_NODE	627:108	627:108	17	)
LEAF_NODE	627:109	627:109	13	)
STATEMENTS	628:5	628:5	13	
JUMP_STATEMENT	628:5	628:13	14	goto bad ;
KEYWORD	628:5	628:5	15	goto
LEAF_NODE	628:5	628:5	16	goto
DESTINATION	628:10	628:10	15	bad
LEAF_NODE	628:10	628:10	16	bad
LEAF_NODE	628:13	628:13	15	;
LEAF_NODE	629:3	629:3	11	}
SELECTION	630:3	631:3	9	
KEYWORD	630:3	630:3	10	if
LEAF_NODE	630:3	630:3	11	if
LEAF_NODE	630:6	630:6	10	(
CONDITION	630:7	630:7	10	TIFFFieldSet ( tif , FIELD_SMINSAMPLEVALUE )
EXPR	630:7	630:7	11	TIFFFieldSet ( tif , FIELD_SMINSAMPLEVALUE )
FUNCTION_CALL	630:7	630:45	12	TIFFFieldSet ( tif , FIELD_SMINSAMPLEVALUE )
CALLEE	630:7	630:7	13	TIFFFieldSet
LEAF_NODE	630:7	630:7	14	TIFFFieldSet
LEAF_NODE	630:19	630:19	13	(
ARGUMENT	630:20	630:20	13	tif
FIELD	630:20	630:20	14	tif
LEAF_NODE	630:20	630:20	15	tif
LEAF_NODE	630:23	630:23	13	,
ARGUMENT	630:24	630:24	13	FIELD_SMINSAMPLEVALUE
FIELD	630:24	630:24	14	FIELD_SMINSAMPLEVALUE
LEAF_NODE	630:24	630:24	15	FIELD_SMINSAMPLEVALUE
LEAF_NODE	630:45	630:45	13	)
LEAF_NODE	630:46	630:46	10	)
STATEMENTS	631:3	634:3	10	
LEAF_NODE	631:3	631:3	11	{
STATEMENTS	632:4	632:4	11	
SELECTION	632:4	633:5	12	
KEYWORD	632:4	632:4	13	if
LEAF_NODE	632:4	632:4	14	if
LEAF_NODE	632:7	632:7	13	(
CONDITION	632:8	632:8	13	! TIFFWriteDirectoryTagSampleformatArray ( tif , & ndir , dir , TIFFTAG_SMINSAMPLEVALUE , tif -> tif_dir . td_samplesperpixel , tif -> tif_dir . td_sminsamplevalue )
EXPR	632:8	632:8	14	! TIFFWriteDirectoryTagSampleformatArray ( tif , & ndir , dir , TIFFTAG_SMINSAMPLEVALUE , tif -> tif_dir . td_samplesperpixel , tif -> tif_dir . td_sminsamplevalue )
UNARY_EXPR	632:8	632:9	15	! TIFFWriteDirectoryTagSampleformatArray ( tif , & ndir , dir , TIFFTAG_SMINSAMPLEVALUE , tif -> tif_dir . td_samplesperpixel , tif -> tif_dir . td_sminsamplevalue )
UNARY_OPERATOR	632:8	632:8	16	!
LEAF_NODE	632:8	632:8	17	!
FUNCTION_CALL	632:9	632:149	16	TIFFWriteDirectoryTagSampleformatArray ( tif , & ndir , dir , TIFFTAG_SMINSAMPLEVALUE , tif -> tif_dir . td_samplesperpixel , tif -> tif_dir . td_sminsamplevalue )
CALLEE	632:9	632:9	17	TIFFWriteDirectoryTagSampleformatArray
LEAF_NODE	632:9	632:9	18	TIFFWriteDirectoryTagSampleformatArray
LEAF_NODE	632:47	632:47	17	(
ARGUMENT	632:48	632:48	17	tif
FIELD	632:48	632:48	18	tif
LEAF_NODE	632:48	632:48	19	tif
LEAF_NODE	632:51	632:51	17	,
ARGUMENT	632:52	632:52	17	& ndir
UNARY_EXPR	632:52	632:53	18	& ndir
UNARY_OPERATOR	632:52	632:52	19	&
LEAF_NODE	632:52	632:52	20	&
FIELD	632:53	632:53	19	ndir
LEAF_NODE	632:53	632:53	20	ndir
LEAF_NODE	632:57	632:57	17	,
ARGUMENT	632:58	632:58	17	dir
FIELD	632:58	632:58	18	dir
LEAF_NODE	632:58	632:58	19	dir
LEAF_NODE	632:61	632:61	17	,
ARGUMENT	632:62	632:62	17	TIFFTAG_SMINSAMPLEVALUE
FIELD	632:62	632:62	18	TIFFTAG_SMINSAMPLEVALUE
LEAF_NODE	632:62	632:62	19	TIFFTAG_SMINSAMPLEVALUE
LEAF_NODE	632:85	632:85	17	,
ARGUMENT	632:86	632:86	17	tif -> tif_dir . td_samplesperpixel
FIELD	632:86	632:99	18	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	632:86	632:86	19	tif
LEAF_NODE	632:89	632:89	19	->
LEAF_NODE	632:91	632:91	19	tif_dir
LEAF_NODE	632:98	632:98	19	.
LEAF_NODE	632:99	632:99	19	td_samplesperpixel
LEAF_NODE	632:117	632:117	17	,
ARGUMENT	632:118	632:118	17	tif -> tif_dir . td_sminsamplevalue
FIELD	632:118	632:131	18	tif -> tif_dir . td_sminsamplevalue
LEAF_NODE	632:118	632:118	19	tif
LEAF_NODE	632:121	632:121	19	->
LEAF_NODE	632:123	632:123	19	tif_dir
LEAF_NODE	632:130	632:130	19	.
LEAF_NODE	632:131	632:131	19	td_sminsamplevalue
LEAF_NODE	632:149	632:149	17	)
LEAF_NODE	632:150	632:150	13	)
STATEMENTS	633:5	633:5	13	
JUMP_STATEMENT	633:5	633:13	14	goto bad ;
KEYWORD	633:5	633:5	15	goto
LEAF_NODE	633:5	633:5	16	goto
DESTINATION	633:10	633:10	15	bad
LEAF_NODE	633:10	633:10	16	bad
LEAF_NODE	633:13	633:13	15	;
LEAF_NODE	634:3	634:3	11	}
SELECTION	635:3	636:3	9	
KEYWORD	635:3	635:3	10	if
LEAF_NODE	635:3	635:3	11	if
LEAF_NODE	635:6	635:6	10	(
CONDITION	635:7	635:7	10	TIFFFieldSet ( tif , FIELD_SMAXSAMPLEVALUE )
EXPR	635:7	635:7	11	TIFFFieldSet ( tif , FIELD_SMAXSAMPLEVALUE )
FUNCTION_CALL	635:7	635:45	12	TIFFFieldSet ( tif , FIELD_SMAXSAMPLEVALUE )
CALLEE	635:7	635:7	13	TIFFFieldSet
LEAF_NODE	635:7	635:7	14	TIFFFieldSet
LEAF_NODE	635:19	635:19	13	(
ARGUMENT	635:20	635:20	13	tif
FIELD	635:20	635:20	14	tif
LEAF_NODE	635:20	635:20	15	tif
LEAF_NODE	635:23	635:23	13	,
ARGUMENT	635:24	635:24	13	FIELD_SMAXSAMPLEVALUE
FIELD	635:24	635:24	14	FIELD_SMAXSAMPLEVALUE
LEAF_NODE	635:24	635:24	15	FIELD_SMAXSAMPLEVALUE
LEAF_NODE	635:45	635:45	13	)
LEAF_NODE	635:46	635:46	10	)
STATEMENTS	636:3	639:3	10	
LEAF_NODE	636:3	636:3	11	{
STATEMENTS	637:4	637:4	11	
SELECTION	637:4	638:5	12	
KEYWORD	637:4	637:4	13	if
LEAF_NODE	637:4	637:4	14	if
LEAF_NODE	637:7	637:7	13	(
CONDITION	637:8	637:8	13	! TIFFWriteDirectoryTagSampleformatArray ( tif , & ndir , dir , TIFFTAG_SMAXSAMPLEVALUE , tif -> tif_dir . td_samplesperpixel , tif -> tif_dir . td_smaxsamplevalue )
EXPR	637:8	637:8	14	! TIFFWriteDirectoryTagSampleformatArray ( tif , & ndir , dir , TIFFTAG_SMAXSAMPLEVALUE , tif -> tif_dir . td_samplesperpixel , tif -> tif_dir . td_smaxsamplevalue )
UNARY_EXPR	637:8	637:9	15	! TIFFWriteDirectoryTagSampleformatArray ( tif , & ndir , dir , TIFFTAG_SMAXSAMPLEVALUE , tif -> tif_dir . td_samplesperpixel , tif -> tif_dir . td_smaxsamplevalue )
UNARY_OPERATOR	637:8	637:8	16	!
LEAF_NODE	637:8	637:8	17	!
FUNCTION_CALL	637:9	637:149	16	TIFFWriteDirectoryTagSampleformatArray ( tif , & ndir , dir , TIFFTAG_SMAXSAMPLEVALUE , tif -> tif_dir . td_samplesperpixel , tif -> tif_dir . td_smaxsamplevalue )
CALLEE	637:9	637:9	17	TIFFWriteDirectoryTagSampleformatArray
LEAF_NODE	637:9	637:9	18	TIFFWriteDirectoryTagSampleformatArray
LEAF_NODE	637:47	637:47	17	(
ARGUMENT	637:48	637:48	17	tif
FIELD	637:48	637:48	18	tif
LEAF_NODE	637:48	637:48	19	tif
LEAF_NODE	637:51	637:51	17	,
ARGUMENT	637:52	637:52	17	& ndir
UNARY_EXPR	637:52	637:53	18	& ndir
UNARY_OPERATOR	637:52	637:52	19	&
LEAF_NODE	637:52	637:52	20	&
FIELD	637:53	637:53	19	ndir
LEAF_NODE	637:53	637:53	20	ndir
LEAF_NODE	637:57	637:57	17	,
ARGUMENT	637:58	637:58	17	dir
FIELD	637:58	637:58	18	dir
LEAF_NODE	637:58	637:58	19	dir
LEAF_NODE	637:61	637:61	17	,
ARGUMENT	637:62	637:62	17	TIFFTAG_SMAXSAMPLEVALUE
FIELD	637:62	637:62	18	TIFFTAG_SMAXSAMPLEVALUE
LEAF_NODE	637:62	637:62	19	TIFFTAG_SMAXSAMPLEVALUE
LEAF_NODE	637:85	637:85	17	,
ARGUMENT	637:86	637:86	17	tif -> tif_dir . td_samplesperpixel
FIELD	637:86	637:99	18	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	637:86	637:86	19	tif
LEAF_NODE	637:89	637:89	19	->
LEAF_NODE	637:91	637:91	19	tif_dir
LEAF_NODE	637:98	637:98	19	.
LEAF_NODE	637:99	637:99	19	td_samplesperpixel
LEAF_NODE	637:117	637:117	17	,
ARGUMENT	637:118	637:118	17	tif -> tif_dir . td_smaxsamplevalue
FIELD	637:118	637:131	18	tif -> tif_dir . td_smaxsamplevalue
LEAF_NODE	637:118	637:118	19	tif
LEAF_NODE	637:121	637:121	19	->
LEAF_NODE	637:123	637:123	19	tif_dir
LEAF_NODE	637:130	637:130	19	.
LEAF_NODE	637:131	637:131	19	td_smaxsamplevalue
LEAF_NODE	637:149	637:149	17	)
LEAF_NODE	637:150	637:150	13	)
STATEMENTS	638:5	638:5	13	
JUMP_STATEMENT	638:5	638:13	14	goto bad ;
KEYWORD	638:5	638:5	15	goto
LEAF_NODE	638:5	638:5	16	goto
DESTINATION	638:10	638:10	15	bad
LEAF_NODE	638:10	638:10	16	bad
LEAF_NODE	638:13	638:13	15	;
LEAF_NODE	639:3	639:3	11	}
SELECTION	640:3	641:3	9	
KEYWORD	640:3	640:3	10	if
LEAF_NODE	640:3	640:3	11	if
LEAF_NODE	640:6	640:6	10	(
CONDITION	640:7	640:7	10	TIFFFieldSet ( tif , FIELD_IMAGEDEPTH )
EXPR	640:7	640:7	11	TIFFFieldSet ( tif , FIELD_IMAGEDEPTH )
FUNCTION_CALL	640:7	640:40	12	TIFFFieldSet ( tif , FIELD_IMAGEDEPTH )
CALLEE	640:7	640:7	13	TIFFFieldSet
LEAF_NODE	640:7	640:7	14	TIFFFieldSet
LEAF_NODE	640:19	640:19	13	(
ARGUMENT	640:20	640:20	13	tif
FIELD	640:20	640:20	14	tif
LEAF_NODE	640:20	640:20	15	tif
LEAF_NODE	640:23	640:23	13	,
ARGUMENT	640:24	640:24	13	FIELD_IMAGEDEPTH
FIELD	640:24	640:24	14	FIELD_IMAGEDEPTH
LEAF_NODE	640:24	640:24	15	FIELD_IMAGEDEPTH
LEAF_NODE	640:40	640:40	13	)
LEAF_NODE	640:41	640:41	10	)
STATEMENTS	641:3	644:3	10	
LEAF_NODE	641:3	641:3	11	{
STATEMENTS	642:4	642:4	11	
SELECTION	642:4	643:5	12	
KEYWORD	642:4	642:4	13	if
LEAF_NODE	642:4	642:4	14	if
LEAF_NODE	642:7	642:7	13	(
CONDITION	642:8	642:8	13	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_IMAGEDEPTH , tif -> tif_dir . td_imagedepth )
EXPR	642:8	642:8	14	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_IMAGEDEPTH , tif -> tif_dir . td_imagedepth )
UNARY_EXPR	642:8	642:9	15	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_IMAGEDEPTH , tif -> tif_dir . td_imagedepth )
UNARY_OPERATOR	642:8	642:8	16	!
LEAF_NODE	642:8	642:8	17	!
FUNCTION_CALL	642:9	642:94	16	TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_IMAGEDEPTH , tif -> tif_dir . td_imagedepth )
CALLEE	642:9	642:9	17	TIFFWriteDirectoryTagLong
LEAF_NODE	642:9	642:9	18	TIFFWriteDirectoryTagLong
LEAF_NODE	642:34	642:34	17	(
ARGUMENT	642:35	642:35	17	tif
FIELD	642:35	642:35	18	tif
LEAF_NODE	642:35	642:35	19	tif
LEAF_NODE	642:38	642:38	17	,
ARGUMENT	642:39	642:39	17	& ndir
UNARY_EXPR	642:39	642:40	18	& ndir
UNARY_OPERATOR	642:39	642:39	19	&
LEAF_NODE	642:39	642:39	20	&
FIELD	642:40	642:40	19	ndir
LEAF_NODE	642:40	642:40	20	ndir
LEAF_NODE	642:44	642:44	17	,
ARGUMENT	642:45	642:45	17	dir
FIELD	642:45	642:45	18	dir
LEAF_NODE	642:45	642:45	19	dir
LEAF_NODE	642:48	642:48	17	,
ARGUMENT	642:49	642:49	17	TIFFTAG_IMAGEDEPTH
FIELD	642:49	642:49	18	TIFFTAG_IMAGEDEPTH
LEAF_NODE	642:49	642:49	19	TIFFTAG_IMAGEDEPTH
LEAF_NODE	642:67	642:67	17	,
ARGUMENT	642:68	642:68	17	tif -> tif_dir . td_imagedepth
FIELD	642:68	642:81	18	tif -> tif_dir . td_imagedepth
LEAF_NODE	642:68	642:68	19	tif
LEAF_NODE	642:71	642:71	19	->
LEAF_NODE	642:73	642:73	19	tif_dir
LEAF_NODE	642:80	642:80	19	.
LEAF_NODE	642:81	642:81	19	td_imagedepth
LEAF_NODE	642:94	642:94	17	)
LEAF_NODE	642:95	642:95	13	)
STATEMENTS	643:5	643:5	13	
JUMP_STATEMENT	643:5	643:13	14	goto bad ;
KEYWORD	643:5	643:5	15	goto
LEAF_NODE	643:5	643:5	16	goto
DESTINATION	643:10	643:10	15	bad
LEAF_NODE	643:10	643:10	16	bad
LEAF_NODE	643:13	643:13	15	;
LEAF_NODE	644:3	644:3	11	}
SELECTION	645:3	646:3	9	
KEYWORD	645:3	645:3	10	if
LEAF_NODE	645:3	645:3	11	if
LEAF_NODE	645:6	645:6	10	(
CONDITION	645:7	645:7	10	TIFFFieldSet ( tif , FIELD_TILEDEPTH )
EXPR	645:7	645:7	11	TIFFFieldSet ( tif , FIELD_TILEDEPTH )
FUNCTION_CALL	645:7	645:39	12	TIFFFieldSet ( tif , FIELD_TILEDEPTH )
CALLEE	645:7	645:7	13	TIFFFieldSet
LEAF_NODE	645:7	645:7	14	TIFFFieldSet
LEAF_NODE	645:19	645:19	13	(
ARGUMENT	645:20	645:20	13	tif
FIELD	645:20	645:20	14	tif
LEAF_NODE	645:20	645:20	15	tif
LEAF_NODE	645:23	645:23	13	,
ARGUMENT	645:24	645:24	13	FIELD_TILEDEPTH
FIELD	645:24	645:24	14	FIELD_TILEDEPTH
LEAF_NODE	645:24	645:24	15	FIELD_TILEDEPTH
LEAF_NODE	645:39	645:39	13	)
LEAF_NODE	645:40	645:40	10	)
STATEMENTS	646:3	649:3	10	
LEAF_NODE	646:3	646:3	11	{
STATEMENTS	647:4	647:4	11	
SELECTION	647:4	648:5	12	
KEYWORD	647:4	647:4	13	if
LEAF_NODE	647:4	647:4	14	if
LEAF_NODE	647:7	647:7	13	(
CONDITION	647:8	647:8	13	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_TILEDEPTH , tif -> tif_dir . td_tiledepth )
EXPR	647:8	647:8	14	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_TILEDEPTH , tif -> tif_dir . td_tiledepth )
UNARY_EXPR	647:8	647:9	15	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_TILEDEPTH , tif -> tif_dir . td_tiledepth )
UNARY_OPERATOR	647:8	647:8	16	!
LEAF_NODE	647:8	647:8	17	!
FUNCTION_CALL	647:9	647:92	16	TIFFWriteDirectoryTagLong ( tif , & ndir , dir , TIFFTAG_TILEDEPTH , tif -> tif_dir . td_tiledepth )
CALLEE	647:9	647:9	17	TIFFWriteDirectoryTagLong
LEAF_NODE	647:9	647:9	18	TIFFWriteDirectoryTagLong
LEAF_NODE	647:34	647:34	17	(
ARGUMENT	647:35	647:35	17	tif
FIELD	647:35	647:35	18	tif
LEAF_NODE	647:35	647:35	19	tif
LEAF_NODE	647:38	647:38	17	,
ARGUMENT	647:39	647:39	17	& ndir
UNARY_EXPR	647:39	647:40	18	& ndir
UNARY_OPERATOR	647:39	647:39	19	&
LEAF_NODE	647:39	647:39	20	&
FIELD	647:40	647:40	19	ndir
LEAF_NODE	647:40	647:40	20	ndir
LEAF_NODE	647:44	647:44	17	,
ARGUMENT	647:45	647:45	17	dir
FIELD	647:45	647:45	18	dir
LEAF_NODE	647:45	647:45	19	dir
LEAF_NODE	647:48	647:48	17	,
ARGUMENT	647:49	647:49	17	TIFFTAG_TILEDEPTH
FIELD	647:49	647:49	18	TIFFTAG_TILEDEPTH
LEAF_NODE	647:49	647:49	19	TIFFTAG_TILEDEPTH
LEAF_NODE	647:66	647:66	17	,
ARGUMENT	647:67	647:67	17	tif -> tif_dir . td_tiledepth
FIELD	647:67	647:80	18	tif -> tif_dir . td_tiledepth
LEAF_NODE	647:67	647:67	19	tif
LEAF_NODE	647:70	647:70	19	->
LEAF_NODE	647:72	647:72	19	tif_dir
LEAF_NODE	647:79	647:79	19	.
LEAF_NODE	647:80	647:80	19	td_tiledepth
LEAF_NODE	647:92	647:92	17	)
LEAF_NODE	647:93	647:93	13	)
STATEMENTS	648:5	648:5	13	
JUMP_STATEMENT	648:5	648:13	14	goto bad ;
KEYWORD	648:5	648:5	15	goto
LEAF_NODE	648:5	648:5	16	goto
DESTINATION	648:10	648:10	15	bad
LEAF_NODE	648:10	648:10	16	bad
LEAF_NODE	648:13	648:13	15	;
LEAF_NODE	649:3	649:3	11	}
SELECTION	650:3	651:3	9	
KEYWORD	650:3	650:3	10	if
LEAF_NODE	650:3	650:3	11	if
LEAF_NODE	650:6	650:6	10	(
CONDITION	650:7	650:7	10	TIFFFieldSet ( tif , FIELD_HALFTONEHINTS )
EXPR	650:7	650:7	11	TIFFFieldSet ( tif , FIELD_HALFTONEHINTS )
FUNCTION_CALL	650:7	650:43	12	TIFFFieldSet ( tif , FIELD_HALFTONEHINTS )
CALLEE	650:7	650:7	13	TIFFFieldSet
LEAF_NODE	650:7	650:7	14	TIFFFieldSet
LEAF_NODE	650:19	650:19	13	(
ARGUMENT	650:20	650:20	13	tif
FIELD	650:20	650:20	14	tif
LEAF_NODE	650:20	650:20	15	tif
LEAF_NODE	650:23	650:23	13	,
ARGUMENT	650:24	650:24	13	FIELD_HALFTONEHINTS
FIELD	650:24	650:24	14	FIELD_HALFTONEHINTS
LEAF_NODE	650:24	650:24	15	FIELD_HALFTONEHINTS
LEAF_NODE	650:43	650:43	13	)
LEAF_NODE	650:44	650:44	10	)
STATEMENTS	651:3	654:3	10	
LEAF_NODE	651:3	651:3	11	{
STATEMENTS	652:4	652:4	11	
SELECTION	652:4	653:5	12	
KEYWORD	652:4	652:4	13	if
LEAF_NODE	652:4	652:4	14	if
LEAF_NODE	652:7	652:7	13	(
CONDITION	652:8	652:8	13	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_HALFTONEHINTS , 2 , & tif -> tif_dir . td_halftonehints [ 0 ] )
EXPR	652:8	652:8	14	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_HALFTONEHINTS , 2 , & tif -> tif_dir . td_halftonehints [ 0 ] )
UNARY_EXPR	652:8	652:9	15	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_HALFTONEHINTS , 2 , & tif -> tif_dir . td_halftonehints [ 0 ] )
UNARY_OPERATOR	652:8	652:8	16	!
LEAF_NODE	652:8	652:8	17	!
FUNCTION_CALL	652:9	652:112	16	TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_HALFTONEHINTS , 2 , & tif -> tif_dir . td_halftonehints [ 0 ] )
CALLEE	652:9	652:9	17	TIFFWriteDirectoryTagShortArray
LEAF_NODE	652:9	652:9	18	TIFFWriteDirectoryTagShortArray
LEAF_NODE	652:40	652:40	17	(
ARGUMENT	652:41	652:41	17	tif
FIELD	652:41	652:41	18	tif
LEAF_NODE	652:41	652:41	19	tif
LEAF_NODE	652:44	652:44	17	,
ARGUMENT	652:45	652:45	17	& ndir
UNARY_EXPR	652:45	652:46	18	& ndir
UNARY_OPERATOR	652:45	652:45	19	&
LEAF_NODE	652:45	652:45	20	&
FIELD	652:46	652:46	19	ndir
LEAF_NODE	652:46	652:46	20	ndir
LEAF_NODE	652:50	652:50	17	,
ARGUMENT	652:51	652:51	17	dir
FIELD	652:51	652:51	18	dir
LEAF_NODE	652:51	652:51	19	dir
LEAF_NODE	652:54	652:54	17	,
ARGUMENT	652:55	652:55	17	TIFFTAG_HALFTONEHINTS
FIELD	652:55	652:55	18	TIFFTAG_HALFTONEHINTS
LEAF_NODE	652:55	652:55	19	TIFFTAG_HALFTONEHINTS
LEAF_NODE	652:76	652:76	17	,
ARGUMENT	652:77	652:77	17	2
FIELD	652:77	652:77	18	2
LEAF_NODE	652:77	652:77	19	2
LEAF_NODE	652:78	652:78	17	,
ARGUMENT	652:79	652:79	17	& tif -> tif_dir . td_halftonehints [ 0 ]
UNARY_EXPR	652:79	652:80	18	& tif -> tif_dir . td_halftonehints [ 0 ]
UNARY_OPERATOR	652:79	652:79	19	&
LEAF_NODE	652:79	652:79	20	&
FIELD	652:80	652:111	19	tif -> tif_dir . td_halftonehints [ 0 ]
LEAF_NODE	652:80	652:80	20	tif
LEAF_NODE	652:83	652:83	20	->
LEAF_NODE	652:85	652:85	20	tif_dir
LEAF_NODE	652:92	652:92	20	.
LEAF_NODE	652:93	652:93	20	td_halftonehints
LEAF_NODE	652:109	652:109	20	[
EXPR	652:110	652:110	20	0
FIELD	652:110	652:110	21	0
LEAF_NODE	652:110	652:110	22	0
LEAF_NODE	652:111	652:111	20	]
LEAF_NODE	652:112	652:112	17	)
LEAF_NODE	652:113	652:113	13	)
STATEMENTS	653:5	653:5	13	
JUMP_STATEMENT	653:5	653:13	14	goto bad ;
KEYWORD	653:5	653:5	15	goto
LEAF_NODE	653:5	653:5	16	goto
DESTINATION	653:10	653:10	15	bad
LEAF_NODE	653:10	653:10	16	bad
LEAF_NODE	653:13	653:13	15	;
LEAF_NODE	654:3	654:3	11	}
SELECTION	655:3	656:3	9	
KEYWORD	655:3	655:3	10	if
LEAF_NODE	655:3	655:3	11	if
LEAF_NODE	655:6	655:6	10	(
CONDITION	655:7	655:7	10	TIFFFieldSet ( tif , FIELD_YCBCRSUBSAMPLING )
EXPR	655:7	655:7	11	TIFFFieldSet ( tif , FIELD_YCBCRSUBSAMPLING )
FUNCTION_CALL	655:7	655:46	12	TIFFFieldSet ( tif , FIELD_YCBCRSUBSAMPLING )
CALLEE	655:7	655:7	13	TIFFFieldSet
LEAF_NODE	655:7	655:7	14	TIFFFieldSet
LEAF_NODE	655:19	655:19	13	(
ARGUMENT	655:20	655:20	13	tif
FIELD	655:20	655:20	14	tif
LEAF_NODE	655:20	655:20	15	tif
LEAF_NODE	655:23	655:23	13	,
ARGUMENT	655:24	655:24	13	FIELD_YCBCRSUBSAMPLING
FIELD	655:24	655:24	14	FIELD_YCBCRSUBSAMPLING
LEAF_NODE	655:24	655:24	15	FIELD_YCBCRSUBSAMPLING
LEAF_NODE	655:46	655:46	13	)
LEAF_NODE	655:47	655:47	10	)
STATEMENTS	656:3	659:3	10	
LEAF_NODE	656:3	656:3	11	{
STATEMENTS	657:4	657:4	11	
SELECTION	657:4	658:5	12	
KEYWORD	657:4	657:4	13	if
LEAF_NODE	657:4	657:4	14	if
LEAF_NODE	657:7	657:7	13	(
CONDITION	657:8	657:8	13	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_YCBCRSUBSAMPLING , 2 , & tif -> tif_dir . td_ycbcrsubsampling [ 0 ] )
EXPR	657:8	657:8	14	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_YCBCRSUBSAMPLING , 2 , & tif -> tif_dir . td_ycbcrsubsampling [ 0 ] )
UNARY_EXPR	657:8	657:9	15	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_YCBCRSUBSAMPLING , 2 , & tif -> tif_dir . td_ycbcrsubsampling [ 0 ] )
UNARY_OPERATOR	657:8	657:8	16	!
LEAF_NODE	657:8	657:8	17	!
FUNCTION_CALL	657:9	657:118	16	TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , TIFFTAG_YCBCRSUBSAMPLING , 2 , & tif -> tif_dir . td_ycbcrsubsampling [ 0 ] )
CALLEE	657:9	657:9	17	TIFFWriteDirectoryTagShortArray
LEAF_NODE	657:9	657:9	18	TIFFWriteDirectoryTagShortArray
LEAF_NODE	657:40	657:40	17	(
ARGUMENT	657:41	657:41	17	tif
FIELD	657:41	657:41	18	tif
LEAF_NODE	657:41	657:41	19	tif
LEAF_NODE	657:44	657:44	17	,
ARGUMENT	657:45	657:45	17	& ndir
UNARY_EXPR	657:45	657:46	18	& ndir
UNARY_OPERATOR	657:45	657:45	19	&
LEAF_NODE	657:45	657:45	20	&
FIELD	657:46	657:46	19	ndir
LEAF_NODE	657:46	657:46	20	ndir
LEAF_NODE	657:50	657:50	17	,
ARGUMENT	657:51	657:51	17	dir
FIELD	657:51	657:51	18	dir
LEAF_NODE	657:51	657:51	19	dir
LEAF_NODE	657:54	657:54	17	,
ARGUMENT	657:55	657:55	17	TIFFTAG_YCBCRSUBSAMPLING
FIELD	657:55	657:55	18	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	657:55	657:55	19	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	657:79	657:79	17	,
ARGUMENT	657:80	657:80	17	2
FIELD	657:80	657:80	18	2
LEAF_NODE	657:80	657:80	19	2
LEAF_NODE	657:81	657:81	17	,
ARGUMENT	657:82	657:82	17	& tif -> tif_dir . td_ycbcrsubsampling [ 0 ]
UNARY_EXPR	657:82	657:83	18	& tif -> tif_dir . td_ycbcrsubsampling [ 0 ]
UNARY_OPERATOR	657:82	657:82	19	&
LEAF_NODE	657:82	657:82	20	&
FIELD	657:83	657:117	19	tif -> tif_dir . td_ycbcrsubsampling [ 0 ]
LEAF_NODE	657:83	657:83	20	tif
LEAF_NODE	657:86	657:86	20	->
LEAF_NODE	657:88	657:88	20	tif_dir
LEAF_NODE	657:95	657:95	20	.
LEAF_NODE	657:96	657:96	20	td_ycbcrsubsampling
LEAF_NODE	657:115	657:115	20	[
EXPR	657:116	657:116	20	0
FIELD	657:116	657:116	21	0
LEAF_NODE	657:116	657:116	22	0
LEAF_NODE	657:117	657:117	20	]
LEAF_NODE	657:118	657:118	17	)
LEAF_NODE	657:119	657:119	13	)
STATEMENTS	658:5	658:5	13	
JUMP_STATEMENT	658:5	658:13	14	goto bad ;
KEYWORD	658:5	658:5	15	goto
LEAF_NODE	658:5	658:5	16	goto
DESTINATION	658:10	658:10	15	bad
LEAF_NODE	658:10	658:10	16	bad
LEAF_NODE	658:13	658:13	15	;
LEAF_NODE	659:3	659:3	11	}
SELECTION	660:3	661:3	9	
KEYWORD	660:3	660:3	10	if
LEAF_NODE	660:3	660:3	11	if
LEAF_NODE	660:6	660:6	10	(
CONDITION	660:7	660:7	10	TIFFFieldSet ( tif , FIELD_YCBCRPOSITIONING )
EXPR	660:7	660:7	11	TIFFFieldSet ( tif , FIELD_YCBCRPOSITIONING )
FUNCTION_CALL	660:7	660:46	12	TIFFFieldSet ( tif , FIELD_YCBCRPOSITIONING )
CALLEE	660:7	660:7	13	TIFFFieldSet
LEAF_NODE	660:7	660:7	14	TIFFFieldSet
LEAF_NODE	660:19	660:19	13	(
ARGUMENT	660:20	660:20	13	tif
FIELD	660:20	660:20	14	tif
LEAF_NODE	660:20	660:20	15	tif
LEAF_NODE	660:23	660:23	13	,
ARGUMENT	660:24	660:24	13	FIELD_YCBCRPOSITIONING
FIELD	660:24	660:24	14	FIELD_YCBCRPOSITIONING
LEAF_NODE	660:24	660:24	15	FIELD_YCBCRPOSITIONING
LEAF_NODE	660:46	660:46	13	)
LEAF_NODE	660:47	660:47	10	)
STATEMENTS	661:3	664:3	10	
LEAF_NODE	661:3	661:3	11	{
STATEMENTS	662:4	662:4	11	
SELECTION	662:4	663:5	12	
KEYWORD	662:4	662:4	13	if
LEAF_NODE	662:4	662:4	14	if
LEAF_NODE	662:7	662:7	13	(
CONDITION	662:8	662:8	13	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_YCBCRPOSITIONING , tif -> tif_dir . td_ycbcrpositioning )
EXPR	662:8	662:8	14	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_YCBCRPOSITIONING , tif -> tif_dir . td_ycbcrpositioning )
UNARY_EXPR	662:8	662:9	15	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_YCBCRPOSITIONING , tif -> tif_dir . td_ycbcrpositioning )
UNARY_OPERATOR	662:8	662:8	16	!
LEAF_NODE	662:8	662:8	17	!
FUNCTION_CALL	662:9	662:107	16	TIFFWriteDirectoryTagShort ( tif , & ndir , dir , TIFFTAG_YCBCRPOSITIONING , tif -> tif_dir . td_ycbcrpositioning )
CALLEE	662:9	662:9	17	TIFFWriteDirectoryTagShort
LEAF_NODE	662:9	662:9	18	TIFFWriteDirectoryTagShort
LEAF_NODE	662:35	662:35	17	(
ARGUMENT	662:36	662:36	17	tif
FIELD	662:36	662:36	18	tif
LEAF_NODE	662:36	662:36	19	tif
LEAF_NODE	662:39	662:39	17	,
ARGUMENT	662:40	662:40	17	& ndir
UNARY_EXPR	662:40	662:41	18	& ndir
UNARY_OPERATOR	662:40	662:40	19	&
LEAF_NODE	662:40	662:40	20	&
FIELD	662:41	662:41	19	ndir
LEAF_NODE	662:41	662:41	20	ndir
LEAF_NODE	662:45	662:45	17	,
ARGUMENT	662:46	662:46	17	dir
FIELD	662:46	662:46	18	dir
LEAF_NODE	662:46	662:46	19	dir
LEAF_NODE	662:49	662:49	17	,
ARGUMENT	662:50	662:50	17	TIFFTAG_YCBCRPOSITIONING
FIELD	662:50	662:50	18	TIFFTAG_YCBCRPOSITIONING
LEAF_NODE	662:50	662:50	19	TIFFTAG_YCBCRPOSITIONING
LEAF_NODE	662:74	662:74	17	,
ARGUMENT	662:75	662:75	17	tif -> tif_dir . td_ycbcrpositioning
FIELD	662:75	662:88	18	tif -> tif_dir . td_ycbcrpositioning
LEAF_NODE	662:75	662:75	19	tif
LEAF_NODE	662:78	662:78	19	->
LEAF_NODE	662:80	662:80	19	tif_dir
LEAF_NODE	662:87	662:87	19	.
LEAF_NODE	662:88	662:88	19	td_ycbcrpositioning
LEAF_NODE	662:107	662:107	17	)
LEAF_NODE	662:108	662:108	13	)
STATEMENTS	663:5	663:5	13	
JUMP_STATEMENT	663:5	663:13	14	goto bad ;
KEYWORD	663:5	663:5	15	goto
LEAF_NODE	663:5	663:5	16	goto
DESTINATION	663:10	663:10	15	bad
LEAF_NODE	663:10	663:10	16	bad
LEAF_NODE	663:13	663:13	15	;
LEAF_NODE	664:3	664:3	11	}
SELECTION	665:3	666:3	9	
KEYWORD	665:3	665:3	10	if
LEAF_NODE	665:3	665:3	11	if
LEAF_NODE	665:6	665:6	10	(
CONDITION	665:7	665:7	10	TIFFFieldSet ( tif , FIELD_REFBLACKWHITE )
EXPR	665:7	665:7	11	TIFFFieldSet ( tif , FIELD_REFBLACKWHITE )
FUNCTION_CALL	665:7	665:43	12	TIFFFieldSet ( tif , FIELD_REFBLACKWHITE )
CALLEE	665:7	665:7	13	TIFFFieldSet
LEAF_NODE	665:7	665:7	14	TIFFFieldSet
LEAF_NODE	665:19	665:19	13	(
ARGUMENT	665:20	665:20	13	tif
FIELD	665:20	665:20	14	tif
LEAF_NODE	665:20	665:20	15	tif
LEAF_NODE	665:23	665:23	13	,
ARGUMENT	665:24	665:24	13	FIELD_REFBLACKWHITE
FIELD	665:24	665:24	14	FIELD_REFBLACKWHITE
LEAF_NODE	665:24	665:24	15	FIELD_REFBLACKWHITE
LEAF_NODE	665:43	665:43	13	)
LEAF_NODE	665:44	665:44	10	)
STATEMENTS	666:3	669:3	10	
LEAF_NODE	666:3	666:3	11	{
STATEMENTS	667:4	667:4	11	
SELECTION	667:4	668:5	12	
KEYWORD	667:4	667:4	13	if
LEAF_NODE	667:4	667:4	14	if
LEAF_NODE	667:7	667:7	13	(
CONDITION	667:8	667:8	13	! TIFFWriteDirectoryTagRationalArray ( tif , & ndir , dir , TIFFTAG_REFERENCEBLACKWHITE , 6 , tif -> tif_dir . td_refblackwhite )
EXPR	667:8	667:8	14	! TIFFWriteDirectoryTagRationalArray ( tif , & ndir , dir , TIFFTAG_REFERENCEBLACKWHITE , 6 , tif -> tif_dir . td_refblackwhite )
UNARY_EXPR	667:8	667:9	15	! TIFFWriteDirectoryTagRationalArray ( tif , & ndir , dir , TIFFTAG_REFERENCEBLACKWHITE , 6 , tif -> tif_dir . td_refblackwhite )
UNARY_OPERATOR	667:8	667:8	16	!
LEAF_NODE	667:8	667:8	17	!
FUNCTION_CALL	667:9	667:117	16	TIFFWriteDirectoryTagRationalArray ( tif , & ndir , dir , TIFFTAG_REFERENCEBLACKWHITE , 6 , tif -> tif_dir . td_refblackwhite )
CALLEE	667:9	667:9	17	TIFFWriteDirectoryTagRationalArray
LEAF_NODE	667:9	667:9	18	TIFFWriteDirectoryTagRationalArray
LEAF_NODE	667:43	667:43	17	(
ARGUMENT	667:44	667:44	17	tif
FIELD	667:44	667:44	18	tif
LEAF_NODE	667:44	667:44	19	tif
LEAF_NODE	667:47	667:47	17	,
ARGUMENT	667:48	667:48	17	& ndir
UNARY_EXPR	667:48	667:49	18	& ndir
UNARY_OPERATOR	667:48	667:48	19	&
LEAF_NODE	667:48	667:48	20	&
FIELD	667:49	667:49	19	ndir
LEAF_NODE	667:49	667:49	20	ndir
LEAF_NODE	667:53	667:53	17	,
ARGUMENT	667:54	667:54	17	dir
FIELD	667:54	667:54	18	dir
LEAF_NODE	667:54	667:54	19	dir
LEAF_NODE	667:57	667:57	17	,
ARGUMENT	667:58	667:58	17	TIFFTAG_REFERENCEBLACKWHITE
FIELD	667:58	667:58	18	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	667:58	667:58	19	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	667:85	667:85	17	,
ARGUMENT	667:86	667:86	17	6
FIELD	667:86	667:86	18	6
LEAF_NODE	667:86	667:86	19	6
LEAF_NODE	667:87	667:87	17	,
ARGUMENT	667:88	667:88	17	tif -> tif_dir . td_refblackwhite
FIELD	667:88	667:101	18	tif -> tif_dir . td_refblackwhite
LEAF_NODE	667:88	667:88	19	tif
LEAF_NODE	667:91	667:91	19	->
LEAF_NODE	667:93	667:93	19	tif_dir
LEAF_NODE	667:100	667:100	19	.
LEAF_NODE	667:101	667:101	19	td_refblackwhite
LEAF_NODE	667:117	667:117	17	)
LEAF_NODE	667:118	667:118	13	)
STATEMENTS	668:5	668:5	13	
JUMP_STATEMENT	668:5	668:13	14	goto bad ;
KEYWORD	668:5	668:5	15	goto
LEAF_NODE	668:5	668:5	16	goto
DESTINATION	668:10	668:10	15	bad
LEAF_NODE	668:10	668:10	16	bad
LEAF_NODE	668:13	668:13	15	;
LEAF_NODE	669:3	669:3	11	}
SELECTION	670:3	671:3	9	
KEYWORD	670:3	670:3	10	if
LEAF_NODE	670:3	670:3	11	if
LEAF_NODE	670:6	670:6	10	(
CONDITION	670:7	670:7	10	TIFFFieldSet ( tif , FIELD_TRANSFERFUNCTION )
EXPR	670:7	670:7	11	TIFFFieldSet ( tif , FIELD_TRANSFERFUNCTION )
FUNCTION_CALL	670:7	670:46	12	TIFFFieldSet ( tif , FIELD_TRANSFERFUNCTION )
CALLEE	670:7	670:7	13	TIFFFieldSet
LEAF_NODE	670:7	670:7	14	TIFFFieldSet
LEAF_NODE	670:19	670:19	13	(
ARGUMENT	670:20	670:20	13	tif
FIELD	670:20	670:20	14	tif
LEAF_NODE	670:20	670:20	15	tif
LEAF_NODE	670:23	670:23	13	,
ARGUMENT	670:24	670:24	13	FIELD_TRANSFERFUNCTION
FIELD	670:24	670:24	14	FIELD_TRANSFERFUNCTION
LEAF_NODE	670:24	670:24	15	FIELD_TRANSFERFUNCTION
LEAF_NODE	670:46	670:46	13	)
LEAF_NODE	670:47	670:47	10	)
STATEMENTS	671:3	674:3	10	
LEAF_NODE	671:3	671:3	11	{
STATEMENTS	672:4	672:4	11	
SELECTION	672:4	673:5	12	
KEYWORD	672:4	672:4	13	if
LEAF_NODE	672:4	672:4	14	if
LEAF_NODE	672:7	672:7	13	(
CONDITION	672:8	672:8	13	! TIFFWriteDirectoryTagTransferfunction ( tif , & ndir , dir )
EXPR	672:8	672:8	14	! TIFFWriteDirectoryTagTransferfunction ( tif , & ndir , dir )
UNARY_EXPR	672:8	672:9	15	! TIFFWriteDirectoryTagTransferfunction ( tif , & ndir , dir )
UNARY_OPERATOR	672:8	672:8	16	!
LEAF_NODE	672:8	672:8	17	!
FUNCTION_CALL	672:9	672:60	16	TIFFWriteDirectoryTagTransferfunction ( tif , & ndir , dir )
CALLEE	672:9	672:9	17	TIFFWriteDirectoryTagTransferfunction
LEAF_NODE	672:9	672:9	18	TIFFWriteDirectoryTagTransferfunction
LEAF_NODE	672:46	672:46	17	(
ARGUMENT	672:47	672:47	17	tif
FIELD	672:47	672:47	18	tif
LEAF_NODE	672:47	672:47	19	tif
LEAF_NODE	672:50	672:50	17	,
ARGUMENT	672:51	672:51	17	& ndir
UNARY_EXPR	672:51	672:52	18	& ndir
UNARY_OPERATOR	672:51	672:51	19	&
LEAF_NODE	672:51	672:51	20	&
FIELD	672:52	672:52	19	ndir
LEAF_NODE	672:52	672:52	20	ndir
LEAF_NODE	672:56	672:56	17	,
ARGUMENT	672:57	672:57	17	dir
FIELD	672:57	672:57	18	dir
LEAF_NODE	672:57	672:57	19	dir
LEAF_NODE	672:60	672:60	17	)
LEAF_NODE	672:61	672:61	13	)
STATEMENTS	673:5	673:5	13	
JUMP_STATEMENT	673:5	673:13	14	goto bad ;
KEYWORD	673:5	673:5	15	goto
LEAF_NODE	673:5	673:5	16	goto
DESTINATION	673:10	673:10	15	bad
LEAF_NODE	673:10	673:10	16	bad
LEAF_NODE	673:13	673:13	15	;
LEAF_NODE	674:3	674:3	11	}
SELECTION	675:3	676:3	9	
KEYWORD	675:3	675:3	10	if
LEAF_NODE	675:3	675:3	11	if
LEAF_NODE	675:6	675:6	10	(
CONDITION	675:7	675:7	10	TIFFFieldSet ( tif , FIELD_INKNAMES )
EXPR	675:7	675:7	11	TIFFFieldSet ( tif , FIELD_INKNAMES )
FUNCTION_CALL	675:7	675:38	12	TIFFFieldSet ( tif , FIELD_INKNAMES )
CALLEE	675:7	675:7	13	TIFFFieldSet
LEAF_NODE	675:7	675:7	14	TIFFFieldSet
LEAF_NODE	675:19	675:19	13	(
ARGUMENT	675:20	675:20	13	tif
FIELD	675:20	675:20	14	tif
LEAF_NODE	675:20	675:20	15	tif
LEAF_NODE	675:23	675:23	13	,
ARGUMENT	675:24	675:24	13	FIELD_INKNAMES
FIELD	675:24	675:24	14	FIELD_INKNAMES
LEAF_NODE	675:24	675:24	15	FIELD_INKNAMES
LEAF_NODE	675:38	675:38	13	)
LEAF_NODE	675:39	675:39	10	)
STATEMENTS	676:3	679:3	10	
LEAF_NODE	676:3	676:3	11	{
STATEMENTS	677:4	677:4	11	
SELECTION	677:4	678:5	12	
KEYWORD	677:4	677:4	13	if
LEAF_NODE	677:4	677:4	14	if
LEAF_NODE	677:7	677:7	13	(
CONDITION	677:8	677:8	13	! TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , TIFFTAG_INKNAMES , tif -> tif_dir . td_inknameslen , tif -> tif_dir . td_inknames )
EXPR	677:8	677:8	14	! TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , TIFFTAG_INKNAMES , tif -> tif_dir . td_inknameslen , tif -> tif_dir . td_inknames )
UNARY_EXPR	677:8	677:9	15	! TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , TIFFTAG_INKNAMES , tif -> tif_dir . td_inknameslen , tif -> tif_dir . td_inknames )
UNARY_OPERATOR	677:8	677:8	16	!
LEAF_NODE	677:8	677:8	17	!
FUNCTION_CALL	677:9	677:119	16	TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , TIFFTAG_INKNAMES , tif -> tif_dir . td_inknameslen , tif -> tif_dir . td_inknames )
CALLEE	677:9	677:9	17	TIFFWriteDirectoryTagAscii
LEAF_NODE	677:9	677:9	18	TIFFWriteDirectoryTagAscii
LEAF_NODE	677:35	677:35	17	(
ARGUMENT	677:36	677:36	17	tif
FIELD	677:36	677:36	18	tif
LEAF_NODE	677:36	677:36	19	tif
LEAF_NODE	677:39	677:39	17	,
ARGUMENT	677:40	677:40	17	& ndir
UNARY_EXPR	677:40	677:41	18	& ndir
UNARY_OPERATOR	677:40	677:40	19	&
LEAF_NODE	677:40	677:40	20	&
FIELD	677:41	677:41	19	ndir
LEAF_NODE	677:41	677:41	20	ndir
LEAF_NODE	677:45	677:45	17	,
ARGUMENT	677:46	677:46	17	dir
FIELD	677:46	677:46	18	dir
LEAF_NODE	677:46	677:46	19	dir
LEAF_NODE	677:49	677:49	17	,
ARGUMENT	677:50	677:50	17	TIFFTAG_INKNAMES
FIELD	677:50	677:50	18	TIFFTAG_INKNAMES
LEAF_NODE	677:50	677:50	19	TIFFTAG_INKNAMES
LEAF_NODE	677:66	677:66	17	,
ARGUMENT	677:67	677:67	17	tif -> tif_dir . td_inknameslen
FIELD	677:67	677:80	18	tif -> tif_dir . td_inknameslen
LEAF_NODE	677:67	677:67	19	tif
LEAF_NODE	677:70	677:70	19	->
LEAF_NODE	677:72	677:72	19	tif_dir
LEAF_NODE	677:79	677:79	19	.
LEAF_NODE	677:80	677:80	19	td_inknameslen
LEAF_NODE	677:94	677:94	17	,
ARGUMENT	677:95	677:95	17	tif -> tif_dir . td_inknames
FIELD	677:95	677:108	18	tif -> tif_dir . td_inknames
LEAF_NODE	677:95	677:95	19	tif
LEAF_NODE	677:98	677:98	19	->
LEAF_NODE	677:100	677:100	19	tif_dir
LEAF_NODE	677:107	677:107	19	.
LEAF_NODE	677:108	677:108	19	td_inknames
LEAF_NODE	677:119	677:119	17	)
LEAF_NODE	677:120	677:120	13	)
STATEMENTS	678:5	678:5	13	
JUMP_STATEMENT	678:5	678:13	14	goto bad ;
KEYWORD	678:5	678:5	15	goto
LEAF_NODE	678:5	678:5	16	goto
DESTINATION	678:10	678:10	15	bad
LEAF_NODE	678:10	678:10	16	bad
LEAF_NODE	678:13	678:13	15	;
LEAF_NODE	679:3	679:3	11	}
SELECTION	680:3	681:3	9	
KEYWORD	680:3	680:3	10	if
LEAF_NODE	680:3	680:3	11	if
LEAF_NODE	680:6	680:6	10	(
CONDITION	680:7	680:7	10	TIFFFieldSet ( tif , FIELD_SUBIFD )
EXPR	680:7	680:7	11	TIFFFieldSet ( tif , FIELD_SUBIFD )
FUNCTION_CALL	680:7	680:36	12	TIFFFieldSet ( tif , FIELD_SUBIFD )
CALLEE	680:7	680:7	13	TIFFFieldSet
LEAF_NODE	680:7	680:7	14	TIFFFieldSet
LEAF_NODE	680:19	680:19	13	(
ARGUMENT	680:20	680:20	13	tif
FIELD	680:20	680:20	14	tif
LEAF_NODE	680:20	680:20	15	tif
LEAF_NODE	680:23	680:23	13	,
ARGUMENT	680:24	680:24	13	FIELD_SUBIFD
FIELD	680:24	680:24	14	FIELD_SUBIFD
LEAF_NODE	680:24	680:24	15	FIELD_SUBIFD
LEAF_NODE	680:36	680:36	13	)
LEAF_NODE	680:37	680:37	10	)
STATEMENTS	681:3	684:3	10	
LEAF_NODE	681:3	681:3	11	{
STATEMENTS	682:4	682:4	11	
SELECTION	682:4	683:5	12	
KEYWORD	682:4	682:4	13	if
LEAF_NODE	682:4	682:4	14	if
LEAF_NODE	682:7	682:7	13	(
CONDITION	682:8	682:8	13	! TIFFWriteDirectoryTagSubifd ( tif , & ndir , dir )
EXPR	682:8	682:8	14	! TIFFWriteDirectoryTagSubifd ( tif , & ndir , dir )
UNARY_EXPR	682:8	682:9	15	! TIFFWriteDirectoryTagSubifd ( tif , & ndir , dir )
UNARY_OPERATOR	682:8	682:8	16	!
LEAF_NODE	682:8	682:8	17	!
FUNCTION_CALL	682:9	682:50	16	TIFFWriteDirectoryTagSubifd ( tif , & ndir , dir )
CALLEE	682:9	682:9	17	TIFFWriteDirectoryTagSubifd
LEAF_NODE	682:9	682:9	18	TIFFWriteDirectoryTagSubifd
LEAF_NODE	682:36	682:36	17	(
ARGUMENT	682:37	682:37	17	tif
FIELD	682:37	682:37	18	tif
LEAF_NODE	682:37	682:37	19	tif
LEAF_NODE	682:40	682:40	17	,
ARGUMENT	682:41	682:41	17	& ndir
UNARY_EXPR	682:41	682:42	18	& ndir
UNARY_OPERATOR	682:41	682:41	19	&
LEAF_NODE	682:41	682:41	20	&
FIELD	682:42	682:42	19	ndir
LEAF_NODE	682:42	682:42	20	ndir
LEAF_NODE	682:46	682:46	17	,
ARGUMENT	682:47	682:47	17	dir
FIELD	682:47	682:47	18	dir
LEAF_NODE	682:47	682:47	19	dir
LEAF_NODE	682:50	682:50	17	)
LEAF_NODE	682:51	682:51	13	)
STATEMENTS	683:5	683:5	13	
JUMP_STATEMENT	683:5	683:13	14	goto bad ;
KEYWORD	683:5	683:5	15	goto
LEAF_NODE	683:5	683:5	16	goto
DESTINATION	683:10	683:10	15	bad
LEAF_NODE	683:10	683:10	16	bad
LEAF_NODE	683:13	683:13	15	;
LEAF_NODE	684:3	684:3	11	}
LEAF_NODE	685:3	685:3	9	{
STATEMENTS	686:4	687:4	9	
SIMPLE_DECL	686:4	686:12	10	uint32 n ;
VAR_DECL	686:4	686:11	11	uint32 n
TYPE	686:4	686:4	12	uint32
TYPE_NAME	686:4	686:4	13	uint32
LEAF_NODE	686:4	686:4	14	uint32
NAME	686:11	686:11	12	n
LEAF_NODE	686:11	686:11	13	n
LEAF_NODE	686:12	686:12	11	;
ITERATION	687:4	687:39	10	
KEYWORD	687:4	687:4	11	for
LEAF_NODE	687:4	687:4	12	for
LEAF_NODE	687:8	687:8	11	(
FOR_INIT	687:9	687:12	11	n = 0 ;
EXPR	687:9	687:9	12	n = 0
ASSIGN	687:9	687:11	13	n = 0
LVAL	687:9	687:9	14	n
FIELD	687:9	687:9	15	n
LEAF_NODE	687:9	687:9	16	n
ASSIGN_OP	687:10	687:10	14	=
LEAF_NODE	687:10	687:10	15	=
RVAL	687:11	687:11	14	0
FIELD	687:11	687:11	15	0
LEAF_NODE	687:11	687:11	16	0
LEAF_NODE	687:12	687:12	12	;
CONDITION	687:14	687:14	11	n < tif -> tif_nfields
EXPR	687:14	687:16	12	n < tif -> tif_nfields
FIELD	687:14	687:14	13	n
LEAF_NODE	687:14	687:14	14	n
REL_OPERATOR	687:15	687:15	13	<
LEAF_NODE	687:15	687:15	14	<
FIELD	687:16	687:21	13	tif -> tif_nfields
LEAF_NODE	687:16	687:16	14	tif
LEAF_NODE	687:19	687:19	14	->
LEAF_NODE	687:21	687:21	14	tif_nfields
LEAF_NODE	687:32	687:32	11	;
FOR_EXPR	687:34	687:34	11	n ++
EXPR	687:34	687:34	12	n ++
FIELD	687:34	687:35	13	n ++
LEAF_NODE	687:34	687:34	14	n
LEAF_NODE	687:35	687:35	14	++
LEAF_NODE	687:37	687:37	11	)
STATEMENTS	687:39	749:4	11	
LEAF_NODE	687:39	687:39	12	{
STATEMENTS	688:5	690:5	12	
SIMPLE_DECL	688:5	688:23	13	const TIFFField * o ;
VAR_DECL	688:5	688:22	14	const TIFFField * o
TYPE	688:5	688:20	15	const TIFFField *
TYPE_NAME	688:5	688:11	16	const TIFFField
LEAF_NODE	688:5	688:5	17	const
LEAF_NODE	688:11	688:11	17	TIFFField
POINTER	688:20	688:20	16	*
LEAF_NODE	688:20	688:20	17	*
NAME	688:22	688:22	15	o
LEAF_NODE	688:22	688:22	16	o
LEAF_NODE	688:23	688:23	14	;
EXPR_STATEMENT	689:5	689:27	13	o = tif -> tif_fields [ n ] ;
EXPR	689:5	689:5	14	o = tif -> tif_fields [ n ]
ASSIGN	689:5	689:9	15	o = tif -> tif_fields [ n ]
LVAL	689:5	689:5	16	o
FIELD	689:5	689:5	17	o
LEAF_NODE	689:5	689:5	18	o
ASSIGN_OP	689:7	689:7	16	=
LEAF_NODE	689:7	689:7	17	=
RVAL	689:9	689:9	16	tif -> tif_fields [ n ]
FIELD	689:9	689:26	17	tif -> tif_fields [ n ]
LEAF_NODE	689:9	689:9	18	tif
LEAF_NODE	689:12	689:12	18	->
LEAF_NODE	689:14	689:14	18	tif_fields
LEAF_NODE	689:24	689:24	18	[
EXPR	689:25	689:25	18	n
FIELD	689:25	689:25	19	n
LEAF_NODE	689:25	689:25	20	n
LEAF_NODE	689:26	689:26	18	]
LEAF_NODE	689:27	689:27	14	;
SELECTION	690:5	691:5	13	
KEYWORD	690:5	690:5	14	if
LEAF_NODE	690:5	690:5	15	if
LEAF_NODE	690:8	690:8	14	(
CONDITION	690:9	690:9	14	( o -> field_bit >= FIELD_CODEC ) && ( TIFFFieldSet ( tif , o -> field_bit ) )
EXPR	690:9	690:9	15	( o -> field_bit >= FIELD_CODEC ) && ( TIFFFieldSet ( tif , o -> field_bit ) )
AND	690:9	690:38	16	( o -> field_bit >= FIELD_CODEC ) && ( TIFFFieldSet ( tif , o -> field_bit ) )
EXPR	690:9	690:35	17	( o -> field_bit >= FIELD_CODEC )
LEAF_NODE	690:9	690:9	18	(
FIELD	690:10	690:13	18	o -> field_bit
LEAF_NODE	690:10	690:10	19	o
LEAF_NODE	690:11	690:11	19	->
LEAF_NODE	690:13	690:13	19	field_bit
REL_OPERATOR	690:22	690:22	18	>=
LEAF_NODE	690:22	690:22	19	>=
FIELD	690:24	690:24	18	FIELD_CODEC
LEAF_NODE	690:24	690:24	19	FIELD_CODEC
LEAF_NODE	690:35	690:35	18	)
LEAF_NODE	690:36	690:36	17	&&
EXPR	690:38	690:69	17	( TIFFFieldSet ( tif , o -> field_bit ) )
LEAF_NODE	690:38	690:38	18	(
FUNCTION_CALL	690:39	690:68	18	TIFFFieldSet ( tif , o -> field_bit )
CALLEE	690:39	690:39	19	TIFFFieldSet
LEAF_NODE	690:39	690:39	20	TIFFFieldSet
LEAF_NODE	690:51	690:51	19	(
ARGUMENT	690:52	690:52	19	tif
FIELD	690:52	690:52	20	tif
LEAF_NODE	690:52	690:52	21	tif
LEAF_NODE	690:55	690:55	19	,
ARGUMENT	690:56	690:56	19	o -> field_bit
FIELD	690:56	690:59	20	o -> field_bit
LEAF_NODE	690:56	690:56	21	o
LEAF_NODE	690:57	690:57	21	->
LEAF_NODE	690:59	690:59	21	field_bit
LEAF_NODE	690:68	690:68	19	)
LEAF_NODE	690:69	690:69	18	)
LEAF_NODE	690:70	690:70	14	)
STATEMENTS	691:5	748:5	14	
LEAF_NODE	691:5	691:5	15	{
STATEMENTS	692:6	692:6	15	
SELECTION	692:6	693:6	16	
KEYWORD	692:6	692:6	17	switch
LEAF_NODE	692:6	692:6	18	switch
LEAF_NODE	692:13	692:13	17	(
CONDITION	692:14	692:14	17	o -> get_field_type
EXPR	692:14	692:14	18	o -> get_field_type
FIELD	692:14	692:17	19	o -> get_field_type
LEAF_NODE	692:14	692:14	20	o
LEAF_NODE	692:15	692:15	20	->
LEAF_NODE	692:17	692:17	20	get_field_type
LEAF_NODE	692:31	692:31	17	)
STATEMENTS	693:6	747:6	17	
LEAF_NODE	693:6	693:6	18	{
STATEMENTS	694:7	746:8	18	
LABEL	694:7	694:29	19	case TIFF_SETGET_ASCII :
LEAF_NODE	694:7	694:7	20	case
LEAF_NODE	694:12	694:12	20	TIFF_SETGET_ASCII
LEAF_NODE	694:29	694:29	20	:
LEAF_NODE	695:8	695:8	19	{
STATEMENTS	696:9	703:9	19	
SIMPLE_DECL	696:9	696:18	20	uint32 pa ;
VAR_DECL	696:9	696:16	21	uint32 pa
TYPE	696:9	696:9	22	uint32
TYPE_NAME	696:9	696:9	23	uint32
LEAF_NODE	696:9	696:9	24	uint32
NAME	696:16	696:16	22	pa
LEAF_NODE	696:16	696:16	23	pa
LEAF_NODE	696:18	696:18	21	;
SIMPLE_DECL	697:9	697:17	20	char * pb ;
VAR_DECL	697:9	697:15	21	char * pb
TYPE	697:9	697:13	22	char *
TYPE_NAME	697:9	697:9	23	char
LEAF_NODE	697:9	697:9	24	char
POINTER	697:13	697:13	23	*
LEAF_NODE	697:13	697:13	24	*
NAME	697:15	697:15	22	pb
LEAF_NODE	697:15	697:15	23	pb
LEAF_NODE	697:17	697:17	21	;
EXPR_STATEMENT	698:9	698:42	20	assert ( o -> field_type == TIFF_ASCII ) ;
EXPR	698:9	698:9	21	assert ( o -> field_type == TIFF_ASCII )
FUNCTION_CALL	698:9	698:41	22	assert ( o -> field_type == TIFF_ASCII )
CALLEE	698:9	698:9	23	assert
LEAF_NODE	698:9	698:9	24	assert
LEAF_NODE	698:15	698:15	23	(
ARGUMENT	698:16	698:31	23	o -> field_type == TIFF_ASCII
FIELD	698:16	698:19	24	o -> field_type
LEAF_NODE	698:16	698:16	25	o
LEAF_NODE	698:17	698:17	25	->
LEAF_NODE	698:19	698:19	25	field_type
EQ_OPERATOR	698:29	698:29	24	==
LEAF_NODE	698:29	698:29	25	==
FIELD	698:31	698:31	24	TIFF_ASCII
LEAF_NODE	698:31	698:31	25	TIFF_ASCII
LEAF_NODE	698:41	698:41	23	)
LEAF_NODE	698:42	698:42	21	;
EXPR_STATEMENT	699:9	699:50	20	assert ( o -> field_readcount == TIFF_VARIABLE ) ;
EXPR	699:9	699:9	21	assert ( o -> field_readcount == TIFF_VARIABLE )
FUNCTION_CALL	699:9	699:49	22	assert ( o -> field_readcount == TIFF_VARIABLE )
CALLEE	699:9	699:9	23	assert
LEAF_NODE	699:9	699:9	24	assert
LEAF_NODE	699:15	699:15	23	(
ARGUMENT	699:16	699:36	23	o -> field_readcount == TIFF_VARIABLE
FIELD	699:16	699:19	24	o -> field_readcount
LEAF_NODE	699:16	699:16	25	o
LEAF_NODE	699:17	699:17	25	->
LEAF_NODE	699:19	699:19	25	field_readcount
EQ_OPERATOR	699:34	699:34	24	==
LEAF_NODE	699:34	699:34	25	==
FIELD	699:36	699:36	24	TIFF_VARIABLE
LEAF_NODE	699:36	699:36	25	TIFF_VARIABLE
LEAF_NODE	699:49	699:49	23	)
LEAF_NODE	699:50	699:50	21	;
EXPR_STATEMENT	700:9	700:38	20	assert ( o -> field_passcount == 0 ) ;
EXPR	700:9	700:9	21	assert ( o -> field_passcount == 0 )
FUNCTION_CALL	700:9	700:37	22	assert ( o -> field_passcount == 0 )
CALLEE	700:9	700:9	23	assert
LEAF_NODE	700:9	700:9	24	assert
LEAF_NODE	700:15	700:15	23	(
ARGUMENT	700:16	700:36	23	o -> field_passcount == 0
FIELD	700:16	700:19	24	o -> field_passcount
LEAF_NODE	700:16	700:16	25	o
LEAF_NODE	700:17	700:17	25	->
LEAF_NODE	700:19	700:19	25	field_passcount
EQ_OPERATOR	700:34	700:34	24	==
LEAF_NODE	700:34	700:34	25	==
FIELD	700:36	700:36	24	0
LEAF_NODE	700:36	700:36	25	0
LEAF_NODE	700:37	700:37	23	)
LEAF_NODE	700:38	700:38	21	;
EXPR_STATEMENT	701:9	701:43	20	TIFFGetField ( tif , o -> field_tag , & pb ) ;
EXPR	701:9	701:9	21	TIFFGetField ( tif , o -> field_tag , & pb )
FUNCTION_CALL	701:9	701:42	22	TIFFGetField ( tif , o -> field_tag , & pb )
CALLEE	701:9	701:9	23	TIFFGetField
LEAF_NODE	701:9	701:9	24	TIFFGetField
LEAF_NODE	701:21	701:21	23	(
ARGUMENT	701:22	701:22	23	tif
FIELD	701:22	701:22	24	tif
LEAF_NODE	701:22	701:22	25	tif
LEAF_NODE	701:25	701:25	23	,
ARGUMENT	701:26	701:26	23	o -> field_tag
FIELD	701:26	701:29	24	o -> field_tag
LEAF_NODE	701:26	701:26	25	o
LEAF_NODE	701:27	701:27	25	->
LEAF_NODE	701:29	701:29	25	field_tag
LEAF_NODE	701:38	701:38	23	,
ARGUMENT	701:39	701:39	23	& pb
UNARY_EXPR	701:39	701:40	24	& pb
UNARY_OPERATOR	701:39	701:39	25	&
LEAF_NODE	701:39	701:39	26	&
FIELD	701:40	701:40	25	pb
LEAF_NODE	701:40	701:40	26	pb
LEAF_NODE	701:42	701:42	23	)
LEAF_NODE	701:43	701:43	21	;
EXPR_STATEMENT	702:9	702:32	20	pa = ( uint32 ) ( strlen ( pb ) ) ;
EXPR	702:9	702:9	21	pa = ( uint32 ) ( strlen ( pb ) )
ASSIGN	702:9	702:12	22	pa = ( uint32 ) ( strlen ( pb ) )
LVAL	702:9	702:9	23	pa
FIELD	702:9	702:9	24	pa
LEAF_NODE	702:9	702:9	25	pa
ASSIGN_OP	702:11	702:11	23	=
LEAF_NODE	702:11	702:11	24	=
RVAL	702:12	702:31	23	( uint32 ) ( strlen ( pb ) )
LEAF_NODE	702:12	702:12	24	(
TYPE_NAME	702:13	702:13	24	uint32
LEAF_NODE	702:13	702:13	25	uint32
LEAF_NODE	702:19	702:19	24	)
LEAF_NODE	702:20	702:20	24	(
FUNCTION_CALL	702:21	702:30	24	strlen ( pb )
CALLEE	702:21	702:21	25	strlen
LEAF_NODE	702:21	702:21	26	strlen
LEAF_NODE	702:27	702:27	25	(
ARGUMENT	702:28	702:28	25	pb
FIELD	702:28	702:28	26	pb
LEAF_NODE	702:28	702:28	27	pb
LEAF_NODE	702:30	702:30	25	)
LEAF_NODE	702:31	702:31	24	)
LEAF_NODE	702:32	702:32	21	;
SELECTION	703:9	704:10	20	
KEYWORD	703:9	703:9	21	if
LEAF_NODE	703:9	703:9	22	if
LEAF_NODE	703:12	703:12	21	(
CONDITION	703:13	703:13	21	! TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , ( uint16 ) o -> field_tag , pa , pb )
EXPR	703:13	703:13	22	! TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , ( uint16 ) o -> field_tag , pa , pb )
UNARY_EXPR	703:13	703:14	23	! TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , ( uint16 ) o -> field_tag , pa , pb )
UNARY_OPERATOR	703:13	703:13	24	!
LEAF_NODE	703:13	703:13	25	!
FUNCTION_CALL	703:14	703:81	24	TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , ( uint16 ) o -> field_tag , pa , pb )
CALLEE	703:14	703:14	25	TIFFWriteDirectoryTagAscii
LEAF_NODE	703:14	703:14	26	TIFFWriteDirectoryTagAscii
LEAF_NODE	703:40	703:40	25	(
ARGUMENT	703:41	703:41	25	tif
FIELD	703:41	703:41	26	tif
LEAF_NODE	703:41	703:41	27	tif
LEAF_NODE	703:44	703:44	25	,
ARGUMENT	703:45	703:45	25	& ndir
UNARY_EXPR	703:45	703:46	26	& ndir
UNARY_OPERATOR	703:45	703:45	27	&
LEAF_NODE	703:45	703:45	28	&
FIELD	703:46	703:46	27	ndir
LEAF_NODE	703:46	703:46	28	ndir
LEAF_NODE	703:50	703:50	25	,
ARGUMENT	703:51	703:51	25	dir
FIELD	703:51	703:51	26	dir
LEAF_NODE	703:51	703:51	27	dir
LEAF_NODE	703:54	703:54	25	,
ARGUMENT	703:55	703:63	25	( uint16 ) o -> field_tag
LEAF_NODE	703:55	703:55	26	(
TYPE_NAME	703:56	703:56	26	uint16
LEAF_NODE	703:56	703:56	27	uint16
LEAF_NODE	703:62	703:62	26	)
FIELD	703:63	703:66	26	o -> field_tag
LEAF_NODE	703:63	703:63	27	o
LEAF_NODE	703:64	703:64	27	->
LEAF_NODE	703:66	703:66	27	field_tag
LEAF_NODE	703:75	703:75	25	,
ARGUMENT	703:76	703:76	25	pa
FIELD	703:76	703:76	26	pa
LEAF_NODE	703:76	703:76	27	pa
LEAF_NODE	703:78	703:78	25	,
ARGUMENT	703:79	703:79	25	pb
FIELD	703:79	703:79	26	pb
LEAF_NODE	703:79	703:79	27	pb
LEAF_NODE	703:81	703:81	25	)
LEAF_NODE	703:82	703:82	21	)
STATEMENTS	704:10	704:10	21	
JUMP_STATEMENT	704:10	704:18	22	goto bad ;
KEYWORD	704:10	704:10	23	goto
LEAF_NODE	704:10	704:10	24	goto
DESTINATION	704:15	704:15	23	bad
LEAF_NODE	704:15	704:15	24	bad
LEAF_NODE	704:18	704:18	23	;
LEAF_NODE	705:8	705:8	19	}
JUMP_STATEMENT	706:8	706:13	19	break DESTINATION ;
KEYWORD	706:8	706:8	20	break
LEAF_NODE	706:8	706:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	706:13	706:13	20	;
LABEL	707:7	707:30	19	case TIFF_SETGET_UINT16 :
LEAF_NODE	707:7	707:7	20	case
LEAF_NODE	707:12	707:12	20	TIFF_SETGET_UINT16
LEAF_NODE	707:30	707:30	20	:
LEAF_NODE	708:8	708:8	19	{
STATEMENTS	709:9	714:9	19	
SIMPLE_DECL	709:9	709:17	20	uint16 p ;
VAR_DECL	709:9	709:16	21	uint16 p
TYPE	709:9	709:9	22	uint16
TYPE_NAME	709:9	709:9	23	uint16
LEAF_NODE	709:9	709:9	24	uint16
NAME	709:16	709:16	22	p
LEAF_NODE	709:16	709:16	23	p
LEAF_NODE	709:17	709:17	21	;
EXPR_STATEMENT	710:9	710:42	20	assert ( o -> field_type == TIFF_SHORT ) ;
EXPR	710:9	710:9	21	assert ( o -> field_type == TIFF_SHORT )
FUNCTION_CALL	710:9	710:41	22	assert ( o -> field_type == TIFF_SHORT )
CALLEE	710:9	710:9	23	assert
LEAF_NODE	710:9	710:9	24	assert
LEAF_NODE	710:15	710:15	23	(
ARGUMENT	710:16	710:31	23	o -> field_type == TIFF_SHORT
FIELD	710:16	710:19	24	o -> field_type
LEAF_NODE	710:16	710:16	25	o
LEAF_NODE	710:17	710:17	25	->
LEAF_NODE	710:19	710:19	25	field_type
EQ_OPERATOR	710:29	710:29	24	==
LEAF_NODE	710:29	710:29	25	==
FIELD	710:31	710:31	24	TIFF_SHORT
LEAF_NODE	710:31	710:31	25	TIFF_SHORT
LEAF_NODE	710:41	710:41	23	)
LEAF_NODE	710:42	710:42	21	;
EXPR_STATEMENT	711:9	711:38	20	assert ( o -> field_readcount == 1 ) ;
EXPR	711:9	711:9	21	assert ( o -> field_readcount == 1 )
FUNCTION_CALL	711:9	711:37	22	assert ( o -> field_readcount == 1 )
CALLEE	711:9	711:9	23	assert
LEAF_NODE	711:9	711:9	24	assert
LEAF_NODE	711:15	711:15	23	(
ARGUMENT	711:16	711:36	23	o -> field_readcount == 1
FIELD	711:16	711:19	24	o -> field_readcount
LEAF_NODE	711:16	711:16	25	o
LEAF_NODE	711:17	711:17	25	->
LEAF_NODE	711:19	711:19	25	field_readcount
EQ_OPERATOR	711:34	711:34	24	==
LEAF_NODE	711:34	711:34	25	==
FIELD	711:36	711:36	24	1
LEAF_NODE	711:36	711:36	25	1
LEAF_NODE	711:37	711:37	23	)
LEAF_NODE	711:38	711:38	21	;
EXPR_STATEMENT	712:9	712:38	20	assert ( o -> field_passcount == 0 ) ;
EXPR	712:9	712:9	21	assert ( o -> field_passcount == 0 )
FUNCTION_CALL	712:9	712:37	22	assert ( o -> field_passcount == 0 )
CALLEE	712:9	712:9	23	assert
LEAF_NODE	712:9	712:9	24	assert
LEAF_NODE	712:15	712:15	23	(
ARGUMENT	712:16	712:36	23	o -> field_passcount == 0
FIELD	712:16	712:19	24	o -> field_passcount
LEAF_NODE	712:16	712:16	25	o
LEAF_NODE	712:17	712:17	25	->
LEAF_NODE	712:19	712:19	25	field_passcount
EQ_OPERATOR	712:34	712:34	24	==
LEAF_NODE	712:34	712:34	25	==
FIELD	712:36	712:36	24	0
LEAF_NODE	712:36	712:36	25	0
LEAF_NODE	712:37	712:37	23	)
LEAF_NODE	712:38	712:38	21	;
EXPR_STATEMENT	713:9	713:42	20	TIFFGetField ( tif , o -> field_tag , & p ) ;
EXPR	713:9	713:9	21	TIFFGetField ( tif , o -> field_tag , & p )
FUNCTION_CALL	713:9	713:41	22	TIFFGetField ( tif , o -> field_tag , & p )
CALLEE	713:9	713:9	23	TIFFGetField
LEAF_NODE	713:9	713:9	24	TIFFGetField
LEAF_NODE	713:21	713:21	23	(
ARGUMENT	713:22	713:22	23	tif
FIELD	713:22	713:22	24	tif
LEAF_NODE	713:22	713:22	25	tif
LEAF_NODE	713:25	713:25	23	,
ARGUMENT	713:26	713:26	23	o -> field_tag
FIELD	713:26	713:29	24	o -> field_tag
LEAF_NODE	713:26	713:26	25	o
LEAF_NODE	713:27	713:27	25	->
LEAF_NODE	713:29	713:29	25	field_tag
LEAF_NODE	713:38	713:38	23	,
ARGUMENT	713:39	713:39	23	& p
UNARY_EXPR	713:39	713:40	24	& p
UNARY_OPERATOR	713:39	713:39	25	&
LEAF_NODE	713:39	713:39	26	&
FIELD	713:40	713:40	25	p
LEAF_NODE	713:40	713:40	26	p
LEAF_NODE	713:41	713:41	23	)
LEAF_NODE	713:42	713:42	21	;
SELECTION	714:9	715:10	20	
KEYWORD	714:9	714:9	21	if
LEAF_NODE	714:9	714:9	22	if
LEAF_NODE	714:12	714:12	21	(
CONDITION	714:13	714:13	21	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , ( uint16 ) o -> field_tag , p )
EXPR	714:13	714:13	22	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , ( uint16 ) o -> field_tag , p )
UNARY_EXPR	714:13	714:14	23	! TIFFWriteDirectoryTagShort ( tif , & ndir , dir , ( uint16 ) o -> field_tag , p )
UNARY_OPERATOR	714:13	714:13	24	!
LEAF_NODE	714:13	714:13	25	!
FUNCTION_CALL	714:14	714:77	24	TIFFWriteDirectoryTagShort ( tif , & ndir , dir , ( uint16 ) o -> field_tag , p )
CALLEE	714:14	714:14	25	TIFFWriteDirectoryTagShort
LEAF_NODE	714:14	714:14	26	TIFFWriteDirectoryTagShort
LEAF_NODE	714:40	714:40	25	(
ARGUMENT	714:41	714:41	25	tif
FIELD	714:41	714:41	26	tif
LEAF_NODE	714:41	714:41	27	tif
LEAF_NODE	714:44	714:44	25	,
ARGUMENT	714:45	714:45	25	& ndir
UNARY_EXPR	714:45	714:46	26	& ndir
UNARY_OPERATOR	714:45	714:45	27	&
LEAF_NODE	714:45	714:45	28	&
FIELD	714:46	714:46	27	ndir
LEAF_NODE	714:46	714:46	28	ndir
LEAF_NODE	714:50	714:50	25	,
ARGUMENT	714:51	714:51	25	dir
FIELD	714:51	714:51	26	dir
LEAF_NODE	714:51	714:51	27	dir
LEAF_NODE	714:54	714:54	25	,
ARGUMENT	714:55	714:63	25	( uint16 ) o -> field_tag
LEAF_NODE	714:55	714:55	26	(
TYPE_NAME	714:56	714:56	26	uint16
LEAF_NODE	714:56	714:56	27	uint16
LEAF_NODE	714:62	714:62	26	)
FIELD	714:63	714:66	26	o -> field_tag
LEAF_NODE	714:63	714:63	27	o
LEAF_NODE	714:64	714:64	27	->
LEAF_NODE	714:66	714:66	27	field_tag
LEAF_NODE	714:75	714:75	25	,
ARGUMENT	714:76	714:76	25	p
FIELD	714:76	714:76	26	p
LEAF_NODE	714:76	714:76	27	p
LEAF_NODE	714:77	714:77	25	)
LEAF_NODE	714:78	714:78	21	)
STATEMENTS	715:10	715:10	21	
JUMP_STATEMENT	715:10	715:18	22	goto bad ;
KEYWORD	715:10	715:10	23	goto
LEAF_NODE	715:10	715:10	24	goto
DESTINATION	715:15	715:15	23	bad
LEAF_NODE	715:15	715:15	24	bad
LEAF_NODE	715:18	715:18	23	;
LEAF_NODE	716:8	716:8	19	}
JUMP_STATEMENT	717:8	717:13	19	break DESTINATION ;
KEYWORD	717:8	717:8	20	break
LEAF_NODE	717:8	717:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	717:13	717:13	20	;
LABEL	718:7	718:30	19	case TIFF_SETGET_UINT32 :
LEAF_NODE	718:7	718:7	20	case
LEAF_NODE	718:12	718:12	20	TIFF_SETGET_UINT32
LEAF_NODE	718:30	718:30	20	:
LEAF_NODE	719:8	719:8	19	{
STATEMENTS	720:9	725:9	19	
SIMPLE_DECL	720:9	720:17	20	uint32 p ;
VAR_DECL	720:9	720:16	21	uint32 p
TYPE	720:9	720:9	22	uint32
TYPE_NAME	720:9	720:9	23	uint32
LEAF_NODE	720:9	720:9	24	uint32
NAME	720:16	720:16	22	p
LEAF_NODE	720:16	720:16	23	p
LEAF_NODE	720:17	720:17	21	;
EXPR_STATEMENT	721:9	721:41	20	assert ( o -> field_type == TIFF_LONG ) ;
EXPR	721:9	721:9	21	assert ( o -> field_type == TIFF_LONG )
FUNCTION_CALL	721:9	721:40	22	assert ( o -> field_type == TIFF_LONG )
CALLEE	721:9	721:9	23	assert
LEAF_NODE	721:9	721:9	24	assert
LEAF_NODE	721:15	721:15	23	(
ARGUMENT	721:16	721:31	23	o -> field_type == TIFF_LONG
FIELD	721:16	721:19	24	o -> field_type
LEAF_NODE	721:16	721:16	25	o
LEAF_NODE	721:17	721:17	25	->
LEAF_NODE	721:19	721:19	25	field_type
EQ_OPERATOR	721:29	721:29	24	==
LEAF_NODE	721:29	721:29	25	==
FIELD	721:31	721:31	24	TIFF_LONG
LEAF_NODE	721:31	721:31	25	TIFF_LONG
LEAF_NODE	721:40	721:40	23	)
LEAF_NODE	721:41	721:41	21	;
EXPR_STATEMENT	722:9	722:38	20	assert ( o -> field_readcount == 1 ) ;
EXPR	722:9	722:9	21	assert ( o -> field_readcount == 1 )
FUNCTION_CALL	722:9	722:37	22	assert ( o -> field_readcount == 1 )
CALLEE	722:9	722:9	23	assert
LEAF_NODE	722:9	722:9	24	assert
LEAF_NODE	722:15	722:15	23	(
ARGUMENT	722:16	722:36	23	o -> field_readcount == 1
FIELD	722:16	722:19	24	o -> field_readcount
LEAF_NODE	722:16	722:16	25	o
LEAF_NODE	722:17	722:17	25	->
LEAF_NODE	722:19	722:19	25	field_readcount
EQ_OPERATOR	722:34	722:34	24	==
LEAF_NODE	722:34	722:34	25	==
FIELD	722:36	722:36	24	1
LEAF_NODE	722:36	722:36	25	1
LEAF_NODE	722:37	722:37	23	)
LEAF_NODE	722:38	722:38	21	;
EXPR_STATEMENT	723:9	723:38	20	assert ( o -> field_passcount == 0 ) ;
EXPR	723:9	723:9	21	assert ( o -> field_passcount == 0 )
FUNCTION_CALL	723:9	723:37	22	assert ( o -> field_passcount == 0 )
CALLEE	723:9	723:9	23	assert
LEAF_NODE	723:9	723:9	24	assert
LEAF_NODE	723:15	723:15	23	(
ARGUMENT	723:16	723:36	23	o -> field_passcount == 0
FIELD	723:16	723:19	24	o -> field_passcount
LEAF_NODE	723:16	723:16	25	o
LEAF_NODE	723:17	723:17	25	->
LEAF_NODE	723:19	723:19	25	field_passcount
EQ_OPERATOR	723:34	723:34	24	==
LEAF_NODE	723:34	723:34	25	==
FIELD	723:36	723:36	24	0
LEAF_NODE	723:36	723:36	25	0
LEAF_NODE	723:37	723:37	23	)
LEAF_NODE	723:38	723:38	21	;
EXPR_STATEMENT	724:9	724:42	20	TIFFGetField ( tif , o -> field_tag , & p ) ;
EXPR	724:9	724:9	21	TIFFGetField ( tif , o -> field_tag , & p )
FUNCTION_CALL	724:9	724:41	22	TIFFGetField ( tif , o -> field_tag , & p )
CALLEE	724:9	724:9	23	TIFFGetField
LEAF_NODE	724:9	724:9	24	TIFFGetField
LEAF_NODE	724:21	724:21	23	(
ARGUMENT	724:22	724:22	23	tif
FIELD	724:22	724:22	24	tif
LEAF_NODE	724:22	724:22	25	tif
LEAF_NODE	724:25	724:25	23	,
ARGUMENT	724:26	724:26	23	o -> field_tag
FIELD	724:26	724:29	24	o -> field_tag
LEAF_NODE	724:26	724:26	25	o
LEAF_NODE	724:27	724:27	25	->
LEAF_NODE	724:29	724:29	25	field_tag
LEAF_NODE	724:38	724:38	23	,
ARGUMENT	724:39	724:39	23	& p
UNARY_EXPR	724:39	724:40	24	& p
UNARY_OPERATOR	724:39	724:39	25	&
LEAF_NODE	724:39	724:39	26	&
FIELD	724:40	724:40	25	p
LEAF_NODE	724:40	724:40	26	p
LEAF_NODE	724:41	724:41	23	)
LEAF_NODE	724:42	724:42	21	;
SELECTION	725:9	726:10	20	
KEYWORD	725:9	725:9	21	if
LEAF_NODE	725:9	725:9	22	if
LEAF_NODE	725:12	725:12	21	(
CONDITION	725:13	725:13	21	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , ( uint16 ) o -> field_tag , p )
EXPR	725:13	725:13	22	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , ( uint16 ) o -> field_tag , p )
UNARY_EXPR	725:13	725:14	23	! TIFFWriteDirectoryTagLong ( tif , & ndir , dir , ( uint16 ) o -> field_tag , p )
UNARY_OPERATOR	725:13	725:13	24	!
LEAF_NODE	725:13	725:13	25	!
FUNCTION_CALL	725:14	725:76	24	TIFFWriteDirectoryTagLong ( tif , & ndir , dir , ( uint16 ) o -> field_tag , p )
CALLEE	725:14	725:14	25	TIFFWriteDirectoryTagLong
LEAF_NODE	725:14	725:14	26	TIFFWriteDirectoryTagLong
LEAF_NODE	725:39	725:39	25	(
ARGUMENT	725:40	725:40	25	tif
FIELD	725:40	725:40	26	tif
LEAF_NODE	725:40	725:40	27	tif
LEAF_NODE	725:43	725:43	25	,
ARGUMENT	725:44	725:44	25	& ndir
UNARY_EXPR	725:44	725:45	26	& ndir
UNARY_OPERATOR	725:44	725:44	27	&
LEAF_NODE	725:44	725:44	28	&
FIELD	725:45	725:45	27	ndir
LEAF_NODE	725:45	725:45	28	ndir
LEAF_NODE	725:49	725:49	25	,
ARGUMENT	725:50	725:50	25	dir
FIELD	725:50	725:50	26	dir
LEAF_NODE	725:50	725:50	27	dir
LEAF_NODE	725:53	725:53	25	,
ARGUMENT	725:54	725:62	25	( uint16 ) o -> field_tag
LEAF_NODE	725:54	725:54	26	(
TYPE_NAME	725:55	725:55	26	uint16
LEAF_NODE	725:55	725:55	27	uint16
LEAF_NODE	725:61	725:61	26	)
FIELD	725:62	725:65	26	o -> field_tag
LEAF_NODE	725:62	725:62	27	o
LEAF_NODE	725:63	725:63	27	->
LEAF_NODE	725:65	725:65	27	field_tag
LEAF_NODE	725:74	725:74	25	,
ARGUMENT	725:75	725:75	25	p
FIELD	725:75	725:75	26	p
LEAF_NODE	725:75	725:75	27	p
LEAF_NODE	725:76	725:76	25	)
LEAF_NODE	725:77	725:77	21	)
STATEMENTS	726:10	726:10	21	
JUMP_STATEMENT	726:10	726:18	22	goto bad ;
KEYWORD	726:10	726:10	23	goto
LEAF_NODE	726:10	726:10	24	goto
DESTINATION	726:15	726:15	23	bad
LEAF_NODE	726:15	726:15	24	bad
LEAF_NODE	726:18	726:18	23	;
LEAF_NODE	727:8	727:8	19	}
JUMP_STATEMENT	728:8	728:13	19	break DESTINATION ;
KEYWORD	728:8	728:8	20	break
LEAF_NODE	728:8	728:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	728:13	728:13	20	;
LABEL	729:7	729:33	19	case TIFF_SETGET_C32_UINT8 :
LEAF_NODE	729:7	729:7	20	case
LEAF_NODE	729:12	729:12	20	TIFF_SETGET_C32_UINT8
LEAF_NODE	729:33	729:33	20	:
LEAF_NODE	730:8	730:8	19	{
STATEMENTS	731:9	737:9	19	
SIMPLE_DECL	731:9	731:18	20	uint32 pa ;
VAR_DECL	731:9	731:16	21	uint32 pa
TYPE	731:9	731:9	22	uint32
TYPE_NAME	731:9	731:9	23	uint32
LEAF_NODE	731:9	731:9	24	uint32
NAME	731:16	731:16	22	pa
LEAF_NODE	731:16	731:16	23	pa
LEAF_NODE	731:18	731:18	21	;
SIMPLE_DECL	732:9	732:17	20	void * pb ;
VAR_DECL	732:9	732:15	21	void * pb
TYPE	732:9	732:13	22	void *
TYPE_NAME	732:9	732:9	23	void
LEAF_NODE	732:9	732:9	24	void
POINTER	732:13	732:13	23	*
LEAF_NODE	732:13	732:13	24	*
NAME	732:15	732:15	22	pb
LEAF_NODE	732:15	732:15	23	pb
LEAF_NODE	732:17	732:17	21	;
EXPR_STATEMENT	733:9	733:46	20	assert ( o -> field_type == TIFF_UNDEFINED ) ;
EXPR	733:9	733:9	21	assert ( o -> field_type == TIFF_UNDEFINED )
FUNCTION_CALL	733:9	733:45	22	assert ( o -> field_type == TIFF_UNDEFINED )
CALLEE	733:9	733:9	23	assert
LEAF_NODE	733:9	733:9	24	assert
LEAF_NODE	733:15	733:15	23	(
ARGUMENT	733:16	733:31	23	o -> field_type == TIFF_UNDEFINED
FIELD	733:16	733:19	24	o -> field_type
LEAF_NODE	733:16	733:16	25	o
LEAF_NODE	733:17	733:17	25	->
LEAF_NODE	733:19	733:19	25	field_type
EQ_OPERATOR	733:29	733:29	24	==
LEAF_NODE	733:29	733:29	25	==
FIELD	733:31	733:31	24	TIFF_UNDEFINED
LEAF_NODE	733:31	733:31	25	TIFF_UNDEFINED
LEAF_NODE	733:45	733:45	23	)
LEAF_NODE	733:46	733:46	21	;
EXPR_STATEMENT	734:9	734:51	20	assert ( o -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	734:9	734:9	21	assert ( o -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	734:9	734:50	22	assert ( o -> field_readcount == TIFF_VARIABLE2 )
CALLEE	734:9	734:9	23	assert
LEAF_NODE	734:9	734:9	24	assert
LEAF_NODE	734:15	734:15	23	(
ARGUMENT	734:16	734:36	23	o -> field_readcount == TIFF_VARIABLE2
FIELD	734:16	734:19	24	o -> field_readcount
LEAF_NODE	734:16	734:16	25	o
LEAF_NODE	734:17	734:17	25	->
LEAF_NODE	734:19	734:19	25	field_readcount
EQ_OPERATOR	734:34	734:34	24	==
LEAF_NODE	734:34	734:34	25	==
FIELD	734:36	734:36	24	TIFF_VARIABLE2
LEAF_NODE	734:36	734:36	25	TIFF_VARIABLE2
LEAF_NODE	734:50	734:50	23	)
LEAF_NODE	734:51	734:51	21	;
EXPR_STATEMENT	735:9	735:38	20	assert ( o -> field_passcount == 1 ) ;
EXPR	735:9	735:9	21	assert ( o -> field_passcount == 1 )
FUNCTION_CALL	735:9	735:37	22	assert ( o -> field_passcount == 1 )
CALLEE	735:9	735:9	23	assert
LEAF_NODE	735:9	735:9	24	assert
LEAF_NODE	735:15	735:15	23	(
ARGUMENT	735:16	735:36	23	o -> field_passcount == 1
FIELD	735:16	735:19	24	o -> field_passcount
LEAF_NODE	735:16	735:16	25	o
LEAF_NODE	735:17	735:17	25	->
LEAF_NODE	735:19	735:19	25	field_passcount
EQ_OPERATOR	735:34	735:34	24	==
LEAF_NODE	735:34	735:34	25	==
FIELD	735:36	735:36	24	1
LEAF_NODE	735:36	735:36	25	1
LEAF_NODE	735:37	735:37	23	)
LEAF_NODE	735:38	735:38	21	;
EXPR_STATEMENT	736:9	736:47	20	TIFFGetField ( tif , o -> field_tag , & pa , & pb ) ;
EXPR	736:9	736:9	21	TIFFGetField ( tif , o -> field_tag , & pa , & pb )
FUNCTION_CALL	736:9	736:46	22	TIFFGetField ( tif , o -> field_tag , & pa , & pb )
CALLEE	736:9	736:9	23	TIFFGetField
LEAF_NODE	736:9	736:9	24	TIFFGetField
LEAF_NODE	736:21	736:21	23	(
ARGUMENT	736:22	736:22	23	tif
FIELD	736:22	736:22	24	tif
LEAF_NODE	736:22	736:22	25	tif
LEAF_NODE	736:25	736:25	23	,
ARGUMENT	736:26	736:26	23	o -> field_tag
FIELD	736:26	736:29	24	o -> field_tag
LEAF_NODE	736:26	736:26	25	o
LEAF_NODE	736:27	736:27	25	->
LEAF_NODE	736:29	736:29	25	field_tag
LEAF_NODE	736:38	736:38	23	,
ARGUMENT	736:39	736:39	23	& pa
UNARY_EXPR	736:39	736:40	24	& pa
UNARY_OPERATOR	736:39	736:39	25	&
LEAF_NODE	736:39	736:39	26	&
FIELD	736:40	736:40	25	pa
LEAF_NODE	736:40	736:40	26	pa
LEAF_NODE	736:42	736:42	23	,
ARGUMENT	736:43	736:43	23	& pb
UNARY_EXPR	736:43	736:44	24	& pb
UNARY_OPERATOR	736:43	736:43	25	&
LEAF_NODE	736:43	736:43	26	&
FIELD	736:44	736:44	25	pb
LEAF_NODE	736:44	736:44	26	pb
LEAF_NODE	736:46	736:46	23	)
LEAF_NODE	736:47	736:47	21	;
SELECTION	737:9	738:10	20	
KEYWORD	737:9	737:9	21	if
LEAF_NODE	737:9	737:9	22	if
LEAF_NODE	737:12	737:12	21	(
CONDITION	737:13	737:13	21	! TIFFWriteDirectoryTagUndefinedArray ( tif , & ndir , dir , ( uint16 ) o -> field_tag , pa , pb )
EXPR	737:13	737:13	22	! TIFFWriteDirectoryTagUndefinedArray ( tif , & ndir , dir , ( uint16 ) o -> field_tag , pa , pb )
UNARY_EXPR	737:13	737:14	23	! TIFFWriteDirectoryTagUndefinedArray ( tif , & ndir , dir , ( uint16 ) o -> field_tag , pa , pb )
UNARY_OPERATOR	737:13	737:13	24	!
LEAF_NODE	737:13	737:13	25	!
FUNCTION_CALL	737:14	737:90	24	TIFFWriteDirectoryTagUndefinedArray ( tif , & ndir , dir , ( uint16 ) o -> field_tag , pa , pb )
CALLEE	737:14	737:14	25	TIFFWriteDirectoryTagUndefinedArray
LEAF_NODE	737:14	737:14	26	TIFFWriteDirectoryTagUndefinedArray
LEAF_NODE	737:49	737:49	25	(
ARGUMENT	737:50	737:50	25	tif
FIELD	737:50	737:50	26	tif
LEAF_NODE	737:50	737:50	27	tif
LEAF_NODE	737:53	737:53	25	,
ARGUMENT	737:54	737:54	25	& ndir
UNARY_EXPR	737:54	737:55	26	& ndir
UNARY_OPERATOR	737:54	737:54	27	&
LEAF_NODE	737:54	737:54	28	&
FIELD	737:55	737:55	27	ndir
LEAF_NODE	737:55	737:55	28	ndir
LEAF_NODE	737:59	737:59	25	,
ARGUMENT	737:60	737:60	25	dir
FIELD	737:60	737:60	26	dir
LEAF_NODE	737:60	737:60	27	dir
LEAF_NODE	737:63	737:63	25	,
ARGUMENT	737:64	737:72	25	( uint16 ) o -> field_tag
LEAF_NODE	737:64	737:64	26	(
TYPE_NAME	737:65	737:65	26	uint16
LEAF_NODE	737:65	737:65	27	uint16
LEAF_NODE	737:71	737:71	26	)
FIELD	737:72	737:75	26	o -> field_tag
LEAF_NODE	737:72	737:72	27	o
LEAF_NODE	737:73	737:73	27	->
LEAF_NODE	737:75	737:75	27	field_tag
LEAF_NODE	737:84	737:84	25	,
ARGUMENT	737:85	737:85	25	pa
FIELD	737:85	737:85	26	pa
LEAF_NODE	737:85	737:85	27	pa
LEAF_NODE	737:87	737:87	25	,
ARGUMENT	737:88	737:88	25	pb
FIELD	737:88	737:88	26	pb
LEAF_NODE	737:88	737:88	27	pb
LEAF_NODE	737:90	737:90	25	)
LEAF_NODE	737:91	737:91	21	)
STATEMENTS	738:10	738:10	21	
JUMP_STATEMENT	738:10	738:18	22	goto bad ;
KEYWORD	738:10	738:10	23	goto
LEAF_NODE	738:10	738:10	24	goto
DESTINATION	738:15	738:15	23	bad
LEAF_NODE	738:15	738:15	24	bad
LEAF_NODE	738:18	738:18	23	;
LEAF_NODE	739:8	739:8	19	}
JUMP_STATEMENT	740:8	740:13	19	break DESTINATION ;
KEYWORD	740:8	740:8	20	break
LEAF_NODE	740:8	740:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	740:13	740:13	20	;
LABEL	741:7	741:14	19	default :
LEAF_NODE	741:7	741:7	20	default
LEAF_NODE	741:14	741:14	20	:
EXPR_STATEMENT	742:8	745:118	19	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot write tag %d (%s)" , TIFFFieldTag ( o ) , o -> field_name ? o -> field_name : "unknown" ) ;
EXPR	742:8	742:8	20	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot write tag %d (%s)" , TIFFFieldTag ( o ) , o -> field_name ? o -> field_name : "unknown" )
FUNCTION_CALL	742:8	745:117	21	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot write tag %d (%s)" , TIFFFieldTag ( o ) , o -> field_name ? o -> field_name : "unknown" )
CALLEE	742:8	742:8	22	TIFFErrorExt
LEAF_NODE	742:8	742:8	23	TIFFErrorExt
LEAF_NODE	742:20	742:20	22	(
ARGUMENT	742:21	742:21	22	tif -> tif_clientdata
FIELD	742:21	742:26	23	tif -> tif_clientdata
LEAF_NODE	742:21	742:21	24	tif
LEAF_NODE	742:24	742:24	24	->
LEAF_NODE	742:26	742:26	24	tif_clientdata
LEAF_NODE	742:40	742:40	22	,
ARGUMENT	742:41	742:41	22	module
FIELD	742:41	742:41	23	module
LEAF_NODE	742:41	742:41	24	module
LEAF_NODE	742:47	742:47	22	,
ARGUMENT	743:20	743:20	22	"Cannot write tag %d (%s)"
FIELD	743:20	743:20	23	"Cannot write tag %d (%s)"
LEAF_NODE	743:20	743:20	24	"Cannot write tag %d (%s)"
LEAF_NODE	743:46	743:46	22	,
ARGUMENT	744:20	744:20	22	TIFFFieldTag ( o )
FUNCTION_CALL	744:20	744:34	23	TIFFFieldTag ( o )
CALLEE	744:20	744:20	24	TIFFFieldTag
LEAF_NODE	744:20	744:20	25	TIFFFieldTag
LEAF_NODE	744:32	744:32	24	(
ARGUMENT	744:33	744:33	24	o
FIELD	744:33	744:33	25	o
LEAF_NODE	744:33	744:33	26	o
LEAF_NODE	744:34	744:34	24	)
LEAF_NODE	744:35	744:35	22	,
ARGUMENT	745:76	745:76	22	o -> field_name ? o -> field_name : "unknown"
COND_EXPR	745:76	745:108	23	o -> field_name ? o -> field_name : "unknown"
CONDITION	745:76	745:76	24	o -> field_name
FIELD	745:76	745:79	25	o -> field_name
LEAF_NODE	745:76	745:76	26	o
LEAF_NODE	745:77	745:77	26	->
LEAF_NODE	745:79	745:79	26	field_name
LEAF_NODE	745:90	745:90	24	?
EXPR	745:92	745:92	24	o -> field_name
FIELD	745:92	745:95	25	o -> field_name
LEAF_NODE	745:92	745:92	26	o
LEAF_NODE	745:93	745:93	26	->
LEAF_NODE	745:95	745:95	26	field_name
LEAF_NODE	745:106	745:106	24	:
FIELD	745:108	745:108	24	"unknown"
LEAF_NODE	745:108	745:108	25	"unknown"
LEAF_NODE	745:117	745:117	22	)
LEAF_NODE	745:118	745:118	20	;
JUMP_STATEMENT	746:8	746:16	19	goto bad ;
KEYWORD	746:8	746:8	20	goto
LEAF_NODE	746:8	746:8	21	goto
DESTINATION	746:13	746:13	20	bad
LEAF_NODE	746:13	746:13	21	bad
LEAF_NODE	746:16	746:16	20	;
LEAF_NODE	747:6	747:6	18	}
LEAF_NODE	748:5	748:5	15	}
LEAF_NODE	749:4	749:4	12	}
LEAF_NODE	750:3	750:3	9	}
LEAF_NODE	751:2	751:2	8	}
ITERATION	752:2	753:2	6	
KEYWORD	752:2	752:2	7	for
LEAF_NODE	752:2	752:2	8	for
LEAF_NODE	752:6	752:6	7	(
FOR_INIT	752:7	752:10	7	m = 0 ;
EXPR	752:7	752:7	8	m = 0
ASSIGN	752:7	752:9	9	m = 0
LVAL	752:7	752:7	10	m
FIELD	752:7	752:7	11	m
LEAF_NODE	752:7	752:7	12	m
ASSIGN_OP	752:8	752:8	10	=
LEAF_NODE	752:8	752:8	11	=
RVAL	752:9	752:9	10	0
FIELD	752:9	752:9	11	0
LEAF_NODE	752:9	752:9	12	0
LEAF_NODE	752:10	752:10	8	;
CONDITION	752:12	752:12	7	m < ( uint32 ) ( tif -> tif_dir . td_customValueCount )
EXPR	752:12	752:55	8	m < ( uint32 ) ( tif -> tif_dir . td_customValueCount )
FIELD	752:12	752:12	9	m
LEAF_NODE	752:12	752:12	10	m
REL_OPERATOR	752:13	752:13	9	<
LEAF_NODE	752:13	752:13	10	<
LEAF_NODE	752:14	752:14	9	(
TYPE_NAME	752:15	752:15	9	uint32
LEAF_NODE	752:15	752:15	10	uint32
LEAF_NODE	752:21	752:21	9	)
LEAF_NODE	752:22	752:22	9	(
FIELD	752:23	752:36	9	tif -> tif_dir . td_customValueCount
LEAF_NODE	752:23	752:23	10	tif
LEAF_NODE	752:26	752:26	10	->
LEAF_NODE	752:28	752:28	10	tif_dir
LEAF_NODE	752:35	752:35	10	.
LEAF_NODE	752:36	752:36	10	td_customValueCount
LEAF_NODE	752:55	752:55	9	)
LEAF_NODE	752:56	752:56	7	;
FOR_EXPR	752:58	752:58	7	m ++
EXPR	752:58	752:58	8	m ++
FIELD	752:58	752:59	9	m ++
LEAF_NODE	752:58	752:58	10	m
LEAF_NODE	752:59	752:59	10	++
LEAF_NODE	752:61	752:61	7	)
STATEMENTS	753:2	826:2	7	
LEAF_NODE	753:2	753:2	8	{
STATEMENTS	754:24	756:3	8	
SIMPLE_DECL	754:24	754:92	9	uint16 tag ; tag = ( uint16 ) tif -> tif_dir . td_customValues [ m ] . info -> field_tag ;
VAR_DECL	754:24	754:31	10	uint16 tag ; tag = ( uint16 ) tif -> tif_dir . td_customValues [ m ] . info -> field_tag
TYPE	754:24	754:24	11	uint16
TYPE_NAME	754:24	754:24	12	uint16
LEAF_NODE	754:24	754:24	13	uint16
NAME	754:31	754:31	11	tag
LEAF_NODE	754:31	754:31	12	tag
LEAF_NODE	0:0	0:0	11	;
INIT	754:31	754:31	11	tag = ( uint16 ) tif -> tif_dir . td_customValues [ m ] . info -> field_tag
ASSIGN	754:31	754:37	12	tag = ( uint16 ) tif -> tif_dir . td_customValues [ m ] . info -> field_tag
LVAL	754:31	754:31	13	tag
NAME	754:31	754:31	14	tag
LEAF_NODE	754:31	754:31	15	tag
ASSIGN_OP	754:35	754:35	13	=
LEAF_NODE	754:35	754:35	14	=
RVAL	754:37	754:45	13	( uint16 ) tif -> tif_dir . td_customValues [ m ] . info -> field_tag
LEAF_NODE	754:37	754:37	14	(
TYPE_NAME	754:38	754:38	14	uint16
LEAF_NODE	754:38	754:38	15	uint16
LEAF_NODE	754:44	754:44	14	)
FIELD	754:45	754:83	14	tif -> tif_dir . td_customValues [ m ] . info -> field_tag
LEAF_NODE	754:45	754:45	15	tif
LEAF_NODE	754:48	754:48	15	->
LEAF_NODE	754:50	754:50	15	tif_dir
LEAF_NODE	754:57	754:57	15	.
LEAF_NODE	754:58	754:58	15	td_customValues
LEAF_NODE	754:73	754:73	15	[
EXPR	754:74	754:74	15	m
FIELD	754:74	754:74	16	m
LEAF_NODE	754:74	754:74	17	m
LEAF_NODE	754:75	754:75	15	]
LEAF_NODE	754:76	754:76	15	.
LEAF_NODE	754:77	754:77	15	info
LEAF_NODE	754:81	754:81	15	->
LEAF_NODE	754:83	754:83	15	field_tag
LEAF_NODE	754:92	754:92	10	;
SIMPLE_DECL	755:24	755:76	9	uint32 count ; count = tif -> tif_dir . td_customValues [ m ] . count ;
VAR_DECL	755:24	755:31	10	uint32 count ; count = tif -> tif_dir . td_customValues [ m ] . count
TYPE	755:24	755:24	11	uint32
TYPE_NAME	755:24	755:24	12	uint32
LEAF_NODE	755:24	755:24	13	uint32
NAME	755:31	755:31	11	count
LEAF_NODE	755:31	755:31	12	count
LEAF_NODE	0:0	0:0	11	;
INIT	755:31	755:31	11	count = tif -> tif_dir . td_customValues [ m ] . count
ASSIGN	755:31	755:39	12	count = tif -> tif_dir . td_customValues [ m ] . count
LVAL	755:31	755:31	13	count
NAME	755:31	755:31	14	count
LEAF_NODE	755:31	755:31	15	count
ASSIGN_OP	755:37	755:37	13	=
LEAF_NODE	755:37	755:37	14	=
RVAL	755:39	755:39	13	tif -> tif_dir . td_customValues [ m ] . count
FIELD	755:39	755:71	14	tif -> tif_dir . td_customValues [ m ] . count
LEAF_NODE	755:39	755:39	15	tif
LEAF_NODE	755:42	755:42	15	->
LEAF_NODE	755:44	755:44	15	tif_dir
LEAF_NODE	755:51	755:51	15	.
LEAF_NODE	755:52	755:52	15	td_customValues
LEAF_NODE	755:67	755:67	15	[
EXPR	755:68	755:68	15	m
FIELD	755:68	755:68	16	m
LEAF_NODE	755:68	755:68	17	m
LEAF_NODE	755:69	755:69	15	]
LEAF_NODE	755:70	755:70	15	.
LEAF_NODE	755:71	755:71	15	count
LEAF_NODE	755:76	755:76	10	;
SELECTION	756:3	757:3	9	
KEYWORD	756:3	756:3	10	switch
LEAF_NODE	756:3	756:3	11	switch
LEAF_NODE	756:10	756:10	10	(
CONDITION	756:11	756:11	10	tif -> tif_dir . td_customValues [ m ] . info -> field_type
EXPR	756:11	756:11	11	tif -> tif_dir . td_customValues [ m ] . info -> field_type
FIELD	756:11	756:49	12	tif -> tif_dir . td_customValues [ m ] . info -> field_type
LEAF_NODE	756:11	756:11	13	tif
LEAF_NODE	756:14	756:14	13	->
LEAF_NODE	756:16	756:16	13	tif_dir
LEAF_NODE	756:23	756:23	13	.
LEAF_NODE	756:24	756:24	13	td_customValues
LEAF_NODE	756:39	756:39	13	[
EXPR	756:40	756:40	13	m
FIELD	756:40	756:40	14	m
LEAF_NODE	756:40	756:40	15	m
LEAF_NODE	756:41	756:41	13	]
LEAF_NODE	756:42	756:42	13	.
LEAF_NODE	756:43	756:43	13	info
LEAF_NODE	756:47	756:47	13	->
LEAF_NODE	756:49	756:49	13	field_type
LEAF_NODE	756:59	756:59	10	)
STATEMENTS	757:3	825:3	10	
LEAF_NODE	757:3	757:3	11	{
STATEMENTS	758:4	824:5	11	
LABEL	758:4	758:19	12	case TIFF_ASCII :
LEAF_NODE	758:4	758:4	13	case
LEAF_NODE	758:9	758:9	13	TIFF_ASCII
LEAF_NODE	758:19	758:19	13	:
SELECTION	759:5	760:6	12	
KEYWORD	759:5	759:5	13	if
LEAF_NODE	759:5	759:5	14	if
LEAF_NODE	759:8	759:8	13	(
CONDITION	759:9	759:9	13	! TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	759:9	759:9	14	! TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	759:9	759:10	15	! TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	759:9	759:9	16	!
LEAF_NODE	759:9	759:9	17	!
FUNCTION_CALL	759:10	759:98	16	TIFFWriteDirectoryTagAscii ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	759:10	759:10	17	TIFFWriteDirectoryTagAscii
LEAF_NODE	759:10	759:10	18	TIFFWriteDirectoryTagAscii
LEAF_NODE	759:36	759:36	17	(
ARGUMENT	759:37	759:37	17	tif
FIELD	759:37	759:37	18	tif
LEAF_NODE	759:37	759:37	19	tif
LEAF_NODE	759:40	759:40	17	,
ARGUMENT	759:41	759:41	17	& ndir
UNARY_EXPR	759:41	759:42	18	& ndir
UNARY_OPERATOR	759:41	759:41	19	&
LEAF_NODE	759:41	759:41	20	&
FIELD	759:42	759:42	19	ndir
LEAF_NODE	759:42	759:42	20	ndir
LEAF_NODE	759:46	759:46	17	,
ARGUMENT	759:47	759:47	17	dir
FIELD	759:47	759:47	18	dir
LEAF_NODE	759:47	759:47	19	dir
LEAF_NODE	759:50	759:50	17	,
ARGUMENT	759:51	759:51	17	tag
FIELD	759:51	759:51	18	tag
LEAF_NODE	759:51	759:51	19	tag
LEAF_NODE	759:54	759:54	17	,
ARGUMENT	759:55	759:55	17	count
FIELD	759:55	759:55	18	count
LEAF_NODE	759:55	759:55	19	count
LEAF_NODE	759:60	759:60	17	,
ARGUMENT	759:61	759:61	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	759:61	759:93	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	759:61	759:61	19	tif
LEAF_NODE	759:64	759:64	19	->
LEAF_NODE	759:66	759:66	19	tif_dir
LEAF_NODE	759:73	759:73	19	.
LEAF_NODE	759:74	759:74	19	td_customValues
LEAF_NODE	759:89	759:89	19	[
EXPR	759:90	759:90	19	m
FIELD	759:90	759:90	20	m
LEAF_NODE	759:90	759:90	21	m
LEAF_NODE	759:91	759:91	19	]
LEAF_NODE	759:92	759:92	19	.
LEAF_NODE	759:93	759:93	19	value
LEAF_NODE	759:98	759:98	17	)
LEAF_NODE	759:99	759:99	13	)
STATEMENTS	760:6	760:6	13	
JUMP_STATEMENT	760:6	760:14	14	goto bad ;
KEYWORD	760:6	760:6	15	goto
LEAF_NODE	760:6	760:6	16	goto
DESTINATION	760:11	760:11	15	bad
LEAF_NODE	760:11	760:11	16	bad
LEAF_NODE	760:14	760:14	15	;
JUMP_STATEMENT	761:5	761:10	12	break DESTINATION ;
KEYWORD	761:5	761:5	13	break
LEAF_NODE	761:5	761:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	761:10	761:10	13	;
LABEL	762:4	762:23	12	case TIFF_UNDEFINED :
LEAF_NODE	762:4	762:4	13	case
LEAF_NODE	762:9	762:9	13	TIFF_UNDEFINED
LEAF_NODE	762:23	762:23	13	:
SELECTION	763:5	764:6	12	
KEYWORD	763:5	763:5	13	if
LEAF_NODE	763:5	763:5	14	if
LEAF_NODE	763:8	763:8	13	(
CONDITION	763:9	763:9	13	! TIFFWriteDirectoryTagUndefinedArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	763:9	763:9	14	! TIFFWriteDirectoryTagUndefinedArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	763:9	763:10	15	! TIFFWriteDirectoryTagUndefinedArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	763:9	763:9	16	!
LEAF_NODE	763:9	763:9	17	!
FUNCTION_CALL	763:10	763:107	16	TIFFWriteDirectoryTagUndefinedArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	763:10	763:10	17	TIFFWriteDirectoryTagUndefinedArray
LEAF_NODE	763:10	763:10	18	TIFFWriteDirectoryTagUndefinedArray
LEAF_NODE	763:45	763:45	17	(
ARGUMENT	763:46	763:46	17	tif
FIELD	763:46	763:46	18	tif
LEAF_NODE	763:46	763:46	19	tif
LEAF_NODE	763:49	763:49	17	,
ARGUMENT	763:50	763:50	17	& ndir
UNARY_EXPR	763:50	763:51	18	& ndir
UNARY_OPERATOR	763:50	763:50	19	&
LEAF_NODE	763:50	763:50	20	&
FIELD	763:51	763:51	19	ndir
LEAF_NODE	763:51	763:51	20	ndir
LEAF_NODE	763:55	763:55	17	,
ARGUMENT	763:56	763:56	17	dir
FIELD	763:56	763:56	18	dir
LEAF_NODE	763:56	763:56	19	dir
LEAF_NODE	763:59	763:59	17	,
ARGUMENT	763:60	763:60	17	tag
FIELD	763:60	763:60	18	tag
LEAF_NODE	763:60	763:60	19	tag
LEAF_NODE	763:63	763:63	17	,
ARGUMENT	763:64	763:64	17	count
FIELD	763:64	763:64	18	count
LEAF_NODE	763:64	763:64	19	count
LEAF_NODE	763:69	763:69	17	,
ARGUMENT	763:70	763:70	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	763:70	763:102	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	763:70	763:70	19	tif
LEAF_NODE	763:73	763:73	19	->
LEAF_NODE	763:75	763:75	19	tif_dir
LEAF_NODE	763:82	763:82	19	.
LEAF_NODE	763:83	763:83	19	td_customValues
LEAF_NODE	763:98	763:98	19	[
EXPR	763:99	763:99	19	m
FIELD	763:99	763:99	20	m
LEAF_NODE	763:99	763:99	21	m
LEAF_NODE	763:100	763:100	19	]
LEAF_NODE	763:101	763:101	19	.
LEAF_NODE	763:102	763:102	19	value
LEAF_NODE	763:107	763:107	17	)
LEAF_NODE	763:108	763:108	13	)
STATEMENTS	764:6	764:6	13	
JUMP_STATEMENT	764:6	764:14	14	goto bad ;
KEYWORD	764:6	764:6	15	goto
LEAF_NODE	764:6	764:6	16	goto
DESTINATION	764:11	764:11	15	bad
LEAF_NODE	764:11	764:11	16	bad
LEAF_NODE	764:14	764:14	15	;
JUMP_STATEMENT	765:5	765:10	12	break DESTINATION ;
KEYWORD	765:5	765:5	13	break
LEAF_NODE	765:5	765:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	765:10	765:10	13	;
LABEL	766:4	766:18	12	case TIFF_BYTE :
LEAF_NODE	766:4	766:4	13	case
LEAF_NODE	766:9	766:9	13	TIFF_BYTE
LEAF_NODE	766:18	766:18	13	:
SELECTION	767:5	768:6	12	
KEYWORD	767:5	767:5	13	if
LEAF_NODE	767:5	767:5	14	if
LEAF_NODE	767:8	767:8	13	(
CONDITION	767:9	767:9	13	! TIFFWriteDirectoryTagByteArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	767:9	767:9	14	! TIFFWriteDirectoryTagByteArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	767:9	767:10	15	! TIFFWriteDirectoryTagByteArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	767:9	767:9	16	!
LEAF_NODE	767:9	767:9	17	!
FUNCTION_CALL	767:10	767:102	16	TIFFWriteDirectoryTagByteArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	767:10	767:10	17	TIFFWriteDirectoryTagByteArray
LEAF_NODE	767:10	767:10	18	TIFFWriteDirectoryTagByteArray
LEAF_NODE	767:40	767:40	17	(
ARGUMENT	767:41	767:41	17	tif
FIELD	767:41	767:41	18	tif
LEAF_NODE	767:41	767:41	19	tif
LEAF_NODE	767:44	767:44	17	,
ARGUMENT	767:45	767:45	17	& ndir
UNARY_EXPR	767:45	767:46	18	& ndir
UNARY_OPERATOR	767:45	767:45	19	&
LEAF_NODE	767:45	767:45	20	&
FIELD	767:46	767:46	19	ndir
LEAF_NODE	767:46	767:46	20	ndir
LEAF_NODE	767:50	767:50	17	,
ARGUMENT	767:51	767:51	17	dir
FIELD	767:51	767:51	18	dir
LEAF_NODE	767:51	767:51	19	dir
LEAF_NODE	767:54	767:54	17	,
ARGUMENT	767:55	767:55	17	tag
FIELD	767:55	767:55	18	tag
LEAF_NODE	767:55	767:55	19	tag
LEAF_NODE	767:58	767:58	17	,
ARGUMENT	767:59	767:59	17	count
FIELD	767:59	767:59	18	count
LEAF_NODE	767:59	767:59	19	count
LEAF_NODE	767:64	767:64	17	,
ARGUMENT	767:65	767:65	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	767:65	767:97	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	767:65	767:65	19	tif
LEAF_NODE	767:68	767:68	19	->
LEAF_NODE	767:70	767:70	19	tif_dir
LEAF_NODE	767:77	767:77	19	.
LEAF_NODE	767:78	767:78	19	td_customValues
LEAF_NODE	767:93	767:93	19	[
EXPR	767:94	767:94	19	m
FIELD	767:94	767:94	20	m
LEAF_NODE	767:94	767:94	21	m
LEAF_NODE	767:95	767:95	19	]
LEAF_NODE	767:96	767:96	19	.
LEAF_NODE	767:97	767:97	19	value
LEAF_NODE	767:102	767:102	17	)
LEAF_NODE	767:103	767:103	13	)
STATEMENTS	768:6	768:6	13	
JUMP_STATEMENT	768:6	768:14	14	goto bad ;
KEYWORD	768:6	768:6	15	goto
LEAF_NODE	768:6	768:6	16	goto
DESTINATION	768:11	768:11	15	bad
LEAF_NODE	768:11	768:11	16	bad
LEAF_NODE	768:14	768:14	15	;
JUMP_STATEMENT	769:5	769:10	12	break DESTINATION ;
KEYWORD	769:5	769:5	13	break
LEAF_NODE	769:5	769:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	769:10	769:10	13	;
LABEL	770:4	770:19	12	case TIFF_SBYTE :
LEAF_NODE	770:4	770:4	13	case
LEAF_NODE	770:9	770:9	13	TIFF_SBYTE
LEAF_NODE	770:19	770:19	13	:
SELECTION	771:5	772:6	12	
KEYWORD	771:5	771:5	13	if
LEAF_NODE	771:5	771:5	14	if
LEAF_NODE	771:8	771:8	13	(
CONDITION	771:9	771:9	13	! TIFFWriteDirectoryTagSbyteArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	771:9	771:9	14	! TIFFWriteDirectoryTagSbyteArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	771:9	771:10	15	! TIFFWriteDirectoryTagSbyteArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	771:9	771:9	16	!
LEAF_NODE	771:9	771:9	17	!
FUNCTION_CALL	771:10	771:103	16	TIFFWriteDirectoryTagSbyteArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	771:10	771:10	17	TIFFWriteDirectoryTagSbyteArray
LEAF_NODE	771:10	771:10	18	TIFFWriteDirectoryTagSbyteArray
LEAF_NODE	771:41	771:41	17	(
ARGUMENT	771:42	771:42	17	tif
FIELD	771:42	771:42	18	tif
LEAF_NODE	771:42	771:42	19	tif
LEAF_NODE	771:45	771:45	17	,
ARGUMENT	771:46	771:46	17	& ndir
UNARY_EXPR	771:46	771:47	18	& ndir
UNARY_OPERATOR	771:46	771:46	19	&
LEAF_NODE	771:46	771:46	20	&
FIELD	771:47	771:47	19	ndir
LEAF_NODE	771:47	771:47	20	ndir
LEAF_NODE	771:51	771:51	17	,
ARGUMENT	771:52	771:52	17	dir
FIELD	771:52	771:52	18	dir
LEAF_NODE	771:52	771:52	19	dir
LEAF_NODE	771:55	771:55	17	,
ARGUMENT	771:56	771:56	17	tag
FIELD	771:56	771:56	18	tag
LEAF_NODE	771:56	771:56	19	tag
LEAF_NODE	771:59	771:59	17	,
ARGUMENT	771:60	771:60	17	count
FIELD	771:60	771:60	18	count
LEAF_NODE	771:60	771:60	19	count
LEAF_NODE	771:65	771:65	17	,
ARGUMENT	771:66	771:66	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	771:66	771:98	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	771:66	771:66	19	tif
LEAF_NODE	771:69	771:69	19	->
LEAF_NODE	771:71	771:71	19	tif_dir
LEAF_NODE	771:78	771:78	19	.
LEAF_NODE	771:79	771:79	19	td_customValues
LEAF_NODE	771:94	771:94	19	[
EXPR	771:95	771:95	19	m
FIELD	771:95	771:95	20	m
LEAF_NODE	771:95	771:95	21	m
LEAF_NODE	771:96	771:96	19	]
LEAF_NODE	771:97	771:97	19	.
LEAF_NODE	771:98	771:98	19	value
LEAF_NODE	771:103	771:103	17	)
LEAF_NODE	771:104	771:104	13	)
STATEMENTS	772:6	772:6	13	
JUMP_STATEMENT	772:6	772:14	14	goto bad ;
KEYWORD	772:6	772:6	15	goto
LEAF_NODE	772:6	772:6	16	goto
DESTINATION	772:11	772:11	15	bad
LEAF_NODE	772:11	772:11	16	bad
LEAF_NODE	772:14	772:14	15	;
JUMP_STATEMENT	773:5	773:10	12	break DESTINATION ;
KEYWORD	773:5	773:5	13	break
LEAF_NODE	773:5	773:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	773:10	773:10	13	;
LABEL	774:4	774:19	12	case TIFF_SHORT :
LEAF_NODE	774:4	774:4	13	case
LEAF_NODE	774:9	774:9	13	TIFF_SHORT
LEAF_NODE	774:19	774:19	13	:
SELECTION	775:5	776:6	12	
KEYWORD	775:5	775:5	13	if
LEAF_NODE	775:5	775:5	14	if
LEAF_NODE	775:8	775:8	13	(
CONDITION	775:9	775:9	13	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	775:9	775:9	14	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	775:9	775:10	15	! TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	775:9	775:9	16	!
LEAF_NODE	775:9	775:9	17	!
FUNCTION_CALL	775:10	775:103	16	TIFFWriteDirectoryTagShortArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	775:10	775:10	17	TIFFWriteDirectoryTagShortArray
LEAF_NODE	775:10	775:10	18	TIFFWriteDirectoryTagShortArray
LEAF_NODE	775:41	775:41	17	(
ARGUMENT	775:42	775:42	17	tif
FIELD	775:42	775:42	18	tif
LEAF_NODE	775:42	775:42	19	tif
LEAF_NODE	775:45	775:45	17	,
ARGUMENT	775:46	775:46	17	& ndir
UNARY_EXPR	775:46	775:47	18	& ndir
UNARY_OPERATOR	775:46	775:46	19	&
LEAF_NODE	775:46	775:46	20	&
FIELD	775:47	775:47	19	ndir
LEAF_NODE	775:47	775:47	20	ndir
LEAF_NODE	775:51	775:51	17	,
ARGUMENT	775:52	775:52	17	dir
FIELD	775:52	775:52	18	dir
LEAF_NODE	775:52	775:52	19	dir
LEAF_NODE	775:55	775:55	17	,
ARGUMENT	775:56	775:56	17	tag
FIELD	775:56	775:56	18	tag
LEAF_NODE	775:56	775:56	19	tag
LEAF_NODE	775:59	775:59	17	,
ARGUMENT	775:60	775:60	17	count
FIELD	775:60	775:60	18	count
LEAF_NODE	775:60	775:60	19	count
LEAF_NODE	775:65	775:65	17	,
ARGUMENT	775:66	775:66	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	775:66	775:98	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	775:66	775:66	19	tif
LEAF_NODE	775:69	775:69	19	->
LEAF_NODE	775:71	775:71	19	tif_dir
LEAF_NODE	775:78	775:78	19	.
LEAF_NODE	775:79	775:79	19	td_customValues
LEAF_NODE	775:94	775:94	19	[
EXPR	775:95	775:95	19	m
FIELD	775:95	775:95	20	m
LEAF_NODE	775:95	775:95	21	m
LEAF_NODE	775:96	775:96	19	]
LEAF_NODE	775:97	775:97	19	.
LEAF_NODE	775:98	775:98	19	value
LEAF_NODE	775:103	775:103	17	)
LEAF_NODE	775:104	775:104	13	)
STATEMENTS	776:6	776:6	13	
JUMP_STATEMENT	776:6	776:14	14	goto bad ;
KEYWORD	776:6	776:6	15	goto
LEAF_NODE	776:6	776:6	16	goto
DESTINATION	776:11	776:11	15	bad
LEAF_NODE	776:11	776:11	16	bad
LEAF_NODE	776:14	776:14	15	;
JUMP_STATEMENT	777:5	777:10	12	break DESTINATION ;
KEYWORD	777:5	777:5	13	break
LEAF_NODE	777:5	777:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	777:10	777:10	13	;
LABEL	778:4	778:20	12	case TIFF_SSHORT :
LEAF_NODE	778:4	778:4	13	case
LEAF_NODE	778:9	778:9	13	TIFF_SSHORT
LEAF_NODE	778:20	778:20	13	:
SELECTION	779:5	780:6	12	
KEYWORD	779:5	779:5	13	if
LEAF_NODE	779:5	779:5	14	if
LEAF_NODE	779:8	779:8	13	(
CONDITION	779:9	779:9	13	! TIFFWriteDirectoryTagSshortArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	779:9	779:9	14	! TIFFWriteDirectoryTagSshortArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	779:9	779:10	15	! TIFFWriteDirectoryTagSshortArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	779:9	779:9	16	!
LEAF_NODE	779:9	779:9	17	!
FUNCTION_CALL	779:10	779:104	16	TIFFWriteDirectoryTagSshortArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	779:10	779:10	17	TIFFWriteDirectoryTagSshortArray
LEAF_NODE	779:10	779:10	18	TIFFWriteDirectoryTagSshortArray
LEAF_NODE	779:42	779:42	17	(
ARGUMENT	779:43	779:43	17	tif
FIELD	779:43	779:43	18	tif
LEAF_NODE	779:43	779:43	19	tif
LEAF_NODE	779:46	779:46	17	,
ARGUMENT	779:47	779:47	17	& ndir
UNARY_EXPR	779:47	779:48	18	& ndir
UNARY_OPERATOR	779:47	779:47	19	&
LEAF_NODE	779:47	779:47	20	&
FIELD	779:48	779:48	19	ndir
LEAF_NODE	779:48	779:48	20	ndir
LEAF_NODE	779:52	779:52	17	,
ARGUMENT	779:53	779:53	17	dir
FIELD	779:53	779:53	18	dir
LEAF_NODE	779:53	779:53	19	dir
LEAF_NODE	779:56	779:56	17	,
ARGUMENT	779:57	779:57	17	tag
FIELD	779:57	779:57	18	tag
LEAF_NODE	779:57	779:57	19	tag
LEAF_NODE	779:60	779:60	17	,
ARGUMENT	779:61	779:61	17	count
FIELD	779:61	779:61	18	count
LEAF_NODE	779:61	779:61	19	count
LEAF_NODE	779:66	779:66	17	,
ARGUMENT	779:67	779:67	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	779:67	779:99	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	779:67	779:67	19	tif
LEAF_NODE	779:70	779:70	19	->
LEAF_NODE	779:72	779:72	19	tif_dir
LEAF_NODE	779:79	779:79	19	.
LEAF_NODE	779:80	779:80	19	td_customValues
LEAF_NODE	779:95	779:95	19	[
EXPR	779:96	779:96	19	m
FIELD	779:96	779:96	20	m
LEAF_NODE	779:96	779:96	21	m
LEAF_NODE	779:97	779:97	19	]
LEAF_NODE	779:98	779:98	19	.
LEAF_NODE	779:99	779:99	19	value
LEAF_NODE	779:104	779:104	17	)
LEAF_NODE	779:105	779:105	13	)
STATEMENTS	780:6	780:6	13	
JUMP_STATEMENT	780:6	780:14	14	goto bad ;
KEYWORD	780:6	780:6	15	goto
LEAF_NODE	780:6	780:6	16	goto
DESTINATION	780:11	780:11	15	bad
LEAF_NODE	780:11	780:11	16	bad
LEAF_NODE	780:14	780:14	15	;
JUMP_STATEMENT	781:5	781:10	12	break DESTINATION ;
KEYWORD	781:5	781:5	13	break
LEAF_NODE	781:5	781:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	781:10	781:10	13	;
LABEL	782:4	782:18	12	case TIFF_LONG :
LEAF_NODE	782:4	782:4	13	case
LEAF_NODE	782:9	782:9	13	TIFF_LONG
LEAF_NODE	782:18	782:18	13	:
SELECTION	783:5	784:6	12	
KEYWORD	783:5	783:5	13	if
LEAF_NODE	783:5	783:5	14	if
LEAF_NODE	783:8	783:8	13	(
CONDITION	783:9	783:9	13	! TIFFWriteDirectoryTagLongArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	783:9	783:9	14	! TIFFWriteDirectoryTagLongArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	783:9	783:10	15	! TIFFWriteDirectoryTagLongArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	783:9	783:9	16	!
LEAF_NODE	783:9	783:9	17	!
FUNCTION_CALL	783:10	783:102	16	TIFFWriteDirectoryTagLongArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	783:10	783:10	17	TIFFWriteDirectoryTagLongArray
LEAF_NODE	783:10	783:10	18	TIFFWriteDirectoryTagLongArray
LEAF_NODE	783:40	783:40	17	(
ARGUMENT	783:41	783:41	17	tif
FIELD	783:41	783:41	18	tif
LEAF_NODE	783:41	783:41	19	tif
LEAF_NODE	783:44	783:44	17	,
ARGUMENT	783:45	783:45	17	& ndir
UNARY_EXPR	783:45	783:46	18	& ndir
UNARY_OPERATOR	783:45	783:45	19	&
LEAF_NODE	783:45	783:45	20	&
FIELD	783:46	783:46	19	ndir
LEAF_NODE	783:46	783:46	20	ndir
LEAF_NODE	783:50	783:50	17	,
ARGUMENT	783:51	783:51	17	dir
FIELD	783:51	783:51	18	dir
LEAF_NODE	783:51	783:51	19	dir
LEAF_NODE	783:54	783:54	17	,
ARGUMENT	783:55	783:55	17	tag
FIELD	783:55	783:55	18	tag
LEAF_NODE	783:55	783:55	19	tag
LEAF_NODE	783:58	783:58	17	,
ARGUMENT	783:59	783:59	17	count
FIELD	783:59	783:59	18	count
LEAF_NODE	783:59	783:59	19	count
LEAF_NODE	783:64	783:64	17	,
ARGUMENT	783:65	783:65	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	783:65	783:97	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	783:65	783:65	19	tif
LEAF_NODE	783:68	783:68	19	->
LEAF_NODE	783:70	783:70	19	tif_dir
LEAF_NODE	783:77	783:77	19	.
LEAF_NODE	783:78	783:78	19	td_customValues
LEAF_NODE	783:93	783:93	19	[
EXPR	783:94	783:94	19	m
FIELD	783:94	783:94	20	m
LEAF_NODE	783:94	783:94	21	m
LEAF_NODE	783:95	783:95	19	]
LEAF_NODE	783:96	783:96	19	.
LEAF_NODE	783:97	783:97	19	value
LEAF_NODE	783:102	783:102	17	)
LEAF_NODE	783:103	783:103	13	)
STATEMENTS	784:6	784:6	13	
JUMP_STATEMENT	784:6	784:14	14	goto bad ;
KEYWORD	784:6	784:6	15	goto
LEAF_NODE	784:6	784:6	16	goto
DESTINATION	784:11	784:11	15	bad
LEAF_NODE	784:11	784:11	16	bad
LEAF_NODE	784:14	784:14	15	;
JUMP_STATEMENT	785:5	785:10	12	break DESTINATION ;
KEYWORD	785:5	785:5	13	break
LEAF_NODE	785:5	785:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	785:10	785:10	13	;
LABEL	786:4	786:19	12	case TIFF_SLONG :
LEAF_NODE	786:4	786:4	13	case
LEAF_NODE	786:9	786:9	13	TIFF_SLONG
LEAF_NODE	786:19	786:19	13	:
SELECTION	787:5	788:6	12	
KEYWORD	787:5	787:5	13	if
LEAF_NODE	787:5	787:5	14	if
LEAF_NODE	787:8	787:8	13	(
CONDITION	787:9	787:9	13	! TIFFWriteDirectoryTagSlongArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	787:9	787:9	14	! TIFFWriteDirectoryTagSlongArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	787:9	787:10	15	! TIFFWriteDirectoryTagSlongArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	787:9	787:9	16	!
LEAF_NODE	787:9	787:9	17	!
FUNCTION_CALL	787:10	787:103	16	TIFFWriteDirectoryTagSlongArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	787:10	787:10	17	TIFFWriteDirectoryTagSlongArray
LEAF_NODE	787:10	787:10	18	TIFFWriteDirectoryTagSlongArray
LEAF_NODE	787:41	787:41	17	(
ARGUMENT	787:42	787:42	17	tif
FIELD	787:42	787:42	18	tif
LEAF_NODE	787:42	787:42	19	tif
LEAF_NODE	787:45	787:45	17	,
ARGUMENT	787:46	787:46	17	& ndir
UNARY_EXPR	787:46	787:47	18	& ndir
UNARY_OPERATOR	787:46	787:46	19	&
LEAF_NODE	787:46	787:46	20	&
FIELD	787:47	787:47	19	ndir
LEAF_NODE	787:47	787:47	20	ndir
LEAF_NODE	787:51	787:51	17	,
ARGUMENT	787:52	787:52	17	dir
FIELD	787:52	787:52	18	dir
LEAF_NODE	787:52	787:52	19	dir
LEAF_NODE	787:55	787:55	17	,
ARGUMENT	787:56	787:56	17	tag
FIELD	787:56	787:56	18	tag
LEAF_NODE	787:56	787:56	19	tag
LEAF_NODE	787:59	787:59	17	,
ARGUMENT	787:60	787:60	17	count
FIELD	787:60	787:60	18	count
LEAF_NODE	787:60	787:60	19	count
LEAF_NODE	787:65	787:65	17	,
ARGUMENT	787:66	787:66	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	787:66	787:98	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	787:66	787:66	19	tif
LEAF_NODE	787:69	787:69	19	->
LEAF_NODE	787:71	787:71	19	tif_dir
LEAF_NODE	787:78	787:78	19	.
LEAF_NODE	787:79	787:79	19	td_customValues
LEAF_NODE	787:94	787:94	19	[
EXPR	787:95	787:95	19	m
FIELD	787:95	787:95	20	m
LEAF_NODE	787:95	787:95	21	m
LEAF_NODE	787:96	787:96	19	]
LEAF_NODE	787:97	787:97	19	.
LEAF_NODE	787:98	787:98	19	value
LEAF_NODE	787:103	787:103	17	)
LEAF_NODE	787:104	787:104	13	)
STATEMENTS	788:6	788:6	13	
JUMP_STATEMENT	788:6	788:14	14	goto bad ;
KEYWORD	788:6	788:6	15	goto
LEAF_NODE	788:6	788:6	16	goto
DESTINATION	788:11	788:11	15	bad
LEAF_NODE	788:11	788:11	16	bad
LEAF_NODE	788:14	788:14	15	;
JUMP_STATEMENT	789:5	789:10	12	break DESTINATION ;
KEYWORD	789:5	789:5	13	break
LEAF_NODE	789:5	789:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	789:10	789:10	13	;
LABEL	790:4	790:19	12	case TIFF_LONG8 :
LEAF_NODE	790:4	790:4	13	case
LEAF_NODE	790:9	790:9	13	TIFF_LONG8
LEAF_NODE	790:19	790:19	13	:
SELECTION	791:5	792:6	12	
KEYWORD	791:5	791:5	13	if
LEAF_NODE	791:5	791:5	14	if
LEAF_NODE	791:8	791:8	13	(
CONDITION	791:9	791:9	13	! TIFFWriteDirectoryTagLong8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	791:9	791:9	14	! TIFFWriteDirectoryTagLong8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	791:9	791:10	15	! TIFFWriteDirectoryTagLong8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	791:9	791:9	16	!
LEAF_NODE	791:9	791:9	17	!
FUNCTION_CALL	791:10	791:103	16	TIFFWriteDirectoryTagLong8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	791:10	791:10	17	TIFFWriteDirectoryTagLong8Array
LEAF_NODE	791:10	791:10	18	TIFFWriteDirectoryTagLong8Array
LEAF_NODE	791:41	791:41	17	(
ARGUMENT	791:42	791:42	17	tif
FIELD	791:42	791:42	18	tif
LEAF_NODE	791:42	791:42	19	tif
LEAF_NODE	791:45	791:45	17	,
ARGUMENT	791:46	791:46	17	& ndir
UNARY_EXPR	791:46	791:47	18	& ndir
UNARY_OPERATOR	791:46	791:46	19	&
LEAF_NODE	791:46	791:46	20	&
FIELD	791:47	791:47	19	ndir
LEAF_NODE	791:47	791:47	20	ndir
LEAF_NODE	791:51	791:51	17	,
ARGUMENT	791:52	791:52	17	dir
FIELD	791:52	791:52	18	dir
LEAF_NODE	791:52	791:52	19	dir
LEAF_NODE	791:55	791:55	17	,
ARGUMENT	791:56	791:56	17	tag
FIELD	791:56	791:56	18	tag
LEAF_NODE	791:56	791:56	19	tag
LEAF_NODE	791:59	791:59	17	,
ARGUMENT	791:60	791:60	17	count
FIELD	791:60	791:60	18	count
LEAF_NODE	791:60	791:60	19	count
LEAF_NODE	791:65	791:65	17	,
ARGUMENT	791:66	791:66	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	791:66	791:98	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	791:66	791:66	19	tif
LEAF_NODE	791:69	791:69	19	->
LEAF_NODE	791:71	791:71	19	tif_dir
LEAF_NODE	791:78	791:78	19	.
LEAF_NODE	791:79	791:79	19	td_customValues
LEAF_NODE	791:94	791:94	19	[
EXPR	791:95	791:95	19	m
FIELD	791:95	791:95	20	m
LEAF_NODE	791:95	791:95	21	m
LEAF_NODE	791:96	791:96	19	]
LEAF_NODE	791:97	791:97	19	.
LEAF_NODE	791:98	791:98	19	value
LEAF_NODE	791:103	791:103	17	)
LEAF_NODE	791:104	791:104	13	)
STATEMENTS	792:6	792:6	13	
JUMP_STATEMENT	792:6	792:14	14	goto bad ;
KEYWORD	792:6	792:6	15	goto
LEAF_NODE	792:6	792:6	16	goto
DESTINATION	792:11	792:11	15	bad
LEAF_NODE	792:11	792:11	16	bad
LEAF_NODE	792:14	792:14	15	;
JUMP_STATEMENT	793:5	793:10	12	break DESTINATION ;
KEYWORD	793:5	793:5	13	break
LEAF_NODE	793:5	793:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	793:10	793:10	13	;
LABEL	794:4	794:20	12	case TIFF_SLONG8 :
LEAF_NODE	794:4	794:4	13	case
LEAF_NODE	794:9	794:9	13	TIFF_SLONG8
LEAF_NODE	794:20	794:20	13	:
SELECTION	795:5	796:6	12	
KEYWORD	795:5	795:5	13	if
LEAF_NODE	795:5	795:5	14	if
LEAF_NODE	795:8	795:8	13	(
CONDITION	795:9	795:9	13	! TIFFWriteDirectoryTagSlong8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	795:9	795:9	14	! TIFFWriteDirectoryTagSlong8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	795:9	795:10	15	! TIFFWriteDirectoryTagSlong8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	795:9	795:9	16	!
LEAF_NODE	795:9	795:9	17	!
FUNCTION_CALL	795:10	795:104	16	TIFFWriteDirectoryTagSlong8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	795:10	795:10	17	TIFFWriteDirectoryTagSlong8Array
LEAF_NODE	795:10	795:10	18	TIFFWriteDirectoryTagSlong8Array
LEAF_NODE	795:42	795:42	17	(
ARGUMENT	795:43	795:43	17	tif
FIELD	795:43	795:43	18	tif
LEAF_NODE	795:43	795:43	19	tif
LEAF_NODE	795:46	795:46	17	,
ARGUMENT	795:47	795:47	17	& ndir
UNARY_EXPR	795:47	795:48	18	& ndir
UNARY_OPERATOR	795:47	795:47	19	&
LEAF_NODE	795:47	795:47	20	&
FIELD	795:48	795:48	19	ndir
LEAF_NODE	795:48	795:48	20	ndir
LEAF_NODE	795:52	795:52	17	,
ARGUMENT	795:53	795:53	17	dir
FIELD	795:53	795:53	18	dir
LEAF_NODE	795:53	795:53	19	dir
LEAF_NODE	795:56	795:56	17	,
ARGUMENT	795:57	795:57	17	tag
FIELD	795:57	795:57	18	tag
LEAF_NODE	795:57	795:57	19	tag
LEAF_NODE	795:60	795:60	17	,
ARGUMENT	795:61	795:61	17	count
FIELD	795:61	795:61	18	count
LEAF_NODE	795:61	795:61	19	count
LEAF_NODE	795:66	795:66	17	,
ARGUMENT	795:67	795:67	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	795:67	795:99	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	795:67	795:67	19	tif
LEAF_NODE	795:70	795:70	19	->
LEAF_NODE	795:72	795:72	19	tif_dir
LEAF_NODE	795:79	795:79	19	.
LEAF_NODE	795:80	795:80	19	td_customValues
LEAF_NODE	795:95	795:95	19	[
EXPR	795:96	795:96	19	m
FIELD	795:96	795:96	20	m
LEAF_NODE	795:96	795:96	21	m
LEAF_NODE	795:97	795:97	19	]
LEAF_NODE	795:98	795:98	19	.
LEAF_NODE	795:99	795:99	19	value
LEAF_NODE	795:104	795:104	17	)
LEAF_NODE	795:105	795:105	13	)
STATEMENTS	796:6	796:6	13	
JUMP_STATEMENT	796:6	796:14	14	goto bad ;
KEYWORD	796:6	796:6	15	goto
LEAF_NODE	796:6	796:6	16	goto
DESTINATION	796:11	796:11	15	bad
LEAF_NODE	796:11	796:11	16	bad
LEAF_NODE	796:14	796:14	15	;
JUMP_STATEMENT	797:5	797:10	12	break DESTINATION ;
KEYWORD	797:5	797:5	13	break
LEAF_NODE	797:5	797:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	797:10	797:10	13	;
LABEL	798:4	798:22	12	case TIFF_RATIONAL :
LEAF_NODE	798:4	798:4	13	case
LEAF_NODE	798:9	798:9	13	TIFF_RATIONAL
LEAF_NODE	798:22	798:22	13	:
SELECTION	799:5	800:6	12	
KEYWORD	799:5	799:5	13	if
LEAF_NODE	799:5	799:5	14	if
LEAF_NODE	799:8	799:8	13	(
CONDITION	799:9	799:9	13	! TIFFWriteDirectoryTagRationalArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	799:9	799:9	14	! TIFFWriteDirectoryTagRationalArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	799:9	799:10	15	! TIFFWriteDirectoryTagRationalArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	799:9	799:9	16	!
LEAF_NODE	799:9	799:9	17	!
FUNCTION_CALL	799:10	799:106	16	TIFFWriteDirectoryTagRationalArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	799:10	799:10	17	TIFFWriteDirectoryTagRationalArray
LEAF_NODE	799:10	799:10	18	TIFFWriteDirectoryTagRationalArray
LEAF_NODE	799:44	799:44	17	(
ARGUMENT	799:45	799:45	17	tif
FIELD	799:45	799:45	18	tif
LEAF_NODE	799:45	799:45	19	tif
LEAF_NODE	799:48	799:48	17	,
ARGUMENT	799:49	799:49	17	& ndir
UNARY_EXPR	799:49	799:50	18	& ndir
UNARY_OPERATOR	799:49	799:49	19	&
LEAF_NODE	799:49	799:49	20	&
FIELD	799:50	799:50	19	ndir
LEAF_NODE	799:50	799:50	20	ndir
LEAF_NODE	799:54	799:54	17	,
ARGUMENT	799:55	799:55	17	dir
FIELD	799:55	799:55	18	dir
LEAF_NODE	799:55	799:55	19	dir
LEAF_NODE	799:58	799:58	17	,
ARGUMENT	799:59	799:59	17	tag
FIELD	799:59	799:59	18	tag
LEAF_NODE	799:59	799:59	19	tag
LEAF_NODE	799:62	799:62	17	,
ARGUMENT	799:63	799:63	17	count
FIELD	799:63	799:63	18	count
LEAF_NODE	799:63	799:63	19	count
LEAF_NODE	799:68	799:68	17	,
ARGUMENT	799:69	799:69	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	799:69	799:101	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	799:69	799:69	19	tif
LEAF_NODE	799:72	799:72	19	->
LEAF_NODE	799:74	799:74	19	tif_dir
LEAF_NODE	799:81	799:81	19	.
LEAF_NODE	799:82	799:82	19	td_customValues
LEAF_NODE	799:97	799:97	19	[
EXPR	799:98	799:98	19	m
FIELD	799:98	799:98	20	m
LEAF_NODE	799:98	799:98	21	m
LEAF_NODE	799:99	799:99	19	]
LEAF_NODE	799:100	799:100	19	.
LEAF_NODE	799:101	799:101	19	value
LEAF_NODE	799:106	799:106	17	)
LEAF_NODE	799:107	799:107	13	)
STATEMENTS	800:6	800:6	13	
JUMP_STATEMENT	800:6	800:14	14	goto bad ;
KEYWORD	800:6	800:6	15	goto
LEAF_NODE	800:6	800:6	16	goto
DESTINATION	800:11	800:11	15	bad
LEAF_NODE	800:11	800:11	16	bad
LEAF_NODE	800:14	800:14	15	;
JUMP_STATEMENT	801:5	801:10	12	break DESTINATION ;
KEYWORD	801:5	801:5	13	break
LEAF_NODE	801:5	801:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	801:10	801:10	13	;
LABEL	802:4	802:23	12	case TIFF_SRATIONAL :
LEAF_NODE	802:4	802:4	13	case
LEAF_NODE	802:9	802:9	13	TIFF_SRATIONAL
LEAF_NODE	802:23	802:23	13	:
SELECTION	803:5	804:6	12	
KEYWORD	803:5	803:5	13	if
LEAF_NODE	803:5	803:5	14	if
LEAF_NODE	803:8	803:8	13	(
CONDITION	803:9	803:9	13	! TIFFWriteDirectoryTagSrationalArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	803:9	803:9	14	! TIFFWriteDirectoryTagSrationalArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	803:9	803:10	15	! TIFFWriteDirectoryTagSrationalArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	803:9	803:9	16	!
LEAF_NODE	803:9	803:9	17	!
FUNCTION_CALL	803:10	803:107	16	TIFFWriteDirectoryTagSrationalArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	803:10	803:10	17	TIFFWriteDirectoryTagSrationalArray
LEAF_NODE	803:10	803:10	18	TIFFWriteDirectoryTagSrationalArray
LEAF_NODE	803:45	803:45	17	(
ARGUMENT	803:46	803:46	17	tif
FIELD	803:46	803:46	18	tif
LEAF_NODE	803:46	803:46	19	tif
LEAF_NODE	803:49	803:49	17	,
ARGUMENT	803:50	803:50	17	& ndir
UNARY_EXPR	803:50	803:51	18	& ndir
UNARY_OPERATOR	803:50	803:50	19	&
LEAF_NODE	803:50	803:50	20	&
FIELD	803:51	803:51	19	ndir
LEAF_NODE	803:51	803:51	20	ndir
LEAF_NODE	803:55	803:55	17	,
ARGUMENT	803:56	803:56	17	dir
FIELD	803:56	803:56	18	dir
LEAF_NODE	803:56	803:56	19	dir
LEAF_NODE	803:59	803:59	17	,
ARGUMENT	803:60	803:60	17	tag
FIELD	803:60	803:60	18	tag
LEAF_NODE	803:60	803:60	19	tag
LEAF_NODE	803:63	803:63	17	,
ARGUMENT	803:64	803:64	17	count
FIELD	803:64	803:64	18	count
LEAF_NODE	803:64	803:64	19	count
LEAF_NODE	803:69	803:69	17	,
ARGUMENT	803:70	803:70	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	803:70	803:102	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	803:70	803:70	19	tif
LEAF_NODE	803:73	803:73	19	->
LEAF_NODE	803:75	803:75	19	tif_dir
LEAF_NODE	803:82	803:82	19	.
LEAF_NODE	803:83	803:83	19	td_customValues
LEAF_NODE	803:98	803:98	19	[
EXPR	803:99	803:99	19	m
FIELD	803:99	803:99	20	m
LEAF_NODE	803:99	803:99	21	m
LEAF_NODE	803:100	803:100	19	]
LEAF_NODE	803:101	803:101	19	.
LEAF_NODE	803:102	803:102	19	value
LEAF_NODE	803:107	803:107	17	)
LEAF_NODE	803:108	803:108	13	)
STATEMENTS	804:6	804:6	13	
JUMP_STATEMENT	804:6	804:14	14	goto bad ;
KEYWORD	804:6	804:6	15	goto
LEAF_NODE	804:6	804:6	16	goto
DESTINATION	804:11	804:11	15	bad
LEAF_NODE	804:11	804:11	16	bad
LEAF_NODE	804:14	804:14	15	;
JUMP_STATEMENT	805:5	805:10	12	break DESTINATION ;
KEYWORD	805:5	805:5	13	break
LEAF_NODE	805:5	805:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	805:10	805:10	13	;
LABEL	806:4	806:19	12	case TIFF_FLOAT :
LEAF_NODE	806:4	806:4	13	case
LEAF_NODE	806:9	806:9	13	TIFF_FLOAT
LEAF_NODE	806:19	806:19	13	:
SELECTION	807:5	808:6	12	
KEYWORD	807:5	807:5	13	if
LEAF_NODE	807:5	807:5	14	if
LEAF_NODE	807:8	807:8	13	(
CONDITION	807:9	807:9	13	! TIFFWriteDirectoryTagFloatArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	807:9	807:9	14	! TIFFWriteDirectoryTagFloatArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	807:9	807:10	15	! TIFFWriteDirectoryTagFloatArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	807:9	807:9	16	!
LEAF_NODE	807:9	807:9	17	!
FUNCTION_CALL	807:10	807:103	16	TIFFWriteDirectoryTagFloatArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	807:10	807:10	17	TIFFWriteDirectoryTagFloatArray
LEAF_NODE	807:10	807:10	18	TIFFWriteDirectoryTagFloatArray
LEAF_NODE	807:41	807:41	17	(
ARGUMENT	807:42	807:42	17	tif
FIELD	807:42	807:42	18	tif
LEAF_NODE	807:42	807:42	19	tif
LEAF_NODE	807:45	807:45	17	,
ARGUMENT	807:46	807:46	17	& ndir
UNARY_EXPR	807:46	807:47	18	& ndir
UNARY_OPERATOR	807:46	807:46	19	&
LEAF_NODE	807:46	807:46	20	&
FIELD	807:47	807:47	19	ndir
LEAF_NODE	807:47	807:47	20	ndir
LEAF_NODE	807:51	807:51	17	,
ARGUMENT	807:52	807:52	17	dir
FIELD	807:52	807:52	18	dir
LEAF_NODE	807:52	807:52	19	dir
LEAF_NODE	807:55	807:55	17	,
ARGUMENT	807:56	807:56	17	tag
FIELD	807:56	807:56	18	tag
LEAF_NODE	807:56	807:56	19	tag
LEAF_NODE	807:59	807:59	17	,
ARGUMENT	807:60	807:60	17	count
FIELD	807:60	807:60	18	count
LEAF_NODE	807:60	807:60	19	count
LEAF_NODE	807:65	807:65	17	,
ARGUMENT	807:66	807:66	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	807:66	807:98	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	807:66	807:66	19	tif
LEAF_NODE	807:69	807:69	19	->
LEAF_NODE	807:71	807:71	19	tif_dir
LEAF_NODE	807:78	807:78	19	.
LEAF_NODE	807:79	807:79	19	td_customValues
LEAF_NODE	807:94	807:94	19	[
EXPR	807:95	807:95	19	m
FIELD	807:95	807:95	20	m
LEAF_NODE	807:95	807:95	21	m
LEAF_NODE	807:96	807:96	19	]
LEAF_NODE	807:97	807:97	19	.
LEAF_NODE	807:98	807:98	19	value
LEAF_NODE	807:103	807:103	17	)
LEAF_NODE	807:104	807:104	13	)
STATEMENTS	808:6	808:6	13	
JUMP_STATEMENT	808:6	808:14	14	goto bad ;
KEYWORD	808:6	808:6	15	goto
LEAF_NODE	808:6	808:6	16	goto
DESTINATION	808:11	808:11	15	bad
LEAF_NODE	808:11	808:11	16	bad
LEAF_NODE	808:14	808:14	15	;
JUMP_STATEMENT	809:5	809:10	12	break DESTINATION ;
KEYWORD	809:5	809:5	13	break
LEAF_NODE	809:5	809:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	809:10	809:10	13	;
LABEL	810:4	810:20	12	case TIFF_DOUBLE :
LEAF_NODE	810:4	810:4	13	case
LEAF_NODE	810:9	810:9	13	TIFF_DOUBLE
LEAF_NODE	810:20	810:20	13	:
SELECTION	811:5	812:6	12	
KEYWORD	811:5	811:5	13	if
LEAF_NODE	811:5	811:5	14	if
LEAF_NODE	811:8	811:8	13	(
CONDITION	811:9	811:9	13	! TIFFWriteDirectoryTagDoubleArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	811:9	811:9	14	! TIFFWriteDirectoryTagDoubleArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	811:9	811:10	15	! TIFFWriteDirectoryTagDoubleArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	811:9	811:9	16	!
LEAF_NODE	811:9	811:9	17	!
FUNCTION_CALL	811:10	811:104	16	TIFFWriteDirectoryTagDoubleArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	811:10	811:10	17	TIFFWriteDirectoryTagDoubleArray
LEAF_NODE	811:10	811:10	18	TIFFWriteDirectoryTagDoubleArray
LEAF_NODE	811:42	811:42	17	(
ARGUMENT	811:43	811:43	17	tif
FIELD	811:43	811:43	18	tif
LEAF_NODE	811:43	811:43	19	tif
LEAF_NODE	811:46	811:46	17	,
ARGUMENT	811:47	811:47	17	& ndir
UNARY_EXPR	811:47	811:48	18	& ndir
UNARY_OPERATOR	811:47	811:47	19	&
LEAF_NODE	811:47	811:47	20	&
FIELD	811:48	811:48	19	ndir
LEAF_NODE	811:48	811:48	20	ndir
LEAF_NODE	811:52	811:52	17	,
ARGUMENT	811:53	811:53	17	dir
FIELD	811:53	811:53	18	dir
LEAF_NODE	811:53	811:53	19	dir
LEAF_NODE	811:56	811:56	17	,
ARGUMENT	811:57	811:57	17	tag
FIELD	811:57	811:57	18	tag
LEAF_NODE	811:57	811:57	19	tag
LEAF_NODE	811:60	811:60	17	,
ARGUMENT	811:61	811:61	17	count
FIELD	811:61	811:61	18	count
LEAF_NODE	811:61	811:61	19	count
LEAF_NODE	811:66	811:66	17	,
ARGUMENT	811:67	811:67	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	811:67	811:99	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	811:67	811:67	19	tif
LEAF_NODE	811:70	811:70	19	->
LEAF_NODE	811:72	811:72	19	tif_dir
LEAF_NODE	811:79	811:79	19	.
LEAF_NODE	811:80	811:80	19	td_customValues
LEAF_NODE	811:95	811:95	19	[
EXPR	811:96	811:96	19	m
FIELD	811:96	811:96	20	m
LEAF_NODE	811:96	811:96	21	m
LEAF_NODE	811:97	811:97	19	]
LEAF_NODE	811:98	811:98	19	.
LEAF_NODE	811:99	811:99	19	value
LEAF_NODE	811:104	811:104	17	)
LEAF_NODE	811:105	811:105	13	)
STATEMENTS	812:6	812:6	13	
JUMP_STATEMENT	812:6	812:14	14	goto bad ;
KEYWORD	812:6	812:6	15	goto
LEAF_NODE	812:6	812:6	16	goto
DESTINATION	812:11	812:11	15	bad
LEAF_NODE	812:11	812:11	16	bad
LEAF_NODE	812:14	812:14	15	;
JUMP_STATEMENT	813:5	813:10	12	break DESTINATION ;
KEYWORD	813:5	813:5	13	break
LEAF_NODE	813:5	813:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	813:10	813:10	13	;
LABEL	814:4	814:17	12	case TIFF_IFD :
LEAF_NODE	814:4	814:4	13	case
LEAF_NODE	814:9	814:9	13	TIFF_IFD
LEAF_NODE	814:17	814:17	13	:
SELECTION	815:5	816:6	12	
KEYWORD	815:5	815:5	13	if
LEAF_NODE	815:5	815:5	14	if
LEAF_NODE	815:8	815:8	13	(
CONDITION	815:9	815:9	13	! TIFFWriteDirectoryTagIfdArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	815:9	815:9	14	! TIFFWriteDirectoryTagIfdArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	815:9	815:10	15	! TIFFWriteDirectoryTagIfdArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	815:9	815:9	16	!
LEAF_NODE	815:9	815:9	17	!
FUNCTION_CALL	815:10	815:101	16	TIFFWriteDirectoryTagIfdArray ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	815:10	815:10	17	TIFFWriteDirectoryTagIfdArray
LEAF_NODE	815:10	815:10	18	TIFFWriteDirectoryTagIfdArray
LEAF_NODE	815:39	815:39	17	(
ARGUMENT	815:40	815:40	17	tif
FIELD	815:40	815:40	18	tif
LEAF_NODE	815:40	815:40	19	tif
LEAF_NODE	815:43	815:43	17	,
ARGUMENT	815:44	815:44	17	& ndir
UNARY_EXPR	815:44	815:45	18	& ndir
UNARY_OPERATOR	815:44	815:44	19	&
LEAF_NODE	815:44	815:44	20	&
FIELD	815:45	815:45	19	ndir
LEAF_NODE	815:45	815:45	20	ndir
LEAF_NODE	815:49	815:49	17	,
ARGUMENT	815:50	815:50	17	dir
FIELD	815:50	815:50	18	dir
LEAF_NODE	815:50	815:50	19	dir
LEAF_NODE	815:53	815:53	17	,
ARGUMENT	815:54	815:54	17	tag
FIELD	815:54	815:54	18	tag
LEAF_NODE	815:54	815:54	19	tag
LEAF_NODE	815:57	815:57	17	,
ARGUMENT	815:58	815:58	17	count
FIELD	815:58	815:58	18	count
LEAF_NODE	815:58	815:58	19	count
LEAF_NODE	815:63	815:63	17	,
ARGUMENT	815:64	815:64	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	815:64	815:96	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	815:64	815:64	19	tif
LEAF_NODE	815:67	815:67	19	->
LEAF_NODE	815:69	815:69	19	tif_dir
LEAF_NODE	815:76	815:76	19	.
LEAF_NODE	815:77	815:77	19	td_customValues
LEAF_NODE	815:92	815:92	19	[
EXPR	815:93	815:93	19	m
FIELD	815:93	815:93	20	m
LEAF_NODE	815:93	815:93	21	m
LEAF_NODE	815:94	815:94	19	]
LEAF_NODE	815:95	815:95	19	.
LEAF_NODE	815:96	815:96	19	value
LEAF_NODE	815:101	815:101	17	)
LEAF_NODE	815:102	815:102	13	)
STATEMENTS	816:6	816:6	13	
JUMP_STATEMENT	816:6	816:14	14	goto bad ;
KEYWORD	816:6	816:6	15	goto
LEAF_NODE	816:6	816:6	16	goto
DESTINATION	816:11	816:11	15	bad
LEAF_NODE	816:11	816:11	16	bad
LEAF_NODE	816:14	816:14	15	;
JUMP_STATEMENT	817:5	817:10	12	break DESTINATION ;
KEYWORD	817:5	817:5	13	break
LEAF_NODE	817:5	817:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	817:10	817:10	13	;
LABEL	818:4	818:18	12	case TIFF_IFD8 :
LEAF_NODE	818:4	818:4	13	case
LEAF_NODE	818:9	818:9	13	TIFF_IFD8
LEAF_NODE	818:18	818:18	13	:
SELECTION	819:5	820:6	12	
KEYWORD	819:5	819:5	13	if
LEAF_NODE	819:5	819:5	14	if
LEAF_NODE	819:8	819:8	13	(
CONDITION	819:9	819:9	13	! TIFFWriteDirectoryTagIfdIfd8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
EXPR	819:9	819:9	14	! TIFFWriteDirectoryTagIfdIfd8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_EXPR	819:9	819:10	15	! TIFFWriteDirectoryTagIfdIfd8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
UNARY_OPERATOR	819:9	819:9	16	!
LEAF_NODE	819:9	819:9	17	!
FUNCTION_CALL	819:10	819:105	16	TIFFWriteDirectoryTagIfdIfd8Array ( tif , & ndir , dir , tag , count , tif -> tif_dir . td_customValues [ m ] . value )
CALLEE	819:10	819:10	17	TIFFWriteDirectoryTagIfdIfd8Array
LEAF_NODE	819:10	819:10	18	TIFFWriteDirectoryTagIfdIfd8Array
LEAF_NODE	819:43	819:43	17	(
ARGUMENT	819:44	819:44	17	tif
FIELD	819:44	819:44	18	tif
LEAF_NODE	819:44	819:44	19	tif
LEAF_NODE	819:47	819:47	17	,
ARGUMENT	819:48	819:48	17	& ndir
UNARY_EXPR	819:48	819:49	18	& ndir
UNARY_OPERATOR	819:48	819:48	19	&
LEAF_NODE	819:48	819:48	20	&
FIELD	819:49	819:49	19	ndir
LEAF_NODE	819:49	819:49	20	ndir
LEAF_NODE	819:53	819:53	17	,
ARGUMENT	819:54	819:54	17	dir
FIELD	819:54	819:54	18	dir
LEAF_NODE	819:54	819:54	19	dir
LEAF_NODE	819:57	819:57	17	,
ARGUMENT	819:58	819:58	17	tag
FIELD	819:58	819:58	18	tag
LEAF_NODE	819:58	819:58	19	tag
LEAF_NODE	819:61	819:61	17	,
ARGUMENT	819:62	819:62	17	count
FIELD	819:62	819:62	18	count
LEAF_NODE	819:62	819:62	19	count
LEAF_NODE	819:67	819:67	17	,
ARGUMENT	819:68	819:68	17	tif -> tif_dir . td_customValues [ m ] . value
FIELD	819:68	819:100	18	tif -> tif_dir . td_customValues [ m ] . value
LEAF_NODE	819:68	819:68	19	tif
LEAF_NODE	819:71	819:71	19	->
LEAF_NODE	819:73	819:73	19	tif_dir
LEAF_NODE	819:80	819:80	19	.
LEAF_NODE	819:81	819:81	19	td_customValues
LEAF_NODE	819:96	819:96	19	[
EXPR	819:97	819:97	19	m
FIELD	819:97	819:97	20	m
LEAF_NODE	819:97	819:97	21	m
LEAF_NODE	819:98	819:98	19	]
LEAF_NODE	819:99	819:99	19	.
LEAF_NODE	819:100	819:100	19	value
LEAF_NODE	819:105	819:105	17	)
LEAF_NODE	819:106	819:106	13	)
STATEMENTS	820:6	820:6	13	
JUMP_STATEMENT	820:6	820:14	14	goto bad ;
KEYWORD	820:6	820:6	15	goto
LEAF_NODE	820:6	820:6	16	goto
DESTINATION	820:11	820:11	15	bad
LEAF_NODE	820:11	820:11	16	bad
LEAF_NODE	820:14	820:14	15	;
JUMP_STATEMENT	821:5	821:10	12	break DESTINATION ;
KEYWORD	821:5	821:5	13	break
LEAF_NODE	821:5	821:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	821:10	821:10	13	;
LABEL	822:4	822:11	12	default :
LEAF_NODE	822:4	822:4	13	default
LEAF_NODE	822:11	822:11	13	:
EXPR_STATEMENT	823:5	823:14	12	assert ( 0 ) ;
EXPR	823:5	823:5	13	assert ( 0 )
FUNCTION_CALL	823:5	823:13	14	assert ( 0 )
CALLEE	823:5	823:5	15	assert
LEAF_NODE	823:5	823:5	16	assert
LEAF_NODE	823:11	823:11	15	(
ARGUMENT	823:12	823:12	15	0
FIELD	823:12	823:12	16	0
LEAF_NODE	823:12	823:12	17	0
LEAF_NODE	823:13	823:13	15	)
LEAF_NODE	823:14	823:14	13	;
JUMP_STATEMENT	824:5	824:10	12	break DESTINATION ;
KEYWORD	824:5	824:5	13	break
LEAF_NODE	824:5	824:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	824:10	824:10	13	;
LEAF_NODE	825:3	825:3	11	}
LEAF_NODE	826:2	826:2	8	}
SELECTION	827:2	828:3	6	
KEYWORD	827:2	827:2	7	if
LEAF_NODE	827:2	827:2	8	if
LEAF_NODE	827:5	827:5	7	(
CONDITION	827:6	827:6	7	dir != NULL
EXPR	827:6	827:11	8	dir != NULL
FIELD	827:6	827:6	9	dir
LEAF_NODE	827:6	827:6	10	dir
EQ_OPERATOR	827:9	827:9	9	!=
LEAF_NODE	827:9	827:9	10	!=
FIELD	827:11	827:11	9	NULL
LEAF_NODE	827:11	827:11	10	NULL
LEAF_NODE	827:15	827:15	7	)
STATEMENTS	828:3	828:3	7	
JUMP_STATEMENT	828:3	828:8	8	break DESTINATION ;
KEYWORD	828:3	828:3	9	break
LEAF_NODE	828:3	828:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	828:8	828:8	9	;
EXPR_STATEMENT	829:2	829:44	6	dir = _TIFFmalloc ( ndir * sizeof ( TIFFDirEntry ) ) ;
EXPR	829:2	829:2	7	dir = _TIFFmalloc ( ndir * sizeof ( TIFFDirEntry ) )
ASSIGN	829:2	829:6	8	dir = _TIFFmalloc ( ndir * sizeof ( TIFFDirEntry ) )
LVAL	829:2	829:2	9	dir
FIELD	829:2	829:2	10	dir
LEAF_NODE	829:2	829:2	11	dir
ASSIGN_OP	829:5	829:5	9	=
LEAF_NODE	829:5	829:5	10	=
RVAL	829:6	829:6	9	_TIFFmalloc ( ndir * sizeof ( TIFFDirEntry ) )
FUNCTION_CALL	829:6	829:43	10	_TIFFmalloc ( ndir * sizeof ( TIFFDirEntry ) )
CALLEE	829:6	829:6	11	_TIFFmalloc
LEAF_NODE	829:6	829:6	12	_TIFFmalloc
LEAF_NODE	829:17	829:17	11	(
ARGUMENT	829:18	829:23	11	ndir * sizeof ( TIFFDirEntry )
FIELD	829:18	829:18	12	ndir
LEAF_NODE	829:18	829:18	13	ndir
LEAF_NODE	829:22	829:22	12	*
FUNCTION_CALL	829:23	829:42	12	sizeof ( TIFFDirEntry )
CALLEE	829:23	829:23	13	sizeof
LEAF_NODE	829:23	829:23	14	sizeof
LEAF_NODE	829:29	829:29	13	(
ARGUMENT	829:30	829:30	13	TIFFDirEntry
FIELD	829:30	829:30	14	TIFFDirEntry
LEAF_NODE	829:30	829:30	15	TIFFDirEntry
LEAF_NODE	829:42	829:42	13	)
LEAF_NODE	829:43	829:43	11	)
LEAF_NODE	829:44	829:44	7	;
SELECTION	830:2	831:2	6	
KEYWORD	830:2	830:2	7	if
LEAF_NODE	830:2	830:2	8	if
LEAF_NODE	830:5	830:5	7	(
CONDITION	830:6	830:6	7	dir == NULL
EXPR	830:6	830:11	8	dir == NULL
FIELD	830:6	830:6	9	dir
LEAF_NODE	830:6	830:6	10	dir
EQ_OPERATOR	830:9	830:9	9	==
LEAF_NODE	830:9	830:9	10	==
FIELD	830:11	830:11	9	NULL
LEAF_NODE	830:11	830:11	10	NULL
LEAF_NODE	830:15	830:15	7	)
STATEMENTS	831:2	834:2	7	
LEAF_NODE	831:2	831:2	8	{
STATEMENTS	832:3	833:3	8	
EXPR_STATEMENT	832:3	832:59	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	832:3	832:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	832:3	832:58	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	832:3	832:3	12	TIFFErrorExt
LEAF_NODE	832:3	832:3	13	TIFFErrorExt
LEAF_NODE	832:15	832:15	12	(
ARGUMENT	832:16	832:16	12	tif -> tif_clientdata
FIELD	832:16	832:21	13	tif -> tif_clientdata
LEAF_NODE	832:16	832:16	14	tif
LEAF_NODE	832:19	832:19	14	->
LEAF_NODE	832:21	832:21	14	tif_clientdata
LEAF_NODE	832:35	832:35	12	,
ARGUMENT	832:36	832:36	12	module
FIELD	832:36	832:36	13	module
LEAF_NODE	832:36	832:36	14	module
LEAF_NODE	832:42	832:42	12	,
ARGUMENT	832:43	832:43	12	"Out of memory"
FIELD	832:43	832:43	13	"Out of memory"
LEAF_NODE	832:43	832:43	14	"Out of memory"
LEAF_NODE	832:58	832:58	12	)
LEAF_NODE	832:59	832:59	10	;
JUMP_STATEMENT	833:3	833:11	9	goto bad ;
KEYWORD	833:3	833:3	10	goto
LEAF_NODE	833:3	833:3	11	goto
DESTINATION	833:8	833:8	10	bad
LEAF_NODE	833:8	833:8	11	bad
LEAF_NODE	833:11	833:11	10	;
LEAF_NODE	834:2	834:2	8	}
SELECTION	835:2	836:2	6	
KEYWORD	835:2	835:2	7	if
LEAF_NODE	835:2	835:2	8	if
LEAF_NODE	835:5	835:5	7	(
CONDITION	835:6	835:6	7	isimage
EXPR	835:6	835:6	8	isimage
FIELD	835:6	835:6	9	isimage
LEAF_NODE	835:6	835:6	10	isimage
LEAF_NODE	835:13	835:13	7	)
STATEMENTS	836:2	839:2	7	
LEAF_NODE	836:2	836:2	8	{
STATEMENTS	837:3	837:3	8	
SELECTION	837:3	838:4	9	
KEYWORD	837:3	837:3	10	if
LEAF_NODE	837:3	837:3	11	if
LEAF_NODE	837:6	837:6	10	(
CONDITION	837:7	837:7	10	( tif -> tif_diroff == 0 ) && ( ! TIFFLinkDirectory ( tif ) )
EXPR	837:7	837:7	11	( tif -> tif_diroff == 0 ) && ( ! TIFFLinkDirectory ( tif ) )
AND	837:7	837:29	12	( tif -> tif_diroff == 0 ) && ( ! TIFFLinkDirectory ( tif ) )
EXPR	837:7	837:26	13	( tif -> tif_diroff == 0 )
LEAF_NODE	837:7	837:7	14	(
FIELD	837:8	837:13	14	tif -> tif_diroff
LEAF_NODE	837:8	837:8	15	tif
LEAF_NODE	837:11	837:11	15	->
LEAF_NODE	837:13	837:13	15	tif_diroff
EQ_OPERATOR	837:23	837:23	14	==
LEAF_NODE	837:23	837:23	15	==
FIELD	837:25	837:25	14	0
LEAF_NODE	837:25	837:25	15	0
LEAF_NODE	837:26	837:26	14	)
LEAF_NODE	837:27	837:27	13	&&
EXPR	837:29	837:53	13	( ! TIFFLinkDirectory ( tif ) )
LEAF_NODE	837:29	837:29	14	(
UNARY_EXPR	837:30	837:31	14	! TIFFLinkDirectory ( tif )
UNARY_OPERATOR	837:30	837:30	15	!
LEAF_NODE	837:30	837:30	16	!
FUNCTION_CALL	837:31	837:52	15	TIFFLinkDirectory ( tif )
CALLEE	837:31	837:31	16	TIFFLinkDirectory
LEAF_NODE	837:31	837:31	17	TIFFLinkDirectory
LEAF_NODE	837:48	837:48	16	(
ARGUMENT	837:49	837:49	16	tif
FIELD	837:49	837:49	17	tif
LEAF_NODE	837:49	837:49	18	tif
LEAF_NODE	837:52	837:52	16	)
LEAF_NODE	837:53	837:53	14	)
LEAF_NODE	837:54	837:54	10	)
STATEMENTS	838:4	838:4	10	
JUMP_STATEMENT	838:4	838:12	11	goto bad ;
KEYWORD	838:4	838:4	12	goto
LEAF_NODE	838:4	838:4	13	goto
DESTINATION	838:9	838:9	12	bad
LEAF_NODE	838:9	838:9	13	bad
LEAF_NODE	838:12	838:12	12	;
LEAF_NODE	839:2	839:2	8	}
SELECTION	840:2	841:3	6	
KEYWORD	840:2	840:2	7	else
LEAF_NODE	840:2	840:2	8	else
STATEMENTS	841:3	841:3	7	
EXPR_STATEMENT	841:3	841:66	8	tif -> tif_diroff = ( TIFFSeekFile ( tif , 0 , SEEK_END ) + 1 ) & ( ~ ( ( toff_t ) 1 ) ) ;
EXPR	841:3	841:3	9	tif -> tif_diroff = ( TIFFSeekFile ( tif , 0 , SEEK_END ) + 1 ) & ( ~ ( ( toff_t ) 1 ) )
ASSIGN	841:3	841:19	10	tif -> tif_diroff = ( TIFFSeekFile ( tif , 0 , SEEK_END ) + 1 ) & ( ~ ( ( toff_t ) 1 ) )
LVAL	841:3	841:3	11	tif -> tif_diroff
FIELD	841:3	841:8	12	tif -> tif_diroff
LEAF_NODE	841:3	841:3	13	tif
LEAF_NODE	841:6	841:6	13	->
LEAF_NODE	841:8	841:8	13	tif_diroff
ASSIGN_OP	841:18	841:18	11	=
LEAF_NODE	841:18	841:18	12	=
RVAL	841:19	841:65	11	( TIFFSeekFile ( tif , 0 , SEEK_END ) + 1 ) & ( ~ ( ( toff_t ) 1 ) )
LEAF_NODE	841:19	841:19	12	(
FUNCTION_CALL	841:20	841:47	12	TIFFSeekFile ( tif , 0 , SEEK_END )
CALLEE	841:20	841:20	13	TIFFSeekFile
LEAF_NODE	841:20	841:20	14	TIFFSeekFile
LEAF_NODE	841:32	841:32	13	(
ARGUMENT	841:33	841:33	13	tif
FIELD	841:33	841:33	14	tif
LEAF_NODE	841:33	841:33	15	tif
LEAF_NODE	841:36	841:36	13	,
ARGUMENT	841:37	841:37	13	0
FIELD	841:37	841:37	14	0
LEAF_NODE	841:37	841:37	15	0
LEAF_NODE	841:38	841:38	13	,
ARGUMENT	841:39	841:39	13	SEEK_END
FIELD	841:39	841:39	14	SEEK_END
LEAF_NODE	841:39	841:39	15	SEEK_END
LEAF_NODE	841:47	841:47	13	)
LEAF_NODE	841:48	841:48	12	+
FIELD	841:49	841:49	12	1
LEAF_NODE	841:49	841:49	13	1
LEAF_NODE	841:50	841:50	12	)
LEAF_NODE	841:51	841:51	12	&
LEAF_NODE	841:52	841:52	12	(
UNARY_EXPR	841:53	841:64	12	~ ( ( toff_t ) 1 )
UNARY_OPERATOR	841:53	841:53	13	~
LEAF_NODE	841:53	841:53	14	~
LEAF_NODE	841:54	841:54	13	(
LEAF_NODE	841:55	841:55	13	(
TYPE_NAME	841:56	841:56	13	toff_t
LEAF_NODE	841:56	841:56	14	toff_t
LEAF_NODE	841:62	841:62	13	)
FIELD	841:63	841:63	13	1
LEAF_NODE	841:63	841:63	14	1
LEAF_NODE	841:64	841:64	13	)
LEAF_NODE	841:65	841:65	12	)
LEAF_NODE	841:66	841:66	9	;
SELECTION	842:2	843:3	6	
KEYWORD	842:2	842:2	7	if
LEAF_NODE	842:2	842:2	8	if
LEAF_NODE	842:5	842:5	7	(
CONDITION	842:6	842:6	7	pdiroff != NULL
EXPR	842:6	842:15	8	pdiroff != NULL
FIELD	842:6	842:6	9	pdiroff
LEAF_NODE	842:6	842:6	10	pdiroff
EQ_OPERATOR	842:13	842:13	9	!=
LEAF_NODE	842:13	842:13	10	!=
FIELD	842:15	842:15	9	NULL
LEAF_NODE	842:15	842:15	10	NULL
LEAF_NODE	842:19	842:19	7	)
STATEMENTS	843:3	843:3	7	
EXPR_STATEMENT	843:3	843:27	8	* pdiroff = tif -> tif_diroff ;
EXPR	843:3	843:3	9	* pdiroff = tif -> tif_diroff
ASSIGN	843:3	843:12	10	* pdiroff = tif -> tif_diroff
LVAL	843:3	843:3	11	* pdiroff
UNARY_EXPR	843:3	843:4	12	* pdiroff
UNARY_OPERATOR	843:3	843:3	13	*
LEAF_NODE	843:3	843:3	14	*
FIELD	843:4	843:4	13	pdiroff
LEAF_NODE	843:4	843:4	14	pdiroff
ASSIGN_OP	843:11	843:11	11	=
LEAF_NODE	843:11	843:11	12	=
RVAL	843:12	843:12	11	tif -> tif_diroff
FIELD	843:12	843:17	12	tif -> tif_diroff
LEAF_NODE	843:12	843:12	13	tif
LEAF_NODE	843:15	843:15	13	->
LEAF_NODE	843:17	843:17	13	tif_diroff
LEAF_NODE	843:27	843:27	9	;
SELECTION	844:2	845:3	6	
KEYWORD	844:2	844:2	7	if
LEAF_NODE	844:2	844:2	8	if
LEAF_NODE	844:5	844:5	7	(
CONDITION	844:6	844:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	844:6	844:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	844:6	844:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	844:6	844:6	10	!
LEAF_NODE	844:6	844:6	11	!
LEAF_NODE	844:7	844:7	10	(
FIELD	844:8	844:13	10	tif -> tif_flags
LEAF_NODE	844:8	844:8	11	tif
LEAF_NODE	844:11	844:11	11	->
LEAF_NODE	844:13	844:13	11	tif_flags
LEAF_NODE	844:22	844:22	10	&
FIELD	844:23	844:23	10	TIFF_BIGTIFF
LEAF_NODE	844:23	844:23	11	TIFF_BIGTIFF
LEAF_NODE	844:35	844:35	10	)
LEAF_NODE	844:36	844:36	7	)
STATEMENTS	845:3	845:3	7	
EXPR_STATEMENT	845:3	845:22	8	dirsize = 2 + ndir * 12 + 4 ;
EXPR	845:3	845:3	9	dirsize = 2 + ndir * 12 + 4
ASSIGN	845:3	845:11	10	dirsize = 2 + ndir * 12 + 4
LVAL	845:3	845:3	11	dirsize
FIELD	845:3	845:3	12	dirsize
LEAF_NODE	845:3	845:3	13	dirsize
ASSIGN_OP	845:10	845:10	11	=
LEAF_NODE	845:10	845:10	12	=
RVAL	845:11	845:21	11	2 + ndir * 12 + 4
FIELD	845:11	845:11	12	2
LEAF_NODE	845:11	845:11	13	2
LEAF_NODE	845:12	845:12	12	+
FIELD	845:13	845:13	12	ndir
LEAF_NODE	845:13	845:13	13	ndir
LEAF_NODE	845:17	845:17	12	*
FIELD	845:18	845:18	12	12
LEAF_NODE	845:18	845:18	13	12
LEAF_NODE	845:20	845:20	12	+
FIELD	845:21	845:21	12	4
LEAF_NODE	845:21	845:21	13	4
LEAF_NODE	845:22	845:22	9	;
SELECTION	846:2	847:3	6	
KEYWORD	846:2	846:2	7	else
LEAF_NODE	846:2	846:2	8	else
STATEMENTS	847:3	847:3	7	
EXPR_STATEMENT	847:3	847:22	8	dirsize = 8 + ndir * 20 + 8 ;
EXPR	847:3	847:3	9	dirsize = 8 + ndir * 20 + 8
ASSIGN	847:3	847:11	10	dirsize = 8 + ndir * 20 + 8
LVAL	847:3	847:3	11	dirsize
FIELD	847:3	847:3	12	dirsize
LEAF_NODE	847:3	847:3	13	dirsize
ASSIGN_OP	847:10	847:10	11	=
LEAF_NODE	847:10	847:10	12	=
RVAL	847:11	847:21	11	8 + ndir * 20 + 8
FIELD	847:11	847:11	12	8
LEAF_NODE	847:11	847:11	13	8
LEAF_NODE	847:12	847:12	12	+
FIELD	847:13	847:13	12	ndir
LEAF_NODE	847:13	847:13	13	ndir
LEAF_NODE	847:17	847:17	12	*
FIELD	847:18	847:18	12	20
LEAF_NODE	847:18	847:18	13	20
LEAF_NODE	847:20	847:20	12	+
FIELD	847:21	847:21	12	8
LEAF_NODE	847:21	847:21	13	8
LEAF_NODE	847:22	847:22	9	;
EXPR_STATEMENT	848:2	848:42	6	tif -> tif_dataoff = tif -> tif_diroff + dirsize ;
EXPR	848:2	848:2	7	tif -> tif_dataoff = tif -> tif_diroff + dirsize
ASSIGN	848:2	848:19	8	tif -> tif_dataoff = tif -> tif_diroff + dirsize
LVAL	848:2	848:2	9	tif -> tif_dataoff
FIELD	848:2	848:7	10	tif -> tif_dataoff
LEAF_NODE	848:2	848:2	11	tif
LEAF_NODE	848:5	848:5	11	->
LEAF_NODE	848:7	848:7	11	tif_dataoff
ASSIGN_OP	848:18	848:18	9	=
LEAF_NODE	848:18	848:18	10	=
RVAL	848:19	848:35	9	tif -> tif_diroff + dirsize
FIELD	848:19	848:24	10	tif -> tif_diroff
LEAF_NODE	848:19	848:19	11	tif
LEAF_NODE	848:22	848:22	11	->
LEAF_NODE	848:24	848:24	11	tif_diroff
LEAF_NODE	848:34	848:34	10	+
FIELD	848:35	848:35	10	dirsize
LEAF_NODE	848:35	848:35	11	dirsize
LEAF_NODE	848:42	848:42	7	;
SELECTION	849:2	850:3	6	
KEYWORD	849:2	849:2	7	if
LEAF_NODE	849:2	849:2	8	if
LEAF_NODE	849:5	849:5	7	(
CONDITION	849:6	849:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	849:6	849:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	849:6	849:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	849:6	849:6	10	!
LEAF_NODE	849:6	849:6	11	!
LEAF_NODE	849:7	849:7	10	(
FIELD	849:8	849:13	10	tif -> tif_flags
LEAF_NODE	849:8	849:8	11	tif
LEAF_NODE	849:11	849:11	11	->
LEAF_NODE	849:13	849:13	11	tif_flags
LEAF_NODE	849:22	849:22	10	&
FIELD	849:23	849:23	10	TIFF_BIGTIFF
LEAF_NODE	849:23	849:23	11	TIFF_BIGTIFF
LEAF_NODE	849:35	849:35	10	)
LEAF_NODE	849:36	849:36	7	)
STATEMENTS	850:3	850:3	7	
EXPR_STATEMENT	850:3	850:44	8	tif -> tif_dataoff = ( uint32 ) tif -> tif_dataoff ;
EXPR	850:3	850:3	9	tif -> tif_dataoff = ( uint32 ) tif -> tif_dataoff
ASSIGN	850:3	850:20	10	tif -> tif_dataoff = ( uint32 ) tif -> tif_dataoff
LVAL	850:3	850:3	11	tif -> tif_dataoff
FIELD	850:3	850:8	12	tif -> tif_dataoff
LEAF_NODE	850:3	850:3	13	tif
LEAF_NODE	850:6	850:6	13	->
LEAF_NODE	850:8	850:8	13	tif_dataoff
ASSIGN_OP	850:19	850:19	11	=
LEAF_NODE	850:19	850:19	12	=
RVAL	850:20	850:28	11	( uint32 ) tif -> tif_dataoff
LEAF_NODE	850:20	850:20	12	(
TYPE_NAME	850:21	850:21	12	uint32
LEAF_NODE	850:21	850:21	13	uint32
LEAF_NODE	850:27	850:27	12	)
FIELD	850:28	850:33	12	tif -> tif_dataoff
LEAF_NODE	850:28	850:28	13	tif
LEAF_NODE	850:31	850:31	13	->
LEAF_NODE	850:33	850:33	13	tif_dataoff
LEAF_NODE	850:44	850:44	9	;
SELECTION	851:2	852:2	6	
KEYWORD	851:2	851:2	7	if
LEAF_NODE	851:2	851:2	8	if
LEAF_NODE	851:5	851:5	7	(
CONDITION	851:6	851:6	7	( tif -> tif_dataoff < tif -> tif_diroff ) || ( tif -> tif_dataoff < ( uint64 ) dirsize )
EXPR	851:6	851:6	8	( tif -> tif_dataoff < tif -> tif_diroff ) || ( tif -> tif_dataoff < ( uint64 ) dirsize )
OR	851:6	851:42	9	( tif -> tif_dataoff < tif -> tif_diroff ) || ( tif -> tif_dataoff < ( uint64 ) dirsize )
EXPR	851:6	851:39	10	( tif -> tif_dataoff < tif -> tif_diroff )
LEAF_NODE	851:6	851:6	11	(
FIELD	851:7	851:12	11	tif -> tif_dataoff
LEAF_NODE	851:7	851:7	12	tif
LEAF_NODE	851:10	851:10	12	->
LEAF_NODE	851:12	851:12	12	tif_dataoff
REL_OPERATOR	851:23	851:23	11	<
LEAF_NODE	851:23	851:23	12	<
FIELD	851:24	851:29	11	tif -> tif_diroff
LEAF_NODE	851:24	851:24	12	tif
LEAF_NODE	851:27	851:27	12	->
LEAF_NODE	851:29	851:29	12	tif_diroff
LEAF_NODE	851:39	851:39	11	)
LEAF_NODE	851:40	851:40	10	||
EXPR	851:42	851:75	10	( tif -> tif_dataoff < ( uint64 ) dirsize )
LEAF_NODE	851:42	851:42	11	(
FIELD	851:43	851:48	11	tif -> tif_dataoff
LEAF_NODE	851:43	851:43	12	tif
LEAF_NODE	851:46	851:46	12	->
LEAF_NODE	851:48	851:48	12	tif_dataoff
REL_OPERATOR	851:59	851:59	11	<
LEAF_NODE	851:59	851:59	12	<
LEAF_NODE	851:60	851:60	11	(
TYPE_NAME	851:61	851:61	11	uint64
LEAF_NODE	851:61	851:61	12	uint64
LEAF_NODE	851:67	851:67	11	)
FIELD	851:68	851:68	11	dirsize
LEAF_NODE	851:68	851:68	12	dirsize
LEAF_NODE	851:75	851:75	11	)
LEAF_NODE	851:76	851:76	7	)
STATEMENTS	852:2	855:2	7	
LEAF_NODE	852:2	852:2	8	{
STATEMENTS	853:3	854:3	8	
EXPR_STATEMENT	853:3	853:77	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Maximum TIFF file size exceeded" ) ;
EXPR	853:3	853:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Maximum TIFF file size exceeded" )
FUNCTION_CALL	853:3	853:76	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Maximum TIFF file size exceeded" )
CALLEE	853:3	853:3	12	TIFFErrorExt
LEAF_NODE	853:3	853:3	13	TIFFErrorExt
LEAF_NODE	853:15	853:15	12	(
ARGUMENT	853:16	853:16	12	tif -> tif_clientdata
FIELD	853:16	853:21	13	tif -> tif_clientdata
LEAF_NODE	853:16	853:16	14	tif
LEAF_NODE	853:19	853:19	14	->
LEAF_NODE	853:21	853:21	14	tif_clientdata
LEAF_NODE	853:35	853:35	12	,
ARGUMENT	853:36	853:36	12	module
FIELD	853:36	853:36	13	module
LEAF_NODE	853:36	853:36	14	module
LEAF_NODE	853:42	853:42	12	,
ARGUMENT	853:43	853:43	12	"Maximum TIFF file size exceeded"
FIELD	853:43	853:43	13	"Maximum TIFF file size exceeded"
LEAF_NODE	853:43	853:43	14	"Maximum TIFF file size exceeded"
LEAF_NODE	853:76	853:76	12	)
LEAF_NODE	853:77	853:77	10	;
JUMP_STATEMENT	854:3	854:11	9	goto bad ;
KEYWORD	854:3	854:3	10	goto
LEAF_NODE	854:3	854:3	11	goto
DESTINATION	854:8	854:8	10	bad
LEAF_NODE	854:8	854:8	11	bad
LEAF_NODE	854:11	854:11	10	;
LEAF_NODE	855:2	855:2	8	}
SELECTION	856:2	857:3	6	
KEYWORD	856:2	856:2	7	if
LEAF_NODE	856:2	856:2	8	if
LEAF_NODE	856:5	856:5	7	(
CONDITION	856:6	856:6	7	tif -> tif_dataoff & 1
EXPR	856:6	856:23	8	tif -> tif_dataoff & 1
FIELD	856:6	856:11	9	tif -> tif_dataoff
LEAF_NODE	856:6	856:6	10	tif
LEAF_NODE	856:9	856:9	10	->
LEAF_NODE	856:11	856:11	10	tif_dataoff
LEAF_NODE	856:22	856:22	9	&
FIELD	856:23	856:23	9	1
LEAF_NODE	856:23	856:23	10	1
LEAF_NODE	856:24	856:24	7	)
STATEMENTS	857:3	857:3	7	
EXPR_STATEMENT	857:3	857:21	8	tif -> tif_dataoff ++ ;
EXPR	857:3	857:3	9	tif -> tif_dataoff ++
FIELD	857:3	857:19	10	tif -> tif_dataoff ++
LEAF_NODE	857:3	857:3	11	tif
LEAF_NODE	857:6	857:6	11	->
LEAF_NODE	857:8	857:8	11	tif_dataoff
LEAF_NODE	857:19	857:19	11	++
LEAF_NODE	857:21	857:21	9	;
SELECTION	858:2	859:3	6	
KEYWORD	858:2	858:2	7	if
LEAF_NODE	858:2	858:2	8	if
LEAF_NODE	858:5	858:5	7	(
CONDITION	858:6	858:6	7	isimage
EXPR	858:6	858:6	8	isimage
FIELD	858:6	858:6	9	isimage
LEAF_NODE	858:6	858:6	10	isimage
LEAF_NODE	858:13	858:13	7	)
STATEMENTS	859:3	859:3	7	
EXPR_STATEMENT	859:3	859:20	8	tif -> tif_curdir ++ ;
EXPR	859:3	859:3	9	tif -> tif_curdir ++
FIELD	859:3	859:18	10	tif -> tif_curdir ++
LEAF_NODE	859:3	859:3	11	tif
LEAF_NODE	859:6	859:6	11	->
LEAF_NODE	859:8	859:8	11	tif_curdir
LEAF_NODE	859:18	859:18	11	++
LEAF_NODE	859:20	859:20	9	;
LEAF_NODE	860:1	860:1	5	}
SELECTION	861:1	862:1	3	
KEYWORD	861:1	861:1	4	if
LEAF_NODE	861:1	861:1	5	if
LEAF_NODE	861:4	861:4	4	(
CONDITION	861:5	861:5	4	isimage
EXPR	861:5	861:5	5	isimage
FIELD	861:5	861:5	6	isimage
LEAF_NODE	861:5	861:5	7	isimage
LEAF_NODE	861:12	861:12	4	)
STATEMENTS	862:1	883:1	4	
LEAF_NODE	862:1	862:1	5	{
STATEMENTS	863:2	863:2	5	
SELECTION	863:2	864:2	6	
KEYWORD	863:2	863:2	7	if
LEAF_NODE	863:2	863:2	8	if
LEAF_NODE	863:5	863:5	7	(
CONDITION	863:6	863:6	7	TIFFFieldSet ( tif , FIELD_SUBIFD ) && ( tif -> tif_subifdoff == 0 )
EXPR	863:6	863:6	8	TIFFFieldSet ( tif , FIELD_SUBIFD ) && ( tif -> tif_subifdoff == 0 )
AND	863:6	863:38	9	TIFFFieldSet ( tif , FIELD_SUBIFD ) && ( tif -> tif_subifdoff == 0 )
EXPR	863:6	863:6	10	TIFFFieldSet ( tif , FIELD_SUBIFD )
FUNCTION_CALL	863:6	863:35	11	TIFFFieldSet ( tif , FIELD_SUBIFD )
CALLEE	863:6	863:6	12	TIFFFieldSet
LEAF_NODE	863:6	863:6	13	TIFFFieldSet
LEAF_NODE	863:18	863:18	12	(
ARGUMENT	863:19	863:19	12	tif
FIELD	863:19	863:19	13	tif
LEAF_NODE	863:19	863:19	14	tif
LEAF_NODE	863:22	863:22	12	,
ARGUMENT	863:23	863:23	12	FIELD_SUBIFD
FIELD	863:23	863:23	13	FIELD_SUBIFD
LEAF_NODE	863:23	863:23	14	FIELD_SUBIFD
LEAF_NODE	863:35	863:35	12	)
LEAF_NODE	863:36	863:36	10	&&
EXPR	863:38	863:60	10	( tif -> tif_subifdoff == 0 )
LEAF_NODE	863:38	863:38	11	(
FIELD	863:39	863:44	11	tif -> tif_subifdoff
LEAF_NODE	863:39	863:39	12	tif
LEAF_NODE	863:42	863:42	12	->
LEAF_NODE	863:44	863:44	12	tif_subifdoff
EQ_OPERATOR	863:57	863:57	11	==
LEAF_NODE	863:57	863:57	12	==
FIELD	863:59	863:59	11	0
LEAF_NODE	863:59	863:59	12	0
LEAF_NODE	863:60	863:60	11	)
LEAF_NODE	863:61	863:61	7	)
STATEMENTS	864:2	882:2	7	
LEAF_NODE	864:2	864:2	8	{
STATEMENTS	865:3	880:3	8	
SIMPLE_DECL	865:3	865:12	9	uint32 na ;
VAR_DECL	865:3	865:10	10	uint32 na
TYPE	865:3	865:3	11	uint32
TYPE_NAME	865:3	865:3	12	uint32
LEAF_NODE	865:3	865:3	13	uint32
NAME	865:10	865:10	11	na
LEAF_NODE	865:10	865:10	12	na
LEAF_NODE	865:12	865:12	10	;
SIMPLE_DECL	866:3	866:19	9	TIFFDirEntry * nb ;
VAR_DECL	866:3	866:17	10	TIFFDirEntry * nb
TYPE	866:3	866:15	11	TIFFDirEntry *
TYPE_NAME	866:3	866:3	12	TIFFDirEntry
LEAF_NODE	866:3	866:3	13	TIFFDirEntry
POINTER	866:15	866:15	12	*
LEAF_NODE	866:15	866:15	13	*
NAME	866:17	866:17	11	nb
LEAF_NODE	866:17	866:17	12	nb
LEAF_NODE	866:19	866:19	10	;
ITERATION	867:3	868:3	9	
KEYWORD	867:3	867:3	10	for
LEAF_NODE	867:3	867:3	11	for
LEAF_NODE	867:7	867:7	10	(
FOR_INIT	867:8	867:20	10	na = 0 , nb = dir ;
EXPR	867:8	867:14	11	na = 0 , nb = dir
ASSIGN	867:8	867:11	12	na = 0
LVAL	867:8	867:8	13	na
FIELD	867:8	867:8	14	na
LEAF_NODE	867:8	867:8	15	na
ASSIGN_OP	867:10	867:10	13	=
LEAF_NODE	867:10	867:10	14	=
RVAL	867:11	867:11	13	0
FIELD	867:11	867:11	14	0
LEAF_NODE	867:11	867:11	15	0
LEAF_NODE	867:12	867:12	12	,
ASSIGN	867:14	867:17	12	nb = dir
LVAL	867:14	867:14	13	nb
FIELD	867:14	867:14	14	nb
LEAF_NODE	867:14	867:14	15	nb
ASSIGN_OP	867:16	867:16	13	=
LEAF_NODE	867:16	867:16	14	=
RVAL	867:17	867:17	13	dir
FIELD	867:17	867:17	14	dir
LEAF_NODE	867:17	867:17	15	dir
LEAF_NODE	867:20	867:20	11	;
LEAF_NODE	0:0	0:0	10	CONDITION
LEAF_NODE	867:22	867:22	10	;
FOR_EXPR	867:24	867:24	10	na ++ , nb ++
EXPR	867:24	867:30	11	na ++ , nb ++
FIELD	867:24	867:26	12	na ++
LEAF_NODE	867:24	867:24	13	na
LEAF_NODE	867:26	867:26	13	++
LEAF_NODE	867:28	867:28	12	,
FIELD	867:30	867:32	12	nb ++
LEAF_NODE	867:30	867:30	13	nb
LEAF_NODE	867:32	867:32	13	++
LEAF_NODE	867:34	867:34	10	)
STATEMENTS	868:3	877:3	10	
LEAF_NODE	868:3	868:3	11	{
STATEMENTS	869:4	875:4	11	
SELECTION	869:4	870:32	12	
KEYWORD	869:4	869:4	13	if
LEAF_NODE	869:4	869:4	14	if
LEAF_NODE	869:6	869:6	13	(
CONDITION	869:8	869:8	13	na == ndir
EXPR	869:8	869:14	14	na == ndir
FIELD	869:8	869:8	15	na
LEAF_NODE	869:8	869:8	16	na
EQ_OPERATOR	869:11	869:11	15	==
LEAF_NODE	869:11	869:11	16	==
FIELD	869:14	869:14	15	ndir
LEAF_NODE	869:14	869:14	16	ndir
LEAF_NODE	869:19	869:19	13	)
STATEMENTS	870:32	874:32	13	
LEAF_NODE	870:32	870:32	14	{
STATEMENTS	871:36	873:36	14	
EXPR_STATEMENT	871:36	872:74	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot find SubIFD tag" ) ;
EXPR	871:36	871:36	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot find SubIFD tag" )
FUNCTION_CALL	871:36	872:73	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot find SubIFD tag" )
CALLEE	871:36	871:36	18	TIFFErrorExt
LEAF_NODE	871:36	871:36	19	TIFFErrorExt
LEAF_NODE	871:48	871:48	18	(
ARGUMENT	871:49	871:49	18	tif -> tif_clientdata
FIELD	871:49	871:54	19	tif -> tif_clientdata
LEAF_NODE	871:49	871:49	20	tif
LEAF_NODE	871:52	871:52	20	->
LEAF_NODE	871:54	871:54	20	tif_clientdata
LEAF_NODE	871:68	871:68	18	,
ARGUMENT	871:69	871:69	18	module
FIELD	871:69	871:69	19	module
LEAF_NODE	871:69	871:69	20	module
LEAF_NODE	871:75	871:75	18	,
ARGUMENT	872:49	872:49	18	"Cannot find SubIFD tag"
FIELD	872:49	872:49	19	"Cannot find SubIFD tag"
LEAF_NODE	872:49	872:49	20	"Cannot find SubIFD tag"
LEAF_NODE	872:73	872:73	18	)
LEAF_NODE	872:74	872:74	16	;
JUMP_STATEMENT	873:36	873:44	15	goto bad ;
KEYWORD	873:36	873:36	16	goto
LEAF_NODE	873:36	873:36	17	goto
DESTINATION	873:41	873:41	16	bad
LEAF_NODE	873:41	873:41	17	bad
LEAF_NODE	873:44	873:44	16	;
LEAF_NODE	874:32	874:32	14	}
SELECTION	875:4	876:5	12	
KEYWORD	875:4	875:4	13	if
LEAF_NODE	875:4	875:4	14	if
LEAF_NODE	875:7	875:7	13	(
CONDITION	875:8	875:8	13	nb -> tdir_tag == TIFFTAG_SUBIFD
EXPR	875:8	875:22	14	nb -> tdir_tag == TIFFTAG_SUBIFD
FIELD	875:8	875:12	15	nb -> tdir_tag
LEAF_NODE	875:8	875:8	16	nb
LEAF_NODE	875:10	875:10	16	->
LEAF_NODE	875:12	875:12	16	tdir_tag
EQ_OPERATOR	875:20	875:20	15	==
LEAF_NODE	875:20	875:20	16	==
FIELD	875:22	875:22	15	TIFFTAG_SUBIFD
LEAF_NODE	875:22	875:22	16	TIFFTAG_SUBIFD
LEAF_NODE	875:36	875:36	13	)
STATEMENTS	876:5	876:5	13	
JUMP_STATEMENT	876:5	876:10	14	break DESTINATION ;
KEYWORD	876:5	876:5	15	break
LEAF_NODE	876:5	876:5	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	876:10	876:10	15	;
LEAF_NODE	877:3	877:3	11	}
SELECTION	878:3	879:4	9	
KEYWORD	878:3	878:3	10	if
LEAF_NODE	878:3	878:3	11	if
LEAF_NODE	878:6	878:6	10	(
CONDITION	878:7	878:7	10	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	878:7	878:7	11	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	878:7	878:36	12	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	878:7	878:7	13	!
LEAF_NODE	878:7	878:7	14	!
LEAF_NODE	878:8	878:8	13	(
FIELD	878:9	878:14	13	tif -> tif_flags
LEAF_NODE	878:9	878:9	14	tif
LEAF_NODE	878:12	878:12	14	->
LEAF_NODE	878:14	878:14	14	tif_flags
LEAF_NODE	878:23	878:23	13	&
FIELD	878:24	878:24	13	TIFF_BIGTIFF
LEAF_NODE	878:24	878:24	14	TIFF_BIGTIFF
LEAF_NODE	878:36	878:36	13	)
LEAF_NODE	878:37	878:37	10	)
STATEMENTS	879:4	879:4	10	
EXPR_STATEMENT	879:4	879:48	11	tif -> tif_subifdoff = tif -> tif_diroff + 2 + na * 12 + 8 ;
EXPR	879:4	879:4	12	tif -> tif_subifdoff = tif -> tif_diroff + 2 + na * 12 + 8
ASSIGN	879:4	879:23	13	tif -> tif_subifdoff = tif -> tif_diroff + 2 + na * 12 + 8
LVAL	879:4	879:4	14	tif -> tif_subifdoff
FIELD	879:4	879:9	15	tif -> tif_subifdoff
LEAF_NODE	879:4	879:4	16	tif
LEAF_NODE	879:7	879:7	16	->
LEAF_NODE	879:9	879:9	16	tif_subifdoff
ASSIGN_OP	879:22	879:22	14	=
LEAF_NODE	879:22	879:22	15	=
RVAL	879:23	879:47	14	tif -> tif_diroff + 2 + na * 12 + 8
FIELD	879:23	879:28	15	tif -> tif_diroff
LEAF_NODE	879:23	879:23	16	tif
LEAF_NODE	879:26	879:26	16	->
LEAF_NODE	879:28	879:28	16	tif_diroff
LEAF_NODE	879:38	879:38	15	+
FIELD	879:39	879:39	15	2
LEAF_NODE	879:39	879:39	16	2
LEAF_NODE	879:40	879:40	15	+
FIELD	879:41	879:41	15	na
LEAF_NODE	879:41	879:41	16	na
LEAF_NODE	879:43	879:43	15	*
FIELD	879:44	879:44	15	12
LEAF_NODE	879:44	879:44	16	12
LEAF_NODE	879:46	879:46	15	+
FIELD	879:47	879:47	15	8
LEAF_NODE	879:47	879:47	16	8
LEAF_NODE	879:48	879:48	12	;
SELECTION	880:3	881:4	9	
KEYWORD	880:3	880:3	10	else
LEAF_NODE	880:3	880:3	11	else
STATEMENTS	881:4	881:4	10	
EXPR_STATEMENT	881:4	881:49	11	tif -> tif_subifdoff = tif -> tif_diroff + 8 + na * 20 + 12 ;
EXPR	881:4	881:4	12	tif -> tif_subifdoff = tif -> tif_diroff + 8 + na * 20 + 12
ASSIGN	881:4	881:23	13	tif -> tif_subifdoff = tif -> tif_diroff + 8 + na * 20 + 12
LVAL	881:4	881:4	14	tif -> tif_subifdoff
FIELD	881:4	881:9	15	tif -> tif_subifdoff
LEAF_NODE	881:4	881:4	16	tif
LEAF_NODE	881:7	881:7	16	->
LEAF_NODE	881:9	881:9	16	tif_subifdoff
ASSIGN_OP	881:22	881:22	14	=
LEAF_NODE	881:22	881:22	15	=
RVAL	881:23	881:47	14	tif -> tif_diroff + 8 + na * 20 + 12
FIELD	881:23	881:28	15	tif -> tif_diroff
LEAF_NODE	881:23	881:23	16	tif
LEAF_NODE	881:26	881:26	16	->
LEAF_NODE	881:28	881:28	16	tif_diroff
LEAF_NODE	881:38	881:38	15	+
FIELD	881:39	881:39	15	8
LEAF_NODE	881:39	881:39	16	8
LEAF_NODE	881:40	881:40	15	+
FIELD	881:41	881:41	15	na
LEAF_NODE	881:41	881:41	16	na
LEAF_NODE	881:43	881:43	15	*
FIELD	881:44	881:44	15	20
LEAF_NODE	881:44	881:44	16	20
LEAF_NODE	881:46	881:46	15	+
FIELD	881:47	881:47	15	12
LEAF_NODE	881:47	881:47	16	12
LEAF_NODE	881:49	881:49	12	;
LEAF_NODE	882:2	882:2	8	}
LEAF_NODE	883:1	883:1	5	}
EXPR_STATEMENT	884:1	884:28	3	dirmem = _TIFFmalloc ( dirsize ) ;
EXPR	884:1	884:1	4	dirmem = _TIFFmalloc ( dirsize )
ASSIGN	884:1	884:8	5	dirmem = _TIFFmalloc ( dirsize )
LVAL	884:1	884:1	6	dirmem
FIELD	884:1	884:1	7	dirmem
LEAF_NODE	884:1	884:1	8	dirmem
ASSIGN_OP	884:7	884:7	6	=
LEAF_NODE	884:7	884:7	7	=
RVAL	884:8	884:8	6	_TIFFmalloc ( dirsize )
FUNCTION_CALL	884:8	884:27	7	_TIFFmalloc ( dirsize )
CALLEE	884:8	884:8	8	_TIFFmalloc
LEAF_NODE	884:8	884:8	9	_TIFFmalloc
LEAF_NODE	884:19	884:19	8	(
ARGUMENT	884:20	884:20	8	dirsize
FIELD	884:20	884:20	9	dirsize
LEAF_NODE	884:20	884:20	10	dirsize
LEAF_NODE	884:27	884:27	8	)
LEAF_NODE	884:28	884:28	4	;
SELECTION	885:1	886:1	3	
KEYWORD	885:1	885:1	4	if
LEAF_NODE	885:1	885:1	5	if
LEAF_NODE	885:4	885:4	4	(
CONDITION	885:5	885:5	4	dirmem == NULL
EXPR	885:5	885:13	5	dirmem == NULL
FIELD	885:5	885:5	6	dirmem
LEAF_NODE	885:5	885:5	7	dirmem
EQ_OPERATOR	885:11	885:11	6	==
LEAF_NODE	885:11	885:11	7	==
FIELD	885:13	885:13	6	NULL
LEAF_NODE	885:13	885:13	7	NULL
LEAF_NODE	885:17	885:17	4	)
STATEMENTS	886:1	889:1	4	
LEAF_NODE	886:1	886:1	5	{
STATEMENTS	887:2	888:2	5	
EXPR_STATEMENT	887:2	887:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	887:2	887:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	887:2	887:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	887:2	887:2	9	TIFFErrorExt
LEAF_NODE	887:2	887:2	10	TIFFErrorExt
LEAF_NODE	887:14	887:14	9	(
ARGUMENT	887:15	887:15	9	tif -> tif_clientdata
FIELD	887:15	887:20	10	tif -> tif_clientdata
LEAF_NODE	887:15	887:15	11	tif
LEAF_NODE	887:18	887:18	11	->
LEAF_NODE	887:20	887:20	11	tif_clientdata
LEAF_NODE	887:34	887:34	9	,
ARGUMENT	887:35	887:35	9	module
FIELD	887:35	887:35	10	module
LEAF_NODE	887:35	887:35	11	module
LEAF_NODE	887:41	887:41	9	,
ARGUMENT	887:42	887:42	9	"Out of memory"
FIELD	887:42	887:42	10	"Out of memory"
LEAF_NODE	887:42	887:42	11	"Out of memory"
LEAF_NODE	887:57	887:57	9	)
LEAF_NODE	887:58	887:58	7	;
JUMP_STATEMENT	888:2	888:10	6	goto bad ;
KEYWORD	888:2	888:2	7	goto
LEAF_NODE	888:2	888:2	8	goto
DESTINATION	888:7	888:7	7	bad
LEAF_NODE	888:7	888:7	8	bad
LEAF_NODE	888:10	888:10	7	;
LEAF_NODE	889:1	889:1	5	}
SELECTION	890:1	891:1	3	
KEYWORD	890:1	890:1	4	if
LEAF_NODE	890:1	890:1	5	if
LEAF_NODE	890:4	890:4	4	(
CONDITION	890:5	890:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	890:5	890:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	890:5	890:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	890:5	890:5	7	!
LEAF_NODE	890:5	890:5	8	!
LEAF_NODE	890:6	890:6	7	(
FIELD	890:7	890:12	7	tif -> tif_flags
LEAF_NODE	890:7	890:7	8	tif
LEAF_NODE	890:10	890:10	8	->
LEAF_NODE	890:12	890:12	8	tif_flags
LEAF_NODE	890:21	890:21	7	&
FIELD	890:22	890:22	7	TIFF_BIGTIFF
LEAF_NODE	890:22	890:22	8	TIFF_BIGTIFF
LEAF_NODE	890:34	890:34	7	)
LEAF_NODE	890:35	890:35	4	)
STATEMENTS	891:1	926:1	4	
LEAF_NODE	891:1	891:1	5	{
STATEMENTS	892:2	925:2	5	
SIMPLE_DECL	892:2	892:10	6	uint8 * n ;
VAR_DECL	892:2	892:9	7	uint8 * n
TYPE	892:2	892:7	8	uint8 *
TYPE_NAME	892:2	892:2	9	uint8
LEAF_NODE	892:2	892:2	10	uint8
POINTER	892:7	892:7	9	*
LEAF_NODE	892:7	892:7	10	*
NAME	892:9	892:9	8	n
LEAF_NODE	892:9	892:9	9	n
LEAF_NODE	892:10	892:10	7	;
SIMPLE_DECL	893:2	893:13	6	uint32 nTmp ;
VAR_DECL	893:2	893:9	7	uint32 nTmp
TYPE	893:2	893:2	8	uint32
TYPE_NAME	893:2	893:2	9	uint32
LEAF_NODE	893:2	893:2	10	uint32
NAME	893:9	893:9	8	nTmp
LEAF_NODE	893:9	893:9	9	nTmp
LEAF_NODE	893:13	893:13	7	;
SIMPLE_DECL	894:2	894:17	6	TIFFDirEntry * o ;
VAR_DECL	894:2	894:16	7	TIFFDirEntry * o
TYPE	894:2	894:14	8	TIFFDirEntry *
TYPE_NAME	894:2	894:2	9	TIFFDirEntry
LEAF_NODE	894:2	894:2	10	TIFFDirEntry
POINTER	894:14	894:14	9	*
LEAF_NODE	894:14	894:14	10	*
NAME	894:16	894:16	8	o
LEAF_NODE	894:16	894:16	9	o
LEAF_NODE	894:17	894:17	7	;
EXPR_STATEMENT	895:2	895:10	6	n = dirmem ;
EXPR	895:2	895:2	7	n = dirmem
ASSIGN	895:2	895:4	8	n = dirmem
LVAL	895:2	895:2	9	n
FIELD	895:2	895:2	10	n
LEAF_NODE	895:2	895:2	11	n
ASSIGN_OP	895:3	895:3	9	=
LEAF_NODE	895:3	895:3	10	=
RVAL	895:4	895:4	9	dirmem
FIELD	895:4	895:4	10	dirmem
LEAF_NODE	895:4	895:4	11	dirmem
LEAF_NODE	895:10	895:10	7	;
LEAF_NODE	896:2	896:2	6	*
EXPR_STATEMENT	896:3	896:26	6	( uint16 * ) n = ( uint16 ) ndir ;
EXPR	896:3	896:3	7	( uint16 * ) n = ( uint16 ) ndir
ASSIGN	896:3	896:14	8	( uint16 * ) n = ( uint16 ) ndir
LVAL	896:3	896:12	9	( uint16 * ) n
LEAF_NODE	896:3	896:3	10	(
TYPE_NAME	896:4	896:4	10	uint16
LEAF_NODE	896:4	896:4	11	uint16
LEAF_NODE	896:10	896:10	10	*
LEAF_NODE	896:11	896:11	10	)
FIELD	896:12	896:12	10	n
LEAF_NODE	896:12	896:12	11	n
ASSIGN_OP	896:13	896:13	9	=
LEAF_NODE	896:13	896:13	10	=
RVAL	896:14	896:22	9	( uint16 ) ndir
LEAF_NODE	896:14	896:14	10	(
TYPE_NAME	896:15	896:15	10	uint16
LEAF_NODE	896:15	896:15	11	uint16
LEAF_NODE	896:21	896:21	10	)
FIELD	896:22	896:22	10	ndir
LEAF_NODE	896:22	896:22	11	ndir
LEAF_NODE	896:26	896:26	7	;
SELECTION	897:2	898:3	6	
KEYWORD	897:2	897:2	7	if
LEAF_NODE	897:2	897:2	8	if
LEAF_NODE	897:5	897:5	7	(
CONDITION	897:6	897:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	897:6	897:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	897:6	897:11	9	tif -> tif_flags
LEAF_NODE	897:6	897:6	10	tif
LEAF_NODE	897:9	897:9	10	->
LEAF_NODE	897:11	897:11	10	tif_flags
LEAF_NODE	897:20	897:20	9	&
FIELD	897:21	897:21	9	TIFF_SWAB
LEAF_NODE	897:21	897:21	10	TIFF_SWAB
LEAF_NODE	897:30	897:30	7	)
STATEMENTS	898:3	898:3	7	
EXPR_STATEMENT	898:3	898:28	8	TIFFSwabShort ( ( uint16 * ) n ) ;
EXPR	898:3	898:3	9	TIFFSwabShort ( ( uint16 * ) n )
FUNCTION_CALL	898:3	898:27	10	TIFFSwabShort ( ( uint16 * ) n )
CALLEE	898:3	898:3	11	TIFFSwabShort
LEAF_NODE	898:3	898:3	12	TIFFSwabShort
LEAF_NODE	898:16	898:16	11	(
ARGUMENT	898:17	898:26	11	( uint16 * ) n
LEAF_NODE	898:17	898:17	12	(
TYPE_NAME	898:18	898:18	12	uint16
LEAF_NODE	898:18	898:18	13	uint16
LEAF_NODE	898:24	898:24	12	*
LEAF_NODE	898:25	898:25	12	)
FIELD	898:26	898:26	12	n
LEAF_NODE	898:26	898:26	13	n
LEAF_NODE	898:27	898:27	11	)
LEAF_NODE	898:28	898:28	9	;
EXPR_STATEMENT	899:2	899:6	6	n += 2 ;
EXPR	899:2	899:2	7	n += 2
ASSIGN	899:2	899:5	8	n += 2
LVAL	899:2	899:2	9	n
FIELD	899:2	899:2	10	n
LEAF_NODE	899:2	899:2	11	n
ASSIGN_OP	899:3	899:3	9	+=
LEAF_NODE	899:3	899:3	10	+=
RVAL	899:5	899:5	9	2
FIELD	899:5	899:5	10	2
LEAF_NODE	899:5	899:5	11	2
LEAF_NODE	899:6	899:6	7	;
EXPR_STATEMENT	900:2	900:7	6	o = dir ;
EXPR	900:2	900:2	7	o = dir
ASSIGN	900:2	900:4	8	o = dir
LVAL	900:2	900:2	9	o
FIELD	900:2	900:2	10	o
LEAF_NODE	900:2	900:2	11	o
ASSIGN_OP	900:3	900:3	9	=
LEAF_NODE	900:3	900:3	10	=
RVAL	900:4	900:4	9	dir
FIELD	900:4	900:4	10	dir
LEAF_NODE	900:4	900:4	11	dir
LEAF_NODE	900:7	900:7	7	;
ITERATION	901:2	902:2	6	
KEYWORD	901:2	901:2	7	for
LEAF_NODE	901:2	901:2	8	for
LEAF_NODE	901:6	901:6	7	(
FOR_INIT	901:7	901:10	7	m = 0 ;
EXPR	901:7	901:7	8	m = 0
ASSIGN	901:7	901:9	9	m = 0
LVAL	901:7	901:7	10	m
FIELD	901:7	901:7	11	m
LEAF_NODE	901:7	901:7	12	m
ASSIGN_OP	901:8	901:8	10	=
LEAF_NODE	901:8	901:8	11	=
RVAL	901:9	901:9	10	0
FIELD	901:9	901:9	11	0
LEAF_NODE	901:9	901:9	12	0
LEAF_NODE	901:10	901:10	8	;
CONDITION	901:12	901:12	7	m < ndir
EXPR	901:12	901:14	8	m < ndir
FIELD	901:12	901:12	9	m
LEAF_NODE	901:12	901:12	10	m
REL_OPERATOR	901:13	901:13	9	<
LEAF_NODE	901:13	901:13	10	<
FIELD	901:14	901:14	9	ndir
LEAF_NODE	901:14	901:14	10	ndir
LEAF_NODE	901:18	901:18	7	;
FOR_EXPR	901:20	901:20	7	m ++
EXPR	901:20	901:20	8	m ++
FIELD	901:20	901:21	9	m ++
LEAF_NODE	901:20	901:20	10	m
LEAF_NODE	901:21	901:21	10	++
LEAF_NODE	901:23	901:23	7	)
STATEMENTS	902:2	921:2	7	
LEAF_NODE	902:2	902:2	8	{
STATEMENTS	903:3	920:3	8	
LEAF_NODE	903:3	903:3	9	*
EXPR_STATEMENT	903:4	903:26	9	( uint16 * ) n = o -> tdir_tag ;
EXPR	903:4	903:4	10	( uint16 * ) n = o -> tdir_tag
ASSIGN	903:4	903:15	11	( uint16 * ) n = o -> tdir_tag
LVAL	903:4	903:13	12	( uint16 * ) n
LEAF_NODE	903:4	903:4	13	(
TYPE_NAME	903:5	903:5	13	uint16
LEAF_NODE	903:5	903:5	14	uint16
LEAF_NODE	903:11	903:11	13	*
LEAF_NODE	903:12	903:12	13	)
FIELD	903:13	903:13	13	n
LEAF_NODE	903:13	903:13	14	n
ASSIGN_OP	903:14	903:14	12	=
LEAF_NODE	903:14	903:14	13	=
RVAL	903:15	903:15	12	o -> tdir_tag
FIELD	903:15	903:18	13	o -> tdir_tag
LEAF_NODE	903:15	903:15	14	o
LEAF_NODE	903:16	903:16	14	->
LEAF_NODE	903:18	903:18	14	tdir_tag
LEAF_NODE	903:26	903:26	10	;
SELECTION	904:3	905:4	9	
KEYWORD	904:3	904:3	10	if
LEAF_NODE	904:3	904:3	11	if
LEAF_NODE	904:6	904:6	10	(
CONDITION	904:7	904:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	904:7	904:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	904:7	904:12	12	tif -> tif_flags
LEAF_NODE	904:7	904:7	13	tif
LEAF_NODE	904:10	904:10	13	->
LEAF_NODE	904:12	904:12	13	tif_flags
LEAF_NODE	904:21	904:21	12	&
FIELD	904:22	904:22	12	TIFF_SWAB
LEAF_NODE	904:22	904:22	13	TIFF_SWAB
LEAF_NODE	904:31	904:31	10	)
STATEMENTS	905:4	905:4	10	
EXPR_STATEMENT	905:4	905:29	11	TIFFSwabShort ( ( uint16 * ) n ) ;
EXPR	905:4	905:4	12	TIFFSwabShort ( ( uint16 * ) n )
FUNCTION_CALL	905:4	905:28	13	TIFFSwabShort ( ( uint16 * ) n )
CALLEE	905:4	905:4	14	TIFFSwabShort
LEAF_NODE	905:4	905:4	15	TIFFSwabShort
LEAF_NODE	905:17	905:17	14	(
ARGUMENT	905:18	905:27	14	( uint16 * ) n
LEAF_NODE	905:18	905:18	15	(
TYPE_NAME	905:19	905:19	15	uint16
LEAF_NODE	905:19	905:19	16	uint16
LEAF_NODE	905:25	905:25	15	*
LEAF_NODE	905:26	905:26	15	)
FIELD	905:27	905:27	15	n
LEAF_NODE	905:27	905:27	16	n
LEAF_NODE	905:28	905:28	14	)
LEAF_NODE	905:29	905:29	12	;
EXPR_STATEMENT	906:3	906:7	9	n += 2 ;
EXPR	906:3	906:3	10	n += 2
ASSIGN	906:3	906:6	11	n += 2
LVAL	906:3	906:3	12	n
FIELD	906:3	906:3	13	n
LEAF_NODE	906:3	906:3	14	n
ASSIGN_OP	906:4	906:4	12	+=
LEAF_NODE	906:4	906:4	13	+=
RVAL	906:6	906:6	12	2
FIELD	906:6	906:6	13	2
LEAF_NODE	906:6	906:6	14	2
LEAF_NODE	906:7	906:7	10	;
LEAF_NODE	907:3	907:3	9	*
EXPR_STATEMENT	907:4	907:27	9	( uint16 * ) n = o -> tdir_type ;
EXPR	907:4	907:4	10	( uint16 * ) n = o -> tdir_type
ASSIGN	907:4	907:15	11	( uint16 * ) n = o -> tdir_type
LVAL	907:4	907:13	12	( uint16 * ) n
LEAF_NODE	907:4	907:4	13	(
TYPE_NAME	907:5	907:5	13	uint16
LEAF_NODE	907:5	907:5	14	uint16
LEAF_NODE	907:11	907:11	13	*
LEAF_NODE	907:12	907:12	13	)
FIELD	907:13	907:13	13	n
LEAF_NODE	907:13	907:13	14	n
ASSIGN_OP	907:14	907:14	12	=
LEAF_NODE	907:14	907:14	13	=
RVAL	907:15	907:15	12	o -> tdir_type
FIELD	907:15	907:18	13	o -> tdir_type
LEAF_NODE	907:15	907:15	14	o
LEAF_NODE	907:16	907:16	14	->
LEAF_NODE	907:18	907:18	14	tdir_type
LEAF_NODE	907:27	907:27	10	;
SELECTION	908:3	909:4	9	
KEYWORD	908:3	908:3	10	if
LEAF_NODE	908:3	908:3	11	if
LEAF_NODE	908:6	908:6	10	(
CONDITION	908:7	908:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	908:7	908:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	908:7	908:12	12	tif -> tif_flags
LEAF_NODE	908:7	908:7	13	tif
LEAF_NODE	908:10	908:10	13	->
LEAF_NODE	908:12	908:12	13	tif_flags
LEAF_NODE	908:21	908:21	12	&
FIELD	908:22	908:22	12	TIFF_SWAB
LEAF_NODE	908:22	908:22	13	TIFF_SWAB
LEAF_NODE	908:31	908:31	10	)
STATEMENTS	909:4	909:4	10	
EXPR_STATEMENT	909:4	909:29	11	TIFFSwabShort ( ( uint16 * ) n ) ;
EXPR	909:4	909:4	12	TIFFSwabShort ( ( uint16 * ) n )
FUNCTION_CALL	909:4	909:28	13	TIFFSwabShort ( ( uint16 * ) n )
CALLEE	909:4	909:4	14	TIFFSwabShort
LEAF_NODE	909:4	909:4	15	TIFFSwabShort
LEAF_NODE	909:17	909:17	14	(
ARGUMENT	909:18	909:27	14	( uint16 * ) n
LEAF_NODE	909:18	909:18	15	(
TYPE_NAME	909:19	909:19	15	uint16
LEAF_NODE	909:19	909:19	16	uint16
LEAF_NODE	909:25	909:25	15	*
LEAF_NODE	909:26	909:26	15	)
FIELD	909:27	909:27	15	n
LEAF_NODE	909:27	909:27	16	n
LEAF_NODE	909:28	909:28	14	)
LEAF_NODE	909:29	909:29	12	;
EXPR_STATEMENT	910:3	910:7	9	n += 2 ;
EXPR	910:3	910:3	10	n += 2
ASSIGN	910:3	910:6	11	n += 2
LVAL	910:3	910:3	12	n
FIELD	910:3	910:3	13	n
LEAF_NODE	910:3	910:3	14	n
ASSIGN_OP	910:4	910:4	12	+=
LEAF_NODE	910:4	910:4	13	+=
RVAL	910:6	910:6	12	2
FIELD	910:6	910:6	13	2
LEAF_NODE	910:6	910:6	14	2
LEAF_NODE	910:7	910:7	10	;
EXPR_STATEMENT	911:3	911:31	9	nTmp = ( uint32 ) o -> tdir_count ;
EXPR	911:3	911:3	10	nTmp = ( uint32 ) o -> tdir_count
ASSIGN	911:3	911:10	11	nTmp = ( uint32 ) o -> tdir_count
LVAL	911:3	911:3	12	nTmp
FIELD	911:3	911:3	13	nTmp
LEAF_NODE	911:3	911:3	14	nTmp
ASSIGN_OP	911:8	911:8	12	=
LEAF_NODE	911:8	911:8	13	=
RVAL	911:10	911:18	12	( uint32 ) o -> tdir_count
LEAF_NODE	911:10	911:10	13	(
TYPE_NAME	911:11	911:11	13	uint32
LEAF_NODE	911:11	911:11	14	uint32
LEAF_NODE	911:17	911:17	13	)
FIELD	911:18	911:21	13	o -> tdir_count
LEAF_NODE	911:18	911:18	14	o
LEAF_NODE	911:19	911:19	14	->
LEAF_NODE	911:21	911:21	14	tdir_count
LEAF_NODE	911:31	911:31	10	;
EXPR_STATEMENT	912:3	912:25	9	_TIFFmemcpy ( n , & nTmp , 4 ) ;
EXPR	912:3	912:3	10	_TIFFmemcpy ( n , & nTmp , 4 )
FUNCTION_CALL	912:3	912:24	11	_TIFFmemcpy ( n , & nTmp , 4 )
CALLEE	912:3	912:3	12	_TIFFmemcpy
LEAF_NODE	912:3	912:3	13	_TIFFmemcpy
LEAF_NODE	912:14	912:14	12	(
ARGUMENT	912:15	912:15	12	n
FIELD	912:15	912:15	13	n
LEAF_NODE	912:15	912:15	14	n
LEAF_NODE	912:16	912:16	12	,
ARGUMENT	912:17	912:17	12	& nTmp
UNARY_EXPR	912:17	912:18	13	& nTmp
UNARY_OPERATOR	912:17	912:17	14	&
LEAF_NODE	912:17	912:17	15	&
FIELD	912:18	912:18	14	nTmp
LEAF_NODE	912:18	912:18	15	nTmp
LEAF_NODE	912:22	912:22	12	,
ARGUMENT	912:23	912:23	12	4
FIELD	912:23	912:23	13	4
LEAF_NODE	912:23	912:23	14	4
LEAF_NODE	912:24	912:24	12	)
LEAF_NODE	912:25	912:25	10	;
SELECTION	913:3	914:4	9	
KEYWORD	913:3	913:3	10	if
LEAF_NODE	913:3	913:3	11	if
LEAF_NODE	913:6	913:6	10	(
CONDITION	913:7	913:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	913:7	913:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	913:7	913:12	12	tif -> tif_flags
LEAF_NODE	913:7	913:7	13	tif
LEAF_NODE	913:10	913:10	13	->
LEAF_NODE	913:12	913:12	13	tif_flags
LEAF_NODE	913:21	913:21	12	&
FIELD	913:22	913:22	12	TIFF_SWAB
LEAF_NODE	913:22	913:22	13	TIFF_SWAB
LEAF_NODE	913:31	913:31	10	)
STATEMENTS	914:4	914:4	10	
EXPR_STATEMENT	914:4	914:28	11	TIFFSwabLong ( ( uint32 * ) n ) ;
EXPR	914:4	914:4	12	TIFFSwabLong ( ( uint32 * ) n )
FUNCTION_CALL	914:4	914:27	13	TIFFSwabLong ( ( uint32 * ) n )
CALLEE	914:4	914:4	14	TIFFSwabLong
LEAF_NODE	914:4	914:4	15	TIFFSwabLong
LEAF_NODE	914:16	914:16	14	(
ARGUMENT	914:17	914:26	14	( uint32 * ) n
LEAF_NODE	914:17	914:17	15	(
TYPE_NAME	914:18	914:18	15	uint32
LEAF_NODE	914:18	914:18	16	uint32
LEAF_NODE	914:24	914:24	15	*
LEAF_NODE	914:25	914:25	15	)
FIELD	914:26	914:26	15	n
LEAF_NODE	914:26	914:26	16	n
LEAF_NODE	914:27	914:27	14	)
LEAF_NODE	914:28	914:28	12	;
EXPR_STATEMENT	915:3	915:7	9	n += 4 ;
EXPR	915:3	915:3	10	n += 4
ASSIGN	915:3	915:6	11	n += 4
LVAL	915:3	915:3	12	n
FIELD	915:3	915:3	13	n
LEAF_NODE	915:3	915:3	14	n
ASSIGN_OP	915:4	915:4	12	+=
LEAF_NODE	915:4	915:4	13	+=
RVAL	915:6	915:6	12	4
FIELD	915:6	915:6	13	4
LEAF_NODE	915:6	915:6	14	4
LEAF_NODE	915:7	915:7	10	;
EXPR_STATEMENT	918:3	918:35	9	_TIFFmemcpy ( n , & o -> tdir_offset , 4 ) ;
EXPR	918:3	918:3	10	_TIFFmemcpy ( n , & o -> tdir_offset , 4 )
FUNCTION_CALL	918:3	918:34	11	_TIFFmemcpy ( n , & o -> tdir_offset , 4 )
CALLEE	918:3	918:3	12	_TIFFmemcpy
LEAF_NODE	918:3	918:3	13	_TIFFmemcpy
LEAF_NODE	918:14	918:14	12	(
ARGUMENT	918:15	918:15	12	n
FIELD	918:15	918:15	13	n
LEAF_NODE	918:15	918:15	14	n
LEAF_NODE	918:16	918:16	12	,
ARGUMENT	918:17	918:17	12	& o -> tdir_offset
UNARY_EXPR	918:17	918:18	13	& o -> tdir_offset
UNARY_OPERATOR	918:17	918:17	14	&
LEAF_NODE	918:17	918:17	15	&
FIELD	918:18	918:21	14	o -> tdir_offset
LEAF_NODE	918:18	918:18	15	o
LEAF_NODE	918:19	918:19	15	->
LEAF_NODE	918:21	918:21	15	tdir_offset
LEAF_NODE	918:32	918:32	12	,
ARGUMENT	918:33	918:33	12	4
FIELD	918:33	918:33	13	4
LEAF_NODE	918:33	918:33	14	4
LEAF_NODE	918:34	918:34	12	)
LEAF_NODE	918:35	918:35	10	;
EXPR_STATEMENT	919:3	919:7	9	n += 4 ;
EXPR	919:3	919:3	10	n += 4
ASSIGN	919:3	919:6	11	n += 4
LVAL	919:3	919:3	12	n
FIELD	919:3	919:3	13	n
LEAF_NODE	919:3	919:3	14	n
ASSIGN_OP	919:4	919:4	12	+=
LEAF_NODE	919:4	919:4	13	+=
RVAL	919:6	919:6	12	4
FIELD	919:6	919:6	13	4
LEAF_NODE	919:6	919:6	14	4
LEAF_NODE	919:7	919:7	10	;
EXPR_STATEMENT	920:3	920:6	9	o ++ ;
EXPR	920:3	920:3	10	o ++
FIELD	920:3	920:4	11	o ++
LEAF_NODE	920:3	920:3	12	o
LEAF_NODE	920:4	920:4	12	++
LEAF_NODE	920:6	920:6	10	;
LEAF_NODE	921:2	921:2	8	}
EXPR_STATEMENT	922:2	922:36	6	nTmp = ( uint32 ) tif -> tif_nextdiroff ;
EXPR	922:2	922:2	7	nTmp = ( uint32 ) tif -> tif_nextdiroff
ASSIGN	922:2	922:9	8	nTmp = ( uint32 ) tif -> tif_nextdiroff
LVAL	922:2	922:2	9	nTmp
FIELD	922:2	922:2	10	nTmp
LEAF_NODE	922:2	922:2	11	nTmp
ASSIGN_OP	922:7	922:7	9	=
LEAF_NODE	922:7	922:7	10	=
RVAL	922:9	922:17	9	( uint32 ) tif -> tif_nextdiroff
LEAF_NODE	922:9	922:9	10	(
TYPE_NAME	922:10	922:10	10	uint32
LEAF_NODE	922:10	922:10	11	uint32
LEAF_NODE	922:16	922:16	10	)
FIELD	922:17	922:22	10	tif -> tif_nextdiroff
LEAF_NODE	922:17	922:17	11	tif
LEAF_NODE	922:20	922:20	11	->
LEAF_NODE	922:22	922:22	11	tif_nextdiroff
LEAF_NODE	922:36	922:36	7	;
SELECTION	923:2	924:3	6	
KEYWORD	923:2	923:2	7	if
LEAF_NODE	923:2	923:2	8	if
LEAF_NODE	923:5	923:5	7	(
CONDITION	923:6	923:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	923:6	923:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	923:6	923:11	9	tif -> tif_flags
LEAF_NODE	923:6	923:6	10	tif
LEAF_NODE	923:9	923:9	10	->
LEAF_NODE	923:11	923:11	10	tif_flags
LEAF_NODE	923:20	923:20	9	&
FIELD	923:21	923:21	9	TIFF_SWAB
LEAF_NODE	923:21	923:21	10	TIFF_SWAB
LEAF_NODE	923:30	923:30	7	)
STATEMENTS	924:3	924:3	7	
EXPR_STATEMENT	924:3	924:22	8	TIFFSwabLong ( & nTmp ) ;
EXPR	924:3	924:3	9	TIFFSwabLong ( & nTmp )
FUNCTION_CALL	924:3	924:21	10	TIFFSwabLong ( & nTmp )
CALLEE	924:3	924:3	11	TIFFSwabLong
LEAF_NODE	924:3	924:3	12	TIFFSwabLong
LEAF_NODE	924:15	924:15	11	(
ARGUMENT	924:16	924:16	11	& nTmp
UNARY_EXPR	924:16	924:17	12	& nTmp
UNARY_OPERATOR	924:16	924:16	13	&
LEAF_NODE	924:16	924:16	14	&
FIELD	924:17	924:17	13	nTmp
LEAF_NODE	924:17	924:17	14	nTmp
LEAF_NODE	924:21	924:21	11	)
LEAF_NODE	924:22	924:22	9	;
EXPR_STATEMENT	925:2	925:24	6	_TIFFmemcpy ( n , & nTmp , 4 ) ;
EXPR	925:2	925:2	7	_TIFFmemcpy ( n , & nTmp , 4 )
FUNCTION_CALL	925:2	925:23	8	_TIFFmemcpy ( n , & nTmp , 4 )
CALLEE	925:2	925:2	9	_TIFFmemcpy
LEAF_NODE	925:2	925:2	10	_TIFFmemcpy
LEAF_NODE	925:13	925:13	9	(
ARGUMENT	925:14	925:14	9	n
FIELD	925:14	925:14	10	n
LEAF_NODE	925:14	925:14	11	n
LEAF_NODE	925:15	925:15	9	,
ARGUMENT	925:16	925:16	9	& nTmp
UNARY_EXPR	925:16	925:17	10	& nTmp
UNARY_OPERATOR	925:16	925:16	11	&
LEAF_NODE	925:16	925:16	12	&
FIELD	925:17	925:17	11	nTmp
LEAF_NODE	925:17	925:17	12	nTmp
LEAF_NODE	925:21	925:21	9	,
ARGUMENT	925:22	925:22	9	4
FIELD	925:22	925:22	10	4
LEAF_NODE	925:22	925:22	11	4
LEAF_NODE	925:23	925:23	9	)
LEAF_NODE	925:24	925:24	7	;
LEAF_NODE	926:1	926:1	5	}
SELECTION	927:1	928:1	3	
KEYWORD	927:1	927:1	4	else
LEAF_NODE	927:1	927:1	5	else
STATEMENTS	928:1	958:1	4	
LEAF_NODE	928:1	928:1	5	{
STATEMENTS	929:2	956:2	5	
SIMPLE_DECL	929:2	929:10	6	uint8 * n ;
VAR_DECL	929:2	929:9	7	uint8 * n
TYPE	929:2	929:7	8	uint8 *
TYPE_NAME	929:2	929:2	9	uint8
LEAF_NODE	929:2	929:2	10	uint8
POINTER	929:7	929:7	9	*
LEAF_NODE	929:7	929:7	10	*
NAME	929:9	929:9	8	n
LEAF_NODE	929:9	929:9	9	n
LEAF_NODE	929:10	929:10	7	;
SIMPLE_DECL	930:2	930:17	6	TIFFDirEntry * o ;
VAR_DECL	930:2	930:16	7	TIFFDirEntry * o
TYPE	930:2	930:14	8	TIFFDirEntry *
TYPE_NAME	930:2	930:2	9	TIFFDirEntry
LEAF_NODE	930:2	930:2	10	TIFFDirEntry
POINTER	930:14	930:14	9	*
LEAF_NODE	930:14	930:14	10	*
NAME	930:16	930:16	8	o
LEAF_NODE	930:16	930:16	9	o
LEAF_NODE	930:17	930:17	7	;
EXPR_STATEMENT	931:2	931:10	6	n = dirmem ;
EXPR	931:2	931:2	7	n = dirmem
ASSIGN	931:2	931:4	8	n = dirmem
LVAL	931:2	931:2	9	n
FIELD	931:2	931:2	10	n
LEAF_NODE	931:2	931:2	11	n
ASSIGN_OP	931:3	931:3	9	=
LEAF_NODE	931:3	931:3	10	=
RVAL	931:4	931:4	9	dirmem
FIELD	931:4	931:4	10	dirmem
LEAF_NODE	931:4	931:4	11	dirmem
LEAF_NODE	931:10	931:10	7	;
LEAF_NODE	932:2	932:2	6	*
EXPR_STATEMENT	932:3	932:18	6	( uint64 * ) n = ndir ;
EXPR	932:3	932:3	7	( uint64 * ) n = ndir
ASSIGN	932:3	932:14	8	( uint64 * ) n = ndir
LVAL	932:3	932:12	9	( uint64 * ) n
LEAF_NODE	932:3	932:3	10	(
TYPE_NAME	932:4	932:4	10	uint64
LEAF_NODE	932:4	932:4	11	uint64
LEAF_NODE	932:10	932:10	10	*
LEAF_NODE	932:11	932:11	10	)
FIELD	932:12	932:12	10	n
LEAF_NODE	932:12	932:12	11	n
ASSIGN_OP	932:13	932:13	9	=
LEAF_NODE	932:13	932:13	10	=
RVAL	932:14	932:14	9	ndir
FIELD	932:14	932:14	10	ndir
LEAF_NODE	932:14	932:14	11	ndir
LEAF_NODE	932:18	932:18	7	;
SELECTION	933:2	934:3	6	
KEYWORD	933:2	933:2	7	if
LEAF_NODE	933:2	933:2	8	if
LEAF_NODE	933:5	933:5	7	(
CONDITION	933:6	933:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	933:6	933:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	933:6	933:11	9	tif -> tif_flags
LEAF_NODE	933:6	933:6	10	tif
LEAF_NODE	933:9	933:9	10	->
LEAF_NODE	933:11	933:11	10	tif_flags
LEAF_NODE	933:20	933:20	9	&
FIELD	933:21	933:21	9	TIFF_SWAB
LEAF_NODE	933:21	933:21	10	TIFF_SWAB
LEAF_NODE	933:30	933:30	7	)
STATEMENTS	934:3	934:3	7	
EXPR_STATEMENT	934:3	934:28	8	TIFFSwabLong8 ( ( uint64 * ) n ) ;
EXPR	934:3	934:3	9	TIFFSwabLong8 ( ( uint64 * ) n )
FUNCTION_CALL	934:3	934:27	10	TIFFSwabLong8 ( ( uint64 * ) n )
CALLEE	934:3	934:3	11	TIFFSwabLong8
LEAF_NODE	934:3	934:3	12	TIFFSwabLong8
LEAF_NODE	934:16	934:16	11	(
ARGUMENT	934:17	934:26	11	( uint64 * ) n
LEAF_NODE	934:17	934:17	12	(
TYPE_NAME	934:18	934:18	12	uint64
LEAF_NODE	934:18	934:18	13	uint64
LEAF_NODE	934:24	934:24	12	*
LEAF_NODE	934:25	934:25	12	)
FIELD	934:26	934:26	12	n
LEAF_NODE	934:26	934:26	13	n
LEAF_NODE	934:27	934:27	11	)
LEAF_NODE	934:28	934:28	9	;
EXPR_STATEMENT	935:2	935:6	6	n += 8 ;
EXPR	935:2	935:2	7	n += 8
ASSIGN	935:2	935:5	8	n += 8
LVAL	935:2	935:2	9	n
FIELD	935:2	935:2	10	n
LEAF_NODE	935:2	935:2	11	n
ASSIGN_OP	935:3	935:3	9	+=
LEAF_NODE	935:3	935:3	10	+=
RVAL	935:5	935:5	9	8
FIELD	935:5	935:5	10	8
LEAF_NODE	935:5	935:5	11	8
LEAF_NODE	935:6	935:6	7	;
EXPR_STATEMENT	936:2	936:7	6	o = dir ;
EXPR	936:2	936:2	7	o = dir
ASSIGN	936:2	936:4	8	o = dir
LVAL	936:2	936:2	9	o
FIELD	936:2	936:2	10	o
LEAF_NODE	936:2	936:2	11	o
ASSIGN_OP	936:3	936:3	9	=
LEAF_NODE	936:3	936:3	10	=
RVAL	936:4	936:4	9	dir
FIELD	936:4	936:4	10	dir
LEAF_NODE	936:4	936:4	11	dir
LEAF_NODE	936:7	936:7	7	;
ITERATION	937:2	938:2	6	
KEYWORD	937:2	937:2	7	for
LEAF_NODE	937:2	937:2	8	for
LEAF_NODE	937:6	937:6	7	(
FOR_INIT	937:7	937:10	7	m = 0 ;
EXPR	937:7	937:7	8	m = 0
ASSIGN	937:7	937:9	9	m = 0
LVAL	937:7	937:7	10	m
FIELD	937:7	937:7	11	m
LEAF_NODE	937:7	937:7	12	m
ASSIGN_OP	937:8	937:8	10	=
LEAF_NODE	937:8	937:8	11	=
RVAL	937:9	937:9	10	0
FIELD	937:9	937:9	11	0
LEAF_NODE	937:9	937:9	12	0
LEAF_NODE	937:10	937:10	8	;
CONDITION	937:12	937:12	7	m < ndir
EXPR	937:12	937:14	8	m < ndir
FIELD	937:12	937:12	9	m
LEAF_NODE	937:12	937:12	10	m
REL_OPERATOR	937:13	937:13	9	<
LEAF_NODE	937:13	937:13	10	<
FIELD	937:14	937:14	9	ndir
LEAF_NODE	937:14	937:14	10	ndir
LEAF_NODE	937:18	937:18	7	;
FOR_EXPR	937:20	937:20	7	m ++
EXPR	937:20	937:20	8	m ++
FIELD	937:20	937:21	9	m ++
LEAF_NODE	937:20	937:20	10	m
LEAF_NODE	937:21	937:21	10	++
LEAF_NODE	937:23	937:23	7	)
STATEMENTS	938:2	954:2	7	
LEAF_NODE	938:2	938:2	8	{
STATEMENTS	939:3	953:3	8	
LEAF_NODE	939:3	939:3	9	*
EXPR_STATEMENT	939:4	939:26	9	( uint16 * ) n = o -> tdir_tag ;
EXPR	939:4	939:4	10	( uint16 * ) n = o -> tdir_tag
ASSIGN	939:4	939:15	11	( uint16 * ) n = o -> tdir_tag
LVAL	939:4	939:13	12	( uint16 * ) n
LEAF_NODE	939:4	939:4	13	(
TYPE_NAME	939:5	939:5	13	uint16
LEAF_NODE	939:5	939:5	14	uint16
LEAF_NODE	939:11	939:11	13	*
LEAF_NODE	939:12	939:12	13	)
FIELD	939:13	939:13	13	n
LEAF_NODE	939:13	939:13	14	n
ASSIGN_OP	939:14	939:14	12	=
LEAF_NODE	939:14	939:14	13	=
RVAL	939:15	939:15	12	o -> tdir_tag
FIELD	939:15	939:18	13	o -> tdir_tag
LEAF_NODE	939:15	939:15	14	o
LEAF_NODE	939:16	939:16	14	->
LEAF_NODE	939:18	939:18	14	tdir_tag
LEAF_NODE	939:26	939:26	10	;
SELECTION	940:3	941:4	9	
KEYWORD	940:3	940:3	10	if
LEAF_NODE	940:3	940:3	11	if
LEAF_NODE	940:6	940:6	10	(
CONDITION	940:7	940:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	940:7	940:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	940:7	940:12	12	tif -> tif_flags
LEAF_NODE	940:7	940:7	13	tif
LEAF_NODE	940:10	940:10	13	->
LEAF_NODE	940:12	940:12	13	tif_flags
LEAF_NODE	940:21	940:21	12	&
FIELD	940:22	940:22	12	TIFF_SWAB
LEAF_NODE	940:22	940:22	13	TIFF_SWAB
LEAF_NODE	940:31	940:31	10	)
STATEMENTS	941:4	941:4	10	
EXPR_STATEMENT	941:4	941:29	11	TIFFSwabShort ( ( uint16 * ) n ) ;
EXPR	941:4	941:4	12	TIFFSwabShort ( ( uint16 * ) n )
FUNCTION_CALL	941:4	941:28	13	TIFFSwabShort ( ( uint16 * ) n )
CALLEE	941:4	941:4	14	TIFFSwabShort
LEAF_NODE	941:4	941:4	15	TIFFSwabShort
LEAF_NODE	941:17	941:17	14	(
ARGUMENT	941:18	941:27	14	( uint16 * ) n
LEAF_NODE	941:18	941:18	15	(
TYPE_NAME	941:19	941:19	15	uint16
LEAF_NODE	941:19	941:19	16	uint16
LEAF_NODE	941:25	941:25	15	*
LEAF_NODE	941:26	941:26	15	)
FIELD	941:27	941:27	15	n
LEAF_NODE	941:27	941:27	16	n
LEAF_NODE	941:28	941:28	14	)
LEAF_NODE	941:29	941:29	12	;
EXPR_STATEMENT	942:3	942:7	9	n += 2 ;
EXPR	942:3	942:3	10	n += 2
ASSIGN	942:3	942:6	11	n += 2
LVAL	942:3	942:3	12	n
FIELD	942:3	942:3	13	n
LEAF_NODE	942:3	942:3	14	n
ASSIGN_OP	942:4	942:4	12	+=
LEAF_NODE	942:4	942:4	13	+=
RVAL	942:6	942:6	12	2
FIELD	942:6	942:6	13	2
LEAF_NODE	942:6	942:6	14	2
LEAF_NODE	942:7	942:7	10	;
LEAF_NODE	943:3	943:3	9	*
EXPR_STATEMENT	943:4	943:27	9	( uint16 * ) n = o -> tdir_type ;
EXPR	943:4	943:4	10	( uint16 * ) n = o -> tdir_type
ASSIGN	943:4	943:15	11	( uint16 * ) n = o -> tdir_type
LVAL	943:4	943:13	12	( uint16 * ) n
LEAF_NODE	943:4	943:4	13	(
TYPE_NAME	943:5	943:5	13	uint16
LEAF_NODE	943:5	943:5	14	uint16
LEAF_NODE	943:11	943:11	13	*
LEAF_NODE	943:12	943:12	13	)
FIELD	943:13	943:13	13	n
LEAF_NODE	943:13	943:13	14	n
ASSIGN_OP	943:14	943:14	12	=
LEAF_NODE	943:14	943:14	13	=
RVAL	943:15	943:15	12	o -> tdir_type
FIELD	943:15	943:18	13	o -> tdir_type
LEAF_NODE	943:15	943:15	14	o
LEAF_NODE	943:16	943:16	14	->
LEAF_NODE	943:18	943:18	14	tdir_type
LEAF_NODE	943:27	943:27	10	;
SELECTION	944:3	945:4	9	
KEYWORD	944:3	944:3	10	if
LEAF_NODE	944:3	944:3	11	if
LEAF_NODE	944:6	944:6	10	(
CONDITION	944:7	944:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	944:7	944:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	944:7	944:12	12	tif -> tif_flags
LEAF_NODE	944:7	944:7	13	tif
LEAF_NODE	944:10	944:10	13	->
LEAF_NODE	944:12	944:12	13	tif_flags
LEAF_NODE	944:21	944:21	12	&
FIELD	944:22	944:22	12	TIFF_SWAB
LEAF_NODE	944:22	944:22	13	TIFF_SWAB
LEAF_NODE	944:31	944:31	10	)
STATEMENTS	945:4	945:4	10	
EXPR_STATEMENT	945:4	945:29	11	TIFFSwabShort ( ( uint16 * ) n ) ;
EXPR	945:4	945:4	12	TIFFSwabShort ( ( uint16 * ) n )
FUNCTION_CALL	945:4	945:28	13	TIFFSwabShort ( ( uint16 * ) n )
CALLEE	945:4	945:4	14	TIFFSwabShort
LEAF_NODE	945:4	945:4	15	TIFFSwabShort
LEAF_NODE	945:17	945:17	14	(
ARGUMENT	945:18	945:27	14	( uint16 * ) n
LEAF_NODE	945:18	945:18	15	(
TYPE_NAME	945:19	945:19	15	uint16
LEAF_NODE	945:19	945:19	16	uint16
LEAF_NODE	945:25	945:25	15	*
LEAF_NODE	945:26	945:26	15	)
FIELD	945:27	945:27	15	n
LEAF_NODE	945:27	945:27	16	n
LEAF_NODE	945:28	945:28	14	)
LEAF_NODE	945:29	945:29	12	;
EXPR_STATEMENT	946:3	946:7	9	n += 2 ;
EXPR	946:3	946:3	10	n += 2
ASSIGN	946:3	946:6	11	n += 2
LVAL	946:3	946:3	12	n
FIELD	946:3	946:3	13	n
LEAF_NODE	946:3	946:3	14	n
ASSIGN_OP	946:4	946:4	12	+=
LEAF_NODE	946:4	946:4	13	+=
RVAL	946:6	946:6	12	2
FIELD	946:6	946:6	13	2
LEAF_NODE	946:6	946:6	14	2
LEAF_NODE	946:7	946:7	10	;
EXPR_STATEMENT	947:3	947:34	9	_TIFFmemcpy ( n , & o -> tdir_count , 8 ) ;
EXPR	947:3	947:3	10	_TIFFmemcpy ( n , & o -> tdir_count , 8 )
FUNCTION_CALL	947:3	947:33	11	_TIFFmemcpy ( n , & o -> tdir_count , 8 )
CALLEE	947:3	947:3	12	_TIFFmemcpy
LEAF_NODE	947:3	947:3	13	_TIFFmemcpy
LEAF_NODE	947:14	947:14	12	(
ARGUMENT	947:15	947:15	12	n
FIELD	947:15	947:15	13	n
LEAF_NODE	947:15	947:15	14	n
LEAF_NODE	947:16	947:16	12	,
ARGUMENT	947:17	947:17	12	& o -> tdir_count
UNARY_EXPR	947:17	947:18	13	& o -> tdir_count
UNARY_OPERATOR	947:17	947:17	14	&
LEAF_NODE	947:17	947:17	15	&
FIELD	947:18	947:21	14	o -> tdir_count
LEAF_NODE	947:18	947:18	15	o
LEAF_NODE	947:19	947:19	15	->
LEAF_NODE	947:21	947:21	15	tdir_count
LEAF_NODE	947:31	947:31	12	,
ARGUMENT	947:32	947:32	12	8
FIELD	947:32	947:32	13	8
LEAF_NODE	947:32	947:32	14	8
LEAF_NODE	947:33	947:33	12	)
LEAF_NODE	947:34	947:34	10	;
SELECTION	948:3	949:4	9	
KEYWORD	948:3	948:3	10	if
LEAF_NODE	948:3	948:3	11	if
LEAF_NODE	948:6	948:6	10	(
CONDITION	948:7	948:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	948:7	948:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	948:7	948:12	12	tif -> tif_flags
LEAF_NODE	948:7	948:7	13	tif
LEAF_NODE	948:10	948:10	13	->
LEAF_NODE	948:12	948:12	13	tif_flags
LEAF_NODE	948:21	948:21	12	&
FIELD	948:22	948:22	12	TIFF_SWAB
LEAF_NODE	948:22	948:22	13	TIFF_SWAB
LEAF_NODE	948:31	948:31	10	)
STATEMENTS	949:4	949:4	10	
EXPR_STATEMENT	949:4	949:29	11	TIFFSwabLong8 ( ( uint64 * ) n ) ;
EXPR	949:4	949:4	12	TIFFSwabLong8 ( ( uint64 * ) n )
FUNCTION_CALL	949:4	949:28	13	TIFFSwabLong8 ( ( uint64 * ) n )
CALLEE	949:4	949:4	14	TIFFSwabLong8
LEAF_NODE	949:4	949:4	15	TIFFSwabLong8
LEAF_NODE	949:17	949:17	14	(
ARGUMENT	949:18	949:27	14	( uint64 * ) n
LEAF_NODE	949:18	949:18	15	(
TYPE_NAME	949:19	949:19	15	uint64
LEAF_NODE	949:19	949:19	16	uint64
LEAF_NODE	949:25	949:25	15	*
LEAF_NODE	949:26	949:26	15	)
FIELD	949:27	949:27	15	n
LEAF_NODE	949:27	949:27	16	n
LEAF_NODE	949:28	949:28	14	)
LEAF_NODE	949:29	949:29	12	;
EXPR_STATEMENT	950:3	950:7	9	n += 8 ;
EXPR	950:3	950:3	10	n += 8
ASSIGN	950:3	950:6	11	n += 8
LVAL	950:3	950:3	12	n
FIELD	950:3	950:3	13	n
LEAF_NODE	950:3	950:3	14	n
ASSIGN_OP	950:4	950:4	12	+=
LEAF_NODE	950:4	950:4	13	+=
RVAL	950:6	950:6	12	8
FIELD	950:6	950:6	13	8
LEAF_NODE	950:6	950:6	14	8
LEAF_NODE	950:7	950:7	10	;
EXPR_STATEMENT	951:3	951:35	9	_TIFFmemcpy ( n , & o -> tdir_offset , 8 ) ;
EXPR	951:3	951:3	10	_TIFFmemcpy ( n , & o -> tdir_offset , 8 )
FUNCTION_CALL	951:3	951:34	11	_TIFFmemcpy ( n , & o -> tdir_offset , 8 )
CALLEE	951:3	951:3	12	_TIFFmemcpy
LEAF_NODE	951:3	951:3	13	_TIFFmemcpy
LEAF_NODE	951:14	951:14	12	(
ARGUMENT	951:15	951:15	12	n
FIELD	951:15	951:15	13	n
LEAF_NODE	951:15	951:15	14	n
LEAF_NODE	951:16	951:16	12	,
ARGUMENT	951:17	951:17	12	& o -> tdir_offset
UNARY_EXPR	951:17	951:18	13	& o -> tdir_offset
UNARY_OPERATOR	951:17	951:17	14	&
LEAF_NODE	951:17	951:17	15	&
FIELD	951:18	951:21	14	o -> tdir_offset
LEAF_NODE	951:18	951:18	15	o
LEAF_NODE	951:19	951:19	15	->
LEAF_NODE	951:21	951:21	15	tdir_offset
LEAF_NODE	951:32	951:32	12	,
ARGUMENT	951:33	951:33	12	8
FIELD	951:33	951:33	13	8
LEAF_NODE	951:33	951:33	14	8
LEAF_NODE	951:34	951:34	12	)
LEAF_NODE	951:35	951:35	10	;
EXPR_STATEMENT	952:3	952:7	9	n += 8 ;
EXPR	952:3	952:3	10	n += 8
ASSIGN	952:3	952:6	11	n += 8
LVAL	952:3	952:3	12	n
FIELD	952:3	952:3	13	n
LEAF_NODE	952:3	952:3	14	n
ASSIGN_OP	952:4	952:4	12	+=
LEAF_NODE	952:4	952:4	13	+=
RVAL	952:6	952:6	12	8
FIELD	952:6	952:6	13	8
LEAF_NODE	952:6	952:6	14	8
LEAF_NODE	952:7	952:7	10	;
EXPR_STATEMENT	953:3	953:6	9	o ++ ;
EXPR	953:3	953:3	10	o ++
FIELD	953:3	953:4	11	o ++
LEAF_NODE	953:3	953:3	12	o
LEAF_NODE	953:4	953:4	12	++
LEAF_NODE	953:6	953:6	10	;
LEAF_NODE	954:2	954:2	8	}
EXPR_STATEMENT	955:2	955:39	6	_TIFFmemcpy ( n , & tif -> tif_nextdiroff , 8 ) ;
EXPR	955:2	955:2	7	_TIFFmemcpy ( n , & tif -> tif_nextdiroff , 8 )
FUNCTION_CALL	955:2	955:38	8	_TIFFmemcpy ( n , & tif -> tif_nextdiroff , 8 )
CALLEE	955:2	955:2	9	_TIFFmemcpy
LEAF_NODE	955:2	955:2	10	_TIFFmemcpy
LEAF_NODE	955:13	955:13	9	(
ARGUMENT	955:14	955:14	9	n
FIELD	955:14	955:14	10	n
LEAF_NODE	955:14	955:14	11	n
LEAF_NODE	955:15	955:15	9	,
ARGUMENT	955:16	955:16	9	& tif -> tif_nextdiroff
UNARY_EXPR	955:16	955:17	10	& tif -> tif_nextdiroff
UNARY_OPERATOR	955:16	955:16	11	&
LEAF_NODE	955:16	955:16	12	&
FIELD	955:17	955:22	11	tif -> tif_nextdiroff
LEAF_NODE	955:17	955:17	12	tif
LEAF_NODE	955:20	955:20	12	->
LEAF_NODE	955:22	955:22	12	tif_nextdiroff
LEAF_NODE	955:36	955:36	9	,
ARGUMENT	955:37	955:37	9	8
FIELD	955:37	955:37	10	8
LEAF_NODE	955:37	955:37	11	8
LEAF_NODE	955:38	955:38	9	)
LEAF_NODE	955:39	955:39	7	;
SELECTION	956:2	957:3	6	
KEYWORD	956:2	956:2	7	if
LEAF_NODE	956:2	956:2	8	if
LEAF_NODE	956:5	956:5	7	(
CONDITION	956:6	956:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	956:6	956:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	956:6	956:11	9	tif -> tif_flags
LEAF_NODE	956:6	956:6	10	tif
LEAF_NODE	956:9	956:9	10	->
LEAF_NODE	956:11	956:11	10	tif_flags
LEAF_NODE	956:20	956:20	9	&
FIELD	956:21	956:21	9	TIFF_SWAB
LEAF_NODE	956:21	956:21	10	TIFF_SWAB
LEAF_NODE	956:30	956:30	7	)
STATEMENTS	957:3	957:3	7	
EXPR_STATEMENT	957:3	957:28	8	TIFFSwabLong8 ( ( uint64 * ) n ) ;
EXPR	957:3	957:3	9	TIFFSwabLong8 ( ( uint64 * ) n )
FUNCTION_CALL	957:3	957:27	10	TIFFSwabLong8 ( ( uint64 * ) n )
CALLEE	957:3	957:3	11	TIFFSwabLong8
LEAF_NODE	957:3	957:3	12	TIFFSwabLong8
LEAF_NODE	957:16	957:16	11	(
ARGUMENT	957:17	957:26	11	( uint64 * ) n
LEAF_NODE	957:17	957:17	12	(
TYPE_NAME	957:18	957:18	12	uint64
LEAF_NODE	957:18	957:18	13	uint64
LEAF_NODE	957:24	957:24	12	*
LEAF_NODE	957:25	957:25	12	)
FIELD	957:26	957:26	12	n
LEAF_NODE	957:26	957:26	13	n
LEAF_NODE	957:27	957:27	11	)
LEAF_NODE	957:28	957:28	9	;
LEAF_NODE	958:1	958:1	5	}
EXPR_STATEMENT	959:1	959:15	3	_TIFFfree ( dir ) ;
EXPR	959:1	959:1	4	_TIFFfree ( dir )
FUNCTION_CALL	959:1	959:14	5	_TIFFfree ( dir )
CALLEE	959:1	959:1	6	_TIFFfree
LEAF_NODE	959:1	959:1	7	_TIFFfree
LEAF_NODE	959:10	959:10	6	(
ARGUMENT	959:11	959:11	6	dir
FIELD	959:11	959:11	7	dir
LEAF_NODE	959:11	959:11	8	dir
LEAF_NODE	959:14	959:14	6	)
LEAF_NODE	959:15	959:15	4	;
EXPR_STATEMENT	960:1	960:9	3	dir = NULL ;
EXPR	960:1	960:1	4	dir = NULL
ASSIGN	960:1	960:5	5	dir = NULL
LVAL	960:1	960:1	6	dir
FIELD	960:1	960:1	7	dir
LEAF_NODE	960:1	960:1	8	dir
ASSIGN_OP	960:4	960:4	6	=
LEAF_NODE	960:4	960:4	7	=
RVAL	960:5	960:5	6	NULL
FIELD	960:5	960:5	7	NULL
LEAF_NODE	960:5	960:5	8	NULL
LEAF_NODE	960:9	960:9	4	;
SELECTION	961:1	962:1	3	
KEYWORD	961:1	961:1	4	if
LEAF_NODE	961:1	961:1	5	if
LEAF_NODE	961:4	961:4	4	(
CONDITION	961:5	961:5	4	! SeekOK ( tif , tif -> tif_diroff )
EXPR	961:5	961:5	5	! SeekOK ( tif , tif -> tif_diroff )
UNARY_EXPR	961:5	961:6	6	! SeekOK ( tif , tif -> tif_diroff )
UNARY_OPERATOR	961:5	961:5	7	!
LEAF_NODE	961:5	961:5	8	!
FUNCTION_CALL	961:6	961:32	7	SeekOK ( tif , tif -> tif_diroff )
CALLEE	961:6	961:6	8	SeekOK
LEAF_NODE	961:6	961:6	9	SeekOK
LEAF_NODE	961:12	961:12	8	(
ARGUMENT	961:13	961:13	8	tif
FIELD	961:13	961:13	9	tif
LEAF_NODE	961:13	961:13	10	tif
LEAF_NODE	961:16	961:16	8	,
ARGUMENT	961:17	961:17	8	tif -> tif_diroff
FIELD	961:17	961:22	9	tif -> tif_diroff
LEAF_NODE	961:17	961:17	10	tif
LEAF_NODE	961:20	961:20	10	->
LEAF_NODE	961:22	961:22	10	tif_diroff
LEAF_NODE	961:32	961:32	8	)
LEAF_NODE	961:33	961:33	4	)
STATEMENTS	962:1	965:1	4	
LEAF_NODE	962:1	962:1	5	{
STATEMENTS	963:2	964:2	5	
EXPR_STATEMENT	963:2	963:71	6	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing directory" ) ;
EXPR	963:2	963:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing directory" )
FUNCTION_CALL	963:2	963:70	8	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing directory" )
CALLEE	963:2	963:2	9	TIFFErrorExt
LEAF_NODE	963:2	963:2	10	TIFFErrorExt
LEAF_NODE	963:14	963:14	9	(
ARGUMENT	963:15	963:15	9	tif -> tif_clientdata
FIELD	963:15	963:20	10	tif -> tif_clientdata
LEAF_NODE	963:15	963:15	11	tif
LEAF_NODE	963:18	963:18	11	->
LEAF_NODE	963:20	963:20	11	tif_clientdata
LEAF_NODE	963:34	963:34	9	,
ARGUMENT	963:35	963:35	9	module
FIELD	963:35	963:35	10	module
LEAF_NODE	963:35	963:35	11	module
LEAF_NODE	963:41	963:41	9	,
ARGUMENT	963:42	963:42	9	"IO error writing directory"
FIELD	963:42	963:42	10	"IO error writing directory"
LEAF_NODE	963:42	963:42	11	"IO error writing directory"
LEAF_NODE	963:70	963:70	9	)
LEAF_NODE	963:71	963:71	7	;
JUMP_STATEMENT	964:2	964:10	6	goto bad ;
KEYWORD	964:2	964:2	7	goto
LEAF_NODE	964:2	964:2	8	goto
DESTINATION	964:7	964:7	7	bad
LEAF_NODE	964:7	964:7	8	bad
LEAF_NODE	964:10	964:10	7	;
LEAF_NODE	965:1	965:1	5	}
SELECTION	966:1	967:1	3	
KEYWORD	966:1	966:1	4	if
LEAF_NODE	966:1	966:1	5	if
LEAF_NODE	966:4	966:4	4	(
CONDITION	966:5	966:5	4	! WriteOK ( tif , dirmem , ( tmsize_t ) dirsize )
EXPR	966:5	966:5	5	! WriteOK ( tif , dirmem , ( tmsize_t ) dirsize )
UNARY_EXPR	966:5	966:6	6	! WriteOK ( tif , dirmem , ( tmsize_t ) dirsize )
UNARY_OPERATOR	966:5	966:5	7	!
LEAF_NODE	966:5	966:5	8	!
FUNCTION_CALL	966:6	966:42	7	WriteOK ( tif , dirmem , ( tmsize_t ) dirsize )
CALLEE	966:6	966:6	8	WriteOK
LEAF_NODE	966:6	966:6	9	WriteOK
LEAF_NODE	966:13	966:13	8	(
ARGUMENT	966:14	966:14	8	tif
FIELD	966:14	966:14	9	tif
LEAF_NODE	966:14	966:14	10	tif
LEAF_NODE	966:17	966:17	8	,
ARGUMENT	966:18	966:18	8	dirmem
FIELD	966:18	966:18	9	dirmem
LEAF_NODE	966:18	966:18	10	dirmem
LEAF_NODE	966:24	966:24	8	,
ARGUMENT	966:25	966:35	8	( tmsize_t ) dirsize
LEAF_NODE	966:25	966:25	9	(
TYPE_NAME	966:26	966:26	9	tmsize_t
LEAF_NODE	966:26	966:26	10	tmsize_t
LEAF_NODE	966:34	966:34	9	)
FIELD	966:35	966:35	9	dirsize
LEAF_NODE	966:35	966:35	10	dirsize
LEAF_NODE	966:42	966:42	8	)
LEAF_NODE	966:43	966:43	4	)
STATEMENTS	967:1	970:1	4	
LEAF_NODE	967:1	967:1	5	{
STATEMENTS	968:2	969:2	5	
EXPR_STATEMENT	968:2	968:71	6	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing directory" ) ;
EXPR	968:2	968:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing directory" )
FUNCTION_CALL	968:2	968:70	8	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing directory" )
CALLEE	968:2	968:2	9	TIFFErrorExt
LEAF_NODE	968:2	968:2	10	TIFFErrorExt
LEAF_NODE	968:14	968:14	9	(
ARGUMENT	968:15	968:15	9	tif -> tif_clientdata
FIELD	968:15	968:20	10	tif -> tif_clientdata
LEAF_NODE	968:15	968:15	11	tif
LEAF_NODE	968:18	968:18	11	->
LEAF_NODE	968:20	968:20	11	tif_clientdata
LEAF_NODE	968:34	968:34	9	,
ARGUMENT	968:35	968:35	9	module
FIELD	968:35	968:35	10	module
LEAF_NODE	968:35	968:35	11	module
LEAF_NODE	968:41	968:41	9	,
ARGUMENT	968:42	968:42	9	"IO error writing directory"
FIELD	968:42	968:42	10	"IO error writing directory"
LEAF_NODE	968:42	968:42	11	"IO error writing directory"
LEAF_NODE	968:70	968:70	9	)
LEAF_NODE	968:71	968:71	7	;
JUMP_STATEMENT	969:2	969:10	6	goto bad ;
KEYWORD	969:2	969:2	7	goto
LEAF_NODE	969:2	969:2	8	goto
DESTINATION	969:7	969:7	7	bad
LEAF_NODE	969:7	969:7	8	bad
LEAF_NODE	969:10	969:10	7	;
LEAF_NODE	970:1	970:1	5	}
EXPR_STATEMENT	971:1	971:18	3	_TIFFfree ( dirmem ) ;
EXPR	971:1	971:1	4	_TIFFfree ( dirmem )
FUNCTION_CALL	971:1	971:17	5	_TIFFfree ( dirmem )
CALLEE	971:1	971:1	6	_TIFFfree
LEAF_NODE	971:1	971:1	7	_TIFFfree
LEAF_NODE	971:10	971:10	6	(
ARGUMENT	971:11	971:11	6	dirmem
FIELD	971:11	971:11	7	dirmem
LEAF_NODE	971:11	971:11	8	dirmem
LEAF_NODE	971:17	971:17	6	)
LEAF_NODE	971:18	971:18	4	;
SELECTION	972:1	973:1	3	
KEYWORD	972:1	972:1	4	if
LEAF_NODE	972:1	972:1	5	if
LEAF_NODE	972:4	972:4	4	(
CONDITION	972:5	972:5	4	imagedone
EXPR	972:5	972:5	5	imagedone
FIELD	972:5	972:5	6	imagedone
LEAF_NODE	972:5	972:5	7	imagedone
LEAF_NODE	972:14	972:14	4	)
STATEMENTS	973:1	983:1	4	
LEAF_NODE	973:1	973:1	5	{
STATEMENTS	974:2	982:2	5	
EXPR_STATEMENT	974:2	974:24	6	TIFFFreeDirectory ( tif ) ;
EXPR	974:2	974:2	7	TIFFFreeDirectory ( tif )
FUNCTION_CALL	974:2	974:23	8	TIFFFreeDirectory ( tif )
CALLEE	974:2	974:2	9	TIFFFreeDirectory
LEAF_NODE	974:2	974:2	10	TIFFFreeDirectory
LEAF_NODE	974:19	974:19	9	(
ARGUMENT	974:20	974:20	9	tif
FIELD	974:20	974:20	10	tif
LEAF_NODE	974:20	974:20	11	tif
LEAF_NODE	974:23	974:23	9	)
LEAF_NODE	974:24	974:24	7	;
EXPR_STATEMENT	975:2	975:37	6	tif -> tif_flags &= ~TIFF_DIRTYDIRECT ;
EXPR	975:2	975:2	7	tif -> tif_flags &= ~TIFF_DIRTYDIRECT
ASSIGN	975:2	975:20	8	tif -> tif_flags &= ~TIFF_DIRTYDIRECT
LVAL	975:2	975:2	9	tif -> tif_flags
FIELD	975:2	975:7	10	tif -> tif_flags
LEAF_NODE	975:2	975:2	11	tif
LEAF_NODE	975:5	975:5	11	->
LEAF_NODE	975:7	975:7	11	tif_flags
ASSIGN_OP	975:17	975:17	9	&=
LEAF_NODE	975:17	975:17	10	&=
RVAL	975:20	975:20	9	~TIFF_DIRTYDIRECT
FIELD	975:20	975:20	10	~TIFF_DIRTYDIRECT
LEAF_NODE	975:20	975:20	11	~TIFF_DIRTYDIRECT
LEAF_NODE	975:37	975:37	7	;
EXPR_STATEMENT	976:2	976:36	6	tif -> tif_flags &= ~TIFF_DIRTYSTRIP ;
EXPR	976:2	976:2	7	tif -> tif_flags &= ~TIFF_DIRTYSTRIP
ASSIGN	976:2	976:20	8	tif -> tif_flags &= ~TIFF_DIRTYSTRIP
LVAL	976:2	976:2	9	tif -> tif_flags
FIELD	976:2	976:7	10	tif -> tif_flags
LEAF_NODE	976:2	976:2	11	tif
LEAF_NODE	976:5	976:5	11	->
LEAF_NODE	976:7	976:7	11	tif_flags
ASSIGN_OP	976:17	976:17	9	&=
LEAF_NODE	976:17	976:17	10	&=
RVAL	976:20	976:20	9	~TIFF_DIRTYSTRIP
FIELD	976:20	976:20	10	~TIFF_DIRTYSTRIP
LEAF_NODE	976:20	976:20	11	~TIFF_DIRTYSTRIP
LEAF_NODE	976:36	976:36	7	;
EXPR_STATEMENT	977:2	977:26	6	( * tif -> tif_cleanup ) ( tif ) ;
EXPR	977:2	977:2	7	( * tif -> tif_cleanup ) ( tif )
FUNCTION_CALL	977:2	977:25	8	( * tif -> tif_cleanup ) ( tif )
CALLEE	977:2	977:20	9	( * tif -> tif_cleanup )
LEAF_NODE	977:2	977:2	10	(
UNARY_EXPR	977:3	977:4	10	* tif -> tif_cleanup
UNARY_OPERATOR	977:3	977:3	11	*
LEAF_NODE	977:3	977:3	12	*
FIELD	977:4	977:9	11	tif -> tif_cleanup
LEAF_NODE	977:4	977:4	12	tif
LEAF_NODE	977:7	977:7	12	->
LEAF_NODE	977:9	977:9	12	tif_cleanup
LEAF_NODE	977:20	977:20	10	)
LEAF_NODE	977:21	977:21	9	(
ARGUMENT	977:22	977:22	9	tif
FIELD	977:22	977:22	10	tif
LEAF_NODE	977:22	977:22	11	tif
LEAF_NODE	977:25	977:25	9	)
LEAF_NODE	977:26	977:26	7	;
EXPR_STATEMENT	982:2	982:26	6	TIFFCreateDirectory ( tif ) ;
EXPR	982:2	982:2	7	TIFFCreateDirectory ( tif )
FUNCTION_CALL	982:2	982:25	8	TIFFCreateDirectory ( tif )
CALLEE	982:2	982:2	9	TIFFCreateDirectory
LEAF_NODE	982:2	982:2	10	TIFFCreateDirectory
LEAF_NODE	982:21	982:21	9	(
ARGUMENT	982:22	982:22	9	tif
FIELD	982:22	982:22	10	tif
LEAF_NODE	982:22	982:22	11	tif
LEAF_NODE	982:25	982:25	9	)
LEAF_NODE	982:26	982:26	7	;
LEAF_NODE	983:1	983:1	5	}
JUMP_STATEMENT	984:1	984:10	3	return ( 1 ) ;
KEYWORD	984:1	984:1	4	return
LEAF_NODE	984:1	984:1	5	return
DESTINATION	984:7	984:7	4	( 1 )
EXPR	984:7	984:9	5	( 1 )
LEAF_NODE	984:7	984:7	6	(
FIELD	984:8	984:8	6	1
LEAF_NODE	984:8	984:8	7	1
LEAF_NODE	984:9	984:9	6	)
LEAF_NODE	984:10	984:10	4	;
LABEL	985:0	985:3	3	bad :
LEAF_NODE	985:0	985:0	4	bad
LEAF_NODE	985:3	985:3	4	:
SELECTION	986:1	987:2	3	
KEYWORD	986:1	986:1	4	if
LEAF_NODE	986:1	986:1	5	if
LEAF_NODE	986:4	986:4	4	(
CONDITION	986:5	986:5	4	dir != NULL
EXPR	986:5	986:10	5	dir != NULL
FIELD	986:5	986:5	6	dir
LEAF_NODE	986:5	986:5	7	dir
EQ_OPERATOR	986:8	986:8	6	!=
LEAF_NODE	986:8	986:8	7	!=
FIELD	986:10	986:10	6	NULL
LEAF_NODE	986:10	986:10	7	NULL
LEAF_NODE	986:14	986:14	4	)
STATEMENTS	987:2	987:2	4	
EXPR_STATEMENT	987:2	987:16	5	_TIFFfree ( dir ) ;
EXPR	987:2	987:2	6	_TIFFfree ( dir )
FUNCTION_CALL	987:2	987:15	7	_TIFFfree ( dir )
CALLEE	987:2	987:2	8	_TIFFfree
LEAF_NODE	987:2	987:2	9	_TIFFfree
LEAF_NODE	987:11	987:11	8	(
ARGUMENT	987:12	987:12	8	dir
FIELD	987:12	987:12	9	dir
LEAF_NODE	987:12	987:12	10	dir
LEAF_NODE	987:15	987:15	8	)
LEAF_NODE	987:16	987:16	6	;
SELECTION	988:1	989:2	3	
KEYWORD	988:1	988:1	4	if
LEAF_NODE	988:1	988:1	5	if
LEAF_NODE	988:4	988:4	4	(
CONDITION	988:5	988:5	4	dirmem != NULL
EXPR	988:5	988:13	5	dirmem != NULL
FIELD	988:5	988:5	6	dirmem
LEAF_NODE	988:5	988:5	7	dirmem
EQ_OPERATOR	988:11	988:11	6	!=
LEAF_NODE	988:11	988:11	7	!=
FIELD	988:13	988:13	6	NULL
LEAF_NODE	988:13	988:13	7	NULL
LEAF_NODE	988:17	988:17	4	)
STATEMENTS	989:2	989:2	4	
EXPR_STATEMENT	989:2	989:19	5	_TIFFfree ( dirmem ) ;
EXPR	989:2	989:2	6	_TIFFfree ( dirmem )
FUNCTION_CALL	989:2	989:18	7	_TIFFfree ( dirmem )
CALLEE	989:2	989:2	8	_TIFFfree
LEAF_NODE	989:2	989:2	9	_TIFFfree
LEAF_NODE	989:11	989:11	8	(
ARGUMENT	989:12	989:12	8	dirmem
FIELD	989:12	989:12	9	dirmem
LEAF_NODE	989:12	989:12	10	dirmem
LEAF_NODE	989:18	989:18	8	)
LEAF_NODE	989:19	989:19	6	;
JUMP_STATEMENT	990:1	990:10	3	return ( 0 ) ;
KEYWORD	990:1	990:1	4	return
LEAF_NODE	990:1	990:1	5	return
DESTINATION	990:7	990:7	4	( 0 )
EXPR	990:7	990:9	5	( 0 )
LEAF_NODE	990:7	990:7	6	(
FIELD	990:8	990:8	6	0
LEAF_NODE	990:8	990:8	7	0
LEAF_NODE	990:9	990:9	6	)
LEAF_NODE	990:10	990:10	4	;
LEAF_NODE	991:0	991:0	2	}
FUNCTION_DEF	993:0	1000:0	1	
RETURN_TYPE	993:0	993:7	2	static int8
LEAF_NODE	993:0	993:0	3	static
TYPE_NAME	993:7	993:7	3	int8
LEAF_NODE	993:7	993:7	4	int8
FUNCTION_NAME	993:12	993:12	2	TIFFClampDoubleToInt8
LEAF_NODE	993:12	993:12	3	TIFFClampDoubleToInt8
PARAMETER_LIST	993:33	993:46	2	( double val )
LEAF_NODE	993:33	993:33	3	(
PARAMETER_DECL	993:35	993:42	3	double val
TYPE	993:35	993:35	4	double
TYPE_NAME	993:35	993:35	5	double
LEAF_NODE	993:35	993:35	6	double
NAME	993:42	993:42	4	val
LEAF_NODE	993:42	993:42	5	val
LEAF_NODE	993:46	993:46	3	)
LEAF_NODE	994:0	994:0	2	{
STATEMENTS	995:4	999:4	2	
SELECTION	995:4	996:8	3	
KEYWORD	995:4	995:4	4	if
LEAF_NODE	995:4	995:4	5	if
LEAF_NODE	995:6	995:6	4	(
CONDITION	995:8	995:8	4	val > 127
EXPR	995:8	995:14	5	val > 127
FIELD	995:8	995:8	6	val
LEAF_NODE	995:8	995:8	7	val
REL_OPERATOR	995:12	995:12	6	>
LEAF_NODE	995:12	995:12	7	>
FIELD	995:14	995:14	6	127
LEAF_NODE	995:14	995:14	7	127
LEAF_NODE	995:18	995:18	4	)
STATEMENTS	996:8	996:8	4	
JUMP_STATEMENT	996:8	996:18	5	return 127 ;
KEYWORD	996:8	996:8	6	return
LEAF_NODE	996:8	996:8	7	return
DESTINATION	996:15	996:15	6	127
EXPR	996:15	996:15	7	127
FIELD	996:15	996:15	8	127
LEAF_NODE	996:15	996:15	9	127
LEAF_NODE	996:18	996:18	6	;
SELECTION	997:4	998:8	3	
KEYWORD	997:4	997:4	4	if
LEAF_NODE	997:4	997:4	5	if
LEAF_NODE	997:6	997:6	4	(
CONDITION	997:8	997:8	4	val < - 128 || val != val
EXPR	997:8	997:8	5	val < - 128 || val != val
OR	997:8	997:22	6	val < - 128 || val != val
EXPR	997:8	997:14	7	val < - 128
FIELD	997:8	997:8	8	val
LEAF_NODE	997:8	997:8	9	val
REL_OPERATOR	997:12	997:12	8	<
LEAF_NODE	997:12	997:12	9	<
UNARY_EXPR	997:14	997:15	8	- 128
UNARY_OPERATOR	997:14	997:14	9	-
LEAF_NODE	997:14	997:14	10	-
FIELD	997:15	997:15	9	128
LEAF_NODE	997:15	997:15	10	128
LEAF_NODE	997:19	997:19	7	||
EXPR	997:22	997:29	7	val != val
FIELD	997:22	997:22	8	val
LEAF_NODE	997:22	997:22	9	val
EQ_OPERATOR	997:26	997:26	8	!=
LEAF_NODE	997:26	997:26	9	!=
FIELD	997:29	997:29	8	val
LEAF_NODE	997:29	997:29	9	val
LEAF_NODE	997:33	997:33	4	)
STATEMENTS	998:8	998:8	4	
JUMP_STATEMENT	998:8	998:19	5	return - 128 ;
KEYWORD	998:8	998:8	6	return
LEAF_NODE	998:8	998:8	7	return
DESTINATION	998:15	998:15	6	- 128
EXPR	998:15	998:15	7	- 128
UNARY_EXPR	998:15	998:16	8	- 128
UNARY_OPERATOR	998:15	998:15	9	-
LEAF_NODE	998:15	998:15	10	-
FIELD	998:16	998:16	9	128
LEAF_NODE	998:16	998:16	10	128
LEAF_NODE	998:19	998:19	6	;
JUMP_STATEMENT	999:4	999:20	3	return ( int8 ) val ;
KEYWORD	999:4	999:4	4	return
LEAF_NODE	999:4	999:4	5	return
DESTINATION	999:11	999:11	4	( int8 ) val
EXPR	999:11	999:17	5	( int8 ) val
LEAF_NODE	999:11	999:11	6	(
TYPE_NAME	999:12	999:12	6	int8
LEAF_NODE	999:12	999:12	7	int8
LEAF_NODE	999:16	999:16	6	)
FIELD	999:17	999:17	6	val
LEAF_NODE	999:17	999:17	7	val
LEAF_NODE	999:20	999:20	4	;
LEAF_NODE	1000:0	1000:0	2	}
FUNCTION_DEF	1002:0	1009:0	1	
RETURN_TYPE	1002:0	1002:7	2	static int16
LEAF_NODE	1002:0	1002:0	3	static
TYPE_NAME	1002:7	1002:7	3	int16
LEAF_NODE	1002:7	1002:7	4	int16
FUNCTION_NAME	1002:13	1002:13	2	TIFFClampDoubleToInt16
LEAF_NODE	1002:13	1002:13	3	TIFFClampDoubleToInt16
PARAMETER_LIST	1002:35	1002:48	2	( double val )
LEAF_NODE	1002:35	1002:35	3	(
PARAMETER_DECL	1002:37	1002:44	3	double val
TYPE	1002:37	1002:37	4	double
TYPE_NAME	1002:37	1002:37	5	double
LEAF_NODE	1002:37	1002:37	6	double
NAME	1002:44	1002:44	4	val
LEAF_NODE	1002:44	1002:44	5	val
LEAF_NODE	1002:48	1002:48	3	)
LEAF_NODE	1003:0	1003:0	2	{
STATEMENTS	1004:4	1008:4	2	
SELECTION	1004:4	1005:8	3	
KEYWORD	1004:4	1004:4	4	if
LEAF_NODE	1004:4	1004:4	5	if
LEAF_NODE	1004:6	1004:6	4	(
CONDITION	1004:8	1004:8	4	val > 32767
EXPR	1004:8	1004:14	5	val > 32767
FIELD	1004:8	1004:8	6	val
LEAF_NODE	1004:8	1004:8	7	val
REL_OPERATOR	1004:12	1004:12	6	>
LEAF_NODE	1004:12	1004:12	7	>
FIELD	1004:14	1004:14	6	32767
LEAF_NODE	1004:14	1004:14	7	32767
LEAF_NODE	1004:20	1004:20	4	)
STATEMENTS	1005:8	1005:8	4	
JUMP_STATEMENT	1005:8	1005:20	5	return 32767 ;
KEYWORD	1005:8	1005:8	6	return
LEAF_NODE	1005:8	1005:8	7	return
DESTINATION	1005:15	1005:15	6	32767
EXPR	1005:15	1005:15	7	32767
FIELD	1005:15	1005:15	8	32767
LEAF_NODE	1005:15	1005:15	9	32767
LEAF_NODE	1005:20	1005:20	6	;
SELECTION	1006:4	1007:8	3	
KEYWORD	1006:4	1006:4	4	if
LEAF_NODE	1006:4	1006:4	5	if
LEAF_NODE	1006:6	1006:6	4	(
CONDITION	1006:8	1006:8	4	val < - 32768 || val != val
EXPR	1006:8	1006:8	5	val < - 32768 || val != val
OR	1006:8	1006:24	6	val < - 32768 || val != val
EXPR	1006:8	1006:14	7	val < - 32768
FIELD	1006:8	1006:8	8	val
LEAF_NODE	1006:8	1006:8	9	val
REL_OPERATOR	1006:12	1006:12	8	<
LEAF_NODE	1006:12	1006:12	9	<
UNARY_EXPR	1006:14	1006:15	8	- 32768
UNARY_OPERATOR	1006:14	1006:14	9	-
LEAF_NODE	1006:14	1006:14	10	-
FIELD	1006:15	1006:15	9	32768
LEAF_NODE	1006:15	1006:15	10	32768
LEAF_NODE	1006:21	1006:21	7	||
EXPR	1006:24	1006:31	7	val != val
FIELD	1006:24	1006:24	8	val
LEAF_NODE	1006:24	1006:24	9	val
EQ_OPERATOR	1006:28	1006:28	8	!=
LEAF_NODE	1006:28	1006:28	9	!=
FIELD	1006:31	1006:31	8	val
LEAF_NODE	1006:31	1006:31	9	val
LEAF_NODE	1006:35	1006:35	4	)
STATEMENTS	1007:8	1007:8	4	
JUMP_STATEMENT	1007:8	1007:21	5	return - 32768 ;
KEYWORD	1007:8	1007:8	6	return
LEAF_NODE	1007:8	1007:8	7	return
DESTINATION	1007:15	1007:15	6	- 32768
EXPR	1007:15	1007:15	7	- 32768
UNARY_EXPR	1007:15	1007:16	8	- 32768
UNARY_OPERATOR	1007:15	1007:15	9	-
LEAF_NODE	1007:15	1007:15	10	-
FIELD	1007:16	1007:16	9	32768
LEAF_NODE	1007:16	1007:16	10	32768
LEAF_NODE	1007:21	1007:21	6	;
JUMP_STATEMENT	1008:4	1008:21	3	return ( int16 ) val ;
KEYWORD	1008:4	1008:4	4	return
LEAF_NODE	1008:4	1008:4	5	return
DESTINATION	1008:11	1008:11	4	( int16 ) val
EXPR	1008:11	1008:18	5	( int16 ) val
LEAF_NODE	1008:11	1008:11	6	(
TYPE_NAME	1008:12	1008:12	6	int16
LEAF_NODE	1008:12	1008:12	7	int16
LEAF_NODE	1008:17	1008:17	6	)
FIELD	1008:18	1008:18	6	val
LEAF_NODE	1008:18	1008:18	7	val
LEAF_NODE	1008:21	1008:21	4	;
LEAF_NODE	1009:0	1009:0	2	}
FUNCTION_DEF	1011:0	1018:0	1	
RETURN_TYPE	1011:0	1011:7	2	static int32
LEAF_NODE	1011:0	1011:0	3	static
TYPE_NAME	1011:7	1011:7	3	int32
LEAF_NODE	1011:7	1011:7	4	int32
FUNCTION_NAME	1011:13	1011:13	2	TIFFClampDoubleToInt32
LEAF_NODE	1011:13	1011:13	3	TIFFClampDoubleToInt32
PARAMETER_LIST	1011:35	1011:48	2	( double val )
LEAF_NODE	1011:35	1011:35	3	(
PARAMETER_DECL	1011:37	1011:44	3	double val
TYPE	1011:37	1011:37	4	double
TYPE_NAME	1011:37	1011:37	5	double
LEAF_NODE	1011:37	1011:37	6	double
NAME	1011:44	1011:44	4	val
LEAF_NODE	1011:44	1011:44	5	val
LEAF_NODE	1011:48	1011:48	3	)
LEAF_NODE	1012:0	1012:0	2	{
STATEMENTS	1013:4	1017:4	2	
SELECTION	1013:4	1014:8	3	
KEYWORD	1013:4	1013:4	4	if
LEAF_NODE	1013:4	1013:4	5	if
LEAF_NODE	1013:6	1013:6	4	(
CONDITION	1013:8	1013:8	4	val > 0x7FFFFFFF
EXPR	1013:8	1013:14	5	val > 0x7FFFFFFF
FIELD	1013:8	1013:8	6	val
LEAF_NODE	1013:8	1013:8	7	val
REL_OPERATOR	1013:12	1013:12	6	>
LEAF_NODE	1013:12	1013:12	7	>
FIELD	1013:14	1013:14	6	0x7FFFFFFF
LEAF_NODE	1013:14	1013:14	7	0x7FFFFFFF
LEAF_NODE	1013:25	1013:25	4	)
STATEMENTS	1014:8	1014:8	4	
JUMP_STATEMENT	1014:8	1014:25	5	return 0x7FFFFFFF ;
KEYWORD	1014:8	1014:8	6	return
LEAF_NODE	1014:8	1014:8	7	return
DESTINATION	1014:15	1014:15	6	0x7FFFFFFF
EXPR	1014:15	1014:15	7	0x7FFFFFFF
FIELD	1014:15	1014:15	8	0x7FFFFFFF
LEAF_NODE	1014:15	1014:15	9	0x7FFFFFFF
LEAF_NODE	1014:25	1014:25	6	;
SELECTION	1015:4	1016:8	3	
KEYWORD	1015:4	1015:4	4	if
LEAF_NODE	1015:4	1015:4	5	if
LEAF_NODE	1015:6	1015:6	4	(
CONDITION	1015:8	1015:8	4	val < - 0x7FFFFFFF - 1 || val != val
EXPR	1015:8	1015:8	5	val < - 0x7FFFFFFF - 1 || val != val
OR	1015:8	1015:31	6	val < - 0x7FFFFFFF - 1 || val != val
EXPR	1015:8	1015:26	7	val < - 0x7FFFFFFF - 1
FIELD	1015:8	1015:8	8	val
LEAF_NODE	1015:8	1015:8	9	val
REL_OPERATOR	1015:12	1015:12	8	<
LEAF_NODE	1015:12	1015:12	9	<
UNARY_EXPR	1015:14	1015:15	8	- 0x7FFFFFFF
UNARY_OPERATOR	1015:14	1015:14	9	-
LEAF_NODE	1015:14	1015:14	10	-
FIELD	1015:15	1015:15	9	0x7FFFFFFF
LEAF_NODE	1015:15	1015:15	10	0x7FFFFFFF
LEAF_NODE	1015:25	1015:25	8	-
FIELD	1015:26	1015:26	8	1
LEAF_NODE	1015:26	1015:26	9	1
LEAF_NODE	1015:28	1015:28	7	||
EXPR	1015:31	1015:38	7	val != val
FIELD	1015:31	1015:31	8	val
LEAF_NODE	1015:31	1015:31	9	val
EQ_OPERATOR	1015:35	1015:35	8	!=
LEAF_NODE	1015:35	1015:35	9	!=
FIELD	1015:38	1015:38	8	val
LEAF_NODE	1015:38	1015:38	9	val
LEAF_NODE	1015:42	1015:42	4	)
STATEMENTS	1016:8	1016:8	4	
JUMP_STATEMENT	1016:8	1016:28	5	return - 0x7FFFFFFF - 1 ;
KEYWORD	1016:8	1016:8	6	return
LEAF_NODE	1016:8	1016:8	7	return
DESTINATION	1016:15	1016:15	6	- 0x7FFFFFFF - 1
EXPR	1016:15	1016:27	7	- 0x7FFFFFFF - 1
UNARY_EXPR	1016:15	1016:16	8	- 0x7FFFFFFF
UNARY_OPERATOR	1016:15	1016:15	9	-
LEAF_NODE	1016:15	1016:15	10	-
FIELD	1016:16	1016:16	9	0x7FFFFFFF
LEAF_NODE	1016:16	1016:16	10	0x7FFFFFFF
LEAF_NODE	1016:26	1016:26	8	-
FIELD	1016:27	1016:27	8	1
LEAF_NODE	1016:27	1016:27	9	1
LEAF_NODE	1016:28	1016:28	6	;
JUMP_STATEMENT	1017:4	1017:21	3	return ( int32 ) val ;
KEYWORD	1017:4	1017:4	4	return
LEAF_NODE	1017:4	1017:4	5	return
DESTINATION	1017:11	1017:11	4	( int32 ) val
EXPR	1017:11	1017:18	5	( int32 ) val
LEAF_NODE	1017:11	1017:11	6	(
TYPE_NAME	1017:12	1017:12	6	int32
LEAF_NODE	1017:12	1017:12	7	int32
LEAF_NODE	1017:17	1017:17	6	)
FIELD	1017:18	1017:18	6	val
LEAF_NODE	1017:18	1017:18	7	val
LEAF_NODE	1017:21	1017:21	4	;
LEAF_NODE	1018:0	1018:0	2	}
FUNCTION_DEF	1020:0	1027:0	1	
RETURN_TYPE	1020:0	1020:7	2	static uint8
LEAF_NODE	1020:0	1020:0	3	static
TYPE_NAME	1020:7	1020:7	3	uint8
LEAF_NODE	1020:7	1020:7	4	uint8
FUNCTION_NAME	1020:13	1020:13	2	TIFFClampDoubleToUInt8
LEAF_NODE	1020:13	1020:13	3	TIFFClampDoubleToUInt8
PARAMETER_LIST	1020:35	1020:48	2	( double val )
LEAF_NODE	1020:35	1020:35	3	(
PARAMETER_DECL	1020:37	1020:44	3	double val
TYPE	1020:37	1020:37	4	double
TYPE_NAME	1020:37	1020:37	5	double
LEAF_NODE	1020:37	1020:37	6	double
NAME	1020:44	1020:44	4	val
LEAF_NODE	1020:44	1020:44	5	val
LEAF_NODE	1020:48	1020:48	3	)
LEAF_NODE	1021:0	1021:0	2	{
STATEMENTS	1022:4	1026:4	2	
SELECTION	1022:4	1023:8	3	
KEYWORD	1022:4	1022:4	4	if
LEAF_NODE	1022:4	1022:4	5	if
LEAF_NODE	1022:6	1022:6	4	(
CONDITION	1022:8	1022:8	4	val < 0
EXPR	1022:8	1022:14	5	val < 0
FIELD	1022:8	1022:8	6	val
LEAF_NODE	1022:8	1022:8	7	val
REL_OPERATOR	1022:12	1022:12	6	<
LEAF_NODE	1022:12	1022:12	7	<
FIELD	1022:14	1022:14	6	0
LEAF_NODE	1022:14	1022:14	7	0
LEAF_NODE	1022:16	1022:16	4	)
STATEMENTS	1023:8	1023:8	4	
JUMP_STATEMENT	1023:8	1023:16	5	return 0 ;
KEYWORD	1023:8	1023:8	6	return
LEAF_NODE	1023:8	1023:8	7	return
DESTINATION	1023:15	1023:15	6	0
EXPR	1023:15	1023:15	7	0
FIELD	1023:15	1023:15	8	0
LEAF_NODE	1023:15	1023:15	9	0
LEAF_NODE	1023:16	1023:16	6	;
SELECTION	1024:4	1025:8	3	
KEYWORD	1024:4	1024:4	4	if
LEAF_NODE	1024:4	1024:4	5	if
LEAF_NODE	1024:6	1024:6	4	(
CONDITION	1024:8	1024:8	4	val > 255 || val != val
EXPR	1024:8	1024:8	5	val > 255 || val != val
OR	1024:8	1024:21	6	val > 255 || val != val
EXPR	1024:8	1024:14	7	val > 255
FIELD	1024:8	1024:8	8	val
LEAF_NODE	1024:8	1024:8	9	val
REL_OPERATOR	1024:12	1024:12	8	>
LEAF_NODE	1024:12	1024:12	9	>
FIELD	1024:14	1024:14	8	255
LEAF_NODE	1024:14	1024:14	9	255
LEAF_NODE	1024:18	1024:18	7	||
EXPR	1024:21	1024:28	7	val != val
FIELD	1024:21	1024:21	8	val
LEAF_NODE	1024:21	1024:21	9	val
EQ_OPERATOR	1024:25	1024:25	8	!=
LEAF_NODE	1024:25	1024:25	9	!=
FIELD	1024:28	1024:28	8	val
LEAF_NODE	1024:28	1024:28	9	val
LEAF_NODE	1024:32	1024:32	4	)
STATEMENTS	1025:8	1025:8	4	
JUMP_STATEMENT	1025:8	1025:18	5	return 255 ;
KEYWORD	1025:8	1025:8	6	return
LEAF_NODE	1025:8	1025:8	7	return
DESTINATION	1025:15	1025:15	6	255
EXPR	1025:15	1025:15	7	255
FIELD	1025:15	1025:15	8	255
LEAF_NODE	1025:15	1025:15	9	255
LEAF_NODE	1025:18	1025:18	6	;
JUMP_STATEMENT	1026:4	1026:21	3	return ( uint8 ) val ;
KEYWORD	1026:4	1026:4	4	return
LEAF_NODE	1026:4	1026:4	5	return
DESTINATION	1026:11	1026:11	4	( uint8 ) val
EXPR	1026:11	1026:18	5	( uint8 ) val
LEAF_NODE	1026:11	1026:11	6	(
TYPE_NAME	1026:12	1026:12	6	uint8
LEAF_NODE	1026:12	1026:12	7	uint8
LEAF_NODE	1026:17	1026:17	6	)
FIELD	1026:18	1026:18	6	val
LEAF_NODE	1026:18	1026:18	7	val
LEAF_NODE	1026:21	1026:21	4	;
LEAF_NODE	1027:0	1027:0	2	}
FUNCTION_DEF	1029:0	1036:0	1	
RETURN_TYPE	1029:0	1029:7	2	static uint16
LEAF_NODE	1029:0	1029:0	3	static
TYPE_NAME	1029:7	1029:7	3	uint16
LEAF_NODE	1029:7	1029:7	4	uint16
FUNCTION_NAME	1029:14	1029:14	2	TIFFClampDoubleToUInt16
LEAF_NODE	1029:14	1029:14	3	TIFFClampDoubleToUInt16
PARAMETER_LIST	1029:37	1029:50	2	( double val )
LEAF_NODE	1029:37	1029:37	3	(
PARAMETER_DECL	1029:39	1029:46	3	double val
TYPE	1029:39	1029:39	4	double
TYPE_NAME	1029:39	1029:39	5	double
LEAF_NODE	1029:39	1029:39	6	double
NAME	1029:46	1029:46	4	val
LEAF_NODE	1029:46	1029:46	5	val
LEAF_NODE	1029:50	1029:50	3	)
LEAF_NODE	1030:0	1030:0	2	{
STATEMENTS	1031:4	1035:4	2	
SELECTION	1031:4	1032:8	3	
KEYWORD	1031:4	1031:4	4	if
LEAF_NODE	1031:4	1031:4	5	if
LEAF_NODE	1031:6	1031:6	4	(
CONDITION	1031:8	1031:8	4	val < 0
EXPR	1031:8	1031:14	5	val < 0
FIELD	1031:8	1031:8	6	val
LEAF_NODE	1031:8	1031:8	7	val
REL_OPERATOR	1031:12	1031:12	6	<
LEAF_NODE	1031:12	1031:12	7	<
FIELD	1031:14	1031:14	6	0
LEAF_NODE	1031:14	1031:14	7	0
LEAF_NODE	1031:16	1031:16	4	)
STATEMENTS	1032:8	1032:8	4	
JUMP_STATEMENT	1032:8	1032:16	5	return 0 ;
KEYWORD	1032:8	1032:8	6	return
LEAF_NODE	1032:8	1032:8	7	return
DESTINATION	1032:15	1032:15	6	0
EXPR	1032:15	1032:15	7	0
FIELD	1032:15	1032:15	8	0
LEAF_NODE	1032:15	1032:15	9	0
LEAF_NODE	1032:16	1032:16	6	;
SELECTION	1033:4	1034:8	3	
KEYWORD	1033:4	1033:4	4	if
LEAF_NODE	1033:4	1033:4	5	if
LEAF_NODE	1033:6	1033:6	4	(
CONDITION	1033:8	1033:8	4	val > 65535 || val != val
EXPR	1033:8	1033:8	5	val > 65535 || val != val
OR	1033:8	1033:23	6	val > 65535 || val != val
EXPR	1033:8	1033:14	7	val > 65535
FIELD	1033:8	1033:8	8	val
LEAF_NODE	1033:8	1033:8	9	val
REL_OPERATOR	1033:12	1033:12	8	>
LEAF_NODE	1033:12	1033:12	9	>
FIELD	1033:14	1033:14	8	65535
LEAF_NODE	1033:14	1033:14	9	65535
LEAF_NODE	1033:20	1033:20	7	||
EXPR	1033:23	1033:30	7	val != val
FIELD	1033:23	1033:23	8	val
LEAF_NODE	1033:23	1033:23	9	val
EQ_OPERATOR	1033:27	1033:27	8	!=
LEAF_NODE	1033:27	1033:27	9	!=
FIELD	1033:30	1033:30	8	val
LEAF_NODE	1033:30	1033:30	9	val
LEAF_NODE	1033:34	1033:34	4	)
STATEMENTS	1034:8	1034:8	4	
JUMP_STATEMENT	1034:8	1034:20	5	return 65535 ;
KEYWORD	1034:8	1034:8	6	return
LEAF_NODE	1034:8	1034:8	7	return
DESTINATION	1034:15	1034:15	6	65535
EXPR	1034:15	1034:15	7	65535
FIELD	1034:15	1034:15	8	65535
LEAF_NODE	1034:15	1034:15	9	65535
LEAF_NODE	1034:20	1034:20	6	;
JUMP_STATEMENT	1035:4	1035:22	3	return ( uint16 ) val ;
KEYWORD	1035:4	1035:4	4	return
LEAF_NODE	1035:4	1035:4	5	return
DESTINATION	1035:11	1035:11	4	( uint16 ) val
EXPR	1035:11	1035:19	5	( uint16 ) val
LEAF_NODE	1035:11	1035:11	6	(
TYPE_NAME	1035:12	1035:12	6	uint16
LEAF_NODE	1035:12	1035:12	7	uint16
LEAF_NODE	1035:18	1035:18	6	)
FIELD	1035:19	1035:19	6	val
LEAF_NODE	1035:19	1035:19	7	val
LEAF_NODE	1035:22	1035:22	4	;
LEAF_NODE	1036:0	1036:0	2	}
FUNCTION_DEF	1038:0	1045:0	1	
RETURN_TYPE	1038:0	1038:7	2	static uint32
LEAF_NODE	1038:0	1038:0	3	static
TYPE_NAME	1038:7	1038:7	3	uint32
LEAF_NODE	1038:7	1038:7	4	uint32
FUNCTION_NAME	1038:14	1038:14	2	TIFFClampDoubleToUInt32
LEAF_NODE	1038:14	1038:14	3	TIFFClampDoubleToUInt32
PARAMETER_LIST	1038:37	1038:50	2	( double val )
LEAF_NODE	1038:37	1038:37	3	(
PARAMETER_DECL	1038:39	1038:46	3	double val
TYPE	1038:39	1038:39	4	double
TYPE_NAME	1038:39	1038:39	5	double
LEAF_NODE	1038:39	1038:39	6	double
NAME	1038:46	1038:46	4	val
LEAF_NODE	1038:46	1038:46	5	val
LEAF_NODE	1038:50	1038:50	3	)
LEAF_NODE	1039:0	1039:0	2	{
STATEMENTS	1040:4	1044:4	2	
SELECTION	1040:4	1041:8	3	
KEYWORD	1040:4	1040:4	4	if
LEAF_NODE	1040:4	1040:4	5	if
LEAF_NODE	1040:6	1040:6	4	(
CONDITION	1040:8	1040:8	4	val < 0
EXPR	1040:8	1040:14	5	val < 0
FIELD	1040:8	1040:8	6	val
LEAF_NODE	1040:8	1040:8	7	val
REL_OPERATOR	1040:12	1040:12	6	<
LEAF_NODE	1040:12	1040:12	7	<
FIELD	1040:14	1040:14	6	0
LEAF_NODE	1040:14	1040:14	7	0
LEAF_NODE	1040:16	1040:16	4	)
STATEMENTS	1041:8	1041:8	4	
JUMP_STATEMENT	1041:8	1041:16	5	return 0 ;
KEYWORD	1041:8	1041:8	6	return
LEAF_NODE	1041:8	1041:8	7	return
DESTINATION	1041:15	1041:15	6	0
EXPR	1041:15	1041:15	7	0
FIELD	1041:15	1041:15	8	0
LEAF_NODE	1041:15	1041:15	9	0
LEAF_NODE	1041:16	1041:16	6	;
SELECTION	1042:4	1043:8	3	
KEYWORD	1042:4	1042:4	4	if
LEAF_NODE	1042:4	1042:4	5	if
LEAF_NODE	1042:6	1042:6	4	(
CONDITION	1042:8	1042:8	4	val > 0xFFFFFFFFU || val != val
EXPR	1042:8	1042:8	5	val > 0xFFFFFFFFU || val != val
OR	1042:8	1042:29	6	val > 0xFFFFFFFFU || val != val
EXPR	1042:8	1042:14	7	val > 0xFFFFFFFFU
FIELD	1042:8	1042:8	8	val
LEAF_NODE	1042:8	1042:8	9	val
REL_OPERATOR	1042:12	1042:12	8	>
LEAF_NODE	1042:12	1042:12	9	>
FIELD	1042:14	1042:14	8	0xFFFFFFFFU
LEAF_NODE	1042:14	1042:14	9	0xFFFFFFFFU
LEAF_NODE	1042:26	1042:26	7	||
EXPR	1042:29	1042:36	7	val != val
FIELD	1042:29	1042:29	8	val
LEAF_NODE	1042:29	1042:29	9	val
EQ_OPERATOR	1042:33	1042:33	8	!=
LEAF_NODE	1042:33	1042:33	9	!=
FIELD	1042:36	1042:36	8	val
LEAF_NODE	1042:36	1042:36	9	val
LEAF_NODE	1042:40	1042:40	4	)
STATEMENTS	1043:8	1043:8	4	
JUMP_STATEMENT	1043:8	1043:26	5	return 0xFFFFFFFFU ;
KEYWORD	1043:8	1043:8	6	return
LEAF_NODE	1043:8	1043:8	7	return
DESTINATION	1043:15	1043:15	6	0xFFFFFFFFU
EXPR	1043:15	1043:15	7	0xFFFFFFFFU
FIELD	1043:15	1043:15	8	0xFFFFFFFFU
LEAF_NODE	1043:15	1043:15	9	0xFFFFFFFFU
LEAF_NODE	1043:26	1043:26	6	;
JUMP_STATEMENT	1044:4	1044:22	3	return ( uint32 ) val ;
KEYWORD	1044:4	1044:4	4	return
LEAF_NODE	1044:4	1044:4	5	return
DESTINATION	1044:11	1044:11	4	( uint32 ) val
EXPR	1044:11	1044:19	5	( uint32 ) val
LEAF_NODE	1044:11	1044:11	6	(
TYPE_NAME	1044:12	1044:12	6	uint32
LEAF_NODE	1044:12	1044:12	7	uint32
LEAF_NODE	1044:18	1044:18	6	)
FIELD	1044:19	1044:19	6	val
LEAF_NODE	1044:19	1044:19	7	val
LEAF_NODE	1044:22	1044:22	4	;
LEAF_NODE	1045:0	1045:0	2	}
FUNCTION_DEF	1047:0	1121:0	1	
RETURN_TYPE	1047:0	1047:7	2	static int
LEAF_NODE	1047:0	1047:0	3	static
TYPE_NAME	1047:7	1047:7	3	int
LEAF_NODE	1047:7	1047:7	4	int
FUNCTION_NAME	1048:0	1048:0	2	TIFFWriteDirectoryTagSampleformatArray
LEAF_NODE	1048:0	1048:0	3	TIFFWriteDirectoryTagSampleformatArray
PARAMETER_LIST	1048:38	1048:122	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , double * value )
LEAF_NODE	1048:38	1048:38	3	(
PARAMETER_DECL	1048:39	1048:45	3	TIFF * tif
TYPE	1048:39	1048:43	4	TIFF *
TYPE_NAME	1048:39	1048:39	5	TIFF
LEAF_NODE	1048:39	1048:39	6	TIFF
POINTER	1048:43	1048:43	5	*
LEAF_NODE	1048:43	1048:43	6	*
NAME	1048:45	1048:45	4	tif
LEAF_NODE	1048:45	1048:45	5	tif
LEAF_NODE	1048:48	1048:48	3	,
PARAMETER_DECL	1048:50	1048:58	3	uint32 * ndir
TYPE	1048:50	1048:56	4	uint32 *
TYPE_NAME	1048:50	1048:50	5	uint32
LEAF_NODE	1048:50	1048:50	6	uint32
POINTER	1048:56	1048:56	5	*
LEAF_NODE	1048:56	1048:56	6	*
NAME	1048:58	1048:58	4	ndir
LEAF_NODE	1048:58	1048:58	5	ndir
LEAF_NODE	1048:62	1048:62	3	,
PARAMETER_DECL	1048:64	1048:78	3	TIFFDirEntry * dir
TYPE	1048:64	1048:76	4	TIFFDirEntry *
TYPE_NAME	1048:64	1048:64	5	TIFFDirEntry
LEAF_NODE	1048:64	1048:64	6	TIFFDirEntry
POINTER	1048:76	1048:76	5	*
LEAF_NODE	1048:76	1048:76	6	*
NAME	1048:78	1048:78	4	dir
LEAF_NODE	1048:78	1048:78	5	dir
LEAF_NODE	1048:81	1048:81	3	,
PARAMETER_DECL	1048:83	1048:90	3	uint16 tag
TYPE	1048:83	1048:83	4	uint16
TYPE_NAME	1048:83	1048:83	5	uint16
LEAF_NODE	1048:83	1048:83	6	uint16
NAME	1048:90	1048:90	4	tag
LEAF_NODE	1048:90	1048:90	5	tag
LEAF_NODE	1048:93	1048:93	3	,
PARAMETER_DECL	1048:95	1048:102	3	uint32 count
TYPE	1048:95	1048:95	4	uint32
TYPE_NAME	1048:95	1048:95	5	uint32
LEAF_NODE	1048:95	1048:95	6	uint32
NAME	1048:102	1048:102	4	count
LEAF_NODE	1048:102	1048:102	5	count
LEAF_NODE	1048:107	1048:107	3	,
PARAMETER_DECL	1048:109	1048:117	3	double * value
TYPE	1048:109	1048:115	4	double *
TYPE_NAME	1048:109	1048:109	5	double
LEAF_NODE	1048:109	1048:109	6	double
POINTER	1048:115	1048:115	5	*
LEAF_NODE	1048:115	1048:115	6	*
NAME	1048:117	1048:117	4	value
LEAF_NODE	1048:117	1048:117	5	value
LEAF_NODE	1048:122	1048:122	3	)
LEAF_NODE	1049:0	1049:0	2	{
STATEMENTS	1050:1	1120:12	2	
LEAF_NODE	1050:1	1050:1	3	static
SIMPLE_DECL	1050:8	1050:70	3	const char [ ] module ; module = "TIFFWriteDirectoryTagSampleformatArray" ;
VAR_DECL	1050:8	1050:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagSampleformatArray"
TYPE	1050:8	1050:25	5	const char [ ]
TYPE_NAME	1050:8	1050:14	6	const char
LEAF_NODE	1050:8	1050:8	7	const
LEAF_NODE	1050:14	1050:14	7	char
TYPE_SUFFIX	1050:25	1050:26	6	[ ]
LEAF_NODE	1050:25	1050:25	7	[
LEAF_NODE	1050:26	1050:26	7	]
NAME	1050:19	1050:19	5	module
LEAF_NODE	1050:19	1050:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1050:19	1050:19	5	module = "TIFFWriteDirectoryTagSampleformatArray"
ASSIGN	1050:19	1050:30	6	module = "TIFFWriteDirectoryTagSampleformatArray"
LVAL	1050:19	1050:19	7	module
NAME	1050:19	1050:19	8	module
LEAF_NODE	1050:19	1050:19	9	module
ASSIGN_OP	1050:28	1050:28	7	=
LEAF_NODE	1050:28	1050:28	8	=
RVAL	1050:30	1050:30	7	"TIFFWriteDirectoryTagSampleformatArray"
FIELD	1050:30	1050:30	8	"TIFFWriteDirectoryTagSampleformatArray"
LEAF_NODE	1050:30	1050:30	9	"TIFFWriteDirectoryTagSampleformatArray"
LEAF_NODE	1050:70	1050:70	4	;
SIMPLE_DECL	1051:1	1051:11	3	void * conv ;
VAR_DECL	1051:1	1051:7	4	void * conv
TYPE	1051:1	1051:5	5	void *
TYPE_NAME	1051:1	1051:1	6	void
LEAF_NODE	1051:1	1051:1	7	void
POINTER	1051:5	1051:5	6	*
LEAF_NODE	1051:5	1051:5	7	*
NAME	1051:7	1051:7	5	conv
LEAF_NODE	1051:7	1051:7	6	conv
LEAF_NODE	1051:11	1051:11	4	;
SIMPLE_DECL	1052:1	1052:9	3	uint32 i ;
VAR_DECL	1052:1	1052:8	4	uint32 i
TYPE	1052:1	1052:1	5	uint32
TYPE_NAME	1052:1	1052:1	6	uint32
LEAF_NODE	1052:1	1052:1	7	uint32
NAME	1052:8	1052:8	5	i
LEAF_NODE	1052:8	1052:8	6	i
LEAF_NODE	1052:9	1052:9	4	;
SIMPLE_DECL	1053:1	1053:7	3	int ok ;
VAR_DECL	1053:1	1053:5	4	int ok
TYPE	1053:1	1053:1	5	int
TYPE_NAME	1053:1	1053:1	6	int
LEAF_NODE	1053:1	1053:1	7	int
NAME	1053:5	1053:5	5	ok
LEAF_NODE	1053:5	1053:5	6	ok
LEAF_NODE	1053:7	1053:7	4	;
EXPR_STATEMENT	1054:1	1054:41	3	conv = _TIFFmalloc ( count * sizeof ( double ) ) ;
EXPR	1054:1	1054:1	4	conv = _TIFFmalloc ( count * sizeof ( double ) )
ASSIGN	1054:1	1054:8	5	conv = _TIFFmalloc ( count * sizeof ( double ) )
LVAL	1054:1	1054:1	6	conv
FIELD	1054:1	1054:1	7	conv
LEAF_NODE	1054:1	1054:1	8	conv
ASSIGN_OP	1054:6	1054:6	6	=
LEAF_NODE	1054:6	1054:6	7	=
RVAL	1054:8	1054:8	6	_TIFFmalloc ( count * sizeof ( double ) )
FUNCTION_CALL	1054:8	1054:40	7	_TIFFmalloc ( count * sizeof ( double ) )
CALLEE	1054:8	1054:8	8	_TIFFmalloc
LEAF_NODE	1054:8	1054:8	9	_TIFFmalloc
LEAF_NODE	1054:19	1054:19	8	(
ARGUMENT	1054:20	1054:26	8	count * sizeof ( double )
FIELD	1054:20	1054:20	9	count
LEAF_NODE	1054:20	1054:20	10	count
LEAF_NODE	1054:25	1054:25	9	*
FUNCTION_CALL	1054:26	1054:39	9	sizeof ( double )
CALLEE	1054:26	1054:26	10	sizeof
LEAF_NODE	1054:26	1054:26	11	sizeof
LEAF_NODE	1054:32	1054:32	10	(
ARGUMENT	1054:33	1054:33	10	double
FIELD	1054:33	1054:33	11	double
LEAF_NODE	1054:33	1054:33	12	double
LEAF_NODE	1054:39	1054:39	10	)
LEAF_NODE	1054:40	1054:40	8	)
LEAF_NODE	1054:41	1054:41	4	;
SELECTION	1055:1	1056:1	3	
KEYWORD	1055:1	1055:1	4	if
LEAF_NODE	1055:1	1055:1	5	if
LEAF_NODE	1055:4	1055:4	4	(
CONDITION	1055:5	1055:5	4	conv == NULL
EXPR	1055:5	1055:13	5	conv == NULL
FIELD	1055:5	1055:5	6	conv
LEAF_NODE	1055:5	1055:5	7	conv
EQ_OPERATOR	1055:10	1055:10	6	==
LEAF_NODE	1055:10	1055:10	7	==
FIELD	1055:13	1055:13	6	NULL
LEAF_NODE	1055:13	1055:13	7	NULL
LEAF_NODE	1055:17	1055:17	4	)
STATEMENTS	1056:1	1059:1	4	
LEAF_NODE	1056:1	1056:1	5	{
STATEMENTS	1057:2	1058:2	5	
EXPR_STATEMENT	1057:2	1057:60	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1057:2	1057:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1057:2	1057:59	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1057:2	1057:2	9	TIFFErrorExt
LEAF_NODE	1057:2	1057:2	10	TIFFErrorExt
LEAF_NODE	1057:14	1057:14	9	(
ARGUMENT	1057:15	1057:15	9	tif -> tif_clientdata
FIELD	1057:15	1057:20	10	tif -> tif_clientdata
LEAF_NODE	1057:15	1057:15	11	tif
LEAF_NODE	1057:18	1057:18	11	->
LEAF_NODE	1057:20	1057:20	11	tif_clientdata
LEAF_NODE	1057:34	1057:34	9	,
ARGUMENT	1057:36	1057:36	9	module
FIELD	1057:36	1057:36	10	module
LEAF_NODE	1057:36	1057:36	11	module
LEAF_NODE	1057:42	1057:42	9	,
ARGUMENT	1057:44	1057:44	9	"Out of memory"
FIELD	1057:44	1057:44	10	"Out of memory"
LEAF_NODE	1057:44	1057:44	11	"Out of memory"
LEAF_NODE	1057:59	1057:59	9	)
LEAF_NODE	1057:60	1057:60	7	;
JUMP_STATEMENT	1058:2	1058:12	6	return ( 0 ) ;
KEYWORD	1058:2	1058:2	7	return
LEAF_NODE	1058:2	1058:2	8	return
DESTINATION	1058:9	1058:9	7	( 0 )
EXPR	1058:9	1058:11	8	( 0 )
LEAF_NODE	1058:9	1058:9	9	(
FIELD	1058:10	1058:10	9	0
LEAF_NODE	1058:10	1058:10	10	0
LEAF_NODE	1058:11	1058:11	9	)
LEAF_NODE	1058:12	1058:12	7	;
LEAF_NODE	1059:1	1059:1	5	}
SELECTION	1061:1	1062:1	3	
KEYWORD	1061:1	1061:1	4	switch
LEAF_NODE	1061:1	1061:1	5	switch
LEAF_NODE	1061:8	1061:8	4	(
CONDITION	1061:9	1061:9	4	tif -> tif_dir . td_sampleformat
EXPR	1061:9	1061:9	5	tif -> tif_dir . td_sampleformat
FIELD	1061:9	1061:22	6	tif -> tif_dir . td_sampleformat
LEAF_NODE	1061:9	1061:9	7	tif
LEAF_NODE	1061:12	1061:12	7	->
LEAF_NODE	1061:14	1061:14	7	tif_dir
LEAF_NODE	1061:21	1061:21	7	.
LEAF_NODE	1061:22	1061:22	7	td_sampleformat
LEAF_NODE	1061:37	1061:37	4	)
STATEMENTS	1062:1	1117:1	4	
LEAF_NODE	1062:1	1062:1	5	{
STATEMENTS	1063:2	1116:3	5	
LABEL	1063:2	1063:26	6	case SAMPLEFORMAT_IEEEFP :
LEAF_NODE	1063:2	1063:2	7	case
LEAF_NODE	1063:7	1063:7	7	SAMPLEFORMAT_IEEEFP
LEAF_NODE	1063:26	1063:26	7	:
SELECTION	1064:3	1065:3	6	
KEYWORD	1064:3	1064:3	7	if
LEAF_NODE	1064:3	1064:3	8	if
LEAF_NODE	1064:6	1064:6	7	(
CONDITION	1064:7	1064:7	7	tif -> tif_dir . td_bitspersample <= 32
EXPR	1064:7	1064:38	8	tif -> tif_dir . td_bitspersample <= 32
FIELD	1064:7	1064:20	9	tif -> tif_dir . td_bitspersample
LEAF_NODE	1064:7	1064:7	10	tif
LEAF_NODE	1064:10	1064:10	10	->
LEAF_NODE	1064:12	1064:12	10	tif_dir
LEAF_NODE	1064:19	1064:19	10	.
LEAF_NODE	1064:20	1064:20	10	td_bitspersample
REL_OPERATOR	1064:36	1064:36	9	<=
LEAF_NODE	1064:36	1064:36	10	<=
FIELD	1064:38	1064:38	9	32
LEAF_NODE	1064:38	1064:38	10	32
LEAF_NODE	1064:40	1064:40	7	)
STATEMENTS	1065:3	1069:3	7	
LEAF_NODE	1065:3	1065:3	8	{
STATEMENTS	1066:4	1068:4	8	
ITERATION	1066:4	1067:5	9	
KEYWORD	1066:4	1066:4	10	for
LEAF_NODE	1066:4	1066:4	11	for
LEAF_NODE	1066:8	1066:8	10	(
FOR_INIT	1066:9	1066:14	10	i = 0 ;
EXPR	1066:9	1066:9	11	i = 0
ASSIGN	1066:9	1066:13	12	i = 0
LVAL	1066:9	1066:9	13	i
FIELD	1066:9	1066:9	14	i
LEAF_NODE	1066:9	1066:9	15	i
ASSIGN_OP	1066:11	1066:11	13	=
LEAF_NODE	1066:11	1066:11	14	=
RVAL	1066:13	1066:13	13	0
FIELD	1066:13	1066:13	14	0
LEAF_NODE	1066:13	1066:13	15	0
LEAF_NODE	1066:14	1066:14	11	;
CONDITION	1066:16	1066:16	10	i < count
EXPR	1066:16	1066:20	11	i < count
FIELD	1066:16	1066:16	12	i
LEAF_NODE	1066:16	1066:16	13	i
REL_OPERATOR	1066:18	1066:18	12	<
LEAF_NODE	1066:18	1066:18	13	<
FIELD	1066:20	1066:20	12	count
LEAF_NODE	1066:20	1066:20	13	count
LEAF_NODE	1066:25	1066:25	10	;
FOR_EXPR	1066:27	1066:27	10	++ i
EXPR	1066:27	1066:29	11	++ i
LEAF_NODE	1066:27	1066:27	12	++
FIELD	1066:29	1066:29	12	i
LEAF_NODE	1066:29	1066:29	13	i
LEAF_NODE	1066:30	1066:30	10	)
STATEMENTS	1067:5	1067:5	10	
EXPR_STATEMENT	1067:5	1067:58	11	( ( float * ) conv ) [ i ] = _TIFFClampDoubleToFloat ( value [ i ] ) ;
EXPR	1067:5	1067:5	12	( ( float * ) conv ) [ i ] = _TIFFClampDoubleToFloat ( value [ i ] )
ASSIGN	1067:5	1067:25	13	( ( float * ) conv ) [ i ] = _TIFFClampDoubleToFloat ( value [ i ] )
LVAL	1067:5	1067:21	14	( ( float * ) conv ) [ i ]
LEAF_NODE	1067:5	1067:5	15	(
LEAF_NODE	1067:6	1067:6	15	(
TYPE_NAME	1067:7	1067:7	15	float
LEAF_NODE	1067:7	1067:7	16	float
LEAF_NODE	1067:12	1067:12	15	*
LEAF_NODE	1067:13	1067:13	15	)
FIELD	1067:14	1067:14	15	conv
LEAF_NODE	1067:14	1067:14	16	conv
LEAF_NODE	1067:18	1067:18	15	)
LEAF_NODE	1067:19	1067:19	15	[
EXPR	1067:20	1067:20	15	i
FIELD	1067:20	1067:20	16	i
LEAF_NODE	1067:20	1067:20	17	i
LEAF_NODE	1067:21	1067:21	15	]
ASSIGN_OP	1067:23	1067:23	14	=
LEAF_NODE	1067:23	1067:23	15	=
RVAL	1067:25	1067:25	14	_TIFFClampDoubleToFloat ( value [ i ] )
FUNCTION_CALL	1067:25	1067:57	15	_TIFFClampDoubleToFloat ( value [ i ] )
CALLEE	1067:25	1067:25	16	_TIFFClampDoubleToFloat
LEAF_NODE	1067:25	1067:25	17	_TIFFClampDoubleToFloat
LEAF_NODE	1067:48	1067:48	16	(
ARGUMENT	1067:49	1067:49	16	value [ i ]
FIELD	1067:49	1067:56	17	value [ i ]
LEAF_NODE	1067:49	1067:49	18	value
LEAF_NODE	1067:54	1067:54	18	[
EXPR	1067:55	1067:55	18	i
FIELD	1067:55	1067:55	19	i
LEAF_NODE	1067:55	1067:55	20	i
LEAF_NODE	1067:56	1067:56	18	]
LEAF_NODE	1067:57	1067:57	16	)
LEAF_NODE	1067:58	1067:58	12	;
EXPR_STATEMENT	1068:4	1068:77	9	ok = TIFFWriteDirectoryTagFloatArray ( tif , ndir , dir , tag , count , ( float * ) conv ) ;
EXPR	1068:4	1068:4	10	ok = TIFFWriteDirectoryTagFloatArray ( tif , ndir , dir , tag , count , ( float * ) conv )
ASSIGN	1068:4	1068:9	11	ok = TIFFWriteDirectoryTagFloatArray ( tif , ndir , dir , tag , count , ( float * ) conv )
LVAL	1068:4	1068:4	12	ok
FIELD	1068:4	1068:4	13	ok
LEAF_NODE	1068:4	1068:4	14	ok
ASSIGN_OP	1068:7	1068:7	12	=
LEAF_NODE	1068:7	1068:7	13	=
RVAL	1068:9	1068:9	12	TIFFWriteDirectoryTagFloatArray ( tif , ndir , dir , tag , count , ( float * ) conv )
FUNCTION_CALL	1068:9	1068:76	13	TIFFWriteDirectoryTagFloatArray ( tif , ndir , dir , tag , count , ( float * ) conv )
CALLEE	1068:9	1068:9	14	TIFFWriteDirectoryTagFloatArray
LEAF_NODE	1068:9	1068:9	15	TIFFWriteDirectoryTagFloatArray
LEAF_NODE	1068:40	1068:40	14	(
ARGUMENT	1068:41	1068:41	14	tif
FIELD	1068:41	1068:41	15	tif
LEAF_NODE	1068:41	1068:41	16	tif
LEAF_NODE	1068:44	1068:44	14	,
ARGUMENT	1068:45	1068:45	14	ndir
FIELD	1068:45	1068:45	15	ndir
LEAF_NODE	1068:45	1068:45	16	ndir
LEAF_NODE	1068:49	1068:49	14	,
ARGUMENT	1068:50	1068:50	14	dir
FIELD	1068:50	1068:50	15	dir
LEAF_NODE	1068:50	1068:50	16	dir
LEAF_NODE	1068:53	1068:53	14	,
ARGUMENT	1068:54	1068:54	14	tag
FIELD	1068:54	1068:54	15	tag
LEAF_NODE	1068:54	1068:54	16	tag
LEAF_NODE	1068:57	1068:57	14	,
ARGUMENT	1068:58	1068:58	14	count
FIELD	1068:58	1068:58	15	count
LEAF_NODE	1068:58	1068:58	16	count
LEAF_NODE	1068:63	1068:63	14	,
ARGUMENT	1068:64	1068:72	14	( float * ) conv
LEAF_NODE	1068:64	1068:64	15	(
TYPE_NAME	1068:65	1068:65	15	float
LEAF_NODE	1068:65	1068:65	16	float
LEAF_NODE	1068:70	1068:70	15	*
LEAF_NODE	1068:71	1068:71	15	)
FIELD	1068:72	1068:72	15	conv
LEAF_NODE	1068:72	1068:72	16	conv
LEAF_NODE	1068:76	1068:76	14	)
LEAF_NODE	1068:77	1068:77	10	;
LEAF_NODE	1069:3	1069:3	8	}
SELECTION	1070:3	1071:3	6	
KEYWORD	1070:3	1070:3	7	else
LEAF_NODE	1070:3	1070:3	8	else
STATEMENTS	1071:3	1073:3	7	
LEAF_NODE	1071:3	1071:3	8	{
STATEMENTS	1072:4	1072:4	8	
EXPR_STATEMENT	1072:4	1072:71	9	ok = TIFFWriteDirectoryTagDoubleArray ( tif , ndir , dir , tag , count , value ) ;
EXPR	1072:4	1072:4	10	ok = TIFFWriteDirectoryTagDoubleArray ( tif , ndir , dir , tag , count , value )
ASSIGN	1072:4	1072:9	11	ok = TIFFWriteDirectoryTagDoubleArray ( tif , ndir , dir , tag , count , value )
LVAL	1072:4	1072:4	12	ok
FIELD	1072:4	1072:4	13	ok
LEAF_NODE	1072:4	1072:4	14	ok
ASSIGN_OP	1072:7	1072:7	12	=
LEAF_NODE	1072:7	1072:7	13	=
RVAL	1072:9	1072:9	12	TIFFWriteDirectoryTagDoubleArray ( tif , ndir , dir , tag , count , value )
FUNCTION_CALL	1072:9	1072:70	13	TIFFWriteDirectoryTagDoubleArray ( tif , ndir , dir , tag , count , value )
CALLEE	1072:9	1072:9	14	TIFFWriteDirectoryTagDoubleArray
LEAF_NODE	1072:9	1072:9	15	TIFFWriteDirectoryTagDoubleArray
LEAF_NODE	1072:41	1072:41	14	(
ARGUMENT	1072:42	1072:42	14	tif
FIELD	1072:42	1072:42	15	tif
LEAF_NODE	1072:42	1072:42	16	tif
LEAF_NODE	1072:45	1072:45	14	,
ARGUMENT	1072:46	1072:46	14	ndir
FIELD	1072:46	1072:46	15	ndir
LEAF_NODE	1072:46	1072:46	16	ndir
LEAF_NODE	1072:50	1072:50	14	,
ARGUMENT	1072:51	1072:51	14	dir
FIELD	1072:51	1072:51	15	dir
LEAF_NODE	1072:51	1072:51	16	dir
LEAF_NODE	1072:54	1072:54	14	,
ARGUMENT	1072:55	1072:55	14	tag
FIELD	1072:55	1072:55	15	tag
LEAF_NODE	1072:55	1072:55	16	tag
LEAF_NODE	1072:58	1072:58	14	,
ARGUMENT	1072:59	1072:59	14	count
FIELD	1072:59	1072:59	15	count
LEAF_NODE	1072:59	1072:59	16	count
LEAF_NODE	1072:64	1072:64	14	,
ARGUMENT	1072:65	1072:65	14	value
FIELD	1072:65	1072:65	15	value
LEAF_NODE	1072:65	1072:65	16	value
LEAF_NODE	1072:70	1072:70	14	)
LEAF_NODE	1072:71	1072:71	10	;
LEAF_NODE	1073:3	1073:3	8	}
JUMP_STATEMENT	1074:3	1074:8	6	break DESTINATION ;
KEYWORD	1074:3	1074:3	7	break
LEAF_NODE	1074:3	1074:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1074:8	1074:8	7	;
LABEL	1075:2	1075:23	6	case SAMPLEFORMAT_INT :
LEAF_NODE	1075:2	1075:2	7	case
LEAF_NODE	1075:7	1075:7	7	SAMPLEFORMAT_INT
LEAF_NODE	1075:23	1075:23	7	:
SELECTION	1076:3	1077:3	6	
KEYWORD	1076:3	1076:3	7	if
LEAF_NODE	1076:3	1076:3	8	if
LEAF_NODE	1076:6	1076:6	7	(
CONDITION	1076:7	1076:7	7	tif -> tif_dir . td_bitspersample <= 8
EXPR	1076:7	1076:38	8	tif -> tif_dir . td_bitspersample <= 8
FIELD	1076:7	1076:20	9	tif -> tif_dir . td_bitspersample
LEAF_NODE	1076:7	1076:7	10	tif
LEAF_NODE	1076:10	1076:10	10	->
LEAF_NODE	1076:12	1076:12	10	tif_dir
LEAF_NODE	1076:19	1076:19	10	.
LEAF_NODE	1076:20	1076:20	10	td_bitspersample
REL_OPERATOR	1076:36	1076:36	9	<=
LEAF_NODE	1076:36	1076:36	10	<=
FIELD	1076:38	1076:38	9	8
LEAF_NODE	1076:38	1076:38	10	8
LEAF_NODE	1076:39	1076:39	7	)
STATEMENTS	1077:3	1081:3	7	
LEAF_NODE	1077:3	1077:3	8	{
STATEMENTS	1078:4	1080:4	8	
ITERATION	1078:4	1079:5	9	
KEYWORD	1078:4	1078:4	10	for
LEAF_NODE	1078:4	1078:4	11	for
LEAF_NODE	1078:8	1078:8	10	(
FOR_INIT	1078:9	1078:14	10	i = 0 ;
EXPR	1078:9	1078:9	11	i = 0
ASSIGN	1078:9	1078:13	12	i = 0
LVAL	1078:9	1078:9	13	i
FIELD	1078:9	1078:9	14	i
LEAF_NODE	1078:9	1078:9	15	i
ASSIGN_OP	1078:11	1078:11	13	=
LEAF_NODE	1078:11	1078:11	14	=
RVAL	1078:13	1078:13	13	0
FIELD	1078:13	1078:13	14	0
LEAF_NODE	1078:13	1078:13	15	0
LEAF_NODE	1078:14	1078:14	11	;
CONDITION	1078:16	1078:16	10	i < count
EXPR	1078:16	1078:20	11	i < count
FIELD	1078:16	1078:16	12	i
LEAF_NODE	1078:16	1078:16	13	i
REL_OPERATOR	1078:18	1078:18	12	<
LEAF_NODE	1078:18	1078:18	13	<
FIELD	1078:20	1078:20	12	count
LEAF_NODE	1078:20	1078:20	13	count
LEAF_NODE	1078:25	1078:25	10	;
FOR_EXPR	1078:27	1078:27	10	++ i
EXPR	1078:27	1078:29	11	++ i
LEAF_NODE	1078:27	1078:27	12	++
FIELD	1078:29	1078:29	12	i
LEAF_NODE	1078:29	1078:29	13	i
LEAF_NODE	1078:30	1078:30	10	)
STATEMENTS	1079:5	1079:5	10	
EXPR_STATEMENT	1079:5	1079:55	11	( ( int8 * ) conv ) [ i ] = TIFFClampDoubleToInt8 ( value [ i ] ) ;
EXPR	1079:5	1079:5	12	( ( int8 * ) conv ) [ i ] = TIFFClampDoubleToInt8 ( value [ i ] )
ASSIGN	1079:5	1079:24	13	( ( int8 * ) conv ) [ i ] = TIFFClampDoubleToInt8 ( value [ i ] )
LVAL	1079:5	1079:20	14	( ( int8 * ) conv ) [ i ]
LEAF_NODE	1079:5	1079:5	15	(
LEAF_NODE	1079:6	1079:6	15	(
TYPE_NAME	1079:7	1079:7	15	int8
LEAF_NODE	1079:7	1079:7	16	int8
LEAF_NODE	1079:11	1079:11	15	*
LEAF_NODE	1079:12	1079:12	15	)
FIELD	1079:13	1079:13	15	conv
LEAF_NODE	1079:13	1079:13	16	conv
LEAF_NODE	1079:17	1079:17	15	)
LEAF_NODE	1079:18	1079:18	15	[
EXPR	1079:19	1079:19	15	i
FIELD	1079:19	1079:19	16	i
LEAF_NODE	1079:19	1079:19	17	i
LEAF_NODE	1079:20	1079:20	15	]
ASSIGN_OP	1079:22	1079:22	14	=
LEAF_NODE	1079:22	1079:22	15	=
RVAL	1079:24	1079:24	14	TIFFClampDoubleToInt8 ( value [ i ] )
FUNCTION_CALL	1079:24	1079:54	15	TIFFClampDoubleToInt8 ( value [ i ] )
CALLEE	1079:24	1079:24	16	TIFFClampDoubleToInt8
LEAF_NODE	1079:24	1079:24	17	TIFFClampDoubleToInt8
LEAF_NODE	1079:45	1079:45	16	(
ARGUMENT	1079:46	1079:46	16	value [ i ]
FIELD	1079:46	1079:53	17	value [ i ]
LEAF_NODE	1079:46	1079:46	18	value
LEAF_NODE	1079:51	1079:51	18	[
EXPR	1079:52	1079:52	18	i
FIELD	1079:52	1079:52	19	i
LEAF_NODE	1079:52	1079:52	20	i
LEAF_NODE	1079:53	1079:53	18	]
LEAF_NODE	1079:54	1079:54	16	)
LEAF_NODE	1079:55	1079:55	12	;
EXPR_STATEMENT	1080:4	1080:76	9	ok = TIFFWriteDirectoryTagSbyteArray ( tif , ndir , dir , tag , count , ( int8 * ) conv ) ;
EXPR	1080:4	1080:4	10	ok = TIFFWriteDirectoryTagSbyteArray ( tif , ndir , dir , tag , count , ( int8 * ) conv )
ASSIGN	1080:4	1080:9	11	ok = TIFFWriteDirectoryTagSbyteArray ( tif , ndir , dir , tag , count , ( int8 * ) conv )
LVAL	1080:4	1080:4	12	ok
FIELD	1080:4	1080:4	13	ok
LEAF_NODE	1080:4	1080:4	14	ok
ASSIGN_OP	1080:7	1080:7	12	=
LEAF_NODE	1080:7	1080:7	13	=
RVAL	1080:9	1080:9	12	TIFFWriteDirectoryTagSbyteArray ( tif , ndir , dir , tag , count , ( int8 * ) conv )
FUNCTION_CALL	1080:9	1080:75	13	TIFFWriteDirectoryTagSbyteArray ( tif , ndir , dir , tag , count , ( int8 * ) conv )
CALLEE	1080:9	1080:9	14	TIFFWriteDirectoryTagSbyteArray
LEAF_NODE	1080:9	1080:9	15	TIFFWriteDirectoryTagSbyteArray
LEAF_NODE	1080:40	1080:40	14	(
ARGUMENT	1080:41	1080:41	14	tif
FIELD	1080:41	1080:41	15	tif
LEAF_NODE	1080:41	1080:41	16	tif
LEAF_NODE	1080:44	1080:44	14	,
ARGUMENT	1080:45	1080:45	14	ndir
FIELD	1080:45	1080:45	15	ndir
LEAF_NODE	1080:45	1080:45	16	ndir
LEAF_NODE	1080:49	1080:49	14	,
ARGUMENT	1080:50	1080:50	14	dir
FIELD	1080:50	1080:50	15	dir
LEAF_NODE	1080:50	1080:50	16	dir
LEAF_NODE	1080:53	1080:53	14	,
ARGUMENT	1080:54	1080:54	14	tag
FIELD	1080:54	1080:54	15	tag
LEAF_NODE	1080:54	1080:54	16	tag
LEAF_NODE	1080:57	1080:57	14	,
ARGUMENT	1080:58	1080:58	14	count
FIELD	1080:58	1080:58	15	count
LEAF_NODE	1080:58	1080:58	16	count
LEAF_NODE	1080:63	1080:63	14	,
ARGUMENT	1080:64	1080:71	14	( int8 * ) conv
LEAF_NODE	1080:64	1080:64	15	(
TYPE_NAME	1080:65	1080:65	15	int8
LEAF_NODE	1080:65	1080:65	16	int8
LEAF_NODE	1080:69	1080:69	15	*
LEAF_NODE	1080:70	1080:70	15	)
FIELD	1080:71	1080:71	15	conv
LEAF_NODE	1080:71	1080:71	16	conv
LEAF_NODE	1080:75	1080:75	14	)
LEAF_NODE	1080:76	1080:76	10	;
LEAF_NODE	1081:3	1081:3	8	}
SELECTION	1082:3	1082:8	6	
KEYWORD	1082:3	1082:3	7	else
LEAF_NODE	1082:3	1082:3	8	else
STATEMENTS	1082:8	1082:8	7	
SELECTION	1082:8	1083:3	8	
KEYWORD	1082:8	1082:8	9	if
LEAF_NODE	1082:8	1082:8	10	if
LEAF_NODE	1082:11	1082:11	9	(
CONDITION	1082:12	1082:12	9	tif -> tif_dir . td_bitspersample <= 16
EXPR	1082:12	1082:43	10	tif -> tif_dir . td_bitspersample <= 16
FIELD	1082:12	1082:25	11	tif -> tif_dir . td_bitspersample
LEAF_NODE	1082:12	1082:12	12	tif
LEAF_NODE	1082:15	1082:15	12	->
LEAF_NODE	1082:17	1082:17	12	tif_dir
LEAF_NODE	1082:24	1082:24	12	.
LEAF_NODE	1082:25	1082:25	12	td_bitspersample
REL_OPERATOR	1082:41	1082:41	11	<=
LEAF_NODE	1082:41	1082:41	12	<=
FIELD	1082:43	1082:43	11	16
LEAF_NODE	1082:43	1082:43	12	16
LEAF_NODE	1082:45	1082:45	9	)
STATEMENTS	1083:3	1087:3	9	
LEAF_NODE	1083:3	1083:3	10	{
STATEMENTS	1084:4	1086:4	10	
ITERATION	1084:4	1085:5	11	
KEYWORD	1084:4	1084:4	12	for
LEAF_NODE	1084:4	1084:4	13	for
LEAF_NODE	1084:8	1084:8	12	(
FOR_INIT	1084:9	1084:14	12	i = 0 ;
EXPR	1084:9	1084:9	13	i = 0
ASSIGN	1084:9	1084:13	14	i = 0
LVAL	1084:9	1084:9	15	i
FIELD	1084:9	1084:9	16	i
LEAF_NODE	1084:9	1084:9	17	i
ASSIGN_OP	1084:11	1084:11	15	=
LEAF_NODE	1084:11	1084:11	16	=
RVAL	1084:13	1084:13	15	0
FIELD	1084:13	1084:13	16	0
LEAF_NODE	1084:13	1084:13	17	0
LEAF_NODE	1084:14	1084:14	13	;
CONDITION	1084:16	1084:16	12	i < count
EXPR	1084:16	1084:20	13	i < count
FIELD	1084:16	1084:16	14	i
LEAF_NODE	1084:16	1084:16	15	i
REL_OPERATOR	1084:18	1084:18	14	<
LEAF_NODE	1084:18	1084:18	15	<
FIELD	1084:20	1084:20	14	count
LEAF_NODE	1084:20	1084:20	15	count
LEAF_NODE	1084:25	1084:25	12	;
FOR_EXPR	1084:27	1084:27	12	++ i
EXPR	1084:27	1084:29	13	++ i
LEAF_NODE	1084:27	1084:27	14	++
FIELD	1084:29	1084:29	14	i
LEAF_NODE	1084:29	1084:29	15	i
LEAF_NODE	1084:30	1084:30	12	)
STATEMENTS	1085:5	1085:5	12	
EXPR_STATEMENT	1085:5	1085:57	13	( ( int16 * ) conv ) [ i ] = TIFFClampDoubleToInt16 ( value [ i ] ) ;
EXPR	1085:5	1085:5	14	( ( int16 * ) conv ) [ i ] = TIFFClampDoubleToInt16 ( value [ i ] )
ASSIGN	1085:5	1085:25	15	( ( int16 * ) conv ) [ i ] = TIFFClampDoubleToInt16 ( value [ i ] )
LVAL	1085:5	1085:21	16	( ( int16 * ) conv ) [ i ]
LEAF_NODE	1085:5	1085:5	17	(
LEAF_NODE	1085:6	1085:6	17	(
TYPE_NAME	1085:7	1085:7	17	int16
LEAF_NODE	1085:7	1085:7	18	int16
LEAF_NODE	1085:12	1085:12	17	*
LEAF_NODE	1085:13	1085:13	17	)
FIELD	1085:14	1085:14	17	conv
LEAF_NODE	1085:14	1085:14	18	conv
LEAF_NODE	1085:18	1085:18	17	)
LEAF_NODE	1085:19	1085:19	17	[
EXPR	1085:20	1085:20	17	i
FIELD	1085:20	1085:20	18	i
LEAF_NODE	1085:20	1085:20	19	i
LEAF_NODE	1085:21	1085:21	17	]
ASSIGN_OP	1085:23	1085:23	16	=
LEAF_NODE	1085:23	1085:23	17	=
RVAL	1085:25	1085:25	16	TIFFClampDoubleToInt16 ( value [ i ] )
FUNCTION_CALL	1085:25	1085:56	17	TIFFClampDoubleToInt16 ( value [ i ] )
CALLEE	1085:25	1085:25	18	TIFFClampDoubleToInt16
LEAF_NODE	1085:25	1085:25	19	TIFFClampDoubleToInt16
LEAF_NODE	1085:47	1085:47	18	(
ARGUMENT	1085:48	1085:48	18	value [ i ]
FIELD	1085:48	1085:55	19	value [ i ]
LEAF_NODE	1085:48	1085:48	20	value
LEAF_NODE	1085:53	1085:53	20	[
EXPR	1085:54	1085:54	20	i
FIELD	1085:54	1085:54	21	i
LEAF_NODE	1085:54	1085:54	22	i
LEAF_NODE	1085:55	1085:55	20	]
LEAF_NODE	1085:56	1085:56	18	)
LEAF_NODE	1085:57	1085:57	14	;
EXPR_STATEMENT	1086:4	1086:78	11	ok = TIFFWriteDirectoryTagSshortArray ( tif , ndir , dir , tag , count , ( int16 * ) conv ) ;
EXPR	1086:4	1086:4	12	ok = TIFFWriteDirectoryTagSshortArray ( tif , ndir , dir , tag , count , ( int16 * ) conv )
ASSIGN	1086:4	1086:9	13	ok = TIFFWriteDirectoryTagSshortArray ( tif , ndir , dir , tag , count , ( int16 * ) conv )
LVAL	1086:4	1086:4	14	ok
FIELD	1086:4	1086:4	15	ok
LEAF_NODE	1086:4	1086:4	16	ok
ASSIGN_OP	1086:7	1086:7	14	=
LEAF_NODE	1086:7	1086:7	15	=
RVAL	1086:9	1086:9	14	TIFFWriteDirectoryTagSshortArray ( tif , ndir , dir , tag , count , ( int16 * ) conv )
FUNCTION_CALL	1086:9	1086:77	15	TIFFWriteDirectoryTagSshortArray ( tif , ndir , dir , tag , count , ( int16 * ) conv )
CALLEE	1086:9	1086:9	16	TIFFWriteDirectoryTagSshortArray
LEAF_NODE	1086:9	1086:9	17	TIFFWriteDirectoryTagSshortArray
LEAF_NODE	1086:41	1086:41	16	(
ARGUMENT	1086:42	1086:42	16	tif
FIELD	1086:42	1086:42	17	tif
LEAF_NODE	1086:42	1086:42	18	tif
LEAF_NODE	1086:45	1086:45	16	,
ARGUMENT	1086:46	1086:46	16	ndir
FIELD	1086:46	1086:46	17	ndir
LEAF_NODE	1086:46	1086:46	18	ndir
LEAF_NODE	1086:50	1086:50	16	,
ARGUMENT	1086:51	1086:51	16	dir
FIELD	1086:51	1086:51	17	dir
LEAF_NODE	1086:51	1086:51	18	dir
LEAF_NODE	1086:54	1086:54	16	,
ARGUMENT	1086:55	1086:55	16	tag
FIELD	1086:55	1086:55	17	tag
LEAF_NODE	1086:55	1086:55	18	tag
LEAF_NODE	1086:58	1086:58	16	,
ARGUMENT	1086:59	1086:59	16	count
FIELD	1086:59	1086:59	17	count
LEAF_NODE	1086:59	1086:59	18	count
LEAF_NODE	1086:64	1086:64	16	,
ARGUMENT	1086:65	1086:73	16	( int16 * ) conv
LEAF_NODE	1086:65	1086:65	17	(
TYPE_NAME	1086:66	1086:66	17	int16
LEAF_NODE	1086:66	1086:66	18	int16
LEAF_NODE	1086:71	1086:71	17	*
LEAF_NODE	1086:72	1086:72	17	)
FIELD	1086:73	1086:73	17	conv
LEAF_NODE	1086:73	1086:73	18	conv
LEAF_NODE	1086:77	1086:77	16	)
LEAF_NODE	1086:78	1086:78	12	;
LEAF_NODE	1087:3	1087:3	10	}
SELECTION	1088:3	1089:3	6	
KEYWORD	1088:3	1088:3	7	else
LEAF_NODE	1088:3	1088:3	8	else
STATEMENTS	1089:3	1093:3	7	
LEAF_NODE	1089:3	1089:3	8	{
STATEMENTS	1090:4	1092:4	8	
ITERATION	1090:4	1091:5	9	
KEYWORD	1090:4	1090:4	10	for
LEAF_NODE	1090:4	1090:4	11	for
LEAF_NODE	1090:8	1090:8	10	(
FOR_INIT	1090:9	1090:14	10	i = 0 ;
EXPR	1090:9	1090:9	11	i = 0
ASSIGN	1090:9	1090:13	12	i = 0
LVAL	1090:9	1090:9	13	i
FIELD	1090:9	1090:9	14	i
LEAF_NODE	1090:9	1090:9	15	i
ASSIGN_OP	1090:11	1090:11	13	=
LEAF_NODE	1090:11	1090:11	14	=
RVAL	1090:13	1090:13	13	0
FIELD	1090:13	1090:13	14	0
LEAF_NODE	1090:13	1090:13	15	0
LEAF_NODE	1090:14	1090:14	11	;
CONDITION	1090:16	1090:16	10	i < count
EXPR	1090:16	1090:20	11	i < count
FIELD	1090:16	1090:16	12	i
LEAF_NODE	1090:16	1090:16	13	i
REL_OPERATOR	1090:18	1090:18	12	<
LEAF_NODE	1090:18	1090:18	13	<
FIELD	1090:20	1090:20	12	count
LEAF_NODE	1090:20	1090:20	13	count
LEAF_NODE	1090:25	1090:25	10	;
FOR_EXPR	1090:27	1090:27	10	++ i
EXPR	1090:27	1090:29	11	++ i
LEAF_NODE	1090:27	1090:27	12	++
FIELD	1090:29	1090:29	12	i
LEAF_NODE	1090:29	1090:29	13	i
LEAF_NODE	1090:30	1090:30	10	)
STATEMENTS	1091:5	1091:5	10	
EXPR_STATEMENT	1091:5	1091:57	11	( ( int32 * ) conv ) [ i ] = TIFFClampDoubleToInt32 ( value [ i ] ) ;
EXPR	1091:5	1091:5	12	( ( int32 * ) conv ) [ i ] = TIFFClampDoubleToInt32 ( value [ i ] )
ASSIGN	1091:5	1091:25	13	( ( int32 * ) conv ) [ i ] = TIFFClampDoubleToInt32 ( value [ i ] )
LVAL	1091:5	1091:21	14	( ( int32 * ) conv ) [ i ]
LEAF_NODE	1091:5	1091:5	15	(
LEAF_NODE	1091:6	1091:6	15	(
TYPE_NAME	1091:7	1091:7	15	int32
LEAF_NODE	1091:7	1091:7	16	int32
LEAF_NODE	1091:12	1091:12	15	*
LEAF_NODE	1091:13	1091:13	15	)
FIELD	1091:14	1091:14	15	conv
LEAF_NODE	1091:14	1091:14	16	conv
LEAF_NODE	1091:18	1091:18	15	)
LEAF_NODE	1091:19	1091:19	15	[
EXPR	1091:20	1091:20	15	i
FIELD	1091:20	1091:20	16	i
LEAF_NODE	1091:20	1091:20	17	i
LEAF_NODE	1091:21	1091:21	15	]
ASSIGN_OP	1091:23	1091:23	14	=
LEAF_NODE	1091:23	1091:23	15	=
RVAL	1091:25	1091:25	14	TIFFClampDoubleToInt32 ( value [ i ] )
FUNCTION_CALL	1091:25	1091:56	15	TIFFClampDoubleToInt32 ( value [ i ] )
CALLEE	1091:25	1091:25	16	TIFFClampDoubleToInt32
LEAF_NODE	1091:25	1091:25	17	TIFFClampDoubleToInt32
LEAF_NODE	1091:47	1091:47	16	(
ARGUMENT	1091:48	1091:48	16	value [ i ]
FIELD	1091:48	1091:55	17	value [ i ]
LEAF_NODE	1091:48	1091:48	18	value
LEAF_NODE	1091:53	1091:53	18	[
EXPR	1091:54	1091:54	18	i
FIELD	1091:54	1091:54	19	i
LEAF_NODE	1091:54	1091:54	20	i
LEAF_NODE	1091:55	1091:55	18	]
LEAF_NODE	1091:56	1091:56	16	)
LEAF_NODE	1091:57	1091:57	12	;
EXPR_STATEMENT	1092:4	1092:77	9	ok = TIFFWriteDirectoryTagSlongArray ( tif , ndir , dir , tag , count , ( int32 * ) conv ) ;
EXPR	1092:4	1092:4	10	ok = TIFFWriteDirectoryTagSlongArray ( tif , ndir , dir , tag , count , ( int32 * ) conv )
ASSIGN	1092:4	1092:9	11	ok = TIFFWriteDirectoryTagSlongArray ( tif , ndir , dir , tag , count , ( int32 * ) conv )
LVAL	1092:4	1092:4	12	ok
FIELD	1092:4	1092:4	13	ok
LEAF_NODE	1092:4	1092:4	14	ok
ASSIGN_OP	1092:7	1092:7	12	=
LEAF_NODE	1092:7	1092:7	13	=
RVAL	1092:9	1092:9	12	TIFFWriteDirectoryTagSlongArray ( tif , ndir , dir , tag , count , ( int32 * ) conv )
FUNCTION_CALL	1092:9	1092:76	13	TIFFWriteDirectoryTagSlongArray ( tif , ndir , dir , tag , count , ( int32 * ) conv )
CALLEE	1092:9	1092:9	14	TIFFWriteDirectoryTagSlongArray
LEAF_NODE	1092:9	1092:9	15	TIFFWriteDirectoryTagSlongArray
LEAF_NODE	1092:40	1092:40	14	(
ARGUMENT	1092:41	1092:41	14	tif
FIELD	1092:41	1092:41	15	tif
LEAF_NODE	1092:41	1092:41	16	tif
LEAF_NODE	1092:44	1092:44	14	,
ARGUMENT	1092:45	1092:45	14	ndir
FIELD	1092:45	1092:45	15	ndir
LEAF_NODE	1092:45	1092:45	16	ndir
LEAF_NODE	1092:49	1092:49	14	,
ARGUMENT	1092:50	1092:50	14	dir
FIELD	1092:50	1092:50	15	dir
LEAF_NODE	1092:50	1092:50	16	dir
LEAF_NODE	1092:53	1092:53	14	,
ARGUMENT	1092:54	1092:54	14	tag
FIELD	1092:54	1092:54	15	tag
LEAF_NODE	1092:54	1092:54	16	tag
LEAF_NODE	1092:57	1092:57	14	,
ARGUMENT	1092:58	1092:58	14	count
FIELD	1092:58	1092:58	15	count
LEAF_NODE	1092:58	1092:58	16	count
LEAF_NODE	1092:63	1092:63	14	,
ARGUMENT	1092:64	1092:72	14	( int32 * ) conv
LEAF_NODE	1092:64	1092:64	15	(
TYPE_NAME	1092:65	1092:65	15	int32
LEAF_NODE	1092:65	1092:65	16	int32
LEAF_NODE	1092:70	1092:70	15	*
LEAF_NODE	1092:71	1092:71	15	)
FIELD	1092:72	1092:72	15	conv
LEAF_NODE	1092:72	1092:72	16	conv
LEAF_NODE	1092:76	1092:76	14	)
LEAF_NODE	1092:77	1092:77	10	;
LEAF_NODE	1093:3	1093:3	8	}
JUMP_STATEMENT	1094:3	1094:8	6	break DESTINATION ;
KEYWORD	1094:3	1094:3	7	break
LEAF_NODE	1094:3	1094:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1094:8	1094:8	7	;
LABEL	1095:2	1095:24	6	case SAMPLEFORMAT_UINT :
LEAF_NODE	1095:2	1095:2	7	case
LEAF_NODE	1095:7	1095:7	7	SAMPLEFORMAT_UINT
LEAF_NODE	1095:24	1095:24	7	:
SELECTION	1096:3	1097:3	6	
KEYWORD	1096:3	1096:3	7	if
LEAF_NODE	1096:3	1096:3	8	if
LEAF_NODE	1096:6	1096:6	7	(
CONDITION	1096:7	1096:7	7	tif -> tif_dir . td_bitspersample <= 8
EXPR	1096:7	1096:38	8	tif -> tif_dir . td_bitspersample <= 8
FIELD	1096:7	1096:20	9	tif -> tif_dir . td_bitspersample
LEAF_NODE	1096:7	1096:7	10	tif
LEAF_NODE	1096:10	1096:10	10	->
LEAF_NODE	1096:12	1096:12	10	tif_dir
LEAF_NODE	1096:19	1096:19	10	.
LEAF_NODE	1096:20	1096:20	10	td_bitspersample
REL_OPERATOR	1096:36	1096:36	9	<=
LEAF_NODE	1096:36	1096:36	10	<=
FIELD	1096:38	1096:38	9	8
LEAF_NODE	1096:38	1096:38	10	8
LEAF_NODE	1096:39	1096:39	7	)
STATEMENTS	1097:3	1101:3	7	
LEAF_NODE	1097:3	1097:3	8	{
STATEMENTS	1098:4	1100:4	8	
ITERATION	1098:4	1099:5	9	
KEYWORD	1098:4	1098:4	10	for
LEAF_NODE	1098:4	1098:4	11	for
LEAF_NODE	1098:8	1098:8	10	(
FOR_INIT	1098:9	1098:14	10	i = 0 ;
EXPR	1098:9	1098:9	11	i = 0
ASSIGN	1098:9	1098:13	12	i = 0
LVAL	1098:9	1098:9	13	i
FIELD	1098:9	1098:9	14	i
LEAF_NODE	1098:9	1098:9	15	i
ASSIGN_OP	1098:11	1098:11	13	=
LEAF_NODE	1098:11	1098:11	14	=
RVAL	1098:13	1098:13	13	0
FIELD	1098:13	1098:13	14	0
LEAF_NODE	1098:13	1098:13	15	0
LEAF_NODE	1098:14	1098:14	11	;
CONDITION	1098:16	1098:16	10	i < count
EXPR	1098:16	1098:20	11	i < count
FIELD	1098:16	1098:16	12	i
LEAF_NODE	1098:16	1098:16	13	i
REL_OPERATOR	1098:18	1098:18	12	<
LEAF_NODE	1098:18	1098:18	13	<
FIELD	1098:20	1098:20	12	count
LEAF_NODE	1098:20	1098:20	13	count
LEAF_NODE	1098:25	1098:25	10	;
FOR_EXPR	1098:27	1098:27	10	++ i
EXPR	1098:27	1098:29	11	++ i
LEAF_NODE	1098:27	1098:27	12	++
FIELD	1098:29	1098:29	12	i
LEAF_NODE	1098:29	1098:29	13	i
LEAF_NODE	1098:30	1098:30	10	)
STATEMENTS	1099:5	1099:5	10	
EXPR_STATEMENT	1099:5	1099:57	11	( ( uint8 * ) conv ) [ i ] = TIFFClampDoubleToUInt8 ( value [ i ] ) ;
EXPR	1099:5	1099:5	12	( ( uint8 * ) conv ) [ i ] = TIFFClampDoubleToUInt8 ( value [ i ] )
ASSIGN	1099:5	1099:25	13	( ( uint8 * ) conv ) [ i ] = TIFFClampDoubleToUInt8 ( value [ i ] )
LVAL	1099:5	1099:21	14	( ( uint8 * ) conv ) [ i ]
LEAF_NODE	1099:5	1099:5	15	(
LEAF_NODE	1099:6	1099:6	15	(
TYPE_NAME	1099:7	1099:7	15	uint8
LEAF_NODE	1099:7	1099:7	16	uint8
LEAF_NODE	1099:12	1099:12	15	*
LEAF_NODE	1099:13	1099:13	15	)
FIELD	1099:14	1099:14	15	conv
LEAF_NODE	1099:14	1099:14	16	conv
LEAF_NODE	1099:18	1099:18	15	)
LEAF_NODE	1099:19	1099:19	15	[
EXPR	1099:20	1099:20	15	i
FIELD	1099:20	1099:20	16	i
LEAF_NODE	1099:20	1099:20	17	i
LEAF_NODE	1099:21	1099:21	15	]
ASSIGN_OP	1099:23	1099:23	14	=
LEAF_NODE	1099:23	1099:23	15	=
RVAL	1099:25	1099:25	14	TIFFClampDoubleToUInt8 ( value [ i ] )
FUNCTION_CALL	1099:25	1099:56	15	TIFFClampDoubleToUInt8 ( value [ i ] )
CALLEE	1099:25	1099:25	16	TIFFClampDoubleToUInt8
LEAF_NODE	1099:25	1099:25	17	TIFFClampDoubleToUInt8
LEAF_NODE	1099:47	1099:47	16	(
ARGUMENT	1099:48	1099:48	16	value [ i ]
FIELD	1099:48	1099:55	17	value [ i ]
LEAF_NODE	1099:48	1099:48	18	value
LEAF_NODE	1099:53	1099:53	18	[
EXPR	1099:54	1099:54	18	i
FIELD	1099:54	1099:54	19	i
LEAF_NODE	1099:54	1099:54	20	i
LEAF_NODE	1099:55	1099:55	18	]
LEAF_NODE	1099:56	1099:56	16	)
LEAF_NODE	1099:57	1099:57	12	;
EXPR_STATEMENT	1100:4	1100:76	9	ok = TIFFWriteDirectoryTagByteArray ( tif , ndir , dir , tag , count , ( uint8 * ) conv ) ;
EXPR	1100:4	1100:4	10	ok = TIFFWriteDirectoryTagByteArray ( tif , ndir , dir , tag , count , ( uint8 * ) conv )
ASSIGN	1100:4	1100:9	11	ok = TIFFWriteDirectoryTagByteArray ( tif , ndir , dir , tag , count , ( uint8 * ) conv )
LVAL	1100:4	1100:4	12	ok
FIELD	1100:4	1100:4	13	ok
LEAF_NODE	1100:4	1100:4	14	ok
ASSIGN_OP	1100:7	1100:7	12	=
LEAF_NODE	1100:7	1100:7	13	=
RVAL	1100:9	1100:9	12	TIFFWriteDirectoryTagByteArray ( tif , ndir , dir , tag , count , ( uint8 * ) conv )
FUNCTION_CALL	1100:9	1100:75	13	TIFFWriteDirectoryTagByteArray ( tif , ndir , dir , tag , count , ( uint8 * ) conv )
CALLEE	1100:9	1100:9	14	TIFFWriteDirectoryTagByteArray
LEAF_NODE	1100:9	1100:9	15	TIFFWriteDirectoryTagByteArray
LEAF_NODE	1100:39	1100:39	14	(
ARGUMENT	1100:40	1100:40	14	tif
FIELD	1100:40	1100:40	15	tif
LEAF_NODE	1100:40	1100:40	16	tif
LEAF_NODE	1100:43	1100:43	14	,
ARGUMENT	1100:44	1100:44	14	ndir
FIELD	1100:44	1100:44	15	ndir
LEAF_NODE	1100:44	1100:44	16	ndir
LEAF_NODE	1100:48	1100:48	14	,
ARGUMENT	1100:49	1100:49	14	dir
FIELD	1100:49	1100:49	15	dir
LEAF_NODE	1100:49	1100:49	16	dir
LEAF_NODE	1100:52	1100:52	14	,
ARGUMENT	1100:53	1100:53	14	tag
FIELD	1100:53	1100:53	15	tag
LEAF_NODE	1100:53	1100:53	16	tag
LEAF_NODE	1100:56	1100:56	14	,
ARGUMENT	1100:57	1100:57	14	count
FIELD	1100:57	1100:57	15	count
LEAF_NODE	1100:57	1100:57	16	count
LEAF_NODE	1100:62	1100:62	14	,
ARGUMENT	1100:63	1100:71	14	( uint8 * ) conv
LEAF_NODE	1100:63	1100:63	15	(
TYPE_NAME	1100:64	1100:64	15	uint8
LEAF_NODE	1100:64	1100:64	16	uint8
LEAF_NODE	1100:69	1100:69	15	*
LEAF_NODE	1100:70	1100:70	15	)
FIELD	1100:71	1100:71	15	conv
LEAF_NODE	1100:71	1100:71	16	conv
LEAF_NODE	1100:75	1100:75	14	)
LEAF_NODE	1100:76	1100:76	10	;
LEAF_NODE	1101:3	1101:3	8	}
SELECTION	1102:3	1102:8	6	
KEYWORD	1102:3	1102:3	7	else
LEAF_NODE	1102:3	1102:3	8	else
STATEMENTS	1102:8	1102:8	7	
SELECTION	1102:8	1103:3	8	
KEYWORD	1102:8	1102:8	9	if
LEAF_NODE	1102:8	1102:8	10	if
LEAF_NODE	1102:11	1102:11	9	(
CONDITION	1102:12	1102:12	9	tif -> tif_dir . td_bitspersample <= 16
EXPR	1102:12	1102:43	10	tif -> tif_dir . td_bitspersample <= 16
FIELD	1102:12	1102:25	11	tif -> tif_dir . td_bitspersample
LEAF_NODE	1102:12	1102:12	12	tif
LEAF_NODE	1102:15	1102:15	12	->
LEAF_NODE	1102:17	1102:17	12	tif_dir
LEAF_NODE	1102:24	1102:24	12	.
LEAF_NODE	1102:25	1102:25	12	td_bitspersample
REL_OPERATOR	1102:41	1102:41	11	<=
LEAF_NODE	1102:41	1102:41	12	<=
FIELD	1102:43	1102:43	11	16
LEAF_NODE	1102:43	1102:43	12	16
LEAF_NODE	1102:45	1102:45	9	)
STATEMENTS	1103:3	1107:3	9	
LEAF_NODE	1103:3	1103:3	10	{
STATEMENTS	1104:4	1106:4	10	
ITERATION	1104:4	1105:5	11	
KEYWORD	1104:4	1104:4	12	for
LEAF_NODE	1104:4	1104:4	13	for
LEAF_NODE	1104:8	1104:8	12	(
FOR_INIT	1104:9	1104:14	12	i = 0 ;
EXPR	1104:9	1104:9	13	i = 0
ASSIGN	1104:9	1104:13	14	i = 0
LVAL	1104:9	1104:9	15	i
FIELD	1104:9	1104:9	16	i
LEAF_NODE	1104:9	1104:9	17	i
ASSIGN_OP	1104:11	1104:11	15	=
LEAF_NODE	1104:11	1104:11	16	=
RVAL	1104:13	1104:13	15	0
FIELD	1104:13	1104:13	16	0
LEAF_NODE	1104:13	1104:13	17	0
LEAF_NODE	1104:14	1104:14	13	;
CONDITION	1104:16	1104:16	12	i < count
EXPR	1104:16	1104:20	13	i < count
FIELD	1104:16	1104:16	14	i
LEAF_NODE	1104:16	1104:16	15	i
REL_OPERATOR	1104:18	1104:18	14	<
LEAF_NODE	1104:18	1104:18	15	<
FIELD	1104:20	1104:20	14	count
LEAF_NODE	1104:20	1104:20	15	count
LEAF_NODE	1104:25	1104:25	12	;
FOR_EXPR	1104:27	1104:27	12	++ i
EXPR	1104:27	1104:29	13	++ i
LEAF_NODE	1104:27	1104:27	14	++
FIELD	1104:29	1104:29	14	i
LEAF_NODE	1104:29	1104:29	15	i
LEAF_NODE	1104:30	1104:30	12	)
STATEMENTS	1105:5	1105:5	12	
EXPR_STATEMENT	1105:5	1105:59	13	( ( uint16 * ) conv ) [ i ] = TIFFClampDoubleToUInt16 ( value [ i ] ) ;
EXPR	1105:5	1105:5	14	( ( uint16 * ) conv ) [ i ] = TIFFClampDoubleToUInt16 ( value [ i ] )
ASSIGN	1105:5	1105:26	15	( ( uint16 * ) conv ) [ i ] = TIFFClampDoubleToUInt16 ( value [ i ] )
LVAL	1105:5	1105:22	16	( ( uint16 * ) conv ) [ i ]
LEAF_NODE	1105:5	1105:5	17	(
LEAF_NODE	1105:6	1105:6	17	(
TYPE_NAME	1105:7	1105:7	17	uint16
LEAF_NODE	1105:7	1105:7	18	uint16
LEAF_NODE	1105:13	1105:13	17	*
LEAF_NODE	1105:14	1105:14	17	)
FIELD	1105:15	1105:15	17	conv
LEAF_NODE	1105:15	1105:15	18	conv
LEAF_NODE	1105:19	1105:19	17	)
LEAF_NODE	1105:20	1105:20	17	[
EXPR	1105:21	1105:21	17	i
FIELD	1105:21	1105:21	18	i
LEAF_NODE	1105:21	1105:21	19	i
LEAF_NODE	1105:22	1105:22	17	]
ASSIGN_OP	1105:24	1105:24	16	=
LEAF_NODE	1105:24	1105:24	17	=
RVAL	1105:26	1105:26	16	TIFFClampDoubleToUInt16 ( value [ i ] )
FUNCTION_CALL	1105:26	1105:58	17	TIFFClampDoubleToUInt16 ( value [ i ] )
CALLEE	1105:26	1105:26	18	TIFFClampDoubleToUInt16
LEAF_NODE	1105:26	1105:26	19	TIFFClampDoubleToUInt16
LEAF_NODE	1105:49	1105:49	18	(
ARGUMENT	1105:50	1105:50	18	value [ i ]
FIELD	1105:50	1105:57	19	value [ i ]
LEAF_NODE	1105:50	1105:50	20	value
LEAF_NODE	1105:55	1105:55	20	[
EXPR	1105:56	1105:56	20	i
FIELD	1105:56	1105:56	21	i
LEAF_NODE	1105:56	1105:56	22	i
LEAF_NODE	1105:57	1105:57	20	]
LEAF_NODE	1105:58	1105:58	18	)
LEAF_NODE	1105:59	1105:59	14	;
EXPR_STATEMENT	1106:4	1106:78	11	ok = TIFFWriteDirectoryTagShortArray ( tif , ndir , dir , tag , count , ( uint16 * ) conv ) ;
EXPR	1106:4	1106:4	12	ok = TIFFWriteDirectoryTagShortArray ( tif , ndir , dir , tag , count , ( uint16 * ) conv )
ASSIGN	1106:4	1106:9	13	ok = TIFFWriteDirectoryTagShortArray ( tif , ndir , dir , tag , count , ( uint16 * ) conv )
LVAL	1106:4	1106:4	14	ok
FIELD	1106:4	1106:4	15	ok
LEAF_NODE	1106:4	1106:4	16	ok
ASSIGN_OP	1106:7	1106:7	14	=
LEAF_NODE	1106:7	1106:7	15	=
RVAL	1106:9	1106:9	14	TIFFWriteDirectoryTagShortArray ( tif , ndir , dir , tag , count , ( uint16 * ) conv )
FUNCTION_CALL	1106:9	1106:77	15	TIFFWriteDirectoryTagShortArray ( tif , ndir , dir , tag , count , ( uint16 * ) conv )
CALLEE	1106:9	1106:9	16	TIFFWriteDirectoryTagShortArray
LEAF_NODE	1106:9	1106:9	17	TIFFWriteDirectoryTagShortArray
LEAF_NODE	1106:40	1106:40	16	(
ARGUMENT	1106:41	1106:41	16	tif
FIELD	1106:41	1106:41	17	tif
LEAF_NODE	1106:41	1106:41	18	tif
LEAF_NODE	1106:44	1106:44	16	,
ARGUMENT	1106:45	1106:45	16	ndir
FIELD	1106:45	1106:45	17	ndir
LEAF_NODE	1106:45	1106:45	18	ndir
LEAF_NODE	1106:49	1106:49	16	,
ARGUMENT	1106:50	1106:50	16	dir
FIELD	1106:50	1106:50	17	dir
LEAF_NODE	1106:50	1106:50	18	dir
LEAF_NODE	1106:53	1106:53	16	,
ARGUMENT	1106:54	1106:54	16	tag
FIELD	1106:54	1106:54	17	tag
LEAF_NODE	1106:54	1106:54	18	tag
LEAF_NODE	1106:57	1106:57	16	,
ARGUMENT	1106:58	1106:58	16	count
FIELD	1106:58	1106:58	17	count
LEAF_NODE	1106:58	1106:58	18	count
LEAF_NODE	1106:63	1106:63	16	,
ARGUMENT	1106:64	1106:73	16	( uint16 * ) conv
LEAF_NODE	1106:64	1106:64	17	(
TYPE_NAME	1106:65	1106:65	17	uint16
LEAF_NODE	1106:65	1106:65	18	uint16
LEAF_NODE	1106:71	1106:71	17	*
LEAF_NODE	1106:72	1106:72	17	)
FIELD	1106:73	1106:73	17	conv
LEAF_NODE	1106:73	1106:73	18	conv
LEAF_NODE	1106:77	1106:77	16	)
LEAF_NODE	1106:78	1106:78	12	;
LEAF_NODE	1107:3	1107:3	10	}
SELECTION	1108:3	1109:3	6	
KEYWORD	1108:3	1108:3	7	else
LEAF_NODE	1108:3	1108:3	8	else
STATEMENTS	1109:3	1113:3	7	
LEAF_NODE	1109:3	1109:3	8	{
STATEMENTS	1110:4	1112:4	8	
ITERATION	1110:4	1111:5	9	
KEYWORD	1110:4	1110:4	10	for
LEAF_NODE	1110:4	1110:4	11	for
LEAF_NODE	1110:8	1110:8	10	(
FOR_INIT	1110:9	1110:14	10	i = 0 ;
EXPR	1110:9	1110:9	11	i = 0
ASSIGN	1110:9	1110:13	12	i = 0
LVAL	1110:9	1110:9	13	i
FIELD	1110:9	1110:9	14	i
LEAF_NODE	1110:9	1110:9	15	i
ASSIGN_OP	1110:11	1110:11	13	=
LEAF_NODE	1110:11	1110:11	14	=
RVAL	1110:13	1110:13	13	0
FIELD	1110:13	1110:13	14	0
LEAF_NODE	1110:13	1110:13	15	0
LEAF_NODE	1110:14	1110:14	11	;
CONDITION	1110:16	1110:16	10	i < count
EXPR	1110:16	1110:20	11	i < count
FIELD	1110:16	1110:16	12	i
LEAF_NODE	1110:16	1110:16	13	i
REL_OPERATOR	1110:18	1110:18	12	<
LEAF_NODE	1110:18	1110:18	13	<
FIELD	1110:20	1110:20	12	count
LEAF_NODE	1110:20	1110:20	13	count
LEAF_NODE	1110:25	1110:25	10	;
FOR_EXPR	1110:27	1110:27	10	++ i
EXPR	1110:27	1110:29	11	++ i
LEAF_NODE	1110:27	1110:27	12	++
FIELD	1110:29	1110:29	12	i
LEAF_NODE	1110:29	1110:29	13	i
LEAF_NODE	1110:30	1110:30	10	)
STATEMENTS	1111:5	1111:5	10	
EXPR_STATEMENT	1111:5	1111:59	11	( ( uint32 * ) conv ) [ i ] = TIFFClampDoubleToUInt32 ( value [ i ] ) ;
EXPR	1111:5	1111:5	12	( ( uint32 * ) conv ) [ i ] = TIFFClampDoubleToUInt32 ( value [ i ] )
ASSIGN	1111:5	1111:26	13	( ( uint32 * ) conv ) [ i ] = TIFFClampDoubleToUInt32 ( value [ i ] )
LVAL	1111:5	1111:22	14	( ( uint32 * ) conv ) [ i ]
LEAF_NODE	1111:5	1111:5	15	(
LEAF_NODE	1111:6	1111:6	15	(
TYPE_NAME	1111:7	1111:7	15	uint32
LEAF_NODE	1111:7	1111:7	16	uint32
LEAF_NODE	1111:13	1111:13	15	*
LEAF_NODE	1111:14	1111:14	15	)
FIELD	1111:15	1111:15	15	conv
LEAF_NODE	1111:15	1111:15	16	conv
LEAF_NODE	1111:19	1111:19	15	)
LEAF_NODE	1111:20	1111:20	15	[
EXPR	1111:21	1111:21	15	i
FIELD	1111:21	1111:21	16	i
LEAF_NODE	1111:21	1111:21	17	i
LEAF_NODE	1111:22	1111:22	15	]
ASSIGN_OP	1111:24	1111:24	14	=
LEAF_NODE	1111:24	1111:24	15	=
RVAL	1111:26	1111:26	14	TIFFClampDoubleToUInt32 ( value [ i ] )
FUNCTION_CALL	1111:26	1111:58	15	TIFFClampDoubleToUInt32 ( value [ i ] )
CALLEE	1111:26	1111:26	16	TIFFClampDoubleToUInt32
LEAF_NODE	1111:26	1111:26	17	TIFFClampDoubleToUInt32
LEAF_NODE	1111:49	1111:49	16	(
ARGUMENT	1111:50	1111:50	16	value [ i ]
FIELD	1111:50	1111:57	17	value [ i ]
LEAF_NODE	1111:50	1111:50	18	value
LEAF_NODE	1111:55	1111:55	18	[
EXPR	1111:56	1111:56	18	i
FIELD	1111:56	1111:56	19	i
LEAF_NODE	1111:56	1111:56	20	i
LEAF_NODE	1111:57	1111:57	18	]
LEAF_NODE	1111:58	1111:58	16	)
LEAF_NODE	1111:59	1111:59	12	;
EXPR_STATEMENT	1112:4	1112:77	9	ok = TIFFWriteDirectoryTagLongArray ( tif , ndir , dir , tag , count , ( uint32 * ) conv ) ;
EXPR	1112:4	1112:4	10	ok = TIFFWriteDirectoryTagLongArray ( tif , ndir , dir , tag , count , ( uint32 * ) conv )
ASSIGN	1112:4	1112:9	11	ok = TIFFWriteDirectoryTagLongArray ( tif , ndir , dir , tag , count , ( uint32 * ) conv )
LVAL	1112:4	1112:4	12	ok
FIELD	1112:4	1112:4	13	ok
LEAF_NODE	1112:4	1112:4	14	ok
ASSIGN_OP	1112:7	1112:7	12	=
LEAF_NODE	1112:7	1112:7	13	=
RVAL	1112:9	1112:9	12	TIFFWriteDirectoryTagLongArray ( tif , ndir , dir , tag , count , ( uint32 * ) conv )
FUNCTION_CALL	1112:9	1112:76	13	TIFFWriteDirectoryTagLongArray ( tif , ndir , dir , tag , count , ( uint32 * ) conv )
CALLEE	1112:9	1112:9	14	TIFFWriteDirectoryTagLongArray
LEAF_NODE	1112:9	1112:9	15	TIFFWriteDirectoryTagLongArray
LEAF_NODE	1112:39	1112:39	14	(
ARGUMENT	1112:40	1112:40	14	tif
FIELD	1112:40	1112:40	15	tif
LEAF_NODE	1112:40	1112:40	16	tif
LEAF_NODE	1112:43	1112:43	14	,
ARGUMENT	1112:44	1112:44	14	ndir
FIELD	1112:44	1112:44	15	ndir
LEAF_NODE	1112:44	1112:44	16	ndir
LEAF_NODE	1112:48	1112:48	14	,
ARGUMENT	1112:49	1112:49	14	dir
FIELD	1112:49	1112:49	15	dir
LEAF_NODE	1112:49	1112:49	16	dir
LEAF_NODE	1112:52	1112:52	14	,
ARGUMENT	1112:53	1112:53	14	tag
FIELD	1112:53	1112:53	15	tag
LEAF_NODE	1112:53	1112:53	16	tag
LEAF_NODE	1112:56	1112:56	14	,
ARGUMENT	1112:57	1112:57	14	count
FIELD	1112:57	1112:57	15	count
LEAF_NODE	1112:57	1112:57	16	count
LEAF_NODE	1112:62	1112:62	14	,
ARGUMENT	1112:63	1112:72	14	( uint32 * ) conv
LEAF_NODE	1112:63	1112:63	15	(
TYPE_NAME	1112:64	1112:64	15	uint32
LEAF_NODE	1112:64	1112:64	16	uint32
LEAF_NODE	1112:70	1112:70	15	*
LEAF_NODE	1112:71	1112:71	15	)
FIELD	1112:72	1112:72	15	conv
LEAF_NODE	1112:72	1112:72	16	conv
LEAF_NODE	1112:76	1112:76	14	)
LEAF_NODE	1112:77	1112:77	10	;
LEAF_NODE	1113:3	1113:3	8	}
JUMP_STATEMENT	1114:3	1114:8	6	break DESTINATION ;
KEYWORD	1114:3	1114:3	7	break
LEAF_NODE	1114:3	1114:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1114:8	1114:8	7	;
LABEL	1115:2	1115:9	6	default :
LEAF_NODE	1115:2	1115:2	7	default
LEAF_NODE	1115:9	1115:9	7	:
EXPR_STATEMENT	1116:3	1116:9	6	ok = 0 ;
EXPR	1116:3	1116:3	7	ok = 0
ASSIGN	1116:3	1116:8	8	ok = 0
LVAL	1116:3	1116:3	9	ok
FIELD	1116:3	1116:3	10	ok
LEAF_NODE	1116:3	1116:3	11	ok
ASSIGN_OP	1116:6	1116:6	9	=
LEAF_NODE	1116:6	1116:6	10	=
RVAL	1116:8	1116:8	9	0
FIELD	1116:8	1116:8	10	0
LEAF_NODE	1116:8	1116:8	11	0
LEAF_NODE	1116:9	1116:9	7	;
LEAF_NODE	1117:1	1117:1	5	}
EXPR_STATEMENT	1119:1	1119:16	3	_TIFFfree ( conv ) ;
EXPR	1119:1	1119:1	4	_TIFFfree ( conv )
FUNCTION_CALL	1119:1	1119:15	5	_TIFFfree ( conv )
CALLEE	1119:1	1119:1	6	_TIFFfree
LEAF_NODE	1119:1	1119:1	7	_TIFFfree
LEAF_NODE	1119:10	1119:10	6	(
ARGUMENT	1119:11	1119:11	6	conv
FIELD	1119:11	1119:11	7	conv
LEAF_NODE	1119:11	1119:11	8	conv
LEAF_NODE	1119:15	1119:15	6	)
LEAF_NODE	1119:16	1119:16	4	;
LEAF_NODE	1120:1	1120:1	3	return
LEAF_NODE	1120:8	1120:8	3	(
LEAF_NODE	1120:9	1120:9	3	ok
LEAF_NODE	1120:11	1120:11	3	)
LEAF_NODE	1120:12	1120:12	3	;
LEAF_NODE	1121:0	1121:0	2	}
FUNCTION_DEF	1124:0	1151:0	1	
RETURN_TYPE	1124:0	1124:7	2	static int
LEAF_NODE	1124:0	1124:0	3	static
TYPE_NAME	1124:7	1124:7	3	int
LEAF_NODE	1124:7	1124:7	4	int
FUNCTION_NAME	1125:0	1125:0	2	TIFFWriteDirectoryTagSampleformatPerSample
LEAF_NODE	1125:0	1125:0	3	TIFFWriteDirectoryTagSampleformatPerSample
PARAMETER_LIST	1125:42	1125:111	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , double value )
LEAF_NODE	1125:42	1125:42	3	(
PARAMETER_DECL	1125:43	1125:49	3	TIFF * tif
TYPE	1125:43	1125:47	4	TIFF *
TYPE_NAME	1125:43	1125:43	5	TIFF
LEAF_NODE	1125:43	1125:43	6	TIFF
POINTER	1125:47	1125:47	5	*
LEAF_NODE	1125:47	1125:47	6	*
NAME	1125:49	1125:49	4	tif
LEAF_NODE	1125:49	1125:49	5	tif
LEAF_NODE	1125:52	1125:52	3	,
PARAMETER_DECL	1125:54	1125:62	3	uint32 * ndir
TYPE	1125:54	1125:60	4	uint32 *
TYPE_NAME	1125:54	1125:54	5	uint32
LEAF_NODE	1125:54	1125:54	6	uint32
POINTER	1125:60	1125:60	5	*
LEAF_NODE	1125:60	1125:60	6	*
NAME	1125:62	1125:62	4	ndir
LEAF_NODE	1125:62	1125:62	5	ndir
LEAF_NODE	1125:66	1125:66	3	,
PARAMETER_DECL	1125:68	1125:82	3	TIFFDirEntry * dir
TYPE	1125:68	1125:80	4	TIFFDirEntry *
TYPE_NAME	1125:68	1125:68	5	TIFFDirEntry
LEAF_NODE	1125:68	1125:68	6	TIFFDirEntry
POINTER	1125:80	1125:80	5	*
LEAF_NODE	1125:80	1125:80	6	*
NAME	1125:82	1125:82	4	dir
LEAF_NODE	1125:82	1125:82	5	dir
LEAF_NODE	1125:85	1125:85	3	,
PARAMETER_DECL	1125:87	1125:94	3	uint16 tag
TYPE	1125:87	1125:87	4	uint16
TYPE_NAME	1125:87	1125:87	5	uint16
LEAF_NODE	1125:87	1125:87	6	uint16
NAME	1125:94	1125:94	4	tag
LEAF_NODE	1125:94	1125:94	5	tag
LEAF_NODE	1125:97	1125:97	3	,
PARAMETER_DECL	1125:99	1125:106	3	double value
TYPE	1125:99	1125:99	4	double
TYPE_NAME	1125:99	1125:99	5	double
LEAF_NODE	1125:99	1125:99	6	double
NAME	1125:106	1125:106	4	value
LEAF_NODE	1125:106	1125:106	5	value
LEAF_NODE	1125:111	1125:111	3	)
LEAF_NODE	1126:0	1126:0	2	{
STATEMENTS	1127:1	1127:1	2	
SELECTION	1127:1	1128:1	3	
KEYWORD	1127:1	1127:1	4	switch
LEAF_NODE	1127:1	1127:1	5	switch
LEAF_NODE	1127:8	1127:8	4	(
CONDITION	1127:9	1127:9	4	tif -> tif_dir . td_sampleformat
EXPR	1127:9	1127:9	5	tif -> tif_dir . td_sampleformat
FIELD	1127:9	1127:22	6	tif -> tif_dir . td_sampleformat
LEAF_NODE	1127:9	1127:9	7	tif
LEAF_NODE	1127:12	1127:12	7	->
LEAF_NODE	1127:14	1127:14	7	tif_dir
LEAF_NODE	1127:21	1127:21	7	.
LEAF_NODE	1127:22	1127:22	7	td_sampleformat
LEAF_NODE	1127:37	1127:37	4	)
STATEMENTS	1128:1	1150:1	4	
LEAF_NODE	1128:1	1128:1	5	{
STATEMENTS	1129:2	1149:3	5	
LABEL	1129:2	1129:26	6	case SAMPLEFORMAT_IEEEFP :
LEAF_NODE	1129:2	1129:2	7	case
LEAF_NODE	1129:7	1129:7	7	SAMPLEFORMAT_IEEEFP
LEAF_NODE	1129:26	1129:26	7	:
SELECTION	1130:3	1131:4	6	
KEYWORD	1130:3	1130:3	7	if
LEAF_NODE	1130:3	1130:3	8	if
LEAF_NODE	1130:6	1130:6	7	(
CONDITION	1130:7	1130:7	7	tif -> tif_dir . td_bitspersample <= 32
EXPR	1130:7	1130:38	8	tif -> tif_dir . td_bitspersample <= 32
FIELD	1130:7	1130:20	9	tif -> tif_dir . td_bitspersample
LEAF_NODE	1130:7	1130:7	10	tif
LEAF_NODE	1130:10	1130:10	10	->
LEAF_NODE	1130:12	1130:12	10	tif_dir
LEAF_NODE	1130:19	1130:19	10	.
LEAF_NODE	1130:20	1130:20	10	td_bitspersample
REL_OPERATOR	1130:36	1130:36	9	<=
LEAF_NODE	1130:36	1130:36	10	<=
FIELD	1130:38	1130:38	9	32
LEAF_NODE	1130:38	1130:38	10	32
LEAF_NODE	1130:40	1130:40	7	)
STATEMENTS	1131:4	1131:4	7	
JUMP_STATEMENT	1131:4	1131:78	8	return ( TIFFWriteDirectoryTagFloatPerSample ( tif , ndir , dir , tag , ( float ) value ) ) ;
KEYWORD	1131:4	1131:4	9	return
LEAF_NODE	1131:4	1131:4	10	return
DESTINATION	1131:10	1131:10	9	( TIFFWriteDirectoryTagFloatPerSample ( tif , ndir , dir , tag , ( float ) value ) )
EXPR	1131:10	1131:77	10	( TIFFWriteDirectoryTagFloatPerSample ( tif , ndir , dir , tag , ( float ) value ) )
LEAF_NODE	1131:10	1131:10	11	(
FUNCTION_CALL	1131:11	1131:76	11	TIFFWriteDirectoryTagFloatPerSample ( tif , ndir , dir , tag , ( float ) value )
CALLEE	1131:11	1131:11	12	TIFFWriteDirectoryTagFloatPerSample
LEAF_NODE	1131:11	1131:11	13	TIFFWriteDirectoryTagFloatPerSample
LEAF_NODE	1131:46	1131:46	12	(
ARGUMENT	1131:47	1131:47	12	tif
FIELD	1131:47	1131:47	13	tif
LEAF_NODE	1131:47	1131:47	14	tif
LEAF_NODE	1131:50	1131:50	12	,
ARGUMENT	1131:51	1131:51	12	ndir
FIELD	1131:51	1131:51	13	ndir
LEAF_NODE	1131:51	1131:51	14	ndir
LEAF_NODE	1131:55	1131:55	12	,
ARGUMENT	1131:56	1131:56	12	dir
FIELD	1131:56	1131:56	13	dir
LEAF_NODE	1131:56	1131:56	14	dir
LEAF_NODE	1131:59	1131:59	12	,
ARGUMENT	1131:60	1131:60	12	tag
FIELD	1131:60	1131:60	13	tag
LEAF_NODE	1131:60	1131:60	14	tag
LEAF_NODE	1131:63	1131:63	12	,
ARGUMENT	1131:64	1131:71	12	( float ) value
LEAF_NODE	1131:64	1131:64	13	(
TYPE_NAME	1131:65	1131:65	13	float
LEAF_NODE	1131:65	1131:65	14	float
LEAF_NODE	1131:70	1131:70	13	)
FIELD	1131:71	1131:71	13	value
LEAF_NODE	1131:71	1131:71	14	value
LEAF_NODE	1131:76	1131:76	12	)
LEAF_NODE	1131:77	1131:77	11	)
LEAF_NODE	1131:78	1131:78	9	;
SELECTION	1132:3	1133:4	6	
KEYWORD	1132:3	1132:3	7	else
LEAF_NODE	1132:3	1132:3	8	else
STATEMENTS	1133:4	1133:4	7	
JUMP_STATEMENT	1133:4	1133:72	8	return ( TIFFWriteDirectoryTagDoublePerSample ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1133:4	1133:4	9	return
LEAF_NODE	1133:4	1133:4	10	return
DESTINATION	1133:10	1133:10	9	( TIFFWriteDirectoryTagDoublePerSample ( tif , ndir , dir , tag , value ) )
EXPR	1133:10	1133:71	10	( TIFFWriteDirectoryTagDoublePerSample ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1133:10	1133:10	11	(
FUNCTION_CALL	1133:11	1133:70	11	TIFFWriteDirectoryTagDoublePerSample ( tif , ndir , dir , tag , value )
CALLEE	1133:11	1133:11	12	TIFFWriteDirectoryTagDoublePerSample
LEAF_NODE	1133:11	1133:11	13	TIFFWriteDirectoryTagDoublePerSample
LEAF_NODE	1133:47	1133:47	12	(
ARGUMENT	1133:48	1133:48	12	tif
FIELD	1133:48	1133:48	13	tif
LEAF_NODE	1133:48	1133:48	14	tif
LEAF_NODE	1133:51	1133:51	12	,
ARGUMENT	1133:52	1133:52	12	ndir
FIELD	1133:52	1133:52	13	ndir
LEAF_NODE	1133:52	1133:52	14	ndir
LEAF_NODE	1133:56	1133:56	12	,
ARGUMENT	1133:57	1133:57	12	dir
FIELD	1133:57	1133:57	13	dir
LEAF_NODE	1133:57	1133:57	14	dir
LEAF_NODE	1133:60	1133:60	12	,
ARGUMENT	1133:61	1133:61	12	tag
FIELD	1133:61	1133:61	13	tag
LEAF_NODE	1133:61	1133:61	14	tag
LEAF_NODE	1133:64	1133:64	12	,
ARGUMENT	1133:65	1133:65	12	value
FIELD	1133:65	1133:65	13	value
LEAF_NODE	1133:65	1133:65	14	value
LEAF_NODE	1133:70	1133:70	12	)
LEAF_NODE	1133:71	1133:71	11	)
LEAF_NODE	1133:72	1133:72	9	;
LABEL	1134:2	1134:23	6	case SAMPLEFORMAT_INT :
LEAF_NODE	1134:2	1134:2	7	case
LEAF_NODE	1134:7	1134:7	7	SAMPLEFORMAT_INT
LEAF_NODE	1134:23	1134:23	7	:
SELECTION	1135:3	1136:4	6	
KEYWORD	1135:3	1135:3	7	if
LEAF_NODE	1135:3	1135:3	8	if
LEAF_NODE	1135:6	1135:6	7	(
CONDITION	1135:7	1135:7	7	tif -> tif_dir . td_bitspersample <= 8
EXPR	1135:7	1135:38	8	tif -> tif_dir . td_bitspersample <= 8
FIELD	1135:7	1135:20	9	tif -> tif_dir . td_bitspersample
LEAF_NODE	1135:7	1135:7	10	tif
LEAF_NODE	1135:10	1135:10	10	->
LEAF_NODE	1135:12	1135:12	10	tif_dir
LEAF_NODE	1135:19	1135:19	10	.
LEAF_NODE	1135:20	1135:20	10	td_bitspersample
REL_OPERATOR	1135:36	1135:36	9	<=
LEAF_NODE	1135:36	1135:36	10	<=
FIELD	1135:38	1135:38	9	8
LEAF_NODE	1135:38	1135:38	10	8
LEAF_NODE	1135:39	1135:39	7	)
STATEMENTS	1136:4	1136:4	7	
JUMP_STATEMENT	1136:4	1136:77	8	return ( TIFFWriteDirectoryTagSbytePerSample ( tif , ndir , dir , tag , ( int8 ) value ) ) ;
KEYWORD	1136:4	1136:4	9	return
LEAF_NODE	1136:4	1136:4	10	return
DESTINATION	1136:10	1136:10	9	( TIFFWriteDirectoryTagSbytePerSample ( tif , ndir , dir , tag , ( int8 ) value ) )
EXPR	1136:10	1136:76	10	( TIFFWriteDirectoryTagSbytePerSample ( tif , ndir , dir , tag , ( int8 ) value ) )
LEAF_NODE	1136:10	1136:10	11	(
FUNCTION_CALL	1136:11	1136:75	11	TIFFWriteDirectoryTagSbytePerSample ( tif , ndir , dir , tag , ( int8 ) value )
CALLEE	1136:11	1136:11	12	TIFFWriteDirectoryTagSbytePerSample
LEAF_NODE	1136:11	1136:11	13	TIFFWriteDirectoryTagSbytePerSample
LEAF_NODE	1136:46	1136:46	12	(
ARGUMENT	1136:47	1136:47	12	tif
FIELD	1136:47	1136:47	13	tif
LEAF_NODE	1136:47	1136:47	14	tif
LEAF_NODE	1136:50	1136:50	12	,
ARGUMENT	1136:51	1136:51	12	ndir
FIELD	1136:51	1136:51	13	ndir
LEAF_NODE	1136:51	1136:51	14	ndir
LEAF_NODE	1136:55	1136:55	12	,
ARGUMENT	1136:56	1136:56	12	dir
FIELD	1136:56	1136:56	13	dir
LEAF_NODE	1136:56	1136:56	14	dir
LEAF_NODE	1136:59	1136:59	12	,
ARGUMENT	1136:60	1136:60	12	tag
FIELD	1136:60	1136:60	13	tag
LEAF_NODE	1136:60	1136:60	14	tag
LEAF_NODE	1136:63	1136:63	12	,
ARGUMENT	1136:64	1136:70	12	( int8 ) value
LEAF_NODE	1136:64	1136:64	13	(
TYPE_NAME	1136:65	1136:65	13	int8
LEAF_NODE	1136:65	1136:65	14	int8
LEAF_NODE	1136:69	1136:69	13	)
FIELD	1136:70	1136:70	13	value
LEAF_NODE	1136:70	1136:70	14	value
LEAF_NODE	1136:75	1136:75	12	)
LEAF_NODE	1136:76	1136:76	11	)
LEAF_NODE	1136:77	1136:77	9	;
SELECTION	1137:3	1137:8	6	
KEYWORD	1137:3	1137:3	7	else
LEAF_NODE	1137:3	1137:3	8	else
STATEMENTS	1137:8	1137:8	7	
SELECTION	1137:8	1138:4	8	
KEYWORD	1137:8	1137:8	9	if
LEAF_NODE	1137:8	1137:8	10	if
LEAF_NODE	1137:11	1137:11	9	(
CONDITION	1137:12	1137:12	9	tif -> tif_dir . td_bitspersample <= 16
EXPR	1137:12	1137:43	10	tif -> tif_dir . td_bitspersample <= 16
FIELD	1137:12	1137:25	11	tif -> tif_dir . td_bitspersample
LEAF_NODE	1137:12	1137:12	12	tif
LEAF_NODE	1137:15	1137:15	12	->
LEAF_NODE	1137:17	1137:17	12	tif_dir
LEAF_NODE	1137:24	1137:24	12	.
LEAF_NODE	1137:25	1137:25	12	td_bitspersample
REL_OPERATOR	1137:41	1137:41	11	<=
LEAF_NODE	1137:41	1137:41	12	<=
FIELD	1137:43	1137:43	11	16
LEAF_NODE	1137:43	1137:43	12	16
LEAF_NODE	1137:45	1137:45	9	)
STATEMENTS	1138:4	1138:4	9	
JUMP_STATEMENT	1138:4	1138:79	10	return ( TIFFWriteDirectoryTagSshortPerSample ( tif , ndir , dir , tag , ( int16 ) value ) ) ;
KEYWORD	1138:4	1138:4	11	return
LEAF_NODE	1138:4	1138:4	12	return
DESTINATION	1138:10	1138:10	11	( TIFFWriteDirectoryTagSshortPerSample ( tif , ndir , dir , tag , ( int16 ) value ) )
EXPR	1138:10	1138:78	12	( TIFFWriteDirectoryTagSshortPerSample ( tif , ndir , dir , tag , ( int16 ) value ) )
LEAF_NODE	1138:10	1138:10	13	(
FUNCTION_CALL	1138:11	1138:77	13	TIFFWriteDirectoryTagSshortPerSample ( tif , ndir , dir , tag , ( int16 ) value )
CALLEE	1138:11	1138:11	14	TIFFWriteDirectoryTagSshortPerSample
LEAF_NODE	1138:11	1138:11	15	TIFFWriteDirectoryTagSshortPerSample
LEAF_NODE	1138:47	1138:47	14	(
ARGUMENT	1138:48	1138:48	14	tif
FIELD	1138:48	1138:48	15	tif
LEAF_NODE	1138:48	1138:48	16	tif
LEAF_NODE	1138:51	1138:51	14	,
ARGUMENT	1138:52	1138:52	14	ndir
FIELD	1138:52	1138:52	15	ndir
LEAF_NODE	1138:52	1138:52	16	ndir
LEAF_NODE	1138:56	1138:56	14	,
ARGUMENT	1138:57	1138:57	14	dir
FIELD	1138:57	1138:57	15	dir
LEAF_NODE	1138:57	1138:57	16	dir
LEAF_NODE	1138:60	1138:60	14	,
ARGUMENT	1138:61	1138:61	14	tag
FIELD	1138:61	1138:61	15	tag
LEAF_NODE	1138:61	1138:61	16	tag
LEAF_NODE	1138:64	1138:64	14	,
ARGUMENT	1138:65	1138:72	14	( int16 ) value
LEAF_NODE	1138:65	1138:65	15	(
TYPE_NAME	1138:66	1138:66	15	int16
LEAF_NODE	1138:66	1138:66	16	int16
LEAF_NODE	1138:71	1138:71	15	)
FIELD	1138:72	1138:72	15	value
LEAF_NODE	1138:72	1138:72	16	value
LEAF_NODE	1138:77	1138:77	14	)
LEAF_NODE	1138:78	1138:78	13	)
LEAF_NODE	1138:79	1138:79	11	;
SELECTION	1139:3	1140:4	6	
KEYWORD	1139:3	1139:3	7	else
LEAF_NODE	1139:3	1139:3	8	else
STATEMENTS	1140:4	1140:4	7	
JUMP_STATEMENT	1140:4	1140:78	8	return ( TIFFWriteDirectoryTagSlongPerSample ( tif , ndir , dir , tag , ( int32 ) value ) ) ;
KEYWORD	1140:4	1140:4	9	return
LEAF_NODE	1140:4	1140:4	10	return
DESTINATION	1140:10	1140:10	9	( TIFFWriteDirectoryTagSlongPerSample ( tif , ndir , dir , tag , ( int32 ) value ) )
EXPR	1140:10	1140:77	10	( TIFFWriteDirectoryTagSlongPerSample ( tif , ndir , dir , tag , ( int32 ) value ) )
LEAF_NODE	1140:10	1140:10	11	(
FUNCTION_CALL	1140:11	1140:76	11	TIFFWriteDirectoryTagSlongPerSample ( tif , ndir , dir , tag , ( int32 ) value )
CALLEE	1140:11	1140:11	12	TIFFWriteDirectoryTagSlongPerSample
LEAF_NODE	1140:11	1140:11	13	TIFFWriteDirectoryTagSlongPerSample
LEAF_NODE	1140:46	1140:46	12	(
ARGUMENT	1140:47	1140:47	12	tif
FIELD	1140:47	1140:47	13	tif
LEAF_NODE	1140:47	1140:47	14	tif
LEAF_NODE	1140:50	1140:50	12	,
ARGUMENT	1140:51	1140:51	12	ndir
FIELD	1140:51	1140:51	13	ndir
LEAF_NODE	1140:51	1140:51	14	ndir
LEAF_NODE	1140:55	1140:55	12	,
ARGUMENT	1140:56	1140:56	12	dir
FIELD	1140:56	1140:56	13	dir
LEAF_NODE	1140:56	1140:56	14	dir
LEAF_NODE	1140:59	1140:59	12	,
ARGUMENT	1140:60	1140:60	12	tag
FIELD	1140:60	1140:60	13	tag
LEAF_NODE	1140:60	1140:60	14	tag
LEAF_NODE	1140:63	1140:63	12	,
ARGUMENT	1140:64	1140:71	12	( int32 ) value
LEAF_NODE	1140:64	1140:64	13	(
TYPE_NAME	1140:65	1140:65	13	int32
LEAF_NODE	1140:65	1140:65	14	int32
LEAF_NODE	1140:70	1140:70	13	)
FIELD	1140:71	1140:71	13	value
LEAF_NODE	1140:71	1140:71	14	value
LEAF_NODE	1140:76	1140:76	12	)
LEAF_NODE	1140:77	1140:77	11	)
LEAF_NODE	1140:78	1140:78	9	;
LABEL	1141:2	1141:24	6	case SAMPLEFORMAT_UINT :
LEAF_NODE	1141:2	1141:2	7	case
LEAF_NODE	1141:7	1141:7	7	SAMPLEFORMAT_UINT
LEAF_NODE	1141:24	1141:24	7	:
SELECTION	1142:3	1143:4	6	
KEYWORD	1142:3	1142:3	7	if
LEAF_NODE	1142:3	1142:3	8	if
LEAF_NODE	1142:6	1142:6	7	(
CONDITION	1142:7	1142:7	7	tif -> tif_dir . td_bitspersample <= 8
EXPR	1142:7	1142:38	8	tif -> tif_dir . td_bitspersample <= 8
FIELD	1142:7	1142:20	9	tif -> tif_dir . td_bitspersample
LEAF_NODE	1142:7	1142:7	10	tif
LEAF_NODE	1142:10	1142:10	10	->
LEAF_NODE	1142:12	1142:12	10	tif_dir
LEAF_NODE	1142:19	1142:19	10	.
LEAF_NODE	1142:20	1142:20	10	td_bitspersample
REL_OPERATOR	1142:36	1142:36	9	<=
LEAF_NODE	1142:36	1142:36	10	<=
FIELD	1142:38	1142:38	9	8
LEAF_NODE	1142:38	1142:38	10	8
LEAF_NODE	1142:39	1142:39	7	)
STATEMENTS	1143:4	1143:4	7	
JUMP_STATEMENT	1143:4	1143:77	8	return ( TIFFWriteDirectoryTagBytePerSample ( tif , ndir , dir , tag , ( uint8 ) value ) ) ;
KEYWORD	1143:4	1143:4	9	return
LEAF_NODE	1143:4	1143:4	10	return
DESTINATION	1143:10	1143:10	9	( TIFFWriteDirectoryTagBytePerSample ( tif , ndir , dir , tag , ( uint8 ) value ) )
EXPR	1143:10	1143:76	10	( TIFFWriteDirectoryTagBytePerSample ( tif , ndir , dir , tag , ( uint8 ) value ) )
LEAF_NODE	1143:10	1143:10	11	(
FUNCTION_CALL	1143:11	1143:75	11	TIFFWriteDirectoryTagBytePerSample ( tif , ndir , dir , tag , ( uint8 ) value )
CALLEE	1143:11	1143:11	12	TIFFWriteDirectoryTagBytePerSample
LEAF_NODE	1143:11	1143:11	13	TIFFWriteDirectoryTagBytePerSample
LEAF_NODE	1143:45	1143:45	12	(
ARGUMENT	1143:46	1143:46	12	tif
FIELD	1143:46	1143:46	13	tif
LEAF_NODE	1143:46	1143:46	14	tif
LEAF_NODE	1143:49	1143:49	12	,
ARGUMENT	1143:50	1143:50	12	ndir
FIELD	1143:50	1143:50	13	ndir
LEAF_NODE	1143:50	1143:50	14	ndir
LEAF_NODE	1143:54	1143:54	12	,
ARGUMENT	1143:55	1143:55	12	dir
FIELD	1143:55	1143:55	13	dir
LEAF_NODE	1143:55	1143:55	14	dir
LEAF_NODE	1143:58	1143:58	12	,
ARGUMENT	1143:59	1143:59	12	tag
FIELD	1143:59	1143:59	13	tag
LEAF_NODE	1143:59	1143:59	14	tag
LEAF_NODE	1143:62	1143:62	12	,
ARGUMENT	1143:63	1143:70	12	( uint8 ) value
LEAF_NODE	1143:63	1143:63	13	(
TYPE_NAME	1143:64	1143:64	13	uint8
LEAF_NODE	1143:64	1143:64	14	uint8
LEAF_NODE	1143:69	1143:69	13	)
FIELD	1143:70	1143:70	13	value
LEAF_NODE	1143:70	1143:70	14	value
LEAF_NODE	1143:75	1143:75	12	)
LEAF_NODE	1143:76	1143:76	11	)
LEAF_NODE	1143:77	1143:77	9	;
SELECTION	1144:3	1144:8	6	
KEYWORD	1144:3	1144:3	7	else
LEAF_NODE	1144:3	1144:3	8	else
STATEMENTS	1144:8	1144:8	7	
SELECTION	1144:8	1145:4	8	
KEYWORD	1144:8	1144:8	9	if
LEAF_NODE	1144:8	1144:8	10	if
LEAF_NODE	1144:11	1144:11	9	(
CONDITION	1144:12	1144:12	9	tif -> tif_dir . td_bitspersample <= 16
EXPR	1144:12	1144:43	10	tif -> tif_dir . td_bitspersample <= 16
FIELD	1144:12	1144:25	11	tif -> tif_dir . td_bitspersample
LEAF_NODE	1144:12	1144:12	12	tif
LEAF_NODE	1144:15	1144:15	12	->
LEAF_NODE	1144:17	1144:17	12	tif_dir
LEAF_NODE	1144:24	1144:24	12	.
LEAF_NODE	1144:25	1144:25	12	td_bitspersample
REL_OPERATOR	1144:41	1144:41	11	<=
LEAF_NODE	1144:41	1144:41	12	<=
FIELD	1144:43	1144:43	11	16
LEAF_NODE	1144:43	1144:43	12	16
LEAF_NODE	1144:45	1144:45	9	)
STATEMENTS	1145:4	1145:4	9	
JUMP_STATEMENT	1145:4	1145:79	10	return ( TIFFWriteDirectoryTagShortPerSample ( tif , ndir , dir , tag , ( uint16 ) value ) ) ;
KEYWORD	1145:4	1145:4	11	return
LEAF_NODE	1145:4	1145:4	12	return
DESTINATION	1145:10	1145:10	11	( TIFFWriteDirectoryTagShortPerSample ( tif , ndir , dir , tag , ( uint16 ) value ) )
EXPR	1145:10	1145:78	12	( TIFFWriteDirectoryTagShortPerSample ( tif , ndir , dir , tag , ( uint16 ) value ) )
LEAF_NODE	1145:10	1145:10	13	(
FUNCTION_CALL	1145:11	1145:77	13	TIFFWriteDirectoryTagShortPerSample ( tif , ndir , dir , tag , ( uint16 ) value )
CALLEE	1145:11	1145:11	14	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	1145:11	1145:11	15	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	1145:46	1145:46	14	(
ARGUMENT	1145:47	1145:47	14	tif
FIELD	1145:47	1145:47	15	tif
LEAF_NODE	1145:47	1145:47	16	tif
LEAF_NODE	1145:50	1145:50	14	,
ARGUMENT	1145:51	1145:51	14	ndir
FIELD	1145:51	1145:51	15	ndir
LEAF_NODE	1145:51	1145:51	16	ndir
LEAF_NODE	1145:55	1145:55	14	,
ARGUMENT	1145:56	1145:56	14	dir
FIELD	1145:56	1145:56	15	dir
LEAF_NODE	1145:56	1145:56	16	dir
LEAF_NODE	1145:59	1145:59	14	,
ARGUMENT	1145:60	1145:60	14	tag
FIELD	1145:60	1145:60	15	tag
LEAF_NODE	1145:60	1145:60	16	tag
LEAF_NODE	1145:63	1145:63	14	,
ARGUMENT	1145:64	1145:72	14	( uint16 ) value
LEAF_NODE	1145:64	1145:64	15	(
TYPE_NAME	1145:65	1145:65	15	uint16
LEAF_NODE	1145:65	1145:65	16	uint16
LEAF_NODE	1145:71	1145:71	15	)
FIELD	1145:72	1145:72	15	value
LEAF_NODE	1145:72	1145:72	16	value
LEAF_NODE	1145:77	1145:77	14	)
LEAF_NODE	1145:78	1145:78	13	)
LEAF_NODE	1145:79	1145:79	11	;
SELECTION	1146:3	1147:4	6	
KEYWORD	1146:3	1146:3	7	else
LEAF_NODE	1146:3	1146:3	8	else
STATEMENTS	1147:4	1147:4	7	
JUMP_STATEMENT	1147:4	1147:78	8	return ( TIFFWriteDirectoryTagLongPerSample ( tif , ndir , dir , tag , ( uint32 ) value ) ) ;
KEYWORD	1147:4	1147:4	9	return
LEAF_NODE	1147:4	1147:4	10	return
DESTINATION	1147:10	1147:10	9	( TIFFWriteDirectoryTagLongPerSample ( tif , ndir , dir , tag , ( uint32 ) value ) )
EXPR	1147:10	1147:77	10	( TIFFWriteDirectoryTagLongPerSample ( tif , ndir , dir , tag , ( uint32 ) value ) )
LEAF_NODE	1147:10	1147:10	11	(
FUNCTION_CALL	1147:11	1147:76	11	TIFFWriteDirectoryTagLongPerSample ( tif , ndir , dir , tag , ( uint32 ) value )
CALLEE	1147:11	1147:11	12	TIFFWriteDirectoryTagLongPerSample
LEAF_NODE	1147:11	1147:11	13	TIFFWriteDirectoryTagLongPerSample
LEAF_NODE	1147:45	1147:45	12	(
ARGUMENT	1147:46	1147:46	12	tif
FIELD	1147:46	1147:46	13	tif
LEAF_NODE	1147:46	1147:46	14	tif
LEAF_NODE	1147:49	1147:49	12	,
ARGUMENT	1147:50	1147:50	12	ndir
FIELD	1147:50	1147:50	13	ndir
LEAF_NODE	1147:50	1147:50	14	ndir
LEAF_NODE	1147:54	1147:54	12	,
ARGUMENT	1147:55	1147:55	12	dir
FIELD	1147:55	1147:55	13	dir
LEAF_NODE	1147:55	1147:55	14	dir
LEAF_NODE	1147:58	1147:58	12	,
ARGUMENT	1147:59	1147:59	12	tag
FIELD	1147:59	1147:59	13	tag
LEAF_NODE	1147:59	1147:59	14	tag
LEAF_NODE	1147:62	1147:62	12	,
ARGUMENT	1147:63	1147:71	12	( uint32 ) value
LEAF_NODE	1147:63	1147:63	13	(
TYPE_NAME	1147:64	1147:64	13	uint32
LEAF_NODE	1147:64	1147:64	14	uint32
LEAF_NODE	1147:70	1147:70	13	)
FIELD	1147:71	1147:71	13	value
LEAF_NODE	1147:71	1147:71	14	value
LEAF_NODE	1147:76	1147:76	12	)
LEAF_NODE	1147:77	1147:77	11	)
LEAF_NODE	1147:78	1147:78	9	;
LABEL	1148:2	1148:9	6	default :
LEAF_NODE	1148:2	1148:2	7	default
LEAF_NODE	1148:9	1148:9	7	:
JUMP_STATEMENT	1149:3	1149:12	6	return ( 1 ) ;
KEYWORD	1149:3	1149:3	7	return
LEAF_NODE	1149:3	1149:3	8	return
DESTINATION	1149:9	1149:9	7	( 1 )
EXPR	1149:9	1149:11	8	( 1 )
LEAF_NODE	1149:9	1149:9	9	(
FIELD	1149:10	1149:10	9	1
LEAF_NODE	1149:10	1149:10	10	1
LEAF_NODE	1149:11	1149:11	9	)
LEAF_NODE	1149:12	1149:12	7	;
LEAF_NODE	1150:1	1150:1	5	}
LEAF_NODE	1151:0	1151:0	2	}
FUNCTION_DEF	1154:0	1163:0	1	
RETURN_TYPE	1154:0	1154:7	2	static int
LEAF_NODE	1154:0	1154:0	3	static
TYPE_NAME	1154:7	1154:7	3	int
LEAF_NODE	1154:7	1154:7	4	int
FUNCTION_NAME	1155:0	1155:0	2	TIFFWriteDirectoryTagAscii
LEAF_NODE	1155:0	1155:0	3	TIFFWriteDirectoryTagAscii
PARAMETER_LIST	1155:26	1155:108	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , char * value )
LEAF_NODE	1155:26	1155:26	3	(
PARAMETER_DECL	1155:27	1155:33	3	TIFF * tif
TYPE	1155:27	1155:31	4	TIFF *
TYPE_NAME	1155:27	1155:27	5	TIFF
LEAF_NODE	1155:27	1155:27	6	TIFF
POINTER	1155:31	1155:31	5	*
LEAF_NODE	1155:31	1155:31	6	*
NAME	1155:33	1155:33	4	tif
LEAF_NODE	1155:33	1155:33	5	tif
LEAF_NODE	1155:36	1155:36	3	,
PARAMETER_DECL	1155:38	1155:46	3	uint32 * ndir
TYPE	1155:38	1155:44	4	uint32 *
TYPE_NAME	1155:38	1155:38	5	uint32
LEAF_NODE	1155:38	1155:38	6	uint32
POINTER	1155:44	1155:44	5	*
LEAF_NODE	1155:44	1155:44	6	*
NAME	1155:46	1155:46	4	ndir
LEAF_NODE	1155:46	1155:46	5	ndir
LEAF_NODE	1155:50	1155:50	3	,
PARAMETER_DECL	1155:52	1155:66	3	TIFFDirEntry * dir
TYPE	1155:52	1155:64	4	TIFFDirEntry *
TYPE_NAME	1155:52	1155:52	5	TIFFDirEntry
LEAF_NODE	1155:52	1155:52	6	TIFFDirEntry
POINTER	1155:64	1155:64	5	*
LEAF_NODE	1155:64	1155:64	6	*
NAME	1155:66	1155:66	4	dir
LEAF_NODE	1155:66	1155:66	5	dir
LEAF_NODE	1155:69	1155:69	3	,
PARAMETER_DECL	1155:71	1155:78	3	uint16 tag
TYPE	1155:71	1155:71	4	uint16
TYPE_NAME	1155:71	1155:71	5	uint16
LEAF_NODE	1155:71	1155:71	6	uint16
NAME	1155:78	1155:78	4	tag
LEAF_NODE	1155:78	1155:78	5	tag
LEAF_NODE	1155:81	1155:81	3	,
PARAMETER_DECL	1155:83	1155:90	3	uint32 count
TYPE	1155:83	1155:83	4	uint32
TYPE_NAME	1155:83	1155:83	5	uint32
LEAF_NODE	1155:83	1155:83	6	uint32
NAME	1155:90	1155:90	4	count
LEAF_NODE	1155:90	1155:90	5	count
LEAF_NODE	1155:95	1155:95	3	,
PARAMETER_DECL	1155:97	1155:103	3	char * value
TYPE	1155:97	1155:101	4	char *
TYPE_NAME	1155:97	1155:97	5	char
LEAF_NODE	1155:97	1155:97	6	char
POINTER	1155:101	1155:101	5	*
LEAF_NODE	1155:101	1155:101	6	*
NAME	1155:103	1155:103	4	value
LEAF_NODE	1155:103	1155:103	5	value
LEAF_NODE	1155:108	1155:108	3	)
LEAF_NODE	1156:0	1156:0	2	{
STATEMENTS	1157:1	1162:1	2	
SELECTION	1157:1	1158:1	3	
KEYWORD	1157:1	1157:1	4	if
LEAF_NODE	1157:1	1157:1	5	if
LEAF_NODE	1157:4	1157:4	4	(
CONDITION	1157:5	1157:5	4	dir == NULL
EXPR	1157:5	1157:10	5	dir == NULL
FIELD	1157:5	1157:5	6	dir
LEAF_NODE	1157:5	1157:5	7	dir
EQ_OPERATOR	1157:8	1157:8	6	==
LEAF_NODE	1157:8	1157:8	7	==
FIELD	1157:10	1157:10	6	NULL
LEAF_NODE	1157:10	1157:10	7	NULL
LEAF_NODE	1157:14	1157:14	4	)
STATEMENTS	1158:1	1161:1	4	
LEAF_NODE	1158:1	1158:1	5	{
STATEMENTS	1159:2	1160:2	5	
EXPR_STATEMENT	1159:2	1159:11	6	( * ndir ) ++ ;
EXPR	1159:2	1159:9	7	( * ndir ) ++
LEAF_NODE	1159:2	1159:2	8	(
UNARY_EXPR	1159:3	1159:4	8	* ndir
UNARY_OPERATOR	1159:3	1159:3	9	*
LEAF_NODE	1159:3	1159:3	10	*
FIELD	1159:4	1159:4	9	ndir
LEAF_NODE	1159:4	1159:4	10	ndir
LEAF_NODE	1159:8	1159:8	8	)
LEAF_NODE	1159:9	1159:9	8	++
LEAF_NODE	1159:11	1159:11	7	;
JUMP_STATEMENT	1160:2	1160:11	6	return ( 1 ) ;
KEYWORD	1160:2	1160:2	7	return
LEAF_NODE	1160:2	1160:2	8	return
DESTINATION	1160:8	1160:8	7	( 1 )
EXPR	1160:8	1160:10	8	( 1 )
LEAF_NODE	1160:8	1160:8	9	(
FIELD	1160:9	1160:9	9	1
LEAF_NODE	1160:9	1160:9	10	1
LEAF_NODE	1160:10	1160:10	9	)
LEAF_NODE	1160:11	1160:11	7	;
LEAF_NODE	1161:1	1161:1	5	}
JUMP_STATEMENT	1162:1	1162:72	3	return ( TIFFWriteDirectoryTagCheckedAscii ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1162:1	1162:1	4	return
LEAF_NODE	1162:1	1162:1	5	return
DESTINATION	1162:7	1162:7	4	( TIFFWriteDirectoryTagCheckedAscii ( tif , ndir , dir , tag , count , value ) )
EXPR	1162:7	1162:71	5	( TIFFWriteDirectoryTagCheckedAscii ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1162:7	1162:7	6	(
FUNCTION_CALL	1162:8	1162:70	6	TIFFWriteDirectoryTagCheckedAscii ( tif , ndir , dir , tag , count , value )
CALLEE	1162:8	1162:8	7	TIFFWriteDirectoryTagCheckedAscii
LEAF_NODE	1162:8	1162:8	8	TIFFWriteDirectoryTagCheckedAscii
LEAF_NODE	1162:41	1162:41	7	(
ARGUMENT	1162:42	1162:42	7	tif
FIELD	1162:42	1162:42	8	tif
LEAF_NODE	1162:42	1162:42	9	tif
LEAF_NODE	1162:45	1162:45	7	,
ARGUMENT	1162:46	1162:46	7	ndir
FIELD	1162:46	1162:46	8	ndir
LEAF_NODE	1162:46	1162:46	9	ndir
LEAF_NODE	1162:50	1162:50	7	,
ARGUMENT	1162:51	1162:51	7	dir
FIELD	1162:51	1162:51	8	dir
LEAF_NODE	1162:51	1162:51	9	dir
LEAF_NODE	1162:54	1162:54	7	,
ARGUMENT	1162:55	1162:55	7	tag
FIELD	1162:55	1162:55	8	tag
LEAF_NODE	1162:55	1162:55	9	tag
LEAF_NODE	1162:58	1162:58	7	,
ARGUMENT	1162:59	1162:59	7	count
FIELD	1162:59	1162:59	8	count
LEAF_NODE	1162:59	1162:59	9	count
LEAF_NODE	1162:64	1162:64	7	,
ARGUMENT	1162:65	1162:65	7	value
FIELD	1162:65	1162:65	8	value
LEAF_NODE	1162:65	1162:65	9	value
LEAF_NODE	1162:70	1162:70	7	)
LEAF_NODE	1162:71	1162:71	6	)
LEAF_NODE	1162:72	1162:72	4	;
LEAF_NODE	1163:0	1163:0	2	}
FUNCTION_DEF	1165:0	1174:0	1	
RETURN_TYPE	1165:0	1165:7	2	static int
LEAF_NODE	1165:0	1165:0	3	static
TYPE_NAME	1165:7	1165:7	3	int
LEAF_NODE	1165:7	1165:7	4	int
FUNCTION_NAME	1166:0	1166:0	2	TIFFWriteDirectoryTagUndefinedArray
LEAF_NODE	1166:0	1166:0	3	TIFFWriteDirectoryTagUndefinedArray
PARAMETER_LIST	1166:35	1166:118	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint8 * value )
LEAF_NODE	1166:35	1166:35	3	(
PARAMETER_DECL	1166:36	1166:42	3	TIFF * tif
TYPE	1166:36	1166:40	4	TIFF *
TYPE_NAME	1166:36	1166:36	5	TIFF
LEAF_NODE	1166:36	1166:36	6	TIFF
POINTER	1166:40	1166:40	5	*
LEAF_NODE	1166:40	1166:40	6	*
NAME	1166:42	1166:42	4	tif
LEAF_NODE	1166:42	1166:42	5	tif
LEAF_NODE	1166:45	1166:45	3	,
PARAMETER_DECL	1166:47	1166:55	3	uint32 * ndir
TYPE	1166:47	1166:53	4	uint32 *
TYPE_NAME	1166:47	1166:47	5	uint32
LEAF_NODE	1166:47	1166:47	6	uint32
POINTER	1166:53	1166:53	5	*
LEAF_NODE	1166:53	1166:53	6	*
NAME	1166:55	1166:55	4	ndir
LEAF_NODE	1166:55	1166:55	5	ndir
LEAF_NODE	1166:59	1166:59	3	,
PARAMETER_DECL	1166:61	1166:75	3	TIFFDirEntry * dir
TYPE	1166:61	1166:73	4	TIFFDirEntry *
TYPE_NAME	1166:61	1166:61	5	TIFFDirEntry
LEAF_NODE	1166:61	1166:61	6	TIFFDirEntry
POINTER	1166:73	1166:73	5	*
LEAF_NODE	1166:73	1166:73	6	*
NAME	1166:75	1166:75	4	dir
LEAF_NODE	1166:75	1166:75	5	dir
LEAF_NODE	1166:78	1166:78	3	,
PARAMETER_DECL	1166:80	1166:87	3	uint16 tag
TYPE	1166:80	1166:80	4	uint16
TYPE_NAME	1166:80	1166:80	5	uint16
LEAF_NODE	1166:80	1166:80	6	uint16
NAME	1166:87	1166:87	4	tag
LEAF_NODE	1166:87	1166:87	5	tag
LEAF_NODE	1166:90	1166:90	3	,
PARAMETER_DECL	1166:92	1166:99	3	uint32 count
TYPE	1166:92	1166:92	4	uint32
TYPE_NAME	1166:92	1166:92	5	uint32
LEAF_NODE	1166:92	1166:92	6	uint32
NAME	1166:99	1166:99	4	count
LEAF_NODE	1166:99	1166:99	5	count
LEAF_NODE	1166:104	1166:104	3	,
PARAMETER_DECL	1166:106	1166:113	3	uint8 * value
TYPE	1166:106	1166:111	4	uint8 *
TYPE_NAME	1166:106	1166:106	5	uint8
LEAF_NODE	1166:106	1166:106	6	uint8
POINTER	1166:111	1166:111	5	*
LEAF_NODE	1166:111	1166:111	6	*
NAME	1166:113	1166:113	4	value
LEAF_NODE	1166:113	1166:113	5	value
LEAF_NODE	1166:118	1166:118	3	)
LEAF_NODE	1167:0	1167:0	2	{
STATEMENTS	1168:1	1173:1	2	
SELECTION	1168:1	1169:1	3	
KEYWORD	1168:1	1168:1	4	if
LEAF_NODE	1168:1	1168:1	5	if
LEAF_NODE	1168:4	1168:4	4	(
CONDITION	1168:5	1168:5	4	dir == NULL
EXPR	1168:5	1168:10	5	dir == NULL
FIELD	1168:5	1168:5	6	dir
LEAF_NODE	1168:5	1168:5	7	dir
EQ_OPERATOR	1168:8	1168:8	6	==
LEAF_NODE	1168:8	1168:8	7	==
FIELD	1168:10	1168:10	6	NULL
LEAF_NODE	1168:10	1168:10	7	NULL
LEAF_NODE	1168:14	1168:14	4	)
STATEMENTS	1169:1	1172:1	4	
LEAF_NODE	1169:1	1169:1	5	{
STATEMENTS	1170:2	1171:2	5	
EXPR_STATEMENT	1170:2	1170:11	6	( * ndir ) ++ ;
EXPR	1170:2	1170:9	7	( * ndir ) ++
LEAF_NODE	1170:2	1170:2	8	(
UNARY_EXPR	1170:3	1170:4	8	* ndir
UNARY_OPERATOR	1170:3	1170:3	9	*
LEAF_NODE	1170:3	1170:3	10	*
FIELD	1170:4	1170:4	9	ndir
LEAF_NODE	1170:4	1170:4	10	ndir
LEAF_NODE	1170:8	1170:8	8	)
LEAF_NODE	1170:9	1170:9	8	++
LEAF_NODE	1170:11	1170:11	7	;
JUMP_STATEMENT	1171:2	1171:11	6	return ( 1 ) ;
KEYWORD	1171:2	1171:2	7	return
LEAF_NODE	1171:2	1171:2	8	return
DESTINATION	1171:8	1171:8	7	( 1 )
EXPR	1171:8	1171:10	8	( 1 )
LEAF_NODE	1171:8	1171:8	9	(
FIELD	1171:9	1171:9	9	1
LEAF_NODE	1171:9	1171:9	10	1
LEAF_NODE	1171:10	1171:10	9	)
LEAF_NODE	1171:11	1171:11	7	;
LEAF_NODE	1172:1	1172:1	5	}
JUMP_STATEMENT	1173:1	1173:81	3	return ( TIFFWriteDirectoryTagCheckedUndefinedArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1173:1	1173:1	4	return
LEAF_NODE	1173:1	1173:1	5	return
DESTINATION	1173:7	1173:7	4	( TIFFWriteDirectoryTagCheckedUndefinedArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1173:7	1173:80	5	( TIFFWriteDirectoryTagCheckedUndefinedArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1173:7	1173:7	6	(
FUNCTION_CALL	1173:8	1173:79	6	TIFFWriteDirectoryTagCheckedUndefinedArray ( tif , ndir , dir , tag , count , value )
CALLEE	1173:8	1173:8	7	TIFFWriteDirectoryTagCheckedUndefinedArray
LEAF_NODE	1173:8	1173:8	8	TIFFWriteDirectoryTagCheckedUndefinedArray
LEAF_NODE	1173:50	1173:50	7	(
ARGUMENT	1173:51	1173:51	7	tif
FIELD	1173:51	1173:51	8	tif
LEAF_NODE	1173:51	1173:51	9	tif
LEAF_NODE	1173:54	1173:54	7	,
ARGUMENT	1173:55	1173:55	7	ndir
FIELD	1173:55	1173:55	8	ndir
LEAF_NODE	1173:55	1173:55	9	ndir
LEAF_NODE	1173:59	1173:59	7	,
ARGUMENT	1173:60	1173:60	7	dir
FIELD	1173:60	1173:60	8	dir
LEAF_NODE	1173:60	1173:60	9	dir
LEAF_NODE	1173:63	1173:63	7	,
ARGUMENT	1173:64	1173:64	7	tag
FIELD	1173:64	1173:64	8	tag
LEAF_NODE	1173:64	1173:64	9	tag
LEAF_NODE	1173:67	1173:67	7	,
ARGUMENT	1173:68	1173:68	7	count
FIELD	1173:68	1173:68	8	count
LEAF_NODE	1173:68	1173:68	9	count
LEAF_NODE	1173:73	1173:73	7	,
ARGUMENT	1173:74	1173:74	7	value
FIELD	1173:74	1173:74	8	value
LEAF_NODE	1173:74	1173:74	9	value
LEAF_NODE	1173:79	1173:79	7	)
LEAF_NODE	1173:80	1173:80	6	)
LEAF_NODE	1173:81	1173:81	4	;
LEAF_NODE	1174:0	1174:0	2	}
FUNCTION_DEF	1177:0	1186:0	1	
RETURN_TYPE	1177:0	1177:7	2	static int
LEAF_NODE	1177:0	1177:0	3	static
TYPE_NAME	1177:7	1177:7	3	int
LEAF_NODE	1177:7	1177:7	4	int
FUNCTION_NAME	1178:0	1178:0	2	TIFFWriteDirectoryTagByte
LEAF_NODE	1178:0	1178:0	3	TIFFWriteDirectoryTagByte
PARAMETER_LIST	1178:25	1178:93	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint8 value )
LEAF_NODE	1178:25	1178:25	3	(
PARAMETER_DECL	1178:26	1178:32	3	TIFF * tif
TYPE	1178:26	1178:30	4	TIFF *
TYPE_NAME	1178:26	1178:26	5	TIFF
LEAF_NODE	1178:26	1178:26	6	TIFF
POINTER	1178:30	1178:30	5	*
LEAF_NODE	1178:30	1178:30	6	*
NAME	1178:32	1178:32	4	tif
LEAF_NODE	1178:32	1178:32	5	tif
LEAF_NODE	1178:35	1178:35	3	,
PARAMETER_DECL	1178:37	1178:45	3	uint32 * ndir
TYPE	1178:37	1178:43	4	uint32 *
TYPE_NAME	1178:37	1178:37	5	uint32
LEAF_NODE	1178:37	1178:37	6	uint32
POINTER	1178:43	1178:43	5	*
LEAF_NODE	1178:43	1178:43	6	*
NAME	1178:45	1178:45	4	ndir
LEAF_NODE	1178:45	1178:45	5	ndir
LEAF_NODE	1178:49	1178:49	3	,
PARAMETER_DECL	1178:51	1178:65	3	TIFFDirEntry * dir
TYPE	1178:51	1178:63	4	TIFFDirEntry *
TYPE_NAME	1178:51	1178:51	5	TIFFDirEntry
LEAF_NODE	1178:51	1178:51	6	TIFFDirEntry
POINTER	1178:63	1178:63	5	*
LEAF_NODE	1178:63	1178:63	6	*
NAME	1178:65	1178:65	4	dir
LEAF_NODE	1178:65	1178:65	5	dir
LEAF_NODE	1178:68	1178:68	3	,
PARAMETER_DECL	1178:70	1178:77	3	uint16 tag
TYPE	1178:70	1178:70	4	uint16
TYPE_NAME	1178:70	1178:70	5	uint16
LEAF_NODE	1178:70	1178:70	6	uint16
NAME	1178:77	1178:77	4	tag
LEAF_NODE	1178:77	1178:77	5	tag
LEAF_NODE	1178:80	1178:80	3	,
PARAMETER_DECL	1178:82	1178:88	3	uint8 value
TYPE	1178:82	1178:82	4	uint8
TYPE_NAME	1178:82	1178:82	5	uint8
LEAF_NODE	1178:82	1178:82	6	uint8
NAME	1178:88	1178:88	4	value
LEAF_NODE	1178:88	1178:88	5	value
LEAF_NODE	1178:93	1178:93	3	)
LEAF_NODE	1179:0	1179:0	2	{
STATEMENTS	1180:1	1185:1	2	
SELECTION	1180:1	1181:1	3	
KEYWORD	1180:1	1180:1	4	if
LEAF_NODE	1180:1	1180:1	5	if
LEAF_NODE	1180:4	1180:4	4	(
CONDITION	1180:5	1180:5	4	dir == NULL
EXPR	1180:5	1180:10	5	dir == NULL
FIELD	1180:5	1180:5	6	dir
LEAF_NODE	1180:5	1180:5	7	dir
EQ_OPERATOR	1180:8	1180:8	6	==
LEAF_NODE	1180:8	1180:8	7	==
FIELD	1180:10	1180:10	6	NULL
LEAF_NODE	1180:10	1180:10	7	NULL
LEAF_NODE	1180:14	1180:14	4	)
STATEMENTS	1181:1	1184:1	4	
LEAF_NODE	1181:1	1181:1	5	{
STATEMENTS	1182:2	1183:2	5	
EXPR_STATEMENT	1182:2	1182:11	6	( * ndir ) ++ ;
EXPR	1182:2	1182:9	7	( * ndir ) ++
LEAF_NODE	1182:2	1182:2	8	(
UNARY_EXPR	1182:3	1182:4	8	* ndir
UNARY_OPERATOR	1182:3	1182:3	9	*
LEAF_NODE	1182:3	1182:3	10	*
FIELD	1182:4	1182:4	9	ndir
LEAF_NODE	1182:4	1182:4	10	ndir
LEAF_NODE	1182:8	1182:8	8	)
LEAF_NODE	1182:9	1182:9	8	++
LEAF_NODE	1182:11	1182:11	7	;
JUMP_STATEMENT	1183:2	1183:11	6	return ( 1 ) ;
KEYWORD	1183:2	1183:2	7	return
LEAF_NODE	1183:2	1183:2	8	return
DESTINATION	1183:8	1183:8	7	( 1 )
EXPR	1183:8	1183:10	8	( 1 )
LEAF_NODE	1183:8	1183:8	9	(
FIELD	1183:9	1183:9	9	1
LEAF_NODE	1183:9	1183:9	10	1
LEAF_NODE	1183:10	1183:10	9	)
LEAF_NODE	1183:11	1183:11	7	;
LEAF_NODE	1184:1	1184:1	5	}
JUMP_STATEMENT	1185:1	1185:65	3	return ( TIFFWriteDirectoryTagCheckedByte ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1185:1	1185:1	4	return
LEAF_NODE	1185:1	1185:1	5	return
DESTINATION	1185:7	1185:7	4	( TIFFWriteDirectoryTagCheckedByte ( tif , ndir , dir , tag , value ) )
EXPR	1185:7	1185:64	5	( TIFFWriteDirectoryTagCheckedByte ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1185:7	1185:7	6	(
FUNCTION_CALL	1185:8	1185:63	6	TIFFWriteDirectoryTagCheckedByte ( tif , ndir , dir , tag , value )
CALLEE	1185:8	1185:8	7	TIFFWriteDirectoryTagCheckedByte
LEAF_NODE	1185:8	1185:8	8	TIFFWriteDirectoryTagCheckedByte
LEAF_NODE	1185:40	1185:40	7	(
ARGUMENT	1185:41	1185:41	7	tif
FIELD	1185:41	1185:41	8	tif
LEAF_NODE	1185:41	1185:41	9	tif
LEAF_NODE	1185:44	1185:44	7	,
ARGUMENT	1185:45	1185:45	7	ndir
FIELD	1185:45	1185:45	8	ndir
LEAF_NODE	1185:45	1185:45	9	ndir
LEAF_NODE	1185:49	1185:49	7	,
ARGUMENT	1185:50	1185:50	7	dir
FIELD	1185:50	1185:50	8	dir
LEAF_NODE	1185:50	1185:50	9	dir
LEAF_NODE	1185:53	1185:53	7	,
ARGUMENT	1185:54	1185:54	7	tag
FIELD	1185:54	1185:54	8	tag
LEAF_NODE	1185:54	1185:54	9	tag
LEAF_NODE	1185:57	1185:57	7	,
ARGUMENT	1185:58	1185:58	7	value
FIELD	1185:58	1185:58	8	value
LEAF_NODE	1185:58	1185:58	9	value
LEAF_NODE	1185:63	1185:63	7	)
LEAF_NODE	1185:64	1185:64	6	)
LEAF_NODE	1185:65	1185:65	4	;
LEAF_NODE	1186:0	1186:0	2	}
FUNCTION_DEF	1189:0	1198:0	1	
RETURN_TYPE	1189:0	1189:7	2	static int
LEAF_NODE	1189:0	1189:0	3	static
TYPE_NAME	1189:7	1189:7	3	int
LEAF_NODE	1189:7	1189:7	4	int
FUNCTION_NAME	1190:0	1190:0	2	TIFFWriteDirectoryTagByteArray
LEAF_NODE	1190:0	1190:0	3	TIFFWriteDirectoryTagByteArray
PARAMETER_LIST	1190:30	1190:113	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint8 * value )
LEAF_NODE	1190:30	1190:30	3	(
PARAMETER_DECL	1190:31	1190:37	3	TIFF * tif
TYPE	1190:31	1190:35	4	TIFF *
TYPE_NAME	1190:31	1190:31	5	TIFF
LEAF_NODE	1190:31	1190:31	6	TIFF
POINTER	1190:35	1190:35	5	*
LEAF_NODE	1190:35	1190:35	6	*
NAME	1190:37	1190:37	4	tif
LEAF_NODE	1190:37	1190:37	5	tif
LEAF_NODE	1190:40	1190:40	3	,
PARAMETER_DECL	1190:42	1190:50	3	uint32 * ndir
TYPE	1190:42	1190:48	4	uint32 *
TYPE_NAME	1190:42	1190:42	5	uint32
LEAF_NODE	1190:42	1190:42	6	uint32
POINTER	1190:48	1190:48	5	*
LEAF_NODE	1190:48	1190:48	6	*
NAME	1190:50	1190:50	4	ndir
LEAF_NODE	1190:50	1190:50	5	ndir
LEAF_NODE	1190:54	1190:54	3	,
PARAMETER_DECL	1190:56	1190:70	3	TIFFDirEntry * dir
TYPE	1190:56	1190:68	4	TIFFDirEntry *
TYPE_NAME	1190:56	1190:56	5	TIFFDirEntry
LEAF_NODE	1190:56	1190:56	6	TIFFDirEntry
POINTER	1190:68	1190:68	5	*
LEAF_NODE	1190:68	1190:68	6	*
NAME	1190:70	1190:70	4	dir
LEAF_NODE	1190:70	1190:70	5	dir
LEAF_NODE	1190:73	1190:73	3	,
PARAMETER_DECL	1190:75	1190:82	3	uint16 tag
TYPE	1190:75	1190:75	4	uint16
TYPE_NAME	1190:75	1190:75	5	uint16
LEAF_NODE	1190:75	1190:75	6	uint16
NAME	1190:82	1190:82	4	tag
LEAF_NODE	1190:82	1190:82	5	tag
LEAF_NODE	1190:85	1190:85	3	,
PARAMETER_DECL	1190:87	1190:94	3	uint32 count
TYPE	1190:87	1190:87	4	uint32
TYPE_NAME	1190:87	1190:87	5	uint32
LEAF_NODE	1190:87	1190:87	6	uint32
NAME	1190:94	1190:94	4	count
LEAF_NODE	1190:94	1190:94	5	count
LEAF_NODE	1190:99	1190:99	3	,
PARAMETER_DECL	1190:101	1190:108	3	uint8 * value
TYPE	1190:101	1190:106	4	uint8 *
TYPE_NAME	1190:101	1190:101	5	uint8
LEAF_NODE	1190:101	1190:101	6	uint8
POINTER	1190:106	1190:106	5	*
LEAF_NODE	1190:106	1190:106	6	*
NAME	1190:108	1190:108	4	value
LEAF_NODE	1190:108	1190:108	5	value
LEAF_NODE	1190:113	1190:113	3	)
LEAF_NODE	1191:0	1191:0	2	{
STATEMENTS	1192:1	1197:1	2	
SELECTION	1192:1	1193:1	3	
KEYWORD	1192:1	1192:1	4	if
LEAF_NODE	1192:1	1192:1	5	if
LEAF_NODE	1192:4	1192:4	4	(
CONDITION	1192:5	1192:5	4	dir == NULL
EXPR	1192:5	1192:10	5	dir == NULL
FIELD	1192:5	1192:5	6	dir
LEAF_NODE	1192:5	1192:5	7	dir
EQ_OPERATOR	1192:8	1192:8	6	==
LEAF_NODE	1192:8	1192:8	7	==
FIELD	1192:10	1192:10	6	NULL
LEAF_NODE	1192:10	1192:10	7	NULL
LEAF_NODE	1192:14	1192:14	4	)
STATEMENTS	1193:1	1196:1	4	
LEAF_NODE	1193:1	1193:1	5	{
STATEMENTS	1194:2	1195:2	5	
EXPR_STATEMENT	1194:2	1194:11	6	( * ndir ) ++ ;
EXPR	1194:2	1194:9	7	( * ndir ) ++
LEAF_NODE	1194:2	1194:2	8	(
UNARY_EXPR	1194:3	1194:4	8	* ndir
UNARY_OPERATOR	1194:3	1194:3	9	*
LEAF_NODE	1194:3	1194:3	10	*
FIELD	1194:4	1194:4	9	ndir
LEAF_NODE	1194:4	1194:4	10	ndir
LEAF_NODE	1194:8	1194:8	8	)
LEAF_NODE	1194:9	1194:9	8	++
LEAF_NODE	1194:11	1194:11	7	;
JUMP_STATEMENT	1195:2	1195:11	6	return ( 1 ) ;
KEYWORD	1195:2	1195:2	7	return
LEAF_NODE	1195:2	1195:2	8	return
DESTINATION	1195:8	1195:8	7	( 1 )
EXPR	1195:8	1195:10	8	( 1 )
LEAF_NODE	1195:8	1195:8	9	(
FIELD	1195:9	1195:9	9	1
LEAF_NODE	1195:9	1195:9	10	1
LEAF_NODE	1195:10	1195:10	9	)
LEAF_NODE	1195:11	1195:11	7	;
LEAF_NODE	1196:1	1196:1	5	}
JUMP_STATEMENT	1197:1	1197:76	3	return ( TIFFWriteDirectoryTagCheckedByteArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1197:1	1197:1	4	return
LEAF_NODE	1197:1	1197:1	5	return
DESTINATION	1197:7	1197:7	4	( TIFFWriteDirectoryTagCheckedByteArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1197:7	1197:75	5	( TIFFWriteDirectoryTagCheckedByteArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1197:7	1197:7	6	(
FUNCTION_CALL	1197:8	1197:74	6	TIFFWriteDirectoryTagCheckedByteArray ( tif , ndir , dir , tag , count , value )
CALLEE	1197:8	1197:8	7	TIFFWriteDirectoryTagCheckedByteArray
LEAF_NODE	1197:8	1197:8	8	TIFFWriteDirectoryTagCheckedByteArray
LEAF_NODE	1197:45	1197:45	7	(
ARGUMENT	1197:46	1197:46	7	tif
FIELD	1197:46	1197:46	8	tif
LEAF_NODE	1197:46	1197:46	9	tif
LEAF_NODE	1197:49	1197:49	7	,
ARGUMENT	1197:50	1197:50	7	ndir
FIELD	1197:50	1197:50	8	ndir
LEAF_NODE	1197:50	1197:50	9	ndir
LEAF_NODE	1197:54	1197:54	7	,
ARGUMENT	1197:55	1197:55	7	dir
FIELD	1197:55	1197:55	8	dir
LEAF_NODE	1197:55	1197:55	9	dir
LEAF_NODE	1197:58	1197:58	7	,
ARGUMENT	1197:59	1197:59	7	tag
FIELD	1197:59	1197:59	8	tag
LEAF_NODE	1197:59	1197:59	9	tag
LEAF_NODE	1197:62	1197:62	7	,
ARGUMENT	1197:63	1197:63	7	count
FIELD	1197:63	1197:63	8	count
LEAF_NODE	1197:63	1197:63	9	count
LEAF_NODE	1197:68	1197:68	7	,
ARGUMENT	1197:69	1197:69	7	value
FIELD	1197:69	1197:69	8	value
LEAF_NODE	1197:69	1197:69	9	value
LEAF_NODE	1197:74	1197:74	7	)
LEAF_NODE	1197:75	1197:75	6	)
LEAF_NODE	1197:76	1197:76	4	;
LEAF_NODE	1198:0	1198:0	2	}
FUNCTION_DEF	1201:0	1225:0	1	
RETURN_TYPE	1201:0	1201:7	2	static int
LEAF_NODE	1201:0	1201:0	3	static
TYPE_NAME	1201:7	1201:7	3	int
LEAF_NODE	1201:7	1201:7	4	int
FUNCTION_NAME	1202:0	1202:0	2	TIFFWriteDirectoryTagBytePerSample
LEAF_NODE	1202:0	1202:0	3	TIFFWriteDirectoryTagBytePerSample
PARAMETER_LIST	1202:34	1202:102	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint8 value )
LEAF_NODE	1202:34	1202:34	3	(
PARAMETER_DECL	1202:35	1202:41	3	TIFF * tif
TYPE	1202:35	1202:39	4	TIFF *
TYPE_NAME	1202:35	1202:35	5	TIFF
LEAF_NODE	1202:35	1202:35	6	TIFF
POINTER	1202:39	1202:39	5	*
LEAF_NODE	1202:39	1202:39	6	*
NAME	1202:41	1202:41	4	tif
LEAF_NODE	1202:41	1202:41	5	tif
LEAF_NODE	1202:44	1202:44	3	,
PARAMETER_DECL	1202:46	1202:54	3	uint32 * ndir
TYPE	1202:46	1202:52	4	uint32 *
TYPE_NAME	1202:46	1202:46	5	uint32
LEAF_NODE	1202:46	1202:46	6	uint32
POINTER	1202:52	1202:52	5	*
LEAF_NODE	1202:52	1202:52	6	*
NAME	1202:54	1202:54	4	ndir
LEAF_NODE	1202:54	1202:54	5	ndir
LEAF_NODE	1202:58	1202:58	3	,
PARAMETER_DECL	1202:60	1202:74	3	TIFFDirEntry * dir
TYPE	1202:60	1202:72	4	TIFFDirEntry *
TYPE_NAME	1202:60	1202:60	5	TIFFDirEntry
LEAF_NODE	1202:60	1202:60	6	TIFFDirEntry
POINTER	1202:72	1202:72	5	*
LEAF_NODE	1202:72	1202:72	6	*
NAME	1202:74	1202:74	4	dir
LEAF_NODE	1202:74	1202:74	5	dir
LEAF_NODE	1202:77	1202:77	3	,
PARAMETER_DECL	1202:79	1202:86	3	uint16 tag
TYPE	1202:79	1202:79	4	uint16
TYPE_NAME	1202:79	1202:79	5	uint16
LEAF_NODE	1202:79	1202:79	6	uint16
NAME	1202:86	1202:86	4	tag
LEAF_NODE	1202:86	1202:86	5	tag
LEAF_NODE	1202:89	1202:89	3	,
PARAMETER_DECL	1202:91	1202:97	3	uint8 value
TYPE	1202:91	1202:91	4	uint8
TYPE_NAME	1202:91	1202:91	5	uint8
LEAF_NODE	1202:91	1202:91	6	uint8
NAME	1202:97	1202:97	4	value
LEAF_NODE	1202:97	1202:97	5	value
LEAF_NODE	1202:102	1202:102	3	)
LEAF_NODE	1203:0	1203:0	2	{
STATEMENTS	1204:1	1224:10	2	
LEAF_NODE	1204:1	1204:1	3	static
SIMPLE_DECL	1204:8	1204:66	3	const char [ ] module ; module = "TIFFWriteDirectoryTagBytePerSample" ;
VAR_DECL	1204:8	1204:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagBytePerSample"
TYPE	1204:8	1204:25	5	const char [ ]
TYPE_NAME	1204:8	1204:14	6	const char
LEAF_NODE	1204:8	1204:8	7	const
LEAF_NODE	1204:14	1204:14	7	char
TYPE_SUFFIX	1204:25	1204:26	6	[ ]
LEAF_NODE	1204:25	1204:25	7	[
LEAF_NODE	1204:26	1204:26	7	]
NAME	1204:19	1204:19	5	module
LEAF_NODE	1204:19	1204:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1204:19	1204:19	5	module = "TIFFWriteDirectoryTagBytePerSample"
ASSIGN	1204:19	1204:30	6	module = "TIFFWriteDirectoryTagBytePerSample"
LVAL	1204:19	1204:19	7	module
NAME	1204:19	1204:19	8	module
LEAF_NODE	1204:19	1204:19	9	module
ASSIGN_OP	1204:28	1204:28	7	=
LEAF_NODE	1204:28	1204:28	8	=
RVAL	1204:30	1204:30	7	"TIFFWriteDirectoryTagBytePerSample"
FIELD	1204:30	1204:30	8	"TIFFWriteDirectoryTagBytePerSample"
LEAF_NODE	1204:30	1204:30	9	"TIFFWriteDirectoryTagBytePerSample"
LEAF_NODE	1204:66	1204:66	4	;
SIMPLE_DECL	1205:1	1205:9	3	uint8 * m ;
VAR_DECL	1205:1	1205:8	4	uint8 * m
TYPE	1205:1	1205:6	5	uint8 *
TYPE_NAME	1205:1	1205:1	6	uint8
LEAF_NODE	1205:1	1205:1	7	uint8
POINTER	1205:6	1205:6	6	*
LEAF_NODE	1205:6	1205:6	7	*
NAME	1205:8	1205:8	5	m
LEAF_NODE	1205:8	1205:8	6	m
LEAF_NODE	1205:9	1205:9	4	;
SIMPLE_DECL	1206:1	1206:10	3	uint8 * na ;
VAR_DECL	1206:1	1206:8	4	uint8 * na
TYPE	1206:1	1206:6	5	uint8 *
TYPE_NAME	1206:1	1206:1	6	uint8
LEAF_NODE	1206:1	1206:1	7	uint8
POINTER	1206:6	1206:6	6	*
LEAF_NODE	1206:6	1206:6	7	*
NAME	1206:8	1206:8	5	na
LEAF_NODE	1206:8	1206:8	6	na
LEAF_NODE	1206:10	1206:10	4	;
SIMPLE_DECL	1207:1	1207:10	3	uint16 nb ;
VAR_DECL	1207:1	1207:8	4	uint16 nb
TYPE	1207:1	1207:1	5	uint16
TYPE_NAME	1207:1	1207:1	6	uint16
LEAF_NODE	1207:1	1207:1	7	uint16
NAME	1207:8	1207:8	5	nb
LEAF_NODE	1207:8	1207:8	6	nb
LEAF_NODE	1207:10	1207:10	4	;
SIMPLE_DECL	1208:1	1208:6	3	int o ;
VAR_DECL	1208:1	1208:5	4	int o
TYPE	1208:1	1208:1	5	int
TYPE_NAME	1208:1	1208:1	6	int
LEAF_NODE	1208:1	1208:1	7	int
NAME	1208:5	1208:5	5	o
LEAF_NODE	1208:5	1208:5	6	o
LEAF_NODE	1208:6	1208:6	4	;
SELECTION	1209:1	1210:1	3	
KEYWORD	1209:1	1209:1	4	if
LEAF_NODE	1209:1	1209:1	5	if
LEAF_NODE	1209:4	1209:4	4	(
CONDITION	1209:5	1209:5	4	dir == NULL
EXPR	1209:5	1209:10	5	dir == NULL
FIELD	1209:5	1209:5	6	dir
LEAF_NODE	1209:5	1209:5	7	dir
EQ_OPERATOR	1209:8	1209:8	6	==
LEAF_NODE	1209:8	1209:8	7	==
FIELD	1209:10	1209:10	6	NULL
LEAF_NODE	1209:10	1209:10	7	NULL
LEAF_NODE	1209:14	1209:14	4	)
STATEMENTS	1210:1	1213:1	4	
LEAF_NODE	1210:1	1210:1	5	{
STATEMENTS	1211:2	1212:2	5	
EXPR_STATEMENT	1211:2	1211:11	6	( * ndir ) ++ ;
EXPR	1211:2	1211:9	7	( * ndir ) ++
LEAF_NODE	1211:2	1211:2	8	(
UNARY_EXPR	1211:3	1211:4	8	* ndir
UNARY_OPERATOR	1211:3	1211:3	9	*
LEAF_NODE	1211:3	1211:3	10	*
FIELD	1211:4	1211:4	9	ndir
LEAF_NODE	1211:4	1211:4	10	ndir
LEAF_NODE	1211:8	1211:8	8	)
LEAF_NODE	1211:9	1211:9	8	++
LEAF_NODE	1211:11	1211:11	7	;
JUMP_STATEMENT	1212:2	1212:11	6	return ( 1 ) ;
KEYWORD	1212:2	1212:2	7	return
LEAF_NODE	1212:2	1212:2	8	return
DESTINATION	1212:8	1212:8	7	( 1 )
EXPR	1212:8	1212:10	8	( 1 )
LEAF_NODE	1212:8	1212:8	9	(
FIELD	1212:9	1212:9	9	1
LEAF_NODE	1212:9	1212:9	10	1
LEAF_NODE	1212:10	1212:10	9	)
LEAF_NODE	1212:11	1212:11	7	;
LEAF_NODE	1213:1	1213:1	5	}
EXPR_STATEMENT	1214:1	1214:61	3	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint8 ) ) ;
EXPR	1214:1	1214:1	4	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint8 ) )
ASSIGN	1214:1	1214:3	5	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint8 ) )
LVAL	1214:1	1214:1	6	m
FIELD	1214:1	1214:1	7	m
LEAF_NODE	1214:1	1214:1	8	m
ASSIGN_OP	1214:2	1214:2	6	=
LEAF_NODE	1214:2	1214:2	7	=
RVAL	1214:3	1214:3	6	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint8 ) )
FUNCTION_CALL	1214:3	1214:60	7	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint8 ) )
CALLEE	1214:3	1214:3	8	_TIFFmalloc
LEAF_NODE	1214:3	1214:3	9	_TIFFmalloc
LEAF_NODE	1214:14	1214:14	8	(
ARGUMENT	1214:15	1214:47	8	tif -> tif_dir . td_samplesperpixel * sizeof ( uint8 )
FIELD	1214:15	1214:28	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1214:15	1214:15	10	tif
LEAF_NODE	1214:18	1214:18	10	->
LEAF_NODE	1214:20	1214:20	10	tif_dir
LEAF_NODE	1214:27	1214:27	10	.
LEAF_NODE	1214:28	1214:28	10	td_samplesperpixel
LEAF_NODE	1214:46	1214:46	9	*
FUNCTION_CALL	1214:47	1214:59	9	sizeof ( uint8 )
CALLEE	1214:47	1214:47	10	sizeof
LEAF_NODE	1214:47	1214:47	11	sizeof
LEAF_NODE	1214:53	1214:53	10	(
ARGUMENT	1214:54	1214:54	10	uint8
FIELD	1214:54	1214:54	11	uint8
LEAF_NODE	1214:54	1214:54	12	uint8
LEAF_NODE	1214:59	1214:59	10	)
LEAF_NODE	1214:60	1214:60	8	)
LEAF_NODE	1214:61	1214:61	4	;
SELECTION	1215:1	1216:1	3	
KEYWORD	1215:1	1215:1	4	if
LEAF_NODE	1215:1	1215:1	5	if
LEAF_NODE	1215:4	1215:4	4	(
CONDITION	1215:5	1215:5	4	m == NULL
EXPR	1215:5	1215:8	5	m == NULL
FIELD	1215:5	1215:5	6	m
LEAF_NODE	1215:5	1215:5	7	m
EQ_OPERATOR	1215:6	1215:6	6	==
LEAF_NODE	1215:6	1215:6	7	==
FIELD	1215:8	1215:8	6	NULL
LEAF_NODE	1215:8	1215:8	7	NULL
LEAF_NODE	1215:12	1215:12	4	)
STATEMENTS	1216:1	1219:1	4	
LEAF_NODE	1216:1	1216:1	5	{
STATEMENTS	1217:2	1218:2	5	
EXPR_STATEMENT	1217:2	1217:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1217:2	1217:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1217:2	1217:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1217:2	1217:2	9	TIFFErrorExt
LEAF_NODE	1217:2	1217:2	10	TIFFErrorExt
LEAF_NODE	1217:14	1217:14	9	(
ARGUMENT	1217:15	1217:15	9	tif -> tif_clientdata
FIELD	1217:15	1217:20	10	tif -> tif_clientdata
LEAF_NODE	1217:15	1217:15	11	tif
LEAF_NODE	1217:18	1217:18	11	->
LEAF_NODE	1217:20	1217:20	11	tif_clientdata
LEAF_NODE	1217:34	1217:34	9	,
ARGUMENT	1217:35	1217:35	9	module
FIELD	1217:35	1217:35	10	module
LEAF_NODE	1217:35	1217:35	11	module
LEAF_NODE	1217:41	1217:41	9	,
ARGUMENT	1217:42	1217:42	9	"Out of memory"
FIELD	1217:42	1217:42	10	"Out of memory"
LEAF_NODE	1217:42	1217:42	11	"Out of memory"
LEAF_NODE	1217:57	1217:57	9	)
LEAF_NODE	1217:58	1217:58	7	;
JUMP_STATEMENT	1218:2	1218:11	6	return ( 0 ) ;
KEYWORD	1218:2	1218:2	7	return
LEAF_NODE	1218:2	1218:2	8	return
DESTINATION	1218:8	1218:8	7	( 0 )
EXPR	1218:8	1218:10	8	( 0 )
LEAF_NODE	1218:8	1218:8	9	(
FIELD	1218:9	1218:9	9	0
LEAF_NODE	1218:9	1218:9	10	0
LEAF_NODE	1218:10	1218:10	9	)
LEAF_NODE	1218:11	1218:11	7	;
LEAF_NODE	1219:1	1219:1	5	}
ITERATION	1220:1	1221:2	3	
KEYWORD	1220:1	1220:1	4	for
LEAF_NODE	1220:1	1220:1	5	for
LEAF_NODE	1220:5	1220:5	4	(
FOR_INIT	1220:6	1220:16	4	na = m , nb = 0 ;
EXPR	1220:6	1220:12	5	na = m , nb = 0
ASSIGN	1220:6	1220:9	6	na = m
LVAL	1220:6	1220:6	7	na
FIELD	1220:6	1220:6	8	na
LEAF_NODE	1220:6	1220:6	9	na
ASSIGN_OP	1220:8	1220:8	7	=
LEAF_NODE	1220:8	1220:8	8	=
RVAL	1220:9	1220:9	7	m
FIELD	1220:9	1220:9	8	m
LEAF_NODE	1220:9	1220:9	9	m
LEAF_NODE	1220:10	1220:10	6	,
ASSIGN	1220:12	1220:15	6	nb = 0
LVAL	1220:12	1220:12	7	nb
FIELD	1220:12	1220:12	8	nb
LEAF_NODE	1220:12	1220:12	9	nb
ASSIGN_OP	1220:14	1220:14	7	=
LEAF_NODE	1220:14	1220:14	8	=
RVAL	1220:15	1220:15	7	0
FIELD	1220:15	1220:15	8	0
LEAF_NODE	1220:15	1220:15	9	0
LEAF_NODE	1220:16	1220:16	5	;
CONDITION	1220:18	1220:18	4	nb < tif -> tif_dir . td_samplesperpixel
EXPR	1220:18	1220:21	5	nb < tif -> tif_dir . td_samplesperpixel
FIELD	1220:18	1220:18	6	nb
LEAF_NODE	1220:18	1220:18	7	nb
REL_OPERATOR	1220:20	1220:20	6	<
LEAF_NODE	1220:20	1220:20	7	<
FIELD	1220:21	1220:34	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1220:21	1220:21	7	tif
LEAF_NODE	1220:24	1220:24	7	->
LEAF_NODE	1220:26	1220:26	7	tif_dir
LEAF_NODE	1220:33	1220:33	7	.
LEAF_NODE	1220:34	1220:34	7	td_samplesperpixel
LEAF_NODE	1220:52	1220:52	4	;
FOR_EXPR	1220:54	1220:54	4	na ++ , nb ++
EXPR	1220:54	1220:60	5	na ++ , nb ++
FIELD	1220:54	1220:56	6	na ++
LEAF_NODE	1220:54	1220:54	7	na
LEAF_NODE	1220:56	1220:56	7	++
LEAF_NODE	1220:58	1220:58	6	,
FIELD	1220:60	1220:62	6	nb ++
LEAF_NODE	1220:60	1220:60	7	nb
LEAF_NODE	1220:62	1220:62	7	++
LEAF_NODE	1220:64	1220:64	4	)
STATEMENTS	1221:2	1221:2	4	
EXPR_STATEMENT	1221:2	1221:11	5	* na = value ;
EXPR	1221:2	1221:2	6	* na = value
ASSIGN	1221:2	1221:6	7	* na = value
LVAL	1221:2	1221:2	8	* na
UNARY_EXPR	1221:2	1221:3	9	* na
UNARY_OPERATOR	1221:2	1221:2	10	*
LEAF_NODE	1221:2	1221:2	11	*
FIELD	1221:3	1221:3	10	na
LEAF_NODE	1221:3	1221:3	11	na
ASSIGN_OP	1221:5	1221:5	8	=
LEAF_NODE	1221:5	1221:5	9	=
RVAL	1221:6	1221:6	8	value
FIELD	1221:6	1221:6	9	value
LEAF_NODE	1221:6	1221:6	10	value
LEAF_NODE	1221:11	1221:11	6	;
EXPR_STATEMENT	1222:1	1222:92	3	o = TIFFWriteDirectoryTagCheckedByteArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m ) ;
EXPR	1222:1	1222:1	4	o = TIFFWriteDirectoryTagCheckedByteArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
ASSIGN	1222:1	1222:3	5	o = TIFFWriteDirectoryTagCheckedByteArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
LVAL	1222:1	1222:1	6	o
FIELD	1222:1	1222:1	7	o
LEAF_NODE	1222:1	1222:1	8	o
ASSIGN_OP	1222:2	1222:2	6	=
LEAF_NODE	1222:2	1222:2	7	=
RVAL	1222:3	1222:3	6	TIFFWriteDirectoryTagCheckedByteArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
FUNCTION_CALL	1222:3	1222:91	7	TIFFWriteDirectoryTagCheckedByteArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
CALLEE	1222:3	1222:3	8	TIFFWriteDirectoryTagCheckedByteArray
LEAF_NODE	1222:3	1222:3	9	TIFFWriteDirectoryTagCheckedByteArray
LEAF_NODE	1222:40	1222:40	8	(
ARGUMENT	1222:41	1222:41	8	tif
FIELD	1222:41	1222:41	9	tif
LEAF_NODE	1222:41	1222:41	10	tif
LEAF_NODE	1222:44	1222:44	8	,
ARGUMENT	1222:45	1222:45	8	ndir
FIELD	1222:45	1222:45	9	ndir
LEAF_NODE	1222:45	1222:45	10	ndir
LEAF_NODE	1222:49	1222:49	8	,
ARGUMENT	1222:50	1222:50	8	dir
FIELD	1222:50	1222:50	9	dir
LEAF_NODE	1222:50	1222:50	10	dir
LEAF_NODE	1222:53	1222:53	8	,
ARGUMENT	1222:54	1222:54	8	tag
FIELD	1222:54	1222:54	9	tag
LEAF_NODE	1222:54	1222:54	10	tag
LEAF_NODE	1222:57	1222:57	8	,
ARGUMENT	1222:58	1222:58	8	tif -> tif_dir . td_samplesperpixel
FIELD	1222:58	1222:71	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1222:58	1222:58	10	tif
LEAF_NODE	1222:61	1222:61	10	->
LEAF_NODE	1222:63	1222:63	10	tif_dir
LEAF_NODE	1222:70	1222:70	10	.
LEAF_NODE	1222:71	1222:71	10	td_samplesperpixel
LEAF_NODE	1222:89	1222:89	8	,
ARGUMENT	1222:90	1222:90	8	m
FIELD	1222:90	1222:90	9	m
LEAF_NODE	1222:90	1222:90	10	m
LEAF_NODE	1222:91	1222:91	8	)
LEAF_NODE	1222:92	1222:92	4	;
EXPR_STATEMENT	1223:1	1223:13	3	_TIFFfree ( m ) ;
EXPR	1223:1	1223:1	4	_TIFFfree ( m )
FUNCTION_CALL	1223:1	1223:12	5	_TIFFfree ( m )
CALLEE	1223:1	1223:1	6	_TIFFfree
LEAF_NODE	1223:1	1223:1	7	_TIFFfree
LEAF_NODE	1223:10	1223:10	6	(
ARGUMENT	1223:11	1223:11	6	m
FIELD	1223:11	1223:11	7	m
LEAF_NODE	1223:11	1223:11	8	m
LEAF_NODE	1223:12	1223:12	6	)
LEAF_NODE	1223:13	1223:13	4	;
LEAF_NODE	1224:1	1224:1	3	return
LEAF_NODE	1224:7	1224:7	3	(
LEAF_NODE	1224:8	1224:8	3	o
LEAF_NODE	1224:9	1224:9	3	)
LEAF_NODE	1224:10	1224:10	3	;
LEAF_NODE	1225:0	1225:0	2	}
FUNCTION_DEF	1229:0	1238:0	1	
RETURN_TYPE	1229:0	1229:7	2	static int
LEAF_NODE	1229:0	1229:0	3	static
TYPE_NAME	1229:7	1229:7	3	int
LEAF_NODE	1229:7	1229:7	4	int
FUNCTION_NAME	1230:0	1230:0	2	TIFFWriteDirectoryTagSbyte
LEAF_NODE	1230:0	1230:0	3	TIFFWriteDirectoryTagSbyte
PARAMETER_LIST	1230:26	1230:93	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int8 value )
LEAF_NODE	1230:26	1230:26	3	(
PARAMETER_DECL	1230:27	1230:33	3	TIFF * tif
TYPE	1230:27	1230:31	4	TIFF *
TYPE_NAME	1230:27	1230:27	5	TIFF
LEAF_NODE	1230:27	1230:27	6	TIFF
POINTER	1230:31	1230:31	5	*
LEAF_NODE	1230:31	1230:31	6	*
NAME	1230:33	1230:33	4	tif
LEAF_NODE	1230:33	1230:33	5	tif
LEAF_NODE	1230:36	1230:36	3	,
PARAMETER_DECL	1230:38	1230:46	3	uint32 * ndir
TYPE	1230:38	1230:44	4	uint32 *
TYPE_NAME	1230:38	1230:38	5	uint32
LEAF_NODE	1230:38	1230:38	6	uint32
POINTER	1230:44	1230:44	5	*
LEAF_NODE	1230:44	1230:44	6	*
NAME	1230:46	1230:46	4	ndir
LEAF_NODE	1230:46	1230:46	5	ndir
LEAF_NODE	1230:50	1230:50	3	,
PARAMETER_DECL	1230:52	1230:66	3	TIFFDirEntry * dir
TYPE	1230:52	1230:64	4	TIFFDirEntry *
TYPE_NAME	1230:52	1230:52	5	TIFFDirEntry
LEAF_NODE	1230:52	1230:52	6	TIFFDirEntry
POINTER	1230:64	1230:64	5	*
LEAF_NODE	1230:64	1230:64	6	*
NAME	1230:66	1230:66	4	dir
LEAF_NODE	1230:66	1230:66	5	dir
LEAF_NODE	1230:69	1230:69	3	,
PARAMETER_DECL	1230:71	1230:78	3	uint16 tag
TYPE	1230:71	1230:71	4	uint16
TYPE_NAME	1230:71	1230:71	5	uint16
LEAF_NODE	1230:71	1230:71	6	uint16
NAME	1230:78	1230:78	4	tag
LEAF_NODE	1230:78	1230:78	5	tag
LEAF_NODE	1230:81	1230:81	3	,
PARAMETER_DECL	1230:83	1230:88	3	int8 value
TYPE	1230:83	1230:83	4	int8
TYPE_NAME	1230:83	1230:83	5	int8
LEAF_NODE	1230:83	1230:83	6	int8
NAME	1230:88	1230:88	4	value
LEAF_NODE	1230:88	1230:88	5	value
LEAF_NODE	1230:93	1230:93	3	)
LEAF_NODE	1231:0	1231:0	2	{
STATEMENTS	1232:1	1237:1	2	
SELECTION	1232:1	1233:1	3	
KEYWORD	1232:1	1232:1	4	if
LEAF_NODE	1232:1	1232:1	5	if
LEAF_NODE	1232:4	1232:4	4	(
CONDITION	1232:5	1232:5	4	dir == NULL
EXPR	1232:5	1232:10	5	dir == NULL
FIELD	1232:5	1232:5	6	dir
LEAF_NODE	1232:5	1232:5	7	dir
EQ_OPERATOR	1232:8	1232:8	6	==
LEAF_NODE	1232:8	1232:8	7	==
FIELD	1232:10	1232:10	6	NULL
LEAF_NODE	1232:10	1232:10	7	NULL
LEAF_NODE	1232:14	1232:14	4	)
STATEMENTS	1233:1	1236:1	4	
LEAF_NODE	1233:1	1233:1	5	{
STATEMENTS	1234:2	1235:2	5	
EXPR_STATEMENT	1234:2	1234:11	6	( * ndir ) ++ ;
EXPR	1234:2	1234:9	7	( * ndir ) ++
LEAF_NODE	1234:2	1234:2	8	(
UNARY_EXPR	1234:3	1234:4	8	* ndir
UNARY_OPERATOR	1234:3	1234:3	9	*
LEAF_NODE	1234:3	1234:3	10	*
FIELD	1234:4	1234:4	9	ndir
LEAF_NODE	1234:4	1234:4	10	ndir
LEAF_NODE	1234:8	1234:8	8	)
LEAF_NODE	1234:9	1234:9	8	++
LEAF_NODE	1234:11	1234:11	7	;
JUMP_STATEMENT	1235:2	1235:11	6	return ( 1 ) ;
KEYWORD	1235:2	1235:2	7	return
LEAF_NODE	1235:2	1235:2	8	return
DESTINATION	1235:8	1235:8	7	( 1 )
EXPR	1235:8	1235:10	8	( 1 )
LEAF_NODE	1235:8	1235:8	9	(
FIELD	1235:9	1235:9	9	1
LEAF_NODE	1235:9	1235:9	10	1
LEAF_NODE	1235:10	1235:10	9	)
LEAF_NODE	1235:11	1235:11	7	;
LEAF_NODE	1236:1	1236:1	5	}
JUMP_STATEMENT	1237:1	1237:66	3	return ( TIFFWriteDirectoryTagCheckedSbyte ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1237:1	1237:1	4	return
LEAF_NODE	1237:1	1237:1	5	return
DESTINATION	1237:7	1237:7	4	( TIFFWriteDirectoryTagCheckedSbyte ( tif , ndir , dir , tag , value ) )
EXPR	1237:7	1237:65	5	( TIFFWriteDirectoryTagCheckedSbyte ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1237:7	1237:7	6	(
FUNCTION_CALL	1237:8	1237:64	6	TIFFWriteDirectoryTagCheckedSbyte ( tif , ndir , dir , tag , value )
CALLEE	1237:8	1237:8	7	TIFFWriteDirectoryTagCheckedSbyte
LEAF_NODE	1237:8	1237:8	8	TIFFWriteDirectoryTagCheckedSbyte
LEAF_NODE	1237:41	1237:41	7	(
ARGUMENT	1237:42	1237:42	7	tif
FIELD	1237:42	1237:42	8	tif
LEAF_NODE	1237:42	1237:42	9	tif
LEAF_NODE	1237:45	1237:45	7	,
ARGUMENT	1237:46	1237:46	7	ndir
FIELD	1237:46	1237:46	8	ndir
LEAF_NODE	1237:46	1237:46	9	ndir
LEAF_NODE	1237:50	1237:50	7	,
ARGUMENT	1237:51	1237:51	7	dir
FIELD	1237:51	1237:51	8	dir
LEAF_NODE	1237:51	1237:51	9	dir
LEAF_NODE	1237:54	1237:54	7	,
ARGUMENT	1237:55	1237:55	7	tag
FIELD	1237:55	1237:55	8	tag
LEAF_NODE	1237:55	1237:55	9	tag
LEAF_NODE	1237:58	1237:58	7	,
ARGUMENT	1237:59	1237:59	7	value
FIELD	1237:59	1237:59	8	value
LEAF_NODE	1237:59	1237:59	9	value
LEAF_NODE	1237:64	1237:64	7	)
LEAF_NODE	1237:65	1237:65	6	)
LEAF_NODE	1237:66	1237:66	4	;
LEAF_NODE	1238:0	1238:0	2	}
FUNCTION_DEF	1241:0	1250:0	1	
RETURN_TYPE	1241:0	1241:7	2	static int
LEAF_NODE	1241:0	1241:0	3	static
TYPE_NAME	1241:7	1241:7	3	int
LEAF_NODE	1241:7	1241:7	4	int
FUNCTION_NAME	1242:0	1242:0	2	TIFFWriteDirectoryTagSbyteArray
LEAF_NODE	1242:0	1242:0	3	TIFFWriteDirectoryTagSbyteArray
PARAMETER_LIST	1242:31	1242:113	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , int8 * value )
LEAF_NODE	1242:31	1242:31	3	(
PARAMETER_DECL	1242:32	1242:38	3	TIFF * tif
TYPE	1242:32	1242:36	4	TIFF *
TYPE_NAME	1242:32	1242:32	5	TIFF
LEAF_NODE	1242:32	1242:32	6	TIFF
POINTER	1242:36	1242:36	5	*
LEAF_NODE	1242:36	1242:36	6	*
NAME	1242:38	1242:38	4	tif
LEAF_NODE	1242:38	1242:38	5	tif
LEAF_NODE	1242:41	1242:41	3	,
PARAMETER_DECL	1242:43	1242:51	3	uint32 * ndir
TYPE	1242:43	1242:49	4	uint32 *
TYPE_NAME	1242:43	1242:43	5	uint32
LEAF_NODE	1242:43	1242:43	6	uint32
POINTER	1242:49	1242:49	5	*
LEAF_NODE	1242:49	1242:49	6	*
NAME	1242:51	1242:51	4	ndir
LEAF_NODE	1242:51	1242:51	5	ndir
LEAF_NODE	1242:55	1242:55	3	,
PARAMETER_DECL	1242:57	1242:71	3	TIFFDirEntry * dir
TYPE	1242:57	1242:69	4	TIFFDirEntry *
TYPE_NAME	1242:57	1242:57	5	TIFFDirEntry
LEAF_NODE	1242:57	1242:57	6	TIFFDirEntry
POINTER	1242:69	1242:69	5	*
LEAF_NODE	1242:69	1242:69	6	*
NAME	1242:71	1242:71	4	dir
LEAF_NODE	1242:71	1242:71	5	dir
LEAF_NODE	1242:74	1242:74	3	,
PARAMETER_DECL	1242:76	1242:83	3	uint16 tag
TYPE	1242:76	1242:76	4	uint16
TYPE_NAME	1242:76	1242:76	5	uint16
LEAF_NODE	1242:76	1242:76	6	uint16
NAME	1242:83	1242:83	4	tag
LEAF_NODE	1242:83	1242:83	5	tag
LEAF_NODE	1242:86	1242:86	3	,
PARAMETER_DECL	1242:88	1242:95	3	uint32 count
TYPE	1242:88	1242:88	4	uint32
TYPE_NAME	1242:88	1242:88	5	uint32
LEAF_NODE	1242:88	1242:88	6	uint32
NAME	1242:95	1242:95	4	count
LEAF_NODE	1242:95	1242:95	5	count
LEAF_NODE	1242:100	1242:100	3	,
PARAMETER_DECL	1242:102	1242:108	3	int8 * value
TYPE	1242:102	1242:106	4	int8 *
TYPE_NAME	1242:102	1242:102	5	int8
LEAF_NODE	1242:102	1242:102	6	int8
POINTER	1242:106	1242:106	5	*
LEAF_NODE	1242:106	1242:106	6	*
NAME	1242:108	1242:108	4	value
LEAF_NODE	1242:108	1242:108	5	value
LEAF_NODE	1242:113	1242:113	3	)
LEAF_NODE	1243:0	1243:0	2	{
STATEMENTS	1244:1	1249:1	2	
SELECTION	1244:1	1245:1	3	
KEYWORD	1244:1	1244:1	4	if
LEAF_NODE	1244:1	1244:1	5	if
LEAF_NODE	1244:4	1244:4	4	(
CONDITION	1244:5	1244:5	4	dir == NULL
EXPR	1244:5	1244:10	5	dir == NULL
FIELD	1244:5	1244:5	6	dir
LEAF_NODE	1244:5	1244:5	7	dir
EQ_OPERATOR	1244:8	1244:8	6	==
LEAF_NODE	1244:8	1244:8	7	==
FIELD	1244:10	1244:10	6	NULL
LEAF_NODE	1244:10	1244:10	7	NULL
LEAF_NODE	1244:14	1244:14	4	)
STATEMENTS	1245:1	1248:1	4	
LEAF_NODE	1245:1	1245:1	5	{
STATEMENTS	1246:2	1247:2	5	
EXPR_STATEMENT	1246:2	1246:11	6	( * ndir ) ++ ;
EXPR	1246:2	1246:9	7	( * ndir ) ++
LEAF_NODE	1246:2	1246:2	8	(
UNARY_EXPR	1246:3	1246:4	8	* ndir
UNARY_OPERATOR	1246:3	1246:3	9	*
LEAF_NODE	1246:3	1246:3	10	*
FIELD	1246:4	1246:4	9	ndir
LEAF_NODE	1246:4	1246:4	10	ndir
LEAF_NODE	1246:8	1246:8	8	)
LEAF_NODE	1246:9	1246:9	8	++
LEAF_NODE	1246:11	1246:11	7	;
JUMP_STATEMENT	1247:2	1247:11	6	return ( 1 ) ;
KEYWORD	1247:2	1247:2	7	return
LEAF_NODE	1247:2	1247:2	8	return
DESTINATION	1247:8	1247:8	7	( 1 )
EXPR	1247:8	1247:10	8	( 1 )
LEAF_NODE	1247:8	1247:8	9	(
FIELD	1247:9	1247:9	9	1
LEAF_NODE	1247:9	1247:9	10	1
LEAF_NODE	1247:10	1247:10	9	)
LEAF_NODE	1247:11	1247:11	7	;
LEAF_NODE	1248:1	1248:1	5	}
JUMP_STATEMENT	1249:1	1249:77	3	return ( TIFFWriteDirectoryTagCheckedSbyteArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1249:1	1249:1	4	return
LEAF_NODE	1249:1	1249:1	5	return
DESTINATION	1249:7	1249:7	4	( TIFFWriteDirectoryTagCheckedSbyteArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1249:7	1249:76	5	( TIFFWriteDirectoryTagCheckedSbyteArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1249:7	1249:7	6	(
FUNCTION_CALL	1249:8	1249:75	6	TIFFWriteDirectoryTagCheckedSbyteArray ( tif , ndir , dir , tag , count , value )
CALLEE	1249:8	1249:8	7	TIFFWriteDirectoryTagCheckedSbyteArray
LEAF_NODE	1249:8	1249:8	8	TIFFWriteDirectoryTagCheckedSbyteArray
LEAF_NODE	1249:46	1249:46	7	(
ARGUMENT	1249:47	1249:47	7	tif
FIELD	1249:47	1249:47	8	tif
LEAF_NODE	1249:47	1249:47	9	tif
LEAF_NODE	1249:50	1249:50	7	,
ARGUMENT	1249:51	1249:51	7	ndir
FIELD	1249:51	1249:51	8	ndir
LEAF_NODE	1249:51	1249:51	9	ndir
LEAF_NODE	1249:55	1249:55	7	,
ARGUMENT	1249:56	1249:56	7	dir
FIELD	1249:56	1249:56	8	dir
LEAF_NODE	1249:56	1249:56	9	dir
LEAF_NODE	1249:59	1249:59	7	,
ARGUMENT	1249:60	1249:60	7	tag
FIELD	1249:60	1249:60	8	tag
LEAF_NODE	1249:60	1249:60	9	tag
LEAF_NODE	1249:63	1249:63	7	,
ARGUMENT	1249:64	1249:64	7	count
FIELD	1249:64	1249:64	8	count
LEAF_NODE	1249:64	1249:64	9	count
LEAF_NODE	1249:69	1249:69	7	,
ARGUMENT	1249:70	1249:70	7	value
FIELD	1249:70	1249:70	8	value
LEAF_NODE	1249:70	1249:70	9	value
LEAF_NODE	1249:75	1249:75	7	)
LEAF_NODE	1249:76	1249:76	6	)
LEAF_NODE	1249:77	1249:77	4	;
LEAF_NODE	1250:0	1250:0	2	}
FUNCTION_DEF	1253:0	1277:0	1	
RETURN_TYPE	1253:0	1253:7	2	static int
LEAF_NODE	1253:0	1253:0	3	static
TYPE_NAME	1253:7	1253:7	3	int
LEAF_NODE	1253:7	1253:7	4	int
FUNCTION_NAME	1254:0	1254:0	2	TIFFWriteDirectoryTagSbytePerSample
LEAF_NODE	1254:0	1254:0	3	TIFFWriteDirectoryTagSbytePerSample
PARAMETER_LIST	1254:35	1254:102	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int8 value )
LEAF_NODE	1254:35	1254:35	3	(
PARAMETER_DECL	1254:36	1254:42	3	TIFF * tif
TYPE	1254:36	1254:40	4	TIFF *
TYPE_NAME	1254:36	1254:36	5	TIFF
LEAF_NODE	1254:36	1254:36	6	TIFF
POINTER	1254:40	1254:40	5	*
LEAF_NODE	1254:40	1254:40	6	*
NAME	1254:42	1254:42	4	tif
LEAF_NODE	1254:42	1254:42	5	tif
LEAF_NODE	1254:45	1254:45	3	,
PARAMETER_DECL	1254:47	1254:55	3	uint32 * ndir
TYPE	1254:47	1254:53	4	uint32 *
TYPE_NAME	1254:47	1254:47	5	uint32
LEAF_NODE	1254:47	1254:47	6	uint32
POINTER	1254:53	1254:53	5	*
LEAF_NODE	1254:53	1254:53	6	*
NAME	1254:55	1254:55	4	ndir
LEAF_NODE	1254:55	1254:55	5	ndir
LEAF_NODE	1254:59	1254:59	3	,
PARAMETER_DECL	1254:61	1254:75	3	TIFFDirEntry * dir
TYPE	1254:61	1254:73	4	TIFFDirEntry *
TYPE_NAME	1254:61	1254:61	5	TIFFDirEntry
LEAF_NODE	1254:61	1254:61	6	TIFFDirEntry
POINTER	1254:73	1254:73	5	*
LEAF_NODE	1254:73	1254:73	6	*
NAME	1254:75	1254:75	4	dir
LEAF_NODE	1254:75	1254:75	5	dir
LEAF_NODE	1254:78	1254:78	3	,
PARAMETER_DECL	1254:80	1254:87	3	uint16 tag
TYPE	1254:80	1254:80	4	uint16
TYPE_NAME	1254:80	1254:80	5	uint16
LEAF_NODE	1254:80	1254:80	6	uint16
NAME	1254:87	1254:87	4	tag
LEAF_NODE	1254:87	1254:87	5	tag
LEAF_NODE	1254:90	1254:90	3	,
PARAMETER_DECL	1254:92	1254:97	3	int8 value
TYPE	1254:92	1254:92	4	int8
TYPE_NAME	1254:92	1254:92	5	int8
LEAF_NODE	1254:92	1254:92	6	int8
NAME	1254:97	1254:97	4	value
LEAF_NODE	1254:97	1254:97	5	value
LEAF_NODE	1254:102	1254:102	3	)
LEAF_NODE	1255:0	1255:0	2	{
STATEMENTS	1256:1	1276:10	2	
LEAF_NODE	1256:1	1256:1	3	static
SIMPLE_DECL	1256:8	1256:67	3	const char [ ] module ; module = "TIFFWriteDirectoryTagSbytePerSample" ;
VAR_DECL	1256:8	1256:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagSbytePerSample"
TYPE	1256:8	1256:25	5	const char [ ]
TYPE_NAME	1256:8	1256:14	6	const char
LEAF_NODE	1256:8	1256:8	7	const
LEAF_NODE	1256:14	1256:14	7	char
TYPE_SUFFIX	1256:25	1256:26	6	[ ]
LEAF_NODE	1256:25	1256:25	7	[
LEAF_NODE	1256:26	1256:26	7	]
NAME	1256:19	1256:19	5	module
LEAF_NODE	1256:19	1256:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1256:19	1256:19	5	module = "TIFFWriteDirectoryTagSbytePerSample"
ASSIGN	1256:19	1256:30	6	module = "TIFFWriteDirectoryTagSbytePerSample"
LVAL	1256:19	1256:19	7	module
NAME	1256:19	1256:19	8	module
LEAF_NODE	1256:19	1256:19	9	module
ASSIGN_OP	1256:28	1256:28	7	=
LEAF_NODE	1256:28	1256:28	8	=
RVAL	1256:30	1256:30	7	"TIFFWriteDirectoryTagSbytePerSample"
FIELD	1256:30	1256:30	8	"TIFFWriteDirectoryTagSbytePerSample"
LEAF_NODE	1256:30	1256:30	9	"TIFFWriteDirectoryTagSbytePerSample"
LEAF_NODE	1256:67	1256:67	4	;
SIMPLE_DECL	1257:1	1257:8	3	int8 * m ;
VAR_DECL	1257:1	1257:7	4	int8 * m
TYPE	1257:1	1257:5	5	int8 *
TYPE_NAME	1257:1	1257:1	6	int8
LEAF_NODE	1257:1	1257:1	7	int8
POINTER	1257:5	1257:5	6	*
LEAF_NODE	1257:5	1257:5	7	*
NAME	1257:7	1257:7	5	m
LEAF_NODE	1257:7	1257:7	6	m
LEAF_NODE	1257:8	1257:8	4	;
SIMPLE_DECL	1258:1	1258:9	3	int8 * na ;
VAR_DECL	1258:1	1258:7	4	int8 * na
TYPE	1258:1	1258:5	5	int8 *
TYPE_NAME	1258:1	1258:1	6	int8
LEAF_NODE	1258:1	1258:1	7	int8
POINTER	1258:5	1258:5	6	*
LEAF_NODE	1258:5	1258:5	7	*
NAME	1258:7	1258:7	5	na
LEAF_NODE	1258:7	1258:7	6	na
LEAF_NODE	1258:9	1258:9	4	;
SIMPLE_DECL	1259:1	1259:10	3	uint16 nb ;
VAR_DECL	1259:1	1259:8	4	uint16 nb
TYPE	1259:1	1259:1	5	uint16
TYPE_NAME	1259:1	1259:1	6	uint16
LEAF_NODE	1259:1	1259:1	7	uint16
NAME	1259:8	1259:8	5	nb
LEAF_NODE	1259:8	1259:8	6	nb
LEAF_NODE	1259:10	1259:10	4	;
SIMPLE_DECL	1260:1	1260:6	3	int o ;
VAR_DECL	1260:1	1260:5	4	int o
TYPE	1260:1	1260:1	5	int
TYPE_NAME	1260:1	1260:1	6	int
LEAF_NODE	1260:1	1260:1	7	int
NAME	1260:5	1260:5	5	o
LEAF_NODE	1260:5	1260:5	6	o
LEAF_NODE	1260:6	1260:6	4	;
SELECTION	1261:1	1262:1	3	
KEYWORD	1261:1	1261:1	4	if
LEAF_NODE	1261:1	1261:1	5	if
LEAF_NODE	1261:4	1261:4	4	(
CONDITION	1261:5	1261:5	4	dir == NULL
EXPR	1261:5	1261:10	5	dir == NULL
FIELD	1261:5	1261:5	6	dir
LEAF_NODE	1261:5	1261:5	7	dir
EQ_OPERATOR	1261:8	1261:8	6	==
LEAF_NODE	1261:8	1261:8	7	==
FIELD	1261:10	1261:10	6	NULL
LEAF_NODE	1261:10	1261:10	7	NULL
LEAF_NODE	1261:14	1261:14	4	)
STATEMENTS	1262:1	1265:1	4	
LEAF_NODE	1262:1	1262:1	5	{
STATEMENTS	1263:2	1264:2	5	
EXPR_STATEMENT	1263:2	1263:11	6	( * ndir ) ++ ;
EXPR	1263:2	1263:9	7	( * ndir ) ++
LEAF_NODE	1263:2	1263:2	8	(
UNARY_EXPR	1263:3	1263:4	8	* ndir
UNARY_OPERATOR	1263:3	1263:3	9	*
LEAF_NODE	1263:3	1263:3	10	*
FIELD	1263:4	1263:4	9	ndir
LEAF_NODE	1263:4	1263:4	10	ndir
LEAF_NODE	1263:8	1263:8	8	)
LEAF_NODE	1263:9	1263:9	8	++
LEAF_NODE	1263:11	1263:11	7	;
JUMP_STATEMENT	1264:2	1264:11	6	return ( 1 ) ;
KEYWORD	1264:2	1264:2	7	return
LEAF_NODE	1264:2	1264:2	8	return
DESTINATION	1264:8	1264:8	7	( 1 )
EXPR	1264:8	1264:10	8	( 1 )
LEAF_NODE	1264:8	1264:8	9	(
FIELD	1264:9	1264:9	9	1
LEAF_NODE	1264:9	1264:9	10	1
LEAF_NODE	1264:10	1264:10	9	)
LEAF_NODE	1264:11	1264:11	7	;
LEAF_NODE	1265:1	1265:1	5	}
EXPR_STATEMENT	1266:1	1266:60	3	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int8 ) ) ;
EXPR	1266:1	1266:1	4	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int8 ) )
ASSIGN	1266:1	1266:3	5	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int8 ) )
LVAL	1266:1	1266:1	6	m
FIELD	1266:1	1266:1	7	m
LEAF_NODE	1266:1	1266:1	8	m
ASSIGN_OP	1266:2	1266:2	6	=
LEAF_NODE	1266:2	1266:2	7	=
RVAL	1266:3	1266:3	6	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int8 ) )
FUNCTION_CALL	1266:3	1266:59	7	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int8 ) )
CALLEE	1266:3	1266:3	8	_TIFFmalloc
LEAF_NODE	1266:3	1266:3	9	_TIFFmalloc
LEAF_NODE	1266:14	1266:14	8	(
ARGUMENT	1266:15	1266:47	8	tif -> tif_dir . td_samplesperpixel * sizeof ( int8 )
FIELD	1266:15	1266:28	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1266:15	1266:15	10	tif
LEAF_NODE	1266:18	1266:18	10	->
LEAF_NODE	1266:20	1266:20	10	tif_dir
LEAF_NODE	1266:27	1266:27	10	.
LEAF_NODE	1266:28	1266:28	10	td_samplesperpixel
LEAF_NODE	1266:46	1266:46	9	*
FUNCTION_CALL	1266:47	1266:58	9	sizeof ( int8 )
CALLEE	1266:47	1266:47	10	sizeof
LEAF_NODE	1266:47	1266:47	11	sizeof
LEAF_NODE	1266:53	1266:53	10	(
ARGUMENT	1266:54	1266:54	10	int8
FIELD	1266:54	1266:54	11	int8
LEAF_NODE	1266:54	1266:54	12	int8
LEAF_NODE	1266:58	1266:58	10	)
LEAF_NODE	1266:59	1266:59	8	)
LEAF_NODE	1266:60	1266:60	4	;
SELECTION	1267:1	1268:1	3	
KEYWORD	1267:1	1267:1	4	if
LEAF_NODE	1267:1	1267:1	5	if
LEAF_NODE	1267:4	1267:4	4	(
CONDITION	1267:5	1267:5	4	m == NULL
EXPR	1267:5	1267:8	5	m == NULL
FIELD	1267:5	1267:5	6	m
LEAF_NODE	1267:5	1267:5	7	m
EQ_OPERATOR	1267:6	1267:6	6	==
LEAF_NODE	1267:6	1267:6	7	==
FIELD	1267:8	1267:8	6	NULL
LEAF_NODE	1267:8	1267:8	7	NULL
LEAF_NODE	1267:12	1267:12	4	)
STATEMENTS	1268:1	1271:1	4	
LEAF_NODE	1268:1	1268:1	5	{
STATEMENTS	1269:2	1270:2	5	
EXPR_STATEMENT	1269:2	1269:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1269:2	1269:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1269:2	1269:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1269:2	1269:2	9	TIFFErrorExt
LEAF_NODE	1269:2	1269:2	10	TIFFErrorExt
LEAF_NODE	1269:14	1269:14	9	(
ARGUMENT	1269:15	1269:15	9	tif -> tif_clientdata
FIELD	1269:15	1269:20	10	tif -> tif_clientdata
LEAF_NODE	1269:15	1269:15	11	tif
LEAF_NODE	1269:18	1269:18	11	->
LEAF_NODE	1269:20	1269:20	11	tif_clientdata
LEAF_NODE	1269:34	1269:34	9	,
ARGUMENT	1269:35	1269:35	9	module
FIELD	1269:35	1269:35	10	module
LEAF_NODE	1269:35	1269:35	11	module
LEAF_NODE	1269:41	1269:41	9	,
ARGUMENT	1269:42	1269:42	9	"Out of memory"
FIELD	1269:42	1269:42	10	"Out of memory"
LEAF_NODE	1269:42	1269:42	11	"Out of memory"
LEAF_NODE	1269:57	1269:57	9	)
LEAF_NODE	1269:58	1269:58	7	;
JUMP_STATEMENT	1270:2	1270:11	6	return ( 0 ) ;
KEYWORD	1270:2	1270:2	7	return
LEAF_NODE	1270:2	1270:2	8	return
DESTINATION	1270:8	1270:8	7	( 0 )
EXPR	1270:8	1270:10	8	( 0 )
LEAF_NODE	1270:8	1270:8	9	(
FIELD	1270:9	1270:9	9	0
LEAF_NODE	1270:9	1270:9	10	0
LEAF_NODE	1270:10	1270:10	9	)
LEAF_NODE	1270:11	1270:11	7	;
LEAF_NODE	1271:1	1271:1	5	}
ITERATION	1272:1	1273:2	3	
KEYWORD	1272:1	1272:1	4	for
LEAF_NODE	1272:1	1272:1	5	for
LEAF_NODE	1272:5	1272:5	4	(
FOR_INIT	1272:6	1272:16	4	na = m , nb = 0 ;
EXPR	1272:6	1272:12	5	na = m , nb = 0
ASSIGN	1272:6	1272:9	6	na = m
LVAL	1272:6	1272:6	7	na
FIELD	1272:6	1272:6	8	na
LEAF_NODE	1272:6	1272:6	9	na
ASSIGN_OP	1272:8	1272:8	7	=
LEAF_NODE	1272:8	1272:8	8	=
RVAL	1272:9	1272:9	7	m
FIELD	1272:9	1272:9	8	m
LEAF_NODE	1272:9	1272:9	9	m
LEAF_NODE	1272:10	1272:10	6	,
ASSIGN	1272:12	1272:15	6	nb = 0
LVAL	1272:12	1272:12	7	nb
FIELD	1272:12	1272:12	8	nb
LEAF_NODE	1272:12	1272:12	9	nb
ASSIGN_OP	1272:14	1272:14	7	=
LEAF_NODE	1272:14	1272:14	8	=
RVAL	1272:15	1272:15	7	0
FIELD	1272:15	1272:15	8	0
LEAF_NODE	1272:15	1272:15	9	0
LEAF_NODE	1272:16	1272:16	5	;
CONDITION	1272:18	1272:18	4	nb < tif -> tif_dir . td_samplesperpixel
EXPR	1272:18	1272:21	5	nb < tif -> tif_dir . td_samplesperpixel
FIELD	1272:18	1272:18	6	nb
LEAF_NODE	1272:18	1272:18	7	nb
REL_OPERATOR	1272:20	1272:20	6	<
LEAF_NODE	1272:20	1272:20	7	<
FIELD	1272:21	1272:34	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1272:21	1272:21	7	tif
LEAF_NODE	1272:24	1272:24	7	->
LEAF_NODE	1272:26	1272:26	7	tif_dir
LEAF_NODE	1272:33	1272:33	7	.
LEAF_NODE	1272:34	1272:34	7	td_samplesperpixel
LEAF_NODE	1272:52	1272:52	4	;
FOR_EXPR	1272:54	1272:54	4	na ++ , nb ++
EXPR	1272:54	1272:60	5	na ++ , nb ++
FIELD	1272:54	1272:56	6	na ++
LEAF_NODE	1272:54	1272:54	7	na
LEAF_NODE	1272:56	1272:56	7	++
LEAF_NODE	1272:58	1272:58	6	,
FIELD	1272:60	1272:62	6	nb ++
LEAF_NODE	1272:60	1272:60	7	nb
LEAF_NODE	1272:62	1272:62	7	++
LEAF_NODE	1272:64	1272:64	4	)
STATEMENTS	1273:2	1273:2	4	
EXPR_STATEMENT	1273:2	1273:11	5	* na = value ;
EXPR	1273:2	1273:2	6	* na = value
ASSIGN	1273:2	1273:6	7	* na = value
LVAL	1273:2	1273:2	8	* na
UNARY_EXPR	1273:2	1273:3	9	* na
UNARY_OPERATOR	1273:2	1273:2	10	*
LEAF_NODE	1273:2	1273:2	11	*
FIELD	1273:3	1273:3	10	na
LEAF_NODE	1273:3	1273:3	11	na
ASSIGN_OP	1273:5	1273:5	8	=
LEAF_NODE	1273:5	1273:5	9	=
RVAL	1273:6	1273:6	8	value
FIELD	1273:6	1273:6	9	value
LEAF_NODE	1273:6	1273:6	10	value
LEAF_NODE	1273:11	1273:11	6	;
EXPR_STATEMENT	1274:1	1274:93	3	o = TIFFWriteDirectoryTagCheckedSbyteArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m ) ;
EXPR	1274:1	1274:1	4	o = TIFFWriteDirectoryTagCheckedSbyteArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
ASSIGN	1274:1	1274:3	5	o = TIFFWriteDirectoryTagCheckedSbyteArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
LVAL	1274:1	1274:1	6	o
FIELD	1274:1	1274:1	7	o
LEAF_NODE	1274:1	1274:1	8	o
ASSIGN_OP	1274:2	1274:2	6	=
LEAF_NODE	1274:2	1274:2	7	=
RVAL	1274:3	1274:3	6	TIFFWriteDirectoryTagCheckedSbyteArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
FUNCTION_CALL	1274:3	1274:92	7	TIFFWriteDirectoryTagCheckedSbyteArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
CALLEE	1274:3	1274:3	8	TIFFWriteDirectoryTagCheckedSbyteArray
LEAF_NODE	1274:3	1274:3	9	TIFFWriteDirectoryTagCheckedSbyteArray
LEAF_NODE	1274:41	1274:41	8	(
ARGUMENT	1274:42	1274:42	8	tif
FIELD	1274:42	1274:42	9	tif
LEAF_NODE	1274:42	1274:42	10	tif
LEAF_NODE	1274:45	1274:45	8	,
ARGUMENT	1274:46	1274:46	8	ndir
FIELD	1274:46	1274:46	9	ndir
LEAF_NODE	1274:46	1274:46	10	ndir
LEAF_NODE	1274:50	1274:50	8	,
ARGUMENT	1274:51	1274:51	8	dir
FIELD	1274:51	1274:51	9	dir
LEAF_NODE	1274:51	1274:51	10	dir
LEAF_NODE	1274:54	1274:54	8	,
ARGUMENT	1274:55	1274:55	8	tag
FIELD	1274:55	1274:55	9	tag
LEAF_NODE	1274:55	1274:55	10	tag
LEAF_NODE	1274:58	1274:58	8	,
ARGUMENT	1274:59	1274:59	8	tif -> tif_dir . td_samplesperpixel
FIELD	1274:59	1274:72	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1274:59	1274:59	10	tif
LEAF_NODE	1274:62	1274:62	10	->
LEAF_NODE	1274:64	1274:64	10	tif_dir
LEAF_NODE	1274:71	1274:71	10	.
LEAF_NODE	1274:72	1274:72	10	td_samplesperpixel
LEAF_NODE	1274:90	1274:90	8	,
ARGUMENT	1274:91	1274:91	8	m
FIELD	1274:91	1274:91	9	m
LEAF_NODE	1274:91	1274:91	10	m
LEAF_NODE	1274:92	1274:92	8	)
LEAF_NODE	1274:93	1274:93	4	;
EXPR_STATEMENT	1275:1	1275:13	3	_TIFFfree ( m ) ;
EXPR	1275:1	1275:1	4	_TIFFfree ( m )
FUNCTION_CALL	1275:1	1275:12	5	_TIFFfree ( m )
CALLEE	1275:1	1275:1	6	_TIFFfree
LEAF_NODE	1275:1	1275:1	7	_TIFFfree
LEAF_NODE	1275:10	1275:10	6	(
ARGUMENT	1275:11	1275:11	6	m
FIELD	1275:11	1275:11	7	m
LEAF_NODE	1275:11	1275:11	8	m
LEAF_NODE	1275:12	1275:12	6	)
LEAF_NODE	1275:13	1275:13	4	;
LEAF_NODE	1276:1	1276:1	3	return
LEAF_NODE	1276:7	1276:7	3	(
LEAF_NODE	1276:8	1276:8	3	o
LEAF_NODE	1276:9	1276:9	3	)
LEAF_NODE	1276:10	1276:10	3	;
LEAF_NODE	1277:0	1277:0	2	}
FUNCTION_DEF	1280:0	1289:0	1	
RETURN_TYPE	1280:0	1280:7	2	static int
LEAF_NODE	1280:0	1280:0	3	static
TYPE_NAME	1280:7	1280:7	3	int
LEAF_NODE	1280:7	1280:7	4	int
FUNCTION_NAME	1281:0	1281:0	2	TIFFWriteDirectoryTagShort
LEAF_NODE	1281:0	1281:0	3	TIFFWriteDirectoryTagShort
PARAMETER_LIST	1281:26	1281:95	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint16 value )
LEAF_NODE	1281:26	1281:26	3	(
PARAMETER_DECL	1281:27	1281:33	3	TIFF * tif
TYPE	1281:27	1281:31	4	TIFF *
TYPE_NAME	1281:27	1281:27	5	TIFF
LEAF_NODE	1281:27	1281:27	6	TIFF
POINTER	1281:31	1281:31	5	*
LEAF_NODE	1281:31	1281:31	6	*
NAME	1281:33	1281:33	4	tif
LEAF_NODE	1281:33	1281:33	5	tif
LEAF_NODE	1281:36	1281:36	3	,
PARAMETER_DECL	1281:38	1281:46	3	uint32 * ndir
TYPE	1281:38	1281:44	4	uint32 *
TYPE_NAME	1281:38	1281:38	5	uint32
LEAF_NODE	1281:38	1281:38	6	uint32
POINTER	1281:44	1281:44	5	*
LEAF_NODE	1281:44	1281:44	6	*
NAME	1281:46	1281:46	4	ndir
LEAF_NODE	1281:46	1281:46	5	ndir
LEAF_NODE	1281:50	1281:50	3	,
PARAMETER_DECL	1281:52	1281:66	3	TIFFDirEntry * dir
TYPE	1281:52	1281:64	4	TIFFDirEntry *
TYPE_NAME	1281:52	1281:52	5	TIFFDirEntry
LEAF_NODE	1281:52	1281:52	6	TIFFDirEntry
POINTER	1281:64	1281:64	5	*
LEAF_NODE	1281:64	1281:64	6	*
NAME	1281:66	1281:66	4	dir
LEAF_NODE	1281:66	1281:66	5	dir
LEAF_NODE	1281:69	1281:69	3	,
PARAMETER_DECL	1281:71	1281:78	3	uint16 tag
TYPE	1281:71	1281:71	4	uint16
TYPE_NAME	1281:71	1281:71	5	uint16
LEAF_NODE	1281:71	1281:71	6	uint16
NAME	1281:78	1281:78	4	tag
LEAF_NODE	1281:78	1281:78	5	tag
LEAF_NODE	1281:81	1281:81	3	,
PARAMETER_DECL	1281:83	1281:90	3	uint16 value
TYPE	1281:83	1281:83	4	uint16
TYPE_NAME	1281:83	1281:83	5	uint16
LEAF_NODE	1281:83	1281:83	6	uint16
NAME	1281:90	1281:90	4	value
LEAF_NODE	1281:90	1281:90	5	value
LEAF_NODE	1281:95	1281:95	3	)
LEAF_NODE	1282:0	1282:0	2	{
STATEMENTS	1283:1	1288:1	2	
SELECTION	1283:1	1284:1	3	
KEYWORD	1283:1	1283:1	4	if
LEAF_NODE	1283:1	1283:1	5	if
LEAF_NODE	1283:4	1283:4	4	(
CONDITION	1283:5	1283:5	4	dir == NULL
EXPR	1283:5	1283:10	5	dir == NULL
FIELD	1283:5	1283:5	6	dir
LEAF_NODE	1283:5	1283:5	7	dir
EQ_OPERATOR	1283:8	1283:8	6	==
LEAF_NODE	1283:8	1283:8	7	==
FIELD	1283:10	1283:10	6	NULL
LEAF_NODE	1283:10	1283:10	7	NULL
LEAF_NODE	1283:14	1283:14	4	)
STATEMENTS	1284:1	1287:1	4	
LEAF_NODE	1284:1	1284:1	5	{
STATEMENTS	1285:2	1286:2	5	
EXPR_STATEMENT	1285:2	1285:11	6	( * ndir ) ++ ;
EXPR	1285:2	1285:9	7	( * ndir ) ++
LEAF_NODE	1285:2	1285:2	8	(
UNARY_EXPR	1285:3	1285:4	8	* ndir
UNARY_OPERATOR	1285:3	1285:3	9	*
LEAF_NODE	1285:3	1285:3	10	*
FIELD	1285:4	1285:4	9	ndir
LEAF_NODE	1285:4	1285:4	10	ndir
LEAF_NODE	1285:8	1285:8	8	)
LEAF_NODE	1285:9	1285:9	8	++
LEAF_NODE	1285:11	1285:11	7	;
JUMP_STATEMENT	1286:2	1286:11	6	return ( 1 ) ;
KEYWORD	1286:2	1286:2	7	return
LEAF_NODE	1286:2	1286:2	8	return
DESTINATION	1286:8	1286:8	7	( 1 )
EXPR	1286:8	1286:10	8	( 1 )
LEAF_NODE	1286:8	1286:8	9	(
FIELD	1286:9	1286:9	9	1
LEAF_NODE	1286:9	1286:9	10	1
LEAF_NODE	1286:10	1286:10	9	)
LEAF_NODE	1286:11	1286:11	7	;
LEAF_NODE	1287:1	1287:1	5	}
JUMP_STATEMENT	1288:1	1288:66	3	return ( TIFFWriteDirectoryTagCheckedShort ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1288:1	1288:1	4	return
LEAF_NODE	1288:1	1288:1	5	return
DESTINATION	1288:7	1288:7	4	( TIFFWriteDirectoryTagCheckedShort ( tif , ndir , dir , tag , value ) )
EXPR	1288:7	1288:65	5	( TIFFWriteDirectoryTagCheckedShort ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1288:7	1288:7	6	(
FUNCTION_CALL	1288:8	1288:64	6	TIFFWriteDirectoryTagCheckedShort ( tif , ndir , dir , tag , value )
CALLEE	1288:8	1288:8	7	TIFFWriteDirectoryTagCheckedShort
LEAF_NODE	1288:8	1288:8	8	TIFFWriteDirectoryTagCheckedShort
LEAF_NODE	1288:41	1288:41	7	(
ARGUMENT	1288:42	1288:42	7	tif
FIELD	1288:42	1288:42	8	tif
LEAF_NODE	1288:42	1288:42	9	tif
LEAF_NODE	1288:45	1288:45	7	,
ARGUMENT	1288:46	1288:46	7	ndir
FIELD	1288:46	1288:46	8	ndir
LEAF_NODE	1288:46	1288:46	9	ndir
LEAF_NODE	1288:50	1288:50	7	,
ARGUMENT	1288:51	1288:51	7	dir
FIELD	1288:51	1288:51	8	dir
LEAF_NODE	1288:51	1288:51	9	dir
LEAF_NODE	1288:54	1288:54	7	,
ARGUMENT	1288:55	1288:55	7	tag
FIELD	1288:55	1288:55	8	tag
LEAF_NODE	1288:55	1288:55	9	tag
LEAF_NODE	1288:58	1288:58	7	,
ARGUMENT	1288:59	1288:59	7	value
FIELD	1288:59	1288:59	8	value
LEAF_NODE	1288:59	1288:59	9	value
LEAF_NODE	1288:64	1288:64	7	)
LEAF_NODE	1288:65	1288:65	6	)
LEAF_NODE	1288:66	1288:66	4	;
LEAF_NODE	1289:0	1289:0	2	}
FUNCTION_DEF	1291:0	1300:0	1	
RETURN_TYPE	1291:0	1291:7	2	static int
LEAF_NODE	1291:0	1291:0	3	static
TYPE_NAME	1291:7	1291:7	3	int
LEAF_NODE	1291:7	1291:7	4	int
FUNCTION_NAME	1292:0	1292:0	2	TIFFWriteDirectoryTagShortArray
LEAF_NODE	1292:0	1292:0	3	TIFFWriteDirectoryTagShortArray
PARAMETER_LIST	1292:31	1292:115	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint16 * value )
LEAF_NODE	1292:31	1292:31	3	(
PARAMETER_DECL	1292:32	1292:38	3	TIFF * tif
TYPE	1292:32	1292:36	4	TIFF *
TYPE_NAME	1292:32	1292:32	5	TIFF
LEAF_NODE	1292:32	1292:32	6	TIFF
POINTER	1292:36	1292:36	5	*
LEAF_NODE	1292:36	1292:36	6	*
NAME	1292:38	1292:38	4	tif
LEAF_NODE	1292:38	1292:38	5	tif
LEAF_NODE	1292:41	1292:41	3	,
PARAMETER_DECL	1292:43	1292:51	3	uint32 * ndir
TYPE	1292:43	1292:49	4	uint32 *
TYPE_NAME	1292:43	1292:43	5	uint32
LEAF_NODE	1292:43	1292:43	6	uint32
POINTER	1292:49	1292:49	5	*
LEAF_NODE	1292:49	1292:49	6	*
NAME	1292:51	1292:51	4	ndir
LEAF_NODE	1292:51	1292:51	5	ndir
LEAF_NODE	1292:55	1292:55	3	,
PARAMETER_DECL	1292:57	1292:71	3	TIFFDirEntry * dir
TYPE	1292:57	1292:69	4	TIFFDirEntry *
TYPE_NAME	1292:57	1292:57	5	TIFFDirEntry
LEAF_NODE	1292:57	1292:57	6	TIFFDirEntry
POINTER	1292:69	1292:69	5	*
LEAF_NODE	1292:69	1292:69	6	*
NAME	1292:71	1292:71	4	dir
LEAF_NODE	1292:71	1292:71	5	dir
LEAF_NODE	1292:74	1292:74	3	,
PARAMETER_DECL	1292:76	1292:83	3	uint16 tag
TYPE	1292:76	1292:76	4	uint16
TYPE_NAME	1292:76	1292:76	5	uint16
LEAF_NODE	1292:76	1292:76	6	uint16
NAME	1292:83	1292:83	4	tag
LEAF_NODE	1292:83	1292:83	5	tag
LEAF_NODE	1292:86	1292:86	3	,
PARAMETER_DECL	1292:88	1292:95	3	uint32 count
TYPE	1292:88	1292:88	4	uint32
TYPE_NAME	1292:88	1292:88	5	uint32
LEAF_NODE	1292:88	1292:88	6	uint32
NAME	1292:95	1292:95	4	count
LEAF_NODE	1292:95	1292:95	5	count
LEAF_NODE	1292:100	1292:100	3	,
PARAMETER_DECL	1292:102	1292:110	3	uint16 * value
TYPE	1292:102	1292:108	4	uint16 *
TYPE_NAME	1292:102	1292:102	5	uint16
LEAF_NODE	1292:102	1292:102	6	uint16
POINTER	1292:108	1292:108	5	*
LEAF_NODE	1292:108	1292:108	6	*
NAME	1292:110	1292:110	4	value
LEAF_NODE	1292:110	1292:110	5	value
LEAF_NODE	1292:115	1292:115	3	)
LEAF_NODE	1293:0	1293:0	2	{
STATEMENTS	1294:1	1299:1	2	
SELECTION	1294:1	1295:1	3	
KEYWORD	1294:1	1294:1	4	if
LEAF_NODE	1294:1	1294:1	5	if
LEAF_NODE	1294:4	1294:4	4	(
CONDITION	1294:5	1294:5	4	dir == NULL
EXPR	1294:5	1294:10	5	dir == NULL
FIELD	1294:5	1294:5	6	dir
LEAF_NODE	1294:5	1294:5	7	dir
EQ_OPERATOR	1294:8	1294:8	6	==
LEAF_NODE	1294:8	1294:8	7	==
FIELD	1294:10	1294:10	6	NULL
LEAF_NODE	1294:10	1294:10	7	NULL
LEAF_NODE	1294:14	1294:14	4	)
STATEMENTS	1295:1	1298:1	4	
LEAF_NODE	1295:1	1295:1	5	{
STATEMENTS	1296:2	1297:2	5	
EXPR_STATEMENT	1296:2	1296:11	6	( * ndir ) ++ ;
EXPR	1296:2	1296:9	7	( * ndir ) ++
LEAF_NODE	1296:2	1296:2	8	(
UNARY_EXPR	1296:3	1296:4	8	* ndir
UNARY_OPERATOR	1296:3	1296:3	9	*
LEAF_NODE	1296:3	1296:3	10	*
FIELD	1296:4	1296:4	9	ndir
LEAF_NODE	1296:4	1296:4	10	ndir
LEAF_NODE	1296:8	1296:8	8	)
LEAF_NODE	1296:9	1296:9	8	++
LEAF_NODE	1296:11	1296:11	7	;
JUMP_STATEMENT	1297:2	1297:11	6	return ( 1 ) ;
KEYWORD	1297:2	1297:2	7	return
LEAF_NODE	1297:2	1297:2	8	return
DESTINATION	1297:8	1297:8	7	( 1 )
EXPR	1297:8	1297:10	8	( 1 )
LEAF_NODE	1297:8	1297:8	9	(
FIELD	1297:9	1297:9	9	1
LEAF_NODE	1297:9	1297:9	10	1
LEAF_NODE	1297:10	1297:10	9	)
LEAF_NODE	1297:11	1297:11	7	;
LEAF_NODE	1298:1	1298:1	5	}
JUMP_STATEMENT	1299:1	1299:77	3	return ( TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1299:1	1299:1	4	return
LEAF_NODE	1299:1	1299:1	5	return
DESTINATION	1299:7	1299:7	4	( TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1299:7	1299:76	5	( TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1299:7	1299:7	6	(
FUNCTION_CALL	1299:8	1299:75	6	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , value )
CALLEE	1299:8	1299:8	7	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	1299:8	1299:8	8	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	1299:46	1299:46	7	(
ARGUMENT	1299:47	1299:47	7	tif
FIELD	1299:47	1299:47	8	tif
LEAF_NODE	1299:47	1299:47	9	tif
LEAF_NODE	1299:50	1299:50	7	,
ARGUMENT	1299:51	1299:51	7	ndir
FIELD	1299:51	1299:51	8	ndir
LEAF_NODE	1299:51	1299:51	9	ndir
LEAF_NODE	1299:55	1299:55	7	,
ARGUMENT	1299:56	1299:56	7	dir
FIELD	1299:56	1299:56	8	dir
LEAF_NODE	1299:56	1299:56	9	dir
LEAF_NODE	1299:59	1299:59	7	,
ARGUMENT	1299:60	1299:60	7	tag
FIELD	1299:60	1299:60	8	tag
LEAF_NODE	1299:60	1299:60	9	tag
LEAF_NODE	1299:63	1299:63	7	,
ARGUMENT	1299:64	1299:64	7	count
FIELD	1299:64	1299:64	8	count
LEAF_NODE	1299:64	1299:64	9	count
LEAF_NODE	1299:69	1299:69	7	,
ARGUMENT	1299:70	1299:70	7	value
FIELD	1299:70	1299:70	8	value
LEAF_NODE	1299:70	1299:70	9	value
LEAF_NODE	1299:75	1299:75	7	)
LEAF_NODE	1299:76	1299:76	6	)
LEAF_NODE	1299:77	1299:77	4	;
LEAF_NODE	1300:0	1300:0	2	}
FUNCTION_DEF	1302:0	1326:0	1	
RETURN_TYPE	1302:0	1302:7	2	static int
LEAF_NODE	1302:0	1302:0	3	static
TYPE_NAME	1302:7	1302:7	3	int
LEAF_NODE	1302:7	1302:7	4	int
FUNCTION_NAME	1303:0	1303:0	2	TIFFWriteDirectoryTagShortPerSample
LEAF_NODE	1303:0	1303:0	3	TIFFWriteDirectoryTagShortPerSample
PARAMETER_LIST	1303:35	1303:104	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint16 value )
LEAF_NODE	1303:35	1303:35	3	(
PARAMETER_DECL	1303:36	1303:42	3	TIFF * tif
TYPE	1303:36	1303:40	4	TIFF *
TYPE_NAME	1303:36	1303:36	5	TIFF
LEAF_NODE	1303:36	1303:36	6	TIFF
POINTER	1303:40	1303:40	5	*
LEAF_NODE	1303:40	1303:40	6	*
NAME	1303:42	1303:42	4	tif
LEAF_NODE	1303:42	1303:42	5	tif
LEAF_NODE	1303:45	1303:45	3	,
PARAMETER_DECL	1303:47	1303:55	3	uint32 * ndir
TYPE	1303:47	1303:53	4	uint32 *
TYPE_NAME	1303:47	1303:47	5	uint32
LEAF_NODE	1303:47	1303:47	6	uint32
POINTER	1303:53	1303:53	5	*
LEAF_NODE	1303:53	1303:53	6	*
NAME	1303:55	1303:55	4	ndir
LEAF_NODE	1303:55	1303:55	5	ndir
LEAF_NODE	1303:59	1303:59	3	,
PARAMETER_DECL	1303:61	1303:75	3	TIFFDirEntry * dir
TYPE	1303:61	1303:73	4	TIFFDirEntry *
TYPE_NAME	1303:61	1303:61	5	TIFFDirEntry
LEAF_NODE	1303:61	1303:61	6	TIFFDirEntry
POINTER	1303:73	1303:73	5	*
LEAF_NODE	1303:73	1303:73	6	*
NAME	1303:75	1303:75	4	dir
LEAF_NODE	1303:75	1303:75	5	dir
LEAF_NODE	1303:78	1303:78	3	,
PARAMETER_DECL	1303:80	1303:87	3	uint16 tag
TYPE	1303:80	1303:80	4	uint16
TYPE_NAME	1303:80	1303:80	5	uint16
LEAF_NODE	1303:80	1303:80	6	uint16
NAME	1303:87	1303:87	4	tag
LEAF_NODE	1303:87	1303:87	5	tag
LEAF_NODE	1303:90	1303:90	3	,
PARAMETER_DECL	1303:92	1303:99	3	uint16 value
TYPE	1303:92	1303:92	4	uint16
TYPE_NAME	1303:92	1303:92	5	uint16
LEAF_NODE	1303:92	1303:92	6	uint16
NAME	1303:99	1303:99	4	value
LEAF_NODE	1303:99	1303:99	5	value
LEAF_NODE	1303:104	1303:104	3	)
LEAF_NODE	1304:0	1304:0	2	{
STATEMENTS	1305:1	1325:10	2	
LEAF_NODE	1305:1	1305:1	3	static
SIMPLE_DECL	1305:8	1305:67	3	const char [ ] module ; module = "TIFFWriteDirectoryTagShortPerSample" ;
VAR_DECL	1305:8	1305:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagShortPerSample"
TYPE	1305:8	1305:25	5	const char [ ]
TYPE_NAME	1305:8	1305:14	6	const char
LEAF_NODE	1305:8	1305:8	7	const
LEAF_NODE	1305:14	1305:14	7	char
TYPE_SUFFIX	1305:25	1305:26	6	[ ]
LEAF_NODE	1305:25	1305:25	7	[
LEAF_NODE	1305:26	1305:26	7	]
NAME	1305:19	1305:19	5	module
LEAF_NODE	1305:19	1305:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1305:19	1305:19	5	module = "TIFFWriteDirectoryTagShortPerSample"
ASSIGN	1305:19	1305:30	6	module = "TIFFWriteDirectoryTagShortPerSample"
LVAL	1305:19	1305:19	7	module
NAME	1305:19	1305:19	8	module
LEAF_NODE	1305:19	1305:19	9	module
ASSIGN_OP	1305:28	1305:28	7	=
LEAF_NODE	1305:28	1305:28	8	=
RVAL	1305:30	1305:30	7	"TIFFWriteDirectoryTagShortPerSample"
FIELD	1305:30	1305:30	8	"TIFFWriteDirectoryTagShortPerSample"
LEAF_NODE	1305:30	1305:30	9	"TIFFWriteDirectoryTagShortPerSample"
LEAF_NODE	1305:67	1305:67	4	;
SIMPLE_DECL	1306:1	1306:10	3	uint16 * m ;
VAR_DECL	1306:1	1306:9	4	uint16 * m
TYPE	1306:1	1306:7	5	uint16 *
TYPE_NAME	1306:1	1306:1	6	uint16
LEAF_NODE	1306:1	1306:1	7	uint16
POINTER	1306:7	1306:7	6	*
LEAF_NODE	1306:7	1306:7	7	*
NAME	1306:9	1306:9	5	m
LEAF_NODE	1306:9	1306:9	6	m
LEAF_NODE	1306:10	1306:10	4	;
SIMPLE_DECL	1307:1	1307:11	3	uint16 * na ;
VAR_DECL	1307:1	1307:9	4	uint16 * na
TYPE	1307:1	1307:7	5	uint16 *
TYPE_NAME	1307:1	1307:1	6	uint16
LEAF_NODE	1307:1	1307:1	7	uint16
POINTER	1307:7	1307:7	6	*
LEAF_NODE	1307:7	1307:7	7	*
NAME	1307:9	1307:9	5	na
LEAF_NODE	1307:9	1307:9	6	na
LEAF_NODE	1307:11	1307:11	4	;
SIMPLE_DECL	1308:1	1308:10	3	uint16 nb ;
VAR_DECL	1308:1	1308:8	4	uint16 nb
TYPE	1308:1	1308:1	5	uint16
TYPE_NAME	1308:1	1308:1	6	uint16
LEAF_NODE	1308:1	1308:1	7	uint16
NAME	1308:8	1308:8	5	nb
LEAF_NODE	1308:8	1308:8	6	nb
LEAF_NODE	1308:10	1308:10	4	;
SIMPLE_DECL	1309:1	1309:6	3	int o ;
VAR_DECL	1309:1	1309:5	4	int o
TYPE	1309:1	1309:1	5	int
TYPE_NAME	1309:1	1309:1	6	int
LEAF_NODE	1309:1	1309:1	7	int
NAME	1309:5	1309:5	5	o
LEAF_NODE	1309:5	1309:5	6	o
LEAF_NODE	1309:6	1309:6	4	;
SELECTION	1310:1	1311:1	3	
KEYWORD	1310:1	1310:1	4	if
LEAF_NODE	1310:1	1310:1	5	if
LEAF_NODE	1310:4	1310:4	4	(
CONDITION	1310:5	1310:5	4	dir == NULL
EXPR	1310:5	1310:10	5	dir == NULL
FIELD	1310:5	1310:5	6	dir
LEAF_NODE	1310:5	1310:5	7	dir
EQ_OPERATOR	1310:8	1310:8	6	==
LEAF_NODE	1310:8	1310:8	7	==
FIELD	1310:10	1310:10	6	NULL
LEAF_NODE	1310:10	1310:10	7	NULL
LEAF_NODE	1310:14	1310:14	4	)
STATEMENTS	1311:1	1314:1	4	
LEAF_NODE	1311:1	1311:1	5	{
STATEMENTS	1312:2	1313:2	5	
EXPR_STATEMENT	1312:2	1312:11	6	( * ndir ) ++ ;
EXPR	1312:2	1312:9	7	( * ndir ) ++
LEAF_NODE	1312:2	1312:2	8	(
UNARY_EXPR	1312:3	1312:4	8	* ndir
UNARY_OPERATOR	1312:3	1312:3	9	*
LEAF_NODE	1312:3	1312:3	10	*
FIELD	1312:4	1312:4	9	ndir
LEAF_NODE	1312:4	1312:4	10	ndir
LEAF_NODE	1312:8	1312:8	8	)
LEAF_NODE	1312:9	1312:9	8	++
LEAF_NODE	1312:11	1312:11	7	;
JUMP_STATEMENT	1313:2	1313:11	6	return ( 1 ) ;
KEYWORD	1313:2	1313:2	7	return
LEAF_NODE	1313:2	1313:2	8	return
DESTINATION	1313:8	1313:8	7	( 1 )
EXPR	1313:8	1313:10	8	( 1 )
LEAF_NODE	1313:8	1313:8	9	(
FIELD	1313:9	1313:9	9	1
LEAF_NODE	1313:9	1313:9	10	1
LEAF_NODE	1313:10	1313:10	9	)
LEAF_NODE	1313:11	1313:11	7	;
LEAF_NODE	1314:1	1314:1	5	}
EXPR_STATEMENT	1315:1	1315:62	3	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint16 ) ) ;
EXPR	1315:1	1315:1	4	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint16 ) )
ASSIGN	1315:1	1315:3	5	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint16 ) )
LVAL	1315:1	1315:1	6	m
FIELD	1315:1	1315:1	7	m
LEAF_NODE	1315:1	1315:1	8	m
ASSIGN_OP	1315:2	1315:2	6	=
LEAF_NODE	1315:2	1315:2	7	=
RVAL	1315:3	1315:3	6	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint16 ) )
FUNCTION_CALL	1315:3	1315:61	7	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint16 ) )
CALLEE	1315:3	1315:3	8	_TIFFmalloc
LEAF_NODE	1315:3	1315:3	9	_TIFFmalloc
LEAF_NODE	1315:14	1315:14	8	(
ARGUMENT	1315:15	1315:47	8	tif -> tif_dir . td_samplesperpixel * sizeof ( uint16 )
FIELD	1315:15	1315:28	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1315:15	1315:15	10	tif
LEAF_NODE	1315:18	1315:18	10	->
LEAF_NODE	1315:20	1315:20	10	tif_dir
LEAF_NODE	1315:27	1315:27	10	.
LEAF_NODE	1315:28	1315:28	10	td_samplesperpixel
LEAF_NODE	1315:46	1315:46	9	*
FUNCTION_CALL	1315:47	1315:60	9	sizeof ( uint16 )
CALLEE	1315:47	1315:47	10	sizeof
LEAF_NODE	1315:47	1315:47	11	sizeof
LEAF_NODE	1315:53	1315:53	10	(
ARGUMENT	1315:54	1315:54	10	uint16
FIELD	1315:54	1315:54	11	uint16
LEAF_NODE	1315:54	1315:54	12	uint16
LEAF_NODE	1315:60	1315:60	10	)
LEAF_NODE	1315:61	1315:61	8	)
LEAF_NODE	1315:62	1315:62	4	;
SELECTION	1316:1	1317:1	3	
KEYWORD	1316:1	1316:1	4	if
LEAF_NODE	1316:1	1316:1	5	if
LEAF_NODE	1316:4	1316:4	4	(
CONDITION	1316:5	1316:5	4	m == NULL
EXPR	1316:5	1316:8	5	m == NULL
FIELD	1316:5	1316:5	6	m
LEAF_NODE	1316:5	1316:5	7	m
EQ_OPERATOR	1316:6	1316:6	6	==
LEAF_NODE	1316:6	1316:6	7	==
FIELD	1316:8	1316:8	6	NULL
LEAF_NODE	1316:8	1316:8	7	NULL
LEAF_NODE	1316:12	1316:12	4	)
STATEMENTS	1317:1	1320:1	4	
LEAF_NODE	1317:1	1317:1	5	{
STATEMENTS	1318:2	1319:2	5	
EXPR_STATEMENT	1318:2	1318:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1318:2	1318:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1318:2	1318:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1318:2	1318:2	9	TIFFErrorExt
LEAF_NODE	1318:2	1318:2	10	TIFFErrorExt
LEAF_NODE	1318:14	1318:14	9	(
ARGUMENT	1318:15	1318:15	9	tif -> tif_clientdata
FIELD	1318:15	1318:20	10	tif -> tif_clientdata
LEAF_NODE	1318:15	1318:15	11	tif
LEAF_NODE	1318:18	1318:18	11	->
LEAF_NODE	1318:20	1318:20	11	tif_clientdata
LEAF_NODE	1318:34	1318:34	9	,
ARGUMENT	1318:35	1318:35	9	module
FIELD	1318:35	1318:35	10	module
LEAF_NODE	1318:35	1318:35	11	module
LEAF_NODE	1318:41	1318:41	9	,
ARGUMENT	1318:42	1318:42	9	"Out of memory"
FIELD	1318:42	1318:42	10	"Out of memory"
LEAF_NODE	1318:42	1318:42	11	"Out of memory"
LEAF_NODE	1318:57	1318:57	9	)
LEAF_NODE	1318:58	1318:58	7	;
JUMP_STATEMENT	1319:2	1319:11	6	return ( 0 ) ;
KEYWORD	1319:2	1319:2	7	return
LEAF_NODE	1319:2	1319:2	8	return
DESTINATION	1319:8	1319:8	7	( 0 )
EXPR	1319:8	1319:10	8	( 0 )
LEAF_NODE	1319:8	1319:8	9	(
FIELD	1319:9	1319:9	9	0
LEAF_NODE	1319:9	1319:9	10	0
LEAF_NODE	1319:10	1319:10	9	)
LEAF_NODE	1319:11	1319:11	7	;
LEAF_NODE	1320:1	1320:1	5	}
ITERATION	1321:1	1322:2	3	
KEYWORD	1321:1	1321:1	4	for
LEAF_NODE	1321:1	1321:1	5	for
LEAF_NODE	1321:5	1321:5	4	(
FOR_INIT	1321:6	1321:16	4	na = m , nb = 0 ;
EXPR	1321:6	1321:12	5	na = m , nb = 0
ASSIGN	1321:6	1321:9	6	na = m
LVAL	1321:6	1321:6	7	na
FIELD	1321:6	1321:6	8	na
LEAF_NODE	1321:6	1321:6	9	na
ASSIGN_OP	1321:8	1321:8	7	=
LEAF_NODE	1321:8	1321:8	8	=
RVAL	1321:9	1321:9	7	m
FIELD	1321:9	1321:9	8	m
LEAF_NODE	1321:9	1321:9	9	m
LEAF_NODE	1321:10	1321:10	6	,
ASSIGN	1321:12	1321:15	6	nb = 0
LVAL	1321:12	1321:12	7	nb
FIELD	1321:12	1321:12	8	nb
LEAF_NODE	1321:12	1321:12	9	nb
ASSIGN_OP	1321:14	1321:14	7	=
LEAF_NODE	1321:14	1321:14	8	=
RVAL	1321:15	1321:15	7	0
FIELD	1321:15	1321:15	8	0
LEAF_NODE	1321:15	1321:15	9	0
LEAF_NODE	1321:16	1321:16	5	;
CONDITION	1321:18	1321:18	4	nb < tif -> tif_dir . td_samplesperpixel
EXPR	1321:18	1321:21	5	nb < tif -> tif_dir . td_samplesperpixel
FIELD	1321:18	1321:18	6	nb
LEAF_NODE	1321:18	1321:18	7	nb
REL_OPERATOR	1321:20	1321:20	6	<
LEAF_NODE	1321:20	1321:20	7	<
FIELD	1321:21	1321:34	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1321:21	1321:21	7	tif
LEAF_NODE	1321:24	1321:24	7	->
LEAF_NODE	1321:26	1321:26	7	tif_dir
LEAF_NODE	1321:33	1321:33	7	.
LEAF_NODE	1321:34	1321:34	7	td_samplesperpixel
LEAF_NODE	1321:52	1321:52	4	;
FOR_EXPR	1321:54	1321:54	4	na ++ , nb ++
EXPR	1321:54	1321:60	5	na ++ , nb ++
FIELD	1321:54	1321:56	6	na ++
LEAF_NODE	1321:54	1321:54	7	na
LEAF_NODE	1321:56	1321:56	7	++
LEAF_NODE	1321:58	1321:58	6	,
FIELD	1321:60	1321:62	6	nb ++
LEAF_NODE	1321:60	1321:60	7	nb
LEAF_NODE	1321:62	1321:62	7	++
LEAF_NODE	1321:64	1321:64	4	)
STATEMENTS	1322:2	1322:2	4	
EXPR_STATEMENT	1322:2	1322:11	5	* na = value ;
EXPR	1322:2	1322:2	6	* na = value
ASSIGN	1322:2	1322:6	7	* na = value
LVAL	1322:2	1322:2	8	* na
UNARY_EXPR	1322:2	1322:3	9	* na
UNARY_OPERATOR	1322:2	1322:2	10	*
LEAF_NODE	1322:2	1322:2	11	*
FIELD	1322:3	1322:3	10	na
LEAF_NODE	1322:3	1322:3	11	na
ASSIGN_OP	1322:5	1322:5	8	=
LEAF_NODE	1322:5	1322:5	9	=
RVAL	1322:6	1322:6	8	value
FIELD	1322:6	1322:6	9	value
LEAF_NODE	1322:6	1322:6	10	value
LEAF_NODE	1322:11	1322:11	6	;
EXPR_STATEMENT	1323:1	1323:93	3	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m ) ;
EXPR	1323:1	1323:1	4	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
ASSIGN	1323:1	1323:3	5	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
LVAL	1323:1	1323:1	6	o
FIELD	1323:1	1323:1	7	o
LEAF_NODE	1323:1	1323:1	8	o
ASSIGN_OP	1323:2	1323:2	6	=
LEAF_NODE	1323:2	1323:2	7	=
RVAL	1323:3	1323:3	6	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
FUNCTION_CALL	1323:3	1323:92	7	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
CALLEE	1323:3	1323:3	8	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	1323:3	1323:3	9	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	1323:41	1323:41	8	(
ARGUMENT	1323:42	1323:42	8	tif
FIELD	1323:42	1323:42	9	tif
LEAF_NODE	1323:42	1323:42	10	tif
LEAF_NODE	1323:45	1323:45	8	,
ARGUMENT	1323:46	1323:46	8	ndir
FIELD	1323:46	1323:46	9	ndir
LEAF_NODE	1323:46	1323:46	10	ndir
LEAF_NODE	1323:50	1323:50	8	,
ARGUMENT	1323:51	1323:51	8	dir
FIELD	1323:51	1323:51	9	dir
LEAF_NODE	1323:51	1323:51	10	dir
LEAF_NODE	1323:54	1323:54	8	,
ARGUMENT	1323:55	1323:55	8	tag
FIELD	1323:55	1323:55	9	tag
LEAF_NODE	1323:55	1323:55	10	tag
LEAF_NODE	1323:58	1323:58	8	,
ARGUMENT	1323:59	1323:59	8	tif -> tif_dir . td_samplesperpixel
FIELD	1323:59	1323:72	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1323:59	1323:59	10	tif
LEAF_NODE	1323:62	1323:62	10	->
LEAF_NODE	1323:64	1323:64	10	tif_dir
LEAF_NODE	1323:71	1323:71	10	.
LEAF_NODE	1323:72	1323:72	10	td_samplesperpixel
LEAF_NODE	1323:90	1323:90	8	,
ARGUMENT	1323:91	1323:91	8	m
FIELD	1323:91	1323:91	9	m
LEAF_NODE	1323:91	1323:91	10	m
LEAF_NODE	1323:92	1323:92	8	)
LEAF_NODE	1323:93	1323:93	4	;
EXPR_STATEMENT	1324:1	1324:13	3	_TIFFfree ( m ) ;
EXPR	1324:1	1324:1	4	_TIFFfree ( m )
FUNCTION_CALL	1324:1	1324:12	5	_TIFFfree ( m )
CALLEE	1324:1	1324:1	6	_TIFFfree
LEAF_NODE	1324:1	1324:1	7	_TIFFfree
LEAF_NODE	1324:10	1324:10	6	(
ARGUMENT	1324:11	1324:11	6	m
FIELD	1324:11	1324:11	7	m
LEAF_NODE	1324:11	1324:11	8	m
LEAF_NODE	1324:12	1324:12	6	)
LEAF_NODE	1324:13	1324:13	4	;
LEAF_NODE	1325:1	1325:1	3	return
LEAF_NODE	1325:7	1325:7	3	(
LEAF_NODE	1325:8	1325:8	3	o
LEAF_NODE	1325:9	1325:9	3	)
LEAF_NODE	1325:10	1325:10	3	;
LEAF_NODE	1326:0	1326:0	2	}
FUNCTION_DEF	1329:0	1338:0	1	
RETURN_TYPE	1329:0	1329:7	2	static int
LEAF_NODE	1329:0	1329:0	3	static
TYPE_NAME	1329:7	1329:7	3	int
LEAF_NODE	1329:7	1329:7	4	int
FUNCTION_NAME	1330:0	1330:0	2	TIFFWriteDirectoryTagSshort
LEAF_NODE	1330:0	1330:0	3	TIFFWriteDirectoryTagSshort
PARAMETER_LIST	1330:27	1330:95	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int16 value )
LEAF_NODE	1330:27	1330:27	3	(
PARAMETER_DECL	1330:28	1330:34	3	TIFF * tif
TYPE	1330:28	1330:32	4	TIFF *
TYPE_NAME	1330:28	1330:28	5	TIFF
LEAF_NODE	1330:28	1330:28	6	TIFF
POINTER	1330:32	1330:32	5	*
LEAF_NODE	1330:32	1330:32	6	*
NAME	1330:34	1330:34	4	tif
LEAF_NODE	1330:34	1330:34	5	tif
LEAF_NODE	1330:37	1330:37	3	,
PARAMETER_DECL	1330:39	1330:47	3	uint32 * ndir
TYPE	1330:39	1330:45	4	uint32 *
TYPE_NAME	1330:39	1330:39	5	uint32
LEAF_NODE	1330:39	1330:39	6	uint32
POINTER	1330:45	1330:45	5	*
LEAF_NODE	1330:45	1330:45	6	*
NAME	1330:47	1330:47	4	ndir
LEAF_NODE	1330:47	1330:47	5	ndir
LEAF_NODE	1330:51	1330:51	3	,
PARAMETER_DECL	1330:53	1330:67	3	TIFFDirEntry * dir
TYPE	1330:53	1330:65	4	TIFFDirEntry *
TYPE_NAME	1330:53	1330:53	5	TIFFDirEntry
LEAF_NODE	1330:53	1330:53	6	TIFFDirEntry
POINTER	1330:65	1330:65	5	*
LEAF_NODE	1330:65	1330:65	6	*
NAME	1330:67	1330:67	4	dir
LEAF_NODE	1330:67	1330:67	5	dir
LEAF_NODE	1330:70	1330:70	3	,
PARAMETER_DECL	1330:72	1330:79	3	uint16 tag
TYPE	1330:72	1330:72	4	uint16
TYPE_NAME	1330:72	1330:72	5	uint16
LEAF_NODE	1330:72	1330:72	6	uint16
NAME	1330:79	1330:79	4	tag
LEAF_NODE	1330:79	1330:79	5	tag
LEAF_NODE	1330:82	1330:82	3	,
PARAMETER_DECL	1330:84	1330:90	3	int16 value
TYPE	1330:84	1330:84	4	int16
TYPE_NAME	1330:84	1330:84	5	int16
LEAF_NODE	1330:84	1330:84	6	int16
NAME	1330:90	1330:90	4	value
LEAF_NODE	1330:90	1330:90	5	value
LEAF_NODE	1330:95	1330:95	3	)
LEAF_NODE	1331:0	1331:0	2	{
STATEMENTS	1332:1	1337:1	2	
SELECTION	1332:1	1333:1	3	
KEYWORD	1332:1	1332:1	4	if
LEAF_NODE	1332:1	1332:1	5	if
LEAF_NODE	1332:4	1332:4	4	(
CONDITION	1332:5	1332:5	4	dir == NULL
EXPR	1332:5	1332:10	5	dir == NULL
FIELD	1332:5	1332:5	6	dir
LEAF_NODE	1332:5	1332:5	7	dir
EQ_OPERATOR	1332:8	1332:8	6	==
LEAF_NODE	1332:8	1332:8	7	==
FIELD	1332:10	1332:10	6	NULL
LEAF_NODE	1332:10	1332:10	7	NULL
LEAF_NODE	1332:14	1332:14	4	)
STATEMENTS	1333:1	1336:1	4	
LEAF_NODE	1333:1	1333:1	5	{
STATEMENTS	1334:2	1335:2	5	
EXPR_STATEMENT	1334:2	1334:11	6	( * ndir ) ++ ;
EXPR	1334:2	1334:9	7	( * ndir ) ++
LEAF_NODE	1334:2	1334:2	8	(
UNARY_EXPR	1334:3	1334:4	8	* ndir
UNARY_OPERATOR	1334:3	1334:3	9	*
LEAF_NODE	1334:3	1334:3	10	*
FIELD	1334:4	1334:4	9	ndir
LEAF_NODE	1334:4	1334:4	10	ndir
LEAF_NODE	1334:8	1334:8	8	)
LEAF_NODE	1334:9	1334:9	8	++
LEAF_NODE	1334:11	1334:11	7	;
JUMP_STATEMENT	1335:2	1335:11	6	return ( 1 ) ;
KEYWORD	1335:2	1335:2	7	return
LEAF_NODE	1335:2	1335:2	8	return
DESTINATION	1335:8	1335:8	7	( 1 )
EXPR	1335:8	1335:10	8	( 1 )
LEAF_NODE	1335:8	1335:8	9	(
FIELD	1335:9	1335:9	9	1
LEAF_NODE	1335:9	1335:9	10	1
LEAF_NODE	1335:10	1335:10	9	)
LEAF_NODE	1335:11	1335:11	7	;
LEAF_NODE	1336:1	1336:1	5	}
JUMP_STATEMENT	1337:1	1337:67	3	return ( TIFFWriteDirectoryTagCheckedSshort ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1337:1	1337:1	4	return
LEAF_NODE	1337:1	1337:1	5	return
DESTINATION	1337:7	1337:7	4	( TIFFWriteDirectoryTagCheckedSshort ( tif , ndir , dir , tag , value ) )
EXPR	1337:7	1337:66	5	( TIFFWriteDirectoryTagCheckedSshort ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1337:7	1337:7	6	(
FUNCTION_CALL	1337:8	1337:65	6	TIFFWriteDirectoryTagCheckedSshort ( tif , ndir , dir , tag , value )
CALLEE	1337:8	1337:8	7	TIFFWriteDirectoryTagCheckedSshort
LEAF_NODE	1337:8	1337:8	8	TIFFWriteDirectoryTagCheckedSshort
LEAF_NODE	1337:42	1337:42	7	(
ARGUMENT	1337:43	1337:43	7	tif
FIELD	1337:43	1337:43	8	tif
LEAF_NODE	1337:43	1337:43	9	tif
LEAF_NODE	1337:46	1337:46	7	,
ARGUMENT	1337:47	1337:47	7	ndir
FIELD	1337:47	1337:47	8	ndir
LEAF_NODE	1337:47	1337:47	9	ndir
LEAF_NODE	1337:51	1337:51	7	,
ARGUMENT	1337:52	1337:52	7	dir
FIELD	1337:52	1337:52	8	dir
LEAF_NODE	1337:52	1337:52	9	dir
LEAF_NODE	1337:55	1337:55	7	,
ARGUMENT	1337:56	1337:56	7	tag
FIELD	1337:56	1337:56	8	tag
LEAF_NODE	1337:56	1337:56	9	tag
LEAF_NODE	1337:59	1337:59	7	,
ARGUMENT	1337:60	1337:60	7	value
FIELD	1337:60	1337:60	8	value
LEAF_NODE	1337:60	1337:60	9	value
LEAF_NODE	1337:65	1337:65	7	)
LEAF_NODE	1337:66	1337:66	6	)
LEAF_NODE	1337:67	1337:67	4	;
LEAF_NODE	1338:0	1338:0	2	}
FUNCTION_DEF	1341:0	1350:0	1	
RETURN_TYPE	1341:0	1341:7	2	static int
LEAF_NODE	1341:0	1341:0	3	static
TYPE_NAME	1341:7	1341:7	3	int
LEAF_NODE	1341:7	1341:7	4	int
FUNCTION_NAME	1342:0	1342:0	2	TIFFWriteDirectoryTagSshortArray
LEAF_NODE	1342:0	1342:0	3	TIFFWriteDirectoryTagSshortArray
PARAMETER_LIST	1342:32	1342:115	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , int16 * value )
LEAF_NODE	1342:32	1342:32	3	(
PARAMETER_DECL	1342:33	1342:39	3	TIFF * tif
TYPE	1342:33	1342:37	4	TIFF *
TYPE_NAME	1342:33	1342:33	5	TIFF
LEAF_NODE	1342:33	1342:33	6	TIFF
POINTER	1342:37	1342:37	5	*
LEAF_NODE	1342:37	1342:37	6	*
NAME	1342:39	1342:39	4	tif
LEAF_NODE	1342:39	1342:39	5	tif
LEAF_NODE	1342:42	1342:42	3	,
PARAMETER_DECL	1342:44	1342:52	3	uint32 * ndir
TYPE	1342:44	1342:50	4	uint32 *
TYPE_NAME	1342:44	1342:44	5	uint32
LEAF_NODE	1342:44	1342:44	6	uint32
POINTER	1342:50	1342:50	5	*
LEAF_NODE	1342:50	1342:50	6	*
NAME	1342:52	1342:52	4	ndir
LEAF_NODE	1342:52	1342:52	5	ndir
LEAF_NODE	1342:56	1342:56	3	,
PARAMETER_DECL	1342:58	1342:72	3	TIFFDirEntry * dir
TYPE	1342:58	1342:70	4	TIFFDirEntry *
TYPE_NAME	1342:58	1342:58	5	TIFFDirEntry
LEAF_NODE	1342:58	1342:58	6	TIFFDirEntry
POINTER	1342:70	1342:70	5	*
LEAF_NODE	1342:70	1342:70	6	*
NAME	1342:72	1342:72	4	dir
LEAF_NODE	1342:72	1342:72	5	dir
LEAF_NODE	1342:75	1342:75	3	,
PARAMETER_DECL	1342:77	1342:84	3	uint16 tag
TYPE	1342:77	1342:77	4	uint16
TYPE_NAME	1342:77	1342:77	5	uint16
LEAF_NODE	1342:77	1342:77	6	uint16
NAME	1342:84	1342:84	4	tag
LEAF_NODE	1342:84	1342:84	5	tag
LEAF_NODE	1342:87	1342:87	3	,
PARAMETER_DECL	1342:89	1342:96	3	uint32 count
TYPE	1342:89	1342:89	4	uint32
TYPE_NAME	1342:89	1342:89	5	uint32
LEAF_NODE	1342:89	1342:89	6	uint32
NAME	1342:96	1342:96	4	count
LEAF_NODE	1342:96	1342:96	5	count
LEAF_NODE	1342:101	1342:101	3	,
PARAMETER_DECL	1342:103	1342:110	3	int16 * value
TYPE	1342:103	1342:108	4	int16 *
TYPE_NAME	1342:103	1342:103	5	int16
LEAF_NODE	1342:103	1342:103	6	int16
POINTER	1342:108	1342:108	5	*
LEAF_NODE	1342:108	1342:108	6	*
NAME	1342:110	1342:110	4	value
LEAF_NODE	1342:110	1342:110	5	value
LEAF_NODE	1342:115	1342:115	3	)
LEAF_NODE	1343:0	1343:0	2	{
STATEMENTS	1344:1	1349:1	2	
SELECTION	1344:1	1345:1	3	
KEYWORD	1344:1	1344:1	4	if
LEAF_NODE	1344:1	1344:1	5	if
LEAF_NODE	1344:4	1344:4	4	(
CONDITION	1344:5	1344:5	4	dir == NULL
EXPR	1344:5	1344:10	5	dir == NULL
FIELD	1344:5	1344:5	6	dir
LEAF_NODE	1344:5	1344:5	7	dir
EQ_OPERATOR	1344:8	1344:8	6	==
LEAF_NODE	1344:8	1344:8	7	==
FIELD	1344:10	1344:10	6	NULL
LEAF_NODE	1344:10	1344:10	7	NULL
LEAF_NODE	1344:14	1344:14	4	)
STATEMENTS	1345:1	1348:1	4	
LEAF_NODE	1345:1	1345:1	5	{
STATEMENTS	1346:2	1347:2	5	
EXPR_STATEMENT	1346:2	1346:11	6	( * ndir ) ++ ;
EXPR	1346:2	1346:9	7	( * ndir ) ++
LEAF_NODE	1346:2	1346:2	8	(
UNARY_EXPR	1346:3	1346:4	8	* ndir
UNARY_OPERATOR	1346:3	1346:3	9	*
LEAF_NODE	1346:3	1346:3	10	*
FIELD	1346:4	1346:4	9	ndir
LEAF_NODE	1346:4	1346:4	10	ndir
LEAF_NODE	1346:8	1346:8	8	)
LEAF_NODE	1346:9	1346:9	8	++
LEAF_NODE	1346:11	1346:11	7	;
JUMP_STATEMENT	1347:2	1347:11	6	return ( 1 ) ;
KEYWORD	1347:2	1347:2	7	return
LEAF_NODE	1347:2	1347:2	8	return
DESTINATION	1347:8	1347:8	7	( 1 )
EXPR	1347:8	1347:10	8	( 1 )
LEAF_NODE	1347:8	1347:8	9	(
FIELD	1347:9	1347:9	9	1
LEAF_NODE	1347:9	1347:9	10	1
LEAF_NODE	1347:10	1347:10	9	)
LEAF_NODE	1347:11	1347:11	7	;
LEAF_NODE	1348:1	1348:1	5	}
JUMP_STATEMENT	1349:1	1349:78	3	return ( TIFFWriteDirectoryTagCheckedSshortArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1349:1	1349:1	4	return
LEAF_NODE	1349:1	1349:1	5	return
DESTINATION	1349:7	1349:7	4	( TIFFWriteDirectoryTagCheckedSshortArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1349:7	1349:77	5	( TIFFWriteDirectoryTagCheckedSshortArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1349:7	1349:7	6	(
FUNCTION_CALL	1349:8	1349:76	6	TIFFWriteDirectoryTagCheckedSshortArray ( tif , ndir , dir , tag , count , value )
CALLEE	1349:8	1349:8	7	TIFFWriteDirectoryTagCheckedSshortArray
LEAF_NODE	1349:8	1349:8	8	TIFFWriteDirectoryTagCheckedSshortArray
LEAF_NODE	1349:47	1349:47	7	(
ARGUMENT	1349:48	1349:48	7	tif
FIELD	1349:48	1349:48	8	tif
LEAF_NODE	1349:48	1349:48	9	tif
LEAF_NODE	1349:51	1349:51	7	,
ARGUMENT	1349:52	1349:52	7	ndir
FIELD	1349:52	1349:52	8	ndir
LEAF_NODE	1349:52	1349:52	9	ndir
LEAF_NODE	1349:56	1349:56	7	,
ARGUMENT	1349:57	1349:57	7	dir
FIELD	1349:57	1349:57	8	dir
LEAF_NODE	1349:57	1349:57	9	dir
LEAF_NODE	1349:60	1349:60	7	,
ARGUMENT	1349:61	1349:61	7	tag
FIELD	1349:61	1349:61	8	tag
LEAF_NODE	1349:61	1349:61	9	tag
LEAF_NODE	1349:64	1349:64	7	,
ARGUMENT	1349:65	1349:65	7	count
FIELD	1349:65	1349:65	8	count
LEAF_NODE	1349:65	1349:65	9	count
LEAF_NODE	1349:70	1349:70	7	,
ARGUMENT	1349:71	1349:71	7	value
FIELD	1349:71	1349:71	8	value
LEAF_NODE	1349:71	1349:71	9	value
LEAF_NODE	1349:76	1349:76	7	)
LEAF_NODE	1349:77	1349:77	6	)
LEAF_NODE	1349:78	1349:78	4	;
LEAF_NODE	1350:0	1350:0	2	}
FUNCTION_DEF	1353:0	1377:0	1	
RETURN_TYPE	1353:0	1353:7	2	static int
LEAF_NODE	1353:0	1353:0	3	static
TYPE_NAME	1353:7	1353:7	3	int
LEAF_NODE	1353:7	1353:7	4	int
FUNCTION_NAME	1354:0	1354:0	2	TIFFWriteDirectoryTagSshortPerSample
LEAF_NODE	1354:0	1354:0	3	TIFFWriteDirectoryTagSshortPerSample
PARAMETER_LIST	1354:36	1354:104	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int16 value )
LEAF_NODE	1354:36	1354:36	3	(
PARAMETER_DECL	1354:37	1354:43	3	TIFF * tif
TYPE	1354:37	1354:41	4	TIFF *
TYPE_NAME	1354:37	1354:37	5	TIFF
LEAF_NODE	1354:37	1354:37	6	TIFF
POINTER	1354:41	1354:41	5	*
LEAF_NODE	1354:41	1354:41	6	*
NAME	1354:43	1354:43	4	tif
LEAF_NODE	1354:43	1354:43	5	tif
LEAF_NODE	1354:46	1354:46	3	,
PARAMETER_DECL	1354:48	1354:56	3	uint32 * ndir
TYPE	1354:48	1354:54	4	uint32 *
TYPE_NAME	1354:48	1354:48	5	uint32
LEAF_NODE	1354:48	1354:48	6	uint32
POINTER	1354:54	1354:54	5	*
LEAF_NODE	1354:54	1354:54	6	*
NAME	1354:56	1354:56	4	ndir
LEAF_NODE	1354:56	1354:56	5	ndir
LEAF_NODE	1354:60	1354:60	3	,
PARAMETER_DECL	1354:62	1354:76	3	TIFFDirEntry * dir
TYPE	1354:62	1354:74	4	TIFFDirEntry *
TYPE_NAME	1354:62	1354:62	5	TIFFDirEntry
LEAF_NODE	1354:62	1354:62	6	TIFFDirEntry
POINTER	1354:74	1354:74	5	*
LEAF_NODE	1354:74	1354:74	6	*
NAME	1354:76	1354:76	4	dir
LEAF_NODE	1354:76	1354:76	5	dir
LEAF_NODE	1354:79	1354:79	3	,
PARAMETER_DECL	1354:81	1354:88	3	uint16 tag
TYPE	1354:81	1354:81	4	uint16
TYPE_NAME	1354:81	1354:81	5	uint16
LEAF_NODE	1354:81	1354:81	6	uint16
NAME	1354:88	1354:88	4	tag
LEAF_NODE	1354:88	1354:88	5	tag
LEAF_NODE	1354:91	1354:91	3	,
PARAMETER_DECL	1354:93	1354:99	3	int16 value
TYPE	1354:93	1354:93	4	int16
TYPE_NAME	1354:93	1354:93	5	int16
LEAF_NODE	1354:93	1354:93	6	int16
NAME	1354:99	1354:99	4	value
LEAF_NODE	1354:99	1354:99	5	value
LEAF_NODE	1354:104	1354:104	3	)
LEAF_NODE	1355:0	1355:0	2	{
STATEMENTS	1356:1	1376:10	2	
LEAF_NODE	1356:1	1356:1	3	static
SIMPLE_DECL	1356:8	1356:68	3	const char [ ] module ; module = "TIFFWriteDirectoryTagSshortPerSample" ;
VAR_DECL	1356:8	1356:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagSshortPerSample"
TYPE	1356:8	1356:25	5	const char [ ]
TYPE_NAME	1356:8	1356:14	6	const char
LEAF_NODE	1356:8	1356:8	7	const
LEAF_NODE	1356:14	1356:14	7	char
TYPE_SUFFIX	1356:25	1356:26	6	[ ]
LEAF_NODE	1356:25	1356:25	7	[
LEAF_NODE	1356:26	1356:26	7	]
NAME	1356:19	1356:19	5	module
LEAF_NODE	1356:19	1356:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1356:19	1356:19	5	module = "TIFFWriteDirectoryTagSshortPerSample"
ASSIGN	1356:19	1356:30	6	module = "TIFFWriteDirectoryTagSshortPerSample"
LVAL	1356:19	1356:19	7	module
NAME	1356:19	1356:19	8	module
LEAF_NODE	1356:19	1356:19	9	module
ASSIGN_OP	1356:28	1356:28	7	=
LEAF_NODE	1356:28	1356:28	8	=
RVAL	1356:30	1356:30	7	"TIFFWriteDirectoryTagSshortPerSample"
FIELD	1356:30	1356:30	8	"TIFFWriteDirectoryTagSshortPerSample"
LEAF_NODE	1356:30	1356:30	9	"TIFFWriteDirectoryTagSshortPerSample"
LEAF_NODE	1356:68	1356:68	4	;
SIMPLE_DECL	1357:1	1357:9	3	int16 * m ;
VAR_DECL	1357:1	1357:8	4	int16 * m
TYPE	1357:1	1357:6	5	int16 *
TYPE_NAME	1357:1	1357:1	6	int16
LEAF_NODE	1357:1	1357:1	7	int16
POINTER	1357:6	1357:6	6	*
LEAF_NODE	1357:6	1357:6	7	*
NAME	1357:8	1357:8	5	m
LEAF_NODE	1357:8	1357:8	6	m
LEAF_NODE	1357:9	1357:9	4	;
SIMPLE_DECL	1358:1	1358:10	3	int16 * na ;
VAR_DECL	1358:1	1358:8	4	int16 * na
TYPE	1358:1	1358:6	5	int16 *
TYPE_NAME	1358:1	1358:1	6	int16
LEAF_NODE	1358:1	1358:1	7	int16
POINTER	1358:6	1358:6	6	*
LEAF_NODE	1358:6	1358:6	7	*
NAME	1358:8	1358:8	5	na
LEAF_NODE	1358:8	1358:8	6	na
LEAF_NODE	1358:10	1358:10	4	;
SIMPLE_DECL	1359:1	1359:10	3	uint16 nb ;
VAR_DECL	1359:1	1359:8	4	uint16 nb
TYPE	1359:1	1359:1	5	uint16
TYPE_NAME	1359:1	1359:1	6	uint16
LEAF_NODE	1359:1	1359:1	7	uint16
NAME	1359:8	1359:8	5	nb
LEAF_NODE	1359:8	1359:8	6	nb
LEAF_NODE	1359:10	1359:10	4	;
SIMPLE_DECL	1360:1	1360:6	3	int o ;
VAR_DECL	1360:1	1360:5	4	int o
TYPE	1360:1	1360:1	5	int
TYPE_NAME	1360:1	1360:1	6	int
LEAF_NODE	1360:1	1360:1	7	int
NAME	1360:5	1360:5	5	o
LEAF_NODE	1360:5	1360:5	6	o
LEAF_NODE	1360:6	1360:6	4	;
SELECTION	1361:1	1362:1	3	
KEYWORD	1361:1	1361:1	4	if
LEAF_NODE	1361:1	1361:1	5	if
LEAF_NODE	1361:4	1361:4	4	(
CONDITION	1361:5	1361:5	4	dir == NULL
EXPR	1361:5	1361:10	5	dir == NULL
FIELD	1361:5	1361:5	6	dir
LEAF_NODE	1361:5	1361:5	7	dir
EQ_OPERATOR	1361:8	1361:8	6	==
LEAF_NODE	1361:8	1361:8	7	==
FIELD	1361:10	1361:10	6	NULL
LEAF_NODE	1361:10	1361:10	7	NULL
LEAF_NODE	1361:14	1361:14	4	)
STATEMENTS	1362:1	1365:1	4	
LEAF_NODE	1362:1	1362:1	5	{
STATEMENTS	1363:2	1364:2	5	
EXPR_STATEMENT	1363:2	1363:11	6	( * ndir ) ++ ;
EXPR	1363:2	1363:9	7	( * ndir ) ++
LEAF_NODE	1363:2	1363:2	8	(
UNARY_EXPR	1363:3	1363:4	8	* ndir
UNARY_OPERATOR	1363:3	1363:3	9	*
LEAF_NODE	1363:3	1363:3	10	*
FIELD	1363:4	1363:4	9	ndir
LEAF_NODE	1363:4	1363:4	10	ndir
LEAF_NODE	1363:8	1363:8	8	)
LEAF_NODE	1363:9	1363:9	8	++
LEAF_NODE	1363:11	1363:11	7	;
JUMP_STATEMENT	1364:2	1364:11	6	return ( 1 ) ;
KEYWORD	1364:2	1364:2	7	return
LEAF_NODE	1364:2	1364:2	8	return
DESTINATION	1364:8	1364:8	7	( 1 )
EXPR	1364:8	1364:10	8	( 1 )
LEAF_NODE	1364:8	1364:8	9	(
FIELD	1364:9	1364:9	9	1
LEAF_NODE	1364:9	1364:9	10	1
LEAF_NODE	1364:10	1364:10	9	)
LEAF_NODE	1364:11	1364:11	7	;
LEAF_NODE	1365:1	1365:1	5	}
EXPR_STATEMENT	1366:1	1366:61	3	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int16 ) ) ;
EXPR	1366:1	1366:1	4	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int16 ) )
ASSIGN	1366:1	1366:3	5	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int16 ) )
LVAL	1366:1	1366:1	6	m
FIELD	1366:1	1366:1	7	m
LEAF_NODE	1366:1	1366:1	8	m
ASSIGN_OP	1366:2	1366:2	6	=
LEAF_NODE	1366:2	1366:2	7	=
RVAL	1366:3	1366:3	6	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int16 ) )
FUNCTION_CALL	1366:3	1366:60	7	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int16 ) )
CALLEE	1366:3	1366:3	8	_TIFFmalloc
LEAF_NODE	1366:3	1366:3	9	_TIFFmalloc
LEAF_NODE	1366:14	1366:14	8	(
ARGUMENT	1366:15	1366:47	8	tif -> tif_dir . td_samplesperpixel * sizeof ( int16 )
FIELD	1366:15	1366:28	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1366:15	1366:15	10	tif
LEAF_NODE	1366:18	1366:18	10	->
LEAF_NODE	1366:20	1366:20	10	tif_dir
LEAF_NODE	1366:27	1366:27	10	.
LEAF_NODE	1366:28	1366:28	10	td_samplesperpixel
LEAF_NODE	1366:46	1366:46	9	*
FUNCTION_CALL	1366:47	1366:59	9	sizeof ( int16 )
CALLEE	1366:47	1366:47	10	sizeof
LEAF_NODE	1366:47	1366:47	11	sizeof
LEAF_NODE	1366:53	1366:53	10	(
ARGUMENT	1366:54	1366:54	10	int16
FIELD	1366:54	1366:54	11	int16
LEAF_NODE	1366:54	1366:54	12	int16
LEAF_NODE	1366:59	1366:59	10	)
LEAF_NODE	1366:60	1366:60	8	)
LEAF_NODE	1366:61	1366:61	4	;
SELECTION	1367:1	1368:1	3	
KEYWORD	1367:1	1367:1	4	if
LEAF_NODE	1367:1	1367:1	5	if
LEAF_NODE	1367:4	1367:4	4	(
CONDITION	1367:5	1367:5	4	m == NULL
EXPR	1367:5	1367:8	5	m == NULL
FIELD	1367:5	1367:5	6	m
LEAF_NODE	1367:5	1367:5	7	m
EQ_OPERATOR	1367:6	1367:6	6	==
LEAF_NODE	1367:6	1367:6	7	==
FIELD	1367:8	1367:8	6	NULL
LEAF_NODE	1367:8	1367:8	7	NULL
LEAF_NODE	1367:12	1367:12	4	)
STATEMENTS	1368:1	1371:1	4	
LEAF_NODE	1368:1	1368:1	5	{
STATEMENTS	1369:2	1370:2	5	
EXPR_STATEMENT	1369:2	1369:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1369:2	1369:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1369:2	1369:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1369:2	1369:2	9	TIFFErrorExt
LEAF_NODE	1369:2	1369:2	10	TIFFErrorExt
LEAF_NODE	1369:14	1369:14	9	(
ARGUMENT	1369:15	1369:15	9	tif -> tif_clientdata
FIELD	1369:15	1369:20	10	tif -> tif_clientdata
LEAF_NODE	1369:15	1369:15	11	tif
LEAF_NODE	1369:18	1369:18	11	->
LEAF_NODE	1369:20	1369:20	11	tif_clientdata
LEAF_NODE	1369:34	1369:34	9	,
ARGUMENT	1369:35	1369:35	9	module
FIELD	1369:35	1369:35	10	module
LEAF_NODE	1369:35	1369:35	11	module
LEAF_NODE	1369:41	1369:41	9	,
ARGUMENT	1369:42	1369:42	9	"Out of memory"
FIELD	1369:42	1369:42	10	"Out of memory"
LEAF_NODE	1369:42	1369:42	11	"Out of memory"
LEAF_NODE	1369:57	1369:57	9	)
LEAF_NODE	1369:58	1369:58	7	;
JUMP_STATEMENT	1370:2	1370:11	6	return ( 0 ) ;
KEYWORD	1370:2	1370:2	7	return
LEAF_NODE	1370:2	1370:2	8	return
DESTINATION	1370:8	1370:8	7	( 0 )
EXPR	1370:8	1370:10	8	( 0 )
LEAF_NODE	1370:8	1370:8	9	(
FIELD	1370:9	1370:9	9	0
LEAF_NODE	1370:9	1370:9	10	0
LEAF_NODE	1370:10	1370:10	9	)
LEAF_NODE	1370:11	1370:11	7	;
LEAF_NODE	1371:1	1371:1	5	}
ITERATION	1372:1	1373:2	3	
KEYWORD	1372:1	1372:1	4	for
LEAF_NODE	1372:1	1372:1	5	for
LEAF_NODE	1372:5	1372:5	4	(
FOR_INIT	1372:6	1372:16	4	na = m , nb = 0 ;
EXPR	1372:6	1372:12	5	na = m , nb = 0
ASSIGN	1372:6	1372:9	6	na = m
LVAL	1372:6	1372:6	7	na
FIELD	1372:6	1372:6	8	na
LEAF_NODE	1372:6	1372:6	9	na
ASSIGN_OP	1372:8	1372:8	7	=
LEAF_NODE	1372:8	1372:8	8	=
RVAL	1372:9	1372:9	7	m
FIELD	1372:9	1372:9	8	m
LEAF_NODE	1372:9	1372:9	9	m
LEAF_NODE	1372:10	1372:10	6	,
ASSIGN	1372:12	1372:15	6	nb = 0
LVAL	1372:12	1372:12	7	nb
FIELD	1372:12	1372:12	8	nb
LEAF_NODE	1372:12	1372:12	9	nb
ASSIGN_OP	1372:14	1372:14	7	=
LEAF_NODE	1372:14	1372:14	8	=
RVAL	1372:15	1372:15	7	0
FIELD	1372:15	1372:15	8	0
LEAF_NODE	1372:15	1372:15	9	0
LEAF_NODE	1372:16	1372:16	5	;
CONDITION	1372:18	1372:18	4	nb < tif -> tif_dir . td_samplesperpixel
EXPR	1372:18	1372:21	5	nb < tif -> tif_dir . td_samplesperpixel
FIELD	1372:18	1372:18	6	nb
LEAF_NODE	1372:18	1372:18	7	nb
REL_OPERATOR	1372:20	1372:20	6	<
LEAF_NODE	1372:20	1372:20	7	<
FIELD	1372:21	1372:34	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1372:21	1372:21	7	tif
LEAF_NODE	1372:24	1372:24	7	->
LEAF_NODE	1372:26	1372:26	7	tif_dir
LEAF_NODE	1372:33	1372:33	7	.
LEAF_NODE	1372:34	1372:34	7	td_samplesperpixel
LEAF_NODE	1372:52	1372:52	4	;
FOR_EXPR	1372:54	1372:54	4	na ++ , nb ++
EXPR	1372:54	1372:60	5	na ++ , nb ++
FIELD	1372:54	1372:56	6	na ++
LEAF_NODE	1372:54	1372:54	7	na
LEAF_NODE	1372:56	1372:56	7	++
LEAF_NODE	1372:58	1372:58	6	,
FIELD	1372:60	1372:62	6	nb ++
LEAF_NODE	1372:60	1372:60	7	nb
LEAF_NODE	1372:62	1372:62	7	++
LEAF_NODE	1372:64	1372:64	4	)
STATEMENTS	1373:2	1373:2	4	
EXPR_STATEMENT	1373:2	1373:11	5	* na = value ;
EXPR	1373:2	1373:2	6	* na = value
ASSIGN	1373:2	1373:6	7	* na = value
LVAL	1373:2	1373:2	8	* na
UNARY_EXPR	1373:2	1373:3	9	* na
UNARY_OPERATOR	1373:2	1373:2	10	*
LEAF_NODE	1373:2	1373:2	11	*
FIELD	1373:3	1373:3	10	na
LEAF_NODE	1373:3	1373:3	11	na
ASSIGN_OP	1373:5	1373:5	8	=
LEAF_NODE	1373:5	1373:5	9	=
RVAL	1373:6	1373:6	8	value
FIELD	1373:6	1373:6	9	value
LEAF_NODE	1373:6	1373:6	10	value
LEAF_NODE	1373:11	1373:11	6	;
EXPR_STATEMENT	1374:1	1374:94	3	o = TIFFWriteDirectoryTagCheckedSshortArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m ) ;
EXPR	1374:1	1374:1	4	o = TIFFWriteDirectoryTagCheckedSshortArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
ASSIGN	1374:1	1374:3	5	o = TIFFWriteDirectoryTagCheckedSshortArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
LVAL	1374:1	1374:1	6	o
FIELD	1374:1	1374:1	7	o
LEAF_NODE	1374:1	1374:1	8	o
ASSIGN_OP	1374:2	1374:2	6	=
LEAF_NODE	1374:2	1374:2	7	=
RVAL	1374:3	1374:3	6	TIFFWriteDirectoryTagCheckedSshortArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
FUNCTION_CALL	1374:3	1374:93	7	TIFFWriteDirectoryTagCheckedSshortArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
CALLEE	1374:3	1374:3	8	TIFFWriteDirectoryTagCheckedSshortArray
LEAF_NODE	1374:3	1374:3	9	TIFFWriteDirectoryTagCheckedSshortArray
LEAF_NODE	1374:42	1374:42	8	(
ARGUMENT	1374:43	1374:43	8	tif
FIELD	1374:43	1374:43	9	tif
LEAF_NODE	1374:43	1374:43	10	tif
LEAF_NODE	1374:46	1374:46	8	,
ARGUMENT	1374:47	1374:47	8	ndir
FIELD	1374:47	1374:47	9	ndir
LEAF_NODE	1374:47	1374:47	10	ndir
LEAF_NODE	1374:51	1374:51	8	,
ARGUMENT	1374:52	1374:52	8	dir
FIELD	1374:52	1374:52	9	dir
LEAF_NODE	1374:52	1374:52	10	dir
LEAF_NODE	1374:55	1374:55	8	,
ARGUMENT	1374:56	1374:56	8	tag
FIELD	1374:56	1374:56	9	tag
LEAF_NODE	1374:56	1374:56	10	tag
LEAF_NODE	1374:59	1374:59	8	,
ARGUMENT	1374:60	1374:60	8	tif -> tif_dir . td_samplesperpixel
FIELD	1374:60	1374:73	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1374:60	1374:60	10	tif
LEAF_NODE	1374:63	1374:63	10	->
LEAF_NODE	1374:65	1374:65	10	tif_dir
LEAF_NODE	1374:72	1374:72	10	.
LEAF_NODE	1374:73	1374:73	10	td_samplesperpixel
LEAF_NODE	1374:91	1374:91	8	,
ARGUMENT	1374:92	1374:92	8	m
FIELD	1374:92	1374:92	9	m
LEAF_NODE	1374:92	1374:92	10	m
LEAF_NODE	1374:93	1374:93	8	)
LEAF_NODE	1374:94	1374:94	4	;
EXPR_STATEMENT	1375:1	1375:13	3	_TIFFfree ( m ) ;
EXPR	1375:1	1375:1	4	_TIFFfree ( m )
FUNCTION_CALL	1375:1	1375:12	5	_TIFFfree ( m )
CALLEE	1375:1	1375:1	6	_TIFFfree
LEAF_NODE	1375:1	1375:1	7	_TIFFfree
LEAF_NODE	1375:10	1375:10	6	(
ARGUMENT	1375:11	1375:11	6	m
FIELD	1375:11	1375:11	7	m
LEAF_NODE	1375:11	1375:11	8	m
LEAF_NODE	1375:12	1375:12	6	)
LEAF_NODE	1375:13	1375:13	4	;
LEAF_NODE	1376:1	1376:1	3	return
LEAF_NODE	1376:7	1376:7	3	(
LEAF_NODE	1376:8	1376:8	3	o
LEAF_NODE	1376:9	1376:9	3	)
LEAF_NODE	1376:10	1376:10	3	;
LEAF_NODE	1377:0	1377:0	2	}
FUNCTION_DEF	1380:0	1389:0	1	
RETURN_TYPE	1380:0	1380:7	2	static int
LEAF_NODE	1380:0	1380:0	3	static
TYPE_NAME	1380:7	1380:7	3	int
LEAF_NODE	1380:7	1380:7	4	int
FUNCTION_NAME	1381:0	1381:0	2	TIFFWriteDirectoryTagLong
LEAF_NODE	1381:0	1381:0	3	TIFFWriteDirectoryTagLong
PARAMETER_LIST	1381:25	1381:94	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 value )
LEAF_NODE	1381:25	1381:25	3	(
PARAMETER_DECL	1381:26	1381:32	3	TIFF * tif
TYPE	1381:26	1381:30	4	TIFF *
TYPE_NAME	1381:26	1381:26	5	TIFF
LEAF_NODE	1381:26	1381:26	6	TIFF
POINTER	1381:30	1381:30	5	*
LEAF_NODE	1381:30	1381:30	6	*
NAME	1381:32	1381:32	4	tif
LEAF_NODE	1381:32	1381:32	5	tif
LEAF_NODE	1381:35	1381:35	3	,
PARAMETER_DECL	1381:37	1381:45	3	uint32 * ndir
TYPE	1381:37	1381:43	4	uint32 *
TYPE_NAME	1381:37	1381:37	5	uint32
LEAF_NODE	1381:37	1381:37	6	uint32
POINTER	1381:43	1381:43	5	*
LEAF_NODE	1381:43	1381:43	6	*
NAME	1381:45	1381:45	4	ndir
LEAF_NODE	1381:45	1381:45	5	ndir
LEAF_NODE	1381:49	1381:49	3	,
PARAMETER_DECL	1381:51	1381:65	3	TIFFDirEntry * dir
TYPE	1381:51	1381:63	4	TIFFDirEntry *
TYPE_NAME	1381:51	1381:51	5	TIFFDirEntry
LEAF_NODE	1381:51	1381:51	6	TIFFDirEntry
POINTER	1381:63	1381:63	5	*
LEAF_NODE	1381:63	1381:63	6	*
NAME	1381:65	1381:65	4	dir
LEAF_NODE	1381:65	1381:65	5	dir
LEAF_NODE	1381:68	1381:68	3	,
PARAMETER_DECL	1381:70	1381:77	3	uint16 tag
TYPE	1381:70	1381:70	4	uint16
TYPE_NAME	1381:70	1381:70	5	uint16
LEAF_NODE	1381:70	1381:70	6	uint16
NAME	1381:77	1381:77	4	tag
LEAF_NODE	1381:77	1381:77	5	tag
LEAF_NODE	1381:80	1381:80	3	,
PARAMETER_DECL	1381:82	1381:89	3	uint32 value
TYPE	1381:82	1381:82	4	uint32
TYPE_NAME	1381:82	1381:82	5	uint32
LEAF_NODE	1381:82	1381:82	6	uint32
NAME	1381:89	1381:89	4	value
LEAF_NODE	1381:89	1381:89	5	value
LEAF_NODE	1381:94	1381:94	3	)
LEAF_NODE	1382:0	1382:0	2	{
STATEMENTS	1383:1	1388:1	2	
SELECTION	1383:1	1384:1	3	
KEYWORD	1383:1	1383:1	4	if
LEAF_NODE	1383:1	1383:1	5	if
LEAF_NODE	1383:4	1383:4	4	(
CONDITION	1383:5	1383:5	4	dir == NULL
EXPR	1383:5	1383:10	5	dir == NULL
FIELD	1383:5	1383:5	6	dir
LEAF_NODE	1383:5	1383:5	7	dir
EQ_OPERATOR	1383:8	1383:8	6	==
LEAF_NODE	1383:8	1383:8	7	==
FIELD	1383:10	1383:10	6	NULL
LEAF_NODE	1383:10	1383:10	7	NULL
LEAF_NODE	1383:14	1383:14	4	)
STATEMENTS	1384:1	1387:1	4	
LEAF_NODE	1384:1	1384:1	5	{
STATEMENTS	1385:2	1386:2	5	
EXPR_STATEMENT	1385:2	1385:11	6	( * ndir ) ++ ;
EXPR	1385:2	1385:9	7	( * ndir ) ++
LEAF_NODE	1385:2	1385:2	8	(
UNARY_EXPR	1385:3	1385:4	8	* ndir
UNARY_OPERATOR	1385:3	1385:3	9	*
LEAF_NODE	1385:3	1385:3	10	*
FIELD	1385:4	1385:4	9	ndir
LEAF_NODE	1385:4	1385:4	10	ndir
LEAF_NODE	1385:8	1385:8	8	)
LEAF_NODE	1385:9	1385:9	8	++
LEAF_NODE	1385:11	1385:11	7	;
JUMP_STATEMENT	1386:2	1386:11	6	return ( 1 ) ;
KEYWORD	1386:2	1386:2	7	return
LEAF_NODE	1386:2	1386:2	8	return
DESTINATION	1386:8	1386:8	7	( 1 )
EXPR	1386:8	1386:10	8	( 1 )
LEAF_NODE	1386:8	1386:8	9	(
FIELD	1386:9	1386:9	9	1
LEAF_NODE	1386:9	1386:9	10	1
LEAF_NODE	1386:10	1386:10	9	)
LEAF_NODE	1386:11	1386:11	7	;
LEAF_NODE	1387:1	1387:1	5	}
JUMP_STATEMENT	1388:1	1388:65	3	return ( TIFFWriteDirectoryTagCheckedLong ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1388:1	1388:1	4	return
LEAF_NODE	1388:1	1388:1	5	return
DESTINATION	1388:7	1388:7	4	( TIFFWriteDirectoryTagCheckedLong ( tif , ndir , dir , tag , value ) )
EXPR	1388:7	1388:64	5	( TIFFWriteDirectoryTagCheckedLong ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1388:7	1388:7	6	(
FUNCTION_CALL	1388:8	1388:63	6	TIFFWriteDirectoryTagCheckedLong ( tif , ndir , dir , tag , value )
CALLEE	1388:8	1388:8	7	TIFFWriteDirectoryTagCheckedLong
LEAF_NODE	1388:8	1388:8	8	TIFFWriteDirectoryTagCheckedLong
LEAF_NODE	1388:40	1388:40	7	(
ARGUMENT	1388:41	1388:41	7	tif
FIELD	1388:41	1388:41	8	tif
LEAF_NODE	1388:41	1388:41	9	tif
LEAF_NODE	1388:44	1388:44	7	,
ARGUMENT	1388:45	1388:45	7	ndir
FIELD	1388:45	1388:45	8	ndir
LEAF_NODE	1388:45	1388:45	9	ndir
LEAF_NODE	1388:49	1388:49	7	,
ARGUMENT	1388:50	1388:50	7	dir
FIELD	1388:50	1388:50	8	dir
LEAF_NODE	1388:50	1388:50	9	dir
LEAF_NODE	1388:53	1388:53	7	,
ARGUMENT	1388:54	1388:54	7	tag
FIELD	1388:54	1388:54	8	tag
LEAF_NODE	1388:54	1388:54	9	tag
LEAF_NODE	1388:57	1388:57	7	,
ARGUMENT	1388:58	1388:58	7	value
FIELD	1388:58	1388:58	8	value
LEAF_NODE	1388:58	1388:58	9	value
LEAF_NODE	1388:63	1388:63	7	)
LEAF_NODE	1388:64	1388:64	6	)
LEAF_NODE	1388:65	1388:65	4	;
LEAF_NODE	1389:0	1389:0	2	}
FUNCTION_DEF	1391:0	1400:0	1	
RETURN_TYPE	1391:0	1391:7	2	static int
LEAF_NODE	1391:0	1391:0	3	static
TYPE_NAME	1391:7	1391:7	3	int
LEAF_NODE	1391:7	1391:7	4	int
FUNCTION_NAME	1392:0	1392:0	2	TIFFWriteDirectoryTagLongArray
LEAF_NODE	1392:0	1392:0	3	TIFFWriteDirectoryTagLongArray
PARAMETER_LIST	1392:30	1392:114	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint32 * value )
LEAF_NODE	1392:30	1392:30	3	(
PARAMETER_DECL	1392:31	1392:37	3	TIFF * tif
TYPE	1392:31	1392:35	4	TIFF *
TYPE_NAME	1392:31	1392:31	5	TIFF
LEAF_NODE	1392:31	1392:31	6	TIFF
POINTER	1392:35	1392:35	5	*
LEAF_NODE	1392:35	1392:35	6	*
NAME	1392:37	1392:37	4	tif
LEAF_NODE	1392:37	1392:37	5	tif
LEAF_NODE	1392:40	1392:40	3	,
PARAMETER_DECL	1392:42	1392:50	3	uint32 * ndir
TYPE	1392:42	1392:48	4	uint32 *
TYPE_NAME	1392:42	1392:42	5	uint32
LEAF_NODE	1392:42	1392:42	6	uint32
POINTER	1392:48	1392:48	5	*
LEAF_NODE	1392:48	1392:48	6	*
NAME	1392:50	1392:50	4	ndir
LEAF_NODE	1392:50	1392:50	5	ndir
LEAF_NODE	1392:54	1392:54	3	,
PARAMETER_DECL	1392:56	1392:70	3	TIFFDirEntry * dir
TYPE	1392:56	1392:68	4	TIFFDirEntry *
TYPE_NAME	1392:56	1392:56	5	TIFFDirEntry
LEAF_NODE	1392:56	1392:56	6	TIFFDirEntry
POINTER	1392:68	1392:68	5	*
LEAF_NODE	1392:68	1392:68	6	*
NAME	1392:70	1392:70	4	dir
LEAF_NODE	1392:70	1392:70	5	dir
LEAF_NODE	1392:73	1392:73	3	,
PARAMETER_DECL	1392:75	1392:82	3	uint16 tag
TYPE	1392:75	1392:75	4	uint16
TYPE_NAME	1392:75	1392:75	5	uint16
LEAF_NODE	1392:75	1392:75	6	uint16
NAME	1392:82	1392:82	4	tag
LEAF_NODE	1392:82	1392:82	5	tag
LEAF_NODE	1392:85	1392:85	3	,
PARAMETER_DECL	1392:87	1392:94	3	uint32 count
TYPE	1392:87	1392:87	4	uint32
TYPE_NAME	1392:87	1392:87	5	uint32
LEAF_NODE	1392:87	1392:87	6	uint32
NAME	1392:94	1392:94	4	count
LEAF_NODE	1392:94	1392:94	5	count
LEAF_NODE	1392:99	1392:99	3	,
PARAMETER_DECL	1392:101	1392:109	3	uint32 * value
TYPE	1392:101	1392:107	4	uint32 *
TYPE_NAME	1392:101	1392:101	5	uint32
LEAF_NODE	1392:101	1392:101	6	uint32
POINTER	1392:107	1392:107	5	*
LEAF_NODE	1392:107	1392:107	6	*
NAME	1392:109	1392:109	4	value
LEAF_NODE	1392:109	1392:109	5	value
LEAF_NODE	1392:114	1392:114	3	)
LEAF_NODE	1393:0	1393:0	2	{
STATEMENTS	1394:1	1399:1	2	
SELECTION	1394:1	1395:1	3	
KEYWORD	1394:1	1394:1	4	if
LEAF_NODE	1394:1	1394:1	5	if
LEAF_NODE	1394:4	1394:4	4	(
CONDITION	1394:5	1394:5	4	dir == NULL
EXPR	1394:5	1394:10	5	dir == NULL
FIELD	1394:5	1394:5	6	dir
LEAF_NODE	1394:5	1394:5	7	dir
EQ_OPERATOR	1394:8	1394:8	6	==
LEAF_NODE	1394:8	1394:8	7	==
FIELD	1394:10	1394:10	6	NULL
LEAF_NODE	1394:10	1394:10	7	NULL
LEAF_NODE	1394:14	1394:14	4	)
STATEMENTS	1395:1	1398:1	4	
LEAF_NODE	1395:1	1395:1	5	{
STATEMENTS	1396:2	1397:2	5	
EXPR_STATEMENT	1396:2	1396:11	6	( * ndir ) ++ ;
EXPR	1396:2	1396:9	7	( * ndir ) ++
LEAF_NODE	1396:2	1396:2	8	(
UNARY_EXPR	1396:3	1396:4	8	* ndir
UNARY_OPERATOR	1396:3	1396:3	9	*
LEAF_NODE	1396:3	1396:3	10	*
FIELD	1396:4	1396:4	9	ndir
LEAF_NODE	1396:4	1396:4	10	ndir
LEAF_NODE	1396:8	1396:8	8	)
LEAF_NODE	1396:9	1396:9	8	++
LEAF_NODE	1396:11	1396:11	7	;
JUMP_STATEMENT	1397:2	1397:11	6	return ( 1 ) ;
KEYWORD	1397:2	1397:2	7	return
LEAF_NODE	1397:2	1397:2	8	return
DESTINATION	1397:8	1397:8	7	( 1 )
EXPR	1397:8	1397:10	8	( 1 )
LEAF_NODE	1397:8	1397:8	9	(
FIELD	1397:9	1397:9	9	1
LEAF_NODE	1397:9	1397:9	10	1
LEAF_NODE	1397:10	1397:10	9	)
LEAF_NODE	1397:11	1397:11	7	;
LEAF_NODE	1398:1	1398:1	5	}
JUMP_STATEMENT	1399:1	1399:76	3	return ( TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1399:1	1399:1	4	return
LEAF_NODE	1399:1	1399:1	5	return
DESTINATION	1399:7	1399:7	4	( TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1399:7	1399:75	5	( TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1399:7	1399:7	6	(
FUNCTION_CALL	1399:8	1399:74	6	TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , value )
CALLEE	1399:8	1399:8	7	TIFFWriteDirectoryTagCheckedLongArray
LEAF_NODE	1399:8	1399:8	8	TIFFWriteDirectoryTagCheckedLongArray
LEAF_NODE	1399:45	1399:45	7	(
ARGUMENT	1399:46	1399:46	7	tif
FIELD	1399:46	1399:46	8	tif
LEAF_NODE	1399:46	1399:46	9	tif
LEAF_NODE	1399:49	1399:49	7	,
ARGUMENT	1399:50	1399:50	7	ndir
FIELD	1399:50	1399:50	8	ndir
LEAF_NODE	1399:50	1399:50	9	ndir
LEAF_NODE	1399:54	1399:54	7	,
ARGUMENT	1399:55	1399:55	7	dir
FIELD	1399:55	1399:55	8	dir
LEAF_NODE	1399:55	1399:55	9	dir
LEAF_NODE	1399:58	1399:58	7	,
ARGUMENT	1399:59	1399:59	7	tag
FIELD	1399:59	1399:59	8	tag
LEAF_NODE	1399:59	1399:59	9	tag
LEAF_NODE	1399:62	1399:62	7	,
ARGUMENT	1399:63	1399:63	7	count
FIELD	1399:63	1399:63	8	count
LEAF_NODE	1399:63	1399:63	9	count
LEAF_NODE	1399:68	1399:68	7	,
ARGUMENT	1399:69	1399:69	7	value
FIELD	1399:69	1399:69	8	value
LEAF_NODE	1399:69	1399:69	9	value
LEAF_NODE	1399:74	1399:74	7	)
LEAF_NODE	1399:75	1399:75	6	)
LEAF_NODE	1399:76	1399:76	4	;
LEAF_NODE	1400:0	1400:0	2	}
FUNCTION_DEF	1403:0	1427:0	1	
RETURN_TYPE	1403:0	1403:7	2	static int
LEAF_NODE	1403:0	1403:0	3	static
TYPE_NAME	1403:7	1403:7	3	int
LEAF_NODE	1403:7	1403:7	4	int
FUNCTION_NAME	1404:0	1404:0	2	TIFFWriteDirectoryTagLongPerSample
LEAF_NODE	1404:0	1404:0	3	TIFFWriteDirectoryTagLongPerSample
PARAMETER_LIST	1404:34	1404:103	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 value )
LEAF_NODE	1404:34	1404:34	3	(
PARAMETER_DECL	1404:35	1404:41	3	TIFF * tif
TYPE	1404:35	1404:39	4	TIFF *
TYPE_NAME	1404:35	1404:35	5	TIFF
LEAF_NODE	1404:35	1404:35	6	TIFF
POINTER	1404:39	1404:39	5	*
LEAF_NODE	1404:39	1404:39	6	*
NAME	1404:41	1404:41	4	tif
LEAF_NODE	1404:41	1404:41	5	tif
LEAF_NODE	1404:44	1404:44	3	,
PARAMETER_DECL	1404:46	1404:54	3	uint32 * ndir
TYPE	1404:46	1404:52	4	uint32 *
TYPE_NAME	1404:46	1404:46	5	uint32
LEAF_NODE	1404:46	1404:46	6	uint32
POINTER	1404:52	1404:52	5	*
LEAF_NODE	1404:52	1404:52	6	*
NAME	1404:54	1404:54	4	ndir
LEAF_NODE	1404:54	1404:54	5	ndir
LEAF_NODE	1404:58	1404:58	3	,
PARAMETER_DECL	1404:60	1404:74	3	TIFFDirEntry * dir
TYPE	1404:60	1404:72	4	TIFFDirEntry *
TYPE_NAME	1404:60	1404:60	5	TIFFDirEntry
LEAF_NODE	1404:60	1404:60	6	TIFFDirEntry
POINTER	1404:72	1404:72	5	*
LEAF_NODE	1404:72	1404:72	6	*
NAME	1404:74	1404:74	4	dir
LEAF_NODE	1404:74	1404:74	5	dir
LEAF_NODE	1404:77	1404:77	3	,
PARAMETER_DECL	1404:79	1404:86	3	uint16 tag
TYPE	1404:79	1404:79	4	uint16
TYPE_NAME	1404:79	1404:79	5	uint16
LEAF_NODE	1404:79	1404:79	6	uint16
NAME	1404:86	1404:86	4	tag
LEAF_NODE	1404:86	1404:86	5	tag
LEAF_NODE	1404:89	1404:89	3	,
PARAMETER_DECL	1404:91	1404:98	3	uint32 value
TYPE	1404:91	1404:91	4	uint32
TYPE_NAME	1404:91	1404:91	5	uint32
LEAF_NODE	1404:91	1404:91	6	uint32
NAME	1404:98	1404:98	4	value
LEAF_NODE	1404:98	1404:98	5	value
LEAF_NODE	1404:103	1404:103	3	)
LEAF_NODE	1405:0	1405:0	2	{
STATEMENTS	1406:1	1426:10	2	
LEAF_NODE	1406:1	1406:1	3	static
SIMPLE_DECL	1406:8	1406:66	3	const char [ ] module ; module = "TIFFWriteDirectoryTagLongPerSample" ;
VAR_DECL	1406:8	1406:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagLongPerSample"
TYPE	1406:8	1406:25	5	const char [ ]
TYPE_NAME	1406:8	1406:14	6	const char
LEAF_NODE	1406:8	1406:8	7	const
LEAF_NODE	1406:14	1406:14	7	char
TYPE_SUFFIX	1406:25	1406:26	6	[ ]
LEAF_NODE	1406:25	1406:25	7	[
LEAF_NODE	1406:26	1406:26	7	]
NAME	1406:19	1406:19	5	module
LEAF_NODE	1406:19	1406:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1406:19	1406:19	5	module = "TIFFWriteDirectoryTagLongPerSample"
ASSIGN	1406:19	1406:30	6	module = "TIFFWriteDirectoryTagLongPerSample"
LVAL	1406:19	1406:19	7	module
NAME	1406:19	1406:19	8	module
LEAF_NODE	1406:19	1406:19	9	module
ASSIGN_OP	1406:28	1406:28	7	=
LEAF_NODE	1406:28	1406:28	8	=
RVAL	1406:30	1406:30	7	"TIFFWriteDirectoryTagLongPerSample"
FIELD	1406:30	1406:30	8	"TIFFWriteDirectoryTagLongPerSample"
LEAF_NODE	1406:30	1406:30	9	"TIFFWriteDirectoryTagLongPerSample"
LEAF_NODE	1406:66	1406:66	4	;
SIMPLE_DECL	1407:1	1407:10	3	uint32 * m ;
VAR_DECL	1407:1	1407:9	4	uint32 * m
TYPE	1407:1	1407:7	5	uint32 *
TYPE_NAME	1407:1	1407:1	6	uint32
LEAF_NODE	1407:1	1407:1	7	uint32
POINTER	1407:7	1407:7	6	*
LEAF_NODE	1407:7	1407:7	7	*
NAME	1407:9	1407:9	5	m
LEAF_NODE	1407:9	1407:9	6	m
LEAF_NODE	1407:10	1407:10	4	;
SIMPLE_DECL	1408:1	1408:11	3	uint32 * na ;
VAR_DECL	1408:1	1408:9	4	uint32 * na
TYPE	1408:1	1408:7	5	uint32 *
TYPE_NAME	1408:1	1408:1	6	uint32
LEAF_NODE	1408:1	1408:1	7	uint32
POINTER	1408:7	1408:7	6	*
LEAF_NODE	1408:7	1408:7	7	*
NAME	1408:9	1408:9	5	na
LEAF_NODE	1408:9	1408:9	6	na
LEAF_NODE	1408:11	1408:11	4	;
SIMPLE_DECL	1409:1	1409:10	3	uint16 nb ;
VAR_DECL	1409:1	1409:8	4	uint16 nb
TYPE	1409:1	1409:1	5	uint16
TYPE_NAME	1409:1	1409:1	6	uint16
LEAF_NODE	1409:1	1409:1	7	uint16
NAME	1409:8	1409:8	5	nb
LEAF_NODE	1409:8	1409:8	6	nb
LEAF_NODE	1409:10	1409:10	4	;
SIMPLE_DECL	1410:1	1410:6	3	int o ;
VAR_DECL	1410:1	1410:5	4	int o
TYPE	1410:1	1410:1	5	int
TYPE_NAME	1410:1	1410:1	6	int
LEAF_NODE	1410:1	1410:1	7	int
NAME	1410:5	1410:5	5	o
LEAF_NODE	1410:5	1410:5	6	o
LEAF_NODE	1410:6	1410:6	4	;
SELECTION	1411:1	1412:1	3	
KEYWORD	1411:1	1411:1	4	if
LEAF_NODE	1411:1	1411:1	5	if
LEAF_NODE	1411:4	1411:4	4	(
CONDITION	1411:5	1411:5	4	dir == NULL
EXPR	1411:5	1411:10	5	dir == NULL
FIELD	1411:5	1411:5	6	dir
LEAF_NODE	1411:5	1411:5	7	dir
EQ_OPERATOR	1411:8	1411:8	6	==
LEAF_NODE	1411:8	1411:8	7	==
FIELD	1411:10	1411:10	6	NULL
LEAF_NODE	1411:10	1411:10	7	NULL
LEAF_NODE	1411:14	1411:14	4	)
STATEMENTS	1412:1	1415:1	4	
LEAF_NODE	1412:1	1412:1	5	{
STATEMENTS	1413:2	1414:2	5	
EXPR_STATEMENT	1413:2	1413:11	6	( * ndir ) ++ ;
EXPR	1413:2	1413:9	7	( * ndir ) ++
LEAF_NODE	1413:2	1413:2	8	(
UNARY_EXPR	1413:3	1413:4	8	* ndir
UNARY_OPERATOR	1413:3	1413:3	9	*
LEAF_NODE	1413:3	1413:3	10	*
FIELD	1413:4	1413:4	9	ndir
LEAF_NODE	1413:4	1413:4	10	ndir
LEAF_NODE	1413:8	1413:8	8	)
LEAF_NODE	1413:9	1413:9	8	++
LEAF_NODE	1413:11	1413:11	7	;
JUMP_STATEMENT	1414:2	1414:11	6	return ( 1 ) ;
KEYWORD	1414:2	1414:2	7	return
LEAF_NODE	1414:2	1414:2	8	return
DESTINATION	1414:8	1414:8	7	( 1 )
EXPR	1414:8	1414:10	8	( 1 )
LEAF_NODE	1414:8	1414:8	9	(
FIELD	1414:9	1414:9	9	1
LEAF_NODE	1414:9	1414:9	10	1
LEAF_NODE	1414:10	1414:10	9	)
LEAF_NODE	1414:11	1414:11	7	;
LEAF_NODE	1415:1	1415:1	5	}
EXPR_STATEMENT	1416:1	1416:62	3	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint32 ) ) ;
EXPR	1416:1	1416:1	4	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint32 ) )
ASSIGN	1416:1	1416:3	5	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint32 ) )
LVAL	1416:1	1416:1	6	m
FIELD	1416:1	1416:1	7	m
LEAF_NODE	1416:1	1416:1	8	m
ASSIGN_OP	1416:2	1416:2	6	=
LEAF_NODE	1416:2	1416:2	7	=
RVAL	1416:3	1416:3	6	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint32 ) )
FUNCTION_CALL	1416:3	1416:61	7	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( uint32 ) )
CALLEE	1416:3	1416:3	8	_TIFFmalloc
LEAF_NODE	1416:3	1416:3	9	_TIFFmalloc
LEAF_NODE	1416:14	1416:14	8	(
ARGUMENT	1416:15	1416:47	8	tif -> tif_dir . td_samplesperpixel * sizeof ( uint32 )
FIELD	1416:15	1416:28	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1416:15	1416:15	10	tif
LEAF_NODE	1416:18	1416:18	10	->
LEAF_NODE	1416:20	1416:20	10	tif_dir
LEAF_NODE	1416:27	1416:27	10	.
LEAF_NODE	1416:28	1416:28	10	td_samplesperpixel
LEAF_NODE	1416:46	1416:46	9	*
FUNCTION_CALL	1416:47	1416:60	9	sizeof ( uint32 )
CALLEE	1416:47	1416:47	10	sizeof
LEAF_NODE	1416:47	1416:47	11	sizeof
LEAF_NODE	1416:53	1416:53	10	(
ARGUMENT	1416:54	1416:54	10	uint32
FIELD	1416:54	1416:54	11	uint32
LEAF_NODE	1416:54	1416:54	12	uint32
LEAF_NODE	1416:60	1416:60	10	)
LEAF_NODE	1416:61	1416:61	8	)
LEAF_NODE	1416:62	1416:62	4	;
SELECTION	1417:1	1418:1	3	
KEYWORD	1417:1	1417:1	4	if
LEAF_NODE	1417:1	1417:1	5	if
LEAF_NODE	1417:4	1417:4	4	(
CONDITION	1417:5	1417:5	4	m == NULL
EXPR	1417:5	1417:8	5	m == NULL
FIELD	1417:5	1417:5	6	m
LEAF_NODE	1417:5	1417:5	7	m
EQ_OPERATOR	1417:6	1417:6	6	==
LEAF_NODE	1417:6	1417:6	7	==
FIELD	1417:8	1417:8	6	NULL
LEAF_NODE	1417:8	1417:8	7	NULL
LEAF_NODE	1417:12	1417:12	4	)
STATEMENTS	1418:1	1421:1	4	
LEAF_NODE	1418:1	1418:1	5	{
STATEMENTS	1419:2	1420:2	5	
EXPR_STATEMENT	1419:2	1419:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1419:2	1419:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1419:2	1419:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1419:2	1419:2	9	TIFFErrorExt
LEAF_NODE	1419:2	1419:2	10	TIFFErrorExt
LEAF_NODE	1419:14	1419:14	9	(
ARGUMENT	1419:15	1419:15	9	tif -> tif_clientdata
FIELD	1419:15	1419:20	10	tif -> tif_clientdata
LEAF_NODE	1419:15	1419:15	11	tif
LEAF_NODE	1419:18	1419:18	11	->
LEAF_NODE	1419:20	1419:20	11	tif_clientdata
LEAF_NODE	1419:34	1419:34	9	,
ARGUMENT	1419:35	1419:35	9	module
FIELD	1419:35	1419:35	10	module
LEAF_NODE	1419:35	1419:35	11	module
LEAF_NODE	1419:41	1419:41	9	,
ARGUMENT	1419:42	1419:42	9	"Out of memory"
FIELD	1419:42	1419:42	10	"Out of memory"
LEAF_NODE	1419:42	1419:42	11	"Out of memory"
LEAF_NODE	1419:57	1419:57	9	)
LEAF_NODE	1419:58	1419:58	7	;
JUMP_STATEMENT	1420:2	1420:11	6	return ( 0 ) ;
KEYWORD	1420:2	1420:2	7	return
LEAF_NODE	1420:2	1420:2	8	return
DESTINATION	1420:8	1420:8	7	( 0 )
EXPR	1420:8	1420:10	8	( 0 )
LEAF_NODE	1420:8	1420:8	9	(
FIELD	1420:9	1420:9	9	0
LEAF_NODE	1420:9	1420:9	10	0
LEAF_NODE	1420:10	1420:10	9	)
LEAF_NODE	1420:11	1420:11	7	;
LEAF_NODE	1421:1	1421:1	5	}
ITERATION	1422:1	1423:2	3	
KEYWORD	1422:1	1422:1	4	for
LEAF_NODE	1422:1	1422:1	5	for
LEAF_NODE	1422:5	1422:5	4	(
FOR_INIT	1422:6	1422:16	4	na = m , nb = 0 ;
EXPR	1422:6	1422:12	5	na = m , nb = 0
ASSIGN	1422:6	1422:9	6	na = m
LVAL	1422:6	1422:6	7	na
FIELD	1422:6	1422:6	8	na
LEAF_NODE	1422:6	1422:6	9	na
ASSIGN_OP	1422:8	1422:8	7	=
LEAF_NODE	1422:8	1422:8	8	=
RVAL	1422:9	1422:9	7	m
FIELD	1422:9	1422:9	8	m
LEAF_NODE	1422:9	1422:9	9	m
LEAF_NODE	1422:10	1422:10	6	,
ASSIGN	1422:12	1422:15	6	nb = 0
LVAL	1422:12	1422:12	7	nb
FIELD	1422:12	1422:12	8	nb
LEAF_NODE	1422:12	1422:12	9	nb
ASSIGN_OP	1422:14	1422:14	7	=
LEAF_NODE	1422:14	1422:14	8	=
RVAL	1422:15	1422:15	7	0
FIELD	1422:15	1422:15	8	0
LEAF_NODE	1422:15	1422:15	9	0
LEAF_NODE	1422:16	1422:16	5	;
CONDITION	1422:18	1422:18	4	nb < tif -> tif_dir . td_samplesperpixel
EXPR	1422:18	1422:21	5	nb < tif -> tif_dir . td_samplesperpixel
FIELD	1422:18	1422:18	6	nb
LEAF_NODE	1422:18	1422:18	7	nb
REL_OPERATOR	1422:20	1422:20	6	<
LEAF_NODE	1422:20	1422:20	7	<
FIELD	1422:21	1422:34	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1422:21	1422:21	7	tif
LEAF_NODE	1422:24	1422:24	7	->
LEAF_NODE	1422:26	1422:26	7	tif_dir
LEAF_NODE	1422:33	1422:33	7	.
LEAF_NODE	1422:34	1422:34	7	td_samplesperpixel
LEAF_NODE	1422:52	1422:52	4	;
FOR_EXPR	1422:54	1422:54	4	na ++ , nb ++
EXPR	1422:54	1422:60	5	na ++ , nb ++
FIELD	1422:54	1422:56	6	na ++
LEAF_NODE	1422:54	1422:54	7	na
LEAF_NODE	1422:56	1422:56	7	++
LEAF_NODE	1422:58	1422:58	6	,
FIELD	1422:60	1422:62	6	nb ++
LEAF_NODE	1422:60	1422:60	7	nb
LEAF_NODE	1422:62	1422:62	7	++
LEAF_NODE	1422:64	1422:64	4	)
STATEMENTS	1423:2	1423:2	4	
EXPR_STATEMENT	1423:2	1423:11	5	* na = value ;
EXPR	1423:2	1423:2	6	* na = value
ASSIGN	1423:2	1423:6	7	* na = value
LVAL	1423:2	1423:2	8	* na
UNARY_EXPR	1423:2	1423:3	9	* na
UNARY_OPERATOR	1423:2	1423:2	10	*
LEAF_NODE	1423:2	1423:2	11	*
FIELD	1423:3	1423:3	10	na
LEAF_NODE	1423:3	1423:3	11	na
ASSIGN_OP	1423:5	1423:5	8	=
LEAF_NODE	1423:5	1423:5	9	=
RVAL	1423:6	1423:6	8	value
FIELD	1423:6	1423:6	9	value
LEAF_NODE	1423:6	1423:6	10	value
LEAF_NODE	1423:11	1423:11	6	;
EXPR_STATEMENT	1424:1	1424:92	3	o = TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m ) ;
EXPR	1424:1	1424:1	4	o = TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
ASSIGN	1424:1	1424:3	5	o = TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
LVAL	1424:1	1424:1	6	o
FIELD	1424:1	1424:1	7	o
LEAF_NODE	1424:1	1424:1	8	o
ASSIGN_OP	1424:2	1424:2	6	=
LEAF_NODE	1424:2	1424:2	7	=
RVAL	1424:3	1424:3	6	TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
FUNCTION_CALL	1424:3	1424:91	7	TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
CALLEE	1424:3	1424:3	8	TIFFWriteDirectoryTagCheckedLongArray
LEAF_NODE	1424:3	1424:3	9	TIFFWriteDirectoryTagCheckedLongArray
LEAF_NODE	1424:40	1424:40	8	(
ARGUMENT	1424:41	1424:41	8	tif
FIELD	1424:41	1424:41	9	tif
LEAF_NODE	1424:41	1424:41	10	tif
LEAF_NODE	1424:44	1424:44	8	,
ARGUMENT	1424:45	1424:45	8	ndir
FIELD	1424:45	1424:45	9	ndir
LEAF_NODE	1424:45	1424:45	10	ndir
LEAF_NODE	1424:49	1424:49	8	,
ARGUMENT	1424:50	1424:50	8	dir
FIELD	1424:50	1424:50	9	dir
LEAF_NODE	1424:50	1424:50	10	dir
LEAF_NODE	1424:53	1424:53	8	,
ARGUMENT	1424:54	1424:54	8	tag
FIELD	1424:54	1424:54	9	tag
LEAF_NODE	1424:54	1424:54	10	tag
LEAF_NODE	1424:57	1424:57	8	,
ARGUMENT	1424:58	1424:58	8	tif -> tif_dir . td_samplesperpixel
FIELD	1424:58	1424:71	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1424:58	1424:58	10	tif
LEAF_NODE	1424:61	1424:61	10	->
LEAF_NODE	1424:63	1424:63	10	tif_dir
LEAF_NODE	1424:70	1424:70	10	.
LEAF_NODE	1424:71	1424:71	10	td_samplesperpixel
LEAF_NODE	1424:89	1424:89	8	,
ARGUMENT	1424:90	1424:90	8	m
FIELD	1424:90	1424:90	9	m
LEAF_NODE	1424:90	1424:90	10	m
LEAF_NODE	1424:91	1424:91	8	)
LEAF_NODE	1424:92	1424:92	4	;
EXPR_STATEMENT	1425:1	1425:13	3	_TIFFfree ( m ) ;
EXPR	1425:1	1425:1	4	_TIFFfree ( m )
FUNCTION_CALL	1425:1	1425:12	5	_TIFFfree ( m )
CALLEE	1425:1	1425:1	6	_TIFFfree
LEAF_NODE	1425:1	1425:1	7	_TIFFfree
LEAF_NODE	1425:10	1425:10	6	(
ARGUMENT	1425:11	1425:11	6	m
FIELD	1425:11	1425:11	7	m
LEAF_NODE	1425:11	1425:11	8	m
LEAF_NODE	1425:12	1425:12	6	)
LEAF_NODE	1425:13	1425:13	4	;
LEAF_NODE	1426:1	1426:1	3	return
LEAF_NODE	1426:7	1426:7	3	(
LEAF_NODE	1426:8	1426:8	3	o
LEAF_NODE	1426:9	1426:9	3	)
LEAF_NODE	1426:10	1426:10	3	;
LEAF_NODE	1427:0	1427:0	2	}
FUNCTION_DEF	1431:0	1440:0	1	
RETURN_TYPE	1431:0	1431:7	2	static int
LEAF_NODE	1431:0	1431:0	3	static
TYPE_NAME	1431:7	1431:7	3	int
LEAF_NODE	1431:7	1431:7	4	int
FUNCTION_NAME	1432:0	1432:0	2	TIFFWriteDirectoryTagSlong
LEAF_NODE	1432:0	1432:0	3	TIFFWriteDirectoryTagSlong
PARAMETER_LIST	1432:26	1432:94	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int32 value )
LEAF_NODE	1432:26	1432:26	3	(
PARAMETER_DECL	1432:27	1432:33	3	TIFF * tif
TYPE	1432:27	1432:31	4	TIFF *
TYPE_NAME	1432:27	1432:27	5	TIFF
LEAF_NODE	1432:27	1432:27	6	TIFF
POINTER	1432:31	1432:31	5	*
LEAF_NODE	1432:31	1432:31	6	*
NAME	1432:33	1432:33	4	tif
LEAF_NODE	1432:33	1432:33	5	tif
LEAF_NODE	1432:36	1432:36	3	,
PARAMETER_DECL	1432:38	1432:46	3	uint32 * ndir
TYPE	1432:38	1432:44	4	uint32 *
TYPE_NAME	1432:38	1432:38	5	uint32
LEAF_NODE	1432:38	1432:38	6	uint32
POINTER	1432:44	1432:44	5	*
LEAF_NODE	1432:44	1432:44	6	*
NAME	1432:46	1432:46	4	ndir
LEAF_NODE	1432:46	1432:46	5	ndir
LEAF_NODE	1432:50	1432:50	3	,
PARAMETER_DECL	1432:52	1432:66	3	TIFFDirEntry * dir
TYPE	1432:52	1432:64	4	TIFFDirEntry *
TYPE_NAME	1432:52	1432:52	5	TIFFDirEntry
LEAF_NODE	1432:52	1432:52	6	TIFFDirEntry
POINTER	1432:64	1432:64	5	*
LEAF_NODE	1432:64	1432:64	6	*
NAME	1432:66	1432:66	4	dir
LEAF_NODE	1432:66	1432:66	5	dir
LEAF_NODE	1432:69	1432:69	3	,
PARAMETER_DECL	1432:71	1432:78	3	uint16 tag
TYPE	1432:71	1432:71	4	uint16
TYPE_NAME	1432:71	1432:71	5	uint16
LEAF_NODE	1432:71	1432:71	6	uint16
NAME	1432:78	1432:78	4	tag
LEAF_NODE	1432:78	1432:78	5	tag
LEAF_NODE	1432:81	1432:81	3	,
PARAMETER_DECL	1432:83	1432:89	3	int32 value
TYPE	1432:83	1432:83	4	int32
TYPE_NAME	1432:83	1432:83	5	int32
LEAF_NODE	1432:83	1432:83	6	int32
NAME	1432:89	1432:89	4	value
LEAF_NODE	1432:89	1432:89	5	value
LEAF_NODE	1432:94	1432:94	3	)
LEAF_NODE	1433:0	1433:0	2	{
STATEMENTS	1434:1	1439:1	2	
SELECTION	1434:1	1435:1	3	
KEYWORD	1434:1	1434:1	4	if
LEAF_NODE	1434:1	1434:1	5	if
LEAF_NODE	1434:4	1434:4	4	(
CONDITION	1434:5	1434:5	4	dir == NULL
EXPR	1434:5	1434:10	5	dir == NULL
FIELD	1434:5	1434:5	6	dir
LEAF_NODE	1434:5	1434:5	7	dir
EQ_OPERATOR	1434:8	1434:8	6	==
LEAF_NODE	1434:8	1434:8	7	==
FIELD	1434:10	1434:10	6	NULL
LEAF_NODE	1434:10	1434:10	7	NULL
LEAF_NODE	1434:14	1434:14	4	)
STATEMENTS	1435:1	1438:1	4	
LEAF_NODE	1435:1	1435:1	5	{
STATEMENTS	1436:2	1437:2	5	
EXPR_STATEMENT	1436:2	1436:11	6	( * ndir ) ++ ;
EXPR	1436:2	1436:9	7	( * ndir ) ++
LEAF_NODE	1436:2	1436:2	8	(
UNARY_EXPR	1436:3	1436:4	8	* ndir
UNARY_OPERATOR	1436:3	1436:3	9	*
LEAF_NODE	1436:3	1436:3	10	*
FIELD	1436:4	1436:4	9	ndir
LEAF_NODE	1436:4	1436:4	10	ndir
LEAF_NODE	1436:8	1436:8	8	)
LEAF_NODE	1436:9	1436:9	8	++
LEAF_NODE	1436:11	1436:11	7	;
JUMP_STATEMENT	1437:2	1437:11	6	return ( 1 ) ;
KEYWORD	1437:2	1437:2	7	return
LEAF_NODE	1437:2	1437:2	8	return
DESTINATION	1437:8	1437:8	7	( 1 )
EXPR	1437:8	1437:10	8	( 1 )
LEAF_NODE	1437:8	1437:8	9	(
FIELD	1437:9	1437:9	9	1
LEAF_NODE	1437:9	1437:9	10	1
LEAF_NODE	1437:10	1437:10	9	)
LEAF_NODE	1437:11	1437:11	7	;
LEAF_NODE	1438:1	1438:1	5	}
JUMP_STATEMENT	1439:1	1439:66	3	return ( TIFFWriteDirectoryTagCheckedSlong ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1439:1	1439:1	4	return
LEAF_NODE	1439:1	1439:1	5	return
DESTINATION	1439:7	1439:7	4	( TIFFWriteDirectoryTagCheckedSlong ( tif , ndir , dir , tag , value ) )
EXPR	1439:7	1439:65	5	( TIFFWriteDirectoryTagCheckedSlong ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1439:7	1439:7	6	(
FUNCTION_CALL	1439:8	1439:64	6	TIFFWriteDirectoryTagCheckedSlong ( tif , ndir , dir , tag , value )
CALLEE	1439:8	1439:8	7	TIFFWriteDirectoryTagCheckedSlong
LEAF_NODE	1439:8	1439:8	8	TIFFWriteDirectoryTagCheckedSlong
LEAF_NODE	1439:41	1439:41	7	(
ARGUMENT	1439:42	1439:42	7	tif
FIELD	1439:42	1439:42	8	tif
LEAF_NODE	1439:42	1439:42	9	tif
LEAF_NODE	1439:45	1439:45	7	,
ARGUMENT	1439:46	1439:46	7	ndir
FIELD	1439:46	1439:46	8	ndir
LEAF_NODE	1439:46	1439:46	9	ndir
LEAF_NODE	1439:50	1439:50	7	,
ARGUMENT	1439:51	1439:51	7	dir
FIELD	1439:51	1439:51	8	dir
LEAF_NODE	1439:51	1439:51	9	dir
LEAF_NODE	1439:54	1439:54	7	,
ARGUMENT	1439:55	1439:55	7	tag
FIELD	1439:55	1439:55	8	tag
LEAF_NODE	1439:55	1439:55	9	tag
LEAF_NODE	1439:58	1439:58	7	,
ARGUMENT	1439:59	1439:59	7	value
FIELD	1439:59	1439:59	8	value
LEAF_NODE	1439:59	1439:59	9	value
LEAF_NODE	1439:64	1439:64	7	)
LEAF_NODE	1439:65	1439:65	6	)
LEAF_NODE	1439:66	1439:66	4	;
LEAF_NODE	1440:0	1440:0	2	}
FUNCTION_DEF	1443:0	1452:0	1	
RETURN_TYPE	1443:0	1443:7	2	static int
LEAF_NODE	1443:0	1443:0	3	static
TYPE_NAME	1443:7	1443:7	3	int
LEAF_NODE	1443:7	1443:7	4	int
FUNCTION_NAME	1444:0	1444:0	2	TIFFWriteDirectoryTagSlongArray
LEAF_NODE	1444:0	1444:0	3	TIFFWriteDirectoryTagSlongArray
PARAMETER_LIST	1444:31	1444:114	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , int32 * value )
LEAF_NODE	1444:31	1444:31	3	(
PARAMETER_DECL	1444:32	1444:38	3	TIFF * tif
TYPE	1444:32	1444:36	4	TIFF *
TYPE_NAME	1444:32	1444:32	5	TIFF
LEAF_NODE	1444:32	1444:32	6	TIFF
POINTER	1444:36	1444:36	5	*
LEAF_NODE	1444:36	1444:36	6	*
NAME	1444:38	1444:38	4	tif
LEAF_NODE	1444:38	1444:38	5	tif
LEAF_NODE	1444:41	1444:41	3	,
PARAMETER_DECL	1444:43	1444:51	3	uint32 * ndir
TYPE	1444:43	1444:49	4	uint32 *
TYPE_NAME	1444:43	1444:43	5	uint32
LEAF_NODE	1444:43	1444:43	6	uint32
POINTER	1444:49	1444:49	5	*
LEAF_NODE	1444:49	1444:49	6	*
NAME	1444:51	1444:51	4	ndir
LEAF_NODE	1444:51	1444:51	5	ndir
LEAF_NODE	1444:55	1444:55	3	,
PARAMETER_DECL	1444:57	1444:71	3	TIFFDirEntry * dir
TYPE	1444:57	1444:69	4	TIFFDirEntry *
TYPE_NAME	1444:57	1444:57	5	TIFFDirEntry
LEAF_NODE	1444:57	1444:57	6	TIFFDirEntry
POINTER	1444:69	1444:69	5	*
LEAF_NODE	1444:69	1444:69	6	*
NAME	1444:71	1444:71	4	dir
LEAF_NODE	1444:71	1444:71	5	dir
LEAF_NODE	1444:74	1444:74	3	,
PARAMETER_DECL	1444:76	1444:83	3	uint16 tag
TYPE	1444:76	1444:76	4	uint16
TYPE_NAME	1444:76	1444:76	5	uint16
LEAF_NODE	1444:76	1444:76	6	uint16
NAME	1444:83	1444:83	4	tag
LEAF_NODE	1444:83	1444:83	5	tag
LEAF_NODE	1444:86	1444:86	3	,
PARAMETER_DECL	1444:88	1444:95	3	uint32 count
TYPE	1444:88	1444:88	4	uint32
TYPE_NAME	1444:88	1444:88	5	uint32
LEAF_NODE	1444:88	1444:88	6	uint32
NAME	1444:95	1444:95	4	count
LEAF_NODE	1444:95	1444:95	5	count
LEAF_NODE	1444:100	1444:100	3	,
PARAMETER_DECL	1444:102	1444:109	3	int32 * value
TYPE	1444:102	1444:107	4	int32 *
TYPE_NAME	1444:102	1444:102	5	int32
LEAF_NODE	1444:102	1444:102	6	int32
POINTER	1444:107	1444:107	5	*
LEAF_NODE	1444:107	1444:107	6	*
NAME	1444:109	1444:109	4	value
LEAF_NODE	1444:109	1444:109	5	value
LEAF_NODE	1444:114	1444:114	3	)
LEAF_NODE	1445:0	1445:0	2	{
STATEMENTS	1446:1	1451:1	2	
SELECTION	1446:1	1447:1	3	
KEYWORD	1446:1	1446:1	4	if
LEAF_NODE	1446:1	1446:1	5	if
LEAF_NODE	1446:4	1446:4	4	(
CONDITION	1446:5	1446:5	4	dir == NULL
EXPR	1446:5	1446:10	5	dir == NULL
FIELD	1446:5	1446:5	6	dir
LEAF_NODE	1446:5	1446:5	7	dir
EQ_OPERATOR	1446:8	1446:8	6	==
LEAF_NODE	1446:8	1446:8	7	==
FIELD	1446:10	1446:10	6	NULL
LEAF_NODE	1446:10	1446:10	7	NULL
LEAF_NODE	1446:14	1446:14	4	)
STATEMENTS	1447:1	1450:1	4	
LEAF_NODE	1447:1	1447:1	5	{
STATEMENTS	1448:2	1449:2	5	
EXPR_STATEMENT	1448:2	1448:11	6	( * ndir ) ++ ;
EXPR	1448:2	1448:9	7	( * ndir ) ++
LEAF_NODE	1448:2	1448:2	8	(
UNARY_EXPR	1448:3	1448:4	8	* ndir
UNARY_OPERATOR	1448:3	1448:3	9	*
LEAF_NODE	1448:3	1448:3	10	*
FIELD	1448:4	1448:4	9	ndir
LEAF_NODE	1448:4	1448:4	10	ndir
LEAF_NODE	1448:8	1448:8	8	)
LEAF_NODE	1448:9	1448:9	8	++
LEAF_NODE	1448:11	1448:11	7	;
JUMP_STATEMENT	1449:2	1449:11	6	return ( 1 ) ;
KEYWORD	1449:2	1449:2	7	return
LEAF_NODE	1449:2	1449:2	8	return
DESTINATION	1449:8	1449:8	7	( 1 )
EXPR	1449:8	1449:10	8	( 1 )
LEAF_NODE	1449:8	1449:8	9	(
FIELD	1449:9	1449:9	9	1
LEAF_NODE	1449:9	1449:9	10	1
LEAF_NODE	1449:10	1449:10	9	)
LEAF_NODE	1449:11	1449:11	7	;
LEAF_NODE	1450:1	1450:1	5	}
JUMP_STATEMENT	1451:1	1451:77	3	return ( TIFFWriteDirectoryTagCheckedSlongArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1451:1	1451:1	4	return
LEAF_NODE	1451:1	1451:1	5	return
DESTINATION	1451:7	1451:7	4	( TIFFWriteDirectoryTagCheckedSlongArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1451:7	1451:76	5	( TIFFWriteDirectoryTagCheckedSlongArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1451:7	1451:7	6	(
FUNCTION_CALL	1451:8	1451:75	6	TIFFWriteDirectoryTagCheckedSlongArray ( tif , ndir , dir , tag , count , value )
CALLEE	1451:8	1451:8	7	TIFFWriteDirectoryTagCheckedSlongArray
LEAF_NODE	1451:8	1451:8	8	TIFFWriteDirectoryTagCheckedSlongArray
LEAF_NODE	1451:46	1451:46	7	(
ARGUMENT	1451:47	1451:47	7	tif
FIELD	1451:47	1451:47	8	tif
LEAF_NODE	1451:47	1451:47	9	tif
LEAF_NODE	1451:50	1451:50	7	,
ARGUMENT	1451:51	1451:51	7	ndir
FIELD	1451:51	1451:51	8	ndir
LEAF_NODE	1451:51	1451:51	9	ndir
LEAF_NODE	1451:55	1451:55	7	,
ARGUMENT	1451:56	1451:56	7	dir
FIELD	1451:56	1451:56	8	dir
LEAF_NODE	1451:56	1451:56	9	dir
LEAF_NODE	1451:59	1451:59	7	,
ARGUMENT	1451:60	1451:60	7	tag
FIELD	1451:60	1451:60	8	tag
LEAF_NODE	1451:60	1451:60	9	tag
LEAF_NODE	1451:63	1451:63	7	,
ARGUMENT	1451:64	1451:64	7	count
FIELD	1451:64	1451:64	8	count
LEAF_NODE	1451:64	1451:64	9	count
LEAF_NODE	1451:69	1451:69	7	,
ARGUMENT	1451:70	1451:70	7	value
FIELD	1451:70	1451:70	8	value
LEAF_NODE	1451:70	1451:70	9	value
LEAF_NODE	1451:75	1451:75	7	)
LEAF_NODE	1451:76	1451:76	6	)
LEAF_NODE	1451:77	1451:77	4	;
LEAF_NODE	1452:0	1452:0	2	}
FUNCTION_DEF	1455:0	1479:0	1	
RETURN_TYPE	1455:0	1455:7	2	static int
LEAF_NODE	1455:0	1455:0	3	static
TYPE_NAME	1455:7	1455:7	3	int
LEAF_NODE	1455:7	1455:7	4	int
FUNCTION_NAME	1456:0	1456:0	2	TIFFWriteDirectoryTagSlongPerSample
LEAF_NODE	1456:0	1456:0	3	TIFFWriteDirectoryTagSlongPerSample
PARAMETER_LIST	1456:35	1456:103	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int32 value )
LEAF_NODE	1456:35	1456:35	3	(
PARAMETER_DECL	1456:36	1456:42	3	TIFF * tif
TYPE	1456:36	1456:40	4	TIFF *
TYPE_NAME	1456:36	1456:36	5	TIFF
LEAF_NODE	1456:36	1456:36	6	TIFF
POINTER	1456:40	1456:40	5	*
LEAF_NODE	1456:40	1456:40	6	*
NAME	1456:42	1456:42	4	tif
LEAF_NODE	1456:42	1456:42	5	tif
LEAF_NODE	1456:45	1456:45	3	,
PARAMETER_DECL	1456:47	1456:55	3	uint32 * ndir
TYPE	1456:47	1456:53	4	uint32 *
TYPE_NAME	1456:47	1456:47	5	uint32
LEAF_NODE	1456:47	1456:47	6	uint32
POINTER	1456:53	1456:53	5	*
LEAF_NODE	1456:53	1456:53	6	*
NAME	1456:55	1456:55	4	ndir
LEAF_NODE	1456:55	1456:55	5	ndir
LEAF_NODE	1456:59	1456:59	3	,
PARAMETER_DECL	1456:61	1456:75	3	TIFFDirEntry * dir
TYPE	1456:61	1456:73	4	TIFFDirEntry *
TYPE_NAME	1456:61	1456:61	5	TIFFDirEntry
LEAF_NODE	1456:61	1456:61	6	TIFFDirEntry
POINTER	1456:73	1456:73	5	*
LEAF_NODE	1456:73	1456:73	6	*
NAME	1456:75	1456:75	4	dir
LEAF_NODE	1456:75	1456:75	5	dir
LEAF_NODE	1456:78	1456:78	3	,
PARAMETER_DECL	1456:80	1456:87	3	uint16 tag
TYPE	1456:80	1456:80	4	uint16
TYPE_NAME	1456:80	1456:80	5	uint16
LEAF_NODE	1456:80	1456:80	6	uint16
NAME	1456:87	1456:87	4	tag
LEAF_NODE	1456:87	1456:87	5	tag
LEAF_NODE	1456:90	1456:90	3	,
PARAMETER_DECL	1456:92	1456:98	3	int32 value
TYPE	1456:92	1456:92	4	int32
TYPE_NAME	1456:92	1456:92	5	int32
LEAF_NODE	1456:92	1456:92	6	int32
NAME	1456:98	1456:98	4	value
LEAF_NODE	1456:98	1456:98	5	value
LEAF_NODE	1456:103	1456:103	3	)
LEAF_NODE	1457:0	1457:0	2	{
STATEMENTS	1458:1	1478:10	2	
LEAF_NODE	1458:1	1458:1	3	static
SIMPLE_DECL	1458:8	1458:67	3	const char [ ] module ; module = "TIFFWriteDirectoryTagSlongPerSample" ;
VAR_DECL	1458:8	1458:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagSlongPerSample"
TYPE	1458:8	1458:25	5	const char [ ]
TYPE_NAME	1458:8	1458:14	6	const char
LEAF_NODE	1458:8	1458:8	7	const
LEAF_NODE	1458:14	1458:14	7	char
TYPE_SUFFIX	1458:25	1458:26	6	[ ]
LEAF_NODE	1458:25	1458:25	7	[
LEAF_NODE	1458:26	1458:26	7	]
NAME	1458:19	1458:19	5	module
LEAF_NODE	1458:19	1458:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1458:19	1458:19	5	module = "TIFFWriteDirectoryTagSlongPerSample"
ASSIGN	1458:19	1458:30	6	module = "TIFFWriteDirectoryTagSlongPerSample"
LVAL	1458:19	1458:19	7	module
NAME	1458:19	1458:19	8	module
LEAF_NODE	1458:19	1458:19	9	module
ASSIGN_OP	1458:28	1458:28	7	=
LEAF_NODE	1458:28	1458:28	8	=
RVAL	1458:30	1458:30	7	"TIFFWriteDirectoryTagSlongPerSample"
FIELD	1458:30	1458:30	8	"TIFFWriteDirectoryTagSlongPerSample"
LEAF_NODE	1458:30	1458:30	9	"TIFFWriteDirectoryTagSlongPerSample"
LEAF_NODE	1458:67	1458:67	4	;
SIMPLE_DECL	1459:1	1459:9	3	int32 * m ;
VAR_DECL	1459:1	1459:8	4	int32 * m
TYPE	1459:1	1459:6	5	int32 *
TYPE_NAME	1459:1	1459:1	6	int32
LEAF_NODE	1459:1	1459:1	7	int32
POINTER	1459:6	1459:6	6	*
LEAF_NODE	1459:6	1459:6	7	*
NAME	1459:8	1459:8	5	m
LEAF_NODE	1459:8	1459:8	6	m
LEAF_NODE	1459:9	1459:9	4	;
SIMPLE_DECL	1460:1	1460:10	3	int32 * na ;
VAR_DECL	1460:1	1460:8	4	int32 * na
TYPE	1460:1	1460:6	5	int32 *
TYPE_NAME	1460:1	1460:1	6	int32
LEAF_NODE	1460:1	1460:1	7	int32
POINTER	1460:6	1460:6	6	*
LEAF_NODE	1460:6	1460:6	7	*
NAME	1460:8	1460:8	5	na
LEAF_NODE	1460:8	1460:8	6	na
LEAF_NODE	1460:10	1460:10	4	;
SIMPLE_DECL	1461:1	1461:10	3	uint16 nb ;
VAR_DECL	1461:1	1461:8	4	uint16 nb
TYPE	1461:1	1461:1	5	uint16
TYPE_NAME	1461:1	1461:1	6	uint16
LEAF_NODE	1461:1	1461:1	7	uint16
NAME	1461:8	1461:8	5	nb
LEAF_NODE	1461:8	1461:8	6	nb
LEAF_NODE	1461:10	1461:10	4	;
SIMPLE_DECL	1462:1	1462:6	3	int o ;
VAR_DECL	1462:1	1462:5	4	int o
TYPE	1462:1	1462:1	5	int
TYPE_NAME	1462:1	1462:1	6	int
LEAF_NODE	1462:1	1462:1	7	int
NAME	1462:5	1462:5	5	o
LEAF_NODE	1462:5	1462:5	6	o
LEAF_NODE	1462:6	1462:6	4	;
SELECTION	1463:1	1464:1	3	
KEYWORD	1463:1	1463:1	4	if
LEAF_NODE	1463:1	1463:1	5	if
LEAF_NODE	1463:4	1463:4	4	(
CONDITION	1463:5	1463:5	4	dir == NULL
EXPR	1463:5	1463:10	5	dir == NULL
FIELD	1463:5	1463:5	6	dir
LEAF_NODE	1463:5	1463:5	7	dir
EQ_OPERATOR	1463:8	1463:8	6	==
LEAF_NODE	1463:8	1463:8	7	==
FIELD	1463:10	1463:10	6	NULL
LEAF_NODE	1463:10	1463:10	7	NULL
LEAF_NODE	1463:14	1463:14	4	)
STATEMENTS	1464:1	1467:1	4	
LEAF_NODE	1464:1	1464:1	5	{
STATEMENTS	1465:2	1466:2	5	
EXPR_STATEMENT	1465:2	1465:11	6	( * ndir ) ++ ;
EXPR	1465:2	1465:9	7	( * ndir ) ++
LEAF_NODE	1465:2	1465:2	8	(
UNARY_EXPR	1465:3	1465:4	8	* ndir
UNARY_OPERATOR	1465:3	1465:3	9	*
LEAF_NODE	1465:3	1465:3	10	*
FIELD	1465:4	1465:4	9	ndir
LEAF_NODE	1465:4	1465:4	10	ndir
LEAF_NODE	1465:8	1465:8	8	)
LEAF_NODE	1465:9	1465:9	8	++
LEAF_NODE	1465:11	1465:11	7	;
JUMP_STATEMENT	1466:2	1466:11	6	return ( 1 ) ;
KEYWORD	1466:2	1466:2	7	return
LEAF_NODE	1466:2	1466:2	8	return
DESTINATION	1466:8	1466:8	7	( 1 )
EXPR	1466:8	1466:10	8	( 1 )
LEAF_NODE	1466:8	1466:8	9	(
FIELD	1466:9	1466:9	9	1
LEAF_NODE	1466:9	1466:9	10	1
LEAF_NODE	1466:10	1466:10	9	)
LEAF_NODE	1466:11	1466:11	7	;
LEAF_NODE	1467:1	1467:1	5	}
EXPR_STATEMENT	1468:1	1468:61	3	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int32 ) ) ;
EXPR	1468:1	1468:1	4	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int32 ) )
ASSIGN	1468:1	1468:3	5	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int32 ) )
LVAL	1468:1	1468:1	6	m
FIELD	1468:1	1468:1	7	m
LEAF_NODE	1468:1	1468:1	8	m
ASSIGN_OP	1468:2	1468:2	6	=
LEAF_NODE	1468:2	1468:2	7	=
RVAL	1468:3	1468:3	6	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int32 ) )
FUNCTION_CALL	1468:3	1468:60	7	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( int32 ) )
CALLEE	1468:3	1468:3	8	_TIFFmalloc
LEAF_NODE	1468:3	1468:3	9	_TIFFmalloc
LEAF_NODE	1468:14	1468:14	8	(
ARGUMENT	1468:15	1468:47	8	tif -> tif_dir . td_samplesperpixel * sizeof ( int32 )
FIELD	1468:15	1468:28	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1468:15	1468:15	10	tif
LEAF_NODE	1468:18	1468:18	10	->
LEAF_NODE	1468:20	1468:20	10	tif_dir
LEAF_NODE	1468:27	1468:27	10	.
LEAF_NODE	1468:28	1468:28	10	td_samplesperpixel
LEAF_NODE	1468:46	1468:46	9	*
FUNCTION_CALL	1468:47	1468:59	9	sizeof ( int32 )
CALLEE	1468:47	1468:47	10	sizeof
LEAF_NODE	1468:47	1468:47	11	sizeof
LEAF_NODE	1468:53	1468:53	10	(
ARGUMENT	1468:54	1468:54	10	int32
FIELD	1468:54	1468:54	11	int32
LEAF_NODE	1468:54	1468:54	12	int32
LEAF_NODE	1468:59	1468:59	10	)
LEAF_NODE	1468:60	1468:60	8	)
LEAF_NODE	1468:61	1468:61	4	;
SELECTION	1469:1	1470:1	3	
KEYWORD	1469:1	1469:1	4	if
LEAF_NODE	1469:1	1469:1	5	if
LEAF_NODE	1469:4	1469:4	4	(
CONDITION	1469:5	1469:5	4	m == NULL
EXPR	1469:5	1469:8	5	m == NULL
FIELD	1469:5	1469:5	6	m
LEAF_NODE	1469:5	1469:5	7	m
EQ_OPERATOR	1469:6	1469:6	6	==
LEAF_NODE	1469:6	1469:6	7	==
FIELD	1469:8	1469:8	6	NULL
LEAF_NODE	1469:8	1469:8	7	NULL
LEAF_NODE	1469:12	1469:12	4	)
STATEMENTS	1470:1	1473:1	4	
LEAF_NODE	1470:1	1470:1	5	{
STATEMENTS	1471:2	1472:2	5	
EXPR_STATEMENT	1471:2	1471:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1471:2	1471:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1471:2	1471:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1471:2	1471:2	9	TIFFErrorExt
LEAF_NODE	1471:2	1471:2	10	TIFFErrorExt
LEAF_NODE	1471:14	1471:14	9	(
ARGUMENT	1471:15	1471:15	9	tif -> tif_clientdata
FIELD	1471:15	1471:20	10	tif -> tif_clientdata
LEAF_NODE	1471:15	1471:15	11	tif
LEAF_NODE	1471:18	1471:18	11	->
LEAF_NODE	1471:20	1471:20	11	tif_clientdata
LEAF_NODE	1471:34	1471:34	9	,
ARGUMENT	1471:35	1471:35	9	module
FIELD	1471:35	1471:35	10	module
LEAF_NODE	1471:35	1471:35	11	module
LEAF_NODE	1471:41	1471:41	9	,
ARGUMENT	1471:42	1471:42	9	"Out of memory"
FIELD	1471:42	1471:42	10	"Out of memory"
LEAF_NODE	1471:42	1471:42	11	"Out of memory"
LEAF_NODE	1471:57	1471:57	9	)
LEAF_NODE	1471:58	1471:58	7	;
JUMP_STATEMENT	1472:2	1472:11	6	return ( 0 ) ;
KEYWORD	1472:2	1472:2	7	return
LEAF_NODE	1472:2	1472:2	8	return
DESTINATION	1472:8	1472:8	7	( 0 )
EXPR	1472:8	1472:10	8	( 0 )
LEAF_NODE	1472:8	1472:8	9	(
FIELD	1472:9	1472:9	9	0
LEAF_NODE	1472:9	1472:9	10	0
LEAF_NODE	1472:10	1472:10	9	)
LEAF_NODE	1472:11	1472:11	7	;
LEAF_NODE	1473:1	1473:1	5	}
ITERATION	1474:1	1475:2	3	
KEYWORD	1474:1	1474:1	4	for
LEAF_NODE	1474:1	1474:1	5	for
LEAF_NODE	1474:5	1474:5	4	(
FOR_INIT	1474:6	1474:16	4	na = m , nb = 0 ;
EXPR	1474:6	1474:12	5	na = m , nb = 0
ASSIGN	1474:6	1474:9	6	na = m
LVAL	1474:6	1474:6	7	na
FIELD	1474:6	1474:6	8	na
LEAF_NODE	1474:6	1474:6	9	na
ASSIGN_OP	1474:8	1474:8	7	=
LEAF_NODE	1474:8	1474:8	8	=
RVAL	1474:9	1474:9	7	m
FIELD	1474:9	1474:9	8	m
LEAF_NODE	1474:9	1474:9	9	m
LEAF_NODE	1474:10	1474:10	6	,
ASSIGN	1474:12	1474:15	6	nb = 0
LVAL	1474:12	1474:12	7	nb
FIELD	1474:12	1474:12	8	nb
LEAF_NODE	1474:12	1474:12	9	nb
ASSIGN_OP	1474:14	1474:14	7	=
LEAF_NODE	1474:14	1474:14	8	=
RVAL	1474:15	1474:15	7	0
FIELD	1474:15	1474:15	8	0
LEAF_NODE	1474:15	1474:15	9	0
LEAF_NODE	1474:16	1474:16	5	;
CONDITION	1474:18	1474:18	4	nb < tif -> tif_dir . td_samplesperpixel
EXPR	1474:18	1474:21	5	nb < tif -> tif_dir . td_samplesperpixel
FIELD	1474:18	1474:18	6	nb
LEAF_NODE	1474:18	1474:18	7	nb
REL_OPERATOR	1474:20	1474:20	6	<
LEAF_NODE	1474:20	1474:20	7	<
FIELD	1474:21	1474:34	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1474:21	1474:21	7	tif
LEAF_NODE	1474:24	1474:24	7	->
LEAF_NODE	1474:26	1474:26	7	tif_dir
LEAF_NODE	1474:33	1474:33	7	.
LEAF_NODE	1474:34	1474:34	7	td_samplesperpixel
LEAF_NODE	1474:52	1474:52	4	;
FOR_EXPR	1474:54	1474:54	4	na ++ , nb ++
EXPR	1474:54	1474:60	5	na ++ , nb ++
FIELD	1474:54	1474:56	6	na ++
LEAF_NODE	1474:54	1474:54	7	na
LEAF_NODE	1474:56	1474:56	7	++
LEAF_NODE	1474:58	1474:58	6	,
FIELD	1474:60	1474:62	6	nb ++
LEAF_NODE	1474:60	1474:60	7	nb
LEAF_NODE	1474:62	1474:62	7	++
LEAF_NODE	1474:64	1474:64	4	)
STATEMENTS	1475:2	1475:2	4	
EXPR_STATEMENT	1475:2	1475:11	5	* na = value ;
EXPR	1475:2	1475:2	6	* na = value
ASSIGN	1475:2	1475:6	7	* na = value
LVAL	1475:2	1475:2	8	* na
UNARY_EXPR	1475:2	1475:3	9	* na
UNARY_OPERATOR	1475:2	1475:2	10	*
LEAF_NODE	1475:2	1475:2	11	*
FIELD	1475:3	1475:3	10	na
LEAF_NODE	1475:3	1475:3	11	na
ASSIGN_OP	1475:5	1475:5	8	=
LEAF_NODE	1475:5	1475:5	9	=
RVAL	1475:6	1475:6	8	value
FIELD	1475:6	1475:6	9	value
LEAF_NODE	1475:6	1475:6	10	value
LEAF_NODE	1475:11	1475:11	6	;
EXPR_STATEMENT	1476:1	1476:93	3	o = TIFFWriteDirectoryTagCheckedSlongArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m ) ;
EXPR	1476:1	1476:1	4	o = TIFFWriteDirectoryTagCheckedSlongArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
ASSIGN	1476:1	1476:3	5	o = TIFFWriteDirectoryTagCheckedSlongArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
LVAL	1476:1	1476:1	6	o
FIELD	1476:1	1476:1	7	o
LEAF_NODE	1476:1	1476:1	8	o
ASSIGN_OP	1476:2	1476:2	6	=
LEAF_NODE	1476:2	1476:2	7	=
RVAL	1476:3	1476:3	6	TIFFWriteDirectoryTagCheckedSlongArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
FUNCTION_CALL	1476:3	1476:92	7	TIFFWriteDirectoryTagCheckedSlongArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
CALLEE	1476:3	1476:3	8	TIFFWriteDirectoryTagCheckedSlongArray
LEAF_NODE	1476:3	1476:3	9	TIFFWriteDirectoryTagCheckedSlongArray
LEAF_NODE	1476:41	1476:41	8	(
ARGUMENT	1476:42	1476:42	8	tif
FIELD	1476:42	1476:42	9	tif
LEAF_NODE	1476:42	1476:42	10	tif
LEAF_NODE	1476:45	1476:45	8	,
ARGUMENT	1476:46	1476:46	8	ndir
FIELD	1476:46	1476:46	9	ndir
LEAF_NODE	1476:46	1476:46	10	ndir
LEAF_NODE	1476:50	1476:50	8	,
ARGUMENT	1476:51	1476:51	8	dir
FIELD	1476:51	1476:51	9	dir
LEAF_NODE	1476:51	1476:51	10	dir
LEAF_NODE	1476:54	1476:54	8	,
ARGUMENT	1476:55	1476:55	8	tag
FIELD	1476:55	1476:55	9	tag
LEAF_NODE	1476:55	1476:55	10	tag
LEAF_NODE	1476:58	1476:58	8	,
ARGUMENT	1476:59	1476:59	8	tif -> tif_dir . td_samplesperpixel
FIELD	1476:59	1476:72	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1476:59	1476:59	10	tif
LEAF_NODE	1476:62	1476:62	10	->
LEAF_NODE	1476:64	1476:64	10	tif_dir
LEAF_NODE	1476:71	1476:71	10	.
LEAF_NODE	1476:72	1476:72	10	td_samplesperpixel
LEAF_NODE	1476:90	1476:90	8	,
ARGUMENT	1476:91	1476:91	8	m
FIELD	1476:91	1476:91	9	m
LEAF_NODE	1476:91	1476:91	10	m
LEAF_NODE	1476:92	1476:92	8	)
LEAF_NODE	1476:93	1476:93	4	;
EXPR_STATEMENT	1477:1	1477:13	3	_TIFFfree ( m ) ;
EXPR	1477:1	1477:1	4	_TIFFfree ( m )
FUNCTION_CALL	1477:1	1477:12	5	_TIFFfree ( m )
CALLEE	1477:1	1477:1	6	_TIFFfree
LEAF_NODE	1477:1	1477:1	7	_TIFFfree
LEAF_NODE	1477:10	1477:10	6	(
ARGUMENT	1477:11	1477:11	6	m
FIELD	1477:11	1477:11	7	m
LEAF_NODE	1477:11	1477:11	8	m
LEAF_NODE	1477:12	1477:12	6	)
LEAF_NODE	1477:13	1477:13	4	;
LEAF_NODE	1478:1	1478:1	3	return
LEAF_NODE	1478:7	1478:7	3	(
LEAF_NODE	1478:8	1478:8	3	o
LEAF_NODE	1478:9	1478:9	3	)
LEAF_NODE	1478:10	1478:10	3	;
LEAF_NODE	1479:0	1479:0	2	}
FUNCTION_DEF	1483:0	1492:0	1	
RETURN_TYPE	1483:0	1483:7	2	static int
LEAF_NODE	1483:0	1483:0	3	static
TYPE_NAME	1483:7	1483:7	3	int
LEAF_NODE	1483:7	1483:7	4	int
FUNCTION_NAME	1484:0	1484:0	2	TIFFWriteDirectoryTagLong8
LEAF_NODE	1484:0	1484:0	3	TIFFWriteDirectoryTagLong8
PARAMETER_LIST	1484:26	1484:95	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint64 value )
LEAF_NODE	1484:26	1484:26	3	(
PARAMETER_DECL	1484:27	1484:33	3	TIFF * tif
TYPE	1484:27	1484:31	4	TIFF *
TYPE_NAME	1484:27	1484:27	5	TIFF
LEAF_NODE	1484:27	1484:27	6	TIFF
POINTER	1484:31	1484:31	5	*
LEAF_NODE	1484:31	1484:31	6	*
NAME	1484:33	1484:33	4	tif
LEAF_NODE	1484:33	1484:33	5	tif
LEAF_NODE	1484:36	1484:36	3	,
PARAMETER_DECL	1484:38	1484:46	3	uint32 * ndir
TYPE	1484:38	1484:44	4	uint32 *
TYPE_NAME	1484:38	1484:38	5	uint32
LEAF_NODE	1484:38	1484:38	6	uint32
POINTER	1484:44	1484:44	5	*
LEAF_NODE	1484:44	1484:44	6	*
NAME	1484:46	1484:46	4	ndir
LEAF_NODE	1484:46	1484:46	5	ndir
LEAF_NODE	1484:50	1484:50	3	,
PARAMETER_DECL	1484:52	1484:66	3	TIFFDirEntry * dir
TYPE	1484:52	1484:64	4	TIFFDirEntry *
TYPE_NAME	1484:52	1484:52	5	TIFFDirEntry
LEAF_NODE	1484:52	1484:52	6	TIFFDirEntry
POINTER	1484:64	1484:64	5	*
LEAF_NODE	1484:64	1484:64	6	*
NAME	1484:66	1484:66	4	dir
LEAF_NODE	1484:66	1484:66	5	dir
LEAF_NODE	1484:69	1484:69	3	,
PARAMETER_DECL	1484:71	1484:78	3	uint16 tag
TYPE	1484:71	1484:71	4	uint16
TYPE_NAME	1484:71	1484:71	5	uint16
LEAF_NODE	1484:71	1484:71	6	uint16
NAME	1484:78	1484:78	4	tag
LEAF_NODE	1484:78	1484:78	5	tag
LEAF_NODE	1484:81	1484:81	3	,
PARAMETER_DECL	1484:83	1484:90	3	uint64 value
TYPE	1484:83	1484:83	4	uint64
TYPE_NAME	1484:83	1484:83	5	uint64
LEAF_NODE	1484:83	1484:83	6	uint64
NAME	1484:90	1484:90	4	value
LEAF_NODE	1484:90	1484:90	5	value
LEAF_NODE	1484:95	1484:95	3	)
LEAF_NODE	1485:0	1485:0	2	{
STATEMENTS	1486:1	1491:1	2	
SELECTION	1486:1	1487:1	3	
KEYWORD	1486:1	1486:1	4	if
LEAF_NODE	1486:1	1486:1	5	if
LEAF_NODE	1486:4	1486:4	4	(
CONDITION	1486:5	1486:5	4	dir == NULL
EXPR	1486:5	1486:10	5	dir == NULL
FIELD	1486:5	1486:5	6	dir
LEAF_NODE	1486:5	1486:5	7	dir
EQ_OPERATOR	1486:8	1486:8	6	==
LEAF_NODE	1486:8	1486:8	7	==
FIELD	1486:10	1486:10	6	NULL
LEAF_NODE	1486:10	1486:10	7	NULL
LEAF_NODE	1486:14	1486:14	4	)
STATEMENTS	1487:1	1490:1	4	
LEAF_NODE	1487:1	1487:1	5	{
STATEMENTS	1488:2	1489:2	5	
EXPR_STATEMENT	1488:2	1488:11	6	( * ndir ) ++ ;
EXPR	1488:2	1488:9	7	( * ndir ) ++
LEAF_NODE	1488:2	1488:2	8	(
UNARY_EXPR	1488:3	1488:4	8	* ndir
UNARY_OPERATOR	1488:3	1488:3	9	*
LEAF_NODE	1488:3	1488:3	10	*
FIELD	1488:4	1488:4	9	ndir
LEAF_NODE	1488:4	1488:4	10	ndir
LEAF_NODE	1488:8	1488:8	8	)
LEAF_NODE	1488:9	1488:9	8	++
LEAF_NODE	1488:11	1488:11	7	;
JUMP_STATEMENT	1489:2	1489:11	6	return ( 1 ) ;
KEYWORD	1489:2	1489:2	7	return
LEAF_NODE	1489:2	1489:2	8	return
DESTINATION	1489:8	1489:8	7	( 1 )
EXPR	1489:8	1489:10	8	( 1 )
LEAF_NODE	1489:8	1489:8	9	(
FIELD	1489:9	1489:9	9	1
LEAF_NODE	1489:9	1489:9	10	1
LEAF_NODE	1489:10	1489:10	9	)
LEAF_NODE	1489:11	1489:11	7	;
LEAF_NODE	1490:1	1490:1	5	}
JUMP_STATEMENT	1491:1	1491:66	3	return ( TIFFWriteDirectoryTagCheckedLong8 ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1491:1	1491:1	4	return
LEAF_NODE	1491:1	1491:1	5	return
DESTINATION	1491:7	1491:7	4	( TIFFWriteDirectoryTagCheckedLong8 ( tif , ndir , dir , tag , value ) )
EXPR	1491:7	1491:65	5	( TIFFWriteDirectoryTagCheckedLong8 ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1491:7	1491:7	6	(
FUNCTION_CALL	1491:8	1491:64	6	TIFFWriteDirectoryTagCheckedLong8 ( tif , ndir , dir , tag , value )
CALLEE	1491:8	1491:8	7	TIFFWriteDirectoryTagCheckedLong8
LEAF_NODE	1491:8	1491:8	8	TIFFWriteDirectoryTagCheckedLong8
LEAF_NODE	1491:41	1491:41	7	(
ARGUMENT	1491:42	1491:42	7	tif
FIELD	1491:42	1491:42	8	tif
LEAF_NODE	1491:42	1491:42	9	tif
LEAF_NODE	1491:45	1491:45	7	,
ARGUMENT	1491:46	1491:46	7	ndir
FIELD	1491:46	1491:46	8	ndir
LEAF_NODE	1491:46	1491:46	9	ndir
LEAF_NODE	1491:50	1491:50	7	,
ARGUMENT	1491:51	1491:51	7	dir
FIELD	1491:51	1491:51	8	dir
LEAF_NODE	1491:51	1491:51	9	dir
LEAF_NODE	1491:54	1491:54	7	,
ARGUMENT	1491:55	1491:55	7	tag
FIELD	1491:55	1491:55	8	tag
LEAF_NODE	1491:55	1491:55	9	tag
LEAF_NODE	1491:58	1491:58	7	,
ARGUMENT	1491:59	1491:59	7	value
FIELD	1491:59	1491:59	8	value
LEAF_NODE	1491:59	1491:59	9	value
LEAF_NODE	1491:64	1491:64	7	)
LEAF_NODE	1491:65	1491:65	6	)
LEAF_NODE	1491:66	1491:66	4	;
LEAF_NODE	1492:0	1492:0	2	}
FUNCTION_DEF	1495:0	1504:0	1	
RETURN_TYPE	1495:0	1495:7	2	static int
LEAF_NODE	1495:0	1495:0	3	static
TYPE_NAME	1495:7	1495:7	3	int
LEAF_NODE	1495:7	1495:7	4	int
FUNCTION_NAME	1496:0	1496:0	2	TIFFWriteDirectoryTagLong8Array
LEAF_NODE	1496:0	1496:0	3	TIFFWriteDirectoryTagLong8Array
PARAMETER_LIST	1496:31	1496:115	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint64 * value )
LEAF_NODE	1496:31	1496:31	3	(
PARAMETER_DECL	1496:32	1496:38	3	TIFF * tif
TYPE	1496:32	1496:36	4	TIFF *
TYPE_NAME	1496:32	1496:32	5	TIFF
LEAF_NODE	1496:32	1496:32	6	TIFF
POINTER	1496:36	1496:36	5	*
LEAF_NODE	1496:36	1496:36	6	*
NAME	1496:38	1496:38	4	tif
LEAF_NODE	1496:38	1496:38	5	tif
LEAF_NODE	1496:41	1496:41	3	,
PARAMETER_DECL	1496:43	1496:51	3	uint32 * ndir
TYPE	1496:43	1496:49	4	uint32 *
TYPE_NAME	1496:43	1496:43	5	uint32
LEAF_NODE	1496:43	1496:43	6	uint32
POINTER	1496:49	1496:49	5	*
LEAF_NODE	1496:49	1496:49	6	*
NAME	1496:51	1496:51	4	ndir
LEAF_NODE	1496:51	1496:51	5	ndir
LEAF_NODE	1496:55	1496:55	3	,
PARAMETER_DECL	1496:57	1496:71	3	TIFFDirEntry * dir
TYPE	1496:57	1496:69	4	TIFFDirEntry *
TYPE_NAME	1496:57	1496:57	5	TIFFDirEntry
LEAF_NODE	1496:57	1496:57	6	TIFFDirEntry
POINTER	1496:69	1496:69	5	*
LEAF_NODE	1496:69	1496:69	6	*
NAME	1496:71	1496:71	4	dir
LEAF_NODE	1496:71	1496:71	5	dir
LEAF_NODE	1496:74	1496:74	3	,
PARAMETER_DECL	1496:76	1496:83	3	uint16 tag
TYPE	1496:76	1496:76	4	uint16
TYPE_NAME	1496:76	1496:76	5	uint16
LEAF_NODE	1496:76	1496:76	6	uint16
NAME	1496:83	1496:83	4	tag
LEAF_NODE	1496:83	1496:83	5	tag
LEAF_NODE	1496:86	1496:86	3	,
PARAMETER_DECL	1496:88	1496:95	3	uint32 count
TYPE	1496:88	1496:88	4	uint32
TYPE_NAME	1496:88	1496:88	5	uint32
LEAF_NODE	1496:88	1496:88	6	uint32
NAME	1496:95	1496:95	4	count
LEAF_NODE	1496:95	1496:95	5	count
LEAF_NODE	1496:100	1496:100	3	,
PARAMETER_DECL	1496:102	1496:110	3	uint64 * value
TYPE	1496:102	1496:108	4	uint64 *
TYPE_NAME	1496:102	1496:102	5	uint64
LEAF_NODE	1496:102	1496:102	6	uint64
POINTER	1496:108	1496:108	5	*
LEAF_NODE	1496:108	1496:108	6	*
NAME	1496:110	1496:110	4	value
LEAF_NODE	1496:110	1496:110	5	value
LEAF_NODE	1496:115	1496:115	3	)
LEAF_NODE	1497:0	1497:0	2	{
STATEMENTS	1498:1	1503:1	2	
SELECTION	1498:1	1499:1	3	
KEYWORD	1498:1	1498:1	4	if
LEAF_NODE	1498:1	1498:1	5	if
LEAF_NODE	1498:4	1498:4	4	(
CONDITION	1498:5	1498:5	4	dir == NULL
EXPR	1498:5	1498:10	5	dir == NULL
FIELD	1498:5	1498:5	6	dir
LEAF_NODE	1498:5	1498:5	7	dir
EQ_OPERATOR	1498:8	1498:8	6	==
LEAF_NODE	1498:8	1498:8	7	==
FIELD	1498:10	1498:10	6	NULL
LEAF_NODE	1498:10	1498:10	7	NULL
LEAF_NODE	1498:14	1498:14	4	)
STATEMENTS	1499:1	1502:1	4	
LEAF_NODE	1499:1	1499:1	5	{
STATEMENTS	1500:2	1501:2	5	
EXPR_STATEMENT	1500:2	1500:11	6	( * ndir ) ++ ;
EXPR	1500:2	1500:9	7	( * ndir ) ++
LEAF_NODE	1500:2	1500:2	8	(
UNARY_EXPR	1500:3	1500:4	8	* ndir
UNARY_OPERATOR	1500:3	1500:3	9	*
LEAF_NODE	1500:3	1500:3	10	*
FIELD	1500:4	1500:4	9	ndir
LEAF_NODE	1500:4	1500:4	10	ndir
LEAF_NODE	1500:8	1500:8	8	)
LEAF_NODE	1500:9	1500:9	8	++
LEAF_NODE	1500:11	1500:11	7	;
JUMP_STATEMENT	1501:2	1501:11	6	return ( 1 ) ;
KEYWORD	1501:2	1501:2	7	return
LEAF_NODE	1501:2	1501:2	8	return
DESTINATION	1501:8	1501:8	7	( 1 )
EXPR	1501:8	1501:10	8	( 1 )
LEAF_NODE	1501:8	1501:8	9	(
FIELD	1501:9	1501:9	9	1
LEAF_NODE	1501:9	1501:9	10	1
LEAF_NODE	1501:10	1501:10	9	)
LEAF_NODE	1501:11	1501:11	7	;
LEAF_NODE	1502:1	1502:1	5	}
JUMP_STATEMENT	1503:1	1503:77	3	return ( TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1503:1	1503:1	4	return
LEAF_NODE	1503:1	1503:1	5	return
DESTINATION	1503:7	1503:7	4	( TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value ) )
EXPR	1503:7	1503:76	5	( TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1503:7	1503:7	6	(
FUNCTION_CALL	1503:8	1503:75	6	TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value )
CALLEE	1503:8	1503:8	7	TIFFWriteDirectoryTagCheckedLong8Array
LEAF_NODE	1503:8	1503:8	8	TIFFWriteDirectoryTagCheckedLong8Array
LEAF_NODE	1503:46	1503:46	7	(
ARGUMENT	1503:47	1503:47	7	tif
FIELD	1503:47	1503:47	8	tif
LEAF_NODE	1503:47	1503:47	9	tif
LEAF_NODE	1503:50	1503:50	7	,
ARGUMENT	1503:51	1503:51	7	ndir
FIELD	1503:51	1503:51	8	ndir
LEAF_NODE	1503:51	1503:51	9	ndir
LEAF_NODE	1503:55	1503:55	7	,
ARGUMENT	1503:56	1503:56	7	dir
FIELD	1503:56	1503:56	8	dir
LEAF_NODE	1503:56	1503:56	9	dir
LEAF_NODE	1503:59	1503:59	7	,
ARGUMENT	1503:60	1503:60	7	tag
FIELD	1503:60	1503:60	8	tag
LEAF_NODE	1503:60	1503:60	9	tag
LEAF_NODE	1503:63	1503:63	7	,
ARGUMENT	1503:64	1503:64	7	count
FIELD	1503:64	1503:64	8	count
LEAF_NODE	1503:64	1503:64	9	count
LEAF_NODE	1503:69	1503:69	7	,
ARGUMENT	1503:70	1503:70	7	value
FIELD	1503:70	1503:70	8	value
LEAF_NODE	1503:70	1503:70	9	value
LEAF_NODE	1503:75	1503:75	7	)
LEAF_NODE	1503:76	1503:76	6	)
LEAF_NODE	1503:77	1503:77	4	;
LEAF_NODE	1504:0	1504:0	2	}
FUNCTION_DEF	1507:0	1516:0	1	
RETURN_TYPE	1507:0	1507:7	2	static int
LEAF_NODE	1507:0	1507:0	3	static
TYPE_NAME	1507:7	1507:7	3	int
LEAF_NODE	1507:7	1507:7	4	int
FUNCTION_NAME	1508:0	1508:0	2	TIFFWriteDirectoryTagSlong8
LEAF_NODE	1508:0	1508:0	3	TIFFWriteDirectoryTagSlong8
PARAMETER_LIST	1508:27	1508:95	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int64 value )
LEAF_NODE	1508:27	1508:27	3	(
PARAMETER_DECL	1508:28	1508:34	3	TIFF * tif
TYPE	1508:28	1508:32	4	TIFF *
TYPE_NAME	1508:28	1508:28	5	TIFF
LEAF_NODE	1508:28	1508:28	6	TIFF
POINTER	1508:32	1508:32	5	*
LEAF_NODE	1508:32	1508:32	6	*
NAME	1508:34	1508:34	4	tif
LEAF_NODE	1508:34	1508:34	5	tif
LEAF_NODE	1508:37	1508:37	3	,
PARAMETER_DECL	1508:39	1508:47	3	uint32 * ndir
TYPE	1508:39	1508:45	4	uint32 *
TYPE_NAME	1508:39	1508:39	5	uint32
LEAF_NODE	1508:39	1508:39	6	uint32
POINTER	1508:45	1508:45	5	*
LEAF_NODE	1508:45	1508:45	6	*
NAME	1508:47	1508:47	4	ndir
LEAF_NODE	1508:47	1508:47	5	ndir
LEAF_NODE	1508:51	1508:51	3	,
PARAMETER_DECL	1508:53	1508:67	3	TIFFDirEntry * dir
TYPE	1508:53	1508:65	4	TIFFDirEntry *
TYPE_NAME	1508:53	1508:53	5	TIFFDirEntry
LEAF_NODE	1508:53	1508:53	6	TIFFDirEntry
POINTER	1508:65	1508:65	5	*
LEAF_NODE	1508:65	1508:65	6	*
NAME	1508:67	1508:67	4	dir
LEAF_NODE	1508:67	1508:67	5	dir
LEAF_NODE	1508:70	1508:70	3	,
PARAMETER_DECL	1508:72	1508:79	3	uint16 tag
TYPE	1508:72	1508:72	4	uint16
TYPE_NAME	1508:72	1508:72	5	uint16
LEAF_NODE	1508:72	1508:72	6	uint16
NAME	1508:79	1508:79	4	tag
LEAF_NODE	1508:79	1508:79	5	tag
LEAF_NODE	1508:82	1508:82	3	,
PARAMETER_DECL	1508:84	1508:90	3	int64 value
TYPE	1508:84	1508:84	4	int64
TYPE_NAME	1508:84	1508:84	5	int64
LEAF_NODE	1508:84	1508:84	6	int64
NAME	1508:90	1508:90	4	value
LEAF_NODE	1508:90	1508:90	5	value
LEAF_NODE	1508:95	1508:95	3	)
LEAF_NODE	1509:0	1509:0	2	{
STATEMENTS	1510:1	1515:1	2	
SELECTION	1510:1	1511:1	3	
KEYWORD	1510:1	1510:1	4	if
LEAF_NODE	1510:1	1510:1	5	if
LEAF_NODE	1510:4	1510:4	4	(
CONDITION	1510:5	1510:5	4	dir == NULL
EXPR	1510:5	1510:10	5	dir == NULL
FIELD	1510:5	1510:5	6	dir
LEAF_NODE	1510:5	1510:5	7	dir
EQ_OPERATOR	1510:8	1510:8	6	==
LEAF_NODE	1510:8	1510:8	7	==
FIELD	1510:10	1510:10	6	NULL
LEAF_NODE	1510:10	1510:10	7	NULL
LEAF_NODE	1510:14	1510:14	4	)
STATEMENTS	1511:1	1514:1	4	
LEAF_NODE	1511:1	1511:1	5	{
STATEMENTS	1512:2	1513:2	5	
EXPR_STATEMENT	1512:2	1512:11	6	( * ndir ) ++ ;
EXPR	1512:2	1512:9	7	( * ndir ) ++
LEAF_NODE	1512:2	1512:2	8	(
UNARY_EXPR	1512:3	1512:4	8	* ndir
UNARY_OPERATOR	1512:3	1512:3	9	*
LEAF_NODE	1512:3	1512:3	10	*
FIELD	1512:4	1512:4	9	ndir
LEAF_NODE	1512:4	1512:4	10	ndir
LEAF_NODE	1512:8	1512:8	8	)
LEAF_NODE	1512:9	1512:9	8	++
LEAF_NODE	1512:11	1512:11	7	;
JUMP_STATEMENT	1513:2	1513:11	6	return ( 1 ) ;
KEYWORD	1513:2	1513:2	7	return
LEAF_NODE	1513:2	1513:2	8	return
DESTINATION	1513:8	1513:8	7	( 1 )
EXPR	1513:8	1513:10	8	( 1 )
LEAF_NODE	1513:8	1513:8	9	(
FIELD	1513:9	1513:9	9	1
LEAF_NODE	1513:9	1513:9	10	1
LEAF_NODE	1513:10	1513:10	9	)
LEAF_NODE	1513:11	1513:11	7	;
LEAF_NODE	1514:1	1514:1	5	}
JUMP_STATEMENT	1515:1	1515:67	3	return ( TIFFWriteDirectoryTagCheckedSlong8 ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1515:1	1515:1	4	return
LEAF_NODE	1515:1	1515:1	5	return
DESTINATION	1515:7	1515:7	4	( TIFFWriteDirectoryTagCheckedSlong8 ( tif , ndir , dir , tag , value ) )
EXPR	1515:7	1515:66	5	( TIFFWriteDirectoryTagCheckedSlong8 ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1515:7	1515:7	6	(
FUNCTION_CALL	1515:8	1515:65	6	TIFFWriteDirectoryTagCheckedSlong8 ( tif , ndir , dir , tag , value )
CALLEE	1515:8	1515:8	7	TIFFWriteDirectoryTagCheckedSlong8
LEAF_NODE	1515:8	1515:8	8	TIFFWriteDirectoryTagCheckedSlong8
LEAF_NODE	1515:42	1515:42	7	(
ARGUMENT	1515:43	1515:43	7	tif
FIELD	1515:43	1515:43	8	tif
LEAF_NODE	1515:43	1515:43	9	tif
LEAF_NODE	1515:46	1515:46	7	,
ARGUMENT	1515:47	1515:47	7	ndir
FIELD	1515:47	1515:47	8	ndir
LEAF_NODE	1515:47	1515:47	9	ndir
LEAF_NODE	1515:51	1515:51	7	,
ARGUMENT	1515:52	1515:52	7	dir
FIELD	1515:52	1515:52	8	dir
LEAF_NODE	1515:52	1515:52	9	dir
LEAF_NODE	1515:55	1515:55	7	,
ARGUMENT	1515:56	1515:56	7	tag
FIELD	1515:56	1515:56	8	tag
LEAF_NODE	1515:56	1515:56	9	tag
LEAF_NODE	1515:59	1515:59	7	,
ARGUMENT	1515:60	1515:60	7	value
FIELD	1515:60	1515:60	8	value
LEAF_NODE	1515:60	1515:60	9	value
LEAF_NODE	1515:65	1515:65	7	)
LEAF_NODE	1515:66	1515:66	6	)
LEAF_NODE	1515:67	1515:67	4	;
LEAF_NODE	1516:0	1516:0	2	}
FUNCTION_DEF	1519:0	1528:0	1	
RETURN_TYPE	1519:0	1519:7	2	static int
LEAF_NODE	1519:0	1519:0	3	static
TYPE_NAME	1519:7	1519:7	3	int
LEAF_NODE	1519:7	1519:7	4	int
FUNCTION_NAME	1520:0	1520:0	2	TIFFWriteDirectoryTagSlong8Array
LEAF_NODE	1520:0	1520:0	3	TIFFWriteDirectoryTagSlong8Array
PARAMETER_LIST	1520:32	1520:115	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , int64 * value )
LEAF_NODE	1520:32	1520:32	3	(
PARAMETER_DECL	1520:33	1520:39	3	TIFF * tif
TYPE	1520:33	1520:37	4	TIFF *
TYPE_NAME	1520:33	1520:33	5	TIFF
LEAF_NODE	1520:33	1520:33	6	TIFF
POINTER	1520:37	1520:37	5	*
LEAF_NODE	1520:37	1520:37	6	*
NAME	1520:39	1520:39	4	tif
LEAF_NODE	1520:39	1520:39	5	tif
LEAF_NODE	1520:42	1520:42	3	,
PARAMETER_DECL	1520:44	1520:52	3	uint32 * ndir
TYPE	1520:44	1520:50	4	uint32 *
TYPE_NAME	1520:44	1520:44	5	uint32
LEAF_NODE	1520:44	1520:44	6	uint32
POINTER	1520:50	1520:50	5	*
LEAF_NODE	1520:50	1520:50	6	*
NAME	1520:52	1520:52	4	ndir
LEAF_NODE	1520:52	1520:52	5	ndir
LEAF_NODE	1520:56	1520:56	3	,
PARAMETER_DECL	1520:58	1520:72	3	TIFFDirEntry * dir
TYPE	1520:58	1520:70	4	TIFFDirEntry *
TYPE_NAME	1520:58	1520:58	5	TIFFDirEntry
LEAF_NODE	1520:58	1520:58	6	TIFFDirEntry
POINTER	1520:70	1520:70	5	*
LEAF_NODE	1520:70	1520:70	6	*
NAME	1520:72	1520:72	4	dir
LEAF_NODE	1520:72	1520:72	5	dir
LEAF_NODE	1520:75	1520:75	3	,
PARAMETER_DECL	1520:77	1520:84	3	uint16 tag
TYPE	1520:77	1520:77	4	uint16
TYPE_NAME	1520:77	1520:77	5	uint16
LEAF_NODE	1520:77	1520:77	6	uint16
NAME	1520:84	1520:84	4	tag
LEAF_NODE	1520:84	1520:84	5	tag
LEAF_NODE	1520:87	1520:87	3	,
PARAMETER_DECL	1520:89	1520:96	3	uint32 count
TYPE	1520:89	1520:89	4	uint32
TYPE_NAME	1520:89	1520:89	5	uint32
LEAF_NODE	1520:89	1520:89	6	uint32
NAME	1520:96	1520:96	4	count
LEAF_NODE	1520:96	1520:96	5	count
LEAF_NODE	1520:101	1520:101	3	,
PARAMETER_DECL	1520:103	1520:110	3	int64 * value
TYPE	1520:103	1520:108	4	int64 *
TYPE_NAME	1520:103	1520:103	5	int64
LEAF_NODE	1520:103	1520:103	6	int64
POINTER	1520:108	1520:108	5	*
LEAF_NODE	1520:108	1520:108	6	*
NAME	1520:110	1520:110	4	value
LEAF_NODE	1520:110	1520:110	5	value
LEAF_NODE	1520:115	1520:115	3	)
LEAF_NODE	1521:0	1521:0	2	{
STATEMENTS	1522:1	1527:1	2	
SELECTION	1522:1	1523:1	3	
KEYWORD	1522:1	1522:1	4	if
LEAF_NODE	1522:1	1522:1	5	if
LEAF_NODE	1522:4	1522:4	4	(
CONDITION	1522:5	1522:5	4	dir == NULL
EXPR	1522:5	1522:10	5	dir == NULL
FIELD	1522:5	1522:5	6	dir
LEAF_NODE	1522:5	1522:5	7	dir
EQ_OPERATOR	1522:8	1522:8	6	==
LEAF_NODE	1522:8	1522:8	7	==
FIELD	1522:10	1522:10	6	NULL
LEAF_NODE	1522:10	1522:10	7	NULL
LEAF_NODE	1522:14	1522:14	4	)
STATEMENTS	1523:1	1526:1	4	
LEAF_NODE	1523:1	1523:1	5	{
STATEMENTS	1524:2	1525:2	5	
EXPR_STATEMENT	1524:2	1524:11	6	( * ndir ) ++ ;
EXPR	1524:2	1524:9	7	( * ndir ) ++
LEAF_NODE	1524:2	1524:2	8	(
UNARY_EXPR	1524:3	1524:4	8	* ndir
UNARY_OPERATOR	1524:3	1524:3	9	*
LEAF_NODE	1524:3	1524:3	10	*
FIELD	1524:4	1524:4	9	ndir
LEAF_NODE	1524:4	1524:4	10	ndir
LEAF_NODE	1524:8	1524:8	8	)
LEAF_NODE	1524:9	1524:9	8	++
LEAF_NODE	1524:11	1524:11	7	;
JUMP_STATEMENT	1525:2	1525:11	6	return ( 1 ) ;
KEYWORD	1525:2	1525:2	7	return
LEAF_NODE	1525:2	1525:2	8	return
DESTINATION	1525:8	1525:8	7	( 1 )
EXPR	1525:8	1525:10	8	( 1 )
LEAF_NODE	1525:8	1525:8	9	(
FIELD	1525:9	1525:9	9	1
LEAF_NODE	1525:9	1525:9	10	1
LEAF_NODE	1525:10	1525:10	9	)
LEAF_NODE	1525:11	1525:11	7	;
LEAF_NODE	1526:1	1526:1	5	}
JUMP_STATEMENT	1527:1	1527:78	3	return ( TIFFWriteDirectoryTagCheckedSlong8Array ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1527:1	1527:1	4	return
LEAF_NODE	1527:1	1527:1	5	return
DESTINATION	1527:7	1527:7	4	( TIFFWriteDirectoryTagCheckedSlong8Array ( tif , ndir , dir , tag , count , value ) )
EXPR	1527:7	1527:77	5	( TIFFWriteDirectoryTagCheckedSlong8Array ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1527:7	1527:7	6	(
FUNCTION_CALL	1527:8	1527:76	6	TIFFWriteDirectoryTagCheckedSlong8Array ( tif , ndir , dir , tag , count , value )
CALLEE	1527:8	1527:8	7	TIFFWriteDirectoryTagCheckedSlong8Array
LEAF_NODE	1527:8	1527:8	8	TIFFWriteDirectoryTagCheckedSlong8Array
LEAF_NODE	1527:47	1527:47	7	(
ARGUMENT	1527:48	1527:48	7	tif
FIELD	1527:48	1527:48	8	tif
LEAF_NODE	1527:48	1527:48	9	tif
LEAF_NODE	1527:51	1527:51	7	,
ARGUMENT	1527:52	1527:52	7	ndir
FIELD	1527:52	1527:52	8	ndir
LEAF_NODE	1527:52	1527:52	9	ndir
LEAF_NODE	1527:56	1527:56	7	,
ARGUMENT	1527:57	1527:57	7	dir
FIELD	1527:57	1527:57	8	dir
LEAF_NODE	1527:57	1527:57	9	dir
LEAF_NODE	1527:60	1527:60	7	,
ARGUMENT	1527:61	1527:61	7	tag
FIELD	1527:61	1527:61	8	tag
LEAF_NODE	1527:61	1527:61	9	tag
LEAF_NODE	1527:64	1527:64	7	,
ARGUMENT	1527:65	1527:65	7	count
FIELD	1527:65	1527:65	8	count
LEAF_NODE	1527:65	1527:65	9	count
LEAF_NODE	1527:70	1527:70	7	,
ARGUMENT	1527:71	1527:71	7	value
FIELD	1527:71	1527:71	8	value
LEAF_NODE	1527:71	1527:71	9	value
LEAF_NODE	1527:76	1527:76	7	)
LEAF_NODE	1527:77	1527:77	6	)
LEAF_NODE	1527:78	1527:78	4	;
LEAF_NODE	1528:0	1528:0	2	}
FUNCTION_DEF	1530:0	1539:0	1	
RETURN_TYPE	1530:0	1530:7	2	static int
LEAF_NODE	1530:0	1530:0	3	static
TYPE_NAME	1530:7	1530:7	3	int
LEAF_NODE	1530:7	1530:7	4	int
FUNCTION_NAME	1531:0	1531:0	2	TIFFWriteDirectoryTagRational
LEAF_NODE	1531:0	1531:0	3	TIFFWriteDirectoryTagRational
PARAMETER_LIST	1531:29	1531:98	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , double value )
LEAF_NODE	1531:29	1531:29	3	(
PARAMETER_DECL	1531:30	1531:36	3	TIFF * tif
TYPE	1531:30	1531:34	4	TIFF *
TYPE_NAME	1531:30	1531:30	5	TIFF
LEAF_NODE	1531:30	1531:30	6	TIFF
POINTER	1531:34	1531:34	5	*
LEAF_NODE	1531:34	1531:34	6	*
NAME	1531:36	1531:36	4	tif
LEAF_NODE	1531:36	1531:36	5	tif
LEAF_NODE	1531:39	1531:39	3	,
PARAMETER_DECL	1531:41	1531:49	3	uint32 * ndir
TYPE	1531:41	1531:47	4	uint32 *
TYPE_NAME	1531:41	1531:41	5	uint32
LEAF_NODE	1531:41	1531:41	6	uint32
POINTER	1531:47	1531:47	5	*
LEAF_NODE	1531:47	1531:47	6	*
NAME	1531:49	1531:49	4	ndir
LEAF_NODE	1531:49	1531:49	5	ndir
LEAF_NODE	1531:53	1531:53	3	,
PARAMETER_DECL	1531:55	1531:69	3	TIFFDirEntry * dir
TYPE	1531:55	1531:67	4	TIFFDirEntry *
TYPE_NAME	1531:55	1531:55	5	TIFFDirEntry
LEAF_NODE	1531:55	1531:55	6	TIFFDirEntry
POINTER	1531:67	1531:67	5	*
LEAF_NODE	1531:67	1531:67	6	*
NAME	1531:69	1531:69	4	dir
LEAF_NODE	1531:69	1531:69	5	dir
LEAF_NODE	1531:72	1531:72	3	,
PARAMETER_DECL	1531:74	1531:81	3	uint16 tag
TYPE	1531:74	1531:74	4	uint16
TYPE_NAME	1531:74	1531:74	5	uint16
LEAF_NODE	1531:74	1531:74	6	uint16
NAME	1531:81	1531:81	4	tag
LEAF_NODE	1531:81	1531:81	5	tag
LEAF_NODE	1531:84	1531:84	3	,
PARAMETER_DECL	1531:86	1531:93	3	double value
TYPE	1531:86	1531:86	4	double
TYPE_NAME	1531:86	1531:86	5	double
LEAF_NODE	1531:86	1531:86	6	double
NAME	1531:93	1531:93	4	value
LEAF_NODE	1531:93	1531:93	5	value
LEAF_NODE	1531:98	1531:98	3	)
LEAF_NODE	1532:0	1532:0	2	{
STATEMENTS	1533:1	1538:1	2	
SELECTION	1533:1	1534:1	3	
KEYWORD	1533:1	1533:1	4	if
LEAF_NODE	1533:1	1533:1	5	if
LEAF_NODE	1533:4	1533:4	4	(
CONDITION	1533:5	1533:5	4	dir == NULL
EXPR	1533:5	1533:10	5	dir == NULL
FIELD	1533:5	1533:5	6	dir
LEAF_NODE	1533:5	1533:5	7	dir
EQ_OPERATOR	1533:8	1533:8	6	==
LEAF_NODE	1533:8	1533:8	7	==
FIELD	1533:10	1533:10	6	NULL
LEAF_NODE	1533:10	1533:10	7	NULL
LEAF_NODE	1533:14	1533:14	4	)
STATEMENTS	1534:1	1537:1	4	
LEAF_NODE	1534:1	1534:1	5	{
STATEMENTS	1535:2	1536:2	5	
EXPR_STATEMENT	1535:2	1535:11	6	( * ndir ) ++ ;
EXPR	1535:2	1535:9	7	( * ndir ) ++
LEAF_NODE	1535:2	1535:2	8	(
UNARY_EXPR	1535:3	1535:4	8	* ndir
UNARY_OPERATOR	1535:3	1535:3	9	*
LEAF_NODE	1535:3	1535:3	10	*
FIELD	1535:4	1535:4	9	ndir
LEAF_NODE	1535:4	1535:4	10	ndir
LEAF_NODE	1535:8	1535:8	8	)
LEAF_NODE	1535:9	1535:9	8	++
LEAF_NODE	1535:11	1535:11	7	;
JUMP_STATEMENT	1536:2	1536:11	6	return ( 1 ) ;
KEYWORD	1536:2	1536:2	7	return
LEAF_NODE	1536:2	1536:2	8	return
DESTINATION	1536:8	1536:8	7	( 1 )
EXPR	1536:8	1536:10	8	( 1 )
LEAF_NODE	1536:8	1536:8	9	(
FIELD	1536:9	1536:9	9	1
LEAF_NODE	1536:9	1536:9	10	1
LEAF_NODE	1536:10	1536:10	9	)
LEAF_NODE	1536:11	1536:11	7	;
LEAF_NODE	1537:1	1537:1	5	}
JUMP_STATEMENT	1538:1	1538:69	3	return ( TIFFWriteDirectoryTagCheckedRational ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1538:1	1538:1	4	return
LEAF_NODE	1538:1	1538:1	5	return
DESTINATION	1538:7	1538:7	4	( TIFFWriteDirectoryTagCheckedRational ( tif , ndir , dir , tag , value ) )
EXPR	1538:7	1538:68	5	( TIFFWriteDirectoryTagCheckedRational ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1538:7	1538:7	6	(
FUNCTION_CALL	1538:8	1538:67	6	TIFFWriteDirectoryTagCheckedRational ( tif , ndir , dir , tag , value )
CALLEE	1538:8	1538:8	7	TIFFWriteDirectoryTagCheckedRational
LEAF_NODE	1538:8	1538:8	8	TIFFWriteDirectoryTagCheckedRational
LEAF_NODE	1538:44	1538:44	7	(
ARGUMENT	1538:45	1538:45	7	tif
FIELD	1538:45	1538:45	8	tif
LEAF_NODE	1538:45	1538:45	9	tif
LEAF_NODE	1538:48	1538:48	7	,
ARGUMENT	1538:49	1538:49	7	ndir
FIELD	1538:49	1538:49	8	ndir
LEAF_NODE	1538:49	1538:49	9	ndir
LEAF_NODE	1538:53	1538:53	7	,
ARGUMENT	1538:54	1538:54	7	dir
FIELD	1538:54	1538:54	8	dir
LEAF_NODE	1538:54	1538:54	9	dir
LEAF_NODE	1538:57	1538:57	7	,
ARGUMENT	1538:58	1538:58	7	tag
FIELD	1538:58	1538:58	8	tag
LEAF_NODE	1538:58	1538:58	9	tag
LEAF_NODE	1538:61	1538:61	7	,
ARGUMENT	1538:62	1538:62	7	value
FIELD	1538:62	1538:62	8	value
LEAF_NODE	1538:62	1538:62	9	value
LEAF_NODE	1538:67	1538:67	7	)
LEAF_NODE	1538:68	1538:68	6	)
LEAF_NODE	1538:69	1538:69	4	;
LEAF_NODE	1539:0	1539:0	2	}
FUNCTION_DEF	1541:0	1550:0	1	
RETURN_TYPE	1541:0	1541:7	2	static int
LEAF_NODE	1541:0	1541:0	3	static
TYPE_NAME	1541:7	1541:7	3	int
LEAF_NODE	1541:7	1541:7	4	int
FUNCTION_NAME	1542:0	1542:0	2	TIFFWriteDirectoryTagRationalArray
LEAF_NODE	1542:0	1542:0	3	TIFFWriteDirectoryTagRationalArray
PARAMETER_LIST	1542:34	1542:117	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , float * value )
LEAF_NODE	1542:34	1542:34	3	(
PARAMETER_DECL	1542:35	1542:41	3	TIFF * tif
TYPE	1542:35	1542:39	4	TIFF *
TYPE_NAME	1542:35	1542:35	5	TIFF
LEAF_NODE	1542:35	1542:35	6	TIFF
POINTER	1542:39	1542:39	5	*
LEAF_NODE	1542:39	1542:39	6	*
NAME	1542:41	1542:41	4	tif
LEAF_NODE	1542:41	1542:41	5	tif
LEAF_NODE	1542:44	1542:44	3	,
PARAMETER_DECL	1542:46	1542:54	3	uint32 * ndir
TYPE	1542:46	1542:52	4	uint32 *
TYPE_NAME	1542:46	1542:46	5	uint32
LEAF_NODE	1542:46	1542:46	6	uint32
POINTER	1542:52	1542:52	5	*
LEAF_NODE	1542:52	1542:52	6	*
NAME	1542:54	1542:54	4	ndir
LEAF_NODE	1542:54	1542:54	5	ndir
LEAF_NODE	1542:58	1542:58	3	,
PARAMETER_DECL	1542:60	1542:74	3	TIFFDirEntry * dir
TYPE	1542:60	1542:72	4	TIFFDirEntry *
TYPE_NAME	1542:60	1542:60	5	TIFFDirEntry
LEAF_NODE	1542:60	1542:60	6	TIFFDirEntry
POINTER	1542:72	1542:72	5	*
LEAF_NODE	1542:72	1542:72	6	*
NAME	1542:74	1542:74	4	dir
LEAF_NODE	1542:74	1542:74	5	dir
LEAF_NODE	1542:77	1542:77	3	,
PARAMETER_DECL	1542:79	1542:86	3	uint16 tag
TYPE	1542:79	1542:79	4	uint16
TYPE_NAME	1542:79	1542:79	5	uint16
LEAF_NODE	1542:79	1542:79	6	uint16
NAME	1542:86	1542:86	4	tag
LEAF_NODE	1542:86	1542:86	5	tag
LEAF_NODE	1542:89	1542:89	3	,
PARAMETER_DECL	1542:91	1542:98	3	uint32 count
TYPE	1542:91	1542:91	4	uint32
TYPE_NAME	1542:91	1542:91	5	uint32
LEAF_NODE	1542:91	1542:91	6	uint32
NAME	1542:98	1542:98	4	count
LEAF_NODE	1542:98	1542:98	5	count
LEAF_NODE	1542:103	1542:103	3	,
PARAMETER_DECL	1542:105	1542:112	3	float * value
TYPE	1542:105	1542:110	4	float *
TYPE_NAME	1542:105	1542:105	5	float
LEAF_NODE	1542:105	1542:105	6	float
POINTER	1542:110	1542:110	5	*
LEAF_NODE	1542:110	1542:110	6	*
NAME	1542:112	1542:112	4	value
LEAF_NODE	1542:112	1542:112	5	value
LEAF_NODE	1542:117	1542:117	3	)
LEAF_NODE	1543:0	1543:0	2	{
STATEMENTS	1544:1	1549:1	2	
SELECTION	1544:1	1545:1	3	
KEYWORD	1544:1	1544:1	4	if
LEAF_NODE	1544:1	1544:1	5	if
LEAF_NODE	1544:4	1544:4	4	(
CONDITION	1544:5	1544:5	4	dir == NULL
EXPR	1544:5	1544:10	5	dir == NULL
FIELD	1544:5	1544:5	6	dir
LEAF_NODE	1544:5	1544:5	7	dir
EQ_OPERATOR	1544:8	1544:8	6	==
LEAF_NODE	1544:8	1544:8	7	==
FIELD	1544:10	1544:10	6	NULL
LEAF_NODE	1544:10	1544:10	7	NULL
LEAF_NODE	1544:14	1544:14	4	)
STATEMENTS	1545:1	1548:1	4	
LEAF_NODE	1545:1	1545:1	5	{
STATEMENTS	1546:2	1547:2	5	
EXPR_STATEMENT	1546:2	1546:11	6	( * ndir ) ++ ;
EXPR	1546:2	1546:9	7	( * ndir ) ++
LEAF_NODE	1546:2	1546:2	8	(
UNARY_EXPR	1546:3	1546:4	8	* ndir
UNARY_OPERATOR	1546:3	1546:3	9	*
LEAF_NODE	1546:3	1546:3	10	*
FIELD	1546:4	1546:4	9	ndir
LEAF_NODE	1546:4	1546:4	10	ndir
LEAF_NODE	1546:8	1546:8	8	)
LEAF_NODE	1546:9	1546:9	8	++
LEAF_NODE	1546:11	1546:11	7	;
JUMP_STATEMENT	1547:2	1547:11	6	return ( 1 ) ;
KEYWORD	1547:2	1547:2	7	return
LEAF_NODE	1547:2	1547:2	8	return
DESTINATION	1547:8	1547:8	7	( 1 )
EXPR	1547:8	1547:10	8	( 1 )
LEAF_NODE	1547:8	1547:8	9	(
FIELD	1547:9	1547:9	9	1
LEAF_NODE	1547:9	1547:9	10	1
LEAF_NODE	1547:10	1547:10	9	)
LEAF_NODE	1547:11	1547:11	7	;
LEAF_NODE	1548:1	1548:1	5	}
JUMP_STATEMENT	1549:1	1549:80	3	return ( TIFFWriteDirectoryTagCheckedRationalArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1549:1	1549:1	4	return
LEAF_NODE	1549:1	1549:1	5	return
DESTINATION	1549:7	1549:7	4	( TIFFWriteDirectoryTagCheckedRationalArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1549:7	1549:79	5	( TIFFWriteDirectoryTagCheckedRationalArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1549:7	1549:7	6	(
FUNCTION_CALL	1549:8	1549:78	6	TIFFWriteDirectoryTagCheckedRationalArray ( tif , ndir , dir , tag , count , value )
CALLEE	1549:8	1549:8	7	TIFFWriteDirectoryTagCheckedRationalArray
LEAF_NODE	1549:8	1549:8	8	TIFFWriteDirectoryTagCheckedRationalArray
LEAF_NODE	1549:49	1549:49	7	(
ARGUMENT	1549:50	1549:50	7	tif
FIELD	1549:50	1549:50	8	tif
LEAF_NODE	1549:50	1549:50	9	tif
LEAF_NODE	1549:53	1549:53	7	,
ARGUMENT	1549:54	1549:54	7	ndir
FIELD	1549:54	1549:54	8	ndir
LEAF_NODE	1549:54	1549:54	9	ndir
LEAF_NODE	1549:58	1549:58	7	,
ARGUMENT	1549:59	1549:59	7	dir
FIELD	1549:59	1549:59	8	dir
LEAF_NODE	1549:59	1549:59	9	dir
LEAF_NODE	1549:62	1549:62	7	,
ARGUMENT	1549:63	1549:63	7	tag
FIELD	1549:63	1549:63	8	tag
LEAF_NODE	1549:63	1549:63	9	tag
LEAF_NODE	1549:66	1549:66	7	,
ARGUMENT	1549:67	1549:67	7	count
FIELD	1549:67	1549:67	8	count
LEAF_NODE	1549:67	1549:67	9	count
LEAF_NODE	1549:72	1549:72	7	,
ARGUMENT	1549:73	1549:73	7	value
FIELD	1549:73	1549:73	8	value
LEAF_NODE	1549:73	1549:73	9	value
LEAF_NODE	1549:78	1549:78	7	)
LEAF_NODE	1549:79	1549:79	6	)
LEAF_NODE	1549:80	1549:80	4	;
LEAF_NODE	1550:0	1550:0	2	}
FUNCTION_DEF	1552:0	1561:0	1	
RETURN_TYPE	1552:0	1552:7	2	static int
LEAF_NODE	1552:0	1552:0	3	static
TYPE_NAME	1552:7	1552:7	3	int
LEAF_NODE	1552:7	1552:7	4	int
FUNCTION_NAME	1553:0	1553:0	2	TIFFWriteDirectoryTagSrationalArray
LEAF_NODE	1553:0	1553:0	3	TIFFWriteDirectoryTagSrationalArray
PARAMETER_LIST	1553:35	1553:118	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , float * value )
LEAF_NODE	1553:35	1553:35	3	(
PARAMETER_DECL	1553:36	1553:42	3	TIFF * tif
TYPE	1553:36	1553:40	4	TIFF *
TYPE_NAME	1553:36	1553:36	5	TIFF
LEAF_NODE	1553:36	1553:36	6	TIFF
POINTER	1553:40	1553:40	5	*
LEAF_NODE	1553:40	1553:40	6	*
NAME	1553:42	1553:42	4	tif
LEAF_NODE	1553:42	1553:42	5	tif
LEAF_NODE	1553:45	1553:45	3	,
PARAMETER_DECL	1553:47	1553:55	3	uint32 * ndir
TYPE	1553:47	1553:53	4	uint32 *
TYPE_NAME	1553:47	1553:47	5	uint32
LEAF_NODE	1553:47	1553:47	6	uint32
POINTER	1553:53	1553:53	5	*
LEAF_NODE	1553:53	1553:53	6	*
NAME	1553:55	1553:55	4	ndir
LEAF_NODE	1553:55	1553:55	5	ndir
LEAF_NODE	1553:59	1553:59	3	,
PARAMETER_DECL	1553:61	1553:75	3	TIFFDirEntry * dir
TYPE	1553:61	1553:73	4	TIFFDirEntry *
TYPE_NAME	1553:61	1553:61	5	TIFFDirEntry
LEAF_NODE	1553:61	1553:61	6	TIFFDirEntry
POINTER	1553:73	1553:73	5	*
LEAF_NODE	1553:73	1553:73	6	*
NAME	1553:75	1553:75	4	dir
LEAF_NODE	1553:75	1553:75	5	dir
LEAF_NODE	1553:78	1553:78	3	,
PARAMETER_DECL	1553:80	1553:87	3	uint16 tag
TYPE	1553:80	1553:80	4	uint16
TYPE_NAME	1553:80	1553:80	5	uint16
LEAF_NODE	1553:80	1553:80	6	uint16
NAME	1553:87	1553:87	4	tag
LEAF_NODE	1553:87	1553:87	5	tag
LEAF_NODE	1553:90	1553:90	3	,
PARAMETER_DECL	1553:92	1553:99	3	uint32 count
TYPE	1553:92	1553:92	4	uint32
TYPE_NAME	1553:92	1553:92	5	uint32
LEAF_NODE	1553:92	1553:92	6	uint32
NAME	1553:99	1553:99	4	count
LEAF_NODE	1553:99	1553:99	5	count
LEAF_NODE	1553:104	1553:104	3	,
PARAMETER_DECL	1553:106	1553:113	3	float * value
TYPE	1553:106	1553:111	4	float *
TYPE_NAME	1553:106	1553:106	5	float
LEAF_NODE	1553:106	1553:106	6	float
POINTER	1553:111	1553:111	5	*
LEAF_NODE	1553:111	1553:111	6	*
NAME	1553:113	1553:113	4	value
LEAF_NODE	1553:113	1553:113	5	value
LEAF_NODE	1553:118	1553:118	3	)
LEAF_NODE	1554:0	1554:0	2	{
STATEMENTS	1555:1	1560:1	2	
SELECTION	1555:1	1556:1	3	
KEYWORD	1555:1	1555:1	4	if
LEAF_NODE	1555:1	1555:1	5	if
LEAF_NODE	1555:4	1555:4	4	(
CONDITION	1555:5	1555:5	4	dir == NULL
EXPR	1555:5	1555:10	5	dir == NULL
FIELD	1555:5	1555:5	6	dir
LEAF_NODE	1555:5	1555:5	7	dir
EQ_OPERATOR	1555:8	1555:8	6	==
LEAF_NODE	1555:8	1555:8	7	==
FIELD	1555:10	1555:10	6	NULL
LEAF_NODE	1555:10	1555:10	7	NULL
LEAF_NODE	1555:14	1555:14	4	)
STATEMENTS	1556:1	1559:1	4	
LEAF_NODE	1556:1	1556:1	5	{
STATEMENTS	1557:2	1558:2	5	
EXPR_STATEMENT	1557:2	1557:11	6	( * ndir ) ++ ;
EXPR	1557:2	1557:9	7	( * ndir ) ++
LEAF_NODE	1557:2	1557:2	8	(
UNARY_EXPR	1557:3	1557:4	8	* ndir
UNARY_OPERATOR	1557:3	1557:3	9	*
LEAF_NODE	1557:3	1557:3	10	*
FIELD	1557:4	1557:4	9	ndir
LEAF_NODE	1557:4	1557:4	10	ndir
LEAF_NODE	1557:8	1557:8	8	)
LEAF_NODE	1557:9	1557:9	8	++
LEAF_NODE	1557:11	1557:11	7	;
JUMP_STATEMENT	1558:2	1558:11	6	return ( 1 ) ;
KEYWORD	1558:2	1558:2	7	return
LEAF_NODE	1558:2	1558:2	8	return
DESTINATION	1558:8	1558:8	7	( 1 )
EXPR	1558:8	1558:10	8	( 1 )
LEAF_NODE	1558:8	1558:8	9	(
FIELD	1558:9	1558:9	9	1
LEAF_NODE	1558:9	1558:9	10	1
LEAF_NODE	1558:10	1558:10	9	)
LEAF_NODE	1558:11	1558:11	7	;
LEAF_NODE	1559:1	1559:1	5	}
JUMP_STATEMENT	1560:1	1560:81	3	return ( TIFFWriteDirectoryTagCheckedSrationalArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1560:1	1560:1	4	return
LEAF_NODE	1560:1	1560:1	5	return
DESTINATION	1560:7	1560:7	4	( TIFFWriteDirectoryTagCheckedSrationalArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1560:7	1560:80	5	( TIFFWriteDirectoryTagCheckedSrationalArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1560:7	1560:7	6	(
FUNCTION_CALL	1560:8	1560:79	6	TIFFWriteDirectoryTagCheckedSrationalArray ( tif , ndir , dir , tag , count , value )
CALLEE	1560:8	1560:8	7	TIFFWriteDirectoryTagCheckedSrationalArray
LEAF_NODE	1560:8	1560:8	8	TIFFWriteDirectoryTagCheckedSrationalArray
LEAF_NODE	1560:50	1560:50	7	(
ARGUMENT	1560:51	1560:51	7	tif
FIELD	1560:51	1560:51	8	tif
LEAF_NODE	1560:51	1560:51	9	tif
LEAF_NODE	1560:54	1560:54	7	,
ARGUMENT	1560:55	1560:55	7	ndir
FIELD	1560:55	1560:55	8	ndir
LEAF_NODE	1560:55	1560:55	9	ndir
LEAF_NODE	1560:59	1560:59	7	,
ARGUMENT	1560:60	1560:60	7	dir
FIELD	1560:60	1560:60	8	dir
LEAF_NODE	1560:60	1560:60	9	dir
LEAF_NODE	1560:63	1560:63	7	,
ARGUMENT	1560:64	1560:64	7	tag
FIELD	1560:64	1560:64	8	tag
LEAF_NODE	1560:64	1560:64	9	tag
LEAF_NODE	1560:67	1560:67	7	,
ARGUMENT	1560:68	1560:68	7	count
FIELD	1560:68	1560:68	8	count
LEAF_NODE	1560:68	1560:68	9	count
LEAF_NODE	1560:73	1560:73	7	,
ARGUMENT	1560:74	1560:74	7	value
FIELD	1560:74	1560:74	8	value
LEAF_NODE	1560:74	1560:74	9	value
LEAF_NODE	1560:79	1560:79	7	)
LEAF_NODE	1560:80	1560:80	6	)
LEAF_NODE	1560:81	1560:81	4	;
LEAF_NODE	1561:0	1561:0	2	}
FUNCTION_DEF	1564:0	1572:0	1	
RETURN_TYPE	1564:0	1564:7	2	static int
LEAF_NODE	1564:0	1564:0	3	static
TYPE_NAME	1564:7	1564:7	3	int
LEAF_NODE	1564:7	1564:7	4	int
FUNCTION_NAME	1564:11	1564:11	2	TIFFWriteDirectoryTagFloat
LEAF_NODE	1564:11	1564:11	3	TIFFWriteDirectoryTagFloat
PARAMETER_LIST	1564:37	1564:105	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , float value )
LEAF_NODE	1564:37	1564:37	3	(
PARAMETER_DECL	1564:38	1564:44	3	TIFF * tif
TYPE	1564:38	1564:42	4	TIFF *
TYPE_NAME	1564:38	1564:38	5	TIFF
LEAF_NODE	1564:38	1564:38	6	TIFF
POINTER	1564:42	1564:42	5	*
LEAF_NODE	1564:42	1564:42	6	*
NAME	1564:44	1564:44	4	tif
LEAF_NODE	1564:44	1564:44	5	tif
LEAF_NODE	1564:47	1564:47	3	,
PARAMETER_DECL	1564:49	1564:57	3	uint32 * ndir
TYPE	1564:49	1564:55	4	uint32 *
TYPE_NAME	1564:49	1564:49	5	uint32
LEAF_NODE	1564:49	1564:49	6	uint32
POINTER	1564:55	1564:55	5	*
LEAF_NODE	1564:55	1564:55	6	*
NAME	1564:57	1564:57	4	ndir
LEAF_NODE	1564:57	1564:57	5	ndir
LEAF_NODE	1564:61	1564:61	3	,
PARAMETER_DECL	1564:63	1564:77	3	TIFFDirEntry * dir
TYPE	1564:63	1564:75	4	TIFFDirEntry *
TYPE_NAME	1564:63	1564:63	5	TIFFDirEntry
LEAF_NODE	1564:63	1564:63	6	TIFFDirEntry
POINTER	1564:75	1564:75	5	*
LEAF_NODE	1564:75	1564:75	6	*
NAME	1564:77	1564:77	4	dir
LEAF_NODE	1564:77	1564:77	5	dir
LEAF_NODE	1564:80	1564:80	3	,
PARAMETER_DECL	1564:82	1564:89	3	uint16 tag
TYPE	1564:82	1564:82	4	uint16
TYPE_NAME	1564:82	1564:82	5	uint16
LEAF_NODE	1564:82	1564:82	6	uint16
NAME	1564:89	1564:89	4	tag
LEAF_NODE	1564:89	1564:89	5	tag
LEAF_NODE	1564:92	1564:92	3	,
PARAMETER_DECL	1564:94	1564:100	3	float value
TYPE	1564:94	1564:94	4	float
TYPE_NAME	1564:94	1564:94	5	float
LEAF_NODE	1564:94	1564:94	6	float
NAME	1564:100	1564:100	4	value
LEAF_NODE	1564:100	1564:100	5	value
LEAF_NODE	1564:105	1564:105	3	)
LEAF_NODE	1565:0	1565:0	2	{
STATEMENTS	1566:1	1571:1	2	
SELECTION	1566:1	1567:1	3	
KEYWORD	1566:1	1566:1	4	if
LEAF_NODE	1566:1	1566:1	5	if
LEAF_NODE	1566:4	1566:4	4	(
CONDITION	1566:5	1566:5	4	dir == NULL
EXPR	1566:5	1566:10	5	dir == NULL
FIELD	1566:5	1566:5	6	dir
LEAF_NODE	1566:5	1566:5	7	dir
EQ_OPERATOR	1566:8	1566:8	6	==
LEAF_NODE	1566:8	1566:8	7	==
FIELD	1566:10	1566:10	6	NULL
LEAF_NODE	1566:10	1566:10	7	NULL
LEAF_NODE	1566:14	1566:14	4	)
STATEMENTS	1567:1	1570:1	4	
LEAF_NODE	1567:1	1567:1	5	{
STATEMENTS	1568:2	1569:2	5	
EXPR_STATEMENT	1568:2	1568:11	6	( * ndir ) ++ ;
EXPR	1568:2	1568:9	7	( * ndir ) ++
LEAF_NODE	1568:2	1568:2	8	(
UNARY_EXPR	1568:3	1568:4	8	* ndir
UNARY_OPERATOR	1568:3	1568:3	9	*
LEAF_NODE	1568:3	1568:3	10	*
FIELD	1568:4	1568:4	9	ndir
LEAF_NODE	1568:4	1568:4	10	ndir
LEAF_NODE	1568:8	1568:8	8	)
LEAF_NODE	1568:9	1568:9	8	++
LEAF_NODE	1568:11	1568:11	7	;
JUMP_STATEMENT	1569:2	1569:11	6	return ( 1 ) ;
KEYWORD	1569:2	1569:2	7	return
LEAF_NODE	1569:2	1569:2	8	return
DESTINATION	1569:8	1569:8	7	( 1 )
EXPR	1569:8	1569:10	8	( 1 )
LEAF_NODE	1569:8	1569:8	9	(
FIELD	1569:9	1569:9	9	1
LEAF_NODE	1569:9	1569:9	10	1
LEAF_NODE	1569:10	1569:10	9	)
LEAF_NODE	1569:11	1569:11	7	;
LEAF_NODE	1570:1	1570:1	5	}
JUMP_STATEMENT	1571:1	1571:66	3	return ( TIFFWriteDirectoryTagCheckedFloat ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1571:1	1571:1	4	return
LEAF_NODE	1571:1	1571:1	5	return
DESTINATION	1571:7	1571:7	4	( TIFFWriteDirectoryTagCheckedFloat ( tif , ndir , dir , tag , value ) )
EXPR	1571:7	1571:65	5	( TIFFWriteDirectoryTagCheckedFloat ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1571:7	1571:7	6	(
FUNCTION_CALL	1571:8	1571:64	6	TIFFWriteDirectoryTagCheckedFloat ( tif , ndir , dir , tag , value )
CALLEE	1571:8	1571:8	7	TIFFWriteDirectoryTagCheckedFloat
LEAF_NODE	1571:8	1571:8	8	TIFFWriteDirectoryTagCheckedFloat
LEAF_NODE	1571:41	1571:41	7	(
ARGUMENT	1571:42	1571:42	7	tif
FIELD	1571:42	1571:42	8	tif
LEAF_NODE	1571:42	1571:42	9	tif
LEAF_NODE	1571:45	1571:45	7	,
ARGUMENT	1571:46	1571:46	7	ndir
FIELD	1571:46	1571:46	8	ndir
LEAF_NODE	1571:46	1571:46	9	ndir
LEAF_NODE	1571:50	1571:50	7	,
ARGUMENT	1571:51	1571:51	7	dir
FIELD	1571:51	1571:51	8	dir
LEAF_NODE	1571:51	1571:51	9	dir
LEAF_NODE	1571:54	1571:54	7	,
ARGUMENT	1571:55	1571:55	7	tag
FIELD	1571:55	1571:55	8	tag
LEAF_NODE	1571:55	1571:55	9	tag
LEAF_NODE	1571:58	1571:58	7	,
ARGUMENT	1571:59	1571:59	7	value
FIELD	1571:59	1571:59	8	value
LEAF_NODE	1571:59	1571:59	9	value
LEAF_NODE	1571:64	1571:64	7	)
LEAF_NODE	1571:65	1571:65	6	)
LEAF_NODE	1571:66	1571:66	4	;
LEAF_NODE	1572:0	1572:0	2	}
FUNCTION_DEF	1575:0	1583:0	1	
RETURN_TYPE	1575:0	1575:7	2	static int
LEAF_NODE	1575:0	1575:0	3	static
TYPE_NAME	1575:7	1575:7	3	int
LEAF_NODE	1575:7	1575:7	4	int
FUNCTION_NAME	1575:11	1575:11	2	TIFFWriteDirectoryTagFloatArray
LEAF_NODE	1575:11	1575:11	3	TIFFWriteDirectoryTagFloatArray
PARAMETER_LIST	1575:42	1575:125	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , float * value )
LEAF_NODE	1575:42	1575:42	3	(
PARAMETER_DECL	1575:43	1575:49	3	TIFF * tif
TYPE	1575:43	1575:47	4	TIFF *
TYPE_NAME	1575:43	1575:43	5	TIFF
LEAF_NODE	1575:43	1575:43	6	TIFF
POINTER	1575:47	1575:47	5	*
LEAF_NODE	1575:47	1575:47	6	*
NAME	1575:49	1575:49	4	tif
LEAF_NODE	1575:49	1575:49	5	tif
LEAF_NODE	1575:52	1575:52	3	,
PARAMETER_DECL	1575:54	1575:62	3	uint32 * ndir
TYPE	1575:54	1575:60	4	uint32 *
TYPE_NAME	1575:54	1575:54	5	uint32
LEAF_NODE	1575:54	1575:54	6	uint32
POINTER	1575:60	1575:60	5	*
LEAF_NODE	1575:60	1575:60	6	*
NAME	1575:62	1575:62	4	ndir
LEAF_NODE	1575:62	1575:62	5	ndir
LEAF_NODE	1575:66	1575:66	3	,
PARAMETER_DECL	1575:68	1575:82	3	TIFFDirEntry * dir
TYPE	1575:68	1575:80	4	TIFFDirEntry *
TYPE_NAME	1575:68	1575:68	5	TIFFDirEntry
LEAF_NODE	1575:68	1575:68	6	TIFFDirEntry
POINTER	1575:80	1575:80	5	*
LEAF_NODE	1575:80	1575:80	6	*
NAME	1575:82	1575:82	4	dir
LEAF_NODE	1575:82	1575:82	5	dir
LEAF_NODE	1575:85	1575:85	3	,
PARAMETER_DECL	1575:87	1575:94	3	uint16 tag
TYPE	1575:87	1575:87	4	uint16
TYPE_NAME	1575:87	1575:87	5	uint16
LEAF_NODE	1575:87	1575:87	6	uint16
NAME	1575:94	1575:94	4	tag
LEAF_NODE	1575:94	1575:94	5	tag
LEAF_NODE	1575:97	1575:97	3	,
PARAMETER_DECL	1575:99	1575:106	3	uint32 count
TYPE	1575:99	1575:99	4	uint32
TYPE_NAME	1575:99	1575:99	5	uint32
LEAF_NODE	1575:99	1575:99	6	uint32
NAME	1575:106	1575:106	4	count
LEAF_NODE	1575:106	1575:106	5	count
LEAF_NODE	1575:111	1575:111	3	,
PARAMETER_DECL	1575:113	1575:120	3	float * value
TYPE	1575:113	1575:118	4	float *
TYPE_NAME	1575:113	1575:113	5	float
LEAF_NODE	1575:113	1575:113	6	float
POINTER	1575:118	1575:118	5	*
LEAF_NODE	1575:118	1575:118	6	*
NAME	1575:120	1575:120	4	value
LEAF_NODE	1575:120	1575:120	5	value
LEAF_NODE	1575:125	1575:125	3	)
LEAF_NODE	1576:0	1576:0	2	{
STATEMENTS	1577:1	1582:1	2	
SELECTION	1577:1	1578:1	3	
KEYWORD	1577:1	1577:1	4	if
LEAF_NODE	1577:1	1577:1	5	if
LEAF_NODE	1577:4	1577:4	4	(
CONDITION	1577:5	1577:5	4	dir == NULL
EXPR	1577:5	1577:10	5	dir == NULL
FIELD	1577:5	1577:5	6	dir
LEAF_NODE	1577:5	1577:5	7	dir
EQ_OPERATOR	1577:8	1577:8	6	==
LEAF_NODE	1577:8	1577:8	7	==
FIELD	1577:10	1577:10	6	NULL
LEAF_NODE	1577:10	1577:10	7	NULL
LEAF_NODE	1577:14	1577:14	4	)
STATEMENTS	1578:1	1581:1	4	
LEAF_NODE	1578:1	1578:1	5	{
STATEMENTS	1579:2	1580:2	5	
EXPR_STATEMENT	1579:2	1579:11	6	( * ndir ) ++ ;
EXPR	1579:2	1579:9	7	( * ndir ) ++
LEAF_NODE	1579:2	1579:2	8	(
UNARY_EXPR	1579:3	1579:4	8	* ndir
UNARY_OPERATOR	1579:3	1579:3	9	*
LEAF_NODE	1579:3	1579:3	10	*
FIELD	1579:4	1579:4	9	ndir
LEAF_NODE	1579:4	1579:4	10	ndir
LEAF_NODE	1579:8	1579:8	8	)
LEAF_NODE	1579:9	1579:9	8	++
LEAF_NODE	1579:11	1579:11	7	;
JUMP_STATEMENT	1580:2	1580:11	6	return ( 1 ) ;
KEYWORD	1580:2	1580:2	7	return
LEAF_NODE	1580:2	1580:2	8	return
DESTINATION	1580:8	1580:8	7	( 1 )
EXPR	1580:8	1580:10	8	( 1 )
LEAF_NODE	1580:8	1580:8	9	(
FIELD	1580:9	1580:9	9	1
LEAF_NODE	1580:9	1580:9	10	1
LEAF_NODE	1580:10	1580:10	9	)
LEAF_NODE	1580:11	1580:11	7	;
LEAF_NODE	1581:1	1581:1	5	}
JUMP_STATEMENT	1582:1	1582:77	3	return ( TIFFWriteDirectoryTagCheckedFloatArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1582:1	1582:1	4	return
LEAF_NODE	1582:1	1582:1	5	return
DESTINATION	1582:7	1582:7	4	( TIFFWriteDirectoryTagCheckedFloatArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1582:7	1582:76	5	( TIFFWriteDirectoryTagCheckedFloatArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1582:7	1582:7	6	(
FUNCTION_CALL	1582:8	1582:75	6	TIFFWriteDirectoryTagCheckedFloatArray ( tif , ndir , dir , tag , count , value )
CALLEE	1582:8	1582:8	7	TIFFWriteDirectoryTagCheckedFloatArray
LEAF_NODE	1582:8	1582:8	8	TIFFWriteDirectoryTagCheckedFloatArray
LEAF_NODE	1582:46	1582:46	7	(
ARGUMENT	1582:47	1582:47	7	tif
FIELD	1582:47	1582:47	8	tif
LEAF_NODE	1582:47	1582:47	9	tif
LEAF_NODE	1582:50	1582:50	7	,
ARGUMENT	1582:51	1582:51	7	ndir
FIELD	1582:51	1582:51	8	ndir
LEAF_NODE	1582:51	1582:51	9	ndir
LEAF_NODE	1582:55	1582:55	7	,
ARGUMENT	1582:56	1582:56	7	dir
FIELD	1582:56	1582:56	8	dir
LEAF_NODE	1582:56	1582:56	9	dir
LEAF_NODE	1582:59	1582:59	7	,
ARGUMENT	1582:60	1582:60	7	tag
FIELD	1582:60	1582:60	8	tag
LEAF_NODE	1582:60	1582:60	9	tag
LEAF_NODE	1582:63	1582:63	7	,
ARGUMENT	1582:64	1582:64	7	count
FIELD	1582:64	1582:64	8	count
LEAF_NODE	1582:64	1582:64	9	count
LEAF_NODE	1582:69	1582:69	7	,
ARGUMENT	1582:70	1582:70	7	value
FIELD	1582:70	1582:70	8	value
LEAF_NODE	1582:70	1582:70	9	value
LEAF_NODE	1582:75	1582:75	7	)
LEAF_NODE	1582:76	1582:76	6	)
LEAF_NODE	1582:77	1582:77	4	;
LEAF_NODE	1583:0	1583:0	2	}
FUNCTION_DEF	1586:0	1609:0	1	
RETURN_TYPE	1586:0	1586:7	2	static int
LEAF_NODE	1586:0	1586:0	3	static
TYPE_NAME	1586:7	1586:7	3	int
LEAF_NODE	1586:7	1586:7	4	int
FUNCTION_NAME	1586:11	1586:11	2	TIFFWriteDirectoryTagFloatPerSample
LEAF_NODE	1586:11	1586:11	3	TIFFWriteDirectoryTagFloatPerSample
PARAMETER_LIST	1586:46	1586:114	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , float value )
LEAF_NODE	1586:46	1586:46	3	(
PARAMETER_DECL	1586:47	1586:53	3	TIFF * tif
TYPE	1586:47	1586:51	4	TIFF *
TYPE_NAME	1586:47	1586:47	5	TIFF
LEAF_NODE	1586:47	1586:47	6	TIFF
POINTER	1586:51	1586:51	5	*
LEAF_NODE	1586:51	1586:51	6	*
NAME	1586:53	1586:53	4	tif
LEAF_NODE	1586:53	1586:53	5	tif
LEAF_NODE	1586:56	1586:56	3	,
PARAMETER_DECL	1586:58	1586:66	3	uint32 * ndir
TYPE	1586:58	1586:64	4	uint32 *
TYPE_NAME	1586:58	1586:58	5	uint32
LEAF_NODE	1586:58	1586:58	6	uint32
POINTER	1586:64	1586:64	5	*
LEAF_NODE	1586:64	1586:64	6	*
NAME	1586:66	1586:66	4	ndir
LEAF_NODE	1586:66	1586:66	5	ndir
LEAF_NODE	1586:70	1586:70	3	,
PARAMETER_DECL	1586:72	1586:86	3	TIFFDirEntry * dir
TYPE	1586:72	1586:84	4	TIFFDirEntry *
TYPE_NAME	1586:72	1586:72	5	TIFFDirEntry
LEAF_NODE	1586:72	1586:72	6	TIFFDirEntry
POINTER	1586:84	1586:84	5	*
LEAF_NODE	1586:84	1586:84	6	*
NAME	1586:86	1586:86	4	dir
LEAF_NODE	1586:86	1586:86	5	dir
LEAF_NODE	1586:89	1586:89	3	,
PARAMETER_DECL	1586:91	1586:98	3	uint16 tag
TYPE	1586:91	1586:91	4	uint16
TYPE_NAME	1586:91	1586:91	5	uint16
LEAF_NODE	1586:91	1586:91	6	uint16
NAME	1586:98	1586:98	4	tag
LEAF_NODE	1586:98	1586:98	5	tag
LEAF_NODE	1586:101	1586:101	3	,
PARAMETER_DECL	1586:103	1586:109	3	float value
TYPE	1586:103	1586:103	4	float
TYPE_NAME	1586:103	1586:103	5	float
LEAF_NODE	1586:103	1586:103	6	float
NAME	1586:109	1586:109	4	value
LEAF_NODE	1586:109	1586:109	5	value
LEAF_NODE	1586:114	1586:114	3	)
LEAF_NODE	1587:0	1587:0	2	{
STATEMENTS	1588:1	1608:10	2	
LEAF_NODE	1588:1	1588:1	3	static
SIMPLE_DECL	1588:8	1588:67	3	const char [ ] module ; module = "TIFFWriteDirectoryTagFloatPerSample" ;
VAR_DECL	1588:8	1588:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagFloatPerSample"
TYPE	1588:8	1588:25	5	const char [ ]
TYPE_NAME	1588:8	1588:14	6	const char
LEAF_NODE	1588:8	1588:8	7	const
LEAF_NODE	1588:14	1588:14	7	char
TYPE_SUFFIX	1588:25	1588:26	6	[ ]
LEAF_NODE	1588:25	1588:25	7	[
LEAF_NODE	1588:26	1588:26	7	]
NAME	1588:19	1588:19	5	module
LEAF_NODE	1588:19	1588:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1588:19	1588:19	5	module = "TIFFWriteDirectoryTagFloatPerSample"
ASSIGN	1588:19	1588:30	6	module = "TIFFWriteDirectoryTagFloatPerSample"
LVAL	1588:19	1588:19	7	module
NAME	1588:19	1588:19	8	module
LEAF_NODE	1588:19	1588:19	9	module
ASSIGN_OP	1588:28	1588:28	7	=
LEAF_NODE	1588:28	1588:28	8	=
RVAL	1588:30	1588:30	7	"TIFFWriteDirectoryTagFloatPerSample"
FIELD	1588:30	1588:30	8	"TIFFWriteDirectoryTagFloatPerSample"
LEAF_NODE	1588:30	1588:30	9	"TIFFWriteDirectoryTagFloatPerSample"
LEAF_NODE	1588:67	1588:67	4	;
SIMPLE_DECL	1589:1	1589:9	3	float * m ;
VAR_DECL	1589:1	1589:8	4	float * m
TYPE	1589:1	1589:6	5	float *
TYPE_NAME	1589:1	1589:1	6	float
LEAF_NODE	1589:1	1589:1	7	float
POINTER	1589:6	1589:6	6	*
LEAF_NODE	1589:6	1589:6	7	*
NAME	1589:8	1589:8	5	m
LEAF_NODE	1589:8	1589:8	6	m
LEAF_NODE	1589:9	1589:9	4	;
SIMPLE_DECL	1590:1	1590:10	3	float * na ;
VAR_DECL	1590:1	1590:8	4	float * na
TYPE	1590:1	1590:6	5	float *
TYPE_NAME	1590:1	1590:1	6	float
LEAF_NODE	1590:1	1590:1	7	float
POINTER	1590:6	1590:6	6	*
LEAF_NODE	1590:6	1590:6	7	*
NAME	1590:8	1590:8	5	na
LEAF_NODE	1590:8	1590:8	6	na
LEAF_NODE	1590:10	1590:10	4	;
SIMPLE_DECL	1591:1	1591:10	3	uint16 nb ;
VAR_DECL	1591:1	1591:8	4	uint16 nb
TYPE	1591:1	1591:1	5	uint16
TYPE_NAME	1591:1	1591:1	6	uint16
LEAF_NODE	1591:1	1591:1	7	uint16
NAME	1591:8	1591:8	5	nb
LEAF_NODE	1591:8	1591:8	6	nb
LEAF_NODE	1591:10	1591:10	4	;
SIMPLE_DECL	1592:1	1592:6	3	int o ;
VAR_DECL	1592:1	1592:5	4	int o
TYPE	1592:1	1592:1	5	int
TYPE_NAME	1592:1	1592:1	6	int
LEAF_NODE	1592:1	1592:1	7	int
NAME	1592:5	1592:5	5	o
LEAF_NODE	1592:5	1592:5	6	o
LEAF_NODE	1592:6	1592:6	4	;
SELECTION	1593:1	1594:1	3	
KEYWORD	1593:1	1593:1	4	if
LEAF_NODE	1593:1	1593:1	5	if
LEAF_NODE	1593:4	1593:4	4	(
CONDITION	1593:5	1593:5	4	dir == NULL
EXPR	1593:5	1593:10	5	dir == NULL
FIELD	1593:5	1593:5	6	dir
LEAF_NODE	1593:5	1593:5	7	dir
EQ_OPERATOR	1593:8	1593:8	6	==
LEAF_NODE	1593:8	1593:8	7	==
FIELD	1593:10	1593:10	6	NULL
LEAF_NODE	1593:10	1593:10	7	NULL
LEAF_NODE	1593:14	1593:14	4	)
STATEMENTS	1594:1	1597:1	4	
LEAF_NODE	1594:1	1594:1	5	{
STATEMENTS	1595:2	1596:2	5	
EXPR_STATEMENT	1595:2	1595:11	6	( * ndir ) ++ ;
EXPR	1595:2	1595:9	7	( * ndir ) ++
LEAF_NODE	1595:2	1595:2	8	(
UNARY_EXPR	1595:3	1595:4	8	* ndir
UNARY_OPERATOR	1595:3	1595:3	9	*
LEAF_NODE	1595:3	1595:3	10	*
FIELD	1595:4	1595:4	9	ndir
LEAF_NODE	1595:4	1595:4	10	ndir
LEAF_NODE	1595:8	1595:8	8	)
LEAF_NODE	1595:9	1595:9	8	++
LEAF_NODE	1595:11	1595:11	7	;
JUMP_STATEMENT	1596:2	1596:11	6	return ( 1 ) ;
KEYWORD	1596:2	1596:2	7	return
LEAF_NODE	1596:2	1596:2	8	return
DESTINATION	1596:8	1596:8	7	( 1 )
EXPR	1596:8	1596:10	8	( 1 )
LEAF_NODE	1596:8	1596:8	9	(
FIELD	1596:9	1596:9	9	1
LEAF_NODE	1596:9	1596:9	10	1
LEAF_NODE	1596:10	1596:10	9	)
LEAF_NODE	1596:11	1596:11	7	;
LEAF_NODE	1597:1	1597:1	5	}
EXPR_STATEMENT	1598:1	1598:61	3	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( float ) ) ;
EXPR	1598:1	1598:1	4	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( float ) )
ASSIGN	1598:1	1598:3	5	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( float ) )
LVAL	1598:1	1598:1	6	m
FIELD	1598:1	1598:1	7	m
LEAF_NODE	1598:1	1598:1	8	m
ASSIGN_OP	1598:2	1598:2	6	=
LEAF_NODE	1598:2	1598:2	7	=
RVAL	1598:3	1598:3	6	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( float ) )
FUNCTION_CALL	1598:3	1598:60	7	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( float ) )
CALLEE	1598:3	1598:3	8	_TIFFmalloc
LEAF_NODE	1598:3	1598:3	9	_TIFFmalloc
LEAF_NODE	1598:14	1598:14	8	(
ARGUMENT	1598:15	1598:47	8	tif -> tif_dir . td_samplesperpixel * sizeof ( float )
FIELD	1598:15	1598:28	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1598:15	1598:15	10	tif
LEAF_NODE	1598:18	1598:18	10	->
LEAF_NODE	1598:20	1598:20	10	tif_dir
LEAF_NODE	1598:27	1598:27	10	.
LEAF_NODE	1598:28	1598:28	10	td_samplesperpixel
LEAF_NODE	1598:46	1598:46	9	*
FUNCTION_CALL	1598:47	1598:59	9	sizeof ( float )
CALLEE	1598:47	1598:47	10	sizeof
LEAF_NODE	1598:47	1598:47	11	sizeof
LEAF_NODE	1598:53	1598:53	10	(
ARGUMENT	1598:54	1598:54	10	float
FIELD	1598:54	1598:54	11	float
LEAF_NODE	1598:54	1598:54	12	float
LEAF_NODE	1598:59	1598:59	10	)
LEAF_NODE	1598:60	1598:60	8	)
LEAF_NODE	1598:61	1598:61	4	;
SELECTION	1599:1	1600:1	3	
KEYWORD	1599:1	1599:1	4	if
LEAF_NODE	1599:1	1599:1	5	if
LEAF_NODE	1599:4	1599:4	4	(
CONDITION	1599:5	1599:5	4	m == NULL
EXPR	1599:5	1599:8	5	m == NULL
FIELD	1599:5	1599:5	6	m
LEAF_NODE	1599:5	1599:5	7	m
EQ_OPERATOR	1599:6	1599:6	6	==
LEAF_NODE	1599:6	1599:6	7	==
FIELD	1599:8	1599:8	6	NULL
LEAF_NODE	1599:8	1599:8	7	NULL
LEAF_NODE	1599:12	1599:12	4	)
STATEMENTS	1600:1	1603:1	4	
LEAF_NODE	1600:1	1600:1	5	{
STATEMENTS	1601:2	1602:2	5	
EXPR_STATEMENT	1601:2	1601:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1601:2	1601:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1601:2	1601:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1601:2	1601:2	9	TIFFErrorExt
LEAF_NODE	1601:2	1601:2	10	TIFFErrorExt
LEAF_NODE	1601:14	1601:14	9	(
ARGUMENT	1601:15	1601:15	9	tif -> tif_clientdata
FIELD	1601:15	1601:20	10	tif -> tif_clientdata
LEAF_NODE	1601:15	1601:15	11	tif
LEAF_NODE	1601:18	1601:18	11	->
LEAF_NODE	1601:20	1601:20	11	tif_clientdata
LEAF_NODE	1601:34	1601:34	9	,
ARGUMENT	1601:35	1601:35	9	module
FIELD	1601:35	1601:35	10	module
LEAF_NODE	1601:35	1601:35	11	module
LEAF_NODE	1601:41	1601:41	9	,
ARGUMENT	1601:42	1601:42	9	"Out of memory"
FIELD	1601:42	1601:42	10	"Out of memory"
LEAF_NODE	1601:42	1601:42	11	"Out of memory"
LEAF_NODE	1601:57	1601:57	9	)
LEAF_NODE	1601:58	1601:58	7	;
JUMP_STATEMENT	1602:2	1602:11	6	return ( 0 ) ;
KEYWORD	1602:2	1602:2	7	return
LEAF_NODE	1602:2	1602:2	8	return
DESTINATION	1602:8	1602:8	7	( 0 )
EXPR	1602:8	1602:10	8	( 0 )
LEAF_NODE	1602:8	1602:8	9	(
FIELD	1602:9	1602:9	9	0
LEAF_NODE	1602:9	1602:9	10	0
LEAF_NODE	1602:10	1602:10	9	)
LEAF_NODE	1602:11	1602:11	7	;
LEAF_NODE	1603:1	1603:1	5	}
ITERATION	1604:1	1605:2	3	
KEYWORD	1604:1	1604:1	4	for
LEAF_NODE	1604:1	1604:1	5	for
LEAF_NODE	1604:5	1604:5	4	(
FOR_INIT	1604:6	1604:16	4	na = m , nb = 0 ;
EXPR	1604:6	1604:12	5	na = m , nb = 0
ASSIGN	1604:6	1604:9	6	na = m
LVAL	1604:6	1604:6	7	na
FIELD	1604:6	1604:6	8	na
LEAF_NODE	1604:6	1604:6	9	na
ASSIGN_OP	1604:8	1604:8	7	=
LEAF_NODE	1604:8	1604:8	8	=
RVAL	1604:9	1604:9	7	m
FIELD	1604:9	1604:9	8	m
LEAF_NODE	1604:9	1604:9	9	m
LEAF_NODE	1604:10	1604:10	6	,
ASSIGN	1604:12	1604:15	6	nb = 0
LVAL	1604:12	1604:12	7	nb
FIELD	1604:12	1604:12	8	nb
LEAF_NODE	1604:12	1604:12	9	nb
ASSIGN_OP	1604:14	1604:14	7	=
LEAF_NODE	1604:14	1604:14	8	=
RVAL	1604:15	1604:15	7	0
FIELD	1604:15	1604:15	8	0
LEAF_NODE	1604:15	1604:15	9	0
LEAF_NODE	1604:16	1604:16	5	;
CONDITION	1604:18	1604:18	4	nb < tif -> tif_dir . td_samplesperpixel
EXPR	1604:18	1604:21	5	nb < tif -> tif_dir . td_samplesperpixel
FIELD	1604:18	1604:18	6	nb
LEAF_NODE	1604:18	1604:18	7	nb
REL_OPERATOR	1604:20	1604:20	6	<
LEAF_NODE	1604:20	1604:20	7	<
FIELD	1604:21	1604:34	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1604:21	1604:21	7	tif
LEAF_NODE	1604:24	1604:24	7	->
LEAF_NODE	1604:26	1604:26	7	tif_dir
LEAF_NODE	1604:33	1604:33	7	.
LEAF_NODE	1604:34	1604:34	7	td_samplesperpixel
LEAF_NODE	1604:52	1604:52	4	;
FOR_EXPR	1604:54	1604:54	4	na ++ , nb ++
EXPR	1604:54	1604:60	5	na ++ , nb ++
FIELD	1604:54	1604:56	6	na ++
LEAF_NODE	1604:54	1604:54	7	na
LEAF_NODE	1604:56	1604:56	7	++
LEAF_NODE	1604:58	1604:58	6	,
FIELD	1604:60	1604:62	6	nb ++
LEAF_NODE	1604:60	1604:60	7	nb
LEAF_NODE	1604:62	1604:62	7	++
LEAF_NODE	1604:64	1604:64	4	)
STATEMENTS	1605:2	1605:2	4	
EXPR_STATEMENT	1605:2	1605:11	5	* na = value ;
EXPR	1605:2	1605:2	6	* na = value
ASSIGN	1605:2	1605:6	7	* na = value
LVAL	1605:2	1605:2	8	* na
UNARY_EXPR	1605:2	1605:3	9	* na
UNARY_OPERATOR	1605:2	1605:2	10	*
LEAF_NODE	1605:2	1605:2	11	*
FIELD	1605:3	1605:3	10	na
LEAF_NODE	1605:3	1605:3	11	na
ASSIGN_OP	1605:5	1605:5	8	=
LEAF_NODE	1605:5	1605:5	9	=
RVAL	1605:6	1605:6	8	value
FIELD	1605:6	1605:6	9	value
LEAF_NODE	1605:6	1605:6	10	value
LEAF_NODE	1605:11	1605:11	6	;
EXPR_STATEMENT	1606:1	1606:93	3	o = TIFFWriteDirectoryTagCheckedFloatArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m ) ;
EXPR	1606:1	1606:1	4	o = TIFFWriteDirectoryTagCheckedFloatArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
ASSIGN	1606:1	1606:3	5	o = TIFFWriteDirectoryTagCheckedFloatArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
LVAL	1606:1	1606:1	6	o
FIELD	1606:1	1606:1	7	o
LEAF_NODE	1606:1	1606:1	8	o
ASSIGN_OP	1606:2	1606:2	6	=
LEAF_NODE	1606:2	1606:2	7	=
RVAL	1606:3	1606:3	6	TIFFWriteDirectoryTagCheckedFloatArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
FUNCTION_CALL	1606:3	1606:92	7	TIFFWriteDirectoryTagCheckedFloatArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
CALLEE	1606:3	1606:3	8	TIFFWriteDirectoryTagCheckedFloatArray
LEAF_NODE	1606:3	1606:3	9	TIFFWriteDirectoryTagCheckedFloatArray
LEAF_NODE	1606:41	1606:41	8	(
ARGUMENT	1606:42	1606:42	8	tif
FIELD	1606:42	1606:42	9	tif
LEAF_NODE	1606:42	1606:42	10	tif
LEAF_NODE	1606:45	1606:45	8	,
ARGUMENT	1606:46	1606:46	8	ndir
FIELD	1606:46	1606:46	9	ndir
LEAF_NODE	1606:46	1606:46	10	ndir
LEAF_NODE	1606:50	1606:50	8	,
ARGUMENT	1606:51	1606:51	8	dir
FIELD	1606:51	1606:51	9	dir
LEAF_NODE	1606:51	1606:51	10	dir
LEAF_NODE	1606:54	1606:54	8	,
ARGUMENT	1606:55	1606:55	8	tag
FIELD	1606:55	1606:55	9	tag
LEAF_NODE	1606:55	1606:55	10	tag
LEAF_NODE	1606:58	1606:58	8	,
ARGUMENT	1606:59	1606:59	8	tif -> tif_dir . td_samplesperpixel
FIELD	1606:59	1606:72	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1606:59	1606:59	10	tif
LEAF_NODE	1606:62	1606:62	10	->
LEAF_NODE	1606:64	1606:64	10	tif_dir
LEAF_NODE	1606:71	1606:71	10	.
LEAF_NODE	1606:72	1606:72	10	td_samplesperpixel
LEAF_NODE	1606:90	1606:90	8	,
ARGUMENT	1606:91	1606:91	8	m
FIELD	1606:91	1606:91	9	m
LEAF_NODE	1606:91	1606:91	10	m
LEAF_NODE	1606:92	1606:92	8	)
LEAF_NODE	1606:93	1606:93	4	;
EXPR_STATEMENT	1607:1	1607:13	3	_TIFFfree ( m ) ;
EXPR	1607:1	1607:1	4	_TIFFfree ( m )
FUNCTION_CALL	1607:1	1607:12	5	_TIFFfree ( m )
CALLEE	1607:1	1607:1	6	_TIFFfree
LEAF_NODE	1607:1	1607:1	7	_TIFFfree
LEAF_NODE	1607:10	1607:10	6	(
ARGUMENT	1607:11	1607:11	6	m
FIELD	1607:11	1607:11	7	m
LEAF_NODE	1607:11	1607:11	8	m
LEAF_NODE	1607:12	1607:12	6	)
LEAF_NODE	1607:13	1607:13	4	;
LEAF_NODE	1608:1	1608:1	3	return
LEAF_NODE	1608:7	1608:7	3	(
LEAF_NODE	1608:8	1608:8	3	o
LEAF_NODE	1608:9	1608:9	3	)
LEAF_NODE	1608:10	1608:10	3	;
LEAF_NODE	1609:0	1609:0	2	}
FUNCTION_DEF	1613:0	1621:0	1	
RETURN_TYPE	1613:0	1613:7	2	static int
LEAF_NODE	1613:0	1613:0	3	static
TYPE_NAME	1613:7	1613:7	3	int
LEAF_NODE	1613:7	1613:7	4	int
FUNCTION_NAME	1613:11	1613:11	2	TIFFWriteDirectoryTagDouble
LEAF_NODE	1613:11	1613:11	3	TIFFWriteDirectoryTagDouble
PARAMETER_LIST	1613:38	1613:107	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , double value )
LEAF_NODE	1613:38	1613:38	3	(
PARAMETER_DECL	1613:39	1613:45	3	TIFF * tif
TYPE	1613:39	1613:43	4	TIFF *
TYPE_NAME	1613:39	1613:39	5	TIFF
LEAF_NODE	1613:39	1613:39	6	TIFF
POINTER	1613:43	1613:43	5	*
LEAF_NODE	1613:43	1613:43	6	*
NAME	1613:45	1613:45	4	tif
LEAF_NODE	1613:45	1613:45	5	tif
LEAF_NODE	1613:48	1613:48	3	,
PARAMETER_DECL	1613:50	1613:58	3	uint32 * ndir
TYPE	1613:50	1613:56	4	uint32 *
TYPE_NAME	1613:50	1613:50	5	uint32
LEAF_NODE	1613:50	1613:50	6	uint32
POINTER	1613:56	1613:56	5	*
LEAF_NODE	1613:56	1613:56	6	*
NAME	1613:58	1613:58	4	ndir
LEAF_NODE	1613:58	1613:58	5	ndir
LEAF_NODE	1613:62	1613:62	3	,
PARAMETER_DECL	1613:64	1613:78	3	TIFFDirEntry * dir
TYPE	1613:64	1613:76	4	TIFFDirEntry *
TYPE_NAME	1613:64	1613:64	5	TIFFDirEntry
LEAF_NODE	1613:64	1613:64	6	TIFFDirEntry
POINTER	1613:76	1613:76	5	*
LEAF_NODE	1613:76	1613:76	6	*
NAME	1613:78	1613:78	4	dir
LEAF_NODE	1613:78	1613:78	5	dir
LEAF_NODE	1613:81	1613:81	3	,
PARAMETER_DECL	1613:83	1613:90	3	uint16 tag
TYPE	1613:83	1613:83	4	uint16
TYPE_NAME	1613:83	1613:83	5	uint16
LEAF_NODE	1613:83	1613:83	6	uint16
NAME	1613:90	1613:90	4	tag
LEAF_NODE	1613:90	1613:90	5	tag
LEAF_NODE	1613:93	1613:93	3	,
PARAMETER_DECL	1613:95	1613:102	3	double value
TYPE	1613:95	1613:95	4	double
TYPE_NAME	1613:95	1613:95	5	double
LEAF_NODE	1613:95	1613:95	6	double
NAME	1613:102	1613:102	4	value
LEAF_NODE	1613:102	1613:102	5	value
LEAF_NODE	1613:107	1613:107	3	)
LEAF_NODE	1614:0	1614:0	2	{
STATEMENTS	1615:1	1620:1	2	
SELECTION	1615:1	1616:1	3	
KEYWORD	1615:1	1615:1	4	if
LEAF_NODE	1615:1	1615:1	5	if
LEAF_NODE	1615:4	1615:4	4	(
CONDITION	1615:5	1615:5	4	dir == NULL
EXPR	1615:5	1615:10	5	dir == NULL
FIELD	1615:5	1615:5	6	dir
LEAF_NODE	1615:5	1615:5	7	dir
EQ_OPERATOR	1615:8	1615:8	6	==
LEAF_NODE	1615:8	1615:8	7	==
FIELD	1615:10	1615:10	6	NULL
LEAF_NODE	1615:10	1615:10	7	NULL
LEAF_NODE	1615:14	1615:14	4	)
STATEMENTS	1616:1	1619:1	4	
LEAF_NODE	1616:1	1616:1	5	{
STATEMENTS	1617:2	1618:2	5	
EXPR_STATEMENT	1617:2	1617:11	6	( * ndir ) ++ ;
EXPR	1617:2	1617:9	7	( * ndir ) ++
LEAF_NODE	1617:2	1617:2	8	(
UNARY_EXPR	1617:3	1617:4	8	* ndir
UNARY_OPERATOR	1617:3	1617:3	9	*
LEAF_NODE	1617:3	1617:3	10	*
FIELD	1617:4	1617:4	9	ndir
LEAF_NODE	1617:4	1617:4	10	ndir
LEAF_NODE	1617:8	1617:8	8	)
LEAF_NODE	1617:9	1617:9	8	++
LEAF_NODE	1617:11	1617:11	7	;
JUMP_STATEMENT	1618:2	1618:11	6	return ( 1 ) ;
KEYWORD	1618:2	1618:2	7	return
LEAF_NODE	1618:2	1618:2	8	return
DESTINATION	1618:8	1618:8	7	( 1 )
EXPR	1618:8	1618:10	8	( 1 )
LEAF_NODE	1618:8	1618:8	9	(
FIELD	1618:9	1618:9	9	1
LEAF_NODE	1618:9	1618:9	10	1
LEAF_NODE	1618:10	1618:10	9	)
LEAF_NODE	1618:11	1618:11	7	;
LEAF_NODE	1619:1	1619:1	5	}
JUMP_STATEMENT	1620:1	1620:67	3	return ( TIFFWriteDirectoryTagCheckedDouble ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1620:1	1620:1	4	return
LEAF_NODE	1620:1	1620:1	5	return
DESTINATION	1620:7	1620:7	4	( TIFFWriteDirectoryTagCheckedDouble ( tif , ndir , dir , tag , value ) )
EXPR	1620:7	1620:66	5	( TIFFWriteDirectoryTagCheckedDouble ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1620:7	1620:7	6	(
FUNCTION_CALL	1620:8	1620:65	6	TIFFWriteDirectoryTagCheckedDouble ( tif , ndir , dir , tag , value )
CALLEE	1620:8	1620:8	7	TIFFWriteDirectoryTagCheckedDouble
LEAF_NODE	1620:8	1620:8	8	TIFFWriteDirectoryTagCheckedDouble
LEAF_NODE	1620:42	1620:42	7	(
ARGUMENT	1620:43	1620:43	7	tif
FIELD	1620:43	1620:43	8	tif
LEAF_NODE	1620:43	1620:43	9	tif
LEAF_NODE	1620:46	1620:46	7	,
ARGUMENT	1620:47	1620:47	7	ndir
FIELD	1620:47	1620:47	8	ndir
LEAF_NODE	1620:47	1620:47	9	ndir
LEAF_NODE	1620:51	1620:51	7	,
ARGUMENT	1620:52	1620:52	7	dir
FIELD	1620:52	1620:52	8	dir
LEAF_NODE	1620:52	1620:52	9	dir
LEAF_NODE	1620:55	1620:55	7	,
ARGUMENT	1620:56	1620:56	7	tag
FIELD	1620:56	1620:56	8	tag
LEAF_NODE	1620:56	1620:56	9	tag
LEAF_NODE	1620:59	1620:59	7	,
ARGUMENT	1620:60	1620:60	7	value
FIELD	1620:60	1620:60	8	value
LEAF_NODE	1620:60	1620:60	9	value
LEAF_NODE	1620:65	1620:65	7	)
LEAF_NODE	1620:66	1620:66	6	)
LEAF_NODE	1620:67	1620:67	4	;
LEAF_NODE	1621:0	1621:0	2	}
FUNCTION_DEF	1624:0	1632:0	1	
RETURN_TYPE	1624:0	1624:7	2	static int
LEAF_NODE	1624:0	1624:0	3	static
TYPE_NAME	1624:7	1624:7	3	int
LEAF_NODE	1624:7	1624:7	4	int
FUNCTION_NAME	1624:11	1624:11	2	TIFFWriteDirectoryTagDoubleArray
LEAF_NODE	1624:11	1624:11	3	TIFFWriteDirectoryTagDoubleArray
PARAMETER_LIST	1624:43	1624:127	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , double * value )
LEAF_NODE	1624:43	1624:43	3	(
PARAMETER_DECL	1624:44	1624:50	3	TIFF * tif
TYPE	1624:44	1624:48	4	TIFF *
TYPE_NAME	1624:44	1624:44	5	TIFF
LEAF_NODE	1624:44	1624:44	6	TIFF
POINTER	1624:48	1624:48	5	*
LEAF_NODE	1624:48	1624:48	6	*
NAME	1624:50	1624:50	4	tif
LEAF_NODE	1624:50	1624:50	5	tif
LEAF_NODE	1624:53	1624:53	3	,
PARAMETER_DECL	1624:55	1624:63	3	uint32 * ndir
TYPE	1624:55	1624:61	4	uint32 *
TYPE_NAME	1624:55	1624:55	5	uint32
LEAF_NODE	1624:55	1624:55	6	uint32
POINTER	1624:61	1624:61	5	*
LEAF_NODE	1624:61	1624:61	6	*
NAME	1624:63	1624:63	4	ndir
LEAF_NODE	1624:63	1624:63	5	ndir
LEAF_NODE	1624:67	1624:67	3	,
PARAMETER_DECL	1624:69	1624:83	3	TIFFDirEntry * dir
TYPE	1624:69	1624:81	4	TIFFDirEntry *
TYPE_NAME	1624:69	1624:69	5	TIFFDirEntry
LEAF_NODE	1624:69	1624:69	6	TIFFDirEntry
POINTER	1624:81	1624:81	5	*
LEAF_NODE	1624:81	1624:81	6	*
NAME	1624:83	1624:83	4	dir
LEAF_NODE	1624:83	1624:83	5	dir
LEAF_NODE	1624:86	1624:86	3	,
PARAMETER_DECL	1624:88	1624:95	3	uint16 tag
TYPE	1624:88	1624:88	4	uint16
TYPE_NAME	1624:88	1624:88	5	uint16
LEAF_NODE	1624:88	1624:88	6	uint16
NAME	1624:95	1624:95	4	tag
LEAF_NODE	1624:95	1624:95	5	tag
LEAF_NODE	1624:98	1624:98	3	,
PARAMETER_DECL	1624:100	1624:107	3	uint32 count
TYPE	1624:100	1624:100	4	uint32
TYPE_NAME	1624:100	1624:100	5	uint32
LEAF_NODE	1624:100	1624:100	6	uint32
NAME	1624:107	1624:107	4	count
LEAF_NODE	1624:107	1624:107	5	count
LEAF_NODE	1624:112	1624:112	3	,
PARAMETER_DECL	1624:114	1624:122	3	double * value
TYPE	1624:114	1624:120	4	double *
TYPE_NAME	1624:114	1624:114	5	double
LEAF_NODE	1624:114	1624:114	6	double
POINTER	1624:120	1624:120	5	*
LEAF_NODE	1624:120	1624:120	6	*
NAME	1624:122	1624:122	4	value
LEAF_NODE	1624:122	1624:122	5	value
LEAF_NODE	1624:127	1624:127	3	)
LEAF_NODE	1625:0	1625:0	2	{
STATEMENTS	1626:1	1631:1	2	
SELECTION	1626:1	1627:1	3	
KEYWORD	1626:1	1626:1	4	if
LEAF_NODE	1626:1	1626:1	5	if
LEAF_NODE	1626:4	1626:4	4	(
CONDITION	1626:5	1626:5	4	dir == NULL
EXPR	1626:5	1626:10	5	dir == NULL
FIELD	1626:5	1626:5	6	dir
LEAF_NODE	1626:5	1626:5	7	dir
EQ_OPERATOR	1626:8	1626:8	6	==
LEAF_NODE	1626:8	1626:8	7	==
FIELD	1626:10	1626:10	6	NULL
LEAF_NODE	1626:10	1626:10	7	NULL
LEAF_NODE	1626:14	1626:14	4	)
STATEMENTS	1627:1	1630:1	4	
LEAF_NODE	1627:1	1627:1	5	{
STATEMENTS	1628:2	1629:2	5	
EXPR_STATEMENT	1628:2	1628:11	6	( * ndir ) ++ ;
EXPR	1628:2	1628:9	7	( * ndir ) ++
LEAF_NODE	1628:2	1628:2	8	(
UNARY_EXPR	1628:3	1628:4	8	* ndir
UNARY_OPERATOR	1628:3	1628:3	9	*
LEAF_NODE	1628:3	1628:3	10	*
FIELD	1628:4	1628:4	9	ndir
LEAF_NODE	1628:4	1628:4	10	ndir
LEAF_NODE	1628:8	1628:8	8	)
LEAF_NODE	1628:9	1628:9	8	++
LEAF_NODE	1628:11	1628:11	7	;
JUMP_STATEMENT	1629:2	1629:11	6	return ( 1 ) ;
KEYWORD	1629:2	1629:2	7	return
LEAF_NODE	1629:2	1629:2	8	return
DESTINATION	1629:8	1629:8	7	( 1 )
EXPR	1629:8	1629:10	8	( 1 )
LEAF_NODE	1629:8	1629:8	9	(
FIELD	1629:9	1629:9	9	1
LEAF_NODE	1629:9	1629:9	10	1
LEAF_NODE	1629:10	1629:10	9	)
LEAF_NODE	1629:11	1629:11	7	;
LEAF_NODE	1630:1	1630:1	5	}
JUMP_STATEMENT	1631:1	1631:78	3	return ( TIFFWriteDirectoryTagCheckedDoubleArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1631:1	1631:1	4	return
LEAF_NODE	1631:1	1631:1	5	return
DESTINATION	1631:7	1631:7	4	( TIFFWriteDirectoryTagCheckedDoubleArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1631:7	1631:77	5	( TIFFWriteDirectoryTagCheckedDoubleArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1631:7	1631:7	6	(
FUNCTION_CALL	1631:8	1631:76	6	TIFFWriteDirectoryTagCheckedDoubleArray ( tif , ndir , dir , tag , count , value )
CALLEE	1631:8	1631:8	7	TIFFWriteDirectoryTagCheckedDoubleArray
LEAF_NODE	1631:8	1631:8	8	TIFFWriteDirectoryTagCheckedDoubleArray
LEAF_NODE	1631:47	1631:47	7	(
ARGUMENT	1631:48	1631:48	7	tif
FIELD	1631:48	1631:48	8	tif
LEAF_NODE	1631:48	1631:48	9	tif
LEAF_NODE	1631:51	1631:51	7	,
ARGUMENT	1631:52	1631:52	7	ndir
FIELD	1631:52	1631:52	8	ndir
LEAF_NODE	1631:52	1631:52	9	ndir
LEAF_NODE	1631:56	1631:56	7	,
ARGUMENT	1631:57	1631:57	7	dir
FIELD	1631:57	1631:57	8	dir
LEAF_NODE	1631:57	1631:57	9	dir
LEAF_NODE	1631:60	1631:60	7	,
ARGUMENT	1631:61	1631:61	7	tag
FIELD	1631:61	1631:61	8	tag
LEAF_NODE	1631:61	1631:61	9	tag
LEAF_NODE	1631:64	1631:64	7	,
ARGUMENT	1631:65	1631:65	7	count
FIELD	1631:65	1631:65	8	count
LEAF_NODE	1631:65	1631:65	9	count
LEAF_NODE	1631:70	1631:70	7	,
ARGUMENT	1631:71	1631:71	7	value
FIELD	1631:71	1631:71	8	value
LEAF_NODE	1631:71	1631:71	9	value
LEAF_NODE	1631:76	1631:76	7	)
LEAF_NODE	1631:77	1631:77	6	)
LEAF_NODE	1631:78	1631:78	4	;
LEAF_NODE	1632:0	1632:0	2	}
FUNCTION_DEF	1635:0	1658:0	1	
RETURN_TYPE	1635:0	1635:7	2	static int
LEAF_NODE	1635:0	1635:0	3	static
TYPE_NAME	1635:7	1635:7	3	int
LEAF_NODE	1635:7	1635:7	4	int
FUNCTION_NAME	1635:11	1635:11	2	TIFFWriteDirectoryTagDoublePerSample
LEAF_NODE	1635:11	1635:11	3	TIFFWriteDirectoryTagDoublePerSample
PARAMETER_LIST	1635:47	1635:116	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , double value )
LEAF_NODE	1635:47	1635:47	3	(
PARAMETER_DECL	1635:48	1635:54	3	TIFF * tif
TYPE	1635:48	1635:52	4	TIFF *
TYPE_NAME	1635:48	1635:48	5	TIFF
LEAF_NODE	1635:48	1635:48	6	TIFF
POINTER	1635:52	1635:52	5	*
LEAF_NODE	1635:52	1635:52	6	*
NAME	1635:54	1635:54	4	tif
LEAF_NODE	1635:54	1635:54	5	tif
LEAF_NODE	1635:57	1635:57	3	,
PARAMETER_DECL	1635:59	1635:67	3	uint32 * ndir
TYPE	1635:59	1635:65	4	uint32 *
TYPE_NAME	1635:59	1635:59	5	uint32
LEAF_NODE	1635:59	1635:59	6	uint32
POINTER	1635:65	1635:65	5	*
LEAF_NODE	1635:65	1635:65	6	*
NAME	1635:67	1635:67	4	ndir
LEAF_NODE	1635:67	1635:67	5	ndir
LEAF_NODE	1635:71	1635:71	3	,
PARAMETER_DECL	1635:73	1635:87	3	TIFFDirEntry * dir
TYPE	1635:73	1635:85	4	TIFFDirEntry *
TYPE_NAME	1635:73	1635:73	5	TIFFDirEntry
LEAF_NODE	1635:73	1635:73	6	TIFFDirEntry
POINTER	1635:85	1635:85	5	*
LEAF_NODE	1635:85	1635:85	6	*
NAME	1635:87	1635:87	4	dir
LEAF_NODE	1635:87	1635:87	5	dir
LEAF_NODE	1635:90	1635:90	3	,
PARAMETER_DECL	1635:92	1635:99	3	uint16 tag
TYPE	1635:92	1635:92	4	uint16
TYPE_NAME	1635:92	1635:92	5	uint16
LEAF_NODE	1635:92	1635:92	6	uint16
NAME	1635:99	1635:99	4	tag
LEAF_NODE	1635:99	1635:99	5	tag
LEAF_NODE	1635:102	1635:102	3	,
PARAMETER_DECL	1635:104	1635:111	3	double value
TYPE	1635:104	1635:104	4	double
TYPE_NAME	1635:104	1635:104	5	double
LEAF_NODE	1635:104	1635:104	6	double
NAME	1635:111	1635:111	4	value
LEAF_NODE	1635:111	1635:111	5	value
LEAF_NODE	1635:116	1635:116	3	)
LEAF_NODE	1636:0	1636:0	2	{
STATEMENTS	1637:1	1657:10	2	
LEAF_NODE	1637:1	1637:1	3	static
SIMPLE_DECL	1637:8	1637:68	3	const char [ ] module ; module = "TIFFWriteDirectoryTagDoublePerSample" ;
VAR_DECL	1637:8	1637:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagDoublePerSample"
TYPE	1637:8	1637:25	5	const char [ ]
TYPE_NAME	1637:8	1637:14	6	const char
LEAF_NODE	1637:8	1637:8	7	const
LEAF_NODE	1637:14	1637:14	7	char
TYPE_SUFFIX	1637:25	1637:26	6	[ ]
LEAF_NODE	1637:25	1637:25	7	[
LEAF_NODE	1637:26	1637:26	7	]
NAME	1637:19	1637:19	5	module
LEAF_NODE	1637:19	1637:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1637:19	1637:19	5	module = "TIFFWriteDirectoryTagDoublePerSample"
ASSIGN	1637:19	1637:30	6	module = "TIFFWriteDirectoryTagDoublePerSample"
LVAL	1637:19	1637:19	7	module
NAME	1637:19	1637:19	8	module
LEAF_NODE	1637:19	1637:19	9	module
ASSIGN_OP	1637:28	1637:28	7	=
LEAF_NODE	1637:28	1637:28	8	=
RVAL	1637:30	1637:30	7	"TIFFWriteDirectoryTagDoublePerSample"
FIELD	1637:30	1637:30	8	"TIFFWriteDirectoryTagDoublePerSample"
LEAF_NODE	1637:30	1637:30	9	"TIFFWriteDirectoryTagDoublePerSample"
LEAF_NODE	1637:68	1637:68	4	;
SIMPLE_DECL	1638:1	1638:10	3	double * m ;
VAR_DECL	1638:1	1638:9	4	double * m
TYPE	1638:1	1638:7	5	double *
TYPE_NAME	1638:1	1638:1	6	double
LEAF_NODE	1638:1	1638:1	7	double
POINTER	1638:7	1638:7	6	*
LEAF_NODE	1638:7	1638:7	7	*
NAME	1638:9	1638:9	5	m
LEAF_NODE	1638:9	1638:9	6	m
LEAF_NODE	1638:10	1638:10	4	;
SIMPLE_DECL	1639:1	1639:11	3	double * na ;
VAR_DECL	1639:1	1639:9	4	double * na
TYPE	1639:1	1639:7	5	double *
TYPE_NAME	1639:1	1639:1	6	double
LEAF_NODE	1639:1	1639:1	7	double
POINTER	1639:7	1639:7	6	*
LEAF_NODE	1639:7	1639:7	7	*
NAME	1639:9	1639:9	5	na
LEAF_NODE	1639:9	1639:9	6	na
LEAF_NODE	1639:11	1639:11	4	;
SIMPLE_DECL	1640:1	1640:10	3	uint16 nb ;
VAR_DECL	1640:1	1640:8	4	uint16 nb
TYPE	1640:1	1640:1	5	uint16
TYPE_NAME	1640:1	1640:1	6	uint16
LEAF_NODE	1640:1	1640:1	7	uint16
NAME	1640:8	1640:8	5	nb
LEAF_NODE	1640:8	1640:8	6	nb
LEAF_NODE	1640:10	1640:10	4	;
SIMPLE_DECL	1641:1	1641:6	3	int o ;
VAR_DECL	1641:1	1641:5	4	int o
TYPE	1641:1	1641:1	5	int
TYPE_NAME	1641:1	1641:1	6	int
LEAF_NODE	1641:1	1641:1	7	int
NAME	1641:5	1641:5	5	o
LEAF_NODE	1641:5	1641:5	6	o
LEAF_NODE	1641:6	1641:6	4	;
SELECTION	1642:1	1643:1	3	
KEYWORD	1642:1	1642:1	4	if
LEAF_NODE	1642:1	1642:1	5	if
LEAF_NODE	1642:4	1642:4	4	(
CONDITION	1642:5	1642:5	4	dir == NULL
EXPR	1642:5	1642:10	5	dir == NULL
FIELD	1642:5	1642:5	6	dir
LEAF_NODE	1642:5	1642:5	7	dir
EQ_OPERATOR	1642:8	1642:8	6	==
LEAF_NODE	1642:8	1642:8	7	==
FIELD	1642:10	1642:10	6	NULL
LEAF_NODE	1642:10	1642:10	7	NULL
LEAF_NODE	1642:14	1642:14	4	)
STATEMENTS	1643:1	1646:1	4	
LEAF_NODE	1643:1	1643:1	5	{
STATEMENTS	1644:2	1645:2	5	
EXPR_STATEMENT	1644:2	1644:11	6	( * ndir ) ++ ;
EXPR	1644:2	1644:9	7	( * ndir ) ++
LEAF_NODE	1644:2	1644:2	8	(
UNARY_EXPR	1644:3	1644:4	8	* ndir
UNARY_OPERATOR	1644:3	1644:3	9	*
LEAF_NODE	1644:3	1644:3	10	*
FIELD	1644:4	1644:4	9	ndir
LEAF_NODE	1644:4	1644:4	10	ndir
LEAF_NODE	1644:8	1644:8	8	)
LEAF_NODE	1644:9	1644:9	8	++
LEAF_NODE	1644:11	1644:11	7	;
JUMP_STATEMENT	1645:2	1645:11	6	return ( 1 ) ;
KEYWORD	1645:2	1645:2	7	return
LEAF_NODE	1645:2	1645:2	8	return
DESTINATION	1645:8	1645:8	7	( 1 )
EXPR	1645:8	1645:10	8	( 1 )
LEAF_NODE	1645:8	1645:8	9	(
FIELD	1645:9	1645:9	9	1
LEAF_NODE	1645:9	1645:9	10	1
LEAF_NODE	1645:10	1645:10	9	)
LEAF_NODE	1645:11	1645:11	7	;
LEAF_NODE	1646:1	1646:1	5	}
EXPR_STATEMENT	1647:1	1647:62	3	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( double ) ) ;
EXPR	1647:1	1647:1	4	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( double ) )
ASSIGN	1647:1	1647:3	5	m = _TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( double ) )
LVAL	1647:1	1647:1	6	m
FIELD	1647:1	1647:1	7	m
LEAF_NODE	1647:1	1647:1	8	m
ASSIGN_OP	1647:2	1647:2	6	=
LEAF_NODE	1647:2	1647:2	7	=
RVAL	1647:3	1647:3	6	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( double ) )
FUNCTION_CALL	1647:3	1647:61	7	_TIFFmalloc ( tif -> tif_dir . td_samplesperpixel * sizeof ( double ) )
CALLEE	1647:3	1647:3	8	_TIFFmalloc
LEAF_NODE	1647:3	1647:3	9	_TIFFmalloc
LEAF_NODE	1647:14	1647:14	8	(
ARGUMENT	1647:15	1647:47	8	tif -> tif_dir . td_samplesperpixel * sizeof ( double )
FIELD	1647:15	1647:28	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1647:15	1647:15	10	tif
LEAF_NODE	1647:18	1647:18	10	->
LEAF_NODE	1647:20	1647:20	10	tif_dir
LEAF_NODE	1647:27	1647:27	10	.
LEAF_NODE	1647:28	1647:28	10	td_samplesperpixel
LEAF_NODE	1647:46	1647:46	9	*
FUNCTION_CALL	1647:47	1647:60	9	sizeof ( double )
CALLEE	1647:47	1647:47	10	sizeof
LEAF_NODE	1647:47	1647:47	11	sizeof
LEAF_NODE	1647:53	1647:53	10	(
ARGUMENT	1647:54	1647:54	10	double
FIELD	1647:54	1647:54	11	double
LEAF_NODE	1647:54	1647:54	12	double
LEAF_NODE	1647:60	1647:60	10	)
LEAF_NODE	1647:61	1647:61	8	)
LEAF_NODE	1647:62	1647:62	4	;
SELECTION	1648:1	1649:1	3	
KEYWORD	1648:1	1648:1	4	if
LEAF_NODE	1648:1	1648:1	5	if
LEAF_NODE	1648:4	1648:4	4	(
CONDITION	1648:5	1648:5	4	m == NULL
EXPR	1648:5	1648:8	5	m == NULL
FIELD	1648:5	1648:5	6	m
LEAF_NODE	1648:5	1648:5	7	m
EQ_OPERATOR	1648:6	1648:6	6	==
LEAF_NODE	1648:6	1648:6	7	==
FIELD	1648:8	1648:8	6	NULL
LEAF_NODE	1648:8	1648:8	7	NULL
LEAF_NODE	1648:12	1648:12	4	)
STATEMENTS	1649:1	1652:1	4	
LEAF_NODE	1649:1	1649:1	5	{
STATEMENTS	1650:2	1651:2	5	
EXPR_STATEMENT	1650:2	1650:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1650:2	1650:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1650:2	1650:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1650:2	1650:2	9	TIFFErrorExt
LEAF_NODE	1650:2	1650:2	10	TIFFErrorExt
LEAF_NODE	1650:14	1650:14	9	(
ARGUMENT	1650:15	1650:15	9	tif -> tif_clientdata
FIELD	1650:15	1650:20	10	tif -> tif_clientdata
LEAF_NODE	1650:15	1650:15	11	tif
LEAF_NODE	1650:18	1650:18	11	->
LEAF_NODE	1650:20	1650:20	11	tif_clientdata
LEAF_NODE	1650:34	1650:34	9	,
ARGUMENT	1650:35	1650:35	9	module
FIELD	1650:35	1650:35	10	module
LEAF_NODE	1650:35	1650:35	11	module
LEAF_NODE	1650:41	1650:41	9	,
ARGUMENT	1650:42	1650:42	9	"Out of memory"
FIELD	1650:42	1650:42	10	"Out of memory"
LEAF_NODE	1650:42	1650:42	11	"Out of memory"
LEAF_NODE	1650:57	1650:57	9	)
LEAF_NODE	1650:58	1650:58	7	;
JUMP_STATEMENT	1651:2	1651:11	6	return ( 0 ) ;
KEYWORD	1651:2	1651:2	7	return
LEAF_NODE	1651:2	1651:2	8	return
DESTINATION	1651:8	1651:8	7	( 0 )
EXPR	1651:8	1651:10	8	( 0 )
LEAF_NODE	1651:8	1651:8	9	(
FIELD	1651:9	1651:9	9	0
LEAF_NODE	1651:9	1651:9	10	0
LEAF_NODE	1651:10	1651:10	9	)
LEAF_NODE	1651:11	1651:11	7	;
LEAF_NODE	1652:1	1652:1	5	}
ITERATION	1653:1	1654:2	3	
KEYWORD	1653:1	1653:1	4	for
LEAF_NODE	1653:1	1653:1	5	for
LEAF_NODE	1653:5	1653:5	4	(
FOR_INIT	1653:6	1653:16	4	na = m , nb = 0 ;
EXPR	1653:6	1653:12	5	na = m , nb = 0
ASSIGN	1653:6	1653:9	6	na = m
LVAL	1653:6	1653:6	7	na
FIELD	1653:6	1653:6	8	na
LEAF_NODE	1653:6	1653:6	9	na
ASSIGN_OP	1653:8	1653:8	7	=
LEAF_NODE	1653:8	1653:8	8	=
RVAL	1653:9	1653:9	7	m
FIELD	1653:9	1653:9	8	m
LEAF_NODE	1653:9	1653:9	9	m
LEAF_NODE	1653:10	1653:10	6	,
ASSIGN	1653:12	1653:15	6	nb = 0
LVAL	1653:12	1653:12	7	nb
FIELD	1653:12	1653:12	8	nb
LEAF_NODE	1653:12	1653:12	9	nb
ASSIGN_OP	1653:14	1653:14	7	=
LEAF_NODE	1653:14	1653:14	8	=
RVAL	1653:15	1653:15	7	0
FIELD	1653:15	1653:15	8	0
LEAF_NODE	1653:15	1653:15	9	0
LEAF_NODE	1653:16	1653:16	5	;
CONDITION	1653:18	1653:18	4	nb < tif -> tif_dir . td_samplesperpixel
EXPR	1653:18	1653:21	5	nb < tif -> tif_dir . td_samplesperpixel
FIELD	1653:18	1653:18	6	nb
LEAF_NODE	1653:18	1653:18	7	nb
REL_OPERATOR	1653:20	1653:20	6	<
LEAF_NODE	1653:20	1653:20	7	<
FIELD	1653:21	1653:34	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1653:21	1653:21	7	tif
LEAF_NODE	1653:24	1653:24	7	->
LEAF_NODE	1653:26	1653:26	7	tif_dir
LEAF_NODE	1653:33	1653:33	7	.
LEAF_NODE	1653:34	1653:34	7	td_samplesperpixel
LEAF_NODE	1653:52	1653:52	4	;
FOR_EXPR	1653:54	1653:54	4	na ++ , nb ++
EXPR	1653:54	1653:60	5	na ++ , nb ++
FIELD	1653:54	1653:56	6	na ++
LEAF_NODE	1653:54	1653:54	7	na
LEAF_NODE	1653:56	1653:56	7	++
LEAF_NODE	1653:58	1653:58	6	,
FIELD	1653:60	1653:62	6	nb ++
LEAF_NODE	1653:60	1653:60	7	nb
LEAF_NODE	1653:62	1653:62	7	++
LEAF_NODE	1653:64	1653:64	4	)
STATEMENTS	1654:2	1654:2	4	
EXPR_STATEMENT	1654:2	1654:11	5	* na = value ;
EXPR	1654:2	1654:2	6	* na = value
ASSIGN	1654:2	1654:6	7	* na = value
LVAL	1654:2	1654:2	8	* na
UNARY_EXPR	1654:2	1654:3	9	* na
UNARY_OPERATOR	1654:2	1654:2	10	*
LEAF_NODE	1654:2	1654:2	11	*
FIELD	1654:3	1654:3	10	na
LEAF_NODE	1654:3	1654:3	11	na
ASSIGN_OP	1654:5	1654:5	8	=
LEAF_NODE	1654:5	1654:5	9	=
RVAL	1654:6	1654:6	8	value
FIELD	1654:6	1654:6	9	value
LEAF_NODE	1654:6	1654:6	10	value
LEAF_NODE	1654:11	1654:11	6	;
EXPR_STATEMENT	1655:1	1655:94	3	o = TIFFWriteDirectoryTagCheckedDoubleArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m ) ;
EXPR	1655:1	1655:1	4	o = TIFFWriteDirectoryTagCheckedDoubleArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
ASSIGN	1655:1	1655:3	5	o = TIFFWriteDirectoryTagCheckedDoubleArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
LVAL	1655:1	1655:1	6	o
FIELD	1655:1	1655:1	7	o
LEAF_NODE	1655:1	1655:1	8	o
ASSIGN_OP	1655:2	1655:2	6	=
LEAF_NODE	1655:2	1655:2	7	=
RVAL	1655:3	1655:3	6	TIFFWriteDirectoryTagCheckedDoubleArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
FUNCTION_CALL	1655:3	1655:93	7	TIFFWriteDirectoryTagCheckedDoubleArray ( tif , ndir , dir , tag , tif -> tif_dir . td_samplesperpixel , m )
CALLEE	1655:3	1655:3	8	TIFFWriteDirectoryTagCheckedDoubleArray
LEAF_NODE	1655:3	1655:3	9	TIFFWriteDirectoryTagCheckedDoubleArray
LEAF_NODE	1655:42	1655:42	8	(
ARGUMENT	1655:43	1655:43	8	tif
FIELD	1655:43	1655:43	9	tif
LEAF_NODE	1655:43	1655:43	10	tif
LEAF_NODE	1655:46	1655:46	8	,
ARGUMENT	1655:47	1655:47	8	ndir
FIELD	1655:47	1655:47	9	ndir
LEAF_NODE	1655:47	1655:47	10	ndir
LEAF_NODE	1655:51	1655:51	8	,
ARGUMENT	1655:52	1655:52	8	dir
FIELD	1655:52	1655:52	9	dir
LEAF_NODE	1655:52	1655:52	10	dir
LEAF_NODE	1655:55	1655:55	8	,
ARGUMENT	1655:56	1655:56	8	tag
FIELD	1655:56	1655:56	9	tag
LEAF_NODE	1655:56	1655:56	10	tag
LEAF_NODE	1655:59	1655:59	8	,
ARGUMENT	1655:60	1655:60	8	tif -> tif_dir . td_samplesperpixel
FIELD	1655:60	1655:73	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1655:60	1655:60	10	tif
LEAF_NODE	1655:63	1655:63	10	->
LEAF_NODE	1655:65	1655:65	10	tif_dir
LEAF_NODE	1655:72	1655:72	10	.
LEAF_NODE	1655:73	1655:73	10	td_samplesperpixel
LEAF_NODE	1655:91	1655:91	8	,
ARGUMENT	1655:92	1655:92	8	m
FIELD	1655:92	1655:92	9	m
LEAF_NODE	1655:92	1655:92	10	m
LEAF_NODE	1655:93	1655:93	8	)
LEAF_NODE	1655:94	1655:94	4	;
EXPR_STATEMENT	1656:1	1656:13	3	_TIFFfree ( m ) ;
EXPR	1656:1	1656:1	4	_TIFFfree ( m )
FUNCTION_CALL	1656:1	1656:12	5	_TIFFfree ( m )
CALLEE	1656:1	1656:1	6	_TIFFfree
LEAF_NODE	1656:1	1656:1	7	_TIFFfree
LEAF_NODE	1656:10	1656:10	6	(
ARGUMENT	1656:11	1656:11	6	m
FIELD	1656:11	1656:11	7	m
LEAF_NODE	1656:11	1656:11	8	m
LEAF_NODE	1656:12	1656:12	6	)
LEAF_NODE	1656:13	1656:13	4	;
LEAF_NODE	1657:1	1657:1	3	return
LEAF_NODE	1657:7	1657:7	3	(
LEAF_NODE	1657:8	1657:8	3	o
LEAF_NODE	1657:9	1657:9	3	)
LEAF_NODE	1657:10	1657:10	3	;
LEAF_NODE	1658:0	1658:0	2	}
FUNCTION_DEF	1661:0	1670:0	1	
RETURN_TYPE	1661:0	1661:7	2	static int
LEAF_NODE	1661:0	1661:0	3	static
TYPE_NAME	1661:7	1661:7	3	int
LEAF_NODE	1661:7	1661:7	4	int
FUNCTION_NAME	1662:0	1662:0	2	TIFFWriteDirectoryTagIfdArray
LEAF_NODE	1662:0	1662:0	3	TIFFWriteDirectoryTagIfdArray
PARAMETER_LIST	1662:29	1662:113	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint32 * value )
LEAF_NODE	1662:29	1662:29	3	(
PARAMETER_DECL	1662:30	1662:36	3	TIFF * tif
TYPE	1662:30	1662:34	4	TIFF *
TYPE_NAME	1662:30	1662:30	5	TIFF
LEAF_NODE	1662:30	1662:30	6	TIFF
POINTER	1662:34	1662:34	5	*
LEAF_NODE	1662:34	1662:34	6	*
NAME	1662:36	1662:36	4	tif
LEAF_NODE	1662:36	1662:36	5	tif
LEAF_NODE	1662:39	1662:39	3	,
PARAMETER_DECL	1662:41	1662:49	3	uint32 * ndir
TYPE	1662:41	1662:47	4	uint32 *
TYPE_NAME	1662:41	1662:41	5	uint32
LEAF_NODE	1662:41	1662:41	6	uint32
POINTER	1662:47	1662:47	5	*
LEAF_NODE	1662:47	1662:47	6	*
NAME	1662:49	1662:49	4	ndir
LEAF_NODE	1662:49	1662:49	5	ndir
LEAF_NODE	1662:53	1662:53	3	,
PARAMETER_DECL	1662:55	1662:69	3	TIFFDirEntry * dir
TYPE	1662:55	1662:67	4	TIFFDirEntry *
TYPE_NAME	1662:55	1662:55	5	TIFFDirEntry
LEAF_NODE	1662:55	1662:55	6	TIFFDirEntry
POINTER	1662:67	1662:67	5	*
LEAF_NODE	1662:67	1662:67	6	*
NAME	1662:69	1662:69	4	dir
LEAF_NODE	1662:69	1662:69	5	dir
LEAF_NODE	1662:72	1662:72	3	,
PARAMETER_DECL	1662:74	1662:81	3	uint16 tag
TYPE	1662:74	1662:74	4	uint16
TYPE_NAME	1662:74	1662:74	5	uint16
LEAF_NODE	1662:74	1662:74	6	uint16
NAME	1662:81	1662:81	4	tag
LEAF_NODE	1662:81	1662:81	5	tag
LEAF_NODE	1662:84	1662:84	3	,
PARAMETER_DECL	1662:86	1662:93	3	uint32 count
TYPE	1662:86	1662:86	4	uint32
TYPE_NAME	1662:86	1662:86	5	uint32
LEAF_NODE	1662:86	1662:86	6	uint32
NAME	1662:93	1662:93	4	count
LEAF_NODE	1662:93	1662:93	5	count
LEAF_NODE	1662:98	1662:98	3	,
PARAMETER_DECL	1662:100	1662:108	3	uint32 * value
TYPE	1662:100	1662:106	4	uint32 *
TYPE_NAME	1662:100	1662:100	5	uint32
LEAF_NODE	1662:100	1662:100	6	uint32
POINTER	1662:106	1662:106	5	*
LEAF_NODE	1662:106	1662:106	6	*
NAME	1662:108	1662:108	4	value
LEAF_NODE	1662:108	1662:108	5	value
LEAF_NODE	1662:113	1662:113	3	)
LEAF_NODE	1663:0	1663:0	2	{
STATEMENTS	1664:1	1669:1	2	
SELECTION	1664:1	1665:1	3	
KEYWORD	1664:1	1664:1	4	if
LEAF_NODE	1664:1	1664:1	5	if
LEAF_NODE	1664:4	1664:4	4	(
CONDITION	1664:5	1664:5	4	dir == NULL
EXPR	1664:5	1664:10	5	dir == NULL
FIELD	1664:5	1664:5	6	dir
LEAF_NODE	1664:5	1664:5	7	dir
EQ_OPERATOR	1664:8	1664:8	6	==
LEAF_NODE	1664:8	1664:8	7	==
FIELD	1664:10	1664:10	6	NULL
LEAF_NODE	1664:10	1664:10	7	NULL
LEAF_NODE	1664:14	1664:14	4	)
STATEMENTS	1665:1	1668:1	4	
LEAF_NODE	1665:1	1665:1	5	{
STATEMENTS	1666:2	1667:2	5	
EXPR_STATEMENT	1666:2	1666:11	6	( * ndir ) ++ ;
EXPR	1666:2	1666:9	7	( * ndir ) ++
LEAF_NODE	1666:2	1666:2	8	(
UNARY_EXPR	1666:3	1666:4	8	* ndir
UNARY_OPERATOR	1666:3	1666:3	9	*
LEAF_NODE	1666:3	1666:3	10	*
FIELD	1666:4	1666:4	9	ndir
LEAF_NODE	1666:4	1666:4	10	ndir
LEAF_NODE	1666:8	1666:8	8	)
LEAF_NODE	1666:9	1666:9	8	++
LEAF_NODE	1666:11	1666:11	7	;
JUMP_STATEMENT	1667:2	1667:11	6	return ( 1 ) ;
KEYWORD	1667:2	1667:2	7	return
LEAF_NODE	1667:2	1667:2	8	return
DESTINATION	1667:8	1667:8	7	( 1 )
EXPR	1667:8	1667:10	8	( 1 )
LEAF_NODE	1667:8	1667:8	9	(
FIELD	1667:9	1667:9	9	1
LEAF_NODE	1667:9	1667:9	10	1
LEAF_NODE	1667:10	1667:10	9	)
LEAF_NODE	1667:11	1667:11	7	;
LEAF_NODE	1668:1	1668:1	5	}
JUMP_STATEMENT	1669:1	1669:75	3	return ( TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1669:1	1669:1	4	return
LEAF_NODE	1669:1	1669:1	5	return
DESTINATION	1669:7	1669:7	4	( TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , tag , count , value ) )
EXPR	1669:7	1669:74	5	( TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1669:7	1669:7	6	(
FUNCTION_CALL	1669:8	1669:73	6	TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , tag , count , value )
CALLEE	1669:8	1669:8	7	TIFFWriteDirectoryTagCheckedIfdArray
LEAF_NODE	1669:8	1669:8	8	TIFFWriteDirectoryTagCheckedIfdArray
LEAF_NODE	1669:44	1669:44	7	(
ARGUMENT	1669:45	1669:45	7	tif
FIELD	1669:45	1669:45	8	tif
LEAF_NODE	1669:45	1669:45	9	tif
LEAF_NODE	1669:48	1669:48	7	,
ARGUMENT	1669:49	1669:49	7	ndir
FIELD	1669:49	1669:49	8	ndir
LEAF_NODE	1669:49	1669:49	9	ndir
LEAF_NODE	1669:53	1669:53	7	,
ARGUMENT	1669:54	1669:54	7	dir
FIELD	1669:54	1669:54	8	dir
LEAF_NODE	1669:54	1669:54	9	dir
LEAF_NODE	1669:57	1669:57	7	,
ARGUMENT	1669:58	1669:58	7	tag
FIELD	1669:58	1669:58	8	tag
LEAF_NODE	1669:58	1669:58	9	tag
LEAF_NODE	1669:61	1669:61	7	,
ARGUMENT	1669:62	1669:62	7	count
FIELD	1669:62	1669:62	8	count
LEAF_NODE	1669:62	1669:62	9	count
LEAF_NODE	1669:67	1669:67	7	,
ARGUMENT	1669:68	1669:68	7	value
FIELD	1669:68	1669:68	8	value
LEAF_NODE	1669:68	1669:68	9	value
LEAF_NODE	1669:73	1669:73	7	)
LEAF_NODE	1669:74	1669:74	6	)
LEAF_NODE	1669:75	1669:75	4	;
LEAF_NODE	1670:0	1670:0	2	}
FUNCTION_DEF	1673:0	1682:0	1	
RETURN_TYPE	1673:0	1673:7	2	static int
LEAF_NODE	1673:0	1673:0	3	static
TYPE_NAME	1673:7	1673:7	3	int
LEAF_NODE	1673:7	1673:7	4	int
FUNCTION_NAME	1674:0	1674:0	2	TIFFWriteDirectoryTagIfd8Array
LEAF_NODE	1674:0	1674:0	3	TIFFWriteDirectoryTagIfd8Array
PARAMETER_LIST	1674:30	1674:114	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint64 * value )
LEAF_NODE	1674:30	1674:30	3	(
PARAMETER_DECL	1674:31	1674:37	3	TIFF * tif
TYPE	1674:31	1674:35	4	TIFF *
TYPE_NAME	1674:31	1674:31	5	TIFF
LEAF_NODE	1674:31	1674:31	6	TIFF
POINTER	1674:35	1674:35	5	*
LEAF_NODE	1674:35	1674:35	6	*
NAME	1674:37	1674:37	4	tif
LEAF_NODE	1674:37	1674:37	5	tif
LEAF_NODE	1674:40	1674:40	3	,
PARAMETER_DECL	1674:42	1674:50	3	uint32 * ndir
TYPE	1674:42	1674:48	4	uint32 *
TYPE_NAME	1674:42	1674:42	5	uint32
LEAF_NODE	1674:42	1674:42	6	uint32
POINTER	1674:48	1674:48	5	*
LEAF_NODE	1674:48	1674:48	6	*
NAME	1674:50	1674:50	4	ndir
LEAF_NODE	1674:50	1674:50	5	ndir
LEAF_NODE	1674:54	1674:54	3	,
PARAMETER_DECL	1674:56	1674:70	3	TIFFDirEntry * dir
TYPE	1674:56	1674:68	4	TIFFDirEntry *
TYPE_NAME	1674:56	1674:56	5	TIFFDirEntry
LEAF_NODE	1674:56	1674:56	6	TIFFDirEntry
POINTER	1674:68	1674:68	5	*
LEAF_NODE	1674:68	1674:68	6	*
NAME	1674:70	1674:70	4	dir
LEAF_NODE	1674:70	1674:70	5	dir
LEAF_NODE	1674:73	1674:73	3	,
PARAMETER_DECL	1674:75	1674:82	3	uint16 tag
TYPE	1674:75	1674:75	4	uint16
TYPE_NAME	1674:75	1674:75	5	uint16
LEAF_NODE	1674:75	1674:75	6	uint16
NAME	1674:82	1674:82	4	tag
LEAF_NODE	1674:82	1674:82	5	tag
LEAF_NODE	1674:85	1674:85	3	,
PARAMETER_DECL	1674:87	1674:94	3	uint32 count
TYPE	1674:87	1674:87	4	uint32
TYPE_NAME	1674:87	1674:87	5	uint32
LEAF_NODE	1674:87	1674:87	6	uint32
NAME	1674:94	1674:94	4	count
LEAF_NODE	1674:94	1674:94	5	count
LEAF_NODE	1674:99	1674:99	3	,
PARAMETER_DECL	1674:101	1674:109	3	uint64 * value
TYPE	1674:101	1674:107	4	uint64 *
TYPE_NAME	1674:101	1674:101	5	uint64
LEAF_NODE	1674:101	1674:101	6	uint64
POINTER	1674:107	1674:107	5	*
LEAF_NODE	1674:107	1674:107	6	*
NAME	1674:109	1674:109	4	value
LEAF_NODE	1674:109	1674:109	5	value
LEAF_NODE	1674:114	1674:114	3	)
LEAF_NODE	1675:0	1675:0	2	{
STATEMENTS	1676:1	1681:1	2	
SELECTION	1676:1	1677:1	3	
KEYWORD	1676:1	1676:1	4	if
LEAF_NODE	1676:1	1676:1	5	if
LEAF_NODE	1676:4	1676:4	4	(
CONDITION	1676:5	1676:5	4	dir == NULL
EXPR	1676:5	1676:10	5	dir == NULL
FIELD	1676:5	1676:5	6	dir
LEAF_NODE	1676:5	1676:5	7	dir
EQ_OPERATOR	1676:8	1676:8	6	==
LEAF_NODE	1676:8	1676:8	7	==
FIELD	1676:10	1676:10	6	NULL
LEAF_NODE	1676:10	1676:10	7	NULL
LEAF_NODE	1676:14	1676:14	4	)
STATEMENTS	1677:1	1680:1	4	
LEAF_NODE	1677:1	1677:1	5	{
STATEMENTS	1678:2	1679:2	5	
EXPR_STATEMENT	1678:2	1678:11	6	( * ndir ) ++ ;
EXPR	1678:2	1678:9	7	( * ndir ) ++
LEAF_NODE	1678:2	1678:2	8	(
UNARY_EXPR	1678:3	1678:4	8	* ndir
UNARY_OPERATOR	1678:3	1678:3	9	*
LEAF_NODE	1678:3	1678:3	10	*
FIELD	1678:4	1678:4	9	ndir
LEAF_NODE	1678:4	1678:4	10	ndir
LEAF_NODE	1678:8	1678:8	8	)
LEAF_NODE	1678:9	1678:9	8	++
LEAF_NODE	1678:11	1678:11	7	;
JUMP_STATEMENT	1679:2	1679:11	6	return ( 1 ) ;
KEYWORD	1679:2	1679:2	7	return
LEAF_NODE	1679:2	1679:2	8	return
DESTINATION	1679:8	1679:8	7	( 1 )
EXPR	1679:8	1679:10	8	( 1 )
LEAF_NODE	1679:8	1679:8	9	(
FIELD	1679:9	1679:9	9	1
LEAF_NODE	1679:9	1679:9	10	1
LEAF_NODE	1679:10	1679:10	9	)
LEAF_NODE	1679:11	1679:11	7	;
LEAF_NODE	1680:1	1680:1	5	}
JUMP_STATEMENT	1681:1	1681:76	3	return ( TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , tag , count , value ) ) ;
KEYWORD	1681:1	1681:1	4	return
LEAF_NODE	1681:1	1681:1	5	return
DESTINATION	1681:7	1681:7	4	( TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , tag , count , value ) )
EXPR	1681:7	1681:75	5	( TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , tag , count , value ) )
LEAF_NODE	1681:7	1681:7	6	(
FUNCTION_CALL	1681:8	1681:74	6	TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , tag , count , value )
CALLEE	1681:8	1681:8	7	TIFFWriteDirectoryTagCheckedIfd8Array
LEAF_NODE	1681:8	1681:8	8	TIFFWriteDirectoryTagCheckedIfd8Array
LEAF_NODE	1681:45	1681:45	7	(
ARGUMENT	1681:46	1681:46	7	tif
FIELD	1681:46	1681:46	8	tif
LEAF_NODE	1681:46	1681:46	9	tif
LEAF_NODE	1681:49	1681:49	7	,
ARGUMENT	1681:50	1681:50	7	ndir
FIELD	1681:50	1681:50	8	ndir
LEAF_NODE	1681:50	1681:50	9	ndir
LEAF_NODE	1681:54	1681:54	7	,
ARGUMENT	1681:55	1681:55	7	dir
FIELD	1681:55	1681:55	8	dir
LEAF_NODE	1681:55	1681:55	9	dir
LEAF_NODE	1681:58	1681:58	7	,
ARGUMENT	1681:59	1681:59	7	tag
FIELD	1681:59	1681:59	8	tag
LEAF_NODE	1681:59	1681:59	9	tag
LEAF_NODE	1681:62	1681:62	7	,
ARGUMENT	1681:63	1681:63	7	count
FIELD	1681:63	1681:63	8	count
LEAF_NODE	1681:63	1681:63	9	count
LEAF_NODE	1681:68	1681:68	7	,
ARGUMENT	1681:69	1681:69	7	value
FIELD	1681:69	1681:69	8	value
LEAF_NODE	1681:69	1681:69	9	value
LEAF_NODE	1681:74	1681:74	7	)
LEAF_NODE	1681:75	1681:75	6	)
LEAF_NODE	1681:76	1681:76	4	;
LEAF_NODE	1682:0	1682:0	2	}
FUNCTION_DEF	1685:0	1697:0	1	
RETURN_TYPE	1685:0	1685:7	2	static int
LEAF_NODE	1685:0	1685:0	3	static
TYPE_NAME	1685:7	1685:7	3	int
LEAF_NODE	1685:7	1685:7	4	int
FUNCTION_NAME	1686:0	1686:0	2	TIFFWriteDirectoryTagShortLong
LEAF_NODE	1686:0	1686:0	3	TIFFWriteDirectoryTagShortLong
PARAMETER_LIST	1686:30	1686:99	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 value )
LEAF_NODE	1686:30	1686:30	3	(
PARAMETER_DECL	1686:31	1686:37	3	TIFF * tif
TYPE	1686:31	1686:35	4	TIFF *
TYPE_NAME	1686:31	1686:31	5	TIFF
LEAF_NODE	1686:31	1686:31	6	TIFF
POINTER	1686:35	1686:35	5	*
LEAF_NODE	1686:35	1686:35	6	*
NAME	1686:37	1686:37	4	tif
LEAF_NODE	1686:37	1686:37	5	tif
LEAF_NODE	1686:40	1686:40	3	,
PARAMETER_DECL	1686:42	1686:50	3	uint32 * ndir
TYPE	1686:42	1686:48	4	uint32 *
TYPE_NAME	1686:42	1686:42	5	uint32
LEAF_NODE	1686:42	1686:42	6	uint32
POINTER	1686:48	1686:48	5	*
LEAF_NODE	1686:48	1686:48	6	*
NAME	1686:50	1686:50	4	ndir
LEAF_NODE	1686:50	1686:50	5	ndir
LEAF_NODE	1686:54	1686:54	3	,
PARAMETER_DECL	1686:56	1686:70	3	TIFFDirEntry * dir
TYPE	1686:56	1686:68	4	TIFFDirEntry *
TYPE_NAME	1686:56	1686:56	5	TIFFDirEntry
LEAF_NODE	1686:56	1686:56	6	TIFFDirEntry
POINTER	1686:68	1686:68	5	*
LEAF_NODE	1686:68	1686:68	6	*
NAME	1686:70	1686:70	4	dir
LEAF_NODE	1686:70	1686:70	5	dir
LEAF_NODE	1686:73	1686:73	3	,
PARAMETER_DECL	1686:75	1686:82	3	uint16 tag
TYPE	1686:75	1686:75	4	uint16
TYPE_NAME	1686:75	1686:75	5	uint16
LEAF_NODE	1686:75	1686:75	6	uint16
NAME	1686:82	1686:82	4	tag
LEAF_NODE	1686:82	1686:82	5	tag
LEAF_NODE	1686:85	1686:85	3	,
PARAMETER_DECL	1686:87	1686:94	3	uint32 value
TYPE	1686:87	1686:87	4	uint32
TYPE_NAME	1686:87	1686:87	5	uint32
LEAF_NODE	1686:87	1686:87	6	uint32
NAME	1686:94	1686:94	4	value
LEAF_NODE	1686:94	1686:94	5	value
LEAF_NODE	1686:99	1686:99	3	)
LEAF_NODE	1687:0	1687:0	2	{
STATEMENTS	1688:1	1695:1	2	
SELECTION	1688:1	1689:1	3	
KEYWORD	1688:1	1688:1	4	if
LEAF_NODE	1688:1	1688:1	5	if
LEAF_NODE	1688:4	1688:4	4	(
CONDITION	1688:5	1688:5	4	dir == NULL
EXPR	1688:5	1688:10	5	dir == NULL
FIELD	1688:5	1688:5	6	dir
LEAF_NODE	1688:5	1688:5	7	dir
EQ_OPERATOR	1688:8	1688:8	6	==
LEAF_NODE	1688:8	1688:8	7	==
FIELD	1688:10	1688:10	6	NULL
LEAF_NODE	1688:10	1688:10	7	NULL
LEAF_NODE	1688:14	1688:14	4	)
STATEMENTS	1689:1	1692:1	4	
LEAF_NODE	1689:1	1689:1	5	{
STATEMENTS	1690:2	1691:2	5	
EXPR_STATEMENT	1690:2	1690:11	6	( * ndir ) ++ ;
EXPR	1690:2	1690:9	7	( * ndir ) ++
LEAF_NODE	1690:2	1690:2	8	(
UNARY_EXPR	1690:3	1690:4	8	* ndir
UNARY_OPERATOR	1690:3	1690:3	9	*
LEAF_NODE	1690:3	1690:3	10	*
FIELD	1690:4	1690:4	9	ndir
LEAF_NODE	1690:4	1690:4	10	ndir
LEAF_NODE	1690:8	1690:8	8	)
LEAF_NODE	1690:9	1690:9	8	++
LEAF_NODE	1690:11	1690:11	7	;
JUMP_STATEMENT	1691:2	1691:11	6	return ( 1 ) ;
KEYWORD	1691:2	1691:2	7	return
LEAF_NODE	1691:2	1691:2	8	return
DESTINATION	1691:8	1691:8	7	( 1 )
EXPR	1691:8	1691:10	8	( 1 )
LEAF_NODE	1691:8	1691:8	9	(
FIELD	1691:9	1691:9	9	1
LEAF_NODE	1691:9	1691:9	10	1
LEAF_NODE	1691:10	1691:10	9	)
LEAF_NODE	1691:11	1691:11	7	;
LEAF_NODE	1692:1	1692:1	5	}
SELECTION	1693:1	1694:2	3	
KEYWORD	1693:1	1693:1	4	if
LEAF_NODE	1693:1	1693:1	5	if
LEAF_NODE	1693:4	1693:4	4	(
CONDITION	1693:5	1693:5	4	value <= 0xFFFF
EXPR	1693:5	1693:12	5	value <= 0xFFFF
FIELD	1693:5	1693:5	6	value
LEAF_NODE	1693:5	1693:5	7	value
REL_OPERATOR	1693:10	1693:10	6	<=
LEAF_NODE	1693:10	1693:10	7	<=
FIELD	1693:12	1693:12	6	0xFFFF
LEAF_NODE	1693:12	1693:12	7	0xFFFF
LEAF_NODE	1693:18	1693:18	4	)
STATEMENTS	1694:2	1694:2	4	
JUMP_STATEMENT	1694:2	1694:75	5	return ( TIFFWriteDirectoryTagCheckedShort ( tif , ndir , dir , tag , ( uint16 ) value ) ) ;
KEYWORD	1694:2	1694:2	6	return
LEAF_NODE	1694:2	1694:2	7	return
DESTINATION	1694:8	1694:8	6	( TIFFWriteDirectoryTagCheckedShort ( tif , ndir , dir , tag , ( uint16 ) value ) )
EXPR	1694:8	1694:74	7	( TIFFWriteDirectoryTagCheckedShort ( tif , ndir , dir , tag , ( uint16 ) value ) )
LEAF_NODE	1694:8	1694:8	8	(
FUNCTION_CALL	1694:9	1694:73	8	TIFFWriteDirectoryTagCheckedShort ( tif , ndir , dir , tag , ( uint16 ) value )
CALLEE	1694:9	1694:9	9	TIFFWriteDirectoryTagCheckedShort
LEAF_NODE	1694:9	1694:9	10	TIFFWriteDirectoryTagCheckedShort
LEAF_NODE	1694:42	1694:42	9	(
ARGUMENT	1694:43	1694:43	9	tif
FIELD	1694:43	1694:43	10	tif
LEAF_NODE	1694:43	1694:43	11	tif
LEAF_NODE	1694:46	1694:46	9	,
ARGUMENT	1694:47	1694:47	9	ndir
FIELD	1694:47	1694:47	10	ndir
LEAF_NODE	1694:47	1694:47	11	ndir
LEAF_NODE	1694:51	1694:51	9	,
ARGUMENT	1694:52	1694:52	9	dir
FIELD	1694:52	1694:52	10	dir
LEAF_NODE	1694:52	1694:52	11	dir
LEAF_NODE	1694:55	1694:55	9	,
ARGUMENT	1694:56	1694:56	9	tag
FIELD	1694:56	1694:56	10	tag
LEAF_NODE	1694:56	1694:56	11	tag
LEAF_NODE	1694:59	1694:59	9	,
ARGUMENT	1694:60	1694:68	9	( uint16 ) value
LEAF_NODE	1694:60	1694:60	10	(
TYPE_NAME	1694:61	1694:61	10	uint16
LEAF_NODE	1694:61	1694:61	11	uint16
LEAF_NODE	1694:67	1694:67	10	)
FIELD	1694:68	1694:68	10	value
LEAF_NODE	1694:68	1694:68	11	value
LEAF_NODE	1694:73	1694:73	9	)
LEAF_NODE	1694:74	1694:74	8	)
LEAF_NODE	1694:75	1694:75	6	;
SELECTION	1695:1	1696:2	3	
KEYWORD	1695:1	1695:1	4	else
LEAF_NODE	1695:1	1695:1	5	else
STATEMENTS	1696:2	1696:2	4	
JUMP_STATEMENT	1696:2	1696:66	5	return ( TIFFWriteDirectoryTagCheckedLong ( tif , ndir , dir , tag , value ) ) ;
KEYWORD	1696:2	1696:2	6	return
LEAF_NODE	1696:2	1696:2	7	return
DESTINATION	1696:8	1696:8	6	( TIFFWriteDirectoryTagCheckedLong ( tif , ndir , dir , tag , value ) )
EXPR	1696:8	1696:65	7	( TIFFWriteDirectoryTagCheckedLong ( tif , ndir , dir , tag , value ) )
LEAF_NODE	1696:8	1696:8	8	(
FUNCTION_CALL	1696:9	1696:64	8	TIFFWriteDirectoryTagCheckedLong ( tif , ndir , dir , tag , value )
CALLEE	1696:9	1696:9	9	TIFFWriteDirectoryTagCheckedLong
LEAF_NODE	1696:9	1696:9	10	TIFFWriteDirectoryTagCheckedLong
LEAF_NODE	1696:41	1696:41	9	(
ARGUMENT	1696:42	1696:42	9	tif
FIELD	1696:42	1696:42	10	tif
LEAF_NODE	1696:42	1696:42	11	tif
LEAF_NODE	1696:45	1696:45	9	,
ARGUMENT	1696:46	1696:46	9	ndir
FIELD	1696:46	1696:46	10	ndir
LEAF_NODE	1696:46	1696:46	11	ndir
LEAF_NODE	1696:50	1696:50	9	,
ARGUMENT	1696:51	1696:51	9	dir
FIELD	1696:51	1696:51	10	dir
LEAF_NODE	1696:51	1696:51	11	dir
LEAF_NODE	1696:54	1696:54	9	,
ARGUMENT	1696:55	1696:55	9	tag
FIELD	1696:55	1696:55	10	tag
LEAF_NODE	1696:55	1696:55	11	tag
LEAF_NODE	1696:58	1696:58	9	,
ARGUMENT	1696:59	1696:59	9	value
FIELD	1696:59	1696:59	10	value
LEAF_NODE	1696:59	1696:59	11	value
LEAF_NODE	1696:64	1696:64	9	)
LEAF_NODE	1696:65	1696:65	8	)
LEAF_NODE	1696:66	1696:66	6	;
LEAF_NODE	1697:0	1697:0	2	}
FUNCTION_DEF	1699:0	1720:0	1	
RETURN_TYPE	1699:0	1699:7	2	static int
LEAF_NODE	1699:0	1699:0	3	static
TYPE_NAME	1699:7	1699:7	3	int
LEAF_NODE	1699:7	1699:7	4	int
FUNCTION_NAME	1699:11	1699:11	2	_WriteAsType
LEAF_NODE	1699:11	1699:11	3	_WriteAsType
PARAMETER_LIST	1699:23	1699:84	2	( TIFF * tif , uint64 strile_size , uint64 uncompressed_threshold )
LEAF_NODE	1699:23	1699:23	3	(
PARAMETER_DECL	1699:24	1699:30	3	TIFF * tif
TYPE	1699:24	1699:28	4	TIFF *
TYPE_NAME	1699:24	1699:24	5	TIFF
LEAF_NODE	1699:24	1699:24	6	TIFF
POINTER	1699:28	1699:28	5	*
LEAF_NODE	1699:28	1699:28	6	*
NAME	1699:30	1699:30	4	tif
LEAF_NODE	1699:30	1699:30	5	tif
LEAF_NODE	1699:33	1699:33	3	,
PARAMETER_DECL	1699:35	1699:42	3	uint64 strile_size
TYPE	1699:35	1699:35	4	uint64
TYPE_NAME	1699:35	1699:35	5	uint64
LEAF_NODE	1699:35	1699:35	6	uint64
NAME	1699:42	1699:42	4	strile_size
LEAF_NODE	1699:42	1699:42	5	strile_size
LEAF_NODE	1699:53	1699:53	3	,
PARAMETER_DECL	1699:55	1699:62	3	uint64 uncompressed_threshold
TYPE	1699:55	1699:55	4	uint64
TYPE_NAME	1699:55	1699:55	5	uint64
LEAF_NODE	1699:55	1699:55	6	uint64
NAME	1699:62	1699:62	4	uncompressed_threshold
LEAF_NODE	1699:62	1699:62	5	uncompressed_threshold
LEAF_NODE	1699:84	1699:84	3	)
LEAF_NODE	1700:0	1700:0	2	{
STATEMENTS	1701:4	1719:4	2	
SIMPLE_DECL	1701:4	1701:58	3	const uint16 compression ; compression = tif -> tif_dir . td_compression ;
VAR_DECL	1701:4	1701:17	4	const uint16 compression ; compression = tif -> tif_dir . td_compression
TYPE	1701:4	1701:4	5	const uint16
TYPE_NAME	1701:4	1701:10	6	const uint16
LEAF_NODE	1701:4	1701:4	7	const
LEAF_NODE	1701:10	1701:10	7	uint16
NAME	1701:17	1701:17	5	compression
LEAF_NODE	1701:17	1701:17	6	compression
LEAF_NODE	0:0	0:0	5	;
INIT	1701:17	1701:17	5	compression = tif -> tif_dir . td_compression
ASSIGN	1701:17	1701:31	6	compression = tif -> tif_dir . td_compression
LVAL	1701:17	1701:17	7	compression
NAME	1701:17	1701:17	8	compression
LEAF_NODE	1701:17	1701:17	9	compression
ASSIGN_OP	1701:29	1701:29	7	=
LEAF_NODE	1701:29	1701:29	8	=
RVAL	1701:31	1701:31	7	tif -> tif_dir . td_compression
FIELD	1701:31	1701:44	8	tif -> tif_dir . td_compression
LEAF_NODE	1701:31	1701:31	9	tif
LEAF_NODE	1701:34	1701:34	9	->
LEAF_NODE	1701:36	1701:36	9	tif_dir
LEAF_NODE	1701:43	1701:43	9	.
LEAF_NODE	1701:44	1701:44	9	td_compression
LEAF_NODE	1701:58	1701:58	4	;
SELECTION	1702:4	1703:4	3	
KEYWORD	1702:4	1702:4	4	if
LEAF_NODE	1702:4	1702:4	5	if
LEAF_NODE	1702:7	1702:7	4	(
CONDITION	1702:9	1702:9	4	compression == COMPRESSION_NONE
EXPR	1702:9	1702:24	5	compression == COMPRESSION_NONE
FIELD	1702:9	1702:9	6	compression
LEAF_NODE	1702:9	1702:9	7	compression
EQ_OPERATOR	1702:21	1702:21	6	==
LEAF_NODE	1702:21	1702:21	7	==
FIELD	1702:24	1702:24	6	COMPRESSION_NONE
LEAF_NODE	1702:24	1702:24	7	COMPRESSION_NONE
LEAF_NODE	1702:41	1702:41	4	)
STATEMENTS	1703:4	1705:4	4	
LEAF_NODE	1703:4	1703:4	5	{
STATEMENTS	1704:8	1704:8	5	
JUMP_STATEMENT	1704:8	1704:51	6	return strile_size > uncompressed_threshold ;
KEYWORD	1704:8	1704:8	7	return
LEAF_NODE	1704:8	1704:8	8	return
DESTINATION	1704:15	1704:15	7	strile_size > uncompressed_threshold
EXPR	1704:15	1704:29	8	strile_size > uncompressed_threshold
FIELD	1704:15	1704:15	9	strile_size
LEAF_NODE	1704:15	1704:15	10	strile_size
REL_OPERATOR	1704:27	1704:27	9	>
LEAF_NODE	1704:27	1704:27	10	>
FIELD	1704:29	1704:29	9	uncompressed_threshold
LEAF_NODE	1704:29	1704:29	10	uncompressed_threshold
LEAF_NODE	1704:51	1704:51	7	;
LEAF_NODE	1705:4	1705:4	5	}
SELECTION	1706:4	1706:9	3	
KEYWORD	1706:4	1706:4	4	else
LEAF_NODE	1706:4	1706:4	5	else
STATEMENTS	1706:9	1706:9	4	
SELECTION	1706:9	1713:4	5	
KEYWORD	1706:9	1706:9	6	if
LEAF_NODE	1706:9	1706:9	7	if
LEAF_NODE	1706:12	1706:12	6	(
CONDITION	1706:14	1706:14	6	compression == COMPRESSION_JPEG || compression == COMPRESSION_LZW || compression == COMPRESSION_ADOBE_DEFLATE || compression == COMPRESSION_LZMA || compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
EXPR	1706:14	1706:14	7	compression == COMPRESSION_JPEG || compression == COMPRESSION_LZW || compression == COMPRESSION_ADOBE_DEFLATE || compression == COMPRESSION_LZMA || compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
OR	1706:14	1707:14	8	compression == COMPRESSION_JPEG || compression == COMPRESSION_LZW || compression == COMPRESSION_ADOBE_DEFLATE || compression == COMPRESSION_LZMA || compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
EXPR	1706:14	1706:29	9	compression == COMPRESSION_JPEG
FIELD	1706:14	1706:14	10	compression
LEAF_NODE	1706:14	1706:14	11	compression
EQ_OPERATOR	1706:26	1706:26	10	==
LEAF_NODE	1706:26	1706:26	11	==
FIELD	1706:29	1706:29	10	COMPRESSION_JPEG
LEAF_NODE	1706:29	1706:29	11	COMPRESSION_JPEG
LEAF_NODE	1706:46	1706:46	9	||
EXPR	1707:14	1707:14	9	compression == COMPRESSION_LZW || compression == COMPRESSION_ADOBE_DEFLATE || compression == COMPRESSION_LZMA || compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
OR	1707:14	1708:14	10	compression == COMPRESSION_LZW || compression == COMPRESSION_ADOBE_DEFLATE || compression == COMPRESSION_LZMA || compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
EXPR	1707:14	1707:29	11	compression == COMPRESSION_LZW
FIELD	1707:14	1707:14	12	compression
LEAF_NODE	1707:14	1707:14	13	compression
EQ_OPERATOR	1707:26	1707:26	12	==
LEAF_NODE	1707:26	1707:26	13	==
FIELD	1707:29	1707:29	12	COMPRESSION_LZW
LEAF_NODE	1707:29	1707:29	13	COMPRESSION_LZW
LEAF_NODE	1707:45	1707:45	11	||
EXPR	1708:14	1708:14	11	compression == COMPRESSION_ADOBE_DEFLATE || compression == COMPRESSION_LZMA || compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
OR	1708:14	1709:14	12	compression == COMPRESSION_ADOBE_DEFLATE || compression == COMPRESSION_LZMA || compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
EXPR	1708:14	1708:29	13	compression == COMPRESSION_ADOBE_DEFLATE
FIELD	1708:14	1708:14	14	compression
LEAF_NODE	1708:14	1708:14	15	compression
EQ_OPERATOR	1708:26	1708:26	14	==
LEAF_NODE	1708:26	1708:26	15	==
FIELD	1708:29	1708:29	14	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	1708:29	1708:29	15	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	1708:55	1708:55	13	||
EXPR	1709:14	1709:14	13	compression == COMPRESSION_LZMA || compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
OR	1709:14	1710:14	14	compression == COMPRESSION_LZMA || compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
EXPR	1709:14	1709:29	15	compression == COMPRESSION_LZMA
FIELD	1709:14	1709:14	16	compression
LEAF_NODE	1709:14	1709:14	17	compression
EQ_OPERATOR	1709:26	1709:26	16	==
LEAF_NODE	1709:26	1709:26	17	==
FIELD	1709:29	1709:29	16	COMPRESSION_LZMA
LEAF_NODE	1709:29	1709:29	17	COMPRESSION_LZMA
LEAF_NODE	1709:46	1709:46	15	||
EXPR	1710:14	1710:14	15	compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
OR	1710:14	1711:14	16	compression == COMPRESSION_LERC || compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
EXPR	1710:14	1710:29	17	compression == COMPRESSION_LERC
FIELD	1710:14	1710:14	18	compression
LEAF_NODE	1710:14	1710:14	19	compression
EQ_OPERATOR	1710:26	1710:26	18	==
LEAF_NODE	1710:26	1710:26	19	==
FIELD	1710:29	1710:29	18	COMPRESSION_LERC
LEAF_NODE	1710:29	1710:29	19	COMPRESSION_LERC
LEAF_NODE	1710:46	1710:46	17	||
EXPR	1711:14	1711:14	17	compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
OR	1711:14	1712:14	18	compression == COMPRESSION_ZSTD || compression == COMPRESSION_WEBP
EXPR	1711:14	1711:29	19	compression == COMPRESSION_ZSTD
FIELD	1711:14	1711:14	20	compression
LEAF_NODE	1711:14	1711:14	21	compression
EQ_OPERATOR	1711:26	1711:26	20	==
LEAF_NODE	1711:26	1711:26	21	==
FIELD	1711:29	1711:29	20	COMPRESSION_ZSTD
LEAF_NODE	1711:29	1711:29	21	COMPRESSION_ZSTD
LEAF_NODE	1711:46	1711:46	19	||
EXPR	1712:14	1712:29	19	compression == COMPRESSION_WEBP
FIELD	1712:14	1712:14	20	compression
LEAF_NODE	1712:14	1712:14	21	compression
EQ_OPERATOR	1712:26	1712:26	20	==
LEAF_NODE	1712:26	1712:26	21	==
FIELD	1712:29	1712:29	20	COMPRESSION_WEBP
LEAF_NODE	1712:29	1712:29	21	COMPRESSION_WEBP
LEAF_NODE	1712:46	1712:46	6	)
STATEMENTS	1713:4	1718:4	6	
LEAF_NODE	1713:4	1713:4	7	{
STATEMENTS	1717:8	1717:8	7	
JUMP_STATEMENT	1717:8	1717:57	8	return strile_size >= uncompressed_threshold / 10 ;
KEYWORD	1717:8	1717:8	9	return
LEAF_NODE	1717:8	1717:8	10	return
DESTINATION	1717:15	1717:15	9	strile_size >= uncompressed_threshold / 10
EXPR	1717:15	1717:55	10	strile_size >= uncompressed_threshold / 10
FIELD	1717:15	1717:15	11	strile_size
LEAF_NODE	1717:15	1717:15	12	strile_size
REL_OPERATOR	1717:27	1717:27	11	>=
LEAF_NODE	1717:27	1717:27	12	>=
FIELD	1717:30	1717:30	11	uncompressed_threshold
LEAF_NODE	1717:30	1717:30	12	uncompressed_threshold
LEAF_NODE	1717:53	1717:53	11	/
FIELD	1717:55	1717:55	11	10
LEAF_NODE	1717:55	1717:55	12	10
LEAF_NODE	1717:57	1717:57	9	;
LEAF_NODE	1718:4	1718:4	7	}
JUMP_STATEMENT	1719:4	1719:12	3	return 1 ;
KEYWORD	1719:4	1719:4	4	return
LEAF_NODE	1719:4	1719:4	5	return
DESTINATION	1719:11	1719:11	4	1
EXPR	1719:11	1719:11	5	1
FIELD	1719:11	1719:11	6	1
LEAF_NODE	1719:11	1719:11	7	1
LEAF_NODE	1719:12	1719:12	4	;
LEAF_NODE	1720:0	1720:0	2	}
FUNCTION_DEF	1722:0	1725:0	1	
RETURN_TYPE	1722:0	1722:7	2	static int
LEAF_NODE	1722:0	1722:0	3	static
TYPE_NAME	1722:7	1722:7	3	int
LEAF_NODE	1722:7	1722:7	4	int
FUNCTION_NAME	1722:11	1722:11	2	WriteAsLong8
LEAF_NODE	1722:11	1722:11	3	WriteAsLong8
PARAMETER_LIST	1722:23	1722:53	2	( TIFF * tif , uint64 strile_size )
LEAF_NODE	1722:23	1722:23	3	(
PARAMETER_DECL	1722:24	1722:30	3	TIFF * tif
TYPE	1722:24	1722:28	4	TIFF *
TYPE_NAME	1722:24	1722:24	5	TIFF
LEAF_NODE	1722:24	1722:24	6	TIFF
POINTER	1722:28	1722:28	5	*
LEAF_NODE	1722:28	1722:28	6	*
NAME	1722:30	1722:30	4	tif
LEAF_NODE	1722:30	1722:30	5	tif
LEAF_NODE	1722:33	1722:33	3	,
PARAMETER_DECL	1722:35	1722:42	3	uint64 strile_size
TYPE	1722:35	1722:35	4	uint64
TYPE_NAME	1722:35	1722:35	5	uint64
LEAF_NODE	1722:35	1722:35	6	uint64
NAME	1722:42	1722:42	4	strile_size
LEAF_NODE	1722:42	1722:42	5	strile_size
LEAF_NODE	1722:53	1722:53	3	)
LEAF_NODE	1723:0	1723:0	2	{
STATEMENTS	1724:4	1724:4	2	
JUMP_STATEMENT	1724:4	1724:54	3	return _WriteAsType ( tif , strile_size , 0xFFFFFFFFU ) ;
KEYWORD	1724:4	1724:4	4	return
LEAF_NODE	1724:4	1724:4	5	return
DESTINATION	1724:11	1724:11	4	_WriteAsType ( tif , strile_size , 0xFFFFFFFFU )
EXPR	1724:11	1724:11	5	_WriteAsType ( tif , strile_size , 0xFFFFFFFFU )
FUNCTION_CALL	1724:11	1724:53	6	_WriteAsType ( tif , strile_size , 0xFFFFFFFFU )
CALLEE	1724:11	1724:11	7	_WriteAsType
LEAF_NODE	1724:11	1724:11	8	_WriteAsType
LEAF_NODE	1724:23	1724:23	7	(
ARGUMENT	1724:24	1724:24	7	tif
FIELD	1724:24	1724:24	8	tif
LEAF_NODE	1724:24	1724:24	9	tif
LEAF_NODE	1724:27	1724:27	7	,
ARGUMENT	1724:29	1724:29	7	strile_size
FIELD	1724:29	1724:29	8	strile_size
LEAF_NODE	1724:29	1724:29	9	strile_size
LEAF_NODE	1724:40	1724:40	7	,
ARGUMENT	1724:42	1724:42	7	0xFFFFFFFFU
FIELD	1724:42	1724:42	8	0xFFFFFFFFU
LEAF_NODE	1724:42	1724:42	9	0xFFFFFFFFU
LEAF_NODE	1724:53	1724:53	7	)
LEAF_NODE	1724:54	1724:54	4	;
LEAF_NODE	1725:0	1725:0	2	}
FUNCTION_DEF	1727:0	1730:0	1	
RETURN_TYPE	1727:0	1727:7	2	static int
LEAF_NODE	1727:0	1727:0	3	static
TYPE_NAME	1727:7	1727:7	3	int
LEAF_NODE	1727:7	1727:7	4	int
FUNCTION_NAME	1727:11	1727:11	2	WriteAsLong4
LEAF_NODE	1727:11	1727:11	3	WriteAsLong4
PARAMETER_LIST	1727:23	1727:53	2	( TIFF * tif , uint64 strile_size )
LEAF_NODE	1727:23	1727:23	3	(
PARAMETER_DECL	1727:24	1727:30	3	TIFF * tif
TYPE	1727:24	1727:28	4	TIFF *
TYPE_NAME	1727:24	1727:24	5	TIFF
LEAF_NODE	1727:24	1727:24	6	TIFF
POINTER	1727:28	1727:28	5	*
LEAF_NODE	1727:28	1727:28	6	*
NAME	1727:30	1727:30	4	tif
LEAF_NODE	1727:30	1727:30	5	tif
LEAF_NODE	1727:33	1727:33	3	,
PARAMETER_DECL	1727:35	1727:42	3	uint64 strile_size
TYPE	1727:35	1727:35	4	uint64
TYPE_NAME	1727:35	1727:35	5	uint64
LEAF_NODE	1727:35	1727:35	6	uint64
NAME	1727:42	1727:42	4	strile_size
LEAF_NODE	1727:42	1727:42	5	strile_size
LEAF_NODE	1727:53	1727:53	3	)
LEAF_NODE	1728:0	1728:0	2	{
STATEMENTS	1729:4	1729:4	2	
JUMP_STATEMENT	1729:4	1729:50	3	return _WriteAsType ( tif , strile_size , 0xFFFFU ) ;
KEYWORD	1729:4	1729:4	4	return
LEAF_NODE	1729:4	1729:4	5	return
DESTINATION	1729:11	1729:11	4	_WriteAsType ( tif , strile_size , 0xFFFFU )
EXPR	1729:11	1729:11	5	_WriteAsType ( tif , strile_size , 0xFFFFU )
FUNCTION_CALL	1729:11	1729:49	6	_WriteAsType ( tif , strile_size , 0xFFFFU )
CALLEE	1729:11	1729:11	7	_WriteAsType
LEAF_NODE	1729:11	1729:11	8	_WriteAsType
LEAF_NODE	1729:23	1729:23	7	(
ARGUMENT	1729:24	1729:24	7	tif
FIELD	1729:24	1729:24	8	tif
LEAF_NODE	1729:24	1729:24	9	tif
LEAF_NODE	1729:27	1729:27	7	,
ARGUMENT	1729:29	1729:29	7	strile_size
FIELD	1729:29	1729:29	8	strile_size
LEAF_NODE	1729:29	1729:29	9	strile_size
LEAF_NODE	1729:40	1729:40	7	,
ARGUMENT	1729:42	1729:42	7	0xFFFFU
FIELD	1729:42	1729:42	8	0xFFFFU
LEAF_NODE	1729:42	1729:42	9	0xFFFFU
LEAF_NODE	1729:49	1729:49	7	)
LEAF_NODE	1729:50	1729:50	4	;
LEAF_NODE	1730:0	1730:0	2	}
FUNCTION_DEF	1739:0	1854:0	1	
RETURN_TYPE	1739:0	1739:7	2	static int
LEAF_NODE	1739:0	1739:0	3	static
TYPE_NAME	1739:7	1739:7	3	int
LEAF_NODE	1739:7	1739:7	4	int
FUNCTION_NAME	1740:0	1740:0	2	TIFFWriteDirectoryTagLongLong8Array
LEAF_NODE	1740:0	1740:0	3	TIFFWriteDirectoryTagLongLong8Array
PARAMETER_LIST	1740:35	1740:119	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint64 * value )
LEAF_NODE	1740:35	1740:35	3	(
PARAMETER_DECL	1740:36	1740:42	3	TIFF * tif
TYPE	1740:36	1740:40	4	TIFF *
TYPE_NAME	1740:36	1740:36	5	TIFF
LEAF_NODE	1740:36	1740:36	6	TIFF
POINTER	1740:40	1740:40	5	*
LEAF_NODE	1740:40	1740:40	6	*
NAME	1740:42	1740:42	4	tif
LEAF_NODE	1740:42	1740:42	5	tif
LEAF_NODE	1740:45	1740:45	3	,
PARAMETER_DECL	1740:47	1740:55	3	uint32 * ndir
TYPE	1740:47	1740:53	4	uint32 *
TYPE_NAME	1740:47	1740:47	5	uint32
LEAF_NODE	1740:47	1740:47	6	uint32
POINTER	1740:53	1740:53	5	*
LEAF_NODE	1740:53	1740:53	6	*
NAME	1740:55	1740:55	4	ndir
LEAF_NODE	1740:55	1740:55	5	ndir
LEAF_NODE	1740:59	1740:59	3	,
PARAMETER_DECL	1740:61	1740:75	3	TIFFDirEntry * dir
TYPE	1740:61	1740:73	4	TIFFDirEntry *
TYPE_NAME	1740:61	1740:61	5	TIFFDirEntry
LEAF_NODE	1740:61	1740:61	6	TIFFDirEntry
POINTER	1740:73	1740:73	5	*
LEAF_NODE	1740:73	1740:73	6	*
NAME	1740:75	1740:75	4	dir
LEAF_NODE	1740:75	1740:75	5	dir
LEAF_NODE	1740:78	1740:78	3	,
PARAMETER_DECL	1740:80	1740:87	3	uint16 tag
TYPE	1740:80	1740:80	4	uint16
TYPE_NAME	1740:80	1740:80	5	uint16
LEAF_NODE	1740:80	1740:80	6	uint16
NAME	1740:87	1740:87	4	tag
LEAF_NODE	1740:87	1740:87	5	tag
LEAF_NODE	1740:90	1740:90	3	,
PARAMETER_DECL	1740:92	1740:99	3	uint32 count
TYPE	1740:92	1740:92	4	uint32
TYPE_NAME	1740:92	1740:92	5	uint32
LEAF_NODE	1740:92	1740:92	6	uint32
NAME	1740:99	1740:99	4	count
LEAF_NODE	1740:99	1740:99	5	count
LEAF_NODE	1740:104	1740:104	3	,
PARAMETER_DECL	1740:106	1740:114	3	uint64 * value
TYPE	1740:106	1740:112	4	uint64 *
TYPE_NAME	1740:106	1740:106	5	uint64
LEAF_NODE	1740:106	1740:106	6	uint64
POINTER	1740:112	1740:112	5	*
LEAF_NODE	1740:112	1740:112	6	*
NAME	1740:114	1740:114	4	value
LEAF_NODE	1740:114	1740:114	5	value
LEAF_NODE	1740:119	1740:119	3	)
LEAF_NODE	1741:0	1741:0	2	{
STATEMENTS	1742:4	1853:13	2	
LEAF_NODE	1742:4	1742:4	3	static
SIMPLE_DECL	1742:11	1742:70	3	const char [ ] module ; module = "TIFFWriteDirectoryTagLongLong8Array" ;
VAR_DECL	1742:11	1742:22	4	const char [ ] module ; module = "TIFFWriteDirectoryTagLongLong8Array"
TYPE	1742:11	1742:28	5	const char [ ]
TYPE_NAME	1742:11	1742:17	6	const char
LEAF_NODE	1742:11	1742:11	7	const
LEAF_NODE	1742:17	1742:17	7	char
TYPE_SUFFIX	1742:28	1742:29	6	[ ]
LEAF_NODE	1742:28	1742:28	7	[
LEAF_NODE	1742:29	1742:29	7	]
NAME	1742:22	1742:22	5	module
LEAF_NODE	1742:22	1742:22	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1742:22	1742:22	5	module = "TIFFWriteDirectoryTagLongLong8Array"
ASSIGN	1742:22	1742:33	6	module = "TIFFWriteDirectoryTagLongLong8Array"
LVAL	1742:22	1742:22	7	module
NAME	1742:22	1742:22	8	module
LEAF_NODE	1742:22	1742:22	9	module
ASSIGN_OP	1742:31	1742:31	7	=
LEAF_NODE	1742:31	1742:31	8	=
RVAL	1742:33	1742:33	7	"TIFFWriteDirectoryTagLongLong8Array"
FIELD	1742:33	1742:33	8	"TIFFWriteDirectoryTagLongLong8Array"
LEAF_NODE	1742:33	1742:33	9	"TIFFWriteDirectoryTagLongLong8Array"
LEAF_NODE	1742:70	1742:70	4	;
SIMPLE_DECL	1743:4	1743:9	3	int o ;
VAR_DECL	1743:4	1743:8	4	int o
TYPE	1743:4	1743:4	5	int
TYPE_NAME	1743:4	1743:4	6	int
LEAF_NODE	1743:4	1743:4	7	int
NAME	1743:8	1743:8	5	o
LEAF_NODE	1743:8	1743:8	6	o
LEAF_NODE	1743:9	1743:9	4	;
SIMPLE_DECL	1744:4	1744:21	3	int write_aslong4 ;
VAR_DECL	1744:4	1744:8	4	int write_aslong4
TYPE	1744:4	1744:4	5	int
TYPE_NAME	1744:4	1744:4	6	int
LEAF_NODE	1744:4	1744:4	7	int
NAME	1744:8	1744:8	5	write_aslong4
LEAF_NODE	1744:8	1744:8	6	write_aslong4
LEAF_NODE	1744:21	1744:21	4	;
SELECTION	1747:4	1748:4	3	
KEYWORD	1747:4	1747:4	4	if
LEAF_NODE	1747:4	1747:4	5	if
LEAF_NODE	1747:7	1747:7	4	(
CONDITION	1747:8	1747:8	4	dir == NULL
EXPR	1747:8	1747:13	5	dir == NULL
FIELD	1747:8	1747:8	6	dir
LEAF_NODE	1747:8	1747:8	7	dir
EQ_OPERATOR	1747:11	1747:11	6	==
LEAF_NODE	1747:11	1747:11	7	==
FIELD	1747:13	1747:13	6	NULL
LEAF_NODE	1747:13	1747:13	7	NULL
LEAF_NODE	1747:17	1747:17	4	)
STATEMENTS	1748:4	1751:4	4	
LEAF_NODE	1748:4	1748:4	5	{
STATEMENTS	1749:8	1750:8	5	
EXPR_STATEMENT	1749:8	1749:17	6	( * ndir ) ++ ;
EXPR	1749:8	1749:15	7	( * ndir ) ++
LEAF_NODE	1749:8	1749:8	8	(
UNARY_EXPR	1749:9	1749:10	8	* ndir
UNARY_OPERATOR	1749:9	1749:9	9	*
LEAF_NODE	1749:9	1749:9	10	*
FIELD	1749:10	1749:10	9	ndir
LEAF_NODE	1749:10	1749:10	10	ndir
LEAF_NODE	1749:14	1749:14	8	)
LEAF_NODE	1749:15	1749:15	8	++
LEAF_NODE	1749:17	1749:17	7	;
JUMP_STATEMENT	1750:8	1750:17	6	return ( 1 ) ;
KEYWORD	1750:8	1750:8	7	return
LEAF_NODE	1750:8	1750:8	8	return
DESTINATION	1750:14	1750:14	7	( 1 )
EXPR	1750:14	1750:16	8	( 1 )
LEAF_NODE	1750:14	1750:14	9	(
FIELD	1750:15	1750:15	9	1
LEAF_NODE	1750:15	1750:15	10	1
LEAF_NODE	1750:16	1750:16	9	)
LEAF_NODE	1750:17	1750:17	7	;
LEAF_NODE	1751:4	1751:4	5	}
SELECTION	1753:4	1754:4	3	
KEYWORD	1753:4	1753:4	4	if
LEAF_NODE	1753:4	1753:4	5	if
LEAF_NODE	1753:6	1753:6	4	(
CONDITION	1753:8	1753:8	4	tif -> tif_dir . td_deferstrilearraywriting
EXPR	1753:8	1753:8	5	tif -> tif_dir . td_deferstrilearraywriting
FIELD	1753:8	1753:21	6	tif -> tif_dir . td_deferstrilearraywriting
LEAF_NODE	1753:8	1753:8	7	tif
LEAF_NODE	1753:11	1753:11	7	->
LEAF_NODE	1753:13	1753:13	7	tif_dir
LEAF_NODE	1753:20	1753:20	7	.
LEAF_NODE	1753:21	1753:21	7	td_deferstrilearraywriting
LEAF_NODE	1753:48	1753:48	4	)
STATEMENTS	1754:4	1756:4	4	
LEAF_NODE	1754:4	1754:4	5	{
STATEMENTS	1755:8	1755:8	5	
JUMP_STATEMENT	1755:8	1755:86	6	return TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_NOTYPE , 0 , 0 , NULL ) ;
KEYWORD	1755:8	1755:8	7	return
LEAF_NODE	1755:8	1755:8	8	return
DESTINATION	1755:15	1755:15	7	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_NOTYPE , 0 , 0 , NULL )
EXPR	1755:15	1755:15	8	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_NOTYPE , 0 , 0 , NULL )
FUNCTION_CALL	1755:15	1755:85	9	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_NOTYPE , 0 , 0 , NULL )
CALLEE	1755:15	1755:15	10	TIFFWriteDirectoryTagData
LEAF_NODE	1755:15	1755:15	11	TIFFWriteDirectoryTagData
LEAF_NODE	1755:40	1755:40	10	(
ARGUMENT	1755:41	1755:41	10	tif
FIELD	1755:41	1755:41	11	tif
LEAF_NODE	1755:41	1755:41	12	tif
LEAF_NODE	1755:44	1755:44	10	,
ARGUMENT	1755:46	1755:46	10	ndir
FIELD	1755:46	1755:46	11	ndir
LEAF_NODE	1755:46	1755:46	12	ndir
LEAF_NODE	1755:50	1755:50	10	,
ARGUMENT	1755:52	1755:52	10	dir
FIELD	1755:52	1755:52	11	dir
LEAF_NODE	1755:52	1755:52	12	dir
LEAF_NODE	1755:55	1755:55	10	,
ARGUMENT	1755:57	1755:57	10	tag
FIELD	1755:57	1755:57	11	tag
LEAF_NODE	1755:57	1755:57	12	tag
LEAF_NODE	1755:60	1755:60	10	,
ARGUMENT	1755:62	1755:62	10	TIFF_NOTYPE
FIELD	1755:62	1755:62	11	TIFF_NOTYPE
LEAF_NODE	1755:62	1755:62	12	TIFF_NOTYPE
LEAF_NODE	1755:73	1755:73	10	,
ARGUMENT	1755:75	1755:75	10	0
FIELD	1755:75	1755:75	11	0
LEAF_NODE	1755:75	1755:75	12	0
LEAF_NODE	1755:76	1755:76	10	,
ARGUMENT	1755:78	1755:78	10	0
FIELD	1755:78	1755:78	11	0
LEAF_NODE	1755:78	1755:78	12	0
LEAF_NODE	1755:79	1755:79	10	,
ARGUMENT	1755:81	1755:81	10	NULL
FIELD	1755:81	1755:81	11	NULL
LEAF_NODE	1755:81	1755:81	12	NULL
LEAF_NODE	1755:85	1755:85	10	)
LEAF_NODE	1755:86	1755:86	7	;
LEAF_NODE	1756:4	1756:4	5	}
SELECTION	1758:4	1759:4	3	
KEYWORD	1758:4	1758:4	4	if
LEAF_NODE	1758:4	1758:4	5	if
LEAF_NODE	1758:6	1758:6	4	(
CONDITION	1758:8	1758:8	4	tif -> tif_flags & TIFF_BIGTIFF
EXPR	1758:8	1758:23	5	tif -> tif_flags & TIFF_BIGTIFF
FIELD	1758:8	1758:13	6	tif -> tif_flags
LEAF_NODE	1758:8	1758:8	7	tif
LEAF_NODE	1758:11	1758:11	7	->
LEAF_NODE	1758:13	1758:13	7	tif_flags
LEAF_NODE	1758:22	1758:22	6	&
FIELD	1758:23	1758:23	6	TIFF_BIGTIFF
LEAF_NODE	1758:23	1758:23	7	TIFF_BIGTIFF
LEAF_NODE	1758:36	1758:36	4	)
STATEMENTS	1759:4	1779:4	4	
LEAF_NODE	1759:4	1759:4	5	{
STATEMENTS	1760:8	1774:8	5	
SIMPLE_DECL	1760:8	1760:29	6	int write_aslong8 ; write_aslong8 = 1 ;
VAR_DECL	1760:8	1760:12	7	int write_aslong8 ; write_aslong8 = 1
TYPE	1760:8	1760:8	8	int
TYPE_NAME	1760:8	1760:8	9	int
LEAF_NODE	1760:8	1760:8	10	int
NAME	1760:12	1760:12	8	write_aslong8
LEAF_NODE	1760:12	1760:12	9	write_aslong8
LEAF_NODE	0:0	0:0	8	;
INIT	1760:12	1760:12	8	write_aslong8 = 1
ASSIGN	1760:12	1760:28	9	write_aslong8 = 1
LVAL	1760:12	1760:12	10	write_aslong8
NAME	1760:12	1760:12	11	write_aslong8
LEAF_NODE	1760:12	1760:12	12	write_aslong8
ASSIGN_OP	1760:26	1760:26	10	=
LEAF_NODE	1760:26	1760:26	11	=
RVAL	1760:28	1760:28	10	1
FIELD	1760:28	1760:28	11	1
LEAF_NODE	1760:28	1760:28	12	1
LEAF_NODE	1760:29	1760:29	7	;
SELECTION	1766:8	1767:8	6	
KEYWORD	1766:8	1766:8	7	if
LEAF_NODE	1766:8	1766:8	8	if
LEAF_NODE	1766:10	1766:10	7	(
CONDITION	1766:12	1766:12	7	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
EXPR	1766:12	1766:12	8	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
AND	1766:12	1766:25	9	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
EXPR	1766:12	1766:20	10	count > 1
FIELD	1766:12	1766:12	11	count
LEAF_NODE	1766:12	1766:12	12	count
REL_OPERATOR	1766:18	1766:18	11	>
LEAF_NODE	1766:18	1766:18	12	>
FIELD	1766:20	1766:20	11	1
LEAF_NODE	1766:20	1766:20	12	1
LEAF_NODE	1766:22	1766:22	10	&&
EXPR	1766:25	1766:32	10	tag == TIFFTAG_STRIPBYTECOUNTS
FIELD	1766:25	1766:25	11	tag
LEAF_NODE	1766:25	1766:25	12	tag
EQ_OPERATOR	1766:29	1766:29	11	==
LEAF_NODE	1766:29	1766:29	12	==
FIELD	1766:32	1766:32	11	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1766:32	1766:32	12	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1766:56	1766:56	7	)
STATEMENTS	1767:8	1769:8	7	
LEAF_NODE	1767:8	1767:8	8	{
STATEMENTS	1768:12	1768:12	8	
EXPR_STATEMENT	1768:12	1768:67	9	write_aslong8 = WriteAsLong8 ( tif , TIFFStripSize64 ( tif ) ) ;
EXPR	1768:12	1768:12	10	write_aslong8 = WriteAsLong8 ( tif , TIFFStripSize64 ( tif ) )
ASSIGN	1768:12	1768:28	11	write_aslong8 = WriteAsLong8 ( tif , TIFFStripSize64 ( tif ) )
LVAL	1768:12	1768:12	12	write_aslong8
FIELD	1768:12	1768:12	13	write_aslong8
LEAF_NODE	1768:12	1768:12	14	write_aslong8
ASSIGN_OP	1768:26	1768:26	12	=
LEAF_NODE	1768:26	1768:26	13	=
RVAL	1768:28	1768:28	12	WriteAsLong8 ( tif , TIFFStripSize64 ( tif ) )
FUNCTION_CALL	1768:28	1768:66	13	WriteAsLong8 ( tif , TIFFStripSize64 ( tif ) )
CALLEE	1768:28	1768:28	14	WriteAsLong8
LEAF_NODE	1768:28	1768:28	15	WriteAsLong8
LEAF_NODE	1768:40	1768:40	14	(
ARGUMENT	1768:41	1768:41	14	tif
FIELD	1768:41	1768:41	15	tif
LEAF_NODE	1768:41	1768:41	16	tif
LEAF_NODE	1768:44	1768:44	14	,
ARGUMENT	1768:46	1768:46	14	TIFFStripSize64 ( tif )
FUNCTION_CALL	1768:46	1768:65	15	TIFFStripSize64 ( tif )
CALLEE	1768:46	1768:46	16	TIFFStripSize64
LEAF_NODE	1768:46	1768:46	17	TIFFStripSize64
LEAF_NODE	1768:61	1768:61	16	(
ARGUMENT	1768:62	1768:62	16	tif
FIELD	1768:62	1768:62	17	tif
LEAF_NODE	1768:62	1768:62	18	tif
LEAF_NODE	1768:65	1768:65	16	)
LEAF_NODE	1768:66	1768:66	14	)
LEAF_NODE	1768:67	1768:67	10	;
LEAF_NODE	1769:8	1769:8	8	}
SELECTION	1770:8	1770:13	6	
KEYWORD	1770:8	1770:8	7	else
LEAF_NODE	1770:8	1770:8	8	else
STATEMENTS	1770:13	1770:13	7	
SELECTION	1770:13	1771:8	8	
KEYWORD	1770:13	1770:13	9	if
LEAF_NODE	1770:13	1770:13	10	if
LEAF_NODE	1770:15	1770:15	9	(
CONDITION	1770:17	1770:17	9	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
EXPR	1770:17	1770:17	10	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
AND	1770:17	1770:30	11	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
EXPR	1770:17	1770:25	12	count > 1
FIELD	1770:17	1770:17	13	count
LEAF_NODE	1770:17	1770:17	14	count
REL_OPERATOR	1770:23	1770:23	13	>
LEAF_NODE	1770:23	1770:23	14	>
FIELD	1770:25	1770:25	13	1
LEAF_NODE	1770:25	1770:25	14	1
LEAF_NODE	1770:27	1770:27	12	&&
EXPR	1770:30	1770:37	12	tag == TIFFTAG_TILEBYTECOUNTS
FIELD	1770:30	1770:30	13	tag
LEAF_NODE	1770:30	1770:30	14	tag
EQ_OPERATOR	1770:34	1770:34	13	==
LEAF_NODE	1770:34	1770:34	14	==
FIELD	1770:37	1770:37	13	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	1770:37	1770:37	14	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	1770:60	1770:60	9	)
STATEMENTS	1771:8	1773:8	9	
LEAF_NODE	1771:8	1771:8	10	{
STATEMENTS	1772:12	1772:12	10	
EXPR_STATEMENT	1772:12	1772:66	11	write_aslong8 = WriteAsLong8 ( tif , TIFFTileSize64 ( tif ) ) ;
EXPR	1772:12	1772:12	12	write_aslong8 = WriteAsLong8 ( tif , TIFFTileSize64 ( tif ) )
ASSIGN	1772:12	1772:28	13	write_aslong8 = WriteAsLong8 ( tif , TIFFTileSize64 ( tif ) )
LVAL	1772:12	1772:12	14	write_aslong8
FIELD	1772:12	1772:12	15	write_aslong8
LEAF_NODE	1772:12	1772:12	16	write_aslong8
ASSIGN_OP	1772:26	1772:26	14	=
LEAF_NODE	1772:26	1772:26	15	=
RVAL	1772:28	1772:28	14	WriteAsLong8 ( tif , TIFFTileSize64 ( tif ) )
FUNCTION_CALL	1772:28	1772:65	15	WriteAsLong8 ( tif , TIFFTileSize64 ( tif ) )
CALLEE	1772:28	1772:28	16	WriteAsLong8
LEAF_NODE	1772:28	1772:28	17	WriteAsLong8
LEAF_NODE	1772:40	1772:40	16	(
ARGUMENT	1772:41	1772:41	16	tif
FIELD	1772:41	1772:41	17	tif
LEAF_NODE	1772:41	1772:41	18	tif
LEAF_NODE	1772:44	1772:44	16	,
ARGUMENT	1772:46	1772:46	16	TIFFTileSize64 ( tif )
FUNCTION_CALL	1772:46	1772:64	17	TIFFTileSize64 ( tif )
CALLEE	1772:46	1772:46	18	TIFFTileSize64
LEAF_NODE	1772:46	1772:46	19	TIFFTileSize64
LEAF_NODE	1772:60	1772:60	18	(
ARGUMENT	1772:61	1772:61	18	tif
FIELD	1772:61	1772:61	19	tif
LEAF_NODE	1772:61	1772:61	20	tif
LEAF_NODE	1772:64	1772:64	18	)
LEAF_NODE	1772:65	1772:65	16	)
LEAF_NODE	1772:66	1772:66	12	;
LEAF_NODE	1773:8	1773:8	10	}
SELECTION	1774:8	1775:8	6	
KEYWORD	1774:8	1774:8	7	if
LEAF_NODE	1774:8	1774:8	8	if
LEAF_NODE	1774:10	1774:10	7	(
CONDITION	1774:12	1774:12	7	write_aslong8
EXPR	1774:12	1774:12	8	write_aslong8
FIELD	1774:12	1774:12	9	write_aslong8
LEAF_NODE	1774:12	1774:12	10	write_aslong8
LEAF_NODE	1774:26	1774:26	7	)
STATEMENTS	1775:8	1778:8	7	
LEAF_NODE	1775:8	1775:8	8	{
STATEMENTS	1776:12	1776:12	8	
JUMP_STATEMENT	1776:12	1777:72	9	return TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value ) ;
KEYWORD	1776:12	1776:12	10	return
LEAF_NODE	1776:12	1776:12	11	return
DESTINATION	1776:19	1776:19	10	TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value )
EXPR	1776:19	1776:19	11	TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value )
FUNCTION_CALL	1776:19	1777:71	12	TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value )
CALLEE	1776:19	1776:19	13	TIFFWriteDirectoryTagCheckedLong8Array
LEAF_NODE	1776:19	1776:19	14	TIFFWriteDirectoryTagCheckedLong8Array
LEAF_NODE	1776:57	1776:57	13	(
ARGUMENT	1776:58	1776:58	13	tif
FIELD	1776:58	1776:58	14	tif
LEAF_NODE	1776:58	1776:58	15	tif
LEAF_NODE	1776:61	1776:61	13	,
ARGUMENT	1776:62	1776:62	13	ndir
FIELD	1776:62	1776:62	14	ndir
LEAF_NODE	1776:62	1776:62	15	ndir
LEAF_NODE	1776:66	1776:66	13	,
ARGUMENT	1776:67	1776:67	13	dir
FIELD	1776:67	1776:67	14	dir
LEAF_NODE	1776:67	1776:67	15	dir
LEAF_NODE	1776:70	1776:70	13	,
ARGUMENT	1777:56	1777:56	13	tag
FIELD	1777:56	1777:56	14	tag
LEAF_NODE	1777:56	1777:56	15	tag
LEAF_NODE	1777:59	1777:59	13	,
ARGUMENT	1777:60	1777:60	13	count
FIELD	1777:60	1777:60	14	count
LEAF_NODE	1777:60	1777:60	15	count
LEAF_NODE	1777:65	1777:65	13	,
ARGUMENT	1777:66	1777:66	13	value
FIELD	1777:66	1777:66	14	value
LEAF_NODE	1777:66	1777:66	15	value
LEAF_NODE	1777:71	1777:71	13	)
LEAF_NODE	1777:72	1777:72	10	;
LEAF_NODE	1778:8	1778:8	8	}
LEAF_NODE	1779:4	1779:4	5	}
EXPR_STATEMENT	1781:4	1781:21	3	write_aslong4 = 1 ;
EXPR	1781:4	1781:4	4	write_aslong4 = 1
ASSIGN	1781:4	1781:20	5	write_aslong4 = 1
LVAL	1781:4	1781:4	6	write_aslong4
FIELD	1781:4	1781:4	7	write_aslong4
LEAF_NODE	1781:4	1781:4	8	write_aslong4
ASSIGN_OP	1781:18	1781:18	6	=
LEAF_NODE	1781:18	1781:18	7	=
RVAL	1781:20	1781:20	6	1
FIELD	1781:20	1781:20	7	1
LEAF_NODE	1781:20	1781:20	8	1
LEAF_NODE	1781:21	1781:21	4	;
SELECTION	1782:4	1783:4	3	
KEYWORD	1782:4	1782:4	4	if
LEAF_NODE	1782:4	1782:4	5	if
LEAF_NODE	1782:6	1782:6	4	(
CONDITION	1782:8	1782:8	4	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
EXPR	1782:8	1782:8	5	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
AND	1782:8	1782:21	6	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
EXPR	1782:8	1782:16	7	count > 1
FIELD	1782:8	1782:8	8	count
LEAF_NODE	1782:8	1782:8	9	count
REL_OPERATOR	1782:14	1782:14	8	>
LEAF_NODE	1782:14	1782:14	9	>
FIELD	1782:16	1782:16	8	1
LEAF_NODE	1782:16	1782:16	9	1
LEAF_NODE	1782:18	1782:18	7	&&
EXPR	1782:21	1782:28	7	tag == TIFFTAG_STRIPBYTECOUNTS
FIELD	1782:21	1782:21	8	tag
LEAF_NODE	1782:21	1782:21	9	tag
EQ_OPERATOR	1782:25	1782:25	8	==
LEAF_NODE	1782:25	1782:25	9	==
FIELD	1782:28	1782:28	8	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1782:28	1782:28	9	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1782:52	1782:52	4	)
STATEMENTS	1783:4	1785:4	4	
LEAF_NODE	1783:4	1783:4	5	{
STATEMENTS	1784:8	1784:8	5	
EXPR_STATEMENT	1784:8	1784:63	6	write_aslong4 = WriteAsLong4 ( tif , TIFFStripSize64 ( tif ) ) ;
EXPR	1784:8	1784:8	7	write_aslong4 = WriteAsLong4 ( tif , TIFFStripSize64 ( tif ) )
ASSIGN	1784:8	1784:24	8	write_aslong4 = WriteAsLong4 ( tif , TIFFStripSize64 ( tif ) )
LVAL	1784:8	1784:8	9	write_aslong4
FIELD	1784:8	1784:8	10	write_aslong4
LEAF_NODE	1784:8	1784:8	11	write_aslong4
ASSIGN_OP	1784:22	1784:22	9	=
LEAF_NODE	1784:22	1784:22	10	=
RVAL	1784:24	1784:24	9	WriteAsLong4 ( tif , TIFFStripSize64 ( tif ) )
FUNCTION_CALL	1784:24	1784:62	10	WriteAsLong4 ( tif , TIFFStripSize64 ( tif ) )
CALLEE	1784:24	1784:24	11	WriteAsLong4
LEAF_NODE	1784:24	1784:24	12	WriteAsLong4
LEAF_NODE	1784:36	1784:36	11	(
ARGUMENT	1784:37	1784:37	11	tif
FIELD	1784:37	1784:37	12	tif
LEAF_NODE	1784:37	1784:37	13	tif
LEAF_NODE	1784:40	1784:40	11	,
ARGUMENT	1784:42	1784:42	11	TIFFStripSize64 ( tif )
FUNCTION_CALL	1784:42	1784:61	12	TIFFStripSize64 ( tif )
CALLEE	1784:42	1784:42	13	TIFFStripSize64
LEAF_NODE	1784:42	1784:42	14	TIFFStripSize64
LEAF_NODE	1784:57	1784:57	13	(
ARGUMENT	1784:58	1784:58	13	tif
FIELD	1784:58	1784:58	14	tif
LEAF_NODE	1784:58	1784:58	15	tif
LEAF_NODE	1784:61	1784:61	13	)
LEAF_NODE	1784:62	1784:62	11	)
LEAF_NODE	1784:63	1784:63	7	;
LEAF_NODE	1785:4	1785:4	5	}
SELECTION	1786:4	1786:9	3	
KEYWORD	1786:4	1786:4	4	else
LEAF_NODE	1786:4	1786:4	5	else
STATEMENTS	1786:9	1786:9	4	
SELECTION	1786:9	1787:4	5	
KEYWORD	1786:9	1786:9	6	if
LEAF_NODE	1786:9	1786:9	7	if
LEAF_NODE	1786:11	1786:11	6	(
CONDITION	1786:13	1786:13	6	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
EXPR	1786:13	1786:13	7	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
AND	1786:13	1786:26	8	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
EXPR	1786:13	1786:21	9	count > 1
FIELD	1786:13	1786:13	10	count
LEAF_NODE	1786:13	1786:13	11	count
REL_OPERATOR	1786:19	1786:19	10	>
LEAF_NODE	1786:19	1786:19	11	>
FIELD	1786:21	1786:21	10	1
LEAF_NODE	1786:21	1786:21	11	1
LEAF_NODE	1786:23	1786:23	9	&&
EXPR	1786:26	1786:33	9	tag == TIFFTAG_TILEBYTECOUNTS
FIELD	1786:26	1786:26	10	tag
LEAF_NODE	1786:26	1786:26	11	tag
EQ_OPERATOR	1786:30	1786:30	10	==
LEAF_NODE	1786:30	1786:30	11	==
FIELD	1786:33	1786:33	10	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	1786:33	1786:33	11	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	1786:56	1786:56	6	)
STATEMENTS	1787:4	1789:4	6	
LEAF_NODE	1787:4	1787:4	7	{
STATEMENTS	1788:8	1788:8	7	
EXPR_STATEMENT	1788:8	1788:62	8	write_aslong4 = WriteAsLong4 ( tif , TIFFTileSize64 ( tif ) ) ;
EXPR	1788:8	1788:8	9	write_aslong4 = WriteAsLong4 ( tif , TIFFTileSize64 ( tif ) )
ASSIGN	1788:8	1788:24	10	write_aslong4 = WriteAsLong4 ( tif , TIFFTileSize64 ( tif ) )
LVAL	1788:8	1788:8	11	write_aslong4
FIELD	1788:8	1788:8	12	write_aslong4
LEAF_NODE	1788:8	1788:8	13	write_aslong4
ASSIGN_OP	1788:22	1788:22	11	=
LEAF_NODE	1788:22	1788:22	12	=
RVAL	1788:24	1788:24	11	WriteAsLong4 ( tif , TIFFTileSize64 ( tif ) )
FUNCTION_CALL	1788:24	1788:61	12	WriteAsLong4 ( tif , TIFFTileSize64 ( tif ) )
CALLEE	1788:24	1788:24	13	WriteAsLong4
LEAF_NODE	1788:24	1788:24	14	WriteAsLong4
LEAF_NODE	1788:36	1788:36	13	(
ARGUMENT	1788:37	1788:37	13	tif
FIELD	1788:37	1788:37	14	tif
LEAF_NODE	1788:37	1788:37	15	tif
LEAF_NODE	1788:40	1788:40	13	,
ARGUMENT	1788:42	1788:42	13	TIFFTileSize64 ( tif )
FUNCTION_CALL	1788:42	1788:60	14	TIFFTileSize64 ( tif )
CALLEE	1788:42	1788:42	15	TIFFTileSize64
LEAF_NODE	1788:42	1788:42	16	TIFFTileSize64
LEAF_NODE	1788:56	1788:56	15	(
ARGUMENT	1788:57	1788:57	15	tif
FIELD	1788:57	1788:57	16	tif
LEAF_NODE	1788:57	1788:57	17	tif
LEAF_NODE	1788:60	1788:60	15	)
LEAF_NODE	1788:61	1788:61	13	)
LEAF_NODE	1788:62	1788:62	9	;
LEAF_NODE	1789:4	1789:4	7	}
SELECTION	1790:4	1791:4	3	
KEYWORD	1790:4	1790:4	4	if
LEAF_NODE	1790:4	1790:4	5	if
LEAF_NODE	1790:6	1790:6	4	(
CONDITION	1790:8	1790:8	4	write_aslong4
EXPR	1790:8	1790:8	5	write_aslong4
FIELD	1790:8	1790:8	6	write_aslong4
LEAF_NODE	1790:8	1790:8	7	write_aslong4
LEAF_NODE	1790:22	1790:22	4	)
STATEMENTS	1791:4	1822:4	4	
LEAF_NODE	1791:4	1791:4	5	{
STATEMENTS	1797:8	1821:8	5	
SIMPLE_DECL	1797:8	1797:53	6	uint32 * p ; p = _TIFFmalloc ( count * sizeof ( uint32 ) ) ;
VAR_DECL	1797:8	1797:16	7	uint32 * p ; p = _TIFFmalloc ( count * sizeof ( uint32 ) )
TYPE	1797:8	1797:14	8	uint32 *
TYPE_NAME	1797:8	1797:8	9	uint32
LEAF_NODE	1797:8	1797:8	10	uint32
POINTER	1797:14	1797:14	9	*
LEAF_NODE	1797:14	1797:14	10	*
NAME	1797:16	1797:16	8	p
LEAF_NODE	1797:16	1797:16	9	p
LEAF_NODE	0:0	0:0	8	;
INIT	1797:16	1797:16	8	p = _TIFFmalloc ( count * sizeof ( uint32 ) )
ASSIGN	1797:16	1797:20	9	p = _TIFFmalloc ( count * sizeof ( uint32 ) )
LVAL	1797:16	1797:16	10	p
NAME	1797:16	1797:16	11	p
LEAF_NODE	1797:16	1797:16	12	p
ASSIGN_OP	1797:18	1797:18	10	=
LEAF_NODE	1797:18	1797:18	11	=
RVAL	1797:20	1797:20	10	_TIFFmalloc ( count * sizeof ( uint32 ) )
FUNCTION_CALL	1797:20	1797:52	11	_TIFFmalloc ( count * sizeof ( uint32 ) )
CALLEE	1797:20	1797:20	12	_TIFFmalloc
LEAF_NODE	1797:20	1797:20	13	_TIFFmalloc
LEAF_NODE	1797:31	1797:31	12	(
ARGUMENT	1797:32	1797:38	12	count * sizeof ( uint32 )
FIELD	1797:32	1797:32	13	count
LEAF_NODE	1797:32	1797:32	14	count
LEAF_NODE	1797:37	1797:37	13	*
FUNCTION_CALL	1797:38	1797:51	13	sizeof ( uint32 )
CALLEE	1797:38	1797:38	14	sizeof
LEAF_NODE	1797:38	1797:38	15	sizeof
LEAF_NODE	1797:44	1797:44	14	(
ARGUMENT	1797:45	1797:45	14	uint32
FIELD	1797:45	1797:45	15	uint32
LEAF_NODE	1797:45	1797:45	16	uint32
LEAF_NODE	1797:51	1797:51	14	)
LEAF_NODE	1797:52	1797:52	12	)
LEAF_NODE	1797:53	1797:53	7	;
SIMPLE_DECL	1798:8	1798:17	6	uint32 * q ;
VAR_DECL	1798:8	1798:16	7	uint32 * q
TYPE	1798:8	1798:14	8	uint32 *
TYPE_NAME	1798:8	1798:8	9	uint32
LEAF_NODE	1798:8	1798:8	10	uint32
POINTER	1798:14	1798:14	9	*
LEAF_NODE	1798:14	1798:14	10	*
NAME	1798:16	1798:16	8	q
LEAF_NODE	1798:16	1798:16	9	q
LEAF_NODE	1798:17	1798:17	7	;
SIMPLE_DECL	1799:8	1799:18	6	uint64 * ma ;
VAR_DECL	1799:8	1799:16	7	uint64 * ma
TYPE	1799:8	1799:14	8	uint64 *
TYPE_NAME	1799:8	1799:8	9	uint64
LEAF_NODE	1799:8	1799:8	10	uint64
POINTER	1799:14	1799:14	9	*
LEAF_NODE	1799:14	1799:14	10	*
NAME	1799:16	1799:16	8	ma
LEAF_NODE	1799:16	1799:16	9	ma
LEAF_NODE	1799:18	1799:18	7	;
SIMPLE_DECL	1800:8	1800:17	6	uint32 mb ;
VAR_DECL	1800:8	1800:15	7	uint32 mb
TYPE	1800:8	1800:8	8	uint32
TYPE_NAME	1800:8	1800:8	9	uint32
LEAF_NODE	1800:8	1800:8	10	uint32
NAME	1800:15	1800:15	8	mb
LEAF_NODE	1800:15	1800:15	9	mb
LEAF_NODE	1800:17	1800:17	7	;
SELECTION	1802:8	1803:8	6	
KEYWORD	1802:8	1802:8	7	if
LEAF_NODE	1802:8	1802:8	8	if
LEAF_NODE	1802:11	1802:11	7	(
CONDITION	1802:12	1802:12	7	p == NULL
EXPR	1802:12	1802:15	8	p == NULL
FIELD	1802:12	1802:12	9	p
LEAF_NODE	1802:12	1802:12	10	p
EQ_OPERATOR	1802:13	1802:13	9	==
LEAF_NODE	1802:13	1802:13	10	==
FIELD	1802:15	1802:15	9	NULL
LEAF_NODE	1802:15	1802:15	10	NULL
LEAF_NODE	1802:19	1802:19	7	)
STATEMENTS	1803:8	1806:8	7	
LEAF_NODE	1803:8	1803:8	8	{
STATEMENTS	1804:12	1805:12	8	
EXPR_STATEMENT	1804:12	1804:68	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1804:12	1804:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1804:12	1804:67	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1804:12	1804:12	12	TIFFErrorExt
LEAF_NODE	1804:12	1804:12	13	TIFFErrorExt
LEAF_NODE	1804:24	1804:24	12	(
ARGUMENT	1804:25	1804:25	12	tif -> tif_clientdata
FIELD	1804:25	1804:30	13	tif -> tif_clientdata
LEAF_NODE	1804:25	1804:25	14	tif
LEAF_NODE	1804:28	1804:28	14	->
LEAF_NODE	1804:30	1804:30	14	tif_clientdata
LEAF_NODE	1804:44	1804:44	12	,
ARGUMENT	1804:45	1804:45	12	module
FIELD	1804:45	1804:45	13	module
LEAF_NODE	1804:45	1804:45	14	module
LEAF_NODE	1804:51	1804:51	12	,
ARGUMENT	1804:52	1804:52	12	"Out of memory"
FIELD	1804:52	1804:52	13	"Out of memory"
LEAF_NODE	1804:52	1804:52	14	"Out of memory"
LEAF_NODE	1804:67	1804:67	12	)
LEAF_NODE	1804:68	1804:68	10	;
JUMP_STATEMENT	1805:12	1805:21	9	return ( 0 ) ;
KEYWORD	1805:12	1805:12	10	return
LEAF_NODE	1805:12	1805:12	11	return
DESTINATION	1805:18	1805:18	10	( 0 )
EXPR	1805:18	1805:20	11	( 0 )
LEAF_NODE	1805:18	1805:18	12	(
FIELD	1805:19	1805:19	12	0
LEAF_NODE	1805:19	1805:19	13	0
LEAF_NODE	1805:20	1805:20	12	)
LEAF_NODE	1805:21	1805:21	10	;
LEAF_NODE	1806:8	1806:8	8	}
LEAF_NODE	1808:8	1808:8	6	for
LEAF_NODE	1808:12	1808:12	6	(
LEAF_NODE	1808:13	1808:13	6	q
LEAF_NODE	1808:14	1808:14	6	=
LEAF_NODE	1808:15	1808:15	6	p
LEAF_NODE	1808:16	1808:16	6	,
EXPR_STATEMENT	1808:18	1808:32	6	ma = value , mb = 0 ;
EXPR	1808:18	1808:28	7	ma = value , mb = 0
ASSIGN	1808:18	1808:21	8	ma = value
LVAL	1808:18	1808:18	9	ma
FIELD	1808:18	1808:18	10	ma
LEAF_NODE	1808:18	1808:18	11	ma
ASSIGN_OP	1808:20	1808:20	9	=
LEAF_NODE	1808:20	1808:20	10	=
RVAL	1808:21	1808:21	9	value
FIELD	1808:21	1808:21	10	value
LEAF_NODE	1808:21	1808:21	11	value
LEAF_NODE	1808:26	1808:26	8	,
ASSIGN	1808:28	1808:31	8	mb = 0
LVAL	1808:28	1808:28	9	mb
FIELD	1808:28	1808:28	10	mb
LEAF_NODE	1808:28	1808:28	11	mb
ASSIGN_OP	1808:30	1808:30	9	=
LEAF_NODE	1808:30	1808:30	10	=
RVAL	1808:31	1808:31	9	0
FIELD	1808:31	1808:31	10	0
LEAF_NODE	1808:31	1808:31	11	0
LEAF_NODE	1808:32	1808:32	7	;
EXPR_STATEMENT	1808:34	1808:42	6	mb < count ;
EXPR	1808:34	1808:37	7	mb < count
FIELD	1808:34	1808:34	8	mb
LEAF_NODE	1808:34	1808:34	9	mb
REL_OPERATOR	1808:36	1808:36	8	<
LEAF_NODE	1808:36	1808:36	9	<
FIELD	1808:37	1808:37	8	count
LEAF_NODE	1808:37	1808:37	9	count
LEAF_NODE	1808:42	1808:42	7	;
LEAF_NODE	1808:44	1808:44	6	ma
LEAF_NODE	1808:46	1808:46	6	++
LEAF_NODE	1808:48	1808:48	6	,
LEAF_NODE	1808:50	1808:50	6	mb
LEAF_NODE	1808:52	1808:52	6	++
LEAF_NODE	1808:54	1808:54	6	,
LEAF_NODE	1808:56	1808:56	6	q
LEAF_NODE	1808:57	1808:57	6	++
LEAF_NODE	1808:59	1808:59	6	)
LEAF_NODE	1809:8	1809:8	6	{
STATEMENTS	1810:12	1817:12	6	
SELECTION	1810:12	1811:12	7	
KEYWORD	1810:12	1810:12	8	if
LEAF_NODE	1810:12	1810:12	9	if
LEAF_NODE	1810:15	1810:15	8	(
CONDITION	1810:16	1810:16	8	* ma > 0xFFFFFFFF
EXPR	1810:16	1810:20	9	* ma > 0xFFFFFFFF
UNARY_EXPR	1810:16	1810:17	10	* ma
UNARY_OPERATOR	1810:16	1810:16	11	*
LEAF_NODE	1810:16	1810:16	12	*
FIELD	1810:17	1810:17	11	ma
LEAF_NODE	1810:17	1810:17	12	ma
REL_OPERATOR	1810:19	1810:19	10	>
LEAF_NODE	1810:19	1810:19	11	>
FIELD	1810:20	1810:20	10	0xFFFFFFFF
LEAF_NODE	1810:20	1810:20	11	0xFFFFFFFF
LEAF_NODE	1810:30	1810:30	8	)
STATEMENTS	1811:12	1816:12	8	
LEAF_NODE	1811:12	1811:12	9	{
STATEMENTS	1812:16	1815:16	9	
EXPR_STATEMENT	1812:16	1813:91	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to write value larger than 0xFFFFFFFF in LONG array." ) ;
EXPR	1812:16	1812:16	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to write value larger than 0xFFFFFFFF in LONG array." )
FUNCTION_CALL	1812:16	1813:90	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to write value larger than 0xFFFFFFFF in LONG array." )
CALLEE	1812:16	1812:16	13	TIFFErrorExt
LEAF_NODE	1812:16	1812:16	14	TIFFErrorExt
LEAF_NODE	1812:28	1812:28	13	(
ARGUMENT	1812:29	1812:29	13	tif -> tif_clientdata
FIELD	1812:29	1812:34	14	tif -> tif_clientdata
LEAF_NODE	1812:29	1812:29	15	tif
LEAF_NODE	1812:32	1812:32	15	->
LEAF_NODE	1812:34	1812:34	15	tif_clientdata
LEAF_NODE	1812:48	1812:48	13	,
ARGUMENT	1812:49	1812:49	13	module
FIELD	1812:49	1812:49	14	module
LEAF_NODE	1812:49	1812:49	15	module
LEAF_NODE	1812:55	1812:55	13	,
ARGUMENT	1813:28	1813:28	13	"Attempt to write value larger than 0xFFFFFFFF in LONG array."
FIELD	1813:28	1813:28	14	"Attempt to write value larger than 0xFFFFFFFF in LONG array."
LEAF_NODE	1813:28	1813:28	15	"Attempt to write value larger than 0xFFFFFFFF in LONG array."
LEAF_NODE	1813:90	1813:90	13	)
LEAF_NODE	1813:91	1813:91	11	;
EXPR_STATEMENT	1814:16	1814:28	10	_TIFFfree ( p ) ;
EXPR	1814:16	1814:16	11	_TIFFfree ( p )
FUNCTION_CALL	1814:16	1814:27	12	_TIFFfree ( p )
CALLEE	1814:16	1814:16	13	_TIFFfree
LEAF_NODE	1814:16	1814:16	14	_TIFFfree
LEAF_NODE	1814:25	1814:25	13	(
ARGUMENT	1814:26	1814:26	13	p
FIELD	1814:26	1814:26	14	p
LEAF_NODE	1814:26	1814:26	15	p
LEAF_NODE	1814:27	1814:27	13	)
LEAF_NODE	1814:28	1814:28	11	;
JUMP_STATEMENT	1815:16	1815:25	10	return ( 0 ) ;
KEYWORD	1815:16	1815:16	11	return
LEAF_NODE	1815:16	1815:16	12	return
DESTINATION	1815:22	1815:22	11	( 0 )
EXPR	1815:22	1815:24	12	( 0 )
LEAF_NODE	1815:22	1815:22	13	(
FIELD	1815:23	1815:23	13	0
LEAF_NODE	1815:23	1815:23	14	0
LEAF_NODE	1815:24	1815:24	13	)
LEAF_NODE	1815:25	1815:25	11	;
LEAF_NODE	1816:12	1816:12	9	}
EXPR_STATEMENT	1817:12	1817:29	7	* q = ( uint32 ) ( * ma ) ;
EXPR	1817:12	1817:12	8	* q = ( uint32 ) ( * ma )
ASSIGN	1817:12	1817:16	9	* q = ( uint32 ) ( * ma )
LVAL	1817:12	1817:12	10	* q
UNARY_EXPR	1817:12	1817:13	11	* q
UNARY_OPERATOR	1817:12	1817:12	12	*
LEAF_NODE	1817:12	1817:12	13	*
FIELD	1817:13	1817:13	12	q
LEAF_NODE	1817:13	1817:13	13	q
ASSIGN_OP	1817:14	1817:14	10	=
LEAF_NODE	1817:14	1817:14	11	=
RVAL	1817:16	1817:28	10	( uint32 ) ( * ma )
LEAF_NODE	1817:16	1817:16	11	(
TYPE_NAME	1817:17	1817:17	11	uint32
LEAF_NODE	1817:17	1817:17	12	uint32
LEAF_NODE	1817:23	1817:23	11	)
LEAF_NODE	1817:24	1817:24	11	(
UNARY_EXPR	1817:25	1817:26	11	* ma
UNARY_OPERATOR	1817:25	1817:25	12	*
LEAF_NODE	1817:25	1817:25	13	*
FIELD	1817:26	1817:26	12	ma
LEAF_NODE	1817:26	1817:26	13	ma
LEAF_NODE	1817:28	1817:28	11	)
LEAF_NODE	1817:29	1817:29	8	;
LEAF_NODE	1818:8	1818:8	6	}
EXPR_STATEMENT	1820:8	1820:73	6	o = TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , p ) ;
EXPR	1820:8	1820:8	7	o = TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , p )
ASSIGN	1820:8	1820:10	8	o = TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , p )
LVAL	1820:8	1820:8	9	o
FIELD	1820:8	1820:8	10	o
LEAF_NODE	1820:8	1820:8	11	o
ASSIGN_OP	1820:9	1820:9	9	=
LEAF_NODE	1820:9	1820:9	10	=
RVAL	1820:10	1820:10	9	TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , p )
FUNCTION_CALL	1820:10	1820:72	10	TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , p )
CALLEE	1820:10	1820:10	11	TIFFWriteDirectoryTagCheckedLongArray
LEAF_NODE	1820:10	1820:10	12	TIFFWriteDirectoryTagCheckedLongArray
LEAF_NODE	1820:47	1820:47	11	(
ARGUMENT	1820:48	1820:48	11	tif
FIELD	1820:48	1820:48	12	tif
LEAF_NODE	1820:48	1820:48	13	tif
LEAF_NODE	1820:51	1820:51	11	,
ARGUMENT	1820:52	1820:52	11	ndir
FIELD	1820:52	1820:52	12	ndir
LEAF_NODE	1820:52	1820:52	13	ndir
LEAF_NODE	1820:56	1820:56	11	,
ARGUMENT	1820:57	1820:57	11	dir
FIELD	1820:57	1820:57	12	dir
LEAF_NODE	1820:57	1820:57	13	dir
LEAF_NODE	1820:60	1820:60	11	,
ARGUMENT	1820:61	1820:61	11	tag
FIELD	1820:61	1820:61	12	tag
LEAF_NODE	1820:61	1820:61	13	tag
LEAF_NODE	1820:64	1820:64	11	,
ARGUMENT	1820:65	1820:65	11	count
FIELD	1820:65	1820:65	12	count
LEAF_NODE	1820:65	1820:65	13	count
LEAF_NODE	1820:70	1820:70	11	,
ARGUMENT	1820:71	1820:71	11	p
FIELD	1820:71	1820:71	12	p
LEAF_NODE	1820:71	1820:71	13	p
LEAF_NODE	1820:72	1820:72	11	)
LEAF_NODE	1820:73	1820:73	7	;
EXPR_STATEMENT	1821:8	1821:20	6	_TIFFfree ( p ) ;
EXPR	1821:8	1821:8	7	_TIFFfree ( p )
FUNCTION_CALL	1821:8	1821:19	8	_TIFFfree ( p )
CALLEE	1821:8	1821:8	9	_TIFFfree
LEAF_NODE	1821:8	1821:8	10	_TIFFfree
LEAF_NODE	1821:17	1821:17	9	(
ARGUMENT	1821:18	1821:18	9	p
FIELD	1821:18	1821:18	10	p
LEAF_NODE	1821:18	1821:18	11	p
LEAF_NODE	1821:19	1821:19	9	)
LEAF_NODE	1821:20	1821:20	7	;
LEAF_NODE	1822:4	1822:4	5	}
SELECTION	1823:4	1824:4	3	
KEYWORD	1823:4	1823:4	4	else
LEAF_NODE	1823:4	1823:4	5	else
STATEMENTS	1824:4	1851:4	4	
LEAF_NODE	1824:4	1824:4	5	{
STATEMENTS	1825:8	1850:8	5	
SIMPLE_DECL	1825:8	1825:53	6	uint16 * p ; p = _TIFFmalloc ( count * sizeof ( uint16 ) ) ;
VAR_DECL	1825:8	1825:16	7	uint16 * p ; p = _TIFFmalloc ( count * sizeof ( uint16 ) )
TYPE	1825:8	1825:14	8	uint16 *
TYPE_NAME	1825:8	1825:8	9	uint16
LEAF_NODE	1825:8	1825:8	10	uint16
POINTER	1825:14	1825:14	9	*
LEAF_NODE	1825:14	1825:14	10	*
NAME	1825:16	1825:16	8	p
LEAF_NODE	1825:16	1825:16	9	p
LEAF_NODE	0:0	0:0	8	;
INIT	1825:16	1825:16	8	p = _TIFFmalloc ( count * sizeof ( uint16 ) )
ASSIGN	1825:16	1825:20	9	p = _TIFFmalloc ( count * sizeof ( uint16 ) )
LVAL	1825:16	1825:16	10	p
NAME	1825:16	1825:16	11	p
LEAF_NODE	1825:16	1825:16	12	p
ASSIGN_OP	1825:18	1825:18	10	=
LEAF_NODE	1825:18	1825:18	11	=
RVAL	1825:20	1825:20	10	_TIFFmalloc ( count * sizeof ( uint16 ) )
FUNCTION_CALL	1825:20	1825:52	11	_TIFFmalloc ( count * sizeof ( uint16 ) )
CALLEE	1825:20	1825:20	12	_TIFFmalloc
LEAF_NODE	1825:20	1825:20	13	_TIFFmalloc
LEAF_NODE	1825:31	1825:31	12	(
ARGUMENT	1825:32	1825:38	12	count * sizeof ( uint16 )
FIELD	1825:32	1825:32	13	count
LEAF_NODE	1825:32	1825:32	14	count
LEAF_NODE	1825:37	1825:37	13	*
FUNCTION_CALL	1825:38	1825:51	13	sizeof ( uint16 )
CALLEE	1825:38	1825:38	14	sizeof
LEAF_NODE	1825:38	1825:38	15	sizeof
LEAF_NODE	1825:44	1825:44	14	(
ARGUMENT	1825:45	1825:45	14	uint16
FIELD	1825:45	1825:45	15	uint16
LEAF_NODE	1825:45	1825:45	16	uint16
LEAF_NODE	1825:51	1825:51	14	)
LEAF_NODE	1825:52	1825:52	12	)
LEAF_NODE	1825:53	1825:53	7	;
SIMPLE_DECL	1826:8	1826:17	6	uint16 * q ;
VAR_DECL	1826:8	1826:16	7	uint16 * q
TYPE	1826:8	1826:14	8	uint16 *
TYPE_NAME	1826:8	1826:8	9	uint16
LEAF_NODE	1826:8	1826:8	10	uint16
POINTER	1826:14	1826:14	9	*
LEAF_NODE	1826:14	1826:14	10	*
NAME	1826:16	1826:16	8	q
LEAF_NODE	1826:16	1826:16	9	q
LEAF_NODE	1826:17	1826:17	7	;
SIMPLE_DECL	1827:8	1827:18	6	uint64 * ma ;
VAR_DECL	1827:8	1827:16	7	uint64 * ma
TYPE	1827:8	1827:14	8	uint64 *
TYPE_NAME	1827:8	1827:8	9	uint64
LEAF_NODE	1827:8	1827:8	10	uint64
POINTER	1827:14	1827:14	9	*
LEAF_NODE	1827:14	1827:14	10	*
NAME	1827:16	1827:16	8	ma
LEAF_NODE	1827:16	1827:16	9	ma
LEAF_NODE	1827:18	1827:18	7	;
SIMPLE_DECL	1828:8	1828:17	6	uint32 mb ;
VAR_DECL	1828:8	1828:15	7	uint32 mb
TYPE	1828:8	1828:8	8	uint32
TYPE_NAME	1828:8	1828:8	9	uint32
LEAF_NODE	1828:8	1828:8	10	uint32
NAME	1828:15	1828:15	8	mb
LEAF_NODE	1828:15	1828:15	9	mb
LEAF_NODE	1828:17	1828:17	7	;
SELECTION	1830:8	1831:8	6	
KEYWORD	1830:8	1830:8	7	if
LEAF_NODE	1830:8	1830:8	8	if
LEAF_NODE	1830:11	1830:11	7	(
CONDITION	1830:12	1830:12	7	p == NULL
EXPR	1830:12	1830:15	8	p == NULL
FIELD	1830:12	1830:12	9	p
LEAF_NODE	1830:12	1830:12	10	p
EQ_OPERATOR	1830:13	1830:13	9	==
LEAF_NODE	1830:13	1830:13	10	==
FIELD	1830:15	1830:15	9	NULL
LEAF_NODE	1830:15	1830:15	10	NULL
LEAF_NODE	1830:19	1830:19	7	)
STATEMENTS	1831:8	1834:8	7	
LEAF_NODE	1831:8	1831:8	8	{
STATEMENTS	1832:12	1833:12	8	
EXPR_STATEMENT	1832:12	1832:68	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1832:12	1832:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1832:12	1832:67	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1832:12	1832:12	12	TIFFErrorExt
LEAF_NODE	1832:12	1832:12	13	TIFFErrorExt
LEAF_NODE	1832:24	1832:24	12	(
ARGUMENT	1832:25	1832:25	12	tif -> tif_clientdata
FIELD	1832:25	1832:30	13	tif -> tif_clientdata
LEAF_NODE	1832:25	1832:25	14	tif
LEAF_NODE	1832:28	1832:28	14	->
LEAF_NODE	1832:30	1832:30	14	tif_clientdata
LEAF_NODE	1832:44	1832:44	12	,
ARGUMENT	1832:45	1832:45	12	module
FIELD	1832:45	1832:45	13	module
LEAF_NODE	1832:45	1832:45	14	module
LEAF_NODE	1832:51	1832:51	12	,
ARGUMENT	1832:52	1832:52	12	"Out of memory"
FIELD	1832:52	1832:52	13	"Out of memory"
LEAF_NODE	1832:52	1832:52	14	"Out of memory"
LEAF_NODE	1832:67	1832:67	12	)
LEAF_NODE	1832:68	1832:68	10	;
JUMP_STATEMENT	1833:12	1833:21	9	return ( 0 ) ;
KEYWORD	1833:12	1833:12	10	return
LEAF_NODE	1833:12	1833:12	11	return
DESTINATION	1833:18	1833:18	10	( 0 )
EXPR	1833:18	1833:20	11	( 0 )
LEAF_NODE	1833:18	1833:18	12	(
FIELD	1833:19	1833:19	12	0
LEAF_NODE	1833:19	1833:19	13	0
LEAF_NODE	1833:20	1833:20	12	)
LEAF_NODE	1833:21	1833:21	10	;
LEAF_NODE	1834:8	1834:8	8	}
LEAF_NODE	1836:8	1836:8	6	for
LEAF_NODE	1836:12	1836:12	6	(
LEAF_NODE	1836:13	1836:13	6	q
LEAF_NODE	1836:14	1836:14	6	=
LEAF_NODE	1836:15	1836:15	6	p
LEAF_NODE	1836:16	1836:16	6	,
EXPR_STATEMENT	1836:18	1836:32	6	ma = value , mb = 0 ;
EXPR	1836:18	1836:28	7	ma = value , mb = 0
ASSIGN	1836:18	1836:21	8	ma = value
LVAL	1836:18	1836:18	9	ma
FIELD	1836:18	1836:18	10	ma
LEAF_NODE	1836:18	1836:18	11	ma
ASSIGN_OP	1836:20	1836:20	9	=
LEAF_NODE	1836:20	1836:20	10	=
RVAL	1836:21	1836:21	9	value
FIELD	1836:21	1836:21	10	value
LEAF_NODE	1836:21	1836:21	11	value
LEAF_NODE	1836:26	1836:26	8	,
ASSIGN	1836:28	1836:31	8	mb = 0
LVAL	1836:28	1836:28	9	mb
FIELD	1836:28	1836:28	10	mb
LEAF_NODE	1836:28	1836:28	11	mb
ASSIGN_OP	1836:30	1836:30	9	=
LEAF_NODE	1836:30	1836:30	10	=
RVAL	1836:31	1836:31	9	0
FIELD	1836:31	1836:31	10	0
LEAF_NODE	1836:31	1836:31	11	0
LEAF_NODE	1836:32	1836:32	7	;
EXPR_STATEMENT	1836:34	1836:42	6	mb < count ;
EXPR	1836:34	1836:37	7	mb < count
FIELD	1836:34	1836:34	8	mb
LEAF_NODE	1836:34	1836:34	9	mb
REL_OPERATOR	1836:36	1836:36	8	<
LEAF_NODE	1836:36	1836:36	9	<
FIELD	1836:37	1836:37	8	count
LEAF_NODE	1836:37	1836:37	9	count
LEAF_NODE	1836:42	1836:42	7	;
LEAF_NODE	1836:44	1836:44	6	ma
LEAF_NODE	1836:46	1836:46	6	++
LEAF_NODE	1836:48	1836:48	6	,
LEAF_NODE	1836:50	1836:50	6	mb
LEAF_NODE	1836:52	1836:52	6	++
LEAF_NODE	1836:54	1836:54	6	,
LEAF_NODE	1836:56	1836:56	6	q
LEAF_NODE	1836:57	1836:57	6	++
LEAF_NODE	1836:59	1836:59	6	)
LEAF_NODE	1837:8	1837:8	6	{
STATEMENTS	1838:12	1846:12	6	
SELECTION	1838:12	1839:12	7	
KEYWORD	1838:12	1838:12	8	if
LEAF_NODE	1838:12	1838:12	9	if
LEAF_NODE	1838:15	1838:15	8	(
CONDITION	1838:16	1838:16	8	* ma > 0xFFFF
EXPR	1838:16	1838:20	9	* ma > 0xFFFF
UNARY_EXPR	1838:16	1838:17	10	* ma
UNARY_OPERATOR	1838:16	1838:16	11	*
LEAF_NODE	1838:16	1838:16	12	*
FIELD	1838:17	1838:17	11	ma
LEAF_NODE	1838:17	1838:17	12	ma
REL_OPERATOR	1838:19	1838:19	10	>
LEAF_NODE	1838:19	1838:19	11	>
FIELD	1838:20	1838:20	10	0xFFFF
LEAF_NODE	1838:20	1838:20	11	0xFFFF
LEAF_NODE	1838:26	1838:26	8	)
STATEMENTS	1839:12	1845:12	8	
LEAF_NODE	1839:12	1839:12	9	{
STATEMENTS	1841:16	1844:16	9	
EXPR_STATEMENT	1841:16	1842:88	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to write value larger than 0xFFFF in SHORT array." ) ;
EXPR	1841:16	1841:16	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to write value larger than 0xFFFF in SHORT array." )
FUNCTION_CALL	1841:16	1842:87	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to write value larger than 0xFFFF in SHORT array." )
CALLEE	1841:16	1841:16	13	TIFFErrorExt
LEAF_NODE	1841:16	1841:16	14	TIFFErrorExt
LEAF_NODE	1841:28	1841:28	13	(
ARGUMENT	1841:29	1841:29	13	tif -> tif_clientdata
FIELD	1841:29	1841:34	14	tif -> tif_clientdata
LEAF_NODE	1841:29	1841:29	15	tif
LEAF_NODE	1841:32	1841:32	15	->
LEAF_NODE	1841:34	1841:34	15	tif_clientdata
LEAF_NODE	1841:48	1841:48	13	,
ARGUMENT	1841:49	1841:49	13	module
FIELD	1841:49	1841:49	14	module
LEAF_NODE	1841:49	1841:49	15	module
LEAF_NODE	1841:55	1841:55	13	,
ARGUMENT	1842:28	1842:28	13	"Attempt to write value larger than 0xFFFF in SHORT array."
FIELD	1842:28	1842:28	14	"Attempt to write value larger than 0xFFFF in SHORT array."
LEAF_NODE	1842:28	1842:28	15	"Attempt to write value larger than 0xFFFF in SHORT array."
LEAF_NODE	1842:87	1842:87	13	)
LEAF_NODE	1842:88	1842:88	11	;
EXPR_STATEMENT	1843:16	1843:28	10	_TIFFfree ( p ) ;
EXPR	1843:16	1843:16	11	_TIFFfree ( p )
FUNCTION_CALL	1843:16	1843:27	12	_TIFFfree ( p )
CALLEE	1843:16	1843:16	13	_TIFFfree
LEAF_NODE	1843:16	1843:16	14	_TIFFfree
LEAF_NODE	1843:25	1843:25	13	(
ARGUMENT	1843:26	1843:26	13	p
FIELD	1843:26	1843:26	14	p
LEAF_NODE	1843:26	1843:26	15	p
LEAF_NODE	1843:27	1843:27	13	)
LEAF_NODE	1843:28	1843:28	11	;
JUMP_STATEMENT	1844:16	1844:25	10	return ( 0 ) ;
KEYWORD	1844:16	1844:16	11	return
LEAF_NODE	1844:16	1844:16	12	return
DESTINATION	1844:22	1844:22	11	( 0 )
EXPR	1844:22	1844:24	12	( 0 )
LEAF_NODE	1844:22	1844:22	13	(
FIELD	1844:23	1844:23	13	0
LEAF_NODE	1844:23	1844:23	14	0
LEAF_NODE	1844:24	1844:24	13	)
LEAF_NODE	1844:25	1844:25	11	;
LEAF_NODE	1845:12	1845:12	9	}
EXPR_STATEMENT	1846:12	1846:29	7	* q = ( uint16 ) ( * ma ) ;
EXPR	1846:12	1846:12	8	* q = ( uint16 ) ( * ma )
ASSIGN	1846:12	1846:16	9	* q = ( uint16 ) ( * ma )
LVAL	1846:12	1846:12	10	* q
UNARY_EXPR	1846:12	1846:13	11	* q
UNARY_OPERATOR	1846:12	1846:12	12	*
LEAF_NODE	1846:12	1846:12	13	*
FIELD	1846:13	1846:13	12	q
LEAF_NODE	1846:13	1846:13	13	q
ASSIGN_OP	1846:14	1846:14	10	=
LEAF_NODE	1846:14	1846:14	11	=
RVAL	1846:16	1846:28	10	( uint16 ) ( * ma )
LEAF_NODE	1846:16	1846:16	11	(
TYPE_NAME	1846:17	1846:17	11	uint16
LEAF_NODE	1846:17	1846:17	12	uint16
LEAF_NODE	1846:23	1846:23	11	)
LEAF_NODE	1846:24	1846:24	11	(
UNARY_EXPR	1846:25	1846:26	11	* ma
UNARY_OPERATOR	1846:25	1846:25	12	*
LEAF_NODE	1846:25	1846:25	13	*
FIELD	1846:26	1846:26	12	ma
LEAF_NODE	1846:26	1846:26	13	ma
LEAF_NODE	1846:28	1846:28	11	)
LEAF_NODE	1846:29	1846:29	8	;
LEAF_NODE	1847:8	1847:8	6	}
EXPR_STATEMENT	1849:8	1849:74	6	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , p ) ;
EXPR	1849:8	1849:8	7	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , p )
ASSIGN	1849:8	1849:10	8	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , p )
LVAL	1849:8	1849:8	9	o
FIELD	1849:8	1849:8	10	o
LEAF_NODE	1849:8	1849:8	11	o
ASSIGN_OP	1849:9	1849:9	9	=
LEAF_NODE	1849:9	1849:9	10	=
RVAL	1849:10	1849:10	9	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , p )
FUNCTION_CALL	1849:10	1849:73	10	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , p )
CALLEE	1849:10	1849:10	11	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	1849:10	1849:10	12	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	1849:48	1849:48	11	(
ARGUMENT	1849:49	1849:49	11	tif
FIELD	1849:49	1849:49	12	tif
LEAF_NODE	1849:49	1849:49	13	tif
LEAF_NODE	1849:52	1849:52	11	,
ARGUMENT	1849:53	1849:53	11	ndir
FIELD	1849:53	1849:53	12	ndir
LEAF_NODE	1849:53	1849:53	13	ndir
LEAF_NODE	1849:57	1849:57	11	,
ARGUMENT	1849:58	1849:58	11	dir
FIELD	1849:58	1849:58	12	dir
LEAF_NODE	1849:58	1849:58	13	dir
LEAF_NODE	1849:61	1849:61	11	,
ARGUMENT	1849:62	1849:62	11	tag
FIELD	1849:62	1849:62	12	tag
LEAF_NODE	1849:62	1849:62	13	tag
LEAF_NODE	1849:65	1849:65	11	,
ARGUMENT	1849:66	1849:66	11	count
FIELD	1849:66	1849:66	12	count
LEAF_NODE	1849:66	1849:66	13	count
LEAF_NODE	1849:71	1849:71	11	,
ARGUMENT	1849:72	1849:72	11	p
FIELD	1849:72	1849:72	12	p
LEAF_NODE	1849:72	1849:72	13	p
LEAF_NODE	1849:73	1849:73	11	)
LEAF_NODE	1849:74	1849:74	7	;
EXPR_STATEMENT	1850:8	1850:20	6	_TIFFfree ( p ) ;
EXPR	1850:8	1850:8	7	_TIFFfree ( p )
FUNCTION_CALL	1850:8	1850:19	8	_TIFFfree ( p )
CALLEE	1850:8	1850:8	9	_TIFFfree
LEAF_NODE	1850:8	1850:8	10	_TIFFfree
LEAF_NODE	1850:17	1850:17	9	(
ARGUMENT	1850:18	1850:18	9	p
FIELD	1850:18	1850:18	10	p
LEAF_NODE	1850:18	1850:18	11	p
LEAF_NODE	1850:19	1850:19	9	)
LEAF_NODE	1850:20	1850:20	7	;
LEAF_NODE	1851:4	1851:4	5	}
LEAF_NODE	1853:4	1853:4	3	return
LEAF_NODE	1853:10	1853:10	3	(
LEAF_NODE	1853:11	1853:11	3	o
LEAF_NODE	1853:12	1853:12	3	)
LEAF_NODE	1853:13	1853:13	3	;
LEAF_NODE	1854:0	1854:0	2	}
FUNCTION_DEF	1862:0	1912:0	1	
RETURN_TYPE	1862:0	1862:7	2	static int
LEAF_NODE	1862:0	1862:0	3	static
TYPE_NAME	1862:7	1862:7	3	int
LEAF_NODE	1862:7	1862:7	4	int
FUNCTION_NAME	1863:0	1863:0	2	TIFFWriteDirectoryTagIfdIfd8Array
LEAF_NODE	1863:0	1863:0	3	TIFFWriteDirectoryTagIfdIfd8Array
PARAMETER_LIST	1863:33	1863:117	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint64 * value )
LEAF_NODE	1863:33	1863:33	3	(
PARAMETER_DECL	1863:34	1863:40	3	TIFF * tif
TYPE	1863:34	1863:38	4	TIFF *
TYPE_NAME	1863:34	1863:34	5	TIFF
LEAF_NODE	1863:34	1863:34	6	TIFF
POINTER	1863:38	1863:38	5	*
LEAF_NODE	1863:38	1863:38	6	*
NAME	1863:40	1863:40	4	tif
LEAF_NODE	1863:40	1863:40	5	tif
LEAF_NODE	1863:43	1863:43	3	,
PARAMETER_DECL	1863:45	1863:53	3	uint32 * ndir
TYPE	1863:45	1863:51	4	uint32 *
TYPE_NAME	1863:45	1863:45	5	uint32
LEAF_NODE	1863:45	1863:45	6	uint32
POINTER	1863:51	1863:51	5	*
LEAF_NODE	1863:51	1863:51	6	*
NAME	1863:53	1863:53	4	ndir
LEAF_NODE	1863:53	1863:53	5	ndir
LEAF_NODE	1863:57	1863:57	3	,
PARAMETER_DECL	1863:59	1863:73	3	TIFFDirEntry * dir
TYPE	1863:59	1863:71	4	TIFFDirEntry *
TYPE_NAME	1863:59	1863:59	5	TIFFDirEntry
LEAF_NODE	1863:59	1863:59	6	TIFFDirEntry
POINTER	1863:71	1863:71	5	*
LEAF_NODE	1863:71	1863:71	6	*
NAME	1863:73	1863:73	4	dir
LEAF_NODE	1863:73	1863:73	5	dir
LEAF_NODE	1863:76	1863:76	3	,
PARAMETER_DECL	1863:78	1863:85	3	uint16 tag
TYPE	1863:78	1863:78	4	uint16
TYPE_NAME	1863:78	1863:78	5	uint16
LEAF_NODE	1863:78	1863:78	6	uint16
NAME	1863:85	1863:85	4	tag
LEAF_NODE	1863:85	1863:85	5	tag
LEAF_NODE	1863:88	1863:88	3	,
PARAMETER_DECL	1863:90	1863:97	3	uint32 count
TYPE	1863:90	1863:90	4	uint32
TYPE_NAME	1863:90	1863:90	5	uint32
LEAF_NODE	1863:90	1863:90	6	uint32
NAME	1863:97	1863:97	4	count
LEAF_NODE	1863:97	1863:97	5	count
LEAF_NODE	1863:102	1863:102	3	,
PARAMETER_DECL	1863:104	1863:112	3	uint64 * value
TYPE	1863:104	1863:110	4	uint64 *
TYPE_NAME	1863:104	1863:104	5	uint64
LEAF_NODE	1863:104	1863:104	6	uint64
POINTER	1863:110	1863:110	5	*
LEAF_NODE	1863:110	1863:110	6	*
NAME	1863:112	1863:112	4	value
LEAF_NODE	1863:112	1863:112	5	value
LEAF_NODE	1863:117	1863:117	3	)
LEAF_NODE	1864:0	1864:0	2	{
STATEMENTS	1865:4	1911:13	2	
LEAF_NODE	1865:4	1865:4	3	static
SIMPLE_DECL	1865:11	1865:68	3	const char [ ] module ; module = "TIFFWriteDirectoryTagIfdIfd8Array" ;
VAR_DECL	1865:11	1865:22	4	const char [ ] module ; module = "TIFFWriteDirectoryTagIfdIfd8Array"
TYPE	1865:11	1865:28	5	const char [ ]
TYPE_NAME	1865:11	1865:17	6	const char
LEAF_NODE	1865:11	1865:11	7	const
LEAF_NODE	1865:17	1865:17	7	char
TYPE_SUFFIX	1865:28	1865:29	6	[ ]
LEAF_NODE	1865:28	1865:28	7	[
LEAF_NODE	1865:29	1865:29	7	]
NAME	1865:22	1865:22	5	module
LEAF_NODE	1865:22	1865:22	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1865:22	1865:22	5	module = "TIFFWriteDirectoryTagIfdIfd8Array"
ASSIGN	1865:22	1865:33	6	module = "TIFFWriteDirectoryTagIfdIfd8Array"
LVAL	1865:22	1865:22	7	module
NAME	1865:22	1865:22	8	module
LEAF_NODE	1865:22	1865:22	9	module
ASSIGN_OP	1865:31	1865:31	7	=
LEAF_NODE	1865:31	1865:31	8	=
RVAL	1865:33	1865:33	7	"TIFFWriteDirectoryTagIfdIfd8Array"
FIELD	1865:33	1865:33	8	"TIFFWriteDirectoryTagIfdIfd8Array"
LEAF_NODE	1865:33	1865:33	9	"TIFFWriteDirectoryTagIfdIfd8Array"
LEAF_NODE	1865:68	1865:68	4	;
SIMPLE_DECL	1866:4	1866:14	3	uint64 * ma ;
VAR_DECL	1866:4	1866:12	4	uint64 * ma
TYPE	1866:4	1866:10	5	uint64 *
TYPE_NAME	1866:4	1866:4	6	uint64
LEAF_NODE	1866:4	1866:4	7	uint64
POINTER	1866:10	1866:10	6	*
LEAF_NODE	1866:10	1866:10	7	*
NAME	1866:12	1866:12	5	ma
LEAF_NODE	1866:12	1866:12	6	ma
LEAF_NODE	1866:14	1866:14	4	;
SIMPLE_DECL	1867:4	1867:13	3	uint32 mb ;
VAR_DECL	1867:4	1867:11	4	uint32 mb
TYPE	1867:4	1867:4	5	uint32
TYPE_NAME	1867:4	1867:4	6	uint32
LEAF_NODE	1867:4	1867:4	7	uint32
NAME	1867:11	1867:11	5	mb
LEAF_NODE	1867:11	1867:11	6	mb
LEAF_NODE	1867:13	1867:13	4	;
SIMPLE_DECL	1868:4	1868:13	3	uint32 * p ;
VAR_DECL	1868:4	1868:12	4	uint32 * p
TYPE	1868:4	1868:10	5	uint32 *
TYPE_NAME	1868:4	1868:4	6	uint32
LEAF_NODE	1868:4	1868:4	7	uint32
POINTER	1868:10	1868:10	6	*
LEAF_NODE	1868:10	1868:10	7	*
NAME	1868:12	1868:12	5	p
LEAF_NODE	1868:12	1868:12	6	p
LEAF_NODE	1868:13	1868:13	4	;
SIMPLE_DECL	1869:4	1869:13	3	uint32 * q ;
VAR_DECL	1869:4	1869:12	4	uint32 * q
TYPE	1869:4	1869:10	5	uint32 *
TYPE_NAME	1869:4	1869:4	6	uint32
LEAF_NODE	1869:4	1869:4	7	uint32
POINTER	1869:10	1869:10	6	*
LEAF_NODE	1869:10	1869:10	7	*
NAME	1869:12	1869:12	5	q
LEAF_NODE	1869:12	1869:12	6	q
LEAF_NODE	1869:13	1869:13	4	;
SIMPLE_DECL	1870:4	1870:9	3	int o ;
VAR_DECL	1870:4	1870:8	4	int o
TYPE	1870:4	1870:4	5	int
TYPE_NAME	1870:4	1870:4	6	int
LEAF_NODE	1870:4	1870:4	7	int
NAME	1870:8	1870:8	5	o
LEAF_NODE	1870:8	1870:8	6	o
LEAF_NODE	1870:9	1870:9	4	;
SELECTION	1873:4	1874:4	3	
KEYWORD	1873:4	1873:4	4	if
LEAF_NODE	1873:4	1873:4	5	if
LEAF_NODE	1873:7	1873:7	4	(
CONDITION	1873:8	1873:8	4	dir == NULL
EXPR	1873:8	1873:13	5	dir == NULL
FIELD	1873:8	1873:8	6	dir
LEAF_NODE	1873:8	1873:8	7	dir
EQ_OPERATOR	1873:11	1873:11	6	==
LEAF_NODE	1873:11	1873:11	7	==
FIELD	1873:13	1873:13	6	NULL
LEAF_NODE	1873:13	1873:13	7	NULL
LEAF_NODE	1873:17	1873:17	4	)
STATEMENTS	1874:4	1877:4	4	
LEAF_NODE	1874:4	1874:4	5	{
STATEMENTS	1875:8	1876:8	5	
EXPR_STATEMENT	1875:8	1875:17	6	( * ndir ) ++ ;
EXPR	1875:8	1875:15	7	( * ndir ) ++
LEAF_NODE	1875:8	1875:8	8	(
UNARY_EXPR	1875:9	1875:10	8	* ndir
UNARY_OPERATOR	1875:9	1875:9	9	*
LEAF_NODE	1875:9	1875:9	10	*
FIELD	1875:10	1875:10	9	ndir
LEAF_NODE	1875:10	1875:10	10	ndir
LEAF_NODE	1875:14	1875:14	8	)
LEAF_NODE	1875:15	1875:15	8	++
LEAF_NODE	1875:17	1875:17	7	;
JUMP_STATEMENT	1876:8	1876:17	6	return ( 1 ) ;
KEYWORD	1876:8	1876:8	7	return
LEAF_NODE	1876:8	1876:8	8	return
DESTINATION	1876:14	1876:14	7	( 1 )
EXPR	1876:14	1876:16	8	( 1 )
LEAF_NODE	1876:14	1876:14	9	(
FIELD	1876:15	1876:15	9	1
LEAF_NODE	1876:15	1876:15	10	1
LEAF_NODE	1876:16	1876:16	9	)
LEAF_NODE	1876:17	1876:17	7	;
LEAF_NODE	1877:4	1877:4	5	}
SELECTION	1880:4	1881:8	3	
KEYWORD	1880:4	1880:4	4	if
LEAF_NODE	1880:4	1880:4	5	if
LEAF_NODE	1880:6	1880:6	4	(
CONDITION	1880:8	1880:8	4	tif -> tif_flags & TIFF_BIGTIFF
EXPR	1880:8	1880:23	5	tif -> tif_flags & TIFF_BIGTIFF
FIELD	1880:8	1880:13	6	tif -> tif_flags
LEAF_NODE	1880:8	1880:8	7	tif
LEAF_NODE	1880:11	1880:11	7	->
LEAF_NODE	1880:13	1880:13	7	tif_flags
LEAF_NODE	1880:22	1880:22	6	&
FIELD	1880:23	1880:23	6	TIFF_BIGTIFF
LEAF_NODE	1880:23	1880:23	7	TIFF_BIGTIFF
LEAF_NODE	1880:36	1880:36	4	)
STATEMENTS	1881:8	1881:8	4	
JUMP_STATEMENT	1881:8	1882:69	5	return TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , tag , count , value ) ;
KEYWORD	1881:8	1881:8	6	return
LEAF_NODE	1881:8	1881:8	7	return
DESTINATION	1881:15	1881:15	6	TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , tag , count , value )
EXPR	1881:15	1881:15	7	TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , tag , count , value )
FUNCTION_CALL	1881:15	1882:68	8	TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , tag , count , value )
CALLEE	1881:15	1881:15	9	TIFFWriteDirectoryTagCheckedIfd8Array
LEAF_NODE	1881:15	1881:15	10	TIFFWriteDirectoryTagCheckedIfd8Array
LEAF_NODE	1881:52	1881:52	9	(
ARGUMENT	1881:53	1881:53	9	tif
FIELD	1881:53	1881:53	10	tif
LEAF_NODE	1881:53	1881:53	11	tif
LEAF_NODE	1881:56	1881:56	9	,
ARGUMENT	1881:57	1881:57	9	ndir
FIELD	1881:57	1881:57	10	ndir
LEAF_NODE	1881:57	1881:57	11	ndir
LEAF_NODE	1881:61	1881:61	9	,
ARGUMENT	1881:62	1881:62	9	dir
FIELD	1881:62	1881:62	10	dir
LEAF_NODE	1881:62	1881:62	11	dir
LEAF_NODE	1881:65	1881:65	9	,
ARGUMENT	1882:53	1882:53	9	tag
FIELD	1882:53	1882:53	10	tag
LEAF_NODE	1882:53	1882:53	11	tag
LEAF_NODE	1882:56	1882:56	9	,
ARGUMENT	1882:57	1882:57	9	count
FIELD	1882:57	1882:57	10	count
LEAF_NODE	1882:57	1882:57	11	count
LEAF_NODE	1882:62	1882:62	9	,
ARGUMENT	1882:63	1882:63	9	value
FIELD	1882:63	1882:63	10	value
LEAF_NODE	1882:63	1882:63	11	value
LEAF_NODE	1882:68	1882:68	9	)
LEAF_NODE	1882:69	1882:69	6	;
EXPR_STATEMENT	1889:4	1889:41	3	p = _TIFFmalloc ( count * sizeof ( uint32 ) ) ;
EXPR	1889:4	1889:4	4	p = _TIFFmalloc ( count * sizeof ( uint32 ) )
ASSIGN	1889:4	1889:8	5	p = _TIFFmalloc ( count * sizeof ( uint32 ) )
LVAL	1889:4	1889:4	6	p
FIELD	1889:4	1889:4	7	p
LEAF_NODE	1889:4	1889:4	8	p
ASSIGN_OP	1889:6	1889:6	6	=
LEAF_NODE	1889:6	1889:6	7	=
RVAL	1889:8	1889:8	6	_TIFFmalloc ( count * sizeof ( uint32 ) )
FUNCTION_CALL	1889:8	1889:40	7	_TIFFmalloc ( count * sizeof ( uint32 ) )
CALLEE	1889:8	1889:8	8	_TIFFmalloc
LEAF_NODE	1889:8	1889:8	9	_TIFFmalloc
LEAF_NODE	1889:19	1889:19	8	(
ARGUMENT	1889:20	1889:26	8	count * sizeof ( uint32 )
FIELD	1889:20	1889:20	9	count
LEAF_NODE	1889:20	1889:20	10	count
LEAF_NODE	1889:25	1889:25	9	*
FUNCTION_CALL	1889:26	1889:39	9	sizeof ( uint32 )
CALLEE	1889:26	1889:26	10	sizeof
LEAF_NODE	1889:26	1889:26	11	sizeof
LEAF_NODE	1889:32	1889:32	10	(
ARGUMENT	1889:33	1889:33	10	uint32
FIELD	1889:33	1889:33	11	uint32
LEAF_NODE	1889:33	1889:33	12	uint32
LEAF_NODE	1889:39	1889:39	10	)
LEAF_NODE	1889:40	1889:40	8	)
LEAF_NODE	1889:41	1889:41	4	;
SELECTION	1890:4	1891:4	3	
KEYWORD	1890:4	1890:4	4	if
LEAF_NODE	1890:4	1890:4	5	if
LEAF_NODE	1890:7	1890:7	4	(
CONDITION	1890:8	1890:8	4	p == NULL
EXPR	1890:8	1890:11	5	p == NULL
FIELD	1890:8	1890:8	6	p
LEAF_NODE	1890:8	1890:8	7	p
EQ_OPERATOR	1890:9	1890:9	6	==
LEAF_NODE	1890:9	1890:9	7	==
FIELD	1890:11	1890:11	6	NULL
LEAF_NODE	1890:11	1890:11	7	NULL
LEAF_NODE	1890:15	1890:15	4	)
STATEMENTS	1891:4	1894:4	4	
LEAF_NODE	1891:4	1891:4	5	{
STATEMENTS	1892:8	1893:8	5	
EXPR_STATEMENT	1892:8	1892:64	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1892:8	1892:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1892:8	1892:63	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1892:8	1892:8	9	TIFFErrorExt
LEAF_NODE	1892:8	1892:8	10	TIFFErrorExt
LEAF_NODE	1892:20	1892:20	9	(
ARGUMENT	1892:21	1892:21	9	tif -> tif_clientdata
FIELD	1892:21	1892:26	10	tif -> tif_clientdata
LEAF_NODE	1892:21	1892:21	11	tif
LEAF_NODE	1892:24	1892:24	11	->
LEAF_NODE	1892:26	1892:26	11	tif_clientdata
LEAF_NODE	1892:40	1892:40	9	,
ARGUMENT	1892:41	1892:41	9	module
FIELD	1892:41	1892:41	10	module
LEAF_NODE	1892:41	1892:41	11	module
LEAF_NODE	1892:47	1892:47	9	,
ARGUMENT	1892:48	1892:48	9	"Out of memory"
FIELD	1892:48	1892:48	10	"Out of memory"
LEAF_NODE	1892:48	1892:48	11	"Out of memory"
LEAF_NODE	1892:63	1892:63	9	)
LEAF_NODE	1892:64	1892:64	7	;
JUMP_STATEMENT	1893:8	1893:17	6	return ( 0 ) ;
KEYWORD	1893:8	1893:8	7	return
LEAF_NODE	1893:8	1893:8	8	return
DESTINATION	1893:14	1893:14	7	( 0 )
EXPR	1893:14	1893:16	8	( 0 )
LEAF_NODE	1893:14	1893:14	9	(
FIELD	1893:15	1893:15	9	0
LEAF_NODE	1893:15	1893:15	10	0
LEAF_NODE	1893:16	1893:16	9	)
LEAF_NODE	1893:17	1893:17	7	;
LEAF_NODE	1894:4	1894:4	5	}
LEAF_NODE	1896:4	1896:4	3	for
LEAF_NODE	1896:8	1896:8	3	(
LEAF_NODE	1896:9	1896:9	3	q
LEAF_NODE	1896:10	1896:10	3	=
LEAF_NODE	1896:11	1896:11	3	p
LEAF_NODE	1896:12	1896:12	3	,
EXPR_STATEMENT	1896:14	1896:28	3	ma = value , mb = 0 ;
EXPR	1896:14	1896:24	4	ma = value , mb = 0
ASSIGN	1896:14	1896:17	5	ma = value
LVAL	1896:14	1896:14	6	ma
FIELD	1896:14	1896:14	7	ma
LEAF_NODE	1896:14	1896:14	8	ma
ASSIGN_OP	1896:16	1896:16	6	=
LEAF_NODE	1896:16	1896:16	7	=
RVAL	1896:17	1896:17	6	value
FIELD	1896:17	1896:17	7	value
LEAF_NODE	1896:17	1896:17	8	value
LEAF_NODE	1896:22	1896:22	5	,
ASSIGN	1896:24	1896:27	5	mb = 0
LVAL	1896:24	1896:24	6	mb
FIELD	1896:24	1896:24	7	mb
LEAF_NODE	1896:24	1896:24	8	mb
ASSIGN_OP	1896:26	1896:26	6	=
LEAF_NODE	1896:26	1896:26	7	=
RVAL	1896:27	1896:27	6	0
FIELD	1896:27	1896:27	7	0
LEAF_NODE	1896:27	1896:27	8	0
LEAF_NODE	1896:28	1896:28	4	;
EXPR_STATEMENT	1896:30	1896:38	3	mb < count ;
EXPR	1896:30	1896:33	4	mb < count
FIELD	1896:30	1896:30	5	mb
LEAF_NODE	1896:30	1896:30	6	mb
REL_OPERATOR	1896:32	1896:32	5	<
LEAF_NODE	1896:32	1896:32	6	<
FIELD	1896:33	1896:33	5	count
LEAF_NODE	1896:33	1896:33	6	count
LEAF_NODE	1896:38	1896:38	4	;
LEAF_NODE	1896:40	1896:40	3	ma
LEAF_NODE	1896:42	1896:42	3	++
LEAF_NODE	1896:44	1896:44	3	,
LEAF_NODE	1896:46	1896:46	3	mb
LEAF_NODE	1896:48	1896:48	3	++
LEAF_NODE	1896:50	1896:50	3	,
LEAF_NODE	1896:52	1896:52	3	q
LEAF_NODE	1896:53	1896:53	3	++
LEAF_NODE	1896:55	1896:55	3	)
LEAF_NODE	1897:4	1897:4	3	{
STATEMENTS	1898:8	1905:8	3	
SELECTION	1898:8	1899:8	4	
KEYWORD	1898:8	1898:8	5	if
LEAF_NODE	1898:8	1898:8	6	if
LEAF_NODE	1898:11	1898:11	5	(
CONDITION	1898:12	1898:12	5	* ma > 0xFFFFFFFF
EXPR	1898:12	1898:16	6	* ma > 0xFFFFFFFF
UNARY_EXPR	1898:12	1898:13	7	* ma
UNARY_OPERATOR	1898:12	1898:12	8	*
LEAF_NODE	1898:12	1898:12	9	*
FIELD	1898:13	1898:13	8	ma
LEAF_NODE	1898:13	1898:13	9	ma
REL_OPERATOR	1898:15	1898:15	7	>
LEAF_NODE	1898:15	1898:15	8	>
FIELD	1898:16	1898:16	7	0xFFFFFFFF
LEAF_NODE	1898:16	1898:16	8	0xFFFFFFFF
LEAF_NODE	1898:26	1898:26	5	)
STATEMENTS	1899:8	1904:8	5	
LEAF_NODE	1899:8	1899:8	6	{
STATEMENTS	1900:12	1903:12	6	
EXPR_STATEMENT	1900:12	1901:95	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to write value larger than 0xFFFFFFFF in Classic TIFF file." ) ;
EXPR	1900:12	1900:12	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to write value larger than 0xFFFFFFFF in Classic TIFF file." )
FUNCTION_CALL	1900:12	1901:94	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to write value larger than 0xFFFFFFFF in Classic TIFF file." )
CALLEE	1900:12	1900:12	10	TIFFErrorExt
LEAF_NODE	1900:12	1900:12	11	TIFFErrorExt
LEAF_NODE	1900:24	1900:24	10	(
ARGUMENT	1900:25	1900:25	10	tif -> tif_clientdata
FIELD	1900:25	1900:30	11	tif -> tif_clientdata
LEAF_NODE	1900:25	1900:25	12	tif
LEAF_NODE	1900:28	1900:28	12	->
LEAF_NODE	1900:30	1900:30	12	tif_clientdata
LEAF_NODE	1900:44	1900:44	10	,
ARGUMENT	1900:45	1900:45	10	module
FIELD	1900:45	1900:45	11	module
LEAF_NODE	1900:45	1900:45	12	module
LEAF_NODE	1900:51	1900:51	10	,
ARGUMENT	1901:25	1901:25	10	"Attempt to write value larger than 0xFFFFFFFF in Classic TIFF file."
FIELD	1901:25	1901:25	11	"Attempt to write value larger than 0xFFFFFFFF in Classic TIFF file."
LEAF_NODE	1901:25	1901:25	12	"Attempt to write value larger than 0xFFFFFFFF in Classic TIFF file."
LEAF_NODE	1901:94	1901:94	10	)
LEAF_NODE	1901:95	1901:95	8	;
EXPR_STATEMENT	1902:12	1902:24	7	_TIFFfree ( p ) ;
EXPR	1902:12	1902:12	8	_TIFFfree ( p )
FUNCTION_CALL	1902:12	1902:23	9	_TIFFfree ( p )
CALLEE	1902:12	1902:12	10	_TIFFfree
LEAF_NODE	1902:12	1902:12	11	_TIFFfree
LEAF_NODE	1902:21	1902:21	10	(
ARGUMENT	1902:22	1902:22	10	p
FIELD	1902:22	1902:22	11	p
LEAF_NODE	1902:22	1902:22	12	p
LEAF_NODE	1902:23	1902:23	10	)
LEAF_NODE	1902:24	1902:24	8	;
JUMP_STATEMENT	1903:12	1903:21	7	return ( 0 ) ;
KEYWORD	1903:12	1903:12	8	return
LEAF_NODE	1903:12	1903:12	9	return
DESTINATION	1903:18	1903:18	8	( 0 )
EXPR	1903:18	1903:20	9	( 0 )
LEAF_NODE	1903:18	1903:18	10	(
FIELD	1903:19	1903:19	10	0
LEAF_NODE	1903:19	1903:19	11	0
LEAF_NODE	1903:20	1903:20	10	)
LEAF_NODE	1903:21	1903:21	8	;
LEAF_NODE	1904:8	1904:8	6	}
EXPR_STATEMENT	1905:8	1905:25	4	* q = ( uint32 ) ( * ma ) ;
EXPR	1905:8	1905:8	5	* q = ( uint32 ) ( * ma )
ASSIGN	1905:8	1905:12	6	* q = ( uint32 ) ( * ma )
LVAL	1905:8	1905:8	7	* q
UNARY_EXPR	1905:8	1905:9	8	* q
UNARY_OPERATOR	1905:8	1905:8	9	*
LEAF_NODE	1905:8	1905:8	10	*
FIELD	1905:9	1905:9	9	q
LEAF_NODE	1905:9	1905:9	10	q
ASSIGN_OP	1905:10	1905:10	7	=
LEAF_NODE	1905:10	1905:10	8	=
RVAL	1905:12	1905:24	7	( uint32 ) ( * ma )
LEAF_NODE	1905:12	1905:12	8	(
TYPE_NAME	1905:13	1905:13	8	uint32
LEAF_NODE	1905:13	1905:13	9	uint32
LEAF_NODE	1905:19	1905:19	8	)
LEAF_NODE	1905:20	1905:20	8	(
UNARY_EXPR	1905:21	1905:22	8	* ma
UNARY_OPERATOR	1905:21	1905:21	9	*
LEAF_NODE	1905:21	1905:21	10	*
FIELD	1905:22	1905:22	9	ma
LEAF_NODE	1905:22	1905:22	10	ma
LEAF_NODE	1905:24	1905:24	8	)
LEAF_NODE	1905:25	1905:25	5	;
LEAF_NODE	1906:4	1906:4	3	}
EXPR_STATEMENT	1908:4	1908:68	3	o = TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , tag , count , p ) ;
EXPR	1908:4	1908:4	4	o = TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , tag , count , p )
ASSIGN	1908:4	1908:6	5	o = TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , tag , count , p )
LVAL	1908:4	1908:4	6	o
FIELD	1908:4	1908:4	7	o
LEAF_NODE	1908:4	1908:4	8	o
ASSIGN_OP	1908:5	1908:5	6	=
LEAF_NODE	1908:5	1908:5	7	=
RVAL	1908:6	1908:6	6	TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , tag , count , p )
FUNCTION_CALL	1908:6	1908:67	7	TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , tag , count , p )
CALLEE	1908:6	1908:6	8	TIFFWriteDirectoryTagCheckedIfdArray
LEAF_NODE	1908:6	1908:6	9	TIFFWriteDirectoryTagCheckedIfdArray
LEAF_NODE	1908:42	1908:42	8	(
ARGUMENT	1908:43	1908:43	8	tif
FIELD	1908:43	1908:43	9	tif
LEAF_NODE	1908:43	1908:43	10	tif
LEAF_NODE	1908:46	1908:46	8	,
ARGUMENT	1908:47	1908:47	8	ndir
FIELD	1908:47	1908:47	9	ndir
LEAF_NODE	1908:47	1908:47	10	ndir
LEAF_NODE	1908:51	1908:51	8	,
ARGUMENT	1908:52	1908:52	8	dir
FIELD	1908:52	1908:52	9	dir
LEAF_NODE	1908:52	1908:52	10	dir
LEAF_NODE	1908:55	1908:55	8	,
ARGUMENT	1908:56	1908:56	8	tag
FIELD	1908:56	1908:56	9	tag
LEAF_NODE	1908:56	1908:56	10	tag
LEAF_NODE	1908:59	1908:59	8	,
ARGUMENT	1908:60	1908:60	8	count
FIELD	1908:60	1908:60	9	count
LEAF_NODE	1908:60	1908:60	10	count
LEAF_NODE	1908:65	1908:65	8	,
ARGUMENT	1908:66	1908:66	8	p
FIELD	1908:66	1908:66	9	p
LEAF_NODE	1908:66	1908:66	10	p
LEAF_NODE	1908:67	1908:67	8	)
LEAF_NODE	1908:68	1908:68	4	;
EXPR_STATEMENT	1909:4	1909:16	3	_TIFFfree ( p ) ;
EXPR	1909:4	1909:4	4	_TIFFfree ( p )
FUNCTION_CALL	1909:4	1909:15	5	_TIFFfree ( p )
CALLEE	1909:4	1909:4	6	_TIFFfree
LEAF_NODE	1909:4	1909:4	7	_TIFFfree
LEAF_NODE	1909:13	1909:13	6	(
ARGUMENT	1909:14	1909:14	6	p
FIELD	1909:14	1909:14	7	p
LEAF_NODE	1909:14	1909:14	8	p
LEAF_NODE	1909:15	1909:15	6	)
LEAF_NODE	1909:16	1909:16	4	;
LEAF_NODE	1911:4	1911:4	3	return
LEAF_NODE	1911:10	1911:10	3	(
LEAF_NODE	1911:11	1911:11	3	o
LEAF_NODE	1911:12	1911:12	3	)
LEAF_NODE	1911:13	1911:13	3	;
LEAF_NODE	1912:0	1912:0	2	}
FUNCTION_DEF	1915:0	1975:0	1	
RETURN_TYPE	1915:0	1915:7	2	static int
LEAF_NODE	1915:0	1915:0	3	static
TYPE_NAME	1915:7	1915:7	3	int
LEAF_NODE	1915:7	1915:7	4	int
FUNCTION_NAME	1916:0	1916:0	2	TIFFWriteDirectoryTagShortLongLong8Array
LEAF_NODE	1916:0	1916:0	3	TIFFWriteDirectoryTagShortLongLong8Array
PARAMETER_LIST	1916:40	1916:124	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint64 * value )
LEAF_NODE	1916:40	1916:40	3	(
PARAMETER_DECL	1916:41	1916:47	3	TIFF * tif
TYPE	1916:41	1916:45	4	TIFF *
TYPE_NAME	1916:41	1916:41	5	TIFF
LEAF_NODE	1916:41	1916:41	6	TIFF
POINTER	1916:45	1916:45	5	*
LEAF_NODE	1916:45	1916:45	6	*
NAME	1916:47	1916:47	4	tif
LEAF_NODE	1916:47	1916:47	5	tif
LEAF_NODE	1916:50	1916:50	3	,
PARAMETER_DECL	1916:52	1916:60	3	uint32 * ndir
TYPE	1916:52	1916:58	4	uint32 *
TYPE_NAME	1916:52	1916:52	5	uint32
LEAF_NODE	1916:52	1916:52	6	uint32
POINTER	1916:58	1916:58	5	*
LEAF_NODE	1916:58	1916:58	6	*
NAME	1916:60	1916:60	4	ndir
LEAF_NODE	1916:60	1916:60	5	ndir
LEAF_NODE	1916:64	1916:64	3	,
PARAMETER_DECL	1916:66	1916:80	3	TIFFDirEntry * dir
TYPE	1916:66	1916:78	4	TIFFDirEntry *
TYPE_NAME	1916:66	1916:66	5	TIFFDirEntry
LEAF_NODE	1916:66	1916:66	6	TIFFDirEntry
POINTER	1916:78	1916:78	5	*
LEAF_NODE	1916:78	1916:78	6	*
NAME	1916:80	1916:80	4	dir
LEAF_NODE	1916:80	1916:80	5	dir
LEAF_NODE	1916:83	1916:83	3	,
PARAMETER_DECL	1916:85	1916:92	3	uint16 tag
TYPE	1916:85	1916:85	4	uint16
TYPE_NAME	1916:85	1916:85	5	uint16
LEAF_NODE	1916:85	1916:85	6	uint16
NAME	1916:92	1916:92	4	tag
LEAF_NODE	1916:92	1916:92	5	tag
LEAF_NODE	1916:95	1916:95	3	,
PARAMETER_DECL	1916:97	1916:104	3	uint32 count
TYPE	1916:97	1916:97	4	uint32
TYPE_NAME	1916:97	1916:97	5	uint32
LEAF_NODE	1916:97	1916:97	6	uint32
NAME	1916:104	1916:104	4	count
LEAF_NODE	1916:104	1916:104	5	count
LEAF_NODE	1916:109	1916:109	3	,
PARAMETER_DECL	1916:111	1916:119	3	uint64 * value
TYPE	1916:111	1916:117	4	uint64 *
TYPE_NAME	1916:111	1916:111	5	uint64
LEAF_NODE	1916:111	1916:111	6	uint64
POINTER	1916:117	1916:117	5	*
LEAF_NODE	1916:117	1916:117	6	*
NAME	1916:119	1916:119	4	value
LEAF_NODE	1916:119	1916:119	5	value
LEAF_NODE	1916:124	1916:124	3	)
LEAF_NODE	1917:0	1917:0	2	{
STATEMENTS	1918:1	1974:10	2	
LEAF_NODE	1918:1	1918:1	3	static
SIMPLE_DECL	1918:8	1918:72	3	const char [ ] module ; module = "TIFFWriteDirectoryTagShortLongLong8Array" ;
VAR_DECL	1918:8	1918:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagShortLongLong8Array"
TYPE	1918:8	1918:25	5	const char [ ]
TYPE_NAME	1918:8	1918:14	6	const char
LEAF_NODE	1918:8	1918:8	7	const
LEAF_NODE	1918:14	1918:14	7	char
TYPE_SUFFIX	1918:25	1918:26	6	[ ]
LEAF_NODE	1918:25	1918:25	7	[
LEAF_NODE	1918:26	1918:26	7	]
NAME	1918:19	1918:19	5	module
LEAF_NODE	1918:19	1918:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1918:19	1918:19	5	module = "TIFFWriteDirectoryTagShortLongLong8Array"
ASSIGN	1918:19	1918:30	6	module = "TIFFWriteDirectoryTagShortLongLong8Array"
LVAL	1918:19	1918:19	7	module
NAME	1918:19	1918:19	8	module
LEAF_NODE	1918:19	1918:19	9	module
ASSIGN_OP	1918:28	1918:28	7	=
LEAF_NODE	1918:28	1918:28	8	=
RVAL	1918:30	1918:30	7	"TIFFWriteDirectoryTagShortLongLong8Array"
FIELD	1918:30	1918:30	8	"TIFFWriteDirectoryTagShortLongLong8Array"
LEAF_NODE	1918:30	1918:30	9	"TIFFWriteDirectoryTagShortLongLong8Array"
LEAF_NODE	1918:72	1918:72	4	;
SIMPLE_DECL	1919:1	1919:11	3	uint64 * ma ;
VAR_DECL	1919:1	1919:9	4	uint64 * ma
TYPE	1919:1	1919:7	5	uint64 *
TYPE_NAME	1919:1	1919:1	6	uint64
LEAF_NODE	1919:1	1919:1	7	uint64
POINTER	1919:7	1919:7	6	*
LEAF_NODE	1919:7	1919:7	7	*
NAME	1919:9	1919:9	5	ma
LEAF_NODE	1919:9	1919:9	6	ma
LEAF_NODE	1919:11	1919:11	4	;
SIMPLE_DECL	1920:1	1920:10	3	uint32 mb ;
VAR_DECL	1920:1	1920:8	4	uint32 mb
TYPE	1920:1	1920:1	5	uint32
TYPE_NAME	1920:1	1920:1	6	uint32
LEAF_NODE	1920:1	1920:1	7	uint32
NAME	1920:8	1920:8	5	mb
LEAF_NODE	1920:8	1920:8	6	mb
LEAF_NODE	1920:10	1920:10	4	;
SIMPLE_DECL	1921:1	1921:8	3	uint8 n ;
VAR_DECL	1921:1	1921:7	4	uint8 n
TYPE	1921:1	1921:1	5	uint8
TYPE_NAME	1921:1	1921:1	6	uint8
LEAF_NODE	1921:1	1921:1	7	uint8
NAME	1921:7	1921:7	5	n
LEAF_NODE	1921:7	1921:7	6	n
LEAF_NODE	1921:8	1921:8	4	;
SIMPLE_DECL	1922:1	1922:6	3	int o ;
VAR_DECL	1922:1	1922:5	4	int o
TYPE	1922:1	1922:1	5	int
TYPE_NAME	1922:1	1922:1	6	int
LEAF_NODE	1922:1	1922:1	7	int
NAME	1922:5	1922:5	5	o
LEAF_NODE	1922:5	1922:5	6	o
LEAF_NODE	1922:6	1922:6	4	;
SELECTION	1923:1	1924:1	3	
KEYWORD	1923:1	1923:1	4	if
LEAF_NODE	1923:1	1923:1	5	if
LEAF_NODE	1923:4	1923:4	4	(
CONDITION	1923:5	1923:5	4	dir == NULL
EXPR	1923:5	1923:10	5	dir == NULL
FIELD	1923:5	1923:5	6	dir
LEAF_NODE	1923:5	1923:5	7	dir
EQ_OPERATOR	1923:8	1923:8	6	==
LEAF_NODE	1923:8	1923:8	7	==
FIELD	1923:10	1923:10	6	NULL
LEAF_NODE	1923:10	1923:10	7	NULL
LEAF_NODE	1923:14	1923:14	4	)
STATEMENTS	1924:1	1927:1	4	
LEAF_NODE	1924:1	1924:1	5	{
STATEMENTS	1925:2	1926:2	5	
EXPR_STATEMENT	1925:2	1925:11	6	( * ndir ) ++ ;
EXPR	1925:2	1925:9	7	( * ndir ) ++
LEAF_NODE	1925:2	1925:2	8	(
UNARY_EXPR	1925:3	1925:4	8	* ndir
UNARY_OPERATOR	1925:3	1925:3	9	*
LEAF_NODE	1925:3	1925:3	10	*
FIELD	1925:4	1925:4	9	ndir
LEAF_NODE	1925:4	1925:4	10	ndir
LEAF_NODE	1925:8	1925:8	8	)
LEAF_NODE	1925:9	1925:9	8	++
LEAF_NODE	1925:11	1925:11	7	;
JUMP_STATEMENT	1926:2	1926:11	6	return ( 1 ) ;
KEYWORD	1926:2	1926:2	7	return
LEAF_NODE	1926:2	1926:2	8	return
DESTINATION	1926:8	1926:8	7	( 1 )
EXPR	1926:8	1926:10	8	( 1 )
LEAF_NODE	1926:8	1926:8	9	(
FIELD	1926:9	1926:9	9	1
LEAF_NODE	1926:9	1926:9	10	1
LEAF_NODE	1926:10	1926:10	9	)
LEAF_NODE	1926:11	1926:11	7	;
LEAF_NODE	1927:1	1927:1	5	}
EXPR_STATEMENT	1928:1	1928:4	3	n = 0 ;
EXPR	1928:1	1928:1	4	n = 0
ASSIGN	1928:1	1928:3	5	n = 0
LVAL	1928:1	1928:1	6	n
FIELD	1928:1	1928:1	7	n
LEAF_NODE	1928:1	1928:1	8	n
ASSIGN_OP	1928:2	1928:2	6	=
LEAF_NODE	1928:2	1928:2	7	=
RVAL	1928:3	1928:3	6	0
FIELD	1928:3	1928:3	7	0
LEAF_NODE	1928:3	1928:3	8	0
LEAF_NODE	1928:4	1928:4	4	;
ITERATION	1929:1	1930:1	3	
KEYWORD	1929:1	1929:1	4	for
LEAF_NODE	1929:1	1929:1	5	for
LEAF_NODE	1929:5	1929:5	4	(
FOR_INIT	1929:6	1929:20	4	ma = value , mb = 0 ;
EXPR	1929:6	1929:16	5	ma = value , mb = 0
ASSIGN	1929:6	1929:9	6	ma = value
LVAL	1929:6	1929:6	7	ma
FIELD	1929:6	1929:6	8	ma
LEAF_NODE	1929:6	1929:6	9	ma
ASSIGN_OP	1929:8	1929:8	7	=
LEAF_NODE	1929:8	1929:8	8	=
RVAL	1929:9	1929:9	7	value
FIELD	1929:9	1929:9	8	value
LEAF_NODE	1929:9	1929:9	9	value
LEAF_NODE	1929:14	1929:14	6	,
ASSIGN	1929:16	1929:19	6	mb = 0
LVAL	1929:16	1929:16	7	mb
FIELD	1929:16	1929:16	8	mb
LEAF_NODE	1929:16	1929:16	9	mb
ASSIGN_OP	1929:18	1929:18	7	=
LEAF_NODE	1929:18	1929:18	8	=
RVAL	1929:19	1929:19	7	0
FIELD	1929:19	1929:19	8	0
LEAF_NODE	1929:19	1929:19	9	0
LEAF_NODE	1929:20	1929:20	5	;
CONDITION	1929:22	1929:22	4	mb < count
EXPR	1929:22	1929:25	5	mb < count
FIELD	1929:22	1929:22	6	mb
LEAF_NODE	1929:22	1929:22	7	mb
REL_OPERATOR	1929:24	1929:24	6	<
LEAF_NODE	1929:24	1929:24	7	<
FIELD	1929:25	1929:25	6	count
LEAF_NODE	1929:25	1929:25	7	count
LEAF_NODE	1929:30	1929:30	4	;
FOR_EXPR	1929:32	1929:32	4	ma ++ , mb ++
EXPR	1929:32	1929:38	5	ma ++ , mb ++
FIELD	1929:32	1929:34	6	ma ++
LEAF_NODE	1929:32	1929:32	7	ma
LEAF_NODE	1929:34	1929:34	7	++
LEAF_NODE	1929:36	1929:36	6	,
FIELD	1929:38	1929:40	6	mb ++
LEAF_NODE	1929:38	1929:38	7	mb
LEAF_NODE	1929:40	1929:40	7	++
LEAF_NODE	1929:42	1929:42	4	)
STATEMENTS	1930:1	1938:1	4	
LEAF_NODE	1930:1	1930:1	5	{
STATEMENTS	1931:2	1933:2	5	
SELECTION	1931:2	1932:3	6	
KEYWORD	1931:2	1931:2	7	if
LEAF_NODE	1931:2	1931:2	8	if
LEAF_NODE	1931:5	1931:5	7	(
CONDITION	1931:6	1931:6	7	( n == 0 ) && ( * ma > 0xFFFF )
EXPR	1931:6	1931:6	8	( n == 0 ) && ( * ma > 0xFFFF )
AND	1931:6	1931:14	9	( n == 0 ) && ( * ma > 0xFFFF )
EXPR	1931:6	1931:11	10	( n == 0 )
LEAF_NODE	1931:6	1931:6	11	(
FIELD	1931:7	1931:7	11	n
LEAF_NODE	1931:7	1931:7	12	n
EQ_OPERATOR	1931:8	1931:8	11	==
LEAF_NODE	1931:8	1931:8	12	==
FIELD	1931:10	1931:10	11	0
LEAF_NODE	1931:10	1931:10	12	0
LEAF_NODE	1931:11	1931:11	11	)
LEAF_NODE	1931:12	1931:12	10	&&
EXPR	1931:14	1931:25	10	( * ma > 0xFFFF )
LEAF_NODE	1931:14	1931:14	11	(
UNARY_EXPR	1931:15	1931:16	11	* ma
UNARY_OPERATOR	1931:15	1931:15	12	*
LEAF_NODE	1931:15	1931:15	13	*
FIELD	1931:16	1931:16	12	ma
LEAF_NODE	1931:16	1931:16	13	ma
REL_OPERATOR	1931:18	1931:18	11	>
LEAF_NODE	1931:18	1931:18	12	>
FIELD	1931:19	1931:19	11	0xFFFF
LEAF_NODE	1931:19	1931:19	12	0xFFFF
LEAF_NODE	1931:25	1931:25	11	)
LEAF_NODE	1931:26	1931:26	7	)
STATEMENTS	1932:3	1932:3	7	
EXPR_STATEMENT	1932:3	1932:6	8	n = 1 ;
EXPR	1932:3	1932:3	9	n = 1
ASSIGN	1932:3	1932:5	10	n = 1
LVAL	1932:3	1932:3	11	n
FIELD	1932:3	1932:3	12	n
LEAF_NODE	1932:3	1932:3	13	n
ASSIGN_OP	1932:4	1932:4	11	=
LEAF_NODE	1932:4	1932:4	12	=
RVAL	1932:5	1932:5	11	1
FIELD	1932:5	1932:5	12	1
LEAF_NODE	1932:5	1932:5	13	1
LEAF_NODE	1932:6	1932:6	9	;
SELECTION	1933:2	1934:2	6	
KEYWORD	1933:2	1933:2	7	if
LEAF_NODE	1933:2	1933:2	8	if
LEAF_NODE	1933:5	1933:5	7	(
CONDITION	1933:6	1933:6	7	( n == 1 ) && ( * ma > 0xFFFFFFFF )
EXPR	1933:6	1933:6	8	( n == 1 ) && ( * ma > 0xFFFFFFFF )
AND	1933:6	1933:14	9	( n == 1 ) && ( * ma > 0xFFFFFFFF )
EXPR	1933:6	1933:11	10	( n == 1 )
LEAF_NODE	1933:6	1933:6	11	(
FIELD	1933:7	1933:7	11	n
LEAF_NODE	1933:7	1933:7	12	n
EQ_OPERATOR	1933:8	1933:8	11	==
LEAF_NODE	1933:8	1933:8	12	==
FIELD	1933:10	1933:10	11	1
LEAF_NODE	1933:10	1933:10	12	1
LEAF_NODE	1933:11	1933:11	11	)
LEAF_NODE	1933:12	1933:12	10	&&
EXPR	1933:14	1933:29	10	( * ma > 0xFFFFFFFF )
LEAF_NODE	1933:14	1933:14	11	(
UNARY_EXPR	1933:15	1933:16	11	* ma
UNARY_OPERATOR	1933:15	1933:15	12	*
LEAF_NODE	1933:15	1933:15	13	*
FIELD	1933:16	1933:16	12	ma
LEAF_NODE	1933:16	1933:16	13	ma
REL_OPERATOR	1933:18	1933:18	11	>
LEAF_NODE	1933:18	1933:18	12	>
FIELD	1933:19	1933:19	11	0xFFFFFFFF
LEAF_NODE	1933:19	1933:19	12	0xFFFFFFFF
LEAF_NODE	1933:29	1933:29	11	)
LEAF_NODE	1933:30	1933:30	7	)
STATEMENTS	1934:2	1937:2	7	
LEAF_NODE	1934:2	1934:2	8	{
STATEMENTS	1935:3	1936:3	8	
EXPR_STATEMENT	1935:3	1935:6	9	n = 2 ;
EXPR	1935:3	1935:3	10	n = 2
ASSIGN	1935:3	1935:5	11	n = 2
LVAL	1935:3	1935:3	12	n
FIELD	1935:3	1935:3	13	n
LEAF_NODE	1935:3	1935:3	14	n
ASSIGN_OP	1935:4	1935:4	12	=
LEAF_NODE	1935:4	1935:4	13	=
RVAL	1935:5	1935:5	12	2
FIELD	1935:5	1935:5	13	2
LEAF_NODE	1935:5	1935:5	14	2
LEAF_NODE	1935:6	1935:6	10	;
JUMP_STATEMENT	1936:3	1936:8	9	break DESTINATION ;
KEYWORD	1936:3	1936:3	10	break
LEAF_NODE	1936:3	1936:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1936:8	1936:8	10	;
LEAF_NODE	1937:2	1937:2	8	}
LEAF_NODE	1938:1	1938:1	5	}
SELECTION	1939:1	1940:1	3	
KEYWORD	1939:1	1939:1	4	if
LEAF_NODE	1939:1	1939:1	5	if
LEAF_NODE	1939:4	1939:4	4	(
CONDITION	1939:5	1939:5	4	n == 0
EXPR	1939:5	1939:8	5	n == 0
FIELD	1939:5	1939:5	6	n
LEAF_NODE	1939:5	1939:5	7	n
EQ_OPERATOR	1939:6	1939:6	6	==
LEAF_NODE	1939:6	1939:6	7	==
FIELD	1939:8	1939:8	6	0
LEAF_NODE	1939:8	1939:8	7	0
LEAF_NODE	1939:9	1939:9	4	)
STATEMENTS	1940:1	1953:1	4	
LEAF_NODE	1940:1	1940:1	5	{
STATEMENTS	1941:2	1952:2	5	
SIMPLE_DECL	1941:2	1941:11	6	uint16 * p ;
VAR_DECL	1941:2	1941:10	7	uint16 * p
TYPE	1941:2	1941:8	8	uint16 *
TYPE_NAME	1941:2	1941:2	9	uint16
LEAF_NODE	1941:2	1941:2	10	uint16
POINTER	1941:8	1941:8	9	*
LEAF_NODE	1941:8	1941:8	10	*
NAME	1941:10	1941:10	8	p
LEAF_NODE	1941:10	1941:10	9	p
LEAF_NODE	1941:11	1941:11	7	;
SIMPLE_DECL	1942:2	1942:11	6	uint16 * q ;
VAR_DECL	1942:2	1942:10	7	uint16 * q
TYPE	1942:2	1942:8	8	uint16 *
TYPE_NAME	1942:2	1942:2	9	uint16
LEAF_NODE	1942:2	1942:2	10	uint16
POINTER	1942:8	1942:8	9	*
LEAF_NODE	1942:8	1942:8	10	*
NAME	1942:10	1942:10	8	q
LEAF_NODE	1942:10	1942:10	9	q
LEAF_NODE	1942:11	1942:11	7	;
EXPR_STATEMENT	1943:2	1943:37	6	p = _TIFFmalloc ( count * sizeof ( uint16 ) ) ;
EXPR	1943:2	1943:2	7	p = _TIFFmalloc ( count * sizeof ( uint16 ) )
ASSIGN	1943:2	1943:4	8	p = _TIFFmalloc ( count * sizeof ( uint16 ) )
LVAL	1943:2	1943:2	9	p
FIELD	1943:2	1943:2	10	p
LEAF_NODE	1943:2	1943:2	11	p
ASSIGN_OP	1943:3	1943:3	9	=
LEAF_NODE	1943:3	1943:3	10	=
RVAL	1943:4	1943:4	9	_TIFFmalloc ( count * sizeof ( uint16 ) )
FUNCTION_CALL	1943:4	1943:36	10	_TIFFmalloc ( count * sizeof ( uint16 ) )
CALLEE	1943:4	1943:4	11	_TIFFmalloc
LEAF_NODE	1943:4	1943:4	12	_TIFFmalloc
LEAF_NODE	1943:15	1943:15	11	(
ARGUMENT	1943:16	1943:22	11	count * sizeof ( uint16 )
FIELD	1943:16	1943:16	12	count
LEAF_NODE	1943:16	1943:16	13	count
LEAF_NODE	1943:21	1943:21	12	*
FUNCTION_CALL	1943:22	1943:35	12	sizeof ( uint16 )
CALLEE	1943:22	1943:22	13	sizeof
LEAF_NODE	1943:22	1943:22	14	sizeof
LEAF_NODE	1943:28	1943:28	13	(
ARGUMENT	1943:29	1943:29	13	uint16
FIELD	1943:29	1943:29	14	uint16
LEAF_NODE	1943:29	1943:29	15	uint16
LEAF_NODE	1943:35	1943:35	13	)
LEAF_NODE	1943:36	1943:36	11	)
LEAF_NODE	1943:37	1943:37	7	;
SELECTION	1944:2	1945:2	6	
KEYWORD	1944:2	1944:2	7	if
LEAF_NODE	1944:2	1944:2	8	if
LEAF_NODE	1944:5	1944:5	7	(
CONDITION	1944:6	1944:6	7	p == NULL
EXPR	1944:6	1944:9	8	p == NULL
FIELD	1944:6	1944:6	9	p
LEAF_NODE	1944:6	1944:6	10	p
EQ_OPERATOR	1944:7	1944:7	9	==
LEAF_NODE	1944:7	1944:7	10	==
FIELD	1944:9	1944:9	9	NULL
LEAF_NODE	1944:9	1944:9	10	NULL
LEAF_NODE	1944:13	1944:13	7	)
STATEMENTS	1945:2	1948:2	7	
LEAF_NODE	1945:2	1945:2	8	{
STATEMENTS	1946:3	1947:3	8	
EXPR_STATEMENT	1946:3	1946:59	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1946:3	1946:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1946:3	1946:58	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1946:3	1946:3	12	TIFFErrorExt
LEAF_NODE	1946:3	1946:3	13	TIFFErrorExt
LEAF_NODE	1946:15	1946:15	12	(
ARGUMENT	1946:16	1946:16	12	tif -> tif_clientdata
FIELD	1946:16	1946:21	13	tif -> tif_clientdata
LEAF_NODE	1946:16	1946:16	14	tif
LEAF_NODE	1946:19	1946:19	14	->
LEAF_NODE	1946:21	1946:21	14	tif_clientdata
LEAF_NODE	1946:35	1946:35	12	,
ARGUMENT	1946:36	1946:36	12	module
FIELD	1946:36	1946:36	13	module
LEAF_NODE	1946:36	1946:36	14	module
LEAF_NODE	1946:42	1946:42	12	,
ARGUMENT	1946:43	1946:43	12	"Out of memory"
FIELD	1946:43	1946:43	13	"Out of memory"
LEAF_NODE	1946:43	1946:43	14	"Out of memory"
LEAF_NODE	1946:58	1946:58	12	)
LEAF_NODE	1946:59	1946:59	10	;
JUMP_STATEMENT	1947:3	1947:12	9	return ( 0 ) ;
KEYWORD	1947:3	1947:3	10	return
LEAF_NODE	1947:3	1947:3	11	return
DESTINATION	1947:9	1947:9	10	( 0 )
EXPR	1947:9	1947:11	11	( 0 )
LEAF_NODE	1947:9	1947:9	12	(
FIELD	1947:10	1947:10	12	0
LEAF_NODE	1947:10	1947:10	13	0
LEAF_NODE	1947:11	1947:11	12	)
LEAF_NODE	1947:12	1947:12	10	;
LEAF_NODE	1948:2	1948:2	8	}
LEAF_NODE	1949:2	1949:2	6	for
LEAF_NODE	1949:6	1949:6	6	(
LEAF_NODE	1949:7	1949:7	6	ma
LEAF_NODE	1949:9	1949:9	6	=
LEAF_NODE	1949:10	1949:10	6	value
LEAF_NODE	1949:15	1949:15	6	,
EXPR_STATEMENT	1949:17	1949:26	6	mb = 0 , q = p ;
EXPR	1949:17	1949:23	7	mb = 0 , q = p
ASSIGN	1949:17	1949:20	8	mb = 0
LVAL	1949:17	1949:17	9	mb
FIELD	1949:17	1949:17	10	mb
LEAF_NODE	1949:17	1949:17	11	mb
ASSIGN_OP	1949:19	1949:19	9	=
LEAF_NODE	1949:19	1949:19	10	=
RVAL	1949:20	1949:20	9	0
FIELD	1949:20	1949:20	10	0
LEAF_NODE	1949:20	1949:20	11	0
LEAF_NODE	1949:21	1949:21	8	,
ASSIGN	1949:23	1949:25	8	q = p
LVAL	1949:23	1949:23	9	q
FIELD	1949:23	1949:23	10	q
LEAF_NODE	1949:23	1949:23	11	q
ASSIGN_OP	1949:24	1949:24	9	=
LEAF_NODE	1949:24	1949:24	10	=
RVAL	1949:25	1949:25	9	p
FIELD	1949:25	1949:25	10	p
LEAF_NODE	1949:25	1949:25	11	p
LEAF_NODE	1949:26	1949:26	7	;
EXPR_STATEMENT	1949:28	1949:36	6	mb < count ;
EXPR	1949:28	1949:31	7	mb < count
FIELD	1949:28	1949:28	8	mb
LEAF_NODE	1949:28	1949:28	9	mb
REL_OPERATOR	1949:30	1949:30	8	<
LEAF_NODE	1949:30	1949:30	9	<
FIELD	1949:31	1949:31	8	count
LEAF_NODE	1949:31	1949:31	9	count
LEAF_NODE	1949:36	1949:36	7	;
LEAF_NODE	1949:38	1949:38	6	ma
LEAF_NODE	1949:40	1949:40	6	++
LEAF_NODE	1949:42	1949:42	6	,
LEAF_NODE	1949:44	1949:44	6	mb
LEAF_NODE	1949:46	1949:46	6	++
LEAF_NODE	1949:48	1949:48	6	,
LEAF_NODE	1949:50	1949:50	6	q
LEAF_NODE	1949:51	1949:51	6	++
LEAF_NODE	1949:53	1949:53	6	)
EXPR_STATEMENT	1950:3	1950:19	6	* q = ( uint16 ) ( * ma ) ;
EXPR	1950:3	1950:3	7	* q = ( uint16 ) ( * ma )
ASSIGN	1950:3	1950:6	8	* q = ( uint16 ) ( * ma )
LVAL	1950:3	1950:3	9	* q
UNARY_EXPR	1950:3	1950:4	10	* q
UNARY_OPERATOR	1950:3	1950:3	11	*
LEAF_NODE	1950:3	1950:3	12	*
FIELD	1950:4	1950:4	11	q
LEAF_NODE	1950:4	1950:4	12	q
ASSIGN_OP	1950:5	1950:5	9	=
LEAF_NODE	1950:5	1950:5	10	=
RVAL	1950:6	1950:18	9	( uint16 ) ( * ma )
LEAF_NODE	1950:6	1950:6	10	(
TYPE_NAME	1950:7	1950:7	10	uint16
LEAF_NODE	1950:7	1950:7	11	uint16
LEAF_NODE	1950:13	1950:13	10	)
LEAF_NODE	1950:14	1950:14	10	(
UNARY_EXPR	1950:15	1950:16	10	* ma
UNARY_OPERATOR	1950:15	1950:15	11	*
LEAF_NODE	1950:15	1950:15	12	*
FIELD	1950:16	1950:16	11	ma
LEAF_NODE	1950:16	1950:16	12	ma
LEAF_NODE	1950:18	1950:18	10	)
LEAF_NODE	1950:19	1950:19	7	;
EXPR_STATEMENT	1951:2	1951:68	6	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , p ) ;
EXPR	1951:2	1951:2	7	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , p )
ASSIGN	1951:2	1951:4	8	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , p )
LVAL	1951:2	1951:2	9	o
FIELD	1951:2	1951:2	10	o
LEAF_NODE	1951:2	1951:2	11	o
ASSIGN_OP	1951:3	1951:3	9	=
LEAF_NODE	1951:3	1951:3	10	=
RVAL	1951:4	1951:4	9	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , p )
FUNCTION_CALL	1951:4	1951:67	10	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , tag , count , p )
CALLEE	1951:4	1951:4	11	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	1951:4	1951:4	12	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	1951:42	1951:42	11	(
ARGUMENT	1951:43	1951:43	11	tif
FIELD	1951:43	1951:43	12	tif
LEAF_NODE	1951:43	1951:43	13	tif
LEAF_NODE	1951:46	1951:46	11	,
ARGUMENT	1951:47	1951:47	11	ndir
FIELD	1951:47	1951:47	12	ndir
LEAF_NODE	1951:47	1951:47	13	ndir
LEAF_NODE	1951:51	1951:51	11	,
ARGUMENT	1951:52	1951:52	11	dir
FIELD	1951:52	1951:52	12	dir
LEAF_NODE	1951:52	1951:52	13	dir
LEAF_NODE	1951:55	1951:55	11	,
ARGUMENT	1951:56	1951:56	11	tag
FIELD	1951:56	1951:56	12	tag
LEAF_NODE	1951:56	1951:56	13	tag
LEAF_NODE	1951:59	1951:59	11	,
ARGUMENT	1951:60	1951:60	11	count
FIELD	1951:60	1951:60	12	count
LEAF_NODE	1951:60	1951:60	13	count
LEAF_NODE	1951:65	1951:65	11	,
ARGUMENT	1951:66	1951:66	11	p
FIELD	1951:66	1951:66	12	p
LEAF_NODE	1951:66	1951:66	13	p
LEAF_NODE	1951:67	1951:67	11	)
LEAF_NODE	1951:68	1951:68	7	;
EXPR_STATEMENT	1952:2	1952:14	6	_TIFFfree ( p ) ;
EXPR	1952:2	1952:2	7	_TIFFfree ( p )
FUNCTION_CALL	1952:2	1952:13	8	_TIFFfree ( p )
CALLEE	1952:2	1952:2	9	_TIFFfree
LEAF_NODE	1952:2	1952:2	10	_TIFFfree
LEAF_NODE	1952:11	1952:11	9	(
ARGUMENT	1952:12	1952:12	9	p
FIELD	1952:12	1952:12	10	p
LEAF_NODE	1952:12	1952:12	11	p
LEAF_NODE	1952:13	1952:13	9	)
LEAF_NODE	1952:14	1952:14	7	;
LEAF_NODE	1953:1	1953:1	5	}
SELECTION	1954:1	1954:6	3	
KEYWORD	1954:1	1954:1	4	else
LEAF_NODE	1954:1	1954:1	5	else
STATEMENTS	1954:6	1954:6	4	
SELECTION	1954:6	1955:1	5	
KEYWORD	1954:6	1954:6	6	if
LEAF_NODE	1954:6	1954:6	7	if
LEAF_NODE	1954:9	1954:9	6	(
CONDITION	1954:10	1954:10	6	n == 1
EXPR	1954:10	1954:13	7	n == 1
FIELD	1954:10	1954:10	8	n
LEAF_NODE	1954:10	1954:10	9	n
EQ_OPERATOR	1954:11	1954:11	8	==
LEAF_NODE	1954:11	1954:11	9	==
FIELD	1954:13	1954:13	8	1
LEAF_NODE	1954:13	1954:13	9	1
LEAF_NODE	1954:14	1954:14	6	)
STATEMENTS	1955:1	1968:1	6	
LEAF_NODE	1955:1	1955:1	7	{
STATEMENTS	1956:2	1967:2	7	
SIMPLE_DECL	1956:2	1956:11	8	uint32 * p ;
VAR_DECL	1956:2	1956:10	9	uint32 * p
TYPE	1956:2	1956:8	10	uint32 *
TYPE_NAME	1956:2	1956:2	11	uint32
LEAF_NODE	1956:2	1956:2	12	uint32
POINTER	1956:8	1956:8	11	*
LEAF_NODE	1956:8	1956:8	12	*
NAME	1956:10	1956:10	10	p
LEAF_NODE	1956:10	1956:10	11	p
LEAF_NODE	1956:11	1956:11	9	;
SIMPLE_DECL	1957:2	1957:11	8	uint32 * q ;
VAR_DECL	1957:2	1957:10	9	uint32 * q
TYPE	1957:2	1957:8	10	uint32 *
TYPE_NAME	1957:2	1957:2	11	uint32
LEAF_NODE	1957:2	1957:2	12	uint32
POINTER	1957:8	1957:8	11	*
LEAF_NODE	1957:8	1957:8	12	*
NAME	1957:10	1957:10	10	q
LEAF_NODE	1957:10	1957:10	11	q
LEAF_NODE	1957:11	1957:11	9	;
EXPR_STATEMENT	1958:2	1958:37	8	p = _TIFFmalloc ( count * sizeof ( uint32 ) ) ;
EXPR	1958:2	1958:2	9	p = _TIFFmalloc ( count * sizeof ( uint32 ) )
ASSIGN	1958:2	1958:4	10	p = _TIFFmalloc ( count * sizeof ( uint32 ) )
LVAL	1958:2	1958:2	11	p
FIELD	1958:2	1958:2	12	p
LEAF_NODE	1958:2	1958:2	13	p
ASSIGN_OP	1958:3	1958:3	11	=
LEAF_NODE	1958:3	1958:3	12	=
RVAL	1958:4	1958:4	11	_TIFFmalloc ( count * sizeof ( uint32 ) )
FUNCTION_CALL	1958:4	1958:36	12	_TIFFmalloc ( count * sizeof ( uint32 ) )
CALLEE	1958:4	1958:4	13	_TIFFmalloc
LEAF_NODE	1958:4	1958:4	14	_TIFFmalloc
LEAF_NODE	1958:15	1958:15	13	(
ARGUMENT	1958:16	1958:22	13	count * sizeof ( uint32 )
FIELD	1958:16	1958:16	14	count
LEAF_NODE	1958:16	1958:16	15	count
LEAF_NODE	1958:21	1958:21	14	*
FUNCTION_CALL	1958:22	1958:35	14	sizeof ( uint32 )
CALLEE	1958:22	1958:22	15	sizeof
LEAF_NODE	1958:22	1958:22	16	sizeof
LEAF_NODE	1958:28	1958:28	15	(
ARGUMENT	1958:29	1958:29	15	uint32
FIELD	1958:29	1958:29	16	uint32
LEAF_NODE	1958:29	1958:29	17	uint32
LEAF_NODE	1958:35	1958:35	15	)
LEAF_NODE	1958:36	1958:36	13	)
LEAF_NODE	1958:37	1958:37	9	;
SELECTION	1959:2	1960:2	8	
KEYWORD	1959:2	1959:2	9	if
LEAF_NODE	1959:2	1959:2	10	if
LEAF_NODE	1959:5	1959:5	9	(
CONDITION	1959:6	1959:6	9	p == NULL
EXPR	1959:6	1959:9	10	p == NULL
FIELD	1959:6	1959:6	11	p
LEAF_NODE	1959:6	1959:6	12	p
EQ_OPERATOR	1959:7	1959:7	11	==
LEAF_NODE	1959:7	1959:7	12	==
FIELD	1959:9	1959:9	11	NULL
LEAF_NODE	1959:9	1959:9	12	NULL
LEAF_NODE	1959:13	1959:13	9	)
STATEMENTS	1960:2	1963:2	9	
LEAF_NODE	1960:2	1960:2	10	{
STATEMENTS	1961:3	1962:3	10	
EXPR_STATEMENT	1961:3	1961:59	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1961:3	1961:3	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1961:3	1961:58	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1961:3	1961:3	14	TIFFErrorExt
LEAF_NODE	1961:3	1961:3	15	TIFFErrorExt
LEAF_NODE	1961:15	1961:15	14	(
ARGUMENT	1961:16	1961:16	14	tif -> tif_clientdata
FIELD	1961:16	1961:21	15	tif -> tif_clientdata
LEAF_NODE	1961:16	1961:16	16	tif
LEAF_NODE	1961:19	1961:19	16	->
LEAF_NODE	1961:21	1961:21	16	tif_clientdata
LEAF_NODE	1961:35	1961:35	14	,
ARGUMENT	1961:36	1961:36	14	module
FIELD	1961:36	1961:36	15	module
LEAF_NODE	1961:36	1961:36	16	module
LEAF_NODE	1961:42	1961:42	14	,
ARGUMENT	1961:43	1961:43	14	"Out of memory"
FIELD	1961:43	1961:43	15	"Out of memory"
LEAF_NODE	1961:43	1961:43	16	"Out of memory"
LEAF_NODE	1961:58	1961:58	14	)
LEAF_NODE	1961:59	1961:59	12	;
JUMP_STATEMENT	1962:3	1962:12	11	return ( 0 ) ;
KEYWORD	1962:3	1962:3	12	return
LEAF_NODE	1962:3	1962:3	13	return
DESTINATION	1962:9	1962:9	12	( 0 )
EXPR	1962:9	1962:11	13	( 0 )
LEAF_NODE	1962:9	1962:9	14	(
FIELD	1962:10	1962:10	14	0
LEAF_NODE	1962:10	1962:10	15	0
LEAF_NODE	1962:11	1962:11	14	)
LEAF_NODE	1962:12	1962:12	12	;
LEAF_NODE	1963:2	1963:2	10	}
LEAF_NODE	1964:2	1964:2	8	for
LEAF_NODE	1964:6	1964:6	8	(
LEAF_NODE	1964:7	1964:7	8	ma
LEAF_NODE	1964:9	1964:9	8	=
LEAF_NODE	1964:10	1964:10	8	value
LEAF_NODE	1964:15	1964:15	8	,
EXPR_STATEMENT	1964:17	1964:26	8	mb = 0 , q = p ;
EXPR	1964:17	1964:23	9	mb = 0 , q = p
ASSIGN	1964:17	1964:20	10	mb = 0
LVAL	1964:17	1964:17	11	mb
FIELD	1964:17	1964:17	12	mb
LEAF_NODE	1964:17	1964:17	13	mb
ASSIGN_OP	1964:19	1964:19	11	=
LEAF_NODE	1964:19	1964:19	12	=
RVAL	1964:20	1964:20	11	0
FIELD	1964:20	1964:20	12	0
LEAF_NODE	1964:20	1964:20	13	0
LEAF_NODE	1964:21	1964:21	10	,
ASSIGN	1964:23	1964:25	10	q = p
LVAL	1964:23	1964:23	11	q
FIELD	1964:23	1964:23	12	q
LEAF_NODE	1964:23	1964:23	13	q
ASSIGN_OP	1964:24	1964:24	11	=
LEAF_NODE	1964:24	1964:24	12	=
RVAL	1964:25	1964:25	11	p
FIELD	1964:25	1964:25	12	p
LEAF_NODE	1964:25	1964:25	13	p
LEAF_NODE	1964:26	1964:26	9	;
EXPR_STATEMENT	1964:28	1964:36	8	mb < count ;
EXPR	1964:28	1964:31	9	mb < count
FIELD	1964:28	1964:28	10	mb
LEAF_NODE	1964:28	1964:28	11	mb
REL_OPERATOR	1964:30	1964:30	10	<
LEAF_NODE	1964:30	1964:30	11	<
FIELD	1964:31	1964:31	10	count
LEAF_NODE	1964:31	1964:31	11	count
LEAF_NODE	1964:36	1964:36	9	;
LEAF_NODE	1964:38	1964:38	8	ma
LEAF_NODE	1964:40	1964:40	8	++
LEAF_NODE	1964:42	1964:42	8	,
LEAF_NODE	1964:44	1964:44	8	mb
LEAF_NODE	1964:46	1964:46	8	++
LEAF_NODE	1964:48	1964:48	8	,
LEAF_NODE	1964:50	1964:50	8	q
LEAF_NODE	1964:51	1964:51	8	++
LEAF_NODE	1964:53	1964:53	8	)
EXPR_STATEMENT	1965:3	1965:19	8	* q = ( uint32 ) ( * ma ) ;
EXPR	1965:3	1965:3	9	* q = ( uint32 ) ( * ma )
ASSIGN	1965:3	1965:6	10	* q = ( uint32 ) ( * ma )
LVAL	1965:3	1965:3	11	* q
UNARY_EXPR	1965:3	1965:4	12	* q
UNARY_OPERATOR	1965:3	1965:3	13	*
LEAF_NODE	1965:3	1965:3	14	*
FIELD	1965:4	1965:4	13	q
LEAF_NODE	1965:4	1965:4	14	q
ASSIGN_OP	1965:5	1965:5	11	=
LEAF_NODE	1965:5	1965:5	12	=
RVAL	1965:6	1965:18	11	( uint32 ) ( * ma )
LEAF_NODE	1965:6	1965:6	12	(
TYPE_NAME	1965:7	1965:7	12	uint32
LEAF_NODE	1965:7	1965:7	13	uint32
LEAF_NODE	1965:13	1965:13	12	)
LEAF_NODE	1965:14	1965:14	12	(
UNARY_EXPR	1965:15	1965:16	12	* ma
UNARY_OPERATOR	1965:15	1965:15	13	*
LEAF_NODE	1965:15	1965:15	14	*
FIELD	1965:16	1965:16	13	ma
LEAF_NODE	1965:16	1965:16	14	ma
LEAF_NODE	1965:18	1965:18	12	)
LEAF_NODE	1965:19	1965:19	9	;
EXPR_STATEMENT	1966:2	1966:67	8	o = TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , p ) ;
EXPR	1966:2	1966:2	9	o = TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , p )
ASSIGN	1966:2	1966:4	10	o = TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , p )
LVAL	1966:2	1966:2	11	o
FIELD	1966:2	1966:2	12	o
LEAF_NODE	1966:2	1966:2	13	o
ASSIGN_OP	1966:3	1966:3	11	=
LEAF_NODE	1966:3	1966:3	12	=
RVAL	1966:4	1966:4	11	TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , p )
FUNCTION_CALL	1966:4	1966:66	12	TIFFWriteDirectoryTagCheckedLongArray ( tif , ndir , dir , tag , count , p )
CALLEE	1966:4	1966:4	13	TIFFWriteDirectoryTagCheckedLongArray
LEAF_NODE	1966:4	1966:4	14	TIFFWriteDirectoryTagCheckedLongArray
LEAF_NODE	1966:41	1966:41	13	(
ARGUMENT	1966:42	1966:42	13	tif
FIELD	1966:42	1966:42	14	tif
LEAF_NODE	1966:42	1966:42	15	tif
LEAF_NODE	1966:45	1966:45	13	,
ARGUMENT	1966:46	1966:46	13	ndir
FIELD	1966:46	1966:46	14	ndir
LEAF_NODE	1966:46	1966:46	15	ndir
LEAF_NODE	1966:50	1966:50	13	,
ARGUMENT	1966:51	1966:51	13	dir
FIELD	1966:51	1966:51	14	dir
LEAF_NODE	1966:51	1966:51	15	dir
LEAF_NODE	1966:54	1966:54	13	,
ARGUMENT	1966:55	1966:55	13	tag
FIELD	1966:55	1966:55	14	tag
LEAF_NODE	1966:55	1966:55	15	tag
LEAF_NODE	1966:58	1966:58	13	,
ARGUMENT	1966:59	1966:59	13	count
FIELD	1966:59	1966:59	14	count
LEAF_NODE	1966:59	1966:59	15	count
LEAF_NODE	1966:64	1966:64	13	,
ARGUMENT	1966:65	1966:65	13	p
FIELD	1966:65	1966:65	14	p
LEAF_NODE	1966:65	1966:65	15	p
LEAF_NODE	1966:66	1966:66	13	)
LEAF_NODE	1966:67	1966:67	9	;
EXPR_STATEMENT	1967:2	1967:14	8	_TIFFfree ( p ) ;
EXPR	1967:2	1967:2	9	_TIFFfree ( p )
FUNCTION_CALL	1967:2	1967:13	10	_TIFFfree ( p )
CALLEE	1967:2	1967:2	11	_TIFFfree
LEAF_NODE	1967:2	1967:2	12	_TIFFfree
LEAF_NODE	1967:11	1967:11	11	(
ARGUMENT	1967:12	1967:12	11	p
FIELD	1967:12	1967:12	12	p
LEAF_NODE	1967:12	1967:12	13	p
LEAF_NODE	1967:13	1967:13	11	)
LEAF_NODE	1967:14	1967:14	9	;
LEAF_NODE	1968:1	1968:1	7	}
SELECTION	1969:1	1970:1	3	
KEYWORD	1969:1	1969:1	4	else
LEAF_NODE	1969:1	1969:1	5	else
STATEMENTS	1970:1	1973:1	4	
LEAF_NODE	1970:1	1970:1	5	{
STATEMENTS	1971:2	1972:2	5	
EXPR_STATEMENT	1971:2	1971:14	6	assert ( n == 2 ) ;
EXPR	1971:2	1971:2	7	assert ( n == 2 )
FUNCTION_CALL	1971:2	1971:13	8	assert ( n == 2 )
CALLEE	1971:2	1971:2	9	assert
LEAF_NODE	1971:2	1971:2	10	assert
LEAF_NODE	1971:8	1971:8	9	(
ARGUMENT	1971:9	1971:12	9	n == 2
FIELD	1971:9	1971:9	10	n
LEAF_NODE	1971:9	1971:9	11	n
EQ_OPERATOR	1971:10	1971:10	10	==
LEAF_NODE	1971:10	1971:10	11	==
FIELD	1971:12	1971:12	10	2
LEAF_NODE	1971:12	1971:12	11	2
LEAF_NODE	1971:13	1971:13	9	)
LEAF_NODE	1971:14	1971:14	7	;
EXPR_STATEMENT	1972:2	1972:72	6	o = TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value ) ;
EXPR	1972:2	1972:2	7	o = TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value )
ASSIGN	1972:2	1972:4	8	o = TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value )
LVAL	1972:2	1972:2	9	o
FIELD	1972:2	1972:2	10	o
LEAF_NODE	1972:2	1972:2	11	o
ASSIGN_OP	1972:3	1972:3	9	=
LEAF_NODE	1972:3	1972:3	10	=
RVAL	1972:4	1972:4	9	TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value )
FUNCTION_CALL	1972:4	1972:71	10	TIFFWriteDirectoryTagCheckedLong8Array ( tif , ndir , dir , tag , count , value )
CALLEE	1972:4	1972:4	11	TIFFWriteDirectoryTagCheckedLong8Array
LEAF_NODE	1972:4	1972:4	12	TIFFWriteDirectoryTagCheckedLong8Array
LEAF_NODE	1972:42	1972:42	11	(
ARGUMENT	1972:43	1972:43	11	tif
FIELD	1972:43	1972:43	12	tif
LEAF_NODE	1972:43	1972:43	13	tif
LEAF_NODE	1972:46	1972:46	11	,
ARGUMENT	1972:47	1972:47	11	ndir
FIELD	1972:47	1972:47	12	ndir
LEAF_NODE	1972:47	1972:47	13	ndir
LEAF_NODE	1972:51	1972:51	11	,
ARGUMENT	1972:52	1972:52	11	dir
FIELD	1972:52	1972:52	12	dir
LEAF_NODE	1972:52	1972:52	13	dir
LEAF_NODE	1972:55	1972:55	11	,
ARGUMENT	1972:56	1972:56	11	tag
FIELD	1972:56	1972:56	12	tag
LEAF_NODE	1972:56	1972:56	13	tag
LEAF_NODE	1972:59	1972:59	11	,
ARGUMENT	1972:60	1972:60	11	count
FIELD	1972:60	1972:60	12	count
LEAF_NODE	1972:60	1972:60	13	count
LEAF_NODE	1972:65	1972:65	11	,
ARGUMENT	1972:66	1972:66	11	value
FIELD	1972:66	1972:66	12	value
LEAF_NODE	1972:66	1972:66	13	value
LEAF_NODE	1972:71	1972:71	11	)
LEAF_NODE	1972:72	1972:72	7	;
LEAF_NODE	1973:1	1973:1	5	}
LEAF_NODE	1974:1	1974:1	3	return
LEAF_NODE	1974:7	1974:7	3	(
LEAF_NODE	1974:8	1974:8	3	o
LEAF_NODE	1974:9	1974:9	3	)
LEAF_NODE	1974:10	1974:10	3	;
LEAF_NODE	1975:0	1975:0	2	}
FUNCTION_DEF	1977:0	2002:0	1	
RETURN_TYPE	1977:0	1977:7	2	static int
LEAF_NODE	1977:0	1977:0	3	static
TYPE_NAME	1977:7	1977:7	3	int
LEAF_NODE	1977:7	1977:7	4	int
FUNCTION_NAME	1978:0	1978:0	2	TIFFWriteDirectoryTagColormap
LEAF_NODE	1978:0	1978:0	3	TIFFWriteDirectoryTagColormap
PARAMETER_LIST	1978:29	1978:72	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir )
LEAF_NODE	1978:29	1978:29	3	(
PARAMETER_DECL	1978:30	1978:36	3	TIFF * tif
TYPE	1978:30	1978:34	4	TIFF *
TYPE_NAME	1978:30	1978:30	5	TIFF
LEAF_NODE	1978:30	1978:30	6	TIFF
POINTER	1978:34	1978:34	5	*
LEAF_NODE	1978:34	1978:34	6	*
NAME	1978:36	1978:36	4	tif
LEAF_NODE	1978:36	1978:36	5	tif
LEAF_NODE	1978:39	1978:39	3	,
PARAMETER_DECL	1978:41	1978:49	3	uint32 * ndir
TYPE	1978:41	1978:47	4	uint32 *
TYPE_NAME	1978:41	1978:41	5	uint32
LEAF_NODE	1978:41	1978:41	6	uint32
POINTER	1978:47	1978:47	5	*
LEAF_NODE	1978:47	1978:47	6	*
NAME	1978:49	1978:49	4	ndir
LEAF_NODE	1978:49	1978:49	5	ndir
LEAF_NODE	1978:53	1978:53	3	,
PARAMETER_DECL	1978:55	1978:69	3	TIFFDirEntry * dir
TYPE	1978:55	1978:67	4	TIFFDirEntry *
TYPE_NAME	1978:55	1978:55	5	TIFFDirEntry
LEAF_NODE	1978:55	1978:55	6	TIFFDirEntry
POINTER	1978:67	1978:67	5	*
LEAF_NODE	1978:67	1978:67	6	*
NAME	1978:69	1978:69	4	dir
LEAF_NODE	1978:69	1978:69	5	dir
LEAF_NODE	1978:72	1978:72	3	)
LEAF_NODE	1979:0	1979:0	2	{
STATEMENTS	1980:1	2001:10	2	
LEAF_NODE	1980:1	1980:1	3	static
SIMPLE_DECL	1980:8	1980:61	3	const char [ ] module ; module = "TIFFWriteDirectoryTagColormap" ;
VAR_DECL	1980:8	1980:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagColormap"
TYPE	1980:8	1980:25	5	const char [ ]
TYPE_NAME	1980:8	1980:14	6	const char
LEAF_NODE	1980:8	1980:8	7	const
LEAF_NODE	1980:14	1980:14	7	char
TYPE_SUFFIX	1980:25	1980:26	6	[ ]
LEAF_NODE	1980:25	1980:25	7	[
LEAF_NODE	1980:26	1980:26	7	]
NAME	1980:19	1980:19	5	module
LEAF_NODE	1980:19	1980:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1980:19	1980:19	5	module = "TIFFWriteDirectoryTagColormap"
ASSIGN	1980:19	1980:30	6	module = "TIFFWriteDirectoryTagColormap"
LVAL	1980:19	1980:19	7	module
NAME	1980:19	1980:19	8	module
LEAF_NODE	1980:19	1980:19	9	module
ASSIGN_OP	1980:28	1980:28	7	=
LEAF_NODE	1980:28	1980:28	8	=
RVAL	1980:30	1980:30	7	"TIFFWriteDirectoryTagColormap"
FIELD	1980:30	1980:30	8	"TIFFWriteDirectoryTagColormap"
LEAF_NODE	1980:30	1980:30	9	"TIFFWriteDirectoryTagColormap"
LEAF_NODE	1980:61	1980:61	4	;
SIMPLE_DECL	1981:1	1981:9	3	uint32 m ;
VAR_DECL	1981:1	1981:8	4	uint32 m
TYPE	1981:1	1981:1	5	uint32
TYPE_NAME	1981:1	1981:1	6	uint32
LEAF_NODE	1981:1	1981:1	7	uint32
NAME	1981:8	1981:8	5	m
LEAF_NODE	1981:8	1981:8	6	m
LEAF_NODE	1981:9	1981:9	4	;
SIMPLE_DECL	1982:1	1982:10	3	uint16 * n ;
VAR_DECL	1982:1	1982:9	4	uint16 * n
TYPE	1982:1	1982:7	5	uint16 *
TYPE_NAME	1982:1	1982:1	6	uint16
LEAF_NODE	1982:1	1982:1	7	uint16
POINTER	1982:7	1982:7	6	*
LEAF_NODE	1982:7	1982:7	7	*
NAME	1982:9	1982:9	5	n
LEAF_NODE	1982:9	1982:9	6	n
LEAF_NODE	1982:10	1982:10	4	;
SIMPLE_DECL	1983:1	1983:6	3	int o ;
VAR_DECL	1983:1	1983:5	4	int o
TYPE	1983:1	1983:1	5	int
TYPE_NAME	1983:1	1983:1	6	int
LEAF_NODE	1983:1	1983:1	7	int
NAME	1983:5	1983:5	5	o
LEAF_NODE	1983:5	1983:5	6	o
LEAF_NODE	1983:6	1983:6	4	;
SELECTION	1984:1	1985:1	3	
KEYWORD	1984:1	1984:1	4	if
LEAF_NODE	1984:1	1984:1	5	if
LEAF_NODE	1984:4	1984:4	4	(
CONDITION	1984:5	1984:5	4	dir == NULL
EXPR	1984:5	1984:10	5	dir == NULL
FIELD	1984:5	1984:5	6	dir
LEAF_NODE	1984:5	1984:5	7	dir
EQ_OPERATOR	1984:8	1984:8	6	==
LEAF_NODE	1984:8	1984:8	7	==
FIELD	1984:10	1984:10	6	NULL
LEAF_NODE	1984:10	1984:10	7	NULL
LEAF_NODE	1984:14	1984:14	4	)
STATEMENTS	1985:1	1988:1	4	
LEAF_NODE	1985:1	1985:1	5	{
STATEMENTS	1986:2	1987:2	5	
EXPR_STATEMENT	1986:2	1986:11	6	( * ndir ) ++ ;
EXPR	1986:2	1986:9	7	( * ndir ) ++
LEAF_NODE	1986:2	1986:2	8	(
UNARY_EXPR	1986:3	1986:4	8	* ndir
UNARY_OPERATOR	1986:3	1986:3	9	*
LEAF_NODE	1986:3	1986:3	10	*
FIELD	1986:4	1986:4	9	ndir
LEAF_NODE	1986:4	1986:4	10	ndir
LEAF_NODE	1986:8	1986:8	8	)
LEAF_NODE	1986:9	1986:9	8	++
LEAF_NODE	1986:11	1986:11	7	;
JUMP_STATEMENT	1987:2	1987:11	6	return ( 1 ) ;
KEYWORD	1987:2	1987:2	7	return
LEAF_NODE	1987:2	1987:2	8	return
DESTINATION	1987:8	1987:8	7	( 1 )
EXPR	1987:8	1987:10	8	( 1 )
LEAF_NODE	1987:8	1987:8	9	(
FIELD	1987:9	1987:9	9	1
LEAF_NODE	1987:9	1987:9	10	1
LEAF_NODE	1987:10	1987:10	9	)
LEAF_NODE	1987:11	1987:11	7	;
LEAF_NODE	1988:1	1988:1	5	}
EXPR_STATEMENT	1989:1	1989:37	3	m = ( 1 << tif -> tif_dir . td_bitspersample ) ;
EXPR	1989:1	1989:1	4	m = ( 1 << tif -> tif_dir . td_bitspersample )
ASSIGN	1989:1	1989:3	5	m = ( 1 << tif -> tif_dir . td_bitspersample )
LVAL	1989:1	1989:1	6	m
FIELD	1989:1	1989:1	7	m
LEAF_NODE	1989:1	1989:1	8	m
ASSIGN_OP	1989:2	1989:2	6	=
LEAF_NODE	1989:2	1989:2	7	=
RVAL	1989:3	1989:36	6	( 1 << tif -> tif_dir . td_bitspersample )
LEAF_NODE	1989:3	1989:3	7	(
FIELD	1989:4	1989:4	7	1
LEAF_NODE	1989:4	1989:4	8	1
LEAF_NODE	1989:5	1989:5	7	<<
FIELD	1989:7	1989:20	7	tif -> tif_dir . td_bitspersample
LEAF_NODE	1989:7	1989:7	8	tif
LEAF_NODE	1989:10	1989:10	8	->
LEAF_NODE	1989:12	1989:12	8	tif_dir
LEAF_NODE	1989:19	1989:19	8	.
LEAF_NODE	1989:20	1989:20	8	td_bitspersample
LEAF_NODE	1989:36	1989:36	7	)
LEAF_NODE	1989:37	1989:37	4	;
LEAF_NODE	1990:1	1990:1	3	n
LEAF_NODE	1990:2	1990:2	3	=
LEAF_NODE	1990:3	1990:3	3	_TIFFmalloc
LEAF_NODE	1990:14	1990:14	3	(
LEAF_NODE	1990:15	1990:15	3	3
LEAF_NODE	1990:16	1990:16	3	*
LEAF_NODE	1990:17	1990:17	3	m
LEAF_NODE	1990:18	1990:18	3	*
LEAF_NODE	1990:19	1990:19	3	sizeof
LEAF_NODE	1990:25	1990:25	3	(
LEAF_NODE	1990:26	1990:26	3	uint16
LEAF_NODE	1990:32	1990:32	3	)
LEAF_NODE	1990:33	1990:33	3	)
LEAF_NODE	1990:34	1990:34	3	;
SELECTION	1991:1	1992:1	3	
KEYWORD	1991:1	1991:1	4	if
LEAF_NODE	1991:1	1991:1	5	if
LEAF_NODE	1991:4	1991:4	4	(
CONDITION	1991:5	1991:5	4	n == NULL
EXPR	1991:5	1991:8	5	n == NULL
FIELD	1991:5	1991:5	6	n
LEAF_NODE	1991:5	1991:5	7	n
EQ_OPERATOR	1991:6	1991:6	6	==
LEAF_NODE	1991:6	1991:6	7	==
FIELD	1991:8	1991:8	6	NULL
LEAF_NODE	1991:8	1991:8	7	NULL
LEAF_NODE	1991:12	1991:12	4	)
STATEMENTS	1992:1	1995:1	4	
LEAF_NODE	1992:1	1992:1	5	{
STATEMENTS	1993:2	1994:2	5	
EXPR_STATEMENT	1993:2	1993:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1993:2	1993:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1993:2	1993:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1993:2	1993:2	9	TIFFErrorExt
LEAF_NODE	1993:2	1993:2	10	TIFFErrorExt
LEAF_NODE	1993:14	1993:14	9	(
ARGUMENT	1993:15	1993:15	9	tif -> tif_clientdata
FIELD	1993:15	1993:20	10	tif -> tif_clientdata
LEAF_NODE	1993:15	1993:15	11	tif
LEAF_NODE	1993:18	1993:18	11	->
LEAF_NODE	1993:20	1993:20	11	tif_clientdata
LEAF_NODE	1993:34	1993:34	9	,
ARGUMENT	1993:35	1993:35	9	module
FIELD	1993:35	1993:35	10	module
LEAF_NODE	1993:35	1993:35	11	module
LEAF_NODE	1993:41	1993:41	9	,
ARGUMENT	1993:42	1993:42	9	"Out of memory"
FIELD	1993:42	1993:42	10	"Out of memory"
LEAF_NODE	1993:42	1993:42	11	"Out of memory"
LEAF_NODE	1993:57	1993:57	9	)
LEAF_NODE	1993:58	1993:58	7	;
JUMP_STATEMENT	1994:2	1994:11	6	return ( 0 ) ;
KEYWORD	1994:2	1994:2	7	return
LEAF_NODE	1994:2	1994:2	8	return
DESTINATION	1994:8	1994:8	7	( 0 )
EXPR	1994:8	1994:10	8	( 0 )
LEAF_NODE	1994:8	1994:8	9	(
FIELD	1994:9	1994:9	9	0
LEAF_NODE	1994:9	1994:9	10	0
LEAF_NODE	1994:10	1994:10	9	)
LEAF_NODE	1994:11	1994:11	7	;
LEAF_NODE	1995:1	1995:1	5	}
EXPR_STATEMENT	1996:1	1996:64	3	_TIFFmemcpy ( & n [ 0 ] , tif -> tif_dir . td_colormap [ 0 ] , m * sizeof ( uint16 ) ) ;
EXPR	1996:1	1996:1	4	_TIFFmemcpy ( & n [ 0 ] , tif -> tif_dir . td_colormap [ 0 ] , m * sizeof ( uint16 ) )
FUNCTION_CALL	1996:1	1996:63	5	_TIFFmemcpy ( & n [ 0 ] , tif -> tif_dir . td_colormap [ 0 ] , m * sizeof ( uint16 ) )
CALLEE	1996:1	1996:1	6	_TIFFmemcpy
LEAF_NODE	1996:1	1996:1	7	_TIFFmemcpy
LEAF_NODE	1996:12	1996:12	6	(
ARGUMENT	1996:13	1996:13	6	& n [ 0 ]
UNARY_EXPR	1996:13	1996:14	7	& n [ 0 ]
UNARY_OPERATOR	1996:13	1996:13	8	&
LEAF_NODE	1996:13	1996:13	9	&
FIELD	1996:14	1996:17	8	n [ 0 ]
LEAF_NODE	1996:14	1996:14	9	n
LEAF_NODE	1996:15	1996:15	9	[
EXPR	1996:16	1996:16	9	0
FIELD	1996:16	1996:16	10	0
LEAF_NODE	1996:16	1996:16	11	0
LEAF_NODE	1996:17	1996:17	9	]
LEAF_NODE	1996:18	1996:18	6	,
ARGUMENT	1996:19	1996:19	6	tif -> tif_dir . td_colormap [ 0 ]
FIELD	1996:19	1996:45	7	tif -> tif_dir . td_colormap [ 0 ]
LEAF_NODE	1996:19	1996:19	8	tif
LEAF_NODE	1996:22	1996:22	8	->
LEAF_NODE	1996:24	1996:24	8	tif_dir
LEAF_NODE	1996:31	1996:31	8	.
LEAF_NODE	1996:32	1996:32	8	td_colormap
LEAF_NODE	1996:43	1996:43	8	[
EXPR	1996:44	1996:44	8	0
FIELD	1996:44	1996:44	9	0
LEAF_NODE	1996:44	1996:44	10	0
LEAF_NODE	1996:45	1996:45	8	]
LEAF_NODE	1996:46	1996:46	6	,
ARGUMENT	1996:47	1996:49	6	m * sizeof ( uint16 )
FIELD	1996:47	1996:47	7	m
LEAF_NODE	1996:47	1996:47	8	m
LEAF_NODE	1996:48	1996:48	7	*
FUNCTION_CALL	1996:49	1996:62	7	sizeof ( uint16 )
CALLEE	1996:49	1996:49	8	sizeof
LEAF_NODE	1996:49	1996:49	9	sizeof
LEAF_NODE	1996:55	1996:55	8	(
ARGUMENT	1996:56	1996:56	8	uint16
FIELD	1996:56	1996:56	9	uint16
LEAF_NODE	1996:56	1996:56	10	uint16
LEAF_NODE	1996:62	1996:62	8	)
LEAF_NODE	1996:63	1996:63	6	)
LEAF_NODE	1996:64	1996:64	4	;
EXPR_STATEMENT	1997:1	1997:64	3	_TIFFmemcpy ( & n [ m ] , tif -> tif_dir . td_colormap [ 1 ] , m * sizeof ( uint16 ) ) ;
EXPR	1997:1	1997:1	4	_TIFFmemcpy ( & n [ m ] , tif -> tif_dir . td_colormap [ 1 ] , m * sizeof ( uint16 ) )
FUNCTION_CALL	1997:1	1997:63	5	_TIFFmemcpy ( & n [ m ] , tif -> tif_dir . td_colormap [ 1 ] , m * sizeof ( uint16 ) )
CALLEE	1997:1	1997:1	6	_TIFFmemcpy
LEAF_NODE	1997:1	1997:1	7	_TIFFmemcpy
LEAF_NODE	1997:12	1997:12	6	(
ARGUMENT	1997:13	1997:13	6	& n [ m ]
UNARY_EXPR	1997:13	1997:14	7	& n [ m ]
UNARY_OPERATOR	1997:13	1997:13	8	&
LEAF_NODE	1997:13	1997:13	9	&
FIELD	1997:14	1997:17	8	n [ m ]
LEAF_NODE	1997:14	1997:14	9	n
LEAF_NODE	1997:15	1997:15	9	[
EXPR	1997:16	1997:16	9	m
FIELD	1997:16	1997:16	10	m
LEAF_NODE	1997:16	1997:16	11	m
LEAF_NODE	1997:17	1997:17	9	]
LEAF_NODE	1997:18	1997:18	6	,
ARGUMENT	1997:19	1997:19	6	tif -> tif_dir . td_colormap [ 1 ]
FIELD	1997:19	1997:45	7	tif -> tif_dir . td_colormap [ 1 ]
LEAF_NODE	1997:19	1997:19	8	tif
LEAF_NODE	1997:22	1997:22	8	->
LEAF_NODE	1997:24	1997:24	8	tif_dir
LEAF_NODE	1997:31	1997:31	8	.
LEAF_NODE	1997:32	1997:32	8	td_colormap
LEAF_NODE	1997:43	1997:43	8	[
EXPR	1997:44	1997:44	8	1
FIELD	1997:44	1997:44	9	1
LEAF_NODE	1997:44	1997:44	10	1
LEAF_NODE	1997:45	1997:45	8	]
LEAF_NODE	1997:46	1997:46	6	,
ARGUMENT	1997:47	1997:49	6	m * sizeof ( uint16 )
FIELD	1997:47	1997:47	7	m
LEAF_NODE	1997:47	1997:47	8	m
LEAF_NODE	1997:48	1997:48	7	*
FUNCTION_CALL	1997:49	1997:62	7	sizeof ( uint16 )
CALLEE	1997:49	1997:49	8	sizeof
LEAF_NODE	1997:49	1997:49	9	sizeof
LEAF_NODE	1997:55	1997:55	8	(
ARGUMENT	1997:56	1997:56	8	uint16
FIELD	1997:56	1997:56	9	uint16
LEAF_NODE	1997:56	1997:56	10	uint16
LEAF_NODE	1997:62	1997:62	8	)
LEAF_NODE	1997:63	1997:63	6	)
LEAF_NODE	1997:64	1997:64	4	;
EXPR_STATEMENT	1998:1	1998:66	3	_TIFFmemcpy ( & n [ 2 * m ] , tif -> tif_dir . td_colormap [ 2 ] , m * sizeof ( uint16 ) ) ;
EXPR	1998:1	1998:1	4	_TIFFmemcpy ( & n [ 2 * m ] , tif -> tif_dir . td_colormap [ 2 ] , m * sizeof ( uint16 ) )
FUNCTION_CALL	1998:1	1998:65	5	_TIFFmemcpy ( & n [ 2 * m ] , tif -> tif_dir . td_colormap [ 2 ] , m * sizeof ( uint16 ) )
CALLEE	1998:1	1998:1	6	_TIFFmemcpy
LEAF_NODE	1998:1	1998:1	7	_TIFFmemcpy
LEAF_NODE	1998:12	1998:12	6	(
ARGUMENT	1998:13	1998:13	6	& n [ 2 * m ]
UNARY_EXPR	1998:13	1998:14	7	& n [ 2 * m ]
UNARY_OPERATOR	1998:13	1998:13	8	&
LEAF_NODE	1998:13	1998:13	9	&
FIELD	1998:14	1998:19	8	n [ 2 * m ]
LEAF_NODE	1998:14	1998:14	9	n
LEAF_NODE	1998:15	1998:15	9	[
EXPR	1998:16	1998:18	9	2 * m
FIELD	1998:16	1998:16	10	2
LEAF_NODE	1998:16	1998:16	11	2
LEAF_NODE	1998:17	1998:17	10	*
FIELD	1998:18	1998:18	10	m
LEAF_NODE	1998:18	1998:18	11	m
LEAF_NODE	1998:19	1998:19	9	]
LEAF_NODE	1998:20	1998:20	6	,
ARGUMENT	1998:21	1998:21	6	tif -> tif_dir . td_colormap [ 2 ]
FIELD	1998:21	1998:47	7	tif -> tif_dir . td_colormap [ 2 ]
LEAF_NODE	1998:21	1998:21	8	tif
LEAF_NODE	1998:24	1998:24	8	->
LEAF_NODE	1998:26	1998:26	8	tif_dir
LEAF_NODE	1998:33	1998:33	8	.
LEAF_NODE	1998:34	1998:34	8	td_colormap
LEAF_NODE	1998:45	1998:45	8	[
EXPR	1998:46	1998:46	8	2
FIELD	1998:46	1998:46	9	2
LEAF_NODE	1998:46	1998:46	10	2
LEAF_NODE	1998:47	1998:47	8	]
LEAF_NODE	1998:48	1998:48	6	,
ARGUMENT	1998:49	1998:51	6	m * sizeof ( uint16 )
FIELD	1998:49	1998:49	7	m
LEAF_NODE	1998:49	1998:49	8	m
LEAF_NODE	1998:50	1998:50	7	*
FUNCTION_CALL	1998:51	1998:64	7	sizeof ( uint16 )
CALLEE	1998:51	1998:51	8	sizeof
LEAF_NODE	1998:51	1998:51	9	sizeof
LEAF_NODE	1998:57	1998:57	8	(
ARGUMENT	1998:58	1998:58	8	uint16
FIELD	1998:58	1998:58	9	uint16
LEAF_NODE	1998:58	1998:58	10	uint16
LEAF_NODE	1998:64	1998:64	8	)
LEAF_NODE	1998:65	1998:65	6	)
LEAF_NODE	1998:66	1998:66	4	;
EXPR_STATEMENT	1999:1	1999:78	3	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , TIFFTAG_COLORMAP , 3 * m , n ) ;
EXPR	1999:1	1999:1	4	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , TIFFTAG_COLORMAP , 3 * m , n )
ASSIGN	1999:1	1999:3	5	o = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , TIFFTAG_COLORMAP , 3 * m , n )
LVAL	1999:1	1999:1	6	o
FIELD	1999:1	1999:1	7	o
LEAF_NODE	1999:1	1999:1	8	o
ASSIGN_OP	1999:2	1999:2	6	=
LEAF_NODE	1999:2	1999:2	7	=
RVAL	1999:3	1999:3	6	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , TIFFTAG_COLORMAP , 3 * m , n )
FUNCTION_CALL	1999:3	1999:77	7	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , TIFFTAG_COLORMAP , 3 * m , n )
CALLEE	1999:3	1999:3	8	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	1999:3	1999:3	9	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	1999:41	1999:41	8	(
ARGUMENT	1999:42	1999:42	8	tif
FIELD	1999:42	1999:42	9	tif
LEAF_NODE	1999:42	1999:42	10	tif
LEAF_NODE	1999:45	1999:45	8	,
ARGUMENT	1999:46	1999:46	8	ndir
FIELD	1999:46	1999:46	9	ndir
LEAF_NODE	1999:46	1999:46	10	ndir
LEAF_NODE	1999:50	1999:50	8	,
ARGUMENT	1999:51	1999:51	8	dir
FIELD	1999:51	1999:51	9	dir
LEAF_NODE	1999:51	1999:51	10	dir
LEAF_NODE	1999:54	1999:54	8	,
ARGUMENT	1999:55	1999:55	8	TIFFTAG_COLORMAP
FIELD	1999:55	1999:55	9	TIFFTAG_COLORMAP
LEAF_NODE	1999:55	1999:55	10	TIFFTAG_COLORMAP
LEAF_NODE	1999:71	1999:71	8	,
ARGUMENT	1999:72	1999:74	8	3 * m
FIELD	1999:72	1999:72	9	3
LEAF_NODE	1999:72	1999:72	10	3
LEAF_NODE	1999:73	1999:73	9	*
FIELD	1999:74	1999:74	9	m
LEAF_NODE	1999:74	1999:74	10	m
LEAF_NODE	1999:75	1999:75	8	,
ARGUMENT	1999:76	1999:76	8	n
FIELD	1999:76	1999:76	9	n
LEAF_NODE	1999:76	1999:76	10	n
LEAF_NODE	1999:77	1999:77	8	)
LEAF_NODE	1999:78	1999:78	4	;
EXPR_STATEMENT	2000:1	2000:13	3	_TIFFfree ( n ) ;
EXPR	2000:1	2000:1	4	_TIFFfree ( n )
FUNCTION_CALL	2000:1	2000:12	5	_TIFFfree ( n )
CALLEE	2000:1	2000:1	6	_TIFFfree
LEAF_NODE	2000:1	2000:1	7	_TIFFfree
LEAF_NODE	2000:10	2000:10	6	(
ARGUMENT	2000:11	2000:11	6	n
FIELD	2000:11	2000:11	7	n
LEAF_NODE	2000:11	2000:11	8	n
LEAF_NODE	2000:12	2000:12	6	)
LEAF_NODE	2000:13	2000:13	4	;
LEAF_NODE	2001:1	2001:1	3	return
LEAF_NODE	2001:7	2001:7	3	(
LEAF_NODE	2001:8	2001:8	3	o
LEAF_NODE	2001:9	2001:9	3	)
LEAF_NODE	2001:10	2001:10	3	;
LEAF_NODE	2002:0	2002:0	2	}
FUNCTION_DEF	2004:0	2055:0	1	
RETURN_TYPE	2004:0	2004:7	2	static int
LEAF_NODE	2004:0	2004:0	3	static
TYPE_NAME	2004:7	2004:7	3	int
LEAF_NODE	2004:7	2004:7	4	int
FUNCTION_NAME	2005:0	2005:0	2	TIFFWriteDirectoryTagTransferfunction
LEAF_NODE	2005:0	2005:0	3	TIFFWriteDirectoryTagTransferfunction
PARAMETER_LIST	2005:37	2005:80	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir )
LEAF_NODE	2005:37	2005:37	3	(
PARAMETER_DECL	2005:38	2005:44	3	TIFF * tif
TYPE	2005:38	2005:42	4	TIFF *
TYPE_NAME	2005:38	2005:38	5	TIFF
LEAF_NODE	2005:38	2005:38	6	TIFF
POINTER	2005:42	2005:42	5	*
LEAF_NODE	2005:42	2005:42	6	*
NAME	2005:44	2005:44	4	tif
LEAF_NODE	2005:44	2005:44	5	tif
LEAF_NODE	2005:47	2005:47	3	,
PARAMETER_DECL	2005:49	2005:57	3	uint32 * ndir
TYPE	2005:49	2005:55	4	uint32 *
TYPE_NAME	2005:49	2005:49	5	uint32
LEAF_NODE	2005:49	2005:49	6	uint32
POINTER	2005:55	2005:55	5	*
LEAF_NODE	2005:55	2005:55	6	*
NAME	2005:57	2005:57	4	ndir
LEAF_NODE	2005:57	2005:57	5	ndir
LEAF_NODE	2005:61	2005:61	3	,
PARAMETER_DECL	2005:63	2005:77	3	TIFFDirEntry * dir
TYPE	2005:63	2005:75	4	TIFFDirEntry *
TYPE_NAME	2005:63	2005:63	5	TIFFDirEntry
LEAF_NODE	2005:63	2005:63	6	TIFFDirEntry
POINTER	2005:75	2005:75	5	*
LEAF_NODE	2005:75	2005:75	6	*
NAME	2005:77	2005:77	4	dir
LEAF_NODE	2005:77	2005:77	5	dir
LEAF_NODE	2005:80	2005:80	3	)
LEAF_NODE	2006:0	2006:0	2	{
STATEMENTS	2007:1	2054:10	2	
LEAF_NODE	2007:1	2007:1	3	static
SIMPLE_DECL	2007:8	2007:69	3	const char [ ] module ; module = "TIFFWriteDirectoryTagTransferfunction" ;
VAR_DECL	2007:8	2007:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagTransferfunction"
TYPE	2007:8	2007:25	5	const char [ ]
TYPE_NAME	2007:8	2007:14	6	const char
LEAF_NODE	2007:8	2007:8	7	const
LEAF_NODE	2007:14	2007:14	7	char
TYPE_SUFFIX	2007:25	2007:26	6	[ ]
LEAF_NODE	2007:25	2007:25	7	[
LEAF_NODE	2007:26	2007:26	7	]
NAME	2007:19	2007:19	5	module
LEAF_NODE	2007:19	2007:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2007:19	2007:19	5	module = "TIFFWriteDirectoryTagTransferfunction"
ASSIGN	2007:19	2007:30	6	module = "TIFFWriteDirectoryTagTransferfunction"
LVAL	2007:19	2007:19	7	module
NAME	2007:19	2007:19	8	module
LEAF_NODE	2007:19	2007:19	9	module
ASSIGN_OP	2007:28	2007:28	7	=
LEAF_NODE	2007:28	2007:28	8	=
RVAL	2007:30	2007:30	7	"TIFFWriteDirectoryTagTransferfunction"
FIELD	2007:30	2007:30	8	"TIFFWriteDirectoryTagTransferfunction"
LEAF_NODE	2007:30	2007:30	9	"TIFFWriteDirectoryTagTransferfunction"
LEAF_NODE	2007:69	2007:69	4	;
SIMPLE_DECL	2008:1	2008:9	3	uint32 m ;
VAR_DECL	2008:1	2008:8	4	uint32 m
TYPE	2008:1	2008:1	5	uint32
TYPE_NAME	2008:1	2008:1	6	uint32
LEAF_NODE	2008:1	2008:1	7	uint32
NAME	2008:8	2008:8	5	m
LEAF_NODE	2008:8	2008:8	6	m
LEAF_NODE	2008:9	2008:9	4	;
SIMPLE_DECL	2009:1	2009:9	3	uint16 n ;
VAR_DECL	2009:1	2009:8	4	uint16 n
TYPE	2009:1	2009:1	5	uint16
TYPE_NAME	2009:1	2009:1	6	uint16
LEAF_NODE	2009:1	2009:1	7	uint16
NAME	2009:8	2009:8	5	n
LEAF_NODE	2009:8	2009:8	6	n
LEAF_NODE	2009:9	2009:9	4	;
SIMPLE_DECL	2010:1	2010:10	3	uint16 * o ;
VAR_DECL	2010:1	2010:9	4	uint16 * o
TYPE	2010:1	2010:7	5	uint16 *
TYPE_NAME	2010:1	2010:1	6	uint16
LEAF_NODE	2010:1	2010:1	7	uint16
POINTER	2010:7	2010:7	6	*
LEAF_NODE	2010:7	2010:7	7	*
NAME	2010:9	2010:9	5	o
LEAF_NODE	2010:9	2010:9	6	o
LEAF_NODE	2010:10	2010:10	4	;
SIMPLE_DECL	2011:1	2011:6	3	int p ;
VAR_DECL	2011:1	2011:5	4	int p
TYPE	2011:1	2011:1	5	int
TYPE_NAME	2011:1	2011:1	6	int
LEAF_NODE	2011:1	2011:1	7	int
NAME	2011:5	2011:5	5	p
LEAF_NODE	2011:5	2011:5	6	p
LEAF_NODE	2011:6	2011:6	4	;
SELECTION	2012:1	2013:1	3	
KEYWORD	2012:1	2012:1	4	if
LEAF_NODE	2012:1	2012:1	5	if
LEAF_NODE	2012:4	2012:4	4	(
CONDITION	2012:5	2012:5	4	dir == NULL
EXPR	2012:5	2012:10	5	dir == NULL
FIELD	2012:5	2012:5	6	dir
LEAF_NODE	2012:5	2012:5	7	dir
EQ_OPERATOR	2012:8	2012:8	6	==
LEAF_NODE	2012:8	2012:8	7	==
FIELD	2012:10	2012:10	6	NULL
LEAF_NODE	2012:10	2012:10	7	NULL
LEAF_NODE	2012:14	2012:14	4	)
STATEMENTS	2013:1	2016:1	4	
LEAF_NODE	2013:1	2013:1	5	{
STATEMENTS	2014:2	2015:2	5	
EXPR_STATEMENT	2014:2	2014:11	6	( * ndir ) ++ ;
EXPR	2014:2	2014:9	7	( * ndir ) ++
LEAF_NODE	2014:2	2014:2	8	(
UNARY_EXPR	2014:3	2014:4	8	* ndir
UNARY_OPERATOR	2014:3	2014:3	9	*
LEAF_NODE	2014:3	2014:3	10	*
FIELD	2014:4	2014:4	9	ndir
LEAF_NODE	2014:4	2014:4	10	ndir
LEAF_NODE	2014:8	2014:8	8	)
LEAF_NODE	2014:9	2014:9	8	++
LEAF_NODE	2014:11	2014:11	7	;
JUMP_STATEMENT	2015:2	2015:11	6	return ( 1 ) ;
KEYWORD	2015:2	2015:2	7	return
LEAF_NODE	2015:2	2015:2	8	return
DESTINATION	2015:8	2015:8	7	( 1 )
EXPR	2015:8	2015:10	8	( 1 )
LEAF_NODE	2015:8	2015:8	9	(
FIELD	2015:9	2015:9	9	1
LEAF_NODE	2015:9	2015:9	10	1
LEAF_NODE	2015:10	2015:10	9	)
LEAF_NODE	2015:11	2015:11	7	;
LEAF_NODE	2016:1	2016:1	5	}
EXPR_STATEMENT	2017:1	2017:37	3	m = ( 1 << tif -> tif_dir . td_bitspersample ) ;
EXPR	2017:1	2017:1	4	m = ( 1 << tif -> tif_dir . td_bitspersample )
ASSIGN	2017:1	2017:3	5	m = ( 1 << tif -> tif_dir . td_bitspersample )
LVAL	2017:1	2017:1	6	m
FIELD	2017:1	2017:1	7	m
LEAF_NODE	2017:1	2017:1	8	m
ASSIGN_OP	2017:2	2017:2	6	=
LEAF_NODE	2017:2	2017:2	7	=
RVAL	2017:3	2017:36	6	( 1 << tif -> tif_dir . td_bitspersample )
LEAF_NODE	2017:3	2017:3	7	(
FIELD	2017:4	2017:4	7	1
LEAF_NODE	2017:4	2017:4	8	1
LEAF_NODE	2017:5	2017:5	7	<<
FIELD	2017:7	2017:20	7	tif -> tif_dir . td_bitspersample
LEAF_NODE	2017:7	2017:7	8	tif
LEAF_NODE	2017:10	2017:10	8	->
LEAF_NODE	2017:12	2017:12	8	tif_dir
LEAF_NODE	2017:19	2017:19	8	.
LEAF_NODE	2017:20	2017:20	8	td_bitspersample
LEAF_NODE	2017:36	2017:36	7	)
LEAF_NODE	2017:37	2017:37	4	;
EXPR_STATEMENT	2018:1	2018:63	3	n = tif -> tif_dir . td_samplesperpixel - tif -> tif_dir . td_extrasamples ;
EXPR	2018:1	2018:1	4	n = tif -> tif_dir . td_samplesperpixel - tif -> tif_dir . td_extrasamples
ASSIGN	2018:1	2018:3	5	n = tif -> tif_dir . td_samplesperpixel - tif -> tif_dir . td_extrasamples
LVAL	2018:1	2018:1	6	n
FIELD	2018:1	2018:1	7	n
LEAF_NODE	2018:1	2018:1	8	n
ASSIGN_OP	2018:2	2018:2	6	=
LEAF_NODE	2018:2	2018:2	7	=
RVAL	2018:3	2018:35	6	tif -> tif_dir . td_samplesperpixel - tif -> tif_dir . td_extrasamples
FIELD	2018:3	2018:16	7	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	2018:3	2018:3	8	tif
LEAF_NODE	2018:6	2018:6	8	->
LEAF_NODE	2018:8	2018:8	8	tif_dir
LEAF_NODE	2018:15	2018:15	8	.
LEAF_NODE	2018:16	2018:16	8	td_samplesperpixel
LEAF_NODE	2018:34	2018:34	7	-
FIELD	2018:35	2018:48	7	tif -> tif_dir . td_extrasamples
LEAF_NODE	2018:35	2018:35	8	tif
LEAF_NODE	2018:38	2018:38	8	->
LEAF_NODE	2018:40	2018:40	8	tif_dir
LEAF_NODE	2018:47	2018:47	8	.
LEAF_NODE	2018:48	2018:48	8	td_extrasamples
LEAF_NODE	2018:63	2018:63	4	;
SELECTION	2025:1	2026:2	3	
KEYWORD	2025:1	2025:1	4	if
LEAF_NODE	2025:1	2025:1	5	if
LEAF_NODE	2025:4	2025:4	4	(
CONDITION	2025:5	2025:5	4	n > 3
EXPR	2025:5	2025:7	5	n > 3
FIELD	2025:5	2025:5	6	n
LEAF_NODE	2025:5	2025:5	7	n
REL_OPERATOR	2025:6	2025:6	6	>
LEAF_NODE	2025:6	2025:6	7	>
FIELD	2025:7	2025:7	6	3
LEAF_NODE	2025:7	2025:7	7	3
LEAF_NODE	2025:8	2025:8	4	)
STATEMENTS	2026:2	2026:2	4	
EXPR_STATEMENT	2026:2	2026:5	5	n = 3 ;
EXPR	2026:2	2026:2	6	n = 3
ASSIGN	2026:2	2026:4	7	n = 3
LVAL	2026:2	2026:2	8	n
FIELD	2026:2	2026:2	9	n
LEAF_NODE	2026:2	2026:2	10	n
ASSIGN_OP	2026:3	2026:3	8	=
LEAF_NODE	2026:3	2026:3	9	=
RVAL	2026:4	2026:4	8	3
FIELD	2026:4	2026:4	9	3
LEAF_NODE	2026:4	2026:4	10	3
LEAF_NODE	2026:5	2026:5	6	;
SELECTION	2027:1	2028:1	3	
KEYWORD	2027:1	2027:1	4	if
LEAF_NODE	2027:1	2027:1	5	if
LEAF_NODE	2027:4	2027:4	4	(
CONDITION	2027:5	2027:5	4	n == 3
EXPR	2027:5	2027:8	5	n == 3
FIELD	2027:5	2027:5	6	n
LEAF_NODE	2027:5	2027:5	7	n
EQ_OPERATOR	2027:6	2027:6	6	==
LEAF_NODE	2027:6	2027:6	7	==
FIELD	2027:8	2027:8	6	3
LEAF_NODE	2027:8	2027:8	7	3
LEAF_NODE	2027:9	2027:9	4	)
STATEMENTS	2028:1	2032:1	4	
LEAF_NODE	2028:1	2028:1	5	{
STATEMENTS	2029:2	2029:2	5	
SELECTION	2029:2	2031:3	6	
KEYWORD	2029:2	2029:2	7	if
LEAF_NODE	2029:2	2029:2	8	if
LEAF_NODE	2029:5	2029:5	7	(
CONDITION	2029:6	2029:6	7	tif -> tif_dir . td_transferfunction [ 2 ] == NULL || ! _TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 2 ] , m * sizeof ( uint16 ) )
EXPR	2029:6	2029:6	8	tif -> tif_dir . td_transferfunction [ 2 ] == NULL || ! _TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 2 ] , m * sizeof ( uint16 ) )
OR	2029:6	2030:6	9	tif -> tif_dir . td_transferfunction [ 2 ] == NULL || ! _TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 2 ] , m * sizeof ( uint16 ) )
EXPR	2029:6	2029:45	10	tif -> tif_dir . td_transferfunction [ 2 ] == NULL
FIELD	2029:6	2029:40	11	tif -> tif_dir . td_transferfunction [ 2 ]
LEAF_NODE	2029:6	2029:6	12	tif
LEAF_NODE	2029:9	2029:9	12	->
LEAF_NODE	2029:11	2029:11	12	tif_dir
LEAF_NODE	2029:18	2029:18	12	.
LEAF_NODE	2029:19	2029:19	12	td_transferfunction
LEAF_NODE	2029:38	2029:38	12	[
EXPR	2029:39	2029:39	12	2
FIELD	2029:39	2029:39	13	2
LEAF_NODE	2029:39	2029:39	14	2
LEAF_NODE	2029:40	2029:40	12	]
EQ_OPERATOR	2029:42	2029:42	11	==
LEAF_NODE	2029:42	2029:42	12	==
FIELD	2029:45	2029:45	11	NULL
LEAF_NODE	2029:45	2029:45	12	NULL
LEAF_NODE	2029:50	2029:50	10	||
EXPR	2030:6	2030:6	10	! _TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 2 ] , m * sizeof ( uint16 ) )
UNARY_EXPR	2030:6	2030:7	11	! _TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 2 ] , m * sizeof ( uint16 ) )
UNARY_OPERATOR	2030:6	2030:6	12	!
LEAF_NODE	2030:6	2030:6	13	!
FUNCTION_CALL	2030:7	2030:107	12	_TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 2 ] , m * sizeof ( uint16 ) )
CALLEE	2030:7	2030:7	13	_TIFFmemcmp
LEAF_NODE	2030:7	2030:7	14	_TIFFmemcmp
LEAF_NODE	2030:18	2030:18	13	(
ARGUMENT	2030:19	2030:19	13	tif -> tif_dir . td_transferfunction [ 0 ]
FIELD	2030:19	2030:53	14	tif -> tif_dir . td_transferfunction [ 0 ]
LEAF_NODE	2030:19	2030:19	15	tif
LEAF_NODE	2030:22	2030:22	15	->
LEAF_NODE	2030:24	2030:24	15	tif_dir
LEAF_NODE	2030:31	2030:31	15	.
LEAF_NODE	2030:32	2030:32	15	td_transferfunction
LEAF_NODE	2030:51	2030:51	15	[
EXPR	2030:52	2030:52	15	0
FIELD	2030:52	2030:52	16	0
LEAF_NODE	2030:52	2030:52	17	0
LEAF_NODE	2030:53	2030:53	15	]
LEAF_NODE	2030:54	2030:54	13	,
ARGUMENT	2030:55	2030:55	13	tif -> tif_dir . td_transferfunction [ 2 ]
FIELD	2030:55	2030:89	14	tif -> tif_dir . td_transferfunction [ 2 ]
LEAF_NODE	2030:55	2030:55	15	tif
LEAF_NODE	2030:58	2030:58	15	->
LEAF_NODE	2030:60	2030:60	15	tif_dir
LEAF_NODE	2030:67	2030:67	15	.
LEAF_NODE	2030:68	2030:68	15	td_transferfunction
LEAF_NODE	2030:87	2030:87	15	[
EXPR	2030:88	2030:88	15	2
FIELD	2030:88	2030:88	16	2
LEAF_NODE	2030:88	2030:88	17	2
LEAF_NODE	2030:89	2030:89	15	]
LEAF_NODE	2030:90	2030:90	13	,
ARGUMENT	2030:91	2030:93	13	m * sizeof ( uint16 )
FIELD	2030:91	2030:91	14	m
LEAF_NODE	2030:91	2030:91	15	m
LEAF_NODE	2030:92	2030:92	14	*
FUNCTION_CALL	2030:93	2030:106	14	sizeof ( uint16 )
CALLEE	2030:93	2030:93	15	sizeof
LEAF_NODE	2030:93	2030:93	16	sizeof
LEAF_NODE	2030:99	2030:99	15	(
ARGUMENT	2030:100	2030:100	15	uint16
FIELD	2030:100	2030:100	16	uint16
LEAF_NODE	2030:100	2030:100	17	uint16
LEAF_NODE	2030:106	2030:106	15	)
LEAF_NODE	2030:107	2030:107	13	)
LEAF_NODE	2030:108	2030:108	7	)
STATEMENTS	2031:3	2031:3	7	
EXPR_STATEMENT	2031:3	2031:6	8	n = 2 ;
EXPR	2031:3	2031:3	9	n = 2
ASSIGN	2031:3	2031:5	10	n = 2
LVAL	2031:3	2031:3	11	n
FIELD	2031:3	2031:3	12	n
LEAF_NODE	2031:3	2031:3	13	n
ASSIGN_OP	2031:4	2031:4	11	=
LEAF_NODE	2031:4	2031:4	12	=
RVAL	2031:5	2031:5	11	2
FIELD	2031:5	2031:5	12	2
LEAF_NODE	2031:5	2031:5	13	2
LEAF_NODE	2031:6	2031:6	9	;
LEAF_NODE	2032:1	2032:1	5	}
SELECTION	2033:1	2034:1	3	
KEYWORD	2033:1	2033:1	4	if
LEAF_NODE	2033:1	2033:1	5	if
LEAF_NODE	2033:4	2033:4	4	(
CONDITION	2033:5	2033:5	4	n == 2
EXPR	2033:5	2033:8	5	n == 2
FIELD	2033:5	2033:5	6	n
LEAF_NODE	2033:5	2033:5	7	n
EQ_OPERATOR	2033:6	2033:6	6	==
LEAF_NODE	2033:6	2033:6	7	==
FIELD	2033:8	2033:8	6	2
LEAF_NODE	2033:8	2033:8	7	2
LEAF_NODE	2033:9	2033:9	4	)
STATEMENTS	2034:1	2038:1	4	
LEAF_NODE	2034:1	2034:1	5	{
STATEMENTS	2035:2	2035:2	5	
SELECTION	2035:2	2037:3	6	
KEYWORD	2035:2	2035:2	7	if
LEAF_NODE	2035:2	2035:2	8	if
LEAF_NODE	2035:5	2035:5	7	(
CONDITION	2035:6	2035:6	7	tif -> tif_dir . td_transferfunction [ 1 ] == NULL || ! _TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 1 ] , m * sizeof ( uint16 ) )
EXPR	2035:6	2035:6	8	tif -> tif_dir . td_transferfunction [ 1 ] == NULL || ! _TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 1 ] , m * sizeof ( uint16 ) )
OR	2035:6	2036:6	9	tif -> tif_dir . td_transferfunction [ 1 ] == NULL || ! _TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 1 ] , m * sizeof ( uint16 ) )
EXPR	2035:6	2035:45	10	tif -> tif_dir . td_transferfunction [ 1 ] == NULL
FIELD	2035:6	2035:40	11	tif -> tif_dir . td_transferfunction [ 1 ]
LEAF_NODE	2035:6	2035:6	12	tif
LEAF_NODE	2035:9	2035:9	12	->
LEAF_NODE	2035:11	2035:11	12	tif_dir
LEAF_NODE	2035:18	2035:18	12	.
LEAF_NODE	2035:19	2035:19	12	td_transferfunction
LEAF_NODE	2035:38	2035:38	12	[
EXPR	2035:39	2035:39	12	1
FIELD	2035:39	2035:39	13	1
LEAF_NODE	2035:39	2035:39	14	1
LEAF_NODE	2035:40	2035:40	12	]
EQ_OPERATOR	2035:42	2035:42	11	==
LEAF_NODE	2035:42	2035:42	12	==
FIELD	2035:45	2035:45	11	NULL
LEAF_NODE	2035:45	2035:45	12	NULL
LEAF_NODE	2035:50	2035:50	10	||
EXPR	2036:6	2036:6	10	! _TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 1 ] , m * sizeof ( uint16 ) )
UNARY_EXPR	2036:6	2036:7	11	! _TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 1 ] , m * sizeof ( uint16 ) )
UNARY_OPERATOR	2036:6	2036:6	12	!
LEAF_NODE	2036:6	2036:6	13	!
FUNCTION_CALL	2036:7	2036:107	12	_TIFFmemcmp ( tif -> tif_dir . td_transferfunction [ 0 ] , tif -> tif_dir . td_transferfunction [ 1 ] , m * sizeof ( uint16 ) )
CALLEE	2036:7	2036:7	13	_TIFFmemcmp
LEAF_NODE	2036:7	2036:7	14	_TIFFmemcmp
LEAF_NODE	2036:18	2036:18	13	(
ARGUMENT	2036:19	2036:19	13	tif -> tif_dir . td_transferfunction [ 0 ]
FIELD	2036:19	2036:53	14	tif -> tif_dir . td_transferfunction [ 0 ]
LEAF_NODE	2036:19	2036:19	15	tif
LEAF_NODE	2036:22	2036:22	15	->
LEAF_NODE	2036:24	2036:24	15	tif_dir
LEAF_NODE	2036:31	2036:31	15	.
LEAF_NODE	2036:32	2036:32	15	td_transferfunction
LEAF_NODE	2036:51	2036:51	15	[
EXPR	2036:52	2036:52	15	0
FIELD	2036:52	2036:52	16	0
LEAF_NODE	2036:52	2036:52	17	0
LEAF_NODE	2036:53	2036:53	15	]
LEAF_NODE	2036:54	2036:54	13	,
ARGUMENT	2036:55	2036:55	13	tif -> tif_dir . td_transferfunction [ 1 ]
FIELD	2036:55	2036:89	14	tif -> tif_dir . td_transferfunction [ 1 ]
LEAF_NODE	2036:55	2036:55	15	tif
LEAF_NODE	2036:58	2036:58	15	->
LEAF_NODE	2036:60	2036:60	15	tif_dir
LEAF_NODE	2036:67	2036:67	15	.
LEAF_NODE	2036:68	2036:68	15	td_transferfunction
LEAF_NODE	2036:87	2036:87	15	[
EXPR	2036:88	2036:88	15	1
FIELD	2036:88	2036:88	16	1
LEAF_NODE	2036:88	2036:88	17	1
LEAF_NODE	2036:89	2036:89	15	]
LEAF_NODE	2036:90	2036:90	13	,
ARGUMENT	2036:91	2036:93	13	m * sizeof ( uint16 )
FIELD	2036:91	2036:91	14	m
LEAF_NODE	2036:91	2036:91	15	m
LEAF_NODE	2036:92	2036:92	14	*
FUNCTION_CALL	2036:93	2036:106	14	sizeof ( uint16 )
CALLEE	2036:93	2036:93	15	sizeof
LEAF_NODE	2036:93	2036:93	16	sizeof
LEAF_NODE	2036:99	2036:99	15	(
ARGUMENT	2036:100	2036:100	15	uint16
FIELD	2036:100	2036:100	16	uint16
LEAF_NODE	2036:100	2036:100	17	uint16
LEAF_NODE	2036:106	2036:106	15	)
LEAF_NODE	2036:107	2036:107	13	)
LEAF_NODE	2036:108	2036:108	7	)
STATEMENTS	2037:3	2037:3	7	
EXPR_STATEMENT	2037:3	2037:6	8	n = 1 ;
EXPR	2037:3	2037:3	9	n = 1
ASSIGN	2037:3	2037:5	10	n = 1
LVAL	2037:3	2037:3	11	n
FIELD	2037:3	2037:3	12	n
LEAF_NODE	2037:3	2037:3	13	n
ASSIGN_OP	2037:4	2037:4	11	=
LEAF_NODE	2037:4	2037:4	12	=
RVAL	2037:5	2037:5	11	1
FIELD	2037:5	2037:5	12	1
LEAF_NODE	2037:5	2037:5	13	1
LEAF_NODE	2037:6	2037:6	9	;
LEAF_NODE	2038:1	2038:1	5	}
SELECTION	2039:1	2040:2	3	
KEYWORD	2039:1	2039:1	4	if
LEAF_NODE	2039:1	2039:1	5	if
LEAF_NODE	2039:4	2039:4	4	(
CONDITION	2039:5	2039:5	4	n == 0
EXPR	2039:5	2039:8	5	n == 0
FIELD	2039:5	2039:5	6	n
LEAF_NODE	2039:5	2039:5	7	n
EQ_OPERATOR	2039:6	2039:6	6	==
LEAF_NODE	2039:6	2039:6	7	==
FIELD	2039:8	2039:8	6	0
LEAF_NODE	2039:8	2039:8	7	0
LEAF_NODE	2039:9	2039:9	4	)
STATEMENTS	2040:2	2040:2	4	
EXPR_STATEMENT	2040:2	2040:5	5	n = 1 ;
EXPR	2040:2	2040:2	6	n = 1
ASSIGN	2040:2	2040:4	7	n = 1
LVAL	2040:2	2040:2	8	n
FIELD	2040:2	2040:2	9	n
LEAF_NODE	2040:2	2040:2	10	n
ASSIGN_OP	2040:3	2040:3	8	=
LEAF_NODE	2040:3	2040:3	9	=
RVAL	2040:4	2040:4	8	1
FIELD	2040:4	2040:4	9	1
LEAF_NODE	2040:4	2040:4	10	1
LEAF_NODE	2040:5	2040:5	6	;
LEAF_NODE	2041:1	2041:1	3	o
LEAF_NODE	2041:2	2041:2	3	=
LEAF_NODE	2041:3	2041:3	3	_TIFFmalloc
LEAF_NODE	2041:14	2041:14	3	(
LEAF_NODE	2041:15	2041:15	3	n
LEAF_NODE	2041:16	2041:16	3	*
LEAF_NODE	2041:17	2041:17	3	m
LEAF_NODE	2041:18	2041:18	3	*
LEAF_NODE	2041:19	2041:19	3	sizeof
LEAF_NODE	2041:25	2041:25	3	(
LEAF_NODE	2041:26	2041:26	3	uint16
LEAF_NODE	2041:32	2041:32	3	)
LEAF_NODE	2041:33	2041:33	3	)
LEAF_NODE	2041:34	2041:34	3	;
SELECTION	2042:1	2043:1	3	
KEYWORD	2042:1	2042:1	4	if
LEAF_NODE	2042:1	2042:1	5	if
LEAF_NODE	2042:4	2042:4	4	(
CONDITION	2042:5	2042:5	4	o == NULL
EXPR	2042:5	2042:8	5	o == NULL
FIELD	2042:5	2042:5	6	o
LEAF_NODE	2042:5	2042:5	7	o
EQ_OPERATOR	2042:6	2042:6	6	==
LEAF_NODE	2042:6	2042:6	7	==
FIELD	2042:8	2042:8	6	NULL
LEAF_NODE	2042:8	2042:8	7	NULL
LEAF_NODE	2042:12	2042:12	4	)
STATEMENTS	2043:1	2046:1	4	
LEAF_NODE	2043:1	2043:1	5	{
STATEMENTS	2044:2	2045:2	5	
EXPR_STATEMENT	2044:2	2044:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	2044:2	2044:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	2044:2	2044:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	2044:2	2044:2	9	TIFFErrorExt
LEAF_NODE	2044:2	2044:2	10	TIFFErrorExt
LEAF_NODE	2044:14	2044:14	9	(
ARGUMENT	2044:15	2044:15	9	tif -> tif_clientdata
FIELD	2044:15	2044:20	10	tif -> tif_clientdata
LEAF_NODE	2044:15	2044:15	11	tif
LEAF_NODE	2044:18	2044:18	11	->
LEAF_NODE	2044:20	2044:20	11	tif_clientdata
LEAF_NODE	2044:34	2044:34	9	,
ARGUMENT	2044:35	2044:35	9	module
FIELD	2044:35	2044:35	10	module
LEAF_NODE	2044:35	2044:35	11	module
LEAF_NODE	2044:41	2044:41	9	,
ARGUMENT	2044:42	2044:42	9	"Out of memory"
FIELD	2044:42	2044:42	10	"Out of memory"
LEAF_NODE	2044:42	2044:42	11	"Out of memory"
LEAF_NODE	2044:57	2044:57	9	)
LEAF_NODE	2044:58	2044:58	7	;
JUMP_STATEMENT	2045:2	2045:11	6	return ( 0 ) ;
KEYWORD	2045:2	2045:2	7	return
LEAF_NODE	2045:2	2045:2	8	return
DESTINATION	2045:8	2045:8	7	( 0 )
EXPR	2045:8	2045:10	8	( 0 )
LEAF_NODE	2045:8	2045:8	9	(
FIELD	2045:9	2045:9	9	0
LEAF_NODE	2045:9	2045:9	10	0
LEAF_NODE	2045:10	2045:10	9	)
LEAF_NODE	2045:11	2045:11	7	;
LEAF_NODE	2046:1	2046:1	5	}
EXPR_STATEMENT	2047:1	2047:72	3	_TIFFmemcpy ( & o [ 0 ] , tif -> tif_dir . td_transferfunction [ 0 ] , m * sizeof ( uint16 ) ) ;
EXPR	2047:1	2047:1	4	_TIFFmemcpy ( & o [ 0 ] , tif -> tif_dir . td_transferfunction [ 0 ] , m * sizeof ( uint16 ) )
FUNCTION_CALL	2047:1	2047:71	5	_TIFFmemcpy ( & o [ 0 ] , tif -> tif_dir . td_transferfunction [ 0 ] , m * sizeof ( uint16 ) )
CALLEE	2047:1	2047:1	6	_TIFFmemcpy
LEAF_NODE	2047:1	2047:1	7	_TIFFmemcpy
LEAF_NODE	2047:12	2047:12	6	(
ARGUMENT	2047:13	2047:13	6	& o [ 0 ]
UNARY_EXPR	2047:13	2047:14	7	& o [ 0 ]
UNARY_OPERATOR	2047:13	2047:13	8	&
LEAF_NODE	2047:13	2047:13	9	&
FIELD	2047:14	2047:17	8	o [ 0 ]
LEAF_NODE	2047:14	2047:14	9	o
LEAF_NODE	2047:15	2047:15	9	[
EXPR	2047:16	2047:16	9	0
FIELD	2047:16	2047:16	10	0
LEAF_NODE	2047:16	2047:16	11	0
LEAF_NODE	2047:17	2047:17	9	]
LEAF_NODE	2047:18	2047:18	6	,
ARGUMENT	2047:19	2047:19	6	tif -> tif_dir . td_transferfunction [ 0 ]
FIELD	2047:19	2047:53	7	tif -> tif_dir . td_transferfunction [ 0 ]
LEAF_NODE	2047:19	2047:19	8	tif
LEAF_NODE	2047:22	2047:22	8	->
LEAF_NODE	2047:24	2047:24	8	tif_dir
LEAF_NODE	2047:31	2047:31	8	.
LEAF_NODE	2047:32	2047:32	8	td_transferfunction
LEAF_NODE	2047:51	2047:51	8	[
EXPR	2047:52	2047:52	8	0
FIELD	2047:52	2047:52	9	0
LEAF_NODE	2047:52	2047:52	10	0
LEAF_NODE	2047:53	2047:53	8	]
LEAF_NODE	2047:54	2047:54	6	,
ARGUMENT	2047:55	2047:57	6	m * sizeof ( uint16 )
FIELD	2047:55	2047:55	7	m
LEAF_NODE	2047:55	2047:55	8	m
LEAF_NODE	2047:56	2047:56	7	*
FUNCTION_CALL	2047:57	2047:70	7	sizeof ( uint16 )
CALLEE	2047:57	2047:57	8	sizeof
LEAF_NODE	2047:57	2047:57	9	sizeof
LEAF_NODE	2047:63	2047:63	8	(
ARGUMENT	2047:64	2047:64	8	uint16
FIELD	2047:64	2047:64	9	uint16
LEAF_NODE	2047:64	2047:64	10	uint16
LEAF_NODE	2047:70	2047:70	8	)
LEAF_NODE	2047:71	2047:71	6	)
LEAF_NODE	2047:72	2047:72	4	;
SELECTION	2048:1	2049:2	3	
KEYWORD	2048:1	2048:1	4	if
LEAF_NODE	2048:1	2048:1	5	if
LEAF_NODE	2048:4	2048:4	4	(
CONDITION	2048:5	2048:5	4	n > 1
EXPR	2048:5	2048:7	5	n > 1
FIELD	2048:5	2048:5	6	n
LEAF_NODE	2048:5	2048:5	7	n
REL_OPERATOR	2048:6	2048:6	6	>
LEAF_NODE	2048:6	2048:6	7	>
FIELD	2048:7	2048:7	6	1
LEAF_NODE	2048:7	2048:7	7	1
LEAF_NODE	2048:8	2048:8	4	)
STATEMENTS	2049:2	2049:2	4	
EXPR_STATEMENT	2049:2	2049:73	5	_TIFFmemcpy ( & o [ m ] , tif -> tif_dir . td_transferfunction [ 1 ] , m * sizeof ( uint16 ) ) ;
EXPR	2049:2	2049:2	6	_TIFFmemcpy ( & o [ m ] , tif -> tif_dir . td_transferfunction [ 1 ] , m * sizeof ( uint16 ) )
FUNCTION_CALL	2049:2	2049:72	7	_TIFFmemcpy ( & o [ m ] , tif -> tif_dir . td_transferfunction [ 1 ] , m * sizeof ( uint16 ) )
CALLEE	2049:2	2049:2	8	_TIFFmemcpy
LEAF_NODE	2049:2	2049:2	9	_TIFFmemcpy
LEAF_NODE	2049:13	2049:13	8	(
ARGUMENT	2049:14	2049:14	8	& o [ m ]
UNARY_EXPR	2049:14	2049:15	9	& o [ m ]
UNARY_OPERATOR	2049:14	2049:14	10	&
LEAF_NODE	2049:14	2049:14	11	&
FIELD	2049:15	2049:18	10	o [ m ]
LEAF_NODE	2049:15	2049:15	11	o
LEAF_NODE	2049:16	2049:16	11	[
EXPR	2049:17	2049:17	11	m
FIELD	2049:17	2049:17	12	m
LEAF_NODE	2049:17	2049:17	13	m
LEAF_NODE	2049:18	2049:18	11	]
LEAF_NODE	2049:19	2049:19	8	,
ARGUMENT	2049:20	2049:20	8	tif -> tif_dir . td_transferfunction [ 1 ]
FIELD	2049:20	2049:54	9	tif -> tif_dir . td_transferfunction [ 1 ]
LEAF_NODE	2049:20	2049:20	10	tif
LEAF_NODE	2049:23	2049:23	10	->
LEAF_NODE	2049:25	2049:25	10	tif_dir
LEAF_NODE	2049:32	2049:32	10	.
LEAF_NODE	2049:33	2049:33	10	td_transferfunction
LEAF_NODE	2049:52	2049:52	10	[
EXPR	2049:53	2049:53	10	1
FIELD	2049:53	2049:53	11	1
LEAF_NODE	2049:53	2049:53	12	1
LEAF_NODE	2049:54	2049:54	10	]
LEAF_NODE	2049:55	2049:55	8	,
ARGUMENT	2049:56	2049:58	8	m * sizeof ( uint16 )
FIELD	2049:56	2049:56	9	m
LEAF_NODE	2049:56	2049:56	10	m
LEAF_NODE	2049:57	2049:57	9	*
FUNCTION_CALL	2049:58	2049:71	9	sizeof ( uint16 )
CALLEE	2049:58	2049:58	10	sizeof
LEAF_NODE	2049:58	2049:58	11	sizeof
LEAF_NODE	2049:64	2049:64	10	(
ARGUMENT	2049:65	2049:65	10	uint16
FIELD	2049:65	2049:65	11	uint16
LEAF_NODE	2049:65	2049:65	12	uint16
LEAF_NODE	2049:71	2049:71	10	)
LEAF_NODE	2049:72	2049:72	8	)
LEAF_NODE	2049:73	2049:73	6	;
SELECTION	2050:1	2051:2	3	
KEYWORD	2050:1	2050:1	4	if
LEAF_NODE	2050:1	2050:1	5	if
LEAF_NODE	2050:4	2050:4	4	(
CONDITION	2050:5	2050:5	4	n > 2
EXPR	2050:5	2050:7	5	n > 2
FIELD	2050:5	2050:5	6	n
LEAF_NODE	2050:5	2050:5	7	n
REL_OPERATOR	2050:6	2050:6	6	>
LEAF_NODE	2050:6	2050:6	7	>
FIELD	2050:7	2050:7	6	2
LEAF_NODE	2050:7	2050:7	7	2
LEAF_NODE	2050:8	2050:8	4	)
STATEMENTS	2051:2	2051:2	4	
EXPR_STATEMENT	2051:2	2051:75	5	_TIFFmemcpy ( & o [ 2 * m ] , tif -> tif_dir . td_transferfunction [ 2 ] , m * sizeof ( uint16 ) ) ;
EXPR	2051:2	2051:2	6	_TIFFmemcpy ( & o [ 2 * m ] , tif -> tif_dir . td_transferfunction [ 2 ] , m * sizeof ( uint16 ) )
FUNCTION_CALL	2051:2	2051:74	7	_TIFFmemcpy ( & o [ 2 * m ] , tif -> tif_dir . td_transferfunction [ 2 ] , m * sizeof ( uint16 ) )
CALLEE	2051:2	2051:2	8	_TIFFmemcpy
LEAF_NODE	2051:2	2051:2	9	_TIFFmemcpy
LEAF_NODE	2051:13	2051:13	8	(
ARGUMENT	2051:14	2051:14	8	& o [ 2 * m ]
UNARY_EXPR	2051:14	2051:15	9	& o [ 2 * m ]
UNARY_OPERATOR	2051:14	2051:14	10	&
LEAF_NODE	2051:14	2051:14	11	&
FIELD	2051:15	2051:20	10	o [ 2 * m ]
LEAF_NODE	2051:15	2051:15	11	o
LEAF_NODE	2051:16	2051:16	11	[
EXPR	2051:17	2051:19	11	2 * m
FIELD	2051:17	2051:17	12	2
LEAF_NODE	2051:17	2051:17	13	2
LEAF_NODE	2051:18	2051:18	12	*
FIELD	2051:19	2051:19	12	m
LEAF_NODE	2051:19	2051:19	13	m
LEAF_NODE	2051:20	2051:20	11	]
LEAF_NODE	2051:21	2051:21	8	,
ARGUMENT	2051:22	2051:22	8	tif -> tif_dir . td_transferfunction [ 2 ]
FIELD	2051:22	2051:56	9	tif -> tif_dir . td_transferfunction [ 2 ]
LEAF_NODE	2051:22	2051:22	10	tif
LEAF_NODE	2051:25	2051:25	10	->
LEAF_NODE	2051:27	2051:27	10	tif_dir
LEAF_NODE	2051:34	2051:34	10	.
LEAF_NODE	2051:35	2051:35	10	td_transferfunction
LEAF_NODE	2051:54	2051:54	10	[
EXPR	2051:55	2051:55	10	2
FIELD	2051:55	2051:55	11	2
LEAF_NODE	2051:55	2051:55	12	2
LEAF_NODE	2051:56	2051:56	10	]
LEAF_NODE	2051:57	2051:57	8	,
ARGUMENT	2051:58	2051:60	8	m * sizeof ( uint16 )
FIELD	2051:58	2051:58	9	m
LEAF_NODE	2051:58	2051:58	10	m
LEAF_NODE	2051:59	2051:59	9	*
FUNCTION_CALL	2051:60	2051:73	9	sizeof ( uint16 )
CALLEE	2051:60	2051:60	10	sizeof
LEAF_NODE	2051:60	2051:60	11	sizeof
LEAF_NODE	2051:66	2051:66	10	(
ARGUMENT	2051:67	2051:67	10	uint16
FIELD	2051:67	2051:67	11	uint16
LEAF_NODE	2051:67	2051:67	12	uint16
LEAF_NODE	2051:73	2051:73	10	)
LEAF_NODE	2051:74	2051:74	8	)
LEAF_NODE	2051:75	2051:75	6	;
EXPR_STATEMENT	2052:1	2052:86	3	p = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , TIFFTAG_TRANSFERFUNCTION , n * m , o ) ;
EXPR	2052:1	2052:1	4	p = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , TIFFTAG_TRANSFERFUNCTION , n * m , o )
ASSIGN	2052:1	2052:3	5	p = TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , TIFFTAG_TRANSFERFUNCTION , n * m , o )
LVAL	2052:1	2052:1	6	p
FIELD	2052:1	2052:1	7	p
LEAF_NODE	2052:1	2052:1	8	p
ASSIGN_OP	2052:2	2052:2	6	=
LEAF_NODE	2052:2	2052:2	7	=
RVAL	2052:3	2052:3	6	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , TIFFTAG_TRANSFERFUNCTION , n * m , o )
FUNCTION_CALL	2052:3	2052:85	7	TIFFWriteDirectoryTagCheckedShortArray ( tif , ndir , dir , TIFFTAG_TRANSFERFUNCTION , n * m , o )
CALLEE	2052:3	2052:3	8	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	2052:3	2052:3	9	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	2052:41	2052:41	8	(
ARGUMENT	2052:42	2052:42	8	tif
FIELD	2052:42	2052:42	9	tif
LEAF_NODE	2052:42	2052:42	10	tif
LEAF_NODE	2052:45	2052:45	8	,
ARGUMENT	2052:46	2052:46	8	ndir
FIELD	2052:46	2052:46	9	ndir
LEAF_NODE	2052:46	2052:46	10	ndir
LEAF_NODE	2052:50	2052:50	8	,
ARGUMENT	2052:51	2052:51	8	dir
FIELD	2052:51	2052:51	9	dir
LEAF_NODE	2052:51	2052:51	10	dir
LEAF_NODE	2052:54	2052:54	8	,
ARGUMENT	2052:55	2052:55	8	TIFFTAG_TRANSFERFUNCTION
FIELD	2052:55	2052:55	9	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	2052:55	2052:55	10	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	2052:79	2052:79	8	,
ARGUMENT	2052:80	2052:82	8	n * m
FIELD	2052:80	2052:80	9	n
LEAF_NODE	2052:80	2052:80	10	n
LEAF_NODE	2052:81	2052:81	9	*
FIELD	2052:82	2052:82	9	m
LEAF_NODE	2052:82	2052:82	10	m
LEAF_NODE	2052:83	2052:83	8	,
ARGUMENT	2052:84	2052:84	8	o
FIELD	2052:84	2052:84	9	o
LEAF_NODE	2052:84	2052:84	10	o
LEAF_NODE	2052:85	2052:85	8	)
LEAF_NODE	2052:86	2052:86	4	;
EXPR_STATEMENT	2053:1	2053:13	3	_TIFFfree ( o ) ;
EXPR	2053:1	2053:1	4	_TIFFfree ( o )
FUNCTION_CALL	2053:1	2053:12	5	_TIFFfree ( o )
CALLEE	2053:1	2053:1	6	_TIFFfree
LEAF_NODE	2053:1	2053:1	7	_TIFFfree
LEAF_NODE	2053:10	2053:10	6	(
ARGUMENT	2053:11	2053:11	6	o
FIELD	2053:11	2053:11	7	o
LEAF_NODE	2053:11	2053:11	8	o
LEAF_NODE	2053:12	2053:12	6	)
LEAF_NODE	2053:13	2053:13	4	;
LEAF_NODE	2054:1	2054:1	3	return
LEAF_NODE	2054:7	2054:7	3	(
LEAF_NODE	2054:8	2054:8	3	p
LEAF_NODE	2054:9	2054:9	3	)
LEAF_NODE	2054:10	2054:10	3	;
LEAF_NODE	2055:0	2055:0	2	}
FUNCTION_DEF	2057:0	2120:0	1	
RETURN_TYPE	2057:0	2057:7	2	static int
LEAF_NODE	2057:0	2057:0	3	static
TYPE_NAME	2057:7	2057:7	3	int
LEAF_NODE	2057:7	2057:7	4	int
FUNCTION_NAME	2058:0	2058:0	2	TIFFWriteDirectoryTagSubifd
LEAF_NODE	2058:0	2058:0	3	TIFFWriteDirectoryTagSubifd
PARAMETER_LIST	2058:27	2058:70	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir )
LEAF_NODE	2058:27	2058:27	3	(
PARAMETER_DECL	2058:28	2058:34	3	TIFF * tif
TYPE	2058:28	2058:32	4	TIFF *
TYPE_NAME	2058:28	2058:28	5	TIFF
LEAF_NODE	2058:28	2058:28	6	TIFF
POINTER	2058:32	2058:32	5	*
LEAF_NODE	2058:32	2058:32	6	*
NAME	2058:34	2058:34	4	tif
LEAF_NODE	2058:34	2058:34	5	tif
LEAF_NODE	2058:37	2058:37	3	,
PARAMETER_DECL	2058:39	2058:47	3	uint32 * ndir
TYPE	2058:39	2058:45	4	uint32 *
TYPE_NAME	2058:39	2058:39	5	uint32
LEAF_NODE	2058:39	2058:39	6	uint32
POINTER	2058:45	2058:45	5	*
LEAF_NODE	2058:45	2058:45	6	*
NAME	2058:47	2058:47	4	ndir
LEAF_NODE	2058:47	2058:47	5	ndir
LEAF_NODE	2058:51	2058:51	3	,
PARAMETER_DECL	2058:53	2058:67	3	TIFFDirEntry * dir
TYPE	2058:53	2058:65	4	TIFFDirEntry *
TYPE_NAME	2058:53	2058:53	5	TIFFDirEntry
LEAF_NODE	2058:53	2058:53	6	TIFFDirEntry
POINTER	2058:65	2058:65	5	*
LEAF_NODE	2058:65	2058:65	6	*
NAME	2058:67	2058:67	4	dir
LEAF_NODE	2058:67	2058:67	5	dir
LEAF_NODE	2058:70	2058:70	3	)
LEAF_NODE	2059:0	2059:0	2	{
STATEMENTS	2060:1	2119:1	2	
LEAF_NODE	2060:1	2060:1	3	static
SIMPLE_DECL	2060:8	2060:59	3	const char [ ] module ; module = "TIFFWriteDirectoryTagSubifd" ;
VAR_DECL	2060:8	2060:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagSubifd"
TYPE	2060:8	2060:25	5	const char [ ]
TYPE_NAME	2060:8	2060:14	6	const char
LEAF_NODE	2060:8	2060:8	7	const
LEAF_NODE	2060:14	2060:14	7	char
TYPE_SUFFIX	2060:25	2060:26	6	[ ]
LEAF_NODE	2060:25	2060:25	7	[
LEAF_NODE	2060:26	2060:26	7	]
NAME	2060:19	2060:19	5	module
LEAF_NODE	2060:19	2060:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2060:19	2060:19	5	module = "TIFFWriteDirectoryTagSubifd"
ASSIGN	2060:19	2060:30	6	module = "TIFFWriteDirectoryTagSubifd"
LVAL	2060:19	2060:19	7	module
NAME	2060:19	2060:19	8	module
LEAF_NODE	2060:19	2060:19	9	module
ASSIGN_OP	2060:28	2060:28	7	=
LEAF_NODE	2060:28	2060:28	8	=
RVAL	2060:30	2060:30	7	"TIFFWriteDirectoryTagSubifd"
FIELD	2060:30	2060:30	8	"TIFFWriteDirectoryTagSubifd"
LEAF_NODE	2060:30	2060:30	9	"TIFFWriteDirectoryTagSubifd"
LEAF_NODE	2060:59	2060:59	4	;
SIMPLE_DECL	2061:1	2061:9	3	uint64 m ;
VAR_DECL	2061:1	2061:8	4	uint64 m
TYPE	2061:1	2061:1	5	uint64
TYPE_NAME	2061:1	2061:1	6	uint64
LEAF_NODE	2061:1	2061:1	7	uint64
NAME	2061:8	2061:8	5	m
LEAF_NODE	2061:8	2061:8	6	m
LEAF_NODE	2061:9	2061:9	4	;
SIMPLE_DECL	2062:1	2062:6	3	int n ;
VAR_DECL	2062:1	2062:5	4	int n
TYPE	2062:1	2062:1	5	int
TYPE_NAME	2062:1	2062:1	6	int
LEAF_NODE	2062:1	2062:1	7	int
NAME	2062:5	2062:5	5	n
LEAF_NODE	2062:5	2062:5	6	n
LEAF_NODE	2062:6	2062:6	4	;
SELECTION	2063:1	2064:2	3	
KEYWORD	2063:1	2063:1	4	if
LEAF_NODE	2063:1	2063:1	5	if
LEAF_NODE	2063:4	2063:4	4	(
CONDITION	2063:5	2063:5	4	tif -> tif_dir . td_nsubifd == 0
EXPR	2063:5	2063:30	5	tif -> tif_dir . td_nsubifd == 0
FIELD	2063:5	2063:18	6	tif -> tif_dir . td_nsubifd
LEAF_NODE	2063:5	2063:5	7	tif
LEAF_NODE	2063:8	2063:8	7	->
LEAF_NODE	2063:10	2063:10	7	tif_dir
LEAF_NODE	2063:17	2063:17	7	.
LEAF_NODE	2063:18	2063:18	7	td_nsubifd
EQ_OPERATOR	2063:28	2063:28	6	==
LEAF_NODE	2063:28	2063:28	7	==
FIELD	2063:30	2063:30	6	0
LEAF_NODE	2063:30	2063:30	7	0
LEAF_NODE	2063:31	2063:31	4	)
STATEMENTS	2064:2	2064:2	4	
JUMP_STATEMENT	2064:2	2064:11	5	return ( 1 ) ;
KEYWORD	2064:2	2064:2	6	return
LEAF_NODE	2064:2	2064:2	7	return
DESTINATION	2064:8	2064:8	6	( 1 )
EXPR	2064:8	2064:10	7	( 1 )
LEAF_NODE	2064:8	2064:8	8	(
FIELD	2064:9	2064:9	8	1
LEAF_NODE	2064:9	2064:9	9	1
LEAF_NODE	2064:10	2064:10	8	)
LEAF_NODE	2064:11	2064:11	6	;
SELECTION	2065:1	2066:1	3	
KEYWORD	2065:1	2065:1	4	if
LEAF_NODE	2065:1	2065:1	5	if
LEAF_NODE	2065:4	2065:4	4	(
CONDITION	2065:5	2065:5	4	dir == NULL
EXPR	2065:5	2065:10	5	dir == NULL
FIELD	2065:5	2065:5	6	dir
LEAF_NODE	2065:5	2065:5	7	dir
EQ_OPERATOR	2065:8	2065:8	6	==
LEAF_NODE	2065:8	2065:8	7	==
FIELD	2065:10	2065:10	6	NULL
LEAF_NODE	2065:10	2065:10	7	NULL
LEAF_NODE	2065:14	2065:14	4	)
STATEMENTS	2066:1	2069:1	4	
LEAF_NODE	2066:1	2066:1	5	{
STATEMENTS	2067:2	2068:2	5	
EXPR_STATEMENT	2067:2	2067:11	6	( * ndir ) ++ ;
EXPR	2067:2	2067:9	7	( * ndir ) ++
LEAF_NODE	2067:2	2067:2	8	(
UNARY_EXPR	2067:3	2067:4	8	* ndir
UNARY_OPERATOR	2067:3	2067:3	9	*
LEAF_NODE	2067:3	2067:3	10	*
FIELD	2067:4	2067:4	9	ndir
LEAF_NODE	2067:4	2067:4	10	ndir
LEAF_NODE	2067:8	2067:8	8	)
LEAF_NODE	2067:9	2067:9	8	++
LEAF_NODE	2067:11	2067:11	7	;
JUMP_STATEMENT	2068:2	2068:11	6	return ( 1 ) ;
KEYWORD	2068:2	2068:2	7	return
LEAF_NODE	2068:2	2068:2	8	return
DESTINATION	2068:8	2068:8	7	( 1 )
EXPR	2068:8	2068:10	8	( 1 )
LEAF_NODE	2068:8	2068:8	9	(
FIELD	2068:9	2068:9	9	1
LEAF_NODE	2068:9	2068:9	10	1
LEAF_NODE	2068:10	2068:10	9	)
LEAF_NODE	2068:11	2068:11	7	;
LEAF_NODE	2069:1	2069:1	5	}
EXPR_STATEMENT	2070:1	2070:19	3	m = tif -> tif_dataoff ;
EXPR	2070:1	2070:1	4	m = tif -> tif_dataoff
ASSIGN	2070:1	2070:3	5	m = tif -> tif_dataoff
LVAL	2070:1	2070:1	6	m
FIELD	2070:1	2070:1	7	m
LEAF_NODE	2070:1	2070:1	8	m
ASSIGN_OP	2070:2	2070:2	6	=
LEAF_NODE	2070:2	2070:2	7	=
RVAL	2070:3	2070:3	6	tif -> tif_dataoff
FIELD	2070:3	2070:8	7	tif -> tif_dataoff
LEAF_NODE	2070:3	2070:3	8	tif
LEAF_NODE	2070:6	2070:6	8	->
LEAF_NODE	2070:8	2070:8	8	tif_dataoff
LEAF_NODE	2070:19	2070:19	4	;
SELECTION	2071:1	2072:1	3	
KEYWORD	2071:1	2071:1	4	if
LEAF_NODE	2071:1	2071:1	5	if
LEAF_NODE	2071:4	2071:4	4	(
CONDITION	2071:5	2071:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2071:5	2071:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2071:5	2071:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2071:5	2071:5	7	!
LEAF_NODE	2071:5	2071:5	8	!
LEAF_NODE	2071:6	2071:6	7	(
FIELD	2071:7	2071:12	7	tif -> tif_flags
LEAF_NODE	2071:7	2071:7	8	tif
LEAF_NODE	2071:10	2071:10	8	->
LEAF_NODE	2071:12	2071:12	8	tif_flags
LEAF_NODE	2071:21	2071:21	7	&
FIELD	2071:22	2071:22	7	TIFF_BIGTIFF
LEAF_NODE	2071:22	2071:22	8	TIFF_BIGTIFF
LEAF_NODE	2071:34	2071:34	7	)
LEAF_NODE	2071:35	2071:35	4	)
STATEMENTS	2072:1	2100:1	4	
LEAF_NODE	2072:1	2072:1	5	{
STATEMENTS	2073:2	2099:2	5	
SIMPLE_DECL	2073:2	2073:11	6	uint32 * o ;
VAR_DECL	2073:2	2073:10	7	uint32 * o
TYPE	2073:2	2073:8	8	uint32 *
TYPE_NAME	2073:2	2073:2	9	uint32
LEAF_NODE	2073:2	2073:2	10	uint32
POINTER	2073:8	2073:8	9	*
LEAF_NODE	2073:8	2073:8	10	*
NAME	2073:10	2073:10	8	o
LEAF_NODE	2073:10	2073:10	9	o
LEAF_NODE	2073:11	2073:11	7	;
SIMPLE_DECL	2074:2	2074:12	6	uint64 * pa ;
VAR_DECL	2074:2	2074:10	7	uint64 * pa
TYPE	2074:2	2074:8	8	uint64 *
TYPE_NAME	2074:2	2074:2	9	uint64
LEAF_NODE	2074:2	2074:2	10	uint64
POINTER	2074:8	2074:8	9	*
LEAF_NODE	2074:8	2074:8	10	*
NAME	2074:10	2074:10	8	pa
LEAF_NODE	2074:10	2074:10	9	pa
LEAF_NODE	2074:12	2074:12	7	;
SIMPLE_DECL	2075:2	2075:12	6	uint32 * pb ;
VAR_DECL	2075:2	2075:10	7	uint32 * pb
TYPE	2075:2	2075:8	8	uint32 *
TYPE_NAME	2075:2	2075:2	9	uint32
LEAF_NODE	2075:2	2075:2	10	uint32
POINTER	2075:8	2075:8	9	*
LEAF_NODE	2075:8	2075:8	10	*
NAME	2075:10	2075:10	8	pb
LEAF_NODE	2075:10	2075:10	9	pb
LEAF_NODE	2075:12	2075:12	7	;
SIMPLE_DECL	2076:2	2076:10	6	uint16 p ;
VAR_DECL	2076:2	2076:9	7	uint16 p
TYPE	2076:2	2076:2	8	uint16
TYPE_NAME	2076:2	2076:2	9	uint16
LEAF_NODE	2076:2	2076:2	10	uint16
NAME	2076:9	2076:9	8	p
LEAF_NODE	2076:9	2076:9	9	p
LEAF_NODE	2076:10	2076:10	7	;
EXPR_STATEMENT	2077:2	2077:55	6	o = _TIFFmalloc ( tif -> tif_dir . td_nsubifd * sizeof ( uint32 ) ) ;
EXPR	2077:2	2077:2	7	o = _TIFFmalloc ( tif -> tif_dir . td_nsubifd * sizeof ( uint32 ) )
ASSIGN	2077:2	2077:4	8	o = _TIFFmalloc ( tif -> tif_dir . td_nsubifd * sizeof ( uint32 ) )
LVAL	2077:2	2077:2	9	o
FIELD	2077:2	2077:2	10	o
LEAF_NODE	2077:2	2077:2	11	o
ASSIGN_OP	2077:3	2077:3	9	=
LEAF_NODE	2077:3	2077:3	10	=
RVAL	2077:4	2077:4	9	_TIFFmalloc ( tif -> tif_dir . td_nsubifd * sizeof ( uint32 ) )
FUNCTION_CALL	2077:4	2077:54	10	_TIFFmalloc ( tif -> tif_dir . td_nsubifd * sizeof ( uint32 ) )
CALLEE	2077:4	2077:4	11	_TIFFmalloc
LEAF_NODE	2077:4	2077:4	12	_TIFFmalloc
LEAF_NODE	2077:15	2077:15	11	(
ARGUMENT	2077:16	2077:40	11	tif -> tif_dir . td_nsubifd * sizeof ( uint32 )
FIELD	2077:16	2077:29	12	tif -> tif_dir . td_nsubifd
LEAF_NODE	2077:16	2077:16	13	tif
LEAF_NODE	2077:19	2077:19	13	->
LEAF_NODE	2077:21	2077:21	13	tif_dir
LEAF_NODE	2077:28	2077:28	13	.
LEAF_NODE	2077:29	2077:29	13	td_nsubifd
LEAF_NODE	2077:39	2077:39	12	*
FUNCTION_CALL	2077:40	2077:53	12	sizeof ( uint32 )
CALLEE	2077:40	2077:40	13	sizeof
LEAF_NODE	2077:40	2077:40	14	sizeof
LEAF_NODE	2077:46	2077:46	13	(
ARGUMENT	2077:47	2077:47	13	uint32
FIELD	2077:47	2077:47	14	uint32
LEAF_NODE	2077:47	2077:47	15	uint32
LEAF_NODE	2077:53	2077:53	13	)
LEAF_NODE	2077:54	2077:54	11	)
LEAF_NODE	2077:55	2077:55	7	;
SELECTION	2078:2	2079:2	6	
KEYWORD	2078:2	2078:2	7	if
LEAF_NODE	2078:2	2078:2	8	if
LEAF_NODE	2078:5	2078:5	7	(
CONDITION	2078:6	2078:6	7	o == NULL
EXPR	2078:6	2078:9	8	o == NULL
FIELD	2078:6	2078:6	9	o
LEAF_NODE	2078:6	2078:6	10	o
EQ_OPERATOR	2078:7	2078:7	9	==
LEAF_NODE	2078:7	2078:7	10	==
FIELD	2078:9	2078:9	9	NULL
LEAF_NODE	2078:9	2078:9	10	NULL
LEAF_NODE	2078:13	2078:13	7	)
STATEMENTS	2079:2	2082:2	7	
LEAF_NODE	2079:2	2079:2	8	{
STATEMENTS	2080:3	2081:3	8	
EXPR_STATEMENT	2080:3	2080:59	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	2080:3	2080:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	2080:3	2080:58	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	2080:3	2080:3	12	TIFFErrorExt
LEAF_NODE	2080:3	2080:3	13	TIFFErrorExt
LEAF_NODE	2080:15	2080:15	12	(
ARGUMENT	2080:16	2080:16	12	tif -> tif_clientdata
FIELD	2080:16	2080:21	13	tif -> tif_clientdata
LEAF_NODE	2080:16	2080:16	14	tif
LEAF_NODE	2080:19	2080:19	14	->
LEAF_NODE	2080:21	2080:21	14	tif_clientdata
LEAF_NODE	2080:35	2080:35	12	,
ARGUMENT	2080:36	2080:36	12	module
FIELD	2080:36	2080:36	13	module
LEAF_NODE	2080:36	2080:36	14	module
LEAF_NODE	2080:42	2080:42	12	,
ARGUMENT	2080:43	2080:43	12	"Out of memory"
FIELD	2080:43	2080:43	13	"Out of memory"
LEAF_NODE	2080:43	2080:43	14	"Out of memory"
LEAF_NODE	2080:58	2080:58	12	)
LEAF_NODE	2080:59	2080:59	10	;
JUMP_STATEMENT	2081:3	2081:12	9	return ( 0 ) ;
KEYWORD	2081:3	2081:3	10	return
LEAF_NODE	2081:3	2081:3	11	return
DESTINATION	2081:9	2081:9	10	( 0 )
EXPR	2081:9	2081:11	11	( 0 )
LEAF_NODE	2081:9	2081:9	12	(
FIELD	2081:10	2081:10	12	0
LEAF_NODE	2081:10	2081:10	13	0
LEAF_NODE	2081:11	2081:11	12	)
LEAF_NODE	2081:12	2081:12	10	;
LEAF_NODE	2082:2	2082:2	8	}
EXPR_STATEMENT	2083:2	2083:27	6	pa = tif -> tif_dir . td_subifd ;
EXPR	2083:2	2083:2	7	pa = tif -> tif_dir . td_subifd
ASSIGN	2083:2	2083:5	8	pa = tif -> tif_dir . td_subifd
LVAL	2083:2	2083:2	9	pa
FIELD	2083:2	2083:2	10	pa
LEAF_NODE	2083:2	2083:2	11	pa
ASSIGN_OP	2083:4	2083:4	9	=
LEAF_NODE	2083:4	2083:4	10	=
RVAL	2083:5	2083:5	9	tif -> tif_dir . td_subifd
FIELD	2083:5	2083:18	10	tif -> tif_dir . td_subifd
LEAF_NODE	2083:5	2083:5	11	tif
LEAF_NODE	2083:8	2083:8	11	->
LEAF_NODE	2083:10	2083:10	11	tif_dir
LEAF_NODE	2083:17	2083:17	11	.
LEAF_NODE	2083:18	2083:18	11	td_subifd
LEAF_NODE	2083:27	2083:27	7	;
EXPR_STATEMENT	2084:2	2084:6	6	pb = o ;
EXPR	2084:2	2084:2	7	pb = o
ASSIGN	2084:2	2084:5	8	pb = o
LVAL	2084:2	2084:2	9	pb
FIELD	2084:2	2084:2	10	pb
LEAF_NODE	2084:2	2084:2	11	pb
ASSIGN_OP	2084:4	2084:4	9	=
LEAF_NODE	2084:4	2084:4	10	=
RVAL	2084:5	2084:5	9	o
FIELD	2084:5	2084:5	10	o
LEAF_NODE	2084:5	2084:5	11	o
LEAF_NODE	2084:6	2084:6	7	;
ITERATION	2085:2	2086:2	6	
KEYWORD	2085:2	2085:2	7	for
LEAF_NODE	2085:2	2085:2	8	for
LEAF_NODE	2085:6	2085:6	7	(
FOR_INIT	2085:7	2085:10	7	p = 0 ;
EXPR	2085:7	2085:7	8	p = 0
ASSIGN	2085:7	2085:9	9	p = 0
LVAL	2085:7	2085:7	10	p
FIELD	2085:7	2085:7	11	p
LEAF_NODE	2085:7	2085:7	12	p
ASSIGN_OP	2085:8	2085:8	10	=
LEAF_NODE	2085:8	2085:8	11	=
RVAL	2085:9	2085:9	10	0
FIELD	2085:9	2085:9	11	0
LEAF_NODE	2085:9	2085:9	12	0
LEAF_NODE	2085:10	2085:10	8	;
CONDITION	2085:12	2085:12	7	p < tif -> tif_dir . td_nsubifd
EXPR	2085:12	2085:16	8	p < tif -> tif_dir . td_nsubifd
FIELD	2085:12	2085:12	9	p
LEAF_NODE	2085:12	2085:12	10	p
REL_OPERATOR	2085:14	2085:14	9	<
LEAF_NODE	2085:14	2085:14	10	<
FIELD	2085:16	2085:29	9	tif -> tif_dir . td_nsubifd
LEAF_NODE	2085:16	2085:16	10	tif
LEAF_NODE	2085:19	2085:19	10	->
LEAF_NODE	2085:21	2085:21	10	tif_dir
LEAF_NODE	2085:28	2085:28	10	.
LEAF_NODE	2085:29	2085:29	10	td_nsubifd
LEAF_NODE	2085:39	2085:39	7	;
FOR_EXPR	2085:41	2085:41	7	p ++
EXPR	2085:41	2085:41	8	p ++
FIELD	2085:41	2085:42	9	p ++
LEAF_NODE	2085:41	2085:41	10	p
LEAF_NODE	2085:42	2085:42	10	++
LEAF_NODE	2085:44	2085:44	7	)
STATEMENTS	2086:2	2097:2	7	
LEAF_NODE	2086:2	2086:2	8	{
STATEMENTS	2087:24	2096:3	8	
EXPR_STATEMENT	2087:24	2087:39	9	assert ( pa != 0 ) ;
EXPR	2087:24	2087:24	10	assert ( pa != 0 )
FUNCTION_CALL	2087:24	2087:38	11	assert ( pa != 0 )
CALLEE	2087:24	2087:24	12	assert
LEAF_NODE	2087:24	2087:24	13	assert
LEAF_NODE	2087:30	2087:30	12	(
ARGUMENT	2087:31	2087:37	12	pa != 0
FIELD	2087:31	2087:31	13	pa
LEAF_NODE	2087:31	2087:31	14	pa
EQ_OPERATOR	2087:34	2087:34	13	!=
LEAF_NODE	2087:34	2087:34	14	!=
FIELD	2087:37	2087:37	13	0
LEAF_NODE	2087:37	2087:37	14	0
LEAF_NODE	2087:38	2087:38	12	)
LEAF_NODE	2087:39	2087:39	10	;
SELECTION	2090:24	2091:24	9	
KEYWORD	2090:24	2090:24	10	if
LEAF_NODE	2090:24	2090:24	11	if
LEAF_NODE	2090:26	2090:26	10	(
CONDITION	2090:28	2090:28	10	* pa > 0xFFFFFFFFUL
EXPR	2090:28	2090:34	11	* pa > 0xFFFFFFFFUL
UNARY_EXPR	2090:28	2090:29	12	* pa
UNARY_OPERATOR	2090:28	2090:28	13	*
LEAF_NODE	2090:28	2090:28	14	*
FIELD	2090:29	2090:29	13	pa
LEAF_NODE	2090:29	2090:29	14	pa
REL_OPERATOR	2090:32	2090:32	12	>
LEAF_NODE	2090:32	2090:32	13	>
FIELD	2090:34	2090:34	12	0xFFFFFFFFUL
LEAF_NODE	2090:34	2090:34	13	0xFFFFFFFFUL
LEAF_NODE	2090:46	2090:46	10	)
STATEMENTS	2091:24	2095:24	10	
LEAF_NODE	2091:24	2091:24	11	{
STATEMENTS	2092:28	2094:28	11	
EXPR_STATEMENT	2092:28	2092:99	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Illegal value for SubIFD tag" ) ;
EXPR	2092:28	2092:28	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Illegal value for SubIFD tag" )
FUNCTION_CALL	2092:28	2092:98	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Illegal value for SubIFD tag" )
CALLEE	2092:28	2092:28	15	TIFFErrorExt
LEAF_NODE	2092:28	2092:28	16	TIFFErrorExt
LEAF_NODE	2092:40	2092:40	15	(
ARGUMENT	2092:41	2092:41	15	tif -> tif_clientdata
FIELD	2092:41	2092:46	16	tif -> tif_clientdata
LEAF_NODE	2092:41	2092:41	17	tif
LEAF_NODE	2092:44	2092:44	17	->
LEAF_NODE	2092:46	2092:46	17	tif_clientdata
LEAF_NODE	2092:60	2092:60	15	,
ARGUMENT	2092:61	2092:61	15	module
FIELD	2092:61	2092:61	16	module
LEAF_NODE	2092:61	2092:61	17	module
LEAF_NODE	2092:67	2092:67	15	,
ARGUMENT	2092:68	2092:68	15	"Illegal value for SubIFD tag"
FIELD	2092:68	2092:68	16	"Illegal value for SubIFD tag"
LEAF_NODE	2092:68	2092:68	17	"Illegal value for SubIFD tag"
LEAF_NODE	2092:98	2092:98	15	)
LEAF_NODE	2092:99	2092:99	13	;
EXPR_STATEMENT	2093:28	2093:40	12	_TIFFfree ( o ) ;
EXPR	2093:28	2093:28	13	_TIFFfree ( o )
FUNCTION_CALL	2093:28	2093:39	14	_TIFFfree ( o )
CALLEE	2093:28	2093:28	15	_TIFFfree
LEAF_NODE	2093:28	2093:28	16	_TIFFfree
LEAF_NODE	2093:37	2093:37	15	(
ARGUMENT	2093:38	2093:38	15	o
FIELD	2093:38	2093:38	16	o
LEAF_NODE	2093:38	2093:38	17	o
LEAF_NODE	2093:39	2093:39	15	)
LEAF_NODE	2093:40	2093:40	13	;
JUMP_STATEMENT	2094:28	2094:37	12	return ( 0 ) ;
KEYWORD	2094:28	2094:28	13	return
LEAF_NODE	2094:28	2094:28	14	return
DESTINATION	2094:34	2094:34	13	( 0 )
EXPR	2094:34	2094:36	14	( 0 )
LEAF_NODE	2094:34	2094:34	15	(
FIELD	2094:35	2094:35	15	0
LEAF_NODE	2094:35	2094:35	16	0
LEAF_NODE	2094:36	2094:36	15	)
LEAF_NODE	2094:37	2094:37	13	;
LEAF_NODE	2095:24	2095:24	11	}
EXPR_STATEMENT	2096:3	2096:24	9	* pb ++ = ( uint32 ) ( * pa ++ ) ;
EXPR	2096:3	2096:3	10	* pb ++ = ( uint32 ) ( * pa ++ )
ASSIGN	2096:3	2096:9	11	* pb ++ = ( uint32 ) ( * pa ++ )
LVAL	2096:3	2096:3	12	* pb ++
UNARY_EXPR	2096:3	2096:4	13	* pb ++
UNARY_OPERATOR	2096:3	2096:3	14	*
LEAF_NODE	2096:3	2096:3	15	*
FIELD	2096:4	2096:6	14	pb ++
LEAF_NODE	2096:4	2096:4	15	pb
LEAF_NODE	2096:6	2096:6	15	++
ASSIGN_OP	2096:8	2096:8	12	=
LEAF_NODE	2096:8	2096:8	13	=
RVAL	2096:9	2096:23	12	( uint32 ) ( * pa ++ )
LEAF_NODE	2096:9	2096:9	13	(
TYPE_NAME	2096:10	2096:10	13	uint32
LEAF_NODE	2096:10	2096:10	14	uint32
LEAF_NODE	2096:16	2096:16	13	)
LEAF_NODE	2096:17	2096:17	13	(
UNARY_EXPR	2096:18	2096:19	13	* pa ++
UNARY_OPERATOR	2096:18	2096:18	14	*
LEAF_NODE	2096:18	2096:18	15	*
FIELD	2096:19	2096:21	14	pa ++
LEAF_NODE	2096:19	2096:19	15	pa
LEAF_NODE	2096:21	2096:21	15	++
LEAF_NODE	2096:23	2096:23	13	)
LEAF_NODE	2096:24	2096:24	10	;
LEAF_NODE	2097:2	2097:2	8	}
EXPR_STATEMENT	2098:2	2098:95	6	n = TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , TIFFTAG_SUBIFD , tif -> tif_dir . td_nsubifd , o ) ;
EXPR	2098:2	2098:2	7	n = TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , TIFFTAG_SUBIFD , tif -> tif_dir . td_nsubifd , o )
ASSIGN	2098:2	2098:4	8	n = TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , TIFFTAG_SUBIFD , tif -> tif_dir . td_nsubifd , o )
LVAL	2098:2	2098:2	9	n
FIELD	2098:2	2098:2	10	n
LEAF_NODE	2098:2	2098:2	11	n
ASSIGN_OP	2098:3	2098:3	9	=
LEAF_NODE	2098:3	2098:3	10	=
RVAL	2098:4	2098:4	9	TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , TIFFTAG_SUBIFD , tif -> tif_dir . td_nsubifd , o )
FUNCTION_CALL	2098:4	2098:94	10	TIFFWriteDirectoryTagCheckedIfdArray ( tif , ndir , dir , TIFFTAG_SUBIFD , tif -> tif_dir . td_nsubifd , o )
CALLEE	2098:4	2098:4	11	TIFFWriteDirectoryTagCheckedIfdArray
LEAF_NODE	2098:4	2098:4	12	TIFFWriteDirectoryTagCheckedIfdArray
LEAF_NODE	2098:40	2098:40	11	(
ARGUMENT	2098:41	2098:41	11	tif
FIELD	2098:41	2098:41	12	tif
LEAF_NODE	2098:41	2098:41	13	tif
LEAF_NODE	2098:44	2098:44	11	,
ARGUMENT	2098:45	2098:45	11	ndir
FIELD	2098:45	2098:45	12	ndir
LEAF_NODE	2098:45	2098:45	13	ndir
LEAF_NODE	2098:49	2098:49	11	,
ARGUMENT	2098:50	2098:50	11	dir
FIELD	2098:50	2098:50	12	dir
LEAF_NODE	2098:50	2098:50	13	dir
LEAF_NODE	2098:53	2098:53	11	,
ARGUMENT	2098:54	2098:54	11	TIFFTAG_SUBIFD
FIELD	2098:54	2098:54	12	TIFFTAG_SUBIFD
LEAF_NODE	2098:54	2098:54	13	TIFFTAG_SUBIFD
LEAF_NODE	2098:68	2098:68	11	,
ARGUMENT	2098:69	2098:69	11	tif -> tif_dir . td_nsubifd
FIELD	2098:69	2098:82	12	tif -> tif_dir . td_nsubifd
LEAF_NODE	2098:69	2098:69	13	tif
LEAF_NODE	2098:72	2098:72	13	->
LEAF_NODE	2098:74	2098:74	13	tif_dir
LEAF_NODE	2098:81	2098:81	13	.
LEAF_NODE	2098:82	2098:82	13	td_nsubifd
LEAF_NODE	2098:92	2098:92	11	,
ARGUMENT	2098:93	2098:93	11	o
FIELD	2098:93	2098:93	12	o
LEAF_NODE	2098:93	2098:93	13	o
LEAF_NODE	2098:94	2098:94	11	)
LEAF_NODE	2098:95	2098:95	7	;
EXPR_STATEMENT	2099:2	2099:14	6	_TIFFfree ( o ) ;
EXPR	2099:2	2099:2	7	_TIFFfree ( o )
FUNCTION_CALL	2099:2	2099:13	8	_TIFFfree ( o )
CALLEE	2099:2	2099:2	9	_TIFFfree
LEAF_NODE	2099:2	2099:2	10	_TIFFfree
LEAF_NODE	2099:11	2099:11	9	(
ARGUMENT	2099:12	2099:12	9	o
FIELD	2099:12	2099:12	10	o
LEAF_NODE	2099:12	2099:12	11	o
LEAF_NODE	2099:13	2099:13	9	)
LEAF_NODE	2099:14	2099:14	7	;
LEAF_NODE	2100:1	2100:1	5	}
SELECTION	2101:1	2102:2	3	
KEYWORD	2101:1	2101:1	4	else
LEAF_NODE	2101:1	2101:1	5	else
STATEMENTS	2102:2	2102:2	4	
EXPR_STATEMENT	2102:2	2102:117	5	n = TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , TIFFTAG_SUBIFD , tif -> tif_dir . td_nsubifd , tif -> tif_dir . td_subifd ) ;
EXPR	2102:2	2102:2	6	n = TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , TIFFTAG_SUBIFD , tif -> tif_dir . td_nsubifd , tif -> tif_dir . td_subifd )
ASSIGN	2102:2	2102:4	7	n = TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , TIFFTAG_SUBIFD , tif -> tif_dir . td_nsubifd , tif -> tif_dir . td_subifd )
LVAL	2102:2	2102:2	8	n
FIELD	2102:2	2102:2	9	n
LEAF_NODE	2102:2	2102:2	10	n
ASSIGN_OP	2102:3	2102:3	8	=
LEAF_NODE	2102:3	2102:3	9	=
RVAL	2102:4	2102:4	8	TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , TIFFTAG_SUBIFD , tif -> tif_dir . td_nsubifd , tif -> tif_dir . td_subifd )
FUNCTION_CALL	2102:4	2102:116	9	TIFFWriteDirectoryTagCheckedIfd8Array ( tif , ndir , dir , TIFFTAG_SUBIFD , tif -> tif_dir . td_nsubifd , tif -> tif_dir . td_subifd )
CALLEE	2102:4	2102:4	10	TIFFWriteDirectoryTagCheckedIfd8Array
LEAF_NODE	2102:4	2102:4	11	TIFFWriteDirectoryTagCheckedIfd8Array
LEAF_NODE	2102:41	2102:41	10	(
ARGUMENT	2102:42	2102:42	10	tif
FIELD	2102:42	2102:42	11	tif
LEAF_NODE	2102:42	2102:42	12	tif
LEAF_NODE	2102:45	2102:45	10	,
ARGUMENT	2102:46	2102:46	10	ndir
FIELD	2102:46	2102:46	11	ndir
LEAF_NODE	2102:46	2102:46	12	ndir
LEAF_NODE	2102:50	2102:50	10	,
ARGUMENT	2102:51	2102:51	10	dir
FIELD	2102:51	2102:51	11	dir
LEAF_NODE	2102:51	2102:51	12	dir
LEAF_NODE	2102:54	2102:54	10	,
ARGUMENT	2102:55	2102:55	10	TIFFTAG_SUBIFD
FIELD	2102:55	2102:55	11	TIFFTAG_SUBIFD
LEAF_NODE	2102:55	2102:55	12	TIFFTAG_SUBIFD
LEAF_NODE	2102:69	2102:69	10	,
ARGUMENT	2102:70	2102:70	10	tif -> tif_dir . td_nsubifd
FIELD	2102:70	2102:83	11	tif -> tif_dir . td_nsubifd
LEAF_NODE	2102:70	2102:70	12	tif
LEAF_NODE	2102:73	2102:73	12	->
LEAF_NODE	2102:75	2102:75	12	tif_dir
LEAF_NODE	2102:82	2102:82	12	.
LEAF_NODE	2102:83	2102:83	12	td_nsubifd
LEAF_NODE	2102:93	2102:93	10	,
ARGUMENT	2102:94	2102:94	10	tif -> tif_dir . td_subifd
FIELD	2102:94	2102:107	11	tif -> tif_dir . td_subifd
LEAF_NODE	2102:94	2102:94	12	tif
LEAF_NODE	2102:97	2102:97	12	->
LEAF_NODE	2102:99	2102:99	12	tif_dir
LEAF_NODE	2102:106	2102:106	12	.
LEAF_NODE	2102:107	2102:107	12	td_subifd
LEAF_NODE	2102:116	2102:116	10	)
LEAF_NODE	2102:117	2102:117	6	;
SELECTION	2103:1	2104:2	3	
KEYWORD	2103:1	2103:1	4	if
LEAF_NODE	2103:1	2103:1	5	if
LEAF_NODE	2103:4	2103:4	4	(
CONDITION	2103:5	2103:5	4	! n
EXPR	2103:5	2103:5	5	! n
UNARY_EXPR	2103:5	2103:6	6	! n
UNARY_OPERATOR	2103:5	2103:5	7	!
LEAF_NODE	2103:5	2103:5	8	!
FIELD	2103:6	2103:6	7	n
LEAF_NODE	2103:6	2103:6	8	n
LEAF_NODE	2103:7	2103:7	4	)
STATEMENTS	2104:2	2104:2	4	
JUMP_STATEMENT	2104:2	2104:11	5	return ( 0 ) ;
KEYWORD	2104:2	2104:2	6	return
LEAF_NODE	2104:2	2104:2	7	return
DESTINATION	2104:8	2104:8	6	( 0 )
EXPR	2104:8	2104:10	7	( 0 )
LEAF_NODE	2104:8	2104:8	8	(
FIELD	2104:9	2104:9	8	0
LEAF_NODE	2104:9	2104:9	9	0
LEAF_NODE	2104:10	2104:10	8	)
LEAF_NODE	2104:11	2104:11	6	;
EXPR_STATEMENT	2113:1	2113:30	3	tif -> tif_flags |= TIFF_INSUBIFD ;
EXPR	2113:1	2113:1	4	tif -> tif_flags |= TIFF_INSUBIFD
ASSIGN	2113:1	2113:17	5	tif -> tif_flags |= TIFF_INSUBIFD
LVAL	2113:1	2113:1	6	tif -> tif_flags
FIELD	2113:1	2113:6	7	tif -> tif_flags
LEAF_NODE	2113:1	2113:1	8	tif
LEAF_NODE	2113:4	2113:4	8	->
LEAF_NODE	2113:6	2113:6	8	tif_flags
ASSIGN_OP	2113:15	2113:15	6	|=
LEAF_NODE	2113:15	2113:15	7	|=
RVAL	2113:17	2113:17	6	TIFF_INSUBIFD
FIELD	2113:17	2113:17	7	TIFF_INSUBIFD
LEAF_NODE	2113:17	2113:17	8	TIFF_INSUBIFD
LEAF_NODE	2113:30	2113:30	4	;
EXPR_STATEMENT	2114:1	2114:41	3	tif -> tif_nsubifd = tif -> tif_dir . td_nsubifd ;
EXPR	2114:1	2114:1	4	tif -> tif_nsubifd = tif -> tif_dir . td_nsubifd
ASSIGN	2114:1	2114:18	5	tif -> tif_nsubifd = tif -> tif_dir . td_nsubifd
LVAL	2114:1	2114:1	6	tif -> tif_nsubifd
FIELD	2114:1	2114:6	7	tif -> tif_nsubifd
LEAF_NODE	2114:1	2114:1	8	tif
LEAF_NODE	2114:4	2114:4	8	->
LEAF_NODE	2114:6	2114:6	8	tif_nsubifd
ASSIGN_OP	2114:17	2114:17	6	=
LEAF_NODE	2114:17	2114:17	7	=
RVAL	2114:18	2114:18	6	tif -> tif_dir . td_nsubifd
FIELD	2114:18	2114:31	7	tif -> tif_dir . td_nsubifd
LEAF_NODE	2114:18	2114:18	8	tif
LEAF_NODE	2114:21	2114:21	8	->
LEAF_NODE	2114:23	2114:23	8	tif_dir
LEAF_NODE	2114:30	2114:30	8	.
LEAF_NODE	2114:31	2114:31	8	td_nsubifd
LEAF_NODE	2114:41	2114:41	4	;
SELECTION	2115:1	2116:2	3	
KEYWORD	2115:1	2115:1	4	if
LEAF_NODE	2115:1	2115:1	5	if
LEAF_NODE	2115:4	2115:4	4	(
CONDITION	2115:5	2115:5	4	tif -> tif_dir . td_nsubifd == 1
EXPR	2115:5	2115:30	5	tif -> tif_dir . td_nsubifd == 1
FIELD	2115:5	2115:18	6	tif -> tif_dir . td_nsubifd
LEAF_NODE	2115:5	2115:5	7	tif
LEAF_NODE	2115:8	2115:8	7	->
LEAF_NODE	2115:10	2115:10	7	tif_dir
LEAF_NODE	2115:17	2115:17	7	.
LEAF_NODE	2115:18	2115:18	7	td_nsubifd
EQ_OPERATOR	2115:28	2115:28	6	==
LEAF_NODE	2115:28	2115:28	7	==
FIELD	2115:30	2115:30	6	1
LEAF_NODE	2115:30	2115:30	7	1
LEAF_NODE	2115:31	2115:31	4	)
STATEMENTS	2116:2	2116:2	4	
EXPR_STATEMENT	2116:2	2116:22	5	tif -> tif_subifdoff = 0 ;
EXPR	2116:2	2116:2	6	tif -> tif_subifdoff = 0
ASSIGN	2116:2	2116:21	7	tif -> tif_subifdoff = 0
LVAL	2116:2	2116:2	8	tif -> tif_subifdoff
FIELD	2116:2	2116:7	9	tif -> tif_subifdoff
LEAF_NODE	2116:2	2116:2	10	tif
LEAF_NODE	2116:5	2116:5	10	->
LEAF_NODE	2116:7	2116:7	10	tif_subifdoff
ASSIGN_OP	2116:20	2116:20	8	=
LEAF_NODE	2116:20	2116:20	9	=
RVAL	2116:21	2116:21	8	0
FIELD	2116:21	2116:21	9	0
LEAF_NODE	2116:21	2116:21	10	0
LEAF_NODE	2116:22	2116:22	6	;
SELECTION	2117:1	2118:2	3	
KEYWORD	2117:1	2117:1	4	else
LEAF_NODE	2117:1	2117:1	5	else
STATEMENTS	2118:2	2118:2	4	
EXPR_STATEMENT	2118:2	2118:22	5	tif -> tif_subifdoff = m ;
EXPR	2118:2	2118:2	6	tif -> tif_subifdoff = m
ASSIGN	2118:2	2118:21	7	tif -> tif_subifdoff = m
LVAL	2118:2	2118:2	8	tif -> tif_subifdoff
FIELD	2118:2	2118:7	9	tif -> tif_subifdoff
LEAF_NODE	2118:2	2118:2	10	tif
LEAF_NODE	2118:5	2118:5	10	->
LEAF_NODE	2118:7	2118:7	10	tif_subifdoff
ASSIGN_OP	2118:20	2118:20	8	=
LEAF_NODE	2118:20	2118:20	9	=
RVAL	2118:21	2118:21	8	m
FIELD	2118:21	2118:21	9	m
LEAF_NODE	2118:21	2118:21	10	m
LEAF_NODE	2118:22	2118:22	6	;
JUMP_STATEMENT	2119:1	2119:10	3	return ( 1 ) ;
KEYWORD	2119:1	2119:1	4	return
LEAF_NODE	2119:1	2119:1	5	return
DESTINATION	2119:7	2119:7	4	( 1 )
EXPR	2119:7	2119:9	5	( 1 )
LEAF_NODE	2119:7	2119:7	6	(
FIELD	2119:8	2119:8	6	1
LEAF_NODE	2119:8	2119:8	7	1
LEAF_NODE	2119:9	2119:9	6	)
LEAF_NODE	2119:10	2119:10	4	;
LEAF_NODE	2120:0	2120:0	2	}
FUNCTION_DEF	2122:0	2127:0	1	
RETURN_TYPE	2122:0	2122:7	2	static int
LEAF_NODE	2122:0	2122:0	3	static
TYPE_NAME	2122:7	2122:7	3	int
LEAF_NODE	2122:7	2122:7	4	int
FUNCTION_NAME	2123:0	2123:0	2	TIFFWriteDirectoryTagCheckedAscii
LEAF_NODE	2123:0	2123:0	3	TIFFWriteDirectoryTagCheckedAscii
PARAMETER_LIST	2123:33	2123:115	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , char * value )
LEAF_NODE	2123:33	2123:33	3	(
PARAMETER_DECL	2123:34	2123:40	3	TIFF * tif
TYPE	2123:34	2123:38	4	TIFF *
TYPE_NAME	2123:34	2123:34	5	TIFF
LEAF_NODE	2123:34	2123:34	6	TIFF
POINTER	2123:38	2123:38	5	*
LEAF_NODE	2123:38	2123:38	6	*
NAME	2123:40	2123:40	4	tif
LEAF_NODE	2123:40	2123:40	5	tif
LEAF_NODE	2123:43	2123:43	3	,
PARAMETER_DECL	2123:45	2123:53	3	uint32 * ndir
TYPE	2123:45	2123:51	4	uint32 *
TYPE_NAME	2123:45	2123:45	5	uint32
LEAF_NODE	2123:45	2123:45	6	uint32
POINTER	2123:51	2123:51	5	*
LEAF_NODE	2123:51	2123:51	6	*
NAME	2123:53	2123:53	4	ndir
LEAF_NODE	2123:53	2123:53	5	ndir
LEAF_NODE	2123:57	2123:57	3	,
PARAMETER_DECL	2123:59	2123:73	3	TIFFDirEntry * dir
TYPE	2123:59	2123:71	4	TIFFDirEntry *
TYPE_NAME	2123:59	2123:59	5	TIFFDirEntry
LEAF_NODE	2123:59	2123:59	6	TIFFDirEntry
POINTER	2123:71	2123:71	5	*
LEAF_NODE	2123:71	2123:71	6	*
NAME	2123:73	2123:73	4	dir
LEAF_NODE	2123:73	2123:73	5	dir
LEAF_NODE	2123:76	2123:76	3	,
PARAMETER_DECL	2123:78	2123:85	3	uint16 tag
TYPE	2123:78	2123:78	4	uint16
TYPE_NAME	2123:78	2123:78	5	uint16
LEAF_NODE	2123:78	2123:78	6	uint16
NAME	2123:85	2123:85	4	tag
LEAF_NODE	2123:85	2123:85	5	tag
LEAF_NODE	2123:88	2123:88	3	,
PARAMETER_DECL	2123:90	2123:97	3	uint32 count
TYPE	2123:90	2123:90	4	uint32
TYPE_NAME	2123:90	2123:90	5	uint32
LEAF_NODE	2123:90	2123:90	6	uint32
NAME	2123:97	2123:97	4	count
LEAF_NODE	2123:97	2123:97	5	count
LEAF_NODE	2123:102	2123:102	3	,
PARAMETER_DECL	2123:104	2123:110	3	char * value
TYPE	2123:104	2123:108	4	char *
TYPE_NAME	2123:104	2123:104	5	char
LEAF_NODE	2123:104	2123:104	6	char
POINTER	2123:108	2123:108	5	*
LEAF_NODE	2123:108	2123:108	6	*
NAME	2123:110	2123:110	4	value
LEAF_NODE	2123:110	2123:110	5	value
LEAF_NODE	2123:115	2123:115	3	)
LEAF_NODE	2124:0	2124:0	2	{
STATEMENTS	2125:1	2126:1	2	
EXPR_STATEMENT	2125:1	2125:24	3	assert ( sizeof ( char ) == 1 ) ;
EXPR	2125:1	2125:1	4	assert ( sizeof ( char ) == 1 )
FUNCTION_CALL	2125:1	2125:23	5	assert ( sizeof ( char ) == 1 )
CALLEE	2125:1	2125:1	6	assert
LEAF_NODE	2125:1	2125:1	7	assert
LEAF_NODE	2125:7	2125:7	6	(
ARGUMENT	2125:8	2125:22	6	sizeof ( char ) == 1
FUNCTION_CALL	2125:8	2125:19	7	sizeof ( char )
CALLEE	2125:8	2125:8	8	sizeof
LEAF_NODE	2125:8	2125:8	9	sizeof
LEAF_NODE	2125:14	2125:14	8	(
ARGUMENT	2125:15	2125:15	8	char
FIELD	2125:15	2125:15	9	char
LEAF_NODE	2125:15	2125:15	10	char
LEAF_NODE	2125:19	2125:19	8	)
EQ_OPERATOR	2125:20	2125:20	7	==
LEAF_NODE	2125:20	2125:20	8	==
FIELD	2125:22	2125:22	7	1
LEAF_NODE	2125:22	2125:22	8	1
LEAF_NODE	2125:23	2125:23	6	)
LEAF_NODE	2125:24	2125:24	4	;
JUMP_STATEMENT	2126:1	2126:81	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_ASCII , count , count , value ) ) ;
KEYWORD	2126:1	2126:1	4	return
LEAF_NODE	2126:1	2126:1	5	return
DESTINATION	2126:7	2126:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_ASCII , count , count , value ) )
EXPR	2126:7	2126:80	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_ASCII , count , count , value ) )
LEAF_NODE	2126:7	2126:7	6	(
FUNCTION_CALL	2126:8	2126:79	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_ASCII , count , count , value )
CALLEE	2126:8	2126:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2126:8	2126:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2126:33	2126:33	7	(
ARGUMENT	2126:34	2126:34	7	tif
FIELD	2126:34	2126:34	8	tif
LEAF_NODE	2126:34	2126:34	9	tif
LEAF_NODE	2126:37	2126:37	7	,
ARGUMENT	2126:38	2126:38	7	ndir
FIELD	2126:38	2126:38	8	ndir
LEAF_NODE	2126:38	2126:38	9	ndir
LEAF_NODE	2126:42	2126:42	7	,
ARGUMENT	2126:43	2126:43	7	dir
FIELD	2126:43	2126:43	8	dir
LEAF_NODE	2126:43	2126:43	9	dir
LEAF_NODE	2126:46	2126:46	7	,
ARGUMENT	2126:47	2126:47	7	tag
FIELD	2126:47	2126:47	8	tag
LEAF_NODE	2126:47	2126:47	9	tag
LEAF_NODE	2126:50	2126:50	7	,
ARGUMENT	2126:51	2126:51	7	TIFF_ASCII
FIELD	2126:51	2126:51	8	TIFF_ASCII
LEAF_NODE	2126:51	2126:51	9	TIFF_ASCII
LEAF_NODE	2126:61	2126:61	7	,
ARGUMENT	2126:62	2126:62	7	count
FIELD	2126:62	2126:62	8	count
LEAF_NODE	2126:62	2126:62	9	count
LEAF_NODE	2126:67	2126:67	7	,
ARGUMENT	2126:68	2126:68	7	count
FIELD	2126:68	2126:68	8	count
LEAF_NODE	2126:68	2126:68	9	count
LEAF_NODE	2126:73	2126:73	7	,
ARGUMENT	2126:74	2126:74	7	value
FIELD	2126:74	2126:74	8	value
LEAF_NODE	2126:74	2126:74	9	value
LEAF_NODE	2126:79	2126:79	7	)
LEAF_NODE	2126:80	2126:80	6	)
LEAF_NODE	2126:81	2126:81	4	;
LEAF_NODE	2127:0	2127:0	2	}
FUNCTION_DEF	2129:0	2134:0	1	
RETURN_TYPE	2129:0	2129:7	2	static int
LEAF_NODE	2129:0	2129:0	3	static
TYPE_NAME	2129:7	2129:7	3	int
LEAF_NODE	2129:7	2129:7	4	int
FUNCTION_NAME	2130:0	2130:0	2	TIFFWriteDirectoryTagCheckedUndefinedArray
LEAF_NODE	2130:0	2130:0	3	TIFFWriteDirectoryTagCheckedUndefinedArray
PARAMETER_LIST	2130:42	2130:125	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint8 * value )
LEAF_NODE	2130:42	2130:42	3	(
PARAMETER_DECL	2130:43	2130:49	3	TIFF * tif
TYPE	2130:43	2130:47	4	TIFF *
TYPE_NAME	2130:43	2130:43	5	TIFF
LEAF_NODE	2130:43	2130:43	6	TIFF
POINTER	2130:47	2130:47	5	*
LEAF_NODE	2130:47	2130:47	6	*
NAME	2130:49	2130:49	4	tif
LEAF_NODE	2130:49	2130:49	5	tif
LEAF_NODE	2130:52	2130:52	3	,
PARAMETER_DECL	2130:54	2130:62	3	uint32 * ndir
TYPE	2130:54	2130:60	4	uint32 *
TYPE_NAME	2130:54	2130:54	5	uint32
LEAF_NODE	2130:54	2130:54	6	uint32
POINTER	2130:60	2130:60	5	*
LEAF_NODE	2130:60	2130:60	6	*
NAME	2130:62	2130:62	4	ndir
LEAF_NODE	2130:62	2130:62	5	ndir
LEAF_NODE	2130:66	2130:66	3	,
PARAMETER_DECL	2130:68	2130:82	3	TIFFDirEntry * dir
TYPE	2130:68	2130:80	4	TIFFDirEntry *
TYPE_NAME	2130:68	2130:68	5	TIFFDirEntry
LEAF_NODE	2130:68	2130:68	6	TIFFDirEntry
POINTER	2130:80	2130:80	5	*
LEAF_NODE	2130:80	2130:80	6	*
NAME	2130:82	2130:82	4	dir
LEAF_NODE	2130:82	2130:82	5	dir
LEAF_NODE	2130:85	2130:85	3	,
PARAMETER_DECL	2130:87	2130:94	3	uint16 tag
TYPE	2130:87	2130:87	4	uint16
TYPE_NAME	2130:87	2130:87	5	uint16
LEAF_NODE	2130:87	2130:87	6	uint16
NAME	2130:94	2130:94	4	tag
LEAF_NODE	2130:94	2130:94	5	tag
LEAF_NODE	2130:97	2130:97	3	,
PARAMETER_DECL	2130:99	2130:106	3	uint32 count
TYPE	2130:99	2130:99	4	uint32
TYPE_NAME	2130:99	2130:99	5	uint32
LEAF_NODE	2130:99	2130:99	6	uint32
NAME	2130:106	2130:106	4	count
LEAF_NODE	2130:106	2130:106	5	count
LEAF_NODE	2130:111	2130:111	3	,
PARAMETER_DECL	2130:113	2130:120	3	uint8 * value
TYPE	2130:113	2130:118	4	uint8 *
TYPE_NAME	2130:113	2130:113	5	uint8
LEAF_NODE	2130:113	2130:113	6	uint8
POINTER	2130:118	2130:118	5	*
LEAF_NODE	2130:118	2130:118	6	*
NAME	2130:120	2130:120	4	value
LEAF_NODE	2130:120	2130:120	5	value
LEAF_NODE	2130:125	2130:125	3	)
LEAF_NODE	2131:0	2131:0	2	{
STATEMENTS	2132:1	2133:1	2	
EXPR_STATEMENT	2132:1	2132:25	3	assert ( sizeof ( uint8 ) == 1 ) ;
EXPR	2132:1	2132:1	4	assert ( sizeof ( uint8 ) == 1 )
FUNCTION_CALL	2132:1	2132:24	5	assert ( sizeof ( uint8 ) == 1 )
CALLEE	2132:1	2132:1	6	assert
LEAF_NODE	2132:1	2132:1	7	assert
LEAF_NODE	2132:7	2132:7	6	(
ARGUMENT	2132:8	2132:23	6	sizeof ( uint8 ) == 1
FUNCTION_CALL	2132:8	2132:20	7	sizeof ( uint8 )
CALLEE	2132:8	2132:8	8	sizeof
LEAF_NODE	2132:8	2132:8	9	sizeof
LEAF_NODE	2132:14	2132:14	8	(
ARGUMENT	2132:15	2132:15	8	uint8
FIELD	2132:15	2132:15	9	uint8
LEAF_NODE	2132:15	2132:15	10	uint8
LEAF_NODE	2132:20	2132:20	8	)
EQ_OPERATOR	2132:21	2132:21	7	==
LEAF_NODE	2132:21	2132:21	8	==
FIELD	2132:23	2132:23	7	1
LEAF_NODE	2132:23	2132:23	8	1
LEAF_NODE	2132:24	2132:24	6	)
LEAF_NODE	2132:25	2132:25	4	;
JUMP_STATEMENT	2133:1	2133:85	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_UNDEFINED , count , count , value ) ) ;
KEYWORD	2133:1	2133:1	4	return
LEAF_NODE	2133:1	2133:1	5	return
DESTINATION	2133:7	2133:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_UNDEFINED , count , count , value ) )
EXPR	2133:7	2133:84	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_UNDEFINED , count , count , value ) )
LEAF_NODE	2133:7	2133:7	6	(
FUNCTION_CALL	2133:8	2133:83	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_UNDEFINED , count , count , value )
CALLEE	2133:8	2133:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2133:8	2133:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2133:33	2133:33	7	(
ARGUMENT	2133:34	2133:34	7	tif
FIELD	2133:34	2133:34	8	tif
LEAF_NODE	2133:34	2133:34	9	tif
LEAF_NODE	2133:37	2133:37	7	,
ARGUMENT	2133:38	2133:38	7	ndir
FIELD	2133:38	2133:38	8	ndir
LEAF_NODE	2133:38	2133:38	9	ndir
LEAF_NODE	2133:42	2133:42	7	,
ARGUMENT	2133:43	2133:43	7	dir
FIELD	2133:43	2133:43	8	dir
LEAF_NODE	2133:43	2133:43	9	dir
LEAF_NODE	2133:46	2133:46	7	,
ARGUMENT	2133:47	2133:47	7	tag
FIELD	2133:47	2133:47	8	tag
LEAF_NODE	2133:47	2133:47	9	tag
LEAF_NODE	2133:50	2133:50	7	,
ARGUMENT	2133:51	2133:51	7	TIFF_UNDEFINED
FIELD	2133:51	2133:51	8	TIFF_UNDEFINED
LEAF_NODE	2133:51	2133:51	9	TIFF_UNDEFINED
LEAF_NODE	2133:65	2133:65	7	,
ARGUMENT	2133:66	2133:66	7	count
FIELD	2133:66	2133:66	8	count
LEAF_NODE	2133:66	2133:66	9	count
LEAF_NODE	2133:71	2133:71	7	,
ARGUMENT	2133:72	2133:72	7	count
FIELD	2133:72	2133:72	8	count
LEAF_NODE	2133:72	2133:72	9	count
LEAF_NODE	2133:77	2133:77	7	,
ARGUMENT	2133:78	2133:78	7	value
FIELD	2133:78	2133:78	8	value
LEAF_NODE	2133:78	2133:78	9	value
LEAF_NODE	2133:83	2133:83	7	)
LEAF_NODE	2133:84	2133:84	6	)
LEAF_NODE	2133:85	2133:85	4	;
LEAF_NODE	2134:0	2134:0	2	}
FUNCTION_DEF	2137:0	2142:0	1	
RETURN_TYPE	2137:0	2137:7	2	static int
LEAF_NODE	2137:0	2137:0	3	static
TYPE_NAME	2137:7	2137:7	3	int
LEAF_NODE	2137:7	2137:7	4	int
FUNCTION_NAME	2138:0	2138:0	2	TIFFWriteDirectoryTagCheckedByte
LEAF_NODE	2138:0	2138:0	3	TIFFWriteDirectoryTagCheckedByte
PARAMETER_LIST	2138:32	2138:100	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint8 value )
LEAF_NODE	2138:32	2138:32	3	(
PARAMETER_DECL	2138:33	2138:39	3	TIFF * tif
TYPE	2138:33	2138:37	4	TIFF *
TYPE_NAME	2138:33	2138:33	5	TIFF
LEAF_NODE	2138:33	2138:33	6	TIFF
POINTER	2138:37	2138:37	5	*
LEAF_NODE	2138:37	2138:37	6	*
NAME	2138:39	2138:39	4	tif
LEAF_NODE	2138:39	2138:39	5	tif
LEAF_NODE	2138:42	2138:42	3	,
PARAMETER_DECL	2138:44	2138:52	3	uint32 * ndir
TYPE	2138:44	2138:50	4	uint32 *
TYPE_NAME	2138:44	2138:44	5	uint32
LEAF_NODE	2138:44	2138:44	6	uint32
POINTER	2138:50	2138:50	5	*
LEAF_NODE	2138:50	2138:50	6	*
NAME	2138:52	2138:52	4	ndir
LEAF_NODE	2138:52	2138:52	5	ndir
LEAF_NODE	2138:56	2138:56	3	,
PARAMETER_DECL	2138:58	2138:72	3	TIFFDirEntry * dir
TYPE	2138:58	2138:70	4	TIFFDirEntry *
TYPE_NAME	2138:58	2138:58	5	TIFFDirEntry
LEAF_NODE	2138:58	2138:58	6	TIFFDirEntry
POINTER	2138:70	2138:70	5	*
LEAF_NODE	2138:70	2138:70	6	*
NAME	2138:72	2138:72	4	dir
LEAF_NODE	2138:72	2138:72	5	dir
LEAF_NODE	2138:75	2138:75	3	,
PARAMETER_DECL	2138:77	2138:84	3	uint16 tag
TYPE	2138:77	2138:77	4	uint16
TYPE_NAME	2138:77	2138:77	5	uint16
LEAF_NODE	2138:77	2138:77	6	uint16
NAME	2138:84	2138:84	4	tag
LEAF_NODE	2138:84	2138:84	5	tag
LEAF_NODE	2138:87	2138:87	3	,
PARAMETER_DECL	2138:89	2138:95	3	uint8 value
TYPE	2138:89	2138:89	4	uint8
TYPE_NAME	2138:89	2138:89	5	uint8
LEAF_NODE	2138:89	2138:89	6	uint8
NAME	2138:95	2138:95	4	value
LEAF_NODE	2138:95	2138:95	5	value
LEAF_NODE	2138:100	2138:100	3	)
LEAF_NODE	2139:0	2139:0	2	{
STATEMENTS	2140:1	2141:1	2	
EXPR_STATEMENT	2140:1	2140:25	3	assert ( sizeof ( uint8 ) == 1 ) ;
EXPR	2140:1	2140:1	4	assert ( sizeof ( uint8 ) == 1 )
FUNCTION_CALL	2140:1	2140:24	5	assert ( sizeof ( uint8 ) == 1 )
CALLEE	2140:1	2140:1	6	assert
LEAF_NODE	2140:1	2140:1	7	assert
LEAF_NODE	2140:7	2140:7	6	(
ARGUMENT	2140:8	2140:23	6	sizeof ( uint8 ) == 1
FUNCTION_CALL	2140:8	2140:20	7	sizeof ( uint8 )
CALLEE	2140:8	2140:8	8	sizeof
LEAF_NODE	2140:8	2140:8	9	sizeof
LEAF_NODE	2140:14	2140:14	8	(
ARGUMENT	2140:15	2140:15	8	uint8
FIELD	2140:15	2140:15	9	uint8
LEAF_NODE	2140:15	2140:15	10	uint8
LEAF_NODE	2140:20	2140:20	8	)
EQ_OPERATOR	2140:21	2140:21	7	==
LEAF_NODE	2140:21	2140:21	8	==
FIELD	2140:23	2140:23	7	1
LEAF_NODE	2140:23	2140:23	8	1
LEAF_NODE	2140:24	2140:24	6	)
LEAF_NODE	2140:25	2140:25	4	;
JUMP_STATEMENT	2141:1	2141:73	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_BYTE , 1 , 1 , & value ) ) ;
KEYWORD	2141:1	2141:1	4	return
LEAF_NODE	2141:1	2141:1	5	return
DESTINATION	2141:7	2141:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_BYTE , 1 , 1 , & value ) )
EXPR	2141:7	2141:72	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_BYTE , 1 , 1 , & value ) )
LEAF_NODE	2141:7	2141:7	6	(
FUNCTION_CALL	2141:8	2141:71	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_BYTE , 1 , 1 , & value )
CALLEE	2141:8	2141:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2141:8	2141:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2141:33	2141:33	7	(
ARGUMENT	2141:34	2141:34	7	tif
FIELD	2141:34	2141:34	8	tif
LEAF_NODE	2141:34	2141:34	9	tif
LEAF_NODE	2141:37	2141:37	7	,
ARGUMENT	2141:38	2141:38	7	ndir
FIELD	2141:38	2141:38	8	ndir
LEAF_NODE	2141:38	2141:38	9	ndir
LEAF_NODE	2141:42	2141:42	7	,
ARGUMENT	2141:43	2141:43	7	dir
FIELD	2141:43	2141:43	8	dir
LEAF_NODE	2141:43	2141:43	9	dir
LEAF_NODE	2141:46	2141:46	7	,
ARGUMENT	2141:47	2141:47	7	tag
FIELD	2141:47	2141:47	8	tag
LEAF_NODE	2141:47	2141:47	9	tag
LEAF_NODE	2141:50	2141:50	7	,
ARGUMENT	2141:51	2141:51	7	TIFF_BYTE
FIELD	2141:51	2141:51	8	TIFF_BYTE
LEAF_NODE	2141:51	2141:51	9	TIFF_BYTE
LEAF_NODE	2141:60	2141:60	7	,
ARGUMENT	2141:61	2141:61	7	1
FIELD	2141:61	2141:61	8	1
LEAF_NODE	2141:61	2141:61	9	1
LEAF_NODE	2141:62	2141:62	7	,
ARGUMENT	2141:63	2141:63	7	1
FIELD	2141:63	2141:63	8	1
LEAF_NODE	2141:63	2141:63	9	1
LEAF_NODE	2141:64	2141:64	7	,
ARGUMENT	2141:65	2141:65	7	& value
UNARY_EXPR	2141:65	2141:66	8	& value
UNARY_OPERATOR	2141:65	2141:65	9	&
LEAF_NODE	2141:65	2141:65	10	&
FIELD	2141:66	2141:66	9	value
LEAF_NODE	2141:66	2141:66	10	value
LEAF_NODE	2141:71	2141:71	7	)
LEAF_NODE	2141:72	2141:72	6	)
LEAF_NODE	2141:73	2141:73	4	;
LEAF_NODE	2142:0	2142:0	2	}
FUNCTION_DEF	2145:0	2150:0	1	
RETURN_TYPE	2145:0	2145:7	2	static int
LEAF_NODE	2145:0	2145:0	3	static
TYPE_NAME	2145:7	2145:7	3	int
LEAF_NODE	2145:7	2145:7	4	int
FUNCTION_NAME	2146:0	2146:0	2	TIFFWriteDirectoryTagCheckedByteArray
LEAF_NODE	2146:0	2146:0	3	TIFFWriteDirectoryTagCheckedByteArray
PARAMETER_LIST	2146:37	2146:120	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint8 * value )
LEAF_NODE	2146:37	2146:37	3	(
PARAMETER_DECL	2146:38	2146:44	3	TIFF * tif
TYPE	2146:38	2146:42	4	TIFF *
TYPE_NAME	2146:38	2146:38	5	TIFF
LEAF_NODE	2146:38	2146:38	6	TIFF
POINTER	2146:42	2146:42	5	*
LEAF_NODE	2146:42	2146:42	6	*
NAME	2146:44	2146:44	4	tif
LEAF_NODE	2146:44	2146:44	5	tif
LEAF_NODE	2146:47	2146:47	3	,
PARAMETER_DECL	2146:49	2146:57	3	uint32 * ndir
TYPE	2146:49	2146:55	4	uint32 *
TYPE_NAME	2146:49	2146:49	5	uint32
LEAF_NODE	2146:49	2146:49	6	uint32
POINTER	2146:55	2146:55	5	*
LEAF_NODE	2146:55	2146:55	6	*
NAME	2146:57	2146:57	4	ndir
LEAF_NODE	2146:57	2146:57	5	ndir
LEAF_NODE	2146:61	2146:61	3	,
PARAMETER_DECL	2146:63	2146:77	3	TIFFDirEntry * dir
TYPE	2146:63	2146:75	4	TIFFDirEntry *
TYPE_NAME	2146:63	2146:63	5	TIFFDirEntry
LEAF_NODE	2146:63	2146:63	6	TIFFDirEntry
POINTER	2146:75	2146:75	5	*
LEAF_NODE	2146:75	2146:75	6	*
NAME	2146:77	2146:77	4	dir
LEAF_NODE	2146:77	2146:77	5	dir
LEAF_NODE	2146:80	2146:80	3	,
PARAMETER_DECL	2146:82	2146:89	3	uint16 tag
TYPE	2146:82	2146:82	4	uint16
TYPE_NAME	2146:82	2146:82	5	uint16
LEAF_NODE	2146:82	2146:82	6	uint16
NAME	2146:89	2146:89	4	tag
LEAF_NODE	2146:89	2146:89	5	tag
LEAF_NODE	2146:92	2146:92	3	,
PARAMETER_DECL	2146:94	2146:101	3	uint32 count
TYPE	2146:94	2146:94	4	uint32
TYPE_NAME	2146:94	2146:94	5	uint32
LEAF_NODE	2146:94	2146:94	6	uint32
NAME	2146:101	2146:101	4	count
LEAF_NODE	2146:101	2146:101	5	count
LEAF_NODE	2146:106	2146:106	3	,
PARAMETER_DECL	2146:108	2146:115	3	uint8 * value
TYPE	2146:108	2146:113	4	uint8 *
TYPE_NAME	2146:108	2146:108	5	uint8
LEAF_NODE	2146:108	2146:108	6	uint8
POINTER	2146:113	2146:113	5	*
LEAF_NODE	2146:113	2146:113	6	*
NAME	2146:115	2146:115	4	value
LEAF_NODE	2146:115	2146:115	5	value
LEAF_NODE	2146:120	2146:120	3	)
LEAF_NODE	2147:0	2147:0	2	{
STATEMENTS	2148:1	2149:1	2	
EXPR_STATEMENT	2148:1	2148:25	3	assert ( sizeof ( uint8 ) == 1 ) ;
EXPR	2148:1	2148:1	4	assert ( sizeof ( uint8 ) == 1 )
FUNCTION_CALL	2148:1	2148:24	5	assert ( sizeof ( uint8 ) == 1 )
CALLEE	2148:1	2148:1	6	assert
LEAF_NODE	2148:1	2148:1	7	assert
LEAF_NODE	2148:7	2148:7	6	(
ARGUMENT	2148:8	2148:23	6	sizeof ( uint8 ) == 1
FUNCTION_CALL	2148:8	2148:20	7	sizeof ( uint8 )
CALLEE	2148:8	2148:8	8	sizeof
LEAF_NODE	2148:8	2148:8	9	sizeof
LEAF_NODE	2148:14	2148:14	8	(
ARGUMENT	2148:15	2148:15	8	uint8
FIELD	2148:15	2148:15	9	uint8
LEAF_NODE	2148:15	2148:15	10	uint8
LEAF_NODE	2148:20	2148:20	8	)
EQ_OPERATOR	2148:21	2148:21	7	==
LEAF_NODE	2148:21	2148:21	8	==
FIELD	2148:23	2148:23	7	1
LEAF_NODE	2148:23	2148:23	8	1
LEAF_NODE	2148:24	2148:24	6	)
LEAF_NODE	2148:25	2148:25	4	;
JUMP_STATEMENT	2149:1	2149:80	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_BYTE , count , count , value ) ) ;
KEYWORD	2149:1	2149:1	4	return
LEAF_NODE	2149:1	2149:1	5	return
DESTINATION	2149:7	2149:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_BYTE , count , count , value ) )
EXPR	2149:7	2149:79	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_BYTE , count , count , value ) )
LEAF_NODE	2149:7	2149:7	6	(
FUNCTION_CALL	2149:8	2149:78	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_BYTE , count , count , value )
CALLEE	2149:8	2149:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2149:8	2149:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2149:33	2149:33	7	(
ARGUMENT	2149:34	2149:34	7	tif
FIELD	2149:34	2149:34	8	tif
LEAF_NODE	2149:34	2149:34	9	tif
LEAF_NODE	2149:37	2149:37	7	,
ARGUMENT	2149:38	2149:38	7	ndir
FIELD	2149:38	2149:38	8	ndir
LEAF_NODE	2149:38	2149:38	9	ndir
LEAF_NODE	2149:42	2149:42	7	,
ARGUMENT	2149:43	2149:43	7	dir
FIELD	2149:43	2149:43	8	dir
LEAF_NODE	2149:43	2149:43	9	dir
LEAF_NODE	2149:46	2149:46	7	,
ARGUMENT	2149:47	2149:47	7	tag
FIELD	2149:47	2149:47	8	tag
LEAF_NODE	2149:47	2149:47	9	tag
LEAF_NODE	2149:50	2149:50	7	,
ARGUMENT	2149:51	2149:51	7	TIFF_BYTE
FIELD	2149:51	2149:51	8	TIFF_BYTE
LEAF_NODE	2149:51	2149:51	9	TIFF_BYTE
LEAF_NODE	2149:60	2149:60	7	,
ARGUMENT	2149:61	2149:61	7	count
FIELD	2149:61	2149:61	8	count
LEAF_NODE	2149:61	2149:61	9	count
LEAF_NODE	2149:66	2149:66	7	,
ARGUMENT	2149:67	2149:67	7	count
FIELD	2149:67	2149:67	8	count
LEAF_NODE	2149:67	2149:67	9	count
LEAF_NODE	2149:72	2149:72	7	,
ARGUMENT	2149:73	2149:73	7	value
FIELD	2149:73	2149:73	8	value
LEAF_NODE	2149:73	2149:73	9	value
LEAF_NODE	2149:78	2149:78	7	)
LEAF_NODE	2149:79	2149:79	6	)
LEAF_NODE	2149:80	2149:80	4	;
LEAF_NODE	2150:0	2150:0	2	}
FUNCTION_DEF	2153:0	2158:0	1	
RETURN_TYPE	2153:0	2153:7	2	static int
LEAF_NODE	2153:0	2153:0	3	static
TYPE_NAME	2153:7	2153:7	3	int
LEAF_NODE	2153:7	2153:7	4	int
FUNCTION_NAME	2154:0	2154:0	2	TIFFWriteDirectoryTagCheckedSbyte
LEAF_NODE	2154:0	2154:0	3	TIFFWriteDirectoryTagCheckedSbyte
PARAMETER_LIST	2154:33	2154:100	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int8 value )
LEAF_NODE	2154:33	2154:33	3	(
PARAMETER_DECL	2154:34	2154:40	3	TIFF * tif
TYPE	2154:34	2154:38	4	TIFF *
TYPE_NAME	2154:34	2154:34	5	TIFF
LEAF_NODE	2154:34	2154:34	6	TIFF
POINTER	2154:38	2154:38	5	*
LEAF_NODE	2154:38	2154:38	6	*
NAME	2154:40	2154:40	4	tif
LEAF_NODE	2154:40	2154:40	5	tif
LEAF_NODE	2154:43	2154:43	3	,
PARAMETER_DECL	2154:45	2154:53	3	uint32 * ndir
TYPE	2154:45	2154:51	4	uint32 *
TYPE_NAME	2154:45	2154:45	5	uint32
LEAF_NODE	2154:45	2154:45	6	uint32
POINTER	2154:51	2154:51	5	*
LEAF_NODE	2154:51	2154:51	6	*
NAME	2154:53	2154:53	4	ndir
LEAF_NODE	2154:53	2154:53	5	ndir
LEAF_NODE	2154:57	2154:57	3	,
PARAMETER_DECL	2154:59	2154:73	3	TIFFDirEntry * dir
TYPE	2154:59	2154:71	4	TIFFDirEntry *
TYPE_NAME	2154:59	2154:59	5	TIFFDirEntry
LEAF_NODE	2154:59	2154:59	6	TIFFDirEntry
POINTER	2154:71	2154:71	5	*
LEAF_NODE	2154:71	2154:71	6	*
NAME	2154:73	2154:73	4	dir
LEAF_NODE	2154:73	2154:73	5	dir
LEAF_NODE	2154:76	2154:76	3	,
PARAMETER_DECL	2154:78	2154:85	3	uint16 tag
TYPE	2154:78	2154:78	4	uint16
TYPE_NAME	2154:78	2154:78	5	uint16
LEAF_NODE	2154:78	2154:78	6	uint16
NAME	2154:85	2154:85	4	tag
LEAF_NODE	2154:85	2154:85	5	tag
LEAF_NODE	2154:88	2154:88	3	,
PARAMETER_DECL	2154:90	2154:95	3	int8 value
TYPE	2154:90	2154:90	4	int8
TYPE_NAME	2154:90	2154:90	5	int8
LEAF_NODE	2154:90	2154:90	6	int8
NAME	2154:95	2154:95	4	value
LEAF_NODE	2154:95	2154:95	5	value
LEAF_NODE	2154:100	2154:100	3	)
LEAF_NODE	2155:0	2155:0	2	{
STATEMENTS	2156:1	2157:1	2	
EXPR_STATEMENT	2156:1	2156:24	3	assert ( sizeof ( int8 ) == 1 ) ;
EXPR	2156:1	2156:1	4	assert ( sizeof ( int8 ) == 1 )
FUNCTION_CALL	2156:1	2156:23	5	assert ( sizeof ( int8 ) == 1 )
CALLEE	2156:1	2156:1	6	assert
LEAF_NODE	2156:1	2156:1	7	assert
LEAF_NODE	2156:7	2156:7	6	(
ARGUMENT	2156:8	2156:22	6	sizeof ( int8 ) == 1
FUNCTION_CALL	2156:8	2156:19	7	sizeof ( int8 )
CALLEE	2156:8	2156:8	8	sizeof
LEAF_NODE	2156:8	2156:8	9	sizeof
LEAF_NODE	2156:14	2156:14	8	(
ARGUMENT	2156:15	2156:15	8	int8
FIELD	2156:15	2156:15	9	int8
LEAF_NODE	2156:15	2156:15	10	int8
LEAF_NODE	2156:19	2156:19	8	)
EQ_OPERATOR	2156:20	2156:20	7	==
LEAF_NODE	2156:20	2156:20	8	==
FIELD	2156:22	2156:22	7	1
LEAF_NODE	2156:22	2156:22	8	1
LEAF_NODE	2156:23	2156:23	6	)
LEAF_NODE	2156:24	2156:24	4	;
JUMP_STATEMENT	2157:1	2157:74	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SBYTE , 1 , 1 , & value ) ) ;
KEYWORD	2157:1	2157:1	4	return
LEAF_NODE	2157:1	2157:1	5	return
DESTINATION	2157:7	2157:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SBYTE , 1 , 1 , & value ) )
EXPR	2157:7	2157:73	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SBYTE , 1 , 1 , & value ) )
LEAF_NODE	2157:7	2157:7	6	(
FUNCTION_CALL	2157:8	2157:72	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SBYTE , 1 , 1 , & value )
CALLEE	2157:8	2157:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2157:8	2157:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2157:33	2157:33	7	(
ARGUMENT	2157:34	2157:34	7	tif
FIELD	2157:34	2157:34	8	tif
LEAF_NODE	2157:34	2157:34	9	tif
LEAF_NODE	2157:37	2157:37	7	,
ARGUMENT	2157:38	2157:38	7	ndir
FIELD	2157:38	2157:38	8	ndir
LEAF_NODE	2157:38	2157:38	9	ndir
LEAF_NODE	2157:42	2157:42	7	,
ARGUMENT	2157:43	2157:43	7	dir
FIELD	2157:43	2157:43	8	dir
LEAF_NODE	2157:43	2157:43	9	dir
LEAF_NODE	2157:46	2157:46	7	,
ARGUMENT	2157:47	2157:47	7	tag
FIELD	2157:47	2157:47	8	tag
LEAF_NODE	2157:47	2157:47	9	tag
LEAF_NODE	2157:50	2157:50	7	,
ARGUMENT	2157:51	2157:51	7	TIFF_SBYTE
FIELD	2157:51	2157:51	8	TIFF_SBYTE
LEAF_NODE	2157:51	2157:51	9	TIFF_SBYTE
LEAF_NODE	2157:61	2157:61	7	,
ARGUMENT	2157:62	2157:62	7	1
FIELD	2157:62	2157:62	8	1
LEAF_NODE	2157:62	2157:62	9	1
LEAF_NODE	2157:63	2157:63	7	,
ARGUMENT	2157:64	2157:64	7	1
FIELD	2157:64	2157:64	8	1
LEAF_NODE	2157:64	2157:64	9	1
LEAF_NODE	2157:65	2157:65	7	,
ARGUMENT	2157:66	2157:66	7	& value
UNARY_EXPR	2157:66	2157:67	8	& value
UNARY_OPERATOR	2157:66	2157:66	9	&
LEAF_NODE	2157:66	2157:66	10	&
FIELD	2157:67	2157:67	9	value
LEAF_NODE	2157:67	2157:67	10	value
LEAF_NODE	2157:72	2157:72	7	)
LEAF_NODE	2157:73	2157:73	6	)
LEAF_NODE	2157:74	2157:74	4	;
LEAF_NODE	2158:0	2158:0	2	}
FUNCTION_DEF	2161:0	2166:0	1	
RETURN_TYPE	2161:0	2161:7	2	static int
LEAF_NODE	2161:0	2161:0	3	static
TYPE_NAME	2161:7	2161:7	3	int
LEAF_NODE	2161:7	2161:7	4	int
FUNCTION_NAME	2162:0	2162:0	2	TIFFWriteDirectoryTagCheckedSbyteArray
LEAF_NODE	2162:0	2162:0	3	TIFFWriteDirectoryTagCheckedSbyteArray
PARAMETER_LIST	2162:38	2162:120	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , int8 * value )
LEAF_NODE	2162:38	2162:38	3	(
PARAMETER_DECL	2162:39	2162:45	3	TIFF * tif
TYPE	2162:39	2162:43	4	TIFF *
TYPE_NAME	2162:39	2162:39	5	TIFF
LEAF_NODE	2162:39	2162:39	6	TIFF
POINTER	2162:43	2162:43	5	*
LEAF_NODE	2162:43	2162:43	6	*
NAME	2162:45	2162:45	4	tif
LEAF_NODE	2162:45	2162:45	5	tif
LEAF_NODE	2162:48	2162:48	3	,
PARAMETER_DECL	2162:50	2162:58	3	uint32 * ndir
TYPE	2162:50	2162:56	4	uint32 *
TYPE_NAME	2162:50	2162:50	5	uint32
LEAF_NODE	2162:50	2162:50	6	uint32
POINTER	2162:56	2162:56	5	*
LEAF_NODE	2162:56	2162:56	6	*
NAME	2162:58	2162:58	4	ndir
LEAF_NODE	2162:58	2162:58	5	ndir
LEAF_NODE	2162:62	2162:62	3	,
PARAMETER_DECL	2162:64	2162:78	3	TIFFDirEntry * dir
TYPE	2162:64	2162:76	4	TIFFDirEntry *
TYPE_NAME	2162:64	2162:64	5	TIFFDirEntry
LEAF_NODE	2162:64	2162:64	6	TIFFDirEntry
POINTER	2162:76	2162:76	5	*
LEAF_NODE	2162:76	2162:76	6	*
NAME	2162:78	2162:78	4	dir
LEAF_NODE	2162:78	2162:78	5	dir
LEAF_NODE	2162:81	2162:81	3	,
PARAMETER_DECL	2162:83	2162:90	3	uint16 tag
TYPE	2162:83	2162:83	4	uint16
TYPE_NAME	2162:83	2162:83	5	uint16
LEAF_NODE	2162:83	2162:83	6	uint16
NAME	2162:90	2162:90	4	tag
LEAF_NODE	2162:90	2162:90	5	tag
LEAF_NODE	2162:93	2162:93	3	,
PARAMETER_DECL	2162:95	2162:102	3	uint32 count
TYPE	2162:95	2162:95	4	uint32
TYPE_NAME	2162:95	2162:95	5	uint32
LEAF_NODE	2162:95	2162:95	6	uint32
NAME	2162:102	2162:102	4	count
LEAF_NODE	2162:102	2162:102	5	count
LEAF_NODE	2162:107	2162:107	3	,
PARAMETER_DECL	2162:109	2162:115	3	int8 * value
TYPE	2162:109	2162:113	4	int8 *
TYPE_NAME	2162:109	2162:109	5	int8
LEAF_NODE	2162:109	2162:109	6	int8
POINTER	2162:113	2162:113	5	*
LEAF_NODE	2162:113	2162:113	6	*
NAME	2162:115	2162:115	4	value
LEAF_NODE	2162:115	2162:115	5	value
LEAF_NODE	2162:120	2162:120	3	)
LEAF_NODE	2163:0	2163:0	2	{
STATEMENTS	2164:1	2165:1	2	
EXPR_STATEMENT	2164:1	2164:24	3	assert ( sizeof ( int8 ) == 1 ) ;
EXPR	2164:1	2164:1	4	assert ( sizeof ( int8 ) == 1 )
FUNCTION_CALL	2164:1	2164:23	5	assert ( sizeof ( int8 ) == 1 )
CALLEE	2164:1	2164:1	6	assert
LEAF_NODE	2164:1	2164:1	7	assert
LEAF_NODE	2164:7	2164:7	6	(
ARGUMENT	2164:8	2164:22	6	sizeof ( int8 ) == 1
FUNCTION_CALL	2164:8	2164:19	7	sizeof ( int8 )
CALLEE	2164:8	2164:8	8	sizeof
LEAF_NODE	2164:8	2164:8	9	sizeof
LEAF_NODE	2164:14	2164:14	8	(
ARGUMENT	2164:15	2164:15	8	int8
FIELD	2164:15	2164:15	9	int8
LEAF_NODE	2164:15	2164:15	10	int8
LEAF_NODE	2164:19	2164:19	8	)
EQ_OPERATOR	2164:20	2164:20	7	==
LEAF_NODE	2164:20	2164:20	8	==
FIELD	2164:22	2164:22	7	1
LEAF_NODE	2164:22	2164:22	8	1
LEAF_NODE	2164:23	2164:23	6	)
LEAF_NODE	2164:24	2164:24	4	;
JUMP_STATEMENT	2165:1	2165:81	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SBYTE , count , count , value ) ) ;
KEYWORD	2165:1	2165:1	4	return
LEAF_NODE	2165:1	2165:1	5	return
DESTINATION	2165:7	2165:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SBYTE , count , count , value ) )
EXPR	2165:7	2165:80	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SBYTE , count , count , value ) )
LEAF_NODE	2165:7	2165:7	6	(
FUNCTION_CALL	2165:8	2165:79	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SBYTE , count , count , value )
CALLEE	2165:8	2165:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2165:8	2165:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2165:33	2165:33	7	(
ARGUMENT	2165:34	2165:34	7	tif
FIELD	2165:34	2165:34	8	tif
LEAF_NODE	2165:34	2165:34	9	tif
LEAF_NODE	2165:37	2165:37	7	,
ARGUMENT	2165:38	2165:38	7	ndir
FIELD	2165:38	2165:38	8	ndir
LEAF_NODE	2165:38	2165:38	9	ndir
LEAF_NODE	2165:42	2165:42	7	,
ARGUMENT	2165:43	2165:43	7	dir
FIELD	2165:43	2165:43	8	dir
LEAF_NODE	2165:43	2165:43	9	dir
LEAF_NODE	2165:46	2165:46	7	,
ARGUMENT	2165:47	2165:47	7	tag
FIELD	2165:47	2165:47	8	tag
LEAF_NODE	2165:47	2165:47	9	tag
LEAF_NODE	2165:50	2165:50	7	,
ARGUMENT	2165:51	2165:51	7	TIFF_SBYTE
FIELD	2165:51	2165:51	8	TIFF_SBYTE
LEAF_NODE	2165:51	2165:51	9	TIFF_SBYTE
LEAF_NODE	2165:61	2165:61	7	,
ARGUMENT	2165:62	2165:62	7	count
FIELD	2165:62	2165:62	8	count
LEAF_NODE	2165:62	2165:62	9	count
LEAF_NODE	2165:67	2165:67	7	,
ARGUMENT	2165:68	2165:68	7	count
FIELD	2165:68	2165:68	8	count
LEAF_NODE	2165:68	2165:68	9	count
LEAF_NODE	2165:73	2165:73	7	,
ARGUMENT	2165:74	2165:74	7	value
FIELD	2165:74	2165:74	8	value
LEAF_NODE	2165:74	2165:74	9	value
LEAF_NODE	2165:79	2165:79	7	)
LEAF_NODE	2165:80	2165:80	6	)
LEAF_NODE	2165:81	2165:81	4	;
LEAF_NODE	2166:0	2166:0	2	}
FUNCTION_DEF	2168:0	2177:0	1	
RETURN_TYPE	2168:0	2168:7	2	static int
LEAF_NODE	2168:0	2168:0	3	static
TYPE_NAME	2168:7	2168:7	3	int
LEAF_NODE	2168:7	2168:7	4	int
FUNCTION_NAME	2169:0	2169:0	2	TIFFWriteDirectoryTagCheckedShort
LEAF_NODE	2169:0	2169:0	3	TIFFWriteDirectoryTagCheckedShort
PARAMETER_LIST	2169:33	2169:102	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint16 value )
LEAF_NODE	2169:33	2169:33	3	(
PARAMETER_DECL	2169:34	2169:40	3	TIFF * tif
TYPE	2169:34	2169:38	4	TIFF *
TYPE_NAME	2169:34	2169:34	5	TIFF
LEAF_NODE	2169:34	2169:34	6	TIFF
POINTER	2169:38	2169:38	5	*
LEAF_NODE	2169:38	2169:38	6	*
NAME	2169:40	2169:40	4	tif
LEAF_NODE	2169:40	2169:40	5	tif
LEAF_NODE	2169:43	2169:43	3	,
PARAMETER_DECL	2169:45	2169:53	3	uint32 * ndir
TYPE	2169:45	2169:51	4	uint32 *
TYPE_NAME	2169:45	2169:45	5	uint32
LEAF_NODE	2169:45	2169:45	6	uint32
POINTER	2169:51	2169:51	5	*
LEAF_NODE	2169:51	2169:51	6	*
NAME	2169:53	2169:53	4	ndir
LEAF_NODE	2169:53	2169:53	5	ndir
LEAF_NODE	2169:57	2169:57	3	,
PARAMETER_DECL	2169:59	2169:73	3	TIFFDirEntry * dir
TYPE	2169:59	2169:71	4	TIFFDirEntry *
TYPE_NAME	2169:59	2169:59	5	TIFFDirEntry
LEAF_NODE	2169:59	2169:59	6	TIFFDirEntry
POINTER	2169:71	2169:71	5	*
LEAF_NODE	2169:71	2169:71	6	*
NAME	2169:73	2169:73	4	dir
LEAF_NODE	2169:73	2169:73	5	dir
LEAF_NODE	2169:76	2169:76	3	,
PARAMETER_DECL	2169:78	2169:85	3	uint16 tag
TYPE	2169:78	2169:78	4	uint16
TYPE_NAME	2169:78	2169:78	5	uint16
LEAF_NODE	2169:78	2169:78	6	uint16
NAME	2169:85	2169:85	4	tag
LEAF_NODE	2169:85	2169:85	5	tag
LEAF_NODE	2169:88	2169:88	3	,
PARAMETER_DECL	2169:90	2169:97	3	uint16 value
TYPE	2169:90	2169:90	4	uint16
TYPE_NAME	2169:90	2169:90	5	uint16
LEAF_NODE	2169:90	2169:90	6	uint16
NAME	2169:97	2169:97	4	value
LEAF_NODE	2169:97	2169:97	5	value
LEAF_NODE	2169:102	2169:102	3	)
LEAF_NODE	2170:0	2170:0	2	{
STATEMENTS	2171:1	2176:1	2	
SIMPLE_DECL	2171:1	2171:9	3	uint16 m ;
VAR_DECL	2171:1	2171:8	4	uint16 m
TYPE	2171:1	2171:1	5	uint16
TYPE_NAME	2171:1	2171:1	6	uint16
LEAF_NODE	2171:1	2171:1	7	uint16
NAME	2171:8	2171:8	5	m
LEAF_NODE	2171:8	2171:8	6	m
LEAF_NODE	2171:9	2171:9	4	;
EXPR_STATEMENT	2172:1	2172:26	3	assert ( sizeof ( uint16 ) == 2 ) ;
EXPR	2172:1	2172:1	4	assert ( sizeof ( uint16 ) == 2 )
FUNCTION_CALL	2172:1	2172:25	5	assert ( sizeof ( uint16 ) == 2 )
CALLEE	2172:1	2172:1	6	assert
LEAF_NODE	2172:1	2172:1	7	assert
LEAF_NODE	2172:7	2172:7	6	(
ARGUMENT	2172:8	2172:24	6	sizeof ( uint16 ) == 2
FUNCTION_CALL	2172:8	2172:21	7	sizeof ( uint16 )
CALLEE	2172:8	2172:8	8	sizeof
LEAF_NODE	2172:8	2172:8	9	sizeof
LEAF_NODE	2172:14	2172:14	8	(
ARGUMENT	2172:15	2172:15	8	uint16
FIELD	2172:15	2172:15	9	uint16
LEAF_NODE	2172:15	2172:15	10	uint16
LEAF_NODE	2172:21	2172:21	8	)
EQ_OPERATOR	2172:22	2172:22	7	==
LEAF_NODE	2172:22	2172:22	8	==
FIELD	2172:24	2172:24	7	2
LEAF_NODE	2172:24	2172:24	8	2
LEAF_NODE	2172:25	2172:25	6	)
LEAF_NODE	2172:26	2172:26	4	;
EXPR_STATEMENT	2173:1	2173:8	3	m = value ;
EXPR	2173:1	2173:1	4	m = value
ASSIGN	2173:1	2173:3	5	m = value
LVAL	2173:1	2173:1	6	m
FIELD	2173:1	2173:1	7	m
LEAF_NODE	2173:1	2173:1	8	m
ASSIGN_OP	2173:2	2173:2	6	=
LEAF_NODE	2173:2	2173:2	7	=
RVAL	2173:3	2173:3	6	value
FIELD	2173:3	2173:3	7	value
LEAF_NODE	2173:3	2173:3	8	value
LEAF_NODE	2173:8	2173:8	4	;
SELECTION	2174:1	2175:2	3	
KEYWORD	2174:1	2174:1	4	if
LEAF_NODE	2174:1	2174:1	5	if
LEAF_NODE	2174:4	2174:4	4	(
CONDITION	2174:5	2174:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2174:5	2174:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2174:5	2174:10	6	tif -> tif_flags
LEAF_NODE	2174:5	2174:5	7	tif
LEAF_NODE	2174:8	2174:8	7	->
LEAF_NODE	2174:10	2174:10	7	tif_flags
LEAF_NODE	2174:19	2174:19	6	&
FIELD	2174:20	2174:20	6	TIFF_SWAB
LEAF_NODE	2174:20	2174:20	7	TIFF_SWAB
LEAF_NODE	2174:29	2174:29	4	)
STATEMENTS	2175:2	2175:2	4	
EXPR_STATEMENT	2175:2	2175:19	5	TIFFSwabShort ( & m ) ;
EXPR	2175:2	2175:2	6	TIFFSwabShort ( & m )
FUNCTION_CALL	2175:2	2175:18	7	TIFFSwabShort ( & m )
CALLEE	2175:2	2175:2	8	TIFFSwabShort
LEAF_NODE	2175:2	2175:2	9	TIFFSwabShort
LEAF_NODE	2175:15	2175:15	8	(
ARGUMENT	2175:16	2175:16	8	& m
UNARY_EXPR	2175:16	2175:17	9	& m
UNARY_OPERATOR	2175:16	2175:16	10	&
LEAF_NODE	2175:16	2175:16	11	&
FIELD	2175:17	2175:17	10	m
LEAF_NODE	2175:17	2175:17	11	m
LEAF_NODE	2175:18	2175:18	8	)
LEAF_NODE	2175:19	2175:19	6	;
JUMP_STATEMENT	2176:1	2176:70	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SHORT , 1 , 2 , & m ) ) ;
KEYWORD	2176:1	2176:1	4	return
LEAF_NODE	2176:1	2176:1	5	return
DESTINATION	2176:7	2176:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SHORT , 1 , 2 , & m ) )
EXPR	2176:7	2176:69	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SHORT , 1 , 2 , & m ) )
LEAF_NODE	2176:7	2176:7	6	(
FUNCTION_CALL	2176:8	2176:68	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SHORT , 1 , 2 , & m )
CALLEE	2176:8	2176:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2176:8	2176:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2176:33	2176:33	7	(
ARGUMENT	2176:34	2176:34	7	tif
FIELD	2176:34	2176:34	8	tif
LEAF_NODE	2176:34	2176:34	9	tif
LEAF_NODE	2176:37	2176:37	7	,
ARGUMENT	2176:38	2176:38	7	ndir
FIELD	2176:38	2176:38	8	ndir
LEAF_NODE	2176:38	2176:38	9	ndir
LEAF_NODE	2176:42	2176:42	7	,
ARGUMENT	2176:43	2176:43	7	dir
FIELD	2176:43	2176:43	8	dir
LEAF_NODE	2176:43	2176:43	9	dir
LEAF_NODE	2176:46	2176:46	7	,
ARGUMENT	2176:47	2176:47	7	tag
FIELD	2176:47	2176:47	8	tag
LEAF_NODE	2176:47	2176:47	9	tag
LEAF_NODE	2176:50	2176:50	7	,
ARGUMENT	2176:51	2176:51	7	TIFF_SHORT
FIELD	2176:51	2176:51	8	TIFF_SHORT
LEAF_NODE	2176:51	2176:51	9	TIFF_SHORT
LEAF_NODE	2176:61	2176:61	7	,
ARGUMENT	2176:62	2176:62	7	1
FIELD	2176:62	2176:62	8	1
LEAF_NODE	2176:62	2176:62	9	1
LEAF_NODE	2176:63	2176:63	7	,
ARGUMENT	2176:64	2176:64	7	2
FIELD	2176:64	2176:64	8	2
LEAF_NODE	2176:64	2176:64	9	2
LEAF_NODE	2176:65	2176:65	7	,
ARGUMENT	2176:66	2176:66	7	& m
UNARY_EXPR	2176:66	2176:67	8	& m
UNARY_OPERATOR	2176:66	2176:66	9	&
LEAF_NODE	2176:66	2176:66	10	&
FIELD	2176:67	2176:67	9	m
LEAF_NODE	2176:67	2176:67	10	m
LEAF_NODE	2176:68	2176:68	7	)
LEAF_NODE	2176:69	2176:69	6	)
LEAF_NODE	2176:70	2176:70	4	;
LEAF_NODE	2177:0	2177:0	2	}
FUNCTION_DEF	2179:0	2187:0	1	
RETURN_TYPE	2179:0	2179:7	2	static int
LEAF_NODE	2179:0	2179:0	3	static
TYPE_NAME	2179:7	2179:7	3	int
LEAF_NODE	2179:7	2179:7	4	int
FUNCTION_NAME	2180:0	2180:0	2	TIFFWriteDirectoryTagCheckedShortArray
LEAF_NODE	2180:0	2180:0	3	TIFFWriteDirectoryTagCheckedShortArray
PARAMETER_LIST	2180:38	2180:122	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint16 * value )
LEAF_NODE	2180:38	2180:38	3	(
PARAMETER_DECL	2180:39	2180:45	3	TIFF * tif
TYPE	2180:39	2180:43	4	TIFF *
TYPE_NAME	2180:39	2180:39	5	TIFF
LEAF_NODE	2180:39	2180:39	6	TIFF
POINTER	2180:43	2180:43	5	*
LEAF_NODE	2180:43	2180:43	6	*
NAME	2180:45	2180:45	4	tif
LEAF_NODE	2180:45	2180:45	5	tif
LEAF_NODE	2180:48	2180:48	3	,
PARAMETER_DECL	2180:50	2180:58	3	uint32 * ndir
TYPE	2180:50	2180:56	4	uint32 *
TYPE_NAME	2180:50	2180:50	5	uint32
LEAF_NODE	2180:50	2180:50	6	uint32
POINTER	2180:56	2180:56	5	*
LEAF_NODE	2180:56	2180:56	6	*
NAME	2180:58	2180:58	4	ndir
LEAF_NODE	2180:58	2180:58	5	ndir
LEAF_NODE	2180:62	2180:62	3	,
PARAMETER_DECL	2180:64	2180:78	3	TIFFDirEntry * dir
TYPE	2180:64	2180:76	4	TIFFDirEntry *
TYPE_NAME	2180:64	2180:64	5	TIFFDirEntry
LEAF_NODE	2180:64	2180:64	6	TIFFDirEntry
POINTER	2180:76	2180:76	5	*
LEAF_NODE	2180:76	2180:76	6	*
NAME	2180:78	2180:78	4	dir
LEAF_NODE	2180:78	2180:78	5	dir
LEAF_NODE	2180:81	2180:81	3	,
PARAMETER_DECL	2180:83	2180:90	3	uint16 tag
TYPE	2180:83	2180:83	4	uint16
TYPE_NAME	2180:83	2180:83	5	uint16
LEAF_NODE	2180:83	2180:83	6	uint16
NAME	2180:90	2180:90	4	tag
LEAF_NODE	2180:90	2180:90	5	tag
LEAF_NODE	2180:93	2180:93	3	,
PARAMETER_DECL	2180:95	2180:102	3	uint32 count
TYPE	2180:95	2180:95	4	uint32
TYPE_NAME	2180:95	2180:95	5	uint32
LEAF_NODE	2180:95	2180:95	6	uint32
NAME	2180:102	2180:102	4	count
LEAF_NODE	2180:102	2180:102	5	count
LEAF_NODE	2180:107	2180:107	3	,
PARAMETER_DECL	2180:109	2180:117	3	uint16 * value
TYPE	2180:109	2180:115	4	uint16 *
TYPE_NAME	2180:109	2180:109	5	uint16
LEAF_NODE	2180:109	2180:109	6	uint16
POINTER	2180:115	2180:115	5	*
LEAF_NODE	2180:115	2180:115	6	*
NAME	2180:117	2180:117	4	value
LEAF_NODE	2180:117	2180:117	5	value
LEAF_NODE	2180:122	2180:122	3	)
LEAF_NODE	2181:0	2181:0	2	{
STATEMENTS	2182:1	2186:1	2	
EXPR_STATEMENT	2182:1	2182:25	3	assert ( count < 0x80000000 ) ;
EXPR	2182:1	2182:1	4	assert ( count < 0x80000000 )
FUNCTION_CALL	2182:1	2182:24	5	assert ( count < 0x80000000 )
CALLEE	2182:1	2182:1	6	assert
LEAF_NODE	2182:1	2182:1	7	assert
LEAF_NODE	2182:7	2182:7	6	(
ARGUMENT	2182:8	2182:14	6	count < 0x80000000
FIELD	2182:8	2182:8	7	count
LEAF_NODE	2182:8	2182:8	8	count
REL_OPERATOR	2182:13	2182:13	7	<
LEAF_NODE	2182:13	2182:13	8	<
FIELD	2182:14	2182:14	7	0x80000000
LEAF_NODE	2182:14	2182:14	8	0x80000000
LEAF_NODE	2182:24	2182:24	6	)
LEAF_NODE	2182:25	2182:25	4	;
EXPR_STATEMENT	2183:1	2183:26	3	assert ( sizeof ( uint16 ) == 2 ) ;
EXPR	2183:1	2183:1	4	assert ( sizeof ( uint16 ) == 2 )
FUNCTION_CALL	2183:1	2183:25	5	assert ( sizeof ( uint16 ) == 2 )
CALLEE	2183:1	2183:1	6	assert
LEAF_NODE	2183:1	2183:1	7	assert
LEAF_NODE	2183:7	2183:7	6	(
ARGUMENT	2183:8	2183:24	6	sizeof ( uint16 ) == 2
FUNCTION_CALL	2183:8	2183:21	7	sizeof ( uint16 )
CALLEE	2183:8	2183:8	8	sizeof
LEAF_NODE	2183:8	2183:8	9	sizeof
LEAF_NODE	2183:14	2183:14	8	(
ARGUMENT	2183:15	2183:15	8	uint16
FIELD	2183:15	2183:15	9	uint16
LEAF_NODE	2183:15	2183:15	10	uint16
LEAF_NODE	2183:21	2183:21	8	)
EQ_OPERATOR	2183:22	2183:22	7	==
LEAF_NODE	2183:22	2183:22	8	==
FIELD	2183:24	2183:24	7	2
LEAF_NODE	2183:24	2183:24	8	2
LEAF_NODE	2183:25	2183:25	6	)
LEAF_NODE	2183:26	2183:26	4	;
SELECTION	2184:1	2185:2	3	
KEYWORD	2184:1	2184:1	4	if
LEAF_NODE	2184:1	2184:1	5	if
LEAF_NODE	2184:4	2184:4	4	(
CONDITION	2184:5	2184:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2184:5	2184:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2184:5	2184:10	6	tif -> tif_flags
LEAF_NODE	2184:5	2184:5	7	tif
LEAF_NODE	2184:8	2184:8	7	->
LEAF_NODE	2184:10	2184:10	7	tif_flags
LEAF_NODE	2184:19	2184:19	6	&
FIELD	2184:20	2184:20	6	TIFF_SWAB
LEAF_NODE	2184:20	2184:20	7	TIFF_SWAB
LEAF_NODE	2184:29	2184:29	4	)
STATEMENTS	2185:2	2185:2	4	
EXPR_STATEMENT	2185:2	2185:35	5	TIFFSwabArrayOfShort ( value , count ) ;
EXPR	2185:2	2185:2	6	TIFFSwabArrayOfShort ( value , count )
FUNCTION_CALL	2185:2	2185:34	7	TIFFSwabArrayOfShort ( value , count )
CALLEE	2185:2	2185:2	8	TIFFSwabArrayOfShort
LEAF_NODE	2185:2	2185:2	9	TIFFSwabArrayOfShort
LEAF_NODE	2185:22	2185:22	8	(
ARGUMENT	2185:23	2185:23	8	value
FIELD	2185:23	2185:23	9	value
LEAF_NODE	2185:23	2185:23	10	value
LEAF_NODE	2185:28	2185:28	8	,
ARGUMENT	2185:29	2185:29	8	count
FIELD	2185:29	2185:29	9	count
LEAF_NODE	2185:29	2185:29	10	count
LEAF_NODE	2185:34	2185:34	8	)
LEAF_NODE	2185:35	2185:35	6	;
JUMP_STATEMENT	2186:1	2186:83	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SHORT , count , count * 2 , value ) ) ;
KEYWORD	2186:1	2186:1	4	return
LEAF_NODE	2186:1	2186:1	5	return
DESTINATION	2186:7	2186:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SHORT , count , count * 2 , value ) )
EXPR	2186:7	2186:82	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SHORT , count , count * 2 , value ) )
LEAF_NODE	2186:7	2186:7	6	(
FUNCTION_CALL	2186:8	2186:81	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SHORT , count , count * 2 , value )
CALLEE	2186:8	2186:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2186:8	2186:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2186:33	2186:33	7	(
ARGUMENT	2186:34	2186:34	7	tif
FIELD	2186:34	2186:34	8	tif
LEAF_NODE	2186:34	2186:34	9	tif
LEAF_NODE	2186:37	2186:37	7	,
ARGUMENT	2186:38	2186:38	7	ndir
FIELD	2186:38	2186:38	8	ndir
LEAF_NODE	2186:38	2186:38	9	ndir
LEAF_NODE	2186:42	2186:42	7	,
ARGUMENT	2186:43	2186:43	7	dir
FIELD	2186:43	2186:43	8	dir
LEAF_NODE	2186:43	2186:43	9	dir
LEAF_NODE	2186:46	2186:46	7	,
ARGUMENT	2186:47	2186:47	7	tag
FIELD	2186:47	2186:47	8	tag
LEAF_NODE	2186:47	2186:47	9	tag
LEAF_NODE	2186:50	2186:50	7	,
ARGUMENT	2186:51	2186:51	7	TIFF_SHORT
FIELD	2186:51	2186:51	8	TIFF_SHORT
LEAF_NODE	2186:51	2186:51	9	TIFF_SHORT
LEAF_NODE	2186:61	2186:61	7	,
ARGUMENT	2186:62	2186:62	7	count
FIELD	2186:62	2186:62	8	count
LEAF_NODE	2186:62	2186:62	9	count
LEAF_NODE	2186:67	2186:67	7	,
ARGUMENT	2186:68	2186:74	7	count * 2
FIELD	2186:68	2186:68	8	count
LEAF_NODE	2186:68	2186:68	9	count
LEAF_NODE	2186:73	2186:73	8	*
FIELD	2186:74	2186:74	8	2
LEAF_NODE	2186:74	2186:74	9	2
LEAF_NODE	2186:75	2186:75	7	,
ARGUMENT	2186:76	2186:76	7	value
FIELD	2186:76	2186:76	8	value
LEAF_NODE	2186:76	2186:76	9	value
LEAF_NODE	2186:81	2186:81	7	)
LEAF_NODE	2186:82	2186:82	6	)
LEAF_NODE	2186:83	2186:83	4	;
LEAF_NODE	2187:0	2187:0	2	}
FUNCTION_DEF	2190:0	2199:0	1	
RETURN_TYPE	2190:0	2190:7	2	static int
LEAF_NODE	2190:0	2190:0	3	static
TYPE_NAME	2190:7	2190:7	3	int
LEAF_NODE	2190:7	2190:7	4	int
FUNCTION_NAME	2191:0	2191:0	2	TIFFWriteDirectoryTagCheckedSshort
LEAF_NODE	2191:0	2191:0	3	TIFFWriteDirectoryTagCheckedSshort
PARAMETER_LIST	2191:34	2191:102	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int16 value )
LEAF_NODE	2191:34	2191:34	3	(
PARAMETER_DECL	2191:35	2191:41	3	TIFF * tif
TYPE	2191:35	2191:39	4	TIFF *
TYPE_NAME	2191:35	2191:35	5	TIFF
LEAF_NODE	2191:35	2191:35	6	TIFF
POINTER	2191:39	2191:39	5	*
LEAF_NODE	2191:39	2191:39	6	*
NAME	2191:41	2191:41	4	tif
LEAF_NODE	2191:41	2191:41	5	tif
LEAF_NODE	2191:44	2191:44	3	,
PARAMETER_DECL	2191:46	2191:54	3	uint32 * ndir
TYPE	2191:46	2191:52	4	uint32 *
TYPE_NAME	2191:46	2191:46	5	uint32
LEAF_NODE	2191:46	2191:46	6	uint32
POINTER	2191:52	2191:52	5	*
LEAF_NODE	2191:52	2191:52	6	*
NAME	2191:54	2191:54	4	ndir
LEAF_NODE	2191:54	2191:54	5	ndir
LEAF_NODE	2191:58	2191:58	3	,
PARAMETER_DECL	2191:60	2191:74	3	TIFFDirEntry * dir
TYPE	2191:60	2191:72	4	TIFFDirEntry *
TYPE_NAME	2191:60	2191:60	5	TIFFDirEntry
LEAF_NODE	2191:60	2191:60	6	TIFFDirEntry
POINTER	2191:72	2191:72	5	*
LEAF_NODE	2191:72	2191:72	6	*
NAME	2191:74	2191:74	4	dir
LEAF_NODE	2191:74	2191:74	5	dir
LEAF_NODE	2191:77	2191:77	3	,
PARAMETER_DECL	2191:79	2191:86	3	uint16 tag
TYPE	2191:79	2191:79	4	uint16
TYPE_NAME	2191:79	2191:79	5	uint16
LEAF_NODE	2191:79	2191:79	6	uint16
NAME	2191:86	2191:86	4	tag
LEAF_NODE	2191:86	2191:86	5	tag
LEAF_NODE	2191:89	2191:89	3	,
PARAMETER_DECL	2191:91	2191:97	3	int16 value
TYPE	2191:91	2191:91	4	int16
TYPE_NAME	2191:91	2191:91	5	int16
LEAF_NODE	2191:91	2191:91	6	int16
NAME	2191:97	2191:97	4	value
LEAF_NODE	2191:97	2191:97	5	value
LEAF_NODE	2191:102	2191:102	3	)
LEAF_NODE	2192:0	2192:0	2	{
STATEMENTS	2193:1	2198:1	2	
SIMPLE_DECL	2193:1	2193:8	3	int16 m ;
VAR_DECL	2193:1	2193:7	4	int16 m
TYPE	2193:1	2193:1	5	int16
TYPE_NAME	2193:1	2193:1	6	int16
LEAF_NODE	2193:1	2193:1	7	int16
NAME	2193:7	2193:7	5	m
LEAF_NODE	2193:7	2193:7	6	m
LEAF_NODE	2193:8	2193:8	4	;
EXPR_STATEMENT	2194:1	2194:25	3	assert ( sizeof ( int16 ) == 2 ) ;
EXPR	2194:1	2194:1	4	assert ( sizeof ( int16 ) == 2 )
FUNCTION_CALL	2194:1	2194:24	5	assert ( sizeof ( int16 ) == 2 )
CALLEE	2194:1	2194:1	6	assert
LEAF_NODE	2194:1	2194:1	7	assert
LEAF_NODE	2194:7	2194:7	6	(
ARGUMENT	2194:8	2194:23	6	sizeof ( int16 ) == 2
FUNCTION_CALL	2194:8	2194:20	7	sizeof ( int16 )
CALLEE	2194:8	2194:8	8	sizeof
LEAF_NODE	2194:8	2194:8	9	sizeof
LEAF_NODE	2194:14	2194:14	8	(
ARGUMENT	2194:15	2194:15	8	int16
FIELD	2194:15	2194:15	9	int16
LEAF_NODE	2194:15	2194:15	10	int16
LEAF_NODE	2194:20	2194:20	8	)
EQ_OPERATOR	2194:21	2194:21	7	==
LEAF_NODE	2194:21	2194:21	8	==
FIELD	2194:23	2194:23	7	2
LEAF_NODE	2194:23	2194:23	8	2
LEAF_NODE	2194:24	2194:24	6	)
LEAF_NODE	2194:25	2194:25	4	;
EXPR_STATEMENT	2195:1	2195:8	3	m = value ;
EXPR	2195:1	2195:1	4	m = value
ASSIGN	2195:1	2195:3	5	m = value
LVAL	2195:1	2195:1	6	m
FIELD	2195:1	2195:1	7	m
LEAF_NODE	2195:1	2195:1	8	m
ASSIGN_OP	2195:2	2195:2	6	=
LEAF_NODE	2195:2	2195:2	7	=
RVAL	2195:3	2195:3	6	value
FIELD	2195:3	2195:3	7	value
LEAF_NODE	2195:3	2195:3	8	value
LEAF_NODE	2195:8	2195:8	4	;
SELECTION	2196:1	2197:2	3	
KEYWORD	2196:1	2196:1	4	if
LEAF_NODE	2196:1	2196:1	5	if
LEAF_NODE	2196:4	2196:4	4	(
CONDITION	2196:5	2196:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2196:5	2196:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2196:5	2196:10	6	tif -> tif_flags
LEAF_NODE	2196:5	2196:5	7	tif
LEAF_NODE	2196:8	2196:8	7	->
LEAF_NODE	2196:10	2196:10	7	tif_flags
LEAF_NODE	2196:19	2196:19	6	&
FIELD	2196:20	2196:20	6	TIFF_SWAB
LEAF_NODE	2196:20	2196:20	7	TIFF_SWAB
LEAF_NODE	2196:29	2196:29	4	)
STATEMENTS	2197:2	2197:2	4	
EXPR_STATEMENT	2197:2	2197:30	5	TIFFSwabShort ( ( uint16 * ) ( & m ) ) ;
EXPR	2197:2	2197:2	6	TIFFSwabShort ( ( uint16 * ) ( & m ) )
FUNCTION_CALL	2197:2	2197:29	7	TIFFSwabShort ( ( uint16 * ) ( & m ) )
CALLEE	2197:2	2197:2	8	TIFFSwabShort
LEAF_NODE	2197:2	2197:2	9	TIFFSwabShort
LEAF_NODE	2197:15	2197:15	8	(
ARGUMENT	2197:16	2197:28	8	( uint16 * ) ( & m )
LEAF_NODE	2197:16	2197:16	9	(
TYPE_NAME	2197:17	2197:17	9	uint16
LEAF_NODE	2197:17	2197:17	10	uint16
LEAF_NODE	2197:23	2197:23	9	*
LEAF_NODE	2197:24	2197:24	9	)
LEAF_NODE	2197:25	2197:25	9	(
UNARY_EXPR	2197:26	2197:27	9	& m
UNARY_OPERATOR	2197:26	2197:26	10	&
LEAF_NODE	2197:26	2197:26	11	&
FIELD	2197:27	2197:27	10	m
LEAF_NODE	2197:27	2197:27	11	m
LEAF_NODE	2197:28	2197:28	9	)
LEAF_NODE	2197:29	2197:29	8	)
LEAF_NODE	2197:30	2197:30	6	;
JUMP_STATEMENT	2198:1	2198:71	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SSHORT , 1 , 2 , & m ) ) ;
KEYWORD	2198:1	2198:1	4	return
LEAF_NODE	2198:1	2198:1	5	return
DESTINATION	2198:7	2198:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SSHORT , 1 , 2 , & m ) )
EXPR	2198:7	2198:70	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SSHORT , 1 , 2 , & m ) )
LEAF_NODE	2198:7	2198:7	6	(
FUNCTION_CALL	2198:8	2198:69	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SSHORT , 1 , 2 , & m )
CALLEE	2198:8	2198:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2198:8	2198:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2198:33	2198:33	7	(
ARGUMENT	2198:34	2198:34	7	tif
FIELD	2198:34	2198:34	8	tif
LEAF_NODE	2198:34	2198:34	9	tif
LEAF_NODE	2198:37	2198:37	7	,
ARGUMENT	2198:38	2198:38	7	ndir
FIELD	2198:38	2198:38	8	ndir
LEAF_NODE	2198:38	2198:38	9	ndir
LEAF_NODE	2198:42	2198:42	7	,
ARGUMENT	2198:43	2198:43	7	dir
FIELD	2198:43	2198:43	8	dir
LEAF_NODE	2198:43	2198:43	9	dir
LEAF_NODE	2198:46	2198:46	7	,
ARGUMENT	2198:47	2198:47	7	tag
FIELD	2198:47	2198:47	8	tag
LEAF_NODE	2198:47	2198:47	9	tag
LEAF_NODE	2198:50	2198:50	7	,
ARGUMENT	2198:51	2198:51	7	TIFF_SSHORT
FIELD	2198:51	2198:51	8	TIFF_SSHORT
LEAF_NODE	2198:51	2198:51	9	TIFF_SSHORT
LEAF_NODE	2198:62	2198:62	7	,
ARGUMENT	2198:63	2198:63	7	1
FIELD	2198:63	2198:63	8	1
LEAF_NODE	2198:63	2198:63	9	1
LEAF_NODE	2198:64	2198:64	7	,
ARGUMENT	2198:65	2198:65	7	2
FIELD	2198:65	2198:65	8	2
LEAF_NODE	2198:65	2198:65	9	2
LEAF_NODE	2198:66	2198:66	7	,
ARGUMENT	2198:67	2198:67	7	& m
UNARY_EXPR	2198:67	2198:68	8	& m
UNARY_OPERATOR	2198:67	2198:67	9	&
LEAF_NODE	2198:67	2198:67	10	&
FIELD	2198:68	2198:68	9	m
LEAF_NODE	2198:68	2198:68	10	m
LEAF_NODE	2198:69	2198:69	7	)
LEAF_NODE	2198:70	2198:70	6	)
LEAF_NODE	2198:71	2198:71	4	;
LEAF_NODE	2199:0	2199:0	2	}
FUNCTION_DEF	2202:0	2210:0	1	
RETURN_TYPE	2202:0	2202:7	2	static int
LEAF_NODE	2202:0	2202:0	3	static
TYPE_NAME	2202:7	2202:7	3	int
LEAF_NODE	2202:7	2202:7	4	int
FUNCTION_NAME	2203:0	2203:0	2	TIFFWriteDirectoryTagCheckedSshortArray
LEAF_NODE	2203:0	2203:0	3	TIFFWriteDirectoryTagCheckedSshortArray
PARAMETER_LIST	2203:39	2203:122	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , int16 * value )
LEAF_NODE	2203:39	2203:39	3	(
PARAMETER_DECL	2203:40	2203:46	3	TIFF * tif
TYPE	2203:40	2203:44	4	TIFF *
TYPE_NAME	2203:40	2203:40	5	TIFF
LEAF_NODE	2203:40	2203:40	6	TIFF
POINTER	2203:44	2203:44	5	*
LEAF_NODE	2203:44	2203:44	6	*
NAME	2203:46	2203:46	4	tif
LEAF_NODE	2203:46	2203:46	5	tif
LEAF_NODE	2203:49	2203:49	3	,
PARAMETER_DECL	2203:51	2203:59	3	uint32 * ndir
TYPE	2203:51	2203:57	4	uint32 *
TYPE_NAME	2203:51	2203:51	5	uint32
LEAF_NODE	2203:51	2203:51	6	uint32
POINTER	2203:57	2203:57	5	*
LEAF_NODE	2203:57	2203:57	6	*
NAME	2203:59	2203:59	4	ndir
LEAF_NODE	2203:59	2203:59	5	ndir
LEAF_NODE	2203:63	2203:63	3	,
PARAMETER_DECL	2203:65	2203:79	3	TIFFDirEntry * dir
TYPE	2203:65	2203:77	4	TIFFDirEntry *
TYPE_NAME	2203:65	2203:65	5	TIFFDirEntry
LEAF_NODE	2203:65	2203:65	6	TIFFDirEntry
POINTER	2203:77	2203:77	5	*
LEAF_NODE	2203:77	2203:77	6	*
NAME	2203:79	2203:79	4	dir
LEAF_NODE	2203:79	2203:79	5	dir
LEAF_NODE	2203:82	2203:82	3	,
PARAMETER_DECL	2203:84	2203:91	3	uint16 tag
TYPE	2203:84	2203:84	4	uint16
TYPE_NAME	2203:84	2203:84	5	uint16
LEAF_NODE	2203:84	2203:84	6	uint16
NAME	2203:91	2203:91	4	tag
LEAF_NODE	2203:91	2203:91	5	tag
LEAF_NODE	2203:94	2203:94	3	,
PARAMETER_DECL	2203:96	2203:103	3	uint32 count
TYPE	2203:96	2203:96	4	uint32
TYPE_NAME	2203:96	2203:96	5	uint32
LEAF_NODE	2203:96	2203:96	6	uint32
NAME	2203:103	2203:103	4	count
LEAF_NODE	2203:103	2203:103	5	count
LEAF_NODE	2203:108	2203:108	3	,
PARAMETER_DECL	2203:110	2203:117	3	int16 * value
TYPE	2203:110	2203:115	4	int16 *
TYPE_NAME	2203:110	2203:110	5	int16
LEAF_NODE	2203:110	2203:110	6	int16
POINTER	2203:115	2203:115	5	*
LEAF_NODE	2203:115	2203:115	6	*
NAME	2203:117	2203:117	4	value
LEAF_NODE	2203:117	2203:117	5	value
LEAF_NODE	2203:122	2203:122	3	)
LEAF_NODE	2204:0	2204:0	2	{
STATEMENTS	2205:1	2209:1	2	
EXPR_STATEMENT	2205:1	2205:25	3	assert ( count < 0x80000000 ) ;
EXPR	2205:1	2205:1	4	assert ( count < 0x80000000 )
FUNCTION_CALL	2205:1	2205:24	5	assert ( count < 0x80000000 )
CALLEE	2205:1	2205:1	6	assert
LEAF_NODE	2205:1	2205:1	7	assert
LEAF_NODE	2205:7	2205:7	6	(
ARGUMENT	2205:8	2205:14	6	count < 0x80000000
FIELD	2205:8	2205:8	7	count
LEAF_NODE	2205:8	2205:8	8	count
REL_OPERATOR	2205:13	2205:13	7	<
LEAF_NODE	2205:13	2205:13	8	<
FIELD	2205:14	2205:14	7	0x80000000
LEAF_NODE	2205:14	2205:14	8	0x80000000
LEAF_NODE	2205:24	2205:24	6	)
LEAF_NODE	2205:25	2205:25	4	;
EXPR_STATEMENT	2206:1	2206:25	3	assert ( sizeof ( int16 ) == 2 ) ;
EXPR	2206:1	2206:1	4	assert ( sizeof ( int16 ) == 2 )
FUNCTION_CALL	2206:1	2206:24	5	assert ( sizeof ( int16 ) == 2 )
CALLEE	2206:1	2206:1	6	assert
LEAF_NODE	2206:1	2206:1	7	assert
LEAF_NODE	2206:7	2206:7	6	(
ARGUMENT	2206:8	2206:23	6	sizeof ( int16 ) == 2
FUNCTION_CALL	2206:8	2206:20	7	sizeof ( int16 )
CALLEE	2206:8	2206:8	8	sizeof
LEAF_NODE	2206:8	2206:8	9	sizeof
LEAF_NODE	2206:14	2206:14	8	(
ARGUMENT	2206:15	2206:15	8	int16
FIELD	2206:15	2206:15	9	int16
LEAF_NODE	2206:15	2206:15	10	int16
LEAF_NODE	2206:20	2206:20	8	)
EQ_OPERATOR	2206:21	2206:21	7	==
LEAF_NODE	2206:21	2206:21	8	==
FIELD	2206:23	2206:23	7	2
LEAF_NODE	2206:23	2206:23	8	2
LEAF_NODE	2206:24	2206:24	6	)
LEAF_NODE	2206:25	2206:25	4	;
SELECTION	2207:1	2208:2	3	
KEYWORD	2207:1	2207:1	4	if
LEAF_NODE	2207:1	2207:1	5	if
LEAF_NODE	2207:4	2207:4	4	(
CONDITION	2207:5	2207:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2207:5	2207:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2207:5	2207:10	6	tif -> tif_flags
LEAF_NODE	2207:5	2207:5	7	tif
LEAF_NODE	2207:8	2207:8	7	->
LEAF_NODE	2207:10	2207:10	7	tif_flags
LEAF_NODE	2207:19	2207:19	6	&
FIELD	2207:20	2207:20	6	TIFF_SWAB
LEAF_NODE	2207:20	2207:20	7	TIFF_SWAB
LEAF_NODE	2207:29	2207:29	4	)
STATEMENTS	2208:2	2208:2	4	
EXPR_STATEMENT	2208:2	2208:44	5	TIFFSwabArrayOfShort ( ( uint16 * ) value , count ) ;
EXPR	2208:2	2208:2	6	TIFFSwabArrayOfShort ( ( uint16 * ) value , count )
FUNCTION_CALL	2208:2	2208:43	7	TIFFSwabArrayOfShort ( ( uint16 * ) value , count )
CALLEE	2208:2	2208:2	8	TIFFSwabArrayOfShort
LEAF_NODE	2208:2	2208:2	9	TIFFSwabArrayOfShort
LEAF_NODE	2208:22	2208:22	8	(
ARGUMENT	2208:23	2208:32	8	( uint16 * ) value
LEAF_NODE	2208:23	2208:23	9	(
TYPE_NAME	2208:24	2208:24	9	uint16
LEAF_NODE	2208:24	2208:24	10	uint16
LEAF_NODE	2208:30	2208:30	9	*
LEAF_NODE	2208:31	2208:31	9	)
FIELD	2208:32	2208:32	9	value
LEAF_NODE	2208:32	2208:32	10	value
LEAF_NODE	2208:37	2208:37	8	,
ARGUMENT	2208:38	2208:38	8	count
FIELD	2208:38	2208:38	9	count
LEAF_NODE	2208:38	2208:38	10	count
LEAF_NODE	2208:43	2208:43	8	)
LEAF_NODE	2208:44	2208:44	6	;
JUMP_STATEMENT	2209:1	2209:84	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SSHORT , count , count * 2 , value ) ) ;
KEYWORD	2209:1	2209:1	4	return
LEAF_NODE	2209:1	2209:1	5	return
DESTINATION	2209:7	2209:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SSHORT , count , count * 2 , value ) )
EXPR	2209:7	2209:83	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SSHORT , count , count * 2 , value ) )
LEAF_NODE	2209:7	2209:7	6	(
FUNCTION_CALL	2209:8	2209:82	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SSHORT , count , count * 2 , value )
CALLEE	2209:8	2209:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2209:8	2209:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2209:33	2209:33	7	(
ARGUMENT	2209:34	2209:34	7	tif
FIELD	2209:34	2209:34	8	tif
LEAF_NODE	2209:34	2209:34	9	tif
LEAF_NODE	2209:37	2209:37	7	,
ARGUMENT	2209:38	2209:38	7	ndir
FIELD	2209:38	2209:38	8	ndir
LEAF_NODE	2209:38	2209:38	9	ndir
LEAF_NODE	2209:42	2209:42	7	,
ARGUMENT	2209:43	2209:43	7	dir
FIELD	2209:43	2209:43	8	dir
LEAF_NODE	2209:43	2209:43	9	dir
LEAF_NODE	2209:46	2209:46	7	,
ARGUMENT	2209:47	2209:47	7	tag
FIELD	2209:47	2209:47	8	tag
LEAF_NODE	2209:47	2209:47	9	tag
LEAF_NODE	2209:50	2209:50	7	,
ARGUMENT	2209:51	2209:51	7	TIFF_SSHORT
FIELD	2209:51	2209:51	8	TIFF_SSHORT
LEAF_NODE	2209:51	2209:51	9	TIFF_SSHORT
LEAF_NODE	2209:62	2209:62	7	,
ARGUMENT	2209:63	2209:63	7	count
FIELD	2209:63	2209:63	8	count
LEAF_NODE	2209:63	2209:63	9	count
LEAF_NODE	2209:68	2209:68	7	,
ARGUMENT	2209:69	2209:75	7	count * 2
FIELD	2209:69	2209:69	8	count
LEAF_NODE	2209:69	2209:69	9	count
LEAF_NODE	2209:74	2209:74	8	*
FIELD	2209:75	2209:75	8	2
LEAF_NODE	2209:75	2209:75	9	2
LEAF_NODE	2209:76	2209:76	7	,
ARGUMENT	2209:77	2209:77	7	value
FIELD	2209:77	2209:77	8	value
LEAF_NODE	2209:77	2209:77	9	value
LEAF_NODE	2209:82	2209:82	7	)
LEAF_NODE	2209:83	2209:83	6	)
LEAF_NODE	2209:84	2209:84	4	;
LEAF_NODE	2210:0	2210:0	2	}
FUNCTION_DEF	2212:0	2221:0	1	
RETURN_TYPE	2212:0	2212:7	2	static int
LEAF_NODE	2212:0	2212:0	3	static
TYPE_NAME	2212:7	2212:7	3	int
LEAF_NODE	2212:7	2212:7	4	int
FUNCTION_NAME	2213:0	2213:0	2	TIFFWriteDirectoryTagCheckedLong
LEAF_NODE	2213:0	2213:0	3	TIFFWriteDirectoryTagCheckedLong
PARAMETER_LIST	2213:32	2213:101	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 value )
LEAF_NODE	2213:32	2213:32	3	(
PARAMETER_DECL	2213:33	2213:39	3	TIFF * tif
TYPE	2213:33	2213:37	4	TIFF *
TYPE_NAME	2213:33	2213:33	5	TIFF
LEAF_NODE	2213:33	2213:33	6	TIFF
POINTER	2213:37	2213:37	5	*
LEAF_NODE	2213:37	2213:37	6	*
NAME	2213:39	2213:39	4	tif
LEAF_NODE	2213:39	2213:39	5	tif
LEAF_NODE	2213:42	2213:42	3	,
PARAMETER_DECL	2213:44	2213:52	3	uint32 * ndir
TYPE	2213:44	2213:50	4	uint32 *
TYPE_NAME	2213:44	2213:44	5	uint32
LEAF_NODE	2213:44	2213:44	6	uint32
POINTER	2213:50	2213:50	5	*
LEAF_NODE	2213:50	2213:50	6	*
NAME	2213:52	2213:52	4	ndir
LEAF_NODE	2213:52	2213:52	5	ndir
LEAF_NODE	2213:56	2213:56	3	,
PARAMETER_DECL	2213:58	2213:72	3	TIFFDirEntry * dir
TYPE	2213:58	2213:70	4	TIFFDirEntry *
TYPE_NAME	2213:58	2213:58	5	TIFFDirEntry
LEAF_NODE	2213:58	2213:58	6	TIFFDirEntry
POINTER	2213:70	2213:70	5	*
LEAF_NODE	2213:70	2213:70	6	*
NAME	2213:72	2213:72	4	dir
LEAF_NODE	2213:72	2213:72	5	dir
LEAF_NODE	2213:75	2213:75	3	,
PARAMETER_DECL	2213:77	2213:84	3	uint16 tag
TYPE	2213:77	2213:77	4	uint16
TYPE_NAME	2213:77	2213:77	5	uint16
LEAF_NODE	2213:77	2213:77	6	uint16
NAME	2213:84	2213:84	4	tag
LEAF_NODE	2213:84	2213:84	5	tag
LEAF_NODE	2213:87	2213:87	3	,
PARAMETER_DECL	2213:89	2213:96	3	uint32 value
TYPE	2213:89	2213:89	4	uint32
TYPE_NAME	2213:89	2213:89	5	uint32
LEAF_NODE	2213:89	2213:89	6	uint32
NAME	2213:96	2213:96	4	value
LEAF_NODE	2213:96	2213:96	5	value
LEAF_NODE	2213:101	2213:101	3	)
LEAF_NODE	2214:0	2214:0	2	{
STATEMENTS	2215:1	2220:1	2	
SIMPLE_DECL	2215:1	2215:9	3	uint32 m ;
VAR_DECL	2215:1	2215:8	4	uint32 m
TYPE	2215:1	2215:1	5	uint32
TYPE_NAME	2215:1	2215:1	6	uint32
LEAF_NODE	2215:1	2215:1	7	uint32
NAME	2215:8	2215:8	5	m
LEAF_NODE	2215:8	2215:8	6	m
LEAF_NODE	2215:9	2215:9	4	;
EXPR_STATEMENT	2216:1	2216:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	2216:1	2216:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	2216:1	2216:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	2216:1	2216:1	6	assert
LEAF_NODE	2216:1	2216:1	7	assert
LEAF_NODE	2216:7	2216:7	6	(
ARGUMENT	2216:8	2216:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	2216:8	2216:21	7	sizeof ( uint32 )
CALLEE	2216:8	2216:8	8	sizeof
LEAF_NODE	2216:8	2216:8	9	sizeof
LEAF_NODE	2216:14	2216:14	8	(
ARGUMENT	2216:15	2216:15	8	uint32
FIELD	2216:15	2216:15	9	uint32
LEAF_NODE	2216:15	2216:15	10	uint32
LEAF_NODE	2216:21	2216:21	8	)
EQ_OPERATOR	2216:22	2216:22	7	==
LEAF_NODE	2216:22	2216:22	8	==
FIELD	2216:24	2216:24	7	4
LEAF_NODE	2216:24	2216:24	8	4
LEAF_NODE	2216:25	2216:25	6	)
LEAF_NODE	2216:26	2216:26	4	;
EXPR_STATEMENT	2217:1	2217:8	3	m = value ;
EXPR	2217:1	2217:1	4	m = value
ASSIGN	2217:1	2217:3	5	m = value
LVAL	2217:1	2217:1	6	m
FIELD	2217:1	2217:1	7	m
LEAF_NODE	2217:1	2217:1	8	m
ASSIGN_OP	2217:2	2217:2	6	=
LEAF_NODE	2217:2	2217:2	7	=
RVAL	2217:3	2217:3	6	value
FIELD	2217:3	2217:3	7	value
LEAF_NODE	2217:3	2217:3	8	value
LEAF_NODE	2217:8	2217:8	4	;
SELECTION	2218:1	2219:2	3	
KEYWORD	2218:1	2218:1	4	if
LEAF_NODE	2218:1	2218:1	5	if
LEAF_NODE	2218:4	2218:4	4	(
CONDITION	2218:5	2218:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2218:5	2218:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2218:5	2218:10	6	tif -> tif_flags
LEAF_NODE	2218:5	2218:5	7	tif
LEAF_NODE	2218:8	2218:8	7	->
LEAF_NODE	2218:10	2218:10	7	tif_flags
LEAF_NODE	2218:19	2218:19	6	&
FIELD	2218:20	2218:20	6	TIFF_SWAB
LEAF_NODE	2218:20	2218:20	7	TIFF_SWAB
LEAF_NODE	2218:29	2218:29	4	)
STATEMENTS	2219:2	2219:2	4	
EXPR_STATEMENT	2219:2	2219:18	5	TIFFSwabLong ( & m ) ;
EXPR	2219:2	2219:2	6	TIFFSwabLong ( & m )
FUNCTION_CALL	2219:2	2219:17	7	TIFFSwabLong ( & m )
CALLEE	2219:2	2219:2	8	TIFFSwabLong
LEAF_NODE	2219:2	2219:2	9	TIFFSwabLong
LEAF_NODE	2219:14	2219:14	8	(
ARGUMENT	2219:15	2219:15	8	& m
UNARY_EXPR	2219:15	2219:16	9	& m
UNARY_OPERATOR	2219:15	2219:15	10	&
LEAF_NODE	2219:15	2219:15	11	&
FIELD	2219:16	2219:16	10	m
LEAF_NODE	2219:16	2219:16	11	m
LEAF_NODE	2219:17	2219:17	8	)
LEAF_NODE	2219:18	2219:18	6	;
JUMP_STATEMENT	2220:1	2220:69	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG , 1 , 4 , & m ) ) ;
KEYWORD	2220:1	2220:1	4	return
LEAF_NODE	2220:1	2220:1	5	return
DESTINATION	2220:7	2220:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG , 1 , 4 , & m ) )
EXPR	2220:7	2220:68	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG , 1 , 4 , & m ) )
LEAF_NODE	2220:7	2220:7	6	(
FUNCTION_CALL	2220:8	2220:67	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG , 1 , 4 , & m )
CALLEE	2220:8	2220:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2220:8	2220:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2220:33	2220:33	7	(
ARGUMENT	2220:34	2220:34	7	tif
FIELD	2220:34	2220:34	8	tif
LEAF_NODE	2220:34	2220:34	9	tif
LEAF_NODE	2220:37	2220:37	7	,
ARGUMENT	2220:38	2220:38	7	ndir
FIELD	2220:38	2220:38	8	ndir
LEAF_NODE	2220:38	2220:38	9	ndir
LEAF_NODE	2220:42	2220:42	7	,
ARGUMENT	2220:43	2220:43	7	dir
FIELD	2220:43	2220:43	8	dir
LEAF_NODE	2220:43	2220:43	9	dir
LEAF_NODE	2220:46	2220:46	7	,
ARGUMENT	2220:47	2220:47	7	tag
FIELD	2220:47	2220:47	8	tag
LEAF_NODE	2220:47	2220:47	9	tag
LEAF_NODE	2220:50	2220:50	7	,
ARGUMENT	2220:51	2220:51	7	TIFF_LONG
FIELD	2220:51	2220:51	8	TIFF_LONG
LEAF_NODE	2220:51	2220:51	9	TIFF_LONG
LEAF_NODE	2220:60	2220:60	7	,
ARGUMENT	2220:61	2220:61	7	1
FIELD	2220:61	2220:61	8	1
LEAF_NODE	2220:61	2220:61	9	1
LEAF_NODE	2220:62	2220:62	7	,
ARGUMENT	2220:63	2220:63	7	4
FIELD	2220:63	2220:63	8	4
LEAF_NODE	2220:63	2220:63	9	4
LEAF_NODE	2220:64	2220:64	7	,
ARGUMENT	2220:65	2220:65	7	& m
UNARY_EXPR	2220:65	2220:66	8	& m
UNARY_OPERATOR	2220:65	2220:65	9	&
LEAF_NODE	2220:65	2220:65	10	&
FIELD	2220:66	2220:66	9	m
LEAF_NODE	2220:66	2220:66	10	m
LEAF_NODE	2220:67	2220:67	7	)
LEAF_NODE	2220:68	2220:68	6	)
LEAF_NODE	2220:69	2220:69	4	;
LEAF_NODE	2221:0	2221:0	2	}
FUNCTION_DEF	2223:0	2231:0	1	
RETURN_TYPE	2223:0	2223:7	2	static int
LEAF_NODE	2223:0	2223:0	3	static
TYPE_NAME	2223:7	2223:7	3	int
LEAF_NODE	2223:7	2223:7	4	int
FUNCTION_NAME	2224:0	2224:0	2	TIFFWriteDirectoryTagCheckedLongArray
LEAF_NODE	2224:0	2224:0	3	TIFFWriteDirectoryTagCheckedLongArray
PARAMETER_LIST	2224:37	2224:121	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint32 * value )
LEAF_NODE	2224:37	2224:37	3	(
PARAMETER_DECL	2224:38	2224:44	3	TIFF * tif
TYPE	2224:38	2224:42	4	TIFF *
TYPE_NAME	2224:38	2224:38	5	TIFF
LEAF_NODE	2224:38	2224:38	6	TIFF
POINTER	2224:42	2224:42	5	*
LEAF_NODE	2224:42	2224:42	6	*
NAME	2224:44	2224:44	4	tif
LEAF_NODE	2224:44	2224:44	5	tif
LEAF_NODE	2224:47	2224:47	3	,
PARAMETER_DECL	2224:49	2224:57	3	uint32 * ndir
TYPE	2224:49	2224:55	4	uint32 *
TYPE_NAME	2224:49	2224:49	5	uint32
LEAF_NODE	2224:49	2224:49	6	uint32
POINTER	2224:55	2224:55	5	*
LEAF_NODE	2224:55	2224:55	6	*
NAME	2224:57	2224:57	4	ndir
LEAF_NODE	2224:57	2224:57	5	ndir
LEAF_NODE	2224:61	2224:61	3	,
PARAMETER_DECL	2224:63	2224:77	3	TIFFDirEntry * dir
TYPE	2224:63	2224:75	4	TIFFDirEntry *
TYPE_NAME	2224:63	2224:63	5	TIFFDirEntry
LEAF_NODE	2224:63	2224:63	6	TIFFDirEntry
POINTER	2224:75	2224:75	5	*
LEAF_NODE	2224:75	2224:75	6	*
NAME	2224:77	2224:77	4	dir
LEAF_NODE	2224:77	2224:77	5	dir
LEAF_NODE	2224:80	2224:80	3	,
PARAMETER_DECL	2224:82	2224:89	3	uint16 tag
TYPE	2224:82	2224:82	4	uint16
TYPE_NAME	2224:82	2224:82	5	uint16
LEAF_NODE	2224:82	2224:82	6	uint16
NAME	2224:89	2224:89	4	tag
LEAF_NODE	2224:89	2224:89	5	tag
LEAF_NODE	2224:92	2224:92	3	,
PARAMETER_DECL	2224:94	2224:101	3	uint32 count
TYPE	2224:94	2224:94	4	uint32
TYPE_NAME	2224:94	2224:94	5	uint32
LEAF_NODE	2224:94	2224:94	6	uint32
NAME	2224:101	2224:101	4	count
LEAF_NODE	2224:101	2224:101	5	count
LEAF_NODE	2224:106	2224:106	3	,
PARAMETER_DECL	2224:108	2224:116	3	uint32 * value
TYPE	2224:108	2224:114	4	uint32 *
TYPE_NAME	2224:108	2224:108	5	uint32
LEAF_NODE	2224:108	2224:108	6	uint32
POINTER	2224:114	2224:114	5	*
LEAF_NODE	2224:114	2224:114	6	*
NAME	2224:116	2224:116	4	value
LEAF_NODE	2224:116	2224:116	5	value
LEAF_NODE	2224:121	2224:121	3	)
LEAF_NODE	2225:0	2225:0	2	{
STATEMENTS	2226:1	2230:1	2	
EXPR_STATEMENT	2226:1	2226:25	3	assert ( count < 0x40000000 ) ;
EXPR	2226:1	2226:1	4	assert ( count < 0x40000000 )
FUNCTION_CALL	2226:1	2226:24	5	assert ( count < 0x40000000 )
CALLEE	2226:1	2226:1	6	assert
LEAF_NODE	2226:1	2226:1	7	assert
LEAF_NODE	2226:7	2226:7	6	(
ARGUMENT	2226:8	2226:14	6	count < 0x40000000
FIELD	2226:8	2226:8	7	count
LEAF_NODE	2226:8	2226:8	8	count
REL_OPERATOR	2226:13	2226:13	7	<
LEAF_NODE	2226:13	2226:13	8	<
FIELD	2226:14	2226:14	7	0x40000000
LEAF_NODE	2226:14	2226:14	8	0x40000000
LEAF_NODE	2226:24	2226:24	6	)
LEAF_NODE	2226:25	2226:25	4	;
EXPR_STATEMENT	2227:1	2227:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	2227:1	2227:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	2227:1	2227:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	2227:1	2227:1	6	assert
LEAF_NODE	2227:1	2227:1	7	assert
LEAF_NODE	2227:7	2227:7	6	(
ARGUMENT	2227:8	2227:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	2227:8	2227:21	7	sizeof ( uint32 )
CALLEE	2227:8	2227:8	8	sizeof
LEAF_NODE	2227:8	2227:8	9	sizeof
LEAF_NODE	2227:14	2227:14	8	(
ARGUMENT	2227:15	2227:15	8	uint32
FIELD	2227:15	2227:15	9	uint32
LEAF_NODE	2227:15	2227:15	10	uint32
LEAF_NODE	2227:21	2227:21	8	)
EQ_OPERATOR	2227:22	2227:22	7	==
LEAF_NODE	2227:22	2227:22	8	==
FIELD	2227:24	2227:24	7	4
LEAF_NODE	2227:24	2227:24	8	4
LEAF_NODE	2227:25	2227:25	6	)
LEAF_NODE	2227:26	2227:26	4	;
SELECTION	2228:1	2229:2	3	
KEYWORD	2228:1	2228:1	4	if
LEAF_NODE	2228:1	2228:1	5	if
LEAF_NODE	2228:4	2228:4	4	(
CONDITION	2228:5	2228:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2228:5	2228:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2228:5	2228:10	6	tif -> tif_flags
LEAF_NODE	2228:5	2228:5	7	tif
LEAF_NODE	2228:8	2228:8	7	->
LEAF_NODE	2228:10	2228:10	7	tif_flags
LEAF_NODE	2228:19	2228:19	6	&
FIELD	2228:20	2228:20	6	TIFF_SWAB
LEAF_NODE	2228:20	2228:20	7	TIFF_SWAB
LEAF_NODE	2228:29	2228:29	4	)
STATEMENTS	2229:2	2229:2	4	
EXPR_STATEMENT	2229:2	2229:34	5	TIFFSwabArrayOfLong ( value , count ) ;
EXPR	2229:2	2229:2	6	TIFFSwabArrayOfLong ( value , count )
FUNCTION_CALL	2229:2	2229:33	7	TIFFSwabArrayOfLong ( value , count )
CALLEE	2229:2	2229:2	8	TIFFSwabArrayOfLong
LEAF_NODE	2229:2	2229:2	9	TIFFSwabArrayOfLong
LEAF_NODE	2229:21	2229:21	8	(
ARGUMENT	2229:22	2229:22	8	value
FIELD	2229:22	2229:22	9	value
LEAF_NODE	2229:22	2229:22	10	value
LEAF_NODE	2229:27	2229:27	8	,
ARGUMENT	2229:28	2229:28	8	count
FIELD	2229:28	2229:28	9	count
LEAF_NODE	2229:28	2229:28	10	count
LEAF_NODE	2229:33	2229:33	8	)
LEAF_NODE	2229:34	2229:34	6	;
JUMP_STATEMENT	2230:1	2230:82	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG , count , count * 4 , value ) ) ;
KEYWORD	2230:1	2230:1	4	return
LEAF_NODE	2230:1	2230:1	5	return
DESTINATION	2230:7	2230:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG , count , count * 4 , value ) )
EXPR	2230:7	2230:81	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG , count , count * 4 , value ) )
LEAF_NODE	2230:7	2230:7	6	(
FUNCTION_CALL	2230:8	2230:80	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG , count , count * 4 , value )
CALLEE	2230:8	2230:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2230:8	2230:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2230:33	2230:33	7	(
ARGUMENT	2230:34	2230:34	7	tif
FIELD	2230:34	2230:34	8	tif
LEAF_NODE	2230:34	2230:34	9	tif
LEAF_NODE	2230:37	2230:37	7	,
ARGUMENT	2230:38	2230:38	7	ndir
FIELD	2230:38	2230:38	8	ndir
LEAF_NODE	2230:38	2230:38	9	ndir
LEAF_NODE	2230:42	2230:42	7	,
ARGUMENT	2230:43	2230:43	7	dir
FIELD	2230:43	2230:43	8	dir
LEAF_NODE	2230:43	2230:43	9	dir
LEAF_NODE	2230:46	2230:46	7	,
ARGUMENT	2230:47	2230:47	7	tag
FIELD	2230:47	2230:47	8	tag
LEAF_NODE	2230:47	2230:47	9	tag
LEAF_NODE	2230:50	2230:50	7	,
ARGUMENT	2230:51	2230:51	7	TIFF_LONG
FIELD	2230:51	2230:51	8	TIFF_LONG
LEAF_NODE	2230:51	2230:51	9	TIFF_LONG
LEAF_NODE	2230:60	2230:60	7	,
ARGUMENT	2230:61	2230:61	7	count
FIELD	2230:61	2230:61	8	count
LEAF_NODE	2230:61	2230:61	9	count
LEAF_NODE	2230:66	2230:66	7	,
ARGUMENT	2230:67	2230:73	7	count * 4
FIELD	2230:67	2230:67	8	count
LEAF_NODE	2230:67	2230:67	9	count
LEAF_NODE	2230:72	2230:72	8	*
FIELD	2230:73	2230:73	8	4
LEAF_NODE	2230:73	2230:73	9	4
LEAF_NODE	2230:74	2230:74	7	,
ARGUMENT	2230:75	2230:75	7	value
FIELD	2230:75	2230:75	8	value
LEAF_NODE	2230:75	2230:75	9	value
LEAF_NODE	2230:80	2230:80	7	)
LEAF_NODE	2230:81	2230:81	6	)
LEAF_NODE	2230:82	2230:82	4	;
LEAF_NODE	2231:0	2231:0	2	}
FUNCTION_DEF	2234:0	2243:0	1	
RETURN_TYPE	2234:0	2234:7	2	static int
LEAF_NODE	2234:0	2234:0	3	static
TYPE_NAME	2234:7	2234:7	3	int
LEAF_NODE	2234:7	2234:7	4	int
FUNCTION_NAME	2235:0	2235:0	2	TIFFWriteDirectoryTagCheckedSlong
LEAF_NODE	2235:0	2235:0	3	TIFFWriteDirectoryTagCheckedSlong
PARAMETER_LIST	2235:33	2235:101	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int32 value )
LEAF_NODE	2235:33	2235:33	3	(
PARAMETER_DECL	2235:34	2235:40	3	TIFF * tif
TYPE	2235:34	2235:38	4	TIFF *
TYPE_NAME	2235:34	2235:34	5	TIFF
LEAF_NODE	2235:34	2235:34	6	TIFF
POINTER	2235:38	2235:38	5	*
LEAF_NODE	2235:38	2235:38	6	*
NAME	2235:40	2235:40	4	tif
LEAF_NODE	2235:40	2235:40	5	tif
LEAF_NODE	2235:43	2235:43	3	,
PARAMETER_DECL	2235:45	2235:53	3	uint32 * ndir
TYPE	2235:45	2235:51	4	uint32 *
TYPE_NAME	2235:45	2235:45	5	uint32
LEAF_NODE	2235:45	2235:45	6	uint32
POINTER	2235:51	2235:51	5	*
LEAF_NODE	2235:51	2235:51	6	*
NAME	2235:53	2235:53	4	ndir
LEAF_NODE	2235:53	2235:53	5	ndir
LEAF_NODE	2235:57	2235:57	3	,
PARAMETER_DECL	2235:59	2235:73	3	TIFFDirEntry * dir
TYPE	2235:59	2235:71	4	TIFFDirEntry *
TYPE_NAME	2235:59	2235:59	5	TIFFDirEntry
LEAF_NODE	2235:59	2235:59	6	TIFFDirEntry
POINTER	2235:71	2235:71	5	*
LEAF_NODE	2235:71	2235:71	6	*
NAME	2235:73	2235:73	4	dir
LEAF_NODE	2235:73	2235:73	5	dir
LEAF_NODE	2235:76	2235:76	3	,
PARAMETER_DECL	2235:78	2235:85	3	uint16 tag
TYPE	2235:78	2235:78	4	uint16
TYPE_NAME	2235:78	2235:78	5	uint16
LEAF_NODE	2235:78	2235:78	6	uint16
NAME	2235:85	2235:85	4	tag
LEAF_NODE	2235:85	2235:85	5	tag
LEAF_NODE	2235:88	2235:88	3	,
PARAMETER_DECL	2235:90	2235:96	3	int32 value
TYPE	2235:90	2235:90	4	int32
TYPE_NAME	2235:90	2235:90	5	int32
LEAF_NODE	2235:90	2235:90	6	int32
NAME	2235:96	2235:96	4	value
LEAF_NODE	2235:96	2235:96	5	value
LEAF_NODE	2235:101	2235:101	3	)
LEAF_NODE	2236:0	2236:0	2	{
STATEMENTS	2237:1	2242:1	2	
SIMPLE_DECL	2237:1	2237:8	3	int32 m ;
VAR_DECL	2237:1	2237:7	4	int32 m
TYPE	2237:1	2237:1	5	int32
TYPE_NAME	2237:1	2237:1	6	int32
LEAF_NODE	2237:1	2237:1	7	int32
NAME	2237:7	2237:7	5	m
LEAF_NODE	2237:7	2237:7	6	m
LEAF_NODE	2237:8	2237:8	4	;
EXPR_STATEMENT	2238:1	2238:25	3	assert ( sizeof ( int32 ) == 4 ) ;
EXPR	2238:1	2238:1	4	assert ( sizeof ( int32 ) == 4 )
FUNCTION_CALL	2238:1	2238:24	5	assert ( sizeof ( int32 ) == 4 )
CALLEE	2238:1	2238:1	6	assert
LEAF_NODE	2238:1	2238:1	7	assert
LEAF_NODE	2238:7	2238:7	6	(
ARGUMENT	2238:8	2238:23	6	sizeof ( int32 ) == 4
FUNCTION_CALL	2238:8	2238:20	7	sizeof ( int32 )
CALLEE	2238:8	2238:8	8	sizeof
LEAF_NODE	2238:8	2238:8	9	sizeof
LEAF_NODE	2238:14	2238:14	8	(
ARGUMENT	2238:15	2238:15	8	int32
FIELD	2238:15	2238:15	9	int32
LEAF_NODE	2238:15	2238:15	10	int32
LEAF_NODE	2238:20	2238:20	8	)
EQ_OPERATOR	2238:21	2238:21	7	==
LEAF_NODE	2238:21	2238:21	8	==
FIELD	2238:23	2238:23	7	4
LEAF_NODE	2238:23	2238:23	8	4
LEAF_NODE	2238:24	2238:24	6	)
LEAF_NODE	2238:25	2238:25	4	;
EXPR_STATEMENT	2239:1	2239:8	3	m = value ;
EXPR	2239:1	2239:1	4	m = value
ASSIGN	2239:1	2239:3	5	m = value
LVAL	2239:1	2239:1	6	m
FIELD	2239:1	2239:1	7	m
LEAF_NODE	2239:1	2239:1	8	m
ASSIGN_OP	2239:2	2239:2	6	=
LEAF_NODE	2239:2	2239:2	7	=
RVAL	2239:3	2239:3	6	value
FIELD	2239:3	2239:3	7	value
LEAF_NODE	2239:3	2239:3	8	value
LEAF_NODE	2239:8	2239:8	4	;
SELECTION	2240:1	2241:2	3	
KEYWORD	2240:1	2240:1	4	if
LEAF_NODE	2240:1	2240:1	5	if
LEAF_NODE	2240:4	2240:4	4	(
CONDITION	2240:5	2240:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2240:5	2240:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2240:5	2240:10	6	tif -> tif_flags
LEAF_NODE	2240:5	2240:5	7	tif
LEAF_NODE	2240:8	2240:8	7	->
LEAF_NODE	2240:10	2240:10	7	tif_flags
LEAF_NODE	2240:19	2240:19	6	&
FIELD	2240:20	2240:20	6	TIFF_SWAB
LEAF_NODE	2240:20	2240:20	7	TIFF_SWAB
LEAF_NODE	2240:29	2240:29	4	)
STATEMENTS	2241:2	2241:2	4	
EXPR_STATEMENT	2241:2	2241:29	5	TIFFSwabLong ( ( uint32 * ) ( & m ) ) ;
EXPR	2241:2	2241:2	6	TIFFSwabLong ( ( uint32 * ) ( & m ) )
FUNCTION_CALL	2241:2	2241:28	7	TIFFSwabLong ( ( uint32 * ) ( & m ) )
CALLEE	2241:2	2241:2	8	TIFFSwabLong
LEAF_NODE	2241:2	2241:2	9	TIFFSwabLong
LEAF_NODE	2241:14	2241:14	8	(
ARGUMENT	2241:15	2241:27	8	( uint32 * ) ( & m )
LEAF_NODE	2241:15	2241:15	9	(
TYPE_NAME	2241:16	2241:16	9	uint32
LEAF_NODE	2241:16	2241:16	10	uint32
LEAF_NODE	2241:22	2241:22	9	*
LEAF_NODE	2241:23	2241:23	9	)
LEAF_NODE	2241:24	2241:24	9	(
UNARY_EXPR	2241:25	2241:26	9	& m
UNARY_OPERATOR	2241:25	2241:25	10	&
LEAF_NODE	2241:25	2241:25	11	&
FIELD	2241:26	2241:26	10	m
LEAF_NODE	2241:26	2241:26	11	m
LEAF_NODE	2241:27	2241:27	9	)
LEAF_NODE	2241:28	2241:28	8	)
LEAF_NODE	2241:29	2241:29	6	;
JUMP_STATEMENT	2242:1	2242:70	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG , 1 , 4 , & m ) ) ;
KEYWORD	2242:1	2242:1	4	return
LEAF_NODE	2242:1	2242:1	5	return
DESTINATION	2242:7	2242:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG , 1 , 4 , & m ) )
EXPR	2242:7	2242:69	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG , 1 , 4 , & m ) )
LEAF_NODE	2242:7	2242:7	6	(
FUNCTION_CALL	2242:8	2242:68	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG , 1 , 4 , & m )
CALLEE	2242:8	2242:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2242:8	2242:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2242:33	2242:33	7	(
ARGUMENT	2242:34	2242:34	7	tif
FIELD	2242:34	2242:34	8	tif
LEAF_NODE	2242:34	2242:34	9	tif
LEAF_NODE	2242:37	2242:37	7	,
ARGUMENT	2242:38	2242:38	7	ndir
FIELD	2242:38	2242:38	8	ndir
LEAF_NODE	2242:38	2242:38	9	ndir
LEAF_NODE	2242:42	2242:42	7	,
ARGUMENT	2242:43	2242:43	7	dir
FIELD	2242:43	2242:43	8	dir
LEAF_NODE	2242:43	2242:43	9	dir
LEAF_NODE	2242:46	2242:46	7	,
ARGUMENT	2242:47	2242:47	7	tag
FIELD	2242:47	2242:47	8	tag
LEAF_NODE	2242:47	2242:47	9	tag
LEAF_NODE	2242:50	2242:50	7	,
ARGUMENT	2242:51	2242:51	7	TIFF_SLONG
FIELD	2242:51	2242:51	8	TIFF_SLONG
LEAF_NODE	2242:51	2242:51	9	TIFF_SLONG
LEAF_NODE	2242:61	2242:61	7	,
ARGUMENT	2242:62	2242:62	7	1
FIELD	2242:62	2242:62	8	1
LEAF_NODE	2242:62	2242:62	9	1
LEAF_NODE	2242:63	2242:63	7	,
ARGUMENT	2242:64	2242:64	7	4
FIELD	2242:64	2242:64	8	4
LEAF_NODE	2242:64	2242:64	9	4
LEAF_NODE	2242:65	2242:65	7	,
ARGUMENT	2242:66	2242:66	7	& m
UNARY_EXPR	2242:66	2242:67	8	& m
UNARY_OPERATOR	2242:66	2242:66	9	&
LEAF_NODE	2242:66	2242:66	10	&
FIELD	2242:67	2242:67	9	m
LEAF_NODE	2242:67	2242:67	10	m
LEAF_NODE	2242:68	2242:68	7	)
LEAF_NODE	2242:69	2242:69	6	)
LEAF_NODE	2242:70	2242:70	4	;
LEAF_NODE	2243:0	2243:0	2	}
FUNCTION_DEF	2246:0	2254:0	1	
RETURN_TYPE	2246:0	2246:7	2	static int
LEAF_NODE	2246:0	2246:0	3	static
TYPE_NAME	2246:7	2246:7	3	int
LEAF_NODE	2246:7	2246:7	4	int
FUNCTION_NAME	2247:0	2247:0	2	TIFFWriteDirectoryTagCheckedSlongArray
LEAF_NODE	2247:0	2247:0	3	TIFFWriteDirectoryTagCheckedSlongArray
PARAMETER_LIST	2247:38	2247:121	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , int32 * value )
LEAF_NODE	2247:38	2247:38	3	(
PARAMETER_DECL	2247:39	2247:45	3	TIFF * tif
TYPE	2247:39	2247:43	4	TIFF *
TYPE_NAME	2247:39	2247:39	5	TIFF
LEAF_NODE	2247:39	2247:39	6	TIFF
POINTER	2247:43	2247:43	5	*
LEAF_NODE	2247:43	2247:43	6	*
NAME	2247:45	2247:45	4	tif
LEAF_NODE	2247:45	2247:45	5	tif
LEAF_NODE	2247:48	2247:48	3	,
PARAMETER_DECL	2247:50	2247:58	3	uint32 * ndir
TYPE	2247:50	2247:56	4	uint32 *
TYPE_NAME	2247:50	2247:50	5	uint32
LEAF_NODE	2247:50	2247:50	6	uint32
POINTER	2247:56	2247:56	5	*
LEAF_NODE	2247:56	2247:56	6	*
NAME	2247:58	2247:58	4	ndir
LEAF_NODE	2247:58	2247:58	5	ndir
LEAF_NODE	2247:62	2247:62	3	,
PARAMETER_DECL	2247:64	2247:78	3	TIFFDirEntry * dir
TYPE	2247:64	2247:76	4	TIFFDirEntry *
TYPE_NAME	2247:64	2247:64	5	TIFFDirEntry
LEAF_NODE	2247:64	2247:64	6	TIFFDirEntry
POINTER	2247:76	2247:76	5	*
LEAF_NODE	2247:76	2247:76	6	*
NAME	2247:78	2247:78	4	dir
LEAF_NODE	2247:78	2247:78	5	dir
LEAF_NODE	2247:81	2247:81	3	,
PARAMETER_DECL	2247:83	2247:90	3	uint16 tag
TYPE	2247:83	2247:83	4	uint16
TYPE_NAME	2247:83	2247:83	5	uint16
LEAF_NODE	2247:83	2247:83	6	uint16
NAME	2247:90	2247:90	4	tag
LEAF_NODE	2247:90	2247:90	5	tag
LEAF_NODE	2247:93	2247:93	3	,
PARAMETER_DECL	2247:95	2247:102	3	uint32 count
TYPE	2247:95	2247:95	4	uint32
TYPE_NAME	2247:95	2247:95	5	uint32
LEAF_NODE	2247:95	2247:95	6	uint32
NAME	2247:102	2247:102	4	count
LEAF_NODE	2247:102	2247:102	5	count
LEAF_NODE	2247:107	2247:107	3	,
PARAMETER_DECL	2247:109	2247:116	3	int32 * value
TYPE	2247:109	2247:114	4	int32 *
TYPE_NAME	2247:109	2247:109	5	int32
LEAF_NODE	2247:109	2247:109	6	int32
POINTER	2247:114	2247:114	5	*
LEAF_NODE	2247:114	2247:114	6	*
NAME	2247:116	2247:116	4	value
LEAF_NODE	2247:116	2247:116	5	value
LEAF_NODE	2247:121	2247:121	3	)
LEAF_NODE	2248:0	2248:0	2	{
STATEMENTS	2249:1	2253:1	2	
EXPR_STATEMENT	2249:1	2249:25	3	assert ( count < 0x40000000 ) ;
EXPR	2249:1	2249:1	4	assert ( count < 0x40000000 )
FUNCTION_CALL	2249:1	2249:24	5	assert ( count < 0x40000000 )
CALLEE	2249:1	2249:1	6	assert
LEAF_NODE	2249:1	2249:1	7	assert
LEAF_NODE	2249:7	2249:7	6	(
ARGUMENT	2249:8	2249:14	6	count < 0x40000000
FIELD	2249:8	2249:8	7	count
LEAF_NODE	2249:8	2249:8	8	count
REL_OPERATOR	2249:13	2249:13	7	<
LEAF_NODE	2249:13	2249:13	8	<
FIELD	2249:14	2249:14	7	0x40000000
LEAF_NODE	2249:14	2249:14	8	0x40000000
LEAF_NODE	2249:24	2249:24	6	)
LEAF_NODE	2249:25	2249:25	4	;
EXPR_STATEMENT	2250:1	2250:25	3	assert ( sizeof ( int32 ) == 4 ) ;
EXPR	2250:1	2250:1	4	assert ( sizeof ( int32 ) == 4 )
FUNCTION_CALL	2250:1	2250:24	5	assert ( sizeof ( int32 ) == 4 )
CALLEE	2250:1	2250:1	6	assert
LEAF_NODE	2250:1	2250:1	7	assert
LEAF_NODE	2250:7	2250:7	6	(
ARGUMENT	2250:8	2250:23	6	sizeof ( int32 ) == 4
FUNCTION_CALL	2250:8	2250:20	7	sizeof ( int32 )
CALLEE	2250:8	2250:8	8	sizeof
LEAF_NODE	2250:8	2250:8	9	sizeof
LEAF_NODE	2250:14	2250:14	8	(
ARGUMENT	2250:15	2250:15	8	int32
FIELD	2250:15	2250:15	9	int32
LEAF_NODE	2250:15	2250:15	10	int32
LEAF_NODE	2250:20	2250:20	8	)
EQ_OPERATOR	2250:21	2250:21	7	==
LEAF_NODE	2250:21	2250:21	8	==
FIELD	2250:23	2250:23	7	4
LEAF_NODE	2250:23	2250:23	8	4
LEAF_NODE	2250:24	2250:24	6	)
LEAF_NODE	2250:25	2250:25	4	;
SELECTION	2251:1	2252:2	3	
KEYWORD	2251:1	2251:1	4	if
LEAF_NODE	2251:1	2251:1	5	if
LEAF_NODE	2251:4	2251:4	4	(
CONDITION	2251:5	2251:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2251:5	2251:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2251:5	2251:10	6	tif -> tif_flags
LEAF_NODE	2251:5	2251:5	7	tif
LEAF_NODE	2251:8	2251:8	7	->
LEAF_NODE	2251:10	2251:10	7	tif_flags
LEAF_NODE	2251:19	2251:19	6	&
FIELD	2251:20	2251:20	6	TIFF_SWAB
LEAF_NODE	2251:20	2251:20	7	TIFF_SWAB
LEAF_NODE	2251:29	2251:29	4	)
STATEMENTS	2252:2	2252:2	4	
EXPR_STATEMENT	2252:2	2252:43	5	TIFFSwabArrayOfLong ( ( uint32 * ) value , count ) ;
EXPR	2252:2	2252:2	6	TIFFSwabArrayOfLong ( ( uint32 * ) value , count )
FUNCTION_CALL	2252:2	2252:42	7	TIFFSwabArrayOfLong ( ( uint32 * ) value , count )
CALLEE	2252:2	2252:2	8	TIFFSwabArrayOfLong
LEAF_NODE	2252:2	2252:2	9	TIFFSwabArrayOfLong
LEAF_NODE	2252:21	2252:21	8	(
ARGUMENT	2252:22	2252:31	8	( uint32 * ) value
LEAF_NODE	2252:22	2252:22	9	(
TYPE_NAME	2252:23	2252:23	9	uint32
LEAF_NODE	2252:23	2252:23	10	uint32
LEAF_NODE	2252:29	2252:29	9	*
LEAF_NODE	2252:30	2252:30	9	)
FIELD	2252:31	2252:31	9	value
LEAF_NODE	2252:31	2252:31	10	value
LEAF_NODE	2252:36	2252:36	8	,
ARGUMENT	2252:37	2252:37	8	count
FIELD	2252:37	2252:37	9	count
LEAF_NODE	2252:37	2252:37	10	count
LEAF_NODE	2252:42	2252:42	8	)
LEAF_NODE	2252:43	2252:43	6	;
JUMP_STATEMENT	2253:1	2253:83	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG , count , count * 4 , value ) ) ;
KEYWORD	2253:1	2253:1	4	return
LEAF_NODE	2253:1	2253:1	5	return
DESTINATION	2253:7	2253:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG , count , count * 4 , value ) )
EXPR	2253:7	2253:82	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG , count , count * 4 , value ) )
LEAF_NODE	2253:7	2253:7	6	(
FUNCTION_CALL	2253:8	2253:81	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG , count , count * 4 , value )
CALLEE	2253:8	2253:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2253:8	2253:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2253:33	2253:33	7	(
ARGUMENT	2253:34	2253:34	7	tif
FIELD	2253:34	2253:34	8	tif
LEAF_NODE	2253:34	2253:34	9	tif
LEAF_NODE	2253:37	2253:37	7	,
ARGUMENT	2253:38	2253:38	7	ndir
FIELD	2253:38	2253:38	8	ndir
LEAF_NODE	2253:38	2253:38	9	ndir
LEAF_NODE	2253:42	2253:42	7	,
ARGUMENT	2253:43	2253:43	7	dir
FIELD	2253:43	2253:43	8	dir
LEAF_NODE	2253:43	2253:43	9	dir
LEAF_NODE	2253:46	2253:46	7	,
ARGUMENT	2253:47	2253:47	7	tag
FIELD	2253:47	2253:47	8	tag
LEAF_NODE	2253:47	2253:47	9	tag
LEAF_NODE	2253:50	2253:50	7	,
ARGUMENT	2253:51	2253:51	7	TIFF_SLONG
FIELD	2253:51	2253:51	8	TIFF_SLONG
LEAF_NODE	2253:51	2253:51	9	TIFF_SLONG
LEAF_NODE	2253:61	2253:61	7	,
ARGUMENT	2253:62	2253:62	7	count
FIELD	2253:62	2253:62	8	count
LEAF_NODE	2253:62	2253:62	9	count
LEAF_NODE	2253:67	2253:67	7	,
ARGUMENT	2253:68	2253:74	7	count * 4
FIELD	2253:68	2253:68	8	count
LEAF_NODE	2253:68	2253:68	9	count
LEAF_NODE	2253:73	2253:73	8	*
FIELD	2253:74	2253:74	8	4
LEAF_NODE	2253:74	2253:74	9	4
LEAF_NODE	2253:75	2253:75	7	,
ARGUMENT	2253:76	2253:76	7	value
FIELD	2253:76	2253:76	8	value
LEAF_NODE	2253:76	2253:76	9	value
LEAF_NODE	2253:81	2253:81	7	)
LEAF_NODE	2253:82	2253:82	6	)
LEAF_NODE	2253:83	2253:83	4	;
LEAF_NODE	2254:0	2254:0	2	}
FUNCTION_DEF	2257:0	2270:0	1	
RETURN_TYPE	2257:0	2257:7	2	static int
LEAF_NODE	2257:0	2257:0	3	static
TYPE_NAME	2257:7	2257:7	3	int
LEAF_NODE	2257:7	2257:7	4	int
FUNCTION_NAME	2258:0	2258:0	2	TIFFWriteDirectoryTagCheckedLong8
LEAF_NODE	2258:0	2258:0	3	TIFFWriteDirectoryTagCheckedLong8
PARAMETER_LIST	2258:33	2258:102	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint64 value )
LEAF_NODE	2258:33	2258:33	3	(
PARAMETER_DECL	2258:34	2258:40	3	TIFF * tif
TYPE	2258:34	2258:38	4	TIFF *
TYPE_NAME	2258:34	2258:34	5	TIFF
LEAF_NODE	2258:34	2258:34	6	TIFF
POINTER	2258:38	2258:38	5	*
LEAF_NODE	2258:38	2258:38	6	*
NAME	2258:40	2258:40	4	tif
LEAF_NODE	2258:40	2258:40	5	tif
LEAF_NODE	2258:43	2258:43	3	,
PARAMETER_DECL	2258:45	2258:53	3	uint32 * ndir
TYPE	2258:45	2258:51	4	uint32 *
TYPE_NAME	2258:45	2258:45	5	uint32
LEAF_NODE	2258:45	2258:45	6	uint32
POINTER	2258:51	2258:51	5	*
LEAF_NODE	2258:51	2258:51	6	*
NAME	2258:53	2258:53	4	ndir
LEAF_NODE	2258:53	2258:53	5	ndir
LEAF_NODE	2258:57	2258:57	3	,
PARAMETER_DECL	2258:59	2258:73	3	TIFFDirEntry * dir
TYPE	2258:59	2258:71	4	TIFFDirEntry *
TYPE_NAME	2258:59	2258:59	5	TIFFDirEntry
LEAF_NODE	2258:59	2258:59	6	TIFFDirEntry
POINTER	2258:71	2258:71	5	*
LEAF_NODE	2258:71	2258:71	6	*
NAME	2258:73	2258:73	4	dir
LEAF_NODE	2258:73	2258:73	5	dir
LEAF_NODE	2258:76	2258:76	3	,
PARAMETER_DECL	2258:78	2258:85	3	uint16 tag
TYPE	2258:78	2258:78	4	uint16
TYPE_NAME	2258:78	2258:78	5	uint16
LEAF_NODE	2258:78	2258:78	6	uint16
NAME	2258:85	2258:85	4	tag
LEAF_NODE	2258:85	2258:85	5	tag
LEAF_NODE	2258:88	2258:88	3	,
PARAMETER_DECL	2258:90	2258:97	3	uint64 value
TYPE	2258:90	2258:90	4	uint64
TYPE_NAME	2258:90	2258:90	5	uint64
LEAF_NODE	2258:90	2258:90	6	uint64
NAME	2258:97	2258:97	4	value
LEAF_NODE	2258:97	2258:97	5	value
LEAF_NODE	2258:102	2258:102	3	)
LEAF_NODE	2259:0	2259:0	2	{
STATEMENTS	2260:1	2269:1	2	
SIMPLE_DECL	2260:1	2260:9	3	uint64 m ;
VAR_DECL	2260:1	2260:8	4	uint64 m
TYPE	2260:1	2260:1	5	uint64
TYPE_NAME	2260:1	2260:1	6	uint64
LEAF_NODE	2260:1	2260:1	7	uint64
NAME	2260:8	2260:8	5	m
LEAF_NODE	2260:8	2260:8	6	m
LEAF_NODE	2260:9	2260:9	4	;
EXPR_STATEMENT	2261:1	2261:26	3	assert ( sizeof ( uint64 ) == 8 ) ;
EXPR	2261:1	2261:1	4	assert ( sizeof ( uint64 ) == 8 )
FUNCTION_CALL	2261:1	2261:25	5	assert ( sizeof ( uint64 ) == 8 )
CALLEE	2261:1	2261:1	6	assert
LEAF_NODE	2261:1	2261:1	7	assert
LEAF_NODE	2261:7	2261:7	6	(
ARGUMENT	2261:8	2261:24	6	sizeof ( uint64 ) == 8
FUNCTION_CALL	2261:8	2261:21	7	sizeof ( uint64 )
CALLEE	2261:8	2261:8	8	sizeof
LEAF_NODE	2261:8	2261:8	9	sizeof
LEAF_NODE	2261:14	2261:14	8	(
ARGUMENT	2261:15	2261:15	8	uint64
FIELD	2261:15	2261:15	9	uint64
LEAF_NODE	2261:15	2261:15	10	uint64
LEAF_NODE	2261:21	2261:21	8	)
EQ_OPERATOR	2261:22	2261:22	7	==
LEAF_NODE	2261:22	2261:22	8	==
FIELD	2261:24	2261:24	7	8
LEAF_NODE	2261:24	2261:24	8	8
LEAF_NODE	2261:25	2261:25	6	)
LEAF_NODE	2261:26	2261:26	4	;
SELECTION	2262:1	2262:38	3	
KEYWORD	2262:1	2262:1	4	if
LEAF_NODE	2262:1	2262:1	5	if
LEAF_NODE	2262:3	2262:3	4	(
CONDITION	2262:5	2262:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2262:5	2262:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2262:5	2262:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2262:5	2262:5	7	!
LEAF_NODE	2262:5	2262:5	8	!
LEAF_NODE	2262:6	2262:6	7	(
FIELD	2262:7	2262:12	7	tif -> tif_flags
LEAF_NODE	2262:7	2262:7	8	tif
LEAF_NODE	2262:10	2262:10	8	->
LEAF_NODE	2262:12	2262:12	8	tif_flags
LEAF_NODE	2262:21	2262:21	7	&
FIELD	2262:22	2262:22	7	TIFF_BIGTIFF
LEAF_NODE	2262:22	2262:22	8	TIFF_BIGTIFF
LEAF_NODE	2262:34	2262:34	7	)
LEAF_NODE	2262:36	2262:36	4	)
STATEMENTS	2262:38	2265:1	4	
LEAF_NODE	2262:38	2262:38	5	{
STATEMENTS	2263:2	2264:2	5	
EXPR_STATEMENT	2263:2	2263:107	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedLong8" , "LONG8 not allowed for ClassicTIFF" ) ;
EXPR	2263:2	2263:2	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedLong8" , "LONG8 not allowed for ClassicTIFF" )
FUNCTION_CALL	2263:2	2263:106	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedLong8" , "LONG8 not allowed for ClassicTIFF" )
CALLEE	2263:2	2263:2	9	TIFFErrorExt
LEAF_NODE	2263:2	2263:2	10	TIFFErrorExt
LEAF_NODE	2263:14	2263:14	9	(
ARGUMENT	2263:15	2263:15	9	tif -> tif_clientdata
FIELD	2263:15	2263:20	10	tif -> tif_clientdata
LEAF_NODE	2263:15	2263:15	11	tif
LEAF_NODE	2263:18	2263:18	11	->
LEAF_NODE	2263:20	2263:20	11	tif_clientdata
LEAF_NODE	2263:34	2263:34	9	,
ARGUMENT	2263:35	2263:35	9	"TIFFWriteDirectoryTagCheckedLong8"
FIELD	2263:35	2263:35	10	"TIFFWriteDirectoryTagCheckedLong8"
LEAF_NODE	2263:35	2263:35	11	"TIFFWriteDirectoryTagCheckedLong8"
LEAF_NODE	2263:70	2263:70	9	,
ARGUMENT	2263:71	2263:71	9	"LONG8 not allowed for ClassicTIFF"
FIELD	2263:71	2263:71	10	"LONG8 not allowed for ClassicTIFF"
LEAF_NODE	2263:71	2263:71	11	"LONG8 not allowed for ClassicTIFF"
LEAF_NODE	2263:106	2263:106	9	)
LEAF_NODE	2263:107	2263:107	7	;
JUMP_STATEMENT	2264:2	2264:11	6	return ( 0 ) ;
KEYWORD	2264:2	2264:2	7	return
LEAF_NODE	2264:2	2264:2	8	return
DESTINATION	2264:8	2264:8	7	( 0 )
EXPR	2264:8	2264:10	8	( 0 )
LEAF_NODE	2264:8	2264:8	9	(
FIELD	2264:9	2264:9	9	0
LEAF_NODE	2264:9	2264:9	10	0
LEAF_NODE	2264:10	2264:10	9	)
LEAF_NODE	2264:11	2264:11	7	;
LEAF_NODE	2265:1	2265:1	5	}
EXPR_STATEMENT	2266:1	2266:8	3	m = value ;
EXPR	2266:1	2266:1	4	m = value
ASSIGN	2266:1	2266:3	5	m = value
LVAL	2266:1	2266:1	6	m
FIELD	2266:1	2266:1	7	m
LEAF_NODE	2266:1	2266:1	8	m
ASSIGN_OP	2266:2	2266:2	6	=
LEAF_NODE	2266:2	2266:2	7	=
RVAL	2266:3	2266:3	6	value
FIELD	2266:3	2266:3	7	value
LEAF_NODE	2266:3	2266:3	8	value
LEAF_NODE	2266:8	2266:8	4	;
SELECTION	2267:1	2268:2	3	
KEYWORD	2267:1	2267:1	4	if
LEAF_NODE	2267:1	2267:1	5	if
LEAF_NODE	2267:4	2267:4	4	(
CONDITION	2267:5	2267:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2267:5	2267:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2267:5	2267:10	6	tif -> tif_flags
LEAF_NODE	2267:5	2267:5	7	tif
LEAF_NODE	2267:8	2267:8	7	->
LEAF_NODE	2267:10	2267:10	7	tif_flags
LEAF_NODE	2267:19	2267:19	6	&
FIELD	2267:20	2267:20	6	TIFF_SWAB
LEAF_NODE	2267:20	2267:20	7	TIFF_SWAB
LEAF_NODE	2267:29	2267:29	4	)
STATEMENTS	2268:2	2268:2	4	
EXPR_STATEMENT	2268:2	2268:19	5	TIFFSwabLong8 ( & m ) ;
EXPR	2268:2	2268:2	6	TIFFSwabLong8 ( & m )
FUNCTION_CALL	2268:2	2268:18	7	TIFFSwabLong8 ( & m )
CALLEE	2268:2	2268:2	8	TIFFSwabLong8
LEAF_NODE	2268:2	2268:2	9	TIFFSwabLong8
LEAF_NODE	2268:15	2268:15	8	(
ARGUMENT	2268:16	2268:16	8	& m
UNARY_EXPR	2268:16	2268:17	9	& m
UNARY_OPERATOR	2268:16	2268:16	10	&
LEAF_NODE	2268:16	2268:16	11	&
FIELD	2268:17	2268:17	10	m
LEAF_NODE	2268:17	2268:17	11	m
LEAF_NODE	2268:18	2268:18	8	)
LEAF_NODE	2268:19	2268:19	6	;
JUMP_STATEMENT	2269:1	2269:70	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG8 , 1 , 8 , & m ) ) ;
KEYWORD	2269:1	2269:1	4	return
LEAF_NODE	2269:1	2269:1	5	return
DESTINATION	2269:7	2269:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG8 , 1 , 8 , & m ) )
EXPR	2269:7	2269:69	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG8 , 1 , 8 , & m ) )
LEAF_NODE	2269:7	2269:7	6	(
FUNCTION_CALL	2269:8	2269:68	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG8 , 1 , 8 , & m )
CALLEE	2269:8	2269:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2269:8	2269:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2269:33	2269:33	7	(
ARGUMENT	2269:34	2269:34	7	tif
FIELD	2269:34	2269:34	8	tif
LEAF_NODE	2269:34	2269:34	9	tif
LEAF_NODE	2269:37	2269:37	7	,
ARGUMENT	2269:38	2269:38	7	ndir
FIELD	2269:38	2269:38	8	ndir
LEAF_NODE	2269:38	2269:38	9	ndir
LEAF_NODE	2269:42	2269:42	7	,
ARGUMENT	2269:43	2269:43	7	dir
FIELD	2269:43	2269:43	8	dir
LEAF_NODE	2269:43	2269:43	9	dir
LEAF_NODE	2269:46	2269:46	7	,
ARGUMENT	2269:47	2269:47	7	tag
FIELD	2269:47	2269:47	8	tag
LEAF_NODE	2269:47	2269:47	9	tag
LEAF_NODE	2269:50	2269:50	7	,
ARGUMENT	2269:51	2269:51	7	TIFF_LONG8
FIELD	2269:51	2269:51	8	TIFF_LONG8
LEAF_NODE	2269:51	2269:51	9	TIFF_LONG8
LEAF_NODE	2269:61	2269:61	7	,
ARGUMENT	2269:62	2269:62	7	1
FIELD	2269:62	2269:62	8	1
LEAF_NODE	2269:62	2269:62	9	1
LEAF_NODE	2269:63	2269:63	7	,
ARGUMENT	2269:64	2269:64	7	8
FIELD	2269:64	2269:64	8	8
LEAF_NODE	2269:64	2269:64	9	8
LEAF_NODE	2269:65	2269:65	7	,
ARGUMENT	2269:66	2269:66	7	& m
UNARY_EXPR	2269:66	2269:67	8	& m
UNARY_OPERATOR	2269:66	2269:66	9	&
LEAF_NODE	2269:66	2269:66	10	&
FIELD	2269:67	2269:67	9	m
LEAF_NODE	2269:67	2269:67	10	m
LEAF_NODE	2269:68	2269:68	7	)
LEAF_NODE	2269:69	2269:69	6	)
LEAF_NODE	2269:70	2269:70	4	;
LEAF_NODE	2270:0	2270:0	2	}
FUNCTION_DEF	2273:0	2285:0	1	
RETURN_TYPE	2273:0	2273:7	2	static int
LEAF_NODE	2273:0	2273:0	3	static
TYPE_NAME	2273:7	2273:7	3	int
LEAF_NODE	2273:7	2273:7	4	int
FUNCTION_NAME	2274:0	2274:0	2	TIFFWriteDirectoryTagCheckedLong8Array
LEAF_NODE	2274:0	2274:0	3	TIFFWriteDirectoryTagCheckedLong8Array
PARAMETER_LIST	2274:38	2274:122	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint64 * value )
LEAF_NODE	2274:38	2274:38	3	(
PARAMETER_DECL	2274:39	2274:45	3	TIFF * tif
TYPE	2274:39	2274:43	4	TIFF *
TYPE_NAME	2274:39	2274:39	5	TIFF
LEAF_NODE	2274:39	2274:39	6	TIFF
POINTER	2274:43	2274:43	5	*
LEAF_NODE	2274:43	2274:43	6	*
NAME	2274:45	2274:45	4	tif
LEAF_NODE	2274:45	2274:45	5	tif
LEAF_NODE	2274:48	2274:48	3	,
PARAMETER_DECL	2274:50	2274:58	3	uint32 * ndir
TYPE	2274:50	2274:56	4	uint32 *
TYPE_NAME	2274:50	2274:50	5	uint32
LEAF_NODE	2274:50	2274:50	6	uint32
POINTER	2274:56	2274:56	5	*
LEAF_NODE	2274:56	2274:56	6	*
NAME	2274:58	2274:58	4	ndir
LEAF_NODE	2274:58	2274:58	5	ndir
LEAF_NODE	2274:62	2274:62	3	,
PARAMETER_DECL	2274:64	2274:78	3	TIFFDirEntry * dir
TYPE	2274:64	2274:76	4	TIFFDirEntry *
TYPE_NAME	2274:64	2274:64	5	TIFFDirEntry
LEAF_NODE	2274:64	2274:64	6	TIFFDirEntry
POINTER	2274:76	2274:76	5	*
LEAF_NODE	2274:76	2274:76	6	*
NAME	2274:78	2274:78	4	dir
LEAF_NODE	2274:78	2274:78	5	dir
LEAF_NODE	2274:81	2274:81	3	,
PARAMETER_DECL	2274:83	2274:90	3	uint16 tag
TYPE	2274:83	2274:83	4	uint16
TYPE_NAME	2274:83	2274:83	5	uint16
LEAF_NODE	2274:83	2274:83	6	uint16
NAME	2274:90	2274:90	4	tag
LEAF_NODE	2274:90	2274:90	5	tag
LEAF_NODE	2274:93	2274:93	3	,
PARAMETER_DECL	2274:95	2274:102	3	uint32 count
TYPE	2274:95	2274:95	4	uint32
TYPE_NAME	2274:95	2274:95	5	uint32
LEAF_NODE	2274:95	2274:95	6	uint32
NAME	2274:102	2274:102	4	count
LEAF_NODE	2274:102	2274:102	5	count
LEAF_NODE	2274:107	2274:107	3	,
PARAMETER_DECL	2274:109	2274:117	3	uint64 * value
TYPE	2274:109	2274:115	4	uint64 *
TYPE_NAME	2274:109	2274:109	5	uint64
LEAF_NODE	2274:109	2274:109	6	uint64
POINTER	2274:115	2274:115	5	*
LEAF_NODE	2274:115	2274:115	6	*
NAME	2274:117	2274:117	4	value
LEAF_NODE	2274:117	2274:117	5	value
LEAF_NODE	2274:122	2274:122	3	)
LEAF_NODE	2275:0	2275:0	2	{
STATEMENTS	2276:1	2284:1	2	
EXPR_STATEMENT	2276:1	2276:25	3	assert ( count < 0x20000000 ) ;
EXPR	2276:1	2276:1	4	assert ( count < 0x20000000 )
FUNCTION_CALL	2276:1	2276:24	5	assert ( count < 0x20000000 )
CALLEE	2276:1	2276:1	6	assert
LEAF_NODE	2276:1	2276:1	7	assert
LEAF_NODE	2276:7	2276:7	6	(
ARGUMENT	2276:8	2276:14	6	count < 0x20000000
FIELD	2276:8	2276:8	7	count
LEAF_NODE	2276:8	2276:8	8	count
REL_OPERATOR	2276:13	2276:13	7	<
LEAF_NODE	2276:13	2276:13	8	<
FIELD	2276:14	2276:14	7	0x20000000
LEAF_NODE	2276:14	2276:14	8	0x20000000
LEAF_NODE	2276:24	2276:24	6	)
LEAF_NODE	2276:25	2276:25	4	;
EXPR_STATEMENT	2277:1	2277:26	3	assert ( sizeof ( uint64 ) == 8 ) ;
EXPR	2277:1	2277:1	4	assert ( sizeof ( uint64 ) == 8 )
FUNCTION_CALL	2277:1	2277:25	5	assert ( sizeof ( uint64 ) == 8 )
CALLEE	2277:1	2277:1	6	assert
LEAF_NODE	2277:1	2277:1	7	assert
LEAF_NODE	2277:7	2277:7	6	(
ARGUMENT	2277:8	2277:24	6	sizeof ( uint64 ) == 8
FUNCTION_CALL	2277:8	2277:21	7	sizeof ( uint64 )
CALLEE	2277:8	2277:8	8	sizeof
LEAF_NODE	2277:8	2277:8	9	sizeof
LEAF_NODE	2277:14	2277:14	8	(
ARGUMENT	2277:15	2277:15	8	uint64
FIELD	2277:15	2277:15	9	uint64
LEAF_NODE	2277:15	2277:15	10	uint64
LEAF_NODE	2277:21	2277:21	8	)
EQ_OPERATOR	2277:22	2277:22	7	==
LEAF_NODE	2277:22	2277:22	8	==
FIELD	2277:24	2277:24	7	8
LEAF_NODE	2277:24	2277:24	8	8
LEAF_NODE	2277:25	2277:25	6	)
LEAF_NODE	2277:26	2277:26	4	;
SELECTION	2278:1	2278:38	3	
KEYWORD	2278:1	2278:1	4	if
LEAF_NODE	2278:1	2278:1	5	if
LEAF_NODE	2278:3	2278:3	4	(
CONDITION	2278:5	2278:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2278:5	2278:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2278:5	2278:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2278:5	2278:5	7	!
LEAF_NODE	2278:5	2278:5	8	!
LEAF_NODE	2278:6	2278:6	7	(
FIELD	2278:7	2278:12	7	tif -> tif_flags
LEAF_NODE	2278:7	2278:7	8	tif
LEAF_NODE	2278:10	2278:10	8	->
LEAF_NODE	2278:12	2278:12	8	tif_flags
LEAF_NODE	2278:21	2278:21	7	&
FIELD	2278:22	2278:22	7	TIFF_BIGTIFF
LEAF_NODE	2278:22	2278:22	8	TIFF_BIGTIFF
LEAF_NODE	2278:34	2278:34	7	)
LEAF_NODE	2278:36	2278:36	4	)
STATEMENTS	2278:38	2281:1	4	
LEAF_NODE	2278:38	2278:38	5	{
STATEMENTS	2279:2	2280:2	5	
EXPR_STATEMENT	2279:2	2279:112	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedLong8Array" , "LONG8 not allowed for ClassicTIFF" ) ;
EXPR	2279:2	2279:2	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedLong8Array" , "LONG8 not allowed for ClassicTIFF" )
FUNCTION_CALL	2279:2	2279:111	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedLong8Array" , "LONG8 not allowed for ClassicTIFF" )
CALLEE	2279:2	2279:2	9	TIFFErrorExt
LEAF_NODE	2279:2	2279:2	10	TIFFErrorExt
LEAF_NODE	2279:14	2279:14	9	(
ARGUMENT	2279:15	2279:15	9	tif -> tif_clientdata
FIELD	2279:15	2279:20	10	tif -> tif_clientdata
LEAF_NODE	2279:15	2279:15	11	tif
LEAF_NODE	2279:18	2279:18	11	->
LEAF_NODE	2279:20	2279:20	11	tif_clientdata
LEAF_NODE	2279:34	2279:34	9	,
ARGUMENT	2279:35	2279:35	9	"TIFFWriteDirectoryTagCheckedLong8Array"
FIELD	2279:35	2279:35	10	"TIFFWriteDirectoryTagCheckedLong8Array"
LEAF_NODE	2279:35	2279:35	11	"TIFFWriteDirectoryTagCheckedLong8Array"
LEAF_NODE	2279:75	2279:75	9	,
ARGUMENT	2279:76	2279:76	9	"LONG8 not allowed for ClassicTIFF"
FIELD	2279:76	2279:76	10	"LONG8 not allowed for ClassicTIFF"
LEAF_NODE	2279:76	2279:76	11	"LONG8 not allowed for ClassicTIFF"
LEAF_NODE	2279:111	2279:111	9	)
LEAF_NODE	2279:112	2279:112	7	;
JUMP_STATEMENT	2280:2	2280:11	6	return ( 0 ) ;
KEYWORD	2280:2	2280:2	7	return
LEAF_NODE	2280:2	2280:2	8	return
DESTINATION	2280:8	2280:8	7	( 0 )
EXPR	2280:8	2280:10	8	( 0 )
LEAF_NODE	2280:8	2280:8	9	(
FIELD	2280:9	2280:9	9	0
LEAF_NODE	2280:9	2280:9	10	0
LEAF_NODE	2280:10	2280:10	9	)
LEAF_NODE	2280:11	2280:11	7	;
LEAF_NODE	2281:1	2281:1	5	}
SELECTION	2282:1	2283:2	3	
KEYWORD	2282:1	2282:1	4	if
LEAF_NODE	2282:1	2282:1	5	if
LEAF_NODE	2282:4	2282:4	4	(
CONDITION	2282:5	2282:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2282:5	2282:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2282:5	2282:10	6	tif -> tif_flags
LEAF_NODE	2282:5	2282:5	7	tif
LEAF_NODE	2282:8	2282:8	7	->
LEAF_NODE	2282:10	2282:10	7	tif_flags
LEAF_NODE	2282:19	2282:19	6	&
FIELD	2282:20	2282:20	6	TIFF_SWAB
LEAF_NODE	2282:20	2282:20	7	TIFF_SWAB
LEAF_NODE	2282:29	2282:29	4	)
STATEMENTS	2283:2	2283:2	4	
EXPR_STATEMENT	2283:2	2283:35	5	TIFFSwabArrayOfLong8 ( value , count ) ;
EXPR	2283:2	2283:2	6	TIFFSwabArrayOfLong8 ( value , count )
FUNCTION_CALL	2283:2	2283:34	7	TIFFSwabArrayOfLong8 ( value , count )
CALLEE	2283:2	2283:2	8	TIFFSwabArrayOfLong8
LEAF_NODE	2283:2	2283:2	9	TIFFSwabArrayOfLong8
LEAF_NODE	2283:22	2283:22	8	(
ARGUMENT	2283:23	2283:23	8	value
FIELD	2283:23	2283:23	9	value
LEAF_NODE	2283:23	2283:23	10	value
LEAF_NODE	2283:28	2283:28	8	,
ARGUMENT	2283:29	2283:29	8	count
FIELD	2283:29	2283:29	9	count
LEAF_NODE	2283:29	2283:29	10	count
LEAF_NODE	2283:34	2283:34	8	)
LEAF_NODE	2283:35	2283:35	6	;
JUMP_STATEMENT	2284:1	2284:83	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG8 , count , count * 8 , value ) ) ;
KEYWORD	2284:1	2284:1	4	return
LEAF_NODE	2284:1	2284:1	5	return
DESTINATION	2284:7	2284:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG8 , count , count * 8 , value ) )
EXPR	2284:7	2284:82	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG8 , count , count * 8 , value ) )
LEAF_NODE	2284:7	2284:7	6	(
FUNCTION_CALL	2284:8	2284:81	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_LONG8 , count , count * 8 , value )
CALLEE	2284:8	2284:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2284:8	2284:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2284:33	2284:33	7	(
ARGUMENT	2284:34	2284:34	7	tif
FIELD	2284:34	2284:34	8	tif
LEAF_NODE	2284:34	2284:34	9	tif
LEAF_NODE	2284:37	2284:37	7	,
ARGUMENT	2284:38	2284:38	7	ndir
FIELD	2284:38	2284:38	8	ndir
LEAF_NODE	2284:38	2284:38	9	ndir
LEAF_NODE	2284:42	2284:42	7	,
ARGUMENT	2284:43	2284:43	7	dir
FIELD	2284:43	2284:43	8	dir
LEAF_NODE	2284:43	2284:43	9	dir
LEAF_NODE	2284:46	2284:46	7	,
ARGUMENT	2284:47	2284:47	7	tag
FIELD	2284:47	2284:47	8	tag
LEAF_NODE	2284:47	2284:47	9	tag
LEAF_NODE	2284:50	2284:50	7	,
ARGUMENT	2284:51	2284:51	7	TIFF_LONG8
FIELD	2284:51	2284:51	8	TIFF_LONG8
LEAF_NODE	2284:51	2284:51	9	TIFF_LONG8
LEAF_NODE	2284:61	2284:61	7	,
ARGUMENT	2284:62	2284:62	7	count
FIELD	2284:62	2284:62	8	count
LEAF_NODE	2284:62	2284:62	9	count
LEAF_NODE	2284:67	2284:67	7	,
ARGUMENT	2284:68	2284:74	7	count * 8
FIELD	2284:68	2284:68	8	count
LEAF_NODE	2284:68	2284:68	9	count
LEAF_NODE	2284:73	2284:73	8	*
FIELD	2284:74	2284:74	8	8
LEAF_NODE	2284:74	2284:74	9	8
LEAF_NODE	2284:75	2284:75	7	,
ARGUMENT	2284:76	2284:76	7	value
FIELD	2284:76	2284:76	8	value
LEAF_NODE	2284:76	2284:76	9	value
LEAF_NODE	2284:81	2284:81	7	)
LEAF_NODE	2284:82	2284:82	6	)
LEAF_NODE	2284:83	2284:83	4	;
LEAF_NODE	2285:0	2285:0	2	}
FUNCTION_DEF	2288:0	2301:0	1	
RETURN_TYPE	2288:0	2288:7	2	static int
LEAF_NODE	2288:0	2288:0	3	static
TYPE_NAME	2288:7	2288:7	3	int
LEAF_NODE	2288:7	2288:7	4	int
FUNCTION_NAME	2289:0	2289:0	2	TIFFWriteDirectoryTagCheckedSlong8
LEAF_NODE	2289:0	2289:0	3	TIFFWriteDirectoryTagCheckedSlong8
PARAMETER_LIST	2289:34	2289:102	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , int64 value )
LEAF_NODE	2289:34	2289:34	3	(
PARAMETER_DECL	2289:35	2289:41	3	TIFF * tif
TYPE	2289:35	2289:39	4	TIFF *
TYPE_NAME	2289:35	2289:35	5	TIFF
LEAF_NODE	2289:35	2289:35	6	TIFF
POINTER	2289:39	2289:39	5	*
LEAF_NODE	2289:39	2289:39	6	*
NAME	2289:41	2289:41	4	tif
LEAF_NODE	2289:41	2289:41	5	tif
LEAF_NODE	2289:44	2289:44	3	,
PARAMETER_DECL	2289:46	2289:54	3	uint32 * ndir
TYPE	2289:46	2289:52	4	uint32 *
TYPE_NAME	2289:46	2289:46	5	uint32
LEAF_NODE	2289:46	2289:46	6	uint32
POINTER	2289:52	2289:52	5	*
LEAF_NODE	2289:52	2289:52	6	*
NAME	2289:54	2289:54	4	ndir
LEAF_NODE	2289:54	2289:54	5	ndir
LEAF_NODE	2289:58	2289:58	3	,
PARAMETER_DECL	2289:60	2289:74	3	TIFFDirEntry * dir
TYPE	2289:60	2289:72	4	TIFFDirEntry *
TYPE_NAME	2289:60	2289:60	5	TIFFDirEntry
LEAF_NODE	2289:60	2289:60	6	TIFFDirEntry
POINTER	2289:72	2289:72	5	*
LEAF_NODE	2289:72	2289:72	6	*
NAME	2289:74	2289:74	4	dir
LEAF_NODE	2289:74	2289:74	5	dir
LEAF_NODE	2289:77	2289:77	3	,
PARAMETER_DECL	2289:79	2289:86	3	uint16 tag
TYPE	2289:79	2289:79	4	uint16
TYPE_NAME	2289:79	2289:79	5	uint16
LEAF_NODE	2289:79	2289:79	6	uint16
NAME	2289:86	2289:86	4	tag
LEAF_NODE	2289:86	2289:86	5	tag
LEAF_NODE	2289:89	2289:89	3	,
PARAMETER_DECL	2289:91	2289:97	3	int64 value
TYPE	2289:91	2289:91	4	int64
TYPE_NAME	2289:91	2289:91	5	int64
LEAF_NODE	2289:91	2289:91	6	int64
NAME	2289:97	2289:97	4	value
LEAF_NODE	2289:97	2289:97	5	value
LEAF_NODE	2289:102	2289:102	3	)
LEAF_NODE	2290:0	2290:0	2	{
STATEMENTS	2291:1	2300:1	2	
SIMPLE_DECL	2291:1	2291:8	3	int64 m ;
VAR_DECL	2291:1	2291:7	4	int64 m
TYPE	2291:1	2291:1	5	int64
TYPE_NAME	2291:1	2291:1	6	int64
LEAF_NODE	2291:1	2291:1	7	int64
NAME	2291:7	2291:7	5	m
LEAF_NODE	2291:7	2291:7	6	m
LEAF_NODE	2291:8	2291:8	4	;
EXPR_STATEMENT	2292:1	2292:25	3	assert ( sizeof ( int64 ) == 8 ) ;
EXPR	2292:1	2292:1	4	assert ( sizeof ( int64 ) == 8 )
FUNCTION_CALL	2292:1	2292:24	5	assert ( sizeof ( int64 ) == 8 )
CALLEE	2292:1	2292:1	6	assert
LEAF_NODE	2292:1	2292:1	7	assert
LEAF_NODE	2292:7	2292:7	6	(
ARGUMENT	2292:8	2292:23	6	sizeof ( int64 ) == 8
FUNCTION_CALL	2292:8	2292:20	7	sizeof ( int64 )
CALLEE	2292:8	2292:8	8	sizeof
LEAF_NODE	2292:8	2292:8	9	sizeof
LEAF_NODE	2292:14	2292:14	8	(
ARGUMENT	2292:15	2292:15	8	int64
FIELD	2292:15	2292:15	9	int64
LEAF_NODE	2292:15	2292:15	10	int64
LEAF_NODE	2292:20	2292:20	8	)
EQ_OPERATOR	2292:21	2292:21	7	==
LEAF_NODE	2292:21	2292:21	8	==
FIELD	2292:23	2292:23	7	8
LEAF_NODE	2292:23	2292:23	8	8
LEAF_NODE	2292:24	2292:24	6	)
LEAF_NODE	2292:25	2292:25	4	;
SELECTION	2293:1	2293:38	3	
KEYWORD	2293:1	2293:1	4	if
LEAF_NODE	2293:1	2293:1	5	if
LEAF_NODE	2293:3	2293:3	4	(
CONDITION	2293:5	2293:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2293:5	2293:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2293:5	2293:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2293:5	2293:5	7	!
LEAF_NODE	2293:5	2293:5	8	!
LEAF_NODE	2293:6	2293:6	7	(
FIELD	2293:7	2293:12	7	tif -> tif_flags
LEAF_NODE	2293:7	2293:7	8	tif
LEAF_NODE	2293:10	2293:10	8	->
LEAF_NODE	2293:12	2293:12	8	tif_flags
LEAF_NODE	2293:21	2293:21	7	&
FIELD	2293:22	2293:22	7	TIFF_BIGTIFF
LEAF_NODE	2293:22	2293:22	8	TIFF_BIGTIFF
LEAF_NODE	2293:34	2293:34	7	)
LEAF_NODE	2293:36	2293:36	4	)
STATEMENTS	2293:38	2296:1	4	
LEAF_NODE	2293:38	2293:38	5	{
STATEMENTS	2294:2	2295:2	5	
EXPR_STATEMENT	2294:2	2294:109	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedSlong8" , "SLONG8 not allowed for ClassicTIFF" ) ;
EXPR	2294:2	2294:2	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedSlong8" , "SLONG8 not allowed for ClassicTIFF" )
FUNCTION_CALL	2294:2	2294:108	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedSlong8" , "SLONG8 not allowed for ClassicTIFF" )
CALLEE	2294:2	2294:2	9	TIFFErrorExt
LEAF_NODE	2294:2	2294:2	10	TIFFErrorExt
LEAF_NODE	2294:14	2294:14	9	(
ARGUMENT	2294:15	2294:15	9	tif -> tif_clientdata
FIELD	2294:15	2294:20	10	tif -> tif_clientdata
LEAF_NODE	2294:15	2294:15	11	tif
LEAF_NODE	2294:18	2294:18	11	->
LEAF_NODE	2294:20	2294:20	11	tif_clientdata
LEAF_NODE	2294:34	2294:34	9	,
ARGUMENT	2294:35	2294:35	9	"TIFFWriteDirectoryTagCheckedSlong8"
FIELD	2294:35	2294:35	10	"TIFFWriteDirectoryTagCheckedSlong8"
LEAF_NODE	2294:35	2294:35	11	"TIFFWriteDirectoryTagCheckedSlong8"
LEAF_NODE	2294:71	2294:71	9	,
ARGUMENT	2294:72	2294:72	9	"SLONG8 not allowed for ClassicTIFF"
FIELD	2294:72	2294:72	10	"SLONG8 not allowed for ClassicTIFF"
LEAF_NODE	2294:72	2294:72	11	"SLONG8 not allowed for ClassicTIFF"
LEAF_NODE	2294:108	2294:108	9	)
LEAF_NODE	2294:109	2294:109	7	;
JUMP_STATEMENT	2295:2	2295:11	6	return ( 0 ) ;
KEYWORD	2295:2	2295:2	7	return
LEAF_NODE	2295:2	2295:2	8	return
DESTINATION	2295:8	2295:8	7	( 0 )
EXPR	2295:8	2295:10	8	( 0 )
LEAF_NODE	2295:8	2295:8	9	(
FIELD	2295:9	2295:9	9	0
LEAF_NODE	2295:9	2295:9	10	0
LEAF_NODE	2295:10	2295:10	9	)
LEAF_NODE	2295:11	2295:11	7	;
LEAF_NODE	2296:1	2296:1	5	}
EXPR_STATEMENT	2297:1	2297:8	3	m = value ;
EXPR	2297:1	2297:1	4	m = value
ASSIGN	2297:1	2297:3	5	m = value
LVAL	2297:1	2297:1	6	m
FIELD	2297:1	2297:1	7	m
LEAF_NODE	2297:1	2297:1	8	m
ASSIGN_OP	2297:2	2297:2	6	=
LEAF_NODE	2297:2	2297:2	7	=
RVAL	2297:3	2297:3	6	value
FIELD	2297:3	2297:3	7	value
LEAF_NODE	2297:3	2297:3	8	value
LEAF_NODE	2297:8	2297:8	4	;
SELECTION	2298:1	2299:2	3	
KEYWORD	2298:1	2298:1	4	if
LEAF_NODE	2298:1	2298:1	5	if
LEAF_NODE	2298:4	2298:4	4	(
CONDITION	2298:5	2298:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2298:5	2298:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2298:5	2298:10	6	tif -> tif_flags
LEAF_NODE	2298:5	2298:5	7	tif
LEAF_NODE	2298:8	2298:8	7	->
LEAF_NODE	2298:10	2298:10	7	tif_flags
LEAF_NODE	2298:19	2298:19	6	&
FIELD	2298:20	2298:20	6	TIFF_SWAB
LEAF_NODE	2298:20	2298:20	7	TIFF_SWAB
LEAF_NODE	2298:29	2298:29	4	)
STATEMENTS	2299:2	2299:2	4	
EXPR_STATEMENT	2299:2	2299:30	5	TIFFSwabLong8 ( ( uint64 * ) ( & m ) ) ;
EXPR	2299:2	2299:2	6	TIFFSwabLong8 ( ( uint64 * ) ( & m ) )
FUNCTION_CALL	2299:2	2299:29	7	TIFFSwabLong8 ( ( uint64 * ) ( & m ) )
CALLEE	2299:2	2299:2	8	TIFFSwabLong8
LEAF_NODE	2299:2	2299:2	9	TIFFSwabLong8
LEAF_NODE	2299:15	2299:15	8	(
ARGUMENT	2299:16	2299:28	8	( uint64 * ) ( & m )
LEAF_NODE	2299:16	2299:16	9	(
TYPE_NAME	2299:17	2299:17	9	uint64
LEAF_NODE	2299:17	2299:17	10	uint64
LEAF_NODE	2299:23	2299:23	9	*
LEAF_NODE	2299:24	2299:24	9	)
LEAF_NODE	2299:25	2299:25	9	(
UNARY_EXPR	2299:26	2299:27	9	& m
UNARY_OPERATOR	2299:26	2299:26	10	&
LEAF_NODE	2299:26	2299:26	11	&
FIELD	2299:27	2299:27	10	m
LEAF_NODE	2299:27	2299:27	11	m
LEAF_NODE	2299:28	2299:28	9	)
LEAF_NODE	2299:29	2299:29	8	)
LEAF_NODE	2299:30	2299:30	6	;
JUMP_STATEMENT	2300:1	2300:71	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG8 , 1 , 8 , & m ) ) ;
KEYWORD	2300:1	2300:1	4	return
LEAF_NODE	2300:1	2300:1	5	return
DESTINATION	2300:7	2300:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG8 , 1 , 8 , & m ) )
EXPR	2300:7	2300:70	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG8 , 1 , 8 , & m ) )
LEAF_NODE	2300:7	2300:7	6	(
FUNCTION_CALL	2300:8	2300:69	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG8 , 1 , 8 , & m )
CALLEE	2300:8	2300:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2300:8	2300:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2300:33	2300:33	7	(
ARGUMENT	2300:34	2300:34	7	tif
FIELD	2300:34	2300:34	8	tif
LEAF_NODE	2300:34	2300:34	9	tif
LEAF_NODE	2300:37	2300:37	7	,
ARGUMENT	2300:38	2300:38	7	ndir
FIELD	2300:38	2300:38	8	ndir
LEAF_NODE	2300:38	2300:38	9	ndir
LEAF_NODE	2300:42	2300:42	7	,
ARGUMENT	2300:43	2300:43	7	dir
FIELD	2300:43	2300:43	8	dir
LEAF_NODE	2300:43	2300:43	9	dir
LEAF_NODE	2300:46	2300:46	7	,
ARGUMENT	2300:47	2300:47	7	tag
FIELD	2300:47	2300:47	8	tag
LEAF_NODE	2300:47	2300:47	9	tag
LEAF_NODE	2300:50	2300:50	7	,
ARGUMENT	2300:51	2300:51	7	TIFF_SLONG8
FIELD	2300:51	2300:51	8	TIFF_SLONG8
LEAF_NODE	2300:51	2300:51	9	TIFF_SLONG8
LEAF_NODE	2300:62	2300:62	7	,
ARGUMENT	2300:63	2300:63	7	1
FIELD	2300:63	2300:63	8	1
LEAF_NODE	2300:63	2300:63	9	1
LEAF_NODE	2300:64	2300:64	7	,
ARGUMENT	2300:65	2300:65	7	8
FIELD	2300:65	2300:65	8	8
LEAF_NODE	2300:65	2300:65	9	8
LEAF_NODE	2300:66	2300:66	7	,
ARGUMENT	2300:67	2300:67	7	& m
UNARY_EXPR	2300:67	2300:68	8	& m
UNARY_OPERATOR	2300:67	2300:67	9	&
LEAF_NODE	2300:67	2300:67	10	&
FIELD	2300:68	2300:68	9	m
LEAF_NODE	2300:68	2300:68	10	m
LEAF_NODE	2300:69	2300:69	7	)
LEAF_NODE	2300:70	2300:70	6	)
LEAF_NODE	2300:71	2300:71	4	;
LEAF_NODE	2301:0	2301:0	2	}
FUNCTION_DEF	2304:0	2316:0	1	
RETURN_TYPE	2304:0	2304:7	2	static int
LEAF_NODE	2304:0	2304:0	3	static
TYPE_NAME	2304:7	2304:7	3	int
LEAF_NODE	2304:7	2304:7	4	int
FUNCTION_NAME	2305:0	2305:0	2	TIFFWriteDirectoryTagCheckedSlong8Array
LEAF_NODE	2305:0	2305:0	3	TIFFWriteDirectoryTagCheckedSlong8Array
PARAMETER_LIST	2305:39	2305:122	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , int64 * value )
LEAF_NODE	2305:39	2305:39	3	(
PARAMETER_DECL	2305:40	2305:46	3	TIFF * tif
TYPE	2305:40	2305:44	4	TIFF *
TYPE_NAME	2305:40	2305:40	5	TIFF
LEAF_NODE	2305:40	2305:40	6	TIFF
POINTER	2305:44	2305:44	5	*
LEAF_NODE	2305:44	2305:44	6	*
NAME	2305:46	2305:46	4	tif
LEAF_NODE	2305:46	2305:46	5	tif
LEAF_NODE	2305:49	2305:49	3	,
PARAMETER_DECL	2305:51	2305:59	3	uint32 * ndir
TYPE	2305:51	2305:57	4	uint32 *
TYPE_NAME	2305:51	2305:51	5	uint32
LEAF_NODE	2305:51	2305:51	6	uint32
POINTER	2305:57	2305:57	5	*
LEAF_NODE	2305:57	2305:57	6	*
NAME	2305:59	2305:59	4	ndir
LEAF_NODE	2305:59	2305:59	5	ndir
LEAF_NODE	2305:63	2305:63	3	,
PARAMETER_DECL	2305:65	2305:79	3	TIFFDirEntry * dir
TYPE	2305:65	2305:77	4	TIFFDirEntry *
TYPE_NAME	2305:65	2305:65	5	TIFFDirEntry
LEAF_NODE	2305:65	2305:65	6	TIFFDirEntry
POINTER	2305:77	2305:77	5	*
LEAF_NODE	2305:77	2305:77	6	*
NAME	2305:79	2305:79	4	dir
LEAF_NODE	2305:79	2305:79	5	dir
LEAF_NODE	2305:82	2305:82	3	,
PARAMETER_DECL	2305:84	2305:91	3	uint16 tag
TYPE	2305:84	2305:84	4	uint16
TYPE_NAME	2305:84	2305:84	5	uint16
LEAF_NODE	2305:84	2305:84	6	uint16
NAME	2305:91	2305:91	4	tag
LEAF_NODE	2305:91	2305:91	5	tag
LEAF_NODE	2305:94	2305:94	3	,
PARAMETER_DECL	2305:96	2305:103	3	uint32 count
TYPE	2305:96	2305:96	4	uint32
TYPE_NAME	2305:96	2305:96	5	uint32
LEAF_NODE	2305:96	2305:96	6	uint32
NAME	2305:103	2305:103	4	count
LEAF_NODE	2305:103	2305:103	5	count
LEAF_NODE	2305:108	2305:108	3	,
PARAMETER_DECL	2305:110	2305:117	3	int64 * value
TYPE	2305:110	2305:115	4	int64 *
TYPE_NAME	2305:110	2305:110	5	int64
LEAF_NODE	2305:110	2305:110	6	int64
POINTER	2305:115	2305:115	5	*
LEAF_NODE	2305:115	2305:115	6	*
NAME	2305:117	2305:117	4	value
LEAF_NODE	2305:117	2305:117	5	value
LEAF_NODE	2305:122	2305:122	3	)
LEAF_NODE	2306:0	2306:0	2	{
STATEMENTS	2307:1	2315:1	2	
EXPR_STATEMENT	2307:1	2307:25	3	assert ( count < 0x20000000 ) ;
EXPR	2307:1	2307:1	4	assert ( count < 0x20000000 )
FUNCTION_CALL	2307:1	2307:24	5	assert ( count < 0x20000000 )
CALLEE	2307:1	2307:1	6	assert
LEAF_NODE	2307:1	2307:1	7	assert
LEAF_NODE	2307:7	2307:7	6	(
ARGUMENT	2307:8	2307:14	6	count < 0x20000000
FIELD	2307:8	2307:8	7	count
LEAF_NODE	2307:8	2307:8	8	count
REL_OPERATOR	2307:13	2307:13	7	<
LEAF_NODE	2307:13	2307:13	8	<
FIELD	2307:14	2307:14	7	0x20000000
LEAF_NODE	2307:14	2307:14	8	0x20000000
LEAF_NODE	2307:24	2307:24	6	)
LEAF_NODE	2307:25	2307:25	4	;
EXPR_STATEMENT	2308:1	2308:25	3	assert ( sizeof ( int64 ) == 8 ) ;
EXPR	2308:1	2308:1	4	assert ( sizeof ( int64 ) == 8 )
FUNCTION_CALL	2308:1	2308:24	5	assert ( sizeof ( int64 ) == 8 )
CALLEE	2308:1	2308:1	6	assert
LEAF_NODE	2308:1	2308:1	7	assert
LEAF_NODE	2308:7	2308:7	6	(
ARGUMENT	2308:8	2308:23	6	sizeof ( int64 ) == 8
FUNCTION_CALL	2308:8	2308:20	7	sizeof ( int64 )
CALLEE	2308:8	2308:8	8	sizeof
LEAF_NODE	2308:8	2308:8	9	sizeof
LEAF_NODE	2308:14	2308:14	8	(
ARGUMENT	2308:15	2308:15	8	int64
FIELD	2308:15	2308:15	9	int64
LEAF_NODE	2308:15	2308:15	10	int64
LEAF_NODE	2308:20	2308:20	8	)
EQ_OPERATOR	2308:21	2308:21	7	==
LEAF_NODE	2308:21	2308:21	8	==
FIELD	2308:23	2308:23	7	8
LEAF_NODE	2308:23	2308:23	8	8
LEAF_NODE	2308:24	2308:24	6	)
LEAF_NODE	2308:25	2308:25	4	;
SELECTION	2309:1	2309:38	3	
KEYWORD	2309:1	2309:1	4	if
LEAF_NODE	2309:1	2309:1	5	if
LEAF_NODE	2309:3	2309:3	4	(
CONDITION	2309:5	2309:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2309:5	2309:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2309:5	2309:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2309:5	2309:5	7	!
LEAF_NODE	2309:5	2309:5	8	!
LEAF_NODE	2309:6	2309:6	7	(
FIELD	2309:7	2309:12	7	tif -> tif_flags
LEAF_NODE	2309:7	2309:7	8	tif
LEAF_NODE	2309:10	2309:10	8	->
LEAF_NODE	2309:12	2309:12	8	tif_flags
LEAF_NODE	2309:21	2309:21	7	&
FIELD	2309:22	2309:22	7	TIFF_BIGTIFF
LEAF_NODE	2309:22	2309:22	8	TIFF_BIGTIFF
LEAF_NODE	2309:34	2309:34	7	)
LEAF_NODE	2309:36	2309:36	4	)
STATEMENTS	2309:38	2312:1	4	
LEAF_NODE	2309:38	2309:38	5	{
STATEMENTS	2310:2	2311:2	5	
EXPR_STATEMENT	2310:2	2310:114	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedSlong8Array" , "SLONG8 not allowed for ClassicTIFF" ) ;
EXPR	2310:2	2310:2	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedSlong8Array" , "SLONG8 not allowed for ClassicTIFF" )
FUNCTION_CALL	2310:2	2310:113	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFWriteDirectoryTagCheckedSlong8Array" , "SLONG8 not allowed for ClassicTIFF" )
CALLEE	2310:2	2310:2	9	TIFFErrorExt
LEAF_NODE	2310:2	2310:2	10	TIFFErrorExt
LEAF_NODE	2310:14	2310:14	9	(
ARGUMENT	2310:15	2310:15	9	tif -> tif_clientdata
FIELD	2310:15	2310:20	10	tif -> tif_clientdata
LEAF_NODE	2310:15	2310:15	11	tif
LEAF_NODE	2310:18	2310:18	11	->
LEAF_NODE	2310:20	2310:20	11	tif_clientdata
LEAF_NODE	2310:34	2310:34	9	,
ARGUMENT	2310:35	2310:35	9	"TIFFWriteDirectoryTagCheckedSlong8Array"
FIELD	2310:35	2310:35	10	"TIFFWriteDirectoryTagCheckedSlong8Array"
LEAF_NODE	2310:35	2310:35	11	"TIFFWriteDirectoryTagCheckedSlong8Array"
LEAF_NODE	2310:76	2310:76	9	,
ARGUMENT	2310:77	2310:77	9	"SLONG8 not allowed for ClassicTIFF"
FIELD	2310:77	2310:77	10	"SLONG8 not allowed for ClassicTIFF"
LEAF_NODE	2310:77	2310:77	11	"SLONG8 not allowed for ClassicTIFF"
LEAF_NODE	2310:113	2310:113	9	)
LEAF_NODE	2310:114	2310:114	7	;
JUMP_STATEMENT	2311:2	2311:11	6	return ( 0 ) ;
KEYWORD	2311:2	2311:2	7	return
LEAF_NODE	2311:2	2311:2	8	return
DESTINATION	2311:8	2311:8	7	( 0 )
EXPR	2311:8	2311:10	8	( 0 )
LEAF_NODE	2311:8	2311:8	9	(
FIELD	2311:9	2311:9	9	0
LEAF_NODE	2311:9	2311:9	10	0
LEAF_NODE	2311:10	2311:10	9	)
LEAF_NODE	2311:11	2311:11	7	;
LEAF_NODE	2312:1	2312:1	5	}
SELECTION	2313:1	2314:2	3	
KEYWORD	2313:1	2313:1	4	if
LEAF_NODE	2313:1	2313:1	5	if
LEAF_NODE	2313:4	2313:4	4	(
CONDITION	2313:5	2313:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2313:5	2313:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2313:5	2313:10	6	tif -> tif_flags
LEAF_NODE	2313:5	2313:5	7	tif
LEAF_NODE	2313:8	2313:8	7	->
LEAF_NODE	2313:10	2313:10	7	tif_flags
LEAF_NODE	2313:19	2313:19	6	&
FIELD	2313:20	2313:20	6	TIFF_SWAB
LEAF_NODE	2313:20	2313:20	7	TIFF_SWAB
LEAF_NODE	2313:29	2313:29	4	)
STATEMENTS	2314:2	2314:2	4	
EXPR_STATEMENT	2314:2	2314:44	5	TIFFSwabArrayOfLong8 ( ( uint64 * ) value , count ) ;
EXPR	2314:2	2314:2	6	TIFFSwabArrayOfLong8 ( ( uint64 * ) value , count )
FUNCTION_CALL	2314:2	2314:43	7	TIFFSwabArrayOfLong8 ( ( uint64 * ) value , count )
CALLEE	2314:2	2314:2	8	TIFFSwabArrayOfLong8
LEAF_NODE	2314:2	2314:2	9	TIFFSwabArrayOfLong8
LEAF_NODE	2314:22	2314:22	8	(
ARGUMENT	2314:23	2314:32	8	( uint64 * ) value
LEAF_NODE	2314:23	2314:23	9	(
TYPE_NAME	2314:24	2314:24	9	uint64
LEAF_NODE	2314:24	2314:24	10	uint64
LEAF_NODE	2314:30	2314:30	9	*
LEAF_NODE	2314:31	2314:31	9	)
FIELD	2314:32	2314:32	9	value
LEAF_NODE	2314:32	2314:32	10	value
LEAF_NODE	2314:37	2314:37	8	,
ARGUMENT	2314:38	2314:38	8	count
FIELD	2314:38	2314:38	9	count
LEAF_NODE	2314:38	2314:38	10	count
LEAF_NODE	2314:43	2314:43	8	)
LEAF_NODE	2314:44	2314:44	6	;
JUMP_STATEMENT	2315:1	2315:84	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG8 , count , count * 8 , value ) ) ;
KEYWORD	2315:1	2315:1	4	return
LEAF_NODE	2315:1	2315:1	5	return
DESTINATION	2315:7	2315:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG8 , count , count * 8 , value ) )
EXPR	2315:7	2315:83	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG8 , count , count * 8 , value ) )
LEAF_NODE	2315:7	2315:7	6	(
FUNCTION_CALL	2315:8	2315:82	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SLONG8 , count , count * 8 , value )
CALLEE	2315:8	2315:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2315:8	2315:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2315:33	2315:33	7	(
ARGUMENT	2315:34	2315:34	7	tif
FIELD	2315:34	2315:34	8	tif
LEAF_NODE	2315:34	2315:34	9	tif
LEAF_NODE	2315:37	2315:37	7	,
ARGUMENT	2315:38	2315:38	7	ndir
FIELD	2315:38	2315:38	8	ndir
LEAF_NODE	2315:38	2315:38	9	ndir
LEAF_NODE	2315:42	2315:42	7	,
ARGUMENT	2315:43	2315:43	7	dir
FIELD	2315:43	2315:43	8	dir
LEAF_NODE	2315:43	2315:43	9	dir
LEAF_NODE	2315:46	2315:46	7	,
ARGUMENT	2315:47	2315:47	7	tag
FIELD	2315:47	2315:47	8	tag
LEAF_NODE	2315:47	2315:47	9	tag
LEAF_NODE	2315:50	2315:50	7	,
ARGUMENT	2315:51	2315:51	7	TIFF_SLONG8
FIELD	2315:51	2315:51	8	TIFF_SLONG8
LEAF_NODE	2315:51	2315:51	9	TIFF_SLONG8
LEAF_NODE	2315:62	2315:62	7	,
ARGUMENT	2315:63	2315:63	7	count
FIELD	2315:63	2315:63	8	count
LEAF_NODE	2315:63	2315:63	9	count
LEAF_NODE	2315:68	2315:68	7	,
ARGUMENT	2315:69	2315:75	7	count * 8
FIELD	2315:69	2315:69	8	count
LEAF_NODE	2315:69	2315:69	9	count
LEAF_NODE	2315:74	2315:74	8	*
FIELD	2315:75	2315:75	8	8
LEAF_NODE	2315:75	2315:75	9	8
LEAF_NODE	2315:76	2315:76	7	,
ARGUMENT	2315:77	2315:77	7	value
FIELD	2315:77	2315:77	8	value
LEAF_NODE	2315:77	2315:77	9	value
LEAF_NODE	2315:82	2315:82	7	)
LEAF_NODE	2315:83	2315:83	6	)
LEAF_NODE	2315:84	2315:84	4	;
LEAF_NODE	2316:0	2316:0	2	}
FUNCTION_DEF	2318:0	2360:0	1	
RETURN_TYPE	2318:0	2318:7	2	static int
LEAF_NODE	2318:0	2318:0	3	static
TYPE_NAME	2318:7	2318:7	3	int
LEAF_NODE	2318:7	2318:7	4	int
FUNCTION_NAME	2319:0	2319:0	2	TIFFWriteDirectoryTagCheckedRational
LEAF_NODE	2319:0	2319:0	3	TIFFWriteDirectoryTagCheckedRational
PARAMETER_LIST	2319:36	2319:105	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , double value )
LEAF_NODE	2319:36	2319:36	3	(
PARAMETER_DECL	2319:37	2319:43	3	TIFF * tif
TYPE	2319:37	2319:41	4	TIFF *
TYPE_NAME	2319:37	2319:37	5	TIFF
LEAF_NODE	2319:37	2319:37	6	TIFF
POINTER	2319:41	2319:41	5	*
LEAF_NODE	2319:41	2319:41	6	*
NAME	2319:43	2319:43	4	tif
LEAF_NODE	2319:43	2319:43	5	tif
LEAF_NODE	2319:46	2319:46	3	,
PARAMETER_DECL	2319:48	2319:56	3	uint32 * ndir
TYPE	2319:48	2319:54	4	uint32 *
TYPE_NAME	2319:48	2319:48	5	uint32
LEAF_NODE	2319:48	2319:48	6	uint32
POINTER	2319:54	2319:54	5	*
LEAF_NODE	2319:54	2319:54	6	*
NAME	2319:56	2319:56	4	ndir
LEAF_NODE	2319:56	2319:56	5	ndir
LEAF_NODE	2319:60	2319:60	3	,
PARAMETER_DECL	2319:62	2319:76	3	TIFFDirEntry * dir
TYPE	2319:62	2319:74	4	TIFFDirEntry *
TYPE_NAME	2319:62	2319:62	5	TIFFDirEntry
LEAF_NODE	2319:62	2319:62	6	TIFFDirEntry
POINTER	2319:74	2319:74	5	*
LEAF_NODE	2319:74	2319:74	6	*
NAME	2319:76	2319:76	4	dir
LEAF_NODE	2319:76	2319:76	5	dir
LEAF_NODE	2319:79	2319:79	3	,
PARAMETER_DECL	2319:81	2319:88	3	uint16 tag
TYPE	2319:81	2319:81	4	uint16
TYPE_NAME	2319:81	2319:81	5	uint16
LEAF_NODE	2319:81	2319:81	6	uint16
NAME	2319:88	2319:88	4	tag
LEAF_NODE	2319:88	2319:88	5	tag
LEAF_NODE	2319:91	2319:91	3	,
PARAMETER_DECL	2319:93	2319:100	3	double value
TYPE	2319:93	2319:93	4	double
TYPE_NAME	2319:93	2319:93	5	double
LEAF_NODE	2319:93	2319:93	6	double
NAME	2319:100	2319:100	4	value
LEAF_NODE	2319:100	2319:100	5	value
LEAF_NODE	2319:105	2319:105	3	)
LEAF_NODE	2320:0	2320:0	2	{
STATEMENTS	2321:8	2359:1	2	
LEAF_NODE	2321:8	2321:8	3	static
SIMPLE_DECL	2321:15	2321:75	3	const char [ ] module ; module = "TIFFWriteDirectoryTagCheckedRational" ;
VAR_DECL	2321:15	2321:26	4	const char [ ] module ; module = "TIFFWriteDirectoryTagCheckedRational"
TYPE	2321:15	2321:32	5	const char [ ]
TYPE_NAME	2321:15	2321:21	6	const char
LEAF_NODE	2321:15	2321:15	7	const
LEAF_NODE	2321:21	2321:21	7	char
TYPE_SUFFIX	2321:32	2321:33	6	[ ]
LEAF_NODE	2321:32	2321:32	7	[
LEAF_NODE	2321:33	2321:33	7	]
NAME	2321:26	2321:26	5	module
LEAF_NODE	2321:26	2321:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2321:26	2321:26	5	module = "TIFFWriteDirectoryTagCheckedRational"
ASSIGN	2321:26	2321:37	6	module = "TIFFWriteDirectoryTagCheckedRational"
LVAL	2321:26	2321:26	7	module
NAME	2321:26	2321:26	8	module
LEAF_NODE	2321:26	2321:26	9	module
ASSIGN_OP	2321:35	2321:35	7	=
LEAF_NODE	2321:35	2321:35	8	=
RVAL	2321:37	2321:37	7	"TIFFWriteDirectoryTagCheckedRational"
FIELD	2321:37	2321:37	8	"TIFFWriteDirectoryTagCheckedRational"
LEAF_NODE	2321:37	2321:37	9	"TIFFWriteDirectoryTagCheckedRational"
LEAF_NODE	2321:75	2321:75	4	;
SIMPLE_DECL	2322:1	2322:12	3	uint32 [ 2 ] m ;
VAR_DECL	2322:1	2322:8	4	uint32 [ 2 ] m
TYPE	2322:1	2322:9	5	uint32 [ 2 ]
TYPE_NAME	2322:1	2322:1	6	uint32
LEAF_NODE	2322:1	2322:1	7	uint32
TYPE_SUFFIX	2322:9	2322:11	6	[ 2 ]
LEAF_NODE	2322:9	2322:9	7	[
FIELD	2322:10	2322:10	7	2
LEAF_NODE	2322:10	2322:10	8	2
LEAF_NODE	2322:11	2322:11	7	]
NAME	2322:8	2322:8	5	m
LEAF_NODE	2322:8	2322:8	6	m
LEAF_NODE	2322:12	2322:12	4	;
EXPR_STATEMENT	2323:1	2323:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	2323:1	2323:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	2323:1	2323:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	2323:1	2323:1	6	assert
LEAF_NODE	2323:1	2323:1	7	assert
LEAF_NODE	2323:7	2323:7	6	(
ARGUMENT	2323:8	2323:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	2323:8	2323:21	7	sizeof ( uint32 )
CALLEE	2323:8	2323:8	8	sizeof
LEAF_NODE	2323:8	2323:8	9	sizeof
LEAF_NODE	2323:14	2323:14	8	(
ARGUMENT	2323:15	2323:15	8	uint32
FIELD	2323:15	2323:15	9	uint32
LEAF_NODE	2323:15	2323:15	10	uint32
LEAF_NODE	2323:21	2323:21	8	)
EQ_OPERATOR	2323:22	2323:22	7	==
LEAF_NODE	2323:22	2323:22	8	==
FIELD	2323:24	2323:24	7	4
LEAF_NODE	2323:24	2323:24	8	4
LEAF_NODE	2323:25	2323:25	6	)
LEAF_NODE	2323:26	2323:26	4	;
SELECTION	2324:8	2325:8	3	
KEYWORD	2324:8	2324:8	4	if
LEAF_NODE	2324:8	2324:8	5	if
LEAF_NODE	2324:10	2324:10	4	(
CONDITION	2324:12	2324:12	4	value < 0
EXPR	2324:12	2324:20	5	value < 0
FIELD	2324:12	2324:12	6	value
LEAF_NODE	2324:12	2324:12	7	value
REL_OPERATOR	2324:18	2324:18	6	<
LEAF_NODE	2324:18	2324:18	7	<
FIELD	2324:20	2324:20	6	0
LEAF_NODE	2324:20	2324:20	7	0
LEAF_NODE	2324:22	2324:22	4	)
STATEMENTS	2325:8	2328:8	4	
LEAF_NODE	2325:8	2325:8	5	{
STATEMENTS	2326:12	2327:12	5	
EXPR_STATEMENT	2326:12	2326:80	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Negative value is illegal" ) ;
EXPR	2326:12	2326:12	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Negative value is illegal" )
FUNCTION_CALL	2326:12	2326:79	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Negative value is illegal" )
CALLEE	2326:12	2326:12	9	TIFFErrorExt
LEAF_NODE	2326:12	2326:12	10	TIFFErrorExt
LEAF_NODE	2326:24	2326:24	9	(
ARGUMENT	2326:25	2326:25	9	tif -> tif_clientdata
FIELD	2326:25	2326:30	10	tif -> tif_clientdata
LEAF_NODE	2326:25	2326:25	11	tif
LEAF_NODE	2326:28	2326:28	11	->
LEAF_NODE	2326:30	2326:30	11	tif_clientdata
LEAF_NODE	2326:44	2326:44	9	,
ARGUMENT	2326:45	2326:45	9	module
FIELD	2326:45	2326:45	10	module
LEAF_NODE	2326:45	2326:45	11	module
LEAF_NODE	2326:51	2326:51	9	,
ARGUMENT	2326:52	2326:52	9	"Negative value is illegal"
FIELD	2326:52	2326:52	10	"Negative value is illegal"
LEAF_NODE	2326:52	2326:52	11	"Negative value is illegal"
LEAF_NODE	2326:79	2326:79	9	)
LEAF_NODE	2326:80	2326:80	7	;
JUMP_STATEMENT	2327:12	2327:20	6	return 0 ;
KEYWORD	2327:12	2327:12	7	return
LEAF_NODE	2327:12	2327:12	8	return
DESTINATION	2327:19	2327:19	7	0
EXPR	2327:19	2327:19	8	0
FIELD	2327:19	2327:19	9	0
LEAF_NODE	2327:19	2327:19	10	0
LEAF_NODE	2327:20	2327:20	7	;
LEAF_NODE	2328:8	2328:8	5	}
SELECTION	2329:8	2329:13	3	
KEYWORD	2329:8	2329:8	4	else
LEAF_NODE	2329:8	2329:8	5	else
STATEMENTS	2329:13	2329:13	4	
SELECTION	2329:13	2330:8	5	
KEYWORD	2329:13	2329:13	6	if
LEAF_NODE	2329:13	2329:13	7	if
LEAF_NODE	2329:15	2329:15	6	(
CONDITION	2329:17	2329:17	6	value != value
EXPR	2329:17	2329:26	7	value != value
FIELD	2329:17	2329:17	8	value
LEAF_NODE	2329:17	2329:17	9	value
EQ_OPERATOR	2329:23	2329:23	8	!=
LEAF_NODE	2329:23	2329:23	9	!=
FIELD	2329:26	2329:26	8	value
LEAF_NODE	2329:26	2329:26	9	value
LEAF_NODE	2329:32	2329:32	6	)
STATEMENTS	2330:8	2333:8	6	
LEAF_NODE	2330:8	2330:8	7	{
STATEMENTS	2331:12	2332:12	7	
EXPR_STATEMENT	2331:12	2331:84	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Not-a-number value is illegal" ) ;
EXPR	2331:12	2331:12	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Not-a-number value is illegal" )
FUNCTION_CALL	2331:12	2331:83	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Not-a-number value is illegal" )
CALLEE	2331:12	2331:12	11	TIFFErrorExt
LEAF_NODE	2331:12	2331:12	12	TIFFErrorExt
LEAF_NODE	2331:24	2331:24	11	(
ARGUMENT	2331:25	2331:25	11	tif -> tif_clientdata
FIELD	2331:25	2331:30	12	tif -> tif_clientdata
LEAF_NODE	2331:25	2331:25	13	tif
LEAF_NODE	2331:28	2331:28	13	->
LEAF_NODE	2331:30	2331:30	13	tif_clientdata
LEAF_NODE	2331:44	2331:44	11	,
ARGUMENT	2331:45	2331:45	11	module
FIELD	2331:45	2331:45	12	module
LEAF_NODE	2331:45	2331:45	13	module
LEAF_NODE	2331:51	2331:51	11	,
ARGUMENT	2331:52	2331:52	11	"Not-a-number value is illegal"
FIELD	2331:52	2331:52	12	"Not-a-number value is illegal"
LEAF_NODE	2331:52	2331:52	13	"Not-a-number value is illegal"
LEAF_NODE	2331:83	2331:83	11	)
LEAF_NODE	2331:84	2331:84	9	;
JUMP_STATEMENT	2332:12	2332:20	8	return 0 ;
KEYWORD	2332:12	2332:12	9	return
LEAF_NODE	2332:12	2332:12	10	return
DESTINATION	2332:19	2332:19	9	0
EXPR	2332:19	2332:19	10	0
FIELD	2332:19	2332:19	11	0
LEAF_NODE	2332:19	2332:19	12	0
LEAF_NODE	2332:20	2332:20	9	;
LEAF_NODE	2333:8	2333:8	7	}
SELECTION	2334:1	2334:6	3	
KEYWORD	2334:1	2334:1	4	else
LEAF_NODE	2334:1	2334:1	5	else
STATEMENTS	2334:6	2334:6	4	
SELECTION	2334:6	2335:1	5	
KEYWORD	2334:6	2334:6	6	if
LEAF_NODE	2334:6	2334:6	7	if
LEAF_NODE	2334:9	2334:9	6	(
CONDITION	2334:10	2334:10	6	value == 0.0
EXPR	2334:10	2334:17	7	value == 0.0
FIELD	2334:10	2334:10	8	value
LEAF_NODE	2334:10	2334:10	9	value
EQ_OPERATOR	2334:15	2334:15	8	==
LEAF_NODE	2334:15	2334:15	9	==
FIELD	2334:17	2334:17	8	0.0
LEAF_NODE	2334:17	2334:17	9	0.0
LEAF_NODE	2334:20	2334:20	6	)
STATEMENTS	2335:1	2338:1	6	
LEAF_NODE	2335:1	2335:1	7	{
STATEMENTS	2336:2	2337:2	7	
EXPR_STATEMENT	2336:2	2336:8	8	m [ 0 ] = 0 ;
EXPR	2336:2	2336:2	9	m [ 0 ] = 0
ASSIGN	2336:2	2336:7	10	m [ 0 ] = 0
LVAL	2336:2	2336:2	11	m [ 0 ]
FIELD	2336:2	2336:5	12	m [ 0 ]
LEAF_NODE	2336:2	2336:2	13	m
LEAF_NODE	2336:3	2336:3	13	[
EXPR	2336:4	2336:4	13	0
FIELD	2336:4	2336:4	14	0
LEAF_NODE	2336:4	2336:4	15	0
LEAF_NODE	2336:5	2336:5	13	]
ASSIGN_OP	2336:6	2336:6	11	=
LEAF_NODE	2336:6	2336:6	12	=
RVAL	2336:7	2336:7	11	0
FIELD	2336:7	2336:7	12	0
LEAF_NODE	2336:7	2336:7	13	0
LEAF_NODE	2336:8	2336:8	9	;
EXPR_STATEMENT	2337:2	2337:8	8	m [ 1 ] = 1 ;
EXPR	2337:2	2337:2	9	m [ 1 ] = 1
ASSIGN	2337:2	2337:7	10	m [ 1 ] = 1
LVAL	2337:2	2337:2	11	m [ 1 ]
FIELD	2337:2	2337:5	12	m [ 1 ]
LEAF_NODE	2337:2	2337:2	13	m
LEAF_NODE	2337:3	2337:3	13	[
EXPR	2337:4	2337:4	13	1
FIELD	2337:4	2337:4	14	1
LEAF_NODE	2337:4	2337:4	15	1
LEAF_NODE	2337:5	2337:5	13	]
ASSIGN_OP	2337:6	2337:6	11	=
LEAF_NODE	2337:6	2337:6	12	=
RVAL	2337:7	2337:7	11	1
FIELD	2337:7	2337:7	12	1
LEAF_NODE	2337:7	2337:7	13	1
LEAF_NODE	2337:8	2337:8	9	;
LEAF_NODE	2338:1	2338:1	7	}
SELECTION	2339:1	2339:6	3	
KEYWORD	2339:1	2339:1	4	else
LEAF_NODE	2339:1	2339:1	5	else
STATEMENTS	2339:6	2339:6	4	
SELECTION	2339:6	2340:1	5	
KEYWORD	2339:6	2339:6	6	if
LEAF_NODE	2339:6	2339:6	7	if
LEAF_NODE	2339:9	2339:9	6	(
CONDITION	2339:10	2339:10	6	value <= 0xFFFFFFFFU && value == ( double ) ( uint32 ) value
EXPR	2339:10	2339:10	7	value <= 0xFFFFFFFFU && value == ( double ) ( uint32 ) value
AND	2339:10	2339:34	8	value <= 0xFFFFFFFFU && value == ( double ) ( uint32 ) value
EXPR	2339:10	2339:19	9	value <= 0xFFFFFFFFU
FIELD	2339:10	2339:10	10	value
LEAF_NODE	2339:10	2339:10	11	value
REL_OPERATOR	2339:16	2339:16	10	<=
LEAF_NODE	2339:16	2339:16	11	<=
FIELD	2339:19	2339:19	10	0xFFFFFFFFU
LEAF_NODE	2339:19	2339:19	11	0xFFFFFFFFU
LEAF_NODE	2339:31	2339:31	9	&&
EXPR	2339:34	2339:57	9	value == ( double ) ( uint32 ) value
FIELD	2339:34	2339:34	10	value
LEAF_NODE	2339:34	2339:34	11	value
EQ_OPERATOR	2339:39	2339:39	10	==
LEAF_NODE	2339:39	2339:39	11	==
LEAF_NODE	2339:41	2339:41	10	(
TYPE_NAME	2339:42	2339:42	10	double
LEAF_NODE	2339:42	2339:42	11	double
LEAF_NODE	2339:48	2339:48	10	)
LEAF_NODE	2339:49	2339:49	10	(
TYPE_NAME	2339:50	2339:50	10	uint32
LEAF_NODE	2339:50	2339:50	11	uint32
LEAF_NODE	2339:56	2339:56	10	)
FIELD	2339:57	2339:57	10	value
LEAF_NODE	2339:57	2339:57	11	value
LEAF_NODE	2339:62	2339:62	6	)
STATEMENTS	2340:1	2343:1	6	
LEAF_NODE	2340:1	2340:1	7	{
STATEMENTS	2341:2	2342:2	7	
EXPR_STATEMENT	2341:2	2341:20	8	m [ 0 ] = ( uint32 ) value ;
EXPR	2341:2	2341:2	9	m [ 0 ] = ( uint32 ) value
ASSIGN	2341:2	2341:7	10	m [ 0 ] = ( uint32 ) value
LVAL	2341:2	2341:2	11	m [ 0 ]
FIELD	2341:2	2341:5	12	m [ 0 ]
LEAF_NODE	2341:2	2341:2	13	m
LEAF_NODE	2341:3	2341:3	13	[
EXPR	2341:4	2341:4	13	0
FIELD	2341:4	2341:4	14	0
LEAF_NODE	2341:4	2341:4	15	0
LEAF_NODE	2341:5	2341:5	13	]
ASSIGN_OP	2341:6	2341:6	11	=
LEAF_NODE	2341:6	2341:6	12	=
RVAL	2341:7	2341:15	11	( uint32 ) value
LEAF_NODE	2341:7	2341:7	12	(
TYPE_NAME	2341:8	2341:8	12	uint32
LEAF_NODE	2341:8	2341:8	13	uint32
LEAF_NODE	2341:14	2341:14	12	)
FIELD	2341:15	2341:15	12	value
LEAF_NODE	2341:15	2341:15	13	value
LEAF_NODE	2341:20	2341:20	9	;
EXPR_STATEMENT	2342:2	2342:8	8	m [ 1 ] = 1 ;
EXPR	2342:2	2342:2	9	m [ 1 ] = 1
ASSIGN	2342:2	2342:7	10	m [ 1 ] = 1
LVAL	2342:2	2342:2	11	m [ 1 ]
FIELD	2342:2	2342:5	12	m [ 1 ]
LEAF_NODE	2342:2	2342:2	13	m
LEAF_NODE	2342:3	2342:3	13	[
EXPR	2342:4	2342:4	13	1
FIELD	2342:4	2342:4	14	1
LEAF_NODE	2342:4	2342:4	15	1
LEAF_NODE	2342:5	2342:5	13	]
ASSIGN_OP	2342:6	2342:6	11	=
LEAF_NODE	2342:6	2342:6	12	=
RVAL	2342:7	2342:7	11	1
FIELD	2342:7	2342:7	12	1
LEAF_NODE	2342:7	2342:7	13	1
LEAF_NODE	2342:8	2342:8	9	;
LEAF_NODE	2343:1	2343:1	7	}
SELECTION	2344:1	2344:6	3	
KEYWORD	2344:1	2344:1	4	else
LEAF_NODE	2344:1	2344:1	5	else
STATEMENTS	2344:6	2344:6	4	
SELECTION	2344:6	2345:1	5	
KEYWORD	2344:6	2344:6	6	if
LEAF_NODE	2344:6	2344:6	7	if
LEAF_NODE	2344:9	2344:9	6	(
CONDITION	2344:10	2344:10	6	value < 1.0
EXPR	2344:10	2344:16	7	value < 1.0
FIELD	2344:10	2344:10	8	value
LEAF_NODE	2344:10	2344:10	9	value
REL_OPERATOR	2344:15	2344:15	8	<
LEAF_NODE	2344:15	2344:15	9	<
FIELD	2344:16	2344:16	8	1.0
LEAF_NODE	2344:16	2344:16	9	1.0
LEAF_NODE	2344:19	2344:19	6	)
STATEMENTS	2345:1	2348:1	6	
LEAF_NODE	2345:1	2345:1	7	{
STATEMENTS	2346:2	2347:2	7	
EXPR_STATEMENT	2346:2	2346:33	8	m [ 0 ] = ( uint32 ) ( value * 0xFFFFFFFF ) ;
EXPR	2346:2	2346:2	9	m [ 0 ] = ( uint32 ) ( value * 0xFFFFFFFF )
ASSIGN	2346:2	2346:7	10	m [ 0 ] = ( uint32 ) ( value * 0xFFFFFFFF )
LVAL	2346:2	2346:2	11	m [ 0 ]
FIELD	2346:2	2346:5	12	m [ 0 ]
LEAF_NODE	2346:2	2346:2	13	m
LEAF_NODE	2346:3	2346:3	13	[
EXPR	2346:4	2346:4	13	0
FIELD	2346:4	2346:4	14	0
LEAF_NODE	2346:4	2346:4	15	0
LEAF_NODE	2346:5	2346:5	13	]
ASSIGN_OP	2346:6	2346:6	11	=
LEAF_NODE	2346:6	2346:6	12	=
RVAL	2346:7	2346:32	11	( uint32 ) ( value * 0xFFFFFFFF )
LEAF_NODE	2346:7	2346:7	12	(
TYPE_NAME	2346:8	2346:8	12	uint32
LEAF_NODE	2346:8	2346:8	13	uint32
LEAF_NODE	2346:14	2346:14	12	)
LEAF_NODE	2346:15	2346:15	12	(
FIELD	2346:16	2346:16	12	value
LEAF_NODE	2346:16	2346:16	13	value
LEAF_NODE	2346:21	2346:21	12	*
FIELD	2346:22	2346:22	12	0xFFFFFFFF
LEAF_NODE	2346:22	2346:22	13	0xFFFFFFFF
LEAF_NODE	2346:32	2346:32	12	)
LEAF_NODE	2346:33	2346:33	9	;
EXPR_STATEMENT	2347:2	2347:17	8	m [ 1 ] = 0xFFFFFFFF ;
EXPR	2347:2	2347:2	9	m [ 1 ] = 0xFFFFFFFF
ASSIGN	2347:2	2347:7	10	m [ 1 ] = 0xFFFFFFFF
LVAL	2347:2	2347:2	11	m [ 1 ]
FIELD	2347:2	2347:5	12	m [ 1 ]
LEAF_NODE	2347:2	2347:2	13	m
LEAF_NODE	2347:3	2347:3	13	[
EXPR	2347:4	2347:4	13	1
FIELD	2347:4	2347:4	14	1
LEAF_NODE	2347:4	2347:4	15	1
LEAF_NODE	2347:5	2347:5	13	]
ASSIGN_OP	2347:6	2347:6	11	=
LEAF_NODE	2347:6	2347:6	12	=
RVAL	2347:7	2347:7	11	0xFFFFFFFF
FIELD	2347:7	2347:7	12	0xFFFFFFFF
LEAF_NODE	2347:7	2347:7	13	0xFFFFFFFF
LEAF_NODE	2347:17	2347:17	9	;
LEAF_NODE	2348:1	2348:1	7	}
SELECTION	2349:1	2350:1	3	
KEYWORD	2349:1	2349:1	4	else
LEAF_NODE	2349:1	2349:1	5	else
STATEMENTS	2350:1	2353:1	4	
LEAF_NODE	2350:1	2350:1	5	{
STATEMENTS	2351:2	2352:2	5	
EXPR_STATEMENT	2351:2	2351:17	6	m [ 0 ] = 0xFFFFFFFF ;
EXPR	2351:2	2351:2	7	m [ 0 ] = 0xFFFFFFFF
ASSIGN	2351:2	2351:7	8	m [ 0 ] = 0xFFFFFFFF
LVAL	2351:2	2351:2	9	m [ 0 ]
FIELD	2351:2	2351:5	10	m [ 0 ]
LEAF_NODE	2351:2	2351:2	11	m
LEAF_NODE	2351:3	2351:3	11	[
EXPR	2351:4	2351:4	11	0
FIELD	2351:4	2351:4	12	0
LEAF_NODE	2351:4	2351:4	13	0
LEAF_NODE	2351:5	2351:5	11	]
ASSIGN_OP	2351:6	2351:6	9	=
LEAF_NODE	2351:6	2351:6	10	=
RVAL	2351:7	2351:7	9	0xFFFFFFFF
FIELD	2351:7	2351:7	10	0xFFFFFFFF
LEAF_NODE	2351:7	2351:7	11	0xFFFFFFFF
LEAF_NODE	2351:17	2351:17	7	;
EXPR_STATEMENT	2352:2	2352:33	6	m [ 1 ] = ( uint32 ) ( 0xFFFFFFFF / value ) ;
EXPR	2352:2	2352:2	7	m [ 1 ] = ( uint32 ) ( 0xFFFFFFFF / value )
ASSIGN	2352:2	2352:7	8	m [ 1 ] = ( uint32 ) ( 0xFFFFFFFF / value )
LVAL	2352:2	2352:2	9	m [ 1 ]
FIELD	2352:2	2352:5	10	m [ 1 ]
LEAF_NODE	2352:2	2352:2	11	m
LEAF_NODE	2352:3	2352:3	11	[
EXPR	2352:4	2352:4	11	1
FIELD	2352:4	2352:4	12	1
LEAF_NODE	2352:4	2352:4	13	1
LEAF_NODE	2352:5	2352:5	11	]
ASSIGN_OP	2352:6	2352:6	9	=
LEAF_NODE	2352:6	2352:6	10	=
RVAL	2352:7	2352:32	9	( uint32 ) ( 0xFFFFFFFF / value )
LEAF_NODE	2352:7	2352:7	10	(
TYPE_NAME	2352:8	2352:8	10	uint32
LEAF_NODE	2352:8	2352:8	11	uint32
LEAF_NODE	2352:14	2352:14	10	)
LEAF_NODE	2352:15	2352:15	10	(
FIELD	2352:16	2352:16	10	0xFFFFFFFF
LEAF_NODE	2352:16	2352:16	11	0xFFFFFFFF
LEAF_NODE	2352:26	2352:26	10	/
FIELD	2352:27	2352:27	10	value
LEAF_NODE	2352:27	2352:27	11	value
LEAF_NODE	2352:32	2352:32	10	)
LEAF_NODE	2352:33	2352:33	7	;
LEAF_NODE	2353:1	2353:1	5	}
SELECTION	2354:1	2355:1	3	
KEYWORD	2354:1	2354:1	4	if
LEAF_NODE	2354:1	2354:1	5	if
LEAF_NODE	2354:4	2354:4	4	(
CONDITION	2354:5	2354:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2354:5	2354:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2354:5	2354:10	6	tif -> tif_flags
LEAF_NODE	2354:5	2354:5	7	tif
LEAF_NODE	2354:8	2354:8	7	->
LEAF_NODE	2354:10	2354:10	7	tif_flags
LEAF_NODE	2354:19	2354:19	6	&
FIELD	2354:20	2354:20	6	TIFF_SWAB
LEAF_NODE	2354:20	2354:20	7	TIFF_SWAB
LEAF_NODE	2354:29	2354:29	4	)
STATEMENTS	2355:1	2358:1	4	
LEAF_NODE	2355:1	2355:1	5	{
STATEMENTS	2356:2	2357:2	5	
EXPR_STATEMENT	2356:2	2356:21	6	TIFFSwabLong ( & m [ 0 ] ) ;
EXPR	2356:2	2356:2	7	TIFFSwabLong ( & m [ 0 ] )
FUNCTION_CALL	2356:2	2356:20	8	TIFFSwabLong ( & m [ 0 ] )
CALLEE	2356:2	2356:2	9	TIFFSwabLong
LEAF_NODE	2356:2	2356:2	10	TIFFSwabLong
LEAF_NODE	2356:14	2356:14	9	(
ARGUMENT	2356:15	2356:15	9	& m [ 0 ]
UNARY_EXPR	2356:15	2356:16	10	& m [ 0 ]
UNARY_OPERATOR	2356:15	2356:15	11	&
LEAF_NODE	2356:15	2356:15	12	&
FIELD	2356:16	2356:19	11	m [ 0 ]
LEAF_NODE	2356:16	2356:16	12	m
LEAF_NODE	2356:17	2356:17	12	[
EXPR	2356:18	2356:18	12	0
FIELD	2356:18	2356:18	13	0
LEAF_NODE	2356:18	2356:18	14	0
LEAF_NODE	2356:19	2356:19	12	]
LEAF_NODE	2356:20	2356:20	9	)
LEAF_NODE	2356:21	2356:21	7	;
EXPR_STATEMENT	2357:2	2357:21	6	TIFFSwabLong ( & m [ 1 ] ) ;
EXPR	2357:2	2357:2	7	TIFFSwabLong ( & m [ 1 ] )
FUNCTION_CALL	2357:2	2357:20	8	TIFFSwabLong ( & m [ 1 ] )
CALLEE	2357:2	2357:2	9	TIFFSwabLong
LEAF_NODE	2357:2	2357:2	10	TIFFSwabLong
LEAF_NODE	2357:14	2357:14	9	(
ARGUMENT	2357:15	2357:15	9	& m [ 1 ]
UNARY_EXPR	2357:15	2357:16	10	& m [ 1 ]
UNARY_OPERATOR	2357:15	2357:15	11	&
LEAF_NODE	2357:15	2357:15	12	&
FIELD	2357:16	2357:19	11	m [ 1 ]
LEAF_NODE	2357:16	2357:16	12	m
LEAF_NODE	2357:17	2357:17	12	[
EXPR	2357:18	2357:18	12	1
FIELD	2357:18	2357:18	13	1
LEAF_NODE	2357:18	2357:18	14	1
LEAF_NODE	2357:19	2357:19	12	]
LEAF_NODE	2357:20	2357:20	9	)
LEAF_NODE	2357:21	2357:21	7	;
LEAF_NODE	2358:1	2358:1	5	}
JUMP_STATEMENT	2359:1	2359:76	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_RATIONAL , 1 , 8 , & m [ 0 ] ) ) ;
KEYWORD	2359:1	2359:1	4	return
LEAF_NODE	2359:1	2359:1	5	return
DESTINATION	2359:7	2359:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_RATIONAL , 1 , 8 , & m [ 0 ] ) )
EXPR	2359:7	2359:75	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_RATIONAL , 1 , 8 , & m [ 0 ] ) )
LEAF_NODE	2359:7	2359:7	6	(
FUNCTION_CALL	2359:8	2359:74	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_RATIONAL , 1 , 8 , & m [ 0 ] )
CALLEE	2359:8	2359:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2359:8	2359:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2359:33	2359:33	7	(
ARGUMENT	2359:34	2359:34	7	tif
FIELD	2359:34	2359:34	8	tif
LEAF_NODE	2359:34	2359:34	9	tif
LEAF_NODE	2359:37	2359:37	7	,
ARGUMENT	2359:38	2359:38	7	ndir
FIELD	2359:38	2359:38	8	ndir
LEAF_NODE	2359:38	2359:38	9	ndir
LEAF_NODE	2359:42	2359:42	7	,
ARGUMENT	2359:43	2359:43	7	dir
FIELD	2359:43	2359:43	8	dir
LEAF_NODE	2359:43	2359:43	9	dir
LEAF_NODE	2359:46	2359:46	7	,
ARGUMENT	2359:47	2359:47	7	tag
FIELD	2359:47	2359:47	8	tag
LEAF_NODE	2359:47	2359:47	9	tag
LEAF_NODE	2359:50	2359:50	7	,
ARGUMENT	2359:51	2359:51	7	TIFF_RATIONAL
FIELD	2359:51	2359:51	8	TIFF_RATIONAL
LEAF_NODE	2359:51	2359:51	9	TIFF_RATIONAL
LEAF_NODE	2359:64	2359:64	7	,
ARGUMENT	2359:65	2359:65	7	1
FIELD	2359:65	2359:65	8	1
LEAF_NODE	2359:65	2359:65	9	1
LEAF_NODE	2359:66	2359:66	7	,
ARGUMENT	2359:67	2359:67	7	8
FIELD	2359:67	2359:67	8	8
LEAF_NODE	2359:67	2359:67	9	8
LEAF_NODE	2359:68	2359:68	7	,
ARGUMENT	2359:69	2359:69	7	& m [ 0 ]
UNARY_EXPR	2359:69	2359:70	8	& m [ 0 ]
UNARY_OPERATOR	2359:69	2359:69	9	&
LEAF_NODE	2359:69	2359:69	10	&
FIELD	2359:70	2359:73	9	m [ 0 ]
LEAF_NODE	2359:70	2359:70	10	m
LEAF_NODE	2359:71	2359:71	10	[
EXPR	2359:72	2359:72	10	0
FIELD	2359:72	2359:72	11	0
LEAF_NODE	2359:72	2359:72	12	0
LEAF_NODE	2359:73	2359:73	10	]
LEAF_NODE	2359:74	2359:74	7	)
LEAF_NODE	2359:75	2359:75	6	)
LEAF_NODE	2359:76	2359:76	4	;
LEAF_NODE	2360:0	2360:0	2	}
FUNCTION_DEF	2362:0	2407:0	1	
RETURN_TYPE	2362:0	2362:7	2	static int
LEAF_NODE	2362:0	2362:0	3	static
TYPE_NAME	2362:7	2362:7	3	int
LEAF_NODE	2362:7	2362:7	4	int
FUNCTION_NAME	2363:0	2363:0	2	TIFFWriteDirectoryTagCheckedRationalArray
LEAF_NODE	2363:0	2363:0	3	TIFFWriteDirectoryTagCheckedRationalArray
PARAMETER_LIST	2363:41	2363:124	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , float * value )
LEAF_NODE	2363:41	2363:41	3	(
PARAMETER_DECL	2363:42	2363:48	3	TIFF * tif
TYPE	2363:42	2363:46	4	TIFF *
TYPE_NAME	2363:42	2363:42	5	TIFF
LEAF_NODE	2363:42	2363:42	6	TIFF
POINTER	2363:46	2363:46	5	*
LEAF_NODE	2363:46	2363:46	6	*
NAME	2363:48	2363:48	4	tif
LEAF_NODE	2363:48	2363:48	5	tif
LEAF_NODE	2363:51	2363:51	3	,
PARAMETER_DECL	2363:53	2363:61	3	uint32 * ndir
TYPE	2363:53	2363:59	4	uint32 *
TYPE_NAME	2363:53	2363:53	5	uint32
LEAF_NODE	2363:53	2363:53	6	uint32
POINTER	2363:59	2363:59	5	*
LEAF_NODE	2363:59	2363:59	6	*
NAME	2363:61	2363:61	4	ndir
LEAF_NODE	2363:61	2363:61	5	ndir
LEAF_NODE	2363:65	2363:65	3	,
PARAMETER_DECL	2363:67	2363:81	3	TIFFDirEntry * dir
TYPE	2363:67	2363:79	4	TIFFDirEntry *
TYPE_NAME	2363:67	2363:67	5	TIFFDirEntry
LEAF_NODE	2363:67	2363:67	6	TIFFDirEntry
POINTER	2363:79	2363:79	5	*
LEAF_NODE	2363:79	2363:79	6	*
NAME	2363:81	2363:81	4	dir
LEAF_NODE	2363:81	2363:81	5	dir
LEAF_NODE	2363:84	2363:84	3	,
PARAMETER_DECL	2363:86	2363:93	3	uint16 tag
TYPE	2363:86	2363:86	4	uint16
TYPE_NAME	2363:86	2363:86	5	uint16
LEAF_NODE	2363:86	2363:86	6	uint16
NAME	2363:93	2363:93	4	tag
LEAF_NODE	2363:93	2363:93	5	tag
LEAF_NODE	2363:96	2363:96	3	,
PARAMETER_DECL	2363:98	2363:105	3	uint32 count
TYPE	2363:98	2363:98	4	uint32
TYPE_NAME	2363:98	2363:98	5	uint32
LEAF_NODE	2363:98	2363:98	6	uint32
NAME	2363:105	2363:105	4	count
LEAF_NODE	2363:105	2363:105	5	count
LEAF_NODE	2363:110	2363:110	3	,
PARAMETER_DECL	2363:112	2363:119	3	float * value
TYPE	2363:112	2363:117	4	float *
TYPE_NAME	2363:112	2363:112	5	float
LEAF_NODE	2363:112	2363:112	6	float
POINTER	2363:117	2363:117	5	*
LEAF_NODE	2363:117	2363:117	6	*
NAME	2363:119	2363:119	4	value
LEAF_NODE	2363:119	2363:119	5	value
LEAF_NODE	2363:124	2363:124	3	)
LEAF_NODE	2364:0	2364:0	2	{
STATEMENTS	2365:1	2406:10	2	
LEAF_NODE	2365:1	2365:1	3	static
SIMPLE_DECL	2365:8	2365:73	3	const char [ ] module ; module = "TIFFWriteDirectoryTagCheckedRationalArray" ;
VAR_DECL	2365:8	2365:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagCheckedRationalArray"
TYPE	2365:8	2365:25	5	const char [ ]
TYPE_NAME	2365:8	2365:14	6	const char
LEAF_NODE	2365:8	2365:8	7	const
LEAF_NODE	2365:14	2365:14	7	char
TYPE_SUFFIX	2365:25	2365:26	6	[ ]
LEAF_NODE	2365:25	2365:25	7	[
LEAF_NODE	2365:26	2365:26	7	]
NAME	2365:19	2365:19	5	module
LEAF_NODE	2365:19	2365:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2365:19	2365:19	5	module = "TIFFWriteDirectoryTagCheckedRationalArray"
ASSIGN	2365:19	2365:30	6	module = "TIFFWriteDirectoryTagCheckedRationalArray"
LVAL	2365:19	2365:19	7	module
NAME	2365:19	2365:19	8	module
LEAF_NODE	2365:19	2365:19	9	module
ASSIGN_OP	2365:28	2365:28	7	=
LEAF_NODE	2365:28	2365:28	8	=
RVAL	2365:30	2365:30	7	"TIFFWriteDirectoryTagCheckedRationalArray"
FIELD	2365:30	2365:30	8	"TIFFWriteDirectoryTagCheckedRationalArray"
LEAF_NODE	2365:30	2365:30	9	"TIFFWriteDirectoryTagCheckedRationalArray"
LEAF_NODE	2365:73	2365:73	4	;
SIMPLE_DECL	2366:1	2366:10	3	uint32 * m ;
VAR_DECL	2366:1	2366:9	4	uint32 * m
TYPE	2366:1	2366:7	5	uint32 *
TYPE_NAME	2366:1	2366:1	6	uint32
LEAF_NODE	2366:1	2366:1	7	uint32
POINTER	2366:7	2366:7	6	*
LEAF_NODE	2366:7	2366:7	7	*
NAME	2366:9	2366:9	5	m
LEAF_NODE	2366:9	2366:9	6	m
LEAF_NODE	2366:10	2366:10	4	;
SIMPLE_DECL	2367:1	2367:10	3	float * na ;
VAR_DECL	2367:1	2367:8	4	float * na
TYPE	2367:1	2367:6	5	float *
TYPE_NAME	2367:1	2367:1	6	float
LEAF_NODE	2367:1	2367:1	7	float
POINTER	2367:6	2367:6	6	*
LEAF_NODE	2367:6	2367:6	7	*
NAME	2367:8	2367:8	5	na
LEAF_NODE	2367:8	2367:8	6	na
LEAF_NODE	2367:10	2367:10	4	;
SIMPLE_DECL	2368:1	2368:11	3	uint32 * nb ;
VAR_DECL	2368:1	2368:9	4	uint32 * nb
TYPE	2368:1	2368:7	5	uint32 *
TYPE_NAME	2368:1	2368:1	6	uint32
LEAF_NODE	2368:1	2368:1	7	uint32
POINTER	2368:7	2368:7	6	*
LEAF_NODE	2368:7	2368:7	7	*
NAME	2368:9	2368:9	5	nb
LEAF_NODE	2368:9	2368:9	6	nb
LEAF_NODE	2368:11	2368:11	4	;
SIMPLE_DECL	2369:1	2369:10	3	uint32 nc ;
VAR_DECL	2369:1	2369:8	4	uint32 nc
TYPE	2369:1	2369:1	5	uint32
TYPE_NAME	2369:1	2369:1	6	uint32
LEAF_NODE	2369:1	2369:1	7	uint32
NAME	2369:8	2369:8	5	nc
LEAF_NODE	2369:8	2369:8	6	nc
LEAF_NODE	2369:10	2369:10	4	;
SIMPLE_DECL	2370:1	2370:6	3	int o ;
VAR_DECL	2370:1	2370:5	4	int o
TYPE	2370:1	2370:1	5	int
TYPE_NAME	2370:1	2370:1	6	int
LEAF_NODE	2370:1	2370:1	7	int
NAME	2370:5	2370:5	5	o
LEAF_NODE	2370:5	2370:5	6	o
LEAF_NODE	2370:6	2370:6	4	;
EXPR_STATEMENT	2371:1	2371:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	2371:1	2371:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	2371:1	2371:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	2371:1	2371:1	6	assert
LEAF_NODE	2371:1	2371:1	7	assert
LEAF_NODE	2371:7	2371:7	6	(
ARGUMENT	2371:8	2371:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	2371:8	2371:21	7	sizeof ( uint32 )
CALLEE	2371:8	2371:8	8	sizeof
LEAF_NODE	2371:8	2371:8	9	sizeof
LEAF_NODE	2371:14	2371:14	8	(
ARGUMENT	2371:15	2371:15	8	uint32
FIELD	2371:15	2371:15	9	uint32
LEAF_NODE	2371:15	2371:15	10	uint32
LEAF_NODE	2371:21	2371:21	8	)
EQ_OPERATOR	2371:22	2371:22	7	==
LEAF_NODE	2371:22	2371:22	8	==
FIELD	2371:24	2371:24	7	4
LEAF_NODE	2371:24	2371:24	8	4
LEAF_NODE	2371:25	2371:25	6	)
LEAF_NODE	2371:26	2371:26	4	;
LEAF_NODE	2372:1	2372:1	3	m
LEAF_NODE	2372:2	2372:2	3	=
LEAF_NODE	2372:3	2372:3	3	_TIFFmalloc
LEAF_NODE	2372:14	2372:14	3	(
LEAF_NODE	2372:15	2372:15	3	count
LEAF_NODE	2372:20	2372:20	3	*
LEAF_NODE	2372:21	2372:21	3	2
LEAF_NODE	2372:22	2372:22	3	*
LEAF_NODE	2372:23	2372:23	3	sizeof
LEAF_NODE	2372:29	2372:29	3	(
LEAF_NODE	2372:30	2372:30	3	uint32
LEAF_NODE	2372:36	2372:36	3	)
LEAF_NODE	2372:37	2372:37	3	)
LEAF_NODE	2372:38	2372:38	3	;
SELECTION	2373:1	2374:1	3	
KEYWORD	2373:1	2373:1	4	if
LEAF_NODE	2373:1	2373:1	5	if
LEAF_NODE	2373:4	2373:4	4	(
CONDITION	2373:5	2373:5	4	m == NULL
EXPR	2373:5	2373:8	5	m == NULL
FIELD	2373:5	2373:5	6	m
LEAF_NODE	2373:5	2373:5	7	m
EQ_OPERATOR	2373:6	2373:6	6	==
LEAF_NODE	2373:6	2373:6	7	==
FIELD	2373:8	2373:8	6	NULL
LEAF_NODE	2373:8	2373:8	7	NULL
LEAF_NODE	2373:12	2373:12	4	)
STATEMENTS	2374:1	2377:1	4	
LEAF_NODE	2374:1	2374:1	5	{
STATEMENTS	2375:2	2376:2	5	
EXPR_STATEMENT	2375:2	2375:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	2375:2	2375:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	2375:2	2375:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	2375:2	2375:2	9	TIFFErrorExt
LEAF_NODE	2375:2	2375:2	10	TIFFErrorExt
LEAF_NODE	2375:14	2375:14	9	(
ARGUMENT	2375:15	2375:15	9	tif -> tif_clientdata
FIELD	2375:15	2375:20	10	tif -> tif_clientdata
LEAF_NODE	2375:15	2375:15	11	tif
LEAF_NODE	2375:18	2375:18	11	->
LEAF_NODE	2375:20	2375:20	11	tif_clientdata
LEAF_NODE	2375:34	2375:34	9	,
ARGUMENT	2375:35	2375:35	9	module
FIELD	2375:35	2375:35	10	module
LEAF_NODE	2375:35	2375:35	11	module
LEAF_NODE	2375:41	2375:41	9	,
ARGUMENT	2375:42	2375:42	9	"Out of memory"
FIELD	2375:42	2375:42	10	"Out of memory"
LEAF_NODE	2375:42	2375:42	11	"Out of memory"
LEAF_NODE	2375:57	2375:57	9	)
LEAF_NODE	2375:58	2375:58	7	;
JUMP_STATEMENT	2376:2	2376:11	6	return ( 0 ) ;
KEYWORD	2376:2	2376:2	7	return
LEAF_NODE	2376:2	2376:2	8	return
DESTINATION	2376:8	2376:8	7	( 0 )
EXPR	2376:8	2376:10	8	( 0 )
LEAF_NODE	2376:8	2376:8	9	(
FIELD	2376:9	2376:9	9	0
LEAF_NODE	2376:9	2376:9	10	0
LEAF_NODE	2376:10	2376:10	9	)
LEAF_NODE	2376:11	2376:11	7	;
LEAF_NODE	2377:1	2377:1	5	}
LEAF_NODE	2378:1	2378:1	3	for
LEAF_NODE	2378:5	2378:5	3	(
LEAF_NODE	2378:6	2378:6	3	na
LEAF_NODE	2378:8	2378:8	3	=
LEAF_NODE	2378:9	2378:9	3	value
LEAF_NODE	2378:14	2378:14	3	,
EXPR_STATEMENT	2378:16	2378:26	3	nb = m , nc = 0 ;
EXPR	2378:16	2378:22	4	nb = m , nc = 0
ASSIGN	2378:16	2378:19	5	nb = m
LVAL	2378:16	2378:16	6	nb
FIELD	2378:16	2378:16	7	nb
LEAF_NODE	2378:16	2378:16	8	nb
ASSIGN_OP	2378:18	2378:18	6	=
LEAF_NODE	2378:18	2378:18	7	=
RVAL	2378:19	2378:19	6	m
FIELD	2378:19	2378:19	7	m
LEAF_NODE	2378:19	2378:19	8	m
LEAF_NODE	2378:20	2378:20	5	,
ASSIGN	2378:22	2378:25	5	nc = 0
LVAL	2378:22	2378:22	6	nc
FIELD	2378:22	2378:22	7	nc
LEAF_NODE	2378:22	2378:22	8	nc
ASSIGN_OP	2378:24	2378:24	6	=
LEAF_NODE	2378:24	2378:24	7	=
RVAL	2378:25	2378:25	6	0
FIELD	2378:25	2378:25	7	0
LEAF_NODE	2378:25	2378:25	8	0
LEAF_NODE	2378:26	2378:26	4	;
EXPR_STATEMENT	2378:28	2378:36	3	nc < count ;
EXPR	2378:28	2378:31	4	nc < count
FIELD	2378:28	2378:28	5	nc
LEAF_NODE	2378:28	2378:28	6	nc
REL_OPERATOR	2378:30	2378:30	5	<
LEAF_NODE	2378:30	2378:30	6	<
FIELD	2378:31	2378:31	5	count
LEAF_NODE	2378:31	2378:31	6	count
LEAF_NODE	2378:36	2378:36	4	;
LEAF_NODE	2378:38	2378:38	3	na
LEAF_NODE	2378:40	2378:40	3	++
LEAF_NODE	2378:42	2378:42	3	,
LEAF_NODE	2378:44	2378:44	3	nb
LEAF_NODE	2378:46	2378:46	3	+=
LEAF_NODE	2378:48	2378:48	3	2
LEAF_NODE	2378:49	2378:49	3	,
LEAF_NODE	2378:51	2378:51	3	nc
LEAF_NODE	2378:53	2378:53	3	++
LEAF_NODE	2378:55	2378:55	3	)
LEAF_NODE	2379:1	2379:1	3	{
STATEMENTS	2380:2	2396:2	3	
SELECTION	2380:2	2381:2	4	
KEYWORD	2380:2	2380:2	5	if
LEAF_NODE	2380:2	2380:2	6	if
LEAF_NODE	2380:5	2380:5	5	(
CONDITION	2380:6	2380:6	5	* na <= 0.0 || * na != * na
EXPR	2380:6	2380:6	6	* na <= 0.0 || * na != * na
OR	2380:6	2380:18	7	* na <= 0.0 || * na != * na
EXPR	2380:6	2380:11	8	* na <= 0.0
UNARY_EXPR	2380:6	2380:7	9	* na
UNARY_OPERATOR	2380:6	2380:6	10	*
LEAF_NODE	2380:6	2380:6	11	*
FIELD	2380:7	2380:7	10	na
LEAF_NODE	2380:7	2380:7	11	na
REL_OPERATOR	2380:9	2380:9	9	<=
LEAF_NODE	2380:9	2380:9	10	<=
FIELD	2380:11	2380:11	9	0.0
LEAF_NODE	2380:11	2380:11	10	0.0
LEAF_NODE	2380:15	2380:15	8	||
EXPR	2380:18	2380:25	8	* na != * na
UNARY_EXPR	2380:18	2380:19	9	* na
UNARY_OPERATOR	2380:18	2380:18	10	*
LEAF_NODE	2380:18	2380:18	11	*
FIELD	2380:19	2380:19	10	na
LEAF_NODE	2380:19	2380:19	11	na
EQ_OPERATOR	2380:22	2380:22	9	!=
LEAF_NODE	2380:22	2380:22	10	!=
UNARY_EXPR	2380:25	2380:26	9	* na
UNARY_OPERATOR	2380:25	2380:25	10	*
LEAF_NODE	2380:25	2380:25	11	*
FIELD	2380:26	2380:26	10	na
LEAF_NODE	2380:26	2380:26	11	na
LEAF_NODE	2380:28	2380:28	5	)
STATEMENTS	2381:2	2384:2	5	
LEAF_NODE	2381:2	2381:2	6	{
STATEMENTS	2382:3	2383:3	6	
EXPR_STATEMENT	2382:3	2382:10	7	nb [ 0 ] = 0 ;
EXPR	2382:3	2382:3	8	nb [ 0 ] = 0
ASSIGN	2382:3	2382:9	9	nb [ 0 ] = 0
LVAL	2382:3	2382:3	10	nb [ 0 ]
FIELD	2382:3	2382:7	11	nb [ 0 ]
LEAF_NODE	2382:3	2382:3	12	nb
LEAF_NODE	2382:5	2382:5	12	[
EXPR	2382:6	2382:6	12	0
FIELD	2382:6	2382:6	13	0
LEAF_NODE	2382:6	2382:6	14	0
LEAF_NODE	2382:7	2382:7	12	]
ASSIGN_OP	2382:8	2382:8	10	=
LEAF_NODE	2382:8	2382:8	11	=
RVAL	2382:9	2382:9	10	0
FIELD	2382:9	2382:9	11	0
LEAF_NODE	2382:9	2382:9	12	0
LEAF_NODE	2382:10	2382:10	8	;
EXPR_STATEMENT	2383:3	2383:10	7	nb [ 1 ] = 1 ;
EXPR	2383:3	2383:3	8	nb [ 1 ] = 1
ASSIGN	2383:3	2383:9	9	nb [ 1 ] = 1
LVAL	2383:3	2383:3	10	nb [ 1 ]
FIELD	2383:3	2383:7	11	nb [ 1 ]
LEAF_NODE	2383:3	2383:3	12	nb
LEAF_NODE	2383:5	2383:5	12	[
EXPR	2383:6	2383:6	12	1
FIELD	2383:6	2383:6	13	1
LEAF_NODE	2383:6	2383:6	14	1
LEAF_NODE	2383:7	2383:7	12	]
ASSIGN_OP	2383:8	2383:8	10	=
LEAF_NODE	2383:8	2383:8	11	=
RVAL	2383:9	2383:9	10	1
FIELD	2383:9	2383:9	11	1
LEAF_NODE	2383:9	2383:9	12	1
LEAF_NODE	2383:10	2383:10	8	;
LEAF_NODE	2384:2	2384:2	6	}
SELECTION	2385:2	2385:7	4	
KEYWORD	2385:2	2385:2	5	else
LEAF_NODE	2385:2	2385:2	6	else
STATEMENTS	2385:7	2385:7	5	
SELECTION	2385:7	2387:2	6	
KEYWORD	2385:7	2385:7	7	if
LEAF_NODE	2385:7	2385:7	8	if
LEAF_NODE	2385:10	2385:10	7	(
CONDITION	2385:11	2385:11	7	* na >= 0 && * na <= ( float ) 0xFFFFFFFFU && * na == ( float ) ( uint32 ) ( * na )
EXPR	2385:11	2385:11	8	* na >= 0 && * na <= ( float ) 0xFFFFFFFFU && * na == ( float ) ( uint32 ) ( * na )
AND	2385:11	2385:23	9	* na >= 0 && * na <= ( float ) 0xFFFFFFFFU && * na == ( float ) ( uint32 ) ( * na )
EXPR	2385:11	2385:18	10	* na >= 0
UNARY_EXPR	2385:11	2385:12	11	* na
UNARY_OPERATOR	2385:11	2385:11	12	*
LEAF_NODE	2385:11	2385:11	13	*
FIELD	2385:12	2385:12	12	na
LEAF_NODE	2385:12	2385:12	13	na
REL_OPERATOR	2385:15	2385:15	11	>=
LEAF_NODE	2385:15	2385:15	12	>=
FIELD	2385:18	2385:18	11	0
LEAF_NODE	2385:18	2385:18	12	0
LEAF_NODE	2385:20	2385:20	10	&&
EXPR	2385:23	2385:23	10	* na <= ( float ) 0xFFFFFFFFU && * na == ( float ) ( uint32 ) ( * na )
AND	2385:23	2386:25	11	* na <= ( float ) 0xFFFFFFFFU && * na == ( float ) ( uint32 ) ( * na )
EXPR	2385:23	2385:37	12	* na <= ( float ) 0xFFFFFFFFU
UNARY_EXPR	2385:23	2385:24	13	* na
UNARY_OPERATOR	2385:23	2385:23	14	*
LEAF_NODE	2385:23	2385:23	15	*
FIELD	2385:24	2385:24	14	na
LEAF_NODE	2385:24	2385:24	15	na
REL_OPERATOR	2385:27	2385:27	13	<=
LEAF_NODE	2385:27	2385:27	14	<=
LEAF_NODE	2385:30	2385:30	13	(
TYPE_NAME	2385:31	2385:31	13	float
LEAF_NODE	2385:31	2385:31	14	float
LEAF_NODE	2385:36	2385:36	13	)
FIELD	2385:37	2385:37	13	0xFFFFFFFFU
LEAF_NODE	2385:37	2385:37	14	0xFFFFFFFFU
LEAF_NODE	2385:49	2385:49	12	&&
EXPR	2386:25	2386:49	12	* na == ( float ) ( uint32 ) ( * na )
UNARY_EXPR	2386:25	2386:26	13	* na
UNARY_OPERATOR	2386:25	2386:25	14	*
LEAF_NODE	2386:25	2386:25	15	*
FIELD	2386:26	2386:26	14	na
LEAF_NODE	2386:26	2386:26	15	na
EQ_OPERATOR	2386:28	2386:28	13	==
LEAF_NODE	2386:28	2386:28	14	==
LEAF_NODE	2386:30	2386:30	13	(
TYPE_NAME	2386:31	2386:31	13	float
LEAF_NODE	2386:31	2386:31	14	float
LEAF_NODE	2386:36	2386:36	13	)
LEAF_NODE	2386:37	2386:37	13	(
TYPE_NAME	2386:38	2386:38	13	uint32
LEAF_NODE	2386:38	2386:38	14	uint32
LEAF_NODE	2386:44	2386:44	13	)
LEAF_NODE	2386:45	2386:45	13	(
UNARY_EXPR	2386:46	2386:47	13	* na
UNARY_OPERATOR	2386:46	2386:46	14	*
LEAF_NODE	2386:46	2386:46	15	*
FIELD	2386:47	2386:47	14	na
LEAF_NODE	2386:47	2386:47	15	na
LEAF_NODE	2386:49	2386:49	13	)
LEAF_NODE	2386:50	2386:50	7	)
STATEMENTS	2387:2	2390:2	7	
LEAF_NODE	2387:2	2387:2	8	{
STATEMENTS	2388:3	2389:3	8	
EXPR_STATEMENT	2388:3	2388:22	9	nb [ 0 ] = ( uint32 ) ( * na ) ;
EXPR	2388:3	2388:3	10	nb [ 0 ] = ( uint32 ) ( * na )
ASSIGN	2388:3	2388:9	11	nb [ 0 ] = ( uint32 ) ( * na )
LVAL	2388:3	2388:3	12	nb [ 0 ]
FIELD	2388:3	2388:7	13	nb [ 0 ]
LEAF_NODE	2388:3	2388:3	14	nb
LEAF_NODE	2388:5	2388:5	14	[
EXPR	2388:6	2388:6	14	0
FIELD	2388:6	2388:6	15	0
LEAF_NODE	2388:6	2388:6	16	0
LEAF_NODE	2388:7	2388:7	14	]
ASSIGN_OP	2388:8	2388:8	12	=
LEAF_NODE	2388:8	2388:8	13	=
RVAL	2388:9	2388:21	12	( uint32 ) ( * na )
LEAF_NODE	2388:9	2388:9	13	(
TYPE_NAME	2388:10	2388:10	13	uint32
LEAF_NODE	2388:10	2388:10	14	uint32
LEAF_NODE	2388:16	2388:16	13	)
LEAF_NODE	2388:17	2388:17	13	(
UNARY_EXPR	2388:18	2388:19	13	* na
UNARY_OPERATOR	2388:18	2388:18	14	*
LEAF_NODE	2388:18	2388:18	15	*
FIELD	2388:19	2388:19	14	na
LEAF_NODE	2388:19	2388:19	15	na
LEAF_NODE	2388:21	2388:21	13	)
LEAF_NODE	2388:22	2388:22	10	;
EXPR_STATEMENT	2389:3	2389:10	9	nb [ 1 ] = 1 ;
EXPR	2389:3	2389:3	10	nb [ 1 ] = 1
ASSIGN	2389:3	2389:9	11	nb [ 1 ] = 1
LVAL	2389:3	2389:3	12	nb [ 1 ]
FIELD	2389:3	2389:7	13	nb [ 1 ]
LEAF_NODE	2389:3	2389:3	14	nb
LEAF_NODE	2389:5	2389:5	14	[
EXPR	2389:6	2389:6	14	1
FIELD	2389:6	2389:6	15	1
LEAF_NODE	2389:6	2389:6	16	1
LEAF_NODE	2389:7	2389:7	14	]
ASSIGN_OP	2389:8	2389:8	12	=
LEAF_NODE	2389:8	2389:8	13	=
RVAL	2389:9	2389:9	12	1
FIELD	2389:9	2389:9	13	1
LEAF_NODE	2389:9	2389:9	14	1
LEAF_NODE	2389:10	2389:10	10	;
LEAF_NODE	2390:2	2390:2	8	}
SELECTION	2391:2	2391:7	4	
KEYWORD	2391:2	2391:2	5	else
LEAF_NODE	2391:2	2391:2	6	else
STATEMENTS	2391:7	2391:7	5	
SELECTION	2391:7	2392:2	6	
KEYWORD	2391:7	2391:7	7	if
LEAF_NODE	2391:7	2391:7	8	if
LEAF_NODE	2391:10	2391:10	7	(
CONDITION	2391:11	2391:11	7	* na < 1.0
EXPR	2391:11	2391:15	8	* na < 1.0
UNARY_EXPR	2391:11	2391:12	9	* na
UNARY_OPERATOR	2391:11	2391:11	10	*
LEAF_NODE	2391:11	2391:11	11	*
FIELD	2391:12	2391:12	10	na
LEAF_NODE	2391:12	2391:12	11	na
REL_OPERATOR	2391:14	2391:14	9	<
LEAF_NODE	2391:14	2391:14	10	<
FIELD	2391:15	2391:15	9	1.0
LEAF_NODE	2391:15	2391:15	10	1.0
LEAF_NODE	2391:18	2391:18	7	)
STATEMENTS	2392:2	2395:2	7	
LEAF_NODE	2392:2	2392:2	8	{
STATEMENTS	2393:3	2394:3	8	
EXPR_STATEMENT	2393:3	2393:43	9	nb [ 0 ] = ( uint32 ) ( ( double ) ( * na ) * 0xFFFFFFFF ) ;
EXPR	2393:3	2393:3	10	nb [ 0 ] = ( uint32 ) ( ( double ) ( * na ) * 0xFFFFFFFF )
ASSIGN	2393:3	2393:9	11	nb [ 0 ] = ( uint32 ) ( ( double ) ( * na ) * 0xFFFFFFFF )
LVAL	2393:3	2393:3	12	nb [ 0 ]
FIELD	2393:3	2393:7	13	nb [ 0 ]
LEAF_NODE	2393:3	2393:3	14	nb
LEAF_NODE	2393:5	2393:5	14	[
EXPR	2393:6	2393:6	14	0
FIELD	2393:6	2393:6	15	0
LEAF_NODE	2393:6	2393:6	16	0
LEAF_NODE	2393:7	2393:7	14	]
ASSIGN_OP	2393:8	2393:8	12	=
LEAF_NODE	2393:8	2393:8	13	=
RVAL	2393:9	2393:42	12	( uint32 ) ( ( double ) ( * na ) * 0xFFFFFFFF )
LEAF_NODE	2393:9	2393:9	13	(
TYPE_NAME	2393:10	2393:10	13	uint32
LEAF_NODE	2393:10	2393:10	14	uint32
LEAF_NODE	2393:16	2393:16	13	)
LEAF_NODE	2393:17	2393:17	13	(
LEAF_NODE	2393:18	2393:18	13	(
TYPE_NAME	2393:19	2393:19	13	double
LEAF_NODE	2393:19	2393:19	14	double
LEAF_NODE	2393:25	2393:25	13	)
LEAF_NODE	2393:26	2393:26	13	(
UNARY_EXPR	2393:27	2393:28	13	* na
UNARY_OPERATOR	2393:27	2393:27	14	*
LEAF_NODE	2393:27	2393:27	15	*
FIELD	2393:28	2393:28	14	na
LEAF_NODE	2393:28	2393:28	15	na
LEAF_NODE	2393:30	2393:30	13	)
LEAF_NODE	2393:31	2393:31	13	*
FIELD	2393:32	2393:32	13	0xFFFFFFFF
LEAF_NODE	2393:32	2393:32	14	0xFFFFFFFF
LEAF_NODE	2393:42	2393:42	13	)
LEAF_NODE	2393:43	2393:43	10	;
EXPR_STATEMENT	2394:3	2394:19	9	nb [ 1 ] = 0xFFFFFFFF ;
EXPR	2394:3	2394:3	10	nb [ 1 ] = 0xFFFFFFFF
ASSIGN	2394:3	2394:9	11	nb [ 1 ] = 0xFFFFFFFF
LVAL	2394:3	2394:3	12	nb [ 1 ]
FIELD	2394:3	2394:7	13	nb [ 1 ]
LEAF_NODE	2394:3	2394:3	14	nb
LEAF_NODE	2394:5	2394:5	14	[
EXPR	2394:6	2394:6	14	1
FIELD	2394:6	2394:6	15	1
LEAF_NODE	2394:6	2394:6	16	1
LEAF_NODE	2394:7	2394:7	14	]
ASSIGN_OP	2394:8	2394:8	12	=
LEAF_NODE	2394:8	2394:8	13	=
RVAL	2394:9	2394:9	12	0xFFFFFFFF
FIELD	2394:9	2394:9	13	0xFFFFFFFF
LEAF_NODE	2394:9	2394:9	14	0xFFFFFFFF
LEAF_NODE	2394:19	2394:19	10	;
LEAF_NODE	2395:2	2395:2	8	}
SELECTION	2396:2	2397:2	4	
KEYWORD	2396:2	2396:2	5	else
LEAF_NODE	2396:2	2396:2	6	else
STATEMENTS	2397:2	2400:2	5	
LEAF_NODE	2397:2	2397:2	6	{
STATEMENTS	2398:3	2399:3	6	
EXPR_STATEMENT	2398:3	2398:19	7	nb [ 0 ] = 0xFFFFFFFF ;
EXPR	2398:3	2398:3	8	nb [ 0 ] = 0xFFFFFFFF
ASSIGN	2398:3	2398:9	9	nb [ 0 ] = 0xFFFFFFFF
LVAL	2398:3	2398:3	10	nb [ 0 ]
FIELD	2398:3	2398:7	11	nb [ 0 ]
LEAF_NODE	2398:3	2398:3	12	nb
LEAF_NODE	2398:5	2398:5	12	[
EXPR	2398:6	2398:6	12	0
FIELD	2398:6	2398:6	13	0
LEAF_NODE	2398:6	2398:6	14	0
LEAF_NODE	2398:7	2398:7	12	]
ASSIGN_OP	2398:8	2398:8	10	=
LEAF_NODE	2398:8	2398:8	11	=
RVAL	2398:9	2398:9	10	0xFFFFFFFF
FIELD	2398:9	2398:9	11	0xFFFFFFFF
LEAF_NODE	2398:9	2398:9	12	0xFFFFFFFF
LEAF_NODE	2398:19	2398:19	8	;
EXPR_STATEMENT	2399:3	2399:43	7	nb [ 1 ] = ( uint32 ) ( ( double ) 0xFFFFFFFF / ( * na ) ) ;
EXPR	2399:3	2399:3	8	nb [ 1 ] = ( uint32 ) ( ( double ) 0xFFFFFFFF / ( * na ) )
ASSIGN	2399:3	2399:9	9	nb [ 1 ] = ( uint32 ) ( ( double ) 0xFFFFFFFF / ( * na ) )
LVAL	2399:3	2399:3	10	nb [ 1 ]
FIELD	2399:3	2399:7	11	nb [ 1 ]
LEAF_NODE	2399:3	2399:3	12	nb
LEAF_NODE	2399:5	2399:5	12	[
EXPR	2399:6	2399:6	12	1
FIELD	2399:6	2399:6	13	1
LEAF_NODE	2399:6	2399:6	14	1
LEAF_NODE	2399:7	2399:7	12	]
ASSIGN_OP	2399:8	2399:8	10	=
LEAF_NODE	2399:8	2399:8	11	=
RVAL	2399:9	2399:42	10	( uint32 ) ( ( double ) 0xFFFFFFFF / ( * na ) )
LEAF_NODE	2399:9	2399:9	11	(
TYPE_NAME	2399:10	2399:10	11	uint32
LEAF_NODE	2399:10	2399:10	12	uint32
LEAF_NODE	2399:16	2399:16	11	)
LEAF_NODE	2399:17	2399:17	11	(
LEAF_NODE	2399:18	2399:18	11	(
TYPE_NAME	2399:19	2399:19	11	double
LEAF_NODE	2399:19	2399:19	12	double
LEAF_NODE	2399:25	2399:25	11	)
FIELD	2399:26	2399:26	11	0xFFFFFFFF
LEAF_NODE	2399:26	2399:26	12	0xFFFFFFFF
LEAF_NODE	2399:36	2399:36	11	/
LEAF_NODE	2399:37	2399:37	11	(
UNARY_EXPR	2399:38	2399:39	11	* na
UNARY_OPERATOR	2399:38	2399:38	12	*
LEAF_NODE	2399:38	2399:38	13	*
FIELD	2399:39	2399:39	12	na
LEAF_NODE	2399:39	2399:39	13	na
LEAF_NODE	2399:41	2399:41	11	)
LEAF_NODE	2399:42	2399:42	11	)
LEAF_NODE	2399:43	2399:43	8	;
LEAF_NODE	2400:2	2400:2	6	}
LEAF_NODE	2401:1	2401:1	3	}
SELECTION	2402:1	2403:2	3	
KEYWORD	2402:1	2402:1	4	if
LEAF_NODE	2402:1	2402:1	5	if
LEAF_NODE	2402:4	2402:4	4	(
CONDITION	2402:5	2402:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2402:5	2402:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2402:5	2402:10	6	tif -> tif_flags
LEAF_NODE	2402:5	2402:5	7	tif
LEAF_NODE	2402:8	2402:8	7	->
LEAF_NODE	2402:10	2402:10	7	tif_flags
LEAF_NODE	2402:19	2402:19	6	&
FIELD	2402:20	2402:20	6	TIFF_SWAB
LEAF_NODE	2402:20	2402:20	7	TIFF_SWAB
LEAF_NODE	2402:29	2402:29	4	)
STATEMENTS	2403:2	2403:2	4	
EXPR_STATEMENT	2403:2	2403:32	5	TIFFSwabArrayOfLong ( m , count * 2 ) ;
EXPR	2403:2	2403:2	6	TIFFSwabArrayOfLong ( m , count * 2 )
FUNCTION_CALL	2403:2	2403:31	7	TIFFSwabArrayOfLong ( m , count * 2 )
CALLEE	2403:2	2403:2	8	TIFFSwabArrayOfLong
LEAF_NODE	2403:2	2403:2	9	TIFFSwabArrayOfLong
LEAF_NODE	2403:21	2403:21	8	(
ARGUMENT	2403:22	2403:22	8	m
FIELD	2403:22	2403:22	9	m
LEAF_NODE	2403:22	2403:22	10	m
LEAF_NODE	2403:23	2403:23	8	,
ARGUMENT	2403:24	2403:30	8	count * 2
FIELD	2403:24	2403:24	9	count
LEAF_NODE	2403:24	2403:24	10	count
LEAF_NODE	2403:29	2403:29	9	*
FIELD	2403:30	2403:30	9	2
LEAF_NODE	2403:30	2403:30	10	2
LEAF_NODE	2403:31	2403:31	8	)
LEAF_NODE	2403:32	2403:32	6	;
EXPR_STATEMENT	2404:1	2404:80	3	o = TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_RATIONAL , count , count * 8 , & m [ 0 ] ) ;
EXPR	2404:1	2404:1	4	o = TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_RATIONAL , count , count * 8 , & m [ 0 ] )
ASSIGN	2404:1	2404:3	5	o = TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_RATIONAL , count , count * 8 , & m [ 0 ] )
LVAL	2404:1	2404:1	6	o
FIELD	2404:1	2404:1	7	o
LEAF_NODE	2404:1	2404:1	8	o
ASSIGN_OP	2404:2	2404:2	6	=
LEAF_NODE	2404:2	2404:2	7	=
RVAL	2404:3	2404:3	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_RATIONAL , count , count * 8 , & m [ 0 ] )
FUNCTION_CALL	2404:3	2404:79	7	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_RATIONAL , count , count * 8 , & m [ 0 ] )
CALLEE	2404:3	2404:3	8	TIFFWriteDirectoryTagData
LEAF_NODE	2404:3	2404:3	9	TIFFWriteDirectoryTagData
LEAF_NODE	2404:28	2404:28	8	(
ARGUMENT	2404:29	2404:29	8	tif
FIELD	2404:29	2404:29	9	tif
LEAF_NODE	2404:29	2404:29	10	tif
LEAF_NODE	2404:32	2404:32	8	,
ARGUMENT	2404:33	2404:33	8	ndir
FIELD	2404:33	2404:33	9	ndir
LEAF_NODE	2404:33	2404:33	10	ndir
LEAF_NODE	2404:37	2404:37	8	,
ARGUMENT	2404:38	2404:38	8	dir
FIELD	2404:38	2404:38	9	dir
LEAF_NODE	2404:38	2404:38	10	dir
LEAF_NODE	2404:41	2404:41	8	,
ARGUMENT	2404:42	2404:42	8	tag
FIELD	2404:42	2404:42	9	tag
LEAF_NODE	2404:42	2404:42	10	tag
LEAF_NODE	2404:45	2404:45	8	,
ARGUMENT	2404:46	2404:46	8	TIFF_RATIONAL
FIELD	2404:46	2404:46	9	TIFF_RATIONAL
LEAF_NODE	2404:46	2404:46	10	TIFF_RATIONAL
LEAF_NODE	2404:59	2404:59	8	,
ARGUMENT	2404:60	2404:60	8	count
FIELD	2404:60	2404:60	9	count
LEAF_NODE	2404:60	2404:60	10	count
LEAF_NODE	2404:65	2404:65	8	,
ARGUMENT	2404:66	2404:72	8	count * 8
FIELD	2404:66	2404:66	9	count
LEAF_NODE	2404:66	2404:66	10	count
LEAF_NODE	2404:71	2404:71	9	*
FIELD	2404:72	2404:72	9	8
LEAF_NODE	2404:72	2404:72	10	8
LEAF_NODE	2404:73	2404:73	8	,
ARGUMENT	2404:74	2404:74	8	& m [ 0 ]
UNARY_EXPR	2404:74	2404:75	9	& m [ 0 ]
UNARY_OPERATOR	2404:74	2404:74	10	&
LEAF_NODE	2404:74	2404:74	11	&
FIELD	2404:75	2404:78	10	m [ 0 ]
LEAF_NODE	2404:75	2404:75	11	m
LEAF_NODE	2404:76	2404:76	11	[
EXPR	2404:77	2404:77	11	0
FIELD	2404:77	2404:77	12	0
LEAF_NODE	2404:77	2404:77	13	0
LEAF_NODE	2404:78	2404:78	11	]
LEAF_NODE	2404:79	2404:79	8	)
LEAF_NODE	2404:80	2404:80	4	;
EXPR_STATEMENT	2405:1	2405:13	3	_TIFFfree ( m ) ;
EXPR	2405:1	2405:1	4	_TIFFfree ( m )
FUNCTION_CALL	2405:1	2405:12	5	_TIFFfree ( m )
CALLEE	2405:1	2405:1	6	_TIFFfree
LEAF_NODE	2405:1	2405:1	7	_TIFFfree
LEAF_NODE	2405:10	2405:10	6	(
ARGUMENT	2405:11	2405:11	6	m
FIELD	2405:11	2405:11	7	m
LEAF_NODE	2405:11	2405:11	8	m
LEAF_NODE	2405:12	2405:12	6	)
LEAF_NODE	2405:13	2405:13	4	;
LEAF_NODE	2406:1	2406:1	3	return
LEAF_NODE	2406:7	2406:7	3	(
LEAF_NODE	2406:8	2406:8	3	o
LEAF_NODE	2406:9	2406:9	3	)
LEAF_NODE	2406:10	2406:10	3	;
LEAF_NODE	2407:0	2407:0	2	}
FUNCTION_DEF	2409:0	2469:0	1	
RETURN_TYPE	2409:0	2409:7	2	static int
LEAF_NODE	2409:0	2409:0	3	static
TYPE_NAME	2409:7	2409:7	3	int
LEAF_NODE	2409:7	2409:7	4	int
FUNCTION_NAME	2410:0	2410:0	2	TIFFWriteDirectoryTagCheckedSrationalArray
LEAF_NODE	2410:0	2410:0	3	TIFFWriteDirectoryTagCheckedSrationalArray
PARAMETER_LIST	2410:42	2410:125	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , float * value )
LEAF_NODE	2410:42	2410:42	3	(
PARAMETER_DECL	2410:43	2410:49	3	TIFF * tif
TYPE	2410:43	2410:47	4	TIFF *
TYPE_NAME	2410:43	2410:43	5	TIFF
LEAF_NODE	2410:43	2410:43	6	TIFF
POINTER	2410:47	2410:47	5	*
LEAF_NODE	2410:47	2410:47	6	*
NAME	2410:49	2410:49	4	tif
LEAF_NODE	2410:49	2410:49	5	tif
LEAF_NODE	2410:52	2410:52	3	,
PARAMETER_DECL	2410:54	2410:62	3	uint32 * ndir
TYPE	2410:54	2410:60	4	uint32 *
TYPE_NAME	2410:54	2410:54	5	uint32
LEAF_NODE	2410:54	2410:54	6	uint32
POINTER	2410:60	2410:60	5	*
LEAF_NODE	2410:60	2410:60	6	*
NAME	2410:62	2410:62	4	ndir
LEAF_NODE	2410:62	2410:62	5	ndir
LEAF_NODE	2410:66	2410:66	3	,
PARAMETER_DECL	2410:68	2410:82	3	TIFFDirEntry * dir
TYPE	2410:68	2410:80	4	TIFFDirEntry *
TYPE_NAME	2410:68	2410:68	5	TIFFDirEntry
LEAF_NODE	2410:68	2410:68	6	TIFFDirEntry
POINTER	2410:80	2410:80	5	*
LEAF_NODE	2410:80	2410:80	6	*
NAME	2410:82	2410:82	4	dir
LEAF_NODE	2410:82	2410:82	5	dir
LEAF_NODE	2410:85	2410:85	3	,
PARAMETER_DECL	2410:87	2410:94	3	uint16 tag
TYPE	2410:87	2410:87	4	uint16
TYPE_NAME	2410:87	2410:87	5	uint16
LEAF_NODE	2410:87	2410:87	6	uint16
NAME	2410:94	2410:94	4	tag
LEAF_NODE	2410:94	2410:94	5	tag
LEAF_NODE	2410:97	2410:97	3	,
PARAMETER_DECL	2410:99	2410:106	3	uint32 count
TYPE	2410:99	2410:99	4	uint32
TYPE_NAME	2410:99	2410:99	5	uint32
LEAF_NODE	2410:99	2410:99	6	uint32
NAME	2410:106	2410:106	4	count
LEAF_NODE	2410:106	2410:106	5	count
LEAF_NODE	2410:111	2410:111	3	,
PARAMETER_DECL	2410:113	2410:120	3	float * value
TYPE	2410:113	2410:118	4	float *
TYPE_NAME	2410:113	2410:113	5	float
LEAF_NODE	2410:113	2410:113	6	float
POINTER	2410:118	2410:118	5	*
LEAF_NODE	2410:118	2410:118	6	*
NAME	2410:120	2410:120	4	value
LEAF_NODE	2410:120	2410:120	5	value
LEAF_NODE	2410:125	2410:125	3	)
LEAF_NODE	2411:0	2411:0	2	{
STATEMENTS	2412:1	2468:10	2	
LEAF_NODE	2412:1	2412:1	3	static
SIMPLE_DECL	2412:8	2412:74	3	const char [ ] module ; module = "TIFFWriteDirectoryTagCheckedSrationalArray" ;
VAR_DECL	2412:8	2412:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagCheckedSrationalArray"
TYPE	2412:8	2412:25	5	const char [ ]
TYPE_NAME	2412:8	2412:14	6	const char
LEAF_NODE	2412:8	2412:8	7	const
LEAF_NODE	2412:14	2412:14	7	char
TYPE_SUFFIX	2412:25	2412:26	6	[ ]
LEAF_NODE	2412:25	2412:25	7	[
LEAF_NODE	2412:26	2412:26	7	]
NAME	2412:19	2412:19	5	module
LEAF_NODE	2412:19	2412:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2412:19	2412:19	5	module = "TIFFWriteDirectoryTagCheckedSrationalArray"
ASSIGN	2412:19	2412:30	6	module = "TIFFWriteDirectoryTagCheckedSrationalArray"
LVAL	2412:19	2412:19	7	module
NAME	2412:19	2412:19	8	module
LEAF_NODE	2412:19	2412:19	9	module
ASSIGN_OP	2412:28	2412:28	7	=
LEAF_NODE	2412:28	2412:28	8	=
RVAL	2412:30	2412:30	7	"TIFFWriteDirectoryTagCheckedSrationalArray"
FIELD	2412:30	2412:30	8	"TIFFWriteDirectoryTagCheckedSrationalArray"
LEAF_NODE	2412:30	2412:30	9	"TIFFWriteDirectoryTagCheckedSrationalArray"
LEAF_NODE	2412:74	2412:74	4	;
SIMPLE_DECL	2413:1	2413:9	3	int32 * m ;
VAR_DECL	2413:1	2413:8	4	int32 * m
TYPE	2413:1	2413:6	5	int32 *
TYPE_NAME	2413:1	2413:1	6	int32
LEAF_NODE	2413:1	2413:1	7	int32
POINTER	2413:6	2413:6	6	*
LEAF_NODE	2413:6	2413:6	7	*
NAME	2413:8	2413:8	5	m
LEAF_NODE	2413:8	2413:8	6	m
LEAF_NODE	2413:9	2413:9	4	;
SIMPLE_DECL	2414:1	2414:10	3	float * na ;
VAR_DECL	2414:1	2414:8	4	float * na
TYPE	2414:1	2414:6	5	float *
TYPE_NAME	2414:1	2414:1	6	float
LEAF_NODE	2414:1	2414:1	7	float
POINTER	2414:6	2414:6	6	*
LEAF_NODE	2414:6	2414:6	7	*
NAME	2414:8	2414:8	5	na
LEAF_NODE	2414:8	2414:8	6	na
LEAF_NODE	2414:10	2414:10	4	;
SIMPLE_DECL	2415:1	2415:10	3	int32 * nb ;
VAR_DECL	2415:1	2415:8	4	int32 * nb
TYPE	2415:1	2415:6	5	int32 *
TYPE_NAME	2415:1	2415:1	6	int32
LEAF_NODE	2415:1	2415:1	7	int32
POINTER	2415:6	2415:6	6	*
LEAF_NODE	2415:6	2415:6	7	*
NAME	2415:8	2415:8	5	nb
LEAF_NODE	2415:8	2415:8	6	nb
LEAF_NODE	2415:10	2415:10	4	;
SIMPLE_DECL	2416:1	2416:10	3	uint32 nc ;
VAR_DECL	2416:1	2416:8	4	uint32 nc
TYPE	2416:1	2416:1	5	uint32
TYPE_NAME	2416:1	2416:1	6	uint32
LEAF_NODE	2416:1	2416:1	7	uint32
NAME	2416:8	2416:8	5	nc
LEAF_NODE	2416:8	2416:8	6	nc
LEAF_NODE	2416:10	2416:10	4	;
SIMPLE_DECL	2417:1	2417:6	3	int o ;
VAR_DECL	2417:1	2417:5	4	int o
TYPE	2417:1	2417:1	5	int
TYPE_NAME	2417:1	2417:1	6	int
LEAF_NODE	2417:1	2417:1	7	int
NAME	2417:5	2417:5	5	o
LEAF_NODE	2417:5	2417:5	6	o
LEAF_NODE	2417:6	2417:6	4	;
EXPR_STATEMENT	2418:1	2418:25	3	assert ( sizeof ( int32 ) == 4 ) ;
EXPR	2418:1	2418:1	4	assert ( sizeof ( int32 ) == 4 )
FUNCTION_CALL	2418:1	2418:24	5	assert ( sizeof ( int32 ) == 4 )
CALLEE	2418:1	2418:1	6	assert
LEAF_NODE	2418:1	2418:1	7	assert
LEAF_NODE	2418:7	2418:7	6	(
ARGUMENT	2418:8	2418:23	6	sizeof ( int32 ) == 4
FUNCTION_CALL	2418:8	2418:20	7	sizeof ( int32 )
CALLEE	2418:8	2418:8	8	sizeof
LEAF_NODE	2418:8	2418:8	9	sizeof
LEAF_NODE	2418:14	2418:14	8	(
ARGUMENT	2418:15	2418:15	8	int32
FIELD	2418:15	2418:15	9	int32
LEAF_NODE	2418:15	2418:15	10	int32
LEAF_NODE	2418:20	2418:20	8	)
EQ_OPERATOR	2418:21	2418:21	7	==
LEAF_NODE	2418:21	2418:21	8	==
FIELD	2418:23	2418:23	7	4
LEAF_NODE	2418:23	2418:23	8	4
LEAF_NODE	2418:24	2418:24	6	)
LEAF_NODE	2418:25	2418:25	4	;
LEAF_NODE	2419:1	2419:1	3	m
LEAF_NODE	2419:2	2419:2	3	=
LEAF_NODE	2419:3	2419:3	3	_TIFFmalloc
LEAF_NODE	2419:14	2419:14	3	(
LEAF_NODE	2419:15	2419:15	3	count
LEAF_NODE	2419:20	2419:20	3	*
LEAF_NODE	2419:21	2419:21	3	2
LEAF_NODE	2419:22	2419:22	3	*
LEAF_NODE	2419:23	2419:23	3	sizeof
LEAF_NODE	2419:29	2419:29	3	(
LEAF_NODE	2419:30	2419:30	3	int32
LEAF_NODE	2419:35	2419:35	3	)
LEAF_NODE	2419:36	2419:36	3	)
LEAF_NODE	2419:37	2419:37	3	;
SELECTION	2420:1	2421:1	3	
KEYWORD	2420:1	2420:1	4	if
LEAF_NODE	2420:1	2420:1	5	if
LEAF_NODE	2420:4	2420:4	4	(
CONDITION	2420:5	2420:5	4	m == NULL
EXPR	2420:5	2420:8	5	m == NULL
FIELD	2420:5	2420:5	6	m
LEAF_NODE	2420:5	2420:5	7	m
EQ_OPERATOR	2420:6	2420:6	6	==
LEAF_NODE	2420:6	2420:6	7	==
FIELD	2420:8	2420:8	6	NULL
LEAF_NODE	2420:8	2420:8	7	NULL
LEAF_NODE	2420:12	2420:12	4	)
STATEMENTS	2421:1	2424:1	4	
LEAF_NODE	2421:1	2421:1	5	{
STATEMENTS	2422:2	2423:2	5	
EXPR_STATEMENT	2422:2	2422:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	2422:2	2422:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	2422:2	2422:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	2422:2	2422:2	9	TIFFErrorExt
LEAF_NODE	2422:2	2422:2	10	TIFFErrorExt
LEAF_NODE	2422:14	2422:14	9	(
ARGUMENT	2422:15	2422:15	9	tif -> tif_clientdata
FIELD	2422:15	2422:20	10	tif -> tif_clientdata
LEAF_NODE	2422:15	2422:15	11	tif
LEAF_NODE	2422:18	2422:18	11	->
LEAF_NODE	2422:20	2422:20	11	tif_clientdata
LEAF_NODE	2422:34	2422:34	9	,
ARGUMENT	2422:35	2422:35	9	module
FIELD	2422:35	2422:35	10	module
LEAF_NODE	2422:35	2422:35	11	module
LEAF_NODE	2422:41	2422:41	9	,
ARGUMENT	2422:42	2422:42	9	"Out of memory"
FIELD	2422:42	2422:42	10	"Out of memory"
LEAF_NODE	2422:42	2422:42	11	"Out of memory"
LEAF_NODE	2422:57	2422:57	9	)
LEAF_NODE	2422:58	2422:58	7	;
JUMP_STATEMENT	2423:2	2423:11	6	return ( 0 ) ;
KEYWORD	2423:2	2423:2	7	return
LEAF_NODE	2423:2	2423:2	8	return
DESTINATION	2423:8	2423:8	7	( 0 )
EXPR	2423:8	2423:10	8	( 0 )
LEAF_NODE	2423:8	2423:8	9	(
FIELD	2423:9	2423:9	9	0
LEAF_NODE	2423:9	2423:9	10	0
LEAF_NODE	2423:10	2423:10	9	)
LEAF_NODE	2423:11	2423:11	7	;
LEAF_NODE	2424:1	2424:1	5	}
LEAF_NODE	2425:1	2425:1	3	for
LEAF_NODE	2425:5	2425:5	3	(
LEAF_NODE	2425:6	2425:6	3	na
LEAF_NODE	2425:8	2425:8	3	=
LEAF_NODE	2425:9	2425:9	3	value
LEAF_NODE	2425:14	2425:14	3	,
EXPR_STATEMENT	2425:16	2425:26	3	nb = m , nc = 0 ;
EXPR	2425:16	2425:22	4	nb = m , nc = 0
ASSIGN	2425:16	2425:19	5	nb = m
LVAL	2425:16	2425:16	6	nb
FIELD	2425:16	2425:16	7	nb
LEAF_NODE	2425:16	2425:16	8	nb
ASSIGN_OP	2425:18	2425:18	6	=
LEAF_NODE	2425:18	2425:18	7	=
RVAL	2425:19	2425:19	6	m
FIELD	2425:19	2425:19	7	m
LEAF_NODE	2425:19	2425:19	8	m
LEAF_NODE	2425:20	2425:20	5	,
ASSIGN	2425:22	2425:25	5	nc = 0
LVAL	2425:22	2425:22	6	nc
FIELD	2425:22	2425:22	7	nc
LEAF_NODE	2425:22	2425:22	8	nc
ASSIGN_OP	2425:24	2425:24	6	=
LEAF_NODE	2425:24	2425:24	7	=
RVAL	2425:25	2425:25	6	0
FIELD	2425:25	2425:25	7	0
LEAF_NODE	2425:25	2425:25	8	0
LEAF_NODE	2425:26	2425:26	4	;
EXPR_STATEMENT	2425:28	2425:36	3	nc < count ;
EXPR	2425:28	2425:31	4	nc < count
FIELD	2425:28	2425:28	5	nc
LEAF_NODE	2425:28	2425:28	6	nc
REL_OPERATOR	2425:30	2425:30	5	<
LEAF_NODE	2425:30	2425:30	6	<
FIELD	2425:31	2425:31	5	count
LEAF_NODE	2425:31	2425:31	6	count
LEAF_NODE	2425:36	2425:36	4	;
LEAF_NODE	2425:38	2425:38	3	na
LEAF_NODE	2425:40	2425:40	3	++
LEAF_NODE	2425:42	2425:42	3	,
LEAF_NODE	2425:44	2425:44	3	nb
LEAF_NODE	2425:46	2425:46	3	+=
LEAF_NODE	2425:48	2425:48	3	2
LEAF_NODE	2425:49	2425:49	3	,
LEAF_NODE	2425:51	2425:51	3	nc
LEAF_NODE	2425:53	2425:53	3	++
LEAF_NODE	2425:55	2425:55	3	)
LEAF_NODE	2426:1	2426:1	3	{
STATEMENTS	2427:2	2445:2	3	
SELECTION	2427:2	2428:2	4	
KEYWORD	2427:2	2427:2	5	if
LEAF_NODE	2427:2	2427:2	6	if
LEAF_NODE	2427:5	2427:5	5	(
CONDITION	2427:6	2427:6	5	* na < 0.0
EXPR	2427:6	2427:10	6	* na < 0.0
UNARY_EXPR	2427:6	2427:7	7	* na
UNARY_OPERATOR	2427:6	2427:6	8	*
LEAF_NODE	2427:6	2427:6	9	*
FIELD	2427:7	2427:7	8	na
LEAF_NODE	2427:7	2427:7	9	na
REL_OPERATOR	2427:9	2427:9	7	<
LEAF_NODE	2427:9	2427:9	8	<
FIELD	2427:10	2427:10	7	0.0
LEAF_NODE	2427:10	2427:10	8	0.0
LEAF_NODE	2427:13	2427:13	5	)
STATEMENTS	2428:2	2444:2	5	
LEAF_NODE	2428:2	2428:2	6	{
STATEMENTS	2429:3	2439:3	6	
SELECTION	2429:3	2430:3	7	
KEYWORD	2429:3	2429:3	8	if
LEAF_NODE	2429:3	2429:3	9	if
LEAF_NODE	2429:6	2429:6	8	(
CONDITION	2429:7	2429:7	8	* na == ( int32 ) ( * na )
EXPR	2429:7	2429:23	9	* na == ( int32 ) ( * na )
UNARY_EXPR	2429:7	2429:8	10	* na
UNARY_OPERATOR	2429:7	2429:7	11	*
LEAF_NODE	2429:7	2429:7	12	*
FIELD	2429:8	2429:8	11	na
LEAF_NODE	2429:8	2429:8	12	na
EQ_OPERATOR	2429:10	2429:10	10	==
LEAF_NODE	2429:10	2429:10	11	==
LEAF_NODE	2429:12	2429:12	10	(
TYPE_NAME	2429:13	2429:13	10	int32
LEAF_NODE	2429:13	2429:13	11	int32
LEAF_NODE	2429:18	2429:18	10	)
LEAF_NODE	2429:19	2429:19	10	(
UNARY_EXPR	2429:20	2429:21	10	* na
UNARY_OPERATOR	2429:20	2429:20	11	*
LEAF_NODE	2429:20	2429:20	12	*
FIELD	2429:21	2429:21	11	na
LEAF_NODE	2429:21	2429:21	12	na
LEAF_NODE	2429:23	2429:23	10	)
LEAF_NODE	2429:24	2429:24	8	)
STATEMENTS	2430:3	2433:3	8	
LEAF_NODE	2430:3	2430:3	9	{
STATEMENTS	2431:4	2432:4	9	
EXPR_STATEMENT	2431:4	2431:22	10	nb [ 0 ] = ( int32 ) ( * na ) ;
EXPR	2431:4	2431:4	11	nb [ 0 ] = ( int32 ) ( * na )
ASSIGN	2431:4	2431:10	12	nb [ 0 ] = ( int32 ) ( * na )
LVAL	2431:4	2431:4	13	nb [ 0 ]
FIELD	2431:4	2431:8	14	nb [ 0 ]
LEAF_NODE	2431:4	2431:4	15	nb
LEAF_NODE	2431:6	2431:6	15	[
EXPR	2431:7	2431:7	15	0
FIELD	2431:7	2431:7	16	0
LEAF_NODE	2431:7	2431:7	17	0
LEAF_NODE	2431:8	2431:8	15	]
ASSIGN_OP	2431:9	2431:9	13	=
LEAF_NODE	2431:9	2431:9	14	=
RVAL	2431:10	2431:21	13	( int32 ) ( * na )
LEAF_NODE	2431:10	2431:10	14	(
TYPE_NAME	2431:11	2431:11	14	int32
LEAF_NODE	2431:11	2431:11	15	int32
LEAF_NODE	2431:16	2431:16	14	)
LEAF_NODE	2431:17	2431:17	14	(
UNARY_EXPR	2431:18	2431:19	14	* na
UNARY_OPERATOR	2431:18	2431:18	15	*
LEAF_NODE	2431:18	2431:18	16	*
FIELD	2431:19	2431:19	15	na
LEAF_NODE	2431:19	2431:19	16	na
LEAF_NODE	2431:21	2431:21	14	)
LEAF_NODE	2431:22	2431:22	11	;
EXPR_STATEMENT	2432:4	2432:11	10	nb [ 1 ] = 1 ;
EXPR	2432:4	2432:4	11	nb [ 1 ] = 1
ASSIGN	2432:4	2432:10	12	nb [ 1 ] = 1
LVAL	2432:4	2432:4	13	nb [ 1 ]
FIELD	2432:4	2432:8	14	nb [ 1 ]
LEAF_NODE	2432:4	2432:4	15	nb
LEAF_NODE	2432:6	2432:6	15	[
EXPR	2432:7	2432:7	15	1
FIELD	2432:7	2432:7	16	1
LEAF_NODE	2432:7	2432:7	17	1
LEAF_NODE	2432:8	2432:8	15	]
ASSIGN_OP	2432:9	2432:9	13	=
LEAF_NODE	2432:9	2432:9	14	=
RVAL	2432:10	2432:10	13	1
FIELD	2432:10	2432:10	14	1
LEAF_NODE	2432:10	2432:10	15	1
LEAF_NODE	2432:11	2432:11	11	;
LEAF_NODE	2433:3	2433:3	9	}
SELECTION	2434:3	2434:8	7	
KEYWORD	2434:3	2434:3	8	else
LEAF_NODE	2434:3	2434:3	9	else
STATEMENTS	2434:8	2434:8	8	
SELECTION	2434:8	2435:3	9	
KEYWORD	2434:8	2434:8	10	if
LEAF_NODE	2434:8	2434:8	11	if
LEAF_NODE	2434:11	2434:11	10	(
CONDITION	2434:12	2434:12	10	* na > - 1.0
EXPR	2434:12	2434:16	11	* na > - 1.0
UNARY_EXPR	2434:12	2434:13	12	* na
UNARY_OPERATOR	2434:12	2434:12	13	*
LEAF_NODE	2434:12	2434:12	14	*
FIELD	2434:13	2434:13	13	na
LEAF_NODE	2434:13	2434:13	14	na
REL_OPERATOR	2434:15	2434:15	12	>
LEAF_NODE	2434:15	2434:15	13	>
UNARY_EXPR	2434:16	2434:17	12	- 1.0
UNARY_OPERATOR	2434:16	2434:16	13	-
LEAF_NODE	2434:16	2434:16	14	-
FIELD	2434:17	2434:17	13	1.0
LEAF_NODE	2434:17	2434:17	14	1.0
LEAF_NODE	2434:20	2434:20	10	)
STATEMENTS	2435:3	2438:3	10	
LEAF_NODE	2435:3	2435:3	11	{
STATEMENTS	2436:4	2437:4	11	
EXPR_STATEMENT	2436:4	2436:45	12	nb [ 0 ] = - ( int32 ) ( ( double ) ( - * na ) * 0x7FFFFFFF ) ;
EXPR	2436:4	2436:4	13	nb [ 0 ] = - ( int32 ) ( ( double ) ( - * na ) * 0x7FFFFFFF )
ASSIGN	2436:4	2436:10	14	nb [ 0 ] = - ( int32 ) ( ( double ) ( - * na ) * 0x7FFFFFFF )
LVAL	2436:4	2436:4	15	nb [ 0 ]
FIELD	2436:4	2436:8	16	nb [ 0 ]
LEAF_NODE	2436:4	2436:4	17	nb
LEAF_NODE	2436:6	2436:6	17	[
EXPR	2436:7	2436:7	17	0
FIELD	2436:7	2436:7	18	0
LEAF_NODE	2436:7	2436:7	19	0
LEAF_NODE	2436:8	2436:8	17	]
ASSIGN_OP	2436:9	2436:9	15	=
LEAF_NODE	2436:9	2436:9	16	=
RVAL	2436:10	2436:10	15	- ( int32 ) ( ( double ) ( - * na ) * 0x7FFFFFFF )
UNARY_EXPR	2436:10	2436:11	16	- ( int32 ) ( ( double ) ( - * na ) * 0x7FFFFFFF )
UNARY_OPERATOR	2436:10	2436:10	17	-
LEAF_NODE	2436:10	2436:10	18	-
FUNCTION_CALL	2436:11	2436:44	17	( int32 ) ( ( double ) ( - * na ) * 0x7FFFFFFF )
CALLEE	2436:11	2436:17	18	( int32 )
LEAF_NODE	2436:11	2436:11	19	(
FIELD	2436:12	2436:12	19	int32
LEAF_NODE	2436:12	2436:12	20	int32
LEAF_NODE	2436:17	2436:17	19	)
LEAF_NODE	2436:18	2436:18	18	(
ARGUMENT	2436:19	2436:34	18	( double ) ( - * na ) * 0x7FFFFFFF
LEAF_NODE	2436:19	2436:19	19	(
TYPE_NAME	2436:20	2436:20	19	double
LEAF_NODE	2436:20	2436:20	20	double
LEAF_NODE	2436:26	2436:26	19	)
LEAF_NODE	2436:27	2436:27	19	(
UNARY_EXPR	2436:28	2436:30	19	- * na
UNARY_OPERATOR	2436:28	2436:28	20	-
LEAF_NODE	2436:28	2436:28	21	-
UNARY_OPERATOR	2436:29	2436:29	20	*
LEAF_NODE	2436:29	2436:29	21	*
FIELD	2436:30	2436:30	20	na
LEAF_NODE	2436:30	2436:30	21	na
LEAF_NODE	2436:32	2436:32	19	)
LEAF_NODE	2436:33	2436:33	19	*
FIELD	2436:34	2436:34	19	0x7FFFFFFF
LEAF_NODE	2436:34	2436:34	20	0x7FFFFFFF
LEAF_NODE	2436:44	2436:44	18	)
LEAF_NODE	2436:45	2436:45	13	;
EXPR_STATEMENT	2437:4	2437:20	12	nb [ 1 ] = 0x7FFFFFFF ;
EXPR	2437:4	2437:4	13	nb [ 1 ] = 0x7FFFFFFF
ASSIGN	2437:4	2437:10	14	nb [ 1 ] = 0x7FFFFFFF
LVAL	2437:4	2437:4	15	nb [ 1 ]
FIELD	2437:4	2437:8	16	nb [ 1 ]
LEAF_NODE	2437:4	2437:4	17	nb
LEAF_NODE	2437:6	2437:6	17	[
EXPR	2437:7	2437:7	17	1
FIELD	2437:7	2437:7	18	1
LEAF_NODE	2437:7	2437:7	19	1
LEAF_NODE	2437:8	2437:8	17	]
ASSIGN_OP	2437:9	2437:9	15	=
LEAF_NODE	2437:9	2437:9	16	=
RVAL	2437:10	2437:10	15	0x7FFFFFFF
FIELD	2437:10	2437:10	16	0x7FFFFFFF
LEAF_NODE	2437:10	2437:10	17	0x7FFFFFFF
LEAF_NODE	2437:20	2437:20	13	;
LEAF_NODE	2438:3	2438:3	11	}
SELECTION	2439:3	2440:3	7	
KEYWORD	2439:3	2439:3	8	else
LEAF_NODE	2439:3	2439:3	9	else
STATEMENTS	2440:3	2443:3	8	
LEAF_NODE	2440:3	2440:3	9	{
STATEMENTS	2441:4	2442:4	9	
EXPR_STATEMENT	2441:4	2441:21	10	nb [ 0 ] = - 0x7FFFFFFF ;
EXPR	2441:4	2441:4	11	nb [ 0 ] = - 0x7FFFFFFF
ASSIGN	2441:4	2441:10	12	nb [ 0 ] = - 0x7FFFFFFF
LVAL	2441:4	2441:4	13	nb [ 0 ]
FIELD	2441:4	2441:8	14	nb [ 0 ]
LEAF_NODE	2441:4	2441:4	15	nb
LEAF_NODE	2441:6	2441:6	15	[
EXPR	2441:7	2441:7	15	0
FIELD	2441:7	2441:7	16	0
LEAF_NODE	2441:7	2441:7	17	0
LEAF_NODE	2441:8	2441:8	15	]
ASSIGN_OP	2441:9	2441:9	13	=
LEAF_NODE	2441:9	2441:9	14	=
RVAL	2441:10	2441:10	13	- 0x7FFFFFFF
UNARY_EXPR	2441:10	2441:11	14	- 0x7FFFFFFF
UNARY_OPERATOR	2441:10	2441:10	15	-
LEAF_NODE	2441:10	2441:10	16	-
FIELD	2441:11	2441:11	15	0x7FFFFFFF
LEAF_NODE	2441:11	2441:11	16	0x7FFFFFFF
LEAF_NODE	2441:21	2441:21	11	;
EXPR_STATEMENT	2442:4	2442:44	10	nb [ 1 ] = ( int32 ) ( ( double ) 0x7FFFFFFF / ( - * na ) ) ;
EXPR	2442:4	2442:4	11	nb [ 1 ] = ( int32 ) ( ( double ) 0x7FFFFFFF / ( - * na ) )
ASSIGN	2442:4	2442:10	12	nb [ 1 ] = ( int32 ) ( ( double ) 0x7FFFFFFF / ( - * na ) )
LVAL	2442:4	2442:4	13	nb [ 1 ]
FIELD	2442:4	2442:8	14	nb [ 1 ]
LEAF_NODE	2442:4	2442:4	15	nb
LEAF_NODE	2442:6	2442:6	15	[
EXPR	2442:7	2442:7	15	1
FIELD	2442:7	2442:7	16	1
LEAF_NODE	2442:7	2442:7	17	1
LEAF_NODE	2442:8	2442:8	15	]
ASSIGN_OP	2442:9	2442:9	13	=
LEAF_NODE	2442:9	2442:9	14	=
RVAL	2442:10	2442:43	13	( int32 ) ( ( double ) 0x7FFFFFFF / ( - * na ) )
LEAF_NODE	2442:10	2442:10	14	(
TYPE_NAME	2442:11	2442:11	14	int32
LEAF_NODE	2442:11	2442:11	15	int32
LEAF_NODE	2442:16	2442:16	14	)
LEAF_NODE	2442:17	2442:17	14	(
LEAF_NODE	2442:18	2442:18	14	(
TYPE_NAME	2442:19	2442:19	14	double
LEAF_NODE	2442:19	2442:19	15	double
LEAF_NODE	2442:25	2442:25	14	)
FIELD	2442:26	2442:26	14	0x7FFFFFFF
LEAF_NODE	2442:26	2442:26	15	0x7FFFFFFF
LEAF_NODE	2442:36	2442:36	14	/
LEAF_NODE	2442:37	2442:37	14	(
UNARY_EXPR	2442:38	2442:40	14	- * na
UNARY_OPERATOR	2442:38	2442:38	15	-
LEAF_NODE	2442:38	2442:38	16	-
UNARY_OPERATOR	2442:39	2442:39	15	*
LEAF_NODE	2442:39	2442:39	16	*
FIELD	2442:40	2442:40	15	na
LEAF_NODE	2442:40	2442:40	16	na
LEAF_NODE	2442:42	2442:42	14	)
LEAF_NODE	2442:43	2442:43	14	)
LEAF_NODE	2442:44	2442:44	11	;
LEAF_NODE	2443:3	2443:3	9	}
LEAF_NODE	2444:2	2444:2	6	}
SELECTION	2445:2	2446:2	4	
KEYWORD	2445:2	2445:2	5	else
LEAF_NODE	2445:2	2445:2	6	else
STATEMENTS	2446:2	2462:2	5	
LEAF_NODE	2446:2	2446:2	6	{
STATEMENTS	2447:3	2457:3	6	
SELECTION	2447:3	2448:3	7	
KEYWORD	2447:3	2447:3	8	if
LEAF_NODE	2447:3	2447:3	9	if
LEAF_NODE	2447:6	2447:6	8	(
CONDITION	2447:7	2447:7	8	* na == ( int32 ) ( * na )
EXPR	2447:7	2447:23	9	* na == ( int32 ) ( * na )
UNARY_EXPR	2447:7	2447:8	10	* na
UNARY_OPERATOR	2447:7	2447:7	11	*
LEAF_NODE	2447:7	2447:7	12	*
FIELD	2447:8	2447:8	11	na
LEAF_NODE	2447:8	2447:8	12	na
EQ_OPERATOR	2447:10	2447:10	10	==
LEAF_NODE	2447:10	2447:10	11	==
LEAF_NODE	2447:12	2447:12	10	(
TYPE_NAME	2447:13	2447:13	10	int32
LEAF_NODE	2447:13	2447:13	11	int32
LEAF_NODE	2447:18	2447:18	10	)
LEAF_NODE	2447:19	2447:19	10	(
UNARY_EXPR	2447:20	2447:21	10	* na
UNARY_OPERATOR	2447:20	2447:20	11	*
LEAF_NODE	2447:20	2447:20	12	*
FIELD	2447:21	2447:21	11	na
LEAF_NODE	2447:21	2447:21	12	na
LEAF_NODE	2447:23	2447:23	10	)
LEAF_NODE	2447:24	2447:24	8	)
STATEMENTS	2448:3	2451:3	8	
LEAF_NODE	2448:3	2448:3	9	{
STATEMENTS	2449:4	2450:4	9	
EXPR_STATEMENT	2449:4	2449:22	10	nb [ 0 ] = ( int32 ) ( * na ) ;
EXPR	2449:4	2449:4	11	nb [ 0 ] = ( int32 ) ( * na )
ASSIGN	2449:4	2449:10	12	nb [ 0 ] = ( int32 ) ( * na )
LVAL	2449:4	2449:4	13	nb [ 0 ]
FIELD	2449:4	2449:8	14	nb [ 0 ]
LEAF_NODE	2449:4	2449:4	15	nb
LEAF_NODE	2449:6	2449:6	15	[
EXPR	2449:7	2449:7	15	0
FIELD	2449:7	2449:7	16	0
LEAF_NODE	2449:7	2449:7	17	0
LEAF_NODE	2449:8	2449:8	15	]
ASSIGN_OP	2449:9	2449:9	13	=
LEAF_NODE	2449:9	2449:9	14	=
RVAL	2449:10	2449:21	13	( int32 ) ( * na )
LEAF_NODE	2449:10	2449:10	14	(
TYPE_NAME	2449:11	2449:11	14	int32
LEAF_NODE	2449:11	2449:11	15	int32
LEAF_NODE	2449:16	2449:16	14	)
LEAF_NODE	2449:17	2449:17	14	(
UNARY_EXPR	2449:18	2449:19	14	* na
UNARY_OPERATOR	2449:18	2449:18	15	*
LEAF_NODE	2449:18	2449:18	16	*
FIELD	2449:19	2449:19	15	na
LEAF_NODE	2449:19	2449:19	16	na
LEAF_NODE	2449:21	2449:21	14	)
LEAF_NODE	2449:22	2449:22	11	;
EXPR_STATEMENT	2450:4	2450:11	10	nb [ 1 ] = 1 ;
EXPR	2450:4	2450:4	11	nb [ 1 ] = 1
ASSIGN	2450:4	2450:10	12	nb [ 1 ] = 1
LVAL	2450:4	2450:4	13	nb [ 1 ]
FIELD	2450:4	2450:8	14	nb [ 1 ]
LEAF_NODE	2450:4	2450:4	15	nb
LEAF_NODE	2450:6	2450:6	15	[
EXPR	2450:7	2450:7	15	1
FIELD	2450:7	2450:7	16	1
LEAF_NODE	2450:7	2450:7	17	1
LEAF_NODE	2450:8	2450:8	15	]
ASSIGN_OP	2450:9	2450:9	13	=
LEAF_NODE	2450:9	2450:9	14	=
RVAL	2450:10	2450:10	13	1
FIELD	2450:10	2450:10	14	1
LEAF_NODE	2450:10	2450:10	15	1
LEAF_NODE	2450:11	2450:11	11	;
LEAF_NODE	2451:3	2451:3	9	}
SELECTION	2452:3	2452:8	7	
KEYWORD	2452:3	2452:3	8	else
LEAF_NODE	2452:3	2452:3	9	else
STATEMENTS	2452:8	2452:8	8	
SELECTION	2452:8	2453:3	9	
KEYWORD	2452:8	2452:8	10	if
LEAF_NODE	2452:8	2452:8	11	if
LEAF_NODE	2452:11	2452:11	10	(
CONDITION	2452:12	2452:12	10	* na < 1.0
EXPR	2452:12	2452:16	11	* na < 1.0
UNARY_EXPR	2452:12	2452:13	12	* na
UNARY_OPERATOR	2452:12	2452:12	13	*
LEAF_NODE	2452:12	2452:12	14	*
FIELD	2452:13	2452:13	13	na
LEAF_NODE	2452:13	2452:13	14	na
REL_OPERATOR	2452:15	2452:15	12	<
LEAF_NODE	2452:15	2452:15	13	<
FIELD	2452:16	2452:16	12	1.0
LEAF_NODE	2452:16	2452:16	13	1.0
LEAF_NODE	2452:19	2452:19	10	)
STATEMENTS	2453:3	2456:3	10	
LEAF_NODE	2453:3	2453:3	11	{
STATEMENTS	2454:4	2455:4	11	
EXPR_STATEMENT	2454:4	2454:43	12	nb [ 0 ] = ( int32 ) ( ( double ) ( * na ) * 0x7FFFFFFF ) ;
EXPR	2454:4	2454:4	13	nb [ 0 ] = ( int32 ) ( ( double ) ( * na ) * 0x7FFFFFFF )
ASSIGN	2454:4	2454:10	14	nb [ 0 ] = ( int32 ) ( ( double ) ( * na ) * 0x7FFFFFFF )
LVAL	2454:4	2454:4	15	nb [ 0 ]
FIELD	2454:4	2454:8	16	nb [ 0 ]
LEAF_NODE	2454:4	2454:4	17	nb
LEAF_NODE	2454:6	2454:6	17	[
EXPR	2454:7	2454:7	17	0
FIELD	2454:7	2454:7	18	0
LEAF_NODE	2454:7	2454:7	19	0
LEAF_NODE	2454:8	2454:8	17	]
ASSIGN_OP	2454:9	2454:9	15	=
LEAF_NODE	2454:9	2454:9	16	=
RVAL	2454:10	2454:42	15	( int32 ) ( ( double ) ( * na ) * 0x7FFFFFFF )
LEAF_NODE	2454:10	2454:10	16	(
TYPE_NAME	2454:11	2454:11	16	int32
LEAF_NODE	2454:11	2454:11	17	int32
LEAF_NODE	2454:16	2454:16	16	)
LEAF_NODE	2454:17	2454:17	16	(
LEAF_NODE	2454:18	2454:18	16	(
TYPE_NAME	2454:19	2454:19	16	double
LEAF_NODE	2454:19	2454:19	17	double
LEAF_NODE	2454:25	2454:25	16	)
LEAF_NODE	2454:26	2454:26	16	(
UNARY_EXPR	2454:27	2454:28	16	* na
UNARY_OPERATOR	2454:27	2454:27	17	*
LEAF_NODE	2454:27	2454:27	18	*
FIELD	2454:28	2454:28	17	na
LEAF_NODE	2454:28	2454:28	18	na
LEAF_NODE	2454:30	2454:30	16	)
LEAF_NODE	2454:31	2454:31	16	*
FIELD	2454:32	2454:32	16	0x7FFFFFFF
LEAF_NODE	2454:32	2454:32	17	0x7FFFFFFF
LEAF_NODE	2454:42	2454:42	16	)
LEAF_NODE	2454:43	2454:43	13	;
EXPR_STATEMENT	2455:4	2455:20	12	nb [ 1 ] = 0x7FFFFFFF ;
EXPR	2455:4	2455:4	13	nb [ 1 ] = 0x7FFFFFFF
ASSIGN	2455:4	2455:10	14	nb [ 1 ] = 0x7FFFFFFF
LVAL	2455:4	2455:4	15	nb [ 1 ]
FIELD	2455:4	2455:8	16	nb [ 1 ]
LEAF_NODE	2455:4	2455:4	17	nb
LEAF_NODE	2455:6	2455:6	17	[
EXPR	2455:7	2455:7	17	1
FIELD	2455:7	2455:7	18	1
LEAF_NODE	2455:7	2455:7	19	1
LEAF_NODE	2455:8	2455:8	17	]
ASSIGN_OP	2455:9	2455:9	15	=
LEAF_NODE	2455:9	2455:9	16	=
RVAL	2455:10	2455:10	15	0x7FFFFFFF
FIELD	2455:10	2455:10	16	0x7FFFFFFF
LEAF_NODE	2455:10	2455:10	17	0x7FFFFFFF
LEAF_NODE	2455:20	2455:20	13	;
LEAF_NODE	2456:3	2456:3	11	}
SELECTION	2457:3	2458:3	7	
KEYWORD	2457:3	2457:3	8	else
LEAF_NODE	2457:3	2457:3	9	else
STATEMENTS	2458:3	2461:3	8	
LEAF_NODE	2458:3	2458:3	9	{
STATEMENTS	2459:4	2460:4	9	
EXPR_STATEMENT	2459:4	2459:20	10	nb [ 0 ] = 0x7FFFFFFF ;
EXPR	2459:4	2459:4	11	nb [ 0 ] = 0x7FFFFFFF
ASSIGN	2459:4	2459:10	12	nb [ 0 ] = 0x7FFFFFFF
LVAL	2459:4	2459:4	13	nb [ 0 ]
FIELD	2459:4	2459:8	14	nb [ 0 ]
LEAF_NODE	2459:4	2459:4	15	nb
LEAF_NODE	2459:6	2459:6	15	[
EXPR	2459:7	2459:7	15	0
FIELD	2459:7	2459:7	16	0
LEAF_NODE	2459:7	2459:7	17	0
LEAF_NODE	2459:8	2459:8	15	]
ASSIGN_OP	2459:9	2459:9	13	=
LEAF_NODE	2459:9	2459:9	14	=
RVAL	2459:10	2459:10	13	0x7FFFFFFF
FIELD	2459:10	2459:10	14	0x7FFFFFFF
LEAF_NODE	2459:10	2459:10	15	0x7FFFFFFF
LEAF_NODE	2459:20	2459:20	11	;
EXPR_STATEMENT	2460:4	2460:43	10	nb [ 1 ] = ( int32 ) ( ( double ) 0x7FFFFFFF / ( * na ) ) ;
EXPR	2460:4	2460:4	11	nb [ 1 ] = ( int32 ) ( ( double ) 0x7FFFFFFF / ( * na ) )
ASSIGN	2460:4	2460:10	12	nb [ 1 ] = ( int32 ) ( ( double ) 0x7FFFFFFF / ( * na ) )
LVAL	2460:4	2460:4	13	nb [ 1 ]
FIELD	2460:4	2460:8	14	nb [ 1 ]
LEAF_NODE	2460:4	2460:4	15	nb
LEAF_NODE	2460:6	2460:6	15	[
EXPR	2460:7	2460:7	15	1
FIELD	2460:7	2460:7	16	1
LEAF_NODE	2460:7	2460:7	17	1
LEAF_NODE	2460:8	2460:8	15	]
ASSIGN_OP	2460:9	2460:9	13	=
LEAF_NODE	2460:9	2460:9	14	=
RVAL	2460:10	2460:42	13	( int32 ) ( ( double ) 0x7FFFFFFF / ( * na ) )
LEAF_NODE	2460:10	2460:10	14	(
TYPE_NAME	2460:11	2460:11	14	int32
LEAF_NODE	2460:11	2460:11	15	int32
LEAF_NODE	2460:16	2460:16	14	)
LEAF_NODE	2460:17	2460:17	14	(
LEAF_NODE	2460:18	2460:18	14	(
TYPE_NAME	2460:19	2460:19	14	double
LEAF_NODE	2460:19	2460:19	15	double
LEAF_NODE	2460:25	2460:25	14	)
FIELD	2460:26	2460:26	14	0x7FFFFFFF
LEAF_NODE	2460:26	2460:26	15	0x7FFFFFFF
LEAF_NODE	2460:36	2460:36	14	/
LEAF_NODE	2460:37	2460:37	14	(
UNARY_EXPR	2460:38	2460:39	14	* na
UNARY_OPERATOR	2460:38	2460:38	15	*
LEAF_NODE	2460:38	2460:38	16	*
FIELD	2460:39	2460:39	15	na
LEAF_NODE	2460:39	2460:39	16	na
LEAF_NODE	2460:41	2460:41	14	)
LEAF_NODE	2460:42	2460:42	14	)
LEAF_NODE	2460:43	2460:43	11	;
LEAF_NODE	2461:3	2461:3	9	}
LEAF_NODE	2462:2	2462:2	6	}
LEAF_NODE	2463:1	2463:1	3	}
SELECTION	2464:1	2465:2	3	
KEYWORD	2464:1	2464:1	4	if
LEAF_NODE	2464:1	2464:1	5	if
LEAF_NODE	2464:4	2464:4	4	(
CONDITION	2464:5	2464:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2464:5	2464:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2464:5	2464:10	6	tif -> tif_flags
LEAF_NODE	2464:5	2464:5	7	tif
LEAF_NODE	2464:8	2464:8	7	->
LEAF_NODE	2464:10	2464:10	7	tif_flags
LEAF_NODE	2464:19	2464:19	6	&
FIELD	2464:20	2464:20	6	TIFF_SWAB
LEAF_NODE	2464:20	2464:20	7	TIFF_SWAB
LEAF_NODE	2464:29	2464:29	4	)
STATEMENTS	2465:2	2465:2	4	
EXPR_STATEMENT	2465:2	2465:41	5	TIFFSwabArrayOfLong ( ( uint32 * ) m , count * 2 ) ;
EXPR	2465:2	2465:2	6	TIFFSwabArrayOfLong ( ( uint32 * ) m , count * 2 )
FUNCTION_CALL	2465:2	2465:40	7	TIFFSwabArrayOfLong ( ( uint32 * ) m , count * 2 )
CALLEE	2465:2	2465:2	8	TIFFSwabArrayOfLong
LEAF_NODE	2465:2	2465:2	9	TIFFSwabArrayOfLong
LEAF_NODE	2465:21	2465:21	8	(
ARGUMENT	2465:22	2465:31	8	( uint32 * ) m
LEAF_NODE	2465:22	2465:22	9	(
TYPE_NAME	2465:23	2465:23	9	uint32
LEAF_NODE	2465:23	2465:23	10	uint32
LEAF_NODE	2465:29	2465:29	9	*
LEAF_NODE	2465:30	2465:30	9	)
FIELD	2465:31	2465:31	9	m
LEAF_NODE	2465:31	2465:31	10	m
LEAF_NODE	2465:32	2465:32	8	,
ARGUMENT	2465:33	2465:39	8	count * 2
FIELD	2465:33	2465:33	9	count
LEAF_NODE	2465:33	2465:33	10	count
LEAF_NODE	2465:38	2465:38	9	*
FIELD	2465:39	2465:39	9	2
LEAF_NODE	2465:39	2465:39	10	2
LEAF_NODE	2465:40	2465:40	8	)
LEAF_NODE	2465:41	2465:41	6	;
EXPR_STATEMENT	2466:1	2466:81	3	o = TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SRATIONAL , count , count * 8 , & m [ 0 ] ) ;
EXPR	2466:1	2466:1	4	o = TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SRATIONAL , count , count * 8 , & m [ 0 ] )
ASSIGN	2466:1	2466:3	5	o = TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SRATIONAL , count , count * 8 , & m [ 0 ] )
LVAL	2466:1	2466:1	6	o
FIELD	2466:1	2466:1	7	o
LEAF_NODE	2466:1	2466:1	8	o
ASSIGN_OP	2466:2	2466:2	6	=
LEAF_NODE	2466:2	2466:2	7	=
RVAL	2466:3	2466:3	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SRATIONAL , count , count * 8 , & m [ 0 ] )
FUNCTION_CALL	2466:3	2466:80	7	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_SRATIONAL , count , count * 8 , & m [ 0 ] )
CALLEE	2466:3	2466:3	8	TIFFWriteDirectoryTagData
LEAF_NODE	2466:3	2466:3	9	TIFFWriteDirectoryTagData
LEAF_NODE	2466:28	2466:28	8	(
ARGUMENT	2466:29	2466:29	8	tif
FIELD	2466:29	2466:29	9	tif
LEAF_NODE	2466:29	2466:29	10	tif
LEAF_NODE	2466:32	2466:32	8	,
ARGUMENT	2466:33	2466:33	8	ndir
FIELD	2466:33	2466:33	9	ndir
LEAF_NODE	2466:33	2466:33	10	ndir
LEAF_NODE	2466:37	2466:37	8	,
ARGUMENT	2466:38	2466:38	8	dir
FIELD	2466:38	2466:38	9	dir
LEAF_NODE	2466:38	2466:38	10	dir
LEAF_NODE	2466:41	2466:41	8	,
ARGUMENT	2466:42	2466:42	8	tag
FIELD	2466:42	2466:42	9	tag
LEAF_NODE	2466:42	2466:42	10	tag
LEAF_NODE	2466:45	2466:45	8	,
ARGUMENT	2466:46	2466:46	8	TIFF_SRATIONAL
FIELD	2466:46	2466:46	9	TIFF_SRATIONAL
LEAF_NODE	2466:46	2466:46	10	TIFF_SRATIONAL
LEAF_NODE	2466:60	2466:60	8	,
ARGUMENT	2466:61	2466:61	8	count
FIELD	2466:61	2466:61	9	count
LEAF_NODE	2466:61	2466:61	10	count
LEAF_NODE	2466:66	2466:66	8	,
ARGUMENT	2466:67	2466:73	8	count * 8
FIELD	2466:67	2466:67	9	count
LEAF_NODE	2466:67	2466:67	10	count
LEAF_NODE	2466:72	2466:72	9	*
FIELD	2466:73	2466:73	9	8
LEAF_NODE	2466:73	2466:73	10	8
LEAF_NODE	2466:74	2466:74	8	,
ARGUMENT	2466:75	2466:75	8	& m [ 0 ]
UNARY_EXPR	2466:75	2466:76	9	& m [ 0 ]
UNARY_OPERATOR	2466:75	2466:75	10	&
LEAF_NODE	2466:75	2466:75	11	&
FIELD	2466:76	2466:79	10	m [ 0 ]
LEAF_NODE	2466:76	2466:76	11	m
LEAF_NODE	2466:77	2466:77	11	[
EXPR	2466:78	2466:78	11	0
FIELD	2466:78	2466:78	12	0
LEAF_NODE	2466:78	2466:78	13	0
LEAF_NODE	2466:79	2466:79	11	]
LEAF_NODE	2466:80	2466:80	8	)
LEAF_NODE	2466:81	2466:81	4	;
EXPR_STATEMENT	2467:1	2467:13	3	_TIFFfree ( m ) ;
EXPR	2467:1	2467:1	4	_TIFFfree ( m )
FUNCTION_CALL	2467:1	2467:12	5	_TIFFfree ( m )
CALLEE	2467:1	2467:1	6	_TIFFfree
LEAF_NODE	2467:1	2467:1	7	_TIFFfree
LEAF_NODE	2467:10	2467:10	6	(
ARGUMENT	2467:11	2467:11	6	m
FIELD	2467:11	2467:11	7	m
LEAF_NODE	2467:11	2467:11	8	m
LEAF_NODE	2467:12	2467:12	6	)
LEAF_NODE	2467:13	2467:13	4	;
LEAF_NODE	2468:1	2468:1	3	return
LEAF_NODE	2468:7	2468:7	3	(
LEAF_NODE	2468:8	2468:8	3	o
LEAF_NODE	2468:9	2468:9	3	)
LEAF_NODE	2468:10	2468:10	3	;
LEAF_NODE	2469:0	2469:0	2	}
FUNCTION_DEF	2472:0	2482:0	1	
RETURN_TYPE	2472:0	2472:7	2	static int
LEAF_NODE	2472:0	2472:0	3	static
TYPE_NAME	2472:7	2472:7	3	int
LEAF_NODE	2472:7	2472:7	4	int
FUNCTION_NAME	2473:0	2473:0	2	TIFFWriteDirectoryTagCheckedFloat
LEAF_NODE	2473:0	2473:0	3	TIFFWriteDirectoryTagCheckedFloat
PARAMETER_LIST	2473:33	2473:101	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , float value )
LEAF_NODE	2473:33	2473:33	3	(
PARAMETER_DECL	2473:34	2473:40	3	TIFF * tif
TYPE	2473:34	2473:38	4	TIFF *
TYPE_NAME	2473:34	2473:34	5	TIFF
LEAF_NODE	2473:34	2473:34	6	TIFF
POINTER	2473:38	2473:38	5	*
LEAF_NODE	2473:38	2473:38	6	*
NAME	2473:40	2473:40	4	tif
LEAF_NODE	2473:40	2473:40	5	tif
LEAF_NODE	2473:43	2473:43	3	,
PARAMETER_DECL	2473:45	2473:53	3	uint32 * ndir
TYPE	2473:45	2473:51	4	uint32 *
TYPE_NAME	2473:45	2473:45	5	uint32
LEAF_NODE	2473:45	2473:45	6	uint32
POINTER	2473:51	2473:51	5	*
LEAF_NODE	2473:51	2473:51	6	*
NAME	2473:53	2473:53	4	ndir
LEAF_NODE	2473:53	2473:53	5	ndir
LEAF_NODE	2473:57	2473:57	3	,
PARAMETER_DECL	2473:59	2473:73	3	TIFFDirEntry * dir
TYPE	2473:59	2473:71	4	TIFFDirEntry *
TYPE_NAME	2473:59	2473:59	5	TIFFDirEntry
LEAF_NODE	2473:59	2473:59	6	TIFFDirEntry
POINTER	2473:71	2473:71	5	*
LEAF_NODE	2473:71	2473:71	6	*
NAME	2473:73	2473:73	4	dir
LEAF_NODE	2473:73	2473:73	5	dir
LEAF_NODE	2473:76	2473:76	3	,
PARAMETER_DECL	2473:78	2473:85	3	uint16 tag
TYPE	2473:78	2473:78	4	uint16
TYPE_NAME	2473:78	2473:78	5	uint16
LEAF_NODE	2473:78	2473:78	6	uint16
NAME	2473:85	2473:85	4	tag
LEAF_NODE	2473:85	2473:85	5	tag
LEAF_NODE	2473:88	2473:88	3	,
PARAMETER_DECL	2473:90	2473:96	3	float value
TYPE	2473:90	2473:90	4	float
TYPE_NAME	2473:90	2473:90	5	float
LEAF_NODE	2473:90	2473:90	6	float
NAME	2473:96	2473:96	4	value
LEAF_NODE	2473:96	2473:96	5	value
LEAF_NODE	2473:101	2473:101	3	)
LEAF_NODE	2474:0	2474:0	2	{
STATEMENTS	2475:1	2481:1	2	
SIMPLE_DECL	2475:1	2475:8	3	float m ;
VAR_DECL	2475:1	2475:7	4	float m
TYPE	2475:1	2475:1	5	float
TYPE_NAME	2475:1	2475:1	6	float
LEAF_NODE	2475:1	2475:1	7	float
NAME	2475:7	2475:7	5	m
LEAF_NODE	2475:7	2475:7	6	m
LEAF_NODE	2475:8	2475:8	4	;
EXPR_STATEMENT	2476:1	2476:25	3	assert ( sizeof ( float ) == 4 ) ;
EXPR	2476:1	2476:1	4	assert ( sizeof ( float ) == 4 )
FUNCTION_CALL	2476:1	2476:24	5	assert ( sizeof ( float ) == 4 )
CALLEE	2476:1	2476:1	6	assert
LEAF_NODE	2476:1	2476:1	7	assert
LEAF_NODE	2476:7	2476:7	6	(
ARGUMENT	2476:8	2476:23	6	sizeof ( float ) == 4
FUNCTION_CALL	2476:8	2476:20	7	sizeof ( float )
CALLEE	2476:8	2476:8	8	sizeof
LEAF_NODE	2476:8	2476:8	9	sizeof
LEAF_NODE	2476:14	2476:14	8	(
ARGUMENT	2476:15	2476:15	8	float
FIELD	2476:15	2476:15	9	float
LEAF_NODE	2476:15	2476:15	10	float
LEAF_NODE	2476:20	2476:20	8	)
EQ_OPERATOR	2476:21	2476:21	7	==
LEAF_NODE	2476:21	2476:21	8	==
FIELD	2476:23	2476:23	7	4
LEAF_NODE	2476:23	2476:23	8	4
LEAF_NODE	2476:24	2476:24	6	)
LEAF_NODE	2476:25	2476:25	4	;
EXPR_STATEMENT	2477:1	2477:8	3	m = value ;
EXPR	2477:1	2477:1	4	m = value
ASSIGN	2477:1	2477:3	5	m = value
LVAL	2477:1	2477:1	6	m
FIELD	2477:1	2477:1	7	m
LEAF_NODE	2477:1	2477:1	8	m
ASSIGN_OP	2477:2	2477:2	6	=
LEAF_NODE	2477:2	2477:2	7	=
RVAL	2477:3	2477:3	6	value
FIELD	2477:3	2477:3	7	value
LEAF_NODE	2477:3	2477:3	8	value
LEAF_NODE	2477:8	2477:8	4	;
EXPR_STATEMENT	2478:1	2478:35	3	TIFFCvtNativeToIEEEFloat ( tif , 1 , & m ) ;
EXPR	2478:1	2478:1	4	TIFFCvtNativeToIEEEFloat ( tif , 1 , & m )
FUNCTION_CALL	2478:1	2478:34	5	TIFFCvtNativeToIEEEFloat ( tif , 1 , & m )
CALLEE	2478:1	2478:1	6	TIFFCvtNativeToIEEEFloat
LEAF_NODE	2478:1	2478:1	7	TIFFCvtNativeToIEEEFloat
LEAF_NODE	2478:25	2478:25	6	(
ARGUMENT	2478:26	2478:26	6	tif
FIELD	2478:26	2478:26	7	tif
LEAF_NODE	2478:26	2478:26	8	tif
LEAF_NODE	2478:29	2478:29	6	,
ARGUMENT	2478:30	2478:30	6	1
FIELD	2478:30	2478:30	7	1
LEAF_NODE	2478:30	2478:30	8	1
LEAF_NODE	2478:31	2478:31	6	,
ARGUMENT	2478:32	2478:32	6	& m
UNARY_EXPR	2478:32	2478:33	7	& m
UNARY_OPERATOR	2478:32	2478:32	8	&
LEAF_NODE	2478:32	2478:32	9	&
FIELD	2478:33	2478:33	8	m
LEAF_NODE	2478:33	2478:33	9	m
LEAF_NODE	2478:34	2478:34	6	)
LEAF_NODE	2478:35	2478:35	4	;
SELECTION	2479:1	2480:2	3	
KEYWORD	2479:1	2479:1	4	if
LEAF_NODE	2479:1	2479:1	5	if
LEAF_NODE	2479:4	2479:4	4	(
CONDITION	2479:5	2479:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2479:5	2479:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2479:5	2479:10	6	tif -> tif_flags
LEAF_NODE	2479:5	2479:5	7	tif
LEAF_NODE	2479:8	2479:8	7	->
LEAF_NODE	2479:10	2479:10	7	tif_flags
LEAF_NODE	2479:19	2479:19	6	&
FIELD	2479:20	2479:20	6	TIFF_SWAB
LEAF_NODE	2479:20	2479:20	7	TIFF_SWAB
LEAF_NODE	2479:29	2479:29	4	)
STATEMENTS	2480:2	2480:2	4	
EXPR_STATEMENT	2480:2	2480:19	5	TIFFSwabFloat ( & m ) ;
EXPR	2480:2	2480:2	6	TIFFSwabFloat ( & m )
FUNCTION_CALL	2480:2	2480:18	7	TIFFSwabFloat ( & m )
CALLEE	2480:2	2480:2	8	TIFFSwabFloat
LEAF_NODE	2480:2	2480:2	9	TIFFSwabFloat
LEAF_NODE	2480:15	2480:15	8	(
ARGUMENT	2480:16	2480:16	8	& m
UNARY_EXPR	2480:16	2480:17	9	& m
UNARY_OPERATOR	2480:16	2480:16	10	&
LEAF_NODE	2480:16	2480:16	11	&
FIELD	2480:17	2480:17	10	m
LEAF_NODE	2480:17	2480:17	11	m
LEAF_NODE	2480:18	2480:18	8	)
LEAF_NODE	2480:19	2480:19	6	;
JUMP_STATEMENT	2481:1	2481:70	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_FLOAT , 1 , 4 , & m ) ) ;
KEYWORD	2481:1	2481:1	4	return
LEAF_NODE	2481:1	2481:1	5	return
DESTINATION	2481:7	2481:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_FLOAT , 1 , 4 , & m ) )
EXPR	2481:7	2481:69	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_FLOAT , 1 , 4 , & m ) )
LEAF_NODE	2481:7	2481:7	6	(
FUNCTION_CALL	2481:8	2481:68	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_FLOAT , 1 , 4 , & m )
CALLEE	2481:8	2481:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2481:8	2481:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2481:33	2481:33	7	(
ARGUMENT	2481:34	2481:34	7	tif
FIELD	2481:34	2481:34	8	tif
LEAF_NODE	2481:34	2481:34	9	tif
LEAF_NODE	2481:37	2481:37	7	,
ARGUMENT	2481:38	2481:38	7	ndir
FIELD	2481:38	2481:38	8	ndir
LEAF_NODE	2481:38	2481:38	9	ndir
LEAF_NODE	2481:42	2481:42	7	,
ARGUMENT	2481:43	2481:43	7	dir
FIELD	2481:43	2481:43	8	dir
LEAF_NODE	2481:43	2481:43	9	dir
LEAF_NODE	2481:46	2481:46	7	,
ARGUMENT	2481:47	2481:47	7	tag
FIELD	2481:47	2481:47	8	tag
LEAF_NODE	2481:47	2481:47	9	tag
LEAF_NODE	2481:50	2481:50	7	,
ARGUMENT	2481:51	2481:51	7	TIFF_FLOAT
FIELD	2481:51	2481:51	8	TIFF_FLOAT
LEAF_NODE	2481:51	2481:51	9	TIFF_FLOAT
LEAF_NODE	2481:61	2481:61	7	,
ARGUMENT	2481:62	2481:62	7	1
FIELD	2481:62	2481:62	8	1
LEAF_NODE	2481:62	2481:62	9	1
LEAF_NODE	2481:63	2481:63	7	,
ARGUMENT	2481:64	2481:64	7	4
FIELD	2481:64	2481:64	8	4
LEAF_NODE	2481:64	2481:64	9	4
LEAF_NODE	2481:65	2481:65	7	,
ARGUMENT	2481:66	2481:66	7	& m
UNARY_EXPR	2481:66	2481:67	8	& m
UNARY_OPERATOR	2481:66	2481:66	9	&
LEAF_NODE	2481:66	2481:66	10	&
FIELD	2481:67	2481:67	9	m
LEAF_NODE	2481:67	2481:67	10	m
LEAF_NODE	2481:68	2481:68	7	)
LEAF_NODE	2481:69	2481:69	6	)
LEAF_NODE	2481:70	2481:70	4	;
LEAF_NODE	2482:0	2482:0	2	}
FUNCTION_DEF	2485:0	2494:0	1	
RETURN_TYPE	2485:0	2485:7	2	static int
LEAF_NODE	2485:0	2485:0	3	static
TYPE_NAME	2485:7	2485:7	3	int
LEAF_NODE	2485:7	2485:7	4	int
FUNCTION_NAME	2486:0	2486:0	2	TIFFWriteDirectoryTagCheckedFloatArray
LEAF_NODE	2486:0	2486:0	3	TIFFWriteDirectoryTagCheckedFloatArray
PARAMETER_LIST	2486:38	2486:121	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , float * value )
LEAF_NODE	2486:38	2486:38	3	(
PARAMETER_DECL	2486:39	2486:45	3	TIFF * tif
TYPE	2486:39	2486:43	4	TIFF *
TYPE_NAME	2486:39	2486:39	5	TIFF
LEAF_NODE	2486:39	2486:39	6	TIFF
POINTER	2486:43	2486:43	5	*
LEAF_NODE	2486:43	2486:43	6	*
NAME	2486:45	2486:45	4	tif
LEAF_NODE	2486:45	2486:45	5	tif
LEAF_NODE	2486:48	2486:48	3	,
PARAMETER_DECL	2486:50	2486:58	3	uint32 * ndir
TYPE	2486:50	2486:56	4	uint32 *
TYPE_NAME	2486:50	2486:50	5	uint32
LEAF_NODE	2486:50	2486:50	6	uint32
POINTER	2486:56	2486:56	5	*
LEAF_NODE	2486:56	2486:56	6	*
NAME	2486:58	2486:58	4	ndir
LEAF_NODE	2486:58	2486:58	5	ndir
LEAF_NODE	2486:62	2486:62	3	,
PARAMETER_DECL	2486:64	2486:78	3	TIFFDirEntry * dir
TYPE	2486:64	2486:76	4	TIFFDirEntry *
TYPE_NAME	2486:64	2486:64	5	TIFFDirEntry
LEAF_NODE	2486:64	2486:64	6	TIFFDirEntry
POINTER	2486:76	2486:76	5	*
LEAF_NODE	2486:76	2486:76	6	*
NAME	2486:78	2486:78	4	dir
LEAF_NODE	2486:78	2486:78	5	dir
LEAF_NODE	2486:81	2486:81	3	,
PARAMETER_DECL	2486:83	2486:90	3	uint16 tag
TYPE	2486:83	2486:83	4	uint16
TYPE_NAME	2486:83	2486:83	5	uint16
LEAF_NODE	2486:83	2486:83	6	uint16
NAME	2486:90	2486:90	4	tag
LEAF_NODE	2486:90	2486:90	5	tag
LEAF_NODE	2486:93	2486:93	3	,
PARAMETER_DECL	2486:95	2486:102	3	uint32 count
TYPE	2486:95	2486:95	4	uint32
TYPE_NAME	2486:95	2486:95	5	uint32
LEAF_NODE	2486:95	2486:95	6	uint32
NAME	2486:102	2486:102	4	count
LEAF_NODE	2486:102	2486:102	5	count
LEAF_NODE	2486:107	2486:107	3	,
PARAMETER_DECL	2486:109	2486:116	3	float * value
TYPE	2486:109	2486:114	4	float *
TYPE_NAME	2486:109	2486:109	5	float
LEAF_NODE	2486:109	2486:109	6	float
POINTER	2486:114	2486:114	5	*
LEAF_NODE	2486:114	2486:114	6	*
NAME	2486:116	2486:116	4	value
LEAF_NODE	2486:116	2486:116	5	value
LEAF_NODE	2486:121	2486:121	3	)
LEAF_NODE	2487:0	2487:0	2	{
STATEMENTS	2488:1	2493:1	2	
EXPR_STATEMENT	2488:1	2488:25	3	assert ( count < 0x40000000 ) ;
EXPR	2488:1	2488:1	4	assert ( count < 0x40000000 )
FUNCTION_CALL	2488:1	2488:24	5	assert ( count < 0x40000000 )
CALLEE	2488:1	2488:1	6	assert
LEAF_NODE	2488:1	2488:1	7	assert
LEAF_NODE	2488:7	2488:7	6	(
ARGUMENT	2488:8	2488:14	6	count < 0x40000000
FIELD	2488:8	2488:8	7	count
LEAF_NODE	2488:8	2488:8	8	count
REL_OPERATOR	2488:13	2488:13	7	<
LEAF_NODE	2488:13	2488:13	8	<
FIELD	2488:14	2488:14	7	0x40000000
LEAF_NODE	2488:14	2488:14	8	0x40000000
LEAF_NODE	2488:24	2488:24	6	)
LEAF_NODE	2488:25	2488:25	4	;
EXPR_STATEMENT	2489:1	2489:25	3	assert ( sizeof ( float ) == 4 ) ;
EXPR	2489:1	2489:1	4	assert ( sizeof ( float ) == 4 )
FUNCTION_CALL	2489:1	2489:24	5	assert ( sizeof ( float ) == 4 )
CALLEE	2489:1	2489:1	6	assert
LEAF_NODE	2489:1	2489:1	7	assert
LEAF_NODE	2489:7	2489:7	6	(
ARGUMENT	2489:8	2489:23	6	sizeof ( float ) == 4
FUNCTION_CALL	2489:8	2489:20	7	sizeof ( float )
CALLEE	2489:8	2489:8	8	sizeof
LEAF_NODE	2489:8	2489:8	9	sizeof
LEAF_NODE	2489:14	2489:14	8	(
ARGUMENT	2489:15	2489:15	8	float
FIELD	2489:15	2489:15	9	float
LEAF_NODE	2489:15	2489:15	10	float
LEAF_NODE	2489:20	2489:20	8	)
EQ_OPERATOR	2489:21	2489:21	7	==
LEAF_NODE	2489:21	2489:21	8	==
FIELD	2489:23	2489:23	7	4
LEAF_NODE	2489:23	2489:23	8	4
LEAF_NODE	2489:24	2489:24	6	)
LEAF_NODE	2489:25	2489:25	4	;
EXPR_STATEMENT	2490:1	2490:43	3	TIFFCvtNativeToIEEEFloat ( tif , count , & value ) ;
EXPR	2490:1	2490:1	4	TIFFCvtNativeToIEEEFloat ( tif , count , & value )
FUNCTION_CALL	2490:1	2490:42	5	TIFFCvtNativeToIEEEFloat ( tif , count , & value )
CALLEE	2490:1	2490:1	6	TIFFCvtNativeToIEEEFloat
LEAF_NODE	2490:1	2490:1	7	TIFFCvtNativeToIEEEFloat
LEAF_NODE	2490:25	2490:25	6	(
ARGUMENT	2490:26	2490:26	6	tif
FIELD	2490:26	2490:26	7	tif
LEAF_NODE	2490:26	2490:26	8	tif
LEAF_NODE	2490:29	2490:29	6	,
ARGUMENT	2490:30	2490:30	6	count
FIELD	2490:30	2490:30	7	count
LEAF_NODE	2490:30	2490:30	8	count
LEAF_NODE	2490:35	2490:35	6	,
ARGUMENT	2490:36	2490:36	6	& value
UNARY_EXPR	2490:36	2490:37	7	& value
UNARY_OPERATOR	2490:36	2490:36	8	&
LEAF_NODE	2490:36	2490:36	9	&
FIELD	2490:37	2490:37	8	value
LEAF_NODE	2490:37	2490:37	9	value
LEAF_NODE	2490:42	2490:42	6	)
LEAF_NODE	2490:43	2490:43	4	;
SELECTION	2491:1	2492:2	3	
KEYWORD	2491:1	2491:1	4	if
LEAF_NODE	2491:1	2491:1	5	if
LEAF_NODE	2491:4	2491:4	4	(
CONDITION	2491:5	2491:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2491:5	2491:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2491:5	2491:10	6	tif -> tif_flags
LEAF_NODE	2491:5	2491:5	7	tif
LEAF_NODE	2491:8	2491:8	7	->
LEAF_NODE	2491:10	2491:10	7	tif_flags
LEAF_NODE	2491:19	2491:19	6	&
FIELD	2491:20	2491:20	6	TIFF_SWAB
LEAF_NODE	2491:20	2491:20	7	TIFF_SWAB
LEAF_NODE	2491:29	2491:29	4	)
STATEMENTS	2492:2	2492:2	4	
EXPR_STATEMENT	2492:2	2492:35	5	TIFFSwabArrayOfFloat ( value , count ) ;
EXPR	2492:2	2492:2	6	TIFFSwabArrayOfFloat ( value , count )
FUNCTION_CALL	2492:2	2492:34	7	TIFFSwabArrayOfFloat ( value , count )
CALLEE	2492:2	2492:2	8	TIFFSwabArrayOfFloat
LEAF_NODE	2492:2	2492:2	9	TIFFSwabArrayOfFloat
LEAF_NODE	2492:22	2492:22	8	(
ARGUMENT	2492:23	2492:23	8	value
FIELD	2492:23	2492:23	9	value
LEAF_NODE	2492:23	2492:23	10	value
LEAF_NODE	2492:28	2492:28	8	,
ARGUMENT	2492:29	2492:29	8	count
FIELD	2492:29	2492:29	9	count
LEAF_NODE	2492:29	2492:29	10	count
LEAF_NODE	2492:34	2492:34	8	)
LEAF_NODE	2492:35	2492:35	6	;
JUMP_STATEMENT	2493:1	2493:83	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_FLOAT , count , count * 4 , value ) ) ;
KEYWORD	2493:1	2493:1	4	return
LEAF_NODE	2493:1	2493:1	5	return
DESTINATION	2493:7	2493:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_FLOAT , count , count * 4 , value ) )
EXPR	2493:7	2493:82	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_FLOAT , count , count * 4 , value ) )
LEAF_NODE	2493:7	2493:7	6	(
FUNCTION_CALL	2493:8	2493:81	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_FLOAT , count , count * 4 , value )
CALLEE	2493:8	2493:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2493:8	2493:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2493:33	2493:33	7	(
ARGUMENT	2493:34	2493:34	7	tif
FIELD	2493:34	2493:34	8	tif
LEAF_NODE	2493:34	2493:34	9	tif
LEAF_NODE	2493:37	2493:37	7	,
ARGUMENT	2493:38	2493:38	7	ndir
FIELD	2493:38	2493:38	8	ndir
LEAF_NODE	2493:38	2493:38	9	ndir
LEAF_NODE	2493:42	2493:42	7	,
ARGUMENT	2493:43	2493:43	7	dir
FIELD	2493:43	2493:43	8	dir
LEAF_NODE	2493:43	2493:43	9	dir
LEAF_NODE	2493:46	2493:46	7	,
ARGUMENT	2493:47	2493:47	7	tag
FIELD	2493:47	2493:47	8	tag
LEAF_NODE	2493:47	2493:47	9	tag
LEAF_NODE	2493:50	2493:50	7	,
ARGUMENT	2493:51	2493:51	7	TIFF_FLOAT
FIELD	2493:51	2493:51	8	TIFF_FLOAT
LEAF_NODE	2493:51	2493:51	9	TIFF_FLOAT
LEAF_NODE	2493:61	2493:61	7	,
ARGUMENT	2493:62	2493:62	7	count
FIELD	2493:62	2493:62	8	count
LEAF_NODE	2493:62	2493:62	9	count
LEAF_NODE	2493:67	2493:67	7	,
ARGUMENT	2493:68	2493:74	7	count * 4
FIELD	2493:68	2493:68	8	count
LEAF_NODE	2493:68	2493:68	9	count
LEAF_NODE	2493:73	2493:73	8	*
FIELD	2493:74	2493:74	8	4
LEAF_NODE	2493:74	2493:74	9	4
LEAF_NODE	2493:75	2493:75	7	,
ARGUMENT	2493:76	2493:76	7	value
FIELD	2493:76	2493:76	8	value
LEAF_NODE	2493:76	2493:76	9	value
LEAF_NODE	2493:81	2493:81	7	)
LEAF_NODE	2493:82	2493:82	6	)
LEAF_NODE	2493:83	2493:83	4	;
LEAF_NODE	2494:0	2494:0	2	}
FUNCTION_DEF	2497:0	2507:0	1	
RETURN_TYPE	2497:0	2497:7	2	static int
LEAF_NODE	2497:0	2497:0	3	static
TYPE_NAME	2497:7	2497:7	3	int
LEAF_NODE	2497:7	2497:7	4	int
FUNCTION_NAME	2498:0	2498:0	2	TIFFWriteDirectoryTagCheckedDouble
LEAF_NODE	2498:0	2498:0	3	TIFFWriteDirectoryTagCheckedDouble
PARAMETER_LIST	2498:34	2498:103	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , double value )
LEAF_NODE	2498:34	2498:34	3	(
PARAMETER_DECL	2498:35	2498:41	3	TIFF * tif
TYPE	2498:35	2498:39	4	TIFF *
TYPE_NAME	2498:35	2498:35	5	TIFF
LEAF_NODE	2498:35	2498:35	6	TIFF
POINTER	2498:39	2498:39	5	*
LEAF_NODE	2498:39	2498:39	6	*
NAME	2498:41	2498:41	4	tif
LEAF_NODE	2498:41	2498:41	5	tif
LEAF_NODE	2498:44	2498:44	3	,
PARAMETER_DECL	2498:46	2498:54	3	uint32 * ndir
TYPE	2498:46	2498:52	4	uint32 *
TYPE_NAME	2498:46	2498:46	5	uint32
LEAF_NODE	2498:46	2498:46	6	uint32
POINTER	2498:52	2498:52	5	*
LEAF_NODE	2498:52	2498:52	6	*
NAME	2498:54	2498:54	4	ndir
LEAF_NODE	2498:54	2498:54	5	ndir
LEAF_NODE	2498:58	2498:58	3	,
PARAMETER_DECL	2498:60	2498:74	3	TIFFDirEntry * dir
TYPE	2498:60	2498:72	4	TIFFDirEntry *
TYPE_NAME	2498:60	2498:60	5	TIFFDirEntry
LEAF_NODE	2498:60	2498:60	6	TIFFDirEntry
POINTER	2498:72	2498:72	5	*
LEAF_NODE	2498:72	2498:72	6	*
NAME	2498:74	2498:74	4	dir
LEAF_NODE	2498:74	2498:74	5	dir
LEAF_NODE	2498:77	2498:77	3	,
PARAMETER_DECL	2498:79	2498:86	3	uint16 tag
TYPE	2498:79	2498:79	4	uint16
TYPE_NAME	2498:79	2498:79	5	uint16
LEAF_NODE	2498:79	2498:79	6	uint16
NAME	2498:86	2498:86	4	tag
LEAF_NODE	2498:86	2498:86	5	tag
LEAF_NODE	2498:89	2498:89	3	,
PARAMETER_DECL	2498:91	2498:98	3	double value
TYPE	2498:91	2498:91	4	double
TYPE_NAME	2498:91	2498:91	5	double
LEAF_NODE	2498:91	2498:91	6	double
NAME	2498:98	2498:98	4	value
LEAF_NODE	2498:98	2498:98	5	value
LEAF_NODE	2498:103	2498:103	3	)
LEAF_NODE	2499:0	2499:0	2	{
STATEMENTS	2500:1	2506:1	2	
SIMPLE_DECL	2500:1	2500:9	3	double m ;
VAR_DECL	2500:1	2500:8	4	double m
TYPE	2500:1	2500:1	5	double
TYPE_NAME	2500:1	2500:1	6	double
LEAF_NODE	2500:1	2500:1	7	double
NAME	2500:8	2500:8	5	m
LEAF_NODE	2500:8	2500:8	6	m
LEAF_NODE	2500:9	2500:9	4	;
EXPR_STATEMENT	2501:1	2501:26	3	assert ( sizeof ( double ) == 8 ) ;
EXPR	2501:1	2501:1	4	assert ( sizeof ( double ) == 8 )
FUNCTION_CALL	2501:1	2501:25	5	assert ( sizeof ( double ) == 8 )
CALLEE	2501:1	2501:1	6	assert
LEAF_NODE	2501:1	2501:1	7	assert
LEAF_NODE	2501:7	2501:7	6	(
ARGUMENT	2501:8	2501:24	6	sizeof ( double ) == 8
FUNCTION_CALL	2501:8	2501:21	7	sizeof ( double )
CALLEE	2501:8	2501:8	8	sizeof
LEAF_NODE	2501:8	2501:8	9	sizeof
LEAF_NODE	2501:14	2501:14	8	(
ARGUMENT	2501:15	2501:15	8	double
FIELD	2501:15	2501:15	9	double
LEAF_NODE	2501:15	2501:15	10	double
LEAF_NODE	2501:21	2501:21	8	)
EQ_OPERATOR	2501:22	2501:22	7	==
LEAF_NODE	2501:22	2501:22	8	==
FIELD	2501:24	2501:24	7	8
LEAF_NODE	2501:24	2501:24	8	8
LEAF_NODE	2501:25	2501:25	6	)
LEAF_NODE	2501:26	2501:26	4	;
EXPR_STATEMENT	2502:1	2502:8	3	m = value ;
EXPR	2502:1	2502:1	4	m = value
ASSIGN	2502:1	2502:3	5	m = value
LVAL	2502:1	2502:1	6	m
FIELD	2502:1	2502:1	7	m
LEAF_NODE	2502:1	2502:1	8	m
ASSIGN_OP	2502:2	2502:2	6	=
LEAF_NODE	2502:2	2502:2	7	=
RVAL	2502:3	2502:3	6	value
FIELD	2502:3	2502:3	7	value
LEAF_NODE	2502:3	2502:3	8	value
LEAF_NODE	2502:8	2502:8	4	;
EXPR_STATEMENT	2503:1	2503:36	3	TIFFCvtNativeToIEEEDouble ( tif , 1 , & m ) ;
EXPR	2503:1	2503:1	4	TIFFCvtNativeToIEEEDouble ( tif , 1 , & m )
FUNCTION_CALL	2503:1	2503:35	5	TIFFCvtNativeToIEEEDouble ( tif , 1 , & m )
CALLEE	2503:1	2503:1	6	TIFFCvtNativeToIEEEDouble
LEAF_NODE	2503:1	2503:1	7	TIFFCvtNativeToIEEEDouble
LEAF_NODE	2503:26	2503:26	6	(
ARGUMENT	2503:27	2503:27	6	tif
FIELD	2503:27	2503:27	7	tif
LEAF_NODE	2503:27	2503:27	8	tif
LEAF_NODE	2503:30	2503:30	6	,
ARGUMENT	2503:31	2503:31	6	1
FIELD	2503:31	2503:31	7	1
LEAF_NODE	2503:31	2503:31	8	1
LEAF_NODE	2503:32	2503:32	6	,
ARGUMENT	2503:33	2503:33	6	& m
UNARY_EXPR	2503:33	2503:34	7	& m
UNARY_OPERATOR	2503:33	2503:33	8	&
LEAF_NODE	2503:33	2503:33	9	&
FIELD	2503:34	2503:34	8	m
LEAF_NODE	2503:34	2503:34	9	m
LEAF_NODE	2503:35	2503:35	6	)
LEAF_NODE	2503:36	2503:36	4	;
SELECTION	2504:1	2505:2	3	
KEYWORD	2504:1	2504:1	4	if
LEAF_NODE	2504:1	2504:1	5	if
LEAF_NODE	2504:4	2504:4	4	(
CONDITION	2504:5	2504:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2504:5	2504:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2504:5	2504:10	6	tif -> tif_flags
LEAF_NODE	2504:5	2504:5	7	tif
LEAF_NODE	2504:8	2504:8	7	->
LEAF_NODE	2504:10	2504:10	7	tif_flags
LEAF_NODE	2504:19	2504:19	6	&
FIELD	2504:20	2504:20	6	TIFF_SWAB
LEAF_NODE	2504:20	2504:20	7	TIFF_SWAB
LEAF_NODE	2504:29	2504:29	4	)
STATEMENTS	2505:2	2505:2	4	
EXPR_STATEMENT	2505:2	2505:20	5	TIFFSwabDouble ( & m ) ;
EXPR	2505:2	2505:2	6	TIFFSwabDouble ( & m )
FUNCTION_CALL	2505:2	2505:19	7	TIFFSwabDouble ( & m )
CALLEE	2505:2	2505:2	8	TIFFSwabDouble
LEAF_NODE	2505:2	2505:2	9	TIFFSwabDouble
LEAF_NODE	2505:16	2505:16	8	(
ARGUMENT	2505:17	2505:17	8	& m
UNARY_EXPR	2505:17	2505:18	9	& m
UNARY_OPERATOR	2505:17	2505:17	10	&
LEAF_NODE	2505:17	2505:17	11	&
FIELD	2505:18	2505:18	10	m
LEAF_NODE	2505:18	2505:18	11	m
LEAF_NODE	2505:19	2505:19	8	)
LEAF_NODE	2505:20	2505:20	6	;
JUMP_STATEMENT	2506:1	2506:71	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_DOUBLE , 1 , 8 , & m ) ) ;
KEYWORD	2506:1	2506:1	4	return
LEAF_NODE	2506:1	2506:1	5	return
DESTINATION	2506:7	2506:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_DOUBLE , 1 , 8 , & m ) )
EXPR	2506:7	2506:70	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_DOUBLE , 1 , 8 , & m ) )
LEAF_NODE	2506:7	2506:7	6	(
FUNCTION_CALL	2506:8	2506:69	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_DOUBLE , 1 , 8 , & m )
CALLEE	2506:8	2506:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2506:8	2506:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2506:33	2506:33	7	(
ARGUMENT	2506:34	2506:34	7	tif
FIELD	2506:34	2506:34	8	tif
LEAF_NODE	2506:34	2506:34	9	tif
LEAF_NODE	2506:37	2506:37	7	,
ARGUMENT	2506:38	2506:38	7	ndir
FIELD	2506:38	2506:38	8	ndir
LEAF_NODE	2506:38	2506:38	9	ndir
LEAF_NODE	2506:42	2506:42	7	,
ARGUMENT	2506:43	2506:43	7	dir
FIELD	2506:43	2506:43	8	dir
LEAF_NODE	2506:43	2506:43	9	dir
LEAF_NODE	2506:46	2506:46	7	,
ARGUMENT	2506:47	2506:47	7	tag
FIELD	2506:47	2506:47	8	tag
LEAF_NODE	2506:47	2506:47	9	tag
LEAF_NODE	2506:50	2506:50	7	,
ARGUMENT	2506:51	2506:51	7	TIFF_DOUBLE
FIELD	2506:51	2506:51	8	TIFF_DOUBLE
LEAF_NODE	2506:51	2506:51	9	TIFF_DOUBLE
LEAF_NODE	2506:62	2506:62	7	,
ARGUMENT	2506:63	2506:63	7	1
FIELD	2506:63	2506:63	8	1
LEAF_NODE	2506:63	2506:63	9	1
LEAF_NODE	2506:64	2506:64	7	,
ARGUMENT	2506:65	2506:65	7	8
FIELD	2506:65	2506:65	8	8
LEAF_NODE	2506:65	2506:65	9	8
LEAF_NODE	2506:66	2506:66	7	,
ARGUMENT	2506:67	2506:67	7	& m
UNARY_EXPR	2506:67	2506:68	8	& m
UNARY_OPERATOR	2506:67	2506:67	9	&
LEAF_NODE	2506:67	2506:67	10	&
FIELD	2506:68	2506:68	9	m
LEAF_NODE	2506:68	2506:68	10	m
LEAF_NODE	2506:69	2506:69	7	)
LEAF_NODE	2506:70	2506:70	6	)
LEAF_NODE	2506:71	2506:71	4	;
LEAF_NODE	2507:0	2507:0	2	}
FUNCTION_DEF	2510:0	2519:0	1	
RETURN_TYPE	2510:0	2510:7	2	static int
LEAF_NODE	2510:0	2510:0	3	static
TYPE_NAME	2510:7	2510:7	3	int
LEAF_NODE	2510:7	2510:7	4	int
FUNCTION_NAME	2511:0	2511:0	2	TIFFWriteDirectoryTagCheckedDoubleArray
LEAF_NODE	2511:0	2511:0	3	TIFFWriteDirectoryTagCheckedDoubleArray
PARAMETER_LIST	2511:39	2511:123	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , double * value )
LEAF_NODE	2511:39	2511:39	3	(
PARAMETER_DECL	2511:40	2511:46	3	TIFF * tif
TYPE	2511:40	2511:44	4	TIFF *
TYPE_NAME	2511:40	2511:40	5	TIFF
LEAF_NODE	2511:40	2511:40	6	TIFF
POINTER	2511:44	2511:44	5	*
LEAF_NODE	2511:44	2511:44	6	*
NAME	2511:46	2511:46	4	tif
LEAF_NODE	2511:46	2511:46	5	tif
LEAF_NODE	2511:49	2511:49	3	,
PARAMETER_DECL	2511:51	2511:59	3	uint32 * ndir
TYPE	2511:51	2511:57	4	uint32 *
TYPE_NAME	2511:51	2511:51	5	uint32
LEAF_NODE	2511:51	2511:51	6	uint32
POINTER	2511:57	2511:57	5	*
LEAF_NODE	2511:57	2511:57	6	*
NAME	2511:59	2511:59	4	ndir
LEAF_NODE	2511:59	2511:59	5	ndir
LEAF_NODE	2511:63	2511:63	3	,
PARAMETER_DECL	2511:65	2511:79	3	TIFFDirEntry * dir
TYPE	2511:65	2511:77	4	TIFFDirEntry *
TYPE_NAME	2511:65	2511:65	5	TIFFDirEntry
LEAF_NODE	2511:65	2511:65	6	TIFFDirEntry
POINTER	2511:77	2511:77	5	*
LEAF_NODE	2511:77	2511:77	6	*
NAME	2511:79	2511:79	4	dir
LEAF_NODE	2511:79	2511:79	5	dir
LEAF_NODE	2511:82	2511:82	3	,
PARAMETER_DECL	2511:84	2511:91	3	uint16 tag
TYPE	2511:84	2511:84	4	uint16
TYPE_NAME	2511:84	2511:84	5	uint16
LEAF_NODE	2511:84	2511:84	6	uint16
NAME	2511:91	2511:91	4	tag
LEAF_NODE	2511:91	2511:91	5	tag
LEAF_NODE	2511:94	2511:94	3	,
PARAMETER_DECL	2511:96	2511:103	3	uint32 count
TYPE	2511:96	2511:96	4	uint32
TYPE_NAME	2511:96	2511:96	5	uint32
LEAF_NODE	2511:96	2511:96	6	uint32
NAME	2511:103	2511:103	4	count
LEAF_NODE	2511:103	2511:103	5	count
LEAF_NODE	2511:108	2511:108	3	,
PARAMETER_DECL	2511:110	2511:118	3	double * value
TYPE	2511:110	2511:116	4	double *
TYPE_NAME	2511:110	2511:110	5	double
LEAF_NODE	2511:110	2511:110	6	double
POINTER	2511:116	2511:116	5	*
LEAF_NODE	2511:116	2511:116	6	*
NAME	2511:118	2511:118	4	value
LEAF_NODE	2511:118	2511:118	5	value
LEAF_NODE	2511:123	2511:123	3	)
LEAF_NODE	2512:0	2512:0	2	{
STATEMENTS	2513:1	2518:1	2	
EXPR_STATEMENT	2513:1	2513:25	3	assert ( count < 0x20000000 ) ;
EXPR	2513:1	2513:1	4	assert ( count < 0x20000000 )
FUNCTION_CALL	2513:1	2513:24	5	assert ( count < 0x20000000 )
CALLEE	2513:1	2513:1	6	assert
LEAF_NODE	2513:1	2513:1	7	assert
LEAF_NODE	2513:7	2513:7	6	(
ARGUMENT	2513:8	2513:14	6	count < 0x20000000
FIELD	2513:8	2513:8	7	count
LEAF_NODE	2513:8	2513:8	8	count
REL_OPERATOR	2513:13	2513:13	7	<
LEAF_NODE	2513:13	2513:13	8	<
FIELD	2513:14	2513:14	7	0x20000000
LEAF_NODE	2513:14	2513:14	8	0x20000000
LEAF_NODE	2513:24	2513:24	6	)
LEAF_NODE	2513:25	2513:25	4	;
EXPR_STATEMENT	2514:1	2514:26	3	assert ( sizeof ( double ) == 8 ) ;
EXPR	2514:1	2514:1	4	assert ( sizeof ( double ) == 8 )
FUNCTION_CALL	2514:1	2514:25	5	assert ( sizeof ( double ) == 8 )
CALLEE	2514:1	2514:1	6	assert
LEAF_NODE	2514:1	2514:1	7	assert
LEAF_NODE	2514:7	2514:7	6	(
ARGUMENT	2514:8	2514:24	6	sizeof ( double ) == 8
FUNCTION_CALL	2514:8	2514:21	7	sizeof ( double )
CALLEE	2514:8	2514:8	8	sizeof
LEAF_NODE	2514:8	2514:8	9	sizeof
LEAF_NODE	2514:14	2514:14	8	(
ARGUMENT	2514:15	2514:15	8	double
FIELD	2514:15	2514:15	9	double
LEAF_NODE	2514:15	2514:15	10	double
LEAF_NODE	2514:21	2514:21	8	)
EQ_OPERATOR	2514:22	2514:22	7	==
LEAF_NODE	2514:22	2514:22	8	==
FIELD	2514:24	2514:24	7	8
LEAF_NODE	2514:24	2514:24	8	8
LEAF_NODE	2514:25	2514:25	6	)
LEAF_NODE	2514:26	2514:26	4	;
EXPR_STATEMENT	2515:1	2515:44	3	TIFFCvtNativeToIEEEDouble ( tif , count , & value ) ;
EXPR	2515:1	2515:1	4	TIFFCvtNativeToIEEEDouble ( tif , count , & value )
FUNCTION_CALL	2515:1	2515:43	5	TIFFCvtNativeToIEEEDouble ( tif , count , & value )
CALLEE	2515:1	2515:1	6	TIFFCvtNativeToIEEEDouble
LEAF_NODE	2515:1	2515:1	7	TIFFCvtNativeToIEEEDouble
LEAF_NODE	2515:26	2515:26	6	(
ARGUMENT	2515:27	2515:27	6	tif
FIELD	2515:27	2515:27	7	tif
LEAF_NODE	2515:27	2515:27	8	tif
LEAF_NODE	2515:30	2515:30	6	,
ARGUMENT	2515:31	2515:31	6	count
FIELD	2515:31	2515:31	7	count
LEAF_NODE	2515:31	2515:31	8	count
LEAF_NODE	2515:36	2515:36	6	,
ARGUMENT	2515:37	2515:37	6	& value
UNARY_EXPR	2515:37	2515:38	7	& value
UNARY_OPERATOR	2515:37	2515:37	8	&
LEAF_NODE	2515:37	2515:37	9	&
FIELD	2515:38	2515:38	8	value
LEAF_NODE	2515:38	2515:38	9	value
LEAF_NODE	2515:43	2515:43	6	)
LEAF_NODE	2515:44	2515:44	4	;
SELECTION	2516:1	2517:2	3	
KEYWORD	2516:1	2516:1	4	if
LEAF_NODE	2516:1	2516:1	5	if
LEAF_NODE	2516:4	2516:4	4	(
CONDITION	2516:5	2516:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2516:5	2516:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2516:5	2516:10	6	tif -> tif_flags
LEAF_NODE	2516:5	2516:5	7	tif
LEAF_NODE	2516:8	2516:8	7	->
LEAF_NODE	2516:10	2516:10	7	tif_flags
LEAF_NODE	2516:19	2516:19	6	&
FIELD	2516:20	2516:20	6	TIFF_SWAB
LEAF_NODE	2516:20	2516:20	7	TIFF_SWAB
LEAF_NODE	2516:29	2516:29	4	)
STATEMENTS	2517:2	2517:2	4	
EXPR_STATEMENT	2517:2	2517:36	5	TIFFSwabArrayOfDouble ( value , count ) ;
EXPR	2517:2	2517:2	6	TIFFSwabArrayOfDouble ( value , count )
FUNCTION_CALL	2517:2	2517:35	7	TIFFSwabArrayOfDouble ( value , count )
CALLEE	2517:2	2517:2	8	TIFFSwabArrayOfDouble
LEAF_NODE	2517:2	2517:2	9	TIFFSwabArrayOfDouble
LEAF_NODE	2517:23	2517:23	8	(
ARGUMENT	2517:24	2517:24	8	value
FIELD	2517:24	2517:24	9	value
LEAF_NODE	2517:24	2517:24	10	value
LEAF_NODE	2517:29	2517:29	8	,
ARGUMENT	2517:30	2517:30	8	count
FIELD	2517:30	2517:30	9	count
LEAF_NODE	2517:30	2517:30	10	count
LEAF_NODE	2517:35	2517:35	8	)
LEAF_NODE	2517:36	2517:36	6	;
JUMP_STATEMENT	2518:1	2518:84	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_DOUBLE , count , count * 8 , value ) ) ;
KEYWORD	2518:1	2518:1	4	return
LEAF_NODE	2518:1	2518:1	5	return
DESTINATION	2518:7	2518:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_DOUBLE , count , count * 8 , value ) )
EXPR	2518:7	2518:83	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_DOUBLE , count , count * 8 , value ) )
LEAF_NODE	2518:7	2518:7	6	(
FUNCTION_CALL	2518:8	2518:82	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_DOUBLE , count , count * 8 , value )
CALLEE	2518:8	2518:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2518:8	2518:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2518:33	2518:33	7	(
ARGUMENT	2518:34	2518:34	7	tif
FIELD	2518:34	2518:34	8	tif
LEAF_NODE	2518:34	2518:34	9	tif
LEAF_NODE	2518:37	2518:37	7	,
ARGUMENT	2518:38	2518:38	7	ndir
FIELD	2518:38	2518:38	8	ndir
LEAF_NODE	2518:38	2518:38	9	ndir
LEAF_NODE	2518:42	2518:42	7	,
ARGUMENT	2518:43	2518:43	7	dir
FIELD	2518:43	2518:43	8	dir
LEAF_NODE	2518:43	2518:43	9	dir
LEAF_NODE	2518:46	2518:46	7	,
ARGUMENT	2518:47	2518:47	7	tag
FIELD	2518:47	2518:47	8	tag
LEAF_NODE	2518:47	2518:47	9	tag
LEAF_NODE	2518:50	2518:50	7	,
ARGUMENT	2518:51	2518:51	7	TIFF_DOUBLE
FIELD	2518:51	2518:51	8	TIFF_DOUBLE
LEAF_NODE	2518:51	2518:51	9	TIFF_DOUBLE
LEAF_NODE	2518:62	2518:62	7	,
ARGUMENT	2518:63	2518:63	7	count
FIELD	2518:63	2518:63	8	count
LEAF_NODE	2518:63	2518:63	9	count
LEAF_NODE	2518:68	2518:68	7	,
ARGUMENT	2518:69	2518:75	7	count * 8
FIELD	2518:69	2518:69	8	count
LEAF_NODE	2518:69	2518:69	9	count
LEAF_NODE	2518:74	2518:74	8	*
FIELD	2518:75	2518:75	8	8
LEAF_NODE	2518:75	2518:75	9	8
LEAF_NODE	2518:76	2518:76	7	,
ARGUMENT	2518:77	2518:77	7	value
FIELD	2518:77	2518:77	8	value
LEAF_NODE	2518:77	2518:77	9	value
LEAF_NODE	2518:82	2518:82	7	)
LEAF_NODE	2518:83	2518:83	6	)
LEAF_NODE	2518:84	2518:84	4	;
LEAF_NODE	2519:0	2519:0	2	}
FUNCTION_DEF	2521:0	2529:0	1	
RETURN_TYPE	2521:0	2521:7	2	static int
LEAF_NODE	2521:0	2521:0	3	static
TYPE_NAME	2521:7	2521:7	3	int
LEAF_NODE	2521:7	2521:7	4	int
FUNCTION_NAME	2522:0	2522:0	2	TIFFWriteDirectoryTagCheckedIfdArray
LEAF_NODE	2522:0	2522:0	3	TIFFWriteDirectoryTagCheckedIfdArray
PARAMETER_LIST	2522:36	2522:120	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint32 * value )
LEAF_NODE	2522:36	2522:36	3	(
PARAMETER_DECL	2522:37	2522:43	3	TIFF * tif
TYPE	2522:37	2522:41	4	TIFF *
TYPE_NAME	2522:37	2522:37	5	TIFF
LEAF_NODE	2522:37	2522:37	6	TIFF
POINTER	2522:41	2522:41	5	*
LEAF_NODE	2522:41	2522:41	6	*
NAME	2522:43	2522:43	4	tif
LEAF_NODE	2522:43	2522:43	5	tif
LEAF_NODE	2522:46	2522:46	3	,
PARAMETER_DECL	2522:48	2522:56	3	uint32 * ndir
TYPE	2522:48	2522:54	4	uint32 *
TYPE_NAME	2522:48	2522:48	5	uint32
LEAF_NODE	2522:48	2522:48	6	uint32
POINTER	2522:54	2522:54	5	*
LEAF_NODE	2522:54	2522:54	6	*
NAME	2522:56	2522:56	4	ndir
LEAF_NODE	2522:56	2522:56	5	ndir
LEAF_NODE	2522:60	2522:60	3	,
PARAMETER_DECL	2522:62	2522:76	3	TIFFDirEntry * dir
TYPE	2522:62	2522:74	4	TIFFDirEntry *
TYPE_NAME	2522:62	2522:62	5	TIFFDirEntry
LEAF_NODE	2522:62	2522:62	6	TIFFDirEntry
POINTER	2522:74	2522:74	5	*
LEAF_NODE	2522:74	2522:74	6	*
NAME	2522:76	2522:76	4	dir
LEAF_NODE	2522:76	2522:76	5	dir
LEAF_NODE	2522:79	2522:79	3	,
PARAMETER_DECL	2522:81	2522:88	3	uint16 tag
TYPE	2522:81	2522:81	4	uint16
TYPE_NAME	2522:81	2522:81	5	uint16
LEAF_NODE	2522:81	2522:81	6	uint16
NAME	2522:88	2522:88	4	tag
LEAF_NODE	2522:88	2522:88	5	tag
LEAF_NODE	2522:91	2522:91	3	,
PARAMETER_DECL	2522:93	2522:100	3	uint32 count
TYPE	2522:93	2522:93	4	uint32
TYPE_NAME	2522:93	2522:93	5	uint32
LEAF_NODE	2522:93	2522:93	6	uint32
NAME	2522:100	2522:100	4	count
LEAF_NODE	2522:100	2522:100	5	count
LEAF_NODE	2522:105	2522:105	3	,
PARAMETER_DECL	2522:107	2522:115	3	uint32 * value
TYPE	2522:107	2522:113	4	uint32 *
TYPE_NAME	2522:107	2522:107	5	uint32
LEAF_NODE	2522:107	2522:107	6	uint32
POINTER	2522:113	2522:113	5	*
LEAF_NODE	2522:113	2522:113	6	*
NAME	2522:115	2522:115	4	value
LEAF_NODE	2522:115	2522:115	5	value
LEAF_NODE	2522:120	2522:120	3	)
LEAF_NODE	2523:0	2523:0	2	{
STATEMENTS	2524:1	2528:1	2	
EXPR_STATEMENT	2524:1	2524:25	3	assert ( count < 0x40000000 ) ;
EXPR	2524:1	2524:1	4	assert ( count < 0x40000000 )
FUNCTION_CALL	2524:1	2524:24	5	assert ( count < 0x40000000 )
CALLEE	2524:1	2524:1	6	assert
LEAF_NODE	2524:1	2524:1	7	assert
LEAF_NODE	2524:7	2524:7	6	(
ARGUMENT	2524:8	2524:14	6	count < 0x40000000
FIELD	2524:8	2524:8	7	count
LEAF_NODE	2524:8	2524:8	8	count
REL_OPERATOR	2524:13	2524:13	7	<
LEAF_NODE	2524:13	2524:13	8	<
FIELD	2524:14	2524:14	7	0x40000000
LEAF_NODE	2524:14	2524:14	8	0x40000000
LEAF_NODE	2524:24	2524:24	6	)
LEAF_NODE	2524:25	2524:25	4	;
EXPR_STATEMENT	2525:1	2525:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	2525:1	2525:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	2525:1	2525:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	2525:1	2525:1	6	assert
LEAF_NODE	2525:1	2525:1	7	assert
LEAF_NODE	2525:7	2525:7	6	(
ARGUMENT	2525:8	2525:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	2525:8	2525:21	7	sizeof ( uint32 )
CALLEE	2525:8	2525:8	8	sizeof
LEAF_NODE	2525:8	2525:8	9	sizeof
LEAF_NODE	2525:14	2525:14	8	(
ARGUMENT	2525:15	2525:15	8	uint32
FIELD	2525:15	2525:15	9	uint32
LEAF_NODE	2525:15	2525:15	10	uint32
LEAF_NODE	2525:21	2525:21	8	)
EQ_OPERATOR	2525:22	2525:22	7	==
LEAF_NODE	2525:22	2525:22	8	==
FIELD	2525:24	2525:24	7	4
LEAF_NODE	2525:24	2525:24	8	4
LEAF_NODE	2525:25	2525:25	6	)
LEAF_NODE	2525:26	2525:26	4	;
SELECTION	2526:1	2527:2	3	
KEYWORD	2526:1	2526:1	4	if
LEAF_NODE	2526:1	2526:1	5	if
LEAF_NODE	2526:4	2526:4	4	(
CONDITION	2526:5	2526:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2526:5	2526:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2526:5	2526:10	6	tif -> tif_flags
LEAF_NODE	2526:5	2526:5	7	tif
LEAF_NODE	2526:8	2526:8	7	->
LEAF_NODE	2526:10	2526:10	7	tif_flags
LEAF_NODE	2526:19	2526:19	6	&
FIELD	2526:20	2526:20	6	TIFF_SWAB
LEAF_NODE	2526:20	2526:20	7	TIFF_SWAB
LEAF_NODE	2526:29	2526:29	4	)
STATEMENTS	2527:2	2527:2	4	
EXPR_STATEMENT	2527:2	2527:34	5	TIFFSwabArrayOfLong ( value , count ) ;
EXPR	2527:2	2527:2	6	TIFFSwabArrayOfLong ( value , count )
FUNCTION_CALL	2527:2	2527:33	7	TIFFSwabArrayOfLong ( value , count )
CALLEE	2527:2	2527:2	8	TIFFSwabArrayOfLong
LEAF_NODE	2527:2	2527:2	9	TIFFSwabArrayOfLong
LEAF_NODE	2527:21	2527:21	8	(
ARGUMENT	2527:22	2527:22	8	value
FIELD	2527:22	2527:22	9	value
LEAF_NODE	2527:22	2527:22	10	value
LEAF_NODE	2527:27	2527:27	8	,
ARGUMENT	2527:28	2527:28	8	count
FIELD	2527:28	2527:28	9	count
LEAF_NODE	2527:28	2527:28	10	count
LEAF_NODE	2527:33	2527:33	8	)
LEAF_NODE	2527:34	2527:34	6	;
JUMP_STATEMENT	2528:1	2528:81	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_IFD , count , count * 4 , value ) ) ;
KEYWORD	2528:1	2528:1	4	return
LEAF_NODE	2528:1	2528:1	5	return
DESTINATION	2528:7	2528:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_IFD , count , count * 4 , value ) )
EXPR	2528:7	2528:80	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_IFD , count , count * 4 , value ) )
LEAF_NODE	2528:7	2528:7	6	(
FUNCTION_CALL	2528:8	2528:79	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_IFD , count , count * 4 , value )
CALLEE	2528:8	2528:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2528:8	2528:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2528:33	2528:33	7	(
ARGUMENT	2528:34	2528:34	7	tif
FIELD	2528:34	2528:34	8	tif
LEAF_NODE	2528:34	2528:34	9	tif
LEAF_NODE	2528:37	2528:37	7	,
ARGUMENT	2528:38	2528:38	7	ndir
FIELD	2528:38	2528:38	8	ndir
LEAF_NODE	2528:38	2528:38	9	ndir
LEAF_NODE	2528:42	2528:42	7	,
ARGUMENT	2528:43	2528:43	7	dir
FIELD	2528:43	2528:43	8	dir
LEAF_NODE	2528:43	2528:43	9	dir
LEAF_NODE	2528:46	2528:46	7	,
ARGUMENT	2528:47	2528:47	7	tag
FIELD	2528:47	2528:47	8	tag
LEAF_NODE	2528:47	2528:47	9	tag
LEAF_NODE	2528:50	2528:50	7	,
ARGUMENT	2528:51	2528:51	7	TIFF_IFD
FIELD	2528:51	2528:51	8	TIFF_IFD
LEAF_NODE	2528:51	2528:51	9	TIFF_IFD
LEAF_NODE	2528:59	2528:59	7	,
ARGUMENT	2528:60	2528:60	7	count
FIELD	2528:60	2528:60	8	count
LEAF_NODE	2528:60	2528:60	9	count
LEAF_NODE	2528:65	2528:65	7	,
ARGUMENT	2528:66	2528:72	7	count * 4
FIELD	2528:66	2528:66	8	count
LEAF_NODE	2528:66	2528:66	9	count
LEAF_NODE	2528:71	2528:71	8	*
FIELD	2528:72	2528:72	8	4
LEAF_NODE	2528:72	2528:72	9	4
LEAF_NODE	2528:73	2528:73	7	,
ARGUMENT	2528:74	2528:74	7	value
FIELD	2528:74	2528:74	8	value
LEAF_NODE	2528:74	2528:74	9	value
LEAF_NODE	2528:79	2528:79	7	)
LEAF_NODE	2528:80	2528:80	6	)
LEAF_NODE	2528:81	2528:81	4	;
LEAF_NODE	2529:0	2529:0	2	}
FUNCTION_DEF	2531:0	2540:0	1	
RETURN_TYPE	2531:0	2531:7	2	static int
LEAF_NODE	2531:0	2531:0	3	static
TYPE_NAME	2531:7	2531:7	3	int
LEAF_NODE	2531:7	2531:7	4	int
FUNCTION_NAME	2532:0	2532:0	2	TIFFWriteDirectoryTagCheckedIfd8Array
LEAF_NODE	2532:0	2532:0	3	TIFFWriteDirectoryTagCheckedIfd8Array
PARAMETER_LIST	2532:37	2532:121	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint32 count , uint64 * value )
LEAF_NODE	2532:37	2532:37	3	(
PARAMETER_DECL	2532:38	2532:44	3	TIFF * tif
TYPE	2532:38	2532:42	4	TIFF *
TYPE_NAME	2532:38	2532:38	5	TIFF
LEAF_NODE	2532:38	2532:38	6	TIFF
POINTER	2532:42	2532:42	5	*
LEAF_NODE	2532:42	2532:42	6	*
NAME	2532:44	2532:44	4	tif
LEAF_NODE	2532:44	2532:44	5	tif
LEAF_NODE	2532:47	2532:47	3	,
PARAMETER_DECL	2532:49	2532:57	3	uint32 * ndir
TYPE	2532:49	2532:55	4	uint32 *
TYPE_NAME	2532:49	2532:49	5	uint32
LEAF_NODE	2532:49	2532:49	6	uint32
POINTER	2532:55	2532:55	5	*
LEAF_NODE	2532:55	2532:55	6	*
NAME	2532:57	2532:57	4	ndir
LEAF_NODE	2532:57	2532:57	5	ndir
LEAF_NODE	2532:61	2532:61	3	,
PARAMETER_DECL	2532:63	2532:77	3	TIFFDirEntry * dir
TYPE	2532:63	2532:75	4	TIFFDirEntry *
TYPE_NAME	2532:63	2532:63	5	TIFFDirEntry
LEAF_NODE	2532:63	2532:63	6	TIFFDirEntry
POINTER	2532:75	2532:75	5	*
LEAF_NODE	2532:75	2532:75	6	*
NAME	2532:77	2532:77	4	dir
LEAF_NODE	2532:77	2532:77	5	dir
LEAF_NODE	2532:80	2532:80	3	,
PARAMETER_DECL	2532:82	2532:89	3	uint16 tag
TYPE	2532:82	2532:82	4	uint16
TYPE_NAME	2532:82	2532:82	5	uint16
LEAF_NODE	2532:82	2532:82	6	uint16
NAME	2532:89	2532:89	4	tag
LEAF_NODE	2532:89	2532:89	5	tag
LEAF_NODE	2532:92	2532:92	3	,
PARAMETER_DECL	2532:94	2532:101	3	uint32 count
TYPE	2532:94	2532:94	4	uint32
TYPE_NAME	2532:94	2532:94	5	uint32
LEAF_NODE	2532:94	2532:94	6	uint32
NAME	2532:101	2532:101	4	count
LEAF_NODE	2532:101	2532:101	5	count
LEAF_NODE	2532:106	2532:106	3	,
PARAMETER_DECL	2532:108	2532:116	3	uint64 * value
TYPE	2532:108	2532:114	4	uint64 *
TYPE_NAME	2532:108	2532:108	5	uint64
LEAF_NODE	2532:108	2532:108	6	uint64
POINTER	2532:114	2532:114	5	*
LEAF_NODE	2532:114	2532:114	6	*
NAME	2532:116	2532:116	4	value
LEAF_NODE	2532:116	2532:116	5	value
LEAF_NODE	2532:121	2532:121	3	)
LEAF_NODE	2533:0	2533:0	2	{
STATEMENTS	2534:1	2539:1	2	
EXPR_STATEMENT	2534:1	2534:25	3	assert ( count < 0x20000000 ) ;
EXPR	2534:1	2534:1	4	assert ( count < 0x20000000 )
FUNCTION_CALL	2534:1	2534:24	5	assert ( count < 0x20000000 )
CALLEE	2534:1	2534:1	6	assert
LEAF_NODE	2534:1	2534:1	7	assert
LEAF_NODE	2534:7	2534:7	6	(
ARGUMENT	2534:8	2534:14	6	count < 0x20000000
FIELD	2534:8	2534:8	7	count
LEAF_NODE	2534:8	2534:8	8	count
REL_OPERATOR	2534:13	2534:13	7	<
LEAF_NODE	2534:13	2534:13	8	<
FIELD	2534:14	2534:14	7	0x20000000
LEAF_NODE	2534:14	2534:14	8	0x20000000
LEAF_NODE	2534:24	2534:24	6	)
LEAF_NODE	2534:25	2534:25	4	;
EXPR_STATEMENT	2535:1	2535:26	3	assert ( sizeof ( uint64 ) == 8 ) ;
EXPR	2535:1	2535:1	4	assert ( sizeof ( uint64 ) == 8 )
FUNCTION_CALL	2535:1	2535:25	5	assert ( sizeof ( uint64 ) == 8 )
CALLEE	2535:1	2535:1	6	assert
LEAF_NODE	2535:1	2535:1	7	assert
LEAF_NODE	2535:7	2535:7	6	(
ARGUMENT	2535:8	2535:24	6	sizeof ( uint64 ) == 8
FUNCTION_CALL	2535:8	2535:21	7	sizeof ( uint64 )
CALLEE	2535:8	2535:8	8	sizeof
LEAF_NODE	2535:8	2535:8	9	sizeof
LEAF_NODE	2535:14	2535:14	8	(
ARGUMENT	2535:15	2535:15	8	uint64
FIELD	2535:15	2535:15	9	uint64
LEAF_NODE	2535:15	2535:15	10	uint64
LEAF_NODE	2535:21	2535:21	8	)
EQ_OPERATOR	2535:22	2535:22	7	==
LEAF_NODE	2535:22	2535:22	8	==
FIELD	2535:24	2535:24	7	8
LEAF_NODE	2535:24	2535:24	8	8
LEAF_NODE	2535:25	2535:25	6	)
LEAF_NODE	2535:26	2535:26	4	;
EXPR_STATEMENT	2536:1	2536:36	3	assert ( tif -> tif_flags & TIFF_BIGTIFF ) ;
EXPR	2536:1	2536:1	4	assert ( tif -> tif_flags & TIFF_BIGTIFF )
FUNCTION_CALL	2536:1	2536:35	5	assert ( tif -> tif_flags & TIFF_BIGTIFF )
CALLEE	2536:1	2536:1	6	assert
LEAF_NODE	2536:1	2536:1	7	assert
LEAF_NODE	2536:7	2536:7	6	(
ARGUMENT	2536:8	2536:23	6	tif -> tif_flags & TIFF_BIGTIFF
FIELD	2536:8	2536:13	7	tif -> tif_flags
LEAF_NODE	2536:8	2536:8	8	tif
LEAF_NODE	2536:11	2536:11	8	->
LEAF_NODE	2536:13	2536:13	8	tif_flags
LEAF_NODE	2536:22	2536:22	7	&
FIELD	2536:23	2536:23	7	TIFF_BIGTIFF
LEAF_NODE	2536:23	2536:23	8	TIFF_BIGTIFF
LEAF_NODE	2536:35	2536:35	6	)
LEAF_NODE	2536:36	2536:36	4	;
SELECTION	2537:1	2538:2	3	
KEYWORD	2537:1	2537:1	4	if
LEAF_NODE	2537:1	2537:1	5	if
LEAF_NODE	2537:4	2537:4	4	(
CONDITION	2537:5	2537:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2537:5	2537:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2537:5	2537:10	6	tif -> tif_flags
LEAF_NODE	2537:5	2537:5	7	tif
LEAF_NODE	2537:8	2537:8	7	->
LEAF_NODE	2537:10	2537:10	7	tif_flags
LEAF_NODE	2537:19	2537:19	6	&
FIELD	2537:20	2537:20	6	TIFF_SWAB
LEAF_NODE	2537:20	2537:20	7	TIFF_SWAB
LEAF_NODE	2537:29	2537:29	4	)
STATEMENTS	2538:2	2538:2	4	
EXPR_STATEMENT	2538:2	2538:35	5	TIFFSwabArrayOfLong8 ( value , count ) ;
EXPR	2538:2	2538:2	6	TIFFSwabArrayOfLong8 ( value , count )
FUNCTION_CALL	2538:2	2538:34	7	TIFFSwabArrayOfLong8 ( value , count )
CALLEE	2538:2	2538:2	8	TIFFSwabArrayOfLong8
LEAF_NODE	2538:2	2538:2	9	TIFFSwabArrayOfLong8
LEAF_NODE	2538:22	2538:22	8	(
ARGUMENT	2538:23	2538:23	8	value
FIELD	2538:23	2538:23	9	value
LEAF_NODE	2538:23	2538:23	10	value
LEAF_NODE	2538:28	2538:28	8	,
ARGUMENT	2538:29	2538:29	8	count
FIELD	2538:29	2538:29	9	count
LEAF_NODE	2538:29	2538:29	10	count
LEAF_NODE	2538:34	2538:34	8	)
LEAF_NODE	2538:35	2538:35	6	;
JUMP_STATEMENT	2539:1	2539:82	3	return ( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_IFD8 , count , count * 8 , value ) ) ;
KEYWORD	2539:1	2539:1	4	return
LEAF_NODE	2539:1	2539:1	5	return
DESTINATION	2539:7	2539:7	4	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_IFD8 , count , count * 8 , value ) )
EXPR	2539:7	2539:81	5	( TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_IFD8 , count , count * 8 , value ) )
LEAF_NODE	2539:7	2539:7	6	(
FUNCTION_CALL	2539:8	2539:80	6	TIFFWriteDirectoryTagData ( tif , ndir , dir , tag , TIFF_IFD8 , count , count * 8 , value )
CALLEE	2539:8	2539:8	7	TIFFWriteDirectoryTagData
LEAF_NODE	2539:8	2539:8	8	TIFFWriteDirectoryTagData
LEAF_NODE	2539:33	2539:33	7	(
ARGUMENT	2539:34	2539:34	7	tif
FIELD	2539:34	2539:34	8	tif
LEAF_NODE	2539:34	2539:34	9	tif
LEAF_NODE	2539:37	2539:37	7	,
ARGUMENT	2539:38	2539:38	7	ndir
FIELD	2539:38	2539:38	8	ndir
LEAF_NODE	2539:38	2539:38	9	ndir
LEAF_NODE	2539:42	2539:42	7	,
ARGUMENT	2539:43	2539:43	7	dir
FIELD	2539:43	2539:43	8	dir
LEAF_NODE	2539:43	2539:43	9	dir
LEAF_NODE	2539:46	2539:46	7	,
ARGUMENT	2539:47	2539:47	7	tag
FIELD	2539:47	2539:47	8	tag
LEAF_NODE	2539:47	2539:47	9	tag
LEAF_NODE	2539:50	2539:50	7	,
ARGUMENT	2539:51	2539:51	7	TIFF_IFD8
FIELD	2539:51	2539:51	8	TIFF_IFD8
LEAF_NODE	2539:51	2539:51	9	TIFF_IFD8
LEAF_NODE	2539:60	2539:60	7	,
ARGUMENT	2539:61	2539:61	7	count
FIELD	2539:61	2539:61	8	count
LEAF_NODE	2539:61	2539:61	9	count
LEAF_NODE	2539:66	2539:66	7	,
ARGUMENT	2539:67	2539:73	7	count * 8
FIELD	2539:67	2539:67	8	count
LEAF_NODE	2539:67	2539:67	9	count
LEAF_NODE	2539:72	2539:72	8	*
FIELD	2539:73	2539:73	8	8
LEAF_NODE	2539:73	2539:73	9	8
LEAF_NODE	2539:74	2539:74	7	,
ARGUMENT	2539:75	2539:75	7	value
FIELD	2539:75	2539:75	8	value
LEAF_NODE	2539:75	2539:75	9	value
LEAF_NODE	2539:80	2539:80	7	)
LEAF_NODE	2539:81	2539:81	6	)
LEAF_NODE	2539:82	2539:82	4	;
LEAF_NODE	2540:0	2540:0	2	}
FUNCTION_DEF	2542:0	2615:0	1	
RETURN_TYPE	2542:0	2542:7	2	static int
LEAF_NODE	2542:0	2542:0	3	static
TYPE_NAME	2542:7	2542:7	3	int
LEAF_NODE	2542:7	2542:7	4	int
FUNCTION_NAME	2543:0	2543:0	2	TIFFWriteDirectoryTagData
LEAF_NODE	2543:0	2543:0	3	TIFFWriteDirectoryTagData
PARAMETER_LIST	2543:25	2543:142	2	( TIFF * tif , uint32 * ndir , TIFFDirEntry * dir , uint16 tag , uint16 datatype , uint32 count , uint32 datalength , void * data )
LEAF_NODE	2543:25	2543:25	3	(
PARAMETER_DECL	2543:26	2543:32	3	TIFF * tif
TYPE	2543:26	2543:30	4	TIFF *
TYPE_NAME	2543:26	2543:26	5	TIFF
LEAF_NODE	2543:26	2543:26	6	TIFF
POINTER	2543:30	2543:30	5	*
LEAF_NODE	2543:30	2543:30	6	*
NAME	2543:32	2543:32	4	tif
LEAF_NODE	2543:32	2543:32	5	tif
LEAF_NODE	2543:35	2543:35	3	,
PARAMETER_DECL	2543:37	2543:45	3	uint32 * ndir
TYPE	2543:37	2543:43	4	uint32 *
TYPE_NAME	2543:37	2543:37	5	uint32
LEAF_NODE	2543:37	2543:37	6	uint32
POINTER	2543:43	2543:43	5	*
LEAF_NODE	2543:43	2543:43	6	*
NAME	2543:45	2543:45	4	ndir
LEAF_NODE	2543:45	2543:45	5	ndir
LEAF_NODE	2543:49	2543:49	3	,
PARAMETER_DECL	2543:51	2543:65	3	TIFFDirEntry * dir
TYPE	2543:51	2543:63	4	TIFFDirEntry *
TYPE_NAME	2543:51	2543:51	5	TIFFDirEntry
LEAF_NODE	2543:51	2543:51	6	TIFFDirEntry
POINTER	2543:63	2543:63	5	*
LEAF_NODE	2543:63	2543:63	6	*
NAME	2543:65	2543:65	4	dir
LEAF_NODE	2543:65	2543:65	5	dir
LEAF_NODE	2543:68	2543:68	3	,
PARAMETER_DECL	2543:70	2543:77	3	uint16 tag
TYPE	2543:70	2543:70	4	uint16
TYPE_NAME	2543:70	2543:70	5	uint16
LEAF_NODE	2543:70	2543:70	6	uint16
NAME	2543:77	2543:77	4	tag
LEAF_NODE	2543:77	2543:77	5	tag
LEAF_NODE	2543:80	2543:80	3	,
PARAMETER_DECL	2543:82	2543:89	3	uint16 datatype
TYPE	2543:82	2543:82	4	uint16
TYPE_NAME	2543:82	2543:82	5	uint16
LEAF_NODE	2543:82	2543:82	6	uint16
NAME	2543:89	2543:89	4	datatype
LEAF_NODE	2543:89	2543:89	5	datatype
LEAF_NODE	2543:97	2543:97	3	,
PARAMETER_DECL	2543:99	2543:106	3	uint32 count
TYPE	2543:99	2543:99	4	uint32
TYPE_NAME	2543:99	2543:99	5	uint32
LEAF_NODE	2543:99	2543:99	6	uint32
NAME	2543:106	2543:106	4	count
LEAF_NODE	2543:106	2543:106	5	count
LEAF_NODE	2543:111	2543:111	3	,
PARAMETER_DECL	2543:113	2543:120	3	uint32 datalength
TYPE	2543:113	2543:113	4	uint32
TYPE_NAME	2543:113	2543:113	5	uint32
LEAF_NODE	2543:113	2543:113	6	uint32
NAME	2543:120	2543:120	4	datalength
LEAF_NODE	2543:120	2543:120	5	datalength
LEAF_NODE	2543:130	2543:130	3	,
PARAMETER_DECL	2543:132	2543:138	3	void * data
TYPE	2543:132	2543:136	4	void *
TYPE_NAME	2543:132	2543:132	5	void
LEAF_NODE	2543:132	2543:132	6	void
POINTER	2543:136	2543:136	5	*
LEAF_NODE	2543:136	2543:136	6	*
NAME	2543:138	2543:138	4	data
LEAF_NODE	2543:138	2543:138	5	data
LEAF_NODE	2543:142	2543:142	3	)
LEAF_NODE	2544:0	2544:0	2	{
STATEMENTS	2545:1	2614:1	2	
LEAF_NODE	2545:1	2545:1	3	static
SIMPLE_DECL	2545:8	2545:57	3	const char [ ] module ; module = "TIFFWriteDirectoryTagData" ;
VAR_DECL	2545:8	2545:19	4	const char [ ] module ; module = "TIFFWriteDirectoryTagData"
TYPE	2545:8	2545:25	5	const char [ ]
TYPE_NAME	2545:8	2545:14	6	const char
LEAF_NODE	2545:8	2545:8	7	const
LEAF_NODE	2545:14	2545:14	7	char
TYPE_SUFFIX	2545:25	2545:26	6	[ ]
LEAF_NODE	2545:25	2545:25	7	[
LEAF_NODE	2545:26	2545:26	7	]
NAME	2545:19	2545:19	5	module
LEAF_NODE	2545:19	2545:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2545:19	2545:19	5	module = "TIFFWriteDirectoryTagData"
ASSIGN	2545:19	2545:30	6	module = "TIFFWriteDirectoryTagData"
LVAL	2545:19	2545:19	7	module
NAME	2545:19	2545:19	8	module
LEAF_NODE	2545:19	2545:19	9	module
ASSIGN_OP	2545:28	2545:28	7	=
LEAF_NODE	2545:28	2545:28	8	=
RVAL	2545:30	2545:30	7	"TIFFWriteDirectoryTagData"
FIELD	2545:30	2545:30	8	"TIFFWriteDirectoryTagData"
LEAF_NODE	2545:30	2545:30	9	"TIFFWriteDirectoryTagData"
LEAF_NODE	2545:57	2545:57	4	;
SIMPLE_DECL	2546:1	2546:9	3	uint32 m ;
VAR_DECL	2546:1	2546:8	4	uint32 m
TYPE	2546:1	2546:1	5	uint32
TYPE_NAME	2546:1	2546:1	6	uint32
LEAF_NODE	2546:1	2546:1	7	uint32
NAME	2546:8	2546:8	5	m
LEAF_NODE	2546:8	2546:8	6	m
LEAF_NODE	2546:9	2546:9	4	;
EXPR_STATEMENT	2547:1	2547:4	3	m = 0 ;
EXPR	2547:1	2547:1	4	m = 0
ASSIGN	2547:1	2547:3	5	m = 0
LVAL	2547:1	2547:1	6	m
FIELD	2547:1	2547:1	7	m
LEAF_NODE	2547:1	2547:1	8	m
ASSIGN_OP	2547:2	2547:2	6	=
LEAF_NODE	2547:2	2547:2	7	=
RVAL	2547:3	2547:3	6	0
FIELD	2547:3	2547:3	7	0
LEAF_NODE	2547:3	2547:3	8	0
LEAF_NODE	2547:4	2547:4	4	;
ITERATION	2548:1	2549:1	3	
KEYWORD	2548:1	2548:1	4	while
LEAF_NODE	2548:1	2548:1	5	while
LEAF_NODE	2548:7	2548:7	4	(
CONDITION	2548:8	2548:8	4	m < ( * ndir )
EXPR	2548:8	2548:16	5	m < ( * ndir )
FIELD	2548:8	2548:8	6	m
LEAF_NODE	2548:8	2548:8	7	m
REL_OPERATOR	2548:9	2548:9	6	<
LEAF_NODE	2548:9	2548:9	7	<
LEAF_NODE	2548:10	2548:10	6	(
UNARY_EXPR	2548:11	2548:12	6	* ndir
UNARY_OPERATOR	2548:11	2548:11	7	*
LEAF_NODE	2548:11	2548:11	8	*
FIELD	2548:12	2548:12	7	ndir
LEAF_NODE	2548:12	2548:12	8	ndir
LEAF_NODE	2548:16	2548:16	6	)
LEAF_NODE	2548:17	2548:17	4	)
STATEMENTS	2549:1	2554:1	4	
LEAF_NODE	2549:1	2549:1	5	{
STATEMENTS	2550:2	2553:2	5	
EXPR_STATEMENT	2550:2	2550:30	6	assert ( dir [ m ] . tdir_tag != tag ) ;
EXPR	2550:2	2550:2	7	assert ( dir [ m ] . tdir_tag != tag )
FUNCTION_CALL	2550:2	2550:29	8	assert ( dir [ m ] . tdir_tag != tag )
CALLEE	2550:2	2550:2	9	assert
LEAF_NODE	2550:2	2550:2	10	assert
LEAF_NODE	2550:8	2550:8	9	(
ARGUMENT	2550:9	2550:26	9	dir [ m ] . tdir_tag != tag
FIELD	2550:9	2550:16	10	dir [ m ] . tdir_tag
LEAF_NODE	2550:9	2550:9	11	dir
LEAF_NODE	2550:12	2550:12	11	[
EXPR	2550:13	2550:13	11	m
FIELD	2550:13	2550:13	12	m
LEAF_NODE	2550:13	2550:13	13	m
LEAF_NODE	2550:14	2550:14	11	]
LEAF_NODE	2550:15	2550:15	11	.
LEAF_NODE	2550:16	2550:16	11	tdir_tag
EQ_OPERATOR	2550:24	2550:24	10	!=
LEAF_NODE	2550:24	2550:24	11	!=
FIELD	2550:26	2550:26	10	tag
LEAF_NODE	2550:26	2550:26	11	tag
LEAF_NODE	2550:29	2550:29	9	)
LEAF_NODE	2550:30	2550:30	7	;
SELECTION	2551:2	2552:3	6	
KEYWORD	2551:2	2551:2	7	if
LEAF_NODE	2551:2	2551:2	8	if
LEAF_NODE	2551:5	2551:5	7	(
CONDITION	2551:6	2551:6	7	dir [ m ] . tdir_tag > tag
EXPR	2551:6	2551:22	8	dir [ m ] . tdir_tag > tag
FIELD	2551:6	2551:13	9	dir [ m ] . tdir_tag
LEAF_NODE	2551:6	2551:6	10	dir
LEAF_NODE	2551:9	2551:9	10	[
EXPR	2551:10	2551:10	10	m
FIELD	2551:10	2551:10	11	m
LEAF_NODE	2551:10	2551:10	12	m
LEAF_NODE	2551:11	2551:11	10	]
LEAF_NODE	2551:12	2551:12	10	.
LEAF_NODE	2551:13	2551:13	10	tdir_tag
REL_OPERATOR	2551:21	2551:21	9	>
LEAF_NODE	2551:21	2551:21	10	>
FIELD	2551:22	2551:22	9	tag
LEAF_NODE	2551:22	2551:22	10	tag
LEAF_NODE	2551:25	2551:25	7	)
STATEMENTS	2552:3	2552:3	7	
JUMP_STATEMENT	2552:3	2552:8	8	break DESTINATION ;
KEYWORD	2552:3	2552:3	9	break
LEAF_NODE	2552:3	2552:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	2552:8	2552:8	9	;
EXPR_STATEMENT	2553:2	2553:5	6	m ++ ;
EXPR	2553:2	2553:2	7	m ++
FIELD	2553:2	2553:3	8	m ++
LEAF_NODE	2553:2	2553:2	9	m
LEAF_NODE	2553:3	2553:3	9	++
LEAF_NODE	2553:5	2553:5	7	;
LEAF_NODE	2554:1	2554:1	5	}
SELECTION	2555:1	2556:1	3	
KEYWORD	2555:1	2555:1	4	if
LEAF_NODE	2555:1	2555:1	5	if
LEAF_NODE	2555:4	2555:4	4	(
CONDITION	2555:5	2555:5	4	m < ( * ndir )
EXPR	2555:5	2555:13	5	m < ( * ndir )
FIELD	2555:5	2555:5	6	m
LEAF_NODE	2555:5	2555:5	7	m
REL_OPERATOR	2555:6	2555:6	6	<
LEAF_NODE	2555:6	2555:6	7	<
LEAF_NODE	2555:7	2555:7	6	(
UNARY_EXPR	2555:8	2555:9	6	* ndir
UNARY_OPERATOR	2555:8	2555:8	7	*
LEAF_NODE	2555:8	2555:8	8	*
FIELD	2555:9	2555:9	7	ndir
LEAF_NODE	2555:9	2555:9	8	ndir
LEAF_NODE	2555:13	2555:13	6	)
LEAF_NODE	2555:14	2555:14	4	)
STATEMENTS	2556:1	2560:1	4	
LEAF_NODE	2556:1	2556:1	5	{
STATEMENTS	2557:2	2558:2	5	
SIMPLE_DECL	2557:2	2557:10	6	uint32 n ;
VAR_DECL	2557:2	2557:9	7	uint32 n
TYPE	2557:2	2557:2	8	uint32
TYPE_NAME	2557:2	2557:2	9	uint32
LEAF_NODE	2557:2	2557:2	10	uint32
NAME	2557:9	2557:9	8	n
LEAF_NODE	2557:9	2557:9	9	n
LEAF_NODE	2557:10	2557:10	7	;
ITERATION	2558:2	2559:3	6	
KEYWORD	2558:2	2558:2	7	for
LEAF_NODE	2558:2	2558:2	8	for
LEAF_NODE	2558:6	2558:6	7	(
FOR_INIT	2558:7	2558:14	7	n = * ndir ;
EXPR	2558:7	2558:7	8	n = * ndir
ASSIGN	2558:7	2558:9	9	n = * ndir
LVAL	2558:7	2558:7	10	n
FIELD	2558:7	2558:7	11	n
LEAF_NODE	2558:7	2558:7	12	n
ASSIGN_OP	2558:8	2558:8	10	=
LEAF_NODE	2558:8	2558:8	11	=
RVAL	2558:9	2558:9	10	* ndir
UNARY_EXPR	2558:9	2558:10	11	* ndir
UNARY_OPERATOR	2558:9	2558:9	12	*
LEAF_NODE	2558:9	2558:9	13	*
FIELD	2558:10	2558:10	12	ndir
LEAF_NODE	2558:10	2558:10	13	ndir
LEAF_NODE	2558:14	2558:14	8	;
CONDITION	2558:16	2558:16	7	n > m
EXPR	2558:16	2558:18	8	n > m
FIELD	2558:16	2558:16	9	n
LEAF_NODE	2558:16	2558:16	10	n
REL_OPERATOR	2558:17	2558:17	9	>
LEAF_NODE	2558:17	2558:17	10	>
FIELD	2558:18	2558:18	9	m
LEAF_NODE	2558:18	2558:18	10	m
LEAF_NODE	2558:19	2558:19	7	;
FOR_EXPR	2558:21	2558:21	7	n --
EXPR	2558:21	2558:21	8	n --
FIELD	2558:21	2558:22	9	n --
LEAF_NODE	2558:21	2558:21	10	n
LEAF_NODE	2558:22	2558:22	10	--
LEAF_NODE	2558:24	2558:24	7	)
STATEMENTS	2559:3	2559:3	7	
EXPR_STATEMENT	2559:3	2559:18	8	dir [ n ] = dir [ n - 1 ] ;
EXPR	2559:3	2559:3	9	dir [ n ] = dir [ n - 1 ]
ASSIGN	2559:3	2559:10	10	dir [ n ] = dir [ n - 1 ]
LVAL	2559:3	2559:3	11	dir [ n ]
FIELD	2559:3	2559:8	12	dir [ n ]
LEAF_NODE	2559:3	2559:3	13	dir
LEAF_NODE	2559:6	2559:6	13	[
EXPR	2559:7	2559:7	13	n
FIELD	2559:7	2559:7	14	n
LEAF_NODE	2559:7	2559:7	15	n
LEAF_NODE	2559:8	2559:8	13	]
ASSIGN_OP	2559:9	2559:9	11	=
LEAF_NODE	2559:9	2559:9	12	=
RVAL	2559:10	2559:10	11	dir [ n - 1 ]
FIELD	2559:10	2559:17	12	dir [ n - 1 ]
LEAF_NODE	2559:10	2559:10	13	dir
LEAF_NODE	2559:13	2559:13	13	[
EXPR	2559:14	2559:16	13	n - 1
FIELD	2559:14	2559:14	14	n
LEAF_NODE	2559:14	2559:14	15	n
LEAF_NODE	2559:15	2559:15	14	-
FIELD	2559:16	2559:16	14	1
LEAF_NODE	2559:16	2559:16	15	1
LEAF_NODE	2559:17	2559:17	13	]
LEAF_NODE	2559:18	2559:18	9	;
LEAF_NODE	2560:1	2560:1	5	}
EXPR_STATEMENT	2561:1	2561:20	3	dir [ m ] . tdir_tag = tag ;
EXPR	2561:1	2561:1	4	dir [ m ] . tdir_tag = tag
ASSIGN	2561:1	2561:17	5	dir [ m ] . tdir_tag = tag
LVAL	2561:1	2561:1	6	dir [ m ] . tdir_tag
FIELD	2561:1	2561:8	7	dir [ m ] . tdir_tag
LEAF_NODE	2561:1	2561:1	8	dir
LEAF_NODE	2561:4	2561:4	8	[
EXPR	2561:5	2561:5	8	m
FIELD	2561:5	2561:5	9	m
LEAF_NODE	2561:5	2561:5	10	m
LEAF_NODE	2561:6	2561:6	8	]
LEAF_NODE	2561:7	2561:7	8	.
LEAF_NODE	2561:8	2561:8	8	tdir_tag
ASSIGN_OP	2561:16	2561:16	6	=
LEAF_NODE	2561:16	2561:16	7	=
RVAL	2561:17	2561:17	6	tag
FIELD	2561:17	2561:17	7	tag
LEAF_NODE	2561:17	2561:17	8	tag
LEAF_NODE	2561:20	2561:20	4	;
EXPR_STATEMENT	2562:1	2562:26	3	dir [ m ] . tdir_type = datatype ;
EXPR	2562:1	2562:1	4	dir [ m ] . tdir_type = datatype
ASSIGN	2562:1	2562:18	5	dir [ m ] . tdir_type = datatype
LVAL	2562:1	2562:1	6	dir [ m ] . tdir_type
FIELD	2562:1	2562:8	7	dir [ m ] . tdir_type
LEAF_NODE	2562:1	2562:1	8	dir
LEAF_NODE	2562:4	2562:4	8	[
EXPR	2562:5	2562:5	8	m
FIELD	2562:5	2562:5	9	m
LEAF_NODE	2562:5	2562:5	10	m
LEAF_NODE	2562:6	2562:6	8	]
LEAF_NODE	2562:7	2562:7	8	.
LEAF_NODE	2562:8	2562:8	8	tdir_type
ASSIGN_OP	2562:17	2562:17	6	=
LEAF_NODE	2562:17	2562:17	7	=
RVAL	2562:18	2562:18	6	datatype
FIELD	2562:18	2562:18	7	datatype
LEAF_NODE	2562:18	2562:18	8	datatype
LEAF_NODE	2562:26	2562:26	4	;
EXPR_STATEMENT	2563:1	2563:24	3	dir [ m ] . tdir_count = count ;
EXPR	2563:1	2563:1	4	dir [ m ] . tdir_count = count
ASSIGN	2563:1	2563:19	5	dir [ m ] . tdir_count = count
LVAL	2563:1	2563:1	6	dir [ m ] . tdir_count
FIELD	2563:1	2563:8	7	dir [ m ] . tdir_count
LEAF_NODE	2563:1	2563:1	8	dir
LEAF_NODE	2563:4	2563:4	8	[
EXPR	2563:5	2563:5	8	m
FIELD	2563:5	2563:5	9	m
LEAF_NODE	2563:5	2563:5	10	m
LEAF_NODE	2563:6	2563:6	8	]
LEAF_NODE	2563:7	2563:7	8	.
LEAF_NODE	2563:8	2563:8	8	tdir_count
ASSIGN_OP	2563:18	2563:18	6	=
LEAF_NODE	2563:18	2563:18	7	=
RVAL	2563:19	2563:19	6	count
FIELD	2563:19	2563:19	7	count
LEAF_NODE	2563:19	2563:19	8	count
LEAF_NODE	2563:24	2563:24	4	;
EXPR_STATEMENT	2564:1	2564:34	3	dir [ m ] . tdir_offset . toff_long8 = 0 ;
EXPR	2564:1	2564:1	4	dir [ m ] . tdir_offset . toff_long8 = 0
ASSIGN	2564:1	2564:33	5	dir [ m ] . tdir_offset . toff_long8 = 0
LVAL	2564:1	2564:1	6	dir [ m ] . tdir_offset . toff_long8
FIELD	2564:1	2564:20	7	dir [ m ] . tdir_offset . toff_long8
LEAF_NODE	2564:1	2564:1	8	dir
LEAF_NODE	2564:4	2564:4	8	[
EXPR	2564:5	2564:5	8	m
FIELD	2564:5	2564:5	9	m
LEAF_NODE	2564:5	2564:5	10	m
LEAF_NODE	2564:6	2564:6	8	]
LEAF_NODE	2564:7	2564:7	8	.
LEAF_NODE	2564:8	2564:8	8	tdir_offset
LEAF_NODE	2564:19	2564:19	8	.
LEAF_NODE	2564:20	2564:20	8	toff_long8
ASSIGN_OP	2564:31	2564:31	6	=
LEAF_NODE	2564:31	2564:31	7	=
RVAL	2564:33	2564:33	6	0
FIELD	2564:33	2564:33	7	0
LEAF_NODE	2564:33	2564:33	8	0
LEAF_NODE	2564:34	2564:34	4	;
SELECTION	2565:1	2566:8	3	
KEYWORD	2565:1	2565:1	4	if
LEAF_NODE	2565:1	2565:1	5	if
LEAF_NODE	2565:4	2565:4	4	(
CONDITION	2565:5	2565:5	4	datalength <= ( ( tif -> tif_flags & TIFF_BIGTIFF ) ? 0x8U : 0x4U )
EXPR	2565:5	2565:57	5	datalength <= ( ( tif -> tif_flags & TIFF_BIGTIFF ) ? 0x8U : 0x4U )
FIELD	2565:5	2565:5	6	datalength
LEAF_NODE	2565:5	2565:5	7	datalength
REL_OPERATOR	2565:15	2565:15	6	<=
LEAF_NODE	2565:15	2565:15	7	<=
LEAF_NODE	2565:17	2565:17	6	(
COND_EXPR	2565:18	2565:53	6	( tif -> tif_flags & TIFF_BIGTIFF ) ? 0x8U : 0x4U
CONDITION	2565:18	2565:46	7	( tif -> tif_flags & TIFF_BIGTIFF )
LEAF_NODE	2565:18	2565:18	8	(
FIELD	2565:19	2565:24	8	tif -> tif_flags
LEAF_NODE	2565:19	2565:19	9	tif
LEAF_NODE	2565:22	2565:22	9	->
LEAF_NODE	2565:24	2565:24	9	tif_flags
LEAF_NODE	2565:33	2565:33	8	&
FIELD	2565:34	2565:34	8	TIFF_BIGTIFF
LEAF_NODE	2565:34	2565:34	9	TIFF_BIGTIFF
LEAF_NODE	2565:46	2565:46	8	)
LEAF_NODE	2565:47	2565:47	7	?
EXPR	2565:48	2565:48	7	0x8U
FIELD	2565:48	2565:48	8	0x8U
LEAF_NODE	2565:48	2565:48	9	0x8U
LEAF_NODE	2565:52	2565:52	7	:
FIELD	2565:53	2565:53	7	0x4U
LEAF_NODE	2565:53	2565:53	8	0x4U
LEAF_NODE	2565:57	2565:57	6	)
LEAF_NODE	2565:58	2565:58	4	)
STATEMENTS	2566:8	2571:8	4	
LEAF_NODE	2566:8	2566:8	5	{
STATEMENTS	2567:12	2567:12	5	
SELECTION	2567:12	2568:12	6	
KEYWORD	2567:12	2567:12	7	if
LEAF_NODE	2567:12	2567:12	8	if
LEAF_NODE	2567:14	2567:14	7	(
CONDITION	2567:16	2567:16	7	data && datalength
EXPR	2567:16	2567:16	8	data && datalength
AND	2567:16	2567:24	9	data && datalength
EXPR	2567:16	2567:16	10	data
FIELD	2567:16	2567:16	11	data
LEAF_NODE	2567:16	2567:16	12	data
LEAF_NODE	2567:21	2567:21	10	&&
EXPR	2567:24	2567:24	10	datalength
FIELD	2567:24	2567:24	11	datalength
LEAF_NODE	2567:24	2567:24	12	datalength
LEAF_NODE	2567:35	2567:35	7	)
STATEMENTS	2568:12	2570:12	7	
LEAF_NODE	2568:12	2568:12	8	{
STATEMENTS	2569:16	2569:16	8	
EXPR_STATEMENT	2569:16	2569:64	9	_TIFFmemcpy ( & dir [ m ] . tdir_offset , data , datalength ) ;
EXPR	2569:16	2569:16	10	_TIFFmemcpy ( & dir [ m ] . tdir_offset , data , datalength )
FUNCTION_CALL	2569:16	2569:63	11	_TIFFmemcpy ( & dir [ m ] . tdir_offset , data , datalength )
CALLEE	2569:16	2569:16	12	_TIFFmemcpy
LEAF_NODE	2569:16	2569:16	13	_TIFFmemcpy
LEAF_NODE	2569:27	2569:27	12	(
ARGUMENT	2569:28	2569:28	12	& dir [ m ] . tdir_offset
UNARY_EXPR	2569:28	2569:29	13	& dir [ m ] . tdir_offset
UNARY_OPERATOR	2569:28	2569:28	14	&
LEAF_NODE	2569:28	2569:28	15	&
FIELD	2569:29	2569:36	14	dir [ m ] . tdir_offset
LEAF_NODE	2569:29	2569:29	15	dir
LEAF_NODE	2569:32	2569:32	15	[
EXPR	2569:33	2569:33	15	m
FIELD	2569:33	2569:33	16	m
LEAF_NODE	2569:33	2569:33	17	m
LEAF_NODE	2569:34	2569:34	15	]
LEAF_NODE	2569:35	2569:35	15	.
LEAF_NODE	2569:36	2569:36	15	tdir_offset
LEAF_NODE	2569:47	2569:47	12	,
ARGUMENT	2569:48	2569:48	12	data
FIELD	2569:48	2569:48	13	data
LEAF_NODE	2569:48	2569:48	14	data
LEAF_NODE	2569:52	2569:52	12	,
ARGUMENT	2569:53	2569:53	12	datalength
FIELD	2569:53	2569:53	13	datalength
LEAF_NODE	2569:53	2569:53	14	datalength
LEAF_NODE	2569:63	2569:63	12	)
LEAF_NODE	2569:64	2569:64	10	;
LEAF_NODE	2570:12	2570:12	8	}
LEAF_NODE	2571:8	2571:8	5	}
SELECTION	2572:1	2573:1	3	
KEYWORD	2572:1	2572:1	4	else
LEAF_NODE	2572:1	2572:1	5	else
STATEMENTS	2573:1	2612:1	4	
LEAF_NODE	2573:1	2573:1	5	{
STATEMENTS	2574:2	2606:2	5	
SIMPLE_DECL	2574:2	2574:14	6	uint64 na , uint64 nb ;
INIT_DECL_LIST	2574:2	2574:2	7	uint64 na , uint64 nb
VAR_DECL	2574:2	2574:9	8	uint64 na
TYPE	2574:2	2574:2	9	uint64
TYPE_NAME	2574:2	2574:2	10	uint64
LEAF_NODE	2574:2	2574:2	11	uint64
NAME	2574:9	2574:9	9	na
LEAF_NODE	2574:9	2574:9	10	na
LEAF_NODE	2574:11	2574:11	8	,
VAR_DECL	2574:2	2574:12	8	uint64 nb
TYPE	2574:2	2574:2	9	uint64
TYPE_NAME	2574:2	2574:2	10	uint64
LEAF_NODE	2574:2	2574:2	11	uint64
NAME	2574:12	2574:12	9	nb
LEAF_NODE	2574:12	2574:12	10	nb
LEAF_NODE	2574:14	2574:14	7	;
EXPR_STATEMENT	2575:2	2575:21	6	na = tif -> tif_dataoff ;
EXPR	2575:2	2575:2	7	na = tif -> tif_dataoff
ASSIGN	2575:2	2575:5	8	na = tif -> tif_dataoff
LVAL	2575:2	2575:2	9	na
FIELD	2575:2	2575:2	10	na
LEAF_NODE	2575:2	2575:2	11	na
ASSIGN_OP	2575:4	2575:4	9	=
LEAF_NODE	2575:4	2575:4	10	=
RVAL	2575:5	2575:5	9	tif -> tif_dataoff
FIELD	2575:5	2575:10	10	tif -> tif_dataoff
LEAF_NODE	2575:5	2575:5	11	tif
LEAF_NODE	2575:8	2575:8	11	->
LEAF_NODE	2575:10	2575:10	11	tif_dataoff
LEAF_NODE	2575:21	2575:21	7	;
EXPR_STATEMENT	2576:2	2576:18	6	nb = na + datalength ;
EXPR	2576:2	2576:2	7	nb = na + datalength
ASSIGN	2576:2	2576:5	8	nb = na + datalength
LVAL	2576:2	2576:2	9	nb
FIELD	2576:2	2576:2	10	nb
LEAF_NODE	2576:2	2576:2	11	nb
ASSIGN_OP	2576:4	2576:4	9	=
LEAF_NODE	2576:4	2576:4	10	=
RVAL	2576:5	2576:8	9	na + datalength
FIELD	2576:5	2576:5	10	na
LEAF_NODE	2576:5	2576:5	11	na
LEAF_NODE	2576:7	2576:7	10	+
FIELD	2576:8	2576:8	10	datalength
LEAF_NODE	2576:8	2576:8	11	datalength
LEAF_NODE	2576:18	2576:18	7	;
SELECTION	2577:2	2578:3	6	
KEYWORD	2577:2	2577:2	7	if
LEAF_NODE	2577:2	2577:2	8	if
LEAF_NODE	2577:5	2577:5	7	(
CONDITION	2577:6	2577:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2577:6	2577:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2577:6	2577:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2577:6	2577:6	10	!
LEAF_NODE	2577:6	2577:6	11	!
LEAF_NODE	2577:7	2577:7	10	(
FIELD	2577:8	2577:13	10	tif -> tif_flags
LEAF_NODE	2577:8	2577:8	11	tif
LEAF_NODE	2577:11	2577:11	11	->
LEAF_NODE	2577:13	2577:13	11	tif_flags
LEAF_NODE	2577:22	2577:22	10	&
FIELD	2577:23	2577:23	10	TIFF_BIGTIFF
LEAF_NODE	2577:23	2577:23	11	TIFF_BIGTIFF
LEAF_NODE	2577:35	2577:35	10	)
LEAF_NODE	2577:36	2577:36	7	)
STATEMENTS	2578:3	2578:3	7	
EXPR_STATEMENT	2578:3	2578:16	8	nb = ( uint32 ) nb ;
EXPR	2578:3	2578:3	9	nb = ( uint32 ) nb
ASSIGN	2578:3	2578:6	10	nb = ( uint32 ) nb
LVAL	2578:3	2578:3	11	nb
FIELD	2578:3	2578:3	12	nb
LEAF_NODE	2578:3	2578:3	13	nb
ASSIGN_OP	2578:5	2578:5	11	=
LEAF_NODE	2578:5	2578:5	12	=
RVAL	2578:6	2578:14	11	( uint32 ) nb
LEAF_NODE	2578:6	2578:6	12	(
TYPE_NAME	2578:7	2578:7	12	uint32
LEAF_NODE	2578:7	2578:7	13	uint32
LEAF_NODE	2578:13	2578:13	12	)
FIELD	2578:14	2578:14	12	nb
LEAF_NODE	2578:14	2578:14	13	nb
LEAF_NODE	2578:16	2578:16	9	;
SELECTION	2579:2	2580:2	6	
KEYWORD	2579:2	2579:2	7	if
LEAF_NODE	2579:2	2579:2	8	if
LEAF_NODE	2579:5	2579:5	7	(
CONDITION	2579:6	2579:6	7	( nb < na ) || ( nb < datalength )
EXPR	2579:6	2579:6	8	( nb < na ) || ( nb < datalength )
OR	2579:6	2579:15	9	( nb < na ) || ( nb < datalength )
EXPR	2579:6	2579:12	10	( nb < na )
LEAF_NODE	2579:6	2579:6	11	(
FIELD	2579:7	2579:7	11	nb
LEAF_NODE	2579:7	2579:7	12	nb
REL_OPERATOR	2579:9	2579:9	11	<
LEAF_NODE	2579:9	2579:9	12	<
FIELD	2579:10	2579:10	11	na
LEAF_NODE	2579:10	2579:10	12	na
LEAF_NODE	2579:12	2579:12	11	)
LEAF_NODE	2579:13	2579:13	10	||
EXPR	2579:15	2579:29	10	( nb < datalength )
LEAF_NODE	2579:15	2579:15	11	(
FIELD	2579:16	2579:16	11	nb
LEAF_NODE	2579:16	2579:16	12	nb
REL_OPERATOR	2579:18	2579:18	11	<
LEAF_NODE	2579:18	2579:18	12	<
FIELD	2579:19	2579:19	11	datalength
LEAF_NODE	2579:19	2579:19	12	datalength
LEAF_NODE	2579:29	2579:29	11	)
LEAF_NODE	2579:30	2579:30	7	)
STATEMENTS	2580:2	2583:2	7	
LEAF_NODE	2580:2	2580:2	8	{
STATEMENTS	2581:3	2582:3	8	
EXPR_STATEMENT	2581:3	2581:77	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Maximum TIFF file size exceeded" ) ;
EXPR	2581:3	2581:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Maximum TIFF file size exceeded" )
FUNCTION_CALL	2581:3	2581:76	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Maximum TIFF file size exceeded" )
CALLEE	2581:3	2581:3	12	TIFFErrorExt
LEAF_NODE	2581:3	2581:3	13	TIFFErrorExt
LEAF_NODE	2581:15	2581:15	12	(
ARGUMENT	2581:16	2581:16	12	tif -> tif_clientdata
FIELD	2581:16	2581:21	13	tif -> tif_clientdata
LEAF_NODE	2581:16	2581:16	14	tif
LEAF_NODE	2581:19	2581:19	14	->
LEAF_NODE	2581:21	2581:21	14	tif_clientdata
LEAF_NODE	2581:35	2581:35	12	,
ARGUMENT	2581:36	2581:36	12	module
FIELD	2581:36	2581:36	13	module
LEAF_NODE	2581:36	2581:36	14	module
LEAF_NODE	2581:42	2581:42	12	,
ARGUMENT	2581:43	2581:43	12	"Maximum TIFF file size exceeded"
FIELD	2581:43	2581:43	13	"Maximum TIFF file size exceeded"
LEAF_NODE	2581:43	2581:43	14	"Maximum TIFF file size exceeded"
LEAF_NODE	2581:76	2581:76	12	)
LEAF_NODE	2581:77	2581:77	10	;
JUMP_STATEMENT	2582:3	2582:12	9	return ( 0 ) ;
KEYWORD	2582:3	2582:3	10	return
LEAF_NODE	2582:3	2582:3	11	return
DESTINATION	2582:9	2582:9	10	( 0 )
EXPR	2582:9	2582:11	11	( 0 )
LEAF_NODE	2582:9	2582:9	12	(
FIELD	2582:10	2582:10	12	0
LEAF_NODE	2582:10	2582:10	13	0
LEAF_NODE	2582:11	2582:11	12	)
LEAF_NODE	2582:12	2582:12	10	;
LEAF_NODE	2583:2	2583:2	8	}
SELECTION	2584:2	2585:2	6	
KEYWORD	2584:2	2584:2	7	if
LEAF_NODE	2584:2	2584:2	8	if
LEAF_NODE	2584:5	2584:5	7	(
CONDITION	2584:6	2584:6	7	! SeekOK ( tif , na )
EXPR	2584:6	2584:6	8	! SeekOK ( tif , na )
UNARY_EXPR	2584:6	2584:7	9	! SeekOK ( tif , na )
UNARY_OPERATOR	2584:6	2584:6	10	!
LEAF_NODE	2584:6	2584:6	11	!
FUNCTION_CALL	2584:7	2584:20	10	SeekOK ( tif , na )
CALLEE	2584:7	2584:7	11	SeekOK
LEAF_NODE	2584:7	2584:7	12	SeekOK
LEAF_NODE	2584:13	2584:13	11	(
ARGUMENT	2584:14	2584:14	11	tif
FIELD	2584:14	2584:14	12	tif
LEAF_NODE	2584:14	2584:14	13	tif
LEAF_NODE	2584:17	2584:17	11	,
ARGUMENT	2584:18	2584:18	11	na
FIELD	2584:18	2584:18	12	na
LEAF_NODE	2584:18	2584:18	13	na
LEAF_NODE	2584:20	2584:20	11	)
LEAF_NODE	2584:21	2584:21	7	)
STATEMENTS	2585:2	2588:2	7	
LEAF_NODE	2585:2	2585:2	8	{
STATEMENTS	2586:3	2587:3	8	
EXPR_STATEMENT	2586:3	2586:71	9	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing tag data" ) ;
EXPR	2586:3	2586:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing tag data" )
FUNCTION_CALL	2586:3	2586:70	11	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing tag data" )
CALLEE	2586:3	2586:3	12	TIFFErrorExt
LEAF_NODE	2586:3	2586:3	13	TIFFErrorExt
LEAF_NODE	2586:15	2586:15	12	(
ARGUMENT	2586:16	2586:16	12	tif -> tif_clientdata
FIELD	2586:16	2586:21	13	tif -> tif_clientdata
LEAF_NODE	2586:16	2586:16	14	tif
LEAF_NODE	2586:19	2586:19	14	->
LEAF_NODE	2586:21	2586:21	14	tif_clientdata
LEAF_NODE	2586:35	2586:35	12	,
ARGUMENT	2586:36	2586:36	12	module
FIELD	2586:36	2586:36	13	module
LEAF_NODE	2586:36	2586:36	14	module
LEAF_NODE	2586:42	2586:42	12	,
ARGUMENT	2586:43	2586:43	12	"IO error writing tag data"
FIELD	2586:43	2586:43	13	"IO error writing tag data"
LEAF_NODE	2586:43	2586:43	14	"IO error writing tag data"
LEAF_NODE	2586:70	2586:70	12	)
LEAF_NODE	2586:71	2586:71	10	;
JUMP_STATEMENT	2587:3	2587:12	9	return ( 0 ) ;
KEYWORD	2587:3	2587:3	10	return
LEAF_NODE	2587:3	2587:3	11	return
DESTINATION	2587:9	2587:9	10	( 0 )
EXPR	2587:9	2587:11	11	( 0 )
LEAF_NODE	2587:9	2587:9	12	(
FIELD	2587:10	2587:10	12	0
LEAF_NODE	2587:10	2587:10	13	0
LEAF_NODE	2587:11	2587:11	12	)
LEAF_NODE	2587:12	2587:12	10	;
LEAF_NODE	2588:2	2588:2	8	}
EXPR_STATEMENT	2589:2	2589:33	6	assert ( datalength < 0x80000000UL ) ;
EXPR	2589:2	2589:2	7	assert ( datalength < 0x80000000UL )
FUNCTION_CALL	2589:2	2589:32	8	assert ( datalength < 0x80000000UL )
CALLEE	2589:2	2589:2	9	assert
LEAF_NODE	2589:2	2589:2	10	assert
LEAF_NODE	2589:8	2589:8	9	(
ARGUMENT	2589:9	2589:20	9	datalength < 0x80000000UL
FIELD	2589:9	2589:9	10	datalength
LEAF_NODE	2589:9	2589:9	11	datalength
REL_OPERATOR	2589:19	2589:19	10	<
LEAF_NODE	2589:19	2589:19	11	<
FIELD	2589:20	2589:20	10	0x80000000UL
LEAF_NODE	2589:20	2589:20	11	0x80000000UL
LEAF_NODE	2589:32	2589:32	9	)
LEAF_NODE	2589:33	2589:33	7	;
SELECTION	2590:2	2591:2	6	
KEYWORD	2590:2	2590:2	7	if
LEAF_NODE	2590:2	2590:2	8	if
LEAF_NODE	2590:5	2590:5	7	(
CONDITION	2590:6	2590:6	7	! WriteOK ( tif , data , ( tmsize_t ) datalength )
EXPR	2590:6	2590:6	8	! WriteOK ( tif , data , ( tmsize_t ) datalength )
UNARY_EXPR	2590:6	2590:7	9	! WriteOK ( tif , data , ( tmsize_t ) datalength )
UNARY_OPERATOR	2590:6	2590:6	10	!
LEAF_NODE	2590:6	2590:6	11	!
FUNCTION_CALL	2590:7	2590:44	10	WriteOK ( tif , data , ( tmsize_t ) datalength )
CALLEE	2590:7	2590:7	11	WriteOK
LEAF_NODE	2590:7	2590:7	12	WriteOK
LEAF_NODE	2590:14	2590:14	11	(
ARGUMENT	2590:15	2590:15	11	tif
FIELD	2590:15	2590:15	12	tif
LEAF_NODE	2590:15	2590:15	13	tif
LEAF_NODE	2590:18	2590:18	11	,
ARGUMENT	2590:19	2590:19	11	data
FIELD	2590:19	2590:19	12	data
LEAF_NODE	2590:19	2590:19	13	data
LEAF_NODE	2590:23	2590:23	11	,
ARGUMENT	2590:24	2590:34	11	( tmsize_t ) datalength
LEAF_NODE	2590:24	2590:24	12	(
TYPE_NAME	2590:25	2590:25	12	tmsize_t
LEAF_NODE	2590:25	2590:25	13	tmsize_t
LEAF_NODE	2590:33	2590:33	12	)
FIELD	2590:34	2590:34	12	datalength
LEAF_NODE	2590:34	2590:34	13	datalength
LEAF_NODE	2590:44	2590:44	11	)
LEAF_NODE	2590:45	2590:45	7	)
STATEMENTS	2591:2	2594:2	7	
LEAF_NODE	2591:2	2591:2	8	{
STATEMENTS	2592:3	2593:3	8	
EXPR_STATEMENT	2592:3	2592:71	9	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing tag data" ) ;
EXPR	2592:3	2592:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing tag data" )
FUNCTION_CALL	2592:3	2592:70	11	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error writing tag data" )
CALLEE	2592:3	2592:3	12	TIFFErrorExt
LEAF_NODE	2592:3	2592:3	13	TIFFErrorExt
LEAF_NODE	2592:15	2592:15	12	(
ARGUMENT	2592:16	2592:16	12	tif -> tif_clientdata
FIELD	2592:16	2592:21	13	tif -> tif_clientdata
LEAF_NODE	2592:16	2592:16	14	tif
LEAF_NODE	2592:19	2592:19	14	->
LEAF_NODE	2592:21	2592:21	14	tif_clientdata
LEAF_NODE	2592:35	2592:35	12	,
ARGUMENT	2592:36	2592:36	12	module
FIELD	2592:36	2592:36	13	module
LEAF_NODE	2592:36	2592:36	14	module
LEAF_NODE	2592:42	2592:42	12	,
ARGUMENT	2592:43	2592:43	12	"IO error writing tag data"
FIELD	2592:43	2592:43	13	"IO error writing tag data"
LEAF_NODE	2592:43	2592:43	14	"IO error writing tag data"
LEAF_NODE	2592:70	2592:70	12	)
LEAF_NODE	2592:71	2592:71	10	;
JUMP_STATEMENT	2593:3	2593:12	9	return ( 0 ) ;
KEYWORD	2593:3	2593:3	10	return
LEAF_NODE	2593:3	2593:3	11	return
DESTINATION	2593:9	2593:9	10	( 0 )
EXPR	2593:9	2593:11	11	( 0 )
LEAF_NODE	2593:9	2593:9	12	(
FIELD	2593:10	2593:10	12	0
LEAF_NODE	2593:10	2593:10	13	0
LEAF_NODE	2593:11	2593:11	12	)
LEAF_NODE	2593:12	2593:12	10	;
LEAF_NODE	2594:2	2594:2	8	}
EXPR_STATEMENT	2595:2	2595:21	6	tif -> tif_dataoff = nb ;
EXPR	2595:2	2595:2	7	tif -> tif_dataoff = nb
ASSIGN	2595:2	2595:19	8	tif -> tif_dataoff = nb
LVAL	2595:2	2595:2	9	tif -> tif_dataoff
FIELD	2595:2	2595:7	10	tif -> tif_dataoff
LEAF_NODE	2595:2	2595:2	11	tif
LEAF_NODE	2595:5	2595:5	11	->
LEAF_NODE	2595:7	2595:7	11	tif_dataoff
ASSIGN_OP	2595:18	2595:18	9	=
LEAF_NODE	2595:18	2595:18	10	=
RVAL	2595:19	2595:19	9	nb
FIELD	2595:19	2595:19	10	nb
LEAF_NODE	2595:19	2595:19	11	nb
LEAF_NODE	2595:21	2595:21	7	;
SELECTION	2596:2	2597:3	6	
KEYWORD	2596:2	2596:2	7	if
LEAF_NODE	2596:2	2596:2	8	if
LEAF_NODE	2596:5	2596:5	7	(
CONDITION	2596:6	2596:6	7	tif -> tif_dataoff & 1
EXPR	2596:6	2596:23	8	tif -> tif_dataoff & 1
FIELD	2596:6	2596:11	9	tif -> tif_dataoff
LEAF_NODE	2596:6	2596:6	10	tif
LEAF_NODE	2596:9	2596:9	10	->
LEAF_NODE	2596:11	2596:11	10	tif_dataoff
LEAF_NODE	2596:22	2596:22	9	&
FIELD	2596:23	2596:23	9	1
LEAF_NODE	2596:23	2596:23	10	1
LEAF_NODE	2596:24	2596:24	7	)
STATEMENTS	2597:3	2597:3	7	
EXPR_STATEMENT	2597:3	2597:21	8	tif -> tif_dataoff ++ ;
EXPR	2597:3	2597:3	9	tif -> tif_dataoff ++
FIELD	2597:3	2597:19	10	tif -> tif_dataoff ++
LEAF_NODE	2597:3	2597:3	11	tif
LEAF_NODE	2597:6	2597:6	11	->
LEAF_NODE	2597:8	2597:8	11	tif_dataoff
LEAF_NODE	2597:19	2597:19	11	++
LEAF_NODE	2597:21	2597:21	9	;
SELECTION	2598:2	2599:2	6	
KEYWORD	2598:2	2598:2	7	if
LEAF_NODE	2598:2	2598:2	8	if
LEAF_NODE	2598:5	2598:5	7	(
CONDITION	2598:6	2598:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2598:6	2598:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2598:6	2598:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2598:6	2598:6	10	!
LEAF_NODE	2598:6	2598:6	11	!
LEAF_NODE	2598:7	2598:7	10	(
FIELD	2598:8	2598:13	10	tif -> tif_flags
LEAF_NODE	2598:8	2598:8	11	tif
LEAF_NODE	2598:11	2598:11	11	->
LEAF_NODE	2598:13	2598:13	11	tif_flags
LEAF_NODE	2598:22	2598:22	10	&
FIELD	2598:23	2598:23	10	TIFF_BIGTIFF
LEAF_NODE	2598:23	2598:23	11	TIFF_BIGTIFF
LEAF_NODE	2598:35	2598:35	10	)
LEAF_NODE	2598:36	2598:36	7	)
STATEMENTS	2599:2	2605:2	7	
LEAF_NODE	2599:2	2599:2	8	{
STATEMENTS	2600:3	2604:3	8	
SIMPLE_DECL	2600:3	2600:11	9	uint32 o ;
VAR_DECL	2600:3	2600:10	10	uint32 o
TYPE	2600:3	2600:3	11	uint32
TYPE_NAME	2600:3	2600:3	12	uint32
LEAF_NODE	2600:3	2600:3	13	uint32
NAME	2600:10	2600:10	11	o
LEAF_NODE	2600:10	2600:10	12	o
LEAF_NODE	2600:11	2600:11	10	;
EXPR_STATEMENT	2601:3	2601:15	9	o = ( uint32 ) na ;
EXPR	2601:3	2601:3	10	o = ( uint32 ) na
ASSIGN	2601:3	2601:5	11	o = ( uint32 ) na
LVAL	2601:3	2601:3	12	o
FIELD	2601:3	2601:3	13	o
LEAF_NODE	2601:3	2601:3	14	o
ASSIGN_OP	2601:4	2601:4	12	=
LEAF_NODE	2601:4	2601:4	13	=
RVAL	2601:5	2601:13	12	( uint32 ) na
LEAF_NODE	2601:5	2601:5	13	(
TYPE_NAME	2601:6	2601:6	13	uint32
LEAF_NODE	2601:6	2601:6	14	uint32
LEAF_NODE	2601:12	2601:12	13	)
FIELD	2601:13	2601:13	13	na
LEAF_NODE	2601:13	2601:13	14	na
LEAF_NODE	2601:15	2601:15	10	;
SELECTION	2602:3	2603:4	9	
KEYWORD	2602:3	2602:3	10	if
LEAF_NODE	2602:3	2602:3	11	if
LEAF_NODE	2602:6	2602:6	10	(
CONDITION	2602:7	2602:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	2602:7	2602:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	2602:7	2602:12	12	tif -> tif_flags
LEAF_NODE	2602:7	2602:7	13	tif
LEAF_NODE	2602:10	2602:10	13	->
LEAF_NODE	2602:12	2602:12	13	tif_flags
LEAF_NODE	2602:21	2602:21	12	&
FIELD	2602:22	2602:22	12	TIFF_SWAB
LEAF_NODE	2602:22	2602:22	13	TIFF_SWAB
LEAF_NODE	2602:31	2602:31	10	)
STATEMENTS	2603:4	2603:4	10	
EXPR_STATEMENT	2603:4	2603:20	11	TIFFSwabLong ( & o ) ;
EXPR	2603:4	2603:4	12	TIFFSwabLong ( & o )
FUNCTION_CALL	2603:4	2603:19	13	TIFFSwabLong ( & o )
CALLEE	2603:4	2603:4	14	TIFFSwabLong
LEAF_NODE	2603:4	2603:4	15	TIFFSwabLong
LEAF_NODE	2603:16	2603:16	14	(
ARGUMENT	2603:17	2603:17	14	& o
UNARY_EXPR	2603:17	2603:18	15	& o
UNARY_OPERATOR	2603:17	2603:17	16	&
LEAF_NODE	2603:17	2603:17	17	&
FIELD	2603:18	2603:18	16	o
LEAF_NODE	2603:18	2603:18	17	o
LEAF_NODE	2603:19	2603:19	14	)
LEAF_NODE	2603:20	2603:20	12	;
EXPR_STATEMENT	2604:3	2604:40	9	_TIFFmemcpy ( & dir [ m ] . tdir_offset , & o , 4 ) ;
EXPR	2604:3	2604:3	10	_TIFFmemcpy ( & dir [ m ] . tdir_offset , & o , 4 )
FUNCTION_CALL	2604:3	2604:39	11	_TIFFmemcpy ( & dir [ m ] . tdir_offset , & o , 4 )
CALLEE	2604:3	2604:3	12	_TIFFmemcpy
LEAF_NODE	2604:3	2604:3	13	_TIFFmemcpy
LEAF_NODE	2604:14	2604:14	12	(
ARGUMENT	2604:15	2604:15	12	& dir [ m ] . tdir_offset
UNARY_EXPR	2604:15	2604:16	13	& dir [ m ] . tdir_offset
UNARY_OPERATOR	2604:15	2604:15	14	&
LEAF_NODE	2604:15	2604:15	15	&
FIELD	2604:16	2604:23	14	dir [ m ] . tdir_offset
LEAF_NODE	2604:16	2604:16	15	dir
LEAF_NODE	2604:19	2604:19	15	[
EXPR	2604:20	2604:20	15	m
FIELD	2604:20	2604:20	16	m
LEAF_NODE	2604:20	2604:20	17	m
LEAF_NODE	2604:21	2604:21	15	]
LEAF_NODE	2604:22	2604:22	15	.
LEAF_NODE	2604:23	2604:23	15	tdir_offset
LEAF_NODE	2604:34	2604:34	12	,
ARGUMENT	2604:35	2604:35	12	& o
UNARY_EXPR	2604:35	2604:36	13	& o
UNARY_OPERATOR	2604:35	2604:35	14	&
LEAF_NODE	2604:35	2604:35	15	&
FIELD	2604:36	2604:36	14	o
LEAF_NODE	2604:36	2604:36	15	o
LEAF_NODE	2604:37	2604:37	12	,
ARGUMENT	2604:38	2604:38	12	4
FIELD	2604:38	2604:38	13	4
LEAF_NODE	2604:38	2604:38	14	4
LEAF_NODE	2604:39	2604:39	12	)
LEAF_NODE	2604:40	2604:40	10	;
LEAF_NODE	2605:2	2605:2	8	}
SELECTION	2606:2	2607:2	6	
KEYWORD	2606:2	2606:2	7	else
LEAF_NODE	2606:2	2606:2	8	else
STATEMENTS	2607:2	2611:2	7	
LEAF_NODE	2607:2	2607:2	8	{
STATEMENTS	2608:3	2609:3	8	
EXPR_STATEMENT	2608:3	2608:37	9	dir [ m ] . tdir_offset . toff_long8 = na ;
EXPR	2608:3	2608:3	10	dir [ m ] . tdir_offset . toff_long8 = na
ASSIGN	2608:3	2608:35	11	dir [ m ] . tdir_offset . toff_long8 = na
LVAL	2608:3	2608:3	12	dir [ m ] . tdir_offset . toff_long8
FIELD	2608:3	2608:22	13	dir [ m ] . tdir_offset . toff_long8
LEAF_NODE	2608:3	2608:3	14	dir
LEAF_NODE	2608:6	2608:6	14	[
EXPR	2608:7	2608:7	14	m
FIELD	2608:7	2608:7	15	m
LEAF_NODE	2608:7	2608:7	16	m
LEAF_NODE	2608:8	2608:8	14	]
LEAF_NODE	2608:9	2608:9	14	.
LEAF_NODE	2608:10	2608:10	14	tdir_offset
LEAF_NODE	2608:21	2608:21	14	.
LEAF_NODE	2608:22	2608:22	14	toff_long8
ASSIGN_OP	2608:33	2608:33	12	=
LEAF_NODE	2608:33	2608:33	13	=
RVAL	2608:35	2608:35	12	na
FIELD	2608:35	2608:35	13	na
LEAF_NODE	2608:35	2608:35	14	na
LEAF_NODE	2608:37	2608:37	10	;
SELECTION	2609:3	2610:4	9	
KEYWORD	2609:3	2609:3	10	if
LEAF_NODE	2609:3	2609:3	11	if
LEAF_NODE	2609:6	2609:6	10	(
CONDITION	2609:7	2609:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	2609:7	2609:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	2609:7	2609:12	12	tif -> tif_flags
LEAF_NODE	2609:7	2609:7	13	tif
LEAF_NODE	2609:10	2609:10	13	->
LEAF_NODE	2609:12	2609:12	13	tif_flags
LEAF_NODE	2609:21	2609:21	12	&
FIELD	2609:22	2609:22	12	TIFF_SWAB
LEAF_NODE	2609:22	2609:22	13	TIFF_SWAB
LEAF_NODE	2609:31	2609:31	10	)
STATEMENTS	2610:4	2610:4	10	
EXPR_STATEMENT	2610:4	2610:49	11	TIFFSwabLong8 ( & dir [ m ] . tdir_offset . toff_long8 ) ;
EXPR	2610:4	2610:4	12	TIFFSwabLong8 ( & dir [ m ] . tdir_offset . toff_long8 )
FUNCTION_CALL	2610:4	2610:48	13	TIFFSwabLong8 ( & dir [ m ] . tdir_offset . toff_long8 )
CALLEE	2610:4	2610:4	14	TIFFSwabLong8
LEAF_NODE	2610:4	2610:4	15	TIFFSwabLong8
LEAF_NODE	2610:17	2610:17	14	(
ARGUMENT	2610:18	2610:18	14	& dir [ m ] . tdir_offset . toff_long8
UNARY_EXPR	2610:18	2610:19	15	& dir [ m ] . tdir_offset . toff_long8
UNARY_OPERATOR	2610:18	2610:18	16	&
LEAF_NODE	2610:18	2610:18	17	&
FIELD	2610:19	2610:38	16	dir [ m ] . tdir_offset . toff_long8
LEAF_NODE	2610:19	2610:19	17	dir
LEAF_NODE	2610:22	2610:22	17	[
EXPR	2610:23	2610:23	17	m
FIELD	2610:23	2610:23	18	m
LEAF_NODE	2610:23	2610:23	19	m
LEAF_NODE	2610:24	2610:24	17	]
LEAF_NODE	2610:25	2610:25	17	.
LEAF_NODE	2610:26	2610:26	17	tdir_offset
LEAF_NODE	2610:37	2610:37	17	.
LEAF_NODE	2610:38	2610:38	17	toff_long8
LEAF_NODE	2610:48	2610:48	14	)
LEAF_NODE	2610:49	2610:49	12	;
LEAF_NODE	2611:2	2611:2	8	}
LEAF_NODE	2612:1	2612:1	5	}
EXPR_STATEMENT	2613:1	2613:10	3	( * ndir ) ++ ;
EXPR	2613:1	2613:8	4	( * ndir ) ++
LEAF_NODE	2613:1	2613:1	5	(
UNARY_EXPR	2613:2	2613:3	5	* ndir
UNARY_OPERATOR	2613:2	2613:2	6	*
LEAF_NODE	2613:2	2613:2	7	*
FIELD	2613:3	2613:3	6	ndir
LEAF_NODE	2613:3	2613:3	7	ndir
LEAF_NODE	2613:7	2613:7	5	)
LEAF_NODE	2613:8	2613:8	5	++
LEAF_NODE	2613:10	2613:10	4	;
JUMP_STATEMENT	2614:1	2614:10	3	return ( 1 ) ;
KEYWORD	2614:1	2614:1	4	return
LEAF_NODE	2614:1	2614:1	5	return
DESTINATION	2614:7	2614:7	4	( 1 )
EXPR	2614:7	2614:9	5	( 1 )
LEAF_NODE	2614:7	2614:7	6	(
FIELD	2614:8	2614:8	6	1
LEAF_NODE	2614:8	2614:8	7	1
LEAF_NODE	2614:9	2614:9	6	)
LEAF_NODE	2614:10	2614:10	4	;
LEAF_NODE	2615:0	2615:0	2	}
FUNCTION_DEF	2620:0	2807:0	1	
RETURN_TYPE	2620:0	2620:7	2	static int
LEAF_NODE	2620:0	2620:0	3	static
TYPE_NAME	2620:7	2620:7	3	int
LEAF_NODE	2620:7	2620:7	4	int
FUNCTION_NAME	2621:0	2621:0	2	TIFFLinkDirectory
LEAF_NODE	2621:0	2621:0	3	TIFFLinkDirectory
PARAMETER_LIST	2621:17	2621:27	2	( TIFF * tif )
LEAF_NODE	2621:17	2621:17	3	(
PARAMETER_DECL	2621:18	2621:24	3	TIFF * tif
TYPE	2621:18	2621:22	4	TIFF *
TYPE_NAME	2621:18	2621:18	5	TIFF
LEAF_NODE	2621:18	2621:18	6	TIFF
POINTER	2621:22	2621:22	5	*
LEAF_NODE	2621:22	2621:22	6	*
NAME	2621:24	2621:24	4	tif
LEAF_NODE	2621:24	2621:24	5	tif
LEAF_NODE	2621:27	2621:27	3	)
LEAF_NODE	2622:0	2622:0	2	{
STATEMENTS	2623:1	2806:1	2	
LEAF_NODE	2623:1	2623:1	3	static
SIMPLE_DECL	2623:8	2623:49	3	const char [ ] module ; module = "TIFFLinkDirectory" ;
VAR_DECL	2623:8	2623:19	4	const char [ ] module ; module = "TIFFLinkDirectory"
TYPE	2623:8	2623:25	5	const char [ ]
TYPE_NAME	2623:8	2623:14	6	const char
LEAF_NODE	2623:8	2623:8	7	const
LEAF_NODE	2623:14	2623:14	7	char
TYPE_SUFFIX	2623:25	2623:26	6	[ ]
LEAF_NODE	2623:25	2623:25	7	[
LEAF_NODE	2623:26	2623:26	7	]
NAME	2623:19	2623:19	5	module
LEAF_NODE	2623:19	2623:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2623:19	2623:19	5	module = "TIFFLinkDirectory"
ASSIGN	2623:19	2623:30	6	module = "TIFFLinkDirectory"
LVAL	2623:19	2623:19	7	module
NAME	2623:19	2623:19	8	module
LEAF_NODE	2623:19	2623:19	9	module
ASSIGN_OP	2623:28	2623:28	7	=
LEAF_NODE	2623:28	2623:28	8	=
RVAL	2623:30	2623:30	7	"TIFFLinkDirectory"
FIELD	2623:30	2623:30	8	"TIFFLinkDirectory"
LEAF_NODE	2623:30	2623:30	9	"TIFFLinkDirectory"
LEAF_NODE	2623:49	2623:49	4	;
EXPR_STATEMENT	2625:1	2625:68	3	tif -> tif_diroff = ( TIFFSeekFile ( tif , 0 , SEEK_END ) + 1 ) & ( ~ ( ( toff_t ) 1 ) ) ;
EXPR	2625:1	2625:1	4	tif -> tif_diroff = ( TIFFSeekFile ( tif , 0 , SEEK_END ) + 1 ) & ( ~ ( ( toff_t ) 1 ) )
ASSIGN	2625:1	2625:19	5	tif -> tif_diroff = ( TIFFSeekFile ( tif , 0 , SEEK_END ) + 1 ) & ( ~ ( ( toff_t ) 1 ) )
LVAL	2625:1	2625:1	6	tif -> tif_diroff
FIELD	2625:1	2625:6	7	tif -> tif_diroff
LEAF_NODE	2625:1	2625:1	8	tif
LEAF_NODE	2625:4	2625:4	8	->
LEAF_NODE	2625:6	2625:6	8	tif_diroff
ASSIGN_OP	2625:17	2625:17	6	=
LEAF_NODE	2625:17	2625:17	7	=
RVAL	2625:19	2625:67	6	( TIFFSeekFile ( tif , 0 , SEEK_END ) + 1 ) & ( ~ ( ( toff_t ) 1 ) )
LEAF_NODE	2625:19	2625:19	7	(
FUNCTION_CALL	2625:20	2625:47	7	TIFFSeekFile ( tif , 0 , SEEK_END )
CALLEE	2625:20	2625:20	8	TIFFSeekFile
LEAF_NODE	2625:20	2625:20	9	TIFFSeekFile
LEAF_NODE	2625:32	2625:32	8	(
ARGUMENT	2625:33	2625:33	8	tif
FIELD	2625:33	2625:33	9	tif
LEAF_NODE	2625:33	2625:33	10	tif
LEAF_NODE	2625:36	2625:36	8	,
ARGUMENT	2625:37	2625:37	8	0
FIELD	2625:37	2625:37	9	0
LEAF_NODE	2625:37	2625:37	10	0
LEAF_NODE	2625:38	2625:38	8	,
ARGUMENT	2625:39	2625:39	8	SEEK_END
FIELD	2625:39	2625:39	9	SEEK_END
LEAF_NODE	2625:39	2625:39	10	SEEK_END
LEAF_NODE	2625:47	2625:47	8	)
LEAF_NODE	2625:48	2625:48	7	+
FIELD	2625:49	2625:49	7	1
LEAF_NODE	2625:49	2625:49	8	1
LEAF_NODE	2625:50	2625:50	7	)
LEAF_NODE	2625:52	2625:52	7	&
LEAF_NODE	2625:54	2625:54	7	(
UNARY_EXPR	2625:55	2625:66	7	~ ( ( toff_t ) 1 )
UNARY_OPERATOR	2625:55	2625:55	8	~
LEAF_NODE	2625:55	2625:55	9	~
LEAF_NODE	2625:56	2625:56	8	(
LEAF_NODE	2625:57	2625:57	8	(
TYPE_NAME	2625:58	2625:58	8	toff_t
LEAF_NODE	2625:58	2625:58	9	toff_t
LEAF_NODE	2625:64	2625:64	8	)
FIELD	2625:65	2625:65	8	1
LEAF_NODE	2625:65	2625:65	9	1
LEAF_NODE	2625:66	2625:66	8	)
LEAF_NODE	2625:67	2625:67	7	)
LEAF_NODE	2625:68	2625:68	4	;
SELECTION	2630:1	2631:1	3	
KEYWORD	2630:1	2630:1	4	if
LEAF_NODE	2630:1	2630:1	5	if
LEAF_NODE	2630:4	2630:4	4	(
CONDITION	2630:5	2630:5	4	tif -> tif_flags & TIFF_INSUBIFD
EXPR	2630:5	2630:22	5	tif -> tif_flags & TIFF_INSUBIFD
FIELD	2630:5	2630:10	6	tif -> tif_flags
LEAF_NODE	2630:5	2630:5	7	tif
LEAF_NODE	2630:8	2630:8	7	->
LEAF_NODE	2630:10	2630:10	7	tif_flags
LEAF_NODE	2630:20	2630:20	6	&
FIELD	2630:22	2630:22	6	TIFF_INSUBIFD
LEAF_NODE	2630:22	2630:22	7	TIFF_INSUBIFD
LEAF_NODE	2630:35	2630:35	4	)
STATEMENTS	2631:1	2678:1	4	
LEAF_NODE	2631:1	2631:1	5	{
STATEMENTS	2632:2	2655:2	5	
SELECTION	2632:2	2633:2	6	
KEYWORD	2632:2	2632:2	7	if
LEAF_NODE	2632:2	2632:2	8	if
LEAF_NODE	2632:5	2632:5	7	(
CONDITION	2632:6	2632:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2632:6	2632:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2632:6	2632:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2632:6	2632:6	10	!
LEAF_NODE	2632:6	2632:6	11	!
LEAF_NODE	2632:7	2632:7	10	(
FIELD	2632:8	2632:13	10	tif -> tif_flags
LEAF_NODE	2632:8	2632:8	11	tif
LEAF_NODE	2632:11	2632:11	11	->
LEAF_NODE	2632:13	2632:13	11	tif_flags
LEAF_NODE	2632:22	2632:22	10	&
FIELD	2632:23	2632:23	10	TIFF_BIGTIFF
LEAF_NODE	2632:23	2632:23	11	TIFF_BIGTIFF
LEAF_NODE	2632:35	2632:35	10	)
LEAF_NODE	2632:36	2632:36	7	)
STATEMENTS	2633:2	2654:2	7	
LEAF_NODE	2633:2	2633:2	8	{
STATEMENTS	2634:3	2653:3	8	
SIMPLE_DECL	2634:3	2634:11	9	uint32 m ;
VAR_DECL	2634:3	2634:10	10	uint32 m
TYPE	2634:3	2634:3	11	uint32
TYPE_NAME	2634:3	2634:3	12	uint32
LEAF_NODE	2634:3	2634:3	13	uint32
NAME	2634:10	2634:10	11	m
LEAF_NODE	2634:10	2634:10	12	m
LEAF_NODE	2634:11	2634:11	10	;
EXPR_STATEMENT	2635:3	2635:30	9	m = ( uint32 ) tif -> tif_diroff ;
EXPR	2635:3	2635:3	10	m = ( uint32 ) tif -> tif_diroff
ASSIGN	2635:3	2635:7	11	m = ( uint32 ) tif -> tif_diroff
LVAL	2635:3	2635:3	12	m
FIELD	2635:3	2635:3	13	m
LEAF_NODE	2635:3	2635:3	14	m
ASSIGN_OP	2635:5	2635:5	12	=
LEAF_NODE	2635:5	2635:5	13	=
RVAL	2635:7	2635:15	12	( uint32 ) tif -> tif_diroff
LEAF_NODE	2635:7	2635:7	13	(
TYPE_NAME	2635:8	2635:8	13	uint32
LEAF_NODE	2635:8	2635:8	14	uint32
LEAF_NODE	2635:14	2635:14	13	)
FIELD	2635:15	2635:20	13	tif -> tif_diroff
LEAF_NODE	2635:15	2635:15	14	tif
LEAF_NODE	2635:18	2635:18	14	->
LEAF_NODE	2635:20	2635:20	14	tif_diroff
LEAF_NODE	2635:30	2635:30	10	;
SELECTION	2636:3	2637:4	9	
KEYWORD	2636:3	2636:3	10	if
LEAF_NODE	2636:3	2636:3	11	if
LEAF_NODE	2636:6	2636:6	10	(
CONDITION	2636:7	2636:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	2636:7	2636:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	2636:7	2636:12	12	tif -> tif_flags
LEAF_NODE	2636:7	2636:7	13	tif
LEAF_NODE	2636:10	2636:10	13	->
LEAF_NODE	2636:12	2636:12	13	tif_flags
LEAF_NODE	2636:22	2636:22	12	&
FIELD	2636:24	2636:24	12	TIFF_SWAB
LEAF_NODE	2636:24	2636:24	13	TIFF_SWAB
LEAF_NODE	2636:33	2636:33	10	)
STATEMENTS	2637:4	2637:4	10	
EXPR_STATEMENT	2637:4	2637:20	11	TIFFSwabLong ( & m ) ;
EXPR	2637:4	2637:4	12	TIFFSwabLong ( & m )
FUNCTION_CALL	2637:4	2637:19	13	TIFFSwabLong ( & m )
CALLEE	2637:4	2637:4	14	TIFFSwabLong
LEAF_NODE	2637:4	2637:4	15	TIFFSwabLong
LEAF_NODE	2637:16	2637:16	14	(
ARGUMENT	2637:17	2637:17	14	& m
UNARY_EXPR	2637:17	2637:18	15	& m
UNARY_OPERATOR	2637:17	2637:17	16	&
LEAF_NODE	2637:17	2637:17	17	&
FIELD	2637:18	2637:18	16	m
LEAF_NODE	2637:18	2637:18	17	m
LEAF_NODE	2637:19	2637:19	14	)
LEAF_NODE	2637:20	2637:20	12	;
EXPR_STATEMENT	2638:3	2638:57	9	( void ) TIFFSeekFile ( tif , tif -> tif_subifdoff , SEEK_SET ) ;
EXPR	2638:3	2638:10	10	( void ) TIFFSeekFile ( tif , tif -> tif_subifdoff , SEEK_SET )
LEAF_NODE	2638:3	2638:3	11	(
TYPE_NAME	2638:4	2638:4	11	void
LEAF_NODE	2638:4	2638:4	12	void
LEAF_NODE	2638:8	2638:8	11	)
FUNCTION_CALL	2638:10	2638:56	11	TIFFSeekFile ( tif , tif -> tif_subifdoff , SEEK_SET )
CALLEE	2638:10	2638:10	12	TIFFSeekFile
LEAF_NODE	2638:10	2638:10	13	TIFFSeekFile
LEAF_NODE	2638:22	2638:22	12	(
ARGUMENT	2638:23	2638:23	12	tif
FIELD	2638:23	2638:23	13	tif
LEAF_NODE	2638:23	2638:23	14	tif
LEAF_NODE	2638:26	2638:26	12	,
ARGUMENT	2638:28	2638:28	12	tif -> tif_subifdoff
FIELD	2638:28	2638:33	13	tif -> tif_subifdoff
LEAF_NODE	2638:28	2638:28	14	tif
LEAF_NODE	2638:31	2638:31	14	->
LEAF_NODE	2638:33	2638:33	14	tif_subifdoff
LEAF_NODE	2638:46	2638:46	12	,
ARGUMENT	2638:48	2638:48	12	SEEK_SET
FIELD	2638:48	2638:48	13	SEEK_SET
LEAF_NODE	2638:48	2638:48	14	SEEK_SET
LEAF_NODE	2638:56	2638:56	12	)
LEAF_NODE	2638:57	2638:57	10	;
SELECTION	2639:3	2639:29	9	
KEYWORD	2639:3	2639:3	10	if
LEAF_NODE	2639:3	2639:3	11	if
LEAF_NODE	2639:6	2639:6	10	(
CONDITION	2639:7	2639:7	10	! WriteOK ( tif , & m , 4 )
EXPR	2639:7	2639:7	11	! WriteOK ( tif , & m , 4 )
UNARY_EXPR	2639:7	2639:8	12	! WriteOK ( tif , & m , 4 )
UNARY_OPERATOR	2639:7	2639:7	13	!
LEAF_NODE	2639:7	2639:7	14	!
FUNCTION_CALL	2639:8	2639:26	13	WriteOK ( tif , & m , 4 )
CALLEE	2639:8	2639:8	14	WriteOK
LEAF_NODE	2639:8	2639:8	15	WriteOK
LEAF_NODE	2639:15	2639:15	14	(
ARGUMENT	2639:16	2639:16	14	tif
FIELD	2639:16	2639:16	15	tif
LEAF_NODE	2639:16	2639:16	16	tif
LEAF_NODE	2639:19	2639:19	14	,
ARGUMENT	2639:21	2639:21	14	& m
UNARY_EXPR	2639:21	2639:22	15	& m
UNARY_OPERATOR	2639:21	2639:21	16	&
LEAF_NODE	2639:21	2639:21	17	&
FIELD	2639:22	2639:22	16	m
LEAF_NODE	2639:22	2639:22	17	m
LEAF_NODE	2639:23	2639:23	14	,
ARGUMENT	2639:25	2639:25	14	4
FIELD	2639:25	2639:25	15	4
LEAF_NODE	2639:25	2639:25	16	4
LEAF_NODE	2639:26	2639:26	14	)
LEAF_NODE	2639:27	2639:27	10	)
STATEMENTS	2639:29	2643:3	10	
LEAF_NODE	2639:29	2639:29	11	{
STATEMENTS	2640:4	2642:4	11	
EXPR_STATEMENT	2640:4	2641:47	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing SubIFD directory link" ) ;
EXPR	2640:4	2640:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing SubIFD directory link" )
FUNCTION_CALL	2640:4	2641:46	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing SubIFD directory link" )
CALLEE	2640:4	2640:4	15	TIFFErrorExt
LEAF_NODE	2640:4	2640:4	16	TIFFErrorExt
LEAF_NODE	2640:16	2640:16	15	(
ARGUMENT	2640:17	2640:17	15	tif -> tif_clientdata
FIELD	2640:17	2640:22	16	tif -> tif_clientdata
LEAF_NODE	2640:17	2640:17	17	tif
LEAF_NODE	2640:20	2640:20	17	->
LEAF_NODE	2640:22	2640:22	17	tif_clientdata
LEAF_NODE	2640:36	2640:36	15	,
ARGUMENT	2640:38	2640:38	15	module
FIELD	2640:38	2640:38	16	module
LEAF_NODE	2640:38	2640:38	17	module
LEAF_NODE	2640:44	2640:44	15	,
ARGUMENT	2641:9	2641:9	15	"Error writing SubIFD directory link"
FIELD	2641:9	2641:9	16	"Error writing SubIFD directory link"
LEAF_NODE	2641:9	2641:9	17	"Error writing SubIFD directory link"
LEAF_NODE	2641:46	2641:46	15	)
LEAF_NODE	2641:47	2641:47	13	;
JUMP_STATEMENT	2642:4	2642:14	12	return ( 0 ) ;
KEYWORD	2642:4	2642:4	13	return
LEAF_NODE	2642:4	2642:4	14	return
DESTINATION	2642:11	2642:11	13	( 0 )
EXPR	2642:11	2642:13	14	( 0 )
LEAF_NODE	2642:11	2642:11	15	(
FIELD	2642:12	2642:12	15	0
LEAF_NODE	2642:12	2642:12	16	0
LEAF_NODE	2642:13	2642:13	15	)
LEAF_NODE	2642:14	2642:14	13	;
LEAF_NODE	2643:3	2643:3	11	}
SELECTION	2649:3	2650:4	9	
KEYWORD	2649:3	2649:3	10	if
LEAF_NODE	2649:3	2649:3	11	if
LEAF_NODE	2649:6	2649:6	10	(
CONDITION	2649:7	2649:7	10	-- tif -> tif_nsubifd
EXPR	2649:7	2649:9	11	-- tif -> tif_nsubifd
LEAF_NODE	2649:7	2649:7	12	--
FIELD	2649:9	2649:14	12	tif -> tif_nsubifd
LEAF_NODE	2649:9	2649:9	13	tif
LEAF_NODE	2649:12	2649:12	13	->
LEAF_NODE	2649:14	2649:14	13	tif_nsubifd
LEAF_NODE	2649:25	2649:25	10	)
STATEMENTS	2650:4	2650:4	10	
EXPR_STATEMENT	2650:4	2650:27	11	tif -> tif_subifdoff += 4 ;
EXPR	2650:4	2650:4	12	tif -> tif_subifdoff += 4
ASSIGN	2650:4	2650:26	13	tif -> tif_subifdoff += 4
LVAL	2650:4	2650:4	14	tif -> tif_subifdoff
FIELD	2650:4	2650:9	15	tif -> tif_subifdoff
LEAF_NODE	2650:4	2650:4	16	tif
LEAF_NODE	2650:7	2650:7	16	->
LEAF_NODE	2650:9	2650:9	16	tif_subifdoff
ASSIGN_OP	2650:23	2650:23	14	+=
LEAF_NODE	2650:23	2650:23	15	+=
RVAL	2650:26	2650:26	14	4
FIELD	2650:26	2650:26	15	4
LEAF_NODE	2650:26	2650:26	16	4
LEAF_NODE	2650:27	2650:27	12	;
SELECTION	2651:3	2652:4	9	
KEYWORD	2651:3	2651:3	10	else
LEAF_NODE	2651:3	2651:3	11	else
STATEMENTS	2652:4	2652:4	10	
EXPR_STATEMENT	2652:4	2652:36	11	tif -> tif_flags &= ~TIFF_INSUBIFD ;
EXPR	2652:4	2652:4	12	tif -> tif_flags &= ~TIFF_INSUBIFD
ASSIGN	2652:4	2652:22	13	tif -> tif_flags &= ~TIFF_INSUBIFD
LVAL	2652:4	2652:4	14	tif -> tif_flags
FIELD	2652:4	2652:9	15	tif -> tif_flags
LEAF_NODE	2652:4	2652:4	16	tif
LEAF_NODE	2652:7	2652:7	16	->
LEAF_NODE	2652:9	2652:9	16	tif_flags
ASSIGN_OP	2652:19	2652:19	14	&=
LEAF_NODE	2652:19	2652:19	15	&=
RVAL	2652:22	2652:22	14	~TIFF_INSUBIFD
FIELD	2652:22	2652:22	15	~TIFF_INSUBIFD
LEAF_NODE	2652:22	2652:22	16	~TIFF_INSUBIFD
LEAF_NODE	2652:36	2652:36	12	;
JUMP_STATEMENT	2653:3	2653:13	9	return ( 1 ) ;
KEYWORD	2653:3	2653:3	10	return
LEAF_NODE	2653:3	2653:3	11	return
DESTINATION	2653:10	2653:10	10	( 1 )
EXPR	2653:10	2653:12	11	( 1 )
LEAF_NODE	2653:10	2653:10	12	(
FIELD	2653:11	2653:11	12	1
LEAF_NODE	2653:11	2653:11	13	1
LEAF_NODE	2653:12	2653:12	12	)
LEAF_NODE	2653:13	2653:13	10	;
LEAF_NODE	2654:2	2654:2	8	}
SELECTION	2655:2	2656:2	6	
KEYWORD	2655:2	2655:2	7	else
LEAF_NODE	2655:2	2655:2	8	else
STATEMENTS	2656:2	2677:2	7	
LEAF_NODE	2656:2	2656:2	8	{
STATEMENTS	2657:3	2676:3	8	
SIMPLE_DECL	2657:3	2657:11	9	uint64 m ;
VAR_DECL	2657:3	2657:10	10	uint64 m
TYPE	2657:3	2657:3	11	uint64
TYPE_NAME	2657:3	2657:3	12	uint64
LEAF_NODE	2657:3	2657:3	13	uint64
NAME	2657:10	2657:10	11	m
LEAF_NODE	2657:10	2657:10	12	m
LEAF_NODE	2657:11	2657:11	10	;
EXPR_STATEMENT	2658:3	2658:22	9	m = tif -> tif_diroff ;
EXPR	2658:3	2658:3	10	m = tif -> tif_diroff
ASSIGN	2658:3	2658:7	11	m = tif -> tif_diroff
LVAL	2658:3	2658:3	12	m
FIELD	2658:3	2658:3	13	m
LEAF_NODE	2658:3	2658:3	14	m
ASSIGN_OP	2658:5	2658:5	12	=
LEAF_NODE	2658:5	2658:5	13	=
RVAL	2658:7	2658:7	12	tif -> tif_diroff
FIELD	2658:7	2658:12	13	tif -> tif_diroff
LEAF_NODE	2658:7	2658:7	14	tif
LEAF_NODE	2658:10	2658:10	14	->
LEAF_NODE	2658:12	2658:12	14	tif_diroff
LEAF_NODE	2658:22	2658:22	10	;
SELECTION	2659:3	2660:4	9	
KEYWORD	2659:3	2659:3	10	if
LEAF_NODE	2659:3	2659:3	11	if
LEAF_NODE	2659:6	2659:6	10	(
CONDITION	2659:7	2659:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	2659:7	2659:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	2659:7	2659:12	12	tif -> tif_flags
LEAF_NODE	2659:7	2659:7	13	tif
LEAF_NODE	2659:10	2659:10	13	->
LEAF_NODE	2659:12	2659:12	13	tif_flags
LEAF_NODE	2659:22	2659:22	12	&
FIELD	2659:24	2659:24	12	TIFF_SWAB
LEAF_NODE	2659:24	2659:24	13	TIFF_SWAB
LEAF_NODE	2659:33	2659:33	10	)
STATEMENTS	2660:4	2660:4	10	
EXPR_STATEMENT	2660:4	2660:21	11	TIFFSwabLong8 ( & m ) ;
EXPR	2660:4	2660:4	12	TIFFSwabLong8 ( & m )
FUNCTION_CALL	2660:4	2660:20	13	TIFFSwabLong8 ( & m )
CALLEE	2660:4	2660:4	14	TIFFSwabLong8
LEAF_NODE	2660:4	2660:4	15	TIFFSwabLong8
LEAF_NODE	2660:17	2660:17	14	(
ARGUMENT	2660:18	2660:18	14	& m
UNARY_EXPR	2660:18	2660:19	15	& m
UNARY_OPERATOR	2660:18	2660:18	16	&
LEAF_NODE	2660:18	2660:18	17	&
FIELD	2660:19	2660:19	16	m
LEAF_NODE	2660:19	2660:19	17	m
LEAF_NODE	2660:20	2660:20	14	)
LEAF_NODE	2660:21	2660:21	12	;
EXPR_STATEMENT	2661:3	2661:57	9	( void ) TIFFSeekFile ( tif , tif -> tif_subifdoff , SEEK_SET ) ;
EXPR	2661:3	2661:10	10	( void ) TIFFSeekFile ( tif , tif -> tif_subifdoff , SEEK_SET )
LEAF_NODE	2661:3	2661:3	11	(
TYPE_NAME	2661:4	2661:4	11	void
LEAF_NODE	2661:4	2661:4	12	void
LEAF_NODE	2661:8	2661:8	11	)
FUNCTION_CALL	2661:10	2661:56	11	TIFFSeekFile ( tif , tif -> tif_subifdoff , SEEK_SET )
CALLEE	2661:10	2661:10	12	TIFFSeekFile
LEAF_NODE	2661:10	2661:10	13	TIFFSeekFile
LEAF_NODE	2661:22	2661:22	12	(
ARGUMENT	2661:23	2661:23	12	tif
FIELD	2661:23	2661:23	13	tif
LEAF_NODE	2661:23	2661:23	14	tif
LEAF_NODE	2661:26	2661:26	12	,
ARGUMENT	2661:28	2661:28	12	tif -> tif_subifdoff
FIELD	2661:28	2661:33	13	tif -> tif_subifdoff
LEAF_NODE	2661:28	2661:28	14	tif
LEAF_NODE	2661:31	2661:31	14	->
LEAF_NODE	2661:33	2661:33	14	tif_subifdoff
LEAF_NODE	2661:46	2661:46	12	,
ARGUMENT	2661:48	2661:48	12	SEEK_SET
FIELD	2661:48	2661:48	13	SEEK_SET
LEAF_NODE	2661:48	2661:48	14	SEEK_SET
LEAF_NODE	2661:56	2661:56	12	)
LEAF_NODE	2661:57	2661:57	10	;
SELECTION	2662:3	2662:29	9	
KEYWORD	2662:3	2662:3	10	if
LEAF_NODE	2662:3	2662:3	11	if
LEAF_NODE	2662:6	2662:6	10	(
CONDITION	2662:7	2662:7	10	! WriteOK ( tif , & m , 8 )
EXPR	2662:7	2662:7	11	! WriteOK ( tif , & m , 8 )
UNARY_EXPR	2662:7	2662:8	12	! WriteOK ( tif , & m , 8 )
UNARY_OPERATOR	2662:7	2662:7	13	!
LEAF_NODE	2662:7	2662:7	14	!
FUNCTION_CALL	2662:8	2662:26	13	WriteOK ( tif , & m , 8 )
CALLEE	2662:8	2662:8	14	WriteOK
LEAF_NODE	2662:8	2662:8	15	WriteOK
LEAF_NODE	2662:15	2662:15	14	(
ARGUMENT	2662:16	2662:16	14	tif
FIELD	2662:16	2662:16	15	tif
LEAF_NODE	2662:16	2662:16	16	tif
LEAF_NODE	2662:19	2662:19	14	,
ARGUMENT	2662:21	2662:21	14	& m
UNARY_EXPR	2662:21	2662:22	15	& m
UNARY_OPERATOR	2662:21	2662:21	16	&
LEAF_NODE	2662:21	2662:21	17	&
FIELD	2662:22	2662:22	16	m
LEAF_NODE	2662:22	2662:22	17	m
LEAF_NODE	2662:23	2662:23	14	,
ARGUMENT	2662:25	2662:25	14	8
FIELD	2662:25	2662:25	15	8
LEAF_NODE	2662:25	2662:25	16	8
LEAF_NODE	2662:26	2662:26	14	)
LEAF_NODE	2662:27	2662:27	10	)
STATEMENTS	2662:29	2666:3	10	
LEAF_NODE	2662:29	2662:29	11	{
STATEMENTS	2663:4	2665:4	11	
EXPR_STATEMENT	2663:4	2664:47	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing SubIFD directory link" ) ;
EXPR	2663:4	2663:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing SubIFD directory link" )
FUNCTION_CALL	2663:4	2664:46	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing SubIFD directory link" )
CALLEE	2663:4	2663:4	15	TIFFErrorExt
LEAF_NODE	2663:4	2663:4	16	TIFFErrorExt
LEAF_NODE	2663:16	2663:16	15	(
ARGUMENT	2663:17	2663:17	15	tif -> tif_clientdata
FIELD	2663:17	2663:22	16	tif -> tif_clientdata
LEAF_NODE	2663:17	2663:17	17	tif
LEAF_NODE	2663:20	2663:20	17	->
LEAF_NODE	2663:22	2663:22	17	tif_clientdata
LEAF_NODE	2663:36	2663:36	15	,
ARGUMENT	2663:38	2663:38	15	module
FIELD	2663:38	2663:38	16	module
LEAF_NODE	2663:38	2663:38	17	module
LEAF_NODE	2663:44	2663:44	15	,
ARGUMENT	2664:9	2664:9	15	"Error writing SubIFD directory link"
FIELD	2664:9	2664:9	16	"Error writing SubIFD directory link"
LEAF_NODE	2664:9	2664:9	17	"Error writing SubIFD directory link"
LEAF_NODE	2664:46	2664:46	15	)
LEAF_NODE	2664:47	2664:47	13	;
JUMP_STATEMENT	2665:4	2665:14	12	return ( 0 ) ;
KEYWORD	2665:4	2665:4	13	return
LEAF_NODE	2665:4	2665:4	14	return
DESTINATION	2665:11	2665:11	13	( 0 )
EXPR	2665:11	2665:13	14	( 0 )
LEAF_NODE	2665:11	2665:11	15	(
FIELD	2665:12	2665:12	15	0
LEAF_NODE	2665:12	2665:12	16	0
LEAF_NODE	2665:13	2665:13	15	)
LEAF_NODE	2665:14	2665:14	13	;
LEAF_NODE	2666:3	2666:3	11	}
SELECTION	2672:3	2673:4	9	
KEYWORD	2672:3	2672:3	10	if
LEAF_NODE	2672:3	2672:3	11	if
LEAF_NODE	2672:6	2672:6	10	(
CONDITION	2672:7	2672:7	10	-- tif -> tif_nsubifd
EXPR	2672:7	2672:9	11	-- tif -> tif_nsubifd
LEAF_NODE	2672:7	2672:7	12	--
FIELD	2672:9	2672:14	12	tif -> tif_nsubifd
LEAF_NODE	2672:9	2672:9	13	tif
LEAF_NODE	2672:12	2672:12	13	->
LEAF_NODE	2672:14	2672:14	13	tif_nsubifd
LEAF_NODE	2672:25	2672:25	10	)
STATEMENTS	2673:4	2673:4	10	
EXPR_STATEMENT	2673:4	2673:27	11	tif -> tif_subifdoff += 8 ;
EXPR	2673:4	2673:4	12	tif -> tif_subifdoff += 8
ASSIGN	2673:4	2673:26	13	tif -> tif_subifdoff += 8
LVAL	2673:4	2673:4	14	tif -> tif_subifdoff
FIELD	2673:4	2673:9	15	tif -> tif_subifdoff
LEAF_NODE	2673:4	2673:4	16	tif
LEAF_NODE	2673:7	2673:7	16	->
LEAF_NODE	2673:9	2673:9	16	tif_subifdoff
ASSIGN_OP	2673:23	2673:23	14	+=
LEAF_NODE	2673:23	2673:23	15	+=
RVAL	2673:26	2673:26	14	8
FIELD	2673:26	2673:26	15	8
LEAF_NODE	2673:26	2673:26	16	8
LEAF_NODE	2673:27	2673:27	12	;
SELECTION	2674:3	2675:4	9	
KEYWORD	2674:3	2674:3	10	else
LEAF_NODE	2674:3	2674:3	11	else
STATEMENTS	2675:4	2675:4	10	
EXPR_STATEMENT	2675:4	2675:36	11	tif -> tif_flags &= ~TIFF_INSUBIFD ;
EXPR	2675:4	2675:4	12	tif -> tif_flags &= ~TIFF_INSUBIFD
ASSIGN	2675:4	2675:22	13	tif -> tif_flags &= ~TIFF_INSUBIFD
LVAL	2675:4	2675:4	14	tif -> tif_flags
FIELD	2675:4	2675:9	15	tif -> tif_flags
LEAF_NODE	2675:4	2675:4	16	tif
LEAF_NODE	2675:7	2675:7	16	->
LEAF_NODE	2675:9	2675:9	16	tif_flags
ASSIGN_OP	2675:19	2675:19	14	&=
LEAF_NODE	2675:19	2675:19	15	&=
RVAL	2675:22	2675:22	14	~TIFF_INSUBIFD
FIELD	2675:22	2675:22	15	~TIFF_INSUBIFD
LEAF_NODE	2675:22	2675:22	16	~TIFF_INSUBIFD
LEAF_NODE	2675:36	2675:36	12	;
JUMP_STATEMENT	2676:3	2676:13	9	return ( 1 ) ;
KEYWORD	2676:3	2676:3	10	return
LEAF_NODE	2676:3	2676:3	11	return
DESTINATION	2676:10	2676:10	10	( 1 )
EXPR	2676:10	2676:12	11	( 1 )
LEAF_NODE	2676:10	2676:10	12	(
FIELD	2676:11	2676:11	12	1
LEAF_NODE	2676:11	2676:11	13	1
LEAF_NODE	2676:12	2676:12	12	)
LEAF_NODE	2676:13	2676:13	10	;
LEAF_NODE	2677:2	2677:2	8	}
LEAF_NODE	2678:1	2678:1	5	}
SELECTION	2680:1	2681:1	3	
KEYWORD	2680:1	2680:1	4	if
LEAF_NODE	2680:1	2680:1	5	if
LEAF_NODE	2680:4	2680:4	4	(
CONDITION	2680:5	2680:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2680:5	2680:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2680:5	2680:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2680:5	2680:5	7	!
LEAF_NODE	2680:5	2680:5	8	!
LEAF_NODE	2680:6	2680:6	7	(
FIELD	2680:7	2680:12	7	tif -> tif_flags
LEAF_NODE	2680:7	2680:7	8	tif
LEAF_NODE	2680:10	2680:10	8	->
LEAF_NODE	2680:12	2680:12	8	tif_flags
LEAF_NODE	2680:21	2680:21	7	&
FIELD	2680:22	2680:22	7	TIFF_BIGTIFF
LEAF_NODE	2680:22	2680:22	8	TIFF_BIGTIFF
LEAF_NODE	2680:34	2680:34	7	)
LEAF_NODE	2680:35	2680:35	4	)
STATEMENTS	2681:1	2738:1	4	
LEAF_NODE	2681:1	2681:1	5	{
STATEMENTS	2682:2	2704:2	5	
SIMPLE_DECL	2682:2	2682:10	6	uint32 m ;
VAR_DECL	2682:2	2682:9	7	uint32 m
TYPE	2682:2	2682:2	8	uint32
TYPE_NAME	2682:2	2682:2	9	uint32
LEAF_NODE	2682:2	2682:2	10	uint32
NAME	2682:9	2682:9	8	m
LEAF_NODE	2682:9	2682:9	9	m
LEAF_NODE	2682:10	2682:10	7	;
SIMPLE_DECL	2683:2	2683:16	6	uint32 nextdir ;
VAR_DECL	2683:2	2683:9	7	uint32 nextdir
TYPE	2683:2	2683:2	8	uint32
TYPE_NAME	2683:2	2683:2	9	uint32
LEAF_NODE	2683:2	2683:2	10	uint32
NAME	2683:9	2683:9	8	nextdir
LEAF_NODE	2683:9	2683:9	9	nextdir
LEAF_NODE	2683:16	2683:16	7	;
EXPR_STATEMENT	2684:2	2684:31	6	m = ( uint32 ) ( tif -> tif_diroff ) ;
EXPR	2684:2	2684:2	7	m = ( uint32 ) ( tif -> tif_diroff )
ASSIGN	2684:2	2684:6	8	m = ( uint32 ) ( tif -> tif_diroff )
LVAL	2684:2	2684:2	9	m
FIELD	2684:2	2684:2	10	m
LEAF_NODE	2684:2	2684:2	11	m
ASSIGN_OP	2684:4	2684:4	9	=
LEAF_NODE	2684:4	2684:4	10	=
RVAL	2684:6	2684:30	9	( uint32 ) ( tif -> tif_diroff )
LEAF_NODE	2684:6	2684:6	10	(
TYPE_NAME	2684:7	2684:7	10	uint32
LEAF_NODE	2684:7	2684:7	11	uint32
LEAF_NODE	2684:13	2684:13	10	)
LEAF_NODE	2684:14	2684:14	10	(
FIELD	2684:15	2684:20	10	tif -> tif_diroff
LEAF_NODE	2684:15	2684:15	11	tif
LEAF_NODE	2684:18	2684:18	11	->
LEAF_NODE	2684:20	2684:20	11	tif_diroff
LEAF_NODE	2684:30	2684:30	10	)
LEAF_NODE	2684:31	2684:31	7	;
SELECTION	2685:2	2686:3	6	
KEYWORD	2685:2	2685:2	7	if
LEAF_NODE	2685:2	2685:2	8	if
LEAF_NODE	2685:5	2685:5	7	(
CONDITION	2685:6	2685:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	2685:6	2685:23	8	tif -> tif_flags & TIFF_SWAB
FIELD	2685:6	2685:11	9	tif -> tif_flags
LEAF_NODE	2685:6	2685:6	10	tif
LEAF_NODE	2685:9	2685:9	10	->
LEAF_NODE	2685:11	2685:11	10	tif_flags
LEAF_NODE	2685:21	2685:21	9	&
FIELD	2685:23	2685:23	9	TIFF_SWAB
LEAF_NODE	2685:23	2685:23	10	TIFF_SWAB
LEAF_NODE	2685:32	2685:32	7	)
STATEMENTS	2686:3	2686:3	7	
EXPR_STATEMENT	2686:3	2686:19	8	TIFFSwabLong ( & m ) ;
EXPR	2686:3	2686:3	9	TIFFSwabLong ( & m )
FUNCTION_CALL	2686:3	2686:18	10	TIFFSwabLong ( & m )
CALLEE	2686:3	2686:3	11	TIFFSwabLong
LEAF_NODE	2686:3	2686:3	12	TIFFSwabLong
LEAF_NODE	2686:15	2686:15	11	(
ARGUMENT	2686:16	2686:16	11	& m
UNARY_EXPR	2686:16	2686:17	12	& m
UNARY_OPERATOR	2686:16	2686:16	13	&
LEAF_NODE	2686:16	2686:16	14	&
FIELD	2686:17	2686:17	13	m
LEAF_NODE	2686:17	2686:17	14	m
LEAF_NODE	2686:18	2686:18	11	)
LEAF_NODE	2686:19	2686:19	9	;
SELECTION	2687:2	2687:48	6	
KEYWORD	2687:2	2687:2	7	if
LEAF_NODE	2687:2	2687:2	8	if
LEAF_NODE	2687:5	2687:5	7	(
CONDITION	2687:6	2687:6	7	tif -> tif_header . classic . tiff_diroff == 0
EXPR	2687:6	2687:45	8	tif -> tif_header . classic . tiff_diroff == 0
FIELD	2687:6	2687:30	9	tif -> tif_header . classic . tiff_diroff
LEAF_NODE	2687:6	2687:6	10	tif
LEAF_NODE	2687:9	2687:9	10	->
LEAF_NODE	2687:11	2687:11	10	tif_header
LEAF_NODE	2687:21	2687:21	10	.
LEAF_NODE	2687:22	2687:22	10	classic
LEAF_NODE	2687:29	2687:29	10	.
LEAF_NODE	2687:30	2687:30	10	tiff_diroff
EQ_OPERATOR	2687:42	2687:42	9	==
LEAF_NODE	2687:42	2687:42	10	==
FIELD	2687:45	2687:45	9	0
LEAF_NODE	2687:45	2687:45	10	0
LEAF_NODE	2687:46	2687:46	7	)
STATEMENTS	2687:48	2699:2	7	
LEAF_NODE	2687:48	2687:48	8	{
STATEMENTS	2691:3	2698:3	8	
EXPR_STATEMENT	2691:3	2691:65	9	tif -> tif_header . classic . tiff_diroff = ( uint32 ) tif -> tif_diroff ;
EXPR	2691:3	2691:3	10	tif -> tif_header . classic . tiff_diroff = ( uint32 ) tif -> tif_diroff
ASSIGN	2691:3	2691:41	11	tif -> tif_header . classic . tiff_diroff = ( uint32 ) tif -> tif_diroff
LVAL	2691:3	2691:3	12	tif -> tif_header . classic . tiff_diroff
FIELD	2691:3	2691:27	13	tif -> tif_header . classic . tiff_diroff
LEAF_NODE	2691:3	2691:3	14	tif
LEAF_NODE	2691:6	2691:6	14	->
LEAF_NODE	2691:8	2691:8	14	tif_header
LEAF_NODE	2691:18	2691:18	14	.
LEAF_NODE	2691:19	2691:19	14	classic
LEAF_NODE	2691:26	2691:26	14	.
LEAF_NODE	2691:27	2691:27	14	tiff_diroff
ASSIGN_OP	2691:39	2691:39	12	=
LEAF_NODE	2691:39	2691:39	13	=
RVAL	2691:41	2691:50	12	( uint32 ) tif -> tif_diroff
LEAF_NODE	2691:41	2691:41	13	(
TYPE_NAME	2691:42	2691:42	13	uint32
LEAF_NODE	2691:42	2691:42	14	uint32
LEAF_NODE	2691:48	2691:48	13	)
FIELD	2691:50	2691:55	13	tif -> tif_diroff
LEAF_NODE	2691:50	2691:50	14	tif
LEAF_NODE	2691:53	2691:53	14	->
LEAF_NODE	2691:55	2691:55	14	tif_diroff
LEAF_NODE	2691:65	2691:65	10	;
EXPR_STATEMENT	2692:3	2692:39	9	( void ) TIFFSeekFile ( tif , 4 , SEEK_SET ) ;
EXPR	2692:3	2692:10	10	( void ) TIFFSeekFile ( tif , 4 , SEEK_SET )
LEAF_NODE	2692:3	2692:3	11	(
TYPE_NAME	2692:4	2692:4	11	void
LEAF_NODE	2692:4	2692:4	12	void
LEAF_NODE	2692:8	2692:8	11	)
FUNCTION_CALL	2692:10	2692:38	11	TIFFSeekFile ( tif , 4 , SEEK_SET )
CALLEE	2692:10	2692:10	12	TIFFSeekFile
LEAF_NODE	2692:10	2692:10	13	TIFFSeekFile
LEAF_NODE	2692:22	2692:22	12	(
ARGUMENT	2692:23	2692:23	12	tif
FIELD	2692:23	2692:23	13	tif
LEAF_NODE	2692:23	2692:23	14	tif
LEAF_NODE	2692:26	2692:26	12	,
ARGUMENT	2692:27	2692:27	12	4
FIELD	2692:27	2692:27	13	4
LEAF_NODE	2692:27	2692:27	14	4
LEAF_NODE	2692:28	2692:28	12	,
ARGUMENT	2692:30	2692:30	12	SEEK_SET
FIELD	2692:30	2692:30	13	SEEK_SET
LEAF_NODE	2692:30	2692:30	14	SEEK_SET
LEAF_NODE	2692:38	2692:38	12	)
LEAF_NODE	2692:39	2692:39	10	;
SELECTION	2693:3	2693:29	9	
KEYWORD	2693:3	2693:3	10	if
LEAF_NODE	2693:3	2693:3	11	if
LEAF_NODE	2693:6	2693:6	10	(
CONDITION	2693:7	2693:7	10	! WriteOK ( tif , & m , 4 )
EXPR	2693:7	2693:7	11	! WriteOK ( tif , & m , 4 )
UNARY_EXPR	2693:7	2693:8	12	! WriteOK ( tif , & m , 4 )
UNARY_OPERATOR	2693:7	2693:7	13	!
LEAF_NODE	2693:7	2693:7	14	!
FUNCTION_CALL	2693:8	2693:26	13	WriteOK ( tif , & m , 4 )
CALLEE	2693:8	2693:8	14	WriteOK
LEAF_NODE	2693:8	2693:8	15	WriteOK
LEAF_NODE	2693:15	2693:15	14	(
ARGUMENT	2693:16	2693:16	14	tif
FIELD	2693:16	2693:16	15	tif
LEAF_NODE	2693:16	2693:16	16	tif
LEAF_NODE	2693:19	2693:19	14	,
ARGUMENT	2693:21	2693:21	14	& m
UNARY_EXPR	2693:21	2693:22	15	& m
UNARY_OPERATOR	2693:21	2693:21	16	&
LEAF_NODE	2693:21	2693:21	17	&
FIELD	2693:22	2693:22	16	m
LEAF_NODE	2693:22	2693:22	17	m
LEAF_NODE	2693:23	2693:23	14	,
ARGUMENT	2693:25	2693:25	14	4
FIELD	2693:25	2693:25	15	4
LEAF_NODE	2693:25	2693:25	16	4
LEAF_NODE	2693:26	2693:26	14	)
LEAF_NODE	2693:27	2693:27	10	)
STATEMENTS	2693:29	2697:3	10	
LEAF_NODE	2693:29	2693:29	11	{
STATEMENTS	2694:4	2696:4	11	
EXPR_STATEMENT	2694:4	2695:38	12	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing TIFF header" ) ;
EXPR	2694:4	2694:4	13	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing TIFF header" )
FUNCTION_CALL	2694:4	2695:37	14	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing TIFF header" )
CALLEE	2694:4	2694:4	15	TIFFErrorExt
LEAF_NODE	2694:4	2694:4	16	TIFFErrorExt
LEAF_NODE	2694:16	2694:16	15	(
ARGUMENT	2694:17	2694:17	15	tif -> tif_clientdata
FIELD	2694:17	2694:22	16	tif -> tif_clientdata
LEAF_NODE	2694:17	2694:17	17	tif
LEAF_NODE	2694:20	2694:20	17	->
LEAF_NODE	2694:22	2694:22	17	tif_clientdata
LEAF_NODE	2694:36	2694:36	15	,
ARGUMENT	2694:38	2694:38	15	tif -> tif_name
FIELD	2694:38	2694:43	16	tif -> tif_name
LEAF_NODE	2694:38	2694:38	17	tif
LEAF_NODE	2694:41	2694:41	17	->
LEAF_NODE	2694:43	2694:43	17	tif_name
LEAF_NODE	2694:51	2694:51	15	,
ARGUMENT	2695:10	2695:10	15	"Error writing TIFF header"
FIELD	2695:10	2695:10	16	"Error writing TIFF header"
LEAF_NODE	2695:10	2695:10	17	"Error writing TIFF header"
LEAF_NODE	2695:37	2695:37	15	)
LEAF_NODE	2695:38	2695:38	13	;
JUMP_STATEMENT	2696:4	2696:14	12	return ( 0 ) ;
KEYWORD	2696:4	2696:4	13	return
LEAF_NODE	2696:4	2696:4	14	return
DESTINATION	2696:11	2696:11	13	( 0 )
EXPR	2696:11	2696:13	14	( 0 )
LEAF_NODE	2696:11	2696:11	15	(
FIELD	2696:12	2696:12	15	0
LEAF_NODE	2696:12	2696:12	16	0
LEAF_NODE	2696:13	2696:13	15	)
LEAF_NODE	2696:14	2696:14	13	;
LEAF_NODE	2697:3	2697:3	11	}
JUMP_STATEMENT	2698:3	2698:13	9	return ( 1 ) ;
KEYWORD	2698:3	2698:3	10	return
LEAF_NODE	2698:3	2698:3	11	return
DESTINATION	2698:10	2698:10	10	( 1 )
EXPR	2698:10	2698:12	11	( 1 )
LEAF_NODE	2698:10	2698:10	12	(
FIELD	2698:11	2698:11	12	1
LEAF_NODE	2698:11	2698:11	13	1
LEAF_NODE	2698:12	2698:12	12	)
LEAF_NODE	2698:13	2698:13	10	;
LEAF_NODE	2699:2	2699:2	8	}
EXPR_STATEMENT	2703:2	2703:47	6	nextdir = tif -> tif_header . classic . tiff_diroff ;
EXPR	2703:2	2703:2	7	nextdir = tif -> tif_header . classic . tiff_diroff
ASSIGN	2703:2	2703:12	8	nextdir = tif -> tif_header . classic . tiff_diroff
LVAL	2703:2	2703:2	9	nextdir
FIELD	2703:2	2703:2	10	nextdir
LEAF_NODE	2703:2	2703:2	11	nextdir
ASSIGN_OP	2703:10	2703:10	9	=
LEAF_NODE	2703:10	2703:10	10	=
RVAL	2703:12	2703:12	9	tif -> tif_header . classic . tiff_diroff
FIELD	2703:12	2703:36	10	tif -> tif_header . classic . tiff_diroff
LEAF_NODE	2703:12	2703:12	11	tif
LEAF_NODE	2703:15	2703:15	11	->
LEAF_NODE	2703:17	2703:17	11	tif_header
LEAF_NODE	2703:27	2703:27	11	.
LEAF_NODE	2703:28	2703:28	11	classic
LEAF_NODE	2703:35	2703:35	11	.
LEAF_NODE	2703:36	2703:36	11	tiff_diroff
LEAF_NODE	2703:47	2703:47	7	;
ITERATION	2704:2	2704:11	6	
KEYWORD	2704:2	2704:2	7	while
LEAF_NODE	2704:2	2704:2	8	while
LEAF_NODE	2704:7	2704:7	7	(
CONDITION	2704:8	2704:8	7	1
EXPR	2704:8	2704:8	8	1
FIELD	2704:8	2704:8	9	1
LEAF_NODE	2704:8	2704:8	10	1
LEAF_NODE	2704:9	2704:9	7	)
STATEMENTS	2704:11	2737:2	7	
LEAF_NODE	2704:11	2704:11	8	{
STATEMENTS	2705:3	2736:3	8	
SIMPLE_DECL	2705:3	2705:18	9	uint16 dircount ;
VAR_DECL	2705:3	2705:10	10	uint16 dircount
TYPE	2705:3	2705:3	11	uint16
TYPE_NAME	2705:3	2705:3	12	uint16
LEAF_NODE	2705:3	2705:3	13	uint16
NAME	2705:10	2705:10	11	dircount
LEAF_NODE	2705:10	2705:10	12	dircount
LEAF_NODE	2705:18	2705:18	10	;
SIMPLE_DECL	2706:3	2706:21	9	uint32 nextnextdir ;
VAR_DECL	2706:3	2706:10	10	uint32 nextnextdir
TYPE	2706:3	2706:3	11	uint32
TYPE_NAME	2706:3	2706:3	12	uint32
LEAF_NODE	2706:3	2706:3	13	uint32
NAME	2706:10	2706:10	11	nextnextdir
LEAF_NODE	2706:10	2706:10	12	nextnextdir
LEAF_NODE	2706:21	2706:21	10	;
SELECTION	2708:3	2709:35	9	
KEYWORD	2708:3	2708:3	10	if
LEAF_NODE	2708:3	2708:3	11	if
LEAF_NODE	2708:6	2708:6	10	(
CONDITION	2708:7	2708:7	10	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount , 2 )
EXPR	2708:7	2708:7	11	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount , 2 )
OR	2708:7	2709:7	12	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount , 2 )
EXPR	2708:7	2708:7	13	! SeekOK ( tif , nextdir )
UNARY_EXPR	2708:7	2708:8	14	! SeekOK ( tif , nextdir )
UNARY_OPERATOR	2708:7	2708:7	15	!
LEAF_NODE	2708:7	2708:7	16	!
FUNCTION_CALL	2708:8	2708:27	15	SeekOK ( tif , nextdir )
CALLEE	2708:8	2708:8	16	SeekOK
LEAF_NODE	2708:8	2708:8	17	SeekOK
LEAF_NODE	2708:14	2708:14	16	(
ARGUMENT	2708:15	2708:15	16	tif
FIELD	2708:15	2708:15	17	tif
LEAF_NODE	2708:15	2708:15	18	tif
LEAF_NODE	2708:18	2708:18	16	,
ARGUMENT	2708:20	2708:20	16	nextdir
FIELD	2708:20	2708:20	17	nextdir
LEAF_NODE	2708:20	2708:20	18	nextdir
LEAF_NODE	2708:27	2708:27	16	)
LEAF_NODE	2708:29	2708:29	13	||
EXPR	2709:7	2709:7	13	! ReadOK ( tif , & dircount , 2 )
UNARY_EXPR	2709:7	2709:8	14	! ReadOK ( tif , & dircount , 2 )
UNARY_OPERATOR	2709:7	2709:7	15	!
LEAF_NODE	2709:7	2709:7	16	!
FUNCTION_CALL	2709:8	2709:32	15	ReadOK ( tif , & dircount , 2 )
CALLEE	2709:8	2709:8	16	ReadOK
LEAF_NODE	2709:8	2709:8	17	ReadOK
LEAF_NODE	2709:14	2709:14	16	(
ARGUMENT	2709:15	2709:15	16	tif
FIELD	2709:15	2709:15	17	tif
LEAF_NODE	2709:15	2709:15	18	tif
LEAF_NODE	2709:18	2709:18	16	,
ARGUMENT	2709:20	2709:20	16	& dircount
UNARY_EXPR	2709:20	2709:21	17	& dircount
UNARY_OPERATOR	2709:20	2709:20	18	&
LEAF_NODE	2709:20	2709:20	19	&
FIELD	2709:21	2709:21	18	dircount
LEAF_NODE	2709:21	2709:21	19	dircount
LEAF_NODE	2709:29	2709:29	16	,
ARGUMENT	2709:31	2709:31	16	2
FIELD	2709:31	2709:31	17	2
LEAF_NODE	2709:31	2709:31	18	2
LEAF_NODE	2709:32	2709:32	16	)
LEAF_NODE	2709:33	2709:33	10	)
STATEMENTS	2709:35	2713:3	10	
LEAF_NODE	2709:35	2709:35	11	{
STATEMENTS	2710:4	2712:4	11	
EXPR_STATEMENT	2710:4	2711:43	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" ) ;
EXPR	2710:4	2710:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
FUNCTION_CALL	2710:4	2711:42	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
CALLEE	2710:4	2710:4	15	TIFFErrorExt
LEAF_NODE	2710:4	2710:4	16	TIFFErrorExt
LEAF_NODE	2710:16	2710:16	15	(
ARGUMENT	2710:17	2710:17	15	tif -> tif_clientdata
FIELD	2710:17	2710:22	16	tif -> tif_clientdata
LEAF_NODE	2710:17	2710:17	17	tif
LEAF_NODE	2710:20	2710:20	17	->
LEAF_NODE	2710:22	2710:22	17	tif_clientdata
LEAF_NODE	2710:36	2710:36	15	,
ARGUMENT	2710:38	2710:38	15	module
FIELD	2710:38	2710:38	16	module
LEAF_NODE	2710:38	2710:38	17	module
LEAF_NODE	2710:44	2710:44	15	,
ARGUMENT	2711:10	2711:10	15	"Error fetching directory count"
FIELD	2711:10	2711:10	16	"Error fetching directory count"
LEAF_NODE	2711:10	2711:10	17	"Error fetching directory count"
LEAF_NODE	2711:42	2711:42	15	)
LEAF_NODE	2711:43	2711:43	13	;
JUMP_STATEMENT	2712:4	2712:14	12	return ( 0 ) ;
KEYWORD	2712:4	2712:4	13	return
LEAF_NODE	2712:4	2712:4	14	return
DESTINATION	2712:11	2712:11	13	( 0 )
EXPR	2712:11	2712:13	14	( 0 )
LEAF_NODE	2712:11	2712:11	15	(
FIELD	2712:12	2712:12	15	0
LEAF_NODE	2712:12	2712:12	16	0
LEAF_NODE	2712:13	2712:13	15	)
LEAF_NODE	2712:14	2712:14	13	;
LEAF_NODE	2713:3	2713:3	11	}
SELECTION	2714:3	2715:4	9	
KEYWORD	2714:3	2714:3	10	if
LEAF_NODE	2714:3	2714:3	11	if
LEAF_NODE	2714:6	2714:6	10	(
CONDITION	2714:7	2714:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	2714:7	2714:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	2714:7	2714:12	12	tif -> tif_flags
LEAF_NODE	2714:7	2714:7	13	tif
LEAF_NODE	2714:10	2714:10	13	->
LEAF_NODE	2714:12	2714:12	13	tif_flags
LEAF_NODE	2714:22	2714:22	12	&
FIELD	2714:24	2714:24	12	TIFF_SWAB
LEAF_NODE	2714:24	2714:24	13	TIFF_SWAB
LEAF_NODE	2714:33	2714:33	10	)
STATEMENTS	2715:4	2715:4	10	
EXPR_STATEMENT	2715:4	2715:28	11	TIFFSwabShort ( & dircount ) ;
EXPR	2715:4	2715:4	12	TIFFSwabShort ( & dircount )
FUNCTION_CALL	2715:4	2715:27	13	TIFFSwabShort ( & dircount )
CALLEE	2715:4	2715:4	14	TIFFSwabShort
LEAF_NODE	2715:4	2715:4	15	TIFFSwabShort
LEAF_NODE	2715:17	2715:17	14	(
ARGUMENT	2715:18	2715:18	14	& dircount
UNARY_EXPR	2715:18	2715:19	15	& dircount
UNARY_OPERATOR	2715:18	2715:18	16	&
LEAF_NODE	2715:18	2715:18	17	&
FIELD	2715:19	2715:19	16	dircount
LEAF_NODE	2715:19	2715:19	17	dircount
LEAF_NODE	2715:27	2715:27	14	)
LEAF_NODE	2715:28	2715:28	12	;
EXPR_STATEMENT	2716:3	2717:39	9	( void ) TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET ) ;
EXPR	2716:3	2716:10	10	( void ) TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET )
LEAF_NODE	2716:3	2716:3	11	(
TYPE_NAME	2716:4	2716:4	11	void
LEAF_NODE	2716:4	2716:4	12	void
LEAF_NODE	2716:8	2716:8	11	)
FUNCTION_CALL	2716:10	2717:38	11	TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET )
CALLEE	2716:10	2716:10	12	TIFFSeekFile
LEAF_NODE	2716:10	2716:10	13	TIFFSeekFile
LEAF_NODE	2716:22	2716:22	12	(
ARGUMENT	2716:23	2716:23	12	tif
FIELD	2716:23	2716:23	13	tif
LEAF_NODE	2716:23	2716:23	14	tif
LEAF_NODE	2716:26	2716:26	12	,
ARGUMENT	2717:7	2717:26	12	nextdir + 2 + dircount * 12
FIELD	2717:7	2717:7	13	nextdir
LEAF_NODE	2717:7	2717:7	14	nextdir
LEAF_NODE	2717:14	2717:14	13	+
FIELD	2717:15	2717:15	13	2
LEAF_NODE	2717:15	2717:15	14	2
LEAF_NODE	2717:16	2717:16	13	+
FIELD	2717:17	2717:17	13	dircount
LEAF_NODE	2717:17	2717:17	14	dircount
LEAF_NODE	2717:25	2717:25	13	*
FIELD	2717:26	2717:26	13	12
LEAF_NODE	2717:26	2717:26	14	12
LEAF_NODE	2717:28	2717:28	12	,
ARGUMENT	2717:30	2717:30	12	SEEK_SET
FIELD	2717:30	2717:30	13	SEEK_SET
LEAF_NODE	2717:30	2717:30	14	SEEK_SET
LEAF_NODE	2717:38	2717:38	12	)
LEAF_NODE	2717:39	2717:39	10	;
SELECTION	2718:3	2718:38	9	
KEYWORD	2718:3	2718:3	10	if
LEAF_NODE	2718:3	2718:3	11	if
LEAF_NODE	2718:6	2718:6	10	(
CONDITION	2718:7	2718:7	10	! ReadOK ( tif , & nextnextdir , 4 )
EXPR	2718:7	2718:7	11	! ReadOK ( tif , & nextnextdir , 4 )
UNARY_EXPR	2718:7	2718:8	12	! ReadOK ( tif , & nextnextdir , 4 )
UNARY_OPERATOR	2718:7	2718:7	13	!
LEAF_NODE	2718:7	2718:7	14	!
FUNCTION_CALL	2718:8	2718:35	13	ReadOK ( tif , & nextnextdir , 4 )
CALLEE	2718:8	2718:8	14	ReadOK
LEAF_NODE	2718:8	2718:8	15	ReadOK
LEAF_NODE	2718:14	2718:14	14	(
ARGUMENT	2718:15	2718:15	14	tif
FIELD	2718:15	2718:15	15	tif
LEAF_NODE	2718:15	2718:15	16	tif
LEAF_NODE	2718:18	2718:18	14	,
ARGUMENT	2718:20	2718:20	14	& nextnextdir
UNARY_EXPR	2718:20	2718:21	15	& nextnextdir
UNARY_OPERATOR	2718:20	2718:20	16	&
LEAF_NODE	2718:20	2718:20	17	&
FIELD	2718:21	2718:21	16	nextnextdir
LEAF_NODE	2718:21	2718:21	17	nextnextdir
LEAF_NODE	2718:32	2718:32	14	,
ARGUMENT	2718:34	2718:34	14	4
FIELD	2718:34	2718:34	15	4
LEAF_NODE	2718:34	2718:34	16	4
LEAF_NODE	2718:35	2718:35	14	)
LEAF_NODE	2718:36	2718:36	10	)
STATEMENTS	2718:38	2722:3	10	
LEAF_NODE	2718:38	2718:38	11	{
STATEMENTS	2719:4	2721:4	11	
EXPR_STATEMENT	2719:4	2720:42	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" ) ;
EXPR	2719:4	2719:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
FUNCTION_CALL	2719:4	2720:41	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
CALLEE	2719:4	2719:4	15	TIFFErrorExt
LEAF_NODE	2719:4	2719:4	16	TIFFErrorExt
LEAF_NODE	2719:16	2719:16	15	(
ARGUMENT	2719:17	2719:17	15	tif -> tif_clientdata
FIELD	2719:17	2719:22	16	tif -> tif_clientdata
LEAF_NODE	2719:17	2719:17	17	tif
LEAF_NODE	2719:20	2719:20	17	->
LEAF_NODE	2719:22	2719:22	17	tif_clientdata
LEAF_NODE	2719:36	2719:36	15	,
ARGUMENT	2719:38	2719:38	15	module
FIELD	2719:38	2719:38	16	module
LEAF_NODE	2719:38	2719:38	17	module
LEAF_NODE	2719:44	2719:44	15	,
ARGUMENT	2720:10	2720:10	15	"Error fetching directory link"
FIELD	2720:10	2720:10	16	"Error fetching directory link"
LEAF_NODE	2720:10	2720:10	17	"Error fetching directory link"
LEAF_NODE	2720:41	2720:41	15	)
LEAF_NODE	2720:42	2720:42	13	;
JUMP_STATEMENT	2721:4	2721:14	12	return ( 0 ) ;
KEYWORD	2721:4	2721:4	13	return
LEAF_NODE	2721:4	2721:4	14	return
DESTINATION	2721:11	2721:11	13	( 0 )
EXPR	2721:11	2721:13	14	( 0 )
LEAF_NODE	2721:11	2721:11	15	(
FIELD	2721:12	2721:12	15	0
LEAF_NODE	2721:12	2721:12	16	0
LEAF_NODE	2721:13	2721:13	15	)
LEAF_NODE	2721:14	2721:14	13	;
LEAF_NODE	2722:3	2722:3	11	}
SELECTION	2723:3	2724:4	9	
KEYWORD	2723:3	2723:3	10	if
LEAF_NODE	2723:3	2723:3	11	if
LEAF_NODE	2723:6	2723:6	10	(
CONDITION	2723:7	2723:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	2723:7	2723:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	2723:7	2723:12	12	tif -> tif_flags
LEAF_NODE	2723:7	2723:7	13	tif
LEAF_NODE	2723:10	2723:10	13	->
LEAF_NODE	2723:12	2723:12	13	tif_flags
LEAF_NODE	2723:22	2723:22	12	&
FIELD	2723:24	2723:24	12	TIFF_SWAB
LEAF_NODE	2723:24	2723:24	13	TIFF_SWAB
LEAF_NODE	2723:33	2723:33	10	)
STATEMENTS	2724:4	2724:4	10	
EXPR_STATEMENT	2724:4	2724:30	11	TIFFSwabLong ( & nextnextdir ) ;
EXPR	2724:4	2724:4	12	TIFFSwabLong ( & nextnextdir )
FUNCTION_CALL	2724:4	2724:29	13	TIFFSwabLong ( & nextnextdir )
CALLEE	2724:4	2724:4	14	TIFFSwabLong
LEAF_NODE	2724:4	2724:4	15	TIFFSwabLong
LEAF_NODE	2724:16	2724:16	14	(
ARGUMENT	2724:17	2724:17	14	& nextnextdir
UNARY_EXPR	2724:17	2724:18	15	& nextnextdir
UNARY_OPERATOR	2724:17	2724:17	16	&
LEAF_NODE	2724:17	2724:17	17	&
FIELD	2724:18	2724:18	16	nextnextdir
LEAF_NODE	2724:18	2724:18	17	nextnextdir
LEAF_NODE	2724:29	2724:29	14	)
LEAF_NODE	2724:30	2724:30	12	;
SELECTION	2725:3	2726:3	9	
KEYWORD	2725:3	2725:3	10	if
LEAF_NODE	2725:3	2725:3	11	if
LEAF_NODE	2725:6	2725:6	10	(
CONDITION	2725:7	2725:7	10	nextnextdir == 0
EXPR	2725:7	2725:20	11	nextnextdir == 0
FIELD	2725:7	2725:7	12	nextnextdir
LEAF_NODE	2725:7	2725:7	13	nextnextdir
EQ_OPERATOR	2725:18	2725:18	12	==
LEAF_NODE	2725:18	2725:18	13	==
FIELD	2725:20	2725:20	12	0
LEAF_NODE	2725:20	2725:20	13	0
LEAF_NODE	2725:21	2725:21	10	)
STATEMENTS	2726:3	2735:3	10	
LEAF_NODE	2726:3	2726:3	11	{
STATEMENTS	2727:4	2734:4	11	
EXPR_STATEMENT	2727:4	2728:40	12	( void ) TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET ) ;
EXPR	2727:4	2727:11	13	( void ) TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET )
LEAF_NODE	2727:4	2727:4	14	(
TYPE_NAME	2727:5	2727:5	14	void
LEAF_NODE	2727:5	2727:5	15	void
LEAF_NODE	2727:9	2727:9	14	)
FUNCTION_CALL	2727:11	2728:39	14	TIFFSeekFile ( tif , nextdir + 2 + dircount * 12 , SEEK_SET )
CALLEE	2727:11	2727:11	15	TIFFSeekFile
LEAF_NODE	2727:11	2727:11	16	TIFFSeekFile
LEAF_NODE	2727:23	2727:23	15	(
ARGUMENT	2727:24	2727:24	15	tif
FIELD	2727:24	2727:24	16	tif
LEAF_NODE	2727:24	2727:24	17	tif
LEAF_NODE	2727:27	2727:27	15	,
ARGUMENT	2728:8	2728:27	15	nextdir + 2 + dircount * 12
FIELD	2728:8	2728:8	16	nextdir
LEAF_NODE	2728:8	2728:8	17	nextdir
LEAF_NODE	2728:15	2728:15	16	+
FIELD	2728:16	2728:16	16	2
LEAF_NODE	2728:16	2728:16	17	2
LEAF_NODE	2728:17	2728:17	16	+
FIELD	2728:18	2728:18	16	dircount
LEAF_NODE	2728:18	2728:18	17	dircount
LEAF_NODE	2728:26	2728:26	16	*
FIELD	2728:27	2728:27	16	12
LEAF_NODE	2728:27	2728:27	17	12
LEAF_NODE	2728:29	2728:29	15	,
ARGUMENT	2728:31	2728:31	15	SEEK_SET
FIELD	2728:31	2728:31	16	SEEK_SET
LEAF_NODE	2728:31	2728:31	17	SEEK_SET
LEAF_NODE	2728:39	2728:39	15	)
LEAF_NODE	2728:40	2728:40	13	;
SELECTION	2729:4	2729:30	12	
KEYWORD	2729:4	2729:4	13	if
LEAF_NODE	2729:4	2729:4	14	if
LEAF_NODE	2729:7	2729:7	13	(
CONDITION	2729:8	2729:8	13	! WriteOK ( tif , & m , 4 )
EXPR	2729:8	2729:8	14	! WriteOK ( tif , & m , 4 )
UNARY_EXPR	2729:8	2729:9	15	! WriteOK ( tif , & m , 4 )
UNARY_OPERATOR	2729:8	2729:8	16	!
LEAF_NODE	2729:8	2729:8	17	!
FUNCTION_CALL	2729:9	2729:27	16	WriteOK ( tif , & m , 4 )
CALLEE	2729:9	2729:9	17	WriteOK
LEAF_NODE	2729:9	2729:9	18	WriteOK
LEAF_NODE	2729:16	2729:16	17	(
ARGUMENT	2729:17	2729:17	17	tif
FIELD	2729:17	2729:17	18	tif
LEAF_NODE	2729:17	2729:17	19	tif
LEAF_NODE	2729:20	2729:20	17	,
ARGUMENT	2729:22	2729:22	17	& m
UNARY_EXPR	2729:22	2729:23	18	& m
UNARY_OPERATOR	2729:22	2729:22	19	&
LEAF_NODE	2729:22	2729:22	20	&
FIELD	2729:23	2729:23	19	m
LEAF_NODE	2729:23	2729:23	20	m
LEAF_NODE	2729:24	2729:24	17	,
ARGUMENT	2729:26	2729:26	17	4
FIELD	2729:26	2729:26	18	4
LEAF_NODE	2729:26	2729:26	19	4
LEAF_NODE	2729:27	2729:27	17	)
LEAF_NODE	2729:28	2729:28	13	)
STATEMENTS	2729:30	2733:4	13	
LEAF_NODE	2729:30	2729:30	14	{
STATEMENTS	2730:5	2732:5	14	
EXPR_STATEMENT	2730:5	2731:41	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" ) ;
EXPR	2730:5	2730:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
FUNCTION_CALL	2730:5	2731:40	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
CALLEE	2730:5	2730:5	18	TIFFErrorExt
LEAF_NODE	2730:5	2730:5	19	TIFFErrorExt
LEAF_NODE	2730:17	2730:17	18	(
ARGUMENT	2730:18	2730:18	18	tif -> tif_clientdata
FIELD	2730:18	2730:23	19	tif -> tif_clientdata
LEAF_NODE	2730:18	2730:18	20	tif
LEAF_NODE	2730:21	2730:21	20	->
LEAF_NODE	2730:23	2730:23	20	tif_clientdata
LEAF_NODE	2730:37	2730:37	18	,
ARGUMENT	2730:39	2730:39	18	module
FIELD	2730:39	2730:39	19	module
LEAF_NODE	2730:39	2730:39	20	module
LEAF_NODE	2730:45	2730:45	18	,
ARGUMENT	2731:10	2731:10	18	"Error writing directory link"
FIELD	2731:10	2731:10	19	"Error writing directory link"
LEAF_NODE	2731:10	2731:10	20	"Error writing directory link"
LEAF_NODE	2731:40	2731:40	18	)
LEAF_NODE	2731:41	2731:41	16	;
JUMP_STATEMENT	2732:5	2732:15	15	return ( 0 ) ;
KEYWORD	2732:5	2732:5	16	return
LEAF_NODE	2732:5	2732:5	17	return
DESTINATION	2732:12	2732:12	16	( 0 )
EXPR	2732:12	2732:14	17	( 0 )
LEAF_NODE	2732:12	2732:12	18	(
FIELD	2732:13	2732:13	18	0
LEAF_NODE	2732:13	2732:13	19	0
LEAF_NODE	2732:14	2732:14	18	)
LEAF_NODE	2732:15	2732:15	16	;
LEAF_NODE	2733:4	2733:4	14	}
JUMP_STATEMENT	2734:4	2734:9	12	break DESTINATION ;
KEYWORD	2734:4	2734:4	13	break
LEAF_NODE	2734:4	2734:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2734:9	2734:9	13	;
LEAF_NODE	2735:3	2735:3	11	}
EXPR_STATEMENT	2736:3	2736:22	9	nextdir = nextnextdir ;
EXPR	2736:3	2736:3	10	nextdir = nextnextdir
ASSIGN	2736:3	2736:11	11	nextdir = nextnextdir
LVAL	2736:3	2736:3	12	nextdir
FIELD	2736:3	2736:3	13	nextdir
LEAF_NODE	2736:3	2736:3	14	nextdir
ASSIGN_OP	2736:10	2736:10	12	=
LEAF_NODE	2736:10	2736:10	13	=
RVAL	2736:11	2736:11	12	nextnextdir
FIELD	2736:11	2736:11	13	nextnextdir
LEAF_NODE	2736:11	2736:11	14	nextnextdir
LEAF_NODE	2736:22	2736:22	10	;
LEAF_NODE	2737:2	2737:2	8	}
LEAF_NODE	2738:1	2738:1	5	}
SELECTION	2739:1	2740:1	3	
KEYWORD	2739:1	2739:1	4	else
LEAF_NODE	2739:1	2739:1	5	else
STATEMENTS	2740:1	2805:1	4	
LEAF_NODE	2740:1	2740:1	5	{
STATEMENTS	2741:2	2763:2	5	
SIMPLE_DECL	2741:2	2741:10	6	uint64 m ;
VAR_DECL	2741:2	2741:9	7	uint64 m
TYPE	2741:2	2741:2	8	uint64
TYPE_NAME	2741:2	2741:2	9	uint64
LEAF_NODE	2741:2	2741:2	10	uint64
NAME	2741:9	2741:9	8	m
LEAF_NODE	2741:9	2741:9	9	m
LEAF_NODE	2741:10	2741:10	7	;
SIMPLE_DECL	2742:2	2742:16	6	uint64 nextdir ;
VAR_DECL	2742:2	2742:9	7	uint64 nextdir
TYPE	2742:2	2742:2	8	uint64
TYPE_NAME	2742:2	2742:2	9	uint64
LEAF_NODE	2742:2	2742:2	10	uint64
NAME	2742:9	2742:9	8	nextdir
LEAF_NODE	2742:9	2742:9	9	nextdir
LEAF_NODE	2742:16	2742:16	7	;
EXPR_STATEMENT	2743:2	2743:21	6	m = tif -> tif_diroff ;
EXPR	2743:2	2743:2	7	m = tif -> tif_diroff
ASSIGN	2743:2	2743:6	8	m = tif -> tif_diroff
LVAL	2743:2	2743:2	9	m
FIELD	2743:2	2743:2	10	m
LEAF_NODE	2743:2	2743:2	11	m
ASSIGN_OP	2743:4	2743:4	9	=
LEAF_NODE	2743:4	2743:4	10	=
RVAL	2743:6	2743:6	9	tif -> tif_diroff
FIELD	2743:6	2743:11	10	tif -> tif_diroff
LEAF_NODE	2743:6	2743:6	11	tif
LEAF_NODE	2743:9	2743:9	11	->
LEAF_NODE	2743:11	2743:11	11	tif_diroff
LEAF_NODE	2743:21	2743:21	7	;
SELECTION	2744:2	2745:3	6	
KEYWORD	2744:2	2744:2	7	if
LEAF_NODE	2744:2	2744:2	8	if
LEAF_NODE	2744:5	2744:5	7	(
CONDITION	2744:6	2744:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	2744:6	2744:23	8	tif -> tif_flags & TIFF_SWAB
FIELD	2744:6	2744:11	9	tif -> tif_flags
LEAF_NODE	2744:6	2744:6	10	tif
LEAF_NODE	2744:9	2744:9	10	->
LEAF_NODE	2744:11	2744:11	10	tif_flags
LEAF_NODE	2744:21	2744:21	9	&
FIELD	2744:23	2744:23	9	TIFF_SWAB
LEAF_NODE	2744:23	2744:23	10	TIFF_SWAB
LEAF_NODE	2744:32	2744:32	7	)
STATEMENTS	2745:3	2745:3	7	
EXPR_STATEMENT	2745:3	2745:20	8	TIFFSwabLong8 ( & m ) ;
EXPR	2745:3	2745:3	9	TIFFSwabLong8 ( & m )
FUNCTION_CALL	2745:3	2745:19	10	TIFFSwabLong8 ( & m )
CALLEE	2745:3	2745:3	11	TIFFSwabLong8
LEAF_NODE	2745:3	2745:3	12	TIFFSwabLong8
LEAF_NODE	2745:16	2745:16	11	(
ARGUMENT	2745:17	2745:17	11	& m
UNARY_EXPR	2745:17	2745:18	12	& m
UNARY_OPERATOR	2745:17	2745:17	13	&
LEAF_NODE	2745:17	2745:17	14	&
FIELD	2745:18	2745:18	13	m
LEAF_NODE	2745:18	2745:18	14	m
LEAF_NODE	2745:19	2745:19	11	)
LEAF_NODE	2745:20	2745:20	9	;
SELECTION	2746:2	2746:44	6	
KEYWORD	2746:2	2746:2	7	if
LEAF_NODE	2746:2	2746:2	8	if
LEAF_NODE	2746:5	2746:5	7	(
CONDITION	2746:6	2746:6	7	tif -> tif_header . big . tiff_diroff == 0
EXPR	2746:6	2746:41	8	tif -> tif_header . big . tiff_diroff == 0
FIELD	2746:6	2746:26	9	tif -> tif_header . big . tiff_diroff
LEAF_NODE	2746:6	2746:6	10	tif
LEAF_NODE	2746:9	2746:9	10	->
LEAF_NODE	2746:11	2746:11	10	tif_header
LEAF_NODE	2746:21	2746:21	10	.
LEAF_NODE	2746:22	2746:22	10	big
LEAF_NODE	2746:25	2746:25	10	.
LEAF_NODE	2746:26	2746:26	10	tiff_diroff
EQ_OPERATOR	2746:38	2746:38	9	==
LEAF_NODE	2746:38	2746:38	10	==
FIELD	2746:41	2746:41	9	0
LEAF_NODE	2746:41	2746:41	10	0
LEAF_NODE	2746:42	2746:42	7	)
STATEMENTS	2746:44	2758:2	7	
LEAF_NODE	2746:44	2746:44	8	{
STATEMENTS	2750:3	2757:3	8	
EXPR_STATEMENT	2750:3	2750:52	9	tif -> tif_header . big . tiff_diroff = tif -> tif_diroff ;
EXPR	2750:3	2750:3	10	tif -> tif_header . big . tiff_diroff = tif -> tif_diroff
ASSIGN	2750:3	2750:37	11	tif -> tif_header . big . tiff_diroff = tif -> tif_diroff
LVAL	2750:3	2750:3	12	tif -> tif_header . big . tiff_diroff
FIELD	2750:3	2750:23	13	tif -> tif_header . big . tiff_diroff
LEAF_NODE	2750:3	2750:3	14	tif
LEAF_NODE	2750:6	2750:6	14	->
LEAF_NODE	2750:8	2750:8	14	tif_header
LEAF_NODE	2750:18	2750:18	14	.
LEAF_NODE	2750:19	2750:19	14	big
LEAF_NODE	2750:22	2750:22	14	.
LEAF_NODE	2750:23	2750:23	14	tiff_diroff
ASSIGN_OP	2750:35	2750:35	12	=
LEAF_NODE	2750:35	2750:35	13	=
RVAL	2750:37	2750:37	12	tif -> tif_diroff
FIELD	2750:37	2750:42	13	tif -> tif_diroff
LEAF_NODE	2750:37	2750:37	14	tif
LEAF_NODE	2750:40	2750:40	14	->
LEAF_NODE	2750:42	2750:42	14	tif_diroff
LEAF_NODE	2750:52	2750:52	10	;
EXPR_STATEMENT	2751:3	2751:39	9	( void ) TIFFSeekFile ( tif , 8 , SEEK_SET ) ;
EXPR	2751:3	2751:10	10	( void ) TIFFSeekFile ( tif , 8 , SEEK_SET )
LEAF_NODE	2751:3	2751:3	11	(
TYPE_NAME	2751:4	2751:4	11	void
LEAF_NODE	2751:4	2751:4	12	void
LEAF_NODE	2751:8	2751:8	11	)
FUNCTION_CALL	2751:10	2751:38	11	TIFFSeekFile ( tif , 8 , SEEK_SET )
CALLEE	2751:10	2751:10	12	TIFFSeekFile
LEAF_NODE	2751:10	2751:10	13	TIFFSeekFile
LEAF_NODE	2751:22	2751:22	12	(
ARGUMENT	2751:23	2751:23	12	tif
FIELD	2751:23	2751:23	13	tif
LEAF_NODE	2751:23	2751:23	14	tif
LEAF_NODE	2751:26	2751:26	12	,
ARGUMENT	2751:27	2751:27	12	8
FIELD	2751:27	2751:27	13	8
LEAF_NODE	2751:27	2751:27	14	8
LEAF_NODE	2751:28	2751:28	12	,
ARGUMENT	2751:30	2751:30	12	SEEK_SET
FIELD	2751:30	2751:30	13	SEEK_SET
LEAF_NODE	2751:30	2751:30	14	SEEK_SET
LEAF_NODE	2751:38	2751:38	12	)
LEAF_NODE	2751:39	2751:39	10	;
SELECTION	2752:3	2752:29	9	
KEYWORD	2752:3	2752:3	10	if
LEAF_NODE	2752:3	2752:3	11	if
LEAF_NODE	2752:6	2752:6	10	(
CONDITION	2752:7	2752:7	10	! WriteOK ( tif , & m , 8 )
EXPR	2752:7	2752:7	11	! WriteOK ( tif , & m , 8 )
UNARY_EXPR	2752:7	2752:8	12	! WriteOK ( tif , & m , 8 )
UNARY_OPERATOR	2752:7	2752:7	13	!
LEAF_NODE	2752:7	2752:7	14	!
FUNCTION_CALL	2752:8	2752:26	13	WriteOK ( tif , & m , 8 )
CALLEE	2752:8	2752:8	14	WriteOK
LEAF_NODE	2752:8	2752:8	15	WriteOK
LEAF_NODE	2752:15	2752:15	14	(
ARGUMENT	2752:16	2752:16	14	tif
FIELD	2752:16	2752:16	15	tif
LEAF_NODE	2752:16	2752:16	16	tif
LEAF_NODE	2752:19	2752:19	14	,
ARGUMENT	2752:21	2752:21	14	& m
UNARY_EXPR	2752:21	2752:22	15	& m
UNARY_OPERATOR	2752:21	2752:21	16	&
LEAF_NODE	2752:21	2752:21	17	&
FIELD	2752:22	2752:22	16	m
LEAF_NODE	2752:22	2752:22	17	m
LEAF_NODE	2752:23	2752:23	14	,
ARGUMENT	2752:25	2752:25	14	8
FIELD	2752:25	2752:25	15	8
LEAF_NODE	2752:25	2752:25	16	8
LEAF_NODE	2752:26	2752:26	14	)
LEAF_NODE	2752:27	2752:27	10	)
STATEMENTS	2752:29	2756:3	10	
LEAF_NODE	2752:29	2752:29	11	{
STATEMENTS	2753:4	2755:4	11	
EXPR_STATEMENT	2753:4	2754:38	12	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing TIFF header" ) ;
EXPR	2753:4	2753:4	13	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing TIFF header" )
FUNCTION_CALL	2753:4	2754:37	14	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing TIFF header" )
CALLEE	2753:4	2753:4	15	TIFFErrorExt
LEAF_NODE	2753:4	2753:4	16	TIFFErrorExt
LEAF_NODE	2753:16	2753:16	15	(
ARGUMENT	2753:17	2753:17	15	tif -> tif_clientdata
FIELD	2753:17	2753:22	16	tif -> tif_clientdata
LEAF_NODE	2753:17	2753:17	17	tif
LEAF_NODE	2753:20	2753:20	17	->
LEAF_NODE	2753:22	2753:22	17	tif_clientdata
LEAF_NODE	2753:36	2753:36	15	,
ARGUMENT	2753:38	2753:38	15	tif -> tif_name
FIELD	2753:38	2753:43	16	tif -> tif_name
LEAF_NODE	2753:38	2753:38	17	tif
LEAF_NODE	2753:41	2753:41	17	->
LEAF_NODE	2753:43	2753:43	17	tif_name
LEAF_NODE	2753:51	2753:51	15	,
ARGUMENT	2754:10	2754:10	15	"Error writing TIFF header"
FIELD	2754:10	2754:10	16	"Error writing TIFF header"
LEAF_NODE	2754:10	2754:10	17	"Error writing TIFF header"
LEAF_NODE	2754:37	2754:37	15	)
LEAF_NODE	2754:38	2754:38	13	;
JUMP_STATEMENT	2755:4	2755:14	12	return ( 0 ) ;
KEYWORD	2755:4	2755:4	13	return
LEAF_NODE	2755:4	2755:4	14	return
DESTINATION	2755:11	2755:11	13	( 0 )
EXPR	2755:11	2755:13	14	( 0 )
LEAF_NODE	2755:11	2755:11	15	(
FIELD	2755:12	2755:12	15	0
LEAF_NODE	2755:12	2755:12	16	0
LEAF_NODE	2755:13	2755:13	15	)
LEAF_NODE	2755:14	2755:14	13	;
LEAF_NODE	2756:3	2756:3	11	}
JUMP_STATEMENT	2757:3	2757:13	9	return ( 1 ) ;
KEYWORD	2757:3	2757:3	10	return
LEAF_NODE	2757:3	2757:3	11	return
DESTINATION	2757:10	2757:10	10	( 1 )
EXPR	2757:10	2757:12	11	( 1 )
LEAF_NODE	2757:10	2757:10	12	(
FIELD	2757:11	2757:11	12	1
LEAF_NODE	2757:11	2757:11	13	1
LEAF_NODE	2757:12	2757:12	12	)
LEAF_NODE	2757:13	2757:13	10	;
LEAF_NODE	2758:2	2758:2	8	}
EXPR_STATEMENT	2762:2	2762:43	6	nextdir = tif -> tif_header . big . tiff_diroff ;
EXPR	2762:2	2762:2	7	nextdir = tif -> tif_header . big . tiff_diroff
ASSIGN	2762:2	2762:12	8	nextdir = tif -> tif_header . big . tiff_diroff
LVAL	2762:2	2762:2	9	nextdir
FIELD	2762:2	2762:2	10	nextdir
LEAF_NODE	2762:2	2762:2	11	nextdir
ASSIGN_OP	2762:10	2762:10	9	=
LEAF_NODE	2762:10	2762:10	10	=
RVAL	2762:12	2762:12	9	tif -> tif_header . big . tiff_diroff
FIELD	2762:12	2762:32	10	tif -> tif_header . big . tiff_diroff
LEAF_NODE	2762:12	2762:12	11	tif
LEAF_NODE	2762:15	2762:15	11	->
LEAF_NODE	2762:17	2762:17	11	tif_header
LEAF_NODE	2762:27	2762:27	11	.
LEAF_NODE	2762:28	2762:28	11	big
LEAF_NODE	2762:31	2762:31	11	.
LEAF_NODE	2762:32	2762:32	11	tiff_diroff
LEAF_NODE	2762:43	2762:43	7	;
ITERATION	2763:2	2763:11	6	
KEYWORD	2763:2	2763:2	7	while
LEAF_NODE	2763:2	2763:2	8	while
LEAF_NODE	2763:7	2763:7	7	(
CONDITION	2763:8	2763:8	7	1
EXPR	2763:8	2763:8	8	1
FIELD	2763:8	2763:8	9	1
LEAF_NODE	2763:8	2763:8	10	1
LEAF_NODE	2763:9	2763:9	7	)
STATEMENTS	2763:11	2804:2	7	
LEAF_NODE	2763:11	2763:11	8	{
STATEMENTS	2764:3	2803:3	8	
SIMPLE_DECL	2764:3	2764:20	9	uint64 dircount64 ;
VAR_DECL	2764:3	2764:10	10	uint64 dircount64
TYPE	2764:3	2764:3	11	uint64
TYPE_NAME	2764:3	2764:3	12	uint64
LEAF_NODE	2764:3	2764:3	13	uint64
NAME	2764:10	2764:10	11	dircount64
LEAF_NODE	2764:10	2764:10	12	dircount64
LEAF_NODE	2764:20	2764:20	10	;
SIMPLE_DECL	2765:3	2765:18	9	uint16 dircount ;
VAR_DECL	2765:3	2765:10	10	uint16 dircount
TYPE	2765:3	2765:3	11	uint16
TYPE_NAME	2765:3	2765:3	12	uint16
LEAF_NODE	2765:3	2765:3	13	uint16
NAME	2765:10	2765:10	11	dircount
LEAF_NODE	2765:10	2765:10	12	dircount
LEAF_NODE	2765:18	2765:18	10	;
SIMPLE_DECL	2766:3	2766:21	9	uint64 nextnextdir ;
VAR_DECL	2766:3	2766:10	10	uint64 nextnextdir
TYPE	2766:3	2766:3	11	uint64
TYPE_NAME	2766:3	2766:3	12	uint64
LEAF_NODE	2766:3	2766:3	13	uint64
NAME	2766:10	2766:10	11	nextnextdir
LEAF_NODE	2766:10	2766:10	12	nextnextdir
LEAF_NODE	2766:21	2766:21	10	;
SELECTION	2768:3	2769:37	9	
KEYWORD	2768:3	2768:3	10	if
LEAF_NODE	2768:3	2768:3	11	if
LEAF_NODE	2768:6	2768:6	10	(
CONDITION	2768:7	2768:7	10	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount64 , 8 )
EXPR	2768:7	2768:7	11	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount64 , 8 )
OR	2768:7	2769:7	12	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount64 , 8 )
EXPR	2768:7	2768:7	13	! SeekOK ( tif , nextdir )
UNARY_EXPR	2768:7	2768:8	14	! SeekOK ( tif , nextdir )
UNARY_OPERATOR	2768:7	2768:7	15	!
LEAF_NODE	2768:7	2768:7	16	!
FUNCTION_CALL	2768:8	2768:27	15	SeekOK ( tif , nextdir )
CALLEE	2768:8	2768:8	16	SeekOK
LEAF_NODE	2768:8	2768:8	17	SeekOK
LEAF_NODE	2768:14	2768:14	16	(
ARGUMENT	2768:15	2768:15	16	tif
FIELD	2768:15	2768:15	17	tif
LEAF_NODE	2768:15	2768:15	18	tif
LEAF_NODE	2768:18	2768:18	16	,
ARGUMENT	2768:20	2768:20	16	nextdir
FIELD	2768:20	2768:20	17	nextdir
LEAF_NODE	2768:20	2768:20	18	nextdir
LEAF_NODE	2768:27	2768:27	16	)
LEAF_NODE	2768:29	2768:29	13	||
EXPR	2769:7	2769:7	13	! ReadOK ( tif , & dircount64 , 8 )
UNARY_EXPR	2769:7	2769:8	14	! ReadOK ( tif , & dircount64 , 8 )
UNARY_OPERATOR	2769:7	2769:7	15	!
LEAF_NODE	2769:7	2769:7	16	!
FUNCTION_CALL	2769:8	2769:34	15	ReadOK ( tif , & dircount64 , 8 )
CALLEE	2769:8	2769:8	16	ReadOK
LEAF_NODE	2769:8	2769:8	17	ReadOK
LEAF_NODE	2769:14	2769:14	16	(
ARGUMENT	2769:15	2769:15	16	tif
FIELD	2769:15	2769:15	17	tif
LEAF_NODE	2769:15	2769:15	18	tif
LEAF_NODE	2769:18	2769:18	16	,
ARGUMENT	2769:20	2769:20	16	& dircount64
UNARY_EXPR	2769:20	2769:21	17	& dircount64
UNARY_OPERATOR	2769:20	2769:20	18	&
LEAF_NODE	2769:20	2769:20	19	&
FIELD	2769:21	2769:21	18	dircount64
LEAF_NODE	2769:21	2769:21	19	dircount64
LEAF_NODE	2769:31	2769:31	16	,
ARGUMENT	2769:33	2769:33	16	8
FIELD	2769:33	2769:33	17	8
LEAF_NODE	2769:33	2769:33	18	8
LEAF_NODE	2769:34	2769:34	16	)
LEAF_NODE	2769:35	2769:35	10	)
STATEMENTS	2769:37	2773:3	10	
LEAF_NODE	2769:37	2769:37	11	{
STATEMENTS	2770:4	2772:4	11	
EXPR_STATEMENT	2770:4	2771:43	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" ) ;
EXPR	2770:4	2770:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
FUNCTION_CALL	2770:4	2771:42	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
CALLEE	2770:4	2770:4	15	TIFFErrorExt
LEAF_NODE	2770:4	2770:4	16	TIFFErrorExt
LEAF_NODE	2770:16	2770:16	15	(
ARGUMENT	2770:17	2770:17	15	tif -> tif_clientdata
FIELD	2770:17	2770:22	16	tif -> tif_clientdata
LEAF_NODE	2770:17	2770:17	17	tif
LEAF_NODE	2770:20	2770:20	17	->
LEAF_NODE	2770:22	2770:22	17	tif_clientdata
LEAF_NODE	2770:36	2770:36	15	,
ARGUMENT	2770:38	2770:38	15	module
FIELD	2770:38	2770:38	16	module
LEAF_NODE	2770:38	2770:38	17	module
LEAF_NODE	2770:44	2770:44	15	,
ARGUMENT	2771:10	2771:10	15	"Error fetching directory count"
FIELD	2771:10	2771:10	16	"Error fetching directory count"
LEAF_NODE	2771:10	2771:10	17	"Error fetching directory count"
LEAF_NODE	2771:42	2771:42	15	)
LEAF_NODE	2771:43	2771:43	13	;
JUMP_STATEMENT	2772:4	2772:14	12	return ( 0 ) ;
KEYWORD	2772:4	2772:4	13	return
LEAF_NODE	2772:4	2772:4	14	return
DESTINATION	2772:11	2772:11	13	( 0 )
EXPR	2772:11	2772:13	14	( 0 )
LEAF_NODE	2772:11	2772:11	15	(
FIELD	2772:12	2772:12	15	0
LEAF_NODE	2772:12	2772:12	16	0
LEAF_NODE	2772:13	2772:13	15	)
LEAF_NODE	2772:14	2772:14	13	;
LEAF_NODE	2773:3	2773:3	11	}
SELECTION	2774:3	2775:4	9	
KEYWORD	2774:3	2774:3	10	if
LEAF_NODE	2774:3	2774:3	11	if
LEAF_NODE	2774:6	2774:6	10	(
CONDITION	2774:7	2774:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	2774:7	2774:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	2774:7	2774:12	12	tif -> tif_flags
LEAF_NODE	2774:7	2774:7	13	tif
LEAF_NODE	2774:10	2774:10	13	->
LEAF_NODE	2774:12	2774:12	13	tif_flags
LEAF_NODE	2774:22	2774:22	12	&
FIELD	2774:24	2774:24	12	TIFF_SWAB
LEAF_NODE	2774:24	2774:24	13	TIFF_SWAB
LEAF_NODE	2774:33	2774:33	10	)
STATEMENTS	2775:4	2775:4	10	
EXPR_STATEMENT	2775:4	2775:30	11	TIFFSwabLong8 ( & dircount64 ) ;
EXPR	2775:4	2775:4	12	TIFFSwabLong8 ( & dircount64 )
FUNCTION_CALL	2775:4	2775:29	13	TIFFSwabLong8 ( & dircount64 )
CALLEE	2775:4	2775:4	14	TIFFSwabLong8
LEAF_NODE	2775:4	2775:4	15	TIFFSwabLong8
LEAF_NODE	2775:17	2775:17	14	(
ARGUMENT	2775:18	2775:18	14	& dircount64
UNARY_EXPR	2775:18	2775:19	15	& dircount64
UNARY_OPERATOR	2775:18	2775:18	16	&
LEAF_NODE	2775:18	2775:18	17	&
FIELD	2775:19	2775:19	16	dircount64
LEAF_NODE	2775:19	2775:19	17	dircount64
LEAF_NODE	2775:29	2775:29	14	)
LEAF_NODE	2775:30	2775:30	12	;
SELECTION	2776:3	2777:3	9	
KEYWORD	2776:3	2776:3	10	if
LEAF_NODE	2776:3	2776:3	11	if
LEAF_NODE	2776:6	2776:6	10	(
CONDITION	2776:7	2776:7	10	dircount64 > 0xFFFF
EXPR	2776:7	2776:18	11	dircount64 > 0xFFFF
FIELD	2776:7	2776:7	12	dircount64
LEAF_NODE	2776:7	2776:7	13	dircount64
REL_OPERATOR	2776:17	2776:17	12	>
LEAF_NODE	2776:17	2776:17	13	>
FIELD	2776:18	2776:18	12	0xFFFF
LEAF_NODE	2776:18	2776:18	13	0xFFFF
LEAF_NODE	2776:24	2776:24	10	)
STATEMENTS	2777:3	2781:3	10	
LEAF_NODE	2777:3	2777:3	11	{
STATEMENTS	2778:4	2780:4	11	
EXPR_STATEMENT	2778:4	2779:66	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on tag count failed, likely corrupt TIFF" ) ;
EXPR	2778:4	2778:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on tag count failed, likely corrupt TIFF" )
FUNCTION_CALL	2778:4	2779:65	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on tag count failed, likely corrupt TIFF" )
CALLEE	2778:4	2778:4	15	TIFFErrorExt
LEAF_NODE	2778:4	2778:4	16	TIFFErrorExt
LEAF_NODE	2778:16	2778:16	15	(
ARGUMENT	2778:17	2778:17	15	tif -> tif_clientdata
FIELD	2778:17	2778:22	16	tif -> tif_clientdata
LEAF_NODE	2778:17	2778:17	17	tif
LEAF_NODE	2778:20	2778:20	17	->
LEAF_NODE	2778:22	2778:22	17	tif_clientdata
LEAF_NODE	2778:36	2778:36	15	,
ARGUMENT	2778:38	2778:38	15	module
FIELD	2778:38	2778:38	16	module
LEAF_NODE	2778:38	2778:38	17	module
LEAF_NODE	2778:44	2778:44	15	,
ARGUMENT	2779:10	2779:10	15	"Sanity check on tag count failed, likely corrupt TIFF"
FIELD	2779:10	2779:10	16	"Sanity check on tag count failed, likely corrupt TIFF"
LEAF_NODE	2779:10	2779:10	17	"Sanity check on tag count failed, likely corrupt TIFF"
LEAF_NODE	2779:65	2779:65	15	)
LEAF_NODE	2779:66	2779:66	13	;
JUMP_STATEMENT	2780:4	2780:14	12	return ( 0 ) ;
KEYWORD	2780:4	2780:4	13	return
LEAF_NODE	2780:4	2780:4	14	return
DESTINATION	2780:11	2780:11	13	( 0 )
EXPR	2780:11	2780:13	14	( 0 )
LEAF_NODE	2780:11	2780:11	15	(
FIELD	2780:12	2780:12	15	0
LEAF_NODE	2780:12	2780:12	16	0
LEAF_NODE	2780:13	2780:13	15	)
LEAF_NODE	2780:14	2780:14	13	;
LEAF_NODE	2781:3	2781:3	11	}
EXPR_STATEMENT	2782:3	2782:30	9	dircount = ( uint16 ) dircount64 ;
EXPR	2782:3	2782:3	10	dircount = ( uint16 ) dircount64
ASSIGN	2782:3	2782:12	11	dircount = ( uint16 ) dircount64
LVAL	2782:3	2782:3	12	dircount
FIELD	2782:3	2782:3	13	dircount
LEAF_NODE	2782:3	2782:3	14	dircount
ASSIGN_OP	2782:11	2782:11	12	=
LEAF_NODE	2782:11	2782:11	13	=
RVAL	2782:12	2782:20	12	( uint16 ) dircount64
LEAF_NODE	2782:12	2782:12	13	(
TYPE_NAME	2782:13	2782:13	13	uint16
LEAF_NODE	2782:13	2782:13	14	uint16
LEAF_NODE	2782:19	2782:19	13	)
FIELD	2782:20	2782:20	13	dircount64
LEAF_NODE	2782:20	2782:20	14	dircount64
LEAF_NODE	2782:30	2782:30	10	;
EXPR_STATEMENT	2783:3	2784:39	9	( void ) TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET ) ;
EXPR	2783:3	2783:10	10	( void ) TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET )
LEAF_NODE	2783:3	2783:3	11	(
TYPE_NAME	2783:4	2783:4	11	void
LEAF_NODE	2783:4	2783:4	12	void
LEAF_NODE	2783:8	2783:8	11	)
FUNCTION_CALL	2783:10	2784:38	11	TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET )
CALLEE	2783:10	2783:10	12	TIFFSeekFile
LEAF_NODE	2783:10	2783:10	13	TIFFSeekFile
LEAF_NODE	2783:22	2783:22	12	(
ARGUMENT	2783:23	2783:23	12	tif
FIELD	2783:23	2783:23	13	tif
LEAF_NODE	2783:23	2783:23	14	tif
LEAF_NODE	2783:26	2783:26	12	,
ARGUMENT	2784:7	2784:26	12	nextdir + 8 + dircount * 20
FIELD	2784:7	2784:7	13	nextdir
LEAF_NODE	2784:7	2784:7	14	nextdir
LEAF_NODE	2784:14	2784:14	13	+
FIELD	2784:15	2784:15	13	8
LEAF_NODE	2784:15	2784:15	14	8
LEAF_NODE	2784:16	2784:16	13	+
FIELD	2784:17	2784:17	13	dircount
LEAF_NODE	2784:17	2784:17	14	dircount
LEAF_NODE	2784:25	2784:25	13	*
FIELD	2784:26	2784:26	13	20
LEAF_NODE	2784:26	2784:26	14	20
LEAF_NODE	2784:28	2784:28	12	,
ARGUMENT	2784:30	2784:30	12	SEEK_SET
FIELD	2784:30	2784:30	13	SEEK_SET
LEAF_NODE	2784:30	2784:30	14	SEEK_SET
LEAF_NODE	2784:38	2784:38	12	)
LEAF_NODE	2784:39	2784:39	10	;
SELECTION	2785:3	2785:38	9	
KEYWORD	2785:3	2785:3	10	if
LEAF_NODE	2785:3	2785:3	11	if
LEAF_NODE	2785:6	2785:6	10	(
CONDITION	2785:7	2785:7	10	! ReadOK ( tif , & nextnextdir , 8 )
EXPR	2785:7	2785:7	11	! ReadOK ( tif , & nextnextdir , 8 )
UNARY_EXPR	2785:7	2785:8	12	! ReadOK ( tif , & nextnextdir , 8 )
UNARY_OPERATOR	2785:7	2785:7	13	!
LEAF_NODE	2785:7	2785:7	14	!
FUNCTION_CALL	2785:8	2785:35	13	ReadOK ( tif , & nextnextdir , 8 )
CALLEE	2785:8	2785:8	14	ReadOK
LEAF_NODE	2785:8	2785:8	15	ReadOK
LEAF_NODE	2785:14	2785:14	14	(
ARGUMENT	2785:15	2785:15	14	tif
FIELD	2785:15	2785:15	15	tif
LEAF_NODE	2785:15	2785:15	16	tif
LEAF_NODE	2785:18	2785:18	14	,
ARGUMENT	2785:20	2785:20	14	& nextnextdir
UNARY_EXPR	2785:20	2785:21	15	& nextnextdir
UNARY_OPERATOR	2785:20	2785:20	16	&
LEAF_NODE	2785:20	2785:20	17	&
FIELD	2785:21	2785:21	16	nextnextdir
LEAF_NODE	2785:21	2785:21	17	nextnextdir
LEAF_NODE	2785:32	2785:32	14	,
ARGUMENT	2785:34	2785:34	14	8
FIELD	2785:34	2785:34	15	8
LEAF_NODE	2785:34	2785:34	16	8
LEAF_NODE	2785:35	2785:35	14	)
LEAF_NODE	2785:36	2785:36	10	)
STATEMENTS	2785:38	2789:3	10	
LEAF_NODE	2785:38	2785:38	11	{
STATEMENTS	2786:4	2788:4	11	
EXPR_STATEMENT	2786:4	2787:42	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" ) ;
EXPR	2786:4	2786:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
FUNCTION_CALL	2786:4	2787:41	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
CALLEE	2786:4	2786:4	15	TIFFErrorExt
LEAF_NODE	2786:4	2786:4	16	TIFFErrorExt
LEAF_NODE	2786:16	2786:16	15	(
ARGUMENT	2786:17	2786:17	15	tif -> tif_clientdata
FIELD	2786:17	2786:22	16	tif -> tif_clientdata
LEAF_NODE	2786:17	2786:17	17	tif
LEAF_NODE	2786:20	2786:20	17	->
LEAF_NODE	2786:22	2786:22	17	tif_clientdata
LEAF_NODE	2786:36	2786:36	15	,
ARGUMENT	2786:38	2786:38	15	module
FIELD	2786:38	2786:38	16	module
LEAF_NODE	2786:38	2786:38	17	module
LEAF_NODE	2786:44	2786:44	15	,
ARGUMENT	2787:10	2787:10	15	"Error fetching directory link"
FIELD	2787:10	2787:10	16	"Error fetching directory link"
LEAF_NODE	2787:10	2787:10	17	"Error fetching directory link"
LEAF_NODE	2787:41	2787:41	15	)
LEAF_NODE	2787:42	2787:42	13	;
JUMP_STATEMENT	2788:4	2788:14	12	return ( 0 ) ;
KEYWORD	2788:4	2788:4	13	return
LEAF_NODE	2788:4	2788:4	14	return
DESTINATION	2788:11	2788:11	13	( 0 )
EXPR	2788:11	2788:13	14	( 0 )
LEAF_NODE	2788:11	2788:11	15	(
FIELD	2788:12	2788:12	15	0
LEAF_NODE	2788:12	2788:12	16	0
LEAF_NODE	2788:13	2788:13	15	)
LEAF_NODE	2788:14	2788:14	13	;
LEAF_NODE	2789:3	2789:3	11	}
SELECTION	2790:3	2791:4	9	
KEYWORD	2790:3	2790:3	10	if
LEAF_NODE	2790:3	2790:3	11	if
LEAF_NODE	2790:6	2790:6	10	(
CONDITION	2790:7	2790:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	2790:7	2790:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	2790:7	2790:12	12	tif -> tif_flags
LEAF_NODE	2790:7	2790:7	13	tif
LEAF_NODE	2790:10	2790:10	13	->
LEAF_NODE	2790:12	2790:12	13	tif_flags
LEAF_NODE	2790:22	2790:22	12	&
FIELD	2790:24	2790:24	12	TIFF_SWAB
LEAF_NODE	2790:24	2790:24	13	TIFF_SWAB
LEAF_NODE	2790:33	2790:33	10	)
STATEMENTS	2791:4	2791:4	10	
EXPR_STATEMENT	2791:4	2791:31	11	TIFFSwabLong8 ( & nextnextdir ) ;
EXPR	2791:4	2791:4	12	TIFFSwabLong8 ( & nextnextdir )
FUNCTION_CALL	2791:4	2791:30	13	TIFFSwabLong8 ( & nextnextdir )
CALLEE	2791:4	2791:4	14	TIFFSwabLong8
LEAF_NODE	2791:4	2791:4	15	TIFFSwabLong8
LEAF_NODE	2791:17	2791:17	14	(
ARGUMENT	2791:18	2791:18	14	& nextnextdir
UNARY_EXPR	2791:18	2791:19	15	& nextnextdir
UNARY_OPERATOR	2791:18	2791:18	16	&
LEAF_NODE	2791:18	2791:18	17	&
FIELD	2791:19	2791:19	16	nextnextdir
LEAF_NODE	2791:19	2791:19	17	nextnextdir
LEAF_NODE	2791:30	2791:30	14	)
LEAF_NODE	2791:31	2791:31	12	;
SELECTION	2792:3	2793:3	9	
KEYWORD	2792:3	2792:3	10	if
LEAF_NODE	2792:3	2792:3	11	if
LEAF_NODE	2792:6	2792:6	10	(
CONDITION	2792:7	2792:7	10	nextnextdir == 0
EXPR	2792:7	2792:20	11	nextnextdir == 0
FIELD	2792:7	2792:7	12	nextnextdir
LEAF_NODE	2792:7	2792:7	13	nextnextdir
EQ_OPERATOR	2792:18	2792:18	12	==
LEAF_NODE	2792:18	2792:18	13	==
FIELD	2792:20	2792:20	12	0
LEAF_NODE	2792:20	2792:20	13	0
LEAF_NODE	2792:21	2792:21	10	)
STATEMENTS	2793:3	2802:3	10	
LEAF_NODE	2793:3	2793:3	11	{
STATEMENTS	2794:4	2801:4	11	
EXPR_STATEMENT	2794:4	2795:40	12	( void ) TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET ) ;
EXPR	2794:4	2794:11	13	( void ) TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET )
LEAF_NODE	2794:4	2794:4	14	(
TYPE_NAME	2794:5	2794:5	14	void
LEAF_NODE	2794:5	2794:5	15	void
LEAF_NODE	2794:9	2794:9	14	)
FUNCTION_CALL	2794:11	2795:39	14	TIFFSeekFile ( tif , nextdir + 8 + dircount * 20 , SEEK_SET )
CALLEE	2794:11	2794:11	15	TIFFSeekFile
LEAF_NODE	2794:11	2794:11	16	TIFFSeekFile
LEAF_NODE	2794:23	2794:23	15	(
ARGUMENT	2794:24	2794:24	15	tif
FIELD	2794:24	2794:24	16	tif
LEAF_NODE	2794:24	2794:24	17	tif
LEAF_NODE	2794:27	2794:27	15	,
ARGUMENT	2795:8	2795:27	15	nextdir + 8 + dircount * 20
FIELD	2795:8	2795:8	16	nextdir
LEAF_NODE	2795:8	2795:8	17	nextdir
LEAF_NODE	2795:15	2795:15	16	+
FIELD	2795:16	2795:16	16	8
LEAF_NODE	2795:16	2795:16	17	8
LEAF_NODE	2795:17	2795:17	16	+
FIELD	2795:18	2795:18	16	dircount
LEAF_NODE	2795:18	2795:18	17	dircount
LEAF_NODE	2795:26	2795:26	16	*
FIELD	2795:27	2795:27	16	20
LEAF_NODE	2795:27	2795:27	17	20
LEAF_NODE	2795:29	2795:29	15	,
ARGUMENT	2795:31	2795:31	15	SEEK_SET
FIELD	2795:31	2795:31	16	SEEK_SET
LEAF_NODE	2795:31	2795:31	17	SEEK_SET
LEAF_NODE	2795:39	2795:39	15	)
LEAF_NODE	2795:40	2795:40	13	;
SELECTION	2796:4	2796:30	12	
KEYWORD	2796:4	2796:4	13	if
LEAF_NODE	2796:4	2796:4	14	if
LEAF_NODE	2796:7	2796:7	13	(
CONDITION	2796:8	2796:8	13	! WriteOK ( tif , & m , 8 )
EXPR	2796:8	2796:8	14	! WriteOK ( tif , & m , 8 )
UNARY_EXPR	2796:8	2796:9	15	! WriteOK ( tif , & m , 8 )
UNARY_OPERATOR	2796:8	2796:8	16	!
LEAF_NODE	2796:8	2796:8	17	!
FUNCTION_CALL	2796:9	2796:27	16	WriteOK ( tif , & m , 8 )
CALLEE	2796:9	2796:9	17	WriteOK
LEAF_NODE	2796:9	2796:9	18	WriteOK
LEAF_NODE	2796:16	2796:16	17	(
ARGUMENT	2796:17	2796:17	17	tif
FIELD	2796:17	2796:17	18	tif
LEAF_NODE	2796:17	2796:17	19	tif
LEAF_NODE	2796:20	2796:20	17	,
ARGUMENT	2796:22	2796:22	17	& m
UNARY_EXPR	2796:22	2796:23	18	& m
UNARY_OPERATOR	2796:22	2796:22	19	&
LEAF_NODE	2796:22	2796:22	20	&
FIELD	2796:23	2796:23	19	m
LEAF_NODE	2796:23	2796:23	20	m
LEAF_NODE	2796:24	2796:24	17	,
ARGUMENT	2796:26	2796:26	17	8
FIELD	2796:26	2796:26	18	8
LEAF_NODE	2796:26	2796:26	19	8
LEAF_NODE	2796:27	2796:27	17	)
LEAF_NODE	2796:28	2796:28	13	)
STATEMENTS	2796:30	2800:4	13	
LEAF_NODE	2796:30	2796:30	14	{
STATEMENTS	2797:5	2799:5	14	
EXPR_STATEMENT	2797:5	2798:41	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" ) ;
EXPR	2797:5	2797:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
FUNCTION_CALL	2797:5	2798:40	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
CALLEE	2797:5	2797:5	18	TIFFErrorExt
LEAF_NODE	2797:5	2797:5	19	TIFFErrorExt
LEAF_NODE	2797:17	2797:17	18	(
ARGUMENT	2797:18	2797:18	18	tif -> tif_clientdata
FIELD	2797:18	2797:23	19	tif -> tif_clientdata
LEAF_NODE	2797:18	2797:18	20	tif
LEAF_NODE	2797:21	2797:21	20	->
LEAF_NODE	2797:23	2797:23	20	tif_clientdata
LEAF_NODE	2797:37	2797:37	18	,
ARGUMENT	2797:39	2797:39	18	module
FIELD	2797:39	2797:39	19	module
LEAF_NODE	2797:39	2797:39	20	module
LEAF_NODE	2797:45	2797:45	18	,
ARGUMENT	2798:10	2798:10	18	"Error writing directory link"
FIELD	2798:10	2798:10	19	"Error writing directory link"
LEAF_NODE	2798:10	2798:10	20	"Error writing directory link"
LEAF_NODE	2798:40	2798:40	18	)
LEAF_NODE	2798:41	2798:41	16	;
JUMP_STATEMENT	2799:5	2799:15	15	return ( 0 ) ;
KEYWORD	2799:5	2799:5	16	return
LEAF_NODE	2799:5	2799:5	17	return
DESTINATION	2799:12	2799:12	16	( 0 )
EXPR	2799:12	2799:14	17	( 0 )
LEAF_NODE	2799:12	2799:12	18	(
FIELD	2799:13	2799:13	18	0
LEAF_NODE	2799:13	2799:13	19	0
LEAF_NODE	2799:14	2799:14	18	)
LEAF_NODE	2799:15	2799:15	16	;
LEAF_NODE	2800:4	2800:4	14	}
JUMP_STATEMENT	2801:4	2801:9	12	break DESTINATION ;
KEYWORD	2801:4	2801:4	13	break
LEAF_NODE	2801:4	2801:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2801:9	2801:9	13	;
LEAF_NODE	2802:3	2802:3	11	}
EXPR_STATEMENT	2803:3	2803:22	9	nextdir = nextnextdir ;
EXPR	2803:3	2803:3	10	nextdir = nextnextdir
ASSIGN	2803:3	2803:11	11	nextdir = nextnextdir
LVAL	2803:3	2803:3	12	nextdir
FIELD	2803:3	2803:3	13	nextdir
LEAF_NODE	2803:3	2803:3	14	nextdir
ASSIGN_OP	2803:10	2803:10	12	=
LEAF_NODE	2803:10	2803:10	13	=
RVAL	2803:11	2803:11	12	nextnextdir
FIELD	2803:11	2803:11	13	nextnextdir
LEAF_NODE	2803:11	2803:11	14	nextnextdir
LEAF_NODE	2803:22	2803:22	10	;
LEAF_NODE	2804:2	2804:2	8	}
LEAF_NODE	2805:1	2805:1	5	}
JUMP_STATEMENT	2806:1	2806:11	3	return ( 1 ) ;
KEYWORD	2806:1	2806:1	4	return
LEAF_NODE	2806:1	2806:1	5	return
DESTINATION	2806:8	2806:8	4	( 1 )
EXPR	2806:8	2806:10	5	( 1 )
LEAF_NODE	2806:8	2806:8	6	(
FIELD	2806:9	2806:9	6	1
LEAF_NODE	2806:9	2806:9	7	1
LEAF_NODE	2806:10	2806:10	6	)
LEAF_NODE	2806:11	2806:11	4	;
LEAF_NODE	2807:0	2807:0	2	}
FUNCTION_DEF	2822:0	3258:0	1	
RETURN_TYPE	2822:0	2822:0	2	int
TYPE_NAME	2822:0	2822:0	3	int
LEAF_NODE	2822:0	2822:0	4	int
FUNCTION_NAME	2823:0	2823:0	2	_TIFFRewriteField
LEAF_NODE	2823:0	2823:0	3	_TIFFRewriteField
PARAMETER_LIST	2823:17	2824:44	2	( TIFF * tif , uint16 tag , TIFFDataType in_datatype , tmsize_t count , void * data )
LEAF_NODE	2823:17	2823:17	3	(
PARAMETER_DECL	2823:18	2823:24	3	TIFF * tif
TYPE	2823:18	2823:22	4	TIFF *
TYPE_NAME	2823:18	2823:18	5	TIFF
LEAF_NODE	2823:18	2823:18	6	TIFF
POINTER	2823:22	2823:22	5	*
LEAF_NODE	2823:22	2823:22	6	*
NAME	2823:24	2823:24	4	tif
LEAF_NODE	2823:24	2823:24	5	tif
LEAF_NODE	2823:27	2823:27	3	,
PARAMETER_DECL	2823:29	2823:36	3	uint16 tag
TYPE	2823:29	2823:29	4	uint16
TYPE_NAME	2823:29	2823:29	5	uint16
LEAF_NODE	2823:29	2823:29	6	uint16
NAME	2823:36	2823:36	4	tag
LEAF_NODE	2823:36	2823:36	5	tag
LEAF_NODE	2823:39	2823:39	3	,
PARAMETER_DECL	2823:41	2823:54	3	TIFFDataType in_datatype
TYPE	2823:41	2823:41	4	TIFFDataType
TYPE_NAME	2823:41	2823:41	5	TIFFDataType
LEAF_NODE	2823:41	2823:41	6	TIFFDataType
NAME	2823:54	2823:54	4	in_datatype
LEAF_NODE	2823:54	2823:54	5	in_datatype
LEAF_NODE	2823:65	2823:65	3	,
PARAMETER_DECL	2824:18	2824:27	3	tmsize_t count
TYPE	2824:18	2824:18	4	tmsize_t
TYPE_NAME	2824:18	2824:18	5	tmsize_t
LEAF_NODE	2824:18	2824:18	6	tmsize_t
NAME	2824:27	2824:27	4	count
LEAF_NODE	2824:27	2824:27	5	count
LEAF_NODE	2824:32	2824:32	3	,
PARAMETER_DECL	2824:34	2824:40	3	void * data
TYPE	2824:34	2824:38	4	void *
TYPE_NAME	2824:34	2824:34	5	void
LEAF_NODE	2824:34	2824:34	6	void
POINTER	2824:38	2824:38	5	*
LEAF_NODE	2824:38	2824:38	6	*
NAME	2824:40	2824:40	4	data
LEAF_NODE	2824:40	2824:40	5	data
LEAF_NODE	2824:44	2824:44	3	)
LEAF_NODE	2825:0	2825:0	2	{
STATEMENTS	2826:4	3257:4	2	
LEAF_NODE	2826:4	2826:4	3	static
SIMPLE_DECL	2826:11	2826:49	3	const char [ ] module ; module = "TIFFResetField" ;
VAR_DECL	2826:11	2826:22	4	const char [ ] module ; module = "TIFFResetField"
TYPE	2826:11	2826:28	5	const char [ ]
TYPE_NAME	2826:11	2826:17	6	const char
LEAF_NODE	2826:11	2826:11	7	const
LEAF_NODE	2826:17	2826:17	7	char
TYPE_SUFFIX	2826:28	2826:29	6	[ ]
LEAF_NODE	2826:28	2826:28	7	[
LEAF_NODE	2826:29	2826:29	7	]
NAME	2826:22	2826:22	5	module
LEAF_NODE	2826:22	2826:22	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2826:22	2826:22	5	module = "TIFFResetField"
ASSIGN	2826:22	2826:33	6	module = "TIFFResetField"
LVAL	2826:22	2826:22	7	module
NAME	2826:22	2826:22	8	module
LEAF_NODE	2826:22	2826:22	9	module
ASSIGN_OP	2826:31	2826:31	7	=
LEAF_NODE	2826:31	2826:31	8	=
RVAL	2826:33	2826:33	7	"TIFFResetField"
FIELD	2826:33	2826:33	8	"TIFFResetField"
LEAF_NODE	2826:33	2826:33	9	"TIFFResetField"
LEAF_NODE	2826:49	2826:49	4	;
SIMPLE_DECL	2828:4	2828:19	3	uint16 dircount ;
VAR_DECL	2828:4	2828:11	4	uint16 dircount
TYPE	2828:4	2828:4	5	uint16
TYPE_NAME	2828:4	2828:4	6	uint16
LEAF_NODE	2828:4	2828:4	7	uint16
NAME	2828:11	2828:11	5	dircount
LEAF_NODE	2828:11	2828:11	6	dircount
LEAF_NODE	2828:19	2828:19	4	;
SIMPLE_DECL	2829:4	2829:20	3	tmsize_t dirsize ;
VAR_DECL	2829:4	2829:13	4	tmsize_t dirsize
TYPE	2829:4	2829:4	5	tmsize_t
TYPE_NAME	2829:4	2829:4	6	tmsize_t
LEAF_NODE	2829:4	2829:4	7	tmsize_t
NAME	2829:13	2829:13	5	dirsize
LEAF_NODE	2829:13	2829:13	6	dirsize
LEAF_NODE	2829:20	2829:20	4	;
SIMPLE_DECL	2830:4	2830:26	3	uint8 [ 20 ] direntry_raw ;
VAR_DECL	2830:4	2830:10	4	uint8 [ 20 ] direntry_raw
TYPE	2830:4	2830:22	5	uint8 [ 20 ]
TYPE_NAME	2830:4	2830:4	6	uint8
LEAF_NODE	2830:4	2830:4	7	uint8
TYPE_SUFFIX	2830:22	2830:25	6	[ 20 ]
LEAF_NODE	2830:22	2830:22	7	[
FIELD	2830:23	2830:23	7	20
LEAF_NODE	2830:23	2830:23	8	20
LEAF_NODE	2830:25	2830:25	7	]
NAME	2830:10	2830:10	5	direntry_raw
LEAF_NODE	2830:10	2830:10	6	direntry_raw
LEAF_NODE	2830:26	2830:26	4	;
SIMPLE_DECL	2831:4	2831:24	3	uint16 entry_tag ; entry_tag = 0 ;
VAR_DECL	2831:4	2831:11	4	uint16 entry_tag ; entry_tag = 0
TYPE	2831:4	2831:4	5	uint16
TYPE_NAME	2831:4	2831:4	6	uint16
LEAF_NODE	2831:4	2831:4	7	uint16
NAME	2831:11	2831:11	5	entry_tag
LEAF_NODE	2831:11	2831:11	6	entry_tag
LEAF_NODE	0:0	0:0	5	;
INIT	2831:11	2831:11	5	entry_tag = 0
ASSIGN	2831:11	2831:23	6	entry_tag = 0
LVAL	2831:11	2831:11	7	entry_tag
NAME	2831:11	2831:11	8	entry_tag
LEAF_NODE	2831:11	2831:11	9	entry_tag
ASSIGN_OP	2831:21	2831:21	7	=
LEAF_NODE	2831:21	2831:21	8	=
RVAL	2831:23	2831:23	7	0
FIELD	2831:23	2831:23	8	0
LEAF_NODE	2831:23	2831:23	9	0
LEAF_NODE	2831:24	2831:24	4	;
SIMPLE_DECL	2832:4	2832:25	3	uint16 entry_type ; entry_type = 0 ;
VAR_DECL	2832:4	2832:11	4	uint16 entry_type ; entry_type = 0
TYPE	2832:4	2832:4	5	uint16
TYPE_NAME	2832:4	2832:4	6	uint16
LEAF_NODE	2832:4	2832:4	7	uint16
NAME	2832:11	2832:11	5	entry_type
LEAF_NODE	2832:11	2832:11	6	entry_type
LEAF_NODE	0:0	0:0	5	;
INIT	2832:11	2832:11	5	entry_type = 0
ASSIGN	2832:11	2832:24	6	entry_type = 0
LVAL	2832:11	2832:11	7	entry_type
NAME	2832:11	2832:11	8	entry_type
LEAF_NODE	2832:11	2832:11	9	entry_type
ASSIGN_OP	2832:22	2832:22	7	=
LEAF_NODE	2832:22	2832:22	8	=
RVAL	2832:24	2832:24	7	0
FIELD	2832:24	2832:24	8	0
LEAF_NODE	2832:24	2832:24	9	0
LEAF_NODE	2832:25	2832:25	4	;
SIMPLE_DECL	2833:4	2833:26	3	uint64 entry_count ; entry_count = 0 ;
VAR_DECL	2833:4	2833:11	4	uint64 entry_count ; entry_count = 0
TYPE	2833:4	2833:4	5	uint64
TYPE_NAME	2833:4	2833:4	6	uint64
LEAF_NODE	2833:4	2833:4	7	uint64
NAME	2833:11	2833:11	5	entry_count
LEAF_NODE	2833:11	2833:11	6	entry_count
LEAF_NODE	0:0	0:0	5	;
INIT	2833:11	2833:11	5	entry_count = 0
ASSIGN	2833:11	2833:25	6	entry_count = 0
LVAL	2833:11	2833:11	7	entry_count
NAME	2833:11	2833:11	8	entry_count
LEAF_NODE	2833:11	2833:11	9	entry_count
ASSIGN_OP	2833:23	2833:23	7	=
LEAF_NODE	2833:23	2833:23	8	=
RVAL	2833:25	2833:25	7	0
FIELD	2833:25	2833:25	8	0
LEAF_NODE	2833:25	2833:25	9	0
LEAF_NODE	2833:26	2833:26	4	;
SIMPLE_DECL	2834:4	2834:27	3	uint64 entry_offset ; entry_offset = 0 ;
VAR_DECL	2834:4	2834:11	4	uint64 entry_offset ; entry_offset = 0
TYPE	2834:4	2834:4	5	uint64
TYPE_NAME	2834:4	2834:4	6	uint64
LEAF_NODE	2834:4	2834:4	7	uint64
NAME	2834:11	2834:11	5	entry_offset
LEAF_NODE	2834:11	2834:11	6	entry_offset
LEAF_NODE	0:0	0:0	5	;
INIT	2834:11	2834:11	5	entry_offset = 0
ASSIGN	2834:11	2834:26	6	entry_offset = 0
LVAL	2834:11	2834:11	7	entry_offset
NAME	2834:11	2834:11	8	entry_offset
LEAF_NODE	2834:11	2834:11	9	entry_offset
ASSIGN_OP	2834:24	2834:24	7	=
LEAF_NODE	2834:24	2834:24	8	=
RVAL	2834:26	2834:26	7	0
FIELD	2834:26	2834:26	8	0
LEAF_NODE	2834:26	2834:26	9	0
LEAF_NODE	2834:27	2834:27	4	;
SIMPLE_DECL	2835:4	2835:29	3	int value_in_entry ; value_in_entry = 0 ;
VAR_DECL	2835:4	2835:11	4	int value_in_entry ; value_in_entry = 0
TYPE	2835:4	2835:4	5	int
TYPE_NAME	2835:4	2835:4	6	int
LEAF_NODE	2835:4	2835:4	7	int
NAME	2835:11	2835:11	5	value_in_entry
LEAF_NODE	2835:11	2835:11	6	value_in_entry
LEAF_NODE	0:0	0:0	5	;
INIT	2835:11	2835:11	5	value_in_entry = 0
ASSIGN	2835:11	2835:28	6	value_in_entry = 0
LVAL	2835:11	2835:11	7	value_in_entry
NAME	2835:11	2835:11	8	value_in_entry
LEAF_NODE	2835:11	2835:11	9	value_in_entry
ASSIGN_OP	2835:26	2835:26	7	=
LEAF_NODE	2835:26	2835:26	8	=
RVAL	2835:28	2835:28	7	0
FIELD	2835:28	2835:28	8	0
LEAF_NODE	2835:28	2835:28	9	0
LEAF_NODE	2835:29	2835:29	4	;
SIMPLE_DECL	2836:4	2836:22	3	uint64 read_offset ;
VAR_DECL	2836:4	2836:11	4	uint64 read_offset
TYPE	2836:4	2836:4	5	uint64
TYPE_NAME	2836:4	2836:4	6	uint64
LEAF_NODE	2836:4	2836:4	7	uint64
NAME	2836:11	2836:11	5	read_offset
LEAF_NODE	2836:11	2836:11	6	read_offset
LEAF_NODE	2836:22	2836:22	4	;
SIMPLE_DECL	2837:4	2837:30	3	uint8 * buf_to_write ; buf_to_write = NULL ;
VAR_DECL	2837:4	2837:11	4	uint8 * buf_to_write ; buf_to_write = NULL
TYPE	2837:4	2837:10	5	uint8 *
TYPE_NAME	2837:4	2837:4	6	uint8
LEAF_NODE	2837:4	2837:4	7	uint8
POINTER	2837:10	2837:10	6	*
LEAF_NODE	2837:10	2837:10	7	*
NAME	2837:11	2837:11	5	buf_to_write
LEAF_NODE	2837:11	2837:11	6	buf_to_write
LEAF_NODE	0:0	0:0	5	;
INIT	2837:11	2837:11	5	buf_to_write = NULL
ASSIGN	2837:11	2837:26	6	buf_to_write = NULL
LVAL	2837:11	2837:11	7	buf_to_write
NAME	2837:11	2837:11	8	buf_to_write
LEAF_NODE	2837:11	2837:11	9	buf_to_write
ASSIGN_OP	2837:24	2837:24	7	=
LEAF_NODE	2837:24	2837:24	8	=
RVAL	2837:26	2837:26	7	NULL
FIELD	2837:26	2837:26	8	NULL
LEAF_NODE	2837:26	2837:26	9	NULL
LEAF_NODE	2837:30	2837:30	4	;
SIMPLE_DECL	2838:4	2838:25	3	TIFFDataType datatype ;
VAR_DECL	2838:4	2838:17	4	TIFFDataType datatype
TYPE	2838:4	2838:4	5	TIFFDataType
TYPE_NAME	2838:4	2838:4	6	TIFFDataType
LEAF_NODE	2838:4	2838:4	7	TIFFDataType
NAME	2838:17	2838:17	5	datatype
LEAF_NODE	2838:17	2838:17	6	datatype
LEAF_NODE	2838:25	2838:25	4	;
EXPR_STATEMENT	2843:14	2843:47	3	TIFFFindField ( tif , tag , TIFF_ANY ) ;
EXPR	2843:14	2843:14	4	TIFFFindField ( tif , tag , TIFF_ANY )
FUNCTION_CALL	2843:14	2843:46	5	TIFFFindField ( tif , tag , TIFF_ANY )
CALLEE	2843:14	2843:14	6	TIFFFindField
LEAF_NODE	2843:14	2843:14	7	TIFFFindField
LEAF_NODE	2843:27	2843:27	6	(
ARGUMENT	2843:28	2843:28	6	tif
FIELD	2843:28	2843:28	7	tif
LEAF_NODE	2843:28	2843:28	8	tif
LEAF_NODE	2843:31	2843:31	6	,
ARGUMENT	2843:33	2843:33	6	tag
FIELD	2843:33	2843:33	7	tag
LEAF_NODE	2843:33	2843:33	8	tag
LEAF_NODE	2843:36	2843:36	6	,
ARGUMENT	2843:38	2843:38	6	TIFF_ANY
FIELD	2843:38	2843:38	7	TIFF_ANY
LEAF_NODE	2843:38	2843:38	8	TIFF_ANY
LEAF_NODE	2843:46	2843:46	6	)
LEAF_NODE	2843:47	2843:47	4	;
SELECTION	2848:4	2849:4	3	
KEYWORD	2848:4	2848:4	4	if
LEAF_NODE	2848:4	2848:4	5	if
LEAF_NODE	2848:6	2848:6	4	(
CONDITION	2848:8	2848:8	4	isMapped ( tif )
EXPR	2848:8	2848:8	5	isMapped ( tif )
FUNCTION_CALL	2848:8	2848:20	6	isMapped ( tif )
CALLEE	2848:8	2848:8	7	isMapped
LEAF_NODE	2848:8	2848:8	8	isMapped
LEAF_NODE	2848:16	2848:16	7	(
ARGUMENT	2848:17	2848:17	7	tif
FIELD	2848:17	2848:17	8	tif
LEAF_NODE	2848:17	2848:17	9	tif
LEAF_NODE	2848:20	2848:20	7	)
LEAF_NODE	2848:22	2848:22	4	)
STATEMENTS	2849:4	2853:4	4	
LEAF_NODE	2849:4	2849:4	5	{
STATEMENTS	2850:8	2852:8	5	
EXPR_STATEMENT	2850:8	2851:89	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Memory mapped files not currently supported for this operation." ) ;
EXPR	2850:8	2850:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Memory mapped files not currently supported for this operation." )
FUNCTION_CALL	2850:8	2851:88	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Memory mapped files not currently supported for this operation." )
CALLEE	2850:8	2850:8	9	TIFFErrorExt
LEAF_NODE	2850:8	2850:8	10	TIFFErrorExt
LEAF_NODE	2850:20	2850:20	9	(
ARGUMENT	2850:22	2850:22	9	tif -> tif_clientdata
FIELD	2850:22	2850:27	10	tif -> tif_clientdata
LEAF_NODE	2850:22	2850:22	11	tif
LEAF_NODE	2850:25	2850:25	11	->
LEAF_NODE	2850:27	2850:27	11	tif_clientdata
LEAF_NODE	2850:41	2850:41	9	,
ARGUMENT	2850:43	2850:43	9	module
FIELD	2850:43	2850:43	10	module
LEAF_NODE	2850:43	2850:43	11	module
LEAF_NODE	2850:49	2850:49	9	,
ARGUMENT	2851:22	2851:22	9	"Memory mapped files not currently supported for this operation."
FIELD	2851:22	2851:22	10	"Memory mapped files not currently supported for this operation."
LEAF_NODE	2851:22	2851:22	11	"Memory mapped files not currently supported for this operation."
LEAF_NODE	2851:88	2851:88	9	)
LEAF_NODE	2851:89	2851:89	7	;
JUMP_STATEMENT	2852:8	2852:16	6	return 0 ;
KEYWORD	2852:8	2852:8	7	return
LEAF_NODE	2852:8	2852:8	8	return
DESTINATION	2852:15	2852:15	7	0
EXPR	2852:15	2852:15	8	0
FIELD	2852:15	2852:15	9	0
LEAF_NODE	2852:15	2852:15	10	0
LEAF_NODE	2852:16	2852:16	7	;
LEAF_NODE	2853:4	2853:4	5	}
SELECTION	2855:4	2856:4	3	
KEYWORD	2855:4	2855:4	4	if
LEAF_NODE	2855:4	2855:4	5	if
LEAF_NODE	2855:6	2855:6	4	(
CONDITION	2855:8	2855:8	4	tif -> tif_diroff == 0
EXPR	2855:8	2855:27	5	tif -> tif_diroff == 0
FIELD	2855:8	2855:13	6	tif -> tif_diroff
LEAF_NODE	2855:8	2855:8	7	tif
LEAF_NODE	2855:11	2855:11	7	->
LEAF_NODE	2855:13	2855:13	7	tif_diroff
EQ_OPERATOR	2855:24	2855:24	6	==
LEAF_NODE	2855:24	2855:24	7	==
FIELD	2855:27	2855:27	6	0
LEAF_NODE	2855:27	2855:27	7	0
LEAF_NODE	2855:29	2855:29	4	)
STATEMENTS	2856:4	2860:4	4	
LEAF_NODE	2856:4	2856:4	5	{
STATEMENTS	2857:8	2859:8	5	
EXPR_STATEMENT	2857:8	2858:82	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to reset field on directory not already on disk." ) ;
EXPR	2857:8	2857:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to reset field on directory not already on disk." )
FUNCTION_CALL	2857:8	2858:81	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Attempt to reset field on directory not already on disk." )
CALLEE	2857:8	2857:8	9	TIFFErrorExt
LEAF_NODE	2857:8	2857:8	10	TIFFErrorExt
LEAF_NODE	2857:20	2857:20	9	(
ARGUMENT	2857:22	2857:22	9	tif -> tif_clientdata
FIELD	2857:22	2857:27	10	tif -> tif_clientdata
LEAF_NODE	2857:22	2857:22	11	tif
LEAF_NODE	2857:25	2857:25	11	->
LEAF_NODE	2857:27	2857:27	11	tif_clientdata
LEAF_NODE	2857:41	2857:41	9	,
ARGUMENT	2857:43	2857:43	9	module
FIELD	2857:43	2857:43	10	module
LEAF_NODE	2857:43	2857:43	11	module
LEAF_NODE	2857:49	2857:49	9	,
ARGUMENT	2858:22	2858:22	9	"Attempt to reset field on directory not already on disk."
FIELD	2858:22	2858:22	10	"Attempt to reset field on directory not already on disk."
LEAF_NODE	2858:22	2858:22	11	"Attempt to reset field on directory not already on disk."
LEAF_NODE	2858:81	2858:81	9	)
LEAF_NODE	2858:82	2858:82	7	;
JUMP_STATEMENT	2859:8	2859:16	6	return 0 ;
KEYWORD	2859:8	2859:8	7	return
LEAF_NODE	2859:8	2859:8	8	return
DESTINATION	2859:15	2859:15	7	0
EXPR	2859:15	2859:15	8	0
FIELD	2859:15	2859:15	9	0
LEAF_NODE	2859:15	2859:15	10	0
LEAF_NODE	2859:16	2859:16	7	;
LEAF_NODE	2860:4	2860:4	5	}
SELECTION	2865:4	2865:39	3	
KEYWORD	2865:4	2865:4	4	if
LEAF_NODE	2865:4	2865:4	5	if
LEAF_NODE	2865:7	2865:7	4	(
CONDITION	2865:8	2865:8	4	! SeekOK ( tif , tif -> tif_diroff )
EXPR	2865:8	2865:8	5	! SeekOK ( tif , tif -> tif_diroff )
UNARY_EXPR	2865:8	2865:9	6	! SeekOK ( tif , tif -> tif_diroff )
UNARY_OPERATOR	2865:8	2865:8	7	!
LEAF_NODE	2865:8	2865:8	8	!
FUNCTION_CALL	2865:9	2865:36	7	SeekOK ( tif , tif -> tif_diroff )
CALLEE	2865:9	2865:9	8	SeekOK
LEAF_NODE	2865:9	2865:9	9	SeekOK
LEAF_NODE	2865:15	2865:15	8	(
ARGUMENT	2865:16	2865:16	8	tif
FIELD	2865:16	2865:16	9	tif
LEAF_NODE	2865:16	2865:16	10	tif
LEAF_NODE	2865:19	2865:19	8	,
ARGUMENT	2865:21	2865:21	8	tif -> tif_diroff
FIELD	2865:21	2865:26	9	tif -> tif_diroff
LEAF_NODE	2865:21	2865:21	10	tif
LEAF_NODE	2865:24	2865:24	10	->
LEAF_NODE	2865:26	2865:26	10	tif_diroff
LEAF_NODE	2865:36	2865:36	8	)
LEAF_NODE	2865:37	2865:37	4	)
STATEMENTS	2865:39	2870:4	4	
LEAF_NODE	2865:39	2865:39	5	{
STATEMENTS	2866:8	2869:8	5	
EXPR_STATEMENT	2866:8	2868:35	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name ) ;
EXPR	2866:8	2866:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name )
FUNCTION_CALL	2866:8	2868:34	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name )
CALLEE	2866:8	2866:8	9	TIFFErrorExt
LEAF_NODE	2866:8	2866:8	10	TIFFErrorExt
LEAF_NODE	2866:20	2866:20	9	(
ARGUMENT	2866:21	2866:21	9	tif -> tif_clientdata
FIELD	2866:21	2866:26	10	tif -> tif_clientdata
LEAF_NODE	2866:21	2866:21	11	tif
LEAF_NODE	2866:24	2866:24	11	->
LEAF_NODE	2866:26	2866:26	11	tif_clientdata
LEAF_NODE	2866:40	2866:40	9	,
ARGUMENT	2866:42	2866:42	9	module
FIELD	2866:42	2866:42	10	module
LEAF_NODE	2866:42	2866:42	11	module
LEAF_NODE	2866:48	2866:48	9	,
ARGUMENT	2867:21	2867:21	9	"%s: Seek error accessing TIFF directory"
FIELD	2867:21	2867:21	10	"%s: Seek error accessing TIFF directory"
LEAF_NODE	2867:21	2867:21	11	"%s: Seek error accessing TIFF directory"
LEAF_NODE	2867:62	2867:62	9	,
ARGUMENT	2868:21	2868:21	9	tif -> tif_name
FIELD	2868:21	2868:26	10	tif -> tif_name
LEAF_NODE	2868:21	2868:21	11	tif
LEAF_NODE	2868:24	2868:24	11	->
LEAF_NODE	2868:26	2868:26	11	tif_name
LEAF_NODE	2868:34	2868:34	9	)
LEAF_NODE	2868:35	2868:35	7	;
JUMP_STATEMENT	2869:8	2869:16	6	return 0 ;
KEYWORD	2869:8	2869:8	7	return
LEAF_NODE	2869:8	2869:8	8	return
DESTINATION	2869:15	2869:15	7	0
EXPR	2869:15	2869:15	8	0
FIELD	2869:15	2869:15	9	0
LEAF_NODE	2869:15	2869:15	10	0
LEAF_NODE	2869:16	2869:16	7	;
LEAF_NODE	2870:4	2870:4	5	}
EXPR_STATEMENT	2872:4	2872:33	3	read_offset = tif -> tif_diroff ;
EXPR	2872:4	2872:4	4	read_offset = tif -> tif_diroff
ASSIGN	2872:4	2872:18	5	read_offset = tif -> tif_diroff
LVAL	2872:4	2872:4	6	read_offset
FIELD	2872:4	2872:4	7	read_offset
LEAF_NODE	2872:4	2872:4	8	read_offset
ASSIGN_OP	2872:16	2872:16	6	=
LEAF_NODE	2872:16	2872:16	7	=
RVAL	2872:18	2872:18	6	tif -> tif_diroff
FIELD	2872:18	2872:23	7	tif -> tif_diroff
LEAF_NODE	2872:18	2872:18	8	tif
LEAF_NODE	2872:21	2872:21	8	->
LEAF_NODE	2872:23	2872:23	8	tif_diroff
LEAF_NODE	2872:33	2872:33	4	;
SELECTION	2874:4	2875:4	3	
KEYWORD	2874:4	2874:4	4	if
LEAF_NODE	2874:4	2874:4	5	if
LEAF_NODE	2874:7	2874:7	4	(
CONDITION	2874:8	2874:8	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2874:8	2874:8	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2874:8	2874:37	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2874:8	2874:8	7	!
LEAF_NODE	2874:8	2874:8	8	!
LEAF_NODE	2874:9	2874:9	7	(
FIELD	2874:10	2874:15	7	tif -> tif_flags
LEAF_NODE	2874:10	2874:10	8	tif
LEAF_NODE	2874:13	2874:13	8	->
LEAF_NODE	2874:15	2874:15	8	tif_flags
LEAF_NODE	2874:24	2874:24	7	&
FIELD	2874:25	2874:25	7	TIFF_BIGTIFF
LEAF_NODE	2874:25	2874:25	8	TIFF_BIGTIFF
LEAF_NODE	2874:37	2874:37	7	)
LEAF_NODE	2874:38	2874:38	4	)
STATEMENTS	2875:4	2886:4	4	
LEAF_NODE	2875:4	2875:4	5	{
STATEMENTS	2876:8	2885:8	5	
SELECTION	2876:8	2876:54	6	
KEYWORD	2876:8	2876:8	7	if
LEAF_NODE	2876:8	2876:8	8	if
LEAF_NODE	2876:11	2876:11	7	(
CONDITION	2876:12	2876:12	7	! ReadOK ( tif , & dircount , sizeof ( uint16 ) )
EXPR	2876:12	2876:12	8	! ReadOK ( tif , & dircount , sizeof ( uint16 ) )
UNARY_EXPR	2876:12	2876:13	9	! ReadOK ( tif , & dircount , sizeof ( uint16 ) )
UNARY_OPERATOR	2876:12	2876:12	10	!
LEAF_NODE	2876:12	2876:12	11	!
FUNCTION_CALL	2876:13	2876:51	10	ReadOK ( tif , & dircount , sizeof ( uint16 ) )
CALLEE	2876:13	2876:13	11	ReadOK
LEAF_NODE	2876:13	2876:13	12	ReadOK
LEAF_NODE	2876:19	2876:19	11	(
ARGUMENT	2876:20	2876:20	11	tif
FIELD	2876:20	2876:20	12	tif
LEAF_NODE	2876:20	2876:20	13	tif
LEAF_NODE	2876:23	2876:23	11	,
ARGUMENT	2876:25	2876:25	11	& dircount
UNARY_EXPR	2876:25	2876:26	12	& dircount
UNARY_OPERATOR	2876:25	2876:25	13	&
LEAF_NODE	2876:25	2876:25	14	&
FIELD	2876:26	2876:26	13	dircount
LEAF_NODE	2876:26	2876:26	14	dircount
LEAF_NODE	2876:34	2876:34	11	,
ARGUMENT	2876:36	2876:36	11	sizeof ( uint16 )
FUNCTION_CALL	2876:36	2876:50	12	sizeof ( uint16 )
CALLEE	2876:36	2876:36	13	sizeof
LEAF_NODE	2876:36	2876:36	14	sizeof
LEAF_NODE	2876:43	2876:43	13	(
ARGUMENT	2876:44	2876:44	13	uint16
FIELD	2876:44	2876:44	14	uint16
LEAF_NODE	2876:44	2876:44	15	uint16
LEAF_NODE	2876:50	2876:50	13	)
LEAF_NODE	2876:51	2876:51	11	)
LEAF_NODE	2876:52	2876:52	7	)
STATEMENTS	2876:54	2881:8	7	
LEAF_NODE	2876:54	2876:54	8	{
STATEMENTS	2877:12	2880:12	8	
EXPR_STATEMENT	2877:12	2879:39	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name ) ;
EXPR	2877:12	2877:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name )
FUNCTION_CALL	2877:12	2879:38	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name )
CALLEE	2877:12	2877:12	12	TIFFErrorExt
LEAF_NODE	2877:12	2877:12	13	TIFFErrorExt
LEAF_NODE	2877:24	2877:24	12	(
ARGUMENT	2877:25	2877:25	12	tif -> tif_clientdata
FIELD	2877:25	2877:30	13	tif -> tif_clientdata
LEAF_NODE	2877:25	2877:25	14	tif
LEAF_NODE	2877:28	2877:28	14	->
LEAF_NODE	2877:30	2877:30	14	tif_clientdata
LEAF_NODE	2877:44	2877:44	12	,
ARGUMENT	2877:46	2877:46	12	module
FIELD	2877:46	2877:46	13	module
LEAF_NODE	2877:46	2877:46	14	module
LEAF_NODE	2877:52	2877:52	12	,
ARGUMENT	2878:25	2878:25	12	"%s: Can not read TIFF directory count"
FIELD	2878:25	2878:25	13	"%s: Can not read TIFF directory count"
LEAF_NODE	2878:25	2878:25	14	"%s: Can not read TIFF directory count"
LEAF_NODE	2878:64	2878:64	12	,
ARGUMENT	2879:25	2879:25	12	tif -> tif_name
FIELD	2879:25	2879:30	13	tif -> tif_name
LEAF_NODE	2879:25	2879:25	14	tif
LEAF_NODE	2879:28	2879:28	14	->
LEAF_NODE	2879:30	2879:30	14	tif_name
LEAF_NODE	2879:38	2879:38	12	)
LEAF_NODE	2879:39	2879:39	10	;
JUMP_STATEMENT	2880:12	2880:20	9	return 0 ;
KEYWORD	2880:12	2880:12	10	return
LEAF_NODE	2880:12	2880:12	11	return
DESTINATION	2880:19	2880:19	10	0
EXPR	2880:19	2880:19	11	0
FIELD	2880:19	2880:19	12	0
LEAF_NODE	2880:19	2880:19	13	0
LEAF_NODE	2880:20	2880:20	10	;
LEAF_NODE	2881:8	2881:8	8	}
SELECTION	2882:8	2883:12	6	
KEYWORD	2882:8	2882:8	7	if
LEAF_NODE	2882:8	2882:8	8	if
LEAF_NODE	2882:11	2882:11	7	(
CONDITION	2882:12	2882:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	2882:12	2882:29	8	tif -> tif_flags & TIFF_SWAB
FIELD	2882:12	2882:17	9	tif -> tif_flags
LEAF_NODE	2882:12	2882:12	10	tif
LEAF_NODE	2882:15	2882:15	10	->
LEAF_NODE	2882:17	2882:17	10	tif_flags
LEAF_NODE	2882:27	2882:27	9	&
FIELD	2882:29	2882:29	9	TIFF_SWAB
LEAF_NODE	2882:29	2882:29	10	TIFF_SWAB
LEAF_NODE	2882:38	2882:38	7	)
STATEMENTS	2883:12	2883:12	7	
EXPR_STATEMENT	2883:12	2883:36	8	TIFFSwabShort ( & dircount ) ;
EXPR	2883:12	2883:12	9	TIFFSwabShort ( & dircount )
FUNCTION_CALL	2883:12	2883:35	10	TIFFSwabShort ( & dircount )
CALLEE	2883:12	2883:12	11	TIFFSwabShort
LEAF_NODE	2883:12	2883:12	12	TIFFSwabShort
LEAF_NODE	2883:25	2883:25	11	(
ARGUMENT	2883:26	2883:26	11	& dircount
UNARY_EXPR	2883:26	2883:27	12	& dircount
UNARY_OPERATOR	2883:26	2883:26	13	&
LEAF_NODE	2883:26	2883:26	14	&
FIELD	2883:27	2883:27	13	dircount
LEAF_NODE	2883:27	2883:27	14	dircount
LEAF_NODE	2883:35	2883:35	11	)
LEAF_NODE	2883:36	2883:36	9	;
EXPR_STATEMENT	2884:8	2884:20	6	dirsize = 12 ;
EXPR	2884:8	2884:8	7	dirsize = 12
ASSIGN	2884:8	2884:18	8	dirsize = 12
LVAL	2884:8	2884:8	9	dirsize
FIELD	2884:8	2884:8	10	dirsize
LEAF_NODE	2884:8	2884:8	11	dirsize
ASSIGN_OP	2884:16	2884:16	9	=
LEAF_NODE	2884:16	2884:16	10	=
RVAL	2884:18	2884:18	9	12
FIELD	2884:18	2884:18	10	12
LEAF_NODE	2884:18	2884:18	11	12
LEAF_NODE	2884:20	2884:20	7	;
EXPR_STATEMENT	2885:8	2885:24	6	read_offset += 2 ;
EXPR	2885:8	2885:8	7	read_offset += 2
ASSIGN	2885:8	2885:23	8	read_offset += 2
LVAL	2885:8	2885:8	9	read_offset
FIELD	2885:8	2885:8	10	read_offset
LEAF_NODE	2885:8	2885:8	11	read_offset
ASSIGN_OP	2885:20	2885:20	9	+=
LEAF_NODE	2885:20	2885:20	10	+=
RVAL	2885:23	2885:23	9	2
FIELD	2885:23	2885:23	10	2
LEAF_NODE	2885:23	2885:23	11	2
LEAF_NODE	2885:24	2885:24	7	;
LEAF_NODE	2886:4	2886:4	5	}
SELECTION	2886:6	2886:11	3	
KEYWORD	2886:6	2886:6	4	else
LEAF_NODE	2886:6	2886:6	5	else
STATEMENTS	2886:11	2899:4	4	
LEAF_NODE	2886:11	2886:11	5	{
STATEMENTS	2887:8	2898:8	5	
SIMPLE_DECL	2887:8	2887:25	6	uint64 dircount64 ;
VAR_DECL	2887:8	2887:15	7	uint64 dircount64
TYPE	2887:8	2887:8	8	uint64
TYPE_NAME	2887:8	2887:8	9	uint64
LEAF_NODE	2887:8	2887:8	10	uint64
NAME	2887:15	2887:15	8	dircount64
LEAF_NODE	2887:15	2887:15	9	dircount64
LEAF_NODE	2887:25	2887:25	7	;
SELECTION	2888:8	2888:56	6	
KEYWORD	2888:8	2888:8	7	if
LEAF_NODE	2888:8	2888:8	8	if
LEAF_NODE	2888:11	2888:11	7	(
CONDITION	2888:12	2888:12	7	! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
EXPR	2888:12	2888:12	8	! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
UNARY_EXPR	2888:12	2888:13	9	! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
UNARY_OPERATOR	2888:12	2888:12	10	!
LEAF_NODE	2888:12	2888:12	11	!
FUNCTION_CALL	2888:13	2888:53	10	ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
CALLEE	2888:13	2888:13	11	ReadOK
LEAF_NODE	2888:13	2888:13	12	ReadOK
LEAF_NODE	2888:19	2888:19	11	(
ARGUMENT	2888:20	2888:20	11	tif
FIELD	2888:20	2888:20	12	tif
LEAF_NODE	2888:20	2888:20	13	tif
LEAF_NODE	2888:23	2888:23	11	,
ARGUMENT	2888:25	2888:25	11	& dircount64
UNARY_EXPR	2888:25	2888:26	12	& dircount64
UNARY_OPERATOR	2888:25	2888:25	13	&
LEAF_NODE	2888:25	2888:25	14	&
FIELD	2888:26	2888:26	13	dircount64
LEAF_NODE	2888:26	2888:26	14	dircount64
LEAF_NODE	2888:36	2888:36	11	,
ARGUMENT	2888:38	2888:38	11	sizeof ( uint64 )
FUNCTION_CALL	2888:38	2888:52	12	sizeof ( uint64 )
CALLEE	2888:38	2888:38	13	sizeof
LEAF_NODE	2888:38	2888:38	14	sizeof
LEAF_NODE	2888:45	2888:45	13	(
ARGUMENT	2888:46	2888:46	13	uint64
FIELD	2888:46	2888:46	14	uint64
LEAF_NODE	2888:46	2888:46	15	uint64
LEAF_NODE	2888:52	2888:52	13	)
LEAF_NODE	2888:53	2888:53	11	)
LEAF_NODE	2888:54	2888:54	7	)
STATEMENTS	2888:56	2893:8	7	
LEAF_NODE	2888:56	2888:56	8	{
STATEMENTS	2889:12	2892:12	8	
EXPR_STATEMENT	2889:12	2891:39	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name ) ;
EXPR	2889:12	2889:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name )
FUNCTION_CALL	2889:12	2891:38	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name )
CALLEE	2889:12	2889:12	12	TIFFErrorExt
LEAF_NODE	2889:12	2889:12	13	TIFFErrorExt
LEAF_NODE	2889:24	2889:24	12	(
ARGUMENT	2889:25	2889:25	12	tif -> tif_clientdata
FIELD	2889:25	2889:30	13	tif -> tif_clientdata
LEAF_NODE	2889:25	2889:25	14	tif
LEAF_NODE	2889:28	2889:28	14	->
LEAF_NODE	2889:30	2889:30	14	tif_clientdata
LEAF_NODE	2889:44	2889:44	12	,
ARGUMENT	2889:46	2889:46	12	module
FIELD	2889:46	2889:46	13	module
LEAF_NODE	2889:46	2889:46	14	module
LEAF_NODE	2889:52	2889:52	12	,
ARGUMENT	2890:25	2890:25	12	"%s: Can not read TIFF directory count"
FIELD	2890:25	2890:25	13	"%s: Can not read TIFF directory count"
LEAF_NODE	2890:25	2890:25	14	"%s: Can not read TIFF directory count"
LEAF_NODE	2890:64	2890:64	12	,
ARGUMENT	2891:25	2891:25	12	tif -> tif_name
FIELD	2891:25	2891:30	13	tif -> tif_name
LEAF_NODE	2891:25	2891:25	14	tif
LEAF_NODE	2891:28	2891:28	14	->
LEAF_NODE	2891:30	2891:30	14	tif_name
LEAF_NODE	2891:38	2891:38	12	)
LEAF_NODE	2891:39	2891:39	10	;
JUMP_STATEMENT	2892:12	2892:20	9	return 0 ;
KEYWORD	2892:12	2892:12	10	return
LEAF_NODE	2892:12	2892:12	11	return
DESTINATION	2892:19	2892:19	10	0
EXPR	2892:19	2892:19	11	0
FIELD	2892:19	2892:19	12	0
LEAF_NODE	2892:19	2892:19	13	0
LEAF_NODE	2892:20	2892:20	10	;
LEAF_NODE	2893:8	2893:8	8	}
SELECTION	2894:8	2895:12	6	
KEYWORD	2894:8	2894:8	7	if
LEAF_NODE	2894:8	2894:8	8	if
LEAF_NODE	2894:11	2894:11	7	(
CONDITION	2894:12	2894:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	2894:12	2894:29	8	tif -> tif_flags & TIFF_SWAB
FIELD	2894:12	2894:17	9	tif -> tif_flags
LEAF_NODE	2894:12	2894:12	10	tif
LEAF_NODE	2894:15	2894:15	10	->
LEAF_NODE	2894:17	2894:17	10	tif_flags
LEAF_NODE	2894:27	2894:27	9	&
FIELD	2894:29	2894:29	9	TIFF_SWAB
LEAF_NODE	2894:29	2894:29	10	TIFF_SWAB
LEAF_NODE	2894:38	2894:38	7	)
STATEMENTS	2895:12	2895:12	7	
EXPR_STATEMENT	2895:12	2895:38	8	TIFFSwabLong8 ( & dircount64 ) ;
EXPR	2895:12	2895:12	9	TIFFSwabLong8 ( & dircount64 )
FUNCTION_CALL	2895:12	2895:37	10	TIFFSwabLong8 ( & dircount64 )
CALLEE	2895:12	2895:12	11	TIFFSwabLong8
LEAF_NODE	2895:12	2895:12	12	TIFFSwabLong8
LEAF_NODE	2895:25	2895:25	11	(
ARGUMENT	2895:26	2895:26	11	& dircount64
UNARY_EXPR	2895:26	2895:27	12	& dircount64
UNARY_OPERATOR	2895:26	2895:26	13	&
LEAF_NODE	2895:26	2895:26	14	&
FIELD	2895:27	2895:27	13	dircount64
LEAF_NODE	2895:27	2895:27	14	dircount64
LEAF_NODE	2895:37	2895:37	11	)
LEAF_NODE	2895:38	2895:38	9	;
EXPR_STATEMENT	2896:8	2896:37	6	dircount = ( uint16 ) dircount64 ;
EXPR	2896:8	2896:8	7	dircount = ( uint16 ) dircount64
ASSIGN	2896:8	2896:19	8	dircount = ( uint16 ) dircount64
LVAL	2896:8	2896:8	9	dircount
FIELD	2896:8	2896:8	10	dircount
LEAF_NODE	2896:8	2896:8	11	dircount
ASSIGN_OP	2896:17	2896:17	9	=
LEAF_NODE	2896:17	2896:17	10	=
RVAL	2896:19	2896:27	9	( uint16 ) dircount64
LEAF_NODE	2896:19	2896:19	10	(
TYPE_NAME	2896:20	2896:20	10	uint16
LEAF_NODE	2896:20	2896:20	11	uint16
LEAF_NODE	2896:26	2896:26	10	)
FIELD	2896:27	2896:27	10	dircount64
LEAF_NODE	2896:27	2896:27	11	dircount64
LEAF_NODE	2896:37	2896:37	7	;
EXPR_STATEMENT	2897:8	2897:20	6	dirsize = 20 ;
EXPR	2897:8	2897:8	7	dirsize = 20
ASSIGN	2897:8	2897:18	8	dirsize = 20
LVAL	2897:8	2897:8	9	dirsize
FIELD	2897:8	2897:8	10	dirsize
LEAF_NODE	2897:8	2897:8	11	dirsize
ASSIGN_OP	2897:16	2897:16	9	=
LEAF_NODE	2897:16	2897:16	10	=
RVAL	2897:18	2897:18	9	20
FIELD	2897:18	2897:18	10	20
LEAF_NODE	2897:18	2897:18	11	20
LEAF_NODE	2897:20	2897:20	7	;
EXPR_STATEMENT	2898:8	2898:24	6	read_offset += 8 ;
EXPR	2898:8	2898:8	7	read_offset += 8
ASSIGN	2898:8	2898:23	8	read_offset += 8
LVAL	2898:8	2898:8	9	read_offset
FIELD	2898:8	2898:8	10	read_offset
LEAF_NODE	2898:8	2898:8	11	read_offset
ASSIGN_OP	2898:20	2898:20	9	+=
LEAF_NODE	2898:20	2898:20	10	+=
RVAL	2898:23	2898:23	9	8
FIELD	2898:23	2898:23	10	8
LEAF_NODE	2898:23	2898:23	11	8
LEAF_NODE	2898:24	2898:24	7	;
LEAF_NODE	2899:4	2899:4	5	}
ITERATION	2904:4	2905:4	3	
KEYWORD	2904:4	2904:4	4	while
LEAF_NODE	2904:4	2904:4	5	while
LEAF_NODE	2904:9	2904:9	4	(
CONDITION	2904:11	2904:11	4	dircount > 0
EXPR	2904:11	2904:22	5	dircount > 0
FIELD	2904:11	2904:11	6	dircount
LEAF_NODE	2904:11	2904:11	7	dircount
REL_OPERATOR	2904:20	2904:20	6	>
LEAF_NODE	2904:20	2904:20	7	>
FIELD	2904:22	2904:22	6	0
LEAF_NODE	2904:22	2904:22	7	0
LEAF_NODE	2904:24	2904:24	4	)
STATEMENTS	2905:4	2921:4	4	
LEAF_NODE	2905:4	2905:4	5	{
STATEMENTS	2906:8	2920:8	5	
SELECTION	2906:8	2906:49	6	
KEYWORD	2906:8	2906:8	7	if
LEAF_NODE	2906:8	2906:8	8	if
LEAF_NODE	2906:11	2906:11	7	(
CONDITION	2906:12	2906:12	7	! ReadOK ( tif , direntry_raw , dirsize )
EXPR	2906:12	2906:12	8	! ReadOK ( tif , direntry_raw , dirsize )
UNARY_EXPR	2906:12	2906:13	9	! ReadOK ( tif , direntry_raw , dirsize )
UNARY_OPERATOR	2906:12	2906:12	10	!
LEAF_NODE	2906:12	2906:12	11	!
FUNCTION_CALL	2906:13	2906:46	10	ReadOK ( tif , direntry_raw , dirsize )
CALLEE	2906:13	2906:13	11	ReadOK
LEAF_NODE	2906:13	2906:13	12	ReadOK
LEAF_NODE	2906:19	2906:19	11	(
ARGUMENT	2906:20	2906:20	11	tif
FIELD	2906:20	2906:20	12	tif
LEAF_NODE	2906:20	2906:20	13	tif
LEAF_NODE	2906:23	2906:23	11	,
ARGUMENT	2906:25	2906:25	11	direntry_raw
FIELD	2906:25	2906:25	12	direntry_raw
LEAF_NODE	2906:25	2906:25	13	direntry_raw
LEAF_NODE	2906:37	2906:37	11	,
ARGUMENT	2906:39	2906:39	11	dirsize
FIELD	2906:39	2906:39	12	dirsize
LEAF_NODE	2906:39	2906:39	13	dirsize
LEAF_NODE	2906:46	2906:46	11	)
LEAF_NODE	2906:47	2906:47	7	)
STATEMENTS	2906:49	2911:8	7	
LEAF_NODE	2906:49	2906:49	8	{
STATEMENTS	2907:12	2910:12	8	
EXPR_STATEMENT	2907:12	2909:39	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory entry." , tif -> tif_name ) ;
EXPR	2907:12	2907:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory entry." , tif -> tif_name )
FUNCTION_CALL	2907:12	2909:38	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory entry." , tif -> tif_name )
CALLEE	2907:12	2907:12	12	TIFFErrorExt
LEAF_NODE	2907:12	2907:12	13	TIFFErrorExt
LEAF_NODE	2907:24	2907:24	12	(
ARGUMENT	2907:25	2907:25	12	tif -> tif_clientdata
FIELD	2907:25	2907:30	13	tif -> tif_clientdata
LEAF_NODE	2907:25	2907:25	14	tif
LEAF_NODE	2907:28	2907:28	14	->
LEAF_NODE	2907:30	2907:30	14	tif_clientdata
LEAF_NODE	2907:44	2907:44	12	,
ARGUMENT	2907:46	2907:46	12	module
FIELD	2907:46	2907:46	13	module
LEAF_NODE	2907:46	2907:46	14	module
LEAF_NODE	2907:52	2907:52	12	,
ARGUMENT	2908:25	2908:25	12	"%s: Can not read TIFF directory entry."
FIELD	2908:25	2908:25	13	"%s: Can not read TIFF directory entry."
LEAF_NODE	2908:25	2908:25	14	"%s: Can not read TIFF directory entry."
LEAF_NODE	2908:65	2908:65	12	,
ARGUMENT	2909:25	2909:25	12	tif -> tif_name
FIELD	2909:25	2909:30	13	tif -> tif_name
LEAF_NODE	2909:25	2909:25	14	tif
LEAF_NODE	2909:28	2909:28	14	->
LEAF_NODE	2909:30	2909:30	14	tif_name
LEAF_NODE	2909:38	2909:38	12	)
LEAF_NODE	2909:39	2909:39	10	;
JUMP_STATEMENT	2910:12	2910:20	9	return 0 ;
KEYWORD	2910:12	2910:12	10	return
LEAF_NODE	2910:12	2910:12	11	return
DESTINATION	2910:19	2910:19	10	0
EXPR	2910:19	2910:19	11	0
FIELD	2910:19	2910:19	12	0
LEAF_NODE	2910:19	2910:19	13	0
LEAF_NODE	2910:20	2910:20	10	;
LEAF_NODE	2911:8	2911:8	8	}
EXPR_STATEMENT	2913:8	2913:62	6	memcpy ( & entry_tag , direntry_raw + 0 , sizeof ( uint16 ) ) ;
EXPR	2913:8	2913:8	7	memcpy ( & entry_tag , direntry_raw + 0 , sizeof ( uint16 ) )
FUNCTION_CALL	2913:8	2913:61	8	memcpy ( & entry_tag , direntry_raw + 0 , sizeof ( uint16 ) )
CALLEE	2913:8	2913:8	9	memcpy
LEAF_NODE	2913:8	2913:8	10	memcpy
LEAF_NODE	2913:14	2913:14	9	(
ARGUMENT	2913:16	2913:16	9	& entry_tag
UNARY_EXPR	2913:16	2913:17	10	& entry_tag
UNARY_OPERATOR	2913:16	2913:16	11	&
LEAF_NODE	2913:16	2913:16	12	&
FIELD	2913:17	2913:17	11	entry_tag
LEAF_NODE	2913:17	2913:17	12	entry_tag
LEAF_NODE	2913:26	2913:26	9	,
ARGUMENT	2913:28	2913:43	9	direntry_raw + 0
FIELD	2913:28	2913:28	10	direntry_raw
LEAF_NODE	2913:28	2913:28	11	direntry_raw
LEAF_NODE	2913:41	2913:41	10	+
FIELD	2913:43	2913:43	10	0
LEAF_NODE	2913:43	2913:43	11	0
LEAF_NODE	2913:44	2913:44	9	,
ARGUMENT	2913:46	2913:46	9	sizeof ( uint16 )
FUNCTION_CALL	2913:46	2913:59	10	sizeof ( uint16 )
CALLEE	2913:46	2913:46	11	sizeof
LEAF_NODE	2913:46	2913:46	12	sizeof
LEAF_NODE	2913:52	2913:52	11	(
ARGUMENT	2913:53	2913:53	11	uint16
FIELD	2913:53	2913:53	12	uint16
LEAF_NODE	2913:53	2913:53	13	uint16
LEAF_NODE	2913:59	2913:59	11	)
LEAF_NODE	2913:61	2913:61	9	)
LEAF_NODE	2913:62	2913:62	7	;
SELECTION	2914:8	2915:12	6	
KEYWORD	2914:8	2914:8	7	if
LEAF_NODE	2914:8	2914:8	8	if
LEAF_NODE	2914:11	2914:11	7	(
CONDITION	2914:12	2914:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	2914:12	2914:27	8	tif -> tif_flags & TIFF_SWAB
FIELD	2914:12	2914:17	9	tif -> tif_flags
LEAF_NODE	2914:12	2914:12	10	tif
LEAF_NODE	2914:15	2914:15	10	->
LEAF_NODE	2914:17	2914:17	10	tif_flags
LEAF_NODE	2914:26	2914:26	9	&
FIELD	2914:27	2914:27	9	TIFF_SWAB
LEAF_NODE	2914:27	2914:27	10	TIFF_SWAB
LEAF_NODE	2914:36	2914:36	7	)
STATEMENTS	2915:12	2915:12	7	
EXPR_STATEMENT	2915:12	2915:39	8	TIFFSwabShort ( & entry_tag ) ;
EXPR	2915:12	2915:12	9	TIFFSwabShort ( & entry_tag )
FUNCTION_CALL	2915:12	2915:38	10	TIFFSwabShort ( & entry_tag )
CALLEE	2915:12	2915:12	11	TIFFSwabShort
LEAF_NODE	2915:12	2915:12	12	TIFFSwabShort
LEAF_NODE	2915:25	2915:25	11	(
ARGUMENT	2915:27	2915:27	11	& entry_tag
UNARY_EXPR	2915:27	2915:28	12	& entry_tag
UNARY_OPERATOR	2915:27	2915:27	13	&
LEAF_NODE	2915:27	2915:27	14	&
FIELD	2915:28	2915:28	13	entry_tag
LEAF_NODE	2915:28	2915:28	14	entry_tag
LEAF_NODE	2915:38	2915:38	11	)
LEAF_NODE	2915:39	2915:39	9	;
SELECTION	2917:8	2918:12	6	
KEYWORD	2917:8	2917:8	7	if
LEAF_NODE	2917:8	2917:8	8	if
LEAF_NODE	2917:10	2917:10	7	(
CONDITION	2917:12	2917:12	7	entry_tag == tag
EXPR	2917:12	2917:25	8	entry_tag == tag
FIELD	2917:12	2917:12	9	entry_tag
LEAF_NODE	2917:12	2917:12	10	entry_tag
EQ_OPERATOR	2917:22	2917:22	9	==
LEAF_NODE	2917:22	2917:22	10	==
FIELD	2917:25	2917:25	9	tag
LEAF_NODE	2917:25	2917:25	10	tag
LEAF_NODE	2917:29	2917:29	7	)
STATEMENTS	2918:12	2918:12	7	
JUMP_STATEMENT	2918:12	2918:17	8	break DESTINATION ;
KEYWORD	2918:12	2918:12	9	break
LEAF_NODE	2918:12	2918:12	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	2918:17	2918:17	9	;
EXPR_STATEMENT	2920:8	2920:30	6	read_offset += dirsize ;
EXPR	2920:8	2920:8	7	read_offset += dirsize
ASSIGN	2920:8	2920:23	8	read_offset += dirsize
LVAL	2920:8	2920:8	9	read_offset
FIELD	2920:8	2920:8	10	read_offset
LEAF_NODE	2920:8	2920:8	11	read_offset
ASSIGN_OP	2920:20	2920:20	9	+=
LEAF_NODE	2920:20	2920:20	10	+=
RVAL	2920:23	2920:23	9	dirsize
FIELD	2920:23	2920:23	10	dirsize
LEAF_NODE	2920:23	2920:23	11	dirsize
LEAF_NODE	2920:30	2920:30	7	;
LEAF_NODE	2921:4	2921:4	5	}
SELECTION	2923:4	2924:4	3	
KEYWORD	2923:4	2923:4	4	if
LEAF_NODE	2923:4	2923:4	5	if
LEAF_NODE	2923:6	2923:6	4	(
CONDITION	2923:8	2923:8	4	entry_tag != tag
EXPR	2923:8	2923:21	5	entry_tag != tag
FIELD	2923:8	2923:8	6	entry_tag
LEAF_NODE	2923:8	2923:8	7	entry_tag
EQ_OPERATOR	2923:18	2923:18	6	!=
LEAF_NODE	2923:18	2923:18	7	!=
FIELD	2923:21	2923:21	6	tag
LEAF_NODE	2923:21	2923:21	7	tag
LEAF_NODE	2923:25	2923:25	4	)
STATEMENTS	2924:4	2929:4	4	
LEAF_NODE	2924:4	2924:4	5	{
STATEMENTS	2925:8	2928:8	5	
EXPR_STATEMENT	2925:8	2927:41	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Could not find tag %d." , tif -> tif_name , tag ) ;
EXPR	2925:8	2925:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Could not find tag %d." , tif -> tif_name , tag )
FUNCTION_CALL	2925:8	2927:40	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Could not find tag %d." , tif -> tif_name , tag )
CALLEE	2925:8	2925:8	9	TIFFErrorExt
LEAF_NODE	2925:8	2925:8	10	TIFFErrorExt
LEAF_NODE	2925:20	2925:20	9	(
ARGUMENT	2925:21	2925:21	9	tif -> tif_clientdata
FIELD	2925:21	2925:26	10	tif -> tif_clientdata
LEAF_NODE	2925:21	2925:21	11	tif
LEAF_NODE	2925:24	2925:24	11	->
LEAF_NODE	2925:26	2925:26	11	tif_clientdata
LEAF_NODE	2925:40	2925:40	9	,
ARGUMENT	2925:42	2925:42	9	module
FIELD	2925:42	2925:42	10	module
LEAF_NODE	2925:42	2925:42	11	module
LEAF_NODE	2925:48	2925:48	9	,
ARGUMENT	2926:21	2926:21	9	"%s: Could not find tag %d."
FIELD	2926:21	2926:21	10	"%s: Could not find tag %d."
LEAF_NODE	2926:21	2926:21	11	"%s: Could not find tag %d."
LEAF_NODE	2926:49	2926:49	9	,
ARGUMENT	2927:21	2927:21	9	tif -> tif_name
FIELD	2927:21	2927:26	10	tif -> tif_name
LEAF_NODE	2927:21	2927:21	11	tif
LEAF_NODE	2927:24	2927:24	11	->
LEAF_NODE	2927:26	2927:26	11	tif_name
LEAF_NODE	2927:34	2927:34	9	,
ARGUMENT	2927:36	2927:36	9	tag
FIELD	2927:36	2927:36	10	tag
LEAF_NODE	2927:36	2927:36	11	tag
LEAF_NODE	2927:40	2927:40	9	)
LEAF_NODE	2927:41	2927:41	7	;
JUMP_STATEMENT	2928:8	2928:16	6	return 0 ;
KEYWORD	2928:8	2928:8	7	return
LEAF_NODE	2928:8	2928:8	8	return
DESTINATION	2928:15	2928:15	7	0
EXPR	2928:15	2928:15	8	0
FIELD	2928:15	2928:15	9	0
LEAF_NODE	2928:15	2928:15	10	0
LEAF_NODE	2928:16	2928:16	7	;
LEAF_NODE	2929:4	2929:4	5	}
EXPR_STATEMENT	2934:4	2934:59	3	memcpy ( & entry_type , direntry_raw + 2 , sizeof ( uint16 ) ) ;
EXPR	2934:4	2934:4	4	memcpy ( & entry_type , direntry_raw + 2 , sizeof ( uint16 ) )
FUNCTION_CALL	2934:4	2934:58	5	memcpy ( & entry_type , direntry_raw + 2 , sizeof ( uint16 ) )
CALLEE	2934:4	2934:4	6	memcpy
LEAF_NODE	2934:4	2934:4	7	memcpy
LEAF_NODE	2934:10	2934:10	6	(
ARGUMENT	2934:12	2934:12	6	& entry_type
UNARY_EXPR	2934:12	2934:13	7	& entry_type
UNARY_OPERATOR	2934:12	2934:12	8	&
LEAF_NODE	2934:12	2934:12	9	&
FIELD	2934:13	2934:13	8	entry_type
LEAF_NODE	2934:13	2934:13	9	entry_type
LEAF_NODE	2934:23	2934:23	6	,
ARGUMENT	2934:25	2934:40	6	direntry_raw + 2
FIELD	2934:25	2934:25	7	direntry_raw
LEAF_NODE	2934:25	2934:25	8	direntry_raw
LEAF_NODE	2934:38	2934:38	7	+
FIELD	2934:40	2934:40	7	2
LEAF_NODE	2934:40	2934:40	8	2
LEAF_NODE	2934:41	2934:41	6	,
ARGUMENT	2934:43	2934:43	6	sizeof ( uint16 )
FUNCTION_CALL	2934:43	2934:56	7	sizeof ( uint16 )
CALLEE	2934:43	2934:43	8	sizeof
LEAF_NODE	2934:43	2934:43	9	sizeof
LEAF_NODE	2934:49	2934:49	8	(
ARGUMENT	2934:50	2934:50	8	uint16
FIELD	2934:50	2934:50	9	uint16
LEAF_NODE	2934:50	2934:50	10	uint16
LEAF_NODE	2934:56	2934:56	8	)
LEAF_NODE	2934:58	2934:58	6	)
LEAF_NODE	2934:59	2934:59	4	;
SELECTION	2935:4	2936:8	3	
KEYWORD	2935:4	2935:4	4	if
LEAF_NODE	2935:4	2935:4	5	if
LEAF_NODE	2935:7	2935:7	4	(
CONDITION	2935:8	2935:8	4	tif -> tif_flags & TIFF_SWAB
EXPR	2935:8	2935:23	5	tif -> tif_flags & TIFF_SWAB
FIELD	2935:8	2935:13	6	tif -> tif_flags
LEAF_NODE	2935:8	2935:8	7	tif
LEAF_NODE	2935:11	2935:11	7	->
LEAF_NODE	2935:13	2935:13	7	tif_flags
LEAF_NODE	2935:22	2935:22	6	&
FIELD	2935:23	2935:23	6	TIFF_SWAB
LEAF_NODE	2935:23	2935:23	7	TIFF_SWAB
LEAF_NODE	2935:32	2935:32	4	)
STATEMENTS	2936:8	2936:8	4	
EXPR_STATEMENT	2936:8	2936:36	5	TIFFSwabShort ( & entry_type ) ;
EXPR	2936:8	2936:8	6	TIFFSwabShort ( & entry_type )
FUNCTION_CALL	2936:8	2936:35	7	TIFFSwabShort ( & entry_type )
CALLEE	2936:8	2936:8	8	TIFFSwabShort
LEAF_NODE	2936:8	2936:8	9	TIFFSwabShort
LEAF_NODE	2936:21	2936:21	8	(
ARGUMENT	2936:23	2936:23	8	& entry_type
UNARY_EXPR	2936:23	2936:24	9	& entry_type
UNARY_OPERATOR	2936:23	2936:23	10	&
LEAF_NODE	2936:23	2936:23	11	&
FIELD	2936:24	2936:24	10	entry_type
LEAF_NODE	2936:24	2936:24	11	entry_type
LEAF_NODE	2936:35	2936:35	8	)
LEAF_NODE	2936:36	2936:36	6	;
SELECTION	2938:4	2939:4	3	
KEYWORD	2938:4	2938:4	4	if
LEAF_NODE	2938:4	2938:4	5	if
LEAF_NODE	2938:7	2938:7	4	(
CONDITION	2938:8	2938:8	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2938:8	2938:8	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2938:8	2938:37	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2938:8	2938:8	7	!
LEAF_NODE	2938:8	2938:8	8	!
LEAF_NODE	2938:9	2938:9	7	(
FIELD	2938:10	2938:15	7	tif -> tif_flags
LEAF_NODE	2938:10	2938:10	8	tif
LEAF_NODE	2938:13	2938:13	8	->
LEAF_NODE	2938:15	2938:15	8	tif_flags
LEAF_NODE	2938:24	2938:24	7	&
FIELD	2938:25	2938:25	7	TIFF_BIGTIFF
LEAF_NODE	2938:25	2938:25	8	TIFF_BIGTIFF
LEAF_NODE	2938:37	2938:37	7	)
LEAF_NODE	2938:38	2938:38	4	)
STATEMENTS	2939:4	2951:4	4	
LEAF_NODE	2939:4	2939:4	5	{
STATEMENTS	2940:8	2950:8	5	
SIMPLE_DECL	2940:8	2940:20	6	uint32 value ;
VAR_DECL	2940:8	2940:15	7	uint32 value
TYPE	2940:8	2940:8	8	uint32
TYPE_NAME	2940:8	2940:8	9	uint32
LEAF_NODE	2940:8	2940:8	10	uint32
NAME	2940:15	2940:15	8	value
LEAF_NODE	2940:15	2940:15	9	value
LEAF_NODE	2940:20	2940:20	7	;
EXPR_STATEMENT	2942:8	2942:58	6	memcpy ( & value , direntry_raw + 4 , sizeof ( uint32 ) ) ;
EXPR	2942:8	2942:8	7	memcpy ( & value , direntry_raw + 4 , sizeof ( uint32 ) )
FUNCTION_CALL	2942:8	2942:57	8	memcpy ( & value , direntry_raw + 4 , sizeof ( uint32 ) )
CALLEE	2942:8	2942:8	9	memcpy
LEAF_NODE	2942:8	2942:8	10	memcpy
LEAF_NODE	2942:14	2942:14	9	(
ARGUMENT	2942:16	2942:16	9	& value
UNARY_EXPR	2942:16	2942:17	10	& value
UNARY_OPERATOR	2942:16	2942:16	11	&
LEAF_NODE	2942:16	2942:16	12	&
FIELD	2942:17	2942:17	11	value
LEAF_NODE	2942:17	2942:17	12	value
LEAF_NODE	2942:22	2942:22	9	,
ARGUMENT	2942:24	2942:39	9	direntry_raw + 4
FIELD	2942:24	2942:24	10	direntry_raw
LEAF_NODE	2942:24	2942:24	11	direntry_raw
LEAF_NODE	2942:37	2942:37	10	+
FIELD	2942:39	2942:39	10	4
LEAF_NODE	2942:39	2942:39	11	4
LEAF_NODE	2942:40	2942:40	9	,
ARGUMENT	2942:42	2942:42	9	sizeof ( uint32 )
FUNCTION_CALL	2942:42	2942:55	10	sizeof ( uint32 )
CALLEE	2942:42	2942:42	11	sizeof
LEAF_NODE	2942:42	2942:42	12	sizeof
LEAF_NODE	2942:48	2942:48	11	(
ARGUMENT	2942:49	2942:49	11	uint32
FIELD	2942:49	2942:49	12	uint32
LEAF_NODE	2942:49	2942:49	13	uint32
LEAF_NODE	2942:55	2942:55	11	)
LEAF_NODE	2942:57	2942:57	9	)
LEAF_NODE	2942:58	2942:58	7	;
SELECTION	2943:8	2944:12	6	
KEYWORD	2943:8	2943:8	7	if
LEAF_NODE	2943:8	2943:8	8	if
LEAF_NODE	2943:11	2943:11	7	(
CONDITION	2943:12	2943:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	2943:12	2943:27	8	tif -> tif_flags & TIFF_SWAB
FIELD	2943:12	2943:17	9	tif -> tif_flags
LEAF_NODE	2943:12	2943:12	10	tif
LEAF_NODE	2943:15	2943:15	10	->
LEAF_NODE	2943:17	2943:17	10	tif_flags
LEAF_NODE	2943:26	2943:26	9	&
FIELD	2943:27	2943:27	9	TIFF_SWAB
LEAF_NODE	2943:27	2943:27	10	TIFF_SWAB
LEAF_NODE	2943:36	2943:36	7	)
STATEMENTS	2944:12	2944:12	7	
EXPR_STATEMENT	2944:12	2944:34	8	TIFFSwabLong ( & value ) ;
EXPR	2944:12	2944:12	9	TIFFSwabLong ( & value )
FUNCTION_CALL	2944:12	2944:33	10	TIFFSwabLong ( & value )
CALLEE	2944:12	2944:12	11	TIFFSwabLong
LEAF_NODE	2944:12	2944:12	12	TIFFSwabLong
LEAF_NODE	2944:24	2944:24	11	(
ARGUMENT	2944:26	2944:26	11	& value
UNARY_EXPR	2944:26	2944:27	12	& value
UNARY_OPERATOR	2944:26	2944:26	13	&
LEAF_NODE	2944:26	2944:26	14	&
FIELD	2944:27	2944:27	13	value
LEAF_NODE	2944:27	2944:27	14	value
LEAF_NODE	2944:33	2944:33	11	)
LEAF_NODE	2944:34	2944:34	9	;
EXPR_STATEMENT	2945:8	2945:27	6	entry_count = value ;
EXPR	2945:8	2945:8	7	entry_count = value
ASSIGN	2945:8	2945:22	8	entry_count = value
LVAL	2945:8	2945:8	9	entry_count
FIELD	2945:8	2945:8	10	entry_count
LEAF_NODE	2945:8	2945:8	11	entry_count
ASSIGN_OP	2945:20	2945:20	9	=
LEAF_NODE	2945:20	2945:20	10	=
RVAL	2945:22	2945:22	9	value
FIELD	2945:22	2945:22	10	value
LEAF_NODE	2945:22	2945:22	11	value
LEAF_NODE	2945:27	2945:27	7	;
EXPR_STATEMENT	2947:8	2947:58	6	memcpy ( & value , direntry_raw + 8 , sizeof ( uint32 ) ) ;
EXPR	2947:8	2947:8	7	memcpy ( & value , direntry_raw + 8 , sizeof ( uint32 ) )
FUNCTION_CALL	2947:8	2947:57	8	memcpy ( & value , direntry_raw + 8 , sizeof ( uint32 ) )
CALLEE	2947:8	2947:8	9	memcpy
LEAF_NODE	2947:8	2947:8	10	memcpy
LEAF_NODE	2947:14	2947:14	9	(
ARGUMENT	2947:16	2947:16	9	& value
UNARY_EXPR	2947:16	2947:17	10	& value
UNARY_OPERATOR	2947:16	2947:16	11	&
LEAF_NODE	2947:16	2947:16	12	&
FIELD	2947:17	2947:17	11	value
LEAF_NODE	2947:17	2947:17	12	value
LEAF_NODE	2947:22	2947:22	9	,
ARGUMENT	2947:24	2947:39	9	direntry_raw + 8
FIELD	2947:24	2947:24	10	direntry_raw
LEAF_NODE	2947:24	2947:24	11	direntry_raw
LEAF_NODE	2947:37	2947:37	10	+
FIELD	2947:39	2947:39	10	8
LEAF_NODE	2947:39	2947:39	11	8
LEAF_NODE	2947:40	2947:40	9	,
ARGUMENT	2947:42	2947:42	9	sizeof ( uint32 )
FUNCTION_CALL	2947:42	2947:55	10	sizeof ( uint32 )
CALLEE	2947:42	2947:42	11	sizeof
LEAF_NODE	2947:42	2947:42	12	sizeof
LEAF_NODE	2947:48	2947:48	11	(
ARGUMENT	2947:49	2947:49	11	uint32
FIELD	2947:49	2947:49	12	uint32
LEAF_NODE	2947:49	2947:49	13	uint32
LEAF_NODE	2947:55	2947:55	11	)
LEAF_NODE	2947:57	2947:57	9	)
LEAF_NODE	2947:58	2947:58	7	;
SELECTION	2948:8	2949:12	6	
KEYWORD	2948:8	2948:8	7	if
LEAF_NODE	2948:8	2948:8	8	if
LEAF_NODE	2948:11	2948:11	7	(
CONDITION	2948:12	2948:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	2948:12	2948:27	8	tif -> tif_flags & TIFF_SWAB
FIELD	2948:12	2948:17	9	tif -> tif_flags
LEAF_NODE	2948:12	2948:12	10	tif
LEAF_NODE	2948:15	2948:15	10	->
LEAF_NODE	2948:17	2948:17	10	tif_flags
LEAF_NODE	2948:26	2948:26	9	&
FIELD	2948:27	2948:27	9	TIFF_SWAB
LEAF_NODE	2948:27	2948:27	10	TIFF_SWAB
LEAF_NODE	2948:36	2948:36	7	)
STATEMENTS	2949:12	2949:12	7	
EXPR_STATEMENT	2949:12	2949:34	8	TIFFSwabLong ( & value ) ;
EXPR	2949:12	2949:12	9	TIFFSwabLong ( & value )
FUNCTION_CALL	2949:12	2949:33	10	TIFFSwabLong ( & value )
CALLEE	2949:12	2949:12	11	TIFFSwabLong
LEAF_NODE	2949:12	2949:12	12	TIFFSwabLong
LEAF_NODE	2949:24	2949:24	11	(
ARGUMENT	2949:26	2949:26	11	& value
UNARY_EXPR	2949:26	2949:27	12	& value
UNARY_OPERATOR	2949:26	2949:26	13	&
LEAF_NODE	2949:26	2949:26	14	&
FIELD	2949:27	2949:27	13	value
LEAF_NODE	2949:27	2949:27	14	value
LEAF_NODE	2949:33	2949:33	11	)
LEAF_NODE	2949:34	2949:34	9	;
EXPR_STATEMENT	2950:8	2950:28	6	entry_offset = value ;
EXPR	2950:8	2950:8	7	entry_offset = value
ASSIGN	2950:8	2950:23	8	entry_offset = value
LVAL	2950:8	2950:8	9	entry_offset
FIELD	2950:8	2950:8	10	entry_offset
LEAF_NODE	2950:8	2950:8	11	entry_offset
ASSIGN_OP	2950:21	2950:21	9	=
LEAF_NODE	2950:21	2950:21	10	=
RVAL	2950:23	2950:23	9	value
FIELD	2950:23	2950:23	10	value
LEAF_NODE	2950:23	2950:23	11	value
LEAF_NODE	2950:28	2950:28	7	;
LEAF_NODE	2951:4	2951:4	5	}
SELECTION	2952:4	2953:4	3	
KEYWORD	2952:4	2952:4	4	else
LEAF_NODE	2952:4	2952:4	5	else
STATEMENTS	2953:4	2961:4	4	
LEAF_NODE	2953:4	2953:4	5	{
STATEMENTS	2954:8	2959:8	5	
EXPR_STATEMENT	2954:8	2954:64	6	memcpy ( & entry_count , direntry_raw + 4 , sizeof ( uint64 ) ) ;
EXPR	2954:8	2954:8	7	memcpy ( & entry_count , direntry_raw + 4 , sizeof ( uint64 ) )
FUNCTION_CALL	2954:8	2954:63	8	memcpy ( & entry_count , direntry_raw + 4 , sizeof ( uint64 ) )
CALLEE	2954:8	2954:8	9	memcpy
LEAF_NODE	2954:8	2954:8	10	memcpy
LEAF_NODE	2954:14	2954:14	9	(
ARGUMENT	2954:16	2954:16	9	& entry_count
UNARY_EXPR	2954:16	2954:17	10	& entry_count
UNARY_OPERATOR	2954:16	2954:16	11	&
LEAF_NODE	2954:16	2954:16	12	&
FIELD	2954:17	2954:17	11	entry_count
LEAF_NODE	2954:17	2954:17	12	entry_count
LEAF_NODE	2954:28	2954:28	9	,
ARGUMENT	2954:30	2954:45	9	direntry_raw + 4
FIELD	2954:30	2954:30	10	direntry_raw
LEAF_NODE	2954:30	2954:30	11	direntry_raw
LEAF_NODE	2954:43	2954:43	10	+
FIELD	2954:45	2954:45	10	4
LEAF_NODE	2954:45	2954:45	11	4
LEAF_NODE	2954:46	2954:46	9	,
ARGUMENT	2954:48	2954:48	9	sizeof ( uint64 )
FUNCTION_CALL	2954:48	2954:61	10	sizeof ( uint64 )
CALLEE	2954:48	2954:48	11	sizeof
LEAF_NODE	2954:48	2954:48	12	sizeof
LEAF_NODE	2954:54	2954:54	11	(
ARGUMENT	2954:55	2954:55	11	uint64
FIELD	2954:55	2954:55	12	uint64
LEAF_NODE	2954:55	2954:55	13	uint64
LEAF_NODE	2954:61	2954:61	11	)
LEAF_NODE	2954:63	2954:63	9	)
LEAF_NODE	2954:64	2954:64	7	;
SELECTION	2955:8	2956:12	6	
KEYWORD	2955:8	2955:8	7	if
LEAF_NODE	2955:8	2955:8	8	if
LEAF_NODE	2955:11	2955:11	7	(
CONDITION	2955:12	2955:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	2955:12	2955:27	8	tif -> tif_flags & TIFF_SWAB
FIELD	2955:12	2955:17	9	tif -> tif_flags
LEAF_NODE	2955:12	2955:12	10	tif
LEAF_NODE	2955:15	2955:15	10	->
LEAF_NODE	2955:17	2955:17	10	tif_flags
LEAF_NODE	2955:26	2955:26	9	&
FIELD	2955:27	2955:27	9	TIFF_SWAB
LEAF_NODE	2955:27	2955:27	10	TIFF_SWAB
LEAF_NODE	2955:36	2955:36	7	)
STATEMENTS	2956:12	2956:12	7	
EXPR_STATEMENT	2956:12	2956:41	8	TIFFSwabLong8 ( & entry_count ) ;
EXPR	2956:12	2956:12	9	TIFFSwabLong8 ( & entry_count )
FUNCTION_CALL	2956:12	2956:40	10	TIFFSwabLong8 ( & entry_count )
CALLEE	2956:12	2956:12	11	TIFFSwabLong8
LEAF_NODE	2956:12	2956:12	12	TIFFSwabLong8
LEAF_NODE	2956:25	2956:25	11	(
ARGUMENT	2956:27	2956:27	11	& entry_count
UNARY_EXPR	2956:27	2956:28	12	& entry_count
UNARY_OPERATOR	2956:27	2956:27	13	&
LEAF_NODE	2956:27	2956:27	14	&
FIELD	2956:28	2956:28	13	entry_count
LEAF_NODE	2956:28	2956:28	14	entry_count
LEAF_NODE	2956:40	2956:40	11	)
LEAF_NODE	2956:41	2956:41	9	;
EXPR_STATEMENT	2958:8	2958:66	6	memcpy ( & entry_offset , direntry_raw + 12 , sizeof ( uint64 ) ) ;
EXPR	2958:8	2958:8	7	memcpy ( & entry_offset , direntry_raw + 12 , sizeof ( uint64 ) )
FUNCTION_CALL	2958:8	2958:65	8	memcpy ( & entry_offset , direntry_raw + 12 , sizeof ( uint64 ) )
CALLEE	2958:8	2958:8	9	memcpy
LEAF_NODE	2958:8	2958:8	10	memcpy
LEAF_NODE	2958:14	2958:14	9	(
ARGUMENT	2958:16	2958:16	9	& entry_offset
UNARY_EXPR	2958:16	2958:17	10	& entry_offset
UNARY_OPERATOR	2958:16	2958:16	11	&
LEAF_NODE	2958:16	2958:16	12	&
FIELD	2958:17	2958:17	11	entry_offset
LEAF_NODE	2958:17	2958:17	12	entry_offset
LEAF_NODE	2958:29	2958:29	9	,
ARGUMENT	2958:31	2958:46	9	direntry_raw + 12
FIELD	2958:31	2958:31	10	direntry_raw
LEAF_NODE	2958:31	2958:31	11	direntry_raw
LEAF_NODE	2958:44	2958:44	10	+
FIELD	2958:46	2958:46	10	12
LEAF_NODE	2958:46	2958:46	11	12
LEAF_NODE	2958:48	2958:48	9	,
ARGUMENT	2958:50	2958:50	9	sizeof ( uint64 )
FUNCTION_CALL	2958:50	2958:63	10	sizeof ( uint64 )
CALLEE	2958:50	2958:50	11	sizeof
LEAF_NODE	2958:50	2958:50	12	sizeof
LEAF_NODE	2958:56	2958:56	11	(
ARGUMENT	2958:57	2958:57	11	uint64
FIELD	2958:57	2958:57	12	uint64
LEAF_NODE	2958:57	2958:57	13	uint64
LEAF_NODE	2958:63	2958:63	11	)
LEAF_NODE	2958:65	2958:65	9	)
LEAF_NODE	2958:66	2958:66	7	;
SELECTION	2959:8	2960:12	6	
KEYWORD	2959:8	2959:8	7	if
LEAF_NODE	2959:8	2959:8	8	if
LEAF_NODE	2959:11	2959:11	7	(
CONDITION	2959:12	2959:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	2959:12	2959:27	8	tif -> tif_flags & TIFF_SWAB
FIELD	2959:12	2959:17	9	tif -> tif_flags
LEAF_NODE	2959:12	2959:12	10	tif
LEAF_NODE	2959:15	2959:15	10	->
LEAF_NODE	2959:17	2959:17	10	tif_flags
LEAF_NODE	2959:26	2959:26	9	&
FIELD	2959:27	2959:27	9	TIFF_SWAB
LEAF_NODE	2959:27	2959:27	10	TIFF_SWAB
LEAF_NODE	2959:36	2959:36	7	)
STATEMENTS	2960:12	2960:12	7	
EXPR_STATEMENT	2960:12	2960:42	8	TIFFSwabLong8 ( & entry_offset ) ;
EXPR	2960:12	2960:12	9	TIFFSwabLong8 ( & entry_offset )
FUNCTION_CALL	2960:12	2960:41	10	TIFFSwabLong8 ( & entry_offset )
CALLEE	2960:12	2960:12	11	TIFFSwabLong8
LEAF_NODE	2960:12	2960:12	12	TIFFSwabLong8
LEAF_NODE	2960:25	2960:25	11	(
ARGUMENT	2960:27	2960:27	11	& entry_offset
UNARY_EXPR	2960:27	2960:28	12	& entry_offset
UNARY_OPERATOR	2960:27	2960:27	13	&
LEAF_NODE	2960:27	2960:27	14	&
FIELD	2960:28	2960:28	13	entry_offset
LEAF_NODE	2960:28	2960:28	14	entry_offset
LEAF_NODE	2960:41	2960:41	11	)
LEAF_NODE	2960:42	2960:42	9	;
LEAF_NODE	2961:4	2961:4	5	}
SELECTION	2966:4	2967:4	3	
KEYWORD	2966:4	2966:4	4	if
LEAF_NODE	2966:4	2966:4	5	if
LEAF_NODE	2966:6	2966:6	4	(
CONDITION	2966:8	2966:8	4	entry_offset == 0 && entry_count == 0 && entry_type == 0
EXPR	2966:8	2966:8	5	entry_offset == 0 && entry_count == 0 && entry_type == 0
AND	2966:8	2966:29	6	entry_offset == 0 && entry_count == 0 && entry_type == 0
EXPR	2966:8	2966:24	7	entry_offset == 0
FIELD	2966:8	2966:8	8	entry_offset
LEAF_NODE	2966:8	2966:8	9	entry_offset
EQ_OPERATOR	2966:21	2966:21	8	==
LEAF_NODE	2966:21	2966:21	9	==
FIELD	2966:24	2966:24	8	0
LEAF_NODE	2966:24	2966:24	9	0
LEAF_NODE	2966:26	2966:26	7	&&
EXPR	2966:29	2966:29	7	entry_count == 0 && entry_type == 0
AND	2966:29	2966:49	8	entry_count == 0 && entry_type == 0
EXPR	2966:29	2966:44	9	entry_count == 0
FIELD	2966:29	2966:29	10	entry_count
LEAF_NODE	2966:29	2966:29	11	entry_count
EQ_OPERATOR	2966:41	2966:41	10	==
LEAF_NODE	2966:41	2966:41	11	==
FIELD	2966:44	2966:44	10	0
LEAF_NODE	2966:44	2966:44	11	0
LEAF_NODE	2966:46	2966:46	9	&&
EXPR	2966:49	2966:63	9	entry_type == 0
FIELD	2966:49	2966:49	10	entry_type
LEAF_NODE	2966:49	2966:49	11	entry_type
EQ_OPERATOR	2966:60	2966:60	10	==
LEAF_NODE	2966:60	2966:60	11	==
FIELD	2966:63	2966:63	10	0
LEAF_NODE	2966:63	2966:63	11	0
LEAF_NODE	2966:65	2966:65	4	)
STATEMENTS	2967:4	3008:4	4	
LEAF_NODE	2967:4	2967:4	5	{
STATEMENTS	2968:8	2972:8	5	
SELECTION	2968:8	2969:8	6	
KEYWORD	2968:8	2968:8	7	if
LEAF_NODE	2968:8	2968:8	8	if
LEAF_NODE	2968:10	2968:10	7	(
CONDITION	2968:12	2968:12	7	tag == TIFFTAG_TILEOFFSETS || tag == TIFFTAG_STRIPOFFSETS
EXPR	2968:12	2968:12	8	tag == TIFFTAG_TILEOFFSETS || tag == TIFFTAG_STRIPOFFSETS
OR	2968:12	2968:42	9	tag == TIFFTAG_TILEOFFSETS || tag == TIFFTAG_STRIPOFFSETS
EXPR	2968:12	2968:19	10	tag == TIFFTAG_TILEOFFSETS
FIELD	2968:12	2968:12	11	tag
LEAF_NODE	2968:12	2968:12	12	tag
EQ_OPERATOR	2968:16	2968:16	11	==
LEAF_NODE	2968:16	2968:16	12	==
FIELD	2968:19	2968:19	11	TIFFTAG_TILEOFFSETS
LEAF_NODE	2968:19	2968:19	12	TIFFTAG_TILEOFFSETS
LEAF_NODE	2968:39	2968:39	10	||
EXPR	2968:42	2968:49	10	tag == TIFFTAG_STRIPOFFSETS
FIELD	2968:42	2968:42	11	tag
LEAF_NODE	2968:42	2968:42	12	tag
EQ_OPERATOR	2968:46	2968:46	11	==
LEAF_NODE	2968:46	2968:46	12	==
FIELD	2968:49	2968:49	11	TIFFTAG_STRIPOFFSETS
LEAF_NODE	2968:49	2968:49	12	TIFFTAG_STRIPOFFSETS
LEAF_NODE	2968:70	2968:70	7	)
STATEMENTS	2969:8	2971:8	7	
LEAF_NODE	2969:8	2969:8	8	{
STATEMENTS	2970:12	2970:12	8	
EXPR_STATEMENT	2970:12	2970:79	9	entry_type = ( tif -> tif_flags & TIFF_BIGTIFF ) ? TIFF_LONG8 : TIFF_LONG ;
EXPR	2970:12	2970:12	10	entry_type = ( tif -> tif_flags & TIFF_BIGTIFF ) ? TIFF_LONG8 : TIFF_LONG
ASSIGN	2970:12	2970:25	11	entry_type = ( tif -> tif_flags & TIFF_BIGTIFF ) ? TIFF_LONG8 : TIFF_LONG
LVAL	2970:12	2970:12	12	entry_type
FIELD	2970:12	2970:12	13	entry_type
LEAF_NODE	2970:12	2970:12	14	entry_type
ASSIGN_OP	2970:23	2970:23	12	=
LEAF_NODE	2970:23	2970:23	13	=
RVAL	2970:25	2970:25	12	( tif -> tif_flags & TIFF_BIGTIFF ) ? TIFF_LONG8 : TIFF_LONG
COND_EXPR	2970:25	2970:70	13	( tif -> tif_flags & TIFF_BIGTIFF ) ? TIFF_LONG8 : TIFF_LONG
CONDITION	2970:25	2970:53	14	( tif -> tif_flags & TIFF_BIGTIFF )
LEAF_NODE	2970:25	2970:25	15	(
FIELD	2970:26	2970:31	15	tif -> tif_flags
LEAF_NODE	2970:26	2970:26	16	tif
LEAF_NODE	2970:29	2970:29	16	->
LEAF_NODE	2970:31	2970:31	16	tif_flags
LEAF_NODE	2970:40	2970:40	15	&
FIELD	2970:41	2970:41	15	TIFF_BIGTIFF
LEAF_NODE	2970:41	2970:41	16	TIFF_BIGTIFF
LEAF_NODE	2970:53	2970:53	15	)
LEAF_NODE	2970:55	2970:55	14	?
EXPR	2970:57	2970:57	14	TIFF_LONG8
FIELD	2970:57	2970:57	15	TIFF_LONG8
LEAF_NODE	2970:57	2970:57	16	TIFF_LONG8
LEAF_NODE	2970:68	2970:68	14	:
FIELD	2970:70	2970:70	14	TIFF_LONG
LEAF_NODE	2970:70	2970:70	15	TIFF_LONG
LEAF_NODE	2970:79	2970:79	10	;
LEAF_NODE	2971:8	2971:8	8	}
SELECTION	2972:8	2973:8	6	
KEYWORD	2972:8	2972:8	7	else
LEAF_NODE	2972:8	2972:8	8	else
STATEMENTS	2973:8	3007:8	7	
LEAF_NODE	2973:8	2973:8	8	{
STATEMENTS	2974:12	2987:12	8	
SIMPLE_DECL	2974:12	2974:33	9	int write_aslong8 ; write_aslong8 = 1 ;
VAR_DECL	2974:12	2974:16	10	int write_aslong8 ; write_aslong8 = 1
TYPE	2974:12	2974:12	11	int
TYPE_NAME	2974:12	2974:12	12	int
LEAF_NODE	2974:12	2974:12	13	int
NAME	2974:16	2974:16	11	write_aslong8
LEAF_NODE	2974:16	2974:16	12	write_aslong8
LEAF_NODE	0:0	0:0	11	;
INIT	2974:16	2974:16	11	write_aslong8 = 1
ASSIGN	2974:16	2974:32	12	write_aslong8 = 1
LVAL	2974:16	2974:16	13	write_aslong8
NAME	2974:16	2974:16	14	write_aslong8
LEAF_NODE	2974:16	2974:16	15	write_aslong8
ASSIGN_OP	2974:30	2974:30	13	=
LEAF_NODE	2974:30	2974:30	14	=
RVAL	2974:32	2974:32	13	1
FIELD	2974:32	2974:32	14	1
LEAF_NODE	2974:32	2974:32	15	1
LEAF_NODE	2974:33	2974:33	10	;
SELECTION	2975:12	2976:12	9	
KEYWORD	2975:12	2975:12	10	if
LEAF_NODE	2975:12	2975:12	11	if
LEAF_NODE	2975:14	2975:14	10	(
CONDITION	2975:16	2975:16	10	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
EXPR	2975:16	2975:16	11	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
AND	2975:16	2975:29	12	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
EXPR	2975:16	2975:24	13	count > 1
FIELD	2975:16	2975:16	14	count
LEAF_NODE	2975:16	2975:16	15	count
REL_OPERATOR	2975:22	2975:22	14	>
LEAF_NODE	2975:22	2975:22	15	>
FIELD	2975:24	2975:24	14	1
LEAF_NODE	2975:24	2975:24	15	1
LEAF_NODE	2975:26	2975:26	13	&&
EXPR	2975:29	2975:36	13	tag == TIFFTAG_STRIPBYTECOUNTS
FIELD	2975:29	2975:29	14	tag
LEAF_NODE	2975:29	2975:29	15	tag
EQ_OPERATOR	2975:33	2975:33	14	==
LEAF_NODE	2975:33	2975:33	15	==
FIELD	2975:36	2975:36	14	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2975:36	2975:36	15	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2975:60	2975:60	10	)
STATEMENTS	2976:12	2978:12	10	
LEAF_NODE	2976:12	2976:12	11	{
STATEMENTS	2977:16	2977:16	11	
EXPR_STATEMENT	2977:16	2977:71	12	write_aslong8 = WriteAsLong8 ( tif , TIFFStripSize64 ( tif ) ) ;
EXPR	2977:16	2977:16	13	write_aslong8 = WriteAsLong8 ( tif , TIFFStripSize64 ( tif ) )
ASSIGN	2977:16	2977:32	14	write_aslong8 = WriteAsLong8 ( tif , TIFFStripSize64 ( tif ) )
LVAL	2977:16	2977:16	15	write_aslong8
FIELD	2977:16	2977:16	16	write_aslong8
LEAF_NODE	2977:16	2977:16	17	write_aslong8
ASSIGN_OP	2977:30	2977:30	15	=
LEAF_NODE	2977:30	2977:30	16	=
RVAL	2977:32	2977:32	15	WriteAsLong8 ( tif , TIFFStripSize64 ( tif ) )
FUNCTION_CALL	2977:32	2977:70	16	WriteAsLong8 ( tif , TIFFStripSize64 ( tif ) )
CALLEE	2977:32	2977:32	17	WriteAsLong8
LEAF_NODE	2977:32	2977:32	18	WriteAsLong8
LEAF_NODE	2977:44	2977:44	17	(
ARGUMENT	2977:45	2977:45	17	tif
FIELD	2977:45	2977:45	18	tif
LEAF_NODE	2977:45	2977:45	19	tif
LEAF_NODE	2977:48	2977:48	17	,
ARGUMENT	2977:50	2977:50	17	TIFFStripSize64 ( tif )
FUNCTION_CALL	2977:50	2977:69	18	TIFFStripSize64 ( tif )
CALLEE	2977:50	2977:50	19	TIFFStripSize64
LEAF_NODE	2977:50	2977:50	20	TIFFStripSize64
LEAF_NODE	2977:65	2977:65	19	(
ARGUMENT	2977:66	2977:66	19	tif
FIELD	2977:66	2977:66	20	tif
LEAF_NODE	2977:66	2977:66	21	tif
LEAF_NODE	2977:69	2977:69	19	)
LEAF_NODE	2977:70	2977:70	17	)
LEAF_NODE	2977:71	2977:71	13	;
LEAF_NODE	2978:12	2978:12	11	}
SELECTION	2979:12	2979:17	9	
KEYWORD	2979:12	2979:12	10	else
LEAF_NODE	2979:12	2979:12	11	else
STATEMENTS	2979:17	2979:17	10	
SELECTION	2979:17	2980:12	11	
KEYWORD	2979:17	2979:17	12	if
LEAF_NODE	2979:17	2979:17	13	if
LEAF_NODE	2979:19	2979:19	12	(
CONDITION	2979:21	2979:21	12	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
EXPR	2979:21	2979:21	13	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
AND	2979:21	2979:34	14	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
EXPR	2979:21	2979:29	15	count > 1
FIELD	2979:21	2979:21	16	count
LEAF_NODE	2979:21	2979:21	17	count
REL_OPERATOR	2979:27	2979:27	16	>
LEAF_NODE	2979:27	2979:27	17	>
FIELD	2979:29	2979:29	16	1
LEAF_NODE	2979:29	2979:29	17	1
LEAF_NODE	2979:31	2979:31	15	&&
EXPR	2979:34	2979:41	15	tag == TIFFTAG_TILEBYTECOUNTS
FIELD	2979:34	2979:34	16	tag
LEAF_NODE	2979:34	2979:34	17	tag
EQ_OPERATOR	2979:38	2979:38	16	==
LEAF_NODE	2979:38	2979:38	17	==
FIELD	2979:41	2979:41	16	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	2979:41	2979:41	17	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	2979:64	2979:64	12	)
STATEMENTS	2980:12	2982:12	12	
LEAF_NODE	2980:12	2980:12	13	{
STATEMENTS	2981:16	2981:16	13	
EXPR_STATEMENT	2981:16	2981:70	14	write_aslong8 = WriteAsLong8 ( tif , TIFFTileSize64 ( tif ) ) ;
EXPR	2981:16	2981:16	15	write_aslong8 = WriteAsLong8 ( tif , TIFFTileSize64 ( tif ) )
ASSIGN	2981:16	2981:32	16	write_aslong8 = WriteAsLong8 ( tif , TIFFTileSize64 ( tif ) )
LVAL	2981:16	2981:16	17	write_aslong8
FIELD	2981:16	2981:16	18	write_aslong8
LEAF_NODE	2981:16	2981:16	19	write_aslong8
ASSIGN_OP	2981:30	2981:30	17	=
LEAF_NODE	2981:30	2981:30	18	=
RVAL	2981:32	2981:32	17	WriteAsLong8 ( tif , TIFFTileSize64 ( tif ) )
FUNCTION_CALL	2981:32	2981:69	18	WriteAsLong8 ( tif , TIFFTileSize64 ( tif ) )
CALLEE	2981:32	2981:32	19	WriteAsLong8
LEAF_NODE	2981:32	2981:32	20	WriteAsLong8
LEAF_NODE	2981:44	2981:44	19	(
ARGUMENT	2981:45	2981:45	19	tif
FIELD	2981:45	2981:45	20	tif
LEAF_NODE	2981:45	2981:45	21	tif
LEAF_NODE	2981:48	2981:48	19	,
ARGUMENT	2981:50	2981:50	19	TIFFTileSize64 ( tif )
FUNCTION_CALL	2981:50	2981:68	20	TIFFTileSize64 ( tif )
CALLEE	2981:50	2981:50	21	TIFFTileSize64
LEAF_NODE	2981:50	2981:50	22	TIFFTileSize64
LEAF_NODE	2981:64	2981:64	21	(
ARGUMENT	2981:65	2981:65	21	tif
FIELD	2981:65	2981:65	22	tif
LEAF_NODE	2981:65	2981:65	23	tif
LEAF_NODE	2981:68	2981:68	21	)
LEAF_NODE	2981:69	2981:69	19	)
LEAF_NODE	2981:70	2981:70	15	;
LEAF_NODE	2982:12	2982:12	13	}
SELECTION	2983:12	2984:12	9	
KEYWORD	2983:12	2983:12	10	if
LEAF_NODE	2983:12	2983:12	11	if
LEAF_NODE	2983:14	2983:14	10	(
CONDITION	2983:16	2983:16	10	write_aslong8
EXPR	2983:16	2983:16	11	write_aslong8
FIELD	2983:16	2983:16	12	write_aslong8
LEAF_NODE	2983:16	2983:16	13	write_aslong8
LEAF_NODE	2983:30	2983:30	10	)
STATEMENTS	2984:12	2986:12	10	
LEAF_NODE	2984:12	2984:12	11	{
STATEMENTS	2985:16	2985:16	11	
EXPR_STATEMENT	2985:16	2985:39	12	entry_type = TIFF_LONG8 ;
EXPR	2985:16	2985:16	13	entry_type = TIFF_LONG8
ASSIGN	2985:16	2985:29	14	entry_type = TIFF_LONG8
LVAL	2985:16	2985:16	15	entry_type
FIELD	2985:16	2985:16	16	entry_type
LEAF_NODE	2985:16	2985:16	17	entry_type
ASSIGN_OP	2985:27	2985:27	15	=
LEAF_NODE	2985:27	2985:27	16	=
RVAL	2985:29	2985:29	15	TIFF_LONG8
FIELD	2985:29	2985:29	16	TIFF_LONG8
LEAF_NODE	2985:29	2985:29	17	TIFF_LONG8
LEAF_NODE	2985:39	2985:39	13	;
LEAF_NODE	2986:12	2986:12	11	}
SELECTION	2987:12	2988:12	9	
KEYWORD	2987:12	2987:12	10	else
LEAF_NODE	2987:12	2987:12	11	else
STATEMENTS	2988:12	3006:12	10	
LEAF_NODE	2988:12	2988:12	11	{
STATEMENTS	2989:16	3002:16	11	
SIMPLE_DECL	2989:16	2989:37	12	int write_aslong4 ; write_aslong4 = 1 ;
VAR_DECL	2989:16	2989:20	13	int write_aslong4 ; write_aslong4 = 1
TYPE	2989:16	2989:16	14	int
TYPE_NAME	2989:16	2989:16	15	int
LEAF_NODE	2989:16	2989:16	16	int
NAME	2989:20	2989:20	14	write_aslong4
LEAF_NODE	2989:20	2989:20	15	write_aslong4
LEAF_NODE	0:0	0:0	14	;
INIT	2989:20	2989:20	14	write_aslong4 = 1
ASSIGN	2989:20	2989:36	15	write_aslong4 = 1
LVAL	2989:20	2989:20	16	write_aslong4
NAME	2989:20	2989:20	17	write_aslong4
LEAF_NODE	2989:20	2989:20	18	write_aslong4
ASSIGN_OP	2989:34	2989:34	16	=
LEAF_NODE	2989:34	2989:34	17	=
RVAL	2989:36	2989:36	16	1
FIELD	2989:36	2989:36	17	1
LEAF_NODE	2989:36	2989:36	18	1
LEAF_NODE	2989:37	2989:37	13	;
SELECTION	2990:16	2991:16	12	
KEYWORD	2990:16	2990:16	13	if
LEAF_NODE	2990:16	2990:16	14	if
LEAF_NODE	2990:18	2990:18	13	(
CONDITION	2990:20	2990:20	13	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
EXPR	2990:20	2990:20	14	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
AND	2990:20	2990:33	15	count > 1 && tag == TIFFTAG_STRIPBYTECOUNTS
EXPR	2990:20	2990:28	16	count > 1
FIELD	2990:20	2990:20	17	count
LEAF_NODE	2990:20	2990:20	18	count
REL_OPERATOR	2990:26	2990:26	17	>
LEAF_NODE	2990:26	2990:26	18	>
FIELD	2990:28	2990:28	17	1
LEAF_NODE	2990:28	2990:28	18	1
LEAF_NODE	2990:30	2990:30	16	&&
EXPR	2990:33	2990:40	16	tag == TIFFTAG_STRIPBYTECOUNTS
FIELD	2990:33	2990:33	17	tag
LEAF_NODE	2990:33	2990:33	18	tag
EQ_OPERATOR	2990:37	2990:37	17	==
LEAF_NODE	2990:37	2990:37	18	==
FIELD	2990:40	2990:40	17	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2990:40	2990:40	18	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2990:64	2990:64	13	)
STATEMENTS	2991:16	2993:16	13	
LEAF_NODE	2991:16	2991:16	14	{
STATEMENTS	2992:20	2992:20	14	
EXPR_STATEMENT	2992:20	2992:75	15	write_aslong4 = WriteAsLong4 ( tif , TIFFStripSize64 ( tif ) ) ;
EXPR	2992:20	2992:20	16	write_aslong4 = WriteAsLong4 ( tif , TIFFStripSize64 ( tif ) )
ASSIGN	2992:20	2992:36	17	write_aslong4 = WriteAsLong4 ( tif , TIFFStripSize64 ( tif ) )
LVAL	2992:20	2992:20	18	write_aslong4
FIELD	2992:20	2992:20	19	write_aslong4
LEAF_NODE	2992:20	2992:20	20	write_aslong4
ASSIGN_OP	2992:34	2992:34	18	=
LEAF_NODE	2992:34	2992:34	19	=
RVAL	2992:36	2992:36	18	WriteAsLong4 ( tif , TIFFStripSize64 ( tif ) )
FUNCTION_CALL	2992:36	2992:74	19	WriteAsLong4 ( tif , TIFFStripSize64 ( tif ) )
CALLEE	2992:36	2992:36	20	WriteAsLong4
LEAF_NODE	2992:36	2992:36	21	WriteAsLong4
LEAF_NODE	2992:48	2992:48	20	(
ARGUMENT	2992:49	2992:49	20	tif
FIELD	2992:49	2992:49	21	tif
LEAF_NODE	2992:49	2992:49	22	tif
LEAF_NODE	2992:52	2992:52	20	,
ARGUMENT	2992:54	2992:54	20	TIFFStripSize64 ( tif )
FUNCTION_CALL	2992:54	2992:73	21	TIFFStripSize64 ( tif )
CALLEE	2992:54	2992:54	22	TIFFStripSize64
LEAF_NODE	2992:54	2992:54	23	TIFFStripSize64
LEAF_NODE	2992:69	2992:69	22	(
ARGUMENT	2992:70	2992:70	22	tif
FIELD	2992:70	2992:70	23	tif
LEAF_NODE	2992:70	2992:70	24	tif
LEAF_NODE	2992:73	2992:73	22	)
LEAF_NODE	2992:74	2992:74	20	)
LEAF_NODE	2992:75	2992:75	16	;
LEAF_NODE	2993:16	2993:16	14	}
SELECTION	2994:16	2994:21	12	
KEYWORD	2994:16	2994:16	13	else
LEAF_NODE	2994:16	2994:16	14	else
STATEMENTS	2994:21	2994:21	13	
SELECTION	2994:21	2995:16	14	
KEYWORD	2994:21	2994:21	15	if
LEAF_NODE	2994:21	2994:21	16	if
LEAF_NODE	2994:23	2994:23	15	(
CONDITION	2994:25	2994:25	15	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
EXPR	2994:25	2994:25	16	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
AND	2994:25	2994:38	17	count > 1 && tag == TIFFTAG_TILEBYTECOUNTS
EXPR	2994:25	2994:33	18	count > 1
FIELD	2994:25	2994:25	19	count
LEAF_NODE	2994:25	2994:25	20	count
REL_OPERATOR	2994:31	2994:31	19	>
LEAF_NODE	2994:31	2994:31	20	>
FIELD	2994:33	2994:33	19	1
LEAF_NODE	2994:33	2994:33	20	1
LEAF_NODE	2994:35	2994:35	18	&&
EXPR	2994:38	2994:45	18	tag == TIFFTAG_TILEBYTECOUNTS
FIELD	2994:38	2994:38	19	tag
LEAF_NODE	2994:38	2994:38	20	tag
EQ_OPERATOR	2994:42	2994:42	19	==
LEAF_NODE	2994:42	2994:42	20	==
FIELD	2994:45	2994:45	19	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	2994:45	2994:45	20	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	2994:68	2994:68	15	)
STATEMENTS	2995:16	2997:16	15	
LEAF_NODE	2995:16	2995:16	16	{
STATEMENTS	2996:20	2996:20	16	
EXPR_STATEMENT	2996:20	2996:74	17	write_aslong4 = WriteAsLong4 ( tif , TIFFTileSize64 ( tif ) ) ;
EXPR	2996:20	2996:20	18	write_aslong4 = WriteAsLong4 ( tif , TIFFTileSize64 ( tif ) )
ASSIGN	2996:20	2996:36	19	write_aslong4 = WriteAsLong4 ( tif , TIFFTileSize64 ( tif ) )
LVAL	2996:20	2996:20	20	write_aslong4
FIELD	2996:20	2996:20	21	write_aslong4
LEAF_NODE	2996:20	2996:20	22	write_aslong4
ASSIGN_OP	2996:34	2996:34	20	=
LEAF_NODE	2996:34	2996:34	21	=
RVAL	2996:36	2996:36	20	WriteAsLong4 ( tif , TIFFTileSize64 ( tif ) )
FUNCTION_CALL	2996:36	2996:73	21	WriteAsLong4 ( tif , TIFFTileSize64 ( tif ) )
CALLEE	2996:36	2996:36	22	WriteAsLong4
LEAF_NODE	2996:36	2996:36	23	WriteAsLong4
LEAF_NODE	2996:48	2996:48	22	(
ARGUMENT	2996:49	2996:49	22	tif
FIELD	2996:49	2996:49	23	tif
LEAF_NODE	2996:49	2996:49	24	tif
LEAF_NODE	2996:52	2996:52	22	,
ARGUMENT	2996:54	2996:54	22	TIFFTileSize64 ( tif )
FUNCTION_CALL	2996:54	2996:72	23	TIFFTileSize64 ( tif )
CALLEE	2996:54	2996:54	24	TIFFTileSize64
LEAF_NODE	2996:54	2996:54	25	TIFFTileSize64
LEAF_NODE	2996:68	2996:68	24	(
ARGUMENT	2996:69	2996:69	24	tif
FIELD	2996:69	2996:69	25	tif
LEAF_NODE	2996:69	2996:69	26	tif
LEAF_NODE	2996:72	2996:72	24	)
LEAF_NODE	2996:73	2996:73	22	)
LEAF_NODE	2996:74	2996:74	18	;
LEAF_NODE	2997:16	2997:16	16	}
SELECTION	2998:16	2999:16	12	
KEYWORD	2998:16	2998:16	13	if
LEAF_NODE	2998:16	2998:16	14	if
LEAF_NODE	2998:18	2998:18	13	(
CONDITION	2998:20	2998:20	13	write_aslong4
EXPR	2998:20	2998:20	14	write_aslong4
FIELD	2998:20	2998:20	15	write_aslong4
LEAF_NODE	2998:20	2998:20	16	write_aslong4
LEAF_NODE	2998:34	2998:34	13	)
STATEMENTS	2999:16	3001:16	13	
LEAF_NODE	2999:16	2999:16	14	{
STATEMENTS	3000:20	3000:20	14	
EXPR_STATEMENT	3000:20	3000:42	15	entry_type = TIFF_LONG ;
EXPR	3000:20	3000:20	16	entry_type = TIFF_LONG
ASSIGN	3000:20	3000:33	17	entry_type = TIFF_LONG
LVAL	3000:20	3000:20	18	entry_type
FIELD	3000:20	3000:20	19	entry_type
LEAF_NODE	3000:20	3000:20	20	entry_type
ASSIGN_OP	3000:31	3000:31	18	=
LEAF_NODE	3000:31	3000:31	19	=
RVAL	3000:33	3000:33	18	TIFF_LONG
FIELD	3000:33	3000:33	19	TIFF_LONG
LEAF_NODE	3000:33	3000:33	20	TIFF_LONG
LEAF_NODE	3000:42	3000:42	16	;
LEAF_NODE	3001:16	3001:16	14	}
SELECTION	3002:16	3003:16	12	
KEYWORD	3002:16	3002:16	13	else
LEAF_NODE	3002:16	3002:16	14	else
STATEMENTS	3003:16	3005:16	13	
LEAF_NODE	3003:16	3003:16	14	{
STATEMENTS	3004:20	3004:20	14	
EXPR_STATEMENT	3004:20	3004:43	15	entry_type = TIFF_SHORT ;
EXPR	3004:20	3004:20	16	entry_type = TIFF_SHORT
ASSIGN	3004:20	3004:33	17	entry_type = TIFF_SHORT
LVAL	3004:20	3004:20	18	entry_type
FIELD	3004:20	3004:20	19	entry_type
LEAF_NODE	3004:20	3004:20	20	entry_type
ASSIGN_OP	3004:31	3004:31	18	=
LEAF_NODE	3004:31	3004:31	19	=
RVAL	3004:33	3004:33	18	TIFF_SHORT
FIELD	3004:33	3004:33	19	TIFF_SHORT
LEAF_NODE	3004:33	3004:33	20	TIFF_SHORT
LEAF_NODE	3004:43	3004:43	16	;
LEAF_NODE	3005:16	3005:16	14	}
LEAF_NODE	3006:12	3006:12	11	}
LEAF_NODE	3007:8	3007:8	8	}
LEAF_NODE	3008:4	3008:4	5	}
SELECTION	3013:4	3014:4	3	
KEYWORD	3013:4	3013:4	4	if
LEAF_NODE	3013:4	3013:4	5	if
LEAF_NODE	3013:6	3013:6	4	(
CONDITION	3013:8	3013:8	4	TIFFDataWidth ( in_datatype ) == 8 && ! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	3013:8	3013:8	5	TIFFDataWidth ( in_datatype ) == 8 && ! ( tif -> tif_flags & TIFF_BIGTIFF )
AND	3013:8	3013:43	6	TIFFDataWidth ( in_datatype ) == 8 && ! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	3013:8	3013:38	7	TIFFDataWidth ( in_datatype ) == 8
FUNCTION_CALL	3013:8	3013:33	8	TIFFDataWidth ( in_datatype )
CALLEE	3013:8	3013:8	9	TIFFDataWidth
LEAF_NODE	3013:8	3013:8	10	TIFFDataWidth
LEAF_NODE	3013:21	3013:21	9	(
ARGUMENT	3013:22	3013:22	9	in_datatype
FIELD	3013:22	3013:22	10	in_datatype
LEAF_NODE	3013:22	3013:22	11	in_datatype
LEAF_NODE	3013:33	3013:33	9	)
EQ_OPERATOR	3013:35	3013:35	8	==
LEAF_NODE	3013:35	3013:35	9	==
FIELD	3013:38	3013:38	8	8
LEAF_NODE	3013:38	3013:38	9	8
LEAF_NODE	3013:40	3013:40	7	&&
EXPR	3013:43	3013:43	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	3013:43	3013:72	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	3013:43	3013:43	9	!
LEAF_NODE	3013:43	3013:43	10	!
LEAF_NODE	3013:44	3013:44	9	(
FIELD	3013:45	3013:50	9	tif -> tif_flags
LEAF_NODE	3013:45	3013:45	10	tif
LEAF_NODE	3013:48	3013:48	10	->
LEAF_NODE	3013:50	3013:50	10	tif_flags
LEAF_NODE	3013:59	3013:59	9	&
FIELD	3013:60	3013:60	9	TIFF_BIGTIFF
LEAF_NODE	3013:60	3013:60	10	TIFF_BIGTIFF
LEAF_NODE	3013:72	3013:72	9	)
LEAF_NODE	3013:74	3013:74	4	)
STATEMENTS	3014:4	3023:4	4	
LEAF_NODE	3014:4	3014:4	5	{
STATEMENTS	3015:8	3021:8	5	
SELECTION	3015:8	3016:12	6	
KEYWORD	3015:8	3015:8	7	if
LEAF_NODE	3015:8	3015:8	8	if
LEAF_NODE	3015:10	3015:10	7	(
CONDITION	3015:12	3015:12	7	in_datatype == TIFF_LONG8
EXPR	3015:12	3015:27	8	in_datatype == TIFF_LONG8
FIELD	3015:12	3015:12	9	in_datatype
LEAF_NODE	3015:12	3015:12	10	in_datatype
EQ_OPERATOR	3015:24	3015:24	9	==
LEAF_NODE	3015:24	3015:24	10	==
FIELD	3015:27	3015:27	9	TIFF_LONG8
LEAF_NODE	3015:27	3015:27	10	TIFF_LONG8
LEAF_NODE	3015:38	3015:38	7	)
STATEMENTS	3016:12	3016:12	7	
EXPR_STATEMENT	3016:12	3016:72	8	datatype = entry_type == TIFF_SHORT ? TIFF_SHORT : TIFF_LONG ;
EXPR	3016:12	3016:12	9	datatype = entry_type == TIFF_SHORT ? TIFF_SHORT : TIFF_LONG
ASSIGN	3016:12	3016:23	10	datatype = entry_type == TIFF_SHORT ? TIFF_SHORT : TIFF_LONG
LVAL	3016:12	3016:12	11	datatype
FIELD	3016:12	3016:12	12	datatype
LEAF_NODE	3016:12	3016:12	13	datatype
ASSIGN_OP	3016:21	3016:21	11	=
LEAF_NODE	3016:21	3016:21	12	=
RVAL	3016:23	3016:23	11	entry_type == TIFF_SHORT ? TIFF_SHORT : TIFF_LONG
COND_EXPR	3016:23	3016:63	12	entry_type == TIFF_SHORT ? TIFF_SHORT : TIFF_LONG
CONDITION	3016:23	3016:37	13	entry_type == TIFF_SHORT
FIELD	3016:23	3016:23	14	entry_type
LEAF_NODE	3016:23	3016:23	15	entry_type
EQ_OPERATOR	3016:34	3016:34	14	==
LEAF_NODE	3016:34	3016:34	15	==
FIELD	3016:37	3016:37	14	TIFF_SHORT
LEAF_NODE	3016:37	3016:37	15	TIFF_SHORT
LEAF_NODE	3016:48	3016:48	13	?
EXPR	3016:50	3016:50	13	TIFF_SHORT
FIELD	3016:50	3016:50	14	TIFF_SHORT
LEAF_NODE	3016:50	3016:50	15	TIFF_SHORT
LEAF_NODE	3016:61	3016:61	13	:
FIELD	3016:63	3016:63	13	TIFF_LONG
LEAF_NODE	3016:63	3016:63	14	TIFF_LONG
LEAF_NODE	3016:72	3016:72	9	;
SELECTION	3017:8	3017:13	6	
KEYWORD	3017:8	3017:8	7	else
LEAF_NODE	3017:8	3017:8	8	else
STATEMENTS	3017:13	3017:13	7	
SELECTION	3017:13	3018:12	8	
KEYWORD	3017:13	3017:13	9	if
LEAF_NODE	3017:13	3017:13	10	if
LEAF_NODE	3017:15	3017:15	9	(
CONDITION	3017:17	3017:17	9	in_datatype == TIFF_SLONG8
EXPR	3017:17	3017:32	10	in_datatype == TIFF_SLONG8
FIELD	3017:17	3017:17	11	in_datatype
LEAF_NODE	3017:17	3017:17	12	in_datatype
EQ_OPERATOR	3017:29	3017:29	11	==
LEAF_NODE	3017:29	3017:29	12	==
FIELD	3017:32	3017:32	11	TIFF_SLONG8
LEAF_NODE	3017:32	3017:32	12	TIFF_SLONG8
LEAF_NODE	3017:44	3017:44	9	)
STATEMENTS	3018:12	3018:12	9	
EXPR_STATEMENT	3018:12	3018:33	10	datatype = TIFF_SLONG ;
EXPR	3018:12	3018:12	11	datatype = TIFF_SLONG
ASSIGN	3018:12	3018:23	12	datatype = TIFF_SLONG
LVAL	3018:12	3018:12	13	datatype
FIELD	3018:12	3018:12	14	datatype
LEAF_NODE	3018:12	3018:12	15	datatype
ASSIGN_OP	3018:21	3018:21	13	=
LEAF_NODE	3018:21	3018:21	14	=
RVAL	3018:23	3018:23	13	TIFF_SLONG
FIELD	3018:23	3018:23	14	TIFF_SLONG
LEAF_NODE	3018:23	3018:23	15	TIFF_SLONG
LEAF_NODE	3018:33	3018:33	11	;
SELECTION	3019:8	3019:13	6	
KEYWORD	3019:8	3019:8	7	else
LEAF_NODE	3019:8	3019:8	8	else
STATEMENTS	3019:13	3019:13	7	
SELECTION	3019:13	3020:12	8	
KEYWORD	3019:13	3019:13	9	if
LEAF_NODE	3019:13	3019:13	10	if
LEAF_NODE	3019:15	3019:15	9	(
CONDITION	3019:17	3019:17	9	in_datatype == TIFF_IFD8
EXPR	3019:17	3019:32	10	in_datatype == TIFF_IFD8
FIELD	3019:17	3019:17	11	in_datatype
LEAF_NODE	3019:17	3019:17	12	in_datatype
EQ_OPERATOR	3019:29	3019:29	11	==
LEAF_NODE	3019:29	3019:29	12	==
FIELD	3019:32	3019:32	11	TIFF_IFD8
LEAF_NODE	3019:32	3019:32	12	TIFF_IFD8
LEAF_NODE	3019:42	3019:42	9	)
STATEMENTS	3020:12	3020:12	9	
EXPR_STATEMENT	3020:12	3020:31	10	datatype = TIFF_IFD ;
EXPR	3020:12	3020:12	11	datatype = TIFF_IFD
ASSIGN	3020:12	3020:23	12	datatype = TIFF_IFD
LVAL	3020:12	3020:12	13	datatype
FIELD	3020:12	3020:12	14	datatype
LEAF_NODE	3020:12	3020:12	15	datatype
ASSIGN_OP	3020:21	3020:21	13	=
LEAF_NODE	3020:21	3020:21	14	=
RVAL	3020:23	3020:23	13	TIFF_IFD
FIELD	3020:23	3020:23	14	TIFF_IFD
LEAF_NODE	3020:23	3020:23	15	TIFF_IFD
LEAF_NODE	3020:31	3020:31	11	;
SELECTION	3021:8	3022:12	6	
KEYWORD	3021:8	3021:8	7	else
LEAF_NODE	3021:8	3021:8	8	else
STATEMENTS	3022:12	3022:12	7	
EXPR_STATEMENT	3022:12	3022:34	8	datatype = in_datatype ;
EXPR	3022:12	3022:12	9	datatype = in_datatype
ASSIGN	3022:12	3022:23	10	datatype = in_datatype
LVAL	3022:12	3022:12	11	datatype
FIELD	3022:12	3022:12	12	datatype
LEAF_NODE	3022:12	3022:12	13	datatype
ASSIGN_OP	3022:21	3022:21	11	=
LEAF_NODE	3022:21	3022:21	12	=
RVAL	3022:23	3022:23	11	in_datatype
FIELD	3022:23	3022:23	12	in_datatype
LEAF_NODE	3022:23	3022:23	13	in_datatype
LEAF_NODE	3022:34	3022:34	9	;
LEAF_NODE	3023:4	3023:4	5	}
SELECTION	3024:4	3025:4	3	
KEYWORD	3024:4	3024:4	4	else
LEAF_NODE	3024:4	3024:4	5	else
STATEMENTS	3025:4	3038:4	4	
LEAF_NODE	3025:4	3025:4	5	{
STATEMENTS	3026:8	3036:8	5	
SELECTION	3026:8	3029:12	6	
KEYWORD	3026:8	3026:8	7	if
LEAF_NODE	3026:8	3026:8	8	if
LEAF_NODE	3026:10	3026:10	7	(
CONDITION	3026:12	3026:12	7	in_datatype == TIFF_LONG8 && ( entry_type == TIFF_SHORT || entry_type == TIFF_LONG || entry_type == TIFF_LONG8 )
EXPR	3026:12	3026:12	8	in_datatype == TIFF_LONG8 && ( entry_type == TIFF_SHORT || entry_type == TIFF_LONG || entry_type == TIFF_LONG8 )
AND	3026:12	3027:12	9	in_datatype == TIFF_LONG8 && ( entry_type == TIFF_SHORT || entry_type == TIFF_LONG || entry_type == TIFF_LONG8 )
EXPR	3026:12	3026:27	10	in_datatype == TIFF_LONG8
FIELD	3026:12	3026:12	11	in_datatype
LEAF_NODE	3026:12	3026:12	12	in_datatype
EQ_OPERATOR	3026:24	3026:24	11	==
LEAF_NODE	3026:24	3026:24	12	==
FIELD	3026:27	3026:27	11	TIFF_LONG8
LEAF_NODE	3026:27	3026:27	12	TIFF_LONG8
LEAF_NODE	3026:38	3026:38	10	&&
EXPR	3027:12	3028:38	10	( entry_type == TIFF_SHORT || entry_type == TIFF_LONG || entry_type == TIFF_LONG8 )
LEAF_NODE	3027:12	3027:12	11	(
OR	3027:13	3027:41	11	entry_type == TIFF_SHORT || entry_type == TIFF_LONG || entry_type == TIFF_LONG8
EXPR	3027:13	3027:27	12	entry_type == TIFF_SHORT
FIELD	3027:13	3027:13	13	entry_type
LEAF_NODE	3027:13	3027:13	14	entry_type
EQ_OPERATOR	3027:24	3027:24	13	==
LEAF_NODE	3027:24	3027:24	14	==
FIELD	3027:27	3027:27	13	TIFF_SHORT
LEAF_NODE	3027:27	3027:27	14	TIFF_SHORT
LEAF_NODE	3027:38	3027:38	12	||
EXPR	3027:41	3027:41	12	entry_type == TIFF_LONG || entry_type == TIFF_LONG8
OR	3027:41	3028:13	13	entry_type == TIFF_LONG || entry_type == TIFF_LONG8
EXPR	3027:41	3027:55	14	entry_type == TIFF_LONG
FIELD	3027:41	3027:41	15	entry_type
LEAF_NODE	3027:41	3027:41	16	entry_type
EQ_OPERATOR	3027:52	3027:52	15	==
LEAF_NODE	3027:52	3027:52	16	==
FIELD	3027:55	3027:55	15	TIFF_LONG
LEAF_NODE	3027:55	3027:55	16	TIFF_LONG
LEAF_NODE	3027:65	3027:65	14	||
EXPR	3028:13	3028:27	14	entry_type == TIFF_LONG8
FIELD	3028:13	3028:13	15	entry_type
LEAF_NODE	3028:13	3028:13	16	entry_type
EQ_OPERATOR	3028:24	3028:24	15	==
LEAF_NODE	3028:24	3028:24	16	==
FIELD	3028:27	3028:27	15	TIFF_LONG8
LEAF_NODE	3028:27	3028:27	16	TIFF_LONG8
LEAF_NODE	3028:38	3028:38	11	)
LEAF_NODE	3028:40	3028:40	7	)
STATEMENTS	3029:12	3029:12	7	
EXPR_STATEMENT	3029:12	3029:33	8	datatype = entry_type ;
EXPR	3029:12	3029:12	9	datatype = entry_type
ASSIGN	3029:12	3029:23	10	datatype = entry_type
LVAL	3029:12	3029:12	11	datatype
FIELD	3029:12	3029:12	12	datatype
LEAF_NODE	3029:12	3029:12	13	datatype
ASSIGN_OP	3029:21	3029:21	11	=
LEAF_NODE	3029:21	3029:21	12	=
RVAL	3029:23	3029:23	11	entry_type
FIELD	3029:23	3029:23	12	entry_type
LEAF_NODE	3029:23	3029:23	13	entry_type
LEAF_NODE	3029:33	3029:33	9	;
SELECTION	3030:8	3030:13	6	
KEYWORD	3030:8	3030:8	7	else
LEAF_NODE	3030:8	3030:8	8	else
STATEMENTS	3030:13	3030:13	7	
SELECTION	3030:13	3032:12	8	
KEYWORD	3030:13	3030:13	9	if
LEAF_NODE	3030:13	3030:13	10	if
LEAF_NODE	3030:15	3030:15	9	(
CONDITION	3030:17	3030:17	9	in_datatype == TIFF_SLONG8 && ( entry_type == TIFF_SLONG || entry_type == TIFF_SLONG8 )
EXPR	3030:17	3030:17	10	in_datatype == TIFF_SLONG8 && ( entry_type == TIFF_SLONG || entry_type == TIFF_SLONG8 )
AND	3030:17	3031:12	11	in_datatype == TIFF_SLONG8 && ( entry_type == TIFF_SLONG || entry_type == TIFF_SLONG8 )
EXPR	3030:17	3030:32	12	in_datatype == TIFF_SLONG8
FIELD	3030:17	3030:17	13	in_datatype
LEAF_NODE	3030:17	3030:17	14	in_datatype
EQ_OPERATOR	3030:29	3030:29	13	==
LEAF_NODE	3030:29	3030:29	14	==
FIELD	3030:32	3030:32	13	TIFF_SLONG8
LEAF_NODE	3030:32	3030:32	14	TIFF_SLONG8
LEAF_NODE	3030:44	3030:44	12	&&
EXPR	3031:12	3031:67	12	( entry_type == TIFF_SLONG || entry_type == TIFF_SLONG8 )
LEAF_NODE	3031:12	3031:12	13	(
OR	3031:13	3031:41	13	entry_type == TIFF_SLONG || entry_type == TIFF_SLONG8
EXPR	3031:13	3031:27	14	entry_type == TIFF_SLONG
FIELD	3031:13	3031:13	15	entry_type
LEAF_NODE	3031:13	3031:13	16	entry_type
EQ_OPERATOR	3031:24	3031:24	15	==
LEAF_NODE	3031:24	3031:24	16	==
FIELD	3031:27	3031:27	15	TIFF_SLONG
LEAF_NODE	3031:27	3031:27	16	TIFF_SLONG
LEAF_NODE	3031:38	3031:38	14	||
EXPR	3031:41	3031:55	14	entry_type == TIFF_SLONG8
FIELD	3031:41	3031:41	15	entry_type
LEAF_NODE	3031:41	3031:41	16	entry_type
EQ_OPERATOR	3031:52	3031:52	15	==
LEAF_NODE	3031:52	3031:52	16	==
FIELD	3031:55	3031:55	15	TIFF_SLONG8
LEAF_NODE	3031:55	3031:55	16	TIFF_SLONG8
LEAF_NODE	3031:67	3031:67	13	)
LEAF_NODE	3031:69	3031:69	9	)
STATEMENTS	3032:12	3032:12	9	
EXPR_STATEMENT	3032:12	3032:33	10	datatype = entry_type ;
EXPR	3032:12	3032:12	11	datatype = entry_type
ASSIGN	3032:12	3032:23	12	datatype = entry_type
LVAL	3032:12	3032:12	13	datatype
FIELD	3032:12	3032:12	14	datatype
LEAF_NODE	3032:12	3032:12	15	datatype
ASSIGN_OP	3032:21	3032:21	13	=
LEAF_NODE	3032:21	3032:21	14	=
RVAL	3032:23	3032:23	13	entry_type
FIELD	3032:23	3032:23	14	entry_type
LEAF_NODE	3032:23	3032:23	15	entry_type
LEAF_NODE	3032:33	3032:33	11	;
SELECTION	3033:8	3033:13	6	
KEYWORD	3033:8	3033:8	7	else
LEAF_NODE	3033:8	3033:8	8	else
STATEMENTS	3033:13	3033:13	7	
SELECTION	3033:13	3035:12	8	
KEYWORD	3033:13	3033:13	9	if
LEAF_NODE	3033:13	3033:13	10	if
LEAF_NODE	3033:15	3033:15	9	(
CONDITION	3033:17	3033:17	9	in_datatype == TIFF_IFD8 && ( entry_type == TIFF_IFD || entry_type == TIFF_IFD8 )
EXPR	3033:17	3033:17	10	in_datatype == TIFF_IFD8 && ( entry_type == TIFF_IFD || entry_type == TIFF_IFD8 )
AND	3033:17	3034:12	11	in_datatype == TIFF_IFD8 && ( entry_type == TIFF_IFD || entry_type == TIFF_IFD8 )
EXPR	3033:17	3033:32	12	in_datatype == TIFF_IFD8
FIELD	3033:17	3033:17	13	in_datatype
LEAF_NODE	3033:17	3033:17	14	in_datatype
EQ_OPERATOR	3033:29	3033:29	13	==
LEAF_NODE	3033:29	3033:29	14	==
FIELD	3033:32	3033:32	13	TIFF_IFD8
LEAF_NODE	3033:32	3033:32	14	TIFF_IFD8
LEAF_NODE	3033:42	3033:42	12	&&
EXPR	3034:12	3034:63	12	( entry_type == TIFF_IFD || entry_type == TIFF_IFD8 )
LEAF_NODE	3034:12	3034:12	13	(
OR	3034:13	3034:39	13	entry_type == TIFF_IFD || entry_type == TIFF_IFD8
EXPR	3034:13	3034:27	14	entry_type == TIFF_IFD
FIELD	3034:13	3034:13	15	entry_type
LEAF_NODE	3034:13	3034:13	16	entry_type
EQ_OPERATOR	3034:24	3034:24	15	==
LEAF_NODE	3034:24	3034:24	16	==
FIELD	3034:27	3034:27	15	TIFF_IFD
LEAF_NODE	3034:27	3034:27	16	TIFF_IFD
LEAF_NODE	3034:36	3034:36	14	||
EXPR	3034:39	3034:53	14	entry_type == TIFF_IFD8
FIELD	3034:39	3034:39	15	entry_type
LEAF_NODE	3034:39	3034:39	16	entry_type
EQ_OPERATOR	3034:50	3034:50	15	==
LEAF_NODE	3034:50	3034:50	16	==
FIELD	3034:53	3034:53	15	TIFF_IFD8
LEAF_NODE	3034:53	3034:53	16	TIFF_IFD8
LEAF_NODE	3034:63	3034:63	13	)
LEAF_NODE	3034:65	3034:65	9	)
STATEMENTS	3035:12	3035:12	9	
EXPR_STATEMENT	3035:12	3035:33	10	datatype = entry_type ;
EXPR	3035:12	3035:12	11	datatype = entry_type
ASSIGN	3035:12	3035:23	12	datatype = entry_type
LVAL	3035:12	3035:12	13	datatype
FIELD	3035:12	3035:12	14	datatype
LEAF_NODE	3035:12	3035:12	15	datatype
ASSIGN_OP	3035:21	3035:21	13	=
LEAF_NODE	3035:21	3035:21	14	=
RVAL	3035:23	3035:23	13	entry_type
FIELD	3035:23	3035:23	14	entry_type
LEAF_NODE	3035:23	3035:23	15	entry_type
LEAF_NODE	3035:33	3035:33	11	;
SELECTION	3036:8	3037:12	6	
KEYWORD	3036:8	3036:8	7	else
LEAF_NODE	3036:8	3036:8	8	else
STATEMENTS	3037:12	3037:12	7	
EXPR_STATEMENT	3037:12	3037:34	8	datatype = in_datatype ;
EXPR	3037:12	3037:12	9	datatype = in_datatype
ASSIGN	3037:12	3037:23	10	datatype = in_datatype
LVAL	3037:12	3037:12	11	datatype
FIELD	3037:12	3037:12	12	datatype
LEAF_NODE	3037:12	3037:12	13	datatype
ASSIGN_OP	3037:21	3037:21	11	=
LEAF_NODE	3037:21	3037:21	12	=
RVAL	3037:23	3037:23	11	in_datatype
FIELD	3037:23	3037:23	12	in_datatype
LEAF_NODE	3037:23	3037:23	13	in_datatype
LEAF_NODE	3037:34	3037:34	9	;
LEAF_NODE	3038:4	3038:4	5	}
EXPR_STATEMENT	3044:4	3046:30	3	buf_to_write = ( uint8 * ) _TIFFCheckMalloc ( tif , count , TIFFDataWidth ( datatype ) , "for field buffer." ) ;
EXPR	3044:4	3044:4	4	buf_to_write = ( uint8 * ) _TIFFCheckMalloc ( tif , count , TIFFDataWidth ( datatype ) , "for field buffer." )
ASSIGN	3044:4	3045:5	5	buf_to_write = ( uint8 * ) _TIFFCheckMalloc ( tif , count , TIFFDataWidth ( datatype ) , "for field buffer." )
LVAL	3044:4	3044:4	6	buf_to_write
FIELD	3044:4	3044:4	7	buf_to_write
LEAF_NODE	3044:4	3044:4	8	buf_to_write
ASSIGN_OP	3044:17	3044:17	6	=
LEAF_NODE	3044:17	3044:17	7	=
RVAL	3045:5	3045:14	6	( uint8 * ) _TIFFCheckMalloc ( tif , count , TIFFDataWidth ( datatype ) , "for field buffer." )
LEAF_NODE	3045:5	3045:5	7	(
TYPE_NAME	3045:6	3045:6	7	uint8
LEAF_NODE	3045:6	3045:6	8	uint8
LEAF_NODE	3045:12	3045:12	7	*
LEAF_NODE	3045:13	3045:13	7	)
FUNCTION_CALL	3045:14	3046:29	7	_TIFFCheckMalloc ( tif , count , TIFFDataWidth ( datatype ) , "for field buffer." )
CALLEE	3045:14	3045:14	8	_TIFFCheckMalloc
LEAF_NODE	3045:14	3045:14	9	_TIFFCheckMalloc
LEAF_NODE	3045:30	3045:30	8	(
ARGUMENT	3045:31	3045:31	8	tif
FIELD	3045:31	3045:31	9	tif
LEAF_NODE	3045:31	3045:31	10	tif
LEAF_NODE	3045:34	3045:34	8	,
ARGUMENT	3045:36	3045:36	8	count
FIELD	3045:36	3045:36	9	count
LEAF_NODE	3045:36	3045:36	10	count
LEAF_NODE	3045:41	3045:41	8	,
ARGUMENT	3045:43	3045:43	8	TIFFDataWidth ( datatype )
FUNCTION_CALL	3045:43	3045:65	9	TIFFDataWidth ( datatype )
CALLEE	3045:43	3045:43	10	TIFFDataWidth
LEAF_NODE	3045:43	3045:43	11	TIFFDataWidth
LEAF_NODE	3045:56	3045:56	10	(
ARGUMENT	3045:57	3045:57	10	datatype
FIELD	3045:57	3045:57	11	datatype
LEAF_NODE	3045:57	3045:57	12	datatype
LEAF_NODE	3045:65	3045:65	10	)
LEAF_NODE	3045:66	3045:66	8	,
ARGUMENT	3046:10	3046:10	8	"for field buffer."
FIELD	3046:10	3046:10	9	"for field buffer."
LEAF_NODE	3046:10	3046:10	10	"for field buffer."
LEAF_NODE	3046:29	3046:29	8	)
LEAF_NODE	3046:30	3046:30	4	;
SELECTION	3047:4	3048:8	3	
KEYWORD	3047:4	3047:4	4	if
LEAF_NODE	3047:4	3047:4	5	if
LEAF_NODE	3047:7	3047:7	4	(
CONDITION	3047:8	3047:8	4	! buf_to_write
EXPR	3047:8	3047:8	5	! buf_to_write
UNARY_EXPR	3047:8	3047:9	6	! buf_to_write
UNARY_OPERATOR	3047:8	3047:8	7	!
LEAF_NODE	3047:8	3047:8	8	!
FIELD	3047:9	3047:9	7	buf_to_write
LEAF_NODE	3047:9	3047:9	8	buf_to_write
LEAF_NODE	3047:21	3047:21	4	)
STATEMENTS	3048:8	3048:8	4	
JUMP_STATEMENT	3048:8	3048:16	5	return 0 ;
KEYWORD	3048:8	3048:8	6	return
LEAF_NODE	3048:8	3048:8	7	return
DESTINATION	3048:15	3048:15	6	0
EXPR	3048:15	3048:15	7	0
FIELD	3048:15	3048:15	8	0
LEAF_NODE	3048:15	3048:15	9	0
LEAF_NODE	3048:16	3048:16	6	;
SELECTION	3050:4	3051:8	3	
KEYWORD	3050:4	3050:4	4	if
LEAF_NODE	3050:4	3050:4	5	if
LEAF_NODE	3050:6	3050:6	4	(
CONDITION	3050:8	3050:8	4	datatype == in_datatype
EXPR	3050:8	3050:20	5	datatype == in_datatype
FIELD	3050:8	3050:8	6	datatype
LEAF_NODE	3050:8	3050:8	7	datatype
EQ_OPERATOR	3050:17	3050:17	6	==
LEAF_NODE	3050:17	3050:17	7	==
FIELD	3050:20	3050:20	6	in_datatype
LEAF_NODE	3050:20	3050:20	7	in_datatype
LEAF_NODE	3050:32	3050:32	4	)
STATEMENTS	3051:8	3051:8	4	
EXPR_STATEMENT	3051:8	3051:69	5	memcpy ( buf_to_write , data , count * TIFFDataWidth ( datatype ) ) ;
EXPR	3051:8	3051:8	6	memcpy ( buf_to_write , data , count * TIFFDataWidth ( datatype ) )
FUNCTION_CALL	3051:8	3051:68	7	memcpy ( buf_to_write , data , count * TIFFDataWidth ( datatype ) )
CALLEE	3051:8	3051:8	8	memcpy
LEAF_NODE	3051:8	3051:8	9	memcpy
LEAF_NODE	3051:14	3051:14	8	(
ARGUMENT	3051:16	3051:16	8	buf_to_write
FIELD	3051:16	3051:16	9	buf_to_write
LEAF_NODE	3051:16	3051:16	10	buf_to_write
LEAF_NODE	3051:28	3051:28	8	,
ARGUMENT	3051:30	3051:30	8	data
FIELD	3051:30	3051:30	9	data
LEAF_NODE	3051:30	3051:30	10	data
LEAF_NODE	3051:34	3051:34	8	,
ARGUMENT	3051:36	3051:44	8	count * TIFFDataWidth ( datatype )
FIELD	3051:36	3051:36	9	count
LEAF_NODE	3051:36	3051:36	10	count
LEAF_NODE	3051:42	3051:42	9	*
FUNCTION_CALL	3051:44	3051:66	9	TIFFDataWidth ( datatype )
CALLEE	3051:44	3051:44	10	TIFFDataWidth
LEAF_NODE	3051:44	3051:44	11	TIFFDataWidth
LEAF_NODE	3051:57	3051:57	10	(
ARGUMENT	3051:58	3051:58	10	datatype
FIELD	3051:58	3051:58	11	datatype
LEAF_NODE	3051:58	3051:58	12	datatype
LEAF_NODE	3051:66	3051:66	10	)
LEAF_NODE	3051:68	3051:68	8	)
LEAF_NODE	3051:69	3051:69	6	;
SELECTION	3052:4	3052:9	3	
KEYWORD	3052:4	3052:4	4	else
LEAF_NODE	3052:4	3052:4	5	else
STATEMENTS	3052:9	3052:9	4	
SELECTION	3052:9	3053:4	5	
KEYWORD	3052:9	3052:9	6	if
LEAF_NODE	3052:9	3052:9	7	if
LEAF_NODE	3052:11	3052:11	6	(
CONDITION	3052:13	3052:13	6	datatype == TIFF_SLONG && in_datatype == TIFF_SLONG8
EXPR	3052:13	3052:13	7	datatype == TIFF_SLONG && in_datatype == TIFF_SLONG8
AND	3052:13	3052:39	8	datatype == TIFF_SLONG && in_datatype == TIFF_SLONG8
EXPR	3052:13	3052:25	9	datatype == TIFF_SLONG
FIELD	3052:13	3052:13	10	datatype
LEAF_NODE	3052:13	3052:13	11	datatype
EQ_OPERATOR	3052:22	3052:22	10	==
LEAF_NODE	3052:22	3052:22	11	==
FIELD	3052:25	3052:25	10	TIFF_SLONG
LEAF_NODE	3052:25	3052:25	11	TIFF_SLONG
LEAF_NODE	3052:36	3052:36	9	&&
EXPR	3052:39	3052:54	9	in_datatype == TIFF_SLONG8
FIELD	3052:39	3052:39	10	in_datatype
LEAF_NODE	3052:39	3052:39	11	in_datatype
EQ_OPERATOR	3052:51	3052:51	10	==
LEAF_NODE	3052:51	3052:51	11	==
FIELD	3052:54	3052:54	10	TIFF_SLONG8
LEAF_NODE	3052:54	3052:54	11	TIFF_SLONG8
LEAF_NODE	3052:66	3052:66	6	)
STATEMENTS	3053:4	3068:4	6	
LEAF_NODE	3053:4	3053:4	7	{
STATEMENTS	3054:1	3056:8	7	
SIMPLE_DECL	3054:1	3054:11	8	tmsize_t i ;
VAR_DECL	3054:1	3054:10	9	tmsize_t i
TYPE	3054:1	3054:1	10	tmsize_t
TYPE_NAME	3054:1	3054:1	11	tmsize_t
LEAF_NODE	3054:1	3054:1	12	tmsize_t
NAME	3054:10	3054:10	10	i
LEAF_NODE	3054:10	3054:10	11	i
LEAF_NODE	3054:11	3054:11	9	;
ITERATION	3056:8	3057:8	8	
KEYWORD	3056:8	3056:8	9	for
LEAF_NODE	3056:8	3056:8	10	for
LEAF_NODE	3056:11	3056:11	9	(
FOR_INIT	3056:13	3056:18	9	i = 0 ;
EXPR	3056:13	3056:13	10	i = 0
ASSIGN	3056:13	3056:17	11	i = 0
LVAL	3056:13	3056:13	12	i
FIELD	3056:13	3056:13	13	i
LEAF_NODE	3056:13	3056:13	14	i
ASSIGN_OP	3056:15	3056:15	12	=
LEAF_NODE	3056:15	3056:15	13	=
RVAL	3056:17	3056:17	12	0
FIELD	3056:17	3056:17	13	0
LEAF_NODE	3056:17	3056:17	14	0
LEAF_NODE	3056:18	3056:18	10	;
CONDITION	3056:20	3056:20	9	i < count
EXPR	3056:20	3056:24	10	i < count
FIELD	3056:20	3056:20	11	i
LEAF_NODE	3056:20	3056:20	12	i
REL_OPERATOR	3056:22	3056:22	11	<
LEAF_NODE	3056:22	3056:22	12	<
FIELD	3056:24	3056:24	11	count
LEAF_NODE	3056:24	3056:24	12	count
LEAF_NODE	3056:29	3056:29	9	;
FOR_EXPR	3056:31	3056:31	9	i ++
EXPR	3056:31	3056:31	10	i ++
FIELD	3056:31	3056:32	11	i ++
LEAF_NODE	3056:31	3056:31	12	i
LEAF_NODE	3056:32	3056:32	12	++
LEAF_NODE	3056:35	3056:35	9	)
STATEMENTS	3057:8	3067:8	9	
LEAF_NODE	3057:8	3057:8	10	{
STATEMENTS	3058:12	3060:12	10	
EXPR_STATEMENT	3058:12	3059:43	11	( ( int32 * ) buf_to_write ) [ i ] = ( int32 ) ( ( int64 * ) data ) [ i ] ;
EXPR	3058:12	3058:12	12	( ( int32 * ) buf_to_write ) [ i ] = ( int32 ) ( ( int64 * ) data ) [ i ]
ASSIGN	3058:12	3059:16	13	( ( int32 * ) buf_to_write ) [ i ] = ( int32 ) ( ( int64 * ) data ) [ i ]
LVAL	3058:12	3058:38	14	( ( int32 * ) buf_to_write ) [ i ]
LEAF_NODE	3058:12	3058:12	15	(
LEAF_NODE	3058:13	3058:13	15	(
TYPE_NAME	3058:14	3058:14	15	int32
LEAF_NODE	3058:14	3058:14	16	int32
LEAF_NODE	3058:20	3058:20	15	*
LEAF_NODE	3058:21	3058:21	15	)
FIELD	3058:23	3058:23	15	buf_to_write
LEAF_NODE	3058:23	3058:23	16	buf_to_write
LEAF_NODE	3058:35	3058:35	15	)
LEAF_NODE	3058:36	3058:36	15	[
EXPR	3058:37	3058:37	15	i
FIELD	3058:37	3058:37	16	i
LEAF_NODE	3058:37	3058:37	17	i
LEAF_NODE	3058:38	3058:38	15	]
ASSIGN_OP	3058:40	3058:40	14	=
LEAF_NODE	3058:40	3058:40	15	=
RVAL	3059:16	3059:42	14	( int32 ) ( ( int64 * ) data ) [ i ]
LEAF_NODE	3059:16	3059:16	15	(
TYPE_NAME	3059:17	3059:17	15	int32
LEAF_NODE	3059:17	3059:17	16	int32
LEAF_NODE	3059:22	3059:22	15	)
LEAF_NODE	3059:24	3059:24	15	(
LEAF_NODE	3059:25	3059:25	15	(
TYPE_NAME	3059:26	3059:26	15	int64
LEAF_NODE	3059:26	3059:26	16	int64
LEAF_NODE	3059:32	3059:32	15	*
LEAF_NODE	3059:33	3059:33	15	)
FIELD	3059:35	3059:35	15	data
LEAF_NODE	3059:35	3059:35	16	data
LEAF_NODE	3059:39	3059:39	15	)
LEAF_NODE	3059:40	3059:40	15	[
EXPR	3059:41	3059:41	15	i
FIELD	3059:41	3059:41	16	i
LEAF_NODE	3059:41	3059:41	17	i
LEAF_NODE	3059:42	3059:42	15	]
LEAF_NODE	3059:43	3059:43	12	;
SELECTION	3060:12	3061:12	11	
KEYWORD	3060:12	3060:12	12	if
LEAF_NODE	3060:12	3060:12	13	if
LEAF_NODE	3060:14	3060:14	12	(
CONDITION	3060:16	3060:16	12	( int64 ) ( ( int32 * ) buf_to_write ) [ i ] != ( ( int64 * ) data ) [ i ]
EXPR	3060:16	3060:73	13	( int64 ) ( ( int32 * ) buf_to_write ) [ i ] != ( ( int64 * ) data ) [ i ]
LEAF_NODE	3060:16	3060:16	14	(
TYPE_NAME	3060:17	3060:17	14	int64
LEAF_NODE	3060:17	3060:17	15	int64
LEAF_NODE	3060:22	3060:22	14	)
LEAF_NODE	3060:24	3060:24	14	(
LEAF_NODE	3060:25	3060:25	14	(
TYPE_NAME	3060:26	3060:26	14	int32
LEAF_NODE	3060:26	3060:26	15	int32
LEAF_NODE	3060:32	3060:32	14	*
LEAF_NODE	3060:33	3060:33	14	)
FIELD	3060:35	3060:35	14	buf_to_write
LEAF_NODE	3060:35	3060:35	15	buf_to_write
LEAF_NODE	3060:47	3060:47	14	)
LEAF_NODE	3060:48	3060:48	14	[
EXPR	3060:49	3060:49	14	i
FIELD	3060:49	3060:49	15	i
LEAF_NODE	3060:49	3060:49	16	i
LEAF_NODE	3060:50	3060:50	14	]
EQ_OPERATOR	3060:52	3060:52	14	!=
LEAF_NODE	3060:52	3060:52	15	!=
LEAF_NODE	3060:55	3060:55	14	(
LEAF_NODE	3060:56	3060:56	14	(
TYPE_NAME	3060:57	3060:57	14	int64
LEAF_NODE	3060:57	3060:57	15	int64
LEAF_NODE	3060:63	3060:63	14	*
LEAF_NODE	3060:64	3060:64	14	)
FIELD	3060:66	3060:66	14	data
LEAF_NODE	3060:66	3060:66	15	data
LEAF_NODE	3060:70	3060:70	14	)
LEAF_NODE	3060:71	3060:71	14	[
EXPR	3060:72	3060:72	14	i
FIELD	3060:72	3060:72	15	i
LEAF_NODE	3060:72	3060:72	16	i
LEAF_NODE	3060:73	3060:73	14	]
LEAF_NODE	3060:75	3060:75	12	)
STATEMENTS	3061:12	3066:12	12	
LEAF_NODE	3061:12	3061:12	13	{
STATEMENTS	3062:16	3065:16	13	
EXPR_STATEMENT	3062:16	3062:41	14	_TIFFfree ( buf_to_write ) ;
EXPR	3062:16	3062:16	15	_TIFFfree ( buf_to_write )
FUNCTION_CALL	3062:16	3062:40	16	_TIFFfree ( buf_to_write )
CALLEE	3062:16	3062:16	17	_TIFFfree
LEAF_NODE	3062:16	3062:16	18	_TIFFfree
LEAF_NODE	3062:25	3062:25	17	(
ARGUMENT	3062:27	3062:27	17	buf_to_write
FIELD	3062:27	3062:27	18	buf_to_write
LEAF_NODE	3062:27	3062:27	19	buf_to_write
LEAF_NODE	3062:40	3062:40	17	)
LEAF_NODE	3062:41	3062:41	15	;
EXPR_STATEMENT	3063:16	3064:75	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Value exceeds 32bit range of output type." ) ;
EXPR	3063:16	3063:16	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Value exceeds 32bit range of output type." )
FUNCTION_CALL	3063:16	3064:74	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Value exceeds 32bit range of output type." )
CALLEE	3063:16	3063:16	17	TIFFErrorExt
LEAF_NODE	3063:16	3063:16	18	TIFFErrorExt
LEAF_NODE	3063:28	3063:28	17	(
ARGUMENT	3063:30	3063:30	17	tif -> tif_clientdata
FIELD	3063:30	3063:35	18	tif -> tif_clientdata
LEAF_NODE	3063:30	3063:30	19	tif
LEAF_NODE	3063:33	3063:33	19	->
LEAF_NODE	3063:35	3063:35	19	tif_clientdata
LEAF_NODE	3063:49	3063:49	17	,
ARGUMENT	3063:51	3063:51	17	module
FIELD	3063:51	3063:51	18	module
LEAF_NODE	3063:51	3063:51	19	module
LEAF_NODE	3063:57	3063:57	17	,
ARGUMENT	3064:30	3064:30	17	"Value exceeds 32bit range of output type."
FIELD	3064:30	3064:30	18	"Value exceeds 32bit range of output type."
LEAF_NODE	3064:30	3064:30	19	"Value exceeds 32bit range of output type."
LEAF_NODE	3064:74	3064:74	17	)
LEAF_NODE	3064:75	3064:75	15	;
JUMP_STATEMENT	3065:16	3065:24	14	return 0 ;
KEYWORD	3065:16	3065:16	15	return
LEAF_NODE	3065:16	3065:16	16	return
DESTINATION	3065:23	3065:23	15	0
EXPR	3065:23	3065:23	16	0
FIELD	3065:23	3065:23	17	0
LEAF_NODE	3065:23	3065:23	18	0
LEAF_NODE	3065:24	3065:24	15	;
LEAF_NODE	3066:12	3066:12	13	}
LEAF_NODE	3067:8	3067:8	10	}
LEAF_NODE	3068:4	3068:4	7	}
SELECTION	3069:4	3069:9	3	
KEYWORD	3069:4	3069:4	4	else
LEAF_NODE	3069:4	3069:4	5	else
STATEMENTS	3069:9	3069:9	4	
SELECTION	3069:9	3071:4	5	
KEYWORD	3069:9	3069:9	6	if
LEAF_NODE	3069:9	3069:9	7	if
LEAF_NODE	3069:11	3069:11	6	(
CONDITION	3069:13	3069:13	6	( datatype == TIFF_LONG && in_datatype == TIFF_LONG8 ) || ( datatype == TIFF_IFD && in_datatype == TIFF_IFD8 )
EXPR	3069:13	3069:13	7	( datatype == TIFF_LONG && in_datatype == TIFF_LONG8 ) || ( datatype == TIFF_IFD && in_datatype == TIFF_IFD8 )
OR	3069:13	3070:16	8	( datatype == TIFF_LONG && in_datatype == TIFF_LONG8 ) || ( datatype == TIFF_IFD && in_datatype == TIFF_IFD8 )
EXPR	3069:13	3069:64	9	( datatype == TIFF_LONG && in_datatype == TIFF_LONG8 )
LEAF_NODE	3069:13	3069:13	10	(
AND	3069:14	3069:39	10	datatype == TIFF_LONG && in_datatype == TIFF_LONG8
EXPR	3069:14	3069:26	11	datatype == TIFF_LONG
FIELD	3069:14	3069:14	12	datatype
LEAF_NODE	3069:14	3069:14	13	datatype
EQ_OPERATOR	3069:23	3069:23	12	==
LEAF_NODE	3069:23	3069:23	13	==
FIELD	3069:26	3069:26	12	TIFF_LONG
LEAF_NODE	3069:26	3069:26	13	TIFF_LONG
LEAF_NODE	3069:36	3069:36	11	&&
EXPR	3069:39	3069:54	11	in_datatype == TIFF_LONG8
FIELD	3069:39	3069:39	12	in_datatype
LEAF_NODE	3069:39	3069:39	13	in_datatype
EQ_OPERATOR	3069:51	3069:51	12	==
LEAF_NODE	3069:51	3069:51	13	==
FIELD	3069:54	3069:54	12	TIFF_LONG8
LEAF_NODE	3069:54	3069:54	13	TIFF_LONG8
LEAF_NODE	3069:64	3069:64	10	)
LEAF_NODE	3070:13	3070:13	9	||
EXPR	3070:16	3070:65	9	( datatype == TIFF_IFD && in_datatype == TIFF_IFD8 )
LEAF_NODE	3070:16	3070:16	10	(
AND	3070:17	3070:41	10	datatype == TIFF_IFD && in_datatype == TIFF_IFD8
EXPR	3070:17	3070:29	11	datatype == TIFF_IFD
FIELD	3070:17	3070:17	12	datatype
LEAF_NODE	3070:17	3070:17	13	datatype
EQ_OPERATOR	3070:26	3070:26	12	==
LEAF_NODE	3070:26	3070:26	13	==
FIELD	3070:29	3070:29	12	TIFF_IFD
LEAF_NODE	3070:29	3070:29	13	TIFF_IFD
LEAF_NODE	3070:38	3070:38	11	&&
EXPR	3070:41	3070:56	11	in_datatype == TIFF_IFD8
FIELD	3070:41	3070:41	12	in_datatype
LEAF_NODE	3070:41	3070:41	13	in_datatype
EQ_OPERATOR	3070:53	3070:53	12	==
LEAF_NODE	3070:53	3070:53	13	==
FIELD	3070:56	3070:56	12	TIFF_IFD8
LEAF_NODE	3070:56	3070:56	13	TIFF_IFD8
LEAF_NODE	3070:65	3070:65	10	)
LEAF_NODE	3070:67	3070:67	6	)
STATEMENTS	3071:4	3086:4	6	
LEAF_NODE	3071:4	3071:4	7	{
STATEMENTS	3072:1	3074:8	7	
SIMPLE_DECL	3072:1	3072:11	8	tmsize_t i ;
VAR_DECL	3072:1	3072:10	9	tmsize_t i
TYPE	3072:1	3072:1	10	tmsize_t
TYPE_NAME	3072:1	3072:1	11	tmsize_t
LEAF_NODE	3072:1	3072:1	12	tmsize_t
NAME	3072:10	3072:10	10	i
LEAF_NODE	3072:10	3072:10	11	i
LEAF_NODE	3072:11	3072:11	9	;
ITERATION	3074:8	3075:8	8	
KEYWORD	3074:8	3074:8	9	for
LEAF_NODE	3074:8	3074:8	10	for
LEAF_NODE	3074:11	3074:11	9	(
FOR_INIT	3074:13	3074:18	9	i = 0 ;
EXPR	3074:13	3074:13	10	i = 0
ASSIGN	3074:13	3074:17	11	i = 0
LVAL	3074:13	3074:13	12	i
FIELD	3074:13	3074:13	13	i
LEAF_NODE	3074:13	3074:13	14	i
ASSIGN_OP	3074:15	3074:15	12	=
LEAF_NODE	3074:15	3074:15	13	=
RVAL	3074:17	3074:17	12	0
FIELD	3074:17	3074:17	13	0
LEAF_NODE	3074:17	3074:17	14	0
LEAF_NODE	3074:18	3074:18	10	;
CONDITION	3074:20	3074:20	9	i < count
EXPR	3074:20	3074:24	10	i < count
FIELD	3074:20	3074:20	11	i
LEAF_NODE	3074:20	3074:20	12	i
REL_OPERATOR	3074:22	3074:22	11	<
LEAF_NODE	3074:22	3074:22	12	<
FIELD	3074:24	3074:24	11	count
LEAF_NODE	3074:24	3074:24	12	count
LEAF_NODE	3074:29	3074:29	9	;
FOR_EXPR	3074:31	3074:31	9	i ++
EXPR	3074:31	3074:31	10	i ++
FIELD	3074:31	3074:32	11	i ++
LEAF_NODE	3074:31	3074:31	12	i
LEAF_NODE	3074:32	3074:32	12	++
LEAF_NODE	3074:35	3074:35	9	)
STATEMENTS	3075:8	3085:8	9	
LEAF_NODE	3075:8	3075:8	10	{
STATEMENTS	3076:12	3078:12	10	
EXPR_STATEMENT	3076:12	3077:45	11	( ( uint32 * ) buf_to_write ) [ i ] = ( uint32 ) ( ( uint64 * ) data ) [ i ] ;
EXPR	3076:12	3076:12	12	( ( uint32 * ) buf_to_write ) [ i ] = ( uint32 ) ( ( uint64 * ) data ) [ i ]
ASSIGN	3076:12	3077:16	13	( ( uint32 * ) buf_to_write ) [ i ] = ( uint32 ) ( ( uint64 * ) data ) [ i ]
LVAL	3076:12	3076:39	14	( ( uint32 * ) buf_to_write ) [ i ]
LEAF_NODE	3076:12	3076:12	15	(
LEAF_NODE	3076:13	3076:13	15	(
TYPE_NAME	3076:14	3076:14	15	uint32
LEAF_NODE	3076:14	3076:14	16	uint32
LEAF_NODE	3076:21	3076:21	15	*
LEAF_NODE	3076:22	3076:22	15	)
FIELD	3076:24	3076:24	15	buf_to_write
LEAF_NODE	3076:24	3076:24	16	buf_to_write
LEAF_NODE	3076:36	3076:36	15	)
LEAF_NODE	3076:37	3076:37	15	[
EXPR	3076:38	3076:38	15	i
FIELD	3076:38	3076:38	16	i
LEAF_NODE	3076:38	3076:38	17	i
LEAF_NODE	3076:39	3076:39	15	]
ASSIGN_OP	3076:41	3076:41	14	=
LEAF_NODE	3076:41	3076:41	15	=
RVAL	3077:16	3077:44	14	( uint32 ) ( ( uint64 * ) data ) [ i ]
LEAF_NODE	3077:16	3077:16	15	(
TYPE_NAME	3077:17	3077:17	15	uint32
LEAF_NODE	3077:17	3077:17	16	uint32
LEAF_NODE	3077:23	3077:23	15	)
LEAF_NODE	3077:25	3077:25	15	(
LEAF_NODE	3077:26	3077:26	15	(
TYPE_NAME	3077:27	3077:27	15	uint64
LEAF_NODE	3077:27	3077:27	16	uint64
LEAF_NODE	3077:34	3077:34	15	*
LEAF_NODE	3077:35	3077:35	15	)
FIELD	3077:37	3077:37	15	data
LEAF_NODE	3077:37	3077:37	16	data
LEAF_NODE	3077:41	3077:41	15	)
LEAF_NODE	3077:42	3077:42	15	[
EXPR	3077:43	3077:43	15	i
FIELD	3077:43	3077:43	16	i
LEAF_NODE	3077:43	3077:43	17	i
LEAF_NODE	3077:44	3077:44	15	]
LEAF_NODE	3077:45	3077:45	12	;
SELECTION	3078:12	3079:12	11	
KEYWORD	3078:12	3078:12	12	if
LEAF_NODE	3078:12	3078:12	13	if
LEAF_NODE	3078:14	3078:14	12	(
CONDITION	3078:16	3078:16	12	( uint64 ) ( ( uint32 * ) buf_to_write ) [ i ] != ( ( uint64 * ) data ) [ i ]
EXPR	3078:16	3078:76	13	( uint64 ) ( ( uint32 * ) buf_to_write ) [ i ] != ( ( uint64 * ) data ) [ i ]
LEAF_NODE	3078:16	3078:16	14	(
TYPE_NAME	3078:17	3078:17	14	uint64
LEAF_NODE	3078:17	3078:17	15	uint64
LEAF_NODE	3078:23	3078:23	14	)
LEAF_NODE	3078:25	3078:25	14	(
LEAF_NODE	3078:26	3078:26	14	(
TYPE_NAME	3078:27	3078:27	14	uint32
LEAF_NODE	3078:27	3078:27	15	uint32
LEAF_NODE	3078:34	3078:34	14	*
LEAF_NODE	3078:35	3078:35	14	)
FIELD	3078:37	3078:37	14	buf_to_write
LEAF_NODE	3078:37	3078:37	15	buf_to_write
LEAF_NODE	3078:49	3078:49	14	)
LEAF_NODE	3078:50	3078:50	14	[
EXPR	3078:51	3078:51	14	i
FIELD	3078:51	3078:51	15	i
LEAF_NODE	3078:51	3078:51	16	i
LEAF_NODE	3078:52	3078:52	14	]
EQ_OPERATOR	3078:54	3078:54	14	!=
LEAF_NODE	3078:54	3078:54	15	!=
LEAF_NODE	3078:57	3078:57	14	(
LEAF_NODE	3078:58	3078:58	14	(
TYPE_NAME	3078:59	3078:59	14	uint64
LEAF_NODE	3078:59	3078:59	15	uint64
LEAF_NODE	3078:66	3078:66	14	*
LEAF_NODE	3078:67	3078:67	14	)
FIELD	3078:69	3078:69	14	data
LEAF_NODE	3078:69	3078:69	15	data
LEAF_NODE	3078:73	3078:73	14	)
LEAF_NODE	3078:74	3078:74	14	[
EXPR	3078:75	3078:75	14	i
FIELD	3078:75	3078:75	15	i
LEAF_NODE	3078:75	3078:75	16	i
LEAF_NODE	3078:76	3078:76	14	]
LEAF_NODE	3078:78	3078:78	12	)
STATEMENTS	3079:12	3084:12	12	
LEAF_NODE	3079:12	3079:12	13	{
STATEMENTS	3080:16	3083:16	13	
EXPR_STATEMENT	3080:16	3080:41	14	_TIFFfree ( buf_to_write ) ;
EXPR	3080:16	3080:16	15	_TIFFfree ( buf_to_write )
FUNCTION_CALL	3080:16	3080:40	16	_TIFFfree ( buf_to_write )
CALLEE	3080:16	3080:16	17	_TIFFfree
LEAF_NODE	3080:16	3080:16	18	_TIFFfree
LEAF_NODE	3080:25	3080:25	17	(
ARGUMENT	3080:27	3080:27	17	buf_to_write
FIELD	3080:27	3080:27	18	buf_to_write
LEAF_NODE	3080:27	3080:27	19	buf_to_write
LEAF_NODE	3080:40	3080:40	17	)
LEAF_NODE	3080:41	3080:41	15	;
EXPR_STATEMENT	3081:16	3082:75	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Value exceeds 32bit range of output type." ) ;
EXPR	3081:16	3081:16	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Value exceeds 32bit range of output type." )
FUNCTION_CALL	3081:16	3082:74	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Value exceeds 32bit range of output type." )
CALLEE	3081:16	3081:16	17	TIFFErrorExt
LEAF_NODE	3081:16	3081:16	18	TIFFErrorExt
LEAF_NODE	3081:28	3081:28	17	(
ARGUMENT	3081:30	3081:30	17	tif -> tif_clientdata
FIELD	3081:30	3081:35	18	tif -> tif_clientdata
LEAF_NODE	3081:30	3081:30	19	tif
LEAF_NODE	3081:33	3081:33	19	->
LEAF_NODE	3081:35	3081:35	19	tif_clientdata
LEAF_NODE	3081:49	3081:49	17	,
ARGUMENT	3081:51	3081:51	17	module
FIELD	3081:51	3081:51	18	module
LEAF_NODE	3081:51	3081:51	19	module
LEAF_NODE	3081:57	3081:57	17	,
ARGUMENT	3082:30	3082:30	17	"Value exceeds 32bit range of output type."
FIELD	3082:30	3082:30	18	"Value exceeds 32bit range of output type."
LEAF_NODE	3082:30	3082:30	19	"Value exceeds 32bit range of output type."
LEAF_NODE	3082:74	3082:74	17	)
LEAF_NODE	3082:75	3082:75	15	;
JUMP_STATEMENT	3083:16	3083:24	14	return 0 ;
KEYWORD	3083:16	3083:16	15	return
LEAF_NODE	3083:16	3083:16	16	return
DESTINATION	3083:23	3083:23	15	0
EXPR	3083:23	3083:23	16	0
FIELD	3083:23	3083:23	17	0
LEAF_NODE	3083:23	3083:23	18	0
LEAF_NODE	3083:24	3083:24	15	;
LEAF_NODE	3084:12	3084:12	13	}
LEAF_NODE	3085:8	3085:8	10	}
LEAF_NODE	3086:4	3086:4	7	}
SELECTION	3087:4	3087:9	3	
KEYWORD	3087:4	3087:4	4	else
LEAF_NODE	3087:4	3087:4	5	else
STATEMENTS	3087:9	3087:9	4	
SELECTION	3087:9	3088:4	5	
KEYWORD	3087:9	3087:9	6	if
LEAF_NODE	3087:9	3087:9	7	if
LEAF_NODE	3087:11	3087:11	6	(
CONDITION	3087:13	3087:13	6	datatype == TIFF_SHORT && in_datatype == TIFF_LONG8
EXPR	3087:13	3087:13	7	datatype == TIFF_SHORT && in_datatype == TIFF_LONG8
AND	3087:13	3087:39	8	datatype == TIFF_SHORT && in_datatype == TIFF_LONG8
EXPR	3087:13	3087:25	9	datatype == TIFF_SHORT
FIELD	3087:13	3087:13	10	datatype
LEAF_NODE	3087:13	3087:13	11	datatype
EQ_OPERATOR	3087:22	3087:22	10	==
LEAF_NODE	3087:22	3087:22	11	==
FIELD	3087:25	3087:25	10	TIFF_SHORT
LEAF_NODE	3087:25	3087:25	11	TIFF_SHORT
LEAF_NODE	3087:36	3087:36	9	&&
EXPR	3087:39	3087:54	9	in_datatype == TIFF_LONG8
FIELD	3087:39	3087:39	10	in_datatype
LEAF_NODE	3087:39	3087:39	11	in_datatype
EQ_OPERATOR	3087:51	3087:51	10	==
LEAF_NODE	3087:51	3087:51	11	==
FIELD	3087:54	3087:54	10	TIFF_LONG8
LEAF_NODE	3087:54	3087:54	11	TIFF_LONG8
LEAF_NODE	3087:65	3087:65	6	)
STATEMENTS	3088:4	3103:4	6	
LEAF_NODE	3088:4	3088:4	7	{
STATEMENTS	3089:1	3091:8	7	
SIMPLE_DECL	3089:1	3089:11	8	tmsize_t i ;
VAR_DECL	3089:1	3089:10	9	tmsize_t i
TYPE	3089:1	3089:1	10	tmsize_t
TYPE_NAME	3089:1	3089:1	11	tmsize_t
LEAF_NODE	3089:1	3089:1	12	tmsize_t
NAME	3089:10	3089:10	10	i
LEAF_NODE	3089:10	3089:10	11	i
LEAF_NODE	3089:11	3089:11	9	;
ITERATION	3091:8	3092:8	8	
KEYWORD	3091:8	3091:8	9	for
LEAF_NODE	3091:8	3091:8	10	for
LEAF_NODE	3091:11	3091:11	9	(
FOR_INIT	3091:13	3091:18	9	i = 0 ;
EXPR	3091:13	3091:13	10	i = 0
ASSIGN	3091:13	3091:17	11	i = 0
LVAL	3091:13	3091:13	12	i
FIELD	3091:13	3091:13	13	i
LEAF_NODE	3091:13	3091:13	14	i
ASSIGN_OP	3091:15	3091:15	12	=
LEAF_NODE	3091:15	3091:15	13	=
RVAL	3091:17	3091:17	12	0
FIELD	3091:17	3091:17	13	0
LEAF_NODE	3091:17	3091:17	14	0
LEAF_NODE	3091:18	3091:18	10	;
CONDITION	3091:20	3091:20	9	i < count
EXPR	3091:20	3091:24	10	i < count
FIELD	3091:20	3091:20	11	i
LEAF_NODE	3091:20	3091:20	12	i
REL_OPERATOR	3091:22	3091:22	11	<
LEAF_NODE	3091:22	3091:22	12	<
FIELD	3091:24	3091:24	11	count
LEAF_NODE	3091:24	3091:24	12	count
LEAF_NODE	3091:29	3091:29	9	;
FOR_EXPR	3091:31	3091:31	9	i ++
EXPR	3091:31	3091:31	10	i ++
FIELD	3091:31	3091:32	11	i ++
LEAF_NODE	3091:31	3091:31	12	i
LEAF_NODE	3091:32	3091:32	12	++
LEAF_NODE	3091:35	3091:35	9	)
STATEMENTS	3092:8	3102:8	9	
LEAF_NODE	3092:8	3092:8	10	{
STATEMENTS	3093:12	3095:12	10	
EXPR_STATEMENT	3093:12	3094:45	11	( ( uint16 * ) buf_to_write ) [ i ] = ( uint16 ) ( ( uint64 * ) data ) [ i ] ;
EXPR	3093:12	3093:12	12	( ( uint16 * ) buf_to_write ) [ i ] = ( uint16 ) ( ( uint64 * ) data ) [ i ]
ASSIGN	3093:12	3094:16	13	( ( uint16 * ) buf_to_write ) [ i ] = ( uint16 ) ( ( uint64 * ) data ) [ i ]
LVAL	3093:12	3093:39	14	( ( uint16 * ) buf_to_write ) [ i ]
LEAF_NODE	3093:12	3093:12	15	(
LEAF_NODE	3093:13	3093:13	15	(
TYPE_NAME	3093:14	3093:14	15	uint16
LEAF_NODE	3093:14	3093:14	16	uint16
LEAF_NODE	3093:21	3093:21	15	*
LEAF_NODE	3093:22	3093:22	15	)
FIELD	3093:24	3093:24	15	buf_to_write
LEAF_NODE	3093:24	3093:24	16	buf_to_write
LEAF_NODE	3093:36	3093:36	15	)
LEAF_NODE	3093:37	3093:37	15	[
EXPR	3093:38	3093:38	15	i
FIELD	3093:38	3093:38	16	i
LEAF_NODE	3093:38	3093:38	17	i
LEAF_NODE	3093:39	3093:39	15	]
ASSIGN_OP	3093:41	3093:41	14	=
LEAF_NODE	3093:41	3093:41	15	=
RVAL	3094:16	3094:44	14	( uint16 ) ( ( uint64 * ) data ) [ i ]
LEAF_NODE	3094:16	3094:16	15	(
TYPE_NAME	3094:17	3094:17	15	uint16
LEAF_NODE	3094:17	3094:17	16	uint16
LEAF_NODE	3094:23	3094:23	15	)
LEAF_NODE	3094:25	3094:25	15	(
LEAF_NODE	3094:26	3094:26	15	(
TYPE_NAME	3094:27	3094:27	15	uint64
LEAF_NODE	3094:27	3094:27	16	uint64
LEAF_NODE	3094:34	3094:34	15	*
LEAF_NODE	3094:35	3094:35	15	)
FIELD	3094:37	3094:37	15	data
LEAF_NODE	3094:37	3094:37	16	data
LEAF_NODE	3094:41	3094:41	15	)
LEAF_NODE	3094:42	3094:42	15	[
EXPR	3094:43	3094:43	15	i
FIELD	3094:43	3094:43	16	i
LEAF_NODE	3094:43	3094:43	17	i
LEAF_NODE	3094:44	3094:44	15	]
LEAF_NODE	3094:45	3094:45	12	;
SELECTION	3095:12	3096:12	11	
KEYWORD	3095:12	3095:12	12	if
LEAF_NODE	3095:12	3095:12	13	if
LEAF_NODE	3095:14	3095:14	12	(
CONDITION	3095:16	3095:16	12	( uint64 ) ( ( uint16 * ) buf_to_write ) [ i ] != ( ( uint64 * ) data ) [ i ]
EXPR	3095:16	3095:76	13	( uint64 ) ( ( uint16 * ) buf_to_write ) [ i ] != ( ( uint64 * ) data ) [ i ]
LEAF_NODE	3095:16	3095:16	14	(
TYPE_NAME	3095:17	3095:17	14	uint64
LEAF_NODE	3095:17	3095:17	15	uint64
LEAF_NODE	3095:23	3095:23	14	)
LEAF_NODE	3095:25	3095:25	14	(
LEAF_NODE	3095:26	3095:26	14	(
TYPE_NAME	3095:27	3095:27	14	uint16
LEAF_NODE	3095:27	3095:27	15	uint16
LEAF_NODE	3095:34	3095:34	14	*
LEAF_NODE	3095:35	3095:35	14	)
FIELD	3095:37	3095:37	14	buf_to_write
LEAF_NODE	3095:37	3095:37	15	buf_to_write
LEAF_NODE	3095:49	3095:49	14	)
LEAF_NODE	3095:50	3095:50	14	[
EXPR	3095:51	3095:51	14	i
FIELD	3095:51	3095:51	15	i
LEAF_NODE	3095:51	3095:51	16	i
LEAF_NODE	3095:52	3095:52	14	]
EQ_OPERATOR	3095:54	3095:54	14	!=
LEAF_NODE	3095:54	3095:54	15	!=
LEAF_NODE	3095:57	3095:57	14	(
LEAF_NODE	3095:58	3095:58	14	(
TYPE_NAME	3095:59	3095:59	14	uint64
LEAF_NODE	3095:59	3095:59	15	uint64
LEAF_NODE	3095:66	3095:66	14	*
LEAF_NODE	3095:67	3095:67	14	)
FIELD	3095:69	3095:69	14	data
LEAF_NODE	3095:69	3095:69	15	data
LEAF_NODE	3095:73	3095:73	14	)
LEAF_NODE	3095:74	3095:74	14	[
EXPR	3095:75	3095:75	14	i
FIELD	3095:75	3095:75	15	i
LEAF_NODE	3095:75	3095:75	16	i
LEAF_NODE	3095:76	3095:76	14	]
LEAF_NODE	3095:78	3095:78	12	)
STATEMENTS	3096:12	3101:12	12	
LEAF_NODE	3096:12	3096:12	13	{
STATEMENTS	3097:16	3100:16	13	
EXPR_STATEMENT	3097:16	3097:41	14	_TIFFfree ( buf_to_write ) ;
EXPR	3097:16	3097:16	15	_TIFFfree ( buf_to_write )
FUNCTION_CALL	3097:16	3097:40	16	_TIFFfree ( buf_to_write )
CALLEE	3097:16	3097:16	17	_TIFFfree
LEAF_NODE	3097:16	3097:16	18	_TIFFfree
LEAF_NODE	3097:25	3097:25	17	(
ARGUMENT	3097:27	3097:27	17	buf_to_write
FIELD	3097:27	3097:27	18	buf_to_write
LEAF_NODE	3097:27	3097:27	19	buf_to_write
LEAF_NODE	3097:40	3097:40	17	)
LEAF_NODE	3097:41	3097:41	15	;
EXPR_STATEMENT	3098:16	3099:75	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Value exceeds 16bit range of output type." ) ;
EXPR	3098:16	3098:16	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Value exceeds 16bit range of output type." )
FUNCTION_CALL	3098:16	3099:74	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Value exceeds 16bit range of output type." )
CALLEE	3098:16	3098:16	17	TIFFErrorExt
LEAF_NODE	3098:16	3098:16	18	TIFFErrorExt
LEAF_NODE	3098:28	3098:28	17	(
ARGUMENT	3098:30	3098:30	17	tif -> tif_clientdata
FIELD	3098:30	3098:35	18	tif -> tif_clientdata
LEAF_NODE	3098:30	3098:30	19	tif
LEAF_NODE	3098:33	3098:33	19	->
LEAF_NODE	3098:35	3098:35	19	tif_clientdata
LEAF_NODE	3098:49	3098:49	17	,
ARGUMENT	3098:51	3098:51	17	module
FIELD	3098:51	3098:51	18	module
LEAF_NODE	3098:51	3098:51	19	module
LEAF_NODE	3098:57	3098:57	17	,
ARGUMENT	3099:30	3099:30	17	"Value exceeds 16bit range of output type."
FIELD	3099:30	3099:30	18	"Value exceeds 16bit range of output type."
LEAF_NODE	3099:30	3099:30	19	"Value exceeds 16bit range of output type."
LEAF_NODE	3099:74	3099:74	17	)
LEAF_NODE	3099:75	3099:75	15	;
JUMP_STATEMENT	3100:16	3100:24	14	return 0 ;
KEYWORD	3100:16	3100:16	15	return
LEAF_NODE	3100:16	3100:16	16	return
DESTINATION	3100:23	3100:23	15	0
EXPR	3100:23	3100:23	16	0
FIELD	3100:23	3100:23	17	0
LEAF_NODE	3100:23	3100:23	18	0
LEAF_NODE	3100:24	3100:24	15	;
LEAF_NODE	3101:12	3101:12	13	}
LEAF_NODE	3102:8	3102:8	10	}
LEAF_NODE	3103:4	3103:4	7	}
SELECTION	3104:4	3105:4	3	
KEYWORD	3104:4	3104:4	4	else
LEAF_NODE	3104:4	3104:4	5	else
STATEMENTS	3105:4	3109:4	4	
LEAF_NODE	3105:4	3105:4	5	{
STATEMENTS	3106:8	3108:8	5	
EXPR_STATEMENT	3106:8	3107:52	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Unhandled type conversion." ) ;
EXPR	3106:8	3106:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Unhandled type conversion." )
FUNCTION_CALL	3106:8	3107:51	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Unhandled type conversion." )
CALLEE	3106:8	3106:8	9	TIFFErrorExt
LEAF_NODE	3106:8	3106:8	10	TIFFErrorExt
LEAF_NODE	3106:20	3106:20	9	(
ARGUMENT	3106:22	3106:22	9	tif -> tif_clientdata
FIELD	3106:22	3106:27	10	tif -> tif_clientdata
LEAF_NODE	3106:22	3106:22	11	tif
LEAF_NODE	3106:25	3106:25	11	->
LEAF_NODE	3106:27	3106:27	11	tif_clientdata
LEAF_NODE	3106:41	3106:41	9	,
ARGUMENT	3106:43	3106:43	9	module
FIELD	3106:43	3106:43	10	module
LEAF_NODE	3106:43	3106:43	11	module
LEAF_NODE	3106:49	3106:49	9	,
ARGUMENT	3107:22	3107:22	9	"Unhandled type conversion."
FIELD	3107:22	3107:22	10	"Unhandled type conversion."
LEAF_NODE	3107:22	3107:22	11	"Unhandled type conversion."
LEAF_NODE	3107:51	3107:51	9	)
LEAF_NODE	3107:52	3107:52	7	;
JUMP_STATEMENT	3108:8	3108:16	6	return 0 ;
KEYWORD	3108:8	3108:8	7	return
LEAF_NODE	3108:8	3108:8	8	return
DESTINATION	3108:15	3108:15	7	0
EXPR	3108:15	3108:15	8	0
FIELD	3108:15	3108:15	9	0
LEAF_NODE	3108:15	3108:15	10	0
LEAF_NODE	3108:16	3108:16	7	;
LEAF_NODE	3109:4	3109:4	5	}
SELECTION	3111:4	3112:4	3	
KEYWORD	3111:4	3111:4	4	if
LEAF_NODE	3111:4	3111:4	5	if
LEAF_NODE	3111:6	3111:6	4	(
CONDITION	3111:8	3111:8	4	TIFFDataWidth ( datatype ) > 1 && ( tif -> tif_flags & TIFF_SWAB )
EXPR	3111:8	3111:8	5	TIFFDataWidth ( datatype ) > 1 && ( tif -> tif_flags & TIFF_SWAB )
AND	3111:8	3111:39	6	TIFFDataWidth ( datatype ) > 1 && ( tif -> tif_flags & TIFF_SWAB )
EXPR	3111:8	3111:34	7	TIFFDataWidth ( datatype ) > 1
FUNCTION_CALL	3111:8	3111:30	8	TIFFDataWidth ( datatype )
CALLEE	3111:8	3111:8	9	TIFFDataWidth
LEAF_NODE	3111:8	3111:8	10	TIFFDataWidth
LEAF_NODE	3111:21	3111:21	9	(
ARGUMENT	3111:22	3111:22	9	datatype
FIELD	3111:22	3111:22	10	datatype
LEAF_NODE	3111:22	3111:22	11	datatype
LEAF_NODE	3111:30	3111:30	9	)
REL_OPERATOR	3111:32	3111:32	8	>
LEAF_NODE	3111:32	3111:32	9	>
FIELD	3111:34	3111:34	8	1
LEAF_NODE	3111:34	3111:34	9	1
LEAF_NODE	3111:36	3111:36	7	&&
EXPR	3111:39	3111:64	7	( tif -> tif_flags & TIFF_SWAB )
LEAF_NODE	3111:39	3111:39	8	(
FIELD	3111:40	3111:45	8	tif -> tif_flags
LEAF_NODE	3111:40	3111:40	9	tif
LEAF_NODE	3111:43	3111:43	9	->
LEAF_NODE	3111:45	3111:45	9	tif_flags
LEAF_NODE	3111:54	3111:54	8	&
FIELD	3111:55	3111:55	8	TIFF_SWAB
LEAF_NODE	3111:55	3111:55	9	TIFF_SWAB
LEAF_NODE	3111:64	3111:64	8	)
LEAF_NODE	3111:66	3111:66	4	)
STATEMENTS	3112:4	3119:4	4	
LEAF_NODE	3112:4	3112:4	5	{
STATEMENTS	3113:8	3117:8	5	
SELECTION	3113:8	3114:12	6	
KEYWORD	3113:8	3113:8	7	if
LEAF_NODE	3113:8	3113:8	8	if
LEAF_NODE	3113:10	3113:10	7	(
CONDITION	3113:12	3113:12	7	TIFFDataWidth ( datatype ) == 2
EXPR	3113:12	3113:39	8	TIFFDataWidth ( datatype ) == 2
FUNCTION_CALL	3113:12	3113:34	9	TIFFDataWidth ( datatype )
CALLEE	3113:12	3113:12	10	TIFFDataWidth
LEAF_NODE	3113:12	3113:12	11	TIFFDataWidth
LEAF_NODE	3113:25	3113:25	10	(
ARGUMENT	3113:26	3113:26	10	datatype
FIELD	3113:26	3113:26	11	datatype
LEAF_NODE	3113:26	3113:26	12	datatype
LEAF_NODE	3113:34	3113:34	10	)
EQ_OPERATOR	3113:36	3113:36	9	==
LEAF_NODE	3113:36	3113:36	10	==
FIELD	3113:39	3113:39	9	2
LEAF_NODE	3113:39	3113:39	10	2
LEAF_NODE	3113:41	3113:41	7	)
STATEMENTS	3114:12	3114:12	7	
EXPR_STATEMENT	3114:12	3114:66	8	TIFFSwabArrayOfShort ( ( uint16 * ) buf_to_write , count ) ;
EXPR	3114:12	3114:12	9	TIFFSwabArrayOfShort ( ( uint16 * ) buf_to_write , count )
FUNCTION_CALL	3114:12	3114:65	10	TIFFSwabArrayOfShort ( ( uint16 * ) buf_to_write , count )
CALLEE	3114:12	3114:12	11	TIFFSwabArrayOfShort
LEAF_NODE	3114:12	3114:12	12	TIFFSwabArrayOfShort
LEAF_NODE	3114:32	3114:32	11	(
ARGUMENT	3114:34	3114:45	11	( uint16 * ) buf_to_write
LEAF_NODE	3114:34	3114:34	12	(
TYPE_NAME	3114:35	3114:35	12	uint16
LEAF_NODE	3114:35	3114:35	13	uint16
LEAF_NODE	3114:42	3114:42	12	*
LEAF_NODE	3114:43	3114:43	12	)
FIELD	3114:45	3114:45	12	buf_to_write
LEAF_NODE	3114:45	3114:45	13	buf_to_write
LEAF_NODE	3114:57	3114:57	11	,
ARGUMENT	3114:59	3114:59	11	count
FIELD	3114:59	3114:59	12	count
LEAF_NODE	3114:59	3114:59	13	count
LEAF_NODE	3114:65	3114:65	11	)
LEAF_NODE	3114:66	3114:66	9	;
SELECTION	3115:8	3115:13	6	
KEYWORD	3115:8	3115:8	7	else
LEAF_NODE	3115:8	3115:8	8	else
STATEMENTS	3115:13	3115:13	7	
SELECTION	3115:13	3116:12	8	
KEYWORD	3115:13	3115:13	9	if
LEAF_NODE	3115:13	3115:13	10	if
LEAF_NODE	3115:15	3115:15	9	(
CONDITION	3115:17	3115:17	9	TIFFDataWidth ( datatype ) == 4
EXPR	3115:17	3115:44	10	TIFFDataWidth ( datatype ) == 4
FUNCTION_CALL	3115:17	3115:39	11	TIFFDataWidth ( datatype )
CALLEE	3115:17	3115:17	12	TIFFDataWidth
LEAF_NODE	3115:17	3115:17	13	TIFFDataWidth
LEAF_NODE	3115:30	3115:30	12	(
ARGUMENT	3115:31	3115:31	12	datatype
FIELD	3115:31	3115:31	13	datatype
LEAF_NODE	3115:31	3115:31	14	datatype
LEAF_NODE	3115:39	3115:39	12	)
EQ_OPERATOR	3115:41	3115:41	11	==
LEAF_NODE	3115:41	3115:41	12	==
FIELD	3115:44	3115:44	11	4
LEAF_NODE	3115:44	3115:44	12	4
LEAF_NODE	3115:46	3115:46	9	)
STATEMENTS	3116:12	3116:12	9	
EXPR_STATEMENT	3116:12	3116:65	10	TIFFSwabArrayOfLong ( ( uint32 * ) buf_to_write , count ) ;
EXPR	3116:12	3116:12	11	TIFFSwabArrayOfLong ( ( uint32 * ) buf_to_write , count )
FUNCTION_CALL	3116:12	3116:64	12	TIFFSwabArrayOfLong ( ( uint32 * ) buf_to_write , count )
CALLEE	3116:12	3116:12	13	TIFFSwabArrayOfLong
LEAF_NODE	3116:12	3116:12	14	TIFFSwabArrayOfLong
LEAF_NODE	3116:31	3116:31	13	(
ARGUMENT	3116:33	3116:44	13	( uint32 * ) buf_to_write
LEAF_NODE	3116:33	3116:33	14	(
TYPE_NAME	3116:34	3116:34	14	uint32
LEAF_NODE	3116:34	3116:34	15	uint32
LEAF_NODE	3116:41	3116:41	14	*
LEAF_NODE	3116:42	3116:42	14	)
FIELD	3116:44	3116:44	14	buf_to_write
LEAF_NODE	3116:44	3116:44	15	buf_to_write
LEAF_NODE	3116:56	3116:56	13	,
ARGUMENT	3116:58	3116:58	13	count
FIELD	3116:58	3116:58	14	count
LEAF_NODE	3116:58	3116:58	15	count
LEAF_NODE	3116:64	3116:64	13	)
LEAF_NODE	3116:65	3116:65	11	;
SELECTION	3117:8	3117:13	6	
KEYWORD	3117:8	3117:8	7	else
LEAF_NODE	3117:8	3117:8	8	else
STATEMENTS	3117:13	3117:13	7	
SELECTION	3117:13	3118:12	8	
KEYWORD	3117:13	3117:13	9	if
LEAF_NODE	3117:13	3117:13	10	if
LEAF_NODE	3117:15	3117:15	9	(
CONDITION	3117:17	3117:17	9	TIFFDataWidth ( datatype ) == 8
EXPR	3117:17	3117:44	10	TIFFDataWidth ( datatype ) == 8
FUNCTION_CALL	3117:17	3117:39	11	TIFFDataWidth ( datatype )
CALLEE	3117:17	3117:17	12	TIFFDataWidth
LEAF_NODE	3117:17	3117:17	13	TIFFDataWidth
LEAF_NODE	3117:30	3117:30	12	(
ARGUMENT	3117:31	3117:31	12	datatype
FIELD	3117:31	3117:31	13	datatype
LEAF_NODE	3117:31	3117:31	14	datatype
LEAF_NODE	3117:39	3117:39	12	)
EQ_OPERATOR	3117:41	3117:41	11	==
LEAF_NODE	3117:41	3117:41	12	==
FIELD	3117:44	3117:44	11	8
LEAF_NODE	3117:44	3117:44	12	8
LEAF_NODE	3117:46	3117:46	9	)
STATEMENTS	3118:12	3118:12	9	
EXPR_STATEMENT	3118:12	3118:66	10	TIFFSwabArrayOfLong8 ( ( uint64 * ) buf_to_write , count ) ;
EXPR	3118:12	3118:12	11	TIFFSwabArrayOfLong8 ( ( uint64 * ) buf_to_write , count )
FUNCTION_CALL	3118:12	3118:65	12	TIFFSwabArrayOfLong8 ( ( uint64 * ) buf_to_write , count )
CALLEE	3118:12	3118:12	13	TIFFSwabArrayOfLong8
LEAF_NODE	3118:12	3118:12	14	TIFFSwabArrayOfLong8
LEAF_NODE	3118:32	3118:32	13	(
ARGUMENT	3118:34	3118:45	13	( uint64 * ) buf_to_write
LEAF_NODE	3118:34	3118:34	14	(
TYPE_NAME	3118:35	3118:35	14	uint64
LEAF_NODE	3118:35	3118:35	15	uint64
LEAF_NODE	3118:42	3118:42	14	*
LEAF_NODE	3118:43	3118:43	14	)
FIELD	3118:45	3118:45	14	buf_to_write
LEAF_NODE	3118:45	3118:45	15	buf_to_write
LEAF_NODE	3118:57	3118:57	13	,
ARGUMENT	3118:59	3118:59	13	count
FIELD	3118:59	3118:59	14	count
LEAF_NODE	3118:59	3118:59	15	count
LEAF_NODE	3118:65	3118:65	13	)
LEAF_NODE	3118:66	3118:66	11	;
LEAF_NODE	3119:4	3119:4	5	}
SELECTION	3124:4	3125:4	3	
KEYWORD	3124:4	3124:4	4	if
LEAF_NODE	3124:4	3124:4	5	if
LEAF_NODE	3124:7	3124:7	4	(
CONDITION	3124:8	3124:8	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	3124:8	3124:8	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	3124:8	3124:37	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	3124:8	3124:8	7	!
LEAF_NODE	3124:8	3124:8	8	!
LEAF_NODE	3124:9	3124:9	7	(
FIELD	3124:10	3124:15	7	tif -> tif_flags
LEAF_NODE	3124:10	3124:10	8	tif
LEAF_NODE	3124:13	3124:13	8	->
LEAF_NODE	3124:15	3124:15	8	tif_flags
LEAF_NODE	3124:24	3124:24	7	&
FIELD	3124:25	3124:25	7	TIFF_BIGTIFF
LEAF_NODE	3124:25	3124:25	8	TIFF_BIGTIFF
LEAF_NODE	3124:37	3124:37	7	)
LEAF_NODE	3124:38	3124:38	4	)
STATEMENTS	3125:4	3131:4	4	
LEAF_NODE	3125:4	3125:4	5	{
STATEMENTS	3126:8	3126:8	5	
SELECTION	3126:8	3127:8	6	
KEYWORD	3126:8	3126:8	7	if
LEAF_NODE	3126:8	3126:8	8	if
LEAF_NODE	3126:10	3126:10	7	(
CONDITION	3126:12	3126:12	7	TIFFDataWidth ( datatype ) * count <= 4
EXPR	3126:12	3126:47	8	TIFFDataWidth ( datatype ) * count <= 4
FUNCTION_CALL	3126:12	3126:34	9	TIFFDataWidth ( datatype )
CALLEE	3126:12	3126:12	10	TIFFDataWidth
LEAF_NODE	3126:12	3126:12	11	TIFFDataWidth
LEAF_NODE	3126:25	3126:25	10	(
ARGUMENT	3126:26	3126:26	10	datatype
FIELD	3126:26	3126:26	11	datatype
LEAF_NODE	3126:26	3126:26	12	datatype
LEAF_NODE	3126:34	3126:34	10	)
LEAF_NODE	3126:36	3126:36	9	*
FIELD	3126:38	3126:38	9	count
LEAF_NODE	3126:38	3126:38	10	count
REL_OPERATOR	3126:44	3126:44	9	<=
LEAF_NODE	3126:44	3126:44	10	<=
FIELD	3126:47	3126:47	9	4
LEAF_NODE	3126:47	3126:47	10	4
LEAF_NODE	3126:49	3126:49	7	)
STATEMENTS	3127:8	3130:8	7	
LEAF_NODE	3127:8	3127:8	8	{
STATEMENTS	3128:12	3129:12	8	
EXPR_STATEMENT	3128:12	3128:42	9	entry_offset = read_offset + 8 ;
EXPR	3128:12	3128:12	10	entry_offset = read_offset + 8
ASSIGN	3128:12	3128:27	11	entry_offset = read_offset + 8
LVAL	3128:12	3128:12	12	entry_offset
FIELD	3128:12	3128:12	13	entry_offset
LEAF_NODE	3128:12	3128:12	14	entry_offset
ASSIGN_OP	3128:25	3128:25	12	=
LEAF_NODE	3128:25	3128:25	13	=
RVAL	3128:27	3128:41	12	read_offset + 8
FIELD	3128:27	3128:27	13	read_offset
LEAF_NODE	3128:27	3128:27	14	read_offset
LEAF_NODE	3128:39	3128:39	13	+
FIELD	3128:41	3128:41	13	8
LEAF_NODE	3128:41	3128:41	14	8
LEAF_NODE	3128:42	3128:42	10	;
EXPR_STATEMENT	3129:12	3129:30	9	value_in_entry = 1 ;
EXPR	3129:12	3129:12	10	value_in_entry = 1
ASSIGN	3129:12	3129:29	11	value_in_entry = 1
LVAL	3129:12	3129:12	12	value_in_entry
FIELD	3129:12	3129:12	13	value_in_entry
LEAF_NODE	3129:12	3129:12	14	value_in_entry
ASSIGN_OP	3129:27	3129:27	12	=
LEAF_NODE	3129:27	3129:27	13	=
RVAL	3129:29	3129:29	12	1
FIELD	3129:29	3129:29	13	1
LEAF_NODE	3129:29	3129:29	14	1
LEAF_NODE	3129:30	3129:30	10	;
LEAF_NODE	3130:8	3130:8	8	}
LEAF_NODE	3131:4	3131:4	5	}
SELECTION	3132:4	3133:4	3	
KEYWORD	3132:4	3132:4	4	else
LEAF_NODE	3132:4	3132:4	5	else
STATEMENTS	3133:4	3139:4	4	
LEAF_NODE	3133:4	3133:4	5	{
STATEMENTS	3134:8	3134:8	5	
SELECTION	3134:8	3135:8	6	
KEYWORD	3134:8	3134:8	7	if
LEAF_NODE	3134:8	3134:8	8	if
LEAF_NODE	3134:10	3134:10	7	(
CONDITION	3134:12	3134:12	7	TIFFDataWidth ( datatype ) * count <= 8
EXPR	3134:12	3134:47	8	TIFFDataWidth ( datatype ) * count <= 8
FUNCTION_CALL	3134:12	3134:34	9	TIFFDataWidth ( datatype )
CALLEE	3134:12	3134:12	10	TIFFDataWidth
LEAF_NODE	3134:12	3134:12	11	TIFFDataWidth
LEAF_NODE	3134:25	3134:25	10	(
ARGUMENT	3134:26	3134:26	10	datatype
FIELD	3134:26	3134:26	11	datatype
LEAF_NODE	3134:26	3134:26	12	datatype
LEAF_NODE	3134:34	3134:34	10	)
LEAF_NODE	3134:36	3134:36	9	*
FIELD	3134:38	3134:38	9	count
LEAF_NODE	3134:38	3134:38	10	count
REL_OPERATOR	3134:44	3134:44	9	<=
LEAF_NODE	3134:44	3134:44	10	<=
FIELD	3134:47	3134:47	9	8
LEAF_NODE	3134:47	3134:47	10	8
LEAF_NODE	3134:49	3134:49	7	)
STATEMENTS	3135:8	3138:8	7	
LEAF_NODE	3135:8	3135:8	8	{
STATEMENTS	3136:12	3137:12	8	
EXPR_STATEMENT	3136:12	3136:43	9	entry_offset = read_offset + 12 ;
EXPR	3136:12	3136:12	10	entry_offset = read_offset + 12
ASSIGN	3136:12	3136:27	11	entry_offset = read_offset + 12
LVAL	3136:12	3136:12	12	entry_offset
FIELD	3136:12	3136:12	13	entry_offset
LEAF_NODE	3136:12	3136:12	14	entry_offset
ASSIGN_OP	3136:25	3136:25	12	=
LEAF_NODE	3136:25	3136:25	13	=
RVAL	3136:27	3136:41	12	read_offset + 12
FIELD	3136:27	3136:27	13	read_offset
LEAF_NODE	3136:27	3136:27	14	read_offset
LEAF_NODE	3136:39	3136:39	13	+
FIELD	3136:41	3136:41	13	12
LEAF_NODE	3136:41	3136:41	14	12
LEAF_NODE	3136:43	3136:43	10	;
EXPR_STATEMENT	3137:12	3137:30	9	value_in_entry = 1 ;
EXPR	3137:12	3137:12	10	value_in_entry = 1
ASSIGN	3137:12	3137:29	11	value_in_entry = 1
LVAL	3137:12	3137:12	12	value_in_entry
FIELD	3137:12	3137:12	13	value_in_entry
LEAF_NODE	3137:12	3137:12	14	value_in_entry
ASSIGN_OP	3137:27	3137:27	12	=
LEAF_NODE	3137:27	3137:27	13	=
RVAL	3137:29	3137:29	12	1
FIELD	3137:29	3137:29	13	1
LEAF_NODE	3137:29	3137:29	14	1
LEAF_NODE	3137:30	3137:30	10	;
LEAF_NODE	3138:8	3138:8	8	}
LEAF_NODE	3139:4	3139:4	5	}
SELECTION	3141:4	3145:4	3	
KEYWORD	3141:4	3141:4	4	if
LEAF_NODE	3141:4	3141:4	5	if
LEAF_NODE	3141:6	3141:6	4	(
CONDITION	3141:8	3141:8	4	( tag == TIFFTAG_TILEOFFSETS || tag == TIFFTAG_STRIPOFFSETS ) && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0
EXPR	3141:8	3141:8	5	( tag == TIFFTAG_TILEOFFSETS || tag == TIFFTAG_STRIPOFFSETS ) && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0
AND	3141:8	3142:8	6	( tag == TIFFTAG_TILEOFFSETS || tag == TIFFTAG_STRIPOFFSETS ) && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0
EXPR	3141:8	3141:66	7	( tag == TIFFTAG_TILEOFFSETS || tag == TIFFTAG_STRIPOFFSETS )
LEAF_NODE	3141:8	3141:8	8	(
OR	3141:9	3141:39	8	tag == TIFFTAG_TILEOFFSETS || tag == TIFFTAG_STRIPOFFSETS
EXPR	3141:9	3141:16	9	tag == TIFFTAG_TILEOFFSETS
FIELD	3141:9	3141:9	10	tag
LEAF_NODE	3141:9	3141:9	11	tag
EQ_OPERATOR	3141:13	3141:13	10	==
LEAF_NODE	3141:13	3141:13	11	==
FIELD	3141:16	3141:16	10	TIFFTAG_TILEOFFSETS
LEAF_NODE	3141:16	3141:16	11	TIFFTAG_TILEOFFSETS
LEAF_NODE	3141:36	3141:36	9	||
EXPR	3141:39	3141:46	9	tag == TIFFTAG_STRIPOFFSETS
FIELD	3141:39	3141:39	10	tag
LEAF_NODE	3141:39	3141:39	11	tag
EQ_OPERATOR	3141:43	3141:43	10	==
LEAF_NODE	3141:43	3141:43	11	==
FIELD	3141:46	3141:46	10	TIFFTAG_STRIPOFFSETS
LEAF_NODE	3141:46	3141:46	11	TIFFTAG_STRIPOFFSETS
LEAF_NODE	3141:66	3141:66	8	)
LEAF_NODE	3141:68	3141:68	7	&&
EXPR	3142:8	3142:8	7	tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0
AND	3142:8	3143:8	8	tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0
EXPR	3142:8	3142:56	9	tif -> tif_dir . td_stripoffset_entry . tdir_count == 0
FIELD	3142:8	3142:42	10	tif -> tif_dir . td_stripoffset_entry . tdir_count
LEAF_NODE	3142:8	3142:8	11	tif
LEAF_NODE	3142:11	3142:11	11	->
LEAF_NODE	3142:13	3142:13	11	tif_dir
LEAF_NODE	3142:20	3142:20	11	.
LEAF_NODE	3142:21	3142:21	11	td_stripoffset_entry
LEAF_NODE	3142:41	3142:41	11	.
LEAF_NODE	3142:42	3142:42	11	tdir_count
EQ_OPERATOR	3142:53	3142:53	10	==
LEAF_NODE	3142:53	3142:53	11	==
FIELD	3142:56	3142:56	10	0
LEAF_NODE	3142:56	3142:56	11	0
LEAF_NODE	3142:58	3142:58	9	&&
EXPR	3143:8	3143:8	9	tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0
AND	3143:8	3144:8	10	tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0
EXPR	3143:8	3143:55	11	tif -> tif_dir . td_stripoffset_entry . tdir_type == 0
FIELD	3143:8	3143:42	12	tif -> tif_dir . td_stripoffset_entry . tdir_type
LEAF_NODE	3143:8	3143:8	13	tif
LEAF_NODE	3143:11	3143:11	13	->
LEAF_NODE	3143:13	3143:13	13	tif_dir
LEAF_NODE	3143:20	3143:20	13	.
LEAF_NODE	3143:21	3143:21	13	td_stripoffset_entry
LEAF_NODE	3143:41	3143:41	13	.
LEAF_NODE	3143:42	3143:42	13	tdir_type
EQ_OPERATOR	3143:52	3143:52	12	==
LEAF_NODE	3143:52	3143:52	13	==
FIELD	3143:55	3143:55	12	0
LEAF_NODE	3143:55	3143:55	13	0
LEAF_NODE	3143:57	3143:57	11	&&
EXPR	3144:8	3144:68	11	tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0
FIELD	3144:8	3144:54	12	tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8
LEAF_NODE	3144:8	3144:8	13	tif
LEAF_NODE	3144:11	3144:11	13	->
LEAF_NODE	3144:13	3144:13	13	tif_dir
LEAF_NODE	3144:20	3144:20	13	.
LEAF_NODE	3144:21	3144:21	13	td_stripoffset_entry
LEAF_NODE	3144:41	3144:41	13	.
LEAF_NODE	3144:42	3144:42	13	tdir_offset
LEAF_NODE	3144:53	3144:53	13	.
LEAF_NODE	3144:54	3144:54	13	toff_long8
EQ_OPERATOR	3144:65	3144:65	12	==
LEAF_NODE	3144:65	3144:65	13	==
FIELD	3144:68	3144:68	12	0
LEAF_NODE	3144:68	3144:68	13	0
LEAF_NODE	3144:70	3144:70	4	)
STATEMENTS	3145:4	3148:4	4	
LEAF_NODE	3145:4	3145:4	5	{
STATEMENTS	3146:8	3147:8	5	
EXPR_STATEMENT	3146:8	3146:62	6	tif -> tif_dir . td_stripoffset_entry . tdir_type = datatype ;
EXPR	3146:8	3146:8	7	tif -> tif_dir . td_stripoffset_entry . tdir_type = datatype
ASSIGN	3146:8	3146:54	8	tif -> tif_dir . td_stripoffset_entry . tdir_type = datatype
LVAL	3146:8	3146:8	9	tif -> tif_dir . td_stripoffset_entry . tdir_type
FIELD	3146:8	3146:42	10	tif -> tif_dir . td_stripoffset_entry . tdir_type
LEAF_NODE	3146:8	3146:8	11	tif
LEAF_NODE	3146:11	3146:11	11	->
LEAF_NODE	3146:13	3146:13	11	tif_dir
LEAF_NODE	3146:20	3146:20	11	.
LEAF_NODE	3146:21	3146:21	11	td_stripoffset_entry
LEAF_NODE	3146:41	3146:41	11	.
LEAF_NODE	3146:42	3146:42	11	tdir_type
ASSIGN_OP	3146:52	3146:52	9	=
LEAF_NODE	3146:52	3146:52	10	=
RVAL	3146:54	3146:54	9	datatype
FIELD	3146:54	3146:54	10	datatype
LEAF_NODE	3146:54	3146:54	11	datatype
LEAF_NODE	3146:62	3146:62	7	;
EXPR_STATEMENT	3147:8	3147:60	6	tif -> tif_dir . td_stripoffset_entry . tdir_count = count ;
EXPR	3147:8	3147:8	7	tif -> tif_dir . td_stripoffset_entry . tdir_count = count
ASSIGN	3147:8	3147:55	8	tif -> tif_dir . td_stripoffset_entry . tdir_count = count
LVAL	3147:8	3147:8	9	tif -> tif_dir . td_stripoffset_entry . tdir_count
FIELD	3147:8	3147:42	10	tif -> tif_dir . td_stripoffset_entry . tdir_count
LEAF_NODE	3147:8	3147:8	11	tif
LEAF_NODE	3147:11	3147:11	11	->
LEAF_NODE	3147:13	3147:13	11	tif_dir
LEAF_NODE	3147:20	3147:20	11	.
LEAF_NODE	3147:21	3147:21	11	td_stripoffset_entry
LEAF_NODE	3147:41	3147:41	11	.
LEAF_NODE	3147:42	3147:42	11	tdir_count
ASSIGN_OP	3147:53	3147:53	9	=
LEAF_NODE	3147:53	3147:53	10	=
RVAL	3147:55	3147:55	9	count
FIELD	3147:55	3147:55	10	count
LEAF_NODE	3147:55	3147:55	11	count
LEAF_NODE	3147:60	3147:60	7	;
LEAF_NODE	3148:4	3148:4	5	}
SELECTION	3149:4	3149:9	3	
KEYWORD	3149:4	3149:4	4	else
LEAF_NODE	3149:4	3149:4	5	else
STATEMENTS	3149:9	3149:9	4	
SELECTION	3149:9	3153:4	5	
KEYWORD	3149:9	3149:9	6	if
LEAF_NODE	3149:9	3149:9	7	if
LEAF_NODE	3149:11	3149:11	6	(
CONDITION	3149:13	3149:13	6	( tag == TIFFTAG_TILEBYTECOUNTS || tag == TIFFTAG_STRIPBYTECOUNTS ) && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	3149:13	3149:13	7	( tag == TIFFTAG_TILEBYTECOUNTS || tag == TIFFTAG_STRIPBYTECOUNTS ) && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	3149:13	3150:8	8	( tag == TIFFTAG_TILEBYTECOUNTS || tag == TIFFTAG_STRIPBYTECOUNTS ) && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	3149:13	3149:77	9	( tag == TIFFTAG_TILEBYTECOUNTS || tag == TIFFTAG_STRIPBYTECOUNTS )
LEAF_NODE	3149:13	3149:13	10	(
OR	3149:14	3149:47	10	tag == TIFFTAG_TILEBYTECOUNTS || tag == TIFFTAG_STRIPBYTECOUNTS
EXPR	3149:14	3149:21	11	tag == TIFFTAG_TILEBYTECOUNTS
FIELD	3149:14	3149:14	12	tag
LEAF_NODE	3149:14	3149:14	13	tag
EQ_OPERATOR	3149:18	3149:18	12	==
LEAF_NODE	3149:18	3149:18	13	==
FIELD	3149:21	3149:21	12	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	3149:21	3149:21	13	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	3149:44	3149:44	11	||
EXPR	3149:47	3149:54	11	tag == TIFFTAG_STRIPBYTECOUNTS
FIELD	3149:47	3149:47	12	tag
LEAF_NODE	3149:47	3149:47	13	tag
EQ_OPERATOR	3149:51	3149:51	12	==
LEAF_NODE	3149:51	3149:51	13	==
FIELD	3149:54	3149:54	12	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	3149:54	3149:54	13	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	3149:77	3149:77	10	)
LEAF_NODE	3149:79	3149:79	9	&&
EXPR	3150:8	3150:8	9	tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	3150:8	3151:8	10	tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	3150:8	3150:59	11	tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0
FIELD	3150:8	3150:45	12	tif -> tif_dir . td_stripbytecount_entry . tdir_count
LEAF_NODE	3150:8	3150:8	13	tif
LEAF_NODE	3150:11	3150:11	13	->
LEAF_NODE	3150:13	3150:13	13	tif_dir
LEAF_NODE	3150:20	3150:20	13	.
LEAF_NODE	3150:21	3150:21	13	td_stripbytecount_entry
LEAF_NODE	3150:44	3150:44	13	.
LEAF_NODE	3150:45	3150:45	13	tdir_count
EQ_OPERATOR	3150:56	3150:56	12	==
LEAF_NODE	3150:56	3150:56	13	==
FIELD	3150:59	3150:59	12	0
LEAF_NODE	3150:59	3150:59	13	0
LEAF_NODE	3150:61	3150:61	11	&&
EXPR	3151:8	3151:8	11	tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	3151:8	3152:8	12	tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	3151:8	3151:58	13	tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0
FIELD	3151:8	3151:45	14	tif -> tif_dir . td_stripbytecount_entry . tdir_type
LEAF_NODE	3151:8	3151:8	15	tif
LEAF_NODE	3151:11	3151:11	15	->
LEAF_NODE	3151:13	3151:13	15	tif_dir
LEAF_NODE	3151:20	3151:20	15	.
LEAF_NODE	3151:21	3151:21	15	td_stripbytecount_entry
LEAF_NODE	3151:44	3151:44	15	.
LEAF_NODE	3151:45	3151:45	15	tdir_type
EQ_OPERATOR	3151:55	3151:55	14	==
LEAF_NODE	3151:55	3151:55	15	==
FIELD	3151:58	3151:58	14	0
LEAF_NODE	3151:58	3151:58	15	0
LEAF_NODE	3151:60	3151:60	13	&&
EXPR	3152:8	3152:71	13	tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
FIELD	3152:8	3152:57	14	tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8
LEAF_NODE	3152:8	3152:8	15	tif
LEAF_NODE	3152:11	3152:11	15	->
LEAF_NODE	3152:13	3152:13	15	tif_dir
LEAF_NODE	3152:20	3152:20	15	.
LEAF_NODE	3152:21	3152:21	15	td_stripbytecount_entry
LEAF_NODE	3152:44	3152:44	15	.
LEAF_NODE	3152:45	3152:45	15	tdir_offset
LEAF_NODE	3152:56	3152:56	15	.
LEAF_NODE	3152:57	3152:57	15	toff_long8
EQ_OPERATOR	3152:68	3152:68	14	==
LEAF_NODE	3152:68	3152:68	15	==
FIELD	3152:71	3152:71	14	0
LEAF_NODE	3152:71	3152:71	15	0
LEAF_NODE	3152:73	3152:73	6	)
STATEMENTS	3153:4	3156:4	6	
LEAF_NODE	3153:4	3153:4	7	{
STATEMENTS	3154:8	3155:8	7	
EXPR_STATEMENT	3154:8	3154:65	8	tif -> tif_dir . td_stripbytecount_entry . tdir_type = datatype ;
EXPR	3154:8	3154:8	9	tif -> tif_dir . td_stripbytecount_entry . tdir_type = datatype
ASSIGN	3154:8	3154:57	10	tif -> tif_dir . td_stripbytecount_entry . tdir_type = datatype
LVAL	3154:8	3154:8	11	tif -> tif_dir . td_stripbytecount_entry . tdir_type
FIELD	3154:8	3154:45	12	tif -> tif_dir . td_stripbytecount_entry . tdir_type
LEAF_NODE	3154:8	3154:8	13	tif
LEAF_NODE	3154:11	3154:11	13	->
LEAF_NODE	3154:13	3154:13	13	tif_dir
LEAF_NODE	3154:20	3154:20	13	.
LEAF_NODE	3154:21	3154:21	13	td_stripbytecount_entry
LEAF_NODE	3154:44	3154:44	13	.
LEAF_NODE	3154:45	3154:45	13	tdir_type
ASSIGN_OP	3154:55	3154:55	11	=
LEAF_NODE	3154:55	3154:55	12	=
RVAL	3154:57	3154:57	11	datatype
FIELD	3154:57	3154:57	12	datatype
LEAF_NODE	3154:57	3154:57	13	datatype
LEAF_NODE	3154:65	3154:65	9	;
EXPR_STATEMENT	3155:8	3155:63	8	tif -> tif_dir . td_stripbytecount_entry . tdir_count = count ;
EXPR	3155:8	3155:8	9	tif -> tif_dir . td_stripbytecount_entry . tdir_count = count
ASSIGN	3155:8	3155:58	10	tif -> tif_dir . td_stripbytecount_entry . tdir_count = count
LVAL	3155:8	3155:8	11	tif -> tif_dir . td_stripbytecount_entry . tdir_count
FIELD	3155:8	3155:45	12	tif -> tif_dir . td_stripbytecount_entry . tdir_count
LEAF_NODE	3155:8	3155:8	13	tif
LEAF_NODE	3155:11	3155:11	13	->
LEAF_NODE	3155:13	3155:13	13	tif_dir
LEAF_NODE	3155:20	3155:20	13	.
LEAF_NODE	3155:21	3155:21	13	td_stripbytecount_entry
LEAF_NODE	3155:44	3155:44	13	.
LEAF_NODE	3155:45	3155:45	13	tdir_count
ASSIGN_OP	3155:56	3155:56	11	=
LEAF_NODE	3155:56	3155:56	12	=
RVAL	3155:58	3155:58	11	count
FIELD	3155:58	3155:58	12	count
LEAF_NODE	3155:58	3155:58	13	count
LEAF_NODE	3155:63	3155:63	9	;
LEAF_NODE	3156:4	3156:4	7	}
SELECTION	3163:4	3164:4	3	
KEYWORD	3163:4	3163:4	4	if
LEAF_NODE	3163:4	3163:4	5	if
LEAF_NODE	3163:6	3163:6	4	(
CONDITION	3163:8	3163:8	4	entry_count == ( uint64 ) count && entry_type == ( uint16 ) datatype
EXPR	3163:8	3163:8	5	entry_count == ( uint64 ) count && entry_type == ( uint16 ) datatype
AND	3163:8	3163:40	6	entry_count == ( uint64 ) count && entry_type == ( uint16 ) datatype
EXPR	3163:8	3163:31	7	entry_count == ( uint64 ) count
FIELD	3163:8	3163:8	8	entry_count
LEAF_NODE	3163:8	3163:8	9	entry_count
EQ_OPERATOR	3163:20	3163:20	8	==
LEAF_NODE	3163:20	3163:20	9	==
LEAF_NODE	3163:23	3163:23	8	(
TYPE_NAME	3163:24	3163:24	8	uint64
LEAF_NODE	3163:24	3163:24	9	uint64
LEAF_NODE	3163:30	3163:30	8	)
FIELD	3163:31	3163:31	8	count
LEAF_NODE	3163:31	3163:31	9	count
LEAF_NODE	3163:37	3163:37	7	&&
EXPR	3163:40	3163:63	7	entry_type == ( uint16 ) datatype
FIELD	3163:40	3163:40	8	entry_type
LEAF_NODE	3163:40	3163:40	9	entry_type
EQ_OPERATOR	3163:51	3163:51	8	==
LEAF_NODE	3163:51	3163:51	9	==
LEAF_NODE	3163:54	3163:54	8	(
TYPE_NAME	3163:55	3163:55	8	uint16
LEAF_NODE	3163:55	3163:55	9	uint16
LEAF_NODE	3163:61	3163:61	8	)
FIELD	3163:63	3163:63	8	datatype
LEAF_NODE	3163:63	3163:63	9	datatype
LEAF_NODE	3163:72	3163:72	4	)
STATEMENTS	3164:4	3181:4	4	
LEAF_NODE	3164:4	3164:4	5	{
STATEMENTS	3165:8	3180:8	5	
SELECTION	3165:8	3165:40	6	
KEYWORD	3165:8	3165:8	7	if
LEAF_NODE	3165:8	3165:8	8	if
LEAF_NODE	3165:11	3165:11	7	(
CONDITION	3165:12	3165:12	7	! SeekOK ( tif , entry_offset )
EXPR	3165:12	3165:12	8	! SeekOK ( tif , entry_offset )
UNARY_EXPR	3165:12	3165:13	9	! SeekOK ( tif , entry_offset )
UNARY_OPERATOR	3165:12	3165:12	10	!
LEAF_NODE	3165:12	3165:12	11	!
FUNCTION_CALL	3165:13	3165:37	10	SeekOK ( tif , entry_offset )
CALLEE	3165:13	3165:13	11	SeekOK
LEAF_NODE	3165:13	3165:13	12	SeekOK
LEAF_NODE	3165:19	3165:19	11	(
ARGUMENT	3165:20	3165:20	11	tif
FIELD	3165:20	3165:20	12	tif
LEAF_NODE	3165:20	3165:20	13	tif
LEAF_NODE	3165:23	3165:23	11	,
ARGUMENT	3165:25	3165:25	11	entry_offset
FIELD	3165:25	3165:25	12	entry_offset
LEAF_NODE	3165:25	3165:25	13	entry_offset
LEAF_NODE	3165:37	3165:37	11	)
LEAF_NODE	3165:38	3165:38	7	)
STATEMENTS	3165:40	3171:8	7	
LEAF_NODE	3165:40	3165:40	8	{
STATEMENTS	3166:12	3170:12	8	
EXPR_STATEMENT	3166:12	3166:37	9	_TIFFfree ( buf_to_write ) ;
EXPR	3166:12	3166:12	10	_TIFFfree ( buf_to_write )
FUNCTION_CALL	3166:12	3166:36	11	_TIFFfree ( buf_to_write )
CALLEE	3166:12	3166:12	12	_TIFFfree
LEAF_NODE	3166:12	3166:12	13	_TIFFfree
LEAF_NODE	3166:21	3166:21	12	(
ARGUMENT	3166:23	3166:23	12	buf_to_write
FIELD	3166:23	3166:23	13	buf_to_write
LEAF_NODE	3166:23	3166:23	14	buf_to_write
LEAF_NODE	3166:36	3166:36	12	)
LEAF_NODE	3166:37	3166:37	10	;
EXPR_STATEMENT	3167:12	3169:39	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name ) ;
EXPR	3167:12	3167:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name )
FUNCTION_CALL	3167:12	3169:38	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name )
CALLEE	3167:12	3167:12	12	TIFFErrorExt
LEAF_NODE	3167:12	3167:12	13	TIFFErrorExt
LEAF_NODE	3167:24	3167:24	12	(
ARGUMENT	3167:25	3167:25	12	tif -> tif_clientdata
FIELD	3167:25	3167:30	13	tif -> tif_clientdata
LEAF_NODE	3167:25	3167:25	14	tif
LEAF_NODE	3167:28	3167:28	14	->
LEAF_NODE	3167:30	3167:30	14	tif_clientdata
LEAF_NODE	3167:44	3167:44	12	,
ARGUMENT	3167:46	3167:46	12	module
FIELD	3167:46	3167:46	13	module
LEAF_NODE	3167:46	3167:46	14	module
LEAF_NODE	3167:52	3167:52	12	,
ARGUMENT	3168:25	3168:25	12	"%s: Seek error accessing TIFF directory"
FIELD	3168:25	3168:25	13	"%s: Seek error accessing TIFF directory"
LEAF_NODE	3168:25	3168:25	14	"%s: Seek error accessing TIFF directory"
LEAF_NODE	3168:66	3168:66	12	,
ARGUMENT	3169:25	3169:25	12	tif -> tif_name
FIELD	3169:25	3169:30	13	tif -> tif_name
LEAF_NODE	3169:25	3169:25	14	tif
LEAF_NODE	3169:28	3169:28	14	->
LEAF_NODE	3169:30	3169:30	14	tif_name
LEAF_NODE	3169:38	3169:38	12	)
LEAF_NODE	3169:39	3169:39	10	;
JUMP_STATEMENT	3170:12	3170:20	9	return 0 ;
KEYWORD	3170:12	3170:12	10	return
LEAF_NODE	3170:12	3170:12	11	return
DESTINATION	3170:19	3170:19	10	0
EXPR	3170:19	3170:19	11	0
FIELD	3170:19	3170:19	12	0
LEAF_NODE	3170:19	3170:19	13	0
LEAF_NODE	3170:20	3170:20	10	;
LEAF_NODE	3171:8	3171:8	8	}
SELECTION	3172:8	3172:72	6	
KEYWORD	3172:8	3172:8	7	if
LEAF_NODE	3172:8	3172:8	8	if
LEAF_NODE	3172:11	3172:11	7	(
CONDITION	3172:12	3172:12	7	! WriteOK ( tif , buf_to_write , count * TIFFDataWidth ( datatype ) )
EXPR	3172:12	3172:12	8	! WriteOK ( tif , buf_to_write , count * TIFFDataWidth ( datatype ) )
UNARY_EXPR	3172:12	3172:13	9	! WriteOK ( tif , buf_to_write , count * TIFFDataWidth ( datatype ) )
UNARY_OPERATOR	3172:12	3172:12	10	!
LEAF_NODE	3172:12	3172:12	11	!
FUNCTION_CALL	3172:13	3172:69	10	WriteOK ( tif , buf_to_write , count * TIFFDataWidth ( datatype ) )
CALLEE	3172:13	3172:13	11	WriteOK
LEAF_NODE	3172:13	3172:13	12	WriteOK
LEAF_NODE	3172:20	3172:20	11	(
ARGUMENT	3172:21	3172:21	11	tif
FIELD	3172:21	3172:21	12	tif
LEAF_NODE	3172:21	3172:21	13	tif
LEAF_NODE	3172:24	3172:24	11	,
ARGUMENT	3172:26	3172:26	11	buf_to_write
FIELD	3172:26	3172:26	12	buf_to_write
LEAF_NODE	3172:26	3172:26	13	buf_to_write
LEAF_NODE	3172:38	3172:38	11	,
ARGUMENT	3172:40	3172:46	11	count * TIFFDataWidth ( datatype )
FIELD	3172:40	3172:40	12	count
LEAF_NODE	3172:40	3172:40	13	count
LEAF_NODE	3172:45	3172:45	12	*
FUNCTION_CALL	3172:46	3172:68	12	TIFFDataWidth ( datatype )
CALLEE	3172:46	3172:46	13	TIFFDataWidth
LEAF_NODE	3172:46	3172:46	14	TIFFDataWidth
LEAF_NODE	3172:59	3172:59	13	(
ARGUMENT	3172:60	3172:60	13	datatype
FIELD	3172:60	3172:60	14	datatype
LEAF_NODE	3172:60	3172:60	15	datatype
LEAF_NODE	3172:68	3172:68	13	)
LEAF_NODE	3172:69	3172:69	11	)
LEAF_NODE	3172:70	3172:70	7	)
STATEMENTS	3172:72	3177:8	7	
LEAF_NODE	3172:72	3172:72	8	{
STATEMENTS	3173:12	3176:12	8	
EXPR_STATEMENT	3173:12	3173:37	9	_TIFFfree ( buf_to_write ) ;
EXPR	3173:12	3173:12	10	_TIFFfree ( buf_to_write )
FUNCTION_CALL	3173:12	3173:36	11	_TIFFfree ( buf_to_write )
CALLEE	3173:12	3173:12	12	_TIFFfree
LEAF_NODE	3173:12	3173:12	13	_TIFFfree
LEAF_NODE	3173:21	3173:21	12	(
ARGUMENT	3173:23	3173:23	12	buf_to_write
FIELD	3173:23	3173:23	13	buf_to_write
LEAF_NODE	3173:23	3173:23	14	buf_to_write
LEAF_NODE	3173:36	3173:36	12	)
LEAF_NODE	3173:37	3173:37	10	;
EXPR_STATEMENT	3174:12	3175:56	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" ) ;
EXPR	3174:12	3174:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
FUNCTION_CALL	3174:12	3175:55	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
CALLEE	3174:12	3174:12	12	TIFFErrorExt
LEAF_NODE	3174:12	3174:12	13	TIFFErrorExt
LEAF_NODE	3174:24	3174:24	12	(
ARGUMENT	3174:25	3174:25	12	tif -> tif_clientdata
FIELD	3174:25	3174:30	13	tif -> tif_clientdata
LEAF_NODE	3174:25	3174:25	14	tif
LEAF_NODE	3174:28	3174:28	14	->
LEAF_NODE	3174:30	3174:30	14	tif_clientdata
LEAF_NODE	3174:44	3174:44	12	,
ARGUMENT	3174:46	3174:46	12	module
FIELD	3174:46	3174:46	13	module
LEAF_NODE	3174:46	3174:46	14	module
LEAF_NODE	3174:52	3174:52	12	,
ARGUMENT	3175:25	3175:25	12	"Error writing directory link"
FIELD	3175:25	3175:25	13	"Error writing directory link"
LEAF_NODE	3175:25	3175:25	14	"Error writing directory link"
LEAF_NODE	3175:55	3175:55	12	)
LEAF_NODE	3175:56	3175:56	10	;
JUMP_STATEMENT	3176:12	3176:22	9	return ( 0 ) ;
KEYWORD	3176:12	3176:12	10	return
LEAF_NODE	3176:12	3176:12	11	return
DESTINATION	3176:19	3176:19	10	( 0 )
EXPR	3176:19	3176:21	11	( 0 )
LEAF_NODE	3176:19	3176:19	12	(
FIELD	3176:20	3176:20	12	0
LEAF_NODE	3176:20	3176:20	13	0
LEAF_NODE	3176:21	3176:21	12	)
LEAF_NODE	3176:22	3176:22	10	;
LEAF_NODE	3177:8	3177:8	8	}
EXPR_STATEMENT	3179:8	3179:33	6	_TIFFfree ( buf_to_write ) ;
EXPR	3179:8	3179:8	7	_TIFFfree ( buf_to_write )
FUNCTION_CALL	3179:8	3179:32	8	_TIFFfree ( buf_to_write )
CALLEE	3179:8	3179:8	9	_TIFFfree
LEAF_NODE	3179:8	3179:8	10	_TIFFfree
LEAF_NODE	3179:17	3179:17	9	(
ARGUMENT	3179:19	3179:19	9	buf_to_write
FIELD	3179:19	3179:19	10	buf_to_write
LEAF_NODE	3179:19	3179:19	11	buf_to_write
LEAF_NODE	3179:32	3179:32	9	)
LEAF_NODE	3179:33	3179:33	7	;
JUMP_STATEMENT	3180:8	3180:16	6	return 1 ;
KEYWORD	3180:8	3180:8	7	return
LEAF_NODE	3180:8	3180:8	8	return
DESTINATION	3180:15	3180:15	7	1
EXPR	3180:15	3180:15	8	1
FIELD	3180:15	3180:15	9	1
LEAF_NODE	3180:15	3180:15	10	1
LEAF_NODE	3180:16	3180:16	7	;
LEAF_NODE	3181:4	3181:4	5	}
SELECTION	3186:4	3187:4	3	
KEYWORD	3186:4	3186:4	4	if
LEAF_NODE	3186:4	3186:4	5	if
LEAF_NODE	3186:6	3186:6	4	(
CONDITION	3186:8	3186:8	4	! value_in_entry
EXPR	3186:8	3186:8	5	! value_in_entry
UNARY_EXPR	3186:8	3186:9	6	! value_in_entry
UNARY_OPERATOR	3186:8	3186:8	7	!
LEAF_NODE	3186:8	3186:8	8	!
FIELD	3186:9	3186:9	7	value_in_entry
LEAF_NODE	3186:9	3186:9	8	value_in_entry
LEAF_NODE	3186:24	3186:24	4	)
STATEMENTS	3187:4	3196:4	4	
LEAF_NODE	3187:4	3187:4	5	{
STATEMENTS	3188:8	3190:8	5	
EXPR_STATEMENT	3188:8	3188:51	6	entry_offset = TIFFSeekFile ( tif , 0 , SEEK_END ) ;
EXPR	3188:8	3188:8	7	entry_offset = TIFFSeekFile ( tif , 0 , SEEK_END )
ASSIGN	3188:8	3188:23	8	entry_offset = TIFFSeekFile ( tif , 0 , SEEK_END )
LVAL	3188:8	3188:8	9	entry_offset
FIELD	3188:8	3188:8	10	entry_offset
LEAF_NODE	3188:8	3188:8	11	entry_offset
ASSIGN_OP	3188:21	3188:21	9	=
LEAF_NODE	3188:21	3188:21	10	=
RVAL	3188:23	3188:23	9	TIFFSeekFile ( tif , 0 , SEEK_END )
FUNCTION_CALL	3188:23	3188:50	10	TIFFSeekFile ( tif , 0 , SEEK_END )
CALLEE	3188:23	3188:23	11	TIFFSeekFile
LEAF_NODE	3188:23	3188:23	12	TIFFSeekFile
LEAF_NODE	3188:35	3188:35	11	(
ARGUMENT	3188:36	3188:36	11	tif
FIELD	3188:36	3188:36	12	tif
LEAF_NODE	3188:36	3188:36	13	tif
LEAF_NODE	3188:39	3188:39	11	,
ARGUMENT	3188:40	3188:40	11	0
FIELD	3188:40	3188:40	12	0
LEAF_NODE	3188:40	3188:40	13	0
LEAF_NODE	3188:41	3188:41	11	,
ARGUMENT	3188:42	3188:42	11	SEEK_END
FIELD	3188:42	3188:42	12	SEEK_END
LEAF_NODE	3188:42	3188:42	13	SEEK_END
LEAF_NODE	3188:50	3188:50	11	)
LEAF_NODE	3188:51	3188:51	7	;
SELECTION	3190:8	3190:72	6	
KEYWORD	3190:8	3190:8	7	if
LEAF_NODE	3190:8	3190:8	8	if
LEAF_NODE	3190:11	3190:11	7	(
CONDITION	3190:12	3190:12	7	! WriteOK ( tif , buf_to_write , count * TIFFDataWidth ( datatype ) )
EXPR	3190:12	3190:12	8	! WriteOK ( tif , buf_to_write , count * TIFFDataWidth ( datatype ) )
UNARY_EXPR	3190:12	3190:13	9	! WriteOK ( tif , buf_to_write , count * TIFFDataWidth ( datatype ) )
UNARY_OPERATOR	3190:12	3190:12	10	!
LEAF_NODE	3190:12	3190:12	11	!
FUNCTION_CALL	3190:13	3190:69	10	WriteOK ( tif , buf_to_write , count * TIFFDataWidth ( datatype ) )
CALLEE	3190:13	3190:13	11	WriteOK
LEAF_NODE	3190:13	3190:13	12	WriteOK
LEAF_NODE	3190:20	3190:20	11	(
ARGUMENT	3190:21	3190:21	11	tif
FIELD	3190:21	3190:21	12	tif
LEAF_NODE	3190:21	3190:21	13	tif
LEAF_NODE	3190:24	3190:24	11	,
ARGUMENT	3190:26	3190:26	11	buf_to_write
FIELD	3190:26	3190:26	12	buf_to_write
LEAF_NODE	3190:26	3190:26	13	buf_to_write
LEAF_NODE	3190:38	3190:38	11	,
ARGUMENT	3190:40	3190:46	11	count * TIFFDataWidth ( datatype )
FIELD	3190:40	3190:40	12	count
LEAF_NODE	3190:40	3190:40	13	count
LEAF_NODE	3190:45	3190:45	12	*
FUNCTION_CALL	3190:46	3190:68	12	TIFFDataWidth ( datatype )
CALLEE	3190:46	3190:46	13	TIFFDataWidth
LEAF_NODE	3190:46	3190:46	14	TIFFDataWidth
LEAF_NODE	3190:59	3190:59	13	(
ARGUMENT	3190:60	3190:60	13	datatype
FIELD	3190:60	3190:60	14	datatype
LEAF_NODE	3190:60	3190:60	15	datatype
LEAF_NODE	3190:68	3190:68	13	)
LEAF_NODE	3190:69	3190:69	11	)
LEAF_NODE	3190:70	3190:70	7	)
STATEMENTS	3190:72	3195:8	7	
LEAF_NODE	3190:72	3190:72	8	{
STATEMENTS	3191:12	3194:12	8	
EXPR_STATEMENT	3191:12	3191:37	9	_TIFFfree ( buf_to_write ) ;
EXPR	3191:12	3191:12	10	_TIFFfree ( buf_to_write )
FUNCTION_CALL	3191:12	3191:36	11	_TIFFfree ( buf_to_write )
CALLEE	3191:12	3191:12	12	_TIFFfree
LEAF_NODE	3191:12	3191:12	13	_TIFFfree
LEAF_NODE	3191:21	3191:21	12	(
ARGUMENT	3191:23	3191:23	12	buf_to_write
FIELD	3191:23	3191:23	13	buf_to_write
LEAF_NODE	3191:23	3191:23	14	buf_to_write
LEAF_NODE	3191:36	3191:36	12	)
LEAF_NODE	3191:37	3191:37	10	;
EXPR_STATEMENT	3192:12	3193:56	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" ) ;
EXPR	3192:12	3192:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
FUNCTION_CALL	3192:12	3193:55	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
CALLEE	3192:12	3192:12	12	TIFFErrorExt
LEAF_NODE	3192:12	3192:12	13	TIFFErrorExt
LEAF_NODE	3192:24	3192:24	12	(
ARGUMENT	3192:25	3192:25	12	tif -> tif_clientdata
FIELD	3192:25	3192:30	13	tif -> tif_clientdata
LEAF_NODE	3192:25	3192:25	14	tif
LEAF_NODE	3192:28	3192:28	14	->
LEAF_NODE	3192:30	3192:30	14	tif_clientdata
LEAF_NODE	3192:44	3192:44	12	,
ARGUMENT	3192:46	3192:46	12	module
FIELD	3192:46	3192:46	13	module
LEAF_NODE	3192:46	3192:46	14	module
LEAF_NODE	3192:52	3192:52	12	,
ARGUMENT	3193:25	3193:25	12	"Error writing directory link"
FIELD	3193:25	3193:25	13	"Error writing directory link"
LEAF_NODE	3193:25	3193:25	14	"Error writing directory link"
LEAF_NODE	3193:55	3193:55	12	)
LEAF_NODE	3193:56	3193:56	10	;
JUMP_STATEMENT	3194:12	3194:22	9	return ( 0 ) ;
KEYWORD	3194:12	3194:12	10	return
LEAF_NODE	3194:12	3194:12	11	return
DESTINATION	3194:19	3194:19	10	( 0 )
EXPR	3194:19	3194:21	11	( 0 )
LEAF_NODE	3194:19	3194:19	12	(
FIELD	3194:20	3194:20	12	0
LEAF_NODE	3194:20	3194:20	13	0
LEAF_NODE	3194:21	3194:21	12	)
LEAF_NODE	3194:22	3194:22	10	;
LEAF_NODE	3195:8	3195:8	8	}
LEAF_NODE	3196:4	3196:4	5	}
SELECTION	3197:4	3198:4	3	
KEYWORD	3197:4	3197:4	4	else
LEAF_NODE	3197:4	3197:4	5	else
STATEMENTS	3198:4	3200:4	4	
LEAF_NODE	3198:4	3198:4	5	{
STATEMENTS	3199:8	3199:8	5	
EXPR_STATEMENT	3199:8	3199:75	6	memcpy ( & entry_offset , buf_to_write , count * TIFFDataWidth ( datatype ) ) ;
EXPR	3199:8	3199:8	7	memcpy ( & entry_offset , buf_to_write , count * TIFFDataWidth ( datatype ) )
FUNCTION_CALL	3199:8	3199:74	8	memcpy ( & entry_offset , buf_to_write , count * TIFFDataWidth ( datatype ) )
CALLEE	3199:8	3199:8	9	memcpy
LEAF_NODE	3199:8	3199:8	10	memcpy
LEAF_NODE	3199:14	3199:14	9	(
ARGUMENT	3199:16	3199:16	9	& entry_offset
UNARY_EXPR	3199:16	3199:17	10	& entry_offset
UNARY_OPERATOR	3199:16	3199:16	11	&
LEAF_NODE	3199:16	3199:16	12	&
FIELD	3199:17	3199:17	11	entry_offset
LEAF_NODE	3199:17	3199:17	12	entry_offset
LEAF_NODE	3199:29	3199:29	9	,
ARGUMENT	3199:31	3199:31	9	buf_to_write
FIELD	3199:31	3199:31	10	buf_to_write
LEAF_NODE	3199:31	3199:31	11	buf_to_write
LEAF_NODE	3199:43	3199:43	9	,
ARGUMENT	3199:45	3199:51	9	count * TIFFDataWidth ( datatype )
FIELD	3199:45	3199:45	10	count
LEAF_NODE	3199:45	3199:45	11	count
LEAF_NODE	3199:50	3199:50	10	*
FUNCTION_CALL	3199:51	3199:73	10	TIFFDataWidth ( datatype )
CALLEE	3199:51	3199:51	11	TIFFDataWidth
LEAF_NODE	3199:51	3199:51	12	TIFFDataWidth
LEAF_NODE	3199:64	3199:64	11	(
ARGUMENT	3199:65	3199:65	11	datatype
FIELD	3199:65	3199:65	12	datatype
LEAF_NODE	3199:65	3199:65	13	datatype
LEAF_NODE	3199:73	3199:73	11	)
LEAF_NODE	3199:74	3199:74	9	)
LEAF_NODE	3199:75	3199:75	7	;
LEAF_NODE	3200:4	3200:4	5	}
EXPR_STATEMENT	3202:4	3202:29	3	_TIFFfree ( buf_to_write ) ;
EXPR	3202:4	3202:4	4	_TIFFfree ( buf_to_write )
FUNCTION_CALL	3202:4	3202:28	5	_TIFFfree ( buf_to_write )
CALLEE	3202:4	3202:4	6	_TIFFfree
LEAF_NODE	3202:4	3202:4	7	_TIFFfree
LEAF_NODE	3202:13	3202:13	6	(
ARGUMENT	3202:15	3202:15	6	buf_to_write
FIELD	3202:15	3202:15	7	buf_to_write
LEAF_NODE	3202:15	3202:15	8	buf_to_write
LEAF_NODE	3202:28	3202:28	6	)
LEAF_NODE	3202:29	3202:29	4	;
EXPR_STATEMENT	3203:4	3203:20	3	buf_to_write = 0 ;
EXPR	3203:4	3203:4	4	buf_to_write = 0
ASSIGN	3203:4	3203:19	5	buf_to_write = 0
LVAL	3203:4	3203:4	6	buf_to_write
FIELD	3203:4	3203:4	7	buf_to_write
LEAF_NODE	3203:4	3203:4	8	buf_to_write
ASSIGN_OP	3203:17	3203:17	6	=
LEAF_NODE	3203:17	3203:17	7	=
RVAL	3203:19	3203:19	6	0
FIELD	3203:19	3203:19	7	0
LEAF_NODE	3203:19	3203:19	8	0
LEAF_NODE	3203:20	3203:20	4	;
EXPR_STATEMENT	3208:4	3208:25	3	entry_type = datatype ;
EXPR	3208:4	3208:4	4	entry_type = datatype
ASSIGN	3208:4	3208:17	5	entry_type = datatype
LVAL	3208:4	3208:4	6	entry_type
FIELD	3208:4	3208:4	7	entry_type
LEAF_NODE	3208:4	3208:4	8	entry_type
ASSIGN_OP	3208:15	3208:15	6	=
LEAF_NODE	3208:15	3208:15	7	=
RVAL	3208:17	3208:17	6	datatype
FIELD	3208:17	3208:17	7	datatype
LEAF_NODE	3208:17	3208:17	8	datatype
LEAF_NODE	3208:25	3208:25	4	;
EXPR_STATEMENT	3209:4	3209:31	3	entry_count = ( uint64 ) count ;
EXPR	3209:4	3209:4	4	entry_count = ( uint64 ) count
ASSIGN	3209:4	3209:18	5	entry_count = ( uint64 ) count
LVAL	3209:4	3209:4	6	entry_count
FIELD	3209:4	3209:4	7	entry_count
LEAF_NODE	3209:4	3209:4	8	entry_count
ASSIGN_OP	3209:16	3209:16	6	=
LEAF_NODE	3209:16	3209:16	7	=
RVAL	3209:18	3209:26	6	( uint64 ) count
LEAF_NODE	3209:18	3209:18	7	(
TYPE_NAME	3209:19	3209:19	7	uint64
LEAF_NODE	3209:19	3209:19	8	uint64
LEAF_NODE	3209:25	3209:25	7	)
FIELD	3209:26	3209:26	7	count
LEAF_NODE	3209:26	3209:26	8	count
LEAF_NODE	3209:31	3209:31	4	;
EXPR_STATEMENT	3210:4	3210:59	3	memcpy ( direntry_raw + 2 , & entry_type , sizeof ( uint16 ) ) ;
EXPR	3210:4	3210:4	4	memcpy ( direntry_raw + 2 , & entry_type , sizeof ( uint16 ) )
FUNCTION_CALL	3210:4	3210:58	5	memcpy ( direntry_raw + 2 , & entry_type , sizeof ( uint16 ) )
CALLEE	3210:4	3210:4	6	memcpy
LEAF_NODE	3210:4	3210:4	7	memcpy
LEAF_NODE	3210:10	3210:10	6	(
ARGUMENT	3210:12	3210:27	6	direntry_raw + 2
FIELD	3210:12	3210:12	7	direntry_raw
LEAF_NODE	3210:12	3210:12	8	direntry_raw
LEAF_NODE	3210:25	3210:25	7	+
FIELD	3210:27	3210:27	7	2
LEAF_NODE	3210:27	3210:27	8	2
LEAF_NODE	3210:28	3210:28	6	,
ARGUMENT	3210:30	3210:30	6	& entry_type
UNARY_EXPR	3210:30	3210:31	7	& entry_type
UNARY_OPERATOR	3210:30	3210:30	8	&
LEAF_NODE	3210:30	3210:30	9	&
FIELD	3210:31	3210:31	8	entry_type
LEAF_NODE	3210:31	3210:31	9	entry_type
LEAF_NODE	3210:41	3210:41	6	,
ARGUMENT	3210:43	3210:43	6	sizeof ( uint16 )
FUNCTION_CALL	3210:43	3210:56	7	sizeof ( uint16 )
CALLEE	3210:43	3210:43	8	sizeof
LEAF_NODE	3210:43	3210:43	9	sizeof
LEAF_NODE	3210:49	3210:49	8	(
ARGUMENT	3210:50	3210:50	8	uint16
FIELD	3210:50	3210:50	9	uint16
LEAF_NODE	3210:50	3210:50	10	uint16
LEAF_NODE	3210:56	3210:56	8	)
LEAF_NODE	3210:58	3210:58	6	)
LEAF_NODE	3210:59	3210:59	4	;
SELECTION	3211:4	3212:8	3	
KEYWORD	3211:4	3211:4	4	if
LEAF_NODE	3211:4	3211:4	5	if
LEAF_NODE	3211:7	3211:7	4	(
CONDITION	3211:8	3211:8	4	tif -> tif_flags & TIFF_SWAB
EXPR	3211:8	3211:23	5	tif -> tif_flags & TIFF_SWAB
FIELD	3211:8	3211:13	6	tif -> tif_flags
LEAF_NODE	3211:8	3211:8	7	tif
LEAF_NODE	3211:11	3211:11	7	->
LEAF_NODE	3211:13	3211:13	7	tif_flags
LEAF_NODE	3211:22	3211:22	6	&
FIELD	3211:23	3211:23	6	TIFF_SWAB
LEAF_NODE	3211:23	3211:23	7	TIFF_SWAB
LEAF_NODE	3211:32	3211:32	4	)
STATEMENTS	3212:8	3212:8	4	
EXPR_STATEMENT	3212:8	3212:54	5	TIFFSwabShort ( ( uint16 * ) ( direntry_raw + 2 ) ) ;
EXPR	3212:8	3212:8	6	TIFFSwabShort ( ( uint16 * ) ( direntry_raw + 2 ) )
FUNCTION_CALL	3212:8	3212:53	7	TIFFSwabShort ( ( uint16 * ) ( direntry_raw + 2 ) )
CALLEE	3212:8	3212:8	8	TIFFSwabShort
LEAF_NODE	3212:8	3212:8	9	TIFFSwabShort
LEAF_NODE	3212:21	3212:21	8	(
ARGUMENT	3212:23	3212:51	8	( uint16 * ) ( direntry_raw + 2 )
LEAF_NODE	3212:23	3212:23	9	(
TYPE_NAME	3212:24	3212:24	9	uint16
LEAF_NODE	3212:24	3212:24	10	uint16
LEAF_NODE	3212:31	3212:31	9	*
LEAF_NODE	3212:32	3212:32	9	)
LEAF_NODE	3212:34	3212:34	9	(
FIELD	3212:35	3212:35	9	direntry_raw
LEAF_NODE	3212:35	3212:35	10	direntry_raw
LEAF_NODE	3212:48	3212:48	9	+
FIELD	3212:50	3212:50	9	2
LEAF_NODE	3212:50	3212:50	10	2
LEAF_NODE	3212:51	3212:51	9	)
LEAF_NODE	3212:53	3212:53	8	)
LEAF_NODE	3212:54	3212:54	6	;
SELECTION	3214:4	3215:4	3	
KEYWORD	3214:4	3214:4	4	if
LEAF_NODE	3214:4	3214:4	5	if
LEAF_NODE	3214:7	3214:7	4	(
CONDITION	3214:8	3214:8	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	3214:8	3214:8	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	3214:8	3214:37	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	3214:8	3214:8	7	!
LEAF_NODE	3214:8	3214:8	8	!
LEAF_NODE	3214:9	3214:9	7	(
FIELD	3214:10	3214:15	7	tif -> tif_flags
LEAF_NODE	3214:10	3214:10	8	tif
LEAF_NODE	3214:13	3214:13	8	->
LEAF_NODE	3214:15	3214:15	8	tif_flags
LEAF_NODE	3214:24	3214:24	7	&
FIELD	3214:25	3214:25	7	TIFF_BIGTIFF
LEAF_NODE	3214:25	3214:25	8	TIFF_BIGTIFF
LEAF_NODE	3214:37	3214:37	7	)
LEAF_NODE	3214:38	3214:38	4	)
STATEMENTS	3215:4	3227:4	4	
LEAF_NODE	3215:4	3215:4	5	{
STATEMENTS	3216:8	3225:8	5	
SIMPLE_DECL	3216:8	3216:20	6	uint32 value ;
VAR_DECL	3216:8	3216:15	7	uint32 value
TYPE	3216:8	3216:8	8	uint32
TYPE_NAME	3216:8	3216:8	9	uint32
LEAF_NODE	3216:8	3216:8	10	uint32
NAME	3216:15	3216:15	8	value
LEAF_NODE	3216:15	3216:15	9	value
LEAF_NODE	3216:20	3216:20	7	;
EXPR_STATEMENT	3218:8	3218:36	6	value = ( uint32 ) entry_count ;
EXPR	3218:8	3218:8	7	value = ( uint32 ) entry_count
ASSIGN	3218:8	3218:16	8	value = ( uint32 ) entry_count
LVAL	3218:8	3218:8	9	value
FIELD	3218:8	3218:8	10	value
LEAF_NODE	3218:8	3218:8	11	value
ASSIGN_OP	3218:14	3218:14	9	=
LEAF_NODE	3218:14	3218:14	10	=
RVAL	3218:16	3218:25	9	( uint32 ) entry_count
LEAF_NODE	3218:16	3218:16	10	(
TYPE_NAME	3218:17	3218:17	10	uint32
LEAF_NODE	3218:17	3218:17	11	uint32
LEAF_NODE	3218:23	3218:23	10	)
FIELD	3218:25	3218:25	10	entry_count
LEAF_NODE	3218:25	3218:25	11	entry_count
LEAF_NODE	3218:36	3218:36	7	;
EXPR_STATEMENT	3219:8	3219:58	6	memcpy ( direntry_raw + 4 , & value , sizeof ( uint32 ) ) ;
EXPR	3219:8	3219:8	7	memcpy ( direntry_raw + 4 , & value , sizeof ( uint32 ) )
FUNCTION_CALL	3219:8	3219:57	8	memcpy ( direntry_raw + 4 , & value , sizeof ( uint32 ) )
CALLEE	3219:8	3219:8	9	memcpy
LEAF_NODE	3219:8	3219:8	10	memcpy
LEAF_NODE	3219:14	3219:14	9	(
ARGUMENT	3219:16	3219:31	9	direntry_raw + 4
FIELD	3219:16	3219:16	10	direntry_raw
LEAF_NODE	3219:16	3219:16	11	direntry_raw
LEAF_NODE	3219:29	3219:29	10	+
FIELD	3219:31	3219:31	10	4
LEAF_NODE	3219:31	3219:31	11	4
LEAF_NODE	3219:32	3219:32	9	,
ARGUMENT	3219:34	3219:34	9	& value
UNARY_EXPR	3219:34	3219:35	10	& value
UNARY_OPERATOR	3219:34	3219:34	11	&
LEAF_NODE	3219:34	3219:34	12	&
FIELD	3219:35	3219:35	11	value
LEAF_NODE	3219:35	3219:35	12	value
LEAF_NODE	3219:40	3219:40	9	,
ARGUMENT	3219:42	3219:42	9	sizeof ( uint32 )
FUNCTION_CALL	3219:42	3219:55	10	sizeof ( uint32 )
CALLEE	3219:42	3219:42	11	sizeof
LEAF_NODE	3219:42	3219:42	12	sizeof
LEAF_NODE	3219:48	3219:48	11	(
ARGUMENT	3219:49	3219:49	11	uint32
FIELD	3219:49	3219:49	12	uint32
LEAF_NODE	3219:49	3219:49	13	uint32
LEAF_NODE	3219:55	3219:55	11	)
LEAF_NODE	3219:57	3219:57	9	)
LEAF_NODE	3219:58	3219:58	7	;
SELECTION	3220:8	3221:12	6	
KEYWORD	3220:8	3220:8	7	if
LEAF_NODE	3220:8	3220:8	8	if
LEAF_NODE	3220:11	3220:11	7	(
CONDITION	3220:12	3220:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	3220:12	3220:27	8	tif -> tif_flags & TIFF_SWAB
FIELD	3220:12	3220:17	9	tif -> tif_flags
LEAF_NODE	3220:12	3220:12	10	tif
LEAF_NODE	3220:15	3220:15	10	->
LEAF_NODE	3220:17	3220:17	10	tif_flags
LEAF_NODE	3220:26	3220:26	9	&
FIELD	3220:27	3220:27	9	TIFF_SWAB
LEAF_NODE	3220:27	3220:27	10	TIFF_SWAB
LEAF_NODE	3220:36	3220:36	7	)
STATEMENTS	3221:12	3221:12	7	
EXPR_STATEMENT	3221:12	3221:57	8	TIFFSwabLong ( ( uint32 * ) ( direntry_raw + 4 ) ) ;
EXPR	3221:12	3221:12	9	TIFFSwabLong ( ( uint32 * ) ( direntry_raw + 4 ) )
FUNCTION_CALL	3221:12	3221:56	10	TIFFSwabLong ( ( uint32 * ) ( direntry_raw + 4 ) )
CALLEE	3221:12	3221:12	11	TIFFSwabLong
LEAF_NODE	3221:12	3221:12	12	TIFFSwabLong
LEAF_NODE	3221:24	3221:24	11	(
ARGUMENT	3221:26	3221:54	11	( uint32 * ) ( direntry_raw + 4 )
LEAF_NODE	3221:26	3221:26	12	(
TYPE_NAME	3221:27	3221:27	12	uint32
LEAF_NODE	3221:27	3221:27	13	uint32
LEAF_NODE	3221:34	3221:34	12	*
LEAF_NODE	3221:35	3221:35	12	)
LEAF_NODE	3221:37	3221:37	12	(
FIELD	3221:38	3221:38	12	direntry_raw
LEAF_NODE	3221:38	3221:38	13	direntry_raw
LEAF_NODE	3221:51	3221:51	12	+
FIELD	3221:53	3221:53	12	4
LEAF_NODE	3221:53	3221:53	13	4
LEAF_NODE	3221:54	3221:54	12	)
LEAF_NODE	3221:56	3221:56	11	)
LEAF_NODE	3221:57	3221:57	9	;
EXPR_STATEMENT	3223:8	3223:37	6	value = ( uint32 ) entry_offset ;
EXPR	3223:8	3223:8	7	value = ( uint32 ) entry_offset
ASSIGN	3223:8	3223:16	8	value = ( uint32 ) entry_offset
LVAL	3223:8	3223:8	9	value
FIELD	3223:8	3223:8	10	value
LEAF_NODE	3223:8	3223:8	11	value
ASSIGN_OP	3223:14	3223:14	9	=
LEAF_NODE	3223:14	3223:14	10	=
RVAL	3223:16	3223:25	9	( uint32 ) entry_offset
LEAF_NODE	3223:16	3223:16	10	(
TYPE_NAME	3223:17	3223:17	10	uint32
LEAF_NODE	3223:17	3223:17	11	uint32
LEAF_NODE	3223:23	3223:23	10	)
FIELD	3223:25	3223:25	10	entry_offset
LEAF_NODE	3223:25	3223:25	11	entry_offset
LEAF_NODE	3223:37	3223:37	7	;
EXPR_STATEMENT	3224:8	3224:58	6	memcpy ( direntry_raw + 8 , & value , sizeof ( uint32 ) ) ;
EXPR	3224:8	3224:8	7	memcpy ( direntry_raw + 8 , & value , sizeof ( uint32 ) )
FUNCTION_CALL	3224:8	3224:57	8	memcpy ( direntry_raw + 8 , & value , sizeof ( uint32 ) )
CALLEE	3224:8	3224:8	9	memcpy
LEAF_NODE	3224:8	3224:8	10	memcpy
LEAF_NODE	3224:14	3224:14	9	(
ARGUMENT	3224:16	3224:31	9	direntry_raw + 8
FIELD	3224:16	3224:16	10	direntry_raw
LEAF_NODE	3224:16	3224:16	11	direntry_raw
LEAF_NODE	3224:29	3224:29	10	+
FIELD	3224:31	3224:31	10	8
LEAF_NODE	3224:31	3224:31	11	8
LEAF_NODE	3224:32	3224:32	9	,
ARGUMENT	3224:34	3224:34	9	& value
UNARY_EXPR	3224:34	3224:35	10	& value
UNARY_OPERATOR	3224:34	3224:34	11	&
LEAF_NODE	3224:34	3224:34	12	&
FIELD	3224:35	3224:35	11	value
LEAF_NODE	3224:35	3224:35	12	value
LEAF_NODE	3224:40	3224:40	9	,
ARGUMENT	3224:42	3224:42	9	sizeof ( uint32 )
FUNCTION_CALL	3224:42	3224:55	10	sizeof ( uint32 )
CALLEE	3224:42	3224:42	11	sizeof
LEAF_NODE	3224:42	3224:42	12	sizeof
LEAF_NODE	3224:48	3224:48	11	(
ARGUMENT	3224:49	3224:49	11	uint32
FIELD	3224:49	3224:49	12	uint32
LEAF_NODE	3224:49	3224:49	13	uint32
LEAF_NODE	3224:55	3224:55	11	)
LEAF_NODE	3224:57	3224:57	9	)
LEAF_NODE	3224:58	3224:58	7	;
SELECTION	3225:8	3226:12	6	
KEYWORD	3225:8	3225:8	7	if
LEAF_NODE	3225:8	3225:8	8	if
LEAF_NODE	3225:11	3225:11	7	(
CONDITION	3225:12	3225:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	3225:12	3225:27	8	tif -> tif_flags & TIFF_SWAB
FIELD	3225:12	3225:17	9	tif -> tif_flags
LEAF_NODE	3225:12	3225:12	10	tif
LEAF_NODE	3225:15	3225:15	10	->
LEAF_NODE	3225:17	3225:17	10	tif_flags
LEAF_NODE	3225:26	3225:26	9	&
FIELD	3225:27	3225:27	9	TIFF_SWAB
LEAF_NODE	3225:27	3225:27	10	TIFF_SWAB
LEAF_NODE	3225:36	3225:36	7	)
STATEMENTS	3226:12	3226:12	7	
EXPR_STATEMENT	3226:12	3226:57	8	TIFFSwabLong ( ( uint32 * ) ( direntry_raw + 8 ) ) ;
EXPR	3226:12	3226:12	9	TIFFSwabLong ( ( uint32 * ) ( direntry_raw + 8 ) )
FUNCTION_CALL	3226:12	3226:56	10	TIFFSwabLong ( ( uint32 * ) ( direntry_raw + 8 ) )
CALLEE	3226:12	3226:12	11	TIFFSwabLong
LEAF_NODE	3226:12	3226:12	12	TIFFSwabLong
LEAF_NODE	3226:24	3226:24	11	(
ARGUMENT	3226:26	3226:54	11	( uint32 * ) ( direntry_raw + 8 )
LEAF_NODE	3226:26	3226:26	12	(
TYPE_NAME	3226:27	3226:27	12	uint32
LEAF_NODE	3226:27	3226:27	13	uint32
LEAF_NODE	3226:34	3226:34	12	*
LEAF_NODE	3226:35	3226:35	12	)
LEAF_NODE	3226:37	3226:37	12	(
FIELD	3226:38	3226:38	12	direntry_raw
LEAF_NODE	3226:38	3226:38	13	direntry_raw
LEAF_NODE	3226:51	3226:51	12	+
FIELD	3226:53	3226:53	12	8
LEAF_NODE	3226:53	3226:53	13	8
LEAF_NODE	3226:54	3226:54	12	)
LEAF_NODE	3226:56	3226:56	11	)
LEAF_NODE	3226:57	3226:57	9	;
LEAF_NODE	3227:4	3227:4	5	}
SELECTION	3228:4	3229:4	3	
KEYWORD	3228:4	3228:4	4	else
LEAF_NODE	3228:4	3228:4	5	else
STATEMENTS	3229:4	3237:4	4	
LEAF_NODE	3229:4	3229:4	5	{
STATEMENTS	3230:8	3235:8	5	
EXPR_STATEMENT	3230:8	3230:64	6	memcpy ( direntry_raw + 4 , & entry_count , sizeof ( uint64 ) ) ;
EXPR	3230:8	3230:8	7	memcpy ( direntry_raw + 4 , & entry_count , sizeof ( uint64 ) )
FUNCTION_CALL	3230:8	3230:63	8	memcpy ( direntry_raw + 4 , & entry_count , sizeof ( uint64 ) )
CALLEE	3230:8	3230:8	9	memcpy
LEAF_NODE	3230:8	3230:8	10	memcpy
LEAF_NODE	3230:14	3230:14	9	(
ARGUMENT	3230:16	3230:31	9	direntry_raw + 4
FIELD	3230:16	3230:16	10	direntry_raw
LEAF_NODE	3230:16	3230:16	11	direntry_raw
LEAF_NODE	3230:29	3230:29	10	+
FIELD	3230:31	3230:31	10	4
LEAF_NODE	3230:31	3230:31	11	4
LEAF_NODE	3230:32	3230:32	9	,
ARGUMENT	3230:34	3230:34	9	& entry_count
UNARY_EXPR	3230:34	3230:35	10	& entry_count
UNARY_OPERATOR	3230:34	3230:34	11	&
LEAF_NODE	3230:34	3230:34	12	&
FIELD	3230:35	3230:35	11	entry_count
LEAF_NODE	3230:35	3230:35	12	entry_count
LEAF_NODE	3230:46	3230:46	9	,
ARGUMENT	3230:48	3230:48	9	sizeof ( uint64 )
FUNCTION_CALL	3230:48	3230:61	10	sizeof ( uint64 )
CALLEE	3230:48	3230:48	11	sizeof
LEAF_NODE	3230:48	3230:48	12	sizeof
LEAF_NODE	3230:54	3230:54	11	(
ARGUMENT	3230:55	3230:55	11	uint64
FIELD	3230:55	3230:55	12	uint64
LEAF_NODE	3230:55	3230:55	13	uint64
LEAF_NODE	3230:61	3230:61	11	)
LEAF_NODE	3230:63	3230:63	9	)
LEAF_NODE	3230:64	3230:64	7	;
SELECTION	3231:8	3232:12	6	
KEYWORD	3231:8	3231:8	7	if
LEAF_NODE	3231:8	3231:8	8	if
LEAF_NODE	3231:11	3231:11	7	(
CONDITION	3231:12	3231:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	3231:12	3231:27	8	tif -> tif_flags & TIFF_SWAB
FIELD	3231:12	3231:17	9	tif -> tif_flags
LEAF_NODE	3231:12	3231:12	10	tif
LEAF_NODE	3231:15	3231:15	10	->
LEAF_NODE	3231:17	3231:17	10	tif_flags
LEAF_NODE	3231:26	3231:26	9	&
FIELD	3231:27	3231:27	9	TIFF_SWAB
LEAF_NODE	3231:27	3231:27	10	TIFF_SWAB
LEAF_NODE	3231:36	3231:36	7	)
STATEMENTS	3232:12	3232:12	7	
EXPR_STATEMENT	3232:12	3232:58	8	TIFFSwabLong8 ( ( uint64 * ) ( direntry_raw + 4 ) ) ;
EXPR	3232:12	3232:12	9	TIFFSwabLong8 ( ( uint64 * ) ( direntry_raw + 4 ) )
FUNCTION_CALL	3232:12	3232:57	10	TIFFSwabLong8 ( ( uint64 * ) ( direntry_raw + 4 ) )
CALLEE	3232:12	3232:12	11	TIFFSwabLong8
LEAF_NODE	3232:12	3232:12	12	TIFFSwabLong8
LEAF_NODE	3232:25	3232:25	11	(
ARGUMENT	3232:27	3232:55	11	( uint64 * ) ( direntry_raw + 4 )
LEAF_NODE	3232:27	3232:27	12	(
TYPE_NAME	3232:28	3232:28	12	uint64
LEAF_NODE	3232:28	3232:28	13	uint64
LEAF_NODE	3232:35	3232:35	12	*
LEAF_NODE	3232:36	3232:36	12	)
LEAF_NODE	3232:38	3232:38	12	(
FIELD	3232:39	3232:39	12	direntry_raw
LEAF_NODE	3232:39	3232:39	13	direntry_raw
LEAF_NODE	3232:52	3232:52	12	+
FIELD	3232:54	3232:54	12	4
LEAF_NODE	3232:54	3232:54	13	4
LEAF_NODE	3232:55	3232:55	12	)
LEAF_NODE	3232:57	3232:57	11	)
LEAF_NODE	3232:58	3232:58	9	;
EXPR_STATEMENT	3234:8	3234:66	6	memcpy ( direntry_raw + 12 , & entry_offset , sizeof ( uint64 ) ) ;
EXPR	3234:8	3234:8	7	memcpy ( direntry_raw + 12 , & entry_offset , sizeof ( uint64 ) )
FUNCTION_CALL	3234:8	3234:65	8	memcpy ( direntry_raw + 12 , & entry_offset , sizeof ( uint64 ) )
CALLEE	3234:8	3234:8	9	memcpy
LEAF_NODE	3234:8	3234:8	10	memcpy
LEAF_NODE	3234:14	3234:14	9	(
ARGUMENT	3234:16	3234:31	9	direntry_raw + 12
FIELD	3234:16	3234:16	10	direntry_raw
LEAF_NODE	3234:16	3234:16	11	direntry_raw
LEAF_NODE	3234:29	3234:29	10	+
FIELD	3234:31	3234:31	10	12
LEAF_NODE	3234:31	3234:31	11	12
LEAF_NODE	3234:33	3234:33	9	,
ARGUMENT	3234:35	3234:35	9	& entry_offset
UNARY_EXPR	3234:35	3234:36	10	& entry_offset
UNARY_OPERATOR	3234:35	3234:35	11	&
LEAF_NODE	3234:35	3234:35	12	&
FIELD	3234:36	3234:36	11	entry_offset
LEAF_NODE	3234:36	3234:36	12	entry_offset
LEAF_NODE	3234:48	3234:48	9	,
ARGUMENT	3234:50	3234:50	9	sizeof ( uint64 )
FUNCTION_CALL	3234:50	3234:63	10	sizeof ( uint64 )
CALLEE	3234:50	3234:50	11	sizeof
LEAF_NODE	3234:50	3234:50	12	sizeof
LEAF_NODE	3234:56	3234:56	11	(
ARGUMENT	3234:57	3234:57	11	uint64
FIELD	3234:57	3234:57	12	uint64
LEAF_NODE	3234:57	3234:57	13	uint64
LEAF_NODE	3234:63	3234:63	11	)
LEAF_NODE	3234:65	3234:65	9	)
LEAF_NODE	3234:66	3234:66	7	;
SELECTION	3235:8	3236:12	6	
KEYWORD	3235:8	3235:8	7	if
LEAF_NODE	3235:8	3235:8	8	if
LEAF_NODE	3235:11	3235:11	7	(
CONDITION	3235:12	3235:12	7	tif -> tif_flags & TIFF_SWAB
EXPR	3235:12	3235:27	8	tif -> tif_flags & TIFF_SWAB
FIELD	3235:12	3235:17	9	tif -> tif_flags
LEAF_NODE	3235:12	3235:12	10	tif
LEAF_NODE	3235:15	3235:15	10	->
LEAF_NODE	3235:17	3235:17	10	tif_flags
LEAF_NODE	3235:26	3235:26	9	&
FIELD	3235:27	3235:27	9	TIFF_SWAB
LEAF_NODE	3235:27	3235:27	10	TIFF_SWAB
LEAF_NODE	3235:36	3235:36	7	)
STATEMENTS	3236:12	3236:12	7	
EXPR_STATEMENT	3236:12	3236:59	8	TIFFSwabLong8 ( ( uint64 * ) ( direntry_raw + 12 ) ) ;
EXPR	3236:12	3236:12	9	TIFFSwabLong8 ( ( uint64 * ) ( direntry_raw + 12 ) )
FUNCTION_CALL	3236:12	3236:58	10	TIFFSwabLong8 ( ( uint64 * ) ( direntry_raw + 12 ) )
CALLEE	3236:12	3236:12	11	TIFFSwabLong8
LEAF_NODE	3236:12	3236:12	12	TIFFSwabLong8
LEAF_NODE	3236:25	3236:25	11	(
ARGUMENT	3236:27	3236:56	11	( uint64 * ) ( direntry_raw + 12 )
LEAF_NODE	3236:27	3236:27	12	(
TYPE_NAME	3236:28	3236:28	12	uint64
LEAF_NODE	3236:28	3236:28	13	uint64
LEAF_NODE	3236:35	3236:35	12	*
LEAF_NODE	3236:36	3236:36	12	)
LEAF_NODE	3236:38	3236:38	12	(
FIELD	3236:39	3236:39	12	direntry_raw
LEAF_NODE	3236:39	3236:39	13	direntry_raw
LEAF_NODE	3236:52	3236:52	12	+
FIELD	3236:54	3236:54	12	12
LEAF_NODE	3236:54	3236:54	13	12
LEAF_NODE	3236:56	3236:56	12	)
LEAF_NODE	3236:58	3236:58	11	)
LEAF_NODE	3236:59	3236:59	9	;
LEAF_NODE	3237:4	3237:4	5	}
SELECTION	3242:4	3242:36	3	
KEYWORD	3242:4	3242:4	4	if
LEAF_NODE	3242:4	3242:4	5	if
LEAF_NODE	3242:7	3242:7	4	(
CONDITION	3242:8	3242:8	4	! SeekOK ( tif , read_offset )
EXPR	3242:8	3242:8	5	! SeekOK ( tif , read_offset )
UNARY_EXPR	3242:8	3242:9	6	! SeekOK ( tif , read_offset )
UNARY_OPERATOR	3242:8	3242:8	7	!
LEAF_NODE	3242:8	3242:8	8	!
FUNCTION_CALL	3242:9	3242:33	7	SeekOK ( tif , read_offset )
CALLEE	3242:9	3242:9	8	SeekOK
LEAF_NODE	3242:9	3242:9	9	SeekOK
LEAF_NODE	3242:15	3242:15	8	(
ARGUMENT	3242:16	3242:16	8	tif
FIELD	3242:16	3242:16	9	tif
LEAF_NODE	3242:16	3242:16	10	tif
LEAF_NODE	3242:19	3242:19	8	,
ARGUMENT	3242:21	3242:21	8	read_offset
FIELD	3242:21	3242:21	9	read_offset
LEAF_NODE	3242:21	3242:21	10	read_offset
LEAF_NODE	3242:33	3242:33	8	)
LEAF_NODE	3242:34	3242:34	4	)
STATEMENTS	3242:36	3247:4	4	
LEAF_NODE	3242:36	3242:36	5	{
STATEMENTS	3243:8	3246:8	5	
EXPR_STATEMENT	3243:8	3245:35	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name ) ;
EXPR	3243:8	3243:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name )
FUNCTION_CALL	3243:8	3245:34	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name )
CALLEE	3243:8	3243:8	9	TIFFErrorExt
LEAF_NODE	3243:8	3243:8	10	TIFFErrorExt
LEAF_NODE	3243:20	3243:20	9	(
ARGUMENT	3243:21	3243:21	9	tif -> tif_clientdata
FIELD	3243:21	3243:26	10	tif -> tif_clientdata
LEAF_NODE	3243:21	3243:21	11	tif
LEAF_NODE	3243:24	3243:24	11	->
LEAF_NODE	3243:26	3243:26	11	tif_clientdata
LEAF_NODE	3243:40	3243:40	9	,
ARGUMENT	3243:42	3243:42	9	module
FIELD	3243:42	3243:42	10	module
LEAF_NODE	3243:42	3243:42	11	module
LEAF_NODE	3243:48	3243:48	9	,
ARGUMENT	3244:21	3244:21	9	"%s: Seek error accessing TIFF directory"
FIELD	3244:21	3244:21	10	"%s: Seek error accessing TIFF directory"
LEAF_NODE	3244:21	3244:21	11	"%s: Seek error accessing TIFF directory"
LEAF_NODE	3244:62	3244:62	9	,
ARGUMENT	3245:21	3245:21	9	tif -> tif_name
FIELD	3245:21	3245:26	10	tif -> tif_name
LEAF_NODE	3245:21	3245:21	11	tif
LEAF_NODE	3245:24	3245:24	11	->
LEAF_NODE	3245:26	3245:26	11	tif_name
LEAF_NODE	3245:34	3245:34	9	)
LEAF_NODE	3245:35	3245:35	7	;
JUMP_STATEMENT	3246:8	3246:16	6	return 0 ;
KEYWORD	3246:8	3246:8	7	return
LEAF_NODE	3246:8	3246:8	8	return
DESTINATION	3246:15	3246:15	7	0
EXPR	3246:15	3246:15	8	0
FIELD	3246:15	3246:15	9	0
LEAF_NODE	3246:15	3246:15	10	0
LEAF_NODE	3246:16	3246:16	7	;
LEAF_NODE	3247:4	3247:4	5	}
SELECTION	3249:4	3250:4	3	
KEYWORD	3249:4	3249:4	4	if
LEAF_NODE	3249:4	3249:4	5	if
LEAF_NODE	3249:7	3249:7	4	(
CONDITION	3249:8	3249:8	4	! WriteOK ( tif , direntry_raw , dirsize )
EXPR	3249:8	3249:8	5	! WriteOK ( tif , direntry_raw , dirsize )
UNARY_EXPR	3249:8	3249:9	6	! WriteOK ( tif , direntry_raw , dirsize )
UNARY_OPERATOR	3249:8	3249:8	7	!
LEAF_NODE	3249:8	3249:8	8	!
FUNCTION_CALL	3249:9	3249:42	7	WriteOK ( tif , direntry_raw , dirsize )
CALLEE	3249:9	3249:9	8	WriteOK
LEAF_NODE	3249:9	3249:9	9	WriteOK
LEAF_NODE	3249:16	3249:16	8	(
ARGUMENT	3249:17	3249:17	8	tif
FIELD	3249:17	3249:17	9	tif
LEAF_NODE	3249:17	3249:17	10	tif
LEAF_NODE	3249:20	3249:20	8	,
ARGUMENT	3249:22	3249:22	8	direntry_raw
FIELD	3249:22	3249:22	9	direntry_raw
LEAF_NODE	3249:22	3249:22	10	direntry_raw
LEAF_NODE	3249:34	3249:34	8	,
ARGUMENT	3249:35	3249:35	8	dirsize
FIELD	3249:35	3249:35	9	dirsize
LEAF_NODE	3249:35	3249:35	10	dirsize
LEAF_NODE	3249:42	3249:42	8	)
LEAF_NODE	3249:43	3249:43	4	)
STATEMENTS	3250:4	3255:4	4	
LEAF_NODE	3250:4	3250:4	5	{
STATEMENTS	3251:8	3254:8	5	
EXPR_STATEMENT	3251:8	3253:35	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not write TIFF directory entry." , tif -> tif_name ) ;
EXPR	3251:8	3251:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not write TIFF directory entry." , tif -> tif_name )
FUNCTION_CALL	3251:8	3253:34	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not write TIFF directory entry." , tif -> tif_name )
CALLEE	3251:8	3251:8	9	TIFFErrorExt
LEAF_NODE	3251:8	3251:8	10	TIFFErrorExt
LEAF_NODE	3251:20	3251:20	9	(
ARGUMENT	3251:21	3251:21	9	tif -> tif_clientdata
FIELD	3251:21	3251:26	10	tif -> tif_clientdata
LEAF_NODE	3251:21	3251:21	11	tif
LEAF_NODE	3251:24	3251:24	11	->
LEAF_NODE	3251:26	3251:26	11	tif_clientdata
LEAF_NODE	3251:40	3251:40	9	,
ARGUMENT	3251:42	3251:42	9	module
FIELD	3251:42	3251:42	10	module
LEAF_NODE	3251:42	3251:42	11	module
LEAF_NODE	3251:48	3251:48	9	,
ARGUMENT	3252:21	3252:21	9	"%s: Can not write TIFF directory entry."
FIELD	3252:21	3252:21	10	"%s: Can not write TIFF directory entry."
LEAF_NODE	3252:21	3252:21	11	"%s: Can not write TIFF directory entry."
LEAF_NODE	3252:62	3252:62	9	,
ARGUMENT	3253:21	3253:21	9	tif -> tif_name
FIELD	3253:21	3253:26	10	tif -> tif_name
LEAF_NODE	3253:21	3253:21	11	tif
LEAF_NODE	3253:24	3253:24	11	->
LEAF_NODE	3253:26	3253:26	11	tif_name
LEAF_NODE	3253:34	3253:34	9	)
LEAF_NODE	3253:35	3253:35	7	;
JUMP_STATEMENT	3254:8	3254:16	6	return 0 ;
KEYWORD	3254:8	3254:8	7	return
LEAF_NODE	3254:8	3254:8	8	return
DESTINATION	3254:15	3254:15	7	0
EXPR	3254:15	3254:15	8	0
FIELD	3254:15	3254:15	9	0
LEAF_NODE	3254:15	3254:15	10	0
LEAF_NODE	3254:16	3254:16	7	;
LEAF_NODE	3255:4	3255:4	5	}
JUMP_STATEMENT	3257:4	3257:12	3	return 1 ;
KEYWORD	3257:4	3257:4	4	return
LEAF_NODE	3257:4	3257:4	5	return
DESTINATION	3257:11	3257:11	4	1
EXPR	3257:11	3257:11	5	1
FIELD	3257:11	3257:11	6	1
LEAF_NODE	3257:11	3257:11	7	1
LEAF_NODE	3257:12	3257:12	4	;
LEAF_NODE	3258:0	3258:0	2	}
