SOURCE_FILE	52:0	856:0	0	
FUNCTION_DEF	52:0	110:0	1	
RETURN_TYPE	52:0	52:7	2	static int
LEAF_NODE	52:0	52:0	3	static
TYPE_NAME	52:7	52:7	3	int
LEAF_NODE	52:7	52:7	4	int
FUNCTION_NAME	53:0	53:0	2	PredictorSetup
LEAF_NODE	53:0	53:0	3	PredictorSetup
PARAMETER_LIST	53:14	53:24	2	( TIFF * tif )
LEAF_NODE	53:14	53:14	3	(
PARAMETER_DECL	53:15	53:21	3	TIFF * tif
TYPE	53:15	53:19	4	TIFF *
TYPE_NAME	53:15	53:15	5	TIFF
LEAF_NODE	53:15	53:15	6	TIFF
POINTER	53:19	53:19	5	*
LEAF_NODE	53:19	53:19	6	*
NAME	53:21	53:21	4	tif
LEAF_NODE	53:21	53:21	5	tif
LEAF_NODE	53:24	53:24	3	)
LEAF_NODE	54:0	54:0	2	{
STATEMENTS	55:1	109:1	2	
LEAF_NODE	55:1	55:1	3	static
SIMPLE_DECL	55:8	55:46	3	const char [ ] module ; module = "PredictorSetup" ;
VAR_DECL	55:8	55:19	4	const char [ ] module ; module = "PredictorSetup"
TYPE	55:8	55:25	5	const char [ ]
TYPE_NAME	55:8	55:14	6	const char
LEAF_NODE	55:8	55:8	7	const
LEAF_NODE	55:14	55:14	7	char
TYPE_SUFFIX	55:25	55:26	6	[ ]
LEAF_NODE	55:25	55:25	7	[
LEAF_NODE	55:26	55:26	7	]
NAME	55:19	55:19	5	module
LEAF_NODE	55:19	55:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	55:19	55:19	5	module = "PredictorSetup"
ASSIGN	55:19	55:30	6	module = "PredictorSetup"
LVAL	55:19	55:19	7	module
NAME	55:19	55:19	8	module
LEAF_NODE	55:19	55:19	9	module
ASSIGN_OP	55:28	55:28	7	=
LEAF_NODE	55:28	55:28	8	=
RVAL	55:30	55:30	7	"PredictorSetup"
FIELD	55:30	55:30	8	"PredictorSetup"
LEAF_NODE	55:30	55:30	9	"PredictorSetup"
LEAF_NODE	55:46	55:46	4	;
SIMPLE_DECL	57:1	57:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	57:1	57:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	57:1	57:19	5	TIFFPredictorState *
TYPE_NAME	57:1	57:1	6	TIFFPredictorState
LEAF_NODE	57:1	57:1	7	TIFFPredictorState
POINTER	57:19	57:19	6	*
LEAF_NODE	57:19	57:19	7	*
NAME	57:21	57:21	5	sp
LEAF_NODE	57:21	57:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	57:21	57:21	5	sp = PredictorState ( tif )
ASSIGN	57:21	57:26	6	sp = PredictorState ( tif )
LVAL	57:21	57:21	7	sp
NAME	57:21	57:21	8	sp
LEAF_NODE	57:21	57:21	9	sp
ASSIGN_OP	57:24	57:24	7	=
LEAF_NODE	57:24	57:24	8	=
RVAL	57:26	57:26	7	PredictorState ( tif )
FUNCTION_CALL	57:26	57:44	8	PredictorState ( tif )
CALLEE	57:26	57:26	9	PredictorState
LEAF_NODE	57:26	57:26	10	PredictorState
LEAF_NODE	57:40	57:40	9	(
ARGUMENT	57:41	57:41	9	tif
FIELD	57:41	57:41	10	tif
LEAF_NODE	57:41	57:41	11	tif
LEAF_NODE	57:44	57:44	9	)
LEAF_NODE	57:45	57:45	4	;
SIMPLE_DECL	58:1	58:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	58:1	58:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	58:1	58:14	5	TIFFDirectory *
TYPE_NAME	58:1	58:1	6	TIFFDirectory
LEAF_NODE	58:1	58:1	7	TIFFDirectory
POINTER	58:14	58:14	6	*
LEAF_NODE	58:14	58:14	7	*
NAME	58:16	58:16	5	td
LEAF_NODE	58:16	58:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	58:16	58:16	5	td = & tif -> tif_dir
ASSIGN	58:16	58:21	6	td = & tif -> tif_dir
LVAL	58:16	58:16	7	td
NAME	58:16	58:16	8	td
LEAF_NODE	58:16	58:16	9	td
ASSIGN_OP	58:19	58:19	7	=
LEAF_NODE	58:19	58:19	8	=
RVAL	58:21	58:21	7	& tif -> tif_dir
UNARY_EXPR	58:21	58:22	8	& tif -> tif_dir
UNARY_OPERATOR	58:21	58:21	9	&
LEAF_NODE	58:21	58:21	10	&
FIELD	58:22	58:27	9	tif -> tif_dir
LEAF_NODE	58:22	58:22	10	tif
LEAF_NODE	58:25	58:25	10	->
LEAF_NODE	58:27	58:27	10	tif_dir
LEAF_NODE	58:34	58:34	4	;
SELECTION	60:1	61:1	3	
KEYWORD	60:1	60:1	4	switch
LEAF_NODE	60:1	60:1	5	switch
LEAF_NODE	60:8	60:8	4	(
CONDITION	60:9	60:9	4	sp -> predictor
EXPR	60:9	60:9	5	sp -> predictor
FIELD	60:9	60:13	6	sp -> predictor
LEAF_NODE	60:9	60:9	7	sp
LEAF_NODE	60:11	60:11	7	->
LEAF_NODE	60:13	60:13	7	predictor
LEAF_NODE	60:22	60:22	4	)
STATEMENTS	61:1	96:1	4	
LEAF_NODE	61:1	61:1	5	{
STATEMENTS	62:2	95:3	5	
LABEL	62:2	62:21	6	case PREDICTOR_NONE :
LEAF_NODE	62:2	62:2	7	case
LEAF_NODE	62:7	62:7	7	PREDICTOR_NONE
LEAF_NODE	62:21	62:21	7	:
JUMP_STATEMENT	63:3	63:11	6	return 1 ;
KEYWORD	63:3	63:3	7	return
LEAF_NODE	63:3	63:3	8	return
DESTINATION	63:10	63:10	7	1
EXPR	63:10	63:10	8	1
FIELD	63:10	63:10	9	1
LEAF_NODE	63:10	63:10	10	1
LEAF_NODE	63:11	63:11	7	;
LABEL	64:2	64:27	6	case PREDICTOR_HORIZONTAL :
LEAF_NODE	64:2	64:2	7	case
LEAF_NODE	64:7	64:7	7	PREDICTOR_HORIZONTAL
LEAF_NODE	64:27	64:27	7	:
SELECTION	65:3	67:38	6	
KEYWORD	65:3	65:3	7	if
LEAF_NODE	65:3	65:3	8	if
LEAF_NODE	65:6	65:6	7	(
CONDITION	65:7	65:7	7	td -> td_bitspersample != 8 && td -> td_bitspersample != 16 && td -> td_bitspersample != 32
EXPR	65:7	65:7	8	td -> td_bitspersample != 8 && td -> td_bitspersample != 16 && td -> td_bitspersample != 32
AND	65:7	66:10	9	td -> td_bitspersample != 8 && td -> td_bitspersample != 16 && td -> td_bitspersample != 32
EXPR	65:7	65:31	10	td -> td_bitspersample != 8
FIELD	65:7	65:11	11	td -> td_bitspersample
LEAF_NODE	65:7	65:7	12	td
LEAF_NODE	65:9	65:9	12	->
LEAF_NODE	65:11	65:11	12	td_bitspersample
EQ_OPERATOR	65:28	65:28	11	!=
LEAF_NODE	65:28	65:28	12	!=
FIELD	65:31	65:31	11	8
LEAF_NODE	65:31	65:31	12	8
LEAF_NODE	66:7	66:7	10	&&
EXPR	66:10	66:10	10	td -> td_bitspersample != 16 && td -> td_bitspersample != 32
AND	66:10	67:10	11	td -> td_bitspersample != 16 && td -> td_bitspersample != 32
EXPR	66:10	66:34	12	td -> td_bitspersample != 16
FIELD	66:10	66:14	13	td -> td_bitspersample
LEAF_NODE	66:10	66:10	14	td
LEAF_NODE	66:12	66:12	14	->
LEAF_NODE	66:14	66:14	14	td_bitspersample
EQ_OPERATOR	66:31	66:31	13	!=
LEAF_NODE	66:31	66:31	14	!=
FIELD	66:34	66:34	13	16
LEAF_NODE	66:34	66:34	14	16
LEAF_NODE	67:7	67:7	12	&&
EXPR	67:10	67:34	12	td -> td_bitspersample != 32
FIELD	67:10	67:14	13	td -> td_bitspersample
LEAF_NODE	67:10	67:10	14	td
LEAF_NODE	67:12	67:12	14	->
LEAF_NODE	67:14	67:14	14	td_bitspersample
EQ_OPERATOR	67:31	67:31	13	!=
LEAF_NODE	67:31	67:31	14	!=
FIELD	67:34	67:34	13	32
LEAF_NODE	67:34	67:34	14	32
LEAF_NODE	67:36	67:36	7	)
STATEMENTS	67:38	72:3	7	
LEAF_NODE	67:38	67:38	8	{
STATEMENTS	68:4	71:4	8	
EXPR_STATEMENT	68:4	70:29	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Horizontal differencing \"Predictor\" not supported with %d-bit samples" , td -> td_bitspersample ) ;
EXPR	68:4	68:4	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Horizontal differencing \"Predictor\" not supported with %d-bit samples" , td -> td_bitspersample )
FUNCTION_CALL	68:4	70:28	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Horizontal differencing \"Predictor\" not supported with %d-bit samples" , td -> td_bitspersample )
CALLEE	68:4	68:4	12	TIFFErrorExt
LEAF_NODE	68:4	68:4	13	TIFFErrorExt
LEAF_NODE	68:16	68:16	12	(
ARGUMENT	68:17	68:17	12	tif -> tif_clientdata
FIELD	68:17	68:22	13	tif -> tif_clientdata
LEAF_NODE	68:17	68:17	14	tif
LEAF_NODE	68:20	68:20	14	->
LEAF_NODE	68:22	68:22	14	tif_clientdata
LEAF_NODE	68:36	68:36	12	,
ARGUMENT	68:38	68:38	12	module
FIELD	68:38	68:38	13	module
LEAF_NODE	68:38	68:38	14	module
LEAF_NODE	68:44	68:44	12	,
ARGUMENT	69:8	69:8	12	"Horizontal differencing \"Predictor\" not supported with %d-bit samples"
FIELD	69:8	69:8	13	"Horizontal differencing \"Predictor\" not supported with %d-bit samples"
LEAF_NODE	69:8	69:8	14	"Horizontal differencing \"Predictor\" not supported with %d-bit samples"
LEAF_NODE	69:81	69:81	12	,
ARGUMENT	70:8	70:8	12	td -> td_bitspersample
FIELD	70:8	70:12	13	td -> td_bitspersample
LEAF_NODE	70:8	70:8	14	td
LEAF_NODE	70:10	70:10	14	->
LEAF_NODE	70:12	70:12	14	td_bitspersample
LEAF_NODE	70:28	70:28	12	)
LEAF_NODE	70:29	70:29	10	;
JUMP_STATEMENT	71:4	71:12	9	return 0 ;
KEYWORD	71:4	71:4	10	return
LEAF_NODE	71:4	71:4	11	return
DESTINATION	71:11	71:11	10	0
EXPR	71:11	71:11	11	0
FIELD	71:11	71:11	12	0
LEAF_NODE	71:11	71:11	13	0
LEAF_NODE	71:12	71:12	10	;
LEAF_NODE	72:3	72:3	8	}
JUMP_STATEMENT	73:3	73:8	6	break DESTINATION ;
KEYWORD	73:3	73:3	7	break
LEAF_NODE	73:3	73:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	73:8	73:8	7	;
LABEL	74:2	74:30	6	case PREDICTOR_FLOATINGPOINT :
LEAF_NODE	74:2	74:2	7	case
LEAF_NODE	74:7	74:7	7	PREDICTOR_FLOATINGPOINT
LEAF_NODE	74:30	74:30	7	:
SELECTION	75:3	75:51	6	
KEYWORD	75:3	75:3	7	if
LEAF_NODE	75:3	75:3	8	if
LEAF_NODE	75:6	75:6	7	(
CONDITION	75:7	75:7	7	td -> td_sampleformat != SAMPLEFORMAT_IEEEFP
EXPR	75:7	75:30	8	td -> td_sampleformat != SAMPLEFORMAT_IEEEFP
FIELD	75:7	75:11	9	td -> td_sampleformat
LEAF_NODE	75:7	75:7	10	td
LEAF_NODE	75:9	75:9	10	->
LEAF_NODE	75:11	75:11	10	td_sampleformat
EQ_OPERATOR	75:27	75:27	9	!=
LEAF_NODE	75:27	75:27	10	!=
FIELD	75:30	75:30	9	SAMPLEFORMAT_IEEEFP
LEAF_NODE	75:30	75:30	10	SAMPLEFORMAT_IEEEFP
LEAF_NODE	75:49	75:49	7	)
STATEMENTS	75:51	80:3	7	
LEAF_NODE	75:51	75:51	8	{
STATEMENTS	76:4	79:4	8	
EXPR_STATEMENT	76:4	78:28	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Floating point \"Predictor\" not supported with %d data format" , td -> td_sampleformat ) ;
EXPR	76:4	76:4	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Floating point \"Predictor\" not supported with %d data format" , td -> td_sampleformat )
FUNCTION_CALL	76:4	78:27	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Floating point \"Predictor\" not supported with %d data format" , td -> td_sampleformat )
CALLEE	76:4	76:4	12	TIFFErrorExt
LEAF_NODE	76:4	76:4	13	TIFFErrorExt
LEAF_NODE	76:16	76:16	12	(
ARGUMENT	76:17	76:17	12	tif -> tif_clientdata
FIELD	76:17	76:22	13	tif -> tif_clientdata
LEAF_NODE	76:17	76:17	14	tif
LEAF_NODE	76:20	76:20	14	->
LEAF_NODE	76:22	76:22	14	tif_clientdata
LEAF_NODE	76:36	76:36	12	,
ARGUMENT	76:38	76:38	12	module
FIELD	76:38	76:38	13	module
LEAF_NODE	76:38	76:38	14	module
LEAF_NODE	76:44	76:44	12	,
ARGUMENT	77:8	77:8	12	"Floating point \"Predictor\" not supported with %d data format"
FIELD	77:8	77:8	13	"Floating point \"Predictor\" not supported with %d data format"
LEAF_NODE	77:8	77:8	14	"Floating point \"Predictor\" not supported with %d data format"
LEAF_NODE	77:72	77:72	12	,
ARGUMENT	78:8	78:8	12	td -> td_sampleformat
FIELD	78:8	78:12	13	td -> td_sampleformat
LEAF_NODE	78:8	78:8	14	td
LEAF_NODE	78:10	78:10	14	->
LEAF_NODE	78:12	78:12	14	td_sampleformat
LEAF_NODE	78:27	78:27	12	)
LEAF_NODE	78:28	78:28	10	;
JUMP_STATEMENT	79:4	79:12	9	return 0 ;
KEYWORD	79:4	79:4	10	return
LEAF_NODE	79:4	79:4	11	return
DESTINATION	79:11	79:11	10	0
EXPR	79:11	79:11	11	0
FIELD	79:11	79:11	12	0
LEAF_NODE	79:11	79:11	13	0
LEAF_NODE	79:12	79:12	10	;
LEAF_NODE	80:3	80:3	8	}
SELECTION	81:24	84:59	6	
KEYWORD	81:24	81:24	7	if
LEAF_NODE	81:24	81:24	8	if
LEAF_NODE	81:27	81:27	7	(
CONDITION	81:28	81:28	7	td -> td_bitspersample != 16 && td -> td_bitspersample != 24 && td -> td_bitspersample != 32 && td -> td_bitspersample != 64
EXPR	81:28	81:28	8	td -> td_bitspersample != 16 && td -> td_bitspersample != 24 && td -> td_bitspersample != 32 && td -> td_bitspersample != 64
AND	81:28	82:31	9	td -> td_bitspersample != 16 && td -> td_bitspersample != 24 && td -> td_bitspersample != 32 && td -> td_bitspersample != 64
EXPR	81:28	81:52	10	td -> td_bitspersample != 16
FIELD	81:28	81:32	11	td -> td_bitspersample
LEAF_NODE	81:28	81:28	12	td
LEAF_NODE	81:30	81:30	12	->
LEAF_NODE	81:32	81:32	12	td_bitspersample
EQ_OPERATOR	81:49	81:49	11	!=
LEAF_NODE	81:49	81:49	12	!=
FIELD	81:52	81:52	11	16
LEAF_NODE	81:52	81:52	12	16
LEAF_NODE	82:28	82:28	10	&&
EXPR	82:31	82:31	10	td -> td_bitspersample != 24 && td -> td_bitspersample != 32 && td -> td_bitspersample != 64
AND	82:31	83:31	11	td -> td_bitspersample != 24 && td -> td_bitspersample != 32 && td -> td_bitspersample != 64
EXPR	82:31	82:55	12	td -> td_bitspersample != 24
FIELD	82:31	82:35	13	td -> td_bitspersample
LEAF_NODE	82:31	82:31	14	td
LEAF_NODE	82:33	82:33	14	->
LEAF_NODE	82:35	82:35	14	td_bitspersample
EQ_OPERATOR	82:52	82:52	13	!=
LEAF_NODE	82:52	82:52	14	!=
FIELD	82:55	82:55	13	24
LEAF_NODE	82:55	82:55	14	24
LEAF_NODE	83:28	83:28	12	&&
EXPR	83:31	83:31	12	td -> td_bitspersample != 32 && td -> td_bitspersample != 64
AND	83:31	84:31	13	td -> td_bitspersample != 32 && td -> td_bitspersample != 64
EXPR	83:31	83:55	14	td -> td_bitspersample != 32
FIELD	83:31	83:35	15	td -> td_bitspersample
LEAF_NODE	83:31	83:31	16	td
LEAF_NODE	83:33	83:33	16	->
LEAF_NODE	83:35	83:35	16	td_bitspersample
EQ_OPERATOR	83:52	83:52	15	!=
LEAF_NODE	83:52	83:52	16	!=
FIELD	83:55	83:55	15	32
LEAF_NODE	83:55	83:55	16	32
LEAF_NODE	84:28	84:28	14	&&
EXPR	84:31	84:55	14	td -> td_bitspersample != 64
FIELD	84:31	84:35	15	td -> td_bitspersample
LEAF_NODE	84:31	84:31	16	td
LEAF_NODE	84:33	84:33	16	->
LEAF_NODE	84:35	84:35	16	td_bitspersample
EQ_OPERATOR	84:52	84:52	15	!=
LEAF_NODE	84:52	84:52	16	!=
FIELD	84:55	84:55	15	64
LEAF_NODE	84:55	84:55	16	64
LEAF_NODE	84:57	84:57	7	)
STATEMENTS	84:59	89:28	7	
LEAF_NODE	84:59	84:59	8	{
STATEMENTS	85:32	88:4	8	
EXPR_STATEMENT	85:32	87:66	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Floating point \"Predictor\" not supported with %d-bit samples" , td -> td_bitspersample ) ;
EXPR	85:32	85:32	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Floating point \"Predictor\" not supported with %d-bit samples" , td -> td_bitspersample )
FUNCTION_CALL	85:32	87:65	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Floating point \"Predictor\" not supported with %d-bit samples" , td -> td_bitspersample )
CALLEE	85:32	85:32	12	TIFFErrorExt
LEAF_NODE	85:32	85:32	13	TIFFErrorExt
LEAF_NODE	85:44	85:44	12	(
ARGUMENT	85:45	85:45	12	tif -> tif_clientdata
FIELD	85:45	85:50	13	tif -> tif_clientdata
LEAF_NODE	85:45	85:45	14	tif
LEAF_NODE	85:48	85:48	14	->
LEAF_NODE	85:50	85:50	14	tif_clientdata
LEAF_NODE	85:64	85:64	12	,
ARGUMENT	85:66	85:66	12	module
FIELD	85:66	85:66	13	module
LEAF_NODE	85:66	85:66	14	module
LEAF_NODE	85:72	85:72	12	,
ARGUMENT	86:45	86:45	12	"Floating point \"Predictor\" not supported with %d-bit samples"
FIELD	86:45	86:45	13	"Floating point \"Predictor\" not supported with %d-bit samples"
LEAF_NODE	86:45	86:45	14	"Floating point \"Predictor\" not supported with %d-bit samples"
LEAF_NODE	86:109	86:109	12	,
ARGUMENT	87:45	87:45	12	td -> td_bitspersample
FIELD	87:45	87:49	13	td -> td_bitspersample
LEAF_NODE	87:45	87:45	14	td
LEAF_NODE	87:47	87:47	14	->
LEAF_NODE	87:49	87:49	14	td_bitspersample
LEAF_NODE	87:65	87:65	12	)
LEAF_NODE	87:66	87:66	10	;
JUMP_STATEMENT	88:4	88:12	9	return 0 ;
KEYWORD	88:4	88:4	10	return
LEAF_NODE	88:4	88:4	11	return
DESTINATION	88:11	88:11	10	0
EXPR	88:11	88:11	11	0
FIELD	88:11	88:11	12	0
LEAF_NODE	88:11	88:11	13	0
LEAF_NODE	88:12	88:12	10	;
LEAF_NODE	89:28	89:28	8	}
JUMP_STATEMENT	90:3	90:8	6	break DESTINATION ;
KEYWORD	90:3	90:3	7	break
LEAF_NODE	90:3	90:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	90:8	90:8	7	;
LABEL	91:2	91:9	6	default :
LEAF_NODE	91:2	91:2	7	default
LEAF_NODE	91:9	91:9	7	:
EXPR_STATEMENT	92:3	94:21	6	TIFFErrorExt ( tif -> tif_clientdata , module , "\"Predictor\" value %d not supported" , sp -> predictor ) ;
EXPR	92:3	92:3	7	TIFFErrorExt ( tif -> tif_clientdata , module , "\"Predictor\" value %d not supported" , sp -> predictor )
FUNCTION_CALL	92:3	94:20	8	TIFFErrorExt ( tif -> tif_clientdata , module , "\"Predictor\" value %d not supported" , sp -> predictor )
CALLEE	92:3	92:3	9	TIFFErrorExt
LEAF_NODE	92:3	92:3	10	TIFFErrorExt
LEAF_NODE	92:15	92:15	9	(
ARGUMENT	92:16	92:16	9	tif -> tif_clientdata
FIELD	92:16	92:21	10	tif -> tif_clientdata
LEAF_NODE	92:16	92:16	11	tif
LEAF_NODE	92:19	92:19	11	->
LEAF_NODE	92:21	92:21	11	tif_clientdata
LEAF_NODE	92:35	92:35	9	,
ARGUMENT	92:37	92:37	9	module
FIELD	92:37	92:37	10	module
LEAF_NODE	92:37	92:37	11	module
LEAF_NODE	92:43	92:43	9	,
ARGUMENT	93:7	93:7	9	"\"Predictor\" value %d not supported"
FIELD	93:7	93:7	10	"\"Predictor\" value %d not supported"
LEAF_NODE	93:7	93:7	11	"\"Predictor\" value %d not supported"
LEAF_NODE	93:45	93:45	9	,
ARGUMENT	94:7	94:7	9	sp -> predictor
FIELD	94:7	94:11	10	sp -> predictor
LEAF_NODE	94:7	94:7	11	sp
LEAF_NODE	94:9	94:9	11	->
LEAF_NODE	94:11	94:11	11	predictor
LEAF_NODE	94:20	94:20	9	)
LEAF_NODE	94:21	94:21	7	;
JUMP_STATEMENT	95:3	95:11	6	return 0 ;
KEYWORD	95:3	95:3	7	return
LEAF_NODE	95:3	95:3	8	return
DESTINATION	95:10	95:10	7	0
EXPR	95:10	95:10	8	0
FIELD	95:10	95:10	9	0
LEAF_NODE	95:10	95:10	10	0
LEAF_NODE	95:11	95:11	7	;
LEAF_NODE	96:1	96:1	5	}
EXPR_STATEMENT	97:1	98:32	3	sp -> stride = ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 ) ;
EXPR	97:1	97:1	4	sp -> stride = ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
ASSIGN	97:1	97:14	5	sp -> stride = ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
LVAL	97:1	97:1	6	sp -> stride
FIELD	97:1	97:5	7	sp -> stride
LEAF_NODE	97:1	97:1	8	sp
LEAF_NODE	97:3	97:3	8	->
LEAF_NODE	97:5	97:5	8	stride
ASSIGN_OP	97:12	97:12	6	=
LEAF_NODE	97:12	97:12	7	=
RVAL	97:14	98:31	6	( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
LEAF_NODE	97:14	97:14	7	(
COND_EXPR	97:15	98:30	7	td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1
CONDITION	97:15	97:38	8	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	97:15	97:19	9	td -> td_planarconfig
LEAF_NODE	97:15	97:15	10	td
LEAF_NODE	97:17	97:17	10	->
LEAF_NODE	97:19	97:19	10	td_planarconfig
EQ_OPERATOR	97:35	97:35	9	==
LEAF_NODE	97:35	97:35	10	==
FIELD	97:38	97:38	9	PLANARCONFIG_CONTIG
LEAF_NODE	97:38	97:38	10	PLANARCONFIG_CONTIG
LEAF_NODE	97:58	97:58	8	?
EXPR	98:5	98:5	8	td -> td_samplesperpixel
FIELD	98:5	98:9	9	td -> td_samplesperpixel
LEAF_NODE	98:5	98:5	10	td
LEAF_NODE	98:7	98:7	10	->
LEAF_NODE	98:9	98:9	10	td_samplesperpixel
LEAF_NODE	98:28	98:28	8	:
FIELD	98:30	98:30	8	1
LEAF_NODE	98:30	98:30	9	1
LEAF_NODE	98:31	98:31	7	)
LEAF_NODE	98:32	98:32	4	;
SELECTION	102:1	103:2	3	
KEYWORD	102:1	102:1	4	if
LEAF_NODE	102:1	102:1	5	if
LEAF_NODE	102:4	102:4	4	(
CONDITION	102:5	102:5	4	isTiled ( tif )
EXPR	102:5	102:5	5	isTiled ( tif )
FUNCTION_CALL	102:5	102:16	6	isTiled ( tif )
CALLEE	102:5	102:5	7	isTiled
LEAF_NODE	102:5	102:5	8	isTiled
LEAF_NODE	102:12	102:12	7	(
ARGUMENT	102:13	102:13	7	tif
FIELD	102:13	102:13	8	tif
LEAF_NODE	102:13	102:13	9	tif
LEAF_NODE	102:16	102:16	7	)
LEAF_NODE	102:17	102:17	4	)
STATEMENTS	103:2	103:2	4	
EXPR_STATEMENT	103:2	103:36	5	sp -> rowsize = TIFFTileRowSize ( tif ) ;
EXPR	103:2	103:2	6	sp -> rowsize = TIFFTileRowSize ( tif )
ASSIGN	103:2	103:16	7	sp -> rowsize = TIFFTileRowSize ( tif )
LVAL	103:2	103:2	8	sp -> rowsize
FIELD	103:2	103:6	9	sp -> rowsize
LEAF_NODE	103:2	103:2	10	sp
LEAF_NODE	103:4	103:4	10	->
LEAF_NODE	103:6	103:6	10	rowsize
ASSIGN_OP	103:14	103:14	8	=
LEAF_NODE	103:14	103:14	9	=
RVAL	103:16	103:16	8	TIFFTileRowSize ( tif )
FUNCTION_CALL	103:16	103:35	9	TIFFTileRowSize ( tif )
CALLEE	103:16	103:16	10	TIFFTileRowSize
LEAF_NODE	103:16	103:16	11	TIFFTileRowSize
LEAF_NODE	103:31	103:31	10	(
ARGUMENT	103:32	103:32	10	tif
FIELD	103:32	103:32	11	tif
LEAF_NODE	103:32	103:32	12	tif
LEAF_NODE	103:35	103:35	10	)
LEAF_NODE	103:36	103:36	6	;
SELECTION	104:1	105:2	3	
KEYWORD	104:1	104:1	4	else
LEAF_NODE	104:1	104:1	5	else
STATEMENTS	105:2	105:2	4	
EXPR_STATEMENT	105:2	105:37	5	sp -> rowsize = TIFFScanlineSize ( tif ) ;
EXPR	105:2	105:2	6	sp -> rowsize = TIFFScanlineSize ( tif )
ASSIGN	105:2	105:16	7	sp -> rowsize = TIFFScanlineSize ( tif )
LVAL	105:2	105:2	8	sp -> rowsize
FIELD	105:2	105:6	9	sp -> rowsize
LEAF_NODE	105:2	105:2	10	sp
LEAF_NODE	105:4	105:4	10	->
LEAF_NODE	105:6	105:6	10	rowsize
ASSIGN_OP	105:14	105:14	8	=
LEAF_NODE	105:14	105:14	9	=
RVAL	105:16	105:16	8	TIFFScanlineSize ( tif )
FUNCTION_CALL	105:16	105:36	9	TIFFScanlineSize ( tif )
CALLEE	105:16	105:16	10	TIFFScanlineSize
LEAF_NODE	105:16	105:16	11	TIFFScanlineSize
LEAF_NODE	105:32	105:32	10	(
ARGUMENT	105:33	105:33	10	tif
FIELD	105:33	105:33	11	tif
LEAF_NODE	105:33	105:33	12	tif
LEAF_NODE	105:36	105:36	10	)
LEAF_NODE	105:37	105:37	6	;
SELECTION	106:1	107:2	3	
KEYWORD	106:1	106:1	4	if
LEAF_NODE	106:1	106:1	5	if
LEAF_NODE	106:4	106:4	4	(
CONDITION	106:5	106:5	4	sp -> rowsize == 0
EXPR	106:5	106:20	5	sp -> rowsize == 0
FIELD	106:5	106:9	6	sp -> rowsize
LEAF_NODE	106:5	106:5	7	sp
LEAF_NODE	106:7	106:7	7	->
LEAF_NODE	106:9	106:9	7	rowsize
EQ_OPERATOR	106:17	106:17	6	==
LEAF_NODE	106:17	106:17	7	==
FIELD	106:20	106:20	6	0
LEAF_NODE	106:20	106:20	7	0
LEAF_NODE	106:21	106:21	4	)
STATEMENTS	107:2	107:2	4	
JUMP_STATEMENT	107:2	107:10	5	return 0 ;
KEYWORD	107:2	107:2	6	return
LEAF_NODE	107:2	107:2	7	return
DESTINATION	107:9	107:9	6	0
EXPR	107:9	107:9	7	0
FIELD	107:9	107:9	8	0
LEAF_NODE	107:9	107:9	9	0
LEAF_NODE	107:10	107:10	6	;
JUMP_STATEMENT	109:1	109:9	3	return 1 ;
KEYWORD	109:1	109:1	4	return
LEAF_NODE	109:1	109:1	5	return
DESTINATION	109:8	109:8	4	1
EXPR	109:8	109:8	5	1
FIELD	109:8	109:8	6	1
LEAF_NODE	109:8	109:8	7	1
LEAF_NODE	109:9	109:9	4	;
LEAF_NODE	110:0	110:0	2	}
FUNCTION_DEF	112:0	192:0	1	
RETURN_TYPE	112:0	112:7	2	static int
LEAF_NODE	112:0	112:0	3	static
TYPE_NAME	112:7	112:7	3	int
LEAF_NODE	112:7	112:7	4	int
FUNCTION_NAME	113:0	113:0	2	PredictorSetupDecode
LEAF_NODE	113:0	113:0	3	PredictorSetupDecode
PARAMETER_LIST	113:20	113:30	2	( TIFF * tif )
LEAF_NODE	113:20	113:20	3	(
PARAMETER_DECL	113:21	113:27	3	TIFF * tif
TYPE	113:21	113:25	4	TIFF *
TYPE_NAME	113:21	113:21	5	TIFF
LEAF_NODE	113:21	113:21	6	TIFF
POINTER	113:25	113:25	5	*
LEAF_NODE	113:25	113:25	6	*
NAME	113:27	113:27	4	tif
LEAF_NODE	113:27	113:27	5	tif
LEAF_NODE	113:30	113:30	3	)
LEAF_NODE	114:0	114:0	2	{
STATEMENTS	115:1	191:1	2	
SIMPLE_DECL	115:1	115:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	115:1	115:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	115:1	115:19	5	TIFFPredictorState *
TYPE_NAME	115:1	115:1	6	TIFFPredictorState
LEAF_NODE	115:1	115:1	7	TIFFPredictorState
POINTER	115:19	115:19	6	*
LEAF_NODE	115:19	115:19	7	*
NAME	115:21	115:21	5	sp
LEAF_NODE	115:21	115:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	115:21	115:21	5	sp = PredictorState ( tif )
ASSIGN	115:21	115:26	6	sp = PredictorState ( tif )
LVAL	115:21	115:21	7	sp
NAME	115:21	115:21	8	sp
LEAF_NODE	115:21	115:21	9	sp
ASSIGN_OP	115:24	115:24	7	=
LEAF_NODE	115:24	115:24	8	=
RVAL	115:26	115:26	7	PredictorState ( tif )
FUNCTION_CALL	115:26	115:44	8	PredictorState ( tif )
CALLEE	115:26	115:26	9	PredictorState
LEAF_NODE	115:26	115:26	10	PredictorState
LEAF_NODE	115:40	115:40	9	(
ARGUMENT	115:41	115:41	9	tif
FIELD	115:41	115:41	10	tif
LEAF_NODE	115:41	115:41	11	tif
LEAF_NODE	115:44	115:44	9	)
LEAF_NODE	115:45	115:45	4	;
SIMPLE_DECL	116:1	116:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	116:1	116:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	116:1	116:14	5	TIFFDirectory *
TYPE_NAME	116:1	116:1	6	TIFFDirectory
LEAF_NODE	116:1	116:1	7	TIFFDirectory
POINTER	116:14	116:14	6	*
LEAF_NODE	116:14	116:14	7	*
NAME	116:16	116:16	5	td
LEAF_NODE	116:16	116:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	116:16	116:16	5	td = & tif -> tif_dir
ASSIGN	116:16	116:21	6	td = & tif -> tif_dir
LVAL	116:16	116:16	7	td
NAME	116:16	116:16	8	td
LEAF_NODE	116:16	116:16	9	td
ASSIGN_OP	116:19	116:19	7	=
LEAF_NODE	116:19	116:19	8	=
RVAL	116:21	116:21	7	& tif -> tif_dir
UNARY_EXPR	116:21	116:22	8	& tif -> tif_dir
UNARY_OPERATOR	116:21	116:21	9	&
LEAF_NODE	116:21	116:21	10	&
FIELD	116:22	116:27	9	tif -> tif_dir
LEAF_NODE	116:22	116:22	10	tif
LEAF_NODE	116:25	116:25	10	->
LEAF_NODE	116:27	116:27	10	tif_dir
LEAF_NODE	116:34	116:34	4	;
SELECTION	121:1	122:2	3	
KEYWORD	121:1	121:1	4	if
LEAF_NODE	121:1	121:1	5	if
LEAF_NODE	121:4	121:4	4	(
CONDITION	121:5	121:5	4	! ( * sp -> setupdecode ) ( tif ) || ! PredictorSetup ( tif )
EXPR	121:5	121:5	5	! ( * sp -> setupdecode ) ( tif ) || ! PredictorSetup ( tif )
OR	121:5	121:33	6	! ( * sp -> setupdecode ) ( tif ) || ! PredictorSetup ( tif )
EXPR	121:5	121:5	7	! ( * sp -> setupdecode ) ( tif )
UNARY_EXPR	121:5	121:6	8	! ( * sp -> setupdecode ) ( tif )
UNARY_OPERATOR	121:5	121:5	9	!
LEAF_NODE	121:5	121:5	10	!
FUNCTION_CALL	121:6	121:28	9	( * sp -> setupdecode ) ( tif )
CALLEE	121:6	121:23	10	( * sp -> setupdecode )
LEAF_NODE	121:6	121:6	11	(
UNARY_EXPR	121:7	121:8	11	* sp -> setupdecode
UNARY_OPERATOR	121:7	121:7	12	*
LEAF_NODE	121:7	121:7	13	*
FIELD	121:8	121:12	12	sp -> setupdecode
LEAF_NODE	121:8	121:8	13	sp
LEAF_NODE	121:10	121:10	13	->
LEAF_NODE	121:12	121:12	13	setupdecode
LEAF_NODE	121:23	121:23	11	)
LEAF_NODE	121:24	121:24	10	(
ARGUMENT	121:25	121:25	10	tif
FIELD	121:25	121:25	11	tif
LEAF_NODE	121:25	121:25	12	tif
LEAF_NODE	121:28	121:28	10	)
LEAF_NODE	121:30	121:30	7	||
EXPR	121:33	121:33	7	! PredictorSetup ( tif )
UNARY_EXPR	121:33	121:34	8	! PredictorSetup ( tif )
UNARY_OPERATOR	121:33	121:33	9	!
LEAF_NODE	121:33	121:33	10	!
FUNCTION_CALL	121:34	121:52	9	PredictorSetup ( tif )
CALLEE	121:34	121:34	10	PredictorSetup
LEAF_NODE	121:34	121:34	11	PredictorSetup
LEAF_NODE	121:48	121:48	10	(
ARGUMENT	121:49	121:49	10	tif
FIELD	121:49	121:49	11	tif
LEAF_NODE	121:49	121:49	12	tif
LEAF_NODE	121:52	121:52	10	)
LEAF_NODE	121:53	121:53	4	)
STATEMENTS	122:2	122:2	4	
JUMP_STATEMENT	122:2	122:10	5	return 0 ;
KEYWORD	122:2	122:2	6	return
LEAF_NODE	122:2	122:2	7	return
DESTINATION	122:9	122:9	6	0
EXPR	122:9	122:9	7	0
FIELD	122:9	122:9	8	0
LEAF_NODE	122:9	122:9	9	0
LEAF_NODE	122:10	122:10	6	;
SELECTION	124:1	124:25	3	
KEYWORD	124:1	124:1	4	if
LEAF_NODE	124:1	124:1	5	if
LEAF_NODE	124:4	124:4	4	(
CONDITION	124:5	124:5	4	sp -> predictor == 2
EXPR	124:5	124:22	5	sp -> predictor == 2
FIELD	124:5	124:9	6	sp -> predictor
LEAF_NODE	124:5	124:5	7	sp
LEAF_NODE	124:7	124:7	7	->
LEAF_NODE	124:9	124:9	7	predictor
EQ_OPERATOR	124:19	124:19	6	==
LEAF_NODE	124:19	124:19	7	==
FIELD	124:22	124:22	6	2
LEAF_NODE	124:22	124:22	7	2
LEAF_NODE	124:23	124:23	4	)
STATEMENTS	124:25	160:1	4	
LEAF_NODE	124:25	124:25	5	{
STATEMENTS	125:2	151:2	5	
SELECTION	125:2	125:32	6	
KEYWORD	125:2	125:2	7	switch
LEAF_NODE	125:2	125:2	8	switch
LEAF_NODE	125:9	125:9	7	(
CONDITION	125:10	125:10	7	td -> td_bitspersample
EXPR	125:10	125:10	8	td -> td_bitspersample
FIELD	125:10	125:14	9	td -> td_bitspersample
LEAF_NODE	125:10	125:10	10	td
LEAF_NODE	125:12	125:12	10	->
LEAF_NODE	125:14	125:14	10	td_bitspersample
LEAF_NODE	125:30	125:30	7	)
STATEMENTS	125:32	129:2	7	
LEAF_NODE	125:32	125:32	8	{
STATEMENTS	126:3	128:40	8	
LABEL	126:3	126:9	9	case 8 :
LEAF_NODE	126:3	126:3	10	case
LEAF_NODE	126:8	126:8	10	8
LEAF_NODE	126:9	126:9	10	:
EXPR_STATEMENT	126:12	126:37	9	sp -> decodepfunc = horAcc8 ;
EXPR	126:12	126:12	10	sp -> decodepfunc = horAcc8
ASSIGN	126:12	126:30	11	sp -> decodepfunc = horAcc8
LVAL	126:12	126:12	12	sp -> decodepfunc
FIELD	126:12	126:16	13	sp -> decodepfunc
LEAF_NODE	126:12	126:12	14	sp
LEAF_NODE	126:14	126:14	14	->
LEAF_NODE	126:16	126:16	14	decodepfunc
ASSIGN_OP	126:28	126:28	12	=
LEAF_NODE	126:28	126:28	13	=
RVAL	126:30	126:30	12	horAcc8
FIELD	126:30	126:30	13	horAcc8
LEAF_NODE	126:30	126:30	14	horAcc8
LEAF_NODE	126:37	126:37	10	;
JUMP_STATEMENT	126:39	126:44	9	break DESTINATION ;
KEYWORD	126:39	126:39	10	break
LEAF_NODE	126:39	126:39	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	126:44	126:44	10	;
LABEL	127:3	127:10	9	case 16 :
LEAF_NODE	127:3	127:3	10	case
LEAF_NODE	127:8	127:8	10	16
LEAF_NODE	127:10	127:10	10	:
EXPR_STATEMENT	127:12	127:38	9	sp -> decodepfunc = horAcc16 ;
EXPR	127:12	127:12	10	sp -> decodepfunc = horAcc16
ASSIGN	127:12	127:30	11	sp -> decodepfunc = horAcc16
LVAL	127:12	127:12	12	sp -> decodepfunc
FIELD	127:12	127:16	13	sp -> decodepfunc
LEAF_NODE	127:12	127:12	14	sp
LEAF_NODE	127:14	127:14	14	->
LEAF_NODE	127:16	127:16	14	decodepfunc
ASSIGN_OP	127:28	127:28	12	=
LEAF_NODE	127:28	127:28	13	=
RVAL	127:30	127:30	12	horAcc16
FIELD	127:30	127:30	13	horAcc16
LEAF_NODE	127:30	127:30	14	horAcc16
LEAF_NODE	127:38	127:38	10	;
JUMP_STATEMENT	127:40	127:45	9	break DESTINATION ;
KEYWORD	127:40	127:40	10	break
LEAF_NODE	127:40	127:40	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	127:45	127:45	10	;
LABEL	128:3	128:10	9	case 32 :
LEAF_NODE	128:3	128:3	10	case
LEAF_NODE	128:8	128:8	10	32
LEAF_NODE	128:10	128:10	10	:
EXPR_STATEMENT	128:12	128:38	9	sp -> decodepfunc = horAcc32 ;
EXPR	128:12	128:12	10	sp -> decodepfunc = horAcc32
ASSIGN	128:12	128:30	11	sp -> decodepfunc = horAcc32
LVAL	128:12	128:12	12	sp -> decodepfunc
FIELD	128:12	128:16	13	sp -> decodepfunc
LEAF_NODE	128:12	128:12	14	sp
LEAF_NODE	128:14	128:14	14	->
LEAF_NODE	128:16	128:16	14	decodepfunc
ASSIGN_OP	128:28	128:28	12	=
LEAF_NODE	128:28	128:28	13	=
RVAL	128:30	128:30	12	horAcc32
FIELD	128:30	128:30	13	horAcc32
LEAF_NODE	128:30	128:30	14	horAcc32
LEAF_NODE	128:38	128:38	10	;
JUMP_STATEMENT	128:40	128:45	9	break DESTINATION ;
KEYWORD	128:40	128:40	10	break
LEAF_NODE	128:40	128:40	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	128:45	128:45	10	;
LEAF_NODE	129:2	129:2	8	}
SELECTION	134:16	135:16	6	
KEYWORD	134:16	134:16	7	if
LEAF_NODE	134:16	134:16	8	if
LEAF_NODE	134:18	134:18	7	(
CONDITION	134:20	134:20	7	tif -> tif_decoderow != PredictorDecodeRow
EXPR	134:20	134:42	8	tif -> tif_decoderow != PredictorDecodeRow
FIELD	134:20	134:25	9	tif -> tif_decoderow
LEAF_NODE	134:20	134:20	10	tif
LEAF_NODE	134:23	134:23	10	->
LEAF_NODE	134:25	134:25	10	tif_decoderow
EQ_OPERATOR	134:39	134:39	9	!=
LEAF_NODE	134:39	134:39	10	!=
FIELD	134:42	134:42	9	PredictorDecodeRow
LEAF_NODE	134:42	134:42	10	PredictorDecodeRow
LEAF_NODE	134:61	134:61	7	)
STATEMENTS	135:16	142:16	7	
LEAF_NODE	135:16	135:16	8	{
STATEMENTS	136:20	141:20	8	
EXPR_STATEMENT	136:20	136:54	9	sp -> decoderow = tif -> tif_decoderow ;
EXPR	136:20	136:20	10	sp -> decoderow = tif -> tif_decoderow
ASSIGN	136:20	136:36	11	sp -> decoderow = tif -> tif_decoderow
LVAL	136:20	136:20	12	sp -> decoderow
FIELD	136:20	136:24	13	sp -> decoderow
LEAF_NODE	136:20	136:20	14	sp
LEAF_NODE	136:22	136:22	14	->
LEAF_NODE	136:24	136:24	14	decoderow
ASSIGN_OP	136:34	136:34	12	=
LEAF_NODE	136:34	136:34	13	=
RVAL	136:36	136:36	12	tif -> tif_decoderow
FIELD	136:36	136:41	13	tif -> tif_decoderow
LEAF_NODE	136:36	136:36	14	tif
LEAF_NODE	136:39	136:39	14	->
LEAF_NODE	136:41	136:41	14	tif_decoderow
LEAF_NODE	136:54	136:54	10	;
EXPR_STATEMENT	137:20	137:59	9	tif -> tif_decoderow = PredictorDecodeRow ;
EXPR	137:20	137:20	10	tif -> tif_decoderow = PredictorDecodeRow
ASSIGN	137:20	137:41	11	tif -> tif_decoderow = PredictorDecodeRow
LVAL	137:20	137:20	12	tif -> tif_decoderow
FIELD	137:20	137:25	13	tif -> tif_decoderow
LEAF_NODE	137:20	137:20	14	tif
LEAF_NODE	137:23	137:23	14	->
LEAF_NODE	137:25	137:25	14	tif_decoderow
ASSIGN_OP	137:39	137:39	12	=
LEAF_NODE	137:39	137:39	13	=
RVAL	137:41	137:41	12	PredictorDecodeRow
FIELD	137:41	137:41	13	PredictorDecodeRow
LEAF_NODE	137:41	137:41	14	PredictorDecodeRow
LEAF_NODE	137:59	137:59	10	;
EXPR_STATEMENT	138:20	138:58	9	sp -> decodestrip = tif -> tif_decodestrip ;
EXPR	138:20	138:20	10	sp -> decodestrip = tif -> tif_decodestrip
ASSIGN	138:20	138:38	11	sp -> decodestrip = tif -> tif_decodestrip
LVAL	138:20	138:20	12	sp -> decodestrip
FIELD	138:20	138:24	13	sp -> decodestrip
LEAF_NODE	138:20	138:20	14	sp
LEAF_NODE	138:22	138:22	14	->
LEAF_NODE	138:24	138:24	14	decodestrip
ASSIGN_OP	138:36	138:36	12	=
LEAF_NODE	138:36	138:36	13	=
RVAL	138:38	138:38	12	tif -> tif_decodestrip
FIELD	138:38	138:43	13	tif -> tif_decodestrip
LEAF_NODE	138:38	138:38	14	tif
LEAF_NODE	138:41	138:41	14	->
LEAF_NODE	138:43	138:43	14	tif_decodestrip
LEAF_NODE	138:58	138:58	10	;
EXPR_STATEMENT	139:20	139:62	9	tif -> tif_decodestrip = PredictorDecodeTile ;
EXPR	139:20	139:20	10	tif -> tif_decodestrip = PredictorDecodeTile
ASSIGN	139:20	139:43	11	tif -> tif_decodestrip = PredictorDecodeTile
LVAL	139:20	139:20	12	tif -> tif_decodestrip
FIELD	139:20	139:25	13	tif -> tif_decodestrip
LEAF_NODE	139:20	139:20	14	tif
LEAF_NODE	139:23	139:23	14	->
LEAF_NODE	139:25	139:25	14	tif_decodestrip
ASSIGN_OP	139:41	139:41	12	=
LEAF_NODE	139:41	139:41	13	=
RVAL	139:43	139:43	12	PredictorDecodeTile
FIELD	139:43	139:43	13	PredictorDecodeTile
LEAF_NODE	139:43	139:43	14	PredictorDecodeTile
LEAF_NODE	139:62	139:62	10	;
EXPR_STATEMENT	140:20	140:56	9	sp -> decodetile = tif -> tif_decodetile ;
EXPR	140:20	140:20	10	sp -> decodetile = tif -> tif_decodetile
ASSIGN	140:20	140:37	11	sp -> decodetile = tif -> tif_decodetile
LVAL	140:20	140:20	12	sp -> decodetile
FIELD	140:20	140:24	13	sp -> decodetile
LEAF_NODE	140:20	140:20	14	sp
LEAF_NODE	140:22	140:22	14	->
LEAF_NODE	140:24	140:24	14	decodetile
ASSIGN_OP	140:35	140:35	12	=
LEAF_NODE	140:35	140:35	13	=
RVAL	140:37	140:37	12	tif -> tif_decodetile
FIELD	140:37	140:42	13	tif -> tif_decodetile
LEAF_NODE	140:37	140:37	14	tif
LEAF_NODE	140:40	140:40	14	->
LEAF_NODE	140:42	140:42	14	tif_decodetile
LEAF_NODE	140:56	140:56	10	;
EXPR_STATEMENT	141:20	141:61	9	tif -> tif_decodetile = PredictorDecodeTile ;
EXPR	141:20	141:20	10	tif -> tif_decodetile = PredictorDecodeTile
ASSIGN	141:20	141:42	11	tif -> tif_decodetile = PredictorDecodeTile
LVAL	141:20	141:20	12	tif -> tif_decodetile
FIELD	141:20	141:25	13	tif -> tif_decodetile
LEAF_NODE	141:20	141:20	14	tif
LEAF_NODE	141:23	141:23	14	->
LEAF_NODE	141:25	141:25	14	tif_decodetile
ASSIGN_OP	141:40	141:40	12	=
LEAF_NODE	141:40	141:40	13	=
RVAL	141:42	141:42	12	PredictorDecodeTile
FIELD	141:42	141:42	13	PredictorDecodeTile
LEAF_NODE	141:42	141:42	14	PredictorDecodeTile
LEAF_NODE	141:61	141:61	10	;
LEAF_NODE	142:16	142:16	8	}
SELECTION	151:2	151:34	6	
KEYWORD	151:2	151:2	7	if
LEAF_NODE	151:2	151:2	8	if
LEAF_NODE	151:5	151:5	7	(
CONDITION	151:6	151:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	151:6	151:23	8	tif -> tif_flags & TIFF_SWAB
FIELD	151:6	151:11	9	tif -> tif_flags
LEAF_NODE	151:6	151:6	10	tif
LEAF_NODE	151:9	151:9	10	->
LEAF_NODE	151:11	151:11	10	tif_flags
LEAF_NODE	151:21	151:21	9	&
FIELD	151:23	151:23	9	TIFF_SWAB
LEAF_NODE	151:23	151:23	10	TIFF_SWAB
LEAF_NODE	151:32	151:32	7	)
STATEMENTS	151:34	159:2	7	
LEAF_NODE	151:34	151:34	8	{
STATEMENTS	152:3	155:14	8	
SELECTION	152:3	152:36	9	
KEYWORD	152:3	152:3	10	if
LEAF_NODE	152:3	152:3	11	if
LEAF_NODE	152:6	152:6	10	(
CONDITION	152:7	152:7	10	sp -> decodepfunc == horAcc16
EXPR	152:7	152:26	11	sp -> decodepfunc == horAcc16
FIELD	152:7	152:11	12	sp -> decodepfunc
LEAF_NODE	152:7	152:7	13	sp
LEAF_NODE	152:9	152:9	13	->
LEAF_NODE	152:11	152:11	13	decodepfunc
EQ_OPERATOR	152:23	152:23	12	==
LEAF_NODE	152:23	152:23	13	==
FIELD	152:26	152:26	12	horAcc16
LEAF_NODE	152:26	152:26	13	horAcc16
LEAF_NODE	152:34	152:34	10	)
STATEMENTS	152:36	155:12	10	
LEAF_NODE	152:36	152:36	11	{
STATEMENTS	153:4	154:4	11	
EXPR_STATEMENT	153:4	153:34	12	sp -> decodepfunc = swabHorAcc16 ;
EXPR	153:4	153:4	13	sp -> decodepfunc = swabHorAcc16
ASSIGN	153:4	153:22	14	sp -> decodepfunc = swabHorAcc16
LVAL	153:4	153:4	15	sp -> decodepfunc
FIELD	153:4	153:8	16	sp -> decodepfunc
LEAF_NODE	153:4	153:4	17	sp
LEAF_NODE	153:6	153:6	17	->
LEAF_NODE	153:8	153:8	17	decodepfunc
ASSIGN_OP	153:20	153:20	15	=
LEAF_NODE	153:20	153:20	16	=
RVAL	153:22	153:22	15	swabHorAcc16
FIELD	153:22	153:22	16	swabHorAcc16
LEAF_NODE	153:22	153:22	17	swabHorAcc16
LEAF_NODE	153:34	153:34	13	;
EXPR_STATEMENT	154:4	154:43	12	tif -> tif_postdecode = _TIFFNoPostDecode ;
EXPR	154:4	154:4	13	tif -> tif_postdecode = _TIFFNoPostDecode
ASSIGN	154:4	154:26	14	tif -> tif_postdecode = _TIFFNoPostDecode
LVAL	154:4	154:4	15	tif -> tif_postdecode
FIELD	154:4	154:9	16	tif -> tif_postdecode
LEAF_NODE	154:4	154:4	17	tif
LEAF_NODE	154:7	154:7	17	->
LEAF_NODE	154:9	154:9	17	tif_postdecode
ASSIGN_OP	154:24	154:24	15	=
LEAF_NODE	154:24	154:24	16	=
RVAL	154:26	154:26	15	_TIFFNoPostDecode
FIELD	154:26	154:26	16	_TIFFNoPostDecode
LEAF_NODE	154:26	154:26	17	_TIFFNoPostDecode
LEAF_NODE	154:43	154:43	13	;
LEAF_NODE	155:12	155:12	11	}
SELECTION	155:14	155:19	9	
KEYWORD	155:14	155:14	10	else
LEAF_NODE	155:14	155:14	11	else
STATEMENTS	155:19	155:19	10	
SELECTION	155:19	155:52	11	
KEYWORD	155:19	155:19	12	if
LEAF_NODE	155:19	155:19	13	if
LEAF_NODE	155:22	155:22	12	(
CONDITION	155:23	155:23	12	sp -> decodepfunc == horAcc32
EXPR	155:23	155:42	13	sp -> decodepfunc == horAcc32
FIELD	155:23	155:27	14	sp -> decodepfunc
LEAF_NODE	155:23	155:23	15	sp
LEAF_NODE	155:25	155:25	15	->
LEAF_NODE	155:27	155:27	15	decodepfunc
EQ_OPERATOR	155:39	155:39	14	==
LEAF_NODE	155:39	155:39	15	==
FIELD	155:42	155:42	14	horAcc32
LEAF_NODE	155:42	155:42	15	horAcc32
LEAF_NODE	155:50	155:50	12	)
STATEMENTS	155:52	158:12	12	
LEAF_NODE	155:52	155:52	13	{
STATEMENTS	156:4	157:4	13	
EXPR_STATEMENT	156:4	156:34	14	sp -> decodepfunc = swabHorAcc32 ;
EXPR	156:4	156:4	15	sp -> decodepfunc = swabHorAcc32
ASSIGN	156:4	156:22	16	sp -> decodepfunc = swabHorAcc32
LVAL	156:4	156:4	17	sp -> decodepfunc
FIELD	156:4	156:8	18	sp -> decodepfunc
LEAF_NODE	156:4	156:4	19	sp
LEAF_NODE	156:6	156:6	19	->
LEAF_NODE	156:8	156:8	19	decodepfunc
ASSIGN_OP	156:20	156:20	17	=
LEAF_NODE	156:20	156:20	18	=
RVAL	156:22	156:22	17	swabHorAcc32
FIELD	156:22	156:22	18	swabHorAcc32
LEAF_NODE	156:22	156:22	19	swabHorAcc32
LEAF_NODE	156:34	156:34	15	;
EXPR_STATEMENT	157:4	157:43	14	tif -> tif_postdecode = _TIFFNoPostDecode ;
EXPR	157:4	157:4	15	tif -> tif_postdecode = _TIFFNoPostDecode
ASSIGN	157:4	157:26	16	tif -> tif_postdecode = _TIFFNoPostDecode
LVAL	157:4	157:4	17	tif -> tif_postdecode
FIELD	157:4	157:9	18	tif -> tif_postdecode
LEAF_NODE	157:4	157:4	19	tif
LEAF_NODE	157:7	157:7	19	->
LEAF_NODE	157:9	157:9	19	tif_postdecode
ASSIGN_OP	157:24	157:24	17	=
LEAF_NODE	157:24	157:24	18	=
RVAL	157:26	157:26	17	_TIFFNoPostDecode
FIELD	157:26	157:26	18	_TIFFNoPostDecode
LEAF_NODE	157:26	157:26	19	_TIFFNoPostDecode
LEAF_NODE	157:43	157:43	15	;
LEAF_NODE	158:12	158:12	13	}
LEAF_NODE	159:2	159:2	8	}
LEAF_NODE	160:1	160:1	5	}
SELECTION	162:1	162:6	3	
KEYWORD	162:1	162:1	4	else
LEAF_NODE	162:1	162:1	5	else
STATEMENTS	162:6	162:6	4	
SELECTION	162:6	162:30	5	
KEYWORD	162:6	162:6	6	if
LEAF_NODE	162:6	162:6	7	if
LEAF_NODE	162:9	162:9	6	(
CONDITION	162:10	162:10	6	sp -> predictor == 3
EXPR	162:10	162:27	7	sp -> predictor == 3
FIELD	162:10	162:14	8	sp -> predictor
LEAF_NODE	162:10	162:10	9	sp
LEAF_NODE	162:12	162:12	9	->
LEAF_NODE	162:14	162:14	9	predictor
EQ_OPERATOR	162:24	162:24	8	==
LEAF_NODE	162:24	162:24	9	==
FIELD	162:27	162:27	8	3
LEAF_NODE	162:27	162:27	9	3
LEAF_NODE	162:28	162:28	6	)
STATEMENTS	162:30	189:1	6	
LEAF_NODE	162:30	162:30	7	{
STATEMENTS	163:2	182:2	7	
EXPR_STATEMENT	163:2	163:25	8	sp -> decodepfunc = fpAcc ;
EXPR	163:2	163:2	9	sp -> decodepfunc = fpAcc
ASSIGN	163:2	163:20	10	sp -> decodepfunc = fpAcc
LVAL	163:2	163:2	11	sp -> decodepfunc
FIELD	163:2	163:6	12	sp -> decodepfunc
LEAF_NODE	163:2	163:2	13	sp
LEAF_NODE	163:4	163:4	13	->
LEAF_NODE	163:6	163:6	13	decodepfunc
ASSIGN_OP	163:18	163:18	11	=
LEAF_NODE	163:18	163:18	12	=
RVAL	163:20	163:20	11	fpAcc
FIELD	163:20	163:20	12	fpAcc
LEAF_NODE	163:20	163:20	13	fpAcc
LEAF_NODE	163:25	163:25	9	;
SELECTION	168:16	169:16	8	
KEYWORD	168:16	168:16	9	if
LEAF_NODE	168:16	168:16	10	if
LEAF_NODE	168:18	168:18	9	(
CONDITION	168:20	168:20	9	tif -> tif_decoderow != PredictorDecodeRow
EXPR	168:20	168:42	10	tif -> tif_decoderow != PredictorDecodeRow
FIELD	168:20	168:25	11	tif -> tif_decoderow
LEAF_NODE	168:20	168:20	12	tif
LEAF_NODE	168:23	168:23	12	->
LEAF_NODE	168:25	168:25	12	tif_decoderow
EQ_OPERATOR	168:39	168:39	11	!=
LEAF_NODE	168:39	168:39	12	!=
FIELD	168:42	168:42	11	PredictorDecodeRow
LEAF_NODE	168:42	168:42	12	PredictorDecodeRow
LEAF_NODE	168:61	168:61	9	)
STATEMENTS	169:16	176:16	9	
LEAF_NODE	169:16	169:16	10	{
STATEMENTS	170:20	175:20	10	
EXPR_STATEMENT	170:20	170:54	11	sp -> decoderow = tif -> tif_decoderow ;
EXPR	170:20	170:20	12	sp -> decoderow = tif -> tif_decoderow
ASSIGN	170:20	170:36	13	sp -> decoderow = tif -> tif_decoderow
LVAL	170:20	170:20	14	sp -> decoderow
FIELD	170:20	170:24	15	sp -> decoderow
LEAF_NODE	170:20	170:20	16	sp
LEAF_NODE	170:22	170:22	16	->
LEAF_NODE	170:24	170:24	16	decoderow
ASSIGN_OP	170:34	170:34	14	=
LEAF_NODE	170:34	170:34	15	=
RVAL	170:36	170:36	14	tif -> tif_decoderow
FIELD	170:36	170:41	15	tif -> tif_decoderow
LEAF_NODE	170:36	170:36	16	tif
LEAF_NODE	170:39	170:39	16	->
LEAF_NODE	170:41	170:41	16	tif_decoderow
LEAF_NODE	170:54	170:54	12	;
EXPR_STATEMENT	171:20	171:59	11	tif -> tif_decoderow = PredictorDecodeRow ;
EXPR	171:20	171:20	12	tif -> tif_decoderow = PredictorDecodeRow
ASSIGN	171:20	171:41	13	tif -> tif_decoderow = PredictorDecodeRow
LVAL	171:20	171:20	14	tif -> tif_decoderow
FIELD	171:20	171:25	15	tif -> tif_decoderow
LEAF_NODE	171:20	171:20	16	tif
LEAF_NODE	171:23	171:23	16	->
LEAF_NODE	171:25	171:25	16	tif_decoderow
ASSIGN_OP	171:39	171:39	14	=
LEAF_NODE	171:39	171:39	15	=
RVAL	171:41	171:41	14	PredictorDecodeRow
FIELD	171:41	171:41	15	PredictorDecodeRow
LEAF_NODE	171:41	171:41	16	PredictorDecodeRow
LEAF_NODE	171:59	171:59	12	;
EXPR_STATEMENT	172:20	172:58	11	sp -> decodestrip = tif -> tif_decodestrip ;
EXPR	172:20	172:20	12	sp -> decodestrip = tif -> tif_decodestrip
ASSIGN	172:20	172:38	13	sp -> decodestrip = tif -> tif_decodestrip
LVAL	172:20	172:20	14	sp -> decodestrip
FIELD	172:20	172:24	15	sp -> decodestrip
LEAF_NODE	172:20	172:20	16	sp
LEAF_NODE	172:22	172:22	16	->
LEAF_NODE	172:24	172:24	16	decodestrip
ASSIGN_OP	172:36	172:36	14	=
LEAF_NODE	172:36	172:36	15	=
RVAL	172:38	172:38	14	tif -> tif_decodestrip
FIELD	172:38	172:43	15	tif -> tif_decodestrip
LEAF_NODE	172:38	172:38	16	tif
LEAF_NODE	172:41	172:41	16	->
LEAF_NODE	172:43	172:43	16	tif_decodestrip
LEAF_NODE	172:58	172:58	12	;
EXPR_STATEMENT	173:20	173:62	11	tif -> tif_decodestrip = PredictorDecodeTile ;
EXPR	173:20	173:20	12	tif -> tif_decodestrip = PredictorDecodeTile
ASSIGN	173:20	173:43	13	tif -> tif_decodestrip = PredictorDecodeTile
LVAL	173:20	173:20	14	tif -> tif_decodestrip
FIELD	173:20	173:25	15	tif -> tif_decodestrip
LEAF_NODE	173:20	173:20	16	tif
LEAF_NODE	173:23	173:23	16	->
LEAF_NODE	173:25	173:25	16	tif_decodestrip
ASSIGN_OP	173:41	173:41	14	=
LEAF_NODE	173:41	173:41	15	=
RVAL	173:43	173:43	14	PredictorDecodeTile
FIELD	173:43	173:43	15	PredictorDecodeTile
LEAF_NODE	173:43	173:43	16	PredictorDecodeTile
LEAF_NODE	173:62	173:62	12	;
EXPR_STATEMENT	174:20	174:56	11	sp -> decodetile = tif -> tif_decodetile ;
EXPR	174:20	174:20	12	sp -> decodetile = tif -> tif_decodetile
ASSIGN	174:20	174:37	13	sp -> decodetile = tif -> tif_decodetile
LVAL	174:20	174:20	14	sp -> decodetile
FIELD	174:20	174:24	15	sp -> decodetile
LEAF_NODE	174:20	174:20	16	sp
LEAF_NODE	174:22	174:22	16	->
LEAF_NODE	174:24	174:24	16	decodetile
ASSIGN_OP	174:35	174:35	14	=
LEAF_NODE	174:35	174:35	15	=
RVAL	174:37	174:37	14	tif -> tif_decodetile
FIELD	174:37	174:42	15	tif -> tif_decodetile
LEAF_NODE	174:37	174:37	16	tif
LEAF_NODE	174:40	174:40	16	->
LEAF_NODE	174:42	174:42	16	tif_decodetile
LEAF_NODE	174:56	174:56	12	;
EXPR_STATEMENT	175:20	175:61	11	tif -> tif_decodetile = PredictorDecodeTile ;
EXPR	175:20	175:20	12	tif -> tif_decodetile = PredictorDecodeTile
ASSIGN	175:20	175:42	13	tif -> tif_decodetile = PredictorDecodeTile
LVAL	175:20	175:20	14	tif -> tif_decodetile
FIELD	175:20	175:25	15	tif -> tif_decodetile
LEAF_NODE	175:20	175:20	16	tif
LEAF_NODE	175:23	175:23	16	->
LEAF_NODE	175:25	175:25	16	tif_decodetile
ASSIGN_OP	175:40	175:40	14	=
LEAF_NODE	175:40	175:40	15	=
RVAL	175:42	175:42	14	PredictorDecodeTile
FIELD	175:42	175:42	15	PredictorDecodeTile
LEAF_NODE	175:42	175:42	16	PredictorDecodeTile
LEAF_NODE	175:61	175:61	12	;
LEAF_NODE	176:16	176:16	10	}
SELECTION	182:2	182:34	8	
KEYWORD	182:2	182:2	9	if
LEAF_NODE	182:2	182:2	10	if
LEAF_NODE	182:5	182:5	9	(
CONDITION	182:6	182:6	9	tif -> tif_flags & TIFF_SWAB
EXPR	182:6	182:23	10	tif -> tif_flags & TIFF_SWAB
FIELD	182:6	182:11	11	tif -> tif_flags
LEAF_NODE	182:6	182:6	12	tif
LEAF_NODE	182:9	182:9	12	->
LEAF_NODE	182:11	182:11	12	tif_flags
LEAF_NODE	182:21	182:21	11	&
FIELD	182:23	182:23	11	TIFF_SWAB
LEAF_NODE	182:23	182:23	12	TIFF_SWAB
LEAF_NODE	182:32	182:32	9	)
STATEMENTS	182:34	184:2	9	
LEAF_NODE	182:34	182:34	10	{
STATEMENTS	183:3	183:3	10	
EXPR_STATEMENT	183:3	183:42	11	tif -> tif_postdecode = _TIFFNoPostDecode ;
EXPR	183:3	183:3	12	tif -> tif_postdecode = _TIFFNoPostDecode
ASSIGN	183:3	183:25	13	tif -> tif_postdecode = _TIFFNoPostDecode
LVAL	183:3	183:3	14	tif -> tif_postdecode
FIELD	183:3	183:8	15	tif -> tif_postdecode
LEAF_NODE	183:3	183:3	16	tif
LEAF_NODE	183:6	183:6	16	->
LEAF_NODE	183:8	183:8	16	tif_postdecode
ASSIGN_OP	183:23	183:23	14	=
LEAF_NODE	183:23	183:23	15	=
RVAL	183:25	183:25	14	_TIFFNoPostDecode
FIELD	183:25	183:25	15	_TIFFNoPostDecode
LEAF_NODE	183:25	183:25	16	_TIFFNoPostDecode
LEAF_NODE	183:42	183:42	12	;
LEAF_NODE	184:2	184:2	10	}
LEAF_NODE	189:1	189:1	7	}
JUMP_STATEMENT	191:1	191:9	3	return 1 ;
KEYWORD	191:1	191:1	4	return
LEAF_NODE	191:1	191:1	5	return
DESTINATION	191:8	191:8	4	1
EXPR	191:8	191:8	5	1
FIELD	191:8	191:8	6	1
LEAF_NODE	191:8	191:8	7	1
LEAF_NODE	191:9	191:9	4	;
LEAF_NODE	192:0	192:0	2	}
FUNCTION_DEF	194:0	259:0	1	
RETURN_TYPE	194:0	194:7	2	static int
LEAF_NODE	194:0	194:0	3	static
TYPE_NAME	194:7	194:7	3	int
LEAF_NODE	194:7	194:7	4	int
FUNCTION_NAME	195:0	195:0	2	PredictorSetupEncode
LEAF_NODE	195:0	195:0	3	PredictorSetupEncode
PARAMETER_LIST	195:20	195:30	2	( TIFF * tif )
LEAF_NODE	195:20	195:20	3	(
PARAMETER_DECL	195:21	195:27	3	TIFF * tif
TYPE	195:21	195:25	4	TIFF *
TYPE_NAME	195:21	195:21	5	TIFF
LEAF_NODE	195:21	195:21	6	TIFF
POINTER	195:25	195:25	5	*
LEAF_NODE	195:25	195:25	6	*
NAME	195:27	195:27	4	tif
LEAF_NODE	195:27	195:27	5	tif
LEAF_NODE	195:30	195:30	3	)
LEAF_NODE	196:0	196:0	2	{
STATEMENTS	197:1	258:1	2	
SIMPLE_DECL	197:1	197:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	197:1	197:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	197:1	197:19	5	TIFFPredictorState *
TYPE_NAME	197:1	197:1	6	TIFFPredictorState
LEAF_NODE	197:1	197:1	7	TIFFPredictorState
POINTER	197:19	197:19	6	*
LEAF_NODE	197:19	197:19	7	*
NAME	197:21	197:21	5	sp
LEAF_NODE	197:21	197:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	197:21	197:21	5	sp = PredictorState ( tif )
ASSIGN	197:21	197:26	6	sp = PredictorState ( tif )
LVAL	197:21	197:21	7	sp
NAME	197:21	197:21	8	sp
LEAF_NODE	197:21	197:21	9	sp
ASSIGN_OP	197:24	197:24	7	=
LEAF_NODE	197:24	197:24	8	=
RVAL	197:26	197:26	7	PredictorState ( tif )
FUNCTION_CALL	197:26	197:44	8	PredictorState ( tif )
CALLEE	197:26	197:26	9	PredictorState
LEAF_NODE	197:26	197:26	10	PredictorState
LEAF_NODE	197:40	197:40	9	(
ARGUMENT	197:41	197:41	9	tif
FIELD	197:41	197:41	10	tif
LEAF_NODE	197:41	197:41	11	tif
LEAF_NODE	197:44	197:44	9	)
LEAF_NODE	197:45	197:45	4	;
SIMPLE_DECL	198:1	198:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	198:1	198:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	198:1	198:14	5	TIFFDirectory *
TYPE_NAME	198:1	198:1	6	TIFFDirectory
LEAF_NODE	198:1	198:1	7	TIFFDirectory
POINTER	198:14	198:14	6	*
LEAF_NODE	198:14	198:14	7	*
NAME	198:16	198:16	5	td
LEAF_NODE	198:16	198:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	198:16	198:16	5	td = & tif -> tif_dir
ASSIGN	198:16	198:21	6	td = & tif -> tif_dir
LVAL	198:16	198:16	7	td
NAME	198:16	198:16	8	td
LEAF_NODE	198:16	198:16	9	td
ASSIGN_OP	198:19	198:19	7	=
LEAF_NODE	198:19	198:19	8	=
RVAL	198:21	198:21	7	& tif -> tif_dir
UNARY_EXPR	198:21	198:22	8	& tif -> tif_dir
UNARY_OPERATOR	198:21	198:21	9	&
LEAF_NODE	198:21	198:21	10	&
FIELD	198:22	198:27	9	tif -> tif_dir
LEAF_NODE	198:22	198:22	10	tif
LEAF_NODE	198:25	198:25	10	->
LEAF_NODE	198:27	198:27	10	tif_dir
LEAF_NODE	198:34	198:34	4	;
SELECTION	200:1	201:2	3	
KEYWORD	200:1	200:1	4	if
LEAF_NODE	200:1	200:1	5	if
LEAF_NODE	200:4	200:4	4	(
CONDITION	200:5	200:5	4	! ( * sp -> setupencode ) ( tif ) || ! PredictorSetup ( tif )
EXPR	200:5	200:5	5	! ( * sp -> setupencode ) ( tif ) || ! PredictorSetup ( tif )
OR	200:5	200:33	6	! ( * sp -> setupencode ) ( tif ) || ! PredictorSetup ( tif )
EXPR	200:5	200:5	7	! ( * sp -> setupencode ) ( tif )
UNARY_EXPR	200:5	200:6	8	! ( * sp -> setupencode ) ( tif )
UNARY_OPERATOR	200:5	200:5	9	!
LEAF_NODE	200:5	200:5	10	!
FUNCTION_CALL	200:6	200:28	9	( * sp -> setupencode ) ( tif )
CALLEE	200:6	200:23	10	( * sp -> setupencode )
LEAF_NODE	200:6	200:6	11	(
UNARY_EXPR	200:7	200:8	11	* sp -> setupencode
UNARY_OPERATOR	200:7	200:7	12	*
LEAF_NODE	200:7	200:7	13	*
FIELD	200:8	200:12	12	sp -> setupencode
LEAF_NODE	200:8	200:8	13	sp
LEAF_NODE	200:10	200:10	13	->
LEAF_NODE	200:12	200:12	13	setupencode
LEAF_NODE	200:23	200:23	11	)
LEAF_NODE	200:24	200:24	10	(
ARGUMENT	200:25	200:25	10	tif
FIELD	200:25	200:25	11	tif
LEAF_NODE	200:25	200:25	12	tif
LEAF_NODE	200:28	200:28	10	)
LEAF_NODE	200:30	200:30	7	||
EXPR	200:33	200:33	7	! PredictorSetup ( tif )
UNARY_EXPR	200:33	200:34	8	! PredictorSetup ( tif )
UNARY_OPERATOR	200:33	200:33	9	!
LEAF_NODE	200:33	200:33	10	!
FUNCTION_CALL	200:34	200:52	9	PredictorSetup ( tif )
CALLEE	200:34	200:34	10	PredictorSetup
LEAF_NODE	200:34	200:34	11	PredictorSetup
LEAF_NODE	200:48	200:48	10	(
ARGUMENT	200:49	200:49	10	tif
FIELD	200:49	200:49	11	tif
LEAF_NODE	200:49	200:49	12	tif
LEAF_NODE	200:52	200:52	10	)
LEAF_NODE	200:53	200:53	4	)
STATEMENTS	201:2	201:2	4	
JUMP_STATEMENT	201:2	201:10	5	return 0 ;
KEYWORD	201:2	201:2	6	return
LEAF_NODE	201:2	201:2	7	return
DESTINATION	201:9	201:9	6	0
EXPR	201:9	201:9	7	0
FIELD	201:9	201:9	8	0
LEAF_NODE	201:9	201:9	9	0
LEAF_NODE	201:10	201:10	6	;
SELECTION	203:1	203:25	3	
KEYWORD	203:1	203:1	4	if
LEAF_NODE	203:1	203:1	5	if
LEAF_NODE	203:4	203:4	4	(
CONDITION	203:5	203:5	4	sp -> predictor == 2
EXPR	203:5	203:22	5	sp -> predictor == 2
FIELD	203:5	203:9	6	sp -> predictor
LEAF_NODE	203:5	203:5	7	sp
LEAF_NODE	203:7	203:7	7	->
LEAF_NODE	203:9	203:9	7	predictor
EQ_OPERATOR	203:19	203:19	6	==
LEAF_NODE	203:19	203:19	7	==
FIELD	203:22	203:22	6	2
LEAF_NODE	203:22	203:22	7	2
LEAF_NODE	203:23	203:23	4	)
STATEMENTS	203:25	239:8	4	
LEAF_NODE	203:25	203:25	5	{
STATEMENTS	204:2	230:16	5	
SELECTION	204:2	204:32	6	
KEYWORD	204:2	204:2	7	switch
LEAF_NODE	204:2	204:2	8	switch
LEAF_NODE	204:9	204:9	7	(
CONDITION	204:10	204:10	7	td -> td_bitspersample
EXPR	204:10	204:10	8	td -> td_bitspersample
FIELD	204:10	204:14	9	td -> td_bitspersample
LEAF_NODE	204:10	204:10	10	td
LEAF_NODE	204:12	204:12	10	->
LEAF_NODE	204:14	204:14	10	td_bitspersample
LEAF_NODE	204:30	204:30	7	)
STATEMENTS	204:32	208:2	7	
LEAF_NODE	204:32	204:32	8	{
STATEMENTS	205:3	207:41	8	
LABEL	205:3	205:9	9	case 8 :
LEAF_NODE	205:3	205:3	10	case
LEAF_NODE	205:8	205:8	10	8
LEAF_NODE	205:9	205:9	10	:
EXPR_STATEMENT	205:12	205:38	9	sp -> encodepfunc = horDiff8 ;
EXPR	205:12	205:12	10	sp -> encodepfunc = horDiff8
ASSIGN	205:12	205:30	11	sp -> encodepfunc = horDiff8
LVAL	205:12	205:12	12	sp -> encodepfunc
FIELD	205:12	205:16	13	sp -> encodepfunc
LEAF_NODE	205:12	205:12	14	sp
LEAF_NODE	205:14	205:14	14	->
LEAF_NODE	205:16	205:16	14	encodepfunc
ASSIGN_OP	205:28	205:28	12	=
LEAF_NODE	205:28	205:28	13	=
RVAL	205:30	205:30	12	horDiff8
FIELD	205:30	205:30	13	horDiff8
LEAF_NODE	205:30	205:30	14	horDiff8
LEAF_NODE	205:38	205:38	10	;
JUMP_STATEMENT	205:40	205:45	9	break DESTINATION ;
KEYWORD	205:40	205:40	10	break
LEAF_NODE	205:40	205:40	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	205:45	205:45	10	;
LABEL	206:3	206:10	9	case 16 :
LEAF_NODE	206:3	206:3	10	case
LEAF_NODE	206:8	206:8	10	16
LEAF_NODE	206:10	206:10	10	:
EXPR_STATEMENT	206:12	206:39	9	sp -> encodepfunc = horDiff16 ;
EXPR	206:12	206:12	10	sp -> encodepfunc = horDiff16
ASSIGN	206:12	206:30	11	sp -> encodepfunc = horDiff16
LVAL	206:12	206:12	12	sp -> encodepfunc
FIELD	206:12	206:16	13	sp -> encodepfunc
LEAF_NODE	206:12	206:12	14	sp
LEAF_NODE	206:14	206:14	14	->
LEAF_NODE	206:16	206:16	14	encodepfunc
ASSIGN_OP	206:28	206:28	12	=
LEAF_NODE	206:28	206:28	13	=
RVAL	206:30	206:30	12	horDiff16
FIELD	206:30	206:30	13	horDiff16
LEAF_NODE	206:30	206:30	14	horDiff16
LEAF_NODE	206:39	206:39	10	;
JUMP_STATEMENT	206:41	206:46	9	break DESTINATION ;
KEYWORD	206:41	206:41	10	break
LEAF_NODE	206:41	206:41	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	206:46	206:46	10	;
LABEL	207:3	207:10	9	case 32 :
LEAF_NODE	207:3	207:3	10	case
LEAF_NODE	207:8	207:8	10	32
LEAF_NODE	207:10	207:10	10	:
EXPR_STATEMENT	207:12	207:39	9	sp -> encodepfunc = horDiff32 ;
EXPR	207:12	207:12	10	sp -> encodepfunc = horDiff32
ASSIGN	207:12	207:30	11	sp -> encodepfunc = horDiff32
LVAL	207:12	207:12	12	sp -> encodepfunc
FIELD	207:12	207:16	13	sp -> encodepfunc
LEAF_NODE	207:12	207:12	14	sp
LEAF_NODE	207:14	207:14	14	->
LEAF_NODE	207:16	207:16	14	encodepfunc
ASSIGN_OP	207:28	207:28	12	=
LEAF_NODE	207:28	207:28	13	=
RVAL	207:30	207:30	12	horDiff32
FIELD	207:30	207:30	13	horDiff32
LEAF_NODE	207:30	207:30	14	horDiff32
LEAF_NODE	207:39	207:39	10	;
JUMP_STATEMENT	207:41	207:46	9	break DESTINATION ;
KEYWORD	207:41	207:41	10	break
LEAF_NODE	207:41	207:41	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	207:46	207:46	10	;
LEAF_NODE	208:2	208:2	8	}
SELECTION	213:16	214:16	6	
KEYWORD	213:16	213:16	7	if
LEAF_NODE	213:16	213:16	8	if
LEAF_NODE	213:18	213:18	7	(
CONDITION	213:20	213:20	7	tif -> tif_encoderow != PredictorEncodeRow
EXPR	213:20	213:42	8	tif -> tif_encoderow != PredictorEncodeRow
FIELD	213:20	213:25	9	tif -> tif_encoderow
LEAF_NODE	213:20	213:20	10	tif
LEAF_NODE	213:23	213:23	10	->
LEAF_NODE	213:25	213:25	10	tif_encoderow
EQ_OPERATOR	213:39	213:39	9	!=
LEAF_NODE	213:39	213:39	10	!=
FIELD	213:42	213:42	9	PredictorEncodeRow
LEAF_NODE	213:42	213:42	10	PredictorEncodeRow
LEAF_NODE	213:61	213:61	7	)
STATEMENTS	214:16	221:16	7	
LEAF_NODE	214:16	214:16	8	{
STATEMENTS	215:20	220:20	8	
EXPR_STATEMENT	215:20	215:54	9	sp -> encoderow = tif -> tif_encoderow ;
EXPR	215:20	215:20	10	sp -> encoderow = tif -> tif_encoderow
ASSIGN	215:20	215:36	11	sp -> encoderow = tif -> tif_encoderow
LVAL	215:20	215:20	12	sp -> encoderow
FIELD	215:20	215:24	13	sp -> encoderow
LEAF_NODE	215:20	215:20	14	sp
LEAF_NODE	215:22	215:22	14	->
LEAF_NODE	215:24	215:24	14	encoderow
ASSIGN_OP	215:34	215:34	12	=
LEAF_NODE	215:34	215:34	13	=
RVAL	215:36	215:36	12	tif -> tif_encoderow
FIELD	215:36	215:41	13	tif -> tif_encoderow
LEAF_NODE	215:36	215:36	14	tif
LEAF_NODE	215:39	215:39	14	->
LEAF_NODE	215:41	215:41	14	tif_encoderow
LEAF_NODE	215:54	215:54	10	;
EXPR_STATEMENT	216:20	216:59	9	tif -> tif_encoderow = PredictorEncodeRow ;
EXPR	216:20	216:20	10	tif -> tif_encoderow = PredictorEncodeRow
ASSIGN	216:20	216:41	11	tif -> tif_encoderow = PredictorEncodeRow
LVAL	216:20	216:20	12	tif -> tif_encoderow
FIELD	216:20	216:25	13	tif -> tif_encoderow
LEAF_NODE	216:20	216:20	14	tif
LEAF_NODE	216:23	216:23	14	->
LEAF_NODE	216:25	216:25	14	tif_encoderow
ASSIGN_OP	216:39	216:39	12	=
LEAF_NODE	216:39	216:39	13	=
RVAL	216:41	216:41	12	PredictorEncodeRow
FIELD	216:41	216:41	13	PredictorEncodeRow
LEAF_NODE	216:41	216:41	14	PredictorEncodeRow
LEAF_NODE	216:59	216:59	10	;
EXPR_STATEMENT	217:20	217:58	9	sp -> encodestrip = tif -> tif_encodestrip ;
EXPR	217:20	217:20	10	sp -> encodestrip = tif -> tif_encodestrip
ASSIGN	217:20	217:38	11	sp -> encodestrip = tif -> tif_encodestrip
LVAL	217:20	217:20	12	sp -> encodestrip
FIELD	217:20	217:24	13	sp -> encodestrip
LEAF_NODE	217:20	217:20	14	sp
LEAF_NODE	217:22	217:22	14	->
LEAF_NODE	217:24	217:24	14	encodestrip
ASSIGN_OP	217:36	217:36	12	=
LEAF_NODE	217:36	217:36	13	=
RVAL	217:38	217:38	12	tif -> tif_encodestrip
FIELD	217:38	217:43	13	tif -> tif_encodestrip
LEAF_NODE	217:38	217:38	14	tif
LEAF_NODE	217:41	217:41	14	->
LEAF_NODE	217:43	217:43	14	tif_encodestrip
LEAF_NODE	217:58	217:58	10	;
EXPR_STATEMENT	218:20	218:62	9	tif -> tif_encodestrip = PredictorEncodeTile ;
EXPR	218:20	218:20	10	tif -> tif_encodestrip = PredictorEncodeTile
ASSIGN	218:20	218:43	11	tif -> tif_encodestrip = PredictorEncodeTile
LVAL	218:20	218:20	12	tif -> tif_encodestrip
FIELD	218:20	218:25	13	tif -> tif_encodestrip
LEAF_NODE	218:20	218:20	14	tif
LEAF_NODE	218:23	218:23	14	->
LEAF_NODE	218:25	218:25	14	tif_encodestrip
ASSIGN_OP	218:41	218:41	12	=
LEAF_NODE	218:41	218:41	13	=
RVAL	218:43	218:43	12	PredictorEncodeTile
FIELD	218:43	218:43	13	PredictorEncodeTile
LEAF_NODE	218:43	218:43	14	PredictorEncodeTile
LEAF_NODE	218:62	218:62	10	;
EXPR_STATEMENT	219:20	219:56	9	sp -> encodetile = tif -> tif_encodetile ;
EXPR	219:20	219:20	10	sp -> encodetile = tif -> tif_encodetile
ASSIGN	219:20	219:37	11	sp -> encodetile = tif -> tif_encodetile
LVAL	219:20	219:20	12	sp -> encodetile
FIELD	219:20	219:24	13	sp -> encodetile
LEAF_NODE	219:20	219:20	14	sp
LEAF_NODE	219:22	219:22	14	->
LEAF_NODE	219:24	219:24	14	encodetile
ASSIGN_OP	219:35	219:35	12	=
LEAF_NODE	219:35	219:35	13	=
RVAL	219:37	219:37	12	tif -> tif_encodetile
FIELD	219:37	219:42	13	tif -> tif_encodetile
LEAF_NODE	219:37	219:37	14	tif
LEAF_NODE	219:40	219:40	14	->
LEAF_NODE	219:42	219:42	14	tif_encodetile
LEAF_NODE	219:56	219:56	10	;
EXPR_STATEMENT	220:20	220:61	9	tif -> tif_encodetile = PredictorEncodeTile ;
EXPR	220:20	220:20	10	tif -> tif_encodetile = PredictorEncodeTile
ASSIGN	220:20	220:42	11	tif -> tif_encodetile = PredictorEncodeTile
LVAL	220:20	220:20	12	tif -> tif_encodetile
FIELD	220:20	220:25	13	tif -> tif_encodetile
LEAF_NODE	220:20	220:20	14	tif
LEAF_NODE	220:23	220:23	14	->
LEAF_NODE	220:25	220:25	14	tif_encodetile
ASSIGN_OP	220:40	220:40	12	=
LEAF_NODE	220:40	220:40	13	=
RVAL	220:42	220:42	12	PredictorEncodeTile
FIELD	220:42	220:42	13	PredictorEncodeTile
LEAF_NODE	220:42	220:42	14	PredictorEncodeTile
LEAF_NODE	220:61	220:61	10	;
LEAF_NODE	221:16	221:16	8	}
SELECTION	230:16	230:48	6	
KEYWORD	230:16	230:16	7	if
LEAF_NODE	230:16	230:16	8	if
LEAF_NODE	230:19	230:19	7	(
CONDITION	230:20	230:20	7	tif -> tif_flags & TIFF_SWAB
EXPR	230:20	230:37	8	tif -> tif_flags & TIFF_SWAB
FIELD	230:20	230:25	9	tif -> tif_flags
LEAF_NODE	230:20	230:20	10	tif
LEAF_NODE	230:23	230:23	10	->
LEAF_NODE	230:25	230:25	10	tif_flags
LEAF_NODE	230:35	230:35	9	&
FIELD	230:37	230:37	9	TIFF_SWAB
LEAF_NODE	230:37	230:37	10	TIFF_SWAB
LEAF_NODE	230:46	230:46	7	)
STATEMENTS	230:48	238:16	7	
LEAF_NODE	230:48	230:48	8	{
STATEMENTS	231:20	234:22	8	
SELECTION	231:20	231:54	9	
KEYWORD	231:20	231:20	10	if
LEAF_NODE	231:20	231:20	11	if
LEAF_NODE	231:23	231:23	10	(
CONDITION	231:24	231:24	10	sp -> encodepfunc == horDiff16
EXPR	231:24	231:43	11	sp -> encodepfunc == horDiff16
FIELD	231:24	231:28	12	sp -> encodepfunc
LEAF_NODE	231:24	231:24	13	sp
LEAF_NODE	231:26	231:26	13	->
LEAF_NODE	231:28	231:28	13	encodepfunc
EQ_OPERATOR	231:40	231:40	12	==
LEAF_NODE	231:40	231:40	13	==
FIELD	231:43	231:43	12	horDiff16
LEAF_NODE	231:43	231:43	13	horDiff16
LEAF_NODE	231:52	231:52	10	)
STATEMENTS	231:54	234:20	10	
LEAF_NODE	231:54	231:54	11	{
STATEMENTS	232:28	233:28	11	
EXPR_STATEMENT	232:28	232:59	12	sp -> encodepfunc = swabHorDiff16 ;
EXPR	232:28	232:28	13	sp -> encodepfunc = swabHorDiff16
ASSIGN	232:28	232:46	14	sp -> encodepfunc = swabHorDiff16
LVAL	232:28	232:28	15	sp -> encodepfunc
FIELD	232:28	232:32	16	sp -> encodepfunc
LEAF_NODE	232:28	232:28	17	sp
LEAF_NODE	232:30	232:30	17	->
LEAF_NODE	232:32	232:32	17	encodepfunc
ASSIGN_OP	232:44	232:44	15	=
LEAF_NODE	232:44	232:44	16	=
RVAL	232:46	232:46	15	swabHorDiff16
FIELD	232:46	232:46	16	swabHorDiff16
LEAF_NODE	232:46	232:46	17	swabHorDiff16
LEAF_NODE	232:59	232:59	13	;
EXPR_STATEMENT	233:28	233:67	12	tif -> tif_postdecode = _TIFFNoPostDecode ;
EXPR	233:28	233:28	13	tif -> tif_postdecode = _TIFFNoPostDecode
ASSIGN	233:28	233:50	14	tif -> tif_postdecode = _TIFFNoPostDecode
LVAL	233:28	233:28	15	tif -> tif_postdecode
FIELD	233:28	233:33	16	tif -> tif_postdecode
LEAF_NODE	233:28	233:28	17	tif
LEAF_NODE	233:31	233:31	17	->
LEAF_NODE	233:33	233:33	17	tif_postdecode
ASSIGN_OP	233:48	233:48	15	=
LEAF_NODE	233:48	233:48	16	=
RVAL	233:50	233:50	15	_TIFFNoPostDecode
FIELD	233:50	233:50	16	_TIFFNoPostDecode
LEAF_NODE	233:50	233:50	17	_TIFFNoPostDecode
LEAF_NODE	233:67	233:67	13	;
LEAF_NODE	234:20	234:20	11	}
SELECTION	234:22	234:27	9	
KEYWORD	234:22	234:22	10	else
LEAF_NODE	234:22	234:22	11	else
STATEMENTS	234:27	234:27	10	
SELECTION	234:27	234:61	11	
KEYWORD	234:27	234:27	12	if
LEAF_NODE	234:27	234:27	13	if
LEAF_NODE	234:30	234:30	12	(
CONDITION	234:31	234:31	12	sp -> encodepfunc == horDiff32
EXPR	234:31	234:50	13	sp -> encodepfunc == horDiff32
FIELD	234:31	234:35	14	sp -> encodepfunc
LEAF_NODE	234:31	234:31	15	sp
LEAF_NODE	234:33	234:33	15	->
LEAF_NODE	234:35	234:35	15	encodepfunc
EQ_OPERATOR	234:47	234:47	14	==
LEAF_NODE	234:47	234:47	15	==
FIELD	234:50	234:50	14	horDiff32
LEAF_NODE	234:50	234:50	15	horDiff32
LEAF_NODE	234:59	234:59	12	)
STATEMENTS	234:61	237:20	12	
LEAF_NODE	234:61	234:61	13	{
STATEMENTS	235:28	236:28	13	
EXPR_STATEMENT	235:28	235:59	14	sp -> encodepfunc = swabHorDiff32 ;
EXPR	235:28	235:28	15	sp -> encodepfunc = swabHorDiff32
ASSIGN	235:28	235:46	16	sp -> encodepfunc = swabHorDiff32
LVAL	235:28	235:28	17	sp -> encodepfunc
FIELD	235:28	235:32	18	sp -> encodepfunc
LEAF_NODE	235:28	235:28	19	sp
LEAF_NODE	235:30	235:30	19	->
LEAF_NODE	235:32	235:32	19	encodepfunc
ASSIGN_OP	235:44	235:44	17	=
LEAF_NODE	235:44	235:44	18	=
RVAL	235:46	235:46	17	swabHorDiff32
FIELD	235:46	235:46	18	swabHorDiff32
LEAF_NODE	235:46	235:46	19	swabHorDiff32
LEAF_NODE	235:59	235:59	15	;
EXPR_STATEMENT	236:28	236:67	14	tif -> tif_postdecode = _TIFFNoPostDecode ;
EXPR	236:28	236:28	15	tif -> tif_postdecode = _TIFFNoPostDecode
ASSIGN	236:28	236:50	16	tif -> tif_postdecode = _TIFFNoPostDecode
LVAL	236:28	236:28	17	tif -> tif_postdecode
FIELD	236:28	236:33	18	tif -> tif_postdecode
LEAF_NODE	236:28	236:28	19	tif
LEAF_NODE	236:31	236:31	19	->
LEAF_NODE	236:33	236:33	19	tif_postdecode
ASSIGN_OP	236:48	236:48	17	=
LEAF_NODE	236:48	236:48	18	=
RVAL	236:50	236:50	17	_TIFFNoPostDecode
FIELD	236:50	236:50	18	_TIFFNoPostDecode
LEAF_NODE	236:50	236:50	19	_TIFFNoPostDecode
LEAF_NODE	236:67	236:67	15	;
LEAF_NODE	237:20	237:20	13	}
LEAF_NODE	238:16	238:16	8	}
LEAF_NODE	239:8	239:8	5	}
SELECTION	241:1	241:6	3	
KEYWORD	241:1	241:1	4	else
LEAF_NODE	241:1	241:1	5	else
STATEMENTS	241:6	241:6	4	
SELECTION	241:6	241:30	5	
KEYWORD	241:6	241:6	6	if
LEAF_NODE	241:6	241:6	7	if
LEAF_NODE	241:9	241:9	6	(
CONDITION	241:10	241:10	6	sp -> predictor == 3
EXPR	241:10	241:27	7	sp -> predictor == 3
FIELD	241:10	241:14	8	sp -> predictor
LEAF_NODE	241:10	241:10	9	sp
LEAF_NODE	241:12	241:12	9	->
LEAF_NODE	241:14	241:14	9	predictor
EQ_OPERATOR	241:24	241:24	8	==
LEAF_NODE	241:24	241:24	9	==
FIELD	241:27	241:27	8	3
LEAF_NODE	241:27	241:27	9	3
LEAF_NODE	241:28	241:28	6	)
STATEMENTS	241:30	256:1	6	
LEAF_NODE	241:30	241:30	7	{
STATEMENTS	242:2	247:16	7	
EXPR_STATEMENT	242:2	242:26	8	sp -> encodepfunc = fpDiff ;
EXPR	242:2	242:2	9	sp -> encodepfunc = fpDiff
ASSIGN	242:2	242:20	10	sp -> encodepfunc = fpDiff
LVAL	242:2	242:2	11	sp -> encodepfunc
FIELD	242:2	242:6	12	sp -> encodepfunc
LEAF_NODE	242:2	242:2	13	sp
LEAF_NODE	242:4	242:4	13	->
LEAF_NODE	242:6	242:6	13	encodepfunc
ASSIGN_OP	242:18	242:18	11	=
LEAF_NODE	242:18	242:18	12	=
RVAL	242:20	242:20	11	fpDiff
FIELD	242:20	242:20	12	fpDiff
LEAF_NODE	242:20	242:20	13	fpDiff
LEAF_NODE	242:26	242:26	9	;
SELECTION	247:16	248:16	8	
KEYWORD	247:16	247:16	9	if
LEAF_NODE	247:16	247:16	10	if
LEAF_NODE	247:18	247:18	9	(
CONDITION	247:20	247:20	9	tif -> tif_encoderow != PredictorEncodeRow
EXPR	247:20	247:42	10	tif -> tif_encoderow != PredictorEncodeRow
FIELD	247:20	247:25	11	tif -> tif_encoderow
LEAF_NODE	247:20	247:20	12	tif
LEAF_NODE	247:23	247:23	12	->
LEAF_NODE	247:25	247:25	12	tif_encoderow
EQ_OPERATOR	247:39	247:39	11	!=
LEAF_NODE	247:39	247:39	12	!=
FIELD	247:42	247:42	11	PredictorEncodeRow
LEAF_NODE	247:42	247:42	12	PredictorEncodeRow
LEAF_NODE	247:61	247:61	9	)
STATEMENTS	248:16	255:16	9	
LEAF_NODE	248:16	248:16	10	{
STATEMENTS	249:20	254:20	10	
EXPR_STATEMENT	249:20	249:54	11	sp -> encoderow = tif -> tif_encoderow ;
EXPR	249:20	249:20	12	sp -> encoderow = tif -> tif_encoderow
ASSIGN	249:20	249:36	13	sp -> encoderow = tif -> tif_encoderow
LVAL	249:20	249:20	14	sp -> encoderow
FIELD	249:20	249:24	15	sp -> encoderow
LEAF_NODE	249:20	249:20	16	sp
LEAF_NODE	249:22	249:22	16	->
LEAF_NODE	249:24	249:24	16	encoderow
ASSIGN_OP	249:34	249:34	14	=
LEAF_NODE	249:34	249:34	15	=
RVAL	249:36	249:36	14	tif -> tif_encoderow
FIELD	249:36	249:41	15	tif -> tif_encoderow
LEAF_NODE	249:36	249:36	16	tif
LEAF_NODE	249:39	249:39	16	->
LEAF_NODE	249:41	249:41	16	tif_encoderow
LEAF_NODE	249:54	249:54	12	;
EXPR_STATEMENT	250:20	250:59	11	tif -> tif_encoderow = PredictorEncodeRow ;
EXPR	250:20	250:20	12	tif -> tif_encoderow = PredictorEncodeRow
ASSIGN	250:20	250:41	13	tif -> tif_encoderow = PredictorEncodeRow
LVAL	250:20	250:20	14	tif -> tif_encoderow
FIELD	250:20	250:25	15	tif -> tif_encoderow
LEAF_NODE	250:20	250:20	16	tif
LEAF_NODE	250:23	250:23	16	->
LEAF_NODE	250:25	250:25	16	tif_encoderow
ASSIGN_OP	250:39	250:39	14	=
LEAF_NODE	250:39	250:39	15	=
RVAL	250:41	250:41	14	PredictorEncodeRow
FIELD	250:41	250:41	15	PredictorEncodeRow
LEAF_NODE	250:41	250:41	16	PredictorEncodeRow
LEAF_NODE	250:59	250:59	12	;
EXPR_STATEMENT	251:20	251:58	11	sp -> encodestrip = tif -> tif_encodestrip ;
EXPR	251:20	251:20	12	sp -> encodestrip = tif -> tif_encodestrip
ASSIGN	251:20	251:38	13	sp -> encodestrip = tif -> tif_encodestrip
LVAL	251:20	251:20	14	sp -> encodestrip
FIELD	251:20	251:24	15	sp -> encodestrip
LEAF_NODE	251:20	251:20	16	sp
LEAF_NODE	251:22	251:22	16	->
LEAF_NODE	251:24	251:24	16	encodestrip
ASSIGN_OP	251:36	251:36	14	=
LEAF_NODE	251:36	251:36	15	=
RVAL	251:38	251:38	14	tif -> tif_encodestrip
FIELD	251:38	251:43	15	tif -> tif_encodestrip
LEAF_NODE	251:38	251:38	16	tif
LEAF_NODE	251:41	251:41	16	->
LEAF_NODE	251:43	251:43	16	tif_encodestrip
LEAF_NODE	251:58	251:58	12	;
EXPR_STATEMENT	252:20	252:62	11	tif -> tif_encodestrip = PredictorEncodeTile ;
EXPR	252:20	252:20	12	tif -> tif_encodestrip = PredictorEncodeTile
ASSIGN	252:20	252:43	13	tif -> tif_encodestrip = PredictorEncodeTile
LVAL	252:20	252:20	14	tif -> tif_encodestrip
FIELD	252:20	252:25	15	tif -> tif_encodestrip
LEAF_NODE	252:20	252:20	16	tif
LEAF_NODE	252:23	252:23	16	->
LEAF_NODE	252:25	252:25	16	tif_encodestrip
ASSIGN_OP	252:41	252:41	14	=
LEAF_NODE	252:41	252:41	15	=
RVAL	252:43	252:43	14	PredictorEncodeTile
FIELD	252:43	252:43	15	PredictorEncodeTile
LEAF_NODE	252:43	252:43	16	PredictorEncodeTile
LEAF_NODE	252:62	252:62	12	;
EXPR_STATEMENT	253:20	253:56	11	sp -> encodetile = tif -> tif_encodetile ;
EXPR	253:20	253:20	12	sp -> encodetile = tif -> tif_encodetile
ASSIGN	253:20	253:37	13	sp -> encodetile = tif -> tif_encodetile
LVAL	253:20	253:20	14	sp -> encodetile
FIELD	253:20	253:24	15	sp -> encodetile
LEAF_NODE	253:20	253:20	16	sp
LEAF_NODE	253:22	253:22	16	->
LEAF_NODE	253:24	253:24	16	encodetile
ASSIGN_OP	253:35	253:35	14	=
LEAF_NODE	253:35	253:35	15	=
RVAL	253:37	253:37	14	tif -> tif_encodetile
FIELD	253:37	253:42	15	tif -> tif_encodetile
LEAF_NODE	253:37	253:37	16	tif
LEAF_NODE	253:40	253:40	16	->
LEAF_NODE	253:42	253:42	16	tif_encodetile
LEAF_NODE	253:56	253:56	12	;
EXPR_STATEMENT	254:20	254:61	11	tif -> tif_encodetile = PredictorEncodeTile ;
EXPR	254:20	254:20	12	tif -> tif_encodetile = PredictorEncodeTile
ASSIGN	254:20	254:42	13	tif -> tif_encodetile = PredictorEncodeTile
LVAL	254:20	254:20	14	tif -> tif_encodetile
FIELD	254:20	254:25	15	tif -> tif_encodetile
LEAF_NODE	254:20	254:20	16	tif
LEAF_NODE	254:23	254:23	16	->
LEAF_NODE	254:25	254:25	16	tif_encodetile
ASSIGN_OP	254:40	254:40	14	=
LEAF_NODE	254:40	254:40	15	=
RVAL	254:42	254:42	14	PredictorEncodeTile
FIELD	254:42	254:42	15	PredictorEncodeTile
LEAF_NODE	254:42	254:42	16	PredictorEncodeTile
LEAF_NODE	254:61	254:61	12	;
LEAF_NODE	255:16	255:16	10	}
LEAF_NODE	256:1	256:1	7	}
JUMP_STATEMENT	258:1	258:9	3	return 1 ;
KEYWORD	258:1	258:1	4	return
LEAF_NODE	258:1	258:1	5	return
DESTINATION	258:8	258:8	4	1
EXPR	258:8	258:8	5	1
FIELD	258:8	258:8	6	1
LEAF_NODE	258:8	258:8	7	1
LEAF_NODE	258:9	258:9	4	;
LEAF_NODE	259:0	259:0	2	}
FUNCTION_DEF	279:0	334:0	1	
RETURN_TYPE	279:0	279:7	2	static int
LEAF_NODE	279:0	279:0	3	static
TYPE_NAME	279:7	279:7	3	int
LEAF_NODE	279:7	279:7	4	int
FUNCTION_NAME	280:0	280:0	2	horAcc8
LEAF_NODE	280:0	280:0	3	horAcc8
PARAMETER_LIST	280:7	280:42	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	280:7	280:7	3	(
PARAMETER_DECL	280:8	280:14	3	TIFF * tif
TYPE	280:8	280:12	4	TIFF *
TYPE_NAME	280:8	280:8	5	TIFF
LEAF_NODE	280:8	280:8	6	TIFF
POINTER	280:12	280:12	5	*
LEAF_NODE	280:12	280:12	6	*
NAME	280:14	280:14	4	tif
LEAF_NODE	280:14	280:14	5	tif
LEAF_NODE	280:17	280:17	3	,
PARAMETER_DECL	280:19	280:26	3	uint8 * cp0
TYPE	280:19	280:24	4	uint8 *
TYPE_NAME	280:19	280:19	5	uint8
LEAF_NODE	280:19	280:19	6	uint8
POINTER	280:24	280:24	5	*
LEAF_NODE	280:24	280:24	6	*
NAME	280:26	280:26	4	cp0
LEAF_NODE	280:26	280:26	5	cp0
LEAF_NODE	280:29	280:29	3	,
PARAMETER_DECL	280:31	280:40	3	tmsize_t cc
TYPE	280:31	280:31	4	tmsize_t
TYPE_NAME	280:31	280:31	5	tmsize_t
LEAF_NODE	280:31	280:31	6	tmsize_t
NAME	280:40	280:40	4	cc
LEAF_NODE	280:40	280:40	5	cc
LEAF_NODE	280:42	280:42	3	)
LEAF_NODE	281:0	281:0	2	{
STATEMENTS	282:1	333:1	2	
SIMPLE_DECL	282:1	282:46	3	tmsize_t stride ; stride = PredictorState ( tif ) -> stride ;
VAR_DECL	282:1	282:10	4	tmsize_t stride ; stride = PredictorState ( tif ) -> stride
TYPE	282:1	282:1	5	tmsize_t
TYPE_NAME	282:1	282:1	6	tmsize_t
LEAF_NODE	282:1	282:1	7	tmsize_t
NAME	282:10	282:10	5	stride
LEAF_NODE	282:10	282:10	6	stride
LEAF_NODE	0:0	0:0	5	;
INIT	282:10	282:10	5	stride = PredictorState ( tif ) -> stride
ASSIGN	282:10	282:19	6	stride = PredictorState ( tif ) -> stride
LVAL	282:10	282:10	7	stride
NAME	282:10	282:10	8	stride
LEAF_NODE	282:10	282:10	9	stride
ASSIGN_OP	282:17	282:17	7	=
LEAF_NODE	282:17	282:17	8	=
RVAL	282:19	282:40	7	PredictorState ( tif ) -> stride
FUNCTION_CALL	282:19	282:37	8	PredictorState ( tif )
CALLEE	282:19	282:19	9	PredictorState
LEAF_NODE	282:19	282:19	10	PredictorState
LEAF_NODE	282:33	282:33	9	(
ARGUMENT	282:34	282:34	9	tif
FIELD	282:34	282:34	10	tif
LEAF_NODE	282:34	282:34	11	tif
LEAF_NODE	282:37	282:37	9	)
LEAF_NODE	282:38	282:38	8	->
LEAF_NODE	282:40	282:40	8	stride
LEAF_NODE	282:46	282:46	4	;
SIMPLE_DECL	284:1	284:41	3	unsigned char * cp ; cp = ( unsigned char * ) cp0 ;
VAR_DECL	284:1	284:16	4	unsigned char * cp ; cp = ( unsigned char * ) cp0
TYPE	284:1	284:14	5	unsigned char *
TYPE_NAME	284:1	284:10	6	unsigned char
LEAF_NODE	284:1	284:1	7	unsigned
LEAF_NODE	284:10	284:10	7	char
POINTER	284:14	284:14	6	*
LEAF_NODE	284:14	284:14	7	*
NAME	284:16	284:16	5	cp
LEAF_NODE	284:16	284:16	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	284:16	284:16	5	cp = ( unsigned char * ) cp0
ASSIGN	284:16	284:21	6	cp = ( unsigned char * ) cp0
LVAL	284:16	284:16	7	cp
NAME	284:16	284:16	8	cp
LEAF_NODE	284:16	284:16	9	cp
ASSIGN_OP	284:19	284:19	7	=
LEAF_NODE	284:19	284:19	8	=
RVAL	284:21	284:38	7	( unsigned char * ) cp0
LEAF_NODE	284:21	284:21	8	(
TYPE_NAME	284:22	284:31	8	unsigned char
LEAF_NODE	284:22	284:22	9	unsigned
LEAF_NODE	284:31	284:31	9	char
LEAF_NODE	284:35	284:35	8	*
LEAF_NODE	284:36	284:36	8	)
FIELD	284:38	284:38	8	cp0
LEAF_NODE	284:38	284:38	9	cp0
LEAF_NODE	284:41	284:41	4	;
SELECTION	285:4	286:4	3	
KEYWORD	285:4	285:4	4	if
LEAF_NODE	285:4	285:4	5	if
LEAF_NODE	285:6	285:6	4	(
CONDITION	285:7	285:7	4	( cc % stride ) != 0
EXPR	285:7	285:20	5	( cc % stride ) != 0
LEAF_NODE	285:7	285:7	6	(
FIELD	285:8	285:8	6	cc
LEAF_NODE	285:8	285:8	7	cc
LEAF_NODE	285:10	285:10	6	%
FIELD	285:11	285:11	6	stride
LEAF_NODE	285:11	285:11	7	stride
LEAF_NODE	285:17	285:17	6	)
EQ_OPERATOR	285:18	285:18	6	!=
LEAF_NODE	285:18	285:18	7	!=
FIELD	285:20	285:20	6	0
LEAF_NODE	285:20	285:20	7	0
LEAF_NODE	285:21	285:21	4	)
STATEMENTS	286:4	290:4	4	
LEAF_NODE	286:4	286:4	5	{
STATEMENTS	287:8	289:8	5	
EXPR_STATEMENT	287:8	288:44	6	TIFFErrorExt ( tif -> tif_clientdata , "horAcc8" , "%s" , "(cc%stride)!=0" ) ;
EXPR	287:8	287:8	7	TIFFErrorExt ( tif -> tif_clientdata , "horAcc8" , "%s" , "(cc%stride)!=0" )
FUNCTION_CALL	287:8	288:43	8	TIFFErrorExt ( tif -> tif_clientdata , "horAcc8" , "%s" , "(cc%stride)!=0" )
CALLEE	287:8	287:8	9	TIFFErrorExt
LEAF_NODE	287:8	287:8	10	TIFFErrorExt
LEAF_NODE	287:20	287:20	9	(
ARGUMENT	287:21	287:21	9	tif -> tif_clientdata
FIELD	287:21	287:26	10	tif -> tif_clientdata
LEAF_NODE	287:21	287:21	11	tif
LEAF_NODE	287:24	287:24	11	->
LEAF_NODE	287:26	287:26	11	tif_clientdata
LEAF_NODE	287:40	287:40	9	,
ARGUMENT	287:42	287:42	9	"horAcc8"
FIELD	287:42	287:42	10	"horAcc8"
LEAF_NODE	287:42	287:42	11	"horAcc8"
LEAF_NODE	287:51	287:51	9	,
ARGUMENT	288:21	288:21	9	"%s"
FIELD	288:21	288:21	10	"%s"
LEAF_NODE	288:21	288:21	11	"%s"
LEAF_NODE	288:25	288:25	9	,
ARGUMENT	288:27	288:27	9	"(cc%stride)!=0"
FIELD	288:27	288:27	10	"(cc%stride)!=0"
LEAF_NODE	288:27	288:27	11	"(cc%stride)!=0"
LEAF_NODE	288:43	288:43	9	)
LEAF_NODE	288:44	288:44	7	;
JUMP_STATEMENT	289:8	289:16	6	return 0 ;
KEYWORD	289:8	289:8	7	return
LEAF_NODE	289:8	289:8	8	return
DESTINATION	289:15	289:15	7	0
EXPR	289:15	289:15	8	0
FIELD	289:15	289:15	9	0
LEAF_NODE	289:15	289:15	10	0
LEAF_NODE	289:16	289:16	7	;
LEAF_NODE	290:4	290:4	5	}
SELECTION	292:1	292:18	3	
KEYWORD	292:1	292:1	4	if
LEAF_NODE	292:1	292:1	5	if
LEAF_NODE	292:4	292:4	4	(
CONDITION	292:5	292:5	4	cc > stride
EXPR	292:5	292:10	5	cc > stride
FIELD	292:5	292:5	6	cc
LEAF_NODE	292:5	292:5	7	cc
REL_OPERATOR	292:8	292:8	6	>
LEAF_NODE	292:8	292:8	7	>
FIELD	292:10	292:10	6	stride
LEAF_NODE	292:10	292:10	7	stride
LEAF_NODE	292:16	292:16	4	)
STATEMENTS	292:18	332:1	4	
LEAF_NODE	292:18	292:18	5	{
STATEMENTS	296:2	324:4	5	
SELECTION	296:2	296:20	6	
KEYWORD	296:2	296:2	7	if
LEAF_NODE	296:2	296:2	8	if
LEAF_NODE	296:5	296:5	7	(
CONDITION	296:6	296:6	7	stride == 3
EXPR	296:6	296:16	8	stride == 3
FIELD	296:6	296:6	9	stride
LEAF_NODE	296:6	296:6	10	stride
EQ_OPERATOR	296:13	296:13	9	==
LEAF_NODE	296:13	296:13	10	==
FIELD	296:16	296:16	9	3
LEAF_NODE	296:16	296:16	10	3
LEAF_NODE	296:17	296:17	7	)
STATEMENTS	296:20	309:2	7	
LEAF_NODE	296:20	296:20	8	{
STATEMENTS	297:3	302:3	8	
SIMPLE_DECL	297:3	297:26	9	unsigned int cr ; cr = cp [ 0 ] ;
VAR_DECL	297:3	297:16	10	unsigned int cr ; cr = cp [ 0 ]
TYPE	297:3	297:3	11	unsigned int
TYPE_NAME	297:3	297:12	12	unsigned int
LEAF_NODE	297:3	297:3	13	unsigned
LEAF_NODE	297:12	297:12	13	int
NAME	297:16	297:16	11	cr
LEAF_NODE	297:16	297:16	12	cr
LEAF_NODE	0:0	0:0	11	;
INIT	297:16	297:16	11	cr = cp [ 0 ]
ASSIGN	297:16	297:21	12	cr = cp [ 0 ]
LVAL	297:16	297:16	13	cr
NAME	297:16	297:16	14	cr
LEAF_NODE	297:16	297:16	15	cr
ASSIGN_OP	297:19	297:19	13	=
LEAF_NODE	297:19	297:19	14	=
RVAL	297:21	297:21	13	cp [ 0 ]
FIELD	297:21	297:25	14	cp [ 0 ]
LEAF_NODE	297:21	297:21	15	cp
LEAF_NODE	297:23	297:23	15	[
EXPR	297:24	297:24	15	0
FIELD	297:24	297:24	16	0
LEAF_NODE	297:24	297:24	17	0
LEAF_NODE	297:25	297:25	15	]
LEAF_NODE	297:26	297:26	10	;
SIMPLE_DECL	298:3	298:26	9	unsigned int cg ; cg = cp [ 1 ] ;
VAR_DECL	298:3	298:16	10	unsigned int cg ; cg = cp [ 1 ]
TYPE	298:3	298:3	11	unsigned int
TYPE_NAME	298:3	298:12	12	unsigned int
LEAF_NODE	298:3	298:3	13	unsigned
LEAF_NODE	298:12	298:12	13	int
NAME	298:16	298:16	11	cg
LEAF_NODE	298:16	298:16	12	cg
LEAF_NODE	0:0	0:0	11	;
INIT	298:16	298:16	11	cg = cp [ 1 ]
ASSIGN	298:16	298:21	12	cg = cp [ 1 ]
LVAL	298:16	298:16	13	cg
NAME	298:16	298:16	14	cg
LEAF_NODE	298:16	298:16	15	cg
ASSIGN_OP	298:19	298:19	13	=
LEAF_NODE	298:19	298:19	14	=
RVAL	298:21	298:21	13	cp [ 1 ]
FIELD	298:21	298:25	14	cp [ 1 ]
LEAF_NODE	298:21	298:21	15	cp
LEAF_NODE	298:23	298:23	15	[
EXPR	298:24	298:24	15	1
FIELD	298:24	298:24	16	1
LEAF_NODE	298:24	298:24	17	1
LEAF_NODE	298:25	298:25	15	]
LEAF_NODE	298:26	298:26	10	;
SIMPLE_DECL	299:3	299:26	9	unsigned int cb ; cb = cp [ 2 ] ;
VAR_DECL	299:3	299:16	10	unsigned int cb ; cb = cp [ 2 ]
TYPE	299:3	299:3	11	unsigned int
TYPE_NAME	299:3	299:12	12	unsigned int
LEAF_NODE	299:3	299:3	13	unsigned
LEAF_NODE	299:12	299:12	13	int
NAME	299:16	299:16	11	cb
LEAF_NODE	299:16	299:16	12	cb
LEAF_NODE	0:0	0:0	11	;
INIT	299:16	299:16	11	cb = cp [ 2 ]
ASSIGN	299:16	299:21	12	cb = cp [ 2 ]
LVAL	299:16	299:16	13	cb
NAME	299:16	299:16	14	cb
LEAF_NODE	299:16	299:16	15	cb
ASSIGN_OP	299:19	299:19	13	=
LEAF_NODE	299:19	299:19	14	=
RVAL	299:21	299:21	13	cp [ 2 ]
FIELD	299:21	299:25	14	cp [ 2 ]
LEAF_NODE	299:21	299:21	15	cp
LEAF_NODE	299:23	299:23	15	[
EXPR	299:24	299:24	15	2
FIELD	299:24	299:24	16	2
LEAF_NODE	299:24	299:24	17	2
LEAF_NODE	299:25	299:25	15	]
LEAF_NODE	299:26	299:26	10	;
EXPR_STATEMENT	300:3	300:10	9	cc -= 3 ;
EXPR	300:3	300:3	10	cc -= 3
ASSIGN	300:3	300:9	11	cc -= 3
LVAL	300:3	300:3	12	cc
FIELD	300:3	300:3	13	cc
LEAF_NODE	300:3	300:3	14	cc
ASSIGN_OP	300:6	300:6	12	-=
LEAF_NODE	300:6	300:6	13	-=
RVAL	300:9	300:9	12	3
FIELD	300:9	300:9	13	3
LEAF_NODE	300:9	300:9	14	3
LEAF_NODE	300:10	300:10	10	;
EXPR_STATEMENT	301:3	301:10	9	cp += 3 ;
EXPR	301:3	301:3	10	cp += 3
ASSIGN	301:3	301:9	11	cp += 3
LVAL	301:3	301:3	12	cp
FIELD	301:3	301:3	13	cp
LEAF_NODE	301:3	301:3	14	cp
ASSIGN_OP	301:6	301:6	12	+=
LEAF_NODE	301:6	301:6	13	+=
RVAL	301:9	301:9	12	3
FIELD	301:9	301:9	13	3
LEAF_NODE	301:9	301:9	14	3
LEAF_NODE	301:10	301:10	10	;
ITERATION	302:3	302:16	9	
KEYWORD	302:3	302:3	10	while
LEAF_NODE	302:3	302:3	11	while
LEAF_NODE	302:9	302:9	10	(
CONDITION	302:10	302:10	10	cc > 0
EXPR	302:10	302:13	11	cc > 0
FIELD	302:10	302:10	12	cc
LEAF_NODE	302:10	302:10	13	cc
REL_OPERATOR	302:12	302:12	12	>
LEAF_NODE	302:12	302:12	13	>
FIELD	302:13	302:13	12	0
LEAF_NODE	302:13	302:13	13	0
LEAF_NODE	302:14	302:14	10	)
STATEMENTS	302:16	308:3	10	
LEAF_NODE	302:16	302:16	11	{
STATEMENTS	303:4	307:4	11	
EXPR_STATEMENT	303:4	303:50	12	cp [ 0 ] = ( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff ) ;
EXPR	303:4	303:4	13	cp [ 0 ] = ( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff )
ASSIGN	303:4	303:12	14	cp [ 0 ] = ( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff )
LVAL	303:4	303:4	15	cp [ 0 ]
FIELD	303:4	303:8	16	cp [ 0 ]
LEAF_NODE	303:4	303:4	17	cp
LEAF_NODE	303:6	303:6	17	[
EXPR	303:7	303:7	17	0
FIELD	303:7	303:7	18	0
LEAF_NODE	303:7	303:7	19	0
LEAF_NODE	303:8	303:8	17	]
ASSIGN_OP	303:10	303:10	15	=
LEAF_NODE	303:10	303:10	16	=
RVAL	303:12	303:49	15	( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff )
LEAF_NODE	303:12	303:12	16	(
TYPE_NAME	303:13	303:22	16	unsigned char
LEAF_NODE	303:13	303:13	17	unsigned
LEAF_NODE	303:22	303:22	17	char
LEAF_NODE	303:26	303:26	16	)
LEAF_NODE	303:28	303:28	16	(
LEAF_NODE	303:29	303:29	16	(
ASSIGN	303:30	303:36	16	cr += cp [ 0 ]
LVAL	303:30	303:30	17	cr
FIELD	303:30	303:30	18	cr
LEAF_NODE	303:30	303:30	19	cr
ASSIGN_OP	303:33	303:33	17	+=
LEAF_NODE	303:33	303:33	18	+=
RVAL	303:36	303:36	17	cp [ 0 ]
FIELD	303:36	303:40	18	cp [ 0 ]
LEAF_NODE	303:36	303:36	19	cp
LEAF_NODE	303:38	303:38	19	[
EXPR	303:39	303:39	19	0
FIELD	303:39	303:39	20	0
LEAF_NODE	303:39	303:39	21	0
LEAF_NODE	303:40	303:40	19	]
LEAF_NODE	303:41	303:41	16	)
LEAF_NODE	303:43	303:43	16	&
FIELD	303:45	303:45	16	0xff
LEAF_NODE	303:45	303:45	17	0xff
LEAF_NODE	303:49	303:49	16	)
LEAF_NODE	303:50	303:50	13	;
EXPR_STATEMENT	304:4	304:50	12	cp [ 1 ] = ( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff ) ;
EXPR	304:4	304:4	13	cp [ 1 ] = ( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff )
ASSIGN	304:4	304:12	14	cp [ 1 ] = ( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff )
LVAL	304:4	304:4	15	cp [ 1 ]
FIELD	304:4	304:8	16	cp [ 1 ]
LEAF_NODE	304:4	304:4	17	cp
LEAF_NODE	304:6	304:6	17	[
EXPR	304:7	304:7	17	1
FIELD	304:7	304:7	18	1
LEAF_NODE	304:7	304:7	19	1
LEAF_NODE	304:8	304:8	17	]
ASSIGN_OP	304:10	304:10	15	=
LEAF_NODE	304:10	304:10	16	=
RVAL	304:12	304:49	15	( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff )
LEAF_NODE	304:12	304:12	16	(
TYPE_NAME	304:13	304:22	16	unsigned char
LEAF_NODE	304:13	304:13	17	unsigned
LEAF_NODE	304:22	304:22	17	char
LEAF_NODE	304:26	304:26	16	)
LEAF_NODE	304:28	304:28	16	(
LEAF_NODE	304:29	304:29	16	(
ASSIGN	304:30	304:36	16	cg += cp [ 1 ]
LVAL	304:30	304:30	17	cg
FIELD	304:30	304:30	18	cg
LEAF_NODE	304:30	304:30	19	cg
ASSIGN_OP	304:33	304:33	17	+=
LEAF_NODE	304:33	304:33	18	+=
RVAL	304:36	304:36	17	cp [ 1 ]
FIELD	304:36	304:40	18	cp [ 1 ]
LEAF_NODE	304:36	304:36	19	cp
LEAF_NODE	304:38	304:38	19	[
EXPR	304:39	304:39	19	1
FIELD	304:39	304:39	20	1
LEAF_NODE	304:39	304:39	21	1
LEAF_NODE	304:40	304:40	19	]
LEAF_NODE	304:41	304:41	16	)
LEAF_NODE	304:43	304:43	16	&
FIELD	304:45	304:45	16	0xff
LEAF_NODE	304:45	304:45	17	0xff
LEAF_NODE	304:49	304:49	16	)
LEAF_NODE	304:50	304:50	13	;
EXPR_STATEMENT	305:4	305:50	12	cp [ 2 ] = ( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff ) ;
EXPR	305:4	305:4	13	cp [ 2 ] = ( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff )
ASSIGN	305:4	305:12	14	cp [ 2 ] = ( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff )
LVAL	305:4	305:4	15	cp [ 2 ]
FIELD	305:4	305:8	16	cp [ 2 ]
LEAF_NODE	305:4	305:4	17	cp
LEAF_NODE	305:6	305:6	17	[
EXPR	305:7	305:7	17	2
FIELD	305:7	305:7	18	2
LEAF_NODE	305:7	305:7	19	2
LEAF_NODE	305:8	305:8	17	]
ASSIGN_OP	305:10	305:10	15	=
LEAF_NODE	305:10	305:10	16	=
RVAL	305:12	305:49	15	( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff )
LEAF_NODE	305:12	305:12	16	(
TYPE_NAME	305:13	305:22	16	unsigned char
LEAF_NODE	305:13	305:13	17	unsigned
LEAF_NODE	305:22	305:22	17	char
LEAF_NODE	305:26	305:26	16	)
LEAF_NODE	305:28	305:28	16	(
LEAF_NODE	305:29	305:29	16	(
ASSIGN	305:30	305:36	16	cb += cp [ 2 ]
LVAL	305:30	305:30	17	cb
FIELD	305:30	305:30	18	cb
LEAF_NODE	305:30	305:30	19	cb
ASSIGN_OP	305:33	305:33	17	+=
LEAF_NODE	305:33	305:33	18	+=
RVAL	305:36	305:36	17	cp [ 2 ]
FIELD	305:36	305:40	18	cp [ 2 ]
LEAF_NODE	305:36	305:36	19	cp
LEAF_NODE	305:38	305:38	19	[
EXPR	305:39	305:39	19	2
FIELD	305:39	305:39	20	2
LEAF_NODE	305:39	305:39	21	2
LEAF_NODE	305:40	305:40	19	]
LEAF_NODE	305:41	305:41	16	)
LEAF_NODE	305:43	305:43	16	&
FIELD	305:45	305:45	16	0xff
LEAF_NODE	305:45	305:45	17	0xff
LEAF_NODE	305:49	305:49	16	)
LEAF_NODE	305:50	305:50	13	;
EXPR_STATEMENT	306:4	306:11	12	cc -= 3 ;
EXPR	306:4	306:4	13	cc -= 3
ASSIGN	306:4	306:10	14	cc -= 3
LVAL	306:4	306:4	15	cc
FIELD	306:4	306:4	16	cc
LEAF_NODE	306:4	306:4	17	cc
ASSIGN_OP	306:7	306:7	15	-=
LEAF_NODE	306:7	306:7	16	-=
RVAL	306:10	306:10	15	3
FIELD	306:10	306:10	16	3
LEAF_NODE	306:10	306:10	17	3
LEAF_NODE	306:11	306:11	13	;
EXPR_STATEMENT	307:4	307:11	12	cp += 3 ;
EXPR	307:4	307:4	13	cp += 3
ASSIGN	307:4	307:10	14	cp += 3
LVAL	307:4	307:4	15	cp
FIELD	307:4	307:4	16	cp
LEAF_NODE	307:4	307:4	17	cp
ASSIGN_OP	307:7	307:7	15	+=
LEAF_NODE	307:7	307:7	16	+=
RVAL	307:10	307:10	15	3
FIELD	307:10	307:10	16	3
LEAF_NODE	307:10	307:10	17	3
LEAF_NODE	307:11	307:11	13	;
LEAF_NODE	308:3	308:3	11	}
LEAF_NODE	309:2	309:2	8	}
SELECTION	309:4	309:9	6	
KEYWORD	309:4	309:4	7	else
LEAF_NODE	309:4	309:4	8	else
STATEMENTS	309:9	309:9	7	
SELECTION	309:9	309:27	8	
KEYWORD	309:9	309:9	9	if
LEAF_NODE	309:9	309:9	10	if
LEAF_NODE	309:12	309:12	9	(
CONDITION	309:13	309:13	9	stride == 4
EXPR	309:13	309:23	10	stride == 4
FIELD	309:13	309:13	11	stride
LEAF_NODE	309:13	309:13	12	stride
EQ_OPERATOR	309:20	309:20	11	==
LEAF_NODE	309:20	309:20	12	==
FIELD	309:23	309:23	11	4
LEAF_NODE	309:23	309:23	12	4
LEAF_NODE	309:24	309:24	9	)
STATEMENTS	309:27	324:2	9	
LEAF_NODE	309:27	309:27	10	{
STATEMENTS	310:3	316:3	10	
SIMPLE_DECL	310:3	310:26	11	unsigned int cr ; cr = cp [ 0 ] ;
VAR_DECL	310:3	310:16	12	unsigned int cr ; cr = cp [ 0 ]
TYPE	310:3	310:3	13	unsigned int
TYPE_NAME	310:3	310:12	14	unsigned int
LEAF_NODE	310:3	310:3	15	unsigned
LEAF_NODE	310:12	310:12	15	int
NAME	310:16	310:16	13	cr
LEAF_NODE	310:16	310:16	14	cr
LEAF_NODE	0:0	0:0	13	;
INIT	310:16	310:16	13	cr = cp [ 0 ]
ASSIGN	310:16	310:21	14	cr = cp [ 0 ]
LVAL	310:16	310:16	15	cr
NAME	310:16	310:16	16	cr
LEAF_NODE	310:16	310:16	17	cr
ASSIGN_OP	310:19	310:19	15	=
LEAF_NODE	310:19	310:19	16	=
RVAL	310:21	310:21	15	cp [ 0 ]
FIELD	310:21	310:25	16	cp [ 0 ]
LEAF_NODE	310:21	310:21	17	cp
LEAF_NODE	310:23	310:23	17	[
EXPR	310:24	310:24	17	0
FIELD	310:24	310:24	18	0
LEAF_NODE	310:24	310:24	19	0
LEAF_NODE	310:25	310:25	17	]
LEAF_NODE	310:26	310:26	12	;
SIMPLE_DECL	311:3	311:26	11	unsigned int cg ; cg = cp [ 1 ] ;
VAR_DECL	311:3	311:16	12	unsigned int cg ; cg = cp [ 1 ]
TYPE	311:3	311:3	13	unsigned int
TYPE_NAME	311:3	311:12	14	unsigned int
LEAF_NODE	311:3	311:3	15	unsigned
LEAF_NODE	311:12	311:12	15	int
NAME	311:16	311:16	13	cg
LEAF_NODE	311:16	311:16	14	cg
LEAF_NODE	0:0	0:0	13	;
INIT	311:16	311:16	13	cg = cp [ 1 ]
ASSIGN	311:16	311:21	14	cg = cp [ 1 ]
LVAL	311:16	311:16	15	cg
NAME	311:16	311:16	16	cg
LEAF_NODE	311:16	311:16	17	cg
ASSIGN_OP	311:19	311:19	15	=
LEAF_NODE	311:19	311:19	16	=
RVAL	311:21	311:21	15	cp [ 1 ]
FIELD	311:21	311:25	16	cp [ 1 ]
LEAF_NODE	311:21	311:21	17	cp
LEAF_NODE	311:23	311:23	17	[
EXPR	311:24	311:24	17	1
FIELD	311:24	311:24	18	1
LEAF_NODE	311:24	311:24	19	1
LEAF_NODE	311:25	311:25	17	]
LEAF_NODE	311:26	311:26	12	;
SIMPLE_DECL	312:3	312:26	11	unsigned int cb ; cb = cp [ 2 ] ;
VAR_DECL	312:3	312:16	12	unsigned int cb ; cb = cp [ 2 ]
TYPE	312:3	312:3	13	unsigned int
TYPE_NAME	312:3	312:12	14	unsigned int
LEAF_NODE	312:3	312:3	15	unsigned
LEAF_NODE	312:12	312:12	15	int
NAME	312:16	312:16	13	cb
LEAF_NODE	312:16	312:16	14	cb
LEAF_NODE	0:0	0:0	13	;
INIT	312:16	312:16	13	cb = cp [ 2 ]
ASSIGN	312:16	312:21	14	cb = cp [ 2 ]
LVAL	312:16	312:16	15	cb
NAME	312:16	312:16	16	cb
LEAF_NODE	312:16	312:16	17	cb
ASSIGN_OP	312:19	312:19	15	=
LEAF_NODE	312:19	312:19	16	=
RVAL	312:21	312:21	15	cp [ 2 ]
FIELD	312:21	312:25	16	cp [ 2 ]
LEAF_NODE	312:21	312:21	17	cp
LEAF_NODE	312:23	312:23	17	[
EXPR	312:24	312:24	17	2
FIELD	312:24	312:24	18	2
LEAF_NODE	312:24	312:24	19	2
LEAF_NODE	312:25	312:25	17	]
LEAF_NODE	312:26	312:26	12	;
SIMPLE_DECL	313:3	313:26	11	unsigned int ca ; ca = cp [ 3 ] ;
VAR_DECL	313:3	313:16	12	unsigned int ca ; ca = cp [ 3 ]
TYPE	313:3	313:3	13	unsigned int
TYPE_NAME	313:3	313:12	14	unsigned int
LEAF_NODE	313:3	313:3	15	unsigned
LEAF_NODE	313:12	313:12	15	int
NAME	313:16	313:16	13	ca
LEAF_NODE	313:16	313:16	14	ca
LEAF_NODE	0:0	0:0	13	;
INIT	313:16	313:16	13	ca = cp [ 3 ]
ASSIGN	313:16	313:21	14	ca = cp [ 3 ]
LVAL	313:16	313:16	15	ca
NAME	313:16	313:16	16	ca
LEAF_NODE	313:16	313:16	17	ca
ASSIGN_OP	313:19	313:19	15	=
LEAF_NODE	313:19	313:19	16	=
RVAL	313:21	313:21	15	cp [ 3 ]
FIELD	313:21	313:25	16	cp [ 3 ]
LEAF_NODE	313:21	313:21	17	cp
LEAF_NODE	313:23	313:23	17	[
EXPR	313:24	313:24	17	3
FIELD	313:24	313:24	18	3
LEAF_NODE	313:24	313:24	19	3
LEAF_NODE	313:25	313:25	17	]
LEAF_NODE	313:26	313:26	12	;
EXPR_STATEMENT	314:3	314:10	11	cc -= 4 ;
EXPR	314:3	314:3	12	cc -= 4
ASSIGN	314:3	314:9	13	cc -= 4
LVAL	314:3	314:3	14	cc
FIELD	314:3	314:3	15	cc
LEAF_NODE	314:3	314:3	16	cc
ASSIGN_OP	314:6	314:6	14	-=
LEAF_NODE	314:6	314:6	15	-=
RVAL	314:9	314:9	14	4
FIELD	314:9	314:9	15	4
LEAF_NODE	314:9	314:9	16	4
LEAF_NODE	314:10	314:10	12	;
EXPR_STATEMENT	315:3	315:10	11	cp += 4 ;
EXPR	315:3	315:3	12	cp += 4
ASSIGN	315:3	315:9	13	cp += 4
LVAL	315:3	315:3	14	cp
FIELD	315:3	315:3	15	cp
LEAF_NODE	315:3	315:3	16	cp
ASSIGN_OP	315:6	315:6	14	+=
LEAF_NODE	315:6	315:6	15	+=
RVAL	315:9	315:9	14	4
FIELD	315:9	315:9	15	4
LEAF_NODE	315:9	315:9	16	4
LEAF_NODE	315:10	315:10	12	;
ITERATION	316:3	316:16	11	
KEYWORD	316:3	316:3	12	while
LEAF_NODE	316:3	316:3	13	while
LEAF_NODE	316:9	316:9	12	(
CONDITION	316:10	316:10	12	cc > 0
EXPR	316:10	316:13	13	cc > 0
FIELD	316:10	316:10	14	cc
LEAF_NODE	316:10	316:10	15	cc
REL_OPERATOR	316:12	316:12	14	>
LEAF_NODE	316:12	316:12	15	>
FIELD	316:13	316:13	14	0
LEAF_NODE	316:13	316:13	15	0
LEAF_NODE	316:14	316:14	12	)
STATEMENTS	316:16	323:3	12	
LEAF_NODE	316:16	316:16	13	{
STATEMENTS	317:4	322:4	13	
EXPR_STATEMENT	317:4	317:50	14	cp [ 0 ] = ( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff ) ;
EXPR	317:4	317:4	15	cp [ 0 ] = ( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff )
ASSIGN	317:4	317:12	16	cp [ 0 ] = ( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff )
LVAL	317:4	317:4	17	cp [ 0 ]
FIELD	317:4	317:8	18	cp [ 0 ]
LEAF_NODE	317:4	317:4	19	cp
LEAF_NODE	317:6	317:6	19	[
EXPR	317:7	317:7	19	0
FIELD	317:7	317:7	20	0
LEAF_NODE	317:7	317:7	21	0
LEAF_NODE	317:8	317:8	19	]
ASSIGN_OP	317:10	317:10	17	=
LEAF_NODE	317:10	317:10	18	=
RVAL	317:12	317:49	17	( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff )
LEAF_NODE	317:12	317:12	18	(
TYPE_NAME	317:13	317:22	18	unsigned char
LEAF_NODE	317:13	317:13	19	unsigned
LEAF_NODE	317:22	317:22	19	char
LEAF_NODE	317:26	317:26	18	)
LEAF_NODE	317:28	317:28	18	(
LEAF_NODE	317:29	317:29	18	(
ASSIGN	317:30	317:36	18	cr += cp [ 0 ]
LVAL	317:30	317:30	19	cr
FIELD	317:30	317:30	20	cr
LEAF_NODE	317:30	317:30	21	cr
ASSIGN_OP	317:33	317:33	19	+=
LEAF_NODE	317:33	317:33	20	+=
RVAL	317:36	317:36	19	cp [ 0 ]
FIELD	317:36	317:40	20	cp [ 0 ]
LEAF_NODE	317:36	317:36	21	cp
LEAF_NODE	317:38	317:38	21	[
EXPR	317:39	317:39	21	0
FIELD	317:39	317:39	22	0
LEAF_NODE	317:39	317:39	23	0
LEAF_NODE	317:40	317:40	21	]
LEAF_NODE	317:41	317:41	18	)
LEAF_NODE	317:43	317:43	18	&
FIELD	317:45	317:45	18	0xff
LEAF_NODE	317:45	317:45	19	0xff
LEAF_NODE	317:49	317:49	18	)
LEAF_NODE	317:50	317:50	15	;
EXPR_STATEMENT	318:4	318:50	14	cp [ 1 ] = ( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff ) ;
EXPR	318:4	318:4	15	cp [ 1 ] = ( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff )
ASSIGN	318:4	318:12	16	cp [ 1 ] = ( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff )
LVAL	318:4	318:4	17	cp [ 1 ]
FIELD	318:4	318:8	18	cp [ 1 ]
LEAF_NODE	318:4	318:4	19	cp
LEAF_NODE	318:6	318:6	19	[
EXPR	318:7	318:7	19	1
FIELD	318:7	318:7	20	1
LEAF_NODE	318:7	318:7	21	1
LEAF_NODE	318:8	318:8	19	]
ASSIGN_OP	318:10	318:10	17	=
LEAF_NODE	318:10	318:10	18	=
RVAL	318:12	318:49	17	( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff )
LEAF_NODE	318:12	318:12	18	(
TYPE_NAME	318:13	318:22	18	unsigned char
LEAF_NODE	318:13	318:13	19	unsigned
LEAF_NODE	318:22	318:22	19	char
LEAF_NODE	318:26	318:26	18	)
LEAF_NODE	318:28	318:28	18	(
LEAF_NODE	318:29	318:29	18	(
ASSIGN	318:30	318:36	18	cg += cp [ 1 ]
LVAL	318:30	318:30	19	cg
FIELD	318:30	318:30	20	cg
LEAF_NODE	318:30	318:30	21	cg
ASSIGN_OP	318:33	318:33	19	+=
LEAF_NODE	318:33	318:33	20	+=
RVAL	318:36	318:36	19	cp [ 1 ]
FIELD	318:36	318:40	20	cp [ 1 ]
LEAF_NODE	318:36	318:36	21	cp
LEAF_NODE	318:38	318:38	21	[
EXPR	318:39	318:39	21	1
FIELD	318:39	318:39	22	1
LEAF_NODE	318:39	318:39	23	1
LEAF_NODE	318:40	318:40	21	]
LEAF_NODE	318:41	318:41	18	)
LEAF_NODE	318:43	318:43	18	&
FIELD	318:45	318:45	18	0xff
LEAF_NODE	318:45	318:45	19	0xff
LEAF_NODE	318:49	318:49	18	)
LEAF_NODE	318:50	318:50	15	;
EXPR_STATEMENT	319:4	319:50	14	cp [ 2 ] = ( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff ) ;
EXPR	319:4	319:4	15	cp [ 2 ] = ( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff )
ASSIGN	319:4	319:12	16	cp [ 2 ] = ( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff )
LVAL	319:4	319:4	17	cp [ 2 ]
FIELD	319:4	319:8	18	cp [ 2 ]
LEAF_NODE	319:4	319:4	19	cp
LEAF_NODE	319:6	319:6	19	[
EXPR	319:7	319:7	19	2
FIELD	319:7	319:7	20	2
LEAF_NODE	319:7	319:7	21	2
LEAF_NODE	319:8	319:8	19	]
ASSIGN_OP	319:10	319:10	17	=
LEAF_NODE	319:10	319:10	18	=
RVAL	319:12	319:49	17	( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff )
LEAF_NODE	319:12	319:12	18	(
TYPE_NAME	319:13	319:22	18	unsigned char
LEAF_NODE	319:13	319:13	19	unsigned
LEAF_NODE	319:22	319:22	19	char
LEAF_NODE	319:26	319:26	18	)
LEAF_NODE	319:28	319:28	18	(
LEAF_NODE	319:29	319:29	18	(
ASSIGN	319:30	319:36	18	cb += cp [ 2 ]
LVAL	319:30	319:30	19	cb
FIELD	319:30	319:30	20	cb
LEAF_NODE	319:30	319:30	21	cb
ASSIGN_OP	319:33	319:33	19	+=
LEAF_NODE	319:33	319:33	20	+=
RVAL	319:36	319:36	19	cp [ 2 ]
FIELD	319:36	319:40	20	cp [ 2 ]
LEAF_NODE	319:36	319:36	21	cp
LEAF_NODE	319:38	319:38	21	[
EXPR	319:39	319:39	21	2
FIELD	319:39	319:39	22	2
LEAF_NODE	319:39	319:39	23	2
LEAF_NODE	319:40	319:40	21	]
LEAF_NODE	319:41	319:41	18	)
LEAF_NODE	319:43	319:43	18	&
FIELD	319:45	319:45	18	0xff
LEAF_NODE	319:45	319:45	19	0xff
LEAF_NODE	319:49	319:49	18	)
LEAF_NODE	319:50	319:50	15	;
EXPR_STATEMENT	320:4	320:50	14	cp [ 3 ] = ( unsigned char ) ( ( ca += cp [ 3 ] ) & 0xff ) ;
EXPR	320:4	320:4	15	cp [ 3 ] = ( unsigned char ) ( ( ca += cp [ 3 ] ) & 0xff )
ASSIGN	320:4	320:12	16	cp [ 3 ] = ( unsigned char ) ( ( ca += cp [ 3 ] ) & 0xff )
LVAL	320:4	320:4	17	cp [ 3 ]
FIELD	320:4	320:8	18	cp [ 3 ]
LEAF_NODE	320:4	320:4	19	cp
LEAF_NODE	320:6	320:6	19	[
EXPR	320:7	320:7	19	3
FIELD	320:7	320:7	20	3
LEAF_NODE	320:7	320:7	21	3
LEAF_NODE	320:8	320:8	19	]
ASSIGN_OP	320:10	320:10	17	=
LEAF_NODE	320:10	320:10	18	=
RVAL	320:12	320:49	17	( unsigned char ) ( ( ca += cp [ 3 ] ) & 0xff )
LEAF_NODE	320:12	320:12	18	(
TYPE_NAME	320:13	320:22	18	unsigned char
LEAF_NODE	320:13	320:13	19	unsigned
LEAF_NODE	320:22	320:22	19	char
LEAF_NODE	320:26	320:26	18	)
LEAF_NODE	320:28	320:28	18	(
LEAF_NODE	320:29	320:29	18	(
ASSIGN	320:30	320:36	18	ca += cp [ 3 ]
LVAL	320:30	320:30	19	ca
FIELD	320:30	320:30	20	ca
LEAF_NODE	320:30	320:30	21	ca
ASSIGN_OP	320:33	320:33	19	+=
LEAF_NODE	320:33	320:33	20	+=
RVAL	320:36	320:36	19	cp [ 3 ]
FIELD	320:36	320:40	20	cp [ 3 ]
LEAF_NODE	320:36	320:36	21	cp
LEAF_NODE	320:38	320:38	21	[
EXPR	320:39	320:39	21	3
FIELD	320:39	320:39	22	3
LEAF_NODE	320:39	320:39	23	3
LEAF_NODE	320:40	320:40	21	]
LEAF_NODE	320:41	320:41	18	)
LEAF_NODE	320:43	320:43	18	&
FIELD	320:45	320:45	18	0xff
LEAF_NODE	320:45	320:45	19	0xff
LEAF_NODE	320:49	320:49	18	)
LEAF_NODE	320:50	320:50	15	;
EXPR_STATEMENT	321:4	321:11	14	cc -= 4 ;
EXPR	321:4	321:4	15	cc -= 4
ASSIGN	321:4	321:10	16	cc -= 4
LVAL	321:4	321:4	17	cc
FIELD	321:4	321:4	18	cc
LEAF_NODE	321:4	321:4	19	cc
ASSIGN_OP	321:7	321:7	17	-=
LEAF_NODE	321:7	321:7	18	-=
RVAL	321:10	321:10	17	4
FIELD	321:10	321:10	18	4
LEAF_NODE	321:10	321:10	19	4
LEAF_NODE	321:11	321:11	15	;
EXPR_STATEMENT	322:4	322:11	14	cp += 4 ;
EXPR	322:4	322:4	15	cp += 4
ASSIGN	322:4	322:10	16	cp += 4
LVAL	322:4	322:4	17	cp
FIELD	322:4	322:4	18	cp
LEAF_NODE	322:4	322:4	19	cp
ASSIGN_OP	322:7	322:7	17	+=
LEAF_NODE	322:7	322:7	18	+=
RVAL	322:10	322:10	17	4
FIELD	322:10	322:10	18	4
LEAF_NODE	322:10	322:10	19	4
LEAF_NODE	322:11	322:11	15	;
LEAF_NODE	323:3	323:3	13	}
LEAF_NODE	324:2	324:2	10	}
SELECTION	324:4	324:10	6	
KEYWORD	324:4	324:4	7	else
LEAF_NODE	324:4	324:4	8	else
STATEMENTS	324:10	331:2	7	
LEAF_NODE	324:10	324:10	8	{
STATEMENTS	325:3	330:17	8	
EXPR_STATEMENT	325:3	325:15	9	cc -= stride ;
EXPR	325:3	325:3	10	cc -= stride
ASSIGN	325:3	325:9	11	cc -= stride
LVAL	325:3	325:3	12	cc
FIELD	325:3	325:3	13	cc
LEAF_NODE	325:3	325:3	14	cc
ASSIGN_OP	325:6	325:6	12	-=
LEAF_NODE	325:6	325:6	13	-=
RVAL	325:9	325:9	12	stride
FIELD	325:9	325:9	13	stride
LEAF_NODE	325:9	325:9	14	stride
LEAF_NODE	325:15	325:15	10	;
ITERATION	326:3	326:6	9	
KEYWORD	326:3	326:3	10	do
LEAF_NODE	326:3	326:3	11	do
LEAF_NODE	330:11	330:11	10	(
CONDITION	330:12	330:12	10	cc > 0
EXPR	330:12	330:15	11	cc > 0
FIELD	330:12	330:12	12	cc
LEAF_NODE	330:12	330:12	13	cc
REL_OPERATOR	330:14	330:14	12	>
LEAF_NODE	330:14	330:14	13	>
FIELD	330:15	330:15	12	0
LEAF_NODE	330:15	330:15	13	0
LEAF_NODE	330:16	330:16	10	)
STATEMENTS	326:6	330:3	10	
LEAF_NODE	326:6	326:6	11	{
STATEMENTS	327:4	329:4	11	
LEAF_NODE	327:4	327:4	12	REPEAT4
LEAF_NODE	327:11	327:11	12	(
EXPR_STATEMENT	327:12	328:48	12	stride , cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + * cp ) & 0xff ) ;
EXPR	327:12	327:20	13	stride , cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + * cp ) & 0xff )
FIELD	327:12	327:12	14	stride
LEAF_NODE	327:12	327:12	15	stride
LEAF_NODE	327:18	327:18	14	,
ASSIGN	327:20	328:5	14	cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + * cp ) & 0xff )
LVAL	327:20	327:20	15	cp [ stride ]
FIELD	327:20	327:29	16	cp [ stride ]
LEAF_NODE	327:20	327:20	17	cp
LEAF_NODE	327:22	327:22	17	[
EXPR	327:23	327:23	17	stride
FIELD	327:23	327:23	18	stride
LEAF_NODE	327:23	327:23	19	stride
LEAF_NODE	327:29	327:29	17	]
ASSIGN_OP	327:31	327:31	15	=
LEAF_NODE	327:31	327:31	16	=
RVAL	328:5	328:47	15	( unsigned char ) ( ( cp [ stride ] + * cp ) & 0xff )
LEAF_NODE	328:5	328:5	16	(
TYPE_NAME	328:6	328:15	16	unsigned char
LEAF_NODE	328:6	328:6	17	unsigned
LEAF_NODE	328:15	328:15	17	char
LEAF_NODE	328:19	328:19	16	)
LEAF_NODE	328:21	328:21	16	(
LEAF_NODE	328:22	328:22	16	(
FIELD	328:23	328:32	16	cp [ stride ]
LEAF_NODE	328:23	328:23	17	cp
LEAF_NODE	328:25	328:25	17	[
EXPR	328:26	328:26	17	stride
FIELD	328:26	328:26	18	stride
LEAF_NODE	328:26	328:26	19	stride
LEAF_NODE	328:32	328:32	17	]
LEAF_NODE	328:34	328:34	16	+
UNARY_EXPR	328:36	328:37	16	* cp
UNARY_OPERATOR	328:36	328:36	17	*
LEAF_NODE	328:36	328:36	18	*
FIELD	328:37	328:37	17	cp
LEAF_NODE	328:37	328:37	18	cp
LEAF_NODE	328:39	328:39	16	)
LEAF_NODE	328:41	328:41	16	&
FIELD	328:43	328:43	16	0xff
LEAF_NODE	328:43	328:43	17	0xff
LEAF_NODE	328:47	328:47	16	)
LEAF_NODE	328:48	328:48	13	;
LEAF_NODE	328:50	328:50	12	cp
LEAF_NODE	328:52	328:52	12	++
LEAF_NODE	328:54	328:54	12	)
EXPR_STATEMENT	329:4	329:16	12	cc -= stride ;
EXPR	329:4	329:4	13	cc -= stride
ASSIGN	329:4	329:10	14	cc -= stride
LVAL	329:4	329:4	15	cc
FIELD	329:4	329:4	16	cc
LEAF_NODE	329:4	329:4	17	cc
ASSIGN_OP	329:7	329:7	15	-=
LEAF_NODE	329:7	329:7	16	-=
RVAL	329:10	329:10	15	stride
FIELD	329:10	329:10	16	stride
LEAF_NODE	329:10	329:10	17	stride
LEAF_NODE	329:16	329:16	13	;
LEAF_NODE	330:3	330:3	11	}
LEAF_NODE	330:17	330:17	9	;
LEAF_NODE	331:2	331:2	8	}
LEAF_NODE	332:1	332:1	5	}
JUMP_STATEMENT	333:1	333:9	3	return 1 ;
KEYWORD	333:1	333:1	4	return
LEAF_NODE	333:1	333:1	5	return
DESTINATION	333:8	333:8	4	1
EXPR	333:8	333:8	5	1
FIELD	333:8	333:8	6	1
LEAF_NODE	333:8	333:8	7	1
LEAF_NODE	333:9	333:9	4	;
LEAF_NODE	334:0	334:0	2	}
FUNCTION_DEF	336:0	344:0	1	
RETURN_TYPE	336:0	336:7	2	static int
LEAF_NODE	336:0	336:0	3	static
TYPE_NAME	336:7	336:7	3	int
LEAF_NODE	336:7	336:7	4	int
FUNCTION_NAME	337:0	337:0	2	swabHorAcc16
LEAF_NODE	337:0	337:0	3	swabHorAcc16
PARAMETER_LIST	337:12	337:47	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	337:12	337:12	3	(
PARAMETER_DECL	337:13	337:19	3	TIFF * tif
TYPE	337:13	337:17	4	TIFF *
TYPE_NAME	337:13	337:13	5	TIFF
LEAF_NODE	337:13	337:13	6	TIFF
POINTER	337:17	337:17	5	*
LEAF_NODE	337:17	337:17	6	*
NAME	337:19	337:19	4	tif
LEAF_NODE	337:19	337:19	5	tif
LEAF_NODE	337:22	337:22	3	,
PARAMETER_DECL	337:24	337:31	3	uint8 * cp0
TYPE	337:24	337:29	4	uint8 *
TYPE_NAME	337:24	337:24	5	uint8
LEAF_NODE	337:24	337:24	6	uint8
POINTER	337:29	337:29	5	*
LEAF_NODE	337:29	337:29	6	*
NAME	337:31	337:31	4	cp0
LEAF_NODE	337:31	337:31	5	cp0
LEAF_NODE	337:34	337:34	3	,
PARAMETER_DECL	337:36	337:45	3	tmsize_t cc
TYPE	337:36	337:36	4	tmsize_t
TYPE_NAME	337:36	337:36	5	tmsize_t
LEAF_NODE	337:36	337:36	6	tmsize_t
NAME	337:45	337:45	4	cc
LEAF_NODE	337:45	337:45	5	cc
LEAF_NODE	337:47	337:47	3	)
LEAF_NODE	338:0	338:0	2	{
STATEMENTS	339:1	343:8	2	
SIMPLE_DECL	339:1	339:27	3	uint16 * wp ; wp = ( uint16 * ) cp0 ;
VAR_DECL	339:1	339:9	4	uint16 * wp ; wp = ( uint16 * ) cp0
TYPE	339:1	339:7	5	uint16 *
TYPE_NAME	339:1	339:1	6	uint16
LEAF_NODE	339:1	339:1	7	uint16
POINTER	339:7	339:7	6	*
LEAF_NODE	339:7	339:7	7	*
NAME	339:9	339:9	5	wp
LEAF_NODE	339:9	339:9	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	339:9	339:9	5	wp = ( uint16 * ) cp0
ASSIGN	339:9	339:14	6	wp = ( uint16 * ) cp0
LVAL	339:9	339:9	7	wp
NAME	339:9	339:9	8	wp
LEAF_NODE	339:9	339:9	9	wp
ASSIGN_OP	339:12	339:12	7	=
LEAF_NODE	339:12	339:12	8	=
RVAL	339:14	339:24	7	( uint16 * ) cp0
LEAF_NODE	339:14	339:14	8	(
TYPE_NAME	339:15	339:15	8	uint16
LEAF_NODE	339:15	339:15	9	uint16
LEAF_NODE	339:21	339:21	8	*
LEAF_NODE	339:22	339:22	8	)
FIELD	339:24	339:24	8	cp0
LEAF_NODE	339:24	339:24	9	cp0
LEAF_NODE	339:27	339:27	4	;
SIMPLE_DECL	340:1	340:21	3	tmsize_t wc ; wc = cc / 2 ;
VAR_DECL	340:1	340:10	4	tmsize_t wc ; wc = cc / 2
TYPE	340:1	340:1	5	tmsize_t
TYPE_NAME	340:1	340:1	6	tmsize_t
LEAF_NODE	340:1	340:1	7	tmsize_t
NAME	340:10	340:10	5	wc
LEAF_NODE	340:10	340:10	6	wc
LEAF_NODE	0:0	0:0	5	;
INIT	340:10	340:10	5	wc = cc / 2
ASSIGN	340:10	340:15	6	wc = cc / 2
LVAL	340:10	340:10	7	wc
NAME	340:10	340:10	8	wc
LEAF_NODE	340:10	340:10	9	wc
ASSIGN_OP	340:13	340:13	7	=
LEAF_NODE	340:13	340:13	8	=
RVAL	340:15	340:20	7	cc / 2
FIELD	340:15	340:15	8	cc
LEAF_NODE	340:15	340:15	9	cc
LEAF_NODE	340:18	340:18	8	/
FIELD	340:20	340:20	8	2
LEAF_NODE	340:20	340:20	9	2
LEAF_NODE	340:21	340:21	4	;
EXPR_STATEMENT	342:8	342:36	3	TIFFSwabArrayOfShort ( wp , wc ) ;
EXPR	342:8	342:8	4	TIFFSwabArrayOfShort ( wp , wc )
FUNCTION_CALL	342:8	342:35	5	TIFFSwabArrayOfShort ( wp , wc )
CALLEE	342:8	342:8	6	TIFFSwabArrayOfShort
LEAF_NODE	342:8	342:8	7	TIFFSwabArrayOfShort
LEAF_NODE	342:28	342:28	6	(
ARGUMENT	342:29	342:29	6	wp
FIELD	342:29	342:29	7	wp
LEAF_NODE	342:29	342:29	8	wp
LEAF_NODE	342:31	342:31	6	,
ARGUMENT	342:33	342:33	6	wc
FIELD	342:33	342:33	7	wc
LEAF_NODE	342:33	342:33	8	wc
LEAF_NODE	342:35	342:35	6	)
LEAF_NODE	342:36	342:36	4	;
JUMP_STATEMENT	343:8	343:37	3	return horAcc16 ( tif , cp0 , cc ) ;
KEYWORD	343:8	343:8	4	return
LEAF_NODE	343:8	343:8	5	return
DESTINATION	343:15	343:15	4	horAcc16 ( tif , cp0 , cc )
EXPR	343:15	343:15	5	horAcc16 ( tif , cp0 , cc )
FUNCTION_CALL	343:15	343:36	6	horAcc16 ( tif , cp0 , cc )
CALLEE	343:15	343:15	7	horAcc16
LEAF_NODE	343:15	343:15	8	horAcc16
LEAF_NODE	343:23	343:23	7	(
ARGUMENT	343:24	343:24	7	tif
FIELD	343:24	343:24	8	tif
LEAF_NODE	343:24	343:24	9	tif
LEAF_NODE	343:27	343:27	7	,
ARGUMENT	343:29	343:29	7	cp0
FIELD	343:29	343:29	8	cp0
LEAF_NODE	343:29	343:29	9	cp0
LEAF_NODE	343:32	343:32	7	,
ARGUMENT	343:34	343:34	7	cc
FIELD	343:34	343:34	8	cc
LEAF_NODE	343:34	343:34	9	cc
LEAF_NODE	343:36	343:36	7	)
LEAF_NODE	343:37	343:37	4	;
LEAF_NODE	344:0	344:0	2	}
FUNCTION_DEF	347:0	369:0	1	
RETURN_TYPE	347:0	347:7	2	static int
LEAF_NODE	347:0	347:0	3	static
TYPE_NAME	347:7	347:7	3	int
LEAF_NODE	347:7	347:7	4	int
FUNCTION_NAME	348:0	348:0	2	horAcc16
LEAF_NODE	348:0	348:0	3	horAcc16
PARAMETER_LIST	348:8	348:43	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	348:8	348:8	3	(
PARAMETER_DECL	348:9	348:15	3	TIFF * tif
TYPE	348:9	348:13	4	TIFF *
TYPE_NAME	348:9	348:9	5	TIFF
LEAF_NODE	348:9	348:9	6	TIFF
POINTER	348:13	348:13	5	*
LEAF_NODE	348:13	348:13	6	*
NAME	348:15	348:15	4	tif
LEAF_NODE	348:15	348:15	5	tif
LEAF_NODE	348:18	348:18	3	,
PARAMETER_DECL	348:20	348:27	3	uint8 * cp0
TYPE	348:20	348:25	4	uint8 *
TYPE_NAME	348:20	348:20	5	uint8
LEAF_NODE	348:20	348:20	6	uint8
POINTER	348:25	348:25	5	*
LEAF_NODE	348:25	348:25	6	*
NAME	348:27	348:27	4	cp0
LEAF_NODE	348:27	348:27	5	cp0
LEAF_NODE	348:30	348:30	3	,
PARAMETER_DECL	348:32	348:41	3	tmsize_t cc
TYPE	348:32	348:32	4	tmsize_t
TYPE_NAME	348:32	348:32	5	tmsize_t
LEAF_NODE	348:32	348:32	6	tmsize_t
NAME	348:41	348:41	4	cc
LEAF_NODE	348:41	348:41	5	cc
LEAF_NODE	348:43	348:43	3	)
LEAF_NODE	349:0	349:0	2	{
STATEMENTS	350:1	368:1	2	
SIMPLE_DECL	350:1	350:46	3	tmsize_t stride ; stride = PredictorState ( tif ) -> stride ;
VAR_DECL	350:1	350:10	4	tmsize_t stride ; stride = PredictorState ( tif ) -> stride
TYPE	350:1	350:1	5	tmsize_t
TYPE_NAME	350:1	350:1	6	tmsize_t
LEAF_NODE	350:1	350:1	7	tmsize_t
NAME	350:10	350:10	5	stride
LEAF_NODE	350:10	350:10	6	stride
LEAF_NODE	0:0	0:0	5	;
INIT	350:10	350:10	5	stride = PredictorState ( tif ) -> stride
ASSIGN	350:10	350:19	6	stride = PredictorState ( tif ) -> stride
LVAL	350:10	350:10	7	stride
NAME	350:10	350:10	8	stride
LEAF_NODE	350:10	350:10	9	stride
ASSIGN_OP	350:17	350:17	7	=
LEAF_NODE	350:17	350:17	8	=
RVAL	350:19	350:40	7	PredictorState ( tif ) -> stride
FUNCTION_CALL	350:19	350:37	8	PredictorState ( tif )
CALLEE	350:19	350:19	9	PredictorState
LEAF_NODE	350:19	350:19	10	PredictorState
LEAF_NODE	350:33	350:33	9	(
ARGUMENT	350:34	350:34	9	tif
FIELD	350:34	350:34	10	tif
LEAF_NODE	350:34	350:34	11	tif
LEAF_NODE	350:37	350:37	9	)
LEAF_NODE	350:38	350:38	8	->
LEAF_NODE	350:40	350:40	8	stride
LEAF_NODE	350:46	350:46	4	;
SIMPLE_DECL	351:1	351:27	3	uint16 * wp ; wp = ( uint16 * ) cp0 ;
VAR_DECL	351:1	351:9	4	uint16 * wp ; wp = ( uint16 * ) cp0
TYPE	351:1	351:7	5	uint16 *
TYPE_NAME	351:1	351:1	6	uint16
LEAF_NODE	351:1	351:1	7	uint16
POINTER	351:7	351:7	6	*
LEAF_NODE	351:7	351:7	7	*
NAME	351:9	351:9	5	wp
LEAF_NODE	351:9	351:9	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	351:9	351:9	5	wp = ( uint16 * ) cp0
ASSIGN	351:9	351:14	6	wp = ( uint16 * ) cp0
LVAL	351:9	351:9	7	wp
NAME	351:9	351:9	8	wp
LEAF_NODE	351:9	351:9	9	wp
ASSIGN_OP	351:12	351:12	7	=
LEAF_NODE	351:12	351:12	8	=
RVAL	351:14	351:24	7	( uint16 * ) cp0
LEAF_NODE	351:14	351:14	8	(
TYPE_NAME	351:15	351:15	8	uint16
LEAF_NODE	351:15	351:15	9	uint16
LEAF_NODE	351:21	351:21	8	*
LEAF_NODE	351:22	351:22	8	)
FIELD	351:24	351:24	8	cp0
LEAF_NODE	351:24	351:24	9	cp0
LEAF_NODE	351:27	351:27	4	;
SIMPLE_DECL	352:1	352:21	3	tmsize_t wc ; wc = cc / 2 ;
VAR_DECL	352:1	352:10	4	tmsize_t wc ; wc = cc / 2
TYPE	352:1	352:1	5	tmsize_t
TYPE_NAME	352:1	352:1	6	tmsize_t
LEAF_NODE	352:1	352:1	7	tmsize_t
NAME	352:10	352:10	5	wc
LEAF_NODE	352:10	352:10	6	wc
LEAF_NODE	0:0	0:0	5	;
INIT	352:10	352:10	5	wc = cc / 2
ASSIGN	352:10	352:15	6	wc = cc / 2
LVAL	352:10	352:10	7	wc
NAME	352:10	352:10	8	wc
LEAF_NODE	352:10	352:10	9	wc
ASSIGN_OP	352:13	352:13	7	=
LEAF_NODE	352:13	352:13	8	=
RVAL	352:15	352:20	7	cc / 2
FIELD	352:15	352:15	8	cc
LEAF_NODE	352:15	352:15	9	cc
LEAF_NODE	352:18	352:18	8	/
FIELD	352:20	352:20	8	2
LEAF_NODE	352:20	352:20	9	2
LEAF_NODE	352:21	352:21	4	;
SELECTION	354:4	355:4	3	
KEYWORD	354:4	354:4	4	if
LEAF_NODE	354:4	354:4	5	if
LEAF_NODE	354:6	354:6	4	(
CONDITION	354:7	354:7	4	( cc % ( 2 * stride ) ) != 0
EXPR	354:7	354:24	5	( cc % ( 2 * stride ) ) != 0
LEAF_NODE	354:7	354:7	6	(
FIELD	354:8	354:8	6	cc
LEAF_NODE	354:8	354:8	7	cc
LEAF_NODE	354:10	354:10	6	%
LEAF_NODE	354:11	354:11	6	(
FIELD	354:12	354:12	6	2
LEAF_NODE	354:12	354:12	7	2
LEAF_NODE	354:13	354:13	6	*
FIELD	354:14	354:14	6	stride
LEAF_NODE	354:14	354:14	7	stride
LEAF_NODE	354:20	354:20	6	)
LEAF_NODE	354:21	354:21	6	)
EQ_OPERATOR	354:22	354:22	6	!=
LEAF_NODE	354:22	354:22	7	!=
FIELD	354:24	354:24	6	0
LEAF_NODE	354:24	354:24	7	0
LEAF_NODE	354:25	354:25	4	)
STATEMENTS	355:4	359:4	4	
LEAF_NODE	355:4	355:4	5	{
STATEMENTS	356:8	358:8	5	
EXPR_STATEMENT	356:8	357:47	6	TIFFErrorExt ( tif -> tif_clientdata , "horAcc16" , "%s" , "cc%(2*stride))!=0" ) ;
EXPR	356:8	356:8	7	TIFFErrorExt ( tif -> tif_clientdata , "horAcc16" , "%s" , "cc%(2*stride))!=0" )
FUNCTION_CALL	356:8	357:46	8	TIFFErrorExt ( tif -> tif_clientdata , "horAcc16" , "%s" , "cc%(2*stride))!=0" )
CALLEE	356:8	356:8	9	TIFFErrorExt
LEAF_NODE	356:8	356:8	10	TIFFErrorExt
LEAF_NODE	356:20	356:20	9	(
ARGUMENT	356:21	356:21	9	tif -> tif_clientdata
FIELD	356:21	356:26	10	tif -> tif_clientdata
LEAF_NODE	356:21	356:21	11	tif
LEAF_NODE	356:24	356:24	11	->
LEAF_NODE	356:26	356:26	11	tif_clientdata
LEAF_NODE	356:40	356:40	9	,
ARGUMENT	356:42	356:42	9	"horAcc16"
FIELD	356:42	356:42	10	"horAcc16"
LEAF_NODE	356:42	356:42	11	"horAcc16"
LEAF_NODE	356:52	356:52	9	,
ARGUMENT	357:21	357:21	9	"%s"
FIELD	357:21	357:21	10	"%s"
LEAF_NODE	357:21	357:21	11	"%s"
LEAF_NODE	357:25	357:25	9	,
ARGUMENT	357:27	357:27	9	"cc%(2*stride))!=0"
FIELD	357:27	357:27	10	"cc%(2*stride))!=0"
LEAF_NODE	357:27	357:27	11	"cc%(2*stride))!=0"
LEAF_NODE	357:46	357:46	9	)
LEAF_NODE	357:47	357:47	7	;
JUMP_STATEMENT	358:8	358:16	6	return 0 ;
KEYWORD	358:8	358:8	7	return
LEAF_NODE	358:8	358:8	8	return
DESTINATION	358:15	358:15	7	0
EXPR	358:15	358:15	8	0
FIELD	358:15	358:15	9	0
LEAF_NODE	358:15	358:15	10	0
LEAF_NODE	358:16	358:16	7	;
LEAF_NODE	359:4	359:4	5	}
SELECTION	361:1	361:18	3	
KEYWORD	361:1	361:1	4	if
LEAF_NODE	361:1	361:1	5	if
LEAF_NODE	361:4	361:4	4	(
CONDITION	361:5	361:5	4	wc > stride
EXPR	361:5	361:10	5	wc > stride
FIELD	361:5	361:5	6	wc
LEAF_NODE	361:5	361:5	7	wc
REL_OPERATOR	361:8	361:8	6	>
LEAF_NODE	361:8	361:8	7	>
FIELD	361:10	361:10	6	stride
LEAF_NODE	361:10	361:10	7	stride
LEAF_NODE	361:16	361:16	4	)
STATEMENTS	361:18	367:1	4	
LEAF_NODE	361:18	361:18	5	{
STATEMENTS	362:2	366:18	5	
EXPR_STATEMENT	362:2	362:14	6	wc -= stride ;
EXPR	362:2	362:2	7	wc -= stride
ASSIGN	362:2	362:8	8	wc -= stride
LVAL	362:2	362:2	9	wc
FIELD	362:2	362:2	10	wc
LEAF_NODE	362:2	362:2	11	wc
ASSIGN_OP	362:5	362:5	9	-=
LEAF_NODE	362:5	362:5	10	-=
RVAL	362:8	362:8	9	stride
FIELD	362:8	362:8	10	stride
LEAF_NODE	362:8	362:8	11	stride
LEAF_NODE	362:14	362:14	7	;
ITERATION	363:2	363:5	6	
KEYWORD	363:2	363:2	7	do
LEAF_NODE	363:2	363:2	8	do
LEAF_NODE	366:10	366:10	7	(
CONDITION	366:11	366:11	7	wc > 0
EXPR	366:11	366:16	8	wc > 0
FIELD	366:11	366:11	9	wc
LEAF_NODE	366:11	366:11	10	wc
REL_OPERATOR	366:14	366:14	9	>
LEAF_NODE	366:14	366:14	10	>
FIELD	366:16	366:16	9	0
LEAF_NODE	366:16	366:16	10	0
LEAF_NODE	366:17	366:17	7	)
STATEMENTS	363:5	366:2	7	
LEAF_NODE	363:5	363:5	8	{
STATEMENTS	364:3	365:3	8	
LEAF_NODE	364:3	364:3	9	REPEAT4
LEAF_NODE	364:10	364:10	9	(
EXPR_STATEMENT	364:11	364:99	9	stride , wp [ stride ] = ( uint16 ) ( ( ( unsigned int ) wp [ stride ] + ( unsigned int ) wp [ 0 ] ) & 0xffff ) ;
EXPR	364:11	364:19	10	stride , wp [ stride ] = ( uint16 ) ( ( ( unsigned int ) wp [ stride ] + ( unsigned int ) wp [ 0 ] ) & 0xffff )
FIELD	364:11	364:11	11	stride
LEAF_NODE	364:11	364:11	12	stride
LEAF_NODE	364:17	364:17	11	,
ASSIGN	364:19	364:32	11	wp [ stride ] = ( uint16 ) ( ( ( unsigned int ) wp [ stride ] + ( unsigned int ) wp [ 0 ] ) & 0xffff )
LVAL	364:19	364:19	12	wp [ stride ]
FIELD	364:19	364:28	13	wp [ stride ]
LEAF_NODE	364:19	364:19	14	wp
LEAF_NODE	364:21	364:21	14	[
EXPR	364:22	364:22	14	stride
FIELD	364:22	364:22	15	stride
LEAF_NODE	364:22	364:22	16	stride
LEAF_NODE	364:28	364:28	14	]
ASSIGN_OP	364:30	364:30	12	=
LEAF_NODE	364:30	364:30	13	=
RVAL	364:32	364:98	12	( uint16 ) ( ( ( unsigned int ) wp [ stride ] + ( unsigned int ) wp [ 0 ] ) & 0xffff )
LEAF_NODE	364:32	364:32	13	(
TYPE_NAME	364:33	364:33	13	uint16
LEAF_NODE	364:33	364:33	14	uint16
LEAF_NODE	364:39	364:39	13	)
LEAF_NODE	364:40	364:40	13	(
LEAF_NODE	364:41	364:41	13	(
LEAF_NODE	364:42	364:42	13	(
TYPE_NAME	364:43	364:52	13	unsigned int
LEAF_NODE	364:43	364:43	14	unsigned
LEAF_NODE	364:52	364:52	14	int
LEAF_NODE	364:55	364:55	13	)
FIELD	364:56	364:65	13	wp [ stride ]
LEAF_NODE	364:56	364:56	14	wp
LEAF_NODE	364:58	364:58	14	[
EXPR	364:59	364:59	14	stride
FIELD	364:59	364:59	15	stride
LEAF_NODE	364:59	364:59	16	stride
LEAF_NODE	364:65	364:65	14	]
LEAF_NODE	364:67	364:67	13	+
LEAF_NODE	364:69	364:69	13	(
TYPE_NAME	364:70	364:79	13	unsigned int
LEAF_NODE	364:70	364:70	14	unsigned
LEAF_NODE	364:79	364:79	14	int
LEAF_NODE	364:82	364:82	13	)
FIELD	364:83	364:87	13	wp [ 0 ]
LEAF_NODE	364:83	364:83	14	wp
LEAF_NODE	364:85	364:85	14	[
EXPR	364:86	364:86	14	0
FIELD	364:86	364:86	15	0
LEAF_NODE	364:86	364:86	16	0
LEAF_NODE	364:87	364:87	14	]
LEAF_NODE	364:88	364:88	13	)
LEAF_NODE	364:90	364:90	13	&
FIELD	364:92	364:92	13	0xffff
LEAF_NODE	364:92	364:92	14	0xffff
LEAF_NODE	364:98	364:98	13	)
LEAF_NODE	364:99	364:99	10	;
LEAF_NODE	364:101	364:101	9	wp
LEAF_NODE	364:103	364:103	9	++
LEAF_NODE	364:105	364:105	9	)
EXPR_STATEMENT	365:3	365:15	9	wc -= stride ;
EXPR	365:3	365:3	10	wc -= stride
ASSIGN	365:3	365:9	11	wc -= stride
LVAL	365:3	365:3	12	wc
FIELD	365:3	365:3	13	wc
LEAF_NODE	365:3	365:3	14	wc
ASSIGN_OP	365:6	365:6	12	-=
LEAF_NODE	365:6	365:6	13	-=
RVAL	365:9	365:9	12	stride
FIELD	365:9	365:9	13	stride
LEAF_NODE	365:9	365:9	14	stride
LEAF_NODE	365:15	365:15	10	;
LEAF_NODE	366:2	366:2	8	}
LEAF_NODE	366:18	366:18	6	;
LEAF_NODE	367:1	367:1	5	}
JUMP_STATEMENT	368:1	368:9	3	return 1 ;
KEYWORD	368:1	368:1	4	return
LEAF_NODE	368:1	368:1	5	return
DESTINATION	368:8	368:8	4	1
EXPR	368:8	368:8	5	1
FIELD	368:8	368:8	6	1
LEAF_NODE	368:8	368:8	7	1
LEAF_NODE	368:9	368:9	4	;
LEAF_NODE	369:0	369:0	2	}
FUNCTION_DEF	371:0	379:0	1	
RETURN_TYPE	371:0	371:7	2	static int
LEAF_NODE	371:0	371:0	3	static
TYPE_NAME	371:7	371:7	3	int
LEAF_NODE	371:7	371:7	4	int
FUNCTION_NAME	372:0	372:0	2	swabHorAcc32
LEAF_NODE	372:0	372:0	3	swabHorAcc32
PARAMETER_LIST	372:12	372:47	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	372:12	372:12	3	(
PARAMETER_DECL	372:13	372:19	3	TIFF * tif
TYPE	372:13	372:17	4	TIFF *
TYPE_NAME	372:13	372:13	5	TIFF
LEAF_NODE	372:13	372:13	6	TIFF
POINTER	372:17	372:17	5	*
LEAF_NODE	372:17	372:17	6	*
NAME	372:19	372:19	4	tif
LEAF_NODE	372:19	372:19	5	tif
LEAF_NODE	372:22	372:22	3	,
PARAMETER_DECL	372:24	372:31	3	uint8 * cp0
TYPE	372:24	372:29	4	uint8 *
TYPE_NAME	372:24	372:24	5	uint8
LEAF_NODE	372:24	372:24	6	uint8
POINTER	372:29	372:29	5	*
LEAF_NODE	372:29	372:29	6	*
NAME	372:31	372:31	4	cp0
LEAF_NODE	372:31	372:31	5	cp0
LEAF_NODE	372:34	372:34	3	,
PARAMETER_DECL	372:36	372:45	3	tmsize_t cc
TYPE	372:36	372:36	4	tmsize_t
TYPE_NAME	372:36	372:36	5	tmsize_t
LEAF_NODE	372:36	372:36	6	tmsize_t
NAME	372:45	372:45	4	cc
LEAF_NODE	372:45	372:45	5	cc
LEAF_NODE	372:47	372:47	3	)
LEAF_NODE	373:0	373:0	2	{
STATEMENTS	374:1	378:1	2	
SIMPLE_DECL	374:1	374:27	3	uint32 * wp ; wp = ( uint32 * ) cp0 ;
VAR_DECL	374:1	374:9	4	uint32 * wp ; wp = ( uint32 * ) cp0
TYPE	374:1	374:7	5	uint32 *
TYPE_NAME	374:1	374:1	6	uint32
LEAF_NODE	374:1	374:1	7	uint32
POINTER	374:7	374:7	6	*
LEAF_NODE	374:7	374:7	7	*
NAME	374:9	374:9	5	wp
LEAF_NODE	374:9	374:9	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	374:9	374:9	5	wp = ( uint32 * ) cp0
ASSIGN	374:9	374:14	6	wp = ( uint32 * ) cp0
LVAL	374:9	374:9	7	wp
NAME	374:9	374:9	8	wp
LEAF_NODE	374:9	374:9	9	wp
ASSIGN_OP	374:12	374:12	7	=
LEAF_NODE	374:12	374:12	8	=
RVAL	374:14	374:24	7	( uint32 * ) cp0
LEAF_NODE	374:14	374:14	8	(
TYPE_NAME	374:15	374:15	8	uint32
LEAF_NODE	374:15	374:15	9	uint32
LEAF_NODE	374:21	374:21	8	*
LEAF_NODE	374:22	374:22	8	)
FIELD	374:24	374:24	8	cp0
LEAF_NODE	374:24	374:24	9	cp0
LEAF_NODE	374:27	374:27	4	;
SIMPLE_DECL	375:1	375:21	3	tmsize_t wc ; wc = cc / 4 ;
VAR_DECL	375:1	375:10	4	tmsize_t wc ; wc = cc / 4
TYPE	375:1	375:1	5	tmsize_t
TYPE_NAME	375:1	375:1	6	tmsize_t
LEAF_NODE	375:1	375:1	7	tmsize_t
NAME	375:10	375:10	5	wc
LEAF_NODE	375:10	375:10	6	wc
LEAF_NODE	0:0	0:0	5	;
INIT	375:10	375:10	5	wc = cc / 4
ASSIGN	375:10	375:15	6	wc = cc / 4
LVAL	375:10	375:10	7	wc
NAME	375:10	375:10	8	wc
LEAF_NODE	375:10	375:10	9	wc
ASSIGN_OP	375:13	375:13	7	=
LEAF_NODE	375:13	375:13	8	=
RVAL	375:15	375:20	7	cc / 4
FIELD	375:15	375:15	8	cc
LEAF_NODE	375:15	375:15	9	cc
LEAF_NODE	375:18	375:18	8	/
FIELD	375:20	375:20	8	4
LEAF_NODE	375:20	375:20	9	4
LEAF_NODE	375:21	375:21	4	;
EXPR_STATEMENT	377:8	377:35	3	TIFFSwabArrayOfLong ( wp , wc ) ;
EXPR	377:8	377:8	4	TIFFSwabArrayOfLong ( wp , wc )
FUNCTION_CALL	377:8	377:34	5	TIFFSwabArrayOfLong ( wp , wc )
CALLEE	377:8	377:8	6	TIFFSwabArrayOfLong
LEAF_NODE	377:8	377:8	7	TIFFSwabArrayOfLong
LEAF_NODE	377:27	377:27	6	(
ARGUMENT	377:28	377:28	6	wp
FIELD	377:28	377:28	7	wp
LEAF_NODE	377:28	377:28	8	wp
LEAF_NODE	377:30	377:30	6	,
ARGUMENT	377:32	377:32	6	wc
FIELD	377:32	377:32	7	wc
LEAF_NODE	377:32	377:32	8	wc
LEAF_NODE	377:34	377:34	6	)
LEAF_NODE	377:35	377:35	4	;
JUMP_STATEMENT	378:1	378:30	3	return horAcc32 ( tif , cp0 , cc ) ;
KEYWORD	378:1	378:1	4	return
LEAF_NODE	378:1	378:1	5	return
DESTINATION	378:8	378:8	4	horAcc32 ( tif , cp0 , cc )
EXPR	378:8	378:8	5	horAcc32 ( tif , cp0 , cc )
FUNCTION_CALL	378:8	378:29	6	horAcc32 ( tif , cp0 , cc )
CALLEE	378:8	378:8	7	horAcc32
LEAF_NODE	378:8	378:8	8	horAcc32
LEAF_NODE	378:16	378:16	7	(
ARGUMENT	378:17	378:17	7	tif
FIELD	378:17	378:17	8	tif
LEAF_NODE	378:17	378:17	9	tif
LEAF_NODE	378:20	378:20	7	,
ARGUMENT	378:22	378:22	7	cp0
FIELD	378:22	378:22	8	cp0
LEAF_NODE	378:22	378:22	9	cp0
LEAF_NODE	378:25	378:25	7	,
ARGUMENT	378:27	378:27	7	cc
FIELD	378:27	378:27	8	cc
LEAF_NODE	378:27	378:27	9	cc
LEAF_NODE	378:29	378:29	7	)
LEAF_NODE	378:30	378:30	4	;
LEAF_NODE	379:0	379:0	2	}
FUNCTION_DEF	382:0	404:0	1	
RETURN_TYPE	382:0	382:7	2	static int
LEAF_NODE	382:0	382:0	3	static
TYPE_NAME	382:7	382:7	3	int
LEAF_NODE	382:7	382:7	4	int
FUNCTION_NAME	383:0	383:0	2	horAcc32
LEAF_NODE	383:0	383:0	3	horAcc32
PARAMETER_LIST	383:8	383:43	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	383:8	383:8	3	(
PARAMETER_DECL	383:9	383:15	3	TIFF * tif
TYPE	383:9	383:13	4	TIFF *
TYPE_NAME	383:9	383:9	5	TIFF
LEAF_NODE	383:9	383:9	6	TIFF
POINTER	383:13	383:13	5	*
LEAF_NODE	383:13	383:13	6	*
NAME	383:15	383:15	4	tif
LEAF_NODE	383:15	383:15	5	tif
LEAF_NODE	383:18	383:18	3	,
PARAMETER_DECL	383:20	383:27	3	uint8 * cp0
TYPE	383:20	383:25	4	uint8 *
TYPE_NAME	383:20	383:20	5	uint8
LEAF_NODE	383:20	383:20	6	uint8
POINTER	383:25	383:25	5	*
LEAF_NODE	383:25	383:25	6	*
NAME	383:27	383:27	4	cp0
LEAF_NODE	383:27	383:27	5	cp0
LEAF_NODE	383:30	383:30	3	,
PARAMETER_DECL	383:32	383:41	3	tmsize_t cc
TYPE	383:32	383:32	4	tmsize_t
TYPE_NAME	383:32	383:32	5	tmsize_t
LEAF_NODE	383:32	383:32	6	tmsize_t
NAME	383:41	383:41	4	cc
LEAF_NODE	383:41	383:41	5	cc
LEAF_NODE	383:43	383:43	3	)
LEAF_NODE	384:0	384:0	2	{
STATEMENTS	385:1	403:1	2	
SIMPLE_DECL	385:1	385:46	3	tmsize_t stride ; stride = PredictorState ( tif ) -> stride ;
VAR_DECL	385:1	385:10	4	tmsize_t stride ; stride = PredictorState ( tif ) -> stride
TYPE	385:1	385:1	5	tmsize_t
TYPE_NAME	385:1	385:1	6	tmsize_t
LEAF_NODE	385:1	385:1	7	tmsize_t
NAME	385:10	385:10	5	stride
LEAF_NODE	385:10	385:10	6	stride
LEAF_NODE	0:0	0:0	5	;
INIT	385:10	385:10	5	stride = PredictorState ( tif ) -> stride
ASSIGN	385:10	385:19	6	stride = PredictorState ( tif ) -> stride
LVAL	385:10	385:10	7	stride
NAME	385:10	385:10	8	stride
LEAF_NODE	385:10	385:10	9	stride
ASSIGN_OP	385:17	385:17	7	=
LEAF_NODE	385:17	385:17	8	=
RVAL	385:19	385:40	7	PredictorState ( tif ) -> stride
FUNCTION_CALL	385:19	385:37	8	PredictorState ( tif )
CALLEE	385:19	385:19	9	PredictorState
LEAF_NODE	385:19	385:19	10	PredictorState
LEAF_NODE	385:33	385:33	9	(
ARGUMENT	385:34	385:34	9	tif
FIELD	385:34	385:34	10	tif
LEAF_NODE	385:34	385:34	11	tif
LEAF_NODE	385:37	385:37	9	)
LEAF_NODE	385:38	385:38	8	->
LEAF_NODE	385:40	385:40	8	stride
LEAF_NODE	385:46	385:46	4	;
SIMPLE_DECL	386:1	386:27	3	uint32 * wp ; wp = ( uint32 * ) cp0 ;
VAR_DECL	386:1	386:9	4	uint32 * wp ; wp = ( uint32 * ) cp0
TYPE	386:1	386:7	5	uint32 *
TYPE_NAME	386:1	386:1	6	uint32
LEAF_NODE	386:1	386:1	7	uint32
POINTER	386:7	386:7	6	*
LEAF_NODE	386:7	386:7	7	*
NAME	386:9	386:9	5	wp
LEAF_NODE	386:9	386:9	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	386:9	386:9	5	wp = ( uint32 * ) cp0
ASSIGN	386:9	386:14	6	wp = ( uint32 * ) cp0
LVAL	386:9	386:9	7	wp
NAME	386:9	386:9	8	wp
LEAF_NODE	386:9	386:9	9	wp
ASSIGN_OP	386:12	386:12	7	=
LEAF_NODE	386:12	386:12	8	=
RVAL	386:14	386:24	7	( uint32 * ) cp0
LEAF_NODE	386:14	386:14	8	(
TYPE_NAME	386:15	386:15	8	uint32
LEAF_NODE	386:15	386:15	9	uint32
LEAF_NODE	386:21	386:21	8	*
LEAF_NODE	386:22	386:22	8	)
FIELD	386:24	386:24	8	cp0
LEAF_NODE	386:24	386:24	9	cp0
LEAF_NODE	386:27	386:27	4	;
SIMPLE_DECL	387:1	387:21	3	tmsize_t wc ; wc = cc / 4 ;
VAR_DECL	387:1	387:10	4	tmsize_t wc ; wc = cc / 4
TYPE	387:1	387:1	5	tmsize_t
TYPE_NAME	387:1	387:1	6	tmsize_t
LEAF_NODE	387:1	387:1	7	tmsize_t
NAME	387:10	387:10	5	wc
LEAF_NODE	387:10	387:10	6	wc
LEAF_NODE	0:0	0:0	5	;
INIT	387:10	387:10	5	wc = cc / 4
ASSIGN	387:10	387:15	6	wc = cc / 4
LVAL	387:10	387:10	7	wc
NAME	387:10	387:10	8	wc
LEAF_NODE	387:10	387:10	9	wc
ASSIGN_OP	387:13	387:13	7	=
LEAF_NODE	387:13	387:13	8	=
RVAL	387:15	387:20	7	cc / 4
FIELD	387:15	387:15	8	cc
LEAF_NODE	387:15	387:15	9	cc
LEAF_NODE	387:18	387:18	8	/
FIELD	387:20	387:20	8	4
LEAF_NODE	387:20	387:20	9	4
LEAF_NODE	387:21	387:21	4	;
SELECTION	389:4	390:4	3	
KEYWORD	389:4	389:4	4	if
LEAF_NODE	389:4	389:4	5	if
LEAF_NODE	389:6	389:6	4	(
CONDITION	389:7	389:7	4	( cc % ( 4 * stride ) ) != 0
EXPR	389:7	389:24	5	( cc % ( 4 * stride ) ) != 0
LEAF_NODE	389:7	389:7	6	(
FIELD	389:8	389:8	6	cc
LEAF_NODE	389:8	389:8	7	cc
LEAF_NODE	389:10	389:10	6	%
LEAF_NODE	389:11	389:11	6	(
FIELD	389:12	389:12	6	4
LEAF_NODE	389:12	389:12	7	4
LEAF_NODE	389:13	389:13	6	*
FIELD	389:14	389:14	6	stride
LEAF_NODE	389:14	389:14	7	stride
LEAF_NODE	389:20	389:20	6	)
LEAF_NODE	389:21	389:21	6	)
EQ_OPERATOR	389:22	389:22	6	!=
LEAF_NODE	389:22	389:22	7	!=
FIELD	389:24	389:24	6	0
LEAF_NODE	389:24	389:24	7	0
LEAF_NODE	389:25	389:25	4	)
STATEMENTS	390:4	394:4	4	
LEAF_NODE	390:4	390:4	5	{
STATEMENTS	391:8	393:8	5	
EXPR_STATEMENT	391:8	392:47	6	TIFFErrorExt ( tif -> tif_clientdata , "horAcc32" , "%s" , "cc%(4*stride))!=0" ) ;
EXPR	391:8	391:8	7	TIFFErrorExt ( tif -> tif_clientdata , "horAcc32" , "%s" , "cc%(4*stride))!=0" )
FUNCTION_CALL	391:8	392:46	8	TIFFErrorExt ( tif -> tif_clientdata , "horAcc32" , "%s" , "cc%(4*stride))!=0" )
CALLEE	391:8	391:8	9	TIFFErrorExt
LEAF_NODE	391:8	391:8	10	TIFFErrorExt
LEAF_NODE	391:20	391:20	9	(
ARGUMENT	391:21	391:21	9	tif -> tif_clientdata
FIELD	391:21	391:26	10	tif -> tif_clientdata
LEAF_NODE	391:21	391:21	11	tif
LEAF_NODE	391:24	391:24	11	->
LEAF_NODE	391:26	391:26	11	tif_clientdata
LEAF_NODE	391:40	391:40	9	,
ARGUMENT	391:42	391:42	9	"horAcc32"
FIELD	391:42	391:42	10	"horAcc32"
LEAF_NODE	391:42	391:42	11	"horAcc32"
LEAF_NODE	391:52	391:52	9	,
ARGUMENT	392:21	392:21	9	"%s"
FIELD	392:21	392:21	10	"%s"
LEAF_NODE	392:21	392:21	11	"%s"
LEAF_NODE	392:25	392:25	9	,
ARGUMENT	392:27	392:27	9	"cc%(4*stride))!=0"
FIELD	392:27	392:27	10	"cc%(4*stride))!=0"
LEAF_NODE	392:27	392:27	11	"cc%(4*stride))!=0"
LEAF_NODE	392:46	392:46	9	)
LEAF_NODE	392:47	392:47	7	;
JUMP_STATEMENT	393:8	393:16	6	return 0 ;
KEYWORD	393:8	393:8	7	return
LEAF_NODE	393:8	393:8	8	return
DESTINATION	393:15	393:15	7	0
EXPR	393:15	393:15	8	0
FIELD	393:15	393:15	9	0
LEAF_NODE	393:15	393:15	10	0
LEAF_NODE	393:16	393:16	7	;
LEAF_NODE	394:4	394:4	5	}
SELECTION	396:1	396:18	3	
KEYWORD	396:1	396:1	4	if
LEAF_NODE	396:1	396:1	5	if
LEAF_NODE	396:4	396:4	4	(
CONDITION	396:5	396:5	4	wc > stride
EXPR	396:5	396:10	5	wc > stride
FIELD	396:5	396:5	6	wc
LEAF_NODE	396:5	396:5	7	wc
REL_OPERATOR	396:8	396:8	6	>
LEAF_NODE	396:8	396:8	7	>
FIELD	396:10	396:10	6	stride
LEAF_NODE	396:10	396:10	7	stride
LEAF_NODE	396:16	396:16	4	)
STATEMENTS	396:18	402:1	4	
LEAF_NODE	396:18	396:18	5	{
STATEMENTS	397:2	401:18	5	
EXPR_STATEMENT	397:2	397:14	6	wc -= stride ;
EXPR	397:2	397:2	7	wc -= stride
ASSIGN	397:2	397:8	8	wc -= stride
LVAL	397:2	397:2	9	wc
FIELD	397:2	397:2	10	wc
LEAF_NODE	397:2	397:2	11	wc
ASSIGN_OP	397:5	397:5	9	-=
LEAF_NODE	397:5	397:5	10	-=
RVAL	397:8	397:8	9	stride
FIELD	397:8	397:8	10	stride
LEAF_NODE	397:8	397:8	11	stride
LEAF_NODE	397:14	397:14	7	;
ITERATION	398:2	398:5	6	
KEYWORD	398:2	398:2	7	do
LEAF_NODE	398:2	398:2	8	do
LEAF_NODE	401:10	401:10	7	(
CONDITION	401:11	401:11	7	wc > 0
EXPR	401:11	401:16	8	wc > 0
FIELD	401:11	401:11	9	wc
LEAF_NODE	401:11	401:11	10	wc
REL_OPERATOR	401:14	401:14	9	>
LEAF_NODE	401:14	401:14	10	>
FIELD	401:16	401:16	9	0
LEAF_NODE	401:16	401:16	10	0
LEAF_NODE	401:17	401:17	7	)
STATEMENTS	398:5	401:2	7	
LEAF_NODE	398:5	398:5	8	{
STATEMENTS	399:3	400:3	8	
LEAF_NODE	399:3	399:3	9	REPEAT4
LEAF_NODE	399:10	399:10	9	(
EXPR_STATEMENT	399:11	399:38	9	stride , wp [ stride ] += wp [ 0 ] ;
EXPR	399:11	399:19	10	stride , wp [ stride ] += wp [ 0 ]
FIELD	399:11	399:11	11	stride
LEAF_NODE	399:11	399:11	12	stride
LEAF_NODE	399:17	399:17	11	,
ASSIGN	399:19	399:33	11	wp [ stride ] += wp [ 0 ]
LVAL	399:19	399:19	12	wp [ stride ]
FIELD	399:19	399:28	13	wp [ stride ]
LEAF_NODE	399:19	399:19	14	wp
LEAF_NODE	399:21	399:21	14	[
EXPR	399:22	399:22	14	stride
FIELD	399:22	399:22	15	stride
LEAF_NODE	399:22	399:22	16	stride
LEAF_NODE	399:28	399:28	14	]
ASSIGN_OP	399:30	399:30	12	+=
LEAF_NODE	399:30	399:30	13	+=
RVAL	399:33	399:33	12	wp [ 0 ]
FIELD	399:33	399:37	13	wp [ 0 ]
LEAF_NODE	399:33	399:33	14	wp
LEAF_NODE	399:35	399:35	14	[
EXPR	399:36	399:36	14	0
FIELD	399:36	399:36	15	0
LEAF_NODE	399:36	399:36	16	0
LEAF_NODE	399:37	399:37	14	]
LEAF_NODE	399:38	399:38	10	;
LEAF_NODE	399:40	399:40	9	wp
LEAF_NODE	399:42	399:42	9	++
LEAF_NODE	399:44	399:44	9	)
EXPR_STATEMENT	400:3	400:15	9	wc -= stride ;
EXPR	400:3	400:3	10	wc -= stride
ASSIGN	400:3	400:9	11	wc -= stride
LVAL	400:3	400:3	12	wc
FIELD	400:3	400:3	13	wc
LEAF_NODE	400:3	400:3	14	wc
ASSIGN_OP	400:6	400:6	12	-=
LEAF_NODE	400:6	400:6	13	-=
RVAL	400:9	400:9	12	stride
FIELD	400:9	400:9	13	stride
LEAF_NODE	400:9	400:9	14	stride
LEAF_NODE	400:15	400:15	10	;
LEAF_NODE	401:2	401:2	8	}
LEAF_NODE	401:18	401:18	6	;
LEAF_NODE	402:1	402:1	5	}
JUMP_STATEMENT	403:1	403:9	3	return 1 ;
KEYWORD	403:1	403:1	4	return
LEAF_NODE	403:1	403:1	5	return
DESTINATION	403:8	403:8	4	1
EXPR	403:8	403:8	5	1
FIELD	403:8	403:8	6	1
LEAF_NODE	403:8	403:8	7	1
LEAF_NODE	403:9	403:9	4	;
LEAF_NODE	404:0	404:0	2	}
FUNCTION_DEF	409:0	451:0	1	
RETURN_TYPE	409:0	409:7	2	static int
LEAF_NODE	409:0	409:0	3	static
TYPE_NAME	409:7	409:7	3	int
LEAF_NODE	409:7	409:7	4	int
FUNCTION_NAME	410:0	410:0	2	fpAcc
LEAF_NODE	410:0	410:0	3	fpAcc
PARAMETER_LIST	410:5	410:40	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	410:5	410:5	3	(
PARAMETER_DECL	410:6	410:12	3	TIFF * tif
TYPE	410:6	410:10	4	TIFF *
TYPE_NAME	410:6	410:6	5	TIFF
LEAF_NODE	410:6	410:6	6	TIFF
POINTER	410:10	410:10	5	*
LEAF_NODE	410:10	410:10	6	*
NAME	410:12	410:12	4	tif
LEAF_NODE	410:12	410:12	5	tif
LEAF_NODE	410:15	410:15	3	,
PARAMETER_DECL	410:17	410:24	3	uint8 * cp0
TYPE	410:17	410:22	4	uint8 *
TYPE_NAME	410:17	410:17	5	uint8
LEAF_NODE	410:17	410:17	6	uint8
POINTER	410:22	410:22	5	*
LEAF_NODE	410:22	410:22	6	*
NAME	410:24	410:24	4	cp0
LEAF_NODE	410:24	410:24	5	cp0
LEAF_NODE	410:27	410:27	3	,
PARAMETER_DECL	410:29	410:38	3	tmsize_t cc
TYPE	410:29	410:29	4	tmsize_t
TYPE_NAME	410:29	410:29	5	tmsize_t
LEAF_NODE	410:29	410:29	6	tmsize_t
NAME	410:38	410:38	4	cc
LEAF_NODE	410:38	410:38	5	cc
LEAF_NODE	410:40	410:40	3	)
LEAF_NODE	411:0	411:0	2	{
STATEMENTS	412:1	450:4	2	
SIMPLE_DECL	412:1	412:46	3	tmsize_t stride ; stride = PredictorState ( tif ) -> stride ;
VAR_DECL	412:1	412:10	4	tmsize_t stride ; stride = PredictorState ( tif ) -> stride
TYPE	412:1	412:1	5	tmsize_t
TYPE_NAME	412:1	412:1	6	tmsize_t
LEAF_NODE	412:1	412:1	7	tmsize_t
NAME	412:10	412:10	5	stride
LEAF_NODE	412:10	412:10	6	stride
LEAF_NODE	0:0	0:0	5	;
INIT	412:10	412:10	5	stride = PredictorState ( tif ) -> stride
ASSIGN	412:10	412:19	6	stride = PredictorState ( tif ) -> stride
LVAL	412:10	412:10	7	stride
NAME	412:10	412:10	8	stride
LEAF_NODE	412:10	412:10	9	stride
ASSIGN_OP	412:17	412:17	7	=
LEAF_NODE	412:17	412:17	8	=
RVAL	412:19	412:40	7	PredictorState ( tif ) -> stride
FUNCTION_CALL	412:19	412:37	8	PredictorState ( tif )
CALLEE	412:19	412:19	9	PredictorState
LEAF_NODE	412:19	412:19	10	PredictorState
LEAF_NODE	412:33	412:33	9	(
ARGUMENT	412:34	412:34	9	tif
FIELD	412:34	412:34	10	tif
LEAF_NODE	412:34	412:34	11	tif
LEAF_NODE	412:37	412:37	9	)
LEAF_NODE	412:38	412:38	8	->
LEAF_NODE	412:40	412:40	8	stride
LEAF_NODE	412:46	412:46	4	;
SIMPLE_DECL	413:1	413:47	3	uint32 bps ; bps = tif -> tif_dir . td_bitspersample / 8 ;
VAR_DECL	413:1	413:8	4	uint32 bps ; bps = tif -> tif_dir . td_bitspersample / 8
TYPE	413:1	413:1	5	uint32
TYPE_NAME	413:1	413:1	6	uint32
LEAF_NODE	413:1	413:1	7	uint32
NAME	413:8	413:8	5	bps
LEAF_NODE	413:8	413:8	6	bps
LEAF_NODE	0:0	0:0	5	;
INIT	413:8	413:8	5	bps = tif -> tif_dir . td_bitspersample / 8
ASSIGN	413:8	413:14	6	bps = tif -> tif_dir . td_bitspersample / 8
LVAL	413:8	413:8	7	bps
NAME	413:8	413:8	8	bps
LEAF_NODE	413:8	413:8	9	bps
ASSIGN_OP	413:12	413:12	7	=
LEAF_NODE	413:12	413:12	8	=
RVAL	413:14	413:46	7	tif -> tif_dir . td_bitspersample / 8
FIELD	413:14	413:27	8	tif -> tif_dir . td_bitspersample
LEAF_NODE	413:14	413:14	9	tif
LEAF_NODE	413:17	413:17	9	->
LEAF_NODE	413:19	413:19	9	tif_dir
LEAF_NODE	413:26	413:26	9	.
LEAF_NODE	413:27	413:27	9	td_bitspersample
LEAF_NODE	413:44	413:44	8	/
FIELD	413:46	413:46	8	8
LEAF_NODE	413:46	413:46	9	8
LEAF_NODE	413:47	413:47	4	;
SIMPLE_DECL	414:1	414:23	3	tmsize_t wc ; wc = cc / bps ;
VAR_DECL	414:1	414:10	4	tmsize_t wc ; wc = cc / bps
TYPE	414:1	414:1	5	tmsize_t
TYPE_NAME	414:1	414:1	6	tmsize_t
LEAF_NODE	414:1	414:1	7	tmsize_t
NAME	414:10	414:10	5	wc
LEAF_NODE	414:10	414:10	6	wc
LEAF_NODE	0:0	0:0	5	;
INIT	414:10	414:10	5	wc = cc / bps
ASSIGN	414:10	414:15	6	wc = cc / bps
LVAL	414:10	414:10	7	wc
NAME	414:10	414:10	8	wc
LEAF_NODE	414:10	414:10	9	wc
ASSIGN_OP	414:13	414:13	7	=
LEAF_NODE	414:13	414:13	8	=
RVAL	414:15	414:20	7	cc / bps
FIELD	414:15	414:15	8	cc
LEAF_NODE	414:15	414:15	9	cc
LEAF_NODE	414:18	414:18	8	/
FIELD	414:20	414:20	8	bps
LEAF_NODE	414:20	414:20	9	bps
LEAF_NODE	414:23	414:23	4	;
SIMPLE_DECL	415:1	415:20	3	tmsize_t count ; count = cc ;
VAR_DECL	415:1	415:10	4	tmsize_t count ; count = cc
TYPE	415:1	415:1	5	tmsize_t
TYPE_NAME	415:1	415:1	6	tmsize_t
LEAF_NODE	415:1	415:1	7	tmsize_t
NAME	415:10	415:10	5	count
LEAF_NODE	415:10	415:10	6	count
LEAF_NODE	0:0	0:0	5	;
INIT	415:10	415:10	5	count = cc
ASSIGN	415:10	415:18	6	count = cc
LVAL	415:10	415:10	7	count
NAME	415:10	415:10	8	count
LEAF_NODE	415:10	415:10	9	count
ASSIGN_OP	415:16	415:16	7	=
LEAF_NODE	415:16	415:16	8	=
RVAL	415:18	415:18	7	cc
FIELD	415:18	415:18	8	cc
LEAF_NODE	415:18	415:18	9	cc
LEAF_NODE	415:20	415:20	4	;
SIMPLE_DECL	416:1	416:26	3	uint8 * cp ; cp = ( uint8 * ) cp0 ;
VAR_DECL	416:1	416:8	4	uint8 * cp ; cp = ( uint8 * ) cp0
TYPE	416:1	416:7	5	uint8 *
TYPE_NAME	416:1	416:1	6	uint8
LEAF_NODE	416:1	416:1	7	uint8
POINTER	416:7	416:7	6	*
LEAF_NODE	416:7	416:7	7	*
NAME	416:8	416:8	5	cp
LEAF_NODE	416:8	416:8	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	416:8	416:8	5	cp = ( uint8 * ) cp0
ASSIGN	416:8	416:13	6	cp = ( uint8 * ) cp0
LVAL	416:8	416:8	7	cp
NAME	416:8	416:8	8	cp
LEAF_NODE	416:8	416:8	9	cp
ASSIGN_OP	416:11	416:11	7	=
LEAF_NODE	416:11	416:11	8	=
RVAL	416:13	416:23	7	( uint8 * ) cp0
LEAF_NODE	416:13	416:13	8	(
TYPE_NAME	416:14	416:14	8	uint8
LEAF_NODE	416:14	416:14	9	uint8
LEAF_NODE	416:20	416:20	8	*
LEAF_NODE	416:21	416:21	8	)
FIELD	416:23	416:23	8	cp0
LEAF_NODE	416:23	416:23	9	cp0
LEAF_NODE	416:26	416:26	4	;
SIMPLE_DECL	417:1	417:11	3	uint8 * tmp ;
VAR_DECL	417:1	417:8	4	uint8 * tmp
TYPE	417:1	417:7	5	uint8 *
TYPE_NAME	417:1	417:1	6	uint8
LEAF_NODE	417:1	417:1	7	uint8
POINTER	417:7	417:7	6	*
LEAF_NODE	417:7	417:7	7	*
NAME	417:8	417:8	5	tmp
LEAF_NODE	417:8	417:8	6	tmp
LEAF_NODE	417:11	417:11	4	;
SELECTION	419:4	420:4	3	
KEYWORD	419:4	419:4	4	if
LEAF_NODE	419:4	419:4	5	if
LEAF_NODE	419:6	419:6	4	(
CONDITION	419:7	419:7	4	cc % ( bps * stride ) != 0
EXPR	419:7	419:24	5	cc % ( bps * stride ) != 0
FIELD	419:7	419:7	6	cc
LEAF_NODE	419:7	419:7	7	cc
LEAF_NODE	419:9	419:9	6	%
LEAF_NODE	419:10	419:10	6	(
FIELD	419:11	419:11	6	bps
LEAF_NODE	419:11	419:11	7	bps
LEAF_NODE	419:14	419:14	6	*
FIELD	419:15	419:15	6	stride
LEAF_NODE	419:15	419:15	7	stride
LEAF_NODE	419:21	419:21	6	)
EQ_OPERATOR	419:22	419:22	6	!=
LEAF_NODE	419:22	419:22	7	!=
FIELD	419:24	419:24	6	0
LEAF_NODE	419:24	419:24	7	0
LEAF_NODE	419:25	419:25	4	)
STATEMENTS	420:4	424:4	4	
LEAF_NODE	420:4	420:4	5	{
STATEMENTS	421:8	423:8	5	
EXPR_STATEMENT	421:8	422:49	6	TIFFErrorExt ( tif -> tif_clientdata , "fpAcc" , "%s" , "cc%(bps*stride))!=0" ) ;
EXPR	421:8	421:8	7	TIFFErrorExt ( tif -> tif_clientdata , "fpAcc" , "%s" , "cc%(bps*stride))!=0" )
FUNCTION_CALL	421:8	422:48	8	TIFFErrorExt ( tif -> tif_clientdata , "fpAcc" , "%s" , "cc%(bps*stride))!=0" )
CALLEE	421:8	421:8	9	TIFFErrorExt
LEAF_NODE	421:8	421:8	10	TIFFErrorExt
LEAF_NODE	421:20	421:20	9	(
ARGUMENT	421:21	421:21	9	tif -> tif_clientdata
FIELD	421:21	421:26	10	tif -> tif_clientdata
LEAF_NODE	421:21	421:21	11	tif
LEAF_NODE	421:24	421:24	11	->
LEAF_NODE	421:26	421:26	11	tif_clientdata
LEAF_NODE	421:40	421:40	9	,
ARGUMENT	421:42	421:42	9	"fpAcc"
FIELD	421:42	421:42	10	"fpAcc"
LEAF_NODE	421:42	421:42	11	"fpAcc"
LEAF_NODE	421:49	421:49	9	,
ARGUMENT	422:21	422:21	9	"%s"
FIELD	422:21	422:21	10	"%s"
LEAF_NODE	422:21	422:21	11	"%s"
LEAF_NODE	422:25	422:25	9	,
ARGUMENT	422:27	422:27	9	"cc%(bps*stride))!=0"
FIELD	422:27	422:27	10	"cc%(bps*stride))!=0"
LEAF_NODE	422:27	422:27	11	"cc%(bps*stride))!=0"
LEAF_NODE	422:48	422:48	9	)
LEAF_NODE	422:49	422:49	7	;
JUMP_STATEMENT	423:8	423:16	6	return 0 ;
KEYWORD	423:8	423:8	7	return
LEAF_NODE	423:8	423:8	8	return
DESTINATION	423:15	423:15	7	0
EXPR	423:15	423:15	8	0
FIELD	423:15	423:15	9	0
LEAF_NODE	423:15	423:15	10	0
LEAF_NODE	423:16	423:16	7	;
LEAF_NODE	424:4	424:4	5	}
EXPR_STATEMENT	426:4	426:34	3	tmp = ( uint8 * ) _TIFFmalloc ( cc ) ;
EXPR	426:4	426:4	4	tmp = ( uint8 * ) _TIFFmalloc ( cc )
ASSIGN	426:4	426:10	5	tmp = ( uint8 * ) _TIFFmalloc ( cc )
LVAL	426:4	426:4	6	tmp
FIELD	426:4	426:4	7	tmp
LEAF_NODE	426:4	426:4	8	tmp
ASSIGN_OP	426:8	426:8	6	=
LEAF_NODE	426:8	426:8	7	=
RVAL	426:10	426:19	6	( uint8 * ) _TIFFmalloc ( cc )
LEAF_NODE	426:10	426:10	7	(
TYPE_NAME	426:11	426:11	7	uint8
LEAF_NODE	426:11	426:11	8	uint8
LEAF_NODE	426:17	426:17	7	*
LEAF_NODE	426:18	426:18	7	)
FUNCTION_CALL	426:19	426:33	7	_TIFFmalloc ( cc )
CALLEE	426:19	426:19	8	_TIFFmalloc
LEAF_NODE	426:19	426:19	9	_TIFFmalloc
LEAF_NODE	426:30	426:30	8	(
ARGUMENT	426:31	426:31	8	cc
FIELD	426:31	426:31	9	cc
LEAF_NODE	426:31	426:31	10	cc
LEAF_NODE	426:33	426:33	8	)
LEAF_NODE	426:34	426:34	4	;
SELECTION	427:1	428:2	3	
KEYWORD	427:1	427:1	4	if
LEAF_NODE	427:1	427:1	5	if
LEAF_NODE	427:4	427:4	4	(
CONDITION	427:5	427:5	4	! tmp
EXPR	427:5	427:5	5	! tmp
UNARY_EXPR	427:5	427:6	6	! tmp
UNARY_OPERATOR	427:5	427:5	7	!
LEAF_NODE	427:5	427:5	8	!
FIELD	427:6	427:6	7	tmp
LEAF_NODE	427:6	427:6	8	tmp
LEAF_NODE	427:9	427:9	4	)
STATEMENTS	428:2	428:2	4	
JUMP_STATEMENT	428:2	428:10	5	return 0 ;
KEYWORD	428:2	428:2	6	return
LEAF_NODE	428:2	428:2	7	return
DESTINATION	428:9	428:9	6	0
EXPR	428:9	428:9	7	0
FIELD	428:9	428:9	8	0
LEAF_NODE	428:9	428:9	9	0
LEAF_NODE	428:10	428:10	6	;
ITERATION	430:1	430:24	3	
KEYWORD	430:1	430:1	4	while
LEAF_NODE	430:1	430:1	5	while
LEAF_NODE	430:7	430:7	4	(
CONDITION	430:8	430:8	4	count > stride
EXPR	430:8	430:16	5	count > stride
FIELD	430:8	430:8	6	count
LEAF_NODE	430:8	430:8	7	count
REL_OPERATOR	430:14	430:14	6	>
LEAF_NODE	430:14	430:14	7	>
FIELD	430:16	430:16	6	stride
LEAF_NODE	430:16	430:16	7	stride
LEAF_NODE	430:22	430:22	4	)
STATEMENTS	430:24	434:1	4	
LEAF_NODE	430:24	430:24	5	{
STATEMENTS	431:2	433:2	5	
LEAF_NODE	431:2	431:2	6	REPEAT4
LEAF_NODE	431:9	431:9	6	(
EXPR_STATEMENT	431:10	432:69	6	stride , cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + cp [ 0 ] ) & 0xff ) ;
EXPR	431:10	431:18	7	stride , cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + cp [ 0 ] ) & 0xff )
FIELD	431:10	431:10	8	stride
LEAF_NODE	431:10	431:10	9	stride
LEAF_NODE	431:16	431:16	8	,
ASSIGN	431:18	432:24	8	cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + cp [ 0 ] ) & 0xff )
LVAL	431:18	431:18	9	cp [ stride ]
FIELD	431:18	431:27	10	cp [ stride ]
LEAF_NODE	431:18	431:18	11	cp
LEAF_NODE	431:20	431:20	11	[
EXPR	431:21	431:21	11	stride
FIELD	431:21	431:21	12	stride
LEAF_NODE	431:21	431:21	13	stride
LEAF_NODE	431:27	431:27	11	]
ASSIGN_OP	431:29	431:29	9	=
LEAF_NODE	431:29	431:29	10	=
RVAL	432:24	432:68	9	( unsigned char ) ( ( cp [ stride ] + cp [ 0 ] ) & 0xff )
LEAF_NODE	432:24	432:24	10	(
TYPE_NAME	432:25	432:34	10	unsigned char
LEAF_NODE	432:25	432:25	11	unsigned
LEAF_NODE	432:34	432:34	11	char
LEAF_NODE	432:38	432:38	10	)
LEAF_NODE	432:40	432:40	10	(
LEAF_NODE	432:41	432:41	10	(
FIELD	432:42	432:51	10	cp [ stride ]
LEAF_NODE	432:42	432:42	11	cp
LEAF_NODE	432:44	432:44	11	[
EXPR	432:45	432:45	11	stride
FIELD	432:45	432:45	12	stride
LEAF_NODE	432:45	432:45	13	stride
LEAF_NODE	432:51	432:51	11	]
LEAF_NODE	432:53	432:53	10	+
FIELD	432:55	432:59	10	cp [ 0 ]
LEAF_NODE	432:55	432:55	11	cp
LEAF_NODE	432:57	432:57	11	[
EXPR	432:58	432:58	11	0
FIELD	432:58	432:58	12	0
LEAF_NODE	432:58	432:58	13	0
LEAF_NODE	432:59	432:59	11	]
LEAF_NODE	432:60	432:60	10	)
LEAF_NODE	432:62	432:62	10	&
FIELD	432:64	432:64	10	0xff
LEAF_NODE	432:64	432:64	11	0xff
LEAF_NODE	432:68	432:68	10	)
LEAF_NODE	432:69	432:69	7	;
LEAF_NODE	432:71	432:71	6	cp
LEAF_NODE	432:73	432:73	6	++
LEAF_NODE	432:75	432:75	6	)
EXPR_STATEMENT	433:2	433:17	6	count -= stride ;
EXPR	433:2	433:2	7	count -= stride
ASSIGN	433:2	433:11	8	count -= stride
LVAL	433:2	433:2	9	count
FIELD	433:2	433:2	10	count
LEAF_NODE	433:2	433:2	11	count
ASSIGN_OP	433:8	433:8	9	-=
LEAF_NODE	433:8	433:8	10	-=
RVAL	433:11	433:11	9	stride
FIELD	433:11	433:11	10	stride
LEAF_NODE	433:11	433:11	11	stride
LEAF_NODE	433:17	433:17	7	;
LEAF_NODE	434:1	434:1	5	}
EXPR_STATEMENT	436:1	436:26	3	_TIFFmemcpy ( tmp , cp0 , cc ) ;
EXPR	436:1	436:1	4	_TIFFmemcpy ( tmp , cp0 , cc )
FUNCTION_CALL	436:1	436:25	5	_TIFFmemcpy ( tmp , cp0 , cc )
CALLEE	436:1	436:1	6	_TIFFmemcpy
LEAF_NODE	436:1	436:1	7	_TIFFmemcpy
LEAF_NODE	436:12	436:12	6	(
ARGUMENT	436:13	436:13	6	tmp
FIELD	436:13	436:13	7	tmp
LEAF_NODE	436:13	436:13	8	tmp
LEAF_NODE	436:16	436:16	6	,
ARGUMENT	436:18	436:18	6	cp0
FIELD	436:18	436:18	7	cp0
LEAF_NODE	436:18	436:18	8	cp0
LEAF_NODE	436:21	436:21	6	,
ARGUMENT	436:23	436:23	6	cc
FIELD	436:23	436:23	7	cc
LEAF_NODE	436:23	436:23	8	cc
LEAF_NODE	436:25	436:25	6	)
LEAF_NODE	436:26	436:26	4	;
EXPR_STATEMENT	437:1	437:19	3	cp = ( uint8 * ) cp0 ;
EXPR	437:1	437:1	4	cp = ( uint8 * ) cp0
ASSIGN	437:1	437:6	5	cp = ( uint8 * ) cp0
LVAL	437:1	437:1	6	cp
FIELD	437:1	437:1	7	cp
LEAF_NODE	437:1	437:1	8	cp
ASSIGN_OP	437:4	437:4	6	=
LEAF_NODE	437:4	437:4	7	=
RVAL	437:6	437:16	6	( uint8 * ) cp0
LEAF_NODE	437:6	437:6	7	(
TYPE_NAME	437:7	437:7	7	uint8
LEAF_NODE	437:7	437:7	8	uint8
LEAF_NODE	437:13	437:13	7	*
LEAF_NODE	437:14	437:14	7	)
FIELD	437:16	437:16	7	cp0
LEAF_NODE	437:16	437:16	8	cp0
LEAF_NODE	437:19	437:19	4	;
ITERATION	438:1	438:38	3	
KEYWORD	438:1	438:1	4	for
LEAF_NODE	438:1	438:1	5	for
LEAF_NODE	438:5	438:5	4	(
FOR_INIT	438:6	438:15	4	count = 0 ;
EXPR	438:6	438:6	5	count = 0
ASSIGN	438:6	438:14	6	count = 0
LVAL	438:6	438:6	7	count
FIELD	438:6	438:6	8	count
LEAF_NODE	438:6	438:6	9	count
ASSIGN_OP	438:12	438:12	7	=
LEAF_NODE	438:12	438:12	8	=
RVAL	438:14	438:14	7	0
FIELD	438:14	438:14	8	0
LEAF_NODE	438:14	438:14	9	0
LEAF_NODE	438:15	438:15	5	;
CONDITION	438:17	438:17	4	count < wc
EXPR	438:17	438:25	5	count < wc
FIELD	438:17	438:17	6	count
LEAF_NODE	438:17	438:17	7	count
REL_OPERATOR	438:23	438:23	6	<
LEAF_NODE	438:23	438:23	7	<
FIELD	438:25	438:25	6	wc
LEAF_NODE	438:25	438:25	7	wc
LEAF_NODE	438:27	438:27	4	;
FOR_EXPR	438:29	438:29	4	count ++
EXPR	438:29	438:29	5	count ++
FIELD	438:29	438:34	6	count ++
LEAF_NODE	438:29	438:29	7	count
LEAF_NODE	438:34	438:34	7	++
LEAF_NODE	438:36	438:36	4	)
STATEMENTS	438:38	448:1	4	
LEAF_NODE	438:38	438:38	5	{
STATEMENTS	439:2	440:2	5	
SIMPLE_DECL	439:2	439:13	6	uint32 byte ;
VAR_DECL	439:2	439:9	7	uint32 byte
TYPE	439:2	439:2	8	uint32
TYPE_NAME	439:2	439:2	9	uint32
LEAF_NODE	439:2	439:2	10	uint32
NAME	439:9	439:9	8	byte
LEAF_NODE	439:9	439:9	9	byte
LEAF_NODE	439:13	439:13	7	;
ITERATION	440:2	440:37	6	
KEYWORD	440:2	440:2	7	for
LEAF_NODE	440:2	440:2	8	for
LEAF_NODE	440:6	440:6	7	(
FOR_INIT	440:7	440:15	7	byte = 0 ;
EXPR	440:7	440:7	8	byte = 0
ASSIGN	440:7	440:14	9	byte = 0
LVAL	440:7	440:7	10	byte
FIELD	440:7	440:7	11	byte
LEAF_NODE	440:7	440:7	12	byte
ASSIGN_OP	440:12	440:12	10	=
LEAF_NODE	440:12	440:12	11	=
RVAL	440:14	440:14	10	0
FIELD	440:14	440:14	11	0
LEAF_NODE	440:14	440:14	12	0
LEAF_NODE	440:15	440:15	8	;
CONDITION	440:17	440:17	7	byte < bps
EXPR	440:17	440:24	8	byte < bps
FIELD	440:17	440:17	9	byte
LEAF_NODE	440:17	440:17	10	byte
REL_OPERATOR	440:22	440:22	9	<
LEAF_NODE	440:22	440:22	10	<
FIELD	440:24	440:24	9	bps
LEAF_NODE	440:24	440:24	10	bps
LEAF_NODE	440:27	440:27	7	;
FOR_EXPR	440:29	440:29	7	byte ++
EXPR	440:29	440:29	8	byte ++
FIELD	440:29	440:33	9	byte ++
LEAF_NODE	440:29	440:29	10	byte
LEAF_NODE	440:33	440:33	10	++
LEAF_NODE	440:35	440:35	7	)
STATEMENTS	440:37	447:2	7	
LEAF_NODE	440:37	440:37	8	{
STATEMENTS	442:3	444:3	8	
EXPR_STATEMENT	442:3	442:50	9	cp [ bps * count + byte ] = tmp [ byte * wc + count ] ;
EXPR	442:3	442:3	10	cp [ bps * count + byte ] = tmp [ byte * wc + count ]
ASSIGN	442:3	442:28	11	cp [ bps * count + byte ] = tmp [ byte * wc + count ]
LVAL	442:3	442:3	12	cp [ bps * count + byte ]
FIELD	442:3	442:24	13	cp [ bps * count + byte ]
LEAF_NODE	442:3	442:3	14	cp
LEAF_NODE	442:5	442:5	14	[
EXPR	442:6	442:20	14	bps * count + byte
FIELD	442:6	442:6	15	bps
LEAF_NODE	442:6	442:6	16	bps
LEAF_NODE	442:10	442:10	15	*
FIELD	442:12	442:12	15	count
LEAF_NODE	442:12	442:12	16	count
LEAF_NODE	442:18	442:18	15	+
FIELD	442:20	442:20	15	byte
LEAF_NODE	442:20	442:20	16	byte
LEAF_NODE	442:24	442:24	14	]
ASSIGN_OP	442:26	442:26	12	=
LEAF_NODE	442:26	442:26	13	=
RVAL	442:28	442:28	12	tmp [ byte * wc + count ]
FIELD	442:28	442:49	13	tmp [ byte * wc + count ]
LEAF_NODE	442:28	442:28	14	tmp
LEAF_NODE	442:31	442:31	14	[
EXPR	442:32	442:44	14	byte * wc + count
FIELD	442:32	442:32	15	byte
LEAF_NODE	442:32	442:32	16	byte
LEAF_NODE	442:37	442:37	15	*
FIELD	442:39	442:39	15	wc
LEAF_NODE	442:39	442:39	16	wc
LEAF_NODE	442:42	442:42	15	+
FIELD	442:44	442:44	15	count
LEAF_NODE	442:44	442:44	16	count
LEAF_NODE	442:49	442:49	14	]
LEAF_NODE	442:50	442:50	10	;
EXPR_STATEMENT	444:3	445:38	9	cp [ bps * count + byte ] = tmp [ ( bps - byte - 1 ) * wc + count ] ;
EXPR	444:3	444:3	10	cp [ bps * count + byte ] = tmp [ ( bps - byte - 1 ) * wc + count ]
ASSIGN	444:3	445:4	11	cp [ bps * count + byte ] = tmp [ ( bps - byte - 1 ) * wc + count ]
LVAL	444:3	444:3	12	cp [ bps * count + byte ]
FIELD	444:3	444:24	13	cp [ bps * count + byte ]
LEAF_NODE	444:3	444:3	14	cp
LEAF_NODE	444:5	444:5	14	[
EXPR	444:6	444:20	14	bps * count + byte
FIELD	444:6	444:6	15	bps
LEAF_NODE	444:6	444:6	16	bps
LEAF_NODE	444:10	444:10	15	*
FIELD	444:12	444:12	15	count
LEAF_NODE	444:12	444:12	16	count
LEAF_NODE	444:18	444:18	15	+
FIELD	444:20	444:20	15	byte
LEAF_NODE	444:20	444:20	16	byte
LEAF_NODE	444:24	444:24	14	]
ASSIGN_OP	444:26	444:26	12	=
LEAF_NODE	444:26	444:26	13	=
RVAL	445:4	445:4	12	tmp [ ( bps - byte - 1 ) * wc + count ]
FIELD	445:4	445:37	13	tmp [ ( bps - byte - 1 ) * wc + count ]
LEAF_NODE	445:4	445:4	14	tmp
LEAF_NODE	445:7	445:7	14	[
EXPR	445:8	445:32	14	( bps - byte - 1 ) * wc + count
LEAF_NODE	445:8	445:8	15	(
FIELD	445:9	445:9	15	bps
LEAF_NODE	445:9	445:9	16	bps
LEAF_NODE	445:13	445:13	15	-
FIELD	445:15	445:15	15	byte
LEAF_NODE	445:15	445:15	16	byte
LEAF_NODE	445:20	445:20	15	-
FIELD	445:22	445:22	15	1
LEAF_NODE	445:22	445:22	16	1
LEAF_NODE	445:23	445:23	15	)
LEAF_NODE	445:25	445:25	15	*
FIELD	445:27	445:27	15	wc
LEAF_NODE	445:27	445:27	16	wc
LEAF_NODE	445:30	445:30	15	+
FIELD	445:32	445:32	15	count
LEAF_NODE	445:32	445:32	16	count
LEAF_NODE	445:37	445:37	14	]
LEAF_NODE	445:38	445:38	10	;
LEAF_NODE	447:2	447:2	8	}
LEAF_NODE	448:1	448:1	5	}
EXPR_STATEMENT	449:1	449:15	3	_TIFFfree ( tmp ) ;
EXPR	449:1	449:1	4	_TIFFfree ( tmp )
FUNCTION_CALL	449:1	449:14	5	_TIFFfree ( tmp )
CALLEE	449:1	449:1	6	_TIFFfree
LEAF_NODE	449:1	449:1	7	_TIFFfree
LEAF_NODE	449:10	449:10	6	(
ARGUMENT	449:11	449:11	6	tmp
FIELD	449:11	449:11	7	tmp
LEAF_NODE	449:11	449:11	8	tmp
LEAF_NODE	449:14	449:14	6	)
LEAF_NODE	449:15	449:15	4	;
JUMP_STATEMENT	450:4	450:12	3	return 1 ;
KEYWORD	450:4	450:4	4	return
LEAF_NODE	450:4	450:4	5	return
DESTINATION	450:11	450:11	4	1
EXPR	450:11	450:11	5	1
FIELD	450:11	450:11	6	1
LEAF_NODE	450:11	450:11	7	1
LEAF_NODE	450:12	450:12	4	;
LEAF_NODE	451:0	451:0	2	}
FUNCTION_DEF	456:0	469:0	1	
RETURN_TYPE	456:0	456:7	2	static int
LEAF_NODE	456:0	456:0	3	static
TYPE_NAME	456:7	456:7	3	int
LEAF_NODE	456:7	456:7	4	int
FUNCTION_NAME	457:0	457:0	2	PredictorDecodeRow
LEAF_NODE	457:0	457:0	3	PredictorDecodeRow
PARAMETER_LIST	457:18	457:65	2	( TIFF * tif , uint8 * op0 , tmsize_t occ0 , uint16 s )
LEAF_NODE	457:18	457:18	3	(
PARAMETER_DECL	457:19	457:25	3	TIFF * tif
TYPE	457:19	457:23	4	TIFF *
TYPE_NAME	457:19	457:19	5	TIFF
LEAF_NODE	457:19	457:19	6	TIFF
POINTER	457:23	457:23	5	*
LEAF_NODE	457:23	457:23	6	*
NAME	457:25	457:25	4	tif
LEAF_NODE	457:25	457:25	5	tif
LEAF_NODE	457:28	457:28	3	,
PARAMETER_DECL	457:30	457:37	3	uint8 * op0
TYPE	457:30	457:35	4	uint8 *
TYPE_NAME	457:30	457:30	5	uint8
LEAF_NODE	457:30	457:30	6	uint8
POINTER	457:35	457:35	5	*
LEAF_NODE	457:35	457:35	6	*
NAME	457:37	457:37	4	op0
LEAF_NODE	457:37	457:37	5	op0
LEAF_NODE	457:40	457:40	3	,
PARAMETER_DECL	457:42	457:51	3	tmsize_t occ0
TYPE	457:42	457:42	4	tmsize_t
TYPE_NAME	457:42	457:42	5	tmsize_t
LEAF_NODE	457:42	457:42	6	tmsize_t
NAME	457:51	457:51	4	occ0
LEAF_NODE	457:51	457:51	5	occ0
LEAF_NODE	457:55	457:55	3	,
PARAMETER_DECL	457:57	457:64	3	uint16 s
TYPE	457:57	457:57	4	uint16
TYPE_NAME	457:57	457:57	5	uint16
LEAF_NODE	457:57	457:57	6	uint16
NAME	457:64	457:64	4	s
LEAF_NODE	457:64	457:64	5	s
LEAF_NODE	457:65	457:65	3	)
LEAF_NODE	458:0	458:0	2	{
STATEMENTS	459:1	467:3	2	
SIMPLE_DECL	459:1	459:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	459:1	459:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	459:1	459:20	5	TIFFPredictorState *
TYPE_NAME	459:1	459:1	6	TIFFPredictorState
LEAF_NODE	459:1	459:1	7	TIFFPredictorState
POINTER	459:20	459:20	6	*
LEAF_NODE	459:20	459:20	7	*
NAME	459:21	459:21	5	sp
LEAF_NODE	459:21	459:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	459:21	459:21	5	sp = PredictorState ( tif )
ASSIGN	459:21	459:26	6	sp = PredictorState ( tif )
LVAL	459:21	459:21	7	sp
NAME	459:21	459:21	8	sp
LEAF_NODE	459:21	459:21	9	sp
ASSIGN_OP	459:24	459:24	7	=
LEAF_NODE	459:24	459:24	8	=
RVAL	459:26	459:26	7	PredictorState ( tif )
FUNCTION_CALL	459:26	459:44	8	PredictorState ( tif )
CALLEE	459:26	459:26	9	PredictorState
LEAF_NODE	459:26	459:26	10	PredictorState
LEAF_NODE	459:40	459:40	9	(
ARGUMENT	459:41	459:41	9	tif
FIELD	459:41	459:41	10	tif
LEAF_NODE	459:41	459:41	11	tif
LEAF_NODE	459:44	459:44	9	)
LEAF_NODE	459:45	459:45	4	;
EXPR_STATEMENT	461:1	461:19	3	assert ( sp != NULL ) ;
EXPR	461:1	461:1	4	assert ( sp != NULL )
FUNCTION_CALL	461:1	461:18	5	assert ( sp != NULL )
CALLEE	461:1	461:1	6	assert
LEAF_NODE	461:1	461:1	7	assert
LEAF_NODE	461:7	461:7	6	(
ARGUMENT	461:8	461:14	6	sp != NULL
FIELD	461:8	461:8	7	sp
LEAF_NODE	461:8	461:8	8	sp
EQ_OPERATOR	461:11	461:11	7	!=
LEAF_NODE	461:11	461:11	8	!=
FIELD	461:14	461:14	7	NULL
LEAF_NODE	461:14	461:14	8	NULL
LEAF_NODE	461:18	461:18	6	)
LEAF_NODE	461:19	461:19	4	;
EXPR_STATEMENT	462:1	462:30	3	assert ( sp -> decoderow != NULL ) ;
EXPR	462:1	462:1	4	assert ( sp -> decoderow != NULL )
FUNCTION_CALL	462:1	462:29	5	assert ( sp -> decoderow != NULL )
CALLEE	462:1	462:1	6	assert
LEAF_NODE	462:1	462:1	7	assert
LEAF_NODE	462:7	462:7	6	(
ARGUMENT	462:8	462:25	6	sp -> decoderow != NULL
FIELD	462:8	462:12	7	sp -> decoderow
LEAF_NODE	462:8	462:8	8	sp
LEAF_NODE	462:10	462:10	8	->
LEAF_NODE	462:12	462:12	8	decoderow
EQ_OPERATOR	462:22	462:22	7	!=
LEAF_NODE	462:22	462:22	8	!=
FIELD	462:25	462:25	7	NULL
LEAF_NODE	462:25	462:25	8	NULL
LEAF_NODE	462:29	462:29	6	)
LEAF_NODE	462:30	462:30	4	;
EXPR_STATEMENT	463:1	463:32	3	assert ( sp -> decodepfunc != NULL ) ;
EXPR	463:1	463:1	4	assert ( sp -> decodepfunc != NULL )
FUNCTION_CALL	463:1	463:31	5	assert ( sp -> decodepfunc != NULL )
CALLEE	463:1	463:1	6	assert
LEAF_NODE	463:1	463:1	7	assert
LEAF_NODE	463:7	463:7	6	(
ARGUMENT	463:8	463:27	6	sp -> decodepfunc != NULL
FIELD	463:8	463:12	7	sp -> decodepfunc
LEAF_NODE	463:8	463:8	8	sp
LEAF_NODE	463:10	463:10	8	->
LEAF_NODE	463:12	463:12	8	decodepfunc
EQ_OPERATOR	463:24	463:24	7	!=
LEAF_NODE	463:24	463:24	8	!=
FIELD	463:27	463:27	7	NULL
LEAF_NODE	463:27	463:27	8	NULL
LEAF_NODE	463:31	463:31	6	)
LEAF_NODE	463:32	463:32	4	;
SELECTION	465:1	465:42	3	
KEYWORD	465:1	465:1	4	if
LEAF_NODE	465:1	465:1	5	if
LEAF_NODE	465:4	465:4	4	(
CONDITION	465:5	465:5	4	( * sp -> decoderow ) ( tif , op0 , occ0 , s )
EXPR	465:5	465:5	5	( * sp -> decoderow ) ( tif , op0 , occ0 , s )
FUNCTION_CALL	465:5	465:39	6	( * sp -> decoderow ) ( tif , op0 , occ0 , s )
CALLEE	465:5	465:20	7	( * sp -> decoderow )
LEAF_NODE	465:5	465:5	8	(
UNARY_EXPR	465:6	465:7	8	* sp -> decoderow
UNARY_OPERATOR	465:6	465:6	9	*
LEAF_NODE	465:6	465:6	10	*
FIELD	465:7	465:11	9	sp -> decoderow
LEAF_NODE	465:7	465:7	10	sp
LEAF_NODE	465:9	465:9	10	->
LEAF_NODE	465:11	465:11	10	decoderow
LEAF_NODE	465:20	465:20	8	)
LEAF_NODE	465:21	465:21	7	(
ARGUMENT	465:22	465:22	7	tif
FIELD	465:22	465:22	8	tif
LEAF_NODE	465:22	465:22	9	tif
LEAF_NODE	465:25	465:25	7	,
ARGUMENT	465:27	465:27	7	op0
FIELD	465:27	465:27	8	op0
LEAF_NODE	465:27	465:27	9	op0
LEAF_NODE	465:30	465:30	7	,
ARGUMENT	465:32	465:32	7	occ0
FIELD	465:32	465:32	8	occ0
LEAF_NODE	465:32	465:32	9	occ0
LEAF_NODE	465:36	465:36	7	,
ARGUMENT	465:38	465:38	7	s
FIELD	465:38	465:38	8	s
LEAF_NODE	465:38	465:38	9	s
LEAF_NODE	465:39	465:39	7	)
LEAF_NODE	465:40	465:40	4	)
STATEMENTS	465:42	467:1	4	
LEAF_NODE	465:42	465:42	5	{
STATEMENTS	466:2	466:2	5	
JUMP_STATEMENT	466:2	466:43	6	return ( * sp -> decodepfunc ) ( tif , op0 , occ0 ) ;
KEYWORD	466:2	466:2	7	return
LEAF_NODE	466:2	466:2	8	return
DESTINATION	466:9	466:9	7	( * sp -> decodepfunc ) ( tif , op0 , occ0 )
EXPR	466:9	466:9	8	( * sp -> decodepfunc ) ( tif , op0 , occ0 )
FUNCTION_CALL	466:9	466:42	9	( * sp -> decodepfunc ) ( tif , op0 , occ0 )
CALLEE	466:9	466:26	10	( * sp -> decodepfunc )
LEAF_NODE	466:9	466:9	11	(
UNARY_EXPR	466:10	466:11	11	* sp -> decodepfunc
UNARY_OPERATOR	466:10	466:10	12	*
LEAF_NODE	466:10	466:10	13	*
FIELD	466:11	466:15	12	sp -> decodepfunc
LEAF_NODE	466:11	466:11	13	sp
LEAF_NODE	466:13	466:13	13	->
LEAF_NODE	466:15	466:15	13	decodepfunc
LEAF_NODE	466:26	466:26	11	)
LEAF_NODE	466:27	466:27	10	(
ARGUMENT	466:28	466:28	10	tif
FIELD	466:28	466:28	11	tif
LEAF_NODE	466:28	466:28	12	tif
LEAF_NODE	466:31	466:31	10	,
ARGUMENT	466:33	466:33	10	op0
FIELD	466:33	466:33	11	op0
LEAF_NODE	466:33	466:33	12	op0
LEAF_NODE	466:36	466:36	10	,
ARGUMENT	466:38	466:38	10	occ0
FIELD	466:38	466:38	11	occ0
LEAF_NODE	466:38	466:38	12	occ0
LEAF_NODE	466:42	466:42	10	)
LEAF_NODE	466:43	466:43	7	;
LEAF_NODE	467:1	467:1	5	}
SELECTION	467:3	468:2	3	
KEYWORD	467:3	467:3	4	else
LEAF_NODE	467:3	467:3	5	else
STATEMENTS	468:2	468:2	4	
JUMP_STATEMENT	468:2	468:10	5	return 0 ;
KEYWORD	468:2	468:2	6	return
LEAF_NODE	468:2	468:2	7	return
DESTINATION	468:9	468:9	6	0
EXPR	468:9	468:9	7	0
FIELD	468:9	468:9	8	0
LEAF_NODE	468:9	468:9	9	0
LEAF_NODE	468:10	468:10	6	;
LEAF_NODE	469:0	469:0	2	}
FUNCTION_DEF	478:0	505:0	1	
RETURN_TYPE	478:0	478:7	2	static int
LEAF_NODE	478:0	478:0	3	static
TYPE_NAME	478:7	478:7	3	int
LEAF_NODE	478:7	478:7	4	int
FUNCTION_NAME	479:0	479:0	2	PredictorDecodeTile
LEAF_NODE	479:0	479:0	3	PredictorDecodeTile
PARAMETER_LIST	479:19	479:66	2	( TIFF * tif , uint8 * op0 , tmsize_t occ0 , uint16 s )
LEAF_NODE	479:19	479:19	3	(
PARAMETER_DECL	479:20	479:26	3	TIFF * tif
TYPE	479:20	479:24	4	TIFF *
TYPE_NAME	479:20	479:20	5	TIFF
LEAF_NODE	479:20	479:20	6	TIFF
POINTER	479:24	479:24	5	*
LEAF_NODE	479:24	479:24	6	*
NAME	479:26	479:26	4	tif
LEAF_NODE	479:26	479:26	5	tif
LEAF_NODE	479:29	479:29	3	,
PARAMETER_DECL	479:31	479:38	3	uint8 * op0
TYPE	479:31	479:36	4	uint8 *
TYPE_NAME	479:31	479:31	5	uint8
LEAF_NODE	479:31	479:31	6	uint8
POINTER	479:36	479:36	5	*
LEAF_NODE	479:36	479:36	6	*
NAME	479:38	479:38	4	op0
LEAF_NODE	479:38	479:38	5	op0
LEAF_NODE	479:41	479:41	3	,
PARAMETER_DECL	479:43	479:52	3	tmsize_t occ0
TYPE	479:43	479:43	4	tmsize_t
TYPE_NAME	479:43	479:43	5	tmsize_t
LEAF_NODE	479:43	479:43	6	tmsize_t
NAME	479:52	479:52	4	occ0
LEAF_NODE	479:52	479:52	5	occ0
LEAF_NODE	479:56	479:56	3	,
PARAMETER_DECL	479:58	479:65	3	uint16 s
TYPE	479:58	479:58	4	uint16
TYPE_NAME	479:58	479:58	5	uint16
LEAF_NODE	479:58	479:58	6	uint16
NAME	479:65	479:65	4	s
LEAF_NODE	479:65	479:65	5	s
LEAF_NODE	479:66	479:66	3	)
LEAF_NODE	480:0	480:0	2	{
STATEMENTS	481:1	503:3	2	
SIMPLE_DECL	481:1	481:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	481:1	481:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	481:1	481:20	5	TIFFPredictorState *
TYPE_NAME	481:1	481:1	6	TIFFPredictorState
LEAF_NODE	481:1	481:1	7	TIFFPredictorState
POINTER	481:20	481:20	6	*
LEAF_NODE	481:20	481:20	7	*
NAME	481:21	481:21	5	sp
LEAF_NODE	481:21	481:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	481:21	481:21	5	sp = PredictorState ( tif )
ASSIGN	481:21	481:26	6	sp = PredictorState ( tif )
LVAL	481:21	481:21	7	sp
NAME	481:21	481:21	8	sp
LEAF_NODE	481:21	481:21	9	sp
ASSIGN_OP	481:24	481:24	7	=
LEAF_NODE	481:24	481:24	8	=
RVAL	481:26	481:26	7	PredictorState ( tif )
FUNCTION_CALL	481:26	481:44	8	PredictorState ( tif )
CALLEE	481:26	481:26	9	PredictorState
LEAF_NODE	481:26	481:26	10	PredictorState
LEAF_NODE	481:40	481:40	9	(
ARGUMENT	481:41	481:41	9	tif
FIELD	481:41	481:41	10	tif
LEAF_NODE	481:41	481:41	11	tif
LEAF_NODE	481:44	481:44	9	)
LEAF_NODE	481:45	481:45	4	;
EXPR_STATEMENT	483:1	483:19	3	assert ( sp != NULL ) ;
EXPR	483:1	483:1	4	assert ( sp != NULL )
FUNCTION_CALL	483:1	483:18	5	assert ( sp != NULL )
CALLEE	483:1	483:1	6	assert
LEAF_NODE	483:1	483:1	7	assert
LEAF_NODE	483:7	483:7	6	(
ARGUMENT	483:8	483:14	6	sp != NULL
FIELD	483:8	483:8	7	sp
LEAF_NODE	483:8	483:8	8	sp
EQ_OPERATOR	483:11	483:11	7	!=
LEAF_NODE	483:11	483:11	8	!=
FIELD	483:14	483:14	7	NULL
LEAF_NODE	483:14	483:14	8	NULL
LEAF_NODE	483:18	483:18	6	)
LEAF_NODE	483:19	483:19	4	;
EXPR_STATEMENT	484:1	484:31	3	assert ( sp -> decodetile != NULL ) ;
EXPR	484:1	484:1	4	assert ( sp -> decodetile != NULL )
FUNCTION_CALL	484:1	484:30	5	assert ( sp -> decodetile != NULL )
CALLEE	484:1	484:1	6	assert
LEAF_NODE	484:1	484:1	7	assert
LEAF_NODE	484:7	484:7	6	(
ARGUMENT	484:8	484:26	6	sp -> decodetile != NULL
FIELD	484:8	484:12	7	sp -> decodetile
LEAF_NODE	484:8	484:8	8	sp
LEAF_NODE	484:10	484:10	8	->
LEAF_NODE	484:12	484:12	8	decodetile
EQ_OPERATOR	484:23	484:23	7	!=
LEAF_NODE	484:23	484:23	8	!=
FIELD	484:26	484:26	7	NULL
LEAF_NODE	484:26	484:26	8	NULL
LEAF_NODE	484:30	484:30	6	)
LEAF_NODE	484:31	484:31	4	;
SELECTION	486:1	486:43	3	
KEYWORD	486:1	486:1	4	if
LEAF_NODE	486:1	486:1	5	if
LEAF_NODE	486:4	486:4	4	(
CONDITION	486:5	486:5	4	( * sp -> decodetile ) ( tif , op0 , occ0 , s )
EXPR	486:5	486:5	5	( * sp -> decodetile ) ( tif , op0 , occ0 , s )
FUNCTION_CALL	486:5	486:40	6	( * sp -> decodetile ) ( tif , op0 , occ0 , s )
CALLEE	486:5	486:21	7	( * sp -> decodetile )
LEAF_NODE	486:5	486:5	8	(
UNARY_EXPR	486:6	486:7	8	* sp -> decodetile
UNARY_OPERATOR	486:6	486:6	9	*
LEAF_NODE	486:6	486:6	10	*
FIELD	486:7	486:11	9	sp -> decodetile
LEAF_NODE	486:7	486:7	10	sp
LEAF_NODE	486:9	486:9	10	->
LEAF_NODE	486:11	486:11	10	decodetile
LEAF_NODE	486:21	486:21	8	)
LEAF_NODE	486:22	486:22	7	(
ARGUMENT	486:23	486:23	7	tif
FIELD	486:23	486:23	8	tif
LEAF_NODE	486:23	486:23	9	tif
LEAF_NODE	486:26	486:26	7	,
ARGUMENT	486:28	486:28	7	op0
FIELD	486:28	486:28	8	op0
LEAF_NODE	486:28	486:28	9	op0
LEAF_NODE	486:31	486:31	7	,
ARGUMENT	486:33	486:33	7	occ0
FIELD	486:33	486:33	8	occ0
LEAF_NODE	486:33	486:33	9	occ0
LEAF_NODE	486:37	486:37	7	,
ARGUMENT	486:39	486:39	7	s
FIELD	486:39	486:39	8	s
LEAF_NODE	486:39	486:39	9	s
LEAF_NODE	486:40	486:40	7	)
LEAF_NODE	486:41	486:41	4	)
STATEMENTS	486:43	503:1	4	
LEAF_NODE	486:43	486:43	5	{
STATEMENTS	487:2	502:2	5	
SIMPLE_DECL	487:2	487:32	6	tmsize_t rowsize ; rowsize = sp -> rowsize ;
VAR_DECL	487:2	487:11	7	tmsize_t rowsize ; rowsize = sp -> rowsize
TYPE	487:2	487:2	8	tmsize_t
TYPE_NAME	487:2	487:2	9	tmsize_t
LEAF_NODE	487:2	487:2	10	tmsize_t
NAME	487:11	487:11	8	rowsize
LEAF_NODE	487:11	487:11	9	rowsize
LEAF_NODE	0:0	0:0	8	;
INIT	487:11	487:11	8	rowsize = sp -> rowsize
ASSIGN	487:11	487:21	9	rowsize = sp -> rowsize
LVAL	487:11	487:11	10	rowsize
NAME	487:11	487:11	11	rowsize
LEAF_NODE	487:11	487:11	12	rowsize
ASSIGN_OP	487:19	487:19	10	=
LEAF_NODE	487:19	487:19	11	=
RVAL	487:21	487:21	10	sp -> rowsize
FIELD	487:21	487:25	11	sp -> rowsize
LEAF_NODE	487:21	487:21	12	sp
LEAF_NODE	487:23	487:23	12	->
LEAF_NODE	487:25	487:25	12	rowsize
LEAF_NODE	487:32	487:32	7	;
EXPR_STATEMENT	488:2	488:21	6	assert ( rowsize > 0 ) ;
EXPR	488:2	488:2	7	assert ( rowsize > 0 )
FUNCTION_CALL	488:2	488:20	8	assert ( rowsize > 0 )
CALLEE	488:2	488:2	9	assert
LEAF_NODE	488:2	488:2	10	assert
LEAF_NODE	488:8	488:8	9	(
ARGUMENT	488:9	488:19	9	rowsize > 0
FIELD	488:9	488:9	10	rowsize
LEAF_NODE	488:9	488:9	11	rowsize
REL_OPERATOR	488:17	488:17	10	>
LEAF_NODE	488:17	488:17	11	>
FIELD	488:19	488:19	10	0
LEAF_NODE	488:19	488:19	11	0
LEAF_NODE	488:20	488:20	9	)
LEAF_NODE	488:21	488:21	7	;
SELECTION	489:2	490:8	6	
KEYWORD	489:2	489:2	7	if
LEAF_NODE	489:2	489:2	8	if
LEAF_NODE	489:4	489:4	7	(
CONDITION	489:5	489:5	7	( occ0 % rowsize ) != 0
EXPR	489:5	489:22	8	( occ0 % rowsize ) != 0
LEAF_NODE	489:5	489:5	9	(
FIELD	489:6	489:6	9	occ0
LEAF_NODE	489:6	489:6	10	occ0
LEAF_NODE	489:10	489:10	9	%
FIELD	489:11	489:11	9	rowsize
LEAF_NODE	489:11	489:11	10	rowsize
LEAF_NODE	489:18	489:18	9	)
EQ_OPERATOR	489:20	489:20	9	!=
LEAF_NODE	489:20	489:20	10	!=
FIELD	489:22	489:22	9	0
LEAF_NODE	489:22	489:22	10	0
LEAF_NODE	489:23	489:23	7	)
STATEMENTS	490:8	494:8	7	
LEAF_NODE	490:8	490:8	8	{
STATEMENTS	491:12	493:12	8	
EXPR_STATEMENT	491:12	492:51	9	TIFFErrorExt ( tif -> tif_clientdata , "PredictorDecodeTile" , "%s" , "occ0%rowsize != 0" ) ;
EXPR	491:12	491:12	10	TIFFErrorExt ( tif -> tif_clientdata , "PredictorDecodeTile" , "%s" , "occ0%rowsize != 0" )
FUNCTION_CALL	491:12	492:50	11	TIFFErrorExt ( tif -> tif_clientdata , "PredictorDecodeTile" , "%s" , "occ0%rowsize != 0" )
CALLEE	491:12	491:12	12	TIFFErrorExt
LEAF_NODE	491:12	491:12	13	TIFFErrorExt
LEAF_NODE	491:24	491:24	12	(
ARGUMENT	491:25	491:25	12	tif -> tif_clientdata
FIELD	491:25	491:30	13	tif -> tif_clientdata
LEAF_NODE	491:25	491:25	14	tif
LEAF_NODE	491:28	491:28	14	->
LEAF_NODE	491:30	491:30	14	tif_clientdata
LEAF_NODE	491:44	491:44	12	,
ARGUMENT	491:46	491:46	12	"PredictorDecodeTile"
FIELD	491:46	491:46	13	"PredictorDecodeTile"
LEAF_NODE	491:46	491:46	14	"PredictorDecodeTile"
LEAF_NODE	491:67	491:67	12	,
ARGUMENT	492:25	492:25	12	"%s"
FIELD	492:25	492:25	13	"%s"
LEAF_NODE	492:25	492:25	14	"%s"
LEAF_NODE	492:29	492:29	12	,
ARGUMENT	492:31	492:31	12	"occ0%rowsize != 0"
FIELD	492:31	492:31	13	"occ0%rowsize != 0"
LEAF_NODE	492:31	492:31	14	"occ0%rowsize != 0"
LEAF_NODE	492:50	492:50	12	)
LEAF_NODE	492:51	492:51	10	;
JUMP_STATEMENT	493:12	493:20	9	return 0 ;
KEYWORD	493:12	493:12	10	return
LEAF_NODE	493:12	493:12	11	return
DESTINATION	493:19	493:19	10	0
EXPR	493:19	493:19	11	0
FIELD	493:19	493:19	12	0
LEAF_NODE	493:19	493:19	13	0
LEAF_NODE	493:20	493:20	10	;
LEAF_NODE	494:8	494:8	8	}
EXPR_STATEMENT	495:2	495:33	6	assert ( sp -> decodepfunc != NULL ) ;
EXPR	495:2	495:2	7	assert ( sp -> decodepfunc != NULL )
FUNCTION_CALL	495:2	495:32	8	assert ( sp -> decodepfunc != NULL )
CALLEE	495:2	495:2	9	assert
LEAF_NODE	495:2	495:2	10	assert
LEAF_NODE	495:8	495:8	9	(
ARGUMENT	495:9	495:28	9	sp -> decodepfunc != NULL
FIELD	495:9	495:13	10	sp -> decodepfunc
LEAF_NODE	495:9	495:9	11	sp
LEAF_NODE	495:11	495:11	11	->
LEAF_NODE	495:13	495:13	11	decodepfunc
EQ_OPERATOR	495:25	495:25	10	!=
LEAF_NODE	495:25	495:25	11	!=
FIELD	495:28	495:28	10	NULL
LEAF_NODE	495:28	495:28	11	NULL
LEAF_NODE	495:32	495:32	9	)
LEAF_NODE	495:33	495:33	7	;
ITERATION	496:2	496:19	6	
KEYWORD	496:2	496:2	7	while
LEAF_NODE	496:2	496:2	8	while
LEAF_NODE	496:8	496:8	7	(
CONDITION	496:9	496:9	7	occ0 > 0
EXPR	496:9	496:16	8	occ0 > 0
FIELD	496:9	496:9	9	occ0
LEAF_NODE	496:9	496:9	10	occ0
REL_OPERATOR	496:14	496:14	9	>
LEAF_NODE	496:14	496:14	10	>
FIELD	496:16	496:16	9	0
LEAF_NODE	496:16	496:16	10	0
LEAF_NODE	496:17	496:17	7	)
STATEMENTS	496:19	501:2	7	
LEAF_NODE	496:19	496:19	8	{
STATEMENTS	497:3	500:3	8	
SELECTION	497:3	498:16	9	
KEYWORD	497:3	497:3	10	if
LEAF_NODE	497:3	497:3	11	if
LEAF_NODE	497:5	497:5	10	(
CONDITION	497:7	497:7	10	! ( * sp -> decodepfunc ) ( tif , op0 , rowsize )
EXPR	497:7	497:7	11	! ( * sp -> decodepfunc ) ( tif , op0 , rowsize )
UNARY_EXPR	497:7	497:8	12	! ( * sp -> decodepfunc ) ( tif , op0 , rowsize )
UNARY_OPERATOR	497:7	497:7	13	!
LEAF_NODE	497:7	497:7	14	!
FUNCTION_CALL	497:8	497:44	13	( * sp -> decodepfunc ) ( tif , op0 , rowsize )
CALLEE	497:8	497:25	14	( * sp -> decodepfunc )
LEAF_NODE	497:8	497:8	15	(
UNARY_EXPR	497:9	497:10	15	* sp -> decodepfunc
UNARY_OPERATOR	497:9	497:9	16	*
LEAF_NODE	497:9	497:9	17	*
FIELD	497:10	497:14	16	sp -> decodepfunc
LEAF_NODE	497:10	497:10	17	sp
LEAF_NODE	497:12	497:12	17	->
LEAF_NODE	497:14	497:14	17	decodepfunc
LEAF_NODE	497:25	497:25	15	)
LEAF_NODE	497:26	497:26	14	(
ARGUMENT	497:27	497:27	14	tif
FIELD	497:27	497:27	15	tif
LEAF_NODE	497:27	497:27	16	tif
LEAF_NODE	497:30	497:30	14	,
ARGUMENT	497:32	497:32	14	op0
FIELD	497:32	497:32	15	op0
LEAF_NODE	497:32	497:32	16	op0
LEAF_NODE	497:35	497:35	14	,
ARGUMENT	497:37	497:37	14	rowsize
FIELD	497:37	497:37	15	rowsize
LEAF_NODE	497:37	497:37	16	rowsize
LEAF_NODE	497:44	497:44	14	)
LEAF_NODE	497:46	497:46	10	)
STATEMENTS	498:16	498:16	10	
JUMP_STATEMENT	498:16	498:24	11	return 0 ;
KEYWORD	498:16	498:16	12	return
LEAF_NODE	498:16	498:16	13	return
DESTINATION	498:23	498:23	12	0
EXPR	498:23	498:23	13	0
FIELD	498:23	498:23	14	0
LEAF_NODE	498:23	498:23	15	0
LEAF_NODE	498:24	498:24	12	;
EXPR_STATEMENT	499:3	499:18	9	occ0 -= rowsize ;
EXPR	499:3	499:3	10	occ0 -= rowsize
ASSIGN	499:3	499:11	11	occ0 -= rowsize
LVAL	499:3	499:3	12	occ0
FIELD	499:3	499:3	13	occ0
LEAF_NODE	499:3	499:3	14	occ0
ASSIGN_OP	499:8	499:8	12	-=
LEAF_NODE	499:8	499:8	13	-=
RVAL	499:11	499:11	12	rowsize
FIELD	499:11	499:11	13	rowsize
LEAF_NODE	499:11	499:11	14	rowsize
LEAF_NODE	499:18	499:18	10	;
EXPR_STATEMENT	500:3	500:17	9	op0 += rowsize ;
EXPR	500:3	500:3	10	op0 += rowsize
ASSIGN	500:3	500:10	11	op0 += rowsize
LVAL	500:3	500:3	12	op0
FIELD	500:3	500:3	13	op0
LEAF_NODE	500:3	500:3	14	op0
ASSIGN_OP	500:7	500:7	12	+=
LEAF_NODE	500:7	500:7	13	+=
RVAL	500:10	500:10	12	rowsize
FIELD	500:10	500:10	13	rowsize
LEAF_NODE	500:10	500:10	14	rowsize
LEAF_NODE	500:17	500:17	10	;
LEAF_NODE	501:2	501:2	8	}
JUMP_STATEMENT	502:2	502:10	6	return 1 ;
KEYWORD	502:2	502:2	7	return
LEAF_NODE	502:2	502:2	8	return
DESTINATION	502:9	502:9	7	1
EXPR	502:9	502:9	8	1
FIELD	502:9	502:9	9	1
LEAF_NODE	502:9	502:9	10	1
LEAF_NODE	502:10	502:10	7	;
LEAF_NODE	503:1	503:1	5	}
SELECTION	503:3	504:2	3	
KEYWORD	503:3	503:3	4	else
LEAF_NODE	503:3	503:3	5	else
STATEMENTS	504:2	504:2	4	
JUMP_STATEMENT	504:2	504:10	5	return 0 ;
KEYWORD	504:2	504:2	6	return
LEAF_NODE	504:2	504:2	7	return
DESTINATION	504:9	504:9	6	0
EXPR	504:9	504:9	7	0
FIELD	504:9	504:9	8	0
LEAF_NODE	504:9	504:9	9	0
LEAF_NODE	504:10	504:10	6	;
LEAF_NODE	505:0	505:0	2	}
FUNCTION_DEF	508:0	559:0	1	
RETURN_TYPE	508:0	508:7	2	static int
LEAF_NODE	508:0	508:0	3	static
TYPE_NAME	508:7	508:7	3	int
LEAF_NODE	508:7	508:7	4	int
FUNCTION_NAME	509:0	509:0	2	horDiff8
LEAF_NODE	509:0	509:0	3	horDiff8
PARAMETER_LIST	509:8	509:43	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	509:8	509:8	3	(
PARAMETER_DECL	509:9	509:15	3	TIFF * tif
TYPE	509:9	509:13	4	TIFF *
TYPE_NAME	509:9	509:9	5	TIFF
LEAF_NODE	509:9	509:9	6	TIFF
POINTER	509:13	509:13	5	*
LEAF_NODE	509:13	509:13	6	*
NAME	509:15	509:15	4	tif
LEAF_NODE	509:15	509:15	5	tif
LEAF_NODE	509:18	509:18	3	,
PARAMETER_DECL	509:20	509:27	3	uint8 * cp0
TYPE	509:20	509:25	4	uint8 *
TYPE_NAME	509:20	509:20	5	uint8
LEAF_NODE	509:20	509:20	6	uint8
POINTER	509:25	509:25	5	*
LEAF_NODE	509:25	509:25	6	*
NAME	509:27	509:27	4	cp0
LEAF_NODE	509:27	509:27	5	cp0
LEAF_NODE	509:30	509:30	3	,
PARAMETER_DECL	509:32	509:41	3	tmsize_t cc
TYPE	509:32	509:32	4	tmsize_t
TYPE_NAME	509:32	509:32	5	tmsize_t
LEAF_NODE	509:32	509:32	6	tmsize_t
NAME	509:41	509:41	4	cc
LEAF_NODE	509:41	509:41	5	cc
LEAF_NODE	509:43	509:43	3	)
LEAF_NODE	510:0	510:0	2	{
STATEMENTS	511:1	558:1	2	
SIMPLE_DECL	511:1	511:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	511:1	511:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	511:1	511:19	5	TIFFPredictorState *
TYPE_NAME	511:1	511:1	6	TIFFPredictorState
LEAF_NODE	511:1	511:1	7	TIFFPredictorState
POINTER	511:19	511:19	6	*
LEAF_NODE	511:19	511:19	7	*
NAME	511:21	511:21	5	sp
LEAF_NODE	511:21	511:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	511:21	511:21	5	sp = PredictorState ( tif )
ASSIGN	511:21	511:26	6	sp = PredictorState ( tif )
LVAL	511:21	511:21	7	sp
NAME	511:21	511:21	8	sp
LEAF_NODE	511:21	511:21	9	sp
ASSIGN_OP	511:24	511:24	7	=
LEAF_NODE	511:24	511:24	8	=
RVAL	511:26	511:26	7	PredictorState ( tif )
FUNCTION_CALL	511:26	511:44	8	PredictorState ( tif )
CALLEE	511:26	511:26	9	PredictorState
LEAF_NODE	511:26	511:26	10	PredictorState
LEAF_NODE	511:40	511:40	9	(
ARGUMENT	511:41	511:41	9	tif
FIELD	511:41	511:41	10	tif
LEAF_NODE	511:41	511:41	11	tif
LEAF_NODE	511:44	511:44	9	)
LEAF_NODE	511:45	511:45	4	;
SIMPLE_DECL	512:1	512:29	3	tmsize_t stride ; stride = sp -> stride ;
VAR_DECL	512:1	512:10	4	tmsize_t stride ; stride = sp -> stride
TYPE	512:1	512:1	5	tmsize_t
TYPE_NAME	512:1	512:1	6	tmsize_t
LEAF_NODE	512:1	512:1	7	tmsize_t
NAME	512:10	512:10	5	stride
LEAF_NODE	512:10	512:10	6	stride
LEAF_NODE	0:0	0:0	5	;
INIT	512:10	512:10	5	stride = sp -> stride
ASSIGN	512:10	512:19	6	stride = sp -> stride
LVAL	512:10	512:10	7	stride
NAME	512:10	512:10	8	stride
LEAF_NODE	512:10	512:10	9	stride
ASSIGN_OP	512:17	512:17	7	=
LEAF_NODE	512:17	512:17	8	=
RVAL	512:19	512:19	7	sp -> stride
FIELD	512:19	512:23	8	sp -> stride
LEAF_NODE	512:19	512:19	9	sp
LEAF_NODE	512:21	512:21	9	->
LEAF_NODE	512:23	512:23	9	stride
LEAF_NODE	512:29	512:29	4	;
SIMPLE_DECL	513:1	513:41	3	unsigned char * cp ; cp = ( unsigned char * ) cp0 ;
VAR_DECL	513:1	513:16	4	unsigned char * cp ; cp = ( unsigned char * ) cp0
TYPE	513:1	513:14	5	unsigned char *
TYPE_NAME	513:1	513:10	6	unsigned char
LEAF_NODE	513:1	513:1	7	unsigned
LEAF_NODE	513:10	513:10	7	char
POINTER	513:14	513:14	6	*
LEAF_NODE	513:14	513:14	7	*
NAME	513:16	513:16	5	cp
LEAF_NODE	513:16	513:16	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	513:16	513:16	5	cp = ( unsigned char * ) cp0
ASSIGN	513:16	513:21	6	cp = ( unsigned char * ) cp0
LVAL	513:16	513:16	7	cp
NAME	513:16	513:16	8	cp
LEAF_NODE	513:16	513:16	9	cp
ASSIGN_OP	513:19	513:19	7	=
LEAF_NODE	513:19	513:19	8	=
RVAL	513:21	513:38	7	( unsigned char * ) cp0
LEAF_NODE	513:21	513:21	8	(
TYPE_NAME	513:22	513:31	8	unsigned char
LEAF_NODE	513:22	513:22	9	unsigned
LEAF_NODE	513:31	513:31	9	char
LEAF_NODE	513:35	513:35	8	*
LEAF_NODE	513:36	513:36	8	)
FIELD	513:38	513:38	8	cp0
LEAF_NODE	513:38	513:38	9	cp0
LEAF_NODE	513:41	513:41	4	;
SELECTION	515:4	516:4	3	
KEYWORD	515:4	515:4	4	if
LEAF_NODE	515:4	515:4	5	if
LEAF_NODE	515:6	515:6	4	(
CONDITION	515:7	515:7	4	( cc % stride ) != 0
EXPR	515:7	515:20	5	( cc % stride ) != 0
LEAF_NODE	515:7	515:7	6	(
FIELD	515:8	515:8	6	cc
LEAF_NODE	515:8	515:8	7	cc
LEAF_NODE	515:10	515:10	6	%
FIELD	515:11	515:11	6	stride
LEAF_NODE	515:11	515:11	7	stride
LEAF_NODE	515:17	515:17	6	)
EQ_OPERATOR	515:18	515:18	6	!=
LEAF_NODE	515:18	515:18	7	!=
FIELD	515:20	515:20	6	0
LEAF_NODE	515:20	515:20	7	0
LEAF_NODE	515:21	515:21	4	)
STATEMENTS	516:4	520:4	4	
LEAF_NODE	516:4	516:4	5	{
STATEMENTS	517:8	519:8	5	
EXPR_STATEMENT	517:8	518:44	6	TIFFErrorExt ( tif -> tif_clientdata , "horDiff8" , "%s" , "(cc%stride)!=0" ) ;
EXPR	517:8	517:8	7	TIFFErrorExt ( tif -> tif_clientdata , "horDiff8" , "%s" , "(cc%stride)!=0" )
FUNCTION_CALL	517:8	518:43	8	TIFFErrorExt ( tif -> tif_clientdata , "horDiff8" , "%s" , "(cc%stride)!=0" )
CALLEE	517:8	517:8	9	TIFFErrorExt
LEAF_NODE	517:8	517:8	10	TIFFErrorExt
LEAF_NODE	517:20	517:20	9	(
ARGUMENT	517:21	517:21	9	tif -> tif_clientdata
FIELD	517:21	517:26	10	tif -> tif_clientdata
LEAF_NODE	517:21	517:21	11	tif
LEAF_NODE	517:24	517:24	11	->
LEAF_NODE	517:26	517:26	11	tif_clientdata
LEAF_NODE	517:40	517:40	9	,
ARGUMENT	517:42	517:42	9	"horDiff8"
FIELD	517:42	517:42	10	"horDiff8"
LEAF_NODE	517:42	517:42	11	"horDiff8"
LEAF_NODE	517:52	517:52	9	,
ARGUMENT	518:21	518:21	9	"%s"
FIELD	518:21	518:21	10	"%s"
LEAF_NODE	518:21	518:21	11	"%s"
LEAF_NODE	518:25	518:25	9	,
ARGUMENT	518:27	518:27	9	"(cc%stride)!=0"
FIELD	518:27	518:27	10	"(cc%stride)!=0"
LEAF_NODE	518:27	518:27	11	"(cc%stride)!=0"
LEAF_NODE	518:43	518:43	9	)
LEAF_NODE	518:44	518:44	7	;
JUMP_STATEMENT	519:8	519:16	6	return 0 ;
KEYWORD	519:8	519:8	7	return
LEAF_NODE	519:8	519:8	8	return
DESTINATION	519:15	519:15	7	0
EXPR	519:15	519:15	8	0
FIELD	519:15	519:15	9	0
LEAF_NODE	519:15	519:15	10	0
LEAF_NODE	519:16	519:16	7	;
LEAF_NODE	520:4	520:4	5	}
SELECTION	522:1	522:18	3	
KEYWORD	522:1	522:1	4	if
LEAF_NODE	522:1	522:1	5	if
LEAF_NODE	522:4	522:4	4	(
CONDITION	522:5	522:5	4	cc > stride
EXPR	522:5	522:10	5	cc > stride
FIELD	522:5	522:5	6	cc
LEAF_NODE	522:5	522:5	7	cc
REL_OPERATOR	522:8	522:8	6	>
LEAF_NODE	522:8	522:8	7	>
FIELD	522:10	522:10	6	stride
LEAF_NODE	522:10	522:10	7	stride
LEAF_NODE	522:16	522:16	4	)
STATEMENTS	522:18	557:1	4	
LEAF_NODE	522:18	522:18	5	{
STATEMENTS	523:2	551:4	5	
EXPR_STATEMENT	523:2	523:14	6	cc -= stride ;
EXPR	523:2	523:2	7	cc -= stride
ASSIGN	523:2	523:8	8	cc -= stride
LVAL	523:2	523:2	9	cc
FIELD	523:2	523:2	10	cc
LEAF_NODE	523:2	523:2	11	cc
ASSIGN_OP	523:5	523:5	9	-=
LEAF_NODE	523:5	523:5	10	-=
RVAL	523:8	523:8	9	stride
FIELD	523:8	523:8	10	stride
LEAF_NODE	523:8	523:8	11	stride
LEAF_NODE	523:14	523:14	7	;
SELECTION	527:2	527:19	6	
KEYWORD	527:2	527:2	7	if
LEAF_NODE	527:2	527:2	8	if
LEAF_NODE	527:5	527:5	7	(
CONDITION	527:6	527:6	7	stride == 3
EXPR	527:6	527:16	8	stride == 3
FIELD	527:6	527:6	9	stride
LEAF_NODE	527:6	527:6	10	stride
EQ_OPERATOR	527:13	527:13	9	==
LEAF_NODE	527:13	527:13	10	==
FIELD	527:16	527:16	9	3
LEAF_NODE	527:16	527:16	10	3
LEAF_NODE	527:17	527:17	7	)
STATEMENTS	527:19	538:2	7	
LEAF_NODE	527:19	527:19	8	{
STATEMENTS	528:3	537:26	8	
SIMPLE_DECL	528:3	528:26	9	unsigned int r1 , unsigned int g1 , unsigned int b1 ;
INIT_DECL_LIST	528:3	528:3	10	unsigned int r1 , unsigned int g1 , unsigned int b1
VAR_DECL	528:3	528:16	11	unsigned int r1
TYPE	528:3	528:3	12	unsigned int
TYPE_NAME	528:3	528:12	13	unsigned int
LEAF_NODE	528:3	528:3	14	unsigned
LEAF_NODE	528:12	528:12	14	int
NAME	528:16	528:16	12	r1
LEAF_NODE	528:16	528:16	13	r1
LEAF_NODE	528:18	528:18	11	,
INIT_DECL_LIST	528:3	528:3	11	unsigned int g1 , unsigned int b1
VAR_DECL	528:3	528:20	12	unsigned int g1
TYPE	528:3	528:3	13	unsigned int
TYPE_NAME	528:3	528:12	14	unsigned int
LEAF_NODE	528:3	528:3	15	unsigned
LEAF_NODE	528:12	528:12	15	int
NAME	528:20	528:20	13	g1
LEAF_NODE	528:20	528:20	14	g1
LEAF_NODE	528:22	528:22	12	,
VAR_DECL	528:3	528:24	12	unsigned int b1
TYPE	528:3	528:3	13	unsigned int
TYPE_NAME	528:3	528:12	14	unsigned int
LEAF_NODE	528:3	528:3	15	unsigned
LEAF_NODE	528:12	528:12	15	int
NAME	528:24	528:24	13	b1
LEAF_NODE	528:24	528:24	14	b1
LEAF_NODE	528:26	528:26	10	;
SIMPLE_DECL	529:3	529:26	9	unsigned int r2 ; r2 = cp [ 0 ] ;
VAR_DECL	529:3	529:16	10	unsigned int r2 ; r2 = cp [ 0 ]
TYPE	529:3	529:3	11	unsigned int
TYPE_NAME	529:3	529:12	12	unsigned int
LEAF_NODE	529:3	529:3	13	unsigned
LEAF_NODE	529:12	529:12	13	int
NAME	529:16	529:16	11	r2
LEAF_NODE	529:16	529:16	12	r2
LEAF_NODE	0:0	0:0	11	;
INIT	529:16	529:16	11	r2 = cp [ 0 ]
ASSIGN	529:16	529:21	12	r2 = cp [ 0 ]
LVAL	529:16	529:16	13	r2
NAME	529:16	529:16	14	r2
LEAF_NODE	529:16	529:16	15	r2
ASSIGN_OP	529:19	529:19	13	=
LEAF_NODE	529:19	529:19	14	=
RVAL	529:21	529:21	13	cp [ 0 ]
FIELD	529:21	529:25	14	cp [ 0 ]
LEAF_NODE	529:21	529:21	15	cp
LEAF_NODE	529:23	529:23	15	[
EXPR	529:24	529:24	15	0
FIELD	529:24	529:24	16	0
LEAF_NODE	529:24	529:24	17	0
LEAF_NODE	529:25	529:25	15	]
LEAF_NODE	529:26	529:26	10	;
SIMPLE_DECL	530:3	530:26	9	unsigned int g2 ; g2 = cp [ 1 ] ;
VAR_DECL	530:3	530:16	10	unsigned int g2 ; g2 = cp [ 1 ]
TYPE	530:3	530:3	11	unsigned int
TYPE_NAME	530:3	530:12	12	unsigned int
LEAF_NODE	530:3	530:3	13	unsigned
LEAF_NODE	530:12	530:12	13	int
NAME	530:16	530:16	11	g2
LEAF_NODE	530:16	530:16	12	g2
LEAF_NODE	0:0	0:0	11	;
INIT	530:16	530:16	11	g2 = cp [ 1 ]
ASSIGN	530:16	530:21	12	g2 = cp [ 1 ]
LVAL	530:16	530:16	13	g2
NAME	530:16	530:16	14	g2
LEAF_NODE	530:16	530:16	15	g2
ASSIGN_OP	530:19	530:19	13	=
LEAF_NODE	530:19	530:19	14	=
RVAL	530:21	530:21	13	cp [ 1 ]
FIELD	530:21	530:25	14	cp [ 1 ]
LEAF_NODE	530:21	530:21	15	cp
LEAF_NODE	530:23	530:23	15	[
EXPR	530:24	530:24	15	1
FIELD	530:24	530:24	16	1
LEAF_NODE	530:24	530:24	17	1
LEAF_NODE	530:25	530:25	15	]
LEAF_NODE	530:26	530:26	10	;
SIMPLE_DECL	531:3	531:27	9	unsigned int b2 ; b2 = cp [ 2 ] ;
VAR_DECL	531:3	531:17	10	unsigned int b2 ; b2 = cp [ 2 ]
TYPE	531:3	531:3	11	unsigned int
TYPE_NAME	531:3	531:13	12	unsigned int
LEAF_NODE	531:3	531:3	13	unsigned
LEAF_NODE	531:13	531:13	13	int
NAME	531:17	531:17	11	b2
LEAF_NODE	531:17	531:17	12	b2
LEAF_NODE	0:0	0:0	11	;
INIT	531:17	531:17	11	b2 = cp [ 2 ]
ASSIGN	531:17	531:22	12	b2 = cp [ 2 ]
LVAL	531:17	531:17	13	b2
NAME	531:17	531:17	14	b2
LEAF_NODE	531:17	531:17	15	b2
ASSIGN_OP	531:20	531:20	13	=
LEAF_NODE	531:20	531:20	14	=
RVAL	531:22	531:22	13	cp [ 2 ]
FIELD	531:22	531:26	14	cp [ 2 ]
LEAF_NODE	531:22	531:22	15	cp
LEAF_NODE	531:24	531:24	15	[
EXPR	531:25	531:25	15	2
FIELD	531:25	531:25	16	2
LEAF_NODE	531:25	531:25	17	2
LEAF_NODE	531:26	531:26	15	]
LEAF_NODE	531:27	531:27	10	;
ITERATION	532:3	532:6	9	
KEYWORD	532:3	532:3	10	do
LEAF_NODE	532:3	532:3	11	do
LEAF_NODE	537:11	537:11	10	(
CONDITION	537:12	537:12	10	( cc -= 3 ) > 0
EXPR	537:12	537:24	11	( cc -= 3 ) > 0
LEAF_NODE	537:12	537:12	12	(
ASSIGN	537:13	537:19	12	cc -= 3
LVAL	537:13	537:13	13	cc
FIELD	537:13	537:13	14	cc
LEAF_NODE	537:13	537:13	15	cc
ASSIGN_OP	537:16	537:16	13	-=
LEAF_NODE	537:16	537:16	14	-=
RVAL	537:19	537:19	13	3
FIELD	537:19	537:19	14	3
LEAF_NODE	537:19	537:19	15	3
LEAF_NODE	537:20	537:20	12	)
REL_OPERATOR	537:22	537:22	12	>
LEAF_NODE	537:22	537:22	13	>
FIELD	537:24	537:24	12	0
LEAF_NODE	537:24	537:24	13	0
LEAF_NODE	537:25	537:25	10	)
STATEMENTS	532:6	537:3	10	
LEAF_NODE	532:6	532:6	11	{
STATEMENTS	533:4	536:4	11	
EXPR_STATEMENT	533:4	533:14	12	r1 = cp [ 3 ] ;
EXPR	533:4	533:4	13	r1 = cp [ 3 ]
ASSIGN	533:4	533:9	14	r1 = cp [ 3 ]
LVAL	533:4	533:4	15	r1
FIELD	533:4	533:4	16	r1
LEAF_NODE	533:4	533:4	17	r1
ASSIGN_OP	533:7	533:7	15	=
LEAF_NODE	533:7	533:7	16	=
RVAL	533:9	533:9	15	cp [ 3 ]
FIELD	533:9	533:13	16	cp [ 3 ]
LEAF_NODE	533:9	533:9	17	cp
LEAF_NODE	533:11	533:11	17	[
EXPR	533:12	533:12	17	3
FIELD	533:12	533:12	18	3
LEAF_NODE	533:12	533:12	19	3
LEAF_NODE	533:13	533:13	17	]
LEAF_NODE	533:14	533:14	13	;
EXPR_STATEMENT	533:16	533:53	12	cp [ 3 ] = ( unsigned char ) ( ( r1 - r2 ) & 0xff ) ;
EXPR	533:16	533:16	13	cp [ 3 ] = ( unsigned char ) ( ( r1 - r2 ) & 0xff )
ASSIGN	533:16	533:24	14	cp [ 3 ] = ( unsigned char ) ( ( r1 - r2 ) & 0xff )
LVAL	533:16	533:16	15	cp [ 3 ]
FIELD	533:16	533:20	16	cp [ 3 ]
LEAF_NODE	533:16	533:16	17	cp
LEAF_NODE	533:18	533:18	17	[
EXPR	533:19	533:19	17	3
FIELD	533:19	533:19	18	3
LEAF_NODE	533:19	533:19	19	3
LEAF_NODE	533:20	533:20	17	]
ASSIGN_OP	533:22	533:22	15	=
LEAF_NODE	533:22	533:22	16	=
RVAL	533:24	533:52	15	( unsigned char ) ( ( r1 - r2 ) & 0xff )
LEAF_NODE	533:24	533:24	16	(
TYPE_NAME	533:25	533:34	16	unsigned char
LEAF_NODE	533:25	533:25	17	unsigned
LEAF_NODE	533:34	533:34	17	char
LEAF_NODE	533:38	533:38	16	)
LEAF_NODE	533:39	533:39	16	(
LEAF_NODE	533:40	533:40	16	(
FIELD	533:41	533:41	16	r1
LEAF_NODE	533:41	533:41	17	r1
LEAF_NODE	533:43	533:43	16	-
FIELD	533:44	533:44	16	r2
LEAF_NODE	533:44	533:44	17	r2
LEAF_NODE	533:46	533:46	16	)
LEAF_NODE	533:47	533:47	16	&
FIELD	533:48	533:48	16	0xff
LEAF_NODE	533:48	533:48	17	0xff
LEAF_NODE	533:52	533:52	16	)
LEAF_NODE	533:53	533:53	13	;
EXPR_STATEMENT	533:55	533:62	12	r2 = r1 ;
EXPR	533:55	533:55	13	r2 = r1
ASSIGN	533:55	533:60	14	r2 = r1
LVAL	533:55	533:55	15	r2
FIELD	533:55	533:55	16	r2
LEAF_NODE	533:55	533:55	17	r2
ASSIGN_OP	533:58	533:58	15	=
LEAF_NODE	533:58	533:58	16	=
RVAL	533:60	533:60	15	r1
FIELD	533:60	533:60	16	r1
LEAF_NODE	533:60	533:60	17	r1
LEAF_NODE	533:62	533:62	13	;
EXPR_STATEMENT	534:4	534:14	12	g1 = cp [ 4 ] ;
EXPR	534:4	534:4	13	g1 = cp [ 4 ]
ASSIGN	534:4	534:9	14	g1 = cp [ 4 ]
LVAL	534:4	534:4	15	g1
FIELD	534:4	534:4	16	g1
LEAF_NODE	534:4	534:4	17	g1
ASSIGN_OP	534:7	534:7	15	=
LEAF_NODE	534:7	534:7	16	=
RVAL	534:9	534:9	15	cp [ 4 ]
FIELD	534:9	534:13	16	cp [ 4 ]
LEAF_NODE	534:9	534:9	17	cp
LEAF_NODE	534:11	534:11	17	[
EXPR	534:12	534:12	17	4
FIELD	534:12	534:12	18	4
LEAF_NODE	534:12	534:12	19	4
LEAF_NODE	534:13	534:13	17	]
LEAF_NODE	534:14	534:14	13	;
EXPR_STATEMENT	534:16	534:53	12	cp [ 4 ] = ( unsigned char ) ( ( g1 - g2 ) & 0xff ) ;
EXPR	534:16	534:16	13	cp [ 4 ] = ( unsigned char ) ( ( g1 - g2 ) & 0xff )
ASSIGN	534:16	534:24	14	cp [ 4 ] = ( unsigned char ) ( ( g1 - g2 ) & 0xff )
LVAL	534:16	534:16	15	cp [ 4 ]
FIELD	534:16	534:20	16	cp [ 4 ]
LEAF_NODE	534:16	534:16	17	cp
LEAF_NODE	534:18	534:18	17	[
EXPR	534:19	534:19	17	4
FIELD	534:19	534:19	18	4
LEAF_NODE	534:19	534:19	19	4
LEAF_NODE	534:20	534:20	17	]
ASSIGN_OP	534:22	534:22	15	=
LEAF_NODE	534:22	534:22	16	=
RVAL	534:24	534:52	15	( unsigned char ) ( ( g1 - g2 ) & 0xff )
LEAF_NODE	534:24	534:24	16	(
TYPE_NAME	534:25	534:34	16	unsigned char
LEAF_NODE	534:25	534:25	17	unsigned
LEAF_NODE	534:34	534:34	17	char
LEAF_NODE	534:38	534:38	16	)
LEAF_NODE	534:39	534:39	16	(
LEAF_NODE	534:40	534:40	16	(
FIELD	534:41	534:41	16	g1
LEAF_NODE	534:41	534:41	17	g1
LEAF_NODE	534:43	534:43	16	-
FIELD	534:44	534:44	16	g2
LEAF_NODE	534:44	534:44	17	g2
LEAF_NODE	534:46	534:46	16	)
LEAF_NODE	534:47	534:47	16	&
FIELD	534:48	534:48	16	0xff
LEAF_NODE	534:48	534:48	17	0xff
LEAF_NODE	534:52	534:52	16	)
LEAF_NODE	534:53	534:53	13	;
EXPR_STATEMENT	534:55	534:62	12	g2 = g1 ;
EXPR	534:55	534:55	13	g2 = g1
ASSIGN	534:55	534:60	14	g2 = g1
LVAL	534:55	534:55	15	g2
FIELD	534:55	534:55	16	g2
LEAF_NODE	534:55	534:55	17	g2
ASSIGN_OP	534:58	534:58	15	=
LEAF_NODE	534:58	534:58	16	=
RVAL	534:60	534:60	15	g1
FIELD	534:60	534:60	16	g1
LEAF_NODE	534:60	534:60	17	g1
LEAF_NODE	534:62	534:62	13	;
EXPR_STATEMENT	535:4	535:14	12	b1 = cp [ 5 ] ;
EXPR	535:4	535:4	13	b1 = cp [ 5 ]
ASSIGN	535:4	535:9	14	b1 = cp [ 5 ]
LVAL	535:4	535:4	15	b1
FIELD	535:4	535:4	16	b1
LEAF_NODE	535:4	535:4	17	b1
ASSIGN_OP	535:7	535:7	15	=
LEAF_NODE	535:7	535:7	16	=
RVAL	535:9	535:9	15	cp [ 5 ]
FIELD	535:9	535:13	16	cp [ 5 ]
LEAF_NODE	535:9	535:9	17	cp
LEAF_NODE	535:11	535:11	17	[
EXPR	535:12	535:12	17	5
FIELD	535:12	535:12	18	5
LEAF_NODE	535:12	535:12	19	5
LEAF_NODE	535:13	535:13	17	]
LEAF_NODE	535:14	535:14	13	;
EXPR_STATEMENT	535:16	535:53	12	cp [ 5 ] = ( unsigned char ) ( ( b1 - b2 ) & 0xff ) ;
EXPR	535:16	535:16	13	cp [ 5 ] = ( unsigned char ) ( ( b1 - b2 ) & 0xff )
ASSIGN	535:16	535:24	14	cp [ 5 ] = ( unsigned char ) ( ( b1 - b2 ) & 0xff )
LVAL	535:16	535:16	15	cp [ 5 ]
FIELD	535:16	535:20	16	cp [ 5 ]
LEAF_NODE	535:16	535:16	17	cp
LEAF_NODE	535:18	535:18	17	[
EXPR	535:19	535:19	17	5
FIELD	535:19	535:19	18	5
LEAF_NODE	535:19	535:19	19	5
LEAF_NODE	535:20	535:20	17	]
ASSIGN_OP	535:22	535:22	15	=
LEAF_NODE	535:22	535:22	16	=
RVAL	535:24	535:52	15	( unsigned char ) ( ( b1 - b2 ) & 0xff )
LEAF_NODE	535:24	535:24	16	(
TYPE_NAME	535:25	535:34	16	unsigned char
LEAF_NODE	535:25	535:25	17	unsigned
LEAF_NODE	535:34	535:34	17	char
LEAF_NODE	535:38	535:38	16	)
LEAF_NODE	535:39	535:39	16	(
LEAF_NODE	535:40	535:40	16	(
FIELD	535:41	535:41	16	b1
LEAF_NODE	535:41	535:41	17	b1
LEAF_NODE	535:43	535:43	16	-
FIELD	535:44	535:44	16	b2
LEAF_NODE	535:44	535:44	17	b2
LEAF_NODE	535:46	535:46	16	)
LEAF_NODE	535:47	535:47	16	&
FIELD	535:48	535:48	16	0xff
LEAF_NODE	535:48	535:48	17	0xff
LEAF_NODE	535:52	535:52	16	)
LEAF_NODE	535:53	535:53	13	;
EXPR_STATEMENT	535:55	535:62	12	b2 = b1 ;
EXPR	535:55	535:55	13	b2 = b1
ASSIGN	535:55	535:60	14	b2 = b1
LVAL	535:55	535:55	15	b2
FIELD	535:55	535:55	16	b2
LEAF_NODE	535:55	535:55	17	b2
ASSIGN_OP	535:58	535:58	15	=
LEAF_NODE	535:58	535:58	16	=
RVAL	535:60	535:60	15	b1
FIELD	535:60	535:60	16	b1
LEAF_NODE	535:60	535:60	17	b1
LEAF_NODE	535:62	535:62	13	;
EXPR_STATEMENT	536:4	536:11	12	cp += 3 ;
EXPR	536:4	536:4	13	cp += 3
ASSIGN	536:4	536:10	14	cp += 3
LVAL	536:4	536:4	15	cp
FIELD	536:4	536:4	16	cp
LEAF_NODE	536:4	536:4	17	cp
ASSIGN_OP	536:7	536:7	15	+=
LEAF_NODE	536:7	536:7	16	+=
RVAL	536:10	536:10	15	3
FIELD	536:10	536:10	16	3
LEAF_NODE	536:10	536:10	17	3
LEAF_NODE	536:11	536:11	13	;
LEAF_NODE	537:3	537:3	11	}
LEAF_NODE	537:26	537:26	9	;
LEAF_NODE	538:2	538:2	8	}
SELECTION	538:4	538:9	6	
KEYWORD	538:4	538:4	7	else
LEAF_NODE	538:4	538:4	8	else
STATEMENTS	538:9	538:9	7	
SELECTION	538:9	538:26	8	
KEYWORD	538:9	538:9	9	if
LEAF_NODE	538:9	538:9	10	if
LEAF_NODE	538:12	538:12	9	(
CONDITION	538:13	538:13	9	stride == 4
EXPR	538:13	538:23	10	stride == 4
FIELD	538:13	538:13	11	stride
LEAF_NODE	538:13	538:13	12	stride
EQ_OPERATOR	538:20	538:20	11	==
LEAF_NODE	538:20	538:20	12	==
FIELD	538:23	538:23	11	4
LEAF_NODE	538:23	538:23	12	4
LEAF_NODE	538:24	538:24	9	)
STATEMENTS	538:26	551:2	9	
LEAF_NODE	538:26	538:26	10	{
STATEMENTS	539:3	550:26	10	
SIMPLE_DECL	539:3	539:30	11	unsigned int r1 , unsigned int g1 , unsigned int b1 , unsigned int a1 ;
INIT_DECL_LIST	539:3	539:3	12	unsigned int r1 , unsigned int g1 , unsigned int b1 , unsigned int a1
VAR_DECL	539:3	539:16	13	unsigned int r1
TYPE	539:3	539:3	14	unsigned int
TYPE_NAME	539:3	539:12	15	unsigned int
LEAF_NODE	539:3	539:3	16	unsigned
LEAF_NODE	539:12	539:12	16	int
NAME	539:16	539:16	14	r1
LEAF_NODE	539:16	539:16	15	r1
LEAF_NODE	539:18	539:18	13	,
INIT_DECL_LIST	539:3	539:3	13	unsigned int g1 , unsigned int b1 , unsigned int a1
VAR_DECL	539:3	539:20	14	unsigned int g1
TYPE	539:3	539:3	15	unsigned int
TYPE_NAME	539:3	539:12	16	unsigned int
LEAF_NODE	539:3	539:3	17	unsigned
LEAF_NODE	539:12	539:12	17	int
NAME	539:20	539:20	15	g1
LEAF_NODE	539:20	539:20	16	g1
LEAF_NODE	539:22	539:22	14	,
INIT_DECL_LIST	539:3	539:3	14	unsigned int b1 , unsigned int a1
VAR_DECL	539:3	539:24	15	unsigned int b1
TYPE	539:3	539:3	16	unsigned int
TYPE_NAME	539:3	539:12	17	unsigned int
LEAF_NODE	539:3	539:3	18	unsigned
LEAF_NODE	539:12	539:12	18	int
NAME	539:24	539:24	16	b1
LEAF_NODE	539:24	539:24	17	b1
LEAF_NODE	539:26	539:26	15	,
VAR_DECL	539:3	539:28	15	unsigned int a1
TYPE	539:3	539:3	16	unsigned int
TYPE_NAME	539:3	539:12	17	unsigned int
LEAF_NODE	539:3	539:3	18	unsigned
LEAF_NODE	539:12	539:12	18	int
NAME	539:28	539:28	16	a1
LEAF_NODE	539:28	539:28	17	a1
LEAF_NODE	539:30	539:30	12	;
SIMPLE_DECL	540:3	540:26	11	unsigned int r2 ; r2 = cp [ 0 ] ;
VAR_DECL	540:3	540:16	12	unsigned int r2 ; r2 = cp [ 0 ]
TYPE	540:3	540:3	13	unsigned int
TYPE_NAME	540:3	540:12	14	unsigned int
LEAF_NODE	540:3	540:3	15	unsigned
LEAF_NODE	540:12	540:12	15	int
NAME	540:16	540:16	13	r2
LEAF_NODE	540:16	540:16	14	r2
LEAF_NODE	0:0	0:0	13	;
INIT	540:16	540:16	13	r2 = cp [ 0 ]
ASSIGN	540:16	540:21	14	r2 = cp [ 0 ]
LVAL	540:16	540:16	15	r2
NAME	540:16	540:16	16	r2
LEAF_NODE	540:16	540:16	17	r2
ASSIGN_OP	540:19	540:19	15	=
LEAF_NODE	540:19	540:19	16	=
RVAL	540:21	540:21	15	cp [ 0 ]
FIELD	540:21	540:25	16	cp [ 0 ]
LEAF_NODE	540:21	540:21	17	cp
LEAF_NODE	540:23	540:23	17	[
EXPR	540:24	540:24	17	0
FIELD	540:24	540:24	18	0
LEAF_NODE	540:24	540:24	19	0
LEAF_NODE	540:25	540:25	17	]
LEAF_NODE	540:26	540:26	12	;
SIMPLE_DECL	541:3	541:26	11	unsigned int g2 ; g2 = cp [ 1 ] ;
VAR_DECL	541:3	541:16	12	unsigned int g2 ; g2 = cp [ 1 ]
TYPE	541:3	541:3	13	unsigned int
TYPE_NAME	541:3	541:12	14	unsigned int
LEAF_NODE	541:3	541:3	15	unsigned
LEAF_NODE	541:12	541:12	15	int
NAME	541:16	541:16	13	g2
LEAF_NODE	541:16	541:16	14	g2
LEAF_NODE	0:0	0:0	13	;
INIT	541:16	541:16	13	g2 = cp [ 1 ]
ASSIGN	541:16	541:21	14	g2 = cp [ 1 ]
LVAL	541:16	541:16	15	g2
NAME	541:16	541:16	16	g2
LEAF_NODE	541:16	541:16	17	g2
ASSIGN_OP	541:19	541:19	15	=
LEAF_NODE	541:19	541:19	16	=
RVAL	541:21	541:21	15	cp [ 1 ]
FIELD	541:21	541:25	16	cp [ 1 ]
LEAF_NODE	541:21	541:21	17	cp
LEAF_NODE	541:23	541:23	17	[
EXPR	541:24	541:24	17	1
FIELD	541:24	541:24	18	1
LEAF_NODE	541:24	541:24	19	1
LEAF_NODE	541:25	541:25	17	]
LEAF_NODE	541:26	541:26	12	;
SIMPLE_DECL	542:3	542:26	11	unsigned int b2 ; b2 = cp [ 2 ] ;
VAR_DECL	542:3	542:16	12	unsigned int b2 ; b2 = cp [ 2 ]
TYPE	542:3	542:3	13	unsigned int
TYPE_NAME	542:3	542:12	14	unsigned int
LEAF_NODE	542:3	542:3	15	unsigned
LEAF_NODE	542:12	542:12	15	int
NAME	542:16	542:16	13	b2
LEAF_NODE	542:16	542:16	14	b2
LEAF_NODE	0:0	0:0	13	;
INIT	542:16	542:16	13	b2 = cp [ 2 ]
ASSIGN	542:16	542:21	14	b2 = cp [ 2 ]
LVAL	542:16	542:16	15	b2
NAME	542:16	542:16	16	b2
LEAF_NODE	542:16	542:16	17	b2
ASSIGN_OP	542:19	542:19	15	=
LEAF_NODE	542:19	542:19	16	=
RVAL	542:21	542:21	15	cp [ 2 ]
FIELD	542:21	542:25	16	cp [ 2 ]
LEAF_NODE	542:21	542:21	17	cp
LEAF_NODE	542:23	542:23	17	[
EXPR	542:24	542:24	17	2
FIELD	542:24	542:24	18	2
LEAF_NODE	542:24	542:24	19	2
LEAF_NODE	542:25	542:25	17	]
LEAF_NODE	542:26	542:26	12	;
SIMPLE_DECL	543:3	543:26	11	unsigned int a2 ; a2 = cp [ 3 ] ;
VAR_DECL	543:3	543:16	12	unsigned int a2 ; a2 = cp [ 3 ]
TYPE	543:3	543:3	13	unsigned int
TYPE_NAME	543:3	543:12	14	unsigned int
LEAF_NODE	543:3	543:3	15	unsigned
LEAF_NODE	543:12	543:12	15	int
NAME	543:16	543:16	13	a2
LEAF_NODE	543:16	543:16	14	a2
LEAF_NODE	0:0	0:0	13	;
INIT	543:16	543:16	13	a2 = cp [ 3 ]
ASSIGN	543:16	543:21	14	a2 = cp [ 3 ]
LVAL	543:16	543:16	15	a2
NAME	543:16	543:16	16	a2
LEAF_NODE	543:16	543:16	17	a2
ASSIGN_OP	543:19	543:19	15	=
LEAF_NODE	543:19	543:19	16	=
RVAL	543:21	543:21	15	cp [ 3 ]
FIELD	543:21	543:25	16	cp [ 3 ]
LEAF_NODE	543:21	543:21	17	cp
LEAF_NODE	543:23	543:23	17	[
EXPR	543:24	543:24	17	3
FIELD	543:24	543:24	18	3
LEAF_NODE	543:24	543:24	19	3
LEAF_NODE	543:25	543:25	17	]
LEAF_NODE	543:26	543:26	12	;
ITERATION	544:3	544:6	11	
KEYWORD	544:3	544:3	12	do
LEAF_NODE	544:3	544:3	13	do
LEAF_NODE	550:11	550:11	12	(
CONDITION	550:12	550:12	12	( cc -= 4 ) > 0
EXPR	550:12	550:24	13	( cc -= 4 ) > 0
LEAF_NODE	550:12	550:12	14	(
ASSIGN	550:13	550:19	14	cc -= 4
LVAL	550:13	550:13	15	cc
FIELD	550:13	550:13	16	cc
LEAF_NODE	550:13	550:13	17	cc
ASSIGN_OP	550:16	550:16	15	-=
LEAF_NODE	550:16	550:16	16	-=
RVAL	550:19	550:19	15	4
FIELD	550:19	550:19	16	4
LEAF_NODE	550:19	550:19	17	4
LEAF_NODE	550:20	550:20	14	)
REL_OPERATOR	550:22	550:22	14	>
LEAF_NODE	550:22	550:22	15	>
FIELD	550:24	550:24	14	0
LEAF_NODE	550:24	550:24	15	0
LEAF_NODE	550:25	550:25	12	)
STATEMENTS	544:6	550:3	12	
LEAF_NODE	544:6	544:6	13	{
STATEMENTS	545:4	549:4	13	
EXPR_STATEMENT	545:4	545:14	14	r1 = cp [ 4 ] ;
EXPR	545:4	545:4	15	r1 = cp [ 4 ]
ASSIGN	545:4	545:9	16	r1 = cp [ 4 ]
LVAL	545:4	545:4	17	r1
FIELD	545:4	545:4	18	r1
LEAF_NODE	545:4	545:4	19	r1
ASSIGN_OP	545:7	545:7	17	=
LEAF_NODE	545:7	545:7	18	=
RVAL	545:9	545:9	17	cp [ 4 ]
FIELD	545:9	545:13	18	cp [ 4 ]
LEAF_NODE	545:9	545:9	19	cp
LEAF_NODE	545:11	545:11	19	[
EXPR	545:12	545:12	19	4
FIELD	545:12	545:12	20	4
LEAF_NODE	545:12	545:12	21	4
LEAF_NODE	545:13	545:13	19	]
LEAF_NODE	545:14	545:14	15	;
EXPR_STATEMENT	545:16	545:53	14	cp [ 4 ] = ( unsigned char ) ( ( r1 - r2 ) & 0xff ) ;
EXPR	545:16	545:16	15	cp [ 4 ] = ( unsigned char ) ( ( r1 - r2 ) & 0xff )
ASSIGN	545:16	545:24	16	cp [ 4 ] = ( unsigned char ) ( ( r1 - r2 ) & 0xff )
LVAL	545:16	545:16	17	cp [ 4 ]
FIELD	545:16	545:20	18	cp [ 4 ]
LEAF_NODE	545:16	545:16	19	cp
LEAF_NODE	545:18	545:18	19	[
EXPR	545:19	545:19	19	4
FIELD	545:19	545:19	20	4
LEAF_NODE	545:19	545:19	21	4
LEAF_NODE	545:20	545:20	19	]
ASSIGN_OP	545:22	545:22	17	=
LEAF_NODE	545:22	545:22	18	=
RVAL	545:24	545:52	17	( unsigned char ) ( ( r1 - r2 ) & 0xff )
LEAF_NODE	545:24	545:24	18	(
TYPE_NAME	545:25	545:34	18	unsigned char
LEAF_NODE	545:25	545:25	19	unsigned
LEAF_NODE	545:34	545:34	19	char
LEAF_NODE	545:38	545:38	18	)
LEAF_NODE	545:39	545:39	18	(
LEAF_NODE	545:40	545:40	18	(
FIELD	545:41	545:41	18	r1
LEAF_NODE	545:41	545:41	19	r1
LEAF_NODE	545:43	545:43	18	-
FIELD	545:44	545:44	18	r2
LEAF_NODE	545:44	545:44	19	r2
LEAF_NODE	545:46	545:46	18	)
LEAF_NODE	545:47	545:47	18	&
FIELD	545:48	545:48	18	0xff
LEAF_NODE	545:48	545:48	19	0xff
LEAF_NODE	545:52	545:52	18	)
LEAF_NODE	545:53	545:53	15	;
EXPR_STATEMENT	545:55	545:62	14	r2 = r1 ;
EXPR	545:55	545:55	15	r2 = r1
ASSIGN	545:55	545:60	16	r2 = r1
LVAL	545:55	545:55	17	r2
FIELD	545:55	545:55	18	r2
LEAF_NODE	545:55	545:55	19	r2
ASSIGN_OP	545:58	545:58	17	=
LEAF_NODE	545:58	545:58	18	=
RVAL	545:60	545:60	17	r1
FIELD	545:60	545:60	18	r1
LEAF_NODE	545:60	545:60	19	r1
LEAF_NODE	545:62	545:62	15	;
EXPR_STATEMENT	546:4	546:14	14	g1 = cp [ 5 ] ;
EXPR	546:4	546:4	15	g1 = cp [ 5 ]
ASSIGN	546:4	546:9	16	g1 = cp [ 5 ]
LVAL	546:4	546:4	17	g1
FIELD	546:4	546:4	18	g1
LEAF_NODE	546:4	546:4	19	g1
ASSIGN_OP	546:7	546:7	17	=
LEAF_NODE	546:7	546:7	18	=
RVAL	546:9	546:9	17	cp [ 5 ]
FIELD	546:9	546:13	18	cp [ 5 ]
LEAF_NODE	546:9	546:9	19	cp
LEAF_NODE	546:11	546:11	19	[
EXPR	546:12	546:12	19	5
FIELD	546:12	546:12	20	5
LEAF_NODE	546:12	546:12	21	5
LEAF_NODE	546:13	546:13	19	]
LEAF_NODE	546:14	546:14	15	;
EXPR_STATEMENT	546:16	546:53	14	cp [ 5 ] = ( unsigned char ) ( ( g1 - g2 ) & 0xff ) ;
EXPR	546:16	546:16	15	cp [ 5 ] = ( unsigned char ) ( ( g1 - g2 ) & 0xff )
ASSIGN	546:16	546:24	16	cp [ 5 ] = ( unsigned char ) ( ( g1 - g2 ) & 0xff )
LVAL	546:16	546:16	17	cp [ 5 ]
FIELD	546:16	546:20	18	cp [ 5 ]
LEAF_NODE	546:16	546:16	19	cp
LEAF_NODE	546:18	546:18	19	[
EXPR	546:19	546:19	19	5
FIELD	546:19	546:19	20	5
LEAF_NODE	546:19	546:19	21	5
LEAF_NODE	546:20	546:20	19	]
ASSIGN_OP	546:22	546:22	17	=
LEAF_NODE	546:22	546:22	18	=
RVAL	546:24	546:52	17	( unsigned char ) ( ( g1 - g2 ) & 0xff )
LEAF_NODE	546:24	546:24	18	(
TYPE_NAME	546:25	546:34	18	unsigned char
LEAF_NODE	546:25	546:25	19	unsigned
LEAF_NODE	546:34	546:34	19	char
LEAF_NODE	546:38	546:38	18	)
LEAF_NODE	546:39	546:39	18	(
LEAF_NODE	546:40	546:40	18	(
FIELD	546:41	546:41	18	g1
LEAF_NODE	546:41	546:41	19	g1
LEAF_NODE	546:43	546:43	18	-
FIELD	546:44	546:44	18	g2
LEAF_NODE	546:44	546:44	19	g2
LEAF_NODE	546:46	546:46	18	)
LEAF_NODE	546:47	546:47	18	&
FIELD	546:48	546:48	18	0xff
LEAF_NODE	546:48	546:48	19	0xff
LEAF_NODE	546:52	546:52	18	)
LEAF_NODE	546:53	546:53	15	;
EXPR_STATEMENT	546:55	546:62	14	g2 = g1 ;
EXPR	546:55	546:55	15	g2 = g1
ASSIGN	546:55	546:60	16	g2 = g1
LVAL	546:55	546:55	17	g2
FIELD	546:55	546:55	18	g2
LEAF_NODE	546:55	546:55	19	g2
ASSIGN_OP	546:58	546:58	17	=
LEAF_NODE	546:58	546:58	18	=
RVAL	546:60	546:60	17	g1
FIELD	546:60	546:60	18	g1
LEAF_NODE	546:60	546:60	19	g1
LEAF_NODE	546:62	546:62	15	;
EXPR_STATEMENT	547:4	547:14	14	b1 = cp [ 6 ] ;
EXPR	547:4	547:4	15	b1 = cp [ 6 ]
ASSIGN	547:4	547:9	16	b1 = cp [ 6 ]
LVAL	547:4	547:4	17	b1
FIELD	547:4	547:4	18	b1
LEAF_NODE	547:4	547:4	19	b1
ASSIGN_OP	547:7	547:7	17	=
LEAF_NODE	547:7	547:7	18	=
RVAL	547:9	547:9	17	cp [ 6 ]
FIELD	547:9	547:13	18	cp [ 6 ]
LEAF_NODE	547:9	547:9	19	cp
LEAF_NODE	547:11	547:11	19	[
EXPR	547:12	547:12	19	6
FIELD	547:12	547:12	20	6
LEAF_NODE	547:12	547:12	21	6
LEAF_NODE	547:13	547:13	19	]
LEAF_NODE	547:14	547:14	15	;
EXPR_STATEMENT	547:16	547:53	14	cp [ 6 ] = ( unsigned char ) ( ( b1 - b2 ) & 0xff ) ;
EXPR	547:16	547:16	15	cp [ 6 ] = ( unsigned char ) ( ( b1 - b2 ) & 0xff )
ASSIGN	547:16	547:24	16	cp [ 6 ] = ( unsigned char ) ( ( b1 - b2 ) & 0xff )
LVAL	547:16	547:16	17	cp [ 6 ]
FIELD	547:16	547:20	18	cp [ 6 ]
LEAF_NODE	547:16	547:16	19	cp
LEAF_NODE	547:18	547:18	19	[
EXPR	547:19	547:19	19	6
FIELD	547:19	547:19	20	6
LEAF_NODE	547:19	547:19	21	6
LEAF_NODE	547:20	547:20	19	]
ASSIGN_OP	547:22	547:22	17	=
LEAF_NODE	547:22	547:22	18	=
RVAL	547:24	547:52	17	( unsigned char ) ( ( b1 - b2 ) & 0xff )
LEAF_NODE	547:24	547:24	18	(
TYPE_NAME	547:25	547:34	18	unsigned char
LEAF_NODE	547:25	547:25	19	unsigned
LEAF_NODE	547:34	547:34	19	char
LEAF_NODE	547:38	547:38	18	)
LEAF_NODE	547:39	547:39	18	(
LEAF_NODE	547:40	547:40	18	(
FIELD	547:41	547:41	18	b1
LEAF_NODE	547:41	547:41	19	b1
LEAF_NODE	547:43	547:43	18	-
FIELD	547:44	547:44	18	b2
LEAF_NODE	547:44	547:44	19	b2
LEAF_NODE	547:46	547:46	18	)
LEAF_NODE	547:47	547:47	18	&
FIELD	547:48	547:48	18	0xff
LEAF_NODE	547:48	547:48	19	0xff
LEAF_NODE	547:52	547:52	18	)
LEAF_NODE	547:53	547:53	15	;
EXPR_STATEMENT	547:55	547:62	14	b2 = b1 ;
EXPR	547:55	547:55	15	b2 = b1
ASSIGN	547:55	547:60	16	b2 = b1
LVAL	547:55	547:55	17	b2
FIELD	547:55	547:55	18	b2
LEAF_NODE	547:55	547:55	19	b2
ASSIGN_OP	547:58	547:58	17	=
LEAF_NODE	547:58	547:58	18	=
RVAL	547:60	547:60	17	b1
FIELD	547:60	547:60	18	b1
LEAF_NODE	547:60	547:60	19	b1
LEAF_NODE	547:62	547:62	15	;
EXPR_STATEMENT	548:4	548:14	14	a1 = cp [ 7 ] ;
EXPR	548:4	548:4	15	a1 = cp [ 7 ]
ASSIGN	548:4	548:9	16	a1 = cp [ 7 ]
LVAL	548:4	548:4	17	a1
FIELD	548:4	548:4	18	a1
LEAF_NODE	548:4	548:4	19	a1
ASSIGN_OP	548:7	548:7	17	=
LEAF_NODE	548:7	548:7	18	=
RVAL	548:9	548:9	17	cp [ 7 ]
FIELD	548:9	548:13	18	cp [ 7 ]
LEAF_NODE	548:9	548:9	19	cp
LEAF_NODE	548:11	548:11	19	[
EXPR	548:12	548:12	19	7
FIELD	548:12	548:12	20	7
LEAF_NODE	548:12	548:12	21	7
LEAF_NODE	548:13	548:13	19	]
LEAF_NODE	548:14	548:14	15	;
EXPR_STATEMENT	548:16	548:53	14	cp [ 7 ] = ( unsigned char ) ( ( a1 - a2 ) & 0xff ) ;
EXPR	548:16	548:16	15	cp [ 7 ] = ( unsigned char ) ( ( a1 - a2 ) & 0xff )
ASSIGN	548:16	548:24	16	cp [ 7 ] = ( unsigned char ) ( ( a1 - a2 ) & 0xff )
LVAL	548:16	548:16	17	cp [ 7 ]
FIELD	548:16	548:20	18	cp [ 7 ]
LEAF_NODE	548:16	548:16	19	cp
LEAF_NODE	548:18	548:18	19	[
EXPR	548:19	548:19	19	7
FIELD	548:19	548:19	20	7
LEAF_NODE	548:19	548:19	21	7
LEAF_NODE	548:20	548:20	19	]
ASSIGN_OP	548:22	548:22	17	=
LEAF_NODE	548:22	548:22	18	=
RVAL	548:24	548:52	17	( unsigned char ) ( ( a1 - a2 ) & 0xff )
LEAF_NODE	548:24	548:24	18	(
TYPE_NAME	548:25	548:34	18	unsigned char
LEAF_NODE	548:25	548:25	19	unsigned
LEAF_NODE	548:34	548:34	19	char
LEAF_NODE	548:38	548:38	18	)
LEAF_NODE	548:39	548:39	18	(
LEAF_NODE	548:40	548:40	18	(
FIELD	548:41	548:41	18	a1
LEAF_NODE	548:41	548:41	19	a1
LEAF_NODE	548:43	548:43	18	-
FIELD	548:44	548:44	18	a2
LEAF_NODE	548:44	548:44	19	a2
LEAF_NODE	548:46	548:46	18	)
LEAF_NODE	548:47	548:47	18	&
FIELD	548:48	548:48	18	0xff
LEAF_NODE	548:48	548:48	19	0xff
LEAF_NODE	548:52	548:52	18	)
LEAF_NODE	548:53	548:53	15	;
EXPR_STATEMENT	548:55	548:62	14	a2 = a1 ;
EXPR	548:55	548:55	15	a2 = a1
ASSIGN	548:55	548:60	16	a2 = a1
LVAL	548:55	548:55	17	a2
FIELD	548:55	548:55	18	a2
LEAF_NODE	548:55	548:55	19	a2
ASSIGN_OP	548:58	548:58	17	=
LEAF_NODE	548:58	548:58	18	=
RVAL	548:60	548:60	17	a1
FIELD	548:60	548:60	18	a1
LEAF_NODE	548:60	548:60	19	a1
LEAF_NODE	548:62	548:62	15	;
EXPR_STATEMENT	549:4	549:11	14	cp += 4 ;
EXPR	549:4	549:4	15	cp += 4
ASSIGN	549:4	549:10	16	cp += 4
LVAL	549:4	549:4	17	cp
FIELD	549:4	549:4	18	cp
LEAF_NODE	549:4	549:4	19	cp
ASSIGN_OP	549:7	549:7	17	+=
LEAF_NODE	549:7	549:7	18	+=
RVAL	549:10	549:10	17	4
FIELD	549:10	549:10	18	4
LEAF_NODE	549:10	549:10	19	4
LEAF_NODE	549:11	549:11	15	;
LEAF_NODE	550:3	550:3	13	}
LEAF_NODE	550:26	550:26	11	;
LEAF_NODE	551:2	551:2	10	}
SELECTION	551:4	551:9	6	
KEYWORD	551:4	551:4	7	else
LEAF_NODE	551:4	551:4	8	else
STATEMENTS	551:9	556:2	7	
LEAF_NODE	551:9	551:9	8	{
STATEMENTS	552:3	555:31	8	
EXPR_STATEMENT	552:3	552:15	9	cp += cc - 1 ;
EXPR	552:3	552:3	10	cp += cc - 1
ASSIGN	552:3	552:9	11	cp += cc - 1
LVAL	552:3	552:3	12	cp
FIELD	552:3	552:3	13	cp
LEAF_NODE	552:3	552:3	14	cp
ASSIGN_OP	552:6	552:6	12	+=
LEAF_NODE	552:6	552:6	13	+=
RVAL	552:9	552:14	12	cc - 1
FIELD	552:9	552:9	13	cc
LEAF_NODE	552:9	552:9	14	cc
LEAF_NODE	552:12	552:12	13	-
FIELD	552:14	552:14	13	1
LEAF_NODE	552:14	552:14	14	1
LEAF_NODE	552:15	552:15	10	;
ITERATION	553:3	553:6	9	
KEYWORD	553:3	553:3	10	do
LEAF_NODE	553:3	553:3	11	do
LEAF_NODE	555:11	555:11	10	(
CONDITION	555:12	555:12	10	( cc -= stride ) > 0
EXPR	555:12	555:29	11	( cc -= stride ) > 0
LEAF_NODE	555:12	555:12	12	(
ASSIGN	555:13	555:19	12	cc -= stride
LVAL	555:13	555:13	13	cc
FIELD	555:13	555:13	14	cc
LEAF_NODE	555:13	555:13	15	cc
ASSIGN_OP	555:16	555:16	13	-=
LEAF_NODE	555:16	555:16	14	-=
RVAL	555:19	555:19	13	stride
FIELD	555:19	555:19	14	stride
LEAF_NODE	555:19	555:19	15	stride
LEAF_NODE	555:25	555:25	12	)
REL_OPERATOR	555:27	555:27	12	>
LEAF_NODE	555:27	555:27	13	>
FIELD	555:29	555:29	12	0
LEAF_NODE	555:29	555:29	13	0
LEAF_NODE	555:30	555:30	10	)
STATEMENTS	553:6	555:3	10	
LEAF_NODE	553:6	553:6	11	{
STATEMENTS	554:4	554:81	11	
LEAF_NODE	554:4	554:4	12	REPEAT4
LEAF_NODE	554:11	554:11	12	(
EXPR_STATEMENT	554:12	554:75	12	stride , cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] - cp [ 0 ] ) & 0xff ) ;
EXPR	554:12	554:20	13	stride , cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] - cp [ 0 ] ) & 0xff )
FIELD	554:12	554:12	14	stride
LEAF_NODE	554:12	554:12	15	stride
LEAF_NODE	554:18	554:18	14	,
ASSIGN	554:20	554:33	14	cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] - cp [ 0 ] ) & 0xff )
LVAL	554:20	554:20	15	cp [ stride ]
FIELD	554:20	554:29	16	cp [ stride ]
LEAF_NODE	554:20	554:20	17	cp
LEAF_NODE	554:22	554:22	17	[
EXPR	554:23	554:23	17	stride
FIELD	554:23	554:23	18	stride
LEAF_NODE	554:23	554:23	19	stride
LEAF_NODE	554:29	554:29	17	]
ASSIGN_OP	554:31	554:31	15	=
LEAF_NODE	554:31	554:31	16	=
RVAL	554:33	554:74	15	( unsigned char ) ( ( cp [ stride ] - cp [ 0 ] ) & 0xff )
LEAF_NODE	554:33	554:33	16	(
TYPE_NAME	554:34	554:43	16	unsigned char
LEAF_NODE	554:34	554:34	17	unsigned
LEAF_NODE	554:43	554:43	17	char
LEAF_NODE	554:47	554:47	16	)
LEAF_NODE	554:48	554:48	16	(
LEAF_NODE	554:49	554:49	16	(
FIELD	554:50	554:59	16	cp [ stride ]
LEAF_NODE	554:50	554:50	17	cp
LEAF_NODE	554:52	554:52	17	[
EXPR	554:53	554:53	17	stride
FIELD	554:53	554:53	18	stride
LEAF_NODE	554:53	554:53	19	stride
LEAF_NODE	554:59	554:59	17	]
LEAF_NODE	554:61	554:61	16	-
FIELD	554:63	554:67	16	cp [ 0 ]
LEAF_NODE	554:63	554:63	17	cp
LEAF_NODE	554:65	554:65	17	[
EXPR	554:66	554:66	17	0
FIELD	554:66	554:66	18	0
LEAF_NODE	554:66	554:66	19	0
LEAF_NODE	554:67	554:67	17	]
LEAF_NODE	554:68	554:68	16	)
LEAF_NODE	554:69	554:69	16	&
FIELD	554:70	554:70	16	0xff
LEAF_NODE	554:70	554:70	17	0xff
LEAF_NODE	554:74	554:74	16	)
LEAF_NODE	554:75	554:75	13	;
LEAF_NODE	554:77	554:77	12	cp
LEAF_NODE	554:79	554:79	12	--
LEAF_NODE	554:81	554:81	12	)
LEAF_NODE	555:3	555:3	11	}
LEAF_NODE	555:31	555:31	9	;
LEAF_NODE	556:2	556:2	8	}
LEAF_NODE	557:1	557:1	5	}
JUMP_STATEMENT	558:1	558:9	3	return 1 ;
KEYWORD	558:1	558:1	4	return
LEAF_NODE	558:1	558:1	5	return
DESTINATION	558:8	558:8	4	1
EXPR	558:8	558:8	5	1
FIELD	558:8	558:8	6	1
LEAF_NODE	558:8	558:8	7	1
LEAF_NODE	558:9	558:9	4	;
LEAF_NODE	559:0	559:0	2	}
FUNCTION_DEF	562:0	586:0	1	
RETURN_TYPE	562:0	562:7	2	static int
LEAF_NODE	562:0	562:0	3	static
TYPE_NAME	562:7	562:7	3	int
LEAF_NODE	562:7	562:7	4	int
FUNCTION_NAME	563:0	563:0	2	horDiff16
LEAF_NODE	563:0	563:0	3	horDiff16
PARAMETER_LIST	563:9	563:44	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	563:9	563:9	3	(
PARAMETER_DECL	563:10	563:16	3	TIFF * tif
TYPE	563:10	563:14	4	TIFF *
TYPE_NAME	563:10	563:10	5	TIFF
LEAF_NODE	563:10	563:10	6	TIFF
POINTER	563:14	563:14	5	*
LEAF_NODE	563:14	563:14	6	*
NAME	563:16	563:16	4	tif
LEAF_NODE	563:16	563:16	5	tif
LEAF_NODE	563:19	563:19	3	,
PARAMETER_DECL	563:21	563:28	3	uint8 * cp0
TYPE	563:21	563:26	4	uint8 *
TYPE_NAME	563:21	563:21	5	uint8
LEAF_NODE	563:21	563:21	6	uint8
POINTER	563:26	563:26	5	*
LEAF_NODE	563:26	563:26	6	*
NAME	563:28	563:28	4	cp0
LEAF_NODE	563:28	563:28	5	cp0
LEAF_NODE	563:31	563:31	3	,
PARAMETER_DECL	563:33	563:42	3	tmsize_t cc
TYPE	563:33	563:33	4	tmsize_t
TYPE_NAME	563:33	563:33	5	tmsize_t
LEAF_NODE	563:33	563:33	6	tmsize_t
NAME	563:42	563:42	4	cc
LEAF_NODE	563:42	563:42	5	cc
LEAF_NODE	563:44	563:44	3	)
LEAF_NODE	564:0	564:0	2	{
STATEMENTS	565:1	585:1	2	
SIMPLE_DECL	565:1	565:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	565:1	565:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	565:1	565:19	5	TIFFPredictorState *
TYPE_NAME	565:1	565:1	6	TIFFPredictorState
LEAF_NODE	565:1	565:1	7	TIFFPredictorState
POINTER	565:19	565:19	6	*
LEAF_NODE	565:19	565:19	7	*
NAME	565:21	565:21	5	sp
LEAF_NODE	565:21	565:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	565:21	565:21	5	sp = PredictorState ( tif )
ASSIGN	565:21	565:26	6	sp = PredictorState ( tif )
LVAL	565:21	565:21	7	sp
NAME	565:21	565:21	8	sp
LEAF_NODE	565:21	565:21	9	sp
ASSIGN_OP	565:24	565:24	7	=
LEAF_NODE	565:24	565:24	8	=
RVAL	565:26	565:26	7	PredictorState ( tif )
FUNCTION_CALL	565:26	565:44	8	PredictorState ( tif )
CALLEE	565:26	565:26	9	PredictorState
LEAF_NODE	565:26	565:26	10	PredictorState
LEAF_NODE	565:40	565:40	9	(
ARGUMENT	565:41	565:41	9	tif
FIELD	565:41	565:41	10	tif
LEAF_NODE	565:41	565:41	11	tif
LEAF_NODE	565:44	565:44	9	)
LEAF_NODE	565:45	565:45	4	;
SIMPLE_DECL	566:1	566:29	3	tmsize_t stride ; stride = sp -> stride ;
VAR_DECL	566:1	566:10	4	tmsize_t stride ; stride = sp -> stride
TYPE	566:1	566:1	5	tmsize_t
TYPE_NAME	566:1	566:1	6	tmsize_t
LEAF_NODE	566:1	566:1	7	tmsize_t
NAME	566:10	566:10	5	stride
LEAF_NODE	566:10	566:10	6	stride
LEAF_NODE	0:0	0:0	5	;
INIT	566:10	566:10	5	stride = sp -> stride
ASSIGN	566:10	566:19	6	stride = sp -> stride
LVAL	566:10	566:10	7	stride
NAME	566:10	566:10	8	stride
LEAF_NODE	566:10	566:10	9	stride
ASSIGN_OP	566:17	566:17	7	=
LEAF_NODE	566:17	566:17	8	=
RVAL	566:19	566:19	7	sp -> stride
FIELD	566:19	566:23	8	sp -> stride
LEAF_NODE	566:19	566:19	9	sp
LEAF_NODE	566:21	566:21	9	->
LEAF_NODE	566:23	566:23	9	stride
LEAF_NODE	566:29	566:29	4	;
SIMPLE_DECL	567:1	567:27	3	uint16 * wp ; wp = ( uint16 * ) cp0 ;
VAR_DECL	567:1	567:9	4	uint16 * wp ; wp = ( uint16 * ) cp0
TYPE	567:1	567:8	5	uint16 *
TYPE_NAME	567:1	567:1	6	uint16
LEAF_NODE	567:1	567:1	7	uint16
POINTER	567:8	567:8	6	*
LEAF_NODE	567:8	567:8	7	*
NAME	567:9	567:9	5	wp
LEAF_NODE	567:9	567:9	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	567:9	567:9	5	wp = ( uint16 * ) cp0
ASSIGN	567:9	567:14	6	wp = ( uint16 * ) cp0
LVAL	567:9	567:9	7	wp
NAME	567:9	567:9	8	wp
LEAF_NODE	567:9	567:9	9	wp
ASSIGN_OP	567:12	567:12	7	=
LEAF_NODE	567:12	567:12	8	=
RVAL	567:14	567:24	7	( uint16 * ) cp0
LEAF_NODE	567:14	567:14	8	(
TYPE_NAME	567:15	567:15	8	uint16
LEAF_NODE	567:15	567:15	9	uint16
LEAF_NODE	567:21	567:21	8	*
LEAF_NODE	567:22	567:22	8	)
FIELD	567:24	567:24	8	cp0
LEAF_NODE	567:24	567:24	9	cp0
LEAF_NODE	567:27	567:27	4	;
SIMPLE_DECL	568:1	568:19	3	tmsize_t wc ; wc = cc / 2 ;
VAR_DECL	568:1	568:10	4	tmsize_t wc ; wc = cc / 2
TYPE	568:1	568:1	5	tmsize_t
TYPE_NAME	568:1	568:1	6	tmsize_t
LEAF_NODE	568:1	568:1	7	tmsize_t
NAME	568:10	568:10	5	wc
LEAF_NODE	568:10	568:10	6	wc
LEAF_NODE	0:0	0:0	5	;
INIT	568:10	568:10	5	wc = cc / 2
ASSIGN	568:10	568:15	6	wc = cc / 2
LVAL	568:10	568:10	7	wc
NAME	568:10	568:10	8	wc
LEAF_NODE	568:10	568:10	9	wc
ASSIGN_OP	568:13	568:13	7	=
LEAF_NODE	568:13	568:13	8	=
RVAL	568:15	568:18	7	cc / 2
FIELD	568:15	568:15	8	cc
LEAF_NODE	568:15	568:15	9	cc
LEAF_NODE	568:17	568:17	8	/
FIELD	568:18	568:18	8	2
LEAF_NODE	568:18	568:18	9	2
LEAF_NODE	568:19	568:19	4	;
SELECTION	570:4	571:4	3	
KEYWORD	570:4	570:4	4	if
LEAF_NODE	570:4	570:4	5	if
LEAF_NODE	570:6	570:6	4	(
CONDITION	570:7	570:7	4	( cc % ( 2 * stride ) ) != 0
EXPR	570:7	570:24	5	( cc % ( 2 * stride ) ) != 0
LEAF_NODE	570:7	570:7	6	(
FIELD	570:8	570:8	6	cc
LEAF_NODE	570:8	570:8	7	cc
LEAF_NODE	570:10	570:10	6	%
LEAF_NODE	570:11	570:11	6	(
FIELD	570:12	570:12	6	2
LEAF_NODE	570:12	570:12	7	2
LEAF_NODE	570:13	570:13	6	*
FIELD	570:14	570:14	6	stride
LEAF_NODE	570:14	570:14	7	stride
LEAF_NODE	570:20	570:20	6	)
LEAF_NODE	570:21	570:21	6	)
EQ_OPERATOR	570:22	570:22	6	!=
LEAF_NODE	570:22	570:22	7	!=
FIELD	570:24	570:24	6	0
LEAF_NODE	570:24	570:24	7	0
LEAF_NODE	570:25	570:25	4	)
STATEMENTS	571:4	575:4	4	
LEAF_NODE	571:4	571:4	5	{
STATEMENTS	572:8	574:8	5	
EXPR_STATEMENT	572:8	573:48	6	TIFFErrorExt ( tif -> tif_clientdata , "horDiff8" , "%s" , "(cc%(2*stride))!=0" ) ;
EXPR	572:8	572:8	7	TIFFErrorExt ( tif -> tif_clientdata , "horDiff8" , "%s" , "(cc%(2*stride))!=0" )
FUNCTION_CALL	572:8	573:47	8	TIFFErrorExt ( tif -> tif_clientdata , "horDiff8" , "%s" , "(cc%(2*stride))!=0" )
CALLEE	572:8	572:8	9	TIFFErrorExt
LEAF_NODE	572:8	572:8	10	TIFFErrorExt
LEAF_NODE	572:20	572:20	9	(
ARGUMENT	572:21	572:21	9	tif -> tif_clientdata
FIELD	572:21	572:26	10	tif -> tif_clientdata
LEAF_NODE	572:21	572:21	11	tif
LEAF_NODE	572:24	572:24	11	->
LEAF_NODE	572:26	572:26	11	tif_clientdata
LEAF_NODE	572:40	572:40	9	,
ARGUMENT	572:42	572:42	9	"horDiff8"
FIELD	572:42	572:42	10	"horDiff8"
LEAF_NODE	572:42	572:42	11	"horDiff8"
LEAF_NODE	572:52	572:52	9	,
ARGUMENT	573:21	573:21	9	"%s"
FIELD	573:21	573:21	10	"%s"
LEAF_NODE	573:21	573:21	11	"%s"
LEAF_NODE	573:25	573:25	9	,
ARGUMENT	573:27	573:27	9	"(cc%(2*stride))!=0"
FIELD	573:27	573:27	10	"(cc%(2*stride))!=0"
LEAF_NODE	573:27	573:27	11	"(cc%(2*stride))!=0"
LEAF_NODE	573:47	573:47	9	)
LEAF_NODE	573:48	573:48	7	;
JUMP_STATEMENT	574:8	574:16	6	return 0 ;
KEYWORD	574:8	574:8	7	return
LEAF_NODE	574:8	574:8	8	return
DESTINATION	574:15	574:15	7	0
EXPR	574:15	574:15	8	0
FIELD	574:15	574:15	9	0
LEAF_NODE	574:15	574:15	10	0
LEAF_NODE	574:16	574:16	7	;
LEAF_NODE	575:4	575:4	5	}
SELECTION	577:1	577:18	3	
KEYWORD	577:1	577:1	4	if
LEAF_NODE	577:1	577:1	5	if
LEAF_NODE	577:4	577:4	4	(
CONDITION	577:5	577:5	4	wc > stride
EXPR	577:5	577:10	5	wc > stride
FIELD	577:5	577:5	6	wc
LEAF_NODE	577:5	577:5	7	wc
REL_OPERATOR	577:8	577:8	6	>
LEAF_NODE	577:8	577:8	7	>
FIELD	577:10	577:10	6	stride
LEAF_NODE	577:10	577:10	7	stride
LEAF_NODE	577:16	577:16	4	)
STATEMENTS	577:18	584:1	4	
LEAF_NODE	577:18	577:18	5	{
STATEMENTS	578:2	583:18	5	
EXPR_STATEMENT	578:2	578:14	6	wc -= stride ;
EXPR	578:2	578:2	7	wc -= stride
ASSIGN	578:2	578:8	8	wc -= stride
LVAL	578:2	578:2	9	wc
FIELD	578:2	578:2	10	wc
LEAF_NODE	578:2	578:2	11	wc
ASSIGN_OP	578:5	578:5	9	-=
LEAF_NODE	578:5	578:5	10	-=
RVAL	578:8	578:8	9	stride
FIELD	578:8	578:8	10	stride
LEAF_NODE	578:8	578:8	11	stride
LEAF_NODE	578:14	578:14	7	;
EXPR_STATEMENT	579:2	579:14	6	wp += wc - 1 ;
EXPR	579:2	579:2	7	wp += wc - 1
ASSIGN	579:2	579:8	8	wp += wc - 1
LVAL	579:2	579:2	9	wp
FIELD	579:2	579:2	10	wp
LEAF_NODE	579:2	579:2	11	wp
ASSIGN_OP	579:5	579:5	9	+=
LEAF_NODE	579:5	579:5	10	+=
RVAL	579:8	579:13	9	wc - 1
FIELD	579:8	579:8	10	wc
LEAF_NODE	579:8	579:8	11	wc
LEAF_NODE	579:11	579:11	10	-
FIELD	579:13	579:13	10	1
LEAF_NODE	579:13	579:13	11	1
LEAF_NODE	579:14	579:14	7	;
ITERATION	580:2	580:5	6	
KEYWORD	580:2	580:2	7	do
LEAF_NODE	580:2	580:2	8	do
LEAF_NODE	583:10	583:10	7	(
CONDITION	583:11	583:11	7	wc > 0
EXPR	583:11	583:16	8	wc > 0
FIELD	583:11	583:11	9	wc
LEAF_NODE	583:11	583:11	10	wc
REL_OPERATOR	583:14	583:14	9	>
LEAF_NODE	583:14	583:14	10	>
FIELD	583:16	583:16	9	0
LEAF_NODE	583:16	583:16	10	0
LEAF_NODE	583:17	583:17	7	)
STATEMENTS	580:5	583:2	7	
LEAF_NODE	580:5	580:5	8	{
STATEMENTS	581:3	582:3	8	
LEAF_NODE	581:3	581:3	9	REPEAT4
LEAF_NODE	581:10	581:10	9	(
EXPR_STATEMENT	581:11	581:99	9	stride , wp [ stride ] = ( uint16 ) ( ( ( unsigned int ) wp [ stride ] - ( unsigned int ) wp [ 0 ] ) & 0xffff ) ;
EXPR	581:11	581:19	10	stride , wp [ stride ] = ( uint16 ) ( ( ( unsigned int ) wp [ stride ] - ( unsigned int ) wp [ 0 ] ) & 0xffff )
FIELD	581:11	581:11	11	stride
LEAF_NODE	581:11	581:11	12	stride
LEAF_NODE	581:17	581:17	11	,
ASSIGN	581:19	581:32	11	wp [ stride ] = ( uint16 ) ( ( ( unsigned int ) wp [ stride ] - ( unsigned int ) wp [ 0 ] ) & 0xffff )
LVAL	581:19	581:19	12	wp [ stride ]
FIELD	581:19	581:28	13	wp [ stride ]
LEAF_NODE	581:19	581:19	14	wp
LEAF_NODE	581:21	581:21	14	[
EXPR	581:22	581:22	14	stride
FIELD	581:22	581:22	15	stride
LEAF_NODE	581:22	581:22	16	stride
LEAF_NODE	581:28	581:28	14	]
ASSIGN_OP	581:30	581:30	12	=
LEAF_NODE	581:30	581:30	13	=
RVAL	581:32	581:98	12	( uint16 ) ( ( ( unsigned int ) wp [ stride ] - ( unsigned int ) wp [ 0 ] ) & 0xffff )
LEAF_NODE	581:32	581:32	13	(
TYPE_NAME	581:33	581:33	13	uint16
LEAF_NODE	581:33	581:33	14	uint16
LEAF_NODE	581:39	581:39	13	)
LEAF_NODE	581:40	581:40	13	(
LEAF_NODE	581:41	581:41	13	(
LEAF_NODE	581:42	581:42	13	(
TYPE_NAME	581:43	581:52	13	unsigned int
LEAF_NODE	581:43	581:43	14	unsigned
LEAF_NODE	581:52	581:52	14	int
LEAF_NODE	581:55	581:55	13	)
FIELD	581:56	581:65	13	wp [ stride ]
LEAF_NODE	581:56	581:56	14	wp
LEAF_NODE	581:58	581:58	14	[
EXPR	581:59	581:59	14	stride
FIELD	581:59	581:59	15	stride
LEAF_NODE	581:59	581:59	16	stride
LEAF_NODE	581:65	581:65	14	]
LEAF_NODE	581:67	581:67	13	-
LEAF_NODE	581:69	581:69	13	(
TYPE_NAME	581:70	581:79	13	unsigned int
LEAF_NODE	581:70	581:70	14	unsigned
LEAF_NODE	581:79	581:79	14	int
LEAF_NODE	581:82	581:82	13	)
FIELD	581:83	581:87	13	wp [ 0 ]
LEAF_NODE	581:83	581:83	14	wp
LEAF_NODE	581:85	581:85	14	[
EXPR	581:86	581:86	14	0
FIELD	581:86	581:86	15	0
LEAF_NODE	581:86	581:86	16	0
LEAF_NODE	581:87	581:87	14	]
LEAF_NODE	581:88	581:88	13	)
LEAF_NODE	581:90	581:90	13	&
FIELD	581:92	581:92	13	0xffff
LEAF_NODE	581:92	581:92	14	0xffff
LEAF_NODE	581:98	581:98	13	)
LEAF_NODE	581:99	581:99	10	;
LEAF_NODE	581:101	581:101	9	wp
LEAF_NODE	581:103	581:103	9	--
LEAF_NODE	581:105	581:105	9	)
EXPR_STATEMENT	582:3	582:15	9	wc -= stride ;
EXPR	582:3	582:3	10	wc -= stride
ASSIGN	582:3	582:9	11	wc -= stride
LVAL	582:3	582:3	12	wc
FIELD	582:3	582:3	13	wc
LEAF_NODE	582:3	582:3	14	wc
ASSIGN_OP	582:6	582:6	12	-=
LEAF_NODE	582:6	582:6	13	-=
RVAL	582:9	582:9	12	stride
FIELD	582:9	582:9	13	stride
LEAF_NODE	582:9	582:9	14	stride
LEAF_NODE	582:15	582:15	10	;
LEAF_NODE	583:2	583:2	8	}
LEAF_NODE	583:18	583:18	6	;
LEAF_NODE	584:1	584:1	5	}
JUMP_STATEMENT	585:1	585:9	3	return 1 ;
KEYWORD	585:1	585:1	4	return
LEAF_NODE	585:1	585:1	5	return
DESTINATION	585:8	585:8	4	1
EXPR	585:8	585:8	5	1
FIELD	585:8	585:8	6	1
LEAF_NODE	585:8	585:8	7	1
LEAF_NODE	585:9	585:9	4	;
LEAF_NODE	586:0	586:0	2	}
FUNCTION_DEF	588:0	599:0	1	
RETURN_TYPE	588:0	588:7	2	static int
LEAF_NODE	588:0	588:0	3	static
TYPE_NAME	588:7	588:7	3	int
LEAF_NODE	588:7	588:7	4	int
FUNCTION_NAME	589:0	589:0	2	swabHorDiff16
LEAF_NODE	589:0	589:0	3	swabHorDiff16
PARAMETER_LIST	589:13	589:48	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	589:13	589:13	3	(
PARAMETER_DECL	589:14	589:20	3	TIFF * tif
TYPE	589:14	589:18	4	TIFF *
TYPE_NAME	589:14	589:14	5	TIFF
LEAF_NODE	589:14	589:14	6	TIFF
POINTER	589:18	589:18	5	*
LEAF_NODE	589:18	589:18	6	*
NAME	589:20	589:20	4	tif
LEAF_NODE	589:20	589:20	5	tif
LEAF_NODE	589:23	589:23	3	,
PARAMETER_DECL	589:25	589:32	3	uint8 * cp0
TYPE	589:25	589:30	4	uint8 *
TYPE_NAME	589:25	589:25	5	uint8
LEAF_NODE	589:25	589:25	6	uint8
POINTER	589:30	589:30	5	*
LEAF_NODE	589:30	589:30	6	*
NAME	589:32	589:32	4	cp0
LEAF_NODE	589:32	589:32	5	cp0
LEAF_NODE	589:35	589:35	3	,
PARAMETER_DECL	589:37	589:46	3	tmsize_t cc
TYPE	589:37	589:37	4	tmsize_t
TYPE_NAME	589:37	589:37	5	tmsize_t
LEAF_NODE	589:37	589:37	6	tmsize_t
NAME	589:46	589:46	4	cc
LEAF_NODE	589:46	589:46	5	cc
LEAF_NODE	589:48	589:48	3	)
LEAF_NODE	590:0	590:0	2	{
STATEMENTS	591:4	598:4	2	
SIMPLE_DECL	591:4	591:30	3	uint16 * wp ; wp = ( uint16 * ) cp0 ;
VAR_DECL	591:4	591:12	4	uint16 * wp ; wp = ( uint16 * ) cp0
TYPE	591:4	591:10	5	uint16 *
TYPE_NAME	591:4	591:4	6	uint16
LEAF_NODE	591:4	591:4	7	uint16
POINTER	591:10	591:10	6	*
LEAF_NODE	591:10	591:10	7	*
NAME	591:12	591:12	5	wp
LEAF_NODE	591:12	591:12	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	591:12	591:12	5	wp = ( uint16 * ) cp0
ASSIGN	591:12	591:17	6	wp = ( uint16 * ) cp0
LVAL	591:12	591:12	7	wp
NAME	591:12	591:12	8	wp
LEAF_NODE	591:12	591:12	9	wp
ASSIGN_OP	591:15	591:15	7	=
LEAF_NODE	591:15	591:15	8	=
RVAL	591:17	591:27	7	( uint16 * ) cp0
LEAF_NODE	591:17	591:17	8	(
TYPE_NAME	591:18	591:18	8	uint16
LEAF_NODE	591:18	591:18	9	uint16
LEAF_NODE	591:24	591:24	8	*
LEAF_NODE	591:25	591:25	8	)
FIELD	591:27	591:27	8	cp0
LEAF_NODE	591:27	591:27	9	cp0
LEAF_NODE	591:30	591:30	4	;
SIMPLE_DECL	592:4	592:24	3	tmsize_t wc ; wc = cc / 2 ;
VAR_DECL	592:4	592:13	4	tmsize_t wc ; wc = cc / 2
TYPE	592:4	592:4	5	tmsize_t
TYPE_NAME	592:4	592:4	6	tmsize_t
LEAF_NODE	592:4	592:4	7	tmsize_t
NAME	592:13	592:13	5	wc
LEAF_NODE	592:13	592:13	6	wc
LEAF_NODE	0:0	0:0	5	;
INIT	592:13	592:13	5	wc = cc / 2
ASSIGN	592:13	592:18	6	wc = cc / 2
LVAL	592:13	592:13	7	wc
NAME	592:13	592:13	8	wc
LEAF_NODE	592:13	592:13	9	wc
ASSIGN_OP	592:16	592:16	7	=
LEAF_NODE	592:16	592:16	8	=
RVAL	592:18	592:23	7	cc / 2
FIELD	592:18	592:18	8	cc
LEAF_NODE	592:18	592:18	9	cc
LEAF_NODE	592:21	592:21	8	/
FIELD	592:23	592:23	8	2
LEAF_NODE	592:23	592:23	9	2
LEAF_NODE	592:24	592:24	4	;
SELECTION	594:4	595:8	3	
KEYWORD	594:4	594:4	4	if
LEAF_NODE	594:4	594:4	5	if
LEAF_NODE	594:6	594:6	4	(
CONDITION	594:8	594:8	4	! horDiff16 ( tif , cp0 , cc )
EXPR	594:8	594:8	5	! horDiff16 ( tif , cp0 , cc )
UNARY_EXPR	594:8	594:9	6	! horDiff16 ( tif , cp0 , cc )
UNARY_OPERATOR	594:8	594:8	7	!
LEAF_NODE	594:8	594:8	8	!
FUNCTION_CALL	594:9	594:31	7	horDiff16 ( tif , cp0 , cc )
CALLEE	594:9	594:9	8	horDiff16
LEAF_NODE	594:9	594:9	9	horDiff16
LEAF_NODE	594:18	594:18	8	(
ARGUMENT	594:19	594:19	8	tif
FIELD	594:19	594:19	9	tif
LEAF_NODE	594:19	594:19	10	tif
LEAF_NODE	594:22	594:22	8	,
ARGUMENT	594:24	594:24	8	cp0
FIELD	594:24	594:24	9	cp0
LEAF_NODE	594:24	594:24	10	cp0
LEAF_NODE	594:27	594:27	8	,
ARGUMENT	594:29	594:29	8	cc
FIELD	594:29	594:29	9	cc
LEAF_NODE	594:29	594:29	10	cc
LEAF_NODE	594:31	594:31	8	)
LEAF_NODE	594:33	594:33	4	)
STATEMENTS	595:8	595:8	4	
JUMP_STATEMENT	595:8	595:16	5	return 0 ;
KEYWORD	595:8	595:8	6	return
LEAF_NODE	595:8	595:8	7	return
DESTINATION	595:15	595:15	6	0
EXPR	595:15	595:15	7	0
FIELD	595:15	595:15	8	0
LEAF_NODE	595:15	595:15	9	0
LEAF_NODE	595:16	595:16	6	;
EXPR_STATEMENT	597:4	597:32	3	TIFFSwabArrayOfShort ( wp , wc ) ;
EXPR	597:4	597:4	4	TIFFSwabArrayOfShort ( wp , wc )
FUNCTION_CALL	597:4	597:31	5	TIFFSwabArrayOfShort ( wp , wc )
CALLEE	597:4	597:4	6	TIFFSwabArrayOfShort
LEAF_NODE	597:4	597:4	7	TIFFSwabArrayOfShort
LEAF_NODE	597:24	597:24	6	(
ARGUMENT	597:25	597:25	6	wp
FIELD	597:25	597:25	7	wp
LEAF_NODE	597:25	597:25	8	wp
LEAF_NODE	597:27	597:27	6	,
ARGUMENT	597:29	597:29	6	wc
FIELD	597:29	597:29	7	wc
LEAF_NODE	597:29	597:29	8	wc
LEAF_NODE	597:31	597:31	6	)
LEAF_NODE	597:32	597:32	4	;
JUMP_STATEMENT	598:4	598:12	3	return 1 ;
KEYWORD	598:4	598:4	4	return
LEAF_NODE	598:4	598:4	5	return
DESTINATION	598:11	598:11	4	1
EXPR	598:11	598:11	5	1
FIELD	598:11	598:11	6	1
LEAF_NODE	598:11	598:11	7	1
LEAF_NODE	598:12	598:12	4	;
LEAF_NODE	599:0	599:0	2	}
FUNCTION_DEF	602:0	626:0	1	
RETURN_TYPE	602:0	602:7	2	static int
LEAF_NODE	602:0	602:0	3	static
TYPE_NAME	602:7	602:7	3	int
LEAF_NODE	602:7	602:7	4	int
FUNCTION_NAME	603:0	603:0	2	horDiff32
LEAF_NODE	603:0	603:0	3	horDiff32
PARAMETER_LIST	603:9	603:44	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	603:9	603:9	3	(
PARAMETER_DECL	603:10	603:16	3	TIFF * tif
TYPE	603:10	603:14	4	TIFF *
TYPE_NAME	603:10	603:10	5	TIFF
LEAF_NODE	603:10	603:10	6	TIFF
POINTER	603:14	603:14	5	*
LEAF_NODE	603:14	603:14	6	*
NAME	603:16	603:16	4	tif
LEAF_NODE	603:16	603:16	5	tif
LEAF_NODE	603:19	603:19	3	,
PARAMETER_DECL	603:21	603:28	3	uint8 * cp0
TYPE	603:21	603:26	4	uint8 *
TYPE_NAME	603:21	603:21	5	uint8
LEAF_NODE	603:21	603:21	6	uint8
POINTER	603:26	603:26	5	*
LEAF_NODE	603:26	603:26	6	*
NAME	603:28	603:28	4	cp0
LEAF_NODE	603:28	603:28	5	cp0
LEAF_NODE	603:31	603:31	3	,
PARAMETER_DECL	603:33	603:42	3	tmsize_t cc
TYPE	603:33	603:33	4	tmsize_t
TYPE_NAME	603:33	603:33	5	tmsize_t
LEAF_NODE	603:33	603:33	6	tmsize_t
NAME	603:42	603:42	4	cc
LEAF_NODE	603:42	603:42	5	cc
LEAF_NODE	603:44	603:44	3	)
LEAF_NODE	604:0	604:0	2	{
STATEMENTS	605:1	625:1	2	
SIMPLE_DECL	605:1	605:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	605:1	605:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	605:1	605:19	5	TIFFPredictorState *
TYPE_NAME	605:1	605:1	6	TIFFPredictorState
LEAF_NODE	605:1	605:1	7	TIFFPredictorState
POINTER	605:19	605:19	6	*
LEAF_NODE	605:19	605:19	7	*
NAME	605:21	605:21	5	sp
LEAF_NODE	605:21	605:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	605:21	605:21	5	sp = PredictorState ( tif )
ASSIGN	605:21	605:26	6	sp = PredictorState ( tif )
LVAL	605:21	605:21	7	sp
NAME	605:21	605:21	8	sp
LEAF_NODE	605:21	605:21	9	sp
ASSIGN_OP	605:24	605:24	7	=
LEAF_NODE	605:24	605:24	8	=
RVAL	605:26	605:26	7	PredictorState ( tif )
FUNCTION_CALL	605:26	605:44	8	PredictorState ( tif )
CALLEE	605:26	605:26	9	PredictorState
LEAF_NODE	605:26	605:26	10	PredictorState
LEAF_NODE	605:40	605:40	9	(
ARGUMENT	605:41	605:41	9	tif
FIELD	605:41	605:41	10	tif
LEAF_NODE	605:41	605:41	11	tif
LEAF_NODE	605:44	605:44	9	)
LEAF_NODE	605:45	605:45	4	;
SIMPLE_DECL	606:1	606:29	3	tmsize_t stride ; stride = sp -> stride ;
VAR_DECL	606:1	606:10	4	tmsize_t stride ; stride = sp -> stride
TYPE	606:1	606:1	5	tmsize_t
TYPE_NAME	606:1	606:1	6	tmsize_t
LEAF_NODE	606:1	606:1	7	tmsize_t
NAME	606:10	606:10	5	stride
LEAF_NODE	606:10	606:10	6	stride
LEAF_NODE	0:0	0:0	5	;
INIT	606:10	606:10	5	stride = sp -> stride
ASSIGN	606:10	606:19	6	stride = sp -> stride
LVAL	606:10	606:10	7	stride
NAME	606:10	606:10	8	stride
LEAF_NODE	606:10	606:10	9	stride
ASSIGN_OP	606:17	606:17	7	=
LEAF_NODE	606:17	606:17	8	=
RVAL	606:19	606:19	7	sp -> stride
FIELD	606:19	606:23	8	sp -> stride
LEAF_NODE	606:19	606:19	9	sp
LEAF_NODE	606:21	606:21	9	->
LEAF_NODE	606:23	606:23	9	stride
LEAF_NODE	606:29	606:29	4	;
SIMPLE_DECL	607:1	607:27	3	uint32 * wp ; wp = ( uint32 * ) cp0 ;
VAR_DECL	607:1	607:9	4	uint32 * wp ; wp = ( uint32 * ) cp0
TYPE	607:1	607:8	5	uint32 *
TYPE_NAME	607:1	607:1	6	uint32
LEAF_NODE	607:1	607:1	7	uint32
POINTER	607:8	607:8	6	*
LEAF_NODE	607:8	607:8	7	*
NAME	607:9	607:9	5	wp
LEAF_NODE	607:9	607:9	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	607:9	607:9	5	wp = ( uint32 * ) cp0
ASSIGN	607:9	607:14	6	wp = ( uint32 * ) cp0
LVAL	607:9	607:9	7	wp
NAME	607:9	607:9	8	wp
LEAF_NODE	607:9	607:9	9	wp
ASSIGN_OP	607:12	607:12	7	=
LEAF_NODE	607:12	607:12	8	=
RVAL	607:14	607:24	7	( uint32 * ) cp0
LEAF_NODE	607:14	607:14	8	(
TYPE_NAME	607:15	607:15	8	uint32
LEAF_NODE	607:15	607:15	9	uint32
LEAF_NODE	607:21	607:21	8	*
LEAF_NODE	607:22	607:22	8	)
FIELD	607:24	607:24	8	cp0
LEAF_NODE	607:24	607:24	9	cp0
LEAF_NODE	607:27	607:27	4	;
SIMPLE_DECL	608:1	608:19	3	tmsize_t wc ; wc = cc / 4 ;
VAR_DECL	608:1	608:10	4	tmsize_t wc ; wc = cc / 4
TYPE	608:1	608:1	5	tmsize_t
TYPE_NAME	608:1	608:1	6	tmsize_t
LEAF_NODE	608:1	608:1	7	tmsize_t
NAME	608:10	608:10	5	wc
LEAF_NODE	608:10	608:10	6	wc
LEAF_NODE	0:0	0:0	5	;
INIT	608:10	608:10	5	wc = cc / 4
ASSIGN	608:10	608:15	6	wc = cc / 4
LVAL	608:10	608:10	7	wc
NAME	608:10	608:10	8	wc
LEAF_NODE	608:10	608:10	9	wc
ASSIGN_OP	608:13	608:13	7	=
LEAF_NODE	608:13	608:13	8	=
RVAL	608:15	608:18	7	cc / 4
FIELD	608:15	608:15	8	cc
LEAF_NODE	608:15	608:15	9	cc
LEAF_NODE	608:17	608:17	8	/
FIELD	608:18	608:18	8	4
LEAF_NODE	608:18	608:18	9	4
LEAF_NODE	608:19	608:19	4	;
SELECTION	610:4	611:4	3	
KEYWORD	610:4	610:4	4	if
LEAF_NODE	610:4	610:4	5	if
LEAF_NODE	610:6	610:6	4	(
CONDITION	610:7	610:7	4	( cc % ( 4 * stride ) ) != 0
EXPR	610:7	610:24	5	( cc % ( 4 * stride ) ) != 0
LEAF_NODE	610:7	610:7	6	(
FIELD	610:8	610:8	6	cc
LEAF_NODE	610:8	610:8	7	cc
LEAF_NODE	610:10	610:10	6	%
LEAF_NODE	610:11	610:11	6	(
FIELD	610:12	610:12	6	4
LEAF_NODE	610:12	610:12	7	4
LEAF_NODE	610:13	610:13	6	*
FIELD	610:14	610:14	6	stride
LEAF_NODE	610:14	610:14	7	stride
LEAF_NODE	610:20	610:20	6	)
LEAF_NODE	610:21	610:21	6	)
EQ_OPERATOR	610:22	610:22	6	!=
LEAF_NODE	610:22	610:22	7	!=
FIELD	610:24	610:24	6	0
LEAF_NODE	610:24	610:24	7	0
LEAF_NODE	610:25	610:25	4	)
STATEMENTS	611:4	615:4	4	
LEAF_NODE	611:4	611:4	5	{
STATEMENTS	612:8	614:8	5	
EXPR_STATEMENT	612:8	613:48	6	TIFFErrorExt ( tif -> tif_clientdata , "horDiff32" , "%s" , "(cc%(4*stride))!=0" ) ;
EXPR	612:8	612:8	7	TIFFErrorExt ( tif -> tif_clientdata , "horDiff32" , "%s" , "(cc%(4*stride))!=0" )
FUNCTION_CALL	612:8	613:47	8	TIFFErrorExt ( tif -> tif_clientdata , "horDiff32" , "%s" , "(cc%(4*stride))!=0" )
CALLEE	612:8	612:8	9	TIFFErrorExt
LEAF_NODE	612:8	612:8	10	TIFFErrorExt
LEAF_NODE	612:20	612:20	9	(
ARGUMENT	612:21	612:21	9	tif -> tif_clientdata
FIELD	612:21	612:26	10	tif -> tif_clientdata
LEAF_NODE	612:21	612:21	11	tif
LEAF_NODE	612:24	612:24	11	->
LEAF_NODE	612:26	612:26	11	tif_clientdata
LEAF_NODE	612:40	612:40	9	,
ARGUMENT	612:42	612:42	9	"horDiff32"
FIELD	612:42	612:42	10	"horDiff32"
LEAF_NODE	612:42	612:42	11	"horDiff32"
LEAF_NODE	612:53	612:53	9	,
ARGUMENT	613:21	613:21	9	"%s"
FIELD	613:21	613:21	10	"%s"
LEAF_NODE	613:21	613:21	11	"%s"
LEAF_NODE	613:25	613:25	9	,
ARGUMENT	613:27	613:27	9	"(cc%(4*stride))!=0"
FIELD	613:27	613:27	10	"(cc%(4*stride))!=0"
LEAF_NODE	613:27	613:27	11	"(cc%(4*stride))!=0"
LEAF_NODE	613:47	613:47	9	)
LEAF_NODE	613:48	613:48	7	;
JUMP_STATEMENT	614:8	614:16	6	return 0 ;
KEYWORD	614:8	614:8	7	return
LEAF_NODE	614:8	614:8	8	return
DESTINATION	614:15	614:15	7	0
EXPR	614:15	614:15	8	0
FIELD	614:15	614:15	9	0
LEAF_NODE	614:15	614:15	10	0
LEAF_NODE	614:16	614:16	7	;
LEAF_NODE	615:4	615:4	5	}
SELECTION	617:1	617:18	3	
KEYWORD	617:1	617:1	4	if
LEAF_NODE	617:1	617:1	5	if
LEAF_NODE	617:4	617:4	4	(
CONDITION	617:5	617:5	4	wc > stride
EXPR	617:5	617:10	5	wc > stride
FIELD	617:5	617:5	6	wc
LEAF_NODE	617:5	617:5	7	wc
REL_OPERATOR	617:8	617:8	6	>
LEAF_NODE	617:8	617:8	7	>
FIELD	617:10	617:10	6	stride
LEAF_NODE	617:10	617:10	7	stride
LEAF_NODE	617:16	617:16	4	)
STATEMENTS	617:18	624:1	4	
LEAF_NODE	617:18	617:18	5	{
STATEMENTS	618:2	623:18	5	
EXPR_STATEMENT	618:2	618:14	6	wc -= stride ;
EXPR	618:2	618:2	7	wc -= stride
ASSIGN	618:2	618:8	8	wc -= stride
LVAL	618:2	618:2	9	wc
FIELD	618:2	618:2	10	wc
LEAF_NODE	618:2	618:2	11	wc
ASSIGN_OP	618:5	618:5	9	-=
LEAF_NODE	618:5	618:5	10	-=
RVAL	618:8	618:8	9	stride
FIELD	618:8	618:8	10	stride
LEAF_NODE	618:8	618:8	11	stride
LEAF_NODE	618:14	618:14	7	;
EXPR_STATEMENT	619:2	619:14	6	wp += wc - 1 ;
EXPR	619:2	619:2	7	wp += wc - 1
ASSIGN	619:2	619:8	8	wp += wc - 1
LVAL	619:2	619:2	9	wp
FIELD	619:2	619:2	10	wp
LEAF_NODE	619:2	619:2	11	wp
ASSIGN_OP	619:5	619:5	9	+=
LEAF_NODE	619:5	619:5	10	+=
RVAL	619:8	619:13	9	wc - 1
FIELD	619:8	619:8	10	wc
LEAF_NODE	619:8	619:8	11	wc
LEAF_NODE	619:11	619:11	10	-
FIELD	619:13	619:13	10	1
LEAF_NODE	619:13	619:13	11	1
LEAF_NODE	619:14	619:14	7	;
ITERATION	620:2	620:5	6	
KEYWORD	620:2	620:2	7	do
LEAF_NODE	620:2	620:2	8	do
LEAF_NODE	623:10	623:10	7	(
CONDITION	623:11	623:11	7	wc > 0
EXPR	623:11	623:16	8	wc > 0
FIELD	623:11	623:11	9	wc
LEAF_NODE	623:11	623:11	10	wc
REL_OPERATOR	623:14	623:14	9	>
LEAF_NODE	623:14	623:14	10	>
FIELD	623:16	623:16	9	0
LEAF_NODE	623:16	623:16	10	0
LEAF_NODE	623:17	623:17	7	)
STATEMENTS	620:5	623:2	7	
LEAF_NODE	620:5	620:5	8	{
STATEMENTS	621:3	622:3	8	
LEAF_NODE	621:3	621:3	9	REPEAT4
LEAF_NODE	621:10	621:10	9	(
EXPR_STATEMENT	621:11	621:38	9	stride , wp [ stride ] -= wp [ 0 ] ;
EXPR	621:11	621:19	10	stride , wp [ stride ] -= wp [ 0 ]
FIELD	621:11	621:11	11	stride
LEAF_NODE	621:11	621:11	12	stride
LEAF_NODE	621:17	621:17	11	,
ASSIGN	621:19	621:33	11	wp [ stride ] -= wp [ 0 ]
LVAL	621:19	621:19	12	wp [ stride ]
FIELD	621:19	621:28	13	wp [ stride ]
LEAF_NODE	621:19	621:19	14	wp
LEAF_NODE	621:21	621:21	14	[
EXPR	621:22	621:22	14	stride
FIELD	621:22	621:22	15	stride
LEAF_NODE	621:22	621:22	16	stride
LEAF_NODE	621:28	621:28	14	]
ASSIGN_OP	621:30	621:30	12	-=
LEAF_NODE	621:30	621:30	13	-=
RVAL	621:33	621:33	12	wp [ 0 ]
FIELD	621:33	621:37	13	wp [ 0 ]
LEAF_NODE	621:33	621:33	14	wp
LEAF_NODE	621:35	621:35	14	[
EXPR	621:36	621:36	14	0
FIELD	621:36	621:36	15	0
LEAF_NODE	621:36	621:36	16	0
LEAF_NODE	621:37	621:37	14	]
LEAF_NODE	621:38	621:38	10	;
LEAF_NODE	621:40	621:40	9	wp
LEAF_NODE	621:42	621:42	9	--
LEAF_NODE	621:44	621:44	9	)
EXPR_STATEMENT	622:3	622:15	9	wc -= stride ;
EXPR	622:3	622:3	10	wc -= stride
ASSIGN	622:3	622:9	11	wc -= stride
LVAL	622:3	622:3	12	wc
FIELD	622:3	622:3	13	wc
LEAF_NODE	622:3	622:3	14	wc
ASSIGN_OP	622:6	622:6	12	-=
LEAF_NODE	622:6	622:6	13	-=
RVAL	622:9	622:9	12	stride
FIELD	622:9	622:9	13	stride
LEAF_NODE	622:9	622:9	14	stride
LEAF_NODE	622:15	622:15	10	;
LEAF_NODE	623:2	623:2	8	}
LEAF_NODE	623:18	623:18	6	;
LEAF_NODE	624:1	624:1	5	}
JUMP_STATEMENT	625:1	625:9	3	return 1 ;
KEYWORD	625:1	625:1	4	return
LEAF_NODE	625:1	625:1	5	return
DESTINATION	625:8	625:8	4	1
EXPR	625:8	625:8	5	1
FIELD	625:8	625:8	6	1
LEAF_NODE	625:8	625:8	7	1
LEAF_NODE	625:9	625:9	4	;
LEAF_NODE	626:0	626:0	2	}
FUNCTION_DEF	628:0	639:0	1	
RETURN_TYPE	628:0	628:7	2	static int
LEAF_NODE	628:0	628:0	3	static
TYPE_NAME	628:7	628:7	3	int
LEAF_NODE	628:7	628:7	4	int
FUNCTION_NAME	629:0	629:0	2	swabHorDiff32
LEAF_NODE	629:0	629:0	3	swabHorDiff32
PARAMETER_LIST	629:13	629:48	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	629:13	629:13	3	(
PARAMETER_DECL	629:14	629:20	3	TIFF * tif
TYPE	629:14	629:18	4	TIFF *
TYPE_NAME	629:14	629:14	5	TIFF
LEAF_NODE	629:14	629:14	6	TIFF
POINTER	629:18	629:18	5	*
LEAF_NODE	629:18	629:18	6	*
NAME	629:20	629:20	4	tif
LEAF_NODE	629:20	629:20	5	tif
LEAF_NODE	629:23	629:23	3	,
PARAMETER_DECL	629:25	629:32	3	uint8 * cp0
TYPE	629:25	629:30	4	uint8 *
TYPE_NAME	629:25	629:25	5	uint8
LEAF_NODE	629:25	629:25	6	uint8
POINTER	629:30	629:30	5	*
LEAF_NODE	629:30	629:30	6	*
NAME	629:32	629:32	4	cp0
LEAF_NODE	629:32	629:32	5	cp0
LEAF_NODE	629:35	629:35	3	,
PARAMETER_DECL	629:37	629:46	3	tmsize_t cc
TYPE	629:37	629:37	4	tmsize_t
TYPE_NAME	629:37	629:37	5	tmsize_t
LEAF_NODE	629:37	629:37	6	tmsize_t
NAME	629:46	629:46	4	cc
LEAF_NODE	629:46	629:46	5	cc
LEAF_NODE	629:48	629:48	3	)
LEAF_NODE	630:0	630:0	2	{
STATEMENTS	631:4	638:4	2	
SIMPLE_DECL	631:4	631:30	3	uint32 * wp ; wp = ( uint32 * ) cp0 ;
VAR_DECL	631:4	631:12	4	uint32 * wp ; wp = ( uint32 * ) cp0
TYPE	631:4	631:10	5	uint32 *
TYPE_NAME	631:4	631:4	6	uint32
LEAF_NODE	631:4	631:4	7	uint32
POINTER	631:10	631:10	6	*
LEAF_NODE	631:10	631:10	7	*
NAME	631:12	631:12	5	wp
LEAF_NODE	631:12	631:12	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	631:12	631:12	5	wp = ( uint32 * ) cp0
ASSIGN	631:12	631:17	6	wp = ( uint32 * ) cp0
LVAL	631:12	631:12	7	wp
NAME	631:12	631:12	8	wp
LEAF_NODE	631:12	631:12	9	wp
ASSIGN_OP	631:15	631:15	7	=
LEAF_NODE	631:15	631:15	8	=
RVAL	631:17	631:27	7	( uint32 * ) cp0
LEAF_NODE	631:17	631:17	8	(
TYPE_NAME	631:18	631:18	8	uint32
LEAF_NODE	631:18	631:18	9	uint32
LEAF_NODE	631:24	631:24	8	*
LEAF_NODE	631:25	631:25	8	)
FIELD	631:27	631:27	8	cp0
LEAF_NODE	631:27	631:27	9	cp0
LEAF_NODE	631:30	631:30	4	;
SIMPLE_DECL	632:4	632:24	3	tmsize_t wc ; wc = cc / 4 ;
VAR_DECL	632:4	632:13	4	tmsize_t wc ; wc = cc / 4
TYPE	632:4	632:4	5	tmsize_t
TYPE_NAME	632:4	632:4	6	tmsize_t
LEAF_NODE	632:4	632:4	7	tmsize_t
NAME	632:13	632:13	5	wc
LEAF_NODE	632:13	632:13	6	wc
LEAF_NODE	0:0	0:0	5	;
INIT	632:13	632:13	5	wc = cc / 4
ASSIGN	632:13	632:18	6	wc = cc / 4
LVAL	632:13	632:13	7	wc
NAME	632:13	632:13	8	wc
LEAF_NODE	632:13	632:13	9	wc
ASSIGN_OP	632:16	632:16	7	=
LEAF_NODE	632:16	632:16	8	=
RVAL	632:18	632:23	7	cc / 4
FIELD	632:18	632:18	8	cc
LEAF_NODE	632:18	632:18	9	cc
LEAF_NODE	632:21	632:21	8	/
FIELD	632:23	632:23	8	4
LEAF_NODE	632:23	632:23	9	4
LEAF_NODE	632:24	632:24	4	;
SELECTION	634:4	635:8	3	
KEYWORD	634:4	634:4	4	if
LEAF_NODE	634:4	634:4	5	if
LEAF_NODE	634:6	634:6	4	(
CONDITION	634:8	634:8	4	! horDiff32 ( tif , cp0 , cc )
EXPR	634:8	634:8	5	! horDiff32 ( tif , cp0 , cc )
UNARY_EXPR	634:8	634:9	6	! horDiff32 ( tif , cp0 , cc )
UNARY_OPERATOR	634:8	634:8	7	!
LEAF_NODE	634:8	634:8	8	!
FUNCTION_CALL	634:9	634:31	7	horDiff32 ( tif , cp0 , cc )
CALLEE	634:9	634:9	8	horDiff32
LEAF_NODE	634:9	634:9	9	horDiff32
LEAF_NODE	634:18	634:18	8	(
ARGUMENT	634:19	634:19	8	tif
FIELD	634:19	634:19	9	tif
LEAF_NODE	634:19	634:19	10	tif
LEAF_NODE	634:22	634:22	8	,
ARGUMENT	634:24	634:24	8	cp0
FIELD	634:24	634:24	9	cp0
LEAF_NODE	634:24	634:24	10	cp0
LEAF_NODE	634:27	634:27	8	,
ARGUMENT	634:29	634:29	8	cc
FIELD	634:29	634:29	9	cc
LEAF_NODE	634:29	634:29	10	cc
LEAF_NODE	634:31	634:31	8	)
LEAF_NODE	634:33	634:33	4	)
STATEMENTS	635:8	635:8	4	
JUMP_STATEMENT	635:8	635:16	5	return 0 ;
KEYWORD	635:8	635:8	6	return
LEAF_NODE	635:8	635:8	7	return
DESTINATION	635:15	635:15	6	0
EXPR	635:15	635:15	7	0
FIELD	635:15	635:15	8	0
LEAF_NODE	635:15	635:15	9	0
LEAF_NODE	635:16	635:16	6	;
EXPR_STATEMENT	637:4	637:31	3	TIFFSwabArrayOfLong ( wp , wc ) ;
EXPR	637:4	637:4	4	TIFFSwabArrayOfLong ( wp , wc )
FUNCTION_CALL	637:4	637:30	5	TIFFSwabArrayOfLong ( wp , wc )
CALLEE	637:4	637:4	6	TIFFSwabArrayOfLong
LEAF_NODE	637:4	637:4	7	TIFFSwabArrayOfLong
LEAF_NODE	637:23	637:23	6	(
ARGUMENT	637:24	637:24	6	wp
FIELD	637:24	637:24	7	wp
LEAF_NODE	637:24	637:24	8	wp
LEAF_NODE	637:26	637:26	6	,
ARGUMENT	637:28	637:28	6	wc
FIELD	637:28	637:28	7	wc
LEAF_NODE	637:28	637:28	8	wc
LEAF_NODE	637:30	637:30	6	)
LEAF_NODE	637:31	637:31	4	;
JUMP_STATEMENT	638:4	638:12	3	return 1 ;
KEYWORD	638:4	638:4	4	return
LEAF_NODE	638:4	638:4	5	return
DESTINATION	638:11	638:11	4	1
EXPR	638:11	638:11	5	1
FIELD	638:11	638:11	6	1
LEAF_NODE	638:11	638:11	7	1
LEAF_NODE	638:12	638:12	4	;
LEAF_NODE	639:0	639:0	2	}
FUNCTION_DEF	645:0	685:0	1	
RETURN_TYPE	645:0	645:7	2	static int
LEAF_NODE	645:0	645:0	3	static
TYPE_NAME	645:7	645:7	3	int
LEAF_NODE	645:7	645:7	4	int
FUNCTION_NAME	646:0	646:0	2	fpDiff
LEAF_NODE	646:0	646:0	3	fpDiff
PARAMETER_LIST	646:6	646:41	2	( TIFF * tif , uint8 * cp0 , tmsize_t cc )
LEAF_NODE	646:6	646:6	3	(
PARAMETER_DECL	646:7	646:13	3	TIFF * tif
TYPE	646:7	646:11	4	TIFF *
TYPE_NAME	646:7	646:7	5	TIFF
LEAF_NODE	646:7	646:7	6	TIFF
POINTER	646:11	646:11	5	*
LEAF_NODE	646:11	646:11	6	*
NAME	646:13	646:13	4	tif
LEAF_NODE	646:13	646:13	5	tif
LEAF_NODE	646:16	646:16	3	,
PARAMETER_DECL	646:18	646:25	3	uint8 * cp0
TYPE	646:18	646:23	4	uint8 *
TYPE_NAME	646:18	646:18	5	uint8
LEAF_NODE	646:18	646:18	6	uint8
POINTER	646:23	646:23	5	*
LEAF_NODE	646:23	646:23	6	*
NAME	646:25	646:25	4	cp0
LEAF_NODE	646:25	646:25	5	cp0
LEAF_NODE	646:28	646:28	3	,
PARAMETER_DECL	646:30	646:39	3	tmsize_t cc
TYPE	646:30	646:30	4	tmsize_t
TYPE_NAME	646:30	646:30	5	tmsize_t
LEAF_NODE	646:30	646:30	6	tmsize_t
NAME	646:39	646:39	4	cc
LEAF_NODE	646:39	646:39	5	cc
LEAF_NODE	646:41	646:41	3	)
LEAF_NODE	647:0	647:0	2	{
STATEMENTS	648:1	684:4	2	
SIMPLE_DECL	648:1	648:46	3	tmsize_t stride ; stride = PredictorState ( tif ) -> stride ;
VAR_DECL	648:1	648:10	4	tmsize_t stride ; stride = PredictorState ( tif ) -> stride
TYPE	648:1	648:1	5	tmsize_t
TYPE_NAME	648:1	648:1	6	tmsize_t
LEAF_NODE	648:1	648:1	7	tmsize_t
NAME	648:10	648:10	5	stride
LEAF_NODE	648:10	648:10	6	stride
LEAF_NODE	0:0	0:0	5	;
INIT	648:10	648:10	5	stride = PredictorState ( tif ) -> stride
ASSIGN	648:10	648:19	6	stride = PredictorState ( tif ) -> stride
LVAL	648:10	648:10	7	stride
NAME	648:10	648:10	8	stride
LEAF_NODE	648:10	648:10	9	stride
ASSIGN_OP	648:17	648:17	7	=
LEAF_NODE	648:17	648:17	8	=
RVAL	648:19	648:40	7	PredictorState ( tif ) -> stride
FUNCTION_CALL	648:19	648:37	8	PredictorState ( tif )
CALLEE	648:19	648:19	9	PredictorState
LEAF_NODE	648:19	648:19	10	PredictorState
LEAF_NODE	648:33	648:33	9	(
ARGUMENT	648:34	648:34	9	tif
FIELD	648:34	648:34	10	tif
LEAF_NODE	648:34	648:34	11	tif
LEAF_NODE	648:37	648:37	9	)
LEAF_NODE	648:38	648:38	8	->
LEAF_NODE	648:40	648:40	8	stride
LEAF_NODE	648:46	648:46	4	;
SIMPLE_DECL	649:1	649:47	3	uint32 bps ; bps = tif -> tif_dir . td_bitspersample / 8 ;
VAR_DECL	649:1	649:8	4	uint32 bps ; bps = tif -> tif_dir . td_bitspersample / 8
TYPE	649:1	649:1	5	uint32
TYPE_NAME	649:1	649:1	6	uint32
LEAF_NODE	649:1	649:1	7	uint32
NAME	649:8	649:8	5	bps
LEAF_NODE	649:8	649:8	6	bps
LEAF_NODE	0:0	0:0	5	;
INIT	649:8	649:8	5	bps = tif -> tif_dir . td_bitspersample / 8
ASSIGN	649:8	649:14	6	bps = tif -> tif_dir . td_bitspersample / 8
LVAL	649:8	649:8	7	bps
NAME	649:8	649:8	8	bps
LEAF_NODE	649:8	649:8	9	bps
ASSIGN_OP	649:12	649:12	7	=
LEAF_NODE	649:12	649:12	8	=
RVAL	649:14	649:46	7	tif -> tif_dir . td_bitspersample / 8
FIELD	649:14	649:27	8	tif -> tif_dir . td_bitspersample
LEAF_NODE	649:14	649:14	9	tif
LEAF_NODE	649:17	649:17	9	->
LEAF_NODE	649:19	649:19	9	tif_dir
LEAF_NODE	649:26	649:26	9	.
LEAF_NODE	649:27	649:27	9	td_bitspersample
LEAF_NODE	649:44	649:44	8	/
FIELD	649:46	649:46	8	8
LEAF_NODE	649:46	649:46	9	8
LEAF_NODE	649:47	649:47	4	;
SIMPLE_DECL	650:1	650:23	3	tmsize_t wc ; wc = cc / bps ;
VAR_DECL	650:1	650:10	4	tmsize_t wc ; wc = cc / bps
TYPE	650:1	650:1	5	tmsize_t
TYPE_NAME	650:1	650:1	6	tmsize_t
LEAF_NODE	650:1	650:1	7	tmsize_t
NAME	650:10	650:10	5	wc
LEAF_NODE	650:10	650:10	6	wc
LEAF_NODE	0:0	0:0	5	;
INIT	650:10	650:10	5	wc = cc / bps
ASSIGN	650:10	650:15	6	wc = cc / bps
LVAL	650:10	650:10	7	wc
NAME	650:10	650:10	8	wc
LEAF_NODE	650:10	650:10	9	wc
ASSIGN_OP	650:13	650:13	7	=
LEAF_NODE	650:13	650:13	8	=
RVAL	650:15	650:20	7	cc / bps
FIELD	650:15	650:15	8	cc
LEAF_NODE	650:15	650:15	9	cc
LEAF_NODE	650:18	650:18	8	/
FIELD	650:20	650:20	8	bps
LEAF_NODE	650:20	650:20	9	bps
LEAF_NODE	650:23	650:23	4	;
SIMPLE_DECL	651:1	651:15	3	tmsize_t count ;
VAR_DECL	651:1	651:10	4	tmsize_t count
TYPE	651:1	651:1	5	tmsize_t
TYPE_NAME	651:1	651:1	6	tmsize_t
LEAF_NODE	651:1	651:1	7	tmsize_t
NAME	651:10	651:10	5	count
LEAF_NODE	651:10	651:10	6	count
LEAF_NODE	651:15	651:15	4	;
SIMPLE_DECL	652:1	652:26	3	uint8 * cp ; cp = ( uint8 * ) cp0 ;
VAR_DECL	652:1	652:8	4	uint8 * cp ; cp = ( uint8 * ) cp0
TYPE	652:1	652:7	5	uint8 *
TYPE_NAME	652:1	652:1	6	uint8
LEAF_NODE	652:1	652:1	7	uint8
POINTER	652:7	652:7	6	*
LEAF_NODE	652:7	652:7	7	*
NAME	652:8	652:8	5	cp
LEAF_NODE	652:8	652:8	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	652:8	652:8	5	cp = ( uint8 * ) cp0
ASSIGN	652:8	652:13	6	cp = ( uint8 * ) cp0
LVAL	652:8	652:8	7	cp
NAME	652:8	652:8	8	cp
LEAF_NODE	652:8	652:8	9	cp
ASSIGN_OP	652:11	652:11	7	=
LEAF_NODE	652:11	652:11	8	=
RVAL	652:13	652:23	7	( uint8 * ) cp0
LEAF_NODE	652:13	652:13	8	(
TYPE_NAME	652:14	652:14	8	uint8
LEAF_NODE	652:14	652:14	9	uint8
LEAF_NODE	652:20	652:20	8	*
LEAF_NODE	652:21	652:21	8	)
FIELD	652:23	652:23	8	cp0
LEAF_NODE	652:23	652:23	9	cp0
LEAF_NODE	652:26	652:26	4	;
SIMPLE_DECL	653:1	653:11	3	uint8 * tmp ;
VAR_DECL	653:1	653:8	4	uint8 * tmp
TYPE	653:1	653:7	5	uint8 *
TYPE_NAME	653:1	653:1	6	uint8
LEAF_NODE	653:1	653:1	7	uint8
POINTER	653:7	653:7	6	*
LEAF_NODE	653:7	653:7	7	*
NAME	653:8	653:8	5	tmp
LEAF_NODE	653:8	653:8	6	tmp
LEAF_NODE	653:11	653:11	4	;
SELECTION	655:4	656:4	3	
KEYWORD	655:4	655:4	4	if
LEAF_NODE	655:4	655:4	5	if
LEAF_NODE	655:6	655:6	4	(
CONDITION	655:7	655:7	4	( cc % ( bps * stride ) ) != 0
EXPR	655:7	655:26	5	( cc % ( bps * stride ) ) != 0
LEAF_NODE	655:7	655:7	6	(
FIELD	655:8	655:8	6	cc
LEAF_NODE	655:8	655:8	7	cc
LEAF_NODE	655:10	655:10	6	%
LEAF_NODE	655:11	655:11	6	(
FIELD	655:12	655:12	6	bps
LEAF_NODE	655:12	655:12	7	bps
LEAF_NODE	655:15	655:15	6	*
FIELD	655:16	655:16	6	stride
LEAF_NODE	655:16	655:16	7	stride
LEAF_NODE	655:22	655:22	6	)
LEAF_NODE	655:23	655:23	6	)
EQ_OPERATOR	655:24	655:24	6	!=
LEAF_NODE	655:24	655:24	7	!=
FIELD	655:26	655:26	6	0
LEAF_NODE	655:26	655:26	7	0
LEAF_NODE	655:27	655:27	4	)
STATEMENTS	656:4	660:4	4	
LEAF_NODE	656:4	656:4	5	{
STATEMENTS	657:8	659:8	5	
EXPR_STATEMENT	657:8	658:50	6	TIFFErrorExt ( tif -> tif_clientdata , "fpDiff" , "%s" , "(cc%(bps*stride))!=0" ) ;
EXPR	657:8	657:8	7	TIFFErrorExt ( tif -> tif_clientdata , "fpDiff" , "%s" , "(cc%(bps*stride))!=0" )
FUNCTION_CALL	657:8	658:49	8	TIFFErrorExt ( tif -> tif_clientdata , "fpDiff" , "%s" , "(cc%(bps*stride))!=0" )
CALLEE	657:8	657:8	9	TIFFErrorExt
LEAF_NODE	657:8	657:8	10	TIFFErrorExt
LEAF_NODE	657:20	657:20	9	(
ARGUMENT	657:21	657:21	9	tif -> tif_clientdata
FIELD	657:21	657:26	10	tif -> tif_clientdata
LEAF_NODE	657:21	657:21	11	tif
LEAF_NODE	657:24	657:24	11	->
LEAF_NODE	657:26	657:26	11	tif_clientdata
LEAF_NODE	657:40	657:40	9	,
ARGUMENT	657:42	657:42	9	"fpDiff"
FIELD	657:42	657:42	10	"fpDiff"
LEAF_NODE	657:42	657:42	11	"fpDiff"
LEAF_NODE	657:50	657:50	9	,
ARGUMENT	658:21	658:21	9	"%s"
FIELD	658:21	658:21	10	"%s"
LEAF_NODE	658:21	658:21	11	"%s"
LEAF_NODE	658:25	658:25	9	,
ARGUMENT	658:27	658:27	9	"(cc%(bps*stride))!=0"
FIELD	658:27	658:27	10	"(cc%(bps*stride))!=0"
LEAF_NODE	658:27	658:27	11	"(cc%(bps*stride))!=0"
LEAF_NODE	658:49	658:49	9	)
LEAF_NODE	658:50	658:50	7	;
JUMP_STATEMENT	659:8	659:16	6	return 0 ;
KEYWORD	659:8	659:8	7	return
LEAF_NODE	659:8	659:8	8	return
DESTINATION	659:15	659:15	7	0
EXPR	659:15	659:15	8	0
FIELD	659:15	659:15	9	0
LEAF_NODE	659:15	659:15	10	0
LEAF_NODE	659:16	659:16	7	;
LEAF_NODE	660:4	660:4	5	}
EXPR_STATEMENT	662:4	662:34	3	tmp = ( uint8 * ) _TIFFmalloc ( cc ) ;
EXPR	662:4	662:4	4	tmp = ( uint8 * ) _TIFFmalloc ( cc )
ASSIGN	662:4	662:10	5	tmp = ( uint8 * ) _TIFFmalloc ( cc )
LVAL	662:4	662:4	6	tmp
FIELD	662:4	662:4	7	tmp
LEAF_NODE	662:4	662:4	8	tmp
ASSIGN_OP	662:8	662:8	6	=
LEAF_NODE	662:8	662:8	7	=
RVAL	662:10	662:19	6	( uint8 * ) _TIFFmalloc ( cc )
LEAF_NODE	662:10	662:10	7	(
TYPE_NAME	662:11	662:11	7	uint8
LEAF_NODE	662:11	662:11	8	uint8
LEAF_NODE	662:17	662:17	7	*
LEAF_NODE	662:18	662:18	7	)
FUNCTION_CALL	662:19	662:33	7	_TIFFmalloc ( cc )
CALLEE	662:19	662:19	8	_TIFFmalloc
LEAF_NODE	662:19	662:19	9	_TIFFmalloc
LEAF_NODE	662:30	662:30	8	(
ARGUMENT	662:31	662:31	8	cc
FIELD	662:31	662:31	9	cc
LEAF_NODE	662:31	662:31	10	cc
LEAF_NODE	662:33	662:33	8	)
LEAF_NODE	662:34	662:34	4	;
SELECTION	663:1	664:2	3	
KEYWORD	663:1	663:1	4	if
LEAF_NODE	663:1	663:1	5	if
LEAF_NODE	663:4	663:4	4	(
CONDITION	663:5	663:5	4	! tmp
EXPR	663:5	663:5	5	! tmp
UNARY_EXPR	663:5	663:6	6	! tmp
UNARY_OPERATOR	663:5	663:5	7	!
LEAF_NODE	663:5	663:5	8	!
FIELD	663:6	663:6	7	tmp
LEAF_NODE	663:6	663:6	8	tmp
LEAF_NODE	663:9	663:9	4	)
STATEMENTS	664:2	664:2	4	
JUMP_STATEMENT	664:2	664:10	5	return 0 ;
KEYWORD	664:2	664:2	6	return
LEAF_NODE	664:2	664:2	7	return
DESTINATION	664:9	664:9	6	0
EXPR	664:9	664:9	7	0
FIELD	664:9	664:9	8	0
LEAF_NODE	664:9	664:9	9	0
LEAF_NODE	664:10	664:10	6	;
EXPR_STATEMENT	666:1	666:26	3	_TIFFmemcpy ( tmp , cp0 , cc ) ;
EXPR	666:1	666:1	4	_TIFFmemcpy ( tmp , cp0 , cc )
FUNCTION_CALL	666:1	666:25	5	_TIFFmemcpy ( tmp , cp0 , cc )
CALLEE	666:1	666:1	6	_TIFFmemcpy
LEAF_NODE	666:1	666:1	7	_TIFFmemcpy
LEAF_NODE	666:12	666:12	6	(
ARGUMENT	666:13	666:13	6	tmp
FIELD	666:13	666:13	7	tmp
LEAF_NODE	666:13	666:13	8	tmp
LEAF_NODE	666:16	666:16	6	,
ARGUMENT	666:18	666:18	6	cp0
FIELD	666:18	666:18	7	cp0
LEAF_NODE	666:18	666:18	8	cp0
LEAF_NODE	666:21	666:21	6	,
ARGUMENT	666:23	666:23	6	cc
FIELD	666:23	666:23	7	cc
LEAF_NODE	666:23	666:23	8	cc
LEAF_NODE	666:25	666:25	6	)
LEAF_NODE	666:26	666:26	4	;
ITERATION	667:1	667:38	3	
KEYWORD	667:1	667:1	4	for
LEAF_NODE	667:1	667:1	5	for
LEAF_NODE	667:5	667:5	4	(
FOR_INIT	667:6	667:15	4	count = 0 ;
EXPR	667:6	667:6	5	count = 0
ASSIGN	667:6	667:14	6	count = 0
LVAL	667:6	667:6	7	count
FIELD	667:6	667:6	8	count
LEAF_NODE	667:6	667:6	9	count
ASSIGN_OP	667:12	667:12	7	=
LEAF_NODE	667:12	667:12	8	=
RVAL	667:14	667:14	7	0
FIELD	667:14	667:14	8	0
LEAF_NODE	667:14	667:14	9	0
LEAF_NODE	667:15	667:15	5	;
CONDITION	667:17	667:17	4	count < wc
EXPR	667:17	667:25	5	count < wc
FIELD	667:17	667:17	6	count
LEAF_NODE	667:17	667:17	7	count
REL_OPERATOR	667:23	667:23	6	<
LEAF_NODE	667:23	667:23	7	<
FIELD	667:25	667:25	6	wc
LEAF_NODE	667:25	667:25	7	wc
LEAF_NODE	667:27	667:27	4	;
FOR_EXPR	667:29	667:29	4	count ++
EXPR	667:29	667:29	5	count ++
FIELD	667:29	667:34	6	count ++
LEAF_NODE	667:29	667:29	7	count
LEAF_NODE	667:34	667:34	7	++
LEAF_NODE	667:36	667:36	4	)
STATEMENTS	667:38	677:1	4	
LEAF_NODE	667:38	667:38	5	{
STATEMENTS	668:2	669:2	5	
SIMPLE_DECL	668:2	668:13	6	uint32 byte ;
VAR_DECL	668:2	668:9	7	uint32 byte
TYPE	668:2	668:2	8	uint32
TYPE_NAME	668:2	668:2	9	uint32
LEAF_NODE	668:2	668:2	10	uint32
NAME	668:9	668:9	8	byte
LEAF_NODE	668:9	668:9	9	byte
LEAF_NODE	668:13	668:13	7	;
ITERATION	669:2	669:37	6	
KEYWORD	669:2	669:2	7	for
LEAF_NODE	669:2	669:2	8	for
LEAF_NODE	669:6	669:6	7	(
FOR_INIT	669:7	669:15	7	byte = 0 ;
EXPR	669:7	669:7	8	byte = 0
ASSIGN	669:7	669:14	9	byte = 0
LVAL	669:7	669:7	10	byte
FIELD	669:7	669:7	11	byte
LEAF_NODE	669:7	669:7	12	byte
ASSIGN_OP	669:12	669:12	10	=
LEAF_NODE	669:12	669:12	11	=
RVAL	669:14	669:14	10	0
FIELD	669:14	669:14	11	0
LEAF_NODE	669:14	669:14	12	0
LEAF_NODE	669:15	669:15	8	;
CONDITION	669:17	669:17	7	byte < bps
EXPR	669:17	669:24	8	byte < bps
FIELD	669:17	669:17	9	byte
LEAF_NODE	669:17	669:17	10	byte
REL_OPERATOR	669:22	669:22	9	<
LEAF_NODE	669:22	669:22	10	<
FIELD	669:24	669:24	9	bps
LEAF_NODE	669:24	669:24	10	bps
LEAF_NODE	669:27	669:27	7	;
FOR_EXPR	669:29	669:29	7	byte ++
EXPR	669:29	669:29	8	byte ++
FIELD	669:29	669:33	9	byte ++
LEAF_NODE	669:29	669:29	10	byte
LEAF_NODE	669:33	669:33	10	++
LEAF_NODE	669:35	669:35	7	)
STATEMENTS	669:37	676:2	7	
LEAF_NODE	669:37	669:37	8	{
STATEMENTS	671:3	673:3	8	
EXPR_STATEMENT	671:3	671:50	9	cp [ byte * wc + count ] = tmp [ bps * count + byte ] ;
EXPR	671:3	671:3	10	cp [ byte * wc + count ] = tmp [ bps * count + byte ]
ASSIGN	671:3	671:27	11	cp [ byte * wc + count ] = tmp [ bps * count + byte ]
LVAL	671:3	671:3	12	cp [ byte * wc + count ]
FIELD	671:3	671:23	13	cp [ byte * wc + count ]
LEAF_NODE	671:3	671:3	14	cp
LEAF_NODE	671:5	671:5	14	[
EXPR	671:6	671:18	14	byte * wc + count
FIELD	671:6	671:6	15	byte
LEAF_NODE	671:6	671:6	16	byte
LEAF_NODE	671:11	671:11	15	*
FIELD	671:13	671:13	15	wc
LEAF_NODE	671:13	671:13	16	wc
LEAF_NODE	671:16	671:16	15	+
FIELD	671:18	671:18	15	count
LEAF_NODE	671:18	671:18	16	count
LEAF_NODE	671:23	671:23	14	]
ASSIGN_OP	671:25	671:25	12	=
LEAF_NODE	671:25	671:25	13	=
RVAL	671:27	671:27	12	tmp [ bps * count + byte ]
FIELD	671:27	671:49	13	tmp [ bps * count + byte ]
LEAF_NODE	671:27	671:27	14	tmp
LEAF_NODE	671:30	671:30	14	[
EXPR	671:31	671:45	14	bps * count + byte
FIELD	671:31	671:31	15	bps
LEAF_NODE	671:31	671:31	16	bps
LEAF_NODE	671:35	671:35	15	*
FIELD	671:37	671:37	15	count
LEAF_NODE	671:37	671:37	16	count
LEAF_NODE	671:43	671:43	15	+
FIELD	671:45	671:45	15	byte
LEAF_NODE	671:45	671:45	16	byte
LEAF_NODE	671:49	671:49	14	]
LEAF_NODE	671:50	671:50	10	;
EXPR_STATEMENT	673:3	674:27	9	cp [ ( bps - byte - 1 ) * wc + count ] = tmp [ bps * count + byte ] ;
EXPR	673:3	673:3	10	cp [ ( bps - byte - 1 ) * wc + count ] = tmp [ bps * count + byte ]
ASSIGN	673:3	674:4	11	cp [ ( bps - byte - 1 ) * wc + count ] = tmp [ bps * count + byte ]
LVAL	673:3	673:3	12	cp [ ( bps - byte - 1 ) * wc + count ]
FIELD	673:3	673:35	13	cp [ ( bps - byte - 1 ) * wc + count ]
LEAF_NODE	673:3	673:3	14	cp
LEAF_NODE	673:5	673:5	14	[
EXPR	673:6	673:30	14	( bps - byte - 1 ) * wc + count
LEAF_NODE	673:6	673:6	15	(
FIELD	673:7	673:7	15	bps
LEAF_NODE	673:7	673:7	16	bps
LEAF_NODE	673:11	673:11	15	-
FIELD	673:13	673:13	15	byte
LEAF_NODE	673:13	673:13	16	byte
LEAF_NODE	673:18	673:18	15	-
FIELD	673:20	673:20	15	1
LEAF_NODE	673:20	673:20	16	1
LEAF_NODE	673:21	673:21	15	)
LEAF_NODE	673:23	673:23	15	*
FIELD	673:25	673:25	15	wc
LEAF_NODE	673:25	673:25	16	wc
LEAF_NODE	673:28	673:28	15	+
FIELD	673:30	673:30	15	count
LEAF_NODE	673:30	673:30	16	count
LEAF_NODE	673:35	673:35	14	]
ASSIGN_OP	673:37	673:37	12	=
LEAF_NODE	673:37	673:37	13	=
RVAL	674:4	674:4	12	tmp [ bps * count + byte ]
FIELD	674:4	674:26	13	tmp [ bps * count + byte ]
LEAF_NODE	674:4	674:4	14	tmp
LEAF_NODE	674:7	674:7	14	[
EXPR	674:8	674:22	14	bps * count + byte
FIELD	674:8	674:8	15	bps
LEAF_NODE	674:8	674:8	16	bps
LEAF_NODE	674:12	674:12	15	*
FIELD	674:14	674:14	15	count
LEAF_NODE	674:14	674:14	16	count
LEAF_NODE	674:20	674:20	15	+
FIELD	674:22	674:22	15	byte
LEAF_NODE	674:22	674:22	16	byte
LEAF_NODE	674:26	674:26	14	]
LEAF_NODE	674:27	674:27	10	;
LEAF_NODE	676:2	676:2	8	}
LEAF_NODE	677:1	677:1	5	}
EXPR_STATEMENT	678:1	678:15	3	_TIFFfree ( tmp ) ;
EXPR	678:1	678:1	4	_TIFFfree ( tmp )
FUNCTION_CALL	678:1	678:14	5	_TIFFfree ( tmp )
CALLEE	678:1	678:1	6	_TIFFfree
LEAF_NODE	678:1	678:1	7	_TIFFfree
LEAF_NODE	678:10	678:10	6	(
ARGUMENT	678:11	678:11	6	tmp
FIELD	678:11	678:11	7	tmp
LEAF_NODE	678:11	678:11	8	tmp
LEAF_NODE	678:14	678:14	6	)
LEAF_NODE	678:15	678:15	4	;
EXPR_STATEMENT	680:1	680:19	3	cp = ( uint8 * ) cp0 ;
EXPR	680:1	680:1	4	cp = ( uint8 * ) cp0
ASSIGN	680:1	680:6	5	cp = ( uint8 * ) cp0
LVAL	680:1	680:1	6	cp
FIELD	680:1	680:1	7	cp
LEAF_NODE	680:1	680:1	8	cp
ASSIGN_OP	680:4	680:4	6	=
LEAF_NODE	680:4	680:4	7	=
RVAL	680:6	680:16	6	( uint8 * ) cp0
LEAF_NODE	680:6	680:6	7	(
TYPE_NAME	680:7	680:7	7	uint8
LEAF_NODE	680:7	680:7	8	uint8
LEAF_NODE	680:13	680:13	7	*
LEAF_NODE	680:14	680:14	7	)
FIELD	680:16	680:16	7	cp0
LEAF_NODE	680:16	680:16	8	cp0
LEAF_NODE	680:19	680:19	4	;
EXPR_STATEMENT	681:1	681:22	3	cp += cc - stride - 1 ;
EXPR	681:1	681:1	4	cp += cc - stride - 1
ASSIGN	681:1	681:7	5	cp += cc - stride - 1
LVAL	681:1	681:1	6	cp
FIELD	681:1	681:1	7	cp
LEAF_NODE	681:1	681:1	8	cp
ASSIGN_OP	681:4	681:4	6	+=
LEAF_NODE	681:4	681:4	7	+=
RVAL	681:7	681:21	6	cc - stride - 1
FIELD	681:7	681:7	7	cc
LEAF_NODE	681:7	681:7	8	cc
LEAF_NODE	681:10	681:10	7	-
FIELD	681:12	681:12	7	stride
LEAF_NODE	681:12	681:12	8	stride
LEAF_NODE	681:19	681:19	7	-
FIELD	681:21	681:21	7	1
LEAF_NODE	681:21	681:21	8	1
LEAF_NODE	681:22	681:22	4	;
ITERATION	682:1	683:2	3	
KEYWORD	682:1	682:1	4	for
LEAF_NODE	682:1	682:1	5	for
LEAF_NODE	682:5	682:5	4	(
FOR_INIT	682:6	682:16	4	count = cc ;
EXPR	682:6	682:6	5	count = cc
ASSIGN	682:6	682:14	6	count = cc
LVAL	682:6	682:6	7	count
FIELD	682:6	682:6	8	count
LEAF_NODE	682:6	682:6	9	count
ASSIGN_OP	682:12	682:12	7	=
LEAF_NODE	682:12	682:12	8	=
RVAL	682:14	682:14	7	cc
FIELD	682:14	682:14	8	cc
LEAF_NODE	682:14	682:14	9	cc
LEAF_NODE	682:16	682:16	5	;
CONDITION	682:18	682:18	4	count > stride
EXPR	682:18	682:26	5	count > stride
FIELD	682:18	682:18	6	count
LEAF_NODE	682:18	682:18	7	count
REL_OPERATOR	682:24	682:24	6	>
LEAF_NODE	682:24	682:24	7	>
FIELD	682:26	682:26	6	stride
LEAF_NODE	682:26	682:26	7	stride
LEAF_NODE	682:32	682:32	4	;
FOR_EXPR	682:34	682:34	4	count -= stride
EXPR	682:34	682:34	5	count -= stride
ASSIGN	682:34	682:43	6	count -= stride
LVAL	682:34	682:34	7	count
FIELD	682:34	682:34	8	count
LEAF_NODE	682:34	682:34	9	count
ASSIGN_OP	682:40	682:40	7	-=
LEAF_NODE	682:40	682:40	8	-=
RVAL	682:43	682:43	7	stride
FIELD	682:43	682:43	8	stride
LEAF_NODE	682:43	682:43	9	stride
LEAF_NODE	682:49	682:49	4	)
STATEMENTS	683:2	683:2	4	
LEAF_NODE	683:2	683:2	5	REPEAT4
LEAF_NODE	683:9	683:9	3	(
EXPR_STATEMENT	683:10	683:73	3	stride , cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] - cp [ 0 ] ) & 0xff ) ;
EXPR	683:10	683:18	4	stride , cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] - cp [ 0 ] ) & 0xff )
FIELD	683:10	683:10	5	stride
LEAF_NODE	683:10	683:10	6	stride
LEAF_NODE	683:16	683:16	5	,
ASSIGN	683:18	683:31	5	cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] - cp [ 0 ] ) & 0xff )
LVAL	683:18	683:18	6	cp [ stride ]
FIELD	683:18	683:27	7	cp [ stride ]
LEAF_NODE	683:18	683:18	8	cp
LEAF_NODE	683:20	683:20	8	[
EXPR	683:21	683:21	8	stride
FIELD	683:21	683:21	9	stride
LEAF_NODE	683:21	683:21	10	stride
LEAF_NODE	683:27	683:27	8	]
ASSIGN_OP	683:29	683:29	6	=
LEAF_NODE	683:29	683:29	7	=
RVAL	683:31	683:72	6	( unsigned char ) ( ( cp [ stride ] - cp [ 0 ] ) & 0xff )
LEAF_NODE	683:31	683:31	7	(
TYPE_NAME	683:32	683:41	7	unsigned char
LEAF_NODE	683:32	683:32	8	unsigned
LEAF_NODE	683:41	683:41	8	char
LEAF_NODE	683:45	683:45	7	)
LEAF_NODE	683:46	683:46	7	(
LEAF_NODE	683:47	683:47	7	(
FIELD	683:48	683:57	7	cp [ stride ]
LEAF_NODE	683:48	683:48	8	cp
LEAF_NODE	683:50	683:50	8	[
EXPR	683:51	683:51	8	stride
FIELD	683:51	683:51	9	stride
LEAF_NODE	683:51	683:51	10	stride
LEAF_NODE	683:57	683:57	8	]
LEAF_NODE	683:59	683:59	7	-
FIELD	683:61	683:65	7	cp [ 0 ]
LEAF_NODE	683:61	683:61	8	cp
LEAF_NODE	683:63	683:63	8	[
EXPR	683:64	683:64	8	0
FIELD	683:64	683:64	9	0
LEAF_NODE	683:64	683:64	10	0
LEAF_NODE	683:65	683:65	8	]
LEAF_NODE	683:66	683:66	7	)
LEAF_NODE	683:67	683:67	7	&
FIELD	683:68	683:68	7	0xff
LEAF_NODE	683:68	683:68	8	0xff
LEAF_NODE	683:72	683:72	7	)
LEAF_NODE	683:73	683:73	4	;
LEAF_NODE	683:75	683:75	3	cp
LEAF_NODE	683:77	683:77	3	--
LEAF_NODE	683:79	683:79	3	)
JUMP_STATEMENT	684:4	684:12	3	return 1 ;
KEYWORD	684:4	684:4	4	return
LEAF_NODE	684:4	684:4	5	return
DESTINATION	684:11	684:11	4	1
EXPR	684:11	684:11	5	1
FIELD	684:11	684:11	6	1
LEAF_NODE	684:11	684:11	7	1
LEAF_NODE	684:12	684:12	4	;
LEAF_NODE	685:0	685:0	2	}
FUNCTION_DEF	687:0	700:0	1	
RETURN_TYPE	687:0	687:7	2	static int
LEAF_NODE	687:0	687:0	3	static
TYPE_NAME	687:7	687:7	3	int
LEAF_NODE	687:7	687:7	4	int
FUNCTION_NAME	688:0	688:0	2	PredictorEncodeRow
LEAF_NODE	688:0	688:0	3	PredictorEncodeRow
PARAMETER_LIST	688:18	688:62	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	688:18	688:18	3	(
PARAMETER_DECL	688:19	688:25	3	TIFF * tif
TYPE	688:19	688:23	4	TIFF *
TYPE_NAME	688:19	688:19	5	TIFF
LEAF_NODE	688:19	688:19	6	TIFF
POINTER	688:23	688:23	5	*
LEAF_NODE	688:23	688:23	6	*
NAME	688:25	688:25	4	tif
LEAF_NODE	688:25	688:25	5	tif
LEAF_NODE	688:28	688:28	3	,
PARAMETER_DECL	688:30	688:37	3	uint8 * bp
TYPE	688:30	688:35	4	uint8 *
TYPE_NAME	688:30	688:30	5	uint8
LEAF_NODE	688:30	688:30	6	uint8
POINTER	688:35	688:35	5	*
LEAF_NODE	688:35	688:35	6	*
NAME	688:37	688:37	4	bp
LEAF_NODE	688:37	688:37	5	bp
LEAF_NODE	688:39	688:39	3	,
PARAMETER_DECL	688:41	688:50	3	tmsize_t cc
TYPE	688:41	688:41	4	tmsize_t
TYPE_NAME	688:41	688:41	5	tmsize_t
LEAF_NODE	688:41	688:41	6	tmsize_t
NAME	688:50	688:50	4	cc
LEAF_NODE	688:50	688:50	5	cc
LEAF_NODE	688:52	688:52	3	,
PARAMETER_DECL	688:54	688:61	3	uint16 s
TYPE	688:54	688:54	4	uint16
TYPE_NAME	688:54	688:54	5	uint16
LEAF_NODE	688:54	688:54	6	uint16
NAME	688:61	688:61	4	s
LEAF_NODE	688:61	688:61	5	s
LEAF_NODE	688:62	688:62	3	)
LEAF_NODE	689:0	689:0	2	{
STATEMENTS	690:1	699:1	2	
SIMPLE_DECL	690:1	690:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	690:1	690:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	690:1	690:20	5	TIFFPredictorState *
TYPE_NAME	690:1	690:1	6	TIFFPredictorState
LEAF_NODE	690:1	690:1	7	TIFFPredictorState
POINTER	690:20	690:20	6	*
LEAF_NODE	690:20	690:20	7	*
NAME	690:21	690:21	5	sp
LEAF_NODE	690:21	690:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	690:21	690:21	5	sp = PredictorState ( tif )
ASSIGN	690:21	690:26	6	sp = PredictorState ( tif )
LVAL	690:21	690:21	7	sp
NAME	690:21	690:21	8	sp
LEAF_NODE	690:21	690:21	9	sp
ASSIGN_OP	690:24	690:24	7	=
LEAF_NODE	690:24	690:24	8	=
RVAL	690:26	690:26	7	PredictorState ( tif )
FUNCTION_CALL	690:26	690:44	8	PredictorState ( tif )
CALLEE	690:26	690:26	9	PredictorState
LEAF_NODE	690:26	690:26	10	PredictorState
LEAF_NODE	690:40	690:40	9	(
ARGUMENT	690:41	690:41	9	tif
FIELD	690:41	690:41	10	tif
LEAF_NODE	690:41	690:41	11	tif
LEAF_NODE	690:44	690:44	9	)
LEAF_NODE	690:45	690:45	4	;
EXPR_STATEMENT	692:1	692:19	3	assert ( sp != NULL ) ;
EXPR	692:1	692:1	4	assert ( sp != NULL )
FUNCTION_CALL	692:1	692:18	5	assert ( sp != NULL )
CALLEE	692:1	692:1	6	assert
LEAF_NODE	692:1	692:1	7	assert
LEAF_NODE	692:7	692:7	6	(
ARGUMENT	692:8	692:14	6	sp != NULL
FIELD	692:8	692:8	7	sp
LEAF_NODE	692:8	692:8	8	sp
EQ_OPERATOR	692:11	692:11	7	!=
LEAF_NODE	692:11	692:11	8	!=
FIELD	692:14	692:14	7	NULL
LEAF_NODE	692:14	692:14	8	NULL
LEAF_NODE	692:18	692:18	6	)
LEAF_NODE	692:19	692:19	4	;
EXPR_STATEMENT	693:1	693:32	3	assert ( sp -> encodepfunc != NULL ) ;
EXPR	693:1	693:1	4	assert ( sp -> encodepfunc != NULL )
FUNCTION_CALL	693:1	693:31	5	assert ( sp -> encodepfunc != NULL )
CALLEE	693:1	693:1	6	assert
LEAF_NODE	693:1	693:1	7	assert
LEAF_NODE	693:7	693:7	6	(
ARGUMENT	693:8	693:27	6	sp -> encodepfunc != NULL
FIELD	693:8	693:12	7	sp -> encodepfunc
LEAF_NODE	693:8	693:8	8	sp
LEAF_NODE	693:10	693:10	8	->
LEAF_NODE	693:12	693:12	8	encodepfunc
EQ_OPERATOR	693:24	693:24	7	!=
LEAF_NODE	693:24	693:24	8	!=
FIELD	693:27	693:27	7	NULL
LEAF_NODE	693:27	693:27	8	NULL
LEAF_NODE	693:31	693:31	6	)
LEAF_NODE	693:32	693:32	4	;
EXPR_STATEMENT	694:1	694:30	3	assert ( sp -> encoderow != NULL ) ;
EXPR	694:1	694:1	4	assert ( sp -> encoderow != NULL )
FUNCTION_CALL	694:1	694:29	5	assert ( sp -> encoderow != NULL )
CALLEE	694:1	694:1	6	assert
LEAF_NODE	694:1	694:1	7	assert
LEAF_NODE	694:7	694:7	6	(
ARGUMENT	694:8	694:25	6	sp -> encoderow != NULL
FIELD	694:8	694:12	7	sp -> encoderow
LEAF_NODE	694:8	694:8	8	sp
LEAF_NODE	694:10	694:10	8	->
LEAF_NODE	694:12	694:12	8	encoderow
EQ_OPERATOR	694:22	694:22	7	!=
LEAF_NODE	694:22	694:22	8	!=
FIELD	694:25	694:25	7	NULL
LEAF_NODE	694:25	694:25	8	NULL
LEAF_NODE	694:29	694:29	6	)
LEAF_NODE	694:30	694:30	4	;
SELECTION	697:1	698:8	3	
KEYWORD	697:1	697:1	4	if
LEAF_NODE	697:1	697:1	5	if
LEAF_NODE	697:3	697:3	4	(
CONDITION	697:5	697:5	4	! ( * sp -> encodepfunc ) ( tif , bp , cc )
EXPR	697:5	697:5	5	! ( * sp -> encodepfunc ) ( tif , bp , cc )
UNARY_EXPR	697:5	697:6	6	! ( * sp -> encodepfunc ) ( tif , bp , cc )
UNARY_OPERATOR	697:5	697:5	7	!
LEAF_NODE	697:5	697:5	8	!
FUNCTION_CALL	697:6	697:36	7	( * sp -> encodepfunc ) ( tif , bp , cc )
CALLEE	697:6	697:23	8	( * sp -> encodepfunc )
LEAF_NODE	697:6	697:6	9	(
UNARY_EXPR	697:7	697:8	9	* sp -> encodepfunc
UNARY_OPERATOR	697:7	697:7	10	*
LEAF_NODE	697:7	697:7	11	*
FIELD	697:8	697:12	10	sp -> encodepfunc
LEAF_NODE	697:8	697:8	11	sp
LEAF_NODE	697:10	697:10	11	->
LEAF_NODE	697:12	697:12	11	encodepfunc
LEAF_NODE	697:23	697:23	9	)
LEAF_NODE	697:24	697:24	8	(
ARGUMENT	697:25	697:25	8	tif
FIELD	697:25	697:25	9	tif
LEAF_NODE	697:25	697:25	10	tif
LEAF_NODE	697:28	697:28	8	,
ARGUMENT	697:30	697:30	8	bp
FIELD	697:30	697:30	9	bp
LEAF_NODE	697:30	697:30	10	bp
LEAF_NODE	697:32	697:32	8	,
ARGUMENT	697:34	697:34	8	cc
FIELD	697:34	697:34	9	cc
LEAF_NODE	697:34	697:34	10	cc
LEAF_NODE	697:36	697:36	8	)
LEAF_NODE	697:38	697:38	4	)
STATEMENTS	698:8	698:8	4	
JUMP_STATEMENT	698:8	698:16	5	return 0 ;
KEYWORD	698:8	698:8	6	return
LEAF_NODE	698:8	698:8	7	return
DESTINATION	698:15	698:15	6	0
EXPR	698:15	698:15	7	0
FIELD	698:15	698:15	8	0
LEAF_NODE	698:15	698:15	9	0
LEAF_NODE	698:16	698:16	6	;
JUMP_STATEMENT	699:1	699:40	3	return ( * sp -> encoderow ) ( tif , bp , cc , s ) ;
KEYWORD	699:1	699:1	4	return
LEAF_NODE	699:1	699:1	5	return
DESTINATION	699:8	699:8	4	( * sp -> encoderow ) ( tif , bp , cc , s )
EXPR	699:8	699:8	5	( * sp -> encoderow ) ( tif , bp , cc , s )
FUNCTION_CALL	699:8	699:39	6	( * sp -> encoderow ) ( tif , bp , cc , s )
CALLEE	699:8	699:23	7	( * sp -> encoderow )
LEAF_NODE	699:8	699:8	8	(
UNARY_EXPR	699:9	699:10	8	* sp -> encoderow
UNARY_OPERATOR	699:9	699:9	9	*
LEAF_NODE	699:9	699:9	10	*
FIELD	699:10	699:14	9	sp -> encoderow
LEAF_NODE	699:10	699:10	10	sp
LEAF_NODE	699:12	699:12	10	->
LEAF_NODE	699:14	699:14	10	encoderow
LEAF_NODE	699:23	699:23	8	)
LEAF_NODE	699:24	699:24	7	(
ARGUMENT	699:25	699:25	7	tif
FIELD	699:25	699:25	8	tif
LEAF_NODE	699:25	699:25	9	tif
LEAF_NODE	699:28	699:28	7	,
ARGUMENT	699:30	699:30	7	bp
FIELD	699:30	699:30	8	bp
LEAF_NODE	699:30	699:30	9	bp
LEAF_NODE	699:32	699:32	7	,
ARGUMENT	699:34	699:34	7	cc
FIELD	699:34	699:34	8	cc
LEAF_NODE	699:34	699:34	9	cc
LEAF_NODE	699:36	699:36	7	,
ARGUMENT	699:38	699:38	7	s
FIELD	699:38	699:38	8	s
LEAF_NODE	699:38	699:38	9	s
LEAF_NODE	699:39	699:39	7	)
LEAF_NODE	699:40	699:40	4	;
LEAF_NODE	700:0	700:0	2	}
FUNCTION_DEF	702:0	750:0	1	
RETURN_TYPE	702:0	702:7	2	static int
LEAF_NODE	702:0	702:0	3	static
TYPE_NAME	702:7	702:7	3	int
LEAF_NODE	702:7	702:7	4	int
FUNCTION_NAME	703:0	703:0	2	PredictorEncodeTile
LEAF_NODE	703:0	703:0	3	PredictorEncodeTile
PARAMETER_LIST	703:19	703:65	2	( TIFF * tif , uint8 * bp0 , tmsize_t cc0 , uint16 s )
LEAF_NODE	703:19	703:19	3	(
PARAMETER_DECL	703:20	703:26	3	TIFF * tif
TYPE	703:20	703:24	4	TIFF *
TYPE_NAME	703:20	703:20	5	TIFF
LEAF_NODE	703:20	703:20	6	TIFF
POINTER	703:24	703:24	5	*
LEAF_NODE	703:24	703:24	6	*
NAME	703:26	703:26	4	tif
LEAF_NODE	703:26	703:26	5	tif
LEAF_NODE	703:29	703:29	3	,
PARAMETER_DECL	703:31	703:38	3	uint8 * bp0
TYPE	703:31	703:36	4	uint8 *
TYPE_NAME	703:31	703:31	5	uint8
LEAF_NODE	703:31	703:31	6	uint8
POINTER	703:36	703:36	5	*
LEAF_NODE	703:36	703:36	6	*
NAME	703:38	703:38	4	bp0
LEAF_NODE	703:38	703:38	5	bp0
LEAF_NODE	703:41	703:41	3	,
PARAMETER_DECL	703:43	703:52	3	tmsize_t cc0
TYPE	703:43	703:43	4	tmsize_t
TYPE_NAME	703:43	703:43	5	tmsize_t
LEAF_NODE	703:43	703:43	6	tmsize_t
NAME	703:52	703:52	4	cc0
LEAF_NODE	703:52	703:52	5	cc0
LEAF_NODE	703:55	703:55	3	,
PARAMETER_DECL	703:57	703:64	3	uint16 s
TYPE	703:57	703:57	4	uint16
TYPE_NAME	703:57	703:57	5	uint16
LEAF_NODE	703:57	703:57	6	uint16
NAME	703:64	703:64	4	s
LEAF_NODE	703:64	703:64	5	s
LEAF_NODE	703:65	703:65	3	)
LEAF_NODE	704:0	704:0	2	{
STATEMENTS	705:1	749:8	2	
LEAF_NODE	705:1	705:1	3	static
SIMPLE_DECL	705:8	705:51	3	const char [ ] module ; module = "PredictorEncodeTile" ;
VAR_DECL	705:8	705:19	4	const char [ ] module ; module = "PredictorEncodeTile"
TYPE	705:8	705:25	5	const char [ ]
TYPE_NAME	705:8	705:14	6	const char
LEAF_NODE	705:8	705:8	7	const
LEAF_NODE	705:14	705:14	7	char
TYPE_SUFFIX	705:25	705:26	6	[ ]
LEAF_NODE	705:25	705:25	7	[
LEAF_NODE	705:26	705:26	7	]
NAME	705:19	705:19	5	module
LEAF_NODE	705:19	705:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	705:19	705:19	5	module = "PredictorEncodeTile"
ASSIGN	705:19	705:30	6	module = "PredictorEncodeTile"
LVAL	705:19	705:19	7	module
NAME	705:19	705:19	8	module
LEAF_NODE	705:19	705:19	9	module
ASSIGN_OP	705:28	705:28	7	=
LEAF_NODE	705:28	705:28	8	=
RVAL	705:30	705:30	7	"PredictorEncodeTile"
FIELD	705:30	705:30	8	"PredictorEncodeTile"
LEAF_NODE	705:30	705:30	9	"PredictorEncodeTile"
LEAF_NODE	705:51	705:51	4	;
SIMPLE_DECL	706:1	706:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	706:1	706:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	706:1	706:20	5	TIFFPredictorState *
TYPE_NAME	706:1	706:1	6	TIFFPredictorState
LEAF_NODE	706:1	706:1	7	TIFFPredictorState
POINTER	706:20	706:20	6	*
LEAF_NODE	706:20	706:20	7	*
NAME	706:21	706:21	5	sp
LEAF_NODE	706:21	706:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	706:21	706:21	5	sp = PredictorState ( tif )
ASSIGN	706:21	706:26	6	sp = PredictorState ( tif )
LVAL	706:21	706:21	7	sp
NAME	706:21	706:21	8	sp
LEAF_NODE	706:21	706:21	9	sp
ASSIGN_OP	706:24	706:24	7	=
LEAF_NODE	706:24	706:24	8	=
RVAL	706:26	706:26	7	PredictorState ( tif )
FUNCTION_CALL	706:26	706:44	8	PredictorState ( tif )
CALLEE	706:26	706:26	9	PredictorState
LEAF_NODE	706:26	706:26	10	PredictorState
LEAF_NODE	706:40	706:40	9	(
ARGUMENT	706:41	706:41	9	tif
FIELD	706:41	706:41	10	tif
LEAF_NODE	706:41	706:41	11	tif
LEAF_NODE	706:44	706:44	9	)
LEAF_NODE	706:45	706:45	4	;
SIMPLE_DECL	707:8	707:27	3	uint8 * working_copy ;
VAR_DECL	707:8	707:15	4	uint8 * working_copy
TYPE	707:8	707:14	5	uint8 *
TYPE_NAME	707:8	707:8	6	uint8
LEAF_NODE	707:8	707:8	7	uint8
POINTER	707:14	707:14	6	*
LEAF_NODE	707:14	707:14	7	*
NAME	707:15	707:15	5	working_copy
LEAF_NODE	707:15	707:15	6	working_copy
LEAF_NODE	707:27	707:27	4	;
SIMPLE_DECL	708:1	708:27	3	tmsize_t cc ; cc = cc0 , tmsize_t rowsize ;
INIT_DECL_LIST	708:1	708:1	4	tmsize_t cc ; cc = cc0 , tmsize_t rowsize
VAR_DECL	708:1	708:10	5	tmsize_t cc ; cc = cc0
TYPE	708:1	708:1	6	tmsize_t
TYPE_NAME	708:1	708:1	7	tmsize_t
LEAF_NODE	708:1	708:1	8	tmsize_t
NAME	708:10	708:10	6	cc
LEAF_NODE	708:10	708:10	7	cc
LEAF_NODE	0:0	0:0	6	;
INIT	708:10	708:10	6	cc = cc0
ASSIGN	708:10	708:15	7	cc = cc0
LVAL	708:10	708:10	8	cc
NAME	708:10	708:10	9	cc
LEAF_NODE	708:10	708:10	10	cc
ASSIGN_OP	708:13	708:13	8	=
LEAF_NODE	708:13	708:13	9	=
RVAL	708:15	708:15	8	cc0
FIELD	708:15	708:15	9	cc0
LEAF_NODE	708:15	708:15	10	cc0
LEAF_NODE	708:18	708:18	5	,
VAR_DECL	708:1	708:20	5	tmsize_t rowsize
TYPE	708:1	708:1	6	tmsize_t
TYPE_NAME	708:1	708:1	7	tmsize_t
LEAF_NODE	708:1	708:1	8	tmsize_t
NAME	708:20	708:20	6	rowsize
LEAF_NODE	708:20	708:20	7	rowsize
LEAF_NODE	708:27	708:27	4	;
SIMPLE_DECL	709:1	709:18	3	unsigned char * bp ;
VAR_DECL	709:1	709:16	4	unsigned char * bp
TYPE	709:1	709:14	5	unsigned char *
TYPE_NAME	709:1	709:10	6	unsigned char
LEAF_NODE	709:1	709:1	7	unsigned
LEAF_NODE	709:10	709:10	7	char
POINTER	709:14	709:14	6	*
LEAF_NODE	709:14	709:14	7	*
NAME	709:16	709:16	5	bp
LEAF_NODE	709:16	709:16	6	bp
LEAF_NODE	709:18	709:18	4	;
SIMPLE_DECL	710:8	710:23	3	int result_code ;
VAR_DECL	710:8	710:12	4	int result_code
TYPE	710:8	710:8	5	int
TYPE_NAME	710:8	710:8	6	int
LEAF_NODE	710:8	710:8	7	int
NAME	710:12	710:12	5	result_code
LEAF_NODE	710:12	710:12	6	result_code
LEAF_NODE	710:23	710:23	4	;
EXPR_STATEMENT	712:1	712:19	3	assert ( sp != NULL ) ;
EXPR	712:1	712:1	4	assert ( sp != NULL )
FUNCTION_CALL	712:1	712:18	5	assert ( sp != NULL )
CALLEE	712:1	712:1	6	assert
LEAF_NODE	712:1	712:1	7	assert
LEAF_NODE	712:7	712:7	6	(
ARGUMENT	712:8	712:14	6	sp != NULL
FIELD	712:8	712:8	7	sp
LEAF_NODE	712:8	712:8	8	sp
EQ_OPERATOR	712:11	712:11	7	!=
LEAF_NODE	712:11	712:11	8	!=
FIELD	712:14	712:14	7	NULL
LEAF_NODE	712:14	712:14	8	NULL
LEAF_NODE	712:18	712:18	6	)
LEAF_NODE	712:19	712:19	4	;
EXPR_STATEMENT	713:1	713:32	3	assert ( sp -> encodepfunc != NULL ) ;
EXPR	713:1	713:1	4	assert ( sp -> encodepfunc != NULL )
FUNCTION_CALL	713:1	713:31	5	assert ( sp -> encodepfunc != NULL )
CALLEE	713:1	713:1	6	assert
LEAF_NODE	713:1	713:1	7	assert
LEAF_NODE	713:7	713:7	6	(
ARGUMENT	713:8	713:27	6	sp -> encodepfunc != NULL
FIELD	713:8	713:12	7	sp -> encodepfunc
LEAF_NODE	713:8	713:8	8	sp
LEAF_NODE	713:10	713:10	8	->
LEAF_NODE	713:12	713:12	8	encodepfunc
EQ_OPERATOR	713:24	713:24	7	!=
LEAF_NODE	713:24	713:24	8	!=
FIELD	713:27	713:27	7	NULL
LEAF_NODE	713:27	713:27	8	NULL
LEAF_NODE	713:31	713:31	6	)
LEAF_NODE	713:32	713:32	4	;
EXPR_STATEMENT	714:1	714:31	3	assert ( sp -> encodetile != NULL ) ;
EXPR	714:1	714:1	4	assert ( sp -> encodetile != NULL )
FUNCTION_CALL	714:1	714:30	5	assert ( sp -> encodetile != NULL )
CALLEE	714:1	714:1	6	assert
LEAF_NODE	714:1	714:1	7	assert
LEAF_NODE	714:7	714:7	6	(
ARGUMENT	714:8	714:26	6	sp -> encodetile != NULL
FIELD	714:8	714:12	7	sp -> encodetile
LEAF_NODE	714:8	714:8	8	sp
LEAF_NODE	714:10	714:10	8	->
LEAF_NODE	714:12	714:12	8	encodetile
EQ_OPERATOR	714:23	714:23	7	!=
LEAF_NODE	714:23	714:23	8	!=
FIELD	714:26	714:26	7	NULL
LEAF_NODE	714:26	714:26	8	NULL
LEAF_NODE	714:30	714:30	6	)
LEAF_NODE	714:31	714:31	4	;
EXPR_STATEMENT	720:8	720:48	3	working_copy = ( uint8 * ) _TIFFmalloc ( cc0 ) ;
EXPR	720:8	720:8	4	working_copy = ( uint8 * ) _TIFFmalloc ( cc0 )
ASSIGN	720:8	720:23	5	working_copy = ( uint8 * ) _TIFFmalloc ( cc0 )
LVAL	720:8	720:8	6	working_copy
FIELD	720:8	720:8	7	working_copy
LEAF_NODE	720:8	720:8	8	working_copy
ASSIGN_OP	720:21	720:21	6	=
LEAF_NODE	720:21	720:21	7	=
RVAL	720:23	720:32	6	( uint8 * ) _TIFFmalloc ( cc0 )
LEAF_NODE	720:23	720:23	7	(
TYPE_NAME	720:24	720:24	7	uint8
LEAF_NODE	720:24	720:24	8	uint8
LEAF_NODE	720:29	720:29	7	*
LEAF_NODE	720:30	720:30	7	)
FUNCTION_CALL	720:32	720:47	7	_TIFFmalloc ( cc0 )
CALLEE	720:32	720:32	8	_TIFFmalloc
LEAF_NODE	720:32	720:32	9	_TIFFmalloc
LEAF_NODE	720:43	720:43	8	(
ARGUMENT	720:44	720:44	8	cc0
FIELD	720:44	720:44	9	cc0
LEAF_NODE	720:44	720:44	10	cc0
LEAF_NODE	720:47	720:47	8	)
LEAF_NODE	720:48	720:48	4	;
SELECTION	721:8	722:8	3	
KEYWORD	721:8	721:8	4	if
LEAF_NODE	721:8	721:8	5	if
LEAF_NODE	721:10	721:10	4	(
CONDITION	721:12	721:12	4	working_copy == NULL
EXPR	721:12	721:28	5	working_copy == NULL
FIELD	721:12	721:12	6	working_copy
LEAF_NODE	721:12	721:12	7	working_copy
EQ_OPERATOR	721:25	721:25	6	==
LEAF_NODE	721:25	721:25	7	==
FIELD	721:28	721:28	6	NULL
LEAF_NODE	721:28	721:28	7	NULL
LEAF_NODE	721:33	721:33	4	)
STATEMENTS	722:8	727:8	4	
LEAF_NODE	722:8	722:8	5	{
STATEMENTS	723:12	726:12	5	
LEAF_NODE	723:12	723:12	6	TIFFErrorExt
LEAF_NODE	723:24	723:24	6	(
LEAF_NODE	723:25	723:25	6	tif
LEAF_NODE	723:28	723:28	6	->
LEAF_NODE	723:30	723:30	6	tif_clientdata
LEAF_NODE	723:44	723:44	6	,
LEAF_NODE	723:46	723:46	6	module
LEAF_NODE	723:52	723:52	6	,
LEAF_NODE	724:25	724:25	6	"Out of memory allocating "
LEAF_NODE	724:53	724:53	6	TIFF_SSIZE_FORMAT
LEAF_NODE	724:71	724:71	6	" byte temp buffer."
LEAF_NODE	724:91	724:91	6	,
LEAF_NODE	725:25	725:25	6	cc0
LEAF_NODE	725:29	725:29	6	)
LEAF_NODE	725:30	725:30	6	;
JUMP_STATEMENT	726:12	726:20	6	return 0 ;
KEYWORD	726:12	726:12	7	return
LEAF_NODE	726:12	726:12	8	return
DESTINATION	726:19	726:19	7	0
EXPR	726:19	726:19	8	0
FIELD	726:19	726:19	9	0
LEAF_NODE	726:19	726:19	10	0
LEAF_NODE	726:20	726:20	7	;
LEAF_NODE	727:8	727:8	5	}
EXPR_STATEMENT	728:8	728:40	3	memcpy ( working_copy , bp0 , cc0 ) ;
EXPR	728:8	728:8	4	memcpy ( working_copy , bp0 , cc0 )
FUNCTION_CALL	728:8	728:39	5	memcpy ( working_copy , bp0 , cc0 )
CALLEE	728:8	728:8	6	memcpy
LEAF_NODE	728:8	728:8	7	memcpy
LEAF_NODE	728:14	728:14	6	(
ARGUMENT	728:16	728:16	6	working_copy
FIELD	728:16	728:16	7	working_copy
LEAF_NODE	728:16	728:16	8	working_copy
LEAF_NODE	728:28	728:28	6	,
ARGUMENT	728:30	728:30	6	bp0
FIELD	728:30	728:30	7	bp0
LEAF_NODE	728:30	728:30	8	bp0
LEAF_NODE	728:33	728:33	6	,
ARGUMENT	728:35	728:35	6	cc0
FIELD	728:35	728:35	7	cc0
LEAF_NODE	728:35	728:35	8	cc0
LEAF_NODE	728:39	728:39	6	)
LEAF_NODE	728:40	728:40	4	;
EXPR_STATEMENT	729:8	729:25	3	bp = working_copy ;
EXPR	729:8	729:8	4	bp = working_copy
ASSIGN	729:8	729:13	5	bp = working_copy
LVAL	729:8	729:8	6	bp
FIELD	729:8	729:8	7	bp
LEAF_NODE	729:8	729:8	8	bp
ASSIGN_OP	729:11	729:11	6	=
LEAF_NODE	729:11	729:11	7	=
RVAL	729:13	729:13	6	working_copy
FIELD	729:13	729:13	7	working_copy
LEAF_NODE	729:13	729:13	8	working_copy
LEAF_NODE	729:25	729:25	4	;
EXPR_STATEMENT	731:1	731:22	3	rowsize = sp -> rowsize ;
EXPR	731:1	731:1	4	rowsize = sp -> rowsize
ASSIGN	731:1	731:11	5	rowsize = sp -> rowsize
LVAL	731:1	731:1	6	rowsize
FIELD	731:1	731:1	7	rowsize
LEAF_NODE	731:1	731:1	8	rowsize
ASSIGN_OP	731:9	731:9	6	=
LEAF_NODE	731:9	731:9	7	=
RVAL	731:11	731:11	6	sp -> rowsize
FIELD	731:11	731:15	7	sp -> rowsize
LEAF_NODE	731:11	731:11	8	sp
LEAF_NODE	731:13	731:13	8	->
LEAF_NODE	731:15	731:15	8	rowsize
LEAF_NODE	731:22	731:22	4	;
EXPR_STATEMENT	732:1	732:20	3	assert ( rowsize > 0 ) ;
EXPR	732:1	732:1	4	assert ( rowsize > 0 )
FUNCTION_CALL	732:1	732:19	5	assert ( rowsize > 0 )
CALLEE	732:1	732:1	6	assert
LEAF_NODE	732:1	732:1	7	assert
LEAF_NODE	732:7	732:7	6	(
ARGUMENT	732:8	732:18	6	rowsize > 0
FIELD	732:8	732:8	7	rowsize
LEAF_NODE	732:8	732:8	8	rowsize
REL_OPERATOR	732:16	732:16	7	>
LEAF_NODE	732:16	732:16	8	>
FIELD	732:18	732:18	7	0
LEAF_NODE	732:18	732:18	8	0
LEAF_NODE	732:19	732:19	6	)
LEAF_NODE	732:20	732:20	4	;
SELECTION	733:1	734:4	3	
KEYWORD	733:1	733:1	4	if
LEAF_NODE	733:1	733:1	5	if
LEAF_NODE	733:3	733:3	4	(
CONDITION	733:4	733:4	4	( cc0 % rowsize ) != 0
EXPR	733:4	733:19	5	( cc0 % rowsize ) != 0
LEAF_NODE	733:4	733:4	6	(
FIELD	733:5	733:5	6	cc0
LEAF_NODE	733:5	733:5	7	cc0
LEAF_NODE	733:8	733:8	6	%
FIELD	733:9	733:9	6	rowsize
LEAF_NODE	733:9	733:9	7	rowsize
LEAF_NODE	733:16	733:16	6	)
EQ_OPERATOR	733:17	733:17	6	!=
LEAF_NODE	733:17	733:17	7	!=
FIELD	733:19	733:19	6	0
LEAF_NODE	733:19	733:19	7	0
LEAF_NODE	733:20	733:20	4	)
STATEMENTS	734:4	739:4	4	
LEAF_NODE	734:4	734:4	5	{
STATEMENTS	735:8	738:8	5	
EXPR_STATEMENT	735:8	736:46	6	TIFFErrorExt ( tif -> tif_clientdata , "PredictorEncodeTile" , "%s" , "(cc0%rowsize)!=0" ) ;
EXPR	735:8	735:8	7	TIFFErrorExt ( tif -> tif_clientdata , "PredictorEncodeTile" , "%s" , "(cc0%rowsize)!=0" )
FUNCTION_CALL	735:8	736:45	8	TIFFErrorExt ( tif -> tif_clientdata , "PredictorEncodeTile" , "%s" , "(cc0%rowsize)!=0" )
CALLEE	735:8	735:8	9	TIFFErrorExt
LEAF_NODE	735:8	735:8	10	TIFFErrorExt
LEAF_NODE	735:20	735:20	9	(
ARGUMENT	735:21	735:21	9	tif -> tif_clientdata
FIELD	735:21	735:26	10	tif -> tif_clientdata
LEAF_NODE	735:21	735:21	11	tif
LEAF_NODE	735:24	735:24	11	->
LEAF_NODE	735:26	735:26	11	tif_clientdata
LEAF_NODE	735:40	735:40	9	,
ARGUMENT	735:42	735:42	9	"PredictorEncodeTile"
FIELD	735:42	735:42	10	"PredictorEncodeTile"
LEAF_NODE	735:42	735:42	11	"PredictorEncodeTile"
LEAF_NODE	735:63	735:63	9	,
ARGUMENT	736:21	736:21	9	"%s"
FIELD	736:21	736:21	10	"%s"
LEAF_NODE	736:21	736:21	11	"%s"
LEAF_NODE	736:25	736:25	9	,
ARGUMENT	736:27	736:27	9	"(cc0%rowsize)!=0"
FIELD	736:27	736:27	10	"(cc0%rowsize)!=0"
LEAF_NODE	736:27	736:27	11	"(cc0%rowsize)!=0"
LEAF_NODE	736:45	736:45	9	)
LEAF_NODE	736:46	736:46	7	;
EXPR_STATEMENT	737:8	737:33	6	_TIFFfree ( working_copy ) ;
EXPR	737:8	737:8	7	_TIFFfree ( working_copy )
FUNCTION_CALL	737:8	737:32	8	_TIFFfree ( working_copy )
CALLEE	737:8	737:8	9	_TIFFfree
LEAF_NODE	737:8	737:8	10	_TIFFfree
LEAF_NODE	737:17	737:17	9	(
ARGUMENT	737:19	737:19	9	working_copy
FIELD	737:19	737:19	10	working_copy
LEAF_NODE	737:19	737:19	11	working_copy
LEAF_NODE	737:32	737:32	9	)
LEAF_NODE	737:33	737:33	7	;
JUMP_STATEMENT	738:8	738:16	6	return 0 ;
KEYWORD	738:8	738:8	7	return
LEAF_NODE	738:8	738:8	8	return
DESTINATION	738:15	738:15	7	0
EXPR	738:15	738:15	8	0
FIELD	738:15	738:15	9	0
LEAF_NODE	738:15	738:15	10	0
LEAF_NODE	738:16	738:16	7	;
LEAF_NODE	739:4	739:4	5	}
ITERATION	740:1	740:16	3	
KEYWORD	740:1	740:1	4	while
LEAF_NODE	740:1	740:1	5	while
LEAF_NODE	740:7	740:7	4	(
CONDITION	740:8	740:8	4	cc > 0
EXPR	740:8	740:13	5	cc > 0
FIELD	740:8	740:8	6	cc
LEAF_NODE	740:8	740:8	7	cc
REL_OPERATOR	740:11	740:11	6	>
LEAF_NODE	740:11	740:11	7	>
FIELD	740:13	740:13	6	0
LEAF_NODE	740:13	740:13	7	0
LEAF_NODE	740:14	740:14	4	)
STATEMENTS	740:16	744:1	4	
LEAF_NODE	740:16	740:16	5	{
STATEMENTS	741:2	743:2	5	
EXPR_STATEMENT	741:2	741:38	6	( * sp -> encodepfunc ) ( tif , bp , rowsize ) ;
EXPR	741:2	741:2	7	( * sp -> encodepfunc ) ( tif , bp , rowsize )
FUNCTION_CALL	741:2	741:37	8	( * sp -> encodepfunc ) ( tif , bp , rowsize )
CALLEE	741:2	741:19	9	( * sp -> encodepfunc )
LEAF_NODE	741:2	741:2	10	(
UNARY_EXPR	741:3	741:4	10	* sp -> encodepfunc
UNARY_OPERATOR	741:3	741:3	11	*
LEAF_NODE	741:3	741:3	12	*
FIELD	741:4	741:8	11	sp -> encodepfunc
LEAF_NODE	741:4	741:4	12	sp
LEAF_NODE	741:6	741:6	12	->
LEAF_NODE	741:8	741:8	12	encodepfunc
LEAF_NODE	741:19	741:19	10	)
LEAF_NODE	741:20	741:20	9	(
ARGUMENT	741:21	741:21	9	tif
FIELD	741:21	741:21	10	tif
LEAF_NODE	741:21	741:21	11	tif
LEAF_NODE	741:24	741:24	9	,
ARGUMENT	741:26	741:26	9	bp
FIELD	741:26	741:26	10	bp
LEAF_NODE	741:26	741:26	11	bp
LEAF_NODE	741:28	741:28	9	,
ARGUMENT	741:30	741:30	9	rowsize
FIELD	741:30	741:30	10	rowsize
LEAF_NODE	741:30	741:30	11	rowsize
LEAF_NODE	741:37	741:37	9	)
LEAF_NODE	741:38	741:38	7	;
EXPR_STATEMENT	742:2	742:15	6	cc -= rowsize ;
EXPR	742:2	742:2	7	cc -= rowsize
ASSIGN	742:2	742:8	8	cc -= rowsize
LVAL	742:2	742:2	9	cc
FIELD	742:2	742:2	10	cc
LEAF_NODE	742:2	742:2	11	cc
ASSIGN_OP	742:5	742:5	9	-=
LEAF_NODE	742:5	742:5	10	-=
RVAL	742:8	742:8	9	rowsize
FIELD	742:8	742:8	10	rowsize
LEAF_NODE	742:8	742:8	11	rowsize
LEAF_NODE	742:15	742:15	7	;
EXPR_STATEMENT	743:2	743:15	6	bp += rowsize ;
EXPR	743:2	743:2	7	bp += rowsize
ASSIGN	743:2	743:8	8	bp += rowsize
LVAL	743:2	743:2	9	bp
FIELD	743:2	743:2	10	bp
LEAF_NODE	743:2	743:2	11	bp
ASSIGN_OP	743:5	743:5	9	+=
LEAF_NODE	743:5	743:5	10	+=
RVAL	743:8	743:8	9	rowsize
FIELD	743:8	743:8	10	rowsize
LEAF_NODE	743:8	743:8	11	rowsize
LEAF_NODE	743:15	743:15	7	;
LEAF_NODE	744:1	744:1	5	}
EXPR_STATEMENT	745:1	745:59	3	result_code = ( * sp -> encodetile ) ( tif , working_copy , cc0 , s ) ;
EXPR	745:1	745:1	4	result_code = ( * sp -> encodetile ) ( tif , working_copy , cc0 , s )
ASSIGN	745:1	745:15	5	result_code = ( * sp -> encodetile ) ( tif , working_copy , cc0 , s )
LVAL	745:1	745:1	6	result_code
FIELD	745:1	745:1	7	result_code
LEAF_NODE	745:1	745:1	8	result_code
ASSIGN_OP	745:13	745:13	6	=
LEAF_NODE	745:13	745:13	7	=
RVAL	745:15	745:15	6	( * sp -> encodetile ) ( tif , working_copy , cc0 , s )
FUNCTION_CALL	745:15	745:58	7	( * sp -> encodetile ) ( tif , working_copy , cc0 , s )
CALLEE	745:15	745:31	8	( * sp -> encodetile )
LEAF_NODE	745:15	745:15	9	(
UNARY_EXPR	745:16	745:17	9	* sp -> encodetile
UNARY_OPERATOR	745:16	745:16	10	*
LEAF_NODE	745:16	745:16	11	*
FIELD	745:17	745:21	10	sp -> encodetile
LEAF_NODE	745:17	745:17	11	sp
LEAF_NODE	745:19	745:19	11	->
LEAF_NODE	745:21	745:21	11	encodetile
LEAF_NODE	745:31	745:31	9	)
LEAF_NODE	745:32	745:32	8	(
ARGUMENT	745:33	745:33	8	tif
FIELD	745:33	745:33	9	tif
LEAF_NODE	745:33	745:33	10	tif
LEAF_NODE	745:36	745:36	8	,
ARGUMENT	745:38	745:38	8	working_copy
FIELD	745:38	745:38	9	working_copy
LEAF_NODE	745:38	745:38	10	working_copy
LEAF_NODE	745:50	745:50	8	,
ARGUMENT	745:52	745:52	8	cc0
FIELD	745:52	745:52	9	cc0
LEAF_NODE	745:52	745:52	10	cc0
LEAF_NODE	745:55	745:55	8	,
ARGUMENT	745:57	745:57	8	s
FIELD	745:57	745:57	9	s
LEAF_NODE	745:57	745:57	10	s
LEAF_NODE	745:58	745:58	8	)
LEAF_NODE	745:59	745:59	4	;
EXPR_STATEMENT	747:8	747:33	3	_TIFFfree ( working_copy ) ;
EXPR	747:8	747:8	4	_TIFFfree ( working_copy )
FUNCTION_CALL	747:8	747:32	5	_TIFFfree ( working_copy )
CALLEE	747:8	747:8	6	_TIFFfree
LEAF_NODE	747:8	747:8	7	_TIFFfree
LEAF_NODE	747:17	747:17	6	(
ARGUMENT	747:19	747:19	6	working_copy
FIELD	747:19	747:19	7	working_copy
LEAF_NODE	747:19	747:19	8	working_copy
LEAF_NODE	747:32	747:32	6	)
LEAF_NODE	747:33	747:33	4	;
JUMP_STATEMENT	749:8	749:26	3	return result_code ;
KEYWORD	749:8	749:8	4	return
LEAF_NODE	749:8	749:8	5	return
DESTINATION	749:15	749:15	4	result_code
EXPR	749:15	749:15	5	result_code
FIELD	749:15	749:15	6	result_code
LEAF_NODE	749:15	749:15	7	result_code
LEAF_NODE	749:26	749:26	4	;
LEAF_NODE	750:0	750:0	2	}
FUNCTION_DEF	758:0	776:0	1	
RETURN_TYPE	758:0	758:7	2	static int
LEAF_NODE	758:0	758:0	3	static
TYPE_NAME	758:7	758:7	3	int
LEAF_NODE	758:7	758:7	4	int
FUNCTION_NAME	759:0	759:0	2	PredictorVSetField
LEAF_NODE	759:0	759:0	3	PredictorVSetField
PARAMETER_LIST	759:18	759:52	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	759:18	759:18	3	(
PARAMETER_DECL	759:19	759:25	3	TIFF * tif
TYPE	759:19	759:23	4	TIFF *
TYPE_NAME	759:19	759:19	5	TIFF
LEAF_NODE	759:19	759:19	6	TIFF
POINTER	759:23	759:23	5	*
LEAF_NODE	759:23	759:23	6	*
NAME	759:25	759:25	4	tif
LEAF_NODE	759:25	759:25	5	tif
LEAF_NODE	759:28	759:28	3	,
PARAMETER_DECL	759:30	759:37	3	uint32 tag
TYPE	759:30	759:30	4	uint32
TYPE_NAME	759:30	759:30	5	uint32
LEAF_NODE	759:30	759:30	6	uint32
NAME	759:37	759:37	4	tag
LEAF_NODE	759:37	759:37	5	tag
LEAF_NODE	759:40	759:40	3	,
PARAMETER_DECL	759:42	759:50	3	va_list ap
TYPE	759:42	759:42	4	va_list
TYPE_NAME	759:42	759:42	5	va_list
LEAF_NODE	759:42	759:42	6	va_list
NAME	759:50	759:50	4	ap
LEAF_NODE	759:50	759:50	5	ap
LEAF_NODE	759:52	759:52	3	)
LEAF_NODE	760:0	760:0	2	{
STATEMENTS	761:1	775:1	2	
SIMPLE_DECL	761:1	761:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	761:1	761:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	761:1	761:20	5	TIFFPredictorState *
TYPE_NAME	761:1	761:1	6	TIFFPredictorState
LEAF_NODE	761:1	761:1	7	TIFFPredictorState
POINTER	761:20	761:20	6	*
LEAF_NODE	761:20	761:20	7	*
NAME	761:21	761:21	5	sp
LEAF_NODE	761:21	761:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	761:21	761:21	5	sp = PredictorState ( tif )
ASSIGN	761:21	761:26	6	sp = PredictorState ( tif )
LVAL	761:21	761:21	7	sp
NAME	761:21	761:21	8	sp
LEAF_NODE	761:21	761:21	9	sp
ASSIGN_OP	761:24	761:24	7	=
LEAF_NODE	761:24	761:24	8	=
RVAL	761:26	761:26	7	PredictorState ( tif )
FUNCTION_CALL	761:26	761:44	8	PredictorState ( tif )
CALLEE	761:26	761:26	9	PredictorState
LEAF_NODE	761:26	761:26	10	PredictorState
LEAF_NODE	761:40	761:40	9	(
ARGUMENT	761:41	761:41	9	tif
FIELD	761:41	761:41	10	tif
LEAF_NODE	761:41	761:41	11	tif
LEAF_NODE	761:44	761:44	9	)
LEAF_NODE	761:45	761:45	4	;
EXPR_STATEMENT	763:1	763:19	3	assert ( sp != NULL ) ;
EXPR	763:1	763:1	4	assert ( sp != NULL )
FUNCTION_CALL	763:1	763:18	5	assert ( sp != NULL )
CALLEE	763:1	763:1	6	assert
LEAF_NODE	763:1	763:1	7	assert
LEAF_NODE	763:7	763:7	6	(
ARGUMENT	763:8	763:14	6	sp != NULL
FIELD	763:8	763:8	7	sp
LEAF_NODE	763:8	763:8	8	sp
EQ_OPERATOR	763:11	763:11	7	!=
LEAF_NODE	763:11	763:11	8	!=
FIELD	763:14	763:14	7	NULL
LEAF_NODE	763:14	763:14	8	NULL
LEAF_NODE	763:18	763:18	6	)
LEAF_NODE	763:19	763:19	4	;
EXPR_STATEMENT	764:1	764:31	3	assert ( sp -> vsetparent != NULL ) ;
EXPR	764:1	764:1	4	assert ( sp -> vsetparent != NULL )
FUNCTION_CALL	764:1	764:30	5	assert ( sp -> vsetparent != NULL )
CALLEE	764:1	764:1	6	assert
LEAF_NODE	764:1	764:1	7	assert
LEAF_NODE	764:7	764:7	6	(
ARGUMENT	764:8	764:26	6	sp -> vsetparent != NULL
FIELD	764:8	764:12	7	sp -> vsetparent
LEAF_NODE	764:8	764:8	8	sp
LEAF_NODE	764:10	764:10	8	->
LEAF_NODE	764:12	764:12	8	vsetparent
EQ_OPERATOR	764:23	764:23	7	!=
LEAF_NODE	764:23	764:23	8	!=
FIELD	764:26	764:26	7	NULL
LEAF_NODE	764:26	764:26	8	NULL
LEAF_NODE	764:30	764:30	6	)
LEAF_NODE	764:31	764:31	4	;
SELECTION	766:1	766:14	3	
KEYWORD	766:1	766:1	4	switch
LEAF_NODE	766:1	766:1	5	switch
LEAF_NODE	766:8	766:8	4	(
CONDITION	766:9	766:9	4	tag
EXPR	766:9	766:9	5	tag
FIELD	766:9	766:9	6	tag
LEAF_NODE	766:9	766:9	7	tag
LEAF_NODE	766:12	766:12	4	)
STATEMENTS	766:14	773:1	4	
LEAF_NODE	766:14	766:14	5	{
STATEMENTS	767:1	772:2	5	
LABEL	767:1	767:23	6	case TIFFTAG_PREDICTOR :
LEAF_NODE	767:1	767:1	7	case
LEAF_NODE	767:6	767:6	7	TIFFTAG_PREDICTOR
LEAF_NODE	767:23	767:23	7	:
EXPR_STATEMENT	768:2	768:49	6	sp -> predictor = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	768:2	768:2	7	sp -> predictor = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	768:2	768:18	8	sp -> predictor = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	768:2	768:2	9	sp -> predictor
FIELD	768:2	768:6	10	sp -> predictor
LEAF_NODE	768:2	768:2	11	sp
LEAF_NODE	768:4	768:4	11	->
LEAF_NODE	768:6	768:6	11	predictor
ASSIGN_OP	768:16	768:16	9	=
LEAF_NODE	768:16	768:16	10	=
RVAL	768:18	768:27	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	768:18	768:18	10	(
TYPE_NAME	768:19	768:19	10	uint16
LEAF_NODE	768:19	768:19	11	uint16
LEAF_NODE	768:25	768:25	10	)
FUNCTION_CALL	768:27	768:48	10	va_arg ( ap , uint16_vap )
CALLEE	768:27	768:27	11	va_arg
LEAF_NODE	768:27	768:27	12	va_arg
LEAF_NODE	768:33	768:33	11	(
ARGUMENT	768:34	768:34	11	ap
FIELD	768:34	768:34	12	ap
LEAF_NODE	768:34	768:34	13	ap
LEAF_NODE	768:36	768:36	11	,
ARGUMENT	768:38	768:38	11	uint16_vap
FIELD	768:38	768:38	12	uint16_vap
LEAF_NODE	768:38	768:38	13	uint16_vap
LEAF_NODE	768:48	768:48	11	)
LEAF_NODE	768:49	768:49	7	;
EXPR_STATEMENT	769:2	769:39	6	TIFFSetFieldBit ( tif , FIELD_PREDICTOR ) ;
EXPR	769:2	769:2	7	TIFFSetFieldBit ( tif , FIELD_PREDICTOR )
FUNCTION_CALL	769:2	769:38	8	TIFFSetFieldBit ( tif , FIELD_PREDICTOR )
CALLEE	769:2	769:2	9	TIFFSetFieldBit
LEAF_NODE	769:2	769:2	10	TIFFSetFieldBit
LEAF_NODE	769:17	769:17	9	(
ARGUMENT	769:18	769:18	9	tif
FIELD	769:18	769:18	10	tif
LEAF_NODE	769:18	769:18	11	tif
LEAF_NODE	769:21	769:21	9	,
ARGUMENT	769:23	769:23	9	FIELD_PREDICTOR
FIELD	769:23	769:23	10	FIELD_PREDICTOR
LEAF_NODE	769:23	769:23	11	FIELD_PREDICTOR
LEAF_NODE	769:38	769:38	9	)
LEAF_NODE	769:39	769:39	7	;
JUMP_STATEMENT	770:2	770:7	6	break DESTINATION ;
KEYWORD	770:2	770:2	7	break
LEAF_NODE	770:2	770:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	770:7	770:7	7	;
LABEL	771:1	771:8	6	default :
LEAF_NODE	771:1	771:1	7	default
LEAF_NODE	771:8	771:8	7	:
JUMP_STATEMENT	772:2	772:40	6	return ( * sp -> vsetparent ) ( tif , tag , ap ) ;
KEYWORD	772:2	772:2	7	return
LEAF_NODE	772:2	772:2	8	return
DESTINATION	772:9	772:9	7	( * sp -> vsetparent ) ( tif , tag , ap )
EXPR	772:9	772:9	8	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	772:9	772:39	9	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	772:9	772:25	10	( * sp -> vsetparent )
LEAF_NODE	772:9	772:9	11	(
UNARY_EXPR	772:10	772:11	11	* sp -> vsetparent
UNARY_OPERATOR	772:10	772:10	12	*
LEAF_NODE	772:10	772:10	13	*
FIELD	772:11	772:15	12	sp -> vsetparent
LEAF_NODE	772:11	772:11	13	sp
LEAF_NODE	772:13	772:13	13	->
LEAF_NODE	772:15	772:15	13	vsetparent
LEAF_NODE	772:25	772:25	11	)
LEAF_NODE	772:26	772:26	10	(
ARGUMENT	772:27	772:27	10	tif
FIELD	772:27	772:27	11	tif
LEAF_NODE	772:27	772:27	12	tif
LEAF_NODE	772:30	772:30	10	,
ARGUMENT	772:32	772:32	10	tag
FIELD	772:32	772:32	11	tag
LEAF_NODE	772:32	772:32	12	tag
LEAF_NODE	772:35	772:35	10	,
ARGUMENT	772:37	772:37	10	ap
FIELD	772:37	772:37	11	ap
LEAF_NODE	772:37	772:37	12	ap
LEAF_NODE	772:39	772:39	10	)
LEAF_NODE	772:40	772:40	7	;
LEAF_NODE	773:1	773:1	5	}
EXPR_STATEMENT	774:1	774:35	3	tif -> tif_flags |= TIFF_DIRTYDIRECT ;
EXPR	774:1	774:1	4	tif -> tif_flags |= TIFF_DIRTYDIRECT
ASSIGN	774:1	774:19	5	tif -> tif_flags |= TIFF_DIRTYDIRECT
LVAL	774:1	774:1	6	tif -> tif_flags
FIELD	774:1	774:6	7	tif -> tif_flags
LEAF_NODE	774:1	774:1	8	tif
LEAF_NODE	774:4	774:4	8	->
LEAF_NODE	774:6	774:6	8	tif_flags
ASSIGN_OP	774:16	774:16	6	|=
LEAF_NODE	774:16	774:16	7	|=
RVAL	774:19	774:19	6	TIFF_DIRTYDIRECT
FIELD	774:19	774:19	7	TIFF_DIRTYDIRECT
LEAF_NODE	774:19	774:19	8	TIFF_DIRTYDIRECT
LEAF_NODE	774:35	774:35	4	;
JUMP_STATEMENT	775:1	775:9	3	return 1 ;
KEYWORD	775:1	775:1	4	return
LEAF_NODE	775:1	775:1	5	return
DESTINATION	775:8	775:8	4	1
EXPR	775:8	775:8	5	1
FIELD	775:8	775:8	6	1
LEAF_NODE	775:8	775:8	7	1
LEAF_NODE	775:9	775:9	4	;
LEAF_NODE	776:0	776:0	2	}
FUNCTION_DEF	778:0	794:0	1	
RETURN_TYPE	778:0	778:7	2	static int
LEAF_NODE	778:0	778:0	3	static
TYPE_NAME	778:7	778:7	3	int
LEAF_NODE	778:7	778:7	4	int
FUNCTION_NAME	779:0	779:0	2	PredictorVGetField
LEAF_NODE	779:0	779:0	3	PredictorVGetField
PARAMETER_LIST	779:18	779:52	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	779:18	779:18	3	(
PARAMETER_DECL	779:19	779:25	3	TIFF * tif
TYPE	779:19	779:23	4	TIFF *
TYPE_NAME	779:19	779:19	5	TIFF
LEAF_NODE	779:19	779:19	6	TIFF
POINTER	779:23	779:23	5	*
LEAF_NODE	779:23	779:23	6	*
NAME	779:25	779:25	4	tif
LEAF_NODE	779:25	779:25	5	tif
LEAF_NODE	779:28	779:28	3	,
PARAMETER_DECL	779:30	779:37	3	uint32 tag
TYPE	779:30	779:30	4	uint32
TYPE_NAME	779:30	779:30	5	uint32
LEAF_NODE	779:30	779:30	6	uint32
NAME	779:37	779:37	4	tag
LEAF_NODE	779:37	779:37	5	tag
LEAF_NODE	779:40	779:40	3	,
PARAMETER_DECL	779:42	779:50	3	va_list ap
TYPE	779:42	779:42	4	va_list
TYPE_NAME	779:42	779:42	5	va_list
LEAF_NODE	779:42	779:42	6	va_list
NAME	779:50	779:50	4	ap
LEAF_NODE	779:50	779:50	5	ap
LEAF_NODE	779:52	779:52	3	)
LEAF_NODE	780:0	780:0	2	{
STATEMENTS	781:1	793:1	2	
SIMPLE_DECL	781:1	781:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	781:1	781:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	781:1	781:20	5	TIFFPredictorState *
TYPE_NAME	781:1	781:1	6	TIFFPredictorState
LEAF_NODE	781:1	781:1	7	TIFFPredictorState
POINTER	781:20	781:20	6	*
LEAF_NODE	781:20	781:20	7	*
NAME	781:21	781:21	5	sp
LEAF_NODE	781:21	781:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	781:21	781:21	5	sp = PredictorState ( tif )
ASSIGN	781:21	781:26	6	sp = PredictorState ( tif )
LVAL	781:21	781:21	7	sp
NAME	781:21	781:21	8	sp
LEAF_NODE	781:21	781:21	9	sp
ASSIGN_OP	781:24	781:24	7	=
LEAF_NODE	781:24	781:24	8	=
RVAL	781:26	781:26	7	PredictorState ( tif )
FUNCTION_CALL	781:26	781:44	8	PredictorState ( tif )
CALLEE	781:26	781:26	9	PredictorState
LEAF_NODE	781:26	781:26	10	PredictorState
LEAF_NODE	781:40	781:40	9	(
ARGUMENT	781:41	781:41	9	tif
FIELD	781:41	781:41	10	tif
LEAF_NODE	781:41	781:41	11	tif
LEAF_NODE	781:44	781:44	9	)
LEAF_NODE	781:45	781:45	4	;
EXPR_STATEMENT	783:1	783:19	3	assert ( sp != NULL ) ;
EXPR	783:1	783:1	4	assert ( sp != NULL )
FUNCTION_CALL	783:1	783:18	5	assert ( sp != NULL )
CALLEE	783:1	783:1	6	assert
LEAF_NODE	783:1	783:1	7	assert
LEAF_NODE	783:7	783:7	6	(
ARGUMENT	783:8	783:14	6	sp != NULL
FIELD	783:8	783:8	7	sp
LEAF_NODE	783:8	783:8	8	sp
EQ_OPERATOR	783:11	783:11	7	!=
LEAF_NODE	783:11	783:11	8	!=
FIELD	783:14	783:14	7	NULL
LEAF_NODE	783:14	783:14	8	NULL
LEAF_NODE	783:18	783:18	6	)
LEAF_NODE	783:19	783:19	4	;
EXPR_STATEMENT	784:1	784:31	3	assert ( sp -> vgetparent != NULL ) ;
EXPR	784:1	784:1	4	assert ( sp -> vgetparent != NULL )
FUNCTION_CALL	784:1	784:30	5	assert ( sp -> vgetparent != NULL )
CALLEE	784:1	784:1	6	assert
LEAF_NODE	784:1	784:1	7	assert
LEAF_NODE	784:7	784:7	6	(
ARGUMENT	784:8	784:26	6	sp -> vgetparent != NULL
FIELD	784:8	784:12	7	sp -> vgetparent
LEAF_NODE	784:8	784:8	8	sp
LEAF_NODE	784:10	784:10	8	->
LEAF_NODE	784:12	784:12	8	vgetparent
EQ_OPERATOR	784:23	784:23	7	!=
LEAF_NODE	784:23	784:23	8	!=
FIELD	784:26	784:26	7	NULL
LEAF_NODE	784:26	784:26	8	NULL
LEAF_NODE	784:30	784:30	6	)
LEAF_NODE	784:31	784:31	4	;
SELECTION	786:1	786:14	3	
KEYWORD	786:1	786:1	4	switch
LEAF_NODE	786:1	786:1	5	switch
LEAF_NODE	786:8	786:8	4	(
CONDITION	786:9	786:9	4	tag
EXPR	786:9	786:9	5	tag
FIELD	786:9	786:9	6	tag
LEAF_NODE	786:9	786:9	7	tag
LEAF_NODE	786:12	786:12	4	)
STATEMENTS	786:14	792:1	4	
LEAF_NODE	786:14	786:14	5	{
STATEMENTS	787:1	791:2	5	
LABEL	787:1	787:23	6	case TIFFTAG_PREDICTOR :
LEAF_NODE	787:1	787:1	7	case
LEAF_NODE	787:6	787:6	7	TIFFTAG_PREDICTOR
LEAF_NODE	787:23	787:23	7	:
LEAF_NODE	788:2	788:2	6	*
LEAF_NODE	788:3	788:3	6	va_arg
LEAF_NODE	788:9	788:9	6	(
LEAF_NODE	788:10	788:10	6	ap
LEAF_NODE	788:12	788:12	6	,
LEAF_NODE	788:14	788:14	6	uint16
LEAF_NODE	788:20	788:20	6	*
LEAF_NODE	788:21	788:21	6	)
LEAF_NODE	788:23	788:23	6	=
EXPR_STATEMENT	788:25	788:46	6	( uint16 ) sp -> predictor ;
EXPR	788:25	788:33	7	( uint16 ) sp -> predictor
LEAF_NODE	788:25	788:25	8	(
TYPE_NAME	788:26	788:26	8	uint16
LEAF_NODE	788:26	788:26	9	uint16
LEAF_NODE	788:32	788:32	8	)
FIELD	788:33	788:37	8	sp -> predictor
LEAF_NODE	788:33	788:33	9	sp
LEAF_NODE	788:35	788:35	9	->
LEAF_NODE	788:37	788:37	9	predictor
LEAF_NODE	788:46	788:46	7	;
JUMP_STATEMENT	789:2	789:7	6	break DESTINATION ;
KEYWORD	789:2	789:2	7	break
LEAF_NODE	789:2	789:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	789:7	789:7	7	;
LABEL	790:1	790:8	6	default :
LEAF_NODE	790:1	790:1	7	default
LEAF_NODE	790:8	790:8	7	:
JUMP_STATEMENT	791:2	791:40	6	return ( * sp -> vgetparent ) ( tif , tag , ap ) ;
KEYWORD	791:2	791:2	7	return
LEAF_NODE	791:2	791:2	8	return
DESTINATION	791:9	791:9	7	( * sp -> vgetparent ) ( tif , tag , ap )
EXPR	791:9	791:9	8	( * sp -> vgetparent ) ( tif , tag , ap )
FUNCTION_CALL	791:9	791:39	9	( * sp -> vgetparent ) ( tif , tag , ap )
CALLEE	791:9	791:25	10	( * sp -> vgetparent )
LEAF_NODE	791:9	791:9	11	(
UNARY_EXPR	791:10	791:11	11	* sp -> vgetparent
UNARY_OPERATOR	791:10	791:10	12	*
LEAF_NODE	791:10	791:10	13	*
FIELD	791:11	791:15	12	sp -> vgetparent
LEAF_NODE	791:11	791:11	13	sp
LEAF_NODE	791:13	791:13	13	->
LEAF_NODE	791:15	791:15	13	vgetparent
LEAF_NODE	791:25	791:25	11	)
LEAF_NODE	791:26	791:26	10	(
ARGUMENT	791:27	791:27	10	tif
FIELD	791:27	791:27	11	tif
LEAF_NODE	791:27	791:27	12	tif
LEAF_NODE	791:30	791:30	10	,
ARGUMENT	791:32	791:32	10	tag
FIELD	791:32	791:32	11	tag
LEAF_NODE	791:32	791:32	12	tag
LEAF_NODE	791:35	791:35	10	,
ARGUMENT	791:37	791:37	10	ap
FIELD	791:37	791:37	11	ap
LEAF_NODE	791:37	791:37	12	ap
LEAF_NODE	791:39	791:39	10	)
LEAF_NODE	791:40	791:40	7	;
LEAF_NODE	792:1	792:1	5	}
JUMP_STATEMENT	793:1	793:9	3	return 1 ;
KEYWORD	793:1	793:1	4	return
LEAF_NODE	793:1	793:1	5	return
DESTINATION	793:8	793:8	4	1
EXPR	793:8	793:8	5	1
FIELD	793:8	793:8	6	1
LEAF_NODE	793:8	793:8	7	1
LEAF_NODE	793:9	793:9	4	;
LEAF_NODE	794:0	794:0	2	}
FUNCTION_DEF	796:0	813:0	1	
RETURN_TYPE	796:0	796:7	2	static void
LEAF_NODE	796:0	796:0	3	static
TYPE_NAME	796:7	796:7	3	void
LEAF_NODE	796:7	796:7	4	void
FUNCTION_NAME	797:0	797:0	2	PredictorPrintDir
LEAF_NODE	797:0	797:0	3	PredictorPrintDir
PARAMETER_LIST	797:17	797:49	2	( TIFF * tif , FILE * fd , long flags )
LEAF_NODE	797:17	797:17	3	(
PARAMETER_DECL	797:18	797:24	3	TIFF * tif
TYPE	797:18	797:22	4	TIFF *
TYPE_NAME	797:18	797:18	5	TIFF
LEAF_NODE	797:18	797:18	6	TIFF
POINTER	797:22	797:22	5	*
LEAF_NODE	797:22	797:22	6	*
NAME	797:24	797:24	4	tif
LEAF_NODE	797:24	797:24	5	tif
LEAF_NODE	797:27	797:27	3	,
PARAMETER_DECL	797:29	797:35	3	FILE * fd
TYPE	797:29	797:33	4	FILE *
TYPE_NAME	797:29	797:29	5	FILE
LEAF_NODE	797:29	797:29	6	FILE
POINTER	797:33	797:33	5	*
LEAF_NODE	797:33	797:33	6	*
NAME	797:35	797:35	4	fd
LEAF_NODE	797:35	797:35	5	fd
LEAF_NODE	797:37	797:37	3	,
PARAMETER_DECL	797:39	797:44	3	long flags
TYPE	797:39	797:39	4	long
TYPE_NAME	797:39	797:39	5	long
LEAF_NODE	797:39	797:39	6	long
NAME	797:44	797:44	4	flags
LEAF_NODE	797:44	797:44	5	flags
LEAF_NODE	797:49	797:49	3	)
LEAF_NODE	798:0	798:0	2	{
STATEMENTS	799:1	811:1	2	
SIMPLE_DECL	799:1	799:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	799:1	799:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	799:1	799:19	5	TIFFPredictorState *
TYPE_NAME	799:1	799:1	6	TIFFPredictorState
LEAF_NODE	799:1	799:1	7	TIFFPredictorState
POINTER	799:19	799:19	6	*
LEAF_NODE	799:19	799:19	7	*
NAME	799:21	799:21	5	sp
LEAF_NODE	799:21	799:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	799:21	799:21	5	sp = PredictorState ( tif )
ASSIGN	799:21	799:26	6	sp = PredictorState ( tif )
LVAL	799:21	799:21	7	sp
NAME	799:21	799:21	8	sp
LEAF_NODE	799:21	799:21	9	sp
ASSIGN_OP	799:24	799:24	7	=
LEAF_NODE	799:24	799:24	8	=
RVAL	799:26	799:26	7	PredictorState ( tif )
FUNCTION_CALL	799:26	799:44	8	PredictorState ( tif )
CALLEE	799:26	799:26	9	PredictorState
LEAF_NODE	799:26	799:26	10	PredictorState
LEAF_NODE	799:40	799:40	9	(
ARGUMENT	799:41	799:41	9	tif
FIELD	799:41	799:41	10	tif
LEAF_NODE	799:41	799:41	11	tif
LEAF_NODE	799:44	799:44	9	)
LEAF_NODE	799:45	799:45	4	;
EXPR_STATEMENT	801:1	801:13	3	( void ) flags ;
EXPR	801:1	801:8	4	( void ) flags
LEAF_NODE	801:1	801:1	5	(
TYPE_NAME	801:2	801:2	5	void
LEAF_NODE	801:2	801:2	6	void
LEAF_NODE	801:6	801:6	5	)
FIELD	801:8	801:8	5	flags
LEAF_NODE	801:8	801:8	6	flags
LEAF_NODE	801:13	801:13	4	;
SELECTION	802:1	802:40	3	
KEYWORD	802:1	802:1	4	if
LEAF_NODE	802:1	802:1	5	if
LEAF_NODE	802:4	802:4	4	(
CONDITION	802:5	802:5	4	TIFFFieldSet ( tif , FIELD_PREDICTOR )
EXPR	802:5	802:5	5	TIFFFieldSet ( tif , FIELD_PREDICTOR )
FUNCTION_CALL	802:5	802:37	6	TIFFFieldSet ( tif , FIELD_PREDICTOR )
CALLEE	802:5	802:5	7	TIFFFieldSet
LEAF_NODE	802:5	802:5	8	TIFFFieldSet
LEAF_NODE	802:17	802:17	7	(
ARGUMENT	802:18	802:18	7	tif
FIELD	802:18	802:18	8	tif
LEAF_NODE	802:18	802:18	9	tif
LEAF_NODE	802:21	802:21	7	,
ARGUMENT	802:22	802:22	7	FIELD_PREDICTOR
FIELD	802:22	802:22	8	FIELD_PREDICTOR
LEAF_NODE	802:22	802:22	9	FIELD_PREDICTOR
LEAF_NODE	802:37	802:37	7	)
LEAF_NODE	802:38	802:38	4	)
STATEMENTS	802:40	810:1	4	
LEAF_NODE	802:40	802:40	5	{
STATEMENTS	803:2	809:2	5	
EXPR_STATEMENT	803:2	803:30	6	fprintf ( fd , "  Predictor: " ) ;
EXPR	803:2	803:2	7	fprintf ( fd , "  Predictor: " )
FUNCTION_CALL	803:2	803:29	8	fprintf ( fd , "  Predictor: " )
CALLEE	803:2	803:2	9	fprintf
LEAF_NODE	803:2	803:2	10	fprintf
LEAF_NODE	803:9	803:9	9	(
ARGUMENT	803:10	803:10	9	fd
FIELD	803:10	803:10	10	fd
LEAF_NODE	803:10	803:10	11	fd
LEAF_NODE	803:12	803:12	9	,
ARGUMENT	803:14	803:14	9	"  Predictor: "
FIELD	803:14	803:14	10	"  Predictor: "
LEAF_NODE	803:14	803:14	11	"  Predictor: "
LEAF_NODE	803:29	803:29	9	)
LEAF_NODE	803:30	803:30	7	;
SELECTION	804:2	804:25	6	
KEYWORD	804:2	804:2	7	switch
LEAF_NODE	804:2	804:2	8	switch
LEAF_NODE	804:9	804:9	7	(
CONDITION	804:10	804:10	7	sp -> predictor
EXPR	804:10	804:10	8	sp -> predictor
FIELD	804:10	804:14	9	sp -> predictor
LEAF_NODE	804:10	804:10	10	sp
LEAF_NODE	804:12	804:12	10	->
LEAF_NODE	804:14	804:14	10	predictor
LEAF_NODE	804:23	804:23	7	)
STATEMENTS	804:25	808:2	7	
LEAF_NODE	804:25	804:25	8	{
STATEMENTS	805:3	807:53	8	
LABEL	805:3	805:9	9	case 1 :
LEAF_NODE	805:3	805:3	10	case
LEAF_NODE	805:8	805:8	10	1
LEAF_NODE	805:9	805:9	10	:
EXPR_STATEMENT	805:11	805:31	9	fprintf ( fd , "none " ) ;
EXPR	805:11	805:11	10	fprintf ( fd , "none " )
FUNCTION_CALL	805:11	805:30	11	fprintf ( fd , "none " )
CALLEE	805:11	805:11	12	fprintf
LEAF_NODE	805:11	805:11	13	fprintf
LEAF_NODE	805:18	805:18	12	(
ARGUMENT	805:19	805:19	12	fd
FIELD	805:19	805:19	13	fd
LEAF_NODE	805:19	805:19	14	fd
LEAF_NODE	805:21	805:21	12	,
ARGUMENT	805:23	805:23	12	"none "
FIELD	805:23	805:23	13	"none "
LEAF_NODE	805:23	805:23	14	"none "
LEAF_NODE	805:30	805:30	12	)
LEAF_NODE	805:31	805:31	10	;
JUMP_STATEMENT	805:33	805:38	9	break DESTINATION ;
KEYWORD	805:33	805:33	10	break
LEAF_NODE	805:33	805:33	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	805:38	805:38	10	;
LABEL	806:3	806:9	9	case 2 :
LEAF_NODE	806:3	806:3	10	case
LEAF_NODE	806:8	806:8	10	2
LEAF_NODE	806:9	806:9	10	:
EXPR_STATEMENT	806:11	806:50	9	fprintf ( fd , "horizontal differencing " ) ;
EXPR	806:11	806:11	10	fprintf ( fd , "horizontal differencing " )
FUNCTION_CALL	806:11	806:49	11	fprintf ( fd , "horizontal differencing " )
CALLEE	806:11	806:11	12	fprintf
LEAF_NODE	806:11	806:11	13	fprintf
LEAF_NODE	806:18	806:18	12	(
ARGUMENT	806:19	806:19	12	fd
FIELD	806:19	806:19	13	fd
LEAF_NODE	806:19	806:19	14	fd
LEAF_NODE	806:21	806:21	12	,
ARGUMENT	806:23	806:23	12	"horizontal differencing "
FIELD	806:23	806:23	13	"horizontal differencing "
LEAF_NODE	806:23	806:23	14	"horizontal differencing "
LEAF_NODE	806:49	806:49	12	)
LEAF_NODE	806:50	806:50	10	;
JUMP_STATEMENT	806:52	806:57	9	break DESTINATION ;
KEYWORD	806:52	806:52	10	break
LEAF_NODE	806:52	806:52	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	806:57	806:57	10	;
LABEL	807:3	807:9	9	case 3 :
LEAF_NODE	807:3	807:3	10	case
LEAF_NODE	807:8	807:8	10	3
LEAF_NODE	807:9	807:9	10	:
EXPR_STATEMENT	807:11	807:51	9	fprintf ( fd , "floating point predictor " ) ;
EXPR	807:11	807:11	10	fprintf ( fd , "floating point predictor " )
FUNCTION_CALL	807:11	807:50	11	fprintf ( fd , "floating point predictor " )
CALLEE	807:11	807:11	12	fprintf
LEAF_NODE	807:11	807:11	13	fprintf
LEAF_NODE	807:18	807:18	12	(
ARGUMENT	807:19	807:19	12	fd
FIELD	807:19	807:19	13	fd
LEAF_NODE	807:19	807:19	14	fd
LEAF_NODE	807:21	807:21	12	,
ARGUMENT	807:23	807:23	12	"floating point predictor "
FIELD	807:23	807:23	13	"floating point predictor "
LEAF_NODE	807:23	807:23	14	"floating point predictor "
LEAF_NODE	807:50	807:50	12	)
LEAF_NODE	807:51	807:51	10	;
JUMP_STATEMENT	807:53	807:58	9	break DESTINATION ;
KEYWORD	807:53	807:53	10	break
LEAF_NODE	807:53	807:53	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	807:58	807:58	10	;
LEAF_NODE	808:2	808:2	8	}
EXPR_STATEMENT	809:2	809:58	6	fprintf ( fd , "%d (0x%x)\n" , sp -> predictor , sp -> predictor ) ;
EXPR	809:2	809:2	7	fprintf ( fd , "%d (0x%x)\n" , sp -> predictor , sp -> predictor )
FUNCTION_CALL	809:2	809:57	8	fprintf ( fd , "%d (0x%x)\n" , sp -> predictor , sp -> predictor )
CALLEE	809:2	809:2	9	fprintf
LEAF_NODE	809:2	809:2	10	fprintf
LEAF_NODE	809:9	809:9	9	(
ARGUMENT	809:10	809:10	9	fd
FIELD	809:10	809:10	10	fd
LEAF_NODE	809:10	809:10	11	fd
LEAF_NODE	809:12	809:12	9	,
ARGUMENT	809:14	809:14	9	"%d (0x%x)\n"
FIELD	809:14	809:14	10	"%d (0x%x)\n"
LEAF_NODE	809:14	809:14	11	"%d (0x%x)\n"
LEAF_NODE	809:27	809:27	9	,
ARGUMENT	809:29	809:29	9	sp -> predictor
FIELD	809:29	809:33	10	sp -> predictor
LEAF_NODE	809:29	809:29	11	sp
LEAF_NODE	809:31	809:31	11	->
LEAF_NODE	809:33	809:33	11	predictor
LEAF_NODE	809:42	809:42	9	,
ARGUMENT	809:44	809:44	9	sp -> predictor
FIELD	809:44	809:48	10	sp -> predictor
LEAF_NODE	809:44	809:44	11	sp
LEAF_NODE	809:46	809:46	11	->
LEAF_NODE	809:48	809:48	11	predictor
LEAF_NODE	809:57	809:57	9	)
LEAF_NODE	809:58	809:58	7	;
LEAF_NODE	810:1	810:1	5	}
SELECTION	811:1	812:2	3	
KEYWORD	811:1	811:1	4	if
LEAF_NODE	811:1	811:1	5	if
LEAF_NODE	811:4	811:4	4	(
CONDITION	811:5	811:5	4	sp -> printdir
EXPR	811:5	811:5	5	sp -> printdir
FIELD	811:5	811:9	6	sp -> printdir
LEAF_NODE	811:5	811:5	7	sp
LEAF_NODE	811:7	811:7	7	->
LEAF_NODE	811:9	811:9	7	printdir
LEAF_NODE	811:17	811:17	4	)
STATEMENTS	812:2	812:2	4	
EXPR_STATEMENT	812:2	812:33	5	( * sp -> printdir ) ( tif , fd , flags ) ;
EXPR	812:2	812:2	6	( * sp -> printdir ) ( tif , fd , flags )
FUNCTION_CALL	812:2	812:32	7	( * sp -> printdir ) ( tif , fd , flags )
CALLEE	812:2	812:16	8	( * sp -> printdir )
LEAF_NODE	812:2	812:2	9	(
UNARY_EXPR	812:3	812:4	9	* sp -> printdir
UNARY_OPERATOR	812:3	812:3	10	*
LEAF_NODE	812:3	812:3	11	*
FIELD	812:4	812:8	10	sp -> printdir
LEAF_NODE	812:4	812:4	11	sp
LEAF_NODE	812:6	812:6	11	->
LEAF_NODE	812:8	812:8	11	printdir
LEAF_NODE	812:16	812:16	9	)
LEAF_NODE	812:17	812:17	8	(
ARGUMENT	812:18	812:18	8	tif
FIELD	812:18	812:18	9	tif
LEAF_NODE	812:18	812:18	10	tif
LEAF_NODE	812:21	812:21	8	,
ARGUMENT	812:23	812:23	8	fd
FIELD	812:23	812:23	9	fd
LEAF_NODE	812:23	812:23	10	fd
LEAF_NODE	812:25	812:25	8	,
ARGUMENT	812:27	812:27	8	flags
FIELD	812:27	812:27	9	flags
LEAF_NODE	812:27	812:27	10	flags
LEAF_NODE	812:32	812:32	8	)
LEAF_NODE	812:33	812:33	6	;
LEAF_NODE	813:0	813:0	2	}
FUNCTION_DEF	815:0	854:0	1	
RETURN_TYPE	815:0	815:0	2	int
TYPE_NAME	815:0	815:0	3	int
LEAF_NODE	815:0	815:0	4	int
FUNCTION_NAME	816:0	816:0	2	TIFFPredictorInit
LEAF_NODE	816:0	816:0	3	TIFFPredictorInit
PARAMETER_LIST	816:17	816:27	2	( TIFF * tif )
LEAF_NODE	816:17	816:17	3	(
PARAMETER_DECL	816:18	816:24	3	TIFF * tif
TYPE	816:18	816:22	4	TIFF *
TYPE_NAME	816:18	816:18	5	TIFF
LEAF_NODE	816:18	816:18	6	TIFF
POINTER	816:22	816:22	5	*
LEAF_NODE	816:22	816:22	6	*
NAME	816:24	816:24	4	tif
LEAF_NODE	816:24	816:24	5	tif
LEAF_NODE	816:27	816:27	3	)
LEAF_NODE	817:0	817:0	2	{
STATEMENTS	818:1	853:1	2	
SIMPLE_DECL	818:1	818:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	818:1	818:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	818:1	818:19	5	TIFFPredictorState *
TYPE_NAME	818:1	818:1	6	TIFFPredictorState
LEAF_NODE	818:1	818:1	7	TIFFPredictorState
POINTER	818:19	818:19	6	*
LEAF_NODE	818:19	818:19	7	*
NAME	818:21	818:21	5	sp
LEAF_NODE	818:21	818:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	818:21	818:21	5	sp = PredictorState ( tif )
ASSIGN	818:21	818:26	6	sp = PredictorState ( tif )
LVAL	818:21	818:21	7	sp
NAME	818:21	818:21	8	sp
LEAF_NODE	818:21	818:21	9	sp
ASSIGN_OP	818:24	818:24	7	=
LEAF_NODE	818:24	818:24	8	=
RVAL	818:26	818:26	7	PredictorState ( tif )
FUNCTION_CALL	818:26	818:44	8	PredictorState ( tif )
CALLEE	818:26	818:26	9	PredictorState
LEAF_NODE	818:26	818:26	10	PredictorState
LEAF_NODE	818:40	818:40	9	(
ARGUMENT	818:41	818:41	9	tif
FIELD	818:41	818:41	10	tif
LEAF_NODE	818:41	818:41	11	tif
LEAF_NODE	818:44	818:44	9	)
LEAF_NODE	818:45	818:45	4	;
EXPR_STATEMENT	820:1	820:16	3	assert ( sp != 0 ) ;
EXPR	820:1	820:1	4	assert ( sp != 0 )
FUNCTION_CALL	820:1	820:15	5	assert ( sp != 0 )
CALLEE	820:1	820:1	6	assert
LEAF_NODE	820:1	820:1	7	assert
LEAF_NODE	820:7	820:7	6	(
ARGUMENT	820:8	820:14	6	sp != 0
FIELD	820:8	820:8	7	sp
LEAF_NODE	820:8	820:8	8	sp
EQ_OPERATOR	820:11	820:11	7	!=
LEAF_NODE	820:11	820:11	8	!=
FIELD	820:14	820:14	7	0
LEAF_NODE	820:14	820:14	8	0
LEAF_NODE	820:15	820:15	6	)
LEAF_NODE	820:16	820:16	4	;
SELECTION	825:1	826:41	3	
KEYWORD	825:1	825:1	4	if
LEAF_NODE	825:1	825:1	5	if
LEAF_NODE	825:4	825:4	4	(
CONDITION	825:5	825:5	4	! _TIFFMergeFields ( tif , predictFields , TIFFArrayCount ( predictFields ) )
EXPR	825:5	825:5	5	! _TIFFMergeFields ( tif , predictFields , TIFFArrayCount ( predictFields ) )
UNARY_EXPR	825:5	825:6	6	! _TIFFMergeFields ( tif , predictFields , TIFFArrayCount ( predictFields ) )
UNARY_OPERATOR	825:5	825:5	7	!
LEAF_NODE	825:5	825:5	8	!
FUNCTION_CALL	825:6	826:38	7	_TIFFMergeFields ( tif , predictFields , TIFFArrayCount ( predictFields ) )
CALLEE	825:6	825:6	8	_TIFFMergeFields
LEAF_NODE	825:6	825:6	9	_TIFFMergeFields
LEAF_NODE	825:22	825:22	8	(
ARGUMENT	825:23	825:23	8	tif
FIELD	825:23	825:23	9	tif
LEAF_NODE	825:23	825:23	10	tif
LEAF_NODE	825:26	825:26	8	,
ARGUMENT	825:28	825:28	8	predictFields
FIELD	825:28	825:28	9	predictFields
LEAF_NODE	825:28	825:28	10	predictFields
LEAF_NODE	825:41	825:41	8	,
ARGUMENT	826:9	826:9	8	TIFFArrayCount ( predictFields )
FUNCTION_CALL	826:9	826:37	9	TIFFArrayCount ( predictFields )
CALLEE	826:9	826:9	10	TIFFArrayCount
LEAF_NODE	826:9	826:9	11	TIFFArrayCount
LEAF_NODE	826:23	826:23	10	(
ARGUMENT	826:24	826:24	10	predictFields
FIELD	826:24	826:24	11	predictFields
LEAF_NODE	826:24	826:24	12	predictFields
LEAF_NODE	826:37	826:37	10	)
LEAF_NODE	826:38	826:38	8	)
LEAF_NODE	826:39	826:39	4	)
STATEMENTS	826:41	830:1	4	
LEAF_NODE	826:41	826:41	5	{
STATEMENTS	827:2	829:2	5	
EXPR_STATEMENT	827:2	828:53	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFPredictorInit" , "Merging Predictor codec-specific tags failed" ) ;
EXPR	827:2	827:2	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFPredictorInit" , "Merging Predictor codec-specific tags failed" )
FUNCTION_CALL	827:2	828:52	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFPredictorInit" , "Merging Predictor codec-specific tags failed" )
CALLEE	827:2	827:2	9	TIFFErrorExt
LEAF_NODE	827:2	827:2	10	TIFFErrorExt
LEAF_NODE	827:14	827:14	9	(
ARGUMENT	827:15	827:15	9	tif -> tif_clientdata
FIELD	827:15	827:20	10	tif -> tif_clientdata
LEAF_NODE	827:15	827:15	11	tif
LEAF_NODE	827:18	827:18	11	->
LEAF_NODE	827:20	827:20	11	tif_clientdata
LEAF_NODE	827:34	827:34	9	,
ARGUMENT	827:36	827:36	9	"TIFFPredictorInit"
FIELD	827:36	827:36	10	"TIFFPredictorInit"
LEAF_NODE	827:36	827:36	11	"TIFFPredictorInit"
LEAF_NODE	827:55	827:55	9	,
ARGUMENT	828:6	828:6	9	"Merging Predictor codec-specific tags failed"
FIELD	828:6	828:6	10	"Merging Predictor codec-specific tags failed"
LEAF_NODE	828:6	828:6	11	"Merging Predictor codec-specific tags failed"
LEAF_NODE	828:52	828:52	9	)
LEAF_NODE	828:53	828:53	7	;
JUMP_STATEMENT	829:2	829:10	6	return 0 ;
KEYWORD	829:2	829:2	7	return
LEAF_NODE	829:2	829:2	8	return
DESTINATION	829:9	829:9	7	0
EXPR	829:9	829:9	8	0
FIELD	829:9	829:9	9	0
LEAF_NODE	829:9	829:9	10	0
LEAF_NODE	829:10	829:10	7	;
LEAF_NODE	830:1	830:1	5	}
EXPR_STATEMENT	835:1	835:47	3	sp -> vgetparent = tif -> tif_tagmethods . vgetfield ;
EXPR	835:1	835:1	4	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
ASSIGN	835:1	835:18	5	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
LVAL	835:1	835:1	6	sp -> vgetparent
FIELD	835:1	835:5	7	sp -> vgetparent
LEAF_NODE	835:1	835:1	8	sp
LEAF_NODE	835:3	835:3	8	->
LEAF_NODE	835:5	835:5	8	vgetparent
ASSIGN_OP	835:16	835:16	6	=
LEAF_NODE	835:16	835:16	7	=
RVAL	835:18	835:18	6	tif -> tif_tagmethods . vgetfield
FIELD	835:18	835:38	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	835:18	835:18	8	tif
LEAF_NODE	835:21	835:21	8	->
LEAF_NODE	835:23	835:23	8	tif_tagmethods
LEAF_NODE	835:37	835:37	8	.
LEAF_NODE	835:38	835:38	8	vgetfield
LEAF_NODE	835:47	835:47	4	;
EXPR_STATEMENT	836:1	837:30	3	tif -> tif_tagmethods . vgetfield = PredictorVGetField ;
EXPR	836:1	836:1	4	tif -> tif_tagmethods . vgetfield = PredictorVGetField
ASSIGN	836:1	837:12	5	tif -> tif_tagmethods . vgetfield = PredictorVGetField
LVAL	836:1	836:1	6	tif -> tif_tagmethods . vgetfield
FIELD	836:1	836:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	836:1	836:1	8	tif
LEAF_NODE	836:4	836:4	8	->
LEAF_NODE	836:6	836:6	8	tif_tagmethods
LEAF_NODE	836:20	836:20	8	.
LEAF_NODE	836:21	836:21	8	vgetfield
ASSIGN_OP	836:31	836:31	6	=
LEAF_NODE	836:31	836:31	7	=
RVAL	837:12	837:12	6	PredictorVGetField
FIELD	837:12	837:12	7	PredictorVGetField
LEAF_NODE	837:12	837:12	8	PredictorVGetField
LEAF_NODE	837:30	837:30	4	;
EXPR_STATEMENT	838:1	838:47	3	sp -> vsetparent = tif -> tif_tagmethods . vsetfield ;
EXPR	838:1	838:1	4	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
ASSIGN	838:1	838:18	5	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
LVAL	838:1	838:1	6	sp -> vsetparent
FIELD	838:1	838:5	7	sp -> vsetparent
LEAF_NODE	838:1	838:1	8	sp
LEAF_NODE	838:3	838:3	8	->
LEAF_NODE	838:5	838:5	8	vsetparent
ASSIGN_OP	838:16	838:16	6	=
LEAF_NODE	838:16	838:16	7	=
RVAL	838:18	838:18	6	tif -> tif_tagmethods . vsetfield
FIELD	838:18	838:38	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	838:18	838:18	8	tif
LEAF_NODE	838:21	838:21	8	->
LEAF_NODE	838:23	838:23	8	tif_tagmethods
LEAF_NODE	838:37	838:37	8	.
LEAF_NODE	838:38	838:38	8	vsetfield
LEAF_NODE	838:47	838:47	4	;
EXPR_STATEMENT	839:1	840:23	3	tif -> tif_tagmethods . vsetfield = PredictorVSetField ;
EXPR	839:1	839:1	4	tif -> tif_tagmethods . vsetfield = PredictorVSetField
ASSIGN	839:1	840:5	5	tif -> tif_tagmethods . vsetfield = PredictorVSetField
LVAL	839:1	839:1	6	tif -> tif_tagmethods . vsetfield
FIELD	839:1	839:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	839:1	839:1	8	tif
LEAF_NODE	839:4	839:4	8	->
LEAF_NODE	839:6	839:6	8	tif_tagmethods
LEAF_NODE	839:20	839:20	8	.
LEAF_NODE	839:21	839:21	8	vsetfield
ASSIGN_OP	839:31	839:31	6	=
LEAF_NODE	839:31	839:31	7	=
RVAL	840:5	840:5	6	PredictorVSetField
FIELD	840:5	840:5	7	PredictorVSetField
LEAF_NODE	840:5	840:5	8	PredictorVSetField
LEAF_NODE	840:23	840:23	4	;
EXPR_STATEMENT	841:1	841:44	3	sp -> printdir = tif -> tif_tagmethods . printdir ;
EXPR	841:1	841:1	4	sp -> printdir = tif -> tif_tagmethods . printdir
ASSIGN	841:1	841:16	5	sp -> printdir = tif -> tif_tagmethods . printdir
LVAL	841:1	841:1	6	sp -> printdir
FIELD	841:1	841:5	7	sp -> printdir
LEAF_NODE	841:1	841:1	8	sp
LEAF_NODE	841:3	841:3	8	->
LEAF_NODE	841:5	841:5	8	printdir
ASSIGN_OP	841:14	841:14	6	=
LEAF_NODE	841:14	841:14	7	=
RVAL	841:16	841:16	6	tif -> tif_tagmethods . printdir
FIELD	841:16	841:36	7	tif -> tif_tagmethods . printdir
LEAF_NODE	841:16	841:16	8	tif
LEAF_NODE	841:19	841:19	8	->
LEAF_NODE	841:21	841:21	8	tif_tagmethods
LEAF_NODE	841:35	841:35	8	.
LEAF_NODE	841:36	841:36	8	printdir
LEAF_NODE	841:44	841:44	4	;
EXPR_STATEMENT	842:1	843:29	3	tif -> tif_tagmethods . printdir = PredictorPrintDir ;
EXPR	842:1	842:1	4	tif -> tif_tagmethods . printdir = PredictorPrintDir
ASSIGN	842:1	843:12	5	tif -> tif_tagmethods . printdir = PredictorPrintDir
LVAL	842:1	842:1	6	tif -> tif_tagmethods . printdir
FIELD	842:1	842:21	7	tif -> tif_tagmethods . printdir
LEAF_NODE	842:1	842:1	8	tif
LEAF_NODE	842:4	842:4	8	->
LEAF_NODE	842:6	842:6	8	tif_tagmethods
LEAF_NODE	842:20	842:20	8	.
LEAF_NODE	842:21	842:21	8	printdir
ASSIGN_OP	842:30	842:30	6	=
LEAF_NODE	842:30	842:30	7	=
RVAL	843:12	843:12	6	PredictorPrintDir
FIELD	843:12	843:12	7	PredictorPrintDir
LEAF_NODE	843:12	843:12	8	PredictorPrintDir
LEAF_NODE	843:29	843:29	4	;
EXPR_STATEMENT	845:1	845:39	3	sp -> setupdecode = tif -> tif_setupdecode ;
EXPR	845:1	845:1	4	sp -> setupdecode = tif -> tif_setupdecode
ASSIGN	845:1	845:19	5	sp -> setupdecode = tif -> tif_setupdecode
LVAL	845:1	845:1	6	sp -> setupdecode
FIELD	845:1	845:5	7	sp -> setupdecode
LEAF_NODE	845:1	845:1	8	sp
LEAF_NODE	845:3	845:3	8	->
LEAF_NODE	845:5	845:5	8	setupdecode
ASSIGN_OP	845:17	845:17	6	=
LEAF_NODE	845:17	845:17	7	=
RVAL	845:19	845:19	6	tif -> tif_setupdecode
FIELD	845:19	845:24	7	tif -> tif_setupdecode
LEAF_NODE	845:19	845:19	8	tif
LEAF_NODE	845:22	845:22	8	->
LEAF_NODE	845:24	845:24	8	tif_setupdecode
LEAF_NODE	845:39	845:39	4	;
EXPR_STATEMENT	846:1	846:44	3	tif -> tif_setupdecode = PredictorSetupDecode ;
EXPR	846:1	846:1	4	tif -> tif_setupdecode = PredictorSetupDecode
ASSIGN	846:1	846:24	5	tif -> tif_setupdecode = PredictorSetupDecode
LVAL	846:1	846:1	6	tif -> tif_setupdecode
FIELD	846:1	846:6	7	tif -> tif_setupdecode
LEAF_NODE	846:1	846:1	8	tif
LEAF_NODE	846:4	846:4	8	->
LEAF_NODE	846:6	846:6	8	tif_setupdecode
ASSIGN_OP	846:22	846:22	6	=
LEAF_NODE	846:22	846:22	7	=
RVAL	846:24	846:24	6	PredictorSetupDecode
FIELD	846:24	846:24	7	PredictorSetupDecode
LEAF_NODE	846:24	846:24	8	PredictorSetupDecode
LEAF_NODE	846:44	846:44	4	;
EXPR_STATEMENT	847:1	847:39	3	sp -> setupencode = tif -> tif_setupencode ;
EXPR	847:1	847:1	4	sp -> setupencode = tif -> tif_setupencode
ASSIGN	847:1	847:19	5	sp -> setupencode = tif -> tif_setupencode
LVAL	847:1	847:1	6	sp -> setupencode
FIELD	847:1	847:5	7	sp -> setupencode
LEAF_NODE	847:1	847:1	8	sp
LEAF_NODE	847:3	847:3	8	->
LEAF_NODE	847:5	847:5	8	setupencode
ASSIGN_OP	847:17	847:17	6	=
LEAF_NODE	847:17	847:17	7	=
RVAL	847:19	847:19	6	tif -> tif_setupencode
FIELD	847:19	847:24	7	tif -> tif_setupencode
LEAF_NODE	847:19	847:19	8	tif
LEAF_NODE	847:22	847:22	8	->
LEAF_NODE	847:24	847:24	8	tif_setupencode
LEAF_NODE	847:39	847:39	4	;
EXPR_STATEMENT	848:1	848:44	3	tif -> tif_setupencode = PredictorSetupEncode ;
EXPR	848:1	848:1	4	tif -> tif_setupencode = PredictorSetupEncode
ASSIGN	848:1	848:24	5	tif -> tif_setupencode = PredictorSetupEncode
LVAL	848:1	848:1	6	tif -> tif_setupencode
FIELD	848:1	848:6	7	tif -> tif_setupencode
LEAF_NODE	848:1	848:1	8	tif
LEAF_NODE	848:4	848:4	8	->
LEAF_NODE	848:6	848:6	8	tif_setupencode
ASSIGN_OP	848:22	848:22	6	=
LEAF_NODE	848:22	848:22	7	=
RVAL	848:24	848:24	6	PredictorSetupEncode
FIELD	848:24	848:24	7	PredictorSetupEncode
LEAF_NODE	848:24	848:24	8	PredictorSetupEncode
LEAF_NODE	848:44	848:44	4	;
EXPR_STATEMENT	850:1	850:18	3	sp -> predictor = 1 ;
EXPR	850:1	850:1	4	sp -> predictor = 1
ASSIGN	850:1	850:17	5	sp -> predictor = 1
LVAL	850:1	850:1	6	sp -> predictor
FIELD	850:1	850:5	7	sp -> predictor
LEAF_NODE	850:1	850:1	8	sp
LEAF_NODE	850:3	850:3	8	->
LEAF_NODE	850:5	850:5	8	predictor
ASSIGN_OP	850:15	850:15	6	=
LEAF_NODE	850:15	850:15	7	=
RVAL	850:17	850:17	6	1
FIELD	850:17	850:17	7	1
LEAF_NODE	850:17	850:17	8	1
LEAF_NODE	850:18	850:18	4	;
EXPR_STATEMENT	851:1	851:23	3	sp -> encodepfunc = NULL ;
EXPR	851:1	851:1	4	sp -> encodepfunc = NULL
ASSIGN	851:1	851:19	5	sp -> encodepfunc = NULL
LVAL	851:1	851:1	6	sp -> encodepfunc
FIELD	851:1	851:5	7	sp -> encodepfunc
LEAF_NODE	851:1	851:1	8	sp
LEAF_NODE	851:3	851:3	8	->
LEAF_NODE	851:5	851:5	8	encodepfunc
ASSIGN_OP	851:17	851:17	6	=
LEAF_NODE	851:17	851:17	7	=
RVAL	851:19	851:19	6	NULL
FIELD	851:19	851:19	7	NULL
LEAF_NODE	851:19	851:19	8	NULL
LEAF_NODE	851:23	851:23	4	;
EXPR_STATEMENT	852:1	852:23	3	sp -> decodepfunc = NULL ;
EXPR	852:1	852:1	4	sp -> decodepfunc = NULL
ASSIGN	852:1	852:19	5	sp -> decodepfunc = NULL
LVAL	852:1	852:1	6	sp -> decodepfunc
FIELD	852:1	852:5	7	sp -> decodepfunc
LEAF_NODE	852:1	852:1	8	sp
LEAF_NODE	852:3	852:3	8	->
LEAF_NODE	852:5	852:5	8	decodepfunc
ASSIGN_OP	852:17	852:17	6	=
LEAF_NODE	852:17	852:17	7	=
RVAL	852:19	852:19	6	NULL
FIELD	852:19	852:19	7	NULL
LEAF_NODE	852:19	852:19	8	NULL
LEAF_NODE	852:23	852:23	4	;
JUMP_STATEMENT	853:1	853:9	3	return 1 ;
KEYWORD	853:1	853:1	4	return
LEAF_NODE	853:1	853:1	5	return
DESTINATION	853:8	853:8	4	1
EXPR	853:8	853:8	5	1
FIELD	853:8	853:8	6	1
LEAF_NODE	853:8	853:8	7	1
LEAF_NODE	853:9	853:9	4	;
LEAF_NODE	854:0	854:0	2	}
FUNCTION_DEF	856:0	870:0	1	
RETURN_TYPE	856:0	856:0	2	int
TYPE_NAME	856:0	856:0	3	int
LEAF_NODE	856:0	856:0	4	int
FUNCTION_NAME	857:0	857:0	2	TIFFPredictorCleanup
LEAF_NODE	857:0	857:0	3	TIFFPredictorCleanup
PARAMETER_LIST	857:20	857:30	2	( TIFF * tif )
LEAF_NODE	857:20	857:20	3	(
PARAMETER_DECL	857:21	857:27	3	TIFF * tif
TYPE	857:21	857:25	4	TIFF *
TYPE_NAME	857:21	857:21	5	TIFF
LEAF_NODE	857:21	857:21	6	TIFF
POINTER	857:25	857:25	5	*
LEAF_NODE	857:25	857:25	6	*
NAME	857:27	857:27	4	tif
LEAF_NODE	857:27	857:27	5	tif
LEAF_NODE	857:30	857:30	3	)
LEAF_NODE	858:0	858:0	2	{
STATEMENTS	859:1	869:1	2	
SIMPLE_DECL	859:1	859:45	3	TIFFPredictorState * sp ; sp = PredictorState ( tif ) ;
VAR_DECL	859:1	859:21	4	TIFFPredictorState * sp ; sp = PredictorState ( tif )
TYPE	859:1	859:19	5	TIFFPredictorState *
TYPE_NAME	859:1	859:1	6	TIFFPredictorState
LEAF_NODE	859:1	859:1	7	TIFFPredictorState
POINTER	859:19	859:19	6	*
LEAF_NODE	859:19	859:19	7	*
NAME	859:21	859:21	5	sp
LEAF_NODE	859:21	859:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	859:21	859:21	5	sp = PredictorState ( tif )
ASSIGN	859:21	859:26	6	sp = PredictorState ( tif )
LVAL	859:21	859:21	7	sp
NAME	859:21	859:21	8	sp
LEAF_NODE	859:21	859:21	9	sp
ASSIGN_OP	859:24	859:24	7	=
LEAF_NODE	859:24	859:24	8	=
RVAL	859:26	859:26	7	PredictorState ( tif )
FUNCTION_CALL	859:26	859:44	8	PredictorState ( tif )
CALLEE	859:26	859:26	9	PredictorState
LEAF_NODE	859:26	859:26	10	PredictorState
LEAF_NODE	859:40	859:40	9	(
ARGUMENT	859:41	859:41	9	tif
FIELD	859:41	859:41	10	tif
LEAF_NODE	859:41	859:41	11	tif
LEAF_NODE	859:44	859:44	9	)
LEAF_NODE	859:45	859:45	4	;
EXPR_STATEMENT	861:1	861:16	3	assert ( sp != 0 ) ;
EXPR	861:1	861:1	4	assert ( sp != 0 )
FUNCTION_CALL	861:1	861:15	5	assert ( sp != 0 )
CALLEE	861:1	861:1	6	assert
LEAF_NODE	861:1	861:1	7	assert
LEAF_NODE	861:7	861:7	6	(
ARGUMENT	861:8	861:14	6	sp != 0
FIELD	861:8	861:8	7	sp
LEAF_NODE	861:8	861:8	8	sp
EQ_OPERATOR	861:11	861:11	7	!=
LEAF_NODE	861:11	861:11	8	!=
FIELD	861:14	861:14	7	0
LEAF_NODE	861:14	861:14	8	0
LEAF_NODE	861:15	861:15	6	)
LEAF_NODE	861:16	861:16	4	;
EXPR_STATEMENT	863:1	863:47	3	tif -> tif_tagmethods . vgetfield = sp -> vgetparent ;
EXPR	863:1	863:1	4	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
ASSIGN	863:1	863:33	5	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
LVAL	863:1	863:1	6	tif -> tif_tagmethods . vgetfield
FIELD	863:1	863:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	863:1	863:1	8	tif
LEAF_NODE	863:4	863:4	8	->
LEAF_NODE	863:6	863:6	8	tif_tagmethods
LEAF_NODE	863:20	863:20	8	.
LEAF_NODE	863:21	863:21	8	vgetfield
ASSIGN_OP	863:31	863:31	6	=
LEAF_NODE	863:31	863:31	7	=
RVAL	863:33	863:33	6	sp -> vgetparent
FIELD	863:33	863:37	7	sp -> vgetparent
LEAF_NODE	863:33	863:33	8	sp
LEAF_NODE	863:35	863:35	8	->
LEAF_NODE	863:37	863:37	8	vgetparent
LEAF_NODE	863:47	863:47	4	;
EXPR_STATEMENT	864:1	864:47	3	tif -> tif_tagmethods . vsetfield = sp -> vsetparent ;
EXPR	864:1	864:1	4	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
ASSIGN	864:1	864:33	5	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
LVAL	864:1	864:1	6	tif -> tif_tagmethods . vsetfield
FIELD	864:1	864:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	864:1	864:1	8	tif
LEAF_NODE	864:4	864:4	8	->
LEAF_NODE	864:6	864:6	8	tif_tagmethods
LEAF_NODE	864:20	864:20	8	.
LEAF_NODE	864:21	864:21	8	vsetfield
ASSIGN_OP	864:31	864:31	6	=
LEAF_NODE	864:31	864:31	7	=
RVAL	864:33	864:33	6	sp -> vsetparent
FIELD	864:33	864:37	7	sp -> vsetparent
LEAF_NODE	864:33	864:33	8	sp
LEAF_NODE	864:35	864:35	8	->
LEAF_NODE	864:37	864:37	8	vsetparent
LEAF_NODE	864:47	864:47	4	;
EXPR_STATEMENT	865:1	865:44	3	tif -> tif_tagmethods . printdir = sp -> printdir ;
EXPR	865:1	865:1	4	tif -> tif_tagmethods . printdir = sp -> printdir
ASSIGN	865:1	865:32	5	tif -> tif_tagmethods . printdir = sp -> printdir
LVAL	865:1	865:1	6	tif -> tif_tagmethods . printdir
FIELD	865:1	865:21	7	tif -> tif_tagmethods . printdir
LEAF_NODE	865:1	865:1	8	tif
LEAF_NODE	865:4	865:4	8	->
LEAF_NODE	865:6	865:6	8	tif_tagmethods
LEAF_NODE	865:20	865:20	8	.
LEAF_NODE	865:21	865:21	8	printdir
ASSIGN_OP	865:30	865:30	6	=
LEAF_NODE	865:30	865:30	7	=
RVAL	865:32	865:32	6	sp -> printdir
FIELD	865:32	865:36	7	sp -> printdir
LEAF_NODE	865:32	865:32	8	sp
LEAF_NODE	865:34	865:34	8	->
LEAF_NODE	865:36	865:36	8	printdir
LEAF_NODE	865:44	865:44	4	;
EXPR_STATEMENT	866:1	866:39	3	tif -> tif_setupdecode = sp -> setupdecode ;
EXPR	866:1	866:1	4	tif -> tif_setupdecode = sp -> setupdecode
ASSIGN	866:1	866:24	5	tif -> tif_setupdecode = sp -> setupdecode
LVAL	866:1	866:1	6	tif -> tif_setupdecode
FIELD	866:1	866:6	7	tif -> tif_setupdecode
LEAF_NODE	866:1	866:1	8	tif
LEAF_NODE	866:4	866:4	8	->
LEAF_NODE	866:6	866:6	8	tif_setupdecode
ASSIGN_OP	866:22	866:22	6	=
LEAF_NODE	866:22	866:22	7	=
RVAL	866:24	866:24	6	sp -> setupdecode
FIELD	866:24	866:28	7	sp -> setupdecode
LEAF_NODE	866:24	866:24	8	sp
LEAF_NODE	866:26	866:26	8	->
LEAF_NODE	866:28	866:28	8	setupdecode
LEAF_NODE	866:39	866:39	4	;
EXPR_STATEMENT	867:1	867:39	3	tif -> tif_setupencode = sp -> setupencode ;
EXPR	867:1	867:1	4	tif -> tif_setupencode = sp -> setupencode
ASSIGN	867:1	867:24	5	tif -> tif_setupencode = sp -> setupencode
LVAL	867:1	867:1	6	tif -> tif_setupencode
FIELD	867:1	867:6	7	tif -> tif_setupencode
LEAF_NODE	867:1	867:1	8	tif
LEAF_NODE	867:4	867:4	8	->
LEAF_NODE	867:6	867:6	8	tif_setupencode
ASSIGN_OP	867:22	867:22	6	=
LEAF_NODE	867:22	867:22	7	=
RVAL	867:24	867:24	6	sp -> setupencode
FIELD	867:24	867:28	7	sp -> setupencode
LEAF_NODE	867:24	867:24	8	sp
LEAF_NODE	867:26	867:26	8	->
LEAF_NODE	867:28	867:28	8	setupencode
LEAF_NODE	867:39	867:39	4	;
JUMP_STATEMENT	869:1	869:9	3	return 1 ;
KEYWORD	869:1	869:1	4	return
LEAF_NODE	869:1	869:1	5	return
DESTINATION	869:8	869:8	4	1
EXPR	869:8	869:8	5	1
FIELD	869:8	869:8	6	1
LEAF_NODE	869:8	869:8	7	1
LEAF_NODE	869:9	869:9	4	;
LEAF_NODE	870:0	870:0	2	}
