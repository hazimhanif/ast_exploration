SOURCE_FILE	41:0	1683:0	0	
FUNCTION_DEF	41:0	55:0	1	
RETURN_TYPE	41:0	41:7	2	static void
LEAF_NODE	41:0	41:0	3	static
TYPE_NAME	41:7	41:7	3	void
LEAF_NODE	41:7	41:7	4	void
FUNCTION_NAME	42:0	42:0	2	setByteArray
LEAF_NODE	42:0	42:0	3	setByteArray
PARAMETER_LIST	42:12	42:65	2	( void * * vpp , void * vp , size_t nmemb , size_t elem_size )
LEAF_NODE	42:12	42:12	3	(
PARAMETER_DECL	42:13	42:20	3	void * * vpp
TYPE	42:13	42:17	4	void * *
TYPE_NAME	42:13	42:13	5	void
LEAF_NODE	42:13	42:13	6	void
POINTER	42:17	42:18	5	* *
LEAF_NODE	42:17	42:17	6	*
LEAF_NODE	42:18	42:18	6	*
NAME	42:20	42:20	4	vpp
LEAF_NODE	42:20	42:20	5	vpp
LEAF_NODE	42:23	42:23	3	,
PARAMETER_DECL	42:25	42:31	3	void * vp
TYPE	42:25	42:29	4	void *
TYPE_NAME	42:25	42:25	5	void
LEAF_NODE	42:25	42:25	6	void
POINTER	42:29	42:29	5	*
LEAF_NODE	42:29	42:29	6	*
NAME	42:31	42:31	4	vp
LEAF_NODE	42:31	42:31	5	vp
LEAF_NODE	42:33	42:33	3	,
PARAMETER_DECL	42:35	42:42	3	size_t nmemb
TYPE	42:35	42:35	4	size_t
TYPE_NAME	42:35	42:35	5	size_t
LEAF_NODE	42:35	42:35	6	size_t
NAME	42:42	42:42	4	nmemb
LEAF_NODE	42:42	42:42	5	nmemb
LEAF_NODE	42:47	42:47	3	,
PARAMETER_DECL	42:49	42:56	3	size_t elem_size
TYPE	42:49	42:49	4	size_t
TYPE_NAME	42:49	42:49	5	size_t
LEAF_NODE	42:49	42:49	6	size_t
NAME	42:56	42:56	4	elem_size
LEAF_NODE	42:56	42:56	5	elem_size
LEAF_NODE	42:65	42:65	3	)
LEAF_NODE	43:0	43:0	2	{
STATEMENTS	44:1	48:1	2	
SELECTION	44:1	44:11	3	
KEYWORD	44:1	44:1	4	if
LEAF_NODE	44:1	44:1	5	if
LEAF_NODE	44:4	44:4	4	(
CONDITION	44:5	44:5	4	* vpp
EXPR	44:5	44:5	5	* vpp
UNARY_EXPR	44:5	44:6	6	* vpp
UNARY_OPERATOR	44:5	44:5	7	*
LEAF_NODE	44:5	44:5	8	*
FIELD	44:6	44:6	7	vpp
LEAF_NODE	44:6	44:6	8	vpp
LEAF_NODE	44:9	44:9	4	)
STATEMENTS	44:11	47:1	4	
LEAF_NODE	44:11	44:11	5	{
STATEMENTS	45:2	46:2	5	
EXPR_STATEMENT	45:2	45:17	6	_TIFFfree ( * vpp ) ;
EXPR	45:2	45:2	7	_TIFFfree ( * vpp )
FUNCTION_CALL	45:2	45:16	8	_TIFFfree ( * vpp )
CALLEE	45:2	45:2	9	_TIFFfree
LEAF_NODE	45:2	45:2	10	_TIFFfree
LEAF_NODE	45:11	45:11	9	(
ARGUMENT	45:12	45:12	9	* vpp
UNARY_EXPR	45:12	45:13	10	* vpp
UNARY_OPERATOR	45:12	45:12	11	*
LEAF_NODE	45:12	45:12	12	*
FIELD	45:13	45:13	11	vpp
LEAF_NODE	45:13	45:13	12	vpp
LEAF_NODE	45:16	45:16	9	)
LEAF_NODE	45:17	45:17	7	;
EXPR_STATEMENT	46:2	46:10	6	* vpp = 0 ;
EXPR	46:2	46:2	7	* vpp = 0
ASSIGN	46:2	46:9	8	* vpp = 0
LVAL	46:2	46:2	9	* vpp
UNARY_EXPR	46:2	46:3	10	* vpp
UNARY_OPERATOR	46:2	46:2	11	*
LEAF_NODE	46:2	46:2	12	*
FIELD	46:3	46:3	11	vpp
LEAF_NODE	46:3	46:3	12	vpp
ASSIGN_OP	46:7	46:7	9	=
LEAF_NODE	46:7	46:7	10	=
RVAL	46:9	46:9	9	0
FIELD	46:9	46:9	10	0
LEAF_NODE	46:9	46:9	11	0
LEAF_NODE	46:10	46:10	7	;
LEAF_NODE	47:1	47:1	5	}
SELECTION	48:1	48:9	3	
KEYWORD	48:1	48:1	4	if
LEAF_NODE	48:1	48:1	5	if
LEAF_NODE	48:4	48:4	4	(
CONDITION	48:5	48:5	4	vp
EXPR	48:5	48:5	5	vp
FIELD	48:5	48:5	6	vp
LEAF_NODE	48:5	48:5	7	vp
LEAF_NODE	48:7	48:7	4	)
STATEMENTS	48:9	54:1	4	
LEAF_NODE	48:9	48:9	5	{
STATEMENTS	49:2	52:2	5	
SIMPLE_DECL	49:2	49:67	6	tmsize_t bytes ; bytes = _TIFFMultiplySSize ( NULL , nmemb , elem_size , NULL ) ;
VAR_DECL	49:2	49:11	7	tmsize_t bytes ; bytes = _TIFFMultiplySSize ( NULL , nmemb , elem_size , NULL )
TYPE	49:2	49:2	8	tmsize_t
TYPE_NAME	49:2	49:2	9	tmsize_t
LEAF_NODE	49:2	49:2	10	tmsize_t
NAME	49:11	49:11	8	bytes
LEAF_NODE	49:11	49:11	9	bytes
LEAF_NODE	0:0	0:0	8	;
INIT	49:11	49:11	8	bytes = _TIFFMultiplySSize ( NULL , nmemb , elem_size , NULL )
ASSIGN	49:11	49:19	9	bytes = _TIFFMultiplySSize ( NULL , nmemb , elem_size , NULL )
LVAL	49:11	49:11	10	bytes
NAME	49:11	49:11	11	bytes
LEAF_NODE	49:11	49:11	12	bytes
ASSIGN_OP	49:17	49:17	10	=
LEAF_NODE	49:17	49:17	11	=
RVAL	49:19	49:19	10	_TIFFMultiplySSize ( NULL , nmemb , elem_size , NULL )
FUNCTION_CALL	49:19	49:66	11	_TIFFMultiplySSize ( NULL , nmemb , elem_size , NULL )
CALLEE	49:19	49:19	12	_TIFFMultiplySSize
LEAF_NODE	49:19	49:19	13	_TIFFMultiplySSize
LEAF_NODE	49:37	49:37	12	(
ARGUMENT	49:38	49:38	12	NULL
FIELD	49:38	49:38	13	NULL
LEAF_NODE	49:38	49:38	14	NULL
LEAF_NODE	49:42	49:42	12	,
ARGUMENT	49:44	49:44	12	nmemb
FIELD	49:44	49:44	13	nmemb
LEAF_NODE	49:44	49:44	14	nmemb
LEAF_NODE	49:49	49:49	12	,
ARGUMENT	49:51	49:51	12	elem_size
FIELD	49:51	49:51	13	elem_size
LEAF_NODE	49:51	49:51	14	elem_size
LEAF_NODE	49:60	49:60	12	,
ARGUMENT	49:62	49:62	12	NULL
FIELD	49:62	49:62	13	NULL
LEAF_NODE	49:62	49:62	14	NULL
LEAF_NODE	49:66	49:66	12	)
LEAF_NODE	49:67	49:67	7	;
SELECTION	50:2	51:3	6	
KEYWORD	50:2	50:2	7	if
LEAF_NODE	50:2	50:2	8	if
LEAF_NODE	50:5	50:5	7	(
CONDITION	50:6	50:6	7	bytes
EXPR	50:6	50:6	8	bytes
FIELD	50:6	50:6	9	bytes
LEAF_NODE	50:6	50:6	10	bytes
LEAF_NODE	50:11	50:11	7	)
STATEMENTS	51:3	51:3	7	
EXPR_STATEMENT	51:3	51:36	8	* vpp = ( void * ) _TIFFmalloc ( bytes ) ;
EXPR	51:3	51:3	9	* vpp = ( void * ) _TIFFmalloc ( bytes )
ASSIGN	51:3	51:10	10	* vpp = ( void * ) _TIFFmalloc ( bytes )
LVAL	51:3	51:3	11	* vpp
UNARY_EXPR	51:3	51:4	12	* vpp
UNARY_OPERATOR	51:3	51:3	13	*
LEAF_NODE	51:3	51:3	14	*
FIELD	51:4	51:4	13	vpp
LEAF_NODE	51:4	51:4	14	vpp
ASSIGN_OP	51:8	51:8	11	=
LEAF_NODE	51:8	51:8	12	=
RVAL	51:10	51:18	11	( void * ) _TIFFmalloc ( bytes )
LEAF_NODE	51:10	51:10	12	(
TYPE_NAME	51:11	51:11	12	void
LEAF_NODE	51:11	51:11	13	void
LEAF_NODE	51:15	51:15	12	*
LEAF_NODE	51:16	51:16	12	)
FUNCTION_CALL	51:18	51:35	12	_TIFFmalloc ( bytes )
CALLEE	51:18	51:18	13	_TIFFmalloc
LEAF_NODE	51:18	51:18	14	_TIFFmalloc
LEAF_NODE	51:29	51:29	13	(
ARGUMENT	51:30	51:30	13	bytes
FIELD	51:30	51:30	14	bytes
LEAF_NODE	51:30	51:30	15	bytes
LEAF_NODE	51:35	51:35	13	)
LEAF_NODE	51:36	51:36	9	;
SELECTION	52:2	53:3	6	
KEYWORD	52:2	52:2	7	if
LEAF_NODE	52:2	52:2	8	if
LEAF_NODE	52:5	52:5	7	(
CONDITION	52:6	52:6	7	* vpp
EXPR	52:6	52:6	8	* vpp
UNARY_EXPR	52:6	52:7	9	* vpp
UNARY_OPERATOR	52:6	52:6	10	*
LEAF_NODE	52:6	52:6	11	*
FIELD	52:7	52:7	10	vpp
LEAF_NODE	52:7	52:7	11	vpp
LEAF_NODE	52:10	52:10	7	)
STATEMENTS	53:3	53:3	7	
EXPR_STATEMENT	53:3	53:31	8	_TIFFmemcpy ( * vpp , vp , bytes ) ;
EXPR	53:3	53:3	9	_TIFFmemcpy ( * vpp , vp , bytes )
FUNCTION_CALL	53:3	53:30	10	_TIFFmemcpy ( * vpp , vp , bytes )
CALLEE	53:3	53:3	11	_TIFFmemcpy
LEAF_NODE	53:3	53:3	12	_TIFFmemcpy
LEAF_NODE	53:14	53:14	11	(
ARGUMENT	53:15	53:15	11	* vpp
UNARY_EXPR	53:15	53:16	12	* vpp
UNARY_OPERATOR	53:15	53:15	13	*
LEAF_NODE	53:15	53:15	14	*
FIELD	53:16	53:16	13	vpp
LEAF_NODE	53:16	53:16	14	vpp
LEAF_NODE	53:19	53:19	11	,
ARGUMENT	53:21	53:21	11	vp
FIELD	53:21	53:21	12	vp
LEAF_NODE	53:21	53:21	13	vp
LEAF_NODE	53:23	53:23	11	,
ARGUMENT	53:25	53:25	11	bytes
FIELD	53:25	53:25	12	bytes
LEAF_NODE	53:25	53:25	13	bytes
LEAF_NODE	53:30	53:30	11	)
LEAF_NODE	53:31	53:31	9	;
LEAF_NODE	54:1	54:1	5	}
LEAF_NODE	55:0	55:0	2	}
FUNCTION_DEF	56:0	57:35	1	
RETURN_TYPE	56:0	56:0	2	void
TYPE_NAME	56:0	56:0	3	void
LEAF_NODE	56:0	56:0	4	void
FUNCTION_NAME	56:5	56:5	2	_TIFFsetByteArray
LEAF_NODE	56:5	56:5	3	_TIFFsetByteArray
PARAMETER_LIST	56:22	56:53	2	( void * * vpp , void * vp , uint32 n )
LEAF_NODE	56:22	56:22	3	(
PARAMETER_DECL	56:23	56:30	3	void * * vpp
TYPE	56:23	56:27	4	void * *
TYPE_NAME	56:23	56:23	5	void
LEAF_NODE	56:23	56:23	6	void
POINTER	56:27	56:28	5	* *
LEAF_NODE	56:27	56:27	6	*
LEAF_NODE	56:28	56:28	6	*
NAME	56:30	56:30	4	vpp
LEAF_NODE	56:30	56:30	5	vpp
LEAF_NODE	56:33	56:33	3	,
PARAMETER_DECL	56:35	56:41	3	void * vp
TYPE	56:35	56:39	4	void *
TYPE_NAME	56:35	56:35	5	void
LEAF_NODE	56:35	56:35	6	void
POINTER	56:39	56:39	5	*
LEAF_NODE	56:39	56:39	6	*
NAME	56:41	56:41	4	vp
LEAF_NODE	56:41	56:41	5	vp
LEAF_NODE	56:43	56:43	3	,
PARAMETER_DECL	56:45	56:52	3	uint32 n
TYPE	56:45	56:45	4	uint32
TYPE_NAME	56:45	56:45	5	uint32
LEAF_NODE	56:45	56:45	6	uint32
NAME	56:52	56:52	4	n
LEAF_NODE	56:52	56:52	5	n
LEAF_NODE	56:53	56:53	3	)
LEAF_NODE	57:4	57:4	2	{
STATEMENTS	57:6	57:6	2	
EXPR_STATEMENT	57:6	57:33	3	setByteArray ( vpp , vp , n , 1 ) ;
EXPR	57:6	57:6	4	setByteArray ( vpp , vp , n , 1 )
FUNCTION_CALL	57:6	57:32	5	setByteArray ( vpp , vp , n , 1 )
CALLEE	57:6	57:6	6	setByteArray
LEAF_NODE	57:6	57:6	7	setByteArray
LEAF_NODE	57:18	57:18	6	(
ARGUMENT	57:19	57:19	6	vpp
FIELD	57:19	57:19	7	vpp
LEAF_NODE	57:19	57:19	8	vpp
LEAF_NODE	57:22	57:22	6	,
ARGUMENT	57:24	57:24	6	vp
FIELD	57:24	57:24	7	vp
LEAF_NODE	57:24	57:24	8	vp
LEAF_NODE	57:26	57:26	6	,
ARGUMENT	57:28	57:28	6	n
FIELD	57:28	57:28	7	n
LEAF_NODE	57:28	57:28	8	n
LEAF_NODE	57:29	57:29	6	,
ARGUMENT	57:31	57:31	6	1
FIELD	57:31	57:31	7	1
LEAF_NODE	57:31	57:31	8	1
LEAF_NODE	57:32	57:32	6	)
LEAF_NODE	57:33	57:33	4	;
LEAF_NODE	57:35	57:35	2	}
FUNCTION_DEF	58:0	59:63	1	
RETURN_TYPE	58:0	58:0	2	void
TYPE_NAME	58:0	58:0	3	void
LEAF_NODE	58:0	58:0	4	void
FUNCTION_NAME	58:5	58:5	2	_TIFFsetString
LEAF_NODE	58:5	58:5	3	_TIFFsetString
PARAMETER_LIST	58:19	58:40	2	( char * * cpp , char * cp )
LEAF_NODE	58:19	58:19	3	(
PARAMETER_DECL	58:20	58:27	3	char * * cpp
TYPE	58:20	58:24	4	char * *
TYPE_NAME	58:20	58:20	5	char
LEAF_NODE	58:20	58:20	6	char
POINTER	58:24	58:25	5	* *
LEAF_NODE	58:24	58:24	6	*
LEAF_NODE	58:25	58:25	6	*
NAME	58:27	58:27	4	cpp
LEAF_NODE	58:27	58:27	5	cpp
LEAF_NODE	58:30	58:30	3	,
PARAMETER_DECL	58:32	58:38	3	char * cp
TYPE	58:32	58:36	4	char *
TYPE_NAME	58:32	58:32	5	char
LEAF_NODE	58:32	58:32	6	char
POINTER	58:36	58:36	5	*
LEAF_NODE	58:36	58:36	6	*
NAME	58:38	58:38	4	cp
LEAF_NODE	58:38	58:38	5	cp
LEAF_NODE	58:40	58:40	3	)
LEAF_NODE	59:4	59:4	2	{
STATEMENTS	59:6	59:6	2	
EXPR_STATEMENT	59:6	59:61	3	setByteArray ( ( void * * ) cpp , ( void * ) cp , strlen ( cp ) + 1 , 1 ) ;
EXPR	59:6	59:6	4	setByteArray ( ( void * * ) cpp , ( void * ) cp , strlen ( cp ) + 1 , 1 )
FUNCTION_CALL	59:6	59:60	5	setByteArray ( ( void * * ) cpp , ( void * ) cp , strlen ( cp ) + 1 , 1 )
CALLEE	59:6	59:6	6	setByteArray
LEAF_NODE	59:6	59:6	7	setByteArray
LEAF_NODE	59:18	59:18	6	(
ARGUMENT	59:19	59:28	6	( void * * ) cpp
LEAF_NODE	59:19	59:19	7	(
TYPE_NAME	59:20	59:20	7	void
LEAF_NODE	59:20	59:20	8	void
LEAF_NODE	59:24	59:24	7	*
LEAF_NODE	59:25	59:25	7	*
LEAF_NODE	59:26	59:26	7	)
FIELD	59:28	59:28	7	cpp
LEAF_NODE	59:28	59:28	8	cpp
LEAF_NODE	59:31	59:31	6	,
ARGUMENT	59:33	59:41	6	( void * ) cp
LEAF_NODE	59:33	59:33	7	(
TYPE_NAME	59:34	59:34	7	void
LEAF_NODE	59:34	59:34	8	void
LEAF_NODE	59:38	59:38	7	*
LEAF_NODE	59:39	59:39	7	)
FIELD	59:41	59:41	7	cp
LEAF_NODE	59:41	59:41	8	cp
LEAF_NODE	59:43	59:43	6	,
ARGUMENT	59:45	59:56	6	strlen ( cp ) + 1
FUNCTION_CALL	59:45	59:54	7	strlen ( cp )
CALLEE	59:45	59:45	8	strlen
LEAF_NODE	59:45	59:45	9	strlen
LEAF_NODE	59:51	59:51	8	(
ARGUMENT	59:52	59:52	8	cp
FIELD	59:52	59:52	9	cp
LEAF_NODE	59:52	59:52	10	cp
LEAF_NODE	59:54	59:54	8	)
LEAF_NODE	59:55	59:55	7	+
FIELD	59:56	59:56	7	1
LEAF_NODE	59:56	59:56	8	1
LEAF_NODE	59:57	59:57	6	,
ARGUMENT	59:59	59:59	6	1
FIELD	59:59	59:59	7	1
LEAF_NODE	59:59	59:59	8	1
LEAF_NODE	59:60	59:60	6	)
LEAF_NODE	59:61	59:61	4	;
LEAF_NODE	59:63	59:63	2	}
FUNCTION_DEF	60:0	61:52	1	
RETURN_TYPE	60:0	60:7	2	static void
LEAF_NODE	60:0	60:0	3	static
TYPE_NAME	60:7	60:7	3	void
LEAF_NODE	60:7	60:7	4	void
FUNCTION_NAME	60:12	60:12	2	_TIFFsetNString
LEAF_NODE	60:12	60:12	3	_TIFFsetNString
PARAMETER_LIST	60:27	60:58	2	( char * * cpp , char * cp , uint32 n )
LEAF_NODE	60:27	60:27	3	(
PARAMETER_DECL	60:28	60:35	3	char * * cpp
TYPE	60:28	60:32	4	char * *
TYPE_NAME	60:28	60:28	5	char
LEAF_NODE	60:28	60:28	6	char
POINTER	60:32	60:33	5	* *
LEAF_NODE	60:32	60:32	6	*
LEAF_NODE	60:33	60:33	6	*
NAME	60:35	60:35	4	cpp
LEAF_NODE	60:35	60:35	5	cpp
LEAF_NODE	60:38	60:38	3	,
PARAMETER_DECL	60:40	60:46	3	char * cp
TYPE	60:40	60:44	4	char *
TYPE_NAME	60:40	60:40	5	char
LEAF_NODE	60:40	60:40	6	char
POINTER	60:44	60:44	5	*
LEAF_NODE	60:44	60:44	6	*
NAME	60:46	60:46	4	cp
LEAF_NODE	60:46	60:46	5	cp
LEAF_NODE	60:48	60:48	3	,
PARAMETER_DECL	60:50	60:57	3	uint32 n
TYPE	60:50	60:50	4	uint32
TYPE_NAME	60:50	60:50	5	uint32
LEAF_NODE	60:50	60:50	6	uint32
NAME	60:57	60:57	4	n
LEAF_NODE	60:57	60:57	5	n
LEAF_NODE	60:58	60:58	3	)
LEAF_NODE	61:4	61:4	2	{
STATEMENTS	61:6	61:6	2	
EXPR_STATEMENT	61:6	61:50	3	setByteArray ( ( void * * ) cpp , ( void * ) cp , n , 1 ) ;
EXPR	61:6	61:6	4	setByteArray ( ( void * * ) cpp , ( void * ) cp , n , 1 )
FUNCTION_CALL	61:6	61:49	5	setByteArray ( ( void * * ) cpp , ( void * ) cp , n , 1 )
CALLEE	61:6	61:6	6	setByteArray
LEAF_NODE	61:6	61:6	7	setByteArray
LEAF_NODE	61:18	61:18	6	(
ARGUMENT	61:19	61:28	6	( void * * ) cpp
LEAF_NODE	61:19	61:19	7	(
TYPE_NAME	61:20	61:20	7	void
LEAF_NODE	61:20	61:20	8	void
LEAF_NODE	61:24	61:24	7	*
LEAF_NODE	61:25	61:25	7	*
LEAF_NODE	61:26	61:26	7	)
FIELD	61:28	61:28	7	cpp
LEAF_NODE	61:28	61:28	8	cpp
LEAF_NODE	61:31	61:31	6	,
ARGUMENT	61:33	61:41	6	( void * ) cp
LEAF_NODE	61:33	61:33	7	(
TYPE_NAME	61:34	61:34	7	void
LEAF_NODE	61:34	61:34	8	void
LEAF_NODE	61:38	61:38	7	*
LEAF_NODE	61:39	61:39	7	)
FIELD	61:41	61:41	7	cp
LEAF_NODE	61:41	61:41	8	cp
LEAF_NODE	61:43	61:43	6	,
ARGUMENT	61:45	61:45	6	n
FIELD	61:45	61:45	7	n
LEAF_NODE	61:45	61:45	8	n
LEAF_NODE	61:46	61:46	6	,
ARGUMENT	61:48	61:48	6	1
FIELD	61:48	61:48	7	1
LEAF_NODE	61:48	61:48	8	1
LEAF_NODE	61:49	61:49	6	)
LEAF_NODE	61:50	61:50	4	;
LEAF_NODE	61:52	61:52	2	}
FUNCTION_DEF	62:0	63:66	1	
RETURN_TYPE	62:0	62:0	2	void
TYPE_NAME	62:0	62:0	3	void
LEAF_NODE	62:0	62:0	4	void
FUNCTION_NAME	62:5	62:5	2	_TIFFsetShortArray
LEAF_NODE	62:5	62:5	3	_TIFFsetShortArray
PARAMETER_LIST	62:23	62:58	2	( uint16 * * wpp , uint16 * wp , uint32 n )
LEAF_NODE	62:23	62:23	3	(
PARAMETER_DECL	62:24	62:33	3	uint16 * * wpp
TYPE	62:24	62:30	4	uint16 * *
TYPE_NAME	62:24	62:24	5	uint16
LEAF_NODE	62:24	62:24	6	uint16
POINTER	62:30	62:31	5	* *
LEAF_NODE	62:30	62:30	6	*
LEAF_NODE	62:31	62:31	6	*
NAME	62:33	62:33	4	wpp
LEAF_NODE	62:33	62:33	5	wpp
LEAF_NODE	62:36	62:36	3	,
PARAMETER_DECL	62:38	62:46	3	uint16 * wp
TYPE	62:38	62:44	4	uint16 *
TYPE_NAME	62:38	62:38	5	uint16
LEAF_NODE	62:38	62:38	6	uint16
POINTER	62:44	62:44	5	*
LEAF_NODE	62:44	62:44	6	*
NAME	62:46	62:46	4	wp
LEAF_NODE	62:46	62:46	5	wp
LEAF_NODE	62:48	62:48	3	,
PARAMETER_DECL	62:50	62:57	3	uint32 n
TYPE	62:50	62:50	4	uint32
TYPE_NAME	62:50	62:50	5	uint32
LEAF_NODE	62:50	62:50	6	uint32
NAME	62:57	62:57	4	n
LEAF_NODE	62:57	62:57	5	n
LEAF_NODE	62:58	62:58	3	)
LEAF_NODE	63:4	63:4	2	{
STATEMENTS	63:6	63:6	2	
EXPR_STATEMENT	63:6	63:64	3	setByteArray ( ( void * * ) wpp , ( void * ) wp , n , sizeof ( uint16 ) ) ;
EXPR	63:6	63:6	4	setByteArray ( ( void * * ) wpp , ( void * ) wp , n , sizeof ( uint16 ) )
FUNCTION_CALL	63:6	63:63	5	setByteArray ( ( void * * ) wpp , ( void * ) wp , n , sizeof ( uint16 ) )
CALLEE	63:6	63:6	6	setByteArray
LEAF_NODE	63:6	63:6	7	setByteArray
LEAF_NODE	63:18	63:18	6	(
ARGUMENT	63:19	63:28	6	( void * * ) wpp
LEAF_NODE	63:19	63:19	7	(
TYPE_NAME	63:20	63:20	7	void
LEAF_NODE	63:20	63:20	8	void
LEAF_NODE	63:24	63:24	7	*
LEAF_NODE	63:25	63:25	7	*
LEAF_NODE	63:26	63:26	7	)
FIELD	63:28	63:28	7	wpp
LEAF_NODE	63:28	63:28	8	wpp
LEAF_NODE	63:31	63:31	6	,
ARGUMENT	63:33	63:41	6	( void * ) wp
LEAF_NODE	63:33	63:33	7	(
TYPE_NAME	63:34	63:34	7	void
LEAF_NODE	63:34	63:34	8	void
LEAF_NODE	63:38	63:38	7	*
LEAF_NODE	63:39	63:39	7	)
FIELD	63:41	63:41	7	wp
LEAF_NODE	63:41	63:41	8	wp
LEAF_NODE	63:43	63:43	6	,
ARGUMENT	63:45	63:45	6	n
FIELD	63:45	63:45	7	n
LEAF_NODE	63:45	63:45	8	n
LEAF_NODE	63:46	63:46	6	,
ARGUMENT	63:48	63:48	6	sizeof ( uint16 )
FUNCTION_CALL	63:48	63:62	7	sizeof ( uint16 )
CALLEE	63:48	63:48	8	sizeof
LEAF_NODE	63:48	63:48	9	sizeof
LEAF_NODE	63:55	63:55	8	(
ARGUMENT	63:56	63:56	8	uint16
FIELD	63:56	63:56	9	uint16
LEAF_NODE	63:56	63:56	10	uint16
LEAF_NODE	63:62	63:62	8	)
LEAF_NODE	63:63	63:63	6	)
LEAF_NODE	63:64	63:64	4	;
LEAF_NODE	63:66	63:66	2	}
FUNCTION_DEF	64:0	65:66	1	
RETURN_TYPE	64:0	64:0	2	void
TYPE_NAME	64:0	64:0	3	void
LEAF_NODE	64:0	64:0	4	void
FUNCTION_NAME	64:5	64:5	2	_TIFFsetLongArray
LEAF_NODE	64:5	64:5	3	_TIFFsetLongArray
PARAMETER_LIST	64:22	64:57	2	( uint32 * * lpp , uint32 * lp , uint32 n )
LEAF_NODE	64:22	64:22	3	(
PARAMETER_DECL	64:23	64:32	3	uint32 * * lpp
TYPE	64:23	64:29	4	uint32 * *
TYPE_NAME	64:23	64:23	5	uint32
LEAF_NODE	64:23	64:23	6	uint32
POINTER	64:29	64:30	5	* *
LEAF_NODE	64:29	64:29	6	*
LEAF_NODE	64:30	64:30	6	*
NAME	64:32	64:32	4	lpp
LEAF_NODE	64:32	64:32	5	lpp
LEAF_NODE	64:35	64:35	3	,
PARAMETER_DECL	64:37	64:45	3	uint32 * lp
TYPE	64:37	64:43	4	uint32 *
TYPE_NAME	64:37	64:37	5	uint32
LEAF_NODE	64:37	64:37	6	uint32
POINTER	64:43	64:43	5	*
LEAF_NODE	64:43	64:43	6	*
NAME	64:45	64:45	4	lp
LEAF_NODE	64:45	64:45	5	lp
LEAF_NODE	64:47	64:47	3	,
PARAMETER_DECL	64:49	64:56	3	uint32 n
TYPE	64:49	64:49	4	uint32
TYPE_NAME	64:49	64:49	5	uint32
LEAF_NODE	64:49	64:49	6	uint32
NAME	64:56	64:56	4	n
LEAF_NODE	64:56	64:56	5	n
LEAF_NODE	64:57	64:57	3	)
LEAF_NODE	65:4	65:4	2	{
STATEMENTS	65:6	65:6	2	
EXPR_STATEMENT	65:6	65:64	3	setByteArray ( ( void * * ) lpp , ( void * ) lp , n , sizeof ( uint32 ) ) ;
EXPR	65:6	65:6	4	setByteArray ( ( void * * ) lpp , ( void * ) lp , n , sizeof ( uint32 ) )
FUNCTION_CALL	65:6	65:63	5	setByteArray ( ( void * * ) lpp , ( void * ) lp , n , sizeof ( uint32 ) )
CALLEE	65:6	65:6	6	setByteArray
LEAF_NODE	65:6	65:6	7	setByteArray
LEAF_NODE	65:18	65:18	6	(
ARGUMENT	65:19	65:28	6	( void * * ) lpp
LEAF_NODE	65:19	65:19	7	(
TYPE_NAME	65:20	65:20	7	void
LEAF_NODE	65:20	65:20	8	void
LEAF_NODE	65:24	65:24	7	*
LEAF_NODE	65:25	65:25	7	*
LEAF_NODE	65:26	65:26	7	)
FIELD	65:28	65:28	7	lpp
LEAF_NODE	65:28	65:28	8	lpp
LEAF_NODE	65:31	65:31	6	,
ARGUMENT	65:33	65:41	6	( void * ) lp
LEAF_NODE	65:33	65:33	7	(
TYPE_NAME	65:34	65:34	7	void
LEAF_NODE	65:34	65:34	8	void
LEAF_NODE	65:38	65:38	7	*
LEAF_NODE	65:39	65:39	7	)
FIELD	65:41	65:41	7	lp
LEAF_NODE	65:41	65:41	8	lp
LEAF_NODE	65:43	65:43	6	,
ARGUMENT	65:45	65:45	6	n
FIELD	65:45	65:45	7	n
LEAF_NODE	65:45	65:45	8	n
LEAF_NODE	65:46	65:46	6	,
ARGUMENT	65:48	65:48	6	sizeof ( uint32 )
FUNCTION_CALL	65:48	65:62	7	sizeof ( uint32 )
CALLEE	65:48	65:48	8	sizeof
LEAF_NODE	65:48	65:48	9	sizeof
LEAF_NODE	65:55	65:55	8	(
ARGUMENT	65:56	65:56	8	uint32
FIELD	65:56	65:56	9	uint32
LEAF_NODE	65:56	65:56	10	uint32
LEAF_NODE	65:62	65:62	8	)
LEAF_NODE	65:63	65:63	6	)
LEAF_NODE	65:64	65:64	4	;
LEAF_NODE	65:66	65:66	2	}
FUNCTION_DEF	66:0	67:66	1	
RETURN_TYPE	66:0	66:7	2	static void
LEAF_NODE	66:0	66:0	3	static
TYPE_NAME	66:7	66:7	3	void
LEAF_NODE	66:7	66:7	4	void
FUNCTION_NAME	66:12	66:12	2	_TIFFsetLong8Array
LEAF_NODE	66:12	66:12	3	_TIFFsetLong8Array
PARAMETER_LIST	66:30	66:65	2	( uint64 * * lpp , uint64 * lp , uint32 n )
LEAF_NODE	66:30	66:30	3	(
PARAMETER_DECL	66:31	66:40	3	uint64 * * lpp
TYPE	66:31	66:37	4	uint64 * *
TYPE_NAME	66:31	66:31	5	uint64
LEAF_NODE	66:31	66:31	6	uint64
POINTER	66:37	66:38	5	* *
LEAF_NODE	66:37	66:37	6	*
LEAF_NODE	66:38	66:38	6	*
NAME	66:40	66:40	4	lpp
LEAF_NODE	66:40	66:40	5	lpp
LEAF_NODE	66:43	66:43	3	,
PARAMETER_DECL	66:45	66:53	3	uint64 * lp
TYPE	66:45	66:51	4	uint64 *
TYPE_NAME	66:45	66:45	5	uint64
LEAF_NODE	66:45	66:45	6	uint64
POINTER	66:51	66:51	5	*
LEAF_NODE	66:51	66:51	6	*
NAME	66:53	66:53	4	lp
LEAF_NODE	66:53	66:53	5	lp
LEAF_NODE	66:55	66:55	3	,
PARAMETER_DECL	66:57	66:64	3	uint32 n
TYPE	66:57	66:57	4	uint32
TYPE_NAME	66:57	66:57	5	uint32
LEAF_NODE	66:57	66:57	6	uint32
NAME	66:64	66:64	4	n
LEAF_NODE	66:64	66:64	5	n
LEAF_NODE	66:65	66:65	3	)
LEAF_NODE	67:4	67:4	2	{
STATEMENTS	67:6	67:6	2	
EXPR_STATEMENT	67:6	67:64	3	setByteArray ( ( void * * ) lpp , ( void * ) lp , n , sizeof ( uint64 ) ) ;
EXPR	67:6	67:6	4	setByteArray ( ( void * * ) lpp , ( void * ) lp , n , sizeof ( uint64 ) )
FUNCTION_CALL	67:6	67:63	5	setByteArray ( ( void * * ) lpp , ( void * ) lp , n , sizeof ( uint64 ) )
CALLEE	67:6	67:6	6	setByteArray
LEAF_NODE	67:6	67:6	7	setByteArray
LEAF_NODE	67:18	67:18	6	(
ARGUMENT	67:19	67:28	6	( void * * ) lpp
LEAF_NODE	67:19	67:19	7	(
TYPE_NAME	67:20	67:20	7	void
LEAF_NODE	67:20	67:20	8	void
LEAF_NODE	67:24	67:24	7	*
LEAF_NODE	67:25	67:25	7	*
LEAF_NODE	67:26	67:26	7	)
FIELD	67:28	67:28	7	lpp
LEAF_NODE	67:28	67:28	8	lpp
LEAF_NODE	67:31	67:31	6	,
ARGUMENT	67:33	67:41	6	( void * ) lp
LEAF_NODE	67:33	67:33	7	(
TYPE_NAME	67:34	67:34	7	void
LEAF_NODE	67:34	67:34	8	void
LEAF_NODE	67:38	67:38	7	*
LEAF_NODE	67:39	67:39	7	)
FIELD	67:41	67:41	7	lp
LEAF_NODE	67:41	67:41	8	lp
LEAF_NODE	67:43	67:43	6	,
ARGUMENT	67:45	67:45	6	n
FIELD	67:45	67:45	7	n
LEAF_NODE	67:45	67:45	8	n
LEAF_NODE	67:46	67:46	6	,
ARGUMENT	67:48	67:48	6	sizeof ( uint64 )
FUNCTION_CALL	67:48	67:62	7	sizeof ( uint64 )
CALLEE	67:48	67:48	8	sizeof
LEAF_NODE	67:48	67:48	9	sizeof
LEAF_NODE	67:55	67:55	8	(
ARGUMENT	67:56	67:56	8	uint64
FIELD	67:56	67:56	9	uint64
LEAF_NODE	67:56	67:56	10	uint64
LEAF_NODE	67:62	67:62	8	)
LEAF_NODE	67:63	67:63	6	)
LEAF_NODE	67:64	67:64	4	;
LEAF_NODE	67:66	67:66	2	}
FUNCTION_DEF	68:0	69:65	1	
RETURN_TYPE	68:0	68:0	2	void
TYPE_NAME	68:0	68:0	3	void
LEAF_NODE	68:0	68:0	4	void
FUNCTION_NAME	68:5	68:5	2	_TIFFsetFloatArray
LEAF_NODE	68:5	68:5	3	_TIFFsetFloatArray
PARAMETER_LIST	68:23	68:56	2	( float * * fpp , float * fp , uint32 n )
LEAF_NODE	68:23	68:23	3	(
PARAMETER_DECL	68:24	68:32	3	float * * fpp
TYPE	68:24	68:29	4	float * *
TYPE_NAME	68:24	68:24	5	float
LEAF_NODE	68:24	68:24	6	float
POINTER	68:29	68:30	5	* *
LEAF_NODE	68:29	68:29	6	*
LEAF_NODE	68:30	68:30	6	*
NAME	68:32	68:32	4	fpp
LEAF_NODE	68:32	68:32	5	fpp
LEAF_NODE	68:35	68:35	3	,
PARAMETER_DECL	68:37	68:44	3	float * fp
TYPE	68:37	68:42	4	float *
TYPE_NAME	68:37	68:37	5	float
LEAF_NODE	68:37	68:37	6	float
POINTER	68:42	68:42	5	*
LEAF_NODE	68:42	68:42	6	*
NAME	68:44	68:44	4	fp
LEAF_NODE	68:44	68:44	5	fp
LEAF_NODE	68:46	68:46	3	,
PARAMETER_DECL	68:48	68:55	3	uint32 n
TYPE	68:48	68:48	4	uint32
TYPE_NAME	68:48	68:48	5	uint32
LEAF_NODE	68:48	68:48	6	uint32
NAME	68:55	68:55	4	n
LEAF_NODE	68:55	68:55	5	n
LEAF_NODE	68:56	68:56	3	)
LEAF_NODE	69:4	69:4	2	{
STATEMENTS	69:6	69:6	2	
EXPR_STATEMENT	69:6	69:63	3	setByteArray ( ( void * * ) fpp , ( void * ) fp , n , sizeof ( float ) ) ;
EXPR	69:6	69:6	4	setByteArray ( ( void * * ) fpp , ( void * ) fp , n , sizeof ( float ) )
FUNCTION_CALL	69:6	69:62	5	setByteArray ( ( void * * ) fpp , ( void * ) fp , n , sizeof ( float ) )
CALLEE	69:6	69:6	6	setByteArray
LEAF_NODE	69:6	69:6	7	setByteArray
LEAF_NODE	69:18	69:18	6	(
ARGUMENT	69:19	69:28	6	( void * * ) fpp
LEAF_NODE	69:19	69:19	7	(
TYPE_NAME	69:20	69:20	7	void
LEAF_NODE	69:20	69:20	8	void
LEAF_NODE	69:24	69:24	7	*
LEAF_NODE	69:25	69:25	7	*
LEAF_NODE	69:26	69:26	7	)
FIELD	69:28	69:28	7	fpp
LEAF_NODE	69:28	69:28	8	fpp
LEAF_NODE	69:31	69:31	6	,
ARGUMENT	69:33	69:41	6	( void * ) fp
LEAF_NODE	69:33	69:33	7	(
TYPE_NAME	69:34	69:34	7	void
LEAF_NODE	69:34	69:34	8	void
LEAF_NODE	69:38	69:38	7	*
LEAF_NODE	69:39	69:39	7	)
FIELD	69:41	69:41	7	fp
LEAF_NODE	69:41	69:41	8	fp
LEAF_NODE	69:43	69:43	6	,
ARGUMENT	69:45	69:45	6	n
FIELD	69:45	69:45	7	n
LEAF_NODE	69:45	69:45	8	n
LEAF_NODE	69:46	69:46	6	,
ARGUMENT	69:48	69:48	6	sizeof ( float )
FUNCTION_CALL	69:48	69:61	7	sizeof ( float )
CALLEE	69:48	69:48	8	sizeof
LEAF_NODE	69:48	69:48	9	sizeof
LEAF_NODE	69:55	69:55	8	(
ARGUMENT	69:56	69:56	8	float
FIELD	69:56	69:56	9	float
LEAF_NODE	69:56	69:56	10	float
LEAF_NODE	69:61	69:61	8	)
LEAF_NODE	69:62	69:62	6	)
LEAF_NODE	69:63	69:63	4	;
LEAF_NODE	69:65	69:65	2	}
FUNCTION_DEF	70:0	71:66	1	
RETURN_TYPE	70:0	70:0	2	void
TYPE_NAME	70:0	70:0	3	void
LEAF_NODE	70:0	70:0	4	void
FUNCTION_NAME	70:5	70:5	2	_TIFFsetDoubleArray
LEAF_NODE	70:5	70:5	3	_TIFFsetDoubleArray
PARAMETER_LIST	70:24	70:59	2	( double * * dpp , double * dp , uint32 n )
LEAF_NODE	70:24	70:24	3	(
PARAMETER_DECL	70:25	70:34	3	double * * dpp
TYPE	70:25	70:31	4	double * *
TYPE_NAME	70:25	70:25	5	double
LEAF_NODE	70:25	70:25	6	double
POINTER	70:31	70:32	5	* *
LEAF_NODE	70:31	70:31	6	*
LEAF_NODE	70:32	70:32	6	*
NAME	70:34	70:34	4	dpp
LEAF_NODE	70:34	70:34	5	dpp
LEAF_NODE	70:37	70:37	3	,
PARAMETER_DECL	70:39	70:47	3	double * dp
TYPE	70:39	70:45	4	double *
TYPE_NAME	70:39	70:39	5	double
LEAF_NODE	70:39	70:39	6	double
POINTER	70:45	70:45	5	*
LEAF_NODE	70:45	70:45	6	*
NAME	70:47	70:47	4	dp
LEAF_NODE	70:47	70:47	5	dp
LEAF_NODE	70:49	70:49	3	,
PARAMETER_DECL	70:51	70:58	3	uint32 n
TYPE	70:51	70:51	4	uint32
TYPE_NAME	70:51	70:51	5	uint32
LEAF_NODE	70:51	70:51	6	uint32
NAME	70:58	70:58	4	n
LEAF_NODE	70:58	70:58	5	n
LEAF_NODE	70:59	70:59	3	)
LEAF_NODE	71:4	71:4	2	{
STATEMENTS	71:6	71:6	2	
EXPR_STATEMENT	71:6	71:64	3	setByteArray ( ( void * * ) dpp , ( void * ) dp , n , sizeof ( double ) ) ;
EXPR	71:6	71:6	4	setByteArray ( ( void * * ) dpp , ( void * ) dp , n , sizeof ( double ) )
FUNCTION_CALL	71:6	71:63	5	setByteArray ( ( void * * ) dpp , ( void * ) dp , n , sizeof ( double ) )
CALLEE	71:6	71:6	6	setByteArray
LEAF_NODE	71:6	71:6	7	setByteArray
LEAF_NODE	71:18	71:18	6	(
ARGUMENT	71:19	71:28	6	( void * * ) dpp
LEAF_NODE	71:19	71:19	7	(
TYPE_NAME	71:20	71:20	7	void
LEAF_NODE	71:20	71:20	8	void
LEAF_NODE	71:24	71:24	7	*
LEAF_NODE	71:25	71:25	7	*
LEAF_NODE	71:26	71:26	7	)
FIELD	71:28	71:28	7	dpp
LEAF_NODE	71:28	71:28	8	dpp
LEAF_NODE	71:31	71:31	6	,
ARGUMENT	71:33	71:41	6	( void * ) dp
LEAF_NODE	71:33	71:33	7	(
TYPE_NAME	71:34	71:34	7	void
LEAF_NODE	71:34	71:34	8	void
LEAF_NODE	71:38	71:38	7	*
LEAF_NODE	71:39	71:39	7	)
FIELD	71:41	71:41	7	dp
LEAF_NODE	71:41	71:41	8	dp
LEAF_NODE	71:43	71:43	6	,
ARGUMENT	71:45	71:45	6	n
FIELD	71:45	71:45	7	n
LEAF_NODE	71:45	71:45	8	n
LEAF_NODE	71:46	71:46	6	,
ARGUMENT	71:48	71:48	6	sizeof ( double )
FUNCTION_CALL	71:48	71:62	7	sizeof ( double )
CALLEE	71:48	71:48	8	sizeof
LEAF_NODE	71:48	71:48	9	sizeof
LEAF_NODE	71:55	71:55	8	(
ARGUMENT	71:56	71:56	8	double
FIELD	71:56	71:56	9	double
LEAF_NODE	71:56	71:56	10	double
LEAF_NODE	71:62	71:62	8	)
LEAF_NODE	71:63	71:63	6	)
LEAF_NODE	71:64	71:64	4	;
LEAF_NODE	71:66	71:66	2	}
FUNCTION_DEF	73:0	84:0	1	
RETURN_TYPE	73:0	73:7	2	static void
LEAF_NODE	73:0	73:0	3	static
TYPE_NAME	73:7	73:7	3	void
LEAF_NODE	73:7	73:7	4	void
FUNCTION_NAME	74:0	74:0	2	setDoubleArrayOneValue
LEAF_NODE	74:0	74:0	3	setDoubleArrayOneValue
PARAMETER_LIST	74:22	74:63	2	( double * * vpp , double value , size_t nmemb )
LEAF_NODE	74:22	74:22	3	(
PARAMETER_DECL	74:23	74:32	3	double * * vpp
TYPE	74:23	74:29	4	double * *
TYPE_NAME	74:23	74:23	5	double
LEAF_NODE	74:23	74:23	6	double
POINTER	74:29	74:30	5	* *
LEAF_NODE	74:29	74:29	6	*
LEAF_NODE	74:30	74:30	6	*
NAME	74:32	74:32	4	vpp
LEAF_NODE	74:32	74:32	5	vpp
LEAF_NODE	74:35	74:35	3	,
PARAMETER_DECL	74:37	74:44	3	double value
TYPE	74:37	74:37	4	double
TYPE_NAME	74:37	74:37	5	double
LEAF_NODE	74:37	74:37	6	double
NAME	74:44	74:44	4	value
LEAF_NODE	74:44	74:44	5	value
LEAF_NODE	74:49	74:49	3	,
PARAMETER_DECL	74:51	74:58	3	size_t nmemb
TYPE	74:51	74:51	4	size_t
TYPE_NAME	74:51	74:51	5	size_t
LEAF_NODE	74:51	74:51	6	size_t
NAME	74:58	74:58	4	nmemb
LEAF_NODE	74:58	74:58	5	nmemb
LEAF_NODE	74:63	74:63	3	)
LEAF_NODE	75:0	75:0	2	{
STATEMENTS	76:1	79:1	2	
SELECTION	76:1	77:2	3	
KEYWORD	76:1	76:1	4	if
LEAF_NODE	76:1	76:1	5	if
LEAF_NODE	76:4	76:4	4	(
CONDITION	76:5	76:5	4	* vpp
EXPR	76:5	76:5	5	* vpp
UNARY_EXPR	76:5	76:6	6	* vpp
UNARY_OPERATOR	76:5	76:5	7	*
LEAF_NODE	76:5	76:5	8	*
FIELD	76:6	76:6	7	vpp
LEAF_NODE	76:6	76:6	8	vpp
LEAF_NODE	76:9	76:9	4	)
STATEMENTS	77:2	77:2	4	
EXPR_STATEMENT	77:2	77:17	5	_TIFFfree ( * vpp ) ;
EXPR	77:2	77:2	6	_TIFFfree ( * vpp )
FUNCTION_CALL	77:2	77:16	7	_TIFFfree ( * vpp )
CALLEE	77:2	77:2	8	_TIFFfree
LEAF_NODE	77:2	77:2	9	_TIFFfree
LEAF_NODE	77:11	77:11	8	(
ARGUMENT	77:12	77:12	8	* vpp
UNARY_EXPR	77:12	77:13	9	* vpp
UNARY_OPERATOR	77:12	77:12	10	*
LEAF_NODE	77:12	77:12	11	*
FIELD	77:13	77:13	10	vpp
LEAF_NODE	77:13	77:13	11	vpp
LEAF_NODE	77:16	77:16	8	)
LEAF_NODE	77:17	77:17	6	;
EXPR_STATEMENT	78:1	78:41	3	* vpp = _TIFFmalloc ( nmemb * sizeof ( double ) ) ;
EXPR	78:1	78:1	4	* vpp = _TIFFmalloc ( nmemb * sizeof ( double ) )
ASSIGN	78:1	78:8	5	* vpp = _TIFFmalloc ( nmemb * sizeof ( double ) )
LVAL	78:1	78:1	6	* vpp
UNARY_EXPR	78:1	78:2	7	* vpp
UNARY_OPERATOR	78:1	78:1	8	*
LEAF_NODE	78:1	78:1	9	*
FIELD	78:2	78:2	8	vpp
LEAF_NODE	78:2	78:2	9	vpp
ASSIGN_OP	78:6	78:6	6	=
LEAF_NODE	78:6	78:6	7	=
RVAL	78:8	78:8	6	_TIFFmalloc ( nmemb * sizeof ( double ) )
FUNCTION_CALL	78:8	78:40	7	_TIFFmalloc ( nmemb * sizeof ( double ) )
CALLEE	78:8	78:8	8	_TIFFmalloc
LEAF_NODE	78:8	78:8	9	_TIFFmalloc
LEAF_NODE	78:19	78:19	8	(
ARGUMENT	78:20	78:26	8	nmemb * sizeof ( double )
FIELD	78:20	78:20	9	nmemb
LEAF_NODE	78:20	78:20	10	nmemb
LEAF_NODE	78:25	78:25	9	*
FUNCTION_CALL	78:26	78:39	9	sizeof ( double )
CALLEE	78:26	78:26	10	sizeof
LEAF_NODE	78:26	78:26	11	sizeof
LEAF_NODE	78:32	78:32	10	(
ARGUMENT	78:33	78:33	10	double
FIELD	78:33	78:33	11	double
LEAF_NODE	78:33	78:33	12	double
LEAF_NODE	78:39	78:39	10	)
LEAF_NODE	78:40	78:40	8	)
LEAF_NODE	78:41	78:41	4	;
SELECTION	79:1	80:1	3	
KEYWORD	79:1	79:1	4	if
LEAF_NODE	79:1	79:1	5	if
LEAF_NODE	79:4	79:4	4	(
CONDITION	79:5	79:5	4	* vpp
EXPR	79:5	79:5	5	* vpp
UNARY_EXPR	79:5	79:6	6	* vpp
UNARY_OPERATOR	79:5	79:5	7	*
LEAF_NODE	79:5	79:5	8	*
FIELD	79:6	79:6	7	vpp
LEAF_NODE	79:6	79:6	8	vpp
LEAF_NODE	79:9	79:9	4	)
STATEMENTS	80:1	83:1	4	
LEAF_NODE	80:1	80:1	5	{
STATEMENTS	81:2	81:2	5	
ITERATION	81:2	82:3	6	
KEYWORD	81:2	81:2	7	while
LEAF_NODE	81:2	81:2	8	while
LEAF_NODE	81:8	81:8	7	(
CONDITION	81:9	81:9	7	nmemb --
EXPR	81:9	81:9	8	nmemb --
FIELD	81:9	81:14	9	nmemb --
LEAF_NODE	81:9	81:9	10	nmemb
LEAF_NODE	81:14	81:14	10	--
LEAF_NODE	81:16	81:16	7	)
STATEMENTS	82:3	82:3	7	
EXPR_STATEMENT	82:3	82:33	8	( ( double * ) * vpp ) [ nmemb ] = value ;
EXPR	82:3	82:3	9	( ( double * ) * vpp ) [ nmemb ] = value
ASSIGN	82:3	82:28	10	( ( double * ) * vpp ) [ nmemb ] = value
LVAL	82:3	82:24	11	( ( double * ) * vpp ) [ nmemb ]
LEAF_NODE	82:3	82:3	12	(
LEAF_NODE	82:4	82:4	12	(
TYPE_NAME	82:5	82:5	12	double
LEAF_NODE	82:5	82:5	13	double
LEAF_NODE	82:11	82:11	12	*
LEAF_NODE	82:12	82:12	12	)
UNARY_EXPR	82:13	82:14	12	* vpp
UNARY_OPERATOR	82:13	82:13	13	*
LEAF_NODE	82:13	82:13	14	*
FIELD	82:14	82:14	13	vpp
LEAF_NODE	82:14	82:14	14	vpp
LEAF_NODE	82:17	82:17	12	)
LEAF_NODE	82:18	82:18	12	[
EXPR	82:19	82:19	12	nmemb
FIELD	82:19	82:19	13	nmemb
LEAF_NODE	82:19	82:19	14	nmemb
LEAF_NODE	82:24	82:24	12	]
ASSIGN_OP	82:26	82:26	11	=
LEAF_NODE	82:26	82:26	12	=
RVAL	82:28	82:28	11	value
FIELD	82:28	82:28	12	value
LEAF_NODE	82:28	82:28	13	value
LEAF_NODE	82:33	82:33	9	;
LEAF_NODE	83:1	83:1	5	}
LEAF_NODE	84:0	84:0	2	}
FUNCTION_DEF	89:0	137:0	1	
RETURN_TYPE	89:0	89:7	2	static int
LEAF_NODE	89:0	89:0	3	static
TYPE_NAME	89:7	89:7	3	int
LEAF_NODE	89:7	89:7	4	int
FUNCTION_NAME	90:0	90:0	2	setExtraSamples
LEAF_NODE	90:0	90:0	3	setExtraSamples
PARAMETER_LIST	90:15	90:48	2	( TIFF * tif , va_list ap , uint32 * v )
LEAF_NODE	90:15	90:15	3	(
PARAMETER_DECL	90:16	90:22	3	TIFF * tif
TYPE	90:16	90:20	4	TIFF *
TYPE_NAME	90:16	90:16	5	TIFF
LEAF_NODE	90:16	90:16	6	TIFF
POINTER	90:20	90:20	5	*
LEAF_NODE	90:20	90:20	6	*
NAME	90:22	90:22	4	tif
LEAF_NODE	90:22	90:22	5	tif
LEAF_NODE	90:25	90:25	3	,
PARAMETER_DECL	90:27	90:35	3	va_list ap
TYPE	90:27	90:27	4	va_list
TYPE_NAME	90:27	90:27	5	va_list
LEAF_NODE	90:27	90:27	6	va_list
NAME	90:35	90:35	4	ap
LEAF_NODE	90:35	90:35	5	ap
LEAF_NODE	90:37	90:37	3	,
PARAMETER_DECL	90:39	90:47	3	uint32 * v
TYPE	90:39	90:45	4	uint32 *
TYPE_NAME	90:39	90:39	5	uint32
LEAF_NODE	90:39	90:39	6	uint32
POINTER	90:45	90:45	5	*
LEAF_NODE	90:45	90:45	6	*
NAME	90:47	90:47	4	v
LEAF_NODE	90:47	90:47	5	v
LEAF_NODE	90:48	90:48	3	)
LEAF_NODE	91:0	91:0	2	{
STATEMENTS	95:1	134:1	2	
SIMPLE_DECL	95:1	95:11	3	uint16 * va ;
VAR_DECL	95:1	95:9	4	uint16 * va
TYPE	95:1	95:7	5	uint16 *
TYPE_NAME	95:1	95:1	6	uint16
LEAF_NODE	95:1	95:1	7	uint16
POINTER	95:7	95:7	6	*
LEAF_NODE	95:7	95:7	7	*
NAME	95:9	95:9	5	va
LEAF_NODE	95:9	95:9	6	va
LEAF_NODE	95:11	95:11	4	;
SIMPLE_DECL	96:1	96:9	3	uint32 i ;
VAR_DECL	96:1	96:8	4	uint32 i
TYPE	96:1	96:1	5	uint32
TYPE_NAME	96:1	96:1	6	uint32
LEAF_NODE	96:1	96:1	7	uint32
NAME	96:8	96:8	5	i
LEAF_NODE	96:8	96:8	6	i
LEAF_NODE	96:9	96:9	4	;
SIMPLE_DECL	97:8	97:41	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	97:8	97:23	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	97:8	97:21	5	TIFFDirectory *
TYPE_NAME	97:8	97:8	6	TIFFDirectory
LEAF_NODE	97:8	97:8	7	TIFFDirectory
POINTER	97:21	97:21	6	*
LEAF_NODE	97:21	97:21	7	*
NAME	97:23	97:23	5	td
LEAF_NODE	97:23	97:23	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	97:23	97:23	5	td = & tif -> tif_dir
ASSIGN	97:23	97:28	6	td = & tif -> tif_dir
LVAL	97:23	97:23	7	td
NAME	97:23	97:23	8	td
LEAF_NODE	97:23	97:23	9	td
ASSIGN_OP	97:26	97:26	7	=
LEAF_NODE	97:26	97:26	8	=
RVAL	97:28	97:28	7	& tif -> tif_dir
UNARY_EXPR	97:28	97:29	8	& tif -> tif_dir
UNARY_OPERATOR	97:28	97:28	9	&
LEAF_NODE	97:28	97:28	10	&
FIELD	97:29	97:34	9	tif -> tif_dir
LEAF_NODE	97:29	97:29	10	tif
LEAF_NODE	97:32	97:32	10	->
LEAF_NODE	97:34	97:34	10	tif_dir
LEAF_NODE	97:41	97:41	4	;
LEAF_NODE	98:8	98:8	3	static
SIMPLE_DECL	98:15	98:54	3	const char [ ] module ; module = "setExtraSamples" ;
VAR_DECL	98:15	98:26	4	const char [ ] module ; module = "setExtraSamples"
TYPE	98:15	98:32	5	const char [ ]
TYPE_NAME	98:15	98:21	6	const char
LEAF_NODE	98:15	98:15	7	const
LEAF_NODE	98:21	98:21	7	char
TYPE_SUFFIX	98:32	98:33	6	[ ]
LEAF_NODE	98:32	98:32	7	[
LEAF_NODE	98:33	98:33	7	]
NAME	98:26	98:26	5	module
LEAF_NODE	98:26	98:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	98:26	98:26	5	module = "setExtraSamples"
ASSIGN	98:26	98:37	6	module = "setExtraSamples"
LVAL	98:26	98:26	7	module
NAME	98:26	98:26	8	module
LEAF_NODE	98:26	98:26	9	module
ASSIGN_OP	98:35	98:35	7	=
LEAF_NODE	98:35	98:35	8	=
RVAL	98:37	98:37	7	"setExtraSamples"
FIELD	98:37	98:37	8	"setExtraSamples"
LEAF_NODE	98:37	98:37	9	"setExtraSamples"
LEAF_NODE	98:54	98:54	4	;
EXPR_STATEMENT	100:1	100:37	3	* v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	100:1	100:1	4	* v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	100:1	100:6	5	* v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	100:1	100:1	6	* v
UNARY_EXPR	100:1	100:2	7	* v
UNARY_OPERATOR	100:1	100:1	8	*
LEAF_NODE	100:1	100:1	9	*
FIELD	100:2	100:2	8	v
LEAF_NODE	100:2	100:2	9	v
ASSIGN_OP	100:4	100:4	6	=
LEAF_NODE	100:4	100:4	7	=
RVAL	100:6	100:15	6	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	100:6	100:6	7	(
TYPE_NAME	100:7	100:7	7	uint16
LEAF_NODE	100:7	100:7	8	uint16
LEAF_NODE	100:13	100:13	7	)
FUNCTION_CALL	100:15	100:36	7	va_arg ( ap , uint16_vap )
CALLEE	100:15	100:15	8	va_arg
LEAF_NODE	100:15	100:15	9	va_arg
LEAF_NODE	100:21	100:21	8	(
ARGUMENT	100:22	100:22	8	ap
FIELD	100:22	100:22	9	ap
LEAF_NODE	100:22	100:22	10	ap
LEAF_NODE	100:24	100:24	8	,
ARGUMENT	100:26	100:26	8	uint16_vap
FIELD	100:26	100:26	9	uint16_vap
LEAF_NODE	100:26	100:26	10	uint16_vap
LEAF_NODE	100:36	100:36	8	)
LEAF_NODE	100:37	100:37	4	;
SELECTION	101:1	102:2	3	
KEYWORD	101:1	101:1	4	if
LEAF_NODE	101:1	101:1	5	if
LEAF_NODE	101:4	101:4	4	(
CONDITION	101:5	101:5	4	( uint16 ) * v > td -> td_samplesperpixel
EXPR	101:5	101:19	5	( uint16 ) * v > td -> td_samplesperpixel
LEAF_NODE	101:5	101:5	6	(
TYPE_NAME	101:6	101:6	6	uint16
LEAF_NODE	101:6	101:6	7	uint16
LEAF_NODE	101:12	101:12	6	)
UNARY_EXPR	101:14	101:15	6	* v
UNARY_OPERATOR	101:14	101:14	7	*
LEAF_NODE	101:14	101:14	8	*
FIELD	101:15	101:15	7	v
LEAF_NODE	101:15	101:15	8	v
REL_OPERATOR	101:17	101:17	6	>
LEAF_NODE	101:17	101:17	7	>
FIELD	101:19	101:23	6	td -> td_samplesperpixel
LEAF_NODE	101:19	101:19	7	td
LEAF_NODE	101:21	101:21	7	->
LEAF_NODE	101:23	101:23	7	td_samplesperpixel
LEAF_NODE	101:41	101:41	4	)
STATEMENTS	102:2	102:2	4	
JUMP_STATEMENT	102:2	102:10	5	return 0 ;
KEYWORD	102:2	102:2	6	return
LEAF_NODE	102:2	102:2	7	return
DESTINATION	102:9	102:9	6	0
EXPR	102:9	102:9	7	0
FIELD	102:9	102:9	8	0
LEAF_NODE	102:9	102:9	9	0
LEAF_NODE	102:10	102:10	6	;
LEAF_NODE	103:1	103:1	3	va
LEAF_NODE	103:4	103:4	3	=
LEAF_NODE	103:6	103:6	3	va_arg
LEAF_NODE	103:12	103:12	3	(
LEAF_NODE	103:13	103:13	3	ap
LEAF_NODE	103:15	103:15	3	,
LEAF_NODE	103:17	103:17	3	uint16
LEAF_NODE	103:23	103:23	3	*
LEAF_NODE	103:24	103:24	3	)
LEAF_NODE	103:25	103:25	3	;
SELECTION	104:1	105:2	3	
KEYWORD	104:1	104:1	4	if
LEAF_NODE	104:1	104:1	5	if
LEAF_NODE	104:4	104:4	4	(
CONDITION	104:5	104:5	4	* v > 0 && va == NULL
EXPR	104:5	104:5	5	* v > 0 && va == NULL
AND	104:5	104:15	6	* v > 0 && va == NULL
EXPR	104:5	104:10	7	* v > 0
UNARY_EXPR	104:5	104:6	8	* v
UNARY_OPERATOR	104:5	104:5	9	*
LEAF_NODE	104:5	104:5	10	*
FIELD	104:6	104:6	9	v
LEAF_NODE	104:6	104:6	10	v
REL_OPERATOR	104:8	104:8	8	>
LEAF_NODE	104:8	104:8	9	>
FIELD	104:10	104:10	8	0
LEAF_NODE	104:10	104:10	9	0
LEAF_NODE	104:12	104:12	7	&&
EXPR	104:15	104:21	7	va == NULL
FIELD	104:15	104:15	8	va
LEAF_NODE	104:15	104:15	9	va
EQ_OPERATOR	104:18	104:18	8	==
LEAF_NODE	104:18	104:18	9	==
FIELD	104:21	104:21	8	NULL
LEAF_NODE	104:21	104:21	9	NULL
LEAF_NODE	104:25	104:25	4	)
STATEMENTS	105:2	105:2	4	
JUMP_STATEMENT	105:2	105:10	5	return 0 ;
KEYWORD	105:2	105:2	6	return
LEAF_NODE	105:2	105:2	7	return
DESTINATION	105:9	105:9	6	0
EXPR	105:9	105:9	7	0
FIELD	105:9	105:9	8	0
LEAF_NODE	105:9	105:9	9	0
LEAF_NODE	105:10	105:10	6	;
ITERATION	106:1	106:26	3	
KEYWORD	106:1	106:1	4	for
LEAF_NODE	106:1	106:1	5	for
LEAF_NODE	106:5	106:5	4	(
FOR_INIT	106:6	106:11	4	i = 0 ;
EXPR	106:6	106:6	5	i = 0
ASSIGN	106:6	106:10	6	i = 0
LVAL	106:6	106:6	7	i
FIELD	106:6	106:6	8	i
LEAF_NODE	106:6	106:6	9	i
ASSIGN_OP	106:8	106:8	7	=
LEAF_NODE	106:8	106:8	8	=
RVAL	106:10	106:10	7	0
FIELD	106:10	106:10	8	0
LEAF_NODE	106:10	106:10	9	0
LEAF_NODE	106:11	106:11	5	;
CONDITION	106:13	106:13	4	i < * v
EXPR	106:13	106:17	5	i < * v
FIELD	106:13	106:13	6	i
LEAF_NODE	106:13	106:13	7	i
REL_OPERATOR	106:15	106:15	6	<
LEAF_NODE	106:15	106:15	7	<
UNARY_EXPR	106:17	106:18	6	* v
UNARY_OPERATOR	106:17	106:17	7	*
LEAF_NODE	106:17	106:17	8	*
FIELD	106:18	106:18	7	v
LEAF_NODE	106:18	106:18	8	v
LEAF_NODE	106:19	106:19	4	;
FOR_EXPR	106:21	106:21	4	i ++
EXPR	106:21	106:21	5	i ++
FIELD	106:21	106:22	6	i ++
LEAF_NODE	106:21	106:21	7	i
LEAF_NODE	106:22	106:22	7	++
LEAF_NODE	106:24	106:24	4	)
STATEMENTS	106:26	119:1	4	
LEAF_NODE	106:26	106:26	5	{
STATEMENTS	107:2	107:2	5	
SELECTION	107:2	107:38	6	
KEYWORD	107:2	107:2	7	if
LEAF_NODE	107:2	107:2	8	if
LEAF_NODE	107:5	107:5	7	(
CONDITION	107:6	107:6	7	va [ i ] > EXTRASAMPLE_UNASSALPHA
EXPR	107:6	107:14	8	va [ i ] > EXTRASAMPLE_UNASSALPHA
FIELD	107:6	107:10	9	va [ i ]
LEAF_NODE	107:6	107:6	10	va
LEAF_NODE	107:8	107:8	10	[
EXPR	107:9	107:9	10	i
FIELD	107:9	107:9	11	i
LEAF_NODE	107:9	107:9	12	i
LEAF_NODE	107:10	107:10	10	]
REL_OPERATOR	107:12	107:12	9	>
LEAF_NODE	107:12	107:12	10	>
FIELD	107:14	107:14	9	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	107:14	107:14	10	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	107:36	107:36	7	)
STATEMENTS	107:38	118:2	7	
LEAF_NODE	107:38	107:38	8	{
STATEMENTS	114:3	116:3	8	
SELECTION	114:3	115:4	9	
KEYWORD	114:3	114:3	10	if
LEAF_NODE	114:3	114:3	11	if
LEAF_NODE	114:6	114:6	10	(
CONDITION	114:7	114:7	10	va [ i ] == EXTRASAMPLE_COREL_UNASSALPHA
EXPR	114:7	114:16	11	va [ i ] == EXTRASAMPLE_COREL_UNASSALPHA
FIELD	114:7	114:11	12	va [ i ]
LEAF_NODE	114:7	114:7	13	va
LEAF_NODE	114:9	114:9	13	[
EXPR	114:10	114:10	13	i
FIELD	114:10	114:10	14	i
LEAF_NODE	114:10	114:10	15	i
LEAF_NODE	114:11	114:11	13	]
EQ_OPERATOR	114:13	114:13	12	==
LEAF_NODE	114:13	114:13	13	==
FIELD	114:16	114:16	12	EXTRASAMPLE_COREL_UNASSALPHA
LEAF_NODE	114:16	114:16	13	EXTRASAMPLE_COREL_UNASSALPHA
LEAF_NODE	114:44	114:44	10	)
STATEMENTS	115:4	115:4	10	
EXPR_STATEMENT	115:4	115:34	11	va [ i ] = EXTRASAMPLE_UNASSALPHA ;
EXPR	115:4	115:4	12	va [ i ] = EXTRASAMPLE_UNASSALPHA
ASSIGN	115:4	115:12	13	va [ i ] = EXTRASAMPLE_UNASSALPHA
LVAL	115:4	115:4	14	va [ i ]
FIELD	115:4	115:8	15	va [ i ]
LEAF_NODE	115:4	115:4	16	va
LEAF_NODE	115:6	115:6	16	[
EXPR	115:7	115:7	16	i
FIELD	115:7	115:7	17	i
LEAF_NODE	115:7	115:7	18	i
LEAF_NODE	115:8	115:8	16	]
ASSIGN_OP	115:10	115:10	14	=
LEAF_NODE	115:10	115:10	15	=
RVAL	115:12	115:12	14	EXTRASAMPLE_UNASSALPHA
FIELD	115:12	115:12	15	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	115:12	115:12	16	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	115:34	115:34	12	;
SELECTION	116:3	117:4	9	
KEYWORD	116:3	116:3	10	else
LEAF_NODE	116:3	116:3	11	else
STATEMENTS	117:4	117:4	10	
JUMP_STATEMENT	117:4	117:12	11	return 0 ;
KEYWORD	117:4	117:4	12	return
LEAF_NODE	117:4	117:4	13	return
DESTINATION	117:11	117:11	12	0
EXPR	117:11	117:11	13	0
FIELD	117:11	117:11	14	0
LEAF_NODE	117:11	117:11	15	0
LEAF_NODE	117:12	117:12	12	;
LEAF_NODE	118:2	118:2	8	}
LEAF_NODE	119:1	119:1	5	}
SELECTION	121:8	123:8	3	
KEYWORD	121:8	121:8	4	if
LEAF_NODE	121:8	121:8	5	if
LEAF_NODE	121:11	121:11	4	(
CONDITION	121:13	121:13	4	td -> td_transferfunction [ 0 ] != NULL && ( td -> td_samplesperpixel - * v > 1 ) && ! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
EXPR	121:13	121:13	5	td -> td_transferfunction [ 0 ] != NULL && ( td -> td_samplesperpixel - * v > 1 ) && ! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
AND	121:13	121:51	6	td -> td_transferfunction [ 0 ] != NULL && ( td -> td_samplesperpixel - * v > 1 ) && ! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
EXPR	121:13	121:43	7	td -> td_transferfunction [ 0 ] != NULL
FIELD	121:13	121:38	8	td -> td_transferfunction [ 0 ]
LEAF_NODE	121:13	121:13	9	td
LEAF_NODE	121:15	121:15	9	->
LEAF_NODE	121:17	121:17	9	td_transferfunction
LEAF_NODE	121:36	121:36	9	[
EXPR	121:37	121:37	9	0
FIELD	121:37	121:37	10	0
LEAF_NODE	121:37	121:37	11	0
LEAF_NODE	121:38	121:38	9	]
EQ_OPERATOR	121:40	121:40	8	!=
LEAF_NODE	121:40	121:40	9	!=
FIELD	121:43	121:43	8	NULL
LEAF_NODE	121:43	121:43	9	NULL
LEAF_NODE	121:48	121:48	7	&&
EXPR	121:51	121:51	7	( td -> td_samplesperpixel - * v > 1 ) && ! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
AND	121:51	122:16	8	( td -> td_samplesperpixel - * v > 1 ) && ! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
EXPR	121:51	121:83	9	( td -> td_samplesperpixel - * v > 1 )
LEAF_NODE	121:51	121:51	10	(
FIELD	121:52	121:56	10	td -> td_samplesperpixel
LEAF_NODE	121:52	121:52	11	td
LEAF_NODE	121:54	121:54	11	->
LEAF_NODE	121:56	121:56	11	td_samplesperpixel
LEAF_NODE	121:75	121:75	10	-
UNARY_EXPR	121:77	121:78	10	* v
UNARY_OPERATOR	121:77	121:77	11	*
LEAF_NODE	121:77	121:77	12	*
FIELD	121:78	121:78	11	v
LEAF_NODE	121:78	121:78	12	v
REL_OPERATOR	121:80	121:80	10	>
LEAF_NODE	121:80	121:80	11	>
FIELD	121:82	121:82	10	1
LEAF_NODE	121:82	121:82	11	1
LEAF_NODE	121:83	121:83	10	)
LEAF_NODE	121:85	121:85	9	&&
EXPR	122:16	122:16	9	! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
UNARY_EXPR	122:16	122:66	10	! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
UNARY_OPERATOR	122:16	122:16	11	!
LEAF_NODE	122:16	122:16	12	!
LEAF_NODE	122:17	122:17	11	(
FIELD	122:18	122:22	11	td -> td_samplesperpixel
LEAF_NODE	122:18	122:18	12	td
LEAF_NODE	122:20	122:20	12	->
LEAF_NODE	122:22	122:22	12	td_samplesperpixel
LEAF_NODE	122:41	122:41	11	-
FIELD	122:43	122:47	11	td -> td_extrasamples
LEAF_NODE	122:43	122:43	12	td
LEAF_NODE	122:45	122:45	12	->
LEAF_NODE	122:47	122:47	12	td_extrasamples
REL_OPERATOR	122:63	122:63	11	>
LEAF_NODE	122:63	122:63	12	>
FIELD	122:65	122:65	11	1
LEAF_NODE	122:65	122:65	12	1
LEAF_NODE	122:66	122:66	11	)
LEAF_NODE	122:67	122:67	4	)
STATEMENTS	123:8	130:8	4	
LEAF_NODE	123:8	123:8	5	{
STATEMENTS	124:16	129:16	5	
LEAF_NODE	124:16	124:16	6	TIFFWarningExt
LEAF_NODE	124:30	124:30	6	(
LEAF_NODE	124:31	124:31	6	tif
LEAF_NODE	124:34	124:34	6	->
LEAF_NODE	124:36	124:36	6	tif_clientdata
LEAF_NODE	124:50	124:50	6	,
LEAF_NODE	124:51	124:51	6	module
LEAF_NODE	124:57	124:57	6	,
LEAF_NODE	125:20	125:20	6	"ExtraSamples tag value is changing, "
LEAF_NODE	126:20	126:20	6	"but TransferFunction was read with a different value. Cancelling it"
LEAF_NODE	126:89	126:89	6	)
LEAF_NODE	126:90	126:90	6	;
EXPR_STATEMENT	127:16	127:59	6	TIFFClrFieldBit ( tif , FIELD_TRANSFERFUNCTION ) ;
EXPR	127:16	127:16	7	TIFFClrFieldBit ( tif , FIELD_TRANSFERFUNCTION )
FUNCTION_CALL	127:16	127:58	8	TIFFClrFieldBit ( tif , FIELD_TRANSFERFUNCTION )
CALLEE	127:16	127:16	9	TIFFClrFieldBit
LEAF_NODE	127:16	127:16	10	TIFFClrFieldBit
LEAF_NODE	127:31	127:31	9	(
ARGUMENT	127:32	127:32	9	tif
FIELD	127:32	127:32	10	tif
LEAF_NODE	127:32	127:32	11	tif
LEAF_NODE	127:35	127:35	9	,
ARGUMENT	127:36	127:36	9	FIELD_TRANSFERFUNCTION
FIELD	127:36	127:36	10	FIELD_TRANSFERFUNCTION
LEAF_NODE	127:36	127:36	11	FIELD_TRANSFERFUNCTION
LEAF_NODE	127:58	127:58	9	)
LEAF_NODE	127:59	127:59	7	;
EXPR_STATEMENT	128:16	128:53	6	_TIFFfree ( td -> td_transferfunction [ 0 ] ) ;
EXPR	128:16	128:16	7	_TIFFfree ( td -> td_transferfunction [ 0 ] )
FUNCTION_CALL	128:16	128:52	8	_TIFFfree ( td -> td_transferfunction [ 0 ] )
CALLEE	128:16	128:16	9	_TIFFfree
LEAF_NODE	128:16	128:16	10	_TIFFfree
LEAF_NODE	128:25	128:25	9	(
ARGUMENT	128:26	128:26	9	td -> td_transferfunction [ 0 ]
FIELD	128:26	128:51	10	td -> td_transferfunction [ 0 ]
LEAF_NODE	128:26	128:26	11	td
LEAF_NODE	128:28	128:28	11	->
LEAF_NODE	128:30	128:30	11	td_transferfunction
LEAF_NODE	128:49	128:49	11	[
EXPR	128:50	128:50	11	0
FIELD	128:50	128:50	12	0
LEAF_NODE	128:50	128:50	13	0
LEAF_NODE	128:51	128:51	11	]
LEAF_NODE	128:52	128:52	9	)
LEAF_NODE	128:53	128:53	7	;
EXPR_STATEMENT	129:16	129:49	6	td -> td_transferfunction [ 0 ] = NULL ;
EXPR	129:16	129:16	7	td -> td_transferfunction [ 0 ] = NULL
ASSIGN	129:16	129:45	8	td -> td_transferfunction [ 0 ] = NULL
LVAL	129:16	129:16	9	td -> td_transferfunction [ 0 ]
FIELD	129:16	129:41	10	td -> td_transferfunction [ 0 ]
LEAF_NODE	129:16	129:16	11	td
LEAF_NODE	129:18	129:18	11	->
LEAF_NODE	129:20	129:20	11	td_transferfunction
LEAF_NODE	129:39	129:39	11	[
EXPR	129:40	129:40	11	0
FIELD	129:40	129:40	12	0
LEAF_NODE	129:40	129:40	13	0
LEAF_NODE	129:41	129:41	11	]
ASSIGN_OP	129:43	129:43	9	=
LEAF_NODE	129:43	129:43	10	=
RVAL	129:45	129:45	9	NULL
FIELD	129:45	129:45	10	NULL
LEAF_NODE	129:45	129:45	11	NULL
LEAF_NODE	129:49	129:49	7	;
LEAF_NODE	130:8	130:8	5	}
EXPR_STATEMENT	132:1	132:34	3	td -> td_extrasamples = ( uint16 ) * v ;
EXPR	132:1	132:1	4	td -> td_extrasamples = ( uint16 ) * v
ASSIGN	132:1	132:23	5	td -> td_extrasamples = ( uint16 ) * v
LVAL	132:1	132:1	6	td -> td_extrasamples
FIELD	132:1	132:5	7	td -> td_extrasamples
LEAF_NODE	132:1	132:1	8	td
LEAF_NODE	132:3	132:3	8	->
LEAF_NODE	132:5	132:5	8	td_extrasamples
ASSIGN_OP	132:21	132:21	6	=
LEAF_NODE	132:21	132:21	7	=
RVAL	132:23	132:32	6	( uint16 ) * v
LEAF_NODE	132:23	132:23	7	(
TYPE_NAME	132:24	132:24	7	uint16
LEAF_NODE	132:24	132:24	8	uint16
LEAF_NODE	132:30	132:30	7	)
UNARY_EXPR	132:32	132:33	7	* v
UNARY_OPERATOR	132:32	132:32	8	*
LEAF_NODE	132:32	132:32	9	*
FIELD	132:33	132:33	8	v
LEAF_NODE	132:33	132:33	9	v
LEAF_NODE	132:34	132:34	4	;
EXPR_STATEMENT	133:1	133:64	3	_TIFFsetShortArray ( & td -> td_sampleinfo , va , td -> td_extrasamples ) ;
EXPR	133:1	133:1	4	_TIFFsetShortArray ( & td -> td_sampleinfo , va , td -> td_extrasamples )
FUNCTION_CALL	133:1	133:63	5	_TIFFsetShortArray ( & td -> td_sampleinfo , va , td -> td_extrasamples )
CALLEE	133:1	133:1	6	_TIFFsetShortArray
LEAF_NODE	133:1	133:1	7	_TIFFsetShortArray
LEAF_NODE	133:19	133:19	6	(
ARGUMENT	133:20	133:20	6	& td -> td_sampleinfo
UNARY_EXPR	133:20	133:21	7	& td -> td_sampleinfo
UNARY_OPERATOR	133:20	133:20	8	&
LEAF_NODE	133:20	133:20	9	&
FIELD	133:21	133:25	8	td -> td_sampleinfo
LEAF_NODE	133:21	133:21	9	td
LEAF_NODE	133:23	133:23	9	->
LEAF_NODE	133:25	133:25	9	td_sampleinfo
LEAF_NODE	133:38	133:38	6	,
ARGUMENT	133:40	133:40	6	va
FIELD	133:40	133:40	7	va
LEAF_NODE	133:40	133:40	8	va
LEAF_NODE	133:42	133:42	6	,
ARGUMENT	133:44	133:44	6	td -> td_extrasamples
FIELD	133:44	133:48	7	td -> td_extrasamples
LEAF_NODE	133:44	133:44	8	td
LEAF_NODE	133:46	133:46	8	->
LEAF_NODE	133:48	133:48	8	td_extrasamples
LEAF_NODE	133:63	133:63	6	)
LEAF_NODE	133:64	133:64	4	;
JUMP_STATEMENT	134:1	134:9	3	return 1 ;
KEYWORD	134:1	134:1	4	return
LEAF_NODE	134:1	134:1	5	return
DESTINATION	134:8	134:8	4	1
EXPR	134:8	134:8	5	1
FIELD	134:8	134:8	6	1
LEAF_NODE	134:8	134:8	7	1
LEAF_NODE	134:9	134:9	4	;
LEAF_NODE	137:0	137:0	2	}
FUNCTION_DEF	143:0	167:0	1	
RETURN_TYPE	143:0	143:7	2	static uint32
LEAF_NODE	143:0	143:0	3	static
TYPE_NAME	143:7	143:7	3	uint32
LEAF_NODE	143:7	143:7	4	uint32
FUNCTION_NAME	144:0	144:0	2	checkInkNamesString
LEAF_NODE	144:0	144:0	3	checkInkNamesString
PARAMETER_LIST	144:19	144:57	2	( TIFF * tif , uint32 slen , const char * s )
LEAF_NODE	144:19	144:19	3	(
PARAMETER_DECL	144:20	144:26	3	TIFF * tif
TYPE	144:20	144:24	4	TIFF *
TYPE_NAME	144:20	144:20	5	TIFF
LEAF_NODE	144:20	144:20	6	TIFF
POINTER	144:24	144:24	5	*
LEAF_NODE	144:24	144:24	6	*
NAME	144:26	144:26	4	tif
LEAF_NODE	144:26	144:26	5	tif
LEAF_NODE	144:29	144:29	3	,
PARAMETER_DECL	144:31	144:38	3	uint32 slen
TYPE	144:31	144:31	4	uint32
TYPE_NAME	144:31	144:31	5	uint32
LEAF_NODE	144:31	144:31	6	uint32
NAME	144:38	144:38	4	slen
LEAF_NODE	144:38	144:38	5	slen
LEAF_NODE	144:42	144:42	3	,
PARAMETER_DECL	144:44	144:56	3	const char * s
TYPE	144:44	144:54	4	const char *
TYPE_NAME	144:44	144:50	5	const char
LEAF_NODE	144:44	144:44	6	const
LEAF_NODE	144:50	144:50	6	char
POINTER	144:54	144:54	5	*
LEAF_NODE	144:54	144:54	6	*
NAME	144:56	144:56	4	s
LEAF_NODE	144:56	144:56	5	s
LEAF_NODE	144:57	144:57	3	)
LEAF_NODE	145:0	145:0	2	{
STATEMENTS	146:1	166:1	2	
SIMPLE_DECL	146:1	146:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	146:1	146:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	146:1	146:14	5	TIFFDirectory *
TYPE_NAME	146:1	146:1	6	TIFFDirectory
LEAF_NODE	146:1	146:1	7	TIFFDirectory
POINTER	146:14	146:14	6	*
LEAF_NODE	146:14	146:14	7	*
NAME	146:16	146:16	5	td
LEAF_NODE	146:16	146:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	146:16	146:16	5	td = & tif -> tif_dir
ASSIGN	146:16	146:21	6	td = & tif -> tif_dir
LVAL	146:16	146:16	7	td
NAME	146:16	146:16	8	td
LEAF_NODE	146:16	146:16	9	td
ASSIGN_OP	146:19	146:19	7	=
LEAF_NODE	146:19	146:19	8	=
RVAL	146:21	146:21	7	& tif -> tif_dir
UNARY_EXPR	146:21	146:22	8	& tif -> tif_dir
UNARY_OPERATOR	146:21	146:21	9	&
LEAF_NODE	146:21	146:21	10	&
FIELD	146:22	146:27	9	tif -> tif_dir
LEAF_NODE	146:22	146:22	10	tif
LEAF_NODE	146:25	146:25	10	->
LEAF_NODE	146:27	146:27	10	tif_dir
LEAF_NODE	146:34	146:34	4	;
SIMPLE_DECL	147:1	147:34	3	uint16 i ; i = td -> td_samplesperpixel ;
VAR_DECL	147:1	147:8	4	uint16 i ; i = td -> td_samplesperpixel
TYPE	147:1	147:1	5	uint16
TYPE_NAME	147:1	147:1	6	uint16
LEAF_NODE	147:1	147:1	7	uint16
NAME	147:8	147:8	5	i
LEAF_NODE	147:8	147:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	147:8	147:8	5	i = td -> td_samplesperpixel
ASSIGN	147:8	147:12	6	i = td -> td_samplesperpixel
LVAL	147:8	147:8	7	i
NAME	147:8	147:8	8	i
LEAF_NODE	147:8	147:8	9	i
ASSIGN_OP	147:10	147:10	7	=
LEAF_NODE	147:10	147:10	8	=
RVAL	147:12	147:12	7	td -> td_samplesperpixel
FIELD	147:12	147:16	8	td -> td_samplesperpixel
LEAF_NODE	147:12	147:12	9	td
LEAF_NODE	147:14	147:14	9	->
LEAF_NODE	147:16	147:16	9	td_samplesperpixel
LEAF_NODE	147:34	147:34	4	;
SELECTION	149:1	149:15	3	
KEYWORD	149:1	149:1	4	if
LEAF_NODE	149:1	149:1	5	if
LEAF_NODE	149:4	149:4	4	(
CONDITION	149:5	149:5	4	slen > 0
EXPR	149:5	149:12	5	slen > 0
FIELD	149:5	149:5	6	slen
LEAF_NODE	149:5	149:5	7	slen
REL_OPERATOR	149:10	149:10	6	>
LEAF_NODE	149:10	149:10	7	>
FIELD	149:12	149:12	6	0
LEAF_NODE	149:12	149:12	7	0
LEAF_NODE	149:13	149:13	4	)
STATEMENTS	149:15	159:1	4	
LEAF_NODE	149:15	149:15	5	{
STATEMENTS	150:2	158:2	5	
SIMPLE_DECL	150:2	150:25	6	const char * ep ; ep = s + slen ;
VAR_DECL	150:2	150:14	7	const char * ep ; ep = s + slen
TYPE	150:2	150:12	8	const char *
TYPE_NAME	150:2	150:8	9	const char
LEAF_NODE	150:2	150:2	10	const
LEAF_NODE	150:8	150:8	10	char
POINTER	150:12	150:12	9	*
LEAF_NODE	150:12	150:12	10	*
NAME	150:14	150:14	8	ep
LEAF_NODE	150:14	150:14	9	ep
LEAF_NODE	0:0	0:0	8	;
INIT	150:14	150:14	8	ep = s + slen
ASSIGN	150:14	150:19	9	ep = s + slen
LVAL	150:14	150:14	10	ep
NAME	150:14	150:14	11	ep
LEAF_NODE	150:14	150:14	12	ep
ASSIGN_OP	150:17	150:17	10	=
LEAF_NODE	150:17	150:17	11	=
RVAL	150:19	150:21	10	s + slen
FIELD	150:19	150:19	11	s
LEAF_NODE	150:19	150:19	12	s
LEAF_NODE	150:20	150:20	11	+
FIELD	150:21	150:21	11	slen
LEAF_NODE	150:21	150:21	12	slen
LEAF_NODE	150:25	150:25	7	;
SIMPLE_DECL	151:2	151:20	6	const char * cp ; cp = s ;
VAR_DECL	151:2	151:14	7	const char * cp ; cp = s
TYPE	151:2	151:12	8	const char *
TYPE_NAME	151:2	151:8	9	const char
LEAF_NODE	151:2	151:2	10	const
LEAF_NODE	151:8	151:8	10	char
POINTER	151:12	151:12	9	*
LEAF_NODE	151:12	151:12	10	*
NAME	151:14	151:14	8	cp
LEAF_NODE	151:14	151:14	9	cp
LEAF_NODE	0:0	0:0	8	;
INIT	151:14	151:14	8	cp = s
ASSIGN	151:14	151:19	9	cp = s
LVAL	151:14	151:14	10	cp
NAME	151:14	151:14	11	cp
LEAF_NODE	151:14	151:14	12	cp
ASSIGN_OP	151:17	151:17	10	=
LEAF_NODE	151:17	151:17	11	=
RVAL	151:19	151:19	10	s
FIELD	151:19	151:19	11	s
LEAF_NODE	151:19	151:19	12	s
LEAF_NODE	151:20	151:20	7	;
ITERATION	152:2	152:21	6	
KEYWORD	152:2	152:2	7	for
LEAF_NODE	152:2	152:2	8	for
LEAF_NODE	152:6	152:6	7	(
FOR_INIT	152:7	152:7	7	;
LEAF_NODE	152:7	152:7	8	;
CONDITION	152:9	152:9	7	i > 0
EXPR	152:9	152:13	8	i > 0
FIELD	152:9	152:9	9	i
LEAF_NODE	152:9	152:9	10	i
REL_OPERATOR	152:11	152:11	9	>
LEAF_NODE	152:11	152:11	10	>
FIELD	152:13	152:13	9	0
LEAF_NODE	152:13	152:13	10	0
LEAF_NODE	152:14	152:14	7	;
FOR_EXPR	152:16	152:16	7	i --
EXPR	152:16	152:16	8	i --
FIELD	152:16	152:17	9	i --
LEAF_NODE	152:16	152:16	10	i
LEAF_NODE	152:17	152:17	10	--
LEAF_NODE	152:19	152:19	7	)
STATEMENTS	152:21	157:2	7	
LEAF_NODE	152:21	152:21	8	{
STATEMENTS	153:3	156:3	8	
ITERATION	153:3	153:40	9	
KEYWORD	153:3	153:3	10	for
LEAF_NODE	153:3	153:3	11	for
LEAF_NODE	153:7	153:7	10	(
FOR_INIT	153:8	153:8	10	;
LEAF_NODE	153:8	153:8	11	;
CONDITION	153:10	153:10	10	cp < ep && * cp != '\0'
EXPR	153:10	153:10	11	cp < ep && * cp != '\0'
AND	153:10	153:21	12	cp < ep && * cp != '\0'
EXPR	153:10	153:15	13	cp < ep
FIELD	153:10	153:10	14	cp
LEAF_NODE	153:10	153:10	15	cp
REL_OPERATOR	153:13	153:13	14	<
LEAF_NODE	153:13	153:13	15	<
FIELD	153:15	153:15	14	ep
LEAF_NODE	153:15	153:15	15	ep
LEAF_NODE	153:18	153:18	13	&&
EXPR	153:21	153:28	13	* cp != '\0'
UNARY_EXPR	153:21	153:22	14	* cp
UNARY_OPERATOR	153:21	153:21	15	*
LEAF_NODE	153:21	153:21	16	*
FIELD	153:22	153:22	15	cp
LEAF_NODE	153:22	153:22	16	cp
EQ_OPERATOR	153:25	153:25	14	!=
LEAF_NODE	153:25	153:25	15	!=
FIELD	153:28	153:28	14	'\0'
LEAF_NODE	153:28	153:28	15	'\0'
LEAF_NODE	153:32	153:32	10	;
FOR_EXPR	153:34	153:34	10	cp ++
EXPR	153:34	153:34	11	cp ++
FIELD	153:34	153:36	12	cp ++
LEAF_NODE	153:34	153:34	13	cp
LEAF_NODE	153:36	153:36	13	++
LEAF_NODE	153:38	153:38	10	)
STATEMENTS	153:40	153:41	10	
LEAF_NODE	153:40	153:40	11	{
LEAF_NODE	0:0	0:0	11	STATEMENTS
LEAF_NODE	153:41	153:41	11	}
SELECTION	154:3	155:4	9	
KEYWORD	154:3	154:3	10	if
LEAF_NODE	154:3	154:3	11	if
LEAF_NODE	154:6	154:6	10	(
CONDITION	154:7	154:7	10	cp >= ep
EXPR	154:7	154:13	11	cp >= ep
FIELD	154:7	154:7	12	cp
LEAF_NODE	154:7	154:7	13	cp
REL_OPERATOR	154:10	154:10	12	>=
LEAF_NODE	154:10	154:10	13	>=
FIELD	154:13	154:13	12	ep
LEAF_NODE	154:13	154:13	13	ep
LEAF_NODE	154:15	154:15	10	)
STATEMENTS	155:4	155:4	10	
JUMP_STATEMENT	155:4	155:12	11	goto bad ;
KEYWORD	155:4	155:4	12	goto
LEAF_NODE	155:4	155:4	13	goto
DESTINATION	155:9	155:9	12	bad
LEAF_NODE	155:9	155:9	13	bad
LEAF_NODE	155:12	155:12	12	;
EXPR_STATEMENT	156:3	156:7	9	cp ++ ;
EXPR	156:3	156:3	10	cp ++
FIELD	156:3	156:5	11	cp ++
LEAF_NODE	156:3	156:3	12	cp
LEAF_NODE	156:5	156:5	12	++
LEAF_NODE	156:7	156:7	10	;
LEAF_NODE	157:2	157:2	8	}
JUMP_STATEMENT	158:2	158:25	6	return ( ( uint32 ) ( cp - s ) ) ;
KEYWORD	158:2	158:2	7	return
LEAF_NODE	158:2	158:2	8	return
DESTINATION	158:9	158:9	7	( ( uint32 ) ( cp - s ) )
EXPR	158:9	158:24	8	( ( uint32 ) ( cp - s ) )
LEAF_NODE	158:9	158:9	9	(
LEAF_NODE	158:10	158:10	9	(
TYPE_NAME	158:11	158:11	9	uint32
LEAF_NODE	158:11	158:11	10	uint32
LEAF_NODE	158:17	158:17	9	)
LEAF_NODE	158:18	158:18	9	(
FIELD	158:19	158:19	9	cp
LEAF_NODE	158:19	158:19	10	cp
LEAF_NODE	158:21	158:21	9	-
FIELD	158:22	158:22	9	s
LEAF_NODE	158:22	158:22	10	s
LEAF_NODE	158:23	158:23	9	)
LEAF_NODE	158:24	158:24	9	)
LEAF_NODE	158:25	158:25	7	;
LEAF_NODE	159:1	159:1	5	}
LABEL	160:0	160:3	3	bad :
LEAF_NODE	160:0	160:0	4	bad
LEAF_NODE	160:3	160:3	4	:
EXPR_STATEMENT	161:1	165:30	3	TIFFErrorExt ( tif -> tif_clientdata , "TIFFSetField" , "%s: Invalid InkNames value; expecting %d names, found %d" , tif -> tif_name , td -> td_samplesperpixel , td -> td_samplesperpixel - i ) ;
EXPR	161:1	161:1	4	TIFFErrorExt ( tif -> tif_clientdata , "TIFFSetField" , "%s: Invalid InkNames value; expecting %d names, found %d" , tif -> tif_name , td -> td_samplesperpixel , td -> td_samplesperpixel - i )
FUNCTION_CALL	161:1	165:29	5	TIFFErrorExt ( tif -> tif_clientdata , "TIFFSetField" , "%s: Invalid InkNames value; expecting %d names, found %d" , tif -> tif_name , td -> td_samplesperpixel , td -> td_samplesperpixel - i )
CALLEE	161:1	161:1	6	TIFFErrorExt
LEAF_NODE	161:1	161:1	7	TIFFErrorExt
LEAF_NODE	161:13	161:13	6	(
ARGUMENT	161:14	161:14	6	tif -> tif_clientdata
FIELD	161:14	161:19	7	tif -> tif_clientdata
LEAF_NODE	161:14	161:14	8	tif
LEAF_NODE	161:17	161:17	8	->
LEAF_NODE	161:19	161:19	8	tif_clientdata
LEAF_NODE	161:33	161:33	6	,
ARGUMENT	161:35	161:35	6	"TIFFSetField"
FIELD	161:35	161:35	7	"TIFFSetField"
LEAF_NODE	161:35	161:35	8	"TIFFSetField"
LEAF_NODE	161:49	161:49	6	,
ARGUMENT	162:5	162:5	6	"%s: Invalid InkNames value; expecting %d names, found %d"
FIELD	162:5	162:5	7	"%s: Invalid InkNames value; expecting %d names, found %d"
LEAF_NODE	162:5	162:5	8	"%s: Invalid InkNames value; expecting %d names, found %d"
LEAF_NODE	162:63	162:63	6	,
ARGUMENT	163:5	163:5	6	tif -> tif_name
FIELD	163:5	163:10	7	tif -> tif_name
LEAF_NODE	163:5	163:5	8	tif
LEAF_NODE	163:8	163:8	8	->
LEAF_NODE	163:10	163:10	8	tif_name
LEAF_NODE	163:18	163:18	6	,
ARGUMENT	164:5	164:5	6	td -> td_samplesperpixel
FIELD	164:5	164:9	7	td -> td_samplesperpixel
LEAF_NODE	164:5	164:5	8	td
LEAF_NODE	164:7	164:7	8	->
LEAF_NODE	164:9	164:9	8	td_samplesperpixel
LEAF_NODE	164:27	164:27	6	,
ARGUMENT	165:5	165:28	6	td -> td_samplesperpixel - i
FIELD	165:5	165:9	7	td -> td_samplesperpixel
LEAF_NODE	165:5	165:5	8	td
LEAF_NODE	165:7	165:7	8	->
LEAF_NODE	165:9	165:9	8	td_samplesperpixel
LEAF_NODE	165:27	165:27	7	-
FIELD	165:28	165:28	7	i
LEAF_NODE	165:28	165:28	8	i
LEAF_NODE	165:29	165:29	6	)
LEAF_NODE	165:30	165:30	4	;
JUMP_STATEMENT	166:1	166:11	3	return ( 0 ) ;
KEYWORD	166:1	166:1	4	return
LEAF_NODE	166:1	166:1	5	return
DESTINATION	166:8	166:8	4	( 0 )
EXPR	166:8	166:10	5	( 0 )
LEAF_NODE	166:8	166:8	6	(
FIELD	166:9	166:9	6	0
LEAF_NODE	166:9	166:9	7	0
LEAF_NODE	166:10	166:10	6	)
LEAF_NODE	166:11	166:11	4	;
LEAF_NODE	167:0	167:0	2	}
FUNCTION_DEF	169:0	762:0	1	
RETURN_TYPE	169:0	169:7	2	static int
LEAF_NODE	169:0	169:0	3	static
TYPE_NAME	169:7	169:7	3	int
LEAF_NODE	169:7	169:7	4	int
FUNCTION_NAME	170:0	170:0	2	_TIFFVSetField
LEAF_NODE	170:0	170:0	3	_TIFFVSetField
PARAMETER_LIST	170:14	170:48	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	170:14	170:14	3	(
PARAMETER_DECL	170:15	170:21	3	TIFF * tif
TYPE	170:15	170:19	4	TIFF *
TYPE_NAME	170:15	170:15	5	TIFF
LEAF_NODE	170:15	170:15	6	TIFF
POINTER	170:19	170:19	5	*
LEAF_NODE	170:19	170:19	6	*
NAME	170:21	170:21	4	tif
LEAF_NODE	170:21	170:21	5	tif
LEAF_NODE	170:24	170:24	3	,
PARAMETER_DECL	170:26	170:33	3	uint32 tag
TYPE	170:26	170:26	4	uint32
TYPE_NAME	170:26	170:26	5	uint32
LEAF_NODE	170:26	170:26	6	uint32
NAME	170:33	170:33	4	tag
LEAF_NODE	170:33	170:33	5	tag
LEAF_NODE	170:36	170:36	3	,
PARAMETER_DECL	170:38	170:46	3	va_list ap
TYPE	170:38	170:38	4	va_list
TYPE_NAME	170:38	170:38	5	va_list
LEAF_NODE	170:38	170:38	6	va_list
NAME	170:46	170:46	4	ap
LEAF_NODE	170:46	170:46	5	ap
LEAF_NODE	170:48	170:48	3	)
LEAF_NODE	171:0	171:0	2	{
STATEMENTS	172:1	761:4	2	
LEAF_NODE	172:1	172:1	3	static
SIMPLE_DECL	172:8	172:46	3	const char [ ] module ; module = "_TIFFVSetField" ;
VAR_DECL	172:8	172:19	4	const char [ ] module ; module = "_TIFFVSetField"
TYPE	172:8	172:25	5	const char [ ]
TYPE_NAME	172:8	172:14	6	const char
LEAF_NODE	172:8	172:8	7	const
LEAF_NODE	172:14	172:14	7	char
TYPE_SUFFIX	172:25	172:26	6	[ ]
LEAF_NODE	172:25	172:25	7	[
LEAF_NODE	172:26	172:26	7	]
NAME	172:19	172:19	5	module
LEAF_NODE	172:19	172:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	172:19	172:19	5	module = "_TIFFVSetField"
ASSIGN	172:19	172:30	6	module = "_TIFFVSetField"
LVAL	172:19	172:19	7	module
NAME	172:19	172:19	8	module
LEAF_NODE	172:19	172:19	9	module
ASSIGN_OP	172:28	172:28	7	=
LEAF_NODE	172:28	172:28	8	=
RVAL	172:30	172:30	7	"_TIFFVSetField"
FIELD	172:30	172:30	8	"_TIFFVSetField"
LEAF_NODE	172:30	172:30	9	"_TIFFVSetField"
LEAF_NODE	172:46	172:46	4	;
SIMPLE_DECL	174:1	174:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	174:1	174:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	174:1	174:14	5	TIFFDirectory *
TYPE_NAME	174:1	174:1	6	TIFFDirectory
LEAF_NODE	174:1	174:1	7	TIFFDirectory
POINTER	174:14	174:14	6	*
LEAF_NODE	174:14	174:14	7	*
NAME	174:16	174:16	5	td
LEAF_NODE	174:16	174:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	174:16	174:16	5	td = & tif -> tif_dir
ASSIGN	174:16	174:21	6	td = & tif -> tif_dir
LVAL	174:16	174:16	7	td
NAME	174:16	174:16	8	td
LEAF_NODE	174:16	174:16	9	td
ASSIGN_OP	174:19	174:19	7	=
LEAF_NODE	174:19	174:19	8	=
RVAL	174:21	174:21	7	& tif -> tif_dir
UNARY_EXPR	174:21	174:22	8	& tif -> tif_dir
UNARY_OPERATOR	174:21	174:21	9	&
LEAF_NODE	174:21	174:21	10	&
FIELD	174:22	174:27	9	tif -> tif_dir
LEAF_NODE	174:22	174:22	10	tif
LEAF_NODE	174:25	174:25	10	->
LEAF_NODE	174:27	174:27	10	tif_dir
LEAF_NODE	174:34	174:34	4	;
SIMPLE_DECL	175:1	175:15	3	int status ; status = 1 ;
VAR_DECL	175:1	175:5	4	int status ; status = 1
TYPE	175:1	175:1	5	int
TYPE_NAME	175:1	175:1	6	int
LEAF_NODE	175:1	175:1	7	int
NAME	175:5	175:5	5	status
LEAF_NODE	175:5	175:5	6	status
LEAF_NODE	0:0	0:0	5	;
INIT	175:5	175:5	5	status = 1
ASSIGN	175:5	175:14	6	status = 1
LVAL	175:5	175:5	7	status
NAME	175:5	175:5	8	status
LEAF_NODE	175:5	175:5	9	status
ASSIGN_OP	175:12	175:12	7	=
LEAF_NODE	175:12	175:12	8	=
RVAL	175:14	175:14	7	1
FIELD	175:14	175:14	8	1
LEAF_NODE	175:14	175:14	9	1
LEAF_NODE	175:15	175:15	4	;
SIMPLE_DECL	176:1	176:17	3	uint32 v32 , uint32 i , uint32 v ;
INIT_DECL_LIST	176:1	176:1	4	uint32 v32 , uint32 i , uint32 v
VAR_DECL	176:1	176:8	5	uint32 v32
TYPE	176:1	176:1	6	uint32
TYPE_NAME	176:1	176:1	7	uint32
LEAF_NODE	176:1	176:1	8	uint32
NAME	176:8	176:8	6	v32
LEAF_NODE	176:8	176:8	7	v32
LEAF_NODE	176:11	176:11	5	,
INIT_DECL_LIST	176:1	176:1	5	uint32 i , uint32 v
VAR_DECL	176:1	176:13	6	uint32 i
TYPE	176:1	176:1	7	uint32
TYPE_NAME	176:1	176:1	8	uint32
LEAF_NODE	176:1	176:1	9	uint32
NAME	176:13	176:13	7	i
LEAF_NODE	176:13	176:13	8	i
LEAF_NODE	176:14	176:14	6	,
VAR_DECL	176:1	176:16	6	uint32 v
TYPE	176:1	176:1	7	uint32
TYPE_NAME	176:1	176:1	8	uint32
LEAF_NODE	176:1	176:1	9	uint32
NAME	176:16	176:16	7	v
LEAF_NODE	176:16	176:16	8	v
LEAF_NODE	176:17	176:17	4	;
SIMPLE_DECL	177:4	177:17	3	double dblval ;
VAR_DECL	177:4	177:11	4	double dblval
TYPE	177:4	177:4	5	double
TYPE_NAME	177:4	177:4	6	double
LEAF_NODE	177:4	177:4	7	double
NAME	177:11	177:11	5	dblval
LEAF_NODE	177:11	177:11	6	dblval
LEAF_NODE	177:17	177:17	4	;
SIMPLE_DECL	178:1	178:8	3	char * s ;
VAR_DECL	178:1	178:7	4	char * s
TYPE	178:1	178:5	5	char *
TYPE_NAME	178:1	178:1	6	char
LEAF_NODE	178:1	178:1	7	char
POINTER	178:5	178:5	6	*
LEAF_NODE	178:5	178:5	7	*
NAME	178:7	178:7	5	s
LEAF_NODE	178:7	178:7	6	s
LEAF_NODE	178:8	178:8	4	;
SIMPLE_DECL	179:1	179:57	3	const TIFFField * fip ; fip = TIFFFindField ( tif , tag , TIFF_ANY ) ;
VAR_DECL	179:1	179:18	4	const TIFFField * fip ; fip = TIFFFindField ( tif , tag , TIFF_ANY )
TYPE	179:1	179:17	5	const TIFFField *
TYPE_NAME	179:1	179:7	6	const TIFFField
LEAF_NODE	179:1	179:1	7	const
LEAF_NODE	179:7	179:7	7	TIFFField
POINTER	179:17	179:17	6	*
LEAF_NODE	179:17	179:17	7	*
NAME	179:18	179:18	5	fip
LEAF_NODE	179:18	179:18	6	fip
LEAF_NODE	0:0	0:0	5	;
INIT	179:18	179:18	5	fip = TIFFFindField ( tif , tag , TIFF_ANY )
ASSIGN	179:18	179:24	6	fip = TIFFFindField ( tif , tag , TIFF_ANY )
LVAL	179:18	179:18	7	fip
NAME	179:18	179:18	8	fip
LEAF_NODE	179:18	179:18	9	fip
ASSIGN_OP	179:22	179:22	7	=
LEAF_NODE	179:22	179:22	8	=
RVAL	179:24	179:24	7	TIFFFindField ( tif , tag , TIFF_ANY )
FUNCTION_CALL	179:24	179:56	8	TIFFFindField ( tif , tag , TIFF_ANY )
CALLEE	179:24	179:24	9	TIFFFindField
LEAF_NODE	179:24	179:24	10	TIFFFindField
LEAF_NODE	179:37	179:37	9	(
ARGUMENT	179:38	179:38	9	tif
FIELD	179:38	179:38	10	tif
LEAF_NODE	179:38	179:38	11	tif
LEAF_NODE	179:41	179:41	9	,
ARGUMENT	179:43	179:43	9	tag
FIELD	179:43	179:43	10	tag
LEAF_NODE	179:43	179:43	11	tag
LEAF_NODE	179:46	179:46	9	,
ARGUMENT	179:48	179:48	9	TIFF_ANY
FIELD	179:48	179:48	10	TIFF_ANY
LEAF_NODE	179:48	179:48	11	TIFF_ANY
LEAF_NODE	179:56	179:56	9	)
LEAF_NODE	179:57	179:57	4	;
SIMPLE_DECL	180:1	180:26	3	uint32 standard_tag ; standard_tag = tag ;
VAR_DECL	180:1	180:8	4	uint32 standard_tag ; standard_tag = tag
TYPE	180:1	180:1	5	uint32
TYPE_NAME	180:1	180:1	6	uint32
LEAF_NODE	180:1	180:1	7	uint32
NAME	180:8	180:8	5	standard_tag
LEAF_NODE	180:8	180:8	6	standard_tag
LEAF_NODE	0:0	0:0	5	;
INIT	180:8	180:8	5	standard_tag = tag
ASSIGN	180:8	180:23	6	standard_tag = tag
LVAL	180:8	180:8	7	standard_tag
NAME	180:8	180:8	8	standard_tag
LEAF_NODE	180:8	180:8	9	standard_tag
ASSIGN_OP	180:21	180:21	7	=
LEAF_NODE	180:21	180:21	8	=
RVAL	180:23	180:23	7	tag
FIELD	180:23	180:23	8	tag
LEAF_NODE	180:23	180:23	9	tag
LEAF_NODE	180:26	180:26	4	;
SELECTION	181:1	182:5	3	
KEYWORD	181:1	181:1	4	if
LEAF_NODE	181:1	181:1	5	if
LEAF_NODE	181:3	181:3	4	(
CONDITION	181:5	181:5	4	fip == NULL
EXPR	181:5	181:12	5	fip == NULL
FIELD	181:5	181:5	6	fip
LEAF_NODE	181:5	181:5	7	fip
EQ_OPERATOR	181:9	181:9	6	==
LEAF_NODE	181:9	181:9	7	==
FIELD	181:12	181:12	6	NULL
LEAF_NODE	181:12	181:12	7	NULL
LEAF_NODE	181:17	181:17	4	)
STATEMENTS	182:5	182:5	4	
JUMP_STATEMENT	182:5	182:13	5	return 0 ;
KEYWORD	182:5	182:5	6	return
LEAF_NODE	182:5	182:5	7	return
DESTINATION	182:12	182:12	6	0
EXPR	182:12	182:12	7	0
FIELD	182:12	182:12	8	0
LEAF_NODE	182:12	182:12	9	0
LEAF_NODE	182:13	182:13	6	;
SELECTION	189:1	189:37	3	
KEYWORD	189:1	189:1	4	if
LEAF_NODE	189:1	189:1	5	if
LEAF_NODE	189:4	189:4	4	(
CONDITION	189:5	189:5	4	fip -> field_bit == FIELD_CUSTOM
EXPR	189:5	189:23	5	fip -> field_bit == FIELD_CUSTOM
FIELD	189:5	189:10	6	fip -> field_bit
LEAF_NODE	189:5	189:5	7	fip
LEAF_NODE	189:8	189:8	7	->
LEAF_NODE	189:10	189:10	7	field_bit
EQ_OPERATOR	189:20	189:20	6	==
LEAF_NODE	189:20	189:20	7	==
FIELD	189:23	189:23	6	FIELD_CUSTOM
LEAF_NODE	189:23	189:23	7	FIELD_CUSTOM
LEAF_NODE	189:35	189:35	4	)
STATEMENTS	189:37	191:1	4	
LEAF_NODE	189:37	189:37	5	{
STATEMENTS	190:2	190:2	5	
EXPR_STATEMENT	190:2	190:18	6	standard_tag = 0 ;
EXPR	190:2	190:2	7	standard_tag = 0
ASSIGN	190:2	190:17	8	standard_tag = 0
LVAL	190:2	190:2	9	standard_tag
FIELD	190:2	190:2	10	standard_tag
LEAF_NODE	190:2	190:2	11	standard_tag
ASSIGN_OP	190:15	190:15	9	=
LEAF_NODE	190:15	190:15	10	=
RVAL	190:17	190:17	9	0
FIELD	190:17	190:17	10	0
LEAF_NODE	190:17	190:17	11	0
LEAF_NODE	190:18	190:18	7	;
LEAF_NODE	191:1	191:1	5	}
SELECTION	193:1	193:23	3	
KEYWORD	193:1	193:1	4	switch
LEAF_NODE	193:1	193:1	5	switch
LEAF_NODE	193:8	193:8	4	(
CONDITION	193:9	193:9	4	standard_tag
EXPR	193:9	193:9	5	standard_tag
FIELD	193:9	193:9	6	standard_tag
LEAF_NODE	193:9	193:9	7	standard_tag
LEAF_NODE	193:21	193:21	4	)
STATEMENTS	193:23	721:1	4	
LEAF_NODE	193:23	193:23	5	{
STATEMENTS	194:1	720:1	5	
LABEL	194:1	194:25	6	case TIFFTAG_SUBFILETYPE :
LEAF_NODE	194:1	194:1	7	case
LEAF_NODE	194:6	194:6	7	TIFFTAG_SUBFILETYPE
LEAF_NODE	194:25	194:25	7	:
EXPR_STATEMENT	195:2	195:50	6	td -> td_subfiletype = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	195:2	195:2	7	td -> td_subfiletype = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	195:2	195:23	8	td -> td_subfiletype = ( uint32 ) va_arg ( ap , uint32 )
LVAL	195:2	195:2	9	td -> td_subfiletype
FIELD	195:2	195:6	10	td -> td_subfiletype
LEAF_NODE	195:2	195:2	11	td
LEAF_NODE	195:4	195:4	11	->
LEAF_NODE	195:6	195:6	11	td_subfiletype
ASSIGN_OP	195:21	195:21	9	=
LEAF_NODE	195:21	195:21	10	=
RVAL	195:23	195:32	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	195:23	195:23	10	(
TYPE_NAME	195:24	195:24	10	uint32
LEAF_NODE	195:24	195:24	11	uint32
LEAF_NODE	195:30	195:30	10	)
FUNCTION_CALL	195:32	195:49	10	va_arg ( ap , uint32 )
CALLEE	195:32	195:32	11	va_arg
LEAF_NODE	195:32	195:32	12	va_arg
LEAF_NODE	195:38	195:38	11	(
ARGUMENT	195:39	195:39	11	ap
FIELD	195:39	195:39	12	ap
LEAF_NODE	195:39	195:39	13	ap
LEAF_NODE	195:41	195:41	11	,
ARGUMENT	195:43	195:43	11	uint32
FIELD	195:43	195:43	12	uint32
LEAF_NODE	195:43	195:43	13	uint32
LEAF_NODE	195:49	195:49	11	)
LEAF_NODE	195:50	195:50	7	;
JUMP_STATEMENT	196:2	196:7	6	break DESTINATION ;
KEYWORD	196:2	196:2	7	break
LEAF_NODE	196:2	196:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	196:7	196:7	7	;
LABEL	197:1	197:24	6	case TIFFTAG_IMAGEWIDTH :
LEAF_NODE	197:1	197:1	7	case
LEAF_NODE	197:6	197:6	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	197:24	197:24	7	:
EXPR_STATEMENT	198:2	198:49	6	td -> td_imagewidth = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	198:2	198:2	7	td -> td_imagewidth = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	198:2	198:22	8	td -> td_imagewidth = ( uint32 ) va_arg ( ap , uint32 )
LVAL	198:2	198:2	9	td -> td_imagewidth
FIELD	198:2	198:6	10	td -> td_imagewidth
LEAF_NODE	198:2	198:2	11	td
LEAF_NODE	198:4	198:4	11	->
LEAF_NODE	198:6	198:6	11	td_imagewidth
ASSIGN_OP	198:20	198:20	9	=
LEAF_NODE	198:20	198:20	10	=
RVAL	198:22	198:31	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	198:22	198:22	10	(
TYPE_NAME	198:23	198:23	10	uint32
LEAF_NODE	198:23	198:23	11	uint32
LEAF_NODE	198:29	198:29	10	)
FUNCTION_CALL	198:31	198:48	10	va_arg ( ap , uint32 )
CALLEE	198:31	198:31	11	va_arg
LEAF_NODE	198:31	198:31	12	va_arg
LEAF_NODE	198:37	198:37	11	(
ARGUMENT	198:38	198:38	11	ap
FIELD	198:38	198:38	12	ap
LEAF_NODE	198:38	198:38	13	ap
LEAF_NODE	198:40	198:40	11	,
ARGUMENT	198:42	198:42	11	uint32
FIELD	198:42	198:42	12	uint32
LEAF_NODE	198:42	198:42	13	uint32
LEAF_NODE	198:48	198:48	11	)
LEAF_NODE	198:49	198:49	7	;
JUMP_STATEMENT	199:2	199:7	6	break DESTINATION ;
KEYWORD	199:2	199:2	7	break
LEAF_NODE	199:2	199:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	199:7	199:7	7	;
LABEL	200:1	200:25	6	case TIFFTAG_IMAGELENGTH :
LEAF_NODE	200:1	200:1	7	case
LEAF_NODE	200:6	200:6	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	200:25	200:25	7	:
EXPR_STATEMENT	201:2	201:50	6	td -> td_imagelength = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	201:2	201:2	7	td -> td_imagelength = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	201:2	201:23	8	td -> td_imagelength = ( uint32 ) va_arg ( ap , uint32 )
LVAL	201:2	201:2	9	td -> td_imagelength
FIELD	201:2	201:6	10	td -> td_imagelength
LEAF_NODE	201:2	201:2	11	td
LEAF_NODE	201:4	201:4	11	->
LEAF_NODE	201:6	201:6	11	td_imagelength
ASSIGN_OP	201:21	201:21	9	=
LEAF_NODE	201:21	201:21	10	=
RVAL	201:23	201:32	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	201:23	201:23	10	(
TYPE_NAME	201:24	201:24	10	uint32
LEAF_NODE	201:24	201:24	11	uint32
LEAF_NODE	201:30	201:30	10	)
FUNCTION_CALL	201:32	201:49	10	va_arg ( ap , uint32 )
CALLEE	201:32	201:32	11	va_arg
LEAF_NODE	201:32	201:32	12	va_arg
LEAF_NODE	201:38	201:38	11	(
ARGUMENT	201:39	201:39	11	ap
FIELD	201:39	201:39	12	ap
LEAF_NODE	201:39	201:39	13	ap
LEAF_NODE	201:41	201:41	11	,
ARGUMENT	201:43	201:43	11	uint32
FIELD	201:43	201:43	12	uint32
LEAF_NODE	201:43	201:43	13	uint32
LEAF_NODE	201:49	201:49	11	)
LEAF_NODE	201:50	201:50	7	;
JUMP_STATEMENT	202:2	202:7	6	break DESTINATION ;
KEYWORD	202:2	202:2	7	break
LEAF_NODE	202:2	202:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	202:7	202:7	7	;
LABEL	203:1	203:27	6	case TIFFTAG_BITSPERSAMPLE :
LEAF_NODE	203:1	203:1	7	case
LEAF_NODE	203:6	203:6	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	203:27	203:27	7	:
EXPR_STATEMENT	204:2	204:56	6	td -> td_bitspersample = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	204:2	204:2	7	td -> td_bitspersample = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	204:2	204:25	8	td -> td_bitspersample = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	204:2	204:2	9	td -> td_bitspersample
FIELD	204:2	204:6	10	td -> td_bitspersample
LEAF_NODE	204:2	204:2	11	td
LEAF_NODE	204:4	204:4	11	->
LEAF_NODE	204:6	204:6	11	td_bitspersample
ASSIGN_OP	204:23	204:23	9	=
LEAF_NODE	204:23	204:23	10	=
RVAL	204:25	204:34	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	204:25	204:25	10	(
TYPE_NAME	204:26	204:26	10	uint16
LEAF_NODE	204:26	204:26	11	uint16
LEAF_NODE	204:32	204:32	10	)
FUNCTION_CALL	204:34	204:55	10	va_arg ( ap , uint16_vap )
CALLEE	204:34	204:34	11	va_arg
LEAF_NODE	204:34	204:34	12	va_arg
LEAF_NODE	204:40	204:40	11	(
ARGUMENT	204:41	204:41	11	ap
FIELD	204:41	204:41	12	ap
LEAF_NODE	204:41	204:41	13	ap
LEAF_NODE	204:43	204:43	11	,
ARGUMENT	204:45	204:45	11	uint16_vap
FIELD	204:45	204:45	12	uint16_vap
LEAF_NODE	204:45	204:45	13	uint16_vap
LEAF_NODE	204:55	204:55	11	)
LEAF_NODE	204:56	204:56	7	;
SELECTION	212:2	212:34	6	
KEYWORD	212:2	212:2	7	if
LEAF_NODE	212:2	212:2	8	if
LEAF_NODE	212:5	212:5	7	(
CONDITION	212:6	212:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	212:6	212:23	8	tif -> tif_flags & TIFF_SWAB
FIELD	212:6	212:11	9	tif -> tif_flags
LEAF_NODE	212:6	212:6	10	tif
LEAF_NODE	212:9	212:9	10	->
LEAF_NODE	212:11	212:11	10	tif_flags
LEAF_NODE	212:21	212:21	9	&
FIELD	212:23	212:23	9	TIFF_SWAB
LEAF_NODE	212:23	212:23	10	TIFF_SWAB
LEAF_NODE	212:32	212:32	7	)
STATEMENTS	212:34	225:2	7	
LEAF_NODE	212:34	212:34	8	{
STATEMENTS	213:3	223:3	8	
SELECTION	213:3	214:4	9	
KEYWORD	213:3	213:3	10	if
LEAF_NODE	213:3	213:3	11	if
LEAF_NODE	213:6	213:6	10	(
CONDITION	213:7	213:7	10	td -> td_bitspersample == 8
EXPR	213:7	213:31	11	td -> td_bitspersample == 8
FIELD	213:7	213:11	12	td -> td_bitspersample
LEAF_NODE	213:7	213:7	13	td
LEAF_NODE	213:9	213:9	13	->
LEAF_NODE	213:11	213:11	13	td_bitspersample
EQ_OPERATOR	213:28	213:28	12	==
LEAF_NODE	213:28	213:28	13	==
FIELD	213:31	213:31	12	8
LEAF_NODE	213:31	213:31	13	8
LEAF_NODE	213:32	213:32	10	)
STATEMENTS	214:4	214:4	10	
EXPR_STATEMENT	214:4	214:43	11	tif -> tif_postdecode = _TIFFNoPostDecode ;
EXPR	214:4	214:4	12	tif -> tif_postdecode = _TIFFNoPostDecode
ASSIGN	214:4	214:26	13	tif -> tif_postdecode = _TIFFNoPostDecode
LVAL	214:4	214:4	14	tif -> tif_postdecode
FIELD	214:4	214:9	15	tif -> tif_postdecode
LEAF_NODE	214:4	214:4	16	tif
LEAF_NODE	214:7	214:7	16	->
LEAF_NODE	214:9	214:9	16	tif_postdecode
ASSIGN_OP	214:24	214:24	14	=
LEAF_NODE	214:24	214:24	15	=
RVAL	214:26	214:26	14	_TIFFNoPostDecode
FIELD	214:26	214:26	15	_TIFFNoPostDecode
LEAF_NODE	214:26	214:26	16	_TIFFNoPostDecode
LEAF_NODE	214:43	214:43	12	;
SELECTION	215:3	215:8	9	
KEYWORD	215:3	215:3	10	else
LEAF_NODE	215:3	215:3	11	else
STATEMENTS	215:8	215:8	10	
SELECTION	215:8	216:4	11	
KEYWORD	215:8	215:8	12	if
LEAF_NODE	215:8	215:8	13	if
LEAF_NODE	215:11	215:11	12	(
CONDITION	215:12	215:12	12	td -> td_bitspersample == 16
EXPR	215:12	215:36	13	td -> td_bitspersample == 16
FIELD	215:12	215:16	14	td -> td_bitspersample
LEAF_NODE	215:12	215:12	15	td
LEAF_NODE	215:14	215:14	15	->
LEAF_NODE	215:16	215:16	15	td_bitspersample
EQ_OPERATOR	215:33	215:33	14	==
LEAF_NODE	215:33	215:33	15	==
FIELD	215:36	215:36	14	16
LEAF_NODE	215:36	215:36	15	16
LEAF_NODE	215:38	215:38	12	)
STATEMENTS	216:4	216:4	12	
EXPR_STATEMENT	216:4	216:44	13	tif -> tif_postdecode = _TIFFSwab16BitData ;
EXPR	216:4	216:4	14	tif -> tif_postdecode = _TIFFSwab16BitData
ASSIGN	216:4	216:26	15	tif -> tif_postdecode = _TIFFSwab16BitData
LVAL	216:4	216:4	16	tif -> tif_postdecode
FIELD	216:4	216:9	17	tif -> tif_postdecode
LEAF_NODE	216:4	216:4	18	tif
LEAF_NODE	216:7	216:7	18	->
LEAF_NODE	216:9	216:9	18	tif_postdecode
ASSIGN_OP	216:24	216:24	16	=
LEAF_NODE	216:24	216:24	17	=
RVAL	216:26	216:26	16	_TIFFSwab16BitData
FIELD	216:26	216:26	17	_TIFFSwab16BitData
LEAF_NODE	216:26	216:26	18	_TIFFSwab16BitData
LEAF_NODE	216:44	216:44	14	;
SELECTION	217:3	217:8	9	
KEYWORD	217:3	217:3	10	else
LEAF_NODE	217:3	217:3	11	else
STATEMENTS	217:8	217:8	10	
SELECTION	217:8	218:4	11	
KEYWORD	217:8	217:8	12	if
LEAF_NODE	217:8	217:8	13	if
LEAF_NODE	217:11	217:11	12	(
CONDITION	217:12	217:12	12	td -> td_bitspersample == 24
EXPR	217:12	217:36	13	td -> td_bitspersample == 24
FIELD	217:12	217:16	14	td -> td_bitspersample
LEAF_NODE	217:12	217:12	15	td
LEAF_NODE	217:14	217:14	15	->
LEAF_NODE	217:16	217:16	15	td_bitspersample
EQ_OPERATOR	217:33	217:33	14	==
LEAF_NODE	217:33	217:33	15	==
FIELD	217:36	217:36	14	24
LEAF_NODE	217:36	217:36	15	24
LEAF_NODE	217:38	217:38	12	)
STATEMENTS	218:4	218:4	12	
EXPR_STATEMENT	218:4	218:44	13	tif -> tif_postdecode = _TIFFSwab24BitData ;
EXPR	218:4	218:4	14	tif -> tif_postdecode = _TIFFSwab24BitData
ASSIGN	218:4	218:26	15	tif -> tif_postdecode = _TIFFSwab24BitData
LVAL	218:4	218:4	16	tif -> tif_postdecode
FIELD	218:4	218:9	17	tif -> tif_postdecode
LEAF_NODE	218:4	218:4	18	tif
LEAF_NODE	218:7	218:7	18	->
LEAF_NODE	218:9	218:9	18	tif_postdecode
ASSIGN_OP	218:24	218:24	16	=
LEAF_NODE	218:24	218:24	17	=
RVAL	218:26	218:26	16	_TIFFSwab24BitData
FIELD	218:26	218:26	17	_TIFFSwab24BitData
LEAF_NODE	218:26	218:26	18	_TIFFSwab24BitData
LEAF_NODE	218:44	218:44	14	;
SELECTION	219:3	219:8	9	
KEYWORD	219:3	219:3	10	else
LEAF_NODE	219:3	219:3	11	else
STATEMENTS	219:8	219:8	10	
SELECTION	219:8	220:4	11	
KEYWORD	219:8	219:8	12	if
LEAF_NODE	219:8	219:8	13	if
LEAF_NODE	219:11	219:11	12	(
CONDITION	219:12	219:12	12	td -> td_bitspersample == 32
EXPR	219:12	219:36	13	td -> td_bitspersample == 32
FIELD	219:12	219:16	14	td -> td_bitspersample
LEAF_NODE	219:12	219:12	15	td
LEAF_NODE	219:14	219:14	15	->
LEAF_NODE	219:16	219:16	15	td_bitspersample
EQ_OPERATOR	219:33	219:33	14	==
LEAF_NODE	219:33	219:33	15	==
FIELD	219:36	219:36	14	32
LEAF_NODE	219:36	219:36	15	32
LEAF_NODE	219:38	219:38	12	)
STATEMENTS	220:4	220:4	12	
EXPR_STATEMENT	220:4	220:44	13	tif -> tif_postdecode = _TIFFSwab32BitData ;
EXPR	220:4	220:4	14	tif -> tif_postdecode = _TIFFSwab32BitData
ASSIGN	220:4	220:26	15	tif -> tif_postdecode = _TIFFSwab32BitData
LVAL	220:4	220:4	16	tif -> tif_postdecode
FIELD	220:4	220:9	17	tif -> tif_postdecode
LEAF_NODE	220:4	220:4	18	tif
LEAF_NODE	220:7	220:7	18	->
LEAF_NODE	220:9	220:9	18	tif_postdecode
ASSIGN_OP	220:24	220:24	16	=
LEAF_NODE	220:24	220:24	17	=
RVAL	220:26	220:26	16	_TIFFSwab32BitData
FIELD	220:26	220:26	17	_TIFFSwab32BitData
LEAF_NODE	220:26	220:26	18	_TIFFSwab32BitData
LEAF_NODE	220:44	220:44	14	;
SELECTION	221:3	221:8	9	
KEYWORD	221:3	221:3	10	else
LEAF_NODE	221:3	221:3	11	else
STATEMENTS	221:8	221:8	10	
SELECTION	221:8	222:4	11	
KEYWORD	221:8	221:8	12	if
LEAF_NODE	221:8	221:8	13	if
LEAF_NODE	221:11	221:11	12	(
CONDITION	221:12	221:12	12	td -> td_bitspersample == 64
EXPR	221:12	221:36	13	td -> td_bitspersample == 64
FIELD	221:12	221:16	14	td -> td_bitspersample
LEAF_NODE	221:12	221:12	15	td
LEAF_NODE	221:14	221:14	15	->
LEAF_NODE	221:16	221:16	15	td_bitspersample
EQ_OPERATOR	221:33	221:33	14	==
LEAF_NODE	221:33	221:33	15	==
FIELD	221:36	221:36	14	64
LEAF_NODE	221:36	221:36	15	64
LEAF_NODE	221:38	221:38	12	)
STATEMENTS	222:4	222:4	12	
EXPR_STATEMENT	222:4	222:44	13	tif -> tif_postdecode = _TIFFSwab64BitData ;
EXPR	222:4	222:4	14	tif -> tif_postdecode = _TIFFSwab64BitData
ASSIGN	222:4	222:26	15	tif -> tif_postdecode = _TIFFSwab64BitData
LVAL	222:4	222:4	16	tif -> tif_postdecode
FIELD	222:4	222:9	17	tif -> tif_postdecode
LEAF_NODE	222:4	222:4	18	tif
LEAF_NODE	222:7	222:7	18	->
LEAF_NODE	222:9	222:9	18	tif_postdecode
ASSIGN_OP	222:24	222:24	16	=
LEAF_NODE	222:24	222:24	17	=
RVAL	222:26	222:26	16	_TIFFSwab64BitData
FIELD	222:26	222:26	17	_TIFFSwab64BitData
LEAF_NODE	222:26	222:26	18	_TIFFSwab64BitData
LEAF_NODE	222:44	222:44	14	;
SELECTION	223:3	223:8	9	
KEYWORD	223:3	223:3	10	else
LEAF_NODE	223:3	223:3	11	else
STATEMENTS	223:8	223:8	10	
SELECTION	223:8	224:4	11	
KEYWORD	223:8	223:8	12	if
LEAF_NODE	223:8	223:8	13	if
LEAF_NODE	223:11	223:11	12	(
CONDITION	223:12	223:12	12	td -> td_bitspersample == 128
EXPR	223:12	223:36	13	td -> td_bitspersample == 128
FIELD	223:12	223:16	14	td -> td_bitspersample
LEAF_NODE	223:12	223:12	15	td
LEAF_NODE	223:14	223:14	15	->
LEAF_NODE	223:16	223:16	15	td_bitspersample
EQ_OPERATOR	223:33	223:33	14	==
LEAF_NODE	223:33	223:33	15	==
FIELD	223:36	223:36	14	128
LEAF_NODE	223:36	223:36	15	128
LEAF_NODE	223:39	223:39	12	)
STATEMENTS	224:4	224:4	12	
EXPR_STATEMENT	224:4	224:44	13	tif -> tif_postdecode = _TIFFSwab64BitData ;
EXPR	224:4	224:4	14	tif -> tif_postdecode = _TIFFSwab64BitData
ASSIGN	224:4	224:26	15	tif -> tif_postdecode = _TIFFSwab64BitData
LVAL	224:4	224:4	16	tif -> tif_postdecode
FIELD	224:4	224:9	17	tif -> tif_postdecode
LEAF_NODE	224:4	224:4	18	tif
LEAF_NODE	224:7	224:7	18	->
LEAF_NODE	224:9	224:9	18	tif_postdecode
ASSIGN_OP	224:24	224:24	16	=
LEAF_NODE	224:24	224:24	17	=
RVAL	224:26	224:26	16	_TIFFSwab64BitData
FIELD	224:26	224:26	17	_TIFFSwab64BitData
LEAF_NODE	224:26	224:26	18	_TIFFSwab64BitData
LEAF_NODE	224:44	224:44	14	;
LEAF_NODE	225:2	225:2	8	}
JUMP_STATEMENT	226:2	226:7	6	break DESTINATION ;
KEYWORD	226:2	226:2	7	break
LEAF_NODE	226:2	226:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	226:7	226:7	7	;
LABEL	227:1	227:25	6	case TIFFTAG_COMPRESSION :
LEAF_NODE	227:1	227:1	7	case
LEAF_NODE	227:6	227:6	7	TIFFTAG_COMPRESSION
LEAF_NODE	227:25	227:25	7	:
EXPR_STATEMENT	228:2	228:37	6	v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	228:2	228:2	7	v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	228:2	228:6	8	v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	228:2	228:2	9	v
FIELD	228:2	228:2	10	v
LEAF_NODE	228:2	228:2	11	v
ASSIGN_OP	228:4	228:4	9	=
LEAF_NODE	228:4	228:4	10	=
RVAL	228:6	228:15	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	228:6	228:6	10	(
TYPE_NAME	228:7	228:7	10	uint16
LEAF_NODE	228:7	228:7	11	uint16
LEAF_NODE	228:13	228:13	10	)
FUNCTION_CALL	228:15	228:36	10	va_arg ( ap , uint16_vap )
CALLEE	228:15	228:15	11	va_arg
LEAF_NODE	228:15	228:15	12	va_arg
LEAF_NODE	228:21	228:21	11	(
ARGUMENT	228:22	228:22	11	ap
FIELD	228:22	228:22	12	ap
LEAF_NODE	228:22	228:22	13	ap
LEAF_NODE	228:24	228:24	11	,
ARGUMENT	228:26	228:26	11	uint16_vap
FIELD	228:26	228:26	12	uint16_vap
LEAF_NODE	228:26	228:26	13	uint16_vap
LEAF_NODE	228:36	228:36	11	)
LEAF_NODE	228:37	228:37	7	;
SELECTION	234:2	234:44	6	
KEYWORD	234:2	234:2	7	if
LEAF_NODE	234:2	234:2	8	if
LEAF_NODE	234:5	234:5	7	(
CONDITION	234:6	234:6	7	TIFFFieldSet ( tif , FIELD_COMPRESSION )
EXPR	234:6	234:6	8	TIFFFieldSet ( tif , FIELD_COMPRESSION )
FUNCTION_CALL	234:6	234:41	9	TIFFFieldSet ( tif , FIELD_COMPRESSION )
CALLEE	234:6	234:6	10	TIFFFieldSet
LEAF_NODE	234:6	234:6	11	TIFFFieldSet
LEAF_NODE	234:18	234:18	10	(
ARGUMENT	234:19	234:19	10	tif
FIELD	234:19	234:19	11	tif
LEAF_NODE	234:19	234:19	12	tif
LEAF_NODE	234:22	234:22	10	,
ARGUMENT	234:24	234:24	10	FIELD_COMPRESSION
FIELD	234:24	234:24	11	FIELD_COMPRESSION
LEAF_NODE	234:24	234:24	12	FIELD_COMPRESSION
LEAF_NODE	234:41	234:41	10	)
LEAF_NODE	234:42	234:42	7	)
STATEMENTS	234:44	239:2	7	
LEAF_NODE	234:44	234:44	8	{
STATEMENTS	235:3	238:3	8	
SELECTION	235:3	236:4	9	
KEYWORD	235:3	235:3	10	if
LEAF_NODE	235:3	235:3	11	if
LEAF_NODE	235:6	235:6	10	(
CONDITION	235:7	235:7	10	( uint32 ) td -> td_compression == v
EXPR	235:7	235:37	11	( uint32 ) td -> td_compression == v
LEAF_NODE	235:7	235:7	12	(
TYPE_NAME	235:8	235:8	12	uint32
LEAF_NODE	235:8	235:8	13	uint32
LEAF_NODE	235:14	235:14	12	)
FIELD	235:15	235:19	12	td -> td_compression
LEAF_NODE	235:15	235:15	13	td
LEAF_NODE	235:17	235:17	13	->
LEAF_NODE	235:19	235:19	13	td_compression
EQ_OPERATOR	235:34	235:34	12	==
LEAF_NODE	235:34	235:34	13	==
FIELD	235:37	235:37	12	v
LEAF_NODE	235:37	235:37	13	v
LEAF_NODE	235:38	235:38	10	)
STATEMENTS	236:4	236:4	10	
JUMP_STATEMENT	236:4	236:9	11	break DESTINATION ;
KEYWORD	236:4	236:4	12	break
LEAF_NODE	236:4	236:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	236:9	236:9	12	;
EXPR_STATEMENT	237:3	237:27	9	( * tif -> tif_cleanup ) ( tif ) ;
EXPR	237:3	237:3	10	( * tif -> tif_cleanup ) ( tif )
FUNCTION_CALL	237:3	237:26	11	( * tif -> tif_cleanup ) ( tif )
CALLEE	237:3	237:21	12	( * tif -> tif_cleanup )
LEAF_NODE	237:3	237:3	13	(
UNARY_EXPR	237:4	237:5	13	* tif -> tif_cleanup
UNARY_OPERATOR	237:4	237:4	14	*
LEAF_NODE	237:4	237:4	15	*
FIELD	237:5	237:10	14	tif -> tif_cleanup
LEAF_NODE	237:5	237:5	15	tif
LEAF_NODE	237:8	237:8	15	->
LEAF_NODE	237:10	237:10	15	tif_cleanup
LEAF_NODE	237:21	237:21	13	)
LEAF_NODE	237:22	237:22	12	(
ARGUMENT	237:23	237:23	12	tif
FIELD	237:23	237:23	13	tif
LEAF_NODE	237:23	237:23	14	tif
LEAF_NODE	237:26	237:26	12	)
LEAF_NODE	237:27	237:27	10	;
EXPR_STATEMENT	238:3	238:37	9	tif -> tif_flags &= ~TIFF_CODERSETUP ;
EXPR	238:3	238:3	10	tif -> tif_flags &= ~TIFF_CODERSETUP
ASSIGN	238:3	238:21	11	tif -> tif_flags &= ~TIFF_CODERSETUP
LVAL	238:3	238:3	12	tif -> tif_flags
FIELD	238:3	238:8	13	tif -> tif_flags
LEAF_NODE	238:3	238:3	14	tif
LEAF_NODE	238:6	238:6	14	->
LEAF_NODE	238:8	238:8	14	tif_flags
ASSIGN_OP	238:18	238:18	12	&=
LEAF_NODE	238:18	238:18	13	&=
RVAL	238:21	238:21	12	~TIFF_CODERSETUP
FIELD	238:21	238:21	13	~TIFF_CODERSETUP
LEAF_NODE	238:21	238:21	14	~TIFF_CODERSETUP
LEAF_NODE	238:37	238:37	10	;
LEAF_NODE	239:2	239:2	8	}
SELECTION	243:2	244:6	6	
KEYWORD	243:2	243:2	7	if
LEAF_NODE	243:2	243:2	8	if
LEAF_NODE	243:4	243:4	7	(
CONDITION	243:6	243:6	7	( status = TIFFSetCompressionScheme ( tif , v ) ) != 0
EXPR	243:6	243:53	8	( status = TIFFSetCompressionScheme ( tif , v ) ) != 0
LEAF_NODE	243:6	243:6	9	(
ASSIGN	243:7	243:16	9	status = TIFFSetCompressionScheme ( tif , v )
LVAL	243:7	243:7	10	status
FIELD	243:7	243:7	11	status
LEAF_NODE	243:7	243:7	12	status
ASSIGN_OP	243:14	243:14	10	=
LEAF_NODE	243:14	243:14	11	=
RVAL	243:16	243:16	10	TIFFSetCompressionScheme ( tif , v )
FUNCTION_CALL	243:16	243:47	11	TIFFSetCompressionScheme ( tif , v )
CALLEE	243:16	243:16	12	TIFFSetCompressionScheme
LEAF_NODE	243:16	243:16	13	TIFFSetCompressionScheme
LEAF_NODE	243:40	243:40	12	(
ARGUMENT	243:41	243:41	12	tif
FIELD	243:41	243:41	13	tif
LEAF_NODE	243:41	243:41	14	tif
LEAF_NODE	243:44	243:44	12	,
ARGUMENT	243:46	243:46	12	v
FIELD	243:46	243:46	13	v
LEAF_NODE	243:46	243:46	14	v
LEAF_NODE	243:47	243:47	12	)
LEAF_NODE	243:48	243:48	9	)
EQ_OPERATOR	243:50	243:50	9	!=
LEAF_NODE	243:50	243:50	10	!=
FIELD	243:53	243:53	9	0
LEAF_NODE	243:53	243:53	10	0
LEAF_NODE	243:55	243:55	7	)
STATEMENTS	244:6	244:6	7	
EXPR_STATEMENT	244:6	244:37	8	td -> td_compression = ( uint16 ) v ;
EXPR	244:6	244:6	9	td -> td_compression = ( uint16 ) v
ASSIGN	244:6	244:27	10	td -> td_compression = ( uint16 ) v
LVAL	244:6	244:6	11	td -> td_compression
FIELD	244:6	244:10	12	td -> td_compression
LEAF_NODE	244:6	244:6	13	td
LEAF_NODE	244:8	244:8	13	->
LEAF_NODE	244:10	244:10	13	td_compression
ASSIGN_OP	244:25	244:25	11	=
LEAF_NODE	244:25	244:25	12	=
RVAL	244:27	244:36	11	( uint16 ) v
LEAF_NODE	244:27	244:27	12	(
TYPE_NAME	244:28	244:28	12	uint16
LEAF_NODE	244:28	244:28	13	uint16
LEAF_NODE	244:34	244:34	12	)
FIELD	244:36	244:36	12	v
LEAF_NODE	244:36	244:36	13	v
LEAF_NODE	244:37	244:37	9	;
SELECTION	245:2	246:6	6	
KEYWORD	245:2	245:2	7	else
LEAF_NODE	245:2	245:2	8	else
STATEMENTS	246:6	246:6	7	
EXPR_STATEMENT	246:6	246:16	8	status = 0 ;
EXPR	246:6	246:6	9	status = 0
ASSIGN	246:6	246:15	10	status = 0
LVAL	246:6	246:6	11	status
FIELD	246:6	246:6	12	status
LEAF_NODE	246:6	246:6	13	status
ASSIGN_OP	246:13	246:13	11	=
LEAF_NODE	246:13	246:13	12	=
RVAL	246:15	246:15	11	0
FIELD	246:15	246:15	12	0
LEAF_NODE	246:15	246:15	13	0
LEAF_NODE	246:16	246:16	9	;
JUMP_STATEMENT	247:2	247:7	6	break DESTINATION ;
KEYWORD	247:2	247:2	7	break
LEAF_NODE	247:2	247:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	247:7	247:7	7	;
LABEL	248:1	248:25	6	case TIFFTAG_PHOTOMETRIC :
LEAF_NODE	248:1	248:1	7	case
LEAF_NODE	248:6	248:6	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	248:25	248:25	7	:
EXPR_STATEMENT	249:2	249:54	6	td -> td_photometric = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	249:2	249:2	7	td -> td_photometric = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	249:2	249:23	8	td -> td_photometric = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	249:2	249:2	9	td -> td_photometric
FIELD	249:2	249:6	10	td -> td_photometric
LEAF_NODE	249:2	249:2	11	td
LEAF_NODE	249:4	249:4	11	->
LEAF_NODE	249:6	249:6	11	td_photometric
ASSIGN_OP	249:21	249:21	9	=
LEAF_NODE	249:21	249:21	10	=
RVAL	249:23	249:32	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	249:23	249:23	10	(
TYPE_NAME	249:24	249:24	10	uint16
LEAF_NODE	249:24	249:24	11	uint16
LEAF_NODE	249:30	249:30	10	)
FUNCTION_CALL	249:32	249:53	10	va_arg ( ap , uint16_vap )
CALLEE	249:32	249:32	11	va_arg
LEAF_NODE	249:32	249:32	12	va_arg
LEAF_NODE	249:38	249:38	11	(
ARGUMENT	249:39	249:39	11	ap
FIELD	249:39	249:39	12	ap
LEAF_NODE	249:39	249:39	13	ap
LEAF_NODE	249:41	249:41	11	,
ARGUMENT	249:43	249:43	11	uint16_vap
FIELD	249:43	249:43	12	uint16_vap
LEAF_NODE	249:43	249:43	13	uint16_vap
LEAF_NODE	249:53	249:53	11	)
LEAF_NODE	249:54	249:54	7	;
JUMP_STATEMENT	250:2	250:7	6	break DESTINATION ;
KEYWORD	250:2	250:2	7	break
LEAF_NODE	250:2	250:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	250:7	250:7	7	;
LABEL	251:1	251:27	6	case TIFFTAG_THRESHHOLDING :
LEAF_NODE	251:1	251:1	7	case
LEAF_NODE	251:6	251:6	7	TIFFTAG_THRESHHOLDING
LEAF_NODE	251:27	251:27	7	:
EXPR_STATEMENT	252:2	252:56	6	td -> td_threshholding = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	252:2	252:2	7	td -> td_threshholding = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	252:2	252:25	8	td -> td_threshholding = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	252:2	252:2	9	td -> td_threshholding
FIELD	252:2	252:6	10	td -> td_threshholding
LEAF_NODE	252:2	252:2	11	td
LEAF_NODE	252:4	252:4	11	->
LEAF_NODE	252:6	252:6	11	td_threshholding
ASSIGN_OP	252:23	252:23	9	=
LEAF_NODE	252:23	252:23	10	=
RVAL	252:25	252:34	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	252:25	252:25	10	(
TYPE_NAME	252:26	252:26	10	uint16
LEAF_NODE	252:26	252:26	11	uint16
LEAF_NODE	252:32	252:32	10	)
FUNCTION_CALL	252:34	252:55	10	va_arg ( ap , uint16_vap )
CALLEE	252:34	252:34	11	va_arg
LEAF_NODE	252:34	252:34	12	va_arg
LEAF_NODE	252:40	252:40	11	(
ARGUMENT	252:41	252:41	11	ap
FIELD	252:41	252:41	12	ap
LEAF_NODE	252:41	252:41	13	ap
LEAF_NODE	252:43	252:43	11	,
ARGUMENT	252:45	252:45	11	uint16_vap
FIELD	252:45	252:45	12	uint16_vap
LEAF_NODE	252:45	252:45	13	uint16_vap
LEAF_NODE	252:55	252:55	11	)
LEAF_NODE	252:56	252:56	7	;
JUMP_STATEMENT	253:2	253:7	6	break DESTINATION ;
KEYWORD	253:2	253:2	7	break
LEAF_NODE	253:2	253:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	253:7	253:7	7	;
LABEL	254:1	254:23	6	case TIFFTAG_FILLORDER :
LEAF_NODE	254:1	254:1	7	case
LEAF_NODE	254:6	254:6	7	TIFFTAG_FILLORDER
LEAF_NODE	254:23	254:23	7	:
EXPR_STATEMENT	255:2	255:37	6	v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	255:2	255:2	7	v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	255:2	255:6	8	v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	255:2	255:2	9	v
FIELD	255:2	255:2	10	v
LEAF_NODE	255:2	255:2	11	v
ASSIGN_OP	255:4	255:4	9	=
LEAF_NODE	255:4	255:4	10	=
RVAL	255:6	255:15	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	255:6	255:6	10	(
TYPE_NAME	255:7	255:7	10	uint16
LEAF_NODE	255:7	255:7	11	uint16
LEAF_NODE	255:13	255:13	10	)
FUNCTION_CALL	255:15	255:36	10	va_arg ( ap , uint16_vap )
CALLEE	255:15	255:15	11	va_arg
LEAF_NODE	255:15	255:15	12	va_arg
LEAF_NODE	255:21	255:21	11	(
ARGUMENT	255:22	255:22	11	ap
FIELD	255:22	255:22	12	ap
LEAF_NODE	255:22	255:22	13	ap
LEAF_NODE	255:24	255:24	11	,
ARGUMENT	255:26	255:26	11	uint16_vap
FIELD	255:26	255:26	12	uint16_vap
LEAF_NODE	255:26	255:26	13	uint16_vap
LEAF_NODE	255:36	255:36	11	)
LEAF_NODE	255:37	255:37	7	;
SELECTION	256:2	257:3	6	
KEYWORD	256:2	256:2	7	if
LEAF_NODE	256:2	256:2	8	if
LEAF_NODE	256:5	256:5	7	(
CONDITION	256:6	256:6	7	v != FILLORDER_LSB2MSB && v != FILLORDER_MSB2LSB
EXPR	256:6	256:6	8	v != FILLORDER_LSB2MSB && v != FILLORDER_MSB2LSB
AND	256:6	256:32	9	v != FILLORDER_LSB2MSB && v != FILLORDER_MSB2LSB
EXPR	256:6	256:11	10	v != FILLORDER_LSB2MSB
FIELD	256:6	256:6	11	v
LEAF_NODE	256:6	256:6	12	v
EQ_OPERATOR	256:8	256:8	11	!=
LEAF_NODE	256:8	256:8	12	!=
FIELD	256:11	256:11	11	FILLORDER_LSB2MSB
LEAF_NODE	256:11	256:11	12	FILLORDER_LSB2MSB
LEAF_NODE	256:29	256:29	10	&&
EXPR	256:32	256:37	10	v != FILLORDER_MSB2LSB
FIELD	256:32	256:32	11	v
LEAF_NODE	256:32	256:32	12	v
EQ_OPERATOR	256:34	256:34	11	!=
LEAF_NODE	256:34	256:34	12	!=
FIELD	256:37	256:37	11	FILLORDER_MSB2LSB
LEAF_NODE	256:37	256:37	12	FILLORDER_MSB2LSB
LEAF_NODE	256:54	256:54	7	)
STATEMENTS	257:3	257:3	7	
JUMP_STATEMENT	257:3	257:16	8	goto badvalue ;
KEYWORD	257:3	257:3	9	goto
LEAF_NODE	257:3	257:3	10	goto
DESTINATION	257:8	257:8	9	badvalue
LEAF_NODE	257:8	257:8	10	badvalue
LEAF_NODE	257:16	257:16	9	;
EXPR_STATEMENT	258:2	258:31	6	td -> td_fillorder = ( uint16 ) v ;
EXPR	258:2	258:2	7	td -> td_fillorder = ( uint16 ) v
ASSIGN	258:2	258:21	8	td -> td_fillorder = ( uint16 ) v
LVAL	258:2	258:2	9	td -> td_fillorder
FIELD	258:2	258:6	10	td -> td_fillorder
LEAF_NODE	258:2	258:2	11	td
LEAF_NODE	258:4	258:4	11	->
LEAF_NODE	258:6	258:6	11	td_fillorder
ASSIGN_OP	258:19	258:19	9	=
LEAF_NODE	258:19	258:19	10	=
RVAL	258:21	258:30	9	( uint16 ) v
LEAF_NODE	258:21	258:21	10	(
TYPE_NAME	258:22	258:22	10	uint16
LEAF_NODE	258:22	258:22	11	uint16
LEAF_NODE	258:28	258:28	10	)
FIELD	258:30	258:30	10	v
LEAF_NODE	258:30	258:30	11	v
LEAF_NODE	258:31	258:31	7	;
JUMP_STATEMENT	259:2	259:7	6	break DESTINATION ;
KEYWORD	259:2	259:2	7	break
LEAF_NODE	259:2	259:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	259:7	259:7	7	;
LABEL	260:1	260:25	6	case TIFFTAG_ORIENTATION :
LEAF_NODE	260:1	260:1	7	case
LEAF_NODE	260:6	260:6	7	TIFFTAG_ORIENTATION
LEAF_NODE	260:25	260:25	7	:
EXPR_STATEMENT	261:2	261:37	6	v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	261:2	261:2	7	v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	261:2	261:6	8	v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	261:2	261:2	9	v
FIELD	261:2	261:2	10	v
LEAF_NODE	261:2	261:2	11	v
ASSIGN_OP	261:4	261:4	9	=
LEAF_NODE	261:4	261:4	10	=
RVAL	261:6	261:15	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	261:6	261:6	10	(
TYPE_NAME	261:7	261:7	10	uint16
LEAF_NODE	261:7	261:7	11	uint16
LEAF_NODE	261:13	261:13	10	)
FUNCTION_CALL	261:15	261:36	10	va_arg ( ap , uint16_vap )
CALLEE	261:15	261:15	11	va_arg
LEAF_NODE	261:15	261:15	12	va_arg
LEAF_NODE	261:21	261:21	11	(
ARGUMENT	261:22	261:22	11	ap
FIELD	261:22	261:22	12	ap
LEAF_NODE	261:22	261:22	13	ap
LEAF_NODE	261:24	261:24	11	,
ARGUMENT	261:26	261:26	11	uint16_vap
FIELD	261:26	261:26	12	uint16_vap
LEAF_NODE	261:26	261:26	13	uint16_vap
LEAF_NODE	261:36	261:36	11	)
LEAF_NODE	261:37	261:37	7	;
SELECTION	262:2	263:3	6	
KEYWORD	262:2	262:2	7	if
LEAF_NODE	262:2	262:2	8	if
LEAF_NODE	262:5	262:5	7	(
CONDITION	262:6	262:6	7	v < ORIENTATION_TOPLEFT || ORIENTATION_LEFTBOT < v
EXPR	262:6	262:6	8	v < ORIENTATION_TOPLEFT || ORIENTATION_LEFTBOT < v
OR	262:6	262:33	9	v < ORIENTATION_TOPLEFT || ORIENTATION_LEFTBOT < v
EXPR	262:6	262:10	10	v < ORIENTATION_TOPLEFT
FIELD	262:6	262:6	11	v
LEAF_NODE	262:6	262:6	12	v
REL_OPERATOR	262:8	262:8	11	<
LEAF_NODE	262:8	262:8	12	<
FIELD	262:10	262:10	11	ORIENTATION_TOPLEFT
LEAF_NODE	262:10	262:10	12	ORIENTATION_TOPLEFT
LEAF_NODE	262:30	262:30	10	||
EXPR	262:33	262:55	10	ORIENTATION_LEFTBOT < v
FIELD	262:33	262:33	11	ORIENTATION_LEFTBOT
LEAF_NODE	262:33	262:33	12	ORIENTATION_LEFTBOT
REL_OPERATOR	262:53	262:53	11	<
LEAF_NODE	262:53	262:53	12	<
FIELD	262:55	262:55	11	v
LEAF_NODE	262:55	262:55	12	v
LEAF_NODE	262:56	262:56	7	)
STATEMENTS	263:3	263:3	7	
JUMP_STATEMENT	263:3	263:16	8	goto badvalue ;
KEYWORD	263:3	263:3	9	goto
LEAF_NODE	263:3	263:3	10	goto
DESTINATION	263:8	263:8	9	badvalue
LEAF_NODE	263:8	263:8	10	badvalue
LEAF_NODE	263:16	263:16	9	;
SELECTION	264:2	265:3	6	
KEYWORD	264:2	264:2	7	else
LEAF_NODE	264:2	264:2	8	else
STATEMENTS	265:3	265:3	7	
EXPR_STATEMENT	265:3	265:34	8	td -> td_orientation = ( uint16 ) v ;
EXPR	265:3	265:3	9	td -> td_orientation = ( uint16 ) v
ASSIGN	265:3	265:24	10	td -> td_orientation = ( uint16 ) v
LVAL	265:3	265:3	11	td -> td_orientation
FIELD	265:3	265:7	12	td -> td_orientation
LEAF_NODE	265:3	265:3	13	td
LEAF_NODE	265:5	265:5	13	->
LEAF_NODE	265:7	265:7	13	td_orientation
ASSIGN_OP	265:22	265:22	11	=
LEAF_NODE	265:22	265:22	12	=
RVAL	265:24	265:33	11	( uint16 ) v
LEAF_NODE	265:24	265:24	12	(
TYPE_NAME	265:25	265:25	12	uint16
LEAF_NODE	265:25	265:25	13	uint16
LEAF_NODE	265:31	265:31	12	)
FIELD	265:33	265:33	12	v
LEAF_NODE	265:33	265:33	13	v
LEAF_NODE	265:34	265:34	9	;
JUMP_STATEMENT	266:2	266:7	6	break DESTINATION ;
KEYWORD	266:2	266:2	7	break
LEAF_NODE	266:2	266:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	266:7	266:7	7	;
LABEL	267:1	267:29	6	case TIFFTAG_SAMPLESPERPIXEL :
LEAF_NODE	267:1	267:1	7	case
LEAF_NODE	267:6	267:6	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	267:29	267:29	7	:
EXPR_STATEMENT	268:2	268:37	6	v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	268:2	268:2	7	v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	268:2	268:6	8	v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	268:2	268:2	9	v
FIELD	268:2	268:2	10	v
LEAF_NODE	268:2	268:2	11	v
ASSIGN_OP	268:4	268:4	9	=
LEAF_NODE	268:4	268:4	10	=
RVAL	268:6	268:15	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	268:6	268:6	10	(
TYPE_NAME	268:7	268:7	10	uint16
LEAF_NODE	268:7	268:7	11	uint16
LEAF_NODE	268:13	268:13	10	)
FUNCTION_CALL	268:15	268:36	10	va_arg ( ap , uint16_vap )
CALLEE	268:15	268:15	11	va_arg
LEAF_NODE	268:15	268:15	12	va_arg
LEAF_NODE	268:21	268:21	11	(
ARGUMENT	268:22	268:22	11	ap
FIELD	268:22	268:22	12	ap
LEAF_NODE	268:22	268:22	13	ap
LEAF_NODE	268:24	268:24	11	,
ARGUMENT	268:26	268:26	11	uint16_vap
FIELD	268:26	268:26	12	uint16_vap
LEAF_NODE	268:26	268:26	13	uint16_vap
LEAF_NODE	268:36	268:36	11	)
LEAF_NODE	268:37	268:37	7	;
SELECTION	269:2	270:3	6	
KEYWORD	269:2	269:2	7	if
LEAF_NODE	269:2	269:2	8	if
LEAF_NODE	269:5	269:5	7	(
CONDITION	269:6	269:6	7	v == 0
EXPR	269:6	269:11	8	v == 0
FIELD	269:6	269:6	9	v
LEAF_NODE	269:6	269:6	10	v
EQ_OPERATOR	269:8	269:8	9	==
LEAF_NODE	269:8	269:8	10	==
FIELD	269:11	269:11	9	0
LEAF_NODE	269:11	269:11	10	0
LEAF_NODE	269:12	269:12	7	)
STATEMENTS	270:3	270:3	7	
JUMP_STATEMENT	270:3	270:16	8	goto badvalue ;
KEYWORD	270:3	270:3	9	goto
LEAF_NODE	270:3	270:3	10	goto
DESTINATION	270:8	270:8	9	badvalue
LEAF_NODE	270:8	270:8	10	badvalue
LEAF_NODE	270:16	270:16	9	;
SELECTION	271:8	272:8	6	
KEYWORD	271:8	271:8	7	if
LEAF_NODE	271:8	271:8	8	if
LEAF_NODE	271:10	271:10	7	(
CONDITION	271:12	271:12	7	v != td -> td_samplesperpixel
EXPR	271:12	271:17	8	v != td -> td_samplesperpixel
FIELD	271:12	271:12	9	v
LEAF_NODE	271:12	271:12	10	v
EQ_OPERATOR	271:14	271:14	9	!=
LEAF_NODE	271:14	271:14	10	!=
FIELD	271:17	271:21	9	td -> td_samplesperpixel
LEAF_NODE	271:17	271:17	10	td
LEAF_NODE	271:19	271:19	10	->
LEAF_NODE	271:21	271:21	10	td_samplesperpixel
LEAF_NODE	271:40	271:40	7	)
STATEMENTS	272:8	304:8	7	
LEAF_NODE	272:8	272:8	8	{
STATEMENTS	274:12	294:12	8	
SELECTION	274:12	275:12	9	
KEYWORD	274:12	274:12	10	if
LEAF_NODE	274:12	274:12	11	if
LEAF_NODE	274:14	274:14	10	(
CONDITION	274:16	274:16	10	td -> td_sminsamplevalue != NULL
EXPR	274:16	274:42	11	td -> td_sminsamplevalue != NULL
FIELD	274:16	274:20	12	td -> td_sminsamplevalue
LEAF_NODE	274:16	274:16	13	td
LEAF_NODE	274:18	274:18	13	->
LEAF_NODE	274:20	274:20	13	td_sminsamplevalue
EQ_OPERATOR	274:39	274:39	12	!=
LEAF_NODE	274:39	274:39	13	!=
FIELD	274:42	274:42	12	NULL
LEAF_NODE	274:42	274:42	13	NULL
LEAF_NODE	274:47	274:47	10	)
STATEMENTS	275:12	282:12	10	
LEAF_NODE	275:12	275:12	11	{
STATEMENTS	276:16	281:16	11	
LEAF_NODE	276:16	276:16	12	TIFFWarningExt
LEAF_NODE	276:30	276:30	12	(
LEAF_NODE	276:31	276:31	12	tif
LEAF_NODE	276:34	276:34	12	->
LEAF_NODE	276:36	276:36	12	tif_clientdata
LEAF_NODE	276:50	276:50	12	,
LEAF_NODE	276:51	276:51	12	module
LEAF_NODE	276:57	276:57	12	,
LEAF_NODE	277:20	277:20	12	"SamplesPerPixel tag value is changing, "
LEAF_NODE	278:20	278:20	12	"but SMinSampleValue tag was read with a different value. Cancelling it"
LEAF_NODE	278:92	278:92	12	)
LEAF_NODE	278:93	278:93	12	;
EXPR_STATEMENT	279:16	279:58	12	TIFFClrFieldBit ( tif , FIELD_SMINSAMPLEVALUE ) ;
EXPR	279:16	279:16	13	TIFFClrFieldBit ( tif , FIELD_SMINSAMPLEVALUE )
FUNCTION_CALL	279:16	279:57	14	TIFFClrFieldBit ( tif , FIELD_SMINSAMPLEVALUE )
CALLEE	279:16	279:16	15	TIFFClrFieldBit
LEAF_NODE	279:16	279:16	16	TIFFClrFieldBit
LEAF_NODE	279:31	279:31	15	(
ARGUMENT	279:32	279:32	15	tif
FIELD	279:32	279:32	16	tif
LEAF_NODE	279:32	279:32	17	tif
LEAF_NODE	279:35	279:35	15	,
ARGUMENT	279:36	279:36	15	FIELD_SMINSAMPLEVALUE
FIELD	279:36	279:36	16	FIELD_SMINSAMPLEVALUE
LEAF_NODE	279:36	279:36	17	FIELD_SMINSAMPLEVALUE
LEAF_NODE	279:57	279:57	15	)
LEAF_NODE	279:58	279:58	13	;
EXPR_STATEMENT	280:16	280:49	12	_TIFFfree ( td -> td_sminsamplevalue ) ;
EXPR	280:16	280:16	13	_TIFFfree ( td -> td_sminsamplevalue )
FUNCTION_CALL	280:16	280:48	14	_TIFFfree ( td -> td_sminsamplevalue )
CALLEE	280:16	280:16	15	_TIFFfree
LEAF_NODE	280:16	280:16	16	_TIFFfree
LEAF_NODE	280:25	280:25	15	(
ARGUMENT	280:26	280:26	15	td -> td_sminsamplevalue
FIELD	280:26	280:30	16	td -> td_sminsamplevalue
LEAF_NODE	280:26	280:26	17	td
LEAF_NODE	280:28	280:28	17	->
LEAF_NODE	280:30	280:30	17	td_sminsamplevalue
LEAF_NODE	280:48	280:48	15	)
LEAF_NODE	280:49	280:49	13	;
EXPR_STATEMENT	281:16	281:45	12	td -> td_sminsamplevalue = NULL ;
EXPR	281:16	281:16	13	td -> td_sminsamplevalue = NULL
ASSIGN	281:16	281:41	14	td -> td_sminsamplevalue = NULL
LVAL	281:16	281:16	15	td -> td_sminsamplevalue
FIELD	281:16	281:20	16	td -> td_sminsamplevalue
LEAF_NODE	281:16	281:16	17	td
LEAF_NODE	281:18	281:18	17	->
LEAF_NODE	281:20	281:20	17	td_sminsamplevalue
ASSIGN_OP	281:39	281:39	15	=
LEAF_NODE	281:39	281:39	16	=
RVAL	281:41	281:41	15	NULL
FIELD	281:41	281:41	16	NULL
LEAF_NODE	281:41	281:41	17	NULL
LEAF_NODE	281:45	281:45	13	;
LEAF_NODE	282:12	282:12	11	}
SELECTION	283:12	284:12	9	
KEYWORD	283:12	283:12	10	if
LEAF_NODE	283:12	283:12	11	if
LEAF_NODE	283:14	283:14	10	(
CONDITION	283:16	283:16	10	td -> td_smaxsamplevalue != NULL
EXPR	283:16	283:42	11	td -> td_smaxsamplevalue != NULL
FIELD	283:16	283:20	12	td -> td_smaxsamplevalue
LEAF_NODE	283:16	283:16	13	td
LEAF_NODE	283:18	283:18	13	->
LEAF_NODE	283:20	283:20	13	td_smaxsamplevalue
EQ_OPERATOR	283:39	283:39	12	!=
LEAF_NODE	283:39	283:39	13	!=
FIELD	283:42	283:42	12	NULL
LEAF_NODE	283:42	283:42	13	NULL
LEAF_NODE	283:47	283:47	10	)
STATEMENTS	284:12	291:12	10	
LEAF_NODE	284:12	284:12	11	{
STATEMENTS	285:16	290:16	11	
LEAF_NODE	285:16	285:16	12	TIFFWarningExt
LEAF_NODE	285:30	285:30	12	(
LEAF_NODE	285:31	285:31	12	tif
LEAF_NODE	285:34	285:34	12	->
LEAF_NODE	285:36	285:36	12	tif_clientdata
LEAF_NODE	285:50	285:50	12	,
LEAF_NODE	285:51	285:51	12	module
LEAF_NODE	285:57	285:57	12	,
LEAF_NODE	286:20	286:20	12	"SamplesPerPixel tag value is changing, "
LEAF_NODE	287:20	287:20	12	"but SMaxSampleValue tag was read with a different value. Cancelling it"
LEAF_NODE	287:92	287:92	12	)
LEAF_NODE	287:93	287:93	12	;
EXPR_STATEMENT	288:16	288:58	12	TIFFClrFieldBit ( tif , FIELD_SMAXSAMPLEVALUE ) ;
EXPR	288:16	288:16	13	TIFFClrFieldBit ( tif , FIELD_SMAXSAMPLEVALUE )
FUNCTION_CALL	288:16	288:57	14	TIFFClrFieldBit ( tif , FIELD_SMAXSAMPLEVALUE )
CALLEE	288:16	288:16	15	TIFFClrFieldBit
LEAF_NODE	288:16	288:16	16	TIFFClrFieldBit
LEAF_NODE	288:31	288:31	15	(
ARGUMENT	288:32	288:32	15	tif
FIELD	288:32	288:32	16	tif
LEAF_NODE	288:32	288:32	17	tif
LEAF_NODE	288:35	288:35	15	,
ARGUMENT	288:36	288:36	15	FIELD_SMAXSAMPLEVALUE
FIELD	288:36	288:36	16	FIELD_SMAXSAMPLEVALUE
LEAF_NODE	288:36	288:36	17	FIELD_SMAXSAMPLEVALUE
LEAF_NODE	288:57	288:57	15	)
LEAF_NODE	288:58	288:58	13	;
EXPR_STATEMENT	289:16	289:49	12	_TIFFfree ( td -> td_smaxsamplevalue ) ;
EXPR	289:16	289:16	13	_TIFFfree ( td -> td_smaxsamplevalue )
FUNCTION_CALL	289:16	289:48	14	_TIFFfree ( td -> td_smaxsamplevalue )
CALLEE	289:16	289:16	15	_TIFFfree
LEAF_NODE	289:16	289:16	16	_TIFFfree
LEAF_NODE	289:25	289:25	15	(
ARGUMENT	289:26	289:26	15	td -> td_smaxsamplevalue
FIELD	289:26	289:30	16	td -> td_smaxsamplevalue
LEAF_NODE	289:26	289:26	17	td
LEAF_NODE	289:28	289:28	17	->
LEAF_NODE	289:30	289:30	17	td_smaxsamplevalue
LEAF_NODE	289:48	289:48	15	)
LEAF_NODE	289:49	289:49	13	;
EXPR_STATEMENT	290:16	290:45	12	td -> td_smaxsamplevalue = NULL ;
EXPR	290:16	290:16	13	td -> td_smaxsamplevalue = NULL
ASSIGN	290:16	290:41	14	td -> td_smaxsamplevalue = NULL
LVAL	290:16	290:16	15	td -> td_smaxsamplevalue
FIELD	290:16	290:20	16	td -> td_smaxsamplevalue
LEAF_NODE	290:16	290:16	17	td
LEAF_NODE	290:18	290:18	17	->
LEAF_NODE	290:20	290:20	17	td_smaxsamplevalue
ASSIGN_OP	290:39	290:39	15	=
LEAF_NODE	290:39	290:39	16	=
RVAL	290:41	290:41	15	NULL
FIELD	290:41	290:41	16	NULL
LEAF_NODE	290:41	290:41	17	NULL
LEAF_NODE	290:45	290:45	13	;
LEAF_NODE	291:12	291:12	11	}
SELECTION	294:12	296:12	9	
KEYWORD	294:12	294:12	10	if
LEAF_NODE	294:12	294:12	11	if
LEAF_NODE	294:14	294:14	10	(
CONDITION	294:16	294:16	10	td -> td_transferfunction [ 0 ] != NULL && ( v - td -> td_extrasamples > 1 ) && ! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
EXPR	294:16	294:16	11	td -> td_transferfunction [ 0 ] != NULL && ( v - td -> td_extrasamples > 1 ) && ! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
AND	294:16	294:54	12	td -> td_transferfunction [ 0 ] != NULL && ( v - td -> td_extrasamples > 1 ) && ! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
EXPR	294:16	294:46	13	td -> td_transferfunction [ 0 ] != NULL
FIELD	294:16	294:41	14	td -> td_transferfunction [ 0 ]
LEAF_NODE	294:16	294:16	15	td
LEAF_NODE	294:18	294:18	15	->
LEAF_NODE	294:20	294:20	15	td_transferfunction
LEAF_NODE	294:39	294:39	15	[
EXPR	294:40	294:40	15	0
FIELD	294:40	294:40	16	0
LEAF_NODE	294:40	294:40	17	0
LEAF_NODE	294:41	294:41	15	]
EQ_OPERATOR	294:43	294:43	14	!=
LEAF_NODE	294:43	294:43	15	!=
FIELD	294:46	294:46	14	NULL
LEAF_NODE	294:46	294:46	15	NULL
LEAF_NODE	294:51	294:51	13	&&
EXPR	294:54	294:54	13	( v - td -> td_extrasamples > 1 ) && ! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
AND	294:54	295:16	14	( v - td -> td_extrasamples > 1 ) && ! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
EXPR	294:54	294:82	15	( v - td -> td_extrasamples > 1 )
LEAF_NODE	294:54	294:54	16	(
FIELD	294:55	294:55	16	v
LEAF_NODE	294:55	294:55	17	v
LEAF_NODE	294:57	294:57	16	-
FIELD	294:59	294:63	16	td -> td_extrasamples
LEAF_NODE	294:59	294:59	17	td
LEAF_NODE	294:61	294:61	17	->
LEAF_NODE	294:63	294:63	17	td_extrasamples
REL_OPERATOR	294:79	294:79	16	>
LEAF_NODE	294:79	294:79	17	>
FIELD	294:81	294:81	16	1
LEAF_NODE	294:81	294:81	17	1
LEAF_NODE	294:82	294:82	16	)
LEAF_NODE	294:84	294:84	15	&&
EXPR	295:16	295:16	15	! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
UNARY_EXPR	295:16	295:66	16	! ( td -> td_samplesperpixel - td -> td_extrasamples > 1 )
UNARY_OPERATOR	295:16	295:16	17	!
LEAF_NODE	295:16	295:16	18	!
LEAF_NODE	295:17	295:17	17	(
FIELD	295:18	295:22	17	td -> td_samplesperpixel
LEAF_NODE	295:18	295:18	18	td
LEAF_NODE	295:20	295:20	18	->
LEAF_NODE	295:22	295:22	18	td_samplesperpixel
LEAF_NODE	295:41	295:41	17	-
FIELD	295:43	295:47	17	td -> td_extrasamples
LEAF_NODE	295:43	295:43	18	td
LEAF_NODE	295:45	295:45	18	->
LEAF_NODE	295:47	295:47	18	td_extrasamples
REL_OPERATOR	295:63	295:63	17	>
LEAF_NODE	295:63	295:63	18	>
FIELD	295:65	295:65	17	1
LEAF_NODE	295:65	295:65	18	1
LEAF_NODE	295:66	295:66	17	)
LEAF_NODE	295:67	295:67	10	)
STATEMENTS	296:12	303:12	10	
LEAF_NODE	296:12	296:12	11	{
STATEMENTS	297:20	302:20	11	
LEAF_NODE	297:20	297:20	12	TIFFWarningExt
LEAF_NODE	297:34	297:34	12	(
LEAF_NODE	297:35	297:35	12	tif
LEAF_NODE	297:38	297:38	12	->
LEAF_NODE	297:40	297:40	12	tif_clientdata
LEAF_NODE	297:54	297:54	12	,
LEAF_NODE	297:55	297:55	12	module
LEAF_NODE	297:61	297:61	12	,
LEAF_NODE	298:24	298:24	12	"SamplesPerPixel tag value is changing, "
LEAF_NODE	299:24	299:24	12	"but TransferFunction was read with a different value. Cancelling it"
LEAF_NODE	299:93	299:93	12	)
LEAF_NODE	299:94	299:94	12	;
EXPR_STATEMENT	300:20	300:63	12	TIFFClrFieldBit ( tif , FIELD_TRANSFERFUNCTION ) ;
EXPR	300:20	300:20	13	TIFFClrFieldBit ( tif , FIELD_TRANSFERFUNCTION )
FUNCTION_CALL	300:20	300:62	14	TIFFClrFieldBit ( tif , FIELD_TRANSFERFUNCTION )
CALLEE	300:20	300:20	15	TIFFClrFieldBit
LEAF_NODE	300:20	300:20	16	TIFFClrFieldBit
LEAF_NODE	300:35	300:35	15	(
ARGUMENT	300:36	300:36	15	tif
FIELD	300:36	300:36	16	tif
LEAF_NODE	300:36	300:36	17	tif
LEAF_NODE	300:39	300:39	15	,
ARGUMENT	300:40	300:40	15	FIELD_TRANSFERFUNCTION
FIELD	300:40	300:40	16	FIELD_TRANSFERFUNCTION
LEAF_NODE	300:40	300:40	17	FIELD_TRANSFERFUNCTION
LEAF_NODE	300:62	300:62	15	)
LEAF_NODE	300:63	300:63	13	;
EXPR_STATEMENT	301:20	301:57	12	_TIFFfree ( td -> td_transferfunction [ 0 ] ) ;
EXPR	301:20	301:20	13	_TIFFfree ( td -> td_transferfunction [ 0 ] )
FUNCTION_CALL	301:20	301:56	14	_TIFFfree ( td -> td_transferfunction [ 0 ] )
CALLEE	301:20	301:20	15	_TIFFfree
LEAF_NODE	301:20	301:20	16	_TIFFfree
LEAF_NODE	301:29	301:29	15	(
ARGUMENT	301:30	301:30	15	td -> td_transferfunction [ 0 ]
FIELD	301:30	301:55	16	td -> td_transferfunction [ 0 ]
LEAF_NODE	301:30	301:30	17	td
LEAF_NODE	301:32	301:32	17	->
LEAF_NODE	301:34	301:34	17	td_transferfunction
LEAF_NODE	301:53	301:53	17	[
EXPR	301:54	301:54	17	0
FIELD	301:54	301:54	18	0
LEAF_NODE	301:54	301:54	19	0
LEAF_NODE	301:55	301:55	17	]
LEAF_NODE	301:56	301:56	15	)
LEAF_NODE	301:57	301:57	13	;
EXPR_STATEMENT	302:20	302:53	12	td -> td_transferfunction [ 0 ] = NULL ;
EXPR	302:20	302:20	13	td -> td_transferfunction [ 0 ] = NULL
ASSIGN	302:20	302:49	14	td -> td_transferfunction [ 0 ] = NULL
LVAL	302:20	302:20	15	td -> td_transferfunction [ 0 ]
FIELD	302:20	302:45	16	td -> td_transferfunction [ 0 ]
LEAF_NODE	302:20	302:20	17	td
LEAF_NODE	302:22	302:22	17	->
LEAF_NODE	302:24	302:24	17	td_transferfunction
LEAF_NODE	302:43	302:43	17	[
EXPR	302:44	302:44	17	0
FIELD	302:44	302:44	18	0
LEAF_NODE	302:44	302:44	19	0
LEAF_NODE	302:45	302:45	17	]
ASSIGN_OP	302:47	302:47	15	=
LEAF_NODE	302:47	302:47	16	=
RVAL	302:49	302:49	15	NULL
FIELD	302:49	302:49	16	NULL
LEAF_NODE	302:49	302:49	17	NULL
LEAF_NODE	302:53	302:53	13	;
LEAF_NODE	303:12	303:12	11	}
LEAF_NODE	304:8	304:8	8	}
EXPR_STATEMENT	305:2	305:37	6	td -> td_samplesperpixel = ( uint16 ) v ;
EXPR	305:2	305:2	7	td -> td_samplesperpixel = ( uint16 ) v
ASSIGN	305:2	305:27	8	td -> td_samplesperpixel = ( uint16 ) v
LVAL	305:2	305:2	9	td -> td_samplesperpixel
FIELD	305:2	305:6	10	td -> td_samplesperpixel
LEAF_NODE	305:2	305:2	11	td
LEAF_NODE	305:4	305:4	11	->
LEAF_NODE	305:6	305:6	11	td_samplesperpixel
ASSIGN_OP	305:25	305:25	9	=
LEAF_NODE	305:25	305:25	10	=
RVAL	305:27	305:36	9	( uint16 ) v
LEAF_NODE	305:27	305:27	10	(
TYPE_NAME	305:28	305:28	10	uint16
LEAF_NODE	305:28	305:28	11	uint16
LEAF_NODE	305:34	305:34	10	)
FIELD	305:36	305:36	10	v
LEAF_NODE	305:36	305:36	11	v
LEAF_NODE	305:37	305:37	7	;
JUMP_STATEMENT	306:2	306:7	6	break DESTINATION ;
KEYWORD	306:2	306:2	7	break
LEAF_NODE	306:2	306:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	306:7	306:7	7	;
LABEL	307:1	307:26	6	case TIFFTAG_ROWSPERSTRIP :
LEAF_NODE	307:1	307:1	7	case
LEAF_NODE	307:6	307:6	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	307:26	307:26	7	:
EXPR_STATEMENT	308:2	308:35	6	v32 = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	308:2	308:2	7	v32 = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	308:2	308:8	8	v32 = ( uint32 ) va_arg ( ap , uint32 )
LVAL	308:2	308:2	9	v32
FIELD	308:2	308:2	10	v32
LEAF_NODE	308:2	308:2	11	v32
ASSIGN_OP	308:6	308:6	9	=
LEAF_NODE	308:6	308:6	10	=
RVAL	308:8	308:17	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	308:8	308:8	10	(
TYPE_NAME	308:9	308:9	10	uint32
LEAF_NODE	308:9	308:9	11	uint32
LEAF_NODE	308:15	308:15	10	)
FUNCTION_CALL	308:17	308:34	10	va_arg ( ap , uint32 )
CALLEE	308:17	308:17	11	va_arg
LEAF_NODE	308:17	308:17	12	va_arg
LEAF_NODE	308:23	308:23	11	(
ARGUMENT	308:24	308:24	11	ap
FIELD	308:24	308:24	12	ap
LEAF_NODE	308:24	308:24	13	ap
LEAF_NODE	308:26	308:26	11	,
ARGUMENT	308:28	308:28	11	uint32
FIELD	308:28	308:28	12	uint32
LEAF_NODE	308:28	308:28	13	uint32
LEAF_NODE	308:34	308:34	11	)
LEAF_NODE	308:35	308:35	7	;
SELECTION	309:2	310:3	6	
KEYWORD	309:2	309:2	7	if
LEAF_NODE	309:2	309:2	8	if
LEAF_NODE	309:5	309:5	7	(
CONDITION	309:6	309:6	7	v32 == 0
EXPR	309:6	309:13	8	v32 == 0
FIELD	309:6	309:6	9	v32
LEAF_NODE	309:6	309:6	10	v32
EQ_OPERATOR	309:10	309:10	9	==
LEAF_NODE	309:10	309:10	10	==
FIELD	309:13	309:13	9	0
LEAF_NODE	309:13	309:13	10	0
LEAF_NODE	309:14	309:14	7	)
STATEMENTS	310:3	310:3	7	
JUMP_STATEMENT	310:3	310:18	8	goto badvalue32 ;
KEYWORD	310:3	310:3	9	goto
LEAF_NODE	310:3	310:3	10	goto
DESTINATION	310:8	310:8	9	badvalue32
LEAF_NODE	310:8	310:8	10	badvalue32
LEAF_NODE	310:18	310:18	9	;
EXPR_STATEMENT	311:2	311:27	6	td -> td_rowsperstrip = v32 ;
EXPR	311:2	311:2	7	td -> td_rowsperstrip = v32
ASSIGN	311:2	311:24	8	td -> td_rowsperstrip = v32
LVAL	311:2	311:2	9	td -> td_rowsperstrip
FIELD	311:2	311:6	10	td -> td_rowsperstrip
LEAF_NODE	311:2	311:2	11	td
LEAF_NODE	311:4	311:4	11	->
LEAF_NODE	311:6	311:6	11	td_rowsperstrip
ASSIGN_OP	311:22	311:22	9	=
LEAF_NODE	311:22	311:22	10	=
RVAL	311:24	311:24	9	v32
FIELD	311:24	311:24	10	v32
LEAF_NODE	311:24	311:24	11	v32
LEAF_NODE	311:27	311:27	7	;
SELECTION	312:2	312:48	6	
KEYWORD	312:2	312:2	7	if
LEAF_NODE	312:2	312:2	8	if
LEAF_NODE	312:5	312:5	7	(
CONDITION	312:6	312:6	7	! TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
EXPR	312:6	312:6	8	! TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
UNARY_EXPR	312:6	312:7	9	! TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
UNARY_OPERATOR	312:6	312:6	10	!
LEAF_NODE	312:6	312:6	11	!
FUNCTION_CALL	312:7	312:45	10	TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
CALLEE	312:7	312:7	11	TIFFFieldSet
LEAF_NODE	312:7	312:7	12	TIFFFieldSet
LEAF_NODE	312:19	312:19	11	(
ARGUMENT	312:20	312:20	11	tif
FIELD	312:20	312:20	12	tif
LEAF_NODE	312:20	312:20	13	tif
LEAF_NODE	312:23	312:23	11	,
ARGUMENT	312:25	312:25	11	FIELD_TILEDIMENSIONS
FIELD	312:25	312:25	12	FIELD_TILEDIMENSIONS
LEAF_NODE	312:25	312:25	13	FIELD_TILEDIMENSIONS
LEAF_NODE	312:45	312:45	11	)
LEAF_NODE	312:46	312:46	7	)
STATEMENTS	312:48	315:2	7	
LEAF_NODE	312:48	312:48	8	{
STATEMENTS	313:3	314:3	8	
EXPR_STATEMENT	313:3	313:26	9	td -> td_tilelength = v32 ;
EXPR	313:3	313:3	10	td -> td_tilelength = v32
ASSIGN	313:3	313:23	11	td -> td_tilelength = v32
LVAL	313:3	313:3	12	td -> td_tilelength
FIELD	313:3	313:7	13	td -> td_tilelength
LEAF_NODE	313:3	313:3	14	td
LEAF_NODE	313:5	313:5	14	->
LEAF_NODE	313:7	313:7	14	td_tilelength
ASSIGN_OP	313:21	313:21	12	=
LEAF_NODE	313:21	313:21	13	=
RVAL	313:23	313:23	12	v32
FIELD	313:23	313:23	13	v32
LEAF_NODE	313:23	313:23	14	v32
LEAF_NODE	313:26	313:26	10	;
EXPR_STATEMENT	314:3	314:39	9	td -> td_tilewidth = td -> td_imagewidth ;
EXPR	314:3	314:3	10	td -> td_tilewidth = td -> td_imagewidth
ASSIGN	314:3	314:22	11	td -> td_tilewidth = td -> td_imagewidth
LVAL	314:3	314:3	12	td -> td_tilewidth
FIELD	314:3	314:7	13	td -> td_tilewidth
LEAF_NODE	314:3	314:3	14	td
LEAF_NODE	314:5	314:5	14	->
LEAF_NODE	314:7	314:7	14	td_tilewidth
ASSIGN_OP	314:20	314:20	12	=
LEAF_NODE	314:20	314:20	13	=
RVAL	314:22	314:22	12	td -> td_imagewidth
FIELD	314:22	314:26	13	td -> td_imagewidth
LEAF_NODE	314:22	314:22	14	td
LEAF_NODE	314:24	314:24	14	->
LEAF_NODE	314:26	314:26	14	td_imagewidth
LEAF_NODE	314:39	314:39	10	;
LEAF_NODE	315:2	315:2	8	}
JUMP_STATEMENT	316:2	316:7	6	break DESTINATION ;
KEYWORD	316:2	316:2	7	break
LEAF_NODE	316:2	316:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	316:7	316:7	7	;
LABEL	317:1	317:28	6	case TIFFTAG_MINSAMPLEVALUE :
LEAF_NODE	317:1	317:1	7	case
LEAF_NODE	317:6	317:6	7	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	317:28	317:28	7	:
EXPR_STATEMENT	318:2	318:57	6	td -> td_minsamplevalue = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	318:2	318:2	7	td -> td_minsamplevalue = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	318:2	318:26	8	td -> td_minsamplevalue = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	318:2	318:2	9	td -> td_minsamplevalue
FIELD	318:2	318:6	10	td -> td_minsamplevalue
LEAF_NODE	318:2	318:2	11	td
LEAF_NODE	318:4	318:4	11	->
LEAF_NODE	318:6	318:6	11	td_minsamplevalue
ASSIGN_OP	318:24	318:24	9	=
LEAF_NODE	318:24	318:24	10	=
RVAL	318:26	318:35	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	318:26	318:26	10	(
TYPE_NAME	318:27	318:27	10	uint16
LEAF_NODE	318:27	318:27	11	uint16
LEAF_NODE	318:33	318:33	10	)
FUNCTION_CALL	318:35	318:56	10	va_arg ( ap , uint16_vap )
CALLEE	318:35	318:35	11	va_arg
LEAF_NODE	318:35	318:35	12	va_arg
LEAF_NODE	318:41	318:41	11	(
ARGUMENT	318:42	318:42	11	ap
FIELD	318:42	318:42	12	ap
LEAF_NODE	318:42	318:42	13	ap
LEAF_NODE	318:44	318:44	11	,
ARGUMENT	318:46	318:46	11	uint16_vap
FIELD	318:46	318:46	12	uint16_vap
LEAF_NODE	318:46	318:46	13	uint16_vap
LEAF_NODE	318:56	318:56	11	)
LEAF_NODE	318:57	318:57	7	;
JUMP_STATEMENT	319:2	319:7	6	break DESTINATION ;
KEYWORD	319:2	319:2	7	break
LEAF_NODE	319:2	319:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	319:7	319:7	7	;
LABEL	320:1	320:28	6	case TIFFTAG_MAXSAMPLEVALUE :
LEAF_NODE	320:1	320:1	7	case
LEAF_NODE	320:6	320:6	7	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	320:28	320:28	7	:
EXPR_STATEMENT	321:2	321:57	6	td -> td_maxsamplevalue = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	321:2	321:2	7	td -> td_maxsamplevalue = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	321:2	321:26	8	td -> td_maxsamplevalue = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	321:2	321:2	9	td -> td_maxsamplevalue
FIELD	321:2	321:6	10	td -> td_maxsamplevalue
LEAF_NODE	321:2	321:2	11	td
LEAF_NODE	321:4	321:4	11	->
LEAF_NODE	321:6	321:6	11	td_maxsamplevalue
ASSIGN_OP	321:24	321:24	9	=
LEAF_NODE	321:24	321:24	10	=
RVAL	321:26	321:35	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	321:26	321:26	10	(
TYPE_NAME	321:27	321:27	10	uint16
LEAF_NODE	321:27	321:27	11	uint16
LEAF_NODE	321:33	321:33	10	)
FUNCTION_CALL	321:35	321:56	10	va_arg ( ap , uint16_vap )
CALLEE	321:35	321:35	11	va_arg
LEAF_NODE	321:35	321:35	12	va_arg
LEAF_NODE	321:41	321:41	11	(
ARGUMENT	321:42	321:42	11	ap
FIELD	321:42	321:42	12	ap
LEAF_NODE	321:42	321:42	13	ap
LEAF_NODE	321:44	321:44	11	,
ARGUMENT	321:46	321:46	11	uint16_vap
FIELD	321:46	321:46	12	uint16_vap
LEAF_NODE	321:46	321:46	13	uint16_vap
LEAF_NODE	321:56	321:56	11	)
LEAF_NODE	321:57	321:57	7	;
JUMP_STATEMENT	322:2	322:7	6	break DESTINATION ;
KEYWORD	322:2	322:2	7	break
LEAF_NODE	322:2	322:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	322:7	322:7	7	;
LABEL	323:1	323:29	6	case TIFFTAG_SMINSAMPLEVALUE :
LEAF_NODE	323:1	323:1	7	case
LEAF_NODE	323:6	323:6	7	TIFFTAG_SMINSAMPLEVALUE
LEAF_NODE	323:29	323:29	7	:
SELECTION	324:2	325:3	6	
KEYWORD	324:2	324:2	7	if
LEAF_NODE	324:2	324:2	8	if
LEAF_NODE	324:5	324:5	7	(
CONDITION	324:6	324:6	7	tif -> tif_flags & TIFF_PERSAMPLE
EXPR	324:6	324:23	8	tif -> tif_flags & TIFF_PERSAMPLE
FIELD	324:6	324:11	9	tif -> tif_flags
LEAF_NODE	324:6	324:6	10	tif
LEAF_NODE	324:9	324:9	10	->
LEAF_NODE	324:11	324:11	10	tif_flags
LEAF_NODE	324:21	324:21	9	&
FIELD	324:23	324:23	9	TIFF_PERSAMPLE
LEAF_NODE	324:23	324:23	10	TIFF_PERSAMPLE
LEAF_NODE	324:37	324:37	7	)
STATEMENTS	325:3	325:3	7	
LEAF_NODE	325:3	325:3	8	_TIFFsetDoubleArray
LEAF_NODE	325:22	325:22	6	(
LEAF_NODE	325:23	325:23	6	&
LEAF_NODE	325:24	325:24	6	td
LEAF_NODE	325:26	325:26	6	->
LEAF_NODE	325:28	325:28	6	td_sminsamplevalue
LEAF_NODE	325:46	325:46	6	,
LEAF_NODE	325:48	325:48	6	va_arg
LEAF_NODE	325:54	325:54	6	(
LEAF_NODE	325:55	325:55	6	ap
LEAF_NODE	325:57	325:57	6	,
LEAF_NODE	325:59	325:59	6	double
LEAF_NODE	325:65	325:65	6	*
LEAF_NODE	325:66	325:66	6	)
LEAF_NODE	325:67	325:67	6	,
LEAF_NODE	325:69	325:69	6	td
LEAF_NODE	325:71	325:71	6	->
LEAF_NODE	325:73	325:73	6	td_samplesperpixel
LEAF_NODE	325:91	325:91	6	)
LEAF_NODE	325:92	325:92	6	;
SELECTION	326:2	327:3	6	
KEYWORD	326:2	326:2	7	else
LEAF_NODE	326:2	326:2	8	else
STATEMENTS	327:3	327:3	7	
EXPR_STATEMENT	327:3	327:94	8	setDoubleArrayOneValue ( & td -> td_sminsamplevalue , va_arg ( ap , double ) , td -> td_samplesperpixel ) ;
EXPR	327:3	327:3	9	setDoubleArrayOneValue ( & td -> td_sminsamplevalue , va_arg ( ap , double ) , td -> td_samplesperpixel )
FUNCTION_CALL	327:3	327:93	10	setDoubleArrayOneValue ( & td -> td_sminsamplevalue , va_arg ( ap , double ) , td -> td_samplesperpixel )
CALLEE	327:3	327:3	11	setDoubleArrayOneValue
LEAF_NODE	327:3	327:3	12	setDoubleArrayOneValue
LEAF_NODE	327:25	327:25	11	(
ARGUMENT	327:26	327:26	11	& td -> td_sminsamplevalue
UNARY_EXPR	327:26	327:27	12	& td -> td_sminsamplevalue
UNARY_OPERATOR	327:26	327:26	13	&
LEAF_NODE	327:26	327:26	14	&
FIELD	327:27	327:31	13	td -> td_sminsamplevalue
LEAF_NODE	327:27	327:27	14	td
LEAF_NODE	327:29	327:29	14	->
LEAF_NODE	327:31	327:31	14	td_sminsamplevalue
LEAF_NODE	327:49	327:49	11	,
ARGUMENT	327:51	327:51	11	va_arg ( ap , double )
FUNCTION_CALL	327:51	327:68	12	va_arg ( ap , double )
CALLEE	327:51	327:51	13	va_arg
LEAF_NODE	327:51	327:51	14	va_arg
LEAF_NODE	327:57	327:57	13	(
ARGUMENT	327:58	327:58	13	ap
FIELD	327:58	327:58	14	ap
LEAF_NODE	327:58	327:58	15	ap
LEAF_NODE	327:60	327:60	13	,
ARGUMENT	327:62	327:62	13	double
FIELD	327:62	327:62	14	double
LEAF_NODE	327:62	327:62	15	double
LEAF_NODE	327:68	327:68	13	)
LEAF_NODE	327:69	327:69	11	,
ARGUMENT	327:71	327:71	11	td -> td_samplesperpixel
FIELD	327:71	327:75	12	td -> td_samplesperpixel
LEAF_NODE	327:71	327:71	13	td
LEAF_NODE	327:73	327:73	13	->
LEAF_NODE	327:75	327:75	13	td_samplesperpixel
LEAF_NODE	327:93	327:93	11	)
LEAF_NODE	327:94	327:94	9	;
JUMP_STATEMENT	328:2	328:7	6	break DESTINATION ;
KEYWORD	328:2	328:2	7	break
LEAF_NODE	328:2	328:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	328:7	328:7	7	;
LABEL	329:1	329:29	6	case TIFFTAG_SMAXSAMPLEVALUE :
LEAF_NODE	329:1	329:1	7	case
LEAF_NODE	329:6	329:6	7	TIFFTAG_SMAXSAMPLEVALUE
LEAF_NODE	329:29	329:29	7	:
SELECTION	330:2	331:3	6	
KEYWORD	330:2	330:2	7	if
LEAF_NODE	330:2	330:2	8	if
LEAF_NODE	330:5	330:5	7	(
CONDITION	330:6	330:6	7	tif -> tif_flags & TIFF_PERSAMPLE
EXPR	330:6	330:23	8	tif -> tif_flags & TIFF_PERSAMPLE
FIELD	330:6	330:11	9	tif -> tif_flags
LEAF_NODE	330:6	330:6	10	tif
LEAF_NODE	330:9	330:9	10	->
LEAF_NODE	330:11	330:11	10	tif_flags
LEAF_NODE	330:21	330:21	9	&
FIELD	330:23	330:23	9	TIFF_PERSAMPLE
LEAF_NODE	330:23	330:23	10	TIFF_PERSAMPLE
LEAF_NODE	330:37	330:37	7	)
STATEMENTS	331:3	331:3	7	
LEAF_NODE	331:3	331:3	8	_TIFFsetDoubleArray
LEAF_NODE	331:22	331:22	6	(
LEAF_NODE	331:23	331:23	6	&
LEAF_NODE	331:24	331:24	6	td
LEAF_NODE	331:26	331:26	6	->
LEAF_NODE	331:28	331:28	6	td_smaxsamplevalue
LEAF_NODE	331:46	331:46	6	,
LEAF_NODE	331:48	331:48	6	va_arg
LEAF_NODE	331:54	331:54	6	(
LEAF_NODE	331:55	331:55	6	ap
LEAF_NODE	331:57	331:57	6	,
LEAF_NODE	331:59	331:59	6	double
LEAF_NODE	331:65	331:65	6	*
LEAF_NODE	331:66	331:66	6	)
LEAF_NODE	331:67	331:67	6	,
LEAF_NODE	331:69	331:69	6	td
LEAF_NODE	331:71	331:71	6	->
LEAF_NODE	331:73	331:73	6	td_samplesperpixel
LEAF_NODE	331:91	331:91	6	)
LEAF_NODE	331:92	331:92	6	;
SELECTION	332:2	333:3	6	
KEYWORD	332:2	332:2	7	else
LEAF_NODE	332:2	332:2	8	else
STATEMENTS	333:3	333:3	7	
EXPR_STATEMENT	333:3	333:94	8	setDoubleArrayOneValue ( & td -> td_smaxsamplevalue , va_arg ( ap , double ) , td -> td_samplesperpixel ) ;
EXPR	333:3	333:3	9	setDoubleArrayOneValue ( & td -> td_smaxsamplevalue , va_arg ( ap , double ) , td -> td_samplesperpixel )
FUNCTION_CALL	333:3	333:93	10	setDoubleArrayOneValue ( & td -> td_smaxsamplevalue , va_arg ( ap , double ) , td -> td_samplesperpixel )
CALLEE	333:3	333:3	11	setDoubleArrayOneValue
LEAF_NODE	333:3	333:3	12	setDoubleArrayOneValue
LEAF_NODE	333:25	333:25	11	(
ARGUMENT	333:26	333:26	11	& td -> td_smaxsamplevalue
UNARY_EXPR	333:26	333:27	12	& td -> td_smaxsamplevalue
UNARY_OPERATOR	333:26	333:26	13	&
LEAF_NODE	333:26	333:26	14	&
FIELD	333:27	333:31	13	td -> td_smaxsamplevalue
LEAF_NODE	333:27	333:27	14	td
LEAF_NODE	333:29	333:29	14	->
LEAF_NODE	333:31	333:31	14	td_smaxsamplevalue
LEAF_NODE	333:49	333:49	11	,
ARGUMENT	333:51	333:51	11	va_arg ( ap , double )
FUNCTION_CALL	333:51	333:68	12	va_arg ( ap , double )
CALLEE	333:51	333:51	13	va_arg
LEAF_NODE	333:51	333:51	14	va_arg
LEAF_NODE	333:57	333:57	13	(
ARGUMENT	333:58	333:58	13	ap
FIELD	333:58	333:58	14	ap
LEAF_NODE	333:58	333:58	15	ap
LEAF_NODE	333:60	333:60	13	,
ARGUMENT	333:62	333:62	13	double
FIELD	333:62	333:62	14	double
LEAF_NODE	333:62	333:62	15	double
LEAF_NODE	333:68	333:68	13	)
LEAF_NODE	333:69	333:69	11	,
ARGUMENT	333:71	333:71	11	td -> td_samplesperpixel
FIELD	333:71	333:75	12	td -> td_samplesperpixel
LEAF_NODE	333:71	333:71	13	td
LEAF_NODE	333:73	333:73	13	->
LEAF_NODE	333:75	333:75	13	td_samplesperpixel
LEAF_NODE	333:93	333:93	11	)
LEAF_NODE	333:94	333:94	9	;
JUMP_STATEMENT	334:2	334:7	6	break DESTINATION ;
KEYWORD	334:2	334:2	7	break
LEAF_NODE	334:2	334:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	334:7	334:7	7	;
LABEL	335:1	335:25	6	case TIFFTAG_XRESOLUTION :
LEAF_NODE	335:1	335:1	7	case
LEAF_NODE	335:6	335:6	7	TIFFTAG_XRESOLUTION
LEAF_NODE	335:25	335:25	7	:
EXPR_STATEMENT	336:8	336:35	6	dblval = va_arg ( ap , double ) ;
EXPR	336:8	336:8	7	dblval = va_arg ( ap , double )
ASSIGN	336:8	336:17	8	dblval = va_arg ( ap , double )
LVAL	336:8	336:8	9	dblval
FIELD	336:8	336:8	10	dblval
LEAF_NODE	336:8	336:8	11	dblval
ASSIGN_OP	336:15	336:15	9	=
LEAF_NODE	336:15	336:15	10	=
RVAL	336:17	336:17	9	va_arg ( ap , double )
FUNCTION_CALL	336:17	336:34	10	va_arg ( ap , double )
CALLEE	336:17	336:17	11	va_arg
LEAF_NODE	336:17	336:17	12	va_arg
LEAF_NODE	336:23	336:23	11	(
ARGUMENT	336:24	336:24	11	ap
FIELD	336:24	336:24	12	ap
LEAF_NODE	336:24	336:24	13	ap
LEAF_NODE	336:26	336:26	11	,
ARGUMENT	336:28	336:28	11	double
FIELD	336:28	336:28	12	double
LEAF_NODE	336:28	336:28	13	double
LEAF_NODE	336:34	336:34	11	)
LEAF_NODE	336:35	336:35	7	;
SELECTION	337:8	338:12	6	
KEYWORD	337:8	337:8	7	if
LEAF_NODE	337:8	337:8	8	if
LEAF_NODE	337:10	337:10	7	(
CONDITION	337:12	337:12	7	dblval < 0
EXPR	337:12	337:21	8	dblval < 0
FIELD	337:12	337:12	9	dblval
LEAF_NODE	337:12	337:12	10	dblval
REL_OPERATOR	337:19	337:19	9	<
LEAF_NODE	337:19	337:19	10	<
FIELD	337:21	337:21	9	0
LEAF_NODE	337:21	337:21	10	0
LEAF_NODE	337:23	337:23	7	)
STATEMENTS	338:12	338:12	7	
JUMP_STATEMENT	338:12	338:31	8	goto badvaluedouble ;
KEYWORD	338:12	338:12	9	goto
LEAF_NODE	338:12	338:12	10	goto
DESTINATION	338:17	338:17	9	badvaluedouble
LEAF_NODE	338:17	338:17	10	badvaluedouble
LEAF_NODE	338:31	338:31	9	;
EXPR_STATEMENT	339:2	339:56	6	td -> td_xresolution = _TIFFClampDoubleToFloat ( dblval ) ;
EXPR	339:2	339:2	7	td -> td_xresolution = _TIFFClampDoubleToFloat ( dblval )
ASSIGN	339:2	339:23	8	td -> td_xresolution = _TIFFClampDoubleToFloat ( dblval )
LVAL	339:2	339:2	9	td -> td_xresolution
FIELD	339:2	339:6	10	td -> td_xresolution
LEAF_NODE	339:2	339:2	11	td
LEAF_NODE	339:4	339:4	11	->
LEAF_NODE	339:6	339:6	11	td_xresolution
ASSIGN_OP	339:21	339:21	9	=
LEAF_NODE	339:21	339:21	10	=
RVAL	339:23	339:23	9	_TIFFClampDoubleToFloat ( dblval )
FUNCTION_CALL	339:23	339:55	10	_TIFFClampDoubleToFloat ( dblval )
CALLEE	339:23	339:23	11	_TIFFClampDoubleToFloat
LEAF_NODE	339:23	339:23	12	_TIFFClampDoubleToFloat
LEAF_NODE	339:46	339:46	11	(
ARGUMENT	339:48	339:48	11	dblval
FIELD	339:48	339:48	12	dblval
LEAF_NODE	339:48	339:48	13	dblval
LEAF_NODE	339:55	339:55	11	)
LEAF_NODE	339:56	339:56	7	;
JUMP_STATEMENT	340:2	340:7	6	break DESTINATION ;
KEYWORD	340:2	340:2	7	break
LEAF_NODE	340:2	340:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	340:7	340:7	7	;
LABEL	341:1	341:25	6	case TIFFTAG_YRESOLUTION :
LEAF_NODE	341:1	341:1	7	case
LEAF_NODE	341:6	341:6	7	TIFFTAG_YRESOLUTION
LEAF_NODE	341:25	341:25	7	:
EXPR_STATEMENT	342:8	342:35	6	dblval = va_arg ( ap , double ) ;
EXPR	342:8	342:8	7	dblval = va_arg ( ap , double )
ASSIGN	342:8	342:17	8	dblval = va_arg ( ap , double )
LVAL	342:8	342:8	9	dblval
FIELD	342:8	342:8	10	dblval
LEAF_NODE	342:8	342:8	11	dblval
ASSIGN_OP	342:15	342:15	9	=
LEAF_NODE	342:15	342:15	10	=
RVAL	342:17	342:17	9	va_arg ( ap , double )
FUNCTION_CALL	342:17	342:34	10	va_arg ( ap , double )
CALLEE	342:17	342:17	11	va_arg
LEAF_NODE	342:17	342:17	12	va_arg
LEAF_NODE	342:23	342:23	11	(
ARGUMENT	342:24	342:24	11	ap
FIELD	342:24	342:24	12	ap
LEAF_NODE	342:24	342:24	13	ap
LEAF_NODE	342:26	342:26	11	,
ARGUMENT	342:28	342:28	11	double
FIELD	342:28	342:28	12	double
LEAF_NODE	342:28	342:28	13	double
LEAF_NODE	342:34	342:34	11	)
LEAF_NODE	342:35	342:35	7	;
SELECTION	343:8	344:12	6	
KEYWORD	343:8	343:8	7	if
LEAF_NODE	343:8	343:8	8	if
LEAF_NODE	343:10	343:10	7	(
CONDITION	343:12	343:12	7	dblval < 0
EXPR	343:12	343:21	8	dblval < 0
FIELD	343:12	343:12	9	dblval
LEAF_NODE	343:12	343:12	10	dblval
REL_OPERATOR	343:19	343:19	9	<
LEAF_NODE	343:19	343:19	10	<
FIELD	343:21	343:21	9	0
LEAF_NODE	343:21	343:21	10	0
LEAF_NODE	343:23	343:23	7	)
STATEMENTS	344:12	344:12	7	
JUMP_STATEMENT	344:12	344:31	8	goto badvaluedouble ;
KEYWORD	344:12	344:12	9	goto
LEAF_NODE	344:12	344:12	10	goto
DESTINATION	344:17	344:17	9	badvaluedouble
LEAF_NODE	344:17	344:17	10	badvaluedouble
LEAF_NODE	344:31	344:31	9	;
EXPR_STATEMENT	345:2	345:56	6	td -> td_yresolution = _TIFFClampDoubleToFloat ( dblval ) ;
EXPR	345:2	345:2	7	td -> td_yresolution = _TIFFClampDoubleToFloat ( dblval )
ASSIGN	345:2	345:23	8	td -> td_yresolution = _TIFFClampDoubleToFloat ( dblval )
LVAL	345:2	345:2	9	td -> td_yresolution
FIELD	345:2	345:6	10	td -> td_yresolution
LEAF_NODE	345:2	345:2	11	td
LEAF_NODE	345:4	345:4	11	->
LEAF_NODE	345:6	345:6	11	td_yresolution
ASSIGN_OP	345:21	345:21	9	=
LEAF_NODE	345:21	345:21	10	=
RVAL	345:23	345:23	9	_TIFFClampDoubleToFloat ( dblval )
FUNCTION_CALL	345:23	345:55	10	_TIFFClampDoubleToFloat ( dblval )
CALLEE	345:23	345:23	11	_TIFFClampDoubleToFloat
LEAF_NODE	345:23	345:23	12	_TIFFClampDoubleToFloat
LEAF_NODE	345:46	345:46	11	(
ARGUMENT	345:48	345:48	11	dblval
FIELD	345:48	345:48	12	dblval
LEAF_NODE	345:48	345:48	13	dblval
LEAF_NODE	345:55	345:55	11	)
LEAF_NODE	345:56	345:56	7	;
JUMP_STATEMENT	346:2	346:7	6	break DESTINATION ;
KEYWORD	346:2	346:2	7	break
LEAF_NODE	346:2	346:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	346:7	346:7	7	;
LABEL	347:1	347:26	6	case TIFFTAG_PLANARCONFIG :
LEAF_NODE	347:1	347:1	7	case
LEAF_NODE	347:6	347:6	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	347:26	347:26	7	:
EXPR_STATEMENT	348:2	348:37	6	v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	348:2	348:2	7	v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	348:2	348:6	8	v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	348:2	348:2	9	v
FIELD	348:2	348:2	10	v
LEAF_NODE	348:2	348:2	11	v
ASSIGN_OP	348:4	348:4	9	=
LEAF_NODE	348:4	348:4	10	=
RVAL	348:6	348:15	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	348:6	348:6	10	(
TYPE_NAME	348:7	348:7	10	uint16
LEAF_NODE	348:7	348:7	11	uint16
LEAF_NODE	348:13	348:13	10	)
FUNCTION_CALL	348:15	348:36	10	va_arg ( ap , uint16_vap )
CALLEE	348:15	348:15	11	va_arg
LEAF_NODE	348:15	348:15	12	va_arg
LEAF_NODE	348:21	348:21	11	(
ARGUMENT	348:22	348:22	11	ap
FIELD	348:22	348:22	12	ap
LEAF_NODE	348:22	348:22	13	ap
LEAF_NODE	348:24	348:24	11	,
ARGUMENT	348:26	348:26	11	uint16_vap
FIELD	348:26	348:26	12	uint16_vap
LEAF_NODE	348:26	348:26	13	uint16_vap
LEAF_NODE	348:36	348:36	11	)
LEAF_NODE	348:37	348:37	7	;
SELECTION	349:2	350:3	6	
KEYWORD	349:2	349:2	7	if
LEAF_NODE	349:2	349:2	8	if
LEAF_NODE	349:5	349:5	7	(
CONDITION	349:6	349:6	7	v != PLANARCONFIG_CONTIG && v != PLANARCONFIG_SEPARATE
EXPR	349:6	349:6	8	v != PLANARCONFIG_CONTIG && v != PLANARCONFIG_SEPARATE
AND	349:6	349:34	9	v != PLANARCONFIG_CONTIG && v != PLANARCONFIG_SEPARATE
EXPR	349:6	349:11	10	v != PLANARCONFIG_CONTIG
FIELD	349:6	349:6	11	v
LEAF_NODE	349:6	349:6	12	v
EQ_OPERATOR	349:8	349:8	11	!=
LEAF_NODE	349:8	349:8	12	!=
FIELD	349:11	349:11	11	PLANARCONFIG_CONTIG
LEAF_NODE	349:11	349:11	12	PLANARCONFIG_CONTIG
LEAF_NODE	349:31	349:31	10	&&
EXPR	349:34	349:39	10	v != PLANARCONFIG_SEPARATE
FIELD	349:34	349:34	11	v
LEAF_NODE	349:34	349:34	12	v
EQ_OPERATOR	349:36	349:36	11	!=
LEAF_NODE	349:36	349:36	12	!=
FIELD	349:39	349:39	11	PLANARCONFIG_SEPARATE
LEAF_NODE	349:39	349:39	12	PLANARCONFIG_SEPARATE
LEAF_NODE	349:60	349:60	7	)
STATEMENTS	350:3	350:3	7	
JUMP_STATEMENT	350:3	350:16	8	goto badvalue ;
KEYWORD	350:3	350:3	9	goto
LEAF_NODE	350:3	350:3	10	goto
DESTINATION	350:8	350:8	9	badvalue
LEAF_NODE	350:8	350:8	10	badvalue
LEAF_NODE	350:16	350:16	9	;
EXPR_STATEMENT	351:2	351:34	6	td -> td_planarconfig = ( uint16 ) v ;
EXPR	351:2	351:2	7	td -> td_planarconfig = ( uint16 ) v
ASSIGN	351:2	351:24	8	td -> td_planarconfig = ( uint16 ) v
LVAL	351:2	351:2	9	td -> td_planarconfig
FIELD	351:2	351:6	10	td -> td_planarconfig
LEAF_NODE	351:2	351:2	11	td
LEAF_NODE	351:4	351:4	11	->
LEAF_NODE	351:6	351:6	11	td_planarconfig
ASSIGN_OP	351:22	351:22	9	=
LEAF_NODE	351:22	351:22	10	=
RVAL	351:24	351:33	9	( uint16 ) v
LEAF_NODE	351:24	351:24	10	(
TYPE_NAME	351:25	351:25	10	uint16
LEAF_NODE	351:25	351:25	11	uint16
LEAF_NODE	351:31	351:31	10	)
FIELD	351:33	351:33	10	v
LEAF_NODE	351:33	351:33	11	v
LEAF_NODE	351:34	351:34	7	;
JUMP_STATEMENT	352:2	352:7	6	break DESTINATION ;
KEYWORD	352:2	352:2	7	break
LEAF_NODE	352:2	352:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	352:7	352:7	7	;
LABEL	353:1	353:23	6	case TIFFTAG_XPOSITION :
LEAF_NODE	353:1	353:1	7	case
LEAF_NODE	353:6	353:6	7	TIFFTAG_XPOSITION
LEAF_NODE	353:23	353:23	7	:
EXPR_STATEMENT	354:2	354:66	6	td -> td_xposition = _TIFFClampDoubleToFloat ( va_arg ( ap , double ) ) ;
EXPR	354:2	354:2	7	td -> td_xposition = _TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
ASSIGN	354:2	354:21	8	td -> td_xposition = _TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
LVAL	354:2	354:2	9	td -> td_xposition
FIELD	354:2	354:6	10	td -> td_xposition
LEAF_NODE	354:2	354:2	11	td
LEAF_NODE	354:4	354:4	11	->
LEAF_NODE	354:6	354:6	11	td_xposition
ASSIGN_OP	354:19	354:19	9	=
LEAF_NODE	354:19	354:19	10	=
RVAL	354:21	354:21	9	_TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
FUNCTION_CALL	354:21	354:65	10	_TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
CALLEE	354:21	354:21	11	_TIFFClampDoubleToFloat
LEAF_NODE	354:21	354:21	12	_TIFFClampDoubleToFloat
LEAF_NODE	354:44	354:44	11	(
ARGUMENT	354:46	354:46	11	va_arg ( ap , double )
FUNCTION_CALL	354:46	354:63	12	va_arg ( ap , double )
CALLEE	354:46	354:46	13	va_arg
LEAF_NODE	354:46	354:46	14	va_arg
LEAF_NODE	354:52	354:52	13	(
ARGUMENT	354:53	354:53	13	ap
FIELD	354:53	354:53	14	ap
LEAF_NODE	354:53	354:53	15	ap
LEAF_NODE	354:55	354:55	13	,
ARGUMENT	354:57	354:57	13	double
FIELD	354:57	354:57	14	double
LEAF_NODE	354:57	354:57	15	double
LEAF_NODE	354:63	354:63	13	)
LEAF_NODE	354:65	354:65	11	)
LEAF_NODE	354:66	354:66	7	;
JUMP_STATEMENT	355:2	355:7	6	break DESTINATION ;
KEYWORD	355:2	355:2	7	break
LEAF_NODE	355:2	355:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	355:7	355:7	7	;
LABEL	356:1	356:23	6	case TIFFTAG_YPOSITION :
LEAF_NODE	356:1	356:1	7	case
LEAF_NODE	356:6	356:6	7	TIFFTAG_YPOSITION
LEAF_NODE	356:23	356:23	7	:
EXPR_STATEMENT	357:2	357:66	6	td -> td_yposition = _TIFFClampDoubleToFloat ( va_arg ( ap , double ) ) ;
EXPR	357:2	357:2	7	td -> td_yposition = _TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
ASSIGN	357:2	357:21	8	td -> td_yposition = _TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
LVAL	357:2	357:2	9	td -> td_yposition
FIELD	357:2	357:6	10	td -> td_yposition
LEAF_NODE	357:2	357:2	11	td
LEAF_NODE	357:4	357:4	11	->
LEAF_NODE	357:6	357:6	11	td_yposition
ASSIGN_OP	357:19	357:19	9	=
LEAF_NODE	357:19	357:19	10	=
RVAL	357:21	357:21	9	_TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
FUNCTION_CALL	357:21	357:65	10	_TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
CALLEE	357:21	357:21	11	_TIFFClampDoubleToFloat
LEAF_NODE	357:21	357:21	12	_TIFFClampDoubleToFloat
LEAF_NODE	357:44	357:44	11	(
ARGUMENT	357:46	357:46	11	va_arg ( ap , double )
FUNCTION_CALL	357:46	357:63	12	va_arg ( ap , double )
CALLEE	357:46	357:46	13	va_arg
LEAF_NODE	357:46	357:46	14	va_arg
LEAF_NODE	357:52	357:52	13	(
ARGUMENT	357:53	357:53	13	ap
FIELD	357:53	357:53	14	ap
LEAF_NODE	357:53	357:53	15	ap
LEAF_NODE	357:55	357:55	13	,
ARGUMENT	357:57	357:57	13	double
FIELD	357:57	357:57	14	double
LEAF_NODE	357:57	357:57	15	double
LEAF_NODE	357:63	357:63	13	)
LEAF_NODE	357:65	357:65	11	)
LEAF_NODE	357:66	357:66	7	;
JUMP_STATEMENT	358:2	358:7	6	break DESTINATION ;
KEYWORD	358:2	358:2	7	break
LEAF_NODE	358:2	358:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	358:7	358:7	7	;
LABEL	359:1	359:28	6	case TIFFTAG_RESOLUTIONUNIT :
LEAF_NODE	359:1	359:1	7	case
LEAF_NODE	359:6	359:6	7	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	359:28	359:28	7	:
EXPR_STATEMENT	360:2	360:37	6	v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	360:2	360:2	7	v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	360:2	360:6	8	v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	360:2	360:2	9	v
FIELD	360:2	360:2	10	v
LEAF_NODE	360:2	360:2	11	v
ASSIGN_OP	360:4	360:4	9	=
LEAF_NODE	360:4	360:4	10	=
RVAL	360:6	360:15	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	360:6	360:6	10	(
TYPE_NAME	360:7	360:7	10	uint16
LEAF_NODE	360:7	360:7	11	uint16
LEAF_NODE	360:13	360:13	10	)
FUNCTION_CALL	360:15	360:36	10	va_arg ( ap , uint16_vap )
CALLEE	360:15	360:15	11	va_arg
LEAF_NODE	360:15	360:15	12	va_arg
LEAF_NODE	360:21	360:21	11	(
ARGUMENT	360:22	360:22	11	ap
FIELD	360:22	360:22	12	ap
LEAF_NODE	360:22	360:22	13	ap
LEAF_NODE	360:24	360:24	11	,
ARGUMENT	360:26	360:26	11	uint16_vap
FIELD	360:26	360:26	12	uint16_vap
LEAF_NODE	360:26	360:26	13	uint16_vap
LEAF_NODE	360:36	360:36	11	)
LEAF_NODE	360:37	360:37	7	;
SELECTION	361:2	362:3	6	
KEYWORD	361:2	361:2	7	if
LEAF_NODE	361:2	361:2	8	if
LEAF_NODE	361:5	361:5	7	(
CONDITION	361:6	361:6	7	v < RESUNIT_NONE || RESUNIT_CENTIMETER < v
EXPR	361:6	361:6	8	v < RESUNIT_NONE || RESUNIT_CENTIMETER < v
OR	361:6	361:26	9	v < RESUNIT_NONE || RESUNIT_CENTIMETER < v
EXPR	361:6	361:10	10	v < RESUNIT_NONE
FIELD	361:6	361:6	11	v
LEAF_NODE	361:6	361:6	12	v
REL_OPERATOR	361:8	361:8	11	<
LEAF_NODE	361:8	361:8	12	<
FIELD	361:10	361:10	11	RESUNIT_NONE
LEAF_NODE	361:10	361:10	12	RESUNIT_NONE
LEAF_NODE	361:23	361:23	10	||
EXPR	361:26	361:47	10	RESUNIT_CENTIMETER < v
FIELD	361:26	361:26	11	RESUNIT_CENTIMETER
LEAF_NODE	361:26	361:26	12	RESUNIT_CENTIMETER
REL_OPERATOR	361:45	361:45	11	<
LEAF_NODE	361:45	361:45	12	<
FIELD	361:47	361:47	11	v
LEAF_NODE	361:47	361:47	12	v
LEAF_NODE	361:48	361:48	7	)
STATEMENTS	362:3	362:3	7	
JUMP_STATEMENT	362:3	362:16	8	goto badvalue ;
KEYWORD	362:3	362:3	9	goto
LEAF_NODE	362:3	362:3	10	goto
DESTINATION	362:8	362:8	9	badvalue
LEAF_NODE	362:8	362:8	10	badvalue
LEAF_NODE	362:16	362:16	9	;
EXPR_STATEMENT	363:2	363:36	6	td -> td_resolutionunit = ( uint16 ) v ;
EXPR	363:2	363:2	7	td -> td_resolutionunit = ( uint16 ) v
ASSIGN	363:2	363:26	8	td -> td_resolutionunit = ( uint16 ) v
LVAL	363:2	363:2	9	td -> td_resolutionunit
FIELD	363:2	363:6	10	td -> td_resolutionunit
LEAF_NODE	363:2	363:2	11	td
LEAF_NODE	363:4	363:4	11	->
LEAF_NODE	363:6	363:6	11	td_resolutionunit
ASSIGN_OP	363:24	363:24	9	=
LEAF_NODE	363:24	363:24	10	=
RVAL	363:26	363:35	9	( uint16 ) v
LEAF_NODE	363:26	363:26	10	(
TYPE_NAME	363:27	363:27	10	uint16
LEAF_NODE	363:27	363:27	11	uint16
LEAF_NODE	363:33	363:33	10	)
FIELD	363:35	363:35	10	v
LEAF_NODE	363:35	363:35	11	v
LEAF_NODE	363:36	363:36	7	;
JUMP_STATEMENT	364:2	364:7	6	break DESTINATION ;
KEYWORD	364:2	364:2	7	break
LEAF_NODE	364:2	364:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	364:7	364:7	7	;
LABEL	365:1	365:24	6	case TIFFTAG_PAGENUMBER :
LEAF_NODE	365:1	365:1	7	case
LEAF_NODE	365:6	365:6	7	TIFFTAG_PAGENUMBER
LEAF_NODE	365:24	365:24	7	:
EXPR_STATEMENT	366:2	366:56	6	td -> td_pagenumber [ 0 ] = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	366:2	366:2	7	td -> td_pagenumber [ 0 ] = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	366:2	366:25	8	td -> td_pagenumber [ 0 ] = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	366:2	366:2	9	td -> td_pagenumber [ 0 ]
FIELD	366:2	366:21	10	td -> td_pagenumber [ 0 ]
LEAF_NODE	366:2	366:2	11	td
LEAF_NODE	366:4	366:4	11	->
LEAF_NODE	366:6	366:6	11	td_pagenumber
LEAF_NODE	366:19	366:19	11	[
EXPR	366:20	366:20	11	0
FIELD	366:20	366:20	12	0
LEAF_NODE	366:20	366:20	13	0
LEAF_NODE	366:21	366:21	11	]
ASSIGN_OP	366:23	366:23	9	=
LEAF_NODE	366:23	366:23	10	=
RVAL	366:25	366:34	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	366:25	366:25	10	(
TYPE_NAME	366:26	366:26	10	uint16
LEAF_NODE	366:26	366:26	11	uint16
LEAF_NODE	366:32	366:32	10	)
FUNCTION_CALL	366:34	366:55	10	va_arg ( ap , uint16_vap )
CALLEE	366:34	366:34	11	va_arg
LEAF_NODE	366:34	366:34	12	va_arg
LEAF_NODE	366:40	366:40	11	(
ARGUMENT	366:41	366:41	11	ap
FIELD	366:41	366:41	12	ap
LEAF_NODE	366:41	366:41	13	ap
LEAF_NODE	366:43	366:43	11	,
ARGUMENT	366:45	366:45	11	uint16_vap
FIELD	366:45	366:45	12	uint16_vap
LEAF_NODE	366:45	366:45	13	uint16_vap
LEAF_NODE	366:55	366:55	11	)
LEAF_NODE	366:56	366:56	7	;
EXPR_STATEMENT	367:2	367:56	6	td -> td_pagenumber [ 1 ] = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	367:2	367:2	7	td -> td_pagenumber [ 1 ] = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	367:2	367:25	8	td -> td_pagenumber [ 1 ] = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	367:2	367:2	9	td -> td_pagenumber [ 1 ]
FIELD	367:2	367:21	10	td -> td_pagenumber [ 1 ]
LEAF_NODE	367:2	367:2	11	td
LEAF_NODE	367:4	367:4	11	->
LEAF_NODE	367:6	367:6	11	td_pagenumber
LEAF_NODE	367:19	367:19	11	[
EXPR	367:20	367:20	11	1
FIELD	367:20	367:20	12	1
LEAF_NODE	367:20	367:20	13	1
LEAF_NODE	367:21	367:21	11	]
ASSIGN_OP	367:23	367:23	9	=
LEAF_NODE	367:23	367:23	10	=
RVAL	367:25	367:34	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	367:25	367:25	10	(
TYPE_NAME	367:26	367:26	10	uint16
LEAF_NODE	367:26	367:26	11	uint16
LEAF_NODE	367:32	367:32	10	)
FUNCTION_CALL	367:34	367:55	10	va_arg ( ap , uint16_vap )
CALLEE	367:34	367:34	11	va_arg
LEAF_NODE	367:34	367:34	12	va_arg
LEAF_NODE	367:40	367:40	11	(
ARGUMENT	367:41	367:41	11	ap
FIELD	367:41	367:41	12	ap
LEAF_NODE	367:41	367:41	13	ap
LEAF_NODE	367:43	367:43	11	,
ARGUMENT	367:45	367:45	11	uint16_vap
FIELD	367:45	367:45	12	uint16_vap
LEAF_NODE	367:45	367:45	13	uint16_vap
LEAF_NODE	367:55	367:55	11	)
LEAF_NODE	367:56	367:56	7	;
JUMP_STATEMENT	368:2	368:7	6	break DESTINATION ;
KEYWORD	368:2	368:2	7	break
LEAF_NODE	368:2	368:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	368:7	368:7	7	;
LABEL	369:1	369:27	6	case TIFFTAG_HALFTONEHINTS :
LEAF_NODE	369:1	369:1	7	case
LEAF_NODE	369:6	369:6	7	TIFFTAG_HALFTONEHINTS
LEAF_NODE	369:27	369:27	7	:
EXPR_STATEMENT	370:2	370:59	6	td -> td_halftonehints [ 0 ] = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	370:2	370:2	7	td -> td_halftonehints [ 0 ] = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	370:2	370:28	8	td -> td_halftonehints [ 0 ] = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	370:2	370:2	9	td -> td_halftonehints [ 0 ]
FIELD	370:2	370:24	10	td -> td_halftonehints [ 0 ]
LEAF_NODE	370:2	370:2	11	td
LEAF_NODE	370:4	370:4	11	->
LEAF_NODE	370:6	370:6	11	td_halftonehints
LEAF_NODE	370:22	370:22	11	[
EXPR	370:23	370:23	11	0
FIELD	370:23	370:23	12	0
LEAF_NODE	370:23	370:23	13	0
LEAF_NODE	370:24	370:24	11	]
ASSIGN_OP	370:26	370:26	9	=
LEAF_NODE	370:26	370:26	10	=
RVAL	370:28	370:37	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	370:28	370:28	10	(
TYPE_NAME	370:29	370:29	10	uint16
LEAF_NODE	370:29	370:29	11	uint16
LEAF_NODE	370:35	370:35	10	)
FUNCTION_CALL	370:37	370:58	10	va_arg ( ap , uint16_vap )
CALLEE	370:37	370:37	11	va_arg
LEAF_NODE	370:37	370:37	12	va_arg
LEAF_NODE	370:43	370:43	11	(
ARGUMENT	370:44	370:44	11	ap
FIELD	370:44	370:44	12	ap
LEAF_NODE	370:44	370:44	13	ap
LEAF_NODE	370:46	370:46	11	,
ARGUMENT	370:48	370:48	11	uint16_vap
FIELD	370:48	370:48	12	uint16_vap
LEAF_NODE	370:48	370:48	13	uint16_vap
LEAF_NODE	370:58	370:58	11	)
LEAF_NODE	370:59	370:59	7	;
EXPR_STATEMENT	371:2	371:59	6	td -> td_halftonehints [ 1 ] = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	371:2	371:2	7	td -> td_halftonehints [ 1 ] = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	371:2	371:28	8	td -> td_halftonehints [ 1 ] = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	371:2	371:2	9	td -> td_halftonehints [ 1 ]
FIELD	371:2	371:24	10	td -> td_halftonehints [ 1 ]
LEAF_NODE	371:2	371:2	11	td
LEAF_NODE	371:4	371:4	11	->
LEAF_NODE	371:6	371:6	11	td_halftonehints
LEAF_NODE	371:22	371:22	11	[
EXPR	371:23	371:23	11	1
FIELD	371:23	371:23	12	1
LEAF_NODE	371:23	371:23	13	1
LEAF_NODE	371:24	371:24	11	]
ASSIGN_OP	371:26	371:26	9	=
LEAF_NODE	371:26	371:26	10	=
RVAL	371:28	371:37	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	371:28	371:28	10	(
TYPE_NAME	371:29	371:29	10	uint16
LEAF_NODE	371:29	371:29	11	uint16
LEAF_NODE	371:35	371:35	10	)
FUNCTION_CALL	371:37	371:58	10	va_arg ( ap , uint16_vap )
CALLEE	371:37	371:37	11	va_arg
LEAF_NODE	371:37	371:37	12	va_arg
LEAF_NODE	371:43	371:43	11	(
ARGUMENT	371:44	371:44	11	ap
FIELD	371:44	371:44	12	ap
LEAF_NODE	371:44	371:44	13	ap
LEAF_NODE	371:46	371:46	11	,
ARGUMENT	371:48	371:48	11	uint16_vap
FIELD	371:48	371:48	12	uint16_vap
LEAF_NODE	371:48	371:48	13	uint16_vap
LEAF_NODE	371:58	371:58	11	)
LEAF_NODE	371:59	371:59	7	;
JUMP_STATEMENT	372:2	372:7	6	break DESTINATION ;
KEYWORD	372:2	372:2	7	break
LEAF_NODE	372:2	372:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	372:7	372:7	7	;
LABEL	373:1	373:22	6	case TIFFTAG_COLORMAP :
LEAF_NODE	373:1	373:1	7	case
LEAF_NODE	373:6	373:6	7	TIFFTAG_COLORMAP
LEAF_NODE	373:22	373:22	7	:
EXPR_STATEMENT	374:2	374:42	6	v32 = ( uint32 ) ( 1L << td -> td_bitspersample ) ;
EXPR	374:2	374:2	7	v32 = ( uint32 ) ( 1L << td -> td_bitspersample )
ASSIGN	374:2	374:8	8	v32 = ( uint32 ) ( 1L << td -> td_bitspersample )
LVAL	374:2	374:2	9	v32
FIELD	374:2	374:2	10	v32
LEAF_NODE	374:2	374:2	11	v32
ASSIGN_OP	374:6	374:6	9	=
LEAF_NODE	374:6	374:6	10	=
RVAL	374:8	374:41	9	( uint32 ) ( 1L << td -> td_bitspersample )
LEAF_NODE	374:8	374:8	10	(
TYPE_NAME	374:9	374:9	10	uint32
LEAF_NODE	374:9	374:9	11	uint32
LEAF_NODE	374:15	374:15	10	)
LEAF_NODE	374:16	374:16	10	(
FIELD	374:17	374:17	10	1L
LEAF_NODE	374:17	374:17	11	1L
LEAF_NODE	374:19	374:19	10	<<
FIELD	374:21	374:25	10	td -> td_bitspersample
LEAF_NODE	374:21	374:21	11	td
LEAF_NODE	374:23	374:23	11	->
LEAF_NODE	374:25	374:25	11	td_bitspersample
LEAF_NODE	374:41	374:41	10	)
LEAF_NODE	374:42	374:42	7	;
LEAF_NODE	375:2	375:2	6	_TIFFsetShortArray
LEAF_NODE	375:20	375:20	6	(
LEAF_NODE	375:21	375:21	6	&
LEAF_NODE	375:22	375:22	6	td
LEAF_NODE	375:24	375:24	6	->
LEAF_NODE	375:26	375:26	6	td_colormap
LEAF_NODE	375:37	375:37	6	[
LEAF_NODE	375:38	375:38	6	0
LEAF_NODE	375:39	375:39	6	]
LEAF_NODE	375:40	375:40	6	,
LEAF_NODE	375:42	375:42	6	va_arg
LEAF_NODE	375:48	375:48	6	(
LEAF_NODE	375:49	375:49	6	ap
LEAF_NODE	375:51	375:51	6	,
LEAF_NODE	375:53	375:53	6	uint16
LEAF_NODE	375:59	375:59	6	*
LEAF_NODE	375:60	375:60	6	)
LEAF_NODE	375:61	375:61	6	,
LEAF_NODE	375:63	375:63	6	v32
LEAF_NODE	375:66	375:66	6	)
LEAF_NODE	375:67	375:67	6	;
LEAF_NODE	376:2	376:2	6	_TIFFsetShortArray
LEAF_NODE	376:20	376:20	6	(
LEAF_NODE	376:21	376:21	6	&
LEAF_NODE	376:22	376:22	6	td
LEAF_NODE	376:24	376:24	6	->
LEAF_NODE	376:26	376:26	6	td_colormap
LEAF_NODE	376:37	376:37	6	[
LEAF_NODE	376:38	376:38	6	1
LEAF_NODE	376:39	376:39	6	]
LEAF_NODE	376:40	376:40	6	,
LEAF_NODE	376:42	376:42	6	va_arg
LEAF_NODE	376:48	376:48	6	(
LEAF_NODE	376:49	376:49	6	ap
LEAF_NODE	376:51	376:51	6	,
LEAF_NODE	376:53	376:53	6	uint16
LEAF_NODE	376:59	376:59	6	*
LEAF_NODE	376:60	376:60	6	)
LEAF_NODE	376:61	376:61	6	,
LEAF_NODE	376:63	376:63	6	v32
LEAF_NODE	376:66	376:66	6	)
LEAF_NODE	376:67	376:67	6	;
LEAF_NODE	377:2	377:2	6	_TIFFsetShortArray
LEAF_NODE	377:20	377:20	6	(
LEAF_NODE	377:21	377:21	6	&
LEAF_NODE	377:22	377:22	6	td
LEAF_NODE	377:24	377:24	6	->
LEAF_NODE	377:26	377:26	6	td_colormap
LEAF_NODE	377:37	377:37	6	[
LEAF_NODE	377:38	377:38	6	2
LEAF_NODE	377:39	377:39	6	]
LEAF_NODE	377:40	377:40	6	,
LEAF_NODE	377:42	377:42	6	va_arg
LEAF_NODE	377:48	377:48	6	(
LEAF_NODE	377:49	377:49	6	ap
LEAF_NODE	377:51	377:51	6	,
LEAF_NODE	377:53	377:53	6	uint16
LEAF_NODE	377:59	377:59	6	*
LEAF_NODE	377:60	377:60	6	)
LEAF_NODE	377:61	377:61	6	,
LEAF_NODE	377:63	377:63	6	v32
LEAF_NODE	377:66	377:66	6	)
LEAF_NODE	377:67	377:67	6	;
JUMP_STATEMENT	378:2	378:7	6	break DESTINATION ;
KEYWORD	378:2	378:2	7	break
LEAF_NODE	378:2	378:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	378:7	378:7	7	;
LABEL	379:1	379:26	6	case TIFFTAG_EXTRASAMPLES :
LEAF_NODE	379:1	379:1	7	case
LEAF_NODE	379:6	379:6	7	TIFFTAG_EXTRASAMPLES
LEAF_NODE	379:26	379:26	7	:
SELECTION	380:2	381:3	6	
KEYWORD	380:2	380:2	7	if
LEAF_NODE	380:2	380:2	8	if
LEAF_NODE	380:5	380:5	7	(
CONDITION	380:6	380:6	7	! setExtraSamples ( tif , ap , & v )
EXPR	380:6	380:6	8	! setExtraSamples ( tif , ap , & v )
UNARY_EXPR	380:6	380:7	9	! setExtraSamples ( tif , ap , & v )
UNARY_OPERATOR	380:6	380:6	10	!
LEAF_NODE	380:6	380:6	11	!
FUNCTION_CALL	380:7	380:34	10	setExtraSamples ( tif , ap , & v )
CALLEE	380:7	380:7	11	setExtraSamples
LEAF_NODE	380:7	380:7	12	setExtraSamples
LEAF_NODE	380:22	380:22	11	(
ARGUMENT	380:23	380:23	11	tif
FIELD	380:23	380:23	12	tif
LEAF_NODE	380:23	380:23	13	tif
LEAF_NODE	380:26	380:26	11	,
ARGUMENT	380:28	380:28	11	ap
FIELD	380:28	380:28	12	ap
LEAF_NODE	380:28	380:28	13	ap
LEAF_NODE	380:30	380:30	11	,
ARGUMENT	380:32	380:32	11	& v
UNARY_EXPR	380:32	380:33	12	& v
UNARY_OPERATOR	380:32	380:32	13	&
LEAF_NODE	380:32	380:32	14	&
FIELD	380:33	380:33	13	v
LEAF_NODE	380:33	380:33	14	v
LEAF_NODE	380:34	380:34	11	)
LEAF_NODE	380:35	380:35	7	)
STATEMENTS	381:3	381:3	7	
JUMP_STATEMENT	381:3	381:16	8	goto badvalue ;
KEYWORD	381:3	381:3	9	goto
LEAF_NODE	381:3	381:3	10	goto
DESTINATION	381:8	381:8	9	badvalue
LEAF_NODE	381:8	381:8	10	badvalue
LEAF_NODE	381:16	381:16	9	;
JUMP_STATEMENT	382:2	382:7	6	break DESTINATION ;
KEYWORD	382:2	382:2	7	break
LEAF_NODE	382:2	382:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	382:7	382:7	7	;
LABEL	383:1	383:22	6	case TIFFTAG_MATTEING :
LEAF_NODE	383:1	383:1	7	case
LEAF_NODE	383:6	383:6	7	TIFFTAG_MATTEING
LEAF_NODE	383:22	383:22	7	:
EXPR_STATEMENT	384:2	384:65	6	td -> td_extrasamples = ( ( ( uint16 ) va_arg ( ap , uint16_vap ) ) != 0 ) ;
EXPR	384:2	384:2	7	td -> td_extrasamples = ( ( ( uint16 ) va_arg ( ap , uint16_vap ) ) != 0 )
ASSIGN	384:2	384:25	8	td -> td_extrasamples = ( ( ( uint16 ) va_arg ( ap , uint16_vap ) ) != 0 )
LVAL	384:2	384:2	9	td -> td_extrasamples
FIELD	384:2	384:6	10	td -> td_extrasamples
LEAF_NODE	384:2	384:2	11	td
LEAF_NODE	384:4	384:4	11	->
LEAF_NODE	384:6	384:6	11	td_extrasamples
ASSIGN_OP	384:22	384:22	9	=
LEAF_NODE	384:22	384:22	10	=
RVAL	384:25	384:64	9	( ( ( uint16 ) va_arg ( ap , uint16_vap ) ) != 0 )
LEAF_NODE	384:25	384:25	10	(
LEAF_NODE	384:26	384:26	10	(
LEAF_NODE	384:27	384:27	10	(
TYPE_NAME	384:28	384:28	10	uint16
LEAF_NODE	384:28	384:28	11	uint16
LEAF_NODE	384:34	384:34	10	)
FUNCTION_CALL	384:36	384:57	10	va_arg ( ap , uint16_vap )
CALLEE	384:36	384:36	11	va_arg
LEAF_NODE	384:36	384:36	12	va_arg
LEAF_NODE	384:42	384:42	11	(
ARGUMENT	384:43	384:43	11	ap
FIELD	384:43	384:43	12	ap
LEAF_NODE	384:43	384:43	13	ap
LEAF_NODE	384:45	384:45	11	,
ARGUMENT	384:47	384:47	11	uint16_vap
FIELD	384:47	384:47	12	uint16_vap
LEAF_NODE	384:47	384:47	13	uint16_vap
LEAF_NODE	384:57	384:57	11	)
LEAF_NODE	384:58	384:58	10	)
EQ_OPERATOR	384:60	384:60	10	!=
LEAF_NODE	384:60	384:60	11	!=
FIELD	384:63	384:63	10	0
LEAF_NODE	384:63	384:63	11	0
LEAF_NODE	384:64	384:64	10	)
LEAF_NODE	384:65	384:65	7	;
SELECTION	385:2	385:27	6	
KEYWORD	385:2	385:2	7	if
LEAF_NODE	385:2	385:2	8	if
LEAF_NODE	385:5	385:5	7	(
CONDITION	385:6	385:6	7	td -> td_extrasamples
EXPR	385:6	385:6	8	td -> td_extrasamples
FIELD	385:6	385:10	9	td -> td_extrasamples
LEAF_NODE	385:6	385:6	10	td
LEAF_NODE	385:8	385:8	10	->
LEAF_NODE	385:10	385:10	10	td_extrasamples
LEAF_NODE	385:25	385:25	7	)
STATEMENTS	385:27	388:2	7	
LEAF_NODE	385:27	385:27	8	{
STATEMENTS	386:3	387:3	8	
SIMPLE_DECL	386:3	386:37	9	uint16 sv ; sv = EXTRASAMPLE_ASSOCALPHA ;
VAR_DECL	386:3	386:10	10	uint16 sv ; sv = EXTRASAMPLE_ASSOCALPHA
TYPE	386:3	386:3	11	uint16
TYPE_NAME	386:3	386:3	12	uint16
LEAF_NODE	386:3	386:3	13	uint16
NAME	386:10	386:10	11	sv
LEAF_NODE	386:10	386:10	12	sv
LEAF_NODE	0:0	0:0	11	;
INIT	386:10	386:10	11	sv = EXTRASAMPLE_ASSOCALPHA
ASSIGN	386:10	386:15	12	sv = EXTRASAMPLE_ASSOCALPHA
LVAL	386:10	386:10	13	sv
NAME	386:10	386:10	14	sv
LEAF_NODE	386:10	386:10	15	sv
ASSIGN_OP	386:13	386:13	13	=
LEAF_NODE	386:13	386:13	14	=
RVAL	386:15	386:15	13	EXTRASAMPLE_ASSOCALPHA
FIELD	386:15	386:15	14	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	386:15	386:15	15	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	386:37	386:37	10	;
EXPR_STATEMENT	387:3	387:49	9	_TIFFsetShortArray ( & td -> td_sampleinfo , & sv , 1 ) ;
EXPR	387:3	387:3	10	_TIFFsetShortArray ( & td -> td_sampleinfo , & sv , 1 )
FUNCTION_CALL	387:3	387:48	11	_TIFFsetShortArray ( & td -> td_sampleinfo , & sv , 1 )
CALLEE	387:3	387:3	12	_TIFFsetShortArray
LEAF_NODE	387:3	387:3	13	_TIFFsetShortArray
LEAF_NODE	387:21	387:21	12	(
ARGUMENT	387:22	387:22	12	& td -> td_sampleinfo
UNARY_EXPR	387:22	387:23	13	& td -> td_sampleinfo
UNARY_OPERATOR	387:22	387:22	14	&
LEAF_NODE	387:22	387:22	15	&
FIELD	387:23	387:27	14	td -> td_sampleinfo
LEAF_NODE	387:23	387:23	15	td
LEAF_NODE	387:25	387:25	15	->
LEAF_NODE	387:27	387:27	15	td_sampleinfo
LEAF_NODE	387:40	387:40	12	,
ARGUMENT	387:42	387:42	12	& sv
UNARY_EXPR	387:42	387:43	13	& sv
UNARY_OPERATOR	387:42	387:42	14	&
LEAF_NODE	387:42	387:42	15	&
FIELD	387:43	387:43	14	sv
LEAF_NODE	387:43	387:43	15	sv
LEAF_NODE	387:45	387:45	12	,
ARGUMENT	387:47	387:47	12	1
FIELD	387:47	387:47	13	1
LEAF_NODE	387:47	387:47	14	1
LEAF_NODE	387:48	387:48	12	)
LEAF_NODE	387:49	387:49	10	;
LEAF_NODE	388:2	388:2	8	}
JUMP_STATEMENT	389:2	389:7	6	break DESTINATION ;
KEYWORD	389:2	389:2	7	break
LEAF_NODE	389:2	389:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	389:7	389:7	7	;
LABEL	390:1	390:23	6	case TIFFTAG_TILEWIDTH :
LEAF_NODE	390:1	390:1	7	case
LEAF_NODE	390:6	390:6	7	TIFFTAG_TILEWIDTH
LEAF_NODE	390:23	390:23	7	:
EXPR_STATEMENT	391:2	391:35	6	v32 = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	391:2	391:2	7	v32 = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	391:2	391:8	8	v32 = ( uint32 ) va_arg ( ap , uint32 )
LVAL	391:2	391:2	9	v32
FIELD	391:2	391:2	10	v32
LEAF_NODE	391:2	391:2	11	v32
ASSIGN_OP	391:6	391:6	9	=
LEAF_NODE	391:6	391:6	10	=
RVAL	391:8	391:17	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	391:8	391:8	10	(
TYPE_NAME	391:9	391:9	10	uint32
LEAF_NODE	391:9	391:9	11	uint32
LEAF_NODE	391:15	391:15	10	)
FUNCTION_CALL	391:17	391:34	10	va_arg ( ap , uint32 )
CALLEE	391:17	391:17	11	va_arg
LEAF_NODE	391:17	391:17	12	va_arg
LEAF_NODE	391:23	391:23	11	(
ARGUMENT	391:24	391:24	11	ap
FIELD	391:24	391:24	12	ap
LEAF_NODE	391:24	391:24	13	ap
LEAF_NODE	391:26	391:26	11	,
ARGUMENT	391:28	391:28	11	uint32
FIELD	391:28	391:28	12	uint32
LEAF_NODE	391:28	391:28	13	uint32
LEAF_NODE	391:34	391:34	11	)
LEAF_NODE	391:35	391:35	7	;
SELECTION	392:2	392:16	6	
KEYWORD	392:2	392:2	7	if
LEAF_NODE	392:2	392:2	8	if
LEAF_NODE	392:5	392:5	7	(
CONDITION	392:6	392:6	7	v32 % 16
EXPR	392:6	392:12	8	v32 % 16
FIELD	392:6	392:6	9	v32
LEAF_NODE	392:6	392:6	10	v32
LEAF_NODE	392:10	392:10	9	%
FIELD	392:12	392:12	9	16
LEAF_NODE	392:12	392:12	10	16
LEAF_NODE	392:14	392:14	7	)
STATEMENTS	392:16	397:2	7	
LEAF_NODE	392:16	392:16	8	{
STATEMENTS	393:3	395:3	8	
SELECTION	393:3	394:4	9	
KEYWORD	393:3	393:3	10	if
LEAF_NODE	393:3	393:3	11	if
LEAF_NODE	393:6	393:6	10	(
CONDITION	393:7	393:7	10	tif -> tif_mode != O_RDONLY
EXPR	393:7	393:24	11	tif -> tif_mode != O_RDONLY
FIELD	393:7	393:12	12	tif -> tif_mode
LEAF_NODE	393:7	393:7	13	tif
LEAF_NODE	393:10	393:10	13	->
LEAF_NODE	393:12	393:12	13	tif_mode
EQ_OPERATOR	393:21	393:21	12	!=
LEAF_NODE	393:21	393:21	13	!=
FIELD	393:24	393:24	12	O_RDONLY
LEAF_NODE	393:24	393:24	13	O_RDONLY
LEAF_NODE	393:32	393:32	10	)
STATEMENTS	394:4	394:4	10	
JUMP_STATEMENT	394:4	394:19	11	goto badvalue32 ;
KEYWORD	394:4	394:4	12	goto
LEAF_NODE	394:4	394:4	13	goto
DESTINATION	394:9	394:9	12	badvalue32
LEAF_NODE	394:9	394:9	13	badvalue32
LEAF_NODE	394:19	394:19	12	;
EXPR_STATEMENT	395:3	396:51	9	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "Nonstandard tile width %d, convert file" , v32 ) ;
EXPR	395:3	395:3	10	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "Nonstandard tile width %d, convert file" , v32 )
FUNCTION_CALL	395:3	396:50	11	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "Nonstandard tile width %d, convert file" , v32 )
CALLEE	395:3	395:3	12	TIFFWarningExt
LEAF_NODE	395:3	395:3	13	TIFFWarningExt
LEAF_NODE	395:17	395:17	12	(
ARGUMENT	395:18	395:18	12	tif -> tif_clientdata
FIELD	395:18	395:23	13	tif -> tif_clientdata
LEAF_NODE	395:18	395:18	14	tif
LEAF_NODE	395:21	395:21	14	->
LEAF_NODE	395:23	395:23	14	tif_clientdata
LEAF_NODE	395:37	395:37	12	,
ARGUMENT	395:39	395:39	12	tif -> tif_name
FIELD	395:39	395:44	13	tif -> tif_name
LEAF_NODE	395:39	395:39	14	tif
LEAF_NODE	395:42	395:42	14	->
LEAF_NODE	395:44	395:44	14	tif_name
LEAF_NODE	395:52	395:52	12	,
ARGUMENT	396:4	396:4	12	"Nonstandard tile width %d, convert file"
FIELD	396:4	396:4	13	"Nonstandard tile width %d, convert file"
LEAF_NODE	396:4	396:4	14	"Nonstandard tile width %d, convert file"
LEAF_NODE	396:45	396:45	12	,
ARGUMENT	396:47	396:47	12	v32
FIELD	396:47	396:47	13	v32
LEAF_NODE	396:47	396:47	14	v32
LEAF_NODE	396:50	396:50	12	)
LEAF_NODE	396:51	396:51	10	;
LEAF_NODE	397:2	397:2	8	}
EXPR_STATEMENT	398:2	398:24	6	td -> td_tilewidth = v32 ;
EXPR	398:2	398:2	7	td -> td_tilewidth = v32
ASSIGN	398:2	398:21	8	td -> td_tilewidth = v32
LVAL	398:2	398:2	9	td -> td_tilewidth
FIELD	398:2	398:6	10	td -> td_tilewidth
LEAF_NODE	398:2	398:2	11	td
LEAF_NODE	398:4	398:4	11	->
LEAF_NODE	398:6	398:6	11	td_tilewidth
ASSIGN_OP	398:19	398:19	9	=
LEAF_NODE	398:19	398:19	10	=
RVAL	398:21	398:21	9	v32
FIELD	398:21	398:21	10	v32
LEAF_NODE	398:21	398:21	11	v32
LEAF_NODE	398:24	398:24	7	;
EXPR_STATEMENT	399:2	399:32	6	tif -> tif_flags |= TIFF_ISTILED ;
EXPR	399:2	399:2	7	tif -> tif_flags |= TIFF_ISTILED
ASSIGN	399:2	399:20	8	tif -> tif_flags |= TIFF_ISTILED
LVAL	399:2	399:2	9	tif -> tif_flags
FIELD	399:2	399:7	10	tif -> tif_flags
LEAF_NODE	399:2	399:2	11	tif
LEAF_NODE	399:5	399:5	11	->
LEAF_NODE	399:7	399:7	11	tif_flags
ASSIGN_OP	399:17	399:17	9	|=
LEAF_NODE	399:17	399:17	10	|=
RVAL	399:20	399:20	9	TIFF_ISTILED
FIELD	399:20	399:20	10	TIFF_ISTILED
LEAF_NODE	399:20	399:20	11	TIFF_ISTILED
LEAF_NODE	399:32	399:32	7	;
JUMP_STATEMENT	400:2	400:7	6	break DESTINATION ;
KEYWORD	400:2	400:2	7	break
LEAF_NODE	400:2	400:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	400:7	400:7	7	;
LABEL	401:1	401:24	6	case TIFFTAG_TILELENGTH :
LEAF_NODE	401:1	401:1	7	case
LEAF_NODE	401:6	401:6	7	TIFFTAG_TILELENGTH
LEAF_NODE	401:24	401:24	7	:
EXPR_STATEMENT	402:2	402:35	6	v32 = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	402:2	402:2	7	v32 = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	402:2	402:8	8	v32 = ( uint32 ) va_arg ( ap , uint32 )
LVAL	402:2	402:2	9	v32
FIELD	402:2	402:2	10	v32
LEAF_NODE	402:2	402:2	11	v32
ASSIGN_OP	402:6	402:6	9	=
LEAF_NODE	402:6	402:6	10	=
RVAL	402:8	402:17	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	402:8	402:8	10	(
TYPE_NAME	402:9	402:9	10	uint32
LEAF_NODE	402:9	402:9	11	uint32
LEAF_NODE	402:15	402:15	10	)
FUNCTION_CALL	402:17	402:34	10	va_arg ( ap , uint32 )
CALLEE	402:17	402:17	11	va_arg
LEAF_NODE	402:17	402:17	12	va_arg
LEAF_NODE	402:23	402:23	11	(
ARGUMENT	402:24	402:24	11	ap
FIELD	402:24	402:24	12	ap
LEAF_NODE	402:24	402:24	13	ap
LEAF_NODE	402:26	402:26	11	,
ARGUMENT	402:28	402:28	11	uint32
FIELD	402:28	402:28	12	uint32
LEAF_NODE	402:28	402:28	13	uint32
LEAF_NODE	402:34	402:34	11	)
LEAF_NODE	402:35	402:35	7	;
SELECTION	403:2	403:16	6	
KEYWORD	403:2	403:2	7	if
LEAF_NODE	403:2	403:2	8	if
LEAF_NODE	403:5	403:5	7	(
CONDITION	403:6	403:6	7	v32 % 16
EXPR	403:6	403:12	8	v32 % 16
FIELD	403:6	403:6	9	v32
LEAF_NODE	403:6	403:6	10	v32
LEAF_NODE	403:10	403:10	9	%
FIELD	403:12	403:12	9	16
LEAF_NODE	403:12	403:12	10	16
LEAF_NODE	403:14	403:14	7	)
STATEMENTS	403:16	408:2	7	
LEAF_NODE	403:16	403:16	8	{
STATEMENTS	404:3	406:3	8	
SELECTION	404:3	405:4	9	
KEYWORD	404:3	404:3	10	if
LEAF_NODE	404:3	404:3	11	if
LEAF_NODE	404:6	404:6	10	(
CONDITION	404:7	404:7	10	tif -> tif_mode != O_RDONLY
EXPR	404:7	404:24	11	tif -> tif_mode != O_RDONLY
FIELD	404:7	404:12	12	tif -> tif_mode
LEAF_NODE	404:7	404:7	13	tif
LEAF_NODE	404:10	404:10	13	->
LEAF_NODE	404:12	404:12	13	tif_mode
EQ_OPERATOR	404:21	404:21	12	!=
LEAF_NODE	404:21	404:21	13	!=
FIELD	404:24	404:24	12	O_RDONLY
LEAF_NODE	404:24	404:24	13	O_RDONLY
LEAF_NODE	404:32	404:32	10	)
STATEMENTS	405:4	405:4	10	
JUMP_STATEMENT	405:4	405:19	11	goto badvalue32 ;
KEYWORD	405:4	405:4	12	goto
LEAF_NODE	405:4	405:4	13	goto
DESTINATION	405:9	405:9	12	badvalue32
LEAF_NODE	405:9	405:9	13	badvalue32
LEAF_NODE	405:19	405:19	12	;
EXPR_STATEMENT	406:3	407:55	9	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "Nonstandard tile length %d, convert file" , v32 ) ;
EXPR	406:3	406:3	10	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "Nonstandard tile length %d, convert file" , v32 )
FUNCTION_CALL	406:3	407:54	11	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "Nonstandard tile length %d, convert file" , v32 )
CALLEE	406:3	406:3	12	TIFFWarningExt
LEAF_NODE	406:3	406:3	13	TIFFWarningExt
LEAF_NODE	406:17	406:17	12	(
ARGUMENT	406:18	406:18	12	tif -> tif_clientdata
FIELD	406:18	406:23	13	tif -> tif_clientdata
LEAF_NODE	406:18	406:18	14	tif
LEAF_NODE	406:21	406:21	14	->
LEAF_NODE	406:23	406:23	14	tif_clientdata
LEAF_NODE	406:37	406:37	12	,
ARGUMENT	406:39	406:39	12	tif -> tif_name
FIELD	406:39	406:44	13	tif -> tif_name
LEAF_NODE	406:39	406:39	14	tif
LEAF_NODE	406:42	406:42	14	->
LEAF_NODE	406:44	406:44	14	tif_name
LEAF_NODE	406:52	406:52	12	,
ARGUMENT	407:7	407:7	12	"Nonstandard tile length %d, convert file"
FIELD	407:7	407:7	13	"Nonstandard tile length %d, convert file"
LEAF_NODE	407:7	407:7	14	"Nonstandard tile length %d, convert file"
LEAF_NODE	407:49	407:49	12	,
ARGUMENT	407:51	407:51	12	v32
FIELD	407:51	407:51	13	v32
LEAF_NODE	407:51	407:51	14	v32
LEAF_NODE	407:54	407:54	12	)
LEAF_NODE	407:55	407:55	10	;
LEAF_NODE	408:2	408:2	8	}
EXPR_STATEMENT	409:2	409:25	6	td -> td_tilelength = v32 ;
EXPR	409:2	409:2	7	td -> td_tilelength = v32
ASSIGN	409:2	409:22	8	td -> td_tilelength = v32
LVAL	409:2	409:2	9	td -> td_tilelength
FIELD	409:2	409:6	10	td -> td_tilelength
LEAF_NODE	409:2	409:2	11	td
LEAF_NODE	409:4	409:4	11	->
LEAF_NODE	409:6	409:6	11	td_tilelength
ASSIGN_OP	409:20	409:20	9	=
LEAF_NODE	409:20	409:20	10	=
RVAL	409:22	409:22	9	v32
FIELD	409:22	409:22	10	v32
LEAF_NODE	409:22	409:22	11	v32
LEAF_NODE	409:25	409:25	7	;
EXPR_STATEMENT	410:2	410:32	6	tif -> tif_flags |= TIFF_ISTILED ;
EXPR	410:2	410:2	7	tif -> tif_flags |= TIFF_ISTILED
ASSIGN	410:2	410:20	8	tif -> tif_flags |= TIFF_ISTILED
LVAL	410:2	410:2	9	tif -> tif_flags
FIELD	410:2	410:7	10	tif -> tif_flags
LEAF_NODE	410:2	410:2	11	tif
LEAF_NODE	410:5	410:5	11	->
LEAF_NODE	410:7	410:7	11	tif_flags
ASSIGN_OP	410:17	410:17	9	|=
LEAF_NODE	410:17	410:17	10	|=
RVAL	410:20	410:20	9	TIFF_ISTILED
FIELD	410:20	410:20	10	TIFF_ISTILED
LEAF_NODE	410:20	410:20	11	TIFF_ISTILED
LEAF_NODE	410:32	410:32	7	;
JUMP_STATEMENT	411:2	411:7	6	break DESTINATION ;
KEYWORD	411:2	411:2	7	break
LEAF_NODE	411:2	411:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	411:7	411:7	7	;
LABEL	412:1	412:23	6	case TIFFTAG_TILEDEPTH :
LEAF_NODE	412:1	412:1	7	case
LEAF_NODE	412:6	412:6	7	TIFFTAG_TILEDEPTH
LEAF_NODE	412:23	412:23	7	:
EXPR_STATEMENT	413:2	413:35	6	v32 = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	413:2	413:2	7	v32 = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	413:2	413:8	8	v32 = ( uint32 ) va_arg ( ap , uint32 )
LVAL	413:2	413:2	9	v32
FIELD	413:2	413:2	10	v32
LEAF_NODE	413:2	413:2	11	v32
ASSIGN_OP	413:6	413:6	9	=
LEAF_NODE	413:6	413:6	10	=
RVAL	413:8	413:17	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	413:8	413:8	10	(
TYPE_NAME	413:9	413:9	10	uint32
LEAF_NODE	413:9	413:9	11	uint32
LEAF_NODE	413:15	413:15	10	)
FUNCTION_CALL	413:17	413:34	10	va_arg ( ap , uint32 )
CALLEE	413:17	413:17	11	va_arg
LEAF_NODE	413:17	413:17	12	va_arg
LEAF_NODE	413:23	413:23	11	(
ARGUMENT	413:24	413:24	11	ap
FIELD	413:24	413:24	12	ap
LEAF_NODE	413:24	413:24	13	ap
LEAF_NODE	413:26	413:26	11	,
ARGUMENT	413:28	413:28	11	uint32
FIELD	413:28	413:28	12	uint32
LEAF_NODE	413:28	413:28	13	uint32
LEAF_NODE	413:34	413:34	11	)
LEAF_NODE	413:35	413:35	7	;
SELECTION	414:2	415:3	6	
KEYWORD	414:2	414:2	7	if
LEAF_NODE	414:2	414:2	8	if
LEAF_NODE	414:5	414:5	7	(
CONDITION	414:6	414:6	7	v32 == 0
EXPR	414:6	414:13	8	v32 == 0
FIELD	414:6	414:6	9	v32
LEAF_NODE	414:6	414:6	10	v32
EQ_OPERATOR	414:10	414:10	9	==
LEAF_NODE	414:10	414:10	10	==
FIELD	414:13	414:13	9	0
LEAF_NODE	414:13	414:13	10	0
LEAF_NODE	414:14	414:14	7	)
STATEMENTS	415:3	415:3	7	
JUMP_STATEMENT	415:3	415:18	8	goto badvalue32 ;
KEYWORD	415:3	415:3	9	goto
LEAF_NODE	415:3	415:3	10	goto
DESTINATION	415:8	415:8	9	badvalue32
LEAF_NODE	415:8	415:8	10	badvalue32
LEAF_NODE	415:18	415:18	9	;
EXPR_STATEMENT	416:2	416:24	6	td -> td_tiledepth = v32 ;
EXPR	416:2	416:2	7	td -> td_tiledepth = v32
ASSIGN	416:2	416:21	8	td -> td_tiledepth = v32
LVAL	416:2	416:2	9	td -> td_tiledepth
FIELD	416:2	416:6	10	td -> td_tiledepth
LEAF_NODE	416:2	416:2	11	td
LEAF_NODE	416:4	416:4	11	->
LEAF_NODE	416:6	416:6	11	td_tiledepth
ASSIGN_OP	416:19	416:19	9	=
LEAF_NODE	416:19	416:19	10	=
RVAL	416:21	416:21	9	v32
FIELD	416:21	416:21	10	v32
LEAF_NODE	416:21	416:21	11	v32
LEAF_NODE	416:24	416:24	7	;
JUMP_STATEMENT	417:2	417:7	6	break DESTINATION ;
KEYWORD	417:2	417:2	7	break
LEAF_NODE	417:2	417:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	417:7	417:7	7	;
LABEL	418:1	418:22	6	case TIFFTAG_DATATYPE :
LEAF_NODE	418:1	418:1	7	case
LEAF_NODE	418:6	418:6	7	TIFFTAG_DATATYPE
LEAF_NODE	418:22	418:22	7	:
EXPR_STATEMENT	419:2	419:37	6	v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	419:2	419:2	7	v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	419:2	419:6	8	v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	419:2	419:2	9	v
FIELD	419:2	419:2	10	v
LEAF_NODE	419:2	419:2	11	v
ASSIGN_OP	419:4	419:4	9	=
LEAF_NODE	419:4	419:4	10	=
RVAL	419:6	419:15	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	419:6	419:6	10	(
TYPE_NAME	419:7	419:7	10	uint16
LEAF_NODE	419:7	419:7	11	uint16
LEAF_NODE	419:13	419:13	10	)
FUNCTION_CALL	419:15	419:36	10	va_arg ( ap , uint16_vap )
CALLEE	419:15	419:15	11	va_arg
LEAF_NODE	419:15	419:15	12	va_arg
LEAF_NODE	419:21	419:21	11	(
ARGUMENT	419:22	419:22	11	ap
FIELD	419:22	419:22	12	ap
LEAF_NODE	419:22	419:22	13	ap
LEAF_NODE	419:24	419:24	11	,
ARGUMENT	419:26	419:26	11	uint16_vap
FIELD	419:26	419:26	12	uint16_vap
LEAF_NODE	419:26	419:26	13	uint16_vap
LEAF_NODE	419:36	419:36	11	)
LEAF_NODE	419:37	419:37	7	;
SELECTION	420:2	420:13	6	
KEYWORD	420:2	420:2	7	switch
LEAF_NODE	420:2	420:2	8	switch
LEAF_NODE	420:9	420:9	7	(
CONDITION	420:10	420:10	7	v
EXPR	420:10	420:10	8	v
FIELD	420:10	420:10	9	v
LEAF_NODE	420:10	420:10	10	v
LEAF_NODE	420:11	420:11	7	)
STATEMENTS	420:13	426:2	7	
LEAF_NODE	420:13	420:13	8	{
STATEMENTS	421:2	425:12	8	
LABEL	421:2	421:20	9	case DATATYPE_VOID :
LEAF_NODE	421:2	421:2	10	case
LEAF_NODE	421:7	421:7	10	DATATYPE_VOID
LEAF_NODE	421:20	421:20	10	:
EXPR_STATEMENT	421:22	421:43	9	v = SAMPLEFORMAT_VOID ;
EXPR	421:22	421:22	10	v = SAMPLEFORMAT_VOID
ASSIGN	421:22	421:26	11	v = SAMPLEFORMAT_VOID
LVAL	421:22	421:22	12	v
FIELD	421:22	421:22	13	v
LEAF_NODE	421:22	421:22	14	v
ASSIGN_OP	421:24	421:24	12	=
LEAF_NODE	421:24	421:24	13	=
RVAL	421:26	421:26	12	SAMPLEFORMAT_VOID
FIELD	421:26	421:26	13	SAMPLEFORMAT_VOID
LEAF_NODE	421:26	421:26	14	SAMPLEFORMAT_VOID
LEAF_NODE	421:43	421:43	10	;
JUMP_STATEMENT	421:45	421:50	9	break DESTINATION ;
KEYWORD	421:45	421:45	10	break
LEAF_NODE	421:45	421:45	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	421:50	421:50	10	;
LABEL	422:2	422:19	9	case DATATYPE_INT :
LEAF_NODE	422:2	422:2	10	case
LEAF_NODE	422:7	422:7	10	DATATYPE_INT
LEAF_NODE	422:19	422:19	10	:
EXPR_STATEMENT	422:21	422:41	9	v = SAMPLEFORMAT_INT ;
EXPR	422:21	422:21	10	v = SAMPLEFORMAT_INT
ASSIGN	422:21	422:25	11	v = SAMPLEFORMAT_INT
LVAL	422:21	422:21	12	v
FIELD	422:21	422:21	13	v
LEAF_NODE	422:21	422:21	14	v
ASSIGN_OP	422:23	422:23	12	=
LEAF_NODE	422:23	422:23	13	=
RVAL	422:25	422:25	12	SAMPLEFORMAT_INT
FIELD	422:25	422:25	13	SAMPLEFORMAT_INT
LEAF_NODE	422:25	422:25	14	SAMPLEFORMAT_INT
LEAF_NODE	422:41	422:41	10	;
JUMP_STATEMENT	422:43	422:48	9	break DESTINATION ;
KEYWORD	422:43	422:43	10	break
LEAF_NODE	422:43	422:43	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	422:48	422:48	10	;
LABEL	423:2	423:20	9	case DATATYPE_UINT :
LEAF_NODE	423:2	423:2	10	case
LEAF_NODE	423:7	423:7	10	DATATYPE_UINT
LEAF_NODE	423:20	423:20	10	:
EXPR_STATEMENT	423:22	423:43	9	v = SAMPLEFORMAT_UINT ;
EXPR	423:22	423:22	10	v = SAMPLEFORMAT_UINT
ASSIGN	423:22	423:26	11	v = SAMPLEFORMAT_UINT
LVAL	423:22	423:22	12	v
FIELD	423:22	423:22	13	v
LEAF_NODE	423:22	423:22	14	v
ASSIGN_OP	423:24	423:24	12	=
LEAF_NODE	423:24	423:24	13	=
RVAL	423:26	423:26	12	SAMPLEFORMAT_UINT
FIELD	423:26	423:26	13	SAMPLEFORMAT_UINT
LEAF_NODE	423:26	423:26	14	SAMPLEFORMAT_UINT
LEAF_NODE	423:43	423:43	10	;
JUMP_STATEMENT	423:45	423:50	9	break DESTINATION ;
KEYWORD	423:45	423:45	10	break
LEAF_NODE	423:45	423:45	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	423:50	423:50	10	;
LABEL	424:2	424:22	9	case DATATYPE_IEEEFP :
LEAF_NODE	424:2	424:2	10	case
LEAF_NODE	424:7	424:7	10	DATATYPE_IEEEFP
LEAF_NODE	424:22	424:22	10	:
EXPR_STATEMENT	424:24	424:47	9	v = SAMPLEFORMAT_IEEEFP ;
EXPR	424:24	424:24	10	v = SAMPLEFORMAT_IEEEFP
ASSIGN	424:24	424:28	11	v = SAMPLEFORMAT_IEEEFP
LVAL	424:24	424:24	12	v
FIELD	424:24	424:24	13	v
LEAF_NODE	424:24	424:24	14	v
ASSIGN_OP	424:26	424:26	12	=
LEAF_NODE	424:26	424:26	13	=
RVAL	424:28	424:28	12	SAMPLEFORMAT_IEEEFP
FIELD	424:28	424:28	13	SAMPLEFORMAT_IEEEFP
LEAF_NODE	424:28	424:28	14	SAMPLEFORMAT_IEEEFP
LEAF_NODE	424:47	424:47	10	;
JUMP_STATEMENT	424:48	424:53	9	break DESTINATION ;
KEYWORD	424:48	424:48	10	break
LEAF_NODE	424:48	424:48	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	424:53	424:53	10	;
LABEL	425:2	425:9	9	default :
LEAF_NODE	425:2	425:2	10	default
LEAF_NODE	425:9	425:9	10	:
JUMP_STATEMENT	425:12	425:25	9	goto badvalue ;
KEYWORD	425:12	425:12	10	goto
LEAF_NODE	425:12	425:12	11	goto
DESTINATION	425:17	425:17	10	badvalue
LEAF_NODE	425:17	425:17	11	badvalue
LEAF_NODE	425:25	425:25	10	;
LEAF_NODE	426:2	426:2	8	}
EXPR_STATEMENT	427:2	427:34	6	td -> td_sampleformat = ( uint16 ) v ;
EXPR	427:2	427:2	7	td -> td_sampleformat = ( uint16 ) v
ASSIGN	427:2	427:24	8	td -> td_sampleformat = ( uint16 ) v
LVAL	427:2	427:2	9	td -> td_sampleformat
FIELD	427:2	427:6	10	td -> td_sampleformat
LEAF_NODE	427:2	427:2	11	td
LEAF_NODE	427:4	427:4	11	->
LEAF_NODE	427:6	427:6	11	td_sampleformat
ASSIGN_OP	427:22	427:22	9	=
LEAF_NODE	427:22	427:22	10	=
RVAL	427:24	427:33	9	( uint16 ) v
LEAF_NODE	427:24	427:24	10	(
TYPE_NAME	427:25	427:25	10	uint16
LEAF_NODE	427:25	427:25	11	uint16
LEAF_NODE	427:31	427:31	10	)
FIELD	427:33	427:33	10	v
LEAF_NODE	427:33	427:33	11	v
LEAF_NODE	427:34	427:34	7	;
JUMP_STATEMENT	428:2	428:7	6	break DESTINATION ;
KEYWORD	428:2	428:2	7	break
LEAF_NODE	428:2	428:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	428:7	428:7	7	;
LABEL	429:1	429:26	6	case TIFFTAG_SAMPLEFORMAT :
LEAF_NODE	429:1	429:1	7	case
LEAF_NODE	429:6	429:6	7	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	429:26	429:26	7	:
EXPR_STATEMENT	430:2	430:37	6	v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	430:2	430:2	7	v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	430:2	430:6	8	v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	430:2	430:2	9	v
FIELD	430:2	430:2	10	v
LEAF_NODE	430:2	430:2	11	v
ASSIGN_OP	430:4	430:4	9	=
LEAF_NODE	430:4	430:4	10	=
RVAL	430:6	430:15	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	430:6	430:6	10	(
TYPE_NAME	430:7	430:7	10	uint16
LEAF_NODE	430:7	430:7	11	uint16
LEAF_NODE	430:13	430:13	10	)
FUNCTION_CALL	430:15	430:36	10	va_arg ( ap , uint16_vap )
CALLEE	430:15	430:15	11	va_arg
LEAF_NODE	430:15	430:15	12	va_arg
LEAF_NODE	430:21	430:21	11	(
ARGUMENT	430:22	430:22	11	ap
FIELD	430:22	430:22	12	ap
LEAF_NODE	430:22	430:22	13	ap
LEAF_NODE	430:24	430:24	11	,
ARGUMENT	430:26	430:26	11	uint16_vap
FIELD	430:26	430:26	12	uint16_vap
LEAF_NODE	430:26	430:26	13	uint16_vap
LEAF_NODE	430:36	430:36	11	)
LEAF_NODE	430:37	430:37	7	;
SELECTION	431:2	432:3	6	
KEYWORD	431:2	431:2	7	if
LEAF_NODE	431:2	431:2	8	if
LEAF_NODE	431:5	431:5	7	(
CONDITION	431:6	431:6	7	v < SAMPLEFORMAT_UINT || SAMPLEFORMAT_COMPLEXIEEEFP < v
EXPR	431:6	431:6	8	v < SAMPLEFORMAT_UINT || SAMPLEFORMAT_COMPLEXIEEEFP < v
OR	431:6	431:31	9	v < SAMPLEFORMAT_UINT || SAMPLEFORMAT_COMPLEXIEEEFP < v
EXPR	431:6	431:10	10	v < SAMPLEFORMAT_UINT
FIELD	431:6	431:6	11	v
LEAF_NODE	431:6	431:6	12	v
REL_OPERATOR	431:8	431:8	11	<
LEAF_NODE	431:8	431:8	12	<
FIELD	431:10	431:10	11	SAMPLEFORMAT_UINT
LEAF_NODE	431:10	431:10	12	SAMPLEFORMAT_UINT
LEAF_NODE	431:28	431:28	10	||
EXPR	431:31	431:60	10	SAMPLEFORMAT_COMPLEXIEEEFP < v
FIELD	431:31	431:31	11	SAMPLEFORMAT_COMPLEXIEEEFP
LEAF_NODE	431:31	431:31	12	SAMPLEFORMAT_COMPLEXIEEEFP
REL_OPERATOR	431:58	431:58	11	<
LEAF_NODE	431:58	431:58	12	<
FIELD	431:60	431:60	11	v
LEAF_NODE	431:60	431:60	12	v
LEAF_NODE	431:61	431:61	7	)
STATEMENTS	432:3	432:3	7	
JUMP_STATEMENT	432:3	432:16	8	goto badvalue ;
KEYWORD	432:3	432:3	9	goto
LEAF_NODE	432:3	432:3	10	goto
DESTINATION	432:8	432:8	9	badvalue
LEAF_NODE	432:8	432:8	10	badvalue
LEAF_NODE	432:16	432:16	9	;
EXPR_STATEMENT	433:2	433:34	6	td -> td_sampleformat = ( uint16 ) v ;
EXPR	433:2	433:2	7	td -> td_sampleformat = ( uint16 ) v
ASSIGN	433:2	433:24	8	td -> td_sampleformat = ( uint16 ) v
LVAL	433:2	433:2	9	td -> td_sampleformat
FIELD	433:2	433:6	10	td -> td_sampleformat
LEAF_NODE	433:2	433:2	11	td
LEAF_NODE	433:4	433:4	11	->
LEAF_NODE	433:6	433:6	11	td_sampleformat
ASSIGN_OP	433:22	433:22	9	=
LEAF_NODE	433:22	433:22	10	=
RVAL	433:24	433:33	9	( uint16 ) v
LEAF_NODE	433:24	433:24	10	(
TYPE_NAME	433:25	433:25	10	uint16
LEAF_NODE	433:25	433:25	11	uint16
LEAF_NODE	433:31	433:31	10	)
FIELD	433:33	433:33	10	v
LEAF_NODE	433:33	433:33	11	v
LEAF_NODE	433:34	433:34	7	;
SELECTION	436:2	439:6	6	
KEYWORD	436:2	436:2	7	if
LEAF_NODE	436:2	436:2	8	if
LEAF_NODE	436:4	436:4	7	(
CONDITION	436:6	436:6	7	td -> td_sampleformat == SAMPLEFORMAT_COMPLEXINT && td -> td_bitspersample == 32 && tif -> tif_postdecode == _TIFFSwab32BitData
EXPR	436:6	436:6	8	td -> td_sampleformat == SAMPLEFORMAT_COMPLEXINT && td -> td_bitspersample == 32 && tif -> tif_postdecode == _TIFFSwab32BitData
AND	436:6	437:9	9	td -> td_sampleformat == SAMPLEFORMAT_COMPLEXINT && td -> td_bitspersample == 32 && tif -> tif_postdecode == _TIFFSwab32BitData
EXPR	436:6	436:29	10	td -> td_sampleformat == SAMPLEFORMAT_COMPLEXINT
FIELD	436:6	436:10	11	td -> td_sampleformat
LEAF_NODE	436:6	436:6	12	td
LEAF_NODE	436:8	436:8	12	->
LEAF_NODE	436:10	436:10	12	td_sampleformat
EQ_OPERATOR	436:26	436:26	11	==
LEAF_NODE	436:26	436:26	12	==
FIELD	436:29	436:29	11	SAMPLEFORMAT_COMPLEXINT
LEAF_NODE	436:29	436:29	12	SAMPLEFORMAT_COMPLEXINT
LEAF_NODE	437:6	437:6	10	&&
EXPR	437:9	437:9	10	td -> td_bitspersample == 32 && tif -> tif_postdecode == _TIFFSwab32BitData
AND	437:9	438:9	11	td -> td_bitspersample == 32 && tif -> tif_postdecode == _TIFFSwab32BitData
EXPR	437:9	437:33	12	td -> td_bitspersample == 32
FIELD	437:9	437:13	13	td -> td_bitspersample
LEAF_NODE	437:9	437:9	14	td
LEAF_NODE	437:11	437:11	14	->
LEAF_NODE	437:13	437:13	14	td_bitspersample
EQ_OPERATOR	437:30	437:30	13	==
LEAF_NODE	437:30	437:30	14	==
FIELD	437:33	437:33	13	32
LEAF_NODE	437:33	437:33	14	32
LEAF_NODE	438:6	438:6	12	&&
EXPR	438:9	438:32	12	tif -> tif_postdecode == _TIFFSwab32BitData
FIELD	438:9	438:14	13	tif -> tif_postdecode
LEAF_NODE	438:9	438:9	14	tif
LEAF_NODE	438:12	438:12	14	->
LEAF_NODE	438:14	438:14	14	tif_postdecode
EQ_OPERATOR	438:29	438:29	13	==
LEAF_NODE	438:29	438:29	14	==
FIELD	438:32	438:32	13	_TIFFSwab32BitData
LEAF_NODE	438:32	438:32	14	_TIFFSwab32BitData
LEAF_NODE	438:51	438:51	7	)
STATEMENTS	439:6	439:6	7	
EXPR_STATEMENT	439:6	439:46	8	tif -> tif_postdecode = _TIFFSwab16BitData ;
EXPR	439:6	439:6	9	tif -> tif_postdecode = _TIFFSwab16BitData
ASSIGN	439:6	439:28	10	tif -> tif_postdecode = _TIFFSwab16BitData
LVAL	439:6	439:6	11	tif -> tif_postdecode
FIELD	439:6	439:11	12	tif -> tif_postdecode
LEAF_NODE	439:6	439:6	13	tif
LEAF_NODE	439:9	439:9	13	->
LEAF_NODE	439:11	439:11	13	tif_postdecode
ASSIGN_OP	439:26	439:26	11	=
LEAF_NODE	439:26	439:26	12	=
RVAL	439:28	439:28	11	_TIFFSwab16BitData
FIELD	439:28	439:28	12	_TIFFSwab16BitData
LEAF_NODE	439:28	439:28	13	_TIFFSwab16BitData
LEAF_NODE	439:46	439:46	9	;
SELECTION	440:2	440:7	6	
KEYWORD	440:2	440:2	7	else
LEAF_NODE	440:2	440:2	8	else
STATEMENTS	440:7	440:7	7	
SELECTION	440:7	444:6	8	
KEYWORD	440:7	440:7	9	if
LEAF_NODE	440:7	440:7	10	if
LEAF_NODE	440:9	440:9	9	(
CONDITION	440:11	440:11	9	( td -> td_sampleformat == SAMPLEFORMAT_COMPLEXINT || td -> td_sampleformat == SAMPLEFORMAT_COMPLEXIEEEFP ) && td -> td_bitspersample == 64 && tif -> tif_postdecode == _TIFFSwab64BitData
EXPR	440:11	440:11	10	( td -> td_sampleformat == SAMPLEFORMAT_COMPLEXINT || td -> td_sampleformat == SAMPLEFORMAT_COMPLEXIEEEFP ) && td -> td_bitspersample == 64 && tif -> tif_postdecode == _TIFFSwab64BitData
AND	440:11	442:7	11	( td -> td_sampleformat == SAMPLEFORMAT_COMPLEXINT || td -> td_sampleformat == SAMPLEFORMAT_COMPLEXIEEEFP ) && td -> td_bitspersample == 64 && tif -> tif_postdecode == _TIFFSwab64BitData
EXPR	440:11	441:57	12	( td -> td_sampleformat == SAMPLEFORMAT_COMPLEXINT || td -> td_sampleformat == SAMPLEFORMAT_COMPLEXIEEEFP )
LEAF_NODE	440:11	440:11	13	(
OR	440:12	441:8	13	td -> td_sampleformat == SAMPLEFORMAT_COMPLEXINT || td -> td_sampleformat == SAMPLEFORMAT_COMPLEXIEEEFP
EXPR	440:12	440:35	14	td -> td_sampleformat == SAMPLEFORMAT_COMPLEXINT
FIELD	440:12	440:16	15	td -> td_sampleformat
LEAF_NODE	440:12	440:12	16	td
LEAF_NODE	440:14	440:14	16	->
LEAF_NODE	440:16	440:16	16	td_sampleformat
EQ_OPERATOR	440:32	440:32	15	==
LEAF_NODE	440:32	440:32	16	==
FIELD	440:35	440:35	15	SAMPLEFORMAT_COMPLEXINT
LEAF_NODE	440:35	440:35	16	SAMPLEFORMAT_COMPLEXINT
LEAF_NODE	441:5	441:5	14	||
EXPR	441:8	441:31	14	td -> td_sampleformat == SAMPLEFORMAT_COMPLEXIEEEFP
FIELD	441:8	441:12	15	td -> td_sampleformat
LEAF_NODE	441:8	441:8	16	td
LEAF_NODE	441:10	441:10	16	->
LEAF_NODE	441:12	441:12	16	td_sampleformat
EQ_OPERATOR	441:28	441:28	15	==
LEAF_NODE	441:28	441:28	16	==
FIELD	441:31	441:31	15	SAMPLEFORMAT_COMPLEXIEEEFP
LEAF_NODE	441:31	441:31	16	SAMPLEFORMAT_COMPLEXIEEEFP
LEAF_NODE	441:57	441:57	13	)
LEAF_NODE	442:4	442:4	12	&&
EXPR	442:7	442:7	12	td -> td_bitspersample == 64 && tif -> tif_postdecode == _TIFFSwab64BitData
AND	442:7	443:7	13	td -> td_bitspersample == 64 && tif -> tif_postdecode == _TIFFSwab64BitData
EXPR	442:7	442:31	14	td -> td_bitspersample == 64
FIELD	442:7	442:11	15	td -> td_bitspersample
LEAF_NODE	442:7	442:7	16	td
LEAF_NODE	442:9	442:9	16	->
LEAF_NODE	442:11	442:11	16	td_bitspersample
EQ_OPERATOR	442:28	442:28	15	==
LEAF_NODE	442:28	442:28	16	==
FIELD	442:31	442:31	15	64
LEAF_NODE	442:31	442:31	16	64
LEAF_NODE	443:4	443:4	14	&&
EXPR	443:7	443:30	14	tif -> tif_postdecode == _TIFFSwab64BitData
FIELD	443:7	443:12	15	tif -> tif_postdecode
LEAF_NODE	443:7	443:7	16	tif
LEAF_NODE	443:10	443:10	16	->
LEAF_NODE	443:12	443:12	16	tif_postdecode
EQ_OPERATOR	443:27	443:27	15	==
LEAF_NODE	443:27	443:27	16	==
FIELD	443:30	443:30	15	_TIFFSwab64BitData
LEAF_NODE	443:30	443:30	16	_TIFFSwab64BitData
LEAF_NODE	443:49	443:49	9	)
STATEMENTS	444:6	444:6	9	
EXPR_STATEMENT	444:6	444:46	10	tif -> tif_postdecode = _TIFFSwab32BitData ;
EXPR	444:6	444:6	11	tif -> tif_postdecode = _TIFFSwab32BitData
ASSIGN	444:6	444:28	12	tif -> tif_postdecode = _TIFFSwab32BitData
LVAL	444:6	444:6	13	tif -> tif_postdecode
FIELD	444:6	444:11	14	tif -> tif_postdecode
LEAF_NODE	444:6	444:6	15	tif
LEAF_NODE	444:9	444:9	15	->
LEAF_NODE	444:11	444:11	15	tif_postdecode
ASSIGN_OP	444:26	444:26	13	=
LEAF_NODE	444:26	444:26	14	=
RVAL	444:28	444:28	13	_TIFFSwab32BitData
FIELD	444:28	444:28	14	_TIFFSwab32BitData
LEAF_NODE	444:28	444:28	15	_TIFFSwab32BitData
LEAF_NODE	444:46	444:46	11	;
JUMP_STATEMENT	445:2	445:7	6	break DESTINATION ;
KEYWORD	445:2	445:2	7	break
LEAF_NODE	445:2	445:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	445:7	445:7	7	;
LABEL	446:1	446:24	6	case TIFFTAG_IMAGEDEPTH :
LEAF_NODE	446:1	446:1	7	case
LEAF_NODE	446:6	446:6	7	TIFFTAG_IMAGEDEPTH
LEAF_NODE	446:24	446:24	7	:
EXPR_STATEMENT	447:2	447:49	6	td -> td_imagedepth = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	447:2	447:2	7	td -> td_imagedepth = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	447:2	447:22	8	td -> td_imagedepth = ( uint32 ) va_arg ( ap , uint32 )
LVAL	447:2	447:2	9	td -> td_imagedepth
FIELD	447:2	447:6	10	td -> td_imagedepth
LEAF_NODE	447:2	447:2	11	td
LEAF_NODE	447:4	447:4	11	->
LEAF_NODE	447:6	447:6	11	td_imagedepth
ASSIGN_OP	447:20	447:20	9	=
LEAF_NODE	447:20	447:20	10	=
RVAL	447:22	447:31	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	447:22	447:22	10	(
TYPE_NAME	447:23	447:23	10	uint32
LEAF_NODE	447:23	447:23	11	uint32
LEAF_NODE	447:29	447:29	10	)
FUNCTION_CALL	447:31	447:48	10	va_arg ( ap , uint32 )
CALLEE	447:31	447:31	11	va_arg
LEAF_NODE	447:31	447:31	12	va_arg
LEAF_NODE	447:37	447:37	11	(
ARGUMENT	447:38	447:38	11	ap
FIELD	447:38	447:38	12	ap
LEAF_NODE	447:38	447:38	13	ap
LEAF_NODE	447:40	447:40	11	,
ARGUMENT	447:42	447:42	11	uint32
FIELD	447:42	447:42	12	uint32
LEAF_NODE	447:42	447:42	13	uint32
LEAF_NODE	447:48	447:48	11	)
LEAF_NODE	447:49	447:49	7	;
JUMP_STATEMENT	448:2	448:7	6	break DESTINATION ;
KEYWORD	448:2	448:2	7	break
LEAF_NODE	448:2	448:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	448:7	448:7	7	;
LABEL	449:1	449:20	6	case TIFFTAG_SUBIFD :
LEAF_NODE	449:1	449:1	7	case
LEAF_NODE	449:6	449:6	7	TIFFTAG_SUBIFD
LEAF_NODE	449:20	449:20	7	:
SELECTION	450:2	450:45	6	
KEYWORD	450:2	450:2	7	if
LEAF_NODE	450:2	450:2	8	if
LEAF_NODE	450:5	450:5	7	(
CONDITION	450:6	450:6	7	( tif -> tif_flags & TIFF_INSUBIFD ) == 0
EXPR	450:6	450:42	8	( tif -> tif_flags & TIFF_INSUBIFD ) == 0
LEAF_NODE	450:6	450:6	9	(
FIELD	450:7	450:12	9	tif -> tif_flags
LEAF_NODE	450:7	450:7	10	tif
LEAF_NODE	450:10	450:10	10	->
LEAF_NODE	450:12	450:12	10	tif_flags
LEAF_NODE	450:22	450:22	9	&
FIELD	450:24	450:24	9	TIFF_INSUBIFD
LEAF_NODE	450:24	450:24	10	TIFF_INSUBIFD
LEAF_NODE	450:37	450:37	9	)
EQ_OPERATOR	450:39	450:39	9	==
LEAF_NODE	450:39	450:39	10	==
FIELD	450:42	450:42	9	0
LEAF_NODE	450:42	450:42	10	0
LEAF_NODE	450:43	450:43	7	)
STATEMENTS	450:45	454:2	7	
LEAF_NODE	450:45	450:45	8	{
STATEMENTS	451:3	453:31	8	
EXPR_STATEMENT	451:3	451:51	9	td -> td_nsubifd = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	451:3	451:3	10	td -> td_nsubifd = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	451:3	451:20	11	td -> td_nsubifd = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	451:3	451:3	12	td -> td_nsubifd
FIELD	451:3	451:7	13	td -> td_nsubifd
LEAF_NODE	451:3	451:3	14	td
LEAF_NODE	451:5	451:5	14	->
LEAF_NODE	451:7	451:7	14	td_nsubifd
ASSIGN_OP	451:18	451:18	12	=
LEAF_NODE	451:18	451:18	13	=
RVAL	451:20	451:29	12	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	451:20	451:20	13	(
TYPE_NAME	451:21	451:21	13	uint16
LEAF_NODE	451:21	451:21	14	uint16
LEAF_NODE	451:27	451:27	13	)
FUNCTION_CALL	451:29	451:50	13	va_arg ( ap , uint16_vap )
CALLEE	451:29	451:29	14	va_arg
LEAF_NODE	451:29	451:29	15	va_arg
LEAF_NODE	451:35	451:35	14	(
ARGUMENT	451:36	451:36	14	ap
FIELD	451:36	451:36	15	ap
LEAF_NODE	451:36	451:36	16	ap
LEAF_NODE	451:38	451:38	14	,
ARGUMENT	451:40	451:40	14	uint16_vap
FIELD	451:40	451:40	15	uint16_vap
LEAF_NODE	451:40	451:40	16	uint16_vap
LEAF_NODE	451:50	451:50	14	)
LEAF_NODE	451:51	451:51	10	;
LEAF_NODE	452:3	452:3	9	_TIFFsetLong8Array
LEAF_NODE	452:21	452:21	9	(
LEAF_NODE	452:22	452:22	9	&
LEAF_NODE	452:23	452:23	9	td
LEAF_NODE	452:25	452:25	9	->
LEAF_NODE	452:27	452:27	9	td_subifd
LEAF_NODE	452:36	452:36	9	,
LEAF_NODE	452:38	452:38	9	(
LEAF_NODE	452:39	452:39	9	uint64
LEAF_NODE	452:45	452:45	9	*
LEAF_NODE	452:46	452:46	9	)
LEAF_NODE	452:48	452:48	9	va_arg
LEAF_NODE	452:54	452:54	9	(
LEAF_NODE	452:55	452:55	9	ap
LEAF_NODE	452:57	452:57	9	,
LEAF_NODE	452:59	452:59	9	uint64
LEAF_NODE	452:65	452:65	9	*
LEAF_NODE	452:66	452:66	9	)
LEAF_NODE	452:67	452:67	9	,
LEAF_NODE	453:7	453:7	9	(
LEAF_NODE	453:8	453:8	9	uint32
LEAF_NODE	453:14	453:14	9	)
LEAF_NODE	453:16	453:16	9	td
LEAF_NODE	453:18	453:18	9	->
LEAF_NODE	453:20	453:20	9	td_nsubifd
LEAF_NODE	453:30	453:30	9	)
LEAF_NODE	453:31	453:31	9	;
LEAF_NODE	454:2	454:2	8	}
SELECTION	454:4	454:9	6	
KEYWORD	454:4	454:4	7	else
LEAF_NODE	454:4	454:4	8	else
STATEMENTS	454:9	459:2	7	
LEAF_NODE	454:9	454:9	8	{
STATEMENTS	455:3	458:3	8	
EXPR_STATEMENT	455:3	457:23	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Sorry, cannot nest SubIFDs" , tif -> tif_name ) ;
EXPR	455:3	455:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Sorry, cannot nest SubIFDs" , tif -> tif_name )
FUNCTION_CALL	455:3	457:22	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Sorry, cannot nest SubIFDs" , tif -> tif_name )
CALLEE	455:3	455:3	12	TIFFErrorExt
LEAF_NODE	455:3	455:3	13	TIFFErrorExt
LEAF_NODE	455:15	455:15	12	(
ARGUMENT	455:16	455:16	12	tif -> tif_clientdata
FIELD	455:16	455:21	13	tif -> tif_clientdata
LEAF_NODE	455:16	455:16	14	tif
LEAF_NODE	455:19	455:19	14	->
LEAF_NODE	455:21	455:21	14	tif_clientdata
LEAF_NODE	455:35	455:35	12	,
ARGUMENT	455:37	455:37	12	module
FIELD	455:37	455:37	13	module
LEAF_NODE	455:37	455:37	14	module
LEAF_NODE	455:43	455:43	12	,
ARGUMENT	456:9	456:9	12	"%s: Sorry, cannot nest SubIFDs"
FIELD	456:9	456:9	13	"%s: Sorry, cannot nest SubIFDs"
LEAF_NODE	456:9	456:9	14	"%s: Sorry, cannot nest SubIFDs"
LEAF_NODE	456:41	456:41	12	,
ARGUMENT	457:9	457:9	12	tif -> tif_name
FIELD	457:9	457:14	13	tif -> tif_name
LEAF_NODE	457:9	457:9	14	tif
LEAF_NODE	457:12	457:12	14	->
LEAF_NODE	457:14	457:14	14	tif_name
LEAF_NODE	457:22	457:22	12	)
LEAF_NODE	457:23	457:23	10	;
EXPR_STATEMENT	458:3	458:13	9	status = 0 ;
EXPR	458:3	458:3	10	status = 0
ASSIGN	458:3	458:12	11	status = 0
LVAL	458:3	458:3	12	status
FIELD	458:3	458:3	13	status
LEAF_NODE	458:3	458:3	14	status
ASSIGN_OP	458:10	458:10	12	=
LEAF_NODE	458:10	458:10	13	=
RVAL	458:12	458:12	12	0
FIELD	458:12	458:12	13	0
LEAF_NODE	458:12	458:12	14	0
LEAF_NODE	458:13	458:13	10	;
LEAF_NODE	459:2	459:2	8	}
JUMP_STATEMENT	460:2	460:7	6	break DESTINATION ;
KEYWORD	460:2	460:2	7	break
LEAF_NODE	460:2	460:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	460:7	460:7	7	;
LABEL	461:1	461:30	6	case TIFFTAG_YCBCRPOSITIONING :
LEAF_NODE	461:1	461:1	7	case
LEAF_NODE	461:6	461:6	7	TIFFTAG_YCBCRPOSITIONING
LEAF_NODE	461:30	461:30	7	:
EXPR_STATEMENT	462:2	462:59	6	td -> td_ycbcrpositioning = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	462:2	462:2	7	td -> td_ycbcrpositioning = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	462:2	462:28	8	td -> td_ycbcrpositioning = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	462:2	462:2	9	td -> td_ycbcrpositioning
FIELD	462:2	462:6	10	td -> td_ycbcrpositioning
LEAF_NODE	462:2	462:2	11	td
LEAF_NODE	462:4	462:4	11	->
LEAF_NODE	462:6	462:6	11	td_ycbcrpositioning
ASSIGN_OP	462:26	462:26	9	=
LEAF_NODE	462:26	462:26	10	=
RVAL	462:28	462:37	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	462:28	462:28	10	(
TYPE_NAME	462:29	462:29	10	uint16
LEAF_NODE	462:29	462:29	11	uint16
LEAF_NODE	462:35	462:35	10	)
FUNCTION_CALL	462:37	462:58	10	va_arg ( ap , uint16_vap )
CALLEE	462:37	462:37	11	va_arg
LEAF_NODE	462:37	462:37	12	va_arg
LEAF_NODE	462:43	462:43	11	(
ARGUMENT	462:44	462:44	11	ap
FIELD	462:44	462:44	12	ap
LEAF_NODE	462:44	462:44	13	ap
LEAF_NODE	462:46	462:46	11	,
ARGUMENT	462:48	462:48	11	uint16_vap
FIELD	462:48	462:48	12	uint16_vap
LEAF_NODE	462:48	462:48	13	uint16_vap
LEAF_NODE	462:58	462:58	11	)
LEAF_NODE	462:59	462:59	7	;
JUMP_STATEMENT	463:2	463:7	6	break DESTINATION ;
KEYWORD	463:2	463:2	7	break
LEAF_NODE	463:2	463:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	463:7	463:7	7	;
LABEL	464:1	464:30	6	case TIFFTAG_YCBCRSUBSAMPLING :
LEAF_NODE	464:1	464:1	7	case
LEAF_NODE	464:6	464:6	7	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	464:30	464:30	7	:
EXPR_STATEMENT	465:2	465:62	6	td -> td_ycbcrsubsampling [ 0 ] = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	465:2	465:2	7	td -> td_ycbcrsubsampling [ 0 ] = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	465:2	465:31	8	td -> td_ycbcrsubsampling [ 0 ] = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	465:2	465:2	9	td -> td_ycbcrsubsampling [ 0 ]
FIELD	465:2	465:27	10	td -> td_ycbcrsubsampling [ 0 ]
LEAF_NODE	465:2	465:2	11	td
LEAF_NODE	465:4	465:4	11	->
LEAF_NODE	465:6	465:6	11	td_ycbcrsubsampling
LEAF_NODE	465:25	465:25	11	[
EXPR	465:26	465:26	11	0
FIELD	465:26	465:26	12	0
LEAF_NODE	465:26	465:26	13	0
LEAF_NODE	465:27	465:27	11	]
ASSIGN_OP	465:29	465:29	9	=
LEAF_NODE	465:29	465:29	10	=
RVAL	465:31	465:40	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	465:31	465:31	10	(
TYPE_NAME	465:32	465:32	10	uint16
LEAF_NODE	465:32	465:32	11	uint16
LEAF_NODE	465:38	465:38	10	)
FUNCTION_CALL	465:40	465:61	10	va_arg ( ap , uint16_vap )
CALLEE	465:40	465:40	11	va_arg
LEAF_NODE	465:40	465:40	12	va_arg
LEAF_NODE	465:46	465:46	11	(
ARGUMENT	465:47	465:47	11	ap
FIELD	465:47	465:47	12	ap
LEAF_NODE	465:47	465:47	13	ap
LEAF_NODE	465:49	465:49	11	,
ARGUMENT	465:51	465:51	11	uint16_vap
FIELD	465:51	465:51	12	uint16_vap
LEAF_NODE	465:51	465:51	13	uint16_vap
LEAF_NODE	465:61	465:61	11	)
LEAF_NODE	465:62	465:62	7	;
EXPR_STATEMENT	466:2	466:62	6	td -> td_ycbcrsubsampling [ 1 ] = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	466:2	466:2	7	td -> td_ycbcrsubsampling [ 1 ] = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	466:2	466:31	8	td -> td_ycbcrsubsampling [ 1 ] = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	466:2	466:2	9	td -> td_ycbcrsubsampling [ 1 ]
FIELD	466:2	466:27	10	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	466:2	466:2	11	td
LEAF_NODE	466:4	466:4	11	->
LEAF_NODE	466:6	466:6	11	td_ycbcrsubsampling
LEAF_NODE	466:25	466:25	11	[
EXPR	466:26	466:26	11	1
FIELD	466:26	466:26	12	1
LEAF_NODE	466:26	466:26	13	1
LEAF_NODE	466:27	466:27	11	]
ASSIGN_OP	466:29	466:29	9	=
LEAF_NODE	466:29	466:29	10	=
RVAL	466:31	466:40	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	466:31	466:31	10	(
TYPE_NAME	466:32	466:32	10	uint16
LEAF_NODE	466:32	466:32	11	uint16
LEAF_NODE	466:38	466:38	10	)
FUNCTION_CALL	466:40	466:61	10	va_arg ( ap , uint16_vap )
CALLEE	466:40	466:40	11	va_arg
LEAF_NODE	466:40	466:40	12	va_arg
LEAF_NODE	466:46	466:46	11	(
ARGUMENT	466:47	466:47	11	ap
FIELD	466:47	466:47	12	ap
LEAF_NODE	466:47	466:47	13	ap
LEAF_NODE	466:49	466:49	11	,
ARGUMENT	466:51	466:51	11	uint16_vap
FIELD	466:51	466:51	12	uint16_vap
LEAF_NODE	466:51	466:51	13	uint16_vap
LEAF_NODE	466:61	466:61	11	)
LEAF_NODE	466:62	466:62	7	;
JUMP_STATEMENT	467:2	467:7	6	break DESTINATION ;
KEYWORD	467:2	467:2	7	break
LEAF_NODE	467:2	467:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	467:7	467:7	7	;
LABEL	468:1	468:30	6	case TIFFTAG_TRANSFERFUNCTION :
LEAF_NODE	468:1	468:1	7	case
LEAF_NODE	468:6	468:6	7	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	468:30	468:30	7	:
EXPR_STATEMENT	469:2	469:64	6	v = ( td -> td_samplesperpixel - td -> td_extrasamples ) > 1 ? 3 : 1 ;
EXPR	469:2	469:2	7	v = ( td -> td_samplesperpixel - td -> td_extrasamples ) > 1 ? 3 : 1
ASSIGN	469:2	469:6	8	v = ( td -> td_samplesperpixel - td -> td_extrasamples ) > 1 ? 3 : 1
LVAL	469:2	469:2	9	v
FIELD	469:2	469:2	10	v
LEAF_NODE	469:2	469:2	11	v
ASSIGN_OP	469:4	469:4	9	=
LEAF_NODE	469:4	469:4	10	=
RVAL	469:6	469:6	9	( td -> td_samplesperpixel - td -> td_extrasamples ) > 1 ? 3 : 1
COND_EXPR	469:6	469:63	10	( td -> td_samplesperpixel - td -> td_extrasamples ) > 1 ? 3 : 1
CONDITION	469:6	469:55	11	( td -> td_samplesperpixel - td -> td_extrasamples ) > 1
LEAF_NODE	469:6	469:6	12	(
FIELD	469:7	469:11	12	td -> td_samplesperpixel
LEAF_NODE	469:7	469:7	13	td
LEAF_NODE	469:9	469:9	13	->
LEAF_NODE	469:11	469:11	13	td_samplesperpixel
LEAF_NODE	469:30	469:30	12	-
FIELD	469:32	469:36	12	td -> td_extrasamples
LEAF_NODE	469:32	469:32	13	td
LEAF_NODE	469:34	469:34	13	->
LEAF_NODE	469:36	469:36	13	td_extrasamples
LEAF_NODE	469:51	469:51	12	)
REL_OPERATOR	469:53	469:53	12	>
LEAF_NODE	469:53	469:53	13	>
FIELD	469:55	469:55	12	1
LEAF_NODE	469:55	469:55	13	1
LEAF_NODE	469:57	469:57	11	?
EXPR	469:59	469:59	11	3
FIELD	469:59	469:59	12	3
LEAF_NODE	469:59	469:59	13	3
LEAF_NODE	469:61	469:61	11	:
FIELD	469:63	469:63	11	1
LEAF_NODE	469:63	469:63	12	1
LEAF_NODE	469:64	469:64	7	;
ITERATION	470:2	471:3	6	
KEYWORD	470:2	470:2	7	for
LEAF_NODE	470:2	470:2	8	for
LEAF_NODE	470:6	470:6	7	(
FOR_INIT	470:7	470:12	7	i = 0 ;
EXPR	470:7	470:7	8	i = 0
ASSIGN	470:7	470:11	9	i = 0
LVAL	470:7	470:7	10	i
FIELD	470:7	470:7	11	i
LEAF_NODE	470:7	470:7	12	i
ASSIGN_OP	470:9	470:9	10	=
LEAF_NODE	470:9	470:9	11	=
RVAL	470:11	470:11	10	0
FIELD	470:11	470:11	11	0
LEAF_NODE	470:11	470:11	12	0
LEAF_NODE	470:12	470:12	8	;
CONDITION	470:14	470:14	7	i < v
EXPR	470:14	470:18	8	i < v
FIELD	470:14	470:14	9	i
LEAF_NODE	470:14	470:14	10	i
REL_OPERATOR	470:16	470:16	9	<
LEAF_NODE	470:16	470:16	10	<
FIELD	470:18	470:18	9	v
LEAF_NODE	470:18	470:18	10	v
LEAF_NODE	470:19	470:19	7	;
FOR_EXPR	470:21	470:21	7	i ++
EXPR	470:21	470:21	8	i ++
FIELD	470:21	470:22	9	i ++
LEAF_NODE	470:21	470:21	10	i
LEAF_NODE	470:22	470:22	10	++
LEAF_NODE	470:24	470:24	7	)
STATEMENTS	471:3	471:3	7	
LEAF_NODE	471:3	471:3	8	_TIFFsetShortArray
LEAF_NODE	471:21	471:21	6	(
LEAF_NODE	471:22	471:22	6	&
LEAF_NODE	471:23	471:23	6	td
LEAF_NODE	471:25	471:25	6	->
LEAF_NODE	471:27	471:27	6	td_transferfunction
LEAF_NODE	471:46	471:46	6	[
LEAF_NODE	471:47	471:47	6	i
LEAF_NODE	471:48	471:48	6	]
LEAF_NODE	471:49	471:49	6	,
LEAF_NODE	472:7	472:7	6	va_arg
LEAF_NODE	472:13	472:13	6	(
LEAF_NODE	472:14	472:14	6	ap
LEAF_NODE	472:16	472:16	6	,
LEAF_NODE	472:18	472:18	6	uint16
LEAF_NODE	472:24	472:24	6	*
LEAF_NODE	472:25	472:25	6	)
LEAF_NODE	472:26	472:26	6	,
LEAF_NODE	472:28	472:28	6	1U
LEAF_NODE	472:30	472:30	6	<<
LEAF_NODE	472:32	472:32	6	td
LEAF_NODE	472:34	472:34	6	->
LEAF_NODE	472:36	472:36	6	td_bitspersample
LEAF_NODE	472:52	472:52	6	)
LEAF_NODE	472:53	472:53	6	;
JUMP_STATEMENT	473:2	473:7	6	break DESTINATION ;
KEYWORD	473:2	473:2	7	break
LEAF_NODE	473:2	473:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	473:7	473:7	7	;
LABEL	474:1	474:33	6	case TIFFTAG_REFERENCEBLACKWHITE :
LEAF_NODE	474:1	474:1	7	case
LEAF_NODE	474:6	474:6	7	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	474:33	474:33	7	:
LEAF_NODE	476:2	476:2	6	_TIFFsetFloatArray
LEAF_NODE	476:20	476:20	6	(
LEAF_NODE	476:21	476:21	6	&
LEAF_NODE	476:22	476:22	6	td
LEAF_NODE	476:24	476:24	6	->
LEAF_NODE	476:26	476:26	6	td_refblackwhite
LEAF_NODE	476:42	476:42	6	,
LEAF_NODE	476:44	476:44	6	va_arg
LEAF_NODE	476:50	476:50	6	(
LEAF_NODE	476:51	476:51	6	ap
LEAF_NODE	476:53	476:53	6	,
LEAF_NODE	476:55	476:55	6	float
LEAF_NODE	476:60	476:60	6	*
LEAF_NODE	476:61	476:61	6	)
LEAF_NODE	476:62	476:62	6	,
LEAF_NODE	476:64	476:64	6	6
LEAF_NODE	476:65	476:65	6	)
LEAF_NODE	476:66	476:66	6	;
JUMP_STATEMENT	477:2	477:7	6	break DESTINATION ;
KEYWORD	477:2	477:2	7	break
LEAF_NODE	477:2	477:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	477:7	477:7	7	;
LABEL	478:1	478:22	6	case TIFFTAG_INKNAMES :
LEAF_NODE	478:1	478:1	7	case
LEAF_NODE	478:6	478:6	7	TIFFTAG_INKNAMES
LEAF_NODE	478:22	478:22	7	:
EXPR_STATEMENT	479:2	479:37	6	v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	479:2	479:2	7	v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	479:2	479:6	8	v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	479:2	479:2	9	v
FIELD	479:2	479:2	10	v
LEAF_NODE	479:2	479:2	11	v
ASSIGN_OP	479:4	479:4	9	=
LEAF_NODE	479:4	479:4	10	=
RVAL	479:6	479:15	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	479:6	479:6	10	(
TYPE_NAME	479:7	479:7	10	uint16
LEAF_NODE	479:7	479:7	11	uint16
LEAF_NODE	479:13	479:13	10	)
FUNCTION_CALL	479:15	479:36	10	va_arg ( ap , uint16_vap )
CALLEE	479:15	479:15	11	va_arg
LEAF_NODE	479:15	479:15	12	va_arg
LEAF_NODE	479:21	479:21	11	(
ARGUMENT	479:22	479:22	11	ap
FIELD	479:22	479:22	12	ap
LEAF_NODE	479:22	479:22	13	ap
LEAF_NODE	479:24	479:24	11	,
ARGUMENT	479:26	479:26	11	uint16_vap
FIELD	479:26	479:26	12	uint16_vap
LEAF_NODE	479:26	479:26	13	uint16_vap
LEAF_NODE	479:36	479:36	11	)
LEAF_NODE	479:37	479:37	7	;
LEAF_NODE	480:2	480:2	6	s
LEAF_NODE	480:4	480:4	6	=
LEAF_NODE	480:6	480:6	6	va_arg
LEAF_NODE	480:12	480:12	6	(
LEAF_NODE	480:13	480:13	6	ap
LEAF_NODE	480:15	480:15	6	,
LEAF_NODE	480:17	480:17	6	char
LEAF_NODE	480:21	480:21	6	*
LEAF_NODE	480:22	480:22	6	)
LEAF_NODE	480:23	480:23	6	;
EXPR_STATEMENT	481:2	481:36	6	v = checkInkNamesString ( tif , v , s ) ;
EXPR	481:2	481:2	7	v = checkInkNamesString ( tif , v , s )
ASSIGN	481:2	481:6	8	v = checkInkNamesString ( tif , v , s )
LVAL	481:2	481:2	9	v
FIELD	481:2	481:2	10	v
LEAF_NODE	481:2	481:2	11	v
ASSIGN_OP	481:4	481:4	9	=
LEAF_NODE	481:4	481:4	10	=
RVAL	481:6	481:6	9	checkInkNamesString ( tif , v , s )
FUNCTION_CALL	481:6	481:35	10	checkInkNamesString ( tif , v , s )
CALLEE	481:6	481:6	11	checkInkNamesString
LEAF_NODE	481:6	481:6	12	checkInkNamesString
LEAF_NODE	481:25	481:25	11	(
ARGUMENT	481:26	481:26	11	tif
FIELD	481:26	481:26	12	tif
LEAF_NODE	481:26	481:26	13	tif
LEAF_NODE	481:29	481:29	11	,
ARGUMENT	481:31	481:31	11	v
FIELD	481:31	481:31	12	v
LEAF_NODE	481:31	481:31	13	v
LEAF_NODE	481:32	481:32	11	,
ARGUMENT	481:34	481:34	11	s
FIELD	481:34	481:34	12	s
LEAF_NODE	481:34	481:34	13	s
LEAF_NODE	481:35	481:35	11	)
LEAF_NODE	481:36	481:36	7	;
EXPR_STATEMENT	482:2	482:16	6	status = v > 0 ;
EXPR	482:2	482:2	7	status = v > 0
ASSIGN	482:2	482:11	8	status = v > 0
LVAL	482:2	482:2	9	status
FIELD	482:2	482:2	10	status
LEAF_NODE	482:2	482:2	11	status
ASSIGN_OP	482:9	482:9	9	=
LEAF_NODE	482:9	482:9	10	=
RVAL	482:11	482:15	9	v > 0
FIELD	482:11	482:11	10	v
LEAF_NODE	482:11	482:11	11	v
REL_OPERATOR	482:13	482:13	10	>
LEAF_NODE	482:13	482:13	11	>
FIELD	482:15	482:15	10	0
LEAF_NODE	482:15	482:15	11	0
LEAF_NODE	482:16	482:16	7	;
SELECTION	483:2	483:14	6	
KEYWORD	483:2	483:2	7	if
LEAF_NODE	483:2	483:2	8	if
LEAF_NODE	483:4	483:4	7	(
CONDITION	483:6	483:6	7	v > 0
EXPR	483:6	483:10	8	v > 0
FIELD	483:6	483:6	9	v
LEAF_NODE	483:6	483:6	10	v
REL_OPERATOR	483:8	483:8	9	>
LEAF_NODE	483:8	483:8	10	>
FIELD	483:10	483:10	9	0
LEAF_NODE	483:10	483:10	10	0
LEAF_NODE	483:12	483:12	7	)
STATEMENTS	483:14	486:2	7	
LEAF_NODE	483:14	483:14	8	{
STATEMENTS	484:3	485:3	8	
EXPR_STATEMENT	484:3	484:42	9	_TIFFsetNString ( & td -> td_inknames , s , v ) ;
EXPR	484:3	484:3	10	_TIFFsetNString ( & td -> td_inknames , s , v )
FUNCTION_CALL	484:3	484:41	11	_TIFFsetNString ( & td -> td_inknames , s , v )
CALLEE	484:3	484:3	12	_TIFFsetNString
LEAF_NODE	484:3	484:3	13	_TIFFsetNString
LEAF_NODE	484:18	484:18	12	(
ARGUMENT	484:19	484:19	12	& td -> td_inknames
UNARY_EXPR	484:19	484:20	13	& td -> td_inknames
UNARY_OPERATOR	484:19	484:19	14	&
LEAF_NODE	484:19	484:19	15	&
FIELD	484:20	484:24	14	td -> td_inknames
LEAF_NODE	484:20	484:20	15	td
LEAF_NODE	484:22	484:22	15	->
LEAF_NODE	484:24	484:24	15	td_inknames
LEAF_NODE	484:35	484:35	12	,
ARGUMENT	484:37	484:37	12	s
FIELD	484:37	484:37	13	s
LEAF_NODE	484:37	484:37	14	s
LEAF_NODE	484:38	484:38	12	,
ARGUMENT	484:40	484:40	12	v
FIELD	484:40	484:40	13	v
LEAF_NODE	484:40	484:40	14	v
LEAF_NODE	484:41	484:41	12	)
LEAF_NODE	484:42	484:42	10	;
EXPR_STATEMENT	485:3	485:25	9	td -> td_inknameslen = v ;
EXPR	485:3	485:3	10	td -> td_inknameslen = v
ASSIGN	485:3	485:24	11	td -> td_inknameslen = v
LVAL	485:3	485:3	12	td -> td_inknameslen
FIELD	485:3	485:7	13	td -> td_inknameslen
LEAF_NODE	485:3	485:3	14	td
LEAF_NODE	485:5	485:5	14	->
LEAF_NODE	485:7	485:7	14	td_inknameslen
ASSIGN_OP	485:22	485:22	12	=
LEAF_NODE	485:22	485:22	13	=
RVAL	485:24	485:24	12	v
FIELD	485:24	485:24	13	v
LEAF_NODE	485:24	485:24	14	v
LEAF_NODE	485:25	485:25	10	;
LEAF_NODE	486:2	486:2	8	}
JUMP_STATEMENT	487:2	487:7	6	break DESTINATION ;
KEYWORD	487:2	487:2	7	break
LEAF_NODE	487:2	487:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	487:7	487:7	7	;
LABEL	488:1	488:23	6	case TIFFTAG_PERSAMPLE :
LEAF_NODE	488:1	488:1	7	case
LEAF_NODE	488:6	488:6	7	TIFFTAG_PERSAMPLE
LEAF_NODE	488:23	488:23	7	:
EXPR_STATEMENT	489:2	489:37	6	v = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	489:2	489:2	7	v = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	489:2	489:6	8	v = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	489:2	489:2	9	v
FIELD	489:2	489:2	10	v
LEAF_NODE	489:2	489:2	11	v
ASSIGN_OP	489:4	489:4	9	=
LEAF_NODE	489:4	489:4	10	=
RVAL	489:6	489:15	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	489:6	489:6	10	(
TYPE_NAME	489:7	489:7	10	uint16
LEAF_NODE	489:7	489:7	11	uint16
LEAF_NODE	489:13	489:13	10	)
FUNCTION_CALL	489:15	489:36	10	va_arg ( ap , uint16_vap )
CALLEE	489:15	489:15	11	va_arg
LEAF_NODE	489:15	489:15	12	va_arg
LEAF_NODE	489:21	489:21	11	(
ARGUMENT	489:22	489:22	11	ap
FIELD	489:22	489:22	12	ap
LEAF_NODE	489:22	489:22	13	ap
LEAF_NODE	489:24	489:24	11	,
ARGUMENT	489:26	489:26	11	uint16_vap
FIELD	489:26	489:26	12	uint16_vap
LEAF_NODE	489:26	489:26	13	uint16_vap
LEAF_NODE	489:36	489:36	11	)
LEAF_NODE	489:37	489:37	7	;
SELECTION	490:2	491:3	6	
KEYWORD	490:2	490:2	7	if
LEAF_NODE	490:2	490:2	8	if
LEAF_NODE	490:4	490:4	7	(
CONDITION	490:6	490:6	7	v == PERSAMPLE_MULTI
EXPR	490:6	490:11	8	v == PERSAMPLE_MULTI
FIELD	490:6	490:6	9	v
LEAF_NODE	490:6	490:6	10	v
EQ_OPERATOR	490:8	490:8	9	==
LEAF_NODE	490:8	490:8	10	==
FIELD	490:11	490:11	9	PERSAMPLE_MULTI
LEAF_NODE	490:11	490:11	10	PERSAMPLE_MULTI
LEAF_NODE	490:27	490:27	7	)
STATEMENTS	491:3	491:3	7	
EXPR_STATEMENT	491:3	491:35	8	tif -> tif_flags |= TIFF_PERSAMPLE ;
EXPR	491:3	491:3	9	tif -> tif_flags |= TIFF_PERSAMPLE
ASSIGN	491:3	491:21	10	tif -> tif_flags |= TIFF_PERSAMPLE
LVAL	491:3	491:3	11	tif -> tif_flags
FIELD	491:3	491:8	12	tif -> tif_flags
LEAF_NODE	491:3	491:3	13	tif
LEAF_NODE	491:6	491:6	13	->
LEAF_NODE	491:8	491:8	13	tif_flags
ASSIGN_OP	491:18	491:18	11	|=
LEAF_NODE	491:18	491:18	12	|=
RVAL	491:21	491:21	11	TIFF_PERSAMPLE
FIELD	491:21	491:21	12	TIFF_PERSAMPLE
LEAF_NODE	491:21	491:21	13	TIFF_PERSAMPLE
LEAF_NODE	491:35	491:35	9	;
SELECTION	492:2	493:3	6	
KEYWORD	492:2	492:2	7	else
LEAF_NODE	492:2	492:2	8	else
STATEMENTS	493:3	493:3	7	
EXPR_STATEMENT	493:3	493:36	8	tif -> tif_flags &= ~TIFF_PERSAMPLE ;
EXPR	493:3	493:3	9	tif -> tif_flags &= ~TIFF_PERSAMPLE
ASSIGN	493:3	493:21	10	tif -> tif_flags &= ~TIFF_PERSAMPLE
LVAL	493:3	493:3	11	tif -> tif_flags
FIELD	493:3	493:8	12	tif -> tif_flags
LEAF_NODE	493:3	493:3	13	tif
LEAF_NODE	493:6	493:6	13	->
LEAF_NODE	493:8	493:8	13	tif_flags
ASSIGN_OP	493:18	493:18	11	&=
LEAF_NODE	493:18	493:18	12	&=
RVAL	493:21	493:21	11	~TIFF_PERSAMPLE
FIELD	493:21	493:21	12	~TIFF_PERSAMPLE
LEAF_NODE	493:21	493:21	13	~TIFF_PERSAMPLE
LEAF_NODE	493:36	493:36	9	;
JUMP_STATEMENT	494:2	494:7	6	break DESTINATION ;
KEYWORD	494:2	494:2	7	break
LEAF_NODE	494:2	494:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	494:7	494:7	7	;
LABEL	495:1	495:8	6	default :
LEAF_NODE	495:1	495:1	7	default
LEAF_NODE	495:8	495:8	7	:
LEAF_NODE	495:10	495:10	6	{
STATEMENTS	496:2	589:2	6	
SIMPLE_DECL	496:2	496:18	7	TIFFTagValue * tv ;
VAR_DECL	496:2	496:16	8	TIFFTagValue * tv
TYPE	496:2	496:15	9	TIFFTagValue *
TYPE_NAME	496:2	496:2	10	TIFFTagValue
LEAF_NODE	496:2	496:2	11	TIFFTagValue
POINTER	496:15	496:15	10	*
LEAF_NODE	496:15	496:15	11	*
NAME	496:16	496:16	9	tv
LEAF_NODE	496:16	496:16	10	tv
LEAF_NODE	496:18	496:18	8	;
SIMPLE_DECL	497:2	497:22	7	int tv_size , int iCustom ;
INIT_DECL_LIST	497:2	497:2	8	int tv_size , int iCustom
VAR_DECL	497:2	497:6	9	int tv_size
TYPE	497:2	497:2	10	int
TYPE_NAME	497:2	497:2	11	int
LEAF_NODE	497:2	497:2	12	int
NAME	497:6	497:6	10	tv_size
LEAF_NODE	497:6	497:6	11	tv_size
LEAF_NODE	497:13	497:13	9	,
VAR_DECL	497:2	497:15	9	int iCustom
TYPE	497:2	497:2	10	int
TYPE_NAME	497:2	497:2	11	int
LEAF_NODE	497:2	497:2	12	int
NAME	497:15	497:15	10	iCustom
LEAF_NODE	497:15	497:15	11	iCustom
LEAF_NODE	497:22	497:22	8	;
SELECTION	508:2	508:37	7	
KEYWORD	508:2	508:2	8	if
LEAF_NODE	508:2	508:2	9	if
LEAF_NODE	508:4	508:4	8	(
CONDITION	508:5	508:5	8	fip -> field_bit != FIELD_CUSTOM
EXPR	508:5	508:23	9	fip -> field_bit != FIELD_CUSTOM
FIELD	508:5	508:10	10	fip -> field_bit
LEAF_NODE	508:5	508:5	11	fip
LEAF_NODE	508:8	508:8	11	->
LEAF_NODE	508:10	508:10	11	field_bit
EQ_OPERATOR	508:20	508:20	10	!=
LEAF_NODE	508:20	508:20	11	!=
FIELD	508:23	508:23	10	FIELD_CUSTOM
LEAF_NODE	508:23	508:23	11	FIELD_CUSTOM
LEAF_NODE	508:35	508:35	8	)
STATEMENTS	508:37	515:2	8	
LEAF_NODE	508:37	508:37	9	{
STATEMENTS	509:3	514:3	9	
EXPR_STATEMENT	509:3	512:23	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Invalid %stag \"%s\" (not supported by codec)" , tif -> tif_name , isPseudoTag ( tag ) ? "pseudo-" : "" , fip -> field_name ) ;
EXPR	509:3	509:3	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Invalid %stag \"%s\" (not supported by codec)" , tif -> tif_name , isPseudoTag ( tag ) ? "pseudo-" : "" , fip -> field_name )
FUNCTION_CALL	509:3	512:22	12	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Invalid %stag \"%s\" (not supported by codec)" , tif -> tif_name , isPseudoTag ( tag ) ? "pseudo-" : "" , fip -> field_name )
CALLEE	509:3	509:3	13	TIFFErrorExt
LEAF_NODE	509:3	509:3	14	TIFFErrorExt
LEAF_NODE	509:15	509:15	13	(
ARGUMENT	509:16	509:16	13	tif -> tif_clientdata
FIELD	509:16	509:21	14	tif -> tif_clientdata
LEAF_NODE	509:16	509:16	15	tif
LEAF_NODE	509:19	509:19	15	->
LEAF_NODE	509:21	509:21	15	tif_clientdata
LEAF_NODE	509:35	509:35	13	,
ARGUMENT	509:37	509:37	13	module
FIELD	509:37	509:37	14	module
LEAF_NODE	509:37	509:37	15	module
LEAF_NODE	509:43	509:43	13	,
ARGUMENT	510:7	510:7	13	"%s: Invalid %stag \"%s\" (not supported by codec)"
FIELD	510:7	510:7	14	"%s: Invalid %stag \"%s\" (not supported by codec)"
LEAF_NODE	510:7	510:7	15	"%s: Invalid %stag \"%s\" (not supported by codec)"
LEAF_NODE	510:58	510:58	13	,
ARGUMENT	511:7	511:7	13	tif -> tif_name
FIELD	511:7	511:12	14	tif -> tif_name
LEAF_NODE	511:7	511:7	15	tif
LEAF_NODE	511:10	511:10	15	->
LEAF_NODE	511:12	511:12	15	tif_name
LEAF_NODE	511:20	511:20	13	,
ARGUMENT	511:22	511:22	13	isPseudoTag ( tag ) ? "pseudo-" : ""
COND_EXPR	511:22	511:53	14	isPseudoTag ( tag ) ? "pseudo-" : ""
CONDITION	511:22	511:22	15	isPseudoTag ( tag )
FUNCTION_CALL	511:22	511:37	16	isPseudoTag ( tag )
CALLEE	511:22	511:22	17	isPseudoTag
LEAF_NODE	511:22	511:22	18	isPseudoTag
LEAF_NODE	511:33	511:33	17	(
ARGUMENT	511:34	511:34	17	tag
FIELD	511:34	511:34	18	tag
LEAF_NODE	511:34	511:34	19	tag
LEAF_NODE	511:37	511:37	17	)
LEAF_NODE	511:39	511:39	15	?
EXPR	511:41	511:41	15	"pseudo-"
FIELD	511:41	511:41	16	"pseudo-"
LEAF_NODE	511:41	511:41	17	"pseudo-"
LEAF_NODE	511:51	511:51	15	:
FIELD	511:53	511:53	15	""
LEAF_NODE	511:53	511:53	16	""
LEAF_NODE	511:55	511:55	13	,
ARGUMENT	512:7	512:7	13	fip -> field_name
FIELD	512:7	512:12	14	fip -> field_name
LEAF_NODE	512:7	512:7	15	fip
LEAF_NODE	512:10	512:10	15	->
LEAF_NODE	512:12	512:12	15	field_name
LEAF_NODE	512:22	512:22	13	)
LEAF_NODE	512:23	512:23	11	;
EXPR_STATEMENT	513:3	513:13	10	status = 0 ;
EXPR	513:3	513:3	11	status = 0
ASSIGN	513:3	513:12	12	status = 0
LVAL	513:3	513:3	13	status
FIELD	513:3	513:3	14	status
LEAF_NODE	513:3	513:3	15	status
ASSIGN_OP	513:10	513:10	13	=
LEAF_NODE	513:10	513:10	14	=
RVAL	513:12	513:12	13	0
FIELD	513:12	513:12	14	0
LEAF_NODE	513:12	513:12	15	0
LEAF_NODE	513:13	513:13	11	;
JUMP_STATEMENT	514:3	514:8	10	break DESTINATION ;
KEYWORD	514:3	514:3	11	break
LEAF_NODE	514:3	514:3	12	break
LEAF_NODE	0:0	0:0	11	DESTINATION
LEAF_NODE	514:8	514:8	11	;
LEAF_NODE	515:2	515:2	9	}
EXPR_STATEMENT	520:2	520:11	7	tv = NULL ;
EXPR	520:2	520:2	8	tv = NULL
ASSIGN	520:2	520:7	9	tv = NULL
LVAL	520:2	520:2	10	tv
FIELD	520:2	520:2	11	tv
LEAF_NODE	520:2	520:2	12	tv
ASSIGN_OP	520:5	520:5	10	=
LEAF_NODE	520:5	520:5	11	=
RVAL	520:7	520:7	10	NULL
FIELD	520:7	520:7	11	NULL
LEAF_NODE	520:7	520:7	12	NULL
LEAF_NODE	520:11	520:11	8	;
ITERATION	521:2	521:66	7	
KEYWORD	521:2	521:2	8	for
LEAF_NODE	521:2	521:2	9	for
LEAF_NODE	521:6	521:6	8	(
FOR_INIT	521:7	521:18	8	iCustom = 0 ;
EXPR	521:7	521:7	9	iCustom = 0
ASSIGN	521:7	521:17	10	iCustom = 0
LVAL	521:7	521:7	11	iCustom
FIELD	521:7	521:7	12	iCustom
LEAF_NODE	521:7	521:7	13	iCustom
ASSIGN_OP	521:15	521:15	11	=
LEAF_NODE	521:15	521:15	12	=
RVAL	521:17	521:17	11	0
FIELD	521:17	521:17	12	0
LEAF_NODE	521:17	521:17	13	0
LEAF_NODE	521:18	521:18	9	;
CONDITION	521:20	521:20	8	iCustom < td -> td_customValueCount
EXPR	521:20	521:30	9	iCustom < td -> td_customValueCount
FIELD	521:20	521:20	10	iCustom
LEAF_NODE	521:20	521:20	11	iCustom
REL_OPERATOR	521:28	521:28	10	<
LEAF_NODE	521:28	521:28	11	<
FIELD	521:30	521:34	10	td -> td_customValueCount
LEAF_NODE	521:30	521:30	11	td
LEAF_NODE	521:32	521:32	11	->
LEAF_NODE	521:34	521:34	11	td_customValueCount
LEAF_NODE	521:53	521:53	8	;
FOR_EXPR	521:55	521:55	8	iCustom ++
EXPR	521:55	521:55	9	iCustom ++
FIELD	521:55	521:62	10	iCustom ++
LEAF_NODE	521:55	521:55	11	iCustom
LEAF_NODE	521:62	521:62	11	++
LEAF_NODE	521:64	521:64	8	)
STATEMENTS	521:66	530:2	8	
LEAF_NODE	521:66	521:66	9	{
STATEMENTS	522:3	522:3	9	
SELECTION	522:3	522:60	10	
KEYWORD	522:3	522:3	11	if
LEAF_NODE	522:3	522:3	12	if
LEAF_NODE	522:6	522:6	11	(
CONDITION	522:7	522:7	11	td -> td_customValues [ iCustom ] . info -> field_tag == tag
EXPR	522:7	522:55	12	td -> td_customValues [ iCustom ] . info -> field_tag == tag
FIELD	522:7	522:42	13	td -> td_customValues [ iCustom ] . info -> field_tag
LEAF_NODE	522:7	522:7	14	td
LEAF_NODE	522:9	522:9	14	->
LEAF_NODE	522:11	522:11	14	td_customValues
LEAF_NODE	522:26	522:26	14	[
EXPR	522:27	522:27	14	iCustom
FIELD	522:27	522:27	15	iCustom
LEAF_NODE	522:27	522:27	16	iCustom
LEAF_NODE	522:34	522:34	14	]
LEAF_NODE	522:35	522:35	14	.
LEAF_NODE	522:36	522:36	14	info
LEAF_NODE	522:40	522:40	14	->
LEAF_NODE	522:42	522:42	14	field_tag
EQ_OPERATOR	522:52	522:52	13	==
LEAF_NODE	522:52	522:52	14	==
FIELD	522:55	522:55	13	tag
LEAF_NODE	522:55	522:55	14	tag
LEAF_NODE	522:58	522:58	11	)
STATEMENTS	522:60	529:3	11	
LEAF_NODE	522:60	522:60	12	{
STATEMENTS	523:4	528:4	12	
EXPR_STATEMENT	523:4	523:38	13	tv = td -> td_customValues + iCustom ;
EXPR	523:4	523:4	14	tv = td -> td_customValues + iCustom
ASSIGN	523:4	523:9	15	tv = td -> td_customValues + iCustom
LVAL	523:4	523:4	16	tv
FIELD	523:4	523:4	17	tv
LEAF_NODE	523:4	523:4	18	tv
ASSIGN_OP	523:7	523:7	16	=
LEAF_NODE	523:7	523:7	17	=
RVAL	523:9	523:31	16	td -> td_customValues + iCustom
FIELD	523:9	523:13	17	td -> td_customValues
LEAF_NODE	523:9	523:9	18	td
LEAF_NODE	523:11	523:11	18	->
LEAF_NODE	523:13	523:13	18	td_customValues
LEAF_NODE	523:29	523:29	17	+
FIELD	523:31	523:31	17	iCustom
LEAF_NODE	523:31	523:31	18	iCustom
LEAF_NODE	523:38	523:38	14	;
SELECTION	524:4	524:27	13	
KEYWORD	524:4	524:4	14	if
LEAF_NODE	524:4	524:4	15	if
LEAF_NODE	524:7	524:7	14	(
CONDITION	524:8	524:8	14	tv -> value != NULL
EXPR	524:8	524:21	15	tv -> value != NULL
FIELD	524:8	524:12	16	tv -> value
LEAF_NODE	524:8	524:8	17	tv
LEAF_NODE	524:10	524:10	17	->
LEAF_NODE	524:12	524:12	17	value
EQ_OPERATOR	524:18	524:18	16	!=
LEAF_NODE	524:18	524:18	17	!=
FIELD	524:21	524:21	16	NULL
LEAF_NODE	524:21	524:21	17	NULL
LEAF_NODE	524:25	524:25	14	)
STATEMENTS	524:27	527:4	14	
LEAF_NODE	524:27	524:27	15	{
STATEMENTS	525:5	526:5	15	
EXPR_STATEMENT	525:5	525:25	16	_TIFFfree ( tv -> value ) ;
EXPR	525:5	525:5	17	_TIFFfree ( tv -> value )
FUNCTION_CALL	525:5	525:24	18	_TIFFfree ( tv -> value )
CALLEE	525:5	525:5	19	_TIFFfree
LEAF_NODE	525:5	525:5	20	_TIFFfree
LEAF_NODE	525:14	525:14	19	(
ARGUMENT	525:15	525:15	19	tv -> value
FIELD	525:15	525:19	20	tv -> value
LEAF_NODE	525:15	525:15	21	tv
LEAF_NODE	525:17	525:17	21	->
LEAF_NODE	525:19	525:19	21	value
LEAF_NODE	525:24	525:24	19	)
LEAF_NODE	525:25	525:25	17	;
EXPR_STATEMENT	526:5	526:21	16	tv -> value = NULL ;
EXPR	526:5	526:5	17	tv -> value = NULL
ASSIGN	526:5	526:17	18	tv -> value = NULL
LVAL	526:5	526:5	19	tv -> value
FIELD	526:5	526:9	20	tv -> value
LEAF_NODE	526:5	526:5	21	tv
LEAF_NODE	526:7	526:7	21	->
LEAF_NODE	526:9	526:9	21	value
ASSIGN_OP	526:15	526:15	19	=
LEAF_NODE	526:15	526:15	20	=
RVAL	526:17	526:17	19	NULL
FIELD	526:17	526:17	20	NULL
LEAF_NODE	526:17	526:17	21	NULL
LEAF_NODE	526:21	526:21	17	;
LEAF_NODE	527:4	527:4	15	}
JUMP_STATEMENT	528:4	528:9	13	break DESTINATION ;
KEYWORD	528:4	528:4	14	break
LEAF_NODE	528:4	528:4	15	break
LEAF_NODE	0:0	0:0	14	DESTINATION
LEAF_NODE	528:9	528:9	14	;
LEAF_NODE	529:3	529:3	12	}
LEAF_NODE	530:2	530:2	9	}
SELECTION	535:2	535:17	7	
KEYWORD	535:2	535:2	8	if
LEAF_NODE	535:2	535:2	9	if
LEAF_NODE	535:4	535:4	8	(
CONDITION	535:5	535:5	8	tv == NULL
EXPR	535:5	535:11	9	tv == NULL
FIELD	535:5	535:5	10	tv
LEAF_NODE	535:5	535:5	11	tv
EQ_OPERATOR	535:8	535:8	10	==
LEAF_NODE	535:8	535:8	11	==
FIELD	535:11	535:11	10	NULL
LEAF_NODE	535:11	535:11	11	NULL
LEAF_NODE	535:15	535:15	8	)
STATEMENTS	535:17	556:2	8	
LEAF_NODE	535:17	535:17	9	{
STATEMENTS	536:3	555:3	9	
SIMPLE_DECL	536:3	536:33	10	TIFFTagValue * new_customValues ;
VAR_DECL	536:3	536:17	11	TIFFTagValue * new_customValues
TYPE	536:3	536:16	12	TIFFTagValue *
TYPE_NAME	536:3	536:3	13	TIFFTagValue
LEAF_NODE	536:3	536:3	14	TIFFTagValue
POINTER	536:16	536:16	13	*
LEAF_NODE	536:16	536:16	14	*
NAME	536:17	536:17	12	new_customValues
LEAF_NODE	536:17	536:17	13	new_customValues
LEAF_NODE	536:33	536:33	11	;
EXPR_STATEMENT	538:3	538:28	10	td -> td_customValueCount ++ ;
EXPR	538:3	538:3	11	td -> td_customValueCount ++
FIELD	538:3	538:26	12	td -> td_customValueCount ++
LEAF_NODE	538:3	538:3	13	td
LEAF_NODE	538:5	538:5	13	->
LEAF_NODE	538:7	538:7	13	td_customValueCount
LEAF_NODE	538:26	538:26	13	++
LEAF_NODE	538:28	538:28	11	;
EXPR_STATEMENT	539:3	541:54	10	new_customValues = ( TIFFTagValue * ) _TIFFrealloc ( td -> td_customValues , sizeof ( TIFFTagValue ) * td -> td_customValueCount ) ;
EXPR	539:3	539:3	11	new_customValues = ( TIFFTagValue * ) _TIFFrealloc ( td -> td_customValues , sizeof ( TIFFTagValue ) * td -> td_customValueCount )
ASSIGN	539:3	539:22	12	new_customValues = ( TIFFTagValue * ) _TIFFrealloc ( td -> td_customValues , sizeof ( TIFFTagValue ) * td -> td_customValueCount )
LVAL	539:3	539:3	13	new_customValues
FIELD	539:3	539:3	14	new_customValues
LEAF_NODE	539:3	539:3	15	new_customValues
ASSIGN_OP	539:20	539:20	13	=
LEAF_NODE	539:20	539:20	14	=
RVAL	539:22	540:7	13	( TIFFTagValue * ) _TIFFrealloc ( td -> td_customValues , sizeof ( TIFFTagValue ) * td -> td_customValueCount )
LEAF_NODE	539:22	539:22	14	(
TYPE_NAME	539:23	539:23	14	TIFFTagValue
LEAF_NODE	539:23	539:23	15	TIFFTagValue
LEAF_NODE	539:36	539:36	14	*
LEAF_NODE	539:37	539:37	14	)
FUNCTION_CALL	540:7	541:53	14	_TIFFrealloc ( td -> td_customValues , sizeof ( TIFFTagValue ) * td -> td_customValueCount )
CALLEE	540:7	540:7	15	_TIFFrealloc
LEAF_NODE	540:7	540:7	16	_TIFFrealloc
LEAF_NODE	540:19	540:19	15	(
ARGUMENT	540:20	540:20	15	td -> td_customValues
FIELD	540:20	540:24	16	td -> td_customValues
LEAF_NODE	540:20	540:20	17	td
LEAF_NODE	540:22	540:22	17	->
LEAF_NODE	540:24	540:24	17	td_customValues
LEAF_NODE	540:39	540:39	15	,
ARGUMENT	541:7	541:30	15	sizeof ( TIFFTagValue ) * td -> td_customValueCount
FUNCTION_CALL	541:7	541:26	16	sizeof ( TIFFTagValue )
CALLEE	541:7	541:7	17	sizeof
LEAF_NODE	541:7	541:7	18	sizeof
LEAF_NODE	541:13	541:13	17	(
ARGUMENT	541:14	541:14	17	TIFFTagValue
FIELD	541:14	541:14	18	TIFFTagValue
LEAF_NODE	541:14	541:14	19	TIFFTagValue
LEAF_NODE	541:26	541:26	17	)
LEAF_NODE	541:28	541:28	16	*
FIELD	541:30	541:34	16	td -> td_customValueCount
LEAF_NODE	541:30	541:30	17	td
LEAF_NODE	541:32	541:32	17	->
LEAF_NODE	541:34	541:34	17	td_customValueCount
LEAF_NODE	541:53	541:53	15	)
LEAF_NODE	541:54	541:54	11	;
SELECTION	542:3	542:26	10	
KEYWORD	542:3	542:3	11	if
LEAF_NODE	542:3	542:3	12	if
LEAF_NODE	542:6	542:6	11	(
CONDITION	542:7	542:7	11	! new_customValues
EXPR	542:7	542:7	12	! new_customValues
UNARY_EXPR	542:7	542:8	13	! new_customValues
UNARY_OPERATOR	542:7	542:7	14	!
LEAF_NODE	542:7	542:7	15	!
FIELD	542:8	542:8	14	new_customValues
LEAF_NODE	542:8	542:8	15	new_customValues
LEAF_NODE	542:24	542:24	11	)
STATEMENTS	542:26	548:3	11	
LEAF_NODE	542:26	542:26	12	{
STATEMENTS	543:4	547:4	12	
EXPR_STATEMENT	543:4	545:22	13	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Failed to allocate space for list of custom values" , tif -> tif_name ) ;
EXPR	543:4	543:4	14	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Failed to allocate space for list of custom values" , tif -> tif_name )
FUNCTION_CALL	543:4	545:21	15	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Failed to allocate space for list of custom values" , tif -> tif_name )
CALLEE	543:4	543:4	16	TIFFErrorExt
LEAF_NODE	543:4	543:4	17	TIFFErrorExt
LEAF_NODE	543:16	543:16	16	(
ARGUMENT	543:17	543:17	16	tif -> tif_clientdata
FIELD	543:17	543:22	17	tif -> tif_clientdata
LEAF_NODE	543:17	543:17	18	tif
LEAF_NODE	543:20	543:20	18	->
LEAF_NODE	543:22	543:22	18	tif_clientdata
LEAF_NODE	543:36	543:36	16	,
ARGUMENT	543:38	543:38	16	module
FIELD	543:38	543:38	17	module
LEAF_NODE	543:38	543:38	18	module
LEAF_NODE	543:44	543:44	16	,
ARGUMENT	544:8	544:8	16	"%s: Failed to allocate space for list of custom values"
FIELD	544:8	544:8	17	"%s: Failed to allocate space for list of custom values"
LEAF_NODE	544:8	544:8	18	"%s: Failed to allocate space for list of custom values"
LEAF_NODE	544:64	544:64	16	,
ARGUMENT	545:8	545:8	16	tif -> tif_name
FIELD	545:8	545:13	17	tif -> tif_name
LEAF_NODE	545:8	545:8	18	tif
LEAF_NODE	545:11	545:11	18	->
LEAF_NODE	545:13	545:13	18	tif_name
LEAF_NODE	545:21	545:21	16	)
LEAF_NODE	545:22	545:22	14	;
EXPR_STATEMENT	546:4	546:14	13	status = 0 ;
EXPR	546:4	546:4	14	status = 0
ASSIGN	546:4	546:13	15	status = 0
LVAL	546:4	546:4	16	status
FIELD	546:4	546:4	17	status
LEAF_NODE	546:4	546:4	18	status
ASSIGN_OP	546:11	546:11	16	=
LEAF_NODE	546:11	546:11	17	=
RVAL	546:13	546:13	16	0
FIELD	546:13	546:13	17	0
LEAF_NODE	546:13	546:13	18	0
LEAF_NODE	546:14	546:14	14	;
JUMP_STATEMENT	547:4	547:12	13	goto end ;
KEYWORD	547:4	547:4	14	goto
LEAF_NODE	547:4	547:4	15	goto
DESTINATION	547:9	547:9	14	end
LEAF_NODE	547:9	547:9	15	end
LEAF_NODE	547:12	547:12	14	;
LEAF_NODE	548:3	548:3	12	}
EXPR_STATEMENT	550:3	550:41	10	td -> td_customValues = new_customValues ;
EXPR	550:3	550:3	11	td -> td_customValues = new_customValues
ASSIGN	550:3	550:25	12	td -> td_customValues = new_customValues
LVAL	550:3	550:3	13	td -> td_customValues
FIELD	550:3	550:7	14	td -> td_customValues
LEAF_NODE	550:3	550:3	15	td
LEAF_NODE	550:5	550:5	15	->
LEAF_NODE	550:7	550:7	15	td_customValues
ASSIGN_OP	550:23	550:23	13	=
LEAF_NODE	550:23	550:23	14	=
RVAL	550:25	550:25	13	new_customValues
FIELD	550:25	550:25	14	new_customValues
LEAF_NODE	550:25	550:25	15	new_customValues
LEAF_NODE	550:41	550:41	11	;
EXPR_STATEMENT	552:3	552:59	10	tv = td -> td_customValues + ( td -> td_customValueCount - 1 ) ;
EXPR	552:3	552:3	11	tv = td -> td_customValues + ( td -> td_customValueCount - 1 )
ASSIGN	552:3	552:8	12	tv = td -> td_customValues + ( td -> td_customValueCount - 1 )
LVAL	552:3	552:3	13	tv
FIELD	552:3	552:3	14	tv
LEAF_NODE	552:3	552:3	15	tv
ASSIGN_OP	552:6	552:6	13	=
LEAF_NODE	552:6	552:6	14	=
RVAL	552:8	552:58	13	td -> td_customValues + ( td -> td_customValueCount - 1 )
FIELD	552:8	552:12	14	td -> td_customValues
LEAF_NODE	552:8	552:8	15	td
LEAF_NODE	552:10	552:10	15	->
LEAF_NODE	552:12	552:12	15	td_customValues
LEAF_NODE	552:28	552:28	14	+
LEAF_NODE	552:30	552:30	14	(
FIELD	552:31	552:35	14	td -> td_customValueCount
LEAF_NODE	552:31	552:31	15	td
LEAF_NODE	552:33	552:33	15	->
LEAF_NODE	552:35	552:35	15	td_customValueCount
LEAF_NODE	552:55	552:55	14	-
FIELD	552:57	552:57	14	1
LEAF_NODE	552:57	552:57	15	1
LEAF_NODE	552:58	552:58	14	)
LEAF_NODE	552:59	552:59	11	;
EXPR_STATEMENT	553:3	553:17	10	tv -> info = fip ;
EXPR	553:3	553:3	11	tv -> info = fip
ASSIGN	553:3	553:14	12	tv -> info = fip
LVAL	553:3	553:3	13	tv -> info
FIELD	553:3	553:7	14	tv -> info
LEAF_NODE	553:3	553:3	15	tv
LEAF_NODE	553:5	553:5	15	->
LEAF_NODE	553:7	553:7	15	info
ASSIGN_OP	553:12	553:12	13	=
LEAF_NODE	553:12	553:12	14	=
RVAL	553:14	553:14	13	fip
FIELD	553:14	553:14	14	fip
LEAF_NODE	553:14	553:14	15	fip
LEAF_NODE	553:17	553:17	11	;
EXPR_STATEMENT	554:3	554:19	10	tv -> value = NULL ;
EXPR	554:3	554:3	11	tv -> value = NULL
ASSIGN	554:3	554:15	12	tv -> value = NULL
LVAL	554:3	554:3	13	tv -> value
FIELD	554:3	554:7	14	tv -> value
LEAF_NODE	554:3	554:3	15	tv
LEAF_NODE	554:5	554:5	15	->
LEAF_NODE	554:7	554:7	15	value
ASSIGN_OP	554:13	554:13	13	=
LEAF_NODE	554:13	554:13	14	=
RVAL	554:15	554:15	13	NULL
FIELD	554:15	554:15	14	NULL
LEAF_NODE	554:15	554:15	15	NULL
LEAF_NODE	554:19	554:19	11	;
EXPR_STATEMENT	555:3	555:16	10	tv -> count = 0 ;
EXPR	555:3	555:3	11	tv -> count = 0
ASSIGN	555:3	555:15	12	tv -> count = 0
LVAL	555:3	555:3	13	tv -> count
FIELD	555:3	555:7	14	tv -> count
LEAF_NODE	555:3	555:3	15	tv
LEAF_NODE	555:5	555:5	15	->
LEAF_NODE	555:7	555:7	15	count
ASSIGN_OP	555:13	555:13	13	=
LEAF_NODE	555:13	555:13	14	=
RVAL	555:15	555:15	13	0
FIELD	555:15	555:15	14	0
LEAF_NODE	555:15	555:15	15	0
LEAF_NODE	555:16	555:16	11	;
LEAF_NODE	556:2	556:2	9	}
EXPR_STATEMENT	561:2	561:42	7	tv_size = _TIFFDataSize ( fip -> field_type ) ;
EXPR	561:2	561:2	8	tv_size = _TIFFDataSize ( fip -> field_type )
ASSIGN	561:2	561:12	9	tv_size = _TIFFDataSize ( fip -> field_type )
LVAL	561:2	561:2	10	tv_size
FIELD	561:2	561:2	11	tv_size
LEAF_NODE	561:2	561:2	12	tv_size
ASSIGN_OP	561:10	561:10	10	=
LEAF_NODE	561:10	561:10	11	=
RVAL	561:12	561:12	10	_TIFFDataSize ( fip -> field_type )
FUNCTION_CALL	561:12	561:41	11	_TIFFDataSize ( fip -> field_type )
CALLEE	561:12	561:12	12	_TIFFDataSize
LEAF_NODE	561:12	561:12	13	_TIFFDataSize
LEAF_NODE	561:25	561:25	12	(
ARGUMENT	561:26	561:26	12	fip -> field_type
FIELD	561:26	561:31	13	fip -> field_type
LEAF_NODE	561:26	561:26	14	fip
LEAF_NODE	561:29	561:29	14	->
LEAF_NODE	561:31	561:31	14	field_type
LEAF_NODE	561:41	561:41	12	)
LEAF_NODE	561:42	561:42	8	;
SELECTION	562:2	562:20	7	
KEYWORD	562:2	562:2	8	if
LEAF_NODE	562:2	562:2	9	if
LEAF_NODE	562:5	562:5	8	(
CONDITION	562:6	562:6	8	tv_size == 0
EXPR	562:6	562:17	9	tv_size == 0
FIELD	562:6	562:6	10	tv_size
LEAF_NODE	562:6	562:6	11	tv_size
EQ_OPERATOR	562:14	562:14	10	==
LEAF_NODE	562:14	562:14	11	==
FIELD	562:17	562:17	10	0
LEAF_NODE	562:17	562:17	11	0
LEAF_NODE	562:18	562:18	8	)
STATEMENTS	562:20	569:2	8	
LEAF_NODE	562:20	562:20	9	{
STATEMENTS	563:3	568:3	9	
EXPR_STATEMENT	563:3	563:13	10	status = 0 ;
EXPR	563:3	563:3	11	status = 0
ASSIGN	563:3	563:12	12	status = 0
LVAL	563:3	563:3	13	status
FIELD	563:3	563:3	14	status
LEAF_NODE	563:3	563:3	15	status
ASSIGN_OP	563:10	563:10	13	=
LEAF_NODE	563:10	563:10	14	=
RVAL	563:12	563:12	13	0
FIELD	563:12	563:12	14	0
LEAF_NODE	563:12	563:12	15	0
LEAF_NODE	563:13	563:13	11	;
EXPR_STATEMENT	564:3	567:23	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad field type %d for \"%s\"" , tif -> tif_name , fip -> field_type , fip -> field_name ) ;
EXPR	564:3	564:3	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad field type %d for \"%s\"" , tif -> tif_name , fip -> field_type , fip -> field_name )
FUNCTION_CALL	564:3	567:22	12	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad field type %d for \"%s\"" , tif -> tif_name , fip -> field_type , fip -> field_name )
CALLEE	564:3	564:3	13	TIFFErrorExt
LEAF_NODE	564:3	564:3	14	TIFFErrorExt
LEAF_NODE	564:15	564:15	13	(
ARGUMENT	564:16	564:16	13	tif -> tif_clientdata
FIELD	564:16	564:21	14	tif -> tif_clientdata
LEAF_NODE	564:16	564:16	15	tif
LEAF_NODE	564:19	564:19	15	->
LEAF_NODE	564:21	564:21	15	tif_clientdata
LEAF_NODE	564:35	564:35	13	,
ARGUMENT	564:37	564:37	13	module
FIELD	564:37	564:37	14	module
LEAF_NODE	564:37	564:37	15	module
LEAF_NODE	564:43	564:43	13	,
ARGUMENT	565:7	565:7	13	"%s: Bad field type %d for \"%s\""
FIELD	565:7	565:7	14	"%s: Bad field type %d for \"%s\""
LEAF_NODE	565:7	565:7	15	"%s: Bad field type %d for \"%s\""
LEAF_NODE	565:41	565:41	13	,
ARGUMENT	566:7	566:7	13	tif -> tif_name
FIELD	566:7	566:12	14	tif -> tif_name
LEAF_NODE	566:7	566:7	15	tif
LEAF_NODE	566:10	566:10	15	->
LEAF_NODE	566:12	566:12	15	tif_name
LEAF_NODE	566:20	566:20	13	,
ARGUMENT	566:22	566:22	13	fip -> field_type
FIELD	566:22	566:27	14	fip -> field_type
LEAF_NODE	566:22	566:22	15	fip
LEAF_NODE	566:25	566:25	15	->
LEAF_NODE	566:27	566:27	15	field_type
LEAF_NODE	566:37	566:37	13	,
ARGUMENT	567:7	567:7	13	fip -> field_name
FIELD	567:7	567:12	14	fip -> field_name
LEAF_NODE	567:7	567:7	15	fip
LEAF_NODE	567:10	567:10	15	->
LEAF_NODE	567:12	567:12	15	field_name
LEAF_NODE	567:22	567:22	13	)
LEAF_NODE	567:23	567:23	11	;
JUMP_STATEMENT	568:3	568:11	10	goto end ;
KEYWORD	568:3	568:3	11	goto
LEAF_NODE	568:3	568:3	12	goto
DESTINATION	568:8	568:8	11	end
LEAF_NODE	568:8	568:8	12	end
LEAF_NODE	568:11	568:11	11	;
LEAF_NODE	569:2	569:2	9	}
SELECTION	571:2	572:2	7	
KEYWORD	571:2	571:2	8	if
LEAF_NODE	571:2	571:2	9	if
LEAF_NODE	571:5	571:5	8	(
CONDITION	571:6	571:6	8	fip -> field_type == TIFF_ASCII
EXPR	571:6	571:25	9	fip -> field_type == TIFF_ASCII
FIELD	571:6	571:11	10	fip -> field_type
LEAF_NODE	571:6	571:6	11	fip
LEAF_NODE	571:9	571:9	11	->
LEAF_NODE	571:11	571:11	11	field_type
EQ_OPERATOR	571:22	571:22	10	==
LEAF_NODE	571:22	571:22	11	==
FIELD	571:25	571:25	10	TIFF_ASCII
LEAF_NODE	571:25	571:25	11	TIFF_ASCII
LEAF_NODE	571:35	571:35	8	)
STATEMENTS	572:2	588:2	8	
LEAF_NODE	572:2	572:2	9	{
STATEMENTS	573:3	587:3	9	
SIMPLE_DECL	573:3	573:12	10	uint32 ma ;
VAR_DECL	573:3	573:10	11	uint32 ma
TYPE	573:3	573:3	12	uint32
TYPE_NAME	573:3	573:3	13	uint32
LEAF_NODE	573:3	573:3	14	uint32
NAME	573:10	573:10	12	ma
LEAF_NODE	573:10	573:10	13	ma
LEAF_NODE	573:12	573:12	11	;
SIMPLE_DECL	574:3	574:11	10	char * mb ;
VAR_DECL	574:3	574:9	11	char * mb
TYPE	574:3	574:7	12	char *
TYPE_NAME	574:3	574:3	13	char
LEAF_NODE	574:3	574:3	14	char
POINTER	574:7	574:7	13	*
LEAF_NODE	574:7	574:7	14	*
NAME	574:9	574:9	12	mb
LEAF_NODE	574:9	574:9	13	mb
LEAF_NODE	574:11	574:11	11	;
SELECTION	575:3	576:3	10	
KEYWORD	575:3	575:3	11	if
LEAF_NODE	575:3	575:3	12	if
LEAF_NODE	575:6	575:6	11	(
CONDITION	575:7	575:7	11	fip -> field_passcount
EXPR	575:7	575:7	12	fip -> field_passcount
FIELD	575:7	575:12	13	fip -> field_passcount
LEAF_NODE	575:7	575:7	14	fip
LEAF_NODE	575:10	575:10	14	->
LEAF_NODE	575:12	575:12	14	field_passcount
LEAF_NODE	575:27	575:27	11	)
STATEMENTS	576:3	580:3	11	
LEAF_NODE	576:3	576:3	12	{
STATEMENTS	577:4	579:30	12	
EXPR_STATEMENT	577:4	577:49	13	assert ( fip -> field_writecount == TIFF_VARIABLE2 ) ;
EXPR	577:4	577:4	14	assert ( fip -> field_writecount == TIFF_VARIABLE2 )
FUNCTION_CALL	577:4	577:48	15	assert ( fip -> field_writecount == TIFF_VARIABLE2 )
CALLEE	577:4	577:4	16	assert
LEAF_NODE	577:4	577:4	17	assert
LEAF_NODE	577:10	577:10	16	(
ARGUMENT	577:11	577:34	16	fip -> field_writecount == TIFF_VARIABLE2
FIELD	577:11	577:16	17	fip -> field_writecount
LEAF_NODE	577:11	577:11	18	fip
LEAF_NODE	577:14	577:14	18	->
LEAF_NODE	577:16	577:16	18	field_writecount
EQ_OPERATOR	577:32	577:32	17	==
LEAF_NODE	577:32	577:32	18	==
FIELD	577:34	577:34	17	TIFF_VARIABLE2
LEAF_NODE	577:34	577:34	18	TIFF_VARIABLE2
LEAF_NODE	577:48	577:48	16	)
LEAF_NODE	577:49	577:49	14	;
EXPR_STATEMENT	578:4	578:32	13	ma = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	578:4	578:4	14	ma = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	578:4	578:7	15	ma = ( uint32 ) va_arg ( ap , uint32 )
LVAL	578:4	578:4	16	ma
FIELD	578:4	578:4	17	ma
LEAF_NODE	578:4	578:4	18	ma
ASSIGN_OP	578:6	578:6	16	=
LEAF_NODE	578:6	578:6	17	=
RVAL	578:7	578:15	16	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	578:7	578:7	17	(
TYPE_NAME	578:8	578:8	17	uint32
LEAF_NODE	578:8	578:8	18	uint32
LEAF_NODE	578:14	578:14	17	)
FUNCTION_CALL	578:15	578:31	17	va_arg ( ap , uint32 )
CALLEE	578:15	578:15	18	va_arg
LEAF_NODE	578:15	578:15	19	va_arg
LEAF_NODE	578:21	578:21	18	(
ARGUMENT	578:22	578:22	18	ap
FIELD	578:22	578:22	19	ap
LEAF_NODE	578:22	578:22	20	ap
LEAF_NODE	578:24	578:24	18	,
ARGUMENT	578:25	578:25	18	uint32
FIELD	578:25	578:25	19	uint32
LEAF_NODE	578:25	578:25	20	uint32
LEAF_NODE	578:31	578:31	18	)
LEAF_NODE	578:32	578:32	14	;
LEAF_NODE	579:4	579:4	13	mb
LEAF_NODE	579:6	579:6	13	=
LEAF_NODE	579:7	579:7	13	(
LEAF_NODE	579:8	579:8	13	char
LEAF_NODE	579:12	579:12	13	*
LEAF_NODE	579:13	579:13	13	)
LEAF_NODE	579:14	579:14	13	va_arg
LEAF_NODE	579:20	579:20	13	(
LEAF_NODE	579:21	579:21	13	ap
LEAF_NODE	579:23	579:23	13	,
LEAF_NODE	579:24	579:24	13	char
LEAF_NODE	579:28	579:28	13	*
LEAF_NODE	579:29	579:29	13	)
LEAF_NODE	579:30	579:30	13	;
LEAF_NODE	580:3	580:3	12	}
SELECTION	581:3	582:3	10	
KEYWORD	581:3	581:3	11	else
LEAF_NODE	581:3	581:3	12	else
STATEMENTS	582:3	585:3	11	
LEAF_NODE	582:3	582:3	12	{
STATEMENTS	583:4	584:4	12	
LEAF_NODE	583:4	583:4	13	mb
LEAF_NODE	583:6	583:6	13	=
LEAF_NODE	583:7	583:7	13	(
LEAF_NODE	583:8	583:8	13	char
LEAF_NODE	583:12	583:12	13	*
LEAF_NODE	583:13	583:13	13	)
LEAF_NODE	583:14	583:14	13	va_arg
LEAF_NODE	583:20	583:20	13	(
LEAF_NODE	583:21	583:21	13	ap
LEAF_NODE	583:23	583:23	13	,
LEAF_NODE	583:24	583:24	13	char
LEAF_NODE	583:28	583:28	13	*
LEAF_NODE	583:29	583:29	13	)
LEAF_NODE	583:30	583:30	13	;
EXPR_STATEMENT	584:4	584:29	13	ma = ( uint32 ) ( strlen ( mb ) + 1 ) ;
EXPR	584:4	584:4	14	ma = ( uint32 ) ( strlen ( mb ) + 1 )
ASSIGN	584:4	584:7	15	ma = ( uint32 ) ( strlen ( mb ) + 1 )
LVAL	584:4	584:4	16	ma
FIELD	584:4	584:4	17	ma
LEAF_NODE	584:4	584:4	18	ma
ASSIGN_OP	584:6	584:6	16	=
LEAF_NODE	584:6	584:6	17	=
RVAL	584:7	584:28	16	( uint32 ) ( strlen ( mb ) + 1 )
LEAF_NODE	584:7	584:7	17	(
TYPE_NAME	584:8	584:8	17	uint32
LEAF_NODE	584:8	584:8	18	uint32
LEAF_NODE	584:14	584:14	17	)
LEAF_NODE	584:15	584:15	17	(
FUNCTION_CALL	584:16	584:25	17	strlen ( mb )
CALLEE	584:16	584:16	18	strlen
LEAF_NODE	584:16	584:16	19	strlen
LEAF_NODE	584:22	584:22	18	(
ARGUMENT	584:23	584:23	18	mb
FIELD	584:23	584:23	19	mb
LEAF_NODE	584:23	584:23	20	mb
LEAF_NODE	584:25	584:25	18	)
LEAF_NODE	584:26	584:26	17	+
FIELD	584:27	584:27	17	1
LEAF_NODE	584:27	584:27	18	1
LEAF_NODE	584:28	584:28	17	)
LEAF_NODE	584:29	584:29	14	;
LEAF_NODE	585:3	585:3	12	}
EXPR_STATEMENT	586:3	586:15	10	tv -> count = ma ;
EXPR	586:3	586:3	11	tv -> count = ma
ASSIGN	586:3	586:13	12	tv -> count = ma
LVAL	586:3	586:3	13	tv -> count
FIELD	586:3	586:7	14	tv -> count
LEAF_NODE	586:3	586:3	15	tv
LEAF_NODE	586:5	586:5	15	->
LEAF_NODE	586:7	586:7	15	count
ASSIGN_OP	586:12	586:12	13	=
LEAF_NODE	586:12	586:12	14	=
RVAL	586:13	586:13	13	ma
FIELD	586:13	586:13	14	ma
LEAF_NODE	586:13	586:13	15	ma
LEAF_NODE	586:15	586:15	11	;
EXPR_STATEMENT	587:3	587:35	10	setByteArray ( & tv -> value , mb , ma , 1 ) ;
EXPR	587:3	587:3	11	setByteArray ( & tv -> value , mb , ma , 1 )
FUNCTION_CALL	587:3	587:34	12	setByteArray ( & tv -> value , mb , ma , 1 )
CALLEE	587:3	587:3	13	setByteArray
LEAF_NODE	587:3	587:3	14	setByteArray
LEAF_NODE	587:15	587:15	13	(
ARGUMENT	587:16	587:16	13	& tv -> value
UNARY_EXPR	587:16	587:17	14	& tv -> value
UNARY_OPERATOR	587:16	587:16	15	&
LEAF_NODE	587:16	587:16	16	&
FIELD	587:17	587:21	15	tv -> value
LEAF_NODE	587:17	587:17	16	tv
LEAF_NODE	587:19	587:19	16	->
LEAF_NODE	587:21	587:21	16	value
LEAF_NODE	587:26	587:26	13	,
ARGUMENT	587:27	587:27	13	mb
FIELD	587:27	587:27	14	mb
LEAF_NODE	587:27	587:27	15	mb
LEAF_NODE	587:29	587:29	13	,
ARGUMENT	587:30	587:30	13	ma
FIELD	587:30	587:30	14	ma
LEAF_NODE	587:30	587:30	15	ma
LEAF_NODE	587:32	587:32	13	,
ARGUMENT	587:33	587:33	13	1
FIELD	587:33	587:33	14	1
LEAF_NODE	587:33	587:33	15	1
LEAF_NODE	587:34	587:34	13	)
LEAF_NODE	587:35	587:35	11	;
LEAF_NODE	588:2	588:2	9	}
SELECTION	589:2	590:2	7	
KEYWORD	589:2	589:2	8	else
LEAF_NODE	589:2	589:2	9	else
STATEMENTS	590:2	719:2	8	
LEAF_NODE	590:2	590:2	9	{
STATEMENTS	591:3	643:5	9	
SELECTION	591:3	591:29	10	
KEYWORD	591:3	591:3	11	if
LEAF_NODE	591:3	591:3	12	if
LEAF_NODE	591:6	591:6	11	(
CONDITION	591:7	591:7	11	fip -> field_passcount
EXPR	591:7	591:7	12	fip -> field_passcount
FIELD	591:7	591:12	13	fip -> field_passcount
LEAF_NODE	591:7	591:7	14	fip
LEAF_NODE	591:10	591:10	14	->
LEAF_NODE	591:12	591:12	14	field_passcount
LEAF_NODE	591:27	591:27	11	)
STATEMENTS	591:29	596:3	11	
LEAF_NODE	591:29	591:29	12	{
STATEMENTS	592:4	594:4	12	
SELECTION	592:4	593:5	13	
KEYWORD	592:4	592:4	14	if
LEAF_NODE	592:4	592:4	15	if
LEAF_NODE	592:7	592:7	14	(
CONDITION	592:8	592:8	14	fip -> field_writecount == TIFF_VARIABLE2
EXPR	592:8	592:33	15	fip -> field_writecount == TIFF_VARIABLE2
FIELD	592:8	592:13	16	fip -> field_writecount
LEAF_NODE	592:8	592:8	17	fip
LEAF_NODE	592:11	592:11	17	->
LEAF_NODE	592:13	592:13	17	field_writecount
EQ_OPERATOR	592:30	592:30	16	==
LEAF_NODE	592:30	592:30	17	==
FIELD	592:33	592:33	16	TIFF_VARIABLE2
LEAF_NODE	592:33	592:33	17	TIFF_VARIABLE2
LEAF_NODE	592:47	592:47	14	)
STATEMENTS	593:5	593:5	14	
EXPR_STATEMENT	593:5	593:44	15	tv -> count = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	593:5	593:5	16	tv -> count = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	593:5	593:17	17	tv -> count = ( uint32 ) va_arg ( ap , uint32 )
LVAL	593:5	593:5	18	tv -> count
FIELD	593:5	593:9	19	tv -> count
LEAF_NODE	593:5	593:5	20	tv
LEAF_NODE	593:7	593:7	20	->
LEAF_NODE	593:9	593:9	20	count
ASSIGN_OP	593:15	593:15	18	=
LEAF_NODE	593:15	593:15	19	=
RVAL	593:17	593:26	18	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	593:17	593:17	19	(
TYPE_NAME	593:18	593:18	19	uint32
LEAF_NODE	593:18	593:18	20	uint32
LEAF_NODE	593:24	593:24	19	)
FUNCTION_CALL	593:26	593:43	19	va_arg ( ap , uint32 )
CALLEE	593:26	593:26	20	va_arg
LEAF_NODE	593:26	593:26	21	va_arg
LEAF_NODE	593:32	593:32	20	(
ARGUMENT	593:33	593:33	20	ap
FIELD	593:33	593:33	21	ap
LEAF_NODE	593:33	593:33	22	ap
LEAF_NODE	593:35	593:35	20	,
ARGUMENT	593:37	593:37	20	uint32
FIELD	593:37	593:37	21	uint32
LEAF_NODE	593:37	593:37	22	uint32
LEAF_NODE	593:43	593:43	20	)
LEAF_NODE	593:44	593:44	16	;
SELECTION	594:4	595:5	13	
KEYWORD	594:4	594:4	14	else
LEAF_NODE	594:4	594:4	15	else
STATEMENTS	595:5	595:5	14	
EXPR_STATEMENT	595:5	595:38	15	tv -> count = ( int ) va_arg ( ap , int ) ;
EXPR	595:5	595:5	16	tv -> count = ( int ) va_arg ( ap , int )
ASSIGN	595:5	595:17	17	tv -> count = ( int ) va_arg ( ap , int )
LVAL	595:5	595:5	18	tv -> count
FIELD	595:5	595:9	19	tv -> count
LEAF_NODE	595:5	595:5	20	tv
LEAF_NODE	595:7	595:7	20	->
LEAF_NODE	595:9	595:9	20	count
ASSIGN_OP	595:15	595:15	18	=
LEAF_NODE	595:15	595:15	19	=
RVAL	595:17	595:23	18	( int ) va_arg ( ap , int )
LEAF_NODE	595:17	595:17	19	(
TYPE_NAME	595:18	595:18	19	int
LEAF_NODE	595:18	595:18	20	int
LEAF_NODE	595:21	595:21	19	)
FUNCTION_CALL	595:23	595:37	19	va_arg ( ap , int )
CALLEE	595:23	595:23	20	va_arg
LEAF_NODE	595:23	595:23	21	va_arg
LEAF_NODE	595:29	595:29	20	(
ARGUMENT	595:30	595:30	20	ap
FIELD	595:30	595:30	21	ap
LEAF_NODE	595:30	595:30	22	ap
LEAF_NODE	595:32	595:32	20	,
ARGUMENT	595:34	595:34	20	int
FIELD	595:34	595:34	21	int
LEAF_NODE	595:34	595:34	22	int
LEAF_NODE	595:37	595:37	20	)
LEAF_NODE	595:38	595:38	16	;
LEAF_NODE	596:3	596:3	12	}
SELECTION	596:5	596:10	10	
KEYWORD	596:5	596:5	11	else
LEAF_NODE	596:5	596:5	12	else
STATEMENTS	596:10	596:10	11	
SELECTION	596:10	598:4	12	
KEYWORD	596:10	596:10	13	if
LEAF_NODE	596:10	596:10	14	if
LEAF_NODE	596:13	596:13	13	(
CONDITION	596:14	596:14	13	fip -> field_writecount == TIFF_VARIABLE || fip -> field_writecount == TIFF_VARIABLE2
EXPR	596:14	596:14	14	fip -> field_writecount == TIFF_VARIABLE || fip -> field_writecount == TIFF_VARIABLE2
OR	596:14	597:9	15	fip -> field_writecount == TIFF_VARIABLE || fip -> field_writecount == TIFF_VARIABLE2
EXPR	596:14	596:39	16	fip -> field_writecount == TIFF_VARIABLE
FIELD	596:14	596:19	17	fip -> field_writecount
LEAF_NODE	596:14	596:14	18	fip
LEAF_NODE	596:17	596:17	18	->
LEAF_NODE	596:19	596:19	18	field_writecount
EQ_OPERATOR	596:36	596:36	17	==
LEAF_NODE	596:36	596:36	18	==
FIELD	596:39	596:39	17	TIFF_VARIABLE
LEAF_NODE	596:39	596:39	18	TIFF_VARIABLE
LEAF_NODE	597:6	597:6	16	||
EXPR	597:9	597:34	16	fip -> field_writecount == TIFF_VARIABLE2
FIELD	597:9	597:14	17	fip -> field_writecount
LEAF_NODE	597:9	597:9	18	fip
LEAF_NODE	597:12	597:12	18	->
LEAF_NODE	597:14	597:14	18	field_writecount
EQ_OPERATOR	597:31	597:31	17	==
LEAF_NODE	597:31	597:31	18	==
FIELD	597:34	597:34	17	TIFF_VARIABLE2
LEAF_NODE	597:34	597:34	18	TIFF_VARIABLE2
LEAF_NODE	597:48	597:48	13	)
STATEMENTS	598:4	598:4	13	
EXPR_STATEMENT	598:4	598:17	14	tv -> count = 1 ;
EXPR	598:4	598:4	15	tv -> count = 1
ASSIGN	598:4	598:16	16	tv -> count = 1
LVAL	598:4	598:4	17	tv -> count
FIELD	598:4	598:8	18	tv -> count
LEAF_NODE	598:4	598:4	19	tv
LEAF_NODE	598:6	598:6	19	->
LEAF_NODE	598:8	598:8	19	count
ASSIGN_OP	598:14	598:14	17	=
LEAF_NODE	598:14	598:14	18	=
RVAL	598:16	598:16	17	1
FIELD	598:16	598:16	18	1
LEAF_NODE	598:16	598:16	19	1
LEAF_NODE	598:17	598:17	15	;
SELECTION	599:3	599:8	10	
KEYWORD	599:3	599:3	11	else
LEAF_NODE	599:3	599:3	12	else
STATEMENTS	599:8	599:8	11	
SELECTION	599:8	600:4	12	
KEYWORD	599:8	599:8	13	if
LEAF_NODE	599:8	599:8	14	if
LEAF_NODE	599:11	599:11	13	(
CONDITION	599:12	599:12	13	fip -> field_writecount == TIFF_SPP
EXPR	599:12	599:37	14	fip -> field_writecount == TIFF_SPP
FIELD	599:12	599:17	15	fip -> field_writecount
LEAF_NODE	599:12	599:12	16	fip
LEAF_NODE	599:15	599:15	16	->
LEAF_NODE	599:17	599:17	16	field_writecount
EQ_OPERATOR	599:34	599:34	15	==
LEAF_NODE	599:34	599:34	16	==
FIELD	599:37	599:37	15	TIFF_SPP
LEAF_NODE	599:37	599:37	16	TIFF_SPP
LEAF_NODE	599:45	599:45	13	)
STATEMENTS	600:4	600:4	13	
EXPR_STATEMENT	600:4	600:38	14	tv -> count = td -> td_samplesperpixel ;
EXPR	600:4	600:4	15	tv -> count = td -> td_samplesperpixel
ASSIGN	600:4	600:16	16	tv -> count = td -> td_samplesperpixel
LVAL	600:4	600:4	17	tv -> count
FIELD	600:4	600:8	18	tv -> count
LEAF_NODE	600:4	600:4	19	tv
LEAF_NODE	600:6	600:6	19	->
LEAF_NODE	600:8	600:8	19	count
ASSIGN_OP	600:14	600:14	17	=
LEAF_NODE	600:14	600:14	18	=
RVAL	600:16	600:16	17	td -> td_samplesperpixel
FIELD	600:16	600:20	18	td -> td_samplesperpixel
LEAF_NODE	600:16	600:16	19	td
LEAF_NODE	600:18	600:18	19	->
LEAF_NODE	600:20	600:20	19	td_samplesperpixel
LEAF_NODE	600:38	600:38	15	;
SELECTION	601:3	602:4	10	
KEYWORD	601:3	601:3	11	else
LEAF_NODE	601:3	601:3	12	else
STATEMENTS	602:4	602:4	11	
EXPR_STATEMENT	602:4	602:37	12	tv -> count = fip -> field_writecount ;
EXPR	602:4	602:4	13	tv -> count = fip -> field_writecount
ASSIGN	602:4	602:16	14	tv -> count = fip -> field_writecount
LVAL	602:4	602:4	15	tv -> count
FIELD	602:4	602:8	16	tv -> count
LEAF_NODE	602:4	602:4	17	tv
LEAF_NODE	602:6	602:6	17	->
LEAF_NODE	602:8	602:8	17	count
ASSIGN_OP	602:14	602:14	15	=
LEAF_NODE	602:14	602:14	16	=
RVAL	602:16	602:16	15	fip -> field_writecount
FIELD	602:16	602:21	16	fip -> field_writecount
LEAF_NODE	602:16	602:16	17	fip
LEAF_NODE	602:19	602:19	17	->
LEAF_NODE	602:21	602:21	17	field_writecount
LEAF_NODE	602:37	602:37	13	;
SELECTION	604:3	604:23	10	
KEYWORD	604:3	604:3	11	if
LEAF_NODE	604:3	604:3	12	if
LEAF_NODE	604:6	604:6	11	(
CONDITION	604:7	604:7	11	tv -> count == 0
EXPR	604:7	604:20	12	tv -> count == 0
FIELD	604:7	604:11	13	tv -> count
LEAF_NODE	604:7	604:7	14	tv
LEAF_NODE	604:9	604:9	14	->
LEAF_NODE	604:11	604:11	14	count
EQ_OPERATOR	604:17	604:17	13	==
LEAF_NODE	604:17	604:17	14	==
FIELD	604:20	604:20	13	0
LEAF_NODE	604:20	604:20	14	0
LEAF_NODE	604:21	604:21	11	)
STATEMENTS	604:23	615:3	11	
LEAF_NODE	604:23	604:23	12	{
STATEMENTS	605:4	614:4	12	
EXPR_STATEMENT	605:4	605:14	13	status = 0 ;
EXPR	605:4	605:4	14	status = 0
ASSIGN	605:4	605:13	15	status = 0
LVAL	605:4	605:4	16	status
FIELD	605:4	605:4	17	status
LEAF_NODE	605:4	605:4	18	status
ASSIGN_OP	605:11	605:11	16	=
LEAF_NODE	605:11	605:11	17	=
RVAL	605:13	605:13	16	0
FIELD	605:13	605:13	17	0
LEAF_NODE	605:13	605:13	18	0
LEAF_NODE	605:14	605:14	14	;
LEAF_NODE	606:4	606:4	13	TIFFErrorExt
LEAF_NODE	606:16	606:16	13	(
LEAF_NODE	606:17	606:17	13	tif
LEAF_NODE	606:20	606:20	13	->
LEAF_NODE	606:22	606:22	13	tif_clientdata
LEAF_NODE	606:36	606:36	13	,
LEAF_NODE	606:38	606:38	13	module
LEAF_NODE	606:44	606:44	13	,
LEAF_NODE	607:10	607:10	13	"%s: Null count for \"%s\" (type "
LEAF_NODE	608:10	608:10	13	"%d, writecount %d, passcount %d)"
LEAF_NODE	608:44	608:44	13	,
LEAF_NODE	609:10	609:10	13	tif
LEAF_NODE	609:13	609:13	13	->
LEAF_NODE	609:15	609:15	13	tif_name
LEAF_NODE	609:23	609:23	13	,
LEAF_NODE	610:10	610:10	13	fip
LEAF_NODE	610:13	610:13	13	->
LEAF_NODE	610:15	610:15	13	field_name
LEAF_NODE	610:25	610:25	13	,
LEAF_NODE	611:10	611:10	13	fip
LEAF_NODE	611:13	611:13	13	->
LEAF_NODE	611:15	611:15	13	field_type
LEAF_NODE	611:25	611:25	13	,
LEAF_NODE	612:10	612:10	13	fip
LEAF_NODE	612:13	612:13	13	->
LEAF_NODE	612:15	612:15	13	field_writecount
LEAF_NODE	612:31	612:31	13	,
LEAF_NODE	613:10	613:10	13	fip
LEAF_NODE	613:13	613:13	13	->
LEAF_NODE	613:15	613:15	13	field_passcount
LEAF_NODE	613:30	613:30	13	)
LEAF_NODE	613:31	613:31	13	;
JUMP_STATEMENT	614:4	614:12	13	goto end ;
KEYWORD	614:4	614:4	14	goto
LEAF_NODE	614:4	614:4	15	goto
DESTINATION	614:9	614:9	14	end
LEAF_NODE	614:9	614:9	15	end
LEAF_NODE	614:12	614:12	14	;
LEAF_NODE	615:3	615:3	12	}
EXPR_STATEMENT	617:3	618:34	10	tv -> value = _TIFFCheckMalloc ( tif , tv -> count , tv_size , "custom tag binary object" ) ;
EXPR	617:3	617:3	11	tv -> value = _TIFFCheckMalloc ( tif , tv -> count , tv_size , "custom tag binary object" )
ASSIGN	617:3	617:15	12	tv -> value = _TIFFCheckMalloc ( tif , tv -> count , tv_size , "custom tag binary object" )
LVAL	617:3	617:3	13	tv -> value
FIELD	617:3	617:7	14	tv -> value
LEAF_NODE	617:3	617:3	15	tv
LEAF_NODE	617:5	617:5	15	->
LEAF_NODE	617:7	617:7	15	value
ASSIGN_OP	617:13	617:13	13	=
LEAF_NODE	617:13	617:13	14	=
RVAL	617:15	617:15	13	_TIFFCheckMalloc ( tif , tv -> count , tv_size , "custom tag binary object" )
FUNCTION_CALL	617:15	618:33	14	_TIFFCheckMalloc ( tif , tv -> count , tv_size , "custom tag binary object" )
CALLEE	617:15	617:15	15	_TIFFCheckMalloc
LEAF_NODE	617:15	617:15	16	_TIFFCheckMalloc
LEAF_NODE	617:31	617:31	15	(
ARGUMENT	617:32	617:32	15	tif
FIELD	617:32	617:32	16	tif
LEAF_NODE	617:32	617:32	17	tif
LEAF_NODE	617:35	617:35	15	,
ARGUMENT	617:37	617:37	15	tv -> count
FIELD	617:37	617:41	16	tv -> count
LEAF_NODE	617:37	617:37	17	tv
LEAF_NODE	617:39	617:39	17	->
LEAF_NODE	617:41	617:41	17	count
LEAF_NODE	617:46	617:46	15	,
ARGUMENT	617:48	617:48	15	tv_size
FIELD	617:48	617:48	16	tv_size
LEAF_NODE	617:48	617:48	17	tv_size
LEAF_NODE	617:55	617:55	15	,
ARGUMENT	618:7	618:7	15	"custom tag binary object"
FIELD	618:7	618:7	16	"custom tag binary object"
LEAF_NODE	618:7	618:7	17	"custom tag binary object"
LEAF_NODE	618:33	618:33	15	)
LEAF_NODE	618:34	618:34	11	;
SELECTION	619:3	619:19	10	
KEYWORD	619:3	619:3	11	if
LEAF_NODE	619:3	619:3	12	if
LEAF_NODE	619:6	619:6	11	(
CONDITION	619:7	619:7	11	! tv -> value
EXPR	619:7	619:7	12	! tv -> value
UNARY_EXPR	619:7	619:8	13	! tv -> value
UNARY_OPERATOR	619:7	619:7	14	!
LEAF_NODE	619:7	619:7	15	!
FIELD	619:8	619:12	14	tv -> value
LEAF_NODE	619:8	619:8	15	tv
LEAF_NODE	619:10	619:10	15	->
LEAF_NODE	619:12	619:12	15	value
LEAF_NODE	619:17	619:17	11	)
STATEMENTS	619:19	622:3	11	
LEAF_NODE	619:19	619:19	12	{
STATEMENTS	620:4	621:4	12	
EXPR_STATEMENT	620:4	620:14	13	status = 0 ;
EXPR	620:4	620:4	14	status = 0
ASSIGN	620:4	620:13	15	status = 0
LVAL	620:4	620:4	16	status
FIELD	620:4	620:4	17	status
LEAF_NODE	620:4	620:4	18	status
ASSIGN_OP	620:11	620:11	16	=
LEAF_NODE	620:11	620:11	17	=
RVAL	620:13	620:13	16	0
FIELD	620:13	620:13	17	0
LEAF_NODE	620:13	620:13	18	0
LEAF_NODE	620:14	620:14	14	;
JUMP_STATEMENT	621:4	621:12	13	goto end ;
KEYWORD	621:4	621:4	14	goto
LEAF_NODE	621:4	621:4	15	goto
DESTINATION	621:9	621:9	14	end
LEAF_NODE	621:9	621:9	15	end
LEAF_NODE	621:12	621:12	14	;
LEAF_NODE	622:3	622:3	12	}
SELECTION	624:3	625:51	10	
KEYWORD	624:3	624:3	11	if
LEAF_NODE	624:3	624:3	12	if
LEAF_NODE	624:6	624:6	11	(
CONDITION	624:7	624:7	11	fip -> field_tag == TIFFTAG_DOTRANGE && strcmp ( fip -> field_name , "DotRange" ) == 0
EXPR	624:7	624:7	12	fip -> field_tag == TIFFTAG_DOTRANGE && strcmp ( fip -> field_name , "DotRange" ) == 0
AND	624:7	625:10	13	fip -> field_tag == TIFFTAG_DOTRANGE && strcmp ( fip -> field_name , "DotRange" ) == 0
EXPR	624:7	624:25	14	fip -> field_tag == TIFFTAG_DOTRANGE
FIELD	624:7	624:12	15	fip -> field_tag
LEAF_NODE	624:7	624:7	16	fip
LEAF_NODE	624:10	624:10	16	->
LEAF_NODE	624:12	624:12	16	field_tag
EQ_OPERATOR	624:22	624:22	15	==
LEAF_NODE	624:22	624:22	16	==
FIELD	624:25	624:25	15	TIFFTAG_DOTRANGE
LEAF_NODE	624:25	624:25	16	TIFFTAG_DOTRANGE
LEAF_NODE	625:7	625:7	14	&&
EXPR	625:10	625:48	14	strcmp ( fip -> field_name , "DotRange" ) == 0
FUNCTION_CALL	625:10	625:43	15	strcmp ( fip -> field_name , "DotRange" )
CALLEE	625:10	625:10	16	strcmp
LEAF_NODE	625:10	625:10	17	strcmp
LEAF_NODE	625:16	625:16	16	(
ARGUMENT	625:17	625:17	16	fip -> field_name
FIELD	625:17	625:22	17	fip -> field_name
LEAF_NODE	625:17	625:17	18	fip
LEAF_NODE	625:20	625:20	18	->
LEAF_NODE	625:22	625:22	18	field_name
LEAF_NODE	625:32	625:32	16	,
ARGUMENT	625:33	625:33	16	"DotRange"
FIELD	625:33	625:33	17	"DotRange"
LEAF_NODE	625:33	625:33	18	"DotRange"
LEAF_NODE	625:43	625:43	16	)
EQ_OPERATOR	625:45	625:45	15	==
LEAF_NODE	625:45	625:45	16	==
FIELD	625:48	625:48	15	0
LEAF_NODE	625:48	625:48	16	0
LEAF_NODE	625:49	625:49	11	)
STATEMENTS	625:51	634:3	11	
LEAF_NODE	625:51	625:51	12	{
STATEMENTS	630:4	633:4	12	
SIMPLE_DECL	630:4	630:16	13	uint16 [ 2 ] v2 ;
VAR_DECL	630:4	630:11	14	uint16 [ 2 ] v2
TYPE	630:4	630:13	15	uint16 [ 2 ]
TYPE_NAME	630:4	630:4	16	uint16
LEAF_NODE	630:4	630:4	17	uint16
TYPE_SUFFIX	630:13	630:15	16	[ 2 ]
LEAF_NODE	630:13	630:13	17	[
FIELD	630:14	630:14	17	2
LEAF_NODE	630:14	630:14	18	2
LEAF_NODE	630:15	630:15	17	]
NAME	630:11	630:11	15	v2
LEAF_NODE	630:11	630:11	16	v2
LEAF_NODE	630:16	630:16	14	;
EXPR_STATEMENT	631:4	631:35	13	v2 [ 0 ] = ( uint16 ) va_arg ( ap , int ) ;
EXPR	631:4	631:4	14	v2 [ 0 ] = ( uint16 ) va_arg ( ap , int )
ASSIGN	631:4	631:12	15	v2 [ 0 ] = ( uint16 ) va_arg ( ap , int )
LVAL	631:4	631:4	16	v2 [ 0 ]
FIELD	631:4	631:8	17	v2 [ 0 ]
LEAF_NODE	631:4	631:4	18	v2
LEAF_NODE	631:6	631:6	18	[
EXPR	631:7	631:7	18	0
FIELD	631:7	631:7	19	0
LEAF_NODE	631:7	631:7	20	0
LEAF_NODE	631:8	631:8	18	]
ASSIGN_OP	631:10	631:10	16	=
LEAF_NODE	631:10	631:10	17	=
RVAL	631:12	631:20	16	( uint16 ) va_arg ( ap , int )
LEAF_NODE	631:12	631:12	17	(
TYPE_NAME	631:13	631:13	17	uint16
LEAF_NODE	631:13	631:13	18	uint16
LEAF_NODE	631:19	631:19	17	)
FUNCTION_CALL	631:20	631:34	17	va_arg ( ap , int )
CALLEE	631:20	631:20	18	va_arg
LEAF_NODE	631:20	631:20	19	va_arg
LEAF_NODE	631:26	631:26	18	(
ARGUMENT	631:27	631:27	18	ap
FIELD	631:27	631:27	19	ap
LEAF_NODE	631:27	631:27	20	ap
LEAF_NODE	631:29	631:29	18	,
ARGUMENT	631:31	631:31	18	int
FIELD	631:31	631:31	19	int
LEAF_NODE	631:31	631:31	20	int
LEAF_NODE	631:34	631:34	18	)
LEAF_NODE	631:35	631:35	14	;
EXPR_STATEMENT	632:4	632:35	13	v2 [ 1 ] = ( uint16 ) va_arg ( ap , int ) ;
EXPR	632:4	632:4	14	v2 [ 1 ] = ( uint16 ) va_arg ( ap , int )
ASSIGN	632:4	632:12	15	v2 [ 1 ] = ( uint16 ) va_arg ( ap , int )
LVAL	632:4	632:4	16	v2 [ 1 ]
FIELD	632:4	632:8	17	v2 [ 1 ]
LEAF_NODE	632:4	632:4	18	v2
LEAF_NODE	632:6	632:6	18	[
EXPR	632:7	632:7	18	1
FIELD	632:7	632:7	19	1
LEAF_NODE	632:7	632:7	20	1
LEAF_NODE	632:8	632:8	18	]
ASSIGN_OP	632:10	632:10	16	=
LEAF_NODE	632:10	632:10	17	=
RVAL	632:12	632:20	16	( uint16 ) va_arg ( ap , int )
LEAF_NODE	632:12	632:12	17	(
TYPE_NAME	632:13	632:13	17	uint16
LEAF_NODE	632:13	632:13	18	uint16
LEAF_NODE	632:19	632:19	17	)
FUNCTION_CALL	632:20	632:34	17	va_arg ( ap , int )
CALLEE	632:20	632:20	18	va_arg
LEAF_NODE	632:20	632:20	19	va_arg
LEAF_NODE	632:26	632:26	18	(
ARGUMENT	632:27	632:27	18	ap
FIELD	632:27	632:27	19	ap
LEAF_NODE	632:27	632:27	20	ap
LEAF_NODE	632:29	632:29	18	,
ARGUMENT	632:31	632:31	18	int
FIELD	632:31	632:31	19	int
LEAF_NODE	632:31	632:31	20	int
LEAF_NODE	632:34	632:34	18	)
LEAF_NODE	632:35	632:35	14	;
EXPR_STATEMENT	633:4	633:34	13	_TIFFmemcpy ( tv -> value , & v2 , 4 ) ;
EXPR	633:4	633:4	14	_TIFFmemcpy ( tv -> value , & v2 , 4 )
FUNCTION_CALL	633:4	633:33	15	_TIFFmemcpy ( tv -> value , & v2 , 4 )
CALLEE	633:4	633:4	16	_TIFFmemcpy
LEAF_NODE	633:4	633:4	17	_TIFFmemcpy
LEAF_NODE	633:15	633:15	16	(
ARGUMENT	633:16	633:16	16	tv -> value
FIELD	633:16	633:20	17	tv -> value
LEAF_NODE	633:16	633:16	18	tv
LEAF_NODE	633:18	633:18	18	->
LEAF_NODE	633:20	633:20	18	value
LEAF_NODE	633:25	633:25	16	,
ARGUMENT	633:27	633:27	16	& v2
UNARY_EXPR	633:27	633:28	17	& v2
UNARY_OPERATOR	633:27	633:27	18	&
LEAF_NODE	633:27	633:27	19	&
FIELD	633:28	633:28	18	v2
LEAF_NODE	633:28	633:28	19	v2
LEAF_NODE	633:30	633:30	16	,
ARGUMENT	633:32	633:32	16	4
FIELD	633:32	633:32	17	4
LEAF_NODE	633:32	633:32	18	4
LEAF_NODE	633:33	633:33	16	)
LEAF_NODE	633:34	633:34	14	;
LEAF_NODE	634:3	634:3	12	}
SELECTION	636:3	636:8	10	
KEYWORD	636:3	636:3	11	else
LEAF_NODE	636:3	636:3	12	else
STATEMENTS	636:8	636:8	11	
SELECTION	636:8	640:24	12	
KEYWORD	636:8	636:8	13	if
LEAF_NODE	636:8	636:8	14	if
LEAF_NODE	636:11	636:11	13	(
CONDITION	636:12	636:12	13	fip -> field_passcount || fip -> field_writecount == TIFF_VARIABLE || fip -> field_writecount == TIFF_VARIABLE2 || fip -> field_writecount == TIFF_SPP || tv -> count > 1
EXPR	636:12	636:12	14	fip -> field_passcount || fip -> field_writecount == TIFF_VARIABLE || fip -> field_writecount == TIFF_VARIABLE2 || fip -> field_writecount == TIFF_SPP || tv -> count > 1
OR	636:12	637:9	15	fip -> field_passcount || fip -> field_writecount == TIFF_VARIABLE || fip -> field_writecount == TIFF_VARIABLE2 || fip -> field_writecount == TIFF_SPP || tv -> count > 1
EXPR	636:12	636:12	16	fip -> field_passcount
FIELD	636:12	636:17	17	fip -> field_passcount
LEAF_NODE	636:12	636:12	18	fip
LEAF_NODE	636:15	636:15	18	->
LEAF_NODE	636:17	636:17	18	field_passcount
LEAF_NODE	637:6	637:6	16	||
EXPR	637:9	637:9	16	fip -> field_writecount == TIFF_VARIABLE || fip -> field_writecount == TIFF_VARIABLE2 || fip -> field_writecount == TIFF_SPP || tv -> count > 1
OR	637:9	638:9	17	fip -> field_writecount == TIFF_VARIABLE || fip -> field_writecount == TIFF_VARIABLE2 || fip -> field_writecount == TIFF_SPP || tv -> count > 1
EXPR	637:9	637:34	18	fip -> field_writecount == TIFF_VARIABLE
FIELD	637:9	637:14	19	fip -> field_writecount
LEAF_NODE	637:9	637:9	20	fip
LEAF_NODE	637:12	637:12	20	->
LEAF_NODE	637:14	637:14	20	field_writecount
EQ_OPERATOR	637:31	637:31	19	==
LEAF_NODE	637:31	637:31	20	==
FIELD	637:34	637:34	19	TIFF_VARIABLE
LEAF_NODE	637:34	637:34	20	TIFF_VARIABLE
LEAF_NODE	638:6	638:6	18	||
EXPR	638:9	638:9	18	fip -> field_writecount == TIFF_VARIABLE2 || fip -> field_writecount == TIFF_SPP || tv -> count > 1
OR	638:9	639:9	19	fip -> field_writecount == TIFF_VARIABLE2 || fip -> field_writecount == TIFF_SPP || tv -> count > 1
EXPR	638:9	638:34	20	fip -> field_writecount == TIFF_VARIABLE2
FIELD	638:9	638:14	21	fip -> field_writecount
LEAF_NODE	638:9	638:9	22	fip
LEAF_NODE	638:12	638:12	22	->
LEAF_NODE	638:14	638:14	22	field_writecount
EQ_OPERATOR	638:31	638:31	21	==
LEAF_NODE	638:31	638:31	22	==
FIELD	638:34	638:34	21	TIFF_VARIABLE2
LEAF_NODE	638:34	638:34	22	TIFF_VARIABLE2
LEAF_NODE	639:6	639:6	20	||
EXPR	639:9	639:9	20	fip -> field_writecount == TIFF_SPP || tv -> count > 1
OR	639:9	640:9	21	fip -> field_writecount == TIFF_SPP || tv -> count > 1
EXPR	639:9	639:34	22	fip -> field_writecount == TIFF_SPP
FIELD	639:9	639:14	23	fip -> field_writecount
LEAF_NODE	639:9	639:9	24	fip
LEAF_NODE	639:12	639:12	24	->
LEAF_NODE	639:14	639:14	24	field_writecount
EQ_OPERATOR	639:31	639:31	23	==
LEAF_NODE	639:31	639:31	24	==
FIELD	639:34	639:34	23	TIFF_SPP
LEAF_NODE	639:34	639:34	24	TIFF_SPP
LEAF_NODE	640:6	640:6	22	||
EXPR	640:9	640:21	22	tv -> count > 1
FIELD	640:9	640:13	23	tv -> count
LEAF_NODE	640:9	640:9	24	tv
LEAF_NODE	640:11	640:11	24	->
LEAF_NODE	640:13	640:13	24	count
REL_OPERATOR	640:19	640:19	23	>
LEAF_NODE	640:19	640:19	24	>
FIELD	640:21	640:21	23	1
LEAF_NODE	640:21	640:21	24	1
LEAF_NODE	640:22	640:22	13	)
STATEMENTS	640:24	643:3	13	
LEAF_NODE	640:24	640:24	14	{
STATEMENTS	641:4	642:28	14	
LEAF_NODE	641:4	641:4	15	_TIFFmemcpy
LEAF_NODE	641:15	641:15	15	(
LEAF_NODE	641:16	641:16	15	tv
LEAF_NODE	641:18	641:18	15	->
LEAF_NODE	641:20	641:20	15	value
LEAF_NODE	641:25	641:25	15	,
LEAF_NODE	641:27	641:27	15	va_arg
LEAF_NODE	641:33	641:33	15	(
LEAF_NODE	641:34	641:34	15	ap
LEAF_NODE	641:36	641:36	15	,
LEAF_NODE	641:38	641:38	15	void
LEAF_NODE	641:43	641:43	15	*
LEAF_NODE	641:44	641:44	15	)
LEAF_NODE	641:45	641:45	15	,
LEAF_NODE	642:8	642:8	15	tv
LEAF_NODE	642:10	642:10	15	->
LEAF_NODE	642:12	642:12	15	count
LEAF_NODE	642:18	642:18	15	*
LEAF_NODE	642:20	642:20	15	tv_size
LEAF_NODE	642:27	642:27	15	)
LEAF_NODE	642:28	642:28	15	;
LEAF_NODE	643:3	643:3	14	}
SELECTION	643:5	643:10	10	
KEYWORD	643:5	643:5	11	else
LEAF_NODE	643:5	643:5	12	else
STATEMENTS	643:10	718:3	11	
LEAF_NODE	643:10	643:10	12	{
STATEMENTS	644:4	647:4	12	
SIMPLE_DECL	644:4	644:33	13	char * val ; val = ( char * ) tv -> value ;
VAR_DECL	644:4	644:10	14	char * val ; val = ( char * ) tv -> value
TYPE	644:4	644:9	15	char *
TYPE_NAME	644:4	644:4	16	char
LEAF_NODE	644:4	644:4	17	char
POINTER	644:9	644:9	16	*
LEAF_NODE	644:9	644:9	17	*
NAME	644:10	644:10	15	val
LEAF_NODE	644:10	644:10	16	val
LEAF_NODE	0:0	0:0	15	;
INIT	644:10	644:10	15	val = ( char * ) tv -> value
ASSIGN	644:10	644:16	16	val = ( char * ) tv -> value
LVAL	644:10	644:10	17	val
NAME	644:10	644:10	18	val
LEAF_NODE	644:10	644:10	19	val
ASSIGN_OP	644:14	644:14	17	=
LEAF_NODE	644:14	644:14	18	=
RVAL	644:16	644:24	17	( char * ) tv -> value
LEAF_NODE	644:16	644:16	18	(
TYPE_NAME	644:17	644:17	18	char
LEAF_NODE	644:17	644:17	19	char
LEAF_NODE	644:22	644:22	18	*
LEAF_NODE	644:23	644:23	18	)
FIELD	644:24	644:28	18	tv -> value
LEAF_NODE	644:24	644:24	19	tv
LEAF_NODE	644:26	644:26	19	->
LEAF_NODE	644:28	644:28	19	value
LEAF_NODE	644:33	644:33	14	;
EXPR_STATEMENT	645:4	645:28	13	assert ( tv -> count == 1 ) ;
EXPR	645:4	645:4	14	assert ( tv -> count == 1 )
FUNCTION_CALL	645:4	645:27	15	assert ( tv -> count == 1 )
CALLEE	645:4	645:4	16	assert
LEAF_NODE	645:4	645:4	17	assert
LEAF_NODE	645:10	645:10	16	(
ARGUMENT	645:12	645:25	16	tv -> count == 1
FIELD	645:12	645:16	17	tv -> count
LEAF_NODE	645:12	645:12	18	tv
LEAF_NODE	645:14	645:14	18	->
LEAF_NODE	645:16	645:16	18	count
EQ_OPERATOR	645:22	645:22	17	==
LEAF_NODE	645:22	645:22	18	==
FIELD	645:25	645:25	17	1
LEAF_NODE	645:25	645:25	18	1
LEAF_NODE	645:27	645:27	16	)
LEAF_NODE	645:28	645:28	14	;
SELECTION	647:4	647:29	13	
KEYWORD	647:4	647:4	14	switch
LEAF_NODE	647:4	647:4	15	switch
LEAF_NODE	647:11	647:11	14	(
CONDITION	647:12	647:12	14	fip -> field_type
EXPR	647:12	647:12	15	fip -> field_type
FIELD	647:12	647:17	16	fip -> field_type
LEAF_NODE	647:12	647:12	17	fip
LEAF_NODE	647:15	647:15	17	->
LEAF_NODE	647:17	647:17	17	field_type
LEAF_NODE	647:27	647:27	14	)
STATEMENTS	647:29	717:4	14	
LEAF_NODE	647:29	647:29	15	{
STATEMENTS	648:4	716:5	15	
LABEL	648:4	648:18	16	case TIFF_BYTE :
LEAF_NODE	648:4	648:4	17	case
LEAF_NODE	648:9	648:9	17	TIFF_BYTE
LEAF_NODE	648:18	648:18	17	:
LABEL	649:4	649:23	16	case TIFF_UNDEFINED :
LEAF_NODE	649:4	649:4	17	case
LEAF_NODE	649:9	649:9	17	TIFF_UNDEFINED
LEAF_NODE	649:23	649:23	17	:
LEAF_NODE	650:5	650:5	16	{
STATEMENTS	651:6	652:6	16	
SIMPLE_DECL	651:6	651:39	17	uint8 v2 ; v2 = ( uint8 ) va_arg ( ap , int ) ;
VAR_DECL	651:6	651:12	18	uint8 v2 ; v2 = ( uint8 ) va_arg ( ap , int )
TYPE	651:6	651:6	19	uint8
TYPE_NAME	651:6	651:6	20	uint8
LEAF_NODE	651:6	651:6	21	uint8
NAME	651:12	651:12	19	v2
LEAF_NODE	651:12	651:12	20	v2
LEAF_NODE	0:0	0:0	19	;
INIT	651:12	651:12	19	v2 = ( uint8 ) va_arg ( ap , int )
ASSIGN	651:12	651:17	20	v2 = ( uint8 ) va_arg ( ap , int )
LVAL	651:12	651:12	21	v2
NAME	651:12	651:12	22	v2
LEAF_NODE	651:12	651:12	23	v2
ASSIGN_OP	651:15	651:15	21	=
LEAF_NODE	651:15	651:15	22	=
RVAL	651:17	651:24	21	( uint8 ) va_arg ( ap , int )
LEAF_NODE	651:17	651:17	22	(
TYPE_NAME	651:18	651:18	22	uint8
LEAF_NODE	651:18	651:18	23	uint8
LEAF_NODE	651:23	651:23	22	)
FUNCTION_CALL	651:24	651:38	22	va_arg ( ap , int )
CALLEE	651:24	651:24	23	va_arg
LEAF_NODE	651:24	651:24	24	va_arg
LEAF_NODE	651:30	651:30	23	(
ARGUMENT	651:31	651:31	23	ap
FIELD	651:31	651:31	24	ap
LEAF_NODE	651:31	651:31	25	ap
LEAF_NODE	651:33	651:33	23	,
ARGUMENT	651:35	651:35	23	int
FIELD	651:35	651:35	24	int
LEAF_NODE	651:35	651:35	25	int
LEAF_NODE	651:38	651:38	23	)
LEAF_NODE	651:39	651:39	18	;
EXPR_STATEMENT	652:6	652:36	17	_TIFFmemcpy ( val , & v2 , tv_size ) ;
EXPR	652:6	652:6	18	_TIFFmemcpy ( val , & v2 , tv_size )
FUNCTION_CALL	652:6	652:35	19	_TIFFmemcpy ( val , & v2 , tv_size )
CALLEE	652:6	652:6	20	_TIFFmemcpy
LEAF_NODE	652:6	652:6	21	_TIFFmemcpy
LEAF_NODE	652:17	652:17	20	(
ARGUMENT	652:18	652:18	20	val
FIELD	652:18	652:18	21	val
LEAF_NODE	652:18	652:18	22	val
LEAF_NODE	652:21	652:21	20	,
ARGUMENT	652:23	652:23	20	& v2
UNARY_EXPR	652:23	652:24	21	& v2
UNARY_OPERATOR	652:23	652:23	22	&
LEAF_NODE	652:23	652:23	23	&
FIELD	652:24	652:24	22	v2
LEAF_NODE	652:24	652:24	23	v2
LEAF_NODE	652:26	652:26	20	,
ARGUMENT	652:28	652:28	20	tv_size
FIELD	652:28	652:28	21	tv_size
LEAF_NODE	652:28	652:28	22	tv_size
LEAF_NODE	652:35	652:35	20	)
LEAF_NODE	652:36	652:36	18	;
LEAF_NODE	653:5	653:5	16	}
JUMP_STATEMENT	654:5	654:10	16	break DESTINATION ;
KEYWORD	654:5	654:5	17	break
LEAF_NODE	654:5	654:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	654:10	654:10	17	;
LABEL	655:4	655:19	16	case TIFF_SBYTE :
LEAF_NODE	655:4	655:4	17	case
LEAF_NODE	655:9	655:9	17	TIFF_SBYTE
LEAF_NODE	655:19	655:19	17	:
LEAF_NODE	656:5	656:5	16	{
STATEMENTS	657:6	658:6	16	
SIMPLE_DECL	657:6	657:37	17	int8 v2 ; v2 = ( int8 ) va_arg ( ap , int ) ;
VAR_DECL	657:6	657:11	18	int8 v2 ; v2 = ( int8 ) va_arg ( ap , int )
TYPE	657:6	657:6	19	int8
TYPE_NAME	657:6	657:6	20	int8
LEAF_NODE	657:6	657:6	21	int8
NAME	657:11	657:11	19	v2
LEAF_NODE	657:11	657:11	20	v2
LEAF_NODE	0:0	0:0	19	;
INIT	657:11	657:11	19	v2 = ( int8 ) va_arg ( ap , int )
ASSIGN	657:11	657:16	20	v2 = ( int8 ) va_arg ( ap , int )
LVAL	657:11	657:11	21	v2
NAME	657:11	657:11	22	v2
LEAF_NODE	657:11	657:11	23	v2
ASSIGN_OP	657:14	657:14	21	=
LEAF_NODE	657:14	657:14	22	=
RVAL	657:16	657:22	21	( int8 ) va_arg ( ap , int )
LEAF_NODE	657:16	657:16	22	(
TYPE_NAME	657:17	657:17	22	int8
LEAF_NODE	657:17	657:17	23	int8
LEAF_NODE	657:21	657:21	22	)
FUNCTION_CALL	657:22	657:36	22	va_arg ( ap , int )
CALLEE	657:22	657:22	23	va_arg
LEAF_NODE	657:22	657:22	24	va_arg
LEAF_NODE	657:28	657:28	23	(
ARGUMENT	657:29	657:29	23	ap
FIELD	657:29	657:29	24	ap
LEAF_NODE	657:29	657:29	25	ap
LEAF_NODE	657:31	657:31	23	,
ARGUMENT	657:33	657:33	23	int
FIELD	657:33	657:33	24	int
LEAF_NODE	657:33	657:33	25	int
LEAF_NODE	657:36	657:36	23	)
LEAF_NODE	657:37	657:37	18	;
EXPR_STATEMENT	658:6	658:36	17	_TIFFmemcpy ( val , & v2 , tv_size ) ;
EXPR	658:6	658:6	18	_TIFFmemcpy ( val , & v2 , tv_size )
FUNCTION_CALL	658:6	658:35	19	_TIFFmemcpy ( val , & v2 , tv_size )
CALLEE	658:6	658:6	20	_TIFFmemcpy
LEAF_NODE	658:6	658:6	21	_TIFFmemcpy
LEAF_NODE	658:17	658:17	20	(
ARGUMENT	658:18	658:18	20	val
FIELD	658:18	658:18	21	val
LEAF_NODE	658:18	658:18	22	val
LEAF_NODE	658:21	658:21	20	,
ARGUMENT	658:23	658:23	20	& v2
UNARY_EXPR	658:23	658:24	21	& v2
UNARY_OPERATOR	658:23	658:23	22	&
LEAF_NODE	658:23	658:23	23	&
FIELD	658:24	658:24	22	v2
LEAF_NODE	658:24	658:24	23	v2
LEAF_NODE	658:26	658:26	20	,
ARGUMENT	658:28	658:28	20	tv_size
FIELD	658:28	658:28	21	tv_size
LEAF_NODE	658:28	658:28	22	tv_size
LEAF_NODE	658:35	658:35	20	)
LEAF_NODE	658:36	658:36	18	;
LEAF_NODE	659:5	659:5	16	}
JUMP_STATEMENT	660:5	660:10	16	break DESTINATION ;
KEYWORD	660:5	660:5	17	break
LEAF_NODE	660:5	660:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	660:10	660:10	17	;
LABEL	661:4	661:19	16	case TIFF_SHORT :
LEAF_NODE	661:4	661:4	17	case
LEAF_NODE	661:9	661:9	17	TIFF_SHORT
LEAF_NODE	661:19	661:19	17	:
LEAF_NODE	662:5	662:5	16	{
STATEMENTS	663:6	664:6	16	
SIMPLE_DECL	663:6	663:41	17	uint16 v2 ; v2 = ( uint16 ) va_arg ( ap , int ) ;
VAR_DECL	663:6	663:13	18	uint16 v2 ; v2 = ( uint16 ) va_arg ( ap , int )
TYPE	663:6	663:6	19	uint16
TYPE_NAME	663:6	663:6	20	uint16
LEAF_NODE	663:6	663:6	21	uint16
NAME	663:13	663:13	19	v2
LEAF_NODE	663:13	663:13	20	v2
LEAF_NODE	0:0	0:0	19	;
INIT	663:13	663:13	19	v2 = ( uint16 ) va_arg ( ap , int )
ASSIGN	663:13	663:18	20	v2 = ( uint16 ) va_arg ( ap , int )
LVAL	663:13	663:13	21	v2
NAME	663:13	663:13	22	v2
LEAF_NODE	663:13	663:13	23	v2
ASSIGN_OP	663:16	663:16	21	=
LEAF_NODE	663:16	663:16	22	=
RVAL	663:18	663:26	21	( uint16 ) va_arg ( ap , int )
LEAF_NODE	663:18	663:18	22	(
TYPE_NAME	663:19	663:19	22	uint16
LEAF_NODE	663:19	663:19	23	uint16
LEAF_NODE	663:25	663:25	22	)
FUNCTION_CALL	663:26	663:40	22	va_arg ( ap , int )
CALLEE	663:26	663:26	23	va_arg
LEAF_NODE	663:26	663:26	24	va_arg
LEAF_NODE	663:32	663:32	23	(
ARGUMENT	663:33	663:33	23	ap
FIELD	663:33	663:33	24	ap
LEAF_NODE	663:33	663:33	25	ap
LEAF_NODE	663:35	663:35	23	,
ARGUMENT	663:37	663:37	23	int
FIELD	663:37	663:37	24	int
LEAF_NODE	663:37	663:37	25	int
LEAF_NODE	663:40	663:40	23	)
LEAF_NODE	663:41	663:41	18	;
EXPR_STATEMENT	664:6	664:36	17	_TIFFmemcpy ( val , & v2 , tv_size ) ;
EXPR	664:6	664:6	18	_TIFFmemcpy ( val , & v2 , tv_size )
FUNCTION_CALL	664:6	664:35	19	_TIFFmemcpy ( val , & v2 , tv_size )
CALLEE	664:6	664:6	20	_TIFFmemcpy
LEAF_NODE	664:6	664:6	21	_TIFFmemcpy
LEAF_NODE	664:17	664:17	20	(
ARGUMENT	664:18	664:18	20	val
FIELD	664:18	664:18	21	val
LEAF_NODE	664:18	664:18	22	val
LEAF_NODE	664:21	664:21	20	,
ARGUMENT	664:23	664:23	20	& v2
UNARY_EXPR	664:23	664:24	21	& v2
UNARY_OPERATOR	664:23	664:23	22	&
LEAF_NODE	664:23	664:23	23	&
FIELD	664:24	664:24	22	v2
LEAF_NODE	664:24	664:24	23	v2
LEAF_NODE	664:26	664:26	20	,
ARGUMENT	664:28	664:28	20	tv_size
FIELD	664:28	664:28	21	tv_size
LEAF_NODE	664:28	664:28	22	tv_size
LEAF_NODE	664:35	664:35	20	)
LEAF_NODE	664:36	664:36	18	;
LEAF_NODE	665:5	665:5	16	}
JUMP_STATEMENT	666:5	666:10	16	break DESTINATION ;
KEYWORD	666:5	666:5	17	break
LEAF_NODE	666:5	666:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	666:10	666:10	17	;
LABEL	667:4	667:20	16	case TIFF_SSHORT :
LEAF_NODE	667:4	667:4	17	case
LEAF_NODE	667:9	667:9	17	TIFF_SSHORT
LEAF_NODE	667:20	667:20	17	:
LEAF_NODE	668:5	668:5	16	{
STATEMENTS	669:6	670:6	16	
SIMPLE_DECL	669:6	669:39	17	int16 v2 ; v2 = ( int16 ) va_arg ( ap , int ) ;
VAR_DECL	669:6	669:12	18	int16 v2 ; v2 = ( int16 ) va_arg ( ap , int )
TYPE	669:6	669:6	19	int16
TYPE_NAME	669:6	669:6	20	int16
LEAF_NODE	669:6	669:6	21	int16
NAME	669:12	669:12	19	v2
LEAF_NODE	669:12	669:12	20	v2
LEAF_NODE	0:0	0:0	19	;
INIT	669:12	669:12	19	v2 = ( int16 ) va_arg ( ap , int )
ASSIGN	669:12	669:17	20	v2 = ( int16 ) va_arg ( ap , int )
LVAL	669:12	669:12	21	v2
NAME	669:12	669:12	22	v2
LEAF_NODE	669:12	669:12	23	v2
ASSIGN_OP	669:15	669:15	21	=
LEAF_NODE	669:15	669:15	22	=
RVAL	669:17	669:24	21	( int16 ) va_arg ( ap , int )
LEAF_NODE	669:17	669:17	22	(
TYPE_NAME	669:18	669:18	22	int16
LEAF_NODE	669:18	669:18	23	int16
LEAF_NODE	669:23	669:23	22	)
FUNCTION_CALL	669:24	669:38	22	va_arg ( ap , int )
CALLEE	669:24	669:24	23	va_arg
LEAF_NODE	669:24	669:24	24	va_arg
LEAF_NODE	669:30	669:30	23	(
ARGUMENT	669:31	669:31	23	ap
FIELD	669:31	669:31	24	ap
LEAF_NODE	669:31	669:31	25	ap
LEAF_NODE	669:33	669:33	23	,
ARGUMENT	669:35	669:35	23	int
FIELD	669:35	669:35	24	int
LEAF_NODE	669:35	669:35	25	int
LEAF_NODE	669:38	669:38	23	)
LEAF_NODE	669:39	669:39	18	;
EXPR_STATEMENT	670:6	670:36	17	_TIFFmemcpy ( val , & v2 , tv_size ) ;
EXPR	670:6	670:6	18	_TIFFmemcpy ( val , & v2 , tv_size )
FUNCTION_CALL	670:6	670:35	19	_TIFFmemcpy ( val , & v2 , tv_size )
CALLEE	670:6	670:6	20	_TIFFmemcpy
LEAF_NODE	670:6	670:6	21	_TIFFmemcpy
LEAF_NODE	670:17	670:17	20	(
ARGUMENT	670:18	670:18	20	val
FIELD	670:18	670:18	21	val
LEAF_NODE	670:18	670:18	22	val
LEAF_NODE	670:21	670:21	20	,
ARGUMENT	670:23	670:23	20	& v2
UNARY_EXPR	670:23	670:24	21	& v2
UNARY_OPERATOR	670:23	670:23	22	&
LEAF_NODE	670:23	670:23	23	&
FIELD	670:24	670:24	22	v2
LEAF_NODE	670:24	670:24	23	v2
LEAF_NODE	670:26	670:26	20	,
ARGUMENT	670:28	670:28	20	tv_size
FIELD	670:28	670:28	21	tv_size
LEAF_NODE	670:28	670:28	22	tv_size
LEAF_NODE	670:35	670:35	20	)
LEAF_NODE	670:36	670:36	18	;
LEAF_NODE	671:5	671:5	16	}
JUMP_STATEMENT	672:5	672:10	16	break DESTINATION ;
KEYWORD	672:5	672:5	17	break
LEAF_NODE	672:5	672:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	672:10	672:10	17	;
LABEL	673:4	673:18	16	case TIFF_LONG :
LEAF_NODE	673:4	673:4	17	case
LEAF_NODE	673:9	673:9	17	TIFF_LONG
LEAF_NODE	673:18	673:18	17	:
LABEL	674:4	674:17	16	case TIFF_IFD :
LEAF_NODE	674:4	674:4	17	case
LEAF_NODE	674:9	674:9	17	TIFF_IFD
LEAF_NODE	674:17	674:17	17	:
LEAF_NODE	675:5	675:5	16	{
STATEMENTS	676:6	677:6	16	
SIMPLE_DECL	676:6	676:36	17	uint32 v2 ; v2 = va_arg ( ap , uint32 ) ;
VAR_DECL	676:6	676:13	18	uint32 v2 ; v2 = va_arg ( ap , uint32 )
TYPE	676:6	676:6	19	uint32
TYPE_NAME	676:6	676:6	20	uint32
LEAF_NODE	676:6	676:6	21	uint32
NAME	676:13	676:13	19	v2
LEAF_NODE	676:13	676:13	20	v2
LEAF_NODE	0:0	0:0	19	;
INIT	676:13	676:13	19	v2 = va_arg ( ap , uint32 )
ASSIGN	676:13	676:18	20	v2 = va_arg ( ap , uint32 )
LVAL	676:13	676:13	21	v2
NAME	676:13	676:13	22	v2
LEAF_NODE	676:13	676:13	23	v2
ASSIGN_OP	676:16	676:16	21	=
LEAF_NODE	676:16	676:16	22	=
RVAL	676:18	676:18	21	va_arg ( ap , uint32 )
FUNCTION_CALL	676:18	676:35	22	va_arg ( ap , uint32 )
CALLEE	676:18	676:18	23	va_arg
LEAF_NODE	676:18	676:18	24	va_arg
LEAF_NODE	676:24	676:24	23	(
ARGUMENT	676:25	676:25	23	ap
FIELD	676:25	676:25	24	ap
LEAF_NODE	676:25	676:25	25	ap
LEAF_NODE	676:27	676:27	23	,
ARGUMENT	676:29	676:29	23	uint32
FIELD	676:29	676:29	24	uint32
LEAF_NODE	676:29	676:29	25	uint32
LEAF_NODE	676:35	676:35	23	)
LEAF_NODE	676:36	676:36	18	;
EXPR_STATEMENT	677:6	677:36	17	_TIFFmemcpy ( val , & v2 , tv_size ) ;
EXPR	677:6	677:6	18	_TIFFmemcpy ( val , & v2 , tv_size )
FUNCTION_CALL	677:6	677:35	19	_TIFFmemcpy ( val , & v2 , tv_size )
CALLEE	677:6	677:6	20	_TIFFmemcpy
LEAF_NODE	677:6	677:6	21	_TIFFmemcpy
LEAF_NODE	677:17	677:17	20	(
ARGUMENT	677:18	677:18	20	val
FIELD	677:18	677:18	21	val
LEAF_NODE	677:18	677:18	22	val
LEAF_NODE	677:21	677:21	20	,
ARGUMENT	677:23	677:23	20	& v2
UNARY_EXPR	677:23	677:24	21	& v2
UNARY_OPERATOR	677:23	677:23	22	&
LEAF_NODE	677:23	677:23	23	&
FIELD	677:24	677:24	22	v2
LEAF_NODE	677:24	677:24	23	v2
LEAF_NODE	677:26	677:26	20	,
ARGUMENT	677:28	677:28	20	tv_size
FIELD	677:28	677:28	21	tv_size
LEAF_NODE	677:28	677:28	22	tv_size
LEAF_NODE	677:35	677:35	20	)
LEAF_NODE	677:36	677:36	18	;
LEAF_NODE	678:5	678:5	16	}
JUMP_STATEMENT	679:5	679:10	16	break DESTINATION ;
KEYWORD	679:5	679:5	17	break
LEAF_NODE	679:5	679:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	679:10	679:10	17	;
LABEL	680:4	680:19	16	case TIFF_SLONG :
LEAF_NODE	680:4	680:4	17	case
LEAF_NODE	680:9	680:9	17	TIFF_SLONG
LEAF_NODE	680:19	680:19	17	:
LEAF_NODE	681:5	681:5	16	{
STATEMENTS	682:6	683:6	16	
SIMPLE_DECL	682:6	682:34	17	int32 v2 ; v2 = va_arg ( ap , int32 ) ;
VAR_DECL	682:6	682:12	18	int32 v2 ; v2 = va_arg ( ap , int32 )
TYPE	682:6	682:6	19	int32
TYPE_NAME	682:6	682:6	20	int32
LEAF_NODE	682:6	682:6	21	int32
NAME	682:12	682:12	19	v2
LEAF_NODE	682:12	682:12	20	v2
LEAF_NODE	0:0	0:0	19	;
INIT	682:12	682:12	19	v2 = va_arg ( ap , int32 )
ASSIGN	682:12	682:17	20	v2 = va_arg ( ap , int32 )
LVAL	682:12	682:12	21	v2
NAME	682:12	682:12	22	v2
LEAF_NODE	682:12	682:12	23	v2
ASSIGN_OP	682:15	682:15	21	=
LEAF_NODE	682:15	682:15	22	=
RVAL	682:17	682:17	21	va_arg ( ap , int32 )
FUNCTION_CALL	682:17	682:33	22	va_arg ( ap , int32 )
CALLEE	682:17	682:17	23	va_arg
LEAF_NODE	682:17	682:17	24	va_arg
LEAF_NODE	682:23	682:23	23	(
ARGUMENT	682:24	682:24	23	ap
FIELD	682:24	682:24	24	ap
LEAF_NODE	682:24	682:24	25	ap
LEAF_NODE	682:26	682:26	23	,
ARGUMENT	682:28	682:28	23	int32
FIELD	682:28	682:28	24	int32
LEAF_NODE	682:28	682:28	25	int32
LEAF_NODE	682:33	682:33	23	)
LEAF_NODE	682:34	682:34	18	;
EXPR_STATEMENT	683:6	683:36	17	_TIFFmemcpy ( val , & v2 , tv_size ) ;
EXPR	683:6	683:6	18	_TIFFmemcpy ( val , & v2 , tv_size )
FUNCTION_CALL	683:6	683:35	19	_TIFFmemcpy ( val , & v2 , tv_size )
CALLEE	683:6	683:6	20	_TIFFmemcpy
LEAF_NODE	683:6	683:6	21	_TIFFmemcpy
LEAF_NODE	683:17	683:17	20	(
ARGUMENT	683:18	683:18	20	val
FIELD	683:18	683:18	21	val
LEAF_NODE	683:18	683:18	22	val
LEAF_NODE	683:21	683:21	20	,
ARGUMENT	683:23	683:23	20	& v2
UNARY_EXPR	683:23	683:24	21	& v2
UNARY_OPERATOR	683:23	683:23	22	&
LEAF_NODE	683:23	683:23	23	&
FIELD	683:24	683:24	22	v2
LEAF_NODE	683:24	683:24	23	v2
LEAF_NODE	683:26	683:26	20	,
ARGUMENT	683:28	683:28	20	tv_size
FIELD	683:28	683:28	21	tv_size
LEAF_NODE	683:28	683:28	22	tv_size
LEAF_NODE	683:35	683:35	20	)
LEAF_NODE	683:36	683:36	18	;
LEAF_NODE	684:5	684:5	16	}
JUMP_STATEMENT	685:5	685:10	16	break DESTINATION ;
KEYWORD	685:5	685:5	17	break
LEAF_NODE	685:5	685:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	685:10	685:10	17	;
LABEL	686:4	686:19	16	case TIFF_LONG8 :
LEAF_NODE	686:4	686:4	17	case
LEAF_NODE	686:9	686:9	17	TIFF_LONG8
LEAF_NODE	686:19	686:19	17	:
LABEL	687:4	687:18	16	case TIFF_IFD8 :
LEAF_NODE	687:4	687:4	17	case
LEAF_NODE	687:9	687:9	17	TIFF_IFD8
LEAF_NODE	687:18	687:18	17	:
LEAF_NODE	688:5	688:5	16	{
STATEMENTS	689:6	690:6	16	
SIMPLE_DECL	689:6	689:36	17	uint64 v2 ; v2 = va_arg ( ap , uint64 ) ;
VAR_DECL	689:6	689:13	18	uint64 v2 ; v2 = va_arg ( ap , uint64 )
TYPE	689:6	689:6	19	uint64
TYPE_NAME	689:6	689:6	20	uint64
LEAF_NODE	689:6	689:6	21	uint64
NAME	689:13	689:13	19	v2
LEAF_NODE	689:13	689:13	20	v2
LEAF_NODE	0:0	0:0	19	;
INIT	689:13	689:13	19	v2 = va_arg ( ap , uint64 )
ASSIGN	689:13	689:18	20	v2 = va_arg ( ap , uint64 )
LVAL	689:13	689:13	21	v2
NAME	689:13	689:13	22	v2
LEAF_NODE	689:13	689:13	23	v2
ASSIGN_OP	689:16	689:16	21	=
LEAF_NODE	689:16	689:16	22	=
RVAL	689:18	689:18	21	va_arg ( ap , uint64 )
FUNCTION_CALL	689:18	689:35	22	va_arg ( ap , uint64 )
CALLEE	689:18	689:18	23	va_arg
LEAF_NODE	689:18	689:18	24	va_arg
LEAF_NODE	689:24	689:24	23	(
ARGUMENT	689:25	689:25	23	ap
FIELD	689:25	689:25	24	ap
LEAF_NODE	689:25	689:25	25	ap
LEAF_NODE	689:27	689:27	23	,
ARGUMENT	689:29	689:29	23	uint64
FIELD	689:29	689:29	24	uint64
LEAF_NODE	689:29	689:29	25	uint64
LEAF_NODE	689:35	689:35	23	)
LEAF_NODE	689:36	689:36	18	;
EXPR_STATEMENT	690:6	690:36	17	_TIFFmemcpy ( val , & v2 , tv_size ) ;
EXPR	690:6	690:6	18	_TIFFmemcpy ( val , & v2 , tv_size )
FUNCTION_CALL	690:6	690:35	19	_TIFFmemcpy ( val , & v2 , tv_size )
CALLEE	690:6	690:6	20	_TIFFmemcpy
LEAF_NODE	690:6	690:6	21	_TIFFmemcpy
LEAF_NODE	690:17	690:17	20	(
ARGUMENT	690:18	690:18	20	val
FIELD	690:18	690:18	21	val
LEAF_NODE	690:18	690:18	22	val
LEAF_NODE	690:21	690:21	20	,
ARGUMENT	690:23	690:23	20	& v2
UNARY_EXPR	690:23	690:24	21	& v2
UNARY_OPERATOR	690:23	690:23	22	&
LEAF_NODE	690:23	690:23	23	&
FIELD	690:24	690:24	22	v2
LEAF_NODE	690:24	690:24	23	v2
LEAF_NODE	690:26	690:26	20	,
ARGUMENT	690:28	690:28	20	tv_size
FIELD	690:28	690:28	21	tv_size
LEAF_NODE	690:28	690:28	22	tv_size
LEAF_NODE	690:35	690:35	20	)
LEAF_NODE	690:36	690:36	18	;
LEAF_NODE	691:5	691:5	16	}
JUMP_STATEMENT	692:5	692:10	16	break DESTINATION ;
KEYWORD	692:5	692:5	17	break
LEAF_NODE	692:5	692:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	692:10	692:10	17	;
LABEL	693:4	693:20	16	case TIFF_SLONG8 :
LEAF_NODE	693:4	693:4	17	case
LEAF_NODE	693:9	693:9	17	TIFF_SLONG8
LEAF_NODE	693:20	693:20	17	:
LEAF_NODE	694:5	694:5	16	{
STATEMENTS	695:6	696:6	16	
SIMPLE_DECL	695:6	695:34	17	int64 v2 ; v2 = va_arg ( ap , int64 ) ;
VAR_DECL	695:6	695:12	18	int64 v2 ; v2 = va_arg ( ap , int64 )
TYPE	695:6	695:6	19	int64
TYPE_NAME	695:6	695:6	20	int64
LEAF_NODE	695:6	695:6	21	int64
NAME	695:12	695:12	19	v2
LEAF_NODE	695:12	695:12	20	v2
LEAF_NODE	0:0	0:0	19	;
INIT	695:12	695:12	19	v2 = va_arg ( ap , int64 )
ASSIGN	695:12	695:17	20	v2 = va_arg ( ap , int64 )
LVAL	695:12	695:12	21	v2
NAME	695:12	695:12	22	v2
LEAF_NODE	695:12	695:12	23	v2
ASSIGN_OP	695:15	695:15	21	=
LEAF_NODE	695:15	695:15	22	=
RVAL	695:17	695:17	21	va_arg ( ap , int64 )
FUNCTION_CALL	695:17	695:33	22	va_arg ( ap , int64 )
CALLEE	695:17	695:17	23	va_arg
LEAF_NODE	695:17	695:17	24	va_arg
LEAF_NODE	695:23	695:23	23	(
ARGUMENT	695:24	695:24	23	ap
FIELD	695:24	695:24	24	ap
LEAF_NODE	695:24	695:24	25	ap
LEAF_NODE	695:26	695:26	23	,
ARGUMENT	695:28	695:28	23	int64
FIELD	695:28	695:28	24	int64
LEAF_NODE	695:28	695:28	25	int64
LEAF_NODE	695:33	695:33	23	)
LEAF_NODE	695:34	695:34	18	;
EXPR_STATEMENT	696:6	696:36	17	_TIFFmemcpy ( val , & v2 , tv_size ) ;
EXPR	696:6	696:6	18	_TIFFmemcpy ( val , & v2 , tv_size )
FUNCTION_CALL	696:6	696:35	19	_TIFFmemcpy ( val , & v2 , tv_size )
CALLEE	696:6	696:6	20	_TIFFmemcpy
LEAF_NODE	696:6	696:6	21	_TIFFmemcpy
LEAF_NODE	696:17	696:17	20	(
ARGUMENT	696:18	696:18	20	val
FIELD	696:18	696:18	21	val
LEAF_NODE	696:18	696:18	22	val
LEAF_NODE	696:21	696:21	20	,
ARGUMENT	696:23	696:23	20	& v2
UNARY_EXPR	696:23	696:24	21	& v2
UNARY_OPERATOR	696:23	696:23	22	&
LEAF_NODE	696:23	696:23	23	&
FIELD	696:24	696:24	22	v2
LEAF_NODE	696:24	696:24	23	v2
LEAF_NODE	696:26	696:26	20	,
ARGUMENT	696:28	696:28	20	tv_size
FIELD	696:28	696:28	21	tv_size
LEAF_NODE	696:28	696:28	22	tv_size
LEAF_NODE	696:35	696:35	20	)
LEAF_NODE	696:36	696:36	18	;
LEAF_NODE	697:5	697:5	16	}
JUMP_STATEMENT	698:5	698:10	16	break DESTINATION ;
KEYWORD	698:5	698:5	17	break
LEAF_NODE	698:5	698:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	698:10	698:10	17	;
LABEL	699:4	699:22	16	case TIFF_RATIONAL :
LEAF_NODE	699:4	699:4	17	case
LEAF_NODE	699:9	699:9	17	TIFF_RATIONAL
LEAF_NODE	699:22	699:22	17	:
LABEL	700:4	700:23	16	case TIFF_SRATIONAL :
LEAF_NODE	700:4	700:4	17	case
LEAF_NODE	700:9	700:9	17	TIFF_SRATIONAL
LEAF_NODE	700:23	700:23	17	:
LABEL	701:4	701:19	16	case TIFF_FLOAT :
LEAF_NODE	701:4	701:4	17	case
LEAF_NODE	701:9	701:9	17	TIFF_FLOAT
LEAF_NODE	701:19	701:19	17	:
LEAF_NODE	702:5	702:5	16	{
STATEMENTS	703:6	704:6	16	
SIMPLE_DECL	703:6	703:60	17	float v2 ; v2 = _TIFFClampDoubleToFloat ( va_arg ( ap , double ) ) ;
VAR_DECL	703:6	703:12	18	float v2 ; v2 = _TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
TYPE	703:6	703:6	19	float
TYPE_NAME	703:6	703:6	20	float
LEAF_NODE	703:6	703:6	21	float
NAME	703:12	703:12	19	v2
LEAF_NODE	703:12	703:12	20	v2
LEAF_NODE	0:0	0:0	19	;
INIT	703:12	703:12	19	v2 = _TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
ASSIGN	703:12	703:17	20	v2 = _TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
LVAL	703:12	703:12	21	v2
NAME	703:12	703:12	22	v2
LEAF_NODE	703:12	703:12	23	v2
ASSIGN_OP	703:15	703:15	21	=
LEAF_NODE	703:15	703:15	22	=
RVAL	703:17	703:17	21	_TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
FUNCTION_CALL	703:17	703:59	22	_TIFFClampDoubleToFloat ( va_arg ( ap , double ) )
CALLEE	703:17	703:17	23	_TIFFClampDoubleToFloat
LEAF_NODE	703:17	703:17	24	_TIFFClampDoubleToFloat
LEAF_NODE	703:40	703:40	23	(
ARGUMENT	703:41	703:41	23	va_arg ( ap , double )
FUNCTION_CALL	703:41	703:58	24	va_arg ( ap , double )
CALLEE	703:41	703:41	25	va_arg
LEAF_NODE	703:41	703:41	26	va_arg
LEAF_NODE	703:47	703:47	25	(
ARGUMENT	703:48	703:48	25	ap
FIELD	703:48	703:48	26	ap
LEAF_NODE	703:48	703:48	27	ap
LEAF_NODE	703:50	703:50	25	,
ARGUMENT	703:52	703:52	25	double
FIELD	703:52	703:52	26	double
LEAF_NODE	703:52	703:52	27	double
LEAF_NODE	703:58	703:58	25	)
LEAF_NODE	703:59	703:59	23	)
LEAF_NODE	703:60	703:60	18	;
EXPR_STATEMENT	704:6	704:36	17	_TIFFmemcpy ( val , & v2 , tv_size ) ;
EXPR	704:6	704:6	18	_TIFFmemcpy ( val , & v2 , tv_size )
FUNCTION_CALL	704:6	704:35	19	_TIFFmemcpy ( val , & v2 , tv_size )
CALLEE	704:6	704:6	20	_TIFFmemcpy
LEAF_NODE	704:6	704:6	21	_TIFFmemcpy
LEAF_NODE	704:17	704:17	20	(
ARGUMENT	704:18	704:18	20	val
FIELD	704:18	704:18	21	val
LEAF_NODE	704:18	704:18	22	val
LEAF_NODE	704:21	704:21	20	,
ARGUMENT	704:23	704:23	20	& v2
UNARY_EXPR	704:23	704:24	21	& v2
UNARY_OPERATOR	704:23	704:23	22	&
LEAF_NODE	704:23	704:23	23	&
FIELD	704:24	704:24	22	v2
LEAF_NODE	704:24	704:24	23	v2
LEAF_NODE	704:26	704:26	20	,
ARGUMENT	704:28	704:28	20	tv_size
FIELD	704:28	704:28	21	tv_size
LEAF_NODE	704:28	704:28	22	tv_size
LEAF_NODE	704:35	704:35	20	)
LEAF_NODE	704:36	704:36	18	;
LEAF_NODE	705:5	705:5	16	}
JUMP_STATEMENT	706:5	706:10	16	break DESTINATION ;
KEYWORD	706:5	706:5	17	break
LEAF_NODE	706:5	706:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	706:10	706:10	17	;
LABEL	707:4	707:20	16	case TIFF_DOUBLE :
LEAF_NODE	707:4	707:4	17	case
LEAF_NODE	707:9	707:9	17	TIFF_DOUBLE
LEAF_NODE	707:20	707:20	17	:
LEAF_NODE	708:5	708:5	16	{
STATEMENTS	709:6	710:6	16	
SIMPLE_DECL	709:6	709:36	17	double v2 ; v2 = va_arg ( ap , double ) ;
VAR_DECL	709:6	709:13	18	double v2 ; v2 = va_arg ( ap , double )
TYPE	709:6	709:6	19	double
TYPE_NAME	709:6	709:6	20	double
LEAF_NODE	709:6	709:6	21	double
NAME	709:13	709:13	19	v2
LEAF_NODE	709:13	709:13	20	v2
LEAF_NODE	0:0	0:0	19	;
INIT	709:13	709:13	19	v2 = va_arg ( ap , double )
ASSIGN	709:13	709:18	20	v2 = va_arg ( ap , double )
LVAL	709:13	709:13	21	v2
NAME	709:13	709:13	22	v2
LEAF_NODE	709:13	709:13	23	v2
ASSIGN_OP	709:16	709:16	21	=
LEAF_NODE	709:16	709:16	22	=
RVAL	709:18	709:18	21	va_arg ( ap , double )
FUNCTION_CALL	709:18	709:35	22	va_arg ( ap , double )
CALLEE	709:18	709:18	23	va_arg
LEAF_NODE	709:18	709:18	24	va_arg
LEAF_NODE	709:24	709:24	23	(
ARGUMENT	709:25	709:25	23	ap
FIELD	709:25	709:25	24	ap
LEAF_NODE	709:25	709:25	25	ap
LEAF_NODE	709:27	709:27	23	,
ARGUMENT	709:29	709:29	23	double
FIELD	709:29	709:29	24	double
LEAF_NODE	709:29	709:29	25	double
LEAF_NODE	709:35	709:35	23	)
LEAF_NODE	709:36	709:36	18	;
EXPR_STATEMENT	710:6	710:36	17	_TIFFmemcpy ( val , & v2 , tv_size ) ;
EXPR	710:6	710:6	18	_TIFFmemcpy ( val , & v2 , tv_size )
FUNCTION_CALL	710:6	710:35	19	_TIFFmemcpy ( val , & v2 , tv_size )
CALLEE	710:6	710:6	20	_TIFFmemcpy
LEAF_NODE	710:6	710:6	21	_TIFFmemcpy
LEAF_NODE	710:17	710:17	20	(
ARGUMENT	710:18	710:18	20	val
FIELD	710:18	710:18	21	val
LEAF_NODE	710:18	710:18	22	val
LEAF_NODE	710:21	710:21	20	,
ARGUMENT	710:23	710:23	20	& v2
UNARY_EXPR	710:23	710:24	21	& v2
UNARY_OPERATOR	710:23	710:23	22	&
LEAF_NODE	710:23	710:23	23	&
FIELD	710:24	710:24	22	v2
LEAF_NODE	710:24	710:24	23	v2
LEAF_NODE	710:26	710:26	20	,
ARGUMENT	710:28	710:28	20	tv_size
FIELD	710:28	710:28	21	tv_size
LEAF_NODE	710:28	710:28	22	tv_size
LEAF_NODE	710:35	710:35	20	)
LEAF_NODE	710:36	710:36	18	;
LEAF_NODE	711:5	711:5	16	}
JUMP_STATEMENT	712:5	712:10	16	break DESTINATION ;
KEYWORD	712:5	712:5	17	break
LEAF_NODE	712:5	712:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	712:10	712:10	17	;
LABEL	713:4	713:11	16	default :
LEAF_NODE	713:4	713:4	17	default
LEAF_NODE	713:11	713:11	17	:
EXPR_STATEMENT	714:5	714:33	16	_TIFFmemset ( val , 0 , tv_size ) ;
EXPR	714:5	714:5	17	_TIFFmemset ( val , 0 , tv_size )
FUNCTION_CALL	714:5	714:32	18	_TIFFmemset ( val , 0 , tv_size )
CALLEE	714:5	714:5	19	_TIFFmemset
LEAF_NODE	714:5	714:5	20	_TIFFmemset
LEAF_NODE	714:16	714:16	19	(
ARGUMENT	714:17	714:17	19	val
FIELD	714:17	714:17	20	val
LEAF_NODE	714:17	714:17	21	val
LEAF_NODE	714:20	714:20	19	,
ARGUMENT	714:22	714:22	19	0
FIELD	714:22	714:22	20	0
LEAF_NODE	714:22	714:22	21	0
LEAF_NODE	714:23	714:23	19	,
ARGUMENT	714:25	714:25	19	tv_size
FIELD	714:25	714:25	20	tv_size
LEAF_NODE	714:25	714:25	21	tv_size
LEAF_NODE	714:32	714:32	19	)
LEAF_NODE	714:33	714:33	17	;
EXPR_STATEMENT	715:5	715:15	16	status = 0 ;
EXPR	715:5	715:5	17	status = 0
ASSIGN	715:5	715:14	18	status = 0
LVAL	715:5	715:5	19	status
FIELD	715:5	715:5	20	status
LEAF_NODE	715:5	715:5	21	status
ASSIGN_OP	715:12	715:12	19	=
LEAF_NODE	715:12	715:12	20	=
RVAL	715:14	715:14	19	0
FIELD	715:14	715:14	20	0
LEAF_NODE	715:14	715:14	21	0
LEAF_NODE	715:15	715:15	17	;
JUMP_STATEMENT	716:5	716:10	16	break DESTINATION ;
KEYWORD	716:5	716:5	17	break
LEAF_NODE	716:5	716:5	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	716:10	716:10	17	;
LEAF_NODE	717:4	717:4	15	}
LEAF_NODE	718:3	718:3	12	}
LEAF_NODE	719:2	719:2	9	}
LEAF_NODE	720:1	720:1	6	}
LEAF_NODE	721:1	721:1	5	}
SELECTION	722:1	722:13	3	
KEYWORD	722:1	722:1	4	if
LEAF_NODE	722:1	722:1	5	if
LEAF_NODE	722:4	722:4	4	(
CONDITION	722:5	722:5	4	status
EXPR	722:5	722:5	5	status
FIELD	722:5	722:5	6	status
LEAF_NODE	722:5	722:5	7	status
LEAF_NODE	722:11	722:11	4	)
STATEMENTS	722:13	727:1	4	
LEAF_NODE	722:13	722:13	5	{
STATEMENTS	723:2	726:2	5	
SIMPLE_DECL	723:2	723:49	6	const TIFFField * fip2 ; fip2 = TIFFFieldWithTag ( tif , tag ) ;
VAR_DECL	723:2	723:19	7	const TIFFField * fip2 ; fip2 = TIFFFieldWithTag ( tif , tag )
TYPE	723:2	723:17	8	const TIFFField *
TYPE_NAME	723:2	723:8	9	const TIFFField
LEAF_NODE	723:2	723:2	10	const
LEAF_NODE	723:8	723:8	10	TIFFField
POINTER	723:17	723:17	9	*
LEAF_NODE	723:17	723:17	10	*
NAME	723:19	723:19	8	fip2
LEAF_NODE	723:19	723:19	9	fip2
LEAF_NODE	0:0	0:0	8	;
INIT	723:19	723:19	8	fip2 = TIFFFieldWithTag ( tif , tag )
ASSIGN	723:19	723:24	9	fip2 = TIFFFieldWithTag ( tif , tag )
LVAL	723:19	723:19	10	fip2
NAME	723:19	723:19	11	fip2
LEAF_NODE	723:19	723:19	12	fip2
ASSIGN_OP	723:23	723:23	10	=
LEAF_NODE	723:23	723:23	11	=
RVAL	723:24	723:24	10	TIFFFieldWithTag ( tif , tag )
FUNCTION_CALL	723:24	723:48	11	TIFFFieldWithTag ( tif , tag )
CALLEE	723:24	723:24	12	TIFFFieldWithTag
LEAF_NODE	723:24	723:24	13	TIFFFieldWithTag
LEAF_NODE	723:40	723:40	12	(
ARGUMENT	723:41	723:41	12	tif
FIELD	723:41	723:41	13	tif
LEAF_NODE	723:41	723:41	14	tif
LEAF_NODE	723:44	723:44	12	,
ARGUMENT	723:45	723:45	12	tag
FIELD	723:45	723:45	13	tag
LEAF_NODE	723:45	723:45	14	tag
LEAF_NODE	723:48	723:48	12	)
LEAF_NODE	723:49	723:49	7	;
SELECTION	724:2	725:3	6	
KEYWORD	724:2	724:2	7	if
LEAF_NODE	724:2	724:2	8	if
LEAF_NODE	724:5	724:5	7	(
CONDITION	724:6	724:6	7	fip2
EXPR	724:6	724:6	8	fip2
FIELD	724:6	724:6	9	fip2
LEAF_NODE	724:6	724:6	10	fip2
LEAF_NODE	724:10	724:10	7	)
STATEMENTS	725:3	725:3	7	
EXPR_STATEMENT	725:3	725:40	8	TIFFSetFieldBit ( tif , fip2 -> field_bit ) ;
EXPR	725:3	725:3	9	TIFFSetFieldBit ( tif , fip2 -> field_bit )
FUNCTION_CALL	725:3	725:39	10	TIFFSetFieldBit ( tif , fip2 -> field_bit )
CALLEE	725:3	725:3	11	TIFFSetFieldBit
LEAF_NODE	725:3	725:3	12	TIFFSetFieldBit
LEAF_NODE	725:18	725:18	11	(
ARGUMENT	725:19	725:19	11	tif
FIELD	725:19	725:19	12	tif
LEAF_NODE	725:19	725:19	13	tif
LEAF_NODE	725:22	725:22	11	,
ARGUMENT	725:24	725:24	11	fip2 -> field_bit
FIELD	725:24	725:30	12	fip2 -> field_bit
LEAF_NODE	725:24	725:24	13	fip2
LEAF_NODE	725:28	725:28	13	->
LEAF_NODE	725:30	725:30	13	field_bit
LEAF_NODE	725:39	725:39	11	)
LEAF_NODE	725:40	725:40	9	;
EXPR_STATEMENT	726:2	726:36	6	tif -> tif_flags |= TIFF_DIRTYDIRECT ;
EXPR	726:2	726:2	7	tif -> tif_flags |= TIFF_DIRTYDIRECT
ASSIGN	726:2	726:20	8	tif -> tif_flags |= TIFF_DIRTYDIRECT
LVAL	726:2	726:2	9	tif -> tif_flags
FIELD	726:2	726:7	10	tif -> tif_flags
LEAF_NODE	726:2	726:2	11	tif
LEAF_NODE	726:5	726:5	11	->
LEAF_NODE	726:7	726:7	11	tif_flags
ASSIGN_OP	726:17	726:17	9	|=
LEAF_NODE	726:17	726:17	10	|=
RVAL	726:20	726:20	9	TIFF_DIRTYDIRECT
FIELD	726:20	726:20	10	TIFF_DIRTYDIRECT
LEAF_NODE	726:20	726:20	11	TIFF_DIRTYDIRECT
LEAF_NODE	726:36	726:36	7	;
LEAF_NODE	727:1	727:1	5	}
LABEL	729:0	729:3	3	end :
LEAF_NODE	729:0	729:0	4	end
LEAF_NODE	729:3	729:3	4	:
EXPR_STATEMENT	730:1	730:11	3	va_end ( ap ) ;
EXPR	730:1	730:1	4	va_end ( ap )
FUNCTION_CALL	730:1	730:10	5	va_end ( ap )
CALLEE	730:1	730:1	6	va_end
LEAF_NODE	730:1	730:1	7	va_end
LEAF_NODE	730:7	730:7	6	(
ARGUMENT	730:8	730:8	6	ap
FIELD	730:8	730:8	7	ap
LEAF_NODE	730:8	730:8	8	ap
LEAF_NODE	730:10	730:10	6	)
LEAF_NODE	730:11	730:11	4	;
LEAF_NODE	731:1	731:1	3	return
LEAF_NODE	731:8	731:8	3	(
LEAF_NODE	731:9	731:9	3	status
LEAF_NODE	731:15	731:15	3	)
LEAF_NODE	731:16	731:16	3	;
LABEL	732:0	732:8	3	badvalue :
LEAF_NODE	732:0	732:0	4	badvalue
LEAF_NODE	732:8	732:8	4	:
LEAF_NODE	733:8	733:8	3	{
STATEMENTS	734:2	739:2	3	
SIMPLE_DECL	734:2	734:49	4	const TIFFField * fip2 ; fip2 = TIFFFieldWithTag ( tif , tag ) ;
VAR_DECL	734:2	734:19	5	const TIFFField * fip2 ; fip2 = TIFFFieldWithTag ( tif , tag )
TYPE	734:2	734:17	6	const TIFFField *
TYPE_NAME	734:2	734:8	7	const TIFFField
LEAF_NODE	734:2	734:2	8	const
LEAF_NODE	734:8	734:8	8	TIFFField
POINTER	734:17	734:17	7	*
LEAF_NODE	734:17	734:17	8	*
NAME	734:19	734:19	6	fip2
LEAF_NODE	734:19	734:19	7	fip2
LEAF_NODE	0:0	0:0	6	;
INIT	734:19	734:19	6	fip2 = TIFFFieldWithTag ( tif , tag )
ASSIGN	734:19	734:24	7	fip2 = TIFFFieldWithTag ( tif , tag )
LVAL	734:19	734:19	8	fip2
NAME	734:19	734:19	9	fip2
LEAF_NODE	734:19	734:19	10	fip2
ASSIGN_OP	734:23	734:23	8	=
LEAF_NODE	734:23	734:23	9	=
RVAL	734:24	734:24	8	TIFFFieldWithTag ( tif , tag )
FUNCTION_CALL	734:24	734:48	9	TIFFFieldWithTag ( tif , tag )
CALLEE	734:24	734:24	10	TIFFFieldWithTag
LEAF_NODE	734:24	734:24	11	TIFFFieldWithTag
LEAF_NODE	734:40	734:40	10	(
ARGUMENT	734:41	734:41	10	tif
FIELD	734:41	734:41	11	tif
LEAF_NODE	734:41	734:41	12	tif
LEAF_NODE	734:44	734:44	10	,
ARGUMENT	734:45	734:45	10	tag
FIELD	734:45	734:45	11	tag
LEAF_NODE	734:45	734:45	12	tag
LEAF_NODE	734:48	734:48	10	)
LEAF_NODE	734:49	734:49	5	;
EXPR_STATEMENT	735:2	738:43	4	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad value %u for \"%s\" tag" , tif -> tif_name , v , fip2 ? fip2 -> field_name : "Unknown" ) ;
EXPR	735:2	735:2	5	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad value %u for \"%s\" tag" , tif -> tif_name , v , fip2 ? fip2 -> field_name : "Unknown" )
FUNCTION_CALL	735:2	738:42	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad value %u for \"%s\" tag" , tif -> tif_name , v , fip2 ? fip2 -> field_name : "Unknown" )
CALLEE	735:2	735:2	7	TIFFErrorExt
LEAF_NODE	735:2	735:2	8	TIFFErrorExt
LEAF_NODE	735:14	735:14	7	(
ARGUMENT	735:15	735:15	7	tif -> tif_clientdata
FIELD	735:15	735:20	8	tif -> tif_clientdata
LEAF_NODE	735:15	735:15	9	tif
LEAF_NODE	735:18	735:18	9	->
LEAF_NODE	735:20	735:20	9	tif_clientdata
LEAF_NODE	735:34	735:34	7	,
ARGUMENT	735:36	735:36	7	module
FIELD	735:36	735:36	8	module
LEAF_NODE	735:36	735:36	9	module
LEAF_NODE	735:42	735:42	7	,
ARGUMENT	736:7	736:7	7	"%s: Bad value %u for \"%s\" tag"
FIELD	736:7	736:7	8	"%s: Bad value %u for \"%s\" tag"
LEAF_NODE	736:7	736:7	9	"%s: Bad value %u for \"%s\" tag"
LEAF_NODE	736:40	736:40	7	,
ARGUMENT	737:7	737:7	7	tif -> tif_name
FIELD	737:7	737:12	8	tif -> tif_name
LEAF_NODE	737:7	737:7	9	tif
LEAF_NODE	737:10	737:10	9	->
LEAF_NODE	737:12	737:12	9	tif_name
LEAF_NODE	737:20	737:20	7	,
ARGUMENT	737:22	737:22	7	v
FIELD	737:22	737:22	8	v
LEAF_NODE	737:22	737:22	9	v
LEAF_NODE	737:23	737:23	7	,
ARGUMENT	738:7	738:7	7	fip2 ? fip2 -> field_name : "Unknown"
COND_EXPR	738:7	738:33	8	fip2 ? fip2 -> field_name : "Unknown"
CONDITION	738:7	738:7	9	fip2
FIELD	738:7	738:7	10	fip2
LEAF_NODE	738:7	738:7	11	fip2
LEAF_NODE	738:12	738:12	9	?
EXPR	738:14	738:14	9	fip2 -> field_name
FIELD	738:14	738:20	10	fip2 -> field_name
LEAF_NODE	738:14	738:14	11	fip2
LEAF_NODE	738:18	738:18	11	->
LEAF_NODE	738:20	738:20	11	field_name
LEAF_NODE	738:31	738:31	9	:
FIELD	738:33	738:33	9	"Unknown"
LEAF_NODE	738:33	738:33	10	"Unknown"
LEAF_NODE	738:42	738:42	7	)
LEAF_NODE	738:43	738:43	5	;
EXPR_STATEMENT	739:2	739:12	4	va_end ( ap ) ;
EXPR	739:2	739:2	5	va_end ( ap )
FUNCTION_CALL	739:2	739:11	6	va_end ( ap )
CALLEE	739:2	739:2	7	va_end
LEAF_NODE	739:2	739:2	8	va_end
LEAF_NODE	739:8	739:8	7	(
ARGUMENT	739:9	739:9	7	ap
FIELD	739:9	739:9	8	ap
LEAF_NODE	739:9	739:9	9	ap
LEAF_NODE	739:11	739:11	7	)
LEAF_NODE	739:12	739:12	5	;
LEAF_NODE	740:8	740:8	3	}
JUMP_STATEMENT	741:1	741:11	3	return ( 0 ) ;
KEYWORD	741:1	741:1	4	return
LEAF_NODE	741:1	741:1	5	return
DESTINATION	741:8	741:8	4	( 0 )
EXPR	741:8	741:10	5	( 0 )
LEAF_NODE	741:8	741:8	6	(
FIELD	741:9	741:9	6	0
LEAF_NODE	741:9	741:9	7	0
LEAF_NODE	741:10	741:10	6	)
LEAF_NODE	741:11	741:11	4	;
LABEL	742:0	742:10	3	badvalue32 :
LEAF_NODE	742:0	742:0	4	badvalue32
LEAF_NODE	742:10	742:10	4	:
LEAF_NODE	743:8	743:8	3	{
STATEMENTS	744:2	749:2	3	
SIMPLE_DECL	744:2	744:49	4	const TIFFField * fip2 ; fip2 = TIFFFieldWithTag ( tif , tag ) ;
VAR_DECL	744:2	744:19	5	const TIFFField * fip2 ; fip2 = TIFFFieldWithTag ( tif , tag )
TYPE	744:2	744:17	6	const TIFFField *
TYPE_NAME	744:2	744:8	7	const TIFFField
LEAF_NODE	744:2	744:2	8	const
LEAF_NODE	744:8	744:8	8	TIFFField
POINTER	744:17	744:17	7	*
LEAF_NODE	744:17	744:17	8	*
NAME	744:19	744:19	6	fip2
LEAF_NODE	744:19	744:19	7	fip2
LEAF_NODE	0:0	0:0	6	;
INIT	744:19	744:19	6	fip2 = TIFFFieldWithTag ( tif , tag )
ASSIGN	744:19	744:24	7	fip2 = TIFFFieldWithTag ( tif , tag )
LVAL	744:19	744:19	8	fip2
NAME	744:19	744:19	9	fip2
LEAF_NODE	744:19	744:19	10	fip2
ASSIGN_OP	744:23	744:23	8	=
LEAF_NODE	744:23	744:23	9	=
RVAL	744:24	744:24	8	TIFFFieldWithTag ( tif , tag )
FUNCTION_CALL	744:24	744:48	9	TIFFFieldWithTag ( tif , tag )
CALLEE	744:24	744:24	10	TIFFFieldWithTag
LEAF_NODE	744:24	744:24	11	TIFFFieldWithTag
LEAF_NODE	744:40	744:40	10	(
ARGUMENT	744:41	744:41	10	tif
FIELD	744:41	744:41	11	tif
LEAF_NODE	744:41	744:41	12	tif
LEAF_NODE	744:44	744:44	10	,
ARGUMENT	744:45	744:45	10	tag
FIELD	744:45	744:45	11	tag
LEAF_NODE	744:45	744:45	12	tag
LEAF_NODE	744:48	744:48	10	)
LEAF_NODE	744:49	744:49	5	;
EXPR_STATEMENT	745:2	748:43	4	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad value %u for \"%s\" tag" , tif -> tif_name , v32 , fip2 ? fip2 -> field_name : "Unknown" ) ;
EXPR	745:2	745:2	5	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad value %u for \"%s\" tag" , tif -> tif_name , v32 , fip2 ? fip2 -> field_name : "Unknown" )
FUNCTION_CALL	745:2	748:42	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad value %u for \"%s\" tag" , tif -> tif_name , v32 , fip2 ? fip2 -> field_name : "Unknown" )
CALLEE	745:2	745:2	7	TIFFErrorExt
LEAF_NODE	745:2	745:2	8	TIFFErrorExt
LEAF_NODE	745:14	745:14	7	(
ARGUMENT	745:15	745:15	7	tif -> tif_clientdata
FIELD	745:15	745:20	8	tif -> tif_clientdata
LEAF_NODE	745:15	745:15	9	tif
LEAF_NODE	745:18	745:18	9	->
LEAF_NODE	745:20	745:20	9	tif_clientdata
LEAF_NODE	745:34	745:34	7	,
ARGUMENT	745:36	745:36	7	module
FIELD	745:36	745:36	8	module
LEAF_NODE	745:36	745:36	9	module
LEAF_NODE	745:42	745:42	7	,
ARGUMENT	746:7	746:7	7	"%s: Bad value %u for \"%s\" tag"
FIELD	746:7	746:7	8	"%s: Bad value %u for \"%s\" tag"
LEAF_NODE	746:7	746:7	9	"%s: Bad value %u for \"%s\" tag"
LEAF_NODE	746:40	746:40	7	,
ARGUMENT	747:7	747:7	7	tif -> tif_name
FIELD	747:7	747:12	8	tif -> tif_name
LEAF_NODE	747:7	747:7	9	tif
LEAF_NODE	747:10	747:10	9	->
LEAF_NODE	747:12	747:12	9	tif_name
LEAF_NODE	747:20	747:20	7	,
ARGUMENT	747:22	747:22	7	v32
FIELD	747:22	747:22	8	v32
LEAF_NODE	747:22	747:22	9	v32
LEAF_NODE	747:25	747:25	7	,
ARGUMENT	748:7	748:7	7	fip2 ? fip2 -> field_name : "Unknown"
COND_EXPR	748:7	748:33	8	fip2 ? fip2 -> field_name : "Unknown"
CONDITION	748:7	748:7	9	fip2
FIELD	748:7	748:7	10	fip2
LEAF_NODE	748:7	748:7	11	fip2
LEAF_NODE	748:12	748:12	9	?
EXPR	748:14	748:14	9	fip2 -> field_name
FIELD	748:14	748:20	10	fip2 -> field_name
LEAF_NODE	748:14	748:14	11	fip2
LEAF_NODE	748:18	748:18	11	->
LEAF_NODE	748:20	748:20	11	field_name
LEAF_NODE	748:31	748:31	9	:
FIELD	748:33	748:33	9	"Unknown"
LEAF_NODE	748:33	748:33	10	"Unknown"
LEAF_NODE	748:42	748:42	7	)
LEAF_NODE	748:43	748:43	5	;
EXPR_STATEMENT	749:2	749:12	4	va_end ( ap ) ;
EXPR	749:2	749:2	5	va_end ( ap )
FUNCTION_CALL	749:2	749:11	6	va_end ( ap )
CALLEE	749:2	749:2	7	va_end
LEAF_NODE	749:2	749:2	8	va_end
LEAF_NODE	749:8	749:8	7	(
ARGUMENT	749:9	749:9	7	ap
FIELD	749:9	749:9	8	ap
LEAF_NODE	749:9	749:9	9	ap
LEAF_NODE	749:11	749:11	7	)
LEAF_NODE	749:12	749:12	5	;
LEAF_NODE	750:8	750:8	3	}
JUMP_STATEMENT	751:1	751:11	3	return ( 0 ) ;
KEYWORD	751:1	751:1	4	return
LEAF_NODE	751:1	751:1	5	return
DESTINATION	751:8	751:8	4	( 0 )
EXPR	751:8	751:10	5	( 0 )
LEAF_NODE	751:8	751:8	6	(
FIELD	751:9	751:9	6	0
LEAF_NODE	751:9	751:9	7	0
LEAF_NODE	751:10	751:10	6	)
LEAF_NODE	751:11	751:11	4	;
LABEL	752:0	752:14	3	badvaluedouble :
LEAF_NODE	752:0	752:0	4	badvaluedouble
LEAF_NODE	752:14	752:14	4	:
LEAF_NODE	753:8	753:8	3	{
STATEMENTS	754:8	759:8	3	
SIMPLE_DECL	754:8	754:55	4	const TIFFField * fip2 ; fip2 = TIFFFieldWithTag ( tif , tag ) ;
VAR_DECL	754:8	754:25	5	const TIFFField * fip2 ; fip2 = TIFFFieldWithTag ( tif , tag )
TYPE	754:8	754:23	6	const TIFFField *
TYPE_NAME	754:8	754:14	7	const TIFFField
LEAF_NODE	754:8	754:8	8	const
LEAF_NODE	754:14	754:14	8	TIFFField
POINTER	754:23	754:23	7	*
LEAF_NODE	754:23	754:23	8	*
NAME	754:25	754:25	6	fip2
LEAF_NODE	754:25	754:25	7	fip2
LEAF_NODE	0:0	0:0	6	;
INIT	754:25	754:25	6	fip2 = TIFFFieldWithTag ( tif , tag )
ASSIGN	754:25	754:30	7	fip2 = TIFFFieldWithTag ( tif , tag )
LVAL	754:25	754:25	8	fip2
NAME	754:25	754:25	9	fip2
LEAF_NODE	754:25	754:25	10	fip2
ASSIGN_OP	754:29	754:29	8	=
LEAF_NODE	754:29	754:29	9	=
RVAL	754:30	754:30	8	TIFFFieldWithTag ( tif , tag )
FUNCTION_CALL	754:30	754:54	9	TIFFFieldWithTag ( tif , tag )
CALLEE	754:30	754:30	10	TIFFFieldWithTag
LEAF_NODE	754:30	754:30	11	TIFFFieldWithTag
LEAF_NODE	754:46	754:46	10	(
ARGUMENT	754:47	754:47	10	tif
FIELD	754:47	754:47	11	tif
LEAF_NODE	754:47	754:47	12	tif
LEAF_NODE	754:50	754:50	10	,
ARGUMENT	754:51	754:51	10	tag
FIELD	754:51	754:51	11	tag
LEAF_NODE	754:51	754:51	12	tag
LEAF_NODE	754:54	754:54	10	)
LEAF_NODE	754:55	754:55	5	;
EXPR_STATEMENT	755:8	758:49	4	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad value %f for \"%s\" tag" , tif -> tif_name , dblval , fip2 ? fip2 -> field_name : "Unknown" ) ;
EXPR	755:8	755:8	5	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad value %f for \"%s\" tag" , tif -> tif_name , dblval , fip2 ? fip2 -> field_name : "Unknown" )
FUNCTION_CALL	755:8	758:48	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Bad value %f for \"%s\" tag" , tif -> tif_name , dblval , fip2 ? fip2 -> field_name : "Unknown" )
CALLEE	755:8	755:8	7	TIFFErrorExt
LEAF_NODE	755:8	755:8	8	TIFFErrorExt
LEAF_NODE	755:20	755:20	7	(
ARGUMENT	755:21	755:21	7	tif -> tif_clientdata
FIELD	755:21	755:26	8	tif -> tif_clientdata
LEAF_NODE	755:21	755:21	9	tif
LEAF_NODE	755:24	755:24	9	->
LEAF_NODE	755:26	755:26	9	tif_clientdata
LEAF_NODE	755:40	755:40	7	,
ARGUMENT	755:42	755:42	7	module
FIELD	755:42	755:42	8	module
LEAF_NODE	755:42	755:42	9	module
LEAF_NODE	755:48	755:48	7	,
ARGUMENT	756:13	756:13	7	"%s: Bad value %f for \"%s\" tag"
FIELD	756:13	756:13	8	"%s: Bad value %f for \"%s\" tag"
LEAF_NODE	756:13	756:13	9	"%s: Bad value %f for \"%s\" tag"
LEAF_NODE	756:46	756:46	7	,
ARGUMENT	757:13	757:13	7	tif -> tif_name
FIELD	757:13	757:18	8	tif -> tif_name
LEAF_NODE	757:13	757:13	9	tif
LEAF_NODE	757:16	757:16	9	->
LEAF_NODE	757:18	757:18	9	tif_name
LEAF_NODE	757:26	757:26	7	,
ARGUMENT	757:28	757:28	7	dblval
FIELD	757:28	757:28	8	dblval
LEAF_NODE	757:28	757:28	9	dblval
LEAF_NODE	757:34	757:34	7	,
ARGUMENT	758:13	758:13	7	fip2 ? fip2 -> field_name : "Unknown"
COND_EXPR	758:13	758:39	8	fip2 ? fip2 -> field_name : "Unknown"
CONDITION	758:13	758:13	9	fip2
FIELD	758:13	758:13	10	fip2
LEAF_NODE	758:13	758:13	11	fip2
LEAF_NODE	758:18	758:18	9	?
EXPR	758:20	758:20	9	fip2 -> field_name
FIELD	758:20	758:26	10	fip2 -> field_name
LEAF_NODE	758:20	758:20	11	fip2
LEAF_NODE	758:24	758:24	11	->
LEAF_NODE	758:26	758:26	11	field_name
LEAF_NODE	758:37	758:37	9	:
FIELD	758:39	758:39	9	"Unknown"
LEAF_NODE	758:39	758:39	10	"Unknown"
LEAF_NODE	758:48	758:48	7	)
LEAF_NODE	758:49	758:49	5	;
EXPR_STATEMENT	759:8	759:18	4	va_end ( ap ) ;
EXPR	759:8	759:8	5	va_end ( ap )
FUNCTION_CALL	759:8	759:17	6	va_end ( ap )
CALLEE	759:8	759:8	7	va_end
LEAF_NODE	759:8	759:8	8	va_end
LEAF_NODE	759:14	759:14	7	(
ARGUMENT	759:15	759:15	7	ap
FIELD	759:15	759:15	8	ap
LEAF_NODE	759:15	759:15	9	ap
LEAF_NODE	759:17	759:17	7	)
LEAF_NODE	759:18	759:18	5	;
LEAF_NODE	760:8	760:8	3	}
JUMP_STATEMENT	761:4	761:14	3	return ( 0 ) ;
KEYWORD	761:4	761:4	4	return
LEAF_NODE	761:4	761:4	5	return
DESTINATION	761:11	761:11	4	( 0 )
EXPR	761:11	761:13	5	( 0 )
LEAF_NODE	761:11	761:11	6	(
FIELD	761:12	761:12	6	0
LEAF_NODE	761:12	761:12	7	0
LEAF_NODE	761:13	761:13	6	)
LEAF_NODE	761:14	761:14	4	;
LEAF_NODE	762:0	762:0	2	}
FUNCTION_DEF	773:0	796:0	1	
RETURN_TYPE	773:0	773:7	2	static int
LEAF_NODE	773:0	773:0	3	static
TYPE_NAME	773:7	773:7	3	int
LEAF_NODE	773:7	773:7	4	int
FUNCTION_NAME	774:0	774:0	2	OkToChangeTag
LEAF_NODE	774:0	774:0	3	OkToChangeTag
PARAMETER_LIST	774:13	774:35	2	( TIFF * tif , uint32 tag )
LEAF_NODE	774:13	774:13	3	(
PARAMETER_DECL	774:14	774:20	3	TIFF * tif
TYPE	774:14	774:18	4	TIFF *
TYPE_NAME	774:14	774:14	5	TIFF
LEAF_NODE	774:14	774:14	6	TIFF
POINTER	774:18	774:18	5	*
LEAF_NODE	774:18	774:18	6	*
NAME	774:20	774:20	4	tif
LEAF_NODE	774:20	774:20	5	tif
LEAF_NODE	774:23	774:23	3	,
PARAMETER_DECL	774:25	774:32	3	uint32 tag
TYPE	774:25	774:25	4	uint32
TYPE_NAME	774:25	774:25	5	uint32
LEAF_NODE	774:25	774:25	6	uint32
NAME	774:32	774:32	4	tag
LEAF_NODE	774:32	774:32	5	tag
LEAF_NODE	774:35	774:35	3	)
LEAF_NODE	775:0	775:0	2	{
STATEMENTS	776:1	795:1	2	
SIMPLE_DECL	776:1	776:57	3	const TIFFField * fip ; fip = TIFFFindField ( tif , tag , TIFF_ANY ) ;
VAR_DECL	776:1	776:18	4	const TIFFField * fip ; fip = TIFFFindField ( tif , tag , TIFF_ANY )
TYPE	776:1	776:16	5	const TIFFField *
TYPE_NAME	776:1	776:7	6	const TIFFField
LEAF_NODE	776:1	776:1	7	const
LEAF_NODE	776:7	776:7	7	TIFFField
POINTER	776:16	776:16	6	*
LEAF_NODE	776:16	776:16	7	*
NAME	776:18	776:18	5	fip
LEAF_NODE	776:18	776:18	6	fip
LEAF_NODE	0:0	0:0	5	;
INIT	776:18	776:18	5	fip = TIFFFindField ( tif , tag , TIFF_ANY )
ASSIGN	776:18	776:24	6	fip = TIFFFindField ( tif , tag , TIFF_ANY )
LVAL	776:18	776:18	7	fip
NAME	776:18	776:18	8	fip
LEAF_NODE	776:18	776:18	9	fip
ASSIGN_OP	776:22	776:22	7	=
LEAF_NODE	776:22	776:22	8	=
RVAL	776:24	776:24	7	TIFFFindField ( tif , tag , TIFF_ANY )
FUNCTION_CALL	776:24	776:56	8	TIFFFindField ( tif , tag , TIFF_ANY )
CALLEE	776:24	776:24	9	TIFFFindField
LEAF_NODE	776:24	776:24	10	TIFFFindField
LEAF_NODE	776:37	776:37	9	(
ARGUMENT	776:38	776:38	9	tif
FIELD	776:38	776:38	10	tif
LEAF_NODE	776:38	776:38	11	tif
LEAF_NODE	776:41	776:41	9	,
ARGUMENT	776:43	776:43	9	tag
FIELD	776:43	776:43	10	tag
LEAF_NODE	776:43	776:43	11	tag
LEAF_NODE	776:46	776:46	9	,
ARGUMENT	776:48	776:48	9	TIFF_ANY
FIELD	776:48	776:48	10	TIFF_ANY
LEAF_NODE	776:48	776:48	11	TIFF_ANY
LEAF_NODE	776:56	776:56	9	)
LEAF_NODE	776:57	776:57	4	;
SELECTION	777:1	777:11	3	
KEYWORD	777:1	777:1	4	if
LEAF_NODE	777:1	777:1	5	if
LEAF_NODE	777:4	777:4	4	(
CONDITION	777:5	777:5	4	! fip
EXPR	777:5	777:5	5	! fip
UNARY_EXPR	777:5	777:6	6	! fip
UNARY_OPERATOR	777:5	777:5	7	!
LEAF_NODE	777:5	777:5	8	!
FIELD	777:6	777:6	7	fip
LEAF_NODE	777:6	777:6	8	fip
LEAF_NODE	777:9	777:9	4	)
STATEMENTS	777:11	781:1	4	
LEAF_NODE	777:11	777:11	5	{
STATEMENTS	778:2	780:2	5	
EXPR_STATEMENT	778:2	779:60	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFSetField" , "%s: Unknown %stag %u" , tif -> tif_name , isPseudoTag ( tag ) ? "pseudo-" : "" , tag ) ;
EXPR	778:2	778:2	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFSetField" , "%s: Unknown %stag %u" , tif -> tif_name , isPseudoTag ( tag ) ? "pseudo-" : "" , tag )
FUNCTION_CALL	778:2	779:59	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFSetField" , "%s: Unknown %stag %u" , tif -> tif_name , isPseudoTag ( tag ) ? "pseudo-" : "" , tag )
CALLEE	778:2	778:2	9	TIFFErrorExt
LEAF_NODE	778:2	778:2	10	TIFFErrorExt
LEAF_NODE	778:14	778:14	9	(
ARGUMENT	778:15	778:15	9	tif -> tif_clientdata
FIELD	778:15	778:20	10	tif -> tif_clientdata
LEAF_NODE	778:15	778:15	11	tif
LEAF_NODE	778:18	778:18	11	->
LEAF_NODE	778:20	778:20	11	tif_clientdata
LEAF_NODE	778:34	778:34	9	,
ARGUMENT	778:36	778:36	9	"TIFFSetField"
FIELD	778:36	778:36	10	"TIFFSetField"
LEAF_NODE	778:36	778:36	11	"TIFFSetField"
LEAF_NODE	778:50	778:50	9	,
ARGUMENT	778:52	778:52	9	"%s: Unknown %stag %u"
FIELD	778:52	778:52	10	"%s: Unknown %stag %u"
LEAF_NODE	778:52	778:52	11	"%s: Unknown %stag %u"
LEAF_NODE	778:74	778:74	9	,
ARGUMENT	779:6	779:6	9	tif -> tif_name
FIELD	779:6	779:11	10	tif -> tif_name
LEAF_NODE	779:6	779:6	11	tif
LEAF_NODE	779:9	779:9	11	->
LEAF_NODE	779:11	779:11	11	tif_name
LEAF_NODE	779:19	779:19	9	,
ARGUMENT	779:21	779:21	9	isPseudoTag ( tag ) ? "pseudo-" : ""
COND_EXPR	779:21	779:52	10	isPseudoTag ( tag ) ? "pseudo-" : ""
CONDITION	779:21	779:21	11	isPseudoTag ( tag )
FUNCTION_CALL	779:21	779:36	12	isPseudoTag ( tag )
CALLEE	779:21	779:21	13	isPseudoTag
LEAF_NODE	779:21	779:21	14	isPseudoTag
LEAF_NODE	779:32	779:32	13	(
ARGUMENT	779:33	779:33	13	tag
FIELD	779:33	779:33	14	tag
LEAF_NODE	779:33	779:33	15	tag
LEAF_NODE	779:36	779:36	13	)
LEAF_NODE	779:38	779:38	11	?
EXPR	779:40	779:40	11	"pseudo-"
FIELD	779:40	779:40	12	"pseudo-"
LEAF_NODE	779:40	779:40	13	"pseudo-"
LEAF_NODE	779:50	779:50	11	:
FIELD	779:52	779:52	11	""
LEAF_NODE	779:52	779:52	12	""
LEAF_NODE	779:54	779:54	9	,
ARGUMENT	779:56	779:56	9	tag
FIELD	779:56	779:56	10	tag
LEAF_NODE	779:56	779:56	11	tag
LEAF_NODE	779:59	779:59	9	)
LEAF_NODE	779:60	779:60	7	;
JUMP_STATEMENT	780:2	780:12	6	return ( 0 ) ;
KEYWORD	780:2	780:2	7	return
LEAF_NODE	780:2	780:2	8	return
DESTINATION	780:9	780:9	7	( 0 )
EXPR	780:9	780:11	8	( 0 )
LEAF_NODE	780:9	780:9	9	(
FIELD	780:10	780:10	9	0
LEAF_NODE	780:10	780:10	10	0
LEAF_NODE	780:11	780:11	9	)
LEAF_NODE	780:12	780:12	7	;
LEAF_NODE	781:1	781:1	5	}
SELECTION	782:1	783:29	3	
KEYWORD	782:1	782:1	4	if
LEAF_NODE	782:1	782:1	5	if
LEAF_NODE	782:4	782:4	4	(
CONDITION	782:5	782:5	4	tag != TIFFTAG_IMAGELENGTH && ( tif -> tif_flags & TIFF_BEENWRITING ) && ! fip -> field_oktochange
EXPR	782:5	782:5	5	tag != TIFFTAG_IMAGELENGTH && ( tif -> tif_flags & TIFF_BEENWRITING ) && ! fip -> field_oktochange
AND	782:5	782:35	6	tag != TIFFTAG_IMAGELENGTH && ( tif -> tif_flags & TIFF_BEENWRITING ) && ! fip -> field_oktochange
EXPR	782:5	782:12	7	tag != TIFFTAG_IMAGELENGTH
FIELD	782:5	782:5	8	tag
LEAF_NODE	782:5	782:5	9	tag
EQ_OPERATOR	782:9	782:9	8	!=
LEAF_NODE	782:9	782:9	9	!=
FIELD	782:12	782:12	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	782:12	782:12	9	TIFFTAG_IMAGELENGTH
LEAF_NODE	782:32	782:32	7	&&
EXPR	782:35	782:35	7	( tif -> tif_flags & TIFF_BEENWRITING ) && ! fip -> field_oktochange
AND	782:35	783:5	8	( tif -> tif_flags & TIFF_BEENWRITING ) && ! fip -> field_oktochange
EXPR	782:35	782:69	9	( tif -> tif_flags & TIFF_BEENWRITING )
LEAF_NODE	782:35	782:35	10	(
FIELD	782:36	782:41	10	tif -> tif_flags
LEAF_NODE	782:36	782:36	11	tif
LEAF_NODE	782:39	782:39	11	->
LEAF_NODE	782:41	782:41	11	tif_flags
LEAF_NODE	782:51	782:51	10	&
FIELD	782:53	782:53	10	TIFF_BEENWRITING
LEAF_NODE	782:53	782:53	11	TIFF_BEENWRITING
LEAF_NODE	782:69	782:69	10	)
LEAF_NODE	782:71	782:71	9	&&
EXPR	783:5	783:5	9	! fip -> field_oktochange
UNARY_EXPR	783:5	783:6	10	! fip -> field_oktochange
UNARY_OPERATOR	783:5	783:5	11	!
LEAF_NODE	783:5	783:5	12	!
FIELD	783:6	783:11	11	fip -> field_oktochange
LEAF_NODE	783:6	783:6	12	fip
LEAF_NODE	783:9	783:9	12	->
LEAF_NODE	783:11	783:11	12	field_oktochange
LEAF_NODE	783:27	783:27	4	)
STATEMENTS	783:29	794:1	4	
LEAF_NODE	783:29	783:29	5	{
STATEMENTS	790:2	793:2	5	
EXPR_STATEMENT	790:2	792:37	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFSetField" , "%s: Cannot modify tag \"%s\" while writing" , tif -> tif_name , fip -> field_name ) ;
EXPR	790:2	790:2	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFSetField" , "%s: Cannot modify tag \"%s\" while writing" , tif -> tif_name , fip -> field_name )
FUNCTION_CALL	790:2	792:36	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFSetField" , "%s: Cannot modify tag \"%s\" while writing" , tif -> tif_name , fip -> field_name )
CALLEE	790:2	790:2	9	TIFFErrorExt
LEAF_NODE	790:2	790:2	10	TIFFErrorExt
LEAF_NODE	790:14	790:14	9	(
ARGUMENT	790:15	790:15	9	tif -> tif_clientdata
FIELD	790:15	790:20	10	tif -> tif_clientdata
LEAF_NODE	790:15	790:15	11	tif
LEAF_NODE	790:18	790:18	11	->
LEAF_NODE	790:20	790:20	11	tif_clientdata
LEAF_NODE	790:34	790:34	9	,
ARGUMENT	790:36	790:36	9	"TIFFSetField"
FIELD	790:36	790:36	10	"TIFFSetField"
LEAF_NODE	790:36	790:36	11	"TIFFSetField"
LEAF_NODE	790:50	790:50	9	,
ARGUMENT	791:6	791:6	9	"%s: Cannot modify tag \"%s\" while writing"
FIELD	791:6	791:6	10	"%s: Cannot modify tag \"%s\" while writing"
LEAF_NODE	791:6	791:6	11	"%s: Cannot modify tag \"%s\" while writing"
LEAF_NODE	791:50	791:50	9	,
ARGUMENT	792:6	792:6	9	tif -> tif_name
FIELD	792:6	792:11	10	tif -> tif_name
LEAF_NODE	792:6	792:6	11	tif
LEAF_NODE	792:9	792:9	11	->
LEAF_NODE	792:11	792:11	11	tif_name
LEAF_NODE	792:19	792:19	9	,
ARGUMENT	792:21	792:21	9	fip -> field_name
FIELD	792:21	792:26	10	fip -> field_name
LEAF_NODE	792:21	792:21	11	fip
LEAF_NODE	792:24	792:24	11	->
LEAF_NODE	792:26	792:26	11	field_name
LEAF_NODE	792:36	792:36	9	)
LEAF_NODE	792:37	792:37	7	;
JUMP_STATEMENT	793:2	793:12	6	return ( 0 ) ;
KEYWORD	793:2	793:2	7	return
LEAF_NODE	793:2	793:2	8	return
DESTINATION	793:9	793:9	7	( 0 )
EXPR	793:9	793:11	8	( 0 )
LEAF_NODE	793:9	793:9	9	(
FIELD	793:10	793:10	9	0
LEAF_NODE	793:10	793:10	10	0
LEAF_NODE	793:11	793:11	9	)
LEAF_NODE	793:12	793:12	7	;
LEAF_NODE	794:1	794:1	5	}
JUMP_STATEMENT	795:1	795:11	3	return ( 1 ) ;
KEYWORD	795:1	795:1	4	return
LEAF_NODE	795:1	795:1	5	return
DESTINATION	795:8	795:8	4	( 1 )
EXPR	795:8	795:10	5	( 1 )
LEAF_NODE	795:8	795:8	6	(
FIELD	795:9	795:9	6	1
LEAF_NODE	795:9	795:9	7	1
LEAF_NODE	795:10	795:10	6	)
LEAF_NODE	795:11	795:11	4	;
LEAF_NODE	796:0	796:0	2	}
SIMPLE_DECL	808:1	808:11	1	va_list ap ;
VAR_DECL	808:1	808:9	2	va_list ap
TYPE	808:1	808:1	3	va_list
TYPE_NAME	808:1	808:1	4	va_list
LEAF_NODE	808:1	808:1	5	va_list
NAME	808:9	808:9	3	ap
LEAF_NODE	808:9	808:9	4	ap
LEAF_NODE	808:11	808:11	2	;
SIMPLE_DECL	809:1	809:11	1	int status ;
VAR_DECL	809:1	809:5	2	int status
TYPE	809:1	809:1	3	int
TYPE_NAME	809:1	809:1	4	int
LEAF_NODE	809:1	809:1	5	int
NAME	809:5	809:5	3	status
LEAF_NODE	809:5	809:5	4	status
LEAF_NODE	809:11	809:11	2	;
FUNCTION_DEF	820:0	856:0	1	
RETURN_TYPE	820:0	820:0	2	int
TYPE_NAME	820:0	820:0	3	int
LEAF_NODE	820:0	820:0	4	int
FUNCTION_NAME	821:0	821:0	2	TIFFUnsetField
LEAF_NODE	821:0	821:0	3	TIFFUnsetField
PARAMETER_LIST	821:14	821:36	2	( TIFF * tif , uint32 tag )
LEAF_NODE	821:14	821:14	3	(
PARAMETER_DECL	821:15	821:21	3	TIFF * tif
TYPE	821:15	821:19	4	TIFF *
TYPE_NAME	821:15	821:15	5	TIFF
LEAF_NODE	821:15	821:15	6	TIFF
POINTER	821:19	821:19	5	*
LEAF_NODE	821:19	821:19	6	*
NAME	821:21	821:21	4	tif
LEAF_NODE	821:21	821:21	5	tif
LEAF_NODE	821:24	821:24	3	,
PARAMETER_DECL	821:26	821:33	3	uint32 tag
TYPE	821:26	821:26	4	uint32
TYPE_NAME	821:26	821:26	5	uint32
LEAF_NODE	821:26	821:26	6	uint32
NAME	821:33	821:33	4	tag
LEAF_NODE	821:33	821:33	5	tag
LEAF_NODE	821:36	821:36	3	)
LEAF_NODE	822:0	822:0	2	{
STATEMENTS	823:4	855:4	2	
SIMPLE_DECL	823:4	823:54	3	const TIFFField * fip ; fip = TIFFFieldWithTag ( tif , tag ) ;
VAR_DECL	823:4	823:21	4	const TIFFField * fip ; fip = TIFFFieldWithTag ( tif , tag )
TYPE	823:4	823:20	5	const TIFFField *
TYPE_NAME	823:4	823:10	6	const TIFFField
LEAF_NODE	823:4	823:4	7	const
LEAF_NODE	823:10	823:10	7	TIFFField
POINTER	823:20	823:20	6	*
LEAF_NODE	823:20	823:20	7	*
NAME	823:21	823:21	5	fip
LEAF_NODE	823:21	823:21	6	fip
LEAF_NODE	0:0	0:0	5	;
INIT	823:21	823:21	5	fip = TIFFFieldWithTag ( tif , tag )
ASSIGN	823:21	823:28	6	fip = TIFFFieldWithTag ( tif , tag )
LVAL	823:21	823:21	7	fip
NAME	823:21	823:21	8	fip
LEAF_NODE	823:21	823:21	9	fip
ASSIGN_OP	823:25	823:25	7	=
LEAF_NODE	823:25	823:25	8	=
RVAL	823:28	823:28	7	TIFFFieldWithTag ( tif , tag )
FUNCTION_CALL	823:28	823:53	8	TIFFFieldWithTag ( tif , tag )
CALLEE	823:28	823:28	9	TIFFFieldWithTag
LEAF_NODE	823:28	823:28	10	TIFFFieldWithTag
LEAF_NODE	823:44	823:44	9	(
ARGUMENT	823:45	823:45	9	tif
FIELD	823:45	823:45	10	tif
LEAF_NODE	823:45	823:45	11	tif
LEAF_NODE	823:48	823:48	9	,
ARGUMENT	823:50	823:50	9	tag
FIELD	823:50	823:50	10	tag
LEAF_NODE	823:50	823:50	11	tag
LEAF_NODE	823:53	823:53	9	)
LEAF_NODE	823:54	823:54	4	;
SIMPLE_DECL	824:4	824:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	824:4	824:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	824:4	824:17	5	TIFFDirectory *
TYPE_NAME	824:4	824:4	6	TIFFDirectory
LEAF_NODE	824:4	824:4	7	TIFFDirectory
POINTER	824:17	824:17	6	*
LEAF_NODE	824:17	824:17	7	*
NAME	824:19	824:19	5	td
LEAF_NODE	824:19	824:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	824:19	824:19	5	td = & tif -> tif_dir
ASSIGN	824:19	824:24	6	td = & tif -> tif_dir
LVAL	824:19	824:19	7	td
NAME	824:19	824:19	8	td
LEAF_NODE	824:19	824:19	9	td
ASSIGN_OP	824:22	824:22	7	=
LEAF_NODE	824:22	824:22	8	=
RVAL	824:24	824:24	7	& tif -> tif_dir
UNARY_EXPR	824:24	824:25	8	& tif -> tif_dir
UNARY_OPERATOR	824:24	824:24	9	&
LEAF_NODE	824:24	824:24	10	&
FIELD	824:25	824:30	9	tif -> tif_dir
LEAF_NODE	824:25	824:25	10	tif
LEAF_NODE	824:28	824:28	10	->
LEAF_NODE	824:30	824:30	10	tif_dir
LEAF_NODE	824:37	824:37	4	;
SELECTION	826:4	827:8	3	
KEYWORD	826:4	826:4	4	if
LEAF_NODE	826:4	826:4	5	if
LEAF_NODE	826:6	826:6	4	(
CONDITION	826:8	826:8	4	! fip
EXPR	826:8	826:8	5	! fip
UNARY_EXPR	826:8	826:9	6	! fip
UNARY_OPERATOR	826:8	826:8	7	!
LEAF_NODE	826:8	826:8	8	!
FIELD	826:9	826:9	7	fip
LEAF_NODE	826:9	826:9	8	fip
LEAF_NODE	826:13	826:13	4	)
STATEMENTS	827:8	827:8	4	
JUMP_STATEMENT	827:8	827:16	5	return 0 ;
KEYWORD	827:8	827:8	6	return
LEAF_NODE	827:8	827:8	7	return
DESTINATION	827:15	827:15	6	0
EXPR	827:15	827:15	7	0
FIELD	827:15	827:15	8	0
LEAF_NODE	827:15	827:15	9	0
LEAF_NODE	827:16	827:16	6	;
SELECTION	829:4	830:8	3	
KEYWORD	829:4	829:4	4	if
LEAF_NODE	829:4	829:4	5	if
LEAF_NODE	829:6	829:6	4	(
CONDITION	829:8	829:8	4	fip -> field_bit != FIELD_CUSTOM
EXPR	829:8	829:26	5	fip -> field_bit != FIELD_CUSTOM
FIELD	829:8	829:13	6	fip -> field_bit
LEAF_NODE	829:8	829:8	7	fip
LEAF_NODE	829:11	829:11	7	->
LEAF_NODE	829:13	829:13	7	field_bit
EQ_OPERATOR	829:23	829:23	6	!=
LEAF_NODE	829:23	829:23	7	!=
FIELD	829:26	829:26	6	FIELD_CUSTOM
LEAF_NODE	829:26	829:26	7	FIELD_CUSTOM
LEAF_NODE	829:39	829:39	4	)
STATEMENTS	830:8	830:8	4	
EXPR_STATEMENT	830:8	830:44	5	TIFFClrFieldBit ( tif , fip -> field_bit ) ;
EXPR	830:8	830:8	6	TIFFClrFieldBit ( tif , fip -> field_bit )
FUNCTION_CALL	830:8	830:43	7	TIFFClrFieldBit ( tif , fip -> field_bit )
CALLEE	830:8	830:8	8	TIFFClrFieldBit
LEAF_NODE	830:8	830:8	9	TIFFClrFieldBit
LEAF_NODE	830:23	830:23	8	(
ARGUMENT	830:24	830:24	8	tif
FIELD	830:24	830:24	9	tif
LEAF_NODE	830:24	830:24	10	tif
LEAF_NODE	830:27	830:27	8	,
ARGUMENT	830:29	830:29	8	fip -> field_bit
FIELD	830:29	830:34	9	fip -> field_bit
LEAF_NODE	830:29	830:29	10	fip
LEAF_NODE	830:32	830:32	10	->
LEAF_NODE	830:34	830:34	10	field_bit
LEAF_NODE	830:43	830:43	8	)
LEAF_NODE	830:44	830:44	6	;
SELECTION	831:4	832:4	3	
KEYWORD	831:4	831:4	4	else
LEAF_NODE	831:4	831:4	5	else
STATEMENTS	832:4	851:4	4	
LEAF_NODE	832:4	832:4	5	{
STATEMENTS	833:8	843:8	5	
SIMPLE_DECL	833:8	833:31	6	TIFFTagValue * tv ; tv = NULL ;
VAR_DECL	833:8	833:22	7	TIFFTagValue * tv ; tv = NULL
TYPE	833:8	833:21	8	TIFFTagValue *
TYPE_NAME	833:8	833:8	9	TIFFTagValue
LEAF_NODE	833:8	833:8	10	TIFFTagValue
POINTER	833:21	833:21	9	*
LEAF_NODE	833:21	833:21	10	*
NAME	833:22	833:22	8	tv
LEAF_NODE	833:22	833:22	9	tv
LEAF_NODE	0:0	0:0	8	;
INIT	833:22	833:22	8	tv = NULL
ASSIGN	833:22	833:27	9	tv = NULL
LVAL	833:22	833:22	10	tv
NAME	833:22	833:22	11	tv
LEAF_NODE	833:22	833:22	12	tv
ASSIGN_OP	833:25	833:25	10	=
LEAF_NODE	833:25	833:25	11	=
RVAL	833:27	833:27	10	NULL
FIELD	833:27	833:27	11	NULL
LEAF_NODE	833:27	833:27	12	NULL
LEAF_NODE	833:31	833:31	7	;
SIMPLE_DECL	834:8	834:13	6	int i ;
VAR_DECL	834:8	834:12	7	int i
TYPE	834:8	834:8	8	int
TYPE_NAME	834:8	834:8	9	int
LEAF_NODE	834:8	834:8	10	int
NAME	834:12	834:12	8	i
LEAF_NODE	834:12	834:12	9	i
LEAF_NODE	834:13	834:13	7	;
ITERATION	836:8	836:54	6	
KEYWORD	836:8	836:8	7	for
LEAF_NODE	836:8	836:8	8	for
LEAF_NODE	836:12	836:12	7	(
FOR_INIT	836:13	836:18	7	i = 0 ;
EXPR	836:13	836:13	8	i = 0
ASSIGN	836:13	836:17	9	i = 0
LVAL	836:13	836:13	10	i
FIELD	836:13	836:13	11	i
LEAF_NODE	836:13	836:13	12	i
ASSIGN_OP	836:15	836:15	10	=
LEAF_NODE	836:15	836:15	11	=
RVAL	836:17	836:17	10	0
FIELD	836:17	836:17	11	0
LEAF_NODE	836:17	836:17	12	0
LEAF_NODE	836:18	836:18	8	;
CONDITION	836:20	836:20	7	i < td -> td_customValueCount
EXPR	836:20	836:24	8	i < td -> td_customValueCount
FIELD	836:20	836:20	9	i
LEAF_NODE	836:20	836:20	10	i
REL_OPERATOR	836:22	836:22	9	<
LEAF_NODE	836:22	836:22	10	<
FIELD	836:24	836:28	9	td -> td_customValueCount
LEAF_NODE	836:24	836:24	10	td
LEAF_NODE	836:26	836:26	10	->
LEAF_NODE	836:28	836:28	10	td_customValueCount
LEAF_NODE	836:47	836:47	7	;
FOR_EXPR	836:49	836:49	7	i ++
EXPR	836:49	836:49	8	i ++
FIELD	836:49	836:50	9	i ++
LEAF_NODE	836:49	836:49	10	i
LEAF_NODE	836:50	836:50	10	++
LEAF_NODE	836:52	836:52	7	)
STATEMENTS	836:54	841:8	7	
LEAF_NODE	836:54	836:54	8	{
STATEMENTS	838:12	839:12	8	
EXPR_STATEMENT	838:12	838:40	9	tv = td -> td_customValues + i ;
EXPR	838:12	838:12	10	tv = td -> td_customValues + i
ASSIGN	838:12	838:17	11	tv = td -> td_customValues + i
LVAL	838:12	838:12	12	tv
FIELD	838:12	838:12	13	tv
LEAF_NODE	838:12	838:12	14	tv
ASSIGN_OP	838:15	838:15	12	=
LEAF_NODE	838:15	838:15	13	=
RVAL	838:17	838:39	12	td -> td_customValues + i
FIELD	838:17	838:21	13	td -> td_customValues
LEAF_NODE	838:17	838:17	14	td
LEAF_NODE	838:19	838:19	14	->
LEAF_NODE	838:21	838:21	14	td_customValues
LEAF_NODE	838:37	838:37	13	+
FIELD	838:39	838:39	13	i
LEAF_NODE	838:39	838:39	14	i
LEAF_NODE	838:40	838:40	10	;
SELECTION	839:12	840:16	9	
KEYWORD	839:12	839:12	10	if
LEAF_NODE	839:12	839:12	11	if
LEAF_NODE	839:14	839:14	10	(
CONDITION	839:16	839:16	10	tv -> info -> field_tag == tag
EXPR	839:16	839:39	11	tv -> info -> field_tag == tag
FIELD	839:16	839:26	12	tv -> info -> field_tag
LEAF_NODE	839:16	839:16	13	tv
LEAF_NODE	839:18	839:18	13	->
LEAF_NODE	839:20	839:20	13	info
LEAF_NODE	839:24	839:24	13	->
LEAF_NODE	839:26	839:26	13	field_tag
EQ_OPERATOR	839:36	839:36	12	==
LEAF_NODE	839:36	839:36	13	==
FIELD	839:39	839:39	12	tag
LEAF_NODE	839:39	839:39	13	tag
LEAF_NODE	839:43	839:43	10	)
STATEMENTS	840:16	840:16	10	
JUMP_STATEMENT	840:16	840:21	11	break DESTINATION ;
KEYWORD	840:16	840:16	12	break
LEAF_NODE	840:16	840:16	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	840:21	840:21	12	;
LEAF_NODE	841:8	841:8	8	}
SELECTION	843:8	844:8	6	
KEYWORD	843:8	843:8	7	if
LEAF_NODE	843:8	843:8	8	if
LEAF_NODE	843:10	843:10	7	(
CONDITION	843:12	843:12	7	i < td -> td_customValueCount
EXPR	843:12	843:16	8	i < td -> td_customValueCount
FIELD	843:12	843:12	9	i
LEAF_NODE	843:12	843:12	10	i
REL_OPERATOR	843:14	843:14	9	<
LEAF_NODE	843:14	843:14	10	<
FIELD	843:16	843:20	9	td -> td_customValueCount
LEAF_NODE	843:16	843:16	10	td
LEAF_NODE	843:18	843:18	10	->
LEAF_NODE	843:20	843:20	10	td_customValueCount
LEAF_NODE	843:40	843:40	7	)
STATEMENTS	844:8	850:8	7	
LEAF_NODE	844:8	844:8	8	{
STATEMENTS	845:12	849:12	8	
EXPR_STATEMENT	845:12	845:32	9	_TIFFfree ( tv -> value ) ;
EXPR	845:12	845:12	10	_TIFFfree ( tv -> value )
FUNCTION_CALL	845:12	845:31	11	_TIFFfree ( tv -> value )
CALLEE	845:12	845:12	12	_TIFFfree
LEAF_NODE	845:12	845:12	13	_TIFFfree
LEAF_NODE	845:21	845:21	12	(
ARGUMENT	845:22	845:22	12	tv -> value
FIELD	845:22	845:26	13	tv -> value
LEAF_NODE	845:22	845:22	14	tv
LEAF_NODE	845:24	845:24	14	->
LEAF_NODE	845:26	845:26	14	value
LEAF_NODE	845:31	845:31	12	)
LEAF_NODE	845:32	845:32	10	;
ITERATION	846:12	846:55	9	
KEYWORD	846:12	846:12	10	for
LEAF_NODE	846:12	846:12	11	for
LEAF_NODE	846:15	846:15	10	(
FOR_INIT	846:17	846:17	10	;
LEAF_NODE	846:17	846:17	11	;
CONDITION	846:19	846:19	10	i < td -> td_customValueCount - 1
EXPR	846:19	846:47	11	i < td -> td_customValueCount - 1
FIELD	846:19	846:19	12	i
LEAF_NODE	846:19	846:19	13	i
REL_OPERATOR	846:21	846:21	12	<
LEAF_NODE	846:21	846:21	13	<
FIELD	846:23	846:27	12	td -> td_customValueCount
LEAF_NODE	846:23	846:23	13	td
LEAF_NODE	846:25	846:25	13	->
LEAF_NODE	846:27	846:27	13	td_customValueCount
LEAF_NODE	846:46	846:46	12	-
FIELD	846:47	846:47	12	1
LEAF_NODE	846:47	846:47	13	1
LEAF_NODE	846:48	846:48	10	;
FOR_EXPR	846:50	846:50	10	i ++
EXPR	846:50	846:50	11	i ++
FIELD	846:50	846:51	12	i ++
LEAF_NODE	846:50	846:50	13	i
LEAF_NODE	846:51	846:51	13	++
LEAF_NODE	846:53	846:53	10	)
STATEMENTS	846:55	848:12	10	
LEAF_NODE	846:55	846:55	11	{
STATEMENTS	847:16	847:16	11	
EXPR_STATEMENT	847:16	847:65	12	td -> td_customValues [ i ] = td -> td_customValues [ i + 1 ] ;
EXPR	847:16	847:16	13	td -> td_customValues [ i ] = td -> td_customValues [ i + 1 ]
ASSIGN	847:16	847:41	14	td -> td_customValues [ i ] = td -> td_customValues [ i + 1 ]
LVAL	847:16	847:16	15	td -> td_customValues [ i ]
FIELD	847:16	847:37	16	td -> td_customValues [ i ]
LEAF_NODE	847:16	847:16	17	td
LEAF_NODE	847:18	847:18	17	->
LEAF_NODE	847:20	847:20	17	td_customValues
LEAF_NODE	847:35	847:35	17	[
EXPR	847:36	847:36	17	i
FIELD	847:36	847:36	18	i
LEAF_NODE	847:36	847:36	19	i
LEAF_NODE	847:37	847:37	17	]
ASSIGN_OP	847:39	847:39	15	=
LEAF_NODE	847:39	847:39	16	=
RVAL	847:41	847:41	15	td -> td_customValues [ i + 1 ]
FIELD	847:41	847:64	16	td -> td_customValues [ i + 1 ]
LEAF_NODE	847:41	847:41	17	td
LEAF_NODE	847:43	847:43	17	->
LEAF_NODE	847:45	847:45	17	td_customValues
LEAF_NODE	847:60	847:60	17	[
EXPR	847:61	847:63	17	i + 1
FIELD	847:61	847:61	18	i
LEAF_NODE	847:61	847:61	19	i
LEAF_NODE	847:62	847:62	18	+
FIELD	847:63	847:63	18	1
LEAF_NODE	847:63	847:63	19	1
LEAF_NODE	847:64	847:64	17	]
LEAF_NODE	847:65	847:65	13	;
LEAF_NODE	848:12	848:12	11	}
EXPR_STATEMENT	849:12	849:37	9	td -> td_customValueCount -- ;
EXPR	849:12	849:12	10	td -> td_customValueCount --
FIELD	849:12	849:35	11	td -> td_customValueCount --
LEAF_NODE	849:12	849:12	12	td
LEAF_NODE	849:14	849:14	12	->
LEAF_NODE	849:16	849:16	12	td_customValueCount
LEAF_NODE	849:35	849:35	12	--
LEAF_NODE	849:37	849:37	10	;
LEAF_NODE	850:8	850:8	8	}
LEAF_NODE	851:4	851:4	5	}
EXPR_STATEMENT	853:4	853:38	3	tif -> tif_flags |= TIFF_DIRTYDIRECT ;
EXPR	853:4	853:4	4	tif -> tif_flags |= TIFF_DIRTYDIRECT
ASSIGN	853:4	853:22	5	tif -> tif_flags |= TIFF_DIRTYDIRECT
LVAL	853:4	853:4	6	tif -> tif_flags
FIELD	853:4	853:9	7	tif -> tif_flags
LEAF_NODE	853:4	853:4	8	tif
LEAF_NODE	853:7	853:7	8	->
LEAF_NODE	853:9	853:9	8	tif_flags
ASSIGN_OP	853:19	853:19	6	|=
LEAF_NODE	853:19	853:19	7	|=
RVAL	853:22	853:22	6	TIFF_DIRTYDIRECT
FIELD	853:22	853:22	7	TIFF_DIRTYDIRECT
LEAF_NODE	853:22	853:22	8	TIFF_DIRTYDIRECT
LEAF_NODE	853:38	853:38	4	;
JUMP_STATEMENT	855:4	855:14	3	return ( 1 ) ;
KEYWORD	855:4	855:4	4	return
LEAF_NODE	855:4	855:4	5	return
DESTINATION	855:11	855:11	4	( 1 )
EXPR	855:11	855:13	5	( 1 )
LEAF_NODE	855:11	855:11	6	(
FIELD	855:12	855:12	6	1
LEAF_NODE	855:12	855:12	7	1
LEAF_NODE	855:13	855:13	6	)
LEAF_NODE	855:14	855:14	4	;
LEAF_NODE	856:0	856:0	2	}
FUNCTION_DEF	864:0	869:0	1	
RETURN_TYPE	864:0	864:0	2	int
TYPE_NAME	864:0	864:0	3	int
LEAF_NODE	864:0	864:0	4	int
FUNCTION_NAME	865:0	865:0	2	TIFFVSetField
LEAF_NODE	865:0	865:0	3	TIFFVSetField
PARAMETER_LIST	865:13	865:47	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	865:13	865:13	3	(
PARAMETER_DECL	865:14	865:20	3	TIFF * tif
TYPE	865:14	865:18	4	TIFF *
TYPE_NAME	865:14	865:14	5	TIFF
LEAF_NODE	865:14	865:14	6	TIFF
POINTER	865:18	865:18	5	*
LEAF_NODE	865:18	865:18	6	*
NAME	865:20	865:20	4	tif
LEAF_NODE	865:20	865:20	5	tif
LEAF_NODE	865:23	865:23	3	,
PARAMETER_DECL	865:25	865:32	3	uint32 tag
TYPE	865:25	865:25	4	uint32
TYPE_NAME	865:25	865:25	5	uint32
LEAF_NODE	865:25	865:25	6	uint32
NAME	865:32	865:32	4	tag
LEAF_NODE	865:32	865:32	5	tag
LEAF_NODE	865:35	865:35	3	,
PARAMETER_DECL	865:37	865:45	3	va_list ap
TYPE	865:37	865:37	4	va_list
TYPE_NAME	865:37	865:37	5	va_list
LEAF_NODE	865:37	865:37	6	va_list
NAME	865:45	865:45	4	ap
LEAF_NODE	865:45	865:45	5	ap
LEAF_NODE	865:47	865:47	3	)
LEAF_NODE	866:0	866:0	2	{
STATEMENTS	867:1	867:1	2	
JUMP_STATEMENT	867:1	868:55	3	return OkToChangeTag ( tif , tag ) ? ( * tif -> tif_tagmethods . vsetfield ) ( tif , tag , ap ) : 0 ;
KEYWORD	867:1	867:1	4	return
LEAF_NODE	867:1	867:1	5	return
DESTINATION	867:8	867:8	4	OkToChangeTag ( tif , tag ) ? ( * tif -> tif_tagmethods . vsetfield ) ( tif , tag , ap ) : 0
EXPR	867:8	867:8	5	OkToChangeTag ( tif , tag ) ? ( * tif -> tif_tagmethods . vsetfield ) ( tif , tag , ap ) : 0
COND_EXPR	867:8	868:54	6	OkToChangeTag ( tif , tag ) ? ( * tif -> tif_tagmethods . vsetfield ) ( tif , tag , ap ) : 0
CONDITION	867:8	867:8	7	OkToChangeTag ( tif , tag )
FUNCTION_CALL	867:8	867:30	8	OkToChangeTag ( tif , tag )
CALLEE	867:8	867:8	9	OkToChangeTag
LEAF_NODE	867:8	867:8	10	OkToChangeTag
LEAF_NODE	867:21	867:21	9	(
ARGUMENT	867:22	867:22	9	tif
FIELD	867:22	867:22	10	tif
LEAF_NODE	867:22	867:22	11	tif
LEAF_NODE	867:25	867:25	9	,
ARGUMENT	867:27	867:27	9	tag
FIELD	867:27	867:27	10	tag
LEAF_NODE	867:27	867:27	11	tag
LEAF_NODE	867:30	867:30	9	)
LEAF_NODE	867:32	867:32	7	?
EXPR	868:5	868:5	7	( * tif -> tif_tagmethods . vsetfield ) ( tif , tag , ap )
FUNCTION_CALL	868:5	868:50	8	( * tif -> tif_tagmethods . vsetfield ) ( tif , tag , ap )
CALLEE	868:5	868:36	9	( * tif -> tif_tagmethods . vsetfield )
LEAF_NODE	868:5	868:5	10	(
UNARY_EXPR	868:6	868:7	10	* tif -> tif_tagmethods . vsetfield
UNARY_OPERATOR	868:6	868:6	11	*
LEAF_NODE	868:6	868:6	12	*
FIELD	868:7	868:27	11	tif -> tif_tagmethods . vsetfield
LEAF_NODE	868:7	868:7	12	tif
LEAF_NODE	868:10	868:10	12	->
LEAF_NODE	868:12	868:12	12	tif_tagmethods
LEAF_NODE	868:26	868:26	12	.
LEAF_NODE	868:27	868:27	12	vsetfield
LEAF_NODE	868:36	868:36	10	)
LEAF_NODE	868:37	868:37	9	(
ARGUMENT	868:38	868:38	9	tif
FIELD	868:38	868:38	10	tif
LEAF_NODE	868:38	868:38	11	tif
LEAF_NODE	868:41	868:41	9	,
ARGUMENT	868:43	868:43	9	tag
FIELD	868:43	868:43	10	tag
LEAF_NODE	868:43	868:43	11	tag
LEAF_NODE	868:46	868:46	9	,
ARGUMENT	868:48	868:48	9	ap
FIELD	868:48	868:48	10	ap
LEAF_NODE	868:48	868:48	11	ap
LEAF_NODE	868:50	868:50	9	)
LEAF_NODE	868:52	868:52	7	:
FIELD	868:54	868:54	7	0
LEAF_NODE	868:54	868:54	8	0
LEAF_NODE	868:55	868:55	4	;
LEAF_NODE	869:0	869:0	2	}
FUNCTION_DEF	871:0	1224:0	1	
RETURN_TYPE	871:0	871:7	2	static int
LEAF_NODE	871:0	871:0	3	static
TYPE_NAME	871:7	871:7	3	int
LEAF_NODE	871:7	871:7	4	int
FUNCTION_NAME	872:0	872:0	2	_TIFFVGetField
LEAF_NODE	872:0	872:0	3	_TIFFVGetField
PARAMETER_LIST	872:14	872:48	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	872:14	872:14	3	(
PARAMETER_DECL	872:15	872:21	3	TIFF * tif
TYPE	872:15	872:19	4	TIFF *
TYPE_NAME	872:15	872:15	5	TIFF
LEAF_NODE	872:15	872:15	6	TIFF
POINTER	872:19	872:19	5	*
LEAF_NODE	872:19	872:19	6	*
NAME	872:21	872:21	4	tif
LEAF_NODE	872:21	872:21	5	tif
LEAF_NODE	872:24	872:24	3	,
PARAMETER_DECL	872:26	872:33	3	uint32 tag
TYPE	872:26	872:26	4	uint32
TYPE_NAME	872:26	872:26	5	uint32
LEAF_NODE	872:26	872:26	6	uint32
NAME	872:33	872:33	4	tag
LEAF_NODE	872:33	872:33	5	tag
LEAF_NODE	872:36	872:36	3	,
PARAMETER_DECL	872:38	872:46	3	va_list ap
TYPE	872:38	872:38	4	va_list
TYPE_NAME	872:38	872:38	5	va_list
LEAF_NODE	872:38	872:38	6	va_list
NAME	872:46	872:46	4	ap
LEAF_NODE	872:46	872:46	5	ap
LEAF_NODE	872:48	872:48	3	)
LEAF_NODE	873:0	873:0	2	{
STATEMENTS	874:1	1223:16	2	
SIMPLE_DECL	874:1	874:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	874:1	874:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	874:1	874:14	5	TIFFDirectory *
TYPE_NAME	874:1	874:1	6	TIFFDirectory
LEAF_NODE	874:1	874:1	7	TIFFDirectory
POINTER	874:14	874:14	6	*
LEAF_NODE	874:14	874:14	7	*
NAME	874:16	874:16	5	td
LEAF_NODE	874:16	874:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	874:16	874:16	5	td = & tif -> tif_dir
ASSIGN	874:16	874:21	6	td = & tif -> tif_dir
LVAL	874:16	874:16	7	td
NAME	874:16	874:16	8	td
LEAF_NODE	874:16	874:16	9	td
ASSIGN_OP	874:19	874:19	7	=
LEAF_NODE	874:19	874:19	8	=
RVAL	874:21	874:21	7	& tif -> tif_dir
UNARY_EXPR	874:21	874:22	8	& tif -> tif_dir
UNARY_OPERATOR	874:21	874:21	9	&
LEAF_NODE	874:21	874:21	10	&
FIELD	874:22	874:27	9	tif -> tif_dir
LEAF_NODE	874:22	874:22	10	tif
LEAF_NODE	874:25	874:25	10	->
LEAF_NODE	874:27	874:27	10	tif_dir
LEAF_NODE	874:34	874:34	4	;
SIMPLE_DECL	875:1	875:16	3	int ret_val ; ret_val = 1 ;
VAR_DECL	875:1	875:5	4	int ret_val ; ret_val = 1
TYPE	875:1	875:1	5	int
TYPE_NAME	875:1	875:1	6	int
LEAF_NODE	875:1	875:1	7	int
NAME	875:5	875:5	5	ret_val
LEAF_NODE	875:5	875:5	6	ret_val
LEAF_NODE	0:0	0:0	5	;
INIT	875:5	875:5	5	ret_val = 1
ASSIGN	875:5	875:15	6	ret_val = 1
LVAL	875:5	875:5	7	ret_val
NAME	875:5	875:5	8	ret_val
LEAF_NODE	875:5	875:5	9	ret_val
ASSIGN_OP	875:13	875:13	7	=
LEAF_NODE	875:13	875:13	8	=
RVAL	875:15	875:15	7	1
FIELD	875:15	875:15	8	1
LEAF_NODE	875:15	875:15	9	1
LEAF_NODE	875:16	875:16	4	;
SIMPLE_DECL	876:1	876:26	3	uint32 standard_tag ; standard_tag = tag ;
VAR_DECL	876:1	876:8	4	uint32 standard_tag ; standard_tag = tag
TYPE	876:1	876:1	5	uint32
TYPE_NAME	876:1	876:1	6	uint32
LEAF_NODE	876:1	876:1	7	uint32
NAME	876:8	876:8	5	standard_tag
LEAF_NODE	876:8	876:8	6	standard_tag
LEAF_NODE	0:0	0:0	5	;
INIT	876:8	876:8	5	standard_tag = tag
ASSIGN	876:8	876:23	6	standard_tag = tag
LVAL	876:8	876:8	7	standard_tag
NAME	876:8	876:8	8	standard_tag
LEAF_NODE	876:8	876:8	9	standard_tag
ASSIGN_OP	876:21	876:21	7	=
LEAF_NODE	876:21	876:21	8	=
RVAL	876:23	876:23	7	tag
FIELD	876:23	876:23	8	tag
LEAF_NODE	876:23	876:23	9	tag
LEAF_NODE	876:26	876:26	4	;
SIMPLE_DECL	877:1	877:57	3	const TIFFField * fip ; fip = TIFFFindField ( tif , tag , TIFF_ANY ) ;
VAR_DECL	877:1	877:18	4	const TIFFField * fip ; fip = TIFFFindField ( tif , tag , TIFF_ANY )
TYPE	877:1	877:16	5	const TIFFField *
TYPE_NAME	877:1	877:7	6	const TIFFField
LEAF_NODE	877:1	877:1	7	const
LEAF_NODE	877:7	877:7	7	TIFFField
POINTER	877:16	877:16	6	*
LEAF_NODE	877:16	877:16	7	*
NAME	877:18	877:18	5	fip
LEAF_NODE	877:18	877:18	6	fip
LEAF_NODE	0:0	0:0	5	;
INIT	877:18	877:18	5	fip = TIFFFindField ( tif , tag , TIFF_ANY )
ASSIGN	877:18	877:24	6	fip = TIFFFindField ( tif , tag , TIFF_ANY )
LVAL	877:18	877:18	7	fip
NAME	877:18	877:18	8	fip
LEAF_NODE	877:18	877:18	9	fip
ASSIGN_OP	877:22	877:22	7	=
LEAF_NODE	877:22	877:22	8	=
RVAL	877:24	877:24	7	TIFFFindField ( tif , tag , TIFF_ANY )
FUNCTION_CALL	877:24	877:56	8	TIFFFindField ( tif , tag , TIFF_ANY )
CALLEE	877:24	877:24	9	TIFFFindField
LEAF_NODE	877:24	877:24	10	TIFFFindField
LEAF_NODE	877:37	877:37	9	(
ARGUMENT	877:38	877:38	9	tif
FIELD	877:38	877:38	10	tif
LEAF_NODE	877:38	877:38	11	tif
LEAF_NODE	877:41	877:41	9	,
ARGUMENT	877:43	877:43	9	tag
FIELD	877:43	877:43	10	tag
LEAF_NODE	877:43	877:43	11	tag
LEAF_NODE	877:46	877:46	9	,
ARGUMENT	877:48	877:48	9	TIFF_ANY
FIELD	877:48	877:48	10	TIFF_ANY
LEAF_NODE	877:48	877:48	11	TIFF_ANY
LEAF_NODE	877:56	877:56	9	)
LEAF_NODE	877:57	877:57	4	;
SELECTION	878:1	879:5	3	
KEYWORD	878:1	878:1	4	if
LEAF_NODE	878:1	878:1	5	if
LEAF_NODE	878:3	878:3	4	(
CONDITION	878:5	878:5	4	fip == NULL
EXPR	878:5	878:12	5	fip == NULL
FIELD	878:5	878:5	6	fip
LEAF_NODE	878:5	878:5	7	fip
EQ_OPERATOR	878:9	878:9	6	==
LEAF_NODE	878:9	878:9	7	==
FIELD	878:12	878:12	6	NULL
LEAF_NODE	878:12	878:12	7	NULL
LEAF_NODE	878:17	878:17	4	)
STATEMENTS	879:5	879:5	4	
JUMP_STATEMENT	879:5	879:13	5	return 0 ;
KEYWORD	879:5	879:5	6	return
LEAF_NODE	879:5	879:5	7	return
DESTINATION	879:12	879:12	6	0
EXPR	879:12	879:12	7	0
FIELD	879:12	879:12	8	0
LEAF_NODE	879:12	879:12	9	0
LEAF_NODE	879:13	879:13	6	;
SELECTION	887:1	887:37	3	
KEYWORD	887:1	887:1	4	if
LEAF_NODE	887:1	887:1	5	if
LEAF_NODE	887:4	887:4	4	(
CONDITION	887:5	887:5	4	fip -> field_bit == FIELD_CUSTOM
EXPR	887:5	887:23	5	fip -> field_bit == FIELD_CUSTOM
FIELD	887:5	887:10	6	fip -> field_bit
LEAF_NODE	887:5	887:5	7	fip
LEAF_NODE	887:8	887:8	7	->
LEAF_NODE	887:10	887:10	7	field_bit
EQ_OPERATOR	887:20	887:20	6	==
LEAF_NODE	887:20	887:20	7	==
FIELD	887:23	887:23	6	FIELD_CUSTOM
LEAF_NODE	887:23	887:23	7	FIELD_CUSTOM
LEAF_NODE	887:35	887:35	4	)
STATEMENTS	887:37	889:1	4	
LEAF_NODE	887:37	887:37	5	{
STATEMENTS	888:2	888:2	5	
EXPR_STATEMENT	888:2	888:18	6	standard_tag = 0 ;
EXPR	888:2	888:2	7	standard_tag = 0
ASSIGN	888:2	888:17	8	standard_tag = 0
LVAL	888:2	888:2	9	standard_tag
FIELD	888:2	888:2	10	standard_tag
LEAF_NODE	888:2	888:2	11	standard_tag
ASSIGN_OP	888:15	888:15	9	=
LEAF_NODE	888:15	888:15	10	=
RVAL	888:17	888:17	9	0
FIELD	888:17	888:17	10	0
LEAF_NODE	888:17	888:17	11	0
LEAF_NODE	888:18	888:18	7	;
LEAF_NODE	889:1	889:1	5	}
SELECTION	891:8	892:8	3	
KEYWORD	891:8	891:8	4	if
LEAF_NODE	891:8	891:8	5	if
LEAF_NODE	891:10	891:10	4	(
CONDITION	891:12	891:12	4	standard_tag == TIFFTAG_NUMBEROFINKS
EXPR	891:12	891:28	5	standard_tag == TIFFTAG_NUMBEROFINKS
FIELD	891:12	891:12	6	standard_tag
LEAF_NODE	891:12	891:12	7	standard_tag
EQ_OPERATOR	891:25	891:25	6	==
LEAF_NODE	891:25	891:25	7	==
FIELD	891:28	891:28	6	TIFFTAG_NUMBEROFINKS
LEAF_NODE	891:28	891:28	7	TIFFTAG_NUMBEROFINKS
LEAF_NODE	891:49	891:49	4	)
STATEMENTS	892:8	917:8	4	
LEAF_NODE	892:8	892:8	5	{
STATEMENTS	893:12	916:12	5	
SIMPLE_DECL	893:12	893:17	6	int i ;
VAR_DECL	893:12	893:16	7	int i
TYPE	893:12	893:12	8	int
TYPE_NAME	893:12	893:12	9	int
LEAF_NODE	893:12	893:12	10	int
NAME	893:16	893:16	8	i
LEAF_NODE	893:16	893:16	9	i
LEAF_NODE	893:17	893:17	7	;
ITERATION	894:12	894:58	6	
KEYWORD	894:12	894:12	7	for
LEAF_NODE	894:12	894:12	8	for
LEAF_NODE	894:16	894:16	7	(
FOR_INIT	894:17	894:22	7	i = 0 ;
EXPR	894:17	894:17	8	i = 0
ASSIGN	894:17	894:21	9	i = 0
LVAL	894:17	894:17	10	i
FIELD	894:17	894:17	11	i
LEAF_NODE	894:17	894:17	12	i
ASSIGN_OP	894:19	894:19	10	=
LEAF_NODE	894:19	894:19	11	=
RVAL	894:21	894:21	10	0
FIELD	894:21	894:21	11	0
LEAF_NODE	894:21	894:21	12	0
LEAF_NODE	894:22	894:22	8	;
CONDITION	894:24	894:24	7	i < td -> td_customValueCount
EXPR	894:24	894:28	8	i < td -> td_customValueCount
FIELD	894:24	894:24	9	i
LEAF_NODE	894:24	894:24	10	i
REL_OPERATOR	894:26	894:26	9	<
LEAF_NODE	894:26	894:26	10	<
FIELD	894:28	894:32	9	td -> td_customValueCount
LEAF_NODE	894:28	894:28	10	td
LEAF_NODE	894:30	894:30	10	->
LEAF_NODE	894:32	894:32	10	td_customValueCount
LEAF_NODE	894:51	894:51	7	;
FOR_EXPR	894:53	894:53	7	i ++
EXPR	894:53	894:53	8	i ++
FIELD	894:53	894:54	9	i ++
LEAF_NODE	894:53	894:53	10	i
LEAF_NODE	894:54	894:54	10	++
LEAF_NODE	894:56	894:56	7	)
STATEMENTS	894:58	915:12	7	
LEAF_NODE	894:58	894:58	8	{
STATEMENTS	895:16	914:16	8	
SIMPLE_DECL	895:16	895:26	9	uint16 val ;
VAR_DECL	895:16	895:23	10	uint16 val
TYPE	895:16	895:16	11	uint16
TYPE_NAME	895:16	895:16	12	uint16
LEAF_NODE	895:16	895:16	13	uint16
NAME	895:23	895:23	11	val
LEAF_NODE	895:23	895:23	12	val
LEAF_NODE	895:26	895:26	10	;
SIMPLE_DECL	896:16	896:58	9	TIFFTagValue * tv ; tv = td -> td_customValues + i ;
VAR_DECL	896:16	896:30	10	TIFFTagValue * tv ; tv = td -> td_customValues + i
TYPE	896:16	896:29	11	TIFFTagValue *
TYPE_NAME	896:16	896:16	12	TIFFTagValue
LEAF_NODE	896:16	896:16	13	TIFFTagValue
POINTER	896:29	896:29	12	*
LEAF_NODE	896:29	896:29	13	*
NAME	896:30	896:30	11	tv
LEAF_NODE	896:30	896:30	12	tv
LEAF_NODE	0:0	0:0	11	;
INIT	896:30	896:30	11	tv = td -> td_customValues + i
ASSIGN	896:30	896:35	12	tv = td -> td_customValues + i
LVAL	896:30	896:30	13	tv
NAME	896:30	896:30	14	tv
LEAF_NODE	896:30	896:30	15	tv
ASSIGN_OP	896:33	896:33	13	=
LEAF_NODE	896:33	896:33	14	=
RVAL	896:35	896:57	13	td -> td_customValues + i
FIELD	896:35	896:39	14	td -> td_customValues
LEAF_NODE	896:35	896:35	15	td
LEAF_NODE	896:37	896:37	15	->
LEAF_NODE	896:39	896:39	15	td_customValues
LEAF_NODE	896:55	896:55	14	+
FIELD	896:57	896:57	14	i
LEAF_NODE	896:57	896:57	15	i
LEAF_NODE	896:58	896:58	10	;
SELECTION	897:16	898:20	9	
KEYWORD	897:16	897:16	10	if
LEAF_NODE	897:16	897:16	11	if
LEAF_NODE	897:19	897:19	10	(
CONDITION	897:20	897:20	10	tv -> info -> field_tag != standard_tag
EXPR	897:20	897:43	11	tv -> info -> field_tag != standard_tag
FIELD	897:20	897:30	12	tv -> info -> field_tag
LEAF_NODE	897:20	897:20	13	tv
LEAF_NODE	897:22	897:22	13	->
LEAF_NODE	897:24	897:24	13	info
LEAF_NODE	897:28	897:28	13	->
LEAF_NODE	897:30	897:30	13	field_tag
EQ_OPERATOR	897:40	897:40	12	!=
LEAF_NODE	897:40	897:40	13	!=
FIELD	897:43	897:43	12	standard_tag
LEAF_NODE	897:43	897:43	13	standard_tag
LEAF_NODE	897:55	897:55	10	)
STATEMENTS	898:20	898:20	10	
JUMP_STATEMENT	898:20	898:28	11	continue DESTINATION ;
KEYWORD	898:20	898:20	12	continue
LEAF_NODE	898:20	898:20	13	continue
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	898:28	898:28	12	;
SELECTION	899:16	900:20	9	
KEYWORD	899:16	899:16	10	if
LEAF_NODE	899:16	899:16	11	if
LEAF_NODE	899:18	899:18	10	(
CONDITION	899:20	899:20	10	tv -> value == NULL
EXPR	899:20	899:33	11	tv -> value == NULL
FIELD	899:20	899:24	12	tv -> value
LEAF_NODE	899:20	899:20	13	tv
LEAF_NODE	899:22	899:22	13	->
LEAF_NODE	899:24	899:24	13	value
EQ_OPERATOR	899:30	899:30	12	==
LEAF_NODE	899:30	899:30	13	==
FIELD	899:33	899:33	12	NULL
LEAF_NODE	899:33	899:33	13	NULL
LEAF_NODE	899:38	899:38	10	)
STATEMENTS	900:20	900:20	10	
JUMP_STATEMENT	900:20	900:28	11	return 0 ;
KEYWORD	900:20	900:20	12	return
LEAF_NODE	900:20	900:20	13	return
DESTINATION	900:27	900:27	12	0
EXPR	900:27	900:27	13	0
FIELD	900:27	900:27	14	0
LEAF_NODE	900:27	900:27	15	0
LEAF_NODE	900:28	900:28	12	;
LEAF_NODE	901:16	901:16	9	val
LEAF_NODE	901:20	901:20	9	=
LEAF_NODE	901:22	901:22	9	*
EXPR_STATEMENT	901:23	901:42	9	( uint16 * ) tv -> value ;
EXPR	901:23	901:33	10	( uint16 * ) tv -> value
LEAF_NODE	901:23	901:23	11	(
TYPE_NAME	901:24	901:24	11	uint16
LEAF_NODE	901:24	901:24	12	uint16
LEAF_NODE	901:31	901:31	11	*
LEAF_NODE	901:32	901:32	11	)
FIELD	901:33	901:37	11	tv -> value
LEAF_NODE	901:33	901:33	12	tv
LEAF_NODE	901:35	901:35	12	->
LEAF_NODE	901:37	901:37	12	value
LEAF_NODE	901:42	901:42	10	;
SELECTION	906:16	907:16	9	
KEYWORD	906:16	906:16	10	if
LEAF_NODE	906:16	906:16	11	if
LEAF_NODE	906:18	906:18	10	(
CONDITION	906:20	906:20	10	val > td -> td_samplesperpixel
EXPR	906:20	906:26	11	val > td -> td_samplesperpixel
FIELD	906:20	906:20	12	val
LEAF_NODE	906:20	906:20	13	val
REL_OPERATOR	906:24	906:24	12	>
LEAF_NODE	906:24	906:24	13	>
FIELD	906:26	906:30	12	td -> td_samplesperpixel
LEAF_NODE	906:26	906:26	13	td
LEAF_NODE	906:28	906:28	13	->
LEAF_NODE	906:30	906:30	13	td_samplesperpixel
LEAF_NODE	906:49	906:49	10	)
STATEMENTS	907:16	912:16	10	
LEAF_NODE	907:16	907:16	11	{
STATEMENTS	908:20	911:20	11	
EXPR_STATEMENT	908:20	910:63	12	TIFFWarningExt ( tif -> tif_clientdata , "_TIFFVGetField" , "Truncating NumberOfInks from %u to %u" , val , td -> td_samplesperpixel ) ;
EXPR	908:20	908:20	13	TIFFWarningExt ( tif -> tif_clientdata , "_TIFFVGetField" , "Truncating NumberOfInks from %u to %u" , val , td -> td_samplesperpixel )
FUNCTION_CALL	908:20	910:62	14	TIFFWarningExt ( tif -> tif_clientdata , "_TIFFVGetField" , "Truncating NumberOfInks from %u to %u" , val , td -> td_samplesperpixel )
CALLEE	908:20	908:20	15	TIFFWarningExt
LEAF_NODE	908:20	908:20	16	TIFFWarningExt
LEAF_NODE	908:34	908:34	15	(
ARGUMENT	908:35	908:35	15	tif -> tif_clientdata
FIELD	908:35	908:40	16	tif -> tif_clientdata
LEAF_NODE	908:35	908:35	17	tif
LEAF_NODE	908:38	908:38	17	->
LEAF_NODE	908:40	908:40	17	tif_clientdata
LEAF_NODE	908:54	908:54	15	,
ARGUMENT	908:55	908:55	15	"_TIFFVGetField"
FIELD	908:55	908:55	16	"_TIFFVGetField"
LEAF_NODE	908:55	908:55	17	"_TIFFVGetField"
LEAF_NODE	908:71	908:71	15	,
ARGUMENT	909:35	909:35	15	"Truncating NumberOfInks from %u to %u"
FIELD	909:35	909:35	16	"Truncating NumberOfInks from %u to %u"
LEAF_NODE	909:35	909:35	17	"Truncating NumberOfInks from %u to %u"
LEAF_NODE	909:74	909:74	15	,
ARGUMENT	910:35	910:35	15	val
FIELD	910:35	910:35	16	val
LEAF_NODE	910:35	910:35	17	val
LEAF_NODE	910:38	910:38	15	,
ARGUMENT	910:40	910:40	15	td -> td_samplesperpixel
FIELD	910:40	910:44	16	td -> td_samplesperpixel
LEAF_NODE	910:40	910:40	17	td
LEAF_NODE	910:42	910:42	17	->
LEAF_NODE	910:44	910:44	17	td_samplesperpixel
LEAF_NODE	910:62	910:62	15	)
LEAF_NODE	910:63	910:63	13	;
EXPR_STATEMENT	911:20	911:48	12	val = td -> td_samplesperpixel ;
EXPR	911:20	911:20	13	val = td -> td_samplesperpixel
ASSIGN	911:20	911:26	14	val = td -> td_samplesperpixel
LVAL	911:20	911:20	15	val
FIELD	911:20	911:20	16	val
LEAF_NODE	911:20	911:20	17	val
ASSIGN_OP	911:24	911:24	15	=
LEAF_NODE	911:24	911:24	16	=
RVAL	911:26	911:26	15	td -> td_samplesperpixel
FIELD	911:26	911:30	16	td -> td_samplesperpixel
LEAF_NODE	911:26	911:26	17	td
LEAF_NODE	911:28	911:28	17	->
LEAF_NODE	911:30	911:30	17	td_samplesperpixel
LEAF_NODE	911:48	911:48	13	;
LEAF_NODE	912:16	912:16	11	}
LEAF_NODE	913:16	913:16	9	*
LEAF_NODE	913:17	913:17	9	va_arg
LEAF_NODE	913:23	913:23	9	(
LEAF_NODE	913:24	913:24	9	ap
LEAF_NODE	913:26	913:26	9	,
LEAF_NODE	913:28	913:28	9	uint16
LEAF_NODE	913:34	913:34	9	*
LEAF_NODE	913:35	913:35	9	)
LEAF_NODE	913:37	913:37	9	=
EXPR_STATEMENT	913:39	913:42	9	val ;
EXPR	913:39	913:39	10	val
FIELD	913:39	913:39	11	val
LEAF_NODE	913:39	913:39	12	val
LEAF_NODE	913:42	913:42	10	;
JUMP_STATEMENT	914:16	914:24	9	return 1 ;
KEYWORD	914:16	914:16	10	return
LEAF_NODE	914:16	914:16	11	return
DESTINATION	914:23	914:23	10	1
EXPR	914:23	914:23	11	1
FIELD	914:23	914:23	12	1
LEAF_NODE	914:23	914:23	13	1
LEAF_NODE	914:24	914:24	10	;
LEAF_NODE	915:12	915:12	8	}
JUMP_STATEMENT	916:12	916:20	6	return 0 ;
KEYWORD	916:12	916:12	7	return
LEAF_NODE	916:12	916:12	8	return
DESTINATION	916:19	916:19	7	0
EXPR	916:19	916:19	8	0
FIELD	916:19	916:19	9	0
LEAF_NODE	916:19	916:19	10	0
LEAF_NODE	916:20	916:20	7	;
LEAF_NODE	917:8	917:8	5	}
SELECTION	919:1	919:23	3	
KEYWORD	919:1	919:1	4	switch
LEAF_NODE	919:1	919:1	5	switch
LEAF_NODE	919:8	919:8	4	(
CONDITION	919:9	919:9	4	standard_tag
EXPR	919:9	919:9	5	standard_tag
FIELD	919:9	919:9	6	standard_tag
LEAF_NODE	919:9	919:9	7	standard_tag
LEAF_NODE	919:21	919:21	4	)
STATEMENTS	919:23	1222:1	4	
LEAF_NODE	919:23	919:23	5	{
STATEMENTS	920:2	1221:3	5	
LABEL	920:2	920:26	6	case TIFFTAG_SUBFILETYPE :
LEAF_NODE	920:2	920:2	7	case
LEAF_NODE	920:7	920:7	7	TIFFTAG_SUBFILETYPE
LEAF_NODE	920:26	920:26	7	:
LEAF_NODE	921:3	921:3	6	*
LEAF_NODE	921:4	921:4	6	va_arg
LEAF_NODE	921:10	921:10	6	(
LEAF_NODE	921:11	921:11	6	ap
LEAF_NODE	921:13	921:13	6	,
LEAF_NODE	921:15	921:15	6	uint32
LEAF_NODE	921:21	921:21	6	*
LEAF_NODE	921:22	921:22	6	)
LEAF_NODE	921:24	921:24	6	=
EXPR_STATEMENT	921:26	921:44	6	td -> td_subfiletype ;
EXPR	921:26	921:26	7	td -> td_subfiletype
FIELD	921:26	921:30	8	td -> td_subfiletype
LEAF_NODE	921:26	921:26	9	td
LEAF_NODE	921:28	921:28	9	->
LEAF_NODE	921:30	921:30	9	td_subfiletype
LEAF_NODE	921:44	921:44	7	;
JUMP_STATEMENT	922:3	922:8	6	break DESTINATION ;
KEYWORD	922:3	922:3	7	break
LEAF_NODE	922:3	922:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	922:8	922:8	7	;
LABEL	923:2	923:25	6	case TIFFTAG_IMAGEWIDTH :
LEAF_NODE	923:2	923:2	7	case
LEAF_NODE	923:7	923:7	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	923:25	923:25	7	:
LEAF_NODE	924:3	924:3	6	*
LEAF_NODE	924:4	924:4	6	va_arg
LEAF_NODE	924:10	924:10	6	(
LEAF_NODE	924:11	924:11	6	ap
LEAF_NODE	924:13	924:13	6	,
LEAF_NODE	924:15	924:15	6	uint32
LEAF_NODE	924:21	924:21	6	*
LEAF_NODE	924:22	924:22	6	)
LEAF_NODE	924:24	924:24	6	=
EXPR_STATEMENT	924:26	924:43	6	td -> td_imagewidth ;
EXPR	924:26	924:26	7	td -> td_imagewidth
FIELD	924:26	924:30	8	td -> td_imagewidth
LEAF_NODE	924:26	924:26	9	td
LEAF_NODE	924:28	924:28	9	->
LEAF_NODE	924:30	924:30	9	td_imagewidth
LEAF_NODE	924:43	924:43	7	;
JUMP_STATEMENT	925:3	925:8	6	break DESTINATION ;
KEYWORD	925:3	925:3	7	break
LEAF_NODE	925:3	925:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	925:8	925:8	7	;
LABEL	926:2	926:26	6	case TIFFTAG_IMAGELENGTH :
LEAF_NODE	926:2	926:2	7	case
LEAF_NODE	926:7	926:7	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	926:26	926:26	7	:
LEAF_NODE	927:3	927:3	6	*
LEAF_NODE	927:4	927:4	6	va_arg
LEAF_NODE	927:10	927:10	6	(
LEAF_NODE	927:11	927:11	6	ap
LEAF_NODE	927:13	927:13	6	,
LEAF_NODE	927:15	927:15	6	uint32
LEAF_NODE	927:21	927:21	6	*
LEAF_NODE	927:22	927:22	6	)
LEAF_NODE	927:24	927:24	6	=
EXPR_STATEMENT	927:26	927:44	6	td -> td_imagelength ;
EXPR	927:26	927:26	7	td -> td_imagelength
FIELD	927:26	927:30	8	td -> td_imagelength
LEAF_NODE	927:26	927:26	9	td
LEAF_NODE	927:28	927:28	9	->
LEAF_NODE	927:30	927:30	9	td_imagelength
LEAF_NODE	927:44	927:44	7	;
JUMP_STATEMENT	928:3	928:8	6	break DESTINATION ;
KEYWORD	928:3	928:3	7	break
LEAF_NODE	928:3	928:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	928:8	928:8	7	;
LABEL	929:2	929:28	6	case TIFFTAG_BITSPERSAMPLE :
LEAF_NODE	929:2	929:2	7	case
LEAF_NODE	929:7	929:7	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	929:28	929:28	7	:
LEAF_NODE	930:3	930:3	6	*
LEAF_NODE	930:4	930:4	6	va_arg
LEAF_NODE	930:10	930:10	6	(
LEAF_NODE	930:11	930:11	6	ap
LEAF_NODE	930:13	930:13	6	,
LEAF_NODE	930:15	930:15	6	uint16
LEAF_NODE	930:21	930:21	6	*
LEAF_NODE	930:22	930:22	6	)
LEAF_NODE	930:24	930:24	6	=
EXPR_STATEMENT	930:26	930:46	6	td -> td_bitspersample ;
EXPR	930:26	930:26	7	td -> td_bitspersample
FIELD	930:26	930:30	8	td -> td_bitspersample
LEAF_NODE	930:26	930:26	9	td
LEAF_NODE	930:28	930:28	9	->
LEAF_NODE	930:30	930:30	9	td_bitspersample
LEAF_NODE	930:46	930:46	7	;
JUMP_STATEMENT	931:3	931:8	6	break DESTINATION ;
KEYWORD	931:3	931:3	7	break
LEAF_NODE	931:3	931:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	931:8	931:8	7	;
LABEL	932:2	932:26	6	case TIFFTAG_COMPRESSION :
LEAF_NODE	932:2	932:2	7	case
LEAF_NODE	932:7	932:7	7	TIFFTAG_COMPRESSION
LEAF_NODE	932:26	932:26	7	:
LEAF_NODE	933:3	933:3	6	*
LEAF_NODE	933:4	933:4	6	va_arg
LEAF_NODE	933:10	933:10	6	(
LEAF_NODE	933:11	933:11	6	ap
LEAF_NODE	933:13	933:13	6	,
LEAF_NODE	933:15	933:15	6	uint16
LEAF_NODE	933:21	933:21	6	*
LEAF_NODE	933:22	933:22	6	)
LEAF_NODE	933:24	933:24	6	=
EXPR_STATEMENT	933:26	933:44	6	td -> td_compression ;
EXPR	933:26	933:26	7	td -> td_compression
FIELD	933:26	933:30	8	td -> td_compression
LEAF_NODE	933:26	933:26	9	td
LEAF_NODE	933:28	933:28	9	->
LEAF_NODE	933:30	933:30	9	td_compression
LEAF_NODE	933:44	933:44	7	;
JUMP_STATEMENT	934:3	934:8	6	break DESTINATION ;
KEYWORD	934:3	934:3	7	break
LEAF_NODE	934:3	934:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	934:8	934:8	7	;
LABEL	935:2	935:26	6	case TIFFTAG_PHOTOMETRIC :
LEAF_NODE	935:2	935:2	7	case
LEAF_NODE	935:7	935:7	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	935:26	935:26	7	:
LEAF_NODE	936:3	936:3	6	*
LEAF_NODE	936:4	936:4	6	va_arg
LEAF_NODE	936:10	936:10	6	(
LEAF_NODE	936:11	936:11	6	ap
LEAF_NODE	936:13	936:13	6	,
LEAF_NODE	936:15	936:15	6	uint16
LEAF_NODE	936:21	936:21	6	*
LEAF_NODE	936:22	936:22	6	)
LEAF_NODE	936:24	936:24	6	=
EXPR_STATEMENT	936:26	936:44	6	td -> td_photometric ;
EXPR	936:26	936:26	7	td -> td_photometric
FIELD	936:26	936:30	8	td -> td_photometric
LEAF_NODE	936:26	936:26	9	td
LEAF_NODE	936:28	936:28	9	->
LEAF_NODE	936:30	936:30	9	td_photometric
LEAF_NODE	936:44	936:44	7	;
JUMP_STATEMENT	937:3	937:8	6	break DESTINATION ;
KEYWORD	937:3	937:3	7	break
LEAF_NODE	937:3	937:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	937:8	937:8	7	;
LABEL	938:2	938:28	6	case TIFFTAG_THRESHHOLDING :
LEAF_NODE	938:2	938:2	7	case
LEAF_NODE	938:7	938:7	7	TIFFTAG_THRESHHOLDING
LEAF_NODE	938:28	938:28	7	:
LEAF_NODE	939:3	939:3	6	*
LEAF_NODE	939:4	939:4	6	va_arg
LEAF_NODE	939:10	939:10	6	(
LEAF_NODE	939:11	939:11	6	ap
LEAF_NODE	939:13	939:13	6	,
LEAF_NODE	939:15	939:15	6	uint16
LEAF_NODE	939:21	939:21	6	*
LEAF_NODE	939:22	939:22	6	)
LEAF_NODE	939:24	939:24	6	=
EXPR_STATEMENT	939:26	939:46	6	td -> td_threshholding ;
EXPR	939:26	939:26	7	td -> td_threshholding
FIELD	939:26	939:30	8	td -> td_threshholding
LEAF_NODE	939:26	939:26	9	td
LEAF_NODE	939:28	939:28	9	->
LEAF_NODE	939:30	939:30	9	td_threshholding
LEAF_NODE	939:46	939:46	7	;
JUMP_STATEMENT	940:3	940:8	6	break DESTINATION ;
KEYWORD	940:3	940:3	7	break
LEAF_NODE	940:3	940:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	940:8	940:8	7	;
LABEL	941:2	941:24	6	case TIFFTAG_FILLORDER :
LEAF_NODE	941:2	941:2	7	case
LEAF_NODE	941:7	941:7	7	TIFFTAG_FILLORDER
LEAF_NODE	941:24	941:24	7	:
LEAF_NODE	942:3	942:3	6	*
LEAF_NODE	942:4	942:4	6	va_arg
LEAF_NODE	942:10	942:10	6	(
LEAF_NODE	942:11	942:11	6	ap
LEAF_NODE	942:13	942:13	6	,
LEAF_NODE	942:15	942:15	6	uint16
LEAF_NODE	942:21	942:21	6	*
LEAF_NODE	942:22	942:22	6	)
LEAF_NODE	942:24	942:24	6	=
EXPR_STATEMENT	942:26	942:42	6	td -> td_fillorder ;
EXPR	942:26	942:26	7	td -> td_fillorder
FIELD	942:26	942:30	8	td -> td_fillorder
LEAF_NODE	942:26	942:26	9	td
LEAF_NODE	942:28	942:28	9	->
LEAF_NODE	942:30	942:30	9	td_fillorder
LEAF_NODE	942:42	942:42	7	;
JUMP_STATEMENT	943:3	943:8	6	break DESTINATION ;
KEYWORD	943:3	943:3	7	break
LEAF_NODE	943:3	943:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	943:8	943:8	7	;
LABEL	944:2	944:26	6	case TIFFTAG_ORIENTATION :
LEAF_NODE	944:2	944:2	7	case
LEAF_NODE	944:7	944:7	7	TIFFTAG_ORIENTATION
LEAF_NODE	944:26	944:26	7	:
LEAF_NODE	945:3	945:3	6	*
LEAF_NODE	945:4	945:4	6	va_arg
LEAF_NODE	945:10	945:10	6	(
LEAF_NODE	945:11	945:11	6	ap
LEAF_NODE	945:13	945:13	6	,
LEAF_NODE	945:15	945:15	6	uint16
LEAF_NODE	945:21	945:21	6	*
LEAF_NODE	945:22	945:22	6	)
LEAF_NODE	945:24	945:24	6	=
EXPR_STATEMENT	945:26	945:44	6	td -> td_orientation ;
EXPR	945:26	945:26	7	td -> td_orientation
FIELD	945:26	945:30	8	td -> td_orientation
LEAF_NODE	945:26	945:26	9	td
LEAF_NODE	945:28	945:28	9	->
LEAF_NODE	945:30	945:30	9	td_orientation
LEAF_NODE	945:44	945:44	7	;
JUMP_STATEMENT	946:3	946:8	6	break DESTINATION ;
KEYWORD	946:3	946:3	7	break
LEAF_NODE	946:3	946:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	946:8	946:8	7	;
LABEL	947:2	947:30	6	case TIFFTAG_SAMPLESPERPIXEL :
LEAF_NODE	947:2	947:2	7	case
LEAF_NODE	947:7	947:7	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	947:30	947:30	7	:
LEAF_NODE	948:3	948:3	6	*
LEAF_NODE	948:4	948:4	6	va_arg
LEAF_NODE	948:10	948:10	6	(
LEAF_NODE	948:11	948:11	6	ap
LEAF_NODE	948:13	948:13	6	,
LEAF_NODE	948:15	948:15	6	uint16
LEAF_NODE	948:21	948:21	6	*
LEAF_NODE	948:22	948:22	6	)
LEAF_NODE	948:24	948:24	6	=
EXPR_STATEMENT	948:26	948:48	6	td -> td_samplesperpixel ;
EXPR	948:26	948:26	7	td -> td_samplesperpixel
FIELD	948:26	948:30	8	td -> td_samplesperpixel
LEAF_NODE	948:26	948:26	9	td
LEAF_NODE	948:28	948:28	9	->
LEAF_NODE	948:30	948:30	9	td_samplesperpixel
LEAF_NODE	948:48	948:48	7	;
JUMP_STATEMENT	949:3	949:8	6	break DESTINATION ;
KEYWORD	949:3	949:3	7	break
LEAF_NODE	949:3	949:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	949:8	949:8	7	;
LABEL	950:2	950:27	6	case TIFFTAG_ROWSPERSTRIP :
LEAF_NODE	950:2	950:2	7	case
LEAF_NODE	950:7	950:7	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	950:27	950:27	7	:
LEAF_NODE	951:3	951:3	6	*
LEAF_NODE	951:4	951:4	6	va_arg
LEAF_NODE	951:10	951:10	6	(
LEAF_NODE	951:11	951:11	6	ap
LEAF_NODE	951:13	951:13	6	,
LEAF_NODE	951:15	951:15	6	uint32
LEAF_NODE	951:21	951:21	6	*
LEAF_NODE	951:22	951:22	6	)
LEAF_NODE	951:24	951:24	6	=
EXPR_STATEMENT	951:26	951:45	6	td -> td_rowsperstrip ;
EXPR	951:26	951:26	7	td -> td_rowsperstrip
FIELD	951:26	951:30	8	td -> td_rowsperstrip
LEAF_NODE	951:26	951:26	9	td
LEAF_NODE	951:28	951:28	9	->
LEAF_NODE	951:30	951:30	9	td_rowsperstrip
LEAF_NODE	951:45	951:45	7	;
JUMP_STATEMENT	952:3	952:8	6	break DESTINATION ;
KEYWORD	952:3	952:3	7	break
LEAF_NODE	952:3	952:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	952:8	952:8	7	;
LABEL	953:2	953:29	6	case TIFFTAG_MINSAMPLEVALUE :
LEAF_NODE	953:2	953:2	7	case
LEAF_NODE	953:7	953:7	7	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	953:29	953:29	7	:
LEAF_NODE	954:3	954:3	6	*
LEAF_NODE	954:4	954:4	6	va_arg
LEAF_NODE	954:10	954:10	6	(
LEAF_NODE	954:11	954:11	6	ap
LEAF_NODE	954:13	954:13	6	,
LEAF_NODE	954:15	954:15	6	uint16
LEAF_NODE	954:21	954:21	6	*
LEAF_NODE	954:22	954:22	6	)
LEAF_NODE	954:24	954:24	6	=
EXPR_STATEMENT	954:26	954:47	6	td -> td_minsamplevalue ;
EXPR	954:26	954:26	7	td -> td_minsamplevalue
FIELD	954:26	954:30	8	td -> td_minsamplevalue
LEAF_NODE	954:26	954:26	9	td
LEAF_NODE	954:28	954:28	9	->
LEAF_NODE	954:30	954:30	9	td_minsamplevalue
LEAF_NODE	954:47	954:47	7	;
JUMP_STATEMENT	955:3	955:8	6	break DESTINATION ;
KEYWORD	955:3	955:3	7	break
LEAF_NODE	955:3	955:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	955:8	955:8	7	;
LABEL	956:2	956:29	6	case TIFFTAG_MAXSAMPLEVALUE :
LEAF_NODE	956:2	956:2	7	case
LEAF_NODE	956:7	956:7	7	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	956:29	956:29	7	:
LEAF_NODE	957:3	957:3	6	*
LEAF_NODE	957:4	957:4	6	va_arg
LEAF_NODE	957:10	957:10	6	(
LEAF_NODE	957:11	957:11	6	ap
LEAF_NODE	957:13	957:13	6	,
LEAF_NODE	957:15	957:15	6	uint16
LEAF_NODE	957:21	957:21	6	*
LEAF_NODE	957:22	957:22	6	)
LEAF_NODE	957:24	957:24	6	=
EXPR_STATEMENT	957:26	957:47	6	td -> td_maxsamplevalue ;
EXPR	957:26	957:26	7	td -> td_maxsamplevalue
FIELD	957:26	957:30	8	td -> td_maxsamplevalue
LEAF_NODE	957:26	957:26	9	td
LEAF_NODE	957:28	957:28	9	->
LEAF_NODE	957:30	957:30	9	td_maxsamplevalue
LEAF_NODE	957:47	957:47	7	;
JUMP_STATEMENT	958:3	958:8	6	break DESTINATION ;
KEYWORD	958:3	958:3	7	break
LEAF_NODE	958:3	958:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	958:8	958:8	7	;
LABEL	959:2	959:30	6	case TIFFTAG_SMINSAMPLEVALUE :
LEAF_NODE	959:2	959:2	7	case
LEAF_NODE	959:7	959:7	7	TIFFTAG_SMINSAMPLEVALUE
LEAF_NODE	959:30	959:30	7	:
SELECTION	960:3	961:4	6	
KEYWORD	960:3	960:3	7	if
LEAF_NODE	960:3	960:3	8	if
LEAF_NODE	960:6	960:6	7	(
CONDITION	960:7	960:7	7	tif -> tif_flags & TIFF_PERSAMPLE
EXPR	960:7	960:24	8	tif -> tif_flags & TIFF_PERSAMPLE
FIELD	960:7	960:12	9	tif -> tif_flags
LEAF_NODE	960:7	960:7	10	tif
LEAF_NODE	960:10	960:10	10	->
LEAF_NODE	960:12	960:12	10	tif_flags
LEAF_NODE	960:22	960:22	9	&
FIELD	960:24	960:24	9	TIFF_PERSAMPLE
LEAF_NODE	960:24	960:24	10	TIFF_PERSAMPLE
LEAF_NODE	960:38	960:38	7	)
STATEMENTS	961:4	961:4	7	
LEAF_NODE	961:4	961:4	8	*
LEAF_NODE	961:5	961:5	6	va_arg
LEAF_NODE	961:11	961:11	6	(
LEAF_NODE	961:12	961:12	6	ap
LEAF_NODE	961:14	961:14	6	,
LEAF_NODE	961:16	961:16	6	double
LEAF_NODE	961:22	961:22	6	*
LEAF_NODE	961:23	961:23	6	*
LEAF_NODE	961:24	961:24	6	)
LEAF_NODE	961:26	961:26	6	=
EXPR_STATEMENT	961:28	961:50	6	td -> td_sminsamplevalue ;
EXPR	961:28	961:28	7	td -> td_sminsamplevalue
FIELD	961:28	961:32	8	td -> td_sminsamplevalue
LEAF_NODE	961:28	961:28	9	td
LEAF_NODE	961:30	961:30	9	->
LEAF_NODE	961:32	961:32	9	td_sminsamplevalue
LEAF_NODE	961:50	961:50	7	;
SELECTION	962:3	963:3	6	
KEYWORD	962:3	962:3	7	else
LEAF_NODE	962:3	962:3	8	else
STATEMENTS	963:3	971:3	7	
LEAF_NODE	963:3	963:3	8	{
STATEMENTS	965:4	970:27	8	
SIMPLE_DECL	965:4	965:12	9	uint16 i ;
VAR_DECL	965:4	965:11	10	uint16 i
TYPE	965:4	965:4	11	uint16
TYPE_NAME	965:4	965:4	12	uint16
LEAF_NODE	965:4	965:4	13	uint16
NAME	965:11	965:11	11	i
LEAF_NODE	965:11	965:11	12	i
LEAF_NODE	965:12	965:12	10	;
SIMPLE_DECL	966:4	966:40	9	double v ; v = td -> td_sminsamplevalue [ 0 ] ;
VAR_DECL	966:4	966:11	10	double v ; v = td -> td_sminsamplevalue [ 0 ]
TYPE	966:4	966:4	11	double
TYPE_NAME	966:4	966:4	12	double
LEAF_NODE	966:4	966:4	13	double
NAME	966:11	966:11	11	v
LEAF_NODE	966:11	966:11	12	v
LEAF_NODE	0:0	0:0	11	;
INIT	966:11	966:11	11	v = td -> td_sminsamplevalue [ 0 ]
ASSIGN	966:11	966:15	12	v = td -> td_sminsamplevalue [ 0 ]
LVAL	966:11	966:11	13	v
NAME	966:11	966:11	14	v
LEAF_NODE	966:11	966:11	15	v
ASSIGN_OP	966:13	966:13	13	=
LEAF_NODE	966:13	966:13	14	=
RVAL	966:15	966:15	13	td -> td_sminsamplevalue [ 0 ]
FIELD	966:15	966:39	14	td -> td_sminsamplevalue [ 0 ]
LEAF_NODE	966:15	966:15	15	td
LEAF_NODE	966:17	966:17	15	->
LEAF_NODE	966:19	966:19	15	td_sminsamplevalue
LEAF_NODE	966:37	966:37	15	[
EXPR	966:38	966:38	15	0
FIELD	966:38	966:38	16	0
LEAF_NODE	966:38	966:38	17	0
LEAF_NODE	966:39	966:39	15	]
LEAF_NODE	966:40	966:40	10	;
ITERATION	967:4	968:5	9	
KEYWORD	967:4	967:4	10	for
LEAF_NODE	967:4	967:4	11	for
LEAF_NODE	967:8	967:8	10	(
FOR_INIT	967:9	967:12	10	i = 1 ;
EXPR	967:9	967:9	11	i = 1
ASSIGN	967:9	967:11	12	i = 1
LVAL	967:9	967:9	13	i
FIELD	967:9	967:9	14	i
LEAF_NODE	967:9	967:9	15	i
ASSIGN_OP	967:10	967:10	13	=
LEAF_NODE	967:10	967:10	14	=
RVAL	967:11	967:11	13	1
FIELD	967:11	967:11	14	1
LEAF_NODE	967:11	967:11	15	1
LEAF_NODE	967:12	967:12	11	;
CONDITION	967:14	967:14	10	i < td -> td_samplesperpixel
EXPR	967:14	967:18	11	i < td -> td_samplesperpixel
FIELD	967:14	967:14	12	i
LEAF_NODE	967:14	967:14	13	i
REL_OPERATOR	967:16	967:16	12	<
LEAF_NODE	967:16	967:16	13	<
FIELD	967:18	967:22	12	td -> td_samplesperpixel
LEAF_NODE	967:18	967:18	13	td
LEAF_NODE	967:20	967:20	13	->
LEAF_NODE	967:22	967:22	13	td_samplesperpixel
LEAF_NODE	967:40	967:40	10	;
FOR_EXPR	967:42	967:42	10	++ i
EXPR	967:42	967:44	11	++ i
LEAF_NODE	967:42	967:42	12	++
FIELD	967:44	967:44	12	i
LEAF_NODE	967:44	967:44	13	i
LEAF_NODE	967:45	967:45	10	)
STATEMENTS	968:5	968:5	10	
SELECTION	968:5	969:6	11	
KEYWORD	968:5	968:5	12	if
LEAF_NODE	968:5	968:5	13	if
LEAF_NODE	968:7	968:7	12	(
CONDITION	968:9	968:9	12	td -> td_sminsamplevalue [ i ] < v
EXPR	968:9	968:37	13	td -> td_sminsamplevalue [ i ] < v
FIELD	968:9	968:33	14	td -> td_sminsamplevalue [ i ]
LEAF_NODE	968:9	968:9	15	td
LEAF_NODE	968:11	968:11	15	->
LEAF_NODE	968:13	968:13	15	td_sminsamplevalue
LEAF_NODE	968:31	968:31	15	[
EXPR	968:32	968:32	15	i
FIELD	968:32	968:32	16	i
LEAF_NODE	968:32	968:32	17	i
LEAF_NODE	968:33	968:33	15	]
REL_OPERATOR	968:35	968:35	14	<
LEAF_NODE	968:35	968:35	15	<
FIELD	968:37	968:37	14	v
LEAF_NODE	968:37	968:37	15	v
LEAF_NODE	968:39	968:39	12	)
STATEMENTS	969:6	969:6	12	
EXPR_STATEMENT	969:6	969:35	13	v = td -> td_sminsamplevalue [ i ] ;
EXPR	969:6	969:6	14	v = td -> td_sminsamplevalue [ i ]
ASSIGN	969:6	969:10	15	v = td -> td_sminsamplevalue [ i ]
LVAL	969:6	969:6	16	v
FIELD	969:6	969:6	17	v
LEAF_NODE	969:6	969:6	18	v
ASSIGN_OP	969:8	969:8	16	=
LEAF_NODE	969:8	969:8	17	=
RVAL	969:10	969:10	16	td -> td_sminsamplevalue [ i ]
FIELD	969:10	969:34	17	td -> td_sminsamplevalue [ i ]
LEAF_NODE	969:10	969:10	18	td
LEAF_NODE	969:12	969:12	18	->
LEAF_NODE	969:14	969:14	18	td_sminsamplevalue
LEAF_NODE	969:32	969:32	18	[
EXPR	969:33	969:33	18	i
FIELD	969:33	969:33	19	i
LEAF_NODE	969:33	969:33	20	i
LEAF_NODE	969:34	969:34	18	]
LEAF_NODE	969:35	969:35	14	;
LEAF_NODE	970:4	970:4	9	*
LEAF_NODE	970:5	970:5	9	va_arg
LEAF_NODE	970:11	970:11	9	(
LEAF_NODE	970:12	970:12	9	ap
LEAF_NODE	970:14	970:14	9	,
LEAF_NODE	970:16	970:16	9	double
LEAF_NODE	970:22	970:22	9	*
LEAF_NODE	970:23	970:23	9	)
LEAF_NODE	970:25	970:25	9	=
EXPR_STATEMENT	970:27	970:28	9	v ;
EXPR	970:27	970:27	10	v
FIELD	970:27	970:27	11	v
LEAF_NODE	970:27	970:27	12	v
LEAF_NODE	970:28	970:28	10	;
LEAF_NODE	971:3	971:3	8	}
JUMP_STATEMENT	972:3	972:8	6	break DESTINATION ;
KEYWORD	972:3	972:3	7	break
LEAF_NODE	972:3	972:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	972:8	972:8	7	;
LABEL	973:2	973:30	6	case TIFFTAG_SMAXSAMPLEVALUE :
LEAF_NODE	973:2	973:2	7	case
LEAF_NODE	973:7	973:7	7	TIFFTAG_SMAXSAMPLEVALUE
LEAF_NODE	973:30	973:30	7	:
SELECTION	974:3	975:4	6	
KEYWORD	974:3	974:3	7	if
LEAF_NODE	974:3	974:3	8	if
LEAF_NODE	974:6	974:6	7	(
CONDITION	974:7	974:7	7	tif -> tif_flags & TIFF_PERSAMPLE
EXPR	974:7	974:24	8	tif -> tif_flags & TIFF_PERSAMPLE
FIELD	974:7	974:12	9	tif -> tif_flags
LEAF_NODE	974:7	974:7	10	tif
LEAF_NODE	974:10	974:10	10	->
LEAF_NODE	974:12	974:12	10	tif_flags
LEAF_NODE	974:22	974:22	9	&
FIELD	974:24	974:24	9	TIFF_PERSAMPLE
LEAF_NODE	974:24	974:24	10	TIFF_PERSAMPLE
LEAF_NODE	974:38	974:38	7	)
STATEMENTS	975:4	975:4	7	
LEAF_NODE	975:4	975:4	8	*
LEAF_NODE	975:5	975:5	6	va_arg
LEAF_NODE	975:11	975:11	6	(
LEAF_NODE	975:12	975:12	6	ap
LEAF_NODE	975:14	975:14	6	,
LEAF_NODE	975:16	975:16	6	double
LEAF_NODE	975:22	975:22	6	*
LEAF_NODE	975:23	975:23	6	*
LEAF_NODE	975:24	975:24	6	)
LEAF_NODE	975:26	975:26	6	=
EXPR_STATEMENT	975:28	975:50	6	td -> td_smaxsamplevalue ;
EXPR	975:28	975:28	7	td -> td_smaxsamplevalue
FIELD	975:28	975:32	8	td -> td_smaxsamplevalue
LEAF_NODE	975:28	975:28	9	td
LEAF_NODE	975:30	975:30	9	->
LEAF_NODE	975:32	975:32	9	td_smaxsamplevalue
LEAF_NODE	975:50	975:50	7	;
SELECTION	976:3	977:3	6	
KEYWORD	976:3	976:3	7	else
LEAF_NODE	976:3	976:3	8	else
STATEMENTS	977:3	985:3	7	
LEAF_NODE	977:3	977:3	8	{
STATEMENTS	979:4	984:27	8	
SIMPLE_DECL	979:4	979:12	9	uint16 i ;
VAR_DECL	979:4	979:11	10	uint16 i
TYPE	979:4	979:4	11	uint16
TYPE_NAME	979:4	979:4	12	uint16
LEAF_NODE	979:4	979:4	13	uint16
NAME	979:11	979:11	11	i
LEAF_NODE	979:11	979:11	12	i
LEAF_NODE	979:12	979:12	10	;
SIMPLE_DECL	980:4	980:40	9	double v ; v = td -> td_smaxsamplevalue [ 0 ] ;
VAR_DECL	980:4	980:11	10	double v ; v = td -> td_smaxsamplevalue [ 0 ]
TYPE	980:4	980:4	11	double
TYPE_NAME	980:4	980:4	12	double
LEAF_NODE	980:4	980:4	13	double
NAME	980:11	980:11	11	v
LEAF_NODE	980:11	980:11	12	v
LEAF_NODE	0:0	0:0	11	;
INIT	980:11	980:11	11	v = td -> td_smaxsamplevalue [ 0 ]
ASSIGN	980:11	980:15	12	v = td -> td_smaxsamplevalue [ 0 ]
LVAL	980:11	980:11	13	v
NAME	980:11	980:11	14	v
LEAF_NODE	980:11	980:11	15	v
ASSIGN_OP	980:13	980:13	13	=
LEAF_NODE	980:13	980:13	14	=
RVAL	980:15	980:15	13	td -> td_smaxsamplevalue [ 0 ]
FIELD	980:15	980:39	14	td -> td_smaxsamplevalue [ 0 ]
LEAF_NODE	980:15	980:15	15	td
LEAF_NODE	980:17	980:17	15	->
LEAF_NODE	980:19	980:19	15	td_smaxsamplevalue
LEAF_NODE	980:37	980:37	15	[
EXPR	980:38	980:38	15	0
FIELD	980:38	980:38	16	0
LEAF_NODE	980:38	980:38	17	0
LEAF_NODE	980:39	980:39	15	]
LEAF_NODE	980:40	980:40	10	;
ITERATION	981:4	982:5	9	
KEYWORD	981:4	981:4	10	for
LEAF_NODE	981:4	981:4	11	for
LEAF_NODE	981:8	981:8	10	(
FOR_INIT	981:9	981:12	10	i = 1 ;
EXPR	981:9	981:9	11	i = 1
ASSIGN	981:9	981:11	12	i = 1
LVAL	981:9	981:9	13	i
FIELD	981:9	981:9	14	i
LEAF_NODE	981:9	981:9	15	i
ASSIGN_OP	981:10	981:10	13	=
LEAF_NODE	981:10	981:10	14	=
RVAL	981:11	981:11	13	1
FIELD	981:11	981:11	14	1
LEAF_NODE	981:11	981:11	15	1
LEAF_NODE	981:12	981:12	11	;
CONDITION	981:14	981:14	10	i < td -> td_samplesperpixel
EXPR	981:14	981:18	11	i < td -> td_samplesperpixel
FIELD	981:14	981:14	12	i
LEAF_NODE	981:14	981:14	13	i
REL_OPERATOR	981:16	981:16	12	<
LEAF_NODE	981:16	981:16	13	<
FIELD	981:18	981:22	12	td -> td_samplesperpixel
LEAF_NODE	981:18	981:18	13	td
LEAF_NODE	981:20	981:20	13	->
LEAF_NODE	981:22	981:22	13	td_samplesperpixel
LEAF_NODE	981:40	981:40	10	;
FOR_EXPR	981:42	981:42	10	++ i
EXPR	981:42	981:44	11	++ i
LEAF_NODE	981:42	981:42	12	++
FIELD	981:44	981:44	12	i
LEAF_NODE	981:44	981:44	13	i
LEAF_NODE	981:45	981:45	10	)
STATEMENTS	982:5	982:5	10	
SELECTION	982:5	983:6	11	
KEYWORD	982:5	982:5	12	if
LEAF_NODE	982:5	982:5	13	if
LEAF_NODE	982:7	982:7	12	(
CONDITION	982:9	982:9	12	td -> td_smaxsamplevalue [ i ] > v
EXPR	982:9	982:37	13	td -> td_smaxsamplevalue [ i ] > v
FIELD	982:9	982:33	14	td -> td_smaxsamplevalue [ i ]
LEAF_NODE	982:9	982:9	15	td
LEAF_NODE	982:11	982:11	15	->
LEAF_NODE	982:13	982:13	15	td_smaxsamplevalue
LEAF_NODE	982:31	982:31	15	[
EXPR	982:32	982:32	15	i
FIELD	982:32	982:32	16	i
LEAF_NODE	982:32	982:32	17	i
LEAF_NODE	982:33	982:33	15	]
REL_OPERATOR	982:35	982:35	14	>
LEAF_NODE	982:35	982:35	15	>
FIELD	982:37	982:37	14	v
LEAF_NODE	982:37	982:37	15	v
LEAF_NODE	982:39	982:39	12	)
STATEMENTS	983:6	983:6	12	
EXPR_STATEMENT	983:6	983:35	13	v = td -> td_smaxsamplevalue [ i ] ;
EXPR	983:6	983:6	14	v = td -> td_smaxsamplevalue [ i ]
ASSIGN	983:6	983:10	15	v = td -> td_smaxsamplevalue [ i ]
LVAL	983:6	983:6	16	v
FIELD	983:6	983:6	17	v
LEAF_NODE	983:6	983:6	18	v
ASSIGN_OP	983:8	983:8	16	=
LEAF_NODE	983:8	983:8	17	=
RVAL	983:10	983:10	16	td -> td_smaxsamplevalue [ i ]
FIELD	983:10	983:34	17	td -> td_smaxsamplevalue [ i ]
LEAF_NODE	983:10	983:10	18	td
LEAF_NODE	983:12	983:12	18	->
LEAF_NODE	983:14	983:14	18	td_smaxsamplevalue
LEAF_NODE	983:32	983:32	18	[
EXPR	983:33	983:33	18	i
FIELD	983:33	983:33	19	i
LEAF_NODE	983:33	983:33	20	i
LEAF_NODE	983:34	983:34	18	]
LEAF_NODE	983:35	983:35	14	;
LEAF_NODE	984:4	984:4	9	*
LEAF_NODE	984:5	984:5	9	va_arg
LEAF_NODE	984:11	984:11	9	(
LEAF_NODE	984:12	984:12	9	ap
LEAF_NODE	984:14	984:14	9	,
LEAF_NODE	984:16	984:16	9	double
LEAF_NODE	984:22	984:22	9	*
LEAF_NODE	984:23	984:23	9	)
LEAF_NODE	984:25	984:25	9	=
EXPR_STATEMENT	984:27	984:28	9	v ;
EXPR	984:27	984:27	10	v
FIELD	984:27	984:27	11	v
LEAF_NODE	984:27	984:27	12	v
LEAF_NODE	984:28	984:28	10	;
LEAF_NODE	985:3	985:3	8	}
JUMP_STATEMENT	986:3	986:8	6	break DESTINATION ;
KEYWORD	986:3	986:3	7	break
LEAF_NODE	986:3	986:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	986:8	986:8	7	;
LABEL	987:2	987:26	6	case TIFFTAG_XRESOLUTION :
LEAF_NODE	987:2	987:2	7	case
LEAF_NODE	987:7	987:7	7	TIFFTAG_XRESOLUTION
LEAF_NODE	987:26	987:26	7	:
LEAF_NODE	988:3	988:3	6	*
LEAF_NODE	988:4	988:4	6	va_arg
LEAF_NODE	988:10	988:10	6	(
LEAF_NODE	988:11	988:11	6	ap
LEAF_NODE	988:13	988:13	6	,
LEAF_NODE	988:15	988:15	6	float
LEAF_NODE	988:20	988:20	6	*
LEAF_NODE	988:21	988:21	6	)
LEAF_NODE	988:23	988:23	6	=
EXPR_STATEMENT	988:25	988:43	6	td -> td_xresolution ;
EXPR	988:25	988:25	7	td -> td_xresolution
FIELD	988:25	988:29	8	td -> td_xresolution
LEAF_NODE	988:25	988:25	9	td
LEAF_NODE	988:27	988:27	9	->
LEAF_NODE	988:29	988:29	9	td_xresolution
LEAF_NODE	988:43	988:43	7	;
JUMP_STATEMENT	989:3	989:8	6	break DESTINATION ;
KEYWORD	989:3	989:3	7	break
LEAF_NODE	989:3	989:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	989:8	989:8	7	;
LABEL	990:2	990:26	6	case TIFFTAG_YRESOLUTION :
LEAF_NODE	990:2	990:2	7	case
LEAF_NODE	990:7	990:7	7	TIFFTAG_YRESOLUTION
LEAF_NODE	990:26	990:26	7	:
LEAF_NODE	991:3	991:3	6	*
LEAF_NODE	991:4	991:4	6	va_arg
LEAF_NODE	991:10	991:10	6	(
LEAF_NODE	991:11	991:11	6	ap
LEAF_NODE	991:13	991:13	6	,
LEAF_NODE	991:15	991:15	6	float
LEAF_NODE	991:20	991:20	6	*
LEAF_NODE	991:21	991:21	6	)
LEAF_NODE	991:23	991:23	6	=
EXPR_STATEMENT	991:25	991:43	6	td -> td_yresolution ;
EXPR	991:25	991:25	7	td -> td_yresolution
FIELD	991:25	991:29	8	td -> td_yresolution
LEAF_NODE	991:25	991:25	9	td
LEAF_NODE	991:27	991:27	9	->
LEAF_NODE	991:29	991:29	9	td_yresolution
LEAF_NODE	991:43	991:43	7	;
JUMP_STATEMENT	992:3	992:8	6	break DESTINATION ;
KEYWORD	992:3	992:3	7	break
LEAF_NODE	992:3	992:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	992:8	992:8	7	;
LABEL	993:2	993:27	6	case TIFFTAG_PLANARCONFIG :
LEAF_NODE	993:2	993:2	7	case
LEAF_NODE	993:7	993:7	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	993:27	993:27	7	:
LEAF_NODE	994:3	994:3	6	*
LEAF_NODE	994:4	994:4	6	va_arg
LEAF_NODE	994:10	994:10	6	(
LEAF_NODE	994:11	994:11	6	ap
LEAF_NODE	994:13	994:13	6	,
LEAF_NODE	994:15	994:15	6	uint16
LEAF_NODE	994:21	994:21	6	*
LEAF_NODE	994:22	994:22	6	)
LEAF_NODE	994:24	994:24	6	=
EXPR_STATEMENT	994:26	994:45	6	td -> td_planarconfig ;
EXPR	994:26	994:26	7	td -> td_planarconfig
FIELD	994:26	994:30	8	td -> td_planarconfig
LEAF_NODE	994:26	994:26	9	td
LEAF_NODE	994:28	994:28	9	->
LEAF_NODE	994:30	994:30	9	td_planarconfig
LEAF_NODE	994:45	994:45	7	;
JUMP_STATEMENT	995:3	995:8	6	break DESTINATION ;
KEYWORD	995:3	995:3	7	break
LEAF_NODE	995:3	995:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	995:8	995:8	7	;
LABEL	996:2	996:24	6	case TIFFTAG_XPOSITION :
LEAF_NODE	996:2	996:2	7	case
LEAF_NODE	996:7	996:7	7	TIFFTAG_XPOSITION
LEAF_NODE	996:24	996:24	7	:
LEAF_NODE	997:3	997:3	6	*
LEAF_NODE	997:4	997:4	6	va_arg
LEAF_NODE	997:10	997:10	6	(
LEAF_NODE	997:11	997:11	6	ap
LEAF_NODE	997:13	997:13	6	,
LEAF_NODE	997:15	997:15	6	float
LEAF_NODE	997:20	997:20	6	*
LEAF_NODE	997:21	997:21	6	)
LEAF_NODE	997:23	997:23	6	=
EXPR_STATEMENT	997:25	997:41	6	td -> td_xposition ;
EXPR	997:25	997:25	7	td -> td_xposition
FIELD	997:25	997:29	8	td -> td_xposition
LEAF_NODE	997:25	997:25	9	td
LEAF_NODE	997:27	997:27	9	->
LEAF_NODE	997:29	997:29	9	td_xposition
LEAF_NODE	997:41	997:41	7	;
JUMP_STATEMENT	998:3	998:8	6	break DESTINATION ;
KEYWORD	998:3	998:3	7	break
LEAF_NODE	998:3	998:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	998:8	998:8	7	;
LABEL	999:2	999:24	6	case TIFFTAG_YPOSITION :
LEAF_NODE	999:2	999:2	7	case
LEAF_NODE	999:7	999:7	7	TIFFTAG_YPOSITION
LEAF_NODE	999:24	999:24	7	:
LEAF_NODE	1000:3	1000:3	6	*
LEAF_NODE	1000:4	1000:4	6	va_arg
LEAF_NODE	1000:10	1000:10	6	(
LEAF_NODE	1000:11	1000:11	6	ap
LEAF_NODE	1000:13	1000:13	6	,
LEAF_NODE	1000:15	1000:15	6	float
LEAF_NODE	1000:20	1000:20	6	*
LEAF_NODE	1000:21	1000:21	6	)
LEAF_NODE	1000:23	1000:23	6	=
EXPR_STATEMENT	1000:25	1000:41	6	td -> td_yposition ;
EXPR	1000:25	1000:25	7	td -> td_yposition
FIELD	1000:25	1000:29	8	td -> td_yposition
LEAF_NODE	1000:25	1000:25	9	td
LEAF_NODE	1000:27	1000:27	9	->
LEAF_NODE	1000:29	1000:29	9	td_yposition
LEAF_NODE	1000:41	1000:41	7	;
JUMP_STATEMENT	1001:3	1001:8	6	break DESTINATION ;
KEYWORD	1001:3	1001:3	7	break
LEAF_NODE	1001:3	1001:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1001:8	1001:8	7	;
LABEL	1002:2	1002:29	6	case TIFFTAG_RESOLUTIONUNIT :
LEAF_NODE	1002:2	1002:2	7	case
LEAF_NODE	1002:7	1002:7	7	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	1002:29	1002:29	7	:
LEAF_NODE	1003:3	1003:3	6	*
LEAF_NODE	1003:4	1003:4	6	va_arg
LEAF_NODE	1003:10	1003:10	6	(
LEAF_NODE	1003:11	1003:11	6	ap
LEAF_NODE	1003:13	1003:13	6	,
LEAF_NODE	1003:15	1003:15	6	uint16
LEAF_NODE	1003:21	1003:21	6	*
LEAF_NODE	1003:22	1003:22	6	)
LEAF_NODE	1003:24	1003:24	6	=
EXPR_STATEMENT	1003:26	1003:47	6	td -> td_resolutionunit ;
EXPR	1003:26	1003:26	7	td -> td_resolutionunit
FIELD	1003:26	1003:30	8	td -> td_resolutionunit
LEAF_NODE	1003:26	1003:26	9	td
LEAF_NODE	1003:28	1003:28	9	->
LEAF_NODE	1003:30	1003:30	9	td_resolutionunit
LEAF_NODE	1003:47	1003:47	7	;
JUMP_STATEMENT	1004:3	1004:8	6	break DESTINATION ;
KEYWORD	1004:3	1004:3	7	break
LEAF_NODE	1004:3	1004:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1004:8	1004:8	7	;
LABEL	1005:2	1005:25	6	case TIFFTAG_PAGENUMBER :
LEAF_NODE	1005:2	1005:2	7	case
LEAF_NODE	1005:7	1005:7	7	TIFFTAG_PAGENUMBER
LEAF_NODE	1005:25	1005:25	7	:
LEAF_NODE	1006:3	1006:3	6	*
LEAF_NODE	1006:4	1006:4	6	va_arg
LEAF_NODE	1006:10	1006:10	6	(
LEAF_NODE	1006:11	1006:11	6	ap
LEAF_NODE	1006:13	1006:13	6	,
LEAF_NODE	1006:15	1006:15	6	uint16
LEAF_NODE	1006:21	1006:21	6	*
LEAF_NODE	1006:22	1006:22	6	)
LEAF_NODE	1006:24	1006:24	6	=
EXPR_STATEMENT	1006:26	1006:46	6	td -> td_pagenumber [ 0 ] ;
EXPR	1006:26	1006:26	7	td -> td_pagenumber [ 0 ]
FIELD	1006:26	1006:45	8	td -> td_pagenumber [ 0 ]
LEAF_NODE	1006:26	1006:26	9	td
LEAF_NODE	1006:28	1006:28	9	->
LEAF_NODE	1006:30	1006:30	9	td_pagenumber
LEAF_NODE	1006:43	1006:43	9	[
EXPR	1006:44	1006:44	9	0
FIELD	1006:44	1006:44	10	0
LEAF_NODE	1006:44	1006:44	11	0
LEAF_NODE	1006:45	1006:45	9	]
LEAF_NODE	1006:46	1006:46	7	;
LEAF_NODE	1007:3	1007:3	6	*
LEAF_NODE	1007:4	1007:4	6	va_arg
LEAF_NODE	1007:10	1007:10	6	(
LEAF_NODE	1007:11	1007:11	6	ap
LEAF_NODE	1007:13	1007:13	6	,
LEAF_NODE	1007:15	1007:15	6	uint16
LEAF_NODE	1007:21	1007:21	6	*
LEAF_NODE	1007:22	1007:22	6	)
LEAF_NODE	1007:24	1007:24	6	=
EXPR_STATEMENT	1007:26	1007:46	6	td -> td_pagenumber [ 1 ] ;
EXPR	1007:26	1007:26	7	td -> td_pagenumber [ 1 ]
FIELD	1007:26	1007:45	8	td -> td_pagenumber [ 1 ]
LEAF_NODE	1007:26	1007:26	9	td
LEAF_NODE	1007:28	1007:28	9	->
LEAF_NODE	1007:30	1007:30	9	td_pagenumber
LEAF_NODE	1007:43	1007:43	9	[
EXPR	1007:44	1007:44	9	1
FIELD	1007:44	1007:44	10	1
LEAF_NODE	1007:44	1007:44	11	1
LEAF_NODE	1007:45	1007:45	9	]
LEAF_NODE	1007:46	1007:46	7	;
JUMP_STATEMENT	1008:3	1008:8	6	break DESTINATION ;
KEYWORD	1008:3	1008:3	7	break
LEAF_NODE	1008:3	1008:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1008:8	1008:8	7	;
LABEL	1009:2	1009:28	6	case TIFFTAG_HALFTONEHINTS :
LEAF_NODE	1009:2	1009:2	7	case
LEAF_NODE	1009:7	1009:7	7	TIFFTAG_HALFTONEHINTS
LEAF_NODE	1009:28	1009:28	7	:
LEAF_NODE	1010:3	1010:3	6	*
LEAF_NODE	1010:4	1010:4	6	va_arg
LEAF_NODE	1010:10	1010:10	6	(
LEAF_NODE	1010:11	1010:11	6	ap
LEAF_NODE	1010:13	1010:13	6	,
LEAF_NODE	1010:15	1010:15	6	uint16
LEAF_NODE	1010:21	1010:21	6	*
LEAF_NODE	1010:22	1010:22	6	)
LEAF_NODE	1010:24	1010:24	6	=
EXPR_STATEMENT	1010:26	1010:49	6	td -> td_halftonehints [ 0 ] ;
EXPR	1010:26	1010:26	7	td -> td_halftonehints [ 0 ]
FIELD	1010:26	1010:48	8	td -> td_halftonehints [ 0 ]
LEAF_NODE	1010:26	1010:26	9	td
LEAF_NODE	1010:28	1010:28	9	->
LEAF_NODE	1010:30	1010:30	9	td_halftonehints
LEAF_NODE	1010:46	1010:46	9	[
EXPR	1010:47	1010:47	9	0
FIELD	1010:47	1010:47	10	0
LEAF_NODE	1010:47	1010:47	11	0
LEAF_NODE	1010:48	1010:48	9	]
LEAF_NODE	1010:49	1010:49	7	;
LEAF_NODE	1011:3	1011:3	6	*
LEAF_NODE	1011:4	1011:4	6	va_arg
LEAF_NODE	1011:10	1011:10	6	(
LEAF_NODE	1011:11	1011:11	6	ap
LEAF_NODE	1011:13	1011:13	6	,
LEAF_NODE	1011:15	1011:15	6	uint16
LEAF_NODE	1011:21	1011:21	6	*
LEAF_NODE	1011:22	1011:22	6	)
LEAF_NODE	1011:24	1011:24	6	=
EXPR_STATEMENT	1011:26	1011:49	6	td -> td_halftonehints [ 1 ] ;
EXPR	1011:26	1011:26	7	td -> td_halftonehints [ 1 ]
FIELD	1011:26	1011:48	8	td -> td_halftonehints [ 1 ]
LEAF_NODE	1011:26	1011:26	9	td
LEAF_NODE	1011:28	1011:28	9	->
LEAF_NODE	1011:30	1011:30	9	td_halftonehints
LEAF_NODE	1011:46	1011:46	9	[
EXPR	1011:47	1011:47	9	1
FIELD	1011:47	1011:47	10	1
LEAF_NODE	1011:47	1011:47	11	1
LEAF_NODE	1011:48	1011:48	9	]
LEAF_NODE	1011:49	1011:49	7	;
JUMP_STATEMENT	1012:3	1012:8	6	break DESTINATION ;
KEYWORD	1012:3	1012:3	7	break
LEAF_NODE	1012:3	1012:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1012:8	1012:8	7	;
LABEL	1013:2	1013:23	6	case TIFFTAG_COLORMAP :
LEAF_NODE	1013:2	1013:2	7	case
LEAF_NODE	1013:7	1013:7	7	TIFFTAG_COLORMAP
LEAF_NODE	1013:23	1013:23	7	:
LEAF_NODE	1014:3	1014:3	6	*
LEAF_NODE	1014:4	1014:4	6	va_arg
LEAF_NODE	1014:10	1014:10	6	(
LEAF_NODE	1014:11	1014:11	6	ap
LEAF_NODE	1014:13	1014:13	6	,
LEAF_NODE	1014:15	1014:15	6	uint16
LEAF_NODE	1014:21	1014:21	6	*
LEAF_NODE	1014:22	1014:22	6	*
LEAF_NODE	1014:23	1014:23	6	)
LEAF_NODE	1014:25	1014:25	6	=
EXPR_STATEMENT	1014:27	1014:45	6	td -> td_colormap [ 0 ] ;
EXPR	1014:27	1014:27	7	td -> td_colormap [ 0 ]
FIELD	1014:27	1014:44	8	td -> td_colormap [ 0 ]
LEAF_NODE	1014:27	1014:27	9	td
LEAF_NODE	1014:29	1014:29	9	->
LEAF_NODE	1014:31	1014:31	9	td_colormap
LEAF_NODE	1014:42	1014:42	9	[
EXPR	1014:43	1014:43	9	0
FIELD	1014:43	1014:43	10	0
LEAF_NODE	1014:43	1014:43	11	0
LEAF_NODE	1014:44	1014:44	9	]
LEAF_NODE	1014:45	1014:45	7	;
LEAF_NODE	1015:3	1015:3	6	*
LEAF_NODE	1015:4	1015:4	6	va_arg
LEAF_NODE	1015:10	1015:10	6	(
LEAF_NODE	1015:11	1015:11	6	ap
LEAF_NODE	1015:13	1015:13	6	,
LEAF_NODE	1015:15	1015:15	6	uint16
LEAF_NODE	1015:21	1015:21	6	*
LEAF_NODE	1015:22	1015:22	6	*
LEAF_NODE	1015:23	1015:23	6	)
LEAF_NODE	1015:25	1015:25	6	=
EXPR_STATEMENT	1015:27	1015:45	6	td -> td_colormap [ 1 ] ;
EXPR	1015:27	1015:27	7	td -> td_colormap [ 1 ]
FIELD	1015:27	1015:44	8	td -> td_colormap [ 1 ]
LEAF_NODE	1015:27	1015:27	9	td
LEAF_NODE	1015:29	1015:29	9	->
LEAF_NODE	1015:31	1015:31	9	td_colormap
LEAF_NODE	1015:42	1015:42	9	[
EXPR	1015:43	1015:43	9	1
FIELD	1015:43	1015:43	10	1
LEAF_NODE	1015:43	1015:43	11	1
LEAF_NODE	1015:44	1015:44	9	]
LEAF_NODE	1015:45	1015:45	7	;
LEAF_NODE	1016:3	1016:3	6	*
LEAF_NODE	1016:4	1016:4	6	va_arg
LEAF_NODE	1016:10	1016:10	6	(
LEAF_NODE	1016:11	1016:11	6	ap
LEAF_NODE	1016:13	1016:13	6	,
LEAF_NODE	1016:15	1016:15	6	uint16
LEAF_NODE	1016:21	1016:21	6	*
LEAF_NODE	1016:22	1016:22	6	*
LEAF_NODE	1016:23	1016:23	6	)
LEAF_NODE	1016:25	1016:25	6	=
EXPR_STATEMENT	1016:27	1016:45	6	td -> td_colormap [ 2 ] ;
EXPR	1016:27	1016:27	7	td -> td_colormap [ 2 ]
FIELD	1016:27	1016:44	8	td -> td_colormap [ 2 ]
LEAF_NODE	1016:27	1016:27	9	td
LEAF_NODE	1016:29	1016:29	9	->
LEAF_NODE	1016:31	1016:31	9	td_colormap
LEAF_NODE	1016:42	1016:42	9	[
EXPR	1016:43	1016:43	9	2
FIELD	1016:43	1016:43	10	2
LEAF_NODE	1016:43	1016:43	11	2
LEAF_NODE	1016:44	1016:44	9	]
LEAF_NODE	1016:45	1016:45	7	;
JUMP_STATEMENT	1017:3	1017:8	6	break DESTINATION ;
KEYWORD	1017:3	1017:3	7	break
LEAF_NODE	1017:3	1017:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1017:8	1017:8	7	;
LABEL	1018:2	1018:27	6	case TIFFTAG_STRIPOFFSETS :
LEAF_NODE	1018:2	1018:2	7	case
LEAF_NODE	1018:7	1018:7	7	TIFFTAG_STRIPOFFSETS
LEAF_NODE	1018:27	1018:27	7	:
LABEL	1019:2	1019:26	6	case TIFFTAG_TILEOFFSETS :
LEAF_NODE	1019:2	1019:2	7	case
LEAF_NODE	1019:7	1019:7	7	TIFFTAG_TILEOFFSETS
LEAF_NODE	1019:26	1019:26	7	:
EXPR_STATEMENT	1020:3	1020:26	6	_TIFFFillStriles ( tif ) ;
EXPR	1020:3	1020:3	7	_TIFFFillStriles ( tif )
FUNCTION_CALL	1020:3	1020:25	8	_TIFFFillStriles ( tif )
CALLEE	1020:3	1020:3	9	_TIFFFillStriles
LEAF_NODE	1020:3	1020:3	10	_TIFFFillStriles
LEAF_NODE	1020:19	1020:19	9	(
ARGUMENT	1020:21	1020:21	9	tif
FIELD	1020:21	1020:21	10	tif
LEAF_NODE	1020:21	1020:21	11	tif
LEAF_NODE	1020:25	1020:25	9	)
LEAF_NODE	1020:26	1020:26	7	;
LEAF_NODE	1021:3	1021:3	6	*
LEAF_NODE	1021:4	1021:4	6	va_arg
LEAF_NODE	1021:10	1021:10	6	(
LEAF_NODE	1021:11	1021:11	6	ap
LEAF_NODE	1021:13	1021:13	6	,
LEAF_NODE	1021:15	1021:15	6	uint64
LEAF_NODE	1021:21	1021:21	6	*
LEAF_NODE	1021:22	1021:22	6	*
LEAF_NODE	1021:23	1021:23	6	)
LEAF_NODE	1021:25	1021:25	6	=
EXPR_STATEMENT	1021:27	1021:47	6	td -> td_stripoffset_p ;
EXPR	1021:27	1021:27	7	td -> td_stripoffset_p
FIELD	1021:27	1021:31	8	td -> td_stripoffset_p
LEAF_NODE	1021:27	1021:27	9	td
LEAF_NODE	1021:29	1021:29	9	->
LEAF_NODE	1021:31	1021:31	9	td_stripoffset_p
LEAF_NODE	1021:47	1021:47	7	;
JUMP_STATEMENT	1022:3	1022:8	6	break DESTINATION ;
KEYWORD	1022:3	1022:3	7	break
LEAF_NODE	1022:3	1022:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1022:8	1022:8	7	;
LABEL	1023:2	1023:30	6	case TIFFTAG_STRIPBYTECOUNTS :
LEAF_NODE	1023:2	1023:2	7	case
LEAF_NODE	1023:7	1023:7	7	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1023:30	1023:30	7	:
LABEL	1024:2	1024:29	6	case TIFFTAG_TILEBYTECOUNTS :
LEAF_NODE	1024:2	1024:2	7	case
LEAF_NODE	1024:7	1024:7	7	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	1024:29	1024:29	7	:
EXPR_STATEMENT	1025:3	1025:26	6	_TIFFFillStriles ( tif ) ;
EXPR	1025:3	1025:3	7	_TIFFFillStriles ( tif )
FUNCTION_CALL	1025:3	1025:25	8	_TIFFFillStriles ( tif )
CALLEE	1025:3	1025:3	9	_TIFFFillStriles
LEAF_NODE	1025:3	1025:3	10	_TIFFFillStriles
LEAF_NODE	1025:19	1025:19	9	(
ARGUMENT	1025:21	1025:21	9	tif
FIELD	1025:21	1025:21	10	tif
LEAF_NODE	1025:21	1025:21	11	tif
LEAF_NODE	1025:25	1025:25	9	)
LEAF_NODE	1025:26	1025:26	7	;
LEAF_NODE	1026:3	1026:3	6	*
LEAF_NODE	1026:4	1026:4	6	va_arg
LEAF_NODE	1026:10	1026:10	6	(
LEAF_NODE	1026:11	1026:11	6	ap
LEAF_NODE	1026:13	1026:13	6	,
LEAF_NODE	1026:15	1026:15	6	uint64
LEAF_NODE	1026:21	1026:21	6	*
LEAF_NODE	1026:22	1026:22	6	*
LEAF_NODE	1026:23	1026:23	6	)
LEAF_NODE	1026:25	1026:25	6	=
EXPR_STATEMENT	1026:27	1026:50	6	td -> td_stripbytecount_p ;
EXPR	1026:27	1026:27	7	td -> td_stripbytecount_p
FIELD	1026:27	1026:31	8	td -> td_stripbytecount_p
LEAF_NODE	1026:27	1026:27	9	td
LEAF_NODE	1026:29	1026:29	9	->
LEAF_NODE	1026:31	1026:31	9	td_stripbytecount_p
LEAF_NODE	1026:50	1026:50	7	;
JUMP_STATEMENT	1027:3	1027:8	6	break DESTINATION ;
KEYWORD	1027:3	1027:3	7	break
LEAF_NODE	1027:3	1027:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1027:8	1027:8	7	;
LABEL	1028:2	1028:23	6	case TIFFTAG_MATTEING :
LEAF_NODE	1028:2	1028:2	7	case
LEAF_NODE	1028:7	1028:7	7	TIFFTAG_MATTEING
LEAF_NODE	1028:23	1028:23	7	:
LEAF_NODE	1029:3	1029:3	6	*
LEAF_NODE	1029:4	1029:4	6	va_arg
LEAF_NODE	1029:10	1029:10	6	(
LEAF_NODE	1029:11	1029:11	6	ap
LEAF_NODE	1029:13	1029:13	6	,
LEAF_NODE	1029:15	1029:15	6	uint16
LEAF_NODE	1029:21	1029:21	6	*
LEAF_NODE	1029:22	1029:22	6	)
LEAF_NODE	1029:24	1029:24	6	=
EXPR_STATEMENT	1030:7	1031:54	6	( td -> td_extrasamples == 1 && td -> td_sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA ) ;
EXPR	1030:7	1031:53	7	( td -> td_extrasamples == 1 && td -> td_sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA )
LEAF_NODE	1030:7	1030:7	8	(
AND	1030:8	1031:7	8	td -> td_extrasamples == 1 && td -> td_sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA
EXPR	1030:8	1030:31	9	td -> td_extrasamples == 1
FIELD	1030:8	1030:12	10	td -> td_extrasamples
LEAF_NODE	1030:8	1030:8	11	td
LEAF_NODE	1030:10	1030:10	11	->
LEAF_NODE	1030:12	1030:12	11	td_extrasamples
EQ_OPERATOR	1030:28	1030:28	10	==
LEAF_NODE	1030:28	1030:28	11	==
FIELD	1030:31	1030:31	10	1
LEAF_NODE	1030:31	1030:31	11	1
LEAF_NODE	1030:33	1030:33	9	&&
EXPR	1031:7	1031:31	9	td -> td_sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA
FIELD	1031:7	1031:26	10	td -> td_sampleinfo [ 0 ]
LEAF_NODE	1031:7	1031:7	11	td
LEAF_NODE	1031:9	1031:9	11	->
LEAF_NODE	1031:11	1031:11	11	td_sampleinfo
LEAF_NODE	1031:24	1031:24	11	[
EXPR	1031:25	1031:25	11	0
FIELD	1031:25	1031:25	12	0
LEAF_NODE	1031:25	1031:25	13	0
LEAF_NODE	1031:26	1031:26	11	]
EQ_OPERATOR	1031:28	1031:28	10	==
LEAF_NODE	1031:28	1031:28	11	==
FIELD	1031:31	1031:31	10	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	1031:31	1031:31	11	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	1031:53	1031:53	8	)
LEAF_NODE	1031:54	1031:54	7	;
JUMP_STATEMENT	1032:3	1032:8	6	break DESTINATION ;
KEYWORD	1032:3	1032:3	7	break
LEAF_NODE	1032:3	1032:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1032:8	1032:8	7	;
LABEL	1033:2	1033:27	6	case TIFFTAG_EXTRASAMPLES :
LEAF_NODE	1033:2	1033:2	7	case
LEAF_NODE	1033:7	1033:7	7	TIFFTAG_EXTRASAMPLES
LEAF_NODE	1033:27	1033:27	7	:
LEAF_NODE	1034:3	1034:3	6	*
LEAF_NODE	1034:4	1034:4	6	va_arg
LEAF_NODE	1034:10	1034:10	6	(
LEAF_NODE	1034:11	1034:11	6	ap
LEAF_NODE	1034:13	1034:13	6	,
LEAF_NODE	1034:15	1034:15	6	uint16
LEAF_NODE	1034:21	1034:21	6	*
LEAF_NODE	1034:22	1034:22	6	)
LEAF_NODE	1034:24	1034:24	6	=
EXPR_STATEMENT	1034:26	1034:45	6	td -> td_extrasamples ;
EXPR	1034:26	1034:26	7	td -> td_extrasamples
FIELD	1034:26	1034:30	8	td -> td_extrasamples
LEAF_NODE	1034:26	1034:26	9	td
LEAF_NODE	1034:28	1034:28	9	->
LEAF_NODE	1034:30	1034:30	9	td_extrasamples
LEAF_NODE	1034:45	1034:45	7	;
LEAF_NODE	1035:3	1035:3	6	*
LEAF_NODE	1035:4	1035:4	6	va_arg
LEAF_NODE	1035:10	1035:10	6	(
LEAF_NODE	1035:11	1035:11	6	ap
LEAF_NODE	1035:13	1035:13	6	,
LEAF_NODE	1035:15	1035:15	6	uint16
LEAF_NODE	1035:21	1035:21	6	*
LEAF_NODE	1035:22	1035:22	6	*
LEAF_NODE	1035:23	1035:23	6	)
LEAF_NODE	1035:25	1035:25	6	=
EXPR_STATEMENT	1035:27	1035:44	6	td -> td_sampleinfo ;
EXPR	1035:27	1035:27	7	td -> td_sampleinfo
FIELD	1035:27	1035:31	8	td -> td_sampleinfo
LEAF_NODE	1035:27	1035:27	9	td
LEAF_NODE	1035:29	1035:29	9	->
LEAF_NODE	1035:31	1035:31	9	td_sampleinfo
LEAF_NODE	1035:44	1035:44	7	;
JUMP_STATEMENT	1036:3	1036:8	6	break DESTINATION ;
KEYWORD	1036:3	1036:3	7	break
LEAF_NODE	1036:3	1036:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1036:8	1036:8	7	;
LABEL	1037:2	1037:24	6	case TIFFTAG_TILEWIDTH :
LEAF_NODE	1037:2	1037:2	7	case
LEAF_NODE	1037:7	1037:7	7	TIFFTAG_TILEWIDTH
LEAF_NODE	1037:24	1037:24	7	:
LEAF_NODE	1038:3	1038:3	6	*
LEAF_NODE	1038:4	1038:4	6	va_arg
LEAF_NODE	1038:10	1038:10	6	(
LEAF_NODE	1038:11	1038:11	6	ap
LEAF_NODE	1038:13	1038:13	6	,
LEAF_NODE	1038:15	1038:15	6	uint32
LEAF_NODE	1038:21	1038:21	6	*
LEAF_NODE	1038:22	1038:22	6	)
LEAF_NODE	1038:24	1038:24	6	=
EXPR_STATEMENT	1038:26	1038:42	6	td -> td_tilewidth ;
EXPR	1038:26	1038:26	7	td -> td_tilewidth
FIELD	1038:26	1038:30	8	td -> td_tilewidth
LEAF_NODE	1038:26	1038:26	9	td
LEAF_NODE	1038:28	1038:28	9	->
LEAF_NODE	1038:30	1038:30	9	td_tilewidth
LEAF_NODE	1038:42	1038:42	7	;
JUMP_STATEMENT	1039:3	1039:8	6	break DESTINATION ;
KEYWORD	1039:3	1039:3	7	break
LEAF_NODE	1039:3	1039:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1039:8	1039:8	7	;
LABEL	1040:2	1040:25	6	case TIFFTAG_TILELENGTH :
LEAF_NODE	1040:2	1040:2	7	case
LEAF_NODE	1040:7	1040:7	7	TIFFTAG_TILELENGTH
LEAF_NODE	1040:25	1040:25	7	:
LEAF_NODE	1041:3	1041:3	6	*
LEAF_NODE	1041:4	1041:4	6	va_arg
LEAF_NODE	1041:10	1041:10	6	(
LEAF_NODE	1041:11	1041:11	6	ap
LEAF_NODE	1041:13	1041:13	6	,
LEAF_NODE	1041:15	1041:15	6	uint32
LEAF_NODE	1041:21	1041:21	6	*
LEAF_NODE	1041:22	1041:22	6	)
LEAF_NODE	1041:24	1041:24	6	=
EXPR_STATEMENT	1041:26	1041:43	6	td -> td_tilelength ;
EXPR	1041:26	1041:26	7	td -> td_tilelength
FIELD	1041:26	1041:30	8	td -> td_tilelength
LEAF_NODE	1041:26	1041:26	9	td
LEAF_NODE	1041:28	1041:28	9	->
LEAF_NODE	1041:30	1041:30	9	td_tilelength
LEAF_NODE	1041:43	1041:43	7	;
JUMP_STATEMENT	1042:3	1042:8	6	break DESTINATION ;
KEYWORD	1042:3	1042:3	7	break
LEAF_NODE	1042:3	1042:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1042:8	1042:8	7	;
LABEL	1043:2	1043:24	6	case TIFFTAG_TILEDEPTH :
LEAF_NODE	1043:2	1043:2	7	case
LEAF_NODE	1043:7	1043:7	7	TIFFTAG_TILEDEPTH
LEAF_NODE	1043:24	1043:24	7	:
LEAF_NODE	1044:3	1044:3	6	*
LEAF_NODE	1044:4	1044:4	6	va_arg
LEAF_NODE	1044:10	1044:10	6	(
LEAF_NODE	1044:11	1044:11	6	ap
LEAF_NODE	1044:13	1044:13	6	,
LEAF_NODE	1044:15	1044:15	6	uint32
LEAF_NODE	1044:21	1044:21	6	*
LEAF_NODE	1044:22	1044:22	6	)
LEAF_NODE	1044:24	1044:24	6	=
EXPR_STATEMENT	1044:26	1044:42	6	td -> td_tiledepth ;
EXPR	1044:26	1044:26	7	td -> td_tiledepth
FIELD	1044:26	1044:30	8	td -> td_tiledepth
LEAF_NODE	1044:26	1044:26	9	td
LEAF_NODE	1044:28	1044:28	9	->
LEAF_NODE	1044:30	1044:30	9	td_tiledepth
LEAF_NODE	1044:42	1044:42	7	;
JUMP_STATEMENT	1045:3	1045:8	6	break DESTINATION ;
KEYWORD	1045:3	1045:3	7	break
LEAF_NODE	1045:3	1045:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1045:8	1045:8	7	;
LABEL	1046:2	1046:23	6	case TIFFTAG_DATATYPE :
LEAF_NODE	1046:2	1046:2	7	case
LEAF_NODE	1046:7	1046:7	7	TIFFTAG_DATATYPE
LEAF_NODE	1046:23	1046:23	7	:
SELECTION	1047:3	1047:32	6	
KEYWORD	1047:3	1047:3	7	switch
LEAF_NODE	1047:3	1047:3	8	switch
LEAF_NODE	1047:10	1047:10	7	(
CONDITION	1047:11	1047:11	7	td -> td_sampleformat
EXPR	1047:11	1047:11	8	td -> td_sampleformat
FIELD	1047:11	1047:15	9	td -> td_sampleformat
LEAF_NODE	1047:11	1047:11	10	td
LEAF_NODE	1047:13	1047:13	10	->
LEAF_NODE	1047:15	1047:15	10	td_sampleformat
LEAF_NODE	1047:30	1047:30	7	)
STATEMENTS	1047:32	1060:3	7	
LEAF_NODE	1047:32	1047:32	8	{
STATEMENTS	1048:4	1059:5	8	
LABEL	1048:4	1048:26	9	case SAMPLEFORMAT_UINT :
LEAF_NODE	1048:4	1048:4	10	case
LEAF_NODE	1048:9	1048:9	10	SAMPLEFORMAT_UINT
LEAF_NODE	1048:26	1048:26	10	:
LEAF_NODE	1049:5	1049:5	9	*
LEAF_NODE	1049:6	1049:6	9	va_arg
LEAF_NODE	1049:12	1049:12	9	(
LEAF_NODE	1049:13	1049:13	9	ap
LEAF_NODE	1049:15	1049:15	9	,
LEAF_NODE	1049:17	1049:17	9	uint16
LEAF_NODE	1049:23	1049:23	9	*
LEAF_NODE	1049:24	1049:24	9	)
LEAF_NODE	1049:26	1049:26	9	=
EXPR_STATEMENT	1049:28	1049:41	9	DATATYPE_UINT ;
EXPR	1049:28	1049:28	10	DATATYPE_UINT
FIELD	1049:28	1049:28	11	DATATYPE_UINT
LEAF_NODE	1049:28	1049:28	12	DATATYPE_UINT
LEAF_NODE	1049:41	1049:41	10	;
JUMP_STATEMENT	1050:5	1050:10	9	break DESTINATION ;
KEYWORD	1050:5	1050:5	10	break
LEAF_NODE	1050:5	1050:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1050:10	1050:10	10	;
LABEL	1051:4	1051:25	9	case SAMPLEFORMAT_INT :
LEAF_NODE	1051:4	1051:4	10	case
LEAF_NODE	1051:9	1051:9	10	SAMPLEFORMAT_INT
LEAF_NODE	1051:25	1051:25	10	:
LEAF_NODE	1052:5	1052:5	9	*
LEAF_NODE	1052:6	1052:6	9	va_arg
LEAF_NODE	1052:12	1052:12	9	(
LEAF_NODE	1052:13	1052:13	9	ap
LEAF_NODE	1052:15	1052:15	9	,
LEAF_NODE	1052:17	1052:17	9	uint16
LEAF_NODE	1052:23	1052:23	9	*
LEAF_NODE	1052:24	1052:24	9	)
LEAF_NODE	1052:26	1052:26	9	=
EXPR_STATEMENT	1052:28	1052:40	9	DATATYPE_INT ;
EXPR	1052:28	1052:28	10	DATATYPE_INT
FIELD	1052:28	1052:28	11	DATATYPE_INT
LEAF_NODE	1052:28	1052:28	12	DATATYPE_INT
LEAF_NODE	1052:40	1052:40	10	;
JUMP_STATEMENT	1053:5	1053:10	9	break DESTINATION ;
KEYWORD	1053:5	1053:5	10	break
LEAF_NODE	1053:5	1053:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1053:10	1053:10	10	;
LABEL	1054:4	1054:28	9	case SAMPLEFORMAT_IEEEFP :
LEAF_NODE	1054:4	1054:4	10	case
LEAF_NODE	1054:9	1054:9	10	SAMPLEFORMAT_IEEEFP
LEAF_NODE	1054:28	1054:28	10	:
LEAF_NODE	1055:5	1055:5	9	*
LEAF_NODE	1055:6	1055:6	9	va_arg
LEAF_NODE	1055:12	1055:12	9	(
LEAF_NODE	1055:13	1055:13	9	ap
LEAF_NODE	1055:15	1055:15	9	,
LEAF_NODE	1055:17	1055:17	9	uint16
LEAF_NODE	1055:23	1055:23	9	*
LEAF_NODE	1055:24	1055:24	9	)
LEAF_NODE	1055:26	1055:26	9	=
EXPR_STATEMENT	1055:28	1055:43	9	DATATYPE_IEEEFP ;
EXPR	1055:28	1055:28	10	DATATYPE_IEEEFP
FIELD	1055:28	1055:28	11	DATATYPE_IEEEFP
LEAF_NODE	1055:28	1055:28	12	DATATYPE_IEEEFP
LEAF_NODE	1055:43	1055:43	10	;
JUMP_STATEMENT	1056:5	1056:10	9	break DESTINATION ;
KEYWORD	1056:5	1056:5	10	break
LEAF_NODE	1056:5	1056:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1056:10	1056:10	10	;
LABEL	1057:4	1057:26	9	case SAMPLEFORMAT_VOID :
LEAF_NODE	1057:4	1057:4	10	case
LEAF_NODE	1057:9	1057:9	10	SAMPLEFORMAT_VOID
LEAF_NODE	1057:26	1057:26	10	:
LEAF_NODE	1058:5	1058:5	9	*
LEAF_NODE	1058:6	1058:6	9	va_arg
LEAF_NODE	1058:12	1058:12	9	(
LEAF_NODE	1058:13	1058:13	9	ap
LEAF_NODE	1058:15	1058:15	9	,
LEAF_NODE	1058:17	1058:17	9	uint16
LEAF_NODE	1058:23	1058:23	9	*
LEAF_NODE	1058:24	1058:24	9	)
LEAF_NODE	1058:26	1058:26	9	=
EXPR_STATEMENT	1058:28	1058:41	9	DATATYPE_VOID ;
EXPR	1058:28	1058:28	10	DATATYPE_VOID
FIELD	1058:28	1058:28	11	DATATYPE_VOID
LEAF_NODE	1058:28	1058:28	12	DATATYPE_VOID
LEAF_NODE	1058:41	1058:41	10	;
JUMP_STATEMENT	1059:5	1059:10	9	break DESTINATION ;
KEYWORD	1059:5	1059:5	10	break
LEAF_NODE	1059:5	1059:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1059:10	1059:10	10	;
LEAF_NODE	1060:3	1060:3	8	}
JUMP_STATEMENT	1061:3	1061:8	6	break DESTINATION ;
KEYWORD	1061:3	1061:3	7	break
LEAF_NODE	1061:3	1061:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1061:8	1061:8	7	;
LABEL	1062:2	1062:27	6	case TIFFTAG_SAMPLEFORMAT :
LEAF_NODE	1062:2	1062:2	7	case
LEAF_NODE	1062:7	1062:7	7	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1062:27	1062:27	7	:
LEAF_NODE	1063:3	1063:3	6	*
LEAF_NODE	1063:4	1063:4	6	va_arg
LEAF_NODE	1063:10	1063:10	6	(
LEAF_NODE	1063:11	1063:11	6	ap
LEAF_NODE	1063:13	1063:13	6	,
LEAF_NODE	1063:15	1063:15	6	uint16
LEAF_NODE	1063:21	1063:21	6	*
LEAF_NODE	1063:22	1063:22	6	)
LEAF_NODE	1063:24	1063:24	6	=
EXPR_STATEMENT	1063:26	1063:45	6	td -> td_sampleformat ;
EXPR	1063:26	1063:26	7	td -> td_sampleformat
FIELD	1063:26	1063:30	8	td -> td_sampleformat
LEAF_NODE	1063:26	1063:26	9	td
LEAF_NODE	1063:28	1063:28	9	->
LEAF_NODE	1063:30	1063:30	9	td_sampleformat
LEAF_NODE	1063:45	1063:45	7	;
JUMP_STATEMENT	1064:3	1064:8	6	break DESTINATION ;
KEYWORD	1064:3	1064:3	7	break
LEAF_NODE	1064:3	1064:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1064:8	1064:8	7	;
LABEL	1065:2	1065:25	6	case TIFFTAG_IMAGEDEPTH :
LEAF_NODE	1065:2	1065:2	7	case
LEAF_NODE	1065:7	1065:7	7	TIFFTAG_IMAGEDEPTH
LEAF_NODE	1065:25	1065:25	7	:
LEAF_NODE	1066:3	1066:3	6	*
LEAF_NODE	1066:4	1066:4	6	va_arg
LEAF_NODE	1066:10	1066:10	6	(
LEAF_NODE	1066:11	1066:11	6	ap
LEAF_NODE	1066:13	1066:13	6	,
LEAF_NODE	1066:15	1066:15	6	uint32
LEAF_NODE	1066:21	1066:21	6	*
LEAF_NODE	1066:22	1066:22	6	)
LEAF_NODE	1066:24	1066:24	6	=
EXPR_STATEMENT	1066:26	1066:43	6	td -> td_imagedepth ;
EXPR	1066:26	1066:26	7	td -> td_imagedepth
FIELD	1066:26	1066:30	8	td -> td_imagedepth
LEAF_NODE	1066:26	1066:26	9	td
LEAF_NODE	1066:28	1066:28	9	->
LEAF_NODE	1066:30	1066:30	9	td_imagedepth
LEAF_NODE	1066:43	1066:43	7	;
JUMP_STATEMENT	1067:3	1067:8	6	break DESTINATION ;
KEYWORD	1067:3	1067:3	7	break
LEAF_NODE	1067:3	1067:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1067:8	1067:8	7	;
LABEL	1068:2	1068:21	6	case TIFFTAG_SUBIFD :
LEAF_NODE	1068:2	1068:2	7	case
LEAF_NODE	1068:7	1068:7	7	TIFFTAG_SUBIFD
LEAF_NODE	1068:21	1068:21	7	:
LEAF_NODE	1069:3	1069:3	6	*
LEAF_NODE	1069:4	1069:4	6	va_arg
LEAF_NODE	1069:10	1069:10	6	(
LEAF_NODE	1069:11	1069:11	6	ap
LEAF_NODE	1069:13	1069:13	6	,
LEAF_NODE	1069:15	1069:15	6	uint16
LEAF_NODE	1069:21	1069:21	6	*
LEAF_NODE	1069:22	1069:22	6	)
LEAF_NODE	1069:24	1069:24	6	=
EXPR_STATEMENT	1069:26	1069:40	6	td -> td_nsubifd ;
EXPR	1069:26	1069:26	7	td -> td_nsubifd
FIELD	1069:26	1069:30	8	td -> td_nsubifd
LEAF_NODE	1069:26	1069:26	9	td
LEAF_NODE	1069:28	1069:28	9	->
LEAF_NODE	1069:30	1069:30	9	td_nsubifd
LEAF_NODE	1069:40	1069:40	7	;
LEAF_NODE	1070:3	1070:3	6	*
LEAF_NODE	1070:4	1070:4	6	va_arg
LEAF_NODE	1070:10	1070:10	6	(
LEAF_NODE	1070:11	1070:11	6	ap
LEAF_NODE	1070:13	1070:13	6	,
LEAF_NODE	1070:15	1070:15	6	uint64
LEAF_NODE	1070:21	1070:21	6	*
LEAF_NODE	1070:22	1070:22	6	*
LEAF_NODE	1070:23	1070:23	6	)
LEAF_NODE	1070:25	1070:25	6	=
EXPR_STATEMENT	1070:27	1070:40	6	td -> td_subifd ;
EXPR	1070:27	1070:27	7	td -> td_subifd
FIELD	1070:27	1070:31	8	td -> td_subifd
LEAF_NODE	1070:27	1070:27	9	td
LEAF_NODE	1070:29	1070:29	9	->
LEAF_NODE	1070:31	1070:31	9	td_subifd
LEAF_NODE	1070:40	1070:40	7	;
JUMP_STATEMENT	1071:3	1071:8	6	break DESTINATION ;
KEYWORD	1071:3	1071:3	7	break
LEAF_NODE	1071:3	1071:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1071:8	1071:8	7	;
LABEL	1072:2	1072:31	6	case TIFFTAG_YCBCRPOSITIONING :
LEAF_NODE	1072:2	1072:2	7	case
LEAF_NODE	1072:7	1072:7	7	TIFFTAG_YCBCRPOSITIONING
LEAF_NODE	1072:31	1072:31	7	:
LEAF_NODE	1073:3	1073:3	6	*
LEAF_NODE	1073:4	1073:4	6	va_arg
LEAF_NODE	1073:10	1073:10	6	(
LEAF_NODE	1073:11	1073:11	6	ap
LEAF_NODE	1073:13	1073:13	6	,
LEAF_NODE	1073:15	1073:15	6	uint16
LEAF_NODE	1073:21	1073:21	6	*
LEAF_NODE	1073:22	1073:22	6	)
LEAF_NODE	1073:24	1073:24	6	=
EXPR_STATEMENT	1073:26	1073:49	6	td -> td_ycbcrpositioning ;
EXPR	1073:26	1073:26	7	td -> td_ycbcrpositioning
FIELD	1073:26	1073:30	8	td -> td_ycbcrpositioning
LEAF_NODE	1073:26	1073:26	9	td
LEAF_NODE	1073:28	1073:28	9	->
LEAF_NODE	1073:30	1073:30	9	td_ycbcrpositioning
LEAF_NODE	1073:49	1073:49	7	;
JUMP_STATEMENT	1074:3	1074:8	6	break DESTINATION ;
KEYWORD	1074:3	1074:3	7	break
LEAF_NODE	1074:3	1074:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1074:8	1074:8	7	;
LABEL	1075:2	1075:31	6	case TIFFTAG_YCBCRSUBSAMPLING :
LEAF_NODE	1075:2	1075:2	7	case
LEAF_NODE	1075:7	1075:7	7	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	1075:31	1075:31	7	:
LEAF_NODE	1076:3	1076:3	6	*
LEAF_NODE	1076:4	1076:4	6	va_arg
LEAF_NODE	1076:10	1076:10	6	(
LEAF_NODE	1076:11	1076:11	6	ap
LEAF_NODE	1076:13	1076:13	6	,
LEAF_NODE	1076:15	1076:15	6	uint16
LEAF_NODE	1076:21	1076:21	6	*
LEAF_NODE	1076:22	1076:22	6	)
LEAF_NODE	1076:24	1076:24	6	=
EXPR_STATEMENT	1076:26	1076:52	6	td -> td_ycbcrsubsampling [ 0 ] ;
EXPR	1076:26	1076:26	7	td -> td_ycbcrsubsampling [ 0 ]
FIELD	1076:26	1076:51	8	td -> td_ycbcrsubsampling [ 0 ]
LEAF_NODE	1076:26	1076:26	9	td
LEAF_NODE	1076:28	1076:28	9	->
LEAF_NODE	1076:30	1076:30	9	td_ycbcrsubsampling
LEAF_NODE	1076:49	1076:49	9	[
EXPR	1076:50	1076:50	9	0
FIELD	1076:50	1076:50	10	0
LEAF_NODE	1076:50	1076:50	11	0
LEAF_NODE	1076:51	1076:51	9	]
LEAF_NODE	1076:52	1076:52	7	;
LEAF_NODE	1077:3	1077:3	6	*
LEAF_NODE	1077:4	1077:4	6	va_arg
LEAF_NODE	1077:10	1077:10	6	(
LEAF_NODE	1077:11	1077:11	6	ap
LEAF_NODE	1077:13	1077:13	6	,
LEAF_NODE	1077:15	1077:15	6	uint16
LEAF_NODE	1077:21	1077:21	6	*
LEAF_NODE	1077:22	1077:22	6	)
LEAF_NODE	1077:24	1077:24	6	=
EXPR_STATEMENT	1077:26	1077:52	6	td -> td_ycbcrsubsampling [ 1 ] ;
EXPR	1077:26	1077:26	7	td -> td_ycbcrsubsampling [ 1 ]
FIELD	1077:26	1077:51	8	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	1077:26	1077:26	9	td
LEAF_NODE	1077:28	1077:28	9	->
LEAF_NODE	1077:30	1077:30	9	td_ycbcrsubsampling
LEAF_NODE	1077:49	1077:49	9	[
EXPR	1077:50	1077:50	9	1
FIELD	1077:50	1077:50	10	1
LEAF_NODE	1077:50	1077:50	11	1
LEAF_NODE	1077:51	1077:51	9	]
LEAF_NODE	1077:52	1077:52	7	;
JUMP_STATEMENT	1078:3	1078:8	6	break DESTINATION ;
KEYWORD	1078:3	1078:3	7	break
LEAF_NODE	1078:3	1078:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1078:8	1078:8	7	;
LABEL	1079:2	1079:31	6	case TIFFTAG_TRANSFERFUNCTION :
LEAF_NODE	1079:2	1079:2	7	case
LEAF_NODE	1079:7	1079:7	7	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	1079:31	1079:31	7	:
LEAF_NODE	1080:3	1080:3	6	*
LEAF_NODE	1080:4	1080:4	6	va_arg
LEAF_NODE	1080:10	1080:10	6	(
LEAF_NODE	1080:11	1080:11	6	ap
LEAF_NODE	1080:13	1080:13	6	,
LEAF_NODE	1080:15	1080:15	6	uint16
LEAF_NODE	1080:21	1080:21	6	*
LEAF_NODE	1080:22	1080:22	6	*
LEAF_NODE	1080:23	1080:23	6	)
LEAF_NODE	1080:25	1080:25	6	=
EXPR_STATEMENT	1080:27	1080:53	6	td -> td_transferfunction [ 0 ] ;
EXPR	1080:27	1080:27	7	td -> td_transferfunction [ 0 ]
FIELD	1080:27	1080:52	8	td -> td_transferfunction [ 0 ]
LEAF_NODE	1080:27	1080:27	9	td
LEAF_NODE	1080:29	1080:29	9	->
LEAF_NODE	1080:31	1080:31	9	td_transferfunction
LEAF_NODE	1080:50	1080:50	9	[
EXPR	1080:51	1080:51	9	0
FIELD	1080:51	1080:51	10	0
LEAF_NODE	1080:51	1080:51	11	0
LEAF_NODE	1080:52	1080:52	9	]
LEAF_NODE	1080:53	1080:53	7	;
SELECTION	1081:3	1081:57	6	
KEYWORD	1081:3	1081:3	7	if
LEAF_NODE	1081:3	1081:3	8	if
LEAF_NODE	1081:6	1081:6	7	(
CONDITION	1081:7	1081:7	7	td -> td_samplesperpixel - td -> td_extrasamples > 1
EXPR	1081:7	1081:54	8	td -> td_samplesperpixel - td -> td_extrasamples > 1
FIELD	1081:7	1081:11	9	td -> td_samplesperpixel
LEAF_NODE	1081:7	1081:7	10	td
LEAF_NODE	1081:9	1081:9	10	->
LEAF_NODE	1081:11	1081:11	10	td_samplesperpixel
LEAF_NODE	1081:30	1081:30	9	-
FIELD	1081:32	1081:36	9	td -> td_extrasamples
LEAF_NODE	1081:32	1081:32	10	td
LEAF_NODE	1081:34	1081:34	10	->
LEAF_NODE	1081:36	1081:36	10	td_extrasamples
REL_OPERATOR	1081:52	1081:52	9	>
LEAF_NODE	1081:52	1081:52	10	>
FIELD	1081:54	1081:54	9	1
LEAF_NODE	1081:54	1081:54	10	1
LEAF_NODE	1081:55	1081:55	7	)
STATEMENTS	1081:57	1084:3	7	
LEAF_NODE	1081:57	1081:57	8	{
STATEMENTS	1082:4	1083:28	8	
LEAF_NODE	1082:4	1082:4	9	*
LEAF_NODE	1082:5	1082:5	9	va_arg
LEAF_NODE	1082:11	1082:11	9	(
LEAF_NODE	1082:12	1082:12	9	ap
LEAF_NODE	1082:14	1082:14	9	,
LEAF_NODE	1082:16	1082:16	9	uint16
LEAF_NODE	1082:22	1082:22	9	*
LEAF_NODE	1082:23	1082:23	9	*
LEAF_NODE	1082:24	1082:24	9	)
LEAF_NODE	1082:26	1082:26	9	=
EXPR_STATEMENT	1082:28	1082:54	9	td -> td_transferfunction [ 1 ] ;
EXPR	1082:28	1082:28	10	td -> td_transferfunction [ 1 ]
FIELD	1082:28	1082:53	11	td -> td_transferfunction [ 1 ]
LEAF_NODE	1082:28	1082:28	12	td
LEAF_NODE	1082:30	1082:30	12	->
LEAF_NODE	1082:32	1082:32	12	td_transferfunction
LEAF_NODE	1082:51	1082:51	12	[
EXPR	1082:52	1082:52	12	1
FIELD	1082:52	1082:52	13	1
LEAF_NODE	1082:52	1082:52	14	1
LEAF_NODE	1082:53	1082:53	12	]
LEAF_NODE	1082:54	1082:54	10	;
LEAF_NODE	1083:4	1083:4	9	*
LEAF_NODE	1083:5	1083:5	9	va_arg
LEAF_NODE	1083:11	1083:11	9	(
LEAF_NODE	1083:12	1083:12	9	ap
LEAF_NODE	1083:14	1083:14	9	,
LEAF_NODE	1083:16	1083:16	9	uint16
LEAF_NODE	1083:22	1083:22	9	*
LEAF_NODE	1083:23	1083:23	9	*
LEAF_NODE	1083:24	1083:24	9	)
LEAF_NODE	1083:26	1083:26	9	=
EXPR_STATEMENT	1083:28	1083:54	9	td -> td_transferfunction [ 2 ] ;
EXPR	1083:28	1083:28	10	td -> td_transferfunction [ 2 ]
FIELD	1083:28	1083:53	11	td -> td_transferfunction [ 2 ]
LEAF_NODE	1083:28	1083:28	12	td
LEAF_NODE	1083:30	1083:30	12	->
LEAF_NODE	1083:32	1083:32	12	td_transferfunction
LEAF_NODE	1083:51	1083:51	12	[
EXPR	1083:52	1083:52	12	2
FIELD	1083:52	1083:52	13	2
LEAF_NODE	1083:52	1083:52	14	2
LEAF_NODE	1083:53	1083:53	12	]
LEAF_NODE	1083:54	1083:54	10	;
LEAF_NODE	1084:3	1084:3	8	}
SELECTION	1084:5	1084:10	6	
KEYWORD	1084:5	1084:5	7	else
LEAF_NODE	1084:5	1084:5	8	else
STATEMENTS	1084:10	1087:3	7	
LEAF_NODE	1084:10	1084:10	8	{
STATEMENTS	1085:4	1086:28	8	
LEAF_NODE	1085:4	1085:4	9	*
LEAF_NODE	1085:5	1085:5	9	va_arg
LEAF_NODE	1085:11	1085:11	9	(
LEAF_NODE	1085:12	1085:12	9	ap
LEAF_NODE	1085:14	1085:14	9	,
LEAF_NODE	1085:16	1085:16	9	uint16
LEAF_NODE	1085:22	1085:22	9	*
LEAF_NODE	1085:23	1085:23	9	*
LEAF_NODE	1085:24	1085:24	9	)
LEAF_NODE	1085:26	1085:26	9	=
EXPR_STATEMENT	1085:28	1085:32	9	NULL ;
EXPR	1085:28	1085:28	10	NULL
FIELD	1085:28	1085:28	11	NULL
LEAF_NODE	1085:28	1085:28	12	NULL
LEAF_NODE	1085:32	1085:32	10	;
LEAF_NODE	1086:4	1086:4	9	*
LEAF_NODE	1086:5	1086:5	9	va_arg
LEAF_NODE	1086:11	1086:11	9	(
LEAF_NODE	1086:12	1086:12	9	ap
LEAF_NODE	1086:14	1086:14	9	,
LEAF_NODE	1086:16	1086:16	9	uint16
LEAF_NODE	1086:22	1086:22	9	*
LEAF_NODE	1086:23	1086:23	9	*
LEAF_NODE	1086:24	1086:24	9	)
LEAF_NODE	1086:26	1086:26	9	=
EXPR_STATEMENT	1086:28	1086:32	9	NULL ;
EXPR	1086:28	1086:28	10	NULL
FIELD	1086:28	1086:28	11	NULL
LEAF_NODE	1086:28	1086:28	12	NULL
LEAF_NODE	1086:32	1086:32	10	;
LEAF_NODE	1087:3	1087:3	8	}
JUMP_STATEMENT	1088:3	1088:8	6	break DESTINATION ;
KEYWORD	1088:3	1088:3	7	break
LEAF_NODE	1088:3	1088:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1088:8	1088:8	7	;
LABEL	1089:2	1089:34	6	case TIFFTAG_REFERENCEBLACKWHITE :
LEAF_NODE	1089:2	1089:2	7	case
LEAF_NODE	1089:7	1089:7	7	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	1089:34	1089:34	7	:
LEAF_NODE	1090:3	1090:3	6	*
LEAF_NODE	1090:4	1090:4	6	va_arg
LEAF_NODE	1090:10	1090:10	6	(
LEAF_NODE	1090:11	1090:11	6	ap
LEAF_NODE	1090:13	1090:13	6	,
LEAF_NODE	1090:15	1090:15	6	float
LEAF_NODE	1090:20	1090:20	6	*
LEAF_NODE	1090:21	1090:21	6	*
LEAF_NODE	1090:22	1090:22	6	)
LEAF_NODE	1090:24	1090:24	6	=
EXPR_STATEMENT	1090:26	1090:46	6	td -> td_refblackwhite ;
EXPR	1090:26	1090:26	7	td -> td_refblackwhite
FIELD	1090:26	1090:30	8	td -> td_refblackwhite
LEAF_NODE	1090:26	1090:26	9	td
LEAF_NODE	1090:28	1090:28	9	->
LEAF_NODE	1090:30	1090:30	9	td_refblackwhite
LEAF_NODE	1090:46	1090:46	7	;
JUMP_STATEMENT	1091:3	1091:8	6	break DESTINATION ;
KEYWORD	1091:3	1091:3	7	break
LEAF_NODE	1091:3	1091:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1091:8	1091:8	7	;
LABEL	1092:2	1092:23	6	case TIFFTAG_INKNAMES :
LEAF_NODE	1092:2	1092:2	7	case
LEAF_NODE	1092:7	1092:7	7	TIFFTAG_INKNAMES
LEAF_NODE	1092:23	1092:23	7	:
LEAF_NODE	1093:3	1093:3	6	*
LEAF_NODE	1093:4	1093:4	6	va_arg
LEAF_NODE	1093:10	1093:10	6	(
LEAF_NODE	1093:11	1093:11	6	ap
LEAF_NODE	1093:13	1093:13	6	,
LEAF_NODE	1093:15	1093:15	6	char
LEAF_NODE	1093:19	1093:19	6	*
LEAF_NODE	1093:20	1093:20	6	*
LEAF_NODE	1093:21	1093:21	6	)
LEAF_NODE	1093:23	1093:23	6	=
EXPR_STATEMENT	1093:25	1093:40	6	td -> td_inknames ;
EXPR	1093:25	1093:25	7	td -> td_inknames
FIELD	1093:25	1093:29	8	td -> td_inknames
LEAF_NODE	1093:25	1093:25	9	td
LEAF_NODE	1093:27	1093:27	9	->
LEAF_NODE	1093:29	1093:29	9	td_inknames
LEAF_NODE	1093:40	1093:40	7	;
JUMP_STATEMENT	1094:3	1094:8	6	break DESTINATION ;
KEYWORD	1094:3	1094:3	7	break
LEAF_NODE	1094:3	1094:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1094:8	1094:8	7	;
LABEL	1095:2	1095:9	6	default :
LEAF_NODE	1095:2	1095:2	7	default
LEAF_NODE	1095:9	1095:9	7	:
LEAF_NODE	1096:3	1096:3	6	{
STATEMENTS	1097:4	1124:4	6	
SIMPLE_DECL	1097:4	1097:9	7	int i ;
VAR_DECL	1097:4	1097:8	8	int i
TYPE	1097:4	1097:4	9	int
TYPE_NAME	1097:4	1097:4	10	int
LEAF_NODE	1097:4	1097:4	11	int
NAME	1097:8	1097:8	9	i
LEAF_NODE	1097:8	1097:8	10	i
LEAF_NODE	1097:9	1097:9	8	;
SELECTION	1108:4	1109:4	7	
KEYWORD	1108:4	1108:4	8	if
LEAF_NODE	1108:4	1108:4	9	if
LEAF_NODE	1108:6	1108:6	8	(
CONDITION	1108:8	1108:8	8	fip -> field_bit != FIELD_CUSTOM
EXPR	1108:8	1108:26	9	fip -> field_bit != FIELD_CUSTOM
FIELD	1108:8	1108:13	10	fip -> field_bit
LEAF_NODE	1108:8	1108:8	11	fip
LEAF_NODE	1108:11	1108:11	11	->
LEAF_NODE	1108:13	1108:13	11	field_bit
EQ_OPERATOR	1108:23	1108:23	10	!=
LEAF_NODE	1108:23	1108:23	11	!=
FIELD	1108:26	1108:26	10	FIELD_CUSTOM
LEAF_NODE	1108:26	1108:26	11	FIELD_CUSTOM
LEAF_NODE	1108:39	1108:39	8	)
STATEMENTS	1109:4	1118:4	8	
LEAF_NODE	1109:4	1109:4	9	{
STATEMENTS	1110:5	1117:5	9	
LEAF_NODE	1110:5	1110:5	10	TIFFErrorExt
LEAF_NODE	1110:17	1110:17	10	(
LEAF_NODE	1110:18	1110:18	10	tif
LEAF_NODE	1110:21	1110:21	10	->
LEAF_NODE	1110:23	1110:23	10	tif_clientdata
LEAF_NODE	1110:37	1110:37	10	,
LEAF_NODE	1110:39	1110:39	10	"_TIFFVGetField"
LEAF_NODE	1110:55	1110:55	10	,
LEAF_NODE	1111:9	1111:9	10	"%s: Invalid %stag \"%s\" "
LEAF_NODE	1112:9	1112:9	10	"(not supported by codec)"
LEAF_NODE	1112:35	1112:35	10	,
LEAF_NODE	1113:9	1113:9	10	tif
LEAF_NODE	1113:12	1113:12	10	->
LEAF_NODE	1113:14	1113:14	10	tif_name
LEAF_NODE	1113:22	1113:22	10	,
LEAF_NODE	1114:9	1114:9	10	isPseudoTag
LEAF_NODE	1114:20	1114:20	10	(
LEAF_NODE	1114:21	1114:21	10	tag
LEAF_NODE	1114:24	1114:24	10	)
LEAF_NODE	1114:26	1114:26	10	?
LEAF_NODE	1114:28	1114:28	10	"pseudo-"
LEAF_NODE	1114:38	1114:38	10	:
LEAF_NODE	1114:40	1114:40	10	""
LEAF_NODE	1114:42	1114:42	10	,
LEAF_NODE	1115:9	1115:9	10	fip
LEAF_NODE	1115:12	1115:12	10	->
LEAF_NODE	1115:14	1115:14	10	field_name
LEAF_NODE	1115:24	1115:24	10	)
LEAF_NODE	1115:25	1115:25	10	;
EXPR_STATEMENT	1116:5	1116:16	10	ret_val = 0 ;
EXPR	1116:5	1116:5	11	ret_val = 0
ASSIGN	1116:5	1116:15	12	ret_val = 0
LVAL	1116:5	1116:5	13	ret_val
FIELD	1116:5	1116:5	14	ret_val
LEAF_NODE	1116:5	1116:5	15	ret_val
ASSIGN_OP	1116:13	1116:13	13	=
LEAF_NODE	1116:13	1116:13	14	=
RVAL	1116:15	1116:15	13	0
FIELD	1116:15	1116:15	14	0
LEAF_NODE	1116:15	1116:15	15	0
LEAF_NODE	1116:16	1116:16	11	;
JUMP_STATEMENT	1117:5	1117:10	10	break DESTINATION ;
KEYWORD	1117:5	1117:5	11	break
LEAF_NODE	1117:5	1117:5	12	break
LEAF_NODE	0:0	0:0	11	DESTINATION
LEAF_NODE	1117:10	1117:10	11	;
LEAF_NODE	1118:4	1118:4	9	}
EXPR_STATEMENT	1123:4	1123:15	7	ret_val = 0 ;
EXPR	1123:4	1123:4	8	ret_val = 0
ASSIGN	1123:4	1123:14	9	ret_val = 0
LVAL	1123:4	1123:4	10	ret_val
FIELD	1123:4	1123:4	11	ret_val
LEAF_NODE	1123:4	1123:4	12	ret_val
ASSIGN_OP	1123:12	1123:12	10	=
LEAF_NODE	1123:12	1123:12	11	=
RVAL	1123:14	1123:14	10	0
FIELD	1123:14	1123:14	11	0
LEAF_NODE	1123:14	1123:14	12	0
LEAF_NODE	1123:15	1123:15	8	;
ITERATION	1124:4	1124:50	7	
KEYWORD	1124:4	1124:4	8	for
LEAF_NODE	1124:4	1124:4	9	for
LEAF_NODE	1124:8	1124:8	8	(
FOR_INIT	1124:9	1124:14	8	i = 0 ;
EXPR	1124:9	1124:9	9	i = 0
ASSIGN	1124:9	1124:13	10	i = 0
LVAL	1124:9	1124:9	11	i
FIELD	1124:9	1124:9	12	i
LEAF_NODE	1124:9	1124:9	13	i
ASSIGN_OP	1124:11	1124:11	11	=
LEAF_NODE	1124:11	1124:11	12	=
RVAL	1124:13	1124:13	11	0
FIELD	1124:13	1124:13	12	0
LEAF_NODE	1124:13	1124:13	13	0
LEAF_NODE	1124:14	1124:14	9	;
CONDITION	1124:16	1124:16	8	i < td -> td_customValueCount
EXPR	1124:16	1124:20	9	i < td -> td_customValueCount
FIELD	1124:16	1124:16	10	i
LEAF_NODE	1124:16	1124:16	11	i
REL_OPERATOR	1124:18	1124:18	10	<
LEAF_NODE	1124:18	1124:18	11	<
FIELD	1124:20	1124:24	10	td -> td_customValueCount
LEAF_NODE	1124:20	1124:20	11	td
LEAF_NODE	1124:22	1124:22	11	->
LEAF_NODE	1124:24	1124:24	11	td_customValueCount
LEAF_NODE	1124:43	1124:43	8	;
FOR_EXPR	1124:45	1124:45	8	i ++
EXPR	1124:45	1124:45	9	i ++
FIELD	1124:45	1124:46	10	i ++
LEAF_NODE	1124:45	1124:45	11	i
LEAF_NODE	1124:46	1124:46	11	++
LEAF_NODE	1124:48	1124:48	8	)
STATEMENTS	1124:50	1220:4	8	
LEAF_NODE	1124:50	1124:50	9	{
STATEMENTS	1125:5	1219:5	9	
SIMPLE_DECL	1125:5	1125:47	10	TIFFTagValue * tv ; tv = td -> td_customValues + i ;
VAR_DECL	1125:5	1125:19	11	TIFFTagValue * tv ; tv = td -> td_customValues + i
TYPE	1125:5	1125:18	12	TIFFTagValue *
TYPE_NAME	1125:5	1125:5	13	TIFFTagValue
LEAF_NODE	1125:5	1125:5	14	TIFFTagValue
POINTER	1125:18	1125:18	13	*
LEAF_NODE	1125:18	1125:18	14	*
NAME	1125:19	1125:19	12	tv
LEAF_NODE	1125:19	1125:19	13	tv
LEAF_NODE	0:0	0:0	12	;
INIT	1125:19	1125:19	12	tv = td -> td_customValues + i
ASSIGN	1125:19	1125:24	13	tv = td -> td_customValues + i
LVAL	1125:19	1125:19	14	tv
NAME	1125:19	1125:19	15	tv
LEAF_NODE	1125:19	1125:19	16	tv
ASSIGN_OP	1125:22	1125:22	14	=
LEAF_NODE	1125:22	1125:22	15	=
RVAL	1125:24	1125:46	14	td -> td_customValues + i
FIELD	1125:24	1125:28	15	td -> td_customValues
LEAF_NODE	1125:24	1125:24	16	td
LEAF_NODE	1125:26	1125:26	16	->
LEAF_NODE	1125:28	1125:28	16	td_customValues
LEAF_NODE	1125:44	1125:44	15	+
FIELD	1125:46	1125:46	15	i
LEAF_NODE	1125:46	1125:46	16	i
LEAF_NODE	1125:47	1125:47	11	;
SELECTION	1127:5	1128:6	10	
KEYWORD	1127:5	1127:5	11	if
LEAF_NODE	1127:5	1127:5	12	if
LEAF_NODE	1127:8	1127:8	11	(
CONDITION	1127:9	1127:9	11	tv -> info -> field_tag != tag
EXPR	1127:9	1127:32	12	tv -> info -> field_tag != tag
FIELD	1127:9	1127:19	13	tv -> info -> field_tag
LEAF_NODE	1127:9	1127:9	14	tv
LEAF_NODE	1127:11	1127:11	14	->
LEAF_NODE	1127:13	1127:13	14	info
LEAF_NODE	1127:17	1127:17	14	->
LEAF_NODE	1127:19	1127:19	14	field_tag
EQ_OPERATOR	1127:29	1127:29	13	!=
LEAF_NODE	1127:29	1127:29	14	!=
FIELD	1127:32	1127:32	13	tag
LEAF_NODE	1127:32	1127:32	14	tag
LEAF_NODE	1127:35	1127:35	11	)
STATEMENTS	1128:6	1128:6	11	
JUMP_STATEMENT	1128:6	1128:14	12	continue DESTINATION ;
KEYWORD	1128:6	1128:6	13	continue
LEAF_NODE	1128:6	1128:6	14	continue
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1128:14	1128:14	13	;
SELECTION	1130:5	1130:31	10	
KEYWORD	1130:5	1130:5	11	if
LEAF_NODE	1130:5	1130:5	12	if
LEAF_NODE	1130:8	1130:8	11	(
CONDITION	1130:9	1130:9	11	fip -> field_passcount
EXPR	1130:9	1130:9	12	fip -> field_passcount
FIELD	1130:9	1130:14	13	fip -> field_passcount
LEAF_NODE	1130:9	1130:9	14	fip
LEAF_NODE	1130:12	1130:12	14	->
LEAF_NODE	1130:14	1130:14	14	field_passcount
LEAF_NODE	1130:29	1130:29	11	)
STATEMENTS	1130:31	1137:5	11	
LEAF_NODE	1130:31	1130:31	12	{
STATEMENTS	1131:6	1136:6	12	
SELECTION	1131:6	1132:7	13	
KEYWORD	1131:6	1131:6	14	if
LEAF_NODE	1131:6	1131:6	15	if
LEAF_NODE	1131:9	1131:9	14	(
CONDITION	1131:10	1131:10	14	fip -> field_readcount == TIFF_VARIABLE2
EXPR	1131:10	1131:34	15	fip -> field_readcount == TIFF_VARIABLE2
FIELD	1131:10	1131:15	16	fip -> field_readcount
LEAF_NODE	1131:10	1131:10	17	fip
LEAF_NODE	1131:13	1131:13	17	->
LEAF_NODE	1131:15	1131:15	17	field_readcount
EQ_OPERATOR	1131:31	1131:31	16	==
LEAF_NODE	1131:31	1131:31	17	==
FIELD	1131:34	1131:34	16	TIFF_VARIABLE2
LEAF_NODE	1131:34	1131:34	17	TIFF_VARIABLE2
LEAF_NODE	1131:48	1131:48	14	)
STATEMENTS	1132:7	1132:7	14	
LEAF_NODE	1132:7	1132:7	15	*
LEAF_NODE	1132:8	1132:8	13	va_arg
LEAF_NODE	1132:14	1132:14	13	(
LEAF_NODE	1132:15	1132:15	13	ap
LEAF_NODE	1132:17	1132:17	13	,
LEAF_NODE	1132:19	1132:19	13	uint32
LEAF_NODE	1132:25	1132:25	13	*
LEAF_NODE	1132:26	1132:26	13	)
LEAF_NODE	1132:28	1132:28	13	=
EXPR_STATEMENT	1132:30	1132:47	13	( uint32 ) tv -> count ;
EXPR	1132:30	1132:38	14	( uint32 ) tv -> count
LEAF_NODE	1132:30	1132:30	15	(
TYPE_NAME	1132:31	1132:31	15	uint32
LEAF_NODE	1132:31	1132:31	16	uint32
LEAF_NODE	1132:37	1132:37	15	)
FIELD	1132:38	1132:42	15	tv -> count
LEAF_NODE	1132:38	1132:38	16	tv
LEAF_NODE	1132:40	1132:40	16	->
LEAF_NODE	1132:42	1132:42	16	count
LEAF_NODE	1132:47	1132:47	14	;
SELECTION	1133:6	1134:7	13	
KEYWORD	1133:6	1133:6	14	else
LEAF_NODE	1133:6	1133:6	15	else
STATEMENTS	1134:7	1134:7	14	
LEAF_NODE	1134:7	1134:7	15	*
LEAF_NODE	1134:8	1134:8	13	va_arg
LEAF_NODE	1134:14	1134:14	13	(
LEAF_NODE	1134:15	1134:15	13	ap
LEAF_NODE	1134:17	1134:17	13	,
LEAF_NODE	1134:19	1134:19	13	uint16
LEAF_NODE	1134:25	1134:25	13	*
LEAF_NODE	1134:26	1134:26	13	)
LEAF_NODE	1134:28	1134:28	13	=
EXPR_STATEMENT	1134:30	1134:47	13	( uint16 ) tv -> count ;
EXPR	1134:30	1134:38	14	( uint16 ) tv -> count
LEAF_NODE	1134:30	1134:30	15	(
TYPE_NAME	1134:31	1134:31	15	uint16
LEAF_NODE	1134:31	1134:31	16	uint16
LEAF_NODE	1134:37	1134:37	15	)
FIELD	1134:38	1134:42	15	tv -> count
LEAF_NODE	1134:38	1134:38	16	tv
LEAF_NODE	1134:40	1134:40	16	->
LEAF_NODE	1134:42	1134:42	16	count
LEAF_NODE	1134:47	1134:47	14	;
LEAF_NODE	1135:6	1135:6	13	*
LEAF_NODE	1135:7	1135:7	13	va_arg
LEAF_NODE	1135:13	1135:13	13	(
LEAF_NODE	1135:14	1135:14	13	ap
LEAF_NODE	1135:16	1135:16	13	,
LEAF_NODE	1135:18	1135:18	13	void
LEAF_NODE	1135:23	1135:23	13	*
LEAF_NODE	1135:24	1135:24	13	*
LEAF_NODE	1135:25	1135:25	13	)
LEAF_NODE	1135:27	1135:27	13	=
EXPR_STATEMENT	1135:29	1135:38	13	tv -> value ;
EXPR	1135:29	1135:29	14	tv -> value
FIELD	1135:29	1135:33	15	tv -> value
LEAF_NODE	1135:29	1135:29	16	tv
LEAF_NODE	1135:31	1135:31	16	->
LEAF_NODE	1135:33	1135:33	16	value
LEAF_NODE	1135:38	1135:38	14	;
EXPR_STATEMENT	1136:6	1136:17	13	ret_val = 1 ;
EXPR	1136:6	1136:6	14	ret_val = 1
ASSIGN	1136:6	1136:16	15	ret_val = 1
LVAL	1136:6	1136:6	16	ret_val
FIELD	1136:6	1136:6	17	ret_val
LEAF_NODE	1136:6	1136:6	18	ret_val
ASSIGN_OP	1136:14	1136:14	16	=
LEAF_NODE	1136:14	1136:14	17	=
RVAL	1136:16	1136:16	16	1
FIELD	1136:16	1136:16	17	1
LEAF_NODE	1136:16	1136:16	18	1
LEAF_NODE	1136:17	1136:17	14	;
LEAF_NODE	1137:5	1137:5	12	}
SELECTION	1137:7	1137:12	10	
KEYWORD	1137:7	1137:7	11	else
LEAF_NODE	1137:7	1137:7	12	else
STATEMENTS	1137:12	1137:12	11	
SELECTION	1137:12	1138:53	12	
KEYWORD	1137:12	1137:12	13	if
LEAF_NODE	1137:12	1137:12	14	if
LEAF_NODE	1137:15	1137:15	13	(
CONDITION	1137:16	1137:16	13	fip -> field_tag == TIFFTAG_DOTRANGE && strcmp ( fip -> field_name , "DotRange" ) == 0
EXPR	1137:16	1137:16	14	fip -> field_tag == TIFFTAG_DOTRANGE && strcmp ( fip -> field_name , "DotRange" ) == 0
AND	1137:16	1138:12	15	fip -> field_tag == TIFFTAG_DOTRANGE && strcmp ( fip -> field_name , "DotRange" ) == 0
EXPR	1137:16	1137:34	16	fip -> field_tag == TIFFTAG_DOTRANGE
FIELD	1137:16	1137:21	17	fip -> field_tag
LEAF_NODE	1137:16	1137:16	18	fip
LEAF_NODE	1137:19	1137:19	18	->
LEAF_NODE	1137:21	1137:21	18	field_tag
EQ_OPERATOR	1137:31	1137:31	17	==
LEAF_NODE	1137:31	1137:31	18	==
FIELD	1137:34	1137:34	17	TIFFTAG_DOTRANGE
LEAF_NODE	1137:34	1137:34	18	TIFFTAG_DOTRANGE
LEAF_NODE	1138:9	1138:9	16	&&
EXPR	1138:12	1138:50	16	strcmp ( fip -> field_name , "DotRange" ) == 0
FUNCTION_CALL	1138:12	1138:45	17	strcmp ( fip -> field_name , "DotRange" )
CALLEE	1138:12	1138:12	18	strcmp
LEAF_NODE	1138:12	1138:12	19	strcmp
LEAF_NODE	1138:18	1138:18	18	(
ARGUMENT	1138:19	1138:19	18	fip -> field_name
FIELD	1138:19	1138:24	19	fip -> field_name
LEAF_NODE	1138:19	1138:19	20	fip
LEAF_NODE	1138:22	1138:22	20	->
LEAF_NODE	1138:24	1138:24	20	field_name
LEAF_NODE	1138:34	1138:34	18	,
ARGUMENT	1138:35	1138:35	18	"DotRange"
FIELD	1138:35	1138:35	19	"DotRange"
LEAF_NODE	1138:35	1138:35	20	"DotRange"
LEAF_NODE	1138:45	1138:45	18	)
EQ_OPERATOR	1138:47	1138:47	17	==
LEAF_NODE	1138:47	1138:47	18	==
FIELD	1138:50	1138:50	17	0
LEAF_NODE	1138:50	1138:50	18	0
LEAF_NODE	1138:51	1138:51	13	)
STATEMENTS	1138:53	1146:5	13	
LEAF_NODE	1138:53	1138:53	14	{
STATEMENTS	1143:6	1145:6	14	
LEAF_NODE	1143:6	1143:6	15	*
LEAF_NODE	1143:7	1143:7	15	va_arg
LEAF_NODE	1143:13	1143:13	15	(
LEAF_NODE	1143:14	1143:14	15	ap
LEAF_NODE	1143:16	1143:16	15	,
LEAF_NODE	1143:18	1143:18	15	uint16
LEAF_NODE	1143:24	1143:24	15	*
LEAF_NODE	1143:25	1143:25	15	)
LEAF_NODE	1143:27	1143:27	15	=
EXPR_STATEMENT	1143:29	1143:53	15	( ( uint16 * ) tv -> value ) [ 0 ] ;
EXPR	1143:29	1143:52	16	( ( uint16 * ) tv -> value ) [ 0 ]
LEAF_NODE	1143:29	1143:29	17	(
LEAF_NODE	1143:30	1143:30	17	(
TYPE_NAME	1143:31	1143:31	17	uint16
LEAF_NODE	1143:31	1143:31	18	uint16
LEAF_NODE	1143:38	1143:38	17	*
LEAF_NODE	1143:39	1143:39	17	)
FIELD	1143:40	1143:44	17	tv -> value
LEAF_NODE	1143:40	1143:40	18	tv
LEAF_NODE	1143:42	1143:42	18	->
LEAF_NODE	1143:44	1143:44	18	value
LEAF_NODE	1143:49	1143:49	17	)
LEAF_NODE	1143:50	1143:50	17	[
EXPR	1143:51	1143:51	17	0
FIELD	1143:51	1143:51	18	0
LEAF_NODE	1143:51	1143:51	19	0
LEAF_NODE	1143:52	1143:52	17	]
LEAF_NODE	1143:53	1143:53	16	;
LEAF_NODE	1144:6	1144:6	15	*
LEAF_NODE	1144:7	1144:7	15	va_arg
LEAF_NODE	1144:13	1144:13	15	(
LEAF_NODE	1144:14	1144:14	15	ap
LEAF_NODE	1144:16	1144:16	15	,
LEAF_NODE	1144:18	1144:18	15	uint16
LEAF_NODE	1144:24	1144:24	15	*
LEAF_NODE	1144:25	1144:25	15	)
LEAF_NODE	1144:27	1144:27	15	=
EXPR_STATEMENT	1144:29	1144:53	15	( ( uint16 * ) tv -> value ) [ 1 ] ;
EXPR	1144:29	1144:52	16	( ( uint16 * ) tv -> value ) [ 1 ]
LEAF_NODE	1144:29	1144:29	17	(
LEAF_NODE	1144:30	1144:30	17	(
TYPE_NAME	1144:31	1144:31	17	uint16
LEAF_NODE	1144:31	1144:31	18	uint16
LEAF_NODE	1144:38	1144:38	17	*
LEAF_NODE	1144:39	1144:39	17	)
FIELD	1144:40	1144:44	17	tv -> value
LEAF_NODE	1144:40	1144:40	18	tv
LEAF_NODE	1144:42	1144:42	18	->
LEAF_NODE	1144:44	1144:44	18	value
LEAF_NODE	1144:49	1144:49	17	)
LEAF_NODE	1144:50	1144:50	17	[
EXPR	1144:51	1144:51	17	1
FIELD	1144:51	1144:51	18	1
LEAF_NODE	1144:51	1144:51	19	1
LEAF_NODE	1144:52	1144:52	17	]
LEAF_NODE	1144:53	1144:53	16	;
EXPR_STATEMENT	1145:6	1145:17	15	ret_val = 1 ;
EXPR	1145:6	1145:6	16	ret_val = 1
ASSIGN	1145:6	1145:16	17	ret_val = 1
LVAL	1145:6	1145:6	18	ret_val
FIELD	1145:6	1145:6	19	ret_val
LEAF_NODE	1145:6	1145:6	20	ret_val
ASSIGN_OP	1145:14	1145:14	18	=
LEAF_NODE	1145:14	1145:14	19	=
RVAL	1145:16	1145:16	18	1
FIELD	1145:16	1145:16	19	1
LEAF_NODE	1145:16	1145:16	20	1
LEAF_NODE	1145:17	1145:17	16	;
LEAF_NODE	1146:5	1146:5	14	}
SELECTION	1146:7	1146:12	10	
KEYWORD	1146:7	1146:7	11	else
LEAF_NODE	1146:7	1146:7	12	else
STATEMENTS	1146:12	1218:5	11	
LEAF_NODE	1146:12	1146:12	12	{
STATEMENTS	1147:6	1154:8	12	
SELECTION	1147:6	1151:28	13	
KEYWORD	1147:6	1147:6	14	if
LEAF_NODE	1147:6	1147:6	15	if
LEAF_NODE	1147:9	1147:9	14	(
CONDITION	1147:10	1147:10	14	fip -> field_type == TIFF_ASCII || fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || tv -> count > 1
EXPR	1147:10	1147:10	15	fip -> field_type == TIFF_ASCII || fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || tv -> count > 1
OR	1147:10	1148:13	16	fip -> field_type == TIFF_ASCII || fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || tv -> count > 1
EXPR	1147:10	1147:29	17	fip -> field_type == TIFF_ASCII
FIELD	1147:10	1147:15	18	fip -> field_type
LEAF_NODE	1147:10	1147:10	19	fip
LEAF_NODE	1147:13	1147:13	19	->
LEAF_NODE	1147:15	1147:15	19	field_type
EQ_OPERATOR	1147:26	1147:26	18	==
LEAF_NODE	1147:26	1147:26	19	==
FIELD	1147:29	1147:29	18	TIFF_ASCII
LEAF_NODE	1147:29	1147:29	19	TIFF_ASCII
LEAF_NODE	1148:10	1148:10	17	||
EXPR	1148:13	1148:13	17	fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || tv -> count > 1
OR	1148:13	1149:13	18	fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || tv -> count > 1
EXPR	1148:13	1148:37	19	fip -> field_readcount == TIFF_VARIABLE
FIELD	1148:13	1148:18	20	fip -> field_readcount
LEAF_NODE	1148:13	1148:13	21	fip
LEAF_NODE	1148:16	1148:16	21	->
LEAF_NODE	1148:18	1148:18	21	field_readcount
EQ_OPERATOR	1148:34	1148:34	20	==
LEAF_NODE	1148:34	1148:34	21	==
FIELD	1148:37	1148:37	20	TIFF_VARIABLE
LEAF_NODE	1148:37	1148:37	21	TIFF_VARIABLE
LEAF_NODE	1149:10	1149:10	19	||
EXPR	1149:13	1149:13	19	fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || tv -> count > 1
OR	1149:13	1150:13	20	fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || tv -> count > 1
EXPR	1149:13	1149:37	21	fip -> field_readcount == TIFF_VARIABLE2
FIELD	1149:13	1149:18	22	fip -> field_readcount
LEAF_NODE	1149:13	1149:13	23	fip
LEAF_NODE	1149:16	1149:16	23	->
LEAF_NODE	1149:18	1149:18	23	field_readcount
EQ_OPERATOR	1149:34	1149:34	22	==
LEAF_NODE	1149:34	1149:34	23	==
FIELD	1149:37	1149:37	22	TIFF_VARIABLE2
LEAF_NODE	1149:37	1149:37	23	TIFF_VARIABLE2
LEAF_NODE	1150:10	1150:10	21	||
EXPR	1150:13	1150:13	21	fip -> field_readcount == TIFF_SPP || tv -> count > 1
OR	1150:13	1151:13	22	fip -> field_readcount == TIFF_SPP || tv -> count > 1
EXPR	1150:13	1150:37	23	fip -> field_readcount == TIFF_SPP
FIELD	1150:13	1150:18	24	fip -> field_readcount
LEAF_NODE	1150:13	1150:13	25	fip
LEAF_NODE	1150:16	1150:16	25	->
LEAF_NODE	1150:18	1150:18	25	field_readcount
EQ_OPERATOR	1150:34	1150:34	24	==
LEAF_NODE	1150:34	1150:34	25	==
FIELD	1150:37	1150:37	24	TIFF_SPP
LEAF_NODE	1150:37	1150:37	25	TIFF_SPP
LEAF_NODE	1151:10	1151:10	23	||
EXPR	1151:13	1151:25	23	tv -> count > 1
FIELD	1151:13	1151:17	24	tv -> count
LEAF_NODE	1151:13	1151:13	25	tv
LEAF_NODE	1151:15	1151:15	25	->
LEAF_NODE	1151:17	1151:17	25	count
REL_OPERATOR	1151:23	1151:23	24	>
LEAF_NODE	1151:23	1151:23	25	>
FIELD	1151:25	1151:25	24	1
LEAF_NODE	1151:25	1151:25	25	1
LEAF_NODE	1151:26	1151:26	14	)
STATEMENTS	1151:28	1154:6	14	
LEAF_NODE	1151:28	1151:28	15	{
STATEMENTS	1152:7	1153:7	15	
LEAF_NODE	1152:7	1152:7	16	*
LEAF_NODE	1152:8	1152:8	16	va_arg
LEAF_NODE	1152:14	1152:14	16	(
LEAF_NODE	1152:15	1152:15	16	ap
LEAF_NODE	1152:17	1152:17	16	,
LEAF_NODE	1152:19	1152:19	16	void
LEAF_NODE	1152:24	1152:24	16	*
LEAF_NODE	1152:25	1152:25	16	*
LEAF_NODE	1152:26	1152:26	16	)
LEAF_NODE	1152:28	1152:28	16	=
EXPR_STATEMENT	1152:30	1152:39	16	tv -> value ;
EXPR	1152:30	1152:30	17	tv -> value
FIELD	1152:30	1152:34	18	tv -> value
LEAF_NODE	1152:30	1152:30	19	tv
LEAF_NODE	1152:32	1152:32	19	->
LEAF_NODE	1152:34	1152:34	19	value
LEAF_NODE	1152:39	1152:39	17	;
EXPR_STATEMENT	1153:7	1153:18	16	ret_val = 1 ;
EXPR	1153:7	1153:7	17	ret_val = 1
ASSIGN	1153:7	1153:17	18	ret_val = 1
LVAL	1153:7	1153:7	19	ret_val
FIELD	1153:7	1153:7	20	ret_val
LEAF_NODE	1153:7	1153:7	21	ret_val
ASSIGN_OP	1153:15	1153:15	19	=
LEAF_NODE	1153:15	1153:15	20	=
RVAL	1153:17	1153:17	19	1
FIELD	1153:17	1153:17	20	1
LEAF_NODE	1153:17	1153:17	21	1
LEAF_NODE	1153:18	1153:18	17	;
LEAF_NODE	1154:6	1154:6	15	}
SELECTION	1154:8	1154:13	13	
KEYWORD	1154:8	1154:8	14	else
LEAF_NODE	1154:8	1154:8	15	else
STATEMENTS	1154:13	1217:6	14	
LEAF_NODE	1154:13	1154:13	15	{
STATEMENTS	1155:7	1157:7	15	
SIMPLE_DECL	1155:7	1155:36	16	char * val ; val = ( char * ) tv -> value ;
VAR_DECL	1155:7	1155:13	17	char * val ; val = ( char * ) tv -> value
TYPE	1155:7	1155:12	18	char *
TYPE_NAME	1155:7	1155:7	19	char
LEAF_NODE	1155:7	1155:7	20	char
POINTER	1155:12	1155:12	19	*
LEAF_NODE	1155:12	1155:12	20	*
NAME	1155:13	1155:13	18	val
LEAF_NODE	1155:13	1155:13	19	val
LEAF_NODE	0:0	0:0	18	;
INIT	1155:13	1155:13	18	val = ( char * ) tv -> value
ASSIGN	1155:13	1155:19	19	val = ( char * ) tv -> value
LVAL	1155:13	1155:13	20	val
NAME	1155:13	1155:13	21	val
LEAF_NODE	1155:13	1155:13	22	val
ASSIGN_OP	1155:17	1155:17	20	=
LEAF_NODE	1155:17	1155:17	21	=
RVAL	1155:19	1155:27	20	( char * ) tv -> value
LEAF_NODE	1155:19	1155:19	21	(
TYPE_NAME	1155:20	1155:20	21	char
LEAF_NODE	1155:20	1155:20	22	char
LEAF_NODE	1155:25	1155:25	21	*
LEAF_NODE	1155:26	1155:26	21	)
FIELD	1155:27	1155:31	21	tv -> value
LEAF_NODE	1155:27	1155:27	22	tv
LEAF_NODE	1155:29	1155:29	22	->
LEAF_NODE	1155:31	1155:31	22	value
LEAF_NODE	1155:36	1155:36	17	;
EXPR_STATEMENT	1156:7	1156:31	16	assert ( tv -> count == 1 ) ;
EXPR	1156:7	1156:7	17	assert ( tv -> count == 1 )
FUNCTION_CALL	1156:7	1156:30	18	assert ( tv -> count == 1 )
CALLEE	1156:7	1156:7	19	assert
LEAF_NODE	1156:7	1156:7	20	assert
LEAF_NODE	1156:13	1156:13	19	(
ARGUMENT	1156:15	1156:28	19	tv -> count == 1
FIELD	1156:15	1156:19	20	tv -> count
LEAF_NODE	1156:15	1156:15	21	tv
LEAF_NODE	1156:17	1156:17	21	->
LEAF_NODE	1156:19	1156:19	21	count
EQ_OPERATOR	1156:25	1156:25	20	==
LEAF_NODE	1156:25	1156:25	21	==
FIELD	1156:28	1156:28	20	1
LEAF_NODE	1156:28	1156:28	21	1
LEAF_NODE	1156:30	1156:30	19	)
LEAF_NODE	1156:31	1156:31	17	;
SELECTION	1157:7	1157:32	16	
KEYWORD	1157:7	1157:7	17	switch
LEAF_NODE	1157:7	1157:7	18	switch
LEAF_NODE	1157:14	1157:14	17	(
CONDITION	1157:15	1157:15	17	fip -> field_type
EXPR	1157:15	1157:15	18	fip -> field_type
FIELD	1157:15	1157:20	19	fip -> field_type
LEAF_NODE	1157:15	1157:15	20	fip
LEAF_NODE	1157:18	1157:18	20	->
LEAF_NODE	1157:20	1157:20	20	field_type
LEAF_NODE	1157:30	1157:30	17	)
STATEMENTS	1157:32	1216:7	17	
LEAF_NODE	1157:32	1157:32	18	{
STATEMENTS	1158:7	1215:8	18	
LABEL	1158:7	1158:21	19	case TIFF_BYTE :
LEAF_NODE	1158:7	1158:7	20	case
LEAF_NODE	1158:12	1158:12	20	TIFF_BYTE
LEAF_NODE	1158:21	1158:21	20	:
LABEL	1159:7	1159:26	19	case TIFF_UNDEFINED :
LEAF_NODE	1159:7	1159:7	20	case
LEAF_NODE	1159:12	1159:12	20	TIFF_UNDEFINED
LEAF_NODE	1159:26	1159:26	20	:
LEAF_NODE	1160:8	1160:8	19	*
LEAF_NODE	1160:9	1160:9	19	va_arg
LEAF_NODE	1160:15	1160:15	19	(
LEAF_NODE	1160:16	1160:16	19	ap
LEAF_NODE	1160:18	1160:18	19	,
LEAF_NODE	1160:20	1160:20	19	uint8
LEAF_NODE	1160:25	1160:25	19	*
LEAF_NODE	1160:26	1160:26	19	)
LEAF_NODE	1160:28	1160:28	19	=
LEAF_NODE	1161:9	1161:9	19	*
EXPR_STATEMENT	1161:10	1161:22	19	( uint8 * ) val ;
EXPR	1161:10	1161:19	20	( uint8 * ) val
LEAF_NODE	1161:10	1161:10	21	(
TYPE_NAME	1161:11	1161:11	21	uint8
LEAF_NODE	1161:11	1161:11	22	uint8
LEAF_NODE	1161:17	1161:17	21	*
LEAF_NODE	1161:18	1161:18	21	)
FIELD	1161:19	1161:19	21	val
LEAF_NODE	1161:19	1161:19	22	val
LEAF_NODE	1161:22	1161:22	20	;
EXPR_STATEMENT	1162:8	1162:19	19	ret_val = 1 ;
EXPR	1162:8	1162:8	20	ret_val = 1
ASSIGN	1162:8	1162:18	21	ret_val = 1
LVAL	1162:8	1162:8	22	ret_val
FIELD	1162:8	1162:8	23	ret_val
LEAF_NODE	1162:8	1162:8	24	ret_val
ASSIGN_OP	1162:16	1162:16	22	=
LEAF_NODE	1162:16	1162:16	23	=
RVAL	1162:18	1162:18	22	1
FIELD	1162:18	1162:18	23	1
LEAF_NODE	1162:18	1162:18	24	1
LEAF_NODE	1162:19	1162:19	20	;
JUMP_STATEMENT	1163:8	1163:13	19	break DESTINATION ;
KEYWORD	1163:8	1163:8	20	break
LEAF_NODE	1163:8	1163:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1163:13	1163:13	20	;
LABEL	1164:7	1164:22	19	case TIFF_SBYTE :
LEAF_NODE	1164:7	1164:7	20	case
LEAF_NODE	1164:12	1164:12	20	TIFF_SBYTE
LEAF_NODE	1164:22	1164:22	20	:
LEAF_NODE	1165:8	1165:8	19	*
LEAF_NODE	1165:9	1165:9	19	va_arg
LEAF_NODE	1165:15	1165:15	19	(
LEAF_NODE	1165:16	1165:16	19	ap
LEAF_NODE	1165:18	1165:18	19	,
LEAF_NODE	1165:20	1165:20	19	int8
LEAF_NODE	1165:24	1165:24	19	*
LEAF_NODE	1165:25	1165:25	19	)
LEAF_NODE	1165:27	1165:27	19	=
LEAF_NODE	1166:9	1166:9	19	*
EXPR_STATEMENT	1166:10	1166:21	19	( int8 * ) val ;
EXPR	1166:10	1166:18	20	( int8 * ) val
LEAF_NODE	1166:10	1166:10	21	(
TYPE_NAME	1166:11	1166:11	21	int8
LEAF_NODE	1166:11	1166:11	22	int8
LEAF_NODE	1166:16	1166:16	21	*
LEAF_NODE	1166:17	1166:17	21	)
FIELD	1166:18	1166:18	21	val
LEAF_NODE	1166:18	1166:18	22	val
LEAF_NODE	1166:21	1166:21	20	;
EXPR_STATEMENT	1167:8	1167:19	19	ret_val = 1 ;
EXPR	1167:8	1167:8	20	ret_val = 1
ASSIGN	1167:8	1167:18	21	ret_val = 1
LVAL	1167:8	1167:8	22	ret_val
FIELD	1167:8	1167:8	23	ret_val
LEAF_NODE	1167:8	1167:8	24	ret_val
ASSIGN_OP	1167:16	1167:16	22	=
LEAF_NODE	1167:16	1167:16	23	=
RVAL	1167:18	1167:18	22	1
FIELD	1167:18	1167:18	23	1
LEAF_NODE	1167:18	1167:18	24	1
LEAF_NODE	1167:19	1167:19	20	;
JUMP_STATEMENT	1168:8	1168:13	19	break DESTINATION ;
KEYWORD	1168:8	1168:8	20	break
LEAF_NODE	1168:8	1168:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1168:13	1168:13	20	;
LABEL	1169:7	1169:22	19	case TIFF_SHORT :
LEAF_NODE	1169:7	1169:7	20	case
LEAF_NODE	1169:12	1169:12	20	TIFF_SHORT
LEAF_NODE	1169:22	1169:22	20	:
LEAF_NODE	1170:8	1170:8	19	*
LEAF_NODE	1170:9	1170:9	19	va_arg
LEAF_NODE	1170:15	1170:15	19	(
LEAF_NODE	1170:16	1170:16	19	ap
LEAF_NODE	1170:18	1170:18	19	,
LEAF_NODE	1170:20	1170:20	19	uint16
LEAF_NODE	1170:26	1170:26	19	*
LEAF_NODE	1170:27	1170:27	19	)
LEAF_NODE	1170:29	1170:29	19	=
LEAF_NODE	1171:9	1171:9	19	*
EXPR_STATEMENT	1171:10	1171:23	19	( uint16 * ) val ;
EXPR	1171:10	1171:20	20	( uint16 * ) val
LEAF_NODE	1171:10	1171:10	21	(
TYPE_NAME	1171:11	1171:11	21	uint16
LEAF_NODE	1171:11	1171:11	22	uint16
LEAF_NODE	1171:18	1171:18	21	*
LEAF_NODE	1171:19	1171:19	21	)
FIELD	1171:20	1171:20	21	val
LEAF_NODE	1171:20	1171:20	22	val
LEAF_NODE	1171:23	1171:23	20	;
EXPR_STATEMENT	1172:8	1172:19	19	ret_val = 1 ;
EXPR	1172:8	1172:8	20	ret_val = 1
ASSIGN	1172:8	1172:18	21	ret_val = 1
LVAL	1172:8	1172:8	22	ret_val
FIELD	1172:8	1172:8	23	ret_val
LEAF_NODE	1172:8	1172:8	24	ret_val
ASSIGN_OP	1172:16	1172:16	22	=
LEAF_NODE	1172:16	1172:16	23	=
RVAL	1172:18	1172:18	22	1
FIELD	1172:18	1172:18	23	1
LEAF_NODE	1172:18	1172:18	24	1
LEAF_NODE	1172:19	1172:19	20	;
JUMP_STATEMENT	1173:8	1173:13	19	break DESTINATION ;
KEYWORD	1173:8	1173:8	20	break
LEAF_NODE	1173:8	1173:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1173:13	1173:13	20	;
LABEL	1174:7	1174:23	19	case TIFF_SSHORT :
LEAF_NODE	1174:7	1174:7	20	case
LEAF_NODE	1174:12	1174:12	20	TIFF_SSHORT
LEAF_NODE	1174:23	1174:23	20	:
LEAF_NODE	1175:8	1175:8	19	*
LEAF_NODE	1175:9	1175:9	19	va_arg
LEAF_NODE	1175:15	1175:15	19	(
LEAF_NODE	1175:16	1175:16	19	ap
LEAF_NODE	1175:18	1175:18	19	,
LEAF_NODE	1175:20	1175:20	19	int16
LEAF_NODE	1175:25	1175:25	19	*
LEAF_NODE	1175:26	1175:26	19	)
LEAF_NODE	1175:28	1175:28	19	=
LEAF_NODE	1176:9	1176:9	19	*
EXPR_STATEMENT	1176:10	1176:22	19	( int16 * ) val ;
EXPR	1176:10	1176:19	20	( int16 * ) val
LEAF_NODE	1176:10	1176:10	21	(
TYPE_NAME	1176:11	1176:11	21	int16
LEAF_NODE	1176:11	1176:11	22	int16
LEAF_NODE	1176:17	1176:17	21	*
LEAF_NODE	1176:18	1176:18	21	)
FIELD	1176:19	1176:19	21	val
LEAF_NODE	1176:19	1176:19	22	val
LEAF_NODE	1176:22	1176:22	20	;
EXPR_STATEMENT	1177:8	1177:19	19	ret_val = 1 ;
EXPR	1177:8	1177:8	20	ret_val = 1
ASSIGN	1177:8	1177:18	21	ret_val = 1
LVAL	1177:8	1177:8	22	ret_val
FIELD	1177:8	1177:8	23	ret_val
LEAF_NODE	1177:8	1177:8	24	ret_val
ASSIGN_OP	1177:16	1177:16	22	=
LEAF_NODE	1177:16	1177:16	23	=
RVAL	1177:18	1177:18	22	1
FIELD	1177:18	1177:18	23	1
LEAF_NODE	1177:18	1177:18	24	1
LEAF_NODE	1177:19	1177:19	20	;
JUMP_STATEMENT	1178:8	1178:13	19	break DESTINATION ;
KEYWORD	1178:8	1178:8	20	break
LEAF_NODE	1178:8	1178:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1178:13	1178:13	20	;
LABEL	1179:7	1179:21	19	case TIFF_LONG :
LEAF_NODE	1179:7	1179:7	20	case
LEAF_NODE	1179:12	1179:12	20	TIFF_LONG
LEAF_NODE	1179:21	1179:21	20	:
LABEL	1180:7	1180:20	19	case TIFF_IFD :
LEAF_NODE	1180:7	1180:7	20	case
LEAF_NODE	1180:12	1180:12	20	TIFF_IFD
LEAF_NODE	1180:20	1180:20	20	:
LEAF_NODE	1181:8	1181:8	19	*
LEAF_NODE	1181:9	1181:9	19	va_arg
LEAF_NODE	1181:15	1181:15	19	(
LEAF_NODE	1181:16	1181:16	19	ap
LEAF_NODE	1181:18	1181:18	19	,
LEAF_NODE	1181:20	1181:20	19	uint32
LEAF_NODE	1181:26	1181:26	19	*
LEAF_NODE	1181:27	1181:27	19	)
LEAF_NODE	1181:29	1181:29	19	=
LEAF_NODE	1182:9	1182:9	19	*
EXPR_STATEMENT	1182:10	1182:23	19	( uint32 * ) val ;
EXPR	1182:10	1182:20	20	( uint32 * ) val
LEAF_NODE	1182:10	1182:10	21	(
TYPE_NAME	1182:11	1182:11	21	uint32
LEAF_NODE	1182:11	1182:11	22	uint32
LEAF_NODE	1182:18	1182:18	21	*
LEAF_NODE	1182:19	1182:19	21	)
FIELD	1182:20	1182:20	21	val
LEAF_NODE	1182:20	1182:20	22	val
LEAF_NODE	1182:23	1182:23	20	;
EXPR_STATEMENT	1183:8	1183:19	19	ret_val = 1 ;
EXPR	1183:8	1183:8	20	ret_val = 1
ASSIGN	1183:8	1183:18	21	ret_val = 1
LVAL	1183:8	1183:8	22	ret_val
FIELD	1183:8	1183:8	23	ret_val
LEAF_NODE	1183:8	1183:8	24	ret_val
ASSIGN_OP	1183:16	1183:16	22	=
LEAF_NODE	1183:16	1183:16	23	=
RVAL	1183:18	1183:18	22	1
FIELD	1183:18	1183:18	23	1
LEAF_NODE	1183:18	1183:18	24	1
LEAF_NODE	1183:19	1183:19	20	;
JUMP_STATEMENT	1184:8	1184:13	19	break DESTINATION ;
KEYWORD	1184:8	1184:8	20	break
LEAF_NODE	1184:8	1184:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1184:13	1184:13	20	;
LABEL	1185:7	1185:22	19	case TIFF_SLONG :
LEAF_NODE	1185:7	1185:7	20	case
LEAF_NODE	1185:12	1185:12	20	TIFF_SLONG
LEAF_NODE	1185:22	1185:22	20	:
LEAF_NODE	1186:8	1186:8	19	*
LEAF_NODE	1186:9	1186:9	19	va_arg
LEAF_NODE	1186:15	1186:15	19	(
LEAF_NODE	1186:16	1186:16	19	ap
LEAF_NODE	1186:18	1186:18	19	,
LEAF_NODE	1186:20	1186:20	19	int32
LEAF_NODE	1186:25	1186:25	19	*
LEAF_NODE	1186:26	1186:26	19	)
LEAF_NODE	1186:28	1186:28	19	=
LEAF_NODE	1187:9	1187:9	19	*
EXPR_STATEMENT	1187:10	1187:22	19	( int32 * ) val ;
EXPR	1187:10	1187:19	20	( int32 * ) val
LEAF_NODE	1187:10	1187:10	21	(
TYPE_NAME	1187:11	1187:11	21	int32
LEAF_NODE	1187:11	1187:11	22	int32
LEAF_NODE	1187:17	1187:17	21	*
LEAF_NODE	1187:18	1187:18	21	)
FIELD	1187:19	1187:19	21	val
LEAF_NODE	1187:19	1187:19	22	val
LEAF_NODE	1187:22	1187:22	20	;
EXPR_STATEMENT	1188:8	1188:19	19	ret_val = 1 ;
EXPR	1188:8	1188:8	20	ret_val = 1
ASSIGN	1188:8	1188:18	21	ret_val = 1
LVAL	1188:8	1188:8	22	ret_val
FIELD	1188:8	1188:8	23	ret_val
LEAF_NODE	1188:8	1188:8	24	ret_val
ASSIGN_OP	1188:16	1188:16	22	=
LEAF_NODE	1188:16	1188:16	23	=
RVAL	1188:18	1188:18	22	1
FIELD	1188:18	1188:18	23	1
LEAF_NODE	1188:18	1188:18	24	1
LEAF_NODE	1188:19	1188:19	20	;
JUMP_STATEMENT	1189:8	1189:13	19	break DESTINATION ;
KEYWORD	1189:8	1189:8	20	break
LEAF_NODE	1189:8	1189:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1189:13	1189:13	20	;
LABEL	1190:7	1190:22	19	case TIFF_LONG8 :
LEAF_NODE	1190:7	1190:7	20	case
LEAF_NODE	1190:12	1190:12	20	TIFF_LONG8
LEAF_NODE	1190:22	1190:22	20	:
LABEL	1191:7	1191:21	19	case TIFF_IFD8 :
LEAF_NODE	1191:7	1191:7	20	case
LEAF_NODE	1191:12	1191:12	20	TIFF_IFD8
LEAF_NODE	1191:21	1191:21	20	:
LEAF_NODE	1192:8	1192:8	19	*
LEAF_NODE	1192:9	1192:9	19	va_arg
LEAF_NODE	1192:15	1192:15	19	(
LEAF_NODE	1192:16	1192:16	19	ap
LEAF_NODE	1192:18	1192:18	19	,
LEAF_NODE	1192:20	1192:20	19	uint64
LEAF_NODE	1192:26	1192:26	19	*
LEAF_NODE	1192:27	1192:27	19	)
LEAF_NODE	1192:29	1192:29	19	=
LEAF_NODE	1193:9	1193:9	19	*
EXPR_STATEMENT	1193:10	1193:23	19	( uint64 * ) val ;
EXPR	1193:10	1193:20	20	( uint64 * ) val
LEAF_NODE	1193:10	1193:10	21	(
TYPE_NAME	1193:11	1193:11	21	uint64
LEAF_NODE	1193:11	1193:11	22	uint64
LEAF_NODE	1193:18	1193:18	21	*
LEAF_NODE	1193:19	1193:19	21	)
FIELD	1193:20	1193:20	21	val
LEAF_NODE	1193:20	1193:20	22	val
LEAF_NODE	1193:23	1193:23	20	;
EXPR_STATEMENT	1194:8	1194:19	19	ret_val = 1 ;
EXPR	1194:8	1194:8	20	ret_val = 1
ASSIGN	1194:8	1194:18	21	ret_val = 1
LVAL	1194:8	1194:8	22	ret_val
FIELD	1194:8	1194:8	23	ret_val
LEAF_NODE	1194:8	1194:8	24	ret_val
ASSIGN_OP	1194:16	1194:16	22	=
LEAF_NODE	1194:16	1194:16	23	=
RVAL	1194:18	1194:18	22	1
FIELD	1194:18	1194:18	23	1
LEAF_NODE	1194:18	1194:18	24	1
LEAF_NODE	1194:19	1194:19	20	;
JUMP_STATEMENT	1195:8	1195:13	19	break DESTINATION ;
KEYWORD	1195:8	1195:8	20	break
LEAF_NODE	1195:8	1195:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1195:13	1195:13	20	;
LABEL	1196:7	1196:23	19	case TIFF_SLONG8 :
LEAF_NODE	1196:7	1196:7	20	case
LEAF_NODE	1196:12	1196:12	20	TIFF_SLONG8
LEAF_NODE	1196:23	1196:23	20	:
LEAF_NODE	1197:8	1197:8	19	*
LEAF_NODE	1197:9	1197:9	19	va_arg
LEAF_NODE	1197:15	1197:15	19	(
LEAF_NODE	1197:16	1197:16	19	ap
LEAF_NODE	1197:18	1197:18	19	,
LEAF_NODE	1197:20	1197:20	19	int64
LEAF_NODE	1197:25	1197:25	19	*
LEAF_NODE	1197:26	1197:26	19	)
LEAF_NODE	1197:28	1197:28	19	=
LEAF_NODE	1198:9	1198:9	19	*
EXPR_STATEMENT	1198:10	1198:22	19	( int64 * ) val ;
EXPR	1198:10	1198:19	20	( int64 * ) val
LEAF_NODE	1198:10	1198:10	21	(
TYPE_NAME	1198:11	1198:11	21	int64
LEAF_NODE	1198:11	1198:11	22	int64
LEAF_NODE	1198:17	1198:17	21	*
LEAF_NODE	1198:18	1198:18	21	)
FIELD	1198:19	1198:19	21	val
LEAF_NODE	1198:19	1198:19	22	val
LEAF_NODE	1198:22	1198:22	20	;
EXPR_STATEMENT	1199:8	1199:19	19	ret_val = 1 ;
EXPR	1199:8	1199:8	20	ret_val = 1
ASSIGN	1199:8	1199:18	21	ret_val = 1
LVAL	1199:8	1199:8	22	ret_val
FIELD	1199:8	1199:8	23	ret_val
LEAF_NODE	1199:8	1199:8	24	ret_val
ASSIGN_OP	1199:16	1199:16	22	=
LEAF_NODE	1199:16	1199:16	23	=
RVAL	1199:18	1199:18	22	1
FIELD	1199:18	1199:18	23	1
LEAF_NODE	1199:18	1199:18	24	1
LEAF_NODE	1199:19	1199:19	20	;
JUMP_STATEMENT	1200:8	1200:13	19	break DESTINATION ;
KEYWORD	1200:8	1200:8	20	break
LEAF_NODE	1200:8	1200:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1200:13	1200:13	20	;
LABEL	1201:7	1201:25	19	case TIFF_RATIONAL :
LEAF_NODE	1201:7	1201:7	20	case
LEAF_NODE	1201:12	1201:12	20	TIFF_RATIONAL
LEAF_NODE	1201:25	1201:25	20	:
LABEL	1202:7	1202:26	19	case TIFF_SRATIONAL :
LEAF_NODE	1202:7	1202:7	20	case
LEAF_NODE	1202:12	1202:12	20	TIFF_SRATIONAL
LEAF_NODE	1202:26	1202:26	20	:
LABEL	1203:7	1203:22	19	case TIFF_FLOAT :
LEAF_NODE	1203:7	1203:7	20	case
LEAF_NODE	1203:12	1203:12	20	TIFF_FLOAT
LEAF_NODE	1203:22	1203:22	20	:
LEAF_NODE	1204:8	1204:8	19	*
LEAF_NODE	1204:9	1204:9	19	va_arg
LEAF_NODE	1204:15	1204:15	19	(
LEAF_NODE	1204:16	1204:16	19	ap
LEAF_NODE	1204:18	1204:18	19	,
LEAF_NODE	1204:20	1204:20	19	float
LEAF_NODE	1204:25	1204:25	19	*
LEAF_NODE	1204:26	1204:26	19	)
LEAF_NODE	1204:28	1204:28	19	=
LEAF_NODE	1205:9	1205:9	19	*
EXPR_STATEMENT	1205:10	1205:22	19	( float * ) val ;
EXPR	1205:10	1205:19	20	( float * ) val
LEAF_NODE	1205:10	1205:10	21	(
TYPE_NAME	1205:11	1205:11	21	float
LEAF_NODE	1205:11	1205:11	22	float
LEAF_NODE	1205:17	1205:17	21	*
LEAF_NODE	1205:18	1205:18	21	)
FIELD	1205:19	1205:19	21	val
LEAF_NODE	1205:19	1205:19	22	val
LEAF_NODE	1205:22	1205:22	20	;
EXPR_STATEMENT	1206:8	1206:19	19	ret_val = 1 ;
EXPR	1206:8	1206:8	20	ret_val = 1
ASSIGN	1206:8	1206:18	21	ret_val = 1
LVAL	1206:8	1206:8	22	ret_val
FIELD	1206:8	1206:8	23	ret_val
LEAF_NODE	1206:8	1206:8	24	ret_val
ASSIGN_OP	1206:16	1206:16	22	=
LEAF_NODE	1206:16	1206:16	23	=
RVAL	1206:18	1206:18	22	1
FIELD	1206:18	1206:18	23	1
LEAF_NODE	1206:18	1206:18	24	1
LEAF_NODE	1206:19	1206:19	20	;
JUMP_STATEMENT	1207:8	1207:13	19	break DESTINATION ;
KEYWORD	1207:8	1207:8	20	break
LEAF_NODE	1207:8	1207:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1207:13	1207:13	20	;
LABEL	1208:7	1208:23	19	case TIFF_DOUBLE :
LEAF_NODE	1208:7	1208:7	20	case
LEAF_NODE	1208:12	1208:12	20	TIFF_DOUBLE
LEAF_NODE	1208:23	1208:23	20	:
LEAF_NODE	1209:8	1209:8	19	*
LEAF_NODE	1209:9	1209:9	19	va_arg
LEAF_NODE	1209:15	1209:15	19	(
LEAF_NODE	1209:16	1209:16	19	ap
LEAF_NODE	1209:18	1209:18	19	,
LEAF_NODE	1209:20	1209:20	19	double
LEAF_NODE	1209:26	1209:26	19	*
LEAF_NODE	1209:27	1209:27	19	)
LEAF_NODE	1209:29	1209:29	19	=
LEAF_NODE	1210:9	1210:9	19	*
EXPR_STATEMENT	1210:10	1210:23	19	( double * ) val ;
EXPR	1210:10	1210:20	20	( double * ) val
LEAF_NODE	1210:10	1210:10	21	(
TYPE_NAME	1210:11	1210:11	21	double
LEAF_NODE	1210:11	1210:11	22	double
LEAF_NODE	1210:18	1210:18	21	*
LEAF_NODE	1210:19	1210:19	21	)
FIELD	1210:20	1210:20	21	val
LEAF_NODE	1210:20	1210:20	22	val
LEAF_NODE	1210:23	1210:23	20	;
EXPR_STATEMENT	1211:8	1211:19	19	ret_val = 1 ;
EXPR	1211:8	1211:8	20	ret_val = 1
ASSIGN	1211:8	1211:18	21	ret_val = 1
LVAL	1211:8	1211:8	22	ret_val
FIELD	1211:8	1211:8	23	ret_val
LEAF_NODE	1211:8	1211:8	24	ret_val
ASSIGN_OP	1211:16	1211:16	22	=
LEAF_NODE	1211:16	1211:16	23	=
RVAL	1211:18	1211:18	22	1
FIELD	1211:18	1211:18	23	1
LEAF_NODE	1211:18	1211:18	24	1
LEAF_NODE	1211:19	1211:19	20	;
JUMP_STATEMENT	1212:8	1212:13	19	break DESTINATION ;
KEYWORD	1212:8	1212:8	20	break
LEAF_NODE	1212:8	1212:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1212:13	1212:13	20	;
LABEL	1213:7	1213:14	19	default :
LEAF_NODE	1213:7	1213:7	20	default
LEAF_NODE	1213:14	1213:14	20	:
EXPR_STATEMENT	1214:8	1214:19	19	ret_val = 0 ;
EXPR	1214:8	1214:8	20	ret_val = 0
ASSIGN	1214:8	1214:18	21	ret_val = 0
LVAL	1214:8	1214:8	22	ret_val
FIELD	1214:8	1214:8	23	ret_val
LEAF_NODE	1214:8	1214:8	24	ret_val
ASSIGN_OP	1214:16	1214:16	22	=
LEAF_NODE	1214:16	1214:16	23	=
RVAL	1214:18	1214:18	22	0
FIELD	1214:18	1214:18	23	0
LEAF_NODE	1214:18	1214:18	24	0
LEAF_NODE	1214:19	1214:19	20	;
JUMP_STATEMENT	1215:8	1215:13	19	break DESTINATION ;
KEYWORD	1215:8	1215:8	20	break
LEAF_NODE	1215:8	1215:8	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	1215:13	1215:13	20	;
LEAF_NODE	1216:7	1216:7	18	}
LEAF_NODE	1217:6	1217:6	15	}
LEAF_NODE	1218:5	1218:5	12	}
JUMP_STATEMENT	1219:5	1219:10	10	break DESTINATION ;
KEYWORD	1219:5	1219:5	11	break
LEAF_NODE	1219:5	1219:5	12	break
LEAF_NODE	0:0	0:0	11	DESTINATION
LEAF_NODE	1219:10	1219:10	11	;
LEAF_NODE	1220:4	1220:4	9	}
LEAF_NODE	1221:3	1221:3	6	}
LEAF_NODE	1222:1	1222:1	5	}
LEAF_NODE	1223:1	1223:1	3	return
LEAF_NODE	1223:7	1223:7	3	(
LEAF_NODE	1223:8	1223:8	3	ret_val
LEAF_NODE	1223:15	1223:15	3	)
LEAF_NODE	1223:16	1223:16	3	;
LEAF_NODE	1224:0	1224:0	2	}
SIMPLE_DECL	1233:1	1233:11	1	int status ;
VAR_DECL	1233:1	1233:5	2	int status
TYPE	1233:1	1233:1	3	int
TYPE_NAME	1233:1	1233:1	4	int
LEAF_NODE	1233:1	1233:1	5	int
NAME	1233:5	1233:5	3	status
LEAF_NODE	1233:5	1233:5	4	status
LEAF_NODE	1233:11	1233:11	2	;
SIMPLE_DECL	1234:1	1234:11	1	va_list ap ;
VAR_DECL	1234:1	1234:9	2	va_list ap
TYPE	1234:1	1234:1	3	va_list
TYPE_NAME	1234:1	1234:1	4	va_list
LEAF_NODE	1234:1	1234:1	5	va_list
NAME	1234:9	1234:9	3	ap
LEAF_NODE	1234:9	1234:9	4	ap
LEAF_NODE	1234:11	1234:11	2	;
FUNCTION_DEF	1248:0	1254:0	1	
RETURN_TYPE	1248:0	1248:0	2	int
TYPE_NAME	1248:0	1248:0	3	int
LEAF_NODE	1248:0	1248:0	4	int
FUNCTION_NAME	1249:0	1249:0	2	TIFFVGetField
LEAF_NODE	1249:0	1249:0	3	TIFFVGetField
PARAMETER_LIST	1249:13	1249:47	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	1249:13	1249:13	3	(
PARAMETER_DECL	1249:14	1249:20	3	TIFF * tif
TYPE	1249:14	1249:18	4	TIFF *
TYPE_NAME	1249:14	1249:14	5	TIFF
LEAF_NODE	1249:14	1249:14	6	TIFF
POINTER	1249:18	1249:18	5	*
LEAF_NODE	1249:18	1249:18	6	*
NAME	1249:20	1249:20	4	tif
LEAF_NODE	1249:20	1249:20	5	tif
LEAF_NODE	1249:23	1249:23	3	,
PARAMETER_DECL	1249:25	1249:32	3	uint32 tag
TYPE	1249:25	1249:25	4	uint32
TYPE_NAME	1249:25	1249:25	5	uint32
LEAF_NODE	1249:25	1249:25	6	uint32
NAME	1249:32	1249:32	4	tag
LEAF_NODE	1249:32	1249:32	5	tag
LEAF_NODE	1249:35	1249:35	3	,
PARAMETER_DECL	1249:37	1249:45	3	va_list ap
TYPE	1249:37	1249:37	4	va_list
TYPE_NAME	1249:37	1249:37	5	va_list
LEAF_NODE	1249:37	1249:37	6	va_list
NAME	1249:45	1249:45	4	ap
LEAF_NODE	1249:45	1249:45	5	ap
LEAF_NODE	1249:47	1249:47	3	)
LEAF_NODE	1250:0	1250:0	2	{
STATEMENTS	1251:1	1252:1	2	
SIMPLE_DECL	1251:1	1251:57	3	const TIFFField * fip ; fip = TIFFFindField ( tif , tag , TIFF_ANY ) ;
VAR_DECL	1251:1	1251:18	4	const TIFFField * fip ; fip = TIFFFindField ( tif , tag , TIFF_ANY )
TYPE	1251:1	1251:16	5	const TIFFField *
TYPE_NAME	1251:1	1251:7	6	const TIFFField
LEAF_NODE	1251:1	1251:1	7	const
LEAF_NODE	1251:7	1251:7	7	TIFFField
POINTER	1251:16	1251:16	6	*
LEAF_NODE	1251:16	1251:16	7	*
NAME	1251:18	1251:18	5	fip
LEAF_NODE	1251:18	1251:18	6	fip
LEAF_NODE	0:0	0:0	5	;
INIT	1251:18	1251:18	5	fip = TIFFFindField ( tif , tag , TIFF_ANY )
ASSIGN	1251:18	1251:24	6	fip = TIFFFindField ( tif , tag , TIFF_ANY )
LVAL	1251:18	1251:18	7	fip
NAME	1251:18	1251:18	8	fip
LEAF_NODE	1251:18	1251:18	9	fip
ASSIGN_OP	1251:22	1251:22	7	=
LEAF_NODE	1251:22	1251:22	8	=
RVAL	1251:24	1251:24	7	TIFFFindField ( tif , tag , TIFF_ANY )
FUNCTION_CALL	1251:24	1251:56	8	TIFFFindField ( tif , tag , TIFF_ANY )
CALLEE	1251:24	1251:24	9	TIFFFindField
LEAF_NODE	1251:24	1251:24	10	TIFFFindField
LEAF_NODE	1251:37	1251:37	9	(
ARGUMENT	1251:38	1251:38	9	tif
FIELD	1251:38	1251:38	10	tif
LEAF_NODE	1251:38	1251:38	11	tif
LEAF_NODE	1251:41	1251:41	9	,
ARGUMENT	1251:43	1251:43	9	tag
FIELD	1251:43	1251:43	10	tag
LEAF_NODE	1251:43	1251:43	11	tag
LEAF_NODE	1251:46	1251:46	9	,
ARGUMENT	1251:48	1251:48	9	TIFF_ANY
FIELD	1251:48	1251:48	10	TIFF_ANY
LEAF_NODE	1251:48	1251:48	11	TIFF_ANY
LEAF_NODE	1251:56	1251:56	9	)
LEAF_NODE	1251:57	1251:57	4	;
JUMP_STATEMENT	1252:1	1253:56	3	return ( fip && ( isPseudoTag ( tag ) || TIFFFieldSet ( tif , fip -> field_bit ) ) ? ( * tif -> tif_tagmethods . vgetfield ) ( tif , tag , ap ) : 0 ) ;
KEYWORD	1252:1	1252:1	4	return
LEAF_NODE	1252:1	1252:1	5	return
DESTINATION	1252:8	1252:8	4	( fip && ( isPseudoTag ( tag ) || TIFFFieldSet ( tif , fip -> field_bit ) ) ? ( * tif -> tif_tagmethods . vgetfield ) ( tif , tag , ap ) : 0 )
EXPR	1252:8	1253:55	5	( fip && ( isPseudoTag ( tag ) || TIFFFieldSet ( tif , fip -> field_bit ) ) ? ( * tif -> tif_tagmethods . vgetfield ) ( tif , tag , ap ) : 0 )
LEAF_NODE	1252:8	1252:8	6	(
COND_EXPR	1252:9	1253:54	6	fip && ( isPseudoTag ( tag ) || TIFFFieldSet ( tif , fip -> field_bit ) ) ? ( * tif -> tif_tagmethods . vgetfield ) ( tif , tag , ap ) : 0
CONDITION	1252:9	1252:9	7	fip && ( isPseudoTag ( tag ) || TIFFFieldSet ( tif , fip -> field_bit ) )
AND	1252:9	1252:16	8	fip && ( isPseudoTag ( tag ) || TIFFFieldSet ( tif , fip -> field_bit ) )
EXPR	1252:9	1252:9	9	fip
FIELD	1252:9	1252:9	10	fip
LEAF_NODE	1252:9	1252:9	11	fip
LEAF_NODE	1252:13	1252:13	9	&&
EXPR	1252:16	1252:70	9	( isPseudoTag ( tag ) || TIFFFieldSet ( tif , fip -> field_bit ) )
LEAF_NODE	1252:16	1252:16	10	(
OR	1252:17	1252:37	10	isPseudoTag ( tag ) || TIFFFieldSet ( tif , fip -> field_bit )
EXPR	1252:17	1252:17	11	isPseudoTag ( tag )
FUNCTION_CALL	1252:17	1252:32	12	isPseudoTag ( tag )
CALLEE	1252:17	1252:17	13	isPseudoTag
LEAF_NODE	1252:17	1252:17	14	isPseudoTag
LEAF_NODE	1252:28	1252:28	13	(
ARGUMENT	1252:29	1252:29	13	tag
FIELD	1252:29	1252:29	14	tag
LEAF_NODE	1252:29	1252:29	15	tag
LEAF_NODE	1252:32	1252:32	13	)
LEAF_NODE	1252:34	1252:34	11	||
EXPR	1252:37	1252:37	11	TIFFFieldSet ( tif , fip -> field_bit )
FUNCTION_CALL	1252:37	1252:69	12	TIFFFieldSet ( tif , fip -> field_bit )
CALLEE	1252:37	1252:37	13	TIFFFieldSet
LEAF_NODE	1252:37	1252:37	14	TIFFFieldSet
LEAF_NODE	1252:49	1252:49	13	(
ARGUMENT	1252:50	1252:50	13	tif
FIELD	1252:50	1252:50	14	tif
LEAF_NODE	1252:50	1252:50	15	tif
LEAF_NODE	1252:53	1252:53	13	,
ARGUMENT	1252:55	1252:55	13	fip -> field_bit
FIELD	1252:55	1252:60	14	fip -> field_bit
LEAF_NODE	1252:55	1252:55	15	fip
LEAF_NODE	1252:58	1252:58	15	->
LEAF_NODE	1252:60	1252:60	15	field_bit
LEAF_NODE	1252:69	1252:69	13	)
LEAF_NODE	1252:70	1252:70	10	)
LEAF_NODE	1252:72	1252:72	7	?
EXPR	1253:5	1253:5	7	( * tif -> tif_tagmethods . vgetfield ) ( tif , tag , ap )
FUNCTION_CALL	1253:5	1253:50	8	( * tif -> tif_tagmethods . vgetfield ) ( tif , tag , ap )
CALLEE	1253:5	1253:36	9	( * tif -> tif_tagmethods . vgetfield )
LEAF_NODE	1253:5	1253:5	10	(
UNARY_EXPR	1253:6	1253:7	10	* tif -> tif_tagmethods . vgetfield
UNARY_OPERATOR	1253:6	1253:6	11	*
LEAF_NODE	1253:6	1253:6	12	*
FIELD	1253:7	1253:27	11	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1253:7	1253:7	12	tif
LEAF_NODE	1253:10	1253:10	12	->
LEAF_NODE	1253:12	1253:12	12	tif_tagmethods
LEAF_NODE	1253:26	1253:26	12	.
LEAF_NODE	1253:27	1253:27	12	vgetfield
LEAF_NODE	1253:36	1253:36	10	)
LEAF_NODE	1253:37	1253:37	9	(
ARGUMENT	1253:38	1253:38	9	tif
FIELD	1253:38	1253:38	10	tif
LEAF_NODE	1253:38	1253:38	11	tif
LEAF_NODE	1253:41	1253:41	9	,
ARGUMENT	1253:43	1253:43	9	tag
FIELD	1253:43	1253:43	10	tag
LEAF_NODE	1253:43	1253:43	11	tag
LEAF_NODE	1253:46	1253:46	9	,
ARGUMENT	1253:48	1253:48	9	ap
FIELD	1253:48	1253:48	10	ap
LEAF_NODE	1253:48	1253:48	11	ap
LEAF_NODE	1253:50	1253:50	9	)
LEAF_NODE	1253:52	1253:52	7	:
FIELD	1253:54	1253:54	7	0
LEAF_NODE	1253:54	1253:54	8	0
LEAF_NODE	1253:55	1253:55	6	)
LEAF_NODE	1253:56	1253:56	4	;
LEAF_NODE	1254:0	1254:0	2	}
FUNCTION_DEF	1266:0	1302:0	1	
RETURN_TYPE	1266:0	1266:0	2	void
TYPE_NAME	1266:0	1266:0	3	void
LEAF_NODE	1266:0	1266:0	4	void
FUNCTION_NAME	1267:0	1267:0	2	TIFFFreeDirectory
LEAF_NODE	1267:0	1267:0	3	TIFFFreeDirectory
PARAMETER_LIST	1267:17	1267:27	2	( TIFF * tif )
LEAF_NODE	1267:17	1267:17	3	(
PARAMETER_DECL	1267:18	1267:24	3	TIFF * tif
TYPE	1267:18	1267:22	4	TIFF *
TYPE_NAME	1267:18	1267:18	5	TIFF
LEAF_NODE	1267:18	1267:18	6	TIFF
POINTER	1267:22	1267:22	5	*
LEAF_NODE	1267:22	1267:22	6	*
NAME	1267:24	1267:24	4	tif
LEAF_NODE	1267:24	1267:24	5	tif
LEAF_NODE	1267:27	1267:27	3	)
LEAF_NODE	1268:0	1268:0	2	{
STATEMENTS	1269:1	1301:8	2	
SIMPLE_DECL	1269:1	1269:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1269:1	1269:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1269:1	1269:15	5	TIFFDirectory *
TYPE_NAME	1269:1	1269:1	6	TIFFDirectory
LEAF_NODE	1269:1	1269:1	7	TIFFDirectory
POINTER	1269:15	1269:15	6	*
LEAF_NODE	1269:15	1269:15	7	*
NAME	1269:16	1269:16	5	td
LEAF_NODE	1269:16	1269:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1269:16	1269:16	5	td = & tif -> tif_dir
ASSIGN	1269:16	1269:21	6	td = & tif -> tif_dir
LVAL	1269:16	1269:16	7	td
NAME	1269:16	1269:16	8	td
LEAF_NODE	1269:16	1269:16	9	td
ASSIGN_OP	1269:19	1269:19	7	=
LEAF_NODE	1269:19	1269:19	8	=
RVAL	1269:21	1269:21	7	& tif -> tif_dir
UNARY_EXPR	1269:21	1269:22	8	& tif -> tif_dir
UNARY_OPERATOR	1269:21	1269:21	9	&
LEAF_NODE	1269:21	1269:21	10	&
FIELD	1269:22	1269:27	9	tif -> tif_dir
LEAF_NODE	1269:22	1269:22	10	tif
LEAF_NODE	1269:25	1269:25	10	->
LEAF_NODE	1269:27	1269:27	10	tif_dir
LEAF_NODE	1269:34	1269:34	4	;
SIMPLE_DECL	1270:1	1270:17	3	int i ;
VAR_DECL	1270:1	1270:16	4	int i
TYPE	1270:1	1270:1	5	int
TYPE_NAME	1270:1	1270:1	6	int
LEAF_NODE	1270:1	1270:1	7	int
NAME	1270:16	1270:16	5	i
LEAF_NODE	1270:16	1270:16	6	i
LEAF_NODE	1270:17	1270:17	4	;
EXPR_STATEMENT	1272:1	1272:49	3	_TIFFmemset ( td -> td_fieldsset , 0 , FIELD_SETLONGS ) ;
EXPR	1272:1	1272:1	4	_TIFFmemset ( td -> td_fieldsset , 0 , FIELD_SETLONGS )
FUNCTION_CALL	1272:1	1272:48	5	_TIFFmemset ( td -> td_fieldsset , 0 , FIELD_SETLONGS )
CALLEE	1272:1	1272:1	6	_TIFFmemset
LEAF_NODE	1272:1	1272:1	7	_TIFFmemset
LEAF_NODE	1272:12	1272:12	6	(
ARGUMENT	1272:13	1272:13	6	td -> td_fieldsset
FIELD	1272:13	1272:17	7	td -> td_fieldsset
LEAF_NODE	1272:13	1272:13	8	td
LEAF_NODE	1272:15	1272:15	8	->
LEAF_NODE	1272:17	1272:17	8	td_fieldsset
LEAF_NODE	1272:29	1272:29	6	,
ARGUMENT	1272:31	1272:31	6	0
FIELD	1272:31	1272:31	7	0
LEAF_NODE	1272:31	1272:31	8	0
LEAF_NODE	1272:32	1272:32	6	,
ARGUMENT	1272:34	1272:34	6	FIELD_SETLONGS
FIELD	1272:34	1272:34	7	FIELD_SETLONGS
LEAF_NODE	1272:34	1272:34	8	FIELD_SETLONGS
LEAF_NODE	1272:48	1272:48	6	)
LEAF_NODE	1272:49	1272:49	4	;
EXPR_STATEMENT	1273:1	1273:33	3	CleanupField ( td_sminsamplevalue ) ;
EXPR	1273:1	1273:1	4	CleanupField ( td_sminsamplevalue )
FUNCTION_CALL	1273:1	1273:32	5	CleanupField ( td_sminsamplevalue )
CALLEE	1273:1	1273:1	6	CleanupField
LEAF_NODE	1273:1	1273:1	7	CleanupField
LEAF_NODE	1273:13	1273:13	6	(
ARGUMENT	1273:14	1273:14	6	td_sminsamplevalue
FIELD	1273:14	1273:14	7	td_sminsamplevalue
LEAF_NODE	1273:14	1273:14	8	td_sminsamplevalue
LEAF_NODE	1273:32	1273:32	6	)
LEAF_NODE	1273:33	1273:33	4	;
EXPR_STATEMENT	1274:1	1274:33	3	CleanupField ( td_smaxsamplevalue ) ;
EXPR	1274:1	1274:1	4	CleanupField ( td_smaxsamplevalue )
FUNCTION_CALL	1274:1	1274:32	5	CleanupField ( td_smaxsamplevalue )
CALLEE	1274:1	1274:1	6	CleanupField
LEAF_NODE	1274:1	1274:1	7	CleanupField
LEAF_NODE	1274:13	1274:13	6	(
ARGUMENT	1274:14	1274:14	6	td_smaxsamplevalue
FIELD	1274:14	1274:14	7	td_smaxsamplevalue
LEAF_NODE	1274:14	1274:14	8	td_smaxsamplevalue
LEAF_NODE	1274:32	1274:32	6	)
LEAF_NODE	1274:33	1274:33	4	;
EXPR_STATEMENT	1275:1	1275:29	3	CleanupField ( td_colormap [ 0 ] ) ;
EXPR	1275:1	1275:1	4	CleanupField ( td_colormap [ 0 ] )
FUNCTION_CALL	1275:1	1275:28	5	CleanupField ( td_colormap [ 0 ] )
CALLEE	1275:1	1275:1	6	CleanupField
LEAF_NODE	1275:1	1275:1	7	CleanupField
LEAF_NODE	1275:13	1275:13	6	(
ARGUMENT	1275:14	1275:14	6	td_colormap [ 0 ]
FIELD	1275:14	1275:27	7	td_colormap [ 0 ]
LEAF_NODE	1275:14	1275:14	8	td_colormap
LEAF_NODE	1275:25	1275:25	8	[
EXPR	1275:26	1275:26	8	0
FIELD	1275:26	1275:26	9	0
LEAF_NODE	1275:26	1275:26	10	0
LEAF_NODE	1275:27	1275:27	8	]
LEAF_NODE	1275:28	1275:28	6	)
LEAF_NODE	1275:29	1275:29	4	;
EXPR_STATEMENT	1276:1	1276:29	3	CleanupField ( td_colormap [ 1 ] ) ;
EXPR	1276:1	1276:1	4	CleanupField ( td_colormap [ 1 ] )
FUNCTION_CALL	1276:1	1276:28	5	CleanupField ( td_colormap [ 1 ] )
CALLEE	1276:1	1276:1	6	CleanupField
LEAF_NODE	1276:1	1276:1	7	CleanupField
LEAF_NODE	1276:13	1276:13	6	(
ARGUMENT	1276:14	1276:14	6	td_colormap [ 1 ]
FIELD	1276:14	1276:27	7	td_colormap [ 1 ]
LEAF_NODE	1276:14	1276:14	8	td_colormap
LEAF_NODE	1276:25	1276:25	8	[
EXPR	1276:26	1276:26	8	1
FIELD	1276:26	1276:26	9	1
LEAF_NODE	1276:26	1276:26	10	1
LEAF_NODE	1276:27	1276:27	8	]
LEAF_NODE	1276:28	1276:28	6	)
LEAF_NODE	1276:29	1276:29	4	;
EXPR_STATEMENT	1277:1	1277:29	3	CleanupField ( td_colormap [ 2 ] ) ;
EXPR	1277:1	1277:1	4	CleanupField ( td_colormap [ 2 ] )
FUNCTION_CALL	1277:1	1277:28	5	CleanupField ( td_colormap [ 2 ] )
CALLEE	1277:1	1277:1	6	CleanupField
LEAF_NODE	1277:1	1277:1	7	CleanupField
LEAF_NODE	1277:13	1277:13	6	(
ARGUMENT	1277:14	1277:14	6	td_colormap [ 2 ]
FIELD	1277:14	1277:27	7	td_colormap [ 2 ]
LEAF_NODE	1277:14	1277:14	8	td_colormap
LEAF_NODE	1277:25	1277:25	8	[
EXPR	1277:26	1277:26	8	2
FIELD	1277:26	1277:26	9	2
LEAF_NODE	1277:26	1277:26	10	2
LEAF_NODE	1277:27	1277:27	8	]
LEAF_NODE	1277:28	1277:28	6	)
LEAF_NODE	1277:29	1277:29	4	;
EXPR_STATEMENT	1278:1	1278:28	3	CleanupField ( td_sampleinfo ) ;
EXPR	1278:1	1278:1	4	CleanupField ( td_sampleinfo )
FUNCTION_CALL	1278:1	1278:27	5	CleanupField ( td_sampleinfo )
CALLEE	1278:1	1278:1	6	CleanupField
LEAF_NODE	1278:1	1278:1	7	CleanupField
LEAF_NODE	1278:13	1278:13	6	(
ARGUMENT	1278:14	1278:14	6	td_sampleinfo
FIELD	1278:14	1278:14	7	td_sampleinfo
LEAF_NODE	1278:14	1278:14	8	td_sampleinfo
LEAF_NODE	1278:27	1278:27	6	)
LEAF_NODE	1278:28	1278:28	4	;
EXPR_STATEMENT	1279:1	1279:24	3	CleanupField ( td_subifd ) ;
EXPR	1279:1	1279:1	4	CleanupField ( td_subifd )
FUNCTION_CALL	1279:1	1279:23	5	CleanupField ( td_subifd )
CALLEE	1279:1	1279:1	6	CleanupField
LEAF_NODE	1279:1	1279:1	7	CleanupField
LEAF_NODE	1279:13	1279:13	6	(
ARGUMENT	1279:14	1279:14	6	td_subifd
FIELD	1279:14	1279:14	7	td_subifd
LEAF_NODE	1279:14	1279:14	8	td_subifd
LEAF_NODE	1279:23	1279:23	6	)
LEAF_NODE	1279:24	1279:24	4	;
EXPR_STATEMENT	1280:1	1280:26	3	CleanupField ( td_inknames ) ;
EXPR	1280:1	1280:1	4	CleanupField ( td_inknames )
FUNCTION_CALL	1280:1	1280:25	5	CleanupField ( td_inknames )
CALLEE	1280:1	1280:1	6	CleanupField
LEAF_NODE	1280:1	1280:1	7	CleanupField
LEAF_NODE	1280:13	1280:13	6	(
ARGUMENT	1280:14	1280:14	6	td_inknames
FIELD	1280:14	1280:14	7	td_inknames
LEAF_NODE	1280:14	1280:14	8	td_inknames
LEAF_NODE	1280:25	1280:25	6	)
LEAF_NODE	1280:26	1280:26	4	;
EXPR_STATEMENT	1281:1	1281:31	3	CleanupField ( td_refblackwhite ) ;
EXPR	1281:1	1281:1	4	CleanupField ( td_refblackwhite )
FUNCTION_CALL	1281:1	1281:30	5	CleanupField ( td_refblackwhite )
CALLEE	1281:1	1281:1	6	CleanupField
LEAF_NODE	1281:1	1281:1	7	CleanupField
LEAF_NODE	1281:13	1281:13	6	(
ARGUMENT	1281:14	1281:14	6	td_refblackwhite
FIELD	1281:14	1281:14	7	td_refblackwhite
LEAF_NODE	1281:14	1281:14	8	td_refblackwhite
LEAF_NODE	1281:30	1281:30	6	)
LEAF_NODE	1281:31	1281:31	4	;
EXPR_STATEMENT	1282:1	1282:37	3	CleanupField ( td_transferfunction [ 0 ] ) ;
EXPR	1282:1	1282:1	4	CleanupField ( td_transferfunction [ 0 ] )
FUNCTION_CALL	1282:1	1282:36	5	CleanupField ( td_transferfunction [ 0 ] )
CALLEE	1282:1	1282:1	6	CleanupField
LEAF_NODE	1282:1	1282:1	7	CleanupField
LEAF_NODE	1282:13	1282:13	6	(
ARGUMENT	1282:14	1282:14	6	td_transferfunction [ 0 ]
FIELD	1282:14	1282:35	7	td_transferfunction [ 0 ]
LEAF_NODE	1282:14	1282:14	8	td_transferfunction
LEAF_NODE	1282:33	1282:33	8	[
EXPR	1282:34	1282:34	8	0
FIELD	1282:34	1282:34	9	0
LEAF_NODE	1282:34	1282:34	10	0
LEAF_NODE	1282:35	1282:35	8	]
LEAF_NODE	1282:36	1282:36	6	)
LEAF_NODE	1282:37	1282:37	4	;
EXPR_STATEMENT	1283:1	1283:37	3	CleanupField ( td_transferfunction [ 1 ] ) ;
EXPR	1283:1	1283:1	4	CleanupField ( td_transferfunction [ 1 ] )
FUNCTION_CALL	1283:1	1283:36	5	CleanupField ( td_transferfunction [ 1 ] )
CALLEE	1283:1	1283:1	6	CleanupField
LEAF_NODE	1283:1	1283:1	7	CleanupField
LEAF_NODE	1283:13	1283:13	6	(
ARGUMENT	1283:14	1283:14	6	td_transferfunction [ 1 ]
FIELD	1283:14	1283:35	7	td_transferfunction [ 1 ]
LEAF_NODE	1283:14	1283:14	8	td_transferfunction
LEAF_NODE	1283:33	1283:33	8	[
EXPR	1283:34	1283:34	8	1
FIELD	1283:34	1283:34	9	1
LEAF_NODE	1283:34	1283:34	10	1
LEAF_NODE	1283:35	1283:35	8	]
LEAF_NODE	1283:36	1283:36	6	)
LEAF_NODE	1283:37	1283:37	4	;
EXPR_STATEMENT	1284:1	1284:37	3	CleanupField ( td_transferfunction [ 2 ] ) ;
EXPR	1284:1	1284:1	4	CleanupField ( td_transferfunction [ 2 ] )
FUNCTION_CALL	1284:1	1284:36	5	CleanupField ( td_transferfunction [ 2 ] )
CALLEE	1284:1	1284:1	6	CleanupField
LEAF_NODE	1284:1	1284:1	7	CleanupField
LEAF_NODE	1284:13	1284:13	6	(
ARGUMENT	1284:14	1284:14	6	td_transferfunction [ 2 ]
FIELD	1284:14	1284:35	7	td_transferfunction [ 2 ]
LEAF_NODE	1284:14	1284:14	8	td_transferfunction
LEAF_NODE	1284:33	1284:33	8	[
EXPR	1284:34	1284:34	8	2
FIELD	1284:34	1284:34	9	2
LEAF_NODE	1284:34	1284:34	10	2
LEAF_NODE	1284:35	1284:35	8	]
LEAF_NODE	1284:36	1284:36	6	)
LEAF_NODE	1284:37	1284:37	4	;
EXPR_STATEMENT	1285:1	1285:31	3	CleanupField ( td_stripoffset_p ) ;
EXPR	1285:1	1285:1	4	CleanupField ( td_stripoffset_p )
FUNCTION_CALL	1285:1	1285:30	5	CleanupField ( td_stripoffset_p )
CALLEE	1285:1	1285:1	6	CleanupField
LEAF_NODE	1285:1	1285:1	7	CleanupField
LEAF_NODE	1285:13	1285:13	6	(
ARGUMENT	1285:14	1285:14	6	td_stripoffset_p
FIELD	1285:14	1285:14	7	td_stripoffset_p
LEAF_NODE	1285:14	1285:14	8	td_stripoffset_p
LEAF_NODE	1285:30	1285:30	6	)
LEAF_NODE	1285:31	1285:31	4	;
EXPR_STATEMENT	1286:1	1286:34	3	CleanupField ( td_stripbytecount_p ) ;
EXPR	1286:1	1286:1	4	CleanupField ( td_stripbytecount_p )
FUNCTION_CALL	1286:1	1286:33	5	CleanupField ( td_stripbytecount_p )
CALLEE	1286:1	1286:1	6	CleanupField
LEAF_NODE	1286:1	1286:1	7	CleanupField
LEAF_NODE	1286:13	1286:13	6	(
ARGUMENT	1286:14	1286:14	6	td_stripbytecount_p
FIELD	1286:14	1286:14	7	td_stripbytecount_p
LEAF_NODE	1286:14	1286:14	8	td_stripbytecount_p
LEAF_NODE	1286:33	1286:33	6	)
LEAF_NODE	1286:34	1286:34	4	;
EXPR_STATEMENT	1287:8	1287:43	3	td -> td_stripoffsetbyteallocsize = 0 ;
EXPR	1287:8	1287:8	4	td -> td_stripoffsetbyteallocsize = 0
ASSIGN	1287:8	1287:42	5	td -> td_stripoffsetbyteallocsize = 0
LVAL	1287:8	1287:8	6	td -> td_stripoffsetbyteallocsize
FIELD	1287:8	1287:12	7	td -> td_stripoffsetbyteallocsize
LEAF_NODE	1287:8	1287:8	8	td
LEAF_NODE	1287:10	1287:10	8	->
LEAF_NODE	1287:12	1287:12	8	td_stripoffsetbyteallocsize
ASSIGN_OP	1287:40	1287:40	6	=
LEAF_NODE	1287:40	1287:40	7	=
RVAL	1287:42	1287:42	6	0
FIELD	1287:42	1287:42	7	0
LEAF_NODE	1287:42	1287:42	8	0
LEAF_NODE	1287:43	1287:43	4	;
EXPR_STATEMENT	1288:1	1288:45	3	TIFFClrFieldBit ( tif , FIELD_YCBCRSUBSAMPLING ) ;
EXPR	1288:1	1288:1	4	TIFFClrFieldBit ( tif , FIELD_YCBCRSUBSAMPLING )
FUNCTION_CALL	1288:1	1288:44	5	TIFFClrFieldBit ( tif , FIELD_YCBCRSUBSAMPLING )
CALLEE	1288:1	1288:1	6	TIFFClrFieldBit
LEAF_NODE	1288:1	1288:1	7	TIFFClrFieldBit
LEAF_NODE	1288:16	1288:16	6	(
ARGUMENT	1288:17	1288:17	6	tif
FIELD	1288:17	1288:17	7	tif
LEAF_NODE	1288:17	1288:17	8	tif
LEAF_NODE	1288:20	1288:20	6	,
ARGUMENT	1288:22	1288:22	6	FIELD_YCBCRSUBSAMPLING
FIELD	1288:22	1288:22	7	FIELD_YCBCRSUBSAMPLING
LEAF_NODE	1288:22	1288:22	8	FIELD_YCBCRSUBSAMPLING
LEAF_NODE	1288:44	1288:44	6	)
LEAF_NODE	1288:45	1288:45	4	;
EXPR_STATEMENT	1289:1	1289:45	3	TIFFClrFieldBit ( tif , FIELD_YCBCRPOSITIONING ) ;
EXPR	1289:1	1289:1	4	TIFFClrFieldBit ( tif , FIELD_YCBCRPOSITIONING )
FUNCTION_CALL	1289:1	1289:44	5	TIFFClrFieldBit ( tif , FIELD_YCBCRPOSITIONING )
CALLEE	1289:1	1289:1	6	TIFFClrFieldBit
LEAF_NODE	1289:1	1289:1	7	TIFFClrFieldBit
LEAF_NODE	1289:16	1289:16	6	(
ARGUMENT	1289:17	1289:17	6	tif
FIELD	1289:17	1289:17	7	tif
LEAF_NODE	1289:17	1289:17	8	tif
LEAF_NODE	1289:20	1289:20	6	,
ARGUMENT	1289:22	1289:22	6	FIELD_YCBCRPOSITIONING
FIELD	1289:22	1289:22	7	FIELD_YCBCRPOSITIONING
LEAF_NODE	1289:22	1289:22	8	FIELD_YCBCRPOSITIONING
LEAF_NODE	1289:44	1289:44	6	)
LEAF_NODE	1289:45	1289:45	4	;
ITERATION	1292:1	1292:48	3	
KEYWORD	1292:1	1292:1	4	for
LEAF_NODE	1292:1	1292:1	5	for
LEAF_NODE	1292:4	1292:4	4	(
FOR_INIT	1292:6	1292:11	4	i = 0 ;
EXPR	1292:6	1292:6	5	i = 0
ASSIGN	1292:6	1292:10	6	i = 0
LVAL	1292:6	1292:6	7	i
FIELD	1292:6	1292:6	8	i
LEAF_NODE	1292:6	1292:6	9	i
ASSIGN_OP	1292:8	1292:8	7	=
LEAF_NODE	1292:8	1292:8	8	=
RVAL	1292:10	1292:10	7	0
FIELD	1292:10	1292:10	8	0
LEAF_NODE	1292:10	1292:10	9	0
LEAF_NODE	1292:11	1292:11	5	;
CONDITION	1292:13	1292:13	4	i < td -> td_customValueCount
EXPR	1292:13	1292:17	5	i < td -> td_customValueCount
FIELD	1292:13	1292:13	6	i
LEAF_NODE	1292:13	1292:13	7	i
REL_OPERATOR	1292:15	1292:15	6	<
LEAF_NODE	1292:15	1292:15	7	<
FIELD	1292:17	1292:21	6	td -> td_customValueCount
LEAF_NODE	1292:17	1292:17	7	td
LEAF_NODE	1292:19	1292:19	7	->
LEAF_NODE	1292:21	1292:21	7	td_customValueCount
LEAF_NODE	1292:40	1292:40	4	;
FOR_EXPR	1292:42	1292:42	4	i ++
EXPR	1292:42	1292:42	5	i ++
FIELD	1292:42	1292:43	6	i ++
LEAF_NODE	1292:42	1292:42	7	i
LEAF_NODE	1292:43	1292:43	7	++
LEAF_NODE	1292:46	1292:46	4	)
STATEMENTS	1292:48	1295:1	4	
LEAF_NODE	1292:48	1292:48	5	{
STATEMENTS	1293:2	1293:2	5	
SELECTION	1293:2	1294:3	6	
KEYWORD	1293:2	1293:2	7	if
LEAF_NODE	1293:2	1293:2	8	if
LEAF_NODE	1293:5	1293:5	7	(
CONDITION	1293:6	1293:6	7	td -> td_customValues [ i ] . value
EXPR	1293:6	1293:6	8	td -> td_customValues [ i ] . value
FIELD	1293:6	1293:29	9	td -> td_customValues [ i ] . value
LEAF_NODE	1293:6	1293:6	10	td
LEAF_NODE	1293:8	1293:8	10	->
LEAF_NODE	1293:10	1293:10	10	td_customValues
LEAF_NODE	1293:25	1293:25	10	[
EXPR	1293:26	1293:26	10	i
FIELD	1293:26	1293:26	11	i
LEAF_NODE	1293:26	1293:26	12	i
LEAF_NODE	1293:27	1293:27	10	]
LEAF_NODE	1293:28	1293:28	10	.
LEAF_NODE	1293:29	1293:29	10	value
LEAF_NODE	1293:34	1293:34	7	)
STATEMENTS	1294:3	1294:3	7	
EXPR_STATEMENT	1294:3	1294:42	8	_TIFFfree ( td -> td_customValues [ i ] . value ) ;
EXPR	1294:3	1294:3	9	_TIFFfree ( td -> td_customValues [ i ] . value )
FUNCTION_CALL	1294:3	1294:41	10	_TIFFfree ( td -> td_customValues [ i ] . value )
CALLEE	1294:3	1294:3	11	_TIFFfree
LEAF_NODE	1294:3	1294:3	12	_TIFFfree
LEAF_NODE	1294:12	1294:12	11	(
ARGUMENT	1294:13	1294:13	11	td -> td_customValues [ i ] . value
FIELD	1294:13	1294:36	12	td -> td_customValues [ i ] . value
LEAF_NODE	1294:13	1294:13	13	td
LEAF_NODE	1294:15	1294:15	13	->
LEAF_NODE	1294:17	1294:17	13	td_customValues
LEAF_NODE	1294:32	1294:32	13	[
EXPR	1294:33	1294:33	13	i
FIELD	1294:33	1294:33	14	i
LEAF_NODE	1294:33	1294:33	15	i
LEAF_NODE	1294:34	1294:34	13	]
LEAF_NODE	1294:35	1294:35	13	.
LEAF_NODE	1294:36	1294:36	13	value
LEAF_NODE	1294:41	1294:41	11	)
LEAF_NODE	1294:42	1294:42	9	;
LEAF_NODE	1295:1	1295:1	5	}
EXPR_STATEMENT	1297:1	1297:28	3	td -> td_customValueCount = 0 ;
EXPR	1297:1	1297:1	4	td -> td_customValueCount = 0
ASSIGN	1297:1	1297:27	5	td -> td_customValueCount = 0
LVAL	1297:1	1297:1	6	td -> td_customValueCount
FIELD	1297:1	1297:5	7	td -> td_customValueCount
LEAF_NODE	1297:1	1297:1	8	td
LEAF_NODE	1297:3	1297:3	8	->
LEAF_NODE	1297:5	1297:5	8	td_customValueCount
ASSIGN_OP	1297:25	1297:25	6	=
LEAF_NODE	1297:25	1297:25	7	=
RVAL	1297:27	1297:27	6	0
FIELD	1297:27	1297:27	7	0
LEAF_NODE	1297:27	1297:27	8	0
LEAF_NODE	1297:28	1297:28	4	;
EXPR_STATEMENT	1298:1	1298:30	3	CleanupField ( td_customValues ) ;
EXPR	1298:1	1298:1	4	CleanupField ( td_customValues )
FUNCTION_CALL	1298:1	1298:29	5	CleanupField ( td_customValues )
CALLEE	1298:1	1298:1	6	CleanupField
LEAF_NODE	1298:1	1298:1	7	CleanupField
LEAF_NODE	1298:13	1298:13	6	(
ARGUMENT	1298:14	1298:14	6	td_customValues
FIELD	1298:14	1298:14	7	td_customValues
LEAF_NODE	1298:14	1298:14	8	td_customValues
LEAF_NODE	1298:29	1298:29	6	)
LEAF_NODE	1298:30	1298:30	4	;
EXPR_STATEMENT	1300:8	1300:74	3	_TIFFmemset ( & ( td -> td_stripoffset_entry ) , 0 , sizeof ( TIFFDirEntry ) ) ;
EXPR	1300:8	1300:8	4	_TIFFmemset ( & ( td -> td_stripoffset_entry ) , 0 , sizeof ( TIFFDirEntry ) )
FUNCTION_CALL	1300:8	1300:73	5	_TIFFmemset ( & ( td -> td_stripoffset_entry ) , 0 , sizeof ( TIFFDirEntry ) )
CALLEE	1300:8	1300:8	6	_TIFFmemset
LEAF_NODE	1300:8	1300:8	7	_TIFFmemset
LEAF_NODE	1300:19	1300:19	6	(
ARGUMENT	1300:21	1300:21	6	& ( td -> td_stripoffset_entry )
UNARY_EXPR	1300:21	1300:47	7	& ( td -> td_stripoffset_entry )
UNARY_OPERATOR	1300:21	1300:21	8	&
LEAF_NODE	1300:21	1300:21	9	&
LEAF_NODE	1300:22	1300:22	8	(
FIELD	1300:23	1300:27	8	td -> td_stripoffset_entry
LEAF_NODE	1300:23	1300:23	9	td
LEAF_NODE	1300:25	1300:25	9	->
LEAF_NODE	1300:27	1300:27	9	td_stripoffset_entry
LEAF_NODE	1300:47	1300:47	8	)
LEAF_NODE	1300:48	1300:48	6	,
ARGUMENT	1300:50	1300:50	6	0
FIELD	1300:50	1300:50	7	0
LEAF_NODE	1300:50	1300:50	8	0
LEAF_NODE	1300:51	1300:51	6	,
ARGUMENT	1300:53	1300:53	6	sizeof ( TIFFDirEntry )
FUNCTION_CALL	1300:53	1300:72	7	sizeof ( TIFFDirEntry )
CALLEE	1300:53	1300:53	8	sizeof
LEAF_NODE	1300:53	1300:53	9	sizeof
LEAF_NODE	1300:59	1300:59	8	(
ARGUMENT	1300:60	1300:60	8	TIFFDirEntry
FIELD	1300:60	1300:60	9	TIFFDirEntry
LEAF_NODE	1300:60	1300:60	10	TIFFDirEntry
LEAF_NODE	1300:72	1300:72	8	)
LEAF_NODE	1300:73	1300:73	6	)
LEAF_NODE	1300:74	1300:74	4	;
EXPR_STATEMENT	1301:8	1301:77	3	_TIFFmemset ( & ( td -> td_stripbytecount_entry ) , 0 , sizeof ( TIFFDirEntry ) ) ;
EXPR	1301:8	1301:8	4	_TIFFmemset ( & ( td -> td_stripbytecount_entry ) , 0 , sizeof ( TIFFDirEntry ) )
FUNCTION_CALL	1301:8	1301:76	5	_TIFFmemset ( & ( td -> td_stripbytecount_entry ) , 0 , sizeof ( TIFFDirEntry ) )
CALLEE	1301:8	1301:8	6	_TIFFmemset
LEAF_NODE	1301:8	1301:8	7	_TIFFmemset
LEAF_NODE	1301:19	1301:19	6	(
ARGUMENT	1301:21	1301:21	6	& ( td -> td_stripbytecount_entry )
UNARY_EXPR	1301:21	1301:50	7	& ( td -> td_stripbytecount_entry )
UNARY_OPERATOR	1301:21	1301:21	8	&
LEAF_NODE	1301:21	1301:21	9	&
LEAF_NODE	1301:22	1301:22	8	(
FIELD	1301:23	1301:27	8	td -> td_stripbytecount_entry
LEAF_NODE	1301:23	1301:23	9	td
LEAF_NODE	1301:25	1301:25	9	->
LEAF_NODE	1301:27	1301:27	9	td_stripbytecount_entry
LEAF_NODE	1301:50	1301:50	8	)
LEAF_NODE	1301:51	1301:51	6	,
ARGUMENT	1301:53	1301:53	6	0
FIELD	1301:53	1301:53	7	0
LEAF_NODE	1301:53	1301:53	8	0
LEAF_NODE	1301:54	1301:54	6	,
ARGUMENT	1301:56	1301:56	6	sizeof ( TIFFDirEntry )
FUNCTION_CALL	1301:56	1301:75	7	sizeof ( TIFFDirEntry )
CALLEE	1301:56	1301:56	8	sizeof
LEAF_NODE	1301:56	1301:56	9	sizeof
LEAF_NODE	1301:62	1301:62	8	(
ARGUMENT	1301:63	1301:63	8	TIFFDirEntry
FIELD	1301:63	1301:63	9	TIFFDirEntry
LEAF_NODE	1301:63	1301:63	10	TIFFDirEntry
LEAF_NODE	1301:75	1301:75	8	)
LEAF_NODE	1301:76	1301:76	6	)
LEAF_NODE	1301:77	1301:77	4	;
LEAF_NODE	1302:0	1302:0	2	}
SIMPLE_DECL	1308:7	1308:59	1	TIFFExtendProc _TIFFextender ; _TIFFextender = ( TIFFExtendProc ) NULL ;
VAR_DECL	1308:7	1308:22	2	TIFFExtendProc _TIFFextender ; _TIFFextender = ( TIFFExtendProc ) NULL
TYPE	1308:7	1308:7	3	TIFFExtendProc
TYPE_NAME	1308:7	1308:7	4	TIFFExtendProc
LEAF_NODE	1308:7	1308:7	5	TIFFExtendProc
NAME	1308:22	1308:22	3	_TIFFextender
LEAF_NODE	1308:22	1308:22	4	_TIFFextender
LEAF_NODE	0:0	0:0	3	;
INIT	1308:22	1308:22	3	_TIFFextender = ( TIFFExtendProc ) NULL
ASSIGN	1308:22	1308:38	4	_TIFFextender = ( TIFFExtendProc ) NULL
LVAL	1308:22	1308:22	5	_TIFFextender
NAME	1308:22	1308:22	6	_TIFFextender
LEAF_NODE	1308:22	1308:22	7	_TIFFextender
ASSIGN_OP	1308:36	1308:36	5	=
LEAF_NODE	1308:36	1308:36	6	=
RVAL	1308:38	1308:55	5	( TIFFExtendProc ) NULL
LEAF_NODE	1308:38	1308:38	6	(
TYPE_NAME	1308:39	1308:39	6	TIFFExtendProc
LEAF_NODE	1308:39	1308:39	7	TIFFExtendProc
LEAF_NODE	1308:53	1308:53	6	)
FIELD	1308:55	1308:55	6	NULL
LEAF_NODE	1308:55	1308:55	7	NULL
LEAF_NODE	1308:59	1308:59	2	;
FUNCTION_DEF	1310:0	1316:0	1	
RETURN_TYPE	1310:0	1310:0	2	TIFFExtendProc
TYPE_NAME	1310:0	1310:0	3	TIFFExtendProc
LEAF_NODE	1310:0	1310:0	4	TIFFExtendProc
FUNCTION_NAME	1311:0	1311:0	2	TIFFSetTagExtender
LEAF_NODE	1311:0	1311:0	3	TIFFSetTagExtender
PARAMETER_LIST	1311:18	1311:42	2	( TIFFExtendProc extender )
LEAF_NODE	1311:18	1311:18	3	(
PARAMETER_DECL	1311:19	1311:34	3	TIFFExtendProc extender
TYPE	1311:19	1311:19	4	TIFFExtendProc
TYPE_NAME	1311:19	1311:19	5	TIFFExtendProc
LEAF_NODE	1311:19	1311:19	6	TIFFExtendProc
NAME	1311:34	1311:34	4	extender
LEAF_NODE	1311:34	1311:34	5	extender
LEAF_NODE	1311:42	1311:42	3	)
LEAF_NODE	1312:0	1312:0	2	{
STATEMENTS	1313:1	1315:14	2	
SIMPLE_DECL	1313:1	1313:36	3	TIFFExtendProc prev ; prev = _TIFFextender ;
VAR_DECL	1313:1	1313:16	4	TIFFExtendProc prev ; prev = _TIFFextender
TYPE	1313:1	1313:1	5	TIFFExtendProc
TYPE_NAME	1313:1	1313:1	6	TIFFExtendProc
LEAF_NODE	1313:1	1313:1	7	TIFFExtendProc
NAME	1313:16	1313:16	5	prev
LEAF_NODE	1313:16	1313:16	6	prev
LEAF_NODE	0:0	0:0	5	;
INIT	1313:16	1313:16	5	prev = _TIFFextender
ASSIGN	1313:16	1313:23	6	prev = _TIFFextender
LVAL	1313:16	1313:16	7	prev
NAME	1313:16	1313:16	8	prev
LEAF_NODE	1313:16	1313:16	9	prev
ASSIGN_OP	1313:21	1313:21	7	=
LEAF_NODE	1313:21	1313:21	8	=
RVAL	1313:23	1313:23	7	_TIFFextender
FIELD	1313:23	1313:23	8	_TIFFextender
LEAF_NODE	1313:23	1313:23	9	_TIFFextender
LEAF_NODE	1313:36	1313:36	4	;
EXPR_STATEMENT	1314:1	1314:25	3	_TIFFextender = extender ;
EXPR	1314:1	1314:1	4	_TIFFextender = extender
ASSIGN	1314:1	1314:17	5	_TIFFextender = extender
LVAL	1314:1	1314:1	6	_TIFFextender
FIELD	1314:1	1314:1	7	_TIFFextender
LEAF_NODE	1314:1	1314:1	8	_TIFFextender
ASSIGN_OP	1314:15	1314:15	6	=
LEAF_NODE	1314:15	1314:15	7	=
RVAL	1314:17	1314:17	6	extender
FIELD	1314:17	1314:17	7	extender
LEAF_NODE	1314:17	1314:17	8	extender
LEAF_NODE	1314:25	1314:25	4	;
LEAF_NODE	1315:1	1315:1	3	return
LEAF_NODE	1315:8	1315:8	3	(
LEAF_NODE	1315:9	1315:9	3	prev
LEAF_NODE	1315:13	1315:13	3	)
LEAF_NODE	1315:14	1315:14	3	;
LEAF_NODE	1316:0	1316:0	2	}
FUNCTION_DEF	1325:0	1336:0	1	
RETURN_TYPE	1325:0	1325:0	2	int
TYPE_NAME	1325:0	1325:0	3	int
LEAF_NODE	1325:0	1325:0	4	int
FUNCTION_NAME	1326:0	1326:0	2	TIFFCreateDirectory
LEAF_NODE	1326:0	1326:0	3	TIFFCreateDirectory
PARAMETER_LIST	1326:19	1326:29	2	( TIFF * tif )
LEAF_NODE	1326:19	1326:19	3	(
PARAMETER_DECL	1326:20	1326:26	3	TIFF * tif
TYPE	1326:20	1326:24	4	TIFF *
TYPE_NAME	1326:20	1326:20	5	TIFF
LEAF_NODE	1326:20	1326:20	6	TIFF
POINTER	1326:24	1326:24	5	*
LEAF_NODE	1326:24	1326:24	6	*
NAME	1326:26	1326:26	4	tif
LEAF_NODE	1326:26	1326:26	5	tif
LEAF_NODE	1326:29	1326:29	3	)
LEAF_NODE	1327:0	1327:0	2	{
STATEMENTS	1328:1	1335:1	2	
EXPR_STATEMENT	1328:1	1328:26	3	TIFFDefaultDirectory ( tif ) ;
EXPR	1328:1	1328:1	4	TIFFDefaultDirectory ( tif )
FUNCTION_CALL	1328:1	1328:25	5	TIFFDefaultDirectory ( tif )
CALLEE	1328:1	1328:1	6	TIFFDefaultDirectory
LEAF_NODE	1328:1	1328:1	7	TIFFDefaultDirectory
LEAF_NODE	1328:21	1328:21	6	(
ARGUMENT	1328:22	1328:22	6	tif
FIELD	1328:22	1328:22	7	tif
LEAF_NODE	1328:22	1328:22	8	tif
LEAF_NODE	1328:25	1328:25	6	)
LEAF_NODE	1328:26	1328:26	4	;
EXPR_STATEMENT	1329:1	1329:20	3	tif -> tif_diroff = 0 ;
EXPR	1329:1	1329:1	4	tif -> tif_diroff = 0
ASSIGN	1329:1	1329:19	5	tif -> tif_diroff = 0
LVAL	1329:1	1329:1	6	tif -> tif_diroff
FIELD	1329:1	1329:6	7	tif -> tif_diroff
LEAF_NODE	1329:1	1329:1	8	tif
LEAF_NODE	1329:4	1329:4	8	->
LEAF_NODE	1329:6	1329:6	8	tif_diroff
ASSIGN_OP	1329:17	1329:17	6	=
LEAF_NODE	1329:17	1329:17	7	=
RVAL	1329:19	1329:19	6	0
FIELD	1329:19	1329:19	7	0
LEAF_NODE	1329:19	1329:19	8	0
LEAF_NODE	1329:20	1329:20	4	;
EXPR_STATEMENT	1330:1	1330:24	3	tif -> tif_nextdiroff = 0 ;
EXPR	1330:1	1330:1	4	tif -> tif_nextdiroff = 0
ASSIGN	1330:1	1330:23	5	tif -> tif_nextdiroff = 0
LVAL	1330:1	1330:1	6	tif -> tif_nextdiroff
FIELD	1330:1	1330:6	7	tif -> tif_nextdiroff
LEAF_NODE	1330:1	1330:1	8	tif
LEAF_NODE	1330:4	1330:4	8	->
LEAF_NODE	1330:6	1330:6	8	tif_nextdiroff
ASSIGN_OP	1330:21	1330:21	6	=
LEAF_NODE	1330:21	1330:21	7	=
RVAL	1330:23	1330:23	6	0
FIELD	1330:23	1330:23	7	0
LEAF_NODE	1330:23	1330:23	8	0
LEAF_NODE	1330:24	1330:24	4	;
EXPR_STATEMENT	1331:1	1331:20	3	tif -> tif_curoff = 0 ;
EXPR	1331:1	1331:1	4	tif -> tif_curoff = 0
ASSIGN	1331:1	1331:19	5	tif -> tif_curoff = 0
LVAL	1331:1	1331:1	6	tif -> tif_curoff
FIELD	1331:1	1331:6	7	tif -> tif_curoff
LEAF_NODE	1331:1	1331:1	8	tif
LEAF_NODE	1331:4	1331:4	8	->
LEAF_NODE	1331:6	1331:6	8	tif_curoff
ASSIGN_OP	1331:17	1331:17	6	=
LEAF_NODE	1331:17	1331:17	7	=
RVAL	1331:19	1331:19	6	0
FIELD	1331:19	1331:19	7	0
LEAF_NODE	1331:19	1331:19	8	0
LEAF_NODE	1331:20	1331:20	4	;
EXPR_STATEMENT	1332:1	1332:27	3	tif -> tif_row = ( uint32 ) - 1 ;
EXPR	1332:1	1332:1	4	tif -> tif_row = ( uint32 ) - 1
ASSIGN	1332:1	1332:16	5	tif -> tif_row = ( uint32 ) - 1
LVAL	1332:1	1332:1	6	tif -> tif_row
FIELD	1332:1	1332:6	7	tif -> tif_row
LEAF_NODE	1332:1	1332:1	8	tif
LEAF_NODE	1332:4	1332:4	8	->
LEAF_NODE	1332:6	1332:6	8	tif_row
ASSIGN_OP	1332:14	1332:14	6	=
LEAF_NODE	1332:14	1332:14	7	=
RVAL	1332:16	1332:25	6	( uint32 ) - 1
LEAF_NODE	1332:16	1332:16	7	(
TYPE_NAME	1332:17	1332:17	7	uint32
LEAF_NODE	1332:17	1332:17	8	uint32
LEAF_NODE	1332:23	1332:23	7	)
UNARY_EXPR	1332:25	1332:26	7	- 1
UNARY_OPERATOR	1332:25	1332:25	8	-
LEAF_NODE	1332:25	1332:25	9	-
FIELD	1332:26	1332:26	8	1
LEAF_NODE	1332:26	1332:26	9	1
LEAF_NODE	1332:27	1332:27	4	;
EXPR_STATEMENT	1333:1	1333:32	3	tif -> tif_curstrip = ( uint32 ) - 1 ;
EXPR	1333:1	1333:1	4	tif -> tif_curstrip = ( uint32 ) - 1
ASSIGN	1333:1	1333:21	5	tif -> tif_curstrip = ( uint32 ) - 1
LVAL	1333:1	1333:1	6	tif -> tif_curstrip
FIELD	1333:1	1333:6	7	tif -> tif_curstrip
LEAF_NODE	1333:1	1333:1	8	tif
LEAF_NODE	1333:4	1333:4	8	->
LEAF_NODE	1333:6	1333:6	8	tif_curstrip
ASSIGN_OP	1333:19	1333:19	6	=
LEAF_NODE	1333:19	1333:19	7	=
RVAL	1333:21	1333:30	6	( uint32 ) - 1
LEAF_NODE	1333:21	1333:21	7	(
TYPE_NAME	1333:22	1333:22	7	uint32
LEAF_NODE	1333:22	1333:22	8	uint32
LEAF_NODE	1333:28	1333:28	7	)
UNARY_EXPR	1333:30	1333:31	7	- 1
UNARY_OPERATOR	1333:30	1333:30	8	-
LEAF_NODE	1333:30	1333:30	9	-
FIELD	1333:31	1333:31	8	1
LEAF_NODE	1333:31	1333:31	9	1
LEAF_NODE	1333:32	1333:32	4	;
JUMP_STATEMENT	1335:1	1335:9	3	return 0 ;
KEYWORD	1335:1	1335:1	4	return
LEAF_NODE	1335:1	1335:1	5	return
DESTINATION	1335:8	1335:8	4	0
EXPR	1335:8	1335:8	5	0
FIELD	1335:8	1335:8	6	0
LEAF_NODE	1335:8	1335:8	7	0
LEAF_NODE	1335:9	1335:9	4	;
LEAF_NODE	1336:0	1336:0	2	}
FUNCTION_DEF	1338:0	1357:0	1	
RETURN_TYPE	1338:0	1338:0	2	int
TYPE_NAME	1338:0	1338:0	3	int
LEAF_NODE	1338:0	1338:0	4	int
FUNCTION_NAME	1339:0	1339:0	2	TIFFCreateCustomDirectory
LEAF_NODE	1339:0	1339:0	3	TIFFCreateCustomDirectory
PARAMETER_LIST	1339:25	1339:68	2	( TIFF * tif , const TIFFFieldArray * infoarray )
LEAF_NODE	1339:25	1339:25	3	(
PARAMETER_DECL	1339:26	1339:32	3	TIFF * tif
TYPE	1339:26	1339:30	4	TIFF *
TYPE_NAME	1339:26	1339:26	5	TIFF
LEAF_NODE	1339:26	1339:26	6	TIFF
POINTER	1339:30	1339:30	5	*
LEAF_NODE	1339:30	1339:30	6	*
NAME	1339:32	1339:32	4	tif
LEAF_NODE	1339:32	1339:32	5	tif
LEAF_NODE	1339:35	1339:35	3	,
PARAMETER_DECL	1339:37	1339:59	3	const TIFFFieldArray * infoarray
TYPE	1339:37	1339:57	4	const TIFFFieldArray *
TYPE_NAME	1339:37	1339:43	5	const TIFFFieldArray
LEAF_NODE	1339:37	1339:37	6	const
LEAF_NODE	1339:43	1339:43	6	TIFFFieldArray
POINTER	1339:57	1339:57	5	*
LEAF_NODE	1339:57	1339:57	6	*
NAME	1339:59	1339:59	4	infoarray
LEAF_NODE	1339:59	1339:59	5	infoarray
LEAF_NODE	1339:68	1339:68	3	)
LEAF_NODE	1340:0	1340:0	2	{
STATEMENTS	1341:1	1356:1	2	
EXPR_STATEMENT	1341:1	1341:26	3	TIFFDefaultDirectory ( tif ) ;
EXPR	1341:1	1341:1	4	TIFFDefaultDirectory ( tif )
FUNCTION_CALL	1341:1	1341:25	5	TIFFDefaultDirectory ( tif )
CALLEE	1341:1	1341:1	6	TIFFDefaultDirectory
LEAF_NODE	1341:1	1341:1	7	TIFFDefaultDirectory
LEAF_NODE	1341:21	1341:21	6	(
ARGUMENT	1341:22	1341:22	6	tif
FIELD	1341:22	1341:22	7	tif
LEAF_NODE	1341:22	1341:22	8	tif
LEAF_NODE	1341:25	1341:25	6	)
LEAF_NODE	1341:26	1341:26	4	;
EXPR_STATEMENT	1348:1	1348:33	3	_TIFFSetupFields ( tif , infoarray ) ;
EXPR	1348:1	1348:1	4	_TIFFSetupFields ( tif , infoarray )
FUNCTION_CALL	1348:1	1348:32	5	_TIFFSetupFields ( tif , infoarray )
CALLEE	1348:1	1348:1	6	_TIFFSetupFields
LEAF_NODE	1348:1	1348:1	7	_TIFFSetupFields
LEAF_NODE	1348:17	1348:17	6	(
ARGUMENT	1348:18	1348:18	6	tif
FIELD	1348:18	1348:18	7	tif
LEAF_NODE	1348:18	1348:18	8	tif
LEAF_NODE	1348:21	1348:21	6	,
ARGUMENT	1348:23	1348:23	6	infoarray
FIELD	1348:23	1348:23	7	infoarray
LEAF_NODE	1348:23	1348:23	8	infoarray
LEAF_NODE	1348:32	1348:32	6	)
LEAF_NODE	1348:33	1348:33	4	;
EXPR_STATEMENT	1350:1	1350:20	3	tif -> tif_diroff = 0 ;
EXPR	1350:1	1350:1	4	tif -> tif_diroff = 0
ASSIGN	1350:1	1350:19	5	tif -> tif_diroff = 0
LVAL	1350:1	1350:1	6	tif -> tif_diroff
FIELD	1350:1	1350:6	7	tif -> tif_diroff
LEAF_NODE	1350:1	1350:1	8	tif
LEAF_NODE	1350:4	1350:4	8	->
LEAF_NODE	1350:6	1350:6	8	tif_diroff
ASSIGN_OP	1350:17	1350:17	6	=
LEAF_NODE	1350:17	1350:17	7	=
RVAL	1350:19	1350:19	6	0
FIELD	1350:19	1350:19	7	0
LEAF_NODE	1350:19	1350:19	8	0
LEAF_NODE	1350:20	1350:20	4	;
EXPR_STATEMENT	1351:1	1351:24	3	tif -> tif_nextdiroff = 0 ;
EXPR	1351:1	1351:1	4	tif -> tif_nextdiroff = 0
ASSIGN	1351:1	1351:23	5	tif -> tif_nextdiroff = 0
LVAL	1351:1	1351:1	6	tif -> tif_nextdiroff
FIELD	1351:1	1351:6	7	tif -> tif_nextdiroff
LEAF_NODE	1351:1	1351:1	8	tif
LEAF_NODE	1351:4	1351:4	8	->
LEAF_NODE	1351:6	1351:6	8	tif_nextdiroff
ASSIGN_OP	1351:21	1351:21	6	=
LEAF_NODE	1351:21	1351:21	7	=
RVAL	1351:23	1351:23	6	0
FIELD	1351:23	1351:23	7	0
LEAF_NODE	1351:23	1351:23	8	0
LEAF_NODE	1351:24	1351:24	4	;
EXPR_STATEMENT	1352:1	1352:20	3	tif -> tif_curoff = 0 ;
EXPR	1352:1	1352:1	4	tif -> tif_curoff = 0
ASSIGN	1352:1	1352:19	5	tif -> tif_curoff = 0
LVAL	1352:1	1352:1	6	tif -> tif_curoff
FIELD	1352:1	1352:6	7	tif -> tif_curoff
LEAF_NODE	1352:1	1352:1	8	tif
LEAF_NODE	1352:4	1352:4	8	->
LEAF_NODE	1352:6	1352:6	8	tif_curoff
ASSIGN_OP	1352:17	1352:17	6	=
LEAF_NODE	1352:17	1352:17	7	=
RVAL	1352:19	1352:19	6	0
FIELD	1352:19	1352:19	7	0
LEAF_NODE	1352:19	1352:19	8	0
LEAF_NODE	1352:20	1352:20	4	;
EXPR_STATEMENT	1353:1	1353:27	3	tif -> tif_row = ( uint32 ) - 1 ;
EXPR	1353:1	1353:1	4	tif -> tif_row = ( uint32 ) - 1
ASSIGN	1353:1	1353:16	5	tif -> tif_row = ( uint32 ) - 1
LVAL	1353:1	1353:1	6	tif -> tif_row
FIELD	1353:1	1353:6	7	tif -> tif_row
LEAF_NODE	1353:1	1353:1	8	tif
LEAF_NODE	1353:4	1353:4	8	->
LEAF_NODE	1353:6	1353:6	8	tif_row
ASSIGN_OP	1353:14	1353:14	6	=
LEAF_NODE	1353:14	1353:14	7	=
RVAL	1353:16	1353:25	6	( uint32 ) - 1
LEAF_NODE	1353:16	1353:16	7	(
TYPE_NAME	1353:17	1353:17	7	uint32
LEAF_NODE	1353:17	1353:17	8	uint32
LEAF_NODE	1353:23	1353:23	7	)
UNARY_EXPR	1353:25	1353:26	7	- 1
UNARY_OPERATOR	1353:25	1353:25	8	-
LEAF_NODE	1353:25	1353:25	9	-
FIELD	1353:26	1353:26	8	1
LEAF_NODE	1353:26	1353:26	9	1
LEAF_NODE	1353:27	1353:27	4	;
EXPR_STATEMENT	1354:1	1354:32	3	tif -> tif_curstrip = ( uint32 ) - 1 ;
EXPR	1354:1	1354:1	4	tif -> tif_curstrip = ( uint32 ) - 1
ASSIGN	1354:1	1354:21	5	tif -> tif_curstrip = ( uint32 ) - 1
LVAL	1354:1	1354:1	6	tif -> tif_curstrip
FIELD	1354:1	1354:6	7	tif -> tif_curstrip
LEAF_NODE	1354:1	1354:1	8	tif
LEAF_NODE	1354:4	1354:4	8	->
LEAF_NODE	1354:6	1354:6	8	tif_curstrip
ASSIGN_OP	1354:19	1354:19	6	=
LEAF_NODE	1354:19	1354:19	7	=
RVAL	1354:21	1354:30	6	( uint32 ) - 1
LEAF_NODE	1354:21	1354:21	7	(
TYPE_NAME	1354:22	1354:22	7	uint32
LEAF_NODE	1354:22	1354:22	8	uint32
LEAF_NODE	1354:28	1354:28	7	)
UNARY_EXPR	1354:30	1354:31	7	- 1
UNARY_OPERATOR	1354:30	1354:30	8	-
LEAF_NODE	1354:30	1354:30	9	-
FIELD	1354:31	1354:31	8	1
LEAF_NODE	1354:31	1354:31	9	1
LEAF_NODE	1354:32	1354:32	4	;
JUMP_STATEMENT	1356:1	1356:9	3	return 0 ;
KEYWORD	1356:1	1356:1	4	return
LEAF_NODE	1356:1	1356:1	5	return
DESTINATION	1356:8	1356:8	4	0
EXPR	1356:8	1356:8	5	0
FIELD	1356:8	1356:8	6	0
LEAF_NODE	1356:8	1356:8	7	0
LEAF_NODE	1356:9	1356:9	4	;
LEAF_NODE	1357:0	1357:0	2	}
FUNCTION_DEF	1359:0	1365:0	1	
RETURN_TYPE	1359:0	1359:0	2	int
TYPE_NAME	1359:0	1359:0	3	int
LEAF_NODE	1359:0	1359:0	4	int
FUNCTION_NAME	1360:0	1360:0	2	TIFFCreateEXIFDirectory
LEAF_NODE	1360:0	1360:0	3	TIFFCreateEXIFDirectory
PARAMETER_LIST	1360:23	1360:33	2	( TIFF * tif )
LEAF_NODE	1360:23	1360:23	3	(
PARAMETER_DECL	1360:24	1360:30	3	TIFF * tif
TYPE	1360:24	1360:28	4	TIFF *
TYPE_NAME	1360:24	1360:24	5	TIFF
LEAF_NODE	1360:24	1360:24	6	TIFF
POINTER	1360:28	1360:28	5	*
LEAF_NODE	1360:28	1360:28	6	*
NAME	1360:30	1360:30	4	tif
LEAF_NODE	1360:30	1360:30	5	tif
LEAF_NODE	1360:33	1360:33	3	)
LEAF_NODE	1361:0	1361:0	2	{
STATEMENTS	1362:1	1364:1	2	
SIMPLE_DECL	1362:1	1362:37	3	const TIFFFieldArray * exifFieldArray ;
VAR_DECL	1362:1	1362:23	4	const TIFFFieldArray * exifFieldArray
TYPE	1362:1	1362:21	5	const TIFFFieldArray *
TYPE_NAME	1362:1	1362:7	6	const TIFFFieldArray
LEAF_NODE	1362:1	1362:1	7	const
LEAF_NODE	1362:7	1362:7	7	TIFFFieldArray
POINTER	1362:21	1362:21	6	*
LEAF_NODE	1362:21	1362:21	7	*
NAME	1362:23	1362:23	5	exifFieldArray
LEAF_NODE	1362:23	1362:23	6	exifFieldArray
LEAF_NODE	1362:37	1362:37	4	;
EXPR_STATEMENT	1363:1	1363:38	3	exifFieldArray = _TIFFGetExifFields ( ) ;
EXPR	1363:1	1363:1	4	exifFieldArray = _TIFFGetExifFields ( )
ASSIGN	1363:1	1363:18	5	exifFieldArray = _TIFFGetExifFields ( )
LVAL	1363:1	1363:1	6	exifFieldArray
FIELD	1363:1	1363:1	7	exifFieldArray
LEAF_NODE	1363:1	1363:1	8	exifFieldArray
ASSIGN_OP	1363:16	1363:16	6	=
LEAF_NODE	1363:16	1363:16	7	=
RVAL	1363:18	1363:18	6	_TIFFGetExifFields ( )
FUNCTION_CALL	1363:18	1363:37	7	_TIFFGetExifFields ( )
CALLEE	1363:18	1363:18	8	_TIFFGetExifFields
LEAF_NODE	1363:18	1363:18	9	_TIFFGetExifFields
LEAF_NODE	1363:36	1363:36	8	(
LEAF_NODE	1363:37	1363:37	8	)
LEAF_NODE	1363:38	1363:38	4	;
JUMP_STATEMENT	1364:1	1364:54	3	return TIFFCreateCustomDirectory ( tif , exifFieldArray ) ;
KEYWORD	1364:1	1364:1	4	return
LEAF_NODE	1364:1	1364:1	5	return
DESTINATION	1364:8	1364:8	4	TIFFCreateCustomDirectory ( tif , exifFieldArray )
EXPR	1364:8	1364:8	5	TIFFCreateCustomDirectory ( tif , exifFieldArray )
FUNCTION_CALL	1364:8	1364:53	6	TIFFCreateCustomDirectory ( tif , exifFieldArray )
CALLEE	1364:8	1364:8	7	TIFFCreateCustomDirectory
LEAF_NODE	1364:8	1364:8	8	TIFFCreateCustomDirectory
LEAF_NODE	1364:33	1364:33	7	(
ARGUMENT	1364:34	1364:34	7	tif
FIELD	1364:34	1364:34	8	tif
LEAF_NODE	1364:34	1364:34	9	tif
LEAF_NODE	1364:37	1364:37	7	,
ARGUMENT	1364:39	1364:39	7	exifFieldArray
FIELD	1364:39	1364:39	8	exifFieldArray
LEAF_NODE	1364:39	1364:39	9	exifFieldArray
LEAF_NODE	1364:53	1364:53	7	)
LEAF_NODE	1364:54	1364:54	4	;
LEAF_NODE	1365:0	1365:0	2	}
FUNCTION_DEF	1370:0	1440:0	1	
RETURN_TYPE	1370:0	1370:0	2	int
TYPE_NAME	1370:0	1370:0	3	int
LEAF_NODE	1370:0	1370:0	4	int
FUNCTION_NAME	1371:0	1371:0	2	TIFFDefaultDirectory
LEAF_NODE	1371:0	1371:0	3	TIFFDefaultDirectory
PARAMETER_LIST	1371:20	1371:30	2	( TIFF * tif )
LEAF_NODE	1371:20	1371:20	3	(
PARAMETER_DECL	1371:21	1371:27	3	TIFF * tif
TYPE	1371:21	1371:25	4	TIFF *
TYPE_NAME	1371:21	1371:21	5	TIFF
LEAF_NODE	1371:21	1371:21	6	TIFF
POINTER	1371:25	1371:25	5	*
LEAF_NODE	1371:25	1371:25	6	*
NAME	1371:27	1371:27	4	tif
LEAF_NODE	1371:27	1371:27	5	tif
LEAF_NODE	1371:30	1371:30	3	)
LEAF_NODE	1372:0	1372:0	2	{
STATEMENTS	1373:1	1439:1	2	
LEAF_NODE	1373:1	1373:1	3	register
SIMPLE_DECL	1373:10	1373:43	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1373:10	1373:25	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1373:10	1373:23	5	TIFFDirectory *
TYPE_NAME	1373:10	1373:10	6	TIFFDirectory
LEAF_NODE	1373:10	1373:10	7	TIFFDirectory
POINTER	1373:23	1373:23	6	*
LEAF_NODE	1373:23	1373:23	7	*
NAME	1373:25	1373:25	5	td
LEAF_NODE	1373:25	1373:25	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1373:25	1373:25	5	td = & tif -> tif_dir
ASSIGN	1373:25	1373:30	6	td = & tif -> tif_dir
LVAL	1373:25	1373:25	7	td
NAME	1373:25	1373:25	8	td
LEAF_NODE	1373:25	1373:25	9	td
ASSIGN_OP	1373:28	1373:28	7	=
LEAF_NODE	1373:28	1373:28	8	=
RVAL	1373:30	1373:30	7	& tif -> tif_dir
UNARY_EXPR	1373:30	1373:31	8	& tif -> tif_dir
UNARY_OPERATOR	1373:30	1373:30	9	&
LEAF_NODE	1373:30	1373:30	10	&
FIELD	1373:31	1373:36	9	tif -> tif_dir
LEAF_NODE	1373:31	1373:31	10	tif
LEAF_NODE	1373:34	1373:34	10	->
LEAF_NODE	1373:36	1373:36	10	tif_dir
LEAF_NODE	1373:43	1373:43	4	;
SIMPLE_DECL	1374:1	1374:37	3	const TIFFFieldArray * tiffFieldArray ;
VAR_DECL	1374:1	1374:23	4	const TIFFFieldArray * tiffFieldArray
TYPE	1374:1	1374:21	5	const TIFFFieldArray *
TYPE_NAME	1374:1	1374:7	6	const TIFFFieldArray
LEAF_NODE	1374:1	1374:1	7	const
LEAF_NODE	1374:7	1374:7	7	TIFFFieldArray
POINTER	1374:21	1374:21	6	*
LEAF_NODE	1374:21	1374:21	7	*
NAME	1374:23	1374:23	5	tiffFieldArray
LEAF_NODE	1374:23	1374:23	6	tiffFieldArray
LEAF_NODE	1374:37	1374:37	4	;
EXPR_STATEMENT	1376:1	1376:34	3	tiffFieldArray = _TIFFGetFields ( ) ;
EXPR	1376:1	1376:1	4	tiffFieldArray = _TIFFGetFields ( )
ASSIGN	1376:1	1376:18	5	tiffFieldArray = _TIFFGetFields ( )
LVAL	1376:1	1376:1	6	tiffFieldArray
FIELD	1376:1	1376:1	7	tiffFieldArray
LEAF_NODE	1376:1	1376:1	8	tiffFieldArray
ASSIGN_OP	1376:16	1376:16	6	=
LEAF_NODE	1376:16	1376:16	7	=
RVAL	1376:18	1376:18	6	_TIFFGetFields ( )
FUNCTION_CALL	1376:18	1376:33	7	_TIFFGetFields ( )
CALLEE	1376:18	1376:18	8	_TIFFGetFields
LEAF_NODE	1376:18	1376:18	9	_TIFFGetFields
LEAF_NODE	1376:32	1376:32	8	(
LEAF_NODE	1376:33	1376:33	8	)
LEAF_NODE	1376:34	1376:34	4	;
EXPR_STATEMENT	1377:1	1377:38	3	_TIFFSetupFields ( tif , tiffFieldArray ) ;
EXPR	1377:1	1377:1	4	_TIFFSetupFields ( tif , tiffFieldArray )
FUNCTION_CALL	1377:1	1377:37	5	_TIFFSetupFields ( tif , tiffFieldArray )
CALLEE	1377:1	1377:1	6	_TIFFSetupFields
LEAF_NODE	1377:1	1377:1	7	_TIFFSetupFields
LEAF_NODE	1377:17	1377:17	6	(
ARGUMENT	1377:18	1377:18	6	tif
FIELD	1377:18	1377:18	7	tif
LEAF_NODE	1377:18	1377:18	8	tif
LEAF_NODE	1377:21	1377:21	6	,
ARGUMENT	1377:23	1377:23	6	tiffFieldArray
FIELD	1377:23	1377:23	7	tiffFieldArray
LEAF_NODE	1377:23	1377:23	8	tiffFieldArray
LEAF_NODE	1377:37	1377:37	6	)
LEAF_NODE	1377:38	1377:38	4	;
EXPR_STATEMENT	1379:1	1379:33	3	_TIFFmemset ( td , 0 , sizeof ( * td ) ) ;
EXPR	1379:1	1379:1	4	_TIFFmemset ( td , 0 , sizeof ( * td ) )
FUNCTION_CALL	1379:1	1379:32	5	_TIFFmemset ( td , 0 , sizeof ( * td ) )
CALLEE	1379:1	1379:1	6	_TIFFmemset
LEAF_NODE	1379:1	1379:1	7	_TIFFmemset
LEAF_NODE	1379:12	1379:12	6	(
ARGUMENT	1379:13	1379:13	6	td
FIELD	1379:13	1379:13	7	td
LEAF_NODE	1379:13	1379:13	8	td
LEAF_NODE	1379:15	1379:15	6	,
ARGUMENT	1379:17	1379:17	6	0
FIELD	1379:17	1379:17	7	0
LEAF_NODE	1379:17	1379:17	8	0
LEAF_NODE	1379:18	1379:18	6	,
ARGUMENT	1379:20	1379:20	6	sizeof ( * td )
FUNCTION_CALL	1379:20	1379:31	7	sizeof ( * td )
CALLEE	1379:20	1379:20	8	sizeof
LEAF_NODE	1379:20	1379:20	9	sizeof
LEAF_NODE	1379:27	1379:27	8	(
ARGUMENT	1379:28	1379:28	8	* td
UNARY_EXPR	1379:28	1379:29	9	* td
UNARY_OPERATOR	1379:28	1379:28	10	*
LEAF_NODE	1379:28	1379:28	11	*
FIELD	1379:29	1379:29	10	td
LEAF_NODE	1379:29	1379:29	11	td
LEAF_NODE	1379:31	1379:31	8	)
LEAF_NODE	1379:32	1379:32	6	)
LEAF_NODE	1379:33	1379:33	4	;
EXPR_STATEMENT	1380:1	1380:37	3	td -> td_fillorder = FILLORDER_MSB2LSB ;
EXPR	1380:1	1380:1	4	td -> td_fillorder = FILLORDER_MSB2LSB
ASSIGN	1380:1	1380:20	5	td -> td_fillorder = FILLORDER_MSB2LSB
LVAL	1380:1	1380:1	6	td -> td_fillorder
FIELD	1380:1	1380:5	7	td -> td_fillorder
LEAF_NODE	1380:1	1380:1	8	td
LEAF_NODE	1380:3	1380:3	8	->
LEAF_NODE	1380:5	1380:5	8	td_fillorder
ASSIGN_OP	1380:18	1380:18	6	=
LEAF_NODE	1380:18	1380:18	7	=
RVAL	1380:20	1380:20	6	FILLORDER_MSB2LSB
FIELD	1380:20	1380:20	7	FILLORDER_MSB2LSB
LEAF_NODE	1380:20	1380:20	8	FILLORDER_MSB2LSB
LEAF_NODE	1380:37	1380:37	4	;
EXPR_STATEMENT	1381:1	1381:25	3	td -> td_bitspersample = 1 ;
EXPR	1381:1	1381:1	4	td -> td_bitspersample = 1
ASSIGN	1381:1	1381:24	5	td -> td_bitspersample = 1
LVAL	1381:1	1381:1	6	td -> td_bitspersample
FIELD	1381:1	1381:5	7	td -> td_bitspersample
LEAF_NODE	1381:1	1381:1	8	td
LEAF_NODE	1381:3	1381:3	8	->
LEAF_NODE	1381:5	1381:5	8	td_bitspersample
ASSIGN_OP	1381:22	1381:22	6	=
LEAF_NODE	1381:22	1381:22	7	=
RVAL	1381:24	1381:24	6	1
FIELD	1381:24	1381:24	7	1
LEAF_NODE	1381:24	1381:24	8	1
LEAF_NODE	1381:25	1381:25	4	;
EXPR_STATEMENT	1382:1	1382:42	3	td -> td_threshholding = THRESHHOLD_BILEVEL ;
EXPR	1382:1	1382:1	4	td -> td_threshholding = THRESHHOLD_BILEVEL
ASSIGN	1382:1	1382:24	5	td -> td_threshholding = THRESHHOLD_BILEVEL
LVAL	1382:1	1382:1	6	td -> td_threshholding
FIELD	1382:1	1382:5	7	td -> td_threshholding
LEAF_NODE	1382:1	1382:1	8	td
LEAF_NODE	1382:3	1382:3	8	->
LEAF_NODE	1382:5	1382:5	8	td_threshholding
ASSIGN_OP	1382:22	1382:22	6	=
LEAF_NODE	1382:22	1382:22	7	=
RVAL	1382:24	1382:24	6	THRESHHOLD_BILEVEL
FIELD	1382:24	1382:24	7	THRESHHOLD_BILEVEL
LEAF_NODE	1382:24	1382:24	8	THRESHHOLD_BILEVEL
LEAF_NODE	1382:42	1382:42	4	;
EXPR_STATEMENT	1383:1	1383:41	3	td -> td_orientation = ORIENTATION_TOPLEFT ;
EXPR	1383:1	1383:1	4	td -> td_orientation = ORIENTATION_TOPLEFT
ASSIGN	1383:1	1383:22	5	td -> td_orientation = ORIENTATION_TOPLEFT
LVAL	1383:1	1383:1	6	td -> td_orientation
FIELD	1383:1	1383:5	7	td -> td_orientation
LEAF_NODE	1383:1	1383:1	8	td
LEAF_NODE	1383:3	1383:3	8	->
LEAF_NODE	1383:5	1383:5	8	td_orientation
ASSIGN_OP	1383:20	1383:20	6	=
LEAF_NODE	1383:20	1383:20	7	=
RVAL	1383:22	1383:22	6	ORIENTATION_TOPLEFT
FIELD	1383:22	1383:22	7	ORIENTATION_TOPLEFT
LEAF_NODE	1383:22	1383:22	8	ORIENTATION_TOPLEFT
LEAF_NODE	1383:41	1383:41	4	;
EXPR_STATEMENT	1384:1	1384:27	3	td -> td_samplesperpixel = 1 ;
EXPR	1384:1	1384:1	4	td -> td_samplesperpixel = 1
ASSIGN	1384:1	1384:26	5	td -> td_samplesperpixel = 1
LVAL	1384:1	1384:1	6	td -> td_samplesperpixel
FIELD	1384:1	1384:5	7	td -> td_samplesperpixel
LEAF_NODE	1384:1	1384:1	8	td
LEAF_NODE	1384:3	1384:3	8	->
LEAF_NODE	1384:5	1384:5	8	td_samplesperpixel
ASSIGN_OP	1384:24	1384:24	6	=
LEAF_NODE	1384:24	1384:24	7	=
RVAL	1384:26	1384:26	6	1
FIELD	1384:26	1384:26	7	1
LEAF_NODE	1384:26	1384:26	8	1
LEAF_NODE	1384:27	1384:27	4	;
EXPR_STATEMENT	1385:1	1385:34	3	td -> td_rowsperstrip = ( uint32 ) - 1 ;
EXPR	1385:1	1385:1	4	td -> td_rowsperstrip = ( uint32 ) - 1
ASSIGN	1385:1	1385:23	5	td -> td_rowsperstrip = ( uint32 ) - 1
LVAL	1385:1	1385:1	6	td -> td_rowsperstrip
FIELD	1385:1	1385:5	7	td -> td_rowsperstrip
LEAF_NODE	1385:1	1385:1	8	td
LEAF_NODE	1385:3	1385:3	8	->
LEAF_NODE	1385:5	1385:5	8	td_rowsperstrip
ASSIGN_OP	1385:21	1385:21	6	=
LEAF_NODE	1385:21	1385:21	7	=
RVAL	1385:23	1385:32	6	( uint32 ) - 1
LEAF_NODE	1385:23	1385:23	7	(
TYPE_NAME	1385:24	1385:24	7	uint32
LEAF_NODE	1385:24	1385:24	8	uint32
LEAF_NODE	1385:30	1385:30	7	)
UNARY_EXPR	1385:32	1385:33	7	- 1
UNARY_OPERATOR	1385:32	1385:32	8	-
LEAF_NODE	1385:32	1385:32	9	-
FIELD	1385:33	1385:33	8	1
LEAF_NODE	1385:33	1385:33	9	1
LEAF_NODE	1385:34	1385:34	4	;
EXPR_STATEMENT	1386:1	1386:21	3	td -> td_tilewidth = 0 ;
EXPR	1386:1	1386:1	4	td -> td_tilewidth = 0
ASSIGN	1386:1	1386:20	5	td -> td_tilewidth = 0
LVAL	1386:1	1386:1	6	td -> td_tilewidth
FIELD	1386:1	1386:5	7	td -> td_tilewidth
LEAF_NODE	1386:1	1386:1	8	td
LEAF_NODE	1386:3	1386:3	8	->
LEAF_NODE	1386:5	1386:5	8	td_tilewidth
ASSIGN_OP	1386:18	1386:18	6	=
LEAF_NODE	1386:18	1386:18	7	=
RVAL	1386:20	1386:20	6	0
FIELD	1386:20	1386:20	7	0
LEAF_NODE	1386:20	1386:20	8	0
LEAF_NODE	1386:21	1386:21	4	;
EXPR_STATEMENT	1387:1	1387:22	3	td -> td_tilelength = 0 ;
EXPR	1387:1	1387:1	4	td -> td_tilelength = 0
ASSIGN	1387:1	1387:21	5	td -> td_tilelength = 0
LVAL	1387:1	1387:1	6	td -> td_tilelength
FIELD	1387:1	1387:5	7	td -> td_tilelength
LEAF_NODE	1387:1	1387:1	8	td
LEAF_NODE	1387:3	1387:3	8	->
LEAF_NODE	1387:5	1387:5	8	td_tilelength
ASSIGN_OP	1387:19	1387:19	6	=
LEAF_NODE	1387:19	1387:19	7	=
RVAL	1387:21	1387:21	6	0
FIELD	1387:21	1387:21	7	0
LEAF_NODE	1387:21	1387:21	8	0
LEAF_NODE	1387:22	1387:22	4	;
EXPR_STATEMENT	1388:1	1388:21	3	td -> td_tiledepth = 1 ;
EXPR	1388:1	1388:1	4	td -> td_tiledepth = 1
ASSIGN	1388:1	1388:20	5	td -> td_tiledepth = 1
LVAL	1388:1	1388:1	6	td -> td_tiledepth
FIELD	1388:1	1388:5	7	td -> td_tiledepth
LEAF_NODE	1388:1	1388:1	8	td
LEAF_NODE	1388:3	1388:3	8	->
LEAF_NODE	1388:5	1388:5	8	td_tiledepth
ASSIGN_OP	1388:18	1388:18	6	=
LEAF_NODE	1388:18	1388:18	7	=
RVAL	1388:20	1388:20	6	1
FIELD	1388:20	1388:20	7	1
LEAF_NODE	1388:20	1388:20	8	1
LEAF_NODE	1388:21	1388:21	4	;
EXPR_STATEMENT	1390:1	1390:32	3	td -> td_stripbytecountsorted = 1 ;
EXPR	1390:1	1390:1	4	td -> td_stripbytecountsorted = 1
ASSIGN	1390:1	1390:31	5	td -> td_stripbytecountsorted = 1
LVAL	1390:1	1390:1	6	td -> td_stripbytecountsorted
FIELD	1390:1	1390:5	7	td -> td_stripbytecountsorted
LEAF_NODE	1390:1	1390:1	8	td
LEAF_NODE	1390:3	1390:3	8	->
LEAF_NODE	1390:5	1390:5	8	td_stripbytecountsorted
ASSIGN_OP	1390:29	1390:29	6	=
LEAF_NODE	1390:29	1390:29	7	=
RVAL	1390:31	1390:31	6	1
FIELD	1390:31	1390:31	7	1
LEAF_NODE	1390:31	1390:31	8	1
LEAF_NODE	1390:32	1390:32	4	;
EXPR_STATEMENT	1392:1	1392:37	3	td -> td_resolutionunit = RESUNIT_INCH ;
EXPR	1392:1	1392:1	4	td -> td_resolutionunit = RESUNIT_INCH
ASSIGN	1392:1	1392:25	5	td -> td_resolutionunit = RESUNIT_INCH
LVAL	1392:1	1392:1	6	td -> td_resolutionunit
FIELD	1392:1	1392:5	7	td -> td_resolutionunit
LEAF_NODE	1392:1	1392:1	8	td
LEAF_NODE	1392:3	1392:3	8	->
LEAF_NODE	1392:5	1392:5	8	td_resolutionunit
ASSIGN_OP	1392:23	1392:23	6	=
LEAF_NODE	1392:23	1392:23	7	=
RVAL	1392:25	1392:25	6	RESUNIT_INCH
FIELD	1392:25	1392:25	7	RESUNIT_INCH
LEAF_NODE	1392:25	1392:25	8	RESUNIT_INCH
LEAF_NODE	1392:37	1392:37	4	;
EXPR_STATEMENT	1393:1	1393:40	3	td -> td_sampleformat = SAMPLEFORMAT_UINT ;
EXPR	1393:1	1393:1	4	td -> td_sampleformat = SAMPLEFORMAT_UINT
ASSIGN	1393:1	1393:23	5	td -> td_sampleformat = SAMPLEFORMAT_UINT
LVAL	1393:1	1393:1	6	td -> td_sampleformat
FIELD	1393:1	1393:5	7	td -> td_sampleformat
LEAF_NODE	1393:1	1393:1	8	td
LEAF_NODE	1393:3	1393:3	8	->
LEAF_NODE	1393:5	1393:5	8	td_sampleformat
ASSIGN_OP	1393:21	1393:21	6	=
LEAF_NODE	1393:21	1393:21	7	=
RVAL	1393:23	1393:23	6	SAMPLEFORMAT_UINT
FIELD	1393:23	1393:23	7	SAMPLEFORMAT_UINT
LEAF_NODE	1393:23	1393:23	8	SAMPLEFORMAT_UINT
LEAF_NODE	1393:40	1393:40	4	;
EXPR_STATEMENT	1394:1	1394:22	3	td -> td_imagedepth = 1 ;
EXPR	1394:1	1394:1	4	td -> td_imagedepth = 1
ASSIGN	1394:1	1394:21	5	td -> td_imagedepth = 1
LVAL	1394:1	1394:1	6	td -> td_imagedepth
FIELD	1394:1	1394:5	7	td -> td_imagedepth
LEAF_NODE	1394:1	1394:1	8	td
LEAF_NODE	1394:3	1394:3	8	->
LEAF_NODE	1394:5	1394:5	8	td_imagedepth
ASSIGN_OP	1394:19	1394:19	6	=
LEAF_NODE	1394:19	1394:19	7	=
RVAL	1394:21	1394:21	6	1
FIELD	1394:21	1394:21	7	1
LEAF_NODE	1394:21	1394:21	8	1
LEAF_NODE	1394:22	1394:22	4	;
EXPR_STATEMENT	1395:1	1395:31	3	td -> td_ycbcrsubsampling [ 0 ] = 2 ;
EXPR	1395:1	1395:1	4	td -> td_ycbcrsubsampling [ 0 ] = 2
ASSIGN	1395:1	1395:30	5	td -> td_ycbcrsubsampling [ 0 ] = 2
LVAL	1395:1	1395:1	6	td -> td_ycbcrsubsampling [ 0 ]
FIELD	1395:1	1395:26	7	td -> td_ycbcrsubsampling [ 0 ]
LEAF_NODE	1395:1	1395:1	8	td
LEAF_NODE	1395:3	1395:3	8	->
LEAF_NODE	1395:5	1395:5	8	td_ycbcrsubsampling
LEAF_NODE	1395:24	1395:24	8	[
EXPR	1395:25	1395:25	8	0
FIELD	1395:25	1395:25	9	0
LEAF_NODE	1395:25	1395:25	10	0
LEAF_NODE	1395:26	1395:26	8	]
ASSIGN_OP	1395:28	1395:28	6	=
LEAF_NODE	1395:28	1395:28	7	=
RVAL	1395:30	1395:30	6	2
FIELD	1395:30	1395:30	7	2
LEAF_NODE	1395:30	1395:30	8	2
LEAF_NODE	1395:31	1395:31	4	;
EXPR_STATEMENT	1396:1	1396:31	3	td -> td_ycbcrsubsampling [ 1 ] = 2 ;
EXPR	1396:1	1396:1	4	td -> td_ycbcrsubsampling [ 1 ] = 2
ASSIGN	1396:1	1396:30	5	td -> td_ycbcrsubsampling [ 1 ] = 2
LVAL	1396:1	1396:1	6	td -> td_ycbcrsubsampling [ 1 ]
FIELD	1396:1	1396:26	7	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	1396:1	1396:1	8	td
LEAF_NODE	1396:3	1396:3	8	->
LEAF_NODE	1396:5	1396:5	8	td_ycbcrsubsampling
LEAF_NODE	1396:24	1396:24	8	[
EXPR	1396:25	1396:25	8	1
FIELD	1396:25	1396:25	9	1
LEAF_NODE	1396:25	1396:25	10	1
LEAF_NODE	1396:26	1396:26	8	]
ASSIGN_OP	1396:28	1396:28	6	=
LEAF_NODE	1396:28	1396:28	7	=
RVAL	1396:30	1396:30	6	2
FIELD	1396:30	1396:30	7	2
LEAF_NODE	1396:30	1396:30	8	2
LEAF_NODE	1396:31	1396:31	4	;
EXPR_STATEMENT	1397:1	1397:49	3	td -> td_ycbcrpositioning = YCBCRPOSITION_CENTERED ;
EXPR	1397:1	1397:1	4	td -> td_ycbcrpositioning = YCBCRPOSITION_CENTERED
ASSIGN	1397:1	1397:27	5	td -> td_ycbcrpositioning = YCBCRPOSITION_CENTERED
LVAL	1397:1	1397:1	6	td -> td_ycbcrpositioning
FIELD	1397:1	1397:5	7	td -> td_ycbcrpositioning
LEAF_NODE	1397:1	1397:1	8	td
LEAF_NODE	1397:3	1397:3	8	->
LEAF_NODE	1397:5	1397:5	8	td_ycbcrpositioning
ASSIGN_OP	1397:25	1397:25	6	=
LEAF_NODE	1397:25	1397:25	7	=
RVAL	1397:27	1397:27	6	YCBCRPOSITION_CENTERED
FIELD	1397:27	1397:27	7	YCBCRPOSITION_CENTERED
LEAF_NODE	1397:27	1397:27	8	YCBCRPOSITION_CENTERED
LEAF_NODE	1397:49	1397:49	4	;
EXPR_STATEMENT	1398:1	1398:40	3	tif -> tif_postdecode = _TIFFNoPostDecode ;
EXPR	1398:1	1398:1	4	tif -> tif_postdecode = _TIFFNoPostDecode
ASSIGN	1398:1	1398:23	5	tif -> tif_postdecode = _TIFFNoPostDecode
LVAL	1398:1	1398:1	6	tif -> tif_postdecode
FIELD	1398:1	1398:6	7	tif -> tif_postdecode
LEAF_NODE	1398:1	1398:1	8	tif
LEAF_NODE	1398:4	1398:4	8	->
LEAF_NODE	1398:6	1398:6	8	tif_postdecode
ASSIGN_OP	1398:21	1398:21	6	=
LEAF_NODE	1398:21	1398:21	7	=
RVAL	1398:23	1398:23	6	_TIFFNoPostDecode
FIELD	1398:23	1398:23	7	_TIFFNoPostDecode
LEAF_NODE	1398:23	1398:23	8	_TIFFNoPostDecode
LEAF_NODE	1398:40	1398:40	4	;
EXPR_STATEMENT	1399:1	1399:27	3	tif -> tif_foundfield = NULL ;
EXPR	1399:1	1399:1	4	tif -> tif_foundfield = NULL
ASSIGN	1399:1	1399:23	5	tif -> tif_foundfield = NULL
LVAL	1399:1	1399:1	6	tif -> tif_foundfield
FIELD	1399:1	1399:6	7	tif -> tif_foundfield
LEAF_NODE	1399:1	1399:1	8	tif
LEAF_NODE	1399:4	1399:4	8	->
LEAF_NODE	1399:6	1399:6	8	tif_foundfield
ASSIGN_OP	1399:21	1399:21	6	=
LEAF_NODE	1399:21	1399:21	7	=
RVAL	1399:23	1399:23	6	NULL
FIELD	1399:23	1399:23	7	NULL
LEAF_NODE	1399:23	1399:23	8	NULL
LEAF_NODE	1399:27	1399:27	4	;
EXPR_STATEMENT	1400:1	1400:47	3	tif -> tif_tagmethods . vsetfield = _TIFFVSetField ;
EXPR	1400:1	1400:1	4	tif -> tif_tagmethods . vsetfield = _TIFFVSetField
ASSIGN	1400:1	1400:33	5	tif -> tif_tagmethods . vsetfield = _TIFFVSetField
LVAL	1400:1	1400:1	6	tif -> tif_tagmethods . vsetfield
FIELD	1400:1	1400:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	1400:1	1400:1	8	tif
LEAF_NODE	1400:4	1400:4	8	->
LEAF_NODE	1400:6	1400:6	8	tif_tagmethods
LEAF_NODE	1400:20	1400:20	8	.
LEAF_NODE	1400:21	1400:21	8	vsetfield
ASSIGN_OP	1400:31	1400:31	6	=
LEAF_NODE	1400:31	1400:31	7	=
RVAL	1400:33	1400:33	6	_TIFFVSetField
FIELD	1400:33	1400:33	7	_TIFFVSetField
LEAF_NODE	1400:33	1400:33	8	_TIFFVSetField
LEAF_NODE	1400:47	1400:47	4	;
EXPR_STATEMENT	1401:1	1401:47	3	tif -> tif_tagmethods . vgetfield = _TIFFVGetField ;
EXPR	1401:1	1401:1	4	tif -> tif_tagmethods . vgetfield = _TIFFVGetField
ASSIGN	1401:1	1401:33	5	tif -> tif_tagmethods . vgetfield = _TIFFVGetField
LVAL	1401:1	1401:1	6	tif -> tif_tagmethods . vgetfield
FIELD	1401:1	1401:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1401:1	1401:1	8	tif
LEAF_NODE	1401:4	1401:4	8	->
LEAF_NODE	1401:6	1401:6	8	tif_tagmethods
LEAF_NODE	1401:20	1401:20	8	.
LEAF_NODE	1401:21	1401:21	8	vgetfield
ASSIGN_OP	1401:31	1401:31	6	=
LEAF_NODE	1401:31	1401:31	7	=
RVAL	1401:33	1401:33	6	_TIFFVGetField
FIELD	1401:33	1401:33	7	_TIFFVGetField
LEAF_NODE	1401:33	1401:33	8	_TIFFVGetField
LEAF_NODE	1401:47	1401:47	4	;
EXPR_STATEMENT	1402:1	1402:36	3	tif -> tif_tagmethods . printdir = NULL ;
EXPR	1402:1	1402:1	4	tif -> tif_tagmethods . printdir = NULL
ASSIGN	1402:1	1402:32	5	tif -> tif_tagmethods . printdir = NULL
LVAL	1402:1	1402:1	6	tif -> tif_tagmethods . printdir
FIELD	1402:1	1402:21	7	tif -> tif_tagmethods . printdir
LEAF_NODE	1402:1	1402:1	8	tif
LEAF_NODE	1402:4	1402:4	8	->
LEAF_NODE	1402:6	1402:6	8	tif_tagmethods
LEAF_NODE	1402:20	1402:20	8	.
LEAF_NODE	1402:21	1402:21	8	printdir
ASSIGN_OP	1402:30	1402:30	6	=
LEAF_NODE	1402:30	1402:30	7	=
RVAL	1402:32	1402:32	6	NULL
FIELD	1402:32	1402:32	7	NULL
LEAF_NODE	1402:32	1402:32	8	NULL
LEAF_NODE	1402:36	1402:36	4	;
SELECTION	1408:1	1408:33	3	
KEYWORD	1408:1	1408:1	4	if
LEAF_NODE	1408:1	1408:1	5	if
LEAF_NODE	1408:4	1408:4	4	(
CONDITION	1408:5	1408:5	4	tif -> tif_nfieldscompat > 0
EXPR	1408:5	1408:30	5	tif -> tif_nfieldscompat > 0
FIELD	1408:5	1408:10	6	tif -> tif_nfieldscompat
LEAF_NODE	1408:5	1408:5	7	tif
LEAF_NODE	1408:8	1408:8	7	->
LEAF_NODE	1408:10	1408:10	7	tif_nfieldscompat
REL_OPERATOR	1408:28	1408:28	6	>
LEAF_NODE	1408:28	1408:28	7	>
FIELD	1408:30	1408:30	6	0
LEAF_NODE	1408:30	1408:30	7	0
LEAF_NODE	1408:31	1408:31	4	)
STATEMENTS	1408:33	1418:1	4	
LEAF_NODE	1408:33	1408:33	5	{
STATEMENTS	1409:2	1417:2	5	
SIMPLE_DECL	1409:2	1409:10	6	uint32 i ;
VAR_DECL	1409:2	1409:9	7	uint32 i
TYPE	1409:2	1409:2	8	uint32
TYPE_NAME	1409:2	1409:2	9	uint32
LEAF_NODE	1409:2	1409:2	10	uint32
NAME	1409:9	1409:9	8	i
LEAF_NODE	1409:9	1409:9	9	i
LEAF_NODE	1409:10	1409:10	7	;
ITERATION	1411:2	1411:47	6	
KEYWORD	1411:2	1411:2	7	for
LEAF_NODE	1411:2	1411:2	8	for
LEAF_NODE	1411:6	1411:6	7	(
FOR_INIT	1411:7	1411:12	7	i = 0 ;
EXPR	1411:7	1411:7	8	i = 0
ASSIGN	1411:7	1411:11	9	i = 0
LVAL	1411:7	1411:7	10	i
FIELD	1411:7	1411:7	11	i
LEAF_NODE	1411:7	1411:7	12	i
ASSIGN_OP	1411:9	1411:9	10	=
LEAF_NODE	1411:9	1411:9	11	=
RVAL	1411:11	1411:11	10	0
FIELD	1411:11	1411:11	11	0
LEAF_NODE	1411:11	1411:11	12	0
LEAF_NODE	1411:12	1411:12	8	;
CONDITION	1411:14	1411:14	7	i < tif -> tif_nfieldscompat
EXPR	1411:14	1411:18	8	i < tif -> tif_nfieldscompat
FIELD	1411:14	1411:14	9	i
LEAF_NODE	1411:14	1411:14	10	i
REL_OPERATOR	1411:16	1411:16	9	<
LEAF_NODE	1411:16	1411:16	10	<
FIELD	1411:18	1411:23	9	tif -> tif_nfieldscompat
LEAF_NODE	1411:18	1411:18	10	tif
LEAF_NODE	1411:21	1411:21	10	->
LEAF_NODE	1411:23	1411:23	10	tif_nfieldscompat
LEAF_NODE	1411:40	1411:40	7	;
FOR_EXPR	1411:42	1411:42	7	i ++
EXPR	1411:42	1411:42	8	i ++
FIELD	1411:42	1411:43	9	i ++
LEAF_NODE	1411:42	1411:42	10	i
LEAF_NODE	1411:43	1411:43	10	++
LEAF_NODE	1411:45	1411:45	7	)
STATEMENTS	1411:47	1414:2	7	
LEAF_NODE	1411:47	1411:47	8	{
STATEMENTS	1412:4	1412:4	8	
SELECTION	1412:4	1413:6	9	
KEYWORD	1412:4	1412:4	10	if
LEAF_NODE	1412:4	1412:4	11	if
LEAF_NODE	1412:7	1412:7	10	(
CONDITION	1412:8	1412:8	10	tif -> tif_fieldscompat [ i ] . allocated_size
EXPR	1412:8	1412:8	11	tif -> tif_fieldscompat [ i ] . allocated_size
FIELD	1412:8	1412:33	12	tif -> tif_fieldscompat [ i ] . allocated_size
LEAF_NODE	1412:8	1412:8	13	tif
LEAF_NODE	1412:11	1412:11	13	->
LEAF_NODE	1412:13	1412:13	13	tif_fieldscompat
LEAF_NODE	1412:29	1412:29	13	[
EXPR	1412:30	1412:30	13	i
FIELD	1412:30	1412:30	14	i
LEAF_NODE	1412:30	1412:30	15	i
LEAF_NODE	1412:31	1412:31	13	]
LEAF_NODE	1412:32	1412:32	13	.
LEAF_NODE	1412:33	1412:33	13	allocated_size
LEAF_NODE	1412:47	1412:47	10	)
STATEMENTS	1413:6	1413:6	10	
EXPR_STATEMENT	1413:6	1413:48	11	_TIFFfree ( tif -> tif_fieldscompat [ i ] . fields ) ;
EXPR	1413:6	1413:6	12	_TIFFfree ( tif -> tif_fieldscompat [ i ] . fields )
FUNCTION_CALL	1413:6	1413:47	13	_TIFFfree ( tif -> tif_fieldscompat [ i ] . fields )
CALLEE	1413:6	1413:6	14	_TIFFfree
LEAF_NODE	1413:6	1413:6	15	_TIFFfree
LEAF_NODE	1413:15	1413:15	14	(
ARGUMENT	1413:16	1413:16	14	tif -> tif_fieldscompat [ i ] . fields
FIELD	1413:16	1413:41	15	tif -> tif_fieldscompat [ i ] . fields
LEAF_NODE	1413:16	1413:16	16	tif
LEAF_NODE	1413:19	1413:19	16	->
LEAF_NODE	1413:21	1413:21	16	tif_fieldscompat
LEAF_NODE	1413:37	1413:37	16	[
EXPR	1413:38	1413:38	16	i
FIELD	1413:38	1413:38	17	i
LEAF_NODE	1413:38	1413:38	18	i
LEAF_NODE	1413:39	1413:39	16	]
LEAF_NODE	1413:40	1413:40	16	.
LEAF_NODE	1413:41	1413:41	16	fields
LEAF_NODE	1413:47	1413:47	14	)
LEAF_NODE	1413:48	1413:48	12	;
LEAF_NODE	1414:2	1414:2	8	}
EXPR_STATEMENT	1415:2	1415:34	6	_TIFFfree ( tif -> tif_fieldscompat ) ;
EXPR	1415:2	1415:2	7	_TIFFfree ( tif -> tif_fieldscompat )
FUNCTION_CALL	1415:2	1415:33	8	_TIFFfree ( tif -> tif_fieldscompat )
CALLEE	1415:2	1415:2	9	_TIFFfree
LEAF_NODE	1415:2	1415:2	10	_TIFFfree
LEAF_NODE	1415:11	1415:11	9	(
ARGUMENT	1415:12	1415:12	9	tif -> tif_fieldscompat
FIELD	1415:12	1415:17	10	tif -> tif_fieldscompat
LEAF_NODE	1415:12	1415:12	11	tif
LEAF_NODE	1415:15	1415:15	11	->
LEAF_NODE	1415:17	1415:17	11	tif_fieldscompat
LEAF_NODE	1415:33	1415:33	9	)
LEAF_NODE	1415:34	1415:34	7	;
EXPR_STATEMENT	1416:2	1416:28	6	tif -> tif_nfieldscompat = 0 ;
EXPR	1416:2	1416:2	7	tif -> tif_nfieldscompat = 0
ASSIGN	1416:2	1416:27	8	tif -> tif_nfieldscompat = 0
LVAL	1416:2	1416:2	9	tif -> tif_nfieldscompat
FIELD	1416:2	1416:7	10	tif -> tif_nfieldscompat
LEAF_NODE	1416:2	1416:2	11	tif
LEAF_NODE	1416:5	1416:5	11	->
LEAF_NODE	1416:7	1416:7	11	tif_nfieldscompat
ASSIGN_OP	1416:25	1416:25	9	=
LEAF_NODE	1416:25	1416:25	10	=
RVAL	1416:27	1416:27	9	0
FIELD	1416:27	1416:27	10	0
LEAF_NODE	1416:27	1416:27	11	0
LEAF_NODE	1416:28	1416:28	7	;
EXPR_STATEMENT	1417:2	1417:30	6	tif -> tif_fieldscompat = NULL ;
EXPR	1417:2	1417:2	7	tif -> tif_fieldscompat = NULL
ASSIGN	1417:2	1417:26	8	tif -> tif_fieldscompat = NULL
LVAL	1417:2	1417:2	9	tif -> tif_fieldscompat
FIELD	1417:2	1417:7	10	tif -> tif_fieldscompat
LEAF_NODE	1417:2	1417:2	11	tif
LEAF_NODE	1417:5	1417:5	11	->
LEAF_NODE	1417:7	1417:7	11	tif_fieldscompat
ASSIGN_OP	1417:24	1417:24	9	=
LEAF_NODE	1417:24	1417:24	10	=
RVAL	1417:26	1417:26	9	NULL
FIELD	1417:26	1417:26	10	NULL
LEAF_NODE	1417:26	1417:26	11	NULL
LEAF_NODE	1417:30	1417:30	7	;
LEAF_NODE	1418:1	1418:1	5	}
SELECTION	1419:1	1420:2	3	
KEYWORD	1419:1	1419:1	4	if
LEAF_NODE	1419:1	1419:1	5	if
LEAF_NODE	1419:4	1419:4	4	(
CONDITION	1419:5	1419:5	4	_TIFFextender
EXPR	1419:5	1419:5	5	_TIFFextender
FIELD	1419:5	1419:5	6	_TIFFextender
LEAF_NODE	1419:5	1419:5	7	_TIFFextender
LEAF_NODE	1419:18	1419:18	4	)
STATEMENTS	1420:2	1420:2	4	
EXPR_STATEMENT	1420:2	1420:23	5	( * _TIFFextender ) ( tif ) ;
EXPR	1420:2	1420:2	6	( * _TIFFextender ) ( tif )
FUNCTION_CALL	1420:2	1420:22	7	( * _TIFFextender ) ( tif )
CALLEE	1420:2	1420:17	8	( * _TIFFextender )
LEAF_NODE	1420:2	1420:2	9	(
UNARY_EXPR	1420:3	1420:4	9	* _TIFFextender
UNARY_OPERATOR	1420:3	1420:3	10	*
LEAF_NODE	1420:3	1420:3	11	*
FIELD	1420:4	1420:4	10	_TIFFextender
LEAF_NODE	1420:4	1420:4	11	_TIFFextender
LEAF_NODE	1420:17	1420:17	9	)
LEAF_NODE	1420:18	1420:18	8	(
ARGUMENT	1420:19	1420:19	8	tif
FIELD	1420:19	1420:19	9	tif
LEAF_NODE	1420:19	1420:19	10	tif
LEAF_NODE	1420:22	1420:22	8	)
LEAF_NODE	1420:23	1420:23	6	;
EXPR_STATEMENT	1421:1	1421:64	3	( void ) TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE ) ;
EXPR	1421:1	1421:8	4	( void ) TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
LEAF_NODE	1421:1	1421:1	5	(
TYPE_NAME	1421:2	1421:2	5	void
LEAF_NODE	1421:2	1421:2	6	void
LEAF_NODE	1421:6	1421:6	5	)
FUNCTION_CALL	1421:8	1421:63	5	TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
CALLEE	1421:8	1421:8	6	TIFFSetField
LEAF_NODE	1421:8	1421:8	7	TIFFSetField
LEAF_NODE	1421:20	1421:20	6	(
ARGUMENT	1421:21	1421:21	6	tif
FIELD	1421:21	1421:21	7	tif
LEAF_NODE	1421:21	1421:21	8	tif
LEAF_NODE	1421:24	1421:24	6	,
ARGUMENT	1421:26	1421:26	6	TIFFTAG_COMPRESSION
FIELD	1421:26	1421:26	7	TIFFTAG_COMPRESSION
LEAF_NODE	1421:26	1421:26	8	TIFFTAG_COMPRESSION
LEAF_NODE	1421:45	1421:45	6	,
ARGUMENT	1421:47	1421:47	6	COMPRESSION_NONE
FIELD	1421:47	1421:47	7	COMPRESSION_NONE
LEAF_NODE	1421:47	1421:47	8	COMPRESSION_NONE
LEAF_NODE	1421:63	1421:63	6	)
LEAF_NODE	1421:64	1421:64	4	;
EXPR_STATEMENT	1430:1	1430:36	3	tif -> tif_flags &= ~TIFF_DIRTYDIRECT ;
EXPR	1430:1	1430:1	4	tif -> tif_flags &= ~TIFF_DIRTYDIRECT
ASSIGN	1430:1	1430:19	5	tif -> tif_flags &= ~TIFF_DIRTYDIRECT
LVAL	1430:1	1430:1	6	tif -> tif_flags
FIELD	1430:1	1430:6	7	tif -> tif_flags
LEAF_NODE	1430:1	1430:1	8	tif
LEAF_NODE	1430:4	1430:4	8	->
LEAF_NODE	1430:6	1430:6	8	tif_flags
ASSIGN_OP	1430:16	1430:16	6	&=
LEAF_NODE	1430:16	1430:16	7	&=
RVAL	1430:19	1430:19	6	~TIFF_DIRTYDIRECT
FIELD	1430:19	1430:19	7	~TIFF_DIRTYDIRECT
LEAF_NODE	1430:19	1430:19	8	~TIFF_DIRTYDIRECT
LEAF_NODE	1430:36	1430:36	4	;
EXPR_STATEMENT	1437:1	1437:32	3	tif -> tif_flags &= ~TIFF_ISTILED ;
EXPR	1437:1	1437:1	4	tif -> tif_flags &= ~TIFF_ISTILED
ASSIGN	1437:1	1437:19	5	tif -> tif_flags &= ~TIFF_ISTILED
LVAL	1437:1	1437:1	6	tif -> tif_flags
FIELD	1437:1	1437:6	7	tif -> tif_flags
LEAF_NODE	1437:1	1437:1	8	tif
LEAF_NODE	1437:4	1437:4	8	->
LEAF_NODE	1437:6	1437:6	8	tif_flags
ASSIGN_OP	1437:16	1437:16	6	&=
LEAF_NODE	1437:16	1437:16	7	&=
RVAL	1437:19	1437:19	6	~TIFF_ISTILED
FIELD	1437:19	1437:19	7	~TIFF_ISTILED
LEAF_NODE	1437:19	1437:19	8	~TIFF_ISTILED
LEAF_NODE	1437:32	1437:32	4	;
JUMP_STATEMENT	1439:1	1439:11	3	return ( 1 ) ;
KEYWORD	1439:1	1439:1	4	return
LEAF_NODE	1439:1	1439:1	5	return
DESTINATION	1439:8	1439:8	4	( 1 )
EXPR	1439:8	1439:10	5	( 1 )
LEAF_NODE	1439:8	1439:8	6	(
FIELD	1439:9	1439:9	6	1
LEAF_NODE	1439:9	1439:9	7	1
LEAF_NODE	1439:10	1439:10	6	)
LEAF_NODE	1439:11	1439:11	4	;
LEAF_NODE	1440:0	1440:0	2	}
FUNCTION_DEF	1442:0	1579:0	1	
RETURN_TYPE	1442:0	1442:7	2	static int
LEAF_NODE	1442:0	1442:0	3	static
TYPE_NAME	1442:7	1442:7	3	int
LEAF_NODE	1442:7	1442:7	4	int
FUNCTION_NAME	1443:0	1443:0	2	TIFFAdvanceDirectory
LEAF_NODE	1443:0	1443:0	3	TIFFAdvanceDirectory
PARAMETER_LIST	1443:20	1443:60	2	( TIFF * tif , uint64 * nextdir , uint64 * off )
LEAF_NODE	1443:20	1443:20	3	(
PARAMETER_DECL	1443:21	1443:27	3	TIFF * tif
TYPE	1443:21	1443:25	4	TIFF *
TYPE_NAME	1443:21	1443:21	5	TIFF
LEAF_NODE	1443:21	1443:21	6	TIFF
POINTER	1443:25	1443:25	5	*
LEAF_NODE	1443:25	1443:25	6	*
NAME	1443:27	1443:27	4	tif
LEAF_NODE	1443:27	1443:27	5	tif
LEAF_NODE	1443:30	1443:30	3	,
PARAMETER_DECL	1443:32	1443:40	3	uint64 * nextdir
TYPE	1443:32	1443:38	4	uint64 *
TYPE_NAME	1443:32	1443:32	5	uint64
LEAF_NODE	1443:32	1443:32	6	uint64
POINTER	1443:38	1443:38	5	*
LEAF_NODE	1443:38	1443:38	6	*
NAME	1443:40	1443:40	4	nextdir
LEAF_NODE	1443:40	1443:40	5	nextdir
LEAF_NODE	1443:47	1443:47	3	,
PARAMETER_DECL	1443:49	1443:57	3	uint64 * off
TYPE	1443:49	1443:55	4	uint64 *
TYPE_NAME	1443:49	1443:49	5	uint64
LEAF_NODE	1443:49	1443:49	6	uint64
POINTER	1443:55	1443:55	5	*
LEAF_NODE	1443:55	1443:55	6	*
NAME	1443:57	1443:57	4	off
LEAF_NODE	1443:57	1443:57	5	off
LEAF_NODE	1443:60	1443:60	3	)
LEAF_NODE	1444:0	1444:0	2	{
STATEMENTS	1445:1	1515:1	2	
LEAF_NODE	1445:1	1445:1	3	static
SIMPLE_DECL	1445:8	1445:52	3	const char [ ] module ; module = "TIFFAdvanceDirectory" ;
VAR_DECL	1445:8	1445:19	4	const char [ ] module ; module = "TIFFAdvanceDirectory"
TYPE	1445:8	1445:25	5	const char [ ]
TYPE_NAME	1445:8	1445:14	6	const char
LEAF_NODE	1445:8	1445:8	7	const
LEAF_NODE	1445:14	1445:14	7	char
TYPE_SUFFIX	1445:25	1445:26	6	[ ]
LEAF_NODE	1445:25	1445:25	7	[
LEAF_NODE	1445:26	1445:26	7	]
NAME	1445:19	1445:19	5	module
LEAF_NODE	1445:19	1445:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1445:19	1445:19	5	module = "TIFFAdvanceDirectory"
ASSIGN	1445:19	1445:30	6	module = "TIFFAdvanceDirectory"
LVAL	1445:19	1445:19	7	module
NAME	1445:19	1445:19	8	module
LEAF_NODE	1445:19	1445:19	9	module
ASSIGN_OP	1445:28	1445:28	7	=
LEAF_NODE	1445:28	1445:28	8	=
RVAL	1445:30	1445:30	7	"TIFFAdvanceDirectory"
FIELD	1445:30	1445:30	8	"TIFFAdvanceDirectory"
LEAF_NODE	1445:30	1445:30	9	"TIFFAdvanceDirectory"
LEAF_NODE	1445:52	1445:52	4	;
SELECTION	1446:1	1447:1	3	
KEYWORD	1446:1	1446:1	4	if
LEAF_NODE	1446:1	1446:1	5	if
LEAF_NODE	1446:4	1446:4	4	(
CONDITION	1446:5	1446:5	4	isMapped ( tif )
EXPR	1446:5	1446:5	5	isMapped ( tif )
FUNCTION_CALL	1446:5	1446:17	6	isMapped ( tif )
CALLEE	1446:5	1446:5	7	isMapped
LEAF_NODE	1446:5	1446:5	8	isMapped
LEAF_NODE	1446:13	1446:13	7	(
ARGUMENT	1446:14	1446:14	7	tif
FIELD	1446:14	1446:14	8	tif
LEAF_NODE	1446:14	1446:14	9	tif
LEAF_NODE	1446:17	1446:17	7	)
LEAF_NODE	1446:18	1446:18	4	)
STATEMENTS	1447:1	1514:1	4	
LEAF_NODE	1447:1	1447:1	5	{
STATEMENTS	1448:2	1513:2	5	
SIMPLE_DECL	1448:2	1448:22	6	uint64 poff ; poff = * nextdir ;
VAR_DECL	1448:2	1448:9	7	uint64 poff ; poff = * nextdir
TYPE	1448:2	1448:2	8	uint64
TYPE_NAME	1448:2	1448:2	9	uint64
LEAF_NODE	1448:2	1448:2	10	uint64
NAME	1448:9	1448:9	8	poff
LEAF_NODE	1448:9	1448:9	9	poff
LEAF_NODE	0:0	0:0	8	;
INIT	1448:9	1448:9	8	poff = * nextdir
ASSIGN	1448:9	1448:14	9	poff = * nextdir
LVAL	1448:9	1448:9	10	poff
NAME	1448:9	1448:9	11	poff
LEAF_NODE	1448:9	1448:9	12	poff
ASSIGN_OP	1448:13	1448:13	10	=
LEAF_NODE	1448:13	1448:13	11	=
RVAL	1448:14	1448:14	10	* nextdir
UNARY_EXPR	1448:14	1448:15	11	* nextdir
UNARY_OPERATOR	1448:14	1448:14	12	*
LEAF_NODE	1448:14	1448:14	13	*
FIELD	1448:15	1448:15	12	nextdir
LEAF_NODE	1448:15	1448:15	13	nextdir
LEAF_NODE	1448:22	1448:22	7	;
SELECTION	1449:2	1450:2	6	
KEYWORD	1449:2	1449:2	7	if
LEAF_NODE	1449:2	1449:2	8	if
LEAF_NODE	1449:5	1449:5	7	(
CONDITION	1449:6	1449:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	1449:6	1449:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	1449:6	1449:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	1449:6	1449:6	10	!
LEAF_NODE	1449:6	1449:6	11	!
LEAF_NODE	1449:7	1449:7	10	(
FIELD	1449:8	1449:13	10	tif -> tif_flags
LEAF_NODE	1449:8	1449:8	11	tif
LEAF_NODE	1449:11	1449:11	11	->
LEAF_NODE	1449:13	1449:13	11	tif_flags
LEAF_NODE	1449:22	1449:22	10	&
FIELD	1449:23	1449:23	10	TIFF_BIGTIFF
LEAF_NODE	1449:23	1449:23	11	TIFF_BIGTIFF
LEAF_NODE	1449:35	1449:35	10	)
LEAF_NODE	1449:36	1449:36	7	)
STATEMENTS	1450:2	1478:2	7	
LEAF_NODE	1450:2	1450:2	8	{
STATEMENTS	1451:3	1477:3	8	
SIMPLE_DECL	1451:3	1451:35	9	tmsize_t poffa , tmsize_t poffb , tmsize_t poffc , tmsize_t poffd ;
INIT_DECL_LIST	1451:3	1451:3	10	tmsize_t poffa , tmsize_t poffb , tmsize_t poffc , tmsize_t poffd
VAR_DECL	1451:3	1451:12	11	tmsize_t poffa
TYPE	1451:3	1451:3	12	tmsize_t
TYPE_NAME	1451:3	1451:3	13	tmsize_t
LEAF_NODE	1451:3	1451:3	14	tmsize_t
NAME	1451:12	1451:12	12	poffa
LEAF_NODE	1451:12	1451:12	13	poffa
LEAF_NODE	1451:17	1451:17	11	,
INIT_DECL_LIST	1451:3	1451:3	11	tmsize_t poffb , tmsize_t poffc , tmsize_t poffd
VAR_DECL	1451:3	1451:18	12	tmsize_t poffb
TYPE	1451:3	1451:3	13	tmsize_t
TYPE_NAME	1451:3	1451:3	14	tmsize_t
LEAF_NODE	1451:3	1451:3	15	tmsize_t
NAME	1451:18	1451:18	13	poffb
LEAF_NODE	1451:18	1451:18	14	poffb
LEAF_NODE	1451:23	1451:23	12	,
INIT_DECL_LIST	1451:3	1451:3	12	tmsize_t poffc , tmsize_t poffd
VAR_DECL	1451:3	1451:24	13	tmsize_t poffc
TYPE	1451:3	1451:3	14	tmsize_t
TYPE_NAME	1451:3	1451:3	15	tmsize_t
LEAF_NODE	1451:3	1451:3	16	tmsize_t
NAME	1451:24	1451:24	14	poffc
LEAF_NODE	1451:24	1451:24	15	poffc
LEAF_NODE	1451:29	1451:29	13	,
VAR_DECL	1451:3	1451:30	13	tmsize_t poffd
TYPE	1451:3	1451:3	14	tmsize_t
TYPE_NAME	1451:3	1451:3	15	tmsize_t
LEAF_NODE	1451:3	1451:3	16	tmsize_t
NAME	1451:30	1451:30	14	poffd
LEAF_NODE	1451:30	1451:30	15	poffd
LEAF_NODE	1451:35	1451:35	10	;
SIMPLE_DECL	1452:3	1452:18	9	uint16 dircount ;
VAR_DECL	1452:3	1452:10	10	uint16 dircount
TYPE	1452:3	1452:3	11	uint16
TYPE_NAME	1452:3	1452:3	12	uint16
LEAF_NODE	1452:3	1452:3	13	uint16
NAME	1452:10	1452:10	11	dircount
LEAF_NODE	1452:10	1452:10	12	dircount
LEAF_NODE	1452:18	1452:18	10	;
SIMPLE_DECL	1453:3	1453:19	9	uint32 nextdir32 ;
VAR_DECL	1453:3	1453:10	10	uint32 nextdir32
TYPE	1453:3	1453:3	11	uint32
TYPE_NAME	1453:3	1453:3	12	uint32
LEAF_NODE	1453:3	1453:3	13	uint32
NAME	1453:10	1453:10	11	nextdir32
LEAF_NODE	1453:10	1453:10	12	nextdir32
LEAF_NODE	1453:19	1453:19	10	;
EXPR_STATEMENT	1454:3	1454:23	9	poffa = ( tmsize_t ) poff ;
EXPR	1454:3	1454:3	10	poffa = ( tmsize_t ) poff
ASSIGN	1454:3	1454:9	11	poffa = ( tmsize_t ) poff
LVAL	1454:3	1454:3	12	poffa
FIELD	1454:3	1454:3	13	poffa
LEAF_NODE	1454:3	1454:3	14	poffa
ASSIGN_OP	1454:8	1454:8	12	=
LEAF_NODE	1454:8	1454:8	13	=
RVAL	1454:9	1454:19	12	( tmsize_t ) poff
LEAF_NODE	1454:9	1454:9	13	(
TYPE_NAME	1454:10	1454:10	13	tmsize_t
LEAF_NODE	1454:10	1454:10	14	tmsize_t
LEAF_NODE	1454:18	1454:18	13	)
FIELD	1454:19	1454:19	13	poff
LEAF_NODE	1454:19	1454:19	14	poff
LEAF_NODE	1454:23	1454:23	10	;
EXPR_STATEMENT	1455:3	1455:29	9	poffb = poffa + sizeof ( uint16 ) ;
EXPR	1455:3	1455:3	10	poffb = poffa + sizeof ( uint16 )
ASSIGN	1455:3	1455:9	11	poffb = poffa + sizeof ( uint16 )
LVAL	1455:3	1455:3	12	poffb
FIELD	1455:3	1455:3	13	poffb
LEAF_NODE	1455:3	1455:3	14	poffb
ASSIGN_OP	1455:8	1455:8	12	=
LEAF_NODE	1455:8	1455:8	13	=
RVAL	1455:9	1455:15	12	poffa + sizeof ( uint16 )
FIELD	1455:9	1455:9	13	poffa
LEAF_NODE	1455:9	1455:9	14	poffa
LEAF_NODE	1455:14	1455:14	13	+
FUNCTION_CALL	1455:15	1455:28	13	sizeof ( uint16 )
CALLEE	1455:15	1455:15	14	sizeof
LEAF_NODE	1455:15	1455:15	15	sizeof
LEAF_NODE	1455:21	1455:21	14	(
ARGUMENT	1455:22	1455:22	14	uint16
FIELD	1455:22	1455:22	15	uint16
LEAF_NODE	1455:22	1455:22	16	uint16
LEAF_NODE	1455:28	1455:28	14	)
LEAF_NODE	1455:29	1455:29	10	;
SELECTION	1456:3	1457:3	9	
KEYWORD	1456:3	1456:3	10	if
LEAF_NODE	1456:3	1456:3	11	if
LEAF_NODE	1456:6	1456:6	10	(
CONDITION	1456:7	1456:7	10	( ( uint64 ) poffa != poff ) || ( poffb < poffa ) || ( poffb < ( tmsize_t ) sizeof ( uint16 ) ) || ( poffb > tif -> tif_size )
EXPR	1456:7	1456:7	11	( ( uint64 ) poffa != poff ) || ( poffb < poffa ) || ( poffb < ( tmsize_t ) sizeof ( uint16 ) ) || ( poffb > tif -> tif_size )
OR	1456:7	1456:30	12	( ( uint64 ) poffa != poff ) || ( poffb < poffa ) || ( poffb < ( tmsize_t ) sizeof ( uint16 ) ) || ( poffb > tif -> tif_size )
EXPR	1456:7	1456:27	13	( ( uint64 ) poffa != poff )
LEAF_NODE	1456:7	1456:7	14	(
LEAF_NODE	1456:8	1456:8	14	(
TYPE_NAME	1456:9	1456:9	14	uint64
LEAF_NODE	1456:9	1456:9	15	uint64
LEAF_NODE	1456:15	1456:15	14	)
FIELD	1456:16	1456:16	14	poffa
LEAF_NODE	1456:16	1456:16	15	poffa
EQ_OPERATOR	1456:21	1456:21	14	!=
LEAF_NODE	1456:21	1456:21	15	!=
FIELD	1456:23	1456:23	14	poff
LEAF_NODE	1456:23	1456:23	15	poff
LEAF_NODE	1456:27	1456:27	14	)
LEAF_NODE	1456:28	1456:28	13	||
EXPR	1456:30	1456:30	13	( poffb < poffa ) || ( poffb < ( tmsize_t ) sizeof ( uint16 ) ) || ( poffb > tif -> tif_size )
OR	1456:30	1456:45	14	( poffb < poffa ) || ( poffb < ( tmsize_t ) sizeof ( uint16 ) ) || ( poffb > tif -> tif_size )
EXPR	1456:30	1456:42	15	( poffb < poffa )
LEAF_NODE	1456:30	1456:30	16	(
FIELD	1456:31	1456:31	16	poffb
LEAF_NODE	1456:31	1456:31	17	poffb
REL_OPERATOR	1456:36	1456:36	16	<
LEAF_NODE	1456:36	1456:36	17	<
FIELD	1456:37	1456:37	16	poffa
LEAF_NODE	1456:37	1456:37	17	poffa
LEAF_NODE	1456:42	1456:42	16	)
LEAF_NODE	1456:43	1456:43	15	||
EXPR	1456:45	1456:45	15	( poffb < ( tmsize_t ) sizeof ( uint16 ) ) || ( poffb > tif -> tif_size )
OR	1456:45	1456:79	16	( poffb < ( tmsize_t ) sizeof ( uint16 ) ) || ( poffb > tif -> tif_size )
EXPR	1456:45	1456:76	17	( poffb < ( tmsize_t ) sizeof ( uint16 ) )
LEAF_NODE	1456:45	1456:45	18	(
FIELD	1456:46	1456:46	18	poffb
LEAF_NODE	1456:46	1456:46	19	poffb
REL_OPERATOR	1456:51	1456:51	18	<
LEAF_NODE	1456:51	1456:51	19	<
LEAF_NODE	1456:52	1456:52	18	(
TYPE_NAME	1456:53	1456:53	18	tmsize_t
LEAF_NODE	1456:53	1456:53	19	tmsize_t
LEAF_NODE	1456:61	1456:61	18	)
FUNCTION_CALL	1456:62	1456:75	18	sizeof ( uint16 )
CALLEE	1456:62	1456:62	19	sizeof
LEAF_NODE	1456:62	1456:62	20	sizeof
LEAF_NODE	1456:68	1456:68	19	(
ARGUMENT	1456:69	1456:69	19	uint16
FIELD	1456:69	1456:69	20	uint16
LEAF_NODE	1456:69	1456:69	21	uint16
LEAF_NODE	1456:75	1456:75	19	)
LEAF_NODE	1456:76	1456:76	18	)
LEAF_NODE	1456:77	1456:77	17	||
EXPR	1456:79	1456:99	17	( poffb > tif -> tif_size )
LEAF_NODE	1456:79	1456:79	18	(
FIELD	1456:80	1456:80	18	poffb
LEAF_NODE	1456:80	1456:80	19	poffb
REL_OPERATOR	1456:85	1456:85	18	>
LEAF_NODE	1456:85	1456:85	19	>
FIELD	1456:86	1456:91	18	tif -> tif_size
LEAF_NODE	1456:86	1456:86	19	tif
LEAF_NODE	1456:89	1456:89	19	->
LEAF_NODE	1456:91	1456:91	19	tif_size
LEAF_NODE	1456:99	1456:99	18	)
LEAF_NODE	1456:100	1456:100	10	)
STATEMENTS	1457:3	1461:3	10	
LEAF_NODE	1457:3	1457:3	11	{
STATEMENTS	1458:4	1460:4	11	
EXPR_STATEMENT	1458:4	1458:77	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" ) ;
EXPR	1458:4	1458:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
FUNCTION_CALL	1458:4	1458:76	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
CALLEE	1458:4	1458:4	15	TIFFErrorExt
LEAF_NODE	1458:4	1458:4	16	TIFFErrorExt
LEAF_NODE	1458:16	1458:16	15	(
ARGUMENT	1458:17	1458:17	15	tif -> tif_clientdata
FIELD	1458:17	1458:22	16	tif -> tif_clientdata
LEAF_NODE	1458:17	1458:17	17	tif
LEAF_NODE	1458:20	1458:20	17	->
LEAF_NODE	1458:22	1458:22	17	tif_clientdata
LEAF_NODE	1458:36	1458:36	15	,
ARGUMENT	1458:37	1458:37	15	module
FIELD	1458:37	1458:37	16	module
LEAF_NODE	1458:37	1458:37	17	module
LEAF_NODE	1458:43	1458:43	15	,
ARGUMENT	1458:44	1458:44	15	"Error fetching directory count"
FIELD	1458:44	1458:44	16	"Error fetching directory count"
LEAF_NODE	1458:44	1458:44	17	"Error fetching directory count"
LEAF_NODE	1458:76	1458:76	15	)
LEAF_NODE	1458:77	1458:77	13	;
EXPR_STATEMENT	1459:34	1459:44	12	* nextdir = 0 ;
EXPR	1459:34	1459:34	13	* nextdir = 0
ASSIGN	1459:34	1459:43	14	* nextdir = 0
LVAL	1459:34	1459:34	15	* nextdir
UNARY_EXPR	1459:34	1459:35	16	* nextdir
UNARY_OPERATOR	1459:34	1459:34	17	*
LEAF_NODE	1459:34	1459:34	18	*
FIELD	1459:35	1459:35	17	nextdir
LEAF_NODE	1459:35	1459:35	18	nextdir
ASSIGN_OP	1459:42	1459:42	15	=
LEAF_NODE	1459:42	1459:42	16	=
RVAL	1459:43	1459:43	15	0
FIELD	1459:43	1459:43	16	0
LEAF_NODE	1459:43	1459:43	17	0
LEAF_NODE	1459:44	1459:44	13	;
JUMP_STATEMENT	1460:4	1460:13	12	return ( 0 ) ;
KEYWORD	1460:4	1460:4	13	return
LEAF_NODE	1460:4	1460:4	14	return
DESTINATION	1460:10	1460:10	13	( 0 )
EXPR	1460:10	1460:12	14	( 0 )
LEAF_NODE	1460:10	1460:10	15	(
FIELD	1460:11	1460:11	15	0
LEAF_NODE	1460:11	1460:11	16	0
LEAF_NODE	1460:12	1460:12	15	)
LEAF_NODE	1460:13	1460:13	13	;
LEAF_NODE	1461:3	1461:3	11	}
EXPR_STATEMENT	1462:3	1462:60	9	_TIFFmemcpy ( & dircount , tif -> tif_base + poffa , sizeof ( uint16 ) ) ;
EXPR	1462:3	1462:3	10	_TIFFmemcpy ( & dircount , tif -> tif_base + poffa , sizeof ( uint16 ) )
FUNCTION_CALL	1462:3	1462:59	11	_TIFFmemcpy ( & dircount , tif -> tif_base + poffa , sizeof ( uint16 ) )
CALLEE	1462:3	1462:3	12	_TIFFmemcpy
LEAF_NODE	1462:3	1462:3	13	_TIFFmemcpy
LEAF_NODE	1462:14	1462:14	12	(
ARGUMENT	1462:15	1462:15	12	& dircount
UNARY_EXPR	1462:15	1462:16	13	& dircount
UNARY_OPERATOR	1462:15	1462:15	14	&
LEAF_NODE	1462:15	1462:15	15	&
FIELD	1462:16	1462:16	14	dircount
LEAF_NODE	1462:16	1462:16	15	dircount
LEAF_NODE	1462:24	1462:24	12	,
ARGUMENT	1462:25	1462:39	12	tif -> tif_base + poffa
FIELD	1462:25	1462:30	13	tif -> tif_base
LEAF_NODE	1462:25	1462:25	14	tif
LEAF_NODE	1462:28	1462:28	14	->
LEAF_NODE	1462:30	1462:30	14	tif_base
LEAF_NODE	1462:38	1462:38	13	+
FIELD	1462:39	1462:39	13	poffa
LEAF_NODE	1462:39	1462:39	14	poffa
LEAF_NODE	1462:44	1462:44	12	,
ARGUMENT	1462:45	1462:45	12	sizeof ( uint16 )
FUNCTION_CALL	1462:45	1462:58	13	sizeof ( uint16 )
CALLEE	1462:45	1462:45	14	sizeof
LEAF_NODE	1462:45	1462:45	15	sizeof
LEAF_NODE	1462:51	1462:51	14	(
ARGUMENT	1462:52	1462:52	14	uint16
FIELD	1462:52	1462:52	15	uint16
LEAF_NODE	1462:52	1462:52	16	uint16
LEAF_NODE	1462:58	1462:58	14	)
LEAF_NODE	1462:59	1462:59	12	)
LEAF_NODE	1462:60	1462:60	10	;
SELECTION	1463:3	1464:4	9	
KEYWORD	1463:3	1463:3	10	if
LEAF_NODE	1463:3	1463:3	11	if
LEAF_NODE	1463:6	1463:6	10	(
CONDITION	1463:7	1463:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	1463:7	1463:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	1463:7	1463:12	12	tif -> tif_flags
LEAF_NODE	1463:7	1463:7	13	tif
LEAF_NODE	1463:10	1463:10	13	->
LEAF_NODE	1463:12	1463:12	13	tif_flags
LEAF_NODE	1463:21	1463:21	12	&
FIELD	1463:22	1463:22	12	TIFF_SWAB
LEAF_NODE	1463:22	1463:22	13	TIFF_SWAB
LEAF_NODE	1463:31	1463:31	10	)
STATEMENTS	1464:4	1464:4	10	
EXPR_STATEMENT	1464:4	1464:28	11	TIFFSwabShort ( & dircount ) ;
EXPR	1464:4	1464:4	12	TIFFSwabShort ( & dircount )
FUNCTION_CALL	1464:4	1464:27	13	TIFFSwabShort ( & dircount )
CALLEE	1464:4	1464:4	14	TIFFSwabShort
LEAF_NODE	1464:4	1464:4	15	TIFFSwabShort
LEAF_NODE	1464:17	1464:17	14	(
ARGUMENT	1464:18	1464:18	14	& dircount
UNARY_EXPR	1464:18	1464:19	15	& dircount
UNARY_OPERATOR	1464:18	1464:18	16	&
LEAF_NODE	1464:18	1464:18	17	&
FIELD	1464:19	1464:19	16	dircount
LEAF_NODE	1464:19	1464:19	17	dircount
LEAF_NODE	1464:27	1464:27	14	)
LEAF_NODE	1464:28	1464:28	12	;
EXPR_STATEMENT	1465:3	1465:26	9	poffc = poffb + dircount * 12 ;
EXPR	1465:3	1465:3	10	poffc = poffb + dircount * 12
ASSIGN	1465:3	1465:9	11	poffc = poffb + dircount * 12
LVAL	1465:3	1465:3	12	poffc
FIELD	1465:3	1465:3	13	poffc
LEAF_NODE	1465:3	1465:3	14	poffc
ASSIGN_OP	1465:8	1465:8	12	=
LEAF_NODE	1465:8	1465:8	13	=
RVAL	1465:9	1465:24	12	poffb + dircount * 12
FIELD	1465:9	1465:9	13	poffb
LEAF_NODE	1465:9	1465:9	14	poffb
LEAF_NODE	1465:14	1465:14	13	+
FIELD	1465:15	1465:15	13	dircount
LEAF_NODE	1465:15	1465:15	14	dircount
LEAF_NODE	1465:23	1465:23	13	*
FIELD	1465:24	1465:24	13	12
LEAF_NODE	1465:24	1465:24	14	12
LEAF_NODE	1465:26	1465:26	10	;
EXPR_STATEMENT	1466:3	1466:29	9	poffd = poffc + sizeof ( uint32 ) ;
EXPR	1466:3	1466:3	10	poffd = poffc + sizeof ( uint32 )
ASSIGN	1466:3	1466:9	11	poffd = poffc + sizeof ( uint32 )
LVAL	1466:3	1466:3	12	poffd
FIELD	1466:3	1466:3	13	poffd
LEAF_NODE	1466:3	1466:3	14	poffd
ASSIGN_OP	1466:8	1466:8	12	=
LEAF_NODE	1466:8	1466:8	13	=
RVAL	1466:9	1466:15	12	poffc + sizeof ( uint32 )
FIELD	1466:9	1466:9	13	poffc
LEAF_NODE	1466:9	1466:9	14	poffc
LEAF_NODE	1466:14	1466:14	13	+
FUNCTION_CALL	1466:15	1466:28	13	sizeof ( uint32 )
CALLEE	1466:15	1466:15	14	sizeof
LEAF_NODE	1466:15	1466:15	15	sizeof
LEAF_NODE	1466:21	1466:21	14	(
ARGUMENT	1466:22	1466:22	14	uint32
FIELD	1466:22	1466:22	15	uint32
LEAF_NODE	1466:22	1466:22	16	uint32
LEAF_NODE	1466:28	1466:28	14	)
LEAF_NODE	1466:29	1466:29	10	;
SELECTION	1467:3	1468:3	9	
KEYWORD	1467:3	1467:3	10	if
LEAF_NODE	1467:3	1467:3	11	if
LEAF_NODE	1467:6	1467:6	10	(
CONDITION	1467:7	1467:7	10	( poffc < poffb ) || ( poffc < dircount * 12 ) || ( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint32 ) ) || ( poffd > tif -> tif_size )
EXPR	1467:7	1467:7	11	( poffc < poffb ) || ( poffc < dircount * 12 ) || ( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint32 ) ) || ( poffd > tif -> tif_size )
OR	1467:7	1467:22	12	( poffc < poffb ) || ( poffc < dircount * 12 ) || ( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint32 ) ) || ( poffd > tif -> tif_size )
EXPR	1467:7	1467:19	13	( poffc < poffb )
LEAF_NODE	1467:7	1467:7	14	(
FIELD	1467:8	1467:8	14	poffc
LEAF_NODE	1467:8	1467:8	15	poffc
REL_OPERATOR	1467:13	1467:13	14	<
LEAF_NODE	1467:13	1467:13	15	<
FIELD	1467:14	1467:14	14	poffb
LEAF_NODE	1467:14	1467:14	15	poffb
LEAF_NODE	1467:19	1467:19	14	)
LEAF_NODE	1467:20	1467:20	13	||
EXPR	1467:22	1467:22	13	( poffc < dircount * 12 ) || ( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint32 ) ) || ( poffd > tif -> tif_size )
OR	1467:22	1467:43	14	( poffc < dircount * 12 ) || ( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint32 ) ) || ( poffd > tif -> tif_size )
EXPR	1467:22	1467:40	15	( poffc < dircount * 12 )
LEAF_NODE	1467:22	1467:22	16	(
FIELD	1467:23	1467:23	16	poffc
LEAF_NODE	1467:23	1467:23	17	poffc
REL_OPERATOR	1467:28	1467:28	16	<
LEAF_NODE	1467:28	1467:28	17	<
FIELD	1467:29	1467:29	16	dircount
LEAF_NODE	1467:29	1467:29	17	dircount
LEAF_NODE	1467:37	1467:37	16	*
FIELD	1467:38	1467:38	16	12
LEAF_NODE	1467:38	1467:38	17	12
LEAF_NODE	1467:40	1467:40	16	)
LEAF_NODE	1467:41	1467:41	15	||
EXPR	1467:43	1467:43	15	( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint32 ) ) || ( poffd > tif -> tif_size )
OR	1467:43	1467:58	16	( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint32 ) ) || ( poffd > tif -> tif_size )
EXPR	1467:43	1467:55	17	( poffd < poffc )
LEAF_NODE	1467:43	1467:43	18	(
FIELD	1467:44	1467:44	18	poffd
LEAF_NODE	1467:44	1467:44	19	poffd
REL_OPERATOR	1467:49	1467:49	18	<
LEAF_NODE	1467:49	1467:49	19	<
FIELD	1467:50	1467:50	18	poffc
LEAF_NODE	1467:50	1467:50	19	poffc
LEAF_NODE	1467:55	1467:55	18	)
LEAF_NODE	1467:56	1467:56	17	||
EXPR	1467:58	1467:58	17	( poffd < ( tmsize_t ) sizeof ( uint32 ) ) || ( poffd > tif -> tif_size )
OR	1467:58	1467:92	18	( poffd < ( tmsize_t ) sizeof ( uint32 ) ) || ( poffd > tif -> tif_size )
EXPR	1467:58	1467:89	19	( poffd < ( tmsize_t ) sizeof ( uint32 ) )
LEAF_NODE	1467:58	1467:58	20	(
FIELD	1467:59	1467:59	20	poffd
LEAF_NODE	1467:59	1467:59	21	poffd
REL_OPERATOR	1467:64	1467:64	20	<
LEAF_NODE	1467:64	1467:64	21	<
LEAF_NODE	1467:65	1467:65	20	(
TYPE_NAME	1467:66	1467:66	20	tmsize_t
LEAF_NODE	1467:66	1467:66	21	tmsize_t
LEAF_NODE	1467:74	1467:74	20	)
FUNCTION_CALL	1467:75	1467:88	20	sizeof ( uint32 )
CALLEE	1467:75	1467:75	21	sizeof
LEAF_NODE	1467:75	1467:75	22	sizeof
LEAF_NODE	1467:81	1467:81	21	(
ARGUMENT	1467:82	1467:82	21	uint32
FIELD	1467:82	1467:82	22	uint32
LEAF_NODE	1467:82	1467:82	23	uint32
LEAF_NODE	1467:88	1467:88	21	)
LEAF_NODE	1467:89	1467:89	20	)
LEAF_NODE	1467:90	1467:90	19	||
EXPR	1467:92	1467:112	19	( poffd > tif -> tif_size )
LEAF_NODE	1467:92	1467:92	20	(
FIELD	1467:93	1467:93	20	poffd
LEAF_NODE	1467:93	1467:93	21	poffd
REL_OPERATOR	1467:98	1467:98	20	>
LEAF_NODE	1467:98	1467:98	21	>
FIELD	1467:99	1467:104	20	tif -> tif_size
LEAF_NODE	1467:99	1467:99	21	tif
LEAF_NODE	1467:102	1467:102	21	->
LEAF_NODE	1467:104	1467:104	21	tif_size
LEAF_NODE	1467:112	1467:112	20	)
LEAF_NODE	1467:113	1467:113	10	)
STATEMENTS	1468:3	1471:3	10	
LEAF_NODE	1468:3	1468:3	11	{
STATEMENTS	1469:4	1470:4	11	
EXPR_STATEMENT	1469:4	1469:76	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" ) ;
EXPR	1469:4	1469:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
FUNCTION_CALL	1469:4	1469:75	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
CALLEE	1469:4	1469:4	15	TIFFErrorExt
LEAF_NODE	1469:4	1469:4	16	TIFFErrorExt
LEAF_NODE	1469:16	1469:16	15	(
ARGUMENT	1469:17	1469:17	15	tif -> tif_clientdata
FIELD	1469:17	1469:22	16	tif -> tif_clientdata
LEAF_NODE	1469:17	1469:17	17	tif
LEAF_NODE	1469:20	1469:20	17	->
LEAF_NODE	1469:22	1469:22	17	tif_clientdata
LEAF_NODE	1469:36	1469:36	15	,
ARGUMENT	1469:37	1469:37	15	module
FIELD	1469:37	1469:37	16	module
LEAF_NODE	1469:37	1469:37	17	module
LEAF_NODE	1469:43	1469:43	15	,
ARGUMENT	1469:44	1469:44	15	"Error fetching directory link"
FIELD	1469:44	1469:44	16	"Error fetching directory link"
LEAF_NODE	1469:44	1469:44	17	"Error fetching directory link"
LEAF_NODE	1469:75	1469:75	15	)
LEAF_NODE	1469:76	1469:76	13	;
JUMP_STATEMENT	1470:4	1470:13	12	return ( 0 ) ;
KEYWORD	1470:4	1470:4	13	return
LEAF_NODE	1470:4	1470:4	14	return
DESTINATION	1470:10	1470:10	13	( 0 )
EXPR	1470:10	1470:12	14	( 0 )
LEAF_NODE	1470:10	1470:10	15	(
FIELD	1470:11	1470:11	15	0
LEAF_NODE	1470:11	1470:11	16	0
LEAF_NODE	1470:12	1470:12	15	)
LEAF_NODE	1470:13	1470:13	13	;
LEAF_NODE	1471:3	1471:3	11	}
SELECTION	1472:3	1473:4	9	
KEYWORD	1472:3	1472:3	10	if
LEAF_NODE	1472:3	1472:3	11	if
LEAF_NODE	1472:6	1472:6	10	(
CONDITION	1472:7	1472:7	10	off != NULL
EXPR	1472:7	1472:12	11	off != NULL
FIELD	1472:7	1472:7	12	off
LEAF_NODE	1472:7	1472:7	13	off
EQ_OPERATOR	1472:10	1472:10	12	!=
LEAF_NODE	1472:10	1472:10	13	!=
FIELD	1472:12	1472:12	12	NULL
LEAF_NODE	1472:12	1472:12	13	NULL
LEAF_NODE	1472:16	1472:16	10	)
STATEMENTS	1473:4	1473:4	10	
EXPR_STATEMENT	1473:4	1473:22	11	* off = ( uint64 ) poffc ;
EXPR	1473:4	1473:4	12	* off = ( uint64 ) poffc
ASSIGN	1473:4	1473:9	13	* off = ( uint64 ) poffc
LVAL	1473:4	1473:4	14	* off
UNARY_EXPR	1473:4	1473:5	15	* off
UNARY_OPERATOR	1473:4	1473:4	16	*
LEAF_NODE	1473:4	1473:4	17	*
FIELD	1473:5	1473:5	16	off
LEAF_NODE	1473:5	1473:5	17	off
ASSIGN_OP	1473:8	1473:8	14	=
LEAF_NODE	1473:8	1473:8	15	=
RVAL	1473:9	1473:17	14	( uint64 ) poffc
LEAF_NODE	1473:9	1473:9	15	(
TYPE_NAME	1473:10	1473:10	15	uint64
LEAF_NODE	1473:10	1473:10	16	uint64
LEAF_NODE	1473:16	1473:16	15	)
FIELD	1473:17	1473:17	15	poffc
LEAF_NODE	1473:17	1473:17	16	poffc
LEAF_NODE	1473:22	1473:22	12	;
EXPR_STATEMENT	1474:3	1474:61	9	_TIFFmemcpy ( & nextdir32 , tif -> tif_base + poffc , sizeof ( uint32 ) ) ;
EXPR	1474:3	1474:3	10	_TIFFmemcpy ( & nextdir32 , tif -> tif_base + poffc , sizeof ( uint32 ) )
FUNCTION_CALL	1474:3	1474:60	11	_TIFFmemcpy ( & nextdir32 , tif -> tif_base + poffc , sizeof ( uint32 ) )
CALLEE	1474:3	1474:3	12	_TIFFmemcpy
LEAF_NODE	1474:3	1474:3	13	_TIFFmemcpy
LEAF_NODE	1474:14	1474:14	12	(
ARGUMENT	1474:15	1474:15	12	& nextdir32
UNARY_EXPR	1474:15	1474:16	13	& nextdir32
UNARY_OPERATOR	1474:15	1474:15	14	&
LEAF_NODE	1474:15	1474:15	15	&
FIELD	1474:16	1474:16	14	nextdir32
LEAF_NODE	1474:16	1474:16	15	nextdir32
LEAF_NODE	1474:25	1474:25	12	,
ARGUMENT	1474:26	1474:40	12	tif -> tif_base + poffc
FIELD	1474:26	1474:31	13	tif -> tif_base
LEAF_NODE	1474:26	1474:26	14	tif
LEAF_NODE	1474:29	1474:29	14	->
LEAF_NODE	1474:31	1474:31	14	tif_base
LEAF_NODE	1474:39	1474:39	13	+
FIELD	1474:40	1474:40	13	poffc
LEAF_NODE	1474:40	1474:40	14	poffc
LEAF_NODE	1474:45	1474:45	12	,
ARGUMENT	1474:46	1474:46	12	sizeof ( uint32 )
FUNCTION_CALL	1474:46	1474:59	13	sizeof ( uint32 )
CALLEE	1474:46	1474:46	14	sizeof
LEAF_NODE	1474:46	1474:46	15	sizeof
LEAF_NODE	1474:52	1474:52	14	(
ARGUMENT	1474:53	1474:53	14	uint32
FIELD	1474:53	1474:53	15	uint32
LEAF_NODE	1474:53	1474:53	16	uint32
LEAF_NODE	1474:59	1474:59	14	)
LEAF_NODE	1474:60	1474:60	12	)
LEAF_NODE	1474:61	1474:61	10	;
SELECTION	1475:3	1476:4	9	
KEYWORD	1475:3	1475:3	10	if
LEAF_NODE	1475:3	1475:3	11	if
LEAF_NODE	1475:6	1475:6	10	(
CONDITION	1475:7	1475:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	1475:7	1475:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	1475:7	1475:12	12	tif -> tif_flags
LEAF_NODE	1475:7	1475:7	13	tif
LEAF_NODE	1475:10	1475:10	13	->
LEAF_NODE	1475:12	1475:12	13	tif_flags
LEAF_NODE	1475:21	1475:21	12	&
FIELD	1475:22	1475:22	12	TIFF_SWAB
LEAF_NODE	1475:22	1475:22	13	TIFF_SWAB
LEAF_NODE	1475:31	1475:31	10	)
STATEMENTS	1476:4	1476:4	10	
EXPR_STATEMENT	1476:4	1476:28	11	TIFFSwabLong ( & nextdir32 ) ;
EXPR	1476:4	1476:4	12	TIFFSwabLong ( & nextdir32 )
FUNCTION_CALL	1476:4	1476:27	13	TIFFSwabLong ( & nextdir32 )
CALLEE	1476:4	1476:4	14	TIFFSwabLong
LEAF_NODE	1476:4	1476:4	15	TIFFSwabLong
LEAF_NODE	1476:16	1476:16	14	(
ARGUMENT	1476:17	1476:17	14	& nextdir32
UNARY_EXPR	1476:17	1476:18	15	& nextdir32
UNARY_OPERATOR	1476:17	1476:17	16	&
LEAF_NODE	1476:17	1476:17	17	&
FIELD	1476:18	1476:18	16	nextdir32
LEAF_NODE	1476:18	1476:18	17	nextdir32
LEAF_NODE	1476:27	1476:27	14	)
LEAF_NODE	1476:28	1476:28	12	;
EXPR_STATEMENT	1477:3	1477:21	9	* nextdir = nextdir32 ;
EXPR	1477:3	1477:3	10	* nextdir = nextdir32
ASSIGN	1477:3	1477:12	11	* nextdir = nextdir32
LVAL	1477:3	1477:3	12	* nextdir
UNARY_EXPR	1477:3	1477:4	13	* nextdir
UNARY_OPERATOR	1477:3	1477:3	14	*
LEAF_NODE	1477:3	1477:3	15	*
FIELD	1477:4	1477:4	14	nextdir
LEAF_NODE	1477:4	1477:4	15	nextdir
ASSIGN_OP	1477:11	1477:11	12	=
LEAF_NODE	1477:11	1477:11	13	=
RVAL	1477:12	1477:12	12	nextdir32
FIELD	1477:12	1477:12	13	nextdir32
LEAF_NODE	1477:12	1477:12	14	nextdir32
LEAF_NODE	1477:21	1477:21	10	;
LEAF_NODE	1478:2	1478:2	8	}
SELECTION	1479:2	1480:2	6	
KEYWORD	1479:2	1479:2	7	else
LEAF_NODE	1479:2	1479:2	8	else
STATEMENTS	1480:2	1512:2	7	
LEAF_NODE	1480:2	1480:2	8	{
STATEMENTS	1481:3	1510:3	8	
SIMPLE_DECL	1481:3	1481:35	9	tmsize_t poffa , tmsize_t poffb , tmsize_t poffc , tmsize_t poffd ;
INIT_DECL_LIST	1481:3	1481:3	10	tmsize_t poffa , tmsize_t poffb , tmsize_t poffc , tmsize_t poffd
VAR_DECL	1481:3	1481:12	11	tmsize_t poffa
TYPE	1481:3	1481:3	12	tmsize_t
TYPE_NAME	1481:3	1481:3	13	tmsize_t
LEAF_NODE	1481:3	1481:3	14	tmsize_t
NAME	1481:12	1481:12	12	poffa
LEAF_NODE	1481:12	1481:12	13	poffa
LEAF_NODE	1481:17	1481:17	11	,
INIT_DECL_LIST	1481:3	1481:3	11	tmsize_t poffb , tmsize_t poffc , tmsize_t poffd
VAR_DECL	1481:3	1481:18	12	tmsize_t poffb
TYPE	1481:3	1481:3	13	tmsize_t
TYPE_NAME	1481:3	1481:3	14	tmsize_t
LEAF_NODE	1481:3	1481:3	15	tmsize_t
NAME	1481:18	1481:18	13	poffb
LEAF_NODE	1481:18	1481:18	14	poffb
LEAF_NODE	1481:23	1481:23	12	,
INIT_DECL_LIST	1481:3	1481:3	12	tmsize_t poffc , tmsize_t poffd
VAR_DECL	1481:3	1481:24	13	tmsize_t poffc
TYPE	1481:3	1481:3	14	tmsize_t
TYPE_NAME	1481:3	1481:3	15	tmsize_t
LEAF_NODE	1481:3	1481:3	16	tmsize_t
NAME	1481:24	1481:24	14	poffc
LEAF_NODE	1481:24	1481:24	15	poffc
LEAF_NODE	1481:29	1481:29	13	,
VAR_DECL	1481:3	1481:30	13	tmsize_t poffd
TYPE	1481:3	1481:3	14	tmsize_t
TYPE_NAME	1481:3	1481:3	15	tmsize_t
LEAF_NODE	1481:3	1481:3	16	tmsize_t
NAME	1481:30	1481:30	14	poffd
LEAF_NODE	1481:30	1481:30	15	poffd
LEAF_NODE	1481:35	1481:35	10	;
SIMPLE_DECL	1482:3	1482:20	9	uint64 dircount64 ;
VAR_DECL	1482:3	1482:10	10	uint64 dircount64
TYPE	1482:3	1482:3	11	uint64
TYPE_NAME	1482:3	1482:3	12	uint64
LEAF_NODE	1482:3	1482:3	13	uint64
NAME	1482:10	1482:10	11	dircount64
LEAF_NODE	1482:10	1482:10	12	dircount64
LEAF_NODE	1482:20	1482:20	10	;
SIMPLE_DECL	1483:3	1483:20	9	uint16 dircount16 ;
VAR_DECL	1483:3	1483:10	10	uint16 dircount16
TYPE	1483:3	1483:3	11	uint16
TYPE_NAME	1483:3	1483:3	12	uint16
LEAF_NODE	1483:3	1483:3	13	uint16
NAME	1483:10	1483:10	11	dircount16
LEAF_NODE	1483:10	1483:10	12	dircount16
LEAF_NODE	1483:20	1483:20	10	;
EXPR_STATEMENT	1484:3	1484:23	9	poffa = ( tmsize_t ) poff ;
EXPR	1484:3	1484:3	10	poffa = ( tmsize_t ) poff
ASSIGN	1484:3	1484:9	11	poffa = ( tmsize_t ) poff
LVAL	1484:3	1484:3	12	poffa
FIELD	1484:3	1484:3	13	poffa
LEAF_NODE	1484:3	1484:3	14	poffa
ASSIGN_OP	1484:8	1484:8	12	=
LEAF_NODE	1484:8	1484:8	13	=
RVAL	1484:9	1484:19	12	( tmsize_t ) poff
LEAF_NODE	1484:9	1484:9	13	(
TYPE_NAME	1484:10	1484:10	13	tmsize_t
LEAF_NODE	1484:10	1484:10	14	tmsize_t
LEAF_NODE	1484:18	1484:18	13	)
FIELD	1484:19	1484:19	13	poff
LEAF_NODE	1484:19	1484:19	14	poff
LEAF_NODE	1484:23	1484:23	10	;
EXPR_STATEMENT	1485:3	1485:29	9	poffb = poffa + sizeof ( uint64 ) ;
EXPR	1485:3	1485:3	10	poffb = poffa + sizeof ( uint64 )
ASSIGN	1485:3	1485:9	11	poffb = poffa + sizeof ( uint64 )
LVAL	1485:3	1485:3	12	poffb
FIELD	1485:3	1485:3	13	poffb
LEAF_NODE	1485:3	1485:3	14	poffb
ASSIGN_OP	1485:8	1485:8	12	=
LEAF_NODE	1485:8	1485:8	13	=
RVAL	1485:9	1485:15	12	poffa + sizeof ( uint64 )
FIELD	1485:9	1485:9	13	poffa
LEAF_NODE	1485:9	1485:9	14	poffa
LEAF_NODE	1485:14	1485:14	13	+
FUNCTION_CALL	1485:15	1485:28	13	sizeof ( uint64 )
CALLEE	1485:15	1485:15	14	sizeof
LEAF_NODE	1485:15	1485:15	15	sizeof
LEAF_NODE	1485:21	1485:21	14	(
ARGUMENT	1485:22	1485:22	14	uint64
FIELD	1485:22	1485:22	15	uint64
LEAF_NODE	1485:22	1485:22	16	uint64
LEAF_NODE	1485:28	1485:28	14	)
LEAF_NODE	1485:29	1485:29	10	;
SELECTION	1486:3	1487:3	9	
KEYWORD	1486:3	1486:3	10	if
LEAF_NODE	1486:3	1486:3	11	if
LEAF_NODE	1486:6	1486:6	10	(
CONDITION	1486:7	1486:7	10	( ( uint64 ) poffa != poff ) || ( poffb < poffa ) || ( poffb < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffb > tif -> tif_size )
EXPR	1486:7	1486:7	11	( ( uint64 ) poffa != poff ) || ( poffb < poffa ) || ( poffb < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffb > tif -> tif_size )
OR	1486:7	1486:30	12	( ( uint64 ) poffa != poff ) || ( poffb < poffa ) || ( poffb < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffb > tif -> tif_size )
EXPR	1486:7	1486:27	13	( ( uint64 ) poffa != poff )
LEAF_NODE	1486:7	1486:7	14	(
LEAF_NODE	1486:8	1486:8	14	(
TYPE_NAME	1486:9	1486:9	14	uint64
LEAF_NODE	1486:9	1486:9	15	uint64
LEAF_NODE	1486:15	1486:15	14	)
FIELD	1486:16	1486:16	14	poffa
LEAF_NODE	1486:16	1486:16	15	poffa
EQ_OPERATOR	1486:21	1486:21	14	!=
LEAF_NODE	1486:21	1486:21	15	!=
FIELD	1486:23	1486:23	14	poff
LEAF_NODE	1486:23	1486:23	15	poff
LEAF_NODE	1486:27	1486:27	14	)
LEAF_NODE	1486:28	1486:28	13	||
EXPR	1486:30	1486:30	13	( poffb < poffa ) || ( poffb < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffb > tif -> tif_size )
OR	1486:30	1486:45	14	( poffb < poffa ) || ( poffb < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffb > tif -> tif_size )
EXPR	1486:30	1486:42	15	( poffb < poffa )
LEAF_NODE	1486:30	1486:30	16	(
FIELD	1486:31	1486:31	16	poffb
LEAF_NODE	1486:31	1486:31	17	poffb
REL_OPERATOR	1486:36	1486:36	16	<
LEAF_NODE	1486:36	1486:36	17	<
FIELD	1486:37	1486:37	16	poffa
LEAF_NODE	1486:37	1486:37	17	poffa
LEAF_NODE	1486:42	1486:42	16	)
LEAF_NODE	1486:43	1486:43	15	||
EXPR	1486:45	1486:45	15	( poffb < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffb > tif -> tif_size )
OR	1486:45	1486:79	16	( poffb < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffb > tif -> tif_size )
EXPR	1486:45	1486:76	17	( poffb < ( tmsize_t ) sizeof ( uint64 ) )
LEAF_NODE	1486:45	1486:45	18	(
FIELD	1486:46	1486:46	18	poffb
LEAF_NODE	1486:46	1486:46	19	poffb
REL_OPERATOR	1486:51	1486:51	18	<
LEAF_NODE	1486:51	1486:51	19	<
LEAF_NODE	1486:52	1486:52	18	(
TYPE_NAME	1486:53	1486:53	18	tmsize_t
LEAF_NODE	1486:53	1486:53	19	tmsize_t
LEAF_NODE	1486:61	1486:61	18	)
FUNCTION_CALL	1486:62	1486:75	18	sizeof ( uint64 )
CALLEE	1486:62	1486:62	19	sizeof
LEAF_NODE	1486:62	1486:62	20	sizeof
LEAF_NODE	1486:68	1486:68	19	(
ARGUMENT	1486:69	1486:69	19	uint64
FIELD	1486:69	1486:69	20	uint64
LEAF_NODE	1486:69	1486:69	21	uint64
LEAF_NODE	1486:75	1486:75	19	)
LEAF_NODE	1486:76	1486:76	18	)
LEAF_NODE	1486:77	1486:77	17	||
EXPR	1486:79	1486:99	17	( poffb > tif -> tif_size )
LEAF_NODE	1486:79	1486:79	18	(
FIELD	1486:80	1486:80	18	poffb
LEAF_NODE	1486:80	1486:80	19	poffb
REL_OPERATOR	1486:85	1486:85	18	>
LEAF_NODE	1486:85	1486:85	19	>
FIELD	1486:86	1486:91	18	tif -> tif_size
LEAF_NODE	1486:86	1486:86	19	tif
LEAF_NODE	1486:89	1486:89	19	->
LEAF_NODE	1486:91	1486:91	19	tif_size
LEAF_NODE	1486:99	1486:99	18	)
LEAF_NODE	1486:100	1486:100	10	)
STATEMENTS	1487:3	1490:3	10	
LEAF_NODE	1487:3	1487:3	11	{
STATEMENTS	1488:4	1489:4	11	
EXPR_STATEMENT	1488:4	1488:77	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" ) ;
EXPR	1488:4	1488:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
FUNCTION_CALL	1488:4	1488:76	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
CALLEE	1488:4	1488:4	15	TIFFErrorExt
LEAF_NODE	1488:4	1488:4	16	TIFFErrorExt
LEAF_NODE	1488:16	1488:16	15	(
ARGUMENT	1488:17	1488:17	15	tif -> tif_clientdata
FIELD	1488:17	1488:22	16	tif -> tif_clientdata
LEAF_NODE	1488:17	1488:17	17	tif
LEAF_NODE	1488:20	1488:20	17	->
LEAF_NODE	1488:22	1488:22	17	tif_clientdata
LEAF_NODE	1488:36	1488:36	15	,
ARGUMENT	1488:37	1488:37	15	module
FIELD	1488:37	1488:37	16	module
LEAF_NODE	1488:37	1488:37	17	module
LEAF_NODE	1488:43	1488:43	15	,
ARGUMENT	1488:44	1488:44	15	"Error fetching directory count"
FIELD	1488:44	1488:44	16	"Error fetching directory count"
LEAF_NODE	1488:44	1488:44	17	"Error fetching directory count"
LEAF_NODE	1488:76	1488:76	15	)
LEAF_NODE	1488:77	1488:77	13	;
JUMP_STATEMENT	1489:4	1489:13	12	return ( 0 ) ;
KEYWORD	1489:4	1489:4	13	return
LEAF_NODE	1489:4	1489:4	14	return
DESTINATION	1489:10	1489:10	13	( 0 )
EXPR	1489:10	1489:12	14	( 0 )
LEAF_NODE	1489:10	1489:10	15	(
FIELD	1489:11	1489:11	15	0
LEAF_NODE	1489:11	1489:11	16	0
LEAF_NODE	1489:12	1489:12	15	)
LEAF_NODE	1489:13	1489:13	13	;
LEAF_NODE	1490:3	1490:3	11	}
EXPR_STATEMENT	1491:3	1491:62	9	_TIFFmemcpy ( & dircount64 , tif -> tif_base + poffa , sizeof ( uint64 ) ) ;
EXPR	1491:3	1491:3	10	_TIFFmemcpy ( & dircount64 , tif -> tif_base + poffa , sizeof ( uint64 ) )
FUNCTION_CALL	1491:3	1491:61	11	_TIFFmemcpy ( & dircount64 , tif -> tif_base + poffa , sizeof ( uint64 ) )
CALLEE	1491:3	1491:3	12	_TIFFmemcpy
LEAF_NODE	1491:3	1491:3	13	_TIFFmemcpy
LEAF_NODE	1491:14	1491:14	12	(
ARGUMENT	1491:15	1491:15	12	& dircount64
UNARY_EXPR	1491:15	1491:16	13	& dircount64
UNARY_OPERATOR	1491:15	1491:15	14	&
LEAF_NODE	1491:15	1491:15	15	&
FIELD	1491:16	1491:16	14	dircount64
LEAF_NODE	1491:16	1491:16	15	dircount64
LEAF_NODE	1491:26	1491:26	12	,
ARGUMENT	1491:27	1491:41	12	tif -> tif_base + poffa
FIELD	1491:27	1491:32	13	tif -> tif_base
LEAF_NODE	1491:27	1491:27	14	tif
LEAF_NODE	1491:30	1491:30	14	->
LEAF_NODE	1491:32	1491:32	14	tif_base
LEAF_NODE	1491:40	1491:40	13	+
FIELD	1491:41	1491:41	13	poffa
LEAF_NODE	1491:41	1491:41	14	poffa
LEAF_NODE	1491:46	1491:46	12	,
ARGUMENT	1491:47	1491:47	12	sizeof ( uint64 )
FUNCTION_CALL	1491:47	1491:60	13	sizeof ( uint64 )
CALLEE	1491:47	1491:47	14	sizeof
LEAF_NODE	1491:47	1491:47	15	sizeof
LEAF_NODE	1491:53	1491:53	14	(
ARGUMENT	1491:54	1491:54	14	uint64
FIELD	1491:54	1491:54	15	uint64
LEAF_NODE	1491:54	1491:54	16	uint64
LEAF_NODE	1491:60	1491:60	14	)
LEAF_NODE	1491:61	1491:61	12	)
LEAF_NODE	1491:62	1491:62	10	;
SELECTION	1492:3	1493:4	9	
KEYWORD	1492:3	1492:3	10	if
LEAF_NODE	1492:3	1492:3	11	if
LEAF_NODE	1492:6	1492:6	10	(
CONDITION	1492:7	1492:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	1492:7	1492:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	1492:7	1492:12	12	tif -> tif_flags
LEAF_NODE	1492:7	1492:7	13	tif
LEAF_NODE	1492:10	1492:10	13	->
LEAF_NODE	1492:12	1492:12	13	tif_flags
LEAF_NODE	1492:21	1492:21	12	&
FIELD	1492:22	1492:22	12	TIFF_SWAB
LEAF_NODE	1492:22	1492:22	13	TIFF_SWAB
LEAF_NODE	1492:31	1492:31	10	)
STATEMENTS	1493:4	1493:4	10	
EXPR_STATEMENT	1493:4	1493:30	11	TIFFSwabLong8 ( & dircount64 ) ;
EXPR	1493:4	1493:4	12	TIFFSwabLong8 ( & dircount64 )
FUNCTION_CALL	1493:4	1493:29	13	TIFFSwabLong8 ( & dircount64 )
CALLEE	1493:4	1493:4	14	TIFFSwabLong8
LEAF_NODE	1493:4	1493:4	15	TIFFSwabLong8
LEAF_NODE	1493:17	1493:17	14	(
ARGUMENT	1493:18	1493:18	14	& dircount64
UNARY_EXPR	1493:18	1493:19	15	& dircount64
UNARY_OPERATOR	1493:18	1493:18	16	&
LEAF_NODE	1493:18	1493:18	17	&
FIELD	1493:19	1493:19	16	dircount64
LEAF_NODE	1493:19	1493:19	17	dircount64
LEAF_NODE	1493:29	1493:29	14	)
LEAF_NODE	1493:30	1493:30	12	;
SELECTION	1494:3	1495:3	9	
KEYWORD	1494:3	1494:3	10	if
LEAF_NODE	1494:3	1494:3	11	if
LEAF_NODE	1494:6	1494:6	10	(
CONDITION	1494:7	1494:7	10	dircount64 > 0xFFFF
EXPR	1494:7	1494:18	11	dircount64 > 0xFFFF
FIELD	1494:7	1494:7	12	dircount64
LEAF_NODE	1494:7	1494:7	13	dircount64
REL_OPERATOR	1494:17	1494:17	12	>
LEAF_NODE	1494:17	1494:17	13	>
FIELD	1494:18	1494:18	12	0xFFFF
LEAF_NODE	1494:18	1494:18	13	0xFFFF
LEAF_NODE	1494:24	1494:24	10	)
STATEMENTS	1495:3	1498:3	10	
LEAF_NODE	1495:3	1495:3	11	{
STATEMENTS	1496:4	1497:4	11	
EXPR_STATEMENT	1496:4	1496:85	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed" ) ;
EXPR	1496:4	1496:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed" )
FUNCTION_CALL	1496:4	1496:84	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed" )
CALLEE	1496:4	1496:4	15	TIFFErrorExt
LEAF_NODE	1496:4	1496:4	16	TIFFErrorExt
LEAF_NODE	1496:16	1496:16	15	(
ARGUMENT	1496:17	1496:17	15	tif -> tif_clientdata
FIELD	1496:17	1496:22	16	tif -> tif_clientdata
LEAF_NODE	1496:17	1496:17	17	tif
LEAF_NODE	1496:20	1496:20	17	->
LEAF_NODE	1496:22	1496:22	17	tif_clientdata
LEAF_NODE	1496:36	1496:36	15	,
ARGUMENT	1496:37	1496:37	15	module
FIELD	1496:37	1496:37	16	module
LEAF_NODE	1496:37	1496:37	17	module
LEAF_NODE	1496:43	1496:43	15	,
ARGUMENT	1496:44	1496:44	15	"Sanity check on directory count failed"
FIELD	1496:44	1496:44	16	"Sanity check on directory count failed"
LEAF_NODE	1496:44	1496:44	17	"Sanity check on directory count failed"
LEAF_NODE	1496:84	1496:84	15	)
LEAF_NODE	1496:85	1496:85	13	;
JUMP_STATEMENT	1497:4	1497:13	12	return ( 0 ) ;
KEYWORD	1497:4	1497:4	13	return
LEAF_NODE	1497:4	1497:4	14	return
DESTINATION	1497:10	1497:10	13	( 0 )
EXPR	1497:10	1497:12	14	( 0 )
LEAF_NODE	1497:10	1497:10	15	(
FIELD	1497:11	1497:11	15	0
LEAF_NODE	1497:11	1497:11	16	0
LEAF_NODE	1497:12	1497:12	15	)
LEAF_NODE	1497:13	1497:13	13	;
LEAF_NODE	1498:3	1498:3	11	}
EXPR_STATEMENT	1499:3	1499:32	9	dircount16 = ( uint16 ) dircount64 ;
EXPR	1499:3	1499:3	10	dircount16 = ( uint16 ) dircount64
ASSIGN	1499:3	1499:14	11	dircount16 = ( uint16 ) dircount64
LVAL	1499:3	1499:3	12	dircount16
FIELD	1499:3	1499:3	13	dircount16
LEAF_NODE	1499:3	1499:3	14	dircount16
ASSIGN_OP	1499:13	1499:13	12	=
LEAF_NODE	1499:13	1499:13	13	=
RVAL	1499:14	1499:22	12	( uint16 ) dircount64
LEAF_NODE	1499:14	1499:14	13	(
TYPE_NAME	1499:15	1499:15	13	uint16
LEAF_NODE	1499:15	1499:15	14	uint16
LEAF_NODE	1499:21	1499:21	13	)
FIELD	1499:22	1499:22	13	dircount64
LEAF_NODE	1499:22	1499:22	14	dircount64
LEAF_NODE	1499:32	1499:32	10	;
EXPR_STATEMENT	1500:3	1500:28	9	poffc = poffb + dircount16 * 20 ;
EXPR	1500:3	1500:3	10	poffc = poffb + dircount16 * 20
ASSIGN	1500:3	1500:9	11	poffc = poffb + dircount16 * 20
LVAL	1500:3	1500:3	12	poffc
FIELD	1500:3	1500:3	13	poffc
LEAF_NODE	1500:3	1500:3	14	poffc
ASSIGN_OP	1500:8	1500:8	12	=
LEAF_NODE	1500:8	1500:8	13	=
RVAL	1500:9	1500:26	12	poffb + dircount16 * 20
FIELD	1500:9	1500:9	13	poffb
LEAF_NODE	1500:9	1500:9	14	poffb
LEAF_NODE	1500:14	1500:14	13	+
FIELD	1500:15	1500:15	13	dircount16
LEAF_NODE	1500:15	1500:15	14	dircount16
LEAF_NODE	1500:25	1500:25	13	*
FIELD	1500:26	1500:26	13	20
LEAF_NODE	1500:26	1500:26	14	20
LEAF_NODE	1500:28	1500:28	10	;
EXPR_STATEMENT	1501:3	1501:29	9	poffd = poffc + sizeof ( uint64 ) ;
EXPR	1501:3	1501:3	10	poffd = poffc + sizeof ( uint64 )
ASSIGN	1501:3	1501:9	11	poffd = poffc + sizeof ( uint64 )
LVAL	1501:3	1501:3	12	poffd
FIELD	1501:3	1501:3	13	poffd
LEAF_NODE	1501:3	1501:3	14	poffd
ASSIGN_OP	1501:8	1501:8	12	=
LEAF_NODE	1501:8	1501:8	13	=
RVAL	1501:9	1501:15	12	poffc + sizeof ( uint64 )
FIELD	1501:9	1501:9	13	poffc
LEAF_NODE	1501:9	1501:9	14	poffc
LEAF_NODE	1501:14	1501:14	13	+
FUNCTION_CALL	1501:15	1501:28	13	sizeof ( uint64 )
CALLEE	1501:15	1501:15	14	sizeof
LEAF_NODE	1501:15	1501:15	15	sizeof
LEAF_NODE	1501:21	1501:21	14	(
ARGUMENT	1501:22	1501:22	14	uint64
FIELD	1501:22	1501:22	15	uint64
LEAF_NODE	1501:22	1501:22	16	uint64
LEAF_NODE	1501:28	1501:28	14	)
LEAF_NODE	1501:29	1501:29	10	;
SELECTION	1502:3	1503:3	9	
KEYWORD	1502:3	1502:3	10	if
LEAF_NODE	1502:3	1502:3	11	if
LEAF_NODE	1502:6	1502:6	10	(
CONDITION	1502:7	1502:7	10	( poffc < poffb ) || ( poffc < dircount16 * 20 ) || ( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffd > tif -> tif_size )
EXPR	1502:7	1502:7	11	( poffc < poffb ) || ( poffc < dircount16 * 20 ) || ( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffd > tif -> tif_size )
OR	1502:7	1502:22	12	( poffc < poffb ) || ( poffc < dircount16 * 20 ) || ( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffd > tif -> tif_size )
EXPR	1502:7	1502:19	13	( poffc < poffb )
LEAF_NODE	1502:7	1502:7	14	(
FIELD	1502:8	1502:8	14	poffc
LEAF_NODE	1502:8	1502:8	15	poffc
REL_OPERATOR	1502:13	1502:13	14	<
LEAF_NODE	1502:13	1502:13	15	<
FIELD	1502:14	1502:14	14	poffb
LEAF_NODE	1502:14	1502:14	15	poffb
LEAF_NODE	1502:19	1502:19	14	)
LEAF_NODE	1502:20	1502:20	13	||
EXPR	1502:22	1502:22	13	( poffc < dircount16 * 20 ) || ( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffd > tif -> tif_size )
OR	1502:22	1502:45	14	( poffc < dircount16 * 20 ) || ( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffd > tif -> tif_size )
EXPR	1502:22	1502:42	15	( poffc < dircount16 * 20 )
LEAF_NODE	1502:22	1502:22	16	(
FIELD	1502:23	1502:23	16	poffc
LEAF_NODE	1502:23	1502:23	17	poffc
REL_OPERATOR	1502:28	1502:28	16	<
LEAF_NODE	1502:28	1502:28	17	<
FIELD	1502:29	1502:29	16	dircount16
LEAF_NODE	1502:29	1502:29	17	dircount16
LEAF_NODE	1502:39	1502:39	16	*
FIELD	1502:40	1502:40	16	20
LEAF_NODE	1502:40	1502:40	17	20
LEAF_NODE	1502:42	1502:42	16	)
LEAF_NODE	1502:43	1502:43	15	||
EXPR	1502:45	1502:45	15	( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffd > tif -> tif_size )
OR	1502:45	1502:60	16	( poffd < poffc ) || ( poffd < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffd > tif -> tif_size )
EXPR	1502:45	1502:57	17	( poffd < poffc )
LEAF_NODE	1502:45	1502:45	18	(
FIELD	1502:46	1502:46	18	poffd
LEAF_NODE	1502:46	1502:46	19	poffd
REL_OPERATOR	1502:51	1502:51	18	<
LEAF_NODE	1502:51	1502:51	19	<
FIELD	1502:52	1502:52	18	poffc
LEAF_NODE	1502:52	1502:52	19	poffc
LEAF_NODE	1502:57	1502:57	18	)
LEAF_NODE	1502:58	1502:58	17	||
EXPR	1502:60	1502:60	17	( poffd < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffd > tif -> tif_size )
OR	1502:60	1502:94	18	( poffd < ( tmsize_t ) sizeof ( uint64 ) ) || ( poffd > tif -> tif_size )
EXPR	1502:60	1502:91	19	( poffd < ( tmsize_t ) sizeof ( uint64 ) )
LEAF_NODE	1502:60	1502:60	20	(
FIELD	1502:61	1502:61	20	poffd
LEAF_NODE	1502:61	1502:61	21	poffd
REL_OPERATOR	1502:66	1502:66	20	<
LEAF_NODE	1502:66	1502:66	21	<
LEAF_NODE	1502:67	1502:67	20	(
TYPE_NAME	1502:68	1502:68	20	tmsize_t
LEAF_NODE	1502:68	1502:68	21	tmsize_t
LEAF_NODE	1502:76	1502:76	20	)
FUNCTION_CALL	1502:77	1502:90	20	sizeof ( uint64 )
CALLEE	1502:77	1502:77	21	sizeof
LEAF_NODE	1502:77	1502:77	22	sizeof
LEAF_NODE	1502:83	1502:83	21	(
ARGUMENT	1502:84	1502:84	21	uint64
FIELD	1502:84	1502:84	22	uint64
LEAF_NODE	1502:84	1502:84	23	uint64
LEAF_NODE	1502:90	1502:90	21	)
LEAF_NODE	1502:91	1502:91	20	)
LEAF_NODE	1502:92	1502:92	19	||
EXPR	1502:94	1502:114	19	( poffd > tif -> tif_size )
LEAF_NODE	1502:94	1502:94	20	(
FIELD	1502:95	1502:95	20	poffd
LEAF_NODE	1502:95	1502:95	21	poffd
REL_OPERATOR	1502:100	1502:100	20	>
LEAF_NODE	1502:100	1502:100	21	>
FIELD	1502:101	1502:106	20	tif -> tif_size
LEAF_NODE	1502:101	1502:101	21	tif
LEAF_NODE	1502:104	1502:104	21	->
LEAF_NODE	1502:106	1502:106	21	tif_size
LEAF_NODE	1502:114	1502:114	20	)
LEAF_NODE	1502:115	1502:115	10	)
STATEMENTS	1503:3	1506:3	10	
LEAF_NODE	1503:3	1503:3	11	{
STATEMENTS	1504:4	1505:4	11	
EXPR_STATEMENT	1504:4	1504:76	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" ) ;
EXPR	1504:4	1504:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
FUNCTION_CALL	1504:4	1504:75	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
CALLEE	1504:4	1504:4	15	TIFFErrorExt
LEAF_NODE	1504:4	1504:4	16	TIFFErrorExt
LEAF_NODE	1504:16	1504:16	15	(
ARGUMENT	1504:17	1504:17	15	tif -> tif_clientdata
FIELD	1504:17	1504:22	16	tif -> tif_clientdata
LEAF_NODE	1504:17	1504:17	17	tif
LEAF_NODE	1504:20	1504:20	17	->
LEAF_NODE	1504:22	1504:22	17	tif_clientdata
LEAF_NODE	1504:36	1504:36	15	,
ARGUMENT	1504:37	1504:37	15	module
FIELD	1504:37	1504:37	16	module
LEAF_NODE	1504:37	1504:37	17	module
LEAF_NODE	1504:43	1504:43	15	,
ARGUMENT	1504:44	1504:44	15	"Error fetching directory link"
FIELD	1504:44	1504:44	16	"Error fetching directory link"
LEAF_NODE	1504:44	1504:44	17	"Error fetching directory link"
LEAF_NODE	1504:75	1504:75	15	)
LEAF_NODE	1504:76	1504:76	13	;
JUMP_STATEMENT	1505:4	1505:13	12	return ( 0 ) ;
KEYWORD	1505:4	1505:4	13	return
LEAF_NODE	1505:4	1505:4	14	return
DESTINATION	1505:10	1505:10	13	( 0 )
EXPR	1505:10	1505:12	14	( 0 )
LEAF_NODE	1505:10	1505:10	15	(
FIELD	1505:11	1505:11	15	0
LEAF_NODE	1505:11	1505:11	16	0
LEAF_NODE	1505:12	1505:12	15	)
LEAF_NODE	1505:13	1505:13	13	;
LEAF_NODE	1506:3	1506:3	11	}
SELECTION	1507:3	1508:4	9	
KEYWORD	1507:3	1507:3	10	if
LEAF_NODE	1507:3	1507:3	11	if
LEAF_NODE	1507:6	1507:6	10	(
CONDITION	1507:7	1507:7	10	off != NULL
EXPR	1507:7	1507:12	11	off != NULL
FIELD	1507:7	1507:7	12	off
LEAF_NODE	1507:7	1507:7	13	off
EQ_OPERATOR	1507:10	1507:10	12	!=
LEAF_NODE	1507:10	1507:10	13	!=
FIELD	1507:12	1507:12	12	NULL
LEAF_NODE	1507:12	1507:12	13	NULL
LEAF_NODE	1507:16	1507:16	10	)
STATEMENTS	1508:4	1508:4	10	
EXPR_STATEMENT	1508:4	1508:22	11	* off = ( uint64 ) poffc ;
EXPR	1508:4	1508:4	12	* off = ( uint64 ) poffc
ASSIGN	1508:4	1508:9	13	* off = ( uint64 ) poffc
LVAL	1508:4	1508:4	14	* off
UNARY_EXPR	1508:4	1508:5	15	* off
UNARY_OPERATOR	1508:4	1508:4	16	*
LEAF_NODE	1508:4	1508:4	17	*
FIELD	1508:5	1508:5	16	off
LEAF_NODE	1508:5	1508:5	17	off
ASSIGN_OP	1508:8	1508:8	14	=
LEAF_NODE	1508:8	1508:8	15	=
RVAL	1508:9	1508:17	14	( uint64 ) poffc
LEAF_NODE	1508:9	1508:9	15	(
TYPE_NAME	1508:10	1508:10	15	uint64
LEAF_NODE	1508:10	1508:10	16	uint64
LEAF_NODE	1508:16	1508:16	15	)
FIELD	1508:17	1508:17	15	poffc
LEAF_NODE	1508:17	1508:17	16	poffc
LEAF_NODE	1508:22	1508:22	12	;
EXPR_STATEMENT	1509:3	1509:58	9	_TIFFmemcpy ( nextdir , tif -> tif_base + poffc , sizeof ( uint64 ) ) ;
EXPR	1509:3	1509:3	10	_TIFFmemcpy ( nextdir , tif -> tif_base + poffc , sizeof ( uint64 ) )
FUNCTION_CALL	1509:3	1509:57	11	_TIFFmemcpy ( nextdir , tif -> tif_base + poffc , sizeof ( uint64 ) )
CALLEE	1509:3	1509:3	12	_TIFFmemcpy
LEAF_NODE	1509:3	1509:3	13	_TIFFmemcpy
LEAF_NODE	1509:14	1509:14	12	(
ARGUMENT	1509:15	1509:15	12	nextdir
FIELD	1509:15	1509:15	13	nextdir
LEAF_NODE	1509:15	1509:15	14	nextdir
LEAF_NODE	1509:22	1509:22	12	,
ARGUMENT	1509:23	1509:37	12	tif -> tif_base + poffc
FIELD	1509:23	1509:28	13	tif -> tif_base
LEAF_NODE	1509:23	1509:23	14	tif
LEAF_NODE	1509:26	1509:26	14	->
LEAF_NODE	1509:28	1509:28	14	tif_base
LEAF_NODE	1509:36	1509:36	13	+
FIELD	1509:37	1509:37	13	poffc
LEAF_NODE	1509:37	1509:37	14	poffc
LEAF_NODE	1509:42	1509:42	12	,
ARGUMENT	1509:43	1509:43	12	sizeof ( uint64 )
FUNCTION_CALL	1509:43	1509:56	13	sizeof ( uint64 )
CALLEE	1509:43	1509:43	14	sizeof
LEAF_NODE	1509:43	1509:43	15	sizeof
LEAF_NODE	1509:49	1509:49	14	(
ARGUMENT	1509:50	1509:50	14	uint64
FIELD	1509:50	1509:50	15	uint64
LEAF_NODE	1509:50	1509:50	16	uint64
LEAF_NODE	1509:56	1509:56	14	)
LEAF_NODE	1509:57	1509:57	12	)
LEAF_NODE	1509:58	1509:58	10	;
SELECTION	1510:3	1511:4	9	
KEYWORD	1510:3	1510:3	10	if
LEAF_NODE	1510:3	1510:3	11	if
LEAF_NODE	1510:6	1510:6	10	(
CONDITION	1510:7	1510:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	1510:7	1510:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	1510:7	1510:12	12	tif -> tif_flags
LEAF_NODE	1510:7	1510:7	13	tif
LEAF_NODE	1510:10	1510:10	13	->
LEAF_NODE	1510:12	1510:12	13	tif_flags
LEAF_NODE	1510:21	1510:21	12	&
FIELD	1510:22	1510:22	12	TIFF_SWAB
LEAF_NODE	1510:22	1510:22	13	TIFF_SWAB
LEAF_NODE	1510:31	1510:31	10	)
STATEMENTS	1511:4	1511:4	10	
EXPR_STATEMENT	1511:4	1511:26	11	TIFFSwabLong8 ( nextdir ) ;
EXPR	1511:4	1511:4	12	TIFFSwabLong8 ( nextdir )
FUNCTION_CALL	1511:4	1511:25	13	TIFFSwabLong8 ( nextdir )
CALLEE	1511:4	1511:4	14	TIFFSwabLong8
LEAF_NODE	1511:4	1511:4	15	TIFFSwabLong8
LEAF_NODE	1511:17	1511:17	14	(
ARGUMENT	1511:18	1511:18	14	nextdir
FIELD	1511:18	1511:18	15	nextdir
LEAF_NODE	1511:18	1511:18	16	nextdir
LEAF_NODE	1511:25	1511:25	14	)
LEAF_NODE	1511:26	1511:26	12	;
LEAF_NODE	1512:2	1512:2	8	}
JUMP_STATEMENT	1513:2	1513:11	6	return ( 1 ) ;
KEYWORD	1513:2	1513:2	7	return
LEAF_NODE	1513:2	1513:2	8	return
DESTINATION	1513:8	1513:8	7	( 1 )
EXPR	1513:8	1513:10	8	( 1 )
LEAF_NODE	1513:8	1513:8	9	(
FIELD	1513:9	1513:9	9	1
LEAF_NODE	1513:9	1513:9	10	1
LEAF_NODE	1513:10	1513:10	9	)
LEAF_NODE	1513:11	1513:11	7	;
LEAF_NODE	1514:1	1514:1	5	}
SELECTION	1515:1	1516:1	3	
KEYWORD	1515:1	1515:1	4	else
LEAF_NODE	1515:1	1515:1	5	else
STATEMENTS	1516:1	1578:1	4	
LEAF_NODE	1516:1	1516:1	5	{
STATEMENTS	1517:2	1577:2	5	
SELECTION	1517:2	1518:2	6	
KEYWORD	1517:2	1517:2	7	if
LEAF_NODE	1517:2	1517:2	8	if
LEAF_NODE	1517:5	1517:5	7	(
CONDITION	1517:6	1517:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	1517:6	1517:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	1517:6	1517:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	1517:6	1517:6	10	!
LEAF_NODE	1517:6	1517:6	11	!
LEAF_NODE	1517:7	1517:7	10	(
FIELD	1517:8	1517:13	10	tif -> tif_flags
LEAF_NODE	1517:8	1517:8	11	tif
LEAF_NODE	1517:11	1517:11	11	->
LEAF_NODE	1517:13	1517:13	11	tif_flags
LEAF_NODE	1517:22	1517:22	10	&
FIELD	1517:23	1517:23	10	TIFF_BIGTIFF
LEAF_NODE	1517:23	1517:23	11	TIFF_BIGTIFF
LEAF_NODE	1517:35	1517:35	10	)
LEAF_NODE	1517:36	1517:36	7	)
STATEMENTS	1518:2	1543:2	7	
LEAF_NODE	1518:2	1518:2	8	{
STATEMENTS	1519:3	1542:3	8	
SIMPLE_DECL	1519:3	1519:18	9	uint16 dircount ;
VAR_DECL	1519:3	1519:10	10	uint16 dircount
TYPE	1519:3	1519:3	11	uint16
TYPE_NAME	1519:3	1519:3	12	uint16
LEAF_NODE	1519:3	1519:3	13	uint16
NAME	1519:10	1519:10	11	dircount
LEAF_NODE	1519:10	1519:10	12	dircount
LEAF_NODE	1519:18	1519:18	10	;
SIMPLE_DECL	1520:3	1520:19	9	uint32 nextdir32 ;
VAR_DECL	1520:3	1520:10	10	uint32 nextdir32
TYPE	1520:3	1520:3	11	uint32
TYPE_NAME	1520:3	1520:3	12	uint32
LEAF_NODE	1520:3	1520:3	13	uint32
NAME	1520:10	1520:10	11	nextdir32
LEAF_NODE	1520:10	1520:10	12	nextdir32
LEAF_NODE	1520:19	1520:19	10	;
SELECTION	1521:3	1522:49	9	
KEYWORD	1521:3	1521:3	10	if
LEAF_NODE	1521:3	1521:3	11	if
LEAF_NODE	1521:6	1521:6	10	(
CONDITION	1521:7	1521:7	10	! SeekOK ( tif , * nextdir ) || ! ReadOK ( tif , & dircount , sizeof ( uint16 ) )
EXPR	1521:7	1521:7	11	! SeekOK ( tif , * nextdir ) || ! ReadOK ( tif , & dircount , sizeof ( uint16 ) )
OR	1521:7	1522:7	12	! SeekOK ( tif , * nextdir ) || ! ReadOK ( tif , & dircount , sizeof ( uint16 ) )
EXPR	1521:7	1521:7	13	! SeekOK ( tif , * nextdir )
UNARY_EXPR	1521:7	1521:8	14	! SeekOK ( tif , * nextdir )
UNARY_OPERATOR	1521:7	1521:7	15	!
LEAF_NODE	1521:7	1521:7	16	!
FUNCTION_CALL	1521:8	1521:28	15	SeekOK ( tif , * nextdir )
CALLEE	1521:8	1521:8	16	SeekOK
LEAF_NODE	1521:8	1521:8	17	SeekOK
LEAF_NODE	1521:14	1521:14	16	(
ARGUMENT	1521:15	1521:15	16	tif
FIELD	1521:15	1521:15	17	tif
LEAF_NODE	1521:15	1521:15	18	tif
LEAF_NODE	1521:18	1521:18	16	,
ARGUMENT	1521:20	1521:20	16	* nextdir
UNARY_EXPR	1521:20	1521:21	17	* nextdir
UNARY_OPERATOR	1521:20	1521:20	18	*
LEAF_NODE	1521:20	1521:20	19	*
FIELD	1521:21	1521:21	18	nextdir
LEAF_NODE	1521:21	1521:21	19	nextdir
LEAF_NODE	1521:28	1521:28	16	)
LEAF_NODE	1521:30	1521:30	13	||
EXPR	1522:7	1522:7	13	! ReadOK ( tif , & dircount , sizeof ( uint16 ) )
UNARY_EXPR	1522:7	1522:8	14	! ReadOK ( tif , & dircount , sizeof ( uint16 ) )
UNARY_OPERATOR	1522:7	1522:7	15	!
LEAF_NODE	1522:7	1522:7	16	!
FUNCTION_CALL	1522:8	1522:46	15	ReadOK ( tif , & dircount , sizeof ( uint16 ) )
CALLEE	1522:8	1522:8	16	ReadOK
LEAF_NODE	1522:8	1522:8	17	ReadOK
LEAF_NODE	1522:14	1522:14	16	(
ARGUMENT	1522:15	1522:15	16	tif
FIELD	1522:15	1522:15	17	tif
LEAF_NODE	1522:15	1522:15	18	tif
LEAF_NODE	1522:18	1522:18	16	,
ARGUMENT	1522:20	1522:20	16	& dircount
UNARY_EXPR	1522:20	1522:21	17	& dircount
UNARY_OPERATOR	1522:20	1522:20	18	&
LEAF_NODE	1522:20	1522:20	19	&
FIELD	1522:21	1522:21	18	dircount
LEAF_NODE	1522:21	1522:21	19	dircount
LEAF_NODE	1522:29	1522:29	16	,
ARGUMENT	1522:31	1522:31	16	sizeof ( uint16 )
FUNCTION_CALL	1522:31	1522:45	17	sizeof ( uint16 )
CALLEE	1522:31	1522:31	18	sizeof
LEAF_NODE	1522:31	1522:31	19	sizeof
LEAF_NODE	1522:38	1522:38	18	(
ARGUMENT	1522:39	1522:39	18	uint16
FIELD	1522:39	1522:39	19	uint16
LEAF_NODE	1522:39	1522:39	20	uint16
LEAF_NODE	1522:45	1522:45	18	)
LEAF_NODE	1522:46	1522:46	16	)
LEAF_NODE	1522:47	1522:47	10	)
STATEMENTS	1522:49	1526:3	10	
LEAF_NODE	1522:49	1522:49	11	{
STATEMENTS	1523:4	1525:4	11	
EXPR_STATEMENT	1523:4	1524:22	12	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory count" , tif -> tif_name ) ;
EXPR	1523:4	1523:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory count" , tif -> tif_name )
FUNCTION_CALL	1523:4	1524:21	14	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory count" , tif -> tif_name )
CALLEE	1523:4	1523:4	15	TIFFErrorExt
LEAF_NODE	1523:4	1523:4	16	TIFFErrorExt
LEAF_NODE	1523:16	1523:16	15	(
ARGUMENT	1523:17	1523:17	15	tif -> tif_clientdata
FIELD	1523:17	1523:22	16	tif -> tif_clientdata
LEAF_NODE	1523:17	1523:17	17	tif
LEAF_NODE	1523:20	1523:20	17	->
LEAF_NODE	1523:22	1523:22	17	tif_clientdata
LEAF_NODE	1523:36	1523:36	15	,
ARGUMENT	1523:38	1523:38	15	module
FIELD	1523:38	1523:38	16	module
LEAF_NODE	1523:38	1523:38	17	module
LEAF_NODE	1523:44	1523:44	15	,
ARGUMENT	1523:46	1523:46	15	"%s: Error fetching directory count"
FIELD	1523:46	1523:46	16	"%s: Error fetching directory count"
LEAF_NODE	1523:46	1523:46	17	"%s: Error fetching directory count"
LEAF_NODE	1523:82	1523:82	15	,
ARGUMENT	1524:8	1524:8	15	tif -> tif_name
FIELD	1524:8	1524:13	16	tif -> tif_name
LEAF_NODE	1524:8	1524:8	17	tif
LEAF_NODE	1524:11	1524:11	17	->
LEAF_NODE	1524:13	1524:13	17	tif_name
LEAF_NODE	1524:21	1524:21	15	)
LEAF_NODE	1524:22	1524:22	13	;
JUMP_STATEMENT	1525:4	1525:14	12	return ( 0 ) ;
KEYWORD	1525:4	1525:4	13	return
LEAF_NODE	1525:4	1525:4	14	return
DESTINATION	1525:11	1525:11	13	( 0 )
EXPR	1525:11	1525:13	14	( 0 )
LEAF_NODE	1525:11	1525:11	15	(
FIELD	1525:12	1525:12	15	0
LEAF_NODE	1525:12	1525:12	16	0
LEAF_NODE	1525:13	1525:13	15	)
LEAF_NODE	1525:14	1525:14	13	;
LEAF_NODE	1526:3	1526:3	11	}
SELECTION	1527:3	1528:4	9	
KEYWORD	1527:3	1527:3	10	if
LEAF_NODE	1527:3	1527:3	11	if
LEAF_NODE	1527:6	1527:6	10	(
CONDITION	1527:7	1527:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	1527:7	1527:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	1527:7	1527:12	12	tif -> tif_flags
LEAF_NODE	1527:7	1527:7	13	tif
LEAF_NODE	1527:10	1527:10	13	->
LEAF_NODE	1527:12	1527:12	13	tif_flags
LEAF_NODE	1527:22	1527:22	12	&
FIELD	1527:24	1527:24	12	TIFF_SWAB
LEAF_NODE	1527:24	1527:24	13	TIFF_SWAB
LEAF_NODE	1527:33	1527:33	10	)
STATEMENTS	1528:4	1528:4	10	
EXPR_STATEMENT	1528:4	1528:28	11	TIFFSwabShort ( & dircount ) ;
EXPR	1528:4	1528:4	12	TIFFSwabShort ( & dircount )
FUNCTION_CALL	1528:4	1528:27	13	TIFFSwabShort ( & dircount )
CALLEE	1528:4	1528:4	14	TIFFSwabShort
LEAF_NODE	1528:4	1528:4	15	TIFFSwabShort
LEAF_NODE	1528:17	1528:17	14	(
ARGUMENT	1528:18	1528:18	14	& dircount
UNARY_EXPR	1528:18	1528:19	15	& dircount
UNARY_OPERATOR	1528:18	1528:18	16	&
LEAF_NODE	1528:18	1528:18	17	&
FIELD	1528:19	1528:19	16	dircount
LEAF_NODE	1528:19	1528:19	17	dircount
LEAF_NODE	1528:27	1528:27	14	)
LEAF_NODE	1528:28	1528:28	12	;
SELECTION	1529:3	1530:4	9	
KEYWORD	1529:3	1529:3	10	if
LEAF_NODE	1529:3	1529:3	11	if
LEAF_NODE	1529:6	1529:6	10	(
CONDITION	1529:7	1529:7	10	off != NULL
EXPR	1529:7	1529:14	11	off != NULL
FIELD	1529:7	1529:7	12	off
LEAF_NODE	1529:7	1529:7	13	off
EQ_OPERATOR	1529:11	1529:11	12	!=
LEAF_NODE	1529:11	1529:11	13	!=
FIELD	1529:14	1529:14	12	NULL
LEAF_NODE	1529:14	1529:14	13	NULL
LEAF_NODE	1529:18	1529:18	10	)
STATEMENTS	1530:4	1530:4	10	
EXPR_STATEMENT	1530:4	1531:30	11	* off = TIFFSeekFile ( tif , dircount * 12 , SEEK_CUR ) ;
EXPR	1530:4	1530:4	12	* off = TIFFSeekFile ( tif , dircount * 12 , SEEK_CUR )
ASSIGN	1530:4	1530:11	13	* off = TIFFSeekFile ( tif , dircount * 12 , SEEK_CUR )
LVAL	1530:4	1530:4	14	* off
UNARY_EXPR	1530:4	1530:5	15	* off
UNARY_OPERATOR	1530:4	1530:4	16	*
LEAF_NODE	1530:4	1530:4	17	*
FIELD	1530:5	1530:5	16	off
LEAF_NODE	1530:5	1530:5	17	off
ASSIGN_OP	1530:9	1530:9	14	=
LEAF_NODE	1530:9	1530:9	15	=
RVAL	1530:11	1530:11	14	TIFFSeekFile ( tif , dircount * 12 , SEEK_CUR )
FUNCTION_CALL	1530:11	1531:29	15	TIFFSeekFile ( tif , dircount * 12 , SEEK_CUR )
CALLEE	1530:11	1530:11	16	TIFFSeekFile
LEAF_NODE	1530:11	1530:11	17	TIFFSeekFile
LEAF_NODE	1530:23	1530:23	16	(
ARGUMENT	1530:24	1530:24	16	tif
FIELD	1530:24	1530:24	17	tif
LEAF_NODE	1530:24	1530:24	18	tif
LEAF_NODE	1530:27	1530:27	16	,
ARGUMENT	1531:8	1531:17	16	dircount * 12
FIELD	1531:8	1531:8	17	dircount
LEAF_NODE	1531:8	1531:8	18	dircount
LEAF_NODE	1531:16	1531:16	17	*
FIELD	1531:17	1531:17	17	12
LEAF_NODE	1531:17	1531:17	18	12
LEAF_NODE	1531:19	1531:19	16	,
ARGUMENT	1531:21	1531:21	16	SEEK_CUR
FIELD	1531:21	1531:21	17	SEEK_CUR
LEAF_NODE	1531:21	1531:21	18	SEEK_CUR
LEAF_NODE	1531:29	1531:29	16	)
LEAF_NODE	1531:30	1531:30	12	;
SELECTION	1532:3	1533:4	9	
KEYWORD	1532:3	1532:3	10	else
LEAF_NODE	1532:3	1532:3	11	else
STATEMENTS	1533:4	1533:4	10	
EXPR_STATEMENT	1533:4	1534:30	11	( void ) TIFFSeekFile ( tif , dircount * 12 , SEEK_CUR ) ;
EXPR	1533:4	1533:11	12	( void ) TIFFSeekFile ( tif , dircount * 12 , SEEK_CUR )
LEAF_NODE	1533:4	1533:4	13	(
TYPE_NAME	1533:5	1533:5	13	void
LEAF_NODE	1533:5	1533:5	14	void
LEAF_NODE	1533:9	1533:9	13	)
FUNCTION_CALL	1533:11	1534:29	13	TIFFSeekFile ( tif , dircount * 12 , SEEK_CUR )
CALLEE	1533:11	1533:11	14	TIFFSeekFile
LEAF_NODE	1533:11	1533:11	15	TIFFSeekFile
LEAF_NODE	1533:23	1533:23	14	(
ARGUMENT	1533:24	1533:24	14	tif
FIELD	1533:24	1533:24	15	tif
LEAF_NODE	1533:24	1533:24	16	tif
LEAF_NODE	1533:27	1533:27	14	,
ARGUMENT	1534:8	1534:17	14	dircount * 12
FIELD	1534:8	1534:8	15	dircount
LEAF_NODE	1534:8	1534:8	16	dircount
LEAF_NODE	1534:16	1534:16	15	*
FIELD	1534:17	1534:17	15	12
LEAF_NODE	1534:17	1534:17	16	12
LEAF_NODE	1534:19	1534:19	14	,
ARGUMENT	1534:21	1534:21	14	SEEK_CUR
FIELD	1534:21	1534:21	15	SEEK_CUR
LEAF_NODE	1534:21	1534:21	16	SEEK_CUR
LEAF_NODE	1534:29	1534:29	14	)
LEAF_NODE	1534:30	1534:30	12	;
SELECTION	1535:3	1535:50	9	
KEYWORD	1535:3	1535:3	10	if
LEAF_NODE	1535:3	1535:3	11	if
LEAF_NODE	1535:6	1535:6	10	(
CONDITION	1535:7	1535:7	10	! ReadOK ( tif , & nextdir32 , sizeof ( uint32 ) )
EXPR	1535:7	1535:7	11	! ReadOK ( tif , & nextdir32 , sizeof ( uint32 ) )
UNARY_EXPR	1535:7	1535:8	12	! ReadOK ( tif , & nextdir32 , sizeof ( uint32 ) )
UNARY_OPERATOR	1535:7	1535:7	13	!
LEAF_NODE	1535:7	1535:7	14	!
FUNCTION_CALL	1535:8	1535:47	13	ReadOK ( tif , & nextdir32 , sizeof ( uint32 ) )
CALLEE	1535:8	1535:8	14	ReadOK
LEAF_NODE	1535:8	1535:8	15	ReadOK
LEAF_NODE	1535:14	1535:14	14	(
ARGUMENT	1535:15	1535:15	14	tif
FIELD	1535:15	1535:15	15	tif
LEAF_NODE	1535:15	1535:15	16	tif
LEAF_NODE	1535:18	1535:18	14	,
ARGUMENT	1535:20	1535:20	14	& nextdir32
UNARY_EXPR	1535:20	1535:21	15	& nextdir32
UNARY_OPERATOR	1535:20	1535:20	16	&
LEAF_NODE	1535:20	1535:20	17	&
FIELD	1535:21	1535:21	16	nextdir32
LEAF_NODE	1535:21	1535:21	17	nextdir32
LEAF_NODE	1535:30	1535:30	14	,
ARGUMENT	1535:32	1535:32	14	sizeof ( uint32 )
FUNCTION_CALL	1535:32	1535:46	15	sizeof ( uint32 )
CALLEE	1535:32	1535:32	16	sizeof
LEAF_NODE	1535:32	1535:32	17	sizeof
LEAF_NODE	1535:39	1535:39	16	(
ARGUMENT	1535:40	1535:40	16	uint32
FIELD	1535:40	1535:40	17	uint32
LEAF_NODE	1535:40	1535:40	18	uint32
LEAF_NODE	1535:46	1535:46	16	)
LEAF_NODE	1535:47	1535:47	14	)
LEAF_NODE	1535:48	1535:48	10	)
STATEMENTS	1535:50	1539:3	10	
LEAF_NODE	1535:50	1535:50	11	{
STATEMENTS	1536:4	1538:4	11	
EXPR_STATEMENT	1536:4	1537:22	12	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory link" , tif -> tif_name ) ;
EXPR	1536:4	1536:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory link" , tif -> tif_name )
FUNCTION_CALL	1536:4	1537:21	14	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory link" , tif -> tif_name )
CALLEE	1536:4	1536:4	15	TIFFErrorExt
LEAF_NODE	1536:4	1536:4	16	TIFFErrorExt
LEAF_NODE	1536:16	1536:16	15	(
ARGUMENT	1536:17	1536:17	15	tif -> tif_clientdata
FIELD	1536:17	1536:22	16	tif -> tif_clientdata
LEAF_NODE	1536:17	1536:17	17	tif
LEAF_NODE	1536:20	1536:20	17	->
LEAF_NODE	1536:22	1536:22	17	tif_clientdata
LEAF_NODE	1536:36	1536:36	15	,
ARGUMENT	1536:38	1536:38	15	module
FIELD	1536:38	1536:38	16	module
LEAF_NODE	1536:38	1536:38	17	module
LEAF_NODE	1536:44	1536:44	15	,
ARGUMENT	1536:46	1536:46	15	"%s: Error fetching directory link"
FIELD	1536:46	1536:46	16	"%s: Error fetching directory link"
LEAF_NODE	1536:46	1536:46	17	"%s: Error fetching directory link"
LEAF_NODE	1536:81	1536:81	15	,
ARGUMENT	1537:8	1537:8	15	tif -> tif_name
FIELD	1537:8	1537:13	16	tif -> tif_name
LEAF_NODE	1537:8	1537:8	17	tif
LEAF_NODE	1537:11	1537:11	17	->
LEAF_NODE	1537:13	1537:13	17	tif_name
LEAF_NODE	1537:21	1537:21	15	)
LEAF_NODE	1537:22	1537:22	13	;
JUMP_STATEMENT	1538:4	1538:14	12	return ( 0 ) ;
KEYWORD	1538:4	1538:4	13	return
LEAF_NODE	1538:4	1538:4	14	return
DESTINATION	1538:11	1538:11	13	( 0 )
EXPR	1538:11	1538:13	14	( 0 )
LEAF_NODE	1538:11	1538:11	15	(
FIELD	1538:12	1538:12	15	0
LEAF_NODE	1538:12	1538:12	16	0
LEAF_NODE	1538:13	1538:13	15	)
LEAF_NODE	1538:14	1538:14	13	;
LEAF_NODE	1539:3	1539:3	11	}
SELECTION	1540:3	1541:4	9	
KEYWORD	1540:3	1540:3	10	if
LEAF_NODE	1540:3	1540:3	11	if
LEAF_NODE	1540:6	1540:6	10	(
CONDITION	1540:7	1540:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	1540:7	1540:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	1540:7	1540:12	12	tif -> tif_flags
LEAF_NODE	1540:7	1540:7	13	tif
LEAF_NODE	1540:10	1540:10	13	->
LEAF_NODE	1540:12	1540:12	13	tif_flags
LEAF_NODE	1540:22	1540:22	12	&
FIELD	1540:24	1540:24	12	TIFF_SWAB
LEAF_NODE	1540:24	1540:24	13	TIFF_SWAB
LEAF_NODE	1540:33	1540:33	10	)
STATEMENTS	1541:4	1541:4	10	
EXPR_STATEMENT	1541:4	1541:28	11	TIFFSwabLong ( & nextdir32 ) ;
EXPR	1541:4	1541:4	12	TIFFSwabLong ( & nextdir32 )
FUNCTION_CALL	1541:4	1541:27	13	TIFFSwabLong ( & nextdir32 )
CALLEE	1541:4	1541:4	14	TIFFSwabLong
LEAF_NODE	1541:4	1541:4	15	TIFFSwabLong
LEAF_NODE	1541:16	1541:16	14	(
ARGUMENT	1541:17	1541:17	14	& nextdir32
UNARY_EXPR	1541:17	1541:18	15	& nextdir32
UNARY_OPERATOR	1541:17	1541:17	16	&
LEAF_NODE	1541:17	1541:17	17	&
FIELD	1541:18	1541:18	16	nextdir32
LEAF_NODE	1541:18	1541:18	17	nextdir32
LEAF_NODE	1541:27	1541:27	14	)
LEAF_NODE	1541:28	1541:28	12	;
EXPR_STATEMENT	1542:3	1542:21	9	* nextdir = nextdir32 ;
EXPR	1542:3	1542:3	10	* nextdir = nextdir32
ASSIGN	1542:3	1542:12	11	* nextdir = nextdir32
LVAL	1542:3	1542:3	12	* nextdir
UNARY_EXPR	1542:3	1542:4	13	* nextdir
UNARY_OPERATOR	1542:3	1542:3	14	*
LEAF_NODE	1542:3	1542:3	15	*
FIELD	1542:4	1542:4	14	nextdir
LEAF_NODE	1542:4	1542:4	15	nextdir
ASSIGN_OP	1542:11	1542:11	12	=
LEAF_NODE	1542:11	1542:11	13	=
RVAL	1542:12	1542:12	12	nextdir32
FIELD	1542:12	1542:12	13	nextdir32
LEAF_NODE	1542:12	1542:12	14	nextdir32
LEAF_NODE	1542:21	1542:21	10	;
LEAF_NODE	1543:2	1543:2	8	}
SELECTION	1544:2	1545:2	6	
KEYWORD	1544:2	1544:2	7	else
LEAF_NODE	1544:2	1544:2	8	else
STATEMENTS	1545:2	1576:2	7	
LEAF_NODE	1545:2	1545:2	8	{
STATEMENTS	1546:3	1574:3	8	
SIMPLE_DECL	1546:3	1546:20	9	uint64 dircount64 ;
VAR_DECL	1546:3	1546:10	10	uint64 dircount64
TYPE	1546:3	1546:3	11	uint64
TYPE_NAME	1546:3	1546:3	12	uint64
LEAF_NODE	1546:3	1546:3	13	uint64
NAME	1546:10	1546:10	11	dircount64
LEAF_NODE	1546:10	1546:10	12	dircount64
LEAF_NODE	1546:20	1546:20	10	;
SIMPLE_DECL	1547:3	1547:20	9	uint16 dircount16 ;
VAR_DECL	1547:3	1547:10	10	uint16 dircount16
TYPE	1547:3	1547:3	11	uint16
TYPE_NAME	1547:3	1547:3	12	uint16
LEAF_NODE	1547:3	1547:3	13	uint16
NAME	1547:10	1547:10	11	dircount16
LEAF_NODE	1547:10	1547:10	12	dircount16
LEAF_NODE	1547:20	1547:20	10	;
SELECTION	1548:3	1549:51	9	
KEYWORD	1548:3	1548:3	10	if
LEAF_NODE	1548:3	1548:3	11	if
LEAF_NODE	1548:6	1548:6	10	(
CONDITION	1548:7	1548:7	10	! SeekOK ( tif , * nextdir ) || ! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
EXPR	1548:7	1548:7	11	! SeekOK ( tif , * nextdir ) || ! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
OR	1548:7	1549:7	12	! SeekOK ( tif , * nextdir ) || ! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
EXPR	1548:7	1548:7	13	! SeekOK ( tif , * nextdir )
UNARY_EXPR	1548:7	1548:8	14	! SeekOK ( tif , * nextdir )
UNARY_OPERATOR	1548:7	1548:7	15	!
LEAF_NODE	1548:7	1548:7	16	!
FUNCTION_CALL	1548:8	1548:28	15	SeekOK ( tif , * nextdir )
CALLEE	1548:8	1548:8	16	SeekOK
LEAF_NODE	1548:8	1548:8	17	SeekOK
LEAF_NODE	1548:14	1548:14	16	(
ARGUMENT	1548:15	1548:15	16	tif
FIELD	1548:15	1548:15	17	tif
LEAF_NODE	1548:15	1548:15	18	tif
LEAF_NODE	1548:18	1548:18	16	,
ARGUMENT	1548:20	1548:20	16	* nextdir
UNARY_EXPR	1548:20	1548:21	17	* nextdir
UNARY_OPERATOR	1548:20	1548:20	18	*
LEAF_NODE	1548:20	1548:20	19	*
FIELD	1548:21	1548:21	18	nextdir
LEAF_NODE	1548:21	1548:21	19	nextdir
LEAF_NODE	1548:28	1548:28	16	)
LEAF_NODE	1548:30	1548:30	13	||
EXPR	1549:7	1549:7	13	! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
UNARY_EXPR	1549:7	1549:8	14	! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
UNARY_OPERATOR	1549:7	1549:7	15	!
LEAF_NODE	1549:7	1549:7	16	!
FUNCTION_CALL	1549:8	1549:48	15	ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
CALLEE	1549:8	1549:8	16	ReadOK
LEAF_NODE	1549:8	1549:8	17	ReadOK
LEAF_NODE	1549:14	1549:14	16	(
ARGUMENT	1549:15	1549:15	16	tif
FIELD	1549:15	1549:15	17	tif
LEAF_NODE	1549:15	1549:15	18	tif
LEAF_NODE	1549:18	1549:18	16	,
ARGUMENT	1549:20	1549:20	16	& dircount64
UNARY_EXPR	1549:20	1549:21	17	& dircount64
UNARY_OPERATOR	1549:20	1549:20	18	&
LEAF_NODE	1549:20	1549:20	19	&
FIELD	1549:21	1549:21	18	dircount64
LEAF_NODE	1549:21	1549:21	19	dircount64
LEAF_NODE	1549:31	1549:31	16	,
ARGUMENT	1549:33	1549:33	16	sizeof ( uint64 )
FUNCTION_CALL	1549:33	1549:47	17	sizeof ( uint64 )
CALLEE	1549:33	1549:33	18	sizeof
LEAF_NODE	1549:33	1549:33	19	sizeof
LEAF_NODE	1549:40	1549:40	18	(
ARGUMENT	1549:41	1549:41	18	uint64
FIELD	1549:41	1549:41	19	uint64
LEAF_NODE	1549:41	1549:41	20	uint64
LEAF_NODE	1549:47	1549:47	18	)
LEAF_NODE	1549:48	1549:48	16	)
LEAF_NODE	1549:49	1549:49	10	)
STATEMENTS	1549:51	1553:3	10	
LEAF_NODE	1549:51	1549:51	11	{
STATEMENTS	1550:4	1552:4	11	
EXPR_STATEMENT	1550:4	1551:22	12	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory count" , tif -> tif_name ) ;
EXPR	1550:4	1550:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory count" , tif -> tif_name )
FUNCTION_CALL	1550:4	1551:21	14	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory count" , tif -> tif_name )
CALLEE	1550:4	1550:4	15	TIFFErrorExt
LEAF_NODE	1550:4	1550:4	16	TIFFErrorExt
LEAF_NODE	1550:16	1550:16	15	(
ARGUMENT	1550:17	1550:17	15	tif -> tif_clientdata
FIELD	1550:17	1550:22	16	tif -> tif_clientdata
LEAF_NODE	1550:17	1550:17	17	tif
LEAF_NODE	1550:20	1550:20	17	->
LEAF_NODE	1550:22	1550:22	17	tif_clientdata
LEAF_NODE	1550:36	1550:36	15	,
ARGUMENT	1550:38	1550:38	15	module
FIELD	1550:38	1550:38	16	module
LEAF_NODE	1550:38	1550:38	17	module
LEAF_NODE	1550:44	1550:44	15	,
ARGUMENT	1550:46	1550:46	15	"%s: Error fetching directory count"
FIELD	1550:46	1550:46	16	"%s: Error fetching directory count"
LEAF_NODE	1550:46	1550:46	17	"%s: Error fetching directory count"
LEAF_NODE	1550:82	1550:82	15	,
ARGUMENT	1551:8	1551:8	15	tif -> tif_name
FIELD	1551:8	1551:13	16	tif -> tif_name
LEAF_NODE	1551:8	1551:8	17	tif
LEAF_NODE	1551:11	1551:11	17	->
LEAF_NODE	1551:13	1551:13	17	tif_name
LEAF_NODE	1551:21	1551:21	15	)
LEAF_NODE	1551:22	1551:22	13	;
JUMP_STATEMENT	1552:4	1552:14	12	return ( 0 ) ;
KEYWORD	1552:4	1552:4	13	return
LEAF_NODE	1552:4	1552:4	14	return
DESTINATION	1552:11	1552:11	13	( 0 )
EXPR	1552:11	1552:13	14	( 0 )
LEAF_NODE	1552:11	1552:11	15	(
FIELD	1552:12	1552:12	15	0
LEAF_NODE	1552:12	1552:12	16	0
LEAF_NODE	1552:13	1552:13	15	)
LEAF_NODE	1552:14	1552:14	13	;
LEAF_NODE	1553:3	1553:3	11	}
SELECTION	1554:3	1555:4	9	
KEYWORD	1554:3	1554:3	10	if
LEAF_NODE	1554:3	1554:3	11	if
LEAF_NODE	1554:6	1554:6	10	(
CONDITION	1554:7	1554:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	1554:7	1554:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	1554:7	1554:12	12	tif -> tif_flags
LEAF_NODE	1554:7	1554:7	13	tif
LEAF_NODE	1554:10	1554:10	13	->
LEAF_NODE	1554:12	1554:12	13	tif_flags
LEAF_NODE	1554:22	1554:22	12	&
FIELD	1554:24	1554:24	12	TIFF_SWAB
LEAF_NODE	1554:24	1554:24	13	TIFF_SWAB
LEAF_NODE	1554:33	1554:33	10	)
STATEMENTS	1555:4	1555:4	10	
EXPR_STATEMENT	1555:4	1555:30	11	TIFFSwabLong8 ( & dircount64 ) ;
EXPR	1555:4	1555:4	12	TIFFSwabLong8 ( & dircount64 )
FUNCTION_CALL	1555:4	1555:29	13	TIFFSwabLong8 ( & dircount64 )
CALLEE	1555:4	1555:4	14	TIFFSwabLong8
LEAF_NODE	1555:4	1555:4	15	TIFFSwabLong8
LEAF_NODE	1555:17	1555:17	14	(
ARGUMENT	1555:18	1555:18	14	& dircount64
UNARY_EXPR	1555:18	1555:19	15	& dircount64
UNARY_OPERATOR	1555:18	1555:18	16	&
LEAF_NODE	1555:18	1555:18	17	&
FIELD	1555:19	1555:19	16	dircount64
LEAF_NODE	1555:19	1555:19	17	dircount64
LEAF_NODE	1555:29	1555:29	14	)
LEAF_NODE	1555:30	1555:30	12	;
SELECTION	1556:3	1557:3	9	
KEYWORD	1556:3	1556:3	10	if
LEAF_NODE	1556:3	1556:3	11	if
LEAF_NODE	1556:6	1556:6	10	(
CONDITION	1556:7	1556:7	10	dircount64 > 0xFFFF
EXPR	1556:7	1556:18	11	dircount64 > 0xFFFF
FIELD	1556:7	1556:7	12	dircount64
LEAF_NODE	1556:7	1556:7	13	dircount64
REL_OPERATOR	1556:17	1556:17	12	>
LEAF_NODE	1556:17	1556:17	13	>
FIELD	1556:18	1556:18	12	0xFFFF
LEAF_NODE	1556:18	1556:18	13	0xFFFF
LEAF_NODE	1556:24	1556:24	10	)
STATEMENTS	1557:3	1560:3	10	
LEAF_NODE	1557:3	1557:3	11	{
STATEMENTS	1558:4	1559:4	11	
EXPR_STATEMENT	1558:4	1558:79	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" ) ;
EXPR	1558:4	1558:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
FUNCTION_CALL	1558:4	1558:78	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
CALLEE	1558:4	1558:4	15	TIFFErrorExt
LEAF_NODE	1558:4	1558:4	16	TIFFErrorExt
LEAF_NODE	1558:16	1558:16	15	(
ARGUMENT	1558:17	1558:17	15	tif -> tif_clientdata
FIELD	1558:17	1558:22	16	tif -> tif_clientdata
LEAF_NODE	1558:17	1558:17	17	tif
LEAF_NODE	1558:20	1558:20	17	->
LEAF_NODE	1558:22	1558:22	17	tif_clientdata
LEAF_NODE	1558:36	1558:36	15	,
ARGUMENT	1558:38	1558:38	15	module
FIELD	1558:38	1558:38	16	module
LEAF_NODE	1558:38	1558:38	17	module
LEAF_NODE	1558:44	1558:44	15	,
ARGUMENT	1558:46	1558:46	15	"Error fetching directory count"
FIELD	1558:46	1558:46	16	"Error fetching directory count"
LEAF_NODE	1558:46	1558:46	17	"Error fetching directory count"
LEAF_NODE	1558:78	1558:78	15	)
LEAF_NODE	1558:79	1558:79	13	;
JUMP_STATEMENT	1559:4	1559:13	12	return ( 0 ) ;
KEYWORD	1559:4	1559:4	13	return
LEAF_NODE	1559:4	1559:4	14	return
DESTINATION	1559:10	1559:10	13	( 0 )
EXPR	1559:10	1559:12	14	( 0 )
LEAF_NODE	1559:10	1559:10	15	(
FIELD	1559:11	1559:11	15	0
LEAF_NODE	1559:11	1559:11	16	0
LEAF_NODE	1559:12	1559:12	15	)
LEAF_NODE	1559:13	1559:13	13	;
LEAF_NODE	1560:3	1560:3	11	}
EXPR_STATEMENT	1561:3	1561:34	9	dircount16 = ( uint16 ) dircount64 ;
EXPR	1561:3	1561:3	10	dircount16 = ( uint16 ) dircount64
ASSIGN	1561:3	1561:16	11	dircount16 = ( uint16 ) dircount64
LVAL	1561:3	1561:3	12	dircount16
FIELD	1561:3	1561:3	13	dircount16
LEAF_NODE	1561:3	1561:3	14	dircount16
ASSIGN_OP	1561:14	1561:14	12	=
LEAF_NODE	1561:14	1561:14	13	=
RVAL	1561:16	1561:24	12	( uint16 ) dircount64
LEAF_NODE	1561:16	1561:16	13	(
TYPE_NAME	1561:17	1561:17	13	uint16
LEAF_NODE	1561:17	1561:17	14	uint16
LEAF_NODE	1561:23	1561:23	13	)
FIELD	1561:24	1561:24	13	dircount64
LEAF_NODE	1561:24	1561:24	14	dircount64
LEAF_NODE	1561:34	1561:34	10	;
SELECTION	1562:3	1563:4	9	
KEYWORD	1562:3	1562:3	10	if
LEAF_NODE	1562:3	1562:3	11	if
LEAF_NODE	1562:6	1562:6	10	(
CONDITION	1562:7	1562:7	10	off != NULL
EXPR	1562:7	1562:14	11	off != NULL
FIELD	1562:7	1562:7	12	off
LEAF_NODE	1562:7	1562:7	13	off
EQ_OPERATOR	1562:11	1562:11	12	!=
LEAF_NODE	1562:11	1562:11	13	!=
FIELD	1562:14	1562:14	12	NULL
LEAF_NODE	1562:14	1562:14	13	NULL
LEAF_NODE	1562:18	1562:18	10	)
STATEMENTS	1563:4	1563:4	10	
EXPR_STATEMENT	1563:4	1564:32	11	* off = TIFFSeekFile ( tif , dircount16 * 20 , SEEK_CUR ) ;
EXPR	1563:4	1563:4	12	* off = TIFFSeekFile ( tif , dircount16 * 20 , SEEK_CUR )
ASSIGN	1563:4	1563:11	13	* off = TIFFSeekFile ( tif , dircount16 * 20 , SEEK_CUR )
LVAL	1563:4	1563:4	14	* off
UNARY_EXPR	1563:4	1563:5	15	* off
UNARY_OPERATOR	1563:4	1563:4	16	*
LEAF_NODE	1563:4	1563:4	17	*
FIELD	1563:5	1563:5	16	off
LEAF_NODE	1563:5	1563:5	17	off
ASSIGN_OP	1563:9	1563:9	14	=
LEAF_NODE	1563:9	1563:9	15	=
RVAL	1563:11	1563:11	14	TIFFSeekFile ( tif , dircount16 * 20 , SEEK_CUR )
FUNCTION_CALL	1563:11	1564:31	15	TIFFSeekFile ( tif , dircount16 * 20 , SEEK_CUR )
CALLEE	1563:11	1563:11	16	TIFFSeekFile
LEAF_NODE	1563:11	1563:11	17	TIFFSeekFile
LEAF_NODE	1563:23	1563:23	16	(
ARGUMENT	1563:24	1563:24	16	tif
FIELD	1563:24	1563:24	17	tif
LEAF_NODE	1563:24	1563:24	18	tif
LEAF_NODE	1563:27	1563:27	16	,
ARGUMENT	1564:8	1564:19	16	dircount16 * 20
FIELD	1564:8	1564:8	17	dircount16
LEAF_NODE	1564:8	1564:8	18	dircount16
LEAF_NODE	1564:18	1564:18	17	*
FIELD	1564:19	1564:19	17	20
LEAF_NODE	1564:19	1564:19	18	20
LEAF_NODE	1564:21	1564:21	16	,
ARGUMENT	1564:23	1564:23	16	SEEK_CUR
FIELD	1564:23	1564:23	17	SEEK_CUR
LEAF_NODE	1564:23	1564:23	18	SEEK_CUR
LEAF_NODE	1564:31	1564:31	16	)
LEAF_NODE	1564:32	1564:32	12	;
SELECTION	1565:3	1566:4	9	
KEYWORD	1565:3	1565:3	10	else
LEAF_NODE	1565:3	1565:3	11	else
STATEMENTS	1566:4	1566:4	10	
EXPR_STATEMENT	1566:4	1567:32	11	( void ) TIFFSeekFile ( tif , dircount16 * 20 , SEEK_CUR ) ;
EXPR	1566:4	1566:11	12	( void ) TIFFSeekFile ( tif , dircount16 * 20 , SEEK_CUR )
LEAF_NODE	1566:4	1566:4	13	(
TYPE_NAME	1566:5	1566:5	13	void
LEAF_NODE	1566:5	1566:5	14	void
LEAF_NODE	1566:9	1566:9	13	)
FUNCTION_CALL	1566:11	1567:31	13	TIFFSeekFile ( tif , dircount16 * 20 , SEEK_CUR )
CALLEE	1566:11	1566:11	14	TIFFSeekFile
LEAF_NODE	1566:11	1566:11	15	TIFFSeekFile
LEAF_NODE	1566:23	1566:23	14	(
ARGUMENT	1566:24	1566:24	14	tif
FIELD	1566:24	1566:24	15	tif
LEAF_NODE	1566:24	1566:24	16	tif
LEAF_NODE	1566:27	1566:27	14	,
ARGUMENT	1567:8	1567:19	14	dircount16 * 20
FIELD	1567:8	1567:8	15	dircount16
LEAF_NODE	1567:8	1567:8	16	dircount16
LEAF_NODE	1567:18	1567:18	15	*
FIELD	1567:19	1567:19	15	20
LEAF_NODE	1567:19	1567:19	16	20
LEAF_NODE	1567:21	1567:21	14	,
ARGUMENT	1567:23	1567:23	14	SEEK_CUR
FIELD	1567:23	1567:23	15	SEEK_CUR
LEAF_NODE	1567:23	1567:23	16	SEEK_CUR
LEAF_NODE	1567:31	1567:31	14	)
LEAF_NODE	1567:32	1567:32	12	;
SELECTION	1568:3	1568:47	9	
KEYWORD	1568:3	1568:3	10	if
LEAF_NODE	1568:3	1568:3	11	if
LEAF_NODE	1568:6	1568:6	10	(
CONDITION	1568:7	1568:7	10	! ReadOK ( tif , nextdir , sizeof ( uint64 ) )
EXPR	1568:7	1568:7	11	! ReadOK ( tif , nextdir , sizeof ( uint64 ) )
UNARY_EXPR	1568:7	1568:8	12	! ReadOK ( tif , nextdir , sizeof ( uint64 ) )
UNARY_OPERATOR	1568:7	1568:7	13	!
LEAF_NODE	1568:7	1568:7	14	!
FUNCTION_CALL	1568:8	1568:44	13	ReadOK ( tif , nextdir , sizeof ( uint64 ) )
CALLEE	1568:8	1568:8	14	ReadOK
LEAF_NODE	1568:8	1568:8	15	ReadOK
LEAF_NODE	1568:14	1568:14	14	(
ARGUMENT	1568:15	1568:15	14	tif
FIELD	1568:15	1568:15	15	tif
LEAF_NODE	1568:15	1568:15	16	tif
LEAF_NODE	1568:18	1568:18	14	,
ARGUMENT	1568:20	1568:20	14	nextdir
FIELD	1568:20	1568:20	15	nextdir
LEAF_NODE	1568:20	1568:20	16	nextdir
LEAF_NODE	1568:27	1568:27	14	,
ARGUMENT	1568:29	1568:29	14	sizeof ( uint64 )
FUNCTION_CALL	1568:29	1568:43	15	sizeof ( uint64 )
CALLEE	1568:29	1568:29	16	sizeof
LEAF_NODE	1568:29	1568:29	17	sizeof
LEAF_NODE	1568:36	1568:36	16	(
ARGUMENT	1568:37	1568:37	16	uint64
FIELD	1568:37	1568:37	17	uint64
LEAF_NODE	1568:37	1568:37	18	uint64
LEAF_NODE	1568:43	1568:43	16	)
LEAF_NODE	1568:44	1568:44	14	)
LEAF_NODE	1568:45	1568:45	10	)
STATEMENTS	1568:47	1573:3	10	
LEAF_NODE	1568:47	1568:47	11	{
STATEMENTS	1569:4	1572:4	11	
EXPR_STATEMENT	1569:4	1571:22	12	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory link" , tif -> tif_name ) ;
EXPR	1569:4	1569:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory link" , tif -> tif_name )
FUNCTION_CALL	1569:4	1571:21	14	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error fetching directory link" , tif -> tif_name )
CALLEE	1569:4	1569:4	15	TIFFErrorExt
LEAF_NODE	1569:4	1569:4	16	TIFFErrorExt
LEAF_NODE	1569:16	1569:16	15	(
ARGUMENT	1569:17	1569:17	15	tif -> tif_clientdata
FIELD	1569:17	1569:22	16	tif -> tif_clientdata
LEAF_NODE	1569:17	1569:17	17	tif
LEAF_NODE	1569:20	1569:20	17	->
LEAF_NODE	1569:22	1569:22	17	tif_clientdata
LEAF_NODE	1569:36	1569:36	15	,
ARGUMENT	1569:38	1569:38	15	module
FIELD	1569:38	1569:38	16	module
LEAF_NODE	1569:38	1569:38	17	module
LEAF_NODE	1569:44	1569:44	15	,
ARGUMENT	1570:45	1570:45	15	"%s: Error fetching directory link"
FIELD	1570:45	1570:45	16	"%s: Error fetching directory link"
LEAF_NODE	1570:45	1570:45	17	"%s: Error fetching directory link"
LEAF_NODE	1570:80	1570:80	15	,
ARGUMENT	1571:8	1571:8	15	tif -> tif_name
FIELD	1571:8	1571:13	16	tif -> tif_name
LEAF_NODE	1571:8	1571:8	17	tif
LEAF_NODE	1571:11	1571:11	17	->
LEAF_NODE	1571:13	1571:13	17	tif_name
LEAF_NODE	1571:21	1571:21	15	)
LEAF_NODE	1571:22	1571:22	13	;
JUMP_STATEMENT	1572:4	1572:14	12	return ( 0 ) ;
KEYWORD	1572:4	1572:4	13	return
LEAF_NODE	1572:4	1572:4	14	return
DESTINATION	1572:11	1572:11	13	( 0 )
EXPR	1572:11	1572:13	14	( 0 )
LEAF_NODE	1572:11	1572:11	15	(
FIELD	1572:12	1572:12	15	0
LEAF_NODE	1572:12	1572:12	16	0
LEAF_NODE	1572:13	1572:13	15	)
LEAF_NODE	1572:14	1572:14	13	;
LEAF_NODE	1573:3	1573:3	11	}
SELECTION	1574:3	1575:4	9	
KEYWORD	1574:3	1574:3	10	if
LEAF_NODE	1574:3	1574:3	11	if
LEAF_NODE	1574:6	1574:6	10	(
CONDITION	1574:7	1574:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	1574:7	1574:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	1574:7	1574:12	12	tif -> tif_flags
LEAF_NODE	1574:7	1574:7	13	tif
LEAF_NODE	1574:10	1574:10	13	->
LEAF_NODE	1574:12	1574:12	13	tif_flags
LEAF_NODE	1574:22	1574:22	12	&
FIELD	1574:24	1574:24	12	TIFF_SWAB
LEAF_NODE	1574:24	1574:24	13	TIFF_SWAB
LEAF_NODE	1574:33	1574:33	10	)
STATEMENTS	1575:4	1575:4	10	
EXPR_STATEMENT	1575:4	1575:26	11	TIFFSwabLong8 ( nextdir ) ;
EXPR	1575:4	1575:4	12	TIFFSwabLong8 ( nextdir )
FUNCTION_CALL	1575:4	1575:25	13	TIFFSwabLong8 ( nextdir )
CALLEE	1575:4	1575:4	14	TIFFSwabLong8
LEAF_NODE	1575:4	1575:4	15	TIFFSwabLong8
LEAF_NODE	1575:17	1575:17	14	(
ARGUMENT	1575:18	1575:18	14	nextdir
FIELD	1575:18	1575:18	15	nextdir
LEAF_NODE	1575:18	1575:18	16	nextdir
LEAF_NODE	1575:25	1575:25	14	)
LEAF_NODE	1575:26	1575:26	12	;
LEAF_NODE	1576:2	1576:2	8	}
JUMP_STATEMENT	1577:2	1577:12	6	return ( 1 ) ;
KEYWORD	1577:2	1577:2	7	return
LEAF_NODE	1577:2	1577:2	8	return
DESTINATION	1577:9	1577:9	7	( 1 )
EXPR	1577:9	1577:11	8	( 1 )
LEAF_NODE	1577:9	1577:9	9	(
FIELD	1577:10	1577:10	9	1
LEAF_NODE	1577:10	1577:10	10	1
LEAF_NODE	1577:11	1577:11	9	)
LEAF_NODE	1577:12	1577:12	7	;
LEAF_NODE	1578:1	1578:1	5	}
LEAF_NODE	1579:0	1579:0	2	}
FUNCTION_DEF	1584:0	1609:0	1	
RETURN_TYPE	1584:0	1584:0	2	uint16
TYPE_NAME	1584:0	1584:0	3	uint16
LEAF_NODE	1584:0	1584:0	4	uint16
FUNCTION_NAME	1585:0	1585:0	2	TIFFNumberOfDirectories
LEAF_NODE	1585:0	1585:0	3	TIFFNumberOfDirectories
PARAMETER_LIST	1585:23	1585:33	2	( TIFF * tif )
LEAF_NODE	1585:23	1585:23	3	(
PARAMETER_DECL	1585:24	1585:30	3	TIFF * tif
TYPE	1585:24	1585:28	4	TIFF *
TYPE_NAME	1585:24	1585:24	5	TIFF
LEAF_NODE	1585:24	1585:24	6	TIFF
POINTER	1585:28	1585:28	5	*
LEAF_NODE	1585:28	1585:28	6	*
NAME	1585:30	1585:30	4	tif
LEAF_NODE	1585:30	1585:30	5	tif
LEAF_NODE	1585:33	1585:33	3	)
LEAF_NODE	1586:0	1586:0	2	{
STATEMENTS	1587:1	1608:11	2	
LEAF_NODE	1587:1	1587:1	3	static
SIMPLE_DECL	1587:8	1587:55	3	const char [ ] module ; module = "TIFFNumberOfDirectories" ;
VAR_DECL	1587:8	1587:19	4	const char [ ] module ; module = "TIFFNumberOfDirectories"
TYPE	1587:8	1587:25	5	const char [ ]
TYPE_NAME	1587:8	1587:14	6	const char
LEAF_NODE	1587:8	1587:8	7	const
LEAF_NODE	1587:14	1587:14	7	char
TYPE_SUFFIX	1587:25	1587:26	6	[ ]
LEAF_NODE	1587:25	1587:25	7	[
LEAF_NODE	1587:26	1587:26	7	]
NAME	1587:19	1587:19	5	module
LEAF_NODE	1587:19	1587:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1587:19	1587:19	5	module = "TIFFNumberOfDirectories"
ASSIGN	1587:19	1587:30	6	module = "TIFFNumberOfDirectories"
LVAL	1587:19	1587:19	7	module
NAME	1587:19	1587:19	8	module
LEAF_NODE	1587:19	1587:19	9	module
ASSIGN_OP	1587:28	1587:28	7	=
LEAF_NODE	1587:28	1587:28	8	=
RVAL	1587:30	1587:30	7	"TIFFNumberOfDirectories"
FIELD	1587:30	1587:30	8	"TIFFNumberOfDirectories"
LEAF_NODE	1587:30	1587:30	9	"TIFFNumberOfDirectories"
LEAF_NODE	1587:55	1587:55	4	;
SIMPLE_DECL	1588:1	1588:15	3	uint64 nextdir ;
VAR_DECL	1588:1	1588:8	4	uint64 nextdir
TYPE	1588:1	1588:1	5	uint64
TYPE_NAME	1588:1	1588:1	6	uint64
LEAF_NODE	1588:1	1588:1	7	uint64
NAME	1588:8	1588:8	5	nextdir
LEAF_NODE	1588:8	1588:8	6	nextdir
LEAF_NODE	1588:15	1588:15	4	;
SIMPLE_DECL	1589:1	1589:9	3	uint16 n ;
VAR_DECL	1589:1	1589:8	4	uint16 n
TYPE	1589:1	1589:1	5	uint16
TYPE_NAME	1589:1	1589:1	6	uint16
LEAF_NODE	1589:1	1589:1	7	uint16
NAME	1589:8	1589:8	5	n
LEAF_NODE	1589:8	1589:8	6	n
LEAF_NODE	1589:9	1589:9	4	;
SELECTION	1590:1	1591:2	3	
KEYWORD	1590:1	1590:1	4	if
LEAF_NODE	1590:1	1590:1	5	if
LEAF_NODE	1590:4	1590:4	4	(
CONDITION	1590:5	1590:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	1590:5	1590:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	1590:5	1590:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	1590:5	1590:5	7	!
LEAF_NODE	1590:5	1590:5	8	!
LEAF_NODE	1590:6	1590:6	7	(
FIELD	1590:7	1590:12	7	tif -> tif_flags
LEAF_NODE	1590:7	1590:7	8	tif
LEAF_NODE	1590:10	1590:10	8	->
LEAF_NODE	1590:12	1590:12	8	tif_flags
LEAF_NODE	1590:21	1590:21	7	&
FIELD	1590:22	1590:22	7	TIFF_BIGTIFF
LEAF_NODE	1590:22	1590:22	8	TIFF_BIGTIFF
LEAF_NODE	1590:34	1590:34	7	)
LEAF_NODE	1590:35	1590:35	4	)
STATEMENTS	1591:2	1591:2	4	
EXPR_STATEMENT	1591:2	1591:47	5	nextdir = tif -> tif_header . classic . tiff_diroff ;
EXPR	1591:2	1591:2	6	nextdir = tif -> tif_header . classic . tiff_diroff
ASSIGN	1591:2	1591:12	7	nextdir = tif -> tif_header . classic . tiff_diroff
LVAL	1591:2	1591:2	8	nextdir
FIELD	1591:2	1591:2	9	nextdir
LEAF_NODE	1591:2	1591:2	10	nextdir
ASSIGN_OP	1591:10	1591:10	8	=
LEAF_NODE	1591:10	1591:10	9	=
RVAL	1591:12	1591:12	8	tif -> tif_header . classic . tiff_diroff
FIELD	1591:12	1591:36	9	tif -> tif_header . classic . tiff_diroff
LEAF_NODE	1591:12	1591:12	10	tif
LEAF_NODE	1591:15	1591:15	10	->
LEAF_NODE	1591:17	1591:17	10	tif_header
LEAF_NODE	1591:27	1591:27	10	.
LEAF_NODE	1591:28	1591:28	10	classic
LEAF_NODE	1591:35	1591:35	10	.
LEAF_NODE	1591:36	1591:36	10	tiff_diroff
LEAF_NODE	1591:47	1591:47	6	;
SELECTION	1592:1	1593:2	3	
KEYWORD	1592:1	1592:1	4	else
LEAF_NODE	1592:1	1592:1	5	else
STATEMENTS	1593:2	1593:2	4	
EXPR_STATEMENT	1593:2	1593:43	5	nextdir = tif -> tif_header . big . tiff_diroff ;
EXPR	1593:2	1593:2	6	nextdir = tif -> tif_header . big . tiff_diroff
ASSIGN	1593:2	1593:12	7	nextdir = tif -> tif_header . big . tiff_diroff
LVAL	1593:2	1593:2	8	nextdir
FIELD	1593:2	1593:2	9	nextdir
LEAF_NODE	1593:2	1593:2	10	nextdir
ASSIGN_OP	1593:10	1593:10	8	=
LEAF_NODE	1593:10	1593:10	9	=
RVAL	1593:12	1593:12	8	tif -> tif_header . big . tiff_diroff
FIELD	1593:12	1593:32	9	tif -> tif_header . big . tiff_diroff
LEAF_NODE	1593:12	1593:12	10	tif
LEAF_NODE	1593:15	1593:15	10	->
LEAF_NODE	1593:17	1593:17	10	tif_header
LEAF_NODE	1593:27	1593:27	10	.
LEAF_NODE	1593:28	1593:28	10	big
LEAF_NODE	1593:31	1593:31	10	.
LEAF_NODE	1593:32	1593:32	10	tiff_diroff
LEAF_NODE	1593:43	1593:43	6	;
EXPR_STATEMENT	1594:1	1594:6	3	n = 0 ;
EXPR	1594:1	1594:1	4	n = 0
ASSIGN	1594:1	1594:5	5	n = 0
LVAL	1594:1	1594:1	6	n
FIELD	1594:1	1594:1	7	n
LEAF_NODE	1594:1	1594:1	8	n
ASSIGN_OP	1594:3	1594:3	6	=
LEAF_NODE	1594:3	1594:3	7	=
RVAL	1594:5	1594:5	6	0
FIELD	1594:5	1594:5	7	0
LEAF_NODE	1594:5	1594:5	8	0
LEAF_NODE	1594:6	1594:6	4	;
ITERATION	1595:1	1596:8	3	
KEYWORD	1595:1	1595:1	4	while
LEAF_NODE	1595:1	1595:1	5	while
LEAF_NODE	1595:7	1595:7	4	(
CONDITION	1595:8	1595:8	4	nextdir != 0 && TIFFAdvanceDirectory ( tif , & nextdir , NULL )
EXPR	1595:8	1595:8	5	nextdir != 0 && TIFFAdvanceDirectory ( tif , & nextdir , NULL )
AND	1595:8	1595:24	6	nextdir != 0 && TIFFAdvanceDirectory ( tif , & nextdir , NULL )
EXPR	1595:8	1595:19	7	nextdir != 0
FIELD	1595:8	1595:8	8	nextdir
LEAF_NODE	1595:8	1595:8	9	nextdir
EQ_OPERATOR	1595:16	1595:16	8	!=
LEAF_NODE	1595:16	1595:16	9	!=
FIELD	1595:19	1595:19	8	0
LEAF_NODE	1595:19	1595:19	9	0
LEAF_NODE	1595:21	1595:21	7	&&
EXPR	1595:24	1595:24	7	TIFFAdvanceDirectory ( tif , & nextdir , NULL )
FUNCTION_CALL	1595:24	1595:64	8	TIFFAdvanceDirectory ( tif , & nextdir , NULL )
CALLEE	1595:24	1595:24	9	TIFFAdvanceDirectory
LEAF_NODE	1595:24	1595:24	10	TIFFAdvanceDirectory
LEAF_NODE	1595:44	1595:44	9	(
ARGUMENT	1595:45	1595:45	9	tif
FIELD	1595:45	1595:45	10	tif
LEAF_NODE	1595:45	1595:45	11	tif
LEAF_NODE	1595:48	1595:48	9	,
ARGUMENT	1595:50	1595:50	9	& nextdir
UNARY_EXPR	1595:50	1595:51	10	& nextdir
UNARY_OPERATOR	1595:50	1595:50	11	&
LEAF_NODE	1595:50	1595:50	12	&
FIELD	1595:51	1595:51	11	nextdir
LEAF_NODE	1595:51	1595:51	12	nextdir
LEAF_NODE	1595:58	1595:58	9	,
ARGUMENT	1595:60	1595:60	9	NULL
FIELD	1595:60	1595:60	10	NULL
LEAF_NODE	1595:60	1595:60	11	NULL
LEAF_NODE	1595:64	1595:64	9	)
LEAF_NODE	1595:65	1595:65	4	)
STATEMENTS	1596:8	1607:8	4	
LEAF_NODE	1596:8	1596:8	5	{
STATEMENTS	1597:16	1600:2	5	
SELECTION	1597:16	1597:32	6	
KEYWORD	1597:16	1597:16	7	if
LEAF_NODE	1597:16	1597:16	8	if
LEAF_NODE	1597:19	1597:19	7	(
CONDITION	1597:20	1597:20	7	n != 65535
EXPR	1597:20	1597:25	8	n != 65535
FIELD	1597:20	1597:20	9	n
LEAF_NODE	1597:20	1597:20	10	n
EQ_OPERATOR	1597:22	1597:22	9	!=
LEAF_NODE	1597:22	1597:22	10	!=
FIELD	1597:25	1597:25	9	65535
LEAF_NODE	1597:25	1597:25	10	65535
LEAF_NODE	1597:30	1597:30	7	)
STATEMENTS	1597:32	1599:16	7	
LEAF_NODE	1597:32	1597:32	8	{
STATEMENTS	1598:24	1598:24	8	
EXPR_STATEMENT	1598:24	1598:27	9	++ n ;
EXPR	1598:24	1598:26	10	++ n
LEAF_NODE	1598:24	1598:24	11	++
FIELD	1598:26	1598:26	11	n
LEAF_NODE	1598:26	1598:26	12	n
LEAF_NODE	1598:27	1598:27	10	;
LEAF_NODE	1599:16	1599:16	8	}
SELECTION	1600:2	1601:16	6	
KEYWORD	1600:2	1600:2	7	else
LEAF_NODE	1600:2	1600:2	8	else
STATEMENTS	1601:16	1606:16	7	
LEAF_NODE	1601:16	1601:16	8	{
STATEMENTS	1602:24	1605:24	8	
LEAF_NODE	1602:24	1602:24	9	TIFFErrorExt
LEAF_NODE	1602:36	1602:36	9	(
LEAF_NODE	1602:37	1602:37	9	tif
LEAF_NODE	1602:40	1602:40	9	->
LEAF_NODE	1602:42	1602:42	9	tif_clientdata
LEAF_NODE	1602:56	1602:56	9	,
LEAF_NODE	1602:58	1602:58	9	module
LEAF_NODE	1602:64	1602:64	9	,
LEAF_NODE	1603:37	1603:37	9	"Directory count exceeded 65535 limit,"
LEAF_NODE	1604:37	1604:37	9	" giving up on counting."
LEAF_NODE	1604:62	1604:62	9	)
LEAF_NODE	1604:63	1604:63	9	;
JUMP_STATEMENT	1605:24	1605:38	9	return ( 65535 ) ;
KEYWORD	1605:24	1605:24	10	return
LEAF_NODE	1605:24	1605:24	11	return
DESTINATION	1605:31	1605:31	10	( 65535 )
EXPR	1605:31	1605:37	11	( 65535 )
LEAF_NODE	1605:31	1605:31	12	(
FIELD	1605:32	1605:32	12	65535
LEAF_NODE	1605:32	1605:32	13	65535
LEAF_NODE	1605:37	1605:37	12	)
LEAF_NODE	1605:38	1605:38	10	;
LEAF_NODE	1606:16	1606:16	8	}
LEAF_NODE	1607:8	1607:8	5	}
LEAF_NODE	1608:1	1608:1	3	return
LEAF_NODE	1608:8	1608:8	3	(
LEAF_NODE	1608:9	1608:9	3	n
LEAF_NODE	1608:10	1608:10	3	)
LEAF_NODE	1608:11	1608:11	3	;
LEAF_NODE	1609:0	1609:0	2	}
FUNCTION_DEF	1615:0	1641:0	1	
RETURN_TYPE	1615:0	1615:0	2	int
TYPE_NAME	1615:0	1615:0	3	int
LEAF_NODE	1615:0	1615:0	4	int
FUNCTION_NAME	1616:0	1616:0	2	TIFFSetDirectory
LEAF_NODE	1616:0	1616:0	3	TIFFSetDirectory
PARAMETER_LIST	1616:16	1616:39	2	( TIFF * tif , uint16 dirn )
LEAF_NODE	1616:16	1616:16	3	(
PARAMETER_DECL	1616:17	1616:23	3	TIFF * tif
TYPE	1616:17	1616:21	4	TIFF *
TYPE_NAME	1616:17	1616:17	5	TIFF
LEAF_NODE	1616:17	1616:17	6	TIFF
POINTER	1616:21	1616:21	5	*
LEAF_NODE	1616:21	1616:21	6	*
NAME	1616:23	1616:23	4	tif
LEAF_NODE	1616:23	1616:23	5	tif
LEAF_NODE	1616:26	1616:26	3	,
PARAMETER_DECL	1616:28	1616:35	3	uint16 dirn
TYPE	1616:28	1616:28	4	uint16
TYPE_NAME	1616:28	1616:28	5	uint16
LEAF_NODE	1616:28	1616:28	6	uint16
NAME	1616:35	1616:35	4	dirn
LEAF_NODE	1616:35	1616:35	5	dirn
LEAF_NODE	1616:39	1616:39	3	)
LEAF_NODE	1617:0	1617:0	2	{
STATEMENTS	1618:1	1640:1	2	
SIMPLE_DECL	1618:1	1618:15	3	uint64 nextdir ;
VAR_DECL	1618:1	1618:8	4	uint64 nextdir
TYPE	1618:1	1618:1	5	uint64
TYPE_NAME	1618:1	1618:1	6	uint64
LEAF_NODE	1618:1	1618:1	7	uint64
NAME	1618:8	1618:8	5	nextdir
LEAF_NODE	1618:8	1618:8	6	nextdir
LEAF_NODE	1618:15	1618:15	4	;
SIMPLE_DECL	1619:1	1619:9	3	uint16 n ;
VAR_DECL	1619:1	1619:8	4	uint16 n
TYPE	1619:1	1619:1	5	uint16
TYPE_NAME	1619:1	1619:1	6	uint16
LEAF_NODE	1619:1	1619:1	7	uint16
NAME	1619:8	1619:8	5	n
LEAF_NODE	1619:8	1619:8	6	n
LEAF_NODE	1619:9	1619:9	4	;
SELECTION	1621:1	1622:2	3	
KEYWORD	1621:1	1621:1	4	if
LEAF_NODE	1621:1	1621:1	5	if
LEAF_NODE	1621:4	1621:4	4	(
CONDITION	1621:5	1621:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	1621:5	1621:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	1621:5	1621:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	1621:5	1621:5	7	!
LEAF_NODE	1621:5	1621:5	8	!
LEAF_NODE	1621:6	1621:6	7	(
FIELD	1621:7	1621:12	7	tif -> tif_flags
LEAF_NODE	1621:7	1621:7	8	tif
LEAF_NODE	1621:10	1621:10	8	->
LEAF_NODE	1621:12	1621:12	8	tif_flags
LEAF_NODE	1621:21	1621:21	7	&
FIELD	1621:22	1621:22	7	TIFF_BIGTIFF
LEAF_NODE	1621:22	1621:22	8	TIFF_BIGTIFF
LEAF_NODE	1621:34	1621:34	7	)
LEAF_NODE	1621:35	1621:35	4	)
STATEMENTS	1622:2	1622:2	4	
EXPR_STATEMENT	1622:2	1622:47	5	nextdir = tif -> tif_header . classic . tiff_diroff ;
EXPR	1622:2	1622:2	6	nextdir = tif -> tif_header . classic . tiff_diroff
ASSIGN	1622:2	1622:12	7	nextdir = tif -> tif_header . classic . tiff_diroff
LVAL	1622:2	1622:2	8	nextdir
FIELD	1622:2	1622:2	9	nextdir
LEAF_NODE	1622:2	1622:2	10	nextdir
ASSIGN_OP	1622:10	1622:10	8	=
LEAF_NODE	1622:10	1622:10	9	=
RVAL	1622:12	1622:12	8	tif -> tif_header . classic . tiff_diroff
FIELD	1622:12	1622:36	9	tif -> tif_header . classic . tiff_diroff
LEAF_NODE	1622:12	1622:12	10	tif
LEAF_NODE	1622:15	1622:15	10	->
LEAF_NODE	1622:17	1622:17	10	tif_header
LEAF_NODE	1622:27	1622:27	10	.
LEAF_NODE	1622:28	1622:28	10	classic
LEAF_NODE	1622:35	1622:35	10	.
LEAF_NODE	1622:36	1622:36	10	tiff_diroff
LEAF_NODE	1622:47	1622:47	6	;
SELECTION	1623:1	1624:2	3	
KEYWORD	1623:1	1623:1	4	else
LEAF_NODE	1623:1	1623:1	5	else
STATEMENTS	1624:2	1624:2	4	
EXPR_STATEMENT	1624:2	1624:43	5	nextdir = tif -> tif_header . big . tiff_diroff ;
EXPR	1624:2	1624:2	6	nextdir = tif -> tif_header . big . tiff_diroff
ASSIGN	1624:2	1624:12	7	nextdir = tif -> tif_header . big . tiff_diroff
LVAL	1624:2	1624:2	8	nextdir
FIELD	1624:2	1624:2	9	nextdir
LEAF_NODE	1624:2	1624:2	10	nextdir
ASSIGN_OP	1624:10	1624:10	8	=
LEAF_NODE	1624:10	1624:10	9	=
RVAL	1624:12	1624:12	8	tif -> tif_header . big . tiff_diroff
FIELD	1624:12	1624:32	9	tif -> tif_header . big . tiff_diroff
LEAF_NODE	1624:12	1624:12	10	tif
LEAF_NODE	1624:15	1624:15	10	->
LEAF_NODE	1624:17	1624:17	10	tif_header
LEAF_NODE	1624:27	1624:27	10	.
LEAF_NODE	1624:28	1624:28	10	big
LEAF_NODE	1624:31	1624:31	10	.
LEAF_NODE	1624:32	1624:32	10	tiff_diroff
LEAF_NODE	1624:43	1624:43	6	;
ITERATION	1625:1	1626:2	3	
KEYWORD	1625:1	1625:1	4	for
LEAF_NODE	1625:1	1625:1	5	for
LEAF_NODE	1625:5	1625:5	4	(
FOR_INIT	1625:6	1625:14	4	n = dirn ;
EXPR	1625:6	1625:6	5	n = dirn
ASSIGN	1625:6	1625:10	6	n = dirn
LVAL	1625:6	1625:6	7	n
FIELD	1625:6	1625:6	8	n
LEAF_NODE	1625:6	1625:6	9	n
ASSIGN_OP	1625:8	1625:8	7	=
LEAF_NODE	1625:8	1625:8	8	=
RVAL	1625:10	1625:10	7	dirn
FIELD	1625:10	1625:10	8	dirn
LEAF_NODE	1625:10	1625:10	9	dirn
LEAF_NODE	1625:14	1625:14	5	;
CONDITION	1625:16	1625:16	4	n > 0 && nextdir != 0
EXPR	1625:16	1625:16	5	n > 0 && nextdir != 0
AND	1625:16	1625:25	6	n > 0 && nextdir != 0
EXPR	1625:16	1625:20	7	n > 0
FIELD	1625:16	1625:16	8	n
LEAF_NODE	1625:16	1625:16	9	n
REL_OPERATOR	1625:18	1625:18	8	>
LEAF_NODE	1625:18	1625:18	9	>
FIELD	1625:20	1625:20	8	0
LEAF_NODE	1625:20	1625:20	9	0
LEAF_NODE	1625:22	1625:22	7	&&
EXPR	1625:25	1625:36	7	nextdir != 0
FIELD	1625:25	1625:25	8	nextdir
LEAF_NODE	1625:25	1625:25	9	nextdir
EQ_OPERATOR	1625:33	1625:33	8	!=
LEAF_NODE	1625:33	1625:33	9	!=
FIELD	1625:36	1625:36	8	0
LEAF_NODE	1625:36	1625:36	9	0
LEAF_NODE	1625:37	1625:37	4	;
FOR_EXPR	1625:39	1625:39	4	n --
EXPR	1625:39	1625:39	5	n --
FIELD	1625:39	1625:40	6	n --
LEAF_NODE	1625:39	1625:39	7	n
LEAF_NODE	1625:40	1625:40	7	--
LEAF_NODE	1625:42	1625:42	4	)
STATEMENTS	1626:2	1626:2	4	
SELECTION	1626:2	1627:3	5	
KEYWORD	1626:2	1626:2	6	if
LEAF_NODE	1626:2	1626:2	7	if
LEAF_NODE	1626:5	1626:5	6	(
CONDITION	1626:6	1626:6	6	! TIFFAdvanceDirectory ( tif , & nextdir , NULL )
EXPR	1626:6	1626:6	7	! TIFFAdvanceDirectory ( tif , & nextdir , NULL )
UNARY_EXPR	1626:6	1626:7	8	! TIFFAdvanceDirectory ( tif , & nextdir , NULL )
UNARY_OPERATOR	1626:6	1626:6	9	!
LEAF_NODE	1626:6	1626:6	10	!
FUNCTION_CALL	1626:7	1626:47	9	TIFFAdvanceDirectory ( tif , & nextdir , NULL )
CALLEE	1626:7	1626:7	10	TIFFAdvanceDirectory
LEAF_NODE	1626:7	1626:7	11	TIFFAdvanceDirectory
LEAF_NODE	1626:27	1626:27	10	(
ARGUMENT	1626:28	1626:28	10	tif
FIELD	1626:28	1626:28	11	tif
LEAF_NODE	1626:28	1626:28	12	tif
LEAF_NODE	1626:31	1626:31	10	,
ARGUMENT	1626:33	1626:33	10	& nextdir
UNARY_EXPR	1626:33	1626:34	11	& nextdir
UNARY_OPERATOR	1626:33	1626:33	12	&
LEAF_NODE	1626:33	1626:33	13	&
FIELD	1626:34	1626:34	12	nextdir
LEAF_NODE	1626:34	1626:34	13	nextdir
LEAF_NODE	1626:41	1626:41	10	,
ARGUMENT	1626:43	1626:43	10	NULL
FIELD	1626:43	1626:43	11	NULL
LEAF_NODE	1626:43	1626:43	12	NULL
LEAF_NODE	1626:47	1626:47	10	)
LEAF_NODE	1626:48	1626:48	6	)
STATEMENTS	1627:3	1627:3	6	
JUMP_STATEMENT	1627:3	1627:13	7	return ( 0 ) ;
KEYWORD	1627:3	1627:3	8	return
LEAF_NODE	1627:3	1627:3	9	return
DESTINATION	1627:10	1627:10	8	( 0 )
EXPR	1627:10	1627:12	9	( 0 )
LEAF_NODE	1627:10	1627:10	10	(
FIELD	1627:11	1627:11	10	0
LEAF_NODE	1627:11	1627:11	11	0
LEAF_NODE	1627:12	1627:12	10	)
LEAF_NODE	1627:13	1627:13	8	;
EXPR_STATEMENT	1628:1	1628:30	3	tif -> tif_nextdiroff = nextdir ;
EXPR	1628:1	1628:1	4	tif -> tif_nextdiroff = nextdir
ASSIGN	1628:1	1628:23	5	tif -> tif_nextdiroff = nextdir
LVAL	1628:1	1628:1	6	tif -> tif_nextdiroff
FIELD	1628:1	1628:6	7	tif -> tif_nextdiroff
LEAF_NODE	1628:1	1628:1	8	tif
LEAF_NODE	1628:4	1628:4	8	->
LEAF_NODE	1628:6	1628:6	8	tif_nextdiroff
ASSIGN_OP	1628:21	1628:21	6	=
LEAF_NODE	1628:21	1628:21	7	=
RVAL	1628:23	1628:23	6	nextdir
FIELD	1628:23	1628:23	7	nextdir
LEAF_NODE	1628:23	1628:23	8	nextdir
LEAF_NODE	1628:30	1628:30	4	;
EXPR_STATEMENT	1634:1	1634:33	3	tif -> tif_curdir = ( dirn - n ) - 1 ;
EXPR	1634:1	1634:1	4	tif -> tif_curdir = ( dirn - n ) - 1
ASSIGN	1634:1	1634:19	5	tif -> tif_curdir = ( dirn - n ) - 1
LVAL	1634:1	1634:1	6	tif -> tif_curdir
FIELD	1634:1	1634:6	7	tif -> tif_curdir
LEAF_NODE	1634:1	1634:1	8	tif
LEAF_NODE	1634:4	1634:4	8	->
LEAF_NODE	1634:6	1634:6	8	tif_curdir
ASSIGN_OP	1634:17	1634:17	6	=
LEAF_NODE	1634:17	1634:17	7	=
RVAL	1634:19	1634:32	6	( dirn - n ) - 1
LEAF_NODE	1634:19	1634:19	7	(
FIELD	1634:20	1634:20	7	dirn
LEAF_NODE	1634:20	1634:20	8	dirn
LEAF_NODE	1634:25	1634:25	7	-
FIELD	1634:27	1634:27	7	n
LEAF_NODE	1634:27	1634:27	8	n
LEAF_NODE	1634:28	1634:28	7	)
LEAF_NODE	1634:30	1634:30	7	-
FIELD	1634:32	1634:32	7	1
LEAF_NODE	1634:32	1634:32	8	1
LEAF_NODE	1634:33	1634:33	4	;
EXPR_STATEMENT	1639:1	1639:23	3	tif -> tif_dirnumber = 0 ;
EXPR	1639:1	1639:1	4	tif -> tif_dirnumber = 0
ASSIGN	1639:1	1639:22	5	tif -> tif_dirnumber = 0
LVAL	1639:1	1639:1	6	tif -> tif_dirnumber
FIELD	1639:1	1639:6	7	tif -> tif_dirnumber
LEAF_NODE	1639:1	1639:1	8	tif
LEAF_NODE	1639:4	1639:4	8	->
LEAF_NODE	1639:6	1639:6	8	tif_dirnumber
ASSIGN_OP	1639:20	1639:20	6	=
LEAF_NODE	1639:20	1639:20	7	=
RVAL	1639:22	1639:22	6	0
FIELD	1639:22	1639:22	7	0
LEAF_NODE	1639:22	1639:22	8	0
LEAF_NODE	1639:23	1639:23	4	;
JUMP_STATEMENT	1640:1	1640:32	3	return ( TIFFReadDirectory ( tif ) ) ;
KEYWORD	1640:1	1640:1	4	return
LEAF_NODE	1640:1	1640:1	5	return
DESTINATION	1640:8	1640:8	4	( TIFFReadDirectory ( tif ) )
EXPR	1640:8	1640:31	5	( TIFFReadDirectory ( tif ) )
LEAF_NODE	1640:8	1640:8	6	(
FUNCTION_CALL	1640:9	1640:30	6	TIFFReadDirectory ( tif )
CALLEE	1640:9	1640:9	7	TIFFReadDirectory
LEAF_NODE	1640:9	1640:9	8	TIFFReadDirectory
LEAF_NODE	1640:26	1640:26	7	(
ARGUMENT	1640:27	1640:27	7	tif
FIELD	1640:27	1640:27	8	tif
LEAF_NODE	1640:27	1640:27	9	tif
LEAF_NODE	1640:30	1640:30	7	)
LEAF_NODE	1640:31	1640:31	6	)
LEAF_NODE	1640:32	1640:32	4	;
LEAF_NODE	1641:0	1641:0	2	}
FUNCTION_DEF	1649:0	1659:0	1	
RETURN_TYPE	1649:0	1649:0	2	int
TYPE_NAME	1649:0	1649:0	3	int
LEAF_NODE	1649:0	1649:0	4	int
FUNCTION_NAME	1650:0	1650:0	2	TIFFSetSubDirectory
LEAF_NODE	1650:0	1650:0	3	TIFFSetSubDirectory
PARAMETER_LIST	1650:19	1650:44	2	( TIFF * tif , uint64 diroff )
LEAF_NODE	1650:19	1650:19	3	(
PARAMETER_DECL	1650:20	1650:26	3	TIFF * tif
TYPE	1650:20	1650:24	4	TIFF *
TYPE_NAME	1650:20	1650:20	5	TIFF
LEAF_NODE	1650:20	1650:20	6	TIFF
POINTER	1650:24	1650:24	5	*
LEAF_NODE	1650:24	1650:24	6	*
NAME	1650:26	1650:26	4	tif
LEAF_NODE	1650:26	1650:26	5	tif
LEAF_NODE	1650:29	1650:29	3	,
PARAMETER_DECL	1650:31	1650:38	3	uint64 diroff
TYPE	1650:31	1650:31	4	uint64
TYPE_NAME	1650:31	1650:31	5	uint64
LEAF_NODE	1650:31	1650:31	6	uint64
NAME	1650:38	1650:38	4	diroff
LEAF_NODE	1650:38	1650:38	5	diroff
LEAF_NODE	1650:44	1650:44	3	)
LEAF_NODE	1651:0	1651:0	2	{
STATEMENTS	1652:1	1658:1	2	
EXPR_STATEMENT	1652:1	1652:29	3	tif -> tif_nextdiroff = diroff ;
EXPR	1652:1	1652:1	4	tif -> tif_nextdiroff = diroff
ASSIGN	1652:1	1652:23	5	tif -> tif_nextdiroff = diroff
LVAL	1652:1	1652:1	6	tif -> tif_nextdiroff
FIELD	1652:1	1652:6	7	tif -> tif_nextdiroff
LEAF_NODE	1652:1	1652:1	8	tif
LEAF_NODE	1652:4	1652:4	8	->
LEAF_NODE	1652:6	1652:6	8	tif_nextdiroff
ASSIGN_OP	1652:21	1652:21	6	=
LEAF_NODE	1652:21	1652:21	7	=
RVAL	1652:23	1652:23	6	diroff
FIELD	1652:23	1652:23	7	diroff
LEAF_NODE	1652:23	1652:23	8	diroff
LEAF_NODE	1652:29	1652:29	4	;
EXPR_STATEMENT	1657:1	1657:23	3	tif -> tif_dirnumber = 0 ;
EXPR	1657:1	1657:1	4	tif -> tif_dirnumber = 0
ASSIGN	1657:1	1657:22	5	tif -> tif_dirnumber = 0
LVAL	1657:1	1657:1	6	tif -> tif_dirnumber
FIELD	1657:1	1657:6	7	tif -> tif_dirnumber
LEAF_NODE	1657:1	1657:1	8	tif
LEAF_NODE	1657:4	1657:4	8	->
LEAF_NODE	1657:6	1657:6	8	tif_dirnumber
ASSIGN_OP	1657:20	1657:20	6	=
LEAF_NODE	1657:20	1657:20	7	=
RVAL	1657:22	1657:22	6	0
FIELD	1657:22	1657:22	7	0
LEAF_NODE	1657:22	1657:22	8	0
LEAF_NODE	1657:23	1657:23	4	;
JUMP_STATEMENT	1658:1	1658:32	3	return ( TIFFReadDirectory ( tif ) ) ;
KEYWORD	1658:1	1658:1	4	return
LEAF_NODE	1658:1	1658:1	5	return
DESTINATION	1658:8	1658:8	4	( TIFFReadDirectory ( tif ) )
EXPR	1658:8	1658:31	5	( TIFFReadDirectory ( tif ) )
LEAF_NODE	1658:8	1658:8	6	(
FUNCTION_CALL	1658:9	1658:30	6	TIFFReadDirectory ( tif )
CALLEE	1658:9	1658:9	7	TIFFReadDirectory
LEAF_NODE	1658:9	1658:9	8	TIFFReadDirectory
LEAF_NODE	1658:26	1658:26	7	(
ARGUMENT	1658:27	1658:27	7	tif
FIELD	1658:27	1658:27	8	tif
LEAF_NODE	1658:27	1658:27	9	tif
LEAF_NODE	1658:30	1658:30	7	)
LEAF_NODE	1658:31	1658:31	6	)
LEAF_NODE	1658:32	1658:32	4	;
LEAF_NODE	1659:0	1659:0	2	}
FUNCTION_DEF	1664:0	1668:0	1	
RETURN_TYPE	1664:0	1664:0	2	uint64
TYPE_NAME	1664:0	1664:0	3	uint64
LEAF_NODE	1664:0	1664:0	4	uint64
FUNCTION_NAME	1665:0	1665:0	2	TIFFCurrentDirOffset
LEAF_NODE	1665:0	1665:0	3	TIFFCurrentDirOffset
PARAMETER_LIST	1665:20	1665:30	2	( TIFF * tif )
LEAF_NODE	1665:20	1665:20	3	(
PARAMETER_DECL	1665:21	1665:27	3	TIFF * tif
TYPE	1665:21	1665:25	4	TIFF *
TYPE_NAME	1665:21	1665:21	5	TIFF
LEAF_NODE	1665:21	1665:21	6	TIFF
POINTER	1665:25	1665:25	5	*
LEAF_NODE	1665:25	1665:25	6	*
NAME	1665:27	1665:27	4	tif
LEAF_NODE	1665:27	1665:27	5	tif
LEAF_NODE	1665:30	1665:30	3	)
LEAF_NODE	1666:0	1666:0	2	{
STATEMENTS	1667:1	1667:1	2	
JUMP_STATEMENT	1667:1	1667:25	3	return ( tif -> tif_diroff ) ;
KEYWORD	1667:1	1667:1	4	return
LEAF_NODE	1667:1	1667:1	5	return
DESTINATION	1667:8	1667:8	4	( tif -> tif_diroff )
EXPR	1667:8	1667:24	5	( tif -> tif_diroff )
LEAF_NODE	1667:8	1667:8	6	(
FIELD	1667:9	1667:14	6	tif -> tif_diroff
LEAF_NODE	1667:9	1667:9	7	tif
LEAF_NODE	1667:12	1667:12	7	->
LEAF_NODE	1667:14	1667:14	7	tif_diroff
LEAF_NODE	1667:24	1667:24	6	)
LEAF_NODE	1667:25	1667:25	4	;
LEAF_NODE	1668:0	1668:0	2	}
FUNCTION_DEF	1674:0	1678:0	1	
RETURN_TYPE	1674:0	1674:0	2	int
TYPE_NAME	1674:0	1674:0	3	int
LEAF_NODE	1674:0	1674:0	4	int
FUNCTION_NAME	1675:0	1675:0	2	TIFFLastDirectory
LEAF_NODE	1675:0	1675:0	3	TIFFLastDirectory
PARAMETER_LIST	1675:17	1675:27	2	( TIFF * tif )
LEAF_NODE	1675:17	1675:17	3	(
PARAMETER_DECL	1675:18	1675:24	3	TIFF * tif
TYPE	1675:18	1675:22	4	TIFF *
TYPE_NAME	1675:18	1675:18	5	TIFF
LEAF_NODE	1675:18	1675:18	6	TIFF
POINTER	1675:22	1675:22	5	*
LEAF_NODE	1675:22	1675:22	6	*
NAME	1675:24	1675:24	4	tif
LEAF_NODE	1675:24	1675:24	5	tif
LEAF_NODE	1675:27	1675:27	3	)
LEAF_NODE	1676:0	1676:0	2	{
STATEMENTS	1677:1	1677:1	2	
JUMP_STATEMENT	1677:1	1677:34	3	return ( tif -> tif_nextdiroff == 0 ) ;
KEYWORD	1677:1	1677:1	4	return
LEAF_NODE	1677:1	1677:1	5	return
DESTINATION	1677:8	1677:8	4	( tif -> tif_nextdiroff == 0 )
EXPR	1677:8	1677:33	5	( tif -> tif_nextdiroff == 0 )
LEAF_NODE	1677:8	1677:8	6	(
FIELD	1677:9	1677:14	6	tif -> tif_nextdiroff
LEAF_NODE	1677:9	1677:9	7	tif
LEAF_NODE	1677:12	1677:12	7	->
LEAF_NODE	1677:14	1677:14	7	tif_nextdiroff
EQ_OPERATOR	1677:29	1677:29	6	==
LEAF_NODE	1677:29	1677:29	7	==
FIELD	1677:32	1677:32	6	0
LEAF_NODE	1677:32	1677:32	7	0
LEAF_NODE	1677:33	1677:33	6	)
LEAF_NODE	1677:34	1677:34	4	;
LEAF_NODE	1678:0	1678:0	2	}
FUNCTION_DEF	1683:0	1776:0	1	
RETURN_TYPE	1683:0	1683:0	2	int
TYPE_NAME	1683:0	1683:0	3	int
LEAF_NODE	1683:0	1683:0	4	int
FUNCTION_NAME	1684:0	1684:0	2	TIFFUnlinkDirectory
LEAF_NODE	1684:0	1684:0	3	TIFFUnlinkDirectory
PARAMETER_LIST	1684:19	1684:42	2	( TIFF * tif , uint16 dirn )
LEAF_NODE	1684:19	1684:19	3	(
PARAMETER_DECL	1684:20	1684:26	3	TIFF * tif
TYPE	1684:20	1684:24	4	TIFF *
TYPE_NAME	1684:20	1684:20	5	TIFF
LEAF_NODE	1684:20	1684:20	6	TIFF
POINTER	1684:24	1684:24	5	*
LEAF_NODE	1684:24	1684:24	6	*
NAME	1684:26	1684:26	4	tif
LEAF_NODE	1684:26	1684:26	5	tif
LEAF_NODE	1684:29	1684:29	3	,
PARAMETER_DECL	1684:31	1684:38	3	uint16 dirn
TYPE	1684:31	1684:31	4	uint16
TYPE_NAME	1684:31	1684:31	5	uint16
LEAF_NODE	1684:31	1684:31	6	uint16
NAME	1684:38	1684:38	4	dirn
LEAF_NODE	1684:38	1684:38	5	dirn
LEAF_NODE	1684:42	1684:42	3	)
LEAF_NODE	1685:0	1685:0	2	{
STATEMENTS	1686:1	1775:1	2	
LEAF_NODE	1686:1	1686:1	3	static
SIMPLE_DECL	1686:8	1686:51	3	const char [ ] module ; module = "TIFFUnlinkDirectory" ;
VAR_DECL	1686:8	1686:19	4	const char [ ] module ; module = "TIFFUnlinkDirectory"
TYPE	1686:8	1686:25	5	const char [ ]
TYPE_NAME	1686:8	1686:14	6	const char
LEAF_NODE	1686:8	1686:8	7	const
LEAF_NODE	1686:14	1686:14	7	char
TYPE_SUFFIX	1686:25	1686:26	6	[ ]
LEAF_NODE	1686:25	1686:25	7	[
LEAF_NODE	1686:26	1686:26	7	]
NAME	1686:19	1686:19	5	module
LEAF_NODE	1686:19	1686:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1686:19	1686:19	5	module = "TIFFUnlinkDirectory"
ASSIGN	1686:19	1686:30	6	module = "TIFFUnlinkDirectory"
LVAL	1686:19	1686:19	7	module
NAME	1686:19	1686:19	8	module
LEAF_NODE	1686:19	1686:19	9	module
ASSIGN_OP	1686:28	1686:28	7	=
LEAF_NODE	1686:28	1686:28	8	=
RVAL	1686:30	1686:30	7	"TIFFUnlinkDirectory"
FIELD	1686:30	1686:30	8	"TIFFUnlinkDirectory"
LEAF_NODE	1686:30	1686:30	9	"TIFFUnlinkDirectory"
LEAF_NODE	1686:51	1686:51	4	;
SIMPLE_DECL	1687:1	1687:15	3	uint64 nextdir ;
VAR_DECL	1687:1	1687:8	4	uint64 nextdir
TYPE	1687:1	1687:1	5	uint64
TYPE_NAME	1687:1	1687:1	6	uint64
LEAF_NODE	1687:1	1687:1	7	uint64
NAME	1687:8	1687:8	5	nextdir
LEAF_NODE	1687:8	1687:8	6	nextdir
LEAF_NODE	1687:15	1687:15	4	;
SIMPLE_DECL	1688:1	1688:11	3	uint64 off ;
VAR_DECL	1688:1	1688:8	4	uint64 off
TYPE	1688:1	1688:1	5	uint64
TYPE_NAME	1688:1	1688:1	6	uint64
LEAF_NODE	1688:1	1688:1	7	uint64
NAME	1688:8	1688:8	5	off
LEAF_NODE	1688:8	1688:8	6	off
LEAF_NODE	1688:11	1688:11	4	;
SIMPLE_DECL	1689:1	1689:9	3	uint16 n ;
VAR_DECL	1689:1	1689:8	4	uint16 n
TYPE	1689:1	1689:1	5	uint16
TYPE_NAME	1689:1	1689:1	6	uint16
LEAF_NODE	1689:1	1689:1	7	uint16
NAME	1689:8	1689:8	5	n
LEAF_NODE	1689:8	1689:8	6	n
LEAF_NODE	1689:9	1689:9	4	;
SELECTION	1691:1	1691:32	3	
KEYWORD	1691:1	1691:1	4	if
LEAF_NODE	1691:1	1691:1	5	if
LEAF_NODE	1691:4	1691:4	4	(
CONDITION	1691:5	1691:5	4	tif -> tif_mode == O_RDONLY
EXPR	1691:5	1691:22	5	tif -> tif_mode == O_RDONLY
FIELD	1691:5	1691:10	6	tif -> tif_mode
LEAF_NODE	1691:5	1691:5	7	tif
LEAF_NODE	1691:8	1691:8	7	->
LEAF_NODE	1691:10	1691:10	7	tif_mode
EQ_OPERATOR	1691:19	1691:19	6	==
LEAF_NODE	1691:19	1691:19	7	==
FIELD	1691:22	1691:22	6	O_RDONLY
LEAF_NODE	1691:22	1691:22	7	O_RDONLY
LEAF_NODE	1691:30	1691:30	4	)
STATEMENTS	1691:32	1695:1	4	
LEAF_NODE	1691:32	1691:32	5	{
STATEMENTS	1692:2	1694:2	5	
EXPR_STATEMENT	1692:2	1693:74	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not unlink directory in read-only file" ) ;
EXPR	1692:2	1692:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not unlink directory in read-only file" )
FUNCTION_CALL	1692:2	1693:73	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not unlink directory in read-only file" )
CALLEE	1692:2	1692:2	9	TIFFErrorExt
LEAF_NODE	1692:2	1692:2	10	TIFFErrorExt
LEAF_NODE	1692:14	1692:14	9	(
ARGUMENT	1692:15	1692:15	9	tif -> tif_clientdata
FIELD	1692:15	1692:20	10	tif -> tif_clientdata
LEAF_NODE	1692:15	1692:15	11	tif
LEAF_NODE	1692:18	1692:18	11	->
LEAF_NODE	1692:20	1692:20	11	tif_clientdata
LEAF_NODE	1692:34	1692:34	9	,
ARGUMENT	1692:36	1692:36	9	module
FIELD	1692:36	1692:36	10	module
LEAF_NODE	1692:36	1692:36	11	module
LEAF_NODE	1692:42	1692:42	9	,
ARGUMENT	1693:29	1693:29	9	"Can not unlink directory in read-only file"
FIELD	1693:29	1693:29	10	"Can not unlink directory in read-only file"
LEAF_NODE	1693:29	1693:29	11	"Can not unlink directory in read-only file"
LEAF_NODE	1693:73	1693:73	9	)
LEAF_NODE	1693:74	1693:74	7	;
JUMP_STATEMENT	1694:2	1694:12	6	return ( 0 ) ;
KEYWORD	1694:2	1694:2	7	return
LEAF_NODE	1694:2	1694:2	8	return
DESTINATION	1694:9	1694:9	7	( 0 )
EXPR	1694:9	1694:11	8	( 0 )
LEAF_NODE	1694:9	1694:9	9	(
FIELD	1694:10	1694:10	9	0
LEAF_NODE	1694:10	1694:10	10	0
LEAF_NODE	1694:11	1694:11	9	)
LEAF_NODE	1694:12	1694:12	7	;
LEAF_NODE	1695:1	1695:1	5	}
SELECTION	1701:1	1702:1	3	
KEYWORD	1701:1	1701:1	4	if
LEAF_NODE	1701:1	1701:1	5	if
LEAF_NODE	1701:4	1701:4	4	(
CONDITION	1701:5	1701:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	1701:5	1701:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	1701:5	1701:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	1701:5	1701:5	7	!
LEAF_NODE	1701:5	1701:5	8	!
LEAF_NODE	1701:6	1701:6	7	(
FIELD	1701:7	1701:12	7	tif -> tif_flags
LEAF_NODE	1701:7	1701:7	8	tif
LEAF_NODE	1701:10	1701:10	8	->
LEAF_NODE	1701:12	1701:12	8	tif_flags
LEAF_NODE	1701:21	1701:21	7	&
FIELD	1701:22	1701:22	7	TIFF_BIGTIFF
LEAF_NODE	1701:22	1701:22	8	TIFF_BIGTIFF
LEAF_NODE	1701:34	1701:34	7	)
LEAF_NODE	1701:35	1701:35	4	)
STATEMENTS	1702:1	1705:1	4	
LEAF_NODE	1702:1	1702:1	5	{
STATEMENTS	1703:2	1704:2	5	
EXPR_STATEMENT	1703:2	1703:47	6	nextdir = tif -> tif_header . classic . tiff_diroff ;
EXPR	1703:2	1703:2	7	nextdir = tif -> tif_header . classic . tiff_diroff
ASSIGN	1703:2	1703:12	8	nextdir = tif -> tif_header . classic . tiff_diroff
LVAL	1703:2	1703:2	9	nextdir
FIELD	1703:2	1703:2	10	nextdir
LEAF_NODE	1703:2	1703:2	11	nextdir
ASSIGN_OP	1703:10	1703:10	9	=
LEAF_NODE	1703:10	1703:10	10	=
RVAL	1703:12	1703:12	9	tif -> tif_header . classic . tiff_diroff
FIELD	1703:12	1703:36	10	tif -> tif_header . classic . tiff_diroff
LEAF_NODE	1703:12	1703:12	11	tif
LEAF_NODE	1703:15	1703:15	11	->
LEAF_NODE	1703:17	1703:17	11	tif_header
LEAF_NODE	1703:27	1703:27	11	.
LEAF_NODE	1703:28	1703:28	11	classic
LEAF_NODE	1703:35	1703:35	11	.
LEAF_NODE	1703:36	1703:36	11	tiff_diroff
LEAF_NODE	1703:47	1703:47	7	;
EXPR_STATEMENT	1704:2	1704:9	6	off = 4 ;
EXPR	1704:2	1704:2	7	off = 4
ASSIGN	1704:2	1704:8	8	off = 4
LVAL	1704:2	1704:2	9	off
FIELD	1704:2	1704:2	10	off
LEAF_NODE	1704:2	1704:2	11	off
ASSIGN_OP	1704:6	1704:6	9	=
LEAF_NODE	1704:6	1704:6	10	=
RVAL	1704:8	1704:8	9	4
FIELD	1704:8	1704:8	10	4
LEAF_NODE	1704:8	1704:8	11	4
LEAF_NODE	1704:9	1704:9	7	;
LEAF_NODE	1705:1	1705:1	5	}
SELECTION	1706:1	1707:1	3	
KEYWORD	1706:1	1706:1	4	else
LEAF_NODE	1706:1	1706:1	5	else
STATEMENTS	1707:1	1710:1	4	
LEAF_NODE	1707:1	1707:1	5	{
STATEMENTS	1708:2	1709:2	5	
EXPR_STATEMENT	1708:2	1708:43	6	nextdir = tif -> tif_header . big . tiff_diroff ;
EXPR	1708:2	1708:2	7	nextdir = tif -> tif_header . big . tiff_diroff
ASSIGN	1708:2	1708:12	8	nextdir = tif -> tif_header . big . tiff_diroff
LVAL	1708:2	1708:2	9	nextdir
FIELD	1708:2	1708:2	10	nextdir
LEAF_NODE	1708:2	1708:2	11	nextdir
ASSIGN_OP	1708:10	1708:10	9	=
LEAF_NODE	1708:10	1708:10	10	=
RVAL	1708:12	1708:12	9	tif -> tif_header . big . tiff_diroff
FIELD	1708:12	1708:32	10	tif -> tif_header . big . tiff_diroff
LEAF_NODE	1708:12	1708:12	11	tif
LEAF_NODE	1708:15	1708:15	11	->
LEAF_NODE	1708:17	1708:17	11	tif_header
LEAF_NODE	1708:27	1708:27	11	.
LEAF_NODE	1708:28	1708:28	11	big
LEAF_NODE	1708:31	1708:31	11	.
LEAF_NODE	1708:32	1708:32	11	tiff_diroff
LEAF_NODE	1708:43	1708:43	7	;
EXPR_STATEMENT	1709:2	1709:9	6	off = 8 ;
EXPR	1709:2	1709:2	7	off = 8
ASSIGN	1709:2	1709:8	8	off = 8
LVAL	1709:2	1709:2	9	off
FIELD	1709:2	1709:2	10	off
LEAF_NODE	1709:2	1709:2	11	off
ASSIGN_OP	1709:6	1709:6	9	=
LEAF_NODE	1709:6	1709:6	10	=
RVAL	1709:8	1709:8	9	8
FIELD	1709:8	1709:8	10	8
LEAF_NODE	1709:8	1709:8	11	8
LEAF_NODE	1709:9	1709:9	7	;
LEAF_NODE	1710:1	1710:1	5	}
ITERATION	1711:1	1711:30	3	
KEYWORD	1711:1	1711:1	4	for
LEAF_NODE	1711:1	1711:1	5	for
LEAF_NODE	1711:5	1711:5	4	(
FOR_INIT	1711:6	1711:16	4	n = dirn - 1 ;
EXPR	1711:6	1711:6	5	n = dirn - 1
ASSIGN	1711:6	1711:10	6	n = dirn - 1
LVAL	1711:6	1711:6	7	n
FIELD	1711:6	1711:6	8	n
LEAF_NODE	1711:6	1711:6	9	n
ASSIGN_OP	1711:8	1711:8	7	=
LEAF_NODE	1711:8	1711:8	8	=
RVAL	1711:10	1711:15	7	dirn - 1
FIELD	1711:10	1711:10	8	dirn
LEAF_NODE	1711:10	1711:10	9	dirn
LEAF_NODE	1711:14	1711:14	8	-
FIELD	1711:15	1711:15	8	1
LEAF_NODE	1711:15	1711:15	9	1
LEAF_NODE	1711:16	1711:16	5	;
CONDITION	1711:18	1711:18	4	n > 0
EXPR	1711:18	1711:22	5	n > 0
FIELD	1711:18	1711:18	6	n
LEAF_NODE	1711:18	1711:18	7	n
REL_OPERATOR	1711:20	1711:20	6	>
LEAF_NODE	1711:20	1711:20	7	>
FIELD	1711:22	1711:22	6	0
LEAF_NODE	1711:22	1711:22	7	0
LEAF_NODE	1711:23	1711:23	4	;
FOR_EXPR	1711:25	1711:25	4	n --
EXPR	1711:25	1711:25	5	n --
FIELD	1711:25	1711:26	6	n --
LEAF_NODE	1711:25	1711:25	7	n
LEAF_NODE	1711:26	1711:26	7	--
LEAF_NODE	1711:28	1711:28	4	)
STATEMENTS	1711:30	1718:1	4	
LEAF_NODE	1711:30	1711:30	5	{
STATEMENTS	1712:2	1716:2	5	
SELECTION	1712:2	1712:20	6	
KEYWORD	1712:2	1712:2	7	if
LEAF_NODE	1712:2	1712:2	8	if
LEAF_NODE	1712:5	1712:5	7	(
CONDITION	1712:6	1712:6	7	nextdir == 0
EXPR	1712:6	1712:17	8	nextdir == 0
FIELD	1712:6	1712:6	9	nextdir
LEAF_NODE	1712:6	1712:6	10	nextdir
EQ_OPERATOR	1712:14	1712:14	9	==
LEAF_NODE	1712:14	1712:14	10	==
FIELD	1712:17	1712:17	9	0
LEAF_NODE	1712:17	1712:17	10	0
LEAF_NODE	1712:18	1712:18	7	)
STATEMENTS	1712:20	1715:2	7	
LEAF_NODE	1712:20	1712:20	8	{
STATEMENTS	1713:3	1714:3	8	
EXPR_STATEMENT	1713:3	1713:81	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Directory %d does not exist" , dirn ) ;
EXPR	1713:3	1713:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Directory %d does not exist" , dirn )
FUNCTION_CALL	1713:3	1713:80	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Directory %d does not exist" , dirn )
CALLEE	1713:3	1713:3	12	TIFFErrorExt
LEAF_NODE	1713:3	1713:3	13	TIFFErrorExt
LEAF_NODE	1713:15	1713:15	12	(
ARGUMENT	1713:16	1713:16	12	tif -> tif_clientdata
FIELD	1713:16	1713:21	13	tif -> tif_clientdata
LEAF_NODE	1713:16	1713:16	14	tif
LEAF_NODE	1713:19	1713:19	14	->
LEAF_NODE	1713:21	1713:21	14	tif_clientdata
LEAF_NODE	1713:35	1713:35	12	,
ARGUMENT	1713:37	1713:37	12	module
FIELD	1713:37	1713:37	13	module
LEAF_NODE	1713:37	1713:37	14	module
LEAF_NODE	1713:43	1713:43	12	,
ARGUMENT	1713:45	1713:45	12	"Directory %d does not exist"
FIELD	1713:45	1713:45	13	"Directory %d does not exist"
LEAF_NODE	1713:45	1713:45	14	"Directory %d does not exist"
LEAF_NODE	1713:74	1713:74	12	,
ARGUMENT	1713:76	1713:76	12	dirn
FIELD	1713:76	1713:76	13	dirn
LEAF_NODE	1713:76	1713:76	14	dirn
LEAF_NODE	1713:80	1713:80	12	)
LEAF_NODE	1713:81	1713:81	10	;
JUMP_STATEMENT	1714:3	1714:13	9	return ( 0 ) ;
KEYWORD	1714:3	1714:3	10	return
LEAF_NODE	1714:3	1714:3	11	return
DESTINATION	1714:10	1714:10	10	( 0 )
EXPR	1714:10	1714:12	11	( 0 )
LEAF_NODE	1714:10	1714:10	12	(
FIELD	1714:11	1714:11	12	0
LEAF_NODE	1714:11	1714:11	13	0
LEAF_NODE	1714:12	1714:12	12	)
LEAF_NODE	1714:13	1714:13	10	;
LEAF_NODE	1715:2	1715:2	8	}
SELECTION	1716:2	1717:3	6	
KEYWORD	1716:2	1716:2	7	if
LEAF_NODE	1716:2	1716:2	8	if
LEAF_NODE	1716:5	1716:5	7	(
CONDITION	1716:6	1716:6	7	! TIFFAdvanceDirectory ( tif , & nextdir , & off )
EXPR	1716:6	1716:6	8	! TIFFAdvanceDirectory ( tif , & nextdir , & off )
UNARY_EXPR	1716:6	1716:7	9	! TIFFAdvanceDirectory ( tif , & nextdir , & off )
UNARY_OPERATOR	1716:6	1716:6	10	!
LEAF_NODE	1716:6	1716:6	11	!
FUNCTION_CALL	1716:7	1716:47	10	TIFFAdvanceDirectory ( tif , & nextdir , & off )
CALLEE	1716:7	1716:7	11	TIFFAdvanceDirectory
LEAF_NODE	1716:7	1716:7	12	TIFFAdvanceDirectory
LEAF_NODE	1716:27	1716:27	11	(
ARGUMENT	1716:28	1716:28	11	tif
FIELD	1716:28	1716:28	12	tif
LEAF_NODE	1716:28	1716:28	13	tif
LEAF_NODE	1716:31	1716:31	11	,
ARGUMENT	1716:33	1716:33	11	& nextdir
UNARY_EXPR	1716:33	1716:34	12	& nextdir
UNARY_OPERATOR	1716:33	1716:33	13	&
LEAF_NODE	1716:33	1716:33	14	&
FIELD	1716:34	1716:34	13	nextdir
LEAF_NODE	1716:34	1716:34	14	nextdir
LEAF_NODE	1716:41	1716:41	11	,
ARGUMENT	1716:43	1716:43	11	& off
UNARY_EXPR	1716:43	1716:44	12	& off
UNARY_OPERATOR	1716:43	1716:43	13	&
LEAF_NODE	1716:43	1716:43	14	&
FIELD	1716:44	1716:44	13	off
LEAF_NODE	1716:44	1716:44	14	off
LEAF_NODE	1716:47	1716:47	11	)
LEAF_NODE	1716:48	1716:48	7	)
STATEMENTS	1717:3	1717:3	7	
JUMP_STATEMENT	1717:3	1717:13	8	return ( 0 ) ;
KEYWORD	1717:3	1717:3	9	return
LEAF_NODE	1717:3	1717:3	10	return
DESTINATION	1717:10	1717:10	9	( 0 )
EXPR	1717:10	1717:12	10	( 0 )
LEAF_NODE	1717:10	1717:10	11	(
FIELD	1717:11	1717:11	11	0
LEAF_NODE	1717:11	1717:11	12	0
LEAF_NODE	1717:12	1717:12	11	)
LEAF_NODE	1717:13	1717:13	9	;
LEAF_NODE	1718:1	1718:1	5	}
SELECTION	1723:1	1724:2	3	
KEYWORD	1723:1	1723:1	4	if
LEAF_NODE	1723:1	1723:1	5	if
LEAF_NODE	1723:4	1723:4	4	(
CONDITION	1723:5	1723:5	4	! TIFFAdvanceDirectory ( tif , & nextdir , NULL )
EXPR	1723:5	1723:5	5	! TIFFAdvanceDirectory ( tif , & nextdir , NULL )
UNARY_EXPR	1723:5	1723:6	6	! TIFFAdvanceDirectory ( tif , & nextdir , NULL )
UNARY_OPERATOR	1723:5	1723:5	7	!
LEAF_NODE	1723:5	1723:5	8	!
FUNCTION_CALL	1723:6	1723:46	7	TIFFAdvanceDirectory ( tif , & nextdir , NULL )
CALLEE	1723:6	1723:6	8	TIFFAdvanceDirectory
LEAF_NODE	1723:6	1723:6	9	TIFFAdvanceDirectory
LEAF_NODE	1723:26	1723:26	8	(
ARGUMENT	1723:27	1723:27	8	tif
FIELD	1723:27	1723:27	9	tif
LEAF_NODE	1723:27	1723:27	10	tif
LEAF_NODE	1723:30	1723:30	8	,
ARGUMENT	1723:32	1723:32	8	& nextdir
UNARY_EXPR	1723:32	1723:33	9	& nextdir
UNARY_OPERATOR	1723:32	1723:32	10	&
LEAF_NODE	1723:32	1723:32	11	&
FIELD	1723:33	1723:33	10	nextdir
LEAF_NODE	1723:33	1723:33	11	nextdir
LEAF_NODE	1723:40	1723:40	8	,
ARGUMENT	1723:42	1723:42	8	NULL
FIELD	1723:42	1723:42	9	NULL
LEAF_NODE	1723:42	1723:42	10	NULL
LEAF_NODE	1723:46	1723:46	8	)
LEAF_NODE	1723:47	1723:47	4	)
STATEMENTS	1724:2	1724:2	4	
JUMP_STATEMENT	1724:2	1724:12	5	return ( 0 ) ;
KEYWORD	1724:2	1724:2	6	return
LEAF_NODE	1724:2	1724:2	7	return
DESTINATION	1724:9	1724:9	6	( 0 )
EXPR	1724:9	1724:11	7	( 0 )
LEAF_NODE	1724:9	1724:9	8	(
FIELD	1724:10	1724:10	8	0
LEAF_NODE	1724:10	1724:10	9	0
LEAF_NODE	1724:11	1724:11	8	)
LEAF_NODE	1724:12	1724:12	6	;
EXPR_STATEMENT	1730:1	1730:40	3	( void ) TIFFSeekFile ( tif , off , SEEK_SET ) ;
EXPR	1730:1	1730:8	4	( void ) TIFFSeekFile ( tif , off , SEEK_SET )
LEAF_NODE	1730:1	1730:1	5	(
TYPE_NAME	1730:2	1730:2	5	void
LEAF_NODE	1730:2	1730:2	6	void
LEAF_NODE	1730:6	1730:6	5	)
FUNCTION_CALL	1730:8	1730:39	5	TIFFSeekFile ( tif , off , SEEK_SET )
CALLEE	1730:8	1730:8	6	TIFFSeekFile
LEAF_NODE	1730:8	1730:8	7	TIFFSeekFile
LEAF_NODE	1730:20	1730:20	6	(
ARGUMENT	1730:21	1730:21	6	tif
FIELD	1730:21	1730:21	7	tif
LEAF_NODE	1730:21	1730:21	8	tif
LEAF_NODE	1730:24	1730:24	6	,
ARGUMENT	1730:26	1730:26	6	off
FIELD	1730:26	1730:26	7	off
LEAF_NODE	1730:26	1730:26	8	off
LEAF_NODE	1730:29	1730:29	6	,
ARGUMENT	1730:31	1730:31	6	SEEK_SET
FIELD	1730:31	1730:31	7	SEEK_SET
LEAF_NODE	1730:31	1730:31	8	SEEK_SET
LEAF_NODE	1730:39	1730:39	6	)
LEAF_NODE	1730:40	1730:40	4	;
SELECTION	1731:1	1732:1	3	
KEYWORD	1731:1	1731:1	4	if
LEAF_NODE	1731:1	1731:1	5	if
LEAF_NODE	1731:4	1731:4	4	(
CONDITION	1731:5	1731:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	1731:5	1731:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	1731:5	1731:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	1731:5	1731:5	7	!
LEAF_NODE	1731:5	1731:5	8	!
LEAF_NODE	1731:6	1731:6	7	(
FIELD	1731:7	1731:12	7	tif -> tif_flags
LEAF_NODE	1731:7	1731:7	8	tif
LEAF_NODE	1731:10	1731:10	8	->
LEAF_NODE	1731:12	1731:12	8	tif_flags
LEAF_NODE	1731:21	1731:21	7	&
FIELD	1731:22	1731:22	7	TIFF_BIGTIFF
LEAF_NODE	1731:22	1731:22	8	TIFF_BIGTIFF
LEAF_NODE	1731:34	1731:34	7	)
LEAF_NODE	1731:35	1731:35	4	)
STATEMENTS	1732:1	1742:1	4	
LEAF_NODE	1732:1	1732:1	5	{
STATEMENTS	1733:2	1738:2	5	
SIMPLE_DECL	1733:2	1733:18	6	uint32 nextdir32 ;
VAR_DECL	1733:2	1733:9	7	uint32 nextdir32
TYPE	1733:2	1733:2	8	uint32
TYPE_NAME	1733:2	1733:2	9	uint32
LEAF_NODE	1733:2	1733:2	10	uint32
NAME	1733:9	1733:9	8	nextdir32
LEAF_NODE	1733:9	1733:9	9	nextdir32
LEAF_NODE	1733:18	1733:18	7	;
EXPR_STATEMENT	1734:2	1734:27	6	nextdir32 = ( uint32 ) nextdir ;
EXPR	1734:2	1734:2	7	nextdir32 = ( uint32 ) nextdir
ASSIGN	1734:2	1734:12	8	nextdir32 = ( uint32 ) nextdir
LVAL	1734:2	1734:2	9	nextdir32
FIELD	1734:2	1734:2	10	nextdir32
LEAF_NODE	1734:2	1734:2	11	nextdir32
ASSIGN_OP	1734:11	1734:11	9	=
LEAF_NODE	1734:11	1734:11	10	=
RVAL	1734:12	1734:20	9	( uint32 ) nextdir
LEAF_NODE	1734:12	1734:12	10	(
TYPE_NAME	1734:13	1734:13	10	uint32
LEAF_NODE	1734:13	1734:13	11	uint32
LEAF_NODE	1734:19	1734:19	10	)
FIELD	1734:20	1734:20	10	nextdir
LEAF_NODE	1734:20	1734:20	11	nextdir
LEAF_NODE	1734:27	1734:27	7	;
EXPR_STATEMENT	1735:2	1735:36	6	assert ( ( uint64 ) nextdir32 == nextdir ) ;
EXPR	1735:2	1735:2	7	assert ( ( uint64 ) nextdir32 == nextdir )
FUNCTION_CALL	1735:2	1735:35	8	assert ( ( uint64 ) nextdir32 == nextdir )
CALLEE	1735:2	1735:2	9	assert
LEAF_NODE	1735:2	1735:2	10	assert
LEAF_NODE	1735:8	1735:8	9	(
ARGUMENT	1735:9	1735:28	9	( uint64 ) nextdir32 == nextdir
LEAF_NODE	1735:9	1735:9	10	(
TYPE_NAME	1735:10	1735:10	10	uint64
LEAF_NODE	1735:10	1735:10	11	uint64
LEAF_NODE	1735:16	1735:16	10	)
FIELD	1735:17	1735:17	10	nextdir32
LEAF_NODE	1735:17	1735:17	11	nextdir32
EQ_OPERATOR	1735:26	1735:26	10	==
LEAF_NODE	1735:26	1735:26	11	==
FIELD	1735:28	1735:28	10	nextdir
LEAF_NODE	1735:28	1735:28	11	nextdir
LEAF_NODE	1735:35	1735:35	9	)
LEAF_NODE	1735:36	1735:36	7	;
SELECTION	1736:2	1737:3	6	
KEYWORD	1736:2	1736:2	7	if
LEAF_NODE	1736:2	1736:2	8	if
LEAF_NODE	1736:5	1736:5	7	(
CONDITION	1736:6	1736:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	1736:6	1736:23	8	tif -> tif_flags & TIFF_SWAB
FIELD	1736:6	1736:11	9	tif -> tif_flags
LEAF_NODE	1736:6	1736:6	10	tif
LEAF_NODE	1736:9	1736:9	10	->
LEAF_NODE	1736:11	1736:11	10	tif_flags
LEAF_NODE	1736:21	1736:21	9	&
FIELD	1736:23	1736:23	9	TIFF_SWAB
LEAF_NODE	1736:23	1736:23	10	TIFF_SWAB
LEAF_NODE	1736:32	1736:32	7	)
STATEMENTS	1737:3	1737:3	7	
EXPR_STATEMENT	1737:3	1737:27	8	TIFFSwabLong ( & nextdir32 ) ;
EXPR	1737:3	1737:3	9	TIFFSwabLong ( & nextdir32 )
FUNCTION_CALL	1737:3	1737:26	10	TIFFSwabLong ( & nextdir32 )
CALLEE	1737:3	1737:3	11	TIFFSwabLong
LEAF_NODE	1737:3	1737:3	12	TIFFSwabLong
LEAF_NODE	1737:15	1737:15	11	(
ARGUMENT	1737:16	1737:16	11	& nextdir32
UNARY_EXPR	1737:16	1737:17	12	& nextdir32
UNARY_OPERATOR	1737:16	1737:16	13	&
LEAF_NODE	1737:16	1737:16	14	&
FIELD	1737:17	1737:17	13	nextdir32
LEAF_NODE	1737:17	1737:17	14	nextdir32
LEAF_NODE	1737:26	1737:26	11	)
LEAF_NODE	1737:27	1737:27	9	;
SELECTION	1738:2	1738:50	6	
KEYWORD	1738:2	1738:2	7	if
LEAF_NODE	1738:2	1738:2	8	if
LEAF_NODE	1738:5	1738:5	7	(
CONDITION	1738:6	1738:6	7	! WriteOK ( tif , & nextdir32 , sizeof ( uint32 ) )
EXPR	1738:6	1738:6	8	! WriteOK ( tif , & nextdir32 , sizeof ( uint32 ) )
UNARY_EXPR	1738:6	1738:7	9	! WriteOK ( tif , & nextdir32 , sizeof ( uint32 ) )
UNARY_OPERATOR	1738:6	1738:6	10	!
LEAF_NODE	1738:6	1738:6	11	!
FUNCTION_CALL	1738:7	1738:47	10	WriteOK ( tif , & nextdir32 , sizeof ( uint32 ) )
CALLEE	1738:7	1738:7	11	WriteOK
LEAF_NODE	1738:7	1738:7	12	WriteOK
LEAF_NODE	1738:14	1738:14	11	(
ARGUMENT	1738:15	1738:15	11	tif
FIELD	1738:15	1738:15	12	tif
LEAF_NODE	1738:15	1738:15	13	tif
LEAF_NODE	1738:18	1738:18	11	,
ARGUMENT	1738:20	1738:20	11	& nextdir32
UNARY_EXPR	1738:20	1738:21	12	& nextdir32
UNARY_OPERATOR	1738:20	1738:20	13	&
LEAF_NODE	1738:20	1738:20	14	&
FIELD	1738:21	1738:21	13	nextdir32
LEAF_NODE	1738:21	1738:21	14	nextdir32
LEAF_NODE	1738:30	1738:30	11	,
ARGUMENT	1738:32	1738:32	11	sizeof ( uint32 )
FUNCTION_CALL	1738:32	1738:46	12	sizeof ( uint32 )
CALLEE	1738:32	1738:32	13	sizeof
LEAF_NODE	1738:32	1738:32	14	sizeof
LEAF_NODE	1738:39	1738:39	13	(
ARGUMENT	1738:40	1738:40	13	uint32
FIELD	1738:40	1738:40	14	uint32
LEAF_NODE	1738:40	1738:40	15	uint32
LEAF_NODE	1738:46	1738:46	13	)
LEAF_NODE	1738:47	1738:47	11	)
LEAF_NODE	1738:48	1738:48	7	)
STATEMENTS	1738:50	1741:2	7	
LEAF_NODE	1738:50	1738:50	8	{
STATEMENTS	1739:3	1740:3	8	
EXPR_STATEMENT	1739:3	1739:76	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" ) ;
EXPR	1739:3	1739:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
FUNCTION_CALL	1739:3	1739:75	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
CALLEE	1739:3	1739:3	12	TIFFErrorExt
LEAF_NODE	1739:3	1739:3	13	TIFFErrorExt
LEAF_NODE	1739:15	1739:15	12	(
ARGUMENT	1739:16	1739:16	12	tif -> tif_clientdata
FIELD	1739:16	1739:21	13	tif -> tif_clientdata
LEAF_NODE	1739:16	1739:16	14	tif
LEAF_NODE	1739:19	1739:19	14	->
LEAF_NODE	1739:21	1739:21	14	tif_clientdata
LEAF_NODE	1739:35	1739:35	12	,
ARGUMENT	1739:37	1739:37	12	module
FIELD	1739:37	1739:37	13	module
LEAF_NODE	1739:37	1739:37	14	module
LEAF_NODE	1739:43	1739:43	12	,
ARGUMENT	1739:45	1739:45	12	"Error writing directory link"
FIELD	1739:45	1739:45	13	"Error writing directory link"
LEAF_NODE	1739:45	1739:45	14	"Error writing directory link"
LEAF_NODE	1739:75	1739:75	12	)
LEAF_NODE	1739:76	1739:76	10	;
JUMP_STATEMENT	1740:3	1740:13	9	return ( 0 ) ;
KEYWORD	1740:3	1740:3	10	return
LEAF_NODE	1740:3	1740:3	11	return
DESTINATION	1740:10	1740:10	10	( 0 )
EXPR	1740:10	1740:12	11	( 0 )
LEAF_NODE	1740:10	1740:10	12	(
FIELD	1740:11	1740:11	12	0
LEAF_NODE	1740:11	1740:11	13	0
LEAF_NODE	1740:12	1740:12	12	)
LEAF_NODE	1740:13	1740:13	10	;
LEAF_NODE	1741:2	1741:2	8	}
LEAF_NODE	1742:1	1742:1	5	}
SELECTION	1743:1	1744:1	3	
KEYWORD	1743:1	1743:1	4	else
LEAF_NODE	1743:1	1743:1	5	else
STATEMENTS	1744:1	1751:1	4	
LEAF_NODE	1744:1	1744:1	5	{
STATEMENTS	1745:2	1747:2	5	
SELECTION	1745:2	1746:3	6	
KEYWORD	1745:2	1745:2	7	if
LEAF_NODE	1745:2	1745:2	8	if
LEAF_NODE	1745:5	1745:5	7	(
CONDITION	1745:6	1745:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	1745:6	1745:23	8	tif -> tif_flags & TIFF_SWAB
FIELD	1745:6	1745:11	9	tif -> tif_flags
LEAF_NODE	1745:6	1745:6	10	tif
LEAF_NODE	1745:9	1745:9	10	->
LEAF_NODE	1745:11	1745:11	10	tif_flags
LEAF_NODE	1745:21	1745:21	9	&
FIELD	1745:23	1745:23	9	TIFF_SWAB
LEAF_NODE	1745:23	1745:23	10	TIFF_SWAB
LEAF_NODE	1745:32	1745:32	7	)
STATEMENTS	1746:3	1746:3	7	
EXPR_STATEMENT	1746:3	1746:26	8	TIFFSwabLong8 ( & nextdir ) ;
EXPR	1746:3	1746:3	9	TIFFSwabLong8 ( & nextdir )
FUNCTION_CALL	1746:3	1746:25	10	TIFFSwabLong8 ( & nextdir )
CALLEE	1746:3	1746:3	11	TIFFSwabLong8
LEAF_NODE	1746:3	1746:3	12	TIFFSwabLong8
LEAF_NODE	1746:16	1746:16	11	(
ARGUMENT	1746:17	1746:17	11	& nextdir
UNARY_EXPR	1746:17	1746:18	12	& nextdir
UNARY_OPERATOR	1746:17	1746:17	13	&
LEAF_NODE	1746:17	1746:17	14	&
FIELD	1746:18	1746:18	13	nextdir
LEAF_NODE	1746:18	1746:18	14	nextdir
LEAF_NODE	1746:25	1746:25	11	)
LEAF_NODE	1746:26	1746:26	9	;
SELECTION	1747:2	1747:48	6	
KEYWORD	1747:2	1747:2	7	if
LEAF_NODE	1747:2	1747:2	8	if
LEAF_NODE	1747:5	1747:5	7	(
CONDITION	1747:6	1747:6	7	! WriteOK ( tif , & nextdir , sizeof ( uint64 ) )
EXPR	1747:6	1747:6	8	! WriteOK ( tif , & nextdir , sizeof ( uint64 ) )
UNARY_EXPR	1747:6	1747:7	9	! WriteOK ( tif , & nextdir , sizeof ( uint64 ) )
UNARY_OPERATOR	1747:6	1747:6	10	!
LEAF_NODE	1747:6	1747:6	11	!
FUNCTION_CALL	1747:7	1747:45	10	WriteOK ( tif , & nextdir , sizeof ( uint64 ) )
CALLEE	1747:7	1747:7	11	WriteOK
LEAF_NODE	1747:7	1747:7	12	WriteOK
LEAF_NODE	1747:14	1747:14	11	(
ARGUMENT	1747:15	1747:15	11	tif
FIELD	1747:15	1747:15	12	tif
LEAF_NODE	1747:15	1747:15	13	tif
LEAF_NODE	1747:18	1747:18	11	,
ARGUMENT	1747:20	1747:20	11	& nextdir
UNARY_EXPR	1747:20	1747:21	12	& nextdir
UNARY_OPERATOR	1747:20	1747:20	13	&
LEAF_NODE	1747:20	1747:20	14	&
FIELD	1747:21	1747:21	13	nextdir
LEAF_NODE	1747:21	1747:21	14	nextdir
LEAF_NODE	1747:28	1747:28	11	,
ARGUMENT	1747:30	1747:30	11	sizeof ( uint64 )
FUNCTION_CALL	1747:30	1747:44	12	sizeof ( uint64 )
CALLEE	1747:30	1747:30	13	sizeof
LEAF_NODE	1747:30	1747:30	14	sizeof
LEAF_NODE	1747:37	1747:37	13	(
ARGUMENT	1747:38	1747:38	13	uint64
FIELD	1747:38	1747:38	14	uint64
LEAF_NODE	1747:38	1747:38	15	uint64
LEAF_NODE	1747:44	1747:44	13	)
LEAF_NODE	1747:45	1747:45	11	)
LEAF_NODE	1747:46	1747:46	7	)
STATEMENTS	1747:48	1750:2	7	
LEAF_NODE	1747:48	1747:48	8	{
STATEMENTS	1748:3	1749:3	8	
EXPR_STATEMENT	1748:3	1748:76	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" ) ;
EXPR	1748:3	1748:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
FUNCTION_CALL	1748:3	1748:75	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
CALLEE	1748:3	1748:3	12	TIFFErrorExt
LEAF_NODE	1748:3	1748:3	13	TIFFErrorExt
LEAF_NODE	1748:15	1748:15	12	(
ARGUMENT	1748:16	1748:16	12	tif -> tif_clientdata
FIELD	1748:16	1748:21	13	tif -> tif_clientdata
LEAF_NODE	1748:16	1748:16	14	tif
LEAF_NODE	1748:19	1748:19	14	->
LEAF_NODE	1748:21	1748:21	14	tif_clientdata
LEAF_NODE	1748:35	1748:35	12	,
ARGUMENT	1748:37	1748:37	12	module
FIELD	1748:37	1748:37	13	module
LEAF_NODE	1748:37	1748:37	14	module
LEAF_NODE	1748:43	1748:43	12	,
ARGUMENT	1748:45	1748:45	12	"Error writing directory link"
FIELD	1748:45	1748:45	13	"Error writing directory link"
LEAF_NODE	1748:45	1748:45	14	"Error writing directory link"
LEAF_NODE	1748:75	1748:75	12	)
LEAF_NODE	1748:76	1748:76	10	;
JUMP_STATEMENT	1749:3	1749:13	9	return ( 0 ) ;
KEYWORD	1749:3	1749:3	10	return
LEAF_NODE	1749:3	1749:3	11	return
DESTINATION	1749:10	1749:10	10	( 0 )
EXPR	1749:10	1749:12	11	( 0 )
LEAF_NODE	1749:10	1749:10	12	(
FIELD	1749:11	1749:11	12	0
LEAF_NODE	1749:11	1749:11	13	0
LEAF_NODE	1749:12	1749:12	12	)
LEAF_NODE	1749:13	1749:13	10	;
LEAF_NODE	1750:2	1750:2	8	}
LEAF_NODE	1751:1	1751:1	5	}
EXPR_STATEMENT	1759:1	1759:25	3	( * tif -> tif_cleanup ) ( tif ) ;
EXPR	1759:1	1759:1	4	( * tif -> tif_cleanup ) ( tif )
FUNCTION_CALL	1759:1	1759:24	5	( * tif -> tif_cleanup ) ( tif )
CALLEE	1759:1	1759:19	6	( * tif -> tif_cleanup )
LEAF_NODE	1759:1	1759:1	7	(
UNARY_EXPR	1759:2	1759:3	7	* tif -> tif_cleanup
UNARY_OPERATOR	1759:2	1759:2	8	*
LEAF_NODE	1759:2	1759:2	9	*
FIELD	1759:3	1759:8	8	tif -> tif_cleanup
LEAF_NODE	1759:3	1759:3	9	tif
LEAF_NODE	1759:6	1759:6	9	->
LEAF_NODE	1759:8	1759:8	9	tif_cleanup
LEAF_NODE	1759:19	1759:19	7	)
LEAF_NODE	1759:20	1759:20	6	(
ARGUMENT	1759:21	1759:21	6	tif
FIELD	1759:21	1759:21	7	tif
LEAF_NODE	1759:21	1759:21	8	tif
LEAF_NODE	1759:24	1759:24	6	)
LEAF_NODE	1759:25	1759:25	4	;
SELECTION	1760:1	1760:59	3	
KEYWORD	1760:1	1760:1	4	if
LEAF_NODE	1760:1	1760:1	5	if
LEAF_NODE	1760:4	1760:4	4	(
CONDITION	1760:5	1760:5	4	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
EXPR	1760:5	1760:5	5	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
AND	1760:5	1760:41	6	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
EXPR	1760:5	1760:36	7	( tif -> tif_flags & TIFF_MYBUFFER )
LEAF_NODE	1760:5	1760:5	8	(
FIELD	1760:6	1760:11	8	tif -> tif_flags
LEAF_NODE	1760:6	1760:6	9	tif
LEAF_NODE	1760:9	1760:9	9	->
LEAF_NODE	1760:11	1760:11	9	tif_flags
LEAF_NODE	1760:21	1760:21	8	&
FIELD	1760:23	1760:23	8	TIFF_MYBUFFER
LEAF_NODE	1760:23	1760:23	9	TIFF_MYBUFFER
LEAF_NODE	1760:36	1760:36	8	)
LEAF_NODE	1760:38	1760:38	7	&&
EXPR	1760:41	1760:41	7	tif -> tif_rawdata
FIELD	1760:41	1760:46	8	tif -> tif_rawdata
LEAF_NODE	1760:41	1760:41	9	tif
LEAF_NODE	1760:44	1760:44	9	->
LEAF_NODE	1760:46	1760:46	9	tif_rawdata
LEAF_NODE	1760:57	1760:57	4	)
STATEMENTS	1760:59	1766:1	4	
LEAF_NODE	1760:59	1760:59	5	{
STATEMENTS	1761:2	1765:16	5	
EXPR_STATEMENT	1761:2	1761:29	6	_TIFFfree ( tif -> tif_rawdata ) ;
EXPR	1761:2	1761:2	7	_TIFFfree ( tif -> tif_rawdata )
FUNCTION_CALL	1761:2	1761:28	8	_TIFFfree ( tif -> tif_rawdata )
CALLEE	1761:2	1761:2	9	_TIFFfree
LEAF_NODE	1761:2	1761:2	10	_TIFFfree
LEAF_NODE	1761:11	1761:11	9	(
ARGUMENT	1761:12	1761:12	9	tif -> tif_rawdata
FIELD	1761:12	1761:17	10	tif -> tif_rawdata
LEAF_NODE	1761:12	1761:12	11	tif
LEAF_NODE	1761:15	1761:15	11	->
LEAF_NODE	1761:17	1761:17	11	tif_rawdata
LEAF_NODE	1761:28	1761:28	9	)
LEAF_NODE	1761:29	1761:29	7	;
EXPR_STATEMENT	1762:2	1762:25	6	tif -> tif_rawdata = NULL ;
EXPR	1762:2	1762:2	7	tif -> tif_rawdata = NULL
ASSIGN	1762:2	1762:21	8	tif -> tif_rawdata = NULL
LVAL	1762:2	1762:2	9	tif -> tif_rawdata
FIELD	1762:2	1762:7	10	tif -> tif_rawdata
LEAF_NODE	1762:2	1762:2	11	tif
LEAF_NODE	1762:5	1762:5	11	->
LEAF_NODE	1762:7	1762:7	11	tif_rawdata
ASSIGN_OP	1762:19	1762:19	9	=
LEAF_NODE	1762:19	1762:19	10	=
RVAL	1762:21	1762:21	9	NULL
FIELD	1762:21	1762:21	10	NULL
LEAF_NODE	1762:21	1762:21	11	NULL
LEAF_NODE	1762:25	1762:25	7	;
EXPR_STATEMENT	1763:2	1763:20	6	tif -> tif_rawcc = 0 ;
EXPR	1763:2	1763:2	7	tif -> tif_rawcc = 0
ASSIGN	1763:2	1763:19	8	tif -> tif_rawcc = 0
LVAL	1763:2	1763:2	9	tif -> tif_rawcc
FIELD	1763:2	1763:7	10	tif -> tif_rawcc
LEAF_NODE	1763:2	1763:2	11	tif
LEAF_NODE	1763:5	1763:5	11	->
LEAF_NODE	1763:7	1763:7	11	tif_rawcc
ASSIGN_OP	1763:17	1763:17	9	=
LEAF_NODE	1763:17	1763:17	10	=
RVAL	1763:19	1763:19	9	0
FIELD	1763:19	1763:19	10	0
LEAF_NODE	1763:19	1763:19	11	0
LEAF_NODE	1763:20	1763:20	7	;
EXPR_STATEMENT	1764:16	1764:39	6	tif -> tif_rawdataoff = 0 ;
EXPR	1764:16	1764:16	7	tif -> tif_rawdataoff = 0
ASSIGN	1764:16	1764:38	8	tif -> tif_rawdataoff = 0
LVAL	1764:16	1764:16	9	tif -> tif_rawdataoff
FIELD	1764:16	1764:21	10	tif -> tif_rawdataoff
LEAF_NODE	1764:16	1764:16	11	tif
LEAF_NODE	1764:19	1764:19	11	->
LEAF_NODE	1764:21	1764:21	11	tif_rawdataoff
ASSIGN_OP	1764:36	1764:36	9	=
LEAF_NODE	1764:36	1764:36	10	=
RVAL	1764:38	1764:38	9	0
FIELD	1764:38	1764:38	10	0
LEAF_NODE	1764:38	1764:38	11	0
LEAF_NODE	1764:39	1764:39	7	;
EXPR_STATEMENT	1765:16	1765:42	6	tif -> tif_rawdataloaded = 0 ;
EXPR	1765:16	1765:16	7	tif -> tif_rawdataloaded = 0
ASSIGN	1765:16	1765:41	8	tif -> tif_rawdataloaded = 0
LVAL	1765:16	1765:16	9	tif -> tif_rawdataloaded
FIELD	1765:16	1765:21	10	tif -> tif_rawdataloaded
LEAF_NODE	1765:16	1765:16	11	tif
LEAF_NODE	1765:19	1765:19	11	->
LEAF_NODE	1765:21	1765:21	11	tif_rawdataloaded
ASSIGN_OP	1765:39	1765:39	9	=
LEAF_NODE	1765:39	1765:39	10	=
RVAL	1765:41	1765:41	9	0
FIELD	1765:41	1765:41	10	0
LEAF_NODE	1765:41	1765:41	11	0
LEAF_NODE	1765:42	1765:42	7	;
LEAF_NODE	1766:1	1766:1	5	}
EXPR_STATEMENT	1767:1	1767:86	3	tif -> tif_flags &= ~ ( TIFF_BEENWRITING | TIFF_BUFFERSETUP | TIFF_POSTENCODE | TIFF_BUF4WRITE ) ;
EXPR	1767:1	1767:1	4	tif -> tif_flags &= ~ ( TIFF_BEENWRITING | TIFF_BUFFERSETUP | TIFF_POSTENCODE | TIFF_BUF4WRITE )
ASSIGN	1767:1	1767:19	5	tif -> tif_flags &= ~ ( TIFF_BEENWRITING | TIFF_BUFFERSETUP | TIFF_POSTENCODE | TIFF_BUF4WRITE )
LVAL	1767:1	1767:1	6	tif -> tif_flags
FIELD	1767:1	1767:6	7	tif -> tif_flags
LEAF_NODE	1767:1	1767:1	8	tif
LEAF_NODE	1767:4	1767:4	8	->
LEAF_NODE	1767:6	1767:6	8	tif_flags
ASSIGN_OP	1767:16	1767:16	6	&=
LEAF_NODE	1767:16	1767:16	7	&=
RVAL	1767:19	1767:19	6	~ ( TIFF_BEENWRITING | TIFF_BUFFERSETUP | TIFF_POSTENCODE | TIFF_BUF4WRITE )
UNARY_EXPR	1767:19	1767:85	7	~ ( TIFF_BEENWRITING | TIFF_BUFFERSETUP | TIFF_POSTENCODE | TIFF_BUF4WRITE )
UNARY_OPERATOR	1767:19	1767:19	8	~
LEAF_NODE	1767:19	1767:19	9	~
LEAF_NODE	1767:20	1767:20	8	(
BIT_OR	1767:21	1767:38	8	TIFF_BEENWRITING | TIFF_BUFFERSETUP | TIFF_POSTENCODE | TIFF_BUF4WRITE
BIT_OR_ELEM	1767:21	1767:21	9	TIFF_BEENWRITING
FIELD	1767:21	1767:21	10	TIFF_BEENWRITING
LEAF_NODE	1767:21	1767:21	11	TIFF_BEENWRITING
LEAF_NODE	1767:37	1767:37	9	|
BIT_OR_ELEM	1767:38	1767:38	9	TIFF_BUFFERSETUP | TIFF_POSTENCODE | TIFF_BUF4WRITE
BIT_OR	1767:38	1767:55	10	TIFF_BUFFERSETUP | TIFF_POSTENCODE | TIFF_BUF4WRITE
BIT_OR_ELEM	1767:38	1767:38	11	TIFF_BUFFERSETUP
FIELD	1767:38	1767:38	12	TIFF_BUFFERSETUP
LEAF_NODE	1767:38	1767:38	13	TIFF_BUFFERSETUP
LEAF_NODE	1767:54	1767:54	11	|
BIT_OR_ELEM	1767:55	1767:55	11	TIFF_POSTENCODE | TIFF_BUF4WRITE
BIT_OR	1767:55	1767:71	12	TIFF_POSTENCODE | TIFF_BUF4WRITE
BIT_OR_ELEM	1767:55	1767:55	13	TIFF_POSTENCODE
FIELD	1767:55	1767:55	14	TIFF_POSTENCODE
LEAF_NODE	1767:55	1767:55	15	TIFF_POSTENCODE
LEAF_NODE	1767:70	1767:70	13	|
BIT_OR_ELEM	1767:71	1767:71	13	TIFF_BUF4WRITE
FIELD	1767:71	1767:71	14	TIFF_BUF4WRITE
LEAF_NODE	1767:71	1767:71	15	TIFF_BUF4WRITE
LEAF_NODE	1767:85	1767:85	8	)
LEAF_NODE	1767:86	1767:86	4	;
EXPR_STATEMENT	1768:1	1768:23	3	TIFFFreeDirectory ( tif ) ;
EXPR	1768:1	1768:1	4	TIFFFreeDirectory ( tif )
FUNCTION_CALL	1768:1	1768:22	5	TIFFFreeDirectory ( tif )
CALLEE	1768:1	1768:1	6	TIFFFreeDirectory
LEAF_NODE	1768:1	1768:1	7	TIFFFreeDirectory
LEAF_NODE	1768:18	1768:18	6	(
ARGUMENT	1768:19	1768:19	6	tif
FIELD	1768:19	1768:19	7	tif
LEAF_NODE	1768:19	1768:19	8	tif
LEAF_NODE	1768:22	1768:22	6	)
LEAF_NODE	1768:23	1768:23	4	;
EXPR_STATEMENT	1769:1	1769:26	3	TIFFDefaultDirectory ( tif ) ;
EXPR	1769:1	1769:1	4	TIFFDefaultDirectory ( tif )
FUNCTION_CALL	1769:1	1769:25	5	TIFFDefaultDirectory ( tif )
CALLEE	1769:1	1769:1	6	TIFFDefaultDirectory
LEAF_NODE	1769:1	1769:1	7	TIFFDefaultDirectory
LEAF_NODE	1769:21	1769:21	6	(
ARGUMENT	1769:22	1769:22	6	tif
FIELD	1769:22	1769:22	7	tif
LEAF_NODE	1769:22	1769:22	8	tif
LEAF_NODE	1769:25	1769:25	6	)
LEAF_NODE	1769:26	1769:26	4	;
EXPR_STATEMENT	1770:1	1770:20	3	tif -> tif_diroff = 0 ;
EXPR	1770:1	1770:1	4	tif -> tif_diroff = 0
ASSIGN	1770:1	1770:19	5	tif -> tif_diroff = 0
LVAL	1770:1	1770:1	6	tif -> tif_diroff
FIELD	1770:1	1770:6	7	tif -> tif_diroff
LEAF_NODE	1770:1	1770:1	8	tif
LEAF_NODE	1770:4	1770:4	8	->
LEAF_NODE	1770:6	1770:6	8	tif_diroff
ASSIGN_OP	1770:17	1770:17	6	=
LEAF_NODE	1770:17	1770:17	7	=
RVAL	1770:19	1770:19	6	0
FIELD	1770:19	1770:19	7	0
LEAF_NODE	1770:19	1770:19	8	0
LEAF_NODE	1770:20	1770:20	4	;
EXPR_STATEMENT	1771:1	1771:24	3	tif -> tif_nextdiroff = 0 ;
EXPR	1771:1	1771:1	4	tif -> tif_nextdiroff = 0
ASSIGN	1771:1	1771:23	5	tif -> tif_nextdiroff = 0
LVAL	1771:1	1771:1	6	tif -> tif_nextdiroff
FIELD	1771:1	1771:6	7	tif -> tif_nextdiroff
LEAF_NODE	1771:1	1771:1	8	tif
LEAF_NODE	1771:4	1771:4	8	->
LEAF_NODE	1771:6	1771:6	8	tif_nextdiroff
ASSIGN_OP	1771:21	1771:21	6	=
LEAF_NODE	1771:21	1771:21	7	=
RVAL	1771:23	1771:23	6	0
FIELD	1771:23	1771:23	7	0
LEAF_NODE	1771:23	1771:23	8	0
LEAF_NODE	1771:24	1771:24	4	;
EXPR_STATEMENT	1772:1	1772:20	3	tif -> tif_curoff = 0 ;
EXPR	1772:1	1772:1	4	tif -> tif_curoff = 0
ASSIGN	1772:1	1772:19	5	tif -> tif_curoff = 0
LVAL	1772:1	1772:1	6	tif -> tif_curoff
FIELD	1772:1	1772:6	7	tif -> tif_curoff
LEAF_NODE	1772:1	1772:1	8	tif
LEAF_NODE	1772:4	1772:4	8	->
LEAF_NODE	1772:6	1772:6	8	tif_curoff
ASSIGN_OP	1772:17	1772:17	6	=
LEAF_NODE	1772:17	1772:17	7	=
RVAL	1772:19	1772:19	6	0
FIELD	1772:19	1772:19	7	0
LEAF_NODE	1772:19	1772:19	8	0
LEAF_NODE	1772:20	1772:20	4	;
EXPR_STATEMENT	1773:1	1773:27	3	tif -> tif_row = ( uint32 ) - 1 ;
EXPR	1773:1	1773:1	4	tif -> tif_row = ( uint32 ) - 1
ASSIGN	1773:1	1773:16	5	tif -> tif_row = ( uint32 ) - 1
LVAL	1773:1	1773:1	6	tif -> tif_row
FIELD	1773:1	1773:6	7	tif -> tif_row
LEAF_NODE	1773:1	1773:1	8	tif
LEAF_NODE	1773:4	1773:4	8	->
LEAF_NODE	1773:6	1773:6	8	tif_row
ASSIGN_OP	1773:14	1773:14	6	=
LEAF_NODE	1773:14	1773:14	7	=
RVAL	1773:16	1773:25	6	( uint32 ) - 1
LEAF_NODE	1773:16	1773:16	7	(
TYPE_NAME	1773:17	1773:17	7	uint32
LEAF_NODE	1773:17	1773:17	8	uint32
LEAF_NODE	1773:23	1773:23	7	)
UNARY_EXPR	1773:25	1773:26	7	- 1
UNARY_OPERATOR	1773:25	1773:25	8	-
LEAF_NODE	1773:25	1773:25	9	-
FIELD	1773:26	1773:26	8	1
LEAF_NODE	1773:26	1773:26	9	1
LEAF_NODE	1773:27	1773:27	4	;
EXPR_STATEMENT	1774:1	1774:32	3	tif -> tif_curstrip = ( uint32 ) - 1 ;
EXPR	1774:1	1774:1	4	tif -> tif_curstrip = ( uint32 ) - 1
ASSIGN	1774:1	1774:21	5	tif -> tif_curstrip = ( uint32 ) - 1
LVAL	1774:1	1774:1	6	tif -> tif_curstrip
FIELD	1774:1	1774:6	7	tif -> tif_curstrip
LEAF_NODE	1774:1	1774:1	8	tif
LEAF_NODE	1774:4	1774:4	8	->
LEAF_NODE	1774:6	1774:6	8	tif_curstrip
ASSIGN_OP	1774:19	1774:19	6	=
LEAF_NODE	1774:19	1774:19	7	=
RVAL	1774:21	1774:30	6	( uint32 ) - 1
LEAF_NODE	1774:21	1774:21	7	(
TYPE_NAME	1774:22	1774:22	7	uint32
LEAF_NODE	1774:22	1774:22	8	uint32
LEAF_NODE	1774:28	1774:28	7	)
UNARY_EXPR	1774:30	1774:31	7	- 1
UNARY_OPERATOR	1774:30	1774:30	8	-
LEAF_NODE	1774:30	1774:30	9	-
FIELD	1774:31	1774:31	8	1
LEAF_NODE	1774:31	1774:31	9	1
LEAF_NODE	1774:32	1774:32	4	;
JUMP_STATEMENT	1775:1	1775:11	3	return ( 1 ) ;
KEYWORD	1775:1	1775:1	4	return
LEAF_NODE	1775:1	1775:1	5	return
DESTINATION	1775:8	1775:8	4	( 1 )
EXPR	1775:8	1775:10	5	( 1 )
LEAF_NODE	1775:8	1775:8	6	(
FIELD	1775:9	1775:9	6	1
LEAF_NODE	1775:9	1775:9	7	1
LEAF_NODE	1775:10	1775:10	6	)
LEAF_NODE	1775:11	1775:11	4	;
LEAF_NODE	1776:0	1776:0	2	}
