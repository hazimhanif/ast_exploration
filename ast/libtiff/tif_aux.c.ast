SOURCE_FILE	35:0	405:0	0	
FUNCTION_DEF	35:0	44:0	1	
RETURN_TYPE	35:0	35:0	2	uint32
TYPE_NAME	35:0	35:0	3	uint32
LEAF_NODE	35:0	35:0	4	uint32
FUNCTION_NAME	36:0	36:0	2	_TIFFMultiply32
LEAF_NODE	36:0	36:0	3	_TIFFMultiply32
PARAMETER_LIST	36:15	36:73	2	( TIFF * tif , uint32 first , uint32 second , const char * where )
LEAF_NODE	36:15	36:15	3	(
PARAMETER_DECL	36:16	36:22	3	TIFF * tif
TYPE	36:16	36:20	4	TIFF *
TYPE_NAME	36:16	36:16	5	TIFF
LEAF_NODE	36:16	36:16	6	TIFF
POINTER	36:20	36:20	5	*
LEAF_NODE	36:20	36:20	6	*
NAME	36:22	36:22	4	tif
LEAF_NODE	36:22	36:22	5	tif
LEAF_NODE	36:25	36:25	3	,
PARAMETER_DECL	36:27	36:34	3	uint32 first
TYPE	36:27	36:27	4	uint32
TYPE_NAME	36:27	36:27	5	uint32
LEAF_NODE	36:27	36:27	6	uint32
NAME	36:34	36:34	4	first
LEAF_NODE	36:34	36:34	5	first
LEAF_NODE	36:39	36:39	3	,
PARAMETER_DECL	36:41	36:48	3	uint32 second
TYPE	36:41	36:41	4	uint32
TYPE_NAME	36:41	36:41	5	uint32
LEAF_NODE	36:41	36:41	6	uint32
NAME	36:48	36:48	4	second
LEAF_NODE	36:48	36:48	5	second
LEAF_NODE	36:54	36:54	3	,
PARAMETER_DECL	36:56	36:68	3	const char * where
TYPE	36:56	36:66	4	const char *
TYPE_NAME	36:56	36:62	5	const char
LEAF_NODE	36:56	36:56	6	const
LEAF_NODE	36:62	36:62	6	char
POINTER	36:66	36:66	5	*
LEAF_NODE	36:66	36:66	6	*
NAME	36:68	36:68	4	where
LEAF_NODE	36:68	36:68	5	where
LEAF_NODE	36:73	36:73	3	)
LEAF_NODE	37:0	37:0	2	{
STATEMENTS	38:1	43:1	2	
SELECTION	38:1	38:49	3	
KEYWORD	38:1	38:1	4	if
LEAF_NODE	38:1	38:1	5	if
LEAF_NODE	38:4	38:4	4	(
CONDITION	38:5	38:5	4	second && first > TIFF_UINT32_MAX / second
EXPR	38:5	38:5	5	second && first > TIFF_UINT32_MAX / second
AND	38:5	38:15	6	second && first > TIFF_UINT32_MAX / second
EXPR	38:5	38:5	7	second
FIELD	38:5	38:5	8	second
LEAF_NODE	38:5	38:5	9	second
LEAF_NODE	38:12	38:12	7	&&
EXPR	38:15	38:41	7	first > TIFF_UINT32_MAX / second
FIELD	38:15	38:15	8	first
LEAF_NODE	38:15	38:15	9	first
REL_OPERATOR	38:21	38:21	8	>
LEAF_NODE	38:21	38:21	9	>
FIELD	38:23	38:23	8	TIFF_UINT32_MAX
LEAF_NODE	38:23	38:23	9	TIFF_UINT32_MAX
LEAF_NODE	38:39	38:39	8	/
FIELD	38:41	38:41	8	second
LEAF_NODE	38:41	38:41	9	second
LEAF_NODE	38:47	38:47	4	)
STATEMENTS	38:49	41:1	4	
LEAF_NODE	38:49	38:49	5	{
STATEMENTS	39:2	40:2	5	
EXPR_STATEMENT	39:2	39:75	6	TIFFErrorExt ( tif -> tif_clientdata , where , "Integer overflow in %s" , where ) ;
EXPR	39:2	39:2	7	TIFFErrorExt ( tif -> tif_clientdata , where , "Integer overflow in %s" , where )
FUNCTION_CALL	39:2	39:74	8	TIFFErrorExt ( tif -> tif_clientdata , where , "Integer overflow in %s" , where )
CALLEE	39:2	39:2	9	TIFFErrorExt
LEAF_NODE	39:2	39:2	10	TIFFErrorExt
LEAF_NODE	39:14	39:14	9	(
ARGUMENT	39:15	39:15	9	tif -> tif_clientdata
FIELD	39:15	39:20	10	tif -> tif_clientdata
LEAF_NODE	39:15	39:15	11	tif
LEAF_NODE	39:18	39:18	11	->
LEAF_NODE	39:20	39:20	11	tif_clientdata
LEAF_NODE	39:34	39:34	9	,
ARGUMENT	39:36	39:36	9	where
FIELD	39:36	39:36	10	where
LEAF_NODE	39:36	39:36	11	where
LEAF_NODE	39:41	39:41	9	,
ARGUMENT	39:43	39:43	9	"Integer overflow in %s"
FIELD	39:43	39:43	10	"Integer overflow in %s"
LEAF_NODE	39:43	39:43	11	"Integer overflow in %s"
LEAF_NODE	39:67	39:67	9	,
ARGUMENT	39:69	39:69	9	where
FIELD	39:69	39:69	10	where
LEAF_NODE	39:69	39:69	11	where
LEAF_NODE	39:74	39:74	9	)
LEAF_NODE	39:75	39:75	7	;
JUMP_STATEMENT	40:2	40:10	6	return 0 ;
KEYWORD	40:2	40:2	7	return
LEAF_NODE	40:2	40:2	8	return
DESTINATION	40:9	40:9	7	0
EXPR	40:9	40:9	8	0
FIELD	40:9	40:9	9	0
LEAF_NODE	40:9	40:9	10	0
LEAF_NODE	40:10	40:10	7	;
LEAF_NODE	41:1	41:1	5	}
JUMP_STATEMENT	43:1	43:22	3	return first * second ;
KEYWORD	43:1	43:1	4	return
LEAF_NODE	43:1	43:1	5	return
DESTINATION	43:8	43:8	4	first * second
EXPR	43:8	43:16	5	first * second
FIELD	43:8	43:8	6	first
LEAF_NODE	43:8	43:8	7	first
LEAF_NODE	43:14	43:14	6	*
FIELD	43:16	43:16	6	second
LEAF_NODE	43:16	43:16	7	second
LEAF_NODE	43:22	43:22	4	;
LEAF_NODE	44:0	44:0	2	}
FUNCTION_DEF	46:0	55:0	1	
RETURN_TYPE	46:0	46:0	2	uint64
TYPE_NAME	46:0	46:0	3	uint64
LEAF_NODE	46:0	46:0	4	uint64
FUNCTION_NAME	47:0	47:0	2	_TIFFMultiply64
LEAF_NODE	47:0	47:0	3	_TIFFMultiply64
PARAMETER_LIST	47:15	47:73	2	( TIFF * tif , uint64 first , uint64 second , const char * where )
LEAF_NODE	47:15	47:15	3	(
PARAMETER_DECL	47:16	47:22	3	TIFF * tif
TYPE	47:16	47:20	4	TIFF *
TYPE_NAME	47:16	47:16	5	TIFF
LEAF_NODE	47:16	47:16	6	TIFF
POINTER	47:20	47:20	5	*
LEAF_NODE	47:20	47:20	6	*
NAME	47:22	47:22	4	tif
LEAF_NODE	47:22	47:22	5	tif
LEAF_NODE	47:25	47:25	3	,
PARAMETER_DECL	47:27	47:34	3	uint64 first
TYPE	47:27	47:27	4	uint64
TYPE_NAME	47:27	47:27	5	uint64
LEAF_NODE	47:27	47:27	6	uint64
NAME	47:34	47:34	4	first
LEAF_NODE	47:34	47:34	5	first
LEAF_NODE	47:39	47:39	3	,
PARAMETER_DECL	47:41	47:48	3	uint64 second
TYPE	47:41	47:41	4	uint64
TYPE_NAME	47:41	47:41	5	uint64
LEAF_NODE	47:41	47:41	6	uint64
NAME	47:48	47:48	4	second
LEAF_NODE	47:48	47:48	5	second
LEAF_NODE	47:54	47:54	3	,
PARAMETER_DECL	47:56	47:68	3	const char * where
TYPE	47:56	47:66	4	const char *
TYPE_NAME	47:56	47:62	5	const char
LEAF_NODE	47:56	47:56	6	const
LEAF_NODE	47:62	47:62	6	char
POINTER	47:66	47:66	5	*
LEAF_NODE	47:66	47:66	6	*
NAME	47:68	47:68	4	where
LEAF_NODE	47:68	47:68	5	where
LEAF_NODE	47:73	47:73	3	)
LEAF_NODE	48:0	48:0	2	{
STATEMENTS	49:1	54:1	2	
SELECTION	49:1	49:49	3	
KEYWORD	49:1	49:1	4	if
LEAF_NODE	49:1	49:1	5	if
LEAF_NODE	49:4	49:4	4	(
CONDITION	49:5	49:5	4	second && first > TIFF_UINT64_MAX / second
EXPR	49:5	49:5	5	second && first > TIFF_UINT64_MAX / second
AND	49:5	49:15	6	second && first > TIFF_UINT64_MAX / second
EXPR	49:5	49:5	7	second
FIELD	49:5	49:5	8	second
LEAF_NODE	49:5	49:5	9	second
LEAF_NODE	49:12	49:12	7	&&
EXPR	49:15	49:41	7	first > TIFF_UINT64_MAX / second
FIELD	49:15	49:15	8	first
LEAF_NODE	49:15	49:15	9	first
REL_OPERATOR	49:21	49:21	8	>
LEAF_NODE	49:21	49:21	9	>
FIELD	49:23	49:23	8	TIFF_UINT64_MAX
LEAF_NODE	49:23	49:23	9	TIFF_UINT64_MAX
LEAF_NODE	49:39	49:39	8	/
FIELD	49:41	49:41	8	second
LEAF_NODE	49:41	49:41	9	second
LEAF_NODE	49:47	49:47	4	)
STATEMENTS	49:49	52:1	4	
LEAF_NODE	49:49	49:49	5	{
STATEMENTS	50:2	51:2	5	
EXPR_STATEMENT	50:2	50:75	6	TIFFErrorExt ( tif -> tif_clientdata , where , "Integer overflow in %s" , where ) ;
EXPR	50:2	50:2	7	TIFFErrorExt ( tif -> tif_clientdata , where , "Integer overflow in %s" , where )
FUNCTION_CALL	50:2	50:74	8	TIFFErrorExt ( tif -> tif_clientdata , where , "Integer overflow in %s" , where )
CALLEE	50:2	50:2	9	TIFFErrorExt
LEAF_NODE	50:2	50:2	10	TIFFErrorExt
LEAF_NODE	50:14	50:14	9	(
ARGUMENT	50:15	50:15	9	tif -> tif_clientdata
FIELD	50:15	50:20	10	tif -> tif_clientdata
LEAF_NODE	50:15	50:15	11	tif
LEAF_NODE	50:18	50:18	11	->
LEAF_NODE	50:20	50:20	11	tif_clientdata
LEAF_NODE	50:34	50:34	9	,
ARGUMENT	50:36	50:36	9	where
FIELD	50:36	50:36	10	where
LEAF_NODE	50:36	50:36	11	where
LEAF_NODE	50:41	50:41	9	,
ARGUMENT	50:43	50:43	9	"Integer overflow in %s"
FIELD	50:43	50:43	10	"Integer overflow in %s"
LEAF_NODE	50:43	50:43	11	"Integer overflow in %s"
LEAF_NODE	50:67	50:67	9	,
ARGUMENT	50:69	50:69	9	where
FIELD	50:69	50:69	10	where
LEAF_NODE	50:69	50:69	11	where
LEAF_NODE	50:74	50:74	9	)
LEAF_NODE	50:75	50:75	7	;
JUMP_STATEMENT	51:2	51:10	6	return 0 ;
KEYWORD	51:2	51:2	7	return
LEAF_NODE	51:2	51:2	8	return
DESTINATION	51:9	51:9	7	0
EXPR	51:9	51:9	8	0
FIELD	51:9	51:9	9	0
LEAF_NODE	51:9	51:9	10	0
LEAF_NODE	51:10	51:10	7	;
LEAF_NODE	52:1	52:1	5	}
JUMP_STATEMENT	54:1	54:22	3	return first * second ;
KEYWORD	54:1	54:1	4	return
LEAF_NODE	54:1	54:1	5	return
DESTINATION	54:8	54:8	4	first * second
EXPR	54:8	54:16	5	first * second
FIELD	54:8	54:8	6	first
LEAF_NODE	54:8	54:8	7	first
LEAF_NODE	54:14	54:14	6	*
FIELD	54:16	54:16	6	second
LEAF_NODE	54:16	54:16	7	second
LEAF_NODE	54:22	54:22	4	;
LEAF_NODE	55:0	55:0	2	}
FUNCTION_DEF	57:0	80:0	1	
RETURN_TYPE	57:0	57:0	2	tmsize_t
TYPE_NAME	57:0	57:0	3	tmsize_t
LEAF_NODE	57:0	57:0	4	tmsize_t
FUNCTION_NAME	58:0	58:0	2	_TIFFMultiplySSize
LEAF_NODE	58:0	58:0	3	_TIFFMultiplySSize
PARAMETER_LIST	58:18	58:80	2	( TIFF * tif , tmsize_t first , tmsize_t second , const char * where )
LEAF_NODE	58:18	58:18	3	(
PARAMETER_DECL	58:19	58:25	3	TIFF * tif
TYPE	58:19	58:23	4	TIFF *
TYPE_NAME	58:19	58:19	5	TIFF
LEAF_NODE	58:19	58:19	6	TIFF
POINTER	58:23	58:23	5	*
LEAF_NODE	58:23	58:23	6	*
NAME	58:25	58:25	4	tif
LEAF_NODE	58:25	58:25	5	tif
LEAF_NODE	58:28	58:28	3	,
PARAMETER_DECL	58:30	58:39	3	tmsize_t first
TYPE	58:30	58:30	4	tmsize_t
TYPE_NAME	58:30	58:30	5	tmsize_t
LEAF_NODE	58:30	58:30	6	tmsize_t
NAME	58:39	58:39	4	first
LEAF_NODE	58:39	58:39	5	first
LEAF_NODE	58:44	58:44	3	,
PARAMETER_DECL	58:46	58:55	3	tmsize_t second
TYPE	58:46	58:46	4	tmsize_t
TYPE_NAME	58:46	58:46	5	tmsize_t
LEAF_NODE	58:46	58:46	6	tmsize_t
NAME	58:55	58:55	4	second
LEAF_NODE	58:55	58:55	5	second
LEAF_NODE	58:61	58:61	3	,
PARAMETER_DECL	58:63	58:75	3	const char * where
TYPE	58:63	58:73	4	const char *
TYPE_NAME	58:63	58:69	5	const char
LEAF_NODE	58:63	58:63	6	const
LEAF_NODE	58:69	58:69	6	char
POINTER	58:73	58:73	5	*
LEAF_NODE	58:73	58:73	6	*
NAME	58:75	58:75	4	where
LEAF_NODE	58:75	58:75	5	where
LEAF_NODE	58:80	58:80	3	)
LEAF_NODE	59:0	59:0	2	{
STATEMENTS	60:4	79:4	2	
SELECTION	60:4	61:4	3	
KEYWORD	60:4	60:4	4	if
LEAF_NODE	60:4	60:4	5	if
LEAF_NODE	60:6	60:6	4	(
CONDITION	60:8	60:8	4	first <= 0 || second <= 0
EXPR	60:8	60:8	5	first <= 0 || second <= 0
OR	60:8	60:22	6	first <= 0 || second <= 0
EXPR	60:8	60:17	7	first <= 0
FIELD	60:8	60:8	8	first
LEAF_NODE	60:8	60:8	9	first
REL_OPERATOR	60:14	60:14	8	<=
LEAF_NODE	60:14	60:14	9	<=
FIELD	60:17	60:17	8	0
LEAF_NODE	60:17	60:17	9	0
LEAF_NODE	60:19	60:19	7	||
EXPR	60:22	60:32	7	second <= 0
FIELD	60:22	60:22	8	second
LEAF_NODE	60:22	60:22	9	second
REL_OPERATOR	60:29	60:29	8	<=
LEAF_NODE	60:29	60:29	9	<=
FIELD	60:32	60:32	8	0
LEAF_NODE	60:32	60:32	9	0
LEAF_NODE	60:34	60:34	4	)
STATEMENTS	61:4	68:4	4	
LEAF_NODE	61:4	61:4	5	{
STATEMENTS	62:8	67:8	5	
SELECTION	62:8	63:8	6	
KEYWORD	62:8	62:8	7	if
LEAF_NODE	62:8	62:8	8	if
LEAF_NODE	62:10	62:10	7	(
CONDITION	62:12	62:12	7	tif != NULL && where != NULL
EXPR	62:12	62:12	8	tif != NULL && where != NULL
AND	62:12	62:27	9	tif != NULL && where != NULL
EXPR	62:12	62:19	10	tif != NULL
FIELD	62:12	62:12	11	tif
LEAF_NODE	62:12	62:12	12	tif
EQ_OPERATOR	62:16	62:16	11	!=
LEAF_NODE	62:16	62:16	12	!=
FIELD	62:19	62:19	11	NULL
LEAF_NODE	62:19	62:19	12	NULL
LEAF_NODE	62:24	62:24	10	&&
EXPR	62:27	62:36	10	where != NULL
FIELD	62:27	62:27	11	where
LEAF_NODE	62:27	62:27	12	where
EQ_OPERATOR	62:33	62:33	11	!=
LEAF_NODE	62:33	62:33	12	!=
FIELD	62:36	62:36	11	NULL
LEAF_NODE	62:36	62:36	12	NULL
LEAF_NODE	62:41	62:41	7	)
STATEMENTS	63:8	66:8	7	
LEAF_NODE	63:8	63:8	8	{
STATEMENTS	64:12	64:12	8	
EXPR_STATEMENT	64:12	65:80	9	TIFFErrorExt ( tif -> tif_clientdata , where , "Invalid argument to _TIFFMultiplySSize() in %s" , where ) ;
EXPR	64:12	64:12	10	TIFFErrorExt ( tif -> tif_clientdata , where , "Invalid argument to _TIFFMultiplySSize() in %s" , where )
FUNCTION_CALL	64:12	65:79	11	TIFFErrorExt ( tif -> tif_clientdata , where , "Invalid argument to _TIFFMultiplySSize() in %s" , where )
CALLEE	64:12	64:12	12	TIFFErrorExt
LEAF_NODE	64:12	64:12	13	TIFFErrorExt
LEAF_NODE	64:24	64:24	12	(
ARGUMENT	64:25	64:25	12	tif -> tif_clientdata
FIELD	64:25	64:30	13	tif -> tif_clientdata
LEAF_NODE	64:25	64:25	14	tif
LEAF_NODE	64:28	64:28	14	->
LEAF_NODE	64:30	64:30	14	tif_clientdata
LEAF_NODE	64:44	64:44	12	,
ARGUMENT	64:46	64:46	12	where
FIELD	64:46	64:46	13	where
LEAF_NODE	64:46	64:46	14	where
LEAF_NODE	64:51	64:51	12	,
ARGUMENT	65:24	65:24	12	"Invalid argument to _TIFFMultiplySSize() in %s"
FIELD	65:24	65:24	13	"Invalid argument to _TIFFMultiplySSize() in %s"
LEAF_NODE	65:24	65:24	14	"Invalid argument to _TIFFMultiplySSize() in %s"
LEAF_NODE	65:72	65:72	12	,
ARGUMENT	65:74	65:74	12	where
FIELD	65:74	65:74	13	where
LEAF_NODE	65:74	65:74	14	where
LEAF_NODE	65:79	65:79	12	)
LEAF_NODE	65:80	65:80	10	;
LEAF_NODE	66:8	66:8	8	}
JUMP_STATEMENT	67:8	67:16	6	return 0 ;
KEYWORD	67:8	67:8	7	return
LEAF_NODE	67:8	67:8	8	return
DESTINATION	67:15	67:15	7	0
EXPR	67:15	67:15	8	0
FIELD	67:15	67:15	9	0
LEAF_NODE	67:15	67:15	10	0
LEAF_NODE	67:16	67:16	7	;
LEAF_NODE	68:4	68:4	5	}
SELECTION	70:4	71:4	3	
KEYWORD	70:4	70:4	4	if
LEAF_NODE	70:4	70:4	5	if
LEAF_NODE	70:6	70:6	4	(
CONDITION	70:8	70:8	4	first > TIFF_TMSIZE_T_MAX / second
EXPR	70:8	70:36	5	first > TIFF_TMSIZE_T_MAX / second
FIELD	70:8	70:8	6	first
LEAF_NODE	70:8	70:8	7	first
REL_OPERATOR	70:14	70:14	6	>
LEAF_NODE	70:14	70:14	7	>
FIELD	70:16	70:16	6	TIFF_TMSIZE_T_MAX
LEAF_NODE	70:16	70:16	7	TIFF_TMSIZE_T_MAX
LEAF_NODE	70:34	70:34	6	/
FIELD	70:36	70:36	6	second
LEAF_NODE	70:36	70:36	7	second
LEAF_NODE	70:43	70:43	4	)
STATEMENTS	71:4	78:4	4	
LEAF_NODE	71:4	71:4	5	{
STATEMENTS	72:8	77:8	5	
SELECTION	72:8	73:8	6	
KEYWORD	72:8	72:8	7	if
LEAF_NODE	72:8	72:8	8	if
LEAF_NODE	72:10	72:10	7	(
CONDITION	72:12	72:12	7	tif != NULL && where != NULL
EXPR	72:12	72:12	8	tif != NULL && where != NULL
AND	72:12	72:27	9	tif != NULL && where != NULL
EXPR	72:12	72:19	10	tif != NULL
FIELD	72:12	72:12	11	tif
LEAF_NODE	72:12	72:12	12	tif
EQ_OPERATOR	72:16	72:16	11	!=
LEAF_NODE	72:16	72:16	12	!=
FIELD	72:19	72:19	11	NULL
LEAF_NODE	72:19	72:19	12	NULL
LEAF_NODE	72:24	72:24	10	&&
EXPR	72:27	72:36	10	where != NULL
FIELD	72:27	72:27	11	where
LEAF_NODE	72:27	72:27	12	where
EQ_OPERATOR	72:33	72:33	11	!=
LEAF_NODE	72:33	72:33	12	!=
FIELD	72:36	72:36	11	NULL
LEAF_NODE	72:36	72:36	12	NULL
LEAF_NODE	72:41	72:41	7	)
STATEMENTS	73:8	76:8	7	
LEAF_NODE	73:8	73:8	8	{
STATEMENTS	74:12	74:12	8	
EXPR_STATEMENT	74:12	75:56	9	TIFFErrorExt ( tif -> tif_clientdata , where , "Integer overflow in %s" , where ) ;
EXPR	74:12	74:12	10	TIFFErrorExt ( tif -> tif_clientdata , where , "Integer overflow in %s" , where )
FUNCTION_CALL	74:12	75:55	11	TIFFErrorExt ( tif -> tif_clientdata , where , "Integer overflow in %s" , where )
CALLEE	74:12	74:12	12	TIFFErrorExt
LEAF_NODE	74:12	74:12	13	TIFFErrorExt
LEAF_NODE	74:24	74:24	12	(
ARGUMENT	74:25	74:25	12	tif -> tif_clientdata
FIELD	74:25	74:30	13	tif -> tif_clientdata
LEAF_NODE	74:25	74:25	14	tif
LEAF_NODE	74:28	74:28	14	->
LEAF_NODE	74:30	74:30	14	tif_clientdata
LEAF_NODE	74:44	74:44	12	,
ARGUMENT	74:46	74:46	12	where
FIELD	74:46	74:46	13	where
LEAF_NODE	74:46	74:46	14	where
LEAF_NODE	74:51	74:51	12	,
ARGUMENT	75:24	75:24	12	"Integer overflow in %s"
FIELD	75:24	75:24	13	"Integer overflow in %s"
LEAF_NODE	75:24	75:24	14	"Integer overflow in %s"
LEAF_NODE	75:48	75:48	12	,
ARGUMENT	75:50	75:50	12	where
FIELD	75:50	75:50	13	where
LEAF_NODE	75:50	75:50	14	where
LEAF_NODE	75:55	75:55	12	)
LEAF_NODE	75:56	75:56	10	;
LEAF_NODE	76:8	76:8	8	}
JUMP_STATEMENT	77:8	77:16	6	return 0 ;
KEYWORD	77:8	77:8	7	return
LEAF_NODE	77:8	77:8	8	return
DESTINATION	77:15	77:15	7	0
EXPR	77:15	77:15	8	0
FIELD	77:15	77:15	9	0
LEAF_NODE	77:15	77:15	10	0
LEAF_NODE	77:16	77:16	7	;
LEAF_NODE	78:4	78:4	5	}
JUMP_STATEMENT	79:4	79:25	3	return first * second ;
KEYWORD	79:4	79:4	4	return
LEAF_NODE	79:4	79:4	5	return
DESTINATION	79:11	79:11	4	first * second
EXPR	79:11	79:19	5	first * second
FIELD	79:11	79:11	6	first
LEAF_NODE	79:11	79:11	7	first
LEAF_NODE	79:17	79:17	6	*
FIELD	79:19	79:19	6	second
LEAF_NODE	79:19	79:19	7	second
LEAF_NODE	79:25	79:25	4	;
LEAF_NODE	80:0	80:0	2	}
FUNCTION_DEF	82:0	93:0	1	
RETURN_TYPE	82:0	82:0	2	tmsize_t
TYPE_NAME	82:0	82:0	3	tmsize_t
LEAF_NODE	82:0	82:0	4	tmsize_t
FUNCTION_NAME	82:9	82:9	2	_TIFFCastUInt64ToSSize
LEAF_NODE	82:9	82:9	3	_TIFFCastUInt64ToSSize
PARAMETER_LIST	82:31	82:73	2	( TIFF * tif , uint64 val , const char * module )
LEAF_NODE	82:31	82:31	3	(
PARAMETER_DECL	82:32	82:38	3	TIFF * tif
TYPE	82:32	82:36	4	TIFF *
TYPE_NAME	82:32	82:32	5	TIFF
LEAF_NODE	82:32	82:32	6	TIFF
POINTER	82:36	82:36	5	*
LEAF_NODE	82:36	82:36	6	*
NAME	82:38	82:38	4	tif
LEAF_NODE	82:38	82:38	5	tif
LEAF_NODE	82:41	82:41	3	,
PARAMETER_DECL	82:43	82:50	3	uint64 val
TYPE	82:43	82:43	4	uint64
TYPE_NAME	82:43	82:43	5	uint64
LEAF_NODE	82:43	82:43	6	uint64
NAME	82:50	82:50	4	val
LEAF_NODE	82:50	82:50	5	val
LEAF_NODE	82:53	82:53	3	,
PARAMETER_DECL	82:55	82:67	3	const char * module
TYPE	82:55	82:65	4	const char *
TYPE_NAME	82:55	82:61	5	const char
LEAF_NODE	82:55	82:55	6	const
LEAF_NODE	82:61	82:61	6	char
POINTER	82:65	82:65	5	*
LEAF_NODE	82:65	82:65	6	*
NAME	82:67	82:67	4	module
LEAF_NODE	82:67	82:67	5	module
LEAF_NODE	82:73	82:73	3	)
LEAF_NODE	83:0	83:0	2	{
STATEMENTS	84:4	92:4	2	
SELECTION	84:4	85:4	3	
KEYWORD	84:4	84:4	4	if
LEAF_NODE	84:4	84:4	5	if
LEAF_NODE	84:6	84:6	4	(
CONDITION	84:8	84:8	4	val > ( uint64 ) TIFF_TMSIZE_T_MAX
EXPR	84:8	84:22	5	val > ( uint64 ) TIFF_TMSIZE_T_MAX
FIELD	84:8	84:8	6	val
LEAF_NODE	84:8	84:8	7	val
REL_OPERATOR	84:12	84:12	6	>
LEAF_NODE	84:12	84:12	7	>
LEAF_NODE	84:14	84:14	6	(
TYPE_NAME	84:15	84:15	6	uint64
LEAF_NODE	84:15	84:15	7	uint64
LEAF_NODE	84:21	84:21	6	)
FIELD	84:22	84:22	6	TIFF_TMSIZE_T_MAX
LEAF_NODE	84:22	84:22	7	TIFF_TMSIZE_T_MAX
LEAF_NODE	84:40	84:40	4	)
STATEMENTS	85:4	91:4	4	
LEAF_NODE	85:4	85:4	5	{
STATEMENTS	86:8	90:8	5	
SELECTION	86:8	87:8	6	
KEYWORD	86:8	86:8	7	if
LEAF_NODE	86:8	86:8	8	if
LEAF_NODE	86:10	86:10	7	(
CONDITION	86:12	86:12	7	tif != NULL && module != NULL
EXPR	86:12	86:12	8	tif != NULL && module != NULL
AND	86:12	86:27	9	tif != NULL && module != NULL
EXPR	86:12	86:19	10	tif != NULL
FIELD	86:12	86:12	11	tif
LEAF_NODE	86:12	86:12	12	tif
EQ_OPERATOR	86:16	86:16	11	!=
LEAF_NODE	86:16	86:16	12	!=
FIELD	86:19	86:19	11	NULL
LEAF_NODE	86:19	86:19	12	NULL
LEAF_NODE	86:24	86:24	10	&&
EXPR	86:27	86:37	10	module != NULL
FIELD	86:27	86:27	11	module
LEAF_NODE	86:27	86:27	12	module
EQ_OPERATOR	86:34	86:34	11	!=
LEAF_NODE	86:34	86:34	12	!=
FIELD	86:37	86:37	11	NULL
LEAF_NODE	86:37	86:37	12	NULL
LEAF_NODE	86:42	86:42	7	)
STATEMENTS	87:8	89:8	7	
LEAF_NODE	87:8	87:8	8	{
STATEMENTS	88:12	88:12	8	
EXPR_STATEMENT	88:12	88:71	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" ) ;
EXPR	88:12	88:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" )
FUNCTION_CALL	88:12	88:70	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" )
CALLEE	88:12	88:12	12	TIFFErrorExt
LEAF_NODE	88:12	88:12	13	TIFFErrorExt
LEAF_NODE	88:24	88:24	12	(
ARGUMENT	88:25	88:25	12	tif -> tif_clientdata
FIELD	88:25	88:30	13	tif -> tif_clientdata
LEAF_NODE	88:25	88:25	14	tif
LEAF_NODE	88:28	88:28	14	->
LEAF_NODE	88:30	88:30	14	tif_clientdata
LEAF_NODE	88:44	88:44	12	,
ARGUMENT	88:45	88:45	12	module
FIELD	88:45	88:45	13	module
LEAF_NODE	88:45	88:45	14	module
LEAF_NODE	88:51	88:51	12	,
ARGUMENT	88:52	88:52	12	"Integer overflow"
FIELD	88:52	88:52	13	"Integer overflow"
LEAF_NODE	88:52	88:52	14	"Integer overflow"
LEAF_NODE	88:70	88:70	12	)
LEAF_NODE	88:71	88:71	10	;
LEAF_NODE	89:8	89:8	8	}
JUMP_STATEMENT	90:8	90:16	6	return 0 ;
KEYWORD	90:8	90:8	7	return
LEAF_NODE	90:8	90:8	8	return
DESTINATION	90:15	90:15	7	0
EXPR	90:15	90:15	8	0
FIELD	90:15	90:15	9	0
LEAF_NODE	90:15	90:15	10	0
LEAF_NODE	90:16	90:16	7	;
LEAF_NODE	91:4	91:4	5	}
JUMP_STATEMENT	92:4	92:24	3	return ( tmsize_t ) val ;
KEYWORD	92:4	92:4	4	return
LEAF_NODE	92:4	92:4	5	return
DESTINATION	92:11	92:11	4	( tmsize_t ) val
EXPR	92:11	92:21	5	( tmsize_t ) val
LEAF_NODE	92:11	92:11	6	(
TYPE_NAME	92:12	92:12	6	tmsize_t
LEAF_NODE	92:12	92:12	7	tmsize_t
LEAF_NODE	92:20	92:20	6	)
FIELD	92:21	92:21	6	val
LEAF_NODE	92:21	92:21	7	val
LEAF_NODE	92:24	92:24	4	;
LEAF_NODE	93:0	93:0	2	}
FUNCTION_DEF	95:0	117:0	1	
RETURN_TYPE	95:0	95:4	2	void *
TYPE_NAME	95:0	95:0	3	void
LEAF_NODE	95:0	95:0	4	void
LEAF_NODE	95:4	95:4	3	*
FUNCTION_NAME	96:0	96:0	2	_TIFFCheckRealloc
LEAF_NODE	96:0	96:0	3	_TIFFCheckRealloc
PARAMETER_LIST	96:17	97:56	2	( TIFF * tif , void * buffer , tmsize_t nmemb , tmsize_t elem_size , const char * what )
LEAF_NODE	96:17	96:17	3	(
PARAMETER_DECL	96:18	96:24	3	TIFF * tif
TYPE	96:18	96:22	4	TIFF *
TYPE_NAME	96:18	96:18	5	TIFF
LEAF_NODE	96:18	96:18	6	TIFF
POINTER	96:22	96:22	5	*
LEAF_NODE	96:22	96:22	6	*
NAME	96:24	96:24	4	tif
LEAF_NODE	96:24	96:24	5	tif
LEAF_NODE	96:27	96:27	3	,
PARAMETER_DECL	96:29	96:35	3	void * buffer
TYPE	96:29	96:33	4	void *
TYPE_NAME	96:29	96:29	5	void
LEAF_NODE	96:29	96:29	6	void
POINTER	96:33	96:33	5	*
LEAF_NODE	96:33	96:33	6	*
NAME	96:35	96:35	4	buffer
LEAF_NODE	96:35	96:35	5	buffer
LEAF_NODE	96:41	96:41	3	,
PARAMETER_DECL	97:4	97:13	3	tmsize_t nmemb
TYPE	97:4	97:4	4	tmsize_t
TYPE_NAME	97:4	97:4	5	tmsize_t
LEAF_NODE	97:4	97:4	6	tmsize_t
NAME	97:13	97:13	4	nmemb
LEAF_NODE	97:13	97:13	5	nmemb
LEAF_NODE	97:18	97:18	3	,
PARAMETER_DECL	97:20	97:29	3	tmsize_t elem_size
TYPE	97:20	97:20	4	tmsize_t
TYPE_NAME	97:20	97:20	5	tmsize_t
LEAF_NODE	97:20	97:20	6	tmsize_t
NAME	97:29	97:29	4	elem_size
LEAF_NODE	97:29	97:29	5	elem_size
LEAF_NODE	97:38	97:38	3	,
PARAMETER_DECL	97:40	97:52	3	const char * what
TYPE	97:40	97:50	4	const char *
TYPE_NAME	97:40	97:46	5	const char
LEAF_NODE	97:40	97:40	6	const
LEAF_NODE	97:46	97:46	6	char
POINTER	97:50	97:50	5	*
LEAF_NODE	97:50	97:50	6	*
NAME	97:52	97:52	4	what
LEAF_NODE	97:52	97:52	5	what
LEAF_NODE	97:56	97:56	3	)
LEAF_NODE	98:0	98:0	2	{
STATEMENTS	99:1	116:1	2	
SIMPLE_DECL	99:1	99:16	3	void * cp ; cp = NULL ;
VAR_DECL	99:1	99:7	4	void * cp ; cp = NULL
TYPE	99:1	99:5	5	void *
TYPE_NAME	99:1	99:1	6	void
LEAF_NODE	99:1	99:1	7	void
POINTER	99:5	99:5	6	*
LEAF_NODE	99:5	99:5	7	*
NAME	99:7	99:7	5	cp
LEAF_NODE	99:7	99:7	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	99:7	99:7	5	cp = NULL
ASSIGN	99:7	99:12	6	cp = NULL
LVAL	99:7	99:7	7	cp
NAME	99:7	99:7	8	cp
LEAF_NODE	99:7	99:7	9	cp
ASSIGN_OP	99:10	99:10	7	=
LEAF_NODE	99:10	99:10	8	=
RVAL	99:12	99:12	7	NULL
FIELD	99:12	99:12	8	NULL
LEAF_NODE	99:12	99:12	9	NULL
LEAF_NODE	99:16	99:16	4	;
SIMPLE_DECL	100:8	100:72	3	tmsize_t count ; count = _TIFFMultiplySSize ( tif , nmemb , elem_size , NULL ) ;
VAR_DECL	100:8	100:17	4	tmsize_t count ; count = _TIFFMultiplySSize ( tif , nmemb , elem_size , NULL )
TYPE	100:8	100:8	5	tmsize_t
TYPE_NAME	100:8	100:8	6	tmsize_t
LEAF_NODE	100:8	100:8	7	tmsize_t
NAME	100:17	100:17	5	count
LEAF_NODE	100:17	100:17	6	count
LEAF_NODE	0:0	0:0	5	;
INIT	100:17	100:17	5	count = _TIFFMultiplySSize ( tif , nmemb , elem_size , NULL )
ASSIGN	100:17	100:25	6	count = _TIFFMultiplySSize ( tif , nmemb , elem_size , NULL )
LVAL	100:17	100:17	7	count
NAME	100:17	100:17	8	count
LEAF_NODE	100:17	100:17	9	count
ASSIGN_OP	100:23	100:23	7	=
LEAF_NODE	100:23	100:23	8	=
RVAL	100:25	100:25	7	_TIFFMultiplySSize ( tif , nmemb , elem_size , NULL )
FUNCTION_CALL	100:25	100:71	8	_TIFFMultiplySSize ( tif , nmemb , elem_size , NULL )
CALLEE	100:25	100:25	9	_TIFFMultiplySSize
LEAF_NODE	100:25	100:25	10	_TIFFMultiplySSize
LEAF_NODE	100:43	100:43	9	(
ARGUMENT	100:44	100:44	9	tif
FIELD	100:44	100:44	10	tif
LEAF_NODE	100:44	100:44	11	tif
LEAF_NODE	100:47	100:47	9	,
ARGUMENT	100:49	100:49	9	nmemb
FIELD	100:49	100:49	10	nmemb
LEAF_NODE	100:49	100:49	11	nmemb
LEAF_NODE	100:54	100:54	9	,
ARGUMENT	100:56	100:56	9	elem_size
FIELD	100:56	100:56	10	elem_size
LEAF_NODE	100:56	100:56	11	elem_size
LEAF_NODE	100:65	100:65	9	,
ARGUMENT	100:67	100:67	9	NULL
FIELD	100:67	100:67	10	NULL
LEAF_NODE	100:67	100:67	11	NULL
LEAF_NODE	100:71	100:71	9	)
LEAF_NODE	100:72	100:72	4	;
SELECTION	104:1	105:1	3	
KEYWORD	104:1	104:1	4	if
LEAF_NODE	104:1	104:1	5	if
LEAF_NODE	104:4	104:4	4	(
CONDITION	104:5	104:5	4	count != 0
EXPR	104:5	104:14	5	count != 0
FIELD	104:5	104:5	6	count
LEAF_NODE	104:5	104:5	7	count
EQ_OPERATOR	104:11	104:11	6	!=
LEAF_NODE	104:11	104:11	7	!=
FIELD	104:14	104:14	6	0
LEAF_NODE	104:14	104:14	7	0
LEAF_NODE	104:15	104:15	4	)
STATEMENTS	105:1	107:1	4	
LEAF_NODE	105:1	105:1	5	{
STATEMENTS	106:2	106:2	5	
EXPR_STATEMENT	106:2	106:34	6	cp = _TIFFrealloc ( buffer , count ) ;
EXPR	106:2	106:2	7	cp = _TIFFrealloc ( buffer , count )
ASSIGN	106:2	106:7	8	cp = _TIFFrealloc ( buffer , count )
LVAL	106:2	106:2	9	cp
FIELD	106:2	106:2	10	cp
LEAF_NODE	106:2	106:2	11	cp
ASSIGN_OP	106:5	106:5	9	=
LEAF_NODE	106:5	106:5	10	=
RVAL	106:7	106:7	9	_TIFFrealloc ( buffer , count )
FUNCTION_CALL	106:7	106:33	10	_TIFFrealloc ( buffer , count )
CALLEE	106:7	106:7	11	_TIFFrealloc
LEAF_NODE	106:7	106:7	12	_TIFFrealloc
LEAF_NODE	106:19	106:19	11	(
ARGUMENT	106:20	106:20	11	buffer
FIELD	106:20	106:20	12	buffer
LEAF_NODE	106:20	106:20	13	buffer
LEAF_NODE	106:26	106:26	11	,
ARGUMENT	106:28	106:28	11	count
FIELD	106:28	106:28	12	count
LEAF_NODE	106:28	106:28	13	count
LEAF_NODE	106:33	106:33	11	)
LEAF_NODE	106:34	106:34	7	;
LEAF_NODE	107:1	107:1	5	}
SELECTION	109:1	109:17	3	
KEYWORD	109:1	109:1	4	if
LEAF_NODE	109:1	109:1	5	if
LEAF_NODE	109:4	109:4	4	(
CONDITION	109:5	109:5	4	cp == NULL
EXPR	109:5	109:11	5	cp == NULL
FIELD	109:5	109:5	6	cp
LEAF_NODE	109:5	109:5	7	cp
EQ_OPERATOR	109:8	109:8	6	==
LEAF_NODE	109:8	109:8	7	==
FIELD	109:11	109:11	6	NULL
LEAF_NODE	109:11	109:11	7	NULL
LEAF_NODE	109:15	109:15	4	)
STATEMENTS	109:17	114:1	4	
LEAF_NODE	109:17	109:17	5	{
STATEMENTS	110:2	113:44	5	
LEAF_NODE	110:2	110:2	6	TIFFErrorExt
LEAF_NODE	110:14	110:14	6	(
LEAF_NODE	110:15	110:15	6	tif
LEAF_NODE	110:18	110:18	6	->
LEAF_NODE	110:20	110:20	6	tif_clientdata
LEAF_NODE	110:34	110:34	6	,
LEAF_NODE	110:36	110:36	6	tif
LEAF_NODE	110:39	110:39	6	->
LEAF_NODE	110:41	110:41	6	tif_name
LEAF_NODE	110:49	110:49	6	,
LEAF_NODE	111:8	111:8	6	"Failed to allocate memory for %s "
LEAF_NODE	112:8	112:8	6	"(%ld elements of %ld bytes each)"
LEAF_NODE	112:42	112:42	6	,
LEAF_NODE	113:8	113:8	6	what
LEAF_NODE	113:12	113:12	6	,
LEAF_NODE	113:13	113:13	6	(
LEAF_NODE	113:14	113:14	6	long
LEAF_NODE	113:18	113:18	6	)
LEAF_NODE	113:20	113:20	6	nmemb
LEAF_NODE	113:25	113:25	6	,
LEAF_NODE	113:27	113:27	6	(
LEAF_NODE	113:28	113:28	6	long
LEAF_NODE	113:32	113:32	6	)
LEAF_NODE	113:34	113:34	6	elem_size
LEAF_NODE	113:43	113:43	6	)
LEAF_NODE	113:44	113:44	6	;
LEAF_NODE	114:1	114:1	5	}
JUMP_STATEMENT	116:1	116:10	3	return cp ;
KEYWORD	116:1	116:1	4	return
LEAF_NODE	116:1	116:1	5	return
DESTINATION	116:8	116:8	4	cp
EXPR	116:8	116:8	5	cp
FIELD	116:8	116:8	6	cp
LEAF_NODE	116:8	116:8	7	cp
LEAF_NODE	116:10	116:10	4	;
LEAF_NODE	117:0	117:0	2	}
FUNCTION_DEF	119:0	123:0	1	
RETURN_TYPE	119:0	119:4	2	void *
TYPE_NAME	119:0	119:0	3	void
LEAF_NODE	119:0	119:0	4	void
LEAF_NODE	119:4	119:4	3	*
FUNCTION_NAME	120:0	120:0	2	_TIFFCheckMalloc
LEAF_NODE	120:0	120:0	3	_TIFFCheckMalloc
PARAMETER_LIST	120:16	120:80	2	( TIFF * tif , tmsize_t nmemb , tmsize_t elem_size , const char * what )
LEAF_NODE	120:16	120:16	3	(
PARAMETER_DECL	120:17	120:23	3	TIFF * tif
TYPE	120:17	120:21	4	TIFF *
TYPE_NAME	120:17	120:17	5	TIFF
LEAF_NODE	120:17	120:17	6	TIFF
POINTER	120:21	120:21	5	*
LEAF_NODE	120:21	120:21	6	*
NAME	120:23	120:23	4	tif
LEAF_NODE	120:23	120:23	5	tif
LEAF_NODE	120:26	120:26	3	,
PARAMETER_DECL	120:28	120:37	3	tmsize_t nmemb
TYPE	120:28	120:28	4	tmsize_t
TYPE_NAME	120:28	120:28	5	tmsize_t
LEAF_NODE	120:28	120:28	6	tmsize_t
NAME	120:37	120:37	4	nmemb
LEAF_NODE	120:37	120:37	5	nmemb
LEAF_NODE	120:42	120:42	3	,
PARAMETER_DECL	120:44	120:53	3	tmsize_t elem_size
TYPE	120:44	120:44	4	tmsize_t
TYPE_NAME	120:44	120:44	5	tmsize_t
LEAF_NODE	120:44	120:44	6	tmsize_t
NAME	120:53	120:53	4	elem_size
LEAF_NODE	120:53	120:53	5	elem_size
LEAF_NODE	120:62	120:62	3	,
PARAMETER_DECL	120:64	120:76	3	const char * what
TYPE	120:64	120:74	4	const char *
TYPE_NAME	120:64	120:70	5	const char
LEAF_NODE	120:64	120:64	6	const
LEAF_NODE	120:70	120:70	6	char
POINTER	120:74	120:74	5	*
LEAF_NODE	120:74	120:74	6	*
NAME	120:76	120:76	4	what
LEAF_NODE	120:76	120:76	5	what
LEAF_NODE	120:80	120:80	3	)
LEAF_NODE	121:0	121:0	2	{
STATEMENTS	122:1	122:1	2	
JUMP_STATEMENT	122:1	122:60	3	return _TIFFCheckRealloc ( tif , NULL , nmemb , elem_size , what ) ;
KEYWORD	122:1	122:1	4	return
LEAF_NODE	122:1	122:1	5	return
DESTINATION	122:8	122:8	4	_TIFFCheckRealloc ( tif , NULL , nmemb , elem_size , what )
EXPR	122:8	122:8	5	_TIFFCheckRealloc ( tif , NULL , nmemb , elem_size , what )
FUNCTION_CALL	122:8	122:59	6	_TIFFCheckRealloc ( tif , NULL , nmemb , elem_size , what )
CALLEE	122:8	122:8	7	_TIFFCheckRealloc
LEAF_NODE	122:8	122:8	8	_TIFFCheckRealloc
LEAF_NODE	122:25	122:25	7	(
ARGUMENT	122:26	122:26	7	tif
FIELD	122:26	122:26	8	tif
LEAF_NODE	122:26	122:26	9	tif
LEAF_NODE	122:29	122:29	7	,
ARGUMENT	122:31	122:31	7	NULL
FIELD	122:31	122:31	8	NULL
LEAF_NODE	122:31	122:31	9	NULL
LEAF_NODE	122:35	122:35	7	,
ARGUMENT	122:37	122:37	7	nmemb
FIELD	122:37	122:37	8	nmemb
LEAF_NODE	122:37	122:37	9	nmemb
LEAF_NODE	122:42	122:42	7	,
ARGUMENT	122:44	122:44	7	elem_size
FIELD	122:44	122:44	8	elem_size
LEAF_NODE	122:44	122:44	9	elem_size
LEAF_NODE	122:53	122:53	7	,
ARGUMENT	122:55	122:55	7	what
FIELD	122:55	122:55	8	what
LEAF_NODE	122:55	122:55	9	what
LEAF_NODE	122:59	122:59	7	)
LEAF_NODE	122:60	122:60	4	;
LEAF_NODE	123:0	123:0	2	}
FUNCTION_DEF	125:0	167:0	1	
RETURN_TYPE	125:0	125:7	2	static int
LEAF_NODE	125:0	125:0	3	static
TYPE_NAME	125:7	125:7	3	int
LEAF_NODE	125:7	125:7	4	int
FUNCTION_NAME	126:0	126:0	2	TIFFDefaultTransferFunction
LEAF_NODE	126:0	126:0	3	TIFFDefaultTransferFunction
PARAMETER_LIST	126:27	126:45	2	( TIFFDirectory * td )
LEAF_NODE	126:27	126:27	3	(
PARAMETER_DECL	126:28	126:43	3	TIFFDirectory * td
TYPE	126:28	126:41	4	TIFFDirectory *
TYPE_NAME	126:28	126:28	5	TIFFDirectory
LEAF_NODE	126:28	126:28	6	TIFFDirectory
POINTER	126:41	126:41	5	*
LEAF_NODE	126:41	126:41	6	*
NAME	126:43	126:43	4	td
LEAF_NODE	126:43	126:43	5	td
LEAF_NODE	126:45	126:45	3	)
LEAF_NODE	127:0	127:0	2	{
STATEMENTS	128:1	166:1	2	
SIMPLE_DECL	128:1	128:38	3	uint16 * tf ; tf = td -> td_transferfunction ;
VAR_DECL	128:1	128:10	4	uint16 * tf ; tf = td -> td_transferfunction
TYPE	128:1	128:9	5	uint16 *
TYPE_NAME	128:1	128:1	6	uint16
LEAF_NODE	128:1	128:1	7	uint16
POINTER	128:9	128:9	6	*
LEAF_NODE	128:9	128:9	7	*
NAME	128:10	128:10	5	tf
LEAF_NODE	128:10	128:10	6	tf
LEAF_NODE	0:0	0:0	5	;
INIT	128:10	128:10	5	tf = td -> td_transferfunction
ASSIGN	128:10	128:15	6	tf = td -> td_transferfunction
LVAL	128:10	128:10	7	tf
NAME	128:10	128:10	8	tf
LEAF_NODE	128:10	128:10	9	tf
ASSIGN_OP	128:13	128:13	7	=
LEAF_NODE	128:13	128:13	8	=
RVAL	128:15	128:15	7	td -> td_transferfunction
FIELD	128:15	128:19	8	td -> td_transferfunction
LEAF_NODE	128:15	128:15	9	td
LEAF_NODE	128:17	128:17	9	->
LEAF_NODE	128:19	128:19	9	td_transferfunction
LEAF_NODE	128:38	128:38	4	;
SIMPLE_DECL	129:1	129:22	3	tmsize_t i , tmsize_t n , tmsize_t nbytes ;
INIT_DECL_LIST	129:1	129:1	4	tmsize_t i , tmsize_t n , tmsize_t nbytes
VAR_DECL	129:1	129:10	5	tmsize_t i
TYPE	129:1	129:1	6	tmsize_t
TYPE_NAME	129:1	129:1	7	tmsize_t
LEAF_NODE	129:1	129:1	8	tmsize_t
NAME	129:10	129:10	6	i
LEAF_NODE	129:10	129:10	7	i
LEAF_NODE	129:11	129:11	5	,
INIT_DECL_LIST	129:1	129:1	5	tmsize_t n , tmsize_t nbytes
VAR_DECL	129:1	129:13	6	tmsize_t n
TYPE	129:1	129:1	7	tmsize_t
TYPE_NAME	129:1	129:1	8	tmsize_t
LEAF_NODE	129:1	129:1	9	tmsize_t
NAME	129:13	129:13	7	n
LEAF_NODE	129:13	129:13	8	n
LEAF_NODE	129:14	129:14	6	,
VAR_DECL	129:1	129:16	6	tmsize_t nbytes
TYPE	129:1	129:1	7	tmsize_t
TYPE_NAME	129:1	129:1	8	tmsize_t
LEAF_NODE	129:1	129:1	9	tmsize_t
NAME	129:16	129:16	7	nbytes
LEAF_NODE	129:16	129:16	8	nbytes
LEAF_NODE	129:22	129:22	4	;
EXPR_STATEMENT	131:1	131:26	3	tf [ 0 ] = tf [ 1 ] = tf [ 2 ] = 0 ;
EXPR	131:1	131:1	4	tf [ 0 ] = tf [ 1 ] = tf [ 2 ] = 0
ASSIGN	131:1	131:9	5	tf [ 0 ] = tf [ 1 ] = tf [ 2 ] = 0
LVAL	131:1	131:1	6	tf [ 0 ]
FIELD	131:1	131:5	7	tf [ 0 ]
LEAF_NODE	131:1	131:1	8	tf
LEAF_NODE	131:3	131:3	8	[
EXPR	131:4	131:4	8	0
FIELD	131:4	131:4	9	0
LEAF_NODE	131:4	131:4	10	0
LEAF_NODE	131:5	131:5	8	]
ASSIGN_OP	131:7	131:7	6	=
LEAF_NODE	131:7	131:7	7	=
RVAL	131:9	131:9	6	tf [ 1 ] = tf [ 2 ] = 0
ASSIGN	131:9	131:17	7	tf [ 1 ] = tf [ 2 ] = 0
LVAL	131:9	131:9	8	tf [ 1 ]
FIELD	131:9	131:13	9	tf [ 1 ]
LEAF_NODE	131:9	131:9	10	tf
LEAF_NODE	131:11	131:11	10	[
EXPR	131:12	131:12	10	1
FIELD	131:12	131:12	11	1
LEAF_NODE	131:12	131:12	12	1
LEAF_NODE	131:13	131:13	10	]
ASSIGN_OP	131:15	131:15	8	=
LEAF_NODE	131:15	131:15	9	=
RVAL	131:17	131:17	8	tf [ 2 ] = 0
ASSIGN	131:17	131:25	9	tf [ 2 ] = 0
LVAL	131:17	131:17	10	tf [ 2 ]
FIELD	131:17	131:21	11	tf [ 2 ]
LEAF_NODE	131:17	131:17	12	tf
LEAF_NODE	131:19	131:19	12	[
EXPR	131:20	131:20	12	2
FIELD	131:20	131:20	13	2
LEAF_NODE	131:20	131:20	14	2
LEAF_NODE	131:21	131:21	12	]
ASSIGN_OP	131:23	131:23	10	=
LEAF_NODE	131:23	131:23	11	=
RVAL	131:25	131:25	10	0
FIELD	131:25	131:25	11	0
LEAF_NODE	131:25	131:25	12	0
LEAF_NODE	131:26	131:26	4	;
SELECTION	132:1	133:2	3	
KEYWORD	132:1	132:1	4	if
LEAF_NODE	132:1	132:1	5	if
LEAF_NODE	132:4	132:4	4	(
CONDITION	132:5	132:5	4	td -> td_bitspersample >= sizeof ( tmsize_t ) * 8 - 2
EXPR	132:5	132:52	5	td -> td_bitspersample >= sizeof ( tmsize_t ) * 8 - 2
FIELD	132:5	132:9	6	td -> td_bitspersample
LEAF_NODE	132:5	132:5	7	td
LEAF_NODE	132:7	132:7	7	->
LEAF_NODE	132:9	132:9	7	td_bitspersample
REL_OPERATOR	132:26	132:26	6	>=
LEAF_NODE	132:26	132:26	7	>=
FUNCTION_CALL	132:29	132:44	6	sizeof ( tmsize_t )
CALLEE	132:29	132:29	7	sizeof
LEAF_NODE	132:29	132:29	8	sizeof
LEAF_NODE	132:35	132:35	7	(
ARGUMENT	132:36	132:36	7	tmsize_t
FIELD	132:36	132:36	8	tmsize_t
LEAF_NODE	132:36	132:36	9	tmsize_t
LEAF_NODE	132:44	132:44	7	)
LEAF_NODE	132:46	132:46	6	*
FIELD	132:48	132:48	6	8
LEAF_NODE	132:48	132:48	7	8
LEAF_NODE	132:50	132:50	6	-
FIELD	132:52	132:52	6	2
LEAF_NODE	132:52	132:52	7	2
LEAF_NODE	132:53	132:53	4	)
STATEMENTS	133:2	133:2	4	
JUMP_STATEMENT	133:2	133:10	5	return 0 ;
KEYWORD	133:2	133:2	6	return
LEAF_NODE	133:2	133:2	7	return
DESTINATION	133:9	133:9	6	0
EXPR	133:9	133:9	7	0
FIELD	133:9	133:9	8	0
LEAF_NODE	133:9	133:9	9	0
LEAF_NODE	133:10	133:10	6	;
EXPR_STATEMENT	135:1	135:40	3	n = ( ( tmsize_t ) 1 ) << td -> td_bitspersample ;
EXPR	135:1	135:1	4	n = ( ( tmsize_t ) 1 ) << td -> td_bitspersample
ASSIGN	135:1	135:5	5	n = ( ( tmsize_t ) 1 ) << td -> td_bitspersample
LVAL	135:1	135:1	6	n
FIELD	135:1	135:1	7	n
LEAF_NODE	135:1	135:1	8	n
ASSIGN_OP	135:3	135:3	6	=
LEAF_NODE	135:3	135:3	7	=
RVAL	135:5	135:20	6	( ( tmsize_t ) 1 ) << td -> td_bitspersample
LEAF_NODE	135:5	135:5	7	(
LEAF_NODE	135:6	135:6	7	(
TYPE_NAME	135:7	135:7	7	tmsize_t
LEAF_NODE	135:7	135:7	8	tmsize_t
LEAF_NODE	135:15	135:15	7	)
FIELD	135:16	135:16	7	1
LEAF_NODE	135:16	135:16	8	1
LEAF_NODE	135:17	135:17	7	)
LEAF_NODE	135:18	135:18	7	<<
FIELD	135:20	135:24	7	td -> td_bitspersample
LEAF_NODE	135:20	135:20	8	td
LEAF_NODE	135:22	135:22	8	->
LEAF_NODE	135:24	135:24	8	td_bitspersample
LEAF_NODE	135:40	135:40	4	;
EXPR_STATEMENT	136:1	136:29	3	nbytes = n * sizeof ( uint16 ) ;
EXPR	136:1	136:1	4	nbytes = n * sizeof ( uint16 )
ASSIGN	136:1	136:10	5	nbytes = n * sizeof ( uint16 )
LVAL	136:1	136:1	6	nbytes
FIELD	136:1	136:1	7	nbytes
LEAF_NODE	136:1	136:1	8	nbytes
ASSIGN_OP	136:8	136:8	6	=
LEAF_NODE	136:8	136:8	7	=
RVAL	136:10	136:14	6	n * sizeof ( uint16 )
FIELD	136:10	136:10	7	n
LEAF_NODE	136:10	136:10	8	n
LEAF_NODE	136:12	136:12	7	*
FUNCTION_CALL	136:14	136:28	7	sizeof ( uint16 )
CALLEE	136:14	136:14	8	sizeof
LEAF_NODE	136:14	136:14	9	sizeof
LEAF_NODE	136:21	136:21	8	(
ARGUMENT	136:22	136:22	8	uint16
FIELD	136:22	136:22	9	uint16
LEAF_NODE	136:22	136:22	10	uint16
LEAF_NODE	136:28	136:28	8	)
LEAF_NODE	136:29	136:29	4	;
EXPR_STATEMENT	137:8	137:45	3	tf [ 0 ] = ( uint16 * ) _TIFFmalloc ( nbytes ) ;
EXPR	137:8	137:8	4	tf [ 0 ] = ( uint16 * ) _TIFFmalloc ( nbytes )
ASSIGN	137:8	137:16	5	tf [ 0 ] = ( uint16 * ) _TIFFmalloc ( nbytes )
LVAL	137:8	137:8	6	tf [ 0 ]
FIELD	137:8	137:12	7	tf [ 0 ]
LEAF_NODE	137:8	137:8	8	tf
LEAF_NODE	137:10	137:10	8	[
EXPR	137:11	137:11	8	0
FIELD	137:11	137:11	9	0
LEAF_NODE	137:11	137:11	10	0
LEAF_NODE	137:12	137:12	8	]
ASSIGN_OP	137:14	137:14	6	=
LEAF_NODE	137:14	137:14	7	=
RVAL	137:16	137:26	6	( uint16 * ) _TIFFmalloc ( nbytes )
LEAF_NODE	137:16	137:16	7	(
TYPE_NAME	137:17	137:17	7	uint16
LEAF_NODE	137:17	137:17	8	uint16
LEAF_NODE	137:24	137:24	7	*
LEAF_NODE	137:25	137:25	7	)
FUNCTION_CALL	137:26	137:44	7	_TIFFmalloc ( nbytes )
CALLEE	137:26	137:26	8	_TIFFmalloc
LEAF_NODE	137:26	137:26	9	_TIFFmalloc
LEAF_NODE	137:37	137:37	8	(
ARGUMENT	137:38	137:38	8	nbytes
FIELD	137:38	137:38	9	nbytes
LEAF_NODE	137:38	137:38	10	nbytes
LEAF_NODE	137:44	137:44	8	)
LEAF_NODE	137:45	137:45	4	;
SELECTION	138:1	139:2	3	
KEYWORD	138:1	138:1	4	if
LEAF_NODE	138:1	138:1	5	if
LEAF_NODE	138:4	138:4	4	(
CONDITION	138:5	138:5	4	tf [ 0 ] == NULL
EXPR	138:5	138:14	5	tf [ 0 ] == NULL
FIELD	138:5	138:9	6	tf [ 0 ]
LEAF_NODE	138:5	138:5	7	tf
LEAF_NODE	138:7	138:7	7	[
EXPR	138:8	138:8	7	0
FIELD	138:8	138:8	8	0
LEAF_NODE	138:8	138:8	9	0
LEAF_NODE	138:9	138:9	7	]
EQ_OPERATOR	138:11	138:11	6	==
LEAF_NODE	138:11	138:11	7	==
FIELD	138:14	138:14	6	NULL
LEAF_NODE	138:14	138:14	7	NULL
LEAF_NODE	138:18	138:18	4	)
STATEMENTS	139:2	139:2	4	
JUMP_STATEMENT	139:2	139:10	5	return 0 ;
KEYWORD	139:2	139:2	6	return
LEAF_NODE	139:2	139:2	7	return
DESTINATION	139:9	139:9	6	0
EXPR	139:9	139:9	7	0
FIELD	139:9	139:9	8	0
LEAF_NODE	139:9	139:9	9	0
LEAF_NODE	139:10	139:10	6	;
EXPR_STATEMENT	140:1	140:13	3	tf [ 0 ] [ 0 ] = 0 ;
EXPR	140:1	140:1	4	tf [ 0 ] [ 0 ] = 0
ASSIGN	140:1	140:12	5	tf [ 0 ] [ 0 ] = 0
LVAL	140:1	140:1	6	tf [ 0 ] [ 0 ]
FIELD	140:1	140:8	7	tf [ 0 ] [ 0 ]
LEAF_NODE	140:1	140:1	8	tf
LEAF_NODE	140:3	140:3	8	[
EXPR	140:4	140:4	8	0
FIELD	140:4	140:4	9	0
LEAF_NODE	140:4	140:4	10	0
LEAF_NODE	140:5	140:5	8	]
LEAF_NODE	140:6	140:6	8	[
EXPR	140:7	140:7	8	0
FIELD	140:7	140:7	9	0
LEAF_NODE	140:7	140:7	10	0
LEAF_NODE	140:8	140:8	8	]
ASSIGN_OP	140:10	140:10	6	=
LEAF_NODE	140:10	140:10	7	=
RVAL	140:12	140:12	6	0
FIELD	140:12	140:12	7	0
LEAF_NODE	140:12	140:12	8	0
LEAF_NODE	140:13	140:13	4	;
ITERATION	141:1	141:25	3	
KEYWORD	141:1	141:1	4	for
LEAF_NODE	141:1	141:1	5	for
LEAF_NODE	141:5	141:5	4	(
FOR_INIT	141:6	141:11	4	i = 1 ;
EXPR	141:6	141:6	5	i = 1
ASSIGN	141:6	141:10	6	i = 1
LVAL	141:6	141:6	7	i
FIELD	141:6	141:6	8	i
LEAF_NODE	141:6	141:6	9	i
ASSIGN_OP	141:8	141:8	7	=
LEAF_NODE	141:8	141:8	8	=
RVAL	141:10	141:10	7	1
FIELD	141:10	141:10	8	1
LEAF_NODE	141:10	141:10	9	1
LEAF_NODE	141:11	141:11	5	;
CONDITION	141:13	141:13	4	i < n
EXPR	141:13	141:17	5	i < n
FIELD	141:13	141:13	6	i
LEAF_NODE	141:13	141:13	7	i
REL_OPERATOR	141:15	141:15	6	<
LEAF_NODE	141:15	141:15	7	<
FIELD	141:17	141:17	6	n
LEAF_NODE	141:17	141:17	7	n
LEAF_NODE	141:18	141:18	4	;
FOR_EXPR	141:20	141:20	4	i ++
EXPR	141:20	141:20	5	i ++
FIELD	141:20	141:21	6	i ++
LEAF_NODE	141:20	141:20	7	i
LEAF_NODE	141:21	141:21	7	++
LEAF_NODE	141:23	141:23	4	)
STATEMENTS	141:25	144:1	4	
LEAF_NODE	141:25	141:25	5	{
STATEMENTS	142:2	143:2	5	
SIMPLE_DECL	142:2	142:38	6	double t ; t = ( double ) i / ( ( double ) n - 1. ) ;
VAR_DECL	142:2	142:9	7	double t ; t = ( double ) i / ( ( double ) n - 1. )
TYPE	142:2	142:2	8	double
TYPE_NAME	142:2	142:2	9	double
LEAF_NODE	142:2	142:2	10	double
NAME	142:9	142:9	8	t
LEAF_NODE	142:9	142:9	9	t
LEAF_NODE	0:0	0:0	8	;
INIT	142:9	142:9	8	t = ( double ) i / ( ( double ) n - 1. )
ASSIGN	142:9	142:13	9	t = ( double ) i / ( ( double ) n - 1. )
LVAL	142:9	142:9	10	t
NAME	142:9	142:9	11	t
LEAF_NODE	142:9	142:9	12	t
ASSIGN_OP	142:11	142:11	10	=
LEAF_NODE	142:11	142:11	11	=
RVAL	142:13	142:37	10	( double ) i / ( ( double ) n - 1. )
LEAF_NODE	142:13	142:13	11	(
TYPE_NAME	142:14	142:14	11	double
LEAF_NODE	142:14	142:14	12	double
LEAF_NODE	142:20	142:20	11	)
FIELD	142:21	142:21	11	i
LEAF_NODE	142:21	142:21	12	i
LEAF_NODE	142:22	142:22	11	/
LEAF_NODE	142:23	142:23	11	(
LEAF_NODE	142:24	142:24	11	(
TYPE_NAME	142:25	142:25	11	double
LEAF_NODE	142:25	142:25	12	double
LEAF_NODE	142:31	142:31	11	)
FIELD	142:33	142:33	11	n
LEAF_NODE	142:33	142:33	12	n
LEAF_NODE	142:34	142:34	11	-
FIELD	142:35	142:35	11	1.
LEAF_NODE	142:35	142:35	12	1.
LEAF_NODE	142:37	142:37	11	)
LEAF_NODE	142:38	142:38	7	;
EXPR_STATEMENT	143:2	143:51	6	tf [ 0 ] [ i ] = ( uint16 ) floor ( 65535. * pow ( t , 2.2 ) + .5 ) ;
EXPR	143:2	143:2	7	tf [ 0 ] [ i ] = ( uint16 ) floor ( 65535. * pow ( t , 2.2 ) + .5 )
ASSIGN	143:2	143:13	8	tf [ 0 ] [ i ] = ( uint16 ) floor ( 65535. * pow ( t , 2.2 ) + .5 )
LVAL	143:2	143:2	9	tf [ 0 ] [ i ]
FIELD	143:2	143:9	10	tf [ 0 ] [ i ]
LEAF_NODE	143:2	143:2	11	tf
LEAF_NODE	143:4	143:4	11	[
EXPR	143:5	143:5	11	0
FIELD	143:5	143:5	12	0
LEAF_NODE	143:5	143:5	13	0
LEAF_NODE	143:6	143:6	11	]
LEAF_NODE	143:7	143:7	11	[
EXPR	143:8	143:8	11	i
FIELD	143:8	143:8	12	i
LEAF_NODE	143:8	143:8	13	i
LEAF_NODE	143:9	143:9	11	]
ASSIGN_OP	143:11	143:11	9	=
LEAF_NODE	143:11	143:11	10	=
RVAL	143:13	143:21	9	( uint16 ) floor ( 65535. * pow ( t , 2.2 ) + .5 )
LEAF_NODE	143:13	143:13	10	(
TYPE_NAME	143:14	143:14	10	uint16
LEAF_NODE	143:14	143:14	11	uint16
LEAF_NODE	143:20	143:20	10	)
FUNCTION_CALL	143:21	143:50	10	floor ( 65535. * pow ( t , 2.2 ) + .5 )
CALLEE	143:21	143:21	11	floor
LEAF_NODE	143:21	143:21	12	floor
LEAF_NODE	143:26	143:26	11	(
ARGUMENT	143:27	143:48	11	65535. * pow ( t , 2.2 ) + .5
FIELD	143:27	143:27	12	65535.
LEAF_NODE	143:27	143:27	13	65535.
LEAF_NODE	143:33	143:33	12	*
FUNCTION_CALL	143:34	143:44	12	pow ( t , 2.2 )
CALLEE	143:34	143:34	13	pow
LEAF_NODE	143:34	143:34	14	pow
LEAF_NODE	143:37	143:37	13	(
ARGUMENT	143:38	143:38	13	t
FIELD	143:38	143:38	14	t
LEAF_NODE	143:38	143:38	15	t
LEAF_NODE	143:39	143:39	13	,
ARGUMENT	143:41	143:41	13	2.2
FIELD	143:41	143:41	14	2.2
LEAF_NODE	143:41	143:41	15	2.2
LEAF_NODE	143:44	143:44	13	)
LEAF_NODE	143:46	143:46	12	+
FIELD	143:48	143:48	12	.5
LEAF_NODE	143:48	143:48	13	.5
LEAF_NODE	143:50	143:50	11	)
LEAF_NODE	143:51	143:51	7	;
LEAF_NODE	144:1	144:1	5	}
SELECTION	146:1	146:55	3	
KEYWORD	146:1	146:1	4	if
LEAF_NODE	146:1	146:1	5	if
LEAF_NODE	146:4	146:4	4	(
CONDITION	146:5	146:5	4	td -> td_samplesperpixel - td -> td_extrasamples > 1
EXPR	146:5	146:52	5	td -> td_samplesperpixel - td -> td_extrasamples > 1
FIELD	146:5	146:9	6	td -> td_samplesperpixel
LEAF_NODE	146:5	146:5	7	td
LEAF_NODE	146:7	146:7	7	->
LEAF_NODE	146:9	146:9	7	td_samplesperpixel
LEAF_NODE	146:28	146:28	6	-
FIELD	146:30	146:34	6	td -> td_extrasamples
LEAF_NODE	146:30	146:30	7	td
LEAF_NODE	146:32	146:32	7	->
LEAF_NODE	146:34	146:34	7	td_extrasamples
REL_OPERATOR	146:50	146:50	6	>
LEAF_NODE	146:50	146:50	7	>
FIELD	146:52	146:52	6	1
LEAF_NODE	146:52	146:52	7	1
LEAF_NODE	146:53	146:53	4	)
STATEMENTS	146:55	155:1	4	
LEAF_NODE	146:55	146:55	5	{
STATEMENTS	147:16	154:2	5	
EXPR_STATEMENT	147:16	147:53	6	tf [ 1 ] = ( uint16 * ) _TIFFmalloc ( nbytes ) ;
EXPR	147:16	147:16	7	tf [ 1 ] = ( uint16 * ) _TIFFmalloc ( nbytes )
ASSIGN	147:16	147:24	8	tf [ 1 ] = ( uint16 * ) _TIFFmalloc ( nbytes )
LVAL	147:16	147:16	9	tf [ 1 ]
FIELD	147:16	147:20	10	tf [ 1 ]
LEAF_NODE	147:16	147:16	11	tf
LEAF_NODE	147:18	147:18	11	[
EXPR	147:19	147:19	11	1
FIELD	147:19	147:19	12	1
LEAF_NODE	147:19	147:19	13	1
LEAF_NODE	147:20	147:20	11	]
ASSIGN_OP	147:22	147:22	9	=
LEAF_NODE	147:22	147:22	10	=
RVAL	147:24	147:34	9	( uint16 * ) _TIFFmalloc ( nbytes )
LEAF_NODE	147:24	147:24	10	(
TYPE_NAME	147:25	147:25	10	uint16
LEAF_NODE	147:25	147:25	11	uint16
LEAF_NODE	147:32	147:32	10	*
LEAF_NODE	147:33	147:33	10	)
FUNCTION_CALL	147:34	147:52	10	_TIFFmalloc ( nbytes )
CALLEE	147:34	147:34	11	_TIFFmalloc
LEAF_NODE	147:34	147:34	12	_TIFFmalloc
LEAF_NODE	147:45	147:45	11	(
ARGUMENT	147:46	147:46	11	nbytes
FIELD	147:46	147:46	12	nbytes
LEAF_NODE	147:46	147:46	13	nbytes
LEAF_NODE	147:52	147:52	11	)
LEAF_NODE	147:53	147:53	7	;
SELECTION	148:2	149:3	6	
KEYWORD	148:2	148:2	7	if
LEAF_NODE	148:2	148:2	8	if
LEAF_NODE	148:4	148:4	7	(
CONDITION	148:5	148:5	7	tf [ 1 ] == NULL
EXPR	148:5	148:14	8	tf [ 1 ] == NULL
FIELD	148:5	148:9	9	tf [ 1 ]
LEAF_NODE	148:5	148:5	10	tf
LEAF_NODE	148:7	148:7	10	[
EXPR	148:8	148:8	10	1
FIELD	148:8	148:8	11	1
LEAF_NODE	148:8	148:8	12	1
LEAF_NODE	148:9	148:9	10	]
EQ_OPERATOR	148:11	148:11	9	==
LEAF_NODE	148:11	148:11	10	==
FIELD	148:14	148:14	9	NULL
LEAF_NODE	148:14	148:14	10	NULL
LEAF_NODE	148:18	148:18	7	)
STATEMENTS	149:3	149:3	7	
JUMP_STATEMENT	149:3	149:11	8	goto bad ;
KEYWORD	149:3	149:3	9	goto
LEAF_NODE	149:3	149:3	10	goto
DESTINATION	149:8	149:8	9	bad
LEAF_NODE	149:8	149:8	10	bad
LEAF_NODE	149:11	149:11	9	;
EXPR_STATEMENT	150:2	150:35	6	_TIFFmemcpy ( tf [ 1 ] , tf [ 0 ] , nbytes ) ;
EXPR	150:2	150:2	7	_TIFFmemcpy ( tf [ 1 ] , tf [ 0 ] , nbytes )
FUNCTION_CALL	150:2	150:34	8	_TIFFmemcpy ( tf [ 1 ] , tf [ 0 ] , nbytes )
CALLEE	150:2	150:2	9	_TIFFmemcpy
LEAF_NODE	150:2	150:2	10	_TIFFmemcpy
LEAF_NODE	150:13	150:13	9	(
ARGUMENT	150:14	150:14	9	tf [ 1 ]
FIELD	150:14	150:18	10	tf [ 1 ]
LEAF_NODE	150:14	150:14	11	tf
LEAF_NODE	150:16	150:16	11	[
EXPR	150:17	150:17	11	1
FIELD	150:17	150:17	12	1
LEAF_NODE	150:17	150:17	13	1
LEAF_NODE	150:18	150:18	11	]
LEAF_NODE	150:19	150:19	9	,
ARGUMENT	150:21	150:21	9	tf [ 0 ]
FIELD	150:21	150:25	10	tf [ 0 ]
LEAF_NODE	150:21	150:21	11	tf
LEAF_NODE	150:23	150:23	11	[
EXPR	150:24	150:24	11	0
FIELD	150:24	150:24	12	0
LEAF_NODE	150:24	150:24	13	0
LEAF_NODE	150:25	150:25	11	]
LEAF_NODE	150:26	150:26	9	,
ARGUMENT	150:28	150:28	9	nbytes
FIELD	150:28	150:28	10	nbytes
LEAF_NODE	150:28	150:28	11	nbytes
LEAF_NODE	150:34	150:34	9	)
LEAF_NODE	150:35	150:35	7	;
EXPR_STATEMENT	151:16	151:53	6	tf [ 2 ] = ( uint16 * ) _TIFFmalloc ( nbytes ) ;
EXPR	151:16	151:16	7	tf [ 2 ] = ( uint16 * ) _TIFFmalloc ( nbytes )
ASSIGN	151:16	151:24	8	tf [ 2 ] = ( uint16 * ) _TIFFmalloc ( nbytes )
LVAL	151:16	151:16	9	tf [ 2 ]
FIELD	151:16	151:20	10	tf [ 2 ]
LEAF_NODE	151:16	151:16	11	tf
LEAF_NODE	151:18	151:18	11	[
EXPR	151:19	151:19	11	2
FIELD	151:19	151:19	12	2
LEAF_NODE	151:19	151:19	13	2
LEAF_NODE	151:20	151:20	11	]
ASSIGN_OP	151:22	151:22	9	=
LEAF_NODE	151:22	151:22	10	=
RVAL	151:24	151:34	9	( uint16 * ) _TIFFmalloc ( nbytes )
LEAF_NODE	151:24	151:24	10	(
TYPE_NAME	151:25	151:25	10	uint16
LEAF_NODE	151:25	151:25	11	uint16
LEAF_NODE	151:32	151:32	10	*
LEAF_NODE	151:33	151:33	10	)
FUNCTION_CALL	151:34	151:52	10	_TIFFmalloc ( nbytes )
CALLEE	151:34	151:34	11	_TIFFmalloc
LEAF_NODE	151:34	151:34	12	_TIFFmalloc
LEAF_NODE	151:45	151:45	11	(
ARGUMENT	151:46	151:46	11	nbytes
FIELD	151:46	151:46	12	nbytes
LEAF_NODE	151:46	151:46	13	nbytes
LEAF_NODE	151:52	151:52	11	)
LEAF_NODE	151:53	151:53	7	;
SELECTION	152:2	153:3	6	
KEYWORD	152:2	152:2	7	if
LEAF_NODE	152:2	152:2	8	if
LEAF_NODE	152:5	152:5	7	(
CONDITION	152:6	152:6	7	tf [ 2 ] == NULL
EXPR	152:6	152:15	8	tf [ 2 ] == NULL
FIELD	152:6	152:10	9	tf [ 2 ]
LEAF_NODE	152:6	152:6	10	tf
LEAF_NODE	152:8	152:8	10	[
EXPR	152:9	152:9	10	2
FIELD	152:9	152:9	11	2
LEAF_NODE	152:9	152:9	12	2
LEAF_NODE	152:10	152:10	10	]
EQ_OPERATOR	152:12	152:12	9	==
LEAF_NODE	152:12	152:12	10	==
FIELD	152:15	152:15	9	NULL
LEAF_NODE	152:15	152:15	10	NULL
LEAF_NODE	152:19	152:19	7	)
STATEMENTS	153:3	153:3	7	
JUMP_STATEMENT	153:3	153:11	8	goto bad ;
KEYWORD	153:3	153:3	9	goto
LEAF_NODE	153:3	153:3	10	goto
DESTINATION	153:8	153:8	9	bad
LEAF_NODE	153:8	153:8	10	bad
LEAF_NODE	153:11	153:11	9	;
EXPR_STATEMENT	154:2	154:35	6	_TIFFmemcpy ( tf [ 2 ] , tf [ 0 ] , nbytes ) ;
EXPR	154:2	154:2	7	_TIFFmemcpy ( tf [ 2 ] , tf [ 0 ] , nbytes )
FUNCTION_CALL	154:2	154:34	8	_TIFFmemcpy ( tf [ 2 ] , tf [ 0 ] , nbytes )
CALLEE	154:2	154:2	9	_TIFFmemcpy
LEAF_NODE	154:2	154:2	10	_TIFFmemcpy
LEAF_NODE	154:13	154:13	9	(
ARGUMENT	154:14	154:14	9	tf [ 2 ]
FIELD	154:14	154:18	10	tf [ 2 ]
LEAF_NODE	154:14	154:14	11	tf
LEAF_NODE	154:16	154:16	11	[
EXPR	154:17	154:17	11	2
FIELD	154:17	154:17	12	2
LEAF_NODE	154:17	154:17	13	2
LEAF_NODE	154:18	154:18	11	]
LEAF_NODE	154:19	154:19	9	,
ARGUMENT	154:21	154:21	9	tf [ 0 ]
FIELD	154:21	154:25	10	tf [ 0 ]
LEAF_NODE	154:21	154:21	11	tf
LEAF_NODE	154:23	154:23	11	[
EXPR	154:24	154:24	11	0
FIELD	154:24	154:24	12	0
LEAF_NODE	154:24	154:24	13	0
LEAF_NODE	154:25	154:25	11	]
LEAF_NODE	154:26	154:26	9	,
ARGUMENT	154:28	154:28	9	nbytes
FIELD	154:28	154:28	10	nbytes
LEAF_NODE	154:28	154:28	11	nbytes
LEAF_NODE	154:34	154:34	9	)
LEAF_NODE	154:35	154:35	7	;
LEAF_NODE	155:1	155:1	5	}
JUMP_STATEMENT	156:1	156:9	3	return 1 ;
KEYWORD	156:1	156:1	4	return
LEAF_NODE	156:1	156:1	5	return
DESTINATION	156:8	156:8	4	1
EXPR	156:8	156:8	5	1
FIELD	156:8	156:8	6	1
LEAF_NODE	156:8	156:8	7	1
LEAF_NODE	156:9	156:9	4	;
LABEL	158:0	158:3	3	bad :
LEAF_NODE	158:0	158:0	4	bad
LEAF_NODE	158:3	158:3	4	:
SELECTION	159:1	160:2	3	
KEYWORD	159:1	159:1	4	if
LEAF_NODE	159:1	159:1	5	if
LEAF_NODE	159:4	159:4	4	(
CONDITION	159:5	159:5	4	tf [ 0 ]
EXPR	159:5	159:5	5	tf [ 0 ]
FIELD	159:5	159:9	6	tf [ 0 ]
LEAF_NODE	159:5	159:5	7	tf
LEAF_NODE	159:7	159:7	7	[
EXPR	159:8	159:8	7	0
FIELD	159:8	159:8	8	0
LEAF_NODE	159:8	159:8	9	0
LEAF_NODE	159:9	159:9	7	]
LEAF_NODE	159:10	159:10	4	)
STATEMENTS	160:2	160:2	4	
EXPR_STATEMENT	160:2	160:18	5	_TIFFfree ( tf [ 0 ] ) ;
EXPR	160:2	160:2	6	_TIFFfree ( tf [ 0 ] )
FUNCTION_CALL	160:2	160:17	7	_TIFFfree ( tf [ 0 ] )
CALLEE	160:2	160:2	8	_TIFFfree
LEAF_NODE	160:2	160:2	9	_TIFFfree
LEAF_NODE	160:11	160:11	8	(
ARGUMENT	160:12	160:12	8	tf [ 0 ]
FIELD	160:12	160:16	9	tf [ 0 ]
LEAF_NODE	160:12	160:12	10	tf
LEAF_NODE	160:14	160:14	10	[
EXPR	160:15	160:15	10	0
FIELD	160:15	160:15	11	0
LEAF_NODE	160:15	160:15	12	0
LEAF_NODE	160:16	160:16	10	]
LEAF_NODE	160:17	160:17	8	)
LEAF_NODE	160:18	160:18	6	;
SELECTION	161:1	162:2	3	
KEYWORD	161:1	161:1	4	if
LEAF_NODE	161:1	161:1	5	if
LEAF_NODE	161:4	161:4	4	(
CONDITION	161:5	161:5	4	tf [ 1 ]
EXPR	161:5	161:5	5	tf [ 1 ]
FIELD	161:5	161:9	6	tf [ 1 ]
LEAF_NODE	161:5	161:5	7	tf
LEAF_NODE	161:7	161:7	7	[
EXPR	161:8	161:8	7	1
FIELD	161:8	161:8	8	1
LEAF_NODE	161:8	161:8	9	1
LEAF_NODE	161:9	161:9	7	]
LEAF_NODE	161:10	161:10	4	)
STATEMENTS	162:2	162:2	4	
EXPR_STATEMENT	162:2	162:18	5	_TIFFfree ( tf [ 1 ] ) ;
EXPR	162:2	162:2	6	_TIFFfree ( tf [ 1 ] )
FUNCTION_CALL	162:2	162:17	7	_TIFFfree ( tf [ 1 ] )
CALLEE	162:2	162:2	8	_TIFFfree
LEAF_NODE	162:2	162:2	9	_TIFFfree
LEAF_NODE	162:11	162:11	8	(
ARGUMENT	162:12	162:12	8	tf [ 1 ]
FIELD	162:12	162:16	9	tf [ 1 ]
LEAF_NODE	162:12	162:12	10	tf
LEAF_NODE	162:14	162:14	10	[
EXPR	162:15	162:15	10	1
FIELD	162:15	162:15	11	1
LEAF_NODE	162:15	162:15	12	1
LEAF_NODE	162:16	162:16	10	]
LEAF_NODE	162:17	162:17	8	)
LEAF_NODE	162:18	162:18	6	;
SELECTION	163:1	164:2	3	
KEYWORD	163:1	163:1	4	if
LEAF_NODE	163:1	163:1	5	if
LEAF_NODE	163:4	163:4	4	(
CONDITION	163:5	163:5	4	tf [ 2 ]
EXPR	163:5	163:5	5	tf [ 2 ]
FIELD	163:5	163:9	6	tf [ 2 ]
LEAF_NODE	163:5	163:5	7	tf
LEAF_NODE	163:7	163:7	7	[
EXPR	163:8	163:8	7	2
FIELD	163:8	163:8	8	2
LEAF_NODE	163:8	163:8	9	2
LEAF_NODE	163:9	163:9	7	]
LEAF_NODE	163:10	163:10	4	)
STATEMENTS	164:2	164:2	4	
EXPR_STATEMENT	164:2	164:18	5	_TIFFfree ( tf [ 2 ] ) ;
EXPR	164:2	164:2	6	_TIFFfree ( tf [ 2 ] )
FUNCTION_CALL	164:2	164:17	7	_TIFFfree ( tf [ 2 ] )
CALLEE	164:2	164:2	8	_TIFFfree
LEAF_NODE	164:2	164:2	9	_TIFFfree
LEAF_NODE	164:11	164:11	8	(
ARGUMENT	164:12	164:12	8	tf [ 2 ]
FIELD	164:12	164:16	9	tf [ 2 ]
LEAF_NODE	164:12	164:12	10	tf
LEAF_NODE	164:14	164:14	10	[
EXPR	164:15	164:15	10	2
FIELD	164:15	164:15	11	2
LEAF_NODE	164:15	164:15	12	2
LEAF_NODE	164:16	164:16	10	]
LEAF_NODE	164:17	164:17	8	)
LEAF_NODE	164:18	164:18	6	;
EXPR_STATEMENT	165:1	165:26	3	tf [ 0 ] = tf [ 1 ] = tf [ 2 ] = 0 ;
EXPR	165:1	165:1	4	tf [ 0 ] = tf [ 1 ] = tf [ 2 ] = 0
ASSIGN	165:1	165:9	5	tf [ 0 ] = tf [ 1 ] = tf [ 2 ] = 0
LVAL	165:1	165:1	6	tf [ 0 ]
FIELD	165:1	165:5	7	tf [ 0 ]
LEAF_NODE	165:1	165:1	8	tf
LEAF_NODE	165:3	165:3	8	[
EXPR	165:4	165:4	8	0
FIELD	165:4	165:4	9	0
LEAF_NODE	165:4	165:4	10	0
LEAF_NODE	165:5	165:5	8	]
ASSIGN_OP	165:7	165:7	6	=
LEAF_NODE	165:7	165:7	7	=
RVAL	165:9	165:9	6	tf [ 1 ] = tf [ 2 ] = 0
ASSIGN	165:9	165:17	7	tf [ 1 ] = tf [ 2 ] = 0
LVAL	165:9	165:9	8	tf [ 1 ]
FIELD	165:9	165:13	9	tf [ 1 ]
LEAF_NODE	165:9	165:9	10	tf
LEAF_NODE	165:11	165:11	10	[
EXPR	165:12	165:12	10	1
FIELD	165:12	165:12	11	1
LEAF_NODE	165:12	165:12	12	1
LEAF_NODE	165:13	165:13	10	]
ASSIGN_OP	165:15	165:15	8	=
LEAF_NODE	165:15	165:15	9	=
RVAL	165:17	165:17	8	tf [ 2 ] = 0
ASSIGN	165:17	165:25	9	tf [ 2 ] = 0
LVAL	165:17	165:17	10	tf [ 2 ]
FIELD	165:17	165:21	11	tf [ 2 ]
LEAF_NODE	165:17	165:17	12	tf
LEAF_NODE	165:19	165:19	12	[
EXPR	165:20	165:20	12	2
FIELD	165:20	165:20	13	2
LEAF_NODE	165:20	165:20	14	2
LEAF_NODE	165:21	165:21	12	]
ASSIGN_OP	165:23	165:23	10	=
LEAF_NODE	165:23	165:23	11	=
RVAL	165:25	165:25	10	0
FIELD	165:25	165:25	11	0
LEAF_NODE	165:25	165:25	12	0
LEAF_NODE	165:26	165:26	4	;
JUMP_STATEMENT	166:1	166:9	3	return 0 ;
KEYWORD	166:1	166:1	4	return
LEAF_NODE	166:1	166:1	5	return
DESTINATION	166:8	166:8	4	0
EXPR	166:8	166:8	5	0
FIELD	166:8	166:8	6	0
LEAF_NODE	166:8	166:8	7	0
LEAF_NODE	166:9	166:9	4	;
LEAF_NODE	167:0	167:0	2	}
FUNCTION_DEF	169:0	197:0	1	
RETURN_TYPE	169:0	169:7	2	static int
LEAF_NODE	169:0	169:0	3	static
TYPE_NAME	169:7	169:7	3	int
LEAF_NODE	169:7	169:7	4	int
FUNCTION_NAME	170:0	170:0	2	TIFFDefaultRefBlackWhite
LEAF_NODE	170:0	170:0	3	TIFFDefaultRefBlackWhite
PARAMETER_LIST	170:24	170:42	2	( TIFFDirectory * td )
LEAF_NODE	170:24	170:24	3	(
PARAMETER_DECL	170:25	170:40	3	TIFFDirectory * td
TYPE	170:25	170:38	4	TIFFDirectory *
TYPE_NAME	170:25	170:25	5	TIFFDirectory
LEAF_NODE	170:25	170:25	6	TIFFDirectory
POINTER	170:38	170:38	5	*
LEAF_NODE	170:38	170:38	6	*
NAME	170:40	170:40	4	td
LEAF_NODE	170:40	170:40	5	td
LEAF_NODE	170:42	170:42	3	)
LEAF_NODE	171:0	171:0	2	{
STATEMENTS	172:1	196:1	2	
SIMPLE_DECL	172:1	172:6	3	int i ;
VAR_DECL	172:1	172:5	4	int i
TYPE	172:1	172:1	5	int
TYPE_NAME	172:1	172:1	6	int
LEAF_NODE	172:1	172:1	7	int
NAME	172:5	172:5	5	i
LEAF_NODE	172:5	172:5	6	i
LEAF_NODE	172:6	172:6	4	;
EXPR_STATEMENT	174:8	174:69	3	td -> td_refblackwhite = ( float * ) _TIFFmalloc ( 6 * sizeof ( float ) ) ;
EXPR	174:8	174:8	4	td -> td_refblackwhite = ( float * ) _TIFFmalloc ( 6 * sizeof ( float ) )
ASSIGN	174:8	174:31	5	td -> td_refblackwhite = ( float * ) _TIFFmalloc ( 6 * sizeof ( float ) )
LVAL	174:8	174:8	6	td -> td_refblackwhite
FIELD	174:8	174:12	7	td -> td_refblackwhite
LEAF_NODE	174:8	174:8	8	td
LEAF_NODE	174:10	174:10	8	->
LEAF_NODE	174:12	174:12	8	td_refblackwhite
ASSIGN_OP	174:29	174:29	6	=
LEAF_NODE	174:29	174:29	7	=
RVAL	174:31	174:40	6	( float * ) _TIFFmalloc ( 6 * sizeof ( float ) )
LEAF_NODE	174:31	174:31	7	(
TYPE_NAME	174:32	174:32	7	float
LEAF_NODE	174:32	174:32	8	float
LEAF_NODE	174:38	174:38	7	*
LEAF_NODE	174:39	174:39	7	)
FUNCTION_CALL	174:40	174:68	7	_TIFFmalloc ( 6 * sizeof ( float ) )
CALLEE	174:40	174:40	8	_TIFFmalloc
LEAF_NODE	174:40	174:40	9	_TIFFmalloc
LEAF_NODE	174:51	174:51	8	(
ARGUMENT	174:52	174:54	8	6 * sizeof ( float )
FIELD	174:52	174:52	9	6
LEAF_NODE	174:52	174:52	10	6
LEAF_NODE	174:53	174:53	9	*
FUNCTION_CALL	174:54	174:67	9	sizeof ( float )
CALLEE	174:54	174:54	10	sizeof
LEAF_NODE	174:54	174:54	11	sizeof
LEAF_NODE	174:61	174:61	10	(
ARGUMENT	174:62	174:62	10	float
FIELD	174:62	174:62	11	float
LEAF_NODE	174:62	174:62	12	float
LEAF_NODE	174:67	174:67	10	)
LEAF_NODE	174:68	174:68	8	)
LEAF_NODE	174:69	174:69	4	;
SELECTION	175:1	176:2	3	
KEYWORD	175:1	175:1	4	if
LEAF_NODE	175:1	175:1	5	if
LEAF_NODE	175:4	175:4	4	(
CONDITION	175:5	175:5	4	td -> td_refblackwhite == NULL
EXPR	175:5	175:29	5	td -> td_refblackwhite == NULL
FIELD	175:5	175:9	6	td -> td_refblackwhite
LEAF_NODE	175:5	175:5	7	td
LEAF_NODE	175:7	175:7	7	->
LEAF_NODE	175:9	175:9	7	td_refblackwhite
EQ_OPERATOR	175:26	175:26	6	==
LEAF_NODE	175:26	175:26	7	==
FIELD	175:29	175:29	6	NULL
LEAF_NODE	175:29	175:29	7	NULL
LEAF_NODE	175:33	175:33	4	)
STATEMENTS	176:2	176:2	4	
JUMP_STATEMENT	176:2	176:10	5	return 0 ;
KEYWORD	176:2	176:2	6	return
LEAF_NODE	176:2	176:2	7	return
DESTINATION	176:9	176:9	6	0
EXPR	176:9	176:9	7	0
FIELD	176:9	176:9	8	0
LEAF_NODE	176:9	176:9	9	0
LEAF_NODE	176:10	176:10	6	;
SELECTION	177:8	177:53	3	
KEYWORD	177:8	177:8	4	if
LEAF_NODE	177:8	177:8	5	if
LEAF_NODE	177:11	177:11	4	(
CONDITION	177:12	177:12	4	td -> td_photometric == PHOTOMETRIC_YCBCR
EXPR	177:12	177:34	5	td -> td_photometric == PHOTOMETRIC_YCBCR
FIELD	177:12	177:16	6	td -> td_photometric
LEAF_NODE	177:12	177:12	7	td
LEAF_NODE	177:14	177:14	7	->
LEAF_NODE	177:16	177:16	7	td_photometric
EQ_OPERATOR	177:31	177:31	6	==
LEAF_NODE	177:31	177:31	7	==
FIELD	177:34	177:34	6	PHOTOMETRIC_YCBCR
LEAF_NODE	177:34	177:34	7	PHOTOMETRIC_YCBCR
LEAF_NODE	177:51	177:51	4	)
STATEMENTS	177:53	186:1	4	
LEAF_NODE	177:53	177:53	5	{
STATEMENTS	182:2	185:2	5	
EXPR_STATEMENT	182:2	182:32	6	td -> td_refblackwhite [ 0 ] = 0.0F ;
EXPR	182:2	182:2	7	td -> td_refblackwhite [ 0 ] = 0.0F
ASSIGN	182:2	182:28	8	td -> td_refblackwhite [ 0 ] = 0.0F
LVAL	182:2	182:2	9	td -> td_refblackwhite [ 0 ]
FIELD	182:2	182:24	10	td -> td_refblackwhite [ 0 ]
LEAF_NODE	182:2	182:2	11	td
LEAF_NODE	182:4	182:4	11	->
LEAF_NODE	182:6	182:6	11	td_refblackwhite
LEAF_NODE	182:22	182:22	11	[
EXPR	182:23	182:23	11	0
FIELD	182:23	182:23	12	0
LEAF_NODE	182:23	182:23	13	0
LEAF_NODE	182:24	182:24	11	]
ASSIGN_OP	182:26	182:26	9	=
LEAF_NODE	182:26	182:26	10	=
RVAL	182:28	182:28	9	0.0F
FIELD	182:28	182:28	10	0.0F
LEAF_NODE	182:28	182:28	11	0.0F
LEAF_NODE	182:32	182:32	7	;
EXPR_STATEMENT	183:2	184:35	6	td -> td_refblackwhite [ 1 ] = td -> td_refblackwhite [ 3 ] = td -> td_refblackwhite [ 5 ] = 255.0F ;
EXPR	183:2	183:2	7	td -> td_refblackwhite [ 1 ] = td -> td_refblackwhite [ 3 ] = td -> td_refblackwhite [ 5 ] = 255.0F
ASSIGN	183:2	183:28	8	td -> td_refblackwhite [ 1 ] = td -> td_refblackwhite [ 3 ] = td -> td_refblackwhite [ 5 ] = 255.0F
LVAL	183:2	183:2	9	td -> td_refblackwhite [ 1 ]
FIELD	183:2	183:24	10	td -> td_refblackwhite [ 1 ]
LEAF_NODE	183:2	183:2	11	td
LEAF_NODE	183:4	183:4	11	->
LEAF_NODE	183:6	183:6	11	td_refblackwhite
LEAF_NODE	183:22	183:22	11	[
EXPR	183:23	183:23	11	1
FIELD	183:23	183:23	12	1
LEAF_NODE	183:23	183:23	13	1
LEAF_NODE	183:24	183:24	11	]
ASSIGN_OP	183:26	183:26	9	=
LEAF_NODE	183:26	183:26	10	=
RVAL	183:28	183:28	9	td -> td_refblackwhite [ 3 ] = td -> td_refblackwhite [ 5 ] = 255.0F
ASSIGN	183:28	184:3	10	td -> td_refblackwhite [ 3 ] = td -> td_refblackwhite [ 5 ] = 255.0F
LVAL	183:28	183:28	11	td -> td_refblackwhite [ 3 ]
FIELD	183:28	183:50	12	td -> td_refblackwhite [ 3 ]
LEAF_NODE	183:28	183:28	13	td
LEAF_NODE	183:30	183:30	13	->
LEAF_NODE	183:32	183:32	13	td_refblackwhite
LEAF_NODE	183:48	183:48	13	[
EXPR	183:49	183:49	13	3
FIELD	183:49	183:49	14	3
LEAF_NODE	183:49	183:49	15	3
LEAF_NODE	183:50	183:50	13	]
ASSIGN_OP	183:52	183:52	11	=
LEAF_NODE	183:52	183:52	12	=
RVAL	184:3	184:3	11	td -> td_refblackwhite [ 5 ] = 255.0F
ASSIGN	184:3	184:29	12	td -> td_refblackwhite [ 5 ] = 255.0F
LVAL	184:3	184:3	13	td -> td_refblackwhite [ 5 ]
FIELD	184:3	184:25	14	td -> td_refblackwhite [ 5 ]
LEAF_NODE	184:3	184:3	15	td
LEAF_NODE	184:5	184:5	15	->
LEAF_NODE	184:7	184:7	15	td_refblackwhite
LEAF_NODE	184:23	184:23	15	[
EXPR	184:24	184:24	15	5
FIELD	184:24	184:24	16	5
LEAF_NODE	184:24	184:24	17	5
LEAF_NODE	184:25	184:25	15	]
ASSIGN_OP	184:27	184:27	13	=
LEAF_NODE	184:27	184:27	14	=
RVAL	184:29	184:29	13	255.0F
FIELD	184:29	184:29	14	255.0F
LEAF_NODE	184:29	184:29	15	255.0F
LEAF_NODE	184:35	184:35	7	;
EXPR_STATEMENT	185:2	185:60	6	td -> td_refblackwhite [ 2 ] = td -> td_refblackwhite [ 4 ] = 128.0F ;
EXPR	185:2	185:2	7	td -> td_refblackwhite [ 2 ] = td -> td_refblackwhite [ 4 ] = 128.0F
ASSIGN	185:2	185:28	8	td -> td_refblackwhite [ 2 ] = td -> td_refblackwhite [ 4 ] = 128.0F
LVAL	185:2	185:2	9	td -> td_refblackwhite [ 2 ]
FIELD	185:2	185:24	10	td -> td_refblackwhite [ 2 ]
LEAF_NODE	185:2	185:2	11	td
LEAF_NODE	185:4	185:4	11	->
LEAF_NODE	185:6	185:6	11	td_refblackwhite
LEAF_NODE	185:22	185:22	11	[
EXPR	185:23	185:23	11	2
FIELD	185:23	185:23	12	2
LEAF_NODE	185:23	185:23	13	2
LEAF_NODE	185:24	185:24	11	]
ASSIGN_OP	185:26	185:26	9	=
LEAF_NODE	185:26	185:26	10	=
RVAL	185:28	185:28	9	td -> td_refblackwhite [ 4 ] = 128.0F
ASSIGN	185:28	185:54	10	td -> td_refblackwhite [ 4 ] = 128.0F
LVAL	185:28	185:28	11	td -> td_refblackwhite [ 4 ]
FIELD	185:28	185:50	12	td -> td_refblackwhite [ 4 ]
LEAF_NODE	185:28	185:28	13	td
LEAF_NODE	185:30	185:30	13	->
LEAF_NODE	185:32	185:32	13	td_refblackwhite
LEAF_NODE	185:48	185:48	13	[
EXPR	185:49	185:49	13	4
FIELD	185:49	185:49	14	4
LEAF_NODE	185:49	185:49	15	4
LEAF_NODE	185:50	185:50	13	]
ASSIGN_OP	185:52	185:52	11	=
LEAF_NODE	185:52	185:52	12	=
RVAL	185:54	185:54	11	128.0F
FIELD	185:54	185:54	12	128.0F
LEAF_NODE	185:54	185:54	13	128.0F
LEAF_NODE	185:60	185:60	7	;
LEAF_NODE	186:1	186:1	5	}
SELECTION	186:3	186:8	3	
KEYWORD	186:3	186:3	4	else
LEAF_NODE	186:3	186:3	5	else
STATEMENTS	186:8	195:1	4	
LEAF_NODE	186:8	186:8	5	{
STATEMENTS	190:2	190:2	5	
ITERATION	190:2	190:26	6	
KEYWORD	190:2	190:2	7	for
LEAF_NODE	190:2	190:2	8	for
LEAF_NODE	190:6	190:6	7	(
FOR_INIT	190:7	190:12	7	i = 0 ;
EXPR	190:7	190:7	8	i = 0
ASSIGN	190:7	190:11	9	i = 0
LVAL	190:7	190:7	10	i
FIELD	190:7	190:7	11	i
LEAF_NODE	190:7	190:7	12	i
ASSIGN_OP	190:9	190:9	10	=
LEAF_NODE	190:9	190:9	11	=
RVAL	190:11	190:11	10	0
FIELD	190:11	190:11	11	0
LEAF_NODE	190:11	190:11	12	0
LEAF_NODE	190:12	190:12	8	;
CONDITION	190:14	190:14	7	i < 3
EXPR	190:14	190:18	8	i < 3
FIELD	190:14	190:14	9	i
LEAF_NODE	190:14	190:14	10	i
REL_OPERATOR	190:16	190:16	9	<
LEAF_NODE	190:16	190:16	10	<
FIELD	190:18	190:18	9	3
LEAF_NODE	190:18	190:18	10	3
LEAF_NODE	190:19	190:19	7	;
FOR_EXPR	190:21	190:21	7	i ++
EXPR	190:21	190:21	8	i ++
FIELD	190:21	190:22	9	i ++
LEAF_NODE	190:21	190:21	10	i
LEAF_NODE	190:22	190:22	10	++
LEAF_NODE	190:24	190:24	7	)
STATEMENTS	190:26	194:2	7	
LEAF_NODE	190:26	190:26	8	{
STATEMENTS	191:6	192:6	8	
EXPR_STATEMENT	191:6	191:37	9	td -> td_refblackwhite [ 2 * i + 0 ] = 0 ;
EXPR	191:6	191:6	10	td -> td_refblackwhite [ 2 * i + 0 ] = 0
ASSIGN	191:6	191:36	11	td -> td_refblackwhite [ 2 * i + 0 ] = 0
LVAL	191:6	191:6	12	td -> td_refblackwhite [ 2 * i + 0 ]
FIELD	191:6	191:32	13	td -> td_refblackwhite [ 2 * i + 0 ]
LEAF_NODE	191:6	191:6	14	td
LEAF_NODE	191:8	191:8	14	->
LEAF_NODE	191:10	191:10	14	td_refblackwhite
LEAF_NODE	191:26	191:26	14	[
EXPR	191:27	191:31	14	2 * i + 0
FIELD	191:27	191:27	15	2
LEAF_NODE	191:27	191:27	16	2
LEAF_NODE	191:28	191:28	15	*
FIELD	191:29	191:29	15	i
LEAF_NODE	191:29	191:29	16	i
LEAF_NODE	191:30	191:30	15	+
FIELD	191:31	191:31	15	0
LEAF_NODE	191:31	191:31	16	0
LEAF_NODE	191:32	191:32	14	]
ASSIGN_OP	191:34	191:34	12	=
LEAF_NODE	191:34	191:34	13	=
RVAL	191:36	191:36	12	0
FIELD	191:36	191:36	13	0
LEAF_NODE	191:36	191:36	14	0
LEAF_NODE	191:37	191:37	10	;
EXPR_STATEMENT	192:6	193:45	9	td -> td_refblackwhite [ 2 * i + 1 ] = ( float ) ( ( 1L << td -> td_bitspersample ) - 1L ) ;
EXPR	192:6	192:6	10	td -> td_refblackwhite [ 2 * i + 1 ] = ( float ) ( ( 1L << td -> td_bitspersample ) - 1L )
ASSIGN	192:6	193:7	11	td -> td_refblackwhite [ 2 * i + 1 ] = ( float ) ( ( 1L << td -> td_bitspersample ) - 1L )
LVAL	192:6	192:6	12	td -> td_refblackwhite [ 2 * i + 1 ]
FIELD	192:6	192:32	13	td -> td_refblackwhite [ 2 * i + 1 ]
LEAF_NODE	192:6	192:6	14	td
LEAF_NODE	192:8	192:8	14	->
LEAF_NODE	192:10	192:10	14	td_refblackwhite
LEAF_NODE	192:26	192:26	14	[
EXPR	192:27	192:31	14	2 * i + 1
FIELD	192:27	192:27	15	2
LEAF_NODE	192:27	192:27	16	2
LEAF_NODE	192:28	192:28	15	*
FIELD	192:29	192:29	15	i
LEAF_NODE	192:29	192:29	16	i
LEAF_NODE	192:30	192:30	15	+
FIELD	192:31	192:31	15	1
LEAF_NODE	192:31	192:31	16	1
LEAF_NODE	192:32	192:32	14	]
ASSIGN_OP	192:34	192:34	12	=
LEAF_NODE	192:34	192:34	13	=
RVAL	193:7	193:44	12	( float ) ( ( 1L << td -> td_bitspersample ) - 1L )
LEAF_NODE	193:7	193:7	13	(
TYPE_NAME	193:8	193:8	13	float
LEAF_NODE	193:8	193:8	14	float
LEAF_NODE	193:13	193:13	13	)
LEAF_NODE	193:14	193:14	13	(
LEAF_NODE	193:15	193:15	13	(
FIELD	193:16	193:16	13	1L
LEAF_NODE	193:16	193:16	14	1L
LEAF_NODE	193:18	193:18	13	<<
FIELD	193:20	193:24	13	td -> td_bitspersample
LEAF_NODE	193:20	193:20	14	td
LEAF_NODE	193:22	193:22	14	->
LEAF_NODE	193:24	193:24	14	td_bitspersample
LEAF_NODE	193:40	193:40	13	)
LEAF_NODE	193:41	193:41	13	-
FIELD	193:42	193:42	13	1L
LEAF_NODE	193:42	193:42	14	1L
LEAF_NODE	193:44	193:44	13	)
LEAF_NODE	193:45	193:45	10	;
LEAF_NODE	194:2	194:2	8	}
LEAF_NODE	195:1	195:1	5	}
JUMP_STATEMENT	196:1	196:9	3	return 1 ;
KEYWORD	196:1	196:1	4	return
LEAF_NODE	196:1	196:1	5	return
DESTINATION	196:8	196:8	4	1
EXPR	196:8	196:8	5	1
FIELD	196:8	196:8	6	1
LEAF_NODE	196:8	196:8	7	1
LEAF_NODE	196:9	196:9	4	;
LEAF_NODE	197:0	197:0	2	}
FUNCTION_DEF	207:0	337:0	1	
RETURN_TYPE	207:0	207:0	2	int
TYPE_NAME	207:0	207:0	3	int
LEAF_NODE	207:0	207:0	4	int
FUNCTION_NAME	208:0	208:0	2	TIFFVGetFieldDefaulted
LEAF_NODE	208:0	208:0	3	TIFFVGetFieldDefaulted
PARAMETER_LIST	208:22	208:56	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	208:22	208:22	3	(
PARAMETER_DECL	208:23	208:29	3	TIFF * tif
TYPE	208:23	208:27	4	TIFF *
TYPE_NAME	208:23	208:23	5	TIFF
LEAF_NODE	208:23	208:23	6	TIFF
POINTER	208:27	208:27	5	*
LEAF_NODE	208:27	208:27	6	*
NAME	208:29	208:29	4	tif
LEAF_NODE	208:29	208:29	5	tif
LEAF_NODE	208:32	208:32	3	,
PARAMETER_DECL	208:34	208:41	3	uint32 tag
TYPE	208:34	208:34	4	uint32
TYPE_NAME	208:34	208:34	5	uint32
LEAF_NODE	208:34	208:34	6	uint32
NAME	208:41	208:41	4	tag
LEAF_NODE	208:41	208:41	5	tag
LEAF_NODE	208:44	208:44	3	,
PARAMETER_DECL	208:46	208:54	3	va_list ap
TYPE	208:46	208:46	4	va_list
TYPE_NAME	208:46	208:46	5	va_list
LEAF_NODE	208:46	208:46	6	va_list
NAME	208:54	208:54	4	ap
LEAF_NODE	208:54	208:54	5	ap
LEAF_NODE	208:56	208:56	3	)
LEAF_NODE	209:0	209:0	2	{
STATEMENTS	210:1	336:1	2	
SIMPLE_DECL	210:1	210:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	210:1	210:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	210:1	210:15	5	TIFFDirectory *
TYPE_NAME	210:1	210:1	6	TIFFDirectory
LEAF_NODE	210:1	210:1	7	TIFFDirectory
POINTER	210:15	210:15	6	*
LEAF_NODE	210:15	210:15	7	*
NAME	210:16	210:16	5	td
LEAF_NODE	210:16	210:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	210:16	210:16	5	td = & tif -> tif_dir
ASSIGN	210:16	210:21	6	td = & tif -> tif_dir
LVAL	210:16	210:16	7	td
NAME	210:16	210:16	8	td
LEAF_NODE	210:16	210:16	9	td
ASSIGN_OP	210:19	210:19	7	=
LEAF_NODE	210:19	210:19	8	=
RVAL	210:21	210:21	7	& tif -> tif_dir
UNARY_EXPR	210:21	210:22	8	& tif -> tif_dir
UNARY_OPERATOR	210:21	210:21	9	&
LEAF_NODE	210:21	210:21	10	&
FIELD	210:22	210:27	9	tif -> tif_dir
LEAF_NODE	210:22	210:22	10	tif
LEAF_NODE	210:25	210:25	10	->
LEAF_NODE	210:27	210:27	10	tif_dir
LEAF_NODE	210:34	210:34	4	;
SELECTION	212:1	213:2	3	
KEYWORD	212:1	212:1	4	if
LEAF_NODE	212:1	212:1	5	if
LEAF_NODE	212:4	212:4	4	(
CONDITION	212:5	212:5	4	TIFFVGetField ( tif , tag , ap )
EXPR	212:5	212:5	5	TIFFVGetField ( tif , tag , ap )
FUNCTION_CALL	212:5	212:31	6	TIFFVGetField ( tif , tag , ap )
CALLEE	212:5	212:5	7	TIFFVGetField
LEAF_NODE	212:5	212:5	8	TIFFVGetField
LEAF_NODE	212:18	212:18	7	(
ARGUMENT	212:19	212:19	7	tif
FIELD	212:19	212:19	8	tif
LEAF_NODE	212:19	212:19	9	tif
LEAF_NODE	212:22	212:22	7	,
ARGUMENT	212:24	212:24	7	tag
FIELD	212:24	212:24	8	tag
LEAF_NODE	212:24	212:24	9	tag
LEAF_NODE	212:27	212:27	7	,
ARGUMENT	212:29	212:29	7	ap
FIELD	212:29	212:29	8	ap
LEAF_NODE	212:29	212:29	9	ap
LEAF_NODE	212:31	212:31	7	)
LEAF_NODE	212:32	212:32	4	)
STATEMENTS	213:2	213:2	4	
JUMP_STATEMENT	213:2	213:12	5	return ( 1 ) ;
KEYWORD	213:2	213:2	6	return
LEAF_NODE	213:2	213:2	7	return
DESTINATION	213:9	213:9	6	( 1 )
EXPR	213:9	213:11	7	( 1 )
LEAF_NODE	213:9	213:9	8	(
FIELD	213:10	213:10	8	1
LEAF_NODE	213:10	213:10	9	1
LEAF_NODE	213:11	213:11	8	)
LEAF_NODE	213:12	213:12	6	;
SELECTION	214:1	214:14	3	
KEYWORD	214:1	214:1	4	switch
LEAF_NODE	214:1	214:1	5	switch
LEAF_NODE	214:8	214:8	4	(
CONDITION	214:9	214:9	4	tag
EXPR	214:9	214:9	5	tag
FIELD	214:9	214:9	6	tag
LEAF_NODE	214:9	214:9	7	tag
LEAF_NODE	214:12	214:12	4	)
STATEMENTS	214:14	335:1	4	
LEAF_NODE	214:14	214:14	5	{
STATEMENTS	215:1	334:2	5	
LABEL	215:1	215:25	6	case TIFFTAG_SUBFILETYPE :
LEAF_NODE	215:1	215:1	7	case
LEAF_NODE	215:6	215:6	7	TIFFTAG_SUBFILETYPE
LEAF_NODE	215:25	215:25	7	:
LEAF_NODE	216:2	216:2	6	*
LEAF_NODE	216:3	216:3	6	va_arg
LEAF_NODE	216:9	216:9	6	(
LEAF_NODE	216:10	216:10	6	ap
LEAF_NODE	216:12	216:12	6	,
LEAF_NODE	216:14	216:14	6	uint32
LEAF_NODE	216:21	216:21	6	*
LEAF_NODE	216:22	216:22	6	)
LEAF_NODE	216:24	216:24	6	=
EXPR_STATEMENT	216:26	216:44	6	td -> td_subfiletype ;
EXPR	216:26	216:26	7	td -> td_subfiletype
FIELD	216:26	216:30	8	td -> td_subfiletype
LEAF_NODE	216:26	216:26	9	td
LEAF_NODE	216:28	216:28	9	->
LEAF_NODE	216:30	216:30	9	td_subfiletype
LEAF_NODE	216:44	216:44	7	;
JUMP_STATEMENT	217:2	217:12	6	return ( 1 ) ;
KEYWORD	217:2	217:2	7	return
LEAF_NODE	217:2	217:2	8	return
DESTINATION	217:9	217:9	7	( 1 )
EXPR	217:9	217:11	8	( 1 )
LEAF_NODE	217:9	217:9	9	(
FIELD	217:10	217:10	9	1
LEAF_NODE	217:10	217:10	10	1
LEAF_NODE	217:11	217:11	9	)
LEAF_NODE	217:12	217:12	7	;
LABEL	218:1	218:27	6	case TIFFTAG_BITSPERSAMPLE :
LEAF_NODE	218:1	218:1	7	case
LEAF_NODE	218:6	218:6	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	218:27	218:27	7	:
LEAF_NODE	219:2	219:2	6	*
LEAF_NODE	219:3	219:3	6	va_arg
LEAF_NODE	219:9	219:9	6	(
LEAF_NODE	219:10	219:10	6	ap
LEAF_NODE	219:12	219:12	6	,
LEAF_NODE	219:14	219:14	6	uint16
LEAF_NODE	219:21	219:21	6	*
LEAF_NODE	219:22	219:22	6	)
LEAF_NODE	219:24	219:24	6	=
EXPR_STATEMENT	219:26	219:46	6	td -> td_bitspersample ;
EXPR	219:26	219:26	7	td -> td_bitspersample
FIELD	219:26	219:30	8	td -> td_bitspersample
LEAF_NODE	219:26	219:26	9	td
LEAF_NODE	219:28	219:28	9	->
LEAF_NODE	219:30	219:30	9	td_bitspersample
LEAF_NODE	219:46	219:46	7	;
JUMP_STATEMENT	220:2	220:12	6	return ( 1 ) ;
KEYWORD	220:2	220:2	7	return
LEAF_NODE	220:2	220:2	8	return
DESTINATION	220:9	220:9	7	( 1 )
EXPR	220:9	220:11	8	( 1 )
LEAF_NODE	220:9	220:9	9	(
FIELD	220:10	220:10	9	1
LEAF_NODE	220:10	220:10	10	1
LEAF_NODE	220:11	220:11	9	)
LEAF_NODE	220:12	220:12	7	;
LABEL	221:1	221:27	6	case TIFFTAG_THRESHHOLDING :
LEAF_NODE	221:1	221:1	7	case
LEAF_NODE	221:6	221:6	7	TIFFTAG_THRESHHOLDING
LEAF_NODE	221:27	221:27	7	:
LEAF_NODE	222:2	222:2	6	*
LEAF_NODE	222:3	222:3	6	va_arg
LEAF_NODE	222:9	222:9	6	(
LEAF_NODE	222:10	222:10	6	ap
LEAF_NODE	222:12	222:12	6	,
LEAF_NODE	222:14	222:14	6	uint16
LEAF_NODE	222:21	222:21	6	*
LEAF_NODE	222:22	222:22	6	)
LEAF_NODE	222:24	222:24	6	=
EXPR_STATEMENT	222:26	222:46	6	td -> td_threshholding ;
EXPR	222:26	222:26	7	td -> td_threshholding
FIELD	222:26	222:30	8	td -> td_threshholding
LEAF_NODE	222:26	222:26	9	td
LEAF_NODE	222:28	222:28	9	->
LEAF_NODE	222:30	222:30	9	td_threshholding
LEAF_NODE	222:46	222:46	7	;
JUMP_STATEMENT	223:2	223:12	6	return ( 1 ) ;
KEYWORD	223:2	223:2	7	return
LEAF_NODE	223:2	223:2	8	return
DESTINATION	223:9	223:9	7	( 1 )
EXPR	223:9	223:11	8	( 1 )
LEAF_NODE	223:9	223:9	9	(
FIELD	223:10	223:10	9	1
LEAF_NODE	223:10	223:10	10	1
LEAF_NODE	223:11	223:11	9	)
LEAF_NODE	223:12	223:12	7	;
LABEL	224:1	224:23	6	case TIFFTAG_FILLORDER :
LEAF_NODE	224:1	224:1	7	case
LEAF_NODE	224:6	224:6	7	TIFFTAG_FILLORDER
LEAF_NODE	224:23	224:23	7	:
LEAF_NODE	225:2	225:2	6	*
LEAF_NODE	225:3	225:3	6	va_arg
LEAF_NODE	225:9	225:9	6	(
LEAF_NODE	225:10	225:10	6	ap
LEAF_NODE	225:12	225:12	6	,
LEAF_NODE	225:14	225:14	6	uint16
LEAF_NODE	225:21	225:21	6	*
LEAF_NODE	225:22	225:22	6	)
LEAF_NODE	225:24	225:24	6	=
EXPR_STATEMENT	225:26	225:42	6	td -> td_fillorder ;
EXPR	225:26	225:26	7	td -> td_fillorder
FIELD	225:26	225:30	8	td -> td_fillorder
LEAF_NODE	225:26	225:26	9	td
LEAF_NODE	225:28	225:28	9	->
LEAF_NODE	225:30	225:30	9	td_fillorder
LEAF_NODE	225:42	225:42	7	;
JUMP_STATEMENT	226:2	226:12	6	return ( 1 ) ;
KEYWORD	226:2	226:2	7	return
LEAF_NODE	226:2	226:2	8	return
DESTINATION	226:9	226:9	7	( 1 )
EXPR	226:9	226:11	8	( 1 )
LEAF_NODE	226:9	226:9	9	(
FIELD	226:10	226:10	9	1
LEAF_NODE	226:10	226:10	10	1
LEAF_NODE	226:11	226:11	9	)
LEAF_NODE	226:12	226:12	7	;
LABEL	227:1	227:25	6	case TIFFTAG_ORIENTATION :
LEAF_NODE	227:1	227:1	7	case
LEAF_NODE	227:6	227:6	7	TIFFTAG_ORIENTATION
LEAF_NODE	227:25	227:25	7	:
LEAF_NODE	228:2	228:2	6	*
LEAF_NODE	228:3	228:3	6	va_arg
LEAF_NODE	228:9	228:9	6	(
LEAF_NODE	228:10	228:10	6	ap
LEAF_NODE	228:12	228:12	6	,
LEAF_NODE	228:14	228:14	6	uint16
LEAF_NODE	228:21	228:21	6	*
LEAF_NODE	228:22	228:22	6	)
LEAF_NODE	228:24	228:24	6	=
EXPR_STATEMENT	228:26	228:44	6	td -> td_orientation ;
EXPR	228:26	228:26	7	td -> td_orientation
FIELD	228:26	228:30	8	td -> td_orientation
LEAF_NODE	228:26	228:26	9	td
LEAF_NODE	228:28	228:28	9	->
LEAF_NODE	228:30	228:30	9	td_orientation
LEAF_NODE	228:44	228:44	7	;
JUMP_STATEMENT	229:2	229:12	6	return ( 1 ) ;
KEYWORD	229:2	229:2	7	return
LEAF_NODE	229:2	229:2	8	return
DESTINATION	229:9	229:9	7	( 1 )
EXPR	229:9	229:11	8	( 1 )
LEAF_NODE	229:9	229:9	9	(
FIELD	229:10	229:10	9	1
LEAF_NODE	229:10	229:10	10	1
LEAF_NODE	229:11	229:11	9	)
LEAF_NODE	229:12	229:12	7	;
LABEL	230:1	230:29	6	case TIFFTAG_SAMPLESPERPIXEL :
LEAF_NODE	230:1	230:1	7	case
LEAF_NODE	230:6	230:6	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	230:29	230:29	7	:
LEAF_NODE	231:2	231:2	6	*
LEAF_NODE	231:3	231:3	6	va_arg
LEAF_NODE	231:9	231:9	6	(
LEAF_NODE	231:10	231:10	6	ap
LEAF_NODE	231:12	231:12	6	,
LEAF_NODE	231:14	231:14	6	uint16
LEAF_NODE	231:21	231:21	6	*
LEAF_NODE	231:22	231:22	6	)
LEAF_NODE	231:24	231:24	6	=
EXPR_STATEMENT	231:26	231:48	6	td -> td_samplesperpixel ;
EXPR	231:26	231:26	7	td -> td_samplesperpixel
FIELD	231:26	231:30	8	td -> td_samplesperpixel
LEAF_NODE	231:26	231:26	9	td
LEAF_NODE	231:28	231:28	9	->
LEAF_NODE	231:30	231:30	9	td_samplesperpixel
LEAF_NODE	231:48	231:48	7	;
JUMP_STATEMENT	232:2	232:12	6	return ( 1 ) ;
KEYWORD	232:2	232:2	7	return
LEAF_NODE	232:2	232:2	8	return
DESTINATION	232:9	232:9	7	( 1 )
EXPR	232:9	232:11	8	( 1 )
LEAF_NODE	232:9	232:9	9	(
FIELD	232:10	232:10	9	1
LEAF_NODE	232:10	232:10	10	1
LEAF_NODE	232:11	232:11	9	)
LEAF_NODE	232:12	232:12	7	;
LABEL	233:1	233:26	6	case TIFFTAG_ROWSPERSTRIP :
LEAF_NODE	233:1	233:1	7	case
LEAF_NODE	233:6	233:6	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	233:26	233:26	7	:
LEAF_NODE	234:2	234:2	6	*
LEAF_NODE	234:3	234:3	6	va_arg
LEAF_NODE	234:9	234:9	6	(
LEAF_NODE	234:10	234:10	6	ap
LEAF_NODE	234:12	234:12	6	,
LEAF_NODE	234:14	234:14	6	uint32
LEAF_NODE	234:21	234:21	6	*
LEAF_NODE	234:22	234:22	6	)
LEAF_NODE	234:24	234:24	6	=
EXPR_STATEMENT	234:26	234:45	6	td -> td_rowsperstrip ;
EXPR	234:26	234:26	7	td -> td_rowsperstrip
FIELD	234:26	234:30	8	td -> td_rowsperstrip
LEAF_NODE	234:26	234:26	9	td
LEAF_NODE	234:28	234:28	9	->
LEAF_NODE	234:30	234:30	9	td_rowsperstrip
LEAF_NODE	234:45	234:45	7	;
JUMP_STATEMENT	235:2	235:12	6	return ( 1 ) ;
KEYWORD	235:2	235:2	7	return
LEAF_NODE	235:2	235:2	8	return
DESTINATION	235:9	235:9	7	( 1 )
EXPR	235:9	235:11	8	( 1 )
LEAF_NODE	235:9	235:9	9	(
FIELD	235:10	235:10	9	1
LEAF_NODE	235:10	235:10	10	1
LEAF_NODE	235:11	235:11	9	)
LEAF_NODE	235:12	235:12	7	;
LABEL	236:1	236:28	6	case TIFFTAG_MINSAMPLEVALUE :
LEAF_NODE	236:1	236:1	7	case
LEAF_NODE	236:6	236:6	7	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	236:28	236:28	7	:
LEAF_NODE	237:2	237:2	6	*
LEAF_NODE	237:3	237:3	6	va_arg
LEAF_NODE	237:9	237:9	6	(
LEAF_NODE	237:10	237:10	6	ap
LEAF_NODE	237:12	237:12	6	,
LEAF_NODE	237:14	237:14	6	uint16
LEAF_NODE	237:21	237:21	6	*
LEAF_NODE	237:22	237:22	6	)
LEAF_NODE	237:24	237:24	6	=
EXPR_STATEMENT	237:26	237:47	6	td -> td_minsamplevalue ;
EXPR	237:26	237:26	7	td -> td_minsamplevalue
FIELD	237:26	237:30	8	td -> td_minsamplevalue
LEAF_NODE	237:26	237:26	9	td
LEAF_NODE	237:28	237:28	9	->
LEAF_NODE	237:30	237:30	9	td_minsamplevalue
LEAF_NODE	237:47	237:47	7	;
JUMP_STATEMENT	238:2	238:12	6	return ( 1 ) ;
KEYWORD	238:2	238:2	7	return
LEAF_NODE	238:2	238:2	8	return
DESTINATION	238:9	238:9	7	( 1 )
EXPR	238:9	238:11	8	( 1 )
LEAF_NODE	238:9	238:9	9	(
FIELD	238:10	238:10	9	1
LEAF_NODE	238:10	238:10	10	1
LEAF_NODE	238:11	238:11	9	)
LEAF_NODE	238:12	238:12	7	;
LABEL	239:1	239:28	6	case TIFFTAG_MAXSAMPLEVALUE :
LEAF_NODE	239:1	239:1	7	case
LEAF_NODE	239:6	239:6	7	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	239:28	239:28	7	:
LEAF_NODE	240:2	240:2	6	*
LEAF_NODE	240:3	240:3	6	va_arg
LEAF_NODE	240:9	240:9	6	(
LEAF_NODE	240:10	240:10	6	ap
LEAF_NODE	240:12	240:12	6	,
LEAF_NODE	240:14	240:14	6	uint16
LEAF_NODE	240:21	240:21	6	*
LEAF_NODE	240:22	240:22	6	)
LEAF_NODE	240:24	240:24	6	=
EXPR_STATEMENT	240:26	240:47	6	td -> td_maxsamplevalue ;
EXPR	240:26	240:26	7	td -> td_maxsamplevalue
FIELD	240:26	240:30	8	td -> td_maxsamplevalue
LEAF_NODE	240:26	240:26	9	td
LEAF_NODE	240:28	240:28	9	->
LEAF_NODE	240:30	240:30	9	td_maxsamplevalue
LEAF_NODE	240:47	240:47	7	;
JUMP_STATEMENT	241:2	241:12	6	return ( 1 ) ;
KEYWORD	241:2	241:2	7	return
LEAF_NODE	241:2	241:2	8	return
DESTINATION	241:9	241:9	7	( 1 )
EXPR	241:9	241:11	8	( 1 )
LEAF_NODE	241:9	241:9	9	(
FIELD	241:10	241:10	9	1
LEAF_NODE	241:10	241:10	10	1
LEAF_NODE	241:11	241:11	9	)
LEAF_NODE	241:12	241:12	7	;
LABEL	242:1	242:26	6	case TIFFTAG_PLANARCONFIG :
LEAF_NODE	242:1	242:1	7	case
LEAF_NODE	242:6	242:6	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	242:26	242:26	7	:
LEAF_NODE	243:2	243:2	6	*
LEAF_NODE	243:3	243:3	6	va_arg
LEAF_NODE	243:9	243:9	6	(
LEAF_NODE	243:10	243:10	6	ap
LEAF_NODE	243:12	243:12	6	,
LEAF_NODE	243:14	243:14	6	uint16
LEAF_NODE	243:21	243:21	6	*
LEAF_NODE	243:22	243:22	6	)
LEAF_NODE	243:24	243:24	6	=
EXPR_STATEMENT	243:26	243:45	6	td -> td_planarconfig ;
EXPR	243:26	243:26	7	td -> td_planarconfig
FIELD	243:26	243:30	8	td -> td_planarconfig
LEAF_NODE	243:26	243:26	9	td
LEAF_NODE	243:28	243:28	9	->
LEAF_NODE	243:30	243:30	9	td_planarconfig
LEAF_NODE	243:45	243:45	7	;
JUMP_STATEMENT	244:2	244:12	6	return ( 1 ) ;
KEYWORD	244:2	244:2	7	return
LEAF_NODE	244:2	244:2	8	return
DESTINATION	244:9	244:9	7	( 1 )
EXPR	244:9	244:11	8	( 1 )
LEAF_NODE	244:9	244:9	9	(
FIELD	244:10	244:10	9	1
LEAF_NODE	244:10	244:10	10	1
LEAF_NODE	244:11	244:11	9	)
LEAF_NODE	244:12	244:12	7	;
LABEL	245:1	245:28	6	case TIFFTAG_RESOLUTIONUNIT :
LEAF_NODE	245:1	245:1	7	case
LEAF_NODE	245:6	245:6	7	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	245:28	245:28	7	:
LEAF_NODE	246:2	246:2	6	*
LEAF_NODE	246:3	246:3	6	va_arg
LEAF_NODE	246:9	246:9	6	(
LEAF_NODE	246:10	246:10	6	ap
LEAF_NODE	246:12	246:12	6	,
LEAF_NODE	246:14	246:14	6	uint16
LEAF_NODE	246:21	246:21	6	*
LEAF_NODE	246:22	246:22	6	)
LEAF_NODE	246:24	246:24	6	=
EXPR_STATEMENT	246:26	246:47	6	td -> td_resolutionunit ;
EXPR	246:26	246:26	7	td -> td_resolutionunit
FIELD	246:26	246:30	8	td -> td_resolutionunit
LEAF_NODE	246:26	246:26	9	td
LEAF_NODE	246:28	246:28	9	->
LEAF_NODE	246:30	246:30	9	td_resolutionunit
LEAF_NODE	246:47	246:47	7	;
JUMP_STATEMENT	247:2	247:12	6	return ( 1 ) ;
KEYWORD	247:2	247:2	7	return
LEAF_NODE	247:2	247:2	8	return
DESTINATION	247:9	247:9	7	( 1 )
EXPR	247:9	247:11	8	( 1 )
LEAF_NODE	247:9	247:9	9	(
FIELD	247:10	247:10	9	1
LEAF_NODE	247:10	247:10	10	1
LEAF_NODE	247:11	247:11	9	)
LEAF_NODE	247:12	247:12	7	;
LABEL	248:1	248:23	6	case TIFFTAG_PREDICTOR :
LEAF_NODE	248:1	248:1	7	case
LEAF_NODE	248:6	248:6	7	TIFFTAG_PREDICTOR
LEAF_NODE	248:23	248:23	7	:
LEAF_NODE	249:4	249:4	6	{
STATEMENTS	250:8	259:8	6	
SIMPLE_DECL	250:8	250:68	7	TIFFPredictorState * sp ; sp = ( TIFFPredictorState * ) tif -> tif_data ;
VAR_DECL	250:8	250:28	8	TIFFPredictorState * sp ; sp = ( TIFFPredictorState * ) tif -> tif_data
TYPE	250:8	250:26	9	TIFFPredictorState *
TYPE_NAME	250:8	250:8	10	TIFFPredictorState
LEAF_NODE	250:8	250:8	11	TIFFPredictorState
POINTER	250:26	250:26	10	*
LEAF_NODE	250:26	250:26	11	*
NAME	250:28	250:28	9	sp
LEAF_NODE	250:28	250:28	10	sp
LEAF_NODE	0:0	0:0	9	;
INIT	250:28	250:28	9	sp = ( TIFFPredictorState * ) tif -> tif_data
ASSIGN	250:28	250:33	10	sp = ( TIFFPredictorState * ) tif -> tif_data
LVAL	250:28	250:28	11	sp
NAME	250:28	250:28	12	sp
LEAF_NODE	250:28	250:28	13	sp
ASSIGN_OP	250:31	250:31	11	=
LEAF_NODE	250:31	250:31	12	=
RVAL	250:33	250:55	11	( TIFFPredictorState * ) tif -> tif_data
LEAF_NODE	250:33	250:33	12	(
TYPE_NAME	250:34	250:34	12	TIFFPredictorState
LEAF_NODE	250:34	250:34	13	TIFFPredictorState
LEAF_NODE	250:52	250:52	12	*
LEAF_NODE	250:53	250:53	12	)
FIELD	250:55	250:60	12	tif -> tif_data
LEAF_NODE	250:55	250:55	13	tif
LEAF_NODE	250:58	250:58	13	->
LEAF_NODE	250:60	250:60	13	tif_data
LEAF_NODE	250:68	250:68	8	;
SELECTION	251:8	252:8	7	
KEYWORD	251:8	251:8	8	if
LEAF_NODE	251:8	251:8	9	if
LEAF_NODE	251:10	251:10	8	(
CONDITION	251:12	251:12	8	sp == NULL
EXPR	251:12	251:18	9	sp == NULL
FIELD	251:12	251:12	10	sp
LEAF_NODE	251:12	251:12	11	sp
EQ_OPERATOR	251:15	251:15	10	==
LEAF_NODE	251:15	251:15	11	==
FIELD	251:18	251:18	10	NULL
LEAF_NODE	251:18	251:18	11	NULL
LEAF_NODE	251:23	251:23	8	)
STATEMENTS	252:8	257:8	8	
LEAF_NODE	252:8	252:8	9	{
STATEMENTS	253:12	256:12	9	
EXPR_STATEMENT	253:12	254:84	10	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Cannot get \"Predictor\" tag as plugin is not configured" ) ;
EXPR	253:12	253:12	11	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Cannot get \"Predictor\" tag as plugin is not configured" )
FUNCTION_CALL	253:12	254:83	12	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Cannot get \"Predictor\" tag as plugin is not configured" )
CALLEE	253:12	253:12	13	TIFFErrorExt
LEAF_NODE	253:12	253:12	14	TIFFErrorExt
LEAF_NODE	253:24	253:24	13	(
ARGUMENT	253:25	253:25	13	tif -> tif_clientdata
FIELD	253:25	253:30	14	tif -> tif_clientdata
LEAF_NODE	253:25	253:25	15	tif
LEAF_NODE	253:28	253:28	15	->
LEAF_NODE	253:30	253:30	15	tif_clientdata
LEAF_NODE	253:44	253:44	13	,
ARGUMENT	253:46	253:46	13	tif -> tif_name
FIELD	253:46	253:51	14	tif -> tif_name
LEAF_NODE	253:46	253:46	15	tif
LEAF_NODE	253:49	253:49	15	->
LEAF_NODE	253:51	253:51	15	tif_name
LEAF_NODE	253:59	253:59	13	,
ARGUMENT	254:25	254:25	13	"Cannot get \"Predictor\" tag as plugin is not configured"
FIELD	254:25	254:25	14	"Cannot get \"Predictor\" tag as plugin is not configured"
LEAF_NODE	254:25	254:25	15	"Cannot get \"Predictor\" tag as plugin is not configured"
LEAF_NODE	254:83	254:83	13	)
LEAF_NODE	254:84	254:84	11	;
LEAF_NODE	255:12	255:12	10	*
LEAF_NODE	255:13	255:13	10	va_arg
LEAF_NODE	255:19	255:19	10	(
LEAF_NODE	255:20	255:20	10	ap
LEAF_NODE	255:22	255:22	10	,
LEAF_NODE	255:24	255:24	10	uint16
LEAF_NODE	255:30	255:30	10	*
LEAF_NODE	255:31	255:31	10	)
LEAF_NODE	255:33	255:33	10	=
EXPR_STATEMENT	255:35	255:36	10	0 ;
EXPR	255:35	255:35	11	0
FIELD	255:35	255:35	12	0
LEAF_NODE	255:35	255:35	13	0
LEAF_NODE	255:36	255:36	11	;
JUMP_STATEMENT	256:12	256:20	10	return 0 ;
KEYWORD	256:12	256:12	11	return
LEAF_NODE	256:12	256:12	12	return
DESTINATION	256:19	256:19	11	0
EXPR	256:19	256:19	12	0
FIELD	256:19	256:19	13	0
LEAF_NODE	256:19	256:19	14	0
LEAF_NODE	256:20	256:20	11	;
LEAF_NODE	257:8	257:8	9	}
LEAF_NODE	258:8	258:8	7	*
LEAF_NODE	258:9	258:9	7	va_arg
LEAF_NODE	258:15	258:15	7	(
LEAF_NODE	258:16	258:16	7	ap
LEAF_NODE	258:18	258:18	7	,
LEAF_NODE	258:20	258:20	7	uint16
LEAF_NODE	258:26	258:26	7	*
LEAF_NODE	258:27	258:27	7	)
LEAF_NODE	258:29	258:29	7	=
EXPR_STATEMENT	258:31	258:53	7	( uint16 ) sp -> predictor ;
EXPR	258:31	258:40	8	( uint16 ) sp -> predictor
LEAF_NODE	258:31	258:31	9	(
TYPE_NAME	258:32	258:32	9	uint16
LEAF_NODE	258:32	258:32	10	uint16
LEAF_NODE	258:38	258:38	9	)
FIELD	258:40	258:44	9	sp -> predictor
LEAF_NODE	258:40	258:40	10	sp
LEAF_NODE	258:42	258:42	10	->
LEAF_NODE	258:44	258:44	10	predictor
LEAF_NODE	258:53	258:53	8	;
JUMP_STATEMENT	259:8	259:16	7	return 1 ;
KEYWORD	259:8	259:8	8	return
LEAF_NODE	259:8	259:8	9	return
DESTINATION	259:15	259:15	8	1
EXPR	259:15	259:15	9	1
FIELD	259:15	259:15	10	1
LEAF_NODE	259:15	259:15	11	1
LEAF_NODE	259:16	259:16	8	;
LEAF_NODE	260:4	260:4	6	}
LABEL	261:1	261:22	6	case TIFFTAG_DOTRANGE :
LEAF_NODE	261:1	261:1	7	case
LEAF_NODE	261:6	261:6	7	TIFFTAG_DOTRANGE
LEAF_NODE	261:22	261:22	7	:
LEAF_NODE	262:2	262:2	6	*
LEAF_NODE	262:3	262:3	6	va_arg
LEAF_NODE	262:9	262:9	6	(
LEAF_NODE	262:10	262:10	6	ap
LEAF_NODE	262:12	262:12	6	,
LEAF_NODE	262:14	262:14	6	uint16
LEAF_NODE	262:21	262:21	6	*
LEAF_NODE	262:22	262:22	6	)
LEAF_NODE	262:24	262:24	6	=
EXPR_STATEMENT	262:26	262:27	6	0 ;
EXPR	262:26	262:26	7	0
FIELD	262:26	262:26	8	0
LEAF_NODE	262:26	262:26	9	0
LEAF_NODE	262:27	262:27	7	;
LEAF_NODE	263:2	263:2	6	*
LEAF_NODE	263:3	263:3	6	va_arg
LEAF_NODE	263:9	263:9	6	(
LEAF_NODE	263:10	263:10	6	ap
LEAF_NODE	263:12	263:12	6	,
LEAF_NODE	263:14	263:14	6	uint16
LEAF_NODE	263:21	263:21	6	*
LEAF_NODE	263:22	263:22	6	)
LEAF_NODE	263:24	263:24	6	=
EXPR_STATEMENT	263:26	263:53	6	( 1 << td -> td_bitspersample ) - 1 ;
EXPR	263:26	263:52	7	( 1 << td -> td_bitspersample ) - 1
LEAF_NODE	263:26	263:26	8	(
FIELD	263:27	263:27	8	1
LEAF_NODE	263:27	263:27	9	1
LEAF_NODE	263:28	263:28	8	<<
FIELD	263:30	263:34	8	td -> td_bitspersample
LEAF_NODE	263:30	263:30	9	td
LEAF_NODE	263:32	263:32	9	->
LEAF_NODE	263:34	263:34	9	td_bitspersample
LEAF_NODE	263:50	263:50	8	)
LEAF_NODE	263:51	263:51	8	-
FIELD	263:52	263:52	8	1
LEAF_NODE	263:52	263:52	9	1
LEAF_NODE	263:53	263:53	7	;
JUMP_STATEMENT	264:2	264:12	6	return ( 1 ) ;
KEYWORD	264:2	264:2	7	return
LEAF_NODE	264:2	264:2	8	return
DESTINATION	264:9	264:9	7	( 1 )
EXPR	264:9	264:11	8	( 1 )
LEAF_NODE	264:9	264:9	9	(
FIELD	264:10	264:10	9	1
LEAF_NODE	264:10	264:10	10	1
LEAF_NODE	264:11	264:11	9	)
LEAF_NODE	264:12	264:12	7	;
LABEL	265:1	265:20	6	case TIFFTAG_INKSET :
LEAF_NODE	265:1	265:1	7	case
LEAF_NODE	265:6	265:6	7	TIFFTAG_INKSET
LEAF_NODE	265:20	265:20	7	:
LEAF_NODE	266:2	266:2	6	*
LEAF_NODE	266:3	266:3	6	va_arg
LEAF_NODE	266:9	266:9	6	(
LEAF_NODE	266:10	266:10	6	ap
LEAF_NODE	266:12	266:12	6	,
LEAF_NODE	266:14	266:14	6	uint16
LEAF_NODE	266:21	266:21	6	*
LEAF_NODE	266:22	266:22	6	)
LEAF_NODE	266:24	266:24	6	=
EXPR_STATEMENT	266:26	266:37	6	INKSET_CMYK ;
EXPR	266:26	266:26	7	INKSET_CMYK
FIELD	266:26	266:26	8	INKSET_CMYK
LEAF_NODE	266:26	266:26	9	INKSET_CMYK
LEAF_NODE	266:37	266:37	7	;
JUMP_STATEMENT	267:2	267:10	6	return 1 ;
KEYWORD	267:2	267:2	7	return
LEAF_NODE	267:2	267:2	8	return
DESTINATION	267:9	267:9	7	1
EXPR	267:9	267:9	8	1
FIELD	267:9	267:9	9	1
LEAF_NODE	267:9	267:9	10	1
LEAF_NODE	267:10	267:10	7	;
LABEL	268:1	268:26	6	case TIFFTAG_NUMBEROFINKS :
LEAF_NODE	268:1	268:1	7	case
LEAF_NODE	268:6	268:6	7	TIFFTAG_NUMBEROFINKS
LEAF_NODE	268:26	268:26	7	:
LEAF_NODE	269:2	269:2	6	*
LEAF_NODE	269:3	269:3	6	va_arg
LEAF_NODE	269:9	269:9	6	(
LEAF_NODE	269:10	269:10	6	ap
LEAF_NODE	269:12	269:12	6	,
LEAF_NODE	269:14	269:14	6	uint16
LEAF_NODE	269:21	269:21	6	*
LEAF_NODE	269:22	269:22	6	)
LEAF_NODE	269:24	269:24	6	=
EXPR_STATEMENT	269:26	269:27	6	4 ;
EXPR	269:26	269:26	7	4
FIELD	269:26	269:26	8	4
LEAF_NODE	269:26	269:26	9	4
LEAF_NODE	269:27	269:27	7	;
JUMP_STATEMENT	270:2	270:12	6	return ( 1 ) ;
KEYWORD	270:2	270:2	7	return
LEAF_NODE	270:2	270:2	8	return
DESTINATION	270:9	270:9	7	( 1 )
EXPR	270:9	270:11	8	( 1 )
LEAF_NODE	270:9	270:9	9	(
FIELD	270:10	270:10	9	1
LEAF_NODE	270:10	270:10	10	1
LEAF_NODE	270:11	270:11	9	)
LEAF_NODE	270:12	270:12	7	;
LABEL	271:1	271:26	6	case TIFFTAG_EXTRASAMPLES :
LEAF_NODE	271:1	271:1	7	case
LEAF_NODE	271:6	271:6	7	TIFFTAG_EXTRASAMPLES
LEAF_NODE	271:26	271:26	7	:
LEAF_NODE	272:2	272:2	6	*
LEAF_NODE	272:3	272:3	6	va_arg
LEAF_NODE	272:9	272:9	6	(
LEAF_NODE	272:10	272:10	6	ap
LEAF_NODE	272:12	272:12	6	,
LEAF_NODE	272:14	272:14	6	uint16
LEAF_NODE	272:21	272:21	6	*
LEAF_NODE	272:22	272:22	6	)
LEAF_NODE	272:24	272:24	6	=
EXPR_STATEMENT	272:26	272:45	6	td -> td_extrasamples ;
EXPR	272:26	272:26	7	td -> td_extrasamples
FIELD	272:26	272:30	8	td -> td_extrasamples
LEAF_NODE	272:26	272:26	9	td
LEAF_NODE	272:28	272:28	9	->
LEAF_NODE	272:30	272:30	9	td_extrasamples
LEAF_NODE	272:45	272:45	7	;
LEAF_NODE	273:2	273:2	6	*
LEAF_NODE	273:3	273:3	6	va_arg
LEAF_NODE	273:9	273:9	6	(
LEAF_NODE	273:10	273:10	6	ap
LEAF_NODE	273:12	273:12	6	,
LEAF_NODE	273:14	273:14	6	uint16
LEAF_NODE	273:21	273:21	6	*
LEAF_NODE	273:22	273:22	6	*
LEAF_NODE	273:23	273:23	6	)
LEAF_NODE	273:25	273:25	6	=
EXPR_STATEMENT	273:27	273:44	6	td -> td_sampleinfo ;
EXPR	273:27	273:27	7	td -> td_sampleinfo
FIELD	273:27	273:31	8	td -> td_sampleinfo
LEAF_NODE	273:27	273:27	9	td
LEAF_NODE	273:29	273:29	9	->
LEAF_NODE	273:31	273:31	9	td_sampleinfo
LEAF_NODE	273:44	273:44	7	;
JUMP_STATEMENT	274:2	274:12	6	return ( 1 ) ;
KEYWORD	274:2	274:2	7	return
LEAF_NODE	274:2	274:2	8	return
DESTINATION	274:9	274:9	7	( 1 )
EXPR	274:9	274:11	8	( 1 )
LEAF_NODE	274:9	274:9	9	(
FIELD	274:10	274:10	9	1
LEAF_NODE	274:10	274:10	10	1
LEAF_NODE	274:11	274:11	9	)
LEAF_NODE	274:12	274:12	7	;
LABEL	275:1	275:22	6	case TIFFTAG_MATTEING :
LEAF_NODE	275:1	275:1	7	case
LEAF_NODE	275:6	275:6	7	TIFFTAG_MATTEING
LEAF_NODE	275:22	275:22	7	:
LEAF_NODE	276:2	276:2	6	*
LEAF_NODE	276:3	276:3	6	va_arg
LEAF_NODE	276:9	276:9	6	(
LEAF_NODE	276:10	276:10	6	ap
LEAF_NODE	276:12	276:12	6	,
LEAF_NODE	276:14	276:14	6	uint16
LEAF_NODE	276:21	276:21	6	*
LEAF_NODE	276:22	276:22	6	)
LEAF_NODE	276:24	276:24	6	=
EXPR_STATEMENT	277:6	278:54	6	( td -> td_extrasamples == 1 && td -> td_sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA ) ;
EXPR	277:6	278:53	7	( td -> td_extrasamples == 1 && td -> td_sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA )
LEAF_NODE	277:6	277:6	8	(
AND	277:7	278:7	8	td -> td_extrasamples == 1 && td -> td_sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA
EXPR	277:7	277:30	9	td -> td_extrasamples == 1
FIELD	277:7	277:11	10	td -> td_extrasamples
LEAF_NODE	277:7	277:7	11	td
LEAF_NODE	277:9	277:9	11	->
LEAF_NODE	277:11	277:11	11	td_extrasamples
EQ_OPERATOR	277:27	277:27	10	==
LEAF_NODE	277:27	277:27	11	==
FIELD	277:30	277:30	10	1
LEAF_NODE	277:30	277:30	11	1
LEAF_NODE	277:32	277:32	9	&&
EXPR	278:7	278:31	9	td -> td_sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA
FIELD	278:7	278:26	10	td -> td_sampleinfo [ 0 ]
LEAF_NODE	278:7	278:7	11	td
LEAF_NODE	278:9	278:9	11	->
LEAF_NODE	278:11	278:11	11	td_sampleinfo
LEAF_NODE	278:24	278:24	11	[
EXPR	278:25	278:25	11	0
FIELD	278:25	278:25	12	0
LEAF_NODE	278:25	278:25	13	0
LEAF_NODE	278:26	278:26	11	]
EQ_OPERATOR	278:28	278:28	10	==
LEAF_NODE	278:28	278:28	11	==
FIELD	278:31	278:31	10	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	278:31	278:31	11	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	278:53	278:53	8	)
LEAF_NODE	278:54	278:54	7	;
JUMP_STATEMENT	279:2	279:12	6	return ( 1 ) ;
KEYWORD	279:2	279:2	7	return
LEAF_NODE	279:2	279:2	8	return
DESTINATION	279:9	279:9	7	( 1 )
EXPR	279:9	279:11	8	( 1 )
LEAF_NODE	279:9	279:9	9	(
FIELD	279:10	279:10	9	1
LEAF_NODE	279:10	279:10	10	1
LEAF_NODE	279:11	279:11	9	)
LEAF_NODE	279:12	279:12	7	;
LABEL	280:1	280:23	6	case TIFFTAG_TILEDEPTH :
LEAF_NODE	280:1	280:1	7	case
LEAF_NODE	280:6	280:6	7	TIFFTAG_TILEDEPTH
LEAF_NODE	280:23	280:23	7	:
LEAF_NODE	281:2	281:2	6	*
LEAF_NODE	281:3	281:3	6	va_arg
LEAF_NODE	281:9	281:9	6	(
LEAF_NODE	281:10	281:10	6	ap
LEAF_NODE	281:12	281:12	6	,
LEAF_NODE	281:14	281:14	6	uint32
LEAF_NODE	281:21	281:21	6	*
LEAF_NODE	281:22	281:22	6	)
LEAF_NODE	281:24	281:24	6	=
EXPR_STATEMENT	281:26	281:42	6	td -> td_tiledepth ;
EXPR	281:26	281:26	7	td -> td_tiledepth
FIELD	281:26	281:30	8	td -> td_tiledepth
LEAF_NODE	281:26	281:26	9	td
LEAF_NODE	281:28	281:28	9	->
LEAF_NODE	281:30	281:30	9	td_tiledepth
LEAF_NODE	281:42	281:42	7	;
JUMP_STATEMENT	282:2	282:12	6	return ( 1 ) ;
KEYWORD	282:2	282:2	7	return
LEAF_NODE	282:2	282:2	8	return
DESTINATION	282:9	282:9	7	( 1 )
EXPR	282:9	282:11	8	( 1 )
LEAF_NODE	282:9	282:9	9	(
FIELD	282:10	282:10	9	1
LEAF_NODE	282:10	282:10	10	1
LEAF_NODE	282:11	282:11	9	)
LEAF_NODE	282:12	282:12	7	;
LABEL	283:1	283:22	6	case TIFFTAG_DATATYPE :
LEAF_NODE	283:1	283:1	7	case
LEAF_NODE	283:6	283:6	7	TIFFTAG_DATATYPE
LEAF_NODE	283:22	283:22	7	:
LEAF_NODE	284:2	284:2	6	*
LEAF_NODE	284:3	284:3	6	va_arg
LEAF_NODE	284:9	284:9	6	(
LEAF_NODE	284:10	284:10	6	ap
LEAF_NODE	284:12	284:12	6	,
LEAF_NODE	284:14	284:14	6	uint16
LEAF_NODE	284:21	284:21	6	*
LEAF_NODE	284:22	284:22	6	)
LEAF_NODE	284:24	284:24	6	=
EXPR_STATEMENT	284:26	284:47	6	td -> td_sampleformat - 1 ;
EXPR	284:26	284:46	7	td -> td_sampleformat - 1
FIELD	284:26	284:30	8	td -> td_sampleformat
LEAF_NODE	284:26	284:26	9	td
LEAF_NODE	284:28	284:28	9	->
LEAF_NODE	284:30	284:30	9	td_sampleformat
LEAF_NODE	284:45	284:45	8	-
FIELD	284:46	284:46	8	1
LEAF_NODE	284:46	284:46	9	1
LEAF_NODE	284:47	284:47	7	;
JUMP_STATEMENT	285:2	285:12	6	return ( 1 ) ;
KEYWORD	285:2	285:2	7	return
LEAF_NODE	285:2	285:2	8	return
DESTINATION	285:9	285:9	7	( 1 )
EXPR	285:9	285:11	8	( 1 )
LEAF_NODE	285:9	285:9	9	(
FIELD	285:10	285:10	9	1
LEAF_NODE	285:10	285:10	10	1
LEAF_NODE	285:11	285:11	9	)
LEAF_NODE	285:12	285:12	7	;
LABEL	286:1	286:26	6	case TIFFTAG_SAMPLEFORMAT :
LEAF_NODE	286:1	286:1	7	case
LEAF_NODE	286:6	286:6	7	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	286:26	286:26	7	:
LEAF_NODE	287:2	287:2	6	*
LEAF_NODE	287:3	287:3	6	va_arg
LEAF_NODE	287:9	287:9	6	(
LEAF_NODE	287:10	287:10	6	ap
LEAF_NODE	287:12	287:12	6	,
LEAF_NODE	287:14	287:14	6	uint16
LEAF_NODE	287:21	287:21	6	*
LEAF_NODE	287:22	287:22	6	)
LEAF_NODE	287:24	287:24	6	=
EXPR_STATEMENT	287:26	287:45	6	td -> td_sampleformat ;
EXPR	287:26	287:26	7	td -> td_sampleformat
FIELD	287:26	287:30	8	td -> td_sampleformat
LEAF_NODE	287:26	287:26	9	td
LEAF_NODE	287:28	287:28	9	->
LEAF_NODE	287:30	287:30	9	td_sampleformat
LEAF_NODE	287:45	287:45	7	;
JUMP_STATEMENT	288:16	288:25	6	return ( 1 ) ;
KEYWORD	288:16	288:16	7	return
LEAF_NODE	288:16	288:16	8	return
DESTINATION	288:22	288:22	7	( 1 )
EXPR	288:22	288:24	8	( 1 )
LEAF_NODE	288:22	288:22	9	(
FIELD	288:23	288:23	9	1
LEAF_NODE	288:23	288:23	10	1
LEAF_NODE	288:24	288:24	9	)
LEAF_NODE	288:25	288:25	7	;
LABEL	289:1	289:24	6	case TIFFTAG_IMAGEDEPTH :
LEAF_NODE	289:1	289:1	7	case
LEAF_NODE	289:6	289:6	7	TIFFTAG_IMAGEDEPTH
LEAF_NODE	289:24	289:24	7	:
LEAF_NODE	290:2	290:2	6	*
LEAF_NODE	290:3	290:3	6	va_arg
LEAF_NODE	290:9	290:9	6	(
LEAF_NODE	290:10	290:10	6	ap
LEAF_NODE	290:12	290:12	6	,
LEAF_NODE	290:14	290:14	6	uint32
LEAF_NODE	290:21	290:21	6	*
LEAF_NODE	290:22	290:22	6	)
LEAF_NODE	290:24	290:24	6	=
EXPR_STATEMENT	290:26	290:43	6	td -> td_imagedepth ;
EXPR	290:26	290:26	7	td -> td_imagedepth
FIELD	290:26	290:30	8	td -> td_imagedepth
LEAF_NODE	290:26	290:26	9	td
LEAF_NODE	290:28	290:28	9	->
LEAF_NODE	290:30	290:30	9	td_imagedepth
LEAF_NODE	290:43	290:43	7	;
JUMP_STATEMENT	291:2	291:12	6	return ( 1 ) ;
KEYWORD	291:2	291:2	7	return
LEAF_NODE	291:2	291:2	8	return
DESTINATION	291:9	291:9	7	( 1 )
EXPR	291:9	291:11	8	( 1 )
LEAF_NODE	291:9	291:9	9	(
FIELD	291:10	291:10	9	1
LEAF_NODE	291:10	291:10	10	1
LEAF_NODE	291:11	291:11	9	)
LEAF_NODE	291:12	291:12	7	;
LABEL	292:1	292:31	6	case TIFFTAG_YCBCRCOEFFICIENTS :
LEAF_NODE	292:1	292:1	7	case
LEAF_NODE	292:6	292:6	7	TIFFTAG_YCBCRCOEFFICIENTS
LEAF_NODE	292:31	292:31	7	:
LEAF_NODE	293:2	293:2	6	{
STATEMENTS	295:3	297:3	6	
LEAF_NODE	295:3	295:3	7	static
LEAF_NODE	295:10	295:10	7	float
LEAF_NODE	295:16	295:16	7	ycbcrcoeffs
LEAF_NODE	295:27	295:27	7	[
LEAF_NODE	295:28	295:28	7	]
LEAF_NODE	295:30	295:30	7	=
LEAF_NODE	295:32	295:32	7	{
STATEMENTS	295:34	295:50	7	
LEAF_NODE	295:34	295:34	8	0.299f
LEAF_NODE	295:40	295:40	8	,
LEAF_NODE	295:42	295:42	8	0.587f
LEAF_NODE	295:48	295:48	8	,
LEAF_NODE	295:50	295:50	8	0.114f
LEAF_NODE	295:57	295:57	7	}
LEAF_NODE	295:58	295:58	7	;
LEAF_NODE	296:3	296:3	7	*
LEAF_NODE	296:4	296:4	7	va_arg
LEAF_NODE	296:10	296:10	7	(
LEAF_NODE	296:11	296:11	7	ap
LEAF_NODE	296:13	296:13	7	,
LEAF_NODE	296:15	296:15	7	float
LEAF_NODE	296:21	296:21	7	*
LEAF_NODE	296:22	296:22	7	*
LEAF_NODE	296:23	296:23	7	)
LEAF_NODE	296:25	296:25	7	=
EXPR_STATEMENT	296:27	296:38	7	ycbcrcoeffs ;
EXPR	296:27	296:27	8	ycbcrcoeffs
FIELD	296:27	296:27	9	ycbcrcoeffs
LEAF_NODE	296:27	296:27	10	ycbcrcoeffs
LEAF_NODE	296:38	296:38	8	;
JUMP_STATEMENT	297:3	297:11	7	return 1 ;
KEYWORD	297:3	297:3	8	return
LEAF_NODE	297:3	297:3	9	return
DESTINATION	297:10	297:10	8	1
EXPR	297:10	297:10	9	1
FIELD	297:10	297:10	10	1
LEAF_NODE	297:10	297:10	11	1
LEAF_NODE	297:11	297:11	8	;
LEAF_NODE	298:2	298:2	6	}
LABEL	299:1	299:30	6	case TIFFTAG_YCBCRSUBSAMPLING :
LEAF_NODE	299:1	299:1	7	case
LEAF_NODE	299:6	299:6	7	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	299:30	299:30	7	:
LEAF_NODE	300:2	300:2	6	*
LEAF_NODE	300:3	300:3	6	va_arg
LEAF_NODE	300:9	300:9	6	(
LEAF_NODE	300:10	300:10	6	ap
LEAF_NODE	300:12	300:12	6	,
LEAF_NODE	300:14	300:14	6	uint16
LEAF_NODE	300:21	300:21	6	*
LEAF_NODE	300:22	300:22	6	)
LEAF_NODE	300:24	300:24	6	=
EXPR_STATEMENT	300:26	300:52	6	td -> td_ycbcrsubsampling [ 0 ] ;
EXPR	300:26	300:26	7	td -> td_ycbcrsubsampling [ 0 ]
FIELD	300:26	300:51	8	td -> td_ycbcrsubsampling [ 0 ]
LEAF_NODE	300:26	300:26	9	td
LEAF_NODE	300:28	300:28	9	->
LEAF_NODE	300:30	300:30	9	td_ycbcrsubsampling
LEAF_NODE	300:49	300:49	9	[
EXPR	300:50	300:50	9	0
FIELD	300:50	300:50	10	0
LEAF_NODE	300:50	300:50	11	0
LEAF_NODE	300:51	300:51	9	]
LEAF_NODE	300:52	300:52	7	;
LEAF_NODE	301:2	301:2	6	*
LEAF_NODE	301:3	301:3	6	va_arg
LEAF_NODE	301:9	301:9	6	(
LEAF_NODE	301:10	301:10	6	ap
LEAF_NODE	301:12	301:12	6	,
LEAF_NODE	301:14	301:14	6	uint16
LEAF_NODE	301:21	301:21	6	*
LEAF_NODE	301:22	301:22	6	)
LEAF_NODE	301:24	301:24	6	=
EXPR_STATEMENT	301:26	301:52	6	td -> td_ycbcrsubsampling [ 1 ] ;
EXPR	301:26	301:26	7	td -> td_ycbcrsubsampling [ 1 ]
FIELD	301:26	301:51	8	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	301:26	301:26	9	td
LEAF_NODE	301:28	301:28	9	->
LEAF_NODE	301:30	301:30	9	td_ycbcrsubsampling
LEAF_NODE	301:49	301:49	9	[
EXPR	301:50	301:50	9	1
FIELD	301:50	301:50	10	1
LEAF_NODE	301:50	301:50	11	1
LEAF_NODE	301:51	301:51	9	]
LEAF_NODE	301:52	301:52	7	;
JUMP_STATEMENT	302:2	302:12	6	return ( 1 ) ;
KEYWORD	302:2	302:2	7	return
LEAF_NODE	302:2	302:2	8	return
DESTINATION	302:9	302:9	7	( 1 )
EXPR	302:9	302:11	8	( 1 )
LEAF_NODE	302:9	302:9	9	(
FIELD	302:10	302:10	9	1
LEAF_NODE	302:10	302:10	10	1
LEAF_NODE	302:11	302:11	9	)
LEAF_NODE	302:12	302:12	7	;
LABEL	303:1	303:30	6	case TIFFTAG_YCBCRPOSITIONING :
LEAF_NODE	303:1	303:1	7	case
LEAF_NODE	303:6	303:6	7	TIFFTAG_YCBCRPOSITIONING
LEAF_NODE	303:30	303:30	7	:
LEAF_NODE	304:2	304:2	6	*
LEAF_NODE	304:3	304:3	6	va_arg
LEAF_NODE	304:9	304:9	6	(
LEAF_NODE	304:10	304:10	6	ap
LEAF_NODE	304:12	304:12	6	,
LEAF_NODE	304:14	304:14	6	uint16
LEAF_NODE	304:21	304:21	6	*
LEAF_NODE	304:22	304:22	6	)
LEAF_NODE	304:24	304:24	6	=
EXPR_STATEMENT	304:26	304:49	6	td -> td_ycbcrpositioning ;
EXPR	304:26	304:26	7	td -> td_ycbcrpositioning
FIELD	304:26	304:30	8	td -> td_ycbcrpositioning
LEAF_NODE	304:26	304:26	9	td
LEAF_NODE	304:28	304:28	9	->
LEAF_NODE	304:30	304:30	9	td_ycbcrpositioning
LEAF_NODE	304:49	304:49	7	;
JUMP_STATEMENT	305:2	305:12	6	return ( 1 ) ;
KEYWORD	305:2	305:2	7	return
LEAF_NODE	305:2	305:2	8	return
DESTINATION	305:9	305:9	7	( 1 )
EXPR	305:9	305:11	8	( 1 )
LEAF_NODE	305:9	305:9	9	(
FIELD	305:10	305:10	9	1
LEAF_NODE	305:10	305:10	10	1
LEAF_NODE	305:11	305:11	9	)
LEAF_NODE	305:12	305:12	7	;
LABEL	306:1	306:24	6	case TIFFTAG_WHITEPOINT :
LEAF_NODE	306:1	306:1	7	case
LEAF_NODE	306:6	306:6	7	TIFFTAG_WHITEPOINT
LEAF_NODE	306:24	306:24	7	:
LEAF_NODE	307:2	307:2	6	{
STATEMENTS	308:3	316:3	6	
LEAF_NODE	308:3	308:3	7	static
SIMPLE_DECL	308:10	308:29	7	float [ 2 ] whitepoint ;
VAR_DECL	308:10	308:16	8	float [ 2 ] whitepoint
TYPE	308:10	308:26	9	float [ 2 ]
TYPE_NAME	308:10	308:10	10	float
LEAF_NODE	308:10	308:10	11	float
TYPE_SUFFIX	308:26	308:28	10	[ 2 ]
LEAF_NODE	308:26	308:26	11	[
FIELD	308:27	308:27	11	2
LEAF_NODE	308:27	308:27	12	2
LEAF_NODE	308:28	308:28	11	]
NAME	308:16	308:16	9	whitepoint
LEAF_NODE	308:16	308:16	10	whitepoint
LEAF_NODE	308:29	308:29	8	;
EXPR_STATEMENT	313:3	313:54	7	whitepoint [ 0 ] = D50_X0 / ( D50_X0 + D50_Y0 + D50_Z0 ) ;
EXPR	313:3	313:3	8	whitepoint [ 0 ] = D50_X0 / ( D50_X0 + D50_Y0 + D50_Z0 )
ASSIGN	313:3	313:19	9	whitepoint [ 0 ] = D50_X0 / ( D50_X0 + D50_Y0 + D50_Z0 )
LVAL	313:3	313:3	10	whitepoint [ 0 ]
FIELD	313:3	313:15	11	whitepoint [ 0 ]
LEAF_NODE	313:3	313:3	12	whitepoint
LEAF_NODE	313:13	313:13	12	[
EXPR	313:14	313:14	12	0
FIELD	313:14	313:14	13	0
LEAF_NODE	313:14	313:14	14	0
LEAF_NODE	313:15	313:15	12	]
ASSIGN_OP	313:17	313:17	10	=
LEAF_NODE	313:17	313:17	11	=
RVAL	313:19	313:53	10	D50_X0 / ( D50_X0 + D50_Y0 + D50_Z0 )
FIELD	313:19	313:19	11	D50_X0
LEAF_NODE	313:19	313:19	12	D50_X0
LEAF_NODE	313:26	313:26	11	/
LEAF_NODE	313:28	313:28	11	(
FIELD	313:29	313:29	11	D50_X0
LEAF_NODE	313:29	313:29	12	D50_X0
LEAF_NODE	313:36	313:36	11	+
FIELD	313:38	313:38	11	D50_Y0
LEAF_NODE	313:38	313:38	12	D50_Y0
LEAF_NODE	313:45	313:45	11	+
FIELD	313:47	313:47	11	D50_Z0
LEAF_NODE	313:47	313:47	12	D50_Z0
LEAF_NODE	313:53	313:53	11	)
LEAF_NODE	313:54	313:54	8	;
EXPR_STATEMENT	314:3	314:54	7	whitepoint [ 1 ] = D50_Y0 / ( D50_X0 + D50_Y0 + D50_Z0 ) ;
EXPR	314:3	314:3	8	whitepoint [ 1 ] = D50_Y0 / ( D50_X0 + D50_Y0 + D50_Z0 )
ASSIGN	314:3	314:19	9	whitepoint [ 1 ] = D50_Y0 / ( D50_X0 + D50_Y0 + D50_Z0 )
LVAL	314:3	314:3	10	whitepoint [ 1 ]
FIELD	314:3	314:15	11	whitepoint [ 1 ]
LEAF_NODE	314:3	314:3	12	whitepoint
LEAF_NODE	314:13	314:13	12	[
EXPR	314:14	314:14	12	1
FIELD	314:14	314:14	13	1
LEAF_NODE	314:14	314:14	14	1
LEAF_NODE	314:15	314:15	12	]
ASSIGN_OP	314:17	314:17	10	=
LEAF_NODE	314:17	314:17	11	=
RVAL	314:19	314:53	10	D50_Y0 / ( D50_X0 + D50_Y0 + D50_Z0 )
FIELD	314:19	314:19	11	D50_Y0
LEAF_NODE	314:19	314:19	12	D50_Y0
LEAF_NODE	314:26	314:26	11	/
LEAF_NODE	314:28	314:28	11	(
FIELD	314:29	314:29	11	D50_X0
LEAF_NODE	314:29	314:29	12	D50_X0
LEAF_NODE	314:36	314:36	11	+
FIELD	314:38	314:38	11	D50_Y0
LEAF_NODE	314:38	314:38	12	D50_Y0
LEAF_NODE	314:45	314:45	11	+
FIELD	314:47	314:47	11	D50_Z0
LEAF_NODE	314:47	314:47	12	D50_Z0
LEAF_NODE	314:53	314:53	11	)
LEAF_NODE	314:54	314:54	8	;
LEAF_NODE	315:3	315:3	7	*
LEAF_NODE	315:4	315:4	7	va_arg
LEAF_NODE	315:10	315:10	7	(
LEAF_NODE	315:11	315:11	7	ap
LEAF_NODE	315:13	315:13	7	,
LEAF_NODE	315:15	315:15	7	float
LEAF_NODE	315:21	315:21	7	*
LEAF_NODE	315:22	315:22	7	*
LEAF_NODE	315:23	315:23	7	)
LEAF_NODE	315:25	315:25	7	=
EXPR_STATEMENT	315:27	315:37	7	whitepoint ;
EXPR	315:27	315:27	8	whitepoint
FIELD	315:27	315:27	9	whitepoint
LEAF_NODE	315:27	315:27	10	whitepoint
LEAF_NODE	315:37	315:37	8	;
JUMP_STATEMENT	316:3	316:11	7	return 1 ;
KEYWORD	316:3	316:3	8	return
LEAF_NODE	316:3	316:3	9	return
DESTINATION	316:10	316:10	8	1
EXPR	316:10	316:10	9	1
FIELD	316:10	316:10	10	1
LEAF_NODE	316:10	316:10	11	1
LEAF_NODE	316:11	316:11	8	;
LEAF_NODE	317:2	317:2	6	}
LABEL	318:1	318:30	6	case TIFFTAG_TRANSFERFUNCTION :
LEAF_NODE	318:1	318:1	7	case
LEAF_NODE	318:6	318:6	7	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	318:30	318:30	7	:
SELECTION	319:2	320:40	6	
KEYWORD	319:2	319:2	7	if
LEAF_NODE	319:2	319:2	8	if
LEAF_NODE	319:5	319:5	7	(
CONDITION	319:6	319:6	7	! td -> td_transferfunction [ 0 ] && ! TIFFDefaultTransferFunction ( td )
EXPR	319:6	319:6	8	! td -> td_transferfunction [ 0 ] && ! TIFFDefaultTransferFunction ( td )
AND	319:6	320:6	9	! td -> td_transferfunction [ 0 ] && ! TIFFDefaultTransferFunction ( td )
EXPR	319:6	319:6	10	! td -> td_transferfunction [ 0 ]
UNARY_EXPR	319:6	319:7	11	! td -> td_transferfunction [ 0 ]
UNARY_OPERATOR	319:6	319:6	12	!
LEAF_NODE	319:6	319:6	13	!
FIELD	319:7	319:32	12	td -> td_transferfunction [ 0 ]
LEAF_NODE	319:7	319:7	13	td
LEAF_NODE	319:9	319:9	13	->
LEAF_NODE	319:11	319:11	13	td_transferfunction
LEAF_NODE	319:30	319:30	13	[
EXPR	319:31	319:31	13	0
FIELD	319:31	319:31	14	0
LEAF_NODE	319:31	319:31	15	0
LEAF_NODE	319:32	319:32	13	]
LEAF_NODE	319:34	319:34	10	&&
EXPR	320:6	320:6	10	! TIFFDefaultTransferFunction ( td )
UNARY_EXPR	320:6	320:7	11	! TIFFDefaultTransferFunction ( td )
UNARY_OPERATOR	320:6	320:6	12	!
LEAF_NODE	320:6	320:6	13	!
FUNCTION_CALL	320:7	320:37	12	TIFFDefaultTransferFunction ( td )
CALLEE	320:7	320:7	13	TIFFDefaultTransferFunction
LEAF_NODE	320:7	320:7	14	TIFFDefaultTransferFunction
LEAF_NODE	320:34	320:34	13	(
ARGUMENT	320:35	320:35	13	td
FIELD	320:35	320:35	14	td
LEAF_NODE	320:35	320:35	15	td
LEAF_NODE	320:37	320:37	13	)
LEAF_NODE	320:38	320:38	7	)
STATEMENTS	320:40	323:2	7	
LEAF_NODE	320:40	320:40	8	{
STATEMENTS	321:3	322:3	8	
EXPR_STATEMENT	321:3	321:92	9	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "No space for \"TransferFunction\" tag" ) ;
EXPR	321:3	321:3	10	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "No space for \"TransferFunction\" tag" )
FUNCTION_CALL	321:3	321:91	11	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "No space for \"TransferFunction\" tag" )
CALLEE	321:3	321:3	12	TIFFErrorExt
LEAF_NODE	321:3	321:3	13	TIFFErrorExt
LEAF_NODE	321:15	321:15	12	(
ARGUMENT	321:16	321:16	12	tif -> tif_clientdata
FIELD	321:16	321:21	13	tif -> tif_clientdata
LEAF_NODE	321:16	321:16	14	tif
LEAF_NODE	321:19	321:19	14	->
LEAF_NODE	321:21	321:21	14	tif_clientdata
LEAF_NODE	321:35	321:35	12	,
ARGUMENT	321:37	321:37	12	tif -> tif_name
FIELD	321:37	321:42	13	tif -> tif_name
LEAF_NODE	321:37	321:37	14	tif
LEAF_NODE	321:40	321:40	14	->
LEAF_NODE	321:42	321:42	14	tif_name
LEAF_NODE	321:50	321:50	12	,
ARGUMENT	321:52	321:52	12	"No space for \"TransferFunction\" tag"
FIELD	321:52	321:52	13	"No space for \"TransferFunction\" tag"
LEAF_NODE	321:52	321:52	14	"No space for \"TransferFunction\" tag"
LEAF_NODE	321:91	321:91	12	)
LEAF_NODE	321:92	321:92	10	;
JUMP_STATEMENT	322:3	322:13	9	return ( 0 ) ;
KEYWORD	322:3	322:3	10	return
LEAF_NODE	322:3	322:3	11	return
DESTINATION	322:10	322:10	10	( 0 )
EXPR	322:10	322:12	11	( 0 )
LEAF_NODE	322:10	322:10	12	(
FIELD	322:11	322:11	12	0
LEAF_NODE	322:11	322:11	13	0
LEAF_NODE	322:12	322:12	12	)
LEAF_NODE	322:13	322:13	10	;
LEAF_NODE	323:2	323:2	8	}
LEAF_NODE	324:2	324:2	6	*
LEAF_NODE	324:3	324:3	6	va_arg
LEAF_NODE	324:9	324:9	6	(
LEAF_NODE	324:10	324:10	6	ap
LEAF_NODE	324:12	324:12	6	,
LEAF_NODE	324:14	324:14	6	uint16
LEAF_NODE	324:21	324:21	6	*
LEAF_NODE	324:22	324:22	6	*
LEAF_NODE	324:23	324:23	6	)
LEAF_NODE	324:25	324:25	6	=
EXPR_STATEMENT	324:27	324:53	6	td -> td_transferfunction [ 0 ] ;
EXPR	324:27	324:27	7	td -> td_transferfunction [ 0 ]
FIELD	324:27	324:52	8	td -> td_transferfunction [ 0 ]
LEAF_NODE	324:27	324:27	9	td
LEAF_NODE	324:29	324:29	9	->
LEAF_NODE	324:31	324:31	9	td_transferfunction
LEAF_NODE	324:50	324:50	9	[
EXPR	324:51	324:51	9	0
FIELD	324:51	324:51	10	0
LEAF_NODE	324:51	324:51	11	0
LEAF_NODE	324:52	324:52	9	]
LEAF_NODE	324:53	324:53	7	;
SELECTION	325:2	325:56	6	
KEYWORD	325:2	325:2	7	if
LEAF_NODE	325:2	325:2	8	if
LEAF_NODE	325:5	325:5	7	(
CONDITION	325:6	325:6	7	td -> td_samplesperpixel - td -> td_extrasamples > 1
EXPR	325:6	325:53	8	td -> td_samplesperpixel - td -> td_extrasamples > 1
FIELD	325:6	325:10	9	td -> td_samplesperpixel
LEAF_NODE	325:6	325:6	10	td
LEAF_NODE	325:8	325:8	10	->
LEAF_NODE	325:10	325:10	10	td_samplesperpixel
LEAF_NODE	325:29	325:29	9	-
FIELD	325:31	325:35	9	td -> td_extrasamples
LEAF_NODE	325:31	325:31	10	td
LEAF_NODE	325:33	325:33	10	->
LEAF_NODE	325:35	325:35	10	td_extrasamples
REL_OPERATOR	325:51	325:51	9	>
LEAF_NODE	325:51	325:51	10	>
FIELD	325:53	325:53	9	1
LEAF_NODE	325:53	325:53	10	1
LEAF_NODE	325:54	325:54	7	)
STATEMENTS	325:56	328:2	7	
LEAF_NODE	325:56	325:56	8	{
STATEMENTS	326:3	327:28	8	
LEAF_NODE	326:3	326:3	9	*
LEAF_NODE	326:4	326:4	9	va_arg
LEAF_NODE	326:10	326:10	9	(
LEAF_NODE	326:11	326:11	9	ap
LEAF_NODE	326:13	326:13	9	,
LEAF_NODE	326:15	326:15	9	uint16
LEAF_NODE	326:22	326:22	9	*
LEAF_NODE	326:23	326:23	9	*
LEAF_NODE	326:24	326:24	9	)
LEAF_NODE	326:26	326:26	9	=
EXPR_STATEMENT	326:28	326:54	9	td -> td_transferfunction [ 1 ] ;
EXPR	326:28	326:28	10	td -> td_transferfunction [ 1 ]
FIELD	326:28	326:53	11	td -> td_transferfunction [ 1 ]
LEAF_NODE	326:28	326:28	12	td
LEAF_NODE	326:30	326:30	12	->
LEAF_NODE	326:32	326:32	12	td_transferfunction
LEAF_NODE	326:51	326:51	12	[
EXPR	326:52	326:52	12	1
FIELD	326:52	326:52	13	1
LEAF_NODE	326:52	326:52	14	1
LEAF_NODE	326:53	326:53	12	]
LEAF_NODE	326:54	326:54	10	;
LEAF_NODE	327:3	327:3	9	*
LEAF_NODE	327:4	327:4	9	va_arg
LEAF_NODE	327:10	327:10	9	(
LEAF_NODE	327:11	327:11	9	ap
LEAF_NODE	327:13	327:13	9	,
LEAF_NODE	327:15	327:15	9	uint16
LEAF_NODE	327:22	327:22	9	*
LEAF_NODE	327:23	327:23	9	*
LEAF_NODE	327:24	327:24	9	)
LEAF_NODE	327:26	327:26	9	=
EXPR_STATEMENT	327:28	327:54	9	td -> td_transferfunction [ 2 ] ;
EXPR	327:28	327:28	10	td -> td_transferfunction [ 2 ]
FIELD	327:28	327:53	11	td -> td_transferfunction [ 2 ]
LEAF_NODE	327:28	327:28	12	td
LEAF_NODE	327:30	327:30	12	->
LEAF_NODE	327:32	327:32	12	td_transferfunction
LEAF_NODE	327:51	327:51	12	[
EXPR	327:52	327:52	12	2
FIELD	327:52	327:52	13	2
LEAF_NODE	327:52	327:52	14	2
LEAF_NODE	327:53	327:53	12	]
LEAF_NODE	327:54	327:54	10	;
LEAF_NODE	328:2	328:2	8	}
JUMP_STATEMENT	329:2	329:12	6	return ( 1 ) ;
KEYWORD	329:2	329:2	7	return
LEAF_NODE	329:2	329:2	8	return
DESTINATION	329:9	329:9	7	( 1 )
EXPR	329:9	329:11	8	( 1 )
LEAF_NODE	329:9	329:9	9	(
FIELD	329:10	329:10	9	1
LEAF_NODE	329:10	329:10	10	1
LEAF_NODE	329:11	329:11	9	)
LEAF_NODE	329:12	329:12	7	;
LABEL	330:1	330:33	6	case TIFFTAG_REFERENCEBLACKWHITE :
LEAF_NODE	330:1	330:1	7	case
LEAF_NODE	330:6	330:6	7	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	330:33	330:33	7	:
SELECTION	331:2	332:3	6	
KEYWORD	331:2	331:2	7	if
LEAF_NODE	331:2	331:2	8	if
LEAF_NODE	331:5	331:5	7	(
CONDITION	331:6	331:6	7	! td -> td_refblackwhite && ! TIFFDefaultRefBlackWhite ( td )
EXPR	331:6	331:6	8	! td -> td_refblackwhite && ! TIFFDefaultRefBlackWhite ( td )
AND	331:6	331:31	9	! td -> td_refblackwhite && ! TIFFDefaultRefBlackWhite ( td )
EXPR	331:6	331:6	10	! td -> td_refblackwhite
UNARY_EXPR	331:6	331:7	11	! td -> td_refblackwhite
UNARY_OPERATOR	331:6	331:6	12	!
LEAF_NODE	331:6	331:6	13	!
FIELD	331:7	331:11	12	td -> td_refblackwhite
LEAF_NODE	331:7	331:7	13	td
LEAF_NODE	331:9	331:9	13	->
LEAF_NODE	331:11	331:11	13	td_refblackwhite
LEAF_NODE	331:28	331:28	10	&&
EXPR	331:31	331:31	10	! TIFFDefaultRefBlackWhite ( td )
UNARY_EXPR	331:31	331:32	11	! TIFFDefaultRefBlackWhite ( td )
UNARY_OPERATOR	331:31	331:31	12	!
LEAF_NODE	331:31	331:31	13	!
FUNCTION_CALL	331:32	331:59	12	TIFFDefaultRefBlackWhite ( td )
CALLEE	331:32	331:32	13	TIFFDefaultRefBlackWhite
LEAF_NODE	331:32	331:32	14	TIFFDefaultRefBlackWhite
LEAF_NODE	331:56	331:56	13	(
ARGUMENT	331:57	331:57	13	td
FIELD	331:57	331:57	14	td
LEAF_NODE	331:57	331:57	15	td
LEAF_NODE	331:59	331:59	13	)
LEAF_NODE	331:60	331:60	7	)
STATEMENTS	332:3	332:3	7	
JUMP_STATEMENT	332:3	332:13	8	return ( 0 ) ;
KEYWORD	332:3	332:3	9	return
LEAF_NODE	332:3	332:3	10	return
DESTINATION	332:10	332:10	9	( 0 )
EXPR	332:10	332:12	10	( 0 )
LEAF_NODE	332:10	332:10	11	(
FIELD	332:11	332:11	11	0
LEAF_NODE	332:11	332:11	12	0
LEAF_NODE	332:12	332:12	11	)
LEAF_NODE	332:13	332:13	9	;
LEAF_NODE	333:2	333:2	6	*
LEAF_NODE	333:3	333:3	6	va_arg
LEAF_NODE	333:9	333:9	6	(
LEAF_NODE	333:10	333:10	6	ap
LEAF_NODE	333:12	333:12	6	,
LEAF_NODE	333:14	333:14	6	float
LEAF_NODE	333:20	333:20	6	*
LEAF_NODE	333:21	333:21	6	*
LEAF_NODE	333:22	333:22	6	)
LEAF_NODE	333:24	333:24	6	=
EXPR_STATEMENT	333:26	333:46	6	td -> td_refblackwhite ;
EXPR	333:26	333:26	7	td -> td_refblackwhite
FIELD	333:26	333:30	8	td -> td_refblackwhite
LEAF_NODE	333:26	333:26	9	td
LEAF_NODE	333:28	333:28	9	->
LEAF_NODE	333:30	333:30	9	td_refblackwhite
LEAF_NODE	333:46	333:46	7	;
JUMP_STATEMENT	334:2	334:12	6	return ( 1 ) ;
KEYWORD	334:2	334:2	7	return
LEAF_NODE	334:2	334:2	8	return
DESTINATION	334:9	334:9	7	( 1 )
EXPR	334:9	334:11	8	( 1 )
LEAF_NODE	334:9	334:9	9	(
FIELD	334:10	334:10	9	1
LEAF_NODE	334:10	334:10	10	1
LEAF_NODE	334:11	334:11	9	)
LEAF_NODE	334:12	334:12	7	;
LEAF_NODE	335:1	335:1	5	}
JUMP_STATEMENT	336:1	336:9	3	return 0 ;
KEYWORD	336:1	336:1	4	return
LEAF_NODE	336:1	336:1	5	return
DESTINATION	336:8	336:8	4	0
EXPR	336:8	336:8	5	0
FIELD	336:8	336:8	6	0
LEAF_NODE	336:8	336:8	7	0
LEAF_NODE	336:9	336:9	4	;
LEAF_NODE	337:0	337:0	2	}
SIMPLE_DECL	346:1	346:7	1	int ok ;
VAR_DECL	346:1	346:5	2	int ok
TYPE	346:1	346:1	3	int
TYPE_NAME	346:1	346:1	4	int
LEAF_NODE	346:1	346:1	5	int
NAME	346:5	346:5	3	ok
LEAF_NODE	346:5	346:5	4	ok
LEAF_NODE	346:7	346:7	2	;
SIMPLE_DECL	347:1	347:11	1	va_list ap ;
VAR_DECL	347:1	347:9	2	va_list ap
TYPE	347:1	347:1	3	va_list
TYPE_NAME	347:1	347:1	4	va_list
LEAF_NODE	347:1	347:1	5	va_list
NAME	347:9	347:9	3	ap
LEAF_NODE	347:9	347:9	4	ap
LEAF_NODE	347:11	347:11	2	;
SIMPLE_DECL	355:0	357:1	1	struct _Int64Parts BASE_CLASSES { int32 low , int32 high ; } ;
CLASS_DEF	355:0	355:0	2	struct _Int64Parts BASE_CLASSES { int32 low , int32 high ; }
CLASS_DEF	355:0	357:0	3	struct _Int64Parts BASE_CLASSES { int32 low , int32 high ; }
LEAF_NODE	355:0	355:0	4	struct
CLASS_NAME	355:7	355:7	4	_Int64Parts
LEAF_NODE	355:7	355:7	5	_Int64Parts
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	355:19	355:19	4	{
CLASS_CONTENT	356:1	356:1	4	int32 low , int32 high ;
SIMPLE_DECL	356:1	356:16	5	int32 low , int32 high ;
INIT_DECL_LIST	356:1	356:1	6	int32 low , int32 high
VAR_DECL	356:1	356:7	7	int32 low
TYPE	356:1	356:1	8	int32
TYPE_NAME	356:1	356:1	9	int32
LEAF_NODE	356:1	356:1	10	int32
NAME	356:7	356:7	8	low
LEAF_NODE	356:7	356:7	9	low
LEAF_NODE	356:10	356:10	7	,
VAR_DECL	356:1	356:12	7	int32 high
TYPE	356:1	356:1	8	int32
TYPE_NAME	356:1	356:1	9	int32
LEAF_NODE	356:1	356:1	10	int32
NAME	356:12	356:12	8	high
LEAF_NODE	356:12	356:12	9	high
LEAF_NODE	356:16	356:16	6	;
LEAF_NODE	357:0	357:0	4	}
LEAF_NODE	357:1	357:1	2	;
SIMPLE_DECL	359:8	362:8	1	union CLASS_NAME BASE_CLASSES { struct _Int64Parts part ; int64 value ; } _Int64 ;
VAR_DECL	359:8	362:2	2	union CLASS_NAME BASE_CLASSES { struct _Int64Parts part ; int64 value ; } _Int64
TYPE	359:8	359:8	3	union CLASS_NAME BASE_CLASSES { struct _Int64Parts part ; int64 value ; }
CLASS_DEF	359:8	362:0	4	union CLASS_NAME BASE_CLASSES { struct _Int64Parts part ; int64 value ; }
LEAF_NODE	359:8	359:8	5	union
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	359:14	359:14	5	{
CLASS_CONTENT	360:1	361:1	5	struct _Int64Parts part ; int64 value ;
SIMPLE_DECL	360:1	360:24	6	struct _Int64Parts part ;
VAR_DECL	360:1	360:20	7	struct _Int64Parts part
TYPE	360:1	360:1	8	struct _Int64Parts
TYPE_NAME	360:1	360:8	9	struct _Int64Parts
LEAF_NODE	360:1	360:1	10	struct
LEAF_NODE	360:8	360:8	10	_Int64Parts
NAME	360:20	360:20	8	part
LEAF_NODE	360:20	360:20	9	part
LEAF_NODE	360:24	360:24	7	;
SIMPLE_DECL	361:1	361:12	6	int64 value ;
VAR_DECL	361:1	361:7	7	int64 value
TYPE	361:1	361:1	8	int64
TYPE_NAME	361:1	361:1	9	int64
LEAF_NODE	361:1	361:1	10	int64
NAME	361:7	361:7	8	value
LEAF_NODE	361:7	361:7	9	value
LEAF_NODE	361:12	361:12	7	;
LEAF_NODE	362:0	362:0	5	}
NAME	362:2	362:2	3	_Int64
LEAF_NODE	362:2	362:2	4	_Int64
LEAF_NODE	362:8	362:8	2	;
FUNCTION_DEF	364:0	378:0	1	
RETURN_TYPE	364:0	364:0	2	float
TYPE_NAME	364:0	364:0	3	float
LEAF_NODE	364:0	364:0	4	float
FUNCTION_NAME	365:0	365:0	2	_TIFFUInt64ToFloat
LEAF_NODE	365:0	365:0	3	_TIFFUInt64ToFloat
PARAMETER_LIST	365:18	365:30	2	( uint64 ui64 )
LEAF_NODE	365:18	365:18	3	(
PARAMETER_DECL	365:19	365:26	3	uint64 ui64
TYPE	365:19	365:19	4	uint64
TYPE_NAME	365:19	365:19	5	uint64
LEAF_NODE	365:19	365:19	6	uint64
NAME	365:26	365:26	4	ui64
LEAF_NODE	365:26	365:26	5	ui64
LEAF_NODE	365:30	365:30	3	)
LEAF_NODE	366:0	366:0	2	{
STATEMENTS	367:1	372:3	2	
SIMPLE_DECL	367:1	367:9	3	_Int64 i ;
VAR_DECL	367:1	367:8	4	_Int64 i
TYPE	367:1	367:1	5	_Int64
TYPE_NAME	367:1	367:1	6	_Int64
LEAF_NODE	367:1	367:1	7	_Int64
NAME	367:8	367:8	5	i
LEAF_NODE	367:8	367:8	6	i
LEAF_NODE	367:9	367:9	4	;
EXPR_STATEMENT	369:1	369:15	3	i . value = ui64 ;
EXPR	369:1	369:1	4	i . value = ui64
ASSIGN	369:1	369:11	5	i . value = ui64
LVAL	369:1	369:1	6	i . value
FIELD	369:1	369:3	7	i . value
LEAF_NODE	369:1	369:1	8	i
LEAF_NODE	369:2	369:2	8	.
LEAF_NODE	369:3	369:3	8	value
ASSIGN_OP	369:9	369:9	6	=
LEAF_NODE	369:9	369:9	7	=
RVAL	369:11	369:11	6	ui64
FIELD	369:11	369:11	7	ui64
LEAF_NODE	369:11	369:11	8	ui64
LEAF_NODE	369:15	369:15	4	;
SELECTION	370:1	370:23	3	
KEYWORD	370:1	370:1	4	if
LEAF_NODE	370:1	370:1	5	if
LEAF_NODE	370:4	370:4	4	(
CONDITION	370:5	370:5	4	i . part . high >= 0
EXPR	370:5	370:20	5	i . part . high >= 0
FIELD	370:5	370:12	6	i . part . high
LEAF_NODE	370:5	370:5	7	i
LEAF_NODE	370:6	370:6	7	.
LEAF_NODE	370:7	370:7	7	part
LEAF_NODE	370:11	370:11	7	.
LEAF_NODE	370:12	370:12	7	high
REL_OPERATOR	370:17	370:17	6	>=
LEAF_NODE	370:17	370:17	7	>=
FIELD	370:20	370:20	6	0
LEAF_NODE	370:20	370:20	7	0
LEAF_NODE	370:21	370:21	4	)
STATEMENTS	370:23	372:1	4	
LEAF_NODE	370:23	370:23	5	{
STATEMENTS	371:2	371:2	5	
JUMP_STATEMENT	371:2	371:23	6	return ( float ) i . value ;
KEYWORD	371:2	371:2	7	return
LEAF_NODE	371:2	371:2	8	return
DESTINATION	371:9	371:9	7	( float ) i . value
EXPR	371:9	371:16	8	( float ) i . value
LEAF_NODE	371:9	371:9	9	(
TYPE_NAME	371:10	371:10	9	float
LEAF_NODE	371:10	371:10	10	float
LEAF_NODE	371:15	371:15	9	)
FIELD	371:16	371:18	9	i . value
LEAF_NODE	371:16	371:16	10	i
LEAF_NODE	371:17	371:17	10	.
LEAF_NODE	371:18	371:18	10	value
LEAF_NODE	371:23	371:23	7	;
LEAF_NODE	372:1	372:1	5	}
SELECTION	372:3	372:8	3	
KEYWORD	372:3	372:3	4	else
LEAF_NODE	372:3	372:3	5	else
STATEMENTS	372:8	377:1	4	
LEAF_NODE	372:8	372:8	5	{
STATEMENTS	373:2	376:2	5	
LEAF_NODE	373:2	373:2	6	long
SIMPLE_DECL	373:7	373:16	6	double df ;
VAR_DECL	373:7	373:14	7	double df
TYPE	373:7	373:7	8	double
TYPE_NAME	373:7	373:7	9	double
LEAF_NODE	373:7	373:7	10	double
NAME	373:14	373:14	8	df
LEAF_NODE	373:14	373:14	9	df
LEAF_NODE	373:16	373:16	7	;
LEAF_NODE	374:2	374:2	6	df
LEAF_NODE	374:5	374:5	6	=
LEAF_NODE	374:7	374:7	6	(
LEAF_NODE	374:8	374:8	6	long
LEAF_NODE	374:13	374:13	6	double
LEAF_NODE	374:19	374:19	6	)
EXPR_STATEMENT	374:20	374:27	6	i . value ;
EXPR	374:20	374:20	7	i . value
FIELD	374:20	374:22	8	i . value
LEAF_NODE	374:20	374:20	9	i
LEAF_NODE	374:21	374:21	9	.
LEAF_NODE	374:22	374:22	9	value
LEAF_NODE	374:27	374:27	7	;
EXPR_STATEMENT	375:2	375:30	6	df += 18446744073709551616.0 ;
EXPR	375:2	375:2	7	df += 18446744073709551616.0
ASSIGN	375:2	375:8	8	df += 18446744073709551616.0
LVAL	375:2	375:2	9	df
FIELD	375:2	375:2	10	df
LEAF_NODE	375:2	375:2	11	df
ASSIGN_OP	375:5	375:5	9	+=
LEAF_NODE	375:5	375:5	10	+=
RVAL	375:8	375:8	9	18446744073709551616.0
FIELD	375:8	375:8	10	18446744073709551616.0
LEAF_NODE	375:8	375:8	11	18446744073709551616.0
LEAF_NODE	375:30	375:30	7	;
JUMP_STATEMENT	376:2	376:18	6	return ( float ) df ;
KEYWORD	376:2	376:2	7	return
LEAF_NODE	376:2	376:2	8	return
DESTINATION	376:9	376:9	7	( float ) df
EXPR	376:9	376:16	8	( float ) df
LEAF_NODE	376:9	376:9	9	(
TYPE_NAME	376:10	376:10	9	float
LEAF_NODE	376:10	376:10	10	float
LEAF_NODE	376:15	376:15	9	)
FIELD	376:16	376:16	9	df
LEAF_NODE	376:16	376:16	10	df
LEAF_NODE	376:18	376:18	7	;
LEAF_NODE	377:1	377:1	5	}
LEAF_NODE	378:0	378:0	2	}
FUNCTION_DEF	380:0	394:0	1	
RETURN_TYPE	380:0	380:0	2	double
TYPE_NAME	380:0	380:0	3	double
LEAF_NODE	380:0	380:0	4	double
FUNCTION_NAME	381:0	381:0	2	_TIFFUInt64ToDouble
LEAF_NODE	381:0	381:0	3	_TIFFUInt64ToDouble
PARAMETER_LIST	381:19	381:31	2	( uint64 ui64 )
LEAF_NODE	381:19	381:19	3	(
PARAMETER_DECL	381:20	381:27	3	uint64 ui64
TYPE	381:20	381:20	4	uint64
TYPE_NAME	381:20	381:20	5	uint64
LEAF_NODE	381:20	381:20	6	uint64
NAME	381:27	381:27	4	ui64
LEAF_NODE	381:27	381:27	5	ui64
LEAF_NODE	381:31	381:31	3	)
LEAF_NODE	382:0	382:0	2	{
STATEMENTS	383:1	388:3	2	
SIMPLE_DECL	383:1	383:9	3	_Int64 i ;
VAR_DECL	383:1	383:8	4	_Int64 i
TYPE	383:1	383:1	5	_Int64
TYPE_NAME	383:1	383:1	6	_Int64
LEAF_NODE	383:1	383:1	7	_Int64
NAME	383:8	383:8	5	i
LEAF_NODE	383:8	383:8	6	i
LEAF_NODE	383:9	383:9	4	;
EXPR_STATEMENT	385:1	385:15	3	i . value = ui64 ;
EXPR	385:1	385:1	4	i . value = ui64
ASSIGN	385:1	385:11	5	i . value = ui64
LVAL	385:1	385:1	6	i . value
FIELD	385:1	385:3	7	i . value
LEAF_NODE	385:1	385:1	8	i
LEAF_NODE	385:2	385:2	8	.
LEAF_NODE	385:3	385:3	8	value
ASSIGN_OP	385:9	385:9	6	=
LEAF_NODE	385:9	385:9	7	=
RVAL	385:11	385:11	6	ui64
FIELD	385:11	385:11	7	ui64
LEAF_NODE	385:11	385:11	8	ui64
LEAF_NODE	385:15	385:15	4	;
SELECTION	386:1	386:23	3	
KEYWORD	386:1	386:1	4	if
LEAF_NODE	386:1	386:1	5	if
LEAF_NODE	386:4	386:4	4	(
CONDITION	386:5	386:5	4	i . part . high >= 0
EXPR	386:5	386:20	5	i . part . high >= 0
FIELD	386:5	386:12	6	i . part . high
LEAF_NODE	386:5	386:5	7	i
LEAF_NODE	386:6	386:6	7	.
LEAF_NODE	386:7	386:7	7	part
LEAF_NODE	386:11	386:11	7	.
LEAF_NODE	386:12	386:12	7	high
REL_OPERATOR	386:17	386:17	6	>=
LEAF_NODE	386:17	386:17	7	>=
FIELD	386:20	386:20	6	0
LEAF_NODE	386:20	386:20	7	0
LEAF_NODE	386:21	386:21	4	)
STATEMENTS	386:23	388:1	4	
LEAF_NODE	386:23	386:23	5	{
STATEMENTS	387:2	387:2	5	
JUMP_STATEMENT	387:2	387:24	6	return ( double ) i . value ;
KEYWORD	387:2	387:2	7	return
LEAF_NODE	387:2	387:2	8	return
DESTINATION	387:9	387:9	7	( double ) i . value
EXPR	387:9	387:17	8	( double ) i . value
LEAF_NODE	387:9	387:9	9	(
TYPE_NAME	387:10	387:10	9	double
LEAF_NODE	387:10	387:10	10	double
LEAF_NODE	387:16	387:16	9	)
FIELD	387:17	387:19	9	i . value
LEAF_NODE	387:17	387:17	10	i
LEAF_NODE	387:18	387:18	10	.
LEAF_NODE	387:19	387:19	10	value
LEAF_NODE	387:24	387:24	7	;
LEAF_NODE	388:1	388:1	5	}
SELECTION	388:3	388:8	3	
KEYWORD	388:3	388:3	4	else
LEAF_NODE	388:3	388:3	5	else
STATEMENTS	388:8	393:1	4	
LEAF_NODE	388:8	388:8	5	{
STATEMENTS	389:2	392:2	5	
LEAF_NODE	389:2	389:2	6	long
SIMPLE_DECL	389:7	389:16	6	double df ;
VAR_DECL	389:7	389:14	7	double df
TYPE	389:7	389:7	8	double
TYPE_NAME	389:7	389:7	9	double
LEAF_NODE	389:7	389:7	10	double
NAME	389:14	389:14	8	df
LEAF_NODE	389:14	389:14	9	df
LEAF_NODE	389:16	389:16	7	;
LEAF_NODE	390:2	390:2	6	df
LEAF_NODE	390:5	390:5	6	=
LEAF_NODE	390:7	390:7	6	(
LEAF_NODE	390:8	390:8	6	long
LEAF_NODE	390:13	390:13	6	double
LEAF_NODE	390:19	390:19	6	)
EXPR_STATEMENT	390:20	390:27	6	i . value ;
EXPR	390:20	390:20	7	i . value
FIELD	390:20	390:22	8	i . value
LEAF_NODE	390:20	390:20	9	i
LEAF_NODE	390:21	390:21	9	.
LEAF_NODE	390:22	390:22	9	value
LEAF_NODE	390:27	390:27	7	;
EXPR_STATEMENT	391:2	391:30	6	df += 18446744073709551616.0 ;
EXPR	391:2	391:2	7	df += 18446744073709551616.0
ASSIGN	391:2	391:8	8	df += 18446744073709551616.0
LVAL	391:2	391:2	9	df
FIELD	391:2	391:2	10	df
LEAF_NODE	391:2	391:2	11	df
ASSIGN_OP	391:5	391:5	9	+=
LEAF_NODE	391:5	391:5	10	+=
RVAL	391:8	391:8	9	18446744073709551616.0
FIELD	391:8	391:8	10	18446744073709551616.0
LEAF_NODE	391:8	391:8	11	18446744073709551616.0
LEAF_NODE	391:30	391:30	7	;
JUMP_STATEMENT	392:2	392:19	6	return ( double ) df ;
KEYWORD	392:2	392:2	7	return
LEAF_NODE	392:2	392:2	8	return
DESTINATION	392:9	392:9	7	( double ) df
EXPR	392:9	392:17	8	( double ) df
LEAF_NODE	392:9	392:9	9	(
TYPE_NAME	392:10	392:10	9	double
LEAF_NODE	392:10	392:10	10	double
LEAF_NODE	392:16	392:16	9	)
FIELD	392:17	392:17	9	df
LEAF_NODE	392:17	392:17	10	df
LEAF_NODE	392:19	392:19	7	;
LEAF_NODE	393:1	393:1	5	}
LEAF_NODE	394:0	394:0	2	}
FUNCTION_DEF	396:0	403:0	1	
RETURN_TYPE	396:0	396:0	2	float
TYPE_NAME	396:0	396:0	3	float
LEAF_NODE	396:0	396:0	4	float
FUNCTION_NAME	396:6	396:6	2	_TIFFClampDoubleToFloat
LEAF_NODE	396:6	396:6	3	_TIFFClampDoubleToFloat
PARAMETER_LIST	396:29	396:42	2	( double val )
LEAF_NODE	396:29	396:29	3	(
PARAMETER_DECL	396:31	396:38	3	double val
TYPE	396:31	396:31	4	double
TYPE_NAME	396:31	396:31	5	double
LEAF_NODE	396:31	396:31	6	double
NAME	396:38	396:38	4	val
LEAF_NODE	396:38	396:38	5	val
LEAF_NODE	396:42	396:42	3	)
LEAF_NODE	397:0	397:0	2	{
STATEMENTS	398:4	402:4	2	
SELECTION	398:4	399:8	3	
KEYWORD	398:4	398:4	4	if
LEAF_NODE	398:4	398:4	5	if
LEAF_NODE	398:6	398:6	4	(
CONDITION	398:8	398:8	4	val > FLT_MAX
EXPR	398:8	398:14	5	val > FLT_MAX
FIELD	398:8	398:8	6	val
LEAF_NODE	398:8	398:8	7	val
REL_OPERATOR	398:12	398:12	6	>
LEAF_NODE	398:12	398:12	7	>
FIELD	398:14	398:14	6	FLT_MAX
LEAF_NODE	398:14	398:14	7	FLT_MAX
LEAF_NODE	398:22	398:22	4	)
STATEMENTS	399:8	399:8	4	
JUMP_STATEMENT	399:8	399:22	5	return FLT_MAX ;
KEYWORD	399:8	399:8	6	return
LEAF_NODE	399:8	399:8	7	return
DESTINATION	399:15	399:15	6	FLT_MAX
EXPR	399:15	399:15	7	FLT_MAX
FIELD	399:15	399:15	8	FLT_MAX
LEAF_NODE	399:15	399:15	9	FLT_MAX
LEAF_NODE	399:22	399:22	6	;
SELECTION	400:4	401:8	3	
KEYWORD	400:4	400:4	4	if
LEAF_NODE	400:4	400:4	5	if
LEAF_NODE	400:6	400:6	4	(
CONDITION	400:8	400:8	4	val < - FLT_MAX
EXPR	400:8	400:14	5	val < - FLT_MAX
FIELD	400:8	400:8	6	val
LEAF_NODE	400:8	400:8	7	val
REL_OPERATOR	400:12	400:12	6	<
LEAF_NODE	400:12	400:12	7	<
UNARY_EXPR	400:14	400:15	6	- FLT_MAX
UNARY_OPERATOR	400:14	400:14	7	-
LEAF_NODE	400:14	400:14	8	-
FIELD	400:15	400:15	7	FLT_MAX
LEAF_NODE	400:15	400:15	8	FLT_MAX
LEAF_NODE	400:23	400:23	4	)
STATEMENTS	401:8	401:8	4	
JUMP_STATEMENT	401:8	401:23	5	return - FLT_MAX ;
KEYWORD	401:8	401:8	6	return
LEAF_NODE	401:8	401:8	7	return
DESTINATION	401:15	401:15	6	- FLT_MAX
EXPR	401:15	401:15	7	- FLT_MAX
UNARY_EXPR	401:15	401:16	8	- FLT_MAX
UNARY_OPERATOR	401:15	401:15	9	-
LEAF_NODE	401:15	401:15	10	-
FIELD	401:16	401:16	9	FLT_MAX
LEAF_NODE	401:16	401:16	10	FLT_MAX
LEAF_NODE	401:23	401:23	6	;
JUMP_STATEMENT	402:4	402:21	3	return ( float ) val ;
KEYWORD	402:4	402:4	4	return
LEAF_NODE	402:4	402:4	5	return
DESTINATION	402:11	402:11	4	( float ) val
EXPR	402:11	402:18	5	( float ) val
LEAF_NODE	402:11	402:11	6	(
TYPE_NAME	402:12	402:12	6	float
LEAF_NODE	402:12	402:12	7	float
LEAF_NODE	402:17	402:17	6	)
FIELD	402:18	402:18	6	val
LEAF_NODE	402:18	402:18	7	val
LEAF_NODE	402:21	402:21	4	;
LEAF_NODE	403:0	403:0	2	}
FUNCTION_DEF	405:0	410:0	1	
RETURN_TYPE	405:0	405:0	2	int
TYPE_NAME	405:0	405:0	3	int
LEAF_NODE	405:0	405:0	4	int
FUNCTION_NAME	405:4	405:4	2	_TIFFSeekOK
LEAF_NODE	405:4	405:4	3	_TIFFSeekOK
PARAMETER_LIST	405:15	405:37	2	( TIFF * tif , toff_t off )
LEAF_NODE	405:15	405:15	3	(
PARAMETER_DECL	405:16	405:22	3	TIFF * tif
TYPE	405:16	405:20	4	TIFF *
TYPE_NAME	405:16	405:16	5	TIFF
LEAF_NODE	405:16	405:16	6	TIFF
POINTER	405:20	405:20	5	*
LEAF_NODE	405:20	405:20	6	*
NAME	405:22	405:22	4	tif
LEAF_NODE	405:22	405:22	5	tif
LEAF_NODE	405:25	405:25	3	,
PARAMETER_DECL	405:27	405:34	3	toff_t off
TYPE	405:27	405:27	4	toff_t
TYPE_NAME	405:27	405:27	5	toff_t
LEAF_NODE	405:27	405:27	6	toff_t
NAME	405:34	405:34	4	off
LEAF_NODE	405:34	405:34	5	off
LEAF_NODE	405:37	405:37	3	)
LEAF_NODE	406:0	406:0	2	{
STATEMENTS	409:4	409:31	2	
LEAF_NODE	409:4	409:4	3	return
LEAF_NODE	409:11	409:11	3	off
LEAF_NODE	409:15	409:15	3	<=
LEAF_NODE	409:18	409:18	3	(
LEAF_NODE	409:19	409:19	3	~
LEAF_NODE	409:20	409:20	3	(
LEAF_NODE	409:21	409:21	3	uint64
LEAF_NODE	409:27	409:27	3	)
LEAF_NODE	409:28	409:28	3	0
LEAF_NODE	409:29	409:29	3	)
LEAF_NODE	409:30	409:30	3	/
EXPR_STATEMENT	409:31	409:71	3	2 && TIFFSeekFile ( tif , off , SEEK_SET ) == off ;
EXPR	409:31	409:31	4	2 && TIFFSeekFile ( tif , off , SEEK_SET ) == off
AND	409:31	409:36	5	2 && TIFFSeekFile ( tif , off , SEEK_SET ) == off
EXPR	409:31	409:31	6	2
FIELD	409:31	409:31	7	2
LEAF_NODE	409:31	409:31	8	2
LEAF_NODE	409:33	409:33	6	&&
EXPR	409:36	409:68	6	TIFFSeekFile ( tif , off , SEEK_SET ) == off
FUNCTION_CALL	409:36	409:65	7	TIFFSeekFile ( tif , off , SEEK_SET )
CALLEE	409:36	409:36	8	TIFFSeekFile
LEAF_NODE	409:36	409:36	9	TIFFSeekFile
LEAF_NODE	409:48	409:48	8	(
ARGUMENT	409:49	409:49	8	tif
FIELD	409:49	409:49	9	tif
LEAF_NODE	409:49	409:49	10	tif
LEAF_NODE	409:52	409:52	8	,
ARGUMENT	409:53	409:53	8	off
FIELD	409:53	409:53	9	off
LEAF_NODE	409:53	409:53	10	off
LEAF_NODE	409:56	409:56	8	,
ARGUMENT	409:57	409:57	8	SEEK_SET
FIELD	409:57	409:57	9	SEEK_SET
LEAF_NODE	409:57	409:57	10	SEEK_SET
LEAF_NODE	409:65	409:65	8	)
EQ_OPERATOR	409:66	409:66	7	==
LEAF_NODE	409:66	409:66	8	==
FIELD	409:68	409:68	7	off
LEAF_NODE	409:68	409:68	8	off
LEAF_NODE	409:71	409:71	4	;
LEAF_NODE	410:0	410:0	2	}
