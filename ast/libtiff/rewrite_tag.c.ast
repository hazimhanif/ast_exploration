SOURCE_FILE	42:0	329:0	0	
SIMPLE_DECL	42:0	42:24	1	const uint32 length ; length = 40 ;
VAR_DECL	42:0	42:13	2	const uint32 length ; length = 40
TYPE	42:0	42:0	3	const uint32
TYPE_NAME	42:0	42:6	4	const uint32
LEAF_NODE	42:0	42:0	5	const
LEAF_NODE	42:6	42:6	5	uint32
NAME	42:13	42:13	3	length
LEAF_NODE	42:13	42:13	4	length
LEAF_NODE	0:0	0:0	3	;
INIT	42:13	42:13	3	length = 40
ASSIGN	42:13	42:22	4	length = 40
LVAL	42:13	42:13	5	length
NAME	42:13	42:13	6	length
LEAF_NODE	42:13	42:13	7	length
ASSIGN_OP	42:20	42:20	5	=
LEAF_NODE	42:20	42:20	6	=
RVAL	42:22	42:22	5	40
FIELD	42:22	42:22	6	40
LEAF_NODE	42:22	42:22	7	40
LEAF_NODE	42:24	42:24	2	;
SIMPLE_DECL	43:0	43:31	1	const uint32 rows_per_strip ; rows_per_strip = 1 ;
VAR_DECL	43:0	43:13	2	const uint32 rows_per_strip ; rows_per_strip = 1
TYPE	43:0	43:0	3	const uint32
TYPE_NAME	43:0	43:6	4	const uint32
LEAF_NODE	43:0	43:0	5	const
LEAF_NODE	43:6	43:6	5	uint32
NAME	43:13	43:13	3	rows_per_strip
LEAF_NODE	43:13	43:13	4	rows_per_strip
LEAF_NODE	0:0	0:0	3	;
INIT	43:13	43:13	3	rows_per_strip = 1
ASSIGN	43:13	43:30	4	rows_per_strip = 1
LVAL	43:13	43:13	5	rows_per_strip
NAME	43:13	43:13	6	rows_per_strip
LEAF_NODE	43:13	43:13	7	rows_per_strip
ASSIGN_OP	43:28	43:28	5	=
LEAF_NODE	43:28	43:28	6	=
RVAL	43:30	43:30	5	1
FIELD	43:30	43:30	6	1
LEAF_NODE	43:30	43:30	7	1
LEAF_NODE	43:31	43:31	2	;
FUNCTION_DEF	45:0	135:0	1	
RETURN_TYPE	45:0	45:0	2	int
TYPE_NAME	45:0	45:0	3	int
LEAF_NODE	45:0	45:0	4	int
FUNCTION_NAME	45:4	45:4	2	test_packbits
LEAF_NODE	45:4	45:4	3	test_packbits
PARAMETER_LIST	45:17	45:18	2	( )
LEAF_NODE	45:17	45:17	3	(
LEAF_NODE	45:18	45:18	3	)
LEAF_NODE	47:0	47:0	2	{
STATEMENTS	48:4	133:4	2	
SIMPLE_DECL	48:4	48:17	3	TIFF * tif ;
VAR_DECL	48:4	48:14	4	TIFF * tif
TYPE	48:4	48:13	5	TIFF *
TYPE_NAME	48:4	48:4	6	TIFF
LEAF_NODE	48:4	48:4	7	TIFF
POINTER	48:13	48:13	6	*
LEAF_NODE	48:13	48:13	7	*
NAME	48:14	48:14	5	tif
LEAF_NODE	48:14	48:14	6	tif
LEAF_NODE	48:17	48:17	4	;
SIMPLE_DECL	49:4	49:21	3	int i ;
VAR_DECL	49:4	49:20	4	int i
TYPE	49:4	49:4	5	int
TYPE_NAME	49:4	49:4	6	int
LEAF_NODE	49:4	49:4	7	int
NAME	49:20	49:20	5	i
LEAF_NODE	49:20	49:20	6	i
LEAF_NODE	49:21	49:21	4	;
LEAF_NODE	50:4	50:4	3	unsigned
LEAF_NODE	50:13	50:13	3	char
LEAF_NODE	50:20	50:20	3	buf
LEAF_NODE	50:23	50:23	3	[
LEAF_NODE	50:24	50:24	3	10
LEAF_NODE	50:26	50:26	3	]
LEAF_NODE	50:28	50:28	3	=
LEAF_NODE	50:30	50:30	3	{
STATEMENTS	50:31	50:49	3	
LEAF_NODE	50:31	50:31	4	0
LEAF_NODE	50:32	50:32	4	,
LEAF_NODE	50:33	50:33	4	0
LEAF_NODE	50:34	50:34	4	,
LEAF_NODE	50:35	50:35	4	0
LEAF_NODE	50:36	50:36	4	,
LEAF_NODE	50:37	50:37	4	0
LEAF_NODE	50:38	50:38	4	,
LEAF_NODE	50:39	50:39	4	0
LEAF_NODE	50:40	50:40	4	,
LEAF_NODE	50:41	50:41	4	0
LEAF_NODE	50:42	50:42	4	,
LEAF_NODE	50:43	50:43	4	0
LEAF_NODE	50:44	50:44	4	,
LEAF_NODE	50:45	50:45	4	0
LEAF_NODE	50:46	50:46	4	,
LEAF_NODE	50:47	50:47	4	0
LEAF_NODE	50:48	50:48	4	,
LEAF_NODE	50:49	50:49	4	0
LEAF_NODE	50:50	50:50	3	}
LEAF_NODE	50:51	50:51	3	;
SIMPLE_DECL	52:4	52:21	3	uint32 width ; width = 10 ;
VAR_DECL	52:4	52:11	4	uint32 width ; width = 10
TYPE	52:4	52:4	5	uint32
TYPE_NAME	52:4	52:4	6	uint32
LEAF_NODE	52:4	52:4	7	uint32
NAME	52:11	52:11	5	width
LEAF_NODE	52:11	52:11	6	width
LEAF_NODE	0:0	0:0	5	;
INIT	52:11	52:11	5	width = 10
ASSIGN	52:11	52:19	6	width = 10
LVAL	52:11	52:11	7	width
NAME	52:11	52:11	8	width
LEAF_NODE	52:11	52:11	9	width
ASSIGN_OP	52:17	52:17	7	=
LEAF_NODE	52:17	52:17	8	=
RVAL	52:19	52:19	7	10
FIELD	52:19	52:19	8	10
LEAF_NODE	52:19	52:19	9	10
LEAF_NODE	52:21	52:21	4	;
SIMPLE_DECL	53:4	53:20	3	int length ; length = 20 ;
VAR_DECL	53:4	53:9	4	int length ; length = 20
TYPE	53:4	53:4	5	int
TYPE_NAME	53:4	53:4	6	int
LEAF_NODE	53:4	53:4	7	int
NAME	53:9	53:9	5	length
LEAF_NODE	53:9	53:9	6	length
LEAF_NODE	0:0	0:0	5	;
INIT	53:9	53:9	5	length = 20
ASSIGN	53:9	53:18	6	length = 20
LVAL	53:9	53:9	7	length
NAME	53:9	53:9	8	length
LEAF_NODE	53:9	53:9	9	length
ASSIGN_OP	53:16	53:16	7	=
LEAF_NODE	53:16	53:16	8	=
RVAL	53:18	53:18	7	20
FIELD	53:18	53:18	8	20
LEAF_NODE	53:18	53:18	9	20
LEAF_NODE	53:20	53:20	4	;
SIMPLE_DECL	54:4	54:46	3	const char * filename ; filename = "test_packbits.tif" ;
VAR_DECL	54:4	54:16	4	const char * filename ; filename = "test_packbits.tif"
TYPE	54:4	54:15	5	const char *
TYPE_NAME	54:4	54:10	6	const char
LEAF_NODE	54:4	54:4	7	const
LEAF_NODE	54:10	54:10	7	char
POINTER	54:15	54:15	6	*
LEAF_NODE	54:15	54:15	7	*
NAME	54:16	54:16	5	filename
LEAF_NODE	54:16	54:16	6	filename
LEAF_NODE	0:0	0:0	5	;
INIT	54:16	54:16	5	filename = "test_packbits.tif"
ASSIGN	54:16	54:27	6	filename = "test_packbits.tif"
LVAL	54:16	54:16	7	filename
NAME	54:16	54:16	8	filename
LEAF_NODE	54:16	54:16	9	filename
ASSIGN_OP	54:25	54:25	7	=
LEAF_NODE	54:25	54:25	8	=
RVAL	54:27	54:27	7	"test_packbits.tif"
FIELD	54:27	54:27	8	"test_packbits.tif"
LEAF_NODE	54:27	54:27	9	"test_packbits.tif"
LEAF_NODE	54:46	54:46	4	;
EXPR_STATEMENT	57:4	57:33	3	tif = TIFFOpen ( filename , "w" ) ;
EXPR	57:4	57:4	4	tif = TIFFOpen ( filename , "w" )
ASSIGN	57:4	57:10	5	tif = TIFFOpen ( filename , "w" )
LVAL	57:4	57:4	6	tif
FIELD	57:4	57:4	7	tif
LEAF_NODE	57:4	57:4	8	tif
ASSIGN_OP	57:8	57:8	6	=
LEAF_NODE	57:8	57:8	7	=
RVAL	57:10	57:10	6	TIFFOpen ( filename , "w" )
FUNCTION_CALL	57:10	57:32	7	TIFFOpen ( filename , "w" )
CALLEE	57:10	57:10	8	TIFFOpen
LEAF_NODE	57:10	57:10	9	TIFFOpen
LEAF_NODE	57:18	57:18	8	(
ARGUMENT	57:19	57:19	8	filename
FIELD	57:19	57:19	9	filename
LEAF_NODE	57:19	57:19	10	filename
LEAF_NODE	57:27	57:27	8	,
ARGUMENT	57:29	57:29	8	"w"
FIELD	57:29	57:29	9	"w"
LEAF_NODE	57:29	57:29	10	"w"
LEAF_NODE	57:32	57:32	8	)
LEAF_NODE	57:33	57:33	4	;
SELECTION	59:4	59:14	3	
KEYWORD	59:4	59:4	4	if
LEAF_NODE	59:4	59:4	5	if
LEAF_NODE	59:7	59:7	4	(
CONDITION	59:8	59:8	4	! tif
EXPR	59:8	59:8	5	! tif
UNARY_EXPR	59:8	59:9	6	! tif
UNARY_OPERATOR	59:8	59:8	7	!
LEAF_NODE	59:8	59:8	8	!
FIELD	59:9	59:9	7	tif
LEAF_NODE	59:9	59:9	8	tif
LEAF_NODE	59:12	59:12	4	)
STATEMENTS	59:14	62:4	4	
LEAF_NODE	59:14	59:14	5	{
STATEMENTS	60:8	61:8	5	
EXPR_STATEMENT	60:8	60:71	6	fprintf ( stderr , "Can't create test TIFF file %s.\n" , filename ) ;
EXPR	60:8	60:8	7	fprintf ( stderr , "Can't create test TIFF file %s.\n" , filename )
FUNCTION_CALL	60:8	60:70	8	fprintf ( stderr , "Can't create test TIFF file %s.\n" , filename )
CALLEE	60:8	60:8	9	fprintf
LEAF_NODE	60:8	60:8	10	fprintf
LEAF_NODE	60:16	60:16	9	(
ARGUMENT	60:17	60:17	9	stderr
FIELD	60:17	60:17	10	stderr
LEAF_NODE	60:17	60:17	11	stderr
LEAF_NODE	60:23	60:23	9	,
ARGUMENT	60:25	60:25	9	"Can't create test TIFF file %s.\n"
FIELD	60:25	60:25	10	"Can't create test TIFF file %s.\n"
LEAF_NODE	60:25	60:25	11	"Can't create test TIFF file %s.\n"
LEAF_NODE	60:60	60:60	9	,
ARGUMENT	60:62	60:62	9	filename
FIELD	60:62	60:62	10	filename
LEAF_NODE	60:62	60:62	11	filename
LEAF_NODE	60:70	60:70	9	)
LEAF_NODE	60:71	60:71	7	;
JUMP_STATEMENT	61:8	61:16	6	return 1 ;
KEYWORD	61:8	61:8	7	return
LEAF_NODE	61:8	61:8	8	return
DESTINATION	61:15	61:15	7	1
EXPR	61:15	61:15	8	1
FIELD	61:15	61:15	9	1
LEAF_NODE	61:15	61:15	10	1
LEAF_NODE	61:16	61:16	7	;
LEAF_NODE	62:4	62:4	5	}
SELECTION	64:4	64:71	3	
KEYWORD	64:4	64:4	4	if
LEAF_NODE	64:4	64:4	5	if
LEAF_NODE	64:7	64:7	4	(
CONDITION	64:8	64:8	4	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS )
EXPR	64:8	64:8	5	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS )
UNARY_EXPR	64:8	64:9	6	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS )
UNARY_OPERATOR	64:8	64:8	7	!
LEAF_NODE	64:8	64:8	8	!
FUNCTION_CALL	64:9	64:68	7	TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS )
CALLEE	64:9	64:9	8	TIFFSetField
LEAF_NODE	64:9	64:9	9	TIFFSetField
LEAF_NODE	64:21	64:21	8	(
ARGUMENT	64:22	64:22	8	tif
FIELD	64:22	64:22	9	tif
LEAF_NODE	64:22	64:22	10	tif
LEAF_NODE	64:25	64:25	8	,
ARGUMENT	64:27	64:27	8	TIFFTAG_COMPRESSION
FIELD	64:27	64:27	9	TIFFTAG_COMPRESSION
LEAF_NODE	64:27	64:27	10	TIFFTAG_COMPRESSION
LEAF_NODE	64:46	64:46	8	,
ARGUMENT	64:48	64:48	8	COMPRESSION_PACKBITS
FIELD	64:48	64:48	9	COMPRESSION_PACKBITS
LEAF_NODE	64:48	64:48	10	COMPRESSION_PACKBITS
LEAF_NODE	64:68	64:68	8	)
LEAF_NODE	64:69	64:69	4	)
STATEMENTS	64:71	67:4	4	
LEAF_NODE	64:71	64:71	5	{
STATEMENTS	65:8	66:8	5	
EXPR_STATEMENT	65:8	65:56	6	fprintf ( stderr , "Can't set Compression tag.\n" ) ;
EXPR	65:8	65:8	7	fprintf ( stderr , "Can't set Compression tag.\n" )
FUNCTION_CALL	65:8	65:55	8	fprintf ( stderr , "Can't set Compression tag.\n" )
CALLEE	65:8	65:8	9	fprintf
LEAF_NODE	65:8	65:8	10	fprintf
LEAF_NODE	65:16	65:16	9	(
ARGUMENT	65:17	65:17	9	stderr
FIELD	65:17	65:17	10	stderr
LEAF_NODE	65:17	65:17	11	stderr
LEAF_NODE	65:23	65:23	9	,
ARGUMENT	65:25	65:25	9	"Can't set Compression tag.\n"
FIELD	65:25	65:25	10	"Can't set Compression tag.\n"
LEAF_NODE	65:25	65:25	11	"Can't set Compression tag.\n"
LEAF_NODE	65:55	65:55	9	)
LEAF_NODE	65:56	65:56	7	;
JUMP_STATEMENT	66:8	66:20	6	goto failure ;
KEYWORD	66:8	66:8	7	goto
LEAF_NODE	66:8	66:8	8	goto
DESTINATION	66:13	66:13	7	failure
LEAF_NODE	66:13	66:13	8	failure
LEAF_NODE	66:20	66:20	7	;
LEAF_NODE	67:4	67:4	5	}
SELECTION	68:4	68:55	3	
KEYWORD	68:4	68:4	4	if
LEAF_NODE	68:4	68:4	5	if
LEAF_NODE	68:7	68:7	4	(
CONDITION	68:8	68:8	4	! TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , width )
EXPR	68:8	68:8	5	! TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , width )
UNARY_EXPR	68:8	68:9	6	! TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , width )
UNARY_OPERATOR	68:8	68:8	7	!
LEAF_NODE	68:8	68:8	8	!
FUNCTION_CALL	68:9	68:52	7	TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , width )
CALLEE	68:9	68:9	8	TIFFSetField
LEAF_NODE	68:9	68:9	9	TIFFSetField
LEAF_NODE	68:21	68:21	8	(
ARGUMENT	68:22	68:22	8	tif
FIELD	68:22	68:22	9	tif
LEAF_NODE	68:22	68:22	10	tif
LEAF_NODE	68:25	68:25	8	,
ARGUMENT	68:27	68:27	8	TIFFTAG_IMAGEWIDTH
FIELD	68:27	68:27	9	TIFFTAG_IMAGEWIDTH
LEAF_NODE	68:27	68:27	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	68:45	68:45	8	,
ARGUMENT	68:47	68:47	8	width
FIELD	68:47	68:47	9	width
LEAF_NODE	68:47	68:47	10	width
LEAF_NODE	68:52	68:52	8	)
LEAF_NODE	68:53	68:53	4	)
STATEMENTS	68:55	71:4	4	
LEAF_NODE	68:55	68:55	5	{
STATEMENTS	69:8	70:8	5	
EXPR_STATEMENT	69:8	69:55	6	fprintf ( stderr , "Can't set ImageWidth tag.\n" ) ;
EXPR	69:8	69:8	7	fprintf ( stderr , "Can't set ImageWidth tag.\n" )
FUNCTION_CALL	69:8	69:54	8	fprintf ( stderr , "Can't set ImageWidth tag.\n" )
CALLEE	69:8	69:8	9	fprintf
LEAF_NODE	69:8	69:8	10	fprintf
LEAF_NODE	69:16	69:16	9	(
ARGUMENT	69:17	69:17	9	stderr
FIELD	69:17	69:17	10	stderr
LEAF_NODE	69:17	69:17	11	stderr
LEAF_NODE	69:23	69:23	9	,
ARGUMENT	69:25	69:25	9	"Can't set ImageWidth tag.\n"
FIELD	69:25	69:25	10	"Can't set ImageWidth tag.\n"
LEAF_NODE	69:25	69:25	11	"Can't set ImageWidth tag.\n"
LEAF_NODE	69:54	69:54	9	)
LEAF_NODE	69:55	69:55	7	;
JUMP_STATEMENT	70:8	70:20	6	goto failure ;
KEYWORD	70:8	70:8	7	goto
LEAF_NODE	70:8	70:8	8	goto
DESTINATION	70:13	70:13	7	failure
LEAF_NODE	70:13	70:13	8	failure
LEAF_NODE	70:20	70:20	7	;
LEAF_NODE	71:4	71:4	5	}
SELECTION	72:4	72:57	3	
KEYWORD	72:4	72:4	4	if
LEAF_NODE	72:4	72:4	5	if
LEAF_NODE	72:7	72:7	4	(
CONDITION	72:8	72:8	4	! TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , length )
EXPR	72:8	72:8	5	! TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , length )
UNARY_EXPR	72:8	72:9	6	! TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , length )
UNARY_OPERATOR	72:8	72:8	7	!
LEAF_NODE	72:8	72:8	8	!
FUNCTION_CALL	72:9	72:54	7	TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , length )
CALLEE	72:9	72:9	8	TIFFSetField
LEAF_NODE	72:9	72:9	9	TIFFSetField
LEAF_NODE	72:21	72:21	8	(
ARGUMENT	72:22	72:22	8	tif
FIELD	72:22	72:22	9	tif
LEAF_NODE	72:22	72:22	10	tif
LEAF_NODE	72:25	72:25	8	,
ARGUMENT	72:27	72:27	8	TIFFTAG_IMAGELENGTH
FIELD	72:27	72:27	9	TIFFTAG_IMAGELENGTH
LEAF_NODE	72:27	72:27	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	72:46	72:46	8	,
ARGUMENT	72:48	72:48	8	length
FIELD	72:48	72:48	9	length
LEAF_NODE	72:48	72:48	10	length
LEAF_NODE	72:54	72:54	8	)
LEAF_NODE	72:55	72:55	4	)
STATEMENTS	72:57	75:4	4	
LEAF_NODE	72:57	72:57	5	{
STATEMENTS	73:8	74:8	5	
EXPR_STATEMENT	73:8	73:56	6	fprintf ( stderr , "Can't set ImageLength tag.\n" ) ;
EXPR	73:8	73:8	7	fprintf ( stderr , "Can't set ImageLength tag.\n" )
FUNCTION_CALL	73:8	73:55	8	fprintf ( stderr , "Can't set ImageLength tag.\n" )
CALLEE	73:8	73:8	9	fprintf
LEAF_NODE	73:8	73:8	10	fprintf
LEAF_NODE	73:16	73:16	9	(
ARGUMENT	73:17	73:17	9	stderr
FIELD	73:17	73:17	10	stderr
LEAF_NODE	73:17	73:17	11	stderr
LEAF_NODE	73:23	73:23	9	,
ARGUMENT	73:25	73:25	9	"Can't set ImageLength tag.\n"
FIELD	73:25	73:25	10	"Can't set ImageLength tag.\n"
LEAF_NODE	73:25	73:25	11	"Can't set ImageLength tag.\n"
LEAF_NODE	73:55	73:55	9	)
LEAF_NODE	73:56	73:56	7	;
JUMP_STATEMENT	74:8	74:20	6	goto failure ;
KEYWORD	74:8	74:8	7	goto
LEAF_NODE	74:8	74:8	8	goto
DESTINATION	74:13	74:13	7	failure
LEAF_NODE	74:13	74:13	8	failure
LEAF_NODE	74:20	74:20	7	;
LEAF_NODE	75:4	75:4	5	}
SELECTION	76:4	76:54	3	
KEYWORD	76:4	76:4	4	if
LEAF_NODE	76:4	76:4	5	if
LEAF_NODE	76:7	76:7	4	(
CONDITION	76:8	76:8	4	! TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
EXPR	76:8	76:8	5	! TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
UNARY_EXPR	76:8	76:9	6	! TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
UNARY_OPERATOR	76:8	76:8	7	!
LEAF_NODE	76:8	76:8	8	!
FUNCTION_CALL	76:9	76:51	7	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
CALLEE	76:9	76:9	8	TIFFSetField
LEAF_NODE	76:9	76:9	9	TIFFSetField
LEAF_NODE	76:21	76:21	8	(
ARGUMENT	76:22	76:22	8	tif
FIELD	76:22	76:22	9	tif
LEAF_NODE	76:22	76:22	10	tif
LEAF_NODE	76:25	76:25	8	,
ARGUMENT	76:27	76:27	8	TIFFTAG_BITSPERSAMPLE
FIELD	76:27	76:27	9	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	76:27	76:27	10	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	76:48	76:48	8	,
ARGUMENT	76:50	76:50	8	8
FIELD	76:50	76:50	9	8
LEAF_NODE	76:50	76:50	10	8
LEAF_NODE	76:51	76:51	8	)
LEAF_NODE	76:52	76:52	4	)
STATEMENTS	76:54	79:4	4	
LEAF_NODE	76:54	76:54	5	{
STATEMENTS	77:8	78:8	5	
EXPR_STATEMENT	77:8	77:58	6	fprintf ( stderr , "Can't set BitsPerSample tag.\n" ) ;
EXPR	77:8	77:8	7	fprintf ( stderr , "Can't set BitsPerSample tag.\n" )
FUNCTION_CALL	77:8	77:57	8	fprintf ( stderr , "Can't set BitsPerSample tag.\n" )
CALLEE	77:8	77:8	9	fprintf
LEAF_NODE	77:8	77:8	10	fprintf
LEAF_NODE	77:16	77:16	9	(
ARGUMENT	77:17	77:17	9	stderr
FIELD	77:17	77:17	10	stderr
LEAF_NODE	77:17	77:17	11	stderr
LEAF_NODE	77:23	77:23	9	,
ARGUMENT	77:25	77:25	9	"Can't set BitsPerSample tag.\n"
FIELD	77:25	77:25	10	"Can't set BitsPerSample tag.\n"
LEAF_NODE	77:25	77:25	11	"Can't set BitsPerSample tag.\n"
LEAF_NODE	77:57	77:57	9	)
LEAF_NODE	77:58	77:58	7	;
JUMP_STATEMENT	78:8	78:20	6	goto failure ;
KEYWORD	78:8	78:8	7	goto
LEAF_NODE	78:8	78:8	8	goto
DESTINATION	78:13	78:13	7	failure
LEAF_NODE	78:13	78:13	8	failure
LEAF_NODE	78:20	78:20	7	;
LEAF_NODE	79:4	79:4	5	}
SELECTION	80:4	80:56	3	
KEYWORD	80:4	80:4	4	if
LEAF_NODE	80:4	80:4	5	if
LEAF_NODE	80:7	80:7	4	(
CONDITION	80:8	80:8	4	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
EXPR	80:8	80:8	5	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
UNARY_EXPR	80:8	80:9	6	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
UNARY_OPERATOR	80:8	80:8	7	!
LEAF_NODE	80:8	80:8	8	!
FUNCTION_CALL	80:9	80:53	7	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	80:9	80:9	8	TIFFSetField
LEAF_NODE	80:9	80:9	9	TIFFSetField
LEAF_NODE	80:21	80:21	8	(
ARGUMENT	80:22	80:22	8	tif
FIELD	80:22	80:22	9	tif
LEAF_NODE	80:22	80:22	10	tif
LEAF_NODE	80:25	80:25	8	,
ARGUMENT	80:27	80:27	8	TIFFTAG_SAMPLESPERPIXEL
FIELD	80:27	80:27	9	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	80:27	80:27	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	80:50	80:50	8	,
ARGUMENT	80:52	80:52	8	1
FIELD	80:52	80:52	9	1
LEAF_NODE	80:52	80:52	10	1
LEAF_NODE	80:53	80:53	8	)
LEAF_NODE	80:54	80:54	4	)
STATEMENTS	80:56	83:4	4	
LEAF_NODE	80:56	80:56	5	{
STATEMENTS	81:8	82:8	5	
EXPR_STATEMENT	81:8	81:60	6	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" ) ;
EXPR	81:8	81:8	7	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" )
FUNCTION_CALL	81:8	81:59	8	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" )
CALLEE	81:8	81:8	9	fprintf
LEAF_NODE	81:8	81:8	10	fprintf
LEAF_NODE	81:16	81:16	9	(
ARGUMENT	81:17	81:17	9	stderr
FIELD	81:17	81:17	10	stderr
LEAF_NODE	81:17	81:17	11	stderr
LEAF_NODE	81:23	81:23	9	,
ARGUMENT	81:25	81:25	9	"Can't set SamplesPerPixel tag.\n"
FIELD	81:25	81:25	10	"Can't set SamplesPerPixel tag.\n"
LEAF_NODE	81:25	81:25	11	"Can't set SamplesPerPixel tag.\n"
LEAF_NODE	81:59	81:59	9	)
LEAF_NODE	81:60	81:60	7	;
JUMP_STATEMENT	82:8	82:20	6	goto failure ;
KEYWORD	82:8	82:8	7	goto
LEAF_NODE	82:8	82:8	8	goto
DESTINATION	82:13	82:13	7	failure
LEAF_NODE	82:13	82:13	8	failure
LEAF_NODE	82:20	82:20	7	;
LEAF_NODE	83:4	83:4	5	}
SELECTION	84:4	84:66	3	
KEYWORD	84:4	84:4	4	if
LEAF_NODE	84:4	84:4	5	if
LEAF_NODE	84:7	84:7	4	(
CONDITION	84:8	84:8	4	! TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rows_per_strip )
EXPR	84:8	84:8	5	! TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rows_per_strip )
UNARY_EXPR	84:8	84:9	6	! TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rows_per_strip )
UNARY_OPERATOR	84:8	84:8	7	!
LEAF_NODE	84:8	84:8	8	!
FUNCTION_CALL	84:9	84:63	7	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rows_per_strip )
CALLEE	84:9	84:9	8	TIFFSetField
LEAF_NODE	84:9	84:9	9	TIFFSetField
LEAF_NODE	84:21	84:21	8	(
ARGUMENT	84:22	84:22	8	tif
FIELD	84:22	84:22	9	tif
LEAF_NODE	84:22	84:22	10	tif
LEAF_NODE	84:25	84:25	8	,
ARGUMENT	84:27	84:27	8	TIFFTAG_ROWSPERSTRIP
FIELD	84:27	84:27	9	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	84:27	84:27	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	84:47	84:47	8	,
ARGUMENT	84:49	84:49	8	rows_per_strip
FIELD	84:49	84:49	9	rows_per_strip
LEAF_NODE	84:49	84:49	10	rows_per_strip
LEAF_NODE	84:63	84:63	8	)
LEAF_NODE	84:64	84:64	4	)
STATEMENTS	84:66	87:4	4	
LEAF_NODE	84:66	84:66	5	{
STATEMENTS	85:8	86:8	5	
EXPR_STATEMENT	85:8	85:60	6	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" ) ;
EXPR	85:8	85:8	7	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" )
FUNCTION_CALL	85:8	85:59	8	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" )
CALLEE	85:8	85:8	9	fprintf
LEAF_NODE	85:8	85:8	10	fprintf
LEAF_NODE	85:16	85:16	9	(
ARGUMENT	85:17	85:17	9	stderr
FIELD	85:17	85:17	10	stderr
LEAF_NODE	85:17	85:17	11	stderr
LEAF_NODE	85:23	85:23	9	,
ARGUMENT	85:25	85:25	9	"Can't set SamplesPerPixel tag.\n"
FIELD	85:25	85:25	10	"Can't set SamplesPerPixel tag.\n"
LEAF_NODE	85:25	85:25	11	"Can't set SamplesPerPixel tag.\n"
LEAF_NODE	85:59	85:59	9	)
LEAF_NODE	85:60	85:60	7	;
JUMP_STATEMENT	86:8	86:20	6	goto failure ;
KEYWORD	86:8	86:8	7	goto
LEAF_NODE	86:8	86:8	8	goto
DESTINATION	86:13	86:13	7	failure
LEAF_NODE	86:13	86:13	8	failure
LEAF_NODE	86:20	86:20	7	;
LEAF_NODE	87:4	87:4	5	}
SELECTION	88:4	88:71	3	
KEYWORD	88:4	88:4	4	if
LEAF_NODE	88:4	88:4	5	if
LEAF_NODE	88:7	88:7	4	(
CONDITION	88:8	88:8	4	! TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
EXPR	88:8	88:8	5	! TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
UNARY_EXPR	88:8	88:9	6	! TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
UNARY_OPERATOR	88:8	88:8	7	!
LEAF_NODE	88:8	88:8	8	!
FUNCTION_CALL	88:9	88:68	7	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	88:9	88:9	8	TIFFSetField
LEAF_NODE	88:9	88:9	9	TIFFSetField
LEAF_NODE	88:21	88:21	8	(
ARGUMENT	88:22	88:22	8	tif
FIELD	88:22	88:22	9	tif
LEAF_NODE	88:22	88:22	10	tif
LEAF_NODE	88:25	88:25	8	,
ARGUMENT	88:27	88:27	8	TIFFTAG_PLANARCONFIG
FIELD	88:27	88:27	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	88:27	88:27	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	88:47	88:47	8	,
ARGUMENT	88:49	88:49	8	PLANARCONFIG_CONTIG
FIELD	88:49	88:49	9	PLANARCONFIG_CONTIG
LEAF_NODE	88:49	88:49	10	PLANARCONFIG_CONTIG
LEAF_NODE	88:68	88:68	8	)
LEAF_NODE	88:69	88:69	4	)
STATEMENTS	88:71	91:4	4	
LEAF_NODE	88:71	88:71	5	{
STATEMENTS	89:8	90:8	5	
EXPR_STATEMENT	89:8	89:64	6	fprintf ( stderr , "Can't set PlanarConfiguration tag.\n" ) ;
EXPR	89:8	89:8	7	fprintf ( stderr , "Can't set PlanarConfiguration tag.\n" )
FUNCTION_CALL	89:8	89:63	8	fprintf ( stderr , "Can't set PlanarConfiguration tag.\n" )
CALLEE	89:8	89:8	9	fprintf
LEAF_NODE	89:8	89:8	10	fprintf
LEAF_NODE	89:16	89:16	9	(
ARGUMENT	89:17	89:17	9	stderr
FIELD	89:17	89:17	10	stderr
LEAF_NODE	89:17	89:17	11	stderr
LEAF_NODE	89:23	89:23	9	,
ARGUMENT	89:25	89:25	9	"Can't set PlanarConfiguration tag.\n"
FIELD	89:25	89:25	10	"Can't set PlanarConfiguration tag.\n"
LEAF_NODE	89:25	89:25	11	"Can't set PlanarConfiguration tag.\n"
LEAF_NODE	89:63	89:63	9	)
LEAF_NODE	89:64	89:64	7	;
JUMP_STATEMENT	90:8	90:20	6	goto failure ;
KEYWORD	90:8	90:8	7	goto
LEAF_NODE	90:8	90:8	8	goto
DESTINATION	90:13	90:13	7	failure
LEAF_NODE	90:13	90:13	8	failure
LEAF_NODE	90:20	90:20	7	;
LEAF_NODE	91:4	91:4	5	}
ITERATION	93:4	94:4	3	
KEYWORD	93:4	93:4	4	for
LEAF_NODE	93:4	93:4	5	for
LEAF_NODE	93:8	93:8	4	(
FOR_INIT	93:9	93:14	4	i = 0 ;
EXPR	93:9	93:9	5	i = 0
ASSIGN	93:9	93:13	6	i = 0
LVAL	93:9	93:9	7	i
FIELD	93:9	93:9	8	i
LEAF_NODE	93:9	93:9	9	i
ASSIGN_OP	93:11	93:11	7	=
LEAF_NODE	93:11	93:11	8	=
RVAL	93:13	93:13	7	0
FIELD	93:13	93:13	8	0
LEAF_NODE	93:13	93:13	9	0
LEAF_NODE	93:14	93:14	5	;
CONDITION	93:16	93:16	4	i < length
EXPR	93:16	93:20	5	i < length
FIELD	93:16	93:16	6	i
LEAF_NODE	93:16	93:16	7	i
REL_OPERATOR	93:18	93:18	6	<
LEAF_NODE	93:18	93:18	7	<
FIELD	93:20	93:20	6	length
LEAF_NODE	93:20	93:20	7	length
LEAF_NODE	93:26	93:26	4	;
FOR_EXPR	93:28	93:28	4	i ++
EXPR	93:28	93:28	5	i ++
FIELD	93:28	93:29	6	i ++
LEAF_NODE	93:28	93:28	7	i
LEAF_NODE	93:29	93:29	7	++
LEAF_NODE	93:32	93:32	4	)
STATEMENTS	94:4	100:4	4	
LEAF_NODE	94:4	94:4	5	{
STATEMENTS	95:8	95:8	5	
SELECTION	95:8	96:8	6	
KEYWORD	95:8	95:8	7	if
LEAF_NODE	95:8	95:8	8	if
LEAF_NODE	95:10	95:10	7	(
CONDITION	95:12	95:12	7	! TIFFWriteEncodedStrip ( tif , i , buf , 10 )
EXPR	95:12	95:12	8	! TIFFWriteEncodedStrip ( tif , i , buf , 10 )
UNARY_EXPR	95:12	95:13	9	! TIFFWriteEncodedStrip ( tif , i , buf , 10 )
UNARY_OPERATOR	95:12	95:12	10	!
LEAF_NODE	95:12	95:12	11	!
FUNCTION_CALL	95:13	95:52	10	TIFFWriteEncodedStrip ( tif , i , buf , 10 )
CALLEE	95:13	95:13	11	TIFFWriteEncodedStrip
LEAF_NODE	95:13	95:13	12	TIFFWriteEncodedStrip
LEAF_NODE	95:34	95:34	11	(
ARGUMENT	95:36	95:36	11	tif
FIELD	95:36	95:36	12	tif
LEAF_NODE	95:36	95:36	13	tif
LEAF_NODE	95:39	95:39	11	,
ARGUMENT	95:41	95:41	11	i
FIELD	95:41	95:41	12	i
LEAF_NODE	95:41	95:41	13	i
LEAF_NODE	95:42	95:42	11	,
ARGUMENT	95:44	95:44	11	buf
FIELD	95:44	95:44	12	buf
LEAF_NODE	95:44	95:44	13	buf
LEAF_NODE	95:47	95:47	11	,
ARGUMENT	95:49	95:49	11	10
FIELD	95:49	95:49	12	10
LEAF_NODE	95:49	95:49	13	10
LEAF_NODE	95:52	95:52	11	)
LEAF_NODE	95:54	95:54	7	)
STATEMENTS	96:8	99:8	7	
LEAF_NODE	96:8	96:8	8	{
STATEMENTS	97:12	98:12	8	
EXPR_STATEMENT	97:12	97:57	9	fprintf ( stderr , "Can't write image data.\n" ) ;
EXPR	97:12	97:12	10	fprintf ( stderr , "Can't write image data.\n" )
FUNCTION_CALL	97:12	97:56	11	fprintf ( stderr , "Can't write image data.\n" )
CALLEE	97:12	97:12	12	fprintf
LEAF_NODE	97:12	97:12	13	fprintf
LEAF_NODE	97:20	97:20	12	(
ARGUMENT	97:21	97:21	12	stderr
FIELD	97:21	97:21	13	stderr
LEAF_NODE	97:21	97:21	14	stderr
LEAF_NODE	97:27	97:27	12	,
ARGUMENT	97:29	97:29	12	"Can't write image data.\n"
FIELD	97:29	97:29	13	"Can't write image data.\n"
LEAF_NODE	97:29	97:29	14	"Can't write image data.\n"
LEAF_NODE	97:56	97:56	12	)
LEAF_NODE	97:57	97:57	10	;
JUMP_STATEMENT	98:12	98:24	9	goto failure ;
KEYWORD	98:12	98:12	10	goto
LEAF_NODE	98:12	98:12	11	goto
DESTINATION	98:17	98:17	10	failure
LEAF_NODE	98:17	98:17	11	failure
LEAF_NODE	98:24	98:24	10	;
LEAF_NODE	99:8	99:8	8	}
LEAF_NODE	100:4	100:4	5	}
EXPR_STATEMENT	102:4	102:18	3	TIFFClose ( tif ) ;
EXPR	102:4	102:4	4	TIFFClose ( tif )
FUNCTION_CALL	102:4	102:17	5	TIFFClose ( tif )
CALLEE	102:4	102:4	6	TIFFClose
LEAF_NODE	102:4	102:4	7	TIFFClose
LEAF_NODE	102:13	102:13	6	(
ARGUMENT	102:14	102:14	6	tif
FIELD	102:14	102:14	7	tif
LEAF_NODE	102:14	102:14	8	tif
LEAF_NODE	102:17	102:17	6	)
LEAF_NODE	102:18	102:18	4	;
EXPR_STATEMENT	106:4	106:34	3	tif = TIFFOpen ( filename , "r+" ) ;
EXPR	106:4	106:4	4	tif = TIFFOpen ( filename , "r+" )
ASSIGN	106:4	106:10	5	tif = TIFFOpen ( filename , "r+" )
LVAL	106:4	106:4	6	tif
FIELD	106:4	106:4	7	tif
LEAF_NODE	106:4	106:4	8	tif
ASSIGN_OP	106:8	106:8	6	=
LEAF_NODE	106:8	106:8	7	=
RVAL	106:10	106:10	6	TIFFOpen ( filename , "r+" )
FUNCTION_CALL	106:10	106:33	7	TIFFOpen ( filename , "r+" )
CALLEE	106:10	106:10	8	TIFFOpen
LEAF_NODE	106:10	106:10	9	TIFFOpen
LEAF_NODE	106:18	106:18	8	(
ARGUMENT	106:19	106:19	8	filename
FIELD	106:19	106:19	9	filename
LEAF_NODE	106:19	106:19	10	filename
LEAF_NODE	106:27	106:27	8	,
ARGUMENT	106:29	106:29	8	"r+"
FIELD	106:29	106:29	9	"r+"
LEAF_NODE	106:29	106:29	10	"r+"
LEAF_NODE	106:33	106:33	8	)
LEAF_NODE	106:34	106:34	4	;
SELECTION	108:4	108:14	3	
KEYWORD	108:4	108:4	4	if
LEAF_NODE	108:4	108:4	5	if
LEAF_NODE	108:7	108:7	4	(
CONDITION	108:8	108:8	4	! tif
EXPR	108:8	108:8	5	! tif
UNARY_EXPR	108:8	108:9	6	! tif
UNARY_OPERATOR	108:8	108:8	7	!
LEAF_NODE	108:8	108:8	8	!
FIELD	108:9	108:9	7	tif
LEAF_NODE	108:9	108:9	8	tif
LEAF_NODE	108:12	108:12	4	)
STATEMENTS	108:14	111:4	4	
LEAF_NODE	108:14	108:14	5	{
STATEMENTS	109:8	110:8	5	
EXPR_STATEMENT	109:8	109:71	6	fprintf ( stderr , "Can't create test TIFF file %s.\n" , filename ) ;
EXPR	109:8	109:8	7	fprintf ( stderr , "Can't create test TIFF file %s.\n" , filename )
FUNCTION_CALL	109:8	109:70	8	fprintf ( stderr , "Can't create test TIFF file %s.\n" , filename )
CALLEE	109:8	109:8	9	fprintf
LEAF_NODE	109:8	109:8	10	fprintf
LEAF_NODE	109:16	109:16	9	(
ARGUMENT	109:17	109:17	9	stderr
FIELD	109:17	109:17	10	stderr
LEAF_NODE	109:17	109:17	11	stderr
LEAF_NODE	109:23	109:23	9	,
ARGUMENT	109:25	109:25	9	"Can't create test TIFF file %s.\n"
FIELD	109:25	109:25	10	"Can't create test TIFF file %s.\n"
LEAF_NODE	109:25	109:25	11	"Can't create test TIFF file %s.\n"
LEAF_NODE	109:60	109:60	9	,
ARGUMENT	109:62	109:62	9	filename
FIELD	109:62	109:62	10	filename
LEAF_NODE	109:62	109:62	11	filename
LEAF_NODE	109:70	109:70	9	)
LEAF_NODE	109:71	109:71	7	;
JUMP_STATEMENT	110:8	110:16	6	return 1 ;
KEYWORD	110:8	110:8	7	return
LEAF_NODE	110:8	110:8	8	return
DESTINATION	110:15	110:15	7	1
EXPR	110:15	110:15	8	1
FIELD	110:15	110:15	9	1
LEAF_NODE	110:15	110:15	10	1
LEAF_NODE	110:16	110:16	7	;
LEAF_NODE	111:4	111:4	5	}
EXPR_STATEMENT	113:4	113:15	3	buf [ 3 ] = 17 ;
EXPR	113:4	113:4	4	buf [ 3 ] = 17
ASSIGN	113:4	113:13	5	buf [ 3 ] = 17
LVAL	113:4	113:4	6	buf [ 3 ]
FIELD	113:4	113:9	7	buf [ 3 ]
LEAF_NODE	113:4	113:4	8	buf
LEAF_NODE	113:7	113:7	8	[
EXPR	113:8	113:8	8	3
FIELD	113:8	113:8	9	3
LEAF_NODE	113:8	113:8	10	3
LEAF_NODE	113:9	113:9	8	]
ASSIGN_OP	113:11	113:11	6	=
LEAF_NODE	113:11	113:11	7	=
RVAL	113:13	113:13	6	17
FIELD	113:13	113:13	7	17
LEAF_NODE	113:13	113:13	8	17
LEAF_NODE	113:15	113:15	4	;
EXPR_STATEMENT	114:4	114:15	3	buf [ 6 ] = 12 ;
EXPR	114:4	114:4	4	buf [ 6 ] = 12
ASSIGN	114:4	114:13	5	buf [ 6 ] = 12
LVAL	114:4	114:4	6	buf [ 6 ]
FIELD	114:4	114:9	7	buf [ 6 ]
LEAF_NODE	114:4	114:4	8	buf
LEAF_NODE	114:7	114:7	8	[
EXPR	114:8	114:8	8	6
FIELD	114:8	114:8	9	6
LEAF_NODE	114:8	114:8	10	6
LEAF_NODE	114:9	114:9	8	]
ASSIGN_OP	114:11	114:11	6	=
LEAF_NODE	114:11	114:11	7	=
RVAL	114:13	114:13	6	12
FIELD	114:13	114:13	7	12
LEAF_NODE	114:13	114:13	8	12
LEAF_NODE	114:15	114:15	4	;
SELECTION	116:4	117:4	3	
KEYWORD	116:4	116:4	4	if
LEAF_NODE	116:4	116:4	5	if
LEAF_NODE	116:6	116:6	4	(
CONDITION	116:8	116:8	4	! TIFFWriteEncodedStrip ( tif , 6 , buf , 10 )
EXPR	116:8	116:8	5	! TIFFWriteEncodedStrip ( tif , 6 , buf , 10 )
UNARY_EXPR	116:8	116:9	6	! TIFFWriteEncodedStrip ( tif , 6 , buf , 10 )
UNARY_OPERATOR	116:8	116:8	7	!
LEAF_NODE	116:8	116:8	8	!
FUNCTION_CALL	116:9	116:48	7	TIFFWriteEncodedStrip ( tif , 6 , buf , 10 )
CALLEE	116:9	116:9	8	TIFFWriteEncodedStrip
LEAF_NODE	116:9	116:9	9	TIFFWriteEncodedStrip
LEAF_NODE	116:30	116:30	8	(
ARGUMENT	116:32	116:32	8	tif
FIELD	116:32	116:32	9	tif
LEAF_NODE	116:32	116:32	10	tif
LEAF_NODE	116:35	116:35	8	,
ARGUMENT	116:37	116:37	8	6
FIELD	116:37	116:37	9	6
LEAF_NODE	116:37	116:37	10	6
LEAF_NODE	116:38	116:38	8	,
ARGUMENT	116:40	116:40	8	buf
FIELD	116:40	116:40	9	buf
LEAF_NODE	116:40	116:40	10	buf
LEAF_NODE	116:43	116:43	8	,
ARGUMENT	116:45	116:45	8	10
FIELD	116:45	116:45	9	10
LEAF_NODE	116:45	116:45	10	10
LEAF_NODE	116:48	116:48	8	)
LEAF_NODE	116:50	116:50	4	)
STATEMENTS	117:4	120:4	4	
LEAF_NODE	117:4	117:4	5	{
STATEMENTS	118:8	119:8	5	
EXPR_STATEMENT	118:8	118:53	6	fprintf ( stderr , "Can't write image data.\n" ) ;
EXPR	118:8	118:8	7	fprintf ( stderr , "Can't write image data.\n" )
FUNCTION_CALL	118:8	118:52	8	fprintf ( stderr , "Can't write image data.\n" )
CALLEE	118:8	118:8	9	fprintf
LEAF_NODE	118:8	118:8	10	fprintf
LEAF_NODE	118:16	118:16	9	(
ARGUMENT	118:17	118:17	9	stderr
FIELD	118:17	118:17	10	stderr
LEAF_NODE	118:17	118:17	11	stderr
LEAF_NODE	118:23	118:23	9	,
ARGUMENT	118:25	118:25	9	"Can't write image data.\n"
FIELD	118:25	118:25	10	"Can't write image data.\n"
LEAF_NODE	118:25	118:25	11	"Can't write image data.\n"
LEAF_NODE	118:52	118:52	9	)
LEAF_NODE	118:53	118:53	7	;
JUMP_STATEMENT	119:8	119:20	6	goto failure ;
KEYWORD	119:8	119:8	7	goto
LEAF_NODE	119:8	119:8	8	goto
DESTINATION	119:13	119:13	7	failure
LEAF_NODE	119:13	119:13	8	failure
LEAF_NODE	119:20	119:20	7	;
LEAF_NODE	120:4	120:4	5	}
EXPR_STATEMENT	122:4	122:18	3	TIFFClose ( tif ) ;
EXPR	122:4	122:4	4	TIFFClose ( tif )
FUNCTION_CALL	122:4	122:17	5	TIFFClose ( tif )
CALLEE	122:4	122:4	6	TIFFClose
LEAF_NODE	122:4	122:4	7	TIFFClose
LEAF_NODE	122:13	122:13	6	(
ARGUMENT	122:14	122:14	6	tif
FIELD	122:14	122:14	7	tif
LEAF_NODE	122:14	122:14	8	tif
LEAF_NODE	122:17	122:17	6	)
LEAF_NODE	122:18	122:18	4	;
EXPR_STATEMENT	124:4	124:20	3	unlink ( filename ) ;
EXPR	124:4	124:4	4	unlink ( filename )
FUNCTION_CALL	124:4	124:19	5	unlink ( filename )
CALLEE	124:4	124:4	6	unlink
LEAF_NODE	124:4	124:4	7	unlink
LEAF_NODE	124:10	124:10	6	(
ARGUMENT	124:11	124:11	6	filename
FIELD	124:11	124:11	7	filename
LEAF_NODE	124:11	124:11	8	filename
LEAF_NODE	124:19	124:19	6	)
LEAF_NODE	124:20	124:20	4	;
JUMP_STATEMENT	126:4	126:12	3	return 0 ;
KEYWORD	126:4	126:4	4	return
LEAF_NODE	126:4	126:4	5	return
DESTINATION	126:11	126:11	4	0
EXPR	126:11	126:11	5	0
FIELD	126:11	126:11	6	0
LEAF_NODE	126:11	126:11	7	0
LEAF_NODE	126:12	126:12	4	;
LABEL	128:2	128:9	3	failure :
LEAF_NODE	128:2	128:2	4	failure
LEAF_NODE	128:9	128:9	4	:
EXPR_STATEMENT	130:4	130:18	3	TIFFClose ( tif ) ;
EXPR	130:4	130:4	4	TIFFClose ( tif )
FUNCTION_CALL	130:4	130:17	5	TIFFClose ( tif )
CALLEE	130:4	130:4	6	TIFFClose
LEAF_NODE	130:4	130:4	7	TIFFClose
LEAF_NODE	130:13	130:13	6	(
ARGUMENT	130:14	130:14	6	tif
FIELD	130:14	130:14	7	tif
LEAF_NODE	130:14	130:14	8	tif
LEAF_NODE	130:17	130:17	6	)
LEAF_NODE	130:18	130:18	4	;
JUMP_STATEMENT	133:4	133:12	3	return 1 ;
KEYWORD	133:4	133:4	4	return
LEAF_NODE	133:4	133:4	5	return
DESTINATION	133:11	133:11	4	1
EXPR	133:11	133:11	5	1
FIELD	133:11	133:11	6	1
LEAF_NODE	133:11	133:11	7	1
LEAF_NODE	133:12	133:12	4	;
LEAF_NODE	135:0	135:0	2	}
FUNCTION_DEF	140:0	324:0	1	
RETURN_TYPE	140:0	140:0	2	int
TYPE_NAME	140:0	140:0	3	int
LEAF_NODE	140:0	140:0	4	int
FUNCTION_NAME	140:4	140:4	2	rewrite_test
LEAF_NODE	140:4	140:4	3	rewrite_test
PARAMETER_LIST	140:16	141:36	2	( const char * filename , uint32 width , int length , int bigtiff , uint64 base_value )
LEAF_NODE	140:16	140:16	3	(
PARAMETER_DECL	140:18	140:30	3	const char * filename
TYPE	140:18	140:29	4	const char *
TYPE_NAME	140:18	140:24	5	const char
LEAF_NODE	140:18	140:18	6	const
LEAF_NODE	140:24	140:24	6	char
POINTER	140:29	140:29	5	*
LEAF_NODE	140:29	140:29	6	*
NAME	140:30	140:30	4	filename
LEAF_NODE	140:30	140:30	5	filename
LEAF_NODE	140:38	140:38	3	,
PARAMETER_DECL	140:40	140:47	3	uint32 width
TYPE	140:40	140:40	4	uint32
TYPE_NAME	140:40	140:40	5	uint32
LEAF_NODE	140:40	140:40	6	uint32
NAME	140:47	140:47	4	width
LEAF_NODE	140:47	140:47	5	width
LEAF_NODE	140:52	140:52	3	,
PARAMETER_DECL	140:54	140:58	3	int length
TYPE	140:54	140:54	4	int
TYPE_NAME	140:54	140:54	5	int
LEAF_NODE	140:54	140:54	6	int
NAME	140:58	140:58	4	length
LEAF_NODE	140:58	140:58	5	length
LEAF_NODE	140:64	140:64	3	,
PARAMETER_DECL	140:66	140:70	3	int bigtiff
TYPE	140:66	140:66	4	int
TYPE_NAME	140:66	140:66	5	int
LEAF_NODE	140:66	140:66	6	int
NAME	140:70	140:70	4	bigtiff
LEAF_NODE	140:70	140:70	5	bigtiff
LEAF_NODE	140:77	140:77	3	,
PARAMETER_DECL	141:18	141:25	3	uint64 base_value
TYPE	141:18	141:18	4	uint64
TYPE_NAME	141:18	141:18	5	uint64
LEAF_NODE	141:18	141:18	6	uint64
NAME	141:25	141:25	4	base_value
LEAF_NODE	141:25	141:25	5	base_value
LEAF_NODE	141:36	141:36	3	)
LEAF_NODE	143:0	143:0	2	{
STATEMENTS	144:4	322:4	2	
SIMPLE_DECL	144:4	144:14	3	TIFF * tif ;
VAR_DECL	144:4	144:11	4	TIFF * tif
TYPE	144:4	144:10	5	TIFF *
TYPE_NAME	144:4	144:4	6	TIFF
LEAF_NODE	144:4	144:4	7	TIFF
POINTER	144:10	144:10	6	*
LEAF_NODE	144:10	144:10	7	*
NAME	144:11	144:11	5	tif
LEAF_NODE	144:11	144:11	6	tif
LEAF_NODE	144:14	144:14	4	;
SIMPLE_DECL	145:4	145:11	3	int i ;
VAR_DECL	145:4	145:10	4	int i
TYPE	145:4	145:4	5	int
TYPE_NAME	145:4	145:4	6	int
LEAF_NODE	145:4	145:4	7	int
NAME	145:10	145:10	5	i
LEAF_NODE	145:10	145:10	6	i
LEAF_NODE	145:11	145:11	4	;
SIMPLE_DECL	146:4	146:22	3	unsigned char * buf ;
VAR_DECL	146:4	146:19	4	unsigned char * buf
TYPE	146:4	146:18	5	unsigned char *
TYPE_NAME	146:4	146:13	6	unsigned char
LEAF_NODE	146:4	146:4	7	unsigned
LEAF_NODE	146:13	146:13	7	char
POINTER	146:18	146:18	6	*
LEAF_NODE	146:18	146:18	7	*
NAME	146:19	146:19	5	buf
LEAF_NODE	146:19	146:19	6	buf
LEAF_NODE	146:22	146:22	4	;
SIMPLE_DECL	147:4	147:33	3	uint64 * rowoffset , uint64 * rowbytes ;
INIT_DECL_LIST	147:4	147:4	4	uint64 * rowoffset , uint64 * rowbytes
VAR_DECL	147:4	147:13	5	uint64 * rowoffset
TYPE	147:4	147:12	6	uint64 *
TYPE_NAME	147:4	147:4	7	uint64
LEAF_NODE	147:4	147:4	8	uint64
POINTER	147:12	147:12	7	*
LEAF_NODE	147:12	147:12	8	*
NAME	147:13	147:13	6	rowoffset
LEAF_NODE	147:13	147:13	7	rowoffset
LEAF_NODE	147:22	147:22	5	,
VAR_DECL	147:4	147:25	5	uint64 * rowbytes
TYPE	147:4	147:24	6	uint64 *
TYPE_NAME	147:4	147:4	7	uint64
LEAF_NODE	147:4	147:4	8	uint64
POINTER	147:24	147:24	7	*
LEAF_NODE	147:24	147:24	8	*
NAME	147:25	147:25	6	rowbytes
LEAF_NODE	147:25	147:25	7	rowbytes
LEAF_NODE	147:33	147:33	4	;
SIMPLE_DECL	148:4	148:26	3	uint64 * upd_rowoffset ;
VAR_DECL	148:4	148:13	4	uint64 * upd_rowoffset
TYPE	148:4	148:12	5	uint64 *
TYPE_NAME	148:4	148:4	6	uint64
LEAF_NODE	148:4	148:4	7	uint64
POINTER	148:12	148:12	6	*
LEAF_NODE	148:12	148:12	7	*
NAME	148:13	148:13	5	upd_rowoffset
LEAF_NODE	148:13	148:13	6	upd_rowoffset
LEAF_NODE	148:26	148:26	4	;
SIMPLE_DECL	149:4	149:26	3	uint64 * upd_bytecount ;
VAR_DECL	149:4	149:13	4	uint64 * upd_bytecount
TYPE	149:4	149:12	5	uint64 *
TYPE_NAME	149:4	149:4	6	uint64
LEAF_NODE	149:4	149:4	7	uint64
POINTER	149:12	149:12	6	*
LEAF_NODE	149:12	149:12	7	*
NAME	149:13	149:13	5	upd_bytecount
LEAF_NODE	149:13	149:13	6	upd_bytecount
LEAF_NODE	149:26	149:26	4	;
EXPR_STATEMENT	151:4	151:26	3	buf = calloc ( 1 , width ) ;
EXPR	151:4	151:4	4	buf = calloc ( 1 , width )
ASSIGN	151:4	151:10	5	buf = calloc ( 1 , width )
LVAL	151:4	151:4	6	buf
FIELD	151:4	151:4	7	buf
LEAF_NODE	151:4	151:4	8	buf
ASSIGN_OP	151:8	151:8	6	=
LEAF_NODE	151:8	151:8	7	=
RVAL	151:10	151:10	6	calloc ( 1 , width )
FUNCTION_CALL	151:10	151:25	7	calloc ( 1 , width )
CALLEE	151:10	151:10	8	calloc
LEAF_NODE	151:10	151:10	9	calloc
LEAF_NODE	151:16	151:16	8	(
ARGUMENT	151:17	151:17	8	1
FIELD	151:17	151:17	9	1
LEAF_NODE	151:17	151:17	10	1
LEAF_NODE	151:18	151:18	8	,
ARGUMENT	151:20	151:20	8	width
FIELD	151:20	151:20	9	width
LEAF_NODE	151:20	151:20	10	width
LEAF_NODE	151:25	151:25	8	)
LEAF_NODE	151:26	151:26	4	;
EXPR_STATEMENT	152:4	152:15	3	assert ( buf ) ;
EXPR	152:4	152:4	4	assert ( buf )
FUNCTION_CALL	152:4	152:14	5	assert ( buf )
CALLEE	152:4	152:4	6	assert
LEAF_NODE	152:4	152:4	7	assert
LEAF_NODE	152:10	152:10	6	(
ARGUMENT	152:11	152:11	6	buf
FIELD	152:11	152:11	7	buf
LEAF_NODE	152:11	152:11	8	buf
LEAF_NODE	152:14	152:14	6	)
LEAF_NODE	152:15	152:15	4	;
SELECTION	155:4	156:8	3	
KEYWORD	155:4	155:4	4	if
LEAF_NODE	155:4	155:4	5	if
LEAF_NODE	155:6	155:6	4	(
CONDITION	155:8	155:8	4	bigtiff
EXPR	155:8	155:8	5	bigtiff
FIELD	155:8	155:8	6	bigtiff
LEAF_NODE	155:8	155:8	7	bigtiff
LEAF_NODE	155:16	155:16	4	)
STATEMENTS	156:8	156:8	4	
EXPR_STATEMENT	156:8	156:38	5	tif = TIFFOpen ( filename , "w8" ) ;
EXPR	156:8	156:8	6	tif = TIFFOpen ( filename , "w8" )
ASSIGN	156:8	156:14	7	tif = TIFFOpen ( filename , "w8" )
LVAL	156:8	156:8	8	tif
FIELD	156:8	156:8	9	tif
LEAF_NODE	156:8	156:8	10	tif
ASSIGN_OP	156:12	156:12	8	=
LEAF_NODE	156:12	156:12	9	=
RVAL	156:14	156:14	8	TIFFOpen ( filename , "w8" )
FUNCTION_CALL	156:14	156:37	9	TIFFOpen ( filename , "w8" )
CALLEE	156:14	156:14	10	TIFFOpen
LEAF_NODE	156:14	156:14	11	TIFFOpen
LEAF_NODE	156:22	156:22	10	(
ARGUMENT	156:23	156:23	10	filename
FIELD	156:23	156:23	11	filename
LEAF_NODE	156:23	156:23	12	filename
LEAF_NODE	156:31	156:31	10	,
ARGUMENT	156:33	156:33	10	"w8"
FIELD	156:33	156:33	11	"w8"
LEAF_NODE	156:33	156:33	12	"w8"
LEAF_NODE	156:37	156:37	10	)
LEAF_NODE	156:38	156:38	6	;
SELECTION	157:4	158:8	3	
KEYWORD	157:4	157:4	4	else
LEAF_NODE	157:4	157:4	5	else
STATEMENTS	158:8	158:8	4	
EXPR_STATEMENT	158:8	158:38	5	tif = TIFFOpen ( filename , "w4" ) ;
EXPR	158:8	158:8	6	tif = TIFFOpen ( filename , "w4" )
ASSIGN	158:8	158:14	7	tif = TIFFOpen ( filename , "w4" )
LVAL	158:8	158:8	8	tif
FIELD	158:8	158:8	9	tif
LEAF_NODE	158:8	158:8	10	tif
ASSIGN_OP	158:12	158:12	8	=
LEAF_NODE	158:12	158:12	9	=
RVAL	158:14	158:14	8	TIFFOpen ( filename , "w4" )
FUNCTION_CALL	158:14	158:37	9	TIFFOpen ( filename , "w4" )
CALLEE	158:14	158:14	10	TIFFOpen
LEAF_NODE	158:14	158:14	11	TIFFOpen
LEAF_NODE	158:22	158:22	10	(
ARGUMENT	158:23	158:23	10	filename
FIELD	158:23	158:23	11	filename
LEAF_NODE	158:23	158:23	12	filename
LEAF_NODE	158:31	158:31	10	,
ARGUMENT	158:33	158:33	10	"w4"
FIELD	158:33	158:33	11	"w4"
LEAF_NODE	158:33	158:33	12	"w4"
LEAF_NODE	158:37	158:37	10	)
LEAF_NODE	158:38	158:38	6	;
SELECTION	160:4	160:14	3	
KEYWORD	160:4	160:4	4	if
LEAF_NODE	160:4	160:4	5	if
LEAF_NODE	160:7	160:7	4	(
CONDITION	160:8	160:8	4	! tif
EXPR	160:8	160:8	5	! tif
UNARY_EXPR	160:8	160:9	6	! tif
UNARY_OPERATOR	160:8	160:8	7	!
LEAF_NODE	160:8	160:8	8	!
FIELD	160:9	160:9	7	tif
LEAF_NODE	160:9	160:9	8	tif
LEAF_NODE	160:12	160:12	4	)
STATEMENTS	160:14	164:4	4	
LEAF_NODE	160:14	160:14	5	{
STATEMENTS	161:8	163:8	5	
EXPR_STATEMENT	161:8	161:71	6	fprintf ( stderr , "Can't create test TIFF file %s.\n" , filename ) ;
EXPR	161:8	161:8	7	fprintf ( stderr , "Can't create test TIFF file %s.\n" , filename )
FUNCTION_CALL	161:8	161:70	8	fprintf ( stderr , "Can't create test TIFF file %s.\n" , filename )
CALLEE	161:8	161:8	9	fprintf
LEAF_NODE	161:8	161:8	10	fprintf
LEAF_NODE	161:16	161:16	9	(
ARGUMENT	161:17	161:17	9	stderr
FIELD	161:17	161:17	10	stderr
LEAF_NODE	161:17	161:17	11	stderr
LEAF_NODE	161:23	161:23	9	,
ARGUMENT	161:25	161:25	9	"Can't create test TIFF file %s.\n"
FIELD	161:25	161:25	10	"Can't create test TIFF file %s.\n"
LEAF_NODE	161:25	161:25	11	"Can't create test TIFF file %s.\n"
LEAF_NODE	161:60	161:60	9	,
ARGUMENT	161:62	161:62	9	filename
FIELD	161:62	161:62	10	filename
LEAF_NODE	161:62	161:62	11	filename
LEAF_NODE	161:70	161:70	9	)
LEAF_NODE	161:71	161:71	7	;
EXPR_STATEMENT	162:8	162:17	6	free ( buf ) ;
EXPR	162:8	162:8	7	free ( buf )
FUNCTION_CALL	162:8	162:16	8	free ( buf )
CALLEE	162:8	162:8	9	free
LEAF_NODE	162:8	162:8	10	free
LEAF_NODE	162:12	162:12	9	(
ARGUMENT	162:13	162:13	9	buf
FIELD	162:13	162:13	10	buf
LEAF_NODE	162:13	162:13	11	buf
LEAF_NODE	162:16	162:16	9	)
LEAF_NODE	162:17	162:17	7	;
JUMP_STATEMENT	163:8	163:16	6	return 1 ;
KEYWORD	163:8	163:8	7	return
LEAF_NODE	163:8	163:8	8	return
DESTINATION	163:15	163:15	7	1
EXPR	163:15	163:15	8	1
FIELD	163:15	163:15	9	1
LEAF_NODE	163:15	163:15	10	1
LEAF_NODE	163:16	163:16	7	;
LEAF_NODE	164:4	164:4	5	}
SELECTION	166:4	166:71	3	
KEYWORD	166:4	166:4	4	if
LEAF_NODE	166:4	166:4	5	if
LEAF_NODE	166:7	166:7	4	(
CONDITION	166:8	166:8	4	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS )
EXPR	166:8	166:8	5	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS )
UNARY_EXPR	166:8	166:9	6	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS )
UNARY_OPERATOR	166:8	166:8	7	!
LEAF_NODE	166:8	166:8	8	!
FUNCTION_CALL	166:9	166:68	7	TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS )
CALLEE	166:9	166:9	8	TIFFSetField
LEAF_NODE	166:9	166:9	9	TIFFSetField
LEAF_NODE	166:21	166:21	8	(
ARGUMENT	166:22	166:22	8	tif
FIELD	166:22	166:22	9	tif
LEAF_NODE	166:22	166:22	10	tif
LEAF_NODE	166:25	166:25	8	,
ARGUMENT	166:27	166:27	8	TIFFTAG_COMPRESSION
FIELD	166:27	166:27	9	TIFFTAG_COMPRESSION
LEAF_NODE	166:27	166:27	10	TIFFTAG_COMPRESSION
LEAF_NODE	166:46	166:46	8	,
ARGUMENT	166:48	166:48	8	COMPRESSION_PACKBITS
FIELD	166:48	166:48	9	COMPRESSION_PACKBITS
LEAF_NODE	166:48	166:48	10	COMPRESSION_PACKBITS
LEAF_NODE	166:68	166:68	8	)
LEAF_NODE	166:69	166:69	4	)
STATEMENTS	166:71	169:4	4	
LEAF_NODE	166:71	166:71	5	{
STATEMENTS	167:8	168:8	5	
EXPR_STATEMENT	167:8	167:56	6	fprintf ( stderr , "Can't set Compression tag.\n" ) ;
EXPR	167:8	167:8	7	fprintf ( stderr , "Can't set Compression tag.\n" )
FUNCTION_CALL	167:8	167:55	8	fprintf ( stderr , "Can't set Compression tag.\n" )
CALLEE	167:8	167:8	9	fprintf
LEAF_NODE	167:8	167:8	10	fprintf
LEAF_NODE	167:16	167:16	9	(
ARGUMENT	167:17	167:17	9	stderr
FIELD	167:17	167:17	10	stderr
LEAF_NODE	167:17	167:17	11	stderr
LEAF_NODE	167:23	167:23	9	,
ARGUMENT	167:25	167:25	9	"Can't set Compression tag.\n"
FIELD	167:25	167:25	10	"Can't set Compression tag.\n"
LEAF_NODE	167:25	167:25	11	"Can't set Compression tag.\n"
LEAF_NODE	167:55	167:55	9	)
LEAF_NODE	167:56	167:56	7	;
JUMP_STATEMENT	168:8	168:20	6	goto failure ;
KEYWORD	168:8	168:8	7	goto
LEAF_NODE	168:8	168:8	8	goto
DESTINATION	168:13	168:13	7	failure
LEAF_NODE	168:13	168:13	8	failure
LEAF_NODE	168:20	168:20	7	;
LEAF_NODE	169:4	169:4	5	}
SELECTION	170:4	170:55	3	
KEYWORD	170:4	170:4	4	if
LEAF_NODE	170:4	170:4	5	if
LEAF_NODE	170:7	170:7	4	(
CONDITION	170:8	170:8	4	! TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , width )
EXPR	170:8	170:8	5	! TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , width )
UNARY_EXPR	170:8	170:9	6	! TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , width )
UNARY_OPERATOR	170:8	170:8	7	!
LEAF_NODE	170:8	170:8	8	!
FUNCTION_CALL	170:9	170:52	7	TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , width )
CALLEE	170:9	170:9	8	TIFFSetField
LEAF_NODE	170:9	170:9	9	TIFFSetField
LEAF_NODE	170:21	170:21	8	(
ARGUMENT	170:22	170:22	8	tif
FIELD	170:22	170:22	9	tif
LEAF_NODE	170:22	170:22	10	tif
LEAF_NODE	170:25	170:25	8	,
ARGUMENT	170:27	170:27	8	TIFFTAG_IMAGEWIDTH
FIELD	170:27	170:27	9	TIFFTAG_IMAGEWIDTH
LEAF_NODE	170:27	170:27	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	170:45	170:45	8	,
ARGUMENT	170:47	170:47	8	width
FIELD	170:47	170:47	9	width
LEAF_NODE	170:47	170:47	10	width
LEAF_NODE	170:52	170:52	8	)
LEAF_NODE	170:53	170:53	4	)
STATEMENTS	170:55	173:4	4	
LEAF_NODE	170:55	170:55	5	{
STATEMENTS	171:8	172:8	5	
EXPR_STATEMENT	171:8	171:55	6	fprintf ( stderr , "Can't set ImageWidth tag.\n" ) ;
EXPR	171:8	171:8	7	fprintf ( stderr , "Can't set ImageWidth tag.\n" )
FUNCTION_CALL	171:8	171:54	8	fprintf ( stderr , "Can't set ImageWidth tag.\n" )
CALLEE	171:8	171:8	9	fprintf
LEAF_NODE	171:8	171:8	10	fprintf
LEAF_NODE	171:16	171:16	9	(
ARGUMENT	171:17	171:17	9	stderr
FIELD	171:17	171:17	10	stderr
LEAF_NODE	171:17	171:17	11	stderr
LEAF_NODE	171:23	171:23	9	,
ARGUMENT	171:25	171:25	9	"Can't set ImageWidth tag.\n"
FIELD	171:25	171:25	10	"Can't set ImageWidth tag.\n"
LEAF_NODE	171:25	171:25	11	"Can't set ImageWidth tag.\n"
LEAF_NODE	171:54	171:54	9	)
LEAF_NODE	171:55	171:55	7	;
JUMP_STATEMENT	172:8	172:20	6	goto failure ;
KEYWORD	172:8	172:8	7	goto
LEAF_NODE	172:8	172:8	8	goto
DESTINATION	172:13	172:13	7	failure
LEAF_NODE	172:13	172:13	8	failure
LEAF_NODE	172:20	172:20	7	;
LEAF_NODE	173:4	173:4	5	}
SELECTION	174:4	174:57	3	
KEYWORD	174:4	174:4	4	if
LEAF_NODE	174:4	174:4	5	if
LEAF_NODE	174:7	174:7	4	(
CONDITION	174:8	174:8	4	! TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , length )
EXPR	174:8	174:8	5	! TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , length )
UNARY_EXPR	174:8	174:9	6	! TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , length )
UNARY_OPERATOR	174:8	174:8	7	!
LEAF_NODE	174:8	174:8	8	!
FUNCTION_CALL	174:9	174:54	7	TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , length )
CALLEE	174:9	174:9	8	TIFFSetField
LEAF_NODE	174:9	174:9	9	TIFFSetField
LEAF_NODE	174:21	174:21	8	(
ARGUMENT	174:22	174:22	8	tif
FIELD	174:22	174:22	9	tif
LEAF_NODE	174:22	174:22	10	tif
LEAF_NODE	174:25	174:25	8	,
ARGUMENT	174:27	174:27	8	TIFFTAG_IMAGELENGTH
FIELD	174:27	174:27	9	TIFFTAG_IMAGELENGTH
LEAF_NODE	174:27	174:27	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	174:46	174:46	8	,
ARGUMENT	174:48	174:48	8	length
FIELD	174:48	174:48	9	length
LEAF_NODE	174:48	174:48	10	length
LEAF_NODE	174:54	174:54	8	)
LEAF_NODE	174:55	174:55	4	)
STATEMENTS	174:57	177:4	4	
LEAF_NODE	174:57	174:57	5	{
STATEMENTS	175:8	176:8	5	
EXPR_STATEMENT	175:8	175:56	6	fprintf ( stderr , "Can't set ImageLength tag.\n" ) ;
EXPR	175:8	175:8	7	fprintf ( stderr , "Can't set ImageLength tag.\n" )
FUNCTION_CALL	175:8	175:55	8	fprintf ( stderr , "Can't set ImageLength tag.\n" )
CALLEE	175:8	175:8	9	fprintf
LEAF_NODE	175:8	175:8	10	fprintf
LEAF_NODE	175:16	175:16	9	(
ARGUMENT	175:17	175:17	9	stderr
FIELD	175:17	175:17	10	stderr
LEAF_NODE	175:17	175:17	11	stderr
LEAF_NODE	175:23	175:23	9	,
ARGUMENT	175:25	175:25	9	"Can't set ImageLength tag.\n"
FIELD	175:25	175:25	10	"Can't set ImageLength tag.\n"
LEAF_NODE	175:25	175:25	11	"Can't set ImageLength tag.\n"
LEAF_NODE	175:55	175:55	9	)
LEAF_NODE	175:56	175:56	7	;
JUMP_STATEMENT	176:8	176:20	6	goto failure ;
KEYWORD	176:8	176:8	7	goto
LEAF_NODE	176:8	176:8	8	goto
DESTINATION	176:13	176:13	7	failure
LEAF_NODE	176:13	176:13	8	failure
LEAF_NODE	176:20	176:20	7	;
LEAF_NODE	177:4	177:4	5	}
SELECTION	178:4	178:54	3	
KEYWORD	178:4	178:4	4	if
LEAF_NODE	178:4	178:4	5	if
LEAF_NODE	178:7	178:7	4	(
CONDITION	178:8	178:8	4	! TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
EXPR	178:8	178:8	5	! TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
UNARY_EXPR	178:8	178:9	6	! TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
UNARY_OPERATOR	178:8	178:8	7	!
LEAF_NODE	178:8	178:8	8	!
FUNCTION_CALL	178:9	178:51	7	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
CALLEE	178:9	178:9	8	TIFFSetField
LEAF_NODE	178:9	178:9	9	TIFFSetField
LEAF_NODE	178:21	178:21	8	(
ARGUMENT	178:22	178:22	8	tif
FIELD	178:22	178:22	9	tif
LEAF_NODE	178:22	178:22	10	tif
LEAF_NODE	178:25	178:25	8	,
ARGUMENT	178:27	178:27	8	TIFFTAG_BITSPERSAMPLE
FIELD	178:27	178:27	9	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	178:27	178:27	10	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	178:48	178:48	8	,
ARGUMENT	178:50	178:50	8	8
FIELD	178:50	178:50	9	8
LEAF_NODE	178:50	178:50	10	8
LEAF_NODE	178:51	178:51	8	)
LEAF_NODE	178:52	178:52	4	)
STATEMENTS	178:54	181:4	4	
LEAF_NODE	178:54	178:54	5	{
STATEMENTS	179:8	180:8	5	
EXPR_STATEMENT	179:8	179:58	6	fprintf ( stderr , "Can't set BitsPerSample tag.\n" ) ;
EXPR	179:8	179:8	7	fprintf ( stderr , "Can't set BitsPerSample tag.\n" )
FUNCTION_CALL	179:8	179:57	8	fprintf ( stderr , "Can't set BitsPerSample tag.\n" )
CALLEE	179:8	179:8	9	fprintf
LEAF_NODE	179:8	179:8	10	fprintf
LEAF_NODE	179:16	179:16	9	(
ARGUMENT	179:17	179:17	9	stderr
FIELD	179:17	179:17	10	stderr
LEAF_NODE	179:17	179:17	11	stderr
LEAF_NODE	179:23	179:23	9	,
ARGUMENT	179:25	179:25	9	"Can't set BitsPerSample tag.\n"
FIELD	179:25	179:25	10	"Can't set BitsPerSample tag.\n"
LEAF_NODE	179:25	179:25	11	"Can't set BitsPerSample tag.\n"
LEAF_NODE	179:57	179:57	9	)
LEAF_NODE	179:58	179:58	7	;
JUMP_STATEMENT	180:8	180:20	6	goto failure ;
KEYWORD	180:8	180:8	7	goto
LEAF_NODE	180:8	180:8	8	goto
DESTINATION	180:13	180:13	7	failure
LEAF_NODE	180:13	180:13	8	failure
LEAF_NODE	180:20	180:20	7	;
LEAF_NODE	181:4	181:4	5	}
SELECTION	182:4	182:56	3	
KEYWORD	182:4	182:4	4	if
LEAF_NODE	182:4	182:4	5	if
LEAF_NODE	182:7	182:7	4	(
CONDITION	182:8	182:8	4	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
EXPR	182:8	182:8	5	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
UNARY_EXPR	182:8	182:9	6	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
UNARY_OPERATOR	182:8	182:8	7	!
LEAF_NODE	182:8	182:8	8	!
FUNCTION_CALL	182:9	182:53	7	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	182:9	182:9	8	TIFFSetField
LEAF_NODE	182:9	182:9	9	TIFFSetField
LEAF_NODE	182:21	182:21	8	(
ARGUMENT	182:22	182:22	8	tif
FIELD	182:22	182:22	9	tif
LEAF_NODE	182:22	182:22	10	tif
LEAF_NODE	182:25	182:25	8	,
ARGUMENT	182:27	182:27	8	TIFFTAG_SAMPLESPERPIXEL
FIELD	182:27	182:27	9	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	182:27	182:27	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	182:50	182:50	8	,
ARGUMENT	182:52	182:52	8	1
FIELD	182:52	182:52	9	1
LEAF_NODE	182:52	182:52	10	1
LEAF_NODE	182:53	182:53	8	)
LEAF_NODE	182:54	182:54	4	)
STATEMENTS	182:56	185:4	4	
LEAF_NODE	182:56	182:56	5	{
STATEMENTS	183:8	184:8	5	
EXPR_STATEMENT	183:8	183:60	6	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" ) ;
EXPR	183:8	183:8	7	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" )
FUNCTION_CALL	183:8	183:59	8	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" )
CALLEE	183:8	183:8	9	fprintf
LEAF_NODE	183:8	183:8	10	fprintf
LEAF_NODE	183:16	183:16	9	(
ARGUMENT	183:17	183:17	9	stderr
FIELD	183:17	183:17	10	stderr
LEAF_NODE	183:17	183:17	11	stderr
LEAF_NODE	183:23	183:23	9	,
ARGUMENT	183:25	183:25	9	"Can't set SamplesPerPixel tag.\n"
FIELD	183:25	183:25	10	"Can't set SamplesPerPixel tag.\n"
LEAF_NODE	183:25	183:25	11	"Can't set SamplesPerPixel tag.\n"
LEAF_NODE	183:59	183:59	9	)
LEAF_NODE	183:60	183:60	7	;
JUMP_STATEMENT	184:8	184:20	6	goto failure ;
KEYWORD	184:8	184:8	7	goto
LEAF_NODE	184:8	184:8	8	goto
DESTINATION	184:13	184:13	7	failure
LEAF_NODE	184:13	184:13	8	failure
LEAF_NODE	184:20	184:20	7	;
LEAF_NODE	185:4	185:4	5	}
SELECTION	186:4	186:66	3	
KEYWORD	186:4	186:4	4	if
LEAF_NODE	186:4	186:4	5	if
LEAF_NODE	186:7	186:7	4	(
CONDITION	186:8	186:8	4	! TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rows_per_strip )
EXPR	186:8	186:8	5	! TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rows_per_strip )
UNARY_EXPR	186:8	186:9	6	! TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rows_per_strip )
UNARY_OPERATOR	186:8	186:8	7	!
LEAF_NODE	186:8	186:8	8	!
FUNCTION_CALL	186:9	186:63	7	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rows_per_strip )
CALLEE	186:9	186:9	8	TIFFSetField
LEAF_NODE	186:9	186:9	9	TIFFSetField
LEAF_NODE	186:21	186:21	8	(
ARGUMENT	186:22	186:22	8	tif
FIELD	186:22	186:22	9	tif
LEAF_NODE	186:22	186:22	10	tif
LEAF_NODE	186:25	186:25	8	,
ARGUMENT	186:27	186:27	8	TIFFTAG_ROWSPERSTRIP
FIELD	186:27	186:27	9	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	186:27	186:27	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	186:47	186:47	8	,
ARGUMENT	186:49	186:49	8	rows_per_strip
FIELD	186:49	186:49	9	rows_per_strip
LEAF_NODE	186:49	186:49	10	rows_per_strip
LEAF_NODE	186:63	186:63	8	)
LEAF_NODE	186:64	186:64	4	)
STATEMENTS	186:66	189:4	4	
LEAF_NODE	186:66	186:66	5	{
STATEMENTS	187:8	188:8	5	
EXPR_STATEMENT	187:8	187:60	6	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" ) ;
EXPR	187:8	187:8	7	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" )
FUNCTION_CALL	187:8	187:59	8	fprintf ( stderr , "Can't set SamplesPerPixel tag.\n" )
CALLEE	187:8	187:8	9	fprintf
LEAF_NODE	187:8	187:8	10	fprintf
LEAF_NODE	187:16	187:16	9	(
ARGUMENT	187:17	187:17	9	stderr
FIELD	187:17	187:17	10	stderr
LEAF_NODE	187:17	187:17	11	stderr
LEAF_NODE	187:23	187:23	9	,
ARGUMENT	187:25	187:25	9	"Can't set SamplesPerPixel tag.\n"
FIELD	187:25	187:25	10	"Can't set SamplesPerPixel tag.\n"
LEAF_NODE	187:25	187:25	11	"Can't set SamplesPerPixel tag.\n"
LEAF_NODE	187:59	187:59	9	)
LEAF_NODE	187:60	187:60	7	;
JUMP_STATEMENT	188:8	188:20	6	goto failure ;
KEYWORD	188:8	188:8	7	goto
LEAF_NODE	188:8	188:8	8	goto
DESTINATION	188:13	188:13	7	failure
LEAF_NODE	188:13	188:13	8	failure
LEAF_NODE	188:20	188:20	7	;
LEAF_NODE	189:4	189:4	5	}
SELECTION	190:4	190:71	3	
KEYWORD	190:4	190:4	4	if
LEAF_NODE	190:4	190:4	5	if
LEAF_NODE	190:7	190:7	4	(
CONDITION	190:8	190:8	4	! TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
EXPR	190:8	190:8	5	! TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
UNARY_EXPR	190:8	190:9	6	! TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
UNARY_OPERATOR	190:8	190:8	7	!
LEAF_NODE	190:8	190:8	8	!
FUNCTION_CALL	190:9	190:68	7	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	190:9	190:9	8	TIFFSetField
LEAF_NODE	190:9	190:9	9	TIFFSetField
LEAF_NODE	190:21	190:21	8	(
ARGUMENT	190:22	190:22	8	tif
FIELD	190:22	190:22	9	tif
LEAF_NODE	190:22	190:22	10	tif
LEAF_NODE	190:25	190:25	8	,
ARGUMENT	190:27	190:27	8	TIFFTAG_PLANARCONFIG
FIELD	190:27	190:27	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	190:27	190:27	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	190:47	190:47	8	,
ARGUMENT	190:49	190:49	8	PLANARCONFIG_CONTIG
FIELD	190:49	190:49	9	PLANARCONFIG_CONTIG
LEAF_NODE	190:49	190:49	10	PLANARCONFIG_CONTIG
LEAF_NODE	190:68	190:68	8	)
LEAF_NODE	190:69	190:69	4	)
STATEMENTS	190:71	193:4	4	
LEAF_NODE	190:71	190:71	5	{
STATEMENTS	191:8	192:8	5	
EXPR_STATEMENT	191:8	191:64	6	fprintf ( stderr , "Can't set PlanarConfiguration tag.\n" ) ;
EXPR	191:8	191:8	7	fprintf ( stderr , "Can't set PlanarConfiguration tag.\n" )
FUNCTION_CALL	191:8	191:63	8	fprintf ( stderr , "Can't set PlanarConfiguration tag.\n" )
CALLEE	191:8	191:8	9	fprintf
LEAF_NODE	191:8	191:8	10	fprintf
LEAF_NODE	191:16	191:16	9	(
ARGUMENT	191:17	191:17	9	stderr
FIELD	191:17	191:17	10	stderr
LEAF_NODE	191:17	191:17	11	stderr
LEAF_NODE	191:23	191:23	9	,
ARGUMENT	191:25	191:25	9	"Can't set PlanarConfiguration tag.\n"
FIELD	191:25	191:25	10	"Can't set PlanarConfiguration tag.\n"
LEAF_NODE	191:25	191:25	11	"Can't set PlanarConfiguration tag.\n"
LEAF_NODE	191:63	191:63	9	)
LEAF_NODE	191:64	191:64	7	;
JUMP_STATEMENT	192:8	192:20	6	goto failure ;
KEYWORD	192:8	192:8	7	goto
LEAF_NODE	192:8	192:8	8	goto
DESTINATION	192:13	192:13	7	failure
LEAF_NODE	192:13	192:13	8	failure
LEAF_NODE	192:20	192:20	7	;
LEAF_NODE	193:4	193:4	5	}
ITERATION	195:4	196:4	3	
KEYWORD	195:4	195:4	4	for
LEAF_NODE	195:4	195:4	5	for
LEAF_NODE	195:8	195:8	4	(
FOR_INIT	195:9	195:14	4	i = 0 ;
EXPR	195:9	195:9	5	i = 0
ASSIGN	195:9	195:13	6	i = 0
LVAL	195:9	195:9	7	i
FIELD	195:9	195:9	8	i
LEAF_NODE	195:9	195:9	9	i
ASSIGN_OP	195:11	195:11	7	=
LEAF_NODE	195:11	195:11	8	=
RVAL	195:13	195:13	7	0
FIELD	195:13	195:13	8	0
LEAF_NODE	195:13	195:13	9	0
LEAF_NODE	195:14	195:14	5	;
CONDITION	195:16	195:16	4	i < length
EXPR	195:16	195:20	5	i < length
FIELD	195:16	195:16	6	i
LEAF_NODE	195:16	195:16	7	i
REL_OPERATOR	195:18	195:18	6	<
LEAF_NODE	195:18	195:18	7	<
FIELD	195:20	195:20	6	length
LEAF_NODE	195:20	195:20	7	length
LEAF_NODE	195:26	195:26	4	;
FOR_EXPR	195:28	195:28	4	i ++
EXPR	195:28	195:28	5	i ++
FIELD	195:28	195:29	6	i ++
LEAF_NODE	195:28	195:28	7	i
LEAF_NODE	195:29	195:29	7	++
LEAF_NODE	195:32	195:32	4	)
STATEMENTS	196:4	202:4	4	
LEAF_NODE	196:4	196:4	5	{
STATEMENTS	197:8	197:8	5	
SELECTION	197:8	198:8	6	
KEYWORD	197:8	197:8	7	if
LEAF_NODE	197:8	197:8	8	if
LEAF_NODE	197:10	197:10	7	(
CONDITION	197:12	197:12	7	TIFFWriteScanline ( tif , buf , i , 0 ) == - 1
EXPR	197:12	197:51	8	TIFFWriteScanline ( tif , buf , i , 0 ) == - 1
FUNCTION_CALL	197:12	197:46	9	TIFFWriteScanline ( tif , buf , i , 0 )
CALLEE	197:12	197:12	10	TIFFWriteScanline
LEAF_NODE	197:12	197:12	11	TIFFWriteScanline
LEAF_NODE	197:29	197:29	10	(
ARGUMENT	197:31	197:31	10	tif
FIELD	197:31	197:31	11	tif
LEAF_NODE	197:31	197:31	12	tif
LEAF_NODE	197:34	197:34	10	,
ARGUMENT	197:36	197:36	10	buf
FIELD	197:36	197:36	11	buf
LEAF_NODE	197:36	197:36	12	buf
LEAF_NODE	197:39	197:39	10	,
ARGUMENT	197:41	197:41	10	i
FIELD	197:41	197:41	11	i
LEAF_NODE	197:41	197:41	12	i
LEAF_NODE	197:42	197:42	10	,
ARGUMENT	197:44	197:44	10	0
FIELD	197:44	197:44	11	0
LEAF_NODE	197:44	197:44	12	0
LEAF_NODE	197:46	197:46	10	)
EQ_OPERATOR	197:48	197:48	9	==
LEAF_NODE	197:48	197:48	10	==
UNARY_EXPR	197:51	197:52	9	- 1
UNARY_OPERATOR	197:51	197:51	10	-
LEAF_NODE	197:51	197:51	11	-
FIELD	197:52	197:52	10	1
LEAF_NODE	197:52	197:52	11	1
LEAF_NODE	197:54	197:54	7	)
STATEMENTS	198:8	201:8	7	
LEAF_NODE	198:8	198:8	8	{
STATEMENTS	199:12	200:12	8	
EXPR_STATEMENT	199:12	199:57	9	fprintf ( stderr , "Can't write image data.\n" ) ;
EXPR	199:12	199:12	10	fprintf ( stderr , "Can't write image data.\n" )
FUNCTION_CALL	199:12	199:56	11	fprintf ( stderr , "Can't write image data.\n" )
CALLEE	199:12	199:12	12	fprintf
LEAF_NODE	199:12	199:12	13	fprintf
LEAF_NODE	199:20	199:20	12	(
ARGUMENT	199:21	199:21	12	stderr
FIELD	199:21	199:21	13	stderr
LEAF_NODE	199:21	199:21	14	stderr
LEAF_NODE	199:27	199:27	12	,
ARGUMENT	199:29	199:29	12	"Can't write image data.\n"
FIELD	199:29	199:29	13	"Can't write image data.\n"
LEAF_NODE	199:29	199:29	14	"Can't write image data.\n"
LEAF_NODE	199:56	199:56	12	)
LEAF_NODE	199:57	199:57	10	;
JUMP_STATEMENT	200:12	200:24	9	goto failure ;
KEYWORD	200:12	200:12	10	goto
LEAF_NODE	200:12	200:12	11	goto
DESTINATION	200:17	200:17	10	failure
LEAF_NODE	200:17	200:17	11	failure
LEAF_NODE	200:24	200:24	10	;
LEAF_NODE	201:8	201:8	8	}
LEAF_NODE	202:4	202:4	5	}
EXPR_STATEMENT	204:4	204:18	3	TIFFClose ( tif ) ;
EXPR	204:4	204:4	4	TIFFClose ( tif )
FUNCTION_CALL	204:4	204:17	5	TIFFClose ( tif )
CALLEE	204:4	204:4	6	TIFFClose
LEAF_NODE	204:4	204:4	7	TIFFClose
LEAF_NODE	204:13	204:13	6	(
ARGUMENT	204:14	204:14	6	tif
FIELD	204:14	204:14	7	tif
LEAF_NODE	204:14	204:14	8	tif
LEAF_NODE	204:17	204:17	6	)
LEAF_NODE	204:18	204:18	4	;
EXPR_STATEMENT	207:4	207:34	3	tif = TIFFOpen ( filename , "r+" ) ;
EXPR	207:4	207:4	4	tif = TIFFOpen ( filename , "r+" )
ASSIGN	207:4	207:10	5	tif = TIFFOpen ( filename , "r+" )
LVAL	207:4	207:4	6	tif
FIELD	207:4	207:4	7	tif
LEAF_NODE	207:4	207:4	8	tif
ASSIGN_OP	207:8	207:8	6	=
LEAF_NODE	207:8	207:8	7	=
RVAL	207:10	207:10	6	TIFFOpen ( filename , "r+" )
FUNCTION_CALL	207:10	207:33	7	TIFFOpen ( filename , "r+" )
CALLEE	207:10	207:10	8	TIFFOpen
LEAF_NODE	207:10	207:10	9	TIFFOpen
LEAF_NODE	207:18	207:18	8	(
ARGUMENT	207:19	207:19	8	filename
FIELD	207:19	207:19	9	filename
LEAF_NODE	207:19	207:19	10	filename
LEAF_NODE	207:27	207:27	8	,
ARGUMENT	207:29	207:29	8	"r+"
FIELD	207:29	207:29	9	"r+"
LEAF_NODE	207:29	207:29	10	"r+"
LEAF_NODE	207:33	207:33	8	)
LEAF_NODE	207:34	207:34	4	;
SELECTION	208:4	208:14	3	
KEYWORD	208:4	208:4	4	if
LEAF_NODE	208:4	208:4	5	if
LEAF_NODE	208:7	208:7	4	(
CONDITION	208:8	208:8	4	! tif
EXPR	208:8	208:8	5	! tif
UNARY_EXPR	208:8	208:9	6	! tif
UNARY_OPERATOR	208:8	208:8	7	!
LEAF_NODE	208:8	208:8	8	!
FIELD	208:9	208:9	7	tif
LEAF_NODE	208:9	208:9	8	tif
LEAF_NODE	208:12	208:12	4	)
STATEMENTS	208:14	212:4	4	
LEAF_NODE	208:14	208:14	5	{
STATEMENTS	209:8	211:8	5	
EXPR_STATEMENT	209:8	209:69	6	fprintf ( stderr , "Can't open test TIFF file %s.\n" , filename ) ;
EXPR	209:8	209:8	7	fprintf ( stderr , "Can't open test TIFF file %s.\n" , filename )
FUNCTION_CALL	209:8	209:68	8	fprintf ( stderr , "Can't open test TIFF file %s.\n" , filename )
CALLEE	209:8	209:8	9	fprintf
LEAF_NODE	209:8	209:8	10	fprintf
LEAF_NODE	209:16	209:16	9	(
ARGUMENT	209:17	209:17	9	stderr
FIELD	209:17	209:17	10	stderr
LEAF_NODE	209:17	209:17	11	stderr
LEAF_NODE	209:23	209:23	9	,
ARGUMENT	209:25	209:25	9	"Can't open test TIFF file %s.\n"
FIELD	209:25	209:25	10	"Can't open test TIFF file %s.\n"
LEAF_NODE	209:25	209:25	11	"Can't open test TIFF file %s.\n"
LEAF_NODE	209:58	209:58	9	,
ARGUMENT	209:60	209:60	9	filename
FIELD	209:60	209:60	10	filename
LEAF_NODE	209:60	209:60	11	filename
LEAF_NODE	209:68	209:68	9	)
LEAF_NODE	209:69	209:69	7	;
EXPR_STATEMENT	210:8	210:17	6	free ( buf ) ;
EXPR	210:8	210:8	7	free ( buf )
FUNCTION_CALL	210:8	210:16	8	free ( buf )
CALLEE	210:8	210:8	9	free
LEAF_NODE	210:8	210:8	10	free
LEAF_NODE	210:12	210:12	9	(
ARGUMENT	210:13	210:13	9	buf
FIELD	210:13	210:13	10	buf
LEAF_NODE	210:13	210:13	11	buf
LEAF_NODE	210:16	210:16	9	)
LEAF_NODE	210:17	210:17	7	;
JUMP_STATEMENT	211:8	211:16	6	return 1 ;
KEYWORD	211:8	211:8	7	return
LEAF_NODE	211:8	211:8	8	return
DESTINATION	211:15	211:15	7	1
EXPR	211:15	211:15	8	1
FIELD	211:15	211:15	9	1
LEAF_NODE	211:15	211:15	10	1
LEAF_NODE	211:16	211:16	7	;
LEAF_NODE	212:4	212:4	5	}
SELECTION	214:4	215:4	3	
KEYWORD	214:4	214:4	4	if
LEAF_NODE	214:4	214:4	5	if
LEAF_NODE	214:6	214:6	4	(
CONDITION	214:8	214:8	4	! TIFFGetField ( tif , TIFFTAG_STRIPOFFSETS , & rowoffset )
EXPR	214:8	214:8	5	! TIFFGetField ( tif , TIFFTAG_STRIPOFFSETS , & rowoffset )
UNARY_EXPR	214:8	214:9	6	! TIFFGetField ( tif , TIFFTAG_STRIPOFFSETS , & rowoffset )
UNARY_OPERATOR	214:8	214:8	7	!
LEAF_NODE	214:8	214:8	8	!
FUNCTION_CALL	214:9	214:61	7	TIFFGetField ( tif , TIFFTAG_STRIPOFFSETS , & rowoffset )
CALLEE	214:9	214:9	8	TIFFGetField
LEAF_NODE	214:9	214:9	9	TIFFGetField
LEAF_NODE	214:21	214:21	8	(
ARGUMENT	214:23	214:23	8	tif
FIELD	214:23	214:23	9	tif
LEAF_NODE	214:23	214:23	10	tif
LEAF_NODE	214:26	214:26	8	,
ARGUMENT	214:28	214:28	8	TIFFTAG_STRIPOFFSETS
FIELD	214:28	214:28	9	TIFFTAG_STRIPOFFSETS
LEAF_NODE	214:28	214:28	10	TIFFTAG_STRIPOFFSETS
LEAF_NODE	214:48	214:48	8	,
ARGUMENT	214:50	214:50	8	& rowoffset
UNARY_EXPR	214:50	214:51	9	& rowoffset
UNARY_OPERATOR	214:50	214:50	10	&
LEAF_NODE	214:50	214:50	11	&
FIELD	214:51	214:51	10	rowoffset
LEAF_NODE	214:51	214:51	11	rowoffset
LEAF_NODE	214:61	214:61	8	)
LEAF_NODE	214:63	214:63	4	)
STATEMENTS	215:4	218:4	4	
LEAF_NODE	215:4	215:4	5	{
STATEMENTS	216:8	217:8	5	
EXPR_STATEMENT	216:8	216:55	6	fprintf ( stderr , "Can't fetch STRIPOFFSETS.\n" ) ;
EXPR	216:8	216:8	7	fprintf ( stderr , "Can't fetch STRIPOFFSETS.\n" )
FUNCTION_CALL	216:8	216:54	8	fprintf ( stderr , "Can't fetch STRIPOFFSETS.\n" )
CALLEE	216:8	216:8	9	fprintf
LEAF_NODE	216:8	216:8	10	fprintf
LEAF_NODE	216:16	216:16	9	(
ARGUMENT	216:17	216:17	9	stderr
FIELD	216:17	216:17	10	stderr
LEAF_NODE	216:17	216:17	11	stderr
LEAF_NODE	216:23	216:23	9	,
ARGUMENT	216:25	216:25	9	"Can't fetch STRIPOFFSETS.\n"
FIELD	216:25	216:25	10	"Can't fetch STRIPOFFSETS.\n"
LEAF_NODE	216:25	216:25	11	"Can't fetch STRIPOFFSETS.\n"
LEAF_NODE	216:54	216:54	9	)
LEAF_NODE	216:55	216:55	7	;
JUMP_STATEMENT	217:8	217:20	6	goto failure ;
KEYWORD	217:8	217:8	7	goto
LEAF_NODE	217:8	217:8	8	goto
DESTINATION	217:13	217:13	7	failure
LEAF_NODE	217:13	217:13	8	failure
LEAF_NODE	217:20	217:20	7	;
LEAF_NODE	218:4	218:4	5	}
SELECTION	220:4	221:4	3	
KEYWORD	220:4	220:4	4	if
LEAF_NODE	220:4	220:4	5	if
LEAF_NODE	220:6	220:6	4	(
CONDITION	220:8	220:8	4	! TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & rowbytes )
EXPR	220:8	220:8	5	! TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & rowbytes )
UNARY_EXPR	220:8	220:9	6	! TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & rowbytes )
UNARY_OPERATOR	220:8	220:8	7	!
LEAF_NODE	220:8	220:8	8	!
FUNCTION_CALL	220:9	220:63	7	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & rowbytes )
CALLEE	220:9	220:9	8	TIFFGetField
LEAF_NODE	220:9	220:9	9	TIFFGetField
LEAF_NODE	220:21	220:21	8	(
ARGUMENT	220:23	220:23	8	tif
FIELD	220:23	220:23	9	tif
LEAF_NODE	220:23	220:23	10	tif
LEAF_NODE	220:26	220:26	8	,
ARGUMENT	220:28	220:28	8	TIFFTAG_STRIPBYTECOUNTS
FIELD	220:28	220:28	9	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	220:28	220:28	10	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	220:51	220:51	8	,
ARGUMENT	220:53	220:53	8	& rowbytes
UNARY_EXPR	220:53	220:54	9	& rowbytes
UNARY_OPERATOR	220:53	220:53	10	&
LEAF_NODE	220:53	220:53	11	&
FIELD	220:54	220:54	10	rowbytes
LEAF_NODE	220:54	220:54	11	rowbytes
LEAF_NODE	220:63	220:63	8	)
LEAF_NODE	220:65	220:65	4	)
STATEMENTS	221:4	224:4	4	
LEAF_NODE	221:4	221:4	5	{
STATEMENTS	222:8	223:8	5	
EXPR_STATEMENT	222:8	222:58	6	fprintf ( stderr , "Can't fetch STRIPBYTECOUNTS.\n" ) ;
EXPR	222:8	222:8	7	fprintf ( stderr , "Can't fetch STRIPBYTECOUNTS.\n" )
FUNCTION_CALL	222:8	222:57	8	fprintf ( stderr , "Can't fetch STRIPBYTECOUNTS.\n" )
CALLEE	222:8	222:8	9	fprintf
LEAF_NODE	222:8	222:8	10	fprintf
LEAF_NODE	222:16	222:16	9	(
ARGUMENT	222:17	222:17	9	stderr
FIELD	222:17	222:17	10	stderr
LEAF_NODE	222:17	222:17	11	stderr
LEAF_NODE	222:23	222:23	9	,
ARGUMENT	222:25	222:25	9	"Can't fetch STRIPBYTECOUNTS.\n"
FIELD	222:25	222:25	10	"Can't fetch STRIPBYTECOUNTS.\n"
LEAF_NODE	222:25	222:25	11	"Can't fetch STRIPBYTECOUNTS.\n"
LEAF_NODE	222:57	222:57	9	)
LEAF_NODE	222:58	222:58	7	;
JUMP_STATEMENT	223:8	223:20	6	goto failure ;
KEYWORD	223:8	223:8	7	goto
LEAF_NODE	223:8	223:8	8	goto
DESTINATION	223:13	223:13	7	failure
LEAF_NODE	223:13	223:13	8	failure
LEAF_NODE	223:20	223:20	7	;
LEAF_NODE	224:4	224:4	5	}
EXPR_STATEMENT	226:4	226:67	3	upd_rowoffset = ( uint64 * ) _TIFFmalloc ( sizeof ( uint64 ) * length ) ;
EXPR	226:4	226:4	4	upd_rowoffset = ( uint64 * ) _TIFFmalloc ( sizeof ( uint64 ) * length )
ASSIGN	226:4	226:20	5	upd_rowoffset = ( uint64 * ) _TIFFmalloc ( sizeof ( uint64 ) * length )
LVAL	226:4	226:4	6	upd_rowoffset
FIELD	226:4	226:4	7	upd_rowoffset
LEAF_NODE	226:4	226:4	8	upd_rowoffset
ASSIGN_OP	226:18	226:18	6	=
LEAF_NODE	226:18	226:18	7	=
RVAL	226:20	226:31	6	( uint64 * ) _TIFFmalloc ( sizeof ( uint64 ) * length )
LEAF_NODE	226:20	226:20	7	(
TYPE_NAME	226:21	226:21	7	uint64
LEAF_NODE	226:21	226:21	8	uint64
LEAF_NODE	226:28	226:28	7	*
LEAF_NODE	226:29	226:29	7	)
FUNCTION_CALL	226:31	226:66	7	_TIFFmalloc ( sizeof ( uint64 ) * length )
CALLEE	226:31	226:31	8	_TIFFmalloc
LEAF_NODE	226:31	226:31	9	_TIFFmalloc
LEAF_NODE	226:42	226:42	8	(
ARGUMENT	226:43	226:60	8	sizeof ( uint64 ) * length
FUNCTION_CALL	226:43	226:56	9	sizeof ( uint64 )
CALLEE	226:43	226:43	10	sizeof
LEAF_NODE	226:43	226:43	11	sizeof
LEAF_NODE	226:49	226:49	10	(
ARGUMENT	226:50	226:50	10	uint64
FIELD	226:50	226:50	11	uint64
LEAF_NODE	226:50	226:50	12	uint64
LEAF_NODE	226:56	226:56	10	)
LEAF_NODE	226:58	226:58	9	*
FIELD	226:60	226:60	9	length
LEAF_NODE	226:60	226:60	10	length
LEAF_NODE	226:66	226:66	8	)
LEAF_NODE	226:67	226:67	4	;
ITERATION	227:4	228:8	3	
KEYWORD	227:4	227:4	4	for
LEAF_NODE	227:4	227:4	5	for
LEAF_NODE	227:7	227:7	4	(
FOR_INIT	227:9	227:14	4	i = 0 ;
EXPR	227:9	227:9	5	i = 0
ASSIGN	227:9	227:13	6	i = 0
LVAL	227:9	227:9	7	i
FIELD	227:9	227:9	8	i
LEAF_NODE	227:9	227:9	9	i
ASSIGN_OP	227:11	227:11	7	=
LEAF_NODE	227:11	227:11	8	=
RVAL	227:13	227:13	7	0
FIELD	227:13	227:13	8	0
LEAF_NODE	227:13	227:13	9	0
LEAF_NODE	227:14	227:14	5	;
CONDITION	227:16	227:16	4	i < length
EXPR	227:16	227:20	5	i < length
FIELD	227:16	227:16	6	i
LEAF_NODE	227:16	227:16	7	i
REL_OPERATOR	227:18	227:18	6	<
LEAF_NODE	227:18	227:18	7	<
FIELD	227:20	227:20	6	length
LEAF_NODE	227:20	227:20	7	length
LEAF_NODE	227:26	227:26	4	;
FOR_EXPR	227:28	227:28	4	i ++
EXPR	227:28	227:28	5	i ++
FIELD	227:28	227:29	6	i ++
LEAF_NODE	227:28	227:28	7	i
LEAF_NODE	227:29	227:29	7	++
LEAF_NODE	227:32	227:32	4	)
STATEMENTS	228:8	228:8	4	
EXPR_STATEMENT	228:8	228:47	5	upd_rowoffset [ i ] = base_value + i * width ;
EXPR	228:8	228:8	6	upd_rowoffset [ i ] = base_value + i * width
ASSIGN	228:8	228:27	7	upd_rowoffset [ i ] = base_value + i * width
LVAL	228:8	228:8	8	upd_rowoffset [ i ]
FIELD	228:8	228:23	9	upd_rowoffset [ i ]
LEAF_NODE	228:8	228:8	10	upd_rowoffset
LEAF_NODE	228:21	228:21	10	[
EXPR	228:22	228:22	10	i
FIELD	228:22	228:22	11	i
LEAF_NODE	228:22	228:22	12	i
LEAF_NODE	228:23	228:23	10	]
ASSIGN_OP	228:25	228:25	8	=
LEAF_NODE	228:25	228:25	9	=
RVAL	228:27	228:42	8	base_value + i * width
FIELD	228:27	228:27	9	base_value
LEAF_NODE	228:27	228:27	10	base_value
LEAF_NODE	228:38	228:38	9	+
FIELD	228:40	228:40	9	i
LEAF_NODE	228:40	228:40	10	i
LEAF_NODE	228:41	228:41	9	*
FIELD	228:42	228:42	9	width
LEAF_NODE	228:42	228:42	10	width
LEAF_NODE	228:47	228:47	6	;
SELECTION	230:4	232:4	3	
KEYWORD	230:4	230:4	4	if
LEAF_NODE	230:4	230:4	5	if
LEAF_NODE	230:6	230:6	4	(
CONDITION	230:8	230:8	4	! _TIFFRewriteField ( tif , TIFFTAG_STRIPOFFSETS , TIFF_LONG8 , length , upd_rowoffset )
EXPR	230:8	230:8	5	! _TIFFRewriteField ( tif , TIFFTAG_STRIPOFFSETS , TIFF_LONG8 , length , upd_rowoffset )
UNARY_EXPR	230:8	230:9	6	! _TIFFRewriteField ( tif , TIFFTAG_STRIPOFFSETS , TIFF_LONG8 , length , upd_rowoffset )
UNARY_OPERATOR	230:8	230:8	7	!
LEAF_NODE	230:8	230:8	8	!
FUNCTION_CALL	230:9	231:50	7	_TIFFRewriteField ( tif , TIFFTAG_STRIPOFFSETS , TIFF_LONG8 , length , upd_rowoffset )
CALLEE	230:9	230:9	8	_TIFFRewriteField
LEAF_NODE	230:9	230:9	9	_TIFFRewriteField
LEAF_NODE	230:26	230:26	8	(
ARGUMENT	230:28	230:28	8	tif
FIELD	230:28	230:28	9	tif
LEAF_NODE	230:28	230:28	10	tif
LEAF_NODE	230:31	230:31	8	,
ARGUMENT	230:33	230:33	8	TIFFTAG_STRIPOFFSETS
FIELD	230:33	230:33	9	TIFFTAG_STRIPOFFSETS
LEAF_NODE	230:33	230:33	10	TIFFTAG_STRIPOFFSETS
LEAF_NODE	230:53	230:53	8	,
ARGUMENT	230:55	230:55	8	TIFF_LONG8
FIELD	230:55	230:55	9	TIFF_LONG8
LEAF_NODE	230:55	230:55	10	TIFF_LONG8
LEAF_NODE	230:65	230:65	8	,
ARGUMENT	231:28	231:28	8	length
FIELD	231:28	231:28	9	length
LEAF_NODE	231:28	231:28	10	length
LEAF_NODE	231:34	231:34	8	,
ARGUMENT	231:36	231:36	8	upd_rowoffset
FIELD	231:36	231:36	9	upd_rowoffset
LEAF_NODE	231:36	231:36	10	upd_rowoffset
LEAF_NODE	231:50	231:50	8	)
LEAF_NODE	231:52	231:52	4	)
STATEMENTS	232:4	235:4	4	
LEAF_NODE	232:4	232:4	5	{
STATEMENTS	233:8	234:8	5	
EXPR_STATEMENT	233:8	233:57	6	fprintf ( stderr , "Can't rewrite STRIPOFFSETS.\n" ) ;
EXPR	233:8	233:8	7	fprintf ( stderr , "Can't rewrite STRIPOFFSETS.\n" )
FUNCTION_CALL	233:8	233:56	8	fprintf ( stderr , "Can't rewrite STRIPOFFSETS.\n" )
CALLEE	233:8	233:8	9	fprintf
LEAF_NODE	233:8	233:8	10	fprintf
LEAF_NODE	233:16	233:16	9	(
ARGUMENT	233:17	233:17	9	stderr
FIELD	233:17	233:17	10	stderr
LEAF_NODE	233:17	233:17	11	stderr
LEAF_NODE	233:23	233:23	9	,
ARGUMENT	233:25	233:25	9	"Can't rewrite STRIPOFFSETS.\n"
FIELD	233:25	233:25	10	"Can't rewrite STRIPOFFSETS.\n"
LEAF_NODE	233:25	233:25	11	"Can't rewrite STRIPOFFSETS.\n"
LEAF_NODE	233:56	233:56	9	)
LEAF_NODE	233:57	233:57	7	;
JUMP_STATEMENT	234:8	234:20	6	goto failure ;
KEYWORD	234:8	234:8	7	goto
LEAF_NODE	234:8	234:8	8	goto
DESTINATION	234:13	234:13	7	failure
LEAF_NODE	234:13	234:13	8	failure
LEAF_NODE	234:20	234:20	7	;
LEAF_NODE	235:4	235:4	5	}
EXPR_STATEMENT	237:4	237:30	3	_TIFFfree ( upd_rowoffset ) ;
EXPR	237:4	237:4	4	_TIFFfree ( upd_rowoffset )
FUNCTION_CALL	237:4	237:29	5	_TIFFfree ( upd_rowoffset )
CALLEE	237:4	237:4	6	_TIFFfree
LEAF_NODE	237:4	237:4	7	_TIFFfree
LEAF_NODE	237:13	237:13	6	(
ARGUMENT	237:15	237:15	6	upd_rowoffset
FIELD	237:15	237:15	7	upd_rowoffset
LEAF_NODE	237:15	237:15	8	upd_rowoffset
LEAF_NODE	237:29	237:29	6	)
LEAF_NODE	237:30	237:30	4	;
EXPR_STATEMENT	239:4	239:67	3	upd_bytecount = ( uint64 * ) _TIFFmalloc ( sizeof ( uint64 ) * length ) ;
EXPR	239:4	239:4	4	upd_bytecount = ( uint64 * ) _TIFFmalloc ( sizeof ( uint64 ) * length )
ASSIGN	239:4	239:20	5	upd_bytecount = ( uint64 * ) _TIFFmalloc ( sizeof ( uint64 ) * length )
LVAL	239:4	239:4	6	upd_bytecount
FIELD	239:4	239:4	7	upd_bytecount
LEAF_NODE	239:4	239:4	8	upd_bytecount
ASSIGN_OP	239:18	239:18	6	=
LEAF_NODE	239:18	239:18	7	=
RVAL	239:20	239:31	6	( uint64 * ) _TIFFmalloc ( sizeof ( uint64 ) * length )
LEAF_NODE	239:20	239:20	7	(
TYPE_NAME	239:21	239:21	7	uint64
LEAF_NODE	239:21	239:21	8	uint64
LEAF_NODE	239:28	239:28	7	*
LEAF_NODE	239:29	239:29	7	)
FUNCTION_CALL	239:31	239:66	7	_TIFFmalloc ( sizeof ( uint64 ) * length )
CALLEE	239:31	239:31	8	_TIFFmalloc
LEAF_NODE	239:31	239:31	9	_TIFFmalloc
LEAF_NODE	239:42	239:42	8	(
ARGUMENT	239:43	239:60	8	sizeof ( uint64 ) * length
FUNCTION_CALL	239:43	239:56	9	sizeof ( uint64 )
CALLEE	239:43	239:43	10	sizeof
LEAF_NODE	239:43	239:43	11	sizeof
LEAF_NODE	239:49	239:49	10	(
ARGUMENT	239:50	239:50	10	uint64
FIELD	239:50	239:50	11	uint64
LEAF_NODE	239:50	239:50	12	uint64
LEAF_NODE	239:56	239:56	10	)
LEAF_NODE	239:58	239:58	9	*
FIELD	239:60	239:60	9	length
LEAF_NODE	239:60	239:60	10	length
LEAF_NODE	239:66	239:66	8	)
LEAF_NODE	239:67	239:67	4	;
ITERATION	240:4	241:8	3	
KEYWORD	240:4	240:4	4	for
LEAF_NODE	240:4	240:4	5	for
LEAF_NODE	240:7	240:7	4	(
FOR_INIT	240:9	240:14	4	i = 0 ;
EXPR	240:9	240:9	5	i = 0
ASSIGN	240:9	240:13	6	i = 0
LVAL	240:9	240:9	7	i
FIELD	240:9	240:9	8	i
LEAF_NODE	240:9	240:9	9	i
ASSIGN_OP	240:11	240:11	7	=
LEAF_NODE	240:11	240:11	8	=
RVAL	240:13	240:13	7	0
FIELD	240:13	240:13	8	0
LEAF_NODE	240:13	240:13	9	0
LEAF_NODE	240:14	240:14	5	;
CONDITION	240:16	240:16	4	i < length
EXPR	240:16	240:20	5	i < length
FIELD	240:16	240:16	6	i
LEAF_NODE	240:16	240:16	7	i
REL_OPERATOR	240:18	240:18	6	<
LEAF_NODE	240:18	240:18	7	<
FIELD	240:20	240:20	6	length
LEAF_NODE	240:20	240:20	7	length
LEAF_NODE	240:26	240:26	4	;
FOR_EXPR	240:28	240:28	4	i ++
EXPR	240:28	240:28	5	i ++
FIELD	240:28	240:29	6	i ++
LEAF_NODE	240:28	240:28	7	i
LEAF_NODE	240:29	240:29	7	++
LEAF_NODE	240:32	240:32	4	)
STATEMENTS	241:8	241:8	4	
EXPR_STATEMENT	241:8	241:40	5	upd_bytecount [ i ] = 100 + i * width ;
EXPR	241:8	241:8	6	upd_bytecount [ i ] = 100 + i * width
ASSIGN	241:8	241:27	7	upd_bytecount [ i ] = 100 + i * width
LVAL	241:8	241:8	8	upd_bytecount [ i ]
FIELD	241:8	241:23	9	upd_bytecount [ i ]
LEAF_NODE	241:8	241:8	10	upd_bytecount
LEAF_NODE	241:21	241:21	10	[
EXPR	241:22	241:22	10	i
FIELD	241:22	241:22	11	i
LEAF_NODE	241:22	241:22	12	i
LEAF_NODE	241:23	241:23	10	]
ASSIGN_OP	241:25	241:25	8	=
LEAF_NODE	241:25	241:25	9	=
RVAL	241:27	241:35	8	100 + i * width
FIELD	241:27	241:27	9	100
LEAF_NODE	241:27	241:27	10	100
LEAF_NODE	241:31	241:31	9	+
FIELD	241:33	241:33	9	i
LEAF_NODE	241:33	241:33	10	i
LEAF_NODE	241:34	241:34	9	*
FIELD	241:35	241:35	9	width
LEAF_NODE	241:35	241:35	10	width
LEAF_NODE	241:40	241:40	6	;
SELECTION	243:4	245:4	3	
KEYWORD	243:4	243:4	4	if
LEAF_NODE	243:4	243:4	5	if
LEAF_NODE	243:6	243:6	4	(
CONDITION	243:8	243:8	4	! _TIFFRewriteField ( tif , TIFFTAG_STRIPBYTECOUNTS , TIFF_LONG8 , length , upd_bytecount )
EXPR	243:8	243:8	5	! _TIFFRewriteField ( tif , TIFFTAG_STRIPBYTECOUNTS , TIFF_LONG8 , length , upd_bytecount )
UNARY_EXPR	243:8	243:9	6	! _TIFFRewriteField ( tif , TIFFTAG_STRIPBYTECOUNTS , TIFF_LONG8 , length , upd_bytecount )
UNARY_OPERATOR	243:8	243:8	7	!
LEAF_NODE	243:8	243:8	8	!
FUNCTION_CALL	243:9	244:50	7	_TIFFRewriteField ( tif , TIFFTAG_STRIPBYTECOUNTS , TIFF_LONG8 , length , upd_bytecount )
CALLEE	243:9	243:9	8	_TIFFRewriteField
LEAF_NODE	243:9	243:9	9	_TIFFRewriteField
LEAF_NODE	243:26	243:26	8	(
ARGUMENT	243:28	243:28	8	tif
FIELD	243:28	243:28	9	tif
LEAF_NODE	243:28	243:28	10	tif
LEAF_NODE	243:31	243:31	8	,
ARGUMENT	243:33	243:33	8	TIFFTAG_STRIPBYTECOUNTS
FIELD	243:33	243:33	9	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	243:33	243:33	10	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	243:56	243:56	8	,
ARGUMENT	243:58	243:58	8	TIFF_LONG8
FIELD	243:58	243:58	9	TIFF_LONG8
LEAF_NODE	243:58	243:58	10	TIFF_LONG8
LEAF_NODE	243:68	243:68	8	,
ARGUMENT	244:28	244:28	8	length
FIELD	244:28	244:28	9	length
LEAF_NODE	244:28	244:28	10	length
LEAF_NODE	244:34	244:34	8	,
ARGUMENT	244:36	244:36	8	upd_bytecount
FIELD	244:36	244:36	9	upd_bytecount
LEAF_NODE	244:36	244:36	10	upd_bytecount
LEAF_NODE	244:50	244:50	8	)
LEAF_NODE	244:52	244:52	4	)
STATEMENTS	245:4	248:4	4	
LEAF_NODE	245:4	245:4	5	{
STATEMENTS	246:8	247:8	5	
EXPR_STATEMENT	246:8	246:60	6	fprintf ( stderr , "Can't rewrite STRIPBYTECOUNTS.\n" ) ;
EXPR	246:8	246:8	7	fprintf ( stderr , "Can't rewrite STRIPBYTECOUNTS.\n" )
FUNCTION_CALL	246:8	246:59	8	fprintf ( stderr , "Can't rewrite STRIPBYTECOUNTS.\n" )
CALLEE	246:8	246:8	9	fprintf
LEAF_NODE	246:8	246:8	10	fprintf
LEAF_NODE	246:16	246:16	9	(
ARGUMENT	246:17	246:17	9	stderr
FIELD	246:17	246:17	10	stderr
LEAF_NODE	246:17	246:17	11	stderr
LEAF_NODE	246:23	246:23	9	,
ARGUMENT	246:25	246:25	9	"Can't rewrite STRIPBYTECOUNTS.\n"
FIELD	246:25	246:25	10	"Can't rewrite STRIPBYTECOUNTS.\n"
LEAF_NODE	246:25	246:25	11	"Can't rewrite STRIPBYTECOUNTS.\n"
LEAF_NODE	246:59	246:59	9	)
LEAF_NODE	246:60	246:60	7	;
JUMP_STATEMENT	247:8	247:20	6	goto failure ;
KEYWORD	247:8	247:8	7	goto
LEAF_NODE	247:8	247:8	8	goto
DESTINATION	247:13	247:13	7	failure
LEAF_NODE	247:13	247:13	8	failure
LEAF_NODE	247:20	247:20	7	;
LEAF_NODE	248:4	248:4	5	}
EXPR_STATEMENT	250:4	250:30	3	_TIFFfree ( upd_bytecount ) ;
EXPR	250:4	250:4	4	_TIFFfree ( upd_bytecount )
FUNCTION_CALL	250:4	250:29	5	_TIFFfree ( upd_bytecount )
CALLEE	250:4	250:4	6	_TIFFfree
LEAF_NODE	250:4	250:4	7	_TIFFfree
LEAF_NODE	250:13	250:13	6	(
ARGUMENT	250:15	250:15	6	upd_bytecount
FIELD	250:15	250:15	7	upd_bytecount
LEAF_NODE	250:15	250:15	8	upd_bytecount
LEAF_NODE	250:29	250:29	6	)
LEAF_NODE	250:30	250:30	4	;
EXPR_STATEMENT	252:4	252:18	3	TIFFClose ( tif ) ;
EXPR	252:4	252:4	4	TIFFClose ( tif )
FUNCTION_CALL	252:4	252:17	5	TIFFClose ( tif )
CALLEE	252:4	252:4	6	TIFFClose
LEAF_NODE	252:4	252:4	7	TIFFClose
LEAF_NODE	252:13	252:13	6	(
ARGUMENT	252:14	252:14	6	tif
FIELD	252:14	252:14	7	tif
LEAF_NODE	252:14	252:14	8	tif
LEAF_NODE	252:17	252:17	6	)
LEAF_NODE	252:18	252:18	4	;
EXPR_STATEMENT	256:4	256:33	3	tif = TIFFOpen ( filename , "r" ) ;
EXPR	256:4	256:4	4	tif = TIFFOpen ( filename , "r" )
ASSIGN	256:4	256:10	5	tif = TIFFOpen ( filename , "r" )
LVAL	256:4	256:4	6	tif
FIELD	256:4	256:4	7	tif
LEAF_NODE	256:4	256:4	8	tif
ASSIGN_OP	256:8	256:8	6	=
LEAF_NODE	256:8	256:8	7	=
RVAL	256:10	256:10	6	TIFFOpen ( filename , "r" )
FUNCTION_CALL	256:10	256:32	7	TIFFOpen ( filename , "r" )
CALLEE	256:10	256:10	8	TIFFOpen
LEAF_NODE	256:10	256:10	9	TIFFOpen
LEAF_NODE	256:18	256:18	8	(
ARGUMENT	256:19	256:19	8	filename
FIELD	256:19	256:19	9	filename
LEAF_NODE	256:19	256:19	10	filename
LEAF_NODE	256:27	256:27	8	,
ARGUMENT	256:29	256:29	8	"r"
FIELD	256:29	256:29	9	"r"
LEAF_NODE	256:29	256:29	10	"r"
LEAF_NODE	256:32	256:32	8	)
LEAF_NODE	256:33	256:33	4	;
SELECTION	257:4	257:14	3	
KEYWORD	257:4	257:4	4	if
LEAF_NODE	257:4	257:4	5	if
LEAF_NODE	257:7	257:7	4	(
CONDITION	257:8	257:8	4	! tif
EXPR	257:8	257:8	5	! tif
UNARY_EXPR	257:8	257:9	6	! tif
UNARY_OPERATOR	257:8	257:8	7	!
LEAF_NODE	257:8	257:8	8	!
FIELD	257:9	257:9	7	tif
LEAF_NODE	257:9	257:9	8	tif
LEAF_NODE	257:12	257:12	4	)
STATEMENTS	257:14	261:4	4	
LEAF_NODE	257:14	257:14	5	{
STATEMENTS	258:8	260:8	5	
EXPR_STATEMENT	258:8	258:69	6	fprintf ( stderr , "Can't open test TIFF file %s.\n" , filename ) ;
EXPR	258:8	258:8	7	fprintf ( stderr , "Can't open test TIFF file %s.\n" , filename )
FUNCTION_CALL	258:8	258:68	8	fprintf ( stderr , "Can't open test TIFF file %s.\n" , filename )
CALLEE	258:8	258:8	9	fprintf
LEAF_NODE	258:8	258:8	10	fprintf
LEAF_NODE	258:16	258:16	9	(
ARGUMENT	258:17	258:17	9	stderr
FIELD	258:17	258:17	10	stderr
LEAF_NODE	258:17	258:17	11	stderr
LEAF_NODE	258:23	258:23	9	,
ARGUMENT	258:25	258:25	9	"Can't open test TIFF file %s.\n"
FIELD	258:25	258:25	10	"Can't open test TIFF file %s.\n"
LEAF_NODE	258:25	258:25	11	"Can't open test TIFF file %s.\n"
LEAF_NODE	258:58	258:58	9	,
ARGUMENT	258:60	258:60	9	filename
FIELD	258:60	258:60	10	filename
LEAF_NODE	258:60	258:60	11	filename
LEAF_NODE	258:68	258:68	9	)
LEAF_NODE	258:69	258:69	7	;
EXPR_STATEMENT	259:8	259:17	6	free ( buf ) ;
EXPR	259:8	259:8	7	free ( buf )
FUNCTION_CALL	259:8	259:16	8	free ( buf )
CALLEE	259:8	259:8	9	free
LEAF_NODE	259:8	259:8	10	free
LEAF_NODE	259:12	259:12	9	(
ARGUMENT	259:13	259:13	9	buf
FIELD	259:13	259:13	10	buf
LEAF_NODE	259:13	259:13	11	buf
LEAF_NODE	259:16	259:16	9	)
LEAF_NODE	259:17	259:17	7	;
JUMP_STATEMENT	260:8	260:16	6	return 1 ;
KEYWORD	260:8	260:8	7	return
LEAF_NODE	260:8	260:8	8	return
DESTINATION	260:15	260:15	7	1
EXPR	260:15	260:15	8	1
FIELD	260:15	260:15	9	1
LEAF_NODE	260:15	260:15	10	1
LEAF_NODE	260:16	260:16	7	;
LEAF_NODE	261:4	261:4	5	}
SELECTION	263:4	264:4	3	
KEYWORD	263:4	263:4	4	if
LEAF_NODE	263:4	263:4	5	if
LEAF_NODE	263:6	263:6	4	(
CONDITION	263:8	263:8	4	! TIFFGetField ( tif , TIFFTAG_STRIPOFFSETS , & rowoffset )
EXPR	263:8	263:8	5	! TIFFGetField ( tif , TIFFTAG_STRIPOFFSETS , & rowoffset )
UNARY_EXPR	263:8	263:9	6	! TIFFGetField ( tif , TIFFTAG_STRIPOFFSETS , & rowoffset )
UNARY_OPERATOR	263:8	263:8	7	!
LEAF_NODE	263:8	263:8	8	!
FUNCTION_CALL	263:9	263:61	7	TIFFGetField ( tif , TIFFTAG_STRIPOFFSETS , & rowoffset )
CALLEE	263:9	263:9	8	TIFFGetField
LEAF_NODE	263:9	263:9	9	TIFFGetField
LEAF_NODE	263:21	263:21	8	(
ARGUMENT	263:23	263:23	8	tif
FIELD	263:23	263:23	9	tif
LEAF_NODE	263:23	263:23	10	tif
LEAF_NODE	263:26	263:26	8	,
ARGUMENT	263:28	263:28	8	TIFFTAG_STRIPOFFSETS
FIELD	263:28	263:28	9	TIFFTAG_STRIPOFFSETS
LEAF_NODE	263:28	263:28	10	TIFFTAG_STRIPOFFSETS
LEAF_NODE	263:48	263:48	8	,
ARGUMENT	263:50	263:50	8	& rowoffset
UNARY_EXPR	263:50	263:51	9	& rowoffset
UNARY_OPERATOR	263:50	263:50	10	&
LEAF_NODE	263:50	263:50	11	&
FIELD	263:51	263:51	10	rowoffset
LEAF_NODE	263:51	263:51	11	rowoffset
LEAF_NODE	263:61	263:61	8	)
LEAF_NODE	263:63	263:63	4	)
STATEMENTS	264:4	267:4	4	
LEAF_NODE	264:4	264:4	5	{
STATEMENTS	265:8	266:8	5	
EXPR_STATEMENT	265:8	265:55	6	fprintf ( stderr , "Can't fetch STRIPOFFSETS.\n" ) ;
EXPR	265:8	265:8	7	fprintf ( stderr , "Can't fetch STRIPOFFSETS.\n" )
FUNCTION_CALL	265:8	265:54	8	fprintf ( stderr , "Can't fetch STRIPOFFSETS.\n" )
CALLEE	265:8	265:8	9	fprintf
LEAF_NODE	265:8	265:8	10	fprintf
LEAF_NODE	265:16	265:16	9	(
ARGUMENT	265:17	265:17	9	stderr
FIELD	265:17	265:17	10	stderr
LEAF_NODE	265:17	265:17	11	stderr
LEAF_NODE	265:23	265:23	9	,
ARGUMENT	265:25	265:25	9	"Can't fetch STRIPOFFSETS.\n"
FIELD	265:25	265:25	10	"Can't fetch STRIPOFFSETS.\n"
LEAF_NODE	265:25	265:25	11	"Can't fetch STRIPOFFSETS.\n"
LEAF_NODE	265:54	265:54	9	)
LEAF_NODE	265:55	265:55	7	;
JUMP_STATEMENT	266:8	266:20	6	goto failure ;
KEYWORD	266:8	266:8	7	goto
LEAF_NODE	266:8	266:8	8	goto
DESTINATION	266:13	266:13	7	failure
LEAF_NODE	266:13	266:13	8	failure
LEAF_NODE	266:20	266:20	7	;
LEAF_NODE	267:4	267:4	5	}
ITERATION	269:4	270:4	3	
KEYWORD	269:4	269:4	4	for
LEAF_NODE	269:4	269:4	5	for
LEAF_NODE	269:7	269:7	4	(
FOR_INIT	269:9	269:14	4	i = 0 ;
EXPR	269:9	269:9	5	i = 0
ASSIGN	269:9	269:13	6	i = 0
LVAL	269:9	269:9	7	i
FIELD	269:9	269:9	8	i
LEAF_NODE	269:9	269:9	9	i
ASSIGN_OP	269:11	269:11	7	=
LEAF_NODE	269:11	269:11	8	=
RVAL	269:13	269:13	7	0
FIELD	269:13	269:13	8	0
LEAF_NODE	269:13	269:13	9	0
LEAF_NODE	269:14	269:14	5	;
CONDITION	269:16	269:16	4	i < length
EXPR	269:16	269:20	5	i < length
FIELD	269:16	269:16	6	i
LEAF_NODE	269:16	269:16	7	i
REL_OPERATOR	269:18	269:18	6	<
LEAF_NODE	269:18	269:18	7	<
FIELD	269:20	269:20	6	length
LEAF_NODE	269:20	269:20	7	length
LEAF_NODE	269:26	269:26	4	;
FOR_EXPR	269:28	269:28	4	i ++
EXPR	269:28	269:28	5	i ++
FIELD	269:28	269:29	6	i ++
LEAF_NODE	269:28	269:28	7	i
LEAF_NODE	269:29	269:29	7	++
LEAF_NODE	269:32	269:32	4	)
STATEMENTS	270:4	284:4	4	
LEAF_NODE	270:4	270:4	5	{
STATEMENTS	271:8	273:8	5	
SIMPLE_DECL	271:8	271:44	6	uint64 expect ; expect = base_value + i * width ;
VAR_DECL	271:8	271:15	7	uint64 expect ; expect = base_value + i * width
TYPE	271:8	271:8	8	uint64
TYPE_NAME	271:8	271:8	9	uint64
LEAF_NODE	271:8	271:8	10	uint64
NAME	271:15	271:15	8	expect
LEAF_NODE	271:15	271:15	9	expect
LEAF_NODE	0:0	0:0	8	;
INIT	271:15	271:15	8	expect = base_value + i * width
ASSIGN	271:15	271:24	9	expect = base_value + i * width
LVAL	271:15	271:15	10	expect
NAME	271:15	271:15	11	expect
LEAF_NODE	271:15	271:15	12	expect
ASSIGN_OP	271:22	271:22	10	=
LEAF_NODE	271:22	271:22	11	=
RVAL	271:24	271:39	10	base_value + i * width
FIELD	271:24	271:24	11	base_value
LEAF_NODE	271:24	271:24	12	base_value
LEAF_NODE	271:35	271:35	11	+
FIELD	271:37	271:37	11	i
LEAF_NODE	271:37	271:37	12	i
LEAF_NODE	271:38	271:38	11	*
FIELD	271:39	271:39	11	width
LEAF_NODE	271:39	271:39	12	width
LEAF_NODE	271:44	271:44	7	;
SELECTION	273:8	274:8	6	
KEYWORD	273:8	273:8	7	if
LEAF_NODE	273:8	273:8	8	if
LEAF_NODE	273:10	273:10	7	(
CONDITION	273:12	273:12	7	rowoffset [ i ] != expect
EXPR	273:12	273:28	8	rowoffset [ i ] != expect
FIELD	273:12	273:23	9	rowoffset [ i ]
LEAF_NODE	273:12	273:12	10	rowoffset
LEAF_NODE	273:21	273:21	10	[
EXPR	273:22	273:22	10	i
FIELD	273:22	273:22	11	i
LEAF_NODE	273:22	273:22	12	i
LEAF_NODE	273:23	273:23	10	]
EQ_OPERATOR	273:25	273:25	9	!=
LEAF_NODE	273:25	273:25	10	!=
FIELD	273:28	273:28	9	expect
LEAF_NODE	273:28	273:28	10	expect
LEAF_NODE	273:35	273:35	7	)
STATEMENTS	274:8	283:8	7	
LEAF_NODE	274:8	274:8	8	{
STATEMENTS	275:12	282:12	8	
EXPR_STATEMENT	275:12	281:50	9	fprintf ( stderr , "%s:STRIPOFFSETS[%d]: Got %X:%08X instead of %X:%08X.\n" , filename , i , ( int ) ( rowoffset [ i ] >> 32 ) , ( int ) ( rowoffset [ i ] & 0xFFFFFFFF ) , ( int ) ( expect >> 32 ) , ( int ) ( expect & 0xFFFFFFFF ) ) ;
EXPR	275:12	275:12	10	fprintf ( stderr , "%s:STRIPOFFSETS[%d]: Got %X:%08X instead of %X:%08X.\n" , filename , i , ( int ) ( rowoffset [ i ] >> 32 ) , ( int ) ( rowoffset [ i ] & 0xFFFFFFFF ) , ( int ) ( expect >> 32 ) , ( int ) ( expect & 0xFFFFFFFF ) )
FUNCTION_CALL	275:12	281:49	11	fprintf ( stderr , "%s:STRIPOFFSETS[%d]: Got %X:%08X instead of %X:%08X.\n" , filename , i , ( int ) ( rowoffset [ i ] >> 32 ) , ( int ) ( rowoffset [ i ] & 0xFFFFFFFF ) , ( int ) ( expect >> 32 ) , ( int ) ( expect & 0xFFFFFFFF ) )
CALLEE	275:12	275:12	12	fprintf
LEAF_NODE	275:12	275:12	13	fprintf
LEAF_NODE	275:19	275:19	12	(
ARGUMENT	275:21	275:21	12	stderr
FIELD	275:21	275:21	13	stderr
LEAF_NODE	275:21	275:21	14	stderr
LEAF_NODE	275:27	275:27	12	,
ARGUMENT	276:21	276:21	12	"%s:STRIPOFFSETS[%d]: Got %X:%08X instead of %X:%08X.\n"
FIELD	276:21	276:21	13	"%s:STRIPOFFSETS[%d]: Got %X:%08X instead of %X:%08X.\n"
LEAF_NODE	276:21	276:21	14	"%s:STRIPOFFSETS[%d]: Got %X:%08X instead of %X:%08X.\n"
LEAF_NODE	276:77	276:77	12	,
ARGUMENT	277:21	277:21	12	filename
FIELD	277:21	277:21	13	filename
LEAF_NODE	277:21	277:21	14	filename
LEAF_NODE	277:29	277:29	12	,
ARGUMENT	277:31	277:31	12	i
FIELD	277:31	277:31	13	i
LEAF_NODE	277:31	277:31	14	i
LEAF_NODE	277:32	277:32	12	,
ARGUMENT	278:21	278:46	12	( int ) ( rowoffset [ i ] >> 32 )
LEAF_NODE	278:21	278:21	13	(
TYPE_NAME	278:22	278:22	13	int
LEAF_NODE	278:22	278:22	14	int
LEAF_NODE	278:25	278:25	13	)
LEAF_NODE	278:27	278:27	13	(
FIELD	278:28	278:39	13	rowoffset [ i ]
LEAF_NODE	278:28	278:28	14	rowoffset
LEAF_NODE	278:37	278:37	14	[
EXPR	278:38	278:38	14	i
FIELD	278:38	278:38	15	i
LEAF_NODE	278:38	278:38	16	i
LEAF_NODE	278:39	278:39	14	]
LEAF_NODE	278:41	278:41	13	>>
FIELD	278:44	278:44	13	32
LEAF_NODE	278:44	278:44	14	32
LEAF_NODE	278:46	278:46	13	)
LEAF_NODE	278:47	278:47	12	,
ARGUMENT	279:21	279:51	12	( int ) ( rowoffset [ i ] & 0xFFFFFFFF )
LEAF_NODE	279:21	279:21	13	(
TYPE_NAME	279:22	279:22	13	int
LEAF_NODE	279:22	279:22	14	int
LEAF_NODE	279:25	279:25	13	)
LEAF_NODE	279:27	279:27	13	(
FIELD	279:28	279:39	13	rowoffset [ i ]
LEAF_NODE	279:28	279:28	14	rowoffset
LEAF_NODE	279:37	279:37	14	[
EXPR	279:38	279:38	14	i
FIELD	279:38	279:38	15	i
LEAF_NODE	279:38	279:38	16	i
LEAF_NODE	279:39	279:39	14	]
LEAF_NODE	279:40	279:40	13	&
FIELD	279:41	279:41	13	0xFFFFFFFF
LEAF_NODE	279:41	279:41	14	0xFFFFFFFF
LEAF_NODE	279:51	279:51	13	)
LEAF_NODE	279:52	279:52	12	,
ARGUMENT	280:21	280:40	12	( int ) ( expect >> 32 )
LEAF_NODE	280:21	280:21	13	(
TYPE_NAME	280:22	280:22	13	int
LEAF_NODE	280:22	280:22	14	int
LEAF_NODE	280:25	280:25	13	)
LEAF_NODE	280:27	280:27	13	(
FIELD	280:28	280:28	13	expect
LEAF_NODE	280:28	280:28	14	expect
LEAF_NODE	280:35	280:35	13	>>
FIELD	280:38	280:38	13	32
LEAF_NODE	280:38	280:38	14	32
LEAF_NODE	280:40	280:40	13	)
LEAF_NODE	280:41	280:41	12	,
ARGUMENT	281:21	281:47	12	( int ) ( expect & 0xFFFFFFFF )
LEAF_NODE	281:21	281:21	13	(
TYPE_NAME	281:22	281:22	13	int
LEAF_NODE	281:22	281:22	14	int
LEAF_NODE	281:25	281:25	13	)
LEAF_NODE	281:27	281:27	13	(
FIELD	281:28	281:28	13	expect
LEAF_NODE	281:28	281:28	14	expect
LEAF_NODE	281:35	281:35	13	&
FIELD	281:37	281:37	13	0xFFFFFFFF
LEAF_NODE	281:37	281:37	14	0xFFFFFFFF
LEAF_NODE	281:47	281:47	13	)
LEAF_NODE	281:49	281:49	12	)
LEAF_NODE	281:50	281:50	10	;
JUMP_STATEMENT	282:12	282:24	9	goto failure ;
KEYWORD	282:12	282:12	10	goto
LEAF_NODE	282:12	282:12	11	goto
DESTINATION	282:17	282:17	10	failure
LEAF_NODE	282:17	282:17	11	failure
LEAF_NODE	282:24	282:24	10	;
LEAF_NODE	283:8	283:8	8	}
LEAF_NODE	284:4	284:4	5	}
SELECTION	286:4	287:4	3	
KEYWORD	286:4	286:4	4	if
LEAF_NODE	286:4	286:4	5	if
LEAF_NODE	286:6	286:6	4	(
CONDITION	286:8	286:8	4	! TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & rowbytes )
EXPR	286:8	286:8	5	! TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & rowbytes )
UNARY_EXPR	286:8	286:9	6	! TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & rowbytes )
UNARY_OPERATOR	286:8	286:8	7	!
LEAF_NODE	286:8	286:8	8	!
FUNCTION_CALL	286:9	286:63	7	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & rowbytes )
CALLEE	286:9	286:9	8	TIFFGetField
LEAF_NODE	286:9	286:9	9	TIFFGetField
LEAF_NODE	286:21	286:21	8	(
ARGUMENT	286:23	286:23	8	tif
FIELD	286:23	286:23	9	tif
LEAF_NODE	286:23	286:23	10	tif
LEAF_NODE	286:26	286:26	8	,
ARGUMENT	286:28	286:28	8	TIFFTAG_STRIPBYTECOUNTS
FIELD	286:28	286:28	9	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	286:28	286:28	10	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	286:51	286:51	8	,
ARGUMENT	286:53	286:53	8	& rowbytes
UNARY_EXPR	286:53	286:54	9	& rowbytes
UNARY_OPERATOR	286:53	286:53	10	&
LEAF_NODE	286:53	286:53	11	&
FIELD	286:54	286:54	10	rowbytes
LEAF_NODE	286:54	286:54	11	rowbytes
LEAF_NODE	286:63	286:63	8	)
LEAF_NODE	286:65	286:65	4	)
STATEMENTS	287:4	290:4	4	
LEAF_NODE	287:4	287:4	5	{
STATEMENTS	288:8	289:8	5	
EXPR_STATEMENT	288:8	288:58	6	fprintf ( stderr , "Can't fetch STRIPBYTECOUNTS.\n" ) ;
EXPR	288:8	288:8	7	fprintf ( stderr , "Can't fetch STRIPBYTECOUNTS.\n" )
FUNCTION_CALL	288:8	288:57	8	fprintf ( stderr , "Can't fetch STRIPBYTECOUNTS.\n" )
CALLEE	288:8	288:8	9	fprintf
LEAF_NODE	288:8	288:8	10	fprintf
LEAF_NODE	288:16	288:16	9	(
ARGUMENT	288:17	288:17	9	stderr
FIELD	288:17	288:17	10	stderr
LEAF_NODE	288:17	288:17	11	stderr
LEAF_NODE	288:23	288:23	9	,
ARGUMENT	288:25	288:25	9	"Can't fetch STRIPBYTECOUNTS.\n"
FIELD	288:25	288:25	10	"Can't fetch STRIPBYTECOUNTS.\n"
LEAF_NODE	288:25	288:25	11	"Can't fetch STRIPBYTECOUNTS.\n"
LEAF_NODE	288:57	288:57	9	)
LEAF_NODE	288:58	288:58	7	;
JUMP_STATEMENT	289:8	289:20	6	goto failure ;
KEYWORD	289:8	289:8	7	goto
LEAF_NODE	289:8	289:8	8	goto
DESTINATION	289:13	289:13	7	failure
LEAF_NODE	289:13	289:13	8	failure
LEAF_NODE	289:20	289:20	7	;
LEAF_NODE	290:4	290:4	5	}
ITERATION	292:4	293:4	3	
KEYWORD	292:4	292:4	4	for
LEAF_NODE	292:4	292:4	5	for
LEAF_NODE	292:7	292:7	4	(
FOR_INIT	292:9	292:14	4	i = 0 ;
EXPR	292:9	292:9	5	i = 0
ASSIGN	292:9	292:13	6	i = 0
LVAL	292:9	292:9	7	i
FIELD	292:9	292:9	8	i
LEAF_NODE	292:9	292:9	9	i
ASSIGN_OP	292:11	292:11	7	=
LEAF_NODE	292:11	292:11	8	=
RVAL	292:13	292:13	7	0
FIELD	292:13	292:13	8	0
LEAF_NODE	292:13	292:13	9	0
LEAF_NODE	292:14	292:14	5	;
CONDITION	292:16	292:16	4	i < length
EXPR	292:16	292:20	5	i < length
FIELD	292:16	292:16	6	i
LEAF_NODE	292:16	292:16	7	i
REL_OPERATOR	292:18	292:18	6	<
LEAF_NODE	292:18	292:18	7	<
FIELD	292:20	292:20	6	length
LEAF_NODE	292:20	292:20	7	length
LEAF_NODE	292:26	292:26	4	;
FOR_EXPR	292:28	292:28	4	i ++
EXPR	292:28	292:28	5	i ++
FIELD	292:28	292:29	6	i ++
LEAF_NODE	292:28	292:28	7	i
LEAF_NODE	292:29	292:29	7	++
LEAF_NODE	292:32	292:32	4	)
STATEMENTS	293:4	307:4	4	
LEAF_NODE	293:4	293:4	5	{
STATEMENTS	294:8	296:8	5	
SIMPLE_DECL	294:8	294:37	6	uint64 expect ; expect = 100 + i * width ;
VAR_DECL	294:8	294:15	7	uint64 expect ; expect = 100 + i * width
TYPE	294:8	294:8	8	uint64
TYPE_NAME	294:8	294:8	9	uint64
LEAF_NODE	294:8	294:8	10	uint64
NAME	294:15	294:15	8	expect
LEAF_NODE	294:15	294:15	9	expect
LEAF_NODE	0:0	0:0	8	;
INIT	294:15	294:15	8	expect = 100 + i * width
ASSIGN	294:15	294:24	9	expect = 100 + i * width
LVAL	294:15	294:15	10	expect
NAME	294:15	294:15	11	expect
LEAF_NODE	294:15	294:15	12	expect
ASSIGN_OP	294:22	294:22	10	=
LEAF_NODE	294:22	294:22	11	=
RVAL	294:24	294:32	10	100 + i * width
FIELD	294:24	294:24	11	100
LEAF_NODE	294:24	294:24	12	100
LEAF_NODE	294:28	294:28	11	+
FIELD	294:30	294:30	11	i
LEAF_NODE	294:30	294:30	12	i
LEAF_NODE	294:31	294:31	11	*
FIELD	294:32	294:32	11	width
LEAF_NODE	294:32	294:32	12	width
LEAF_NODE	294:37	294:37	7	;
SELECTION	296:8	297:8	6	
KEYWORD	296:8	296:8	7	if
LEAF_NODE	296:8	296:8	8	if
LEAF_NODE	296:10	296:10	7	(
CONDITION	296:12	296:12	7	rowbytes [ i ] != expect
EXPR	296:12	296:27	8	rowbytes [ i ] != expect
FIELD	296:12	296:22	9	rowbytes [ i ]
LEAF_NODE	296:12	296:12	10	rowbytes
LEAF_NODE	296:20	296:20	10	[
EXPR	296:21	296:21	10	i
FIELD	296:21	296:21	11	i
LEAF_NODE	296:21	296:21	12	i
LEAF_NODE	296:22	296:22	10	]
EQ_OPERATOR	296:24	296:24	9	!=
LEAF_NODE	296:24	296:24	10	!=
FIELD	296:27	296:27	9	expect
LEAF_NODE	296:27	296:27	10	expect
LEAF_NODE	296:34	296:34	7	)
STATEMENTS	297:8	306:8	7	
LEAF_NODE	297:8	297:8	8	{
STATEMENTS	298:12	305:12	8	
EXPR_STATEMENT	298:12	304:50	9	fprintf ( stderr , "%s:STRIPBYTECOUNTS[%d]: Got %X:%08X instead of %X:%08X.\n" , filename , i , ( int ) ( rowbytes [ i ] >> 32 ) , ( int ) ( rowbytes [ i ] & 0xFFFFFFFF ) , ( int ) ( expect >> 32 ) , ( int ) ( expect & 0xFFFFFFFF ) ) ;
EXPR	298:12	298:12	10	fprintf ( stderr , "%s:STRIPBYTECOUNTS[%d]: Got %X:%08X instead of %X:%08X.\n" , filename , i , ( int ) ( rowbytes [ i ] >> 32 ) , ( int ) ( rowbytes [ i ] & 0xFFFFFFFF ) , ( int ) ( expect >> 32 ) , ( int ) ( expect & 0xFFFFFFFF ) )
FUNCTION_CALL	298:12	304:49	11	fprintf ( stderr , "%s:STRIPBYTECOUNTS[%d]: Got %X:%08X instead of %X:%08X.\n" , filename , i , ( int ) ( rowbytes [ i ] >> 32 ) , ( int ) ( rowbytes [ i ] & 0xFFFFFFFF ) , ( int ) ( expect >> 32 ) , ( int ) ( expect & 0xFFFFFFFF ) )
CALLEE	298:12	298:12	12	fprintf
LEAF_NODE	298:12	298:12	13	fprintf
LEAF_NODE	298:19	298:19	12	(
ARGUMENT	298:21	298:21	12	stderr
FIELD	298:21	298:21	13	stderr
LEAF_NODE	298:21	298:21	14	stderr
LEAF_NODE	298:27	298:27	12	,
ARGUMENT	299:21	299:21	12	"%s:STRIPBYTECOUNTS[%d]: Got %X:%08X instead of %X:%08X.\n"
FIELD	299:21	299:21	13	"%s:STRIPBYTECOUNTS[%d]: Got %X:%08X instead of %X:%08X.\n"
LEAF_NODE	299:21	299:21	14	"%s:STRIPBYTECOUNTS[%d]: Got %X:%08X instead of %X:%08X.\n"
LEAF_NODE	299:80	299:80	12	,
ARGUMENT	300:21	300:21	12	filename
FIELD	300:21	300:21	13	filename
LEAF_NODE	300:21	300:21	14	filename
LEAF_NODE	300:29	300:29	12	,
ARGUMENT	300:31	300:31	12	i
FIELD	300:31	300:31	13	i
LEAF_NODE	300:31	300:31	14	i
LEAF_NODE	300:32	300:32	12	,
ARGUMENT	301:21	301:45	12	( int ) ( rowbytes [ i ] >> 32 )
LEAF_NODE	301:21	301:21	13	(
TYPE_NAME	301:22	301:22	13	int
LEAF_NODE	301:22	301:22	14	int
LEAF_NODE	301:25	301:25	13	)
LEAF_NODE	301:27	301:27	13	(
FIELD	301:28	301:38	13	rowbytes [ i ]
LEAF_NODE	301:28	301:28	14	rowbytes
LEAF_NODE	301:36	301:36	14	[
EXPR	301:37	301:37	14	i
FIELD	301:37	301:37	15	i
LEAF_NODE	301:37	301:37	16	i
LEAF_NODE	301:38	301:38	14	]
LEAF_NODE	301:40	301:40	13	>>
FIELD	301:43	301:43	13	32
LEAF_NODE	301:43	301:43	14	32
LEAF_NODE	301:45	301:45	13	)
LEAF_NODE	301:46	301:46	12	,
ARGUMENT	302:21	302:52	12	( int ) ( rowbytes [ i ] & 0xFFFFFFFF )
LEAF_NODE	302:21	302:21	13	(
TYPE_NAME	302:22	302:22	13	int
LEAF_NODE	302:22	302:22	14	int
LEAF_NODE	302:25	302:25	13	)
LEAF_NODE	302:27	302:27	13	(
FIELD	302:28	302:38	13	rowbytes [ i ]
LEAF_NODE	302:28	302:28	14	rowbytes
LEAF_NODE	302:36	302:36	14	[
EXPR	302:37	302:37	14	i
FIELD	302:37	302:37	15	i
LEAF_NODE	302:37	302:37	16	i
LEAF_NODE	302:38	302:38	14	]
LEAF_NODE	302:40	302:40	13	&
FIELD	302:42	302:42	13	0xFFFFFFFF
LEAF_NODE	302:42	302:42	14	0xFFFFFFFF
LEAF_NODE	302:52	302:52	13	)
LEAF_NODE	302:53	302:53	12	,
ARGUMENT	303:21	303:40	12	( int ) ( expect >> 32 )
LEAF_NODE	303:21	303:21	13	(
TYPE_NAME	303:22	303:22	13	int
LEAF_NODE	303:22	303:22	14	int
LEAF_NODE	303:25	303:25	13	)
LEAF_NODE	303:27	303:27	13	(
FIELD	303:28	303:28	13	expect
LEAF_NODE	303:28	303:28	14	expect
LEAF_NODE	303:35	303:35	13	>>
FIELD	303:38	303:38	13	32
LEAF_NODE	303:38	303:38	14	32
LEAF_NODE	303:40	303:40	13	)
LEAF_NODE	303:41	303:41	12	,
ARGUMENT	304:21	304:47	12	( int ) ( expect & 0xFFFFFFFF )
LEAF_NODE	304:21	304:21	13	(
TYPE_NAME	304:22	304:22	13	int
LEAF_NODE	304:22	304:22	14	int
LEAF_NODE	304:25	304:25	13	)
LEAF_NODE	304:27	304:27	13	(
FIELD	304:28	304:28	13	expect
LEAF_NODE	304:28	304:28	14	expect
LEAF_NODE	304:35	304:35	13	&
FIELD	304:37	304:37	13	0xFFFFFFFF
LEAF_NODE	304:37	304:37	14	0xFFFFFFFF
LEAF_NODE	304:47	304:47	13	)
LEAF_NODE	304:49	304:49	12	)
LEAF_NODE	304:50	304:50	10	;
JUMP_STATEMENT	305:12	305:24	9	goto failure ;
KEYWORD	305:12	305:12	10	goto
LEAF_NODE	305:12	305:12	11	goto
DESTINATION	305:17	305:17	10	failure
LEAF_NODE	305:17	305:17	11	failure
LEAF_NODE	305:24	305:24	10	;
LEAF_NODE	306:8	306:8	8	}
LEAF_NODE	307:4	307:4	5	}
EXPR_STATEMENT	309:4	309:20	3	TIFFClose ( tif ) ;
EXPR	309:4	309:4	4	TIFFClose ( tif )
FUNCTION_CALL	309:4	309:19	5	TIFFClose ( tif )
CALLEE	309:4	309:4	6	TIFFClose
LEAF_NODE	309:4	309:4	7	TIFFClose
LEAF_NODE	309:13	309:13	6	(
ARGUMENT	309:15	309:15	6	tif
FIELD	309:15	309:15	7	tif
LEAF_NODE	309:15	309:15	8	tif
LEAF_NODE	309:19	309:19	6	)
LEAF_NODE	309:20	309:20	4	;
EXPR_STATEMENT	310:4	310:13	3	free ( buf ) ;
EXPR	310:4	310:4	4	free ( buf )
FUNCTION_CALL	310:4	310:12	5	free ( buf )
CALLEE	310:4	310:4	6	free
LEAF_NODE	310:4	310:4	7	free
LEAF_NODE	310:8	310:8	6	(
ARGUMENT	310:9	310:9	6	buf
FIELD	310:9	310:9	7	buf
LEAF_NODE	310:9	310:9	8	buf
LEAF_NODE	310:12	310:12	6	)
LEAF_NODE	310:13	310:13	4	;
EXPR_STATEMENT	313:4	313:20	3	unlink ( filename ) ;
EXPR	313:4	313:4	4	unlink ( filename )
FUNCTION_CALL	313:4	313:19	5	unlink ( filename )
CALLEE	313:4	313:4	6	unlink
LEAF_NODE	313:4	313:4	7	unlink
LEAF_NODE	313:10	313:10	6	(
ARGUMENT	313:11	313:11	6	filename
FIELD	313:11	313:11	7	filename
LEAF_NODE	313:11	313:11	8	filename
LEAF_NODE	313:19	313:19	6	)
LEAF_NODE	313:20	313:20	4	;
JUMP_STATEMENT	314:4	314:12	3	return 0 ;
KEYWORD	314:4	314:4	4	return
LEAF_NODE	314:4	314:4	5	return
DESTINATION	314:11	314:11	4	0
EXPR	314:11	314:11	5	0
FIELD	314:11	314:11	6	0
LEAF_NODE	314:11	314:11	7	0
LEAF_NODE	314:12	314:12	4	;
LABEL	316:2	316:9	3	failure :
LEAF_NODE	316:2	316:2	4	failure
LEAF_NODE	316:9	316:9	4	:
EXPR_STATEMENT	318:4	318:18	3	TIFFClose ( tif ) ;
EXPR	318:4	318:4	4	TIFFClose ( tif )
FUNCTION_CALL	318:4	318:17	5	TIFFClose ( tif )
CALLEE	318:4	318:4	6	TIFFClose
LEAF_NODE	318:4	318:4	7	TIFFClose
LEAF_NODE	318:13	318:13	6	(
ARGUMENT	318:14	318:14	6	tif
FIELD	318:14	318:14	7	tif
LEAF_NODE	318:14	318:14	8	tif
LEAF_NODE	318:17	318:17	6	)
LEAF_NODE	318:18	318:18	4	;
EXPR_STATEMENT	319:4	319:13	3	free ( buf ) ;
EXPR	319:4	319:4	4	free ( buf )
FUNCTION_CALL	319:4	319:12	5	free ( buf )
CALLEE	319:4	319:4	6	free
LEAF_NODE	319:4	319:4	7	free
LEAF_NODE	319:8	319:8	6	(
ARGUMENT	319:9	319:9	6	buf
FIELD	319:9	319:9	7	buf
LEAF_NODE	319:9	319:9	8	buf
LEAF_NODE	319:12	319:12	6	)
LEAF_NODE	319:13	319:13	4	;
JUMP_STATEMENT	322:4	322:12	3	return 1 ;
KEYWORD	322:4	322:4	4	return
LEAF_NODE	322:4	322:4	5	return
DESTINATION	322:11	322:11	4	1
EXPR	322:11	322:11	5	1
FIELD	322:11	322:11	6	1
LEAF_NODE	322:11	322:11	7	1
LEAF_NODE	322:12	322:12	4	;
LEAF_NODE	324:0	324:0	2	}
FUNCTION_DEF	329:0	353:0	1	
RETURN_TYPE	329:0	329:0	2	int
TYPE_NAME	329:0	329:0	3	int
LEAF_NODE	329:0	329:0	4	int
FUNCTION_NAME	330:0	330:0	2	main
LEAF_NODE	330:0	330:0	3	main
PARAMETER_LIST	330:4	330:9	2	( void )
LEAF_NODE	330:4	330:4	3	(
PARAMETER_DECL	330:5	330:5	3	void
LEAF_NODE	330:5	330:5	4	void
LEAF_NODE	330:9	330:9	3	)
LEAF_NODE	331:0	331:0	2	{
STATEMENTS	332:4	352:4	2	
SIMPLE_DECL	332:4	332:19	3	int failure ; failure = 0 ;
VAR_DECL	332:4	332:8	4	int failure ; failure = 0
TYPE	332:4	332:4	5	int
TYPE_NAME	332:4	332:4	6	int
LEAF_NODE	332:4	332:4	7	int
NAME	332:8	332:8	5	failure
LEAF_NODE	332:8	332:8	6	failure
LEAF_NODE	0:0	0:0	5	;
INIT	332:8	332:8	5	failure = 0
ASSIGN	332:8	332:18	6	failure = 0
LVAL	332:8	332:8	7	failure
NAME	332:8	332:8	8	failure
LEAF_NODE	332:8	332:8	9	failure
ASSIGN_OP	332:16	332:16	7	=
LEAF_NODE	332:16	332:16	8	=
RVAL	332:18	332:18	7	0
FIELD	332:18	332:18	8	0
LEAF_NODE	332:18	332:18	9	0
LEAF_NODE	332:19	332:19	4	;
EXPR_STATEMENT	334:4	334:30	3	failure |= test_packbits ( ) ;
EXPR	334:4	334:4	4	failure |= test_packbits ( )
ASSIGN	334:4	334:15	5	failure |= test_packbits ( )
LVAL	334:4	334:4	6	failure
FIELD	334:4	334:4	7	failure
LEAF_NODE	334:4	334:4	8	failure
ASSIGN_OP	334:12	334:12	6	|=
LEAF_NODE	334:12	334:12	7	|=
RVAL	334:15	334:15	6	test_packbits ( )
FUNCTION_CALL	334:15	334:29	7	test_packbits ( )
CALLEE	334:15	334:15	8	test_packbits
LEAF_NODE	334:15	334:15	9	test_packbits
LEAF_NODE	334:28	334:28	8	(
LEAF_NODE	334:29	334:29	8	)
LEAF_NODE	334:30	334:30	4	;
EXPR_STATEMENT	337:4	337:61	3	failure |= rewrite_test ( "rewrite1.tif" , 10 , 10 , 0 , 100 ) ;
EXPR	337:4	337:4	4	failure |= rewrite_test ( "rewrite1.tif" , 10 , 10 , 0 , 100 )
ASSIGN	337:4	337:15	5	failure |= rewrite_test ( "rewrite1.tif" , 10 , 10 , 0 , 100 )
LVAL	337:4	337:4	6	failure
FIELD	337:4	337:4	7	failure
LEAF_NODE	337:4	337:4	8	failure
ASSIGN_OP	337:12	337:12	6	|=
LEAF_NODE	337:12	337:12	7	|=
RVAL	337:15	337:15	6	rewrite_test ( "rewrite1.tif" , 10 , 10 , 0 , 100 )
FUNCTION_CALL	337:15	337:60	7	rewrite_test ( "rewrite1.tif" , 10 , 10 , 0 , 100 )
CALLEE	337:15	337:15	8	rewrite_test
LEAF_NODE	337:15	337:15	9	rewrite_test
LEAF_NODE	337:27	337:27	8	(
ARGUMENT	337:29	337:29	8	"rewrite1.tif"
FIELD	337:29	337:29	9	"rewrite1.tif"
LEAF_NODE	337:29	337:29	10	"rewrite1.tif"
LEAF_NODE	337:43	337:43	8	,
ARGUMENT	337:45	337:45	8	10
FIELD	337:45	337:45	9	10
LEAF_NODE	337:45	337:45	10	10
LEAF_NODE	337:47	337:47	8	,
ARGUMENT	337:49	337:49	8	10
FIELD	337:49	337:49	9	10
LEAF_NODE	337:49	337:49	10	10
LEAF_NODE	337:51	337:51	8	,
ARGUMENT	337:53	337:53	8	0
FIELD	337:53	337:53	9	0
LEAF_NODE	337:53	337:53	10	0
LEAF_NODE	337:54	337:54	8	,
ARGUMENT	337:56	337:56	8	100
FIELD	337:56	337:56	9	100
LEAF_NODE	337:56	337:56	10	100
LEAF_NODE	337:60	337:60	8	)
LEAF_NODE	337:61	337:61	4	;
EXPR_STATEMENT	338:4	338:61	3	failure |= rewrite_test ( "rewrite2.tif" , 10 , 10 , 1 , 100 ) ;
EXPR	338:4	338:4	4	failure |= rewrite_test ( "rewrite2.tif" , 10 , 10 , 1 , 100 )
ASSIGN	338:4	338:15	5	failure |= rewrite_test ( "rewrite2.tif" , 10 , 10 , 1 , 100 )
LVAL	338:4	338:4	6	failure
FIELD	338:4	338:4	7	failure
LEAF_NODE	338:4	338:4	8	failure
ASSIGN_OP	338:12	338:12	6	|=
LEAF_NODE	338:12	338:12	7	|=
RVAL	338:15	338:15	6	rewrite_test ( "rewrite2.tif" , 10 , 10 , 1 , 100 )
FUNCTION_CALL	338:15	338:60	7	rewrite_test ( "rewrite2.tif" , 10 , 10 , 1 , 100 )
CALLEE	338:15	338:15	8	rewrite_test
LEAF_NODE	338:15	338:15	9	rewrite_test
LEAF_NODE	338:27	338:27	8	(
ARGUMENT	338:29	338:29	8	"rewrite2.tif"
FIELD	338:29	338:29	9	"rewrite2.tif"
LEAF_NODE	338:29	338:29	10	"rewrite2.tif"
LEAF_NODE	338:43	338:43	8	,
ARGUMENT	338:45	338:45	8	10
FIELD	338:45	338:45	9	10
LEAF_NODE	338:45	338:45	10	10
LEAF_NODE	338:47	338:47	8	,
ARGUMENT	338:49	338:49	8	10
FIELD	338:49	338:49	9	10
LEAF_NODE	338:49	338:49	10	10
LEAF_NODE	338:51	338:51	8	,
ARGUMENT	338:53	338:53	8	1
FIELD	338:53	338:53	9	1
LEAF_NODE	338:53	338:53	10	1
LEAF_NODE	338:54	338:54	8	,
ARGUMENT	338:56	338:56	8	100
FIELD	338:56	338:56	9	100
LEAF_NODE	338:56	338:56	10	100
LEAF_NODE	338:60	338:60	8	)
LEAF_NODE	338:61	338:61	4	;
EXPR_STATEMENT	341:4	341:60	3	failure |= rewrite_test ( "rewrite3.tif" , 10 , 1 , 0 , 100 ) ;
EXPR	341:4	341:4	4	failure |= rewrite_test ( "rewrite3.tif" , 10 , 1 , 0 , 100 )
ASSIGN	341:4	341:15	5	failure |= rewrite_test ( "rewrite3.tif" , 10 , 1 , 0 , 100 )
LVAL	341:4	341:4	6	failure
FIELD	341:4	341:4	7	failure
LEAF_NODE	341:4	341:4	8	failure
ASSIGN_OP	341:12	341:12	6	|=
LEAF_NODE	341:12	341:12	7	|=
RVAL	341:15	341:15	6	rewrite_test ( "rewrite3.tif" , 10 , 1 , 0 , 100 )
FUNCTION_CALL	341:15	341:59	7	rewrite_test ( "rewrite3.tif" , 10 , 1 , 0 , 100 )
CALLEE	341:15	341:15	8	rewrite_test
LEAF_NODE	341:15	341:15	9	rewrite_test
LEAF_NODE	341:27	341:27	8	(
ARGUMENT	341:29	341:29	8	"rewrite3.tif"
FIELD	341:29	341:29	9	"rewrite3.tif"
LEAF_NODE	341:29	341:29	10	"rewrite3.tif"
LEAF_NODE	341:43	341:43	8	,
ARGUMENT	341:45	341:45	8	10
FIELD	341:45	341:45	9	10
LEAF_NODE	341:45	341:45	10	10
LEAF_NODE	341:47	341:47	8	,
ARGUMENT	341:49	341:49	8	1
FIELD	341:49	341:49	9	1
LEAF_NODE	341:49	341:49	10	1
LEAF_NODE	341:50	341:50	8	,
ARGUMENT	341:52	341:52	8	0
FIELD	341:52	341:52	9	0
LEAF_NODE	341:52	341:52	10	0
LEAF_NODE	341:53	341:53	8	,
ARGUMENT	341:55	341:55	8	100
FIELD	341:55	341:55	9	100
LEAF_NODE	341:55	341:55	10	100
LEAF_NODE	341:59	341:59	8	)
LEAF_NODE	341:60	341:60	4	;
EXPR_STATEMENT	342:4	342:60	3	failure |= rewrite_test ( "rewrite4.tif" , 10 , 1 , 1 , 100 ) ;
EXPR	342:4	342:4	4	failure |= rewrite_test ( "rewrite4.tif" , 10 , 1 , 1 , 100 )
ASSIGN	342:4	342:15	5	failure |= rewrite_test ( "rewrite4.tif" , 10 , 1 , 1 , 100 )
LVAL	342:4	342:4	6	failure
FIELD	342:4	342:4	7	failure
LEAF_NODE	342:4	342:4	8	failure
ASSIGN_OP	342:12	342:12	6	|=
LEAF_NODE	342:12	342:12	7	|=
RVAL	342:15	342:15	6	rewrite_test ( "rewrite4.tif" , 10 , 1 , 1 , 100 )
FUNCTION_CALL	342:15	342:59	7	rewrite_test ( "rewrite4.tif" , 10 , 1 , 1 , 100 )
CALLEE	342:15	342:15	8	rewrite_test
LEAF_NODE	342:15	342:15	9	rewrite_test
LEAF_NODE	342:27	342:27	8	(
ARGUMENT	342:29	342:29	8	"rewrite4.tif"
FIELD	342:29	342:29	9	"rewrite4.tif"
LEAF_NODE	342:29	342:29	10	"rewrite4.tif"
LEAF_NODE	342:43	342:43	8	,
ARGUMENT	342:45	342:45	8	10
FIELD	342:45	342:45	9	10
LEAF_NODE	342:45	342:45	10	10
LEAF_NODE	342:47	342:47	8	,
ARGUMENT	342:49	342:49	8	1
FIELD	342:49	342:49	9	1
LEAF_NODE	342:49	342:49	10	1
LEAF_NODE	342:50	342:50	8	,
ARGUMENT	342:52	342:52	8	1
FIELD	342:52	342:52	9	1
LEAF_NODE	342:52	342:52	10	1
LEAF_NODE	342:53	342:53	8	,
ARGUMENT	342:55	342:55	8	100
FIELD	342:55	342:55	9	100
LEAF_NODE	342:55	342:55	10	100
LEAF_NODE	342:59	342:59	8	)
LEAF_NODE	342:60	342:60	4	;
LEAF_NODE	345:4	345:4	3	failure
LEAF_NODE	345:12	345:12	3	|=
LEAF_NODE	345:15	345:15	3	rewrite_test
LEAF_NODE	345:27	345:27	3	(
LEAF_NODE	345:29	345:29	3	"rewrite5.tif"
LEAF_NODE	345:43	345:43	3	,
LEAF_NODE	345:45	345:45	3	10
LEAF_NODE	345:47	345:47	3	,
LEAF_NODE	345:49	345:49	3	1000
LEAF_NODE	345:53	345:53	3	,
LEAF_NODE	345:55	345:55	3	1
LEAF_NODE	345:56	345:56	3	,
LEAF_NODE	345:58	345:58	3	0x6000000000UL
LEAF_NODE	345:72	345:72	3	L
LEAF_NODE	345:74	345:74	3	)
LEAF_NODE	345:75	345:75	3	;
LEAF_NODE	346:4	346:4	3	failure
LEAF_NODE	346:12	346:12	3	|=
LEAF_NODE	346:15	346:15	3	rewrite_test
LEAF_NODE	346:27	346:27	3	(
LEAF_NODE	346:29	346:29	3	"rewrite6.tif"
LEAF_NODE	346:43	346:43	3	,
LEAF_NODE	346:45	346:45	3	10
LEAF_NODE	346:47	346:47	3	,
LEAF_NODE	346:49	346:49	3	1
LEAF_NODE	346:50	346:50	3	,
LEAF_NODE	346:52	346:52	3	1
LEAF_NODE	346:53	346:53	3	,
LEAF_NODE	346:55	346:55	3	0x6000000000UL
LEAF_NODE	346:69	346:69	3	L
LEAF_NODE	346:71	346:71	3	)
LEAF_NODE	346:72	346:72	3	;
EXPR_STATEMENT	349:4	349:63	3	failure |= rewrite_test ( "rewrite7.tif" , 65536 , 1 , 0 , 100 ) ;
EXPR	349:4	349:4	4	failure |= rewrite_test ( "rewrite7.tif" , 65536 , 1 , 0 , 100 )
ASSIGN	349:4	349:15	5	failure |= rewrite_test ( "rewrite7.tif" , 65536 , 1 , 0 , 100 )
LVAL	349:4	349:4	6	failure
FIELD	349:4	349:4	7	failure
LEAF_NODE	349:4	349:4	8	failure
ASSIGN_OP	349:12	349:12	6	|=
LEAF_NODE	349:12	349:12	7	|=
RVAL	349:15	349:15	6	rewrite_test ( "rewrite7.tif" , 65536 , 1 , 0 , 100 )
FUNCTION_CALL	349:15	349:62	7	rewrite_test ( "rewrite7.tif" , 65536 , 1 , 0 , 100 )
CALLEE	349:15	349:15	8	rewrite_test
LEAF_NODE	349:15	349:15	9	rewrite_test
LEAF_NODE	349:27	349:27	8	(
ARGUMENT	349:29	349:29	8	"rewrite7.tif"
FIELD	349:29	349:29	9	"rewrite7.tif"
LEAF_NODE	349:29	349:29	10	"rewrite7.tif"
LEAF_NODE	349:43	349:43	8	,
ARGUMENT	349:45	349:45	8	65536
FIELD	349:45	349:45	9	65536
LEAF_NODE	349:45	349:45	10	65536
LEAF_NODE	349:50	349:50	8	,
ARGUMENT	349:52	349:52	8	1
FIELD	349:52	349:52	9	1
LEAF_NODE	349:52	349:52	10	1
LEAF_NODE	349:53	349:53	8	,
ARGUMENT	349:55	349:55	8	0
FIELD	349:55	349:55	9	0
LEAF_NODE	349:55	349:55	10	0
LEAF_NODE	349:56	349:56	8	,
ARGUMENT	349:58	349:58	8	100
FIELD	349:58	349:58	9	100
LEAF_NODE	349:58	349:58	10	100
LEAF_NODE	349:62	349:62	8	)
LEAF_NODE	349:63	349:63	4	;
EXPR_STATEMENT	350:4	350:63	3	failure |= rewrite_test ( "rewrite8.tif" , 65536 , 2 , 0 , 100 ) ;
EXPR	350:4	350:4	4	failure |= rewrite_test ( "rewrite8.tif" , 65536 , 2 , 0 , 100 )
ASSIGN	350:4	350:15	5	failure |= rewrite_test ( "rewrite8.tif" , 65536 , 2 , 0 , 100 )
LVAL	350:4	350:4	6	failure
FIELD	350:4	350:4	7	failure
LEAF_NODE	350:4	350:4	8	failure
ASSIGN_OP	350:12	350:12	6	|=
LEAF_NODE	350:12	350:12	7	|=
RVAL	350:15	350:15	6	rewrite_test ( "rewrite8.tif" , 65536 , 2 , 0 , 100 )
FUNCTION_CALL	350:15	350:62	7	rewrite_test ( "rewrite8.tif" , 65536 , 2 , 0 , 100 )
CALLEE	350:15	350:15	8	rewrite_test
LEAF_NODE	350:15	350:15	9	rewrite_test
LEAF_NODE	350:27	350:27	8	(
ARGUMENT	350:29	350:29	8	"rewrite8.tif"
FIELD	350:29	350:29	9	"rewrite8.tif"
LEAF_NODE	350:29	350:29	10	"rewrite8.tif"
LEAF_NODE	350:43	350:43	8	,
ARGUMENT	350:45	350:45	8	65536
FIELD	350:45	350:45	9	65536
LEAF_NODE	350:45	350:45	10	65536
LEAF_NODE	350:50	350:50	8	,
ARGUMENT	350:52	350:52	8	2
FIELD	350:52	350:52	9	2
LEAF_NODE	350:52	350:52	10	2
LEAF_NODE	350:53	350:53	8	,
ARGUMENT	350:55	350:55	8	0
FIELD	350:55	350:55	9	0
LEAF_NODE	350:55	350:55	10	0
LEAF_NODE	350:56	350:56	8	,
ARGUMENT	350:58	350:58	8	100
FIELD	350:58	350:58	9	100
LEAF_NODE	350:58	350:58	10	100
LEAF_NODE	350:62	350:62	8	)
LEAF_NODE	350:63	350:63	4	;
JUMP_STATEMENT	352:4	352:18	3	return failure ;
KEYWORD	352:4	352:4	4	return
LEAF_NODE	352:4	352:4	5	return
DESTINATION	352:11	352:11	4	failure
EXPR	352:11	352:11	5	failure
FIELD	352:11	352:11	6	failure
LEAF_NODE	352:11	352:11	7	failure
LEAF_NODE	352:18	352:18	4	;
LEAF_NODE	353:0	353:0	2	}
