SOURCE_FILE	26:8	823:2	0	
SIMPLE_DECL	26:8	33:10	1	struct _tag_spec BASE_CLASSES { short id ; char * name ; } tag_spec ;
VAR_DECL	26:8	33:2	2	struct _tag_spec BASE_CLASSES { short id ; char * name ; } tag_spec
TYPE	26:8	26:8	3	struct _tag_spec BASE_CLASSES { short id ; char * name ; }
CLASS_DEF	26:8	33:0	4	struct _tag_spec BASE_CLASSES { short id ; char * name ; }
LEAF_NODE	26:8	26:8	5	struct
CLASS_NAME	26:15	26:15	5	_tag_spec
LEAF_NODE	26:15	26:15	6	_tag_spec
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	27:0	27:0	5	{
CLASS_CONTENT	28:2	31:2	5	short id ; char * name ;
SIMPLE_DECL	28:2	29:6	6	short id ;
VAR_DECL	28:2	29:4	7	short id
TYPE	28:2	28:2	8	short
TYPE_NAME	28:2	28:2	9	short
LEAF_NODE	28:2	28:2	10	short
NAME	29:4	29:4	8	id
LEAF_NODE	29:4	29:4	9	id
LEAF_NODE	29:6	29:6	7	;
SIMPLE_DECL	31:2	32:9	6	char * name ;
VAR_DECL	31:2	32:5	7	char * name
TYPE	31:2	32:4	8	char *
TYPE_NAME	31:2	31:2	9	char
LEAF_NODE	31:2	31:2	10	char
POINTER	32:4	32:4	9	*
LEAF_NODE	32:4	32:4	10	*
NAME	32:5	32:5	8	name
LEAF_NODE	32:5	32:5	9	name
LEAF_NODE	32:9	32:9	7	;
LEAF_NODE	33:0	33:0	5	}
NAME	33:2	33:2	3	tag_spec
LEAF_NODE	33:2	33:2	4	tag_spec
LEAF_NODE	33:10	33:10	2	;
FUNCTION_DEF	94:0	123:0	1	
RETURN_TYPE	94:0	94:0	2	void
TYPE_NAME	94:0	94:0	3	void
LEAF_NODE	94:0	94:0	4	void
FUNCTION_NAME	94:5	94:5	2	formatString
LEAF_NODE	94:5	94:5	3	formatString
PARAMETER_LIST	94:17	94:53	2	( FILE * ofile , const char * s , int len )
LEAF_NODE	94:17	94:17	3	(
PARAMETER_DECL	94:18	94:24	3	FILE * ofile
TYPE	94:18	94:23	4	FILE *
TYPE_NAME	94:18	94:18	5	FILE
LEAF_NODE	94:18	94:18	6	FILE
POINTER	94:23	94:23	5	*
LEAF_NODE	94:23	94:23	6	*
NAME	94:24	94:24	4	ofile
LEAF_NODE	94:24	94:24	5	ofile
LEAF_NODE	94:29	94:29	3	,
PARAMETER_DECL	94:31	94:43	3	const char * s
TYPE	94:31	94:42	4	const char *
TYPE_NAME	94:31	94:37	5	const char
LEAF_NODE	94:31	94:31	6	const
LEAF_NODE	94:37	94:37	6	char
POINTER	94:42	94:42	5	*
LEAF_NODE	94:42	94:42	6	*
NAME	94:43	94:43	4	s
LEAF_NODE	94:43	94:43	5	s
LEAF_NODE	94:44	94:44	3	,
PARAMETER_DECL	94:46	94:50	3	int len
TYPE	94:46	94:46	4	int
TYPE_NAME	94:46	94:46	5	int
LEAF_NODE	94:46	94:46	6	int
NAME	94:50	94:50	4	len
LEAF_NODE	94:50	94:50	5	len
LEAF_NODE	94:53	94:53	3	)
LEAF_NODE	95:0	95:0	2	{
STATEMENTS	96:2	122:2	2	
EXPR_STATEMENT	96:2	96:18	3	putc ( '"' , ofile ) ;
EXPR	96:2	96:2	4	putc ( '"' , ofile )
FUNCTION_CALL	96:2	96:17	5	putc ( '"' , ofile )
CALLEE	96:2	96:2	6	putc
LEAF_NODE	96:2	96:2	7	putc
LEAF_NODE	96:6	96:6	6	(
ARGUMENT	96:7	96:7	6	'"'
FIELD	96:7	96:7	7	'"'
LEAF_NODE	96:7	96:7	8	'"'
LEAF_NODE	96:10	96:10	6	,
ARGUMENT	96:12	96:12	6	ofile
FIELD	96:12	96:12	7	ofile
LEAF_NODE	96:12	96:12	8	ofile
LEAF_NODE	96:17	96:17	6	)
LEAF_NODE	96:18	96:18	4	;
ITERATION	97:2	97:30	3	
KEYWORD	97:2	97:2	4	for
LEAF_NODE	97:2	97:2	5	for
LEAF_NODE	97:6	97:6	4	(
FOR_INIT	97:7	97:7	4	;
LEAF_NODE	97:7	97:7	5	;
CONDITION	97:9	97:9	4	len > 0
EXPR	97:9	97:15	5	len > 0
FIELD	97:9	97:9	6	len
LEAF_NODE	97:9	97:9	7	len
REL_OPERATOR	97:13	97:13	6	>
LEAF_NODE	97:13	97:13	7	>
FIELD	97:15	97:15	6	0
LEAF_NODE	97:15	97:15	7	0
LEAF_NODE	97:16	97:16	4	;
FOR_EXPR	97:18	97:18	4	-- len , ++ s
EXPR	97:18	97:27	5	-- len , ++ s
LEAF_NODE	97:18	97:18	6	--
FIELD	97:20	97:20	6	len
LEAF_NODE	97:20	97:20	7	len
LEAF_NODE	97:23	97:23	6	,
LEAF_NODE	97:25	97:25	6	++
FIELD	97:27	97:27	6	s
LEAF_NODE	97:27	97:27	7	s
LEAF_NODE	97:28	97:28	4	)
STATEMENTS	97:30	121:2	4	
LEAF_NODE	97:30	97:30	5	{
STATEMENTS	98:4	99:4	5	
SIMPLE_DECL	98:4	98:14	6	int c ; c = * s ;
VAR_DECL	98:4	98:8	7	int c ; c = * s
TYPE	98:4	98:4	8	int
TYPE_NAME	98:4	98:4	9	int
LEAF_NODE	98:4	98:4	10	int
NAME	98:8	98:8	8	c
LEAF_NODE	98:8	98:8	9	c
LEAF_NODE	0:0	0:0	8	;
INIT	98:8	98:8	8	c = * s
ASSIGN	98:8	98:12	9	c = * s
LVAL	98:8	98:8	10	c
NAME	98:8	98:8	11	c
LEAF_NODE	98:8	98:8	12	c
ASSIGN_OP	98:10	98:10	10	=
LEAF_NODE	98:10	98:10	11	=
RVAL	98:12	98:12	10	* s
UNARY_EXPR	98:12	98:13	11	* s
UNARY_OPERATOR	98:12	98:12	12	*
LEAF_NODE	98:12	98:12	13	*
FIELD	98:13	98:13	12	s
LEAF_NODE	98:13	98:13	13	s
LEAF_NODE	98:14	98:14	7	;
SELECTION	99:4	99:15	6	
KEYWORD	99:4	99:4	7	switch
LEAF_NODE	99:4	99:4	8	switch
LEAF_NODE	99:11	99:11	7	(
CONDITION	99:12	99:12	7	c
EXPR	99:12	99:12	8	c
FIELD	99:12	99:12	9	c
LEAF_NODE	99:12	99:12	10	c
LEAF_NODE	99:13	99:13	7	)
STATEMENTS	99:15	120:4	7	
LEAF_NODE	99:15	99:15	8	{
STATEMENTS	100:4	119:6	8	
LEAF_NODE	100:4	100:4	9	case
LEAF_NODE	100:9	100:9	9	'&'
LEAF_NODE	100:12	100:12	9	:
EXPR_STATEMENT	101:6	101:27	9	fputs ( "&amp;" , ofile ) ;
EXPR	101:6	101:6	10	fputs ( "&amp;" , ofile )
FUNCTION_CALL	101:6	101:26	11	fputs ( "&amp;" , ofile )
CALLEE	101:6	101:6	12	fputs
LEAF_NODE	101:6	101:6	13	fputs
LEAF_NODE	101:11	101:11	12	(
ARGUMENT	101:12	101:12	12	"&amp;"
FIELD	101:12	101:12	13	"&amp;"
LEAF_NODE	101:12	101:12	14	"&amp;"
LEAF_NODE	101:19	101:19	12	,
ARGUMENT	101:21	101:21	12	ofile
FIELD	101:21	101:21	13	ofile
LEAF_NODE	101:21	101:21	14	ofile
LEAF_NODE	101:26	101:26	12	)
LEAF_NODE	101:27	101:27	10	;
JUMP_STATEMENT	102:6	102:11	9	break DESTINATION ;
KEYWORD	102:6	102:6	10	break
LEAF_NODE	102:6	102:6	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	102:11	102:11	10	;
LEAF_NODE	104:4	104:4	9	case
LEAF_NODE	104:9	104:9	9	'<'
LEAF_NODE	104:12	104:12	9	:
EXPR_STATEMENT	105:6	105:26	9	fputs ( "&lt;" , ofile ) ;
EXPR	105:6	105:6	10	fputs ( "&lt;" , ofile )
FUNCTION_CALL	105:6	105:25	11	fputs ( "&lt;" , ofile )
CALLEE	105:6	105:6	12	fputs
LEAF_NODE	105:6	105:6	13	fputs
LEAF_NODE	105:11	105:11	12	(
ARGUMENT	105:12	105:12	12	"&lt;"
FIELD	105:12	105:12	13	"&lt;"
LEAF_NODE	105:12	105:12	14	"&lt;"
LEAF_NODE	105:18	105:18	12	,
ARGUMENT	105:20	105:20	12	ofile
FIELD	105:20	105:20	13	ofile
LEAF_NODE	105:20	105:20	14	ofile
LEAF_NODE	105:25	105:25	12	)
LEAF_NODE	105:26	105:26	10	;
JUMP_STATEMENT	106:6	106:11	9	break DESTINATION ;
KEYWORD	106:6	106:6	10	break
LEAF_NODE	106:6	106:6	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	106:11	106:11	10	;
LEAF_NODE	107:4	107:4	9	case
LEAF_NODE	107:9	107:9	9	'>'
LEAF_NODE	107:12	107:12	9	:
EXPR_STATEMENT	108:6	108:26	9	fputs ( "&gt;" , ofile ) ;
EXPR	108:6	108:6	10	fputs ( "&gt;" , ofile )
FUNCTION_CALL	108:6	108:25	11	fputs ( "&gt;" , ofile )
CALLEE	108:6	108:6	12	fputs
LEAF_NODE	108:6	108:6	13	fputs
LEAF_NODE	108:11	108:11	12	(
ARGUMENT	108:12	108:12	12	"&gt;"
FIELD	108:12	108:12	13	"&gt;"
LEAF_NODE	108:12	108:12	14	"&gt;"
LEAF_NODE	108:18	108:18	12	,
ARGUMENT	108:20	108:20	12	ofile
FIELD	108:20	108:20	13	ofile
LEAF_NODE	108:20	108:20	14	ofile
LEAF_NODE	108:25	108:25	12	)
LEAF_NODE	108:26	108:26	10	;
JUMP_STATEMENT	109:6	109:11	9	break DESTINATION ;
KEYWORD	109:6	109:6	10	break
LEAF_NODE	109:6	109:6	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	109:11	109:11	10	;
LEAF_NODE	111:4	111:4	9	case
LEAF_NODE	111:9	111:9	9	'"'
LEAF_NODE	111:12	111:12	9	:
EXPR_STATEMENT	112:6	112:28	9	fputs ( "&quot;" , ofile ) ;
EXPR	112:6	112:6	10	fputs ( "&quot;" , ofile )
FUNCTION_CALL	112:6	112:27	11	fputs ( "&quot;" , ofile )
CALLEE	112:6	112:6	12	fputs
LEAF_NODE	112:6	112:6	13	fputs
LEAF_NODE	112:11	112:11	12	(
ARGUMENT	112:12	112:12	12	"&quot;"
FIELD	112:12	112:12	13	"&quot;"
LEAF_NODE	112:12	112:12	14	"&quot;"
LEAF_NODE	112:20	112:20	12	,
ARGUMENT	112:22	112:22	12	ofile
FIELD	112:22	112:22	13	ofile
LEAF_NODE	112:22	112:22	14	ofile
LEAF_NODE	112:27	112:27	12	)
LEAF_NODE	112:28	112:28	10	;
JUMP_STATEMENT	113:6	113:11	9	break DESTINATION ;
KEYWORD	113:6	113:6	10	break
LEAF_NODE	113:6	113:6	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	113:11	113:11	10	;
LABEL	114:4	114:11	9	default :
LEAF_NODE	114:4	114:4	10	default
LEAF_NODE	114:11	114:11	10	:
SELECTION	115:6	116:8	9	
KEYWORD	115:6	115:6	10	if
LEAF_NODE	115:6	115:6	11	if
LEAF_NODE	115:9	115:9	10	(
CONDITION	115:10	115:10	10	iscntrl ( c )
EXPR	115:10	115:10	11	iscntrl ( c )
FUNCTION_CALL	115:10	115:19	12	iscntrl ( c )
CALLEE	115:10	115:10	13	iscntrl
LEAF_NODE	115:10	115:10	14	iscntrl
LEAF_NODE	115:17	115:17	13	(
ARGUMENT	115:18	115:18	13	c
FIELD	115:18	115:18	14	c
LEAF_NODE	115:18	115:18	15	c
LEAF_NODE	115:19	115:19	13	)
LEAF_NODE	115:20	115:20	10	)
STATEMENTS	116:8	116:8	10	
EXPR_STATEMENT	116:8	116:34	11	fprintf ( ofile , "&#%d;" , c ) ;
EXPR	116:8	116:8	12	fprintf ( ofile , "&#%d;" , c )
FUNCTION_CALL	116:8	116:33	13	fprintf ( ofile , "&#%d;" , c )
CALLEE	116:8	116:8	14	fprintf
LEAF_NODE	116:8	116:8	15	fprintf
LEAF_NODE	116:15	116:15	14	(
ARGUMENT	116:16	116:16	14	ofile
FIELD	116:16	116:16	15	ofile
LEAF_NODE	116:16	116:16	16	ofile
LEAF_NODE	116:21	116:21	14	,
ARGUMENT	116:23	116:23	14	"&#%d;"
FIELD	116:23	116:23	15	"&#%d;"
LEAF_NODE	116:23	116:23	16	"&#%d;"
LEAF_NODE	116:30	116:30	14	,
ARGUMENT	116:32	116:32	14	c
FIELD	116:32	116:32	15	c
LEAF_NODE	116:32	116:32	16	c
LEAF_NODE	116:33	116:33	14	)
LEAF_NODE	116:34	116:34	12	;
SELECTION	117:6	118:8	9	
KEYWORD	117:6	117:6	10	else
LEAF_NODE	117:6	117:6	11	else
STATEMENTS	118:8	118:8	10	
EXPR_STATEMENT	118:8	118:23	11	putc ( * s , ofile ) ;
EXPR	118:8	118:8	12	putc ( * s , ofile )
FUNCTION_CALL	118:8	118:22	13	putc ( * s , ofile )
CALLEE	118:8	118:8	14	putc
LEAF_NODE	118:8	118:8	15	putc
LEAF_NODE	118:12	118:12	14	(
ARGUMENT	118:13	118:13	14	* s
UNARY_EXPR	118:13	118:14	15	* s
UNARY_OPERATOR	118:13	118:13	16	*
LEAF_NODE	118:13	118:13	17	*
FIELD	118:14	118:14	16	s
LEAF_NODE	118:14	118:14	17	s
LEAF_NODE	118:15	118:15	14	,
ARGUMENT	118:17	118:17	14	ofile
FIELD	118:17	118:17	15	ofile
LEAF_NODE	118:17	118:17	16	ofile
LEAF_NODE	118:22	118:22	14	)
LEAF_NODE	118:23	118:23	12	;
JUMP_STATEMENT	119:6	119:11	9	break DESTINATION ;
KEYWORD	119:6	119:6	10	break
LEAF_NODE	119:6	119:6	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	119:11	119:11	10	;
LEAF_NODE	120:4	120:4	8	}
LEAF_NODE	121:2	121:2	5	}
EXPR_STATEMENT	122:2	122:22	3	fputs ( "\"\n" , ofile ) ;
EXPR	122:2	122:2	4	fputs ( "\"\n" , ofile )
FUNCTION_CALL	122:2	122:21	5	fputs ( "\"\n" , ofile )
CALLEE	122:2	122:2	6	fputs
LEAF_NODE	122:2	122:2	7	fputs
LEAF_NODE	122:7	122:7	6	(
ARGUMENT	122:8	122:8	6	"\"\n"
FIELD	122:8	122:8	7	"\"\n"
LEAF_NODE	122:8	122:8	8	"\"\n"
LEAF_NODE	122:14	122:14	6	,
ARGUMENT	122:16	122:16	6	ofile
FIELD	122:16	122:16	7	ofile
LEAF_NODE	122:16	122:16	8	ofile
LEAF_NODE	122:21	122:21	6	)
LEAF_NODE	122:22	122:22	4	;
LEAF_NODE	123:0	123:0	2	}
SIMPLE_DECL	125:8	132:11	1	struct _html_code BASE_CLASSES { short len ; const char * code , const char val ; } html_code ;
VAR_DECL	125:8	132:2	2	struct _html_code BASE_CLASSES { short len ; const char * code , const char val ; } html_code
TYPE	125:8	125:8	3	struct _html_code BASE_CLASSES { short len ; const char * code , const char val ; }
CLASS_DEF	125:8	132:0	4	struct _html_code BASE_CLASSES { short len ; const char * code , const char val ; }
LEAF_NODE	125:8	125:8	5	struct
CLASS_NAME	125:15	125:15	5	_html_code
LEAF_NODE	125:15	125:15	6	_html_code
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	126:0	126:0	5	{
CLASS_CONTENT	127:2	129:2	5	short len ; const char * code , const char val ;
SIMPLE_DECL	127:2	128:7	6	short len ;
VAR_DECL	127:2	128:4	7	short len
TYPE	127:2	127:2	8	short
TYPE_NAME	127:2	127:2	9	short
LEAF_NODE	127:2	127:2	10	short
NAME	128:4	128:4	8	len
LEAF_NODE	128:4	128:4	9	len
LEAF_NODE	128:7	128:7	7	;
SIMPLE_DECL	129:2	131:7	6	const char * code , const char val ;
INIT_DECL_LIST	129:2	129:2	7	const char * code , const char val
VAR_DECL	129:2	130:4	8	const char * code
TYPE	129:2	130:3	9	const char *
TYPE_NAME	129:2	129:8	10	const char
LEAF_NODE	129:2	129:2	11	const
LEAF_NODE	129:8	129:8	11	char
POINTER	130:3	130:3	10	*
LEAF_NODE	130:3	130:3	11	*
NAME	130:4	130:4	9	code
LEAF_NODE	130:4	130:4	10	code
LEAF_NODE	130:8	130:8	8	,
VAR_DECL	129:2	131:4	8	const char val
TYPE	129:2	129:2	9	const char
TYPE_NAME	129:2	129:8	10	const char
LEAF_NODE	129:2	129:2	11	const
LEAF_NODE	129:8	129:8	11	char
NAME	131:4	131:4	9	val
LEAF_NODE	131:4	131:4	10	val
LEAF_NODE	131:7	131:7	7	;
LEAF_NODE	132:0	132:0	5	}
NAME	132:2	132:2	3	html_code
LEAF_NODE	132:2	132:2	4	html_code
LEAF_NODE	132:11	132:11	2	;
FUNCTION_DEF	148:0	191:0	1	
RETURN_TYPE	148:0	148:0	2	int
TYPE_NAME	148:0	148:0	3	int
LEAF_NODE	148:0	148:0	4	int
FUNCTION_NAME	148:4	148:4	2	convertHTMLcodes
LEAF_NODE	148:4	148:4	3	convertHTMLcodes
PARAMETER_LIST	148:20	148:37	2	( char * s , int len )
LEAF_NODE	148:20	148:20	3	(
PARAMETER_DECL	148:21	148:27	3	char * s
TYPE	148:21	148:26	4	char *
TYPE_NAME	148:21	148:21	5	char
LEAF_NODE	148:21	148:21	6	char
POINTER	148:26	148:26	5	*
LEAF_NODE	148:26	148:26	6	*
NAME	148:27	148:27	4	s
LEAF_NODE	148:27	148:27	5	s
LEAF_NODE	148:28	148:28	3	,
PARAMETER_DECL	148:30	148:34	3	int len
TYPE	148:30	148:30	4	int
TYPE_NAME	148:30	148:30	5	int
LEAF_NODE	148:30	148:30	6	int
NAME	148:34	148:34	4	len
LEAF_NODE	148:34	148:34	5	len
LEAF_NODE	148:37	148:37	3	)
LEAF_NODE	149:0	149:0	2	{
STATEMENTS	150:2	190:2	2	
SELECTION	150:2	151:4	3	
KEYWORD	150:2	150:2	4	if
LEAF_NODE	150:2	150:2	5	if
LEAF_NODE	150:5	150:5	4	(
CONDITION	150:6	150:6	4	len <= 0 || s == ( char * ) NULL || * s == '\0'
EXPR	150:6	150:6	5	len <= 0 || s == ( char * ) NULL || * s == '\0'
OR	150:6	150:17	6	len <= 0 || s == ( char * ) NULL || * s == '\0'
EXPR	150:6	150:12	7	len <= 0
FIELD	150:6	150:6	8	len
LEAF_NODE	150:6	150:6	9	len
REL_OPERATOR	150:10	150:10	8	<=
LEAF_NODE	150:10	150:10	9	<=
FIELD	150:12	150:12	8	0
LEAF_NODE	150:12	150:12	9	0
LEAF_NODE	150:14	150:14	7	||
EXPR	150:17	150:17	7	s == ( char * ) NULL || * s == '\0'
OR	150:17	150:35	8	s == ( char * ) NULL || * s == '\0'
EXPR	150:17	150:27	9	s == ( char * ) NULL
FIELD	150:17	150:17	10	s
LEAF_NODE	150:17	150:17	11	s
EQ_OPERATOR	150:18	150:18	10	==
LEAF_NODE	150:18	150:18	11	==
LEAF_NODE	150:20	150:20	10	(
TYPE_NAME	150:21	150:21	10	char
LEAF_NODE	150:21	150:21	11	char
LEAF_NODE	150:25	150:25	10	*
LEAF_NODE	150:26	150:26	10	)
FIELD	150:27	150:27	10	NULL
LEAF_NODE	150:27	150:27	11	NULL
LEAF_NODE	150:32	150:32	9	||
EXPR	150:35	150:39	9	* s == '\0'
UNARY_EXPR	150:35	150:36	10	* s
UNARY_OPERATOR	150:35	150:35	11	*
LEAF_NODE	150:35	150:35	12	*
FIELD	150:36	150:36	11	s
LEAF_NODE	150:36	150:36	12	s
EQ_OPERATOR	150:37	150:37	10	==
LEAF_NODE	150:37	150:37	11	==
FIELD	150:39	150:39	10	'\0'
LEAF_NODE	150:39	150:39	11	'\0'
LEAF_NODE	150:43	150:43	4	)
STATEMENTS	151:4	151:4	4	
JUMP_STATEMENT	151:4	151:12	5	return 0 ;
KEYWORD	151:4	151:4	6	return
LEAF_NODE	151:4	151:4	7	return
DESTINATION	151:11	151:11	6	0
EXPR	151:11	151:11	7	0
FIELD	151:11	151:11	8	0
LEAF_NODE	151:11	151:11	9	0
LEAF_NODE	151:12	151:12	6	;
SELECTION	153:2	154:4	3	
KEYWORD	153:2	153:2	4	if
LEAF_NODE	153:2	153:2	5	if
LEAF_NODE	153:5	153:5	4	(
CONDITION	153:6	153:6	4	s [ 1 ] == '#'
EXPR	153:6	153:14	5	s [ 1 ] == '#'
FIELD	153:6	153:9	6	s [ 1 ]
LEAF_NODE	153:6	153:6	7	s
LEAF_NODE	153:7	153:7	7	[
EXPR	153:8	153:8	7	1
FIELD	153:8	153:8	8	1
LEAF_NODE	153:8	153:8	9	1
LEAF_NODE	153:9	153:9	7	]
EQ_OPERATOR	153:11	153:11	6	==
LEAF_NODE	153:11	153:11	7	==
FIELD	153:14	153:14	6	'#'
LEAF_NODE	153:14	153:14	7	'#'
LEAF_NODE	153:17	153:17	4	)
STATEMENTS	154:4	171:4	4	
LEAF_NODE	154:4	154:4	5	{
STATEMENTS	155:6	157:6	5	
SIMPLE_DECL	155:6	155:16	6	int val , int o ;
INIT_DECL_LIST	155:6	155:6	7	int val , int o
VAR_DECL	155:6	155:10	8	int val
TYPE	155:6	155:6	9	int
TYPE_NAME	155:6	155:6	10	int
LEAF_NODE	155:6	155:6	11	int
NAME	155:10	155:10	9	val
LEAF_NODE	155:10	155:10	10	val
LEAF_NODE	155:13	155:13	8	,
VAR_DECL	155:6	155:15	8	int o
TYPE	155:6	155:6	9	int
TYPE_NAME	155:6	155:6	10	int
LEAF_NODE	155:6	155:6	11	int
NAME	155:15	155:15	9	o
LEAF_NODE	155:15	155:15	10	o
LEAF_NODE	155:16	155:16	7	;
SELECTION	157:6	158:8	6	
KEYWORD	157:6	157:6	7	if
LEAF_NODE	157:6	157:6	8	if
LEAF_NODE	157:9	157:9	7	(
CONDITION	157:10	157:10	7	sscanf ( s , "&#%d;" , & val ) == 1
EXPR	157:10	157:36	8	sscanf ( s , "&#%d;" , & val ) == 1
FUNCTION_CALL	157:10	157:31	9	sscanf ( s , "&#%d;" , & val )
CALLEE	157:10	157:10	10	sscanf
LEAF_NODE	157:10	157:10	11	sscanf
LEAF_NODE	157:16	157:16	10	(
ARGUMENT	157:17	157:17	10	s
FIELD	157:17	157:17	11	s
LEAF_NODE	157:17	157:17	12	s
LEAF_NODE	157:18	157:18	10	,
ARGUMENT	157:19	157:19	10	"&#%d;"
FIELD	157:19	157:19	11	"&#%d;"
LEAF_NODE	157:19	157:19	12	"&#%d;"
LEAF_NODE	157:26	157:26	10	,
ARGUMENT	157:27	157:27	10	& val
UNARY_EXPR	157:27	157:28	11	& val
UNARY_OPERATOR	157:27	157:27	12	&
LEAF_NODE	157:27	157:27	13	&
FIELD	157:28	157:28	12	val
LEAF_NODE	157:28	157:28	13	val
LEAF_NODE	157:31	157:31	10	)
EQ_OPERATOR	157:33	157:33	9	==
LEAF_NODE	157:33	157:33	10	==
FIELD	157:36	157:36	9	1
LEAF_NODE	157:36	157:36	10	1
LEAF_NODE	157:37	157:37	7	)
STATEMENTS	158:8	170:8	7	
LEAF_NODE	158:8	158:8	8	{
STATEMENTS	159:10	169:10	8	
EXPR_STATEMENT	159:10	159:15	9	o = 3 ;
EXPR	159:10	159:10	10	o = 3
ASSIGN	159:10	159:14	11	o = 3
LVAL	159:10	159:10	12	o
FIELD	159:10	159:10	13	o
LEAF_NODE	159:10	159:10	14	o
ASSIGN_OP	159:12	159:12	12	=
LEAF_NODE	159:12	159:12	13	=
RVAL	159:14	159:14	12	3
FIELD	159:14	159:14	13	3
LEAF_NODE	159:14	159:14	14	3
LEAF_NODE	159:15	159:15	10	;
ITERATION	160:10	161:12	9	
KEYWORD	160:10	160:10	10	while
LEAF_NODE	160:10	160:10	11	while
LEAF_NODE	160:16	160:16	10	(
CONDITION	160:17	160:17	10	s [ o ] != ';'
EXPR	160:17	160:25	11	s [ o ] != ';'
FIELD	160:17	160:20	12	s [ o ]
LEAF_NODE	160:17	160:17	13	s
LEAF_NODE	160:18	160:18	13	[
EXPR	160:19	160:19	13	o
FIELD	160:19	160:19	14	o
LEAF_NODE	160:19	160:19	15	o
LEAF_NODE	160:20	160:20	13	]
EQ_OPERATOR	160:22	160:22	12	!=
LEAF_NODE	160:22	160:22	13	!=
FIELD	160:25	160:25	12	';'
LEAF_NODE	160:25	160:25	13	';'
LEAF_NODE	160:28	160:28	10	)
STATEMENTS	161:12	165:12	10	
LEAF_NODE	161:12	161:12	11	{
STATEMENTS	162:14	163:14	11	
EXPR_STATEMENT	162:14	162:17	12	o ++ ;
EXPR	162:14	162:14	13	o ++
FIELD	162:14	162:15	14	o ++
LEAF_NODE	162:14	162:14	15	o
LEAF_NODE	162:15	162:15	15	++
LEAF_NODE	162:17	162:17	13	;
SELECTION	163:14	164:16	12	
KEYWORD	163:14	163:14	13	if
LEAF_NODE	163:14	163:14	14	if
LEAF_NODE	163:17	163:17	13	(
CONDITION	163:18	163:18	13	o > 5
EXPR	163:18	163:22	14	o > 5
FIELD	163:18	163:18	15	o
LEAF_NODE	163:18	163:18	16	o
REL_OPERATOR	163:20	163:20	15	>
LEAF_NODE	163:20	163:20	16	>
FIELD	163:22	163:22	15	5
LEAF_NODE	163:22	163:22	16	5
LEAF_NODE	163:23	163:23	13	)
STATEMENTS	164:16	164:16	13	
JUMP_STATEMENT	164:16	164:21	14	break DESTINATION ;
KEYWORD	164:16	164:16	15	break
LEAF_NODE	164:16	164:16	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	164:21	164:21	15	;
LEAF_NODE	165:12	165:12	11	}
SELECTION	166:10	167:12	9	
KEYWORD	166:10	166:10	10	if
LEAF_NODE	166:10	166:10	11	if
LEAF_NODE	166:13	166:13	10	(
CONDITION	166:14	166:14	10	o < 5
EXPR	166:14	166:18	11	o < 5
FIELD	166:14	166:14	12	o
LEAF_NODE	166:14	166:14	13	o
REL_OPERATOR	166:16	166:16	12	<
LEAF_NODE	166:16	166:16	13	<
FIELD	166:18	166:18	12	5
LEAF_NODE	166:18	166:18	13	5
LEAF_NODE	166:19	166:19	10	)
STATEMENTS	167:12	167:12	10	
EXPR_STATEMENT	167:12	167:30	11	strcpy ( s + 1 , s + 1 + o ) ;
EXPR	167:12	167:12	12	strcpy ( s + 1 , s + 1 + o )
FUNCTION_CALL	167:12	167:29	13	strcpy ( s + 1 , s + 1 + o )
CALLEE	167:12	167:12	14	strcpy
LEAF_NODE	167:12	167:12	15	strcpy
LEAF_NODE	167:18	167:18	14	(
ARGUMENT	167:19	167:21	14	s + 1
FIELD	167:19	167:19	15	s
LEAF_NODE	167:19	167:19	16	s
LEAF_NODE	167:20	167:20	15	+
FIELD	167:21	167:21	15	1
LEAF_NODE	167:21	167:21	16	1
LEAF_NODE	167:22	167:22	14	,
ARGUMENT	167:24	167:28	14	s + 1 + o
FIELD	167:24	167:24	15	s
LEAF_NODE	167:24	167:24	16	s
LEAF_NODE	167:25	167:25	15	+
FIELD	167:26	167:26	15	1
LEAF_NODE	167:26	167:26	16	1
LEAF_NODE	167:27	167:27	15	+
FIELD	167:28	167:28	15	o
LEAF_NODE	167:28	167:28	16	o
LEAF_NODE	167:29	167:29	14	)
LEAF_NODE	167:30	167:30	12	;
EXPR_STATEMENT	168:10	168:18	9	* s = val ;
EXPR	168:10	168:10	10	* s = val
ASSIGN	168:10	168:15	11	* s = val
LVAL	168:10	168:10	12	* s
UNARY_EXPR	168:10	168:11	13	* s
UNARY_OPERATOR	168:10	168:10	14	*
LEAF_NODE	168:10	168:10	15	*
FIELD	168:11	168:11	14	s
LEAF_NODE	168:11	168:11	15	s
ASSIGN_OP	168:13	168:13	12	=
LEAF_NODE	168:13	168:13	13	=
RVAL	168:15	168:15	12	val
FIELD	168:15	168:15	13	val
LEAF_NODE	168:15	168:15	14	val
LEAF_NODE	168:18	168:18	10	;
JUMP_STATEMENT	169:10	169:18	9	return o ;
KEYWORD	169:10	169:10	10	return
LEAF_NODE	169:10	169:10	11	return
DESTINATION	169:17	169:17	10	o
EXPR	169:17	169:17	11	o
FIELD	169:17	169:17	12	o
LEAF_NODE	169:17	169:17	13	o
LEAF_NODE	169:18	169:18	10	;
LEAF_NODE	170:8	170:8	8	}
LEAF_NODE	171:4	171:4	5	}
SELECTION	172:2	173:4	3	
KEYWORD	172:2	172:2	4	else
LEAF_NODE	172:2	172:2	5	else
STATEMENTS	173:4	188:4	4	
LEAF_NODE	173:4	173:4	5	{
STATEMENTS	174:6	178:6	5	
SIMPLE_DECL	174:6	176:54	6	int i , int codes ; codes = sizeof ( html_codes ) / sizeof ( html_code ) ;
INIT_DECL_LIST	174:6	174:6	7	int i , int codes ; codes = sizeof ( html_codes ) / sizeof ( html_code )
VAR_DECL	174:6	175:8	8	int i
TYPE	174:6	174:6	9	int
TYPE_NAME	174:6	174:6	10	int
LEAF_NODE	174:6	174:6	11	int
NAME	175:8	175:8	9	i
LEAF_NODE	175:8	175:8	10	i
LEAF_NODE	175:9	175:9	8	,
VAR_DECL	174:6	176:8	8	int codes ; codes = sizeof ( html_codes ) / sizeof ( html_code )
TYPE	174:6	174:6	9	int
TYPE_NAME	174:6	174:6	10	int
LEAF_NODE	174:6	174:6	11	int
NAME	176:8	176:8	9	codes
LEAF_NODE	176:8	176:8	10	codes
LEAF_NODE	0:0	0:0	9	;
INIT	176:8	176:8	9	codes = sizeof ( html_codes ) / sizeof ( html_code )
ASSIGN	176:8	176:16	10	codes = sizeof ( html_codes ) / sizeof ( html_code )
LVAL	176:8	176:8	11	codes
NAME	176:8	176:8	12	codes
LEAF_NODE	176:8	176:8	13	codes
ASSIGN_OP	176:14	176:14	11	=
LEAF_NODE	176:14	176:14	12	=
RVAL	176:16	176:37	11	sizeof ( html_codes ) / sizeof ( html_code )
FUNCTION_CALL	176:16	176:33	12	sizeof ( html_codes )
CALLEE	176:16	176:16	13	sizeof
LEAF_NODE	176:16	176:16	14	sizeof
LEAF_NODE	176:22	176:22	13	(
ARGUMENT	176:23	176:23	13	html_codes
FIELD	176:23	176:23	14	html_codes
LEAF_NODE	176:23	176:23	15	html_codes
LEAF_NODE	176:33	176:33	13	)
LEAF_NODE	176:35	176:35	12	/
FUNCTION_CALL	176:37	176:53	12	sizeof ( html_code )
CALLEE	176:37	176:37	13	sizeof
LEAF_NODE	176:37	176:37	14	sizeof
LEAF_NODE	176:43	176:43	13	(
ARGUMENT	176:44	176:44	13	html_code
FIELD	176:44	176:44	14	html_code
LEAF_NODE	176:44	176:44	15	html_code
LEAF_NODE	176:53	176:53	13	)
LEAF_NODE	176:54	176:54	7	;
ITERATION	178:6	179:8	6	
KEYWORD	178:6	178:6	7	for
LEAF_NODE	178:6	178:6	8	for
LEAF_NODE	178:10	178:10	7	(
FOR_INIT	178:11	178:14	7	i = 0 ;
EXPR	178:11	178:11	8	i = 0
ASSIGN	178:11	178:13	9	i = 0
LVAL	178:11	178:11	10	i
FIELD	178:11	178:11	11	i
LEAF_NODE	178:11	178:11	12	i
ASSIGN_OP	178:12	178:12	10	=
LEAF_NODE	178:12	178:12	11	=
RVAL	178:13	178:13	10	0
FIELD	178:13	178:13	11	0
LEAF_NODE	178:13	178:13	12	0
LEAF_NODE	178:14	178:14	8	;
CONDITION	178:16	178:16	7	i < codes
EXPR	178:16	178:20	8	i < codes
FIELD	178:16	178:16	9	i
LEAF_NODE	178:16	178:16	10	i
REL_OPERATOR	178:18	178:18	9	<
LEAF_NODE	178:18	178:18	10	<
FIELD	178:20	178:20	9	codes
LEAF_NODE	178:20	178:20	10	codes
LEAF_NODE	178:25	178:25	7	;
FOR_EXPR	178:27	178:27	7	i ++
EXPR	178:27	178:27	8	i ++
FIELD	178:27	178:28	9	i ++
LEAF_NODE	178:27	178:27	10	i
LEAF_NODE	178:28	178:28	10	++
LEAF_NODE	178:30	178:30	7	)
STATEMENTS	179:8	187:8	7	
LEAF_NODE	179:8	179:8	8	{
STATEMENTS	180:10	180:10	8	
SELECTION	180:10	181:12	9	
KEYWORD	180:10	180:10	10	if
LEAF_NODE	180:10	180:10	11	if
LEAF_NODE	180:13	180:13	10	(
CONDITION	180:14	180:14	10	html_codes [ i ] . len <= len
EXPR	180:14	180:35	11	html_codes [ i ] . len <= len
FIELD	180:14	180:28	12	html_codes [ i ] . len
LEAF_NODE	180:14	180:14	13	html_codes
LEAF_NODE	180:24	180:24	13	[
EXPR	180:25	180:25	13	i
FIELD	180:25	180:25	14	i
LEAF_NODE	180:25	180:25	15	i
LEAF_NODE	180:26	180:26	13	]
LEAF_NODE	180:27	180:27	13	.
LEAF_NODE	180:28	180:28	13	len
REL_OPERATOR	180:32	180:32	12	<=
LEAF_NODE	180:32	180:32	13	<=
FIELD	180:35	180:35	12	len
LEAF_NODE	180:35	180:35	13	len
LEAF_NODE	180:38	180:38	10	)
STATEMENTS	181:12	181:12	10	
SELECTION	181:12	182:14	11	
KEYWORD	181:12	181:12	12	if
LEAF_NODE	181:12	181:12	13	if
LEAF_NODE	181:15	181:15	12	(
CONDITION	181:16	181:16	12	STRNICMP ( s , html_codes [ i ] . code , html_codes [ i ] . len ) == 0
EXPR	181:16	181:70	13	STRNICMP ( s , html_codes [ i ] . code , html_codes [ i ] . len ) == 0
FUNCTION_CALL	181:16	181:65	14	STRNICMP ( s , html_codes [ i ] . code , html_codes [ i ] . len )
CALLEE	181:16	181:16	15	STRNICMP
LEAF_NODE	181:16	181:16	16	STRNICMP
LEAF_NODE	181:24	181:24	15	(
ARGUMENT	181:25	181:25	15	s
FIELD	181:25	181:25	16	s
LEAF_NODE	181:25	181:25	17	s
LEAF_NODE	181:26	181:26	15	,
ARGUMENT	181:28	181:28	15	html_codes [ i ] . code
FIELD	181:28	181:42	16	html_codes [ i ] . code
LEAF_NODE	181:28	181:28	17	html_codes
LEAF_NODE	181:38	181:38	17	[
EXPR	181:39	181:39	17	i
FIELD	181:39	181:39	18	i
LEAF_NODE	181:39	181:39	19	i
LEAF_NODE	181:40	181:40	17	]
LEAF_NODE	181:41	181:41	17	.
LEAF_NODE	181:42	181:42	17	code
LEAF_NODE	181:46	181:46	15	,
ARGUMENT	181:48	181:48	15	html_codes [ i ] . len
FIELD	181:48	181:62	16	html_codes [ i ] . len
LEAF_NODE	181:48	181:48	17	html_codes
LEAF_NODE	181:58	181:58	17	[
EXPR	181:59	181:59	17	i
FIELD	181:59	181:59	18	i
LEAF_NODE	181:59	181:59	19	i
LEAF_NODE	181:60	181:60	17	]
LEAF_NODE	181:61	181:61	17	.
LEAF_NODE	181:62	181:62	17	len
LEAF_NODE	181:65	181:65	15	)
EQ_OPERATOR	181:67	181:67	14	==
LEAF_NODE	181:67	181:67	15	==
FIELD	181:70	181:70	14	0
LEAF_NODE	181:70	181:70	15	0
LEAF_NODE	181:71	181:71	12	)
STATEMENTS	182:14	186:14	12	
LEAF_NODE	182:14	182:14	13	{
STATEMENTS	183:16	185:16	13	
EXPR_STATEMENT	183:16	183:48	14	strcpy ( s + 1 , s + html_codes [ i ] . len ) ;
EXPR	183:16	183:16	15	strcpy ( s + 1 , s + html_codes [ i ] . len )
FUNCTION_CALL	183:16	183:47	16	strcpy ( s + 1 , s + html_codes [ i ] . len )
CALLEE	183:16	183:16	17	strcpy
LEAF_NODE	183:16	183:16	18	strcpy
LEAF_NODE	183:22	183:22	17	(
ARGUMENT	183:23	183:25	17	s + 1
FIELD	183:23	183:23	18	s
LEAF_NODE	183:23	183:23	19	s
LEAF_NODE	183:24	183:24	18	+
FIELD	183:25	183:25	18	1
LEAF_NODE	183:25	183:25	19	1
LEAF_NODE	183:26	183:26	17	,
ARGUMENT	183:28	183:30	17	s + html_codes [ i ] . len
FIELD	183:28	183:28	18	s
LEAF_NODE	183:28	183:28	19	s
LEAF_NODE	183:29	183:29	18	+
FIELD	183:30	183:44	18	html_codes [ i ] . len
LEAF_NODE	183:30	183:30	19	html_codes
LEAF_NODE	183:40	183:40	19	[
EXPR	183:41	183:41	19	i
FIELD	183:41	183:41	20	i
LEAF_NODE	183:41	183:41	21	i
LEAF_NODE	183:42	183:42	19	]
LEAF_NODE	183:43	183:43	19	.
LEAF_NODE	183:44	183:44	19	len
LEAF_NODE	183:47	183:47	17	)
LEAF_NODE	183:48	183:48	15	;
EXPR_STATEMENT	184:16	184:38	14	* s = html_codes [ i ] . val ;
EXPR	184:16	184:16	15	* s = html_codes [ i ] . val
ASSIGN	184:16	184:21	16	* s = html_codes [ i ] . val
LVAL	184:16	184:16	17	* s
UNARY_EXPR	184:16	184:17	18	* s
UNARY_OPERATOR	184:16	184:16	19	*
LEAF_NODE	184:16	184:16	20	*
FIELD	184:17	184:17	19	s
LEAF_NODE	184:17	184:17	20	s
ASSIGN_OP	184:19	184:19	17	=
LEAF_NODE	184:19	184:19	18	=
RVAL	184:21	184:21	17	html_codes [ i ] . val
FIELD	184:21	184:35	18	html_codes [ i ] . val
LEAF_NODE	184:21	184:21	19	html_codes
LEAF_NODE	184:31	184:31	19	[
EXPR	184:32	184:32	19	i
FIELD	184:32	184:32	20	i
LEAF_NODE	184:32	184:32	21	i
LEAF_NODE	184:33	184:33	19	]
LEAF_NODE	184:34	184:34	19	.
LEAF_NODE	184:35	184:35	19	val
LEAF_NODE	184:38	184:38	15	;
JUMP_STATEMENT	185:16	185:42	14	return html_codes [ i ] . len - 1 ;
KEYWORD	185:16	185:16	15	return
LEAF_NODE	185:16	185:16	16	return
DESTINATION	185:23	185:23	15	html_codes [ i ] . len - 1
EXPR	185:23	185:41	16	html_codes [ i ] . len - 1
FIELD	185:23	185:37	17	html_codes [ i ] . len
LEAF_NODE	185:23	185:23	18	html_codes
LEAF_NODE	185:33	185:33	18	[
EXPR	185:34	185:34	18	i
FIELD	185:34	185:34	19	i
LEAF_NODE	185:34	185:34	20	i
LEAF_NODE	185:35	185:35	18	]
LEAF_NODE	185:36	185:36	18	.
LEAF_NODE	185:37	185:37	18	len
LEAF_NODE	185:40	185:40	17	-
FIELD	185:41	185:41	17	1
LEAF_NODE	185:41	185:41	18	1
LEAF_NODE	185:42	185:42	15	;
LEAF_NODE	186:14	186:14	13	}
LEAF_NODE	187:8	187:8	8	}
LEAF_NODE	188:4	188:4	5	}
JUMP_STATEMENT	190:2	190:10	3	return 0 ;
KEYWORD	190:2	190:2	4	return
LEAF_NODE	190:2	190:2	5	return
DESTINATION	190:9	190:9	4	0
EXPR	190:9	190:9	5	0
FIELD	190:9	190:9	6	0
LEAF_NODE	190:9	190:9	7	0
LEAF_NODE	190:10	190:10	4	;
LEAF_NODE	191:0	191:0	2	}
FUNCTION_DEF	193:0	325:0	1	
RETURN_TYPE	193:0	193:0	2	int
TYPE_NAME	193:0	193:0	3	int
LEAF_NODE	193:0	193:0	4	int
FUNCTION_NAME	193:4	193:4	2	formatIPTC
LEAF_NODE	193:4	193:4	3	formatIPTC
PARAMETER_LIST	193:14	193:39	2	( FILE * ifile , FILE * ofile )
LEAF_NODE	193:14	193:14	3	(
PARAMETER_DECL	193:15	193:21	3	FILE * ifile
TYPE	193:15	193:20	4	FILE *
TYPE_NAME	193:15	193:15	5	FILE
LEAF_NODE	193:15	193:15	6	FILE
POINTER	193:20	193:20	5	*
LEAF_NODE	193:20	193:20	6	*
NAME	193:21	193:21	4	ifile
LEAF_NODE	193:21	193:21	5	ifile
LEAF_NODE	193:26	193:26	3	,
PARAMETER_DECL	193:28	193:34	3	FILE * ofile
TYPE	193:28	193:33	4	FILE *
TYPE_NAME	193:28	193:28	5	FILE
LEAF_NODE	193:28	193:28	6	FILE
POINTER	193:33	193:33	5	*
LEAF_NODE	193:33	193:33	6	*
NAME	193:34	193:34	4	ofile
LEAF_NODE	193:34	193:34	5	ofile
LEAF_NODE	193:39	193:39	3	)
LEAF_NODE	194:0	194:0	2	{
STATEMENTS	195:2	324:2	2	
SIMPLE_DECL	195:2	197:13	3	unsigned int foundiptc , unsigned int tagsfound ;
INIT_DECL_LIST	195:2	195:2	4	unsigned int foundiptc , unsigned int tagsfound
VAR_DECL	195:2	196:4	5	unsigned int foundiptc
TYPE	195:2	195:2	6	unsigned int
TYPE_NAME	195:2	195:11	7	unsigned int
LEAF_NODE	195:2	195:2	8	unsigned
LEAF_NODE	195:11	195:11	8	int
NAME	196:4	196:4	6	foundiptc
LEAF_NODE	196:4	196:4	7	foundiptc
LEAF_NODE	196:13	196:13	5	,
VAR_DECL	195:2	197:4	5	unsigned int tagsfound
TYPE	195:2	195:2	6	unsigned int
TYPE_NAME	195:2	195:11	7	unsigned int
LEAF_NODE	195:2	195:2	8	unsigned
LEAF_NODE	195:11	195:11	8	int
NAME	197:4	197:4	6	tagsfound
LEAF_NODE	197:4	197:4	7	tagsfound
LEAF_NODE	197:13	197:13	4	;
SIMPLE_DECL	199:2	201:8	3	char * readable , char * str ;
INIT_DECL_LIST	199:2	199:2	4	char * readable , char * str
VAR_DECL	199:2	200:5	5	char * readable
TYPE	199:2	200:4	6	char *
TYPE_NAME	199:2	199:2	7	char
LEAF_NODE	199:2	199:2	8	char
POINTER	200:4	200:4	7	*
LEAF_NODE	200:4	200:4	8	*
NAME	200:5	200:5	6	readable
LEAF_NODE	200:5	200:5	7	readable
LEAF_NODE	200:13	200:13	5	,
VAR_DECL	199:2	201:5	5	char * str
TYPE	199:2	201:4	6	char *
TYPE_NAME	199:2	199:2	7	char
LEAF_NODE	199:2	199:2	8	char
POINTER	201:4	201:4	7	*
LEAF_NODE	201:4	201:4	8	*
NAME	201:5	201:5	6	str
LEAF_NODE	201:5	201:5	7	str
LEAF_NODE	201:8	201:8	4	;
SIMPLE_DECL	203:2	205:10	3	long tagindx , long taglen ;
INIT_DECL_LIST	203:2	203:2	4	long tagindx , long taglen
VAR_DECL	203:2	204:4	5	long tagindx
TYPE	203:2	203:2	6	long
TYPE_NAME	203:2	203:2	7	long
LEAF_NODE	203:2	203:2	8	long
NAME	204:4	204:4	6	tagindx
LEAF_NODE	204:4	204:4	7	tagindx
LEAF_NODE	204:11	204:11	5	,
VAR_DECL	203:2	205:4	5	long taglen
TYPE	203:2	203:2	6	long
TYPE_NAME	203:2	203:2	7	long
LEAF_NODE	203:2	203:2	8	long
NAME	205:4	205:4	6	taglen
LEAF_NODE	205:4	205:4	7	taglen
LEAF_NODE	205:10	205:10	4	;
SIMPLE_DECL	207:2	209:46	3	int i , int tagcount ; tagcount = sizeof ( tags ) / sizeof ( tag_spec ) ;
INIT_DECL_LIST	207:2	207:2	4	int i , int tagcount ; tagcount = sizeof ( tags ) / sizeof ( tag_spec )
VAR_DECL	207:2	208:4	5	int i
TYPE	207:2	207:2	6	int
TYPE_NAME	207:2	207:2	7	int
LEAF_NODE	207:2	207:2	8	int
NAME	208:4	208:4	6	i
LEAF_NODE	208:4	208:4	7	i
LEAF_NODE	208:5	208:5	5	,
VAR_DECL	207:2	209:4	5	int tagcount ; tagcount = sizeof ( tags ) / sizeof ( tag_spec )
TYPE	207:2	207:2	6	int
TYPE_NAME	207:2	207:2	7	int
LEAF_NODE	207:2	207:2	8	int
NAME	209:4	209:4	6	tagcount
LEAF_NODE	209:4	209:4	7	tagcount
LEAF_NODE	0:0	0:0	6	;
INIT	209:4	209:4	6	tagcount = sizeof ( tags ) / sizeof ( tag_spec )
ASSIGN	209:4	209:15	7	tagcount = sizeof ( tags ) / sizeof ( tag_spec )
LVAL	209:4	209:4	8	tagcount
NAME	209:4	209:4	9	tagcount
LEAF_NODE	209:4	209:4	10	tagcount
ASSIGN_OP	209:13	209:13	8	=
LEAF_NODE	209:13	209:13	9	=
RVAL	209:15	209:30	8	sizeof ( tags ) / sizeof ( tag_spec )
FUNCTION_CALL	209:15	209:26	9	sizeof ( tags )
CALLEE	209:15	209:15	10	sizeof
LEAF_NODE	209:15	209:15	11	sizeof
LEAF_NODE	209:21	209:21	10	(
ARGUMENT	209:22	209:22	10	tags
FIELD	209:22	209:22	11	tags
LEAF_NODE	209:22	209:22	12	tags
LEAF_NODE	209:26	209:26	10	)
LEAF_NODE	209:28	209:28	9	/
FUNCTION_CALL	209:30	209:45	9	sizeof ( tag_spec )
CALLEE	209:30	209:30	10	sizeof
LEAF_NODE	209:30	209:30	11	sizeof
LEAF_NODE	209:36	209:36	10	(
ARGUMENT	209:37	209:37	10	tag_spec
FIELD	209:37	209:37	11	tag_spec
LEAF_NODE	209:37	209:37	12	tag_spec
LEAF_NODE	209:45	209:45	10	)
LEAF_NODE	209:46	209:46	4	;
SIMPLE_DECL	211:2	214:10	3	int c , int dataset , int recnum ;
INIT_DECL_LIST	211:2	211:2	4	int c , int dataset , int recnum
VAR_DECL	211:2	212:4	5	int c
TYPE	211:2	211:2	6	int
TYPE_NAME	211:2	211:2	7	int
LEAF_NODE	211:2	211:2	8	int
NAME	212:4	212:4	6	c
LEAF_NODE	212:4	212:4	7	c
LEAF_NODE	212:5	212:5	5	,
INIT_DECL_LIST	211:2	211:2	5	int dataset , int recnum
VAR_DECL	211:2	213:4	6	int dataset
TYPE	211:2	211:2	7	int
TYPE_NAME	211:2	211:2	8	int
LEAF_NODE	211:2	211:2	9	int
NAME	213:4	213:4	7	dataset
LEAF_NODE	213:4	213:4	8	dataset
LEAF_NODE	213:11	213:11	6	,
VAR_DECL	211:2	214:4	6	int recnum
TYPE	211:2	211:2	7	int
TYPE_NAME	211:2	211:2	8	int
LEAF_NODE	211:2	211:2	9	int
NAME	214:4	214:4	7	recnum
LEAF_NODE	214:4	214:4	8	recnum
LEAF_NODE	214:10	214:10	4	;
EXPR_STATEMENT	216:2	216:15	3	foundiptc = 0 ;
EXPR	216:2	216:2	4	foundiptc = 0
ASSIGN	216:2	216:14	5	foundiptc = 0
LVAL	216:2	216:2	6	foundiptc
FIELD	216:2	216:2	7	foundiptc
LEAF_NODE	216:2	216:2	8	foundiptc
ASSIGN_OP	216:12	216:12	6	=
LEAF_NODE	216:12	216:12	7	=
RVAL	216:14	216:14	6	0
FIELD	216:14	216:14	7	0
LEAF_NODE	216:14	216:14	8	0
LEAF_NODE	216:15	216:15	4	;
EXPR_STATEMENT	217:2	217:15	3	tagsfound = 0 ;
EXPR	217:2	217:2	4	tagsfound = 0
ASSIGN	217:2	217:14	5	tagsfound = 0
LVAL	217:2	217:2	6	tagsfound
FIELD	217:2	217:2	7	tagsfound
LEAF_NODE	217:2	217:2	8	tagsfound
ASSIGN_OP	217:12	217:12	6	=
LEAF_NODE	217:12	217:12	7	=
RVAL	217:14	217:14	6	0
FIELD	217:14	217:14	7	0
LEAF_NODE	217:14	217:14	8	0
LEAF_NODE	217:15	217:15	4	;
EXPR_STATEMENT	219:2	219:17	3	c = getc ( ifile ) ;
EXPR	219:2	219:2	4	c = getc ( ifile )
ASSIGN	219:2	219:6	5	c = getc ( ifile )
LVAL	219:2	219:2	6	c
FIELD	219:2	219:2	7	c
LEAF_NODE	219:2	219:2	8	c
ASSIGN_OP	219:4	219:4	6	=
LEAF_NODE	219:4	219:4	7	=
RVAL	219:6	219:6	6	getc ( ifile )
FUNCTION_CALL	219:6	219:16	7	getc ( ifile )
CALLEE	219:6	219:6	8	getc
LEAF_NODE	219:6	219:6	9	getc
LEAF_NODE	219:10	219:10	8	(
ARGUMENT	219:11	219:11	8	ifile
FIELD	219:11	219:11	9	ifile
LEAF_NODE	219:11	219:11	10	ifile
LEAF_NODE	219:16	219:16	8	)
LEAF_NODE	219:17	219:17	4	;
ITERATION	220:2	221:4	3	
KEYWORD	220:2	220:2	4	while
LEAF_NODE	220:2	220:2	5	while
LEAF_NODE	220:8	220:8	4	(
CONDITION	220:9	220:9	4	c != EOF
EXPR	220:9	220:14	5	c != EOF
FIELD	220:9	220:9	6	c
LEAF_NODE	220:9	220:9	7	c
EQ_OPERATOR	220:11	220:11	6	!=
LEAF_NODE	220:11	220:11	7	!=
FIELD	220:14	220:14	6	EOF
LEAF_NODE	220:14	220:14	7	EOF
LEAF_NODE	220:17	220:17	4	)
STATEMENTS	221:4	323:4	4	
LEAF_NODE	221:4	221:4	5	{
STATEMENTS	222:6	322:6	5	
SELECTION	222:6	223:8	6	
KEYWORD	222:6	222:6	7	if
LEAF_NODE	222:6	222:6	8	if
LEAF_NODE	222:9	222:9	7	(
CONDITION	222:10	222:10	7	c == 0x1c
EXPR	222:10	222:15	8	c == 0x1c
FIELD	222:10	222:10	9	c
LEAF_NODE	222:10	222:10	10	c
EQ_OPERATOR	222:12	222:12	9	==
LEAF_NODE	222:12	222:12	10	==
FIELD	222:15	222:15	9	0x1c
LEAF_NODE	222:15	222:15	10	0x1c
LEAF_NODE	222:19	222:19	7	)
STATEMENTS	223:8	223:8	7	
EXPR_STATEMENT	223:8	223:21	8	foundiptc = 1 ;
EXPR	223:8	223:8	9	foundiptc = 1
ASSIGN	223:8	223:20	10	foundiptc = 1
LVAL	223:8	223:8	11	foundiptc
FIELD	223:8	223:8	12	foundiptc
LEAF_NODE	223:8	223:8	13	foundiptc
ASSIGN_OP	223:18	223:18	11	=
LEAF_NODE	223:18	223:18	12	=
RVAL	223:20	223:20	11	1
FIELD	223:20	223:20	12	1
LEAF_NODE	223:20	223:20	13	1
LEAF_NODE	223:21	223:21	9	;
SELECTION	224:6	225:8	6	
KEYWORD	224:6	224:6	7	else
LEAF_NODE	224:6	224:6	8	else
STATEMENTS	225:8	235:8	7	
LEAF_NODE	225:8	225:8	8	{
STATEMENTS	226:10	230:10	8	
SELECTION	226:10	227:12	9	
KEYWORD	226:10	226:10	10	if
LEAF_NODE	226:10	226:10	11	if
LEAF_NODE	226:13	226:13	10	(
CONDITION	226:14	226:14	10	foundiptc
EXPR	226:14	226:14	11	foundiptc
FIELD	226:14	226:14	12	foundiptc
LEAF_NODE	226:14	226:14	13	foundiptc
LEAF_NODE	226:23	226:23	10	)
STATEMENTS	227:12	229:12	10	
LEAF_NODE	227:12	227:12	11	{
STATEMENTS	228:14	228:14	11	
JUMP_STATEMENT	228:14	228:23	12	return - 1 ;
KEYWORD	228:14	228:14	13	return
LEAF_NODE	228:14	228:14	14	return
DESTINATION	228:21	228:21	13	- 1
EXPR	228:21	228:21	14	- 1
UNARY_EXPR	228:21	228:22	15	- 1
UNARY_OPERATOR	228:21	228:21	16	-
LEAF_NODE	228:21	228:21	17	-
FIELD	228:22	228:22	16	1
LEAF_NODE	228:22	228:22	17	1
LEAF_NODE	228:23	228:23	13	;
LEAF_NODE	229:12	229:12	11	}
SELECTION	230:10	231:12	9	
KEYWORD	230:10	230:10	10	else
LEAF_NODE	230:10	230:10	11	else
STATEMENTS	231:12	234:12	10	
LEAF_NODE	231:12	231:12	11	{
STATEMENTS	232:14	233:14	11	
EXPR_STATEMENT	232:14	232:29	12	c = getc ( ifile ) ;
EXPR	232:14	232:14	13	c = getc ( ifile )
ASSIGN	232:14	232:18	14	c = getc ( ifile )
LVAL	232:14	232:14	15	c
FIELD	232:14	232:14	16	c
LEAF_NODE	232:14	232:14	17	c
ASSIGN_OP	232:16	232:16	15	=
LEAF_NODE	232:16	232:16	16	=
RVAL	232:18	232:18	15	getc ( ifile )
FUNCTION_CALL	232:18	232:28	16	getc ( ifile )
CALLEE	232:18	232:18	17	getc
LEAF_NODE	232:18	232:18	18	getc
LEAF_NODE	232:22	232:22	17	(
ARGUMENT	232:23	232:23	17	ifile
FIELD	232:23	232:23	18	ifile
LEAF_NODE	232:23	232:23	19	ifile
LEAF_NODE	232:28	232:28	17	)
LEAF_NODE	232:29	232:29	13	;
JUMP_STATEMENT	233:14	233:22	12	continue DESTINATION ;
KEYWORD	233:14	233:14	13	continue
LEAF_NODE	233:14	233:14	14	continue
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	233:22	233:22	13	;
LEAF_NODE	234:12	234:12	11	}
LEAF_NODE	235:8	235:8	8	}
EXPR_STATEMENT	238:6	238:27	6	dataset = getc ( ifile ) ;
EXPR	238:6	238:6	7	dataset = getc ( ifile )
ASSIGN	238:6	238:16	8	dataset = getc ( ifile )
LVAL	238:6	238:6	9	dataset
FIELD	238:6	238:6	10	dataset
LEAF_NODE	238:6	238:6	11	dataset
ASSIGN_OP	238:14	238:14	9	=
LEAF_NODE	238:14	238:14	10	=
RVAL	238:16	238:16	9	getc ( ifile )
FUNCTION_CALL	238:16	238:26	10	getc ( ifile )
CALLEE	238:16	238:16	11	getc
LEAF_NODE	238:16	238:16	12	getc
LEAF_NODE	238:20	238:20	11	(
ARGUMENT	238:21	238:21	11	ifile
FIELD	238:21	238:21	12	ifile
LEAF_NODE	238:21	238:21	13	ifile
LEAF_NODE	238:26	238:26	11	)
LEAF_NODE	238:27	238:27	7	;
SELECTION	239:6	240:8	6	
KEYWORD	239:6	239:6	7	if
LEAF_NODE	239:6	239:6	8	if
LEAF_NODE	239:9	239:9	7	(
CONDITION	239:10	239:10	7	( char ) dataset == EOF
EXPR	239:10	239:28	8	( char ) dataset == EOF
LEAF_NODE	239:10	239:10	9	(
TYPE_NAME	239:11	239:11	9	char
LEAF_NODE	239:11	239:11	10	char
LEAF_NODE	239:15	239:15	9	)
FIELD	239:17	239:17	9	dataset
LEAF_NODE	239:17	239:17	10	dataset
EQ_OPERATOR	239:25	239:25	9	==
LEAF_NODE	239:25	239:25	10	==
FIELD	239:28	239:28	9	EOF
LEAF_NODE	239:28	239:28	10	EOF
LEAF_NODE	239:31	239:31	7	)
STATEMENTS	240:8	240:8	7	
JUMP_STATEMENT	240:8	240:17	8	return - 1 ;
KEYWORD	240:8	240:8	9	return
LEAF_NODE	240:8	240:8	10	return
DESTINATION	240:15	240:15	9	- 1
EXPR	240:15	240:15	10	- 1
UNARY_EXPR	240:15	240:16	11	- 1
UNARY_OPERATOR	240:15	240:15	12	-
LEAF_NODE	240:15	240:15	13	-
FIELD	240:16	240:16	12	1
LEAF_NODE	240:16	240:16	13	1
LEAF_NODE	240:17	240:17	9	;
EXPR_STATEMENT	241:6	241:26	6	recnum = getc ( ifile ) ;
EXPR	241:6	241:6	7	recnum = getc ( ifile )
ASSIGN	241:6	241:15	8	recnum = getc ( ifile )
LVAL	241:6	241:6	9	recnum
FIELD	241:6	241:6	10	recnum
LEAF_NODE	241:6	241:6	11	recnum
ASSIGN_OP	241:13	241:13	9	=
LEAF_NODE	241:13	241:13	10	=
RVAL	241:15	241:15	9	getc ( ifile )
FUNCTION_CALL	241:15	241:25	10	getc ( ifile )
CALLEE	241:15	241:15	11	getc
LEAF_NODE	241:15	241:15	12	getc
LEAF_NODE	241:19	241:19	11	(
ARGUMENT	241:20	241:20	11	ifile
FIELD	241:20	241:20	12	ifile
LEAF_NODE	241:20	241:20	13	ifile
LEAF_NODE	241:25	241:25	11	)
LEAF_NODE	241:26	241:26	7	;
SELECTION	242:6	243:8	6	
KEYWORD	242:6	242:6	7	if
LEAF_NODE	242:6	242:6	8	if
LEAF_NODE	242:9	242:9	7	(
CONDITION	242:10	242:10	7	( char ) recnum == EOF
EXPR	242:10	242:27	8	( char ) recnum == EOF
LEAF_NODE	242:10	242:10	9	(
TYPE_NAME	242:11	242:11	9	char
LEAF_NODE	242:11	242:11	10	char
LEAF_NODE	242:15	242:15	9	)
FIELD	242:17	242:17	9	recnum
LEAF_NODE	242:17	242:17	10	recnum
EQ_OPERATOR	242:24	242:24	9	==
LEAF_NODE	242:24	242:24	10	==
FIELD	242:27	242:27	9	EOF
LEAF_NODE	242:27	242:27	10	EOF
LEAF_NODE	242:30	242:30	7	)
STATEMENTS	243:8	243:8	7	
JUMP_STATEMENT	243:8	243:17	8	return - 1 ;
KEYWORD	243:8	243:8	9	return
LEAF_NODE	243:8	243:8	10	return
DESTINATION	243:15	243:15	9	- 1
EXPR	243:15	243:15	10	- 1
UNARY_EXPR	243:15	243:16	11	- 1
UNARY_OPERATOR	243:15	243:15	12	-
LEAF_NODE	243:15	243:15	13	-
FIELD	243:16	243:16	12	1
LEAF_NODE	243:16	243:16	13	1
LEAF_NODE	243:17	243:17	9	;
ITERATION	245:6	246:8	6	
KEYWORD	245:6	245:6	7	for
LEAF_NODE	245:6	245:6	8	for
LEAF_NODE	245:10	245:10	7	(
FOR_INIT	245:11	245:14	7	i = 0 ;
EXPR	245:11	245:11	8	i = 0
ASSIGN	245:11	245:13	9	i = 0
LVAL	245:11	245:11	10	i
FIELD	245:11	245:11	11	i
LEAF_NODE	245:11	245:11	12	i
ASSIGN_OP	245:12	245:12	10	=
LEAF_NODE	245:12	245:12	11	=
RVAL	245:13	245:13	10	0
FIELD	245:13	245:13	11	0
LEAF_NODE	245:13	245:13	12	0
LEAF_NODE	245:14	245:14	8	;
CONDITION	245:16	245:16	7	i < tagcount
EXPR	245:16	245:19	8	i < tagcount
FIELD	245:16	245:16	9	i
LEAF_NODE	245:16	245:16	10	i
REL_OPERATOR	245:17	245:17	9	<
LEAF_NODE	245:17	245:17	10	<
FIELD	245:19	245:19	9	tagcount
LEAF_NODE	245:19	245:19	10	tagcount
LEAF_NODE	245:27	245:27	7	;
FOR_EXPR	245:29	245:29	7	i ++
EXPR	245:29	245:29	8	i ++
FIELD	245:29	245:30	9	i ++
LEAF_NODE	245:29	245:29	10	i
LEAF_NODE	245:30	245:30	10	++
LEAF_NODE	245:32	245:32	7	)
STATEMENTS	246:8	249:8	7	
LEAF_NODE	246:8	246:8	8	{
STATEMENTS	247:10	247:10	8	
SELECTION	247:10	248:12	9	
KEYWORD	247:10	247:10	10	if
LEAF_NODE	247:10	247:10	11	if
LEAF_NODE	247:13	247:13	10	(
CONDITION	247:14	247:14	10	tags [ i ] . id == recnum
EXPR	247:14	247:28	11	tags [ i ] . id == recnum
FIELD	247:14	247:22	12	tags [ i ] . id
LEAF_NODE	247:14	247:14	13	tags
LEAF_NODE	247:18	247:18	13	[
EXPR	247:19	247:19	13	i
FIELD	247:19	247:19	14	i
LEAF_NODE	247:19	247:19	15	i
LEAF_NODE	247:20	247:20	13	]
LEAF_NODE	247:21	247:21	13	.
LEAF_NODE	247:22	247:22	13	id
EQ_OPERATOR	247:25	247:25	12	==
LEAF_NODE	247:25	247:25	13	==
FIELD	247:28	247:28	12	recnum
LEAF_NODE	247:28	247:28	13	recnum
LEAF_NODE	247:34	247:34	10	)
STATEMENTS	248:12	248:12	10	
JUMP_STATEMENT	248:12	248:17	11	break DESTINATION ;
KEYWORD	248:12	248:12	12	break
LEAF_NODE	248:12	248:12	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	248:17	248:17	12	;
LEAF_NODE	249:8	249:8	8	}
SELECTION	250:6	251:8	6	
KEYWORD	250:6	250:6	7	if
LEAF_NODE	250:6	250:6	8	if
LEAF_NODE	250:9	250:9	7	(
CONDITION	250:10	250:10	7	i < tagcount
EXPR	250:10	250:14	8	i < tagcount
FIELD	250:10	250:10	9	i
LEAF_NODE	250:10	250:10	10	i
REL_OPERATOR	250:12	250:12	9	<
LEAF_NODE	250:12	250:12	10	<
FIELD	250:14	250:14	9	tagcount
LEAF_NODE	250:14	250:14	10	tagcount
LEAF_NODE	250:22	250:22	7	)
STATEMENTS	251:8	251:8	7	
EXPR_STATEMENT	251:8	251:31	8	readable = tags [ i ] . name ;
EXPR	251:8	251:8	9	readable = tags [ i ] . name
ASSIGN	251:8	251:19	10	readable = tags [ i ] . name
LVAL	251:8	251:8	11	readable
FIELD	251:8	251:8	12	readable
LEAF_NODE	251:8	251:8	13	readable
ASSIGN_OP	251:17	251:17	11	=
LEAF_NODE	251:17	251:17	12	=
RVAL	251:19	251:19	11	tags [ i ] . name
FIELD	251:19	251:27	12	tags [ i ] . name
LEAF_NODE	251:19	251:19	13	tags
LEAF_NODE	251:23	251:23	13	[
EXPR	251:24	251:24	13	i
FIELD	251:24	251:24	14	i
LEAF_NODE	251:24	251:24	15	i
LEAF_NODE	251:25	251:25	13	]
LEAF_NODE	251:26	251:26	13	.
LEAF_NODE	251:27	251:27	13	name
LEAF_NODE	251:31	251:31	9	;
SELECTION	252:6	253:8	6	
KEYWORD	252:6	252:6	7	else
LEAF_NODE	252:6	252:6	8	else
STATEMENTS	253:8	253:8	7	
EXPR_STATEMENT	253:8	253:21	8	readable = "" ;
EXPR	253:8	253:8	9	readable = ""
ASSIGN	253:8	253:19	10	readable = ""
LVAL	253:8	253:8	11	readable
FIELD	253:8	253:8	12	readable
LEAF_NODE	253:8	253:8	13	readable
ASSIGN_OP	253:17	253:17	11	=
LEAF_NODE	253:17	253:17	12	=
RVAL	253:19	253:19	11	""
FIELD	253:19	253:19	12	""
LEAF_NODE	253:19	253:19	13	""
LEAF_NODE	253:21	253:21	9	;
EXPR_STATEMENT	256:6	256:21	6	c = getc ( ifile ) ;
EXPR	256:6	256:6	7	c = getc ( ifile )
ASSIGN	256:6	256:10	8	c = getc ( ifile )
LVAL	256:6	256:6	9	c
FIELD	256:6	256:6	10	c
LEAF_NODE	256:6	256:6	11	c
ASSIGN_OP	256:8	256:8	9	=
LEAF_NODE	256:8	256:8	10	=
RVAL	256:10	256:10	9	getc ( ifile )
FUNCTION_CALL	256:10	256:20	10	getc ( ifile )
CALLEE	256:10	256:10	11	getc
LEAF_NODE	256:10	256:10	12	getc
LEAF_NODE	256:14	256:14	11	(
ARGUMENT	256:15	256:15	11	ifile
FIELD	256:15	256:15	12	ifile
LEAF_NODE	256:15	256:15	13	ifile
LEAF_NODE	256:20	256:20	11	)
LEAF_NODE	256:21	256:21	7	;
SELECTION	257:6	258:8	6	
KEYWORD	257:6	257:6	7	if
LEAF_NODE	257:6	257:6	8	if
LEAF_NODE	257:9	257:9	7	(
CONDITION	257:10	257:10	7	c == EOF
EXPR	257:10	257:15	8	c == EOF
FIELD	257:10	257:10	9	c
LEAF_NODE	257:10	257:10	10	c
EQ_OPERATOR	257:12	257:12	9	==
LEAF_NODE	257:12	257:12	10	==
FIELD	257:15	257:15	9	EOF
LEAF_NODE	257:15	257:15	10	EOF
LEAF_NODE	257:18	257:18	7	)
STATEMENTS	258:8	258:8	7	
JUMP_STATEMENT	258:8	258:16	8	return 0 ;
KEYWORD	258:8	258:8	9	return
LEAF_NODE	258:8	258:8	10	return
DESTINATION	258:15	258:15	9	0
EXPR	258:15	258:15	10	0
FIELD	258:15	258:15	11	0
LEAF_NODE	258:15	258:15	12	0
LEAF_NODE	258:16	258:16	9	;
SELECTION	259:6	260:8	6	
KEYWORD	259:6	259:6	7	if
LEAF_NODE	259:6	259:6	8	if
LEAF_NODE	259:9	259:9	7	(
CONDITION	259:10	259:10	7	c & ( unsigned char ) 0x80
EXPR	259:10	259:30	8	c & ( unsigned char ) 0x80
FIELD	259:10	259:10	9	c
LEAF_NODE	259:10	259:10	10	c
LEAF_NODE	259:12	259:12	9	&
LEAF_NODE	259:14	259:14	9	(
TYPE_NAME	259:15	259:24	9	unsigned char
LEAF_NODE	259:15	259:15	10	unsigned
LEAF_NODE	259:24	259:24	10	char
LEAF_NODE	259:28	259:28	9	)
FIELD	259:30	259:30	9	0x80
LEAF_NODE	259:30	259:30	10	0x80
LEAF_NODE	259:34	259:34	7	)
STATEMENTS	260:8	275:8	7	
LEAF_NODE	260:8	260:8	8	{
STATEMENTS	261:10	271:10	8	
SIMPLE_DECL	261:10	262:21	9	unsigned char [ 4 ] buffer ;
VAR_DECL	261:10	262:12	10	unsigned char [ 4 ] buffer
TYPE	261:10	262:18	11	unsigned char [ 4 ]
TYPE_NAME	261:10	261:19	12	unsigned char
LEAF_NODE	261:10	261:10	13	unsigned
LEAF_NODE	261:19	261:19	13	char
TYPE_SUFFIX	262:18	262:20	12	[ 4 ]
LEAF_NODE	262:18	262:18	13	[
FIELD	262:19	262:19	13	4
LEAF_NODE	262:19	262:19	14	4
LEAF_NODE	262:20	262:20	13	]
NAME	262:12	262:12	11	buffer
LEAF_NODE	262:12	262:12	12	buffer
LEAF_NODE	262:21	262:21	10	;
ITERATION	264:10	265:12	9	
KEYWORD	264:10	264:10	10	for
LEAF_NODE	264:10	264:10	11	for
LEAF_NODE	264:14	264:14	10	(
FOR_INIT	264:15	264:18	10	i = 0 ;
EXPR	264:15	264:15	11	i = 0
ASSIGN	264:15	264:17	12	i = 0
LVAL	264:15	264:15	13	i
FIELD	264:15	264:15	14	i
LEAF_NODE	264:15	264:15	15	i
ASSIGN_OP	264:16	264:16	13	=
LEAF_NODE	264:16	264:16	14	=
RVAL	264:17	264:17	13	0
FIELD	264:17	264:17	14	0
LEAF_NODE	264:17	264:17	15	0
LEAF_NODE	264:18	264:18	11	;
CONDITION	264:20	264:20	10	i < 4
EXPR	264:20	264:22	11	i < 4
FIELD	264:20	264:20	12	i
LEAF_NODE	264:20	264:20	13	i
REL_OPERATOR	264:21	264:21	12	<
LEAF_NODE	264:21	264:21	13	<
FIELD	264:22	264:22	12	4
LEAF_NODE	264:22	264:22	13	4
LEAF_NODE	264:23	264:23	10	;
FOR_EXPR	264:25	264:25	10	i ++
EXPR	264:25	264:25	11	i ++
FIELD	264:25	264:26	12	i ++
LEAF_NODE	264:25	264:25	13	i
LEAF_NODE	264:26	264:26	13	++
LEAF_NODE	264:28	264:28	10	)
STATEMENTS	265:12	270:12	10	
LEAF_NODE	265:12	265:12	11	{
STATEMENTS	266:14	269:14	11	
EXPR_STATEMENT	266:14	266:29	12	c = getc ( ifile ) ;
EXPR	266:14	266:14	13	c = getc ( ifile )
ASSIGN	266:14	266:18	14	c = getc ( ifile )
LVAL	266:14	266:14	15	c
FIELD	266:14	266:14	16	c
LEAF_NODE	266:14	266:14	17	c
ASSIGN_OP	266:16	266:16	15	=
LEAF_NODE	266:16	266:16	16	=
RVAL	266:18	266:18	15	getc ( ifile )
FUNCTION_CALL	266:18	266:28	16	getc ( ifile )
CALLEE	266:18	266:18	17	getc
LEAF_NODE	266:18	266:18	18	getc
LEAF_NODE	266:22	266:22	17	(
ARGUMENT	266:23	266:23	17	ifile
FIELD	266:23	266:23	18	ifile
LEAF_NODE	266:23	266:23	19	ifile
LEAF_NODE	266:28	266:28	17	)
LEAF_NODE	266:29	266:29	13	;
SELECTION	267:14	268:16	12	
KEYWORD	267:14	267:14	13	if
LEAF_NODE	267:14	267:14	14	if
LEAF_NODE	267:17	267:17	13	(
CONDITION	267:18	267:18	13	c == EOF
EXPR	267:18	267:23	14	c == EOF
FIELD	267:18	267:18	15	c
LEAF_NODE	267:18	267:18	16	c
EQ_OPERATOR	267:20	267:20	15	==
LEAF_NODE	267:20	267:20	16	==
FIELD	267:23	267:23	15	EOF
LEAF_NODE	267:23	267:23	16	EOF
LEAF_NODE	267:26	267:26	13	)
STATEMENTS	268:16	268:16	13	
JUMP_STATEMENT	268:16	268:25	14	return - 1 ;
KEYWORD	268:16	268:16	15	return
LEAF_NODE	268:16	268:16	16	return
DESTINATION	268:23	268:23	15	- 1
EXPR	268:23	268:23	16	- 1
UNARY_EXPR	268:23	268:24	17	- 1
UNARY_OPERATOR	268:23	268:23	18	-
LEAF_NODE	268:23	268:23	19	-
FIELD	268:24	268:24	18	1
LEAF_NODE	268:24	268:24	19	1
LEAF_NODE	268:25	268:25	15	;
EXPR_STATEMENT	269:14	269:27	12	buffer [ i ] = c ;
EXPR	269:14	269:14	13	buffer [ i ] = c
ASSIGN	269:14	269:26	14	buffer [ i ] = c
LVAL	269:14	269:14	15	buffer [ i ]
FIELD	269:14	269:22	16	buffer [ i ]
LEAF_NODE	269:14	269:14	17	buffer
LEAF_NODE	269:20	269:20	17	[
EXPR	269:21	269:21	17	i
FIELD	269:21	269:21	18	i
LEAF_NODE	269:21	269:21	19	i
LEAF_NODE	269:22	269:22	17	]
ASSIGN_OP	269:24	269:24	15	=
LEAF_NODE	269:24	269:24	16	=
RVAL	269:26	269:26	15	c
FIELD	269:26	269:26	16	c
LEAF_NODE	269:26	269:26	17	c
LEAF_NODE	269:27	269:27	13	;
LEAF_NODE	270:12	270:12	11	}
EXPR_STATEMENT	271:10	274:34	9	taglen = ( ( ( long ) buffer [ 0 ] ) << 24 ) | ( ( ( long ) buffer [ 1 ] ) << 16 ) | ( ( ( long ) buffer [ 2 ] ) << 8 ) | ( ( ( long ) buffer [ 3 ] ) ) ;
EXPR	271:10	271:10	10	taglen = ( ( ( long ) buffer [ 0 ] ) << 24 ) | ( ( ( long ) buffer [ 1 ] ) << 16 ) | ( ( ( long ) buffer [ 2 ] ) << 8 ) | ( ( ( long ) buffer [ 3 ] ) )
ASSIGN	271:10	271:19	11	taglen = ( ( ( long ) buffer [ 0 ] ) << 24 ) | ( ( ( long ) buffer [ 1 ] ) << 16 ) | ( ( ( long ) buffer [ 2 ] ) << 8 ) | ( ( ( long ) buffer [ 3 ] ) )
LVAL	271:10	271:10	12	taglen
FIELD	271:10	271:10	13	taglen
LEAF_NODE	271:10	271:10	14	taglen
ASSIGN_OP	271:17	271:17	12	=
LEAF_NODE	271:17	271:17	13	=
RVAL	271:19	271:19	12	( ( ( long ) buffer [ 0 ] ) << 24 ) | ( ( ( long ) buffer [ 1 ] ) << 16 ) | ( ( ( long ) buffer [ 2 ] ) << 8 ) | ( ( ( long ) buffer [ 3 ] ) )
BIT_OR	271:19	272:12	13	( ( ( long ) buffer [ 0 ] ) << 24 ) | ( ( ( long ) buffer [ 1 ] ) << 16 ) | ( ( ( long ) buffer [ 2 ] ) << 8 ) | ( ( ( long ) buffer [ 3 ] ) )
BIT_OR_ELEM	271:19	271:46	14	( ( ( long ) buffer [ 0 ] ) << 24 )
LEAF_NODE	271:19	271:19	15	(
LEAF_NODE	271:20	271:20	15	(
LEAF_NODE	271:21	271:21	15	(
TYPE_NAME	271:22	271:22	15	long
LEAF_NODE	271:22	271:22	16	long
LEAF_NODE	271:26	271:26	15	)
FIELD	271:28	271:38	15	buffer [ 0 ]
LEAF_NODE	271:28	271:28	16	buffer
LEAF_NODE	271:34	271:34	16	[
EXPR	271:36	271:36	16	0
FIELD	271:36	271:36	17	0
LEAF_NODE	271:36	271:36	18	0
LEAF_NODE	271:38	271:38	16	]
LEAF_NODE	271:39	271:39	15	)
LEAF_NODE	271:41	271:41	15	<<
FIELD	271:44	271:44	15	24
LEAF_NODE	271:44	271:44	16	24
LEAF_NODE	271:46	271:46	15	)
LEAF_NODE	271:48	271:48	14	|
BIT_OR_ELEM	272:12	272:12	14	( ( ( long ) buffer [ 1 ] ) << 16 ) | ( ( ( long ) buffer [ 2 ] ) << 8 ) | ( ( ( long ) buffer [ 3 ] ) )
BIT_OR	272:12	273:12	15	( ( ( long ) buffer [ 1 ] ) << 16 ) | ( ( ( long ) buffer [ 2 ] ) << 8 ) | ( ( ( long ) buffer [ 3 ] ) )
BIT_OR_ELEM	272:12	272:39	16	( ( ( long ) buffer [ 1 ] ) << 16 )
LEAF_NODE	272:12	272:12	17	(
LEAF_NODE	272:13	272:13	17	(
LEAF_NODE	272:14	272:14	17	(
TYPE_NAME	272:15	272:15	17	long
LEAF_NODE	272:15	272:15	18	long
LEAF_NODE	272:19	272:19	17	)
FIELD	272:21	272:31	17	buffer [ 1 ]
LEAF_NODE	272:21	272:21	18	buffer
LEAF_NODE	272:27	272:27	18	[
EXPR	272:29	272:29	18	1
FIELD	272:29	272:29	19	1
LEAF_NODE	272:29	272:29	20	1
LEAF_NODE	272:31	272:31	18	]
LEAF_NODE	272:32	272:32	17	)
LEAF_NODE	272:34	272:34	17	<<
FIELD	272:37	272:37	17	16
LEAF_NODE	272:37	272:37	18	16
LEAF_NODE	272:39	272:39	17	)
LEAF_NODE	272:41	272:41	16	|
BIT_OR_ELEM	273:12	273:12	16	( ( ( long ) buffer [ 2 ] ) << 8 ) | ( ( ( long ) buffer [ 3 ] ) )
BIT_OR	273:12	274:12	17	( ( ( long ) buffer [ 2 ] ) << 8 ) | ( ( ( long ) buffer [ 3 ] ) )
BIT_OR_ELEM	273:12	273:39	18	( ( ( long ) buffer [ 2 ] ) << 8 )
LEAF_NODE	273:12	273:12	19	(
LEAF_NODE	273:13	273:13	19	(
LEAF_NODE	273:14	273:14	19	(
TYPE_NAME	273:15	273:15	19	long
LEAF_NODE	273:15	273:15	20	long
LEAF_NODE	273:19	273:19	19	)
FIELD	273:21	273:31	19	buffer [ 2 ]
LEAF_NODE	273:21	273:21	20	buffer
LEAF_NODE	273:27	273:27	20	[
EXPR	273:29	273:29	20	2
FIELD	273:29	273:29	21	2
LEAF_NODE	273:29	273:29	22	2
LEAF_NODE	273:31	273:31	20	]
LEAF_NODE	273:32	273:32	19	)
LEAF_NODE	273:34	273:34	19	<<
FIELD	273:38	273:38	19	8
LEAF_NODE	273:38	273:38	20	8
LEAF_NODE	273:39	273:39	19	)
LEAF_NODE	273:41	273:41	18	|
BIT_OR_ELEM	274:12	274:33	18	( ( ( long ) buffer [ 3 ] ) )
LEAF_NODE	274:12	274:12	19	(
LEAF_NODE	274:13	274:13	19	(
LEAF_NODE	274:14	274:14	19	(
TYPE_NAME	274:15	274:15	19	long
LEAF_NODE	274:15	274:15	20	long
LEAF_NODE	274:19	274:19	19	)
FIELD	274:21	274:31	19	buffer [ 3 ]
LEAF_NODE	274:21	274:21	20	buffer
LEAF_NODE	274:27	274:27	20	[
EXPR	274:29	274:29	20	3
FIELD	274:29	274:29	21	3
LEAF_NODE	274:29	274:29	22	3
LEAF_NODE	274:31	274:31	20	]
LEAF_NODE	274:32	274:32	19	)
LEAF_NODE	274:33	274:33	19	)
LEAF_NODE	274:34	274:34	10	;
LEAF_NODE	275:8	275:8	8	}
SELECTION	276:6	277:8	6	
KEYWORD	276:6	276:6	7	else
LEAF_NODE	276:6	276:6	8	else
STATEMENTS	277:8	286:8	7	
LEAF_NODE	277:8	277:8	8	{
STATEMENTS	278:10	285:10	8	
SIMPLE_DECL	278:10	279:17	9	int x ; x = c ;
VAR_DECL	278:10	279:12	10	int x ; x = c
TYPE	278:10	278:10	11	int
TYPE_NAME	278:10	278:10	12	int
LEAF_NODE	278:10	278:10	13	int
NAME	279:12	279:12	11	x
LEAF_NODE	279:12	279:12	12	x
LEAF_NODE	0:0	0:0	11	;
INIT	279:12	279:12	11	x = c
ASSIGN	279:12	279:16	12	x = c
LVAL	279:12	279:12	13	x
NAME	279:12	279:12	14	x
LEAF_NODE	279:12	279:12	15	x
ASSIGN_OP	279:14	279:14	13	=
LEAF_NODE	279:14	279:14	14	=
RVAL	279:16	279:16	13	c
FIELD	279:16	279:16	14	c
LEAF_NODE	279:16	279:16	15	c
LEAF_NODE	279:17	279:17	10	;
EXPR_STATEMENT	281:10	281:25	9	taglen = x << 8 ;
EXPR	281:10	281:10	10	taglen = x << 8
ASSIGN	281:10	281:19	11	taglen = x << 8
LVAL	281:10	281:10	12	taglen
FIELD	281:10	281:10	13	taglen
LEAF_NODE	281:10	281:10	14	taglen
ASSIGN_OP	281:17	281:17	12	=
LEAF_NODE	281:17	281:17	13	=
RVAL	281:19	281:24	12	x << 8
FIELD	281:19	281:19	13	x
LEAF_NODE	281:19	281:19	14	x
LEAF_NODE	281:21	281:21	13	<<
FIELD	281:24	281:24	13	8
LEAF_NODE	281:24	281:24	14	8
LEAF_NODE	281:25	281:25	10	;
EXPR_STATEMENT	282:10	282:25	9	x = getc ( ifile ) ;
EXPR	282:10	282:10	10	x = getc ( ifile )
ASSIGN	282:10	282:14	11	x = getc ( ifile )
LVAL	282:10	282:10	12	x
FIELD	282:10	282:10	13	x
LEAF_NODE	282:10	282:10	14	x
ASSIGN_OP	282:12	282:12	12	=
LEAF_NODE	282:12	282:12	13	=
RVAL	282:14	282:14	12	getc ( ifile )
FUNCTION_CALL	282:14	282:24	13	getc ( ifile )
CALLEE	282:14	282:14	14	getc
LEAF_NODE	282:14	282:14	15	getc
LEAF_NODE	282:18	282:18	14	(
ARGUMENT	282:19	282:19	14	ifile
FIELD	282:19	282:19	15	ifile
LEAF_NODE	282:19	282:19	16	ifile
LEAF_NODE	282:24	282:24	14	)
LEAF_NODE	282:25	282:25	10	;
SELECTION	283:10	284:12	9	
KEYWORD	283:10	283:10	10	if
LEAF_NODE	283:10	283:10	11	if
LEAF_NODE	283:13	283:13	10	(
CONDITION	283:14	283:14	10	x == EOF
EXPR	283:14	283:19	11	x == EOF
FIELD	283:14	283:14	12	x
LEAF_NODE	283:14	283:14	13	x
EQ_OPERATOR	283:16	283:16	12	==
LEAF_NODE	283:16	283:16	13	==
FIELD	283:19	283:19	12	EOF
LEAF_NODE	283:19	283:19	13	EOF
LEAF_NODE	283:22	283:22	10	)
STATEMENTS	284:12	284:12	10	
JUMP_STATEMENT	284:12	284:21	11	return - 1 ;
KEYWORD	284:12	284:12	12	return
LEAF_NODE	284:12	284:12	13	return
DESTINATION	284:19	284:19	12	- 1
EXPR	284:19	284:19	13	- 1
UNARY_EXPR	284:19	284:20	14	- 1
UNARY_OPERATOR	284:19	284:19	15	-
LEAF_NODE	284:19	284:19	16	-
FIELD	284:20	284:20	15	1
LEAF_NODE	284:20	284:20	16	1
LEAF_NODE	284:21	284:21	12	;
EXPR_STATEMENT	285:10	285:28	9	taglen |= ( long ) x ;
EXPR	285:10	285:10	10	taglen |= ( long ) x
ASSIGN	285:10	285:20	11	taglen |= ( long ) x
LVAL	285:10	285:10	12	taglen
FIELD	285:10	285:10	13	taglen
LEAF_NODE	285:10	285:10	14	taglen
ASSIGN_OP	285:17	285:17	12	|=
LEAF_NODE	285:17	285:17	13	|=
RVAL	285:20	285:27	12	( long ) x
LEAF_NODE	285:20	285:20	13	(
TYPE_NAME	285:21	285:21	13	long
LEAF_NODE	285:21	285:21	14	long
LEAF_NODE	285:25	285:25	13	)
FIELD	285:27	285:27	13	x
LEAF_NODE	285:27	285:27	14	x
LEAF_NODE	285:28	285:28	10	;
LEAF_NODE	286:8	286:8	8	}
SELECTION	288:6	289:8	6	
KEYWORD	288:6	288:6	7	if
LEAF_NODE	288:6	288:6	8	if
LEAF_NODE	288:9	288:9	7	(
CONDITION	288:10	288:10	7	( taglen <= 0 ) || ( taglen > 1048576 )
EXPR	288:10	288:10	8	( taglen <= 0 ) || ( taglen > 1048576 )
OR	288:10	288:27	9	( taglen <= 0 ) || ( taglen > 1048576 )
EXPR	288:10	288:22	10	( taglen <= 0 )
LEAF_NODE	288:10	288:10	11	(
FIELD	288:11	288:11	11	taglen
LEAF_NODE	288:11	288:11	12	taglen
REL_OPERATOR	288:18	288:18	11	<=
LEAF_NODE	288:18	288:18	12	<=
FIELD	288:21	288:21	11	0
LEAF_NODE	288:21	288:21	12	0
LEAF_NODE	288:22	288:22	11	)
LEAF_NODE	288:24	288:24	10	||
EXPR	288:27	288:44	10	( taglen > 1048576 )
LEAF_NODE	288:27	288:27	11	(
FIELD	288:28	288:28	11	taglen
LEAF_NODE	288:28	288:28	12	taglen
REL_OPERATOR	288:35	288:35	11	>
LEAF_NODE	288:35	288:35	12	>
FIELD	288:37	288:37	11	1048576
LEAF_NODE	288:37	288:37	12	1048576
LEAF_NODE	288:44	288:44	11	)
LEAF_NODE	288:45	288:45	7	)
STATEMENTS	289:8	292:8	7	
LEAF_NODE	289:8	289:8	8	{
STATEMENTS	290:10	291:10	8	
EXPR_STATEMENT	290:10	290:62	9	printf ( "Inappropriate IPTC tag length %ld\n" , taglen ) ;
EXPR	290:10	290:10	10	printf ( "Inappropriate IPTC tag length %ld\n" , taglen )
FUNCTION_CALL	290:10	290:61	11	printf ( "Inappropriate IPTC tag length %ld\n" , taglen )
CALLEE	290:10	290:10	12	printf
LEAF_NODE	290:10	290:10	13	printf
LEAF_NODE	290:16	290:16	12	(
ARGUMENT	290:17	290:17	12	"Inappropriate IPTC tag length %ld\n"
FIELD	290:17	290:17	13	"Inappropriate IPTC tag length %ld\n"
LEAF_NODE	290:17	290:17	14	"Inappropriate IPTC tag length %ld\n"
LEAF_NODE	290:54	290:54	12	,
ARGUMENT	290:55	290:55	12	taglen
FIELD	290:55	290:55	13	taglen
LEAF_NODE	290:55	290:55	14	taglen
LEAF_NODE	290:61	290:61	12	)
LEAF_NODE	290:62	290:62	10	;
JUMP_STATEMENT	291:10	291:19	9	return - 1 ;
KEYWORD	291:10	291:10	10	return
LEAF_NODE	291:10	291:10	11	return
DESTINATION	291:17	291:17	10	- 1
EXPR	291:17	291:17	11	- 1
UNARY_EXPR	291:17	291:18	12	- 1
UNARY_OPERATOR	291:17	291:17	13	-
LEAF_NODE	291:17	291:17	14	-
FIELD	291:18	291:18	13	1
LEAF_NODE	291:18	291:18	14	1
LEAF_NODE	291:19	291:19	10	;
LEAF_NODE	292:8	292:8	8	}
EXPR_STATEMENT	294:6	294:54	6	str = ( char * ) malloc ( ( unsigned int ) ( taglen + 1 ) ) ;
EXPR	294:6	294:6	7	str = ( char * ) malloc ( ( unsigned int ) ( taglen + 1 ) )
ASSIGN	294:6	294:12	8	str = ( char * ) malloc ( ( unsigned int ) ( taglen + 1 ) )
LVAL	294:6	294:6	9	str
FIELD	294:6	294:6	10	str
LEAF_NODE	294:6	294:6	11	str
ASSIGN_OP	294:10	294:10	9	=
LEAF_NODE	294:10	294:10	10	=
RVAL	294:12	294:21	9	( char * ) malloc ( ( unsigned int ) ( taglen + 1 ) )
LEAF_NODE	294:12	294:12	10	(
TYPE_NAME	294:13	294:13	10	char
LEAF_NODE	294:13	294:13	11	char
LEAF_NODE	294:18	294:18	10	*
LEAF_NODE	294:19	294:19	10	)
FUNCTION_CALL	294:21	294:53	10	malloc ( ( unsigned int ) ( taglen + 1 ) )
CALLEE	294:21	294:21	11	malloc
LEAF_NODE	294:21	294:21	12	malloc
LEAF_NODE	294:27	294:27	11	(
ARGUMENT	294:28	294:52	11	( unsigned int ) ( taglen + 1 )
LEAF_NODE	294:28	294:28	12	(
TYPE_NAME	294:29	294:38	12	unsigned int
LEAF_NODE	294:29	294:29	13	unsigned
LEAF_NODE	294:38	294:38	13	int
LEAF_NODE	294:41	294:41	12	)
LEAF_NODE	294:43	294:43	12	(
FIELD	294:44	294:44	12	taglen
LEAF_NODE	294:44	294:44	13	taglen
LEAF_NODE	294:50	294:50	12	+
FIELD	294:51	294:51	12	1
LEAF_NODE	294:51	294:51	13	1
LEAF_NODE	294:52	294:52	12	)
LEAF_NODE	294:53	294:53	11	)
LEAF_NODE	294:54	294:54	7	;
SELECTION	295:6	296:8	6	
KEYWORD	295:6	295:6	7	if
LEAF_NODE	295:6	295:6	8	if
LEAF_NODE	295:9	295:9	7	(
CONDITION	295:10	295:10	7	str == ( char * ) NULL
EXPR	295:10	295:26	8	str == ( char * ) NULL
FIELD	295:10	295:10	9	str
LEAF_NODE	295:10	295:10	10	str
EQ_OPERATOR	295:14	295:14	9	==
LEAF_NODE	295:14	295:14	10	==
LEAF_NODE	295:17	295:17	9	(
TYPE_NAME	295:18	295:18	9	char
LEAF_NODE	295:18	295:18	10	char
LEAF_NODE	295:23	295:23	9	*
LEAF_NODE	295:24	295:24	9	)
FIELD	295:26	295:26	9	NULL
LEAF_NODE	295:26	295:26	10	NULL
LEAF_NODE	295:30	295:30	7	)
STATEMENTS	296:8	299:8	7	
LEAF_NODE	296:8	296:8	8	{
STATEMENTS	297:10	298:10	8	
EXPR_STATEMENT	297:10	297:44	9	printf ( "Memory allocation failed" ) ;
EXPR	297:10	297:10	10	printf ( "Memory allocation failed" )
FUNCTION_CALL	297:10	297:43	11	printf ( "Memory allocation failed" )
CALLEE	297:10	297:10	12	printf
LEAF_NODE	297:10	297:10	13	printf
LEAF_NODE	297:16	297:16	12	(
ARGUMENT	297:17	297:17	12	"Memory allocation failed"
FIELD	297:17	297:17	13	"Memory allocation failed"
LEAF_NODE	297:17	297:17	14	"Memory allocation failed"
LEAF_NODE	297:43	297:43	12	)
LEAF_NODE	297:44	297:44	10	;
JUMP_STATEMENT	298:10	298:18	9	return 0 ;
KEYWORD	298:10	298:10	10	return
LEAF_NODE	298:10	298:10	11	return
DESTINATION	298:17	298:17	10	0
EXPR	298:17	298:17	11	0
FIELD	298:17	298:17	12	0
LEAF_NODE	298:17	298:17	13	0
LEAF_NODE	298:18	298:18	10	;
LEAF_NODE	299:8	299:8	8	}
ITERATION	300:6	301:8	6	
KEYWORD	300:6	300:6	7	for
LEAF_NODE	300:6	300:6	8	for
LEAF_NODE	300:10	300:10	7	(
FOR_INIT	300:11	300:20	7	tagindx = 0 ;
EXPR	300:11	300:11	8	tagindx = 0
ASSIGN	300:11	300:19	9	tagindx = 0
LVAL	300:11	300:11	10	tagindx
FIELD	300:11	300:11	11	tagindx
LEAF_NODE	300:11	300:11	12	tagindx
ASSIGN_OP	300:18	300:18	10	=
LEAF_NODE	300:18	300:18	11	=
RVAL	300:19	300:19	10	0
FIELD	300:19	300:19	11	0
LEAF_NODE	300:19	300:19	12	0
LEAF_NODE	300:20	300:20	8	;
CONDITION	300:22	300:22	7	tagindx < taglen
EXPR	300:22	300:30	8	tagindx < taglen
FIELD	300:22	300:22	9	tagindx
LEAF_NODE	300:22	300:22	10	tagindx
REL_OPERATOR	300:29	300:29	9	<
LEAF_NODE	300:29	300:29	10	<
FIELD	300:30	300:30	9	taglen
LEAF_NODE	300:30	300:30	10	taglen
LEAF_NODE	300:36	300:36	7	;
FOR_EXPR	300:38	300:38	7	tagindx ++
EXPR	300:38	300:38	8	tagindx ++
FIELD	300:38	300:45	9	tagindx ++
LEAF_NODE	300:38	300:38	10	tagindx
LEAF_NODE	300:45	300:45	10	++
LEAF_NODE	300:47	300:47	7	)
STATEMENTS	301:8	309:8	7	
LEAF_NODE	301:8	301:8	8	{
STATEMENTS	302:10	308:10	8	
EXPR_STATEMENT	302:10	302:25	9	c = getc ( ifile ) ;
EXPR	302:10	302:10	10	c = getc ( ifile )
ASSIGN	302:10	302:14	11	c = getc ( ifile )
LVAL	302:10	302:10	12	c
FIELD	302:10	302:10	13	c
LEAF_NODE	302:10	302:10	14	c
ASSIGN_OP	302:12	302:12	12	=
LEAF_NODE	302:12	302:12	13	=
RVAL	302:14	302:14	12	getc ( ifile )
FUNCTION_CALL	302:14	302:24	13	getc ( ifile )
CALLEE	302:14	302:14	14	getc
LEAF_NODE	302:14	302:14	15	getc
LEAF_NODE	302:18	302:18	14	(
ARGUMENT	302:19	302:19	14	ifile
FIELD	302:19	302:19	15	ifile
LEAF_NODE	302:19	302:19	16	ifile
LEAF_NODE	302:24	302:24	14	)
LEAF_NODE	302:25	302:25	10	;
SELECTION	303:10	304:12	9	
KEYWORD	303:10	303:10	10	if
LEAF_NODE	303:10	303:10	11	if
LEAF_NODE	303:13	303:13	10	(
CONDITION	303:14	303:14	10	c == EOF
EXPR	303:14	303:19	11	c == EOF
FIELD	303:14	303:14	12	c
LEAF_NODE	303:14	303:14	13	c
EQ_OPERATOR	303:16	303:16	12	==
LEAF_NODE	303:16	303:16	13	==
FIELD	303:19	303:19	12	EOF
LEAF_NODE	303:19	303:19	13	EOF
LEAF_NODE	303:22	303:22	10	)
STATEMENTS	304:12	307:12	10	
LEAF_NODE	304:12	304:12	11	{
STATEMENTS	305:14	306:14	11	
EXPR_STATEMENT	305:14	305:23	12	free ( str ) ;
EXPR	305:14	305:14	13	free ( str )
FUNCTION_CALL	305:14	305:22	14	free ( str )
CALLEE	305:14	305:14	15	free
LEAF_NODE	305:14	305:14	16	free
LEAF_NODE	305:18	305:18	15	(
ARGUMENT	305:19	305:19	15	str
FIELD	305:19	305:19	16	str
LEAF_NODE	305:19	305:19	17	str
LEAF_NODE	305:22	305:22	15	)
LEAF_NODE	305:23	305:23	13	;
JUMP_STATEMENT	306:14	306:23	12	return - 1 ;
KEYWORD	306:14	306:14	13	return
LEAF_NODE	306:14	306:14	14	return
DESTINATION	306:21	306:21	13	- 1
EXPR	306:21	306:21	14	- 1
UNARY_EXPR	306:21	306:22	15	- 1
UNARY_OPERATOR	306:21	306:21	16	-
LEAF_NODE	306:21	306:21	17	-
FIELD	306:22	306:22	16	1
LEAF_NODE	306:22	306:22	17	1
LEAF_NODE	306:23	306:23	13	;
LEAF_NODE	307:12	307:12	11	}
EXPR_STATEMENT	308:10	308:26	9	str [ tagindx ] = c ;
EXPR	308:10	308:10	10	str [ tagindx ] = c
ASSIGN	308:10	308:25	11	str [ tagindx ] = c
LVAL	308:10	308:10	12	str [ tagindx ]
FIELD	308:10	308:21	13	str [ tagindx ]
LEAF_NODE	308:10	308:10	14	str
LEAF_NODE	308:13	308:13	14	[
EXPR	308:14	308:14	14	tagindx
FIELD	308:14	308:14	15	tagindx
LEAF_NODE	308:14	308:14	16	tagindx
LEAF_NODE	308:21	308:21	14	]
ASSIGN_OP	308:23	308:23	12	=
LEAF_NODE	308:23	308:23	13	=
RVAL	308:25	308:25	12	c
FIELD	308:25	308:25	13	c
LEAF_NODE	308:25	308:25	14	c
LEAF_NODE	308:26	308:26	10	;
LEAF_NODE	309:8	309:8	8	}
EXPR_STATEMENT	310:6	310:23	6	str [ taglen ] = 0 ;
EXPR	310:6	310:6	7	str [ taglen ] = 0
ASSIGN	310:6	310:22	8	str [ taglen ] = 0
LVAL	310:6	310:6	9	str [ taglen ]
FIELD	310:6	310:18	10	str [ taglen ]
LEAF_NODE	310:6	310:6	11	str
LEAF_NODE	310:9	310:9	11	[
EXPR	310:11	310:11	11	taglen
FIELD	310:11	310:11	12	taglen
LEAF_NODE	310:11	310:11	13	taglen
LEAF_NODE	310:18	310:18	11	]
ASSIGN_OP	310:20	310:20	9	=
LEAF_NODE	310:20	310:20	10	=
RVAL	310:22	310:22	9	0
FIELD	310:22	310:22	10	0
LEAF_NODE	310:22	310:22	11	0
LEAF_NODE	310:23	310:23	7	;
SELECTION	313:6	314:8	6	
KEYWORD	313:6	313:6	7	if
LEAF_NODE	313:6	313:6	8	if
LEAF_NODE	313:9	313:9	7	(
CONDITION	313:10	313:10	7	strlen ( readable ) > 0
EXPR	313:10	313:29	8	strlen ( readable ) > 0
FUNCTION_CALL	313:10	313:25	9	strlen ( readable )
CALLEE	313:10	313:10	10	strlen
LEAF_NODE	313:10	313:10	11	strlen
LEAF_NODE	313:16	313:16	10	(
ARGUMENT	313:17	313:17	10	readable
FIELD	313:17	313:17	11	readable
LEAF_NODE	313:17	313:17	12	readable
LEAF_NODE	313:25	313:25	10	)
REL_OPERATOR	313:27	313:27	9	>
LEAF_NODE	313:27	313:27	10	>
FIELD	313:29	313:29	9	0
LEAF_NODE	313:29	313:29	10	0
LEAF_NODE	313:30	313:30	7	)
STATEMENTS	314:8	314:8	7	
EXPR_STATEMENT	314:8	314:90	8	fprintf ( ofile , "%d#%d#%s=" , ( unsigned int ) dataset , ( unsigned int ) recnum , readable ) ;
EXPR	314:8	314:8	9	fprintf ( ofile , "%d#%d#%s=" , ( unsigned int ) dataset , ( unsigned int ) recnum , readable )
FUNCTION_CALL	314:8	314:89	10	fprintf ( ofile , "%d#%d#%s=" , ( unsigned int ) dataset , ( unsigned int ) recnum , readable )
CALLEE	314:8	314:8	11	fprintf
LEAF_NODE	314:8	314:8	12	fprintf
LEAF_NODE	314:15	314:15	11	(
ARGUMENT	314:16	314:16	11	ofile
FIELD	314:16	314:16	12	ofile
LEAF_NODE	314:16	314:16	13	ofile
LEAF_NODE	314:21	314:21	11	,
ARGUMENT	314:23	314:23	11	"%d#%d#%s="
FIELD	314:23	314:23	12	"%d#%d#%s="
LEAF_NODE	314:23	314:23	13	"%d#%d#%s="
LEAF_NODE	314:34	314:34	11	,
ARGUMENT	314:35	314:49	11	( unsigned int ) dataset
LEAF_NODE	314:35	314:35	12	(
TYPE_NAME	314:36	314:45	12	unsigned int
LEAF_NODE	314:36	314:36	13	unsigned
LEAF_NODE	314:45	314:45	13	int
LEAF_NODE	314:48	314:48	12	)
FIELD	314:49	314:49	12	dataset
LEAF_NODE	314:49	314:49	13	dataset
LEAF_NODE	314:56	314:56	11	,
ARGUMENT	314:58	314:73	11	( unsigned int ) recnum
LEAF_NODE	314:58	314:58	12	(
TYPE_NAME	314:59	314:68	12	unsigned int
LEAF_NODE	314:59	314:59	13	unsigned
LEAF_NODE	314:68	314:68	13	int
LEAF_NODE	314:71	314:71	12	)
FIELD	314:73	314:73	12	recnum
LEAF_NODE	314:73	314:73	13	recnum
LEAF_NODE	314:79	314:79	11	,
ARGUMENT	314:81	314:81	11	readable
FIELD	314:81	314:81	12	readable
LEAF_NODE	314:81	314:81	13	readable
LEAF_NODE	314:89	314:89	11	)
LEAF_NODE	314:90	314:90	9	;
SELECTION	315:6	316:8	6	
KEYWORD	315:6	315:6	7	else
LEAF_NODE	315:6	315:6	8	else
STATEMENTS	316:8	316:8	7	
EXPR_STATEMENT	316:8	316:77	8	fprintf ( ofile , "%d#%d=" , ( unsigned int ) dataset , ( unsigned int ) recnum ) ;
EXPR	316:8	316:8	9	fprintf ( ofile , "%d#%d=" , ( unsigned int ) dataset , ( unsigned int ) recnum )
FUNCTION_CALL	316:8	316:76	10	fprintf ( ofile , "%d#%d=" , ( unsigned int ) dataset , ( unsigned int ) recnum )
CALLEE	316:8	316:8	11	fprintf
LEAF_NODE	316:8	316:8	12	fprintf
LEAF_NODE	316:15	316:15	11	(
ARGUMENT	316:16	316:16	11	ofile
FIELD	316:16	316:16	12	ofile
LEAF_NODE	316:16	316:16	13	ofile
LEAF_NODE	316:21	316:21	11	,
ARGUMENT	316:23	316:23	11	"%d#%d="
FIELD	316:23	316:23	12	"%d#%d="
LEAF_NODE	316:23	316:23	13	"%d#%d="
LEAF_NODE	316:31	316:31	11	,
ARGUMENT	316:32	316:46	11	( unsigned int ) dataset
LEAF_NODE	316:32	316:32	12	(
TYPE_NAME	316:33	316:42	12	unsigned int
LEAF_NODE	316:33	316:33	13	unsigned
LEAF_NODE	316:42	316:42	13	int
LEAF_NODE	316:45	316:45	12	)
FIELD	316:46	316:46	12	dataset
LEAF_NODE	316:46	316:46	13	dataset
LEAF_NODE	316:53	316:53	11	,
ARGUMENT	316:55	316:70	11	( unsigned int ) recnum
LEAF_NODE	316:55	316:55	12	(
TYPE_NAME	316:56	316:65	12	unsigned int
LEAF_NODE	316:56	316:56	13	unsigned
LEAF_NODE	316:65	316:65	13	int
LEAF_NODE	316:68	316:68	12	)
FIELD	316:70	316:70	12	recnum
LEAF_NODE	316:70	316:70	13	recnum
LEAF_NODE	316:76	316:76	11	)
LEAF_NODE	316:77	316:77	9	;
EXPR_STATEMENT	317:6	317:40	6	formatString ( ofile , str , taglen ) ;
EXPR	317:6	317:6	7	formatString ( ofile , str , taglen )
FUNCTION_CALL	317:6	317:39	8	formatString ( ofile , str , taglen )
CALLEE	317:6	317:6	9	formatString
LEAF_NODE	317:6	317:6	10	formatString
LEAF_NODE	317:18	317:18	9	(
ARGUMENT	317:20	317:20	9	ofile
FIELD	317:20	317:20	10	ofile
LEAF_NODE	317:20	317:20	11	ofile
LEAF_NODE	317:25	317:25	9	,
ARGUMENT	317:27	317:27	9	str
FIELD	317:27	317:27	10	str
LEAF_NODE	317:27	317:27	11	str
LEAF_NODE	317:30	317:30	9	,
ARGUMENT	317:32	317:32	9	taglen
FIELD	317:32	317:32	10	taglen
LEAF_NODE	317:32	317:32	11	taglen
LEAF_NODE	317:39	317:39	9	)
LEAF_NODE	317:40	317:40	7	;
EXPR_STATEMENT	318:6	318:15	6	free ( str ) ;
EXPR	318:6	318:6	7	free ( str )
FUNCTION_CALL	318:6	318:14	8	free ( str )
CALLEE	318:6	318:6	9	free
LEAF_NODE	318:6	318:6	10	free
LEAF_NODE	318:10	318:10	9	(
ARGUMENT	318:11	318:11	9	str
FIELD	318:11	318:11	10	str
LEAF_NODE	318:11	318:11	11	str
LEAF_NODE	318:14	318:14	9	)
LEAF_NODE	318:15	318:15	7	;
EXPR_STATEMENT	320:6	320:17	6	tagsfound ++ ;
EXPR	320:6	320:6	7	tagsfound ++
FIELD	320:6	320:15	8	tagsfound ++
LEAF_NODE	320:6	320:6	9	tagsfound
LEAF_NODE	320:15	320:15	9	++
LEAF_NODE	320:17	320:17	7	;
EXPR_STATEMENT	322:6	322:21	6	c = getc ( ifile ) ;
EXPR	322:6	322:6	7	c = getc ( ifile )
ASSIGN	322:6	322:10	8	c = getc ( ifile )
LVAL	322:6	322:6	9	c
FIELD	322:6	322:6	10	c
LEAF_NODE	322:6	322:6	11	c
ASSIGN_OP	322:8	322:8	9	=
LEAF_NODE	322:8	322:8	10	=
RVAL	322:10	322:10	9	getc ( ifile )
FUNCTION_CALL	322:10	322:20	10	getc ( ifile )
CALLEE	322:10	322:10	11	getc
LEAF_NODE	322:10	322:10	12	getc
LEAF_NODE	322:14	322:14	11	(
ARGUMENT	322:15	322:15	11	ifile
FIELD	322:15	322:15	12	ifile
LEAF_NODE	322:15	322:15	13	ifile
LEAF_NODE	322:20	322:20	11	)
LEAF_NODE	322:21	322:21	7	;
LEAF_NODE	323:4	323:4	5	}
JUMP_STATEMENT	324:2	324:18	3	return tagsfound ;
KEYWORD	324:2	324:2	4	return
LEAF_NODE	324:2	324:2	5	return
DESTINATION	324:9	324:9	4	tagsfound
EXPR	324:9	324:9	5	tagsfound
FIELD	324:9	324:9	6	tagsfound
LEAF_NODE	324:9	324:9	7	tagsfound
LEAF_NODE	324:18	324:18	4	;
LEAF_NODE	325:0	325:0	2	}
FUNCTION_DEF	331:0	373:0	1	
RETURN_TYPE	331:0	331:5	2	char *
TYPE_NAME	331:0	331:0	3	char
LEAF_NODE	331:0	331:0	4	char
LEAF_NODE	331:5	331:5	3	*
FUNCTION_NAME	331:6	331:6	2	super_fgets
LEAF_NODE	331:6	331:6	3	super_fgets
PARAMETER_LIST	331:17	331:48	2	( char * b , int * blen , FILE * file )
LEAF_NODE	331:17	331:17	3	(
PARAMETER_DECL	331:18	331:24	3	char * b
TYPE	331:18	331:23	4	char *
TYPE_NAME	331:18	331:18	5	char
LEAF_NODE	331:18	331:18	6	char
POINTER	331:23	331:23	5	*
LEAF_NODE	331:23	331:23	6	*
NAME	331:24	331:24	4	b
LEAF_NODE	331:24	331:24	5	b
LEAF_NODE	331:25	331:25	3	,
PARAMETER_DECL	331:27	331:32	3	int * blen
TYPE	331:27	331:31	4	int *
TYPE_NAME	331:27	331:27	5	int
LEAF_NODE	331:27	331:27	6	int
POINTER	331:31	331:31	5	*
LEAF_NODE	331:31	331:31	6	*
NAME	331:32	331:32	4	blen
LEAF_NODE	331:32	331:32	5	blen
LEAF_NODE	331:36	331:36	3	,
PARAMETER_DECL	331:38	331:44	3	FILE * file
TYPE	331:38	331:43	4	FILE *
TYPE_NAME	331:38	331:38	5	FILE
LEAF_NODE	331:38	331:38	6	FILE
POINTER	331:43	331:43	5	*
LEAF_NODE	331:43	331:43	6	*
NAME	331:44	331:44	4	file
LEAF_NODE	331:44	331:44	5	file
LEAF_NODE	331:48	331:48	3	)
LEAF_NODE	332:0	332:0	2	{
STATEMENTS	333:2	372:2	2	
SIMPLE_DECL	333:2	335:7	3	int c , int len ;
INIT_DECL_LIST	333:2	333:2	4	int c , int len
VAR_DECL	333:2	334:4	5	int c
TYPE	333:2	333:2	6	int
TYPE_NAME	333:2	333:2	7	int
LEAF_NODE	333:2	333:2	8	int
NAME	334:4	334:4	6	c
LEAF_NODE	334:4	334:4	7	c
LEAF_NODE	334:5	334:5	5	,
VAR_DECL	333:2	335:4	5	int len
TYPE	333:2	333:2	6	int
TYPE_NAME	333:2	333:2	7	int
LEAF_NODE	333:2	333:2	8	int
NAME	335:4	335:4	6	len
LEAF_NODE	335:4	335:4	7	len
LEAF_NODE	335:7	335:7	4	;
SIMPLE_DECL	337:2	338:6	3	char * q ;
VAR_DECL	337:2	338:5	4	char * q
TYPE	337:2	338:4	5	char *
TYPE_NAME	337:2	337:2	6	char
LEAF_NODE	337:2	337:2	7	char
POINTER	338:4	338:4	6	*
LEAF_NODE	338:4	338:4	7	*
NAME	338:5	338:5	5	q
LEAF_NODE	338:5	338:5	6	q
LEAF_NODE	338:6	338:6	4	;
EXPR_STATEMENT	340:2	340:11	3	len = * blen ;
EXPR	340:2	340:2	4	len = * blen
ASSIGN	340:2	340:6	5	len = * blen
LVAL	340:2	340:2	6	len
FIELD	340:2	340:2	7	len
LEAF_NODE	340:2	340:2	8	len
ASSIGN_OP	340:5	340:5	6	=
LEAF_NODE	340:5	340:5	7	=
RVAL	340:6	340:6	6	* blen
UNARY_EXPR	340:6	340:7	7	* blen
UNARY_OPERATOR	340:6	340:6	8	*
LEAF_NODE	340:6	340:6	9	*
FIELD	340:7	340:7	8	blen
LEAF_NODE	340:7	340:7	9	blen
LEAF_NODE	340:11	340:11	4	;
ITERATION	341:2	342:4	3	
KEYWORD	341:2	341:2	4	for
LEAF_NODE	341:2	341:2	5	for
LEAF_NODE	341:6	341:6	4	(
FOR_INIT	341:7	341:10	4	q = b ;
EXPR	341:7	341:7	5	q = b
ASSIGN	341:7	341:9	6	q = b
LVAL	341:7	341:7	7	q
FIELD	341:7	341:7	8	q
LEAF_NODE	341:7	341:7	9	q
ASSIGN_OP	341:8	341:8	7	=
LEAF_NODE	341:8	341:8	8	=
RVAL	341:9	341:9	7	b
FIELD	341:9	341:9	8	b
LEAF_NODE	341:9	341:9	9	b
LEAF_NODE	341:10	341:10	5	;
LEAF_NODE	0:0	0:0	4	CONDITION
LEAF_NODE	341:12	341:12	4	;
FOR_EXPR	341:14	341:14	4	q ++
EXPR	341:14	341:14	5	q ++
FIELD	341:14	341:15	6	q ++
LEAF_NODE	341:14	341:14	7	q
LEAF_NODE	341:15	341:15	7	++
LEAF_NODE	341:17	341:17	4	)
STATEMENTS	342:4	359:4	4	
LEAF_NODE	342:4	342:4	5	{
STATEMENTS	343:6	358:6	5	
EXPR_STATEMENT	343:6	343:19	6	c = fgetc ( file ) ;
EXPR	343:6	343:6	7	c = fgetc ( file )
ASSIGN	343:6	343:8	8	c = fgetc ( file )
LVAL	343:6	343:6	9	c
FIELD	343:6	343:6	10	c
LEAF_NODE	343:6	343:6	11	c
ASSIGN_OP	343:7	343:7	9	=
LEAF_NODE	343:7	343:7	10	=
RVAL	343:8	343:8	9	fgetc ( file )
FUNCTION_CALL	343:8	343:18	10	fgetc ( file )
CALLEE	343:8	343:8	11	fgetc
LEAF_NODE	343:8	343:8	12	fgetc
LEAF_NODE	343:13	343:13	11	(
ARGUMENT	343:14	343:14	11	file
FIELD	343:14	343:14	12	file
LEAF_NODE	343:14	343:14	13	file
LEAF_NODE	343:18	343:18	11	)
LEAF_NODE	343:19	343:19	7	;
SELECTION	344:6	345:8	6	
KEYWORD	344:6	344:6	7	if
LEAF_NODE	344:6	344:6	8	if
LEAF_NODE	344:9	344:9	7	(
CONDITION	344:10	344:10	7	c == EOF || c == '\n'
EXPR	344:10	344:10	8	c == EOF || c == '\n'
OR	344:10	344:22	9	c == EOF || c == '\n'
EXPR	344:10	344:15	10	c == EOF
FIELD	344:10	344:10	11	c
LEAF_NODE	344:10	344:10	12	c
EQ_OPERATOR	344:12	344:12	11	==
LEAF_NODE	344:12	344:12	12	==
FIELD	344:15	344:15	11	EOF
LEAF_NODE	344:15	344:15	12	EOF
LEAF_NODE	344:19	344:19	10	||
EXPR	344:22	344:27	10	c == '\n'
FIELD	344:22	344:22	11	c
LEAF_NODE	344:22	344:22	12	c
EQ_OPERATOR	344:24	344:24	11	==
LEAF_NODE	344:24	344:24	12	==
FIELD	344:27	344:27	11	'\n'
LEAF_NODE	344:27	344:27	12	'\n'
LEAF_NODE	344:31	344:31	7	)
STATEMENTS	345:8	345:8	7	
JUMP_STATEMENT	345:8	345:13	8	break DESTINATION ;
KEYWORD	345:8	345:8	9	break
LEAF_NODE	345:8	345:8	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	345:13	345:13	9	;
SELECTION	346:6	347:8	6	
KEYWORD	346:6	346:6	7	if
LEAF_NODE	346:6	346:6	8	if
LEAF_NODE	346:9	346:9	7	(
CONDITION	346:10	346:10	7	( ( long ) q - ( long ) b + 1 ) >= ( long ) len
EXPR	346:10	346:45	8	( ( long ) q - ( long ) b + 1 ) >= ( long ) len
LEAF_NODE	346:10	346:10	9	(
LEAF_NODE	346:11	346:11	9	(
TYPE_NAME	346:12	346:12	9	long
LEAF_NODE	346:12	346:12	10	long
LEAF_NODE	346:16	346:16	9	)
FIELD	346:17	346:17	9	q
LEAF_NODE	346:17	346:17	10	q
LEAF_NODE	346:19	346:19	9	-
LEAF_NODE	346:21	346:21	9	(
TYPE_NAME	346:22	346:22	9	long
LEAF_NODE	346:22	346:22	10	long
LEAF_NODE	346:26	346:26	9	)
FIELD	346:27	346:27	9	b
LEAF_NODE	346:27	346:27	10	b
LEAF_NODE	346:29	346:29	9	+
FIELD	346:31	346:31	9	1
LEAF_NODE	346:31	346:31	10	1
LEAF_NODE	346:33	346:33	9	)
REL_OPERATOR	346:35	346:35	9	>=
LEAF_NODE	346:35	346:35	10	>=
LEAF_NODE	346:38	346:38	9	(
TYPE_NAME	346:39	346:39	9	long
LEAF_NODE	346:39	346:39	10	long
LEAF_NODE	346:43	346:43	9	)
FIELD	346:45	346:45	9	len
LEAF_NODE	346:45	346:45	10	len
LEAF_NODE	346:48	346:48	7	)
STATEMENTS	347:8	357:8	7	
LEAF_NODE	347:8	347:8	8	{
STATEMENTS	348:10	356:10	8	
SIMPLE_DECL	348:10	349:16	9	long tlen ;
VAR_DECL	348:10	349:12	10	long tlen
TYPE	348:10	348:10	11	long
TYPE_NAME	348:10	348:10	12	long
LEAF_NODE	348:10	348:10	13	long
NAME	349:12	349:12	11	tlen
LEAF_NODE	349:12	349:12	12	tlen
LEAF_NODE	349:16	349:16	10	;
EXPR_STATEMENT	351:10	351:30	9	tlen = ( long ) q - ( long ) b ;
EXPR	351:10	351:10	10	tlen = ( long ) q - ( long ) b
ASSIGN	351:10	351:15	11	tlen = ( long ) q - ( long ) b
LVAL	351:10	351:10	12	tlen
FIELD	351:10	351:10	13	tlen
LEAF_NODE	351:10	351:10	14	tlen
ASSIGN_OP	351:14	351:14	12	=
LEAF_NODE	351:14	351:14	13	=
RVAL	351:15	351:29	12	( long ) q - ( long ) b
LEAF_NODE	351:15	351:15	13	(
TYPE_NAME	351:16	351:16	13	long
LEAF_NODE	351:16	351:16	14	long
LEAF_NODE	351:20	351:20	13	)
FIELD	351:21	351:21	13	q
LEAF_NODE	351:21	351:21	14	q
LEAF_NODE	351:22	351:22	13	-
LEAF_NODE	351:23	351:23	13	(
TYPE_NAME	351:24	351:24	13	long
LEAF_NODE	351:24	351:24	14	long
LEAF_NODE	351:28	351:28	13	)
FIELD	351:29	351:29	13	b
LEAF_NODE	351:29	351:29	14	b
LEAF_NODE	351:30	351:30	10	;
EXPR_STATEMENT	352:10	352:17	9	len <<= 1 ;
EXPR	352:10	352:10	10	len <<= 1
ASSIGN	352:10	352:16	11	len <<= 1
LVAL	352:10	352:10	12	len
FIELD	352:10	352:10	13	len
LEAF_NODE	352:10	352:10	14	len
ASSIGN_OP	352:13	352:13	12	<<=
LEAF_NODE	352:13	352:13	13	<<=
RVAL	352:16	352:16	12	1
FIELD	352:16	352:16	13	1
LEAF_NODE	352:16	352:16	14	1
LEAF_NODE	352:17	352:17	10	;
EXPR_STATEMENT	353:10	353:48	9	b = ( char * ) realloc ( ( char * ) b , ( len + 2 ) ) ;
EXPR	353:10	353:10	10	b = ( char * ) realloc ( ( char * ) b , ( len + 2 ) )
ASSIGN	353:10	353:12	11	b = ( char * ) realloc ( ( char * ) b , ( len + 2 ) )
LVAL	353:10	353:10	12	b
FIELD	353:10	353:10	13	b
LEAF_NODE	353:10	353:10	14	b
ASSIGN_OP	353:11	353:11	12	=
LEAF_NODE	353:11	353:11	13	=
RVAL	353:12	353:21	12	( char * ) realloc ( ( char * ) b , ( len + 2 ) )
LEAF_NODE	353:12	353:12	13	(
TYPE_NAME	353:13	353:13	13	char
LEAF_NODE	353:13	353:13	14	char
LEAF_NODE	353:18	353:18	13	*
LEAF_NODE	353:19	353:19	13	)
FUNCTION_CALL	353:21	353:47	13	realloc ( ( char * ) b , ( len + 2 ) )
CALLEE	353:21	353:21	14	realloc
LEAF_NODE	353:21	353:21	15	realloc
LEAF_NODE	353:28	353:28	14	(
ARGUMENT	353:29	353:38	14	( char * ) b
LEAF_NODE	353:29	353:29	15	(
TYPE_NAME	353:30	353:30	15	char
LEAF_NODE	353:30	353:30	16	char
LEAF_NODE	353:35	353:35	15	*
LEAF_NODE	353:36	353:36	15	)
FIELD	353:38	353:38	15	b
LEAF_NODE	353:38	353:38	16	b
LEAF_NODE	353:39	353:39	14	,
ARGUMENT	353:40	353:46	14	( len + 2 )
LEAF_NODE	353:40	353:40	15	(
FIELD	353:41	353:41	15	len
LEAF_NODE	353:41	353:41	16	len
LEAF_NODE	353:44	353:44	15	+
FIELD	353:45	353:45	15	2
LEAF_NODE	353:45	353:45	16	2
LEAF_NODE	353:46	353:46	15	)
LEAF_NODE	353:47	353:47	14	)
LEAF_NODE	353:48	353:48	10	;
SELECTION	354:10	355:12	9	
KEYWORD	354:10	354:10	10	if
LEAF_NODE	354:10	354:10	11	if
LEAF_NODE	354:13	354:13	10	(
CONDITION	354:14	354:14	10	( char * ) b == ( char * ) NULL
EXPR	354:14	354:37	11	( char * ) b == ( char * ) NULL
LEAF_NODE	354:14	354:14	12	(
TYPE_NAME	354:15	354:15	12	char
LEAF_NODE	354:15	354:15	13	char
LEAF_NODE	354:20	354:20	12	*
LEAF_NODE	354:21	354:21	12	)
FIELD	354:23	354:23	12	b
LEAF_NODE	354:23	354:23	13	b
EQ_OPERATOR	354:25	354:25	12	==
LEAF_NODE	354:25	354:25	13	==
LEAF_NODE	354:28	354:28	12	(
TYPE_NAME	354:29	354:29	12	char
LEAF_NODE	354:29	354:29	13	char
LEAF_NODE	354:34	354:34	12	*
LEAF_NODE	354:35	354:35	12	)
FIELD	354:37	354:37	12	NULL
LEAF_NODE	354:37	354:37	13	NULL
LEAF_NODE	354:41	354:41	10	)
STATEMENTS	355:12	355:12	10	
JUMP_STATEMENT	355:12	355:17	11	break DESTINATION ;
KEYWORD	355:12	355:12	12	break
LEAF_NODE	355:12	355:12	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	355:17	355:17	12	;
EXPR_STATEMENT	356:10	356:18	9	q = b + tlen ;
EXPR	356:10	356:10	10	q = b + tlen
ASSIGN	356:10	356:12	11	q = b + tlen
LVAL	356:10	356:10	12	q
FIELD	356:10	356:10	13	q
LEAF_NODE	356:10	356:10	14	q
ASSIGN_OP	356:11	356:11	12	=
LEAF_NODE	356:11	356:11	13	=
RVAL	356:12	356:14	12	b + tlen
FIELD	356:12	356:12	13	b
LEAF_NODE	356:12	356:12	14	b
LEAF_NODE	356:13	356:13	13	+
FIELD	356:14	356:14	13	tlen
LEAF_NODE	356:14	356:14	14	tlen
LEAF_NODE	356:18	356:18	10	;
LEAF_NODE	357:8	357:8	8	}
EXPR_STATEMENT	358:6	358:26	6	* q = ( unsigned char ) c ;
EXPR	358:6	358:6	7	* q = ( unsigned char ) c
ASSIGN	358:6	358:9	8	* q = ( unsigned char ) c
LVAL	358:6	358:6	9	* q
UNARY_EXPR	358:6	358:7	10	* q
UNARY_OPERATOR	358:6	358:6	11	*
LEAF_NODE	358:6	358:6	12	*
FIELD	358:7	358:7	11	q
LEAF_NODE	358:7	358:7	12	q
ASSIGN_OP	358:8	358:8	9	=
LEAF_NODE	358:8	358:8	10	=
RVAL	358:9	358:25	9	( unsigned char ) c
LEAF_NODE	358:9	358:9	10	(
TYPE_NAME	358:10	358:19	10	unsigned char
LEAF_NODE	358:10	358:10	11	unsigned
LEAF_NODE	358:19	358:19	11	char
LEAF_NODE	358:23	358:23	10	)
FIELD	358:25	358:25	10	c
LEAF_NODE	358:25	358:25	11	c
LEAF_NODE	358:26	358:26	7	;
LEAF_NODE	359:4	359:4	5	}
EXPR_STATEMENT	360:2	360:9	3	* blen = 0 ;
EXPR	360:2	360:2	4	* blen = 0
ASSIGN	360:2	360:8	5	* blen = 0
LVAL	360:2	360:2	6	* blen
UNARY_EXPR	360:2	360:3	7	* blen
UNARY_OPERATOR	360:2	360:2	8	*
LEAF_NODE	360:2	360:2	9	*
FIELD	360:3	360:3	8	blen
LEAF_NODE	360:3	360:3	9	blen
ASSIGN_OP	360:7	360:7	6	=
LEAF_NODE	360:7	360:7	7	=
RVAL	360:8	360:8	6	0
FIELD	360:8	360:8	7	0
LEAF_NODE	360:8	360:8	8	0
LEAF_NODE	360:9	360:9	4	;
SELECTION	361:2	362:4	3	
KEYWORD	361:2	361:2	4	if
LEAF_NODE	361:2	361:2	5	if
LEAF_NODE	361:5	361:5	4	(
CONDITION	361:6	361:6	4	( unsigned char * ) b != ( unsigned char * ) NULL
EXPR	361:6	361:46	5	( unsigned char * ) b != ( unsigned char * ) NULL
LEAF_NODE	361:6	361:6	6	(
TYPE_NAME	361:7	361:16	6	unsigned char
LEAF_NODE	361:7	361:7	7	unsigned
LEAF_NODE	361:16	361:16	7	char
LEAF_NODE	361:21	361:21	6	*
LEAF_NODE	361:22	361:22	6	)
FIELD	361:23	361:23	6	b
LEAF_NODE	361:23	361:23	7	b
EQ_OPERATOR	361:25	361:25	6	!=
LEAF_NODE	361:25	361:25	7	!=
LEAF_NODE	361:28	361:28	6	(
TYPE_NAME	361:29	361:38	6	unsigned char
LEAF_NODE	361:29	361:29	7	unsigned
LEAF_NODE	361:38	361:38	7	char
LEAF_NODE	361:43	361:43	6	*
LEAF_NODE	361:44	361:44	6	)
FIELD	361:46	361:46	6	NULL
LEAF_NODE	361:46	361:46	7	NULL
LEAF_NODE	361:50	361:50	4	)
STATEMENTS	362:4	371:4	4	
LEAF_NODE	362:4	362:4	5	{
STATEMENTS	363:6	370:6	5	
SIMPLE_DECL	363:6	364:12	6	int tlen ;
VAR_DECL	363:6	364:8	7	int tlen
TYPE	363:6	363:6	8	int
TYPE_NAME	363:6	363:6	9	int
LEAF_NODE	363:6	363:6	10	int
NAME	364:8	364:8	8	tlen
LEAF_NODE	364:8	364:8	9	tlen
LEAF_NODE	364:12	364:12	7	;
EXPR_STATEMENT	366:6	366:28	6	tlen = ( long ) q - ( long ) b ;
EXPR	366:6	366:6	7	tlen = ( long ) q - ( long ) b
ASSIGN	366:6	366:11	8	tlen = ( long ) q - ( long ) b
LVAL	366:6	366:6	9	tlen
FIELD	366:6	366:6	10	tlen
LEAF_NODE	366:6	366:6	11	tlen
ASSIGN_OP	366:10	366:10	9	=
LEAF_NODE	366:10	366:10	10	=
RVAL	366:11	366:27	9	( long ) q - ( long ) b
LEAF_NODE	366:11	366:11	10	(
TYPE_NAME	366:12	366:12	10	long
LEAF_NODE	366:12	366:12	11	long
LEAF_NODE	366:16	366:16	10	)
FIELD	366:17	366:17	10	q
LEAF_NODE	366:17	366:17	11	q
LEAF_NODE	366:19	366:19	10	-
LEAF_NODE	366:21	366:21	10	(
TYPE_NAME	366:22	366:22	10	long
LEAF_NODE	366:22	366:22	11	long
LEAF_NODE	366:26	366:26	10	)
FIELD	366:27	366:27	10	b
LEAF_NODE	366:27	366:27	11	b
LEAF_NODE	366:28	366:28	7	;
SELECTION	367:6	368:8	6	
KEYWORD	367:6	367:6	7	if
LEAF_NODE	367:6	367:6	8	if
LEAF_NODE	367:9	367:9	7	(
CONDITION	367:10	367:10	7	tlen == 0
EXPR	367:10	367:18	8	tlen == 0
FIELD	367:10	367:10	9	tlen
LEAF_NODE	367:10	367:10	10	tlen
EQ_OPERATOR	367:15	367:15	9	==
LEAF_NODE	367:15	367:15	10	==
FIELD	367:18	367:18	9	0
LEAF_NODE	367:18	367:18	10	0
LEAF_NODE	367:19	367:19	7	)
STATEMENTS	368:8	368:8	7	
JUMP_STATEMENT	368:8	368:28	8	return ( char * ) NULL ;
KEYWORD	368:8	368:8	9	return
LEAF_NODE	368:8	368:8	10	return
DESTINATION	368:15	368:15	9	( char * ) NULL
EXPR	368:15	368:24	10	( char * ) NULL
LEAF_NODE	368:15	368:15	11	(
TYPE_NAME	368:16	368:16	11	char
LEAF_NODE	368:16	368:16	12	char
LEAF_NODE	368:21	368:21	11	*
LEAF_NODE	368:22	368:22	11	)
FIELD	368:24	368:24	11	NULL
LEAF_NODE	368:24	368:24	12	NULL
LEAF_NODE	368:28	368:28	9	;
EXPR_STATEMENT	369:6	369:20	6	b [ tlen ] = '\0' ;
EXPR	369:6	369:6	7	b [ tlen ] = '\0'
ASSIGN	369:6	369:16	8	b [ tlen ] = '\0'
LVAL	369:6	369:6	9	b [ tlen ]
FIELD	369:6	369:12	10	b [ tlen ]
LEAF_NODE	369:6	369:6	11	b
LEAF_NODE	369:7	369:7	11	[
EXPR	369:8	369:8	11	tlen
FIELD	369:8	369:8	12	tlen
LEAF_NODE	369:8	369:8	13	tlen
LEAF_NODE	369:12	369:12	11	]
ASSIGN_OP	369:14	369:14	9	=
LEAF_NODE	369:14	369:14	10	=
RVAL	369:16	369:16	9	'\0'
FIELD	369:16	369:16	10	'\0'
LEAF_NODE	369:16	369:16	11	'\0'
LEAF_NODE	369:20	369:20	7	;
EXPR_STATEMENT	370:6	370:18	6	* blen = ++ tlen ;
EXPR	370:6	370:6	7	* blen = ++ tlen
ASSIGN	370:6	370:12	8	* blen = ++ tlen
LVAL	370:6	370:6	9	* blen
UNARY_EXPR	370:6	370:7	10	* blen
UNARY_OPERATOR	370:6	370:6	11	*
LEAF_NODE	370:6	370:6	12	*
FIELD	370:7	370:7	11	blen
LEAF_NODE	370:7	370:7	12	blen
ASSIGN_OP	370:11	370:11	9	=
LEAF_NODE	370:11	370:11	10	=
RVAL	370:12	370:14	9	++ tlen
LEAF_NODE	370:12	370:12	10	++
FIELD	370:14	370:14	10	tlen
LEAF_NODE	370:14	370:14	11	tlen
LEAF_NODE	370:18	370:18	7	;
LEAF_NODE	371:4	371:4	5	}
JUMP_STATEMENT	372:2	372:10	3	return b ;
KEYWORD	372:2	372:2	4	return
LEAF_NODE	372:2	372:2	5	return
DESTINATION	372:9	372:9	4	b
EXPR	372:9	372:9	5	b
FIELD	372:9	372:9	6	b
LEAF_NODE	372:9	372:9	7	b
LEAF_NODE	372:10	372:10	4	;
LEAF_NODE	373:0	373:0	2	}
FUNCTION_DEF	377:0	581:0	1	
RETURN_TYPE	377:0	377:0	2	int
TYPE_NAME	377:0	377:0	3	int
LEAF_NODE	377:0	377:0	4	int
FUNCTION_NAME	377:4	377:4	2	main
LEAF_NODE	377:4	377:4	3	main
PARAMETER_LIST	377:8	377:31	2	( int argc , char * [ ] argv )
LEAF_NODE	377:8	377:8	3	(
PARAMETER_DECL	377:9	377:13	3	int argc
TYPE	377:9	377:9	4	int
TYPE_NAME	377:9	377:9	5	int
LEAF_NODE	377:9	377:9	6	int
NAME	377:13	377:13	4	argc
LEAF_NODE	377:13	377:13	5	argc
LEAF_NODE	377:17	377:17	3	,
PARAMETER_DECL	377:19	377:25	3	char * [ ] argv
TYPE	377:19	377:29	4	char * [ ]
TYPE_NAME	377:19	377:19	5	char
LEAF_NODE	377:19	377:19	6	char
POINTER	377:24	377:24	5	*
LEAF_NODE	377:24	377:24	6	*
TYPE_SUFFIX	377:29	377:30	5	[ ]
LEAF_NODE	377:29	377:29	6	[
LEAF_NODE	377:30	377:30	6	]
NAME	377:25	377:25	4	argv
LEAF_NODE	377:25	377:25	5	argv
LEAF_NODE	377:31	377:31	3	)
LEAF_NODE	378:0	378:0	2	{
STATEMENTS	385:2	580:2	2	
SIMPLE_DECL	385:2	387:8	3	int i , int mode ;
INIT_DECL_LIST	385:2	385:2	4	int i , int mode
VAR_DECL	385:2	386:4	5	int i
TYPE	385:2	385:2	6	int
TYPE_NAME	385:2	385:2	7	int
LEAF_NODE	385:2	385:2	8	int
NAME	386:4	386:4	6	i
LEAF_NODE	386:4	386:4	7	i
LEAF_NODE	386:5	386:5	5	,
VAR_DECL	385:2	387:4	5	int mode
TYPE	385:2	385:2	6	int
TYPE_NAME	385:2	385:2	7	int
LEAF_NODE	385:2	385:2	8	int
NAME	387:4	387:4	6	mode
LEAF_NODE	387:4	387:4	7	mode
LEAF_NODE	387:8	387:8	4	;
SIMPLE_DECL	389:2	391:19	3	FILE * ifile ; ifile = stdin , FILE * ofile ; ofile = stdout ;
INIT_DECL_LIST	389:2	389:2	4	FILE * ifile ; ifile = stdin , FILE * ofile ; ofile = stdout
VAR_DECL	389:2	390:5	5	FILE * ifile ; ifile = stdin
TYPE	389:2	390:4	6	FILE *
TYPE_NAME	389:2	389:2	7	FILE
LEAF_NODE	389:2	389:2	8	FILE
POINTER	390:4	390:4	7	*
LEAF_NODE	390:4	390:4	8	*
NAME	390:5	390:5	6	ifile
LEAF_NODE	390:5	390:5	7	ifile
LEAF_NODE	0:0	0:0	6	;
INIT	390:5	390:5	6	ifile = stdin
ASSIGN	390:5	390:13	7	ifile = stdin
LVAL	390:5	390:5	8	ifile
NAME	390:5	390:5	9	ifile
LEAF_NODE	390:5	390:5	10	ifile
ASSIGN_OP	390:11	390:11	8	=
LEAF_NODE	390:11	390:11	9	=
RVAL	390:13	390:13	8	stdin
FIELD	390:13	390:13	9	stdin
LEAF_NODE	390:13	390:13	10	stdin
LEAF_NODE	390:18	390:18	5	,
VAR_DECL	389:2	391:5	5	FILE * ofile ; ofile = stdout
TYPE	389:2	391:4	6	FILE *
TYPE_NAME	389:2	389:2	7	FILE
LEAF_NODE	389:2	389:2	8	FILE
POINTER	391:4	391:4	7	*
LEAF_NODE	391:4	391:4	8	*
NAME	391:5	391:5	6	ofile
LEAF_NODE	391:5	391:5	7	ofile
LEAF_NODE	0:0	0:0	6	;
INIT	391:5	391:5	6	ofile = stdout
ASSIGN	391:5	391:13	7	ofile = stdout
LVAL	391:5	391:5	8	ofile
NAME	391:5	391:5	9	ofile
LEAF_NODE	391:5	391:5	10	ofile
ASSIGN_OP	391:11	391:11	8	=
LEAF_NODE	391:11	391:11	9	=
RVAL	391:13	391:13	8	stdout
FIELD	391:13	391:13	9	stdout
LEAF_NODE	391:13	391:13	10	stdout
LEAF_NODE	391:19	391:19	4	;
SIMPLE_DECL	393:2	395:73	3	char c , char * usage ; usage = "usage: iptcutil -t | -b [-i file] [-o file] <input >output" ;
INIT_DECL_LIST	393:2	393:2	4	char c , char * usage ; usage = "usage: iptcutil -t | -b [-i file] [-o file] <input >output"
VAR_DECL	393:2	394:4	5	char c
TYPE	393:2	393:2	6	char
TYPE_NAME	393:2	393:2	7	char
LEAF_NODE	393:2	393:2	8	char
NAME	394:4	394:4	6	c
LEAF_NODE	394:4	394:4	7	c
LEAF_NODE	394:5	394:5	5	,
VAR_DECL	393:2	395:5	5	char * usage ; usage = "usage: iptcutil -t | -b [-i file] [-o file] <input >output"
TYPE	393:2	395:4	6	char *
TYPE_NAME	393:2	393:2	7	char
LEAF_NODE	393:2	393:2	8	char
POINTER	395:4	395:4	7	*
LEAF_NODE	395:4	395:4	8	*
NAME	395:5	395:5	6	usage
LEAF_NODE	395:5	395:5	7	usage
LEAF_NODE	0:0	0:0	6	;
INIT	395:5	395:5	6	usage = "usage: iptcutil -t | -b [-i file] [-o file] <input >output"
ASSIGN	395:5	395:13	7	usage = "usage: iptcutil -t | -b [-i file] [-o file] <input >output"
LVAL	395:5	395:5	8	usage
NAME	395:5	395:5	9	usage
LEAF_NODE	395:5	395:5	10	usage
ASSIGN_OP	395:11	395:11	8	=
LEAF_NODE	395:11	395:11	9	=
RVAL	395:13	395:13	8	"usage: iptcutil -t | -b [-i file] [-o file] <input >output"
FIELD	395:13	395:13	9	"usage: iptcutil -t | -b [-i file] [-o file] <input >output"
LEAF_NODE	395:13	395:13	10	"usage: iptcutil -t | -b [-i file] [-o file] <input >output"
LEAF_NODE	395:73	395:73	4	;
SELECTION	397:2	398:4	3	
KEYWORD	397:2	397:2	4	if
LEAF_NODE	397:2	397:2	5	if
LEAF_NODE	397:4	397:4	4	(
CONDITION	397:6	397:6	4	argc < 2
EXPR	397:6	397:13	5	argc < 2
FIELD	397:6	397:6	6	argc
LEAF_NODE	397:6	397:6	7	argc
REL_OPERATOR	397:11	397:11	6	<
LEAF_NODE	397:11	397:11	7	<
FIELD	397:13	397:13	6	2
LEAF_NODE	397:13	397:13	7	2
LEAF_NODE	397:15	397:15	4	)
STATEMENTS	398:4	401:4	4	
LEAF_NODE	398:4	398:4	5	{
STATEMENTS	399:6	400:6	5	
EXPR_STATEMENT	399:6	399:17	6	puts ( usage ) ;
EXPR	399:6	399:6	7	puts ( usage )
FUNCTION_CALL	399:6	399:16	8	puts ( usage )
CALLEE	399:6	399:6	9	puts
LEAF_NODE	399:6	399:6	10	puts
LEAF_NODE	399:10	399:10	9	(
ARGUMENT	399:11	399:11	9	usage
FIELD	399:11	399:11	10	usage
LEAF_NODE	399:11	399:11	11	usage
LEAF_NODE	399:16	399:16	9	)
LEAF_NODE	399:17	399:17	7	;
JUMP_STATEMENT	400:6	400:14	6	return 1 ;
KEYWORD	400:6	400:6	7	return
LEAF_NODE	400:6	400:6	8	return
DESTINATION	400:13	400:13	7	1
EXPR	400:13	400:13	8	1
FIELD	400:13	400:13	9	1
LEAF_NODE	400:13	400:13	10	1
LEAF_NODE	400:14	400:14	7	;
LEAF_NODE	401:4	401:4	5	}
EXPR_STATEMENT	403:2	403:10	3	mode = 0 ;
EXPR	403:2	403:2	4	mode = 0
ASSIGN	403:2	403:9	5	mode = 0
LVAL	403:2	403:2	6	mode
FIELD	403:2	403:2	7	mode
LEAF_NODE	403:2	403:2	8	mode
ASSIGN_OP	403:7	403:7	6	=
LEAF_NODE	403:7	403:7	7	=
RVAL	403:9	403:9	6	0
FIELD	403:9	403:9	7	0
LEAF_NODE	403:9	403:9	8	0
LEAF_NODE	403:10	403:10	4	;
ITERATION	407:2	408:4	3	
KEYWORD	407:2	407:2	4	for
LEAF_NODE	407:2	407:2	5	for
LEAF_NODE	407:6	407:6	4	(
FOR_INIT	407:7	407:10	4	i = 1 ;
EXPR	407:7	407:7	5	i = 1
ASSIGN	407:7	407:9	6	i = 1
LVAL	407:7	407:7	7	i
FIELD	407:7	407:7	8	i
LEAF_NODE	407:7	407:7	9	i
ASSIGN_OP	407:8	407:8	7	=
LEAF_NODE	407:8	407:8	8	=
RVAL	407:9	407:9	7	1
FIELD	407:9	407:9	8	1
LEAF_NODE	407:9	407:9	9	1
LEAF_NODE	407:10	407:10	5	;
CONDITION	407:12	407:12	4	i < argc
EXPR	407:12	407:14	5	i < argc
FIELD	407:12	407:12	6	i
LEAF_NODE	407:12	407:12	7	i
REL_OPERATOR	407:13	407:13	6	<
LEAF_NODE	407:13	407:13	7	<
FIELD	407:14	407:14	6	argc
LEAF_NODE	407:14	407:14	7	argc
LEAF_NODE	407:18	407:18	4	;
FOR_EXPR	407:20	407:20	4	i ++
EXPR	407:20	407:20	5	i ++
FIELD	407:20	407:21	6	i ++
LEAF_NODE	407:20	407:20	7	i
LEAF_NODE	407:21	407:21	7	++
LEAF_NODE	407:23	407:23	4	)
STATEMENTS	408:4	461:4	4	
LEAF_NODE	408:4	408:4	5	{
STATEMENTS	409:6	456:6	5	
EXPR_STATEMENT	409:6	409:20	6	c = argv [ i ] [ 0 ] ;
EXPR	409:6	409:6	7	c = argv [ i ] [ 0 ]
ASSIGN	409:6	409:10	8	c = argv [ i ] [ 0 ]
LVAL	409:6	409:6	9	c
FIELD	409:6	409:6	10	c
LEAF_NODE	409:6	409:6	11	c
ASSIGN_OP	409:8	409:8	9	=
LEAF_NODE	409:8	409:8	10	=
RVAL	409:10	409:10	9	argv [ i ] [ 0 ]
FIELD	409:10	409:19	10	argv [ i ] [ 0 ]
LEAF_NODE	409:10	409:10	11	argv
LEAF_NODE	409:14	409:14	11	[
EXPR	409:15	409:15	11	i
FIELD	409:15	409:15	12	i
LEAF_NODE	409:15	409:15	13	i
LEAF_NODE	409:16	409:16	11	]
LEAF_NODE	409:17	409:17	11	[
EXPR	409:18	409:18	11	0
FIELD	409:18	409:18	12	0
LEAF_NODE	409:18	409:18	13	0
LEAF_NODE	409:19	409:19	11	]
LEAF_NODE	409:20	409:20	7	;
SELECTION	410:6	411:8	6	
KEYWORD	410:6	410:6	7	if
LEAF_NODE	410:6	410:6	8	if
LEAF_NODE	410:9	410:9	7	(
CONDITION	410:10	410:10	7	c == '-' || c == '/'
EXPR	410:10	410:10	8	c == '-' || c == '/'
OR	410:10	410:22	9	c == '-' || c == '/'
EXPR	410:10	410:15	10	c == '-'
FIELD	410:10	410:10	11	c
LEAF_NODE	410:10	410:10	12	c
EQ_OPERATOR	410:12	410:12	11	==
LEAF_NODE	410:12	410:12	12	==
FIELD	410:15	410:15	11	'-'
LEAF_NODE	410:15	410:15	12	'-'
LEAF_NODE	410:19	410:19	10	||
EXPR	410:22	410:27	10	c == '/'
FIELD	410:22	410:22	11	c
LEAF_NODE	410:22	410:22	12	c
EQ_OPERATOR	410:24	410:24	11	==
LEAF_NODE	410:24	410:24	12	==
FIELD	410:27	410:27	11	'/'
LEAF_NODE	410:27	410:27	12	'/'
LEAF_NODE	410:30	410:30	7	)
STATEMENTS	411:8	455:8	7	
LEAF_NODE	411:8	411:8	8	{
STATEMENTS	412:10	413:10	8	
EXPR_STATEMENT	412:10	412:24	9	c = argv [ i ] [ 1 ] ;
EXPR	412:10	412:10	10	c = argv [ i ] [ 1 ]
ASSIGN	412:10	412:14	11	c = argv [ i ] [ 1 ]
LVAL	412:10	412:10	12	c
FIELD	412:10	412:10	13	c
LEAF_NODE	412:10	412:10	14	c
ASSIGN_OP	412:12	412:12	12	=
LEAF_NODE	412:12	412:12	13	=
RVAL	412:14	412:14	12	argv [ i ] [ 1 ]
FIELD	412:14	412:23	13	argv [ i ] [ 1 ]
LEAF_NODE	412:14	412:14	14	argv
LEAF_NODE	412:18	412:18	14	[
EXPR	412:19	412:19	14	i
FIELD	412:19	412:19	15	i
LEAF_NODE	412:19	412:19	16	i
LEAF_NODE	412:20	412:20	14	]
LEAF_NODE	412:21	412:21	14	[
EXPR	412:22	412:22	14	1
FIELD	412:22	412:22	15	1
LEAF_NODE	412:22	412:22	16	1
LEAF_NODE	412:23	412:23	14	]
LEAF_NODE	412:24	412:24	10	;
SELECTION	413:10	414:12	9	
KEYWORD	413:10	413:10	10	switch
LEAF_NODE	413:10	413:10	11	switch
LEAF_NODE	413:16	413:16	10	(
CONDITION	413:18	413:18	10	c
EXPR	413:18	413:18	11	c
FIELD	413:18	413:18	12	c
LEAF_NODE	413:18	413:18	13	c
LEAF_NODE	413:20	413:20	10	)
STATEMENTS	414:12	454:12	10	
LEAF_NODE	414:12	414:12	11	{
STATEMENTS	415:12	453:14	11	
LEAF_NODE	415:12	415:12	12	case
LEAF_NODE	415:17	415:17	12	't'
LEAF_NODE	415:20	415:20	12	:
EXPR_STATEMENT	416:14	416:22	12	mode = 1 ;
EXPR	416:14	416:14	13	mode = 1
ASSIGN	416:14	416:21	14	mode = 1
LVAL	416:14	416:14	15	mode
FIELD	416:14	416:14	16	mode
LEAF_NODE	416:14	416:14	17	mode
ASSIGN_OP	416:19	416:19	15	=
LEAF_NODE	416:19	416:19	16	=
RVAL	416:21	416:21	15	1
FIELD	416:21	416:21	16	1
LEAF_NODE	416:21	416:21	17	1
LEAF_NODE	416:22	416:22	13	;
EXPR_STATEMENT	419:14	419:53	12	_setmode ( _fileno ( ofile ) , _O_BINARY ) ;
EXPR	419:14	419:14	13	_setmode ( _fileno ( ofile ) , _O_BINARY )
FUNCTION_CALL	419:14	419:52	14	_setmode ( _fileno ( ofile ) , _O_BINARY )
CALLEE	419:14	419:14	15	_setmode
LEAF_NODE	419:14	419:14	16	_setmode
LEAF_NODE	419:22	419:22	15	(
ARGUMENT	419:24	419:24	15	_fileno ( ofile )
FUNCTION_CALL	419:24	419:39	16	_fileno ( ofile )
CALLEE	419:24	419:24	17	_fileno
LEAF_NODE	419:24	419:24	18	_fileno
LEAF_NODE	419:31	419:31	17	(
ARGUMENT	419:33	419:33	17	ofile
FIELD	419:33	419:33	18	ofile
LEAF_NODE	419:33	419:33	19	ofile
LEAF_NODE	419:39	419:39	17	)
LEAF_NODE	419:40	419:40	15	,
ARGUMENT	419:42	419:42	15	_O_BINARY
FIELD	419:42	419:42	16	_O_BINARY
LEAF_NODE	419:42	419:42	17	_O_BINARY
LEAF_NODE	419:52	419:52	15	)
LEAF_NODE	419:53	419:53	13	;
JUMP_STATEMENT	421:14	421:19	12	break DESTINATION ;
KEYWORD	421:14	421:14	13	break
LEAF_NODE	421:14	421:14	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	421:19	421:19	13	;
LEAF_NODE	422:12	422:12	12	case
LEAF_NODE	422:17	422:17	12	'b'
LEAF_NODE	422:20	422:20	12	:
EXPR_STATEMENT	423:14	423:22	12	mode = 0 ;
EXPR	423:14	423:14	13	mode = 0
ASSIGN	423:14	423:21	14	mode = 0
LVAL	423:14	423:14	15	mode
FIELD	423:14	423:14	16	mode
LEAF_NODE	423:14	423:14	17	mode
ASSIGN_OP	423:19	423:19	15	=
LEAF_NODE	423:19	423:19	16	=
RVAL	423:21	423:21	15	0
FIELD	423:21	423:21	16	0
LEAF_NODE	423:21	423:21	17	0
LEAF_NODE	423:22	423:22	13	;
EXPR_STATEMENT	426:14	426:53	12	_setmode ( _fileno ( ifile ) , _O_BINARY ) ;
EXPR	426:14	426:14	13	_setmode ( _fileno ( ifile ) , _O_BINARY )
FUNCTION_CALL	426:14	426:52	14	_setmode ( _fileno ( ifile ) , _O_BINARY )
CALLEE	426:14	426:14	15	_setmode
LEAF_NODE	426:14	426:14	16	_setmode
LEAF_NODE	426:22	426:22	15	(
ARGUMENT	426:24	426:24	15	_fileno ( ifile )
FUNCTION_CALL	426:24	426:39	16	_fileno ( ifile )
CALLEE	426:24	426:24	17	_fileno
LEAF_NODE	426:24	426:24	18	_fileno
LEAF_NODE	426:31	426:31	17	(
ARGUMENT	426:33	426:33	17	ifile
FIELD	426:33	426:33	18	ifile
LEAF_NODE	426:33	426:33	19	ifile
LEAF_NODE	426:39	426:39	17	)
LEAF_NODE	426:40	426:40	15	,
ARGUMENT	426:42	426:42	15	_O_BINARY
FIELD	426:42	426:42	16	_O_BINARY
LEAF_NODE	426:42	426:42	17	_O_BINARY
LEAF_NODE	426:52	426:52	15	)
LEAF_NODE	426:53	426:53	13	;
JUMP_STATEMENT	428:14	428:19	12	break DESTINATION ;
KEYWORD	428:14	428:14	13	break
LEAF_NODE	428:14	428:14	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	428:19	428:19	13	;
LEAF_NODE	429:12	429:12	12	case
LEAF_NODE	429:17	429:17	12	'i'
LEAF_NODE	429:20	429:20	12	:
SELECTION	430:14	431:16	12	
KEYWORD	430:14	430:14	13	if
LEAF_NODE	430:14	430:14	14	if
LEAF_NODE	430:17	430:17	13	(
CONDITION	430:18	430:18	13	mode == 0
EXPR	430:18	430:26	14	mode == 0
FIELD	430:18	430:18	15	mode
LEAF_NODE	430:18	430:18	16	mode
EQ_OPERATOR	430:23	430:23	15	==
LEAF_NODE	430:23	430:23	16	==
FIELD	430:26	430:26	15	0
LEAF_NODE	430:26	430:26	16	0
LEAF_NODE	430:27	430:27	13	)
STATEMENTS	431:16	431:16	13	
EXPR_STATEMENT	431:16	431:46	14	ifile = fopen ( argv [ ++ i ] , "rb" ) ;
EXPR	431:16	431:16	15	ifile = fopen ( argv [ ++ i ] , "rb" )
ASSIGN	431:16	431:24	16	ifile = fopen ( argv [ ++ i ] , "rb" )
LVAL	431:16	431:16	17	ifile
FIELD	431:16	431:16	18	ifile
LEAF_NODE	431:16	431:16	19	ifile
ASSIGN_OP	431:22	431:22	17	=
LEAF_NODE	431:22	431:22	18	=
RVAL	431:24	431:24	17	fopen ( argv [ ++ i ] , "rb" )
FUNCTION_CALL	431:24	431:45	18	fopen ( argv [ ++ i ] , "rb" )
CALLEE	431:24	431:24	19	fopen
LEAF_NODE	431:24	431:24	20	fopen
LEAF_NODE	431:29	431:29	19	(
ARGUMENT	431:30	431:30	19	argv [ ++ i ]
FIELD	431:30	431:38	20	argv [ ++ i ]
LEAF_NODE	431:30	431:30	21	argv
LEAF_NODE	431:34	431:34	21	[
EXPR	431:35	431:37	21	++ i
LEAF_NODE	431:35	431:35	22	++
FIELD	431:37	431:37	22	i
LEAF_NODE	431:37	431:37	23	i
LEAF_NODE	431:38	431:38	21	]
LEAF_NODE	431:39	431:39	19	,
ARGUMENT	431:41	431:41	19	"rb"
FIELD	431:41	431:41	20	"rb"
LEAF_NODE	431:41	431:41	21	"rb"
LEAF_NODE	431:45	431:45	19	)
LEAF_NODE	431:46	431:46	15	;
SELECTION	432:14	433:16	12	
KEYWORD	432:14	432:14	13	else
LEAF_NODE	432:14	432:14	14	else
STATEMENTS	433:16	433:16	13	
EXPR_STATEMENT	433:16	433:46	14	ifile = fopen ( argv [ ++ i ] , "rt" ) ;
EXPR	433:16	433:16	15	ifile = fopen ( argv [ ++ i ] , "rt" )
ASSIGN	433:16	433:24	16	ifile = fopen ( argv [ ++ i ] , "rt" )
LVAL	433:16	433:16	17	ifile
FIELD	433:16	433:16	18	ifile
LEAF_NODE	433:16	433:16	19	ifile
ASSIGN_OP	433:22	433:22	17	=
LEAF_NODE	433:22	433:22	18	=
RVAL	433:24	433:24	17	fopen ( argv [ ++ i ] , "rt" )
FUNCTION_CALL	433:24	433:45	18	fopen ( argv [ ++ i ] , "rt" )
CALLEE	433:24	433:24	19	fopen
LEAF_NODE	433:24	433:24	20	fopen
LEAF_NODE	433:29	433:29	19	(
ARGUMENT	433:30	433:30	19	argv [ ++ i ]
FIELD	433:30	433:38	20	argv [ ++ i ]
LEAF_NODE	433:30	433:30	21	argv
LEAF_NODE	433:34	433:34	21	[
EXPR	433:35	433:37	21	++ i
LEAF_NODE	433:35	433:35	22	++
FIELD	433:37	433:37	22	i
LEAF_NODE	433:37	433:37	23	i
LEAF_NODE	433:38	433:38	21	]
LEAF_NODE	433:39	433:39	19	,
ARGUMENT	433:41	433:41	19	"rt"
FIELD	433:41	433:41	20	"rt"
LEAF_NODE	433:41	433:41	21	"rt"
LEAF_NODE	433:45	433:45	19	)
LEAF_NODE	433:46	433:46	15	;
SELECTION	434:14	435:16	12	
KEYWORD	434:14	434:14	13	if
LEAF_NODE	434:14	434:14	14	if
LEAF_NODE	434:17	434:17	13	(
CONDITION	434:18	434:18	13	ifile == ( FILE * ) NULL
EXPR	434:18	434:35	14	ifile == ( FILE * ) NULL
FIELD	434:18	434:18	15	ifile
LEAF_NODE	434:18	434:18	16	ifile
EQ_OPERATOR	434:24	434:24	15	==
LEAF_NODE	434:24	434:24	16	==
LEAF_NODE	434:27	434:27	15	(
TYPE_NAME	434:28	434:28	15	FILE
LEAF_NODE	434:28	434:28	16	FILE
LEAF_NODE	434:33	434:33	15	*
LEAF_NODE	434:34	434:34	15	)
FIELD	434:35	434:35	15	NULL
LEAF_NODE	434:35	434:35	16	NULL
LEAF_NODE	434:39	434:39	13	)
STATEMENTS	435:16	438:16	13	
LEAF_NODE	435:16	435:16	14	{
STATEMENTS	436:18	437:18	14	
EXPR_STATEMENT	436:18	436:57	15	printf ( "Unable to open: %s\n" , argv [ i ] ) ;
EXPR	436:18	436:18	16	printf ( "Unable to open: %s\n" , argv [ i ] )
FUNCTION_CALL	436:18	436:56	17	printf ( "Unable to open: %s\n" , argv [ i ] )
CALLEE	436:18	436:18	18	printf
LEAF_NODE	436:18	436:18	19	printf
LEAF_NODE	436:24	436:24	18	(
ARGUMENT	436:25	436:25	18	"Unable to open: %s\n"
FIELD	436:25	436:25	19	"Unable to open: %s\n"
LEAF_NODE	436:25	436:25	20	"Unable to open: %s\n"
LEAF_NODE	436:47	436:47	18	,
ARGUMENT	436:49	436:49	18	argv [ i ]
FIELD	436:49	436:55	19	argv [ i ]
LEAF_NODE	436:49	436:49	20	argv
LEAF_NODE	436:53	436:53	20	[
EXPR	436:54	436:54	20	i
FIELD	436:54	436:54	21	i
LEAF_NODE	436:54	436:54	22	i
LEAF_NODE	436:55	436:55	20	]
LEAF_NODE	436:56	436:56	18	)
LEAF_NODE	436:57	436:57	16	;
JUMP_STATEMENT	437:18	437:26	15	return 1 ;
KEYWORD	437:18	437:18	16	return
LEAF_NODE	437:18	437:18	17	return
DESTINATION	437:25	437:25	16	1
EXPR	437:25	437:25	17	1
FIELD	437:25	437:25	18	1
LEAF_NODE	437:25	437:25	19	1
LEAF_NODE	437:26	437:26	16	;
LEAF_NODE	438:16	438:16	14	}
JUMP_STATEMENT	439:14	439:19	12	break DESTINATION ;
KEYWORD	439:14	439:14	13	break
LEAF_NODE	439:14	439:14	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	439:19	439:19	13	;
LEAF_NODE	440:12	440:12	12	case
LEAF_NODE	440:17	440:17	12	'o'
LEAF_NODE	440:20	440:20	12	:
SELECTION	441:14	442:16	12	
KEYWORD	441:14	441:14	13	if
LEAF_NODE	441:14	441:14	14	if
LEAF_NODE	441:17	441:17	13	(
CONDITION	441:18	441:18	13	mode == 0
EXPR	441:18	441:26	14	mode == 0
FIELD	441:18	441:18	15	mode
LEAF_NODE	441:18	441:18	16	mode
EQ_OPERATOR	441:23	441:23	15	==
LEAF_NODE	441:23	441:23	16	==
FIELD	441:26	441:26	15	0
LEAF_NODE	441:26	441:26	16	0
LEAF_NODE	441:27	441:27	13	)
STATEMENTS	442:16	442:16	13	
EXPR_STATEMENT	442:16	442:46	14	ofile = fopen ( argv [ ++ i ] , "wt" ) ;
EXPR	442:16	442:16	15	ofile = fopen ( argv [ ++ i ] , "wt" )
ASSIGN	442:16	442:24	16	ofile = fopen ( argv [ ++ i ] , "wt" )
LVAL	442:16	442:16	17	ofile
FIELD	442:16	442:16	18	ofile
LEAF_NODE	442:16	442:16	19	ofile
ASSIGN_OP	442:22	442:22	17	=
LEAF_NODE	442:22	442:22	18	=
RVAL	442:24	442:24	17	fopen ( argv [ ++ i ] , "wt" )
FUNCTION_CALL	442:24	442:45	18	fopen ( argv [ ++ i ] , "wt" )
CALLEE	442:24	442:24	19	fopen
LEAF_NODE	442:24	442:24	20	fopen
LEAF_NODE	442:29	442:29	19	(
ARGUMENT	442:30	442:30	19	argv [ ++ i ]
FIELD	442:30	442:38	20	argv [ ++ i ]
LEAF_NODE	442:30	442:30	21	argv
LEAF_NODE	442:34	442:34	21	[
EXPR	442:35	442:37	21	++ i
LEAF_NODE	442:35	442:35	22	++
FIELD	442:37	442:37	22	i
LEAF_NODE	442:37	442:37	23	i
LEAF_NODE	442:38	442:38	21	]
LEAF_NODE	442:39	442:39	19	,
ARGUMENT	442:41	442:41	19	"wt"
FIELD	442:41	442:41	20	"wt"
LEAF_NODE	442:41	442:41	21	"wt"
LEAF_NODE	442:45	442:45	19	)
LEAF_NODE	442:46	442:46	15	;
SELECTION	443:14	444:16	12	
KEYWORD	443:14	443:14	13	else
LEAF_NODE	443:14	443:14	14	else
STATEMENTS	444:16	444:16	13	
EXPR_STATEMENT	444:16	444:46	14	ofile = fopen ( argv [ ++ i ] , "wb" ) ;
EXPR	444:16	444:16	15	ofile = fopen ( argv [ ++ i ] , "wb" )
ASSIGN	444:16	444:24	16	ofile = fopen ( argv [ ++ i ] , "wb" )
LVAL	444:16	444:16	17	ofile
FIELD	444:16	444:16	18	ofile
LEAF_NODE	444:16	444:16	19	ofile
ASSIGN_OP	444:22	444:22	17	=
LEAF_NODE	444:22	444:22	18	=
RVAL	444:24	444:24	17	fopen ( argv [ ++ i ] , "wb" )
FUNCTION_CALL	444:24	444:45	18	fopen ( argv [ ++ i ] , "wb" )
CALLEE	444:24	444:24	19	fopen
LEAF_NODE	444:24	444:24	20	fopen
LEAF_NODE	444:29	444:29	19	(
ARGUMENT	444:30	444:30	19	argv [ ++ i ]
FIELD	444:30	444:38	20	argv [ ++ i ]
LEAF_NODE	444:30	444:30	21	argv
LEAF_NODE	444:34	444:34	21	[
EXPR	444:35	444:37	21	++ i
LEAF_NODE	444:35	444:35	22	++
FIELD	444:37	444:37	22	i
LEAF_NODE	444:37	444:37	23	i
LEAF_NODE	444:38	444:38	21	]
LEAF_NODE	444:39	444:39	19	,
ARGUMENT	444:41	444:41	19	"wb"
FIELD	444:41	444:41	20	"wb"
LEAF_NODE	444:41	444:41	21	"wb"
LEAF_NODE	444:45	444:45	19	)
LEAF_NODE	444:46	444:46	15	;
SELECTION	445:14	446:16	12	
KEYWORD	445:14	445:14	13	if
LEAF_NODE	445:14	445:14	14	if
LEAF_NODE	445:17	445:17	13	(
CONDITION	445:18	445:18	13	ofile == ( FILE * ) NULL
EXPR	445:18	445:35	14	ofile == ( FILE * ) NULL
FIELD	445:18	445:18	15	ofile
LEAF_NODE	445:18	445:18	16	ofile
EQ_OPERATOR	445:24	445:24	15	==
LEAF_NODE	445:24	445:24	16	==
LEAF_NODE	445:27	445:27	15	(
TYPE_NAME	445:28	445:28	15	FILE
LEAF_NODE	445:28	445:28	16	FILE
LEAF_NODE	445:33	445:33	15	*
LEAF_NODE	445:34	445:34	15	)
FIELD	445:35	445:35	15	NULL
LEAF_NODE	445:35	445:35	16	NULL
LEAF_NODE	445:39	445:39	13	)
STATEMENTS	446:16	449:16	13	
LEAF_NODE	446:16	446:16	14	{
STATEMENTS	447:18	448:18	14	
EXPR_STATEMENT	447:18	447:57	15	printf ( "Unable to open: %s\n" , argv [ i ] ) ;
EXPR	447:18	447:18	16	printf ( "Unable to open: %s\n" , argv [ i ] )
FUNCTION_CALL	447:18	447:56	17	printf ( "Unable to open: %s\n" , argv [ i ] )
CALLEE	447:18	447:18	18	printf
LEAF_NODE	447:18	447:18	19	printf
LEAF_NODE	447:24	447:24	18	(
ARGUMENT	447:25	447:25	18	"Unable to open: %s\n"
FIELD	447:25	447:25	19	"Unable to open: %s\n"
LEAF_NODE	447:25	447:25	20	"Unable to open: %s\n"
LEAF_NODE	447:47	447:47	18	,
ARGUMENT	447:49	447:49	18	argv [ i ]
FIELD	447:49	447:55	19	argv [ i ]
LEAF_NODE	447:49	447:49	20	argv
LEAF_NODE	447:53	447:53	20	[
EXPR	447:54	447:54	20	i
FIELD	447:54	447:54	21	i
LEAF_NODE	447:54	447:54	22	i
LEAF_NODE	447:55	447:55	20	]
LEAF_NODE	447:56	447:56	18	)
LEAF_NODE	447:57	447:57	16	;
JUMP_STATEMENT	448:18	448:26	15	return 1 ;
KEYWORD	448:18	448:18	16	return
LEAF_NODE	448:18	448:18	17	return
DESTINATION	448:25	448:25	16	1
EXPR	448:25	448:25	17	1
FIELD	448:25	448:25	18	1
LEAF_NODE	448:25	448:25	19	1
LEAF_NODE	448:26	448:26	16	;
LEAF_NODE	449:16	449:16	14	}
JUMP_STATEMENT	450:14	450:19	12	break DESTINATION ;
KEYWORD	450:14	450:14	13	break
LEAF_NODE	450:14	450:14	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	450:19	450:19	13	;
LABEL	451:12	451:19	12	default :
LEAF_NODE	451:12	451:12	13	default
LEAF_NODE	451:19	451:19	13	:
EXPR_STATEMENT	452:14	452:53	12	printf ( "Unknown option: %s\n" , argv [ i ] ) ;
EXPR	452:14	452:14	13	printf ( "Unknown option: %s\n" , argv [ i ] )
FUNCTION_CALL	452:14	452:52	14	printf ( "Unknown option: %s\n" , argv [ i ] )
CALLEE	452:14	452:14	15	printf
LEAF_NODE	452:14	452:14	16	printf
LEAF_NODE	452:20	452:20	15	(
ARGUMENT	452:21	452:21	15	"Unknown option: %s\n"
FIELD	452:21	452:21	16	"Unknown option: %s\n"
LEAF_NODE	452:21	452:21	17	"Unknown option: %s\n"
LEAF_NODE	452:43	452:43	15	,
ARGUMENT	452:45	452:45	15	argv [ i ]
FIELD	452:45	452:51	16	argv [ i ]
LEAF_NODE	452:45	452:45	17	argv
LEAF_NODE	452:49	452:49	17	[
EXPR	452:50	452:50	17	i
FIELD	452:50	452:50	18	i
LEAF_NODE	452:50	452:50	19	i
LEAF_NODE	452:51	452:51	17	]
LEAF_NODE	452:52	452:52	15	)
LEAF_NODE	452:53	452:53	13	;
JUMP_STATEMENT	453:14	453:22	12	return 1 ;
KEYWORD	453:14	453:14	13	return
LEAF_NODE	453:14	453:14	14	return
DESTINATION	453:21	453:21	13	1
EXPR	453:21	453:21	14	1
FIELD	453:21	453:21	15	1
LEAF_NODE	453:21	453:21	16	1
LEAF_NODE	453:22	453:22	13	;
LEAF_NODE	454:12	454:12	11	}
LEAF_NODE	455:8	455:8	8	}
SELECTION	456:6	457:8	6	
KEYWORD	456:6	456:6	7	else
LEAF_NODE	456:6	456:6	8	else
STATEMENTS	457:8	460:8	7	
LEAF_NODE	457:8	457:8	8	{
STATEMENTS	458:10	459:10	8	
EXPR_STATEMENT	458:10	458:21	9	puts ( usage ) ;
EXPR	458:10	458:10	10	puts ( usage )
FUNCTION_CALL	458:10	458:20	11	puts ( usage )
CALLEE	458:10	458:10	12	puts
LEAF_NODE	458:10	458:10	13	puts
LEAF_NODE	458:14	458:14	12	(
ARGUMENT	458:15	458:15	12	usage
FIELD	458:15	458:15	13	usage
LEAF_NODE	458:15	458:15	14	usage
LEAF_NODE	458:20	458:20	12	)
LEAF_NODE	458:21	458:21	10	;
JUMP_STATEMENT	459:10	459:18	9	return 1 ;
KEYWORD	459:10	459:10	10	return
LEAF_NODE	459:10	459:10	11	return
DESTINATION	459:17	459:17	10	1
EXPR	459:17	459:17	11	1
FIELD	459:17	459:17	12	1
LEAF_NODE	459:17	459:17	13	1
LEAF_NODE	459:18	459:18	10	;
LEAF_NODE	460:8	460:8	8	}
LEAF_NODE	461:4	461:4	5	}
SELECTION	463:2	464:4	3	
KEYWORD	463:2	463:2	4	if
LEAF_NODE	463:2	463:2	5	if
LEAF_NODE	463:5	463:5	4	(
CONDITION	463:6	463:6	4	mode == 0
EXPR	463:6	463:14	5	mode == 0
FIELD	463:6	463:6	6	mode
LEAF_NODE	463:6	463:6	7	mode
EQ_OPERATOR	463:11	463:11	6	==
LEAF_NODE	463:11	463:11	7	==
FIELD	463:14	463:14	6	0
LEAF_NODE	463:14	463:14	7	0
LEAF_NODE	463:15	463:15	4	)
STATEMENTS	464:4	464:4	4	
EXPR_STATEMENT	464:4	464:28	5	formatIPTC ( ifile , ofile ) ;
EXPR	464:4	464:4	6	formatIPTC ( ifile , ofile )
FUNCTION_CALL	464:4	464:27	7	formatIPTC ( ifile , ofile )
CALLEE	464:4	464:4	8	formatIPTC
LEAF_NODE	464:4	464:4	9	formatIPTC
LEAF_NODE	464:14	464:14	8	(
ARGUMENT	464:15	464:15	8	ifile
FIELD	464:15	464:15	9	ifile
LEAF_NODE	464:15	464:15	10	ifile
LEAF_NODE	464:20	464:20	8	,
ARGUMENT	464:22	464:22	8	ofile
FIELD	464:22	464:22	9	ofile
LEAF_NODE	464:22	464:22	10	ofile
LEAF_NODE	464:27	464:27	8	)
LEAF_NODE	464:28	464:28	6	;
SELECTION	466:2	467:4	3	
KEYWORD	466:2	466:2	4	if
LEAF_NODE	466:2	466:2	5	if
LEAF_NODE	466:5	466:5	4	(
CONDITION	466:6	466:6	4	mode == 1
EXPR	466:6	466:14	5	mode == 1
FIELD	466:6	466:6	6	mode
LEAF_NODE	466:6	466:6	7	mode
EQ_OPERATOR	466:11	466:11	6	==
LEAF_NODE	466:11	466:11	7	==
FIELD	466:14	466:14	6	1
LEAF_NODE	466:14	466:14	7	1
LEAF_NODE	466:15	466:15	4	)
STATEMENTS	467:4	578:4	4	
LEAF_NODE	467:4	467:4	5	{
STATEMENTS	468:6	577:6	5	
SIMPLE_DECL	468:6	473:15	6	char brkused , char quoted , char * line , char * token , char * newstr ;
INIT_DECL_LIST	468:6	468:6	7	char brkused , char quoted , char * line , char * token , char * newstr
VAR_DECL	468:6	469:8	8	char brkused
TYPE	468:6	468:6	9	char
TYPE_NAME	468:6	468:6	10	char
LEAF_NODE	468:6	468:6	11	char
NAME	469:8	469:8	9	brkused
LEAF_NODE	469:8	469:8	10	brkused
LEAF_NODE	469:15	469:15	8	,
INIT_DECL_LIST	468:6	468:6	8	char quoted , char * line , char * token , char * newstr
VAR_DECL	468:6	470:8	9	char quoted
TYPE	468:6	468:6	10	char
TYPE_NAME	468:6	468:6	11	char
LEAF_NODE	468:6	468:6	12	char
NAME	470:8	470:8	10	quoted
LEAF_NODE	470:8	470:8	11	quoted
LEAF_NODE	470:14	470:14	9	,
INIT_DECL_LIST	468:6	468:6	9	char * line , char * token , char * newstr
VAR_DECL	468:6	471:9	10	char * line
TYPE	468:6	471:8	11	char *
TYPE_NAME	468:6	468:6	12	char
LEAF_NODE	468:6	468:6	13	char
POINTER	471:8	471:8	12	*
LEAF_NODE	471:8	471:8	13	*
NAME	471:9	471:9	11	line
LEAF_NODE	471:9	471:9	12	line
LEAF_NODE	471:13	471:13	10	,
INIT_DECL_LIST	468:6	468:6	10	char * token , char * newstr
VAR_DECL	468:6	472:9	11	char * token
TYPE	468:6	472:8	12	char *
TYPE_NAME	468:6	468:6	13	char
LEAF_NODE	468:6	468:6	14	char
POINTER	472:8	472:8	13	*
LEAF_NODE	472:8	472:8	14	*
NAME	472:9	472:9	12	token
LEAF_NODE	472:9	472:9	13	token
LEAF_NODE	472:14	472:14	11	,
VAR_DECL	468:6	473:9	11	char * newstr
TYPE	468:6	473:8	12	char *
TYPE_NAME	468:6	468:6	13	char
LEAF_NODE	468:6	468:6	14	char
POINTER	473:8	473:8	13	*
LEAF_NODE	473:8	473:8	14	*
NAME	473:9	473:9	12	newstr
LEAF_NODE	473:9	473:9	13	newstr
LEAF_NODE	473:15	473:15	7	;
SIMPLE_DECL	475:6	477:12	6	int state , int next ;
INIT_DECL_LIST	475:6	475:6	7	int state , int next
VAR_DECL	475:6	476:8	8	int state
TYPE	475:6	475:6	9	int
TYPE_NAME	475:6	475:6	10	int
LEAF_NODE	475:6	475:6	11	int
NAME	476:8	476:8	9	state
LEAF_NODE	476:8	476:8	10	state
LEAF_NODE	476:13	476:13	8	,
VAR_DECL	475:6	477:8	8	int next
TYPE	475:6	475:6	9	int
TYPE_NAME	475:6	475:6	10	int
LEAF_NODE	475:6	475:6	11	int
NAME	477:8	477:8	9	next
LEAF_NODE	477:8	477:8	10	next
LEAF_NODE	477:12	477:12	7	;
SIMPLE_DECL	479:6	481:19	6	unsigned char recnum ; recnum = 0 , unsigned char dataset ; dataset = 0 ;
INIT_DECL_LIST	479:6	479:6	7	unsigned char recnum ; recnum = 0 , unsigned char dataset ; dataset = 0
VAR_DECL	479:6	480:8	8	unsigned char recnum ; recnum = 0
TYPE	479:6	479:6	9	unsigned char
TYPE_NAME	479:6	479:15	10	unsigned char
LEAF_NODE	479:6	479:6	11	unsigned
LEAF_NODE	479:15	479:15	11	char
NAME	480:8	480:8	9	recnum
LEAF_NODE	480:8	480:8	10	recnum
LEAF_NODE	0:0	0:0	9	;
INIT	480:8	480:8	9	recnum = 0
ASSIGN	480:8	480:17	10	recnum = 0
LVAL	480:8	480:8	11	recnum
NAME	480:8	480:8	12	recnum
LEAF_NODE	480:8	480:8	13	recnum
ASSIGN_OP	480:15	480:15	11	=
LEAF_NODE	480:15	480:15	12	=
RVAL	480:17	480:17	11	0
FIELD	480:17	480:17	12	0
LEAF_NODE	480:17	480:17	13	0
LEAF_NODE	480:18	480:18	8	,
VAR_DECL	479:6	481:8	8	unsigned char dataset ; dataset = 0
TYPE	479:6	479:6	9	unsigned char
TYPE_NAME	479:6	479:15	10	unsigned char
LEAF_NODE	479:6	479:6	11	unsigned
LEAF_NODE	479:15	479:15	11	char
NAME	481:8	481:8	9	dataset
LEAF_NODE	481:8	481:8	10	dataset
LEAF_NODE	0:0	0:0	9	;
INIT	481:8	481:8	9	dataset = 0
ASSIGN	481:8	481:18	10	dataset = 0
LVAL	481:8	481:8	11	dataset
NAME	481:8	481:8	12	dataset
LEAF_NODE	481:8	481:8	13	dataset
ASSIGN_OP	481:16	481:16	11	=
LEAF_NODE	481:16	481:16	12	=
RVAL	481:18	481:18	11	0
FIELD	481:18	481:18	12	0
LEAF_NODE	481:18	481:18	13	0
LEAF_NODE	481:19	481:19	7	;
SIMPLE_DECL	483:6	484:28	6	int inputlen ; inputlen = BUFFER_SZ ;
VAR_DECL	483:6	484:8	7	int inputlen ; inputlen = BUFFER_SZ
TYPE	483:6	483:6	8	int
TYPE_NAME	483:6	483:6	9	int
LEAF_NODE	483:6	483:6	10	int
NAME	484:8	484:8	8	inputlen
LEAF_NODE	484:8	484:8	9	inputlen
LEAF_NODE	0:0	0:0	8	;
INIT	484:8	484:8	8	inputlen = BUFFER_SZ
ASSIGN	484:8	484:19	9	inputlen = BUFFER_SZ
LVAL	484:8	484:8	10	inputlen
NAME	484:8	484:8	11	inputlen
LEAF_NODE	484:8	484:8	12	inputlen
ASSIGN_OP	484:17	484:17	10	=
LEAF_NODE	484:17	484:17	11	=
RVAL	484:19	484:19	10	BUFFER_SZ
FIELD	484:19	484:19	11	BUFFER_SZ
LEAF_NODE	484:19	484:19	12	BUFFER_SZ
LEAF_NODE	484:28	484:28	7	;
EXPR_STATEMENT	486:6	486:38	6	line = ( char * ) malloc ( inputlen ) ;
EXPR	486:6	486:6	7	line = ( char * ) malloc ( inputlen )
ASSIGN	486:6	486:13	8	line = ( char * ) malloc ( inputlen )
LVAL	486:6	486:6	9	line
FIELD	486:6	486:6	10	line
LEAF_NODE	486:6	486:6	11	line
ASSIGN_OP	486:11	486:11	9	=
LEAF_NODE	486:11	486:11	10	=
RVAL	486:13	486:22	9	( char * ) malloc ( inputlen )
LEAF_NODE	486:13	486:13	10	(
TYPE_NAME	486:14	486:14	10	char
LEAF_NODE	486:14	486:14	11	char
LEAF_NODE	486:19	486:19	10	*
LEAF_NODE	486:20	486:20	10	)
FUNCTION_CALL	486:22	486:37	10	malloc ( inputlen )
CALLEE	486:22	486:22	11	malloc
LEAF_NODE	486:22	486:22	12	malloc
LEAF_NODE	486:28	486:28	11	(
ARGUMENT	486:29	486:29	11	inputlen
FIELD	486:29	486:29	12	inputlen
LEAF_NODE	486:29	486:29	13	inputlen
LEAF_NODE	486:37	486:37	11	)
LEAF_NODE	486:38	486:38	7	;
EXPR_STATEMENT	487:6	487:26	6	token = ( char * ) NULL ;
EXPR	487:6	487:6	7	token = ( char * ) NULL
ASSIGN	487:6	487:14	8	token = ( char * ) NULL
LVAL	487:6	487:6	9	token
FIELD	487:6	487:6	10	token
LEAF_NODE	487:6	487:6	11	token
ASSIGN_OP	487:12	487:12	9	=
LEAF_NODE	487:12	487:12	10	=
RVAL	487:14	487:22	9	( char * ) NULL
LEAF_NODE	487:14	487:14	10	(
TYPE_NAME	487:15	487:15	10	char
LEAF_NODE	487:15	487:15	11	char
LEAF_NODE	487:20	487:20	10	*
LEAF_NODE	487:21	487:21	10	)
FIELD	487:22	487:22	10	NULL
LEAF_NODE	487:22	487:22	11	NULL
LEAF_NODE	487:26	487:26	7	;
ITERATION	488:6	489:8	6	
KEYWORD	488:6	488:6	7	while
LEAF_NODE	488:6	488:6	8	while
LEAF_NODE	488:11	488:11	7	(
CONDITION	488:12	488:12	7	( line = super_fgets ( line , & inputlen , ifile ) ) != NULL
EXPR	488:12	488:56	8	( line = super_fgets ( line , & inputlen , ifile ) ) != NULL
LEAF_NODE	488:12	488:12	9	(
ASSIGN	488:13	488:20	9	line = super_fgets ( line , & inputlen , ifile )
LVAL	488:13	488:13	10	line
FIELD	488:13	488:13	11	line
LEAF_NODE	488:13	488:13	12	line
ASSIGN_OP	488:18	488:18	10	=
LEAF_NODE	488:18	488:18	11	=
RVAL	488:20	488:20	10	super_fgets ( line , & inputlen , ifile )
FUNCTION_CALL	488:20	488:52	11	super_fgets ( line , & inputlen , ifile )
CALLEE	488:20	488:20	12	super_fgets
LEAF_NODE	488:20	488:20	13	super_fgets
LEAF_NODE	488:31	488:31	12	(
ARGUMENT	488:32	488:32	12	line
FIELD	488:32	488:32	13	line
LEAF_NODE	488:32	488:32	14	line
LEAF_NODE	488:36	488:36	12	,
ARGUMENT	488:37	488:37	12	& inputlen
UNARY_EXPR	488:37	488:38	13	& inputlen
UNARY_OPERATOR	488:37	488:37	14	&
LEAF_NODE	488:37	488:37	15	&
FIELD	488:38	488:38	14	inputlen
LEAF_NODE	488:38	488:38	15	inputlen
LEAF_NODE	488:46	488:46	12	,
ARGUMENT	488:47	488:47	12	ifile
FIELD	488:47	488:47	13	ifile
LEAF_NODE	488:47	488:47	14	ifile
LEAF_NODE	488:52	488:52	12	)
LEAF_NODE	488:53	488:53	9	)
EQ_OPERATOR	488:54	488:54	9	!=
LEAF_NODE	488:54	488:54	10	!=
FIELD	488:56	488:56	9	NULL
LEAF_NODE	488:56	488:56	10	NULL
LEAF_NODE	488:60	488:60	7	)
STATEMENTS	489:8	573:8	7	
LEAF_NODE	489:8	489:8	8	{
STATEMENTS	490:10	572:10	8	
EXPR_STATEMENT	490:10	490:17	9	state = 0 ;
EXPR	490:10	490:10	10	state = 0
ASSIGN	490:10	490:16	11	state = 0
LVAL	490:10	490:10	12	state
FIELD	490:10	490:10	13	state
LEAF_NODE	490:10	490:10	14	state
ASSIGN_OP	490:15	490:15	12	=
LEAF_NODE	490:15	490:15	13	=
RVAL	490:16	490:16	12	0
FIELD	490:16	490:16	13	0
LEAF_NODE	490:16	490:16	14	0
LEAF_NODE	490:17	490:17	10	;
EXPR_STATEMENT	491:10	491:16	9	next = 0 ;
EXPR	491:10	491:10	10	next = 0
ASSIGN	491:10	491:15	11	next = 0
LVAL	491:10	491:10	12	next
FIELD	491:10	491:10	13	next
LEAF_NODE	491:10	491:10	14	next
ASSIGN_OP	491:14	491:14	12	=
LEAF_NODE	491:14	491:14	13	=
RVAL	491:15	491:15	12	0
FIELD	491:15	491:15	13	0
LEAF_NODE	491:15	491:15	14	0
LEAF_NODE	491:16	491:16	10	;
EXPR_STATEMENT	493:10	493:43	9	token = ( char * ) malloc ( inputlen ) ;
EXPR	493:10	493:10	10	token = ( char * ) malloc ( inputlen )
ASSIGN	493:10	493:18	11	token = ( char * ) malloc ( inputlen )
LVAL	493:10	493:10	12	token
FIELD	493:10	493:10	13	token
LEAF_NODE	493:10	493:10	14	token
ASSIGN_OP	493:16	493:16	12	=
LEAF_NODE	493:16	493:16	13	=
RVAL	493:18	493:27	12	( char * ) malloc ( inputlen )
LEAF_NODE	493:18	493:18	13	(
TYPE_NAME	493:19	493:19	13	char
LEAF_NODE	493:19	493:19	14	char
LEAF_NODE	493:24	493:24	13	*
LEAF_NODE	493:25	493:25	13	)
FUNCTION_CALL	493:27	493:42	13	malloc ( inputlen )
CALLEE	493:27	493:27	14	malloc
LEAF_NODE	493:27	493:27	15	malloc
LEAF_NODE	493:33	493:33	14	(
ARGUMENT	493:34	493:34	14	inputlen
FIELD	493:34	493:34	15	inputlen
LEAF_NODE	493:34	493:34	16	inputlen
LEAF_NODE	493:42	493:42	14	)
LEAF_NODE	493:43	493:43	10	;
EXPR_STATEMENT	494:10	494:44	9	newstr = ( char * ) malloc ( inputlen ) ;
EXPR	494:10	494:10	10	newstr = ( char * ) malloc ( inputlen )
ASSIGN	494:10	494:19	11	newstr = ( char * ) malloc ( inputlen )
LVAL	494:10	494:10	12	newstr
FIELD	494:10	494:10	13	newstr
LEAF_NODE	494:10	494:10	14	newstr
ASSIGN_OP	494:17	494:17	12	=
LEAF_NODE	494:17	494:17	13	=
RVAL	494:19	494:28	12	( char * ) malloc ( inputlen )
LEAF_NODE	494:19	494:19	13	(
TYPE_NAME	494:20	494:20	13	char
LEAF_NODE	494:20	494:20	14	char
LEAF_NODE	494:25	494:25	13	*
LEAF_NODE	494:26	494:26	13	)
FUNCTION_CALL	494:28	494:43	13	malloc ( inputlen )
CALLEE	494:28	494:28	14	malloc
LEAF_NODE	494:28	494:28	15	malloc
LEAF_NODE	494:34	494:34	14	(
ARGUMENT	494:35	494:35	14	inputlen
FIELD	494:35	494:35	15	inputlen
LEAF_NODE	494:35	494:35	16	inputlen
LEAF_NODE	494:43	494:43	14	)
LEAF_NODE	494:44	494:44	10	;
ITERATION	495:10	497:12	9	
KEYWORD	495:10	495:10	10	while
LEAF_NODE	495:10	495:10	11	while
LEAF_NODE	495:15	495:15	10	(
CONDITION	495:16	495:16	10	tokenizer ( 0 , token , inputlen , line , "" , "=" , "\"" , 0 , & brkused , & next , & quoted ) == 0
EXPR	495:16	496:51	11	tokenizer ( 0 , token , inputlen , line , "" , "=" , "\"" , 0 , & brkused , & next , & quoted ) == 0
FUNCTION_CALL	495:16	496:48	12	tokenizer ( 0 , token , inputlen , line , "" , "=" , "\"" , 0 , & brkused , & next , & quoted )
CALLEE	495:16	495:16	13	tokenizer
LEAF_NODE	495:16	495:16	14	tokenizer
LEAF_NODE	495:25	495:25	13	(
ARGUMENT	495:26	495:26	13	0
FIELD	495:26	495:26	14	0
LEAF_NODE	495:26	495:26	15	0
LEAF_NODE	495:27	495:27	13	,
ARGUMENT	495:29	495:29	13	token
FIELD	495:29	495:29	14	token
LEAF_NODE	495:29	495:29	15	token
LEAF_NODE	495:34	495:34	13	,
ARGUMENT	495:36	495:36	13	inputlen
FIELD	495:36	495:36	14	inputlen
LEAF_NODE	495:36	495:36	15	inputlen
LEAF_NODE	495:44	495:44	13	,
ARGUMENT	495:46	495:46	13	line
FIELD	495:46	495:46	14	line
LEAF_NODE	495:46	495:46	15	line
LEAF_NODE	495:50	495:50	13	,
ARGUMENT	495:52	495:52	13	""
FIELD	495:52	495:52	14	""
LEAF_NODE	495:52	495:52	15	""
LEAF_NODE	495:54	495:54	13	,
ARGUMENT	495:56	495:56	13	"="
FIELD	495:56	495:56	14	"="
LEAF_NODE	495:56	495:56	15	"="
LEAF_NODE	495:59	495:59	13	,
ARGUMENT	495:61	495:61	13	"\""
FIELD	495:61	495:61	14	"\""
LEAF_NODE	495:61	495:61	15	"\""
LEAF_NODE	495:65	495:65	13	,
ARGUMENT	495:67	495:67	13	0
FIELD	495:67	495:67	14	0
LEAF_NODE	495:67	495:67	15	0
LEAF_NODE	495:68	495:68	13	,
ARGUMENT	496:26	496:26	13	& brkused
UNARY_EXPR	496:26	496:27	14	& brkused
UNARY_OPERATOR	496:26	496:26	15	&
LEAF_NODE	496:26	496:26	16	&
FIELD	496:27	496:27	15	brkused
LEAF_NODE	496:27	496:27	16	brkused
LEAF_NODE	496:34	496:34	13	,
ARGUMENT	496:35	496:35	13	& next
UNARY_EXPR	496:35	496:36	14	& next
UNARY_OPERATOR	496:35	496:35	15	&
LEAF_NODE	496:35	496:35	16	&
FIELD	496:36	496:36	15	next
LEAF_NODE	496:36	496:36	16	next
LEAF_NODE	496:40	496:40	13	,
ARGUMENT	496:41	496:41	13	& quoted
UNARY_EXPR	496:41	496:42	14	& quoted
UNARY_OPERATOR	496:41	496:41	15	&
LEAF_NODE	496:41	496:41	16	&
FIELD	496:42	496:42	15	quoted
LEAF_NODE	496:42	496:42	16	quoted
LEAF_NODE	496:48	496:48	13	)
EQ_OPERATOR	496:49	496:49	12	==
LEAF_NODE	496:49	496:49	13	==
FIELD	496:51	496:51	12	0
LEAF_NODE	496:51	496:51	13	0
LEAF_NODE	496:52	496:52	10	)
STATEMENTS	497:12	568:12	10	
LEAF_NODE	497:12	497:12	11	{
STATEMENTS	498:14	567:14	11	
SELECTION	498:14	499:16	12	
KEYWORD	498:14	498:14	13	if
LEAF_NODE	498:14	498:14	14	if
LEAF_NODE	498:17	498:17	13	(
CONDITION	498:18	498:18	13	state == 0
EXPR	498:18	498:27	14	state == 0
FIELD	498:18	498:18	15	state
LEAF_NODE	498:18	498:18	16	state
EQ_OPERATOR	498:24	498:24	15	==
LEAF_NODE	498:24	498:24	16	==
FIELD	498:27	498:27	15	0
LEAF_NODE	498:27	498:27	16	0
LEAF_NODE	498:28	498:28	13	)
STATEMENTS	499:16	520:16	13	
LEAF_NODE	499:16	499:16	14	{
STATEMENTS	500:18	510:18	14	
SIMPLE_DECL	500:18	502:24	15	int state , int next ;
INIT_DECL_LIST	500:18	500:18	16	int state , int next
VAR_DECL	500:18	501:20	17	int state
TYPE	500:18	500:18	18	int
TYPE_NAME	500:18	500:18	19	int
LEAF_NODE	500:18	500:18	20	int
NAME	501:20	501:20	18	state
LEAF_NODE	501:20	501:20	19	state
LEAF_NODE	501:25	501:25	17	,
VAR_DECL	500:18	502:20	17	int next
TYPE	500:18	500:18	18	int
TYPE_NAME	500:18	500:18	19	int
LEAF_NODE	500:18	500:18	20	int
NAME	502:20	502:20	18	next
LEAF_NODE	502:20	502:20	19	next
LEAF_NODE	502:24	502:24	16	;
SIMPLE_DECL	504:18	506:26	15	char brkused , char quoted ;
INIT_DECL_LIST	504:18	504:18	16	char brkused , char quoted
VAR_DECL	504:18	505:20	17	char brkused
TYPE	504:18	504:18	18	char
TYPE_NAME	504:18	504:18	19	char
LEAF_NODE	504:18	504:18	20	char
NAME	505:20	505:20	18	brkused
LEAF_NODE	505:20	505:20	19	brkused
LEAF_NODE	505:27	505:27	17	,
VAR_DECL	504:18	506:20	17	char quoted
TYPE	504:18	504:18	18	char
TYPE_NAME	504:18	504:18	19	char
LEAF_NODE	504:18	504:18	20	char
NAME	506:20	506:20	18	quoted
LEAF_NODE	506:20	506:20	19	quoted
LEAF_NODE	506:26	506:26	16	;
EXPR_STATEMENT	508:18	508:25	15	state = 0 ;
EXPR	508:18	508:18	16	state = 0
ASSIGN	508:18	508:24	17	state = 0
LVAL	508:18	508:18	18	state
FIELD	508:18	508:18	19	state
LEAF_NODE	508:18	508:18	20	state
ASSIGN_OP	508:23	508:23	18	=
LEAF_NODE	508:23	508:23	19	=
RVAL	508:24	508:24	18	0
FIELD	508:24	508:24	19	0
LEAF_NODE	508:24	508:24	20	0
LEAF_NODE	508:25	508:25	16	;
EXPR_STATEMENT	509:18	509:24	15	next = 0 ;
EXPR	509:18	509:18	16	next = 0
ASSIGN	509:18	509:23	17	next = 0
LVAL	509:18	509:18	18	next
FIELD	509:18	509:18	19	next
LEAF_NODE	509:18	509:18	20	next
ASSIGN_OP	509:22	509:22	18	=
LEAF_NODE	509:22	509:22	19	=
RVAL	509:23	509:23	18	0
FIELD	509:23	509:23	19	0
LEAF_NODE	509:23	509:23	20	0
LEAF_NODE	509:24	509:24	16	;
ITERATION	510:18	512:20	15	
KEYWORD	510:18	510:18	16	while
LEAF_NODE	510:18	510:18	17	while
LEAF_NODE	510:23	510:23	16	(
CONDITION	510:24	510:24	16	tokenizer ( 0 , newstr , inputlen , token , "" , "#" , "" , 0 , & brkused , & next , & quoted ) == 0
EXPR	510:24	511:61	17	tokenizer ( 0 , newstr , inputlen , token , "" , "#" , "" , 0 , & brkused , & next , & quoted ) == 0
FUNCTION_CALL	510:24	511:58	18	tokenizer ( 0 , newstr , inputlen , token , "" , "#" , "" , 0 , & brkused , & next , & quoted )
CALLEE	510:24	510:24	19	tokenizer
LEAF_NODE	510:24	510:24	20	tokenizer
LEAF_NODE	510:33	510:33	19	(
ARGUMENT	510:34	510:34	19	0
FIELD	510:34	510:34	20	0
LEAF_NODE	510:34	510:34	21	0
LEAF_NODE	510:35	510:35	19	,
ARGUMENT	510:37	510:37	19	newstr
FIELD	510:37	510:37	20	newstr
LEAF_NODE	510:37	510:37	21	newstr
LEAF_NODE	510:43	510:43	19	,
ARGUMENT	510:45	510:45	19	inputlen
FIELD	510:45	510:45	20	inputlen
LEAF_NODE	510:45	510:45	21	inputlen
LEAF_NODE	510:53	510:53	19	,
ARGUMENT	510:55	510:55	19	token
FIELD	510:55	510:55	20	token
LEAF_NODE	510:55	510:55	21	token
LEAF_NODE	510:60	510:60	19	,
ARGUMENT	510:62	510:62	19	""
FIELD	510:62	510:62	20	""
LEAF_NODE	510:62	510:62	21	""
LEAF_NODE	510:64	510:64	19	,
ARGUMENT	510:66	510:66	19	"#"
FIELD	510:66	510:66	20	"#"
LEAF_NODE	510:66	510:66	21	"#"
LEAF_NODE	510:69	510:69	19	,
ARGUMENT	510:71	510:71	19	""
FIELD	510:71	510:71	20	""
LEAF_NODE	510:71	510:71	21	""
LEAF_NODE	510:73	510:73	19	,
ARGUMENT	510:75	510:75	19	0
FIELD	510:75	510:75	20	0
LEAF_NODE	510:75	510:75	21	0
LEAF_NODE	510:76	510:76	19	,
ARGUMENT	511:34	511:34	19	& brkused
UNARY_EXPR	511:34	511:35	20	& brkused
UNARY_OPERATOR	511:34	511:34	21	&
LEAF_NODE	511:34	511:34	22	&
FIELD	511:35	511:35	21	brkused
LEAF_NODE	511:35	511:35	22	brkused
LEAF_NODE	511:42	511:42	19	,
ARGUMENT	511:44	511:44	19	& next
UNARY_EXPR	511:44	511:45	20	& next
UNARY_OPERATOR	511:44	511:44	21	&
LEAF_NODE	511:44	511:44	22	&
FIELD	511:45	511:45	21	next
LEAF_NODE	511:45	511:45	22	next
LEAF_NODE	511:49	511:49	19	,
ARGUMENT	511:51	511:51	19	& quoted
UNARY_EXPR	511:51	511:52	20	& quoted
UNARY_OPERATOR	511:51	511:51	21	&
LEAF_NODE	511:51	511:51	22	&
FIELD	511:52	511:52	21	quoted
LEAF_NODE	511:52	511:52	22	quoted
LEAF_NODE	511:58	511:58	19	)
EQ_OPERATOR	511:59	511:59	18	==
LEAF_NODE	511:59	511:59	19	==
FIELD	511:61	511:61	18	0
LEAF_NODE	511:61	511:61	19	0
LEAF_NODE	511:62	511:62	16	)
STATEMENTS	512:20	519:20	16	
LEAF_NODE	512:20	512:20	17	{
STATEMENTS	513:22	518:22	17	
SELECTION	513:22	514:24	18	
KEYWORD	513:22	513:22	19	if
LEAF_NODE	513:22	513:22	20	if
LEAF_NODE	513:25	513:25	19	(
CONDITION	513:26	513:26	19	state == 0
EXPR	513:26	513:35	20	state == 0
FIELD	513:26	513:26	21	state
LEAF_NODE	513:26	513:26	22	state
EQ_OPERATOR	513:32	513:32	21	==
LEAF_NODE	513:32	513:32	22	==
FIELD	513:35	513:35	21	0
LEAF_NODE	513:35	513:35	22	0
LEAF_NODE	513:36	513:36	19	)
STATEMENTS	514:24	514:24	19	
EXPR_STATEMENT	514:24	514:62	20	dataset = ( unsigned char ) atoi ( newstr ) ;
EXPR	514:24	514:24	21	dataset = ( unsigned char ) atoi ( newstr )
ASSIGN	514:24	514:34	22	dataset = ( unsigned char ) atoi ( newstr )
LVAL	514:24	514:24	23	dataset
FIELD	514:24	514:24	24	dataset
LEAF_NODE	514:24	514:24	25	dataset
ASSIGN_OP	514:32	514:32	23	=
LEAF_NODE	514:32	514:32	24	=
RVAL	514:34	514:50	23	( unsigned char ) atoi ( newstr )
LEAF_NODE	514:34	514:34	24	(
TYPE_NAME	514:35	514:44	24	unsigned char
LEAF_NODE	514:35	514:35	25	unsigned
LEAF_NODE	514:44	514:44	25	char
LEAF_NODE	514:48	514:48	24	)
FUNCTION_CALL	514:50	514:61	24	atoi ( newstr )
CALLEE	514:50	514:50	25	atoi
LEAF_NODE	514:50	514:50	26	atoi
LEAF_NODE	514:54	514:54	25	(
ARGUMENT	514:55	514:55	25	newstr
FIELD	514:55	514:55	26	newstr
LEAF_NODE	514:55	514:55	27	newstr
LEAF_NODE	514:61	514:61	25	)
LEAF_NODE	514:62	514:62	21	;
SELECTION	515:22	516:24	18	
KEYWORD	515:22	515:22	19	else
LEAF_NODE	515:22	515:22	20	else
STATEMENTS	516:24	516:24	19	
SELECTION	516:24	517:26	20	
KEYWORD	516:24	516:24	21	if
LEAF_NODE	516:24	516:24	22	if
LEAF_NODE	516:27	516:27	21	(
CONDITION	516:28	516:28	21	state == 1
EXPR	516:28	516:37	22	state == 1
FIELD	516:28	516:28	23	state
LEAF_NODE	516:28	516:28	24	state
EQ_OPERATOR	516:34	516:34	23	==
LEAF_NODE	516:34	516:34	24	==
FIELD	516:37	516:37	23	1
LEAF_NODE	516:37	516:37	24	1
LEAF_NODE	516:38	516:38	21	)
STATEMENTS	517:26	517:26	21	
EXPR_STATEMENT	517:26	517:63	22	recnum = ( unsigned char ) atoi ( newstr ) ;
EXPR	517:26	517:26	23	recnum = ( unsigned char ) atoi ( newstr )
ASSIGN	517:26	517:35	24	recnum = ( unsigned char ) atoi ( newstr )
LVAL	517:26	517:26	25	recnum
FIELD	517:26	517:26	26	recnum
LEAF_NODE	517:26	517:26	27	recnum
ASSIGN_OP	517:33	517:33	25	=
LEAF_NODE	517:33	517:33	26	=
RVAL	517:35	517:51	25	( unsigned char ) atoi ( newstr )
LEAF_NODE	517:35	517:35	26	(
TYPE_NAME	517:36	517:45	26	unsigned char
LEAF_NODE	517:36	517:36	27	unsigned
LEAF_NODE	517:45	517:45	27	char
LEAF_NODE	517:49	517:49	26	)
FUNCTION_CALL	517:51	517:62	26	atoi ( newstr )
CALLEE	517:51	517:51	27	atoi
LEAF_NODE	517:51	517:51	28	atoi
LEAF_NODE	517:55	517:55	27	(
ARGUMENT	517:56	517:56	27	newstr
FIELD	517:56	517:56	28	newstr
LEAF_NODE	517:56	517:56	29	newstr
LEAF_NODE	517:62	517:62	27	)
LEAF_NODE	517:63	517:63	23	;
EXPR_STATEMENT	518:22	518:29	18	state ++ ;
EXPR	518:22	518:22	19	state ++
FIELD	518:22	518:27	20	state ++
LEAF_NODE	518:22	518:22	21	state
LEAF_NODE	518:27	518:27	21	++
LEAF_NODE	518:29	518:29	19	;
LEAF_NODE	519:20	519:20	17	}
LEAF_NODE	520:16	520:16	14	}
SELECTION	521:14	522:16	12	
KEYWORD	521:14	521:14	13	else
LEAF_NODE	521:14	521:14	14	else
STATEMENTS	522:16	522:16	13	
SELECTION	522:16	523:18	14	
KEYWORD	522:16	522:16	15	if
LEAF_NODE	522:16	522:16	16	if
LEAF_NODE	522:19	522:19	15	(
CONDITION	522:20	522:20	15	state == 1
EXPR	522:20	522:29	16	state == 1
FIELD	522:20	522:20	17	state
LEAF_NODE	522:20	522:20	18	state
EQ_OPERATOR	522:26	522:26	17	==
LEAF_NODE	522:26	522:26	18	==
FIELD	522:29	522:29	17	1
LEAF_NODE	522:29	522:29	18	1
LEAF_NODE	522:30	522:30	15	)
STATEMENTS	523:18	566:18	15	
LEAF_NODE	523:18	523:18	16	{
STATEMENTS	524:20	564:20	16	
SIMPLE_DECL	524:20	525:26	17	int next ;
VAR_DECL	524:20	525:22	18	int next
TYPE	524:20	524:20	19	int
TYPE_NAME	524:20	524:20	20	int
LEAF_NODE	524:20	524:20	21	int
NAME	525:22	525:22	19	next
LEAF_NODE	525:22	525:22	20	next
LEAF_NODE	525:26	525:26	18	;
SIMPLE_DECL	527:20	528:25	17	unsigned long len ;
VAR_DECL	527:20	528:22	18	unsigned long len
TYPE	527:20	527:20	19	unsigned long
TYPE_NAME	527:20	527:29	20	unsigned long
LEAF_NODE	527:20	527:20	21	unsigned
LEAF_NODE	527:29	527:29	21	long
NAME	528:22	528:22	19	len
LEAF_NODE	528:22	528:22	20	len
LEAF_NODE	528:25	528:25	18	;
SIMPLE_DECL	530:20	532:28	17	char brkused , char quoted ;
INIT_DECL_LIST	530:20	530:20	18	char brkused , char quoted
VAR_DECL	530:20	531:22	19	char brkused
TYPE	530:20	530:20	20	char
TYPE_NAME	530:20	530:20	21	char
LEAF_NODE	530:20	530:20	22	char
NAME	531:22	531:22	20	brkused
LEAF_NODE	531:22	531:22	21	brkused
LEAF_NODE	531:29	531:29	19	,
VAR_DECL	530:20	532:22	19	char quoted
TYPE	530:20	530:20	20	char
TYPE_NAME	530:20	530:20	21	char
LEAF_NODE	530:20	530:20	22	char
NAME	532:22	532:22	20	quoted
LEAF_NODE	532:22	532:22	21	quoted
LEAF_NODE	532:28	532:28	18	;
EXPR_STATEMENT	534:20	534:26	17	next = 0 ;
EXPR	534:20	534:20	18	next = 0
ASSIGN	534:20	534:25	19	next = 0
LVAL	534:20	534:20	20	next
FIELD	534:20	534:20	21	next
LEAF_NODE	534:20	534:20	22	next
ASSIGN_OP	534:24	534:24	20	=
LEAF_NODE	534:24	534:24	21	=
RVAL	534:25	534:25	20	0
FIELD	534:25	534:25	21	0
LEAF_NODE	534:25	534:25	22	0
LEAF_NODE	534:26	534:26	18	;
EXPR_STATEMENT	535:20	535:39	17	len = strlen ( token ) ;
EXPR	535:20	535:20	18	len = strlen ( token )
ASSIGN	535:20	535:26	19	len = strlen ( token )
LVAL	535:20	535:20	20	len
FIELD	535:20	535:20	21	len
LEAF_NODE	535:20	535:20	22	len
ASSIGN_OP	535:24	535:24	20	=
LEAF_NODE	535:24	535:24	21	=
RVAL	535:26	535:26	20	strlen ( token )
FUNCTION_CALL	535:26	535:38	21	strlen ( token )
CALLEE	535:26	535:26	22	strlen
LEAF_NODE	535:26	535:26	23	strlen
LEAF_NODE	535:32	535:32	22	(
ARGUMENT	535:33	535:33	22	token
FIELD	535:33	535:33	23	token
LEAF_NODE	535:33	535:33	24	token
LEAF_NODE	535:38	535:38	22	)
LEAF_NODE	535:39	535:39	18	;
ITERATION	536:20	538:22	17	
KEYWORD	536:20	536:20	18	while
LEAF_NODE	536:20	536:20	19	while
LEAF_NODE	536:25	536:25	18	(
CONDITION	536:26	536:26	18	tokenizer ( 0 , newstr , inputlen , token , "" , "&" , "" , 0 , & brkused , & next , & quoted ) == 0
EXPR	536:26	537:63	19	tokenizer ( 0 , newstr , inputlen , token , "" , "&" , "" , 0 , & brkused , & next , & quoted ) == 0
FUNCTION_CALL	536:26	537:60	20	tokenizer ( 0 , newstr , inputlen , token , "" , "&" , "" , 0 , & brkused , & next , & quoted )
CALLEE	536:26	536:26	21	tokenizer
LEAF_NODE	536:26	536:26	22	tokenizer
LEAF_NODE	536:35	536:35	21	(
ARGUMENT	536:36	536:36	21	0
FIELD	536:36	536:36	22	0
LEAF_NODE	536:36	536:36	23	0
LEAF_NODE	536:37	536:37	21	,
ARGUMENT	536:39	536:39	21	newstr
FIELD	536:39	536:39	22	newstr
LEAF_NODE	536:39	536:39	23	newstr
LEAF_NODE	536:45	536:45	21	,
ARGUMENT	536:47	536:47	21	inputlen
FIELD	536:47	536:47	22	inputlen
LEAF_NODE	536:47	536:47	23	inputlen
LEAF_NODE	536:55	536:55	21	,
ARGUMENT	536:57	536:57	21	token
FIELD	536:57	536:57	22	token
LEAF_NODE	536:57	536:57	23	token
LEAF_NODE	536:62	536:62	21	,
ARGUMENT	536:64	536:64	21	""
FIELD	536:64	536:64	22	""
LEAF_NODE	536:64	536:64	23	""
LEAF_NODE	536:66	536:66	21	,
ARGUMENT	536:68	536:68	21	"&"
FIELD	536:68	536:68	22	"&"
LEAF_NODE	536:68	536:68	23	"&"
LEAF_NODE	536:71	536:71	21	,
ARGUMENT	536:73	536:73	21	""
FIELD	536:73	536:73	22	""
LEAF_NODE	536:73	536:73	23	""
LEAF_NODE	536:75	536:75	21	,
ARGUMENT	536:77	536:77	21	0
FIELD	536:77	536:77	22	0
LEAF_NODE	536:77	536:77	23	0
LEAF_NODE	536:78	536:78	21	,
ARGUMENT	537:36	537:36	21	& brkused
UNARY_EXPR	537:36	537:37	22	& brkused
UNARY_OPERATOR	537:36	537:36	23	&
LEAF_NODE	537:36	537:36	24	&
FIELD	537:37	537:37	23	brkused
LEAF_NODE	537:37	537:37	24	brkused
LEAF_NODE	537:44	537:44	21	,
ARGUMENT	537:46	537:46	21	& next
UNARY_EXPR	537:46	537:47	22	& next
UNARY_OPERATOR	537:46	537:46	23	&
LEAF_NODE	537:46	537:46	24	&
FIELD	537:47	537:47	23	next
LEAF_NODE	537:47	537:47	24	next
LEAF_NODE	537:51	537:51	21	,
ARGUMENT	537:53	537:53	21	& quoted
UNARY_EXPR	537:53	537:54	22	& quoted
UNARY_OPERATOR	537:53	537:53	23	&
LEAF_NODE	537:53	537:53	24	&
FIELD	537:54	537:54	23	quoted
LEAF_NODE	537:54	537:54	24	quoted
LEAF_NODE	537:60	537:60	21	)
EQ_OPERATOR	537:61	537:61	20	==
LEAF_NODE	537:61	537:61	21	==
FIELD	537:63	537:63	20	0
LEAF_NODE	537:63	537:63	21	0
LEAF_NODE	537:64	537:64	18	)
STATEMENTS	538:22	546:22	18	
LEAF_NODE	538:22	538:22	19	{
STATEMENTS	539:24	539:24	19	
SELECTION	539:24	540:26	20	
KEYWORD	539:24	539:24	21	if
LEAF_NODE	539:24	539:24	22	if
LEAF_NODE	539:27	539:27	21	(
CONDITION	539:28	539:28	21	brkused && next > 0
EXPR	539:28	539:28	22	brkused && next > 0
AND	539:28	539:39	23	brkused && next > 0
EXPR	539:28	539:28	24	brkused
FIELD	539:28	539:28	25	brkused
LEAF_NODE	539:28	539:28	26	brkused
LEAF_NODE	539:36	539:36	24	&&
EXPR	539:39	539:46	24	next > 0
FIELD	539:39	539:39	25	next
LEAF_NODE	539:39	539:39	26	next
REL_OPERATOR	539:44	539:44	25	>
LEAF_NODE	539:44	539:44	26	>
FIELD	539:46	539:46	25	0
LEAF_NODE	539:46	539:46	26	0
LEAF_NODE	539:47	539:47	21	)
STATEMENTS	540:26	545:26	21	
LEAF_NODE	540:26	540:26	22	{
STATEMENTS	541:28	544:28	22	
SIMPLE_DECL	541:28	542:49	23	char * s ; s = & token [ next - 1 ] ;
VAR_DECL	541:28	542:31	24	char * s ; s = & token [ next - 1 ]
TYPE	541:28	542:30	25	char *
TYPE_NAME	541:28	541:28	26	char
LEAF_NODE	541:28	541:28	27	char
POINTER	542:30	542:30	26	*
LEAF_NODE	542:30	542:30	27	*
NAME	542:31	542:31	25	s
LEAF_NODE	542:31	542:31	26	s
LEAF_NODE	0:0	0:0	25	;
INIT	542:31	542:31	25	s = & token [ next - 1 ]
ASSIGN	542:31	542:35	26	s = & token [ next - 1 ]
LVAL	542:31	542:31	27	s
NAME	542:31	542:31	28	s
LEAF_NODE	542:31	542:31	29	s
ASSIGN_OP	542:33	542:33	27	=
LEAF_NODE	542:33	542:33	28	=
RVAL	542:35	542:35	27	& token [ next - 1 ]
UNARY_EXPR	542:35	542:36	28	& token [ next - 1 ]
UNARY_OPERATOR	542:35	542:35	29	&
LEAF_NODE	542:35	542:35	30	&
FIELD	542:36	542:48	29	token [ next - 1 ]
LEAF_NODE	542:36	542:36	30	token
LEAF_NODE	542:41	542:41	30	[
EXPR	542:42	542:47	30	next - 1
FIELD	542:42	542:42	31	next
LEAF_NODE	542:42	542:42	32	next
LEAF_NODE	542:46	542:46	31	-
FIELD	542:47	542:47	31	1
LEAF_NODE	542:47	542:47	32	1
LEAF_NODE	542:48	542:48	30	]
LEAF_NODE	542:49	542:49	24	;
EXPR_STATEMENT	544:28	544:65	23	len -= convertHTMLcodes ( s , strlen ( s ) ) ;
EXPR	544:28	544:28	24	len -= convertHTMLcodes ( s , strlen ( s ) )
ASSIGN	544:28	544:35	25	len -= convertHTMLcodes ( s , strlen ( s ) )
LVAL	544:28	544:28	26	len
FIELD	544:28	544:28	27	len
LEAF_NODE	544:28	544:28	28	len
ASSIGN_OP	544:32	544:32	26	-=
LEAF_NODE	544:32	544:32	27	-=
RVAL	544:35	544:35	26	convertHTMLcodes ( s , strlen ( s ) )
FUNCTION_CALL	544:35	544:64	27	convertHTMLcodes ( s , strlen ( s ) )
CALLEE	544:35	544:35	28	convertHTMLcodes
LEAF_NODE	544:35	544:35	29	convertHTMLcodes
LEAF_NODE	544:51	544:51	28	(
ARGUMENT	544:52	544:52	28	s
FIELD	544:52	544:52	29	s
LEAF_NODE	544:52	544:52	30	s
LEAF_NODE	544:53	544:53	28	,
ARGUMENT	544:55	544:55	28	strlen ( s )
FUNCTION_CALL	544:55	544:63	29	strlen ( s )
CALLEE	544:55	544:55	30	strlen
LEAF_NODE	544:55	544:55	31	strlen
LEAF_NODE	544:61	544:61	30	(
ARGUMENT	544:62	544:62	30	s
FIELD	544:62	544:62	31	s
LEAF_NODE	544:62	544:62	32	s
LEAF_NODE	544:63	544:63	30	)
LEAF_NODE	544:64	544:64	28	)
LEAF_NODE	544:65	544:65	24	;
LEAF_NODE	545:26	545:26	22	}
LEAF_NODE	546:22	546:22	19	}
EXPR_STATEMENT	548:20	548:38	17	fputc ( 0x1c , ofile ) ;
EXPR	548:20	548:20	18	fputc ( 0x1c , ofile )
FUNCTION_CALL	548:20	548:37	19	fputc ( 0x1c , ofile )
CALLEE	548:20	548:20	20	fputc
LEAF_NODE	548:20	548:20	21	fputc
LEAF_NODE	548:25	548:25	20	(
ARGUMENT	548:26	548:26	20	0x1c
FIELD	548:26	548:26	21	0x1c
LEAF_NODE	548:26	548:26	22	0x1c
LEAF_NODE	548:30	548:30	20	,
ARGUMENT	548:32	548:32	20	ofile
FIELD	548:32	548:32	21	ofile
LEAF_NODE	548:32	548:32	22	ofile
LEAF_NODE	548:37	548:37	20	)
LEAF_NODE	548:38	548:38	18	;
EXPR_STATEMENT	549:20	549:41	17	fputc ( dataset , ofile ) ;
EXPR	549:20	549:20	18	fputc ( dataset , ofile )
FUNCTION_CALL	549:20	549:40	19	fputc ( dataset , ofile )
CALLEE	549:20	549:20	20	fputc
LEAF_NODE	549:20	549:20	21	fputc
LEAF_NODE	549:25	549:25	20	(
ARGUMENT	549:26	549:26	20	dataset
FIELD	549:26	549:26	21	dataset
LEAF_NODE	549:26	549:26	22	dataset
LEAF_NODE	549:33	549:33	20	,
ARGUMENT	549:35	549:35	20	ofile
FIELD	549:35	549:35	21	ofile
LEAF_NODE	549:35	549:35	22	ofile
LEAF_NODE	549:40	549:40	20	)
LEAF_NODE	549:41	549:41	18	;
EXPR_STATEMENT	550:20	550:40	17	fputc ( recnum , ofile ) ;
EXPR	550:20	550:20	18	fputc ( recnum , ofile )
FUNCTION_CALL	550:20	550:39	19	fputc ( recnum , ofile )
CALLEE	550:20	550:20	20	fputc
LEAF_NODE	550:20	550:20	21	fputc
LEAF_NODE	550:25	550:25	20	(
ARGUMENT	550:26	550:26	20	recnum
FIELD	550:26	550:26	21	recnum
LEAF_NODE	550:26	550:26	22	recnum
LEAF_NODE	550:32	550:32	20	,
ARGUMENT	550:34	550:34	20	ofile
FIELD	550:34	550:34	21	ofile
LEAF_NODE	550:34	550:34	22	ofile
LEAF_NODE	550:39	550:39	20	)
LEAF_NODE	550:40	550:40	18	;
SELECTION	551:20	552:22	17	
KEYWORD	551:20	551:20	18	if
LEAF_NODE	551:20	551:20	19	if
LEAF_NODE	551:23	551:23	18	(
CONDITION	551:24	551:24	18	len < 0x10000
EXPR	551:24	551:30	19	len < 0x10000
FIELD	551:24	551:24	20	len
LEAF_NODE	551:24	551:24	21	len
REL_OPERATOR	551:28	551:28	20	<
LEAF_NODE	551:28	551:28	21	<
FIELD	551:30	551:30	20	0x10000
LEAF_NODE	551:30	551:30	21	0x10000
LEAF_NODE	551:37	551:37	18	)
STATEMENTS	552:22	555:22	18	
LEAF_NODE	552:22	552:22	19	{
STATEMENTS	553:24	554:24	19	
EXPR_STATEMENT	553:24	553:54	20	fputc ( ( len >> 8 ) & 255 , ofile ) ;
EXPR	553:24	553:24	21	fputc ( ( len >> 8 ) & 255 , ofile )
FUNCTION_CALL	553:24	553:53	22	fputc ( ( len >> 8 ) & 255 , ofile )
CALLEE	553:24	553:24	23	fputc
LEAF_NODE	553:24	553:24	24	fputc
LEAF_NODE	553:29	553:29	23	(
ARGUMENT	553:30	553:43	23	( len >> 8 ) & 255
LEAF_NODE	553:30	553:30	24	(
FIELD	553:31	553:31	24	len
LEAF_NODE	553:31	553:31	25	len
LEAF_NODE	553:35	553:35	24	>>
FIELD	553:38	553:38	24	8
LEAF_NODE	553:38	553:38	25	8
LEAF_NODE	553:39	553:39	24	)
LEAF_NODE	553:41	553:41	24	&
FIELD	553:43	553:43	24	255
LEAF_NODE	553:43	553:43	25	255
LEAF_NODE	553:46	553:46	23	,
ARGUMENT	553:48	553:48	23	ofile
FIELD	553:48	553:48	24	ofile
LEAF_NODE	553:48	553:48	25	ofile
LEAF_NODE	553:53	553:53	23	)
LEAF_NODE	553:54	553:54	21	;
EXPR_STATEMENT	554:24	554:47	20	fputc ( len & 255 , ofile ) ;
EXPR	554:24	554:24	21	fputc ( len & 255 , ofile )
FUNCTION_CALL	554:24	554:46	22	fputc ( len & 255 , ofile )
CALLEE	554:24	554:24	23	fputc
LEAF_NODE	554:24	554:24	24	fputc
LEAF_NODE	554:29	554:29	23	(
ARGUMENT	554:30	554:36	23	len & 255
FIELD	554:30	554:30	24	len
LEAF_NODE	554:30	554:30	25	len
LEAF_NODE	554:34	554:34	24	&
FIELD	554:36	554:36	24	255
LEAF_NODE	554:36	554:36	25	255
LEAF_NODE	554:39	554:39	23	,
ARGUMENT	554:41	554:41	23	ofile
FIELD	554:41	554:41	24	ofile
LEAF_NODE	554:41	554:41	25	ofile
LEAF_NODE	554:46	554:46	23	)
LEAF_NODE	554:47	554:47	21	;
LEAF_NODE	555:22	555:22	19	}
SELECTION	556:20	557:22	17	
KEYWORD	556:20	556:20	18	else
LEAF_NODE	556:20	556:20	19	else
STATEMENTS	557:22	562:22	18	
LEAF_NODE	557:22	557:22	19	{
STATEMENTS	558:24	561:24	19	
EXPR_STATEMENT	558:24	558:64	20	fputc ( ( ( len >> 24 ) & 255 ) | 0x80 , ofile ) ;
EXPR	558:24	558:24	21	fputc ( ( ( len >> 24 ) & 255 ) | 0x80 , ofile )
FUNCTION_CALL	558:24	558:63	22	fputc ( ( ( len >> 24 ) & 255 ) | 0x80 , ofile )
CALLEE	558:24	558:24	23	fputc
LEAF_NODE	558:24	558:24	24	fputc
LEAF_NODE	558:29	558:29	23	(
ARGUMENT	558:30	558:30	23	( ( len >> 24 ) & 255 ) | 0x80
BIT_OR	558:30	558:52	24	( ( len >> 24 ) & 255 ) | 0x80
BIT_OR_ELEM	558:30	558:48	25	( ( len >> 24 ) & 255 )
LEAF_NODE	558:30	558:30	26	(
LEAF_NODE	558:31	558:31	26	(
FIELD	558:32	558:32	26	len
LEAF_NODE	558:32	558:32	27	len
LEAF_NODE	558:36	558:36	26	>>
FIELD	558:39	558:39	26	24
LEAF_NODE	558:39	558:39	27	24
LEAF_NODE	558:41	558:41	26	)
LEAF_NODE	558:43	558:43	26	&
FIELD	558:45	558:45	26	255
LEAF_NODE	558:45	558:45	27	255
LEAF_NODE	558:48	558:48	26	)
LEAF_NODE	558:50	558:50	25	|
BIT_OR_ELEM	558:52	558:52	25	0x80
FIELD	558:52	558:52	26	0x80
LEAF_NODE	558:52	558:52	27	0x80
LEAF_NODE	558:56	558:56	23	,
ARGUMENT	558:58	558:58	23	ofile
FIELD	558:58	558:58	24	ofile
LEAF_NODE	558:58	558:58	25	ofile
LEAF_NODE	558:63	558:63	23	)
LEAF_NODE	558:64	558:64	21	;
EXPR_STATEMENT	559:24	559:55	20	fputc ( ( len >> 16 ) & 255 , ofile ) ;
EXPR	559:24	559:24	21	fputc ( ( len >> 16 ) & 255 , ofile )
FUNCTION_CALL	559:24	559:54	22	fputc ( ( len >> 16 ) & 255 , ofile )
CALLEE	559:24	559:24	23	fputc
LEAF_NODE	559:24	559:24	24	fputc
LEAF_NODE	559:29	559:29	23	(
ARGUMENT	559:30	559:44	23	( len >> 16 ) & 255
LEAF_NODE	559:30	559:30	24	(
FIELD	559:31	559:31	24	len
LEAF_NODE	559:31	559:31	25	len
LEAF_NODE	559:35	559:35	24	>>
FIELD	559:38	559:38	24	16
LEAF_NODE	559:38	559:38	25	16
LEAF_NODE	559:40	559:40	24	)
LEAF_NODE	559:42	559:42	24	&
FIELD	559:44	559:44	24	255
LEAF_NODE	559:44	559:44	25	255
LEAF_NODE	559:47	559:47	23	,
ARGUMENT	559:49	559:49	23	ofile
FIELD	559:49	559:49	24	ofile
LEAF_NODE	559:49	559:49	25	ofile
LEAF_NODE	559:54	559:54	23	)
LEAF_NODE	559:55	559:55	21	;
EXPR_STATEMENT	560:24	560:54	20	fputc ( ( len >> 8 ) & 255 , ofile ) ;
EXPR	560:24	560:24	21	fputc ( ( len >> 8 ) & 255 , ofile )
FUNCTION_CALL	560:24	560:53	22	fputc ( ( len >> 8 ) & 255 , ofile )
CALLEE	560:24	560:24	23	fputc
LEAF_NODE	560:24	560:24	24	fputc
LEAF_NODE	560:29	560:29	23	(
ARGUMENT	560:30	560:43	23	( len >> 8 ) & 255
LEAF_NODE	560:30	560:30	24	(
FIELD	560:31	560:31	24	len
LEAF_NODE	560:31	560:31	25	len
LEAF_NODE	560:35	560:35	24	>>
FIELD	560:38	560:38	24	8
LEAF_NODE	560:38	560:38	25	8
LEAF_NODE	560:39	560:39	24	)
LEAF_NODE	560:41	560:41	24	&
FIELD	560:43	560:43	24	255
LEAF_NODE	560:43	560:43	25	255
LEAF_NODE	560:46	560:46	23	,
ARGUMENT	560:48	560:48	23	ofile
FIELD	560:48	560:48	24	ofile
LEAF_NODE	560:48	560:48	25	ofile
LEAF_NODE	560:53	560:53	23	)
LEAF_NODE	560:54	560:54	21	;
EXPR_STATEMENT	561:24	561:47	20	fputc ( len & 255 , ofile ) ;
EXPR	561:24	561:24	21	fputc ( len & 255 , ofile )
FUNCTION_CALL	561:24	561:46	22	fputc ( len & 255 , ofile )
CALLEE	561:24	561:24	23	fputc
LEAF_NODE	561:24	561:24	24	fputc
LEAF_NODE	561:29	561:29	23	(
ARGUMENT	561:30	561:36	23	len & 255
FIELD	561:30	561:30	24	len
LEAF_NODE	561:30	561:30	25	len
LEAF_NODE	561:34	561:34	24	&
FIELD	561:36	561:36	24	255
LEAF_NODE	561:36	561:36	25	255
LEAF_NODE	561:39	561:39	23	,
ARGUMENT	561:41	561:41	23	ofile
FIELD	561:41	561:41	24	ofile
LEAF_NODE	561:41	561:41	25	ofile
LEAF_NODE	561:46	561:46	23	)
LEAF_NODE	561:47	561:47	21	;
LEAF_NODE	562:22	562:22	19	}
EXPR_STATEMENT	563:20	563:26	17	next = 0 ;
EXPR	563:20	563:20	18	next = 0
ASSIGN	563:20	563:25	19	next = 0
LVAL	563:20	563:20	20	next
FIELD	563:20	563:20	21	next
LEAF_NODE	563:20	563:20	22	next
ASSIGN_OP	563:24	563:24	20	=
LEAF_NODE	563:24	563:24	21	=
RVAL	563:25	563:25	20	0
FIELD	563:25	563:25	21	0
LEAF_NODE	563:25	563:25	22	0
LEAF_NODE	563:26	563:26	18	;
ITERATION	564:20	565:22	17	
KEYWORD	564:20	564:20	18	while
LEAF_NODE	564:20	564:20	19	while
LEAF_NODE	564:26	564:26	18	(
CONDITION	564:27	564:27	18	len --
EXPR	564:27	564:27	19	len --
FIELD	564:27	564:30	20	len --
LEAF_NODE	564:27	564:27	21	len
LEAF_NODE	564:30	564:30	21	--
LEAF_NODE	564:32	564:32	18	)
STATEMENTS	565:22	565:22	18	
EXPR_STATEMENT	565:22	565:49	19	fputc ( token [ next ++ ] , ofile ) ;
EXPR	565:22	565:22	20	fputc ( token [ next ++ ] , ofile )
FUNCTION_CALL	565:22	565:48	21	fputc ( token [ next ++ ] , ofile )
CALLEE	565:22	565:22	22	fputc
LEAF_NODE	565:22	565:22	23	fputc
LEAF_NODE	565:27	565:27	22	(
ARGUMENT	565:28	565:28	22	token [ next ++ ]
FIELD	565:28	565:40	23	token [ next ++ ]
LEAF_NODE	565:28	565:28	24	token
LEAF_NODE	565:33	565:33	24	[
EXPR	565:34	565:34	24	next ++
FIELD	565:34	565:38	25	next ++
LEAF_NODE	565:34	565:34	26	next
LEAF_NODE	565:38	565:38	26	++
LEAF_NODE	565:40	565:40	24	]
LEAF_NODE	565:41	565:41	22	,
ARGUMENT	565:43	565:43	22	ofile
FIELD	565:43	565:43	23	ofile
LEAF_NODE	565:43	565:43	24	ofile
LEAF_NODE	565:48	565:48	22	)
LEAF_NODE	565:49	565:49	20	;
LEAF_NODE	566:18	566:18	16	}
EXPR_STATEMENT	567:14	567:21	12	state ++ ;
EXPR	567:14	567:14	13	state ++
FIELD	567:14	567:19	14	state ++
LEAF_NODE	567:14	567:14	15	state
LEAF_NODE	567:19	567:19	15	++
LEAF_NODE	567:21	567:21	13	;
LEAF_NODE	568:12	568:12	11	}
EXPR_STATEMENT	569:10	569:21	9	free ( token ) ;
EXPR	569:10	569:10	10	free ( token )
FUNCTION_CALL	569:10	569:20	11	free ( token )
CALLEE	569:10	569:10	12	free
LEAF_NODE	569:10	569:10	13	free
LEAF_NODE	569:14	569:14	12	(
ARGUMENT	569:15	569:15	12	token
FIELD	569:15	569:15	13	token
LEAF_NODE	569:15	569:15	14	token
LEAF_NODE	569:20	569:20	12	)
LEAF_NODE	569:21	569:21	10	;
EXPR_STATEMENT	570:10	570:30	9	token = ( char * ) NULL ;
EXPR	570:10	570:10	10	token = ( char * ) NULL
ASSIGN	570:10	570:18	11	token = ( char * ) NULL
LVAL	570:10	570:10	12	token
FIELD	570:10	570:10	13	token
LEAF_NODE	570:10	570:10	14	token
ASSIGN_OP	570:16	570:16	12	=
LEAF_NODE	570:16	570:16	13	=
RVAL	570:18	570:26	12	( char * ) NULL
LEAF_NODE	570:18	570:18	13	(
TYPE_NAME	570:19	570:19	13	char
LEAF_NODE	570:19	570:19	14	char
LEAF_NODE	570:24	570:24	13	*
LEAF_NODE	570:25	570:25	13	)
FIELD	570:26	570:26	13	NULL
LEAF_NODE	570:26	570:26	14	NULL
LEAF_NODE	570:30	570:30	10	;
EXPR_STATEMENT	571:10	571:22	9	free ( newstr ) ;
EXPR	571:10	571:10	10	free ( newstr )
FUNCTION_CALL	571:10	571:21	11	free ( newstr )
CALLEE	571:10	571:10	12	free
LEAF_NODE	571:10	571:10	13	free
LEAF_NODE	571:14	571:14	12	(
ARGUMENT	571:15	571:15	12	newstr
FIELD	571:15	571:15	13	newstr
LEAF_NODE	571:15	571:15	14	newstr
LEAF_NODE	571:21	571:21	12	)
LEAF_NODE	571:22	571:22	10	;
EXPR_STATEMENT	572:10	572:31	9	newstr = ( char * ) NULL ;
EXPR	572:10	572:10	10	newstr = ( char * ) NULL
ASSIGN	572:10	572:19	11	newstr = ( char * ) NULL
LVAL	572:10	572:10	12	newstr
FIELD	572:10	572:10	13	newstr
LEAF_NODE	572:10	572:10	14	newstr
ASSIGN_OP	572:17	572:17	12	=
LEAF_NODE	572:17	572:17	13	=
RVAL	572:19	572:27	12	( char * ) NULL
LEAF_NODE	572:19	572:19	13	(
TYPE_NAME	572:20	572:20	13	char
LEAF_NODE	572:20	572:20	14	char
LEAF_NODE	572:25	572:25	13	*
LEAF_NODE	572:26	572:26	13	)
FIELD	572:27	572:27	13	NULL
LEAF_NODE	572:27	572:27	14	NULL
LEAF_NODE	572:31	572:31	10	;
LEAF_NODE	573:8	573:8	8	}
EXPR_STATEMENT	574:6	574:16	6	free ( line ) ;
EXPR	574:6	574:6	7	free ( line )
FUNCTION_CALL	574:6	574:15	8	free ( line )
CALLEE	574:6	574:6	9	free
LEAF_NODE	574:6	574:6	10	free
LEAF_NODE	574:10	574:10	9	(
ARGUMENT	574:11	574:11	9	line
FIELD	574:11	574:11	10	line
LEAF_NODE	574:11	574:11	11	line
LEAF_NODE	574:15	574:15	9	)
LEAF_NODE	574:16	574:16	7	;
EXPR_STATEMENT	576:6	576:21	6	fclose ( ifile ) ;
EXPR	576:6	576:6	7	fclose ( ifile )
FUNCTION_CALL	576:6	576:20	8	fclose ( ifile )
CALLEE	576:6	576:6	9	fclose
LEAF_NODE	576:6	576:6	10	fclose
LEAF_NODE	576:12	576:12	9	(
ARGUMENT	576:14	576:14	9	ifile
FIELD	576:14	576:14	10	ifile
LEAF_NODE	576:14	576:14	11	ifile
LEAF_NODE	576:20	576:20	9	)
LEAF_NODE	576:21	576:21	7	;
EXPR_STATEMENT	577:6	577:21	6	fclose ( ofile ) ;
EXPR	577:6	577:6	7	fclose ( ofile )
FUNCTION_CALL	577:6	577:20	8	fclose ( ofile )
CALLEE	577:6	577:6	9	fclose
LEAF_NODE	577:6	577:6	10	fclose
LEAF_NODE	577:12	577:12	9	(
ARGUMENT	577:14	577:14	9	ofile
FIELD	577:14	577:14	10	ofile
LEAF_NODE	577:14	577:14	11	ofile
LEAF_NODE	577:20	577:20	9	)
LEAF_NODE	577:21	577:21	7	;
LEAF_NODE	578:4	578:4	5	}
JUMP_STATEMENT	580:2	580:10	3	return 0 ;
KEYWORD	580:2	580:2	4	return
LEAF_NODE	580:2	580:2	5	return
DESTINATION	580:9	580:9	4	0
EXPR	580:9	580:9	5	0
FIELD	580:9	580:9	6	0
LEAF_NODE	580:9	580:9	7	0
LEAF_NODE	580:10	580:10	4	;
LEAF_NODE	581:0	581:0	2	}
SIMPLE_DECL	773:0	773:12	1	int _p_state ;
VAR_DECL	773:0	773:4	2	int _p_state
TYPE	773:0	773:0	3	int
TYPE_NAME	773:0	773:0	4	int
LEAF_NODE	773:0	773:0	5	int
NAME	773:4	773:4	3	_p_state
LEAF_NODE	773:4	773:4	4	_p_state
LEAF_NODE	773:12	773:12	2	;
SIMPLE_DECL	775:0	775:16	1	char _p_curquote ;
VAR_DECL	775:0	775:5	2	char _p_curquote
TYPE	775:0	775:0	3	char
TYPE_NAME	775:0	775:0	4	char
LEAF_NODE	775:0	775:0	5	char
NAME	775:5	775:5	3	_p_curquote
LEAF_NODE	775:5	775:5	4	_p_curquote
LEAF_NODE	775:16	775:16	2	;
SIMPLE_DECL	776:0	776:13	1	int _p_tokpos ;
VAR_DECL	776:0	776:4	2	int _p_tokpos
TYPE	776:0	776:0	3	int
TYPE_NAME	776:0	776:0	4	int
LEAF_NODE	776:0	776:0	5	int
NAME	776:4	776:4	3	_p_tokpos
LEAF_NODE	776:4	776:4	4	_p_tokpos
LEAF_NODE	776:13	776:13	2	;
FUNCTION_DEF	780:0	787:0	1	
RETURN_TYPE	780:0	780:0	2	int
TYPE_NAME	780:0	780:0	3	int
LEAF_NODE	780:0	780:0	4	int
FUNCTION_NAME	780:4	780:4	2	sindex
LEAF_NODE	780:4	780:4	3	sindex
PARAMETER_LIST	780:10	780:31	2	( char ch , char * string )
LEAF_NODE	780:10	780:10	3	(
PARAMETER_DECL	780:11	780:16	3	char ch
TYPE	780:11	780:11	4	char
TYPE_NAME	780:11	780:11	5	char
LEAF_NODE	780:11	780:11	6	char
NAME	780:16	780:16	4	ch
LEAF_NODE	780:16	780:16	5	ch
LEAF_NODE	780:18	780:18	3	,
PARAMETER_DECL	780:19	780:25	3	char * string
TYPE	780:19	780:24	4	char *
TYPE_NAME	780:19	780:19	5	char
LEAF_NODE	780:19	780:19	6	char
POINTER	780:24	780:24	5	*
LEAF_NODE	780:24	780:24	6	*
NAME	780:25	780:25	4	string
LEAF_NODE	780:25	780:25	5	string
LEAF_NODE	780:31	780:31	3	)
LEAF_NODE	781:0	781:0	2	{
STATEMENTS	782:2	786:2	2	
SIMPLE_DECL	782:2	782:10	3	char * cp ;
VAR_DECL	782:2	782:8	4	char * cp
TYPE	782:2	782:7	5	char *
TYPE_NAME	782:2	782:2	6	char
LEAF_NODE	782:2	782:2	7	char
POINTER	782:7	782:7	6	*
LEAF_NODE	782:7	782:7	7	*
NAME	782:8	782:8	5	cp
LEAF_NODE	782:8	782:8	6	cp
LEAF_NODE	782:10	782:10	4	;
ITERATION	783:2	784:4	3	
KEYWORD	783:2	783:2	4	for
LEAF_NODE	783:2	783:2	5	for
LEAF_NODE	783:5	783:5	4	(
FOR_INIT	783:6	783:15	4	cp = string ;
EXPR	783:6	783:6	5	cp = string
ASSIGN	783:6	783:9	6	cp = string
LVAL	783:6	783:6	7	cp
FIELD	783:6	783:6	8	cp
LEAF_NODE	783:6	783:6	9	cp
ASSIGN_OP	783:8	783:8	7	=
LEAF_NODE	783:8	783:8	8	=
RVAL	783:9	783:9	7	string
FIELD	783:9	783:9	8	string
LEAF_NODE	783:9	783:9	9	string
LEAF_NODE	783:15	783:15	5	;
CONDITION	783:16	783:16	4	* cp
EXPR	783:16	783:16	5	* cp
UNARY_EXPR	783:16	783:17	6	* cp
UNARY_OPERATOR	783:16	783:16	7	*
LEAF_NODE	783:16	783:16	8	*
FIELD	783:17	783:17	7	cp
LEAF_NODE	783:17	783:17	8	cp
LEAF_NODE	783:19	783:19	4	;
FOR_EXPR	783:20	783:20	4	++ cp
EXPR	783:20	783:22	5	++ cp
LEAF_NODE	783:20	783:20	6	++
FIELD	783:22	783:22	6	cp
LEAF_NODE	783:22	783:22	7	cp
LEAF_NODE	783:24	783:24	4	)
STATEMENTS	784:4	784:4	4	
SELECTION	784:4	785:6	5	
KEYWORD	784:4	784:4	6	if
LEAF_NODE	784:4	784:4	7	if
LEAF_NODE	784:6	784:6	6	(
CONDITION	784:7	784:7	6	ch == * cp
EXPR	784:7	784:11	7	ch == * cp
FIELD	784:7	784:7	8	ch
LEAF_NODE	784:7	784:7	9	ch
EQ_OPERATOR	784:9	784:9	8	==
LEAF_NODE	784:9	784:9	9	==
UNARY_EXPR	784:11	784:12	8	* cp
UNARY_OPERATOR	784:11	784:11	9	*
LEAF_NODE	784:11	784:11	10	*
FIELD	784:12	784:12	9	cp
LEAF_NODE	784:12	784:12	10	cp
LEAF_NODE	784:14	784:14	6	)
STATEMENTS	785:6	785:6	6	
JUMP_STATEMENT	785:6	785:29	7	return ( int ) ( cp - string ) ;
KEYWORD	785:6	785:6	8	return
LEAF_NODE	785:6	785:6	9	return
DESTINATION	785:13	785:13	8	( int ) ( cp - string )
EXPR	785:13	785:28	9	( int ) ( cp - string )
LEAF_NODE	785:13	785:13	10	(
TYPE_NAME	785:14	785:14	10	int
LEAF_NODE	785:14	785:14	11	int
LEAF_NODE	785:17	785:17	10	)
LEAF_NODE	785:18	785:18	10	(
FIELD	785:19	785:19	10	cp
LEAF_NODE	785:19	785:19	11	cp
LEAF_NODE	785:21	785:21	10	-
FIELD	785:22	785:22	10	string
LEAF_NODE	785:22	785:22	11	string
LEAF_NODE	785:28	785:28	10	)
LEAF_NODE	785:29	785:29	8	;
JUMP_STATEMENT	786:2	786:11	3	return - 1 ;
KEYWORD	786:2	786:2	4	return
LEAF_NODE	786:2	786:2	5	return
DESTINATION	786:9	786:9	4	- 1
EXPR	786:9	786:9	5	- 1
UNARY_EXPR	786:9	786:10	6	- 1
UNARY_OPERATOR	786:9	786:9	7	-
LEAF_NODE	786:9	786:9	8	-
FIELD	786:10	786:10	7	1
LEAF_NODE	786:10	786:10	8	1
LEAF_NODE	786:11	786:11	4	;
LEAF_NODE	787:0	787:0	2	}
FUNCTION_DEF	791:0	816:0	1	
RETURN_TYPE	791:0	791:0	2	void
TYPE_NAME	791:0	791:0	3	void
LEAF_NODE	791:0	791:0	4	void
FUNCTION_NAME	791:5	791:5	2	chstore
LEAF_NODE	791:5	791:5	3	chstore
PARAMETER_LIST	791:12	791:41	2	( char * string , int max , char ch )
LEAF_NODE	791:12	791:12	3	(
PARAMETER_DECL	791:13	791:19	3	char * string
TYPE	791:13	791:18	4	char *
TYPE_NAME	791:13	791:13	5	char
LEAF_NODE	791:13	791:13	6	char
POINTER	791:18	791:18	5	*
LEAF_NODE	791:18	791:18	6	*
NAME	791:19	791:19	4	string
LEAF_NODE	791:19	791:19	5	string
LEAF_NODE	791:25	791:25	3	,
PARAMETER_DECL	791:26	791:30	3	int max
TYPE	791:26	791:26	4	int
TYPE_NAME	791:26	791:26	5	int
LEAF_NODE	791:26	791:26	6	int
NAME	791:30	791:30	4	max
LEAF_NODE	791:30	791:30	5	max
LEAF_NODE	791:33	791:33	3	,
PARAMETER_DECL	791:34	791:39	3	char ch
TYPE	791:34	791:34	4	char
TYPE_NAME	791:34	791:34	5	char
LEAF_NODE	791:34	791:34	6	char
NAME	791:39	791:39	4	ch
LEAF_NODE	791:39	791:39	5	ch
LEAF_NODE	791:41	791:41	3	)
LEAF_NODE	792:0	792:0	2	{
STATEMENTS	793:2	815:2	2	
SIMPLE_DECL	793:2	793:8	3	char c ;
VAR_DECL	793:2	793:7	4	char c
TYPE	793:2	793:2	5	char
TYPE_NAME	793:2	793:2	6	char
LEAF_NODE	793:2	793:2	7	char
NAME	793:7	793:7	5	c
LEAF_NODE	793:7	793:7	6	c
LEAF_NODE	793:8	793:8	4	;
SELECTION	794:2	795:4	3	
KEYWORD	794:2	794:2	4	if
LEAF_NODE	794:2	794:2	5	if
LEAF_NODE	794:4	794:4	4	(
CONDITION	794:5	794:5	4	_p_tokpos >= 0 && _p_tokpos < max - 1
EXPR	794:5	794:5	5	_p_tokpos >= 0 && _p_tokpos < max - 1
AND	794:5	794:19	6	_p_tokpos >= 0 && _p_tokpos < max - 1
EXPR	794:5	794:16	7	_p_tokpos >= 0
FIELD	794:5	794:5	8	_p_tokpos
LEAF_NODE	794:5	794:5	9	_p_tokpos
REL_OPERATOR	794:14	794:14	8	>=
LEAF_NODE	794:14	794:14	9	>=
FIELD	794:16	794:16	8	0
LEAF_NODE	794:16	794:16	9	0
LEAF_NODE	794:17	794:17	7	&&
EXPR	794:19	794:33	7	_p_tokpos < max - 1
FIELD	794:19	794:19	8	_p_tokpos
LEAF_NODE	794:19	794:19	9	_p_tokpos
REL_OPERATOR	794:28	794:28	8	<
LEAF_NODE	794:28	794:28	9	<
FIELD	794:29	794:29	8	max
LEAF_NODE	794:29	794:29	9	max
LEAF_NODE	794:32	794:32	8	-
FIELD	794:33	794:33	8	1
LEAF_NODE	794:33	794:33	9	1
LEAF_NODE	794:34	794:34	4	)
STATEMENTS	795:4	814:4	4	
LEAF_NODE	795:4	795:4	5	{
STATEMENTS	796:6	813:6	5	
SELECTION	796:6	797:8	6	
KEYWORD	796:6	796:6	7	if
LEAF_NODE	796:6	796:6	8	if
LEAF_NODE	796:8	796:8	7	(
CONDITION	796:9	796:9	7	_p_state == IN_QUOTE
EXPR	796:9	796:19	8	_p_state == IN_QUOTE
FIELD	796:9	796:9	9	_p_state
LEAF_NODE	796:9	796:9	10	_p_state
EQ_OPERATOR	796:17	796:17	9	==
LEAF_NODE	796:17	796:17	10	==
FIELD	796:19	796:19	9	IN_QUOTE
LEAF_NODE	796:19	796:19	10	IN_QUOTE
LEAF_NODE	796:27	796:27	7	)
STATEMENTS	797:8	797:8	7	
EXPR_STATEMENT	797:8	797:12	8	c = ch ;
EXPR	797:8	797:8	9	c = ch
ASSIGN	797:8	797:10	10	c = ch
LVAL	797:8	797:8	11	c
FIELD	797:8	797:8	12	c
LEAF_NODE	797:8	797:8	13	c
ASSIGN_OP	797:9	797:9	11	=
LEAF_NODE	797:9	797:9	12	=
RVAL	797:10	797:10	11	ch
FIELD	797:10	797:10	12	ch
LEAF_NODE	797:10	797:10	13	ch
LEAF_NODE	797:12	797:12	9	;
SELECTION	798:6	799:8	6	
KEYWORD	798:6	798:6	7	else
LEAF_NODE	798:6	798:6	8	else
STATEMENTS	799:8	799:8	7	
SELECTION	799:8	800:10	8	
KEYWORD	799:8	799:8	9	switch
LEAF_NODE	799:8	799:8	10	switch
LEAF_NODE	799:14	799:14	9	(
CONDITION	799:15	799:15	9	_p_flag & 3
EXPR	799:15	799:23	10	_p_flag & 3
FIELD	799:15	799:15	11	_p_flag
LEAF_NODE	799:15	799:15	12	_p_flag
LEAF_NODE	799:22	799:22	11	&
FIELD	799:23	799:23	11	3
LEAF_NODE	799:23	799:23	12	3
LEAF_NODE	799:24	799:24	9	)
STATEMENTS	800:10	812:10	9	
LEAF_NODE	800:10	800:10	10	{
STATEMENTS	801:10	811:12	10	
LABEL	801:10	801:16	11	case 1 :
LEAF_NODE	801:10	801:10	12	case
LEAF_NODE	801:15	801:15	12	1
LEAF_NODE	801:16	801:16	12	:
EXPR_STATEMENT	802:12	802:31	11	c = toupper ( ( int ) ch ) ;
EXPR	802:12	802:12	12	c = toupper ( ( int ) ch )
ASSIGN	802:12	802:14	13	c = toupper ( ( int ) ch )
LVAL	802:12	802:12	14	c
FIELD	802:12	802:12	15	c
LEAF_NODE	802:12	802:12	16	c
ASSIGN_OP	802:13	802:13	14	=
LEAF_NODE	802:13	802:13	15	=
RVAL	802:14	802:14	14	toupper ( ( int ) ch )
FUNCTION_CALL	802:14	802:30	15	toupper ( ( int ) ch )
CALLEE	802:14	802:14	16	toupper
LEAF_NODE	802:14	802:14	17	toupper
LEAF_NODE	802:21	802:21	16	(
ARGUMENT	802:22	802:28	16	( int ) ch
LEAF_NODE	802:22	802:22	17	(
TYPE_NAME	802:23	802:23	17	int
LEAF_NODE	802:23	802:23	18	int
LEAF_NODE	802:26	802:26	17	)
FIELD	802:28	802:28	17	ch
LEAF_NODE	802:28	802:28	18	ch
LEAF_NODE	802:30	802:30	16	)
LEAF_NODE	802:31	802:31	12	;
JUMP_STATEMENT	803:12	803:17	11	break DESTINATION ;
KEYWORD	803:12	803:12	12	break
LEAF_NODE	803:12	803:12	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	803:17	803:17	12	;
LABEL	805:10	805:16	11	case 2 :
LEAF_NODE	805:10	805:10	12	case
LEAF_NODE	805:15	805:15	12	2
LEAF_NODE	805:16	805:16	12	:
EXPR_STATEMENT	806:12	806:31	11	c = tolower ( ( int ) ch ) ;
EXPR	806:12	806:12	12	c = tolower ( ( int ) ch )
ASSIGN	806:12	806:14	13	c = tolower ( ( int ) ch )
LVAL	806:12	806:12	14	c
FIELD	806:12	806:12	15	c
LEAF_NODE	806:12	806:12	16	c
ASSIGN_OP	806:13	806:13	14	=
LEAF_NODE	806:13	806:13	15	=
RVAL	806:14	806:14	14	tolower ( ( int ) ch )
FUNCTION_CALL	806:14	806:30	15	tolower ( ( int ) ch )
CALLEE	806:14	806:14	16	tolower
LEAF_NODE	806:14	806:14	17	tolower
LEAF_NODE	806:21	806:21	16	(
ARGUMENT	806:22	806:28	16	( int ) ch
LEAF_NODE	806:22	806:22	17	(
TYPE_NAME	806:23	806:23	17	int
LEAF_NODE	806:23	806:23	18	int
LEAF_NODE	806:26	806:26	17	)
FIELD	806:28	806:28	17	ch
LEAF_NODE	806:28	806:28	18	ch
LEAF_NODE	806:30	806:30	16	)
LEAF_NODE	806:31	806:31	12	;
JUMP_STATEMENT	807:12	807:17	11	break DESTINATION ;
KEYWORD	807:12	807:12	12	break
LEAF_NODE	807:12	807:12	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	807:17	807:17	12	;
LABEL	809:10	809:17	11	default :
LEAF_NODE	809:10	809:10	12	default
LEAF_NODE	809:17	809:17	12	:
EXPR_STATEMENT	810:12	810:16	11	c = ch ;
EXPR	810:12	810:12	12	c = ch
ASSIGN	810:12	810:14	13	c = ch
LVAL	810:12	810:12	14	c
FIELD	810:12	810:12	15	c
LEAF_NODE	810:12	810:12	16	c
ASSIGN_OP	810:13	810:13	14	=
LEAF_NODE	810:13	810:13	15	=
RVAL	810:14	810:14	14	ch
FIELD	810:14	810:14	15	ch
LEAF_NODE	810:14	810:14	16	ch
LEAF_NODE	810:16	810:16	12	;
JUMP_STATEMENT	811:12	811:17	11	break DESTINATION ;
KEYWORD	811:12	811:12	12	break
LEAF_NODE	811:12	811:12	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	811:17	811:17	12	;
LEAF_NODE	812:10	812:10	10	}
EXPR_STATEMENT	813:6	813:27	6	string [ _p_tokpos ++ ] = c ;
EXPR	813:6	813:6	7	string [ _p_tokpos ++ ] = c
ASSIGN	813:6	813:26	8	string [ _p_tokpos ++ ] = c
LVAL	813:6	813:6	9	string [ _p_tokpos ++ ]
FIELD	813:6	813:24	10	string [ _p_tokpos ++ ]
LEAF_NODE	813:6	813:6	11	string
LEAF_NODE	813:12	813:12	11	[
EXPR	813:13	813:13	11	_p_tokpos ++
FIELD	813:13	813:22	12	_p_tokpos ++
LEAF_NODE	813:13	813:13	13	_p_tokpos
LEAF_NODE	813:22	813:22	13	++
LEAF_NODE	813:24	813:24	11	]
ASSIGN_OP	813:25	813:25	9	=
LEAF_NODE	813:25	813:25	10	=
RVAL	813:26	813:26	9	c
FIELD	813:26	813:26	10	c
LEAF_NODE	813:26	813:26	11	c
LEAF_NODE	813:27	813:27	7	;
LEAF_NODE	814:4	814:4	5	}
JUMP_STATEMENT	815:2	815:8	3	return DESTINATION ;
KEYWORD	815:2	815:2	4	return
LEAF_NODE	815:2	815:2	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	815:8	815:8	4	;
LEAF_NODE	816:0	816:0	2	}
SIMPLE_DECL	822:2	822:8	1	int qp ;
VAR_DECL	822:2	822:6	2	int qp
TYPE	822:2	822:2	3	int
TYPE_NAME	822:2	822:2	4	int
LEAF_NODE	822:2	822:2	5	int
NAME	822:6	822:6	3	qp
LEAF_NODE	822:6	822:6	4	qp
LEAF_NODE	822:8	822:8	2	;
SIMPLE_DECL	823:2	823:11	1	char c , char nc ;
INIT_DECL_LIST	823:2	823:2	2	char c , char nc
VAR_DECL	823:2	823:7	3	char c
TYPE	823:2	823:2	4	char
TYPE_NAME	823:2	823:2	5	char
LEAF_NODE	823:2	823:2	6	char
NAME	823:7	823:7	4	c
LEAF_NODE	823:7	823:7	5	c
LEAF_NODE	823:8	823:8	3	,
VAR_DECL	823:2	823:9	3	char nc
TYPE	823:2	823:2	4	char
TYPE_NAME	823:2	823:2	5	char
LEAF_NODE	823:2	823:2	6	char
NAME	823:9	823:9	4	nc
LEAF_NODE	823:9	823:9	5	nc
LEAF_NODE	823:11	823:11	2	;
