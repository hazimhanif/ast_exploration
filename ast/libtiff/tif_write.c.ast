SOURCE_FILE	46:0	833:0	0	
FUNCTION_DEF	46:0	177:0	1	
RETURN_TYPE	46:0	46:0	2	int
TYPE_NAME	46:0	46:0	3	int
LEAF_NODE	46:0	46:0	4	int
FUNCTION_NAME	47:0	47:0	2	TIFFWriteScanline
LEAF_NODE	47:0	47:0	3	TIFFWriteScanline
PARAMETER_LIST	47:17	47:65	2	( TIFF * tif , void * buf , uint32 row , uint16 sample )
LEAF_NODE	47:17	47:17	3	(
PARAMETER_DECL	47:18	47:24	3	TIFF * tif
TYPE	47:18	47:22	4	TIFF *
TYPE_NAME	47:18	47:18	5	TIFF
LEAF_NODE	47:18	47:18	6	TIFF
POINTER	47:22	47:22	5	*
LEAF_NODE	47:22	47:22	6	*
NAME	47:24	47:24	4	tif
LEAF_NODE	47:24	47:24	5	tif
LEAF_NODE	47:27	47:27	3	,
PARAMETER_DECL	47:29	47:35	3	void * buf
TYPE	47:29	47:33	4	void *
TYPE_NAME	47:29	47:29	5	void
LEAF_NODE	47:29	47:29	6	void
POINTER	47:33	47:33	5	*
LEAF_NODE	47:33	47:33	6	*
NAME	47:35	47:35	4	buf
LEAF_NODE	47:35	47:35	5	buf
LEAF_NODE	47:38	47:38	3	,
PARAMETER_DECL	47:40	47:47	3	uint32 row
TYPE	47:40	47:40	4	uint32
TYPE_NAME	47:40	47:40	5	uint32
LEAF_NODE	47:40	47:40	6	uint32
NAME	47:47	47:47	4	row
LEAF_NODE	47:47	47:47	5	row
LEAF_NODE	47:50	47:50	3	,
PARAMETER_DECL	47:52	47:59	3	uint16 sample
TYPE	47:52	47:52	4	uint16
TYPE_NAME	47:52	47:52	5	uint16
LEAF_NODE	47:52	47:52	6	uint16
NAME	47:59	47:59	4	sample
LEAF_NODE	47:59	47:59	5	sample
LEAF_NODE	47:65	47:65	3	)
LEAF_NODE	48:0	48:0	2	{
STATEMENTS	49:1	176:16	2	
LEAF_NODE	49:1	49:1	3	static
SIMPLE_DECL	49:8	49:49	3	const char [ ] module ; module = "TIFFWriteScanline" ;
VAR_DECL	49:8	49:19	4	const char [ ] module ; module = "TIFFWriteScanline"
TYPE	49:8	49:25	5	const char [ ]
TYPE_NAME	49:8	49:14	6	const char
LEAF_NODE	49:8	49:8	7	const
LEAF_NODE	49:14	49:14	7	char
TYPE_SUFFIX	49:25	49:26	6	[ ]
LEAF_NODE	49:25	49:25	7	[
LEAF_NODE	49:26	49:26	7	]
NAME	49:19	49:19	5	module
LEAF_NODE	49:19	49:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	49:19	49:19	5	module = "TIFFWriteScanline"
ASSIGN	49:19	49:30	6	module = "TIFFWriteScanline"
LVAL	49:19	49:19	7	module
NAME	49:19	49:19	8	module
LEAF_NODE	49:19	49:19	9	module
ASSIGN_OP	49:28	49:28	7	=
LEAF_NODE	49:28	49:28	8	=
RVAL	49:30	49:30	7	"TIFFWriteScanline"
FIELD	49:30	49:30	8	"TIFFWriteScanline"
LEAF_NODE	49:30	49:30	9	"TIFFWriteScanline"
LEAF_NODE	49:49	49:49	4	;
LEAF_NODE	50:1	50:1	3	register
SIMPLE_DECL	50:10	50:27	3	TIFFDirectory * td ;
VAR_DECL	50:10	50:25	4	TIFFDirectory * td
TYPE	50:10	50:24	5	TIFFDirectory *
TYPE_NAME	50:10	50:10	6	TIFFDirectory
LEAF_NODE	50:10	50:10	7	TIFFDirectory
POINTER	50:24	50:24	6	*
LEAF_NODE	50:24	50:24	7	*
NAME	50:25	50:25	5	td
LEAF_NODE	50:25	50:25	6	td
LEAF_NODE	50:27	50:27	4	;
SIMPLE_DECL	51:1	51:26	3	int status , int imagegrew ; imagegrew = 0 ;
INIT_DECL_LIST	51:1	51:1	4	int status , int imagegrew ; imagegrew = 0
VAR_DECL	51:1	51:5	5	int status
TYPE	51:1	51:1	6	int
TYPE_NAME	51:1	51:1	7	int
LEAF_NODE	51:1	51:1	8	int
NAME	51:5	51:5	6	status
LEAF_NODE	51:5	51:5	7	status
LEAF_NODE	51:11	51:11	5	,
VAR_DECL	51:1	51:13	5	int imagegrew ; imagegrew = 0
TYPE	51:1	51:1	6	int
TYPE_NAME	51:1	51:1	7	int
LEAF_NODE	51:1	51:1	8	int
NAME	51:13	51:13	6	imagegrew
LEAF_NODE	51:13	51:13	7	imagegrew
LEAF_NODE	0:0	0:0	6	;
INIT	51:13	51:13	6	imagegrew = 0
ASSIGN	51:13	51:25	7	imagegrew = 0
LVAL	51:13	51:13	8	imagegrew
NAME	51:13	51:13	9	imagegrew
LEAF_NODE	51:13	51:13	10	imagegrew
ASSIGN_OP	51:23	51:23	8	=
LEAF_NODE	51:23	51:23	9	=
RVAL	51:25	51:25	8	0
FIELD	51:25	51:25	9	0
LEAF_NODE	51:25	51:25	10	0
LEAF_NODE	51:26	51:26	4	;
SIMPLE_DECL	52:1	52:13	3	uint32 strip ;
VAR_DECL	52:1	52:8	4	uint32 strip
TYPE	52:1	52:1	5	uint32
TYPE_NAME	52:1	52:1	6	uint32
LEAF_NODE	52:1	52:1	7	uint32
NAME	52:8	52:8	5	strip
LEAF_NODE	52:8	52:8	6	strip
LEAF_NODE	52:13	52:13	4	;
SELECTION	54:1	55:2	3	
KEYWORD	54:1	54:1	4	if
LEAF_NODE	54:1	54:1	5	if
LEAF_NODE	54:4	54:4	4	(
CONDITION	54:5	54:5	4	! WRITECHECKSTRIPS ( tif , module )
EXPR	54:5	54:5	5	! WRITECHECKSTRIPS ( tif , module )
UNARY_EXPR	54:5	54:6	6	! WRITECHECKSTRIPS ( tif , module )
UNARY_OPERATOR	54:5	54:5	7	!
LEAF_NODE	54:5	54:5	8	!
FUNCTION_CALL	54:6	54:34	7	WRITECHECKSTRIPS ( tif , module )
CALLEE	54:6	54:6	8	WRITECHECKSTRIPS
LEAF_NODE	54:6	54:6	9	WRITECHECKSTRIPS
LEAF_NODE	54:22	54:22	8	(
ARGUMENT	54:23	54:23	8	tif
FIELD	54:23	54:23	9	tif
LEAF_NODE	54:23	54:23	10	tif
LEAF_NODE	54:26	54:26	8	,
ARGUMENT	54:28	54:28	8	module
FIELD	54:28	54:28	9	module
LEAF_NODE	54:28	54:28	10	module
LEAF_NODE	54:34	54:34	8	)
LEAF_NODE	54:35	54:35	4	)
STATEMENTS	55:2	55:2	4	
JUMP_STATEMENT	55:2	55:13	5	return ( - 1 ) ;
KEYWORD	55:2	55:2	6	return
LEAF_NODE	55:2	55:2	7	return
DESTINATION	55:9	55:9	6	( - 1 )
EXPR	55:9	55:12	7	( - 1 )
LEAF_NODE	55:9	55:9	8	(
UNARY_EXPR	55:10	55:11	8	- 1
UNARY_OPERATOR	55:10	55:10	9	-
LEAF_NODE	55:10	55:10	10	-
FIELD	55:11	55:11	9	1
LEAF_NODE	55:11	55:11	10	1
LEAF_NODE	55:12	55:12	8	)
LEAF_NODE	55:13	55:13	6	;
SELECTION	61:1	62:2	3	
KEYWORD	61:1	61:1	4	if
LEAF_NODE	61:1	61:1	5	if
LEAF_NODE	61:4	61:4	4	(
CONDITION	61:5	61:5	4	! BUFFERCHECK ( tif )
EXPR	61:5	61:5	5	! BUFFERCHECK ( tif )
UNARY_EXPR	61:5	61:6	6	! BUFFERCHECK ( tif )
UNARY_OPERATOR	61:5	61:5	7	!
LEAF_NODE	61:5	61:5	8	!
FUNCTION_CALL	61:6	61:21	7	BUFFERCHECK ( tif )
CALLEE	61:6	61:6	8	BUFFERCHECK
LEAF_NODE	61:6	61:6	9	BUFFERCHECK
LEAF_NODE	61:17	61:17	8	(
ARGUMENT	61:18	61:18	8	tif
FIELD	61:18	61:18	9	tif
LEAF_NODE	61:18	61:18	10	tif
LEAF_NODE	61:21	61:21	8	)
LEAF_NODE	61:22	61:22	4	)
STATEMENTS	62:2	62:2	4	
JUMP_STATEMENT	62:2	62:13	5	return ( - 1 ) ;
KEYWORD	62:2	62:2	6	return
LEAF_NODE	62:2	62:2	7	return
DESTINATION	62:9	62:9	6	( - 1 )
EXPR	62:9	62:12	7	( - 1 )
LEAF_NODE	62:9	62:9	8	(
UNARY_EXPR	62:10	62:11	8	- 1
UNARY_OPERATOR	62:10	62:10	9	-
LEAF_NODE	62:10	62:10	10	-
FIELD	62:11	62:11	9	1
LEAF_NODE	62:11	62:11	10	1
LEAF_NODE	62:12	62:12	8	)
LEAF_NODE	62:13	62:13	6	;
EXPR_STATEMENT	63:8	63:40	3	tif -> tif_flags |= TIFF_BUF4WRITE ;
EXPR	63:8	63:8	4	tif -> tif_flags |= TIFF_BUF4WRITE
ASSIGN	63:8	63:26	5	tif -> tif_flags |= TIFF_BUF4WRITE
LVAL	63:8	63:8	6	tif -> tif_flags
FIELD	63:8	63:13	7	tif -> tif_flags
LEAF_NODE	63:8	63:8	8	tif
LEAF_NODE	63:11	63:11	8	->
LEAF_NODE	63:13	63:13	8	tif_flags
ASSIGN_OP	63:23	63:23	6	|=
LEAF_NODE	63:23	63:23	7	|=
RVAL	63:26	63:26	6	TIFF_BUF4WRITE
FIELD	63:26	63:26	7	TIFF_BUF4WRITE
LEAF_NODE	63:26	63:26	8	TIFF_BUF4WRITE
LEAF_NODE	63:40	63:40	4	;
EXPR_STATEMENT	65:1	65:19	3	td = & tif -> tif_dir ;
EXPR	65:1	65:1	4	td = & tif -> tif_dir
ASSIGN	65:1	65:6	5	td = & tif -> tif_dir
LVAL	65:1	65:1	6	td
FIELD	65:1	65:1	7	td
LEAF_NODE	65:1	65:1	8	td
ASSIGN_OP	65:4	65:4	6	=
LEAF_NODE	65:4	65:4	7	=
RVAL	65:6	65:6	6	& tif -> tif_dir
UNARY_EXPR	65:6	65:7	7	& tif -> tif_dir
UNARY_OPERATOR	65:6	65:6	8	&
LEAF_NODE	65:6	65:6	9	&
FIELD	65:7	65:12	8	tif -> tif_dir
LEAF_NODE	65:7	65:7	9	tif
LEAF_NODE	65:10	65:10	9	->
LEAF_NODE	65:12	65:12	9	tif_dir
LEAF_NODE	65:19	65:19	4	;
SELECTION	70:1	70:32	3	
KEYWORD	70:1	70:1	4	if
LEAF_NODE	70:1	70:1	5	if
LEAF_NODE	70:4	70:4	4	(
CONDITION	70:5	70:5	4	row >= td -> td_imagelength
EXPR	70:5	70:12	5	row >= td -> td_imagelength
FIELD	70:5	70:5	6	row
LEAF_NODE	70:5	70:5	7	row
REL_OPERATOR	70:9	70:9	6	>=
LEAF_NODE	70:9	70:9	7	>=
FIELD	70:12	70:16	6	td -> td_imagelength
LEAF_NODE	70:12	70:12	7	td
LEAF_NODE	70:14	70:14	7	->
LEAF_NODE	70:16	70:16	7	td_imagelength
LEAF_NODE	70:30	70:30	4	)
STATEMENTS	70:32	78:1	4	
LEAF_NODE	70:32	70:32	5	{
STATEMENTS	71:2	77:2	5	
SELECTION	71:2	71:52	6	
KEYWORD	71:2	71:2	7	if
LEAF_NODE	71:2	71:2	8	if
LEAF_NODE	71:5	71:5	7	(
CONDITION	71:6	71:6	7	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	71:6	71:29	8	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	71:6	71:10	9	td -> td_planarconfig
LEAF_NODE	71:6	71:6	10	td
LEAF_NODE	71:8	71:8	10	->
LEAF_NODE	71:10	71:10	10	td_planarconfig
EQ_OPERATOR	71:26	71:26	9	==
LEAF_NODE	71:26	71:26	10	==
FIELD	71:29	71:29	9	PLANARCONFIG_SEPARATE
LEAF_NODE	71:29	71:29	10	PLANARCONFIG_SEPARATE
LEAF_NODE	71:50	71:50	7	)
STATEMENTS	71:52	75:2	7	
LEAF_NODE	71:52	71:52	8	{
STATEMENTS	72:3	74:3	8	
EXPR_STATEMENT	72:3	73:67	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not change \"ImageLength\" when using separate planes" ) ;
EXPR	72:3	72:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not change \"ImageLength\" when using separate planes" )
FUNCTION_CALL	72:3	73:66	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not change \"ImageLength\" when using separate planes" )
CALLEE	72:3	72:3	12	TIFFErrorExt
LEAF_NODE	72:3	72:3	13	TIFFErrorExt
LEAF_NODE	72:15	72:15	12	(
ARGUMENT	72:16	72:16	12	tif -> tif_clientdata
FIELD	72:16	72:21	13	tif -> tif_clientdata
LEAF_NODE	72:16	72:16	14	tif
LEAF_NODE	72:19	72:19	14	->
LEAF_NODE	72:21	72:21	14	tif_clientdata
LEAF_NODE	72:35	72:35	12	,
ARGUMENT	72:37	72:37	12	module
FIELD	72:37	72:37	13	module
LEAF_NODE	72:37	72:37	14	module
LEAF_NODE	72:43	72:43	12	,
ARGUMENT	73:7	73:7	12	"Can not change \"ImageLength\" when using separate planes"
FIELD	73:7	73:7	13	"Can not change \"ImageLength\" when using separate planes"
LEAF_NODE	73:7	73:7	14	"Can not change \"ImageLength\" when using separate planes"
LEAF_NODE	73:66	73:66	12	)
LEAF_NODE	73:67	73:67	10	;
JUMP_STATEMENT	74:3	74:14	9	return ( - 1 ) ;
KEYWORD	74:3	74:3	10	return
LEAF_NODE	74:3	74:3	11	return
DESTINATION	74:10	74:10	10	( - 1 )
EXPR	74:10	74:13	11	( - 1 )
LEAF_NODE	74:10	74:10	12	(
UNARY_EXPR	74:11	74:12	12	- 1
UNARY_OPERATOR	74:11	74:11	13	-
LEAF_NODE	74:11	74:11	14	-
FIELD	74:12	74:12	13	1
LEAF_NODE	74:12	74:12	14	1
LEAF_NODE	74:13	74:13	12	)
LEAF_NODE	74:14	74:14	10	;
LEAF_NODE	75:2	75:2	8	}
EXPR_STATEMENT	76:2	76:28	6	td -> td_imagelength = row + 1 ;
EXPR	76:2	76:2	7	td -> td_imagelength = row + 1
ASSIGN	76:2	76:23	8	td -> td_imagelength = row + 1
LVAL	76:2	76:2	9	td -> td_imagelength
FIELD	76:2	76:6	10	td -> td_imagelength
LEAF_NODE	76:2	76:2	11	td
LEAF_NODE	76:4	76:4	11	->
LEAF_NODE	76:6	76:6	11	td_imagelength
ASSIGN_OP	76:21	76:21	9	=
LEAF_NODE	76:21	76:21	10	=
RVAL	76:23	76:27	9	row + 1
FIELD	76:23	76:23	10	row
LEAF_NODE	76:23	76:23	11	row
LEAF_NODE	76:26	76:26	10	+
FIELD	76:27	76:27	10	1
LEAF_NODE	76:27	76:27	11	1
LEAF_NODE	76:28	76:28	7	;
EXPR_STATEMENT	77:2	77:15	6	imagegrew = 1 ;
EXPR	77:2	77:2	7	imagegrew = 1
ASSIGN	77:2	77:14	8	imagegrew = 1
LVAL	77:2	77:2	9	imagegrew
FIELD	77:2	77:2	10	imagegrew
LEAF_NODE	77:2	77:2	11	imagegrew
ASSIGN_OP	77:12	77:12	9	=
LEAF_NODE	77:12	77:12	10	=
RVAL	77:14	77:14	9	1
FIELD	77:14	77:14	10	1
LEAF_NODE	77:14	77:14	11	1
LEAF_NODE	77:15	77:15	7	;
LEAF_NODE	78:1	78:1	5	}
SELECTION	82:1	82:51	3	
KEYWORD	82:1	82:1	4	if
LEAF_NODE	82:1	82:1	5	if
LEAF_NODE	82:4	82:4	4	(
CONDITION	82:5	82:5	4	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	82:5	82:28	5	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	82:5	82:9	6	td -> td_planarconfig
LEAF_NODE	82:5	82:5	7	td
LEAF_NODE	82:7	82:7	7	->
LEAF_NODE	82:9	82:9	7	td_planarconfig
EQ_OPERATOR	82:25	82:25	6	==
LEAF_NODE	82:25	82:25	7	==
FIELD	82:28	82:28	6	PLANARCONFIG_SEPARATE
LEAF_NODE	82:28	82:28	7	PLANARCONFIG_SEPARATE
LEAF_NODE	82:49	82:49	4	)
STATEMENTS	82:51	90:1	4	
LEAF_NODE	82:51	82:51	5	{
STATEMENTS	83:2	89:2	5	
SELECTION	83:2	83:40	6	
KEYWORD	83:2	83:2	7	if
LEAF_NODE	83:2	83:2	8	if
LEAF_NODE	83:5	83:5	7	(
CONDITION	83:6	83:6	7	sample >= td -> td_samplesperpixel
EXPR	83:6	83:16	8	sample >= td -> td_samplesperpixel
FIELD	83:6	83:6	9	sample
LEAF_NODE	83:6	83:6	10	sample
REL_OPERATOR	83:13	83:13	9	>=
LEAF_NODE	83:13	83:13	10	>=
FIELD	83:16	83:20	9	td -> td_samplesperpixel
LEAF_NODE	83:16	83:16	10	td
LEAF_NODE	83:18	83:18	10	->
LEAF_NODE	83:20	83:20	10	td_samplesperpixel
LEAF_NODE	83:38	83:38	7	)
STATEMENTS	83:40	88:2	7	
LEAF_NODE	83:40	83:40	8	{
STATEMENTS	84:3	87:3	8	
EXPR_STATEMENT	84:3	86:70	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Sample out of range, max %lu" , ( unsigned long ) sample , ( unsigned long ) td -> td_samplesperpixel ) ;
EXPR	84:3	84:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Sample out of range, max %lu" , ( unsigned long ) sample , ( unsigned long ) td -> td_samplesperpixel )
FUNCTION_CALL	84:3	86:69	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Sample out of range, max %lu" , ( unsigned long ) sample , ( unsigned long ) td -> td_samplesperpixel )
CALLEE	84:3	84:3	12	TIFFErrorExt
LEAF_NODE	84:3	84:3	13	TIFFErrorExt
LEAF_NODE	84:15	84:15	12	(
ARGUMENT	84:16	84:16	12	tif -> tif_clientdata
FIELD	84:16	84:21	13	tif -> tif_clientdata
LEAF_NODE	84:16	84:16	14	tif
LEAF_NODE	84:19	84:19	14	->
LEAF_NODE	84:21	84:21	14	tif_clientdata
LEAF_NODE	84:35	84:35	12	,
ARGUMENT	84:37	84:37	12	module
FIELD	84:37	84:37	13	module
LEAF_NODE	84:37	84:37	14	module
LEAF_NODE	84:43	84:43	12	,
ARGUMENT	85:7	85:7	12	"%lu: Sample out of range, max %lu"
FIELD	85:7	85:7	13	"%lu: Sample out of range, max %lu"
LEAF_NODE	85:7	85:7	14	"%lu: Sample out of range, max %lu"
LEAF_NODE	85:42	85:42	12	,
ARGUMENT	86:7	86:23	12	( unsigned long ) sample
LEAF_NODE	86:7	86:7	13	(
TYPE_NAME	86:8	86:17	13	unsigned long
LEAF_NODE	86:8	86:8	14	unsigned
LEAF_NODE	86:17	86:17	14	long
LEAF_NODE	86:21	86:21	13	)
FIELD	86:23	86:23	13	sample
LEAF_NODE	86:23	86:23	14	sample
LEAF_NODE	86:29	86:29	12	,
ARGUMENT	86:31	86:47	12	( unsigned long ) td -> td_samplesperpixel
LEAF_NODE	86:31	86:31	13	(
TYPE_NAME	86:32	86:41	13	unsigned long
LEAF_NODE	86:32	86:32	14	unsigned
LEAF_NODE	86:41	86:41	14	long
LEAF_NODE	86:45	86:45	13	)
FIELD	86:47	86:51	13	td -> td_samplesperpixel
LEAF_NODE	86:47	86:47	14	td
LEAF_NODE	86:49	86:49	14	->
LEAF_NODE	86:51	86:51	14	td_samplesperpixel
LEAF_NODE	86:69	86:69	12	)
LEAF_NODE	86:70	86:70	10	;
JUMP_STATEMENT	87:3	87:14	9	return ( - 1 ) ;
KEYWORD	87:3	87:3	10	return
LEAF_NODE	87:3	87:3	11	return
DESTINATION	87:10	87:10	10	( - 1 )
EXPR	87:10	87:13	11	( - 1 )
LEAF_NODE	87:10	87:10	12	(
UNARY_EXPR	87:11	87:12	12	- 1
UNARY_OPERATOR	87:11	87:11	13	-
LEAF_NODE	87:11	87:11	14	-
FIELD	87:12	87:12	13	1
LEAF_NODE	87:12	87:12	14	1
LEAF_NODE	87:13	87:13	12	)
LEAF_NODE	87:14	87:14	10	;
LEAF_NODE	88:2	88:2	8	}
EXPR_STATEMENT	89:2	89:64	6	strip = sample * td -> td_stripsperimage + row / td -> td_rowsperstrip ;
EXPR	89:2	89:2	7	strip = sample * td -> td_stripsperimage + row / td -> td_rowsperstrip
ASSIGN	89:2	89:10	8	strip = sample * td -> td_stripsperimage + row / td -> td_rowsperstrip
LVAL	89:2	89:2	9	strip
FIELD	89:2	89:2	10	strip
LEAF_NODE	89:2	89:2	11	strip
ASSIGN_OP	89:8	89:8	9	=
LEAF_NODE	89:8	89:8	10	=
RVAL	89:10	89:45	9	sample * td -> td_stripsperimage + row / td -> td_rowsperstrip
FIELD	89:10	89:10	10	sample
LEAF_NODE	89:10	89:10	11	sample
LEAF_NODE	89:16	89:16	10	*
FIELD	89:17	89:21	10	td -> td_stripsperimage
LEAF_NODE	89:17	89:17	11	td
LEAF_NODE	89:19	89:19	11	->
LEAF_NODE	89:21	89:21	11	td_stripsperimage
LEAF_NODE	89:39	89:39	10	+
FIELD	89:41	89:41	10	row
LEAF_NODE	89:41	89:41	11	row
LEAF_NODE	89:44	89:44	10	/
FIELD	89:45	89:49	10	td -> td_rowsperstrip
LEAF_NODE	89:45	89:45	11	td
LEAF_NODE	89:47	89:47	11	->
LEAF_NODE	89:49	89:49	11	td_rowsperstrip
LEAF_NODE	89:64	89:64	7	;
LEAF_NODE	90:1	90:1	5	}
SELECTION	90:3	91:2	3	
KEYWORD	90:3	90:3	4	else
LEAF_NODE	90:3	90:3	5	else
STATEMENTS	91:2	91:2	4	
EXPR_STATEMENT	91:2	91:35	5	strip = row / td -> td_rowsperstrip ;
EXPR	91:2	91:2	6	strip = row / td -> td_rowsperstrip
ASSIGN	91:2	91:10	7	strip = row / td -> td_rowsperstrip
LVAL	91:2	91:2	8	strip
FIELD	91:2	91:2	9	strip
LEAF_NODE	91:2	91:2	10	strip
ASSIGN_OP	91:8	91:8	8	=
LEAF_NODE	91:8	91:8	9	=
RVAL	91:10	91:16	8	row / td -> td_rowsperstrip
FIELD	91:10	91:10	9	row
LEAF_NODE	91:10	91:10	10	row
LEAF_NODE	91:14	91:14	9	/
FIELD	91:16	91:20	9	td -> td_rowsperstrip
LEAF_NODE	91:16	91:16	10	td
LEAF_NODE	91:18	91:18	10	->
LEAF_NODE	91:20	91:20	10	td_rowsperstrip
LEAF_NODE	91:35	91:35	6	;
SELECTION	99:1	100:2	3	
KEYWORD	99:1	99:1	4	if
LEAF_NODE	99:1	99:1	5	if
LEAF_NODE	99:4	99:4	4	(
CONDITION	99:5	99:5	4	strip >= td -> td_nstrips && ! TIFFGrowStrips ( tif , 1 , module )
EXPR	99:5	99:5	5	strip >= td -> td_nstrips && ! TIFFGrowStrips ( tif , 1 , module )
AND	99:5	99:32	6	strip >= td -> td_nstrips && ! TIFFGrowStrips ( tif , 1 , module )
EXPR	99:5	99:14	7	strip >= td -> td_nstrips
FIELD	99:5	99:5	8	strip
LEAF_NODE	99:5	99:5	9	strip
REL_OPERATOR	99:11	99:11	8	>=
LEAF_NODE	99:11	99:11	9	>=
FIELD	99:14	99:18	8	td -> td_nstrips
LEAF_NODE	99:14	99:14	9	td
LEAF_NODE	99:16	99:16	9	->
LEAF_NODE	99:18	99:18	9	td_nstrips
LEAF_NODE	99:29	99:29	7	&&
EXPR	99:32	99:32	7	! TIFFGrowStrips ( tif , 1 , module )
UNARY_EXPR	99:32	99:33	8	! TIFFGrowStrips ( tif , 1 , module )
UNARY_OPERATOR	99:32	99:32	9	!
LEAF_NODE	99:32	99:32	10	!
FUNCTION_CALL	99:33	99:62	9	TIFFGrowStrips ( tif , 1 , module )
CALLEE	99:33	99:33	10	TIFFGrowStrips
LEAF_NODE	99:33	99:33	11	TIFFGrowStrips
LEAF_NODE	99:47	99:47	10	(
ARGUMENT	99:48	99:48	10	tif
FIELD	99:48	99:48	11	tif
LEAF_NODE	99:48	99:48	12	tif
LEAF_NODE	99:51	99:51	10	,
ARGUMENT	99:53	99:53	10	1
FIELD	99:53	99:53	11	1
LEAF_NODE	99:53	99:53	12	1
LEAF_NODE	99:54	99:54	10	,
ARGUMENT	99:56	99:56	10	module
FIELD	99:56	99:56	11	module
LEAF_NODE	99:56	99:56	12	module
LEAF_NODE	99:62	99:62	10	)
LEAF_NODE	99:63	99:63	4	)
STATEMENTS	100:2	100:2	4	
JUMP_STATEMENT	100:2	100:13	5	return ( - 1 ) ;
KEYWORD	100:2	100:2	6	return
LEAF_NODE	100:2	100:2	7	return
DESTINATION	100:9	100:9	6	( - 1 )
EXPR	100:9	100:12	7	( - 1 )
LEAF_NODE	100:9	100:9	8	(
UNARY_EXPR	100:10	100:11	8	- 1
UNARY_OPERATOR	100:10	100:10	9	-
LEAF_NODE	100:10	100:10	10	-
FIELD	100:11	100:11	9	1
LEAF_NODE	100:11	100:11	10	1
LEAF_NODE	100:12	100:12	8	)
LEAF_NODE	100:13	100:13	6	;
SELECTION	101:1	101:33	3	
KEYWORD	101:1	101:1	4	if
LEAF_NODE	101:1	101:1	5	if
LEAF_NODE	101:4	101:4	4	(
CONDITION	101:5	101:5	4	strip != tif -> tif_curstrip
EXPR	101:5	101:14	5	strip != tif -> tif_curstrip
FIELD	101:5	101:5	6	strip
LEAF_NODE	101:5	101:5	7	strip
EQ_OPERATOR	101:11	101:11	6	!=
LEAF_NODE	101:11	101:11	7	!=
FIELD	101:14	101:19	6	tif -> tif_curstrip
LEAF_NODE	101:14	101:14	7	tif
LEAF_NODE	101:17	101:17	7	->
LEAF_NODE	101:19	101:19	7	tif_curstrip
LEAF_NODE	101:31	101:31	4	)
STATEMENTS	101:33	143:1	4	
LEAF_NODE	101:33	101:33	5	{
STATEMENTS	105:2	142:2	5	
SELECTION	105:2	106:3	6	
KEYWORD	105:2	105:2	7	if
LEAF_NODE	105:2	105:2	8	if
LEAF_NODE	105:5	105:5	7	(
CONDITION	105:6	105:6	7	! TIFFFlushData ( tif )
EXPR	105:6	105:6	8	! TIFFFlushData ( tif )
UNARY_EXPR	105:6	105:7	9	! TIFFFlushData ( tif )
UNARY_OPERATOR	105:6	105:6	10	!
LEAF_NODE	105:6	105:6	11	!
FUNCTION_CALL	105:7	105:24	10	TIFFFlushData ( tif )
CALLEE	105:7	105:7	11	TIFFFlushData
LEAF_NODE	105:7	105:7	12	TIFFFlushData
LEAF_NODE	105:20	105:20	11	(
ARGUMENT	105:21	105:21	11	tif
FIELD	105:21	105:21	12	tif
LEAF_NODE	105:21	105:21	13	tif
LEAF_NODE	105:24	105:24	11	)
LEAF_NODE	105:25	105:25	7	)
STATEMENTS	106:3	106:3	7	
JUMP_STATEMENT	106:3	106:14	8	return ( - 1 ) ;
KEYWORD	106:3	106:3	9	return
LEAF_NODE	106:3	106:3	10	return
DESTINATION	106:10	106:10	9	( - 1 )
EXPR	106:10	106:13	10	( - 1 )
LEAF_NODE	106:10	106:10	11	(
UNARY_EXPR	106:11	106:12	11	- 1
UNARY_OPERATOR	106:11	106:11	12	-
LEAF_NODE	106:11	106:11	13	-
FIELD	106:12	106:12	12	1
LEAF_NODE	106:12	106:12	13	1
LEAF_NODE	106:13	106:13	11	)
LEAF_NODE	106:14	106:14	9	;
EXPR_STATEMENT	107:2	107:27	6	tif -> tif_curstrip = strip ;
EXPR	107:2	107:2	7	tif -> tif_curstrip = strip
ASSIGN	107:2	107:22	8	tif -> tif_curstrip = strip
LVAL	107:2	107:2	9	tif -> tif_curstrip
FIELD	107:2	107:7	10	tif -> tif_curstrip
LEAF_NODE	107:2	107:2	11	tif
LEAF_NODE	107:5	107:5	11	->
LEAF_NODE	107:7	107:7	11	tif_curstrip
ASSIGN_OP	107:20	107:20	9	=
LEAF_NODE	107:20	107:20	10	=
RVAL	107:22	107:22	9	strip
FIELD	107:22	107:22	10	strip
LEAF_NODE	107:22	107:22	11	strip
LEAF_NODE	107:27	107:27	7	;
SELECTION	113:2	114:3	6	
KEYWORD	113:2	113:2	7	if
LEAF_NODE	113:2	113:2	8	if
LEAF_NODE	113:5	113:5	7	(
CONDITION	113:6	113:6	7	strip >= td -> td_stripsperimage && imagegrew
EXPR	113:6	113:6	8	strip >= td -> td_stripsperimage && imagegrew
AND	113:6	113:40	9	strip >= td -> td_stripsperimage && imagegrew
EXPR	113:6	113:15	10	strip >= td -> td_stripsperimage
FIELD	113:6	113:6	11	strip
LEAF_NODE	113:6	113:6	12	strip
REL_OPERATOR	113:12	113:12	11	>=
LEAF_NODE	113:12	113:12	12	>=
FIELD	113:15	113:19	11	td -> td_stripsperimage
LEAF_NODE	113:15	113:15	12	td
LEAF_NODE	113:17	113:17	12	->
LEAF_NODE	113:19	113:19	12	td_stripsperimage
LEAF_NODE	113:37	113:37	10	&&
EXPR	113:40	113:40	10	imagegrew
FIELD	113:40	113:40	11	imagegrew
LEAF_NODE	113:40	113:40	12	imagegrew
LEAF_NODE	113:49	113:49	7	)
STATEMENTS	114:3	114:3	7	
EXPR_STATEMENT	114:3	115:61	8	td -> td_stripsperimage = TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip ) ;
EXPR	114:3	114:3	9	td -> td_stripsperimage = TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
ASSIGN	114:3	115:7	10	td -> td_stripsperimage = TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
LVAL	114:3	114:3	11	td -> td_stripsperimage
FIELD	114:3	114:7	12	td -> td_stripsperimage
LEAF_NODE	114:3	114:3	13	td
LEAF_NODE	114:5	114:5	13	->
LEAF_NODE	114:7	114:7	13	td_stripsperimage
ASSIGN_OP	114:25	114:25	11	=
LEAF_NODE	114:25	114:25	12	=
RVAL	115:7	115:7	11	TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
FUNCTION_CALL	115:7	115:60	12	TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
CALLEE	115:7	115:7	13	TIFFhowmany_32
LEAF_NODE	115:7	115:7	14	TIFFhowmany_32
LEAF_NODE	115:21	115:21	13	(
ARGUMENT	115:22	115:22	13	td -> td_imagelength
FIELD	115:22	115:26	14	td -> td_imagelength
LEAF_NODE	115:22	115:22	15	td
LEAF_NODE	115:24	115:24	15	->
LEAF_NODE	115:26	115:26	15	td_imagelength
LEAF_NODE	115:40	115:40	13	,
ARGUMENT	115:41	115:41	13	td -> td_rowsperstrip
FIELD	115:41	115:45	14	td -> td_rowsperstrip
LEAF_NODE	115:41	115:41	15	td
LEAF_NODE	115:43	115:43	15	->
LEAF_NODE	115:45	115:45	15	td_rowsperstrip
LEAF_NODE	115:60	115:60	13	)
LEAF_NODE	115:61	115:61	9	;
SELECTION	116:16	116:48	6	
KEYWORD	116:16	116:16	7	if
LEAF_NODE	116:16	116:16	8	if
LEAF_NODE	116:19	116:19	7	(
CONDITION	116:20	116:20	7	td -> td_stripsperimage == 0
EXPR	116:20	116:45	8	td -> td_stripsperimage == 0
FIELD	116:20	116:24	9	td -> td_stripsperimage
LEAF_NODE	116:20	116:20	10	td
LEAF_NODE	116:22	116:22	10	->
LEAF_NODE	116:24	116:24	10	td_stripsperimage
EQ_OPERATOR	116:42	116:42	9	==
LEAF_NODE	116:42	116:42	10	==
FIELD	116:45	116:45	9	0
LEAF_NODE	116:45	116:45	10	0
LEAF_NODE	116:46	116:46	7	)
STATEMENTS	116:48	119:16	7	
LEAF_NODE	116:48	116:48	8	{
STATEMENTS	117:24	118:24	8	
EXPR_STATEMENT	117:24	117:90	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero strips per image" ) ;
EXPR	117:24	117:24	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero strips per image" )
FUNCTION_CALL	117:24	117:89	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero strips per image" )
CALLEE	117:24	117:24	12	TIFFErrorExt
LEAF_NODE	117:24	117:24	13	TIFFErrorExt
LEAF_NODE	117:36	117:36	12	(
ARGUMENT	117:37	117:37	12	tif -> tif_clientdata
FIELD	117:37	117:42	13	tif -> tif_clientdata
LEAF_NODE	117:37	117:37	14	tif
LEAF_NODE	117:40	117:40	14	->
LEAF_NODE	117:42	117:42	14	tif_clientdata
LEAF_NODE	117:56	117:56	12	,
ARGUMENT	117:58	117:58	12	module
FIELD	117:58	117:58	13	module
LEAF_NODE	117:58	117:58	14	module
LEAF_NODE	117:64	117:64	12	,
ARGUMENT	117:66	117:66	12	"Zero strips per image"
FIELD	117:66	117:66	13	"Zero strips per image"
LEAF_NODE	117:66	117:66	14	"Zero strips per image"
LEAF_NODE	117:89	117:89	12	)
LEAF_NODE	117:90	117:90	10	;
JUMP_STATEMENT	118:24	118:35	9	return ( - 1 ) ;
KEYWORD	118:24	118:24	10	return
LEAF_NODE	118:24	118:24	11	return
DESTINATION	118:31	118:31	10	( - 1 )
EXPR	118:31	118:34	11	( - 1 )
LEAF_NODE	118:31	118:31	12	(
UNARY_EXPR	118:32	118:33	12	- 1
UNARY_OPERATOR	118:32	118:32	13	-
LEAF_NODE	118:32	118:32	14	-
FIELD	118:33	118:33	13	1
LEAF_NODE	118:33	118:33	14	1
LEAF_NODE	118:34	118:34	12	)
LEAF_NODE	118:35	118:35	10	;
LEAF_NODE	119:16	119:16	8	}
EXPR_STATEMENT	120:2	121:59	6	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip ;
EXPR	120:2	120:2	7	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
ASSIGN	120:2	121:6	8	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
LVAL	120:2	120:2	9	tif -> tif_row
FIELD	120:2	120:7	10	tif -> tif_row
LEAF_NODE	120:2	120:2	11	tif
LEAF_NODE	120:5	120:5	11	->
LEAF_NODE	120:7	120:7	11	tif_row
ASSIGN_OP	120:15	120:15	9	=
LEAF_NODE	120:15	120:15	10	=
RVAL	121:6	121:40	9	( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
LEAF_NODE	121:6	121:6	10	(
FIELD	121:7	121:7	10	strip
LEAF_NODE	121:7	121:7	11	strip
LEAF_NODE	121:13	121:13	10	%
FIELD	121:15	121:19	10	td -> td_stripsperimage
LEAF_NODE	121:15	121:15	11	td
LEAF_NODE	121:17	121:17	11	->
LEAF_NODE	121:19	121:19	11	td_stripsperimage
LEAF_NODE	121:36	121:36	10	)
LEAF_NODE	121:38	121:38	10	*
FIELD	121:40	121:44	10	td -> td_rowsperstrip
LEAF_NODE	121:40	121:40	11	td
LEAF_NODE	121:42	121:42	11	->
LEAF_NODE	121:44	121:44	11	td_rowsperstrip
LEAF_NODE	121:59	121:59	7	;
SELECTION	122:2	122:47	6	
KEYWORD	122:2	122:2	7	if
LEAF_NODE	122:2	122:2	8	if
LEAF_NODE	122:5	122:5	7	(
CONDITION	122:6	122:6	7	( tif -> tif_flags & TIFF_CODERSETUP ) == 0
EXPR	122:6	122:44	8	( tif -> tif_flags & TIFF_CODERSETUP ) == 0
LEAF_NODE	122:6	122:6	9	(
FIELD	122:7	122:12	9	tif -> tif_flags
LEAF_NODE	122:7	122:7	10	tif
LEAF_NODE	122:10	122:10	10	->
LEAF_NODE	122:12	122:12	10	tif_flags
LEAF_NODE	122:22	122:22	9	&
FIELD	122:24	122:24	9	TIFF_CODERSETUP
LEAF_NODE	122:24	122:24	10	TIFF_CODERSETUP
LEAF_NODE	122:39	122:39	9	)
EQ_OPERATOR	122:41	122:41	9	==
LEAF_NODE	122:41	122:41	10	==
FIELD	122:44	122:44	9	0
LEAF_NODE	122:44	122:44	10	0
LEAF_NODE	122:45	122:45	7	)
STATEMENTS	122:47	126:2	7	
LEAF_NODE	122:47	122:47	8	{
STATEMENTS	123:3	125:3	8	
SELECTION	123:3	124:4	9	
KEYWORD	123:3	123:3	10	if
LEAF_NODE	123:3	123:3	11	if
LEAF_NODE	123:6	123:6	10	(
CONDITION	123:7	123:7	10	! ( * tif -> tif_setupencode ) ( tif )
EXPR	123:7	123:7	11	! ( * tif -> tif_setupencode ) ( tif )
UNARY_EXPR	123:7	123:8	12	! ( * tif -> tif_setupencode ) ( tif )
UNARY_OPERATOR	123:7	123:7	13	!
LEAF_NODE	123:7	123:7	14	!
FUNCTION_CALL	123:8	123:35	13	( * tif -> tif_setupencode ) ( tif )
CALLEE	123:8	123:30	14	( * tif -> tif_setupencode )
LEAF_NODE	123:8	123:8	15	(
UNARY_EXPR	123:9	123:10	15	* tif -> tif_setupencode
UNARY_OPERATOR	123:9	123:9	16	*
LEAF_NODE	123:9	123:9	17	*
FIELD	123:10	123:15	16	tif -> tif_setupencode
LEAF_NODE	123:10	123:10	17	tif
LEAF_NODE	123:13	123:13	17	->
LEAF_NODE	123:15	123:15	17	tif_setupencode
LEAF_NODE	123:30	123:30	15	)
LEAF_NODE	123:31	123:31	14	(
ARGUMENT	123:32	123:32	14	tif
FIELD	123:32	123:32	15	tif
LEAF_NODE	123:32	123:32	16	tif
LEAF_NODE	123:35	123:35	14	)
LEAF_NODE	123:36	123:36	10	)
STATEMENTS	124:4	124:4	10	
JUMP_STATEMENT	124:4	124:15	11	return ( - 1 ) ;
KEYWORD	124:4	124:4	12	return
LEAF_NODE	124:4	124:4	13	return
DESTINATION	124:11	124:11	12	( - 1 )
EXPR	124:11	124:14	13	( - 1 )
LEAF_NODE	124:11	124:11	14	(
UNARY_EXPR	124:12	124:13	14	- 1
UNARY_OPERATOR	124:12	124:12	15	-
LEAF_NODE	124:12	124:12	16	-
FIELD	124:13	124:13	15	1
LEAF_NODE	124:13	124:13	16	1
LEAF_NODE	124:14	124:14	14	)
LEAF_NODE	124:15	124:15	12	;
EXPR_STATEMENT	125:3	125:36	9	tif -> tif_flags |= TIFF_CODERSETUP ;
EXPR	125:3	125:3	10	tif -> tif_flags |= TIFF_CODERSETUP
ASSIGN	125:3	125:21	11	tif -> tif_flags |= TIFF_CODERSETUP
LVAL	125:3	125:3	12	tif -> tif_flags
FIELD	125:3	125:8	13	tif -> tif_flags
LEAF_NODE	125:3	125:3	14	tif
LEAF_NODE	125:6	125:6	14	->
LEAF_NODE	125:8	125:8	14	tif_flags
ASSIGN_OP	125:18	125:18	12	|=
LEAF_NODE	125:18	125:18	13	|=
RVAL	125:21	125:21	12	TIFF_CODERSETUP
FIELD	125:21	125:21	13	TIFF_CODERSETUP
LEAF_NODE	125:21	125:21	14	TIFF_CODERSETUP
LEAF_NODE	125:36	125:36	10	;
LEAF_NODE	126:2	126:2	8	}
EXPR_STATEMENT	128:2	128:20	6	tif -> tif_rawcc = 0 ;
EXPR	128:2	128:2	7	tif -> tif_rawcc = 0
ASSIGN	128:2	128:19	8	tif -> tif_rawcc = 0
LVAL	128:2	128:2	9	tif -> tif_rawcc
FIELD	128:2	128:7	10	tif -> tif_rawcc
LEAF_NODE	128:2	128:2	11	tif
LEAF_NODE	128:5	128:5	11	->
LEAF_NODE	128:7	128:7	11	tif_rawcc
ASSIGN_OP	128:17	128:17	9	=
LEAF_NODE	128:17	128:17	10	=
RVAL	128:19	128:19	9	0
FIELD	128:19	128:19	10	0
LEAF_NODE	128:19	128:19	11	0
LEAF_NODE	128:20	128:20	7	;
EXPR_STATEMENT	129:2	129:35	6	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	129:2	129:2	7	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	129:2	129:19	8	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	129:2	129:2	9	tif -> tif_rawcp
FIELD	129:2	129:7	10	tif -> tif_rawcp
LEAF_NODE	129:2	129:2	11	tif
LEAF_NODE	129:5	129:5	11	->
LEAF_NODE	129:7	129:7	11	tif_rawcp
ASSIGN_OP	129:17	129:17	9	=
LEAF_NODE	129:17	129:17	10	=
RVAL	129:19	129:19	9	tif -> tif_rawdata
FIELD	129:19	129:24	10	tif -> tif_rawdata
LEAF_NODE	129:19	129:19	11	tif
LEAF_NODE	129:22	129:22	11	->
LEAF_NODE	129:24	129:24	11	tif_rawdata
LEAF_NODE	129:35	129:35	7	;
SELECTION	131:2	132:2	6	
KEYWORD	131:2	131:2	7	if
LEAF_NODE	131:2	131:2	8	if
LEAF_NODE	131:4	131:4	7	(
CONDITION	131:6	131:6	7	td -> td_stripbytecount_p [ strip ] > 0
EXPR	131:6	131:39	8	td -> td_stripbytecount_p [ strip ] > 0
FIELD	131:6	131:35	9	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	131:6	131:6	10	td
LEAF_NODE	131:8	131:8	10	->
LEAF_NODE	131:10	131:10	10	td_stripbytecount_p
LEAF_NODE	131:29	131:29	10	[
EXPR	131:30	131:30	10	strip
FIELD	131:30	131:30	11	strip
LEAF_NODE	131:30	131:30	12	strip
LEAF_NODE	131:35	131:35	10	]
REL_OPERATOR	131:37	131:37	9	>
LEAF_NODE	131:37	131:37	10	>
FIELD	131:39	131:39	9	0
LEAF_NODE	131:39	131:39	10	0
LEAF_NODE	131:41	131:41	7	)
STATEMENTS	132:2	138:2	7	
LEAF_NODE	132:2	132:2	8	{
STATEMENTS	134:3	137:3	8	
EXPR_STATEMENT	134:3	134:37	9	td -> td_stripbytecount_p [ strip ] = 0 ;
EXPR	134:3	134:3	10	td -> td_stripbytecount_p [ strip ] = 0
ASSIGN	134:3	134:36	11	td -> td_stripbytecount_p [ strip ] = 0
LVAL	134:3	134:3	12	td -> td_stripbytecount_p [ strip ]
FIELD	134:3	134:32	13	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	134:3	134:3	14	td
LEAF_NODE	134:5	134:5	14	->
LEAF_NODE	134:7	134:7	14	td_stripbytecount_p
LEAF_NODE	134:26	134:26	14	[
EXPR	134:27	134:27	14	strip
FIELD	134:27	134:27	15	strip
LEAF_NODE	134:27	134:27	16	strip
LEAF_NODE	134:32	134:32	14	]
ASSIGN_OP	134:34	134:34	12	=
LEAF_NODE	134:34	134:34	13	=
RVAL	134:36	134:36	12	0
FIELD	134:36	134:36	13	0
LEAF_NODE	134:36	134:36	14	0
LEAF_NODE	134:37	134:37	10	;
EXPR_STATEMENT	137:3	137:22	9	tif -> tif_curoff = 0 ;
EXPR	137:3	137:3	10	tif -> tif_curoff = 0
ASSIGN	137:3	137:21	11	tif -> tif_curoff = 0
LVAL	137:3	137:3	12	tif -> tif_curoff
FIELD	137:3	137:8	13	tif -> tif_curoff
LEAF_NODE	137:3	137:3	14	tif
LEAF_NODE	137:6	137:6	14	->
LEAF_NODE	137:8	137:8	14	tif_curoff
ASSIGN_OP	137:19	137:19	12	=
LEAF_NODE	137:19	137:19	13	=
RVAL	137:21	137:21	12	0
FIELD	137:21	137:21	13	0
LEAF_NODE	137:21	137:21	14	0
LEAF_NODE	137:22	137:22	10	;
LEAF_NODE	138:2	138:2	8	}
SELECTION	140:2	141:3	6	
KEYWORD	140:2	140:2	7	if
LEAF_NODE	140:2	140:2	8	if
LEAF_NODE	140:5	140:5	7	(
CONDITION	140:6	140:6	7	! ( * tif -> tif_preencode ) ( tif , sample )
EXPR	140:6	140:6	8	! ( * tif -> tif_preencode ) ( tif , sample )
UNARY_EXPR	140:6	140:7	9	! ( * tif -> tif_preencode ) ( tif , sample )
UNARY_OPERATOR	140:6	140:6	10	!
LEAF_NODE	140:6	140:6	11	!
FUNCTION_CALL	140:7	140:40	10	( * tif -> tif_preencode ) ( tif , sample )
CALLEE	140:7	140:27	11	( * tif -> tif_preencode )
LEAF_NODE	140:7	140:7	12	(
UNARY_EXPR	140:8	140:9	12	* tif -> tif_preencode
UNARY_OPERATOR	140:8	140:8	13	*
LEAF_NODE	140:8	140:8	14	*
FIELD	140:9	140:14	13	tif -> tif_preencode
LEAF_NODE	140:9	140:9	14	tif
LEAF_NODE	140:12	140:12	14	->
LEAF_NODE	140:14	140:14	14	tif_preencode
LEAF_NODE	140:27	140:27	12	)
LEAF_NODE	140:28	140:28	11	(
ARGUMENT	140:29	140:29	11	tif
FIELD	140:29	140:29	12	tif
LEAF_NODE	140:29	140:29	13	tif
LEAF_NODE	140:32	140:32	11	,
ARGUMENT	140:34	140:34	11	sample
FIELD	140:34	140:34	12	sample
LEAF_NODE	140:34	140:34	13	sample
LEAF_NODE	140:40	140:40	11	)
LEAF_NODE	140:41	140:41	7	)
STATEMENTS	141:3	141:3	7	
JUMP_STATEMENT	141:3	141:14	8	return ( - 1 ) ;
KEYWORD	141:3	141:3	9	return
LEAF_NODE	141:3	141:3	10	return
DESTINATION	141:10	141:10	9	( - 1 )
EXPR	141:10	141:13	10	( - 1 )
LEAF_NODE	141:10	141:10	11	(
UNARY_EXPR	141:11	141:12	11	- 1
UNARY_OPERATOR	141:11	141:11	12	-
LEAF_NODE	141:11	141:11	13	-
FIELD	141:12	141:12	12	1
LEAF_NODE	141:12	141:12	13	1
LEAF_NODE	141:13	141:13	11	)
LEAF_NODE	141:14	141:14	9	;
EXPR_STATEMENT	142:2	142:35	6	tif -> tif_flags |= TIFF_POSTENCODE ;
EXPR	142:2	142:2	7	tif -> tif_flags |= TIFF_POSTENCODE
ASSIGN	142:2	142:20	8	tif -> tif_flags |= TIFF_POSTENCODE
LVAL	142:2	142:2	9	tif -> tif_flags
FIELD	142:2	142:7	10	tif -> tif_flags
LEAF_NODE	142:2	142:2	11	tif
LEAF_NODE	142:5	142:5	11	->
LEAF_NODE	142:7	142:7	11	tif_flags
ASSIGN_OP	142:17	142:17	9	|=
LEAF_NODE	142:17	142:17	10	|=
RVAL	142:20	142:20	9	TIFF_POSTENCODE
FIELD	142:20	142:20	10	TIFF_POSTENCODE
LEAF_NODE	142:20	142:20	11	TIFF_POSTENCODE
LEAF_NODE	142:35	142:35	7	;
LEAF_NODE	143:1	143:1	5	}
SELECTION	149:1	149:26	3	
KEYWORD	149:1	149:1	4	if
LEAF_NODE	149:1	149:1	5	if
LEAF_NODE	149:4	149:4	4	(
CONDITION	149:5	149:5	4	row != tif -> tif_row
EXPR	149:5	149:12	5	row != tif -> tif_row
FIELD	149:5	149:5	6	row
LEAF_NODE	149:5	149:5	7	row
EQ_OPERATOR	149:9	149:9	6	!=
LEAF_NODE	149:9	149:9	7	!=
FIELD	149:12	149:17	6	tif -> tif_row
LEAF_NODE	149:12	149:12	7	tif
LEAF_NODE	149:15	149:15	7	->
LEAF_NODE	149:17	149:17	7	tif_row
LEAF_NODE	149:24	149:24	4	)
STATEMENTS	149:26	166:1	4	
LEAF_NODE	149:26	149:26	5	{
STATEMENTS	150:2	165:2	5	
SELECTION	150:2	150:26	6	
KEYWORD	150:2	150:2	7	if
LEAF_NODE	150:2	150:2	8	if
LEAF_NODE	150:5	150:5	7	(
CONDITION	150:6	150:6	7	row < tif -> tif_row
EXPR	150:6	150:12	8	row < tif -> tif_row
FIELD	150:6	150:6	9	row
LEAF_NODE	150:6	150:6	10	row
REL_OPERATOR	150:10	150:10	9	<
LEAF_NODE	150:10	150:10	10	<
FIELD	150:12	150:17	9	tif -> tif_row
LEAF_NODE	150:12	150:12	10	tif
LEAF_NODE	150:15	150:15	10	->
LEAF_NODE	150:17	150:17	10	tif_row
LEAF_NODE	150:24	150:24	7	)
STATEMENTS	150:26	159:2	7	
LEAF_NODE	150:26	150:26	8	{
STATEMENTS	156:3	158:3	8	
EXPR_STATEMENT	156:3	157:26	9	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip ;
EXPR	156:3	156:3	10	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
ASSIGN	156:3	156:18	11	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
LVAL	156:3	156:3	12	tif -> tif_row
FIELD	156:3	156:8	13	tif -> tif_row
LEAF_NODE	156:3	156:3	14	tif
LEAF_NODE	156:6	156:6	14	->
LEAF_NODE	156:8	156:8	14	tif_row
ASSIGN_OP	156:16	156:16	12	=
LEAF_NODE	156:16	156:16	13	=
RVAL	156:18	157:7	12	( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
LEAF_NODE	156:18	156:18	13	(
FIELD	156:19	156:19	13	strip
LEAF_NODE	156:19	156:19	14	strip
LEAF_NODE	156:25	156:25	13	%
FIELD	156:27	156:31	13	td -> td_stripsperimage
LEAF_NODE	156:27	156:27	14	td
LEAF_NODE	156:29	156:29	14	->
LEAF_NODE	156:31	156:31	14	td_stripsperimage
LEAF_NODE	156:48	156:48	13	)
LEAF_NODE	156:50	156:50	13	*
FIELD	157:7	157:11	13	td -> td_rowsperstrip
LEAF_NODE	157:7	157:7	14	td
LEAF_NODE	157:9	157:9	14	->
LEAF_NODE	157:11	157:11	14	td_rowsperstrip
LEAF_NODE	157:26	157:26	10	;
EXPR_STATEMENT	158:3	158:36	9	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	158:3	158:3	10	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	158:3	158:20	11	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	158:3	158:3	12	tif -> tif_rawcp
FIELD	158:3	158:8	13	tif -> tif_rawcp
LEAF_NODE	158:3	158:3	14	tif
LEAF_NODE	158:6	158:6	14	->
LEAF_NODE	158:8	158:8	14	tif_rawcp
ASSIGN_OP	158:18	158:18	12	=
LEAF_NODE	158:18	158:18	13	=
RVAL	158:20	158:20	12	tif -> tif_rawdata
FIELD	158:20	158:25	13	tif -> tif_rawdata
LEAF_NODE	158:20	158:20	14	tif
LEAF_NODE	158:23	158:23	14	->
LEAF_NODE	158:25	158:25	14	tif_rawdata
LEAF_NODE	158:36	158:36	10	;
LEAF_NODE	159:2	159:2	8	}
SELECTION	163:2	164:3	6	
KEYWORD	163:2	163:2	7	if
LEAF_NODE	163:2	163:2	8	if
LEAF_NODE	163:5	163:5	7	(
CONDITION	163:6	163:6	7	! ( * tif -> tif_seek ) ( tif , row - tif -> tif_row )
EXPR	163:6	163:6	8	! ( * tif -> tif_seek ) ( tif , row - tif -> tif_row )
UNARY_EXPR	163:6	163:7	9	! ( * tif -> tif_seek ) ( tif , row - tif -> tif_row )
UNARY_OPERATOR	163:6	163:6	10	!
LEAF_NODE	163:6	163:6	11	!
FUNCTION_CALL	163:7	163:47	10	( * tif -> tif_seek ) ( tif , row - tif -> tif_row )
CALLEE	163:7	163:22	11	( * tif -> tif_seek )
LEAF_NODE	163:7	163:7	12	(
UNARY_EXPR	163:8	163:9	12	* tif -> tif_seek
UNARY_OPERATOR	163:8	163:8	13	*
LEAF_NODE	163:8	163:8	14	*
FIELD	163:9	163:14	13	tif -> tif_seek
LEAF_NODE	163:9	163:9	14	tif
LEAF_NODE	163:12	163:12	14	->
LEAF_NODE	163:14	163:14	14	tif_seek
LEAF_NODE	163:22	163:22	12	)
LEAF_NODE	163:23	163:23	11	(
ARGUMENT	163:24	163:24	11	tif
FIELD	163:24	163:24	12	tif
LEAF_NODE	163:24	163:24	13	tif
LEAF_NODE	163:27	163:27	11	,
ARGUMENT	163:29	163:35	11	row - tif -> tif_row
FIELD	163:29	163:29	12	row
LEAF_NODE	163:29	163:29	13	row
LEAF_NODE	163:33	163:33	12	-
FIELD	163:35	163:40	12	tif -> tif_row
LEAF_NODE	163:35	163:35	13	tif
LEAF_NODE	163:38	163:38	13	->
LEAF_NODE	163:40	163:40	13	tif_row
LEAF_NODE	163:47	163:47	11	)
LEAF_NODE	163:48	163:48	7	)
STATEMENTS	164:3	164:3	7	
JUMP_STATEMENT	164:3	164:14	8	return ( - 1 ) ;
KEYWORD	164:3	164:3	9	return
LEAF_NODE	164:3	164:3	10	return
DESTINATION	164:10	164:10	9	( - 1 )
EXPR	164:10	164:13	10	( - 1 )
LEAF_NODE	164:10	164:10	11	(
UNARY_EXPR	164:11	164:12	11	- 1
UNARY_OPERATOR	164:11	164:11	12	-
LEAF_NODE	164:11	164:11	13	-
FIELD	164:12	164:12	12	1
LEAF_NODE	164:12	164:12	13	1
LEAF_NODE	164:13	164:13	11	)
LEAF_NODE	164:14	164:14	9	;
EXPR_STATEMENT	165:2	165:20	6	tif -> tif_row = row ;
EXPR	165:2	165:2	7	tif -> tif_row = row
ASSIGN	165:2	165:17	8	tif -> tif_row = row
LVAL	165:2	165:2	9	tif -> tif_row
FIELD	165:2	165:7	10	tif -> tif_row
LEAF_NODE	165:2	165:2	11	tif
LEAF_NODE	165:5	165:5	11	->
LEAF_NODE	165:7	165:7	11	tif_row
ASSIGN_OP	165:15	165:15	9	=
LEAF_NODE	165:15	165:15	10	=
RVAL	165:17	165:17	9	row
FIELD	165:17	165:17	10	row
LEAF_NODE	165:17	165:17	11	row
LEAF_NODE	165:20	165:20	7	;
LEAF_NODE	166:1	166:1	5	}
EXPR_STATEMENT	169:1	169:64	3	tif -> tif_postdecode ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize ) ;
EXPR	169:1	169:1	4	tif -> tif_postdecode ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize )
FUNCTION_CALL	169:1	169:63	5	tif -> tif_postdecode ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize )
CALLEE	169:1	169:6	6	tif -> tif_postdecode
LEAF_NODE	169:1	169:1	7	tif
LEAF_NODE	169:4	169:4	7	->
LEAF_NODE	169:6	169:6	7	tif_postdecode
LEAF_NODE	169:20	169:20	6	(
ARGUMENT	169:22	169:22	6	tif
FIELD	169:22	169:22	7	tif
LEAF_NODE	169:22	169:22	8	tif
LEAF_NODE	169:25	169:25	6	,
ARGUMENT	169:27	169:36	6	( uint8 * ) buf
LEAF_NODE	169:27	169:27	7	(
TYPE_NAME	169:28	169:28	7	uint8
LEAF_NODE	169:28	169:28	8	uint8
LEAF_NODE	169:33	169:33	7	*
LEAF_NODE	169:34	169:34	7	)
FIELD	169:36	169:36	7	buf
LEAF_NODE	169:36	169:36	8	buf
LEAF_NODE	169:39	169:39	6	,
ARGUMENT	169:41	169:41	6	tif -> tif_scanlinesize
FIELD	169:41	169:46	7	tif -> tif_scanlinesize
LEAF_NODE	169:41	169:41	8	tif
LEAF_NODE	169:44	169:44	8	->
LEAF_NODE	169:46	169:46	8	tif_scanlinesize
LEAF_NODE	169:63	169:63	6	)
LEAF_NODE	169:64	169:64	4	;
EXPR_STATEMENT	171:1	172:35	3	status = ( * tif -> tif_encoderow ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize , sample ) ;
EXPR	171:1	171:1	4	status = ( * tif -> tif_encoderow ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize , sample )
ASSIGN	171:1	171:10	5	status = ( * tif -> tif_encoderow ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize , sample )
LVAL	171:1	171:1	6	status
FIELD	171:1	171:1	7	status
LEAF_NODE	171:1	171:1	8	status
ASSIGN_OP	171:8	171:8	6	=
LEAF_NODE	171:8	171:8	7	=
RVAL	171:10	171:10	6	( * tif -> tif_encoderow ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize , sample )
FUNCTION_CALL	171:10	172:34	7	( * tif -> tif_encoderow ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize , sample )
CALLEE	171:10	171:30	8	( * tif -> tif_encoderow )
LEAF_NODE	171:10	171:10	9	(
UNARY_EXPR	171:11	171:12	9	* tif -> tif_encoderow
UNARY_OPERATOR	171:11	171:11	10	*
LEAF_NODE	171:11	171:11	11	*
FIELD	171:12	171:17	10	tif -> tif_encoderow
LEAF_NODE	171:12	171:12	11	tif
LEAF_NODE	171:15	171:15	11	->
LEAF_NODE	171:17	171:17	11	tif_encoderow
LEAF_NODE	171:30	171:30	9	)
LEAF_NODE	171:31	171:31	8	(
ARGUMENT	171:32	171:32	8	tif
FIELD	171:32	171:32	9	tif
LEAF_NODE	171:32	171:32	10	tif
LEAF_NODE	171:35	171:35	8	,
ARGUMENT	171:37	171:46	8	( uint8 * ) buf
LEAF_NODE	171:37	171:37	9	(
TYPE_NAME	171:38	171:38	9	uint8
LEAF_NODE	171:38	171:38	10	uint8
LEAF_NODE	171:43	171:43	9	*
LEAF_NODE	171:44	171:44	9	)
FIELD	171:46	171:46	9	buf
LEAF_NODE	171:46	171:46	10	buf
LEAF_NODE	171:49	171:49	8	,
ARGUMENT	172:5	172:5	8	tif -> tif_scanlinesize
FIELD	172:5	172:10	9	tif -> tif_scanlinesize
LEAF_NODE	172:5	172:5	10	tif
LEAF_NODE	172:8	172:8	10	->
LEAF_NODE	172:10	172:10	10	tif_scanlinesize
LEAF_NODE	172:26	172:26	8	,
ARGUMENT	172:28	172:28	8	sample
FIELD	172:28	172:28	9	sample
LEAF_NODE	172:28	172:28	10	sample
LEAF_NODE	172:34	172:34	8	)
LEAF_NODE	172:35	172:35	4	;
EXPR_STATEMENT	175:1	175:23	3	tif -> tif_row = row + 1 ;
EXPR	175:1	175:1	4	tif -> tif_row = row + 1
ASSIGN	175:1	175:16	5	tif -> tif_row = row + 1
LVAL	175:1	175:1	6	tif -> tif_row
FIELD	175:1	175:6	7	tif -> tif_row
LEAF_NODE	175:1	175:1	8	tif
LEAF_NODE	175:4	175:4	8	->
LEAF_NODE	175:6	175:6	8	tif_row
ASSIGN_OP	175:14	175:14	6	=
LEAF_NODE	175:14	175:14	7	=
RVAL	175:16	175:22	6	row + 1
FIELD	175:16	175:16	7	row
LEAF_NODE	175:16	175:16	8	row
LEAF_NODE	175:20	175:20	7	+
FIELD	175:22	175:22	7	1
LEAF_NODE	175:22	175:22	8	1
LEAF_NODE	175:23	175:23	4	;
LEAF_NODE	176:1	176:1	3	return
LEAF_NODE	176:8	176:8	3	(
LEAF_NODE	176:9	176:9	3	status
LEAF_NODE	176:15	176:15	3	)
LEAF_NODE	176:16	176:16	3	;
LEAF_NODE	177:0	177:0	2	}
FUNCTION_DEF	183:0	203:0	1	
RETURN_TYPE	183:0	183:7	2	static int
LEAF_NODE	183:0	183:0	3	static
TYPE_NAME	183:7	183:7	3	int
LEAF_NODE	183:7	183:7	4	int
FUNCTION_NAME	183:11	183:11	2	_TIFFReserveLargeEnoughWriteBuffer
LEAF_NODE	183:11	183:11	3	_TIFFReserveLargeEnoughWriteBuffer
PARAMETER_LIST	183:45	183:77	2	( TIFF * tif , uint32 strip_or_tile )
LEAF_NODE	183:45	183:45	3	(
PARAMETER_DECL	183:46	183:52	3	TIFF * tif
TYPE	183:46	183:50	4	TIFF *
TYPE_NAME	183:46	183:46	5	TIFF
LEAF_NODE	183:46	183:46	6	TIFF
POINTER	183:50	183:50	5	*
LEAF_NODE	183:50	183:50	6	*
NAME	183:52	183:52	4	tif
LEAF_NODE	183:52	183:52	5	tif
LEAF_NODE	183:55	183:55	3	,
PARAMETER_DECL	183:57	183:64	3	uint32 strip_or_tile
TYPE	183:57	183:57	4	uint32
TYPE_NAME	183:57	183:57	5	uint32
LEAF_NODE	183:57	183:57	6	uint32
NAME	183:64	183:64	4	strip_or_tile
LEAF_NODE	183:64	183:64	5	strip_or_tile
LEAF_NODE	183:77	183:77	3	)
LEAF_NODE	184:0	184:0	2	{
STATEMENTS	185:4	202:4	2	
SIMPLE_DECL	185:4	185:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	185:4	185:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	185:4	185:18	5	TIFFDirectory *
TYPE_NAME	185:4	185:4	6	TIFFDirectory
LEAF_NODE	185:4	185:4	7	TIFFDirectory
POINTER	185:18	185:18	6	*
LEAF_NODE	185:18	185:18	7	*
NAME	185:19	185:19	5	td
LEAF_NODE	185:19	185:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	185:19	185:19	5	td = & tif -> tif_dir
ASSIGN	185:19	185:24	6	td = & tif -> tif_dir
LVAL	185:19	185:19	7	td
NAME	185:19	185:19	8	td
LEAF_NODE	185:19	185:19	9	td
ASSIGN_OP	185:22	185:22	7	=
LEAF_NODE	185:22	185:22	8	=
RVAL	185:24	185:24	7	& tif -> tif_dir
UNARY_EXPR	185:24	185:25	8	& tif -> tif_dir
UNARY_OPERATOR	185:24	185:24	9	&
LEAF_NODE	185:24	185:24	10	&
FIELD	185:25	185:30	9	tif -> tif_dir
LEAF_NODE	185:25	185:25	10	tif
LEAF_NODE	185:28	185:28	10	->
LEAF_NODE	185:30	185:30	10	tif_dir
LEAF_NODE	185:37	185:37	4	;
SELECTION	186:4	187:4	3	
KEYWORD	186:4	186:4	4	if
LEAF_NODE	186:4	186:4	5	if
LEAF_NODE	186:6	186:6	4	(
CONDITION	186:8	186:8	4	td -> td_stripbytecount_p [ strip_or_tile ] > 0
EXPR	186:8	186:49	5	td -> td_stripbytecount_p [ strip_or_tile ] > 0
FIELD	186:8	186:45	6	td -> td_stripbytecount_p [ strip_or_tile ]
LEAF_NODE	186:8	186:8	7	td
LEAF_NODE	186:10	186:10	7	->
LEAF_NODE	186:12	186:12	7	td_stripbytecount_p
LEAF_NODE	186:31	186:31	7	[
EXPR	186:32	186:32	7	strip_or_tile
FIELD	186:32	186:32	8	strip_or_tile
LEAF_NODE	186:32	186:32	9	strip_or_tile
LEAF_NODE	186:45	186:45	7	]
REL_OPERATOR	186:47	186:47	6	>
LEAF_NODE	186:47	186:47	7	>
FIELD	186:49	186:49	6	0
LEAF_NODE	186:49	186:49	7	0
LEAF_NODE	186:51	186:51	4	)
STATEMENTS	187:4	201:4	4	
LEAF_NODE	187:4	187:4	5	{
STATEMENTS	190:8	200:8	5	
SIMPLE_DECL	190:8	190:90	6	uint64 safe_buffer_size ; safe_buffer_size = ( uint64 ) ( td -> td_stripbytecount_p [ strip_or_tile ] + 1 + 4 ) ;
VAR_DECL	190:8	190:15	7	uint64 safe_buffer_size ; safe_buffer_size = ( uint64 ) ( td -> td_stripbytecount_p [ strip_or_tile ] + 1 + 4 )
TYPE	190:8	190:8	8	uint64
TYPE_NAME	190:8	190:8	9	uint64
LEAF_NODE	190:8	190:8	10	uint64
NAME	190:15	190:15	8	safe_buffer_size
LEAF_NODE	190:15	190:15	9	safe_buffer_size
LEAF_NODE	0:0	0:0	8	;
INIT	190:15	190:15	8	safe_buffer_size = ( uint64 ) ( td -> td_stripbytecount_p [ strip_or_tile ] + 1 + 4 )
ASSIGN	190:15	190:34	9	safe_buffer_size = ( uint64 ) ( td -> td_stripbytecount_p [ strip_or_tile ] + 1 + 4 )
LVAL	190:15	190:15	10	safe_buffer_size
NAME	190:15	190:15	11	safe_buffer_size
LEAF_NODE	190:15	190:15	12	safe_buffer_size
ASSIGN_OP	190:32	190:32	10	=
LEAF_NODE	190:32	190:32	11	=
RVAL	190:34	190:89	10	( uint64 ) ( td -> td_stripbytecount_p [ strip_or_tile ] + 1 + 4 )
LEAF_NODE	190:34	190:34	11	(
TYPE_NAME	190:35	190:35	11	uint64
LEAF_NODE	190:35	190:35	12	uint64
LEAF_NODE	190:41	190:41	11	)
LEAF_NODE	190:42	190:42	11	(
FIELD	190:43	190:80	11	td -> td_stripbytecount_p [ strip_or_tile ]
LEAF_NODE	190:43	190:43	12	td
LEAF_NODE	190:45	190:45	12	->
LEAF_NODE	190:47	190:47	12	td_stripbytecount_p
LEAF_NODE	190:66	190:66	12	[
EXPR	190:67	190:67	12	strip_or_tile
FIELD	190:67	190:67	13	strip_or_tile
LEAF_NODE	190:67	190:67	14	strip_or_tile
LEAF_NODE	190:80	190:80	12	]
LEAF_NODE	190:82	190:82	11	+
FIELD	190:84	190:84	11	1
LEAF_NODE	190:84	190:84	12	1
LEAF_NODE	190:86	190:86	11	+
FIELD	190:88	190:88	11	4
LEAF_NODE	190:88	190:88	12	4
LEAF_NODE	190:89	190:89	11	)
LEAF_NODE	190:90	190:90	7	;
SELECTION	191:8	192:8	6	
KEYWORD	191:8	191:8	7	if
LEAF_NODE	191:8	191:8	8	if
LEAF_NODE	191:10	191:10	7	(
CONDITION	191:12	191:12	7	tif -> tif_rawdatasize <= ( tmsize_t ) safe_buffer_size
EXPR	191:12	191:46	8	tif -> tif_rawdatasize <= ( tmsize_t ) safe_buffer_size
FIELD	191:12	191:17	9	tif -> tif_rawdatasize
LEAF_NODE	191:12	191:12	10	tif
LEAF_NODE	191:15	191:15	10	->
LEAF_NODE	191:17	191:17	10	tif_rawdatasize
REL_OPERATOR	191:33	191:33	9	<=
LEAF_NODE	191:33	191:33	10	<=
LEAF_NODE	191:36	191:36	9	(
TYPE_NAME	191:37	191:37	9	tmsize_t
LEAF_NODE	191:37	191:37	10	tmsize_t
LEAF_NODE	191:45	191:45	9	)
FIELD	191:46	191:46	9	safe_buffer_size
LEAF_NODE	191:46	191:46	10	safe_buffer_size
LEAF_NODE	191:63	191:63	7	)
STATEMENTS	192:8	196:8	7	
LEAF_NODE	192:8	192:8	8	{
STATEMENTS	193:12	193:12	8	
SELECTION	193:12	195:16	9	
KEYWORD	193:12	193:12	10	if
LEAF_NODE	193:12	193:12	11	if
LEAF_NODE	193:14	193:14	10	(
CONDITION	193:16	193:16	10	! ( TIFFWriteBufferSetup ( tif , NULL , ( tmsize_t ) TIFFroundup_64 ( safe_buffer_size , 1024 ) ) )
EXPR	193:16	193:16	11	! ( TIFFWriteBufferSetup ( tif , NULL , ( tmsize_t ) TIFFroundup_64 ( safe_buffer_size , 1024 ) ) )
UNARY_EXPR	193:16	194:65	12	! ( TIFFWriteBufferSetup ( tif , NULL , ( tmsize_t ) TIFFroundup_64 ( safe_buffer_size , 1024 ) ) )
UNARY_OPERATOR	193:16	193:16	13	!
LEAF_NODE	193:16	193:16	14	!
LEAF_NODE	193:17	193:17	13	(
FUNCTION_CALL	193:18	194:64	13	TIFFWriteBufferSetup ( tif , NULL , ( tmsize_t ) TIFFroundup_64 ( safe_buffer_size , 1024 ) )
CALLEE	193:18	193:18	14	TIFFWriteBufferSetup
LEAF_NODE	193:18	193:18	15	TIFFWriteBufferSetup
LEAF_NODE	193:38	193:38	14	(
ARGUMENT	193:39	193:39	14	tif
FIELD	193:39	193:39	15	tif
LEAF_NODE	193:39	193:39	16	tif
LEAF_NODE	193:42	193:42	14	,
ARGUMENT	193:44	193:44	14	NULL
FIELD	193:44	193:44	15	NULL
LEAF_NODE	193:44	193:44	16	NULL
LEAF_NODE	193:48	193:48	14	,
ARGUMENT	194:16	194:26	14	( tmsize_t ) TIFFroundup_64 ( safe_buffer_size , 1024 )
LEAF_NODE	194:16	194:16	15	(
TYPE_NAME	194:17	194:17	15	tmsize_t
LEAF_NODE	194:17	194:17	16	tmsize_t
LEAF_NODE	194:25	194:25	15	)
FUNCTION_CALL	194:26	194:63	15	TIFFroundup_64 ( safe_buffer_size , 1024 )
CALLEE	194:26	194:26	16	TIFFroundup_64
LEAF_NODE	194:26	194:26	17	TIFFroundup_64
LEAF_NODE	194:40	194:40	16	(
ARGUMENT	194:41	194:41	16	safe_buffer_size
FIELD	194:41	194:41	17	safe_buffer_size
LEAF_NODE	194:41	194:41	18	safe_buffer_size
LEAF_NODE	194:57	194:57	16	,
ARGUMENT	194:59	194:59	16	1024
FIELD	194:59	194:59	17	1024
LEAF_NODE	194:59	194:59	18	1024
LEAF_NODE	194:63	194:63	16	)
LEAF_NODE	194:64	194:64	14	)
LEAF_NODE	194:65	194:65	13	)
LEAF_NODE	194:67	194:67	10	)
STATEMENTS	195:16	195:16	10	
JUMP_STATEMENT	195:16	195:24	11	return 0 ;
KEYWORD	195:16	195:16	12	return
LEAF_NODE	195:16	195:16	13	return
DESTINATION	195:23	195:23	12	0
EXPR	195:23	195:23	13	0
FIELD	195:23	195:23	14	0
LEAF_NODE	195:23	195:23	15	0
LEAF_NODE	195:24	195:24	12	;
LEAF_NODE	196:8	196:8	8	}
EXPR_STATEMENT	200:8	200:27	6	tif -> tif_curoff = 0 ;
EXPR	200:8	200:8	7	tif -> tif_curoff = 0
ASSIGN	200:8	200:26	8	tif -> tif_curoff = 0
LVAL	200:8	200:8	9	tif -> tif_curoff
FIELD	200:8	200:13	10	tif -> tif_curoff
LEAF_NODE	200:8	200:8	11	tif
LEAF_NODE	200:11	200:11	11	->
LEAF_NODE	200:13	200:13	11	tif_curoff
ASSIGN_OP	200:24	200:24	9	=
LEAF_NODE	200:24	200:24	10	=
RVAL	200:26	200:26	9	0
FIELD	200:26	200:26	10	0
LEAF_NODE	200:26	200:26	11	0
LEAF_NODE	200:27	200:27	7	;
LEAF_NODE	201:4	201:4	5	}
JUMP_STATEMENT	202:4	202:12	3	return 1 ;
KEYWORD	202:4	202:4	4	return
LEAF_NODE	202:4	202:4	5	return
DESTINATION	202:11	202:11	4	1
EXPR	202:11	202:11	5	1
FIELD	202:11	202:11	6	1
LEAF_NODE	202:11	202:11	7	1
LEAF_NODE	202:12	202:12	4	;
LEAF_NODE	203:0	203:0	2	}
FUNCTION_DEF	211:0	308:0	1	
RETURN_TYPE	211:0	211:0	2	tmsize_t
TYPE_NAME	211:0	211:0	3	tmsize_t
LEAF_NODE	211:0	211:0	4	tmsize_t
FUNCTION_NAME	212:0	212:0	2	TIFFWriteEncodedStrip
LEAF_NODE	212:0	212:0	3	TIFFWriteEncodedStrip
PARAMETER_LIST	212:21	212:70	2	( TIFF * tif , uint32 strip , void * data , tmsize_t cc )
LEAF_NODE	212:21	212:21	3	(
PARAMETER_DECL	212:22	212:28	3	TIFF * tif
TYPE	212:22	212:26	4	TIFF *
TYPE_NAME	212:22	212:22	5	TIFF
LEAF_NODE	212:22	212:22	6	TIFF
POINTER	212:26	212:26	5	*
LEAF_NODE	212:26	212:26	6	*
NAME	212:28	212:28	4	tif
LEAF_NODE	212:28	212:28	5	tif
LEAF_NODE	212:31	212:31	3	,
PARAMETER_DECL	212:33	212:40	3	uint32 strip
TYPE	212:33	212:33	4	uint32
TYPE_NAME	212:33	212:33	5	uint32
LEAF_NODE	212:33	212:33	6	uint32
NAME	212:40	212:40	4	strip
LEAF_NODE	212:40	212:40	5	strip
LEAF_NODE	212:45	212:45	3	,
PARAMETER_DECL	212:47	212:53	3	void * data
TYPE	212:47	212:51	4	void *
TYPE_NAME	212:47	212:47	5	void
LEAF_NODE	212:47	212:47	6	void
POINTER	212:51	212:51	5	*
LEAF_NODE	212:51	212:51	6	*
NAME	212:53	212:53	4	data
LEAF_NODE	212:53	212:53	5	data
LEAF_NODE	212:57	212:57	3	,
PARAMETER_DECL	212:59	212:68	3	tmsize_t cc
TYPE	212:59	212:59	4	tmsize_t
TYPE_NAME	212:59	212:59	5	tmsize_t
LEAF_NODE	212:59	212:59	6	tmsize_t
NAME	212:68	212:68	4	cc
LEAF_NODE	212:68	212:68	5	cc
LEAF_NODE	212:70	212:70	3	)
LEAF_NODE	213:0	213:0	2	{
STATEMENTS	214:1	307:12	2	
LEAF_NODE	214:1	214:1	3	static
SIMPLE_DECL	214:8	214:53	3	const char [ ] module ; module = "TIFFWriteEncodedStrip" ;
VAR_DECL	214:8	214:19	4	const char [ ] module ; module = "TIFFWriteEncodedStrip"
TYPE	214:8	214:25	5	const char [ ]
TYPE_NAME	214:8	214:14	6	const char
LEAF_NODE	214:8	214:8	7	const
LEAF_NODE	214:14	214:14	7	char
TYPE_SUFFIX	214:25	214:26	6	[ ]
LEAF_NODE	214:25	214:25	7	[
LEAF_NODE	214:26	214:26	7	]
NAME	214:19	214:19	5	module
LEAF_NODE	214:19	214:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	214:19	214:19	5	module = "TIFFWriteEncodedStrip"
ASSIGN	214:19	214:30	6	module = "TIFFWriteEncodedStrip"
LVAL	214:19	214:19	7	module
NAME	214:19	214:19	8	module
LEAF_NODE	214:19	214:19	9	module
ASSIGN_OP	214:28	214:28	7	=
LEAF_NODE	214:28	214:28	8	=
RVAL	214:30	214:30	7	"TIFFWriteEncodedStrip"
FIELD	214:30	214:30	8	"TIFFWriteEncodedStrip"
LEAF_NODE	214:30	214:30	9	"TIFFWriteEncodedStrip"
LEAF_NODE	214:53	214:53	4	;
SIMPLE_DECL	215:1	215:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	215:1	215:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	215:1	215:15	5	TIFFDirectory *
TYPE_NAME	215:1	215:1	6	TIFFDirectory
LEAF_NODE	215:1	215:1	7	TIFFDirectory
POINTER	215:15	215:15	6	*
LEAF_NODE	215:15	215:15	7	*
NAME	215:16	215:16	5	td
LEAF_NODE	215:16	215:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	215:16	215:16	5	td = & tif -> tif_dir
ASSIGN	215:16	215:21	6	td = & tif -> tif_dir
LVAL	215:16	215:16	7	td
NAME	215:16	215:16	8	td
LEAF_NODE	215:16	215:16	9	td
ASSIGN_OP	215:19	215:19	7	=
LEAF_NODE	215:19	215:19	8	=
RVAL	215:21	215:21	7	& tif -> tif_dir
UNARY_EXPR	215:21	215:22	8	& tif -> tif_dir
UNARY_OPERATOR	215:21	215:21	9	&
LEAF_NODE	215:21	215:21	10	&
FIELD	215:22	215:27	9	tif -> tif_dir
LEAF_NODE	215:22	215:22	10	tif
LEAF_NODE	215:25	215:25	10	->
LEAF_NODE	215:27	215:27	10	tif_dir
LEAF_NODE	215:34	215:34	4	;
SIMPLE_DECL	216:1	216:14	3	uint16 sample ;
VAR_DECL	216:1	216:8	4	uint16 sample
TYPE	216:1	216:1	5	uint16
TYPE_NAME	216:1	216:1	6	uint16
LEAF_NODE	216:1	216:1	7	uint16
NAME	216:8	216:8	5	sample
LEAF_NODE	216:8	216:8	6	sample
LEAF_NODE	216:14	216:14	4	;
SELECTION	218:1	219:2	3	
KEYWORD	218:1	218:1	4	if
LEAF_NODE	218:1	218:1	5	if
LEAF_NODE	218:4	218:4	4	(
CONDITION	218:5	218:5	4	! WRITECHECKSTRIPS ( tif , module )
EXPR	218:5	218:5	5	! WRITECHECKSTRIPS ( tif , module )
UNARY_EXPR	218:5	218:6	6	! WRITECHECKSTRIPS ( tif , module )
UNARY_OPERATOR	218:5	218:5	7	!
LEAF_NODE	218:5	218:5	8	!
FUNCTION_CALL	218:6	218:34	7	WRITECHECKSTRIPS ( tif , module )
CALLEE	218:6	218:6	8	WRITECHECKSTRIPS
LEAF_NODE	218:6	218:6	9	WRITECHECKSTRIPS
LEAF_NODE	218:22	218:22	8	(
ARGUMENT	218:23	218:23	8	tif
FIELD	218:23	218:23	9	tif
LEAF_NODE	218:23	218:23	10	tif
LEAF_NODE	218:26	218:26	8	,
ARGUMENT	218:28	218:28	8	module
FIELD	218:28	218:28	9	module
LEAF_NODE	218:28	218:28	10	module
LEAF_NODE	218:34	218:34	8	)
LEAF_NODE	218:35	218:35	4	)
STATEMENTS	219:2	219:2	4	
JUMP_STATEMENT	219:2	219:24	5	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	219:2	219:2	6	return
LEAF_NODE	219:2	219:2	7	return
DESTINATION	219:9	219:9	6	( ( tmsize_t ) - 1 )
EXPR	219:9	219:23	7	( ( tmsize_t ) - 1 )
LEAF_NODE	219:9	219:9	8	(
LEAF_NODE	219:10	219:10	8	(
TYPE_NAME	219:11	219:11	8	tmsize_t
LEAF_NODE	219:11	219:11	9	tmsize_t
LEAF_NODE	219:19	219:19	8	)
UNARY_EXPR	219:21	219:22	8	- 1
UNARY_OPERATOR	219:21	219:21	9	-
LEAF_NODE	219:21	219:21	10	-
FIELD	219:22	219:22	9	1
LEAF_NODE	219:22	219:22	10	1
LEAF_NODE	219:23	219:23	8	)
LEAF_NODE	219:24	219:24	6	;
SELECTION	229:1	229:30	3	
KEYWORD	229:1	229:1	4	if
LEAF_NODE	229:1	229:1	5	if
LEAF_NODE	229:4	229:4	4	(
CONDITION	229:5	229:5	4	strip >= td -> td_nstrips
EXPR	229:5	229:14	5	strip >= td -> td_nstrips
FIELD	229:5	229:5	6	strip
LEAF_NODE	229:5	229:5	7	strip
REL_OPERATOR	229:11	229:11	6	>=
LEAF_NODE	229:11	229:11	7	>=
FIELD	229:14	229:18	6	td -> td_nstrips
LEAF_NODE	229:14	229:14	7	td
LEAF_NODE	229:16	229:16	7	->
LEAF_NODE	229:18	229:18	7	td_nstrips
LEAF_NODE	229:28	229:28	4	)
STATEMENTS	229:30	239:1	4	
LEAF_NODE	229:30	229:30	5	{
STATEMENTS	230:2	237:2	5	
SELECTION	230:2	230:52	6	
KEYWORD	230:2	230:2	7	if
LEAF_NODE	230:2	230:2	8	if
LEAF_NODE	230:5	230:5	7	(
CONDITION	230:6	230:6	7	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	230:6	230:29	8	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	230:6	230:10	9	td -> td_planarconfig
LEAF_NODE	230:6	230:6	10	td
LEAF_NODE	230:8	230:8	10	->
LEAF_NODE	230:10	230:10	10	td_planarconfig
EQ_OPERATOR	230:26	230:26	9	==
LEAF_NODE	230:26	230:26	10	==
FIELD	230:29	230:29	9	PLANARCONFIG_SEPARATE
LEAF_NODE	230:29	230:29	10	PLANARCONFIG_SEPARATE
LEAF_NODE	230:50	230:50	7	)
STATEMENTS	230:52	234:2	7	
LEAF_NODE	230:52	230:52	8	{
STATEMENTS	231:3	233:3	8	
EXPR_STATEMENT	231:3	232:65	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not grow image by strips when using separate planes" ) ;
EXPR	231:3	231:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not grow image by strips when using separate planes" )
FUNCTION_CALL	231:3	232:64	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not grow image by strips when using separate planes" )
CALLEE	231:3	231:3	12	TIFFErrorExt
LEAF_NODE	231:3	231:3	13	TIFFErrorExt
LEAF_NODE	231:15	231:15	12	(
ARGUMENT	231:16	231:16	12	tif -> tif_clientdata
FIELD	231:16	231:21	13	tif -> tif_clientdata
LEAF_NODE	231:16	231:16	14	tif
LEAF_NODE	231:19	231:19	14	->
LEAF_NODE	231:21	231:21	14	tif_clientdata
LEAF_NODE	231:35	231:35	12	,
ARGUMENT	231:37	231:37	12	module
FIELD	231:37	231:37	13	module
LEAF_NODE	231:37	231:37	14	module
LEAF_NODE	231:43	231:43	12	,
ARGUMENT	232:7	232:7	12	"Can not grow image by strips when using separate planes"
FIELD	232:7	232:7	13	"Can not grow image by strips when using separate planes"
LEAF_NODE	232:7	232:7	14	"Can not grow image by strips when using separate planes"
LEAF_NODE	232:64	232:64	12	)
LEAF_NODE	232:65	232:65	10	;
JUMP_STATEMENT	233:3	233:25	9	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	233:3	233:3	10	return
LEAF_NODE	233:3	233:3	11	return
DESTINATION	233:10	233:10	10	( ( tmsize_t ) - 1 )
EXPR	233:10	233:24	11	( ( tmsize_t ) - 1 )
LEAF_NODE	233:10	233:10	12	(
LEAF_NODE	233:11	233:11	12	(
TYPE_NAME	233:12	233:12	12	tmsize_t
LEAF_NODE	233:12	233:12	13	tmsize_t
LEAF_NODE	233:20	233:20	12	)
UNARY_EXPR	233:22	233:23	12	- 1
UNARY_OPERATOR	233:22	233:22	13	-
LEAF_NODE	233:22	233:22	14	-
FIELD	233:23	233:23	13	1
LEAF_NODE	233:23	233:23	14	1
LEAF_NODE	233:24	233:24	12	)
LEAF_NODE	233:25	233:25	10	;
LEAF_NODE	234:2	234:2	8	}
SELECTION	235:2	236:3	6	
KEYWORD	235:2	235:2	7	if
LEAF_NODE	235:2	235:2	8	if
LEAF_NODE	235:5	235:5	7	(
CONDITION	235:6	235:6	7	! TIFFGrowStrips ( tif , 1 , module )
EXPR	235:6	235:6	8	! TIFFGrowStrips ( tif , 1 , module )
UNARY_EXPR	235:6	235:7	9	! TIFFGrowStrips ( tif , 1 , module )
UNARY_OPERATOR	235:6	235:6	10	!
LEAF_NODE	235:6	235:6	11	!
FUNCTION_CALL	235:7	235:36	10	TIFFGrowStrips ( tif , 1 , module )
CALLEE	235:7	235:7	11	TIFFGrowStrips
LEAF_NODE	235:7	235:7	12	TIFFGrowStrips
LEAF_NODE	235:21	235:21	11	(
ARGUMENT	235:22	235:22	11	tif
FIELD	235:22	235:22	12	tif
LEAF_NODE	235:22	235:22	13	tif
LEAF_NODE	235:25	235:25	11	,
ARGUMENT	235:27	235:27	11	1
FIELD	235:27	235:27	12	1
LEAF_NODE	235:27	235:27	13	1
LEAF_NODE	235:28	235:28	11	,
ARGUMENT	235:30	235:30	11	module
FIELD	235:30	235:30	12	module
LEAF_NODE	235:30	235:30	13	module
LEAF_NODE	235:36	235:36	11	)
LEAF_NODE	235:37	235:37	7	)
STATEMENTS	236:3	236:3	7	
JUMP_STATEMENT	236:3	236:25	8	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	236:3	236:3	9	return
LEAF_NODE	236:3	236:3	10	return
DESTINATION	236:10	236:10	9	( ( tmsize_t ) - 1 )
EXPR	236:10	236:24	10	( ( tmsize_t ) - 1 )
LEAF_NODE	236:10	236:10	11	(
LEAF_NODE	236:11	236:11	11	(
TYPE_NAME	236:12	236:12	11	tmsize_t
LEAF_NODE	236:12	236:12	12	tmsize_t
LEAF_NODE	236:20	236:20	11	)
UNARY_EXPR	236:22	236:23	11	- 1
UNARY_OPERATOR	236:22	236:22	12	-
LEAF_NODE	236:22	236:22	13	-
FIELD	236:23	236:23	12	1
LEAF_NODE	236:23	236:23	13	1
LEAF_NODE	236:24	236:24	11	)
LEAF_NODE	236:25	236:25	9	;
EXPR_STATEMENT	237:2	238:61	6	td -> td_stripsperimage = TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip ) ;
EXPR	237:2	237:2	7	td -> td_stripsperimage = TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
ASSIGN	237:2	238:6	8	td -> td_stripsperimage = TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
LVAL	237:2	237:2	9	td -> td_stripsperimage
FIELD	237:2	237:6	10	td -> td_stripsperimage
LEAF_NODE	237:2	237:2	11	td
LEAF_NODE	237:4	237:4	11	->
LEAF_NODE	237:6	237:6	11	td_stripsperimage
ASSIGN_OP	237:24	237:24	9	=
LEAF_NODE	237:24	237:24	10	=
RVAL	238:6	238:6	9	TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
FUNCTION_CALL	238:6	238:60	10	TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
CALLEE	238:6	238:6	11	TIFFhowmany_32
LEAF_NODE	238:6	238:6	12	TIFFhowmany_32
LEAF_NODE	238:20	238:20	11	(
ARGUMENT	238:21	238:21	11	td -> td_imagelength
FIELD	238:21	238:25	12	td -> td_imagelength
LEAF_NODE	238:21	238:21	13	td
LEAF_NODE	238:23	238:23	13	->
LEAF_NODE	238:25	238:25	13	td_imagelength
LEAF_NODE	238:39	238:39	11	,
ARGUMENT	238:41	238:41	11	td -> td_rowsperstrip
FIELD	238:41	238:45	12	td -> td_rowsperstrip
LEAF_NODE	238:41	238:41	13	td
LEAF_NODE	238:43	238:43	13	->
LEAF_NODE	238:45	238:45	13	td_rowsperstrip
LEAF_NODE	238:60	238:60	11	)
LEAF_NODE	238:61	238:61	7	;
LEAF_NODE	239:1	239:1	5	}
SELECTION	245:1	246:2	3	
KEYWORD	245:1	245:1	4	if
LEAF_NODE	245:1	245:1	5	if
LEAF_NODE	245:4	245:4	4	(
CONDITION	245:5	245:5	4	! BUFFERCHECK ( tif )
EXPR	245:5	245:5	5	! BUFFERCHECK ( tif )
UNARY_EXPR	245:5	245:6	6	! BUFFERCHECK ( tif )
UNARY_OPERATOR	245:5	245:5	7	!
LEAF_NODE	245:5	245:5	8	!
FUNCTION_CALL	245:6	245:21	7	BUFFERCHECK ( tif )
CALLEE	245:6	245:6	8	BUFFERCHECK
LEAF_NODE	245:6	245:6	9	BUFFERCHECK
LEAF_NODE	245:17	245:17	8	(
ARGUMENT	245:18	245:18	8	tif
FIELD	245:18	245:18	9	tif
LEAF_NODE	245:18	245:18	10	tif
LEAF_NODE	245:21	245:21	8	)
LEAF_NODE	245:22	245:22	4	)
STATEMENTS	246:2	246:2	4	
JUMP_STATEMENT	246:2	246:24	5	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	246:2	246:2	6	return
LEAF_NODE	246:2	246:2	7	return
DESTINATION	246:9	246:9	6	( ( tmsize_t ) - 1 )
EXPR	246:9	246:23	7	( ( tmsize_t ) - 1 )
LEAF_NODE	246:9	246:9	8	(
LEAF_NODE	246:10	246:10	8	(
TYPE_NAME	246:11	246:11	8	tmsize_t
LEAF_NODE	246:11	246:11	9	tmsize_t
LEAF_NODE	246:19	246:19	8	)
UNARY_EXPR	246:21	246:22	8	- 1
UNARY_OPERATOR	246:21	246:21	9	-
LEAF_NODE	246:21	246:21	10	-
FIELD	246:22	246:22	9	1
LEAF_NODE	246:22	246:22	10	1
LEAF_NODE	246:23	246:23	8	)
LEAF_NODE	246:24	246:24	6	;
EXPR_STATEMENT	248:8	248:40	3	tif -> tif_flags |= TIFF_BUF4WRITE ;
EXPR	248:8	248:8	4	tif -> tif_flags |= TIFF_BUF4WRITE
ASSIGN	248:8	248:26	5	tif -> tif_flags |= TIFF_BUF4WRITE
LVAL	248:8	248:8	6	tif -> tif_flags
FIELD	248:8	248:13	7	tif -> tif_flags
LEAF_NODE	248:8	248:8	8	tif
LEAF_NODE	248:11	248:11	8	->
LEAF_NODE	248:13	248:13	8	tif_flags
ASSIGN_OP	248:23	248:23	6	|=
LEAF_NODE	248:23	248:23	7	|=
RVAL	248:26	248:26	6	TIFF_BUF4WRITE
FIELD	248:26	248:26	7	TIFF_BUF4WRITE
LEAF_NODE	248:26	248:26	8	TIFF_BUF4WRITE
LEAF_NODE	248:40	248:40	4	;
EXPR_STATEMENT	249:1	249:26	3	tif -> tif_curstrip = strip ;
EXPR	249:1	249:1	4	tif -> tif_curstrip = strip
ASSIGN	249:1	249:21	5	tif -> tif_curstrip = strip
LVAL	249:1	249:1	6	tif -> tif_curstrip
FIELD	249:1	249:6	7	tif -> tif_curstrip
LEAF_NODE	249:1	249:1	8	tif
LEAF_NODE	249:4	249:4	8	->
LEAF_NODE	249:6	249:6	8	tif_curstrip
ASSIGN_OP	249:19	249:19	6	=
LEAF_NODE	249:19	249:19	7	=
RVAL	249:21	249:21	6	strip
FIELD	249:21	249:21	7	strip
LEAF_NODE	249:21	249:21	8	strip
LEAF_NODE	249:26	249:26	4	;
SELECTION	251:1	251:55	3	
KEYWORD	251:1	251:1	4	if
LEAF_NODE	251:1	251:1	5	if
LEAF_NODE	251:3	251:3	4	(
CONDITION	251:5	251:5	4	! _TIFFReserveLargeEnoughWriteBuffer ( tif , strip )
EXPR	251:5	251:5	5	! _TIFFReserveLargeEnoughWriteBuffer ( tif , strip )
UNARY_EXPR	251:5	251:6	6	! _TIFFReserveLargeEnoughWriteBuffer ( tif , strip )
UNARY_OPERATOR	251:5	251:5	7	!
LEAF_NODE	251:5	251:5	8	!
FUNCTION_CALL	251:6	251:51	7	_TIFFReserveLargeEnoughWriteBuffer ( tif , strip )
CALLEE	251:6	251:6	8	_TIFFReserveLargeEnoughWriteBuffer
LEAF_NODE	251:6	251:6	9	_TIFFReserveLargeEnoughWriteBuffer
LEAF_NODE	251:40	251:40	8	(
ARGUMENT	251:41	251:41	8	tif
FIELD	251:41	251:41	9	tif
LEAF_NODE	251:41	251:41	10	tif
LEAF_NODE	251:44	251:44	8	,
ARGUMENT	251:46	251:46	8	strip
FIELD	251:46	251:46	9	strip
LEAF_NODE	251:46	251:46	10	strip
LEAF_NODE	251:51	251:51	8	)
LEAF_NODE	251:53	251:53	4	)
STATEMENTS	251:55	253:8	4	
LEAF_NODE	251:55	251:55	5	{
STATEMENTS	252:12	252:12	5	
JUMP_STATEMENT	252:12	252:35	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	252:12	252:12	7	return
LEAF_NODE	252:12	252:12	8	return
DESTINATION	252:19	252:19	7	( ( tmsize_t ) ( - 1 ) )
EXPR	252:19	252:34	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	252:19	252:19	9	(
LEAF_NODE	252:20	252:20	9	(
TYPE_NAME	252:21	252:21	9	tmsize_t
LEAF_NODE	252:21	252:21	10	tmsize_t
LEAF_NODE	252:29	252:29	9	)
LEAF_NODE	252:30	252:30	9	(
UNARY_EXPR	252:31	252:32	9	- 1
UNARY_OPERATOR	252:31	252:31	10	-
LEAF_NODE	252:31	252:31	11	-
FIELD	252:32	252:32	10	1
LEAF_NODE	252:32	252:32	11	1
LEAF_NODE	252:33	252:33	9	)
LEAF_NODE	252:34	252:34	9	)
LEAF_NODE	252:35	252:35	7	;
LEAF_NODE	253:8	253:8	5	}
EXPR_STATEMENT	255:8	255:26	3	tif -> tif_rawcc = 0 ;
EXPR	255:8	255:8	4	tif -> tif_rawcc = 0
ASSIGN	255:8	255:25	5	tif -> tif_rawcc = 0
LVAL	255:8	255:8	6	tif -> tif_rawcc
FIELD	255:8	255:13	7	tif -> tif_rawcc
LEAF_NODE	255:8	255:8	8	tif
LEAF_NODE	255:11	255:11	8	->
LEAF_NODE	255:13	255:13	8	tif_rawcc
ASSIGN_OP	255:23	255:23	6	=
LEAF_NODE	255:23	255:23	7	=
RVAL	255:25	255:25	6	0
FIELD	255:25	255:25	7	0
LEAF_NODE	255:25	255:25	8	0
LEAF_NODE	255:26	255:26	4	;
EXPR_STATEMENT	256:8	256:41	3	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	256:8	256:8	4	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	256:8	256:25	5	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	256:8	256:8	6	tif -> tif_rawcp
FIELD	256:8	256:13	7	tif -> tif_rawcp
LEAF_NODE	256:8	256:8	8	tif
LEAF_NODE	256:11	256:11	8	->
LEAF_NODE	256:13	256:13	8	tif_rawcp
ASSIGN_OP	256:23	256:23	6	=
LEAF_NODE	256:23	256:23	7	=
RVAL	256:25	256:25	6	tif -> tif_rawdata
FIELD	256:25	256:30	7	tif -> tif_rawdata
LEAF_NODE	256:25	256:25	8	tif
LEAF_NODE	256:28	256:28	8	->
LEAF_NODE	256:30	256:30	8	tif_rawdata
LEAF_NODE	256:41	256:41	4	;
SELECTION	258:8	258:40	3	
KEYWORD	258:8	258:8	4	if
LEAF_NODE	258:8	258:8	5	if
LEAF_NODE	258:11	258:11	4	(
CONDITION	258:12	258:12	4	td -> td_stripsperimage == 0
EXPR	258:12	258:37	5	td -> td_stripsperimage == 0
FIELD	258:12	258:16	6	td -> td_stripsperimage
LEAF_NODE	258:12	258:12	7	td
LEAF_NODE	258:14	258:14	7	->
LEAF_NODE	258:16	258:16	7	td_stripsperimage
EQ_OPERATOR	258:34	258:34	6	==
LEAF_NODE	258:34	258:34	7	==
FIELD	258:37	258:37	6	0
LEAF_NODE	258:37	258:37	7	0
LEAF_NODE	258:38	258:38	4	)
STATEMENTS	258:40	261:8	4	
LEAF_NODE	258:40	258:40	5	{
STATEMENTS	259:16	260:16	5	
EXPR_STATEMENT	259:16	259:82	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero strips per image" ) ;
EXPR	259:16	259:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero strips per image" )
FUNCTION_CALL	259:16	259:81	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero strips per image" )
CALLEE	259:16	259:16	9	TIFFErrorExt
LEAF_NODE	259:16	259:16	10	TIFFErrorExt
LEAF_NODE	259:28	259:28	9	(
ARGUMENT	259:29	259:29	9	tif -> tif_clientdata
FIELD	259:29	259:34	10	tif -> tif_clientdata
LEAF_NODE	259:29	259:29	11	tif
LEAF_NODE	259:32	259:32	11	->
LEAF_NODE	259:34	259:34	11	tif_clientdata
LEAF_NODE	259:48	259:48	9	,
ARGUMENT	259:50	259:50	9	module
FIELD	259:50	259:50	10	module
LEAF_NODE	259:50	259:50	11	module
LEAF_NODE	259:56	259:56	9	,
ARGUMENT	259:58	259:58	9	"Zero strips per image"
FIELD	259:58	259:58	10	"Zero strips per image"
LEAF_NODE	259:58	259:58	11	"Zero strips per image"
LEAF_NODE	259:81	259:81	9	)
LEAF_NODE	259:82	259:82	7	;
JUMP_STATEMENT	260:16	260:38	6	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	260:16	260:16	7	return
LEAF_NODE	260:16	260:16	8	return
DESTINATION	260:23	260:23	7	( ( tmsize_t ) - 1 )
EXPR	260:23	260:37	8	( ( tmsize_t ) - 1 )
LEAF_NODE	260:23	260:23	9	(
LEAF_NODE	260:24	260:24	9	(
TYPE_NAME	260:25	260:25	9	tmsize_t
LEAF_NODE	260:25	260:25	10	tmsize_t
LEAF_NODE	260:33	260:33	9	)
UNARY_EXPR	260:35	260:36	9	- 1
UNARY_OPERATOR	260:35	260:35	10	-
LEAF_NODE	260:35	260:35	11	-
FIELD	260:36	260:36	10	1
LEAF_NODE	260:36	260:36	11	1
LEAF_NODE	260:37	260:37	9	)
LEAF_NODE	260:38	260:38	7	;
LEAF_NODE	261:8	261:8	5	}
EXPR_STATEMENT	263:1	263:69	3	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip ;
EXPR	263:1	263:1	4	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
ASSIGN	263:1	263:16	5	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
LVAL	263:1	263:1	6	tif -> tif_row
FIELD	263:1	263:6	7	tif -> tif_row
LEAF_NODE	263:1	263:1	8	tif
LEAF_NODE	263:4	263:4	8	->
LEAF_NODE	263:6	263:6	8	tif_row
ASSIGN_OP	263:14	263:14	6	=
LEAF_NODE	263:14	263:14	7	=
RVAL	263:16	263:50	6	( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
LEAF_NODE	263:16	263:16	7	(
FIELD	263:17	263:17	7	strip
LEAF_NODE	263:17	263:17	8	strip
LEAF_NODE	263:23	263:23	7	%
FIELD	263:25	263:29	7	td -> td_stripsperimage
LEAF_NODE	263:25	263:25	8	td
LEAF_NODE	263:27	263:27	8	->
LEAF_NODE	263:29	263:29	8	td_stripsperimage
LEAF_NODE	263:46	263:46	7	)
LEAF_NODE	263:48	263:48	7	*
FIELD	263:50	263:54	7	td -> td_rowsperstrip
LEAF_NODE	263:50	263:50	8	td
LEAF_NODE	263:52	263:52	8	->
LEAF_NODE	263:54	263:54	8	td_rowsperstrip
LEAF_NODE	263:69	263:69	4	;
SELECTION	264:1	264:46	3	
KEYWORD	264:1	264:1	4	if
LEAF_NODE	264:1	264:1	5	if
LEAF_NODE	264:4	264:4	4	(
CONDITION	264:5	264:5	4	( tif -> tif_flags & TIFF_CODERSETUP ) == 0
EXPR	264:5	264:43	5	( tif -> tif_flags & TIFF_CODERSETUP ) == 0
LEAF_NODE	264:5	264:5	6	(
FIELD	264:6	264:11	6	tif -> tif_flags
LEAF_NODE	264:6	264:6	7	tif
LEAF_NODE	264:9	264:9	7	->
LEAF_NODE	264:11	264:11	7	tif_flags
LEAF_NODE	264:21	264:21	6	&
FIELD	264:23	264:23	6	TIFF_CODERSETUP
LEAF_NODE	264:23	264:23	7	TIFF_CODERSETUP
LEAF_NODE	264:38	264:38	6	)
EQ_OPERATOR	264:40	264:40	6	==
LEAF_NODE	264:40	264:40	7	==
FIELD	264:43	264:43	6	0
LEAF_NODE	264:43	264:43	7	0
LEAF_NODE	264:44	264:44	4	)
STATEMENTS	264:46	268:1	4	
LEAF_NODE	264:46	264:46	5	{
STATEMENTS	265:2	267:2	5	
SELECTION	265:2	266:3	6	
KEYWORD	265:2	265:2	7	if
LEAF_NODE	265:2	265:2	8	if
LEAF_NODE	265:5	265:5	7	(
CONDITION	265:6	265:6	7	! ( * tif -> tif_setupencode ) ( tif )
EXPR	265:6	265:6	8	! ( * tif -> tif_setupencode ) ( tif )
UNARY_EXPR	265:6	265:7	9	! ( * tif -> tif_setupencode ) ( tif )
UNARY_OPERATOR	265:6	265:6	10	!
LEAF_NODE	265:6	265:6	11	!
FUNCTION_CALL	265:7	265:34	10	( * tif -> tif_setupencode ) ( tif )
CALLEE	265:7	265:29	11	( * tif -> tif_setupencode )
LEAF_NODE	265:7	265:7	12	(
UNARY_EXPR	265:8	265:9	12	* tif -> tif_setupencode
UNARY_OPERATOR	265:8	265:8	13	*
LEAF_NODE	265:8	265:8	14	*
FIELD	265:9	265:14	13	tif -> tif_setupencode
LEAF_NODE	265:9	265:9	14	tif
LEAF_NODE	265:12	265:12	14	->
LEAF_NODE	265:14	265:14	14	tif_setupencode
LEAF_NODE	265:29	265:29	12	)
LEAF_NODE	265:30	265:30	11	(
ARGUMENT	265:31	265:31	11	tif
FIELD	265:31	265:31	12	tif
LEAF_NODE	265:31	265:31	13	tif
LEAF_NODE	265:34	265:34	11	)
LEAF_NODE	265:35	265:35	7	)
STATEMENTS	266:3	266:3	7	
JUMP_STATEMENT	266:3	266:25	8	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	266:3	266:3	9	return
LEAF_NODE	266:3	266:3	10	return
DESTINATION	266:10	266:10	9	( ( tmsize_t ) - 1 )
EXPR	266:10	266:24	10	( ( tmsize_t ) - 1 )
LEAF_NODE	266:10	266:10	11	(
LEAF_NODE	266:11	266:11	11	(
TYPE_NAME	266:12	266:12	11	tmsize_t
LEAF_NODE	266:12	266:12	12	tmsize_t
LEAF_NODE	266:20	266:20	11	)
UNARY_EXPR	266:22	266:23	11	- 1
UNARY_OPERATOR	266:22	266:22	12	-
LEAF_NODE	266:22	266:22	13	-
FIELD	266:23	266:23	12	1
LEAF_NODE	266:23	266:23	13	1
LEAF_NODE	266:24	266:24	11	)
LEAF_NODE	266:25	266:25	9	;
EXPR_STATEMENT	267:2	267:35	6	tif -> tif_flags |= TIFF_CODERSETUP ;
EXPR	267:2	267:2	7	tif -> tif_flags |= TIFF_CODERSETUP
ASSIGN	267:2	267:20	8	tif -> tif_flags |= TIFF_CODERSETUP
LVAL	267:2	267:2	9	tif -> tif_flags
FIELD	267:2	267:7	10	tif -> tif_flags
LEAF_NODE	267:2	267:2	11	tif
LEAF_NODE	267:5	267:5	11	->
LEAF_NODE	267:7	267:7	11	tif_flags
ASSIGN_OP	267:17	267:17	9	|=
LEAF_NODE	267:17	267:17	10	|=
RVAL	267:20	267:20	9	TIFF_CODERSETUP
FIELD	267:20	267:20	10	TIFF_CODERSETUP
LEAF_NODE	267:20	267:20	11	TIFF_CODERSETUP
LEAF_NODE	267:35	267:35	7	;
LEAF_NODE	268:1	268:1	5	}
EXPR_STATEMENT	270:1	270:35	3	tif -> tif_flags &= ~TIFF_POSTENCODE ;
EXPR	270:1	270:1	4	tif -> tif_flags &= ~TIFF_POSTENCODE
ASSIGN	270:1	270:19	5	tif -> tif_flags &= ~TIFF_POSTENCODE
LVAL	270:1	270:1	6	tif -> tif_flags
FIELD	270:1	270:6	7	tif -> tif_flags
LEAF_NODE	270:1	270:1	8	tif
LEAF_NODE	270:4	270:4	8	->
LEAF_NODE	270:6	270:6	8	tif_flags
ASSIGN_OP	270:16	270:16	6	&=
LEAF_NODE	270:16	270:16	7	&=
RVAL	270:19	270:19	6	~TIFF_POSTENCODE
FIELD	270:19	270:19	7	~TIFF_POSTENCODE
LEAF_NODE	270:19	270:19	8	~TIFF_POSTENCODE
LEAF_NODE	270:35	270:35	4	;
SELECTION	273:4	274:4	3	
KEYWORD	273:4	273:4	4	if
LEAF_NODE	273:4	273:4	5	if
LEAF_NODE	273:6	273:6	4	(
CONDITION	273:8	273:8	4	td -> td_compression == COMPRESSION_NONE
EXPR	273:8	273:30	5	td -> td_compression == COMPRESSION_NONE
FIELD	273:8	273:12	6	td -> td_compression
LEAF_NODE	273:8	273:8	7	td
LEAF_NODE	273:10	273:10	7	->
LEAF_NODE	273:12	273:12	7	td_compression
EQ_OPERATOR	273:27	273:27	6	==
LEAF_NODE	273:27	273:27	7	==
FIELD	273:30	273:30	6	COMPRESSION_NONE
LEAF_NODE	273:30	273:30	7	COMPRESSION_NONE
LEAF_NODE	273:47	273:47	4	)
STATEMENTS	274:4	286:4	4	
LEAF_NODE	274:4	274:4	5	{
STATEMENTS	276:8	285:19	5	
EXPR_STATEMENT	276:8	276:53	6	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc ) ;
EXPR	276:8	276:8	7	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc )
FUNCTION_CALL	276:8	276:52	8	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc )
CALLEE	276:8	276:13	9	tif -> tif_postdecode
LEAF_NODE	276:8	276:8	10	tif
LEAF_NODE	276:11	276:11	10	->
LEAF_NODE	276:13	276:13	10	tif_postdecode
LEAF_NODE	276:27	276:27	9	(
ARGUMENT	276:29	276:29	9	tif
FIELD	276:29	276:29	10	tif
LEAF_NODE	276:29	276:29	11	tif
LEAF_NODE	276:32	276:32	9	,
ARGUMENT	276:34	276:43	9	( uint8 * ) data
LEAF_NODE	276:34	276:34	10	(
TYPE_NAME	276:35	276:35	10	uint8
LEAF_NODE	276:35	276:35	11	uint8
LEAF_NODE	276:40	276:40	10	*
LEAF_NODE	276:41	276:41	10	)
FIELD	276:43	276:43	10	data
LEAF_NODE	276:43	276:43	11	data
LEAF_NODE	276:47	276:47	9	,
ARGUMENT	276:49	276:49	9	cc
FIELD	276:49	276:49	10	cc
LEAF_NODE	276:49	276:49	11	cc
LEAF_NODE	276:52	276:52	9	)
LEAF_NODE	276:53	276:53	7	;
SELECTION	278:8	280:12	6	
KEYWORD	278:8	278:8	7	if
LEAF_NODE	278:8	278:8	8	if
LEAF_NODE	278:11	278:11	7	(
CONDITION	278:12	278:12	7	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	278:12	278:12	8	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	278:12	279:12	9	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	278:12	278:12	10	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	278:12	278:13	11	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	278:12	278:12	12	!
LEAF_NODE	278:12	278:12	13	!
FUNCTION_CALL	278:13	278:46	12	isFillOrder ( tif , td -> td_fillorder )
CALLEE	278:13	278:13	13	isFillOrder
LEAF_NODE	278:13	278:13	14	isFillOrder
LEAF_NODE	278:24	278:24	13	(
ARGUMENT	278:25	278:25	13	tif
FIELD	278:25	278:25	14	tif
LEAF_NODE	278:25	278:25	15	tif
LEAF_NODE	278:28	278:28	13	,
ARGUMENT	278:30	278:30	13	td -> td_fillorder
FIELD	278:30	278:34	14	td -> td_fillorder
LEAF_NODE	278:30	278:30	15	td
LEAF_NODE	278:32	278:32	15	->
LEAF_NODE	278:34	278:34	15	td_fillorder
LEAF_NODE	278:46	278:46	13	)
LEAF_NODE	278:48	278:48	10	&&
EXPR	279:12	279:48	10	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	279:12	279:12	11	(
FIELD	279:13	279:18	11	tif -> tif_flags
LEAF_NODE	279:13	279:13	12	tif
LEAF_NODE	279:16	279:16	12	->
LEAF_NODE	279:18	279:18	12	tif_flags
LEAF_NODE	279:28	279:28	11	&
FIELD	279:30	279:30	11	TIFF_NOBITREV
LEAF_NODE	279:30	279:30	12	TIFF_NOBITREV
LEAF_NODE	279:43	279:43	11	)
EQ_OPERATOR	279:45	279:45	11	==
LEAF_NODE	279:45	279:45	12	==
FIELD	279:48	279:48	11	0
LEAF_NODE	279:48	279:48	12	0
LEAF_NODE	279:49	279:49	7	)
STATEMENTS	280:12	280:12	7	
EXPR_STATEMENT	280:12	280:46	8	TIFFReverseBits ( ( uint8 * ) data , cc ) ;
EXPR	280:12	280:12	9	TIFFReverseBits ( ( uint8 * ) data , cc )
FUNCTION_CALL	280:12	280:45	10	TIFFReverseBits ( ( uint8 * ) data , cc )
CALLEE	280:12	280:12	11	TIFFReverseBits
LEAF_NODE	280:12	280:12	12	TIFFReverseBits
LEAF_NODE	280:27	280:27	11	(
ARGUMENT	280:28	280:37	11	( uint8 * ) data
LEAF_NODE	280:28	280:28	12	(
TYPE_NAME	280:29	280:29	12	uint8
LEAF_NODE	280:29	280:29	13	uint8
LEAF_NODE	280:34	280:34	12	*
LEAF_NODE	280:35	280:35	12	)
FIELD	280:37	280:37	12	data
LEAF_NODE	280:37	280:37	13	data
LEAF_NODE	280:41	280:41	11	,
ARGUMENT	280:43	280:43	11	cc
FIELD	280:43	280:43	12	cc
LEAF_NODE	280:43	280:43	13	cc
LEAF_NODE	280:45	280:45	11	)
LEAF_NODE	280:46	280:46	9	;
SELECTION	282:8	284:12	6	
KEYWORD	282:8	282:8	7	if
LEAF_NODE	282:8	282:8	8	if
LEAF_NODE	282:11	282:11	7	(
CONDITION	282:12	282:12	7	cc > 0 && ! TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc )
EXPR	282:12	282:12	8	cc > 0 && ! TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc )
AND	282:12	283:12	9	cc > 0 && ! TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc )
EXPR	282:12	282:17	10	cc > 0
FIELD	282:12	282:12	11	cc
LEAF_NODE	282:12	282:12	12	cc
REL_OPERATOR	282:15	282:15	11	>
LEAF_NODE	282:15	282:15	12	>
FIELD	282:17	282:17	11	0
LEAF_NODE	282:17	282:17	12	0
LEAF_NODE	282:19	282:19	10	&&
EXPR	283:12	283:12	10	! TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc )
UNARY_EXPR	283:12	283:13	11	! TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc )
UNARY_OPERATOR	283:12	283:12	12	!
LEAF_NODE	283:12	283:12	13	!
FUNCTION_CALL	283:13	283:60	12	TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc )
CALLEE	283:13	283:13	13	TIFFAppendToStrip
LEAF_NODE	283:13	283:13	14	TIFFAppendToStrip
LEAF_NODE	283:30	283:30	13	(
ARGUMENT	283:31	283:31	13	tif
FIELD	283:31	283:31	14	tif
LEAF_NODE	283:31	283:31	15	tif
LEAF_NODE	283:34	283:34	13	,
ARGUMENT	283:36	283:36	13	strip
FIELD	283:36	283:36	14	strip
LEAF_NODE	283:36	283:36	15	strip
LEAF_NODE	283:41	283:41	13	,
ARGUMENT	283:43	283:52	13	( uint8 * ) data
LEAF_NODE	283:43	283:43	14	(
TYPE_NAME	283:44	283:44	14	uint8
LEAF_NODE	283:44	283:44	15	uint8
LEAF_NODE	283:49	283:49	14	*
LEAF_NODE	283:50	283:50	14	)
FIELD	283:52	283:52	14	data
LEAF_NODE	283:52	283:52	15	data
LEAF_NODE	283:56	283:56	13	,
ARGUMENT	283:58	283:58	13	cc
FIELD	283:58	283:58	14	cc
LEAF_NODE	283:58	283:58	15	cc
LEAF_NODE	283:60	283:60	13	)
LEAF_NODE	283:61	283:61	7	)
STATEMENTS	284:12	284:12	7	
JUMP_STATEMENT	284:12	284:34	8	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	284:12	284:12	9	return
LEAF_NODE	284:12	284:12	10	return
DESTINATION	284:19	284:19	9	( ( tmsize_t ) - 1 )
EXPR	284:19	284:33	10	( ( tmsize_t ) - 1 )
LEAF_NODE	284:19	284:19	11	(
LEAF_NODE	284:20	284:20	11	(
TYPE_NAME	284:21	284:21	11	tmsize_t
LEAF_NODE	284:21	284:21	12	tmsize_t
LEAF_NODE	284:29	284:29	11	)
UNARY_EXPR	284:31	284:32	11	- 1
UNARY_OPERATOR	284:31	284:31	12	-
LEAF_NODE	284:31	284:31	13	-
FIELD	284:32	284:32	12	1
LEAF_NODE	284:32	284:32	13	1
LEAF_NODE	284:33	284:33	11	)
LEAF_NODE	284:34	284:34	9	;
LEAF_NODE	285:8	285:8	6	return
LEAF_NODE	285:15	285:15	6	(
LEAF_NODE	285:16	285:16	6	cc
LEAF_NODE	285:18	285:18	6	)
LEAF_NODE	285:19	285:19	6	;
LEAF_NODE	286:4	286:4	5	}
EXPR_STATEMENT	288:1	288:49	3	sample = ( uint16 ) ( strip / td -> td_stripsperimage ) ;
EXPR	288:1	288:1	4	sample = ( uint16 ) ( strip / td -> td_stripsperimage )
ASSIGN	288:1	288:10	5	sample = ( uint16 ) ( strip / td -> td_stripsperimage )
LVAL	288:1	288:1	6	sample
FIELD	288:1	288:1	7	sample
LEAF_NODE	288:1	288:1	8	sample
ASSIGN_OP	288:8	288:8	6	=
LEAF_NODE	288:8	288:8	7	=
RVAL	288:10	288:48	6	( uint16 ) ( strip / td -> td_stripsperimage )
LEAF_NODE	288:10	288:10	7	(
TYPE_NAME	288:11	288:11	7	uint16
LEAF_NODE	288:11	288:11	8	uint16
LEAF_NODE	288:17	288:17	7	)
LEAF_NODE	288:18	288:18	7	(
FIELD	288:19	288:19	7	strip
LEAF_NODE	288:19	288:19	8	strip
LEAF_NODE	288:25	288:25	7	/
FIELD	288:27	288:31	7	td -> td_stripsperimage
LEAF_NODE	288:27	288:27	8	td
LEAF_NODE	288:29	288:29	8	->
LEAF_NODE	288:31	288:31	8	td_stripsperimage
LEAF_NODE	288:48	288:48	7	)
LEAF_NODE	288:49	288:49	4	;
SELECTION	289:1	290:2	3	
KEYWORD	289:1	289:1	4	if
LEAF_NODE	289:1	289:1	5	if
LEAF_NODE	289:4	289:4	4	(
CONDITION	289:5	289:5	4	! ( * tif -> tif_preencode ) ( tif , sample )
EXPR	289:5	289:5	5	! ( * tif -> tif_preencode ) ( tif , sample )
UNARY_EXPR	289:5	289:6	6	! ( * tif -> tif_preencode ) ( tif , sample )
UNARY_OPERATOR	289:5	289:5	7	!
LEAF_NODE	289:5	289:5	8	!
FUNCTION_CALL	289:6	289:39	7	( * tif -> tif_preencode ) ( tif , sample )
CALLEE	289:6	289:26	8	( * tif -> tif_preencode )
LEAF_NODE	289:6	289:6	9	(
UNARY_EXPR	289:7	289:8	9	* tif -> tif_preencode
UNARY_OPERATOR	289:7	289:7	10	*
LEAF_NODE	289:7	289:7	11	*
FIELD	289:8	289:13	10	tif -> tif_preencode
LEAF_NODE	289:8	289:8	11	tif
LEAF_NODE	289:11	289:11	11	->
LEAF_NODE	289:13	289:13	11	tif_preencode
LEAF_NODE	289:26	289:26	9	)
LEAF_NODE	289:27	289:27	8	(
ARGUMENT	289:28	289:28	8	tif
FIELD	289:28	289:28	9	tif
LEAF_NODE	289:28	289:28	10	tif
LEAF_NODE	289:31	289:31	8	,
ARGUMENT	289:33	289:33	8	sample
FIELD	289:33	289:33	9	sample
LEAF_NODE	289:33	289:33	10	sample
LEAF_NODE	289:39	289:39	8	)
LEAF_NODE	289:40	289:40	4	)
STATEMENTS	290:2	290:2	4	
JUMP_STATEMENT	290:2	290:24	5	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	290:2	290:2	6	return
LEAF_NODE	290:2	290:2	7	return
DESTINATION	290:9	290:9	6	( ( tmsize_t ) - 1 )
EXPR	290:9	290:23	7	( ( tmsize_t ) - 1 )
LEAF_NODE	290:9	290:9	8	(
LEAF_NODE	290:10	290:10	8	(
TYPE_NAME	290:11	290:11	8	tmsize_t
LEAF_NODE	290:11	290:11	9	tmsize_t
LEAF_NODE	290:19	290:19	8	)
UNARY_EXPR	290:21	290:22	8	- 1
UNARY_OPERATOR	290:21	290:21	9	-
LEAF_NODE	290:21	290:21	10	-
FIELD	290:22	290:22	9	1
LEAF_NODE	290:22	290:22	10	1
LEAF_NODE	290:23	290:23	8	)
LEAF_NODE	290:24	290:24	6	;
EXPR_STATEMENT	293:1	293:46	3	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc ) ;
EXPR	293:1	293:1	4	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc )
FUNCTION_CALL	293:1	293:45	5	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc )
CALLEE	293:1	293:6	6	tif -> tif_postdecode
LEAF_NODE	293:1	293:1	7	tif
LEAF_NODE	293:4	293:4	7	->
LEAF_NODE	293:6	293:6	7	tif_postdecode
LEAF_NODE	293:20	293:20	6	(
ARGUMENT	293:22	293:22	6	tif
FIELD	293:22	293:22	7	tif
LEAF_NODE	293:22	293:22	8	tif
LEAF_NODE	293:25	293:25	6	,
ARGUMENT	293:27	293:36	6	( uint8 * ) data
LEAF_NODE	293:27	293:27	7	(
TYPE_NAME	293:28	293:28	7	uint8
LEAF_NODE	293:28	293:28	8	uint8
LEAF_NODE	293:33	293:33	7	*
LEAF_NODE	293:34	293:34	7	)
FIELD	293:36	293:36	7	data
LEAF_NODE	293:36	293:36	8	data
LEAF_NODE	293:40	293:40	6	,
ARGUMENT	293:42	293:42	6	cc
FIELD	293:42	293:42	7	cc
LEAF_NODE	293:42	293:42	8	cc
LEAF_NODE	293:45	293:45	6	)
LEAF_NODE	293:46	293:46	4	;
SELECTION	295:1	296:2	3	
KEYWORD	295:1	295:1	4	if
LEAF_NODE	295:1	295:1	5	if
LEAF_NODE	295:4	295:4	4	(
CONDITION	295:5	295:5	4	! ( * tif -> tif_encodestrip ) ( tif , ( uint8 * ) data , cc , sample )
EXPR	295:5	295:5	5	! ( * tif -> tif_encodestrip ) ( tif , ( uint8 * ) data , cc , sample )
UNARY_EXPR	295:5	295:6	6	! ( * tif -> tif_encodestrip ) ( tif , ( uint8 * ) data , cc , sample )
UNARY_OPERATOR	295:5	295:5	7	!
LEAF_NODE	295:5	295:5	8	!
FUNCTION_CALL	295:6	295:60	7	( * tif -> tif_encodestrip ) ( tif , ( uint8 * ) data , cc , sample )
CALLEE	295:6	295:28	8	( * tif -> tif_encodestrip )
LEAF_NODE	295:6	295:6	9	(
UNARY_EXPR	295:7	295:8	9	* tif -> tif_encodestrip
UNARY_OPERATOR	295:7	295:7	10	*
LEAF_NODE	295:7	295:7	11	*
FIELD	295:8	295:13	10	tif -> tif_encodestrip
LEAF_NODE	295:8	295:8	11	tif
LEAF_NODE	295:11	295:11	11	->
LEAF_NODE	295:13	295:13	11	tif_encodestrip
LEAF_NODE	295:28	295:28	9	)
LEAF_NODE	295:29	295:29	8	(
ARGUMENT	295:30	295:30	8	tif
FIELD	295:30	295:30	9	tif
LEAF_NODE	295:30	295:30	10	tif
LEAF_NODE	295:33	295:33	8	,
ARGUMENT	295:35	295:44	8	( uint8 * ) data
LEAF_NODE	295:35	295:35	9	(
TYPE_NAME	295:36	295:36	9	uint8
LEAF_NODE	295:36	295:36	10	uint8
LEAF_NODE	295:41	295:41	9	*
LEAF_NODE	295:42	295:42	9	)
FIELD	295:44	295:44	9	data
LEAF_NODE	295:44	295:44	10	data
LEAF_NODE	295:48	295:48	8	,
ARGUMENT	295:50	295:50	8	cc
FIELD	295:50	295:50	9	cc
LEAF_NODE	295:50	295:50	10	cc
LEAF_NODE	295:52	295:52	8	,
ARGUMENT	295:54	295:54	8	sample
FIELD	295:54	295:54	9	sample
LEAF_NODE	295:54	295:54	10	sample
LEAF_NODE	295:60	295:60	8	)
LEAF_NODE	295:61	295:61	4	)
STATEMENTS	296:2	296:2	4	
JUMP_STATEMENT	296:2	296:24	5	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	296:2	296:2	6	return
LEAF_NODE	296:2	296:2	7	return
DESTINATION	296:9	296:9	6	( ( tmsize_t ) - 1 )
EXPR	296:9	296:23	7	( ( tmsize_t ) - 1 )
LEAF_NODE	296:9	296:9	8	(
LEAF_NODE	296:10	296:10	8	(
TYPE_NAME	296:11	296:11	8	tmsize_t
LEAF_NODE	296:11	296:11	9	tmsize_t
LEAF_NODE	296:19	296:19	8	)
UNARY_EXPR	296:21	296:22	8	- 1
UNARY_OPERATOR	296:21	296:21	9	-
LEAF_NODE	296:21	296:21	10	-
FIELD	296:22	296:22	9	1
LEAF_NODE	296:22	296:22	10	1
LEAF_NODE	296:23	296:23	8	)
LEAF_NODE	296:24	296:24	6	;
SELECTION	297:1	298:2	3	
KEYWORD	297:1	297:1	4	if
LEAF_NODE	297:1	297:1	5	if
LEAF_NODE	297:4	297:4	4	(
CONDITION	297:5	297:5	4	! ( * tif -> tif_postencode ) ( tif )
EXPR	297:5	297:5	5	! ( * tif -> tif_postencode ) ( tif )
UNARY_EXPR	297:5	297:6	6	! ( * tif -> tif_postencode ) ( tif )
UNARY_OPERATOR	297:5	297:5	7	!
LEAF_NODE	297:5	297:5	8	!
FUNCTION_CALL	297:6	297:32	7	( * tif -> tif_postencode ) ( tif )
CALLEE	297:6	297:27	8	( * tif -> tif_postencode )
LEAF_NODE	297:6	297:6	9	(
UNARY_EXPR	297:7	297:8	9	* tif -> tif_postencode
UNARY_OPERATOR	297:7	297:7	10	*
LEAF_NODE	297:7	297:7	11	*
FIELD	297:8	297:13	10	tif -> tif_postencode
LEAF_NODE	297:8	297:8	11	tif
LEAF_NODE	297:11	297:11	11	->
LEAF_NODE	297:13	297:13	11	tif_postencode
LEAF_NODE	297:27	297:27	9	)
LEAF_NODE	297:28	297:28	8	(
ARGUMENT	297:29	297:29	8	tif
FIELD	297:29	297:29	9	tif
LEAF_NODE	297:29	297:29	10	tif
LEAF_NODE	297:32	297:32	8	)
LEAF_NODE	297:33	297:33	4	)
STATEMENTS	298:2	298:2	4	
JUMP_STATEMENT	298:2	298:24	5	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	298:2	298:2	6	return
LEAF_NODE	298:2	298:2	7	return
DESTINATION	298:9	298:9	6	( ( tmsize_t ) - 1 )
EXPR	298:9	298:23	7	( ( tmsize_t ) - 1 )
LEAF_NODE	298:9	298:9	8	(
LEAF_NODE	298:10	298:10	8	(
TYPE_NAME	298:11	298:11	8	tmsize_t
LEAF_NODE	298:11	298:11	9	tmsize_t
LEAF_NODE	298:19	298:19	8	)
UNARY_EXPR	298:21	298:22	8	- 1
UNARY_OPERATOR	298:21	298:21	9	-
LEAF_NODE	298:21	298:21	10	-
FIELD	298:22	298:22	9	1
LEAF_NODE	298:22	298:22	10	1
LEAF_NODE	298:23	298:23	8	)
LEAF_NODE	298:24	298:24	6	;
SELECTION	299:1	301:2	3	
KEYWORD	299:1	299:1	4	if
LEAF_NODE	299:1	299:1	5	if
LEAF_NODE	299:4	299:4	4	(
CONDITION	299:5	299:5	4	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	299:5	299:5	5	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	299:5	300:5	6	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	299:5	299:5	7	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	299:5	299:6	8	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	299:5	299:5	9	!
LEAF_NODE	299:5	299:5	10	!
FUNCTION_CALL	299:6	299:39	9	isFillOrder ( tif , td -> td_fillorder )
CALLEE	299:6	299:6	10	isFillOrder
LEAF_NODE	299:6	299:6	11	isFillOrder
LEAF_NODE	299:17	299:17	10	(
ARGUMENT	299:18	299:18	10	tif
FIELD	299:18	299:18	11	tif
LEAF_NODE	299:18	299:18	12	tif
LEAF_NODE	299:21	299:21	10	,
ARGUMENT	299:23	299:23	10	td -> td_fillorder
FIELD	299:23	299:27	11	td -> td_fillorder
LEAF_NODE	299:23	299:23	12	td
LEAF_NODE	299:25	299:25	12	->
LEAF_NODE	299:27	299:27	12	td_fillorder
LEAF_NODE	299:39	299:39	10	)
LEAF_NODE	299:41	299:41	7	&&
EXPR	300:5	300:41	7	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	300:5	300:5	8	(
FIELD	300:6	300:11	8	tif -> tif_flags
LEAF_NODE	300:6	300:6	9	tif
LEAF_NODE	300:9	300:9	9	->
LEAF_NODE	300:11	300:11	9	tif_flags
LEAF_NODE	300:21	300:21	8	&
FIELD	300:23	300:23	8	TIFF_NOBITREV
LEAF_NODE	300:23	300:23	9	TIFF_NOBITREV
LEAF_NODE	300:36	300:36	8	)
EQ_OPERATOR	300:38	300:38	8	==
LEAF_NODE	300:38	300:38	9	==
FIELD	300:41	300:41	8	0
LEAF_NODE	300:41	300:41	9	0
LEAF_NODE	300:42	300:42	4	)
STATEMENTS	301:2	301:2	4	
EXPR_STATEMENT	301:2	301:51	5	TIFFReverseBits ( tif -> tif_rawdata , tif -> tif_rawcc ) ;
EXPR	301:2	301:2	6	TIFFReverseBits ( tif -> tif_rawdata , tif -> tif_rawcc )
FUNCTION_CALL	301:2	301:50	7	TIFFReverseBits ( tif -> tif_rawdata , tif -> tif_rawcc )
CALLEE	301:2	301:2	8	TIFFReverseBits
LEAF_NODE	301:2	301:2	9	TIFFReverseBits
LEAF_NODE	301:17	301:17	8	(
ARGUMENT	301:18	301:18	8	tif -> tif_rawdata
FIELD	301:18	301:23	9	tif -> tif_rawdata
LEAF_NODE	301:18	301:18	10	tif
LEAF_NODE	301:21	301:21	10	->
LEAF_NODE	301:23	301:23	10	tif_rawdata
LEAF_NODE	301:34	301:34	8	,
ARGUMENT	301:36	301:36	8	tif -> tif_rawcc
FIELD	301:36	301:41	9	tif -> tif_rawcc
LEAF_NODE	301:36	301:36	10	tif
LEAF_NODE	301:39	301:39	10	->
LEAF_NODE	301:41	301:41	10	tif_rawcc
LEAF_NODE	301:50	301:50	8	)
LEAF_NODE	301:51	301:51	6	;
SELECTION	302:1	304:2	3	
KEYWORD	302:1	302:1	4	if
LEAF_NODE	302:1	302:1	5	if
LEAF_NODE	302:4	302:4	4	(
CONDITION	302:5	302:5	4	tif -> tif_rawcc > 0 && ! TIFFAppendToStrip ( tif , strip , tif -> tif_rawdata , tif -> tif_rawcc )
EXPR	302:5	302:5	5	tif -> tif_rawcc > 0 && ! TIFFAppendToStrip ( tif , strip , tif -> tif_rawdata , tif -> tif_rawcc )
AND	302:5	303:5	6	tif -> tif_rawcc > 0 && ! TIFFAppendToStrip ( tif , strip , tif -> tif_rawdata , tif -> tif_rawcc )
EXPR	302:5	302:22	7	tif -> tif_rawcc > 0
FIELD	302:5	302:10	8	tif -> tif_rawcc
LEAF_NODE	302:5	302:5	9	tif
LEAF_NODE	302:8	302:8	9	->
LEAF_NODE	302:10	302:10	9	tif_rawcc
REL_OPERATOR	302:20	302:20	8	>
LEAF_NODE	302:20	302:20	9	>
FIELD	302:22	302:22	8	0
LEAF_NODE	302:22	302:22	9	0
LEAF_NODE	302:24	302:24	7	&&
EXPR	303:5	303:5	7	! TIFFAppendToStrip ( tif , strip , tif -> tif_rawdata , tif -> tif_rawcc )
UNARY_EXPR	303:5	303:6	8	! TIFFAppendToStrip ( tif , strip , tif -> tif_rawdata , tif -> tif_rawcc )
UNARY_OPERATOR	303:5	303:5	9	!
LEAF_NODE	303:5	303:5	10	!
FUNCTION_CALL	303:6	303:68	9	TIFFAppendToStrip ( tif , strip , tif -> tif_rawdata , tif -> tif_rawcc )
CALLEE	303:6	303:6	10	TIFFAppendToStrip
LEAF_NODE	303:6	303:6	11	TIFFAppendToStrip
LEAF_NODE	303:23	303:23	10	(
ARGUMENT	303:24	303:24	10	tif
FIELD	303:24	303:24	11	tif
LEAF_NODE	303:24	303:24	12	tif
LEAF_NODE	303:27	303:27	10	,
ARGUMENT	303:29	303:29	10	strip
FIELD	303:29	303:29	11	strip
LEAF_NODE	303:29	303:29	12	strip
LEAF_NODE	303:34	303:34	10	,
ARGUMENT	303:36	303:36	10	tif -> tif_rawdata
FIELD	303:36	303:41	11	tif -> tif_rawdata
LEAF_NODE	303:36	303:36	12	tif
LEAF_NODE	303:39	303:39	12	->
LEAF_NODE	303:41	303:41	12	tif_rawdata
LEAF_NODE	303:52	303:52	10	,
ARGUMENT	303:54	303:54	10	tif -> tif_rawcc
FIELD	303:54	303:59	11	tif -> tif_rawcc
LEAF_NODE	303:54	303:54	12	tif
LEAF_NODE	303:57	303:57	12	->
LEAF_NODE	303:59	303:59	12	tif_rawcc
LEAF_NODE	303:68	303:68	10	)
LEAF_NODE	303:69	303:69	4	)
STATEMENTS	304:2	304:2	4	
JUMP_STATEMENT	304:2	304:24	5	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	304:2	304:2	6	return
LEAF_NODE	304:2	304:2	7	return
DESTINATION	304:9	304:9	6	( ( tmsize_t ) - 1 )
EXPR	304:9	304:23	7	( ( tmsize_t ) - 1 )
LEAF_NODE	304:9	304:9	8	(
LEAF_NODE	304:10	304:10	8	(
TYPE_NAME	304:11	304:11	8	tmsize_t
LEAF_NODE	304:11	304:11	9	tmsize_t
LEAF_NODE	304:19	304:19	8	)
UNARY_EXPR	304:21	304:22	8	- 1
UNARY_OPERATOR	304:21	304:21	9	-
LEAF_NODE	304:21	304:21	10	-
FIELD	304:22	304:22	9	1
LEAF_NODE	304:22	304:22	10	1
LEAF_NODE	304:23	304:23	8	)
LEAF_NODE	304:24	304:24	6	;
EXPR_STATEMENT	305:1	305:19	3	tif -> tif_rawcc = 0 ;
EXPR	305:1	305:1	4	tif -> tif_rawcc = 0
ASSIGN	305:1	305:18	5	tif -> tif_rawcc = 0
LVAL	305:1	305:1	6	tif -> tif_rawcc
FIELD	305:1	305:6	7	tif -> tif_rawcc
LEAF_NODE	305:1	305:1	8	tif
LEAF_NODE	305:4	305:4	8	->
LEAF_NODE	305:6	305:6	8	tif_rawcc
ASSIGN_OP	305:16	305:16	6	=
LEAF_NODE	305:16	305:16	7	=
RVAL	305:18	305:18	6	0
FIELD	305:18	305:18	7	0
LEAF_NODE	305:18	305:18	8	0
LEAF_NODE	305:19	305:19	4	;
EXPR_STATEMENT	306:1	306:34	3	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	306:1	306:1	4	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	306:1	306:18	5	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	306:1	306:1	6	tif -> tif_rawcp
FIELD	306:1	306:6	7	tif -> tif_rawcp
LEAF_NODE	306:1	306:1	8	tif
LEAF_NODE	306:4	306:4	8	->
LEAF_NODE	306:6	306:6	8	tif_rawcp
ASSIGN_OP	306:16	306:16	6	=
LEAF_NODE	306:16	306:16	7	=
RVAL	306:18	306:18	6	tif -> tif_rawdata
FIELD	306:18	306:23	7	tif -> tif_rawdata
LEAF_NODE	306:18	306:18	8	tif
LEAF_NODE	306:21	306:21	8	->
LEAF_NODE	306:23	306:23	8	tif_rawdata
LEAF_NODE	306:34	306:34	4	;
LEAF_NODE	307:1	307:1	3	return
LEAF_NODE	307:8	307:8	3	(
LEAF_NODE	307:9	307:9	3	cc
LEAF_NODE	307:11	307:11	3	)
LEAF_NODE	307:12	307:12	3	;
LEAF_NODE	308:0	308:0	2	}
FUNCTION_DEF	315:0	357:0	1	
RETURN_TYPE	315:0	315:0	2	tmsize_t
TYPE_NAME	315:0	315:0	3	tmsize_t
LEAF_NODE	315:0	315:0	4	tmsize_t
FUNCTION_NAME	316:0	316:0	2	TIFFWriteRawStrip
LEAF_NODE	316:0	316:0	3	TIFFWriteRawStrip
PARAMETER_LIST	316:17	316:66	2	( TIFF * tif , uint32 strip , void * data , tmsize_t cc )
LEAF_NODE	316:17	316:17	3	(
PARAMETER_DECL	316:18	316:24	3	TIFF * tif
TYPE	316:18	316:22	4	TIFF *
TYPE_NAME	316:18	316:18	5	TIFF
LEAF_NODE	316:18	316:18	6	TIFF
POINTER	316:22	316:22	5	*
LEAF_NODE	316:22	316:22	6	*
NAME	316:24	316:24	4	tif
LEAF_NODE	316:24	316:24	5	tif
LEAF_NODE	316:27	316:27	3	,
PARAMETER_DECL	316:29	316:36	3	uint32 strip
TYPE	316:29	316:29	4	uint32
TYPE_NAME	316:29	316:29	5	uint32
LEAF_NODE	316:29	316:29	6	uint32
NAME	316:36	316:36	4	strip
LEAF_NODE	316:36	316:36	5	strip
LEAF_NODE	316:41	316:41	3	,
PARAMETER_DECL	316:43	316:49	3	void * data
TYPE	316:43	316:47	4	void *
TYPE_NAME	316:43	316:43	5	void
LEAF_NODE	316:43	316:43	6	void
POINTER	316:47	316:47	5	*
LEAF_NODE	316:47	316:47	6	*
NAME	316:49	316:49	4	data
LEAF_NODE	316:49	316:49	5	data
LEAF_NODE	316:53	316:53	3	,
PARAMETER_DECL	316:55	316:64	3	tmsize_t cc
TYPE	316:55	316:55	4	tmsize_t
TYPE_NAME	316:55	316:55	5	tmsize_t
LEAF_NODE	316:55	316:55	6	tmsize_t
NAME	316:64	316:64	4	cc
LEAF_NODE	316:64	316:64	5	cc
LEAF_NODE	316:66	316:66	3	)
LEAF_NODE	317:0	317:0	2	{
STATEMENTS	318:1	355:1	2	
LEAF_NODE	318:1	318:1	3	static
SIMPLE_DECL	318:8	318:49	3	const char [ ] module ; module = "TIFFWriteRawStrip" ;
VAR_DECL	318:8	318:19	4	const char [ ] module ; module = "TIFFWriteRawStrip"
TYPE	318:8	318:25	5	const char [ ]
TYPE_NAME	318:8	318:14	6	const char
LEAF_NODE	318:8	318:8	7	const
LEAF_NODE	318:14	318:14	7	char
TYPE_SUFFIX	318:25	318:26	6	[ ]
LEAF_NODE	318:25	318:25	7	[
LEAF_NODE	318:26	318:26	7	]
NAME	318:19	318:19	5	module
LEAF_NODE	318:19	318:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	318:19	318:19	5	module = "TIFFWriteRawStrip"
ASSIGN	318:19	318:30	6	module = "TIFFWriteRawStrip"
LVAL	318:19	318:19	7	module
NAME	318:19	318:19	8	module
LEAF_NODE	318:19	318:19	9	module
ASSIGN_OP	318:28	318:28	7	=
LEAF_NODE	318:28	318:28	8	=
RVAL	318:30	318:30	7	"TIFFWriteRawStrip"
FIELD	318:30	318:30	8	"TIFFWriteRawStrip"
LEAF_NODE	318:30	318:30	9	"TIFFWriteRawStrip"
LEAF_NODE	318:49	318:49	4	;
SIMPLE_DECL	319:1	319:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	319:1	319:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	319:1	319:15	5	TIFFDirectory *
TYPE_NAME	319:1	319:1	6	TIFFDirectory
LEAF_NODE	319:1	319:1	7	TIFFDirectory
POINTER	319:15	319:15	6	*
LEAF_NODE	319:15	319:15	7	*
NAME	319:16	319:16	5	td
LEAF_NODE	319:16	319:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	319:16	319:16	5	td = & tif -> tif_dir
ASSIGN	319:16	319:21	6	td = & tif -> tif_dir
LVAL	319:16	319:16	7	td
NAME	319:16	319:16	8	td
LEAF_NODE	319:16	319:16	9	td
ASSIGN_OP	319:19	319:19	7	=
LEAF_NODE	319:19	319:19	8	=
RVAL	319:21	319:21	7	& tif -> tif_dir
UNARY_EXPR	319:21	319:22	8	& tif -> tif_dir
UNARY_OPERATOR	319:21	319:21	9	&
LEAF_NODE	319:21	319:21	10	&
FIELD	319:22	319:27	9	tif -> tif_dir
LEAF_NODE	319:22	319:22	10	tif
LEAF_NODE	319:25	319:25	10	->
LEAF_NODE	319:27	319:27	10	tif_dir
LEAF_NODE	319:34	319:34	4	;
SELECTION	321:1	322:2	3	
KEYWORD	321:1	321:1	4	if
LEAF_NODE	321:1	321:1	5	if
LEAF_NODE	321:4	321:4	4	(
CONDITION	321:5	321:5	4	! WRITECHECKSTRIPS ( tif , module )
EXPR	321:5	321:5	5	! WRITECHECKSTRIPS ( tif , module )
UNARY_EXPR	321:5	321:6	6	! WRITECHECKSTRIPS ( tif , module )
UNARY_OPERATOR	321:5	321:5	7	!
LEAF_NODE	321:5	321:5	8	!
FUNCTION_CALL	321:6	321:34	7	WRITECHECKSTRIPS ( tif , module )
CALLEE	321:6	321:6	8	WRITECHECKSTRIPS
LEAF_NODE	321:6	321:6	9	WRITECHECKSTRIPS
LEAF_NODE	321:22	321:22	8	(
ARGUMENT	321:23	321:23	8	tif
FIELD	321:23	321:23	9	tif
LEAF_NODE	321:23	321:23	10	tif
LEAF_NODE	321:26	321:26	8	,
ARGUMENT	321:28	321:28	8	module
FIELD	321:28	321:28	9	module
LEAF_NODE	321:28	321:28	10	module
LEAF_NODE	321:34	321:34	8	)
LEAF_NODE	321:35	321:35	4	)
STATEMENTS	322:2	322:2	4	
JUMP_STATEMENT	322:2	322:24	5	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	322:2	322:2	6	return
LEAF_NODE	322:2	322:2	7	return
DESTINATION	322:9	322:9	6	( ( tmsize_t ) - 1 )
EXPR	322:9	322:23	7	( ( tmsize_t ) - 1 )
LEAF_NODE	322:9	322:9	8	(
LEAF_NODE	322:10	322:10	8	(
TYPE_NAME	322:11	322:11	8	tmsize_t
LEAF_NODE	322:11	322:11	9	tmsize_t
LEAF_NODE	322:19	322:19	8	)
UNARY_EXPR	322:21	322:22	8	- 1
UNARY_OPERATOR	322:21	322:21	9	-
LEAF_NODE	322:21	322:21	10	-
FIELD	322:22	322:22	9	1
LEAF_NODE	322:22	322:22	10	1
LEAF_NODE	322:23	322:23	8	)
LEAF_NODE	322:24	322:24	6	;
SELECTION	332:1	332:30	3	
KEYWORD	332:1	332:1	4	if
LEAF_NODE	332:1	332:1	5	if
LEAF_NODE	332:4	332:4	4	(
CONDITION	332:5	332:5	4	strip >= td -> td_nstrips
EXPR	332:5	332:14	5	strip >= td -> td_nstrips
FIELD	332:5	332:5	6	strip
LEAF_NODE	332:5	332:5	7	strip
REL_OPERATOR	332:11	332:11	6	>=
LEAF_NODE	332:11	332:11	7	>=
FIELD	332:14	332:18	6	td -> td_nstrips
LEAF_NODE	332:14	332:14	7	td
LEAF_NODE	332:16	332:16	7	->
LEAF_NODE	332:18	332:18	7	td_nstrips
LEAF_NODE	332:28	332:28	4	)
STATEMENTS	332:30	348:1	4	
LEAF_NODE	332:30	332:30	5	{
STATEMENTS	333:2	346:2	5	
SELECTION	333:2	333:52	6	
KEYWORD	333:2	333:2	7	if
LEAF_NODE	333:2	333:2	8	if
LEAF_NODE	333:5	333:5	7	(
CONDITION	333:6	333:6	7	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	333:6	333:29	8	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	333:6	333:10	9	td -> td_planarconfig
LEAF_NODE	333:6	333:6	10	td
LEAF_NODE	333:8	333:8	10	->
LEAF_NODE	333:10	333:10	10	td_planarconfig
EQ_OPERATOR	333:26	333:26	9	==
LEAF_NODE	333:26	333:26	10	==
FIELD	333:29	333:29	9	PLANARCONFIG_SEPARATE
LEAF_NODE	333:29	333:29	10	PLANARCONFIG_SEPARATE
LEAF_NODE	333:50	333:50	7	)
STATEMENTS	333:52	337:2	7	
LEAF_NODE	333:52	333:52	8	{
STATEMENTS	334:3	336:3	8	
EXPR_STATEMENT	334:3	335:65	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not grow image by strips when using separate planes" ) ;
EXPR	334:3	334:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not grow image by strips when using separate planes" )
FUNCTION_CALL	334:3	335:64	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not grow image by strips when using separate planes" )
CALLEE	334:3	334:3	12	TIFFErrorExt
LEAF_NODE	334:3	334:3	13	TIFFErrorExt
LEAF_NODE	334:15	334:15	12	(
ARGUMENT	334:16	334:16	12	tif -> tif_clientdata
FIELD	334:16	334:21	13	tif -> tif_clientdata
LEAF_NODE	334:16	334:16	14	tif
LEAF_NODE	334:19	334:19	14	->
LEAF_NODE	334:21	334:21	14	tif_clientdata
LEAF_NODE	334:35	334:35	12	,
ARGUMENT	334:37	334:37	12	module
FIELD	334:37	334:37	13	module
LEAF_NODE	334:37	334:37	14	module
LEAF_NODE	334:43	334:43	12	,
ARGUMENT	335:7	335:7	12	"Can not grow image by strips when using separate planes"
FIELD	335:7	335:7	13	"Can not grow image by strips when using separate planes"
LEAF_NODE	335:7	335:7	14	"Can not grow image by strips when using separate planes"
LEAF_NODE	335:64	335:64	12	)
LEAF_NODE	335:65	335:65	10	;
JUMP_STATEMENT	336:3	336:25	9	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	336:3	336:3	10	return
LEAF_NODE	336:3	336:3	11	return
DESTINATION	336:10	336:10	10	( ( tmsize_t ) - 1 )
EXPR	336:10	336:24	11	( ( tmsize_t ) - 1 )
LEAF_NODE	336:10	336:10	12	(
LEAF_NODE	336:11	336:11	12	(
TYPE_NAME	336:12	336:12	12	tmsize_t
LEAF_NODE	336:12	336:12	13	tmsize_t
LEAF_NODE	336:20	336:20	12	)
UNARY_EXPR	336:22	336:23	12	- 1
UNARY_OPERATOR	336:22	336:22	13	-
LEAF_NODE	336:22	336:22	14	-
FIELD	336:23	336:23	13	1
LEAF_NODE	336:23	336:23	14	1
LEAF_NODE	336:24	336:24	12	)
LEAF_NODE	336:25	336:25	10	;
LEAF_NODE	337:2	337:2	8	}
SELECTION	343:2	344:3	6	
KEYWORD	343:2	343:2	7	if
LEAF_NODE	343:2	343:2	8	if
LEAF_NODE	343:5	343:5	7	(
CONDITION	343:6	343:6	7	strip >= td -> td_stripsperimage
EXPR	343:6	343:15	8	strip >= td -> td_stripsperimage
FIELD	343:6	343:6	9	strip
LEAF_NODE	343:6	343:6	10	strip
REL_OPERATOR	343:12	343:12	9	>=
LEAF_NODE	343:12	343:12	10	>=
FIELD	343:15	343:19	9	td -> td_stripsperimage
LEAF_NODE	343:15	343:15	10	td
LEAF_NODE	343:17	343:17	10	->
LEAF_NODE	343:19	343:19	10	td_stripsperimage
LEAF_NODE	343:36	343:36	7	)
STATEMENTS	344:3	344:3	7	
EXPR_STATEMENT	344:3	345:61	8	td -> td_stripsperimage = TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip ) ;
EXPR	344:3	344:3	9	td -> td_stripsperimage = TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
ASSIGN	344:3	345:7	10	td -> td_stripsperimage = TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
LVAL	344:3	344:3	11	td -> td_stripsperimage
FIELD	344:3	344:7	12	td -> td_stripsperimage
LEAF_NODE	344:3	344:3	13	td
LEAF_NODE	344:5	344:5	13	->
LEAF_NODE	344:7	344:7	13	td_stripsperimage
ASSIGN_OP	344:25	344:25	11	=
LEAF_NODE	344:25	344:25	12	=
RVAL	345:7	345:7	11	TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
FUNCTION_CALL	345:7	345:60	12	TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
CALLEE	345:7	345:7	13	TIFFhowmany_32
LEAF_NODE	345:7	345:7	14	TIFFhowmany_32
LEAF_NODE	345:21	345:21	13	(
ARGUMENT	345:22	345:22	13	td -> td_imagelength
FIELD	345:22	345:26	14	td -> td_imagelength
LEAF_NODE	345:22	345:22	15	td
LEAF_NODE	345:24	345:24	15	->
LEAF_NODE	345:26	345:26	15	td_imagelength
LEAF_NODE	345:40	345:40	13	,
ARGUMENT	345:41	345:41	13	td -> td_rowsperstrip
FIELD	345:41	345:45	14	td -> td_rowsperstrip
LEAF_NODE	345:41	345:41	15	td
LEAF_NODE	345:43	345:43	15	->
LEAF_NODE	345:45	345:45	15	td_rowsperstrip
LEAF_NODE	345:60	345:60	13	)
LEAF_NODE	345:61	345:61	9	;
SELECTION	346:2	347:3	6	
KEYWORD	346:2	346:2	7	if
LEAF_NODE	346:2	346:2	8	if
LEAF_NODE	346:5	346:5	7	(
CONDITION	346:6	346:6	7	! TIFFGrowStrips ( tif , 1 , module )
EXPR	346:6	346:6	8	! TIFFGrowStrips ( tif , 1 , module )
UNARY_EXPR	346:6	346:7	9	! TIFFGrowStrips ( tif , 1 , module )
UNARY_OPERATOR	346:6	346:6	10	!
LEAF_NODE	346:6	346:6	11	!
FUNCTION_CALL	346:7	346:36	10	TIFFGrowStrips ( tif , 1 , module )
CALLEE	346:7	346:7	11	TIFFGrowStrips
LEAF_NODE	346:7	346:7	12	TIFFGrowStrips
LEAF_NODE	346:21	346:21	11	(
ARGUMENT	346:22	346:22	11	tif
FIELD	346:22	346:22	12	tif
LEAF_NODE	346:22	346:22	13	tif
LEAF_NODE	346:25	346:25	11	,
ARGUMENT	346:27	346:27	11	1
FIELD	346:27	346:27	12	1
LEAF_NODE	346:27	346:27	13	1
LEAF_NODE	346:28	346:28	11	,
ARGUMENT	346:30	346:30	11	module
FIELD	346:30	346:30	12	module
LEAF_NODE	346:30	346:30	13	module
LEAF_NODE	346:36	346:36	11	)
LEAF_NODE	346:37	346:37	7	)
STATEMENTS	347:3	347:3	7	
JUMP_STATEMENT	347:3	347:25	8	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	347:3	347:3	9	return
LEAF_NODE	347:3	347:3	10	return
DESTINATION	347:10	347:10	9	( ( tmsize_t ) - 1 )
EXPR	347:10	347:24	10	( ( tmsize_t ) - 1 )
LEAF_NODE	347:10	347:10	11	(
LEAF_NODE	347:11	347:11	11	(
TYPE_NAME	347:12	347:12	11	tmsize_t
LEAF_NODE	347:12	347:12	12	tmsize_t
LEAF_NODE	347:20	347:20	11	)
UNARY_EXPR	347:22	347:23	11	- 1
UNARY_OPERATOR	347:22	347:22	12	-
LEAF_NODE	347:22	347:22	13	-
FIELD	347:23	347:23	12	1
LEAF_NODE	347:23	347:23	13	1
LEAF_NODE	347:24	347:24	11	)
LEAF_NODE	347:25	347:25	9	;
LEAF_NODE	348:1	348:1	5	}
EXPR_STATEMENT	349:1	349:26	3	tif -> tif_curstrip = strip ;
EXPR	349:1	349:1	4	tif -> tif_curstrip = strip
ASSIGN	349:1	349:21	5	tif -> tif_curstrip = strip
LVAL	349:1	349:1	6	tif -> tif_curstrip
FIELD	349:1	349:6	7	tif -> tif_curstrip
LEAF_NODE	349:1	349:1	8	tif
LEAF_NODE	349:4	349:4	8	->
LEAF_NODE	349:6	349:6	8	tif_curstrip
ASSIGN_OP	349:19	349:19	6	=
LEAF_NODE	349:19	349:19	7	=
RVAL	349:21	349:21	6	strip
FIELD	349:21	349:21	7	strip
LEAF_NODE	349:21	349:21	8	strip
LEAF_NODE	349:26	349:26	4	;
SELECTION	350:8	350:40	3	
KEYWORD	350:8	350:8	4	if
LEAF_NODE	350:8	350:8	5	if
LEAF_NODE	350:11	350:11	4	(
CONDITION	350:12	350:12	4	td -> td_stripsperimage == 0
EXPR	350:12	350:37	5	td -> td_stripsperimage == 0
FIELD	350:12	350:16	6	td -> td_stripsperimage
LEAF_NODE	350:12	350:12	7	td
LEAF_NODE	350:14	350:14	7	->
LEAF_NODE	350:16	350:16	7	td_stripsperimage
EQ_OPERATOR	350:34	350:34	6	==
LEAF_NODE	350:34	350:34	7	==
FIELD	350:37	350:37	6	0
LEAF_NODE	350:37	350:37	7	0
LEAF_NODE	350:38	350:38	4	)
STATEMENTS	350:40	353:8	4	
LEAF_NODE	350:40	350:40	5	{
STATEMENTS	351:16	352:16	5	
EXPR_STATEMENT	351:16	351:81	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero strips per image" ) ;
EXPR	351:16	351:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero strips per image" )
FUNCTION_CALL	351:16	351:80	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero strips per image" )
CALLEE	351:16	351:16	9	TIFFErrorExt
LEAF_NODE	351:16	351:16	10	TIFFErrorExt
LEAF_NODE	351:28	351:28	9	(
ARGUMENT	351:29	351:29	9	tif -> tif_clientdata
FIELD	351:29	351:34	10	tif -> tif_clientdata
LEAF_NODE	351:29	351:29	11	tif
LEAF_NODE	351:32	351:32	11	->
LEAF_NODE	351:34	351:34	11	tif_clientdata
LEAF_NODE	351:48	351:48	9	,
ARGUMENT	351:50	351:50	9	module
FIELD	351:50	351:50	10	module
LEAF_NODE	351:50	351:50	11	module
LEAF_NODE	351:56	351:56	9	,
ARGUMENT	351:57	351:57	9	"Zero strips per image"
FIELD	351:57	351:57	10	"Zero strips per image"
LEAF_NODE	351:57	351:57	11	"Zero strips per image"
LEAF_NODE	351:80	351:80	9	)
LEAF_NODE	351:81	351:81	7	;
JUMP_STATEMENT	352:16	352:38	6	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	352:16	352:16	7	return
LEAF_NODE	352:16	352:16	8	return
DESTINATION	352:23	352:23	7	( ( tmsize_t ) - 1 )
EXPR	352:23	352:37	8	( ( tmsize_t ) - 1 )
LEAF_NODE	352:23	352:23	9	(
LEAF_NODE	352:24	352:24	9	(
TYPE_NAME	352:25	352:25	9	tmsize_t
LEAF_NODE	352:25	352:25	10	tmsize_t
LEAF_NODE	352:33	352:33	9	)
UNARY_EXPR	352:35	352:36	9	- 1
UNARY_OPERATOR	352:35	352:35	10	-
LEAF_NODE	352:35	352:35	11	-
FIELD	352:36	352:36	10	1
LEAF_NODE	352:36	352:36	11	1
LEAF_NODE	352:37	352:37	9	)
LEAF_NODE	352:38	352:38	7	;
LEAF_NODE	353:8	353:8	5	}
EXPR_STATEMENT	354:1	354:69	3	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip ;
EXPR	354:1	354:1	4	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
ASSIGN	354:1	354:16	5	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
LVAL	354:1	354:1	6	tif -> tif_row
FIELD	354:1	354:6	7	tif -> tif_row
LEAF_NODE	354:1	354:1	8	tif
LEAF_NODE	354:4	354:4	8	->
LEAF_NODE	354:6	354:6	8	tif_row
ASSIGN_OP	354:14	354:14	6	=
LEAF_NODE	354:14	354:14	7	=
RVAL	354:16	354:50	6	( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
LEAF_NODE	354:16	354:16	7	(
FIELD	354:17	354:17	7	strip
LEAF_NODE	354:17	354:17	8	strip
LEAF_NODE	354:23	354:23	7	%
FIELD	354:25	354:29	7	td -> td_stripsperimage
LEAF_NODE	354:25	354:25	8	td
LEAF_NODE	354:27	354:27	8	->
LEAF_NODE	354:29	354:29	8	td_stripsperimage
LEAF_NODE	354:46	354:46	7	)
LEAF_NODE	354:48	354:48	7	*
FIELD	354:50	354:54	7	td -> td_rowsperstrip
LEAF_NODE	354:50	354:50	8	td
LEAF_NODE	354:52	354:52	8	->
LEAF_NODE	354:54	354:54	8	td_rowsperstrip
LEAF_NODE	354:69	354:69	4	;
JUMP_STATEMENT	355:1	356:24	3	return ( TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc ) ? cc : ( tmsize_t ) - 1 ) ;
KEYWORD	355:1	355:1	4	return
LEAF_NODE	355:1	355:1	5	return
DESTINATION	355:8	355:8	4	( TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc ) ? cc : ( tmsize_t ) - 1 )
EXPR	355:8	356:23	5	( TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc ) ? cc : ( tmsize_t ) - 1 )
LEAF_NODE	355:8	355:8	6	(
COND_EXPR	355:9	356:21	6	TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc ) ? cc : ( tmsize_t ) - 1
CONDITION	355:9	355:9	7	TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc )
FUNCTION_CALL	355:9	355:56	8	TIFFAppendToStrip ( tif , strip , ( uint8 * ) data , cc )
CALLEE	355:9	355:9	9	TIFFAppendToStrip
LEAF_NODE	355:9	355:9	10	TIFFAppendToStrip
LEAF_NODE	355:26	355:26	9	(
ARGUMENT	355:27	355:27	9	tif
FIELD	355:27	355:27	10	tif
LEAF_NODE	355:27	355:27	11	tif
LEAF_NODE	355:30	355:30	9	,
ARGUMENT	355:32	355:32	9	strip
FIELD	355:32	355:32	10	strip
LEAF_NODE	355:32	355:32	11	strip
LEAF_NODE	355:37	355:37	9	,
ARGUMENT	355:39	355:48	9	( uint8 * ) data
LEAF_NODE	355:39	355:39	10	(
TYPE_NAME	355:40	355:40	10	uint8
LEAF_NODE	355:40	355:40	11	uint8
LEAF_NODE	355:45	355:45	10	*
LEAF_NODE	355:46	355:46	10	)
FIELD	355:48	355:48	10	data
LEAF_NODE	355:48	355:48	11	data
LEAF_NODE	355:52	355:52	9	,
ARGUMENT	355:54	355:54	9	cc
FIELD	355:54	355:54	10	cc
LEAF_NODE	355:54	355:54	11	cc
LEAF_NODE	355:56	355:56	9	)
LEAF_NODE	355:58	355:58	7	?
EXPR	356:5	356:5	7	cc
FIELD	356:5	356:5	8	cc
LEAF_NODE	356:5	356:5	9	cc
LEAF_NODE	356:8	356:8	7	:
LEAF_NODE	356:10	356:10	7	(
TYPE_NAME	356:11	356:11	7	tmsize_t
LEAF_NODE	356:11	356:11	8	tmsize_t
LEAF_NODE	356:19	356:19	7	)
UNARY_EXPR	356:21	356:22	7	- 1
UNARY_OPERATOR	356:21	356:21	8	-
LEAF_NODE	356:21	356:21	9	-
FIELD	356:22	356:22	8	1
LEAF_NODE	356:22	356:22	9	1
LEAF_NODE	356:23	356:23	6	)
LEAF_NODE	356:24	356:24	4	;
LEAF_NODE	357:0	357:0	2	}
FUNCTION_DEF	363:0	376:0	1	
RETURN_TYPE	363:0	363:0	2	tmsize_t
TYPE_NAME	363:0	363:0	3	tmsize_t
LEAF_NODE	363:0	363:0	4	tmsize_t
FUNCTION_NAME	364:0	364:0	2	TIFFWriteTile
LEAF_NODE	364:0	364:0	3	TIFFWriteTile
PARAMETER_LIST	364:13	364:74	2	( TIFF * tif , void * buf , uint32 x , uint32 y , uint32 z , uint16 s )
LEAF_NODE	364:13	364:13	3	(
PARAMETER_DECL	364:14	364:20	3	TIFF * tif
TYPE	364:14	364:18	4	TIFF *
TYPE_NAME	364:14	364:14	5	TIFF
LEAF_NODE	364:14	364:14	6	TIFF
POINTER	364:18	364:18	5	*
LEAF_NODE	364:18	364:18	6	*
NAME	364:20	364:20	4	tif
LEAF_NODE	364:20	364:20	5	tif
LEAF_NODE	364:23	364:23	3	,
PARAMETER_DECL	364:25	364:31	3	void * buf
TYPE	364:25	364:29	4	void *
TYPE_NAME	364:25	364:25	5	void
LEAF_NODE	364:25	364:25	6	void
POINTER	364:29	364:29	5	*
LEAF_NODE	364:29	364:29	6	*
NAME	364:31	364:31	4	buf
LEAF_NODE	364:31	364:31	5	buf
LEAF_NODE	364:34	364:34	3	,
PARAMETER_DECL	364:36	364:43	3	uint32 x
TYPE	364:36	364:36	4	uint32
TYPE_NAME	364:36	364:36	5	uint32
LEAF_NODE	364:36	364:36	6	uint32
NAME	364:43	364:43	4	x
LEAF_NODE	364:43	364:43	5	x
LEAF_NODE	364:44	364:44	3	,
PARAMETER_DECL	364:46	364:53	3	uint32 y
TYPE	364:46	364:46	4	uint32
TYPE_NAME	364:46	364:46	5	uint32
LEAF_NODE	364:46	364:46	6	uint32
NAME	364:53	364:53	4	y
LEAF_NODE	364:53	364:53	5	y
LEAF_NODE	364:54	364:54	3	,
PARAMETER_DECL	364:56	364:63	3	uint32 z
TYPE	364:56	364:56	4	uint32
TYPE_NAME	364:56	364:56	5	uint32
LEAF_NODE	364:56	364:56	6	uint32
NAME	364:63	364:63	4	z
LEAF_NODE	364:63	364:63	5	z
LEAF_NODE	364:64	364:64	3	,
PARAMETER_DECL	364:66	364:73	3	uint16 s
TYPE	364:66	364:66	4	uint16
TYPE_NAME	364:66	364:66	5	uint16
LEAF_NODE	364:66	364:66	6	uint16
NAME	364:73	364:73	4	s
LEAF_NODE	364:73	364:73	5	s
LEAF_NODE	364:74	364:74	3	)
LEAF_NODE	365:0	365:0	2	{
STATEMENTS	366:1	374:1	2	
SELECTION	366:1	367:2	3	
KEYWORD	366:1	366:1	4	if
LEAF_NODE	366:1	366:1	5	if
LEAF_NODE	366:4	366:4	4	(
CONDITION	366:5	366:5	4	! TIFFCheckTile ( tif , x , y , z , s )
EXPR	366:5	366:5	5	! TIFFCheckTile ( tif , x , y , z , s )
UNARY_EXPR	366:5	366:6	6	! TIFFCheckTile ( tif , x , y , z , s )
UNARY_OPERATOR	366:5	366:5	7	!
LEAF_NODE	366:5	366:5	8	!
FUNCTION_CALL	366:6	366:35	7	TIFFCheckTile ( tif , x , y , z , s )
CALLEE	366:6	366:6	8	TIFFCheckTile
LEAF_NODE	366:6	366:6	9	TIFFCheckTile
LEAF_NODE	366:19	366:19	8	(
ARGUMENT	366:20	366:20	8	tif
FIELD	366:20	366:20	9	tif
LEAF_NODE	366:20	366:20	10	tif
LEAF_NODE	366:23	366:23	8	,
ARGUMENT	366:25	366:25	8	x
FIELD	366:25	366:25	9	x
LEAF_NODE	366:25	366:25	10	x
LEAF_NODE	366:26	366:26	8	,
ARGUMENT	366:28	366:28	8	y
FIELD	366:28	366:28	9	y
LEAF_NODE	366:28	366:28	10	y
LEAF_NODE	366:29	366:29	8	,
ARGUMENT	366:31	366:31	8	z
FIELD	366:31	366:31	9	z
LEAF_NODE	366:31	366:31	10	z
LEAF_NODE	366:32	366:32	8	,
ARGUMENT	366:34	366:34	8	s
FIELD	366:34	366:34	9	s
LEAF_NODE	366:34	366:34	10	s
LEAF_NODE	366:35	366:35	8	)
LEAF_NODE	366:36	366:36	4	)
STATEMENTS	367:2	367:2	4	
JUMP_STATEMENT	367:2	367:25	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	367:2	367:2	6	return
LEAF_NODE	367:2	367:2	7	return
DESTINATION	367:9	367:9	6	( ( tmsize_t ) ( - 1 ) )
EXPR	367:9	367:24	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	367:9	367:9	8	(
LEAF_NODE	367:10	367:10	8	(
TYPE_NAME	367:11	367:11	8	tmsize_t
LEAF_NODE	367:11	367:11	9	tmsize_t
LEAF_NODE	367:19	367:19	8	)
LEAF_NODE	367:20	367:20	8	(
UNARY_EXPR	367:21	367:22	8	- 1
UNARY_OPERATOR	367:21	367:21	9	-
LEAF_NODE	367:21	367:21	10	-
FIELD	367:22	367:22	9	1
LEAF_NODE	367:22	367:22	10	1
LEAF_NODE	367:23	367:23	8	)
LEAF_NODE	367:24	367:24	8	)
LEAF_NODE	367:25	367:25	6	;
JUMP_STATEMENT	374:1	375:60	3	return ( TIFFWriteEncodedTile ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , ( tmsize_t ) ( - 1 ) ) ) ;
KEYWORD	374:1	374:1	4	return
LEAF_NODE	374:1	374:1	5	return
DESTINATION	374:8	374:8	4	( TIFFWriteEncodedTile ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , ( tmsize_t ) ( - 1 ) ) )
EXPR	374:8	375:59	5	( TIFFWriteEncodedTile ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , ( tmsize_t ) ( - 1 ) ) )
LEAF_NODE	374:8	374:8	6	(
FUNCTION_CALL	374:9	375:58	6	TIFFWriteEncodedTile ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , ( tmsize_t ) ( - 1 ) )
CALLEE	374:9	374:9	7	TIFFWriteEncodedTile
LEAF_NODE	374:9	374:9	8	TIFFWriteEncodedTile
LEAF_NODE	374:29	374:29	7	(
ARGUMENT	374:30	374:30	7	tif
FIELD	374:30	374:30	8	tif
LEAF_NODE	374:30	374:30	9	tif
LEAF_NODE	374:33	374:33	7	,
ARGUMENT	375:5	375:5	7	TIFFComputeTile ( tif , x , y , z , s )
FUNCTION_CALL	375:5	375:36	8	TIFFComputeTile ( tif , x , y , z , s )
CALLEE	375:5	375:5	9	TIFFComputeTile
LEAF_NODE	375:5	375:5	10	TIFFComputeTile
LEAF_NODE	375:20	375:20	9	(
ARGUMENT	375:21	375:21	9	tif
FIELD	375:21	375:21	10	tif
LEAF_NODE	375:21	375:21	11	tif
LEAF_NODE	375:24	375:24	9	,
ARGUMENT	375:26	375:26	9	x
FIELD	375:26	375:26	10	x
LEAF_NODE	375:26	375:26	11	x
LEAF_NODE	375:27	375:27	9	,
ARGUMENT	375:29	375:29	9	y
FIELD	375:29	375:29	10	y
LEAF_NODE	375:29	375:29	11	y
LEAF_NODE	375:30	375:30	9	,
ARGUMENT	375:32	375:32	9	z
FIELD	375:32	375:32	10	z
LEAF_NODE	375:32	375:32	11	z
LEAF_NODE	375:33	375:33	9	,
ARGUMENT	375:35	375:35	9	s
FIELD	375:35	375:35	10	s
LEAF_NODE	375:35	375:35	11	s
LEAF_NODE	375:36	375:36	9	)
LEAF_NODE	375:37	375:37	7	,
ARGUMENT	375:39	375:39	7	buf
FIELD	375:39	375:39	8	buf
LEAF_NODE	375:39	375:39	9	buf
LEAF_NODE	375:42	375:42	7	,
ARGUMENT	375:44	375:57	7	( tmsize_t ) ( - 1 )
LEAF_NODE	375:44	375:44	8	(
TYPE_NAME	375:45	375:45	8	tmsize_t
LEAF_NODE	375:45	375:45	9	tmsize_t
LEAF_NODE	375:53	375:53	8	)
LEAF_NODE	375:54	375:54	8	(
UNARY_EXPR	375:55	375:56	8	- 1
UNARY_OPERATOR	375:55	375:55	9	-
LEAF_NODE	375:55	375:55	10	-
FIELD	375:56	375:56	9	1
LEAF_NODE	375:56	375:56	10	1
LEAF_NODE	375:57	375:57	8	)
LEAF_NODE	375:58	375:58	7	)
LEAF_NODE	375:59	375:59	6	)
LEAF_NODE	375:60	375:60	4	;
LEAF_NODE	376:0	376:0	2	}
FUNCTION_DEF	390:0	491:0	1	
RETURN_TYPE	390:0	390:0	2	tmsize_t
TYPE_NAME	390:0	390:0	3	tmsize_t
LEAF_NODE	390:0	390:0	4	tmsize_t
FUNCTION_NAME	391:0	391:0	2	TIFFWriteEncodedTile
LEAF_NODE	391:0	391:0	3	TIFFWriteEncodedTile
PARAMETER_LIST	391:20	391:68	2	( TIFF * tif , uint32 tile , void * data , tmsize_t cc )
LEAF_NODE	391:20	391:20	3	(
PARAMETER_DECL	391:21	391:27	3	TIFF * tif
TYPE	391:21	391:25	4	TIFF *
TYPE_NAME	391:21	391:21	5	TIFF
LEAF_NODE	391:21	391:21	6	TIFF
POINTER	391:25	391:25	5	*
LEAF_NODE	391:25	391:25	6	*
NAME	391:27	391:27	4	tif
LEAF_NODE	391:27	391:27	5	tif
LEAF_NODE	391:30	391:30	3	,
PARAMETER_DECL	391:32	391:39	3	uint32 tile
TYPE	391:32	391:32	4	uint32
TYPE_NAME	391:32	391:32	5	uint32
LEAF_NODE	391:32	391:32	6	uint32
NAME	391:39	391:39	4	tile
LEAF_NODE	391:39	391:39	5	tile
LEAF_NODE	391:43	391:43	3	,
PARAMETER_DECL	391:45	391:51	3	void * data
TYPE	391:45	391:49	4	void *
TYPE_NAME	391:45	391:45	5	void
LEAF_NODE	391:45	391:45	6	void
POINTER	391:49	391:49	5	*
LEAF_NODE	391:49	391:49	6	*
NAME	391:51	391:51	4	data
LEAF_NODE	391:51	391:51	5	data
LEAF_NODE	391:55	391:55	3	,
PARAMETER_DECL	391:57	391:66	3	tmsize_t cc
TYPE	391:57	391:57	4	tmsize_t
TYPE_NAME	391:57	391:57	5	tmsize_t
LEAF_NODE	391:57	391:57	6	tmsize_t
NAME	391:66	391:66	4	cc
LEAF_NODE	391:66	391:66	5	cc
LEAF_NODE	391:68	391:68	3	)
LEAF_NODE	392:0	392:0	2	{
STATEMENTS	393:1	490:15	2	
LEAF_NODE	393:1	393:1	3	static
SIMPLE_DECL	393:8	393:52	3	const char [ ] module ; module = "TIFFWriteEncodedTile" ;
VAR_DECL	393:8	393:19	4	const char [ ] module ; module = "TIFFWriteEncodedTile"
TYPE	393:8	393:25	5	const char [ ]
TYPE_NAME	393:8	393:14	6	const char
LEAF_NODE	393:8	393:8	7	const
LEAF_NODE	393:14	393:14	7	char
TYPE_SUFFIX	393:25	393:26	6	[ ]
LEAF_NODE	393:25	393:25	7	[
LEAF_NODE	393:26	393:26	7	]
NAME	393:19	393:19	5	module
LEAF_NODE	393:19	393:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	393:19	393:19	5	module = "TIFFWriteEncodedTile"
ASSIGN	393:19	393:30	6	module = "TIFFWriteEncodedTile"
LVAL	393:19	393:19	7	module
NAME	393:19	393:19	8	module
LEAF_NODE	393:19	393:19	9	module
ASSIGN_OP	393:28	393:28	7	=
LEAF_NODE	393:28	393:28	8	=
RVAL	393:30	393:30	7	"TIFFWriteEncodedTile"
FIELD	393:30	393:30	8	"TIFFWriteEncodedTile"
LEAF_NODE	393:30	393:30	9	"TIFFWriteEncodedTile"
LEAF_NODE	393:52	393:52	4	;
SIMPLE_DECL	394:1	394:18	3	TIFFDirectory * td ;
VAR_DECL	394:1	394:16	4	TIFFDirectory * td
TYPE	394:1	394:15	5	TIFFDirectory *
TYPE_NAME	394:1	394:1	6	TIFFDirectory
LEAF_NODE	394:1	394:1	7	TIFFDirectory
POINTER	394:15	394:15	6	*
LEAF_NODE	394:15	394:15	7	*
NAME	394:16	394:16	5	td
LEAF_NODE	394:16	394:16	6	td
LEAF_NODE	394:18	394:18	4	;
SIMPLE_DECL	395:1	395:14	3	uint16 sample ;
VAR_DECL	395:1	395:8	4	uint16 sample
TYPE	395:1	395:1	5	uint16
TYPE_NAME	395:1	395:1	6	uint16
LEAF_NODE	395:1	395:1	7	uint16
NAME	395:8	395:8	5	sample
LEAF_NODE	395:8	395:8	6	sample
LEAF_NODE	395:14	395:14	4	;
SIMPLE_DECL	396:8	396:24	3	uint32 howmany32 ;
VAR_DECL	396:8	396:15	4	uint32 howmany32
TYPE	396:8	396:8	5	uint32
TYPE_NAME	396:8	396:8	6	uint32
LEAF_NODE	396:8	396:8	7	uint32
NAME	396:15	396:15	5	howmany32
LEAF_NODE	396:15	396:15	6	howmany32
LEAF_NODE	396:24	396:24	4	;
SELECTION	398:1	399:2	3	
KEYWORD	398:1	398:1	4	if
LEAF_NODE	398:1	398:1	5	if
LEAF_NODE	398:4	398:4	4	(
CONDITION	398:5	398:5	4	! WRITECHECKTILES ( tif , module )
EXPR	398:5	398:5	5	! WRITECHECKTILES ( tif , module )
UNARY_EXPR	398:5	398:6	6	! WRITECHECKTILES ( tif , module )
UNARY_OPERATOR	398:5	398:5	7	!
LEAF_NODE	398:5	398:5	8	!
FUNCTION_CALL	398:6	398:33	7	WRITECHECKTILES ( tif , module )
CALLEE	398:6	398:6	8	WRITECHECKTILES
LEAF_NODE	398:6	398:6	9	WRITECHECKTILES
LEAF_NODE	398:21	398:21	8	(
ARGUMENT	398:22	398:22	8	tif
FIELD	398:22	398:22	9	tif
LEAF_NODE	398:22	398:22	10	tif
LEAF_NODE	398:25	398:25	8	,
ARGUMENT	398:27	398:27	8	module
FIELD	398:27	398:27	9	module
LEAF_NODE	398:27	398:27	10	module
LEAF_NODE	398:33	398:33	8	)
LEAF_NODE	398:34	398:34	4	)
STATEMENTS	399:2	399:2	4	
JUMP_STATEMENT	399:2	399:25	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	399:2	399:2	6	return
LEAF_NODE	399:2	399:2	7	return
DESTINATION	399:9	399:9	6	( ( tmsize_t ) ( - 1 ) )
EXPR	399:9	399:24	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	399:9	399:9	8	(
LEAF_NODE	399:10	399:10	8	(
TYPE_NAME	399:11	399:11	8	tmsize_t
LEAF_NODE	399:11	399:11	9	tmsize_t
LEAF_NODE	399:19	399:19	8	)
LEAF_NODE	399:20	399:20	8	(
UNARY_EXPR	399:21	399:22	8	- 1
UNARY_OPERATOR	399:21	399:21	9	-
LEAF_NODE	399:21	399:21	10	-
FIELD	399:22	399:22	9	1
LEAF_NODE	399:22	399:22	10	1
LEAF_NODE	399:23	399:23	8	)
LEAF_NODE	399:24	399:24	8	)
LEAF_NODE	399:25	399:25	6	;
EXPR_STATEMENT	400:1	400:19	3	td = & tif -> tif_dir ;
EXPR	400:1	400:1	4	td = & tif -> tif_dir
ASSIGN	400:1	400:6	5	td = & tif -> tif_dir
LVAL	400:1	400:1	6	td
FIELD	400:1	400:1	7	td
LEAF_NODE	400:1	400:1	8	td
ASSIGN_OP	400:4	400:4	6	=
LEAF_NODE	400:4	400:4	7	=
RVAL	400:6	400:6	6	& tif -> tif_dir
UNARY_EXPR	400:6	400:7	7	& tif -> tif_dir
UNARY_OPERATOR	400:6	400:6	8	&
LEAF_NODE	400:6	400:6	9	&
FIELD	400:7	400:12	8	tif -> tif_dir
LEAF_NODE	400:7	400:7	9	tif
LEAF_NODE	400:10	400:10	9	->
LEAF_NODE	400:12	400:12	9	tif_dir
LEAF_NODE	400:19	400:19	4	;
SELECTION	401:1	401:29	3	
KEYWORD	401:1	401:1	4	if
LEAF_NODE	401:1	401:1	5	if
LEAF_NODE	401:4	401:4	4	(
CONDITION	401:5	401:5	4	tile >= td -> td_nstrips
EXPR	401:5	401:13	5	tile >= td -> td_nstrips
FIELD	401:5	401:5	6	tile
LEAF_NODE	401:5	401:5	7	tile
REL_OPERATOR	401:10	401:10	6	>=
LEAF_NODE	401:10	401:10	7	>=
FIELD	401:13	401:17	6	td -> td_nstrips
LEAF_NODE	401:13	401:13	7	td
LEAF_NODE	401:15	401:15	7	->
LEAF_NODE	401:17	401:17	7	td_nstrips
LEAF_NODE	401:27	401:27	4	)
STATEMENTS	401:29	405:1	4	
LEAF_NODE	401:29	401:29	5	{
STATEMENTS	402:2	404:2	5	
EXPR_STATEMENT	402:2	403:59	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile %lu out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips ) ;
EXPR	402:2	402:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile %lu out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips )
FUNCTION_CALL	402:2	403:58	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile %lu out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips )
CALLEE	402:2	402:2	9	TIFFErrorExt
LEAF_NODE	402:2	402:2	10	TIFFErrorExt
LEAF_NODE	402:14	402:14	9	(
ARGUMENT	402:15	402:15	9	tif -> tif_clientdata
FIELD	402:15	402:20	10	tif -> tif_clientdata
LEAF_NODE	402:15	402:15	11	tif
LEAF_NODE	402:18	402:18	11	->
LEAF_NODE	402:20	402:20	11	tif_clientdata
LEAF_NODE	402:34	402:34	9	,
ARGUMENT	402:36	402:36	9	module
FIELD	402:36	402:36	10	module
LEAF_NODE	402:36	402:36	11	module
LEAF_NODE	402:42	402:42	9	,
ARGUMENT	402:44	402:44	9	"Tile %lu out of range, max %lu"
FIELD	402:44	402:44	10	"Tile %lu out of range, max %lu"
LEAF_NODE	402:44	402:44	11	"Tile %lu out of range, max %lu"
LEAF_NODE	402:76	402:76	9	,
ARGUMENT	403:6	403:22	9	( unsigned long ) tile
LEAF_NODE	403:6	403:6	10	(
TYPE_NAME	403:7	403:16	10	unsigned long
LEAF_NODE	403:7	403:7	11	unsigned
LEAF_NODE	403:16	403:16	11	long
LEAF_NODE	403:20	403:20	10	)
FIELD	403:22	403:22	10	tile
LEAF_NODE	403:22	403:22	11	tile
LEAF_NODE	403:26	403:26	9	,
ARGUMENT	403:28	403:44	9	( unsigned long ) td -> td_nstrips
LEAF_NODE	403:28	403:28	10	(
TYPE_NAME	403:29	403:38	10	unsigned long
LEAF_NODE	403:29	403:29	11	unsigned
LEAF_NODE	403:38	403:38	11	long
LEAF_NODE	403:42	403:42	10	)
FIELD	403:44	403:48	10	td -> td_nstrips
LEAF_NODE	403:44	403:44	11	td
LEAF_NODE	403:46	403:46	11	->
LEAF_NODE	403:48	403:48	11	td_nstrips
LEAF_NODE	403:58	403:58	9	)
LEAF_NODE	403:59	403:59	7	;
JUMP_STATEMENT	404:2	404:25	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	404:2	404:2	7	return
LEAF_NODE	404:2	404:2	8	return
DESTINATION	404:9	404:9	7	( ( tmsize_t ) ( - 1 ) )
EXPR	404:9	404:24	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	404:9	404:9	9	(
LEAF_NODE	404:10	404:10	9	(
TYPE_NAME	404:11	404:11	9	tmsize_t
LEAF_NODE	404:11	404:11	10	tmsize_t
LEAF_NODE	404:19	404:19	9	)
LEAF_NODE	404:20	404:20	9	(
UNARY_EXPR	404:21	404:22	9	- 1
UNARY_OPERATOR	404:21	404:21	10	-
LEAF_NODE	404:21	404:21	11	-
FIELD	404:22	404:22	10	1
LEAF_NODE	404:22	404:22	11	1
LEAF_NODE	404:23	404:23	9	)
LEAF_NODE	404:24	404:24	9	)
LEAF_NODE	404:25	404:25	7	;
LEAF_NODE	405:1	405:1	5	}
SELECTION	411:1	412:2	3	
KEYWORD	411:1	411:1	4	if
LEAF_NODE	411:1	411:1	5	if
LEAF_NODE	411:4	411:4	4	(
CONDITION	411:5	411:5	4	! BUFFERCHECK ( tif )
EXPR	411:5	411:5	5	! BUFFERCHECK ( tif )
UNARY_EXPR	411:5	411:6	6	! BUFFERCHECK ( tif )
UNARY_OPERATOR	411:5	411:5	7	!
LEAF_NODE	411:5	411:5	8	!
FUNCTION_CALL	411:6	411:21	7	BUFFERCHECK ( tif )
CALLEE	411:6	411:6	8	BUFFERCHECK
LEAF_NODE	411:6	411:6	9	BUFFERCHECK
LEAF_NODE	411:17	411:17	8	(
ARGUMENT	411:18	411:18	8	tif
FIELD	411:18	411:18	9	tif
LEAF_NODE	411:18	411:18	10	tif
LEAF_NODE	411:21	411:21	8	)
LEAF_NODE	411:22	411:22	4	)
STATEMENTS	412:2	412:2	4	
JUMP_STATEMENT	412:2	412:25	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	412:2	412:2	6	return
LEAF_NODE	412:2	412:2	7	return
DESTINATION	412:9	412:9	6	( ( tmsize_t ) ( - 1 ) )
EXPR	412:9	412:24	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	412:9	412:9	8	(
LEAF_NODE	412:10	412:10	8	(
TYPE_NAME	412:11	412:11	8	tmsize_t
LEAF_NODE	412:11	412:11	9	tmsize_t
LEAF_NODE	412:19	412:19	8	)
LEAF_NODE	412:20	412:20	8	(
UNARY_EXPR	412:21	412:22	8	- 1
UNARY_OPERATOR	412:21	412:21	9	-
LEAF_NODE	412:21	412:21	10	-
FIELD	412:22	412:22	9	1
LEAF_NODE	412:22	412:22	10	1
LEAF_NODE	412:23	412:23	8	)
LEAF_NODE	412:24	412:24	8	)
LEAF_NODE	412:25	412:25	6	;
EXPR_STATEMENT	414:8	414:40	3	tif -> tif_flags |= TIFF_BUF4WRITE ;
EXPR	414:8	414:8	4	tif -> tif_flags |= TIFF_BUF4WRITE
ASSIGN	414:8	414:26	5	tif -> tif_flags |= TIFF_BUF4WRITE
LVAL	414:8	414:8	6	tif -> tif_flags
FIELD	414:8	414:13	7	tif -> tif_flags
LEAF_NODE	414:8	414:8	8	tif
LEAF_NODE	414:11	414:11	8	->
LEAF_NODE	414:13	414:13	8	tif_flags
ASSIGN_OP	414:23	414:23	6	|=
LEAF_NODE	414:23	414:23	7	|=
RVAL	414:26	414:26	6	TIFF_BUF4WRITE
FIELD	414:26	414:26	7	TIFF_BUF4WRITE
LEAF_NODE	414:26	414:26	8	TIFF_BUF4WRITE
LEAF_NODE	414:40	414:40	4	;
EXPR_STATEMENT	415:1	415:24	3	tif -> tif_curtile = tile ;
EXPR	415:1	415:1	4	tif -> tif_curtile = tile
ASSIGN	415:1	415:20	5	tif -> tif_curtile = tile
LVAL	415:1	415:1	6	tif -> tif_curtile
FIELD	415:1	415:6	7	tif -> tif_curtile
LEAF_NODE	415:1	415:1	8	tif
LEAF_NODE	415:4	415:4	8	->
LEAF_NODE	415:6	415:6	8	tif_curtile
ASSIGN_OP	415:18	415:18	6	=
LEAF_NODE	415:18	415:18	7	=
RVAL	415:20	415:20	6	tile
FIELD	415:20	415:20	7	tile
LEAF_NODE	415:20	415:20	8	tile
LEAF_NODE	415:24	415:24	4	;
SELECTION	417:8	417:61	3	
KEYWORD	417:8	417:8	4	if
LEAF_NODE	417:8	417:8	5	if
LEAF_NODE	417:10	417:10	4	(
CONDITION	417:12	417:12	4	! _TIFFReserveLargeEnoughWriteBuffer ( tif , tile )
EXPR	417:12	417:12	5	! _TIFFReserveLargeEnoughWriteBuffer ( tif , tile )
UNARY_EXPR	417:12	417:13	6	! _TIFFReserveLargeEnoughWriteBuffer ( tif , tile )
UNARY_OPERATOR	417:12	417:12	7	!
LEAF_NODE	417:12	417:12	8	!
FUNCTION_CALL	417:13	417:57	7	_TIFFReserveLargeEnoughWriteBuffer ( tif , tile )
CALLEE	417:13	417:13	8	_TIFFReserveLargeEnoughWriteBuffer
LEAF_NODE	417:13	417:13	9	_TIFFReserveLargeEnoughWriteBuffer
LEAF_NODE	417:47	417:47	8	(
ARGUMENT	417:48	417:48	8	tif
FIELD	417:48	417:48	9	tif
LEAF_NODE	417:48	417:48	10	tif
LEAF_NODE	417:51	417:51	8	,
ARGUMENT	417:53	417:53	8	tile
FIELD	417:53	417:53	9	tile
LEAF_NODE	417:53	417:53	10	tile
LEAF_NODE	417:57	417:57	8	)
LEAF_NODE	417:59	417:59	4	)
STATEMENTS	417:61	419:8	4	
LEAF_NODE	417:61	417:61	5	{
STATEMENTS	418:12	418:12	5	
JUMP_STATEMENT	418:12	418:35	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	418:12	418:12	7	return
LEAF_NODE	418:12	418:12	8	return
DESTINATION	418:19	418:19	7	( ( tmsize_t ) ( - 1 ) )
EXPR	418:19	418:34	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	418:19	418:19	9	(
LEAF_NODE	418:20	418:20	9	(
TYPE_NAME	418:21	418:21	9	tmsize_t
LEAF_NODE	418:21	418:21	10	tmsize_t
LEAF_NODE	418:29	418:29	9	)
LEAF_NODE	418:30	418:30	9	(
UNARY_EXPR	418:31	418:32	9	- 1
UNARY_OPERATOR	418:31	418:31	10	-
LEAF_NODE	418:31	418:31	11	-
FIELD	418:32	418:32	10	1
LEAF_NODE	418:32	418:32	11	1
LEAF_NODE	418:33	418:33	9	)
LEAF_NODE	418:34	418:34	9	)
LEAF_NODE	418:35	418:35	7	;
LEAF_NODE	419:8	419:8	5	}
EXPR_STATEMENT	421:1	421:19	3	tif -> tif_rawcc = 0 ;
EXPR	421:1	421:1	4	tif -> tif_rawcc = 0
ASSIGN	421:1	421:18	5	tif -> tif_rawcc = 0
LVAL	421:1	421:1	6	tif -> tif_rawcc
FIELD	421:1	421:6	7	tif -> tif_rawcc
LEAF_NODE	421:1	421:1	8	tif
LEAF_NODE	421:4	421:4	8	->
LEAF_NODE	421:6	421:6	8	tif_rawcc
ASSIGN_OP	421:16	421:16	6	=
LEAF_NODE	421:16	421:16	7	=
RVAL	421:18	421:18	6	0
FIELD	421:18	421:18	7	0
LEAF_NODE	421:18	421:18	8	0
LEAF_NODE	421:19	421:19	4	;
EXPR_STATEMENT	422:1	422:34	3	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	422:1	422:1	4	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	422:1	422:18	5	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	422:1	422:1	6	tif -> tif_rawcp
FIELD	422:1	422:6	7	tif -> tif_rawcp
LEAF_NODE	422:1	422:1	8	tif
LEAF_NODE	422:4	422:4	8	->
LEAF_NODE	422:6	422:6	8	tif_rawcp
ASSIGN_OP	422:16	422:16	6	=
LEAF_NODE	422:16	422:16	7	=
RVAL	422:18	422:18	6	tif -> tif_rawdata
FIELD	422:18	422:23	7	tif -> tif_rawdata
LEAF_NODE	422:18	422:18	8	tif
LEAF_NODE	422:21	422:21	8	->
LEAF_NODE	422:23	422:23	8	tif_rawdata
LEAF_NODE	422:34	422:34	4	;
EXPR_STATEMENT	428:8	428:71	3	howmany32 = TIFFhowmany_32 ( td -> td_imagelength , td -> td_tilelength ) ;
EXPR	428:8	428:8	4	howmany32 = TIFFhowmany_32 ( td -> td_imagelength , td -> td_tilelength )
ASSIGN	428:8	428:18	5	howmany32 = TIFFhowmany_32 ( td -> td_imagelength , td -> td_tilelength )
LVAL	428:8	428:8	6	howmany32
FIELD	428:8	428:8	7	howmany32
LEAF_NODE	428:8	428:8	8	howmany32
ASSIGN_OP	428:17	428:17	6	=
LEAF_NODE	428:17	428:17	7	=
RVAL	428:18	428:18	6	TIFFhowmany_32 ( td -> td_imagelength , td -> td_tilelength )
FUNCTION_CALL	428:18	428:70	7	TIFFhowmany_32 ( td -> td_imagelength , td -> td_tilelength )
CALLEE	428:18	428:18	8	TIFFhowmany_32
LEAF_NODE	428:18	428:18	9	TIFFhowmany_32
LEAF_NODE	428:32	428:32	8	(
ARGUMENT	428:33	428:33	8	td -> td_imagelength
FIELD	428:33	428:37	9	td -> td_imagelength
LEAF_NODE	428:33	428:33	10	td
LEAF_NODE	428:35	428:35	10	->
LEAF_NODE	428:37	428:37	10	td_imagelength
LEAF_NODE	428:51	428:51	8	,
ARGUMENT	428:53	428:53	8	td -> td_tilelength
FIELD	428:53	428:57	9	td -> td_tilelength
LEAF_NODE	428:53	428:53	10	td
LEAF_NODE	428:55	428:55	10	->
LEAF_NODE	428:57	428:57	10	td_tilelength
LEAF_NODE	428:70	428:70	8	)
LEAF_NODE	428:71	428:71	4	;
SELECTION	429:8	429:28	3	
KEYWORD	429:8	429:8	4	if
LEAF_NODE	429:8	429:8	5	if
LEAF_NODE	429:11	429:11	4	(
CONDITION	429:12	429:12	4	howmany32 == 0
EXPR	429:12	429:25	5	howmany32 == 0
FIELD	429:12	429:12	6	howmany32
LEAF_NODE	429:12	429:12	7	howmany32
EQ_OPERATOR	429:22	429:22	6	==
LEAF_NODE	429:22	429:22	7	==
FIELD	429:25	429:25	6	0
LEAF_NODE	429:25	429:25	7	0
LEAF_NODE	429:26	429:26	4	)
STATEMENTS	429:28	432:8	4	
LEAF_NODE	429:28	429:28	5	{
STATEMENTS	430:17	431:16	5	
EXPR_STATEMENT	430:17	430:70	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" ) ;
EXPR	430:17	430:17	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" )
FUNCTION_CALL	430:17	430:69	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" )
CALLEE	430:17	430:17	9	TIFFErrorExt
LEAF_NODE	430:17	430:17	10	TIFFErrorExt
LEAF_NODE	430:29	430:29	9	(
ARGUMENT	430:30	430:30	9	tif -> tif_clientdata
FIELD	430:30	430:35	10	tif -> tif_clientdata
LEAF_NODE	430:30	430:30	11	tif
LEAF_NODE	430:33	430:33	11	->
LEAF_NODE	430:35	430:35	11	tif_clientdata
LEAF_NODE	430:49	430:49	9	,
ARGUMENT	430:50	430:50	9	module
FIELD	430:50	430:50	10	module
LEAF_NODE	430:50	430:50	11	module
LEAF_NODE	430:56	430:56	9	,
ARGUMENT	430:57	430:57	9	"Zero tiles"
FIELD	430:57	430:57	10	"Zero tiles"
LEAF_NODE	430:57	430:57	11	"Zero tiles"
LEAF_NODE	430:69	430:69	9	)
LEAF_NODE	430:70	430:70	7	;
JUMP_STATEMENT	431:16	431:39	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	431:16	431:16	7	return
LEAF_NODE	431:16	431:16	8	return
DESTINATION	431:23	431:23	7	( ( tmsize_t ) ( - 1 ) )
EXPR	431:23	431:38	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	431:23	431:23	9	(
LEAF_NODE	431:24	431:24	9	(
TYPE_NAME	431:25	431:25	9	tmsize_t
LEAF_NODE	431:25	431:25	10	tmsize_t
LEAF_NODE	431:33	431:33	9	)
LEAF_NODE	431:34	431:34	9	(
UNARY_EXPR	431:35	431:36	9	- 1
UNARY_OPERATOR	431:35	431:35	10	-
LEAF_NODE	431:35	431:35	11	-
FIELD	431:36	431:36	10	1
LEAF_NODE	431:36	431:36	11	1
LEAF_NODE	431:37	431:37	9	)
LEAF_NODE	431:38	431:38	9	)
LEAF_NODE	431:39	431:39	7	;
LEAF_NODE	432:8	432:8	5	}
EXPR_STATEMENT	433:1	433:54	3	tif -> tif_row = ( tile % howmany32 ) * td -> td_tilelength ;
EXPR	433:1	433:1	4	tif -> tif_row = ( tile % howmany32 ) * td -> td_tilelength
ASSIGN	433:1	433:16	5	tif -> tif_row = ( tile % howmany32 ) * td -> td_tilelength
LVAL	433:1	433:1	6	tif -> tif_row
FIELD	433:1	433:6	7	tif -> tif_row
LEAF_NODE	433:1	433:1	8	tif
LEAF_NODE	433:4	433:4	8	->
LEAF_NODE	433:6	433:6	8	tif_row
ASSIGN_OP	433:14	433:14	6	=
LEAF_NODE	433:14	433:14	7	=
RVAL	433:16	433:37	6	( tile % howmany32 ) * td -> td_tilelength
LEAF_NODE	433:16	433:16	7	(
FIELD	433:17	433:17	7	tile
LEAF_NODE	433:17	433:17	8	tile
LEAF_NODE	433:22	433:22	7	%
FIELD	433:24	433:24	7	howmany32
LEAF_NODE	433:24	433:24	8	howmany32
LEAF_NODE	433:33	433:33	7	)
LEAF_NODE	433:35	433:35	7	*
FIELD	433:37	433:41	7	td -> td_tilelength
LEAF_NODE	433:37	433:37	8	td
LEAF_NODE	433:39	433:39	8	->
LEAF_NODE	433:41	433:41	8	td_tilelength
LEAF_NODE	433:54	433:54	4	;
EXPR_STATEMENT	434:8	434:69	3	howmany32 = TIFFhowmany_32 ( td -> td_imagewidth , td -> td_tilewidth ) ;
EXPR	434:8	434:8	4	howmany32 = TIFFhowmany_32 ( td -> td_imagewidth , td -> td_tilewidth )
ASSIGN	434:8	434:18	5	howmany32 = TIFFhowmany_32 ( td -> td_imagewidth , td -> td_tilewidth )
LVAL	434:8	434:8	6	howmany32
FIELD	434:8	434:8	7	howmany32
LEAF_NODE	434:8	434:8	8	howmany32
ASSIGN_OP	434:17	434:17	6	=
LEAF_NODE	434:17	434:17	7	=
RVAL	434:18	434:18	6	TIFFhowmany_32 ( td -> td_imagewidth , td -> td_tilewidth )
FUNCTION_CALL	434:18	434:68	7	TIFFhowmany_32 ( td -> td_imagewidth , td -> td_tilewidth )
CALLEE	434:18	434:18	8	TIFFhowmany_32
LEAF_NODE	434:18	434:18	9	TIFFhowmany_32
LEAF_NODE	434:32	434:32	8	(
ARGUMENT	434:33	434:33	8	td -> td_imagewidth
FIELD	434:33	434:37	9	td -> td_imagewidth
LEAF_NODE	434:33	434:33	10	td
LEAF_NODE	434:35	434:35	10	->
LEAF_NODE	434:37	434:37	10	td_imagewidth
LEAF_NODE	434:50	434:50	8	,
ARGUMENT	434:52	434:52	8	td -> td_tilewidth
FIELD	434:52	434:56	9	td -> td_tilewidth
LEAF_NODE	434:52	434:52	10	td
LEAF_NODE	434:54	434:54	10	->
LEAF_NODE	434:56	434:56	10	td_tilewidth
LEAF_NODE	434:68	434:68	8	)
LEAF_NODE	434:69	434:69	4	;
SELECTION	435:8	435:28	3	
KEYWORD	435:8	435:8	4	if
LEAF_NODE	435:8	435:8	5	if
LEAF_NODE	435:11	435:11	4	(
CONDITION	435:12	435:12	4	howmany32 == 0
EXPR	435:12	435:25	5	howmany32 == 0
FIELD	435:12	435:12	6	howmany32
LEAF_NODE	435:12	435:12	7	howmany32
EQ_OPERATOR	435:22	435:22	6	==
LEAF_NODE	435:22	435:22	7	==
FIELD	435:25	435:25	6	0
LEAF_NODE	435:25	435:25	7	0
LEAF_NODE	435:26	435:26	4	)
STATEMENTS	435:28	438:8	4	
LEAF_NODE	435:28	435:28	5	{
STATEMENTS	436:17	437:16	5	
EXPR_STATEMENT	436:17	436:70	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" ) ;
EXPR	436:17	436:17	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" )
FUNCTION_CALL	436:17	436:69	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" )
CALLEE	436:17	436:17	9	TIFFErrorExt
LEAF_NODE	436:17	436:17	10	TIFFErrorExt
LEAF_NODE	436:29	436:29	9	(
ARGUMENT	436:30	436:30	9	tif -> tif_clientdata
FIELD	436:30	436:35	10	tif -> tif_clientdata
LEAF_NODE	436:30	436:30	11	tif
LEAF_NODE	436:33	436:33	11	->
LEAF_NODE	436:35	436:35	11	tif_clientdata
LEAF_NODE	436:49	436:49	9	,
ARGUMENT	436:50	436:50	9	module
FIELD	436:50	436:50	10	module
LEAF_NODE	436:50	436:50	11	module
LEAF_NODE	436:56	436:56	9	,
ARGUMENT	436:57	436:57	9	"Zero tiles"
FIELD	436:57	436:57	10	"Zero tiles"
LEAF_NODE	436:57	436:57	11	"Zero tiles"
LEAF_NODE	436:69	436:69	9	)
LEAF_NODE	436:70	436:70	7	;
JUMP_STATEMENT	437:16	437:39	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	437:16	437:16	7	return
LEAF_NODE	437:16	437:16	8	return
DESTINATION	437:23	437:23	7	( ( tmsize_t ) ( - 1 ) )
EXPR	437:23	437:38	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	437:23	437:23	9	(
LEAF_NODE	437:24	437:24	9	(
TYPE_NAME	437:25	437:25	9	tmsize_t
LEAF_NODE	437:25	437:25	10	tmsize_t
LEAF_NODE	437:33	437:33	9	)
LEAF_NODE	437:34	437:34	9	(
UNARY_EXPR	437:35	437:36	9	- 1
UNARY_OPERATOR	437:35	437:35	10	-
LEAF_NODE	437:35	437:35	11	-
FIELD	437:36	437:36	10	1
LEAF_NODE	437:36	437:36	11	1
LEAF_NODE	437:37	437:37	9	)
LEAF_NODE	437:38	437:38	9	)
LEAF_NODE	437:39	437:39	7	;
LEAF_NODE	438:8	438:8	5	}
EXPR_STATEMENT	439:1	439:53	3	tif -> tif_col = ( tile % howmany32 ) * td -> td_tilewidth ;
EXPR	439:1	439:1	4	tif -> tif_col = ( tile % howmany32 ) * td -> td_tilewidth
ASSIGN	439:1	439:16	5	tif -> tif_col = ( tile % howmany32 ) * td -> td_tilewidth
LVAL	439:1	439:1	6	tif -> tif_col
FIELD	439:1	439:6	7	tif -> tif_col
LEAF_NODE	439:1	439:1	8	tif
LEAF_NODE	439:4	439:4	8	->
LEAF_NODE	439:6	439:6	8	tif_col
ASSIGN_OP	439:14	439:14	6	=
LEAF_NODE	439:14	439:14	7	=
RVAL	439:16	439:37	6	( tile % howmany32 ) * td -> td_tilewidth
LEAF_NODE	439:16	439:16	7	(
FIELD	439:17	439:17	7	tile
LEAF_NODE	439:17	439:17	8	tile
LEAF_NODE	439:22	439:22	7	%
FIELD	439:24	439:24	7	howmany32
LEAF_NODE	439:24	439:24	8	howmany32
LEAF_NODE	439:33	439:33	7	)
LEAF_NODE	439:35	439:35	7	*
FIELD	439:37	439:41	7	td -> td_tilewidth
LEAF_NODE	439:37	439:37	8	td
LEAF_NODE	439:39	439:39	8	->
LEAF_NODE	439:41	439:41	8	td_tilewidth
LEAF_NODE	439:53	439:53	4	;
SELECTION	441:1	441:46	3	
KEYWORD	441:1	441:1	4	if
LEAF_NODE	441:1	441:1	5	if
LEAF_NODE	441:4	441:4	4	(
CONDITION	441:5	441:5	4	( tif -> tif_flags & TIFF_CODERSETUP ) == 0
EXPR	441:5	441:43	5	( tif -> tif_flags & TIFF_CODERSETUP ) == 0
LEAF_NODE	441:5	441:5	6	(
FIELD	441:6	441:11	6	tif -> tif_flags
LEAF_NODE	441:6	441:6	7	tif
LEAF_NODE	441:9	441:9	7	->
LEAF_NODE	441:11	441:11	7	tif_flags
LEAF_NODE	441:21	441:21	6	&
FIELD	441:23	441:23	6	TIFF_CODERSETUP
LEAF_NODE	441:23	441:23	7	TIFF_CODERSETUP
LEAF_NODE	441:38	441:38	6	)
EQ_OPERATOR	441:40	441:40	6	==
LEAF_NODE	441:40	441:40	7	==
FIELD	441:43	441:43	6	0
LEAF_NODE	441:43	441:43	7	0
LEAF_NODE	441:44	441:44	4	)
STATEMENTS	441:46	445:1	4	
LEAF_NODE	441:46	441:46	5	{
STATEMENTS	442:2	444:2	5	
SELECTION	442:2	443:3	6	
KEYWORD	442:2	442:2	7	if
LEAF_NODE	442:2	442:2	8	if
LEAF_NODE	442:5	442:5	7	(
CONDITION	442:6	442:6	7	! ( * tif -> tif_setupencode ) ( tif )
EXPR	442:6	442:6	8	! ( * tif -> tif_setupencode ) ( tif )
UNARY_EXPR	442:6	442:7	9	! ( * tif -> tif_setupencode ) ( tif )
UNARY_OPERATOR	442:6	442:6	10	!
LEAF_NODE	442:6	442:6	11	!
FUNCTION_CALL	442:7	442:34	10	( * tif -> tif_setupencode ) ( tif )
CALLEE	442:7	442:29	11	( * tif -> tif_setupencode )
LEAF_NODE	442:7	442:7	12	(
UNARY_EXPR	442:8	442:9	12	* tif -> tif_setupencode
UNARY_OPERATOR	442:8	442:8	13	*
LEAF_NODE	442:8	442:8	14	*
FIELD	442:9	442:14	13	tif -> tif_setupencode
LEAF_NODE	442:9	442:9	14	tif
LEAF_NODE	442:12	442:12	14	->
LEAF_NODE	442:14	442:14	14	tif_setupencode
LEAF_NODE	442:29	442:29	12	)
LEAF_NODE	442:30	442:30	11	(
ARGUMENT	442:31	442:31	11	tif
FIELD	442:31	442:31	12	tif
LEAF_NODE	442:31	442:31	13	tif
LEAF_NODE	442:34	442:34	11	)
LEAF_NODE	442:35	442:35	7	)
STATEMENTS	443:3	443:3	7	
JUMP_STATEMENT	443:3	443:26	8	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	443:3	443:3	9	return
LEAF_NODE	443:3	443:3	10	return
DESTINATION	443:10	443:10	9	( ( tmsize_t ) ( - 1 ) )
EXPR	443:10	443:25	10	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	443:10	443:10	11	(
LEAF_NODE	443:11	443:11	11	(
TYPE_NAME	443:12	443:12	11	tmsize_t
LEAF_NODE	443:12	443:12	12	tmsize_t
LEAF_NODE	443:20	443:20	11	)
LEAF_NODE	443:21	443:21	11	(
UNARY_EXPR	443:22	443:23	11	- 1
UNARY_OPERATOR	443:22	443:22	12	-
LEAF_NODE	443:22	443:22	13	-
FIELD	443:23	443:23	12	1
LEAF_NODE	443:23	443:23	13	1
LEAF_NODE	443:24	443:24	11	)
LEAF_NODE	443:25	443:25	11	)
LEAF_NODE	443:26	443:26	9	;
EXPR_STATEMENT	444:2	444:35	6	tif -> tif_flags |= TIFF_CODERSETUP ;
EXPR	444:2	444:2	7	tif -> tif_flags |= TIFF_CODERSETUP
ASSIGN	444:2	444:20	8	tif -> tif_flags |= TIFF_CODERSETUP
LVAL	444:2	444:2	9	tif -> tif_flags
FIELD	444:2	444:7	10	tif -> tif_flags
LEAF_NODE	444:2	444:2	11	tif
LEAF_NODE	444:5	444:5	11	->
LEAF_NODE	444:7	444:7	11	tif_flags
ASSIGN_OP	444:17	444:17	9	|=
LEAF_NODE	444:17	444:17	10	|=
RVAL	444:20	444:20	9	TIFF_CODERSETUP
FIELD	444:20	444:20	10	TIFF_CODERSETUP
LEAF_NODE	444:20	444:20	11	TIFF_CODERSETUP
LEAF_NODE	444:35	444:35	7	;
LEAF_NODE	445:1	445:1	5	}
EXPR_STATEMENT	446:1	446:35	3	tif -> tif_flags &= ~TIFF_POSTENCODE ;
EXPR	446:1	446:1	4	tif -> tif_flags &= ~TIFF_POSTENCODE
ASSIGN	446:1	446:19	5	tif -> tif_flags &= ~TIFF_POSTENCODE
LVAL	446:1	446:1	6	tif -> tif_flags
FIELD	446:1	446:6	7	tif -> tif_flags
LEAF_NODE	446:1	446:1	8	tif
LEAF_NODE	446:4	446:4	8	->
LEAF_NODE	446:6	446:6	8	tif_flags
ASSIGN_OP	446:16	446:16	6	&=
LEAF_NODE	446:16	446:16	7	&=
RVAL	446:19	446:19	6	~TIFF_POSTENCODE
FIELD	446:19	446:19	7	~TIFF_POSTENCODE
LEAF_NODE	446:19	446:19	8	~TIFF_POSTENCODE
LEAF_NODE	446:35	446:35	4	;
SELECTION	453:1	454:2	3	
KEYWORD	453:1	453:1	4	if
LEAF_NODE	453:1	453:1	5	if
LEAF_NODE	453:4	453:4	4	(
CONDITION	453:6	453:6	4	cc < 1 || cc > tif -> tif_tilesize
EXPR	453:6	453:6	5	cc < 1 || cc > tif -> tif_tilesize
OR	453:6	453:16	6	cc < 1 || cc > tif -> tif_tilesize
EXPR	453:6	453:11	7	cc < 1
FIELD	453:6	453:6	8	cc
LEAF_NODE	453:6	453:6	9	cc
REL_OPERATOR	453:9	453:9	8	<
LEAF_NODE	453:9	453:9	9	<
FIELD	453:11	453:11	8	1
LEAF_NODE	453:11	453:11	9	1
LEAF_NODE	453:13	453:13	7	||
EXPR	453:16	453:21	7	cc > tif -> tif_tilesize
FIELD	453:16	453:16	8	cc
LEAF_NODE	453:16	453:16	9	cc
REL_OPERATOR	453:19	453:19	8	>
LEAF_NODE	453:19	453:19	9	>
FIELD	453:21	453:26	8	tif -> tif_tilesize
LEAF_NODE	453:21	453:21	9	tif
LEAF_NODE	453:24	453:24	9	->
LEAF_NODE	453:26	453:26	9	tif_tilesize
LEAF_NODE	453:38	453:38	4	)
STATEMENTS	454:2	454:2	4	
EXPR_STATEMENT	454:2	454:24	5	cc = tif -> tif_tilesize ;
EXPR	454:2	454:2	6	cc = tif -> tif_tilesize
ASSIGN	454:2	454:7	7	cc = tif -> tif_tilesize
LVAL	454:2	454:2	8	cc
FIELD	454:2	454:2	9	cc
LEAF_NODE	454:2	454:2	10	cc
ASSIGN_OP	454:5	454:5	8	=
LEAF_NODE	454:5	454:5	9	=
RVAL	454:7	454:7	8	tif -> tif_tilesize
FIELD	454:7	454:12	9	tif -> tif_tilesize
LEAF_NODE	454:7	454:7	10	tif
LEAF_NODE	454:10	454:10	10	->
LEAF_NODE	454:12	454:12	10	tif_tilesize
LEAF_NODE	454:24	454:24	6	;
SELECTION	457:4	458:4	3	
KEYWORD	457:4	457:4	4	if
LEAF_NODE	457:4	457:4	5	if
LEAF_NODE	457:6	457:6	4	(
CONDITION	457:8	457:8	4	td -> td_compression == COMPRESSION_NONE
EXPR	457:8	457:30	5	td -> td_compression == COMPRESSION_NONE
FIELD	457:8	457:12	6	td -> td_compression
LEAF_NODE	457:8	457:8	7	td
LEAF_NODE	457:10	457:10	7	->
LEAF_NODE	457:12	457:12	7	td_compression
EQ_OPERATOR	457:27	457:27	6	==
LEAF_NODE	457:27	457:27	7	==
FIELD	457:30	457:30	6	COMPRESSION_NONE
LEAF_NODE	457:30	457:30	7	COMPRESSION_NONE
LEAF_NODE	457:47	457:47	4	)
STATEMENTS	458:4	470:4	4	
LEAF_NODE	458:4	458:4	5	{
STATEMENTS	460:8	469:19	5	
EXPR_STATEMENT	460:8	460:53	6	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc ) ;
EXPR	460:8	460:8	7	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc )
FUNCTION_CALL	460:8	460:52	8	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc )
CALLEE	460:8	460:13	9	tif -> tif_postdecode
LEAF_NODE	460:8	460:8	10	tif
LEAF_NODE	460:11	460:11	10	->
LEAF_NODE	460:13	460:13	10	tif_postdecode
LEAF_NODE	460:27	460:27	9	(
ARGUMENT	460:29	460:29	9	tif
FIELD	460:29	460:29	10	tif
LEAF_NODE	460:29	460:29	11	tif
LEAF_NODE	460:32	460:32	9	,
ARGUMENT	460:34	460:43	9	( uint8 * ) data
LEAF_NODE	460:34	460:34	10	(
TYPE_NAME	460:35	460:35	10	uint8
LEAF_NODE	460:35	460:35	11	uint8
LEAF_NODE	460:40	460:40	10	*
LEAF_NODE	460:41	460:41	10	)
FIELD	460:43	460:43	10	data
LEAF_NODE	460:43	460:43	11	data
LEAF_NODE	460:47	460:47	9	,
ARGUMENT	460:49	460:49	9	cc
FIELD	460:49	460:49	10	cc
LEAF_NODE	460:49	460:49	11	cc
LEAF_NODE	460:52	460:52	9	)
LEAF_NODE	460:53	460:53	7	;
SELECTION	462:8	464:12	6	
KEYWORD	462:8	462:8	7	if
LEAF_NODE	462:8	462:8	8	if
LEAF_NODE	462:11	462:11	7	(
CONDITION	462:12	462:12	7	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	462:12	462:12	8	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	462:12	463:12	9	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	462:12	462:12	10	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	462:12	462:13	11	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	462:12	462:12	12	!
LEAF_NODE	462:12	462:12	13	!
FUNCTION_CALL	462:13	462:46	12	isFillOrder ( tif , td -> td_fillorder )
CALLEE	462:13	462:13	13	isFillOrder
LEAF_NODE	462:13	462:13	14	isFillOrder
LEAF_NODE	462:24	462:24	13	(
ARGUMENT	462:25	462:25	13	tif
FIELD	462:25	462:25	14	tif
LEAF_NODE	462:25	462:25	15	tif
LEAF_NODE	462:28	462:28	13	,
ARGUMENT	462:30	462:30	13	td -> td_fillorder
FIELD	462:30	462:34	14	td -> td_fillorder
LEAF_NODE	462:30	462:30	15	td
LEAF_NODE	462:32	462:32	15	->
LEAF_NODE	462:34	462:34	15	td_fillorder
LEAF_NODE	462:46	462:46	13	)
LEAF_NODE	462:48	462:48	10	&&
EXPR	463:12	463:48	10	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	463:12	463:12	11	(
FIELD	463:13	463:18	11	tif -> tif_flags
LEAF_NODE	463:13	463:13	12	tif
LEAF_NODE	463:16	463:16	12	->
LEAF_NODE	463:18	463:18	12	tif_flags
LEAF_NODE	463:28	463:28	11	&
FIELD	463:30	463:30	11	TIFF_NOBITREV
LEAF_NODE	463:30	463:30	12	TIFF_NOBITREV
LEAF_NODE	463:43	463:43	11	)
EQ_OPERATOR	463:45	463:45	11	==
LEAF_NODE	463:45	463:45	12	==
FIELD	463:48	463:48	11	0
LEAF_NODE	463:48	463:48	12	0
LEAF_NODE	463:49	463:49	7	)
STATEMENTS	464:12	464:12	7	
EXPR_STATEMENT	464:12	464:46	8	TIFFReverseBits ( ( uint8 * ) data , cc ) ;
EXPR	464:12	464:12	9	TIFFReverseBits ( ( uint8 * ) data , cc )
FUNCTION_CALL	464:12	464:45	10	TIFFReverseBits ( ( uint8 * ) data , cc )
CALLEE	464:12	464:12	11	TIFFReverseBits
LEAF_NODE	464:12	464:12	12	TIFFReverseBits
LEAF_NODE	464:27	464:27	11	(
ARGUMENT	464:28	464:37	11	( uint8 * ) data
LEAF_NODE	464:28	464:28	12	(
TYPE_NAME	464:29	464:29	12	uint8
LEAF_NODE	464:29	464:29	13	uint8
LEAF_NODE	464:34	464:34	12	*
LEAF_NODE	464:35	464:35	12	)
FIELD	464:37	464:37	12	data
LEAF_NODE	464:37	464:37	13	data
LEAF_NODE	464:41	464:41	11	,
ARGUMENT	464:43	464:43	11	cc
FIELD	464:43	464:43	12	cc
LEAF_NODE	464:43	464:43	13	cc
LEAF_NODE	464:45	464:45	11	)
LEAF_NODE	464:46	464:46	9	;
SELECTION	466:8	468:12	6	
KEYWORD	466:8	466:8	7	if
LEAF_NODE	466:8	466:8	8	if
LEAF_NODE	466:11	466:11	7	(
CONDITION	466:12	466:12	7	cc > 0 && ! TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc )
EXPR	466:12	466:12	8	cc > 0 && ! TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc )
AND	466:12	467:12	9	cc > 0 && ! TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc )
EXPR	466:12	466:17	10	cc > 0
FIELD	466:12	466:12	11	cc
LEAF_NODE	466:12	466:12	12	cc
REL_OPERATOR	466:15	466:15	11	>
LEAF_NODE	466:15	466:15	12	>
FIELD	466:17	466:17	11	0
LEAF_NODE	466:17	466:17	12	0
LEAF_NODE	466:19	466:19	10	&&
EXPR	467:12	467:12	10	! TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc )
UNARY_EXPR	467:12	467:13	11	! TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc )
UNARY_OPERATOR	467:12	467:12	12	!
LEAF_NODE	467:12	467:12	13	!
FUNCTION_CALL	467:13	467:59	12	TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc )
CALLEE	467:13	467:13	13	TIFFAppendToStrip
LEAF_NODE	467:13	467:13	14	TIFFAppendToStrip
LEAF_NODE	467:30	467:30	13	(
ARGUMENT	467:31	467:31	13	tif
FIELD	467:31	467:31	14	tif
LEAF_NODE	467:31	467:31	15	tif
LEAF_NODE	467:34	467:34	13	,
ARGUMENT	467:36	467:36	13	tile
FIELD	467:36	467:36	14	tile
LEAF_NODE	467:36	467:36	15	tile
LEAF_NODE	467:40	467:40	13	,
ARGUMENT	467:42	467:51	13	( uint8 * ) data
LEAF_NODE	467:42	467:42	14	(
TYPE_NAME	467:43	467:43	14	uint8
LEAF_NODE	467:43	467:43	15	uint8
LEAF_NODE	467:48	467:48	14	*
LEAF_NODE	467:49	467:49	14	)
FIELD	467:51	467:51	14	data
LEAF_NODE	467:51	467:51	15	data
LEAF_NODE	467:55	467:55	13	,
ARGUMENT	467:57	467:57	13	cc
FIELD	467:57	467:57	14	cc
LEAF_NODE	467:57	467:57	15	cc
LEAF_NODE	467:59	467:59	13	)
LEAF_NODE	467:60	467:60	7	)
STATEMENTS	468:12	468:12	7	
JUMP_STATEMENT	468:12	468:34	8	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	468:12	468:12	9	return
LEAF_NODE	468:12	468:12	10	return
DESTINATION	468:19	468:19	9	( ( tmsize_t ) - 1 )
EXPR	468:19	468:33	10	( ( tmsize_t ) - 1 )
LEAF_NODE	468:19	468:19	11	(
LEAF_NODE	468:20	468:20	11	(
TYPE_NAME	468:21	468:21	11	tmsize_t
LEAF_NODE	468:21	468:21	12	tmsize_t
LEAF_NODE	468:29	468:29	11	)
UNARY_EXPR	468:31	468:32	11	- 1
UNARY_OPERATOR	468:31	468:31	12	-
LEAF_NODE	468:31	468:31	13	-
FIELD	468:32	468:32	12	1
LEAF_NODE	468:32	468:32	13	1
LEAF_NODE	468:33	468:33	11	)
LEAF_NODE	468:34	468:34	9	;
LEAF_NODE	469:8	469:8	6	return
LEAF_NODE	469:15	469:15	6	(
LEAF_NODE	469:16	469:16	6	cc
LEAF_NODE	469:18	469:18	6	)
LEAF_NODE	469:19	469:19	6	;
LEAF_NODE	470:4	470:4	5	}
EXPR_STATEMENT	472:4	472:49	3	sample = ( uint16 ) ( tile / td -> td_stripsperimage ) ;
EXPR	472:4	472:4	4	sample = ( uint16 ) ( tile / td -> td_stripsperimage )
ASSIGN	472:4	472:13	5	sample = ( uint16 ) ( tile / td -> td_stripsperimage )
LVAL	472:4	472:4	6	sample
FIELD	472:4	472:4	7	sample
LEAF_NODE	472:4	472:4	8	sample
ASSIGN_OP	472:11	472:11	6	=
LEAF_NODE	472:11	472:11	7	=
RVAL	472:13	472:48	6	( uint16 ) ( tile / td -> td_stripsperimage )
LEAF_NODE	472:13	472:13	7	(
TYPE_NAME	472:14	472:14	7	uint16
LEAF_NODE	472:14	472:14	8	uint16
LEAF_NODE	472:20	472:20	7	)
LEAF_NODE	472:21	472:21	7	(
FIELD	472:22	472:22	7	tile
LEAF_NODE	472:22	472:22	8	tile
LEAF_NODE	472:26	472:26	7	/
FIELD	472:27	472:31	7	td -> td_stripsperimage
LEAF_NODE	472:27	472:27	8	td
LEAF_NODE	472:29	472:29	8	->
LEAF_NODE	472:31	472:31	8	td_stripsperimage
LEAF_NODE	472:48	472:48	7	)
LEAF_NODE	472:49	472:49	4	;
SELECTION	473:4	474:8	3	
KEYWORD	473:4	473:4	4	if
LEAF_NODE	473:4	473:4	5	if
LEAF_NODE	473:7	473:7	4	(
CONDITION	473:8	473:8	4	! ( * tif -> tif_preencode ) ( tif , sample )
EXPR	473:8	473:8	5	! ( * tif -> tif_preencode ) ( tif , sample )
UNARY_EXPR	473:8	473:9	6	! ( * tif -> tif_preencode ) ( tif , sample )
UNARY_OPERATOR	473:8	473:8	7	!
LEAF_NODE	473:8	473:8	8	!
FUNCTION_CALL	473:9	473:42	7	( * tif -> tif_preencode ) ( tif , sample )
CALLEE	473:9	473:29	8	( * tif -> tif_preencode )
LEAF_NODE	473:9	473:9	9	(
UNARY_EXPR	473:10	473:11	9	* tif -> tif_preencode
UNARY_OPERATOR	473:10	473:10	10	*
LEAF_NODE	473:10	473:10	11	*
FIELD	473:11	473:16	10	tif -> tif_preencode
LEAF_NODE	473:11	473:11	11	tif
LEAF_NODE	473:14	473:14	11	->
LEAF_NODE	473:16	473:16	11	tif_preencode
LEAF_NODE	473:29	473:29	9	)
LEAF_NODE	473:30	473:30	8	(
ARGUMENT	473:31	473:31	8	tif
FIELD	473:31	473:31	9	tif
LEAF_NODE	473:31	473:31	10	tif
LEAF_NODE	473:34	473:34	8	,
ARGUMENT	473:36	473:36	8	sample
FIELD	473:36	473:36	9	sample
LEAF_NODE	473:36	473:36	10	sample
LEAF_NODE	473:42	473:42	8	)
LEAF_NODE	473:43	473:43	4	)
STATEMENTS	474:8	474:8	4	
JUMP_STATEMENT	474:8	474:31	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	474:8	474:8	6	return
LEAF_NODE	474:8	474:8	7	return
DESTINATION	474:15	474:15	6	( ( tmsize_t ) ( - 1 ) )
EXPR	474:15	474:30	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	474:15	474:15	8	(
LEAF_NODE	474:16	474:16	8	(
TYPE_NAME	474:17	474:17	8	tmsize_t
LEAF_NODE	474:17	474:17	9	tmsize_t
LEAF_NODE	474:25	474:25	8	)
LEAF_NODE	474:26	474:26	8	(
UNARY_EXPR	474:27	474:28	8	- 1
UNARY_OPERATOR	474:27	474:27	9	-
LEAF_NODE	474:27	474:27	10	-
FIELD	474:28	474:28	9	1
LEAF_NODE	474:28	474:28	10	1
LEAF_NODE	474:29	474:29	8	)
LEAF_NODE	474:30	474:30	8	)
LEAF_NODE	474:31	474:31	6	;
EXPR_STATEMENT	476:4	476:49	3	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc ) ;
EXPR	476:4	476:4	4	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc )
FUNCTION_CALL	476:4	476:48	5	tif -> tif_postdecode ( tif , ( uint8 * ) data , cc )
CALLEE	476:4	476:9	6	tif -> tif_postdecode
LEAF_NODE	476:4	476:4	7	tif
LEAF_NODE	476:7	476:7	7	->
LEAF_NODE	476:9	476:9	7	tif_postdecode
LEAF_NODE	476:23	476:23	6	(
ARGUMENT	476:25	476:25	6	tif
FIELD	476:25	476:25	7	tif
LEAF_NODE	476:25	476:25	8	tif
LEAF_NODE	476:28	476:28	6	,
ARGUMENT	476:30	476:39	6	( uint8 * ) data
LEAF_NODE	476:30	476:30	7	(
TYPE_NAME	476:31	476:31	7	uint8
LEAF_NODE	476:31	476:31	8	uint8
LEAF_NODE	476:36	476:36	7	*
LEAF_NODE	476:37	476:37	7	)
FIELD	476:39	476:39	7	data
LEAF_NODE	476:39	476:39	8	data
LEAF_NODE	476:43	476:43	6	,
ARGUMENT	476:45	476:45	6	cc
FIELD	476:45	476:45	7	cc
LEAF_NODE	476:45	476:45	8	cc
LEAF_NODE	476:48	476:48	6	)
LEAF_NODE	476:49	476:49	4	;
SELECTION	478:4	479:12	3	
KEYWORD	478:4	478:4	4	if
LEAF_NODE	478:4	478:4	5	if
LEAF_NODE	478:7	478:7	4	(
CONDITION	478:8	478:8	4	! ( * tif -> tif_encodetile ) ( tif , ( uint8 * ) data , cc , sample )
EXPR	478:8	478:8	5	! ( * tif -> tif_encodetile ) ( tif , ( uint8 * ) data , cc , sample )
UNARY_EXPR	478:8	478:9	6	! ( * tif -> tif_encodetile ) ( tif , ( uint8 * ) data , cc , sample )
UNARY_OPERATOR	478:8	478:8	7	!
LEAF_NODE	478:8	478:8	8	!
FUNCTION_CALL	478:9	478:62	7	( * tif -> tif_encodetile ) ( tif , ( uint8 * ) data , cc , sample )
CALLEE	478:9	478:30	8	( * tif -> tif_encodetile )
LEAF_NODE	478:9	478:9	9	(
UNARY_EXPR	478:10	478:11	9	* tif -> tif_encodetile
UNARY_OPERATOR	478:10	478:10	10	*
LEAF_NODE	478:10	478:10	11	*
FIELD	478:11	478:16	10	tif -> tif_encodetile
LEAF_NODE	478:11	478:11	11	tif
LEAF_NODE	478:14	478:14	11	->
LEAF_NODE	478:16	478:16	11	tif_encodetile
LEAF_NODE	478:30	478:30	9	)
LEAF_NODE	478:31	478:31	8	(
ARGUMENT	478:32	478:32	8	tif
FIELD	478:32	478:32	9	tif
LEAF_NODE	478:32	478:32	10	tif
LEAF_NODE	478:35	478:35	8	,
ARGUMENT	478:37	478:46	8	( uint8 * ) data
LEAF_NODE	478:37	478:37	9	(
TYPE_NAME	478:38	478:38	9	uint8
LEAF_NODE	478:38	478:38	10	uint8
LEAF_NODE	478:43	478:43	9	*
LEAF_NODE	478:44	478:44	9	)
FIELD	478:46	478:46	9	data
LEAF_NODE	478:46	478:46	10	data
LEAF_NODE	478:50	478:50	8	,
ARGUMENT	478:52	478:52	8	cc
FIELD	478:52	478:52	9	cc
LEAF_NODE	478:52	478:52	10	cc
LEAF_NODE	478:54	478:54	8	,
ARGUMENT	478:56	478:56	8	sample
FIELD	478:56	478:56	9	sample
LEAF_NODE	478:56	478:56	10	sample
LEAF_NODE	478:62	478:62	8	)
LEAF_NODE	478:63	478:63	4	)
STATEMENTS	479:12	479:12	4	
JUMP_STATEMENT	479:12	479:34	5	return ( ( tmsize_t ) - 1 ) ;
KEYWORD	479:12	479:12	6	return
LEAF_NODE	479:12	479:12	7	return
DESTINATION	479:19	479:19	6	( ( tmsize_t ) - 1 )
EXPR	479:19	479:33	7	( ( tmsize_t ) - 1 )
LEAF_NODE	479:19	479:19	8	(
LEAF_NODE	479:20	479:20	8	(
TYPE_NAME	479:21	479:21	8	tmsize_t
LEAF_NODE	479:21	479:21	9	tmsize_t
LEAF_NODE	479:29	479:29	8	)
UNARY_EXPR	479:31	479:32	8	- 1
UNARY_OPERATOR	479:31	479:31	9	-
LEAF_NODE	479:31	479:31	10	-
FIELD	479:32	479:32	9	1
LEAF_NODE	479:32	479:32	10	1
LEAF_NODE	479:33	479:33	8	)
LEAF_NODE	479:34	479:34	6	;
SELECTION	480:4	481:12	3	
KEYWORD	480:4	480:4	4	if
LEAF_NODE	480:4	480:4	5	if
LEAF_NODE	480:7	480:7	4	(
CONDITION	480:8	480:8	4	! ( * tif -> tif_postencode ) ( tif )
EXPR	480:8	480:8	5	! ( * tif -> tif_postencode ) ( tif )
UNARY_EXPR	480:8	480:9	6	! ( * tif -> tif_postencode ) ( tif )
UNARY_OPERATOR	480:8	480:8	7	!
LEAF_NODE	480:8	480:8	8	!
FUNCTION_CALL	480:9	480:35	7	( * tif -> tif_postencode ) ( tif )
CALLEE	480:9	480:30	8	( * tif -> tif_postencode )
LEAF_NODE	480:9	480:9	9	(
UNARY_EXPR	480:10	480:11	9	* tif -> tif_postencode
UNARY_OPERATOR	480:10	480:10	10	*
LEAF_NODE	480:10	480:10	11	*
FIELD	480:11	480:16	10	tif -> tif_postencode
LEAF_NODE	480:11	480:11	11	tif
LEAF_NODE	480:14	480:14	11	->
LEAF_NODE	480:16	480:16	11	tif_postencode
LEAF_NODE	480:30	480:30	9	)
LEAF_NODE	480:31	480:31	8	(
ARGUMENT	480:32	480:32	8	tif
FIELD	480:32	480:32	9	tif
LEAF_NODE	480:32	480:32	10	tif
LEAF_NODE	480:35	480:35	8	)
LEAF_NODE	480:36	480:36	4	)
STATEMENTS	481:12	481:12	4	
JUMP_STATEMENT	481:12	481:35	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	481:12	481:12	6	return
LEAF_NODE	481:12	481:12	7	return
DESTINATION	481:19	481:19	6	( ( tmsize_t ) ( - 1 ) )
EXPR	481:19	481:34	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	481:19	481:19	8	(
LEAF_NODE	481:20	481:20	8	(
TYPE_NAME	481:21	481:21	8	tmsize_t
LEAF_NODE	481:21	481:21	9	tmsize_t
LEAF_NODE	481:29	481:29	8	)
LEAF_NODE	481:30	481:30	8	(
UNARY_EXPR	481:31	481:32	8	- 1
UNARY_OPERATOR	481:31	481:31	9	-
LEAF_NODE	481:31	481:31	10	-
FIELD	481:32	481:32	9	1
LEAF_NODE	481:32	481:32	10	1
LEAF_NODE	481:33	481:33	8	)
LEAF_NODE	481:34	481:34	8	)
LEAF_NODE	481:35	481:35	6	;
SELECTION	482:4	484:12	3	
KEYWORD	482:4	482:4	4	if
LEAF_NODE	482:4	482:4	5	if
LEAF_NODE	482:7	482:7	4	(
CONDITION	482:8	482:8	4	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	482:8	482:8	5	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	482:8	483:8	6	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	482:8	482:8	7	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	482:8	482:9	8	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	482:8	482:8	9	!
LEAF_NODE	482:8	482:8	10	!
FUNCTION_CALL	482:9	482:42	9	isFillOrder ( tif , td -> td_fillorder )
CALLEE	482:9	482:9	10	isFillOrder
LEAF_NODE	482:9	482:9	11	isFillOrder
LEAF_NODE	482:20	482:20	10	(
ARGUMENT	482:21	482:21	10	tif
FIELD	482:21	482:21	11	tif
LEAF_NODE	482:21	482:21	12	tif
LEAF_NODE	482:24	482:24	10	,
ARGUMENT	482:26	482:26	10	td -> td_fillorder
FIELD	482:26	482:30	11	td -> td_fillorder
LEAF_NODE	482:26	482:26	12	td
LEAF_NODE	482:28	482:28	12	->
LEAF_NODE	482:30	482:30	12	td_fillorder
LEAF_NODE	482:42	482:42	10	)
LEAF_NODE	482:44	482:44	7	&&
EXPR	483:8	483:44	7	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	483:8	483:8	8	(
FIELD	483:9	483:14	8	tif -> tif_flags
LEAF_NODE	483:9	483:9	9	tif
LEAF_NODE	483:12	483:12	9	->
LEAF_NODE	483:14	483:14	9	tif_flags
LEAF_NODE	483:24	483:24	8	&
FIELD	483:26	483:26	8	TIFF_NOBITREV
LEAF_NODE	483:26	483:26	9	TIFF_NOBITREV
LEAF_NODE	483:39	483:39	8	)
EQ_OPERATOR	483:41	483:41	8	==
LEAF_NODE	483:41	483:41	9	==
FIELD	483:44	483:44	8	0
LEAF_NODE	483:44	483:44	9	0
LEAF_NODE	483:45	483:45	4	)
STATEMENTS	484:12	484:12	4	
EXPR_STATEMENT	484:12	484:69	5	TIFFReverseBits ( ( uint8 * ) tif -> tif_rawdata , tif -> tif_rawcc ) ;
EXPR	484:12	484:12	6	TIFFReverseBits ( ( uint8 * ) tif -> tif_rawdata , tif -> tif_rawcc )
FUNCTION_CALL	484:12	484:68	7	TIFFReverseBits ( ( uint8 * ) tif -> tif_rawdata , tif -> tif_rawcc )
CALLEE	484:12	484:12	8	TIFFReverseBits
LEAF_NODE	484:12	484:12	9	TIFFReverseBits
LEAF_NODE	484:27	484:27	8	(
ARGUMENT	484:28	484:36	8	( uint8 * ) tif -> tif_rawdata
LEAF_NODE	484:28	484:28	9	(
TYPE_NAME	484:29	484:29	9	uint8
LEAF_NODE	484:29	484:29	10	uint8
LEAF_NODE	484:34	484:34	9	*
LEAF_NODE	484:35	484:35	9	)
FIELD	484:36	484:41	9	tif -> tif_rawdata
LEAF_NODE	484:36	484:36	10	tif
LEAF_NODE	484:39	484:39	10	->
LEAF_NODE	484:41	484:41	10	tif_rawdata
LEAF_NODE	484:52	484:52	8	,
ARGUMENT	484:54	484:54	8	tif -> tif_rawcc
FIELD	484:54	484:59	9	tif -> tif_rawcc
LEAF_NODE	484:54	484:54	10	tif
LEAF_NODE	484:57	484:57	10	->
LEAF_NODE	484:59	484:59	10	tif_rawcc
LEAF_NODE	484:68	484:68	8	)
LEAF_NODE	484:69	484:69	6	;
SELECTION	485:4	487:12	3	
KEYWORD	485:4	485:4	4	if
LEAF_NODE	485:4	485:4	5	if
LEAF_NODE	485:7	485:7	4	(
CONDITION	485:8	485:8	4	tif -> tif_rawcc > 0 && ! TIFFAppendToStrip ( tif , tile , tif -> tif_rawdata , tif -> tif_rawcc )
EXPR	485:8	485:8	5	tif -> tif_rawcc > 0 && ! TIFFAppendToStrip ( tif , tile , tif -> tif_rawdata , tif -> tif_rawcc )
AND	485:8	485:30	6	tif -> tif_rawcc > 0 && ! TIFFAppendToStrip ( tif , tile , tif -> tif_rawdata , tif -> tif_rawcc )
EXPR	485:8	485:25	7	tif -> tif_rawcc > 0
FIELD	485:8	485:13	8	tif -> tif_rawcc
LEAF_NODE	485:8	485:8	9	tif
LEAF_NODE	485:11	485:11	9	->
LEAF_NODE	485:13	485:13	9	tif_rawcc
REL_OPERATOR	485:23	485:23	8	>
LEAF_NODE	485:23	485:23	9	>
FIELD	485:25	485:25	8	0
LEAF_NODE	485:25	485:25	9	0
LEAF_NODE	485:27	485:27	7	&&
EXPR	485:30	485:30	7	! TIFFAppendToStrip ( tif , tile , tif -> tif_rawdata , tif -> tif_rawcc )
UNARY_EXPR	485:30	485:31	8	! TIFFAppendToStrip ( tif , tile , tif -> tif_rawdata , tif -> tif_rawcc )
UNARY_OPERATOR	485:30	485:30	9	!
LEAF_NODE	485:30	485:30	10	!
FUNCTION_CALL	485:31	486:40	9	TIFFAppendToStrip ( tif , tile , tif -> tif_rawdata , tif -> tif_rawcc )
CALLEE	485:31	485:31	10	TIFFAppendToStrip
LEAF_NODE	485:31	485:31	11	TIFFAppendToStrip
LEAF_NODE	485:48	485:48	10	(
ARGUMENT	485:49	485:49	10	tif
FIELD	485:49	485:49	11	tif
LEAF_NODE	485:49	485:49	12	tif
LEAF_NODE	485:52	485:52	10	,
ARGUMENT	485:54	485:54	10	tile
FIELD	485:54	485:54	11	tile
LEAF_NODE	485:54	485:54	12	tile
LEAF_NODE	485:58	485:58	10	,
ARGUMENT	486:8	486:8	10	tif -> tif_rawdata
FIELD	486:8	486:13	11	tif -> tif_rawdata
LEAF_NODE	486:8	486:8	12	tif
LEAF_NODE	486:11	486:11	12	->
LEAF_NODE	486:13	486:13	12	tif_rawdata
LEAF_NODE	486:24	486:24	10	,
ARGUMENT	486:26	486:26	10	tif -> tif_rawcc
FIELD	486:26	486:31	11	tif -> tif_rawcc
LEAF_NODE	486:26	486:26	12	tif
LEAF_NODE	486:29	486:29	12	->
LEAF_NODE	486:31	486:31	12	tif_rawcc
LEAF_NODE	486:40	486:40	10	)
LEAF_NODE	486:41	486:41	4	)
STATEMENTS	487:12	487:12	4	
JUMP_STATEMENT	487:12	487:35	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	487:12	487:12	6	return
LEAF_NODE	487:12	487:12	7	return
DESTINATION	487:19	487:19	6	( ( tmsize_t ) ( - 1 ) )
EXPR	487:19	487:34	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	487:19	487:19	8	(
LEAF_NODE	487:20	487:20	8	(
TYPE_NAME	487:21	487:21	8	tmsize_t
LEAF_NODE	487:21	487:21	9	tmsize_t
LEAF_NODE	487:29	487:29	8	)
LEAF_NODE	487:30	487:30	8	(
UNARY_EXPR	487:31	487:32	8	- 1
UNARY_OPERATOR	487:31	487:31	9	-
LEAF_NODE	487:31	487:31	10	-
FIELD	487:32	487:32	9	1
LEAF_NODE	487:32	487:32	10	1
LEAF_NODE	487:33	487:33	8	)
LEAF_NODE	487:34	487:34	8	)
LEAF_NODE	487:35	487:35	6	;
EXPR_STATEMENT	488:4	488:22	3	tif -> tif_rawcc = 0 ;
EXPR	488:4	488:4	4	tif -> tif_rawcc = 0
ASSIGN	488:4	488:21	5	tif -> tif_rawcc = 0
LVAL	488:4	488:4	6	tif -> tif_rawcc
FIELD	488:4	488:9	7	tif -> tif_rawcc
LEAF_NODE	488:4	488:4	8	tif
LEAF_NODE	488:7	488:7	8	->
LEAF_NODE	488:9	488:9	8	tif_rawcc
ASSIGN_OP	488:19	488:19	6	=
LEAF_NODE	488:19	488:19	7	=
RVAL	488:21	488:21	6	0
FIELD	488:21	488:21	7	0
LEAF_NODE	488:21	488:21	8	0
LEAF_NODE	488:22	488:22	4	;
EXPR_STATEMENT	489:4	489:37	3	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	489:4	489:4	4	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	489:4	489:21	5	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	489:4	489:4	6	tif -> tif_rawcp
FIELD	489:4	489:9	7	tif -> tif_rawcp
LEAF_NODE	489:4	489:4	8	tif
LEAF_NODE	489:7	489:7	8	->
LEAF_NODE	489:9	489:9	8	tif_rawcp
ASSIGN_OP	489:19	489:19	6	=
LEAF_NODE	489:19	489:19	7	=
RVAL	489:21	489:21	6	tif -> tif_rawdata
FIELD	489:21	489:26	7	tif -> tif_rawdata
LEAF_NODE	489:21	489:21	8	tif
LEAF_NODE	489:24	489:24	8	->
LEAF_NODE	489:26	489:26	8	tif_rawdata
LEAF_NODE	489:37	489:37	4	;
LEAF_NODE	490:4	490:4	3	return
LEAF_NODE	490:11	490:11	3	(
LEAF_NODE	490:12	490:12	3	cc
LEAF_NODE	490:14	490:14	3	)
LEAF_NODE	490:15	490:15	3	;
LEAF_NODE	491:0	491:0	2	}
FUNCTION_DEF	502:0	517:0	1	
RETURN_TYPE	502:0	502:0	2	tmsize_t
TYPE_NAME	502:0	502:0	3	tmsize_t
LEAF_NODE	502:0	502:0	4	tmsize_t
FUNCTION_NAME	503:0	503:0	2	TIFFWriteRawTile
LEAF_NODE	503:0	503:0	3	TIFFWriteRawTile
PARAMETER_LIST	503:16	503:64	2	( TIFF * tif , uint32 tile , void * data , tmsize_t cc )
LEAF_NODE	503:16	503:16	3	(
PARAMETER_DECL	503:17	503:23	3	TIFF * tif
TYPE	503:17	503:21	4	TIFF *
TYPE_NAME	503:17	503:17	5	TIFF
LEAF_NODE	503:17	503:17	6	TIFF
POINTER	503:21	503:21	5	*
LEAF_NODE	503:21	503:21	6	*
NAME	503:23	503:23	4	tif
LEAF_NODE	503:23	503:23	5	tif
LEAF_NODE	503:26	503:26	3	,
PARAMETER_DECL	503:28	503:35	3	uint32 tile
TYPE	503:28	503:28	4	uint32
TYPE_NAME	503:28	503:28	5	uint32
LEAF_NODE	503:28	503:28	6	uint32
NAME	503:35	503:35	4	tile
LEAF_NODE	503:35	503:35	5	tile
LEAF_NODE	503:39	503:39	3	,
PARAMETER_DECL	503:41	503:47	3	void * data
TYPE	503:41	503:45	4	void *
TYPE_NAME	503:41	503:41	5	void
LEAF_NODE	503:41	503:41	6	void
POINTER	503:45	503:45	5	*
LEAF_NODE	503:45	503:45	6	*
NAME	503:47	503:47	4	data
LEAF_NODE	503:47	503:47	5	data
LEAF_NODE	503:51	503:51	3	,
PARAMETER_DECL	503:53	503:62	3	tmsize_t cc
TYPE	503:53	503:53	4	tmsize_t
TYPE_NAME	503:53	503:53	5	tmsize_t
LEAF_NODE	503:53	503:53	6	tmsize_t
NAME	503:62	503:62	4	cc
LEAF_NODE	503:62	503:62	5	cc
LEAF_NODE	503:64	503:64	3	)
LEAF_NODE	504:0	504:0	2	{
STATEMENTS	505:1	515:1	2	
LEAF_NODE	505:1	505:1	3	static
SIMPLE_DECL	505:8	505:48	3	const char [ ] module ; module = "TIFFWriteRawTile" ;
VAR_DECL	505:8	505:19	4	const char [ ] module ; module = "TIFFWriteRawTile"
TYPE	505:8	505:25	5	const char [ ]
TYPE_NAME	505:8	505:14	6	const char
LEAF_NODE	505:8	505:8	7	const
LEAF_NODE	505:14	505:14	7	char
TYPE_SUFFIX	505:25	505:26	6	[ ]
LEAF_NODE	505:25	505:25	7	[
LEAF_NODE	505:26	505:26	7	]
NAME	505:19	505:19	5	module
LEAF_NODE	505:19	505:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	505:19	505:19	5	module = "TIFFWriteRawTile"
ASSIGN	505:19	505:30	6	module = "TIFFWriteRawTile"
LVAL	505:19	505:19	7	module
NAME	505:19	505:19	8	module
LEAF_NODE	505:19	505:19	9	module
ASSIGN_OP	505:28	505:28	7	=
LEAF_NODE	505:28	505:28	8	=
RVAL	505:30	505:30	7	"TIFFWriteRawTile"
FIELD	505:30	505:30	8	"TIFFWriteRawTile"
LEAF_NODE	505:30	505:30	9	"TIFFWriteRawTile"
LEAF_NODE	505:48	505:48	4	;
SELECTION	507:1	508:2	3	
KEYWORD	507:1	507:1	4	if
LEAF_NODE	507:1	507:1	5	if
LEAF_NODE	507:4	507:4	4	(
CONDITION	507:5	507:5	4	! WRITECHECKTILES ( tif , module )
EXPR	507:5	507:5	5	! WRITECHECKTILES ( tif , module )
UNARY_EXPR	507:5	507:6	6	! WRITECHECKTILES ( tif , module )
UNARY_OPERATOR	507:5	507:5	7	!
LEAF_NODE	507:5	507:5	8	!
FUNCTION_CALL	507:6	507:33	7	WRITECHECKTILES ( tif , module )
CALLEE	507:6	507:6	8	WRITECHECKTILES
LEAF_NODE	507:6	507:6	9	WRITECHECKTILES
LEAF_NODE	507:21	507:21	8	(
ARGUMENT	507:22	507:22	8	tif
FIELD	507:22	507:22	9	tif
LEAF_NODE	507:22	507:22	10	tif
LEAF_NODE	507:25	507:25	8	,
ARGUMENT	507:27	507:27	8	module
FIELD	507:27	507:27	9	module
LEAF_NODE	507:27	507:27	10	module
LEAF_NODE	507:33	507:33	8	)
LEAF_NODE	507:34	507:34	4	)
STATEMENTS	508:2	508:2	4	
JUMP_STATEMENT	508:2	508:25	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	508:2	508:2	6	return
LEAF_NODE	508:2	508:2	7	return
DESTINATION	508:9	508:9	6	( ( tmsize_t ) ( - 1 ) )
EXPR	508:9	508:24	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	508:9	508:9	8	(
LEAF_NODE	508:10	508:10	8	(
TYPE_NAME	508:11	508:11	8	tmsize_t
LEAF_NODE	508:11	508:11	9	tmsize_t
LEAF_NODE	508:19	508:19	8	)
LEAF_NODE	508:20	508:20	8	(
UNARY_EXPR	508:21	508:22	8	- 1
UNARY_OPERATOR	508:21	508:21	9	-
LEAF_NODE	508:21	508:21	10	-
FIELD	508:22	508:22	9	1
LEAF_NODE	508:22	508:22	10	1
LEAF_NODE	508:23	508:23	8	)
LEAF_NODE	508:24	508:24	8	)
LEAF_NODE	508:25	508:25	6	;
SELECTION	509:1	509:38	3	
KEYWORD	509:1	509:1	4	if
LEAF_NODE	509:1	509:1	5	if
LEAF_NODE	509:4	509:4	4	(
CONDITION	509:5	509:5	4	tile >= tif -> tif_dir . td_nstrips
EXPR	509:5	509:13	5	tile >= tif -> tif_dir . td_nstrips
FIELD	509:5	509:5	6	tile
LEAF_NODE	509:5	509:5	7	tile
REL_OPERATOR	509:10	509:10	6	>=
LEAF_NODE	509:10	509:10	7	>=
FIELD	509:13	509:26	6	tif -> tif_dir . td_nstrips
LEAF_NODE	509:13	509:13	7	tif
LEAF_NODE	509:16	509:16	7	->
LEAF_NODE	509:18	509:18	7	tif_dir
LEAF_NODE	509:25	509:25	7	.
LEAF_NODE	509:26	509:26	7	td_nstrips
LEAF_NODE	509:36	509:36	4	)
STATEMENTS	509:38	514:1	4	
LEAF_NODE	509:38	509:38	5	{
STATEMENTS	510:2	513:2	5	
EXPR_STATEMENT	510:2	512:46	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile %lu out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) tif -> tif_dir . td_nstrips ) ;
EXPR	510:2	510:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile %lu out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) tif -> tif_dir . td_nstrips )
FUNCTION_CALL	510:2	512:45	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile %lu out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) tif -> tif_dir . td_nstrips )
CALLEE	510:2	510:2	9	TIFFErrorExt
LEAF_NODE	510:2	510:2	10	TIFFErrorExt
LEAF_NODE	510:14	510:14	9	(
ARGUMENT	510:15	510:15	9	tif -> tif_clientdata
FIELD	510:15	510:20	10	tif -> tif_clientdata
LEAF_NODE	510:15	510:15	11	tif
LEAF_NODE	510:18	510:18	11	->
LEAF_NODE	510:20	510:20	11	tif_clientdata
LEAF_NODE	510:34	510:34	9	,
ARGUMENT	510:36	510:36	9	module
FIELD	510:36	510:36	10	module
LEAF_NODE	510:36	510:36	11	module
LEAF_NODE	510:42	510:42	9	,
ARGUMENT	510:44	510:44	9	"Tile %lu out of range, max %lu"
FIELD	510:44	510:44	10	"Tile %lu out of range, max %lu"
LEAF_NODE	510:44	510:44	11	"Tile %lu out of range, max %lu"
LEAF_NODE	510:76	510:76	9	,
ARGUMENT	511:6	511:22	9	( unsigned long ) tile
LEAF_NODE	511:6	511:6	10	(
TYPE_NAME	511:7	511:16	10	unsigned long
LEAF_NODE	511:7	511:7	11	unsigned
LEAF_NODE	511:16	511:16	11	long
LEAF_NODE	511:20	511:20	10	)
FIELD	511:22	511:22	10	tile
LEAF_NODE	511:22	511:22	11	tile
LEAF_NODE	511:26	511:26	9	,
ARGUMENT	512:6	512:22	9	( unsigned long ) tif -> tif_dir . td_nstrips
LEAF_NODE	512:6	512:6	10	(
TYPE_NAME	512:7	512:16	10	unsigned long
LEAF_NODE	512:7	512:7	11	unsigned
LEAF_NODE	512:16	512:16	11	long
LEAF_NODE	512:20	512:20	10	)
FIELD	512:22	512:35	10	tif -> tif_dir . td_nstrips
LEAF_NODE	512:22	512:22	11	tif
LEAF_NODE	512:25	512:25	11	->
LEAF_NODE	512:27	512:27	11	tif_dir
LEAF_NODE	512:34	512:34	11	.
LEAF_NODE	512:35	512:35	11	td_nstrips
LEAF_NODE	512:45	512:45	9	)
LEAF_NODE	512:46	512:46	7	;
JUMP_STATEMENT	513:2	513:25	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	513:2	513:2	7	return
LEAF_NODE	513:2	513:2	8	return
DESTINATION	513:9	513:9	7	( ( tmsize_t ) ( - 1 ) )
EXPR	513:9	513:24	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	513:9	513:9	9	(
LEAF_NODE	513:10	513:10	9	(
TYPE_NAME	513:11	513:11	9	tmsize_t
LEAF_NODE	513:11	513:11	10	tmsize_t
LEAF_NODE	513:19	513:19	9	)
LEAF_NODE	513:20	513:20	9	(
UNARY_EXPR	513:21	513:22	9	- 1
UNARY_OPERATOR	513:21	513:21	10	-
LEAF_NODE	513:21	513:21	11	-
FIELD	513:22	513:22	10	1
LEAF_NODE	513:22	513:22	11	1
LEAF_NODE	513:23	513:23	9	)
LEAF_NODE	513:24	513:24	9	)
LEAF_NODE	513:25	513:25	7	;
LEAF_NODE	514:1	514:1	5	}
JUMP_STATEMENT	515:1	516:25	3	return ( TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc ) ? cc : ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	515:1	515:1	4	return
LEAF_NODE	515:1	515:1	5	return
DESTINATION	515:8	515:8	4	( TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc ) ? cc : ( tmsize_t ) ( - 1 ) )
EXPR	515:8	516:24	5	( TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc ) ? cc : ( tmsize_t ) ( - 1 ) )
LEAF_NODE	515:8	515:8	6	(
COND_EXPR	515:9	516:23	6	TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc ) ? cc : ( tmsize_t ) ( - 1 )
CONDITION	515:9	515:9	7	TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc )
FUNCTION_CALL	515:9	515:55	8	TIFFAppendToStrip ( tif , tile , ( uint8 * ) data , cc )
CALLEE	515:9	515:9	9	TIFFAppendToStrip
LEAF_NODE	515:9	515:9	10	TIFFAppendToStrip
LEAF_NODE	515:26	515:26	9	(
ARGUMENT	515:27	515:27	9	tif
FIELD	515:27	515:27	10	tif
LEAF_NODE	515:27	515:27	11	tif
LEAF_NODE	515:30	515:30	9	,
ARGUMENT	515:32	515:32	9	tile
FIELD	515:32	515:32	10	tile
LEAF_NODE	515:32	515:32	11	tile
LEAF_NODE	515:36	515:36	9	,
ARGUMENT	515:38	515:47	9	( uint8 * ) data
LEAF_NODE	515:38	515:38	10	(
TYPE_NAME	515:39	515:39	10	uint8
LEAF_NODE	515:39	515:39	11	uint8
LEAF_NODE	515:44	515:44	10	*
LEAF_NODE	515:45	515:45	10	)
FIELD	515:47	515:47	10	data
LEAF_NODE	515:47	515:47	11	data
LEAF_NODE	515:51	515:51	9	,
ARGUMENT	515:53	515:53	9	cc
FIELD	515:53	515:53	10	cc
LEAF_NODE	515:53	515:53	11	cc
LEAF_NODE	515:55	515:55	9	)
LEAF_NODE	515:57	515:57	7	?
EXPR	516:5	516:5	7	cc
FIELD	516:5	516:5	8	cc
LEAF_NODE	516:5	516:5	9	cc
LEAF_NODE	516:8	516:8	7	:
LEAF_NODE	516:10	516:10	7	(
TYPE_NAME	516:11	516:11	7	tmsize_t
LEAF_NODE	516:11	516:11	8	tmsize_t
LEAF_NODE	516:19	516:19	7	)
LEAF_NODE	516:20	516:20	7	(
UNARY_EXPR	516:21	516:22	7	- 1
UNARY_OPERATOR	516:21	516:21	8	-
LEAF_NODE	516:21	516:21	9	-
FIELD	516:22	516:22	8	1
LEAF_NODE	516:22	516:22	9	1
LEAF_NODE	516:23	516:23	7	)
LEAF_NODE	516:24	516:24	6	)
LEAF_NODE	516:25	516:25	4	;
LEAF_NODE	517:0	517:0	2	}
FUNCTION_DEF	522:0	555:0	1	
RETURN_TYPE	522:0	522:0	2	int
TYPE_NAME	522:0	522:0	3	int
LEAF_NODE	522:0	522:0	4	int
FUNCTION_NAME	523:0	523:0	2	TIFFSetupStrips
LEAF_NODE	523:0	523:0	3	TIFFSetupStrips
PARAMETER_LIST	523:15	523:25	2	( TIFF * tif )
LEAF_NODE	523:15	523:15	3	(
PARAMETER_DECL	523:16	523:22	3	TIFF * tif
TYPE	523:16	523:20	4	TIFF *
TYPE_NAME	523:16	523:16	5	TIFF
LEAF_NODE	523:16	523:16	6	TIFF
POINTER	523:20	523:20	5	*
LEAF_NODE	523:20	523:20	6	*
NAME	523:22	523:22	4	tif
LEAF_NODE	523:22	523:22	5	tif
LEAF_NODE	523:25	523:25	3	)
LEAF_NODE	524:0	524:0	2	{
STATEMENTS	525:1	554:1	2	
SIMPLE_DECL	525:1	525:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	525:1	525:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	525:1	525:14	5	TIFFDirectory *
TYPE_NAME	525:1	525:1	6	TIFFDirectory
LEAF_NODE	525:1	525:1	7	TIFFDirectory
POINTER	525:14	525:14	6	*
LEAF_NODE	525:14	525:14	7	*
NAME	525:16	525:16	5	td
LEAF_NODE	525:16	525:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	525:16	525:16	5	td = & tif -> tif_dir
ASSIGN	525:16	525:21	6	td = & tif -> tif_dir
LVAL	525:16	525:16	7	td
NAME	525:16	525:16	8	td
LEAF_NODE	525:16	525:16	9	td
ASSIGN_OP	525:19	525:19	7	=
LEAF_NODE	525:19	525:19	8	=
RVAL	525:21	525:21	7	& tif -> tif_dir
UNARY_EXPR	525:21	525:22	8	& tif -> tif_dir
UNARY_OPERATOR	525:21	525:21	9	&
LEAF_NODE	525:21	525:21	10	&
FIELD	525:22	525:27	9	tif -> tif_dir
LEAF_NODE	525:22	525:22	10	tif
LEAF_NODE	525:25	525:25	10	->
LEAF_NODE	525:27	525:27	10	tif_dir
LEAF_NODE	525:34	525:34	4	;
SELECTION	527:1	528:2	3	
KEYWORD	527:1	527:1	4	if
LEAF_NODE	527:1	527:1	5	if
LEAF_NODE	527:4	527:4	4	(
CONDITION	527:5	527:5	4	isTiled ( tif )
EXPR	527:5	527:5	5	isTiled ( tif )
FUNCTION_CALL	527:5	527:16	6	isTiled ( tif )
CALLEE	527:5	527:5	7	isTiled
LEAF_NODE	527:5	527:5	8	isTiled
LEAF_NODE	527:12	527:12	7	(
ARGUMENT	527:13	527:13	7	tif
FIELD	527:13	527:13	8	tif
LEAF_NODE	527:13	527:13	9	tif
LEAF_NODE	527:16	527:16	7	)
LEAF_NODE	527:17	527:17	4	)
STATEMENTS	528:2	528:2	4	
EXPR_STATEMENT	528:2	530:50	5	td -> td_stripsperimage = isUnspecified ( tif , FIELD_TILEDIMENSIONS ) ? td -> td_samplesperpixel : TIFFNumberOfTiles ( tif ) ;
EXPR	528:2	528:2	6	td -> td_stripsperimage = isUnspecified ( tif , FIELD_TILEDIMENSIONS ) ? td -> td_samplesperpixel : TIFFNumberOfTiles ( tif )
ASSIGN	528:2	529:6	7	td -> td_stripsperimage = isUnspecified ( tif , FIELD_TILEDIMENSIONS ) ? td -> td_samplesperpixel : TIFFNumberOfTiles ( tif )
LVAL	528:2	528:2	8	td -> td_stripsperimage
FIELD	528:2	528:6	9	td -> td_stripsperimage
LEAF_NODE	528:2	528:2	10	td
LEAF_NODE	528:4	528:4	10	->
LEAF_NODE	528:6	528:6	10	td_stripsperimage
ASSIGN_OP	528:24	528:24	8	=
LEAF_NODE	528:24	528:24	9	=
RVAL	529:6	529:6	8	isUnspecified ( tif , FIELD_TILEDIMENSIONS ) ? td -> td_samplesperpixel : TIFFNumberOfTiles ( tif )
COND_EXPR	529:6	530:28	9	isUnspecified ( tif , FIELD_TILEDIMENSIONS ) ? td -> td_samplesperpixel : TIFFNumberOfTiles ( tif )
CONDITION	529:6	529:6	10	isUnspecified ( tif , FIELD_TILEDIMENSIONS )
FUNCTION_CALL	529:6	529:45	11	isUnspecified ( tif , FIELD_TILEDIMENSIONS )
CALLEE	529:6	529:6	12	isUnspecified
LEAF_NODE	529:6	529:6	13	isUnspecified
LEAF_NODE	529:19	529:19	12	(
ARGUMENT	529:20	529:20	12	tif
FIELD	529:20	529:20	13	tif
LEAF_NODE	529:20	529:20	14	tif
LEAF_NODE	529:23	529:23	12	,
ARGUMENT	529:25	529:25	12	FIELD_TILEDIMENSIONS
FIELD	529:25	529:25	13	FIELD_TILEDIMENSIONS
LEAF_NODE	529:25	529:25	14	FIELD_TILEDIMENSIONS
LEAF_NODE	529:45	529:45	12	)
LEAF_NODE	529:47	529:47	10	?
EXPR	530:3	530:3	10	td -> td_samplesperpixel
FIELD	530:3	530:7	11	td -> td_samplesperpixel
LEAF_NODE	530:3	530:3	12	td
LEAF_NODE	530:5	530:5	12	->
LEAF_NODE	530:7	530:7	12	td_samplesperpixel
LEAF_NODE	530:26	530:26	10	:
FUNCTION_CALL	530:28	530:49	10	TIFFNumberOfTiles ( tif )
CALLEE	530:28	530:28	11	TIFFNumberOfTiles
LEAF_NODE	530:28	530:28	12	TIFFNumberOfTiles
LEAF_NODE	530:45	530:45	11	(
ARGUMENT	530:46	530:46	11	tif
FIELD	530:46	530:46	12	tif
LEAF_NODE	530:46	530:46	13	tif
LEAF_NODE	530:49	530:49	11	)
LEAF_NODE	530:50	530:50	6	;
SELECTION	531:1	532:2	3	
KEYWORD	531:1	531:1	4	else
LEAF_NODE	531:1	531:1	5	else
STATEMENTS	532:2	532:2	4	
EXPR_STATEMENT	532:2	534:51	5	td -> td_stripsperimage = isUnspecified ( tif , FIELD_ROWSPERSTRIP ) ? td -> td_samplesperpixel : TIFFNumberOfStrips ( tif ) ;
EXPR	532:2	532:2	6	td -> td_stripsperimage = isUnspecified ( tif , FIELD_ROWSPERSTRIP ) ? td -> td_samplesperpixel : TIFFNumberOfStrips ( tif )
ASSIGN	532:2	533:6	7	td -> td_stripsperimage = isUnspecified ( tif , FIELD_ROWSPERSTRIP ) ? td -> td_samplesperpixel : TIFFNumberOfStrips ( tif )
LVAL	532:2	532:2	8	td -> td_stripsperimage
FIELD	532:2	532:6	9	td -> td_stripsperimage
LEAF_NODE	532:2	532:2	10	td
LEAF_NODE	532:4	532:4	10	->
LEAF_NODE	532:6	532:6	10	td_stripsperimage
ASSIGN_OP	532:24	532:24	8	=
LEAF_NODE	532:24	532:24	9	=
RVAL	533:6	533:6	8	isUnspecified ( tif , FIELD_ROWSPERSTRIP ) ? td -> td_samplesperpixel : TIFFNumberOfStrips ( tif )
COND_EXPR	533:6	534:28	9	isUnspecified ( tif , FIELD_ROWSPERSTRIP ) ? td -> td_samplesperpixel : TIFFNumberOfStrips ( tif )
CONDITION	533:6	533:6	10	isUnspecified ( tif , FIELD_ROWSPERSTRIP )
FUNCTION_CALL	533:6	533:43	11	isUnspecified ( tif , FIELD_ROWSPERSTRIP )
CALLEE	533:6	533:6	12	isUnspecified
LEAF_NODE	533:6	533:6	13	isUnspecified
LEAF_NODE	533:19	533:19	12	(
ARGUMENT	533:20	533:20	12	tif
FIELD	533:20	533:20	13	tif
LEAF_NODE	533:20	533:20	14	tif
LEAF_NODE	533:23	533:23	12	,
ARGUMENT	533:25	533:25	12	FIELD_ROWSPERSTRIP
FIELD	533:25	533:25	13	FIELD_ROWSPERSTRIP
LEAF_NODE	533:25	533:25	14	FIELD_ROWSPERSTRIP
LEAF_NODE	533:43	533:43	12	)
LEAF_NODE	533:45	533:45	10	?
EXPR	534:3	534:3	10	td -> td_samplesperpixel
FIELD	534:3	534:7	11	td -> td_samplesperpixel
LEAF_NODE	534:3	534:3	12	td
LEAF_NODE	534:5	534:5	12	->
LEAF_NODE	534:7	534:7	12	td_samplesperpixel
LEAF_NODE	534:26	534:26	10	:
FUNCTION_CALL	534:28	534:50	10	TIFFNumberOfStrips ( tif )
CALLEE	534:28	534:28	11	TIFFNumberOfStrips
LEAF_NODE	534:28	534:28	12	TIFFNumberOfStrips
LEAF_NODE	534:46	534:46	11	(
ARGUMENT	534:47	534:47	11	tif
FIELD	534:47	534:47	12	tif
LEAF_NODE	534:47	534:47	13	tif
LEAF_NODE	534:50	534:50	11	)
LEAF_NODE	534:51	534:51	6	;
EXPR_STATEMENT	535:1	535:39	3	td -> td_nstrips = td -> td_stripsperimage ;
EXPR	535:1	535:1	4	td -> td_nstrips = td -> td_stripsperimage
ASSIGN	535:1	535:18	5	td -> td_nstrips = td -> td_stripsperimage
LVAL	535:1	535:1	6	td -> td_nstrips
FIELD	535:1	535:5	7	td -> td_nstrips
LEAF_NODE	535:1	535:1	8	td
LEAF_NODE	535:3	535:3	8	->
LEAF_NODE	535:5	535:5	8	td_nstrips
ASSIGN_OP	535:16	535:16	6	=
LEAF_NODE	535:16	535:16	7	=
RVAL	535:18	535:18	6	td -> td_stripsperimage
FIELD	535:18	535:22	7	td -> td_stripsperimage
LEAF_NODE	535:18	535:18	8	td
LEAF_NODE	535:20	535:20	8	->
LEAF_NODE	535:22	535:22	8	td_stripsperimage
LEAF_NODE	535:39	535:39	4	;
SELECTION	536:1	537:2	3	
KEYWORD	536:1	536:1	4	if
LEAF_NODE	536:1	536:1	5	if
LEAF_NODE	536:4	536:4	4	(
CONDITION	536:5	536:5	4	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	536:5	536:28	5	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	536:5	536:9	6	td -> td_planarconfig
LEAF_NODE	536:5	536:5	7	td
LEAF_NODE	536:7	536:7	7	->
LEAF_NODE	536:9	536:9	7	td_planarconfig
EQ_OPERATOR	536:25	536:25	6	==
LEAF_NODE	536:25	536:25	7	==
FIELD	536:28	536:28	6	PLANARCONFIG_SEPARATE
LEAF_NODE	536:28	536:28	7	PLANARCONFIG_SEPARATE
LEAF_NODE	536:49	536:49	4	)
STATEMENTS	537:2	537:2	4	
EXPR_STATEMENT	537:2	537:49	5	td -> td_stripsperimage /= td -> td_samplesperpixel ;
EXPR	537:2	537:2	6	td -> td_stripsperimage /= td -> td_samplesperpixel
ASSIGN	537:2	537:27	7	td -> td_stripsperimage /= td -> td_samplesperpixel
LVAL	537:2	537:2	8	td -> td_stripsperimage
FIELD	537:2	537:6	9	td -> td_stripsperimage
LEAF_NODE	537:2	537:2	10	td
LEAF_NODE	537:4	537:4	10	->
LEAF_NODE	537:6	537:6	10	td_stripsperimage
ASSIGN_OP	537:24	537:24	8	/=
LEAF_NODE	537:24	537:24	9	/=
RVAL	537:27	537:27	8	td -> td_samplesperpixel
FIELD	537:27	537:31	9	td -> td_samplesperpixel
LEAF_NODE	537:27	537:27	10	td
LEAF_NODE	537:29	537:29	10	->
LEAF_NODE	537:31	537:31	10	td_samplesperpixel
LEAF_NODE	537:49	537:49	6	;
EXPR_STATEMENT	538:1	540:58	3	td -> td_stripoffset_p = ( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripOffsets\" array" ) ;
EXPR	538:1	538:1	4	td -> td_stripoffset_p = ( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripOffsets\" array" )
ASSIGN	538:1	538:24	5	td -> td_stripoffset_p = ( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripOffsets\" array" )
LVAL	538:1	538:1	6	td -> td_stripoffset_p
FIELD	538:1	538:5	7	td -> td_stripoffset_p
LEAF_NODE	538:1	538:1	8	td
LEAF_NODE	538:3	538:3	8	->
LEAF_NODE	538:5	538:5	8	td_stripoffset_p
ASSIGN_OP	538:22	538:22	6	=
LEAF_NODE	538:22	538:22	7	=
RVAL	538:24	539:12	6	( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripOffsets\" array" )
LEAF_NODE	538:24	538:24	7	(
TYPE_NAME	538:25	538:25	7	uint64
LEAF_NODE	538:25	538:25	8	uint64
LEAF_NODE	538:32	538:32	7	*
LEAF_NODE	538:33	538:33	7	)
FUNCTION_CALL	539:12	540:57	7	_TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripOffsets\" array" )
CALLEE	539:12	539:12	8	_TIFFCheckMalloc
LEAF_NODE	539:12	539:12	9	_TIFFCheckMalloc
LEAF_NODE	539:28	539:28	8	(
ARGUMENT	539:29	539:29	8	tif
FIELD	539:29	539:29	9	tif
LEAF_NODE	539:29	539:29	10	tif
LEAF_NODE	539:32	539:32	8	,
ARGUMENT	539:34	539:34	8	td -> td_nstrips
FIELD	539:34	539:38	9	td -> td_nstrips
LEAF_NODE	539:34	539:34	10	td
LEAF_NODE	539:36	539:36	10	->
LEAF_NODE	539:38	539:38	10	td_nstrips
LEAF_NODE	539:48	539:48	8	,
ARGUMENT	539:50	539:50	8	sizeof ( uint64 )
FUNCTION_CALL	539:50	539:64	9	sizeof ( uint64 )
CALLEE	539:50	539:50	10	sizeof
LEAF_NODE	539:50	539:50	11	sizeof
LEAF_NODE	539:57	539:57	10	(
ARGUMENT	539:58	539:58	10	uint64
FIELD	539:58	539:58	11	uint64
LEAF_NODE	539:58	539:58	12	uint64
LEAF_NODE	539:64	539:64	10	)
LEAF_NODE	539:65	539:65	8	,
ARGUMENT	540:29	540:29	8	"for \"StripOffsets\" array"
FIELD	540:29	540:29	9	"for \"StripOffsets\" array"
LEAF_NODE	540:29	540:29	10	"for \"StripOffsets\" array"
LEAF_NODE	540:57	540:57	8	)
LEAF_NODE	540:58	540:58	4	;
EXPR_STATEMENT	541:1	543:61	3	td -> td_stripbytecount_p = ( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripByteCounts\" array" ) ;
EXPR	541:1	541:1	4	td -> td_stripbytecount_p = ( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripByteCounts\" array" )
ASSIGN	541:1	541:27	5	td -> td_stripbytecount_p = ( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripByteCounts\" array" )
LVAL	541:1	541:1	6	td -> td_stripbytecount_p
FIELD	541:1	541:5	7	td -> td_stripbytecount_p
LEAF_NODE	541:1	541:1	8	td
LEAF_NODE	541:3	541:3	8	->
LEAF_NODE	541:5	541:5	8	td_stripbytecount_p
ASSIGN_OP	541:25	541:25	6	=
LEAF_NODE	541:25	541:25	7	=
RVAL	541:27	542:12	6	( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripByteCounts\" array" )
LEAF_NODE	541:27	541:27	7	(
TYPE_NAME	541:28	541:28	7	uint64
LEAF_NODE	541:28	541:28	8	uint64
LEAF_NODE	541:35	541:35	7	*
LEAF_NODE	541:36	541:36	7	)
FUNCTION_CALL	542:12	543:60	7	_TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripByteCounts\" array" )
CALLEE	542:12	542:12	8	_TIFFCheckMalloc
LEAF_NODE	542:12	542:12	9	_TIFFCheckMalloc
LEAF_NODE	542:28	542:28	8	(
ARGUMENT	542:29	542:29	8	tif
FIELD	542:29	542:29	9	tif
LEAF_NODE	542:29	542:29	10	tif
LEAF_NODE	542:32	542:32	8	,
ARGUMENT	542:34	542:34	8	td -> td_nstrips
FIELD	542:34	542:38	9	td -> td_nstrips
LEAF_NODE	542:34	542:34	10	td
LEAF_NODE	542:36	542:36	10	->
LEAF_NODE	542:38	542:38	10	td_nstrips
LEAF_NODE	542:48	542:48	8	,
ARGUMENT	542:50	542:50	8	sizeof ( uint64 )
FUNCTION_CALL	542:50	542:64	9	sizeof ( uint64 )
CALLEE	542:50	542:50	10	sizeof
LEAF_NODE	542:50	542:50	11	sizeof
LEAF_NODE	542:57	542:57	10	(
ARGUMENT	542:58	542:58	10	uint64
FIELD	542:58	542:58	11	uint64
LEAF_NODE	542:58	542:58	12	uint64
LEAF_NODE	542:64	542:64	10	)
LEAF_NODE	542:65	542:65	8	,
ARGUMENT	543:29	543:29	8	"for \"StripByteCounts\" array"
FIELD	543:29	543:29	9	"for \"StripByteCounts\" array"
LEAF_NODE	543:29	543:29	10	"for \"StripByteCounts\" array"
LEAF_NODE	543:60	543:60	8	)
LEAF_NODE	543:61	543:61	4	;
SELECTION	544:1	545:2	3	
KEYWORD	544:1	544:1	4	if
LEAF_NODE	544:1	544:1	5	if
LEAF_NODE	544:4	544:4	4	(
CONDITION	544:5	544:5	4	td -> td_stripoffset_p == NULL || td -> td_stripbytecount_p == NULL
EXPR	544:5	544:5	5	td -> td_stripoffset_p == NULL || td -> td_stripbytecount_p == NULL
OR	544:5	544:37	6	td -> td_stripoffset_p == NULL || td -> td_stripbytecount_p == NULL
EXPR	544:5	544:29	7	td -> td_stripoffset_p == NULL
FIELD	544:5	544:9	8	td -> td_stripoffset_p
LEAF_NODE	544:5	544:5	9	td
LEAF_NODE	544:7	544:7	9	->
LEAF_NODE	544:9	544:9	9	td_stripoffset_p
EQ_OPERATOR	544:26	544:26	8	==
LEAF_NODE	544:26	544:26	9	==
FIELD	544:29	544:29	8	NULL
LEAF_NODE	544:29	544:29	9	NULL
LEAF_NODE	544:34	544:34	7	||
EXPR	544:37	544:64	7	td -> td_stripbytecount_p == NULL
FIELD	544:37	544:41	8	td -> td_stripbytecount_p
LEAF_NODE	544:37	544:37	9	td
LEAF_NODE	544:39	544:39	9	->
LEAF_NODE	544:41	544:41	9	td_stripbytecount_p
EQ_OPERATOR	544:61	544:61	8	==
LEAF_NODE	544:61	544:61	9	==
FIELD	544:64	544:64	8	NULL
LEAF_NODE	544:64	544:64	9	NULL
LEAF_NODE	544:68	544:68	4	)
STATEMENTS	545:2	545:2	4	
JUMP_STATEMENT	545:2	545:12	5	return ( 0 ) ;
KEYWORD	545:2	545:2	6	return
LEAF_NODE	545:2	545:2	7	return
DESTINATION	545:9	545:9	6	( 0 )
EXPR	545:9	545:11	7	( 0 )
LEAF_NODE	545:9	545:9	8	(
FIELD	545:10	545:10	8	0
LEAF_NODE	545:10	545:10	9	0
LEAF_NODE	545:11	545:11	8	)
LEAF_NODE	545:12	545:12	6	;
EXPR_STATEMENT	550:1	550:69	3	_TIFFmemset ( td -> td_stripoffset_p , 0 , td -> td_nstrips * sizeof ( uint64 ) ) ;
EXPR	550:1	550:1	4	_TIFFmemset ( td -> td_stripoffset_p , 0 , td -> td_nstrips * sizeof ( uint64 ) )
FUNCTION_CALL	550:1	550:68	5	_TIFFmemset ( td -> td_stripoffset_p , 0 , td -> td_nstrips * sizeof ( uint64 ) )
CALLEE	550:1	550:1	6	_TIFFmemset
LEAF_NODE	550:1	550:1	7	_TIFFmemset
LEAF_NODE	550:12	550:12	6	(
ARGUMENT	550:13	550:13	6	td -> td_stripoffset_p
FIELD	550:13	550:17	7	td -> td_stripoffset_p
LEAF_NODE	550:13	550:13	8	td
LEAF_NODE	550:15	550:15	8	->
LEAF_NODE	550:17	550:17	8	td_stripoffset_p
LEAF_NODE	550:33	550:33	6	,
ARGUMENT	550:35	550:35	6	0
FIELD	550:35	550:35	7	0
LEAF_NODE	550:35	550:35	8	0
LEAF_NODE	550:36	550:36	6	,
ARGUMENT	550:38	550:53	6	td -> td_nstrips * sizeof ( uint64 )
FIELD	550:38	550:42	7	td -> td_nstrips
LEAF_NODE	550:38	550:38	8	td
LEAF_NODE	550:40	550:40	8	->
LEAF_NODE	550:42	550:42	8	td_nstrips
LEAF_NODE	550:52	550:52	7	*
FUNCTION_CALL	550:53	550:67	7	sizeof ( uint64 )
CALLEE	550:53	550:53	8	sizeof
LEAF_NODE	550:53	550:53	9	sizeof
LEAF_NODE	550:60	550:60	8	(
ARGUMENT	550:61	550:61	8	uint64
FIELD	550:61	550:61	9	uint64
LEAF_NODE	550:61	550:61	10	uint64
LEAF_NODE	550:67	550:67	8	)
LEAF_NODE	550:68	550:68	6	)
LEAF_NODE	550:69	550:69	4	;
EXPR_STATEMENT	551:1	551:72	3	_TIFFmemset ( td -> td_stripbytecount_p , 0 , td -> td_nstrips * sizeof ( uint64 ) ) ;
EXPR	551:1	551:1	4	_TIFFmemset ( td -> td_stripbytecount_p , 0 , td -> td_nstrips * sizeof ( uint64 ) )
FUNCTION_CALL	551:1	551:71	5	_TIFFmemset ( td -> td_stripbytecount_p , 0 , td -> td_nstrips * sizeof ( uint64 ) )
CALLEE	551:1	551:1	6	_TIFFmemset
LEAF_NODE	551:1	551:1	7	_TIFFmemset
LEAF_NODE	551:12	551:12	6	(
ARGUMENT	551:13	551:13	6	td -> td_stripbytecount_p
FIELD	551:13	551:17	7	td -> td_stripbytecount_p
LEAF_NODE	551:13	551:13	8	td
LEAF_NODE	551:15	551:15	8	->
LEAF_NODE	551:17	551:17	8	td_stripbytecount_p
LEAF_NODE	551:36	551:36	6	,
ARGUMENT	551:38	551:38	6	0
FIELD	551:38	551:38	7	0
LEAF_NODE	551:38	551:38	8	0
LEAF_NODE	551:39	551:39	6	,
ARGUMENT	551:41	551:56	6	td -> td_nstrips * sizeof ( uint64 )
FIELD	551:41	551:45	7	td -> td_nstrips
LEAF_NODE	551:41	551:41	8	td
LEAF_NODE	551:43	551:43	8	->
LEAF_NODE	551:45	551:45	8	td_nstrips
LEAF_NODE	551:55	551:55	7	*
FUNCTION_CALL	551:56	551:70	7	sizeof ( uint64 )
CALLEE	551:56	551:56	8	sizeof
LEAF_NODE	551:56	551:56	9	sizeof
LEAF_NODE	551:63	551:63	8	(
ARGUMENT	551:64	551:64	8	uint64
FIELD	551:64	551:64	9	uint64
LEAF_NODE	551:64	551:64	10	uint64
LEAF_NODE	551:70	551:70	8	)
LEAF_NODE	551:71	551:71	6	)
LEAF_NODE	551:72	551:72	4	;
EXPR_STATEMENT	552:1	552:41	3	TIFFSetFieldBit ( tif , FIELD_STRIPOFFSETS ) ;
EXPR	552:1	552:1	4	TIFFSetFieldBit ( tif , FIELD_STRIPOFFSETS )
FUNCTION_CALL	552:1	552:40	5	TIFFSetFieldBit ( tif , FIELD_STRIPOFFSETS )
CALLEE	552:1	552:1	6	TIFFSetFieldBit
LEAF_NODE	552:1	552:1	7	TIFFSetFieldBit
LEAF_NODE	552:16	552:16	6	(
ARGUMENT	552:17	552:17	6	tif
FIELD	552:17	552:17	7	tif
LEAF_NODE	552:17	552:17	8	tif
LEAF_NODE	552:20	552:20	6	,
ARGUMENT	552:22	552:22	6	FIELD_STRIPOFFSETS
FIELD	552:22	552:22	7	FIELD_STRIPOFFSETS
LEAF_NODE	552:22	552:22	8	FIELD_STRIPOFFSETS
LEAF_NODE	552:40	552:40	6	)
LEAF_NODE	552:41	552:41	4	;
EXPR_STATEMENT	553:1	553:44	3	TIFFSetFieldBit ( tif , FIELD_STRIPBYTECOUNTS ) ;
EXPR	553:1	553:1	4	TIFFSetFieldBit ( tif , FIELD_STRIPBYTECOUNTS )
FUNCTION_CALL	553:1	553:43	5	TIFFSetFieldBit ( tif , FIELD_STRIPBYTECOUNTS )
CALLEE	553:1	553:1	6	TIFFSetFieldBit
LEAF_NODE	553:1	553:1	7	TIFFSetFieldBit
LEAF_NODE	553:16	553:16	6	(
ARGUMENT	553:17	553:17	6	tif
FIELD	553:17	553:17	7	tif
LEAF_NODE	553:17	553:17	8	tif
LEAF_NODE	553:20	553:20	6	,
ARGUMENT	553:22	553:22	6	FIELD_STRIPBYTECOUNTS
FIELD	553:22	553:22	7	FIELD_STRIPBYTECOUNTS
LEAF_NODE	553:22	553:22	8	FIELD_STRIPBYTECOUNTS
LEAF_NODE	553:43	553:43	6	)
LEAF_NODE	553:44	553:44	4	;
JUMP_STATEMENT	554:1	554:11	3	return ( 1 ) ;
KEYWORD	554:1	554:1	4	return
LEAF_NODE	554:1	554:1	5	return
DESTINATION	554:8	554:8	4	( 1 )
EXPR	554:8	554:10	5	( 1 )
LEAF_NODE	554:8	554:8	6	(
FIELD	554:9	554:9	6	1
LEAF_NODE	554:9	554:9	7	1
LEAF_NODE	554:10	554:10	6	)
LEAF_NODE	554:11	554:11	4	;
LEAF_NODE	555:0	555:0	2	}
FUNCTION_DEF	564:0	644:0	1	
RETURN_TYPE	564:0	564:0	2	int
TYPE_NAME	564:0	564:0	3	int
LEAF_NODE	564:0	564:0	4	int
FUNCTION_NAME	565:0	565:0	2	TIFFWriteCheck
LEAF_NODE	565:0	565:0	3	TIFFWriteCheck
PARAMETER_LIST	565:14	565:55	2	( TIFF * tif , int tiles , const char * module )
LEAF_NODE	565:14	565:14	3	(
PARAMETER_DECL	565:15	565:21	3	TIFF * tif
TYPE	565:15	565:19	4	TIFF *
TYPE_NAME	565:15	565:15	5	TIFF
LEAF_NODE	565:15	565:15	6	TIFF
POINTER	565:19	565:19	5	*
LEAF_NODE	565:19	565:19	6	*
NAME	565:21	565:21	4	tif
LEAF_NODE	565:21	565:21	5	tif
LEAF_NODE	565:24	565:24	3	,
PARAMETER_DECL	565:26	565:30	3	int tiles
TYPE	565:26	565:26	4	int
TYPE_NAME	565:26	565:26	5	int
LEAF_NODE	565:26	565:26	6	int
NAME	565:30	565:30	4	tiles
LEAF_NODE	565:30	565:30	5	tiles
LEAF_NODE	565:35	565:35	3	,
PARAMETER_DECL	565:37	565:49	3	const char * module
TYPE	565:37	565:47	4	const char *
TYPE_NAME	565:37	565:43	5	const char
LEAF_NODE	565:37	565:37	6	const
LEAF_NODE	565:43	565:43	6	char
POINTER	565:47	565:47	5	*
LEAF_NODE	565:47	565:47	6	*
NAME	565:49	565:49	4	module
LEAF_NODE	565:49	565:49	5	module
LEAF_NODE	565:55	565:55	3	)
LEAF_NODE	566:0	566:0	2	{
STATEMENTS	567:1	643:1	2	
SELECTION	567:1	567:32	3	
KEYWORD	567:1	567:1	4	if
LEAF_NODE	567:1	567:1	5	if
LEAF_NODE	567:4	567:4	4	(
CONDITION	567:5	567:5	4	tif -> tif_mode == O_RDONLY
EXPR	567:5	567:22	5	tif -> tif_mode == O_RDONLY
FIELD	567:5	567:10	6	tif -> tif_mode
LEAF_NODE	567:5	567:5	7	tif
LEAF_NODE	567:8	567:8	7	->
LEAF_NODE	567:10	567:10	7	tif_mode
EQ_OPERATOR	567:19	567:19	6	==
LEAF_NODE	567:19	567:19	7	==
FIELD	567:22	567:22	6	O_RDONLY
LEAF_NODE	567:22	567:22	7	O_RDONLY
LEAF_NODE	567:30	567:30	4	)
STATEMENTS	567:32	570:1	4	
LEAF_NODE	567:32	567:32	5	{
STATEMENTS	568:2	569:2	5	
EXPR_STATEMENT	568:2	568:72	6	TIFFErrorExt ( tif -> tif_clientdata , module , "File not open for writing" ) ;
EXPR	568:2	568:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "File not open for writing" )
FUNCTION_CALL	568:2	568:71	8	TIFFErrorExt ( tif -> tif_clientdata , module , "File not open for writing" )
CALLEE	568:2	568:2	9	TIFFErrorExt
LEAF_NODE	568:2	568:2	10	TIFFErrorExt
LEAF_NODE	568:14	568:14	9	(
ARGUMENT	568:15	568:15	9	tif -> tif_clientdata
FIELD	568:15	568:20	10	tif -> tif_clientdata
LEAF_NODE	568:15	568:15	11	tif
LEAF_NODE	568:18	568:18	11	->
LEAF_NODE	568:20	568:20	11	tif_clientdata
LEAF_NODE	568:34	568:34	9	,
ARGUMENT	568:36	568:36	9	module
FIELD	568:36	568:36	10	module
LEAF_NODE	568:36	568:36	11	module
LEAF_NODE	568:42	568:42	9	,
ARGUMENT	568:44	568:44	9	"File not open for writing"
FIELD	568:44	568:44	10	"File not open for writing"
LEAF_NODE	568:44	568:44	11	"File not open for writing"
LEAF_NODE	568:71	568:71	9	)
LEAF_NODE	568:72	568:72	7	;
JUMP_STATEMENT	569:2	569:12	6	return ( 0 ) ;
KEYWORD	569:2	569:2	7	return
LEAF_NODE	569:2	569:2	8	return
DESTINATION	569:9	569:9	7	( 0 )
EXPR	569:9	569:11	8	( 0 )
LEAF_NODE	569:9	569:9	9	(
FIELD	569:10	569:10	9	0
LEAF_NODE	569:10	569:10	10	0
LEAF_NODE	569:11	569:11	9	)
LEAF_NODE	569:12	569:12	7	;
LEAF_NODE	570:1	570:1	5	}
SELECTION	571:1	571:27	3	
KEYWORD	571:1	571:1	4	if
LEAF_NODE	571:1	571:1	5	if
LEAF_NODE	571:4	571:4	4	(
CONDITION	571:5	571:5	4	tiles ^ isTiled ( tif )
EXPR	571:5	571:13	5	tiles ^ isTiled ( tif )
FIELD	571:5	571:5	6	tiles
LEAF_NODE	571:5	571:5	7	tiles
LEAF_NODE	571:11	571:11	6	^
FUNCTION_CALL	571:13	571:24	6	isTiled ( tif )
CALLEE	571:13	571:13	7	isTiled
LEAF_NODE	571:13	571:13	8	isTiled
LEAF_NODE	571:20	571:20	7	(
ARGUMENT	571:21	571:21	7	tif
FIELD	571:21	571:21	8	tif
LEAF_NODE	571:21	571:21	9	tif
LEAF_NODE	571:24	571:24	7	)
LEAF_NODE	571:25	571:25	4	)
STATEMENTS	571:27	576:1	4	
LEAF_NODE	571:27	571:27	5	{
STATEMENTS	572:2	575:2	5	
EXPR_STATEMENT	572:2	574:49	6	TIFFErrorExt ( tif -> tif_clientdata , module , tiles ? "Can not write tiles to a striped image" : "Can not write scanlines to a tiled image" ) ;
EXPR	572:2	572:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , tiles ? "Can not write tiles to a striped image" : "Can not write scanlines to a tiled image" )
FUNCTION_CALL	572:2	574:48	8	TIFFErrorExt ( tif -> tif_clientdata , module , tiles ? "Can not write tiles to a striped image" : "Can not write scanlines to a tiled image" )
CALLEE	572:2	572:2	9	TIFFErrorExt
LEAF_NODE	572:2	572:2	10	TIFFErrorExt
LEAF_NODE	572:14	572:14	9	(
ARGUMENT	572:15	572:15	9	tif -> tif_clientdata
FIELD	572:15	572:20	10	tif -> tif_clientdata
LEAF_NODE	572:15	572:15	11	tif
LEAF_NODE	572:18	572:18	11	->
LEAF_NODE	572:20	572:20	11	tif_clientdata
LEAF_NODE	572:34	572:34	9	,
ARGUMENT	572:36	572:36	9	module
FIELD	572:36	572:36	10	module
LEAF_NODE	572:36	572:36	11	module
LEAF_NODE	572:42	572:42	9	,
ARGUMENT	572:44	572:44	9	tiles ? "Can not write tiles to a striped image" : "Can not write scanlines to a tiled image"
COND_EXPR	572:44	574:6	10	tiles ? "Can not write tiles to a striped image" : "Can not write scanlines to a tiled image"
CONDITION	572:44	572:44	11	tiles
FIELD	572:44	572:44	12	tiles
LEAF_NODE	572:44	572:44	13	tiles
LEAF_NODE	572:50	572:50	11	?
EXPR	573:6	573:6	11	"Can not write tiles to a striped image"
FIELD	573:6	573:6	12	"Can not write tiles to a striped image"
LEAF_NODE	573:6	573:6	13	"Can not write tiles to a striped image"
LEAF_NODE	573:47	573:47	11	:
FIELD	574:6	574:6	11	"Can not write scanlines to a tiled image"
LEAF_NODE	574:6	574:6	12	"Can not write scanlines to a tiled image"
LEAF_NODE	574:48	574:48	9	)
LEAF_NODE	574:49	574:49	7	;
JUMP_STATEMENT	575:2	575:12	6	return ( 0 ) ;
KEYWORD	575:2	575:2	7	return
LEAF_NODE	575:2	575:2	8	return
DESTINATION	575:9	575:9	7	( 0 )
EXPR	575:9	575:11	8	( 0 )
LEAF_NODE	575:9	575:9	9	(
FIELD	575:10	575:10	9	0
LEAF_NODE	575:10	575:10	10	0
LEAF_NODE	575:11	575:11	9	)
LEAF_NODE	575:12	575:12	7	;
LEAF_NODE	576:1	576:1	5	}
EXPR_STATEMENT	578:8	578:31	3	_TIFFFillStriles ( tif ) ;
EXPR	578:8	578:8	4	_TIFFFillStriles ( tif )
FUNCTION_CALL	578:8	578:30	5	_TIFFFillStriles ( tif )
CALLEE	578:8	578:8	6	_TIFFFillStriles
LEAF_NODE	578:8	578:8	7	_TIFFFillStriles
LEAF_NODE	578:24	578:24	6	(
ARGUMENT	578:26	578:26	6	tif
FIELD	578:26	578:26	7	tif
LEAF_NODE	578:26	578:26	8	tif
LEAF_NODE	578:30	578:30	6	)
LEAF_NODE	578:31	578:31	4	;
SELECTION	590:1	590:48	3	
KEYWORD	590:1	590:1	4	if
LEAF_NODE	590:1	590:1	5	if
LEAF_NODE	590:4	590:4	4	(
CONDITION	590:5	590:5	4	! TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
EXPR	590:5	590:5	5	! TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
UNARY_EXPR	590:5	590:6	6	! TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
UNARY_OPERATOR	590:5	590:5	7	!
LEAF_NODE	590:5	590:5	8	!
FUNCTION_CALL	590:6	590:45	7	TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
CALLEE	590:6	590:6	8	TIFFFieldSet
LEAF_NODE	590:6	590:6	9	TIFFFieldSet
LEAF_NODE	590:18	590:18	8	(
ARGUMENT	590:19	590:19	8	tif
FIELD	590:19	590:19	9	tif
LEAF_NODE	590:19	590:19	10	tif
LEAF_NODE	590:22	590:22	8	,
ARGUMENT	590:24	590:24	8	FIELD_IMAGEDIMENSIONS
FIELD	590:24	590:24	9	FIELD_IMAGEDIMENSIONS
LEAF_NODE	590:24	590:24	10	FIELD_IMAGEDIMENSIONS
LEAF_NODE	590:45	590:45	8	)
LEAF_NODE	590:46	590:46	4	)
STATEMENTS	590:48	594:1	4	
LEAF_NODE	590:48	590:48	5	{
STATEMENTS	591:2	593:2	5	
EXPR_STATEMENT	591:2	592:52	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Must set \"ImageWidth\" before writing data" ) ;
EXPR	591:2	591:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Must set \"ImageWidth\" before writing data" )
FUNCTION_CALL	591:2	592:51	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Must set \"ImageWidth\" before writing data" )
CALLEE	591:2	591:2	9	TIFFErrorExt
LEAF_NODE	591:2	591:2	10	TIFFErrorExt
LEAF_NODE	591:14	591:14	9	(
ARGUMENT	591:15	591:15	9	tif -> tif_clientdata
FIELD	591:15	591:20	10	tif -> tif_clientdata
LEAF_NODE	591:15	591:15	11	tif
LEAF_NODE	591:18	591:18	11	->
LEAF_NODE	591:20	591:20	11	tif_clientdata
LEAF_NODE	591:34	591:34	9	,
ARGUMENT	591:36	591:36	9	module
FIELD	591:36	591:36	10	module
LEAF_NODE	591:36	591:36	11	module
LEAF_NODE	591:42	591:42	9	,
ARGUMENT	592:6	592:6	9	"Must set \"ImageWidth\" before writing data"
FIELD	592:6	592:6	10	"Must set \"ImageWidth\" before writing data"
LEAF_NODE	592:6	592:6	11	"Must set \"ImageWidth\" before writing data"
LEAF_NODE	592:51	592:51	9	)
LEAF_NODE	592:52	592:52	7	;
JUMP_STATEMENT	593:2	593:12	6	return ( 0 ) ;
KEYWORD	593:2	593:2	7	return
LEAF_NODE	593:2	593:2	8	return
DESTINATION	593:9	593:9	7	( 0 )
EXPR	593:9	593:11	8	( 0 )
LEAF_NODE	593:9	593:9	9	(
FIELD	593:10	593:10	9	0
LEAF_NODE	593:10	593:10	10	0
LEAF_NODE	593:11	593:11	9	)
LEAF_NODE	593:12	593:12	7	;
LEAF_NODE	594:1	594:1	5	}
SELECTION	595:1	595:43	3	
KEYWORD	595:1	595:1	4	if
LEAF_NODE	595:1	595:1	5	if
LEAF_NODE	595:4	595:4	4	(
CONDITION	595:5	595:5	4	tif -> tif_dir . td_samplesperpixel == 1
EXPR	595:5	595:40	5	tif -> tif_dir . td_samplesperpixel == 1
FIELD	595:5	595:18	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	595:5	595:5	7	tif
LEAF_NODE	595:8	595:8	7	->
LEAF_NODE	595:10	595:10	7	tif_dir
LEAF_NODE	595:17	595:17	7	.
LEAF_NODE	595:18	595:18	7	td_samplesperpixel
EQ_OPERATOR	595:37	595:37	6	==
LEAF_NODE	595:37	595:37	7	==
FIELD	595:40	595:40	6	1
LEAF_NODE	595:40	595:40	7	1
LEAF_NODE	595:41	595:41	4	)
STATEMENTS	595:43	604:1	4	
LEAF_NODE	595:43	595:43	5	{
STATEMENTS	602:2	602:2	5	
SELECTION	602:2	603:20	6	
KEYWORD	602:2	602:2	7	if
LEAF_NODE	602:2	602:2	8	if
LEAF_NODE	602:5	602:5	7	(
CONDITION	602:6	602:6	7	! TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
EXPR	602:6	602:6	8	! TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
UNARY_EXPR	602:6	602:7	9	! TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
UNARY_OPERATOR	602:6	602:6	10	!
LEAF_NODE	602:6	602:6	11	!
FUNCTION_CALL	602:7	602:43	10	TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
CALLEE	602:7	602:7	11	TIFFFieldSet
LEAF_NODE	602:7	602:7	12	TIFFFieldSet
LEAF_NODE	602:19	602:19	11	(
ARGUMENT	602:20	602:20	11	tif
FIELD	602:20	602:20	12	tif
LEAF_NODE	602:20	602:20	13	tif
LEAF_NODE	602:23	602:23	11	,
ARGUMENT	602:25	602:25	11	FIELD_PLANARCONFIG
FIELD	602:25	602:25	12	FIELD_PLANARCONFIG
LEAF_NODE	602:25	602:25	13	FIELD_PLANARCONFIG
LEAF_NODE	602:43	602:43	11	)
LEAF_NODE	602:44	602:44	7	)
STATEMENTS	603:20	603:20	7	
EXPR_STATEMENT	603:20	603:70	8	tif -> tif_dir . td_planarconfig = PLANARCONFIG_CONTIG ;
EXPR	603:20	603:20	9	tif -> tif_dir . td_planarconfig = PLANARCONFIG_CONTIG
ASSIGN	603:20	603:51	10	tif -> tif_dir . td_planarconfig = PLANARCONFIG_CONTIG
LVAL	603:20	603:20	11	tif -> tif_dir . td_planarconfig
FIELD	603:20	603:33	12	tif -> tif_dir . td_planarconfig
LEAF_NODE	603:20	603:20	13	tif
LEAF_NODE	603:23	603:23	13	->
LEAF_NODE	603:25	603:25	13	tif_dir
LEAF_NODE	603:32	603:32	13	.
LEAF_NODE	603:33	603:33	13	td_planarconfig
ASSIGN_OP	603:49	603:49	11	=
LEAF_NODE	603:49	603:49	12	=
RVAL	603:51	603:51	11	PLANARCONFIG_CONTIG
FIELD	603:51	603:51	12	PLANARCONFIG_CONTIG
LEAF_NODE	603:51	603:51	13	PLANARCONFIG_CONTIG
LEAF_NODE	603:70	603:70	9	;
LEAF_NODE	604:1	604:1	5	}
SELECTION	604:3	604:8	3	
KEYWORD	604:3	604:3	4	else
LEAF_NODE	604:3	604:3	5	else
STATEMENTS	604:8	610:1	4	
LEAF_NODE	604:8	604:8	5	{
STATEMENTS	605:2	605:2	5	
SELECTION	605:2	605:46	6	
KEYWORD	605:2	605:2	7	if
LEAF_NODE	605:2	605:2	8	if
LEAF_NODE	605:5	605:5	7	(
CONDITION	605:6	605:6	7	! TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
EXPR	605:6	605:6	8	! TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
UNARY_EXPR	605:6	605:7	9	! TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
UNARY_OPERATOR	605:6	605:6	10	!
LEAF_NODE	605:6	605:6	11	!
FUNCTION_CALL	605:7	605:43	10	TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
CALLEE	605:7	605:7	11	TIFFFieldSet
LEAF_NODE	605:7	605:7	12	TIFFFieldSet
LEAF_NODE	605:19	605:19	11	(
ARGUMENT	605:20	605:20	11	tif
FIELD	605:20	605:20	12	tif
LEAF_NODE	605:20	605:20	13	tif
LEAF_NODE	605:23	605:23	11	,
ARGUMENT	605:25	605:25	11	FIELD_PLANARCONFIG
FIELD	605:25	605:25	12	FIELD_PLANARCONFIG
LEAF_NODE	605:25	605:25	13	FIELD_PLANARCONFIG
LEAF_NODE	605:43	605:43	11	)
LEAF_NODE	605:44	605:44	7	)
STATEMENTS	605:46	609:2	7	
LEAF_NODE	605:46	605:46	8	{
STATEMENTS	606:3	608:3	8	
EXPR_STATEMENT	606:3	607:62	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Must set \"PlanarConfiguration\" before writing data" ) ;
EXPR	606:3	606:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Must set \"PlanarConfiguration\" before writing data" )
FUNCTION_CALL	606:3	607:61	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Must set \"PlanarConfiguration\" before writing data" )
CALLEE	606:3	606:3	12	TIFFErrorExt
LEAF_NODE	606:3	606:3	13	TIFFErrorExt
LEAF_NODE	606:15	606:15	12	(
ARGUMENT	606:16	606:16	12	tif -> tif_clientdata
FIELD	606:16	606:21	13	tif -> tif_clientdata
LEAF_NODE	606:16	606:16	14	tif
LEAF_NODE	606:19	606:19	14	->
LEAF_NODE	606:21	606:21	14	tif_clientdata
LEAF_NODE	606:35	606:35	12	,
ARGUMENT	606:37	606:37	12	module
FIELD	606:37	606:37	13	module
LEAF_NODE	606:37	606:37	14	module
LEAF_NODE	606:43	606:43	12	,
ARGUMENT	607:7	607:7	12	"Must set \"PlanarConfiguration\" before writing data"
FIELD	607:7	607:7	13	"Must set \"PlanarConfiguration\" before writing data"
LEAF_NODE	607:7	607:7	14	"Must set \"PlanarConfiguration\" before writing data"
LEAF_NODE	607:61	607:61	12	)
LEAF_NODE	607:62	607:62	10	;
JUMP_STATEMENT	608:3	608:13	9	return ( 0 ) ;
KEYWORD	608:3	608:3	10	return
LEAF_NODE	608:3	608:3	11	return
DESTINATION	608:10	608:10	10	( 0 )
EXPR	608:10	608:12	11	( 0 )
LEAF_NODE	608:10	608:10	12	(
FIELD	608:11	608:11	12	0
LEAF_NODE	608:11	608:11	13	0
LEAF_NODE	608:12	608:12	12	)
LEAF_NODE	608:13	608:13	10	;
LEAF_NODE	609:2	609:2	8	}
LEAF_NODE	610:1	610:1	5	}
SELECTION	611:1	611:69	3	
KEYWORD	611:1	611:1	4	if
LEAF_NODE	611:1	611:1	5	if
LEAF_NODE	611:4	611:4	4	(
CONDITION	611:5	611:5	4	tif -> tif_dir . td_stripoffset_p == NULL && ! TIFFSetupStrips ( tif )
EXPR	611:5	611:5	5	tif -> tif_dir . td_stripoffset_p == NULL && ! TIFFSetupStrips ( tif )
AND	611:5	611:46	6	tif -> tif_dir . td_stripoffset_p == NULL && ! TIFFSetupStrips ( tif )
EXPR	611:5	611:38	7	tif -> tif_dir . td_stripoffset_p == NULL
FIELD	611:5	611:18	8	tif -> tif_dir . td_stripoffset_p
LEAF_NODE	611:5	611:5	9	tif
LEAF_NODE	611:8	611:8	9	->
LEAF_NODE	611:10	611:10	9	tif_dir
LEAF_NODE	611:17	611:17	9	.
LEAF_NODE	611:18	611:18	9	td_stripoffset_p
EQ_OPERATOR	611:35	611:35	8	==
LEAF_NODE	611:35	611:35	9	==
FIELD	611:38	611:38	8	NULL
LEAF_NODE	611:38	611:38	9	NULL
LEAF_NODE	611:43	611:43	7	&&
EXPR	611:46	611:46	7	! TIFFSetupStrips ( tif )
UNARY_EXPR	611:46	611:47	8	! TIFFSetupStrips ( tif )
UNARY_OPERATOR	611:46	611:46	9	!
LEAF_NODE	611:46	611:46	10	!
FUNCTION_CALL	611:47	611:66	9	TIFFSetupStrips ( tif )
CALLEE	611:47	611:47	10	TIFFSetupStrips
LEAF_NODE	611:47	611:47	11	TIFFSetupStrips
LEAF_NODE	611:62	611:62	10	(
ARGUMENT	611:63	611:63	10	tif
FIELD	611:63	611:63	11	tif
LEAF_NODE	611:63	611:63	12	tif
LEAF_NODE	611:66	611:66	10	)
LEAF_NODE	611:67	611:67	4	)
STATEMENTS	611:69	616:1	4	
LEAF_NODE	611:69	611:69	5	{
STATEMENTS	612:2	615:2	5	
EXPR_STATEMENT	612:2	612:29	6	tif -> tif_dir . td_nstrips = 0 ;
EXPR	612:2	612:2	7	tif -> tif_dir . td_nstrips = 0
ASSIGN	612:2	612:28	8	tif -> tif_dir . td_nstrips = 0
LVAL	612:2	612:2	9	tif -> tif_dir . td_nstrips
FIELD	612:2	612:15	10	tif -> tif_dir . td_nstrips
LEAF_NODE	612:2	612:2	11	tif
LEAF_NODE	612:5	612:5	11	->
LEAF_NODE	612:7	612:7	11	tif_dir
LEAF_NODE	612:14	612:14	11	.
LEAF_NODE	612:15	612:15	11	td_nstrips
ASSIGN_OP	612:26	612:26	9	=
LEAF_NODE	612:26	612:26	10	=
RVAL	612:28	612:28	9	0
FIELD	612:28	612:28	10	0
LEAF_NODE	612:28	612:28	11	0
LEAF_NODE	612:29	612:29	7	;
EXPR_STATEMENT	613:2	614:38	6	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for %s arrays" , isTiled ( tif ) ? "tile" : "strip" ) ;
EXPR	613:2	613:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for %s arrays" , isTiled ( tif ) ? "tile" : "strip" )
FUNCTION_CALL	613:2	614:37	8	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for %s arrays" , isTiled ( tif ) ? "tile" : "strip" )
CALLEE	613:2	613:2	9	TIFFErrorExt
LEAF_NODE	613:2	613:2	10	TIFFErrorExt
LEAF_NODE	613:14	613:14	9	(
ARGUMENT	613:15	613:15	9	tif -> tif_clientdata
FIELD	613:15	613:20	10	tif -> tif_clientdata
LEAF_NODE	613:15	613:15	11	tif
LEAF_NODE	613:18	613:18	11	->
LEAF_NODE	613:20	613:20	11	tif_clientdata
LEAF_NODE	613:34	613:34	9	,
ARGUMENT	613:36	613:36	9	module
FIELD	613:36	613:36	10	module
LEAF_NODE	613:36	613:36	11	module
LEAF_NODE	613:42	613:42	9	,
ARGUMENT	613:44	613:44	9	"No space for %s arrays"
FIELD	613:44	613:44	10	"No space for %s arrays"
LEAF_NODE	613:44	613:44	11	"No space for %s arrays"
LEAF_NODE	613:68	613:68	9	,
ARGUMENT	614:6	614:6	9	isTiled ( tif ) ? "tile" : "strip"
COND_EXPR	614:6	614:30	10	isTiled ( tif ) ? "tile" : "strip"
CONDITION	614:6	614:6	11	isTiled ( tif )
FUNCTION_CALL	614:6	614:17	12	isTiled ( tif )
CALLEE	614:6	614:6	13	isTiled
LEAF_NODE	614:6	614:6	14	isTiled
LEAF_NODE	614:13	614:13	13	(
ARGUMENT	614:14	614:14	13	tif
FIELD	614:14	614:14	14	tif
LEAF_NODE	614:14	614:14	15	tif
LEAF_NODE	614:17	614:17	13	)
LEAF_NODE	614:19	614:19	11	?
EXPR	614:21	614:21	11	"tile"
FIELD	614:21	614:21	12	"tile"
LEAF_NODE	614:21	614:21	13	"tile"
LEAF_NODE	614:28	614:28	11	:
FIELD	614:30	614:30	11	"strip"
LEAF_NODE	614:30	614:30	12	"strip"
LEAF_NODE	614:37	614:37	9	)
LEAF_NODE	614:38	614:38	7	;
JUMP_STATEMENT	615:2	615:12	6	return ( 0 ) ;
KEYWORD	615:2	615:2	7	return
LEAF_NODE	615:2	615:2	8	return
DESTINATION	615:9	615:9	7	( 0 )
EXPR	615:9	615:11	8	( 0 )
LEAF_NODE	615:9	615:9	9	(
FIELD	615:10	615:10	9	0
LEAF_NODE	615:10	615:10	10	0
LEAF_NODE	615:11	615:11	9	)
LEAF_NODE	615:12	615:12	7	;
LEAF_NODE	616:1	616:1	5	}
SELECTION	617:1	618:1	3	
KEYWORD	617:1	617:1	4	if
LEAF_NODE	617:1	617:1	5	if
LEAF_NODE	617:4	617:4	4	(
CONDITION	617:5	617:5	4	isTiled ( tif )
EXPR	617:5	617:5	5	isTiled ( tif )
FUNCTION_CALL	617:5	617:16	6	isTiled ( tif )
CALLEE	617:5	617:5	7	isTiled
LEAF_NODE	617:5	617:5	8	isTiled
LEAF_NODE	617:12	617:12	7	(
ARGUMENT	617:13	617:13	7	tif
FIELD	617:13	617:13	8	tif
LEAF_NODE	617:13	617:13	9	tif
LEAF_NODE	617:16	617:16	7	)
LEAF_NODE	617:17	617:17	4	)
STATEMENTS	618:1	622:1	4	
LEAF_NODE	618:1	618:1	5	{
STATEMENTS	619:2	620:2	5	
EXPR_STATEMENT	619:2	619:39	6	tif -> tif_tilesize = TIFFTileSize ( tif ) ;
EXPR	619:2	619:2	7	tif -> tif_tilesize = TIFFTileSize ( tif )
ASSIGN	619:2	619:22	8	tif -> tif_tilesize = TIFFTileSize ( tif )
LVAL	619:2	619:2	9	tif -> tif_tilesize
FIELD	619:2	619:7	10	tif -> tif_tilesize
LEAF_NODE	619:2	619:2	11	tif
LEAF_NODE	619:5	619:5	11	->
LEAF_NODE	619:7	619:7	11	tif_tilesize
ASSIGN_OP	619:20	619:20	9	=
LEAF_NODE	619:20	619:20	10	=
RVAL	619:22	619:22	9	TIFFTileSize ( tif )
FUNCTION_CALL	619:22	619:38	10	TIFFTileSize ( tif )
CALLEE	619:22	619:22	11	TIFFTileSize
LEAF_NODE	619:22	619:22	12	TIFFTileSize
LEAF_NODE	619:34	619:34	11	(
ARGUMENT	619:35	619:35	11	tif
FIELD	619:35	619:35	12	tif
LEAF_NODE	619:35	619:35	13	tif
LEAF_NODE	619:38	619:38	11	)
LEAF_NODE	619:39	619:39	7	;
SELECTION	620:2	621:3	6	
KEYWORD	620:2	620:2	7	if
LEAF_NODE	620:2	620:2	8	if
LEAF_NODE	620:5	620:5	7	(
CONDITION	620:6	620:6	7	tif -> tif_tilesize == 0
EXPR	620:6	620:27	8	tif -> tif_tilesize == 0
FIELD	620:6	620:11	9	tif -> tif_tilesize
LEAF_NODE	620:6	620:6	10	tif
LEAF_NODE	620:9	620:9	10	->
LEAF_NODE	620:11	620:11	10	tif_tilesize
EQ_OPERATOR	620:24	620:24	9	==
LEAF_NODE	620:24	620:24	10	==
FIELD	620:27	620:27	9	0
LEAF_NODE	620:27	620:27	10	0
LEAF_NODE	620:28	620:28	7	)
STATEMENTS	621:3	621:3	7	
JUMP_STATEMENT	621:3	621:13	8	return ( 0 ) ;
KEYWORD	621:3	621:3	9	return
LEAF_NODE	621:3	621:3	10	return
DESTINATION	621:10	621:10	9	( 0 )
EXPR	621:10	621:12	10	( 0 )
LEAF_NODE	621:10	621:10	11	(
FIELD	621:11	621:11	11	0
LEAF_NODE	621:11	621:11	12	0
LEAF_NODE	621:12	621:12	11	)
LEAF_NODE	621:13	621:13	9	;
LEAF_NODE	622:1	622:1	5	}
SELECTION	623:1	624:2	3	
KEYWORD	623:1	623:1	4	else
LEAF_NODE	623:1	623:1	5	else
STATEMENTS	624:2	624:2	4	
EXPR_STATEMENT	624:2	624:36	5	tif -> tif_tilesize = ( tmsize_t ) ( - 1 ) ;
EXPR	624:2	624:2	6	tif -> tif_tilesize = ( tmsize_t ) ( - 1 )
ASSIGN	624:2	624:22	7	tif -> tif_tilesize = ( tmsize_t ) ( - 1 )
LVAL	624:2	624:2	8	tif -> tif_tilesize
FIELD	624:2	624:7	9	tif -> tif_tilesize
LEAF_NODE	624:2	624:2	10	tif
LEAF_NODE	624:5	624:5	10	->
LEAF_NODE	624:7	624:7	10	tif_tilesize
ASSIGN_OP	624:20	624:20	8	=
LEAF_NODE	624:20	624:20	9	=
RVAL	624:22	624:35	8	( tmsize_t ) ( - 1 )
LEAF_NODE	624:22	624:22	9	(
TYPE_NAME	624:23	624:23	9	tmsize_t
LEAF_NODE	624:23	624:23	10	tmsize_t
LEAF_NODE	624:31	624:31	9	)
LEAF_NODE	624:32	624:32	9	(
UNARY_EXPR	624:33	624:34	9	- 1
UNARY_OPERATOR	624:33	624:33	10	-
LEAF_NODE	624:33	624:33	11	-
FIELD	624:34	624:34	10	1
LEAF_NODE	624:34	624:34	11	1
LEAF_NODE	624:35	624:35	9	)
LEAF_NODE	624:36	624:36	6	;
EXPR_STATEMENT	625:1	625:46	3	tif -> tif_scanlinesize = TIFFScanlineSize ( tif ) ;
EXPR	625:1	625:1	4	tif -> tif_scanlinesize = TIFFScanlineSize ( tif )
ASSIGN	625:1	625:25	5	tif -> tif_scanlinesize = TIFFScanlineSize ( tif )
LVAL	625:1	625:1	6	tif -> tif_scanlinesize
FIELD	625:1	625:6	7	tif -> tif_scanlinesize
LEAF_NODE	625:1	625:1	8	tif
LEAF_NODE	625:4	625:4	8	->
LEAF_NODE	625:6	625:6	8	tif_scanlinesize
ASSIGN_OP	625:23	625:23	6	=
LEAF_NODE	625:23	625:23	7	=
RVAL	625:25	625:25	6	TIFFScanlineSize ( tif )
FUNCTION_CALL	625:25	625:45	7	TIFFScanlineSize ( tif )
CALLEE	625:25	625:25	8	TIFFScanlineSize
LEAF_NODE	625:25	625:25	9	TIFFScanlineSize
LEAF_NODE	625:41	625:41	8	(
ARGUMENT	625:42	625:42	8	tif
FIELD	625:42	625:42	9	tif
LEAF_NODE	625:42	625:42	10	tif
LEAF_NODE	625:45	625:45	8	)
LEAF_NODE	625:46	625:46	4	;
SELECTION	626:1	627:2	3	
KEYWORD	626:1	626:1	4	if
LEAF_NODE	626:1	626:1	5	if
LEAF_NODE	626:4	626:4	4	(
CONDITION	626:5	626:5	4	tif -> tif_scanlinesize == 0
EXPR	626:5	626:30	5	tif -> tif_scanlinesize == 0
FIELD	626:5	626:10	6	tif -> tif_scanlinesize
LEAF_NODE	626:5	626:5	7	tif
LEAF_NODE	626:8	626:8	7	->
LEAF_NODE	626:10	626:10	7	tif_scanlinesize
EQ_OPERATOR	626:27	626:27	6	==
LEAF_NODE	626:27	626:27	7	==
FIELD	626:30	626:30	6	0
LEAF_NODE	626:30	626:30	7	0
LEAF_NODE	626:31	626:31	4	)
STATEMENTS	627:2	627:2	4	
JUMP_STATEMENT	627:2	627:12	5	return ( 0 ) ;
KEYWORD	627:2	627:2	6	return
LEAF_NODE	627:2	627:2	7	return
DESTINATION	627:9	627:9	6	( 0 )
EXPR	627:9	627:11	7	( 0 )
LEAF_NODE	627:9	627:9	8	(
FIELD	627:10	627:10	8	0
LEAF_NODE	627:10	627:10	9	0
LEAF_NODE	627:11	627:11	8	)
LEAF_NODE	627:12	627:12	6	;
EXPR_STATEMENT	628:1	628:35	3	tif -> tif_flags |= TIFF_BEENWRITING ;
EXPR	628:1	628:1	4	tif -> tif_flags |= TIFF_BEENWRITING
ASSIGN	628:1	628:19	5	tif -> tif_flags |= TIFF_BEENWRITING
LVAL	628:1	628:1	6	tif -> tif_flags
FIELD	628:1	628:6	7	tif -> tif_flags
LEAF_NODE	628:1	628:1	8	tif
LEAF_NODE	628:4	628:4	8	->
LEAF_NODE	628:6	628:6	8	tif_flags
ASSIGN_OP	628:16	628:16	6	|=
LEAF_NODE	628:16	628:16	7	|=
RVAL	628:19	628:19	6	TIFF_BEENWRITING
FIELD	628:19	628:19	7	TIFF_BEENWRITING
LEAF_NODE	628:19	628:19	8	TIFF_BEENWRITING
LEAF_NODE	628:35	628:35	4	;
SELECTION	630:8	639:8	3	
KEYWORD	630:8	630:8	4	if
LEAF_NODE	630:8	630:8	5	if
LEAF_NODE	630:10	630:10	4	(
CONDITION	630:12	630:12	4	tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0 && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
EXPR	630:12	630:12	5	tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0 && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
AND	630:12	631:12	6	tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0 && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
EXPR	630:12	630:58	7	tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0
FIELD	630:12	630:46	8	tif -> tif_dir . td_stripoffset_entry . tdir_tag
LEAF_NODE	630:12	630:12	9	tif
LEAF_NODE	630:15	630:15	9	->
LEAF_NODE	630:17	630:17	9	tif_dir
LEAF_NODE	630:24	630:24	9	.
LEAF_NODE	630:25	630:25	9	td_stripoffset_entry
LEAF_NODE	630:45	630:45	9	.
LEAF_NODE	630:46	630:46	9	tdir_tag
EQ_OPERATOR	630:55	630:55	8	!=
LEAF_NODE	630:55	630:55	9	!=
FIELD	630:58	630:58	8	0
LEAF_NODE	630:58	630:58	9	0
LEAF_NODE	630:60	630:60	7	&&
EXPR	631:12	631:12	7	tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
AND	631:12	632:12	8	tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
EXPR	631:12	631:60	9	tif -> tif_dir . td_stripoffset_entry . tdir_count == 0
FIELD	631:12	631:46	10	tif -> tif_dir . td_stripoffset_entry . tdir_count
LEAF_NODE	631:12	631:12	11	tif
LEAF_NODE	631:15	631:15	11	->
LEAF_NODE	631:17	631:17	11	tif_dir
LEAF_NODE	631:24	631:24	11	.
LEAF_NODE	631:25	631:25	11	td_stripoffset_entry
LEAF_NODE	631:45	631:45	11	.
LEAF_NODE	631:46	631:46	11	tdir_count
EQ_OPERATOR	631:57	631:57	10	==
LEAF_NODE	631:57	631:57	11	==
FIELD	631:60	631:60	10	0
LEAF_NODE	631:60	631:60	11	0
LEAF_NODE	631:62	631:62	9	&&
EXPR	632:12	632:12	9	tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
AND	632:12	633:12	10	tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
EXPR	632:12	632:59	11	tif -> tif_dir . td_stripoffset_entry . tdir_type == 0
FIELD	632:12	632:46	12	tif -> tif_dir . td_stripoffset_entry . tdir_type
LEAF_NODE	632:12	632:12	13	tif
LEAF_NODE	632:15	632:15	13	->
LEAF_NODE	632:17	632:17	13	tif_dir
LEAF_NODE	632:24	632:24	13	.
LEAF_NODE	632:25	632:25	13	td_stripoffset_entry
LEAF_NODE	632:45	632:45	13	.
LEAF_NODE	632:46	632:46	13	tdir_type
EQ_OPERATOR	632:56	632:56	12	==
LEAF_NODE	632:56	632:56	13	==
FIELD	632:59	632:59	12	0
LEAF_NODE	632:59	632:59	13	0
LEAF_NODE	632:61	632:61	11	&&
EXPR	633:12	633:12	11	tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
AND	633:12	634:12	12	tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
EXPR	633:12	633:72	13	tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0
FIELD	633:12	633:58	14	tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8
LEAF_NODE	633:12	633:12	15	tif
LEAF_NODE	633:15	633:15	15	->
LEAF_NODE	633:17	633:17	15	tif_dir
LEAF_NODE	633:24	633:24	15	.
LEAF_NODE	633:25	633:25	15	td_stripoffset_entry
LEAF_NODE	633:45	633:45	15	.
LEAF_NODE	633:46	633:46	15	tdir_offset
LEAF_NODE	633:57	633:57	15	.
LEAF_NODE	633:58	633:58	15	toff_long8
EQ_OPERATOR	633:69	633:69	14	==
LEAF_NODE	633:69	633:69	15	==
FIELD	633:72	633:72	14	0
LEAF_NODE	633:72	633:72	15	0
LEAF_NODE	633:74	633:74	13	&&
EXPR	634:12	634:12	13	tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
AND	634:12	635:12	14	tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
EXPR	634:12	634:61	15	tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0
FIELD	634:12	634:49	16	tif -> tif_dir . td_stripbytecount_entry . tdir_tag
LEAF_NODE	634:12	634:12	17	tif
LEAF_NODE	634:15	634:15	17	->
LEAF_NODE	634:17	634:17	17	tif_dir
LEAF_NODE	634:24	634:24	17	.
LEAF_NODE	634:25	634:25	17	td_stripbytecount_entry
LEAF_NODE	634:48	634:48	17	.
LEAF_NODE	634:49	634:49	17	tdir_tag
EQ_OPERATOR	634:58	634:58	16	!=
LEAF_NODE	634:58	634:58	17	!=
FIELD	634:61	634:61	16	0
LEAF_NODE	634:61	634:61	17	0
LEAF_NODE	634:63	634:63	15	&&
EXPR	635:12	635:12	15	tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
AND	635:12	636:12	16	tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
EXPR	635:12	635:63	17	tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0
FIELD	635:12	635:49	18	tif -> tif_dir . td_stripbytecount_entry . tdir_count
LEAF_NODE	635:12	635:12	19	tif
LEAF_NODE	635:15	635:15	19	->
LEAF_NODE	635:17	635:17	19	tif_dir
LEAF_NODE	635:24	635:24	19	.
LEAF_NODE	635:25	635:25	19	td_stripbytecount_entry
LEAF_NODE	635:48	635:48	19	.
LEAF_NODE	635:49	635:49	19	tdir_count
EQ_OPERATOR	635:60	635:60	18	==
LEAF_NODE	635:60	635:60	19	==
FIELD	635:63	635:63	18	0
LEAF_NODE	635:63	635:63	19	0
LEAF_NODE	635:65	635:65	17	&&
EXPR	636:12	636:12	17	tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
AND	636:12	637:12	18	tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
EXPR	636:12	636:62	19	tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0
FIELD	636:12	636:49	20	tif -> tif_dir . td_stripbytecount_entry . tdir_type
LEAF_NODE	636:12	636:12	21	tif
LEAF_NODE	636:15	636:15	21	->
LEAF_NODE	636:17	636:17	21	tif_dir
LEAF_NODE	636:24	636:24	21	.
LEAF_NODE	636:25	636:25	21	td_stripbytecount_entry
LEAF_NODE	636:48	636:48	21	.
LEAF_NODE	636:49	636:49	21	tdir_type
EQ_OPERATOR	636:59	636:59	20	==
LEAF_NODE	636:59	636:59	21	==
FIELD	636:62	636:62	20	0
LEAF_NODE	636:62	636:62	21	0
LEAF_NODE	636:64	636:64	19	&&
EXPR	637:12	637:12	19	tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
AND	637:12	638:12	20	tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0 && ! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
EXPR	637:12	637:75	21	tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
FIELD	637:12	637:61	22	tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8
LEAF_NODE	637:12	637:12	23	tif
LEAF_NODE	637:15	637:15	23	->
LEAF_NODE	637:17	637:17	23	tif_dir
LEAF_NODE	637:24	637:24	23	.
LEAF_NODE	637:25	637:25	23	td_stripbytecount_entry
LEAF_NODE	637:48	637:48	23	.
LEAF_NODE	637:49	637:49	23	tdir_offset
LEAF_NODE	637:60	637:60	23	.
LEAF_NODE	637:61	637:61	23	toff_long8
EQ_OPERATOR	637:72	637:72	22	==
LEAF_NODE	637:72	637:72	23	==
FIELD	637:75	637:75	22	0
LEAF_NODE	637:75	637:75	23	0
LEAF_NODE	637:77	637:77	21	&&
EXPR	638:12	638:12	21	! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
UNARY_EXPR	638:12	638:47	22	! ( tif -> tif_flags & TIFF_DIRTYDIRECT )
UNARY_OPERATOR	638:12	638:12	23	!
LEAF_NODE	638:12	638:12	24	!
LEAF_NODE	638:13	638:13	23	(
FIELD	638:14	638:19	23	tif -> tif_flags
LEAF_NODE	638:14	638:14	24	tif
LEAF_NODE	638:17	638:17	24	->
LEAF_NODE	638:19	638:19	24	tif_flags
LEAF_NODE	638:29	638:29	23	&
FIELD	638:31	638:31	23	TIFF_DIRTYDIRECT
LEAF_NODE	638:31	638:31	24	TIFF_DIRTYDIRECT
LEAF_NODE	638:47	638:47	23	)
LEAF_NODE	638:50	638:50	4	)
STATEMENTS	639:8	641:8	4	
LEAF_NODE	639:8	639:8	5	{
STATEMENTS	640:12	640:12	5	
EXPR_STATEMENT	640:12	640:44	6	TIFFForceStrileArrayWriting ( tif ) ;
EXPR	640:12	640:12	7	TIFFForceStrileArrayWriting ( tif )
FUNCTION_CALL	640:12	640:43	8	TIFFForceStrileArrayWriting ( tif )
CALLEE	640:12	640:12	9	TIFFForceStrileArrayWriting
LEAF_NODE	640:12	640:12	10	TIFFForceStrileArrayWriting
LEAF_NODE	640:39	640:39	9	(
ARGUMENT	640:40	640:40	9	tif
FIELD	640:40	640:40	10	tif
LEAF_NODE	640:40	640:40	11	tif
LEAF_NODE	640:43	640:43	9	)
LEAF_NODE	640:44	640:44	7	;
LEAF_NODE	641:8	641:8	5	}
JUMP_STATEMENT	643:1	643:11	3	return ( 1 ) ;
KEYWORD	643:1	643:1	4	return
LEAF_NODE	643:1	643:1	5	return
DESTINATION	643:8	643:8	4	( 1 )
EXPR	643:8	643:10	5	( 1 )
LEAF_NODE	643:8	643:8	6	(
FIELD	643:9	643:9	6	1
LEAF_NODE	643:9	643:9	7	1
LEAF_NODE	643:10	643:10	6	)
LEAF_NODE	643:11	643:11	4	;
LEAF_NODE	644:0	644:0	2	}
FUNCTION_DEF	649:0	686:0	1	
RETURN_TYPE	649:0	649:0	2	int
TYPE_NAME	649:0	649:0	3	int
LEAF_NODE	649:0	649:0	4	int
FUNCTION_NAME	650:0	650:0	2	TIFFWriteBufferSetup
LEAF_NODE	650:0	650:0	3	TIFFWriteBufferSetup
PARAMETER_LIST	650:20	650:55	2	( TIFF * tif , void * bp , tmsize_t size )
LEAF_NODE	650:20	650:20	3	(
PARAMETER_DECL	650:21	650:27	3	TIFF * tif
TYPE	650:21	650:25	4	TIFF *
TYPE_NAME	650:21	650:21	5	TIFF
LEAF_NODE	650:21	650:21	6	TIFF
POINTER	650:25	650:25	5	*
LEAF_NODE	650:25	650:25	6	*
NAME	650:27	650:27	4	tif
LEAF_NODE	650:27	650:27	5	tif
LEAF_NODE	650:30	650:30	3	,
PARAMETER_DECL	650:32	650:38	3	void * bp
TYPE	650:32	650:36	4	void *
TYPE_NAME	650:32	650:32	5	void
LEAF_NODE	650:32	650:32	6	void
POINTER	650:36	650:36	5	*
LEAF_NODE	650:36	650:36	6	*
NAME	650:38	650:38	4	bp
LEAF_NODE	650:38	650:38	5	bp
LEAF_NODE	650:40	650:40	3	,
PARAMETER_DECL	650:42	650:51	3	tmsize_t size
TYPE	650:42	650:42	4	tmsize_t
TYPE_NAME	650:42	650:42	5	tmsize_t
LEAF_NODE	650:42	650:42	6	tmsize_t
NAME	650:51	650:51	4	size
LEAF_NODE	650:51	650:51	5	size
LEAF_NODE	650:55	650:55	3	)
LEAF_NODE	651:0	651:0	2	{
STATEMENTS	652:1	685:1	2	
LEAF_NODE	652:1	652:1	3	static
SIMPLE_DECL	652:8	652:52	3	const char [ ] module ; module = "TIFFWriteBufferSetup" ;
VAR_DECL	652:8	652:19	4	const char [ ] module ; module = "TIFFWriteBufferSetup"
TYPE	652:8	652:25	5	const char [ ]
TYPE_NAME	652:8	652:14	6	const char
LEAF_NODE	652:8	652:8	7	const
LEAF_NODE	652:14	652:14	7	char
TYPE_SUFFIX	652:25	652:26	6	[ ]
LEAF_NODE	652:25	652:25	7	[
LEAF_NODE	652:26	652:26	7	]
NAME	652:19	652:19	5	module
LEAF_NODE	652:19	652:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	652:19	652:19	5	module = "TIFFWriteBufferSetup"
ASSIGN	652:19	652:30	6	module = "TIFFWriteBufferSetup"
LVAL	652:19	652:19	7	module
NAME	652:19	652:19	8	module
LEAF_NODE	652:19	652:19	9	module
ASSIGN_OP	652:28	652:28	7	=
LEAF_NODE	652:28	652:28	8	=
RVAL	652:30	652:30	7	"TIFFWriteBufferSetup"
FIELD	652:30	652:30	8	"TIFFWriteBufferSetup"
LEAF_NODE	652:30	652:30	9	"TIFFWriteBufferSetup"
LEAF_NODE	652:52	652:52	4	;
SELECTION	654:1	654:23	3	
KEYWORD	654:1	654:1	4	if
LEAF_NODE	654:1	654:1	5	if
LEAF_NODE	654:4	654:4	4	(
CONDITION	654:5	654:5	4	tif -> tif_rawdata
EXPR	654:5	654:5	5	tif -> tif_rawdata
FIELD	654:5	654:10	6	tif -> tif_rawdata
LEAF_NODE	654:5	654:5	7	tif
LEAF_NODE	654:8	654:8	7	->
LEAF_NODE	654:10	654:10	7	tif_rawdata
LEAF_NODE	654:21	654:21	4	)
STATEMENTS	654:23	660:1	4	
LEAF_NODE	654:23	654:23	5	{
STATEMENTS	655:2	659:2	5	
SELECTION	655:2	655:38	6	
KEYWORD	655:2	655:2	7	if
LEAF_NODE	655:2	655:2	8	if
LEAF_NODE	655:5	655:5	7	(
CONDITION	655:6	655:6	7	tif -> tif_flags & TIFF_MYBUFFER
EXPR	655:6	655:23	8	tif -> tif_flags & TIFF_MYBUFFER
FIELD	655:6	655:11	9	tif -> tif_flags
LEAF_NODE	655:6	655:6	10	tif
LEAF_NODE	655:9	655:9	10	->
LEAF_NODE	655:11	655:11	10	tif_flags
LEAF_NODE	655:21	655:21	9	&
FIELD	655:23	655:23	9	TIFF_MYBUFFER
LEAF_NODE	655:23	655:23	10	TIFF_MYBUFFER
LEAF_NODE	655:36	655:36	7	)
STATEMENTS	655:38	658:2	7	
LEAF_NODE	655:38	655:38	8	{
STATEMENTS	656:3	657:3	8	
EXPR_STATEMENT	656:3	656:30	9	_TIFFfree ( tif -> tif_rawdata ) ;
EXPR	656:3	656:3	10	_TIFFfree ( tif -> tif_rawdata )
FUNCTION_CALL	656:3	656:29	11	_TIFFfree ( tif -> tif_rawdata )
CALLEE	656:3	656:3	12	_TIFFfree
LEAF_NODE	656:3	656:3	13	_TIFFfree
LEAF_NODE	656:12	656:12	12	(
ARGUMENT	656:13	656:13	12	tif -> tif_rawdata
FIELD	656:13	656:18	13	tif -> tif_rawdata
LEAF_NODE	656:13	656:13	14	tif
LEAF_NODE	656:16	656:16	14	->
LEAF_NODE	656:18	656:18	14	tif_rawdata
LEAF_NODE	656:29	656:29	12	)
LEAF_NODE	656:30	656:30	10	;
EXPR_STATEMENT	657:3	657:35	9	tif -> tif_flags &= ~TIFF_MYBUFFER ;
EXPR	657:3	657:3	10	tif -> tif_flags &= ~TIFF_MYBUFFER
ASSIGN	657:3	657:21	11	tif -> tif_flags &= ~TIFF_MYBUFFER
LVAL	657:3	657:3	12	tif -> tif_flags
FIELD	657:3	657:8	13	tif -> tif_flags
LEAF_NODE	657:3	657:3	14	tif
LEAF_NODE	657:6	657:6	14	->
LEAF_NODE	657:8	657:8	14	tif_flags
ASSIGN_OP	657:18	657:18	12	&=
LEAF_NODE	657:18	657:18	13	&=
RVAL	657:21	657:21	12	~TIFF_MYBUFFER
FIELD	657:21	657:21	13	~TIFF_MYBUFFER
LEAF_NODE	657:21	657:21	14	~TIFF_MYBUFFER
LEAF_NODE	657:35	657:35	10	;
LEAF_NODE	658:2	658:2	8	}
EXPR_STATEMENT	659:2	659:25	6	tif -> tif_rawdata = NULL ;
EXPR	659:2	659:2	7	tif -> tif_rawdata = NULL
ASSIGN	659:2	659:21	8	tif -> tif_rawdata = NULL
LVAL	659:2	659:2	9	tif -> tif_rawdata
FIELD	659:2	659:7	10	tif -> tif_rawdata
LEAF_NODE	659:2	659:2	11	tif
LEAF_NODE	659:5	659:5	11	->
LEAF_NODE	659:7	659:7	11	tif_rawdata
ASSIGN_OP	659:19	659:19	9	=
LEAF_NODE	659:19	659:19	10	=
RVAL	659:21	659:21	9	NULL
FIELD	659:21	659:21	10	NULL
LEAF_NODE	659:21	659:21	11	NULL
LEAF_NODE	659:25	659:25	7	;
LEAF_NODE	660:1	660:1	5	}
SELECTION	661:1	661:29	3	
KEYWORD	661:1	661:1	4	if
LEAF_NODE	661:1	661:1	5	if
LEAF_NODE	661:4	661:4	4	(
CONDITION	661:5	661:5	4	size == ( tmsize_t ) ( - 1 )
EXPR	661:5	661:26	5	size == ( tmsize_t ) ( - 1 )
FIELD	661:5	661:5	6	size
LEAF_NODE	661:5	661:5	7	size
EQ_OPERATOR	661:10	661:10	6	==
LEAF_NODE	661:10	661:10	7	==
LEAF_NODE	661:13	661:13	6	(
TYPE_NAME	661:14	661:14	6	tmsize_t
LEAF_NODE	661:14	661:14	7	tmsize_t
LEAF_NODE	661:22	661:22	6	)
LEAF_NODE	661:23	661:23	6	(
UNARY_EXPR	661:24	661:25	6	- 1
UNARY_OPERATOR	661:24	661:24	7	-
LEAF_NODE	661:24	661:24	8	-
FIELD	661:25	661:25	7	1
LEAF_NODE	661:25	661:25	8	1
LEAF_NODE	661:26	661:26	6	)
LEAF_NODE	661:27	661:27	4	)
STATEMENTS	661:29	670:1	4	
LEAF_NODE	661:29	661:29	5	{
STATEMENTS	662:2	669:2	5	
EXPR_STATEMENT	662:2	663:45	6	size = ( isTiled ( tif ) ? tif -> tif_tilesize : TIFFStripSize ( tif ) ) ;
EXPR	662:2	662:2	7	size = ( isTiled ( tif ) ? tif -> tif_tilesize : TIFFStripSize ( tif ) )
ASSIGN	662:2	662:9	8	size = ( isTiled ( tif ) ? tif -> tif_tilesize : TIFFStripSize ( tif ) )
LVAL	662:2	662:2	9	size
FIELD	662:2	662:2	10	size
LEAF_NODE	662:2	662:2	11	size
ASSIGN_OP	662:7	662:7	9	=
LEAF_NODE	662:7	662:7	10	=
RVAL	662:9	663:44	9	( isTiled ( tif ) ? tif -> tif_tilesize : TIFFStripSize ( tif ) )
LEAF_NODE	662:9	662:9	10	(
COND_EXPR	662:10	663:26	10	isTiled ( tif ) ? tif -> tif_tilesize : TIFFStripSize ( tif )
CONDITION	662:10	662:10	11	isTiled ( tif )
FUNCTION_CALL	662:10	662:21	12	isTiled ( tif )
CALLEE	662:10	662:10	13	isTiled
LEAF_NODE	662:10	662:10	14	isTiled
LEAF_NODE	662:17	662:17	13	(
ARGUMENT	662:18	662:18	13	tif
FIELD	662:18	662:18	14	tif
LEAF_NODE	662:18	662:18	15	tif
LEAF_NODE	662:21	662:21	13	)
LEAF_NODE	662:23	662:23	11	?
EXPR	663:6	663:6	11	tif -> tif_tilesize
FIELD	663:6	663:11	12	tif -> tif_tilesize
LEAF_NODE	663:6	663:6	13	tif
LEAF_NODE	663:9	663:9	13	->
LEAF_NODE	663:11	663:11	13	tif_tilesize
LEAF_NODE	663:24	663:24	11	:
FUNCTION_CALL	663:26	663:43	11	TIFFStripSize ( tif )
CALLEE	663:26	663:26	12	TIFFStripSize
LEAF_NODE	663:26	663:26	13	TIFFStripSize
LEAF_NODE	663:39	663:39	12	(
ARGUMENT	663:40	663:40	12	tif
FIELD	663:40	663:40	13	tif
LEAF_NODE	663:40	663:40	14	tif
LEAF_NODE	663:43	663:43	12	)
LEAF_NODE	663:44	663:44	10	)
LEAF_NODE	663:45	663:45	7	;
SELECTION	667:2	668:3	6	
KEYWORD	667:2	667:2	7	if
LEAF_NODE	667:2	667:2	8	if
LEAF_NODE	667:5	667:5	7	(
CONDITION	667:6	667:6	7	size < 8 * 1024
EXPR	667:6	667:15	8	size < 8 * 1024
FIELD	667:6	667:6	9	size
LEAF_NODE	667:6	667:6	10	size
REL_OPERATOR	667:11	667:11	9	<
LEAF_NODE	667:11	667:11	10	<
FIELD	667:13	667:13	9	8
LEAF_NODE	667:13	667:13	10	8
LEAF_NODE	667:14	667:14	9	*
FIELD	667:15	667:15	9	1024
LEAF_NODE	667:15	667:15	10	1024
LEAF_NODE	667:19	667:19	7	)
STATEMENTS	668:3	668:3	7	
EXPR_STATEMENT	668:3	668:16	8	size = 8 * 1024 ;
EXPR	668:3	668:3	9	size = 8 * 1024
ASSIGN	668:3	668:10	10	size = 8 * 1024
LVAL	668:3	668:3	11	size
FIELD	668:3	668:3	12	size
LEAF_NODE	668:3	668:3	13	size
ASSIGN_OP	668:8	668:8	11	=
LEAF_NODE	668:8	668:8	12	=
RVAL	668:10	668:12	11	8 * 1024
FIELD	668:10	668:10	12	8
LEAF_NODE	668:10	668:10	13	8
LEAF_NODE	668:11	668:11	12	*
FIELD	668:12	668:12	12	1024
LEAF_NODE	668:12	668:12	13	1024
LEAF_NODE	668:16	668:16	9	;
EXPR_STATEMENT	669:2	669:11	6	bp = NULL ;
EXPR	669:2	669:2	7	bp = NULL
ASSIGN	669:2	669:7	8	bp = NULL
LVAL	669:2	669:2	9	bp
FIELD	669:2	669:2	10	bp
LEAF_NODE	669:2	669:2	11	bp
ASSIGN_OP	669:5	669:5	9	=
LEAF_NODE	669:5	669:5	10	=
RVAL	669:7	669:7	9	NULL
FIELD	669:7	669:7	10	NULL
LEAF_NODE	669:7	669:7	11	NULL
LEAF_NODE	669:11	669:11	7	;
LEAF_NODE	670:1	670:1	5	}
SELECTION	671:1	671:17	3	
KEYWORD	671:1	671:1	4	if
LEAF_NODE	671:1	671:1	5	if
LEAF_NODE	671:4	671:4	4	(
CONDITION	671:5	671:5	4	bp == NULL
EXPR	671:5	671:11	5	bp == NULL
FIELD	671:5	671:5	6	bp
LEAF_NODE	671:5	671:5	7	bp
EQ_OPERATOR	671:8	671:8	6	==
LEAF_NODE	671:8	671:8	7	==
FIELD	671:11	671:11	6	NULL
LEAF_NODE	671:11	671:11	7	NULL
LEAF_NODE	671:15	671:15	4	)
STATEMENTS	671:17	678:1	4	
LEAF_NODE	671:17	671:17	5	{
STATEMENTS	672:2	677:2	5	
EXPR_STATEMENT	672:2	672:24	6	bp = _TIFFmalloc ( size ) ;
EXPR	672:2	672:2	7	bp = _TIFFmalloc ( size )
ASSIGN	672:2	672:7	8	bp = _TIFFmalloc ( size )
LVAL	672:2	672:2	9	bp
FIELD	672:2	672:2	10	bp
LEAF_NODE	672:2	672:2	11	bp
ASSIGN_OP	672:5	672:5	9	=
LEAF_NODE	672:5	672:5	10	=
RVAL	672:7	672:7	9	_TIFFmalloc ( size )
FUNCTION_CALL	672:7	672:23	10	_TIFFmalloc ( size )
CALLEE	672:7	672:7	11	_TIFFmalloc
LEAF_NODE	672:7	672:7	12	_TIFFmalloc
LEAF_NODE	672:18	672:18	11	(
ARGUMENT	672:19	672:19	11	size
FIELD	672:19	672:19	12	size
LEAF_NODE	672:19	672:19	13	size
LEAF_NODE	672:23	672:23	11	)
LEAF_NODE	672:24	672:24	7	;
SELECTION	673:2	673:18	6	
KEYWORD	673:2	673:2	7	if
LEAF_NODE	673:2	673:2	8	if
LEAF_NODE	673:5	673:5	7	(
CONDITION	673:6	673:6	7	bp == NULL
EXPR	673:6	673:12	8	bp == NULL
FIELD	673:6	673:6	9	bp
LEAF_NODE	673:6	673:6	10	bp
EQ_OPERATOR	673:9	673:9	9	==
LEAF_NODE	673:9	673:9	10	==
FIELD	673:12	673:12	9	NULL
LEAF_NODE	673:12	673:12	10	NULL
LEAF_NODE	673:16	673:16	7	)
STATEMENTS	673:18	676:2	7	
LEAF_NODE	673:18	673:18	8	{
STATEMENTS	674:3	675:3	8	
EXPR_STATEMENT	674:3	674:74	9	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for output buffer" ) ;
EXPR	674:3	674:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for output buffer" )
FUNCTION_CALL	674:3	674:73	11	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for output buffer" )
CALLEE	674:3	674:3	12	TIFFErrorExt
LEAF_NODE	674:3	674:3	13	TIFFErrorExt
LEAF_NODE	674:15	674:15	12	(
ARGUMENT	674:16	674:16	12	tif -> tif_clientdata
FIELD	674:16	674:21	13	tif -> tif_clientdata
LEAF_NODE	674:16	674:16	14	tif
LEAF_NODE	674:19	674:19	14	->
LEAF_NODE	674:21	674:21	14	tif_clientdata
LEAF_NODE	674:35	674:35	12	,
ARGUMENT	674:37	674:37	12	module
FIELD	674:37	674:37	13	module
LEAF_NODE	674:37	674:37	14	module
LEAF_NODE	674:43	674:43	12	,
ARGUMENT	674:45	674:45	12	"No space for output buffer"
FIELD	674:45	674:45	13	"No space for output buffer"
LEAF_NODE	674:45	674:45	14	"No space for output buffer"
LEAF_NODE	674:73	674:73	12	)
LEAF_NODE	674:74	674:74	10	;
JUMP_STATEMENT	675:3	675:13	9	return ( 0 ) ;
KEYWORD	675:3	675:3	10	return
LEAF_NODE	675:3	675:3	11	return
DESTINATION	675:10	675:10	10	( 0 )
EXPR	675:10	675:12	11	( 0 )
LEAF_NODE	675:10	675:10	12	(
FIELD	675:11	675:11	12	0
LEAF_NODE	675:11	675:11	13	0
LEAF_NODE	675:12	675:12	12	)
LEAF_NODE	675:13	675:13	10	;
LEAF_NODE	676:2	676:2	8	}
EXPR_STATEMENT	677:2	677:33	6	tif -> tif_flags |= TIFF_MYBUFFER ;
EXPR	677:2	677:2	7	tif -> tif_flags |= TIFF_MYBUFFER
ASSIGN	677:2	677:20	8	tif -> tif_flags |= TIFF_MYBUFFER
LVAL	677:2	677:2	9	tif -> tif_flags
FIELD	677:2	677:7	10	tif -> tif_flags
LEAF_NODE	677:2	677:2	11	tif
LEAF_NODE	677:5	677:5	11	->
LEAF_NODE	677:7	677:7	11	tif_flags
ASSIGN_OP	677:17	677:17	9	|=
LEAF_NODE	677:17	677:17	10	|=
RVAL	677:20	677:20	9	TIFF_MYBUFFER
FIELD	677:20	677:20	10	TIFF_MYBUFFER
LEAF_NODE	677:20	677:20	11	TIFF_MYBUFFER
LEAF_NODE	677:33	677:33	7	;
LEAF_NODE	678:1	678:1	5	}
SELECTION	678:3	679:2	3	
KEYWORD	678:3	678:3	4	else
LEAF_NODE	678:3	678:3	5	else
STATEMENTS	679:2	679:2	4	
EXPR_STATEMENT	679:2	679:34	5	tif -> tif_flags &= ~TIFF_MYBUFFER ;
EXPR	679:2	679:2	6	tif -> tif_flags &= ~TIFF_MYBUFFER
ASSIGN	679:2	679:20	7	tif -> tif_flags &= ~TIFF_MYBUFFER
LVAL	679:2	679:2	8	tif -> tif_flags
FIELD	679:2	679:7	9	tif -> tif_flags
LEAF_NODE	679:2	679:2	10	tif
LEAF_NODE	679:5	679:5	10	->
LEAF_NODE	679:7	679:7	10	tif_flags
ASSIGN_OP	679:17	679:17	8	&=
LEAF_NODE	679:17	679:17	9	&=
RVAL	679:20	679:20	8	~TIFF_MYBUFFER
FIELD	679:20	679:20	9	~TIFF_MYBUFFER
LEAF_NODE	679:20	679:20	10	~TIFF_MYBUFFER
LEAF_NODE	679:34	679:34	6	;
EXPR_STATEMENT	680:1	680:31	3	tif -> tif_rawdata = ( uint8 * ) bp ;
EXPR	680:1	680:1	4	tif -> tif_rawdata = ( uint8 * ) bp
ASSIGN	680:1	680:20	5	tif -> tif_rawdata = ( uint8 * ) bp
LVAL	680:1	680:1	6	tif -> tif_rawdata
FIELD	680:1	680:6	7	tif -> tif_rawdata
LEAF_NODE	680:1	680:1	8	tif
LEAF_NODE	680:4	680:4	8	->
LEAF_NODE	680:6	680:6	8	tif_rawdata
ASSIGN_OP	680:18	680:18	6	=
LEAF_NODE	680:18	680:18	7	=
RVAL	680:20	680:29	6	( uint8 * ) bp
LEAF_NODE	680:20	680:20	7	(
TYPE_NAME	680:21	680:21	7	uint8
LEAF_NODE	680:21	680:21	8	uint8
LEAF_NODE	680:26	680:26	7	*
LEAF_NODE	680:27	680:27	7	)
FIELD	680:29	680:29	7	bp
LEAF_NODE	680:29	680:29	8	bp
LEAF_NODE	680:31	680:31	4	;
EXPR_STATEMENT	681:1	681:28	3	tif -> tif_rawdatasize = size ;
EXPR	681:1	681:1	4	tif -> tif_rawdatasize = size
ASSIGN	681:1	681:24	5	tif -> tif_rawdatasize = size
LVAL	681:1	681:1	6	tif -> tif_rawdatasize
FIELD	681:1	681:6	7	tif -> tif_rawdatasize
LEAF_NODE	681:1	681:1	8	tif
LEAF_NODE	681:4	681:4	8	->
LEAF_NODE	681:6	681:6	8	tif_rawdatasize
ASSIGN_OP	681:22	681:22	6	=
LEAF_NODE	681:22	681:22	7	=
RVAL	681:24	681:24	6	size
FIELD	681:24	681:24	7	size
LEAF_NODE	681:24	681:24	8	size
LEAF_NODE	681:28	681:28	4	;
EXPR_STATEMENT	682:1	682:19	3	tif -> tif_rawcc = 0 ;
EXPR	682:1	682:1	4	tif -> tif_rawcc = 0
ASSIGN	682:1	682:18	5	tif -> tif_rawcc = 0
LVAL	682:1	682:1	6	tif -> tif_rawcc
FIELD	682:1	682:6	7	tif -> tif_rawcc
LEAF_NODE	682:1	682:1	8	tif
LEAF_NODE	682:4	682:4	8	->
LEAF_NODE	682:6	682:6	8	tif_rawcc
ASSIGN_OP	682:16	682:16	6	=
LEAF_NODE	682:16	682:16	7	=
RVAL	682:18	682:18	6	0
FIELD	682:18	682:18	7	0
LEAF_NODE	682:18	682:18	8	0
LEAF_NODE	682:19	682:19	4	;
EXPR_STATEMENT	683:1	683:34	3	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	683:1	683:1	4	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	683:1	683:18	5	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	683:1	683:1	6	tif -> tif_rawcp
FIELD	683:1	683:6	7	tif -> tif_rawcp
LEAF_NODE	683:1	683:1	8	tif
LEAF_NODE	683:4	683:4	8	->
LEAF_NODE	683:6	683:6	8	tif_rawcp
ASSIGN_OP	683:16	683:16	6	=
LEAF_NODE	683:16	683:16	7	=
RVAL	683:18	683:18	6	tif -> tif_rawdata
FIELD	683:18	683:23	7	tif -> tif_rawdata
LEAF_NODE	683:18	683:18	8	tif
LEAF_NODE	683:21	683:21	8	->
LEAF_NODE	683:23	683:23	8	tif_rawdata
LEAF_NODE	683:34	683:34	4	;
EXPR_STATEMENT	684:1	684:35	3	tif -> tif_flags |= TIFF_BUFFERSETUP ;
EXPR	684:1	684:1	4	tif -> tif_flags |= TIFF_BUFFERSETUP
ASSIGN	684:1	684:19	5	tif -> tif_flags |= TIFF_BUFFERSETUP
LVAL	684:1	684:1	6	tif -> tif_flags
FIELD	684:1	684:6	7	tif -> tif_flags
LEAF_NODE	684:1	684:1	8	tif
LEAF_NODE	684:4	684:4	8	->
LEAF_NODE	684:6	684:6	8	tif_flags
ASSIGN_OP	684:16	684:16	6	|=
LEAF_NODE	684:16	684:16	7	|=
RVAL	684:19	684:19	6	TIFF_BUFFERSETUP
FIELD	684:19	684:19	7	TIFF_BUFFERSETUP
LEAF_NODE	684:19	684:19	8	TIFF_BUFFERSETUP
LEAF_NODE	684:35	684:35	4	;
JUMP_STATEMENT	685:1	685:11	3	return ( 1 ) ;
KEYWORD	685:1	685:1	4	return
LEAF_NODE	685:1	685:1	5	return
DESTINATION	685:8	685:8	4	( 1 )
EXPR	685:8	685:10	5	( 1 )
LEAF_NODE	685:8	685:8	6	(
FIELD	685:9	685:9	6	1
LEAF_NODE	685:9	685:9	7	1
LEAF_NODE	685:10	685:10	6	)
LEAF_NODE	685:11	685:11	4	;
LEAF_NODE	686:0	686:0	2	}
FUNCTION_DEF	691:0	722:0	1	
RETURN_TYPE	691:0	691:7	2	static int
LEAF_NODE	691:0	691:0	3	static
TYPE_NAME	691:7	691:7	3	int
LEAF_NODE	691:7	691:7	4	int
FUNCTION_NAME	692:0	692:0	2	TIFFGrowStrips
LEAF_NODE	692:0	692:0	3	TIFFGrowStrips
PARAMETER_LIST	692:14	692:58	2	( TIFF * tif , uint32 delta , const char * module )
LEAF_NODE	692:14	692:14	3	(
PARAMETER_DECL	692:15	692:21	3	TIFF * tif
TYPE	692:15	692:19	4	TIFF *
TYPE_NAME	692:15	692:15	5	TIFF
LEAF_NODE	692:15	692:15	6	TIFF
POINTER	692:19	692:19	5	*
LEAF_NODE	692:19	692:19	6	*
NAME	692:21	692:21	4	tif
LEAF_NODE	692:21	692:21	5	tif
LEAF_NODE	692:24	692:24	3	,
PARAMETER_DECL	692:26	692:33	3	uint32 delta
TYPE	692:26	692:26	4	uint32
TYPE_NAME	692:26	692:26	5	uint32
LEAF_NODE	692:26	692:26	6	uint32
NAME	692:33	692:33	4	delta
LEAF_NODE	692:33	692:33	5	delta
LEAF_NODE	692:38	692:38	3	,
PARAMETER_DECL	692:40	692:52	3	const char * module
TYPE	692:40	692:50	4	const char *
TYPE_NAME	692:40	692:46	5	const char
LEAF_NODE	692:40	692:40	6	const
LEAF_NODE	692:46	692:46	6	char
POINTER	692:50	692:50	5	*
LEAF_NODE	692:50	692:50	6	*
NAME	692:52	692:52	4	module
LEAF_NODE	692:52	692:52	5	module
LEAF_NODE	692:58	692:58	3	)
LEAF_NODE	693:0	693:0	2	{
STATEMENTS	694:1	721:1	2	
SIMPLE_DECL	694:1	694:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	694:1	694:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	694:1	694:15	5	TIFFDirectory *
TYPE_NAME	694:1	694:1	6	TIFFDirectory
LEAF_NODE	694:1	694:1	7	TIFFDirectory
POINTER	694:15	694:15	6	*
LEAF_NODE	694:15	694:15	7	*
NAME	694:16	694:16	5	td
LEAF_NODE	694:16	694:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	694:16	694:16	5	td = & tif -> tif_dir
ASSIGN	694:16	694:21	6	td = & tif -> tif_dir
LVAL	694:16	694:16	7	td
NAME	694:16	694:16	8	td
LEAF_NODE	694:16	694:16	9	td
ASSIGN_OP	694:19	694:19	7	=
LEAF_NODE	694:19	694:19	8	=
RVAL	694:21	694:21	7	& tif -> tif_dir
UNARY_EXPR	694:21	694:22	8	& tif -> tif_dir
UNARY_OPERATOR	694:21	694:21	9	&
LEAF_NODE	694:21	694:21	10	&
FIELD	694:22	694:27	9	tif -> tif_dir
LEAF_NODE	694:22	694:22	10	tif
LEAF_NODE	694:25	694:25	10	->
LEAF_NODE	694:27	694:27	10	tif_dir
LEAF_NODE	694:34	694:34	4	;
SIMPLE_DECL	695:1	695:24	3	uint64 * new_stripoffset ;
VAR_DECL	695:1	695:9	4	uint64 * new_stripoffset
TYPE	695:1	695:7	5	uint64 *
TYPE_NAME	695:1	695:1	6	uint64
LEAF_NODE	695:1	695:1	7	uint64
POINTER	695:7	695:7	6	*
LEAF_NODE	695:7	695:7	7	*
NAME	695:9	695:9	5	new_stripoffset
LEAF_NODE	695:9	695:9	6	new_stripoffset
LEAF_NODE	695:24	695:24	4	;
SIMPLE_DECL	696:1	696:27	3	uint64 * new_stripbytecount ;
VAR_DECL	696:1	696:9	4	uint64 * new_stripbytecount
TYPE	696:1	696:7	5	uint64 *
TYPE_NAME	696:1	696:1	6	uint64
LEAF_NODE	696:1	696:1	7	uint64
POINTER	696:7	696:7	6	*
LEAF_NODE	696:7	696:7	7	*
NAME	696:9	696:9	5	new_stripbytecount
LEAF_NODE	696:9	696:9	6	new_stripbytecount
LEAF_NODE	696:27	696:27	4	;
EXPR_STATEMENT	698:1	698:51	3	assert ( td -> td_planarconfig == PLANARCONFIG_CONTIG ) ;
EXPR	698:1	698:1	4	assert ( td -> td_planarconfig == PLANARCONFIG_CONTIG )
FUNCTION_CALL	698:1	698:50	5	assert ( td -> td_planarconfig == PLANARCONFIG_CONTIG )
CALLEE	698:1	698:1	6	assert
LEAF_NODE	698:1	698:1	7	assert
LEAF_NODE	698:7	698:7	6	(
ARGUMENT	698:8	698:31	6	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	698:8	698:12	7	td -> td_planarconfig
LEAF_NODE	698:8	698:8	8	td
LEAF_NODE	698:10	698:10	8	->
LEAF_NODE	698:12	698:12	8	td_planarconfig
EQ_OPERATOR	698:28	698:28	7	==
LEAF_NODE	698:28	698:28	8	==
FIELD	698:31	698:31	7	PLANARCONFIG_CONTIG
LEAF_NODE	698:31	698:31	8	PLANARCONFIG_CONTIG
LEAF_NODE	698:50	698:50	6	)
LEAF_NODE	698:51	698:51	4	;
EXPR_STATEMENT	699:1	700:45	3	new_stripoffset = ( uint64 * ) _TIFFrealloc ( td -> td_stripoffset_p , ( td -> td_nstrips + delta ) * sizeof ( uint64 ) ) ;
EXPR	699:1	699:1	4	new_stripoffset = ( uint64 * ) _TIFFrealloc ( td -> td_stripoffset_p , ( td -> td_nstrips + delta ) * sizeof ( uint64 ) )
ASSIGN	699:1	699:19	5	new_stripoffset = ( uint64 * ) _TIFFrealloc ( td -> td_stripoffset_p , ( td -> td_nstrips + delta ) * sizeof ( uint64 ) )
LVAL	699:1	699:1	6	new_stripoffset
FIELD	699:1	699:1	7	new_stripoffset
LEAF_NODE	699:1	699:1	8	new_stripoffset
ASSIGN_OP	699:17	699:17	6	=
LEAF_NODE	699:17	699:17	7	=
RVAL	699:19	699:28	6	( uint64 * ) _TIFFrealloc ( td -> td_stripoffset_p , ( td -> td_nstrips + delta ) * sizeof ( uint64 ) )
LEAF_NODE	699:19	699:19	7	(
TYPE_NAME	699:20	699:20	7	uint64
LEAF_NODE	699:20	699:20	8	uint64
LEAF_NODE	699:26	699:26	7	*
LEAF_NODE	699:27	699:27	7	)
FUNCTION_CALL	699:28	700:44	7	_TIFFrealloc ( td -> td_stripoffset_p , ( td -> td_nstrips + delta ) * sizeof ( uint64 ) )
CALLEE	699:28	699:28	8	_TIFFrealloc
LEAF_NODE	699:28	699:28	9	_TIFFrealloc
LEAF_NODE	699:40	699:40	8	(
ARGUMENT	699:41	699:41	8	td -> td_stripoffset_p
FIELD	699:41	699:45	9	td -> td_stripoffset_p
LEAF_NODE	699:41	699:41	10	td
LEAF_NODE	699:43	699:43	10	->
LEAF_NODE	699:45	699:45	10	td_stripoffset_p
LEAF_NODE	699:61	699:61	8	,
ARGUMENT	700:2	700:29	8	( td -> td_nstrips + delta ) * sizeof ( uint64 )
LEAF_NODE	700:2	700:2	9	(
FIELD	700:3	700:7	9	td -> td_nstrips
LEAF_NODE	700:3	700:3	10	td
LEAF_NODE	700:5	700:5	10	->
LEAF_NODE	700:7	700:7	10	td_nstrips
LEAF_NODE	700:18	700:18	9	+
FIELD	700:20	700:20	9	delta
LEAF_NODE	700:20	700:20	10	delta
LEAF_NODE	700:25	700:25	9	)
LEAF_NODE	700:27	700:27	9	*
FUNCTION_CALL	700:29	700:43	9	sizeof ( uint64 )
CALLEE	700:29	700:29	10	sizeof
LEAF_NODE	700:29	700:29	11	sizeof
LEAF_NODE	700:36	700:36	10	(
ARGUMENT	700:37	700:37	10	uint64
FIELD	700:37	700:37	11	uint64
LEAF_NODE	700:37	700:37	12	uint64
LEAF_NODE	700:43	700:43	10	)
LEAF_NODE	700:44	700:44	8	)
LEAF_NODE	700:45	700:45	4	;
EXPR_STATEMENT	701:1	702:45	3	new_stripbytecount = ( uint64 * ) _TIFFrealloc ( td -> td_stripbytecount_p , ( td -> td_nstrips + delta ) * sizeof ( uint64 ) ) ;
EXPR	701:1	701:1	4	new_stripbytecount = ( uint64 * ) _TIFFrealloc ( td -> td_stripbytecount_p , ( td -> td_nstrips + delta ) * sizeof ( uint64 ) )
ASSIGN	701:1	701:22	5	new_stripbytecount = ( uint64 * ) _TIFFrealloc ( td -> td_stripbytecount_p , ( td -> td_nstrips + delta ) * sizeof ( uint64 ) )
LVAL	701:1	701:1	6	new_stripbytecount
FIELD	701:1	701:1	7	new_stripbytecount
LEAF_NODE	701:1	701:1	8	new_stripbytecount
ASSIGN_OP	701:20	701:20	6	=
LEAF_NODE	701:20	701:20	7	=
RVAL	701:22	701:31	6	( uint64 * ) _TIFFrealloc ( td -> td_stripbytecount_p , ( td -> td_nstrips + delta ) * sizeof ( uint64 ) )
LEAF_NODE	701:22	701:22	7	(
TYPE_NAME	701:23	701:23	7	uint64
LEAF_NODE	701:23	701:23	8	uint64
LEAF_NODE	701:29	701:29	7	*
LEAF_NODE	701:30	701:30	7	)
FUNCTION_CALL	701:31	702:44	7	_TIFFrealloc ( td -> td_stripbytecount_p , ( td -> td_nstrips + delta ) * sizeof ( uint64 ) )
CALLEE	701:31	701:31	8	_TIFFrealloc
LEAF_NODE	701:31	701:31	9	_TIFFrealloc
LEAF_NODE	701:43	701:43	8	(
ARGUMENT	701:44	701:44	8	td -> td_stripbytecount_p
FIELD	701:44	701:48	9	td -> td_stripbytecount_p
LEAF_NODE	701:44	701:44	10	td
LEAF_NODE	701:46	701:46	10	->
LEAF_NODE	701:48	701:48	10	td_stripbytecount_p
LEAF_NODE	701:67	701:67	8	,
ARGUMENT	702:2	702:29	8	( td -> td_nstrips + delta ) * sizeof ( uint64 )
LEAF_NODE	702:2	702:2	9	(
FIELD	702:3	702:7	9	td -> td_nstrips
LEAF_NODE	702:3	702:3	10	td
LEAF_NODE	702:5	702:5	10	->
LEAF_NODE	702:7	702:7	10	td_nstrips
LEAF_NODE	702:18	702:18	9	+
FIELD	702:20	702:20	9	delta
LEAF_NODE	702:20	702:20	10	delta
LEAF_NODE	702:25	702:25	9	)
LEAF_NODE	702:27	702:27	9	*
FUNCTION_CALL	702:29	702:43	9	sizeof ( uint64 )
CALLEE	702:29	702:29	10	sizeof
LEAF_NODE	702:29	702:29	11	sizeof
LEAF_NODE	702:36	702:36	10	(
ARGUMENT	702:37	702:37	10	uint64
FIELD	702:37	702:37	11	uint64
LEAF_NODE	702:37	702:37	12	uint64
LEAF_NODE	702:43	702:43	10	)
LEAF_NODE	702:44	702:44	8	)
LEAF_NODE	702:45	702:45	4	;
SELECTION	703:1	703:60	3	
KEYWORD	703:1	703:1	4	if
LEAF_NODE	703:1	703:1	5	if
LEAF_NODE	703:4	703:4	4	(
CONDITION	703:5	703:5	4	new_stripoffset == NULL || new_stripbytecount == NULL
EXPR	703:5	703:5	5	new_stripoffset == NULL || new_stripbytecount == NULL
OR	703:5	703:32	6	new_stripoffset == NULL || new_stripbytecount == NULL
EXPR	703:5	703:24	7	new_stripoffset == NULL
FIELD	703:5	703:5	8	new_stripoffset
LEAF_NODE	703:5	703:5	9	new_stripoffset
EQ_OPERATOR	703:21	703:21	8	==
LEAF_NODE	703:21	703:21	9	==
FIELD	703:24	703:24	8	NULL
LEAF_NODE	703:24	703:24	9	NULL
LEAF_NODE	703:29	703:29	7	||
EXPR	703:32	703:54	7	new_stripbytecount == NULL
FIELD	703:32	703:32	8	new_stripbytecount
LEAF_NODE	703:32	703:32	9	new_stripbytecount
EQ_OPERATOR	703:51	703:51	8	==
LEAF_NODE	703:51	703:51	9	==
FIELD	703:54	703:54	8	NULL
LEAF_NODE	703:54	703:54	9	NULL
LEAF_NODE	703:58	703:58	4	)
STATEMENTS	703:60	711:1	4	
LEAF_NODE	703:60	703:60	5	{
STATEMENTS	704:2	710:2	5	
SELECTION	704:2	705:3	6	
KEYWORD	704:2	704:2	7	if
LEAF_NODE	704:2	704:2	8	if
LEAF_NODE	704:5	704:5	7	(
CONDITION	704:6	704:6	7	new_stripoffset
EXPR	704:6	704:6	8	new_stripoffset
FIELD	704:6	704:6	9	new_stripoffset
LEAF_NODE	704:6	704:6	10	new_stripoffset
LEAF_NODE	704:21	704:21	7	)
STATEMENTS	705:3	705:3	7	
EXPR_STATEMENT	705:3	705:29	8	_TIFFfree ( new_stripoffset ) ;
EXPR	705:3	705:3	9	_TIFFfree ( new_stripoffset )
FUNCTION_CALL	705:3	705:28	10	_TIFFfree ( new_stripoffset )
CALLEE	705:3	705:3	11	_TIFFfree
LEAF_NODE	705:3	705:3	12	_TIFFfree
LEAF_NODE	705:12	705:12	11	(
ARGUMENT	705:13	705:13	11	new_stripoffset
FIELD	705:13	705:13	12	new_stripoffset
LEAF_NODE	705:13	705:13	13	new_stripoffset
LEAF_NODE	705:28	705:28	11	)
LEAF_NODE	705:29	705:29	9	;
SELECTION	706:2	707:3	6	
KEYWORD	706:2	706:2	7	if
LEAF_NODE	706:2	706:2	8	if
LEAF_NODE	706:5	706:5	7	(
CONDITION	706:6	706:6	7	new_stripbytecount
EXPR	706:6	706:6	8	new_stripbytecount
FIELD	706:6	706:6	9	new_stripbytecount
LEAF_NODE	706:6	706:6	10	new_stripbytecount
LEAF_NODE	706:24	706:24	7	)
STATEMENTS	707:3	707:3	7	
EXPR_STATEMENT	707:3	707:32	8	_TIFFfree ( new_stripbytecount ) ;
EXPR	707:3	707:3	9	_TIFFfree ( new_stripbytecount )
FUNCTION_CALL	707:3	707:31	10	_TIFFfree ( new_stripbytecount )
CALLEE	707:3	707:3	11	_TIFFfree
LEAF_NODE	707:3	707:3	12	_TIFFfree
LEAF_NODE	707:12	707:12	11	(
ARGUMENT	707:13	707:13	11	new_stripbytecount
FIELD	707:13	707:13	12	new_stripbytecount
LEAF_NODE	707:13	707:13	13	new_stripbytecount
LEAF_NODE	707:31	707:31	11	)
LEAF_NODE	707:32	707:32	9	;
EXPR_STATEMENT	708:2	708:20	6	td -> td_nstrips = 0 ;
EXPR	708:2	708:2	7	td -> td_nstrips = 0
ASSIGN	708:2	708:19	8	td -> td_nstrips = 0
LVAL	708:2	708:2	9	td -> td_nstrips
FIELD	708:2	708:6	10	td -> td_nstrips
LEAF_NODE	708:2	708:2	11	td
LEAF_NODE	708:4	708:4	11	->
LEAF_NODE	708:6	708:6	11	td_nstrips
ASSIGN_OP	708:17	708:17	9	=
LEAF_NODE	708:17	708:17	10	=
RVAL	708:19	708:19	9	0
FIELD	708:19	708:19	10	0
LEAF_NODE	708:19	708:19	11	0
LEAF_NODE	708:20	708:20	7	;
EXPR_STATEMENT	709:2	709:78	6	TIFFErrorExt ( tif -> tif_clientdata , module , "No space to expand strip arrays" ) ;
EXPR	709:2	709:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "No space to expand strip arrays" )
FUNCTION_CALL	709:2	709:77	8	TIFFErrorExt ( tif -> tif_clientdata , module , "No space to expand strip arrays" )
CALLEE	709:2	709:2	9	TIFFErrorExt
LEAF_NODE	709:2	709:2	10	TIFFErrorExt
LEAF_NODE	709:14	709:14	9	(
ARGUMENT	709:15	709:15	9	tif -> tif_clientdata
FIELD	709:15	709:20	10	tif -> tif_clientdata
LEAF_NODE	709:15	709:15	11	tif
LEAF_NODE	709:18	709:18	11	->
LEAF_NODE	709:20	709:20	11	tif_clientdata
LEAF_NODE	709:34	709:34	9	,
ARGUMENT	709:36	709:36	9	module
FIELD	709:36	709:36	10	module
LEAF_NODE	709:36	709:36	11	module
LEAF_NODE	709:42	709:42	9	,
ARGUMENT	709:44	709:44	9	"No space to expand strip arrays"
FIELD	709:44	709:44	10	"No space to expand strip arrays"
LEAF_NODE	709:44	709:44	11	"No space to expand strip arrays"
LEAF_NODE	709:77	709:77	9	)
LEAF_NODE	709:78	709:78	7	;
JUMP_STATEMENT	710:2	710:12	6	return ( 0 ) ;
KEYWORD	710:2	710:2	7	return
LEAF_NODE	710:2	710:2	8	return
DESTINATION	710:9	710:9	7	( 0 )
EXPR	710:9	710:11	8	( 0 )
LEAF_NODE	710:9	710:9	9	(
FIELD	710:10	710:10	9	0
LEAF_NODE	710:10	710:10	10	0
LEAF_NODE	710:11	710:11	9	)
LEAF_NODE	710:12	710:12	7	;
LEAF_NODE	711:1	711:1	5	}
EXPR_STATEMENT	712:1	712:39	3	td -> td_stripoffset_p = new_stripoffset ;
EXPR	712:1	712:1	4	td -> td_stripoffset_p = new_stripoffset
ASSIGN	712:1	712:24	5	td -> td_stripoffset_p = new_stripoffset
LVAL	712:1	712:1	6	td -> td_stripoffset_p
FIELD	712:1	712:5	7	td -> td_stripoffset_p
LEAF_NODE	712:1	712:1	8	td
LEAF_NODE	712:3	712:3	8	->
LEAF_NODE	712:5	712:5	8	td_stripoffset_p
ASSIGN_OP	712:22	712:22	6	=
LEAF_NODE	712:22	712:22	7	=
RVAL	712:24	712:24	6	new_stripoffset
FIELD	712:24	712:24	7	new_stripoffset
LEAF_NODE	712:24	712:24	8	new_stripoffset
LEAF_NODE	712:39	712:39	4	;
EXPR_STATEMENT	713:1	713:45	3	td -> td_stripbytecount_p = new_stripbytecount ;
EXPR	713:1	713:1	4	td -> td_stripbytecount_p = new_stripbytecount
ASSIGN	713:1	713:27	5	td -> td_stripbytecount_p = new_stripbytecount
LVAL	713:1	713:1	6	td -> td_stripbytecount_p
FIELD	713:1	713:5	7	td -> td_stripbytecount_p
LEAF_NODE	713:1	713:1	8	td
LEAF_NODE	713:3	713:3	8	->
LEAF_NODE	713:5	713:5	8	td_stripbytecount_p
ASSIGN_OP	713:25	713:25	6	=
LEAF_NODE	713:25	713:25	7	=
RVAL	713:27	713:27	6	new_stripbytecount
FIELD	713:27	713:27	7	new_stripbytecount
LEAF_NODE	713:27	713:27	8	new_stripbytecount
LEAF_NODE	713:45	713:45	4	;
EXPR_STATEMENT	714:1	715:31	3	_TIFFmemset ( td -> td_stripoffset_p + td -> td_nstrips , 0 , delta * sizeof ( uint64 ) ) ;
EXPR	714:1	714:1	4	_TIFFmemset ( td -> td_stripoffset_p + td -> td_nstrips , 0 , delta * sizeof ( uint64 ) )
FUNCTION_CALL	714:1	715:30	5	_TIFFmemset ( td -> td_stripoffset_p + td -> td_nstrips , 0 , delta * sizeof ( uint64 ) )
CALLEE	714:1	714:1	6	_TIFFmemset
LEAF_NODE	714:1	714:1	7	_TIFFmemset
LEAF_NODE	714:12	714:12	6	(
ARGUMENT	714:13	714:36	6	td -> td_stripoffset_p + td -> td_nstrips
FIELD	714:13	714:17	7	td -> td_stripoffset_p
LEAF_NODE	714:13	714:13	8	td
LEAF_NODE	714:15	714:15	8	->
LEAF_NODE	714:17	714:17	8	td_stripoffset_p
LEAF_NODE	714:34	714:34	7	+
FIELD	714:36	714:40	7	td -> td_nstrips
LEAF_NODE	714:36	714:36	8	td
LEAF_NODE	714:38	714:38	8	->
LEAF_NODE	714:40	714:40	8	td_nstrips
LEAF_NODE	714:50	714:50	6	,
ARGUMENT	715:6	715:6	6	0
FIELD	715:6	715:6	7	0
LEAF_NODE	715:6	715:6	8	0
LEAF_NODE	715:7	715:7	6	,
ARGUMENT	715:9	715:15	6	delta * sizeof ( uint64 )
FIELD	715:9	715:9	7	delta
LEAF_NODE	715:9	715:9	8	delta
LEAF_NODE	715:14	715:14	7	*
FUNCTION_CALL	715:15	715:29	7	sizeof ( uint64 )
CALLEE	715:15	715:15	8	sizeof
LEAF_NODE	715:15	715:15	9	sizeof
LEAF_NODE	715:22	715:22	8	(
ARGUMENT	715:23	715:23	8	uint64
FIELD	715:23	715:23	9	uint64
LEAF_NODE	715:23	715:23	10	uint64
LEAF_NODE	715:29	715:29	8	)
LEAF_NODE	715:30	715:30	6	)
LEAF_NODE	715:31	715:31	4	;
EXPR_STATEMENT	716:1	717:31	3	_TIFFmemset ( td -> td_stripbytecount_p + td -> td_nstrips , 0 , delta * sizeof ( uint64 ) ) ;
EXPR	716:1	716:1	4	_TIFFmemset ( td -> td_stripbytecount_p + td -> td_nstrips , 0 , delta * sizeof ( uint64 ) )
FUNCTION_CALL	716:1	717:30	5	_TIFFmemset ( td -> td_stripbytecount_p + td -> td_nstrips , 0 , delta * sizeof ( uint64 ) )
CALLEE	716:1	716:1	6	_TIFFmemset
LEAF_NODE	716:1	716:1	7	_TIFFmemset
LEAF_NODE	716:12	716:12	6	(
ARGUMENT	716:13	716:39	6	td -> td_stripbytecount_p + td -> td_nstrips
FIELD	716:13	716:17	7	td -> td_stripbytecount_p
LEAF_NODE	716:13	716:13	8	td
LEAF_NODE	716:15	716:15	8	->
LEAF_NODE	716:17	716:17	8	td_stripbytecount_p
LEAF_NODE	716:37	716:37	7	+
FIELD	716:39	716:43	7	td -> td_nstrips
LEAF_NODE	716:39	716:39	8	td
LEAF_NODE	716:41	716:41	8	->
LEAF_NODE	716:43	716:43	8	td_nstrips
LEAF_NODE	716:53	716:53	6	,
ARGUMENT	717:6	717:6	6	0
FIELD	717:6	717:6	7	0
LEAF_NODE	717:6	717:6	8	0
LEAF_NODE	717:7	717:7	6	,
ARGUMENT	717:9	717:15	6	delta * sizeof ( uint64 )
FIELD	717:9	717:9	7	delta
LEAF_NODE	717:9	717:9	8	delta
LEAF_NODE	717:14	717:14	7	*
FUNCTION_CALL	717:15	717:29	7	sizeof ( uint64 )
CALLEE	717:15	717:15	8	sizeof
LEAF_NODE	717:15	717:15	9	sizeof
LEAF_NODE	717:22	717:22	8	(
ARGUMENT	717:23	717:23	8	uint64
FIELD	717:23	717:23	9	uint64
LEAF_NODE	717:23	717:23	10	uint64
LEAF_NODE	717:29	717:29	8	)
LEAF_NODE	717:30	717:30	6	)
LEAF_NODE	717:31	717:31	4	;
EXPR_STATEMENT	718:1	718:24	3	td -> td_nstrips += delta ;
EXPR	718:1	718:1	4	td -> td_nstrips += delta
ASSIGN	718:1	718:19	5	td -> td_nstrips += delta
LVAL	718:1	718:1	6	td -> td_nstrips
FIELD	718:1	718:5	7	td -> td_nstrips
LEAF_NODE	718:1	718:1	8	td
LEAF_NODE	718:3	718:3	8	->
LEAF_NODE	718:5	718:5	8	td_nstrips
ASSIGN_OP	718:16	718:16	6	+=
LEAF_NODE	718:16	718:16	7	+=
RVAL	718:19	718:19	6	delta
FIELD	718:19	718:19	7	delta
LEAF_NODE	718:19	718:19	8	delta
LEAF_NODE	718:24	718:24	4	;
EXPR_STATEMENT	719:8	719:42	3	tif -> tif_flags |= TIFF_DIRTYDIRECT ;
EXPR	719:8	719:8	4	tif -> tif_flags |= TIFF_DIRTYDIRECT
ASSIGN	719:8	719:26	5	tif -> tif_flags |= TIFF_DIRTYDIRECT
LVAL	719:8	719:8	6	tif -> tif_flags
FIELD	719:8	719:13	7	tif -> tif_flags
LEAF_NODE	719:8	719:8	8	tif
LEAF_NODE	719:11	719:11	8	->
LEAF_NODE	719:13	719:13	8	tif_flags
ASSIGN_OP	719:23	719:23	6	|=
LEAF_NODE	719:23	719:23	7	|=
RVAL	719:26	719:26	6	TIFF_DIRTYDIRECT
FIELD	719:26	719:26	7	TIFF_DIRTYDIRECT
LEAF_NODE	719:26	719:26	8	TIFF_DIRTYDIRECT
LEAF_NODE	719:42	719:42	4	;
JUMP_STATEMENT	721:1	721:11	3	return ( 1 ) ;
KEYWORD	721:1	721:1	4	return
LEAF_NODE	721:1	721:1	5	return
DESTINATION	721:8	721:8	4	( 1 )
EXPR	721:8	721:10	5	( 1 )
LEAF_NODE	721:8	721:8	6	(
FIELD	721:9	721:9	6	1
LEAF_NODE	721:9	721:9	7	1
LEAF_NODE	721:10	721:10	6	)
LEAF_NODE	721:11	721:11	4	;
LEAF_NODE	722:0	722:0	2	}
FUNCTION_DEF	727:0	795:0	1	
RETURN_TYPE	727:0	727:7	2	static int
LEAF_NODE	727:0	727:0	3	static
TYPE_NAME	727:7	727:7	3	int
LEAF_NODE	727:7	727:7	4	int
FUNCTION_NAME	728:0	728:0	2	TIFFAppendToStrip
LEAF_NODE	728:0	728:0	3	TIFFAppendToStrip
PARAMETER_LIST	728:17	728:67	2	( TIFF * tif , uint32 strip , uint8 * data , tmsize_t cc )
LEAF_NODE	728:17	728:17	3	(
PARAMETER_DECL	728:18	728:24	3	TIFF * tif
TYPE	728:18	728:22	4	TIFF *
TYPE_NAME	728:18	728:18	5	TIFF
LEAF_NODE	728:18	728:18	6	TIFF
POINTER	728:22	728:22	5	*
LEAF_NODE	728:22	728:22	6	*
NAME	728:24	728:24	4	tif
LEAF_NODE	728:24	728:24	5	tif
LEAF_NODE	728:27	728:27	3	,
PARAMETER_DECL	728:29	728:36	3	uint32 strip
TYPE	728:29	728:29	4	uint32
TYPE_NAME	728:29	728:29	5	uint32
LEAF_NODE	728:29	728:29	6	uint32
NAME	728:36	728:36	4	strip
LEAF_NODE	728:36	728:36	5	strip
LEAF_NODE	728:41	728:41	3	,
PARAMETER_DECL	728:43	728:50	3	uint8 * data
TYPE	728:43	728:48	4	uint8 *
TYPE_NAME	728:43	728:43	5	uint8
LEAF_NODE	728:43	728:43	6	uint8
POINTER	728:48	728:48	5	*
LEAF_NODE	728:48	728:48	6	*
NAME	728:50	728:50	4	data
LEAF_NODE	728:50	728:50	5	data
LEAF_NODE	728:54	728:54	3	,
PARAMETER_DECL	728:56	728:65	3	tmsize_t cc
TYPE	728:56	728:56	4	tmsize_t
TYPE_NAME	728:56	728:56	5	tmsize_t
LEAF_NODE	728:56	728:56	6	tmsize_t
NAME	728:65	728:65	4	cc
LEAF_NODE	728:65	728:65	5	cc
LEAF_NODE	728:67	728:67	3	)
LEAF_NODE	729:0	729:0	2	{
STATEMENTS	730:1	794:1	2	
LEAF_NODE	730:1	730:1	3	static
SIMPLE_DECL	730:8	730:49	3	const char [ ] module ; module = "TIFFAppendToStrip" ;
VAR_DECL	730:8	730:19	4	const char [ ] module ; module = "TIFFAppendToStrip"
TYPE	730:8	730:25	5	const char [ ]
TYPE_NAME	730:8	730:14	6	const char
LEAF_NODE	730:8	730:8	7	const
LEAF_NODE	730:14	730:14	7	char
TYPE_SUFFIX	730:25	730:26	6	[ ]
LEAF_NODE	730:25	730:25	7	[
LEAF_NODE	730:26	730:26	7	]
NAME	730:19	730:19	5	module
LEAF_NODE	730:19	730:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	730:19	730:19	5	module = "TIFFAppendToStrip"
ASSIGN	730:19	730:30	6	module = "TIFFAppendToStrip"
LVAL	730:19	730:19	7	module
NAME	730:19	730:19	8	module
LEAF_NODE	730:19	730:19	9	module
ASSIGN_OP	730:28	730:28	7	=
LEAF_NODE	730:28	730:28	8	=
RVAL	730:30	730:30	7	"TIFFAppendToStrip"
FIELD	730:30	730:30	8	"TIFFAppendToStrip"
LEAF_NODE	730:30	730:30	9	"TIFFAppendToStrip"
LEAF_NODE	730:49	730:49	4	;
SIMPLE_DECL	731:1	731:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	731:1	731:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	731:1	731:15	5	TIFFDirectory *
TYPE_NAME	731:1	731:1	6	TIFFDirectory
LEAF_NODE	731:1	731:1	7	TIFFDirectory
POINTER	731:15	731:15	6	*
LEAF_NODE	731:15	731:15	7	*
NAME	731:16	731:16	5	td
LEAF_NODE	731:16	731:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	731:16	731:16	5	td = & tif -> tif_dir
ASSIGN	731:16	731:21	6	td = & tif -> tif_dir
LVAL	731:16	731:16	7	td
NAME	731:16	731:16	8	td
LEAF_NODE	731:16	731:16	9	td
ASSIGN_OP	731:19	731:19	7	=
LEAF_NODE	731:19	731:19	8	=
RVAL	731:21	731:21	7	& tif -> tif_dir
UNARY_EXPR	731:21	731:22	8	& tif -> tif_dir
UNARY_OPERATOR	731:21	731:21	9	&
LEAF_NODE	731:21	731:21	10	&
FIELD	731:22	731:27	9	tif -> tif_dir
LEAF_NODE	731:22	731:22	10	tif
LEAF_NODE	731:25	731:25	10	->
LEAF_NODE	731:27	731:27	10	tif_dir
LEAF_NODE	731:34	731:34	4	;
SIMPLE_DECL	732:1	732:9	3	uint64 m ;
VAR_DECL	732:1	732:8	4	uint64 m
TYPE	732:1	732:1	5	uint64
TYPE_NAME	732:1	732:1	6	uint64
LEAF_NODE	732:1	732:1	7	uint64
NAME	732:8	732:8	5	m
LEAF_NODE	732:8	732:8	6	m
LEAF_NODE	732:9	732:9	4	;
SIMPLE_DECL	733:8	733:33	3	int64 old_byte_count ; old_byte_count = - 1 ;
VAR_DECL	733:8	733:14	4	int64 old_byte_count ; old_byte_count = - 1
TYPE	733:8	733:8	5	int64
TYPE_NAME	733:8	733:8	6	int64
LEAF_NODE	733:8	733:8	7	int64
NAME	733:14	733:14	5	old_byte_count
LEAF_NODE	733:14	733:14	6	old_byte_count
LEAF_NODE	0:0	0:0	5	;
INIT	733:14	733:14	5	old_byte_count = - 1
ASSIGN	733:14	733:31	6	old_byte_count = - 1
LVAL	733:14	733:14	7	old_byte_count
NAME	733:14	733:14	8	old_byte_count
LEAF_NODE	733:14	733:14	9	old_byte_count
ASSIGN_OP	733:29	733:29	7	=
LEAF_NODE	733:29	733:29	8	=
RVAL	733:31	733:31	7	- 1
UNARY_EXPR	733:31	733:32	8	- 1
UNARY_OPERATOR	733:31	733:31	9	-
LEAF_NODE	733:31	733:31	10	-
FIELD	733:32	733:32	9	1
LEAF_NODE	733:32	733:32	10	1
LEAF_NODE	733:33	733:33	4	;
SELECTION	735:1	735:63	3	
KEYWORD	735:1	735:1	4	if
LEAF_NODE	735:1	735:1	5	if
LEAF_NODE	735:4	735:4	4	(
CONDITION	735:5	735:5	4	td -> td_stripoffset_p [ strip ] == 0 || tif -> tif_curoff == 0
EXPR	735:5	735:5	5	td -> td_stripoffset_p [ strip ] == 0 || tif -> tif_curoff == 0
OR	735:5	735:41	6	td -> td_stripoffset_p [ strip ] == 0 || tif -> tif_curoff == 0
EXPR	735:5	735:36	7	td -> td_stripoffset_p [ strip ] == 0
FIELD	735:5	735:31	8	td -> td_stripoffset_p [ strip ]
LEAF_NODE	735:5	735:5	9	td
LEAF_NODE	735:7	735:7	9	->
LEAF_NODE	735:9	735:9	9	td_stripoffset_p
LEAF_NODE	735:25	735:25	9	[
EXPR	735:26	735:26	9	strip
FIELD	735:26	735:26	10	strip
LEAF_NODE	735:26	735:26	11	strip
LEAF_NODE	735:31	735:31	9	]
EQ_OPERATOR	735:33	735:33	8	==
LEAF_NODE	735:33	735:33	9	==
FIELD	735:36	735:36	8	0
LEAF_NODE	735:36	735:36	9	0
LEAF_NODE	735:38	735:38	7	||
EXPR	735:41	735:60	7	tif -> tif_curoff == 0
FIELD	735:41	735:46	8	tif -> tif_curoff
LEAF_NODE	735:41	735:41	9	tif
LEAF_NODE	735:44	735:44	9	->
LEAF_NODE	735:46	735:46	9	tif_curoff
EQ_OPERATOR	735:57	735:57	8	==
LEAF_NODE	735:57	735:57	9	==
FIELD	735:60	735:60	8	0
LEAF_NODE	735:60	735:60	9	0
LEAF_NODE	735:61	735:61	4	)
STATEMENTS	735:63	773:1	4	
LEAF_NODE	735:63	735:63	5	{
STATEMENTS	736:12	772:12	5	
EXPR_STATEMENT	736:12	736:38	6	assert ( td -> td_nstrips > 0 ) ;
EXPR	736:12	736:12	7	assert ( td -> td_nstrips > 0 )
FUNCTION_CALL	736:12	736:37	8	assert ( td -> td_nstrips > 0 )
CALLEE	736:12	736:12	9	assert
LEAF_NODE	736:12	736:12	10	assert
LEAF_NODE	736:18	736:18	9	(
ARGUMENT	736:19	736:36	9	td -> td_nstrips > 0
FIELD	736:19	736:23	10	td -> td_nstrips
LEAF_NODE	736:19	736:19	11	td
LEAF_NODE	736:21	736:21	11	->
LEAF_NODE	736:23	736:23	11	td_nstrips
REL_OPERATOR	736:34	736:34	10	>
LEAF_NODE	736:34	736:34	11	>
FIELD	736:36	736:36	10	0
LEAF_NODE	736:36	736:36	11	0
LEAF_NODE	736:37	736:37	9	)
LEAF_NODE	736:38	736:38	7	;
SELECTION	738:12	741:12	6	
KEYWORD	738:12	738:12	7	if
LEAF_NODE	738:12	738:12	8	if
LEAF_NODE	738:14	738:14	7	(
CONDITION	738:16	738:16	7	td -> td_stripbytecount_p [ strip ] != 0 && td -> td_stripoffset_p [ strip ] != 0 && td -> td_stripbytecount_p [ strip ] >= ( uint64 ) cc
EXPR	738:16	738:16	8	td -> td_stripbytecount_p [ strip ] != 0 && td -> td_stripoffset_p [ strip ] != 0 && td -> td_stripbytecount_p [ strip ] >= ( uint64 ) cc
AND	738:16	739:19	9	td -> td_stripbytecount_p [ strip ] != 0 && td -> td_stripoffset_p [ strip ] != 0 && td -> td_stripbytecount_p [ strip ] >= ( uint64 ) cc
EXPR	738:16	738:50	10	td -> td_stripbytecount_p [ strip ] != 0
FIELD	738:16	738:45	11	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	738:16	738:16	12	td
LEAF_NODE	738:18	738:18	12	->
LEAF_NODE	738:20	738:20	12	td_stripbytecount_p
LEAF_NODE	738:39	738:39	12	[
EXPR	738:40	738:40	12	strip
FIELD	738:40	738:40	13	strip
LEAF_NODE	738:40	738:40	14	strip
LEAF_NODE	738:45	738:45	12	]
EQ_OPERATOR	738:47	738:47	11	!=
LEAF_NODE	738:47	738:47	12	!=
FIELD	738:50	738:50	11	0
LEAF_NODE	738:50	738:50	12	0
LEAF_NODE	739:16	739:16	10	&&
EXPR	739:19	739:19	10	td -> td_stripoffset_p [ strip ] != 0 && td -> td_stripbytecount_p [ strip ] >= ( uint64 ) cc
AND	739:19	740:19	11	td -> td_stripoffset_p [ strip ] != 0 && td -> td_stripbytecount_p [ strip ] >= ( uint64 ) cc
EXPR	739:19	739:50	12	td -> td_stripoffset_p [ strip ] != 0
FIELD	739:19	739:45	13	td -> td_stripoffset_p [ strip ]
LEAF_NODE	739:19	739:19	14	td
LEAF_NODE	739:21	739:21	14	->
LEAF_NODE	739:23	739:23	14	td_stripoffset_p
LEAF_NODE	739:39	739:39	14	[
EXPR	739:40	739:40	14	strip
FIELD	739:40	739:40	15	strip
LEAF_NODE	739:40	739:40	16	strip
LEAF_NODE	739:45	739:45	14	]
EQ_OPERATOR	739:47	739:47	13	!=
LEAF_NODE	739:47	739:47	14	!=
FIELD	739:50	739:50	13	0
LEAF_NODE	739:50	739:50	14	0
LEAF_NODE	740:16	740:16	12	&&
EXPR	740:19	740:62	12	td -> td_stripbytecount_p [ strip ] >= ( uint64 ) cc
FIELD	740:19	740:48	13	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	740:19	740:19	14	td
LEAF_NODE	740:21	740:21	14	->
LEAF_NODE	740:23	740:23	14	td_stripbytecount_p
LEAF_NODE	740:42	740:42	14	[
EXPR	740:43	740:43	14	strip
FIELD	740:43	740:43	15	strip
LEAF_NODE	740:43	740:43	16	strip
LEAF_NODE	740:48	740:48	14	]
REL_OPERATOR	740:50	740:50	13	>=
LEAF_NODE	740:50	740:50	14	>=
LEAF_NODE	740:53	740:53	13	(
TYPE_NAME	740:54	740:54	13	uint64
LEAF_NODE	740:54	740:54	14	uint64
LEAF_NODE	740:60	740:60	13	)
FIELD	740:62	740:62	13	cc
LEAF_NODE	740:62	740:62	14	cc
LEAF_NODE	740:65	740:65	7	)
STATEMENTS	741:12	755:12	7	
LEAF_NODE	741:12	741:12	8	{
STATEMENTS	749:16	749:16	8	
SELECTION	749:16	749:63	9	
KEYWORD	749:16	749:16	10	if
LEAF_NODE	749:16	749:16	11	if
LEAF_NODE	749:19	749:19	10	(
CONDITION	749:20	749:20	10	! SeekOK ( tif , td -> td_stripoffset_p [ strip ] )
EXPR	749:20	749:20	11	! SeekOK ( tif , td -> td_stripoffset_p [ strip ] )
UNARY_EXPR	749:20	749:21	12	! SeekOK ( tif , td -> td_stripoffset_p [ strip ] )
UNARY_OPERATOR	749:20	749:20	13	!
LEAF_NODE	749:20	749:20	14	!
FUNCTION_CALL	749:21	749:60	13	SeekOK ( tif , td -> td_stripoffset_p [ strip ] )
CALLEE	749:21	749:21	14	SeekOK
LEAF_NODE	749:21	749:21	15	SeekOK
LEAF_NODE	749:27	749:27	14	(
ARGUMENT	749:28	749:28	14	tif
FIELD	749:28	749:28	15	tif
LEAF_NODE	749:28	749:28	16	tif
LEAF_NODE	749:31	749:31	14	,
ARGUMENT	749:33	749:33	14	td -> td_stripoffset_p [ strip ]
FIELD	749:33	749:59	15	td -> td_stripoffset_p [ strip ]
LEAF_NODE	749:33	749:33	16	td
LEAF_NODE	749:35	749:35	16	->
LEAF_NODE	749:37	749:37	16	td_stripoffset_p
LEAF_NODE	749:53	749:53	16	[
EXPR	749:54	749:54	16	strip
FIELD	749:54	749:54	17	strip
LEAF_NODE	749:54	749:54	18	strip
LEAF_NODE	749:59	749:59	16	]
LEAF_NODE	749:60	749:60	14	)
LEAF_NODE	749:61	749:61	10	)
STATEMENTS	749:63	754:16	10	
LEAF_NODE	749:63	749:63	11	{
STATEMENTS	750:20	753:20	11	
EXPR_STATEMENT	750:20	752:61	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu" , ( unsigned long ) tif -> tif_row ) ;
EXPR	750:20	750:20	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu" , ( unsigned long ) tif -> tif_row )
FUNCTION_CALL	750:20	752:60	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu" , ( unsigned long ) tif -> tif_row )
CALLEE	750:20	750:20	15	TIFFErrorExt
LEAF_NODE	750:20	750:20	16	TIFFErrorExt
LEAF_NODE	750:32	750:32	15	(
ARGUMENT	750:33	750:33	15	tif -> tif_clientdata
FIELD	750:33	750:38	16	tif -> tif_clientdata
LEAF_NODE	750:33	750:33	17	tif
LEAF_NODE	750:36	750:36	17	->
LEAF_NODE	750:38	750:38	17	tif_clientdata
LEAF_NODE	750:52	750:52	15	,
ARGUMENT	750:54	750:54	15	module
FIELD	750:54	750:54	16	module
LEAF_NODE	750:54	750:54	17	module
LEAF_NODE	750:60	750:60	15	,
ARGUMENT	751:33	751:33	15	"Seek error at scanline %lu"
FIELD	751:33	751:33	16	"Seek error at scanline %lu"
LEAF_NODE	751:33	751:33	17	"Seek error at scanline %lu"
LEAF_NODE	751:61	751:61	15	,
ARGUMENT	752:33	752:48	15	( unsigned long ) tif -> tif_row
LEAF_NODE	752:33	752:33	16	(
TYPE_NAME	752:34	752:43	16	unsigned long
LEAF_NODE	752:34	752:34	17	unsigned
LEAF_NODE	752:43	752:43	17	long
LEAF_NODE	752:47	752:47	16	)
FIELD	752:48	752:53	16	tif -> tif_row
LEAF_NODE	752:48	752:48	17	tif
LEAF_NODE	752:51	752:51	17	->
LEAF_NODE	752:53	752:53	17	tif_row
LEAF_NODE	752:60	752:60	15	)
LEAF_NODE	752:61	752:61	13	;
JUMP_STATEMENT	753:20	753:30	12	return ( 0 ) ;
KEYWORD	753:20	753:20	13	return
LEAF_NODE	753:20	753:20	14	return
DESTINATION	753:27	753:27	13	( 0 )
EXPR	753:27	753:29	14	( 0 )
LEAF_NODE	753:27	753:27	15	(
FIELD	753:28	753:28	15	0
LEAF_NODE	753:28	753:28	16	0
LEAF_NODE	753:29	753:29	15	)
LEAF_NODE	753:30	753:30	13	;
LEAF_NODE	754:16	754:16	11	}
LEAF_NODE	755:12	755:12	8	}
SELECTION	756:12	757:12	6	
KEYWORD	756:12	756:12	7	else
LEAF_NODE	756:12	756:12	8	else
STATEMENTS	757:12	764:12	7	
LEAF_NODE	757:12	757:12	8	{
STATEMENTS	762:16	763:16	8	
EXPR_STATEMENT	762:16	762:76	9	td -> td_stripoffset_p [ strip ] = TIFFSeekFile ( tif , 0 , SEEK_END ) ;
EXPR	762:16	762:16	10	td -> td_stripoffset_p [ strip ] = TIFFSeekFile ( tif , 0 , SEEK_END )
ASSIGN	762:16	762:46	11	td -> td_stripoffset_p [ strip ] = TIFFSeekFile ( tif , 0 , SEEK_END )
LVAL	762:16	762:16	12	td -> td_stripoffset_p [ strip ]
FIELD	762:16	762:42	13	td -> td_stripoffset_p [ strip ]
LEAF_NODE	762:16	762:16	14	td
LEAF_NODE	762:18	762:18	14	->
LEAF_NODE	762:20	762:20	14	td_stripoffset_p
LEAF_NODE	762:36	762:36	14	[
EXPR	762:37	762:37	14	strip
FIELD	762:37	762:37	15	strip
LEAF_NODE	762:37	762:37	16	strip
LEAF_NODE	762:42	762:42	14	]
ASSIGN_OP	762:44	762:44	12	=
LEAF_NODE	762:44	762:44	13	=
RVAL	762:46	762:46	12	TIFFSeekFile ( tif , 0 , SEEK_END )
FUNCTION_CALL	762:46	762:75	13	TIFFSeekFile ( tif , 0 , SEEK_END )
CALLEE	762:46	762:46	14	TIFFSeekFile
LEAF_NODE	762:46	762:46	15	TIFFSeekFile
LEAF_NODE	762:58	762:58	14	(
ARGUMENT	762:59	762:59	14	tif
FIELD	762:59	762:59	15	tif
LEAF_NODE	762:59	762:59	16	tif
LEAF_NODE	762:62	762:62	14	,
ARGUMENT	762:64	762:64	14	0
FIELD	762:64	762:64	15	0
LEAF_NODE	762:64	762:64	16	0
LEAF_NODE	762:65	762:65	14	,
ARGUMENT	762:67	762:67	14	SEEK_END
FIELD	762:67	762:67	15	SEEK_END
LEAF_NODE	762:67	762:67	16	SEEK_END
LEAF_NODE	762:75	762:75	14	)
LEAF_NODE	762:76	762:76	10	;
EXPR_STATEMENT	763:16	763:49	9	tif -> tif_flags |= TIFF_DIRTYSTRIP ;
EXPR	763:16	763:16	10	tif -> tif_flags |= TIFF_DIRTYSTRIP
ASSIGN	763:16	763:34	11	tif -> tif_flags |= TIFF_DIRTYSTRIP
LVAL	763:16	763:16	12	tif -> tif_flags
FIELD	763:16	763:21	13	tif -> tif_flags
LEAF_NODE	763:16	763:16	14	tif
LEAF_NODE	763:19	763:19	14	->
LEAF_NODE	763:21	763:21	14	tif_flags
ASSIGN_OP	763:31	763:31	12	|=
LEAF_NODE	763:31	763:31	13	|=
RVAL	763:34	763:34	12	TIFF_DIRTYSTRIP
FIELD	763:34	763:34	13	TIFF_DIRTYSTRIP
LEAF_NODE	763:34	763:34	14	TIFF_DIRTYSTRIP
LEAF_NODE	763:49	763:49	10	;
LEAF_NODE	764:12	764:12	8	}
EXPR_STATEMENT	766:12	766:57	6	tif -> tif_curoff = td -> td_stripoffset_p [ strip ] ;
EXPR	766:12	766:12	7	tif -> tif_curoff = td -> td_stripoffset_p [ strip ]
ASSIGN	766:12	766:30	8	tif -> tif_curoff = td -> td_stripoffset_p [ strip ]
LVAL	766:12	766:12	9	tif -> tif_curoff
FIELD	766:12	766:17	10	tif -> tif_curoff
LEAF_NODE	766:12	766:12	11	tif
LEAF_NODE	766:15	766:15	11	->
LEAF_NODE	766:17	766:17	11	tif_curoff
ASSIGN_OP	766:28	766:28	9	=
LEAF_NODE	766:28	766:28	10	=
RVAL	766:30	766:30	9	td -> td_stripoffset_p [ strip ]
FIELD	766:30	766:56	10	td -> td_stripoffset_p [ strip ]
LEAF_NODE	766:30	766:30	11	td
LEAF_NODE	766:32	766:32	11	->
LEAF_NODE	766:34	766:34	11	td_stripoffset_p
LEAF_NODE	766:50	766:50	11	[
EXPR	766:51	766:51	11	strip
FIELD	766:51	766:51	12	strip
LEAF_NODE	766:51	766:51	13	strip
LEAF_NODE	766:56	766:56	11	]
LEAF_NODE	766:57	766:57	7	;
EXPR_STATEMENT	771:12	771:59	6	old_byte_count = td -> td_stripbytecount_p [ strip ] ;
EXPR	771:12	771:12	7	old_byte_count = td -> td_stripbytecount_p [ strip ]
ASSIGN	771:12	771:29	8	old_byte_count = td -> td_stripbytecount_p [ strip ]
LVAL	771:12	771:12	9	old_byte_count
FIELD	771:12	771:12	10	old_byte_count
LEAF_NODE	771:12	771:12	11	old_byte_count
ASSIGN_OP	771:27	771:27	9	=
LEAF_NODE	771:27	771:27	10	=
RVAL	771:29	771:29	9	td -> td_stripbytecount_p [ strip ]
FIELD	771:29	771:58	10	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	771:29	771:29	11	td
LEAF_NODE	771:31	771:31	11	->
LEAF_NODE	771:33	771:33	11	td_stripbytecount_p
LEAF_NODE	771:52	771:52	11	[
EXPR	771:53	771:53	11	strip
FIELD	771:53	771:53	12	strip
LEAF_NODE	771:53	771:53	13	strip
LEAF_NODE	771:58	771:58	11	]
LEAF_NODE	771:59	771:59	7	;
EXPR_STATEMENT	772:12	772:46	6	td -> td_stripbytecount_p [ strip ] = 0 ;
EXPR	772:12	772:12	7	td -> td_stripbytecount_p [ strip ] = 0
ASSIGN	772:12	772:45	8	td -> td_stripbytecount_p [ strip ] = 0
LVAL	772:12	772:12	9	td -> td_stripbytecount_p [ strip ]
FIELD	772:12	772:41	10	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	772:12	772:12	11	td
LEAF_NODE	772:14	772:14	11	->
LEAF_NODE	772:16	772:16	11	td_stripbytecount_p
LEAF_NODE	772:35	772:35	11	[
EXPR	772:36	772:36	11	strip
FIELD	772:36	772:36	12	strip
LEAF_NODE	772:36	772:36	13	strip
LEAF_NODE	772:41	772:41	11	]
ASSIGN_OP	772:43	772:43	9	=
LEAF_NODE	772:43	772:43	10	=
RVAL	772:45	772:45	9	0
FIELD	772:45	772:45	10	0
LEAF_NODE	772:45	772:45	11	0
LEAF_NODE	772:46	772:46	7	;
LEAF_NODE	773:1	773:1	5	}
EXPR_STATEMENT	775:1	775:23	3	m = tif -> tif_curoff + cc ;
EXPR	775:1	775:1	4	m = tif -> tif_curoff + cc
ASSIGN	775:1	775:5	5	m = tif -> tif_curoff + cc
LVAL	775:1	775:1	6	m
FIELD	775:1	775:1	7	m
LEAF_NODE	775:1	775:1	8	m
ASSIGN_OP	775:3	775:3	6	=
LEAF_NODE	775:3	775:3	7	=
RVAL	775:5	775:21	6	tif -> tif_curoff + cc
FIELD	775:5	775:10	7	tif -> tif_curoff
LEAF_NODE	775:5	775:5	8	tif
LEAF_NODE	775:8	775:8	8	->
LEAF_NODE	775:10	775:10	8	tif_curoff
LEAF_NODE	775:20	775:20	7	+
FIELD	775:21	775:21	7	cc
LEAF_NODE	775:21	775:21	8	cc
LEAF_NODE	775:23	775:23	4	;
SELECTION	776:1	777:2	3	
KEYWORD	776:1	776:1	4	if
LEAF_NODE	776:1	776:1	5	if
LEAF_NODE	776:4	776:4	4	(
CONDITION	776:5	776:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	776:5	776:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	776:5	776:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	776:5	776:5	7	!
LEAF_NODE	776:5	776:5	8	!
LEAF_NODE	776:6	776:6	7	(
FIELD	776:7	776:12	7	tif -> tif_flags
LEAF_NODE	776:7	776:7	8	tif
LEAF_NODE	776:10	776:10	8	->
LEAF_NODE	776:12	776:12	8	tif_flags
LEAF_NODE	776:21	776:21	7	&
FIELD	776:22	776:22	7	TIFF_BIGTIFF
LEAF_NODE	776:22	776:22	8	TIFF_BIGTIFF
LEAF_NODE	776:34	776:34	7	)
LEAF_NODE	776:35	776:35	4	)
STATEMENTS	777:2	777:2	4	
EXPR_STATEMENT	777:2	777:15	5	m = ( uint32 ) m ;
EXPR	777:2	777:2	6	m = ( uint32 ) m
ASSIGN	777:2	777:6	7	m = ( uint32 ) m
LVAL	777:2	777:2	8	m
FIELD	777:2	777:2	9	m
LEAF_NODE	777:2	777:2	10	m
ASSIGN_OP	777:4	777:4	8	=
LEAF_NODE	777:4	777:4	9	=
RVAL	777:6	777:14	8	( uint32 ) m
LEAF_NODE	777:6	777:6	9	(
TYPE_NAME	777:7	777:7	9	uint32
LEAF_NODE	777:7	777:7	10	uint32
LEAF_NODE	777:13	777:13	9	)
FIELD	777:14	777:14	9	m
LEAF_NODE	777:14	777:14	10	m
LEAF_NODE	777:15	777:15	6	;
SELECTION	778:1	779:1	3	
KEYWORD	778:1	778:1	4	if
LEAF_NODE	778:1	778:1	5	if
LEAF_NODE	778:4	778:4	4	(
CONDITION	778:5	778:5	4	( m < tif -> tif_curoff ) || ( m < ( uint64 ) cc )
EXPR	778:5	778:5	5	( m < tif -> tif_curoff ) || ( m < ( uint64 ) cc )
OR	778:5	778:26	6	( m < tif -> tif_curoff ) || ( m < ( uint64 ) cc )
EXPR	778:5	778:23	7	( m < tif -> tif_curoff )
LEAF_NODE	778:5	778:5	8	(
FIELD	778:6	778:6	8	m
LEAF_NODE	778:6	778:6	9	m
REL_OPERATOR	778:7	778:7	8	<
LEAF_NODE	778:7	778:7	9	<
FIELD	778:8	778:13	8	tif -> tif_curoff
LEAF_NODE	778:8	778:8	9	tif
LEAF_NODE	778:11	778:11	9	->
LEAF_NODE	778:13	778:13	9	tif_curoff
LEAF_NODE	778:23	778:23	8	)
LEAF_NODE	778:24	778:24	7	||
EXPR	778:26	778:39	7	( m < ( uint64 ) cc )
LEAF_NODE	778:26	778:26	8	(
FIELD	778:27	778:27	8	m
LEAF_NODE	778:27	778:27	9	m
REL_OPERATOR	778:28	778:28	8	<
LEAF_NODE	778:28	778:28	9	<
LEAF_NODE	778:29	778:29	8	(
TYPE_NAME	778:30	778:30	8	uint64
LEAF_NODE	778:30	778:30	9	uint64
LEAF_NODE	778:36	778:36	8	)
FIELD	778:37	778:37	8	cc
LEAF_NODE	778:37	778:37	9	cc
LEAF_NODE	778:39	778:39	8	)
LEAF_NODE	778:40	778:40	4	)
STATEMENTS	779:1	782:1	4	
LEAF_NODE	779:1	779:1	5	{
STATEMENTS	780:2	781:2	5	
EXPR_STATEMENT	780:2	780:78	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Maximum TIFF file size exceeded" ) ;
EXPR	780:2	780:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Maximum TIFF file size exceeded" )
FUNCTION_CALL	780:2	780:77	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Maximum TIFF file size exceeded" )
CALLEE	780:2	780:2	9	TIFFErrorExt
LEAF_NODE	780:2	780:2	10	TIFFErrorExt
LEAF_NODE	780:14	780:14	9	(
ARGUMENT	780:15	780:15	9	tif -> tif_clientdata
FIELD	780:15	780:20	10	tif -> tif_clientdata
LEAF_NODE	780:15	780:15	11	tif
LEAF_NODE	780:18	780:18	11	->
LEAF_NODE	780:20	780:20	11	tif_clientdata
LEAF_NODE	780:34	780:34	9	,
ARGUMENT	780:36	780:36	9	module
FIELD	780:36	780:36	10	module
LEAF_NODE	780:36	780:36	11	module
LEAF_NODE	780:42	780:42	9	,
ARGUMENT	780:44	780:44	9	"Maximum TIFF file size exceeded"
FIELD	780:44	780:44	10	"Maximum TIFF file size exceeded"
LEAF_NODE	780:44	780:44	11	"Maximum TIFF file size exceeded"
LEAF_NODE	780:77	780:77	9	)
LEAF_NODE	780:78	780:78	7	;
JUMP_STATEMENT	781:2	781:12	6	return ( 0 ) ;
KEYWORD	781:2	781:2	7	return
LEAF_NODE	781:2	781:2	8	return
DESTINATION	781:9	781:9	7	( 0 )
EXPR	781:9	781:11	8	( 0 )
LEAF_NODE	781:9	781:9	9	(
FIELD	781:10	781:10	9	0
LEAF_NODE	781:10	781:10	10	0
LEAF_NODE	781:11	781:11	9	)
LEAF_NODE	781:12	781:12	7	;
LEAF_NODE	782:1	782:1	5	}
SELECTION	783:1	783:30	3	
KEYWORD	783:1	783:1	4	if
LEAF_NODE	783:1	783:1	5	if
LEAF_NODE	783:4	783:4	4	(
CONDITION	783:5	783:5	4	! WriteOK ( tif , data , cc )
EXPR	783:5	783:5	5	! WriteOK ( tif , data , cc )
UNARY_EXPR	783:5	783:6	6	! WriteOK ( tif , data , cc )
UNARY_OPERATOR	783:5	783:5	7	!
LEAF_NODE	783:5	783:5	8	!
FUNCTION_CALL	783:6	783:27	7	WriteOK ( tif , data , cc )
CALLEE	783:6	783:6	8	WriteOK
LEAF_NODE	783:6	783:6	9	WriteOK
LEAF_NODE	783:13	783:13	8	(
ARGUMENT	783:14	783:14	8	tif
FIELD	783:14	783:14	9	tif
LEAF_NODE	783:14	783:14	10	tif
LEAF_NODE	783:17	783:17	8	,
ARGUMENT	783:19	783:19	8	data
FIELD	783:19	783:19	9	data
LEAF_NODE	783:19	783:19	10	data
LEAF_NODE	783:23	783:23	8	,
ARGUMENT	783:25	783:25	8	cc
FIELD	783:25	783:25	9	cc
LEAF_NODE	783:25	783:25	10	cc
LEAF_NODE	783:27	783:27	8	)
LEAF_NODE	783:28	783:28	4	)
STATEMENTS	783:30	787:1	4	
LEAF_NODE	783:30	783:30	5	{
STATEMENTS	784:2	786:6	5	
EXPR_STATEMENT	784:2	785:35	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Write error at scanline %lu" , ( unsigned long ) tif -> tif_row ) ;
EXPR	784:2	784:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Write error at scanline %lu" , ( unsigned long ) tif -> tif_row )
FUNCTION_CALL	784:2	785:34	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Write error at scanline %lu" , ( unsigned long ) tif -> tif_row )
CALLEE	784:2	784:2	9	TIFFErrorExt
LEAF_NODE	784:2	784:2	10	TIFFErrorExt
LEAF_NODE	784:14	784:14	9	(
ARGUMENT	784:15	784:15	9	tif -> tif_clientdata
FIELD	784:15	784:20	10	tif -> tif_clientdata
LEAF_NODE	784:15	784:15	11	tif
LEAF_NODE	784:18	784:18	11	->
LEAF_NODE	784:20	784:20	11	tif_clientdata
LEAF_NODE	784:34	784:34	9	,
ARGUMENT	784:36	784:36	9	module
FIELD	784:36	784:36	10	module
LEAF_NODE	784:36	784:36	11	module
LEAF_NODE	784:42	784:42	9	,
ARGUMENT	784:44	784:44	9	"Write error at scanline %lu"
FIELD	784:44	784:44	10	"Write error at scanline %lu"
LEAF_NODE	784:44	784:44	11	"Write error at scanline %lu"
LEAF_NODE	784:73	784:73	9	,
ARGUMENT	785:6	785:22	9	( unsigned long ) tif -> tif_row
LEAF_NODE	785:6	785:6	10	(
TYPE_NAME	785:7	785:16	10	unsigned long
LEAF_NODE	785:7	785:7	11	unsigned
LEAF_NODE	785:16	785:16	11	long
LEAF_NODE	785:20	785:20	10	)
FIELD	785:22	785:27	10	tif -> tif_row
LEAF_NODE	785:22	785:22	11	tif
LEAF_NODE	785:25	785:25	11	->
LEAF_NODE	785:27	785:27	11	tif_row
LEAF_NODE	785:34	785:34	9	)
LEAF_NODE	785:35	785:35	7	;
JUMP_STATEMENT	786:6	786:16	6	return ( 0 ) ;
KEYWORD	786:6	786:6	7	return
LEAF_NODE	786:6	786:6	8	return
DESTINATION	786:13	786:13	7	( 0 )
EXPR	786:13	786:15	8	( 0 )
LEAF_NODE	786:13	786:13	9	(
FIELD	786:14	786:14	9	0
LEAF_NODE	786:14	786:14	10	0
LEAF_NODE	786:15	786:15	9	)
LEAF_NODE	786:16	786:16	7	;
LEAF_NODE	787:1	787:1	5	}
EXPR_STATEMENT	788:1	788:20	3	tif -> tif_curoff = m ;
EXPR	788:1	788:1	4	tif -> tif_curoff = m
ASSIGN	788:1	788:19	5	tif -> tif_curoff = m
LVAL	788:1	788:1	6	tif -> tif_curoff
FIELD	788:1	788:6	7	tif -> tif_curoff
LEAF_NODE	788:1	788:1	8	tif
LEAF_NODE	788:4	788:4	8	->
LEAF_NODE	788:6	788:6	8	tif_curoff
ASSIGN_OP	788:17	788:17	6	=
LEAF_NODE	788:17	788:17	7	=
RVAL	788:19	788:19	6	m
FIELD	788:19	788:19	7	m
LEAF_NODE	788:19	788:19	8	m
LEAF_NODE	788:20	788:20	4	;
EXPR_STATEMENT	789:1	789:37	3	td -> td_stripbytecount_p [ strip ] += cc ;
EXPR	789:1	789:1	4	td -> td_stripbytecount_p [ strip ] += cc
ASSIGN	789:1	789:35	5	td -> td_stripbytecount_p [ strip ] += cc
LVAL	789:1	789:1	6	td -> td_stripbytecount_p [ strip ]
FIELD	789:1	789:30	7	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	789:1	789:1	8	td
LEAF_NODE	789:3	789:3	8	->
LEAF_NODE	789:5	789:5	8	td_stripbytecount_p
LEAF_NODE	789:24	789:24	8	[
EXPR	789:25	789:25	8	strip
FIELD	789:25	789:25	9	strip
LEAF_NODE	789:25	789:25	10	strip
LEAF_NODE	789:30	789:30	8	]
ASSIGN_OP	789:32	789:32	6	+=
LEAF_NODE	789:32	789:32	7	+=
RVAL	789:35	789:35	6	cc
FIELD	789:35	789:35	7	cc
LEAF_NODE	789:35	789:35	8	cc
LEAF_NODE	789:37	789:37	4	;
SELECTION	791:8	792:12	3	
KEYWORD	791:8	791:8	4	if
LEAF_NODE	791:8	791:8	5	if
LEAF_NODE	791:10	791:10	4	(
CONDITION	791:12	791:12	4	( int64 ) td -> td_stripbytecount_p [ strip ] != old_byte_count
EXPR	791:12	791:54	5	( int64 ) td -> td_stripbytecount_p [ strip ] != old_byte_count
LEAF_NODE	791:12	791:12	6	(
TYPE_NAME	791:13	791:13	6	int64
LEAF_NODE	791:13	791:13	7	int64
LEAF_NODE	791:18	791:18	6	)
FIELD	791:20	791:49	6	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	791:20	791:20	7	td
LEAF_NODE	791:22	791:22	7	->
LEAF_NODE	791:24	791:24	7	td_stripbytecount_p
LEAF_NODE	791:43	791:43	7	[
EXPR	791:44	791:44	7	strip
FIELD	791:44	791:44	8	strip
LEAF_NODE	791:44	791:44	9	strip
LEAF_NODE	791:49	791:49	7	]
EQ_OPERATOR	791:51	791:51	6	!=
LEAF_NODE	791:51	791:51	7	!=
FIELD	791:54	791:54	6	old_byte_count
LEAF_NODE	791:54	791:54	7	old_byte_count
LEAF_NODE	791:69	791:69	4	)
STATEMENTS	792:12	792:12	4	
EXPR_STATEMENT	792:12	792:45	5	tif -> tif_flags |= TIFF_DIRTYSTRIP ;
EXPR	792:12	792:12	6	tif -> tif_flags |= TIFF_DIRTYSTRIP
ASSIGN	792:12	792:30	7	tif -> tif_flags |= TIFF_DIRTYSTRIP
LVAL	792:12	792:12	8	tif -> tif_flags
FIELD	792:12	792:17	9	tif -> tif_flags
LEAF_NODE	792:12	792:12	10	tif
LEAF_NODE	792:15	792:15	10	->
LEAF_NODE	792:17	792:17	10	tif_flags
ASSIGN_OP	792:27	792:27	8	|=
LEAF_NODE	792:27	792:27	9	|=
RVAL	792:30	792:30	8	TIFF_DIRTYSTRIP
FIELD	792:30	792:30	9	TIFF_DIRTYSTRIP
LEAF_NODE	792:30	792:30	10	TIFF_DIRTYSTRIP
LEAF_NODE	792:45	792:45	6	;
JUMP_STATEMENT	794:1	794:11	3	return ( 1 ) ;
KEYWORD	794:1	794:1	4	return
LEAF_NODE	794:1	794:1	5	return
DESTINATION	794:8	794:8	4	( 1 )
EXPR	794:8	794:10	5	( 1 )
LEAF_NODE	794:8	794:8	6	(
FIELD	794:9	794:9	6	1
LEAF_NODE	794:9	794:9	7	1
LEAF_NODE	794:10	794:10	6	)
LEAF_NODE	794:11	794:11	4	;
LEAF_NODE	795:0	795:0	2	}
FUNCTION_DEF	802:0	825:0	1	
RETURN_TYPE	802:0	802:0	2	int
TYPE_NAME	802:0	802:0	3	int
LEAF_NODE	802:0	802:0	4	int
FUNCTION_NAME	803:0	803:0	2	TIFFFlushData1
LEAF_NODE	803:0	803:0	3	TIFFFlushData1
PARAMETER_LIST	803:14	803:24	2	( TIFF * tif )
LEAF_NODE	803:14	803:14	3	(
PARAMETER_DECL	803:15	803:21	3	TIFF * tif
TYPE	803:15	803:19	4	TIFF *
TYPE_NAME	803:15	803:15	5	TIFF
LEAF_NODE	803:15	803:15	6	TIFF
POINTER	803:19	803:19	5	*
LEAF_NODE	803:19	803:19	6	*
NAME	803:21	803:21	4	tif
LEAF_NODE	803:21	803:21	5	tif
LEAF_NODE	803:24	803:24	3	)
LEAF_NODE	804:0	804:0	2	{
STATEMENTS	805:1	824:1	2	
SELECTION	805:1	805:61	3	
KEYWORD	805:1	805:1	4	if
LEAF_NODE	805:1	805:1	5	if
LEAF_NODE	805:4	805:4	4	(
CONDITION	805:5	805:5	4	tif -> tif_rawcc > 0 && tif -> tif_flags & TIFF_BUF4WRITE
EXPR	805:5	805:5	5	tif -> tif_rawcc > 0 && tif -> tif_flags & TIFF_BUF4WRITE
AND	805:5	805:27	6	tif -> tif_rawcc > 0 && tif -> tif_flags & TIFF_BUF4WRITE
EXPR	805:5	805:22	7	tif -> tif_rawcc > 0
FIELD	805:5	805:10	8	tif -> tif_rawcc
LEAF_NODE	805:5	805:5	9	tif
LEAF_NODE	805:8	805:8	9	->
LEAF_NODE	805:10	805:10	9	tif_rawcc
REL_OPERATOR	805:20	805:20	8	>
LEAF_NODE	805:20	805:20	9	>
FIELD	805:22	805:22	8	0
LEAF_NODE	805:22	805:22	9	0
LEAF_NODE	805:24	805:24	7	&&
EXPR	805:27	805:44	7	tif -> tif_flags & TIFF_BUF4WRITE
FIELD	805:27	805:32	8	tif -> tif_flags
LEAF_NODE	805:27	805:27	9	tif
LEAF_NODE	805:30	805:30	9	->
LEAF_NODE	805:32	805:32	9	tif_flags
LEAF_NODE	805:42	805:42	8	&
FIELD	805:44	805:44	8	TIFF_BUF4WRITE
LEAF_NODE	805:44	805:44	9	TIFF_BUF4WRITE
LEAF_NODE	805:59	805:59	4	)
STATEMENTS	805:61	823:1	4	
LEAF_NODE	805:61	805:61	5	{
STATEMENTS	806:2	822:2	5	
SELECTION	806:2	808:3	6	
KEYWORD	806:2	806:2	7	if
LEAF_NODE	806:2	806:2	8	if
LEAF_NODE	806:5	806:5	7	(
CONDITION	806:6	806:6	7	! isFillOrder ( tif , tif -> tif_dir . td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	806:6	806:6	8	! isFillOrder ( tif , tif -> tif_dir . td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	806:6	807:6	9	! isFillOrder ( tif , tif -> tif_dir . td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	806:6	806:6	10	! isFillOrder ( tif , tif -> tif_dir . td_fillorder )
UNARY_EXPR	806:6	806:7	11	! isFillOrder ( tif , tif -> tif_dir . td_fillorder )
UNARY_OPERATOR	806:6	806:6	12	!
LEAF_NODE	806:6	806:6	13	!
FUNCTION_CALL	806:7	806:49	12	isFillOrder ( tif , tif -> tif_dir . td_fillorder )
CALLEE	806:7	806:7	13	isFillOrder
LEAF_NODE	806:7	806:7	14	isFillOrder
LEAF_NODE	806:18	806:18	13	(
ARGUMENT	806:19	806:19	13	tif
FIELD	806:19	806:19	14	tif
LEAF_NODE	806:19	806:19	15	tif
LEAF_NODE	806:22	806:22	13	,
ARGUMENT	806:24	806:24	13	tif -> tif_dir . td_fillorder
FIELD	806:24	806:37	14	tif -> tif_dir . td_fillorder
LEAF_NODE	806:24	806:24	15	tif
LEAF_NODE	806:27	806:27	15	->
LEAF_NODE	806:29	806:29	15	tif_dir
LEAF_NODE	806:36	806:36	15	.
LEAF_NODE	806:37	806:37	15	td_fillorder
LEAF_NODE	806:49	806:49	13	)
LEAF_NODE	806:51	806:51	10	&&
EXPR	807:6	807:42	10	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	807:6	807:6	11	(
FIELD	807:7	807:12	11	tif -> tif_flags
LEAF_NODE	807:7	807:7	12	tif
LEAF_NODE	807:10	807:10	12	->
LEAF_NODE	807:12	807:12	12	tif_flags
LEAF_NODE	807:22	807:22	11	&
FIELD	807:24	807:24	11	TIFF_NOBITREV
LEAF_NODE	807:24	807:24	12	TIFF_NOBITREV
LEAF_NODE	807:37	807:37	11	)
EQ_OPERATOR	807:39	807:39	11	==
LEAF_NODE	807:39	807:39	12	==
FIELD	807:42	807:42	11	0
LEAF_NODE	807:42	807:42	12	0
LEAF_NODE	807:43	807:43	7	)
STATEMENTS	808:3	808:3	7	
EXPR_STATEMENT	808:3	809:22	8	TIFFReverseBits ( ( uint8 * ) tif -> tif_rawdata , tif -> tif_rawcc ) ;
EXPR	808:3	808:3	9	TIFFReverseBits ( ( uint8 * ) tif -> tif_rawdata , tif -> tif_rawcc )
FUNCTION_CALL	808:3	809:21	10	TIFFReverseBits ( ( uint8 * ) tif -> tif_rawdata , tif -> tif_rawcc )
CALLEE	808:3	808:3	11	TIFFReverseBits
LEAF_NODE	808:3	808:3	12	TIFFReverseBits
LEAF_NODE	808:18	808:18	11	(
ARGUMENT	808:19	808:27	11	( uint8 * ) tif -> tif_rawdata
LEAF_NODE	808:19	808:19	12	(
TYPE_NAME	808:20	808:20	12	uint8
LEAF_NODE	808:20	808:20	13	uint8
LEAF_NODE	808:25	808:25	12	*
LEAF_NODE	808:26	808:26	12	)
FIELD	808:27	808:32	12	tif -> tif_rawdata
LEAF_NODE	808:27	808:27	13	tif
LEAF_NODE	808:30	808:30	13	->
LEAF_NODE	808:32	808:32	13	tif_rawdata
LEAF_NODE	808:43	808:43	11	,
ARGUMENT	809:7	809:7	11	tif -> tif_rawcc
FIELD	809:7	809:12	12	tif -> tif_rawcc
LEAF_NODE	809:7	809:7	13	tif
LEAF_NODE	809:10	809:10	13	->
LEAF_NODE	809:12	809:12	13	tif_rawcc
LEAF_NODE	809:21	809:21	11	)
LEAF_NODE	809:22	809:22	9	;
SELECTION	810:2	813:8	6	
KEYWORD	810:2	810:2	7	if
LEAF_NODE	810:2	810:2	8	if
LEAF_NODE	810:5	810:5	7	(
CONDITION	810:6	810:6	7	! TIFFAppendToStrip ( tif , isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip , tif -> tif_rawdata , tif -> tif_rawcc )
EXPR	810:6	810:6	8	! TIFFAppendToStrip ( tif , isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip , tif -> tif_rawdata , tif -> tif_rawcc )
UNARY_EXPR	810:6	810:7	9	! TIFFAppendToStrip ( tif , isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip , tif -> tif_rawdata , tif -> tif_rawcc )
UNARY_OPERATOR	810:6	810:6	10	!
LEAF_NODE	810:6	810:6	11	!
FUNCTION_CALL	810:7	812:38	10	TIFFAppendToStrip ( tif , isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip , tif -> tif_rawdata , tif -> tif_rawcc )
CALLEE	810:7	810:7	11	TIFFAppendToStrip
LEAF_NODE	810:7	810:7	12	TIFFAppendToStrip
LEAF_NODE	810:24	810:24	11	(
ARGUMENT	810:25	810:25	11	tif
FIELD	810:25	810:25	12	tif
LEAF_NODE	810:25	810:25	13	tif
LEAF_NODE	810:28	810:28	11	,
ARGUMENT	811:6	811:6	11	isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip
COND_EXPR	811:6	811:40	12	isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip
CONDITION	811:6	811:6	13	isTiled ( tif )
FUNCTION_CALL	811:6	811:17	14	isTiled ( tif )
CALLEE	811:6	811:6	15	isTiled
LEAF_NODE	811:6	811:6	16	isTiled
LEAF_NODE	811:13	811:13	15	(
ARGUMENT	811:14	811:14	15	tif
FIELD	811:14	811:14	16	tif
LEAF_NODE	811:14	811:14	17	tif
LEAF_NODE	811:17	811:17	15	)
LEAF_NODE	811:19	811:19	13	?
EXPR	811:21	811:21	13	tif -> tif_curtile
FIELD	811:21	811:26	14	tif -> tif_curtile
LEAF_NODE	811:21	811:21	15	tif
LEAF_NODE	811:24	811:24	15	->
LEAF_NODE	811:26	811:26	15	tif_curtile
LEAF_NODE	811:38	811:38	13	:
FIELD	811:40	811:45	13	tif -> tif_curstrip
LEAF_NODE	811:40	811:40	14	tif
LEAF_NODE	811:43	811:43	14	->
LEAF_NODE	811:45	811:45	14	tif_curstrip
LEAF_NODE	811:57	811:57	11	,
ARGUMENT	812:6	812:6	11	tif -> tif_rawdata
FIELD	812:6	812:11	12	tif -> tif_rawdata
LEAF_NODE	812:6	812:6	13	tif
LEAF_NODE	812:9	812:9	13	->
LEAF_NODE	812:11	812:11	13	tif_rawdata
LEAF_NODE	812:22	812:22	11	,
ARGUMENT	812:24	812:24	11	tif -> tif_rawcc
FIELD	812:24	812:29	12	tif -> tif_rawcc
LEAF_NODE	812:24	812:24	13	tif
LEAF_NODE	812:27	812:27	13	->
LEAF_NODE	812:29	812:29	13	tif_rawcc
LEAF_NODE	812:38	812:38	11	)
LEAF_NODE	812:39	812:39	7	)
STATEMENTS	813:8	820:8	7	
LEAF_NODE	813:8	813:8	8	{
STATEMENTS	817:12	819:3	8	
EXPR_STATEMENT	817:12	817:30	9	tif -> tif_rawcc = 0 ;
EXPR	817:12	817:12	10	tif -> tif_rawcc = 0
ASSIGN	817:12	817:29	11	tif -> tif_rawcc = 0
LVAL	817:12	817:12	12	tif -> tif_rawcc
FIELD	817:12	817:17	13	tif -> tif_rawcc
LEAF_NODE	817:12	817:12	14	tif
LEAF_NODE	817:15	817:15	14	->
LEAF_NODE	817:17	817:17	14	tif_rawcc
ASSIGN_OP	817:27	817:27	12	=
LEAF_NODE	817:27	817:27	13	=
RVAL	817:29	817:29	12	0
FIELD	817:29	817:29	13	0
LEAF_NODE	817:29	817:29	14	0
LEAF_NODE	817:30	817:30	10	;
EXPR_STATEMENT	818:12	818:45	9	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	818:12	818:12	10	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	818:12	818:29	11	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	818:12	818:12	12	tif -> tif_rawcp
FIELD	818:12	818:17	13	tif -> tif_rawcp
LEAF_NODE	818:12	818:12	14	tif
LEAF_NODE	818:15	818:15	14	->
LEAF_NODE	818:17	818:17	14	tif_rawcp
ASSIGN_OP	818:27	818:27	12	=
LEAF_NODE	818:27	818:27	13	=
RVAL	818:29	818:29	12	tif -> tif_rawdata
FIELD	818:29	818:34	13	tif -> tif_rawdata
LEAF_NODE	818:29	818:29	14	tif
LEAF_NODE	818:32	818:32	14	->
LEAF_NODE	818:34	818:34	14	tif_rawdata
LEAF_NODE	818:45	818:45	10	;
JUMP_STATEMENT	819:3	819:13	9	return ( 0 ) ;
KEYWORD	819:3	819:3	10	return
LEAF_NODE	819:3	819:3	11	return
DESTINATION	819:10	819:10	10	( 0 )
EXPR	819:10	819:12	11	( 0 )
LEAF_NODE	819:10	819:10	12	(
FIELD	819:11	819:11	12	0
LEAF_NODE	819:11	819:11	13	0
LEAF_NODE	819:12	819:12	12	)
LEAF_NODE	819:13	819:13	10	;
LEAF_NODE	820:8	820:8	8	}
EXPR_STATEMENT	821:2	821:20	6	tif -> tif_rawcc = 0 ;
EXPR	821:2	821:2	7	tif -> tif_rawcc = 0
ASSIGN	821:2	821:19	8	tif -> tif_rawcc = 0
LVAL	821:2	821:2	9	tif -> tif_rawcc
FIELD	821:2	821:7	10	tif -> tif_rawcc
LEAF_NODE	821:2	821:2	11	tif
LEAF_NODE	821:5	821:5	11	->
LEAF_NODE	821:7	821:7	11	tif_rawcc
ASSIGN_OP	821:17	821:17	9	=
LEAF_NODE	821:17	821:17	10	=
RVAL	821:19	821:19	9	0
FIELD	821:19	821:19	10	0
LEAF_NODE	821:19	821:19	11	0
LEAF_NODE	821:20	821:20	7	;
EXPR_STATEMENT	822:2	822:35	6	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	822:2	822:2	7	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	822:2	822:19	8	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	822:2	822:2	9	tif -> tif_rawcp
FIELD	822:2	822:7	10	tif -> tif_rawcp
LEAF_NODE	822:2	822:2	11	tif
LEAF_NODE	822:5	822:5	11	->
LEAF_NODE	822:7	822:7	11	tif_rawcp
ASSIGN_OP	822:17	822:17	9	=
LEAF_NODE	822:17	822:17	10	=
RVAL	822:19	822:19	9	tif -> tif_rawdata
FIELD	822:19	822:24	10	tif -> tif_rawdata
LEAF_NODE	822:19	822:19	11	tif
LEAF_NODE	822:22	822:22	11	->
LEAF_NODE	822:24	822:24	11	tif_rawdata
LEAF_NODE	822:35	822:35	7	;
LEAF_NODE	823:1	823:1	5	}
JUMP_STATEMENT	824:1	824:11	3	return ( 1 ) ;
KEYWORD	824:1	824:1	4	return
LEAF_NODE	824:1	824:1	5	return
DESTINATION	824:8	824:8	4	( 1 )
EXPR	824:8	824:10	5	( 1 )
LEAF_NODE	824:8	824:8	6	(
FIELD	824:9	824:9	6	1
LEAF_NODE	824:9	824:9	7	1
LEAF_NODE	824:10	824:10	6	)
LEAF_NODE	824:11	824:11	4	;
LEAF_NODE	825:0	825:0	2	}
FUNCTION_DEF	833:0	837:0	1	
RETURN_TYPE	833:0	833:0	2	void
TYPE_NAME	833:0	833:0	3	void
LEAF_NODE	833:0	833:0	4	void
FUNCTION_NAME	834:0	834:0	2	TIFFSetWriteOffset
LEAF_NODE	834:0	834:0	3	TIFFSetWriteOffset
PARAMETER_LIST	834:18	834:40	2	( TIFF * tif , toff_t off )
LEAF_NODE	834:18	834:18	3	(
PARAMETER_DECL	834:19	834:25	3	TIFF * tif
TYPE	834:19	834:23	4	TIFF *
TYPE_NAME	834:19	834:19	5	TIFF
LEAF_NODE	834:19	834:19	6	TIFF
POINTER	834:23	834:23	5	*
LEAF_NODE	834:23	834:23	6	*
NAME	834:25	834:25	4	tif
LEAF_NODE	834:25	834:25	5	tif
LEAF_NODE	834:28	834:28	3	,
PARAMETER_DECL	834:30	834:37	3	toff_t off
TYPE	834:30	834:30	4	toff_t
TYPE_NAME	834:30	834:30	5	toff_t
LEAF_NODE	834:30	834:30	6	toff_t
NAME	834:37	834:37	4	off
LEAF_NODE	834:37	834:37	5	off
LEAF_NODE	834:40	834:40	3	)
LEAF_NODE	835:0	835:0	2	{
STATEMENTS	836:1	836:1	2	
EXPR_STATEMENT	836:1	836:22	3	tif -> tif_curoff = off ;
EXPR	836:1	836:1	4	tif -> tif_curoff = off
ASSIGN	836:1	836:19	5	tif -> tif_curoff = off
LVAL	836:1	836:1	6	tif -> tif_curoff
FIELD	836:1	836:6	7	tif -> tif_curoff
LEAF_NODE	836:1	836:1	8	tif
LEAF_NODE	836:4	836:4	8	->
LEAF_NODE	836:6	836:6	8	tif_curoff
ASSIGN_OP	836:17	836:17	6	=
LEAF_NODE	836:17	836:17	7	=
RVAL	836:19	836:19	6	off
FIELD	836:19	836:19	7	off
LEAF_NODE	836:19	836:19	8	off
LEAF_NODE	836:22	836:22	4	;
LEAF_NODE	837:0	837:0	2	}
