SOURCE_FILE	66:0	703:0	0	
FUNCTION_DEF	66:0	138:0	1	
RETURN_TYPE	66:0	66:7	2	static void
LEAF_NODE	66:0	66:0	3	static
TYPE_NAME	66:7	66:7	3	void
LEAF_NODE	66:7	66:7	4	void
FUNCTION_NAME	67:0	67:0	2	_TIFFPrintField
LEAF_NODE	67:0	67:0	3	_TIFFPrintField
PARAMETER_LIST	67:15	68:36	2	( FILE * fd , const TIFFField * fip , uint32 value_count , void * raw_data )
LEAF_NODE	67:15	67:15	3	(
PARAMETER_DECL	67:16	67:22	3	FILE * fd
TYPE	67:16	67:20	4	FILE *
TYPE_NAME	67:16	67:16	5	FILE
LEAF_NODE	67:16	67:16	6	FILE
POINTER	67:20	67:20	5	*
LEAF_NODE	67:20	67:20	6	*
NAME	67:22	67:22	4	fd
LEAF_NODE	67:22	67:22	5	fd
LEAF_NODE	67:24	67:24	3	,
PARAMETER_DECL	67:26	67:43	3	const TIFFField * fip
TYPE	67:26	67:42	4	const TIFFField *
TYPE_NAME	67:26	67:32	5	const TIFFField
LEAF_NODE	67:26	67:26	6	const
LEAF_NODE	67:32	67:32	6	TIFFField
POINTER	67:42	67:42	5	*
LEAF_NODE	67:42	67:42	6	*
NAME	67:43	67:43	4	fip
LEAF_NODE	67:43	67:43	5	fip
LEAF_NODE	67:46	67:46	3	,
PARAMETER_DECL	68:2	68:9	3	uint32 value_count
TYPE	68:2	68:2	4	uint32
TYPE_NAME	68:2	68:2	5	uint32
LEAF_NODE	68:2	68:2	6	uint32
NAME	68:9	68:9	4	value_count
LEAF_NODE	68:9	68:9	5	value_count
LEAF_NODE	68:20	68:20	3	,
PARAMETER_DECL	68:22	68:28	3	void * raw_data
TYPE	68:22	68:27	4	void *
TYPE_NAME	68:22	68:22	5	void
LEAF_NODE	68:22	68:22	6	void
POINTER	68:27	68:27	5	*
LEAF_NODE	68:27	68:27	6	*
NAME	68:28	68:28	4	raw_data
LEAF_NODE	68:28	68:28	5	raw_data
LEAF_NODE	68:36	68:36	3	)
LEAF_NODE	69:0	69:0	2	{
STATEMENTS	70:1	137:1	2	
SIMPLE_DECL	70:1	70:9	3	uint32 j ;
VAR_DECL	70:1	70:8	4	uint32 j
TYPE	70:1	70:1	5	uint32
TYPE_NAME	70:1	70:1	6	uint32
LEAF_NODE	70:1	70:1	7	uint32
NAME	70:8	70:8	5	j
LEAF_NODE	70:8	70:8	6	j
LEAF_NODE	70:9	70:9	4	;
EXPR_STATEMENT	72:1	72:39	3	fprintf ( fd , "  %s: " , fip -> field_name ) ;
EXPR	72:1	72:1	4	fprintf ( fd , "  %s: " , fip -> field_name )
FUNCTION_CALL	72:1	72:38	5	fprintf ( fd , "  %s: " , fip -> field_name )
CALLEE	72:1	72:1	6	fprintf
LEAF_NODE	72:1	72:1	7	fprintf
LEAF_NODE	72:8	72:8	6	(
ARGUMENT	72:9	72:9	6	fd
FIELD	72:9	72:9	7	fd
LEAF_NODE	72:9	72:9	8	fd
LEAF_NODE	72:11	72:11	6	,
ARGUMENT	72:13	72:13	6	"  %s: "
FIELD	72:13	72:13	7	"  %s: "
LEAF_NODE	72:13	72:13	8	"  %s: "
LEAF_NODE	72:21	72:21	6	,
ARGUMENT	72:23	72:23	6	fip -> field_name
FIELD	72:23	72:28	7	fip -> field_name
LEAF_NODE	72:23	72:23	8	fip
LEAF_NODE	72:26	72:26	8	->
LEAF_NODE	72:28	72:28	8	field_name
LEAF_NODE	72:38	72:38	6	)
LEAF_NODE	72:39	72:39	4	;
ITERATION	74:1	74:34	3	
KEYWORD	74:1	74:1	4	for
LEAF_NODE	74:1	74:1	5	for
LEAF_NODE	74:4	74:4	4	(
FOR_INIT	74:5	74:10	4	j = 0 ;
EXPR	74:5	74:5	5	j = 0
ASSIGN	74:5	74:9	6	j = 0
LVAL	74:5	74:5	7	j
FIELD	74:5	74:5	8	j
LEAF_NODE	74:5	74:5	9	j
ASSIGN_OP	74:7	74:7	7	=
LEAF_NODE	74:7	74:7	8	=
RVAL	74:9	74:9	7	0
FIELD	74:9	74:9	8	0
LEAF_NODE	74:9	74:9	9	0
LEAF_NODE	74:10	74:10	5	;
CONDITION	74:12	74:12	4	j < value_count
EXPR	74:12	74:16	5	j < value_count
FIELD	74:12	74:12	6	j
LEAF_NODE	74:12	74:12	7	j
REL_OPERATOR	74:14	74:14	6	<
LEAF_NODE	74:14	74:14	7	<
FIELD	74:16	74:16	6	value_count
LEAF_NODE	74:16	74:16	7	value_count
LEAF_NODE	74:27	74:27	4	;
FOR_EXPR	74:29	74:29	4	j ++
EXPR	74:29	74:29	5	j ++
FIELD	74:29	74:30	6	j ++
LEAF_NODE	74:29	74:29	7	j
LEAF_NODE	74:30	74:30	7	++
LEAF_NODE	74:32	74:32	4	)
STATEMENTS	74:34	135:1	4	
LEAF_NODE	74:34	74:34	5	{
STATEMENTS	75:2	133:2	5	
SELECTION	75:2	76:3	6	
KEYWORD	75:2	75:2	7	if
LEAF_NODE	75:2	75:2	8	if
LEAF_NODE	75:4	75:4	7	(
CONDITION	75:5	75:5	7	fip -> field_type == TIFF_BYTE
EXPR	75:5	75:24	8	fip -> field_type == TIFF_BYTE
FIELD	75:5	75:10	9	fip -> field_type
LEAF_NODE	75:5	75:5	10	fip
LEAF_NODE	75:8	75:8	10	->
LEAF_NODE	75:10	75:10	10	field_type
EQ_OPERATOR	75:21	75:21	9	==
LEAF_NODE	75:21	75:21	10	==
FIELD	75:24	75:24	9	TIFF_BYTE
LEAF_NODE	75:24	75:24	10	TIFF_BYTE
LEAF_NODE	75:33	75:33	7	)
STATEMENTS	76:3	76:3	7	
EXPR_STATEMENT	76:3	76:45	8	fprintf ( fd , "%u" , ( ( uint8 * ) raw_data ) [ j ] ) ;
EXPR	76:3	76:3	9	fprintf ( fd , "%u" , ( ( uint8 * ) raw_data ) [ j ] )
FUNCTION_CALL	76:3	76:44	10	fprintf ( fd , "%u" , ( ( uint8 * ) raw_data ) [ j ] )
CALLEE	76:3	76:3	11	fprintf
LEAF_NODE	76:3	76:3	12	fprintf
LEAF_NODE	76:10	76:10	11	(
ARGUMENT	76:11	76:11	11	fd
FIELD	76:11	76:11	12	fd
LEAF_NODE	76:11	76:11	13	fd
LEAF_NODE	76:13	76:13	11	,
ARGUMENT	76:15	76:15	11	"%u"
FIELD	76:15	76:15	12	"%u"
LEAF_NODE	76:15	76:15	13	"%u"
LEAF_NODE	76:19	76:19	11	,
ARGUMENT	76:21	76:43	11	( ( uint8 * ) raw_data ) [ j ]
LEAF_NODE	76:21	76:21	12	(
LEAF_NODE	76:22	76:22	12	(
TYPE_NAME	76:23	76:23	12	uint8
LEAF_NODE	76:23	76:23	13	uint8
LEAF_NODE	76:29	76:29	12	*
LEAF_NODE	76:30	76:30	12	)
FIELD	76:32	76:32	12	raw_data
LEAF_NODE	76:32	76:32	13	raw_data
LEAF_NODE	76:40	76:40	12	)
LEAF_NODE	76:41	76:41	12	[
EXPR	76:42	76:42	12	j
FIELD	76:42	76:42	13	j
LEAF_NODE	76:42	76:42	14	j
LEAF_NODE	76:43	76:43	12	]
LEAF_NODE	76:44	76:44	11	)
LEAF_NODE	76:45	76:45	9	;
SELECTION	77:2	77:7	6	
KEYWORD	77:2	77:2	7	else
LEAF_NODE	77:2	77:2	8	else
STATEMENTS	77:7	77:7	7	
SELECTION	77:7	78:3	8	
KEYWORD	77:7	77:7	9	if
LEAF_NODE	77:7	77:7	10	if
LEAF_NODE	77:9	77:9	9	(
CONDITION	77:10	77:10	9	fip -> field_type == TIFF_UNDEFINED
EXPR	77:10	77:29	10	fip -> field_type == TIFF_UNDEFINED
FIELD	77:10	77:15	11	fip -> field_type
LEAF_NODE	77:10	77:10	12	fip
LEAF_NODE	77:13	77:13	12	->
LEAF_NODE	77:15	77:15	12	field_type
EQ_OPERATOR	77:26	77:26	11	==
LEAF_NODE	77:26	77:26	12	==
FIELD	77:29	77:29	11	TIFF_UNDEFINED
LEAF_NODE	77:29	77:29	12	TIFF_UNDEFINED
LEAF_NODE	77:43	77:43	9	)
STATEMENTS	78:3	78:3	9	
EXPR_STATEMENT	78:3	79:54	10	fprintf ( fd , "0x%x" , ( unsigned int ) ( ( unsigned char * ) raw_data ) [ j ] ) ;
EXPR	78:3	78:3	11	fprintf ( fd , "0x%x" , ( unsigned int ) ( ( unsigned char * ) raw_data ) [ j ] )
FUNCTION_CALL	78:3	79:53	12	fprintf ( fd , "0x%x" , ( unsigned int ) ( ( unsigned char * ) raw_data ) [ j ] )
CALLEE	78:3	78:3	13	fprintf
LEAF_NODE	78:3	78:3	14	fprintf
LEAF_NODE	78:10	78:10	13	(
ARGUMENT	78:11	78:11	13	fd
FIELD	78:11	78:11	14	fd
LEAF_NODE	78:11	78:11	15	fd
LEAF_NODE	78:13	78:13	13	,
ARGUMENT	78:15	78:15	13	"0x%x"
FIELD	78:15	78:15	14	"0x%x"
LEAF_NODE	78:15	78:15	15	"0x%x"
LEAF_NODE	78:21	78:21	13	,
ARGUMENT	79:7	79:52	13	( unsigned int ) ( ( unsigned char * ) raw_data ) [ j ]
LEAF_NODE	79:7	79:7	14	(
TYPE_NAME	79:8	79:17	14	unsigned int
LEAF_NODE	79:8	79:8	15	unsigned
LEAF_NODE	79:17	79:17	15	int
LEAF_NODE	79:20	79:20	14	)
LEAF_NODE	79:22	79:22	14	(
LEAF_NODE	79:23	79:23	14	(
TYPE_NAME	79:24	79:33	14	unsigned char
LEAF_NODE	79:24	79:24	15	unsigned
LEAF_NODE	79:33	79:33	15	char
LEAF_NODE	79:38	79:38	14	*
LEAF_NODE	79:39	79:39	14	)
FIELD	79:41	79:41	14	raw_data
LEAF_NODE	79:41	79:41	15	raw_data
LEAF_NODE	79:49	79:49	14	)
LEAF_NODE	79:50	79:50	14	[
EXPR	79:51	79:51	14	j
FIELD	79:51	79:51	15	j
LEAF_NODE	79:51	79:51	16	j
LEAF_NODE	79:52	79:52	14	]
LEAF_NODE	79:53	79:53	13	)
LEAF_NODE	79:54	79:54	11	;
SELECTION	80:2	80:7	6	
KEYWORD	80:2	80:2	7	else
LEAF_NODE	80:2	80:2	8	else
STATEMENTS	80:7	80:7	7	
SELECTION	80:7	81:3	8	
KEYWORD	80:7	80:7	9	if
LEAF_NODE	80:7	80:7	10	if
LEAF_NODE	80:9	80:9	9	(
CONDITION	80:10	80:10	9	fip -> field_type == TIFF_SBYTE
EXPR	80:10	80:29	10	fip -> field_type == TIFF_SBYTE
FIELD	80:10	80:15	11	fip -> field_type
LEAF_NODE	80:10	80:10	12	fip
LEAF_NODE	80:13	80:13	12	->
LEAF_NODE	80:15	80:15	12	field_type
EQ_OPERATOR	80:26	80:26	11	==
LEAF_NODE	80:26	80:26	12	==
FIELD	80:29	80:29	11	TIFF_SBYTE
LEAF_NODE	80:29	80:29	12	TIFF_SBYTE
LEAF_NODE	80:39	80:39	9	)
STATEMENTS	81:3	81:3	9	
EXPR_STATEMENT	81:3	81:44	10	fprintf ( fd , "%d" , ( ( int8 * ) raw_data ) [ j ] ) ;
EXPR	81:3	81:3	11	fprintf ( fd , "%d" , ( ( int8 * ) raw_data ) [ j ] )
FUNCTION_CALL	81:3	81:43	12	fprintf ( fd , "%d" , ( ( int8 * ) raw_data ) [ j ] )
CALLEE	81:3	81:3	13	fprintf
LEAF_NODE	81:3	81:3	14	fprintf
LEAF_NODE	81:10	81:10	13	(
ARGUMENT	81:11	81:11	13	fd
FIELD	81:11	81:11	14	fd
LEAF_NODE	81:11	81:11	15	fd
LEAF_NODE	81:13	81:13	13	,
ARGUMENT	81:15	81:15	13	"%d"
FIELD	81:15	81:15	14	"%d"
LEAF_NODE	81:15	81:15	15	"%d"
LEAF_NODE	81:19	81:19	13	,
ARGUMENT	81:21	81:42	13	( ( int8 * ) raw_data ) [ j ]
LEAF_NODE	81:21	81:21	14	(
LEAF_NODE	81:22	81:22	14	(
TYPE_NAME	81:23	81:23	14	int8
LEAF_NODE	81:23	81:23	15	int8
LEAF_NODE	81:28	81:28	14	*
LEAF_NODE	81:29	81:29	14	)
FIELD	81:31	81:31	14	raw_data
LEAF_NODE	81:31	81:31	15	raw_data
LEAF_NODE	81:39	81:39	14	)
LEAF_NODE	81:40	81:40	14	[
EXPR	81:41	81:41	14	j
FIELD	81:41	81:41	15	j
LEAF_NODE	81:41	81:41	16	j
LEAF_NODE	81:42	81:42	14	]
LEAF_NODE	81:43	81:43	13	)
LEAF_NODE	81:44	81:44	11	;
SELECTION	82:2	82:7	6	
KEYWORD	82:2	82:2	7	else
LEAF_NODE	82:2	82:2	8	else
STATEMENTS	82:7	82:7	7	
SELECTION	82:7	83:3	8	
KEYWORD	82:7	82:7	9	if
LEAF_NODE	82:7	82:7	10	if
LEAF_NODE	82:9	82:9	9	(
CONDITION	82:10	82:10	9	fip -> field_type == TIFF_SHORT
EXPR	82:10	82:29	10	fip -> field_type == TIFF_SHORT
FIELD	82:10	82:15	11	fip -> field_type
LEAF_NODE	82:10	82:10	12	fip
LEAF_NODE	82:13	82:13	12	->
LEAF_NODE	82:15	82:15	12	field_type
EQ_OPERATOR	82:26	82:26	11	==
LEAF_NODE	82:26	82:26	12	==
FIELD	82:29	82:29	11	TIFF_SHORT
LEAF_NODE	82:29	82:29	12	TIFF_SHORT
LEAF_NODE	82:39	82:39	9	)
STATEMENTS	83:3	83:3	9	
EXPR_STATEMENT	83:3	83:46	10	fprintf ( fd , "%u" , ( ( uint16 * ) raw_data ) [ j ] ) ;
EXPR	83:3	83:3	11	fprintf ( fd , "%u" , ( ( uint16 * ) raw_data ) [ j ] )
FUNCTION_CALL	83:3	83:45	12	fprintf ( fd , "%u" , ( ( uint16 * ) raw_data ) [ j ] )
CALLEE	83:3	83:3	13	fprintf
LEAF_NODE	83:3	83:3	14	fprintf
LEAF_NODE	83:10	83:10	13	(
ARGUMENT	83:11	83:11	13	fd
FIELD	83:11	83:11	14	fd
LEAF_NODE	83:11	83:11	15	fd
LEAF_NODE	83:13	83:13	13	,
ARGUMENT	83:15	83:15	13	"%u"
FIELD	83:15	83:15	14	"%u"
LEAF_NODE	83:15	83:15	15	"%u"
LEAF_NODE	83:19	83:19	13	,
ARGUMENT	83:21	83:44	13	( ( uint16 * ) raw_data ) [ j ]
LEAF_NODE	83:21	83:21	14	(
LEAF_NODE	83:22	83:22	14	(
TYPE_NAME	83:23	83:23	14	uint16
LEAF_NODE	83:23	83:23	15	uint16
LEAF_NODE	83:30	83:30	14	*
LEAF_NODE	83:31	83:31	14	)
FIELD	83:33	83:33	14	raw_data
LEAF_NODE	83:33	83:33	15	raw_data
LEAF_NODE	83:41	83:41	14	)
LEAF_NODE	83:42	83:42	14	[
EXPR	83:43	83:43	14	j
FIELD	83:43	83:43	15	j
LEAF_NODE	83:43	83:43	16	j
LEAF_NODE	83:44	83:44	14	]
LEAF_NODE	83:45	83:45	13	)
LEAF_NODE	83:46	83:46	11	;
SELECTION	84:2	84:7	6	
KEYWORD	84:2	84:2	7	else
LEAF_NODE	84:2	84:2	8	else
STATEMENTS	84:7	84:7	7	
SELECTION	84:7	85:3	8	
KEYWORD	84:7	84:7	9	if
LEAF_NODE	84:7	84:7	10	if
LEAF_NODE	84:9	84:9	9	(
CONDITION	84:10	84:10	9	fip -> field_type == TIFF_SSHORT
EXPR	84:10	84:29	10	fip -> field_type == TIFF_SSHORT
FIELD	84:10	84:15	11	fip -> field_type
LEAF_NODE	84:10	84:10	12	fip
LEAF_NODE	84:13	84:13	12	->
LEAF_NODE	84:15	84:15	12	field_type
EQ_OPERATOR	84:26	84:26	11	==
LEAF_NODE	84:26	84:26	12	==
FIELD	84:29	84:29	11	TIFF_SSHORT
LEAF_NODE	84:29	84:29	12	TIFF_SSHORT
LEAF_NODE	84:40	84:40	9	)
STATEMENTS	85:3	85:3	9	
EXPR_STATEMENT	85:3	85:45	10	fprintf ( fd , "%d" , ( ( int16 * ) raw_data ) [ j ] ) ;
EXPR	85:3	85:3	11	fprintf ( fd , "%d" , ( ( int16 * ) raw_data ) [ j ] )
FUNCTION_CALL	85:3	85:44	12	fprintf ( fd , "%d" , ( ( int16 * ) raw_data ) [ j ] )
CALLEE	85:3	85:3	13	fprintf
LEAF_NODE	85:3	85:3	14	fprintf
LEAF_NODE	85:10	85:10	13	(
ARGUMENT	85:11	85:11	13	fd
FIELD	85:11	85:11	14	fd
LEAF_NODE	85:11	85:11	15	fd
LEAF_NODE	85:13	85:13	13	,
ARGUMENT	85:15	85:15	13	"%d"
FIELD	85:15	85:15	14	"%d"
LEAF_NODE	85:15	85:15	15	"%d"
LEAF_NODE	85:19	85:19	13	,
ARGUMENT	85:21	85:43	13	( ( int16 * ) raw_data ) [ j ]
LEAF_NODE	85:21	85:21	14	(
LEAF_NODE	85:22	85:22	14	(
TYPE_NAME	85:23	85:23	14	int16
LEAF_NODE	85:23	85:23	15	int16
LEAF_NODE	85:29	85:29	14	*
LEAF_NODE	85:30	85:30	14	)
FIELD	85:32	85:32	14	raw_data
LEAF_NODE	85:32	85:32	15	raw_data
LEAF_NODE	85:40	85:40	14	)
LEAF_NODE	85:41	85:41	14	[
EXPR	85:42	85:42	14	j
FIELD	85:42	85:42	15	j
LEAF_NODE	85:42	85:42	16	j
LEAF_NODE	85:43	85:43	14	]
LEAF_NODE	85:44	85:44	13	)
LEAF_NODE	85:45	85:45	11	;
SELECTION	86:2	86:7	6	
KEYWORD	86:2	86:2	7	else
LEAF_NODE	86:2	86:2	8	else
STATEMENTS	86:7	86:7	7	
SELECTION	86:7	87:3	8	
KEYWORD	86:7	86:7	9	if
LEAF_NODE	86:7	86:7	10	if
LEAF_NODE	86:9	86:9	9	(
CONDITION	86:10	86:10	9	fip -> field_type == TIFF_LONG
EXPR	86:10	86:29	10	fip -> field_type == TIFF_LONG
FIELD	86:10	86:15	11	fip -> field_type
LEAF_NODE	86:10	86:10	12	fip
LEAF_NODE	86:13	86:13	12	->
LEAF_NODE	86:15	86:15	12	field_type
EQ_OPERATOR	86:26	86:26	11	==
LEAF_NODE	86:26	86:26	12	==
FIELD	86:29	86:29	11	TIFF_LONG
LEAF_NODE	86:29	86:29	12	TIFF_LONG
LEAF_NODE	86:38	86:38	9	)
STATEMENTS	87:3	87:3	9	
EXPR_STATEMENT	87:3	88:47	10	fprintf ( fd , "%lu" , ( unsigned long ) ( ( uint32 * ) raw_data ) [ j ] ) ;
EXPR	87:3	87:3	11	fprintf ( fd , "%lu" , ( unsigned long ) ( ( uint32 * ) raw_data ) [ j ] )
FUNCTION_CALL	87:3	88:46	12	fprintf ( fd , "%lu" , ( unsigned long ) ( ( uint32 * ) raw_data ) [ j ] )
CALLEE	87:3	87:3	13	fprintf
LEAF_NODE	87:3	87:3	14	fprintf
LEAF_NODE	87:10	87:10	13	(
ARGUMENT	87:11	87:11	13	fd
FIELD	87:11	87:11	14	fd
LEAF_NODE	87:11	87:11	15	fd
LEAF_NODE	87:13	87:13	13	,
ARGUMENT	87:15	87:15	13	"%lu"
FIELD	87:15	87:15	14	"%lu"
LEAF_NODE	87:15	87:15	15	"%lu"
LEAF_NODE	87:20	87:20	13	,
ARGUMENT	88:7	88:45	13	( unsigned long ) ( ( uint32 * ) raw_data ) [ j ]
LEAF_NODE	88:7	88:7	14	(
TYPE_NAME	88:8	88:17	14	unsigned long
LEAF_NODE	88:8	88:8	15	unsigned
LEAF_NODE	88:17	88:17	15	long
LEAF_NODE	88:21	88:21	14	)
LEAF_NODE	88:22	88:22	14	(
LEAF_NODE	88:23	88:23	14	(
TYPE_NAME	88:24	88:24	14	uint32
LEAF_NODE	88:24	88:24	15	uint32
LEAF_NODE	88:31	88:31	14	*
LEAF_NODE	88:32	88:32	14	)
FIELD	88:34	88:34	14	raw_data
LEAF_NODE	88:34	88:34	15	raw_data
LEAF_NODE	88:42	88:42	14	)
LEAF_NODE	88:43	88:43	14	[
EXPR	88:44	88:44	14	j
FIELD	88:44	88:44	15	j
LEAF_NODE	88:44	88:44	16	j
LEAF_NODE	88:45	88:45	14	]
LEAF_NODE	88:46	88:46	13	)
LEAF_NODE	88:47	88:47	11	;
SELECTION	89:2	89:7	6	
KEYWORD	89:2	89:2	7	else
LEAF_NODE	89:2	89:2	8	else
STATEMENTS	89:7	89:7	7	
SELECTION	89:7	90:3	8	
KEYWORD	89:7	89:7	9	if
LEAF_NODE	89:7	89:7	10	if
LEAF_NODE	89:9	89:9	9	(
CONDITION	89:10	89:10	9	fip -> field_type == TIFF_SLONG
EXPR	89:10	89:29	10	fip -> field_type == TIFF_SLONG
FIELD	89:10	89:15	11	fip -> field_type
LEAF_NODE	89:10	89:10	12	fip
LEAF_NODE	89:13	89:13	12	->
LEAF_NODE	89:15	89:15	12	field_type
EQ_OPERATOR	89:26	89:26	11	==
LEAF_NODE	89:26	89:26	12	==
FIELD	89:29	89:29	11	TIFF_SLONG
LEAF_NODE	89:29	89:29	12	TIFF_SLONG
LEAF_NODE	89:39	89:39	9	)
STATEMENTS	90:3	90:3	9	
EXPR_STATEMENT	90:3	90:52	10	fprintf ( fd , "%ld" , ( long ) ( ( int32 * ) raw_data ) [ j ] ) ;
EXPR	90:3	90:3	11	fprintf ( fd , "%ld" , ( long ) ( ( int32 * ) raw_data ) [ j ] )
FUNCTION_CALL	90:3	90:51	12	fprintf ( fd , "%ld" , ( long ) ( ( int32 * ) raw_data ) [ j ] )
CALLEE	90:3	90:3	13	fprintf
LEAF_NODE	90:3	90:3	14	fprintf
LEAF_NODE	90:10	90:10	13	(
ARGUMENT	90:11	90:11	13	fd
FIELD	90:11	90:11	14	fd
LEAF_NODE	90:11	90:11	15	fd
LEAF_NODE	90:13	90:13	13	,
ARGUMENT	90:15	90:15	13	"%ld"
FIELD	90:15	90:15	14	"%ld"
LEAF_NODE	90:15	90:15	15	"%ld"
LEAF_NODE	90:20	90:20	13	,
ARGUMENT	90:22	90:50	13	( long ) ( ( int32 * ) raw_data ) [ j ]
LEAF_NODE	90:22	90:22	14	(
TYPE_NAME	90:23	90:23	14	long
LEAF_NODE	90:23	90:23	15	long
LEAF_NODE	90:27	90:27	14	)
LEAF_NODE	90:28	90:28	14	(
LEAF_NODE	90:29	90:29	14	(
TYPE_NAME	90:30	90:30	14	int32
LEAF_NODE	90:30	90:30	15	int32
LEAF_NODE	90:36	90:36	14	*
LEAF_NODE	90:37	90:37	14	)
FIELD	90:39	90:39	14	raw_data
LEAF_NODE	90:39	90:39	15	raw_data
LEAF_NODE	90:47	90:47	14	)
LEAF_NODE	90:48	90:48	14	[
EXPR	90:49	90:49	14	j
FIELD	90:49	90:49	15	j
LEAF_NODE	90:49	90:49	16	j
LEAF_NODE	90:50	90:50	14	]
LEAF_NODE	90:51	90:51	13	)
LEAF_NODE	90:52	90:52	11	;
SELECTION	91:2	91:7	6	
KEYWORD	91:2	91:2	7	else
LEAF_NODE	91:2	91:2	8	else
STATEMENTS	91:7	91:7	7	
SELECTION	91:7	92:3	8	
KEYWORD	91:7	91:7	9	if
LEAF_NODE	91:7	91:7	10	if
LEAF_NODE	91:9	91:9	9	(
CONDITION	91:10	91:10	9	fip -> field_type == TIFF_IFD
EXPR	91:10	91:29	10	fip -> field_type == TIFF_IFD
FIELD	91:10	91:15	11	fip -> field_type
LEAF_NODE	91:10	91:10	12	fip
LEAF_NODE	91:13	91:13	12	->
LEAF_NODE	91:15	91:15	12	field_type
EQ_OPERATOR	91:26	91:26	11	==
LEAF_NODE	91:26	91:26	12	==
FIELD	91:29	91:29	11	TIFF_IFD
LEAF_NODE	91:29	91:29	12	TIFF_IFD
LEAF_NODE	91:37	91:37	9	)
STATEMENTS	92:3	92:3	9	
EXPR_STATEMENT	92:3	93:44	10	fprintf ( fd , "0x%lx" , ( unsigned long ) ( ( uint32 * ) raw_data ) [ j ] ) ;
EXPR	92:3	92:3	11	fprintf ( fd , "0x%lx" , ( unsigned long ) ( ( uint32 * ) raw_data ) [ j ] )
FUNCTION_CALL	92:3	93:43	12	fprintf ( fd , "0x%lx" , ( unsigned long ) ( ( uint32 * ) raw_data ) [ j ] )
CALLEE	92:3	92:3	13	fprintf
LEAF_NODE	92:3	92:3	14	fprintf
LEAF_NODE	92:10	92:10	13	(
ARGUMENT	92:11	92:11	13	fd
FIELD	92:11	92:11	14	fd
LEAF_NODE	92:11	92:11	15	fd
LEAF_NODE	92:13	92:13	13	,
ARGUMENT	92:15	92:15	13	"0x%lx"
FIELD	92:15	92:15	14	"0x%lx"
LEAF_NODE	92:15	92:15	15	"0x%lx"
LEAF_NODE	92:22	92:22	13	,
ARGUMENT	93:4	93:42	13	( unsigned long ) ( ( uint32 * ) raw_data ) [ j ]
LEAF_NODE	93:4	93:4	14	(
TYPE_NAME	93:5	93:14	14	unsigned long
LEAF_NODE	93:5	93:5	15	unsigned
LEAF_NODE	93:14	93:14	15	long
LEAF_NODE	93:18	93:18	14	)
LEAF_NODE	93:19	93:19	14	(
LEAF_NODE	93:20	93:20	14	(
TYPE_NAME	93:21	93:21	14	uint32
LEAF_NODE	93:21	93:21	15	uint32
LEAF_NODE	93:28	93:28	14	*
LEAF_NODE	93:29	93:29	14	)
FIELD	93:31	93:31	14	raw_data
LEAF_NODE	93:31	93:31	15	raw_data
LEAF_NODE	93:39	93:39	14	)
LEAF_NODE	93:40	93:40	14	[
EXPR	93:41	93:41	14	j
FIELD	93:41	93:41	15	j
LEAF_NODE	93:41	93:41	16	j
LEAF_NODE	93:42	93:42	14	]
LEAF_NODE	93:43	93:43	13	)
LEAF_NODE	93:44	93:44	11	;
SELECTION	94:2	94:7	6	
KEYWORD	94:2	94:2	7	else
LEAF_NODE	94:2	94:2	8	else
STATEMENTS	94:7	94:7	7	
SELECTION	94:7	97:3	8	
KEYWORD	94:7	94:7	9	if
LEAF_NODE	94:7	94:7	10	if
LEAF_NODE	94:9	94:9	9	(
CONDITION	94:10	94:10	9	fip -> field_type == TIFF_RATIONAL || fip -> field_type == TIFF_SRATIONAL || fip -> field_type == TIFF_FLOAT
EXPR	94:10	94:10	10	fip -> field_type == TIFF_RATIONAL || fip -> field_type == TIFF_SRATIONAL || fip -> field_type == TIFF_FLOAT
OR	94:10	95:6	11	fip -> field_type == TIFF_RATIONAL || fip -> field_type == TIFF_SRATIONAL || fip -> field_type == TIFF_FLOAT
EXPR	94:10	94:29	12	fip -> field_type == TIFF_RATIONAL
FIELD	94:10	94:15	13	fip -> field_type
LEAF_NODE	94:10	94:10	14	fip
LEAF_NODE	94:13	94:13	14	->
LEAF_NODE	94:15	94:15	14	field_type
EQ_OPERATOR	94:26	94:26	13	==
LEAF_NODE	94:26	94:26	14	==
FIELD	94:29	94:29	13	TIFF_RATIONAL
LEAF_NODE	94:29	94:29	14	TIFF_RATIONAL
LEAF_NODE	95:3	95:3	12	||
EXPR	95:6	95:6	12	fip -> field_type == TIFF_SRATIONAL || fip -> field_type == TIFF_FLOAT
OR	95:6	96:6	13	fip -> field_type == TIFF_SRATIONAL || fip -> field_type == TIFF_FLOAT
EXPR	95:6	95:25	14	fip -> field_type == TIFF_SRATIONAL
FIELD	95:6	95:11	15	fip -> field_type
LEAF_NODE	95:6	95:6	16	fip
LEAF_NODE	95:9	95:9	16	->
LEAF_NODE	95:11	95:11	16	field_type
EQ_OPERATOR	95:22	95:22	15	==
LEAF_NODE	95:22	95:22	16	==
FIELD	95:25	95:25	15	TIFF_SRATIONAL
LEAF_NODE	95:25	95:25	16	TIFF_SRATIONAL
LEAF_NODE	96:3	96:3	14	||
EXPR	96:6	96:25	14	fip -> field_type == TIFF_FLOAT
FIELD	96:6	96:11	15	fip -> field_type
LEAF_NODE	96:6	96:6	16	fip
LEAF_NODE	96:9	96:9	16	->
LEAF_NODE	96:11	96:11	16	field_type
EQ_OPERATOR	96:22	96:22	15	==
LEAF_NODE	96:22	96:22	16	==
FIELD	96:25	96:25	15	TIFF_FLOAT
LEAF_NODE	96:25	96:25	16	TIFF_FLOAT
LEAF_NODE	96:35	96:35	9	)
STATEMENTS	97:3	97:3	9	
EXPR_STATEMENT	97:3	97:45	10	fprintf ( fd , "%f" , ( ( float * ) raw_data ) [ j ] ) ;
EXPR	97:3	97:3	11	fprintf ( fd , "%f" , ( ( float * ) raw_data ) [ j ] )
FUNCTION_CALL	97:3	97:44	12	fprintf ( fd , "%f" , ( ( float * ) raw_data ) [ j ] )
CALLEE	97:3	97:3	13	fprintf
LEAF_NODE	97:3	97:3	14	fprintf
LEAF_NODE	97:10	97:10	13	(
ARGUMENT	97:11	97:11	13	fd
FIELD	97:11	97:11	14	fd
LEAF_NODE	97:11	97:11	15	fd
LEAF_NODE	97:13	97:13	13	,
ARGUMENT	97:15	97:15	13	"%f"
FIELD	97:15	97:15	14	"%f"
LEAF_NODE	97:15	97:15	15	"%f"
LEAF_NODE	97:19	97:19	13	,
ARGUMENT	97:21	97:43	13	( ( float * ) raw_data ) [ j ]
LEAF_NODE	97:21	97:21	14	(
LEAF_NODE	97:22	97:22	14	(
TYPE_NAME	97:23	97:23	14	float
LEAF_NODE	97:23	97:23	15	float
LEAF_NODE	97:29	97:29	14	*
LEAF_NODE	97:30	97:30	14	)
FIELD	97:32	97:32	14	raw_data
LEAF_NODE	97:32	97:32	15	raw_data
LEAF_NODE	97:40	97:40	14	)
LEAF_NODE	97:41	97:41	14	[
EXPR	97:42	97:42	14	j
FIELD	97:42	97:42	15	j
LEAF_NODE	97:42	97:42	16	j
LEAF_NODE	97:43	97:43	14	]
LEAF_NODE	97:44	97:44	13	)
LEAF_NODE	97:45	97:45	11	;
SELECTION	98:2	98:7	6	
KEYWORD	98:2	98:2	7	else
LEAF_NODE	98:2	98:2	8	else
STATEMENTS	98:7	98:7	7	
SELECTION	98:7	100:3	8	
KEYWORD	98:7	98:7	9	if
LEAF_NODE	98:7	98:7	10	if
LEAF_NODE	98:9	98:9	9	(
CONDITION	98:10	98:10	9	fip -> field_type == TIFF_LONG8
EXPR	98:10	98:29	10	fip -> field_type == TIFF_LONG8
FIELD	98:10	98:15	11	fip -> field_type
LEAF_NODE	98:10	98:10	12	fip
LEAF_NODE	98:13	98:13	12	->
LEAF_NODE	98:15	98:15	12	field_type
EQ_OPERATOR	98:26	98:26	11	==
LEAF_NODE	98:26	98:26	12	==
FIELD	98:29	98:29	11	TIFF_LONG8
LEAF_NODE	98:29	98:29	12	TIFF_LONG8
LEAF_NODE	98:39	98:39	9	)
STATEMENTS	100:3	100:3	9	
EXPR_STATEMENT	100:3	101:50	10	fprintf ( fd , "%I64u" , ( unsigned __int64 ) ( ( uint64 * ) raw_data ) [ j ] ) ;
EXPR	100:3	100:3	11	fprintf ( fd , "%I64u" , ( unsigned __int64 ) ( ( uint64 * ) raw_data ) [ j ] )
FUNCTION_CALL	100:3	101:49	12	fprintf ( fd , "%I64u" , ( unsigned __int64 ) ( ( uint64 * ) raw_data ) [ j ] )
CALLEE	100:3	100:3	13	fprintf
LEAF_NODE	100:3	100:3	14	fprintf
LEAF_NODE	100:10	100:10	13	(
ARGUMENT	100:11	100:11	13	fd
FIELD	100:11	100:11	14	fd
LEAF_NODE	100:11	100:11	15	fd
LEAF_NODE	100:13	100:13	13	,
ARGUMENT	100:15	100:15	13	"%I64u"
FIELD	100:15	100:15	14	"%I64u"
LEAF_NODE	100:15	100:15	15	"%I64u"
LEAF_NODE	100:22	100:22	13	,
ARGUMENT	101:7	101:48	13	( unsigned __int64 ) ( ( uint64 * ) raw_data ) [ j ]
LEAF_NODE	101:7	101:7	14	(
TYPE_NAME	101:8	101:17	14	unsigned __int64
LEAF_NODE	101:8	101:8	15	unsigned
LEAF_NODE	101:17	101:17	15	__int64
LEAF_NODE	101:24	101:24	14	)
LEAF_NODE	101:25	101:25	14	(
LEAF_NODE	101:26	101:26	14	(
TYPE_NAME	101:27	101:27	14	uint64
LEAF_NODE	101:27	101:27	15	uint64
LEAF_NODE	101:34	101:34	14	*
LEAF_NODE	101:35	101:35	14	)
FIELD	101:37	101:37	14	raw_data
LEAF_NODE	101:37	101:37	15	raw_data
LEAF_NODE	101:45	101:45	14	)
LEAF_NODE	101:46	101:46	14	[
EXPR	101:47	101:47	14	j
FIELD	101:47	101:47	15	j
LEAF_NODE	101:47	101:47	16	j
LEAF_NODE	101:48	101:48	14	]
LEAF_NODE	101:49	101:49	13	)
LEAF_NODE	101:50	101:50	11	;
LEAF_NODE	103:3	103:3	6	fprintf
LEAF_NODE	103:10	103:10	6	(
LEAF_NODE	103:11	103:11	6	fd
LEAF_NODE	103:13	103:13	6	,
LEAF_NODE	103:15	103:15	6	"%llu"
LEAF_NODE	103:21	103:21	6	,
LEAF_NODE	104:7	104:7	6	(
LEAF_NODE	104:8	104:8	6	unsigned
LEAF_NODE	104:17	104:17	6	long
LEAF_NODE	104:22	104:22	6	long
LEAF_NODE	104:26	104:26	6	)
LEAF_NODE	104:27	104:27	6	(
LEAF_NODE	104:28	104:28	6	(
LEAF_NODE	104:29	104:29	6	uint64
LEAF_NODE	104:36	104:36	6	*
LEAF_NODE	104:37	104:37	6	)
LEAF_NODE	104:39	104:39	6	raw_data
LEAF_NODE	104:47	104:47	6	)
LEAF_NODE	104:48	104:48	6	[
LEAF_NODE	104:49	104:49	6	j
LEAF_NODE	104:50	104:50	6	]
LEAF_NODE	104:51	104:51	6	)
LEAF_NODE	104:52	104:52	6	;
SELECTION	106:2	106:7	6	
KEYWORD	106:2	106:2	7	else
LEAF_NODE	106:2	106:2	8	else
STATEMENTS	106:7	106:7	7	
SELECTION	106:7	108:3	8	
KEYWORD	106:7	106:7	9	if
LEAF_NODE	106:7	106:7	10	if
LEAF_NODE	106:9	106:9	9	(
CONDITION	106:10	106:10	9	fip -> field_type == TIFF_SLONG8
EXPR	106:10	106:29	10	fip -> field_type == TIFF_SLONG8
FIELD	106:10	106:15	11	fip -> field_type
LEAF_NODE	106:10	106:10	12	fip
LEAF_NODE	106:13	106:13	12	->
LEAF_NODE	106:15	106:15	12	field_type
EQ_OPERATOR	106:26	106:26	11	==
LEAF_NODE	106:26	106:26	12	==
FIELD	106:29	106:29	11	TIFF_SLONG8
LEAF_NODE	106:29	106:29	12	TIFF_SLONG8
LEAF_NODE	106:40	106:40	9	)
STATEMENTS	108:3	108:3	9	
EXPR_STATEMENT	108:3	108:57	10	fprintf ( fd , "%I64d" , ( __int64 ) ( ( int64 * ) raw_data ) [ j ] ) ;
EXPR	108:3	108:3	11	fprintf ( fd , "%I64d" , ( __int64 ) ( ( int64 * ) raw_data ) [ j ] )
FUNCTION_CALL	108:3	108:56	12	fprintf ( fd , "%I64d" , ( __int64 ) ( ( int64 * ) raw_data ) [ j ] )
CALLEE	108:3	108:3	13	fprintf
LEAF_NODE	108:3	108:3	14	fprintf
LEAF_NODE	108:10	108:10	13	(
ARGUMENT	108:11	108:11	13	fd
FIELD	108:11	108:11	14	fd
LEAF_NODE	108:11	108:11	15	fd
LEAF_NODE	108:13	108:13	13	,
ARGUMENT	108:15	108:15	13	"%I64d"
FIELD	108:15	108:15	14	"%I64d"
LEAF_NODE	108:15	108:15	15	"%I64d"
LEAF_NODE	108:22	108:22	13	,
ARGUMENT	108:24	108:55	13	( __int64 ) ( ( int64 * ) raw_data ) [ j ]
LEAF_NODE	108:24	108:24	14	(
TYPE_NAME	108:25	108:25	14	__int64
LEAF_NODE	108:25	108:25	15	__int64
LEAF_NODE	108:32	108:32	14	)
LEAF_NODE	108:33	108:33	14	(
LEAF_NODE	108:34	108:34	14	(
TYPE_NAME	108:35	108:35	14	int64
LEAF_NODE	108:35	108:35	15	int64
LEAF_NODE	108:41	108:41	14	*
LEAF_NODE	108:42	108:42	14	)
FIELD	108:44	108:44	14	raw_data
LEAF_NODE	108:44	108:44	15	raw_data
LEAF_NODE	108:52	108:52	14	)
LEAF_NODE	108:53	108:53	14	[
EXPR	108:54	108:54	14	j
FIELD	108:54	108:54	15	j
LEAF_NODE	108:54	108:54	16	j
LEAF_NODE	108:55	108:55	14	]
LEAF_NODE	108:56	108:56	13	)
LEAF_NODE	108:57	108:57	11	;
LEAF_NODE	110:3	110:3	6	fprintf
LEAF_NODE	110:10	110:10	6	(
LEAF_NODE	110:11	110:11	6	fd
LEAF_NODE	110:13	110:13	6	,
LEAF_NODE	110:15	110:15	6	"%lld"
LEAF_NODE	110:21	110:21	6	,
LEAF_NODE	110:23	110:23	6	(
LEAF_NODE	110:24	110:24	6	long
LEAF_NODE	110:29	110:29	6	long
LEAF_NODE	110:33	110:33	6	)
LEAF_NODE	110:34	110:34	6	(
LEAF_NODE	110:35	110:35	6	(
LEAF_NODE	110:36	110:36	6	int64
LEAF_NODE	110:42	110:42	6	*
LEAF_NODE	110:43	110:43	6	)
LEAF_NODE	110:45	110:45	6	raw_data
LEAF_NODE	110:53	110:53	6	)
LEAF_NODE	110:54	110:54	6	[
LEAF_NODE	110:55	110:55	6	j
LEAF_NODE	110:56	110:56	6	]
LEAF_NODE	110:57	110:57	6	)
LEAF_NODE	110:58	110:58	6	;
SELECTION	112:2	112:7	6	
KEYWORD	112:2	112:2	7	else
LEAF_NODE	112:2	112:2	8	else
STATEMENTS	112:7	112:7	7	
SELECTION	112:7	114:3	8	
KEYWORD	112:7	112:7	9	if
LEAF_NODE	112:7	112:7	10	if
LEAF_NODE	112:9	112:9	9	(
CONDITION	112:10	112:10	9	fip -> field_type == TIFF_IFD8
EXPR	112:10	112:29	10	fip -> field_type == TIFF_IFD8
FIELD	112:10	112:15	11	fip -> field_type
LEAF_NODE	112:10	112:10	12	fip
LEAF_NODE	112:13	112:13	12	->
LEAF_NODE	112:15	112:15	12	field_type
EQ_OPERATOR	112:26	112:26	11	==
LEAF_NODE	112:26	112:26	12	==
FIELD	112:29	112:29	11	TIFF_IFD8
LEAF_NODE	112:29	112:29	12	TIFF_IFD8
LEAF_NODE	112:38	112:38	9	)
STATEMENTS	114:3	114:3	9	
EXPR_STATEMENT	114:3	115:47	10	fprintf ( fd , "0x%I64x" , ( unsigned __int64 ) ( ( uint64 * ) raw_data ) [ j ] ) ;
EXPR	114:3	114:3	11	fprintf ( fd , "0x%I64x" , ( unsigned __int64 ) ( ( uint64 * ) raw_data ) [ j ] )
FUNCTION_CALL	114:3	115:46	12	fprintf ( fd , "0x%I64x" , ( unsigned __int64 ) ( ( uint64 * ) raw_data ) [ j ] )
CALLEE	114:3	114:3	13	fprintf
LEAF_NODE	114:3	114:3	14	fprintf
LEAF_NODE	114:10	114:10	13	(
ARGUMENT	114:11	114:11	13	fd
FIELD	114:11	114:11	14	fd
LEAF_NODE	114:11	114:11	15	fd
LEAF_NODE	114:13	114:13	13	,
ARGUMENT	114:15	114:15	13	"0x%I64x"
FIELD	114:15	114:15	14	"0x%I64x"
LEAF_NODE	114:15	114:15	15	"0x%I64x"
LEAF_NODE	114:24	114:24	13	,
ARGUMENT	115:4	115:45	13	( unsigned __int64 ) ( ( uint64 * ) raw_data ) [ j ]
LEAF_NODE	115:4	115:4	14	(
TYPE_NAME	115:5	115:14	14	unsigned __int64
LEAF_NODE	115:5	115:5	15	unsigned
LEAF_NODE	115:14	115:14	15	__int64
LEAF_NODE	115:21	115:21	14	)
LEAF_NODE	115:22	115:22	14	(
LEAF_NODE	115:23	115:23	14	(
TYPE_NAME	115:24	115:24	14	uint64
LEAF_NODE	115:24	115:24	15	uint64
LEAF_NODE	115:31	115:31	14	*
LEAF_NODE	115:32	115:32	14	)
FIELD	115:34	115:34	14	raw_data
LEAF_NODE	115:34	115:34	15	raw_data
LEAF_NODE	115:42	115:42	14	)
LEAF_NODE	115:43	115:43	14	[
EXPR	115:44	115:44	14	j
FIELD	115:44	115:44	15	j
LEAF_NODE	115:44	115:44	16	j
LEAF_NODE	115:45	115:45	14	]
LEAF_NODE	115:46	115:46	13	)
LEAF_NODE	115:47	115:47	11	;
LEAF_NODE	117:3	117:3	6	fprintf
LEAF_NODE	117:10	117:10	6	(
LEAF_NODE	117:11	117:11	6	fd
LEAF_NODE	117:13	117:13	6	,
LEAF_NODE	117:15	117:15	6	"0x%llx"
LEAF_NODE	117:23	117:23	6	,
LEAF_NODE	118:4	118:4	6	(
LEAF_NODE	118:5	118:5	6	unsigned
LEAF_NODE	118:14	118:14	6	long
LEAF_NODE	118:19	118:19	6	long
LEAF_NODE	118:23	118:23	6	)
LEAF_NODE	118:24	118:24	6	(
LEAF_NODE	118:25	118:25	6	(
LEAF_NODE	118:26	118:26	6	uint64
LEAF_NODE	118:33	118:33	6	*
LEAF_NODE	118:34	118:34	6	)
LEAF_NODE	118:36	118:36	6	raw_data
LEAF_NODE	118:44	118:44	6	)
LEAF_NODE	118:45	118:45	6	[
LEAF_NODE	118:46	118:46	6	j
LEAF_NODE	118:47	118:47	6	]
LEAF_NODE	118:48	118:48	6	)
LEAF_NODE	118:49	118:49	6	;
SELECTION	120:2	120:7	6	
KEYWORD	120:2	120:2	7	else
LEAF_NODE	120:2	120:2	8	else
STATEMENTS	120:7	120:7	7	
SELECTION	120:7	121:3	8	
KEYWORD	120:7	120:7	9	if
LEAF_NODE	120:7	120:7	10	if
LEAF_NODE	120:9	120:9	9	(
CONDITION	120:10	120:10	9	fip -> field_type == TIFF_FLOAT
EXPR	120:10	120:29	10	fip -> field_type == TIFF_FLOAT
FIELD	120:10	120:15	11	fip -> field_type
LEAF_NODE	120:10	120:10	12	fip
LEAF_NODE	120:13	120:13	12	->
LEAF_NODE	120:15	120:15	12	field_type
EQ_OPERATOR	120:26	120:26	11	==
LEAF_NODE	120:26	120:26	12	==
FIELD	120:29	120:29	11	TIFF_FLOAT
LEAF_NODE	120:29	120:29	12	TIFF_FLOAT
LEAF_NODE	120:39	120:39	9	)
STATEMENTS	121:3	121:3	9	
EXPR_STATEMENT	121:3	121:44	10	fprintf ( fd , "%f" , ( ( float * ) raw_data ) [ j ] ) ;
EXPR	121:3	121:3	11	fprintf ( fd , "%f" , ( ( float * ) raw_data ) [ j ] )
FUNCTION_CALL	121:3	121:43	12	fprintf ( fd , "%f" , ( ( float * ) raw_data ) [ j ] )
CALLEE	121:3	121:3	13	fprintf
LEAF_NODE	121:3	121:3	14	fprintf
LEAF_NODE	121:10	121:10	13	(
ARGUMENT	121:11	121:11	13	fd
FIELD	121:11	121:11	14	fd
LEAF_NODE	121:11	121:11	15	fd
LEAF_NODE	121:13	121:13	13	,
ARGUMENT	121:15	121:15	13	"%f"
FIELD	121:15	121:15	14	"%f"
LEAF_NODE	121:15	121:15	15	"%f"
LEAF_NODE	121:19	121:19	13	,
ARGUMENT	121:21	121:42	13	( ( float * ) raw_data ) [ j ]
LEAF_NODE	121:21	121:21	14	(
LEAF_NODE	121:22	121:22	14	(
TYPE_NAME	121:23	121:23	14	float
LEAF_NODE	121:23	121:23	15	float
LEAF_NODE	121:29	121:29	14	*
LEAF_NODE	121:30	121:30	14	)
FIELD	121:31	121:31	14	raw_data
LEAF_NODE	121:31	121:31	15	raw_data
LEAF_NODE	121:39	121:39	14	)
LEAF_NODE	121:40	121:40	14	[
EXPR	121:41	121:41	14	j
FIELD	121:41	121:41	15	j
LEAF_NODE	121:41	121:41	16	j
LEAF_NODE	121:42	121:42	14	]
LEAF_NODE	121:43	121:43	13	)
LEAF_NODE	121:44	121:44	11	;
SELECTION	122:2	122:7	6	
KEYWORD	122:2	122:2	7	else
LEAF_NODE	122:2	122:2	8	else
STATEMENTS	122:7	122:7	7	
SELECTION	122:7	123:3	8	
KEYWORD	122:7	122:7	9	if
LEAF_NODE	122:7	122:7	10	if
LEAF_NODE	122:9	122:9	9	(
CONDITION	122:10	122:10	9	fip -> field_type == TIFF_DOUBLE
EXPR	122:10	122:29	10	fip -> field_type == TIFF_DOUBLE
FIELD	122:10	122:15	11	fip -> field_type
LEAF_NODE	122:10	122:10	12	fip
LEAF_NODE	122:13	122:13	12	->
LEAF_NODE	122:15	122:15	12	field_type
EQ_OPERATOR	122:26	122:26	11	==
LEAF_NODE	122:26	122:26	12	==
FIELD	122:29	122:29	11	TIFF_DOUBLE
LEAF_NODE	122:29	122:29	12	TIFF_DOUBLE
LEAF_NODE	122:40	122:40	9	)
STATEMENTS	123:3	123:3	9	
EXPR_STATEMENT	123:3	123:46	10	fprintf ( fd , "%f" , ( ( double * ) raw_data ) [ j ] ) ;
EXPR	123:3	123:3	11	fprintf ( fd , "%f" , ( ( double * ) raw_data ) [ j ] )
FUNCTION_CALL	123:3	123:45	12	fprintf ( fd , "%f" , ( ( double * ) raw_data ) [ j ] )
CALLEE	123:3	123:3	13	fprintf
LEAF_NODE	123:3	123:3	14	fprintf
LEAF_NODE	123:10	123:10	13	(
ARGUMENT	123:11	123:11	13	fd
FIELD	123:11	123:11	14	fd
LEAF_NODE	123:11	123:11	15	fd
LEAF_NODE	123:13	123:13	13	,
ARGUMENT	123:15	123:15	13	"%f"
FIELD	123:15	123:15	14	"%f"
LEAF_NODE	123:15	123:15	15	"%f"
LEAF_NODE	123:19	123:19	13	,
ARGUMENT	123:21	123:44	13	( ( double * ) raw_data ) [ j ]
LEAF_NODE	123:21	123:21	14	(
LEAF_NODE	123:22	123:22	14	(
TYPE_NAME	123:23	123:23	14	double
LEAF_NODE	123:23	123:23	15	double
LEAF_NODE	123:30	123:30	14	*
LEAF_NODE	123:31	123:31	14	)
FIELD	123:33	123:33	14	raw_data
LEAF_NODE	123:33	123:33	15	raw_data
LEAF_NODE	123:41	123:41	14	)
LEAF_NODE	123:42	123:42	14	[
EXPR	123:43	123:43	14	j
FIELD	123:43	123:43	15	j
LEAF_NODE	123:43	123:43	16	j
LEAF_NODE	123:44	123:44	14	]
LEAF_NODE	123:45	123:45	13	)
LEAF_NODE	123:46	123:46	11	;
SELECTION	124:2	124:7	6	
KEYWORD	124:2	124:2	7	else
LEAF_NODE	124:2	124:2	8	else
STATEMENTS	124:7	124:7	7	
SELECTION	124:7	124:41	8	
KEYWORD	124:7	124:7	9	if
LEAF_NODE	124:7	124:7	10	if
LEAF_NODE	124:9	124:9	9	(
CONDITION	124:10	124:10	9	fip -> field_type == TIFF_ASCII
EXPR	124:10	124:29	10	fip -> field_type == TIFF_ASCII
FIELD	124:10	124:15	11	fip -> field_type
LEAF_NODE	124:10	124:10	12	fip
LEAF_NODE	124:13	124:13	12	->
LEAF_NODE	124:15	124:15	12	field_type
EQ_OPERATOR	124:26	124:26	11	==
LEAF_NODE	124:26	124:26	12	==
FIELD	124:29	124:29	11	TIFF_ASCII
LEAF_NODE	124:29	124:29	12	TIFF_ASCII
LEAF_NODE	124:39	124:39	9	)
STATEMENTS	124:41	127:2	9	
LEAF_NODE	124:41	124:41	10	{
STATEMENTS	125:3	126:3	10	
EXPR_STATEMENT	125:3	125:39	11	fprintf ( fd , "%s" , ( char * ) raw_data ) ;
EXPR	125:3	125:3	12	fprintf ( fd , "%s" , ( char * ) raw_data )
FUNCTION_CALL	125:3	125:38	13	fprintf ( fd , "%s" , ( char * ) raw_data )
CALLEE	125:3	125:3	14	fprintf
LEAF_NODE	125:3	125:3	15	fprintf
LEAF_NODE	125:10	125:10	14	(
ARGUMENT	125:11	125:11	14	fd
FIELD	125:11	125:11	15	fd
LEAF_NODE	125:11	125:11	16	fd
LEAF_NODE	125:13	125:13	14	,
ARGUMENT	125:15	125:15	14	"%s"
FIELD	125:15	125:15	15	"%s"
LEAF_NODE	125:15	125:15	16	"%s"
LEAF_NODE	125:19	125:19	14	,
ARGUMENT	125:21	125:30	14	( char * ) raw_data
LEAF_NODE	125:21	125:21	15	(
TYPE_NAME	125:22	125:22	15	char
LEAF_NODE	125:22	125:22	16	char
LEAF_NODE	125:27	125:27	15	*
LEAF_NODE	125:28	125:28	15	)
FIELD	125:30	125:30	15	raw_data
LEAF_NODE	125:30	125:30	16	raw_data
LEAF_NODE	125:38	125:38	14	)
LEAF_NODE	125:39	125:39	12	;
JUMP_STATEMENT	126:3	126:8	11	break DESTINATION ;
KEYWORD	126:3	126:3	12	break
LEAF_NODE	126:3	126:3	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	126:8	126:8	12	;
LEAF_NODE	127:2	127:2	10	}
SELECTION	128:2	128:7	6	
KEYWORD	128:2	128:2	7	else
LEAF_NODE	128:2	128:2	8	else
STATEMENTS	128:7	131:2	7	
LEAF_NODE	128:7	128:7	8	{
STATEMENTS	129:3	130:3	8	
EXPR_STATEMENT	129:3	129:54	9	fprintf ( fd , "<unsupported data type in TIFFPrint>" ) ;
EXPR	129:3	129:3	10	fprintf ( fd , "<unsupported data type in TIFFPrint>" )
FUNCTION_CALL	129:3	129:53	11	fprintf ( fd , "<unsupported data type in TIFFPrint>" )
CALLEE	129:3	129:3	12	fprintf
LEAF_NODE	129:3	129:3	13	fprintf
LEAF_NODE	129:10	129:10	12	(
ARGUMENT	129:11	129:11	12	fd
FIELD	129:11	129:11	13	fd
LEAF_NODE	129:11	129:11	14	fd
LEAF_NODE	129:13	129:13	12	,
ARGUMENT	129:15	129:15	12	"<unsupported data type in TIFFPrint>"
FIELD	129:15	129:15	13	"<unsupported data type in TIFFPrint>"
LEAF_NODE	129:15	129:15	14	"<unsupported data type in TIFFPrint>"
LEAF_NODE	129:53	129:53	12	)
LEAF_NODE	129:54	129:54	10	;
JUMP_STATEMENT	130:3	130:8	9	break DESTINATION ;
KEYWORD	130:3	130:3	10	break
LEAF_NODE	130:3	130:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	130:8	130:8	10	;
LEAF_NODE	131:2	131:2	8	}
SELECTION	133:2	134:3	6	
KEYWORD	133:2	133:2	7	if
LEAF_NODE	133:2	133:2	8	if
LEAF_NODE	133:4	133:4	7	(
CONDITION	133:5	133:5	7	j < value_count - 1
EXPR	133:5	133:23	8	j < value_count - 1
FIELD	133:5	133:5	9	j
LEAF_NODE	133:5	133:5	10	j
REL_OPERATOR	133:7	133:7	9	<
LEAF_NODE	133:7	133:7	10	<
FIELD	133:9	133:9	9	value_count
LEAF_NODE	133:9	133:9	10	value_count
LEAF_NODE	133:21	133:21	9	-
FIELD	133:23	133:23	9	1
LEAF_NODE	133:23	133:23	10	1
LEAF_NODE	133:24	133:24	7	)
STATEMENTS	134:3	134:3	7	
EXPR_STATEMENT	134:3	134:19	8	fprintf ( fd , "," ) ;
EXPR	134:3	134:3	9	fprintf ( fd , "," )
FUNCTION_CALL	134:3	134:18	10	fprintf ( fd , "," )
CALLEE	134:3	134:3	11	fprintf
LEAF_NODE	134:3	134:3	12	fprintf
LEAF_NODE	134:10	134:10	11	(
ARGUMENT	134:11	134:11	11	fd
FIELD	134:11	134:11	12	fd
LEAF_NODE	134:11	134:11	13	fd
LEAF_NODE	134:13	134:13	11	,
ARGUMENT	134:15	134:15	11	","
FIELD	134:15	134:15	12	","
LEAF_NODE	134:15	134:15	13	","
LEAF_NODE	134:18	134:18	11	)
LEAF_NODE	134:19	134:19	9	;
LEAF_NODE	135:1	135:1	5	}
EXPR_STATEMENT	137:1	137:18	3	fprintf ( fd , "\n" ) ;
EXPR	137:1	137:1	4	fprintf ( fd , "\n" )
FUNCTION_CALL	137:1	137:17	5	fprintf ( fd , "\n" )
CALLEE	137:1	137:1	6	fprintf
LEAF_NODE	137:1	137:1	7	fprintf
LEAF_NODE	137:8	137:8	6	(
ARGUMENT	137:9	137:9	6	fd
FIELD	137:9	137:9	7	fd
LEAF_NODE	137:9	137:9	8	fd
LEAF_NODE	137:11	137:11	6	,
ARGUMENT	137:13	137:13	6	"\n"
FIELD	137:13	137:13	7	"\n"
LEAF_NODE	137:13	137:13	8	"\n"
LEAF_NODE	137:17	137:17	6	)
LEAF_NODE	137:18	137:18	4	;
LEAF_NODE	138:0	138:0	2	}
FUNCTION_DEF	140:0	227:0	1	
RETURN_TYPE	140:0	140:7	2	static int
LEAF_NODE	140:0	140:0	3	static
TYPE_NAME	140:7	140:7	3	int
LEAF_NODE	140:7	140:7	4	int
FUNCTION_NAME	141:0	141:0	2	_TIFFPrettyPrintField
LEAF_NODE	141:0	141:0	3	_TIFFPrettyPrintField
PARAMETER_LIST	141:21	142:42	2	( TIFF * tif , const TIFFField * fip , FILE * fd , uint32 tag , uint32 value_count , void * raw_data )
LEAF_NODE	141:21	141:21	3	(
PARAMETER_DECL	141:22	141:28	3	TIFF * tif
TYPE	141:22	141:26	4	TIFF *
TYPE_NAME	141:22	141:22	5	TIFF
LEAF_NODE	141:22	141:22	6	TIFF
POINTER	141:26	141:26	5	*
LEAF_NODE	141:26	141:26	6	*
NAME	141:28	141:28	4	tif
LEAF_NODE	141:28	141:28	5	tif
LEAF_NODE	141:31	141:31	3	,
PARAMETER_DECL	141:33	141:50	3	const TIFFField * fip
TYPE	141:33	141:49	4	const TIFFField *
TYPE_NAME	141:33	141:39	5	const TIFFField
LEAF_NODE	141:33	141:33	6	const
LEAF_NODE	141:39	141:39	6	TIFFField
POINTER	141:49	141:49	5	*
LEAF_NODE	141:49	141:49	6	*
NAME	141:50	141:50	4	fip
LEAF_NODE	141:50	141:50	5	fip
LEAF_NODE	141:53	141:53	3	,
PARAMETER_DECL	141:55	141:61	3	FILE * fd
TYPE	141:55	141:59	4	FILE *
TYPE_NAME	141:55	141:55	5	FILE
LEAF_NODE	141:55	141:55	6	FILE
POINTER	141:59	141:59	5	*
LEAF_NODE	141:59	141:59	6	*
NAME	141:61	141:61	4	fd
LEAF_NODE	141:61	141:61	5	fd
LEAF_NODE	141:63	141:63	3	,
PARAMETER_DECL	141:65	141:72	3	uint32 tag
TYPE	141:65	141:65	4	uint32
TYPE_NAME	141:65	141:65	5	uint32
LEAF_NODE	141:65	141:65	6	uint32
NAME	141:72	141:72	4	tag
LEAF_NODE	141:72	141:72	5	tag
LEAF_NODE	141:75	141:75	3	,
PARAMETER_DECL	142:8	142:15	3	uint32 value_count
TYPE	142:8	142:8	4	uint32
TYPE_NAME	142:8	142:8	5	uint32
LEAF_NODE	142:8	142:8	6	uint32
NAME	142:15	142:15	4	value_count
LEAF_NODE	142:15	142:15	5	value_count
LEAF_NODE	142:26	142:26	3	,
PARAMETER_DECL	142:28	142:34	3	void * raw_data
TYPE	142:28	142:33	4	void *
TYPE_NAME	142:28	142:28	5	void
LEAF_NODE	142:28	142:28	6	void
POINTER	142:33	142:33	5	*
LEAF_NODE	142:33	142:33	6	*
NAME	142:34	142:34	4	raw_data
LEAF_NODE	142:34	142:34	5	raw_data
LEAF_NODE	142:42	142:42	3	)
LEAF_NODE	143:0	143:0	2	{
STATEMENTS	144:8	226:1	2	
EXPR_STATEMENT	144:8	144:18	3	( void ) tif ;
EXPR	144:8	144:15	4	( void ) tif
LEAF_NODE	144:8	144:8	5	(
TYPE_NAME	144:9	144:9	5	void
LEAF_NODE	144:9	144:9	6	void
LEAF_NODE	144:13	144:13	5	)
FIELD	144:15	144:15	5	tif
LEAF_NODE	144:15	144:15	6	tif
LEAF_NODE	144:18	144:18	4	;
SELECTION	147:1	147:46	3	
KEYWORD	147:1	147:1	4	if
LEAF_NODE	147:1	147:1	5	if
LEAF_NODE	147:4	147:4	4	(
CONDITION	147:5	147:5	4	strncmp ( fip -> field_name , "Tag " , 4 ) == 0
EXPR	147:5	147:43	5	strncmp ( fip -> field_name , "Tag " , 4 ) == 0
FUNCTION_CALL	147:5	147:38	6	strncmp ( fip -> field_name , "Tag " , 4 )
CALLEE	147:5	147:5	7	strncmp
LEAF_NODE	147:5	147:5	8	strncmp
LEAF_NODE	147:12	147:12	7	(
ARGUMENT	147:13	147:13	7	fip -> field_name
FIELD	147:13	147:18	8	fip -> field_name
LEAF_NODE	147:13	147:13	9	fip
LEAF_NODE	147:16	147:16	9	->
LEAF_NODE	147:18	147:18	9	field_name
LEAF_NODE	147:28	147:28	7	,
ARGUMENT	147:29	147:29	7	"Tag "
FIELD	147:29	147:29	8	"Tag "
LEAF_NODE	147:29	147:29	9	"Tag "
LEAF_NODE	147:35	147:35	7	,
ARGUMENT	147:37	147:37	7	4
FIELD	147:37	147:37	8	4
LEAF_NODE	147:37	147:37	9	4
LEAF_NODE	147:38	147:38	7	)
EQ_OPERATOR	147:40	147:40	6	==
LEAF_NODE	147:40	147:40	7	==
FIELD	147:43	147:43	6	0
LEAF_NODE	147:43	147:43	7	0
LEAF_NODE	147:44	147:44	4	)
STATEMENTS	147:46	149:1	4	
LEAF_NODE	147:46	147:46	5	{
STATEMENTS	148:2	148:2	5	
JUMP_STATEMENT	148:2	148:10	6	return 0 ;
KEYWORD	148:2	148:2	7	return
LEAF_NODE	148:2	148:2	8	return
DESTINATION	148:9	148:9	7	0
EXPR	148:9	148:9	8	0
FIELD	148:9	148:9	9	0
LEAF_NODE	148:9	148:9	10	0
LEAF_NODE	148:10	148:10	7	;
LEAF_NODE	149:1	149:1	5	}
SELECTION	151:1	152:1	3	
KEYWORD	151:1	151:1	4	switch
LEAF_NODE	151:1	151:1	5	switch
LEAF_NODE	151:8	151:8	4	(
CONDITION	151:9	151:9	4	tag
EXPR	151:9	151:9	5	tag
FIELD	151:9	151:9	6	tag
LEAF_NODE	151:9	151:9	7	tag
LEAF_NODE	151:12	151:12	4	)
STATEMENTS	152:1	224:1	4	
LEAF_NODE	152:1	152:1	5	{
STATEMENTS	153:2	223:3	5	
LABEL	153:2	153:21	6	case TIFFTAG_INKSET :
LEAF_NODE	153:2	153:2	7	case
LEAF_NODE	153:7	153:7	7	TIFFTAG_INKSET
LEAF_NODE	153:21	153:21	7	:
SELECTION	154:3	154:58	6	
KEYWORD	154:3	154:3	7	if
LEAF_NODE	154:3	154:3	8	if
LEAF_NODE	154:6	154:6	7	(
CONDITION	154:7	154:7	7	value_count == 2 && fip -> field_type == TIFF_SHORT
EXPR	154:7	154:7	8	value_count == 2 && fip -> field_type == TIFF_SHORT
AND	154:7	154:27	9	value_count == 2 && fip -> field_type == TIFF_SHORT
EXPR	154:7	154:22	10	value_count == 2
FIELD	154:7	154:7	11	value_count
LEAF_NODE	154:7	154:7	12	value_count
EQ_OPERATOR	154:19	154:19	11	==
LEAF_NODE	154:19	154:19	12	==
FIELD	154:22	154:22	11	2
LEAF_NODE	154:22	154:22	12	2
LEAF_NODE	154:24	154:24	10	&&
EXPR	154:27	154:46	10	fip -> field_type == TIFF_SHORT
FIELD	154:27	154:32	11	fip -> field_type
LEAF_NODE	154:27	154:27	12	fip
LEAF_NODE	154:30	154:30	12	->
LEAF_NODE	154:32	154:32	12	field_type
EQ_OPERATOR	154:43	154:43	11	==
LEAF_NODE	154:43	154:43	12	==
FIELD	154:46	154:46	11	TIFF_SHORT
LEAF_NODE	154:46	154:46	12	TIFF_SHORT
LEAF_NODE	154:56	154:56	7	)
STATEMENTS	154:58	167:3	7	
LEAF_NODE	154:58	154:58	8	{
STATEMENTS	155:4	166:4	8	
EXPR_STATEMENT	155:4	155:30	9	fprintf ( fd , "  Ink Set: " ) ;
EXPR	155:4	155:4	10	fprintf ( fd , "  Ink Set: " )
FUNCTION_CALL	155:4	155:29	11	fprintf ( fd , "  Ink Set: " )
CALLEE	155:4	155:4	12	fprintf
LEAF_NODE	155:4	155:4	13	fprintf
LEAF_NODE	155:11	155:11	12	(
ARGUMENT	155:12	155:12	12	fd
FIELD	155:12	155:12	13	fd
LEAF_NODE	155:12	155:12	14	fd
LEAF_NODE	155:14	155:14	12	,
ARGUMENT	155:16	155:16	12	"  Ink Set: "
FIELD	155:16	155:16	13	"  Ink Set: "
LEAF_NODE	155:16	155:16	14	"  Ink Set: "
LEAF_NODE	155:29	155:29	12	)
LEAF_NODE	155:30	155:30	10	;
SELECTION	156:4	156:34	9	
KEYWORD	156:4	156:4	10	switch
LEAF_NODE	156:4	156:4	11	switch
LEAF_NODE	156:11	156:11	10	(
CONDITION	156:12	156:12	10	* ( ( uint16 * ) raw_data )
EXPR	156:12	156:12	11	* ( ( uint16 * ) raw_data )
UNARY_EXPR	156:12	156:31	12	* ( ( uint16 * ) raw_data )
UNARY_OPERATOR	156:12	156:12	13	*
LEAF_NODE	156:12	156:12	14	*
LEAF_NODE	156:13	156:13	13	(
LEAF_NODE	156:14	156:14	13	(
TYPE_NAME	156:15	156:15	13	uint16
LEAF_NODE	156:15	156:15	14	uint16
LEAF_NODE	156:21	156:21	13	*
LEAF_NODE	156:22	156:22	13	)
FIELD	156:23	156:23	13	raw_data
LEAF_NODE	156:23	156:23	14	raw_data
LEAF_NODE	156:31	156:31	13	)
LEAF_NODE	156:32	156:32	10	)
STATEMENTS	156:34	165:4	10	
LEAF_NODE	156:34	156:34	11	{
STATEMENTS	157:4	164:5	11	
LABEL	157:4	157:20	12	case INKSET_CMYK :
LEAF_NODE	157:4	157:4	13	case
LEAF_NODE	157:9	157:9	13	INKSET_CMYK
LEAF_NODE	157:20	157:20	13	:
EXPR_STATEMENT	158:5	158:26	12	fprintf ( fd , "CMYK\n" ) ;
EXPR	158:5	158:5	13	fprintf ( fd , "CMYK\n" )
FUNCTION_CALL	158:5	158:25	14	fprintf ( fd , "CMYK\n" )
CALLEE	158:5	158:5	15	fprintf
LEAF_NODE	158:5	158:5	16	fprintf
LEAF_NODE	158:12	158:12	15	(
ARGUMENT	158:13	158:13	15	fd
FIELD	158:13	158:13	16	fd
LEAF_NODE	158:13	158:13	17	fd
LEAF_NODE	158:15	158:15	15	,
ARGUMENT	158:17	158:17	15	"CMYK\n"
FIELD	158:17	158:17	16	"CMYK\n"
LEAF_NODE	158:17	158:17	17	"CMYK\n"
LEAF_NODE	158:25	158:25	15	)
LEAF_NODE	158:26	158:26	13	;
JUMP_STATEMENT	159:5	159:10	12	break DESTINATION ;
KEYWORD	159:5	159:5	13	break
LEAF_NODE	159:5	159:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	159:10	159:10	13	;
LABEL	160:4	160:11	12	default :
LEAF_NODE	160:4	160:4	13	default
LEAF_NODE	160:11	160:11	13	:
EXPR_STATEMENT	161:5	163:27	12	fprintf ( fd , "%u (0x%x)\n" , * ( ( uint16 * ) raw_data ) , * ( ( uint16 * ) raw_data ) ) ;
EXPR	161:5	161:5	13	fprintf ( fd , "%u (0x%x)\n" , * ( ( uint16 * ) raw_data ) , * ( ( uint16 * ) raw_data ) )
FUNCTION_CALL	161:5	163:26	14	fprintf ( fd , "%u (0x%x)\n" , * ( ( uint16 * ) raw_data ) , * ( ( uint16 * ) raw_data ) )
CALLEE	161:5	161:5	15	fprintf
LEAF_NODE	161:5	161:5	16	fprintf
LEAF_NODE	161:12	161:12	15	(
ARGUMENT	161:13	161:13	15	fd
FIELD	161:13	161:13	16	fd
LEAF_NODE	161:13	161:13	17	fd
LEAF_NODE	161:15	161:15	15	,
ARGUMENT	161:17	161:17	15	"%u (0x%x)\n"
FIELD	161:17	161:17	16	"%u (0x%x)\n"
LEAF_NODE	161:17	161:17	17	"%u (0x%x)\n"
LEAF_NODE	161:30	161:30	15	,
ARGUMENT	162:6	162:6	15	* ( ( uint16 * ) raw_data )
UNARY_EXPR	162:6	162:25	16	* ( ( uint16 * ) raw_data )
UNARY_OPERATOR	162:6	162:6	17	*
LEAF_NODE	162:6	162:6	18	*
LEAF_NODE	162:7	162:7	17	(
LEAF_NODE	162:8	162:8	17	(
TYPE_NAME	162:9	162:9	17	uint16
LEAF_NODE	162:9	162:9	18	uint16
LEAF_NODE	162:15	162:15	17	*
LEAF_NODE	162:16	162:16	17	)
FIELD	162:17	162:17	17	raw_data
LEAF_NODE	162:17	162:17	18	raw_data
LEAF_NODE	162:25	162:25	17	)
LEAF_NODE	162:26	162:26	15	,
ARGUMENT	163:6	163:6	15	* ( ( uint16 * ) raw_data )
UNARY_EXPR	163:6	163:25	16	* ( ( uint16 * ) raw_data )
UNARY_OPERATOR	163:6	163:6	17	*
LEAF_NODE	163:6	163:6	18	*
LEAF_NODE	163:7	163:7	17	(
LEAF_NODE	163:8	163:8	17	(
TYPE_NAME	163:9	163:9	17	uint16
LEAF_NODE	163:9	163:9	18	uint16
LEAF_NODE	163:15	163:15	17	*
LEAF_NODE	163:16	163:16	17	)
FIELD	163:17	163:17	17	raw_data
LEAF_NODE	163:17	163:17	18	raw_data
LEAF_NODE	163:25	163:25	17	)
LEAF_NODE	163:26	163:26	15	)
LEAF_NODE	163:27	163:27	13	;
JUMP_STATEMENT	164:5	164:10	12	break DESTINATION ;
KEYWORD	164:5	164:5	13	break
LEAF_NODE	164:5	164:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	164:10	164:10	13	;
LEAF_NODE	165:4	165:4	11	}
JUMP_STATEMENT	166:4	166:12	9	return 1 ;
KEYWORD	166:4	166:4	10	return
LEAF_NODE	166:4	166:4	11	return
DESTINATION	166:11	166:11	10	1
EXPR	166:11	166:11	11	1
FIELD	166:11	166:11	12	1
LEAF_NODE	166:11	166:11	13	1
LEAF_NODE	166:12	166:12	10	;
LEAF_NODE	167:3	167:3	8	}
JUMP_STATEMENT	168:3	168:11	6	return 0 ;
KEYWORD	168:3	168:3	7	return
LEAF_NODE	168:3	168:3	8	return
DESTINATION	168:10	168:10	7	0
EXPR	168:10	168:10	8	0
FIELD	168:10	168:10	9	0
LEAF_NODE	168:10	168:10	10	0
LEAF_NODE	168:11	168:11	7	;
LABEL	170:2	170:23	6	case TIFFTAG_DOTRANGE :
LEAF_NODE	170:2	170:2	7	case
LEAF_NODE	170:7	170:7	7	TIFFTAG_DOTRANGE
LEAF_NODE	170:23	170:23	7	:
SELECTION	171:3	171:58	6	
KEYWORD	171:3	171:3	7	if
LEAF_NODE	171:3	171:3	8	if
LEAF_NODE	171:6	171:6	7	(
CONDITION	171:7	171:7	7	value_count == 2 && fip -> field_type == TIFF_SHORT
EXPR	171:7	171:7	8	value_count == 2 && fip -> field_type == TIFF_SHORT
AND	171:7	171:27	9	value_count == 2 && fip -> field_type == TIFF_SHORT
EXPR	171:7	171:22	10	value_count == 2
FIELD	171:7	171:7	11	value_count
LEAF_NODE	171:7	171:7	12	value_count
EQ_OPERATOR	171:19	171:19	11	==
LEAF_NODE	171:19	171:19	12	==
FIELD	171:22	171:22	11	2
LEAF_NODE	171:22	171:22	12	2
LEAF_NODE	171:24	171:24	10	&&
EXPR	171:27	171:46	10	fip -> field_type == TIFF_SHORT
FIELD	171:27	171:32	11	fip -> field_type
LEAF_NODE	171:27	171:27	12	fip
LEAF_NODE	171:30	171:30	12	->
LEAF_NODE	171:32	171:32	12	field_type
EQ_OPERATOR	171:43	171:43	11	==
LEAF_NODE	171:43	171:43	12	==
FIELD	171:46	171:46	11	TIFF_SHORT
LEAF_NODE	171:46	171:46	12	TIFF_SHORT
LEAF_NODE	171:56	171:56	7	)
STATEMENTS	171:58	175:3	7	
LEAF_NODE	171:58	171:58	8	{
STATEMENTS	172:4	174:4	8	
EXPR_STATEMENT	172:4	173:52	9	fprintf ( fd , "  Dot Range: %u-%u\n" , ( ( uint16 * ) raw_data ) [ 0 ] , ( ( uint16 * ) raw_data ) [ 1 ] ) ;
EXPR	172:4	172:4	10	fprintf ( fd , "  Dot Range: %u-%u\n" , ( ( uint16 * ) raw_data ) [ 0 ] , ( ( uint16 * ) raw_data ) [ 1 ] )
FUNCTION_CALL	172:4	173:51	11	fprintf ( fd , "  Dot Range: %u-%u\n" , ( ( uint16 * ) raw_data ) [ 0 ] , ( ( uint16 * ) raw_data ) [ 1 ] )
CALLEE	172:4	172:4	12	fprintf
LEAF_NODE	172:4	172:4	13	fprintf
LEAF_NODE	172:11	172:11	12	(
ARGUMENT	172:12	172:12	12	fd
FIELD	172:12	172:12	13	fd
LEAF_NODE	172:12	172:12	14	fd
LEAF_NODE	172:14	172:14	12	,
ARGUMENT	172:16	172:16	12	"  Dot Range: %u-%u\n"
FIELD	172:16	172:16	13	"  Dot Range: %u-%u\n"
LEAF_NODE	172:16	172:16	14	"  Dot Range: %u-%u\n"
LEAF_NODE	172:38	172:38	12	,
ARGUMENT	173:5	173:26	12	( ( uint16 * ) raw_data ) [ 0 ]
LEAF_NODE	173:5	173:5	13	(
LEAF_NODE	173:6	173:6	13	(
TYPE_NAME	173:7	173:7	13	uint16
LEAF_NODE	173:7	173:7	14	uint16
LEAF_NODE	173:13	173:13	13	*
LEAF_NODE	173:14	173:14	13	)
FIELD	173:15	173:15	13	raw_data
LEAF_NODE	173:15	173:15	14	raw_data
LEAF_NODE	173:23	173:23	13	)
LEAF_NODE	173:24	173:24	13	[
EXPR	173:25	173:25	13	0
FIELD	173:25	173:25	14	0
LEAF_NODE	173:25	173:25	15	0
LEAF_NODE	173:26	173:26	13	]
LEAF_NODE	173:27	173:27	12	,
ARGUMENT	173:29	173:50	12	( ( uint16 * ) raw_data ) [ 1 ]
LEAF_NODE	173:29	173:29	13	(
LEAF_NODE	173:30	173:30	13	(
TYPE_NAME	173:31	173:31	13	uint16
LEAF_NODE	173:31	173:31	14	uint16
LEAF_NODE	173:37	173:37	13	*
LEAF_NODE	173:38	173:38	13	)
FIELD	173:39	173:39	13	raw_data
LEAF_NODE	173:39	173:39	14	raw_data
LEAF_NODE	173:47	173:47	13	)
LEAF_NODE	173:48	173:48	13	[
EXPR	173:49	173:49	13	1
FIELD	173:49	173:49	14	1
LEAF_NODE	173:49	173:49	15	1
LEAF_NODE	173:50	173:50	13	]
LEAF_NODE	173:51	173:51	12	)
LEAF_NODE	173:52	173:52	10	;
JUMP_STATEMENT	174:4	174:12	9	return 1 ;
KEYWORD	174:4	174:4	10	return
LEAF_NODE	174:4	174:4	11	return
DESTINATION	174:11	174:11	10	1
EXPR	174:11	174:11	11	1
FIELD	174:11	174:11	12	1
LEAF_NODE	174:11	174:11	13	1
LEAF_NODE	174:12	174:12	10	;
LEAF_NODE	175:3	175:3	8	}
JUMP_STATEMENT	176:3	176:11	6	return 0 ;
KEYWORD	176:3	176:3	7	return
LEAF_NODE	176:3	176:3	8	return
DESTINATION	176:10	176:10	7	0
EXPR	176:10	176:10	8	0
FIELD	176:10	176:10	9	0
LEAF_NODE	176:10	176:10	10	0
LEAF_NODE	176:11	176:11	7	;
LABEL	178:2	178:25	6	case TIFFTAG_WHITEPOINT :
LEAF_NODE	178:2	178:2	7	case
LEAF_NODE	178:7	178:7	7	TIFFTAG_WHITEPOINT
LEAF_NODE	178:25	178:25	7	:
SELECTION	179:3	179:61	6	
KEYWORD	179:3	179:3	7	if
LEAF_NODE	179:3	179:3	8	if
LEAF_NODE	179:6	179:6	7	(
CONDITION	179:7	179:7	7	value_count == 2 && fip -> field_type == TIFF_RATIONAL
EXPR	179:7	179:7	8	value_count == 2 && fip -> field_type == TIFF_RATIONAL
AND	179:7	179:27	9	value_count == 2 && fip -> field_type == TIFF_RATIONAL
EXPR	179:7	179:22	10	value_count == 2
FIELD	179:7	179:7	11	value_count
LEAF_NODE	179:7	179:7	12	value_count
EQ_OPERATOR	179:19	179:19	11	==
LEAF_NODE	179:19	179:19	12	==
FIELD	179:22	179:22	11	2
LEAF_NODE	179:22	179:22	12	2
LEAF_NODE	179:24	179:24	10	&&
EXPR	179:27	179:46	10	fip -> field_type == TIFF_RATIONAL
FIELD	179:27	179:32	11	fip -> field_type
LEAF_NODE	179:27	179:27	12	fip
LEAF_NODE	179:30	179:30	12	->
LEAF_NODE	179:32	179:32	12	field_type
EQ_OPERATOR	179:43	179:43	11	==
LEAF_NODE	179:43	179:43	12	==
FIELD	179:46	179:46	11	TIFF_RATIONAL
LEAF_NODE	179:46	179:46	12	TIFF_RATIONAL
LEAF_NODE	179:59	179:59	7	)
STATEMENTS	179:61	183:3	7	
LEAF_NODE	179:61	179:61	8	{
STATEMENTS	180:4	182:4	8	
EXPR_STATEMENT	180:4	181:52	9	fprintf ( fd , "  White Point: %g-%g\n" , ( ( float * ) raw_data ) [ 0 ] , ( ( float * ) raw_data ) [ 1 ] ) ;
EXPR	180:4	180:4	10	fprintf ( fd , "  White Point: %g-%g\n" , ( ( float * ) raw_data ) [ 0 ] , ( ( float * ) raw_data ) [ 1 ] )
FUNCTION_CALL	180:4	181:51	11	fprintf ( fd , "  White Point: %g-%g\n" , ( ( float * ) raw_data ) [ 0 ] , ( ( float * ) raw_data ) [ 1 ] )
CALLEE	180:4	180:4	12	fprintf
LEAF_NODE	180:4	180:4	13	fprintf
LEAF_NODE	180:11	180:11	12	(
ARGUMENT	180:12	180:12	12	fd
FIELD	180:12	180:12	13	fd
LEAF_NODE	180:12	180:12	14	fd
LEAF_NODE	180:14	180:14	12	,
ARGUMENT	180:16	180:16	12	"  White Point: %g-%g\n"
FIELD	180:16	180:16	13	"  White Point: %g-%g\n"
LEAF_NODE	180:16	180:16	14	"  White Point: %g-%g\n"
LEAF_NODE	180:40	180:40	12	,
ARGUMENT	181:5	181:26	12	( ( float * ) raw_data ) [ 0 ]
LEAF_NODE	181:5	181:5	13	(
LEAF_NODE	181:6	181:6	13	(
TYPE_NAME	181:7	181:7	13	float
LEAF_NODE	181:7	181:7	14	float
LEAF_NODE	181:13	181:13	13	*
LEAF_NODE	181:14	181:14	13	)
FIELD	181:15	181:15	13	raw_data
LEAF_NODE	181:15	181:15	14	raw_data
LEAF_NODE	181:23	181:23	13	)
LEAF_NODE	181:24	181:24	13	[
EXPR	181:25	181:25	13	0
FIELD	181:25	181:25	14	0
LEAF_NODE	181:25	181:25	15	0
LEAF_NODE	181:26	181:26	13	]
LEAF_NODE	181:27	181:27	12	,
ARGUMENT	181:29	181:50	12	( ( float * ) raw_data ) [ 1 ]
LEAF_NODE	181:29	181:29	13	(
LEAF_NODE	181:30	181:30	13	(
TYPE_NAME	181:31	181:31	13	float
LEAF_NODE	181:31	181:31	14	float
LEAF_NODE	181:37	181:37	13	*
LEAF_NODE	181:38	181:38	13	)
FIELD	181:39	181:39	13	raw_data
LEAF_NODE	181:39	181:39	14	raw_data
LEAF_NODE	181:47	181:47	13	)
LEAF_NODE	181:48	181:48	13	[
EXPR	181:49	181:49	13	1
FIELD	181:49	181:49	14	1
LEAF_NODE	181:49	181:49	15	1
LEAF_NODE	181:50	181:50	13	]
LEAF_NODE	181:51	181:51	12	)
LEAF_NODE	181:52	181:52	10	;
JUMP_STATEMENT	182:4	182:12	9	return 1 ;
KEYWORD	182:4	182:4	10	return
LEAF_NODE	182:4	182:4	11	return
DESTINATION	182:11	182:11	10	1
EXPR	182:11	182:11	11	1
FIELD	182:11	182:11	12	1
LEAF_NODE	182:11	182:11	13	1
LEAF_NODE	182:12	182:12	10	;
LEAF_NODE	183:3	183:3	8	}
JUMP_STATEMENT	184:3	184:11	6	return 0 ;
KEYWORD	184:3	184:3	7	return
LEAF_NODE	184:3	184:3	8	return
DESTINATION	184:10	184:10	7	0
EXPR	184:10	184:10	8	0
FIELD	184:10	184:10	9	0
LEAF_NODE	184:10	184:10	10	0
LEAF_NODE	184:11	184:11	7	;
LABEL	186:2	186:24	6	case TIFFTAG_XMLPACKET :
LEAF_NODE	186:2	186:2	7	case
LEAF_NODE	186:7	186:7	7	TIFFTAG_XMLPACKET
LEAF_NODE	186:24	186:24	7	:
LEAF_NODE	187:2	187:2	6	{
STATEMENTS	188:3	194:3	6	
SIMPLE_DECL	188:3	188:11	7	uint32 i ;
VAR_DECL	188:3	188:10	8	uint32 i
TYPE	188:3	188:3	9	uint32
TYPE_NAME	188:3	188:3	10	uint32
LEAF_NODE	188:3	188:3	11	uint32
NAME	188:10	188:10	9	i
LEAF_NODE	188:10	188:10	10	i
LEAF_NODE	188:11	188:11	8	;
EXPR_STATEMENT	190:3	190:48	7	fprintf ( fd , "  XMLPacket (XMP Metadata):\n" ) ;
EXPR	190:3	190:3	8	fprintf ( fd , "  XMLPacket (XMP Metadata):\n" )
FUNCTION_CALL	190:3	190:47	9	fprintf ( fd , "  XMLPacket (XMP Metadata):\n" )
CALLEE	190:3	190:3	10	fprintf
LEAF_NODE	190:3	190:3	11	fprintf
LEAF_NODE	190:10	190:10	10	(
ARGUMENT	190:11	190:11	10	fd
FIELD	190:11	190:11	11	fd
LEAF_NODE	190:11	190:11	12	fd
LEAF_NODE	190:13	190:13	10	,
ARGUMENT	190:15	190:15	10	"  XMLPacket (XMP Metadata):\n"
FIELD	190:15	190:15	11	"  XMLPacket (XMP Metadata):\n"
LEAF_NODE	190:15	190:15	12	"  XMLPacket (XMP Metadata):\n"
LEAF_NODE	190:47	190:47	10	)
LEAF_NODE	190:48	190:48	8	;
ITERATION	191:3	192:4	7	
KEYWORD	191:3	191:3	8	for
LEAF_NODE	191:3	191:3	9	for
LEAF_NODE	191:6	191:6	8	(
FOR_INIT	191:7	191:12	8	i = 0 ;
EXPR	191:7	191:7	9	i = 0
ASSIGN	191:7	191:11	10	i = 0
LVAL	191:7	191:7	11	i
FIELD	191:7	191:7	12	i
LEAF_NODE	191:7	191:7	13	i
ASSIGN_OP	191:9	191:9	11	=
LEAF_NODE	191:9	191:9	12	=
RVAL	191:11	191:11	11	0
FIELD	191:11	191:11	12	0
LEAF_NODE	191:11	191:11	13	0
LEAF_NODE	191:12	191:12	9	;
CONDITION	191:14	191:14	8	i < value_count
EXPR	191:14	191:18	9	i < value_count
FIELD	191:14	191:14	10	i
LEAF_NODE	191:14	191:14	11	i
REL_OPERATOR	191:16	191:16	10	<
LEAF_NODE	191:16	191:16	11	<
FIELD	191:18	191:18	10	value_count
LEAF_NODE	191:18	191:18	11	value_count
LEAF_NODE	191:29	191:29	8	;
FOR_EXPR	191:31	191:31	8	i ++
EXPR	191:31	191:31	9	i ++
FIELD	191:31	191:32	10	i ++
LEAF_NODE	191:31	191:31	11	i
LEAF_NODE	191:32	191:32	11	++
LEAF_NODE	191:34	191:34	8	)
STATEMENTS	192:4	192:4	8	
EXPR_STATEMENT	192:4	192:36	9	fputc ( ( ( char * ) raw_data ) [ i ] , fd ) ;
EXPR	192:4	192:4	10	fputc ( ( ( char * ) raw_data ) [ i ] , fd )
FUNCTION_CALL	192:4	192:35	11	fputc ( ( ( char * ) raw_data ) [ i ] , fd )
CALLEE	192:4	192:4	12	fputc
LEAF_NODE	192:4	192:4	13	fputc
LEAF_NODE	192:9	192:9	12	(
ARGUMENT	192:10	192:30	12	( ( char * ) raw_data ) [ i ]
LEAF_NODE	192:10	192:10	13	(
LEAF_NODE	192:11	192:11	13	(
TYPE_NAME	192:12	192:12	13	char
LEAF_NODE	192:12	192:12	14	char
LEAF_NODE	192:17	192:17	13	*
LEAF_NODE	192:18	192:18	13	)
FIELD	192:19	192:19	13	raw_data
LEAF_NODE	192:19	192:19	14	raw_data
LEAF_NODE	192:27	192:27	13	)
LEAF_NODE	192:28	192:28	13	[
EXPR	192:29	192:29	13	i
FIELD	192:29	192:29	14	i
LEAF_NODE	192:29	192:29	15	i
LEAF_NODE	192:30	192:30	13	]
LEAF_NODE	192:31	192:31	12	,
ARGUMENT	192:33	192:33	12	fd
FIELD	192:33	192:33	13	fd
LEAF_NODE	192:33	192:33	14	fd
LEAF_NODE	192:35	192:35	12	)
LEAF_NODE	192:36	192:36	10	;
EXPR_STATEMENT	193:3	193:22	7	fprintf ( fd , "\n" ) ;
EXPR	193:3	193:3	8	fprintf ( fd , "\n" )
FUNCTION_CALL	193:3	193:21	9	fprintf ( fd , "\n" )
CALLEE	193:3	193:3	10	fprintf
LEAF_NODE	193:3	193:3	11	fprintf
LEAF_NODE	193:10	193:10	10	(
ARGUMENT	193:12	193:12	10	fd
FIELD	193:12	193:12	11	fd
LEAF_NODE	193:12	193:12	12	fd
LEAF_NODE	193:14	193:14	10	,
ARGUMENT	193:16	193:16	10	"\n"
FIELD	193:16	193:16	11	"\n"
LEAF_NODE	193:16	193:16	12	"\n"
LEAF_NODE	193:21	193:21	10	)
LEAF_NODE	193:22	193:22	8	;
JUMP_STATEMENT	194:3	194:11	7	return 1 ;
KEYWORD	194:3	194:3	8	return
LEAF_NODE	194:3	194:3	9	return
DESTINATION	194:10	194:10	8	1
EXPR	194:10	194:10	9	1
FIELD	194:10	194:10	10	1
LEAF_NODE	194:10	194:10	11	1
LEAF_NODE	194:11	194:11	8	;
LEAF_NODE	195:2	195:2	6	}
LABEL	196:2	196:27	6	case TIFFTAG_RICHTIFFIPTC :
LEAF_NODE	196:2	196:2	7	case
LEAF_NODE	196:7	196:7	7	TIFFTAG_RICHTIFFIPTC
LEAF_NODE	196:27	196:27	7	:
EXPR_STATEMENT	201:3	203:39	6	fprintf ( fd , "  RichTIFFIPTC Data: <present>, %lu bytes\n" , ( unsigned long ) value_count * 4 ) ;
EXPR	201:3	201:3	7	fprintf ( fd , "  RichTIFFIPTC Data: <present>, %lu bytes\n" , ( unsigned long ) value_count * 4 )
FUNCTION_CALL	201:3	203:38	8	fprintf ( fd , "  RichTIFFIPTC Data: <present>, %lu bytes\n" , ( unsigned long ) value_count * 4 )
CALLEE	201:3	201:3	9	fprintf
LEAF_NODE	201:3	201:3	10	fprintf
LEAF_NODE	201:10	201:10	9	(
ARGUMENT	201:11	201:11	9	fd
FIELD	201:11	201:11	10	fd
LEAF_NODE	201:11	201:11	11	fd
LEAF_NODE	201:13	201:13	9	,
ARGUMENT	202:7	202:7	9	"  RichTIFFIPTC Data: <present>, %lu bytes\n"
FIELD	202:7	202:7	10	"  RichTIFFIPTC Data: <present>, %lu bytes\n"
LEAF_NODE	202:7	202:7	11	"  RichTIFFIPTC Data: <present>, %lu bytes\n"
LEAF_NODE	202:52	202:52	9	,
ARGUMENT	203:7	203:37	9	( unsigned long ) value_count * 4
LEAF_NODE	203:7	203:7	10	(
TYPE_NAME	203:8	203:17	10	unsigned long
LEAF_NODE	203:8	203:8	11	unsigned
LEAF_NODE	203:17	203:17	11	long
LEAF_NODE	203:21	203:21	10	)
FIELD	203:23	203:23	10	value_count
LEAF_NODE	203:23	203:23	11	value_count
LEAF_NODE	203:35	203:35	10	*
FIELD	203:37	203:37	10	4
LEAF_NODE	203:37	203:37	11	4
LEAF_NODE	203:38	203:38	9	)
LEAF_NODE	203:39	203:39	7	;
JUMP_STATEMENT	204:3	204:11	6	return 1 ;
KEYWORD	204:3	204:3	7	return
LEAF_NODE	204:3	204:3	8	return
DESTINATION	204:10	204:10	7	1
EXPR	204:10	204:10	8	1
FIELD	204:10	204:10	9	1
LEAF_NODE	204:10	204:10	10	1
LEAF_NODE	204:11	204:11	7	;
LABEL	206:2	206:24	6	case TIFFTAG_PHOTOSHOP :
LEAF_NODE	206:2	206:2	7	case
LEAF_NODE	206:7	206:7	7	TIFFTAG_PHOTOSHOP
LEAF_NODE	206:24	206:24	7	:
EXPR_STATEMENT	207:3	208:35	6	fprintf ( fd , "  Photoshop Data: <present>, %lu bytes\n" , ( unsigned long ) value_count ) ;
EXPR	207:3	207:3	7	fprintf ( fd , "  Photoshop Data: <present>, %lu bytes\n" , ( unsigned long ) value_count )
FUNCTION_CALL	207:3	208:34	8	fprintf ( fd , "  Photoshop Data: <present>, %lu bytes\n" , ( unsigned long ) value_count )
CALLEE	207:3	207:3	9	fprintf
LEAF_NODE	207:3	207:3	10	fprintf
LEAF_NODE	207:10	207:10	9	(
ARGUMENT	207:11	207:11	9	fd
FIELD	207:11	207:11	10	fd
LEAF_NODE	207:11	207:11	11	fd
LEAF_NODE	207:13	207:13	9	,
ARGUMENT	207:15	207:15	9	"  Photoshop Data: <present>, %lu bytes\n"
FIELD	207:15	207:15	10	"  Photoshop Data: <present>, %lu bytes\n"
LEAF_NODE	207:15	207:15	11	"  Photoshop Data: <present>, %lu bytes\n"
LEAF_NODE	207:57	207:57	9	,
ARGUMENT	208:7	208:23	9	( unsigned long ) value_count
LEAF_NODE	208:7	208:7	10	(
TYPE_NAME	208:8	208:17	10	unsigned long
LEAF_NODE	208:8	208:8	11	unsigned
LEAF_NODE	208:17	208:17	11	long
LEAF_NODE	208:21	208:21	10	)
FIELD	208:23	208:23	10	value_count
LEAF_NODE	208:23	208:23	11	value_count
LEAF_NODE	208:34	208:34	9	)
LEAF_NODE	208:35	208:35	7	;
JUMP_STATEMENT	209:3	209:11	6	return 1 ;
KEYWORD	209:3	209:3	7	return
LEAF_NODE	209:3	209:3	8	return
DESTINATION	209:10	209:10	7	1
EXPR	209:10	209:10	8	1
FIELD	209:10	209:10	9	1
LEAF_NODE	209:10	209:10	10	1
LEAF_NODE	209:11	209:11	7	;
LABEL	211:2	211:25	6	case TIFFTAG_ICCPROFILE :
LEAF_NODE	211:2	211:2	7	case
LEAF_NODE	211:7	211:7	7	TIFFTAG_ICCPROFILE
LEAF_NODE	211:25	211:25	7	:
EXPR_STATEMENT	212:3	213:35	6	fprintf ( fd , "  ICC Profile: <present>, %lu bytes\n" , ( unsigned long ) value_count ) ;
EXPR	212:3	212:3	7	fprintf ( fd , "  ICC Profile: <present>, %lu bytes\n" , ( unsigned long ) value_count )
FUNCTION_CALL	212:3	213:34	8	fprintf ( fd , "  ICC Profile: <present>, %lu bytes\n" , ( unsigned long ) value_count )
CALLEE	212:3	212:3	9	fprintf
LEAF_NODE	212:3	212:3	10	fprintf
LEAF_NODE	212:10	212:10	9	(
ARGUMENT	212:11	212:11	9	fd
FIELD	212:11	212:11	10	fd
LEAF_NODE	212:11	212:11	11	fd
LEAF_NODE	212:13	212:13	9	,
ARGUMENT	212:15	212:15	9	"  ICC Profile: <present>, %lu bytes\n"
FIELD	212:15	212:15	10	"  ICC Profile: <present>, %lu bytes\n"
LEAF_NODE	212:15	212:15	11	"  ICC Profile: <present>, %lu bytes\n"
LEAF_NODE	212:54	212:54	9	,
ARGUMENT	213:7	213:23	9	( unsigned long ) value_count
LEAF_NODE	213:7	213:7	10	(
TYPE_NAME	213:8	213:17	10	unsigned long
LEAF_NODE	213:8	213:8	11	unsigned
LEAF_NODE	213:17	213:17	11	long
LEAF_NODE	213:21	213:21	10	)
FIELD	213:23	213:23	10	value_count
LEAF_NODE	213:23	213:23	11	value_count
LEAF_NODE	213:34	213:34	9	)
LEAF_NODE	213:35	213:35	7	;
JUMP_STATEMENT	214:3	214:11	6	return 1 ;
KEYWORD	214:3	214:3	7	return
LEAF_NODE	214:3	214:3	8	return
DESTINATION	214:10	214:10	7	1
EXPR	214:10	214:10	8	1
FIELD	214:10	214:10	9	1
LEAF_NODE	214:10	214:10	10	1
LEAF_NODE	214:11	214:11	7	;
LABEL	216:2	216:22	6	case TIFFTAG_STONITS :
LEAF_NODE	216:2	216:2	7	case
LEAF_NODE	216:7	216:7	7	TIFFTAG_STONITS
LEAF_NODE	216:22	216:22	7	:
SELECTION	217:3	217:59	6	
KEYWORD	217:3	217:3	7	if
LEAF_NODE	217:3	217:3	8	if
LEAF_NODE	217:6	217:6	7	(
CONDITION	217:7	217:7	7	value_count == 1 && fip -> field_type == TIFF_DOUBLE
EXPR	217:7	217:7	8	value_count == 1 && fip -> field_type == TIFF_DOUBLE
AND	217:7	217:27	9	value_count == 1 && fip -> field_type == TIFF_DOUBLE
EXPR	217:7	217:22	10	value_count == 1
FIELD	217:7	217:7	11	value_count
LEAF_NODE	217:7	217:7	12	value_count
EQ_OPERATOR	217:19	217:19	11	==
LEAF_NODE	217:19	217:19	12	==
FIELD	217:22	217:22	11	1
LEAF_NODE	217:22	217:22	12	1
LEAF_NODE	217:24	217:24	10	&&
EXPR	217:27	217:46	10	fip -> field_type == TIFF_DOUBLE
FIELD	217:27	217:32	11	fip -> field_type
LEAF_NODE	217:27	217:27	12	fip
LEAF_NODE	217:30	217:30	12	->
LEAF_NODE	217:32	217:32	12	field_type
EQ_OPERATOR	217:43	217:43	11	==
LEAF_NODE	217:43	217:43	12	==
FIELD	217:46	217:46	11	TIFF_DOUBLE
LEAF_NODE	217:46	217:46	12	TIFF_DOUBLE
LEAF_NODE	217:57	217:57	7	)
STATEMENTS	217:59	222:3	7	
LEAF_NODE	217:59	217:59	8	{
STATEMENTS	218:4	221:4	8	
EXPR_STATEMENT	218:4	220:26	9	fprintf ( fd , "  Sample to Nits conversion factor: %.4e\n" , * ( ( double * ) raw_data ) ) ;
EXPR	218:4	218:4	10	fprintf ( fd , "  Sample to Nits conversion factor: %.4e\n" , * ( ( double * ) raw_data ) )
FUNCTION_CALL	218:4	220:25	11	fprintf ( fd , "  Sample to Nits conversion factor: %.4e\n" , * ( ( double * ) raw_data ) )
CALLEE	218:4	218:4	12	fprintf
LEAF_NODE	218:4	218:4	13	fprintf
LEAF_NODE	218:11	218:11	12	(
ARGUMENT	218:12	218:12	12	fd
FIELD	218:12	218:12	13	fd
LEAF_NODE	218:12	218:12	14	fd
LEAF_NODE	218:14	218:14	12	,
ARGUMENT	219:5	219:5	12	"  Sample to Nits conversion factor: %.4e\n"
FIELD	219:5	219:5	13	"  Sample to Nits conversion factor: %.4e\n"
LEAF_NODE	219:5	219:5	14	"  Sample to Nits conversion factor: %.4e\n"
LEAF_NODE	219:49	219:49	12	,
ARGUMENT	220:5	220:5	12	* ( ( double * ) raw_data )
UNARY_EXPR	220:5	220:24	13	* ( ( double * ) raw_data )
UNARY_OPERATOR	220:5	220:5	14	*
LEAF_NODE	220:5	220:5	15	*
LEAF_NODE	220:6	220:6	14	(
LEAF_NODE	220:7	220:7	14	(
TYPE_NAME	220:8	220:8	14	double
LEAF_NODE	220:8	220:8	15	double
LEAF_NODE	220:14	220:14	14	*
LEAF_NODE	220:15	220:15	14	)
FIELD	220:16	220:16	14	raw_data
LEAF_NODE	220:16	220:16	15	raw_data
LEAF_NODE	220:24	220:24	14	)
LEAF_NODE	220:25	220:25	12	)
LEAF_NODE	220:26	220:26	10	;
JUMP_STATEMENT	221:4	221:12	9	return 1 ;
KEYWORD	221:4	221:4	10	return
LEAF_NODE	221:4	221:4	11	return
DESTINATION	221:11	221:11	10	1
EXPR	221:11	221:11	11	1
FIELD	221:11	221:11	12	1
LEAF_NODE	221:11	221:11	13	1
LEAF_NODE	221:12	221:12	10	;
LEAF_NODE	222:3	222:3	8	}
JUMP_STATEMENT	223:3	223:11	6	return 0 ;
KEYWORD	223:3	223:3	7	return
LEAF_NODE	223:3	223:3	8	return
DESTINATION	223:10	223:10	7	0
EXPR	223:10	223:10	8	0
FIELD	223:10	223:10	9	0
LEAF_NODE	223:10	223:10	10	0
LEAF_NODE	223:11	223:11	7	;
LEAF_NODE	224:1	224:1	5	}
JUMP_STATEMENT	226:1	226:9	3	return 0 ;
KEYWORD	226:1	226:1	4	return
LEAF_NODE	226:1	226:1	5	return
DESTINATION	226:8	226:8	4	0
EXPR	226:8	226:8	5	0
FIELD	226:8	226:8	6	0
LEAF_NODE	226:8	226:8	7	0
LEAF_NODE	226:9	226:9	4	;
LEAF_NODE	227:0	227:0	2	}
FUNCTION_DEF	233:0	675:0	1	
RETURN_TYPE	233:0	233:0	2	void
TYPE_NAME	233:0	233:0	3	void
LEAF_NODE	233:0	233:0	4	void
FUNCTION_NAME	234:0	234:0	2	TIFFPrintDirectory
LEAF_NODE	234:0	234:0	3	TIFFPrintDirectory
PARAMETER_LIST	234:18	234:50	2	( TIFF * tif , FILE * fd , long flags )
LEAF_NODE	234:18	234:18	3	(
PARAMETER_DECL	234:19	234:25	3	TIFF * tif
TYPE	234:19	234:23	4	TIFF *
TYPE_NAME	234:19	234:19	5	TIFF
LEAF_NODE	234:19	234:19	6	TIFF
POINTER	234:23	234:23	5	*
LEAF_NODE	234:23	234:23	6	*
NAME	234:25	234:25	4	tif
LEAF_NODE	234:25	234:25	5	tif
LEAF_NODE	234:28	234:28	3	,
PARAMETER_DECL	234:30	234:36	3	FILE * fd
TYPE	234:30	234:34	4	FILE *
TYPE_NAME	234:30	234:30	5	FILE
LEAF_NODE	234:30	234:30	6	FILE
POINTER	234:34	234:34	5	*
LEAF_NODE	234:34	234:34	6	*
NAME	234:36	234:36	4	fd
LEAF_NODE	234:36	234:36	5	fd
LEAF_NODE	234:38	234:38	3	,
PARAMETER_DECL	234:40	234:45	3	long flags
TYPE	234:40	234:40	4	long
TYPE_NAME	234:40	234:40	5	long
LEAF_NODE	234:40	234:40	6	long
NAME	234:45	234:45	4	flags
LEAF_NODE	234:45	234:45	5	flags
LEAF_NODE	234:50	234:50	3	)
LEAF_NODE	235:0	235:0	2	{
STATEMENTS	236:1	655:1	2	
SIMPLE_DECL	236:1	236:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	236:1	236:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	236:1	236:15	5	TIFFDirectory *
TYPE_NAME	236:1	236:1	6	TIFFDirectory
LEAF_NODE	236:1	236:1	7	TIFFDirectory
POINTER	236:15	236:15	6	*
LEAF_NODE	236:15	236:15	7	*
NAME	236:16	236:16	5	td
LEAF_NODE	236:16	236:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	236:16	236:16	5	td = & tif -> tif_dir
ASSIGN	236:16	236:21	6	td = & tif -> tif_dir
LVAL	236:16	236:16	7	td
NAME	236:16	236:16	8	td
LEAF_NODE	236:16	236:16	9	td
ASSIGN_OP	236:19	236:19	7	=
LEAF_NODE	236:19	236:19	8	=
RVAL	236:21	236:21	7	& tif -> tif_dir
UNARY_EXPR	236:21	236:22	8	& tif -> tif_dir
UNARY_OPERATOR	236:21	236:21	9	&
LEAF_NODE	236:21	236:21	10	&
FIELD	236:22	236:27	9	tif -> tif_dir
LEAF_NODE	236:22	236:22	10	tif
LEAF_NODE	236:25	236:25	10	->
LEAF_NODE	236:27	236:27	10	tif_dir
LEAF_NODE	236:34	236:34	4	;
SIMPLE_DECL	237:1	237:10	3	char * sep ;
VAR_DECL	237:1	237:7	4	char * sep
TYPE	237:1	237:6	5	char *
TYPE_NAME	237:1	237:1	6	char
LEAF_NODE	237:1	237:1	7	char
POINTER	237:6	237:6	6	*
LEAF_NODE	237:6	237:6	7	*
NAME	237:7	237:7	5	sep
LEAF_NODE	237:7	237:7	6	sep
LEAF_NODE	237:10	237:10	4	;
SIMPLE_DECL	238:1	238:10	3	long l , long n ;
INIT_DECL_LIST	238:1	238:1	4	long l , long n
VAR_DECL	238:1	238:6	5	long l
TYPE	238:1	238:1	6	long
TYPE_NAME	238:1	238:1	7	long
LEAF_NODE	238:1	238:1	8	long
NAME	238:6	238:6	6	l
LEAF_NODE	238:6	238:6	7	l
LEAF_NODE	238:7	238:7	5	,
VAR_DECL	238:1	238:9	5	long n
TYPE	238:1	238:1	6	long
TYPE_NAME	238:1	238:1	7	long
LEAF_NODE	238:1	238:1	8	long
NAME	238:9	238:9	6	n
LEAF_NODE	238:9	238:9	7	n
LEAF_NODE	238:10	238:10	4	;
EXPR_STATEMENT	241:1	243:37	3	fprintf ( fd , "TIFF Directory at offset 0x%I64x (%I64u)\n" , ( unsigned __int64 ) tif -> tif_diroff , ( unsigned __int64 ) tif -> tif_diroff ) ;
EXPR	241:1	241:1	4	fprintf ( fd , "TIFF Directory at offset 0x%I64x (%I64u)\n" , ( unsigned __int64 ) tif -> tif_diroff , ( unsigned __int64 ) tif -> tif_diroff )
FUNCTION_CALL	241:1	243:36	5	fprintf ( fd , "TIFF Directory at offset 0x%I64x (%I64u)\n" , ( unsigned __int64 ) tif -> tif_diroff , ( unsigned __int64 ) tif -> tif_diroff )
CALLEE	241:1	241:1	6	fprintf
LEAF_NODE	241:1	241:1	7	fprintf
LEAF_NODE	241:8	241:8	6	(
ARGUMENT	241:9	241:9	6	fd
FIELD	241:9	241:9	7	fd
LEAF_NODE	241:9	241:9	8	fd
LEAF_NODE	241:11	241:11	6	,
ARGUMENT	241:13	241:13	6	"TIFF Directory at offset 0x%I64x (%I64u)\n"
FIELD	241:13	241:13	7	"TIFF Directory at offset 0x%I64x (%I64u)\n"
LEAF_NODE	241:13	241:13	8	"TIFF Directory at offset 0x%I64x (%I64u)\n"
LEAF_NODE	241:57	241:57	6	,
ARGUMENT	242:2	242:21	6	( unsigned __int64 ) tif -> tif_diroff
LEAF_NODE	242:2	242:2	7	(
TYPE_NAME	242:3	242:12	7	unsigned __int64
LEAF_NODE	242:3	242:3	8	unsigned
LEAF_NODE	242:12	242:12	8	__int64
LEAF_NODE	242:19	242:19	7	)
FIELD	242:21	242:26	7	tif -> tif_diroff
LEAF_NODE	242:21	242:21	8	tif
LEAF_NODE	242:24	242:24	8	->
LEAF_NODE	242:26	242:26	8	tif_diroff
LEAF_NODE	242:36	242:36	6	,
ARGUMENT	243:2	243:21	6	( unsigned __int64 ) tif -> tif_diroff
LEAF_NODE	243:2	243:2	7	(
TYPE_NAME	243:3	243:12	7	unsigned __int64
LEAF_NODE	243:3	243:3	8	unsigned
LEAF_NODE	243:12	243:12	8	__int64
LEAF_NODE	243:19	243:19	7	)
FIELD	243:21	243:26	7	tif -> tif_diroff
LEAF_NODE	243:21	243:21	8	tif
LEAF_NODE	243:24	243:24	8	->
LEAF_NODE	243:26	243:26	8	tif_diroff
LEAF_NODE	243:36	243:36	6	)
LEAF_NODE	243:37	243:37	4	;
LEAF_NODE	245:1	245:1	3	fprintf
LEAF_NODE	245:8	245:8	3	(
LEAF_NODE	245:9	245:9	3	fd
LEAF_NODE	245:11	245:11	3	,
LEAF_NODE	245:13	245:13	3	"TIFF Directory at offset 0x%llx (%llu)\n"
LEAF_NODE	245:55	245:55	3	,
LEAF_NODE	246:2	246:2	3	(
LEAF_NODE	246:3	246:3	3	unsigned
LEAF_NODE	246:12	246:12	3	long
LEAF_NODE	246:17	246:17	3	long
LEAF_NODE	246:21	246:21	3	)
LEAF_NODE	246:23	246:23	3	tif
LEAF_NODE	246:26	246:26	3	->
LEAF_NODE	246:28	246:28	3	tif_diroff
LEAF_NODE	246:38	246:38	3	,
LEAF_NODE	247:2	247:2	3	(
LEAF_NODE	247:3	247:3	3	unsigned
LEAF_NODE	247:12	247:12	3	long
LEAF_NODE	247:17	247:17	3	long
LEAF_NODE	247:21	247:21	3	)
LEAF_NODE	247:23	247:23	3	tif
LEAF_NODE	247:26	247:26	3	->
LEAF_NODE	247:28	247:28	3	tif_diroff
LEAF_NODE	247:38	247:38	3	)
LEAF_NODE	247:39	247:39	3	;
SELECTION	249:1	249:42	3	
KEYWORD	249:1	249:1	4	if
LEAF_NODE	249:1	249:1	5	if
LEAF_NODE	249:4	249:4	4	(
CONDITION	249:5	249:5	4	TIFFFieldSet ( tif , FIELD_SUBFILETYPE )
EXPR	249:5	249:5	5	TIFFFieldSet ( tif , FIELD_SUBFILETYPE )
FUNCTION_CALL	249:5	249:39	6	TIFFFieldSet ( tif , FIELD_SUBFILETYPE )
CALLEE	249:5	249:5	7	TIFFFieldSet
LEAF_NODE	249:5	249:5	8	TIFFFieldSet
LEAF_NODE	249:17	249:17	7	(
ARGUMENT	249:18	249:18	7	tif
FIELD	249:18	249:18	8	tif
LEAF_NODE	249:18	249:18	9	tif
LEAF_NODE	249:21	249:21	7	,
ARGUMENT	249:22	249:22	7	FIELD_SUBFILETYPE
FIELD	249:22	249:22	8	FIELD_SUBFILETYPE
LEAF_NODE	249:22	249:22	9	FIELD_SUBFILETYPE
LEAF_NODE	249:39	249:39	7	)
LEAF_NODE	249:40	249:40	4	)
STATEMENTS	249:42	264:1	4	
LEAF_NODE	249:42	249:42	5	{
STATEMENTS	250:2	262:2	5	
EXPR_STATEMENT	250:2	250:32	6	fprintf ( fd , "  Subfile Type:" ) ;
EXPR	250:2	250:2	7	fprintf ( fd , "  Subfile Type:" )
FUNCTION_CALL	250:2	250:31	8	fprintf ( fd , "  Subfile Type:" )
CALLEE	250:2	250:2	9	fprintf
LEAF_NODE	250:2	250:2	10	fprintf
LEAF_NODE	250:9	250:9	9	(
ARGUMENT	250:10	250:10	9	fd
FIELD	250:10	250:10	10	fd
LEAF_NODE	250:10	250:10	11	fd
LEAF_NODE	250:12	250:12	9	,
ARGUMENT	250:14	250:14	9	"  Subfile Type:"
FIELD	250:14	250:14	10	"  Subfile Type:"
LEAF_NODE	250:14	250:14	11	"  Subfile Type:"
LEAF_NODE	250:31	250:31	9	)
LEAF_NODE	250:32	250:32	7	;
EXPR_STATEMENT	251:2	251:11	6	sep = " " ;
EXPR	251:2	251:2	7	sep = " "
ASSIGN	251:2	251:8	8	sep = " "
LVAL	251:2	251:2	9	sep
FIELD	251:2	251:2	10	sep
LEAF_NODE	251:2	251:2	11	sep
ASSIGN_OP	251:6	251:6	9	=
LEAF_NODE	251:6	251:6	10	=
RVAL	251:8	251:8	9	" "
FIELD	251:8	251:8	10	" "
LEAF_NODE	251:8	251:8	11	" "
LEAF_NODE	251:11	251:11	7	;
SELECTION	252:2	252:50	6	
KEYWORD	252:2	252:2	7	if
LEAF_NODE	252:2	252:2	8	if
LEAF_NODE	252:5	252:5	7	(
CONDITION	252:6	252:6	7	td -> td_subfiletype & FILETYPE_REDUCEDIMAGE
EXPR	252:6	252:27	8	td -> td_subfiletype & FILETYPE_REDUCEDIMAGE
FIELD	252:6	252:10	9	td -> td_subfiletype
LEAF_NODE	252:6	252:6	10	td
LEAF_NODE	252:8	252:8	10	->
LEAF_NODE	252:10	252:10	10	td_subfiletype
LEAF_NODE	252:25	252:25	9	&
FIELD	252:27	252:27	9	FILETYPE_REDUCEDIMAGE
LEAF_NODE	252:27	252:27	10	FILETYPE_REDUCEDIMAGE
LEAF_NODE	252:48	252:48	7	)
STATEMENTS	252:50	255:2	7	
LEAF_NODE	252:50	252:50	8	{
STATEMENTS	253:3	254:3	8	
EXPR_STATEMENT	253:3	253:49	9	fprintf ( fd , "%sreduced-resolution image" , sep ) ;
EXPR	253:3	253:3	10	fprintf ( fd , "%sreduced-resolution image" , sep )
FUNCTION_CALL	253:3	253:48	11	fprintf ( fd , "%sreduced-resolution image" , sep )
CALLEE	253:3	253:3	12	fprintf
LEAF_NODE	253:3	253:3	13	fprintf
LEAF_NODE	253:10	253:10	12	(
ARGUMENT	253:11	253:11	12	fd
FIELD	253:11	253:11	13	fd
LEAF_NODE	253:11	253:11	14	fd
LEAF_NODE	253:13	253:13	12	,
ARGUMENT	253:15	253:15	12	"%sreduced-resolution image"
FIELD	253:15	253:15	13	"%sreduced-resolution image"
LEAF_NODE	253:15	253:15	14	"%sreduced-resolution image"
LEAF_NODE	253:43	253:43	12	,
ARGUMENT	253:45	253:45	12	sep
FIELD	253:45	253:45	13	sep
LEAF_NODE	253:45	253:45	14	sep
LEAF_NODE	253:48	253:48	12	)
LEAF_NODE	253:49	253:49	10	;
EXPR_STATEMENT	254:3	254:12	9	sep = "/" ;
EXPR	254:3	254:3	10	sep = "/"
ASSIGN	254:3	254:9	11	sep = "/"
LVAL	254:3	254:3	12	sep
FIELD	254:3	254:3	13	sep
LEAF_NODE	254:3	254:3	14	sep
ASSIGN_OP	254:7	254:7	12	=
LEAF_NODE	254:7	254:7	13	=
RVAL	254:9	254:9	12	"/"
FIELD	254:9	254:9	13	"/"
LEAF_NODE	254:9	254:9	14	"/"
LEAF_NODE	254:12	254:12	10	;
LEAF_NODE	255:2	255:2	8	}
SELECTION	256:2	256:42	6	
KEYWORD	256:2	256:2	7	if
LEAF_NODE	256:2	256:2	8	if
LEAF_NODE	256:5	256:5	7	(
CONDITION	256:6	256:6	7	td -> td_subfiletype & FILETYPE_PAGE
EXPR	256:6	256:27	8	td -> td_subfiletype & FILETYPE_PAGE
FIELD	256:6	256:10	9	td -> td_subfiletype
LEAF_NODE	256:6	256:6	10	td
LEAF_NODE	256:8	256:8	10	->
LEAF_NODE	256:10	256:10	10	td_subfiletype
LEAF_NODE	256:25	256:25	9	&
FIELD	256:27	256:27	9	FILETYPE_PAGE
LEAF_NODE	256:27	256:27	10	FILETYPE_PAGE
LEAF_NODE	256:40	256:40	7	)
STATEMENTS	256:42	259:2	7	
LEAF_NODE	256:42	256:42	8	{
STATEMENTS	257:3	258:3	8	
EXPR_STATEMENT	257:3	257:44	9	fprintf ( fd , "%smulti-page document" , sep ) ;
EXPR	257:3	257:3	10	fprintf ( fd , "%smulti-page document" , sep )
FUNCTION_CALL	257:3	257:43	11	fprintf ( fd , "%smulti-page document" , sep )
CALLEE	257:3	257:3	12	fprintf
LEAF_NODE	257:3	257:3	13	fprintf
LEAF_NODE	257:10	257:10	12	(
ARGUMENT	257:11	257:11	12	fd
FIELD	257:11	257:11	13	fd
LEAF_NODE	257:11	257:11	14	fd
LEAF_NODE	257:13	257:13	12	,
ARGUMENT	257:15	257:15	12	"%smulti-page document"
FIELD	257:15	257:15	13	"%smulti-page document"
LEAF_NODE	257:15	257:15	14	"%smulti-page document"
LEAF_NODE	257:38	257:38	12	,
ARGUMENT	257:40	257:40	12	sep
FIELD	257:40	257:40	13	sep
LEAF_NODE	257:40	257:40	14	sep
LEAF_NODE	257:43	257:43	12	)
LEAF_NODE	257:44	257:44	10	;
EXPR_STATEMENT	258:3	258:12	9	sep = "/" ;
EXPR	258:3	258:3	10	sep = "/"
ASSIGN	258:3	258:9	11	sep = "/"
LVAL	258:3	258:3	12	sep
FIELD	258:3	258:3	13	sep
LEAF_NODE	258:3	258:3	14	sep
ASSIGN_OP	258:7	258:7	12	=
LEAF_NODE	258:7	258:7	13	=
RVAL	258:9	258:9	12	"/"
FIELD	258:9	258:9	13	"/"
LEAF_NODE	258:9	258:9	14	"/"
LEAF_NODE	258:12	258:12	10	;
LEAF_NODE	259:2	259:2	8	}
SELECTION	260:2	261:3	6	
KEYWORD	260:2	260:2	7	if
LEAF_NODE	260:2	260:2	8	if
LEAF_NODE	260:5	260:5	7	(
CONDITION	260:6	260:6	7	td -> td_subfiletype & FILETYPE_MASK
EXPR	260:6	260:27	8	td -> td_subfiletype & FILETYPE_MASK
FIELD	260:6	260:10	9	td -> td_subfiletype
LEAF_NODE	260:6	260:6	10	td
LEAF_NODE	260:8	260:8	10	->
LEAF_NODE	260:10	260:10	10	td_subfiletype
LEAF_NODE	260:25	260:25	9	&
FIELD	260:27	260:27	9	FILETYPE_MASK
LEAF_NODE	260:27	260:27	10	FILETYPE_MASK
LEAF_NODE	260:40	260:40	7	)
STATEMENTS	261:3	261:3	7	
EXPR_STATEMENT	261:3	261:42	8	fprintf ( fd , "%stransparency mask" , sep ) ;
EXPR	261:3	261:3	9	fprintf ( fd , "%stransparency mask" , sep )
FUNCTION_CALL	261:3	261:41	10	fprintf ( fd , "%stransparency mask" , sep )
CALLEE	261:3	261:3	11	fprintf
LEAF_NODE	261:3	261:3	12	fprintf
LEAF_NODE	261:10	261:10	11	(
ARGUMENT	261:11	261:11	11	fd
FIELD	261:11	261:11	12	fd
LEAF_NODE	261:11	261:11	13	fd
LEAF_NODE	261:13	261:13	11	,
ARGUMENT	261:15	261:15	11	"%stransparency mask"
FIELD	261:15	261:15	12	"%stransparency mask"
LEAF_NODE	261:15	261:15	13	"%stransparency mask"
LEAF_NODE	261:36	261:36	11	,
ARGUMENT	261:38	261:38	11	sep
FIELD	261:38	261:38	12	sep
LEAF_NODE	261:38	261:38	13	sep
LEAF_NODE	261:41	261:41	11	)
LEAF_NODE	261:42	261:42	9	;
EXPR_STATEMENT	262:2	263:68	6	fprintf ( fd , " (%lu = 0x%lx)\n" , ( unsigned long ) td -> td_subfiletype , ( long ) td -> td_subfiletype ) ;
EXPR	262:2	262:2	7	fprintf ( fd , " (%lu = 0x%lx)\n" , ( unsigned long ) td -> td_subfiletype , ( long ) td -> td_subfiletype )
FUNCTION_CALL	262:2	263:67	8	fprintf ( fd , " (%lu = 0x%lx)\n" , ( unsigned long ) td -> td_subfiletype , ( long ) td -> td_subfiletype )
CALLEE	262:2	262:2	9	fprintf
LEAF_NODE	262:2	262:2	10	fprintf
LEAF_NODE	262:9	262:9	9	(
ARGUMENT	262:10	262:10	9	fd
FIELD	262:10	262:10	10	fd
LEAF_NODE	262:10	262:10	11	fd
LEAF_NODE	262:12	262:12	9	,
ARGUMENT	262:14	262:14	9	" (%lu = 0x%lx)\n"
FIELD	262:14	262:14	10	" (%lu = 0x%lx)\n"
LEAF_NODE	262:14	262:14	11	" (%lu = 0x%lx)\n"
LEAF_NODE	262:32	262:32	9	,
ARGUMENT	263:6	263:22	9	( unsigned long ) td -> td_subfiletype
LEAF_NODE	263:6	263:6	10	(
TYPE_NAME	263:7	263:16	10	unsigned long
LEAF_NODE	263:7	263:7	11	unsigned
LEAF_NODE	263:16	263:16	11	long
LEAF_NODE	263:20	263:20	10	)
FIELD	263:22	263:26	10	td -> td_subfiletype
LEAF_NODE	263:22	263:22	11	td
LEAF_NODE	263:24	263:24	11	->
LEAF_NODE	263:26	263:26	11	td_subfiletype
LEAF_NODE	263:40	263:40	9	,
ARGUMENT	263:42	263:49	9	( long ) td -> td_subfiletype
LEAF_NODE	263:42	263:42	10	(
TYPE_NAME	263:43	263:43	10	long
LEAF_NODE	263:43	263:43	11	long
LEAF_NODE	263:47	263:47	10	)
FIELD	263:49	263:53	10	td -> td_subfiletype
LEAF_NODE	263:49	263:49	11	td
LEAF_NODE	263:51	263:51	11	->
LEAF_NODE	263:53	263:53	11	td_subfiletype
LEAF_NODE	263:67	263:67	9	)
LEAF_NODE	263:68	263:68	7	;
LEAF_NODE	264:1	264:1	5	}
SELECTION	265:1	265:46	3	
KEYWORD	265:1	265:1	4	if
LEAF_NODE	265:1	265:1	5	if
LEAF_NODE	265:4	265:4	4	(
CONDITION	265:5	265:5	4	TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
EXPR	265:5	265:5	5	TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
FUNCTION_CALL	265:5	265:43	6	TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
CALLEE	265:5	265:5	7	TIFFFieldSet
LEAF_NODE	265:5	265:5	8	TIFFFieldSet
LEAF_NODE	265:17	265:17	7	(
ARGUMENT	265:18	265:18	7	tif
FIELD	265:18	265:18	8	tif
LEAF_NODE	265:18	265:18	9	tif
LEAF_NODE	265:21	265:21	7	,
ARGUMENT	265:22	265:22	7	FIELD_IMAGEDIMENSIONS
FIELD	265:22	265:22	8	FIELD_IMAGEDIMENSIONS
LEAF_NODE	265:22	265:22	9	FIELD_IMAGEDIMENSIONS
LEAF_NODE	265:43	265:43	7	)
LEAF_NODE	265:44	265:44	4	)
STATEMENTS	265:46	272:1	4	
LEAF_NODE	265:46	265:46	5	{
STATEMENTS	266:2	271:2	5	
EXPR_STATEMENT	266:2	267:76	6	fprintf ( fd , "  Image Width: %lu Image Length: %lu" , ( unsigned long ) td -> td_imagewidth , ( unsigned long ) td -> td_imagelength ) ;
EXPR	266:2	266:2	7	fprintf ( fd , "  Image Width: %lu Image Length: %lu" , ( unsigned long ) td -> td_imagewidth , ( unsigned long ) td -> td_imagelength )
FUNCTION_CALL	266:2	267:75	8	fprintf ( fd , "  Image Width: %lu Image Length: %lu" , ( unsigned long ) td -> td_imagewidth , ( unsigned long ) td -> td_imagelength )
CALLEE	266:2	266:2	9	fprintf
LEAF_NODE	266:2	266:2	10	fprintf
LEAF_NODE	266:9	266:9	9	(
ARGUMENT	266:10	266:10	9	fd
FIELD	266:10	266:10	10	fd
LEAF_NODE	266:10	266:10	11	fd
LEAF_NODE	266:12	266:12	9	,
ARGUMENT	266:14	266:14	9	"  Image Width: %lu Image Length: %lu"
FIELD	266:14	266:14	10	"  Image Width: %lu Image Length: %lu"
LEAF_NODE	266:14	266:14	11	"  Image Width: %lu Image Length: %lu"
LEAF_NODE	266:52	266:52	9	,
ARGUMENT	267:6	267:22	9	( unsigned long ) td -> td_imagewidth
LEAF_NODE	267:6	267:6	10	(
TYPE_NAME	267:7	267:16	10	unsigned long
LEAF_NODE	267:7	267:7	11	unsigned
LEAF_NODE	267:16	267:16	11	long
LEAF_NODE	267:20	267:20	10	)
FIELD	267:22	267:26	10	td -> td_imagewidth
LEAF_NODE	267:22	267:22	11	td
LEAF_NODE	267:24	267:24	11	->
LEAF_NODE	267:26	267:26	11	td_imagewidth
LEAF_NODE	267:39	267:39	9	,
ARGUMENT	267:41	267:57	9	( unsigned long ) td -> td_imagelength
LEAF_NODE	267:41	267:41	10	(
TYPE_NAME	267:42	267:51	10	unsigned long
LEAF_NODE	267:42	267:42	11	unsigned
LEAF_NODE	267:51	267:51	11	long
LEAF_NODE	267:55	267:55	10	)
FIELD	267:57	267:61	10	td -> td_imagelength
LEAF_NODE	267:57	267:57	11	td
LEAF_NODE	267:59	267:59	11	->
LEAF_NODE	267:61	267:61	11	td_imagelength
LEAF_NODE	267:75	267:75	9	)
LEAF_NODE	267:76	267:76	7	;
SELECTION	268:2	269:3	6	
KEYWORD	268:2	268:2	7	if
LEAF_NODE	268:2	268:2	8	if
LEAF_NODE	268:5	268:5	7	(
CONDITION	268:6	268:6	7	TIFFFieldSet ( tif , FIELD_IMAGEDEPTH )
EXPR	268:6	268:6	8	TIFFFieldSet ( tif , FIELD_IMAGEDEPTH )
FUNCTION_CALL	268:6	268:39	9	TIFFFieldSet ( tif , FIELD_IMAGEDEPTH )
CALLEE	268:6	268:6	10	TIFFFieldSet
LEAF_NODE	268:6	268:6	11	TIFFFieldSet
LEAF_NODE	268:18	268:18	10	(
ARGUMENT	268:19	268:19	10	tif
FIELD	268:19	268:19	11	tif
LEAF_NODE	268:19	268:19	12	tif
LEAF_NODE	268:22	268:22	10	,
ARGUMENT	268:23	268:23	10	FIELD_IMAGEDEPTH
FIELD	268:23	268:23	11	FIELD_IMAGEDEPTH
LEAF_NODE	268:23	268:23	12	FIELD_IMAGEDEPTH
LEAF_NODE	268:39	268:39	10	)
LEAF_NODE	268:40	268:40	7	)
STATEMENTS	269:3	269:3	7	
EXPR_STATEMENT	269:3	270:41	8	fprintf ( fd , " Image Depth: %lu" , ( unsigned long ) td -> td_imagedepth ) ;
EXPR	269:3	269:3	9	fprintf ( fd , " Image Depth: %lu" , ( unsigned long ) td -> td_imagedepth )
FUNCTION_CALL	269:3	270:40	10	fprintf ( fd , " Image Depth: %lu" , ( unsigned long ) td -> td_imagedepth )
CALLEE	269:3	269:3	11	fprintf
LEAF_NODE	269:3	269:3	12	fprintf
LEAF_NODE	269:10	269:10	11	(
ARGUMENT	269:11	269:11	11	fd
FIELD	269:11	269:11	12	fd
LEAF_NODE	269:11	269:11	13	fd
LEAF_NODE	269:13	269:13	11	,
ARGUMENT	269:15	269:15	11	" Image Depth: %lu"
FIELD	269:15	269:15	12	" Image Depth: %lu"
LEAF_NODE	269:15	269:15	13	" Image Depth: %lu"
LEAF_NODE	269:34	269:34	11	,
ARGUMENT	270:7	270:23	11	( unsigned long ) td -> td_imagedepth
LEAF_NODE	270:7	270:7	12	(
TYPE_NAME	270:8	270:17	12	unsigned long
LEAF_NODE	270:8	270:8	13	unsigned
LEAF_NODE	270:17	270:17	13	long
LEAF_NODE	270:21	270:21	12	)
FIELD	270:23	270:27	12	td -> td_imagedepth
LEAF_NODE	270:23	270:23	13	td
LEAF_NODE	270:25	270:25	13	->
LEAF_NODE	270:27	270:27	13	td_imagedepth
LEAF_NODE	270:40	270:40	11	)
LEAF_NODE	270:41	270:41	9	;
EXPR_STATEMENT	271:2	271:19	6	fprintf ( fd , "\n" ) ;
EXPR	271:2	271:2	7	fprintf ( fd , "\n" )
FUNCTION_CALL	271:2	271:18	8	fprintf ( fd , "\n" )
CALLEE	271:2	271:2	9	fprintf
LEAF_NODE	271:2	271:2	10	fprintf
LEAF_NODE	271:9	271:9	9	(
ARGUMENT	271:10	271:10	9	fd
FIELD	271:10	271:10	10	fd
LEAF_NODE	271:10	271:10	11	fd
LEAF_NODE	271:12	271:12	9	,
ARGUMENT	271:14	271:14	9	"\n"
FIELD	271:14	271:14	10	"\n"
LEAF_NODE	271:14	271:14	11	"\n"
LEAF_NODE	271:18	271:18	9	)
LEAF_NODE	271:19	271:19	7	;
LEAF_NODE	272:1	272:1	5	}
SELECTION	273:1	273:45	3	
KEYWORD	273:1	273:1	4	if
LEAF_NODE	273:1	273:1	5	if
LEAF_NODE	273:4	273:4	4	(
CONDITION	273:5	273:5	4	TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
EXPR	273:5	273:5	5	TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
FUNCTION_CALL	273:5	273:42	6	TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
CALLEE	273:5	273:5	7	TIFFFieldSet
LEAF_NODE	273:5	273:5	8	TIFFFieldSet
LEAF_NODE	273:17	273:17	7	(
ARGUMENT	273:18	273:18	7	tif
FIELD	273:18	273:18	8	tif
LEAF_NODE	273:18	273:18	9	tif
LEAF_NODE	273:21	273:21	7	,
ARGUMENT	273:22	273:22	7	FIELD_TILEDIMENSIONS
FIELD	273:22	273:22	8	FIELD_TILEDIMENSIONS
LEAF_NODE	273:22	273:22	9	FIELD_TILEDIMENSIONS
LEAF_NODE	273:42	273:42	7	)
LEAF_NODE	273:43	273:43	4	)
STATEMENTS	273:45	280:1	4	
LEAF_NODE	273:45	273:45	5	{
STATEMENTS	274:2	279:2	5	
EXPR_STATEMENT	274:2	275:74	6	fprintf ( fd , "  Tile Width: %lu Tile Length: %lu" , ( unsigned long ) td -> td_tilewidth , ( unsigned long ) td -> td_tilelength ) ;
EXPR	274:2	274:2	7	fprintf ( fd , "  Tile Width: %lu Tile Length: %lu" , ( unsigned long ) td -> td_tilewidth , ( unsigned long ) td -> td_tilelength )
FUNCTION_CALL	274:2	275:73	8	fprintf ( fd , "  Tile Width: %lu Tile Length: %lu" , ( unsigned long ) td -> td_tilewidth , ( unsigned long ) td -> td_tilelength )
CALLEE	274:2	274:2	9	fprintf
LEAF_NODE	274:2	274:2	10	fprintf
LEAF_NODE	274:9	274:9	9	(
ARGUMENT	274:10	274:10	9	fd
FIELD	274:10	274:10	10	fd
LEAF_NODE	274:10	274:10	11	fd
LEAF_NODE	274:12	274:12	9	,
ARGUMENT	274:14	274:14	9	"  Tile Width: %lu Tile Length: %lu"
FIELD	274:14	274:14	10	"  Tile Width: %lu Tile Length: %lu"
LEAF_NODE	274:14	274:14	11	"  Tile Width: %lu Tile Length: %lu"
LEAF_NODE	274:50	274:50	9	,
ARGUMENT	275:6	275:22	9	( unsigned long ) td -> td_tilewidth
LEAF_NODE	275:6	275:6	10	(
TYPE_NAME	275:7	275:16	10	unsigned long
LEAF_NODE	275:7	275:7	11	unsigned
LEAF_NODE	275:16	275:16	11	long
LEAF_NODE	275:20	275:20	10	)
FIELD	275:22	275:26	10	td -> td_tilewidth
LEAF_NODE	275:22	275:22	11	td
LEAF_NODE	275:24	275:24	11	->
LEAF_NODE	275:26	275:26	11	td_tilewidth
LEAF_NODE	275:38	275:38	9	,
ARGUMENT	275:40	275:56	9	( unsigned long ) td -> td_tilelength
LEAF_NODE	275:40	275:40	10	(
TYPE_NAME	275:41	275:50	10	unsigned long
LEAF_NODE	275:41	275:41	11	unsigned
LEAF_NODE	275:50	275:50	11	long
LEAF_NODE	275:54	275:54	10	)
FIELD	275:56	275:60	10	td -> td_tilelength
LEAF_NODE	275:56	275:56	11	td
LEAF_NODE	275:58	275:58	11	->
LEAF_NODE	275:60	275:60	11	td_tilelength
LEAF_NODE	275:73	275:73	9	)
LEAF_NODE	275:74	275:74	7	;
SELECTION	276:2	277:3	6	
KEYWORD	276:2	276:2	7	if
LEAF_NODE	276:2	276:2	8	if
LEAF_NODE	276:5	276:5	7	(
CONDITION	276:6	276:6	7	TIFFFieldSet ( tif , FIELD_TILEDEPTH )
EXPR	276:6	276:6	8	TIFFFieldSet ( tif , FIELD_TILEDEPTH )
FUNCTION_CALL	276:6	276:38	9	TIFFFieldSet ( tif , FIELD_TILEDEPTH )
CALLEE	276:6	276:6	10	TIFFFieldSet
LEAF_NODE	276:6	276:6	11	TIFFFieldSet
LEAF_NODE	276:18	276:18	10	(
ARGUMENT	276:19	276:19	10	tif
FIELD	276:19	276:19	11	tif
LEAF_NODE	276:19	276:19	12	tif
LEAF_NODE	276:22	276:22	10	,
ARGUMENT	276:23	276:23	10	FIELD_TILEDEPTH
FIELD	276:23	276:23	11	FIELD_TILEDEPTH
LEAF_NODE	276:23	276:23	12	FIELD_TILEDEPTH
LEAF_NODE	276:38	276:38	10	)
LEAF_NODE	276:39	276:39	7	)
STATEMENTS	277:3	277:3	7	
EXPR_STATEMENT	277:3	278:40	8	fprintf ( fd , " Tile Depth: %lu" , ( unsigned long ) td -> td_tiledepth ) ;
EXPR	277:3	277:3	9	fprintf ( fd , " Tile Depth: %lu" , ( unsigned long ) td -> td_tiledepth )
FUNCTION_CALL	277:3	278:39	10	fprintf ( fd , " Tile Depth: %lu" , ( unsigned long ) td -> td_tiledepth )
CALLEE	277:3	277:3	11	fprintf
LEAF_NODE	277:3	277:3	12	fprintf
LEAF_NODE	277:10	277:10	11	(
ARGUMENT	277:11	277:11	11	fd
FIELD	277:11	277:11	12	fd
LEAF_NODE	277:11	277:11	13	fd
LEAF_NODE	277:13	277:13	11	,
ARGUMENT	277:15	277:15	11	" Tile Depth: %lu"
FIELD	277:15	277:15	12	" Tile Depth: %lu"
LEAF_NODE	277:15	277:15	13	" Tile Depth: %lu"
LEAF_NODE	277:33	277:33	11	,
ARGUMENT	278:7	278:23	11	( unsigned long ) td -> td_tiledepth
LEAF_NODE	278:7	278:7	12	(
TYPE_NAME	278:8	278:17	12	unsigned long
LEAF_NODE	278:8	278:8	13	unsigned
LEAF_NODE	278:17	278:17	13	long
LEAF_NODE	278:21	278:21	12	)
FIELD	278:23	278:27	12	td -> td_tiledepth
LEAF_NODE	278:23	278:23	13	td
LEAF_NODE	278:25	278:25	13	->
LEAF_NODE	278:27	278:27	13	td_tiledepth
LEAF_NODE	278:39	278:39	11	)
LEAF_NODE	278:40	278:40	9	;
EXPR_STATEMENT	279:2	279:19	6	fprintf ( fd , "\n" ) ;
EXPR	279:2	279:2	7	fprintf ( fd , "\n" )
FUNCTION_CALL	279:2	279:18	8	fprintf ( fd , "\n" )
CALLEE	279:2	279:2	9	fprintf
LEAF_NODE	279:2	279:2	10	fprintf
LEAF_NODE	279:9	279:9	9	(
ARGUMENT	279:10	279:10	9	fd
FIELD	279:10	279:10	10	fd
LEAF_NODE	279:10	279:10	11	fd
LEAF_NODE	279:12	279:12	9	,
ARGUMENT	279:14	279:14	9	"\n"
FIELD	279:14	279:14	10	"\n"
LEAF_NODE	279:14	279:14	11	"\n"
LEAF_NODE	279:18	279:18	9	)
LEAF_NODE	279:19	279:19	7	;
LEAF_NODE	280:1	280:1	5	}
SELECTION	281:1	281:41	3	
KEYWORD	281:1	281:1	4	if
LEAF_NODE	281:1	281:1	5	if
LEAF_NODE	281:4	281:4	4	(
CONDITION	281:5	281:5	4	TIFFFieldSet ( tif , FIELD_RESOLUTION )
EXPR	281:5	281:5	5	TIFFFieldSet ( tif , FIELD_RESOLUTION )
FUNCTION_CALL	281:5	281:38	6	TIFFFieldSet ( tif , FIELD_RESOLUTION )
CALLEE	281:5	281:5	7	TIFFFieldSet
LEAF_NODE	281:5	281:5	8	TIFFFieldSet
LEAF_NODE	281:17	281:17	7	(
ARGUMENT	281:18	281:18	7	tif
FIELD	281:18	281:18	8	tif
LEAF_NODE	281:18	281:18	9	tif
LEAF_NODE	281:21	281:21	7	,
ARGUMENT	281:22	281:22	7	FIELD_RESOLUTION
FIELD	281:22	281:22	8	FIELD_RESOLUTION
LEAF_NODE	281:22	281:22	9	FIELD_RESOLUTION
LEAF_NODE	281:38	281:38	7	)
LEAF_NODE	281:39	281:39	4	)
STATEMENTS	281:41	303:1	4	
LEAF_NODE	281:41	281:41	5	{
STATEMENTS	282:2	302:2	5	
EXPR_STATEMENT	282:2	283:45	6	fprintf ( fd , "  Resolution: %g, %g" , td -> td_xresolution , td -> td_yresolution ) ;
EXPR	282:2	282:2	7	fprintf ( fd , "  Resolution: %g, %g" , td -> td_xresolution , td -> td_yresolution )
FUNCTION_CALL	282:2	283:44	8	fprintf ( fd , "  Resolution: %g, %g" , td -> td_xresolution , td -> td_yresolution )
CALLEE	282:2	282:2	9	fprintf
LEAF_NODE	282:2	282:2	10	fprintf
LEAF_NODE	282:9	282:9	9	(
ARGUMENT	282:10	282:10	9	fd
FIELD	282:10	282:10	10	fd
LEAF_NODE	282:10	282:10	11	fd
LEAF_NODE	282:12	282:12	9	,
ARGUMENT	282:14	282:14	9	"  Resolution: %g, %g"
FIELD	282:14	282:14	10	"  Resolution: %g, %g"
LEAF_NODE	282:14	282:14	11	"  Resolution: %g, %g"
LEAF_NODE	282:36	282:36	9	,
ARGUMENT	283:6	283:6	9	td -> td_xresolution
FIELD	283:6	283:10	10	td -> td_xresolution
LEAF_NODE	283:6	283:6	11	td
LEAF_NODE	283:8	283:8	11	->
LEAF_NODE	283:10	283:10	11	td_xresolution
LEAF_NODE	283:24	283:24	9	,
ARGUMENT	283:26	283:26	9	td -> td_yresolution
FIELD	283:26	283:30	10	td -> td_yresolution
LEAF_NODE	283:26	283:26	11	td
LEAF_NODE	283:28	283:28	11	->
LEAF_NODE	283:30	283:30	11	td_yresolution
LEAF_NODE	283:44	283:44	9	)
LEAF_NODE	283:45	283:45	7	;
SELECTION	284:2	284:46	6	
KEYWORD	284:2	284:2	7	if
LEAF_NODE	284:2	284:2	8	if
LEAF_NODE	284:5	284:5	7	(
CONDITION	284:6	284:6	7	TIFFFieldSet ( tif , FIELD_RESOLUTIONUNIT )
EXPR	284:6	284:6	8	TIFFFieldSet ( tif , FIELD_RESOLUTIONUNIT )
FUNCTION_CALL	284:6	284:43	9	TIFFFieldSet ( tif , FIELD_RESOLUTIONUNIT )
CALLEE	284:6	284:6	10	TIFFFieldSet
LEAF_NODE	284:6	284:6	11	TIFFFieldSet
LEAF_NODE	284:18	284:18	10	(
ARGUMENT	284:19	284:19	10	tif
FIELD	284:19	284:19	11	tif
LEAF_NODE	284:19	284:19	12	tif
LEAF_NODE	284:22	284:22	10	,
ARGUMENT	284:23	284:23	10	FIELD_RESOLUTIONUNIT
FIELD	284:23	284:23	11	FIELD_RESOLUTIONUNIT
LEAF_NODE	284:23	284:23	12	FIELD_RESOLUTIONUNIT
LEAF_NODE	284:43	284:43	10	)
LEAF_NODE	284:44	284:44	7	)
STATEMENTS	284:46	301:2	7	
LEAF_NODE	284:46	284:46	8	{
STATEMENTS	285:3	285:3	8	
SELECTION	285:3	285:34	9	
KEYWORD	285:3	285:3	10	switch
LEAF_NODE	285:3	285:3	11	switch
LEAF_NODE	285:10	285:10	10	(
CONDITION	285:11	285:11	10	td -> td_resolutionunit
EXPR	285:11	285:11	11	td -> td_resolutionunit
FIELD	285:11	285:15	12	td -> td_resolutionunit
LEAF_NODE	285:11	285:11	13	td
LEAF_NODE	285:13	285:13	13	->
LEAF_NODE	285:15	285:15	13	td_resolutionunit
LEAF_NODE	285:32	285:32	10	)
STATEMENTS	285:34	300:3	10	
LEAF_NODE	285:34	285:34	11	{
STATEMENTS	286:3	299:4	11	
LABEL	286:3	286:20	12	case RESUNIT_NONE :
LEAF_NODE	286:3	286:3	13	case
LEAF_NODE	286:8	286:8	13	RESUNIT_NONE
LEAF_NODE	286:20	286:20	13	:
EXPR_STATEMENT	287:4	287:30	12	fprintf ( fd , " (unitless)" ) ;
EXPR	287:4	287:4	13	fprintf ( fd , " (unitless)" )
FUNCTION_CALL	287:4	287:29	14	fprintf ( fd , " (unitless)" )
CALLEE	287:4	287:4	15	fprintf
LEAF_NODE	287:4	287:4	16	fprintf
LEAF_NODE	287:11	287:11	15	(
ARGUMENT	287:12	287:12	15	fd
FIELD	287:12	287:12	16	fd
LEAF_NODE	287:12	287:12	17	fd
LEAF_NODE	287:14	287:14	15	,
ARGUMENT	287:16	287:16	15	" (unitless)"
FIELD	287:16	287:16	16	" (unitless)"
LEAF_NODE	287:16	287:16	17	" (unitless)"
LEAF_NODE	287:29	287:29	15	)
LEAF_NODE	287:30	287:30	13	;
JUMP_STATEMENT	288:4	288:9	12	break DESTINATION ;
KEYWORD	288:4	288:4	13	break
LEAF_NODE	288:4	288:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	288:9	288:9	13	;
LABEL	289:3	289:20	12	case RESUNIT_INCH :
LEAF_NODE	289:3	289:3	13	case
LEAF_NODE	289:8	289:8	13	RESUNIT_INCH
LEAF_NODE	289:20	289:20	13	:
EXPR_STATEMENT	290:4	290:31	12	fprintf ( fd , " pixels/inch" ) ;
EXPR	290:4	290:4	13	fprintf ( fd , " pixels/inch" )
FUNCTION_CALL	290:4	290:30	14	fprintf ( fd , " pixels/inch" )
CALLEE	290:4	290:4	15	fprintf
LEAF_NODE	290:4	290:4	16	fprintf
LEAF_NODE	290:11	290:11	15	(
ARGUMENT	290:12	290:12	15	fd
FIELD	290:12	290:12	16	fd
LEAF_NODE	290:12	290:12	17	fd
LEAF_NODE	290:14	290:14	15	,
ARGUMENT	290:16	290:16	15	" pixels/inch"
FIELD	290:16	290:16	16	" pixels/inch"
LEAF_NODE	290:16	290:16	17	" pixels/inch"
LEAF_NODE	290:30	290:30	15	)
LEAF_NODE	290:31	290:31	13	;
JUMP_STATEMENT	291:4	291:9	12	break DESTINATION ;
KEYWORD	291:4	291:4	13	break
LEAF_NODE	291:4	291:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	291:9	291:9	13	;
LABEL	292:3	292:26	12	case RESUNIT_CENTIMETER :
LEAF_NODE	292:3	292:3	13	case
LEAF_NODE	292:8	292:8	13	RESUNIT_CENTIMETER
LEAF_NODE	292:26	292:26	13	:
EXPR_STATEMENT	293:4	293:29	12	fprintf ( fd , " pixels/cm" ) ;
EXPR	293:4	293:4	13	fprintf ( fd , " pixels/cm" )
FUNCTION_CALL	293:4	293:28	14	fprintf ( fd , " pixels/cm" )
CALLEE	293:4	293:4	15	fprintf
LEAF_NODE	293:4	293:4	16	fprintf
LEAF_NODE	293:11	293:11	15	(
ARGUMENT	293:12	293:12	15	fd
FIELD	293:12	293:12	16	fd
LEAF_NODE	293:12	293:12	17	fd
LEAF_NODE	293:14	293:14	15	,
ARGUMENT	293:16	293:16	15	" pixels/cm"
FIELD	293:16	293:16	16	" pixels/cm"
LEAF_NODE	293:16	293:16	17	" pixels/cm"
LEAF_NODE	293:28	293:28	15	)
LEAF_NODE	293:29	293:29	13	;
JUMP_STATEMENT	294:4	294:9	12	break DESTINATION ;
KEYWORD	294:4	294:4	13	break
LEAF_NODE	294:4	294:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	294:9	294:9	13	;
LABEL	295:3	295:10	12	default :
LEAF_NODE	295:3	295:3	13	default
LEAF_NODE	295:10	295:10	13	:
EXPR_STATEMENT	296:4	298:30	12	fprintf ( fd , " (unit %u = 0x%x)" , td -> td_resolutionunit , td -> td_resolutionunit ) ;
EXPR	296:4	296:4	13	fprintf ( fd , " (unit %u = 0x%x)" , td -> td_resolutionunit , td -> td_resolutionunit )
FUNCTION_CALL	296:4	298:29	14	fprintf ( fd , " (unit %u = 0x%x)" , td -> td_resolutionunit , td -> td_resolutionunit )
CALLEE	296:4	296:4	15	fprintf
LEAF_NODE	296:4	296:4	16	fprintf
LEAF_NODE	296:11	296:11	15	(
ARGUMENT	296:12	296:12	15	fd
FIELD	296:12	296:12	16	fd
LEAF_NODE	296:12	296:12	17	fd
LEAF_NODE	296:14	296:14	15	,
ARGUMENT	296:16	296:16	15	" (unit %u = 0x%x)"
FIELD	296:16	296:16	16	" (unit %u = 0x%x)"
LEAF_NODE	296:16	296:16	17	" (unit %u = 0x%x)"
LEAF_NODE	296:35	296:35	15	,
ARGUMENT	297:8	297:8	15	td -> td_resolutionunit
FIELD	297:8	297:12	16	td -> td_resolutionunit
LEAF_NODE	297:8	297:8	17	td
LEAF_NODE	297:10	297:10	17	->
LEAF_NODE	297:12	297:12	17	td_resolutionunit
LEAF_NODE	297:29	297:29	15	,
ARGUMENT	298:8	298:8	15	td -> td_resolutionunit
FIELD	298:8	298:12	16	td -> td_resolutionunit
LEAF_NODE	298:8	298:8	17	td
LEAF_NODE	298:10	298:10	17	->
LEAF_NODE	298:12	298:12	17	td_resolutionunit
LEAF_NODE	298:29	298:29	15	)
LEAF_NODE	298:30	298:30	13	;
JUMP_STATEMENT	299:4	299:9	12	break DESTINATION ;
KEYWORD	299:4	299:4	13	break
LEAF_NODE	299:4	299:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	299:9	299:9	13	;
LEAF_NODE	300:3	300:3	11	}
LEAF_NODE	301:2	301:2	8	}
EXPR_STATEMENT	302:2	302:19	6	fprintf ( fd , "\n" ) ;
EXPR	302:2	302:2	7	fprintf ( fd , "\n" )
FUNCTION_CALL	302:2	302:18	8	fprintf ( fd , "\n" )
CALLEE	302:2	302:2	9	fprintf
LEAF_NODE	302:2	302:2	10	fprintf
LEAF_NODE	302:9	302:9	9	(
ARGUMENT	302:10	302:10	9	fd
FIELD	302:10	302:10	10	fd
LEAF_NODE	302:10	302:10	11	fd
LEAF_NODE	302:12	302:12	9	,
ARGUMENT	302:14	302:14	9	"\n"
FIELD	302:14	302:14	10	"\n"
LEAF_NODE	302:14	302:14	11	"\n"
LEAF_NODE	302:18	302:18	9	)
LEAF_NODE	302:19	302:19	7	;
LEAF_NODE	303:1	303:1	5	}
SELECTION	304:1	305:2	3	
KEYWORD	304:1	304:1	4	if
LEAF_NODE	304:1	304:1	5	if
LEAF_NODE	304:4	304:4	4	(
CONDITION	304:5	304:5	4	TIFFFieldSet ( tif , FIELD_POSITION )
EXPR	304:5	304:5	5	TIFFFieldSet ( tif , FIELD_POSITION )
FUNCTION_CALL	304:5	304:36	6	TIFFFieldSet ( tif , FIELD_POSITION )
CALLEE	304:5	304:5	7	TIFFFieldSet
LEAF_NODE	304:5	304:5	8	TIFFFieldSet
LEAF_NODE	304:17	304:17	7	(
ARGUMENT	304:18	304:18	7	tif
FIELD	304:18	304:18	8	tif
LEAF_NODE	304:18	304:18	9	tif
LEAF_NODE	304:21	304:21	7	,
ARGUMENT	304:22	304:22	7	FIELD_POSITION
FIELD	304:22	304:22	8	FIELD_POSITION
LEAF_NODE	304:22	304:22	9	FIELD_POSITION
LEAF_NODE	304:36	304:36	7	)
LEAF_NODE	304:37	304:37	4	)
STATEMENTS	305:2	305:2	4	
EXPR_STATEMENT	305:2	306:41	5	fprintf ( fd , "  Position: %g, %g\n" , td -> td_xposition , td -> td_yposition ) ;
EXPR	305:2	305:2	6	fprintf ( fd , "  Position: %g, %g\n" , td -> td_xposition , td -> td_yposition )
FUNCTION_CALL	305:2	306:40	7	fprintf ( fd , "  Position: %g, %g\n" , td -> td_xposition , td -> td_yposition )
CALLEE	305:2	305:2	8	fprintf
LEAF_NODE	305:2	305:2	9	fprintf
LEAF_NODE	305:9	305:9	8	(
ARGUMENT	305:10	305:10	8	fd
FIELD	305:10	305:10	9	fd
LEAF_NODE	305:10	305:10	10	fd
LEAF_NODE	305:12	305:12	8	,
ARGUMENT	305:14	305:14	8	"  Position: %g, %g\n"
FIELD	305:14	305:14	9	"  Position: %g, %g\n"
LEAF_NODE	305:14	305:14	10	"  Position: %g, %g\n"
LEAF_NODE	305:36	305:36	8	,
ARGUMENT	306:6	306:6	8	td -> td_xposition
FIELD	306:6	306:10	9	td -> td_xposition
LEAF_NODE	306:6	306:6	10	td
LEAF_NODE	306:8	306:8	10	->
LEAF_NODE	306:10	306:10	10	td_xposition
LEAF_NODE	306:22	306:22	8	,
ARGUMENT	306:24	306:24	8	td -> td_yposition
FIELD	306:24	306:28	9	td -> td_yposition
LEAF_NODE	306:24	306:24	10	td
LEAF_NODE	306:26	306:26	10	->
LEAF_NODE	306:28	306:28	10	td_yposition
LEAF_NODE	306:40	306:40	8	)
LEAF_NODE	306:41	306:41	6	;
SELECTION	307:1	308:2	3	
KEYWORD	307:1	307:1	4	if
LEAF_NODE	307:1	307:1	5	if
LEAF_NODE	307:4	307:4	4	(
CONDITION	307:5	307:5	4	TIFFFieldSet ( tif , FIELD_BITSPERSAMPLE )
EXPR	307:5	307:5	5	TIFFFieldSet ( tif , FIELD_BITSPERSAMPLE )
FUNCTION_CALL	307:5	307:41	6	TIFFFieldSet ( tif , FIELD_BITSPERSAMPLE )
CALLEE	307:5	307:5	7	TIFFFieldSet
LEAF_NODE	307:5	307:5	8	TIFFFieldSet
LEAF_NODE	307:17	307:17	7	(
ARGUMENT	307:18	307:18	7	tif
FIELD	307:18	307:18	8	tif
LEAF_NODE	307:18	307:18	9	tif
LEAF_NODE	307:21	307:21	7	,
ARGUMENT	307:22	307:22	7	FIELD_BITSPERSAMPLE
FIELD	307:22	307:22	8	FIELD_BITSPERSAMPLE
LEAF_NODE	307:22	307:22	9	FIELD_BITSPERSAMPLE
LEAF_NODE	307:41	307:41	7	)
LEAF_NODE	307:42	307:42	4	)
STATEMENTS	308:2	308:2	4	
EXPR_STATEMENT	308:2	308:58	5	fprintf ( fd , "  Bits/Sample: %u\n" , td -> td_bitspersample ) ;
EXPR	308:2	308:2	6	fprintf ( fd , "  Bits/Sample: %u\n" , td -> td_bitspersample )
FUNCTION_CALL	308:2	308:57	7	fprintf ( fd , "  Bits/Sample: %u\n" , td -> td_bitspersample )
CALLEE	308:2	308:2	8	fprintf
LEAF_NODE	308:2	308:2	9	fprintf
LEAF_NODE	308:9	308:9	8	(
ARGUMENT	308:10	308:10	8	fd
FIELD	308:10	308:10	9	fd
LEAF_NODE	308:10	308:10	10	fd
LEAF_NODE	308:12	308:12	8	,
ARGUMENT	308:14	308:14	8	"  Bits/Sample: %u\n"
FIELD	308:14	308:14	9	"  Bits/Sample: %u\n"
LEAF_NODE	308:14	308:14	10	"  Bits/Sample: %u\n"
LEAF_NODE	308:35	308:35	8	,
ARGUMENT	308:37	308:37	8	td -> td_bitspersample
FIELD	308:37	308:41	9	td -> td_bitspersample
LEAF_NODE	308:37	308:37	10	td
LEAF_NODE	308:39	308:39	10	->
LEAF_NODE	308:41	308:41	10	td_bitspersample
LEAF_NODE	308:57	308:57	8	)
LEAF_NODE	308:58	308:58	6	;
SELECTION	309:1	309:43	3	
KEYWORD	309:1	309:1	4	if
LEAF_NODE	309:1	309:1	5	if
LEAF_NODE	309:4	309:4	4	(
CONDITION	309:5	309:5	4	TIFFFieldSet ( tif , FIELD_SAMPLEFORMAT )
EXPR	309:5	309:5	5	TIFFFieldSet ( tif , FIELD_SAMPLEFORMAT )
FUNCTION_CALL	309:5	309:40	6	TIFFFieldSet ( tif , FIELD_SAMPLEFORMAT )
CALLEE	309:5	309:5	7	TIFFFieldSet
LEAF_NODE	309:5	309:5	8	TIFFFieldSet
LEAF_NODE	309:17	309:17	7	(
ARGUMENT	309:18	309:18	7	tif
FIELD	309:18	309:18	8	tif
LEAF_NODE	309:18	309:18	9	tif
LEAF_NODE	309:21	309:21	7	,
ARGUMENT	309:22	309:22	7	FIELD_SAMPLEFORMAT
FIELD	309:22	309:22	8	FIELD_SAMPLEFORMAT
LEAF_NODE	309:22	309:22	9	FIELD_SAMPLEFORMAT
LEAF_NODE	309:40	309:40	7	)
LEAF_NODE	309:41	309:41	4	)
STATEMENTS	309:43	335:1	4	
LEAF_NODE	309:43	309:43	5	{
STATEMENTS	310:2	311:2	5	
EXPR_STATEMENT	310:2	310:34	6	fprintf ( fd , "  Sample Format: " ) ;
EXPR	310:2	310:2	7	fprintf ( fd , "  Sample Format: " )
FUNCTION_CALL	310:2	310:33	8	fprintf ( fd , "  Sample Format: " )
CALLEE	310:2	310:2	9	fprintf
LEAF_NODE	310:2	310:2	10	fprintf
LEAF_NODE	310:9	310:9	9	(
ARGUMENT	310:10	310:10	9	fd
FIELD	310:10	310:10	10	fd
LEAF_NODE	310:10	310:10	11	fd
LEAF_NODE	310:12	310:12	9	,
ARGUMENT	310:14	310:14	9	"  Sample Format: "
FIELD	310:14	310:14	10	"  Sample Format: "
LEAF_NODE	310:14	310:14	11	"  Sample Format: "
LEAF_NODE	310:33	310:33	9	)
LEAF_NODE	310:34	310:34	7	;
SELECTION	311:2	311:31	6	
KEYWORD	311:2	311:2	7	switch
LEAF_NODE	311:2	311:2	8	switch
LEAF_NODE	311:9	311:9	7	(
CONDITION	311:10	311:10	7	td -> td_sampleformat
EXPR	311:10	311:10	8	td -> td_sampleformat
FIELD	311:10	311:14	9	td -> td_sampleformat
LEAF_NODE	311:10	311:10	10	td
LEAF_NODE	311:12	311:12	10	->
LEAF_NODE	311:14	311:14	10	td_sampleformat
LEAF_NODE	311:29	311:29	7	)
STATEMENTS	311:31	334:2	7	
LEAF_NODE	311:31	311:31	8	{
STATEMENTS	312:2	333:3	8	
LABEL	312:2	312:24	9	case SAMPLEFORMAT_VOID :
LEAF_NODE	312:2	312:2	10	case
LEAF_NODE	312:7	312:7	10	SAMPLEFORMAT_VOID
LEAF_NODE	312:24	312:24	10	:
EXPR_STATEMENT	313:3	313:24	9	fprintf ( fd , "void\n" ) ;
EXPR	313:3	313:3	10	fprintf ( fd , "void\n" )
FUNCTION_CALL	313:3	313:23	11	fprintf ( fd , "void\n" )
CALLEE	313:3	313:3	12	fprintf
LEAF_NODE	313:3	313:3	13	fprintf
LEAF_NODE	313:10	313:10	12	(
ARGUMENT	313:11	313:11	12	fd
FIELD	313:11	313:11	13	fd
LEAF_NODE	313:11	313:11	14	fd
LEAF_NODE	313:13	313:13	12	,
ARGUMENT	313:15	313:15	12	"void\n"
FIELD	313:15	313:15	13	"void\n"
LEAF_NODE	313:15	313:15	14	"void\n"
LEAF_NODE	313:23	313:23	12	)
LEAF_NODE	313:24	313:24	10	;
JUMP_STATEMENT	314:3	314:8	9	break DESTINATION ;
KEYWORD	314:3	314:3	10	break
LEAF_NODE	314:3	314:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	314:8	314:8	10	;
LABEL	315:2	315:23	9	case SAMPLEFORMAT_INT :
LEAF_NODE	315:2	315:2	10	case
LEAF_NODE	315:7	315:7	10	SAMPLEFORMAT_INT
LEAF_NODE	315:23	315:23	10	:
EXPR_STATEMENT	316:3	316:34	9	fprintf ( fd , "signed integer\n" ) ;
EXPR	316:3	316:3	10	fprintf ( fd , "signed integer\n" )
FUNCTION_CALL	316:3	316:33	11	fprintf ( fd , "signed integer\n" )
CALLEE	316:3	316:3	12	fprintf
LEAF_NODE	316:3	316:3	13	fprintf
LEAF_NODE	316:10	316:10	12	(
ARGUMENT	316:11	316:11	12	fd
FIELD	316:11	316:11	13	fd
LEAF_NODE	316:11	316:11	14	fd
LEAF_NODE	316:13	316:13	12	,
ARGUMENT	316:15	316:15	12	"signed integer\n"
FIELD	316:15	316:15	13	"signed integer\n"
LEAF_NODE	316:15	316:15	14	"signed integer\n"
LEAF_NODE	316:33	316:33	12	)
LEAF_NODE	316:34	316:34	10	;
JUMP_STATEMENT	317:3	317:8	9	break DESTINATION ;
KEYWORD	317:3	317:3	10	break
LEAF_NODE	317:3	317:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	317:8	317:8	10	;
LABEL	318:2	318:24	9	case SAMPLEFORMAT_UINT :
LEAF_NODE	318:2	318:2	10	case
LEAF_NODE	318:7	318:7	10	SAMPLEFORMAT_UINT
LEAF_NODE	318:24	318:24	10	:
EXPR_STATEMENT	319:3	319:36	9	fprintf ( fd , "unsigned integer\n" ) ;
EXPR	319:3	319:3	10	fprintf ( fd , "unsigned integer\n" )
FUNCTION_CALL	319:3	319:35	11	fprintf ( fd , "unsigned integer\n" )
CALLEE	319:3	319:3	12	fprintf
LEAF_NODE	319:3	319:3	13	fprintf
LEAF_NODE	319:10	319:10	12	(
ARGUMENT	319:11	319:11	12	fd
FIELD	319:11	319:11	13	fd
LEAF_NODE	319:11	319:11	14	fd
LEAF_NODE	319:13	319:13	12	,
ARGUMENT	319:15	319:15	12	"unsigned integer\n"
FIELD	319:15	319:15	13	"unsigned integer\n"
LEAF_NODE	319:15	319:15	14	"unsigned integer\n"
LEAF_NODE	319:35	319:35	12	)
LEAF_NODE	319:36	319:36	10	;
JUMP_STATEMENT	320:3	320:8	9	break DESTINATION ;
KEYWORD	320:3	320:3	10	break
LEAF_NODE	320:3	320:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	320:8	320:8	10	;
LABEL	321:2	321:26	9	case SAMPLEFORMAT_IEEEFP :
LEAF_NODE	321:2	321:2	10	case
LEAF_NODE	321:7	321:7	10	SAMPLEFORMAT_IEEEFP
LEAF_NODE	321:26	321:26	10	:
EXPR_STATEMENT	322:3	322:39	9	fprintf ( fd , "IEEE floating point\n" ) ;
EXPR	322:3	322:3	10	fprintf ( fd , "IEEE floating point\n" )
FUNCTION_CALL	322:3	322:38	11	fprintf ( fd , "IEEE floating point\n" )
CALLEE	322:3	322:3	12	fprintf
LEAF_NODE	322:3	322:3	13	fprintf
LEAF_NODE	322:10	322:10	12	(
ARGUMENT	322:11	322:11	12	fd
FIELD	322:11	322:11	13	fd
LEAF_NODE	322:11	322:11	14	fd
LEAF_NODE	322:13	322:13	12	,
ARGUMENT	322:15	322:15	12	"IEEE floating point\n"
FIELD	322:15	322:15	13	"IEEE floating point\n"
LEAF_NODE	322:15	322:15	14	"IEEE floating point\n"
LEAF_NODE	322:38	322:38	12	)
LEAF_NODE	322:39	322:39	10	;
JUMP_STATEMENT	323:3	323:8	9	break DESTINATION ;
KEYWORD	323:3	323:3	10	break
LEAF_NODE	323:3	323:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	323:8	323:8	10	;
LABEL	324:2	324:30	9	case SAMPLEFORMAT_COMPLEXINT :
LEAF_NODE	324:2	324:2	10	case
LEAF_NODE	324:7	324:7	10	SAMPLEFORMAT_COMPLEXINT
LEAF_NODE	324:30	324:30	10	:
EXPR_STATEMENT	325:3	325:42	9	fprintf ( fd , "complex signed integer\n" ) ;
EXPR	325:3	325:3	10	fprintf ( fd , "complex signed integer\n" )
FUNCTION_CALL	325:3	325:41	11	fprintf ( fd , "complex signed integer\n" )
CALLEE	325:3	325:3	12	fprintf
LEAF_NODE	325:3	325:3	13	fprintf
LEAF_NODE	325:10	325:10	12	(
ARGUMENT	325:11	325:11	12	fd
FIELD	325:11	325:11	13	fd
LEAF_NODE	325:11	325:11	14	fd
LEAF_NODE	325:13	325:13	12	,
ARGUMENT	325:15	325:15	12	"complex signed integer\n"
FIELD	325:15	325:15	13	"complex signed integer\n"
LEAF_NODE	325:15	325:15	14	"complex signed integer\n"
LEAF_NODE	325:41	325:41	12	)
LEAF_NODE	325:42	325:42	10	;
JUMP_STATEMENT	326:3	326:8	9	break DESTINATION ;
KEYWORD	326:3	326:3	10	break
LEAF_NODE	326:3	326:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	326:8	326:8	10	;
LABEL	327:2	327:33	9	case SAMPLEFORMAT_COMPLEXIEEEFP :
LEAF_NODE	327:2	327:2	10	case
LEAF_NODE	327:7	327:7	10	SAMPLEFORMAT_COMPLEXIEEEFP
LEAF_NODE	327:33	327:33	10	:
EXPR_STATEMENT	328:3	328:47	9	fprintf ( fd , "complex IEEE floating point\n" ) ;
EXPR	328:3	328:3	10	fprintf ( fd , "complex IEEE floating point\n" )
FUNCTION_CALL	328:3	328:46	11	fprintf ( fd , "complex IEEE floating point\n" )
CALLEE	328:3	328:3	12	fprintf
LEAF_NODE	328:3	328:3	13	fprintf
LEAF_NODE	328:10	328:10	12	(
ARGUMENT	328:11	328:11	12	fd
FIELD	328:11	328:11	13	fd
LEAF_NODE	328:11	328:11	14	fd
LEAF_NODE	328:13	328:13	12	,
ARGUMENT	328:15	328:15	12	"complex IEEE floating point\n"
FIELD	328:15	328:15	13	"complex IEEE floating point\n"
LEAF_NODE	328:15	328:15	14	"complex IEEE floating point\n"
LEAF_NODE	328:46	328:46	12	)
LEAF_NODE	328:47	328:47	10	;
JUMP_STATEMENT	329:3	329:8	9	break DESTINATION ;
KEYWORD	329:3	329:3	10	break
LEAF_NODE	329:3	329:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	329:8	329:8	10	;
LABEL	330:2	330:9	9	default :
LEAF_NODE	330:2	330:2	10	default
LEAF_NODE	330:9	330:9	10	:
EXPR_STATEMENT	331:3	332:48	9	fprintf ( fd , "%u (0x%x)\n" , td -> td_sampleformat , td -> td_sampleformat ) ;
EXPR	331:3	331:3	10	fprintf ( fd , "%u (0x%x)\n" , td -> td_sampleformat , td -> td_sampleformat )
FUNCTION_CALL	331:3	332:47	11	fprintf ( fd , "%u (0x%x)\n" , td -> td_sampleformat , td -> td_sampleformat )
CALLEE	331:3	331:3	12	fprintf
LEAF_NODE	331:3	331:3	13	fprintf
LEAF_NODE	331:10	331:10	12	(
ARGUMENT	331:11	331:11	12	fd
FIELD	331:11	331:11	13	fd
LEAF_NODE	331:11	331:11	14	fd
LEAF_NODE	331:13	331:13	12	,
ARGUMENT	331:15	331:15	12	"%u (0x%x)\n"
FIELD	331:15	331:15	13	"%u (0x%x)\n"
LEAF_NODE	331:15	331:15	14	"%u (0x%x)\n"
LEAF_NODE	331:28	331:28	12	,
ARGUMENT	332:7	332:7	12	td -> td_sampleformat
FIELD	332:7	332:11	13	td -> td_sampleformat
LEAF_NODE	332:7	332:7	14	td
LEAF_NODE	332:9	332:9	14	->
LEAF_NODE	332:11	332:11	14	td_sampleformat
LEAF_NODE	332:26	332:26	12	,
ARGUMENT	332:28	332:28	12	td -> td_sampleformat
FIELD	332:28	332:32	13	td -> td_sampleformat
LEAF_NODE	332:28	332:28	14	td
LEAF_NODE	332:30	332:30	14	->
LEAF_NODE	332:32	332:32	14	td_sampleformat
LEAF_NODE	332:47	332:47	12	)
LEAF_NODE	332:48	332:48	10	;
JUMP_STATEMENT	333:3	333:8	9	break DESTINATION ;
KEYWORD	333:3	333:3	10	break
LEAF_NODE	333:3	333:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	333:8	333:8	10	;
LEAF_NODE	334:2	334:2	8	}
LEAF_NODE	335:1	335:1	5	}
SELECTION	336:1	336:42	3	
KEYWORD	336:1	336:1	4	if
LEAF_NODE	336:1	336:1	5	if
LEAF_NODE	336:4	336:4	4	(
CONDITION	336:5	336:5	4	TIFFFieldSet ( tif , FIELD_COMPRESSION )
EXPR	336:5	336:5	5	TIFFFieldSet ( tif , FIELD_COMPRESSION )
FUNCTION_CALL	336:5	336:39	6	TIFFFieldSet ( tif , FIELD_COMPRESSION )
CALLEE	336:5	336:5	7	TIFFFieldSet
LEAF_NODE	336:5	336:5	8	TIFFFieldSet
LEAF_NODE	336:17	336:17	7	(
ARGUMENT	336:18	336:18	7	tif
FIELD	336:18	336:18	8	tif
LEAF_NODE	336:18	336:18	9	tif
LEAF_NODE	336:21	336:21	7	,
ARGUMENT	336:22	336:22	7	FIELD_COMPRESSION
FIELD	336:22	336:22	8	FIELD_COMPRESSION
LEAF_NODE	336:22	336:22	9	FIELD_COMPRESSION
LEAF_NODE	336:39	336:39	7	)
LEAF_NODE	336:40	336:40	4	)
STATEMENTS	336:42	344:1	4	
LEAF_NODE	336:42	336:42	5	{
STATEMENTS	337:2	341:2	5	
SIMPLE_DECL	337:2	337:56	6	const TIFFCodec * c ; c = TIFFFindCODEC ( td -> td_compression ) ;
VAR_DECL	337:2	337:19	7	const TIFFCodec * c ; c = TIFFFindCODEC ( td -> td_compression )
TYPE	337:2	337:17	8	const TIFFCodec *
TYPE_NAME	337:2	337:8	9	const TIFFCodec
LEAF_NODE	337:2	337:2	10	const
LEAF_NODE	337:8	337:8	10	TIFFCodec
POINTER	337:17	337:17	9	*
LEAF_NODE	337:17	337:17	10	*
NAME	337:19	337:19	8	c
LEAF_NODE	337:19	337:19	9	c
LEAF_NODE	0:0	0:0	8	;
INIT	337:19	337:19	8	c = TIFFFindCODEC ( td -> td_compression )
ASSIGN	337:19	337:23	9	c = TIFFFindCODEC ( td -> td_compression )
LVAL	337:19	337:19	10	c
NAME	337:19	337:19	11	c
LEAF_NODE	337:19	337:19	12	c
ASSIGN_OP	337:21	337:21	10	=
LEAF_NODE	337:21	337:21	11	=
RVAL	337:23	337:23	10	TIFFFindCODEC ( td -> td_compression )
FUNCTION_CALL	337:23	337:55	11	TIFFFindCODEC ( td -> td_compression )
CALLEE	337:23	337:23	12	TIFFFindCODEC
LEAF_NODE	337:23	337:23	13	TIFFFindCODEC
LEAF_NODE	337:36	337:36	12	(
ARGUMENT	337:37	337:37	12	td -> td_compression
FIELD	337:37	337:41	13	td -> td_compression
LEAF_NODE	337:37	337:37	14	td
LEAF_NODE	337:39	337:39	14	->
LEAF_NODE	337:41	337:41	14	td_compression
LEAF_NODE	337:55	337:55	12	)
LEAF_NODE	337:56	337:56	7	;
EXPR_STATEMENT	338:2	338:39	6	fprintf ( fd , "  Compression Scheme: " ) ;
EXPR	338:2	338:2	7	fprintf ( fd , "  Compression Scheme: " )
FUNCTION_CALL	338:2	338:38	8	fprintf ( fd , "  Compression Scheme: " )
CALLEE	338:2	338:2	9	fprintf
LEAF_NODE	338:2	338:2	10	fprintf
LEAF_NODE	338:9	338:9	9	(
ARGUMENT	338:10	338:10	9	fd
FIELD	338:10	338:10	10	fd
LEAF_NODE	338:10	338:10	11	fd
LEAF_NODE	338:12	338:12	9	,
ARGUMENT	338:14	338:14	9	"  Compression Scheme: "
FIELD	338:14	338:14	10	"  Compression Scheme: "
LEAF_NODE	338:14	338:14	11	"  Compression Scheme: "
LEAF_NODE	338:38	338:38	9	)
LEAF_NODE	338:39	338:39	7	;
SELECTION	339:2	340:3	6	
KEYWORD	339:2	339:2	7	if
LEAF_NODE	339:2	339:2	8	if
LEAF_NODE	339:5	339:5	7	(
CONDITION	339:6	339:6	7	c
EXPR	339:6	339:6	8	c
FIELD	339:6	339:6	9	c
LEAF_NODE	339:6	339:6	10	c
LEAF_NODE	339:7	339:7	7	)
STATEMENTS	340:3	340:3	7	
EXPR_STATEMENT	340:3	340:31	8	fprintf ( fd , "%s\n" , c -> name ) ;
EXPR	340:3	340:3	9	fprintf ( fd , "%s\n" , c -> name )
FUNCTION_CALL	340:3	340:30	10	fprintf ( fd , "%s\n" , c -> name )
CALLEE	340:3	340:3	11	fprintf
LEAF_NODE	340:3	340:3	12	fprintf
LEAF_NODE	340:10	340:10	11	(
ARGUMENT	340:11	340:11	11	fd
FIELD	340:11	340:11	12	fd
LEAF_NODE	340:11	340:11	13	fd
LEAF_NODE	340:13	340:13	11	,
ARGUMENT	340:15	340:15	11	"%s\n"
FIELD	340:15	340:15	12	"%s\n"
LEAF_NODE	340:15	340:15	13	"%s\n"
LEAF_NODE	340:21	340:21	11	,
ARGUMENT	340:23	340:23	11	c -> name
FIELD	340:23	340:26	12	c -> name
LEAF_NODE	340:23	340:23	13	c
LEAF_NODE	340:24	340:24	13	->
LEAF_NODE	340:26	340:26	13	name
LEAF_NODE	340:30	340:30	11	)
LEAF_NODE	340:31	340:31	9	;
SELECTION	341:2	342:3	6	
KEYWORD	341:2	341:2	7	else
LEAF_NODE	341:2	341:2	8	else
STATEMENTS	342:3	342:3	7	
EXPR_STATEMENT	342:3	343:46	8	fprintf ( fd , "%u (0x%x)\n" , td -> td_compression , td -> td_compression ) ;
EXPR	342:3	342:3	9	fprintf ( fd , "%u (0x%x)\n" , td -> td_compression , td -> td_compression )
FUNCTION_CALL	342:3	343:45	10	fprintf ( fd , "%u (0x%x)\n" , td -> td_compression , td -> td_compression )
CALLEE	342:3	342:3	11	fprintf
LEAF_NODE	342:3	342:3	12	fprintf
LEAF_NODE	342:10	342:10	11	(
ARGUMENT	342:11	342:11	11	fd
FIELD	342:11	342:11	12	fd
LEAF_NODE	342:11	342:11	13	fd
LEAF_NODE	342:13	342:13	11	,
ARGUMENT	342:15	342:15	11	"%u (0x%x)\n"
FIELD	342:15	342:15	12	"%u (0x%x)\n"
LEAF_NODE	342:15	342:15	13	"%u (0x%x)\n"
LEAF_NODE	342:28	342:28	11	,
ARGUMENT	343:7	343:7	11	td -> td_compression
FIELD	343:7	343:11	12	td -> td_compression
LEAF_NODE	343:7	343:7	13	td
LEAF_NODE	343:9	343:9	13	->
LEAF_NODE	343:11	343:11	13	td_compression
LEAF_NODE	343:25	343:25	11	,
ARGUMENT	343:27	343:27	11	td -> td_compression
FIELD	343:27	343:31	12	td -> td_compression
LEAF_NODE	343:27	343:27	13	td
LEAF_NODE	343:29	343:29	13	->
LEAF_NODE	343:31	343:31	13	td_compression
LEAF_NODE	343:45	343:45	11	)
LEAF_NODE	343:46	343:46	9	;
LEAF_NODE	344:1	344:1	5	}
SELECTION	345:1	345:42	3	
KEYWORD	345:1	345:1	4	if
LEAF_NODE	345:1	345:1	5	if
LEAF_NODE	345:4	345:4	4	(
CONDITION	345:5	345:5	4	TIFFFieldSet ( tif , FIELD_PHOTOMETRIC )
EXPR	345:5	345:5	5	TIFFFieldSet ( tif , FIELD_PHOTOMETRIC )
FUNCTION_CALL	345:5	345:39	6	TIFFFieldSet ( tif , FIELD_PHOTOMETRIC )
CALLEE	345:5	345:5	7	TIFFFieldSet
LEAF_NODE	345:5	345:5	8	TIFFFieldSet
LEAF_NODE	345:17	345:17	7	(
ARGUMENT	345:18	345:18	7	tif
FIELD	345:18	345:18	8	tif
LEAF_NODE	345:18	345:18	9	tif
LEAF_NODE	345:21	345:21	7	,
ARGUMENT	345:22	345:22	7	FIELD_PHOTOMETRIC
FIELD	345:22	345:22	8	FIELD_PHOTOMETRIC
LEAF_NODE	345:22	345:22	9	FIELD_PHOTOMETRIC
LEAF_NODE	345:39	345:39	7	)
LEAF_NODE	345:40	345:40	4	)
STATEMENTS	345:42	363:1	4	
LEAF_NODE	345:42	345:42	5	{
STATEMENTS	346:2	349:2	5	
EXPR_STATEMENT	346:2	346:47	6	fprintf ( fd , "  Photometric Interpretation: " ) ;
EXPR	346:2	346:2	7	fprintf ( fd , "  Photometric Interpretation: " )
FUNCTION_CALL	346:2	346:46	8	fprintf ( fd , "  Photometric Interpretation: " )
CALLEE	346:2	346:2	9	fprintf
LEAF_NODE	346:2	346:2	10	fprintf
LEAF_NODE	346:9	346:9	9	(
ARGUMENT	346:10	346:10	9	fd
FIELD	346:10	346:10	10	fd
LEAF_NODE	346:10	346:10	11	fd
LEAF_NODE	346:12	346:12	9	,
ARGUMENT	346:14	346:14	9	"  Photometric Interpretation: "
FIELD	346:14	346:14	10	"  Photometric Interpretation: "
LEAF_NODE	346:14	346:14	11	"  Photometric Interpretation: "
LEAF_NODE	346:46	346:46	9	)
LEAF_NODE	346:47	346:47	7	;
SELECTION	347:2	348:3	6	
KEYWORD	347:2	347:2	7	if
LEAF_NODE	347:2	347:2	8	if
LEAF_NODE	347:5	347:5	7	(
CONDITION	347:6	347:6	7	td -> td_photometric < NPHOTONAMES
EXPR	347:6	347:27	8	td -> td_photometric < NPHOTONAMES
FIELD	347:6	347:10	9	td -> td_photometric
LEAF_NODE	347:6	347:6	10	td
LEAF_NODE	347:8	347:8	10	->
LEAF_NODE	347:10	347:10	10	td_photometric
REL_OPERATOR	347:25	347:25	9	<
LEAF_NODE	347:25	347:25	10	<
FIELD	347:27	347:27	9	NPHOTONAMES
LEAF_NODE	347:27	347:27	10	NPHOTONAMES
LEAF_NODE	347:38	347:38	7	)
STATEMENTS	348:3	348:3	7	
EXPR_STATEMENT	348:3	348:54	8	fprintf ( fd , "%s\n" , photoNames [ td -> td_photometric ] ) ;
EXPR	348:3	348:3	9	fprintf ( fd , "%s\n" , photoNames [ td -> td_photometric ] )
FUNCTION_CALL	348:3	348:53	10	fprintf ( fd , "%s\n" , photoNames [ td -> td_photometric ] )
CALLEE	348:3	348:3	11	fprintf
LEAF_NODE	348:3	348:3	12	fprintf
LEAF_NODE	348:10	348:10	11	(
ARGUMENT	348:11	348:11	11	fd
FIELD	348:11	348:11	12	fd
LEAF_NODE	348:11	348:11	13	fd
LEAF_NODE	348:13	348:13	11	,
ARGUMENT	348:15	348:15	11	"%s\n"
FIELD	348:15	348:15	12	"%s\n"
LEAF_NODE	348:15	348:15	13	"%s\n"
LEAF_NODE	348:21	348:21	11	,
ARGUMENT	348:23	348:23	11	photoNames [ td -> td_photometric ]
FIELD	348:23	348:52	12	photoNames [ td -> td_photometric ]
LEAF_NODE	348:23	348:23	13	photoNames
LEAF_NODE	348:33	348:33	13	[
EXPR	348:34	348:34	13	td -> td_photometric
FIELD	348:34	348:38	14	td -> td_photometric
LEAF_NODE	348:34	348:34	15	td
LEAF_NODE	348:36	348:36	15	->
LEAF_NODE	348:38	348:38	15	td_photometric
LEAF_NODE	348:52	348:52	13	]
LEAF_NODE	348:53	348:53	11	)
LEAF_NODE	348:54	348:54	9	;
SELECTION	349:2	349:7	6	
KEYWORD	349:2	349:2	7	else
LEAF_NODE	349:2	349:2	8	else
STATEMENTS	349:7	362:2	7	
LEAF_NODE	349:7	349:7	8	{
STATEMENTS	350:3	350:3	8	
SELECTION	350:3	350:31	9	
KEYWORD	350:3	350:3	10	switch
LEAF_NODE	350:3	350:3	11	switch
LEAF_NODE	350:10	350:10	10	(
CONDITION	350:11	350:11	10	td -> td_photometric
EXPR	350:11	350:11	11	td -> td_photometric
FIELD	350:11	350:15	12	td -> td_photometric
LEAF_NODE	350:11	350:11	13	td
LEAF_NODE	350:13	350:13	13	->
LEAF_NODE	350:15	350:15	13	td_photometric
LEAF_NODE	350:29	350:29	10	)
STATEMENTS	350:31	361:3	10	
LEAF_NODE	350:31	350:31	11	{
STATEMENTS	351:3	360:4	11	
LABEL	351:3	351:24	12	case PHOTOMETRIC_LOGL :
LEAF_NODE	351:3	351:3	13	case
LEAF_NODE	351:8	351:8	13	PHOTOMETRIC_LOGL
LEAF_NODE	351:24	351:24	13	:
EXPR_STATEMENT	352:4	352:32	12	fprintf ( fd , "CIE Log2(L)\n" ) ;
EXPR	352:4	352:4	13	fprintf ( fd , "CIE Log2(L)\n" )
FUNCTION_CALL	352:4	352:31	14	fprintf ( fd , "CIE Log2(L)\n" )
CALLEE	352:4	352:4	15	fprintf
LEAF_NODE	352:4	352:4	16	fprintf
LEAF_NODE	352:11	352:11	15	(
ARGUMENT	352:12	352:12	15	fd
FIELD	352:12	352:12	16	fd
LEAF_NODE	352:12	352:12	17	fd
LEAF_NODE	352:14	352:14	15	,
ARGUMENT	352:16	352:16	15	"CIE Log2(L)\n"
FIELD	352:16	352:16	16	"CIE Log2(L)\n"
LEAF_NODE	352:16	352:16	17	"CIE Log2(L)\n"
LEAF_NODE	352:31	352:31	15	)
LEAF_NODE	352:32	352:32	13	;
JUMP_STATEMENT	353:4	353:9	12	break DESTINATION ;
KEYWORD	353:4	353:4	13	break
LEAF_NODE	353:4	353:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	353:9	353:9	13	;
LABEL	354:3	354:26	12	case PHOTOMETRIC_LOGLUV :
LEAF_NODE	354:3	354:3	13	case
LEAF_NODE	354:8	354:8	13	PHOTOMETRIC_LOGLUV
LEAF_NODE	354:26	354:26	13	:
EXPR_STATEMENT	355:4	355:40	12	fprintf ( fd , "CIE Log2(L) (u',v')\n" ) ;
EXPR	355:4	355:4	13	fprintf ( fd , "CIE Log2(L) (u',v')\n" )
FUNCTION_CALL	355:4	355:39	14	fprintf ( fd , "CIE Log2(L) (u',v')\n" )
CALLEE	355:4	355:4	15	fprintf
LEAF_NODE	355:4	355:4	16	fprintf
LEAF_NODE	355:11	355:11	15	(
ARGUMENT	355:12	355:12	15	fd
FIELD	355:12	355:12	16	fd
LEAF_NODE	355:12	355:12	17	fd
LEAF_NODE	355:14	355:14	15	,
ARGUMENT	355:16	355:16	15	"CIE Log2(L) (u',v')\n"
FIELD	355:16	355:16	16	"CIE Log2(L) (u',v')\n"
LEAF_NODE	355:16	355:16	17	"CIE Log2(L) (u',v')\n"
LEAF_NODE	355:39	355:39	15	)
LEAF_NODE	355:40	355:40	13	;
JUMP_STATEMENT	356:4	356:9	12	break DESTINATION ;
KEYWORD	356:4	356:4	13	break
LEAF_NODE	356:4	356:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	356:9	356:9	13	;
LABEL	357:3	357:10	12	default :
LEAF_NODE	357:3	357:3	13	default
LEAF_NODE	357:10	357:10	13	:
EXPR_STATEMENT	358:4	359:47	12	fprintf ( fd , "%u (0x%x)\n" , td -> td_photometric , td -> td_photometric ) ;
EXPR	358:4	358:4	13	fprintf ( fd , "%u (0x%x)\n" , td -> td_photometric , td -> td_photometric )
FUNCTION_CALL	358:4	359:46	14	fprintf ( fd , "%u (0x%x)\n" , td -> td_photometric , td -> td_photometric )
CALLEE	358:4	358:4	15	fprintf
LEAF_NODE	358:4	358:4	16	fprintf
LEAF_NODE	358:11	358:11	15	(
ARGUMENT	358:12	358:12	15	fd
FIELD	358:12	358:12	16	fd
LEAF_NODE	358:12	358:12	17	fd
LEAF_NODE	358:14	358:14	15	,
ARGUMENT	358:16	358:16	15	"%u (0x%x)\n"
FIELD	358:16	358:16	16	"%u (0x%x)\n"
LEAF_NODE	358:16	358:16	17	"%u (0x%x)\n"
LEAF_NODE	358:29	358:29	15	,
ARGUMENT	359:8	359:8	15	td -> td_photometric
FIELD	359:8	359:12	16	td -> td_photometric
LEAF_NODE	359:8	359:8	17	td
LEAF_NODE	359:10	359:10	17	->
LEAF_NODE	359:12	359:12	17	td_photometric
LEAF_NODE	359:26	359:26	15	,
ARGUMENT	359:28	359:28	15	td -> td_photometric
FIELD	359:28	359:32	16	td -> td_photometric
LEAF_NODE	359:28	359:28	17	td
LEAF_NODE	359:30	359:30	17	->
LEAF_NODE	359:32	359:32	17	td_photometric
LEAF_NODE	359:46	359:46	15	)
LEAF_NODE	359:47	359:47	13	;
JUMP_STATEMENT	360:4	360:9	12	break DESTINATION ;
KEYWORD	360:4	360:4	13	break
LEAF_NODE	360:4	360:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	360:9	360:9	13	;
LEAF_NODE	361:3	361:3	11	}
LEAF_NODE	362:2	362:2	8	}
LEAF_NODE	363:1	363:1	5	}
SELECTION	364:1	364:66	3	
KEYWORD	364:1	364:1	4	if
LEAF_NODE	364:1	364:1	5	if
LEAF_NODE	364:4	364:4	4	(
CONDITION	364:5	364:5	4	TIFFFieldSet ( tif , FIELD_EXTRASAMPLES ) && td -> td_extrasamples
EXPR	364:5	364:5	5	TIFFFieldSet ( tif , FIELD_EXTRASAMPLES ) && td -> td_extrasamples
AND	364:5	364:45	6	TIFFFieldSet ( tif , FIELD_EXTRASAMPLES ) && td -> td_extrasamples
EXPR	364:5	364:5	7	TIFFFieldSet ( tif , FIELD_EXTRASAMPLES )
FUNCTION_CALL	364:5	364:40	8	TIFFFieldSet ( tif , FIELD_EXTRASAMPLES )
CALLEE	364:5	364:5	9	TIFFFieldSet
LEAF_NODE	364:5	364:5	10	TIFFFieldSet
LEAF_NODE	364:17	364:17	9	(
ARGUMENT	364:18	364:18	9	tif
FIELD	364:18	364:18	10	tif
LEAF_NODE	364:18	364:18	11	tif
LEAF_NODE	364:21	364:21	9	,
ARGUMENT	364:22	364:22	9	FIELD_EXTRASAMPLES
FIELD	364:22	364:22	10	FIELD_EXTRASAMPLES
LEAF_NODE	364:22	364:22	11	FIELD_EXTRASAMPLES
LEAF_NODE	364:40	364:40	9	)
LEAF_NODE	364:42	364:42	7	&&
EXPR	364:45	364:45	7	td -> td_extrasamples
FIELD	364:45	364:49	8	td -> td_extrasamples
LEAF_NODE	364:45	364:45	9	td
LEAF_NODE	364:47	364:47	9	->
LEAF_NODE	364:49	364:49	9	td_extrasamples
LEAF_NODE	364:64	364:64	4	)
STATEMENTS	364:66	387:1	4	
LEAF_NODE	364:66	364:66	5	{
STATEMENTS	365:2	386:2	5	
SIMPLE_DECL	365:2	365:10	6	uint16 i ;
VAR_DECL	365:2	365:9	7	uint16 i
TYPE	365:2	365:2	8	uint16
TYPE_NAME	365:2	365:2	9	uint16
LEAF_NODE	365:2	365:2	10	uint16
NAME	365:9	365:9	8	i
LEAF_NODE	365:9	365:9	9	i
LEAF_NODE	365:10	365:10	7	;
EXPR_STATEMENT	366:2	366:58	6	fprintf ( fd , "  Extra Samples: %u<" , td -> td_extrasamples ) ;
EXPR	366:2	366:2	7	fprintf ( fd , "  Extra Samples: %u<" , td -> td_extrasamples )
FUNCTION_CALL	366:2	366:57	8	fprintf ( fd , "  Extra Samples: %u<" , td -> td_extrasamples )
CALLEE	366:2	366:2	9	fprintf
LEAF_NODE	366:2	366:2	10	fprintf
LEAF_NODE	366:9	366:9	9	(
ARGUMENT	366:10	366:10	9	fd
FIELD	366:10	366:10	10	fd
LEAF_NODE	366:10	366:10	11	fd
LEAF_NODE	366:12	366:12	9	,
ARGUMENT	366:14	366:14	9	"  Extra Samples: %u<"
FIELD	366:14	366:14	10	"  Extra Samples: %u<"
LEAF_NODE	366:14	366:14	11	"  Extra Samples: %u<"
LEAF_NODE	366:36	366:36	9	,
ARGUMENT	366:38	366:38	9	td -> td_extrasamples
FIELD	366:38	366:42	10	td -> td_extrasamples
LEAF_NODE	366:38	366:38	11	td
LEAF_NODE	366:40	366:40	11	->
LEAF_NODE	366:42	366:42	11	td_extrasamples
LEAF_NODE	366:57	366:57	9	)
LEAF_NODE	366:58	366:58	7	;
EXPR_STATEMENT	367:2	367:10	6	sep = "" ;
EXPR	367:2	367:2	7	sep = ""
ASSIGN	367:2	367:8	8	sep = ""
LVAL	367:2	367:2	9	sep
FIELD	367:2	367:2	10	sep
LEAF_NODE	367:2	367:2	11	sep
ASSIGN_OP	367:6	367:6	9	=
LEAF_NODE	367:6	367:6	10	=
RVAL	367:8	367:8	9	""
FIELD	367:8	367:8	10	""
LEAF_NODE	367:8	367:8	11	""
LEAF_NODE	367:10	367:10	7	;
ITERATION	368:2	368:44	6	
KEYWORD	368:2	368:2	7	for
LEAF_NODE	368:2	368:2	8	for
LEAF_NODE	368:6	368:6	7	(
FOR_INIT	368:7	368:12	7	i = 0 ;
EXPR	368:7	368:7	8	i = 0
ASSIGN	368:7	368:11	9	i = 0
LVAL	368:7	368:7	10	i
FIELD	368:7	368:7	11	i
LEAF_NODE	368:7	368:7	12	i
ASSIGN_OP	368:9	368:9	10	=
LEAF_NODE	368:9	368:9	11	=
RVAL	368:11	368:11	10	0
FIELD	368:11	368:11	11	0
LEAF_NODE	368:11	368:11	12	0
LEAF_NODE	368:12	368:12	8	;
CONDITION	368:14	368:14	7	i < td -> td_extrasamples
EXPR	368:14	368:18	8	i < td -> td_extrasamples
FIELD	368:14	368:14	9	i
LEAF_NODE	368:14	368:14	10	i
REL_OPERATOR	368:16	368:16	9	<
LEAF_NODE	368:16	368:16	10	<
FIELD	368:18	368:22	9	td -> td_extrasamples
LEAF_NODE	368:18	368:18	10	td
LEAF_NODE	368:20	368:20	10	->
LEAF_NODE	368:22	368:22	10	td_extrasamples
LEAF_NODE	368:37	368:37	7	;
FOR_EXPR	368:39	368:39	7	i ++
EXPR	368:39	368:39	8	i ++
FIELD	368:39	368:40	9	i ++
LEAF_NODE	368:39	368:39	10	i
LEAF_NODE	368:40	368:40	10	++
LEAF_NODE	368:42	368:42	7	)
STATEMENTS	368:44	385:2	7	
LEAF_NODE	368:44	368:44	8	{
STATEMENTS	369:3	384:3	8	
SELECTION	369:3	369:33	9	
KEYWORD	369:3	369:3	10	switch
LEAF_NODE	369:3	369:3	11	switch
LEAF_NODE	369:10	369:10	10	(
CONDITION	369:11	369:11	10	td -> td_sampleinfo [ i ]
EXPR	369:11	369:11	11	td -> td_sampleinfo [ i ]
FIELD	369:11	369:30	12	td -> td_sampleinfo [ i ]
LEAF_NODE	369:11	369:11	13	td
LEAF_NODE	369:13	369:13	13	->
LEAF_NODE	369:15	369:15	13	td_sampleinfo
LEAF_NODE	369:28	369:28	13	[
EXPR	369:29	369:29	13	i
FIELD	369:29	369:29	14	i
LEAF_NODE	369:29	369:29	15	i
LEAF_NODE	369:30	369:30	13	]
LEAF_NODE	369:31	369:31	10	)
STATEMENTS	369:33	383:3	10	
LEAF_NODE	369:33	369:33	11	{
STATEMENTS	370:3	382:4	11	
LABEL	370:3	370:31	12	case EXTRASAMPLE_UNSPECIFIED :
LEAF_NODE	370:3	370:3	13	case
LEAF_NODE	370:8	370:8	13	EXTRASAMPLE_UNSPECIFIED
LEAF_NODE	370:31	370:31	13	:
EXPR_STATEMENT	371:4	371:37	12	fprintf ( fd , "%sunspecified" , sep ) ;
EXPR	371:4	371:4	13	fprintf ( fd , "%sunspecified" , sep )
FUNCTION_CALL	371:4	371:36	14	fprintf ( fd , "%sunspecified" , sep )
CALLEE	371:4	371:4	15	fprintf
LEAF_NODE	371:4	371:4	16	fprintf
LEAF_NODE	371:11	371:11	15	(
ARGUMENT	371:12	371:12	15	fd
FIELD	371:12	371:12	16	fd
LEAF_NODE	371:12	371:12	17	fd
LEAF_NODE	371:14	371:14	15	,
ARGUMENT	371:16	371:16	15	"%sunspecified"
FIELD	371:16	371:16	16	"%sunspecified"
LEAF_NODE	371:16	371:16	17	"%sunspecified"
LEAF_NODE	371:31	371:31	15	,
ARGUMENT	371:33	371:33	15	sep
FIELD	371:33	371:33	16	sep
LEAF_NODE	371:33	371:33	17	sep
LEAF_NODE	371:36	371:36	15	)
LEAF_NODE	371:37	371:37	13	;
JUMP_STATEMENT	372:4	372:9	12	break DESTINATION ;
KEYWORD	372:4	372:4	13	break
LEAF_NODE	372:4	372:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	372:9	372:9	13	;
LABEL	373:3	373:30	12	case EXTRASAMPLE_ASSOCALPHA :
LEAF_NODE	373:3	373:3	13	case
LEAF_NODE	373:8	373:8	13	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	373:30	373:30	13	:
EXPR_STATEMENT	374:4	374:37	12	fprintf ( fd , "%sassoc-alpha" , sep ) ;
EXPR	374:4	374:4	13	fprintf ( fd , "%sassoc-alpha" , sep )
FUNCTION_CALL	374:4	374:36	14	fprintf ( fd , "%sassoc-alpha" , sep )
CALLEE	374:4	374:4	15	fprintf
LEAF_NODE	374:4	374:4	16	fprintf
LEAF_NODE	374:11	374:11	15	(
ARGUMENT	374:12	374:12	15	fd
FIELD	374:12	374:12	16	fd
LEAF_NODE	374:12	374:12	17	fd
LEAF_NODE	374:14	374:14	15	,
ARGUMENT	374:16	374:16	15	"%sassoc-alpha"
FIELD	374:16	374:16	16	"%sassoc-alpha"
LEAF_NODE	374:16	374:16	17	"%sassoc-alpha"
LEAF_NODE	374:31	374:31	15	,
ARGUMENT	374:33	374:33	15	sep
FIELD	374:33	374:33	16	sep
LEAF_NODE	374:33	374:33	17	sep
LEAF_NODE	374:36	374:36	15	)
LEAF_NODE	374:37	374:37	13	;
JUMP_STATEMENT	375:4	375:9	12	break DESTINATION ;
KEYWORD	375:4	375:4	13	break
LEAF_NODE	375:4	375:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	375:9	375:9	13	;
LABEL	376:3	376:30	12	case EXTRASAMPLE_UNASSALPHA :
LEAF_NODE	376:3	376:3	13	case
LEAF_NODE	376:8	376:8	13	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	376:30	376:30	13	:
EXPR_STATEMENT	377:4	377:39	12	fprintf ( fd , "%sunassoc-alpha" , sep ) ;
EXPR	377:4	377:4	13	fprintf ( fd , "%sunassoc-alpha" , sep )
FUNCTION_CALL	377:4	377:38	14	fprintf ( fd , "%sunassoc-alpha" , sep )
CALLEE	377:4	377:4	15	fprintf
LEAF_NODE	377:4	377:4	16	fprintf
LEAF_NODE	377:11	377:11	15	(
ARGUMENT	377:12	377:12	15	fd
FIELD	377:12	377:12	16	fd
LEAF_NODE	377:12	377:12	17	fd
LEAF_NODE	377:14	377:14	15	,
ARGUMENT	377:16	377:16	15	"%sunassoc-alpha"
FIELD	377:16	377:16	16	"%sunassoc-alpha"
LEAF_NODE	377:16	377:16	17	"%sunassoc-alpha"
LEAF_NODE	377:33	377:33	15	,
ARGUMENT	377:35	377:35	15	sep
FIELD	377:35	377:35	16	sep
LEAF_NODE	377:35	377:35	17	sep
LEAF_NODE	377:38	377:38	15	)
LEAF_NODE	377:39	377:39	13	;
JUMP_STATEMENT	378:4	378:9	12	break DESTINATION ;
KEYWORD	378:4	378:4	13	break
LEAF_NODE	378:4	378:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	378:9	378:9	13	;
LABEL	379:3	379:10	12	default :
LEAF_NODE	379:3	379:3	13	default
LEAF_NODE	379:10	379:10	13	:
EXPR_STATEMENT	380:4	381:51	12	fprintf ( fd , "%s%u (0x%x)" , sep , td -> td_sampleinfo [ i ] , td -> td_sampleinfo [ i ] ) ;
EXPR	380:4	380:4	13	fprintf ( fd , "%s%u (0x%x)" , sep , td -> td_sampleinfo [ i ] , td -> td_sampleinfo [ i ] )
FUNCTION_CALL	380:4	381:50	14	fprintf ( fd , "%s%u (0x%x)" , sep , td -> td_sampleinfo [ i ] , td -> td_sampleinfo [ i ] )
CALLEE	380:4	380:4	15	fprintf
LEAF_NODE	380:4	380:4	16	fprintf
LEAF_NODE	380:11	380:11	15	(
ARGUMENT	380:12	380:12	15	fd
FIELD	380:12	380:12	16	fd
LEAF_NODE	380:12	380:12	17	fd
LEAF_NODE	380:14	380:14	15	,
ARGUMENT	380:16	380:16	15	"%s%u (0x%x)"
FIELD	380:16	380:16	16	"%s%u (0x%x)"
LEAF_NODE	380:16	380:16	17	"%s%u (0x%x)"
LEAF_NODE	380:29	380:29	15	,
ARGUMENT	380:31	380:31	15	sep
FIELD	380:31	380:31	16	sep
LEAF_NODE	380:31	380:31	17	sep
LEAF_NODE	380:34	380:34	15	,
ARGUMENT	381:8	381:8	15	td -> td_sampleinfo [ i ]
FIELD	381:8	381:27	16	td -> td_sampleinfo [ i ]
LEAF_NODE	381:8	381:8	17	td
LEAF_NODE	381:10	381:10	17	->
LEAF_NODE	381:12	381:12	17	td_sampleinfo
LEAF_NODE	381:25	381:25	17	[
EXPR	381:26	381:26	17	i
FIELD	381:26	381:26	18	i
LEAF_NODE	381:26	381:26	19	i
LEAF_NODE	381:27	381:27	17	]
LEAF_NODE	381:28	381:28	15	,
ARGUMENT	381:30	381:30	15	td -> td_sampleinfo [ i ]
FIELD	381:30	381:49	16	td -> td_sampleinfo [ i ]
LEAF_NODE	381:30	381:30	17	td
LEAF_NODE	381:32	381:32	17	->
LEAF_NODE	381:34	381:34	17	td_sampleinfo
LEAF_NODE	381:47	381:47	17	[
EXPR	381:48	381:48	17	i
FIELD	381:48	381:48	18	i
LEAF_NODE	381:48	381:48	19	i
LEAF_NODE	381:49	381:49	17	]
LEAF_NODE	381:50	381:50	15	)
LEAF_NODE	381:51	381:51	13	;
JUMP_STATEMENT	382:4	382:9	12	break DESTINATION ;
KEYWORD	382:4	382:4	13	break
LEAF_NODE	382:4	382:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	382:9	382:9	13	;
LEAF_NODE	383:3	383:3	11	}
EXPR_STATEMENT	384:3	384:13	9	sep = ", " ;
EXPR	384:3	384:3	10	sep = ", "
ASSIGN	384:3	384:9	11	sep = ", "
LVAL	384:3	384:3	12	sep
FIELD	384:3	384:3	13	sep
LEAF_NODE	384:3	384:3	14	sep
ASSIGN_OP	384:7	384:7	12	=
LEAF_NODE	384:7	384:7	13	=
RVAL	384:9	384:9	12	", "
FIELD	384:9	384:9	13	", "
LEAF_NODE	384:9	384:9	14	", "
LEAF_NODE	384:13	384:13	10	;
LEAF_NODE	385:2	385:2	8	}
EXPR_STATEMENT	386:2	386:20	6	fprintf ( fd , ">\n" ) ;
EXPR	386:2	386:2	7	fprintf ( fd , ">\n" )
FUNCTION_CALL	386:2	386:19	8	fprintf ( fd , ">\n" )
CALLEE	386:2	386:2	9	fprintf
LEAF_NODE	386:2	386:2	10	fprintf
LEAF_NODE	386:9	386:9	9	(
ARGUMENT	386:10	386:10	9	fd
FIELD	386:10	386:10	10	fd
LEAF_NODE	386:10	386:10	11	fd
LEAF_NODE	386:12	386:12	9	,
ARGUMENT	386:14	386:14	9	">\n"
FIELD	386:14	386:14	10	">\n"
LEAF_NODE	386:14	386:14	11	">\n"
LEAF_NODE	386:19	386:19	9	)
LEAF_NODE	386:20	386:20	7	;
LEAF_NODE	387:1	387:1	5	}
SELECTION	388:1	388:39	3	
KEYWORD	388:1	388:1	4	if
LEAF_NODE	388:1	388:1	5	if
LEAF_NODE	388:4	388:4	4	(
CONDITION	388:5	388:5	4	TIFFFieldSet ( tif , FIELD_INKNAMES )
EXPR	388:5	388:5	5	TIFFFieldSet ( tif , FIELD_INKNAMES )
FUNCTION_CALL	388:5	388:36	6	TIFFFieldSet ( tif , FIELD_INKNAMES )
CALLEE	388:5	388:5	7	TIFFFieldSet
LEAF_NODE	388:5	388:5	8	TIFFFieldSet
LEAF_NODE	388:17	388:17	7	(
ARGUMENT	388:18	388:18	7	tif
FIELD	388:18	388:18	8	tif
LEAF_NODE	388:18	388:18	9	tif
LEAF_NODE	388:21	388:21	7	,
ARGUMENT	388:22	388:22	7	FIELD_INKNAMES
FIELD	388:22	388:22	8	FIELD_INKNAMES
LEAF_NODE	388:22	388:22	9	FIELD_INKNAMES
LEAF_NODE	388:36	388:36	7	)
LEAF_NODE	388:37	388:37	4	)
STATEMENTS	388:39	404:1	4	
LEAF_NODE	388:39	388:39	5	{
STATEMENTS	389:2	403:16	5	
SIMPLE_DECL	389:2	389:10	6	char * cp ;
VAR_DECL	389:2	389:8	7	char * cp
TYPE	389:2	389:6	8	char *
TYPE_NAME	389:2	389:2	9	char
LEAF_NODE	389:2	389:2	10	char
POINTER	389:6	389:6	9	*
LEAF_NODE	389:6	389:6	10	*
NAME	389:8	389:8	8	cp
LEAF_NODE	389:8	389:8	9	cp
LEAF_NODE	389:10	389:10	7	;
SIMPLE_DECL	390:2	390:10	6	uint16 i ;
VAR_DECL	390:2	390:9	7	uint16 i
TYPE	390:2	390:2	8	uint16
TYPE_NAME	390:2	390:2	9	uint16
LEAF_NODE	390:2	390:2	10	uint16
NAME	390:9	390:9	8	i
LEAF_NODE	390:9	390:9	9	i
LEAF_NODE	390:10	390:10	7	;
EXPR_STATEMENT	391:2	391:30	6	fprintf ( fd , "  Ink Names: " ) ;
EXPR	391:2	391:2	7	fprintf ( fd , "  Ink Names: " )
FUNCTION_CALL	391:2	391:29	8	fprintf ( fd , "  Ink Names: " )
CALLEE	391:2	391:2	9	fprintf
LEAF_NODE	391:2	391:2	10	fprintf
LEAF_NODE	391:9	391:9	9	(
ARGUMENT	391:10	391:10	9	fd
FIELD	391:10	391:10	10	fd
LEAF_NODE	391:10	391:10	11	fd
LEAF_NODE	391:12	391:12	9	,
ARGUMENT	391:14	391:14	9	"  Ink Names: "
FIELD	391:14	391:14	10	"  Ink Names: "
LEAF_NODE	391:14	391:14	11	"  Ink Names: "
LEAF_NODE	391:29	391:29	9	)
LEAF_NODE	391:30	391:30	7	;
EXPR_STATEMENT	392:2	392:28	6	i = td -> td_samplesperpixel ;
EXPR	392:2	392:2	7	i = td -> td_samplesperpixel
ASSIGN	392:2	392:6	8	i = td -> td_samplesperpixel
LVAL	392:2	392:2	9	i
FIELD	392:2	392:2	10	i
LEAF_NODE	392:2	392:2	11	i
ASSIGN_OP	392:4	392:4	9	=
LEAF_NODE	392:4	392:4	10	=
RVAL	392:6	392:6	9	td -> td_samplesperpixel
FIELD	392:6	392:10	10	td -> td_samplesperpixel
LEAF_NODE	392:6	392:6	11	td
LEAF_NODE	392:8	392:8	11	->
LEAF_NODE	392:10	392:10	11	td_samplesperpixel
LEAF_NODE	392:28	392:28	7	;
EXPR_STATEMENT	393:2	393:10	6	sep = "" ;
EXPR	393:2	393:2	7	sep = ""
ASSIGN	393:2	393:8	8	sep = ""
LVAL	393:2	393:2	9	sep
FIELD	393:2	393:2	10	sep
LEAF_NODE	393:2	393:2	11	sep
ASSIGN_OP	393:6	393:6	9	=
LEAF_NODE	393:6	393:6	10	=
RVAL	393:8	393:8	9	""
FIELD	393:8	393:8	10	""
LEAF_NODE	393:8	393:8	11	""
LEAF_NODE	393:10	393:10	7	;
ITERATION	394:2	396:36	6	
KEYWORD	394:2	394:2	7	for
LEAF_NODE	394:2	394:2	8	for
LEAF_NODE	394:6	394:6	7	(
FOR_INIT	394:7	394:27	7	cp = td -> td_inknames ;
EXPR	394:7	394:7	8	cp = td -> td_inknames
ASSIGN	394:7	394:12	9	cp = td -> td_inknames
LVAL	394:7	394:7	10	cp
FIELD	394:7	394:7	11	cp
LEAF_NODE	394:7	394:7	12	cp
ASSIGN_OP	394:10	394:10	10	=
LEAF_NODE	394:10	394:10	11	=
RVAL	394:12	394:12	10	td -> td_inknames
FIELD	394:12	394:16	11	td -> td_inknames
LEAF_NODE	394:12	394:12	12	td
LEAF_NODE	394:14	394:14	12	->
LEAF_NODE	394:16	394:16	12	td_inknames
LEAF_NODE	394:27	394:27	8	;
CONDITION	395:7	395:7	7	i > 0 && cp < td -> td_inknames + td -> td_inknameslen
EXPR	395:7	395:7	8	i > 0 && cp < td -> td_inknames + td -> td_inknameslen
AND	395:7	395:16	9	i > 0 && cp < td -> td_inknames + td -> td_inknameslen
EXPR	395:7	395:11	10	i > 0
FIELD	395:7	395:7	11	i
LEAF_NODE	395:7	395:7	12	i
REL_OPERATOR	395:9	395:9	11	>
LEAF_NODE	395:9	395:9	12	>
FIELD	395:11	395:11	11	0
LEAF_NODE	395:11	395:11	12	0
LEAF_NODE	395:13	395:13	10	&&
EXPR	395:16	395:39	10	cp < td -> td_inknames + td -> td_inknameslen
FIELD	395:16	395:16	11	cp
LEAF_NODE	395:16	395:16	12	cp
REL_OPERATOR	395:19	395:19	11	<
LEAF_NODE	395:19	395:19	12	<
FIELD	395:21	395:25	11	td -> td_inknames
LEAF_NODE	395:21	395:21	12	td
LEAF_NODE	395:23	395:23	12	->
LEAF_NODE	395:25	395:25	12	td_inknames
LEAF_NODE	395:37	395:37	11	+
FIELD	395:39	395:43	11	td -> td_inknameslen
LEAF_NODE	395:39	395:39	12	td
LEAF_NODE	395:41	395:41	12	->
LEAF_NODE	395:43	395:43	12	td_inknameslen
LEAF_NODE	395:57	395:57	7	;
FOR_EXPR	396:7	396:7	7	cp = strchr ( cp , '\0' ) + 1 , i --
EXPR	396:7	396:31	8	cp = strchr ( cp , '\0' ) + 1 , i --
ASSIGN	396:7	396:12	9	cp = strchr ( cp , '\0' ) + 1
LVAL	396:7	396:7	10	cp
FIELD	396:7	396:7	11	cp
LEAF_NODE	396:7	396:7	12	cp
ASSIGN_OP	396:10	396:10	10	=
LEAF_NODE	396:10	396:10	11	=
RVAL	396:12	396:28	10	strchr ( cp , '\0' ) + 1
FUNCTION_CALL	396:12	396:26	11	strchr ( cp , '\0' )
CALLEE	396:12	396:12	12	strchr
LEAF_NODE	396:12	396:12	13	strchr
LEAF_NODE	396:18	396:18	12	(
ARGUMENT	396:19	396:19	12	cp
FIELD	396:19	396:19	13	cp
LEAF_NODE	396:19	396:19	14	cp
LEAF_NODE	396:21	396:21	12	,
ARGUMENT	396:22	396:22	12	'\0'
FIELD	396:22	396:22	13	'\0'
LEAF_NODE	396:22	396:22	14	'\0'
LEAF_NODE	396:26	396:26	12	)
LEAF_NODE	396:27	396:27	11	+
FIELD	396:28	396:28	11	1
LEAF_NODE	396:28	396:28	12	1
LEAF_NODE	396:29	396:29	9	,
FIELD	396:31	396:32	9	i --
LEAF_NODE	396:31	396:31	10	i
LEAF_NODE	396:32	396:32	10	--
LEAF_NODE	396:34	396:34	7	)
STATEMENTS	396:36	402:2	7	
LEAF_NODE	396:36	396:36	8	{
STATEMENTS	397:3	401:3	8	
SIMPLE_DECL	397:3	398:47	9	size_t max_chars ; max_chars = td -> td_inknameslen - ( cp - td -> td_inknames ) ;
VAR_DECL	397:3	397:10	10	size_t max_chars ; max_chars = td -> td_inknameslen - ( cp - td -> td_inknames )
TYPE	397:3	397:3	11	size_t
TYPE_NAME	397:3	397:3	12	size_t
LEAF_NODE	397:3	397:3	13	size_t
NAME	397:10	397:10	11	max_chars
LEAF_NODE	397:10	397:10	12	max_chars
LEAF_NODE	0:0	0:0	11	;
INIT	397:10	397:10	11	max_chars = td -> td_inknameslen - ( cp - td -> td_inknames )
ASSIGN	397:10	398:4	12	max_chars = td -> td_inknameslen - ( cp - td -> td_inknames )
LVAL	397:10	397:10	13	max_chars
NAME	397:10	397:10	14	max_chars
LEAF_NODE	397:10	397:10	15	max_chars
ASSIGN_OP	397:20	397:20	13	=
LEAF_NODE	397:20	397:20	14	=
RVAL	398:4	398:46	13	td -> td_inknameslen - ( cp - td -> td_inknames )
FIELD	398:4	398:8	14	td -> td_inknameslen
LEAF_NODE	398:4	398:4	15	td
LEAF_NODE	398:6	398:6	15	->
LEAF_NODE	398:8	398:8	15	td_inknameslen
LEAF_NODE	398:23	398:23	14	-
LEAF_NODE	398:25	398:25	14	(
FIELD	398:26	398:26	14	cp
LEAF_NODE	398:26	398:26	15	cp
LEAF_NODE	398:29	398:29	14	-
FIELD	398:31	398:35	14	td -> td_inknames
LEAF_NODE	398:31	398:31	15	td
LEAF_NODE	398:33	398:33	15	->
LEAF_NODE	398:35	398:35	15	td_inknames
LEAF_NODE	398:46	398:46	14	)
LEAF_NODE	398:47	398:47	10	;
EXPR_STATEMENT	399:3	399:17	9	fputs ( sep , fd ) ;
EXPR	399:3	399:3	10	fputs ( sep , fd )
FUNCTION_CALL	399:3	399:16	11	fputs ( sep , fd )
CALLEE	399:3	399:3	12	fputs
LEAF_NODE	399:3	399:3	13	fputs
LEAF_NODE	399:8	399:8	12	(
ARGUMENT	399:9	399:9	12	sep
FIELD	399:9	399:9	13	sep
LEAF_NODE	399:9	399:9	14	sep
LEAF_NODE	399:12	399:12	12	,
ARGUMENT	399:14	399:14	12	fd
FIELD	399:14	399:14	13	fd
LEAF_NODE	399:14	399:14	14	fd
LEAF_NODE	399:16	399:16	12	)
LEAF_NODE	399:17	399:17	10	;
EXPR_STATEMENT	400:3	400:44	9	_TIFFprintAsciiBounded ( fd , cp , max_chars ) ;
EXPR	400:3	400:3	10	_TIFFprintAsciiBounded ( fd , cp , max_chars )
FUNCTION_CALL	400:3	400:43	11	_TIFFprintAsciiBounded ( fd , cp , max_chars )
CALLEE	400:3	400:3	12	_TIFFprintAsciiBounded
LEAF_NODE	400:3	400:3	13	_TIFFprintAsciiBounded
LEAF_NODE	400:25	400:25	12	(
ARGUMENT	400:26	400:26	12	fd
FIELD	400:26	400:26	13	fd
LEAF_NODE	400:26	400:26	14	fd
LEAF_NODE	400:28	400:28	12	,
ARGUMENT	400:30	400:30	12	cp
FIELD	400:30	400:30	13	cp
LEAF_NODE	400:30	400:30	14	cp
LEAF_NODE	400:32	400:32	12	,
ARGUMENT	400:34	400:34	12	max_chars
FIELD	400:34	400:34	13	max_chars
LEAF_NODE	400:34	400:34	14	max_chars
LEAF_NODE	400:43	400:43	12	)
LEAF_NODE	400:44	400:44	10	;
EXPR_STATEMENT	401:3	401:13	9	sep = ", " ;
EXPR	401:3	401:3	10	sep = ", "
ASSIGN	401:3	401:9	11	sep = ", "
LVAL	401:3	401:3	12	sep
FIELD	401:3	401:3	13	sep
LEAF_NODE	401:3	401:3	14	sep
ASSIGN_OP	401:7	401:7	12	=
LEAF_NODE	401:7	401:7	13	=
RVAL	401:9	401:9	12	", "
FIELD	401:9	401:9	13	", "
LEAF_NODE	401:9	401:9	14	", "
LEAF_NODE	401:13	401:13	10	;
LEAF_NODE	402:2	402:2	8	}
EXPR_STATEMENT	403:16	403:31	6	fputs ( "\n" , fd ) ;
EXPR	403:16	403:16	7	fputs ( "\n" , fd )
FUNCTION_CALL	403:16	403:30	8	fputs ( "\n" , fd )
CALLEE	403:16	403:16	9	fputs
LEAF_NODE	403:16	403:16	10	fputs
LEAF_NODE	403:21	403:21	9	(
ARGUMENT	403:22	403:22	9	"\n"
FIELD	403:22	403:22	10	"\n"
LEAF_NODE	403:22	403:22	11	"\n"
LEAF_NODE	403:26	403:26	9	,
ARGUMENT	403:28	403:28	9	fd
FIELD	403:28	403:28	10	fd
LEAF_NODE	403:28	403:28	11	fd
LEAF_NODE	403:30	403:30	9	)
LEAF_NODE	403:31	403:31	7	;
LEAF_NODE	404:1	404:1	5	}
SELECTION	405:1	405:44	3	
KEYWORD	405:1	405:1	4	if
LEAF_NODE	405:1	405:1	5	if
LEAF_NODE	405:4	405:4	4	(
CONDITION	405:5	405:5	4	TIFFFieldSet ( tif , FIELD_THRESHHOLDING )
EXPR	405:5	405:5	5	TIFFFieldSet ( tif , FIELD_THRESHHOLDING )
FUNCTION_CALL	405:5	405:41	6	TIFFFieldSet ( tif , FIELD_THRESHHOLDING )
CALLEE	405:5	405:5	7	TIFFFieldSet
LEAF_NODE	405:5	405:5	8	TIFFFieldSet
LEAF_NODE	405:17	405:17	7	(
ARGUMENT	405:18	405:18	7	tif
FIELD	405:18	405:18	8	tif
LEAF_NODE	405:18	405:18	9	tif
LEAF_NODE	405:21	405:21	7	,
ARGUMENT	405:22	405:22	7	FIELD_THRESHHOLDING
FIELD	405:22	405:22	8	FIELD_THRESHHOLDING
LEAF_NODE	405:22	405:22	9	FIELD_THRESHHOLDING
LEAF_NODE	405:41	405:41	7	)
LEAF_NODE	405:42	405:42	4	)
STATEMENTS	405:44	422:1	4	
LEAF_NODE	405:44	405:44	5	{
STATEMENTS	406:2	407:2	5	
EXPR_STATEMENT	406:2	406:33	6	fprintf ( fd , "  Thresholding: " ) ;
EXPR	406:2	406:2	7	fprintf ( fd , "  Thresholding: " )
FUNCTION_CALL	406:2	406:32	8	fprintf ( fd , "  Thresholding: " )
CALLEE	406:2	406:2	9	fprintf
LEAF_NODE	406:2	406:2	10	fprintf
LEAF_NODE	406:9	406:9	9	(
ARGUMENT	406:10	406:10	9	fd
FIELD	406:10	406:10	10	fd
LEAF_NODE	406:10	406:10	11	fd
LEAF_NODE	406:12	406:12	9	,
ARGUMENT	406:14	406:14	9	"  Thresholding: "
FIELD	406:14	406:14	10	"  Thresholding: "
LEAF_NODE	406:14	406:14	11	"  Thresholding: "
LEAF_NODE	406:32	406:32	9	)
LEAF_NODE	406:33	406:33	7	;
SELECTION	407:2	407:32	6	
KEYWORD	407:2	407:2	7	switch
LEAF_NODE	407:2	407:2	8	switch
LEAF_NODE	407:9	407:9	7	(
CONDITION	407:10	407:10	7	td -> td_threshholding
EXPR	407:10	407:10	8	td -> td_threshholding
FIELD	407:10	407:14	9	td -> td_threshholding
LEAF_NODE	407:10	407:10	10	td
LEAF_NODE	407:12	407:12	10	->
LEAF_NODE	407:14	407:14	10	td_threshholding
LEAF_NODE	407:30	407:30	7	)
STATEMENTS	407:32	421:2	7	
LEAF_NODE	407:32	407:32	8	{
STATEMENTS	408:2	420:3	8	
LABEL	408:2	408:25	9	case THRESHHOLD_BILEVEL :
LEAF_NODE	408:2	408:2	10	case
LEAF_NODE	408:7	408:7	10	THRESHHOLD_BILEVEL
LEAF_NODE	408:25	408:25	10	:
EXPR_STATEMENT	409:3	409:36	9	fprintf ( fd , "bilevel art scan\n" ) ;
EXPR	409:3	409:3	10	fprintf ( fd , "bilevel art scan\n" )
FUNCTION_CALL	409:3	409:35	11	fprintf ( fd , "bilevel art scan\n" )
CALLEE	409:3	409:3	12	fprintf
LEAF_NODE	409:3	409:3	13	fprintf
LEAF_NODE	409:10	409:10	12	(
ARGUMENT	409:11	409:11	12	fd
FIELD	409:11	409:11	13	fd
LEAF_NODE	409:11	409:11	14	fd
LEAF_NODE	409:13	409:13	12	,
ARGUMENT	409:15	409:15	12	"bilevel art scan\n"
FIELD	409:15	409:15	13	"bilevel art scan\n"
LEAF_NODE	409:15	409:15	14	"bilevel art scan\n"
LEAF_NODE	409:35	409:35	12	)
LEAF_NODE	409:36	409:36	10	;
JUMP_STATEMENT	410:3	410:8	9	break DESTINATION ;
KEYWORD	410:3	410:3	10	break
LEAF_NODE	410:3	410:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	410:8	410:8	10	;
LABEL	411:2	411:26	9	case THRESHHOLD_HALFTONE :
LEAF_NODE	411:2	411:2	10	case
LEAF_NODE	411:7	411:7	10	THRESHHOLD_HALFTONE
LEAF_NODE	411:26	411:26	10	:
EXPR_STATEMENT	412:3	412:45	9	fprintf ( fd , "halftone or dithered scan\n" ) ;
EXPR	412:3	412:3	10	fprintf ( fd , "halftone or dithered scan\n" )
FUNCTION_CALL	412:3	412:44	11	fprintf ( fd , "halftone or dithered scan\n" )
CALLEE	412:3	412:3	12	fprintf
LEAF_NODE	412:3	412:3	13	fprintf
LEAF_NODE	412:10	412:10	12	(
ARGUMENT	412:11	412:11	12	fd
FIELD	412:11	412:11	13	fd
LEAF_NODE	412:11	412:11	14	fd
LEAF_NODE	412:13	412:13	12	,
ARGUMENT	412:15	412:15	12	"halftone or dithered scan\n"
FIELD	412:15	412:15	13	"halftone or dithered scan\n"
LEAF_NODE	412:15	412:15	14	"halftone or dithered scan\n"
LEAF_NODE	412:44	412:44	12	)
LEAF_NODE	412:45	412:45	10	;
JUMP_STATEMENT	413:3	413:8	9	break DESTINATION ;
KEYWORD	413:3	413:3	10	break
LEAF_NODE	413:3	413:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	413:8	413:8	10	;
LABEL	414:2	414:30	9	case THRESHHOLD_ERRORDIFFUSE :
LEAF_NODE	414:2	414:2	10	case
LEAF_NODE	414:7	414:7	10	THRESHHOLD_ERRORDIFFUSE
LEAF_NODE	414:30	414:30	10	:
EXPR_STATEMENT	415:3	415:34	9	fprintf ( fd , "error diffused\n" ) ;
EXPR	415:3	415:3	10	fprintf ( fd , "error diffused\n" )
FUNCTION_CALL	415:3	415:33	11	fprintf ( fd , "error diffused\n" )
CALLEE	415:3	415:3	12	fprintf
LEAF_NODE	415:3	415:3	13	fprintf
LEAF_NODE	415:10	415:10	12	(
ARGUMENT	415:11	415:11	12	fd
FIELD	415:11	415:11	13	fd
LEAF_NODE	415:11	415:11	14	fd
LEAF_NODE	415:13	415:13	12	,
ARGUMENT	415:15	415:15	12	"error diffused\n"
FIELD	415:15	415:15	13	"error diffused\n"
LEAF_NODE	415:15	415:15	14	"error diffused\n"
LEAF_NODE	415:33	415:33	12	)
LEAF_NODE	415:34	415:34	10	;
JUMP_STATEMENT	416:3	416:8	9	break DESTINATION ;
KEYWORD	416:3	416:3	10	break
LEAF_NODE	416:3	416:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	416:8	416:8	10	;
LABEL	417:2	417:9	9	default :
LEAF_NODE	417:2	417:2	10	default
LEAF_NODE	417:9	417:9	10	:
EXPR_STATEMENT	418:3	419:50	9	fprintf ( fd , "%u (0x%x)\n" , td -> td_threshholding , td -> td_threshholding ) ;
EXPR	418:3	418:3	10	fprintf ( fd , "%u (0x%x)\n" , td -> td_threshholding , td -> td_threshholding )
FUNCTION_CALL	418:3	419:49	11	fprintf ( fd , "%u (0x%x)\n" , td -> td_threshholding , td -> td_threshholding )
CALLEE	418:3	418:3	12	fprintf
LEAF_NODE	418:3	418:3	13	fprintf
LEAF_NODE	418:10	418:10	12	(
ARGUMENT	418:11	418:11	12	fd
FIELD	418:11	418:11	13	fd
LEAF_NODE	418:11	418:11	14	fd
LEAF_NODE	418:13	418:13	12	,
ARGUMENT	418:15	418:15	12	"%u (0x%x)\n"
FIELD	418:15	418:15	13	"%u (0x%x)\n"
LEAF_NODE	418:15	418:15	14	"%u (0x%x)\n"
LEAF_NODE	418:28	418:28	12	,
ARGUMENT	419:7	419:7	12	td -> td_threshholding
FIELD	419:7	419:11	13	td -> td_threshholding
LEAF_NODE	419:7	419:7	14	td
LEAF_NODE	419:9	419:9	14	->
LEAF_NODE	419:11	419:11	14	td_threshholding
LEAF_NODE	419:27	419:27	12	,
ARGUMENT	419:29	419:29	12	td -> td_threshholding
FIELD	419:29	419:33	13	td -> td_threshholding
LEAF_NODE	419:29	419:29	14	td
LEAF_NODE	419:31	419:31	14	->
LEAF_NODE	419:33	419:33	14	td_threshholding
LEAF_NODE	419:49	419:49	12	)
LEAF_NODE	419:50	419:50	10	;
JUMP_STATEMENT	420:3	420:8	9	break DESTINATION ;
KEYWORD	420:3	420:3	10	break
LEAF_NODE	420:3	420:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	420:8	420:8	10	;
LEAF_NODE	421:2	421:2	8	}
LEAF_NODE	422:1	422:1	5	}
SELECTION	423:1	423:40	3	
KEYWORD	423:1	423:1	4	if
LEAF_NODE	423:1	423:1	5	if
LEAF_NODE	423:4	423:4	4	(
CONDITION	423:5	423:5	4	TIFFFieldSet ( tif , FIELD_FILLORDER )
EXPR	423:5	423:5	5	TIFFFieldSet ( tif , FIELD_FILLORDER )
FUNCTION_CALL	423:5	423:37	6	TIFFFieldSet ( tif , FIELD_FILLORDER )
CALLEE	423:5	423:5	7	TIFFFieldSet
LEAF_NODE	423:5	423:5	8	TIFFFieldSet
LEAF_NODE	423:17	423:17	7	(
ARGUMENT	423:18	423:18	7	tif
FIELD	423:18	423:18	8	tif
LEAF_NODE	423:18	423:18	9	tif
LEAF_NODE	423:21	423:21	7	,
ARGUMENT	423:22	423:22	7	FIELD_FILLORDER
FIELD	423:22	423:22	8	FIELD_FILLORDER
LEAF_NODE	423:22	423:22	9	FIELD_FILLORDER
LEAF_NODE	423:37	423:37	7	)
LEAF_NODE	423:38	423:38	4	)
STATEMENTS	423:40	437:1	4	
LEAF_NODE	423:40	423:40	5	{
STATEMENTS	424:2	425:2	5	
EXPR_STATEMENT	424:2	424:30	6	fprintf ( fd , "  FillOrder: " ) ;
EXPR	424:2	424:2	7	fprintf ( fd , "  FillOrder: " )
FUNCTION_CALL	424:2	424:29	8	fprintf ( fd , "  FillOrder: " )
CALLEE	424:2	424:2	9	fprintf
LEAF_NODE	424:2	424:2	10	fprintf
LEAF_NODE	424:9	424:9	9	(
ARGUMENT	424:10	424:10	9	fd
FIELD	424:10	424:10	10	fd
LEAF_NODE	424:10	424:10	11	fd
LEAF_NODE	424:12	424:12	9	,
ARGUMENT	424:14	424:14	9	"  FillOrder: "
FIELD	424:14	424:14	10	"  FillOrder: "
LEAF_NODE	424:14	424:14	11	"  FillOrder: "
LEAF_NODE	424:29	424:29	9	)
LEAF_NODE	424:30	424:30	7	;
SELECTION	425:2	425:28	6	
KEYWORD	425:2	425:2	7	switch
LEAF_NODE	425:2	425:2	8	switch
LEAF_NODE	425:9	425:9	7	(
CONDITION	425:10	425:10	7	td -> td_fillorder
EXPR	425:10	425:10	8	td -> td_fillorder
FIELD	425:10	425:14	9	td -> td_fillorder
LEAF_NODE	425:10	425:10	10	td
LEAF_NODE	425:12	425:12	10	->
LEAF_NODE	425:14	425:14	10	td_fillorder
LEAF_NODE	425:26	425:26	7	)
STATEMENTS	425:28	436:2	7	
LEAF_NODE	425:28	425:28	8	{
STATEMENTS	426:2	435:3	8	
LABEL	426:2	426:24	9	case FILLORDER_MSB2LSB :
LEAF_NODE	426:2	426:2	10	case
LEAF_NODE	426:7	426:7	10	FILLORDER_MSB2LSB
LEAF_NODE	426:24	426:24	10	:
EXPR_STATEMENT	427:3	427:30	9	fprintf ( fd , "msb-to-lsb\n" ) ;
EXPR	427:3	427:3	10	fprintf ( fd , "msb-to-lsb\n" )
FUNCTION_CALL	427:3	427:29	11	fprintf ( fd , "msb-to-lsb\n" )
CALLEE	427:3	427:3	12	fprintf
LEAF_NODE	427:3	427:3	13	fprintf
LEAF_NODE	427:10	427:10	12	(
ARGUMENT	427:11	427:11	12	fd
FIELD	427:11	427:11	13	fd
LEAF_NODE	427:11	427:11	14	fd
LEAF_NODE	427:13	427:13	12	,
ARGUMENT	427:15	427:15	12	"msb-to-lsb\n"
FIELD	427:15	427:15	13	"msb-to-lsb\n"
LEAF_NODE	427:15	427:15	14	"msb-to-lsb\n"
LEAF_NODE	427:29	427:29	12	)
LEAF_NODE	427:30	427:30	10	;
JUMP_STATEMENT	428:3	428:8	9	break DESTINATION ;
KEYWORD	428:3	428:3	10	break
LEAF_NODE	428:3	428:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	428:8	428:8	10	;
LABEL	429:2	429:24	9	case FILLORDER_LSB2MSB :
LEAF_NODE	429:2	429:2	10	case
LEAF_NODE	429:7	429:7	10	FILLORDER_LSB2MSB
LEAF_NODE	429:24	429:24	10	:
EXPR_STATEMENT	430:3	430:30	9	fprintf ( fd , "lsb-to-msb\n" ) ;
EXPR	430:3	430:3	10	fprintf ( fd , "lsb-to-msb\n" )
FUNCTION_CALL	430:3	430:29	11	fprintf ( fd , "lsb-to-msb\n" )
CALLEE	430:3	430:3	12	fprintf
LEAF_NODE	430:3	430:3	13	fprintf
LEAF_NODE	430:10	430:10	12	(
ARGUMENT	430:11	430:11	12	fd
FIELD	430:11	430:11	13	fd
LEAF_NODE	430:11	430:11	14	fd
LEAF_NODE	430:13	430:13	12	,
ARGUMENT	430:15	430:15	12	"lsb-to-msb\n"
FIELD	430:15	430:15	13	"lsb-to-msb\n"
LEAF_NODE	430:15	430:15	14	"lsb-to-msb\n"
LEAF_NODE	430:29	430:29	12	)
LEAF_NODE	430:30	430:30	10	;
JUMP_STATEMENT	431:3	431:8	9	break DESTINATION ;
KEYWORD	431:3	431:3	10	break
LEAF_NODE	431:3	431:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	431:8	431:8	10	;
LABEL	432:2	432:9	9	default :
LEAF_NODE	432:2	432:2	10	default
LEAF_NODE	432:9	432:9	10	:
EXPR_STATEMENT	433:3	434:42	9	fprintf ( fd , "%u (0x%x)\n" , td -> td_fillorder , td -> td_fillorder ) ;
EXPR	433:3	433:3	10	fprintf ( fd , "%u (0x%x)\n" , td -> td_fillorder , td -> td_fillorder )
FUNCTION_CALL	433:3	434:41	11	fprintf ( fd , "%u (0x%x)\n" , td -> td_fillorder , td -> td_fillorder )
CALLEE	433:3	433:3	12	fprintf
LEAF_NODE	433:3	433:3	13	fprintf
LEAF_NODE	433:10	433:10	12	(
ARGUMENT	433:11	433:11	12	fd
FIELD	433:11	433:11	13	fd
LEAF_NODE	433:11	433:11	14	fd
LEAF_NODE	433:13	433:13	12	,
ARGUMENT	433:15	433:15	12	"%u (0x%x)\n"
FIELD	433:15	433:15	13	"%u (0x%x)\n"
LEAF_NODE	433:15	433:15	14	"%u (0x%x)\n"
LEAF_NODE	433:28	433:28	12	,
ARGUMENT	434:7	434:7	12	td -> td_fillorder
FIELD	434:7	434:11	13	td -> td_fillorder
LEAF_NODE	434:7	434:7	14	td
LEAF_NODE	434:9	434:9	14	->
LEAF_NODE	434:11	434:11	14	td_fillorder
LEAF_NODE	434:23	434:23	12	,
ARGUMENT	434:25	434:25	12	td -> td_fillorder
FIELD	434:25	434:29	13	td -> td_fillorder
LEAF_NODE	434:25	434:25	14	td
LEAF_NODE	434:27	434:27	14	->
LEAF_NODE	434:29	434:29	14	td_fillorder
LEAF_NODE	434:41	434:41	12	)
LEAF_NODE	434:42	434:42	10	;
JUMP_STATEMENT	435:3	435:8	9	break DESTINATION ;
KEYWORD	435:3	435:3	10	break
LEAF_NODE	435:3	435:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	435:8	435:8	10	;
LEAF_NODE	436:2	436:2	8	}
LEAF_NODE	437:1	437:1	5	}
SELECTION	438:1	439:8	3	
KEYWORD	438:1	438:1	4	if
LEAF_NODE	438:1	438:1	5	if
LEAF_NODE	438:4	438:4	4	(
CONDITION	438:5	438:5	4	TIFFFieldSet ( tif , FIELD_YCBCRSUBSAMPLING )
EXPR	438:5	438:5	5	TIFFFieldSet ( tif , FIELD_YCBCRSUBSAMPLING )
FUNCTION_CALL	438:5	438:44	6	TIFFFieldSet ( tif , FIELD_YCBCRSUBSAMPLING )
CALLEE	438:5	438:5	7	TIFFFieldSet
LEAF_NODE	438:5	438:5	8	TIFFFieldSet
LEAF_NODE	438:17	438:17	7	(
ARGUMENT	438:18	438:18	7	tif
FIELD	438:18	438:18	8	tif
LEAF_NODE	438:18	438:18	9	tif
LEAF_NODE	438:21	438:21	7	,
ARGUMENT	438:22	438:22	7	FIELD_YCBCRSUBSAMPLING
FIELD	438:22	438:22	8	FIELD_YCBCRSUBSAMPLING
LEAF_NODE	438:22	438:22	9	FIELD_YCBCRSUBSAMPLING
LEAF_NODE	438:44	438:44	7	)
LEAF_NODE	438:45	438:45	4	)
STATEMENTS	439:8	442:1	4	
LEAF_NODE	439:8	439:8	5	{
STATEMENTS	440:2	440:2	5	
EXPR_STATEMENT	440:2	441:59	6	fprintf ( fd , "  YCbCr Subsampling: %u, %u\n" , td -> td_ycbcrsubsampling [ 0 ] , td -> td_ycbcrsubsampling [ 1 ] ) ;
EXPR	440:2	440:2	7	fprintf ( fd , "  YCbCr Subsampling: %u, %u\n" , td -> td_ycbcrsubsampling [ 0 ] , td -> td_ycbcrsubsampling [ 1 ] )
FUNCTION_CALL	440:2	441:58	8	fprintf ( fd , "  YCbCr Subsampling: %u, %u\n" , td -> td_ycbcrsubsampling [ 0 ] , td -> td_ycbcrsubsampling [ 1 ] )
CALLEE	440:2	440:2	9	fprintf
LEAF_NODE	440:2	440:2	10	fprintf
LEAF_NODE	440:9	440:9	9	(
ARGUMENT	440:10	440:10	9	fd
FIELD	440:10	440:10	10	fd
LEAF_NODE	440:10	440:10	11	fd
LEAF_NODE	440:12	440:12	9	,
ARGUMENT	440:14	440:14	9	"  YCbCr Subsampling: %u, %u\n"
FIELD	440:14	440:14	10	"  YCbCr Subsampling: %u, %u\n"
LEAF_NODE	440:14	440:14	11	"  YCbCr Subsampling: %u, %u\n"
LEAF_NODE	440:45	440:45	9	,
ARGUMENT	441:3	441:3	9	td -> td_ycbcrsubsampling [ 0 ]
FIELD	441:3	441:28	10	td -> td_ycbcrsubsampling [ 0 ]
LEAF_NODE	441:3	441:3	11	td
LEAF_NODE	441:5	441:5	11	->
LEAF_NODE	441:7	441:7	11	td_ycbcrsubsampling
LEAF_NODE	441:26	441:26	11	[
EXPR	441:27	441:27	11	0
FIELD	441:27	441:27	12	0
LEAF_NODE	441:27	441:27	13	0
LEAF_NODE	441:28	441:28	11	]
LEAF_NODE	441:29	441:29	9	,
ARGUMENT	441:31	441:31	9	td -> td_ycbcrsubsampling [ 1 ]
FIELD	441:31	441:56	10	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	441:31	441:31	11	td
LEAF_NODE	441:33	441:33	11	->
LEAF_NODE	441:35	441:35	11	td_ycbcrsubsampling
LEAF_NODE	441:54	441:54	11	[
EXPR	441:55	441:55	11	1
FIELD	441:55	441:55	12	1
LEAF_NODE	441:55	441:55	13	1
LEAF_NODE	441:56	441:56	11	]
LEAF_NODE	441:58	441:58	9	)
LEAF_NODE	441:59	441:59	7	;
LEAF_NODE	442:1	442:1	5	}
SELECTION	443:1	443:47	3	
KEYWORD	443:1	443:1	4	if
LEAF_NODE	443:1	443:1	5	if
LEAF_NODE	443:4	443:4	4	(
CONDITION	443:5	443:5	4	TIFFFieldSet ( tif , FIELD_YCBCRPOSITIONING )
EXPR	443:5	443:5	5	TIFFFieldSet ( tif , FIELD_YCBCRPOSITIONING )
FUNCTION_CALL	443:5	443:44	6	TIFFFieldSet ( tif , FIELD_YCBCRPOSITIONING )
CALLEE	443:5	443:5	7	TIFFFieldSet
LEAF_NODE	443:5	443:5	8	TIFFFieldSet
LEAF_NODE	443:17	443:17	7	(
ARGUMENT	443:18	443:18	7	tif
FIELD	443:18	443:18	8	tif
LEAF_NODE	443:18	443:18	9	tif
LEAF_NODE	443:21	443:21	7	,
ARGUMENT	443:22	443:22	7	FIELD_YCBCRPOSITIONING
FIELD	443:22	443:22	8	FIELD_YCBCRPOSITIONING
LEAF_NODE	443:22	443:22	9	FIELD_YCBCRPOSITIONING
LEAF_NODE	443:44	443:44	7	)
LEAF_NODE	443:45	443:45	4	)
STATEMENTS	443:47	457:1	4	
LEAF_NODE	443:47	443:47	5	{
STATEMENTS	444:2	445:2	5	
EXPR_STATEMENT	444:2	444:38	6	fprintf ( fd , "  YCbCr Positioning: " ) ;
EXPR	444:2	444:2	7	fprintf ( fd , "  YCbCr Positioning: " )
FUNCTION_CALL	444:2	444:37	8	fprintf ( fd , "  YCbCr Positioning: " )
CALLEE	444:2	444:2	9	fprintf
LEAF_NODE	444:2	444:2	10	fprintf
LEAF_NODE	444:9	444:9	9	(
ARGUMENT	444:10	444:10	9	fd
FIELD	444:10	444:10	10	fd
LEAF_NODE	444:10	444:10	11	fd
LEAF_NODE	444:12	444:12	9	,
ARGUMENT	444:14	444:14	9	"  YCbCr Positioning: "
FIELD	444:14	444:14	10	"  YCbCr Positioning: "
LEAF_NODE	444:14	444:14	11	"  YCbCr Positioning: "
LEAF_NODE	444:37	444:37	9	)
LEAF_NODE	444:38	444:38	7	;
SELECTION	445:2	445:35	6	
KEYWORD	445:2	445:2	7	switch
LEAF_NODE	445:2	445:2	8	switch
LEAF_NODE	445:9	445:9	7	(
CONDITION	445:10	445:10	7	td -> td_ycbcrpositioning
EXPR	445:10	445:10	8	td -> td_ycbcrpositioning
FIELD	445:10	445:14	9	td -> td_ycbcrpositioning
LEAF_NODE	445:10	445:10	10	td
LEAF_NODE	445:12	445:12	10	->
LEAF_NODE	445:14	445:14	10	td_ycbcrpositioning
LEAF_NODE	445:33	445:33	7	)
STATEMENTS	445:35	456:2	7	
LEAF_NODE	445:35	445:35	8	{
STATEMENTS	446:2	455:3	8	
LABEL	446:2	446:29	9	case YCBCRPOSITION_CENTERED :
LEAF_NODE	446:2	446:2	10	case
LEAF_NODE	446:7	446:7	10	YCBCRPOSITION_CENTERED
LEAF_NODE	446:29	446:29	10	:
EXPR_STATEMENT	447:3	447:28	9	fprintf ( fd , "centered\n" ) ;
EXPR	447:3	447:3	10	fprintf ( fd , "centered\n" )
FUNCTION_CALL	447:3	447:27	11	fprintf ( fd , "centered\n" )
CALLEE	447:3	447:3	12	fprintf
LEAF_NODE	447:3	447:3	13	fprintf
LEAF_NODE	447:10	447:10	12	(
ARGUMENT	447:11	447:11	12	fd
FIELD	447:11	447:11	13	fd
LEAF_NODE	447:11	447:11	14	fd
LEAF_NODE	447:13	447:13	12	,
ARGUMENT	447:15	447:15	12	"centered\n"
FIELD	447:15	447:15	13	"centered\n"
LEAF_NODE	447:15	447:15	14	"centered\n"
LEAF_NODE	447:27	447:27	12	)
LEAF_NODE	447:28	447:28	10	;
JUMP_STATEMENT	448:3	448:8	9	break DESTINATION ;
KEYWORD	448:3	448:3	10	break
LEAF_NODE	448:3	448:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	448:8	448:8	10	;
LABEL	449:2	449:28	9	case YCBCRPOSITION_COSITED :
LEAF_NODE	449:2	449:2	10	case
LEAF_NODE	449:7	449:7	10	YCBCRPOSITION_COSITED
LEAF_NODE	449:28	449:28	10	:
EXPR_STATEMENT	450:3	450:27	9	fprintf ( fd , "cosited\n" ) ;
EXPR	450:3	450:3	10	fprintf ( fd , "cosited\n" )
FUNCTION_CALL	450:3	450:26	11	fprintf ( fd , "cosited\n" )
CALLEE	450:3	450:3	12	fprintf
LEAF_NODE	450:3	450:3	13	fprintf
LEAF_NODE	450:10	450:10	12	(
ARGUMENT	450:11	450:11	12	fd
FIELD	450:11	450:11	13	fd
LEAF_NODE	450:11	450:11	14	fd
LEAF_NODE	450:13	450:13	12	,
ARGUMENT	450:15	450:15	12	"cosited\n"
FIELD	450:15	450:15	13	"cosited\n"
LEAF_NODE	450:15	450:15	14	"cosited\n"
LEAF_NODE	450:26	450:26	12	)
LEAF_NODE	450:27	450:27	10	;
JUMP_STATEMENT	451:3	451:8	9	break DESTINATION ;
KEYWORD	451:3	451:3	10	break
LEAF_NODE	451:3	451:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	451:8	451:8	10	;
LABEL	452:2	452:9	9	default :
LEAF_NODE	452:2	452:2	10	default
LEAF_NODE	452:9	452:9	10	:
EXPR_STATEMENT	453:3	454:56	9	fprintf ( fd , "%u (0x%x)\n" , td -> td_ycbcrpositioning , td -> td_ycbcrpositioning ) ;
EXPR	453:3	453:3	10	fprintf ( fd , "%u (0x%x)\n" , td -> td_ycbcrpositioning , td -> td_ycbcrpositioning )
FUNCTION_CALL	453:3	454:55	11	fprintf ( fd , "%u (0x%x)\n" , td -> td_ycbcrpositioning , td -> td_ycbcrpositioning )
CALLEE	453:3	453:3	12	fprintf
LEAF_NODE	453:3	453:3	13	fprintf
LEAF_NODE	453:10	453:10	12	(
ARGUMENT	453:11	453:11	12	fd
FIELD	453:11	453:11	13	fd
LEAF_NODE	453:11	453:11	14	fd
LEAF_NODE	453:13	453:13	12	,
ARGUMENT	453:15	453:15	12	"%u (0x%x)\n"
FIELD	453:15	453:15	13	"%u (0x%x)\n"
LEAF_NODE	453:15	453:15	14	"%u (0x%x)\n"
LEAF_NODE	453:28	453:28	12	,
ARGUMENT	454:7	454:7	12	td -> td_ycbcrpositioning
FIELD	454:7	454:11	13	td -> td_ycbcrpositioning
LEAF_NODE	454:7	454:7	14	td
LEAF_NODE	454:9	454:9	14	->
LEAF_NODE	454:11	454:11	14	td_ycbcrpositioning
LEAF_NODE	454:30	454:30	12	,
ARGUMENT	454:32	454:32	12	td -> td_ycbcrpositioning
FIELD	454:32	454:36	13	td -> td_ycbcrpositioning
LEAF_NODE	454:32	454:32	14	td
LEAF_NODE	454:34	454:34	14	->
LEAF_NODE	454:36	454:36	14	td_ycbcrpositioning
LEAF_NODE	454:55	454:55	12	)
LEAF_NODE	454:56	454:56	10	;
JUMP_STATEMENT	455:3	455:8	9	break DESTINATION ;
KEYWORD	455:3	455:3	10	break
LEAF_NODE	455:3	455:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	455:8	455:8	10	;
LEAF_NODE	456:2	456:2	8	}
LEAF_NODE	457:1	457:1	5	}
SELECTION	458:1	459:2	3	
KEYWORD	458:1	458:1	4	if
LEAF_NODE	458:1	458:1	5	if
LEAF_NODE	458:4	458:4	4	(
CONDITION	458:5	458:5	4	TIFFFieldSet ( tif , FIELD_HALFTONEHINTS )
EXPR	458:5	458:5	5	TIFFFieldSet ( tif , FIELD_HALFTONEHINTS )
FUNCTION_CALL	458:5	458:41	6	TIFFFieldSet ( tif , FIELD_HALFTONEHINTS )
CALLEE	458:5	458:5	7	TIFFFieldSet
LEAF_NODE	458:5	458:5	8	TIFFFieldSet
LEAF_NODE	458:17	458:17	7	(
ARGUMENT	458:18	458:18	7	tif
FIELD	458:18	458:18	8	tif
LEAF_NODE	458:18	458:18	9	tif
LEAF_NODE	458:21	458:21	7	,
ARGUMENT	458:22	458:22	7	FIELD_HALFTONEHINTS
FIELD	458:22	458:22	8	FIELD_HALFTONEHINTS
LEAF_NODE	458:22	458:22	9	FIELD_HALFTONEHINTS
LEAF_NODE	458:41	458:41	7	)
LEAF_NODE	458:42	458:42	4	)
STATEMENTS	459:2	459:2	4	
EXPR_STATEMENT	459:2	460:55	5	fprintf ( fd , "  Halftone Hints: light %u dark %u\n" , td -> td_halftonehints [ 0 ] , td -> td_halftonehints [ 1 ] ) ;
EXPR	459:2	459:2	6	fprintf ( fd , "  Halftone Hints: light %u dark %u\n" , td -> td_halftonehints [ 0 ] , td -> td_halftonehints [ 1 ] )
FUNCTION_CALL	459:2	460:54	7	fprintf ( fd , "  Halftone Hints: light %u dark %u\n" , td -> td_halftonehints [ 0 ] , td -> td_halftonehints [ 1 ] )
CALLEE	459:2	459:2	8	fprintf
LEAF_NODE	459:2	459:2	9	fprintf
LEAF_NODE	459:9	459:9	8	(
ARGUMENT	459:10	459:10	8	fd
FIELD	459:10	459:10	9	fd
LEAF_NODE	459:10	459:10	10	fd
LEAF_NODE	459:12	459:12	8	,
ARGUMENT	459:14	459:14	8	"  Halftone Hints: light %u dark %u\n"
FIELD	459:14	459:14	9	"  Halftone Hints: light %u dark %u\n"
LEAF_NODE	459:14	459:14	10	"  Halftone Hints: light %u dark %u\n"
LEAF_NODE	459:52	459:52	8	,
ARGUMENT	460:6	460:6	8	td -> td_halftonehints [ 0 ]
FIELD	460:6	460:28	9	td -> td_halftonehints [ 0 ]
LEAF_NODE	460:6	460:6	10	td
LEAF_NODE	460:8	460:8	10	->
LEAF_NODE	460:10	460:10	10	td_halftonehints
LEAF_NODE	460:26	460:26	10	[
EXPR	460:27	460:27	10	0
FIELD	460:27	460:27	11	0
LEAF_NODE	460:27	460:27	12	0
LEAF_NODE	460:28	460:28	10	]
LEAF_NODE	460:29	460:29	8	,
ARGUMENT	460:31	460:31	8	td -> td_halftonehints [ 1 ]
FIELD	460:31	460:53	9	td -> td_halftonehints [ 1 ]
LEAF_NODE	460:31	460:31	10	td
LEAF_NODE	460:33	460:33	10	->
LEAF_NODE	460:35	460:35	10	td_halftonehints
LEAF_NODE	460:51	460:51	10	[
EXPR	460:52	460:52	10	1
FIELD	460:52	460:52	11	1
LEAF_NODE	460:52	460:52	12	1
LEAF_NODE	460:53	460:53	10	]
LEAF_NODE	460:54	460:54	8	)
LEAF_NODE	460:55	460:55	6	;
SELECTION	461:1	461:42	3	
KEYWORD	461:1	461:1	4	if
LEAF_NODE	461:1	461:1	5	if
LEAF_NODE	461:4	461:4	4	(
CONDITION	461:5	461:5	4	TIFFFieldSet ( tif , FIELD_ORIENTATION )
EXPR	461:5	461:5	5	TIFFFieldSet ( tif , FIELD_ORIENTATION )
FUNCTION_CALL	461:5	461:39	6	TIFFFieldSet ( tif , FIELD_ORIENTATION )
CALLEE	461:5	461:5	7	TIFFFieldSet
LEAF_NODE	461:5	461:5	8	TIFFFieldSet
LEAF_NODE	461:17	461:17	7	(
ARGUMENT	461:18	461:18	7	tif
FIELD	461:18	461:18	8	tif
LEAF_NODE	461:18	461:18	9	tif
LEAF_NODE	461:21	461:21	7	,
ARGUMENT	461:22	461:22	7	FIELD_ORIENTATION
FIELD	461:22	461:22	8	FIELD_ORIENTATION
LEAF_NODE	461:22	461:22	9	FIELD_ORIENTATION
LEAF_NODE	461:39	461:39	7	)
LEAF_NODE	461:40	461:40	4	)
STATEMENTS	461:42	468:1	4	
LEAF_NODE	461:42	461:42	5	{
STATEMENTS	462:2	465:2	5	
EXPR_STATEMENT	462:2	462:32	6	fprintf ( fd , "  Orientation: " ) ;
EXPR	462:2	462:2	7	fprintf ( fd , "  Orientation: " )
FUNCTION_CALL	462:2	462:31	8	fprintf ( fd , "  Orientation: " )
CALLEE	462:2	462:2	9	fprintf
LEAF_NODE	462:2	462:2	10	fprintf
LEAF_NODE	462:9	462:9	9	(
ARGUMENT	462:10	462:10	9	fd
FIELD	462:10	462:10	10	fd
LEAF_NODE	462:10	462:10	11	fd
LEAF_NODE	462:12	462:12	9	,
ARGUMENT	462:14	462:14	9	"  Orientation: "
FIELD	462:14	462:14	10	"  Orientation: "
LEAF_NODE	462:14	462:14	11	"  Orientation: "
LEAF_NODE	462:31	462:31	9	)
LEAF_NODE	462:32	462:32	7	;
SELECTION	463:2	464:3	6	
KEYWORD	463:2	463:2	7	if
LEAF_NODE	463:2	463:2	8	if
LEAF_NODE	463:5	463:5	7	(
CONDITION	463:6	463:6	7	td -> td_orientation < NORIENTNAMES
EXPR	463:6	463:27	8	td -> td_orientation < NORIENTNAMES
FIELD	463:6	463:10	9	td -> td_orientation
LEAF_NODE	463:6	463:6	10	td
LEAF_NODE	463:8	463:8	10	->
LEAF_NODE	463:10	463:10	10	td_orientation
REL_OPERATOR	463:25	463:25	9	<
LEAF_NODE	463:25	463:25	10	<
FIELD	463:27	463:27	9	NORIENTNAMES
LEAF_NODE	463:27	463:27	10	NORIENTNAMES
LEAF_NODE	463:39	463:39	7	)
STATEMENTS	464:3	464:3	7	
EXPR_STATEMENT	464:3	464:55	8	fprintf ( fd , "%s\n" , orientNames [ td -> td_orientation ] ) ;
EXPR	464:3	464:3	9	fprintf ( fd , "%s\n" , orientNames [ td -> td_orientation ] )
FUNCTION_CALL	464:3	464:54	10	fprintf ( fd , "%s\n" , orientNames [ td -> td_orientation ] )
CALLEE	464:3	464:3	11	fprintf
LEAF_NODE	464:3	464:3	12	fprintf
LEAF_NODE	464:10	464:10	11	(
ARGUMENT	464:11	464:11	11	fd
FIELD	464:11	464:11	12	fd
LEAF_NODE	464:11	464:11	13	fd
LEAF_NODE	464:13	464:13	11	,
ARGUMENT	464:15	464:15	11	"%s\n"
FIELD	464:15	464:15	12	"%s\n"
LEAF_NODE	464:15	464:15	13	"%s\n"
LEAF_NODE	464:21	464:21	11	,
ARGUMENT	464:23	464:23	11	orientNames [ td -> td_orientation ]
FIELD	464:23	464:53	12	orientNames [ td -> td_orientation ]
LEAF_NODE	464:23	464:23	13	orientNames
LEAF_NODE	464:34	464:34	13	[
EXPR	464:35	464:35	13	td -> td_orientation
FIELD	464:35	464:39	14	td -> td_orientation
LEAF_NODE	464:35	464:35	15	td
LEAF_NODE	464:37	464:37	15	->
LEAF_NODE	464:39	464:39	15	td_orientation
LEAF_NODE	464:53	464:53	13	]
LEAF_NODE	464:54	464:54	11	)
LEAF_NODE	464:55	464:55	9	;
SELECTION	465:2	466:3	6	
KEYWORD	465:2	465:2	7	else
LEAF_NODE	465:2	465:2	8	else
STATEMENTS	466:3	466:3	7	
EXPR_STATEMENT	466:3	467:46	8	fprintf ( fd , "%u (0x%x)\n" , td -> td_orientation , td -> td_orientation ) ;
EXPR	466:3	466:3	9	fprintf ( fd , "%u (0x%x)\n" , td -> td_orientation , td -> td_orientation )
FUNCTION_CALL	466:3	467:45	10	fprintf ( fd , "%u (0x%x)\n" , td -> td_orientation , td -> td_orientation )
CALLEE	466:3	466:3	11	fprintf
LEAF_NODE	466:3	466:3	12	fprintf
LEAF_NODE	466:10	466:10	11	(
ARGUMENT	466:11	466:11	11	fd
FIELD	466:11	466:11	12	fd
LEAF_NODE	466:11	466:11	13	fd
LEAF_NODE	466:13	466:13	11	,
ARGUMENT	466:15	466:15	11	"%u (0x%x)\n"
FIELD	466:15	466:15	12	"%u (0x%x)\n"
LEAF_NODE	466:15	466:15	13	"%u (0x%x)\n"
LEAF_NODE	466:28	466:28	11	,
ARGUMENT	467:7	467:7	11	td -> td_orientation
FIELD	467:7	467:11	12	td -> td_orientation
LEAF_NODE	467:7	467:7	13	td
LEAF_NODE	467:9	467:9	13	->
LEAF_NODE	467:11	467:11	13	td_orientation
LEAF_NODE	467:25	467:25	11	,
ARGUMENT	467:27	467:27	11	td -> td_orientation
FIELD	467:27	467:31	12	td -> td_orientation
LEAF_NODE	467:27	467:27	13	td
LEAF_NODE	467:29	467:29	13	->
LEAF_NODE	467:31	467:31	13	td_orientation
LEAF_NODE	467:45	467:45	11	)
LEAF_NODE	467:46	467:46	9	;
LEAF_NODE	468:1	468:1	5	}
SELECTION	469:1	470:2	3	
KEYWORD	469:1	469:1	4	if
LEAF_NODE	469:1	469:1	5	if
LEAF_NODE	469:4	469:4	4	(
CONDITION	469:5	469:5	4	TIFFFieldSet ( tif , FIELD_SAMPLESPERPIXEL )
EXPR	469:5	469:5	5	TIFFFieldSet ( tif , FIELD_SAMPLESPERPIXEL )
FUNCTION_CALL	469:5	469:43	6	TIFFFieldSet ( tif , FIELD_SAMPLESPERPIXEL )
CALLEE	469:5	469:5	7	TIFFFieldSet
LEAF_NODE	469:5	469:5	8	TIFFFieldSet
LEAF_NODE	469:17	469:17	7	(
ARGUMENT	469:18	469:18	7	tif
FIELD	469:18	469:18	8	tif
LEAF_NODE	469:18	469:18	9	tif
LEAF_NODE	469:21	469:21	7	,
ARGUMENT	469:22	469:22	7	FIELD_SAMPLESPERPIXEL
FIELD	469:22	469:22	8	FIELD_SAMPLESPERPIXEL
LEAF_NODE	469:22	469:22	9	FIELD_SAMPLESPERPIXEL
LEAF_NODE	469:43	469:43	7	)
LEAF_NODE	469:44	469:44	4	)
STATEMENTS	470:2	470:2	4	
EXPR_STATEMENT	470:2	470:62	5	fprintf ( fd , "  Samples/Pixel: %u\n" , td -> td_samplesperpixel ) ;
EXPR	470:2	470:2	6	fprintf ( fd , "  Samples/Pixel: %u\n" , td -> td_samplesperpixel )
FUNCTION_CALL	470:2	470:61	7	fprintf ( fd , "  Samples/Pixel: %u\n" , td -> td_samplesperpixel )
CALLEE	470:2	470:2	8	fprintf
LEAF_NODE	470:2	470:2	9	fprintf
LEAF_NODE	470:9	470:9	8	(
ARGUMENT	470:10	470:10	8	fd
FIELD	470:10	470:10	9	fd
LEAF_NODE	470:10	470:10	10	fd
LEAF_NODE	470:12	470:12	8	,
ARGUMENT	470:14	470:14	8	"  Samples/Pixel: %u\n"
FIELD	470:14	470:14	9	"  Samples/Pixel: %u\n"
LEAF_NODE	470:14	470:14	10	"  Samples/Pixel: %u\n"
LEAF_NODE	470:37	470:37	8	,
ARGUMENT	470:39	470:39	8	td -> td_samplesperpixel
FIELD	470:39	470:43	9	td -> td_samplesperpixel
LEAF_NODE	470:39	470:39	10	td
LEAF_NODE	470:41	470:41	10	->
LEAF_NODE	470:43	470:43	10	td_samplesperpixel
LEAF_NODE	470:61	470:61	8	)
LEAF_NODE	470:62	470:62	6	;
SELECTION	471:1	471:43	3	
KEYWORD	471:1	471:1	4	if
LEAF_NODE	471:1	471:1	5	if
LEAF_NODE	471:4	471:4	4	(
CONDITION	471:5	471:5	4	TIFFFieldSet ( tif , FIELD_ROWSPERSTRIP )
EXPR	471:5	471:5	5	TIFFFieldSet ( tif , FIELD_ROWSPERSTRIP )
FUNCTION_CALL	471:5	471:40	6	TIFFFieldSet ( tif , FIELD_ROWSPERSTRIP )
CALLEE	471:5	471:5	7	TIFFFieldSet
LEAF_NODE	471:5	471:5	8	TIFFFieldSet
LEAF_NODE	471:17	471:17	7	(
ARGUMENT	471:18	471:18	7	tif
FIELD	471:18	471:18	8	tif
LEAF_NODE	471:18	471:18	9	tif
LEAF_NODE	471:21	471:21	7	,
ARGUMENT	471:22	471:22	7	FIELD_ROWSPERSTRIP
FIELD	471:22	471:22	8	FIELD_ROWSPERSTRIP
LEAF_NODE	471:22	471:22	9	FIELD_ROWSPERSTRIP
LEAF_NODE	471:40	471:40	7	)
LEAF_NODE	471:41	471:41	4	)
STATEMENTS	471:43	477:1	4	
LEAF_NODE	471:43	471:43	5	{
STATEMENTS	472:2	475:2	5	
EXPR_STATEMENT	472:2	472:31	6	fprintf ( fd , "  Rows/Strip: " ) ;
EXPR	472:2	472:2	7	fprintf ( fd , "  Rows/Strip: " )
FUNCTION_CALL	472:2	472:30	8	fprintf ( fd , "  Rows/Strip: " )
CALLEE	472:2	472:2	9	fprintf
LEAF_NODE	472:2	472:2	10	fprintf
LEAF_NODE	472:9	472:9	9	(
ARGUMENT	472:10	472:10	9	fd
FIELD	472:10	472:10	10	fd
LEAF_NODE	472:10	472:10	11	fd
LEAF_NODE	472:12	472:12	9	,
ARGUMENT	472:14	472:14	9	"  Rows/Strip: "
FIELD	472:14	472:14	10	"  Rows/Strip: "
LEAF_NODE	472:14	472:14	11	"  Rows/Strip: "
LEAF_NODE	472:30	472:30	9	)
LEAF_NODE	472:31	472:31	7	;
SELECTION	473:2	474:3	6	
KEYWORD	473:2	473:2	7	if
LEAF_NODE	473:2	473:2	8	if
LEAF_NODE	473:5	473:5	7	(
CONDITION	473:6	473:6	7	td -> td_rowsperstrip == ( uint32 ) - 1
EXPR	473:6	473:38	8	td -> td_rowsperstrip == ( uint32 ) - 1
FIELD	473:6	473:10	9	td -> td_rowsperstrip
LEAF_NODE	473:6	473:6	10	td
LEAF_NODE	473:8	473:8	10	->
LEAF_NODE	473:10	473:10	10	td_rowsperstrip
EQ_OPERATOR	473:26	473:26	9	==
LEAF_NODE	473:26	473:26	10	==
LEAF_NODE	473:29	473:29	9	(
TYPE_NAME	473:30	473:30	9	uint32
LEAF_NODE	473:30	473:30	10	uint32
LEAF_NODE	473:36	473:36	9	)
UNARY_EXPR	473:38	473:39	9	- 1
UNARY_OPERATOR	473:38	473:38	10	-
LEAF_NODE	473:38	473:38	11	-
FIELD	473:39	473:39	10	1
LEAF_NODE	473:39	473:39	11	1
LEAF_NODE	473:40	473:40	7	)
STATEMENTS	474:3	474:3	7	
EXPR_STATEMENT	474:3	474:30	8	fprintf ( fd , "(infinite)\n" ) ;
EXPR	474:3	474:3	9	fprintf ( fd , "(infinite)\n" )
FUNCTION_CALL	474:3	474:29	10	fprintf ( fd , "(infinite)\n" )
CALLEE	474:3	474:3	11	fprintf
LEAF_NODE	474:3	474:3	12	fprintf
LEAF_NODE	474:10	474:10	11	(
ARGUMENT	474:11	474:11	11	fd
FIELD	474:11	474:11	12	fd
LEAF_NODE	474:11	474:11	13	fd
LEAF_NODE	474:13	474:13	11	,
ARGUMENT	474:15	474:15	11	"(infinite)\n"
FIELD	474:15	474:15	12	"(infinite)\n"
LEAF_NODE	474:15	474:15	13	"(infinite)\n"
LEAF_NODE	474:29	474:29	11	)
LEAF_NODE	474:30	474:30	9	;
SELECTION	475:2	476:3	6	
KEYWORD	475:2	475:2	7	else
LEAF_NODE	475:2	475:2	8	else
STATEMENTS	476:3	476:3	7	
EXPR_STATEMENT	476:3	476:60	8	fprintf ( fd , "%lu\n" , ( unsigned long ) td -> td_rowsperstrip ) ;
EXPR	476:3	476:3	9	fprintf ( fd , "%lu\n" , ( unsigned long ) td -> td_rowsperstrip )
FUNCTION_CALL	476:3	476:59	10	fprintf ( fd , "%lu\n" , ( unsigned long ) td -> td_rowsperstrip )
CALLEE	476:3	476:3	11	fprintf
LEAF_NODE	476:3	476:3	12	fprintf
LEAF_NODE	476:10	476:10	11	(
ARGUMENT	476:11	476:11	11	fd
FIELD	476:11	476:11	12	fd
LEAF_NODE	476:11	476:11	13	fd
LEAF_NODE	476:13	476:13	11	,
ARGUMENT	476:15	476:15	11	"%lu\n"
FIELD	476:15	476:15	12	"%lu\n"
LEAF_NODE	476:15	476:15	13	"%lu\n"
LEAF_NODE	476:22	476:22	11	,
ARGUMENT	476:24	476:40	11	( unsigned long ) td -> td_rowsperstrip
LEAF_NODE	476:24	476:24	12	(
TYPE_NAME	476:25	476:34	12	unsigned long
LEAF_NODE	476:25	476:25	13	unsigned
LEAF_NODE	476:34	476:34	13	long
LEAF_NODE	476:38	476:38	12	)
FIELD	476:40	476:44	12	td -> td_rowsperstrip
LEAF_NODE	476:40	476:40	13	td
LEAF_NODE	476:42	476:42	13	->
LEAF_NODE	476:44	476:44	13	td_rowsperstrip
LEAF_NODE	476:59	476:59	11	)
LEAF_NODE	476:60	476:60	9	;
LEAF_NODE	477:1	477:1	5	}
SELECTION	478:1	479:2	3	
KEYWORD	478:1	478:1	4	if
LEAF_NODE	478:1	478:1	5	if
LEAF_NODE	478:4	478:4	4	(
CONDITION	478:5	478:5	4	TIFFFieldSet ( tif , FIELD_MINSAMPLEVALUE )
EXPR	478:5	478:5	5	TIFFFieldSet ( tif , FIELD_MINSAMPLEVALUE )
FUNCTION_CALL	478:5	478:42	6	TIFFFieldSet ( tif , FIELD_MINSAMPLEVALUE )
CALLEE	478:5	478:5	7	TIFFFieldSet
LEAF_NODE	478:5	478:5	8	TIFFFieldSet
LEAF_NODE	478:17	478:17	7	(
ARGUMENT	478:18	478:18	7	tif
FIELD	478:18	478:18	8	tif
LEAF_NODE	478:18	478:18	9	tif
LEAF_NODE	478:21	478:21	7	,
ARGUMENT	478:22	478:22	7	FIELD_MINSAMPLEVALUE
FIELD	478:22	478:22	8	FIELD_MINSAMPLEVALUE
LEAF_NODE	478:22	478:22	9	FIELD_MINSAMPLEVALUE
LEAF_NODE	478:42	478:42	7	)
LEAF_NODE	478:43	478:43	4	)
STATEMENTS	479:2	479:2	4	
EXPR_STATEMENT	479:2	479:64	5	fprintf ( fd , "  Min Sample Value: %u\n" , td -> td_minsamplevalue ) ;
EXPR	479:2	479:2	6	fprintf ( fd , "  Min Sample Value: %u\n" , td -> td_minsamplevalue )
FUNCTION_CALL	479:2	479:63	7	fprintf ( fd , "  Min Sample Value: %u\n" , td -> td_minsamplevalue )
CALLEE	479:2	479:2	8	fprintf
LEAF_NODE	479:2	479:2	9	fprintf
LEAF_NODE	479:9	479:9	8	(
ARGUMENT	479:10	479:10	8	fd
FIELD	479:10	479:10	9	fd
LEAF_NODE	479:10	479:10	10	fd
LEAF_NODE	479:12	479:12	8	,
ARGUMENT	479:14	479:14	8	"  Min Sample Value: %u\n"
FIELD	479:14	479:14	9	"  Min Sample Value: %u\n"
LEAF_NODE	479:14	479:14	10	"  Min Sample Value: %u\n"
LEAF_NODE	479:40	479:40	8	,
ARGUMENT	479:42	479:42	8	td -> td_minsamplevalue
FIELD	479:42	479:46	9	td -> td_minsamplevalue
LEAF_NODE	479:42	479:42	10	td
LEAF_NODE	479:44	479:44	10	->
LEAF_NODE	479:46	479:46	10	td_minsamplevalue
LEAF_NODE	479:63	479:63	8	)
LEAF_NODE	479:64	479:64	6	;
SELECTION	480:1	481:2	3	
KEYWORD	480:1	480:1	4	if
LEAF_NODE	480:1	480:1	5	if
LEAF_NODE	480:4	480:4	4	(
CONDITION	480:5	480:5	4	TIFFFieldSet ( tif , FIELD_MAXSAMPLEVALUE )
EXPR	480:5	480:5	5	TIFFFieldSet ( tif , FIELD_MAXSAMPLEVALUE )
FUNCTION_CALL	480:5	480:42	6	TIFFFieldSet ( tif , FIELD_MAXSAMPLEVALUE )
CALLEE	480:5	480:5	7	TIFFFieldSet
LEAF_NODE	480:5	480:5	8	TIFFFieldSet
LEAF_NODE	480:17	480:17	7	(
ARGUMENT	480:18	480:18	7	tif
FIELD	480:18	480:18	8	tif
LEAF_NODE	480:18	480:18	9	tif
LEAF_NODE	480:21	480:21	7	,
ARGUMENT	480:22	480:22	7	FIELD_MAXSAMPLEVALUE
FIELD	480:22	480:22	8	FIELD_MAXSAMPLEVALUE
LEAF_NODE	480:22	480:22	9	FIELD_MAXSAMPLEVALUE
LEAF_NODE	480:42	480:42	7	)
LEAF_NODE	480:43	480:43	4	)
STATEMENTS	481:2	481:2	4	
EXPR_STATEMENT	481:2	481:64	5	fprintf ( fd , "  Max Sample Value: %u\n" , td -> td_maxsamplevalue ) ;
EXPR	481:2	481:2	6	fprintf ( fd , "  Max Sample Value: %u\n" , td -> td_maxsamplevalue )
FUNCTION_CALL	481:2	481:63	7	fprintf ( fd , "  Max Sample Value: %u\n" , td -> td_maxsamplevalue )
CALLEE	481:2	481:2	8	fprintf
LEAF_NODE	481:2	481:2	9	fprintf
LEAF_NODE	481:9	481:9	8	(
ARGUMENT	481:10	481:10	8	fd
FIELD	481:10	481:10	9	fd
LEAF_NODE	481:10	481:10	10	fd
LEAF_NODE	481:12	481:12	8	,
ARGUMENT	481:14	481:14	8	"  Max Sample Value: %u\n"
FIELD	481:14	481:14	9	"  Max Sample Value: %u\n"
LEAF_NODE	481:14	481:14	10	"  Max Sample Value: %u\n"
LEAF_NODE	481:40	481:40	8	,
ARGUMENT	481:42	481:42	8	td -> td_maxsamplevalue
FIELD	481:42	481:46	9	td -> td_maxsamplevalue
LEAF_NODE	481:42	481:42	10	td
LEAF_NODE	481:44	481:44	10	->
LEAF_NODE	481:46	481:46	10	td_maxsamplevalue
LEAF_NODE	481:63	481:63	8	)
LEAF_NODE	481:64	481:64	6	;
SELECTION	482:1	482:46	3	
KEYWORD	482:1	482:1	4	if
LEAF_NODE	482:1	482:1	5	if
LEAF_NODE	482:4	482:4	4	(
CONDITION	482:5	482:5	4	TIFFFieldSet ( tif , FIELD_SMINSAMPLEVALUE )
EXPR	482:5	482:5	5	TIFFFieldSet ( tif , FIELD_SMINSAMPLEVALUE )
FUNCTION_CALL	482:5	482:43	6	TIFFFieldSet ( tif , FIELD_SMINSAMPLEVALUE )
CALLEE	482:5	482:5	7	TIFFFieldSet
LEAF_NODE	482:5	482:5	8	TIFFFieldSet
LEAF_NODE	482:17	482:17	7	(
ARGUMENT	482:18	482:18	7	tif
FIELD	482:18	482:18	8	tif
LEAF_NODE	482:18	482:18	9	tif
LEAF_NODE	482:21	482:21	7	,
ARGUMENT	482:22	482:22	7	FIELD_SMINSAMPLEVALUE
FIELD	482:22	482:22	8	FIELD_SMINSAMPLEVALUE
LEAF_NODE	482:22	482:22	9	FIELD_SMINSAMPLEVALUE
LEAF_NODE	482:43	482:43	7	)
LEAF_NODE	482:44	482:44	4	)
STATEMENTS	482:46	489:1	4	
LEAF_NODE	482:46	482:46	5	{
STATEMENTS	483:2	488:2	5	
SIMPLE_DECL	483:2	483:7	6	int i ;
VAR_DECL	483:2	483:6	7	int i
TYPE	483:2	483:2	8	int
TYPE_NAME	483:2	483:2	9	int
LEAF_NODE	483:2	483:2	10	int
NAME	483:6	483:6	8	i
LEAF_NODE	483:6	483:6	9	i
LEAF_NODE	483:7	483:7	7	;
SIMPLE_DECL	484:2	484:76	6	int count ; count = ( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1 ;
VAR_DECL	484:2	484:6	7	int count ; count = ( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1
TYPE	484:2	484:2	8	int
TYPE_NAME	484:2	484:2	9	int
LEAF_NODE	484:2	484:2	10	int
NAME	484:6	484:6	8	count
LEAF_NODE	484:6	484:6	9	count
LEAF_NODE	0:0	0:0	8	;
INIT	484:6	484:6	8	count = ( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1
ASSIGN	484:6	484:14	9	count = ( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1
LVAL	484:6	484:6	10	count
NAME	484:6	484:6	11	count
LEAF_NODE	484:6	484:6	12	count
ASSIGN_OP	484:12	484:12	10	=
LEAF_NODE	484:12	484:12	11	=
RVAL	484:14	484:14	10	( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1
COND_EXPR	484:14	484:75	11	( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1
CONDITION	484:14	484:46	12	( tif -> tif_flags & TIFF_PERSAMPLE )
LEAF_NODE	484:14	484:14	13	(
FIELD	484:15	484:20	13	tif -> tif_flags
LEAF_NODE	484:15	484:15	14	tif
LEAF_NODE	484:18	484:18	14	->
LEAF_NODE	484:20	484:20	14	tif_flags
LEAF_NODE	484:30	484:30	13	&
FIELD	484:32	484:32	13	TIFF_PERSAMPLE
LEAF_NODE	484:32	484:32	14	TIFF_PERSAMPLE
LEAF_NODE	484:46	484:46	13	)
LEAF_NODE	484:48	484:48	12	?
EXPR	484:50	484:50	12	td -> td_samplesperpixel
FIELD	484:50	484:54	13	td -> td_samplesperpixel
LEAF_NODE	484:50	484:50	14	td
LEAF_NODE	484:52	484:52	14	->
LEAF_NODE	484:54	484:54	14	td_samplesperpixel
LEAF_NODE	484:73	484:73	12	:
FIELD	484:75	484:75	12	1
LEAF_NODE	484:75	484:75	13	1
LEAF_NODE	484:76	484:76	7	;
EXPR_STATEMENT	485:2	485:37	6	fprintf ( fd , "  SMin Sample Value:" ) ;
EXPR	485:2	485:2	7	fprintf ( fd , "  SMin Sample Value:" )
FUNCTION_CALL	485:2	485:36	8	fprintf ( fd , "  SMin Sample Value:" )
CALLEE	485:2	485:2	9	fprintf
LEAF_NODE	485:2	485:2	10	fprintf
LEAF_NODE	485:9	485:9	9	(
ARGUMENT	485:10	485:10	9	fd
FIELD	485:10	485:10	10	fd
LEAF_NODE	485:10	485:10	11	fd
LEAF_NODE	485:12	485:12	9	,
ARGUMENT	485:14	485:14	9	"  SMin Sample Value:"
FIELD	485:14	485:14	10	"  SMin Sample Value:"
LEAF_NODE	485:14	485:14	11	"  SMin Sample Value:"
LEAF_NODE	485:36	485:36	9	)
LEAF_NODE	485:37	485:37	7	;
ITERATION	486:2	487:3	6	
KEYWORD	486:2	486:2	7	for
LEAF_NODE	486:2	486:2	8	for
LEAF_NODE	486:6	486:6	7	(
FOR_INIT	486:7	486:12	7	i = 0 ;
EXPR	486:7	486:7	8	i = 0
ASSIGN	486:7	486:11	9	i = 0
LVAL	486:7	486:7	10	i
FIELD	486:7	486:7	11	i
LEAF_NODE	486:7	486:7	12	i
ASSIGN_OP	486:9	486:9	10	=
LEAF_NODE	486:9	486:9	11	=
RVAL	486:11	486:11	10	0
FIELD	486:11	486:11	11	0
LEAF_NODE	486:11	486:11	12	0
LEAF_NODE	486:12	486:12	8	;
CONDITION	486:14	486:14	7	i < count
EXPR	486:14	486:18	8	i < count
FIELD	486:14	486:14	9	i
LEAF_NODE	486:14	486:14	10	i
REL_OPERATOR	486:16	486:16	9	<
LEAF_NODE	486:16	486:16	10	<
FIELD	486:18	486:18	9	count
LEAF_NODE	486:18	486:18	10	count
LEAF_NODE	486:23	486:23	7	;
FOR_EXPR	486:25	486:25	7	++ i
EXPR	486:25	486:27	8	++ i
LEAF_NODE	486:25	486:25	9	++
FIELD	486:27	486:27	9	i
LEAF_NODE	486:27	486:27	10	i
LEAF_NODE	486:28	486:28	7	)
STATEMENTS	487:3	487:3	7	
EXPR_STATEMENT	487:3	487:48	8	fprintf ( fd , " %g" , td -> td_sminsamplevalue [ i ] ) ;
EXPR	487:3	487:3	9	fprintf ( fd , " %g" , td -> td_sminsamplevalue [ i ] )
FUNCTION_CALL	487:3	487:47	10	fprintf ( fd , " %g" , td -> td_sminsamplevalue [ i ] )
CALLEE	487:3	487:3	11	fprintf
LEAF_NODE	487:3	487:3	12	fprintf
LEAF_NODE	487:10	487:10	11	(
ARGUMENT	487:11	487:11	11	fd
FIELD	487:11	487:11	12	fd
LEAF_NODE	487:11	487:11	13	fd
LEAF_NODE	487:13	487:13	11	,
ARGUMENT	487:15	487:15	11	" %g"
FIELD	487:15	487:15	12	" %g"
LEAF_NODE	487:15	487:15	13	" %g"
LEAF_NODE	487:20	487:20	11	,
ARGUMENT	487:22	487:22	11	td -> td_sminsamplevalue [ i ]
FIELD	487:22	487:46	12	td -> td_sminsamplevalue [ i ]
LEAF_NODE	487:22	487:22	13	td
LEAF_NODE	487:24	487:24	13	->
LEAF_NODE	487:26	487:26	13	td_sminsamplevalue
LEAF_NODE	487:44	487:44	13	[
EXPR	487:45	487:45	13	i
FIELD	487:45	487:45	14	i
LEAF_NODE	487:45	487:45	15	i
LEAF_NODE	487:46	487:46	13	]
LEAF_NODE	487:47	487:47	11	)
LEAF_NODE	487:48	487:48	9	;
EXPR_STATEMENT	488:2	488:19	6	fprintf ( fd , "\n" ) ;
EXPR	488:2	488:2	7	fprintf ( fd , "\n" )
FUNCTION_CALL	488:2	488:18	8	fprintf ( fd , "\n" )
CALLEE	488:2	488:2	9	fprintf
LEAF_NODE	488:2	488:2	10	fprintf
LEAF_NODE	488:9	488:9	9	(
ARGUMENT	488:10	488:10	9	fd
FIELD	488:10	488:10	10	fd
LEAF_NODE	488:10	488:10	11	fd
LEAF_NODE	488:12	488:12	9	,
ARGUMENT	488:14	488:14	9	"\n"
FIELD	488:14	488:14	10	"\n"
LEAF_NODE	488:14	488:14	11	"\n"
LEAF_NODE	488:18	488:18	9	)
LEAF_NODE	488:19	488:19	7	;
LEAF_NODE	489:1	489:1	5	}
SELECTION	490:1	490:46	3	
KEYWORD	490:1	490:1	4	if
LEAF_NODE	490:1	490:1	5	if
LEAF_NODE	490:4	490:4	4	(
CONDITION	490:5	490:5	4	TIFFFieldSet ( tif , FIELD_SMAXSAMPLEVALUE )
EXPR	490:5	490:5	5	TIFFFieldSet ( tif , FIELD_SMAXSAMPLEVALUE )
FUNCTION_CALL	490:5	490:43	6	TIFFFieldSet ( tif , FIELD_SMAXSAMPLEVALUE )
CALLEE	490:5	490:5	7	TIFFFieldSet
LEAF_NODE	490:5	490:5	8	TIFFFieldSet
LEAF_NODE	490:17	490:17	7	(
ARGUMENT	490:18	490:18	7	tif
FIELD	490:18	490:18	8	tif
LEAF_NODE	490:18	490:18	9	tif
LEAF_NODE	490:21	490:21	7	,
ARGUMENT	490:22	490:22	7	FIELD_SMAXSAMPLEVALUE
FIELD	490:22	490:22	8	FIELD_SMAXSAMPLEVALUE
LEAF_NODE	490:22	490:22	9	FIELD_SMAXSAMPLEVALUE
LEAF_NODE	490:43	490:43	7	)
LEAF_NODE	490:44	490:44	4	)
STATEMENTS	490:46	497:1	4	
LEAF_NODE	490:46	490:46	5	{
STATEMENTS	491:2	496:2	5	
SIMPLE_DECL	491:2	491:7	6	int i ;
VAR_DECL	491:2	491:6	7	int i
TYPE	491:2	491:2	8	int
TYPE_NAME	491:2	491:2	9	int
LEAF_NODE	491:2	491:2	10	int
NAME	491:6	491:6	8	i
LEAF_NODE	491:6	491:6	9	i
LEAF_NODE	491:7	491:7	7	;
SIMPLE_DECL	492:2	492:76	6	int count ; count = ( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1 ;
VAR_DECL	492:2	492:6	7	int count ; count = ( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1
TYPE	492:2	492:2	8	int
TYPE_NAME	492:2	492:2	9	int
LEAF_NODE	492:2	492:2	10	int
NAME	492:6	492:6	8	count
LEAF_NODE	492:6	492:6	9	count
LEAF_NODE	0:0	0:0	8	;
INIT	492:6	492:6	8	count = ( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1
ASSIGN	492:6	492:14	9	count = ( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1
LVAL	492:6	492:6	10	count
NAME	492:6	492:6	11	count
LEAF_NODE	492:6	492:6	12	count
ASSIGN_OP	492:12	492:12	10	=
LEAF_NODE	492:12	492:12	11	=
RVAL	492:14	492:14	10	( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1
COND_EXPR	492:14	492:75	11	( tif -> tif_flags & TIFF_PERSAMPLE ) ? td -> td_samplesperpixel : 1
CONDITION	492:14	492:46	12	( tif -> tif_flags & TIFF_PERSAMPLE )
LEAF_NODE	492:14	492:14	13	(
FIELD	492:15	492:20	13	tif -> tif_flags
LEAF_NODE	492:15	492:15	14	tif
LEAF_NODE	492:18	492:18	14	->
LEAF_NODE	492:20	492:20	14	tif_flags
LEAF_NODE	492:30	492:30	13	&
FIELD	492:32	492:32	13	TIFF_PERSAMPLE
LEAF_NODE	492:32	492:32	14	TIFF_PERSAMPLE
LEAF_NODE	492:46	492:46	13	)
LEAF_NODE	492:48	492:48	12	?
EXPR	492:50	492:50	12	td -> td_samplesperpixel
FIELD	492:50	492:54	13	td -> td_samplesperpixel
LEAF_NODE	492:50	492:50	14	td
LEAF_NODE	492:52	492:52	14	->
LEAF_NODE	492:54	492:54	14	td_samplesperpixel
LEAF_NODE	492:73	492:73	12	:
FIELD	492:75	492:75	12	1
LEAF_NODE	492:75	492:75	13	1
LEAF_NODE	492:76	492:76	7	;
EXPR_STATEMENT	493:2	493:37	6	fprintf ( fd , "  SMax Sample Value:" ) ;
EXPR	493:2	493:2	7	fprintf ( fd , "  SMax Sample Value:" )
FUNCTION_CALL	493:2	493:36	8	fprintf ( fd , "  SMax Sample Value:" )
CALLEE	493:2	493:2	9	fprintf
LEAF_NODE	493:2	493:2	10	fprintf
LEAF_NODE	493:9	493:9	9	(
ARGUMENT	493:10	493:10	9	fd
FIELD	493:10	493:10	10	fd
LEAF_NODE	493:10	493:10	11	fd
LEAF_NODE	493:12	493:12	9	,
ARGUMENT	493:14	493:14	9	"  SMax Sample Value:"
FIELD	493:14	493:14	10	"  SMax Sample Value:"
LEAF_NODE	493:14	493:14	11	"  SMax Sample Value:"
LEAF_NODE	493:36	493:36	9	)
LEAF_NODE	493:37	493:37	7	;
ITERATION	494:2	495:3	6	
KEYWORD	494:2	494:2	7	for
LEAF_NODE	494:2	494:2	8	for
LEAF_NODE	494:6	494:6	7	(
FOR_INIT	494:7	494:12	7	i = 0 ;
EXPR	494:7	494:7	8	i = 0
ASSIGN	494:7	494:11	9	i = 0
LVAL	494:7	494:7	10	i
FIELD	494:7	494:7	11	i
LEAF_NODE	494:7	494:7	12	i
ASSIGN_OP	494:9	494:9	10	=
LEAF_NODE	494:9	494:9	11	=
RVAL	494:11	494:11	10	0
FIELD	494:11	494:11	11	0
LEAF_NODE	494:11	494:11	12	0
LEAF_NODE	494:12	494:12	8	;
CONDITION	494:14	494:14	7	i < count
EXPR	494:14	494:18	8	i < count
FIELD	494:14	494:14	9	i
LEAF_NODE	494:14	494:14	10	i
REL_OPERATOR	494:16	494:16	9	<
LEAF_NODE	494:16	494:16	10	<
FIELD	494:18	494:18	9	count
LEAF_NODE	494:18	494:18	10	count
LEAF_NODE	494:23	494:23	7	;
FOR_EXPR	494:25	494:25	7	++ i
EXPR	494:25	494:27	8	++ i
LEAF_NODE	494:25	494:25	9	++
FIELD	494:27	494:27	9	i
LEAF_NODE	494:27	494:27	10	i
LEAF_NODE	494:28	494:28	7	)
STATEMENTS	495:3	495:3	7	
EXPR_STATEMENT	495:3	495:48	8	fprintf ( fd , " %g" , td -> td_smaxsamplevalue [ i ] ) ;
EXPR	495:3	495:3	9	fprintf ( fd , " %g" , td -> td_smaxsamplevalue [ i ] )
FUNCTION_CALL	495:3	495:47	10	fprintf ( fd , " %g" , td -> td_smaxsamplevalue [ i ] )
CALLEE	495:3	495:3	11	fprintf
LEAF_NODE	495:3	495:3	12	fprintf
LEAF_NODE	495:10	495:10	11	(
ARGUMENT	495:11	495:11	11	fd
FIELD	495:11	495:11	12	fd
LEAF_NODE	495:11	495:11	13	fd
LEAF_NODE	495:13	495:13	11	,
ARGUMENT	495:15	495:15	11	" %g"
FIELD	495:15	495:15	12	" %g"
LEAF_NODE	495:15	495:15	13	" %g"
LEAF_NODE	495:20	495:20	11	,
ARGUMENT	495:22	495:22	11	td -> td_smaxsamplevalue [ i ]
FIELD	495:22	495:46	12	td -> td_smaxsamplevalue [ i ]
LEAF_NODE	495:22	495:22	13	td
LEAF_NODE	495:24	495:24	13	->
LEAF_NODE	495:26	495:26	13	td_smaxsamplevalue
LEAF_NODE	495:44	495:44	13	[
EXPR	495:45	495:45	13	i
FIELD	495:45	495:45	14	i
LEAF_NODE	495:45	495:45	15	i
LEAF_NODE	495:46	495:46	13	]
LEAF_NODE	495:47	495:47	11	)
LEAF_NODE	495:48	495:48	9	;
EXPR_STATEMENT	496:2	496:19	6	fprintf ( fd , "\n" ) ;
EXPR	496:2	496:2	7	fprintf ( fd , "\n" )
FUNCTION_CALL	496:2	496:18	8	fprintf ( fd , "\n" )
CALLEE	496:2	496:2	9	fprintf
LEAF_NODE	496:2	496:2	10	fprintf
LEAF_NODE	496:9	496:9	9	(
ARGUMENT	496:10	496:10	9	fd
FIELD	496:10	496:10	10	fd
LEAF_NODE	496:10	496:10	11	fd
LEAF_NODE	496:12	496:12	9	,
ARGUMENT	496:14	496:14	9	"\n"
FIELD	496:14	496:14	10	"\n"
LEAF_NODE	496:14	496:14	11	"\n"
LEAF_NODE	496:18	496:18	9	)
LEAF_NODE	496:19	496:19	7	;
LEAF_NODE	497:1	497:1	5	}
SELECTION	498:1	498:43	3	
KEYWORD	498:1	498:1	4	if
LEAF_NODE	498:1	498:1	5	if
LEAF_NODE	498:4	498:4	4	(
CONDITION	498:5	498:5	4	TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
EXPR	498:5	498:5	5	TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
FUNCTION_CALL	498:5	498:40	6	TIFFFieldSet ( tif , FIELD_PLANARCONFIG )
CALLEE	498:5	498:5	7	TIFFFieldSet
LEAF_NODE	498:5	498:5	8	TIFFFieldSet
LEAF_NODE	498:17	498:17	7	(
ARGUMENT	498:18	498:18	7	tif
FIELD	498:18	498:18	8	tif
LEAF_NODE	498:18	498:18	9	tif
LEAF_NODE	498:21	498:21	7	,
ARGUMENT	498:22	498:22	7	FIELD_PLANARCONFIG
FIELD	498:22	498:22	8	FIELD_PLANARCONFIG
LEAF_NODE	498:22	498:22	9	FIELD_PLANARCONFIG
LEAF_NODE	498:40	498:40	7	)
LEAF_NODE	498:41	498:41	4	)
STATEMENTS	498:43	512:1	4	
LEAF_NODE	498:43	498:43	5	{
STATEMENTS	499:2	500:2	5	
EXPR_STATEMENT	499:2	499:41	6	fprintf ( fd , "  Planar Configuration: " ) ;
EXPR	499:2	499:2	7	fprintf ( fd , "  Planar Configuration: " )
FUNCTION_CALL	499:2	499:40	8	fprintf ( fd , "  Planar Configuration: " )
CALLEE	499:2	499:2	9	fprintf
LEAF_NODE	499:2	499:2	10	fprintf
LEAF_NODE	499:9	499:9	9	(
ARGUMENT	499:10	499:10	9	fd
FIELD	499:10	499:10	10	fd
LEAF_NODE	499:10	499:10	11	fd
LEAF_NODE	499:12	499:12	9	,
ARGUMENT	499:14	499:14	9	"  Planar Configuration: "
FIELD	499:14	499:14	10	"  Planar Configuration: "
LEAF_NODE	499:14	499:14	11	"  Planar Configuration: "
LEAF_NODE	499:40	499:40	9	)
LEAF_NODE	499:41	499:41	7	;
SELECTION	500:2	500:31	6	
KEYWORD	500:2	500:2	7	switch
LEAF_NODE	500:2	500:2	8	switch
LEAF_NODE	500:9	500:9	7	(
CONDITION	500:10	500:10	7	td -> td_planarconfig
EXPR	500:10	500:10	8	td -> td_planarconfig
FIELD	500:10	500:14	9	td -> td_planarconfig
LEAF_NODE	500:10	500:10	10	td
LEAF_NODE	500:12	500:12	10	->
LEAF_NODE	500:14	500:14	10	td_planarconfig
LEAF_NODE	500:29	500:29	7	)
STATEMENTS	500:31	511:2	7	
LEAF_NODE	500:31	500:31	8	{
STATEMENTS	501:2	510:3	8	
LABEL	501:2	501:26	9	case PLANARCONFIG_CONTIG :
LEAF_NODE	501:2	501:2	10	case
LEAF_NODE	501:7	501:7	10	PLANARCONFIG_CONTIG
LEAF_NODE	501:26	501:26	10	:
EXPR_STATEMENT	502:3	502:38	9	fprintf ( fd , "single image plane\n" ) ;
EXPR	502:3	502:3	10	fprintf ( fd , "single image plane\n" )
FUNCTION_CALL	502:3	502:37	11	fprintf ( fd , "single image plane\n" )
CALLEE	502:3	502:3	12	fprintf
LEAF_NODE	502:3	502:3	13	fprintf
LEAF_NODE	502:10	502:10	12	(
ARGUMENT	502:11	502:11	12	fd
FIELD	502:11	502:11	13	fd
LEAF_NODE	502:11	502:11	14	fd
LEAF_NODE	502:13	502:13	12	,
ARGUMENT	502:15	502:15	12	"single image plane\n"
FIELD	502:15	502:15	13	"single image plane\n"
LEAF_NODE	502:15	502:15	14	"single image plane\n"
LEAF_NODE	502:37	502:37	12	)
LEAF_NODE	502:38	502:38	10	;
JUMP_STATEMENT	503:3	503:8	9	break DESTINATION ;
KEYWORD	503:3	503:3	10	break
LEAF_NODE	503:3	503:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	503:8	503:8	10	;
LABEL	504:2	504:28	9	case PLANARCONFIG_SEPARATE :
LEAF_NODE	504:2	504:2	10	case
LEAF_NODE	504:7	504:7	10	PLANARCONFIG_SEPARATE
LEAF_NODE	504:28	504:28	10	:
EXPR_STATEMENT	505:3	505:41	9	fprintf ( fd , "separate image planes\n" ) ;
EXPR	505:3	505:3	10	fprintf ( fd , "separate image planes\n" )
FUNCTION_CALL	505:3	505:40	11	fprintf ( fd , "separate image planes\n" )
CALLEE	505:3	505:3	12	fprintf
LEAF_NODE	505:3	505:3	13	fprintf
LEAF_NODE	505:10	505:10	12	(
ARGUMENT	505:11	505:11	12	fd
FIELD	505:11	505:11	13	fd
LEAF_NODE	505:11	505:11	14	fd
LEAF_NODE	505:13	505:13	12	,
ARGUMENT	505:15	505:15	12	"separate image planes\n"
FIELD	505:15	505:15	13	"separate image planes\n"
LEAF_NODE	505:15	505:15	14	"separate image planes\n"
LEAF_NODE	505:40	505:40	12	)
LEAF_NODE	505:41	505:41	10	;
JUMP_STATEMENT	506:3	506:8	9	break DESTINATION ;
KEYWORD	506:3	506:3	10	break
LEAF_NODE	506:3	506:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	506:8	506:8	10	;
LABEL	507:2	507:9	9	default :
LEAF_NODE	507:2	507:2	10	default
LEAF_NODE	507:9	507:9	10	:
EXPR_STATEMENT	508:3	509:48	9	fprintf ( fd , "%u (0x%x)\n" , td -> td_planarconfig , td -> td_planarconfig ) ;
EXPR	508:3	508:3	10	fprintf ( fd , "%u (0x%x)\n" , td -> td_planarconfig , td -> td_planarconfig )
FUNCTION_CALL	508:3	509:47	11	fprintf ( fd , "%u (0x%x)\n" , td -> td_planarconfig , td -> td_planarconfig )
CALLEE	508:3	508:3	12	fprintf
LEAF_NODE	508:3	508:3	13	fprintf
LEAF_NODE	508:10	508:10	12	(
ARGUMENT	508:11	508:11	12	fd
FIELD	508:11	508:11	13	fd
LEAF_NODE	508:11	508:11	14	fd
LEAF_NODE	508:13	508:13	12	,
ARGUMENT	508:15	508:15	12	"%u (0x%x)\n"
FIELD	508:15	508:15	13	"%u (0x%x)\n"
LEAF_NODE	508:15	508:15	14	"%u (0x%x)\n"
LEAF_NODE	508:28	508:28	12	,
ARGUMENT	509:7	509:7	12	td -> td_planarconfig
FIELD	509:7	509:11	13	td -> td_planarconfig
LEAF_NODE	509:7	509:7	14	td
LEAF_NODE	509:9	509:9	14	->
LEAF_NODE	509:11	509:11	14	td_planarconfig
LEAF_NODE	509:26	509:26	12	,
ARGUMENT	509:28	509:28	12	td -> td_planarconfig
FIELD	509:28	509:32	13	td -> td_planarconfig
LEAF_NODE	509:28	509:28	14	td
LEAF_NODE	509:30	509:30	14	->
LEAF_NODE	509:32	509:32	14	td_planarconfig
LEAF_NODE	509:47	509:47	12	)
LEAF_NODE	509:48	509:48	10	;
JUMP_STATEMENT	510:3	510:8	9	break DESTINATION ;
KEYWORD	510:3	510:3	10	break
LEAF_NODE	510:3	510:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	510:8	510:8	10	;
LEAF_NODE	511:2	511:2	8	}
LEAF_NODE	512:1	512:1	5	}
SELECTION	513:1	514:2	3	
KEYWORD	513:1	513:1	4	if
LEAF_NODE	513:1	513:1	5	if
LEAF_NODE	513:4	513:4	4	(
CONDITION	513:5	513:5	4	TIFFFieldSet ( tif , FIELD_PAGENUMBER )
EXPR	513:5	513:5	5	TIFFFieldSet ( tif , FIELD_PAGENUMBER )
FUNCTION_CALL	513:5	513:38	6	TIFFFieldSet ( tif , FIELD_PAGENUMBER )
CALLEE	513:5	513:5	7	TIFFFieldSet
LEAF_NODE	513:5	513:5	8	TIFFFieldSet
LEAF_NODE	513:17	513:17	7	(
ARGUMENT	513:18	513:18	7	tif
FIELD	513:18	513:18	8	tif
LEAF_NODE	513:18	513:18	9	tif
LEAF_NODE	513:21	513:21	7	,
ARGUMENT	513:22	513:22	7	FIELD_PAGENUMBER
FIELD	513:22	513:22	8	FIELD_PAGENUMBER
LEAF_NODE	513:22	513:22	9	FIELD_PAGENUMBER
LEAF_NODE	513:38	513:38	7	)
LEAF_NODE	513:39	513:39	4	)
STATEMENTS	514:2	514:2	4	
EXPR_STATEMENT	514:2	515:49	5	fprintf ( fd , "  Page Number: %u-%u\n" , td -> td_pagenumber [ 0 ] , td -> td_pagenumber [ 1 ] ) ;
EXPR	514:2	514:2	6	fprintf ( fd , "  Page Number: %u-%u\n" , td -> td_pagenumber [ 0 ] , td -> td_pagenumber [ 1 ] )
FUNCTION_CALL	514:2	515:48	7	fprintf ( fd , "  Page Number: %u-%u\n" , td -> td_pagenumber [ 0 ] , td -> td_pagenumber [ 1 ] )
CALLEE	514:2	514:2	8	fprintf
LEAF_NODE	514:2	514:2	9	fprintf
LEAF_NODE	514:9	514:9	8	(
ARGUMENT	514:10	514:10	8	fd
FIELD	514:10	514:10	9	fd
LEAF_NODE	514:10	514:10	10	fd
LEAF_NODE	514:12	514:12	8	,
ARGUMENT	514:14	514:14	8	"  Page Number: %u-%u\n"
FIELD	514:14	514:14	9	"  Page Number: %u-%u\n"
LEAF_NODE	514:14	514:14	10	"  Page Number: %u-%u\n"
LEAF_NODE	514:38	514:38	8	,
ARGUMENT	515:6	515:6	8	td -> td_pagenumber [ 0 ]
FIELD	515:6	515:25	9	td -> td_pagenumber [ 0 ]
LEAF_NODE	515:6	515:6	10	td
LEAF_NODE	515:8	515:8	10	->
LEAF_NODE	515:10	515:10	10	td_pagenumber
LEAF_NODE	515:23	515:23	10	[
EXPR	515:24	515:24	10	0
FIELD	515:24	515:24	11	0
LEAF_NODE	515:24	515:24	12	0
LEAF_NODE	515:25	515:25	10	]
LEAF_NODE	515:26	515:26	8	,
ARGUMENT	515:28	515:28	8	td -> td_pagenumber [ 1 ]
FIELD	515:28	515:47	9	td -> td_pagenumber [ 1 ]
LEAF_NODE	515:28	515:28	10	td
LEAF_NODE	515:30	515:30	10	->
LEAF_NODE	515:32	515:32	10	td_pagenumber
LEAF_NODE	515:45	515:45	10	[
EXPR	515:46	515:46	10	1
FIELD	515:46	515:46	11	1
LEAF_NODE	515:46	515:46	12	1
LEAF_NODE	515:47	515:47	10	]
LEAF_NODE	515:48	515:48	8	)
LEAF_NODE	515:49	515:49	6	;
SELECTION	516:1	516:39	3	
KEYWORD	516:1	516:1	4	if
LEAF_NODE	516:1	516:1	5	if
LEAF_NODE	516:4	516:4	4	(
CONDITION	516:5	516:5	4	TIFFFieldSet ( tif , FIELD_COLORMAP )
EXPR	516:5	516:5	5	TIFFFieldSet ( tif , FIELD_COLORMAP )
FUNCTION_CALL	516:5	516:36	6	TIFFFieldSet ( tif , FIELD_COLORMAP )
CALLEE	516:5	516:5	7	TIFFFieldSet
LEAF_NODE	516:5	516:5	8	TIFFFieldSet
LEAF_NODE	516:17	516:17	7	(
ARGUMENT	516:18	516:18	7	tif
FIELD	516:18	516:18	8	tif
LEAF_NODE	516:18	516:18	9	tif
LEAF_NODE	516:21	516:21	7	,
ARGUMENT	516:22	516:22	7	FIELD_COLORMAP
FIELD	516:22	516:22	8	FIELD_COLORMAP
LEAF_NODE	516:22	516:22	9	FIELD_COLORMAP
LEAF_NODE	516:36	516:36	7	)
LEAF_NODE	516:37	516:37	4	)
STATEMENTS	516:39	529:1	4	
LEAF_NODE	516:39	516:39	5	{
STATEMENTS	517:2	527:4	5	
EXPR_STATEMENT	517:2	517:30	6	fprintf ( fd , "  Color Map: " ) ;
EXPR	517:2	517:2	7	fprintf ( fd , "  Color Map: " )
FUNCTION_CALL	517:2	517:29	8	fprintf ( fd , "  Color Map: " )
CALLEE	517:2	517:2	9	fprintf
LEAF_NODE	517:2	517:2	10	fprintf
LEAF_NODE	517:9	517:9	9	(
ARGUMENT	517:10	517:10	9	fd
FIELD	517:10	517:10	10	fd
LEAF_NODE	517:10	517:10	11	fd
LEAF_NODE	517:12	517:12	9	,
ARGUMENT	517:14	517:14	9	"  Color Map: "
FIELD	517:14	517:14	10	"  Color Map: "
LEAF_NODE	517:14	517:14	11	"  Color Map: "
LEAF_NODE	517:29	517:29	9	)
LEAF_NODE	517:30	517:30	7	;
SELECTION	518:2	518:34	6	
KEYWORD	518:2	518:2	7	if
LEAF_NODE	518:2	518:2	8	if
LEAF_NODE	518:5	518:5	7	(
CONDITION	518:6	518:6	7	flags & TIFFPRINT_COLORMAP
EXPR	518:6	518:14	8	flags & TIFFPRINT_COLORMAP
FIELD	518:6	518:6	9	flags
LEAF_NODE	518:6	518:6	10	flags
LEAF_NODE	518:12	518:12	9	&
FIELD	518:14	518:14	9	TIFFPRINT_COLORMAP
LEAF_NODE	518:14	518:14	10	TIFFPRINT_COLORMAP
LEAF_NODE	518:32	518:32	7	)
STATEMENTS	518:34	527:2	7	
LEAF_NODE	518:34	518:34	8	{
STATEMENTS	519:3	521:3	8	
EXPR_STATEMENT	519:3	519:20	9	fprintf ( fd , "\n" ) ;
EXPR	519:3	519:3	10	fprintf ( fd , "\n" )
FUNCTION_CALL	519:3	519:19	11	fprintf ( fd , "\n" )
CALLEE	519:3	519:3	12	fprintf
LEAF_NODE	519:3	519:3	13	fprintf
LEAF_NODE	519:10	519:10	12	(
ARGUMENT	519:11	519:11	12	fd
FIELD	519:11	519:11	13	fd
LEAF_NODE	519:11	519:11	14	fd
LEAF_NODE	519:13	519:13	12	,
ARGUMENT	519:15	519:15	12	"\n"
FIELD	519:15	519:15	13	"\n"
LEAF_NODE	519:15	519:15	14	"\n"
LEAF_NODE	519:19	519:19	12	)
LEAF_NODE	519:20	519:20	10	;
EXPR_STATEMENT	520:3	520:31	9	n = 1L << td -> td_bitspersample ;
EXPR	520:3	520:3	10	n = 1L << td -> td_bitspersample
ASSIGN	520:3	520:7	11	n = 1L << td -> td_bitspersample
LVAL	520:3	520:3	12	n
FIELD	520:3	520:3	13	n
LEAF_NODE	520:3	520:3	14	n
ASSIGN_OP	520:5	520:5	12	=
LEAF_NODE	520:5	520:5	13	=
RVAL	520:7	520:11	12	1L << td -> td_bitspersample
FIELD	520:7	520:7	13	1L
LEAF_NODE	520:7	520:7	14	1L
LEAF_NODE	520:9	520:9	13	<<
FIELD	520:11	520:15	13	td -> td_bitspersample
LEAF_NODE	520:11	520:11	14	td
LEAF_NODE	520:13	520:13	14	->
LEAF_NODE	520:15	520:15	14	td_bitspersample
LEAF_NODE	520:31	520:31	10	;
ITERATION	521:3	522:4	9	
KEYWORD	521:3	521:3	10	for
LEAF_NODE	521:3	521:3	11	for
LEAF_NODE	521:7	521:7	10	(
FOR_INIT	521:8	521:13	10	l = 0 ;
EXPR	521:8	521:8	11	l = 0
ASSIGN	521:8	521:12	12	l = 0
LVAL	521:8	521:8	13	l
FIELD	521:8	521:8	14	l
LEAF_NODE	521:8	521:8	15	l
ASSIGN_OP	521:10	521:10	13	=
LEAF_NODE	521:10	521:10	14	=
RVAL	521:12	521:12	13	0
FIELD	521:12	521:12	14	0
LEAF_NODE	521:12	521:12	15	0
LEAF_NODE	521:13	521:13	11	;
CONDITION	521:15	521:15	10	l < n
EXPR	521:15	521:19	11	l < n
FIELD	521:15	521:15	12	l
LEAF_NODE	521:15	521:15	13	l
REL_OPERATOR	521:17	521:17	12	<
LEAF_NODE	521:17	521:17	13	<
FIELD	521:19	521:19	12	n
LEAF_NODE	521:19	521:19	13	n
LEAF_NODE	521:20	521:20	10	;
FOR_EXPR	521:22	521:22	10	l ++
EXPR	521:22	521:22	11	l ++
FIELD	521:22	521:23	12	l ++
LEAF_NODE	521:22	521:22	13	l
LEAF_NODE	521:23	521:23	13	++
LEAF_NODE	521:25	521:25	10	)
STATEMENTS	522:4	522:4	10	
EXPR_STATEMENT	522:4	526:30	11	fprintf ( fd , "   %5ld: %5u %5u %5u\n" , l , td -> td_colormap [ 0 ] [ l ] , td -> td_colormap [ 1 ] [ l ] , td -> td_colormap [ 2 ] [ l ] ) ;
EXPR	522:4	522:4	12	fprintf ( fd , "   %5ld: %5u %5u %5u\n" , l , td -> td_colormap [ 0 ] [ l ] , td -> td_colormap [ 1 ] [ l ] , td -> td_colormap [ 2 ] [ l ] )
FUNCTION_CALL	522:4	526:29	13	fprintf ( fd , "   %5ld: %5u %5u %5u\n" , l , td -> td_colormap [ 0 ] [ l ] , td -> td_colormap [ 1 ] [ l ] , td -> td_colormap [ 2 ] [ l ] )
CALLEE	522:4	522:4	14	fprintf
LEAF_NODE	522:4	522:4	15	fprintf
LEAF_NODE	522:11	522:11	14	(
ARGUMENT	522:12	522:12	14	fd
FIELD	522:12	522:12	15	fd
LEAF_NODE	522:12	522:12	16	fd
LEAF_NODE	522:14	522:14	14	,
ARGUMENT	522:16	522:16	14	"   %5ld: %5u %5u %5u\n"
FIELD	522:16	522:16	15	"   %5ld: %5u %5u %5u\n"
LEAF_NODE	522:16	522:16	16	"   %5ld: %5u %5u %5u\n"
LEAF_NODE	522:40	522:40	14	,
ARGUMENT	523:8	523:8	14	l
FIELD	523:8	523:8	15	l
LEAF_NODE	523:8	523:8	16	l
LEAF_NODE	523:9	523:9	14	,
ARGUMENT	524:8	524:8	14	td -> td_colormap [ 0 ] [ l ]
FIELD	524:8	524:28	15	td -> td_colormap [ 0 ] [ l ]
LEAF_NODE	524:8	524:8	16	td
LEAF_NODE	524:10	524:10	16	->
LEAF_NODE	524:12	524:12	16	td_colormap
LEAF_NODE	524:23	524:23	16	[
EXPR	524:24	524:24	16	0
FIELD	524:24	524:24	17	0
LEAF_NODE	524:24	524:24	18	0
LEAF_NODE	524:25	524:25	16	]
LEAF_NODE	524:26	524:26	16	[
EXPR	524:27	524:27	16	l
FIELD	524:27	524:27	17	l
LEAF_NODE	524:27	524:27	18	l
LEAF_NODE	524:28	524:28	16	]
LEAF_NODE	524:29	524:29	14	,
ARGUMENT	525:8	525:8	14	td -> td_colormap [ 1 ] [ l ]
FIELD	525:8	525:28	15	td -> td_colormap [ 1 ] [ l ]
LEAF_NODE	525:8	525:8	16	td
LEAF_NODE	525:10	525:10	16	->
LEAF_NODE	525:12	525:12	16	td_colormap
LEAF_NODE	525:23	525:23	16	[
EXPR	525:24	525:24	16	1
FIELD	525:24	525:24	17	1
LEAF_NODE	525:24	525:24	18	1
LEAF_NODE	525:25	525:25	16	]
LEAF_NODE	525:26	525:26	16	[
EXPR	525:27	525:27	16	l
FIELD	525:27	525:27	17	l
LEAF_NODE	525:27	525:27	18	l
LEAF_NODE	525:28	525:28	16	]
LEAF_NODE	525:29	525:29	14	,
ARGUMENT	526:8	526:8	14	td -> td_colormap [ 2 ] [ l ]
FIELD	526:8	526:28	15	td -> td_colormap [ 2 ] [ l ]
LEAF_NODE	526:8	526:8	16	td
LEAF_NODE	526:10	526:10	16	->
LEAF_NODE	526:12	526:12	16	td_colormap
LEAF_NODE	526:23	526:23	16	[
EXPR	526:24	526:24	16	2
FIELD	526:24	526:24	17	2
LEAF_NODE	526:24	526:24	18	2
LEAF_NODE	526:25	526:25	16	]
LEAF_NODE	526:26	526:26	16	[
EXPR	526:27	526:27	16	l
FIELD	526:27	526:27	17	l
LEAF_NODE	526:27	526:27	18	l
LEAF_NODE	526:28	526:28	16	]
LEAF_NODE	526:29	526:29	14	)
LEAF_NODE	526:30	526:30	12	;
LEAF_NODE	527:2	527:2	8	}
SELECTION	527:4	528:3	6	
KEYWORD	527:4	527:4	7	else
LEAF_NODE	527:4	527:4	8	else
STATEMENTS	528:3	528:3	7	
EXPR_STATEMENT	528:3	528:29	8	fprintf ( fd , "(present)\n" ) ;
EXPR	528:3	528:3	9	fprintf ( fd , "(present)\n" )
FUNCTION_CALL	528:3	528:28	10	fprintf ( fd , "(present)\n" )
CALLEE	528:3	528:3	11	fprintf
LEAF_NODE	528:3	528:3	12	fprintf
LEAF_NODE	528:10	528:10	11	(
ARGUMENT	528:11	528:11	11	fd
FIELD	528:11	528:11	12	fd
LEAF_NODE	528:11	528:11	13	fd
LEAF_NODE	528:13	528:13	11	,
ARGUMENT	528:15	528:15	11	"(present)\n"
FIELD	528:15	528:15	12	"(present)\n"
LEAF_NODE	528:15	528:15	13	"(present)\n"
LEAF_NODE	528:28	528:28	11	)
LEAF_NODE	528:29	528:29	9	;
LEAF_NODE	529:1	529:1	5	}
SELECTION	530:1	530:44	3	
KEYWORD	530:1	530:1	4	if
LEAF_NODE	530:1	530:1	5	if
LEAF_NODE	530:4	530:4	4	(
CONDITION	530:5	530:5	4	TIFFFieldSet ( tif , FIELD_REFBLACKWHITE )
EXPR	530:5	530:5	5	TIFFFieldSet ( tif , FIELD_REFBLACKWHITE )
FUNCTION_CALL	530:5	530:41	6	TIFFFieldSet ( tif , FIELD_REFBLACKWHITE )
CALLEE	530:5	530:5	7	TIFFFieldSet
LEAF_NODE	530:5	530:5	8	TIFFFieldSet
LEAF_NODE	530:17	530:17	7	(
ARGUMENT	530:18	530:18	7	tif
FIELD	530:18	530:18	8	tif
LEAF_NODE	530:18	530:18	9	tif
LEAF_NODE	530:21	530:21	7	,
ARGUMENT	530:22	530:22	7	FIELD_REFBLACKWHITE
FIELD	530:22	530:22	8	FIELD_REFBLACKWHITE
LEAF_NODE	530:22	530:22	9	FIELD_REFBLACKWHITE
LEAF_NODE	530:41	530:41	7	)
LEAF_NODE	530:42	530:42	4	)
STATEMENTS	530:44	537:1	4	
LEAF_NODE	530:44	530:44	5	{
STATEMENTS	531:2	533:2	5	
SIMPLE_DECL	531:2	531:7	6	int i ;
VAR_DECL	531:2	531:6	7	int i
TYPE	531:2	531:2	8	int
TYPE_NAME	531:2	531:2	9	int
LEAF_NODE	531:2	531:2	10	int
NAME	531:6	531:6	8	i
LEAF_NODE	531:6	531:6	9	i
LEAF_NODE	531:7	531:7	7	;
EXPR_STATEMENT	532:2	532:43	6	fprintf ( fd , "  Reference Black/White:\n" ) ;
EXPR	532:2	532:2	7	fprintf ( fd , "  Reference Black/White:\n" )
FUNCTION_CALL	532:2	532:42	8	fprintf ( fd , "  Reference Black/White:\n" )
CALLEE	532:2	532:2	9	fprintf
LEAF_NODE	532:2	532:2	10	fprintf
LEAF_NODE	532:9	532:9	9	(
ARGUMENT	532:10	532:10	9	fd
FIELD	532:10	532:10	10	fd
LEAF_NODE	532:10	532:10	11	fd
LEAF_NODE	532:12	532:12	9	,
ARGUMENT	532:14	532:14	9	"  Reference Black/White:\n"
FIELD	532:14	532:14	10	"  Reference Black/White:\n"
LEAF_NODE	532:14	532:14	11	"  Reference Black/White:\n"
LEAF_NODE	532:42	532:42	9	)
LEAF_NODE	532:43	532:43	7	;
ITERATION	533:2	534:2	6	
KEYWORD	533:2	533:2	7	for
LEAF_NODE	533:2	533:2	8	for
LEAF_NODE	533:6	533:6	7	(
FOR_INIT	533:7	533:12	7	i = 0 ;
EXPR	533:7	533:7	8	i = 0
ASSIGN	533:7	533:11	9	i = 0
LVAL	533:7	533:7	10	i
FIELD	533:7	533:7	11	i
LEAF_NODE	533:7	533:7	12	i
ASSIGN_OP	533:9	533:9	10	=
LEAF_NODE	533:9	533:9	11	=
RVAL	533:11	533:11	10	0
FIELD	533:11	533:11	11	0
LEAF_NODE	533:11	533:11	12	0
LEAF_NODE	533:12	533:12	8	;
CONDITION	533:14	533:14	7	i < 3
EXPR	533:14	533:18	8	i < 3
FIELD	533:14	533:14	9	i
LEAF_NODE	533:14	533:14	10	i
REL_OPERATOR	533:16	533:16	9	<
LEAF_NODE	533:16	533:16	10	<
FIELD	533:18	533:18	9	3
LEAF_NODE	533:18	533:18	10	3
LEAF_NODE	533:19	533:19	7	;
FOR_EXPR	533:21	533:21	7	i ++
EXPR	533:21	533:21	8	i ++
FIELD	533:21	533:22	9	i ++
LEAF_NODE	533:21	533:21	10	i
LEAF_NODE	533:22	533:22	10	++
LEAF_NODE	533:24	533:24	7	)
STATEMENTS	534:2	534:2	7	
EXPR_STATEMENT	534:2	536:31	8	fprintf ( fd , "    %2d: %5g %5g\n" , i , td -> td_refblackwhite [ 2 * i + 0 ] , td -> td_refblackwhite [ 2 * i + 1 ] ) ;
EXPR	534:2	534:2	9	fprintf ( fd , "    %2d: %5g %5g\n" , i , td -> td_refblackwhite [ 2 * i + 0 ] , td -> td_refblackwhite [ 2 * i + 1 ] )
FUNCTION_CALL	534:2	536:30	10	fprintf ( fd , "    %2d: %5g %5g\n" , i , td -> td_refblackwhite [ 2 * i + 0 ] , td -> td_refblackwhite [ 2 * i + 1 ] )
CALLEE	534:2	534:2	11	fprintf
LEAF_NODE	534:2	534:2	12	fprintf
LEAF_NODE	534:9	534:9	11	(
ARGUMENT	534:10	534:10	11	fd
FIELD	534:10	534:10	12	fd
LEAF_NODE	534:10	534:10	13	fd
LEAF_NODE	534:12	534:12	11	,
ARGUMENT	534:14	534:14	11	"    %2d: %5g %5g\n"
FIELD	534:14	534:14	12	"    %2d: %5g %5g\n"
LEAF_NODE	534:14	534:14	13	"    %2d: %5g %5g\n"
LEAF_NODE	534:34	534:34	11	,
ARGUMENT	534:36	534:36	11	i
FIELD	534:36	534:36	12	i
LEAF_NODE	534:36	534:36	13	i
LEAF_NODE	534:37	534:37	11	,
ARGUMENT	535:3	535:3	11	td -> td_refblackwhite [ 2 * i + 0 ]
FIELD	535:3	535:29	12	td -> td_refblackwhite [ 2 * i + 0 ]
LEAF_NODE	535:3	535:3	13	td
LEAF_NODE	535:5	535:5	13	->
LEAF_NODE	535:7	535:7	13	td_refblackwhite
LEAF_NODE	535:23	535:23	13	[
EXPR	535:24	535:28	13	2 * i + 0
FIELD	535:24	535:24	14	2
LEAF_NODE	535:24	535:24	15	2
LEAF_NODE	535:25	535:25	14	*
FIELD	535:26	535:26	14	i
LEAF_NODE	535:26	535:26	15	i
LEAF_NODE	535:27	535:27	14	+
FIELD	535:28	535:28	14	0
LEAF_NODE	535:28	535:28	15	0
LEAF_NODE	535:29	535:29	13	]
LEAF_NODE	535:30	535:30	11	,
ARGUMENT	536:3	536:3	11	td -> td_refblackwhite [ 2 * i + 1 ]
FIELD	536:3	536:29	12	td -> td_refblackwhite [ 2 * i + 1 ]
LEAF_NODE	536:3	536:3	13	td
LEAF_NODE	536:5	536:5	13	->
LEAF_NODE	536:7	536:7	13	td_refblackwhite
LEAF_NODE	536:23	536:23	13	[
EXPR	536:24	536:28	13	2 * i + 1
FIELD	536:24	536:24	14	2
LEAF_NODE	536:24	536:24	15	2
LEAF_NODE	536:25	536:25	14	*
FIELD	536:26	536:26	14	i
LEAF_NODE	536:26	536:26	15	i
LEAF_NODE	536:27	536:27	14	+
FIELD	536:28	536:28	14	1
LEAF_NODE	536:28	536:28	15	1
LEAF_NODE	536:29	536:29	13	]
LEAF_NODE	536:30	536:30	11	)
LEAF_NODE	536:31	536:31	9	;
LEAF_NODE	537:1	537:1	5	}
SELECTION	538:1	538:47	3	
KEYWORD	538:1	538:1	4	if
LEAF_NODE	538:1	538:1	5	if
LEAF_NODE	538:4	538:4	4	(
CONDITION	538:5	538:5	4	TIFFFieldSet ( tif , FIELD_TRANSFERFUNCTION )
EXPR	538:5	538:5	5	TIFFFieldSet ( tif , FIELD_TRANSFERFUNCTION )
FUNCTION_CALL	538:5	538:44	6	TIFFFieldSet ( tif , FIELD_TRANSFERFUNCTION )
CALLEE	538:5	538:5	7	TIFFFieldSet
LEAF_NODE	538:5	538:5	8	TIFFFieldSet
LEAF_NODE	538:17	538:17	7	(
ARGUMENT	538:18	538:18	7	tif
FIELD	538:18	538:18	8	tif
LEAF_NODE	538:18	538:18	9	tif
LEAF_NODE	538:21	538:21	7	,
ARGUMENT	538:22	538:22	7	FIELD_TRANSFERFUNCTION
FIELD	538:22	538:22	8	FIELD_TRANSFERFUNCTION
LEAF_NODE	538:22	538:22	9	FIELD_TRANSFERFUNCTION
LEAF_NODE	538:44	538:44	7	)
LEAF_NODE	538:45	538:45	4	)
STATEMENTS	538:47	554:1	4	
LEAF_NODE	538:47	538:47	5	{
STATEMENTS	539:2	552:4	5	
EXPR_STATEMENT	539:2	539:38	6	fprintf ( fd , "  Transfer Function: " ) ;
EXPR	539:2	539:2	7	fprintf ( fd , "  Transfer Function: " )
FUNCTION_CALL	539:2	539:37	8	fprintf ( fd , "  Transfer Function: " )
CALLEE	539:2	539:2	9	fprintf
LEAF_NODE	539:2	539:2	10	fprintf
LEAF_NODE	539:9	539:9	9	(
ARGUMENT	539:10	539:10	9	fd
FIELD	539:10	539:10	10	fd
LEAF_NODE	539:10	539:10	11	fd
LEAF_NODE	539:12	539:12	9	,
ARGUMENT	539:14	539:14	9	"  Transfer Function: "
FIELD	539:14	539:14	10	"  Transfer Function: "
LEAF_NODE	539:14	539:14	11	"  Transfer Function: "
LEAF_NODE	539:37	539:37	9	)
LEAF_NODE	539:38	539:38	7	;
SELECTION	540:2	540:32	6	
KEYWORD	540:2	540:2	7	if
LEAF_NODE	540:2	540:2	8	if
LEAF_NODE	540:5	540:5	7	(
CONDITION	540:6	540:6	7	flags & TIFFPRINT_CURVES
EXPR	540:6	540:14	8	flags & TIFFPRINT_CURVES
FIELD	540:6	540:6	9	flags
LEAF_NODE	540:6	540:6	10	flags
LEAF_NODE	540:12	540:12	9	&
FIELD	540:14	540:14	9	TIFFPRINT_CURVES
LEAF_NODE	540:14	540:14	10	TIFFPRINT_CURVES
LEAF_NODE	540:30	540:30	7	)
STATEMENTS	540:32	552:2	7	
LEAF_NODE	540:32	540:32	8	{
STATEMENTS	541:3	543:3	8	
EXPR_STATEMENT	541:3	541:20	9	fprintf ( fd , "\n" ) ;
EXPR	541:3	541:3	10	fprintf ( fd , "\n" )
FUNCTION_CALL	541:3	541:19	11	fprintf ( fd , "\n" )
CALLEE	541:3	541:3	12	fprintf
LEAF_NODE	541:3	541:3	13	fprintf
LEAF_NODE	541:10	541:10	12	(
ARGUMENT	541:11	541:11	12	fd
FIELD	541:11	541:11	13	fd
LEAF_NODE	541:11	541:11	14	fd
LEAF_NODE	541:13	541:13	12	,
ARGUMENT	541:15	541:15	12	"\n"
FIELD	541:15	541:15	13	"\n"
LEAF_NODE	541:15	541:15	14	"\n"
LEAF_NODE	541:19	541:19	12	)
LEAF_NODE	541:20	541:20	10	;
EXPR_STATEMENT	542:3	542:31	9	n = 1L << td -> td_bitspersample ;
EXPR	542:3	542:3	10	n = 1L << td -> td_bitspersample
ASSIGN	542:3	542:7	11	n = 1L << td -> td_bitspersample
LVAL	542:3	542:3	12	n
FIELD	542:3	542:3	13	n
LEAF_NODE	542:3	542:3	14	n
ASSIGN_OP	542:5	542:5	12	=
LEAF_NODE	542:5	542:5	13	=
RVAL	542:7	542:11	12	1L << td -> td_bitspersample
FIELD	542:7	542:7	13	1L
LEAF_NODE	542:7	542:7	14	1L
LEAF_NODE	542:9	542:9	13	<<
FIELD	542:11	542:15	13	td -> td_bitspersample
LEAF_NODE	542:11	542:11	14	td
LEAF_NODE	542:13	542:13	14	->
LEAF_NODE	542:15	542:15	14	td_bitspersample
LEAF_NODE	542:31	542:31	10	;
ITERATION	543:3	543:27	9	
KEYWORD	543:3	543:3	10	for
LEAF_NODE	543:3	543:3	11	for
LEAF_NODE	543:7	543:7	10	(
FOR_INIT	543:8	543:13	10	l = 0 ;
EXPR	543:8	543:8	11	l = 0
ASSIGN	543:8	543:12	12	l = 0
LVAL	543:8	543:8	13	l
FIELD	543:8	543:8	14	l
LEAF_NODE	543:8	543:8	15	l
ASSIGN_OP	543:10	543:10	13	=
LEAF_NODE	543:10	543:10	14	=
RVAL	543:12	543:12	13	0
FIELD	543:12	543:12	14	0
LEAF_NODE	543:12	543:12	15	0
LEAF_NODE	543:13	543:13	11	;
CONDITION	543:15	543:15	10	l < n
EXPR	543:15	543:19	11	l < n
FIELD	543:15	543:15	12	l
LEAF_NODE	543:15	543:15	13	l
REL_OPERATOR	543:17	543:17	12	<
LEAF_NODE	543:17	543:17	13	<
FIELD	543:19	543:19	12	n
LEAF_NODE	543:19	543:19	13	n
LEAF_NODE	543:20	543:20	10	;
FOR_EXPR	543:22	543:22	10	l ++
EXPR	543:22	543:22	11	l ++
FIELD	543:22	543:23	12	l ++
LEAF_NODE	543:22	543:22	13	l
LEAF_NODE	543:23	543:23	13	++
LEAF_NODE	543:25	543:25	10	)
STATEMENTS	543:27	551:3	10	
LEAF_NODE	543:27	543:27	11	{
STATEMENTS	544:4	550:4	11	
SIMPLE_DECL	544:4	544:12	12	uint16 i ;
VAR_DECL	544:4	544:11	13	uint16 i
TYPE	544:4	544:4	14	uint16
TYPE_NAME	544:4	544:4	15	uint16
LEAF_NODE	544:4	544:4	16	uint16
NAME	544:11	544:11	14	i
LEAF_NODE	544:11	544:11	15	i
LEAF_NODE	544:12	544:12	13	;
EXPR_STATEMENT	545:4	546:41	12	fprintf ( fd , "    %2ld: %5u" , l , td -> td_transferfunction [ 0 ] [ l ] ) ;
EXPR	545:4	545:4	13	fprintf ( fd , "    %2ld: %5u" , l , td -> td_transferfunction [ 0 ] [ l ] )
FUNCTION_CALL	545:4	546:40	14	fprintf ( fd , "    %2ld: %5u" , l , td -> td_transferfunction [ 0 ] [ l ] )
CALLEE	545:4	545:4	15	fprintf
LEAF_NODE	545:4	545:4	16	fprintf
LEAF_NODE	545:11	545:11	15	(
ARGUMENT	545:12	545:12	15	fd
FIELD	545:12	545:12	16	fd
LEAF_NODE	545:12	545:12	17	fd
LEAF_NODE	545:14	545:14	15	,
ARGUMENT	545:16	545:16	15	"    %2ld: %5u"
FIELD	545:16	545:16	16	"    %2ld: %5u"
LEAF_NODE	545:16	545:16	17	"    %2ld: %5u"
LEAF_NODE	545:31	545:31	15	,
ARGUMENT	546:8	546:8	15	l
FIELD	546:8	546:8	16	l
LEAF_NODE	546:8	546:8	17	l
LEAF_NODE	546:9	546:9	15	,
ARGUMENT	546:11	546:11	15	td -> td_transferfunction [ 0 ] [ l ]
FIELD	546:11	546:39	16	td -> td_transferfunction [ 0 ] [ l ]
LEAF_NODE	546:11	546:11	17	td
LEAF_NODE	546:13	546:13	17	->
LEAF_NODE	546:15	546:15	17	td_transferfunction
LEAF_NODE	546:34	546:34	17	[
EXPR	546:35	546:35	17	0
FIELD	546:35	546:35	18	0
LEAF_NODE	546:35	546:35	19	0
LEAF_NODE	546:36	546:36	17	]
LEAF_NODE	546:37	546:37	17	[
EXPR	546:38	546:38	17	l
FIELD	546:38	546:38	18	l
LEAF_NODE	546:38	546:38	19	l
LEAF_NODE	546:39	546:39	17	]
LEAF_NODE	546:40	546:40	15	)
LEAF_NODE	546:41	546:41	13	;
ITERATION	547:4	548:5	12	
KEYWORD	547:4	547:4	13	for
LEAF_NODE	547:4	547:4	14	for
LEAF_NODE	547:8	547:8	13	(
FOR_INIT	547:9	547:14	13	i = 1 ;
EXPR	547:9	547:9	14	i = 1
ASSIGN	547:9	547:13	15	i = 1
LVAL	547:9	547:9	16	i
FIELD	547:9	547:9	17	i
LEAF_NODE	547:9	547:9	18	i
ASSIGN_OP	547:11	547:11	16	=
LEAF_NODE	547:11	547:11	17	=
RVAL	547:13	547:13	16	1
FIELD	547:13	547:13	17	1
LEAF_NODE	547:13	547:13	18	1
LEAF_NODE	547:14	547:14	14	;
CONDITION	547:16	547:16	13	i < td -> td_samplesperpixel - td -> td_extrasamples && i < 3
EXPR	547:16	547:16	14	i < td -> td_samplesperpixel - td -> td_extrasamples && i < 3
AND	547:16	547:68	15	i < td -> td_samplesperpixel - td -> td_extrasamples && i < 3
EXPR	547:16	547:45	16	i < td -> td_samplesperpixel - td -> td_extrasamples
FIELD	547:16	547:16	17	i
LEAF_NODE	547:16	547:16	18	i
REL_OPERATOR	547:18	547:18	17	<
LEAF_NODE	547:18	547:18	18	<
FIELD	547:20	547:24	17	td -> td_samplesperpixel
LEAF_NODE	547:20	547:20	18	td
LEAF_NODE	547:22	547:22	18	->
LEAF_NODE	547:24	547:24	18	td_samplesperpixel
LEAF_NODE	547:43	547:43	17	-
FIELD	547:45	547:49	17	td -> td_extrasamples
LEAF_NODE	547:45	547:45	18	td
LEAF_NODE	547:47	547:47	18	->
LEAF_NODE	547:49	547:49	18	td_extrasamples
LEAF_NODE	547:65	547:65	16	&&
EXPR	547:68	547:72	16	i < 3
FIELD	547:68	547:68	17	i
LEAF_NODE	547:68	547:68	18	i
REL_OPERATOR	547:70	547:70	17	<
LEAF_NODE	547:70	547:70	18	<
FIELD	547:72	547:72	17	3
LEAF_NODE	547:72	547:72	18	3
LEAF_NODE	547:73	547:73	13	;
FOR_EXPR	547:75	547:75	13	i ++
EXPR	547:75	547:75	14	i ++
FIELD	547:75	547:76	15	i ++
LEAF_NODE	547:75	547:75	16	i
LEAF_NODE	547:76	547:76	16	++
LEAF_NODE	547:78	547:78	13	)
STATEMENTS	548:5	548:5	13	
EXPR_STATEMENT	548:5	549:39	14	fprintf ( fd , " %5u" , td -> td_transferfunction [ i ] [ l ] ) ;
EXPR	548:5	548:5	15	fprintf ( fd , " %5u" , td -> td_transferfunction [ i ] [ l ] )
FUNCTION_CALL	548:5	549:38	16	fprintf ( fd , " %5u" , td -> td_transferfunction [ i ] [ l ] )
CALLEE	548:5	548:5	17	fprintf
LEAF_NODE	548:5	548:5	18	fprintf
LEAF_NODE	548:12	548:12	17	(
ARGUMENT	548:13	548:13	17	fd
FIELD	548:13	548:13	18	fd
LEAF_NODE	548:13	548:13	19	fd
LEAF_NODE	548:15	548:15	17	,
ARGUMENT	548:17	548:17	17	" %5u"
FIELD	548:17	548:17	18	" %5u"
LEAF_NODE	548:17	548:17	19	" %5u"
LEAF_NODE	548:23	548:23	17	,
ARGUMENT	549:9	549:9	17	td -> td_transferfunction [ i ] [ l ]
FIELD	549:9	549:37	18	td -> td_transferfunction [ i ] [ l ]
LEAF_NODE	549:9	549:9	19	td
LEAF_NODE	549:11	549:11	19	->
LEAF_NODE	549:13	549:13	19	td_transferfunction
LEAF_NODE	549:32	549:32	19	[
EXPR	549:33	549:33	19	i
FIELD	549:33	549:33	20	i
LEAF_NODE	549:33	549:33	21	i
LEAF_NODE	549:34	549:34	19	]
LEAF_NODE	549:35	549:35	19	[
EXPR	549:36	549:36	19	l
FIELD	549:36	549:36	20	l
LEAF_NODE	549:36	549:36	21	l
LEAF_NODE	549:37	549:37	19	]
LEAF_NODE	549:38	549:38	17	)
LEAF_NODE	549:39	549:39	15	;
EXPR_STATEMENT	550:4	550:19	12	fputc ( '\n' , fd ) ;
EXPR	550:4	550:4	13	fputc ( '\n' , fd )
FUNCTION_CALL	550:4	550:18	14	fputc ( '\n' , fd )
CALLEE	550:4	550:4	15	fputc
LEAF_NODE	550:4	550:4	16	fputc
LEAF_NODE	550:9	550:9	15	(
ARGUMENT	550:10	550:10	15	'\n'
FIELD	550:10	550:10	16	'\n'
LEAF_NODE	550:10	550:10	17	'\n'
LEAF_NODE	550:14	550:14	15	,
ARGUMENT	550:16	550:16	15	fd
FIELD	550:16	550:16	16	fd
LEAF_NODE	550:16	550:16	17	fd
LEAF_NODE	550:18	550:18	15	)
LEAF_NODE	550:19	550:19	13	;
LEAF_NODE	551:3	551:3	11	}
LEAF_NODE	552:2	552:2	8	}
SELECTION	552:4	553:3	6	
KEYWORD	552:4	552:4	7	else
LEAF_NODE	552:4	552:4	8	else
STATEMENTS	553:3	553:3	7	
EXPR_STATEMENT	553:3	553:29	8	fprintf ( fd , "(present)\n" ) ;
EXPR	553:3	553:3	9	fprintf ( fd , "(present)\n" )
FUNCTION_CALL	553:3	553:28	10	fprintf ( fd , "(present)\n" )
CALLEE	553:3	553:3	11	fprintf
LEAF_NODE	553:3	553:3	12	fprintf
LEAF_NODE	553:10	553:10	11	(
ARGUMENT	553:11	553:11	11	fd
FIELD	553:11	553:11	12	fd
LEAF_NODE	553:11	553:11	13	fd
LEAF_NODE	553:13	553:13	11	,
ARGUMENT	553:15	553:15	11	"(present)\n"
FIELD	553:15	553:15	12	"(present)\n"
LEAF_NODE	553:15	553:15	13	"(present)\n"
LEAF_NODE	553:28	553:28	11	)
LEAF_NODE	553:29	553:29	9	;
LEAF_NODE	554:1	554:1	5	}
SELECTION	555:1	555:57	3	
KEYWORD	555:1	555:1	4	if
LEAF_NODE	555:1	555:1	5	if
LEAF_NODE	555:4	555:4	4	(
CONDITION	555:5	555:5	4	TIFFFieldSet ( tif , FIELD_SUBIFD ) && ( td -> td_subifd )
EXPR	555:5	555:5	5	TIFFFieldSet ( tif , FIELD_SUBIFD ) && ( td -> td_subifd )
AND	555:5	555:40	6	TIFFFieldSet ( tif , FIELD_SUBIFD ) && ( td -> td_subifd )
EXPR	555:5	555:5	7	TIFFFieldSet ( tif , FIELD_SUBIFD )
FUNCTION_CALL	555:5	555:35	8	TIFFFieldSet ( tif , FIELD_SUBIFD )
CALLEE	555:5	555:5	9	TIFFFieldSet
LEAF_NODE	555:5	555:5	10	TIFFFieldSet
LEAF_NODE	555:17	555:17	9	(
ARGUMENT	555:18	555:18	9	tif
FIELD	555:18	555:18	10	tif
LEAF_NODE	555:18	555:18	11	tif
LEAF_NODE	555:21	555:21	9	,
ARGUMENT	555:23	555:23	9	FIELD_SUBIFD
FIELD	555:23	555:23	10	FIELD_SUBIFD
LEAF_NODE	555:23	555:23	11	FIELD_SUBIFD
LEAF_NODE	555:35	555:35	9	)
LEAF_NODE	555:37	555:37	7	&&
EXPR	555:40	555:54	7	( td -> td_subifd )
LEAF_NODE	555:40	555:40	8	(
FIELD	555:41	555:45	8	td -> td_subifd
LEAF_NODE	555:41	555:41	9	td
LEAF_NODE	555:43	555:43	9	->
LEAF_NODE	555:45	555:45	9	td_subifd
LEAF_NODE	555:54	555:54	8	)
LEAF_NODE	555:55	555:55	4	)
STATEMENTS	555:57	567:1	4	
LEAF_NODE	555:57	555:57	5	{
STATEMENTS	556:2	566:2	5	
SIMPLE_DECL	556:2	556:10	6	uint16 i ;
VAR_DECL	556:2	556:9	7	uint16 i
TYPE	556:2	556:2	8	uint16
TYPE_NAME	556:2	556:2	9	uint16
LEAF_NODE	556:2	556:2	10	uint16
NAME	556:9	556:9	8	i
LEAF_NODE	556:9	556:9	9	i
LEAF_NODE	556:10	556:10	7	;
EXPR_STATEMENT	557:2	557:34	6	fprintf ( fd , "  SubIFD Offsets:" ) ;
EXPR	557:2	557:2	7	fprintf ( fd , "  SubIFD Offsets:" )
FUNCTION_CALL	557:2	557:33	8	fprintf ( fd , "  SubIFD Offsets:" )
CALLEE	557:2	557:2	9	fprintf
LEAF_NODE	557:2	557:2	10	fprintf
LEAF_NODE	557:9	557:9	9	(
ARGUMENT	557:10	557:10	9	fd
FIELD	557:10	557:10	10	fd
LEAF_NODE	557:10	557:10	11	fd
LEAF_NODE	557:12	557:12	9	,
ARGUMENT	557:14	557:14	9	"  SubIFD Offsets:"
FIELD	557:14	557:14	10	"  SubIFD Offsets:"
LEAF_NODE	557:14	557:14	11	"  SubIFD Offsets:"
LEAF_NODE	557:33	557:33	9	)
LEAF_NODE	557:34	557:34	7	;
ITERATION	558:2	560:3	6	
KEYWORD	558:2	558:2	7	for
LEAF_NODE	558:2	558:2	8	for
LEAF_NODE	558:6	558:6	7	(
FOR_INIT	558:7	558:12	7	i = 0 ;
EXPR	558:7	558:7	8	i = 0
ASSIGN	558:7	558:11	9	i = 0
LVAL	558:7	558:7	10	i
FIELD	558:7	558:7	11	i
LEAF_NODE	558:7	558:7	12	i
ASSIGN_OP	558:9	558:9	10	=
LEAF_NODE	558:9	558:9	11	=
RVAL	558:11	558:11	10	0
FIELD	558:11	558:11	11	0
LEAF_NODE	558:11	558:11	12	0
LEAF_NODE	558:12	558:12	8	;
CONDITION	558:14	558:14	7	i < td -> td_nsubifd
EXPR	558:14	558:18	8	i < td -> td_nsubifd
FIELD	558:14	558:14	9	i
LEAF_NODE	558:14	558:14	10	i
REL_OPERATOR	558:16	558:16	9	<
LEAF_NODE	558:16	558:16	10	<
FIELD	558:18	558:22	9	td -> td_nsubifd
LEAF_NODE	558:18	558:18	10	td
LEAF_NODE	558:20	558:20	10	->
LEAF_NODE	558:22	558:22	10	td_nsubifd
LEAF_NODE	558:32	558:32	7	;
FOR_EXPR	558:34	558:34	7	i ++
EXPR	558:34	558:34	8	i ++
FIELD	558:34	558:35	9	i ++
LEAF_NODE	558:34	558:34	10	i
LEAF_NODE	558:35	558:35	10	++
LEAF_NODE	558:37	558:37	7	)
STATEMENTS	560:3	560:3	7	
EXPR_STATEMENT	560:3	561:40	8	fprintf ( fd , " %5I64u" , ( unsigned __int64 ) td -> td_subifd [ i ] ) ;
EXPR	560:3	560:3	9	fprintf ( fd , " %5I64u" , ( unsigned __int64 ) td -> td_subifd [ i ] )
FUNCTION_CALL	560:3	561:39	10	fprintf ( fd , " %5I64u" , ( unsigned __int64 ) td -> td_subifd [ i ] )
CALLEE	560:3	560:3	11	fprintf
LEAF_NODE	560:3	560:3	12	fprintf
LEAF_NODE	560:10	560:10	11	(
ARGUMENT	560:11	560:11	11	fd
FIELD	560:11	560:11	12	fd
LEAF_NODE	560:11	560:11	13	fd
LEAF_NODE	560:13	560:13	11	,
ARGUMENT	560:15	560:15	11	" %5I64u"
FIELD	560:15	560:15	12	" %5I64u"
LEAF_NODE	560:15	560:15	13	" %5I64u"
LEAF_NODE	560:24	560:24	11	,
ARGUMENT	561:4	561:23	11	( unsigned __int64 ) td -> td_subifd [ i ]
LEAF_NODE	561:4	561:4	12	(
TYPE_NAME	561:5	561:14	12	unsigned __int64
LEAF_NODE	561:5	561:5	13	unsigned
LEAF_NODE	561:14	561:14	13	__int64
LEAF_NODE	561:21	561:21	12	)
FIELD	561:23	561:38	12	td -> td_subifd [ i ]
LEAF_NODE	561:23	561:23	13	td
LEAF_NODE	561:25	561:25	13	->
LEAF_NODE	561:27	561:27	13	td_subifd
LEAF_NODE	561:36	561:36	13	[
EXPR	561:37	561:37	13	i
FIELD	561:37	561:37	14	i
LEAF_NODE	561:37	561:37	15	i
LEAF_NODE	561:38	561:38	13	]
LEAF_NODE	561:39	561:39	11	)
LEAF_NODE	561:40	561:40	9	;
LEAF_NODE	563:3	563:3	6	fprintf
LEAF_NODE	563:10	563:10	6	(
LEAF_NODE	563:11	563:11	6	fd
LEAF_NODE	563:13	563:13	6	,
LEAF_NODE	563:15	563:15	6	" %5llu"
LEAF_NODE	563:23	563:23	6	,
LEAF_NODE	564:4	564:4	6	(
LEAF_NODE	564:5	564:5	6	unsigned
LEAF_NODE	564:14	564:14	6	long
LEAF_NODE	564:19	564:19	6	long
LEAF_NODE	564:23	564:23	6	)
LEAF_NODE	564:25	564:25	6	td
LEAF_NODE	564:27	564:27	6	->
LEAF_NODE	564:29	564:29	6	td_subifd
LEAF_NODE	564:38	564:38	6	[
LEAF_NODE	564:39	564:39	6	i
LEAF_NODE	564:40	564:40	6	]
LEAF_NODE	564:41	564:41	6	)
LEAF_NODE	564:42	564:42	6	;
EXPR_STATEMENT	566:2	566:17	6	fputc ( '\n' , fd ) ;
EXPR	566:2	566:2	7	fputc ( '\n' , fd )
FUNCTION_CALL	566:2	566:16	8	fputc ( '\n' , fd )
CALLEE	566:2	566:2	9	fputc
LEAF_NODE	566:2	566:2	10	fputc
LEAF_NODE	566:7	566:7	9	(
ARGUMENT	566:8	566:8	9	'\n'
FIELD	566:8	566:8	10	'\n'
LEAF_NODE	566:8	566:8	11	'\n'
LEAF_NODE	566:12	566:12	9	,
ARGUMENT	566:14	566:14	9	fd
FIELD	566:14	566:14	10	fd
LEAF_NODE	566:14	566:14	11	fd
LEAF_NODE	566:16	566:16	9	)
LEAF_NODE	566:17	566:17	7	;
LEAF_NODE	567:1	567:1	5	}
LEAF_NODE	572:1	572:1	3	{
STATEMENTS	573:2	577:2	3	
SIMPLE_DECL	573:2	573:8	4	int i ;
VAR_DECL	573:2	573:7	5	int i
TYPE	573:2	573:2	6	int
TYPE_NAME	573:2	573:2	7	int
LEAF_NODE	573:2	573:2	8	int
NAME	573:7	573:7	6	i
LEAF_NODE	573:7	573:7	7	i
LEAF_NODE	573:8	573:8	5	;
SIMPLE_DECL	574:2	574:13	4	short count ;
VAR_DECL	574:2	574:8	5	short count
TYPE	574:2	574:2	6	short
TYPE_NAME	574:2	574:2	7	short
LEAF_NODE	574:2	574:2	8	short
NAME	574:8	574:8	6	count
LEAF_NODE	574:8	574:8	7	count
LEAF_NODE	574:13	574:13	5	;
EXPR_STATEMENT	576:2	576:42	4	count = ( short ) TIFFGetTagListCount ( tif ) ;
EXPR	576:2	576:2	5	count = ( short ) TIFFGetTagListCount ( tif )
ASSIGN	576:2	576:10	6	count = ( short ) TIFFGetTagListCount ( tif )
LVAL	576:2	576:2	7	count
FIELD	576:2	576:2	8	count
LEAF_NODE	576:2	576:2	9	count
ASSIGN_OP	576:8	576:8	7	=
LEAF_NODE	576:8	576:8	8	=
RVAL	576:10	576:18	7	( short ) TIFFGetTagListCount ( tif )
LEAF_NODE	576:10	576:10	8	(
TYPE_NAME	576:11	576:11	8	short
LEAF_NODE	576:11	576:11	9	short
LEAF_NODE	576:16	576:16	8	)
FUNCTION_CALL	576:18	576:41	8	TIFFGetTagListCount ( tif )
CALLEE	576:18	576:18	9	TIFFGetTagListCount
LEAF_NODE	576:18	576:18	10	TIFFGetTagListCount
LEAF_NODE	576:37	576:37	9	(
ARGUMENT	576:38	576:38	9	tif
FIELD	576:38	576:38	10	tif
LEAF_NODE	576:38	576:38	11	tif
LEAF_NODE	576:41	576:41	9	)
LEAF_NODE	576:42	576:42	5	;
ITERATION	577:2	577:29	4	
KEYWORD	577:2	577:2	5	for
LEAF_NODE	577:2	577:2	6	for
LEAF_NODE	577:5	577:5	5	(
FOR_INIT	577:6	577:11	5	i = 0 ;
EXPR	577:6	577:6	6	i = 0
ASSIGN	577:6	577:10	7	i = 0
LVAL	577:6	577:6	8	i
FIELD	577:6	577:6	9	i
LEAF_NODE	577:6	577:6	10	i
ASSIGN_OP	577:8	577:8	8	=
LEAF_NODE	577:8	577:8	9	=
RVAL	577:10	577:10	8	0
FIELD	577:10	577:10	9	0
LEAF_NODE	577:10	577:10	10	0
LEAF_NODE	577:11	577:11	6	;
CONDITION	577:13	577:13	5	i < count
EXPR	577:13	577:17	6	i < count
FIELD	577:13	577:13	7	i
LEAF_NODE	577:13	577:13	8	i
REL_OPERATOR	577:15	577:15	7	<
LEAF_NODE	577:15	577:15	8	<
FIELD	577:17	577:17	7	count
LEAF_NODE	577:17	577:17	8	count
LEAF_NODE	577:22	577:22	5	;
FOR_EXPR	577:24	577:24	5	i ++
EXPR	577:24	577:24	6	i ++
FIELD	577:24	577:25	7	i ++
LEAF_NODE	577:24	577:24	8	i
LEAF_NODE	577:25	577:25	8	++
LEAF_NODE	577:27	577:27	5	)
STATEMENTS	577:29	649:2	5	
LEAF_NODE	577:29	577:29	6	{
STATEMENTS	578:3	647:3	6	
SIMPLE_DECL	578:3	578:43	7	uint32 tag ; tag = TIFFGetTagListEntry ( tif , i ) ;
VAR_DECL	578:3	578:10	8	uint32 tag ; tag = TIFFGetTagListEntry ( tif , i )
TYPE	578:3	578:3	9	uint32
TYPE_NAME	578:3	578:3	10	uint32
LEAF_NODE	578:3	578:3	11	uint32
NAME	578:10	578:10	9	tag
LEAF_NODE	578:10	578:10	10	tag
LEAF_NODE	0:0	0:0	9	;
INIT	578:10	578:10	9	tag = TIFFGetTagListEntry ( tif , i )
ASSIGN	578:10	578:16	10	tag = TIFFGetTagListEntry ( tif , i )
LVAL	578:10	578:10	11	tag
NAME	578:10	578:10	12	tag
LEAF_NODE	578:10	578:10	13	tag
ASSIGN_OP	578:14	578:14	11	=
LEAF_NODE	578:14	578:14	12	=
RVAL	578:16	578:16	11	TIFFGetTagListEntry ( tif , i )
FUNCTION_CALL	578:16	578:42	12	TIFFGetTagListEntry ( tif , i )
CALLEE	578:16	578:16	13	TIFFGetTagListEntry
LEAF_NODE	578:16	578:16	14	TIFFGetTagListEntry
LEAF_NODE	578:35	578:35	13	(
ARGUMENT	578:36	578:36	13	tif
FIELD	578:36	578:36	14	tif
LEAF_NODE	578:36	578:36	15	tif
LEAF_NODE	578:39	578:39	13	,
ARGUMENT	578:41	578:41	13	i
FIELD	578:41	578:41	14	i
LEAF_NODE	578:41	578:41	15	i
LEAF_NODE	578:42	578:42	13	)
LEAF_NODE	578:43	578:43	8	;
SIMPLE_DECL	579:3	579:23	7	const TIFFField * fip ;
VAR_DECL	579:3	579:20	8	const TIFFField * fip
TYPE	579:3	579:19	9	const TIFFField *
TYPE_NAME	579:3	579:9	10	const TIFFField
LEAF_NODE	579:3	579:3	11	const
LEAF_NODE	579:9	579:9	11	TIFFField
POINTER	579:19	579:19	10	*
LEAF_NODE	579:19	579:19	11	*
NAME	579:20	579:20	9	fip
LEAF_NODE	579:20	579:20	10	fip
LEAF_NODE	579:23	579:23	8	;
SIMPLE_DECL	580:3	580:21	7	uint32 value_count ;
VAR_DECL	580:3	580:10	8	uint32 value_count
TYPE	580:3	580:3	9	uint32
TYPE_NAME	580:3	580:3	10	uint32
LEAF_NODE	580:3	580:3	11	uint32
NAME	580:10	580:10	9	value_count
LEAF_NODE	580:10	580:10	10	value_count
LEAF_NODE	580:21	580:21	8	;
SIMPLE_DECL	581:3	581:20	7	int mem_alloc ; mem_alloc = 0 ;
VAR_DECL	581:3	581:7	8	int mem_alloc ; mem_alloc = 0
TYPE	581:3	581:3	9	int
TYPE_NAME	581:3	581:3	10	int
LEAF_NODE	581:3	581:3	11	int
NAME	581:7	581:7	9	mem_alloc
LEAF_NODE	581:7	581:7	10	mem_alloc
LEAF_NODE	0:0	0:0	9	;
INIT	581:7	581:7	9	mem_alloc = 0
ASSIGN	581:7	581:19	10	mem_alloc = 0
LVAL	581:7	581:7	11	mem_alloc
NAME	581:7	581:7	12	mem_alloc
LEAF_NODE	581:7	581:7	13	mem_alloc
ASSIGN_OP	581:17	581:17	11	=
LEAF_NODE	581:17	581:17	12	=
RVAL	581:19	581:19	11	0
FIELD	581:19	581:19	12	0
LEAF_NODE	581:19	581:19	13	0
LEAF_NODE	581:20	581:20	8	;
SIMPLE_DECL	582:3	582:17	7	void * raw_data ;
VAR_DECL	582:3	582:9	8	void * raw_data
TYPE	582:3	582:8	9	void *
TYPE_NAME	582:3	582:3	10	void
LEAF_NODE	582:3	582:3	11	void
POINTER	582:8	582:8	10	*
LEAF_NODE	582:8	582:8	11	*
NAME	582:9	582:9	9	raw_data
LEAF_NODE	582:9	582:9	10	raw_data
LEAF_NODE	582:17	582:17	8	;
EXPR_STATEMENT	584:3	584:35	7	fip = TIFFFieldWithTag ( tif , tag ) ;
EXPR	584:3	584:3	8	fip = TIFFFieldWithTag ( tif , tag )
ASSIGN	584:3	584:9	9	fip = TIFFFieldWithTag ( tif , tag )
LVAL	584:3	584:3	10	fip
FIELD	584:3	584:3	11	fip
LEAF_NODE	584:3	584:3	12	fip
ASSIGN_OP	584:7	584:7	10	=
LEAF_NODE	584:7	584:7	11	=
RVAL	584:9	584:9	10	TIFFFieldWithTag ( tif , tag )
FUNCTION_CALL	584:9	584:34	11	TIFFFieldWithTag ( tif , tag )
CALLEE	584:9	584:9	12	TIFFFieldWithTag
LEAF_NODE	584:9	584:9	13	TIFFFieldWithTag
LEAF_NODE	584:25	584:25	12	(
ARGUMENT	584:26	584:26	12	tif
FIELD	584:26	584:26	13	tif
LEAF_NODE	584:26	584:26	14	tif
LEAF_NODE	584:29	584:29	12	,
ARGUMENT	584:31	584:31	12	tag
FIELD	584:31	584:31	13	tag
LEAF_NODE	584:31	584:31	14	tag
LEAF_NODE	584:34	584:34	12	)
LEAF_NODE	584:35	584:35	8	;
SELECTION	585:3	586:4	7	
KEYWORD	585:3	585:3	8	if
LEAF_NODE	585:3	585:3	9	if
LEAF_NODE	585:5	585:5	8	(
CONDITION	585:6	585:6	8	fip == NULL
EXPR	585:6	585:13	9	fip == NULL
FIELD	585:6	585:6	10	fip
LEAF_NODE	585:6	585:6	11	fip
EQ_OPERATOR	585:10	585:10	10	==
LEAF_NODE	585:10	585:10	11	==
FIELD	585:13	585:13	10	NULL
LEAF_NODE	585:13	585:13	11	NULL
LEAF_NODE	585:17	585:17	8	)
STATEMENTS	586:4	586:4	8	
JUMP_STATEMENT	586:4	586:12	9	continue DESTINATION ;
KEYWORD	586:4	586:4	10	continue
LEAF_NODE	586:4	586:4	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	586:12	586:12	10	;
SELECTION	588:3	588:28	7	
KEYWORD	588:3	588:3	8	if
LEAF_NODE	588:3	588:3	9	if
LEAF_NODE	588:5	588:5	8	(
CONDITION	588:6	588:6	8	fip -> field_passcount
EXPR	588:6	588:6	9	fip -> field_passcount
FIELD	588:6	588:11	10	fip -> field_passcount
LEAF_NODE	588:6	588:6	11	fip
LEAF_NODE	588:9	588:9	11	->
LEAF_NODE	588:11	588:11	11	field_passcount
LEAF_NODE	588:26	588:26	8	)
STATEMENTS	588:28	602:3	8	
LEAF_NODE	588:28	588:28	9	{
STATEMENTS	589:4	597:6	9	
SELECTION	589:4	589:49	10	
KEYWORD	589:4	589:4	11	if
LEAF_NODE	589:4	589:4	12	if
LEAF_NODE	589:7	589:7	11	(
CONDITION	589:8	589:8	11	fip -> field_readcount == TIFF_VARIABLE2
EXPR	589:8	589:32	12	fip -> field_readcount == TIFF_VARIABLE2
FIELD	589:8	589:13	13	fip -> field_readcount
LEAF_NODE	589:8	589:8	14	fip
LEAF_NODE	589:11	589:11	14	->
LEAF_NODE	589:13	589:13	14	field_readcount
EQ_OPERATOR	589:29	589:29	13	==
LEAF_NODE	589:29	589:29	14	==
FIELD	589:32	589:32	13	TIFF_VARIABLE2
LEAF_NODE	589:32	589:32	14	TIFF_VARIABLE2
LEAF_NODE	589:47	589:47	11	)
STATEMENTS	589:49	592:4	11	
LEAF_NODE	589:49	589:49	12	{
STATEMENTS	590:5	590:5	12	
SELECTION	590:5	591:6	13	
KEYWORD	590:5	590:5	14	if
LEAF_NODE	590:5	590:5	15	if
LEAF_NODE	590:7	590:7	14	(
CONDITION	590:8	590:8	14	TIFFGetField ( tif , tag , & value_count , & raw_data ) != 1
EXPR	590:8	590:59	15	TIFFGetField ( tif , tag , & value_count , & raw_data ) != 1
FUNCTION_CALL	590:8	590:54	16	TIFFGetField ( tif , tag , & value_count , & raw_data )
CALLEE	590:8	590:8	17	TIFFGetField
LEAF_NODE	590:8	590:8	18	TIFFGetField
LEAF_NODE	590:20	590:20	17	(
ARGUMENT	590:21	590:21	17	tif
FIELD	590:21	590:21	18	tif
LEAF_NODE	590:21	590:21	19	tif
LEAF_NODE	590:24	590:24	17	,
ARGUMENT	590:26	590:26	17	tag
FIELD	590:26	590:26	18	tag
LEAF_NODE	590:26	590:26	19	tag
LEAF_NODE	590:29	590:29	17	,
ARGUMENT	590:31	590:31	17	& value_count
UNARY_EXPR	590:31	590:32	18	& value_count
UNARY_OPERATOR	590:31	590:31	19	&
LEAF_NODE	590:31	590:31	20	&
FIELD	590:32	590:32	19	value_count
LEAF_NODE	590:32	590:32	20	value_count
LEAF_NODE	590:43	590:43	17	,
ARGUMENT	590:45	590:45	17	& raw_data
UNARY_EXPR	590:45	590:46	18	& raw_data
UNARY_OPERATOR	590:45	590:45	19	&
LEAF_NODE	590:45	590:45	20	&
FIELD	590:46	590:46	19	raw_data
LEAF_NODE	590:46	590:46	20	raw_data
LEAF_NODE	590:54	590:54	17	)
EQ_OPERATOR	590:56	590:56	16	!=
LEAF_NODE	590:56	590:56	17	!=
FIELD	590:59	590:59	16	1
LEAF_NODE	590:59	590:59	17	1
LEAF_NODE	590:60	590:60	14	)
STATEMENTS	591:6	591:6	14	
JUMP_STATEMENT	591:6	591:14	15	continue DESTINATION ;
KEYWORD	591:6	591:6	16	continue
LEAF_NODE	591:6	591:6	17	continue
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	591:14	591:14	16	;
LEAF_NODE	592:4	592:4	12	}
SELECTION	592:6	592:11	10	
KEYWORD	592:6	592:6	11	else
LEAF_NODE	592:6	592:6	12	else
STATEMENTS	592:11	592:11	11	
SELECTION	592:11	592:55	12	
KEYWORD	592:11	592:11	13	if
LEAF_NODE	592:11	592:11	14	if
LEAF_NODE	592:14	592:14	13	(
CONDITION	592:15	592:15	13	fip -> field_readcount == TIFF_VARIABLE
EXPR	592:15	592:39	14	fip -> field_readcount == TIFF_VARIABLE
FIELD	592:15	592:20	15	fip -> field_readcount
LEAF_NODE	592:15	592:15	16	fip
LEAF_NODE	592:18	592:18	16	->
LEAF_NODE	592:20	592:20	16	field_readcount
EQ_OPERATOR	592:36	592:36	15	==
LEAF_NODE	592:36	592:36	16	==
FIELD	592:39	592:39	15	TIFF_VARIABLE
LEAF_NODE	592:39	592:39	16	TIFF_VARIABLE
LEAF_NODE	592:53	592:53	13	)
STATEMENTS	592:55	597:4	13	
LEAF_NODE	592:55	592:55	14	{
STATEMENTS	593:5	596:5	14	
SIMPLE_DECL	593:5	593:29	15	uint16 small_value_count ;
VAR_DECL	593:5	593:12	16	uint16 small_value_count
TYPE	593:5	593:5	17	uint16
TYPE_NAME	593:5	593:5	18	uint16
LEAF_NODE	593:5	593:5	19	uint16
NAME	593:12	593:12	17	small_value_count
LEAF_NODE	593:12	593:12	18	small_value_count
LEAF_NODE	593:29	593:29	16	;
SELECTION	594:5	595:6	15	
KEYWORD	594:5	594:5	16	if
LEAF_NODE	594:5	594:5	17	if
LEAF_NODE	594:7	594:7	16	(
CONDITION	594:8	594:8	16	TIFFGetField ( tif , tag , & small_value_count , & raw_data ) != 1
EXPR	594:8	594:65	17	TIFFGetField ( tif , tag , & small_value_count , & raw_data ) != 1
FUNCTION_CALL	594:8	594:60	18	TIFFGetField ( tif , tag , & small_value_count , & raw_data )
CALLEE	594:8	594:8	19	TIFFGetField
LEAF_NODE	594:8	594:8	20	TIFFGetField
LEAF_NODE	594:20	594:20	19	(
ARGUMENT	594:21	594:21	19	tif
FIELD	594:21	594:21	20	tif
LEAF_NODE	594:21	594:21	21	tif
LEAF_NODE	594:24	594:24	19	,
ARGUMENT	594:26	594:26	19	tag
FIELD	594:26	594:26	20	tag
LEAF_NODE	594:26	594:26	21	tag
LEAF_NODE	594:29	594:29	19	,
ARGUMENT	594:31	594:31	19	& small_value_count
UNARY_EXPR	594:31	594:32	20	& small_value_count
UNARY_OPERATOR	594:31	594:31	21	&
LEAF_NODE	594:31	594:31	22	&
FIELD	594:32	594:32	21	small_value_count
LEAF_NODE	594:32	594:32	22	small_value_count
LEAF_NODE	594:49	594:49	19	,
ARGUMENT	594:51	594:51	19	& raw_data
UNARY_EXPR	594:51	594:52	20	& raw_data
UNARY_OPERATOR	594:51	594:51	21	&
LEAF_NODE	594:51	594:51	22	&
FIELD	594:52	594:52	21	raw_data
LEAF_NODE	594:52	594:52	22	raw_data
LEAF_NODE	594:60	594:60	19	)
EQ_OPERATOR	594:62	594:62	18	!=
LEAF_NODE	594:62	594:62	19	!=
FIELD	594:65	594:65	18	1
LEAF_NODE	594:65	594:65	19	1
LEAF_NODE	594:66	594:66	16	)
STATEMENTS	595:6	595:6	16	
JUMP_STATEMENT	595:6	595:14	17	continue DESTINATION ;
KEYWORD	595:6	595:6	18	continue
LEAF_NODE	595:6	595:6	19	continue
LEAF_NODE	0:0	0:0	18	DESTINATION
LEAF_NODE	595:14	595:14	18	;
EXPR_STATEMENT	596:5	596:36	15	value_count = small_value_count ;
EXPR	596:5	596:5	16	value_count = small_value_count
ASSIGN	596:5	596:19	17	value_count = small_value_count
LVAL	596:5	596:5	18	value_count
FIELD	596:5	596:5	19	value_count
LEAF_NODE	596:5	596:5	20	value_count
ASSIGN_OP	596:17	596:17	18	=
LEAF_NODE	596:17	596:17	19	=
RVAL	596:19	596:19	18	small_value_count
FIELD	596:19	596:19	19	small_value_count
LEAF_NODE	596:19	596:19	20	small_value_count
LEAF_NODE	596:36	596:36	16	;
LEAF_NODE	597:4	597:4	14	}
SELECTION	597:6	597:11	10	
KEYWORD	597:6	597:6	11	else
LEAF_NODE	597:6	597:6	12	else
STATEMENTS	597:11	601:4	11	
LEAF_NODE	597:11	597:11	12	{
STATEMENTS	598:5	600:5	12	
EXPR_STATEMENT	598:5	599:48	13	assert ( fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	598:5	598:5	14	assert ( fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	598:5	599:47	15	assert ( fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	598:5	598:5	16	assert
LEAF_NODE	598:5	598:5	17	assert
LEAF_NODE	598:12	598:12	16	(
ARGUMENT	598:13	598:13	16	fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2
OR	598:13	599:9	17	fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2
EXPR	598:13	598:37	18	fip -> field_readcount == TIFF_VARIABLE
FIELD	598:13	598:18	19	fip -> field_readcount
LEAF_NODE	598:13	598:13	20	fip
LEAF_NODE	598:16	598:16	20	->
LEAF_NODE	598:18	598:18	20	field_readcount
EQ_OPERATOR	598:34	598:34	19	==
LEAF_NODE	598:34	598:34	20	==
FIELD	598:37	598:37	19	TIFF_VARIABLE
LEAF_NODE	598:37	598:37	20	TIFF_VARIABLE
LEAF_NODE	599:6	599:6	18	||
EXPR	599:9	599:33	18	fip -> field_readcount == TIFF_VARIABLE2
FIELD	599:9	599:14	19	fip -> field_readcount
LEAF_NODE	599:9	599:9	20	fip
LEAF_NODE	599:12	599:12	20	->
LEAF_NODE	599:14	599:14	20	field_readcount
EQ_OPERATOR	599:30	599:30	19	==
LEAF_NODE	599:30	599:30	20	==
FIELD	599:33	599:33	19	TIFF_VARIABLE2
LEAF_NODE	599:33	599:33	20	TIFF_VARIABLE2
LEAF_NODE	599:47	599:47	16	)
LEAF_NODE	599:48	599:48	14	;
JUMP_STATEMENT	600:5	600:13	13	continue DESTINATION ;
KEYWORD	600:5	600:5	14	continue
LEAF_NODE	600:5	600:5	15	continue
LEAF_NODE	0:0	0:0	14	DESTINATION
LEAF_NODE	600:13	600:13	14	;
LEAF_NODE	601:4	601:4	12	}
LEAF_NODE	602:3	602:3	9	}
SELECTION	602:5	602:10	7	
KEYWORD	602:5	602:5	8	else
LEAF_NODE	602:5	602:5	9	else
STATEMENTS	602:10	636:3	8	
LEAF_NODE	602:10	602:10	9	{
STATEMENTS	603:4	626:6	9	
SELECTION	603:4	605:5	10	
KEYWORD	603:4	603:4	11	if
LEAF_NODE	603:4	603:4	12	if
LEAF_NODE	603:7	603:7	11	(
CONDITION	603:8	603:8	11	fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2
EXPR	603:8	603:8	12	fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2
OR	603:8	604:11	13	fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2
EXPR	603:8	603:32	14	fip -> field_readcount == TIFF_VARIABLE
FIELD	603:8	603:13	15	fip -> field_readcount
LEAF_NODE	603:8	603:8	16	fip
LEAF_NODE	603:11	603:11	16	->
LEAF_NODE	603:13	603:13	16	field_readcount
EQ_OPERATOR	603:29	603:29	15	==
LEAF_NODE	603:29	603:29	16	==
FIELD	603:32	603:32	15	TIFF_VARIABLE
LEAF_NODE	603:32	603:32	16	TIFF_VARIABLE
LEAF_NODE	604:8	604:8	14	||
EXPR	604:11	604:35	14	fip -> field_readcount == TIFF_VARIABLE2
FIELD	604:11	604:16	15	fip -> field_readcount
LEAF_NODE	604:11	604:11	16	fip
LEAF_NODE	604:14	604:14	16	->
LEAF_NODE	604:16	604:16	16	field_readcount
EQ_OPERATOR	604:32	604:32	15	==
LEAF_NODE	604:32	604:32	16	==
FIELD	604:35	604:35	15	TIFF_VARIABLE2
LEAF_NODE	604:35	604:35	16	TIFF_VARIABLE2
LEAF_NODE	604:49	604:49	11	)
STATEMENTS	605:5	605:5	11	
EXPR_STATEMENT	605:5	605:20	12	value_count = 1 ;
EXPR	605:5	605:5	13	value_count = 1
ASSIGN	605:5	605:19	14	value_count = 1
LVAL	605:5	605:5	15	value_count
FIELD	605:5	605:5	16	value_count
LEAF_NODE	605:5	605:5	17	value_count
ASSIGN_OP	605:17	605:17	15	=
LEAF_NODE	605:17	605:17	16	=
RVAL	605:19	605:19	15	1
FIELD	605:19	605:19	16	1
LEAF_NODE	605:19	605:19	17	1
LEAF_NODE	605:20	605:20	13	;
SELECTION	606:4	606:9	10	
KEYWORD	606:4	606:4	11	else
LEAF_NODE	606:4	606:4	12	else
STATEMENTS	606:9	606:9	11	
SELECTION	606:9	607:5	12	
KEYWORD	606:9	606:9	13	if
LEAF_NODE	606:9	606:9	14	if
LEAF_NODE	606:12	606:12	13	(
CONDITION	606:13	606:13	13	fip -> field_readcount == TIFF_SPP
EXPR	606:13	606:37	14	fip -> field_readcount == TIFF_SPP
FIELD	606:13	606:18	15	fip -> field_readcount
LEAF_NODE	606:13	606:13	16	fip
LEAF_NODE	606:16	606:16	16	->
LEAF_NODE	606:18	606:18	16	field_readcount
EQ_OPERATOR	606:34	606:34	15	==
LEAF_NODE	606:34	606:34	16	==
FIELD	606:37	606:37	15	TIFF_SPP
LEAF_NODE	606:37	606:37	16	TIFF_SPP
LEAF_NODE	606:45	606:45	13	)
STATEMENTS	607:5	607:5	13	
EXPR_STATEMENT	607:5	607:41	14	value_count = td -> td_samplesperpixel ;
EXPR	607:5	607:5	15	value_count = td -> td_samplesperpixel
ASSIGN	607:5	607:19	16	value_count = td -> td_samplesperpixel
LVAL	607:5	607:5	17	value_count
FIELD	607:5	607:5	18	value_count
LEAF_NODE	607:5	607:5	19	value_count
ASSIGN_OP	607:17	607:17	17	=
LEAF_NODE	607:17	607:17	18	=
RVAL	607:19	607:19	17	td -> td_samplesperpixel
FIELD	607:19	607:23	18	td -> td_samplesperpixel
LEAF_NODE	607:19	607:19	19	td
LEAF_NODE	607:21	607:21	19	->
LEAF_NODE	607:23	607:23	19	td_samplesperpixel
LEAF_NODE	607:41	607:41	15	;
SELECTION	608:4	609:5	10	
KEYWORD	608:4	608:4	11	else
LEAF_NODE	608:4	608:4	12	else
STATEMENTS	609:5	609:5	11	
EXPR_STATEMENT	609:5	609:39	12	value_count = fip -> field_readcount ;
EXPR	609:5	609:5	13	value_count = fip -> field_readcount
ASSIGN	609:5	609:19	14	value_count = fip -> field_readcount
LVAL	609:5	609:5	15	value_count
FIELD	609:5	609:5	16	value_count
LEAF_NODE	609:5	609:5	17	value_count
ASSIGN_OP	609:17	609:17	15	=
LEAF_NODE	609:17	609:17	16	=
RVAL	609:19	609:19	15	fip -> field_readcount
FIELD	609:19	609:24	16	fip -> field_readcount
LEAF_NODE	609:19	609:19	17	fip
LEAF_NODE	609:22	609:22	17	->
LEAF_NODE	609:24	609:24	17	field_readcount
LEAF_NODE	609:39	609:39	13	;
SELECTION	610:4	611:52	10	
KEYWORD	610:4	610:4	11	if
LEAF_NODE	610:4	610:4	12	if
LEAF_NODE	610:7	610:7	11	(
CONDITION	610:8	610:8	11	fip -> field_tag == TIFFTAG_DOTRANGE && strcmp ( fip -> field_name , "DotRange" ) == 0
EXPR	610:8	610:8	12	fip -> field_tag == TIFFTAG_DOTRANGE && strcmp ( fip -> field_name , "DotRange" ) == 0
AND	610:8	611:11	13	fip -> field_tag == TIFFTAG_DOTRANGE && strcmp ( fip -> field_name , "DotRange" ) == 0
EXPR	610:8	610:26	14	fip -> field_tag == TIFFTAG_DOTRANGE
FIELD	610:8	610:13	15	fip -> field_tag
LEAF_NODE	610:8	610:8	16	fip
LEAF_NODE	610:11	610:11	16	->
LEAF_NODE	610:13	610:13	16	field_tag
EQ_OPERATOR	610:23	610:23	15	==
LEAF_NODE	610:23	610:23	16	==
FIELD	610:26	610:26	15	TIFFTAG_DOTRANGE
LEAF_NODE	610:26	610:26	16	TIFFTAG_DOTRANGE
LEAF_NODE	611:8	611:8	14	&&
EXPR	611:11	611:49	14	strcmp ( fip -> field_name , "DotRange" ) == 0
FUNCTION_CALL	611:11	611:44	15	strcmp ( fip -> field_name , "DotRange" )
CALLEE	611:11	611:11	16	strcmp
LEAF_NODE	611:11	611:11	17	strcmp
LEAF_NODE	611:17	611:17	16	(
ARGUMENT	611:18	611:18	16	fip -> field_name
FIELD	611:18	611:23	17	fip -> field_name
LEAF_NODE	611:18	611:18	18	fip
LEAF_NODE	611:21	611:21	18	->
LEAF_NODE	611:23	611:23	18	field_name
LEAF_NODE	611:33	611:33	16	,
ARGUMENT	611:34	611:34	16	"DotRange"
FIELD	611:34	611:34	17	"DotRange"
LEAF_NODE	611:34	611:34	18	"DotRange"
LEAF_NODE	611:44	611:44	16	)
EQ_OPERATOR	611:46	611:46	15	==
LEAF_NODE	611:46	611:46	16	==
FIELD	611:49	611:49	15	0
LEAF_NODE	611:49	611:49	16	0
LEAF_NODE	611:50	611:50	11	)
STATEMENTS	611:52	619:4	11	
LEAF_NODE	611:52	611:52	12	{
STATEMENTS	616:5	618:5	12	
LEAF_NODE	616:5	616:5	13	static
SIMPLE_DECL	616:12	616:30	13	uint16 [ 2 ] dotrange ;
VAR_DECL	616:12	616:19	14	uint16 [ 2 ] dotrange
TYPE	616:12	616:27	15	uint16 [ 2 ]
TYPE_NAME	616:12	616:12	16	uint16
LEAF_NODE	616:12	616:12	17	uint16
TYPE_SUFFIX	616:27	616:29	16	[ 2 ]
LEAF_NODE	616:27	616:27	17	[
FIELD	616:28	616:28	17	2
LEAF_NODE	616:28	616:28	18	2
LEAF_NODE	616:29	616:29	17	]
NAME	616:19	616:19	15	dotrange
LEAF_NODE	616:19	616:19	16	dotrange
LEAF_NODE	616:30	616:30	14	;
EXPR_STATEMENT	617:5	617:24	13	raw_data = dotrange ;
EXPR	617:5	617:5	14	raw_data = dotrange
ASSIGN	617:5	617:16	15	raw_data = dotrange
LVAL	617:5	617:5	16	raw_data
FIELD	617:5	617:5	17	raw_data
LEAF_NODE	617:5	617:5	18	raw_data
ASSIGN_OP	617:14	617:14	16	=
LEAF_NODE	617:14	617:14	17	=
RVAL	617:16	617:16	16	dotrange
FIELD	617:16	617:16	17	dotrange
LEAF_NODE	617:16	617:16	18	dotrange
LEAF_NODE	617:24	617:24	14	;
EXPR_STATEMENT	618:5	618:51	13	TIFFGetField ( tif , tag , dotrange + 0 , dotrange + 1 ) ;
EXPR	618:5	618:5	14	TIFFGetField ( tif , tag , dotrange + 0 , dotrange + 1 )
FUNCTION_CALL	618:5	618:50	15	TIFFGetField ( tif , tag , dotrange + 0 , dotrange + 1 )
CALLEE	618:5	618:5	16	TIFFGetField
LEAF_NODE	618:5	618:5	17	TIFFGetField
LEAF_NODE	618:17	618:17	16	(
ARGUMENT	618:18	618:18	16	tif
FIELD	618:18	618:18	17	tif
LEAF_NODE	618:18	618:18	18	tif
LEAF_NODE	618:21	618:21	16	,
ARGUMENT	618:23	618:23	16	tag
FIELD	618:23	618:23	17	tag
LEAF_NODE	618:23	618:23	18	tag
LEAF_NODE	618:26	618:26	16	,
ARGUMENT	618:28	618:37	16	dotrange + 0
FIELD	618:28	618:28	17	dotrange
LEAF_NODE	618:28	618:28	18	dotrange
LEAF_NODE	618:36	618:36	17	+
FIELD	618:37	618:37	17	0
LEAF_NODE	618:37	618:37	18	0
LEAF_NODE	618:38	618:38	16	,
ARGUMENT	618:40	618:49	16	dotrange + 1
FIELD	618:40	618:40	17	dotrange
LEAF_NODE	618:40	618:40	18	dotrange
LEAF_NODE	618:48	618:48	17	+
FIELD	618:49	618:49	17	1
LEAF_NODE	618:49	618:49	18	1
LEAF_NODE	618:50	618:50	16	)
LEAF_NODE	618:51	618:51	14	;
LEAF_NODE	619:4	619:4	12	}
SELECTION	619:6	619:11	10	
KEYWORD	619:6	619:6	11	else
LEAF_NODE	619:6	619:6	12	else
STATEMENTS	619:11	619:11	11	
SELECTION	619:11	623:28	12	
KEYWORD	619:11	619:11	13	if
LEAF_NODE	619:11	619:11	14	if
LEAF_NODE	619:14	619:14	13	(
CONDITION	619:15	619:15	13	fip -> field_type == TIFF_ASCII || fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || value_count > 1
EXPR	619:15	619:15	14	fip -> field_type == TIFF_ASCII || fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || value_count > 1
OR	619:15	620:11	15	fip -> field_type == TIFF_ASCII || fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || value_count > 1
EXPR	619:15	619:34	16	fip -> field_type == TIFF_ASCII
FIELD	619:15	619:20	17	fip -> field_type
LEAF_NODE	619:15	619:15	18	fip
LEAF_NODE	619:18	619:18	18	->
LEAF_NODE	619:20	619:20	18	field_type
EQ_OPERATOR	619:31	619:31	17	==
LEAF_NODE	619:31	619:31	18	==
FIELD	619:34	619:34	17	TIFF_ASCII
LEAF_NODE	619:34	619:34	18	TIFF_ASCII
LEAF_NODE	620:8	620:8	16	||
EXPR	620:11	620:11	16	fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || value_count > 1
OR	620:11	621:11	17	fip -> field_readcount == TIFF_VARIABLE || fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || value_count > 1
EXPR	620:11	620:35	18	fip -> field_readcount == TIFF_VARIABLE
FIELD	620:11	620:16	19	fip -> field_readcount
LEAF_NODE	620:11	620:11	20	fip
LEAF_NODE	620:14	620:14	20	->
LEAF_NODE	620:16	620:16	20	field_readcount
EQ_OPERATOR	620:32	620:32	19	==
LEAF_NODE	620:32	620:32	20	==
FIELD	620:35	620:35	19	TIFF_VARIABLE
LEAF_NODE	620:35	620:35	20	TIFF_VARIABLE
LEAF_NODE	621:8	621:8	18	||
EXPR	621:11	621:11	18	fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || value_count > 1
OR	621:11	622:11	19	fip -> field_readcount == TIFF_VARIABLE2 || fip -> field_readcount == TIFF_SPP || value_count > 1
EXPR	621:11	621:35	20	fip -> field_readcount == TIFF_VARIABLE2
FIELD	621:11	621:16	21	fip -> field_readcount
LEAF_NODE	621:11	621:11	22	fip
LEAF_NODE	621:14	621:14	22	->
LEAF_NODE	621:16	621:16	22	field_readcount
EQ_OPERATOR	621:32	621:32	21	==
LEAF_NODE	621:32	621:32	22	==
FIELD	621:35	621:35	21	TIFF_VARIABLE2
LEAF_NODE	621:35	621:35	22	TIFF_VARIABLE2
LEAF_NODE	622:8	622:8	20	||
EXPR	622:11	622:11	20	fip -> field_readcount == TIFF_SPP || value_count > 1
OR	622:11	623:11	21	fip -> field_readcount == TIFF_SPP || value_count > 1
EXPR	622:11	622:35	22	fip -> field_readcount == TIFF_SPP
FIELD	622:11	622:16	23	fip -> field_readcount
LEAF_NODE	622:11	622:11	24	fip
LEAF_NODE	622:14	622:14	24	->
LEAF_NODE	622:16	622:16	24	field_readcount
EQ_OPERATOR	622:32	622:32	23	==
LEAF_NODE	622:32	622:32	24	==
FIELD	622:35	622:35	23	TIFF_SPP
LEAF_NODE	622:35	622:35	24	TIFF_SPP
LEAF_NODE	623:8	623:8	22	||
EXPR	623:11	623:25	22	value_count > 1
FIELD	623:11	623:11	23	value_count
LEAF_NODE	623:11	623:11	24	value_count
REL_OPERATOR	623:23	623:23	23	>
LEAF_NODE	623:23	623:23	24	>
FIELD	623:25	623:25	23	1
LEAF_NODE	623:25	623:25	24	1
LEAF_NODE	623:26	623:26	13	)
STATEMENTS	623:28	626:4	13	
LEAF_NODE	623:28	623:28	14	{
STATEMENTS	624:5	624:5	14	
SELECTION	624:5	625:6	15	
KEYWORD	624:5	624:5	16	if
LEAF_NODE	624:5	624:5	17	if
LEAF_NODE	624:7	624:7	16	(
CONDITION	624:8	624:8	16	TIFFGetField ( tif , tag , & raw_data ) != 1
EXPR	624:8	624:45	17	TIFFGetField ( tif , tag , & raw_data ) != 1
FUNCTION_CALL	624:8	624:40	18	TIFFGetField ( tif , tag , & raw_data )
CALLEE	624:8	624:8	19	TIFFGetField
LEAF_NODE	624:8	624:8	20	TIFFGetField
LEAF_NODE	624:20	624:20	19	(
ARGUMENT	624:21	624:21	19	tif
FIELD	624:21	624:21	20	tif
LEAF_NODE	624:21	624:21	21	tif
LEAF_NODE	624:24	624:24	19	,
ARGUMENT	624:26	624:26	19	tag
FIELD	624:26	624:26	20	tag
LEAF_NODE	624:26	624:26	21	tag
LEAF_NODE	624:29	624:29	19	,
ARGUMENT	624:31	624:31	19	& raw_data
UNARY_EXPR	624:31	624:32	20	& raw_data
UNARY_OPERATOR	624:31	624:31	21	&
LEAF_NODE	624:31	624:31	22	&
FIELD	624:32	624:32	21	raw_data
LEAF_NODE	624:32	624:32	22	raw_data
LEAF_NODE	624:40	624:40	19	)
EQ_OPERATOR	624:42	624:42	18	!=
LEAF_NODE	624:42	624:42	19	!=
FIELD	624:45	624:45	18	1
LEAF_NODE	624:45	624:45	19	1
LEAF_NODE	624:46	624:46	16	)
STATEMENTS	625:6	625:6	16	
JUMP_STATEMENT	625:6	625:14	17	continue DESTINATION ;
KEYWORD	625:6	625:6	18	continue
LEAF_NODE	625:6	625:6	19	continue
LEAF_NODE	0:0	0:0	18	DESTINATION
LEAF_NODE	625:14	625:14	18	;
LEAF_NODE	626:4	626:4	14	}
SELECTION	626:6	626:11	10	
KEYWORD	626:6	626:6	11	else
LEAF_NODE	626:6	626:6	12	else
STATEMENTS	626:11	635:4	11	
LEAF_NODE	626:11	626:11	12	{
STATEMENTS	627:5	631:5	12	
EXPR_STATEMENT	627:5	629:23	13	raw_data = _TIFFmalloc ( _TIFFDataSize ( fip -> field_type ) * value_count ) ;
EXPR	627:5	627:5	14	raw_data = _TIFFmalloc ( _TIFFDataSize ( fip -> field_type ) * value_count )
ASSIGN	627:5	627:16	15	raw_data = _TIFFmalloc ( _TIFFDataSize ( fip -> field_type ) * value_count )
LVAL	627:5	627:5	16	raw_data
FIELD	627:5	627:5	17	raw_data
LEAF_NODE	627:5	627:5	18	raw_data
ASSIGN_OP	627:14	627:14	16	=
LEAF_NODE	627:14	627:14	17	=
RVAL	627:16	627:16	16	_TIFFmalloc ( _TIFFDataSize ( fip -> field_type ) * value_count )
FUNCTION_CALL	627:16	629:22	17	_TIFFmalloc ( _TIFFDataSize ( fip -> field_type ) * value_count )
CALLEE	627:16	627:16	18	_TIFFmalloc
LEAF_NODE	627:16	627:16	19	_TIFFmalloc
LEAF_NODE	627:27	627:27	18	(
ARGUMENT	628:9	629:11	18	_TIFFDataSize ( fip -> field_type ) * value_count
FUNCTION_CALL	628:9	628:38	19	_TIFFDataSize ( fip -> field_type )
CALLEE	628:9	628:9	20	_TIFFDataSize
LEAF_NODE	628:9	628:9	21	_TIFFDataSize
LEAF_NODE	628:22	628:22	20	(
ARGUMENT	628:23	628:23	20	fip -> field_type
FIELD	628:23	628:28	21	fip -> field_type
LEAF_NODE	628:23	628:23	22	fip
LEAF_NODE	628:26	628:26	22	->
LEAF_NODE	628:28	628:28	22	field_type
LEAF_NODE	628:38	628:38	20	)
LEAF_NODE	629:9	629:9	19	*
FIELD	629:11	629:11	19	value_count
LEAF_NODE	629:11	629:11	20	value_count
LEAF_NODE	629:22	629:22	18	)
LEAF_NODE	629:23	629:23	14	;
EXPR_STATEMENT	630:5	630:18	13	mem_alloc = 1 ;
EXPR	630:5	630:5	14	mem_alloc = 1
ASSIGN	630:5	630:17	15	mem_alloc = 1
LVAL	630:5	630:5	16	mem_alloc
FIELD	630:5	630:5	17	mem_alloc
LEAF_NODE	630:5	630:5	18	mem_alloc
ASSIGN_OP	630:15	630:15	16	=
LEAF_NODE	630:15	630:15	17	=
RVAL	630:17	630:17	16	1
FIELD	630:17	630:17	17	1
LEAF_NODE	630:17	630:17	18	1
LEAF_NODE	630:18	630:18	14	;
SELECTION	631:5	631:47	13	
KEYWORD	631:5	631:5	14	if
LEAF_NODE	631:5	631:5	15	if
LEAF_NODE	631:7	631:7	14	(
CONDITION	631:8	631:8	14	TIFFGetField ( tif , tag , raw_data ) != 1
EXPR	631:8	631:44	15	TIFFGetField ( tif , tag , raw_data ) != 1
FUNCTION_CALL	631:8	631:39	16	TIFFGetField ( tif , tag , raw_data )
CALLEE	631:8	631:8	17	TIFFGetField
LEAF_NODE	631:8	631:8	18	TIFFGetField
LEAF_NODE	631:20	631:20	17	(
ARGUMENT	631:21	631:21	17	tif
FIELD	631:21	631:21	18	tif
LEAF_NODE	631:21	631:21	19	tif
LEAF_NODE	631:24	631:24	17	,
ARGUMENT	631:26	631:26	17	tag
FIELD	631:26	631:26	18	tag
LEAF_NODE	631:26	631:26	19	tag
LEAF_NODE	631:29	631:29	17	,
ARGUMENT	631:31	631:31	17	raw_data
FIELD	631:31	631:31	18	raw_data
LEAF_NODE	631:31	631:31	19	raw_data
LEAF_NODE	631:39	631:39	17	)
EQ_OPERATOR	631:41	631:41	16	!=
LEAF_NODE	631:41	631:41	17	!=
FIELD	631:44	631:44	16	1
LEAF_NODE	631:44	631:44	17	1
LEAF_NODE	631:45	631:45	14	)
STATEMENTS	631:47	634:5	14	
LEAF_NODE	631:47	631:47	15	{
STATEMENTS	632:6	633:6	15	
EXPR_STATEMENT	632:6	632:25	16	_TIFFfree ( raw_data ) ;
EXPR	632:6	632:6	17	_TIFFfree ( raw_data )
FUNCTION_CALL	632:6	632:24	18	_TIFFfree ( raw_data )
CALLEE	632:6	632:6	19	_TIFFfree
LEAF_NODE	632:6	632:6	20	_TIFFfree
LEAF_NODE	632:15	632:15	19	(
ARGUMENT	632:16	632:16	19	raw_data
FIELD	632:16	632:16	20	raw_data
LEAF_NODE	632:16	632:16	21	raw_data
LEAF_NODE	632:24	632:24	19	)
LEAF_NODE	632:25	632:25	17	;
JUMP_STATEMENT	633:6	633:14	16	continue DESTINATION ;
KEYWORD	633:6	633:6	17	continue
LEAF_NODE	633:6	633:6	18	continue
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	633:14	633:14	17	;
LEAF_NODE	634:5	634:5	15	}
LEAF_NODE	635:4	635:4	12	}
LEAF_NODE	636:3	636:3	9	}
SELECTION	644:3	645:4	7	
KEYWORD	644:3	644:3	8	if
LEAF_NODE	644:3	644:3	9	if
LEAF_NODE	644:6	644:6	8	(
CONDITION	644:7	644:7	8	! _TIFFPrettyPrintField ( tif , fip , fd , tag , value_count , raw_data )
EXPR	644:7	644:7	9	! _TIFFPrettyPrintField ( tif , fip , fd , tag , value_count , raw_data )
UNARY_EXPR	644:7	644:8	10	! _TIFFPrettyPrintField ( tif , fip , fd , tag , value_count , raw_data )
UNARY_OPERATOR	644:7	644:7	11	!
LEAF_NODE	644:7	644:7	12	!
FUNCTION_CALL	644:8	644:70	11	_TIFFPrettyPrintField ( tif , fip , fd , tag , value_count , raw_data )
CALLEE	644:8	644:8	12	_TIFFPrettyPrintField
LEAF_NODE	644:8	644:8	13	_TIFFPrettyPrintField
LEAF_NODE	644:29	644:29	12	(
ARGUMENT	644:30	644:30	12	tif
FIELD	644:30	644:30	13	tif
LEAF_NODE	644:30	644:30	14	tif
LEAF_NODE	644:33	644:33	12	,
ARGUMENT	644:35	644:35	12	fip
FIELD	644:35	644:35	13	fip
LEAF_NODE	644:35	644:35	14	fip
LEAF_NODE	644:38	644:38	12	,
ARGUMENT	644:40	644:40	12	fd
FIELD	644:40	644:40	13	fd
LEAF_NODE	644:40	644:40	14	fd
LEAF_NODE	644:42	644:42	12	,
ARGUMENT	644:44	644:44	12	tag
FIELD	644:44	644:44	13	tag
LEAF_NODE	644:44	644:44	14	tag
LEAF_NODE	644:47	644:47	12	,
ARGUMENT	644:49	644:49	12	value_count
FIELD	644:49	644:49	13	value_count
LEAF_NODE	644:49	644:49	14	value_count
LEAF_NODE	644:60	644:60	12	,
ARGUMENT	644:62	644:62	12	raw_data
FIELD	644:62	644:62	13	raw_data
LEAF_NODE	644:62	644:62	14	raw_data
LEAF_NODE	644:70	644:70	12	)
LEAF_NODE	644:71	644:71	8	)
STATEMENTS	645:4	645:4	8	
EXPR_STATEMENT	645:4	645:51	9	_TIFFPrintField ( fd , fip , value_count , raw_data ) ;
EXPR	645:4	645:4	10	_TIFFPrintField ( fd , fip , value_count , raw_data )
FUNCTION_CALL	645:4	645:50	11	_TIFFPrintField ( fd , fip , value_count , raw_data )
CALLEE	645:4	645:4	12	_TIFFPrintField
LEAF_NODE	645:4	645:4	13	_TIFFPrintField
LEAF_NODE	645:19	645:19	12	(
ARGUMENT	645:20	645:20	12	fd
FIELD	645:20	645:20	13	fd
LEAF_NODE	645:20	645:20	14	fd
LEAF_NODE	645:22	645:22	12	,
ARGUMENT	645:24	645:24	12	fip
FIELD	645:24	645:24	13	fip
LEAF_NODE	645:24	645:24	14	fip
LEAF_NODE	645:27	645:27	12	,
ARGUMENT	645:29	645:29	12	value_count
FIELD	645:29	645:29	13	value_count
LEAF_NODE	645:29	645:29	14	value_count
LEAF_NODE	645:40	645:40	12	,
ARGUMENT	645:42	645:42	12	raw_data
FIELD	645:42	645:42	13	raw_data
LEAF_NODE	645:42	645:42	14	raw_data
LEAF_NODE	645:50	645:50	12	)
LEAF_NODE	645:51	645:51	10	;
SELECTION	647:3	648:4	7	
KEYWORD	647:3	647:3	8	if
LEAF_NODE	647:3	647:3	9	if
LEAF_NODE	647:5	647:5	8	(
CONDITION	647:6	647:6	8	mem_alloc
EXPR	647:6	647:6	9	mem_alloc
FIELD	647:6	647:6	10	mem_alloc
LEAF_NODE	647:6	647:6	11	mem_alloc
LEAF_NODE	647:15	647:15	8	)
STATEMENTS	648:4	648:4	8	
EXPR_STATEMENT	648:4	648:23	9	_TIFFfree ( raw_data ) ;
EXPR	648:4	648:4	10	_TIFFfree ( raw_data )
FUNCTION_CALL	648:4	648:22	11	_TIFFfree ( raw_data )
CALLEE	648:4	648:4	12	_TIFFfree
LEAF_NODE	648:4	648:4	13	_TIFFfree
LEAF_NODE	648:13	648:13	12	(
ARGUMENT	648:14	648:14	12	raw_data
FIELD	648:14	648:14	13	raw_data
LEAF_NODE	648:14	648:14	14	raw_data
LEAF_NODE	648:22	648:22	12	)
LEAF_NODE	648:23	648:23	10	;
LEAF_NODE	649:2	649:2	6	}
LEAF_NODE	650:1	650:1	3	}
SELECTION	652:1	653:2	3	
KEYWORD	652:1	652:1	4	if
LEAF_NODE	652:1	652:1	5	if
LEAF_NODE	652:4	652:4	4	(
CONDITION	652:5	652:5	4	tif -> tif_tagmethods . printdir
EXPR	652:5	652:5	5	tif -> tif_tagmethods . printdir
FIELD	652:5	652:25	6	tif -> tif_tagmethods . printdir
LEAF_NODE	652:5	652:5	7	tif
LEAF_NODE	652:8	652:8	7	->
LEAF_NODE	652:10	652:10	7	tif_tagmethods
LEAF_NODE	652:24	652:24	7	.
LEAF_NODE	652:25	652:25	7	printdir
LEAF_NODE	652:33	652:33	4	)
STATEMENTS	653:2	653:2	4	
EXPR_STATEMENT	653:2	653:49	5	( * tif -> tif_tagmethods . printdir ) ( tif , fd , flags ) ;
EXPR	653:2	653:2	6	( * tif -> tif_tagmethods . printdir ) ( tif , fd , flags )
FUNCTION_CALL	653:2	653:48	7	( * tif -> tif_tagmethods . printdir ) ( tif , fd , flags )
CALLEE	653:2	653:32	8	( * tif -> tif_tagmethods . printdir )
LEAF_NODE	653:2	653:2	9	(
UNARY_EXPR	653:3	653:4	9	* tif -> tif_tagmethods . printdir
UNARY_OPERATOR	653:3	653:3	10	*
LEAF_NODE	653:3	653:3	11	*
FIELD	653:4	653:24	10	tif -> tif_tagmethods . printdir
LEAF_NODE	653:4	653:4	11	tif
LEAF_NODE	653:7	653:7	11	->
LEAF_NODE	653:9	653:9	11	tif_tagmethods
LEAF_NODE	653:23	653:23	11	.
LEAF_NODE	653:24	653:24	11	printdir
LEAF_NODE	653:32	653:32	9	)
LEAF_NODE	653:33	653:33	8	(
ARGUMENT	653:34	653:34	8	tif
FIELD	653:34	653:34	9	tif
LEAF_NODE	653:34	653:34	10	tif
LEAF_NODE	653:37	653:37	8	,
ARGUMENT	653:39	653:39	8	fd
FIELD	653:39	653:39	9	fd
LEAF_NODE	653:39	653:39	10	fd
LEAF_NODE	653:41	653:41	8	,
ARGUMENT	653:43	653:43	8	flags
FIELD	653:43	653:43	9	flags
LEAF_NODE	653:43	653:43	10	flags
LEAF_NODE	653:48	653:48	8	)
LEAF_NODE	653:49	653:49	6	;
SELECTION	655:1	656:43	3	
KEYWORD	655:1	655:1	4	if
LEAF_NODE	655:1	655:1	5	if
LEAF_NODE	655:4	655:4	4	(
CONDITION	655:5	655:5	4	( flags & TIFFPRINT_STRIPS ) && TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
EXPR	655:5	655:5	5	( flags & TIFFPRINT_STRIPS ) && TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
AND	655:5	656:5	6	( flags & TIFFPRINT_STRIPS ) && TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
EXPR	655:5	655:30	7	( flags & TIFFPRINT_STRIPS )
LEAF_NODE	655:5	655:5	8	(
FIELD	655:6	655:6	8	flags
LEAF_NODE	655:6	655:6	9	flags
LEAF_NODE	655:12	655:12	8	&
FIELD	655:14	655:14	8	TIFFPRINT_STRIPS
LEAF_NODE	655:14	655:14	9	TIFFPRINT_STRIPS
LEAF_NODE	655:30	655:30	8	)
LEAF_NODE	655:32	655:32	7	&&
EXPR	656:5	656:5	7	TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
FUNCTION_CALL	656:5	656:40	8	TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
CALLEE	656:5	656:5	9	TIFFFieldSet
LEAF_NODE	656:5	656:5	10	TIFFFieldSet
LEAF_NODE	656:17	656:17	9	(
ARGUMENT	656:18	656:18	9	tif
FIELD	656:18	656:18	10	tif
LEAF_NODE	656:18	656:18	11	tif
LEAF_NODE	656:21	656:21	9	,
ARGUMENT	656:22	656:22	9	FIELD_STRIPOFFSETS
FIELD	656:22	656:22	10	FIELD_STRIPOFFSETS
LEAF_NODE	656:22	656:22	11	FIELD_STRIPOFFSETS
LEAF_NODE	656:40	656:40	9	)
LEAF_NODE	656:41	656:41	4	)
STATEMENTS	656:43	674:1	4	
LEAF_NODE	656:43	656:43	5	{
STATEMENTS	657:2	672:59	5	
SIMPLE_DECL	657:2	657:10	6	uint32 s ;
VAR_DECL	657:2	657:9	7	uint32 s
TYPE	657:2	657:2	8	uint32
TYPE_NAME	657:2	657:2	9	uint32
LEAF_NODE	657:2	657:2	10	uint32
NAME	657:9	657:9	8	s
LEAF_NODE	657:9	657:9	9	s
LEAF_NODE	657:10	657:10	7	;
EXPR_STATEMENT	659:2	661:40	6	fprintf ( fd , "  %lu %s:\n" , ( unsigned long ) td -> td_nstrips , isTiled ( tif ) ? "Tiles" : "Strips" ) ;
EXPR	659:2	659:2	7	fprintf ( fd , "  %lu %s:\n" , ( unsigned long ) td -> td_nstrips , isTiled ( tif ) ? "Tiles" : "Strips" )
FUNCTION_CALL	659:2	661:39	8	fprintf ( fd , "  %lu %s:\n" , ( unsigned long ) td -> td_nstrips , isTiled ( tif ) ? "Tiles" : "Strips" )
CALLEE	659:2	659:2	9	fprintf
LEAF_NODE	659:2	659:2	10	fprintf
LEAF_NODE	659:9	659:9	9	(
ARGUMENT	659:10	659:10	9	fd
FIELD	659:10	659:10	10	fd
LEAF_NODE	659:10	659:10	11	fd
LEAF_NODE	659:12	659:12	9	,
ARGUMENT	659:14	659:14	9	"  %lu %s:\n"
FIELD	659:14	659:14	10	"  %lu %s:\n"
LEAF_NODE	659:14	659:14	11	"  %lu %s:\n"
LEAF_NODE	659:27	659:27	9	,
ARGUMENT	660:6	660:22	9	( unsigned long ) td -> td_nstrips
LEAF_NODE	660:6	660:6	10	(
TYPE_NAME	660:7	660:16	10	unsigned long
LEAF_NODE	660:7	660:7	11	unsigned
LEAF_NODE	660:16	660:16	11	long
LEAF_NODE	660:20	660:20	10	)
FIELD	660:22	660:26	10	td -> td_nstrips
LEAF_NODE	660:22	660:22	11	td
LEAF_NODE	660:24	660:24	11	->
LEAF_NODE	660:26	660:26	11	td_nstrips
LEAF_NODE	660:36	660:36	9	,
ARGUMENT	661:6	661:6	9	isTiled ( tif ) ? "Tiles" : "Strips"
COND_EXPR	661:6	661:31	10	isTiled ( tif ) ? "Tiles" : "Strips"
CONDITION	661:6	661:6	11	isTiled ( tif )
FUNCTION_CALL	661:6	661:17	12	isTiled ( tif )
CALLEE	661:6	661:6	13	isTiled
LEAF_NODE	661:6	661:6	14	isTiled
LEAF_NODE	661:13	661:13	13	(
ARGUMENT	661:14	661:14	13	tif
FIELD	661:14	661:14	14	tif
LEAF_NODE	661:14	661:14	15	tif
LEAF_NODE	661:17	661:17	13	)
LEAF_NODE	661:19	661:19	11	?
EXPR	661:21	661:21	11	"Tiles"
FIELD	661:21	661:21	12	"Tiles"
LEAF_NODE	661:21	661:21	13	"Tiles"
LEAF_NODE	661:29	661:29	11	:
FIELD	661:31	661:31	11	"Strips"
LEAF_NODE	661:31	661:31	12	"Strips"
LEAF_NODE	661:39	661:39	9	)
LEAF_NODE	661:40	661:40	7	;
ITERATION	662:2	664:3	6	
KEYWORD	662:2	662:2	7	for
LEAF_NODE	662:2	662:2	8	for
LEAF_NODE	662:6	662:6	7	(
FOR_INIT	662:7	662:12	7	s = 0 ;
EXPR	662:7	662:7	8	s = 0
ASSIGN	662:7	662:11	9	s = 0
LVAL	662:7	662:7	10	s
FIELD	662:7	662:7	11	s
LEAF_NODE	662:7	662:7	12	s
ASSIGN_OP	662:9	662:9	10	=
LEAF_NODE	662:9	662:9	11	=
RVAL	662:11	662:11	10	0
FIELD	662:11	662:11	11	0
LEAF_NODE	662:11	662:11	12	0
LEAF_NODE	662:12	662:12	8	;
CONDITION	662:14	662:14	7	s < td -> td_nstrips
EXPR	662:14	662:18	8	s < td -> td_nstrips
FIELD	662:14	662:14	9	s
LEAF_NODE	662:14	662:14	10	s
REL_OPERATOR	662:16	662:16	9	<
LEAF_NODE	662:16	662:16	10	<
FIELD	662:18	662:22	9	td -> td_nstrips
LEAF_NODE	662:18	662:18	10	td
LEAF_NODE	662:20	662:20	10	->
LEAF_NODE	662:22	662:22	10	td_nstrips
LEAF_NODE	662:32	662:32	7	;
FOR_EXPR	662:34	662:34	7	s ++
EXPR	662:34	662:34	8	s ++
FIELD	662:34	662:35	9	s ++
LEAF_NODE	662:34	662:34	10	s
LEAF_NODE	662:35	662:35	10	++
LEAF_NODE	662:37	662:37	7	)
STATEMENTS	664:3	664:3	7	
EXPR_STATEMENT	664:3	667:57	8	fprintf ( fd , "    %3lu: [%8I64u, %8I64u]\n" , ( unsigned long ) s , ( unsigned __int64 ) TIFFGetStrileOffset ( tif , s ) , ( unsigned __int64 ) TIFFGetStrileByteCount ( tif , s ) ) ;
EXPR	664:3	664:3	9	fprintf ( fd , "    %3lu: [%8I64u, %8I64u]\n" , ( unsigned long ) s , ( unsigned __int64 ) TIFFGetStrileOffset ( tif , s ) , ( unsigned __int64 ) TIFFGetStrileByteCount ( tif , s ) )
FUNCTION_CALL	664:3	667:56	10	fprintf ( fd , "    %3lu: [%8I64u, %8I64u]\n" , ( unsigned long ) s , ( unsigned __int64 ) TIFFGetStrileOffset ( tif , s ) , ( unsigned __int64 ) TIFFGetStrileByteCount ( tif , s ) )
CALLEE	664:3	664:3	11	fprintf
LEAF_NODE	664:3	664:3	12	fprintf
LEAF_NODE	664:10	664:10	11	(
ARGUMENT	664:11	664:11	11	fd
FIELD	664:11	664:11	12	fd
LEAF_NODE	664:11	664:11	13	fd
LEAF_NODE	664:13	664:13	11	,
ARGUMENT	664:15	664:15	11	"    %3lu: [%8I64u, %8I64u]\n"
FIELD	664:15	664:15	12	"    %3lu: [%8I64u, %8I64u]\n"
LEAF_NODE	664:15	664:15	13	"    %3lu: [%8I64u, %8I64u]\n"
LEAF_NODE	664:45	664:45	11	,
ARGUMENT	665:7	665:23	11	( unsigned long ) s
LEAF_NODE	665:7	665:7	12	(
TYPE_NAME	665:8	665:17	12	unsigned long
LEAF_NODE	665:8	665:8	13	unsigned
LEAF_NODE	665:17	665:17	13	long
LEAF_NODE	665:21	665:21	12	)
FIELD	665:23	665:23	12	s
LEAF_NODE	665:23	665:23	13	s
LEAF_NODE	665:24	665:24	11	,
ARGUMENT	666:7	666:26	11	( unsigned __int64 ) TIFFGetStrileOffset ( tif , s )
LEAF_NODE	666:7	666:7	12	(
TYPE_NAME	666:8	666:17	12	unsigned __int64
LEAF_NODE	666:8	666:8	13	unsigned
LEAF_NODE	666:17	666:17	13	__int64
LEAF_NODE	666:24	666:24	12	)
FUNCTION_CALL	666:26	666:52	12	TIFFGetStrileOffset ( tif , s )
CALLEE	666:26	666:26	13	TIFFGetStrileOffset
LEAF_NODE	666:26	666:26	14	TIFFGetStrileOffset
LEAF_NODE	666:45	666:45	13	(
ARGUMENT	666:46	666:46	13	tif
FIELD	666:46	666:46	14	tif
LEAF_NODE	666:46	666:46	15	tif
LEAF_NODE	666:49	666:49	13	,
ARGUMENT	666:51	666:51	13	s
FIELD	666:51	666:51	14	s
LEAF_NODE	666:51	666:51	15	s
LEAF_NODE	666:52	666:52	13	)
LEAF_NODE	666:53	666:53	11	,
ARGUMENT	667:7	667:26	11	( unsigned __int64 ) TIFFGetStrileByteCount ( tif , s )
LEAF_NODE	667:7	667:7	12	(
TYPE_NAME	667:8	667:17	12	unsigned __int64
LEAF_NODE	667:8	667:8	13	unsigned
LEAF_NODE	667:17	667:17	13	__int64
LEAF_NODE	667:24	667:24	12	)
FUNCTION_CALL	667:26	667:55	12	TIFFGetStrileByteCount ( tif , s )
CALLEE	667:26	667:26	13	TIFFGetStrileByteCount
LEAF_NODE	667:26	667:26	14	TIFFGetStrileByteCount
LEAF_NODE	667:48	667:48	13	(
ARGUMENT	667:49	667:49	13	tif
FIELD	667:49	667:49	14	tif
LEAF_NODE	667:49	667:49	15	tif
LEAF_NODE	667:52	667:52	13	,
ARGUMENT	667:54	667:54	13	s
FIELD	667:54	667:54	14	s
LEAF_NODE	667:54	667:54	15	s
LEAF_NODE	667:55	667:55	13	)
LEAF_NODE	667:56	667:56	11	)
LEAF_NODE	667:57	667:57	9	;
LEAF_NODE	669:3	669:3	6	fprintf
LEAF_NODE	669:10	669:10	6	(
LEAF_NODE	669:11	669:11	6	fd
LEAF_NODE	669:13	669:13	6	,
LEAF_NODE	669:15	669:15	6	"    %3lu: [%8llu, %8llu]\n"
LEAF_NODE	669:43	669:43	6	,
LEAF_NODE	670:7	670:7	6	(
LEAF_NODE	670:8	670:8	6	unsigned
LEAF_NODE	670:17	670:17	6	long
LEAF_NODE	670:21	670:21	6	)
LEAF_NODE	670:23	670:23	6	s
LEAF_NODE	670:24	670:24	6	,
LEAF_NODE	671:7	671:7	6	(
LEAF_NODE	671:8	671:8	6	unsigned
LEAF_NODE	671:17	671:17	6	long
LEAF_NODE	671:22	671:22	6	long
LEAF_NODE	671:26	671:26	6	)
LEAF_NODE	671:28	671:28	6	TIFFGetStrileOffset
LEAF_NODE	671:47	671:47	6	(
LEAF_NODE	671:48	671:48	6	tif
LEAF_NODE	671:51	671:51	6	,
LEAF_NODE	671:53	671:53	6	s
LEAF_NODE	671:54	671:54	6	)
LEAF_NODE	671:55	671:55	6	,
LEAF_NODE	672:7	672:7	6	(
LEAF_NODE	672:8	672:8	6	unsigned
LEAF_NODE	672:17	672:17	6	long
LEAF_NODE	672:22	672:22	6	long
LEAF_NODE	672:26	672:26	6	)
LEAF_NODE	672:28	672:28	6	TIFFGetStrileByteCount
LEAF_NODE	672:50	672:50	6	(
LEAF_NODE	672:51	672:51	6	tif
LEAF_NODE	672:54	672:54	6	,
LEAF_NODE	672:56	672:56	6	s
LEAF_NODE	672:57	672:57	6	)
LEAF_NODE	672:58	672:58	6	)
LEAF_NODE	672:59	672:59	6	;
LEAF_NODE	674:1	674:1	5	}
LEAF_NODE	675:0	675:0	2	}
FUNCTION_DEF	677:0	681:0	1	
RETURN_TYPE	677:0	677:0	2	void
TYPE_NAME	677:0	677:0	3	void
LEAF_NODE	677:0	677:0	4	void
FUNCTION_NAME	678:0	678:0	2	_TIFFprintAscii
LEAF_NODE	678:0	678:0	3	_TIFFprintAscii
PARAMETER_LIST	678:15	678:40	2	( FILE * fd , const char * cp )
LEAF_NODE	678:15	678:15	3	(
PARAMETER_DECL	678:16	678:22	3	FILE * fd
TYPE	678:16	678:20	4	FILE *
TYPE_NAME	678:16	678:16	5	FILE
LEAF_NODE	678:16	678:16	6	FILE
POINTER	678:20	678:20	5	*
LEAF_NODE	678:20	678:20	6	*
NAME	678:22	678:22	4	fd
LEAF_NODE	678:22	678:22	5	fd
LEAF_NODE	678:24	678:24	3	,
PARAMETER_DECL	678:26	678:38	3	const char * cp
TYPE	678:26	678:36	4	const char *
TYPE_NAME	678:26	678:32	5	const char
LEAF_NODE	678:26	678:26	6	const
LEAF_NODE	678:32	678:32	6	char
POINTER	678:36	678:36	5	*
LEAF_NODE	678:36	678:36	6	*
NAME	678:38	678:38	4	cp
LEAF_NODE	678:38	678:38	5	cp
LEAF_NODE	678:40	678:40	3	)
LEAF_NODE	679:0	679:0	2	{
STATEMENTS	680:1	680:1	2	
EXPR_STATEMENT	680:1	680:44	3	_TIFFprintAsciiBounded ( fd , cp , strlen ( cp ) ) ;
EXPR	680:1	680:1	4	_TIFFprintAsciiBounded ( fd , cp , strlen ( cp ) )
FUNCTION_CALL	680:1	680:43	5	_TIFFprintAsciiBounded ( fd , cp , strlen ( cp ) )
CALLEE	680:1	680:1	6	_TIFFprintAsciiBounded
LEAF_NODE	680:1	680:1	7	_TIFFprintAsciiBounded
LEAF_NODE	680:23	680:23	6	(
ARGUMENT	680:25	680:25	6	fd
FIELD	680:25	680:25	7	fd
LEAF_NODE	680:25	680:25	8	fd
LEAF_NODE	680:27	680:27	6	,
ARGUMENT	680:29	680:29	6	cp
FIELD	680:29	680:29	7	cp
LEAF_NODE	680:29	680:29	8	cp
LEAF_NODE	680:31	680:31	6	,
ARGUMENT	680:33	680:33	6	strlen ( cp )
FUNCTION_CALL	680:33	680:42	7	strlen ( cp )
CALLEE	680:33	680:33	8	strlen
LEAF_NODE	680:33	680:33	9	strlen
LEAF_NODE	680:39	680:39	8	(
ARGUMENT	680:40	680:40	8	cp
FIELD	680:40	680:40	9	cp
LEAF_NODE	680:40	680:40	10	cp
LEAF_NODE	680:42	680:42	8	)
LEAF_NODE	680:43	680:43	6	)
LEAF_NODE	680:44	680:44	4	;
LEAF_NODE	681:0	681:0	2	}
FUNCTION_DEF	683:0	701:0	1	
RETURN_TYPE	683:0	683:7	2	static void
LEAF_NODE	683:0	683:0	3	static
TYPE_NAME	683:7	683:7	3	void
LEAF_NODE	683:7	683:7	4	void
FUNCTION_NAME	684:0	684:0	2	_TIFFprintAsciiBounded
LEAF_NODE	684:0	684:0	3	_TIFFprintAsciiBounded
PARAMETER_LIST	684:22	684:65	2	( FILE * fd , const char * cp , size_t max_chars )
LEAF_NODE	684:22	684:22	3	(
PARAMETER_DECL	684:23	684:29	3	FILE * fd
TYPE	684:23	684:27	4	FILE *
TYPE_NAME	684:23	684:23	5	FILE
LEAF_NODE	684:23	684:23	6	FILE
POINTER	684:27	684:27	5	*
LEAF_NODE	684:27	684:27	6	*
NAME	684:29	684:29	4	fd
LEAF_NODE	684:29	684:29	5	fd
LEAF_NODE	684:31	684:31	3	,
PARAMETER_DECL	684:33	684:45	3	const char * cp
TYPE	684:33	684:43	4	const char *
TYPE_NAME	684:33	684:39	5	const char
LEAF_NODE	684:33	684:33	6	const
LEAF_NODE	684:39	684:39	6	char
POINTER	684:43	684:43	5	*
LEAF_NODE	684:43	684:43	6	*
NAME	684:45	684:45	4	cp
LEAF_NODE	684:45	684:45	5	cp
LEAF_NODE	684:47	684:47	3	,
PARAMETER_DECL	684:49	684:56	3	size_t max_chars
TYPE	684:49	684:49	4	size_t
TYPE_NAME	684:49	684:49	5	size_t
LEAF_NODE	684:49	684:49	6	size_t
NAME	684:56	684:56	4	max_chars
LEAF_NODE	684:56	684:56	5	max_chars
LEAF_NODE	684:65	684:65	3	)
LEAF_NODE	685:0	685:0	2	{
STATEMENTS	686:1	686:1	2	
ITERATION	686:1	686:57	3	
KEYWORD	686:1	686:1	4	for
LEAF_NODE	686:1	686:1	5	for
LEAF_NODE	686:5	686:5	4	(
FOR_INIT	686:6	686:6	4	;
LEAF_NODE	686:6	686:6	5	;
CONDITION	686:8	686:8	4	max_chars > 0 && * cp != '\0'
EXPR	686:8	686:8	5	max_chars > 0 && * cp != '\0'
AND	686:8	686:25	6	max_chars > 0 && * cp != '\0'
EXPR	686:8	686:20	7	max_chars > 0
FIELD	686:8	686:8	8	max_chars
LEAF_NODE	686:8	686:8	9	max_chars
REL_OPERATOR	686:18	686:18	8	>
LEAF_NODE	686:18	686:18	9	>
FIELD	686:20	686:20	8	0
LEAF_NODE	686:20	686:20	9	0
LEAF_NODE	686:22	686:22	7	&&
EXPR	686:25	686:32	7	* cp != '\0'
UNARY_EXPR	686:25	686:26	8	* cp
UNARY_OPERATOR	686:25	686:25	9	*
LEAF_NODE	686:25	686:25	10	*
FIELD	686:26	686:26	9	cp
LEAF_NODE	686:26	686:26	10	cp
EQ_OPERATOR	686:29	686:29	8	!=
LEAF_NODE	686:29	686:29	9	!=
FIELD	686:32	686:32	8	'\0'
LEAF_NODE	686:32	686:32	9	'\0'
LEAF_NODE	686:36	686:36	4	;
FOR_EXPR	686:38	686:38	4	cp ++ , max_chars --
EXPR	686:38	686:44	5	cp ++ , max_chars --
FIELD	686:38	686:40	6	cp ++
LEAF_NODE	686:38	686:38	7	cp
LEAF_NODE	686:40	686:40	7	++
LEAF_NODE	686:42	686:42	6	,
FIELD	686:44	686:53	6	max_chars --
LEAF_NODE	686:44	686:44	7	max_chars
LEAF_NODE	686:53	686:53	7	--
LEAF_NODE	686:55	686:55	4	)
STATEMENTS	686:57	700:1	4	
LEAF_NODE	686:57	686:57	5	{
STATEMENTS	687:2	698:2	5	
SIMPLE_DECL	687:2	687:16	6	const char * tp ;
VAR_DECL	687:2	687:14	7	const char * tp
TYPE	687:2	687:12	8	const char *
TYPE_NAME	687:2	687:8	9	const char
LEAF_NODE	687:2	687:2	10	const
LEAF_NODE	687:8	687:8	10	char
POINTER	687:12	687:12	9	*
LEAF_NODE	687:12	687:12	10	*
NAME	687:14	687:14	8	tp
LEAF_NODE	687:14	687:14	9	tp
LEAF_NODE	687:16	687:16	7	;
SELECTION	689:2	689:25	6	
KEYWORD	689:2	689:2	7	if
LEAF_NODE	689:2	689:2	8	if
LEAF_NODE	689:5	689:5	7	(
CONDITION	689:6	689:6	7	isprint ( ( int ) * cp )
EXPR	689:6	689:6	8	isprint ( ( int ) * cp )
FUNCTION_CALL	689:6	689:22	9	isprint ( ( int ) * cp )
CALLEE	689:6	689:6	10	isprint
LEAF_NODE	689:6	689:6	11	isprint
LEAF_NODE	689:13	689:13	10	(
ARGUMENT	689:14	689:19	10	( int ) * cp
LEAF_NODE	689:14	689:14	11	(
TYPE_NAME	689:15	689:15	11	int
LEAF_NODE	689:15	689:15	12	int
LEAF_NODE	689:18	689:18	11	)
UNARY_EXPR	689:19	689:20	11	* cp
UNARY_OPERATOR	689:19	689:19	12	*
LEAF_NODE	689:19	689:19	13	*
FIELD	689:20	689:20	12	cp
LEAF_NODE	689:20	689:20	13	cp
LEAF_NODE	689:22	689:22	10	)
LEAF_NODE	689:23	689:23	7	)
STATEMENTS	689:25	692:2	7	
LEAF_NODE	689:25	689:25	8	{
STATEMENTS	690:3	691:3	8	
EXPR_STATEMENT	690:3	690:17	9	fputc ( * cp , fd ) ;
EXPR	690:3	690:3	10	fputc ( * cp , fd )
FUNCTION_CALL	690:3	690:16	11	fputc ( * cp , fd )
CALLEE	690:3	690:3	12	fputc
LEAF_NODE	690:3	690:3	13	fputc
LEAF_NODE	690:8	690:8	12	(
ARGUMENT	690:9	690:9	12	* cp
UNARY_EXPR	690:9	690:10	13	* cp
UNARY_OPERATOR	690:9	690:9	14	*
LEAF_NODE	690:9	690:9	15	*
FIELD	690:10	690:10	14	cp
LEAF_NODE	690:10	690:10	15	cp
LEAF_NODE	690:12	690:12	12	,
ARGUMENT	690:14	690:14	12	fd
FIELD	690:14	690:14	13	fd
LEAF_NODE	690:14	690:14	14	fd
LEAF_NODE	690:16	690:16	12	)
LEAF_NODE	690:17	690:17	10	;
JUMP_STATEMENT	691:3	691:11	9	continue DESTINATION ;
KEYWORD	691:3	691:3	10	continue
LEAF_NODE	691:3	691:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	691:11	691:11	10	;
LEAF_NODE	692:2	692:2	8	}
ITERATION	693:2	694:3	6	
KEYWORD	693:2	693:2	7	for
LEAF_NODE	693:2	693:2	8	for
LEAF_NODE	693:6	693:6	7	(
FOR_INIT	693:7	693:29	7	tp = "\tt\bb\rr\nn\vv" ;
EXPR	693:7	693:7	8	tp = "\tt\bb\rr\nn\vv"
ASSIGN	693:7	693:12	9	tp = "\tt\bb\rr\nn\vv"
LVAL	693:7	693:7	10	tp
FIELD	693:7	693:7	11	tp
LEAF_NODE	693:7	693:7	12	tp
ASSIGN_OP	693:10	693:10	10	=
LEAF_NODE	693:10	693:10	11	=
RVAL	693:12	693:12	10	"\tt\bb\rr\nn\vv"
FIELD	693:12	693:12	11	"\tt\bb\rr\nn\vv"
LEAF_NODE	693:12	693:12	12	"\tt\bb\rr\nn\vv"
LEAF_NODE	693:29	693:29	8	;
CONDITION	693:31	693:31	7	* tp
EXPR	693:31	693:31	8	* tp
UNARY_EXPR	693:31	693:32	9	* tp
UNARY_OPERATOR	693:31	693:31	10	*
LEAF_NODE	693:31	693:31	11	*
FIELD	693:32	693:32	10	tp
LEAF_NODE	693:32	693:32	11	tp
LEAF_NODE	693:34	693:34	7	;
FOR_EXPR	693:36	693:36	7	tp ++
EXPR	693:36	693:36	8	tp ++
FIELD	693:36	693:38	9	tp ++
LEAF_NODE	693:36	693:36	10	tp
LEAF_NODE	693:38	693:38	10	++
LEAF_NODE	693:40	693:40	7	)
STATEMENTS	694:3	694:3	7	
SELECTION	694:3	695:4	8	
KEYWORD	694:3	694:3	9	if
LEAF_NODE	694:3	694:3	10	if
LEAF_NODE	694:6	694:6	9	(
CONDITION	694:7	694:7	9	* tp ++ == * cp
EXPR	694:7	694:16	10	* tp ++ == * cp
UNARY_EXPR	694:7	694:8	11	* tp ++
UNARY_OPERATOR	694:7	694:7	12	*
LEAF_NODE	694:7	694:7	13	*
FIELD	694:8	694:10	12	tp ++
LEAF_NODE	694:8	694:8	13	tp
LEAF_NODE	694:10	694:10	13	++
EQ_OPERATOR	694:13	694:13	11	==
LEAF_NODE	694:13	694:13	12	==
UNARY_EXPR	694:16	694:17	11	* cp
UNARY_OPERATOR	694:16	694:16	12	*
LEAF_NODE	694:16	694:16	13	*
FIELD	694:17	694:17	12	cp
LEAF_NODE	694:17	694:17	13	cp
LEAF_NODE	694:19	694:19	9	)
STATEMENTS	695:4	695:4	9	
JUMP_STATEMENT	695:4	695:9	10	break DESTINATION ;
KEYWORD	695:4	695:4	11	break
LEAF_NODE	695:4	695:4	12	break
LEAF_NODE	0:0	0:0	11	DESTINATION
LEAF_NODE	695:9	695:9	11	;
SELECTION	696:2	697:3	6	
KEYWORD	696:2	696:2	7	if
LEAF_NODE	696:2	696:2	8	if
LEAF_NODE	696:5	696:5	7	(
CONDITION	696:6	696:6	7	* tp
EXPR	696:6	696:6	8	* tp
UNARY_EXPR	696:6	696:7	9	* tp
UNARY_OPERATOR	696:6	696:6	10	*
LEAF_NODE	696:6	696:6	11	*
FIELD	696:7	696:7	10	tp
LEAF_NODE	696:7	696:7	11	tp
LEAF_NODE	696:9	696:9	7	)
STATEMENTS	697:3	697:3	7	
EXPR_STATEMENT	697:3	697:27	8	fprintf ( fd , "\\%c" , * tp ) ;
EXPR	697:3	697:3	9	fprintf ( fd , "\\%c" , * tp )
FUNCTION_CALL	697:3	697:26	10	fprintf ( fd , "\\%c" , * tp )
CALLEE	697:3	697:3	11	fprintf
LEAF_NODE	697:3	697:3	12	fprintf
LEAF_NODE	697:10	697:10	11	(
ARGUMENT	697:11	697:11	11	fd
FIELD	697:11	697:11	12	fd
LEAF_NODE	697:11	697:11	13	fd
LEAF_NODE	697:13	697:13	11	,
ARGUMENT	697:15	697:15	11	"\\%c"
FIELD	697:15	697:15	12	"\\%c"
LEAF_NODE	697:15	697:15	13	"\\%c"
LEAF_NODE	697:21	697:21	11	,
ARGUMENT	697:23	697:23	11	* tp
UNARY_EXPR	697:23	697:24	12	* tp
UNARY_OPERATOR	697:23	697:23	13	*
LEAF_NODE	697:23	697:23	14	*
FIELD	697:24	697:24	13	tp
LEAF_NODE	697:24	697:24	14	tp
LEAF_NODE	697:26	697:26	11	)
LEAF_NODE	697:27	697:27	9	;
SELECTION	698:2	699:3	6	
KEYWORD	698:2	698:2	7	else
LEAF_NODE	698:2	698:2	8	else
STATEMENTS	699:3	699:3	7	
EXPR_STATEMENT	699:3	699:36	8	fprintf ( fd , "\\%03o" , * cp & 0xff ) ;
EXPR	699:3	699:3	9	fprintf ( fd , "\\%03o" , * cp & 0xff )
FUNCTION_CALL	699:3	699:35	10	fprintf ( fd , "\\%03o" , * cp & 0xff )
CALLEE	699:3	699:3	11	fprintf
LEAF_NODE	699:3	699:3	12	fprintf
LEAF_NODE	699:10	699:10	11	(
ARGUMENT	699:11	699:11	11	fd
FIELD	699:11	699:11	12	fd
LEAF_NODE	699:11	699:11	13	fd
LEAF_NODE	699:13	699:13	11	,
ARGUMENT	699:15	699:15	11	"\\%03o"
FIELD	699:15	699:15	12	"\\%03o"
LEAF_NODE	699:15	699:15	13	"\\%03o"
LEAF_NODE	699:23	699:23	11	,
ARGUMENT	699:25	699:31	11	* cp & 0xff
UNARY_EXPR	699:25	699:26	12	* cp
UNARY_OPERATOR	699:25	699:25	13	*
LEAF_NODE	699:25	699:25	14	*
FIELD	699:26	699:26	13	cp
LEAF_NODE	699:26	699:26	14	cp
LEAF_NODE	699:29	699:29	12	&
FIELD	699:31	699:31	12	0xff
LEAF_NODE	699:31	699:31	13	0xff
LEAF_NODE	699:35	699:35	11	)
LEAF_NODE	699:36	699:36	9	;
LEAF_NODE	700:1	700:1	5	}
LEAF_NODE	701:0	701:0	2	}
FUNCTION_DEF	703:0	709:0	1	
RETURN_TYPE	703:0	703:0	2	void
TYPE_NAME	703:0	703:0	3	void
LEAF_NODE	703:0	703:0	4	void
FUNCTION_NAME	704:0	704:0	2	_TIFFprintAsciiTag
LEAF_NODE	704:0	704:0	3	_TIFFprintAsciiTag
PARAMETER_LIST	704:18	704:64	2	( FILE * fd , const char * name , const char * value )
LEAF_NODE	704:18	704:18	3	(
PARAMETER_DECL	704:19	704:25	3	FILE * fd
TYPE	704:19	704:23	4	FILE *
TYPE_NAME	704:19	704:19	5	FILE
LEAF_NODE	704:19	704:19	6	FILE
POINTER	704:23	704:23	5	*
LEAF_NODE	704:23	704:23	6	*
NAME	704:25	704:25	4	fd
LEAF_NODE	704:25	704:25	5	fd
LEAF_NODE	704:27	704:27	3	,
PARAMETER_DECL	704:29	704:41	3	const char * name
TYPE	704:29	704:39	4	const char *
TYPE_NAME	704:29	704:35	5	const char
LEAF_NODE	704:29	704:29	6	const
LEAF_NODE	704:35	704:35	6	char
POINTER	704:39	704:39	5	*
LEAF_NODE	704:39	704:39	6	*
NAME	704:41	704:41	4	name
LEAF_NODE	704:41	704:41	5	name
LEAF_NODE	704:45	704:45	3	,
PARAMETER_DECL	704:47	704:59	3	const char * value
TYPE	704:47	704:57	4	const char *
TYPE_NAME	704:47	704:53	5	const char
LEAF_NODE	704:47	704:47	6	const
LEAF_NODE	704:53	704:53	6	char
POINTER	704:57	704:57	5	*
LEAF_NODE	704:57	704:57	6	*
NAME	704:59	704:59	4	value
LEAF_NODE	704:59	704:59	5	value
LEAF_NODE	704:64	704:64	3	)
LEAF_NODE	705:0	705:0	2	{
STATEMENTS	706:1	708:1	2	
EXPR_STATEMENT	706:1	706:30	3	fprintf ( fd , "  %s: \"" , name ) ;
EXPR	706:1	706:1	4	fprintf ( fd , "  %s: \"" , name )
FUNCTION_CALL	706:1	706:29	5	fprintf ( fd , "  %s: \"" , name )
CALLEE	706:1	706:1	6	fprintf
LEAF_NODE	706:1	706:1	7	fprintf
LEAF_NODE	706:8	706:8	6	(
ARGUMENT	706:9	706:9	6	fd
FIELD	706:9	706:9	7	fd
LEAF_NODE	706:9	706:9	8	fd
LEAF_NODE	706:11	706:11	6	,
ARGUMENT	706:13	706:13	6	"  %s: \""
FIELD	706:13	706:13	7	"  %s: \""
LEAF_NODE	706:13	706:13	8	"  %s: \""
LEAF_NODE	706:23	706:23	6	,
ARGUMENT	706:25	706:25	6	name
FIELD	706:25	706:25	7	name
LEAF_NODE	706:25	706:25	8	name
LEAF_NODE	706:29	706:29	6	)
LEAF_NODE	706:30	706:30	4	;
EXPR_STATEMENT	707:1	707:27	3	_TIFFprintAscii ( fd , value ) ;
EXPR	707:1	707:1	4	_TIFFprintAscii ( fd , value )
FUNCTION_CALL	707:1	707:26	5	_TIFFprintAscii ( fd , value )
CALLEE	707:1	707:1	6	_TIFFprintAscii
LEAF_NODE	707:1	707:1	7	_TIFFprintAscii
LEAF_NODE	707:16	707:16	6	(
ARGUMENT	707:17	707:17	6	fd
FIELD	707:17	707:17	7	fd
LEAF_NODE	707:17	707:17	8	fd
LEAF_NODE	707:19	707:19	6	,
ARGUMENT	707:21	707:21	6	value
FIELD	707:21	707:21	7	value
LEAF_NODE	707:21	707:21	8	value
LEAF_NODE	707:26	707:26	6	)
LEAF_NODE	707:27	707:27	4	;
EXPR_STATEMENT	708:1	708:20	3	fprintf ( fd , "\"\n" ) ;
EXPR	708:1	708:1	4	fprintf ( fd , "\"\n" )
FUNCTION_CALL	708:1	708:19	5	fprintf ( fd , "\"\n" )
CALLEE	708:1	708:1	6	fprintf
LEAF_NODE	708:1	708:1	7	fprintf
LEAF_NODE	708:8	708:8	6	(
ARGUMENT	708:9	708:9	6	fd
FIELD	708:9	708:9	7	fd
LEAF_NODE	708:9	708:9	8	fd
LEAF_NODE	708:11	708:11	6	,
ARGUMENT	708:13	708:13	6	"\"\n"
FIELD	708:13	708:13	7	"\"\n"
LEAF_NODE	708:13	708:13	8	"\"\n"
LEAF_NODE	708:19	708:19	6	)
LEAF_NODE	708:20	708:20	4	;
LEAF_NODE	709:0	709:0	2	}
