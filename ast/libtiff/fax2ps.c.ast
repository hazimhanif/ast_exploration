SOURCE_FILE	51:0	441:0	0	
SIMPLE_DECL	51:0	51:20	1	float defxres ; defxres = 204. ;
VAR_DECL	51:0	51:6	2	float defxres ; defxres = 204.
TYPE	51:0	51:0	3	float
TYPE_NAME	51:0	51:0	4	float
LEAF_NODE	51:0	51:0	5	float
NAME	51:6	51:6	3	defxres
LEAF_NODE	51:6	51:6	4	defxres
LEAF_NODE	0:0	0:0	3	;
INIT	51:6	51:6	3	defxres = 204.
ASSIGN	51:6	51:16	4	defxres = 204.
LVAL	51:6	51:6	5	defxres
NAME	51:6	51:6	6	defxres
LEAF_NODE	51:6	51:6	7	defxres
ASSIGN_OP	51:14	51:14	5	=
LEAF_NODE	51:14	51:14	6	=
RVAL	51:16	51:16	5	204.
FIELD	51:16	51:16	6	204.
LEAF_NODE	51:16	51:16	7	204.
LEAF_NODE	51:20	51:20	2	;
SIMPLE_DECL	52:0	52:19	1	float defyres ; defyres = 98. ;
VAR_DECL	52:0	52:6	2	float defyres ; defyres = 98.
TYPE	52:0	52:0	3	float
TYPE_NAME	52:0	52:0	4	float
LEAF_NODE	52:0	52:0	5	float
NAME	52:6	52:6	3	defyres
LEAF_NODE	52:6	52:6	4	defyres
LEAF_NODE	0:0	0:0	3	;
INIT	52:6	52:6	3	defyres = 98.
ASSIGN	52:6	52:16	4	defyres = 98.
LVAL	52:6	52:6	5	defyres
NAME	52:6	52:6	6	defyres
LEAF_NODE	52:6	52:6	7	defyres
ASSIGN_OP	52:14	52:14	5	=
LEAF_NODE	52:14	52:14	6	=
RVAL	52:16	52:16	5	98.
FIELD	52:16	52:16	6	98.
LEAF_NODE	52:16	52:16	7	98.
LEAF_NODE	52:19	52:19	2	;
SIMPLE_DECL	53:0	53:22	1	const float half ; half = 0.5 ;
VAR_DECL	53:0	53:12	2	const float half ; half = 0.5
TYPE	53:0	53:0	3	const float
TYPE_NAME	53:0	53:6	4	const float
LEAF_NODE	53:0	53:0	5	const
LEAF_NODE	53:6	53:6	5	float
NAME	53:12	53:12	3	half
LEAF_NODE	53:12	53:12	4	half
LEAF_NODE	0:0	0:0	3	;
INIT	53:12	53:12	3	half = 0.5
ASSIGN	53:12	53:19	4	half = 0.5
LVAL	53:12	53:12	5	half
NAME	53:12	53:12	6	half
LEAF_NODE	53:12	53:12	7	half
ASSIGN_OP	53:17	53:17	5	=
LEAF_NODE	53:17	53:17	6	=
RVAL	53:19	53:19	5	0.5
FIELD	53:19	53:19	6	0.5
LEAF_NODE	53:19	53:19	7	0.5
LEAF_NODE	53:22	53:22	2	;
SIMPLE_DECL	54:0	54:25	1	const float points ; points = 72.0 ;
VAR_DECL	54:0	54:12	2	const float points ; points = 72.0
TYPE	54:0	54:0	3	const float
TYPE_NAME	54:0	54:6	4	const float
LEAF_NODE	54:0	54:0	5	const
LEAF_NODE	54:6	54:6	5	float
NAME	54:12	54:12	3	points
LEAF_NODE	54:12	54:12	4	points
LEAF_NODE	0:0	0:0	3	;
INIT	54:12	54:12	3	points = 72.0
ASSIGN	54:12	54:21	4	points = 72.0
LVAL	54:12	54:12	5	points
NAME	54:12	54:12	6	points
LEAF_NODE	54:12	54:12	7	points
ASSIGN_OP	54:19	54:19	5	=
LEAF_NODE	54:19	54:19	6	=
RVAL	54:21	54:21	5	72.0
FIELD	54:21	54:21	6	72.0
LEAF_NODE	54:21	54:21	7	72.0
LEAF_NODE	54:25	54:25	2	;
SIMPLE_DECL	55:0	55:19	1	float pageWidth ; pageWidth = 0 ;
VAR_DECL	55:0	55:6	2	float pageWidth ; pageWidth = 0
TYPE	55:0	55:0	3	float
TYPE_NAME	55:0	55:0	4	float
LEAF_NODE	55:0	55:0	5	float
NAME	55:6	55:6	3	pageWidth
LEAF_NODE	55:6	55:6	4	pageWidth
LEAF_NODE	0:0	0:0	3	;
INIT	55:6	55:6	3	pageWidth = 0
ASSIGN	55:6	55:18	4	pageWidth = 0
LVAL	55:6	55:6	5	pageWidth
NAME	55:6	55:6	6	pageWidth
LEAF_NODE	55:6	55:6	7	pageWidth
ASSIGN_OP	55:16	55:16	5	=
LEAF_NODE	55:16	55:16	6	=
RVAL	55:18	55:18	5	0
FIELD	55:18	55:18	6	0
LEAF_NODE	55:18	55:18	7	0
LEAF_NODE	55:19	55:19	2	;
SIMPLE_DECL	56:0	56:20	1	float pageHeight ; pageHeight = 0 ;
VAR_DECL	56:0	56:6	2	float pageHeight ; pageHeight = 0
TYPE	56:0	56:0	3	float
TYPE_NAME	56:0	56:0	4	float
LEAF_NODE	56:0	56:0	5	float
NAME	56:6	56:6	3	pageHeight
LEAF_NODE	56:6	56:6	4	pageHeight
LEAF_NODE	0:0	0:0	3	;
INIT	56:6	56:6	3	pageHeight = 0
ASSIGN	56:6	56:19	4	pageHeight = 0
LVAL	56:6	56:6	5	pageHeight
NAME	56:6	56:6	6	pageHeight
LEAF_NODE	56:6	56:6	7	pageHeight
ASSIGN_OP	56:17	56:17	5	=
LEAF_NODE	56:17	56:17	6	=
RVAL	56:19	56:19	5	0
FIELD	56:19	56:19	6	0
LEAF_NODE	56:19	56:19	7	0
LEAF_NODE	56:20	56:20	2	;
SIMPLE_DECL	57:0	57:19	1	int scaleToPage ; scaleToPage = 0 ;
VAR_DECL	57:0	57:4	2	int scaleToPage ; scaleToPage = 0
TYPE	57:0	57:0	3	int
TYPE_NAME	57:0	57:0	4	int
LEAF_NODE	57:0	57:0	5	int
NAME	57:4	57:4	3	scaleToPage
LEAF_NODE	57:4	57:4	4	scaleToPage
LEAF_NODE	0:0	0:0	3	;
INIT	57:4	57:4	3	scaleToPage = 0
ASSIGN	57:4	57:18	4	scaleToPage = 0
LVAL	57:4	57:4	5	scaleToPage
NAME	57:4	57:4	6	scaleToPage
LEAF_NODE	57:4	57:4	7	scaleToPage
ASSIGN_OP	57:16	57:16	5	=
LEAF_NODE	57:16	57:16	6	=
RVAL	57:18	57:18	5	0
FIELD	57:18	57:18	6	0
LEAF_NODE	57:18	57:18	7	0
LEAF_NODE	57:19	57:19	2	;
SIMPLE_DECL	58:0	58:18	1	int totalPages ; totalPages = 0 ;
VAR_DECL	58:0	58:4	2	int totalPages ; totalPages = 0
TYPE	58:0	58:0	3	int
TYPE_NAME	58:0	58:0	4	int
LEAF_NODE	58:0	58:0	5	int
NAME	58:4	58:4	3	totalPages
LEAF_NODE	58:4	58:4	4	totalPages
LEAF_NODE	0:0	0:0	3	;
INIT	58:4	58:4	3	totalPages = 0
ASSIGN	58:4	58:17	4	totalPages = 0
LVAL	58:4	58:4	5	totalPages
NAME	58:4	58:4	6	totalPages
LEAF_NODE	58:4	58:4	7	totalPages
ASSIGN_OP	58:15	58:15	5	=
LEAF_NODE	58:15	58:15	6	=
RVAL	58:17	58:17	5	0
FIELD	58:17	58:17	6	0
LEAF_NODE	58:17	58:17	7	0
LEAF_NODE	58:18	58:18	2	;
SIMPLE_DECL	59:0	59:7	1	int row ;
VAR_DECL	59:0	59:4	2	int row
TYPE	59:0	59:0	3	int
TYPE_NAME	59:0	59:0	4	int
LEAF_NODE	59:0	59:0	5	int
NAME	59:4	59:4	3	row
LEAF_NODE	59:4	59:4	4	row
LEAF_NODE	59:7	59:7	2	;
SIMPLE_DECL	60:0	60:17	1	int maxline ; maxline = 512 ;
VAR_DECL	60:0	60:4	2	int maxline ; maxline = 512
TYPE	60:0	60:0	3	int
TYPE_NAME	60:0	60:0	4	int
LEAF_NODE	60:0	60:0	5	int
NAME	60:4	60:4	3	maxline
LEAF_NODE	60:4	60:4	4	maxline
LEAF_NODE	0:0	0:0	3	;
INIT	60:4	60:4	3	maxline = 512
ASSIGN	60:4	60:14	4	maxline = 512
LVAL	60:4	60:4	5	maxline
NAME	60:4	60:4	6	maxline
LEAF_NODE	60:4	60:4	7	maxline
ASSIGN_OP	60:12	60:12	5	=
LEAF_NODE	60:12	60:12	6	=
RVAL	60:14	60:14	5	512
FIELD	60:14	60:14	6	512
LEAF_NODE	60:14	60:14	7	512
LEAF_NODE	60:17	60:17	2	;
FUNCTION_DEF	70:0	157:0	1	
RETURN_TYPE	70:0	70:7	2	static void
LEAF_NODE	70:0	70:0	3	static
TYPE_NAME	70:7	70:7	3	void
LEAF_NODE	70:7	70:7	4	void
FUNCTION_NAME	71:0	71:0	2	printruns
LEAF_NODE	71:0	71:0	3	printruns
PARAMETER_LIST	71:9	71:70	2	( unsigned char * buf , uint32 * runs , uint32 * erun , uint32 lastx )
LEAF_NODE	71:9	71:9	3	(
PARAMETER_DECL	71:10	71:25	3	unsigned char * buf
TYPE	71:10	71:23	4	unsigned char *
TYPE_NAME	71:10	71:19	5	unsigned char
LEAF_NODE	71:10	71:10	6	unsigned
LEAF_NODE	71:19	71:19	6	char
POINTER	71:23	71:23	5	*
LEAF_NODE	71:23	71:23	6	*
NAME	71:25	71:25	4	buf
LEAF_NODE	71:25	71:25	5	buf
LEAF_NODE	71:28	71:28	3	,
PARAMETER_DECL	71:30	71:38	3	uint32 * runs
TYPE	71:30	71:36	4	uint32 *
TYPE_NAME	71:30	71:30	5	uint32
LEAF_NODE	71:30	71:30	6	uint32
POINTER	71:36	71:36	5	*
LEAF_NODE	71:36	71:36	6	*
NAME	71:38	71:38	4	runs
LEAF_NODE	71:38	71:38	5	runs
LEAF_NODE	71:42	71:42	3	,
PARAMETER_DECL	71:44	71:52	3	uint32 * erun
TYPE	71:44	71:50	4	uint32 *
TYPE_NAME	71:44	71:44	5	uint32
LEAF_NODE	71:44	71:44	6	uint32
POINTER	71:50	71:50	5	*
LEAF_NODE	71:50	71:50	6	*
NAME	71:52	71:52	4	erun
LEAF_NODE	71:52	71:52	5	erun
LEAF_NODE	71:56	71:56	3	,
PARAMETER_DECL	71:58	71:65	3	uint32 lastx
TYPE	71:58	71:58	4	uint32
TYPE_NAME	71:58	71:58	5	uint32
LEAF_NODE	71:58	71:58	6	uint32
NAME	71:65	71:65	4	lastx
LEAF_NODE	71:65	71:65	5	lastx
LEAF_NODE	71:70	71:70	3	)
LEAF_NODE	72:0	72:0	2	{
STATEMENTS	73:4	156:4	2	
LEAF_NODE	73:4	73:4	3	static
LEAF_NODE	73:11	73:11	3	struct
LEAF_NODE	73:18	73:18	3	{
STATEMENTS	74:1	75:1	3	
SIMPLE_DECL	74:1	74:18	4	char white , char black ;
INIT_DECL_LIST	74:1	74:1	5	char white , char black
VAR_DECL	74:1	74:6	6	char white
TYPE	74:1	74:1	7	char
TYPE_NAME	74:1	74:1	8	char
LEAF_NODE	74:1	74:1	9	char
NAME	74:6	74:6	7	white
LEAF_NODE	74:6	74:6	8	white
LEAF_NODE	74:11	74:11	6	,
VAR_DECL	74:1	74:13	6	char black
TYPE	74:1	74:1	7	char
TYPE_NAME	74:1	74:1	8	char
LEAF_NODE	74:1	74:1	9	char
NAME	74:13	74:13	7	black
LEAF_NODE	74:13	74:13	8	black
LEAF_NODE	74:18	74:18	5	;
SIMPLE_DECL	75:1	75:21	4	unsigned short width ;
VAR_DECL	75:1	75:16	5	unsigned short width
TYPE	75:1	75:1	6	unsigned short
TYPE_NAME	75:1	75:10	7	unsigned short
LEAF_NODE	75:1	75:1	8	unsigned
LEAF_NODE	75:10	75:10	8	short
NAME	75:16	75:16	6	width
LEAF_NODE	75:16	75:16	7	width
LEAF_NODE	75:21	75:21	5	;
LEAF_NODE	76:4	76:4	3	}
LEAF_NODE	76:6	76:6	3	WBarr
LEAF_NODE	76:11	76:11	3	[
LEAF_NODE	76:12	76:12	3	]
LEAF_NODE	76:14	76:14	3	=
LEAF_NODE	76:16	76:16	3	{
STATEMENTS	77:1	80:17	3	
LEAF_NODE	77:1	77:1	4	{
STATEMENTS	77:3	77:13	4	
LEAF_NODE	77:3	77:3	5	'd'
LEAF_NODE	77:6	77:6	5	,
LEAF_NODE	77:8	77:8	5	'n'
LEAF_NODE	77:11	77:11	5	,
LEAF_NODE	77:13	77:13	5	512
LEAF_NODE	77:17	77:17	4	}
LEAF_NODE	77:18	77:18	4	,
LEAF_NODE	77:20	77:20	4	{
STATEMENTS	77:22	77:32	4	
LEAF_NODE	77:22	77:22	5	'e'
LEAF_NODE	77:25	77:25	5	,
LEAF_NODE	77:27	77:27	5	'o'
LEAF_NODE	77:30	77:30	5	,
LEAF_NODE	77:32	77:32	5	256
LEAF_NODE	77:36	77:36	4	}
LEAF_NODE	77:37	77:37	4	,
LEAF_NODE	77:39	77:39	4	{
STATEMENTS	77:41	77:51	4	
LEAF_NODE	77:41	77:41	5	'f'
LEAF_NODE	77:44	77:44	5	,
LEAF_NODE	77:46	77:46	5	'p'
LEAF_NODE	77:49	77:49	5	,
LEAF_NODE	77:51	77:51	5	128
LEAF_NODE	77:55	77:55	4	}
LEAF_NODE	77:56	77:56	4	,
LEAF_NODE	78:1	78:1	4	{
STATEMENTS	78:3	78:14	4	
LEAF_NODE	78:3	78:3	5	'g'
LEAF_NODE	78:6	78:6	5	,
LEAF_NODE	78:8	78:8	5	'q'
LEAF_NODE	78:11	78:11	5	,
LEAF_NODE	78:14	78:14	5	64
LEAF_NODE	78:17	78:17	4	}
LEAF_NODE	78:18	78:18	4	,
LEAF_NODE	78:20	78:20	4	{
STATEMENTS	78:22	78:33	4	
LEAF_NODE	78:22	78:22	5	'h'
LEAF_NODE	78:25	78:25	5	,
LEAF_NODE	78:27	78:27	5	'r'
LEAF_NODE	78:30	78:30	5	,
LEAF_NODE	78:33	78:33	5	32
LEAF_NODE	78:36	78:36	4	}
LEAF_NODE	78:37	78:37	4	,
LEAF_NODE	78:39	78:39	4	{
STATEMENTS	78:41	78:52	4	
LEAF_NODE	78:41	78:41	5	'i'
LEAF_NODE	78:44	78:44	5	,
LEAF_NODE	78:46	78:46	5	's'
LEAF_NODE	78:49	78:49	5	,
LEAF_NODE	78:52	78:52	5	16
LEAF_NODE	78:55	78:55	4	}
LEAF_NODE	78:56	78:56	4	,
LEAF_NODE	79:1	79:1	4	{
STATEMENTS	79:3	79:15	4	
LEAF_NODE	79:3	79:3	5	'j'
LEAF_NODE	79:6	79:6	5	,
LEAF_NODE	79:8	79:8	5	't'
LEAF_NODE	79:11	79:11	5	,
LEAF_NODE	79:15	79:15	5	8
LEAF_NODE	79:17	79:17	4	}
LEAF_NODE	79:18	79:18	4	,
LEAF_NODE	79:20	79:20	4	{
STATEMENTS	79:22	79:34	4	
LEAF_NODE	79:22	79:22	5	'k'
LEAF_NODE	79:25	79:25	5	,
LEAF_NODE	79:27	79:27	5	'u'
LEAF_NODE	79:30	79:30	5	,
LEAF_NODE	79:34	79:34	5	4
LEAF_NODE	79:36	79:36	4	}
LEAF_NODE	79:37	79:37	4	,
LEAF_NODE	79:39	79:39	4	{
STATEMENTS	79:41	79:53	4	
LEAF_NODE	79:41	79:41	5	'l'
LEAF_NODE	79:44	79:44	5	,
LEAF_NODE	79:46	79:46	5	'v'
LEAF_NODE	79:49	79:49	5	,
LEAF_NODE	79:53	79:53	5	2
LEAF_NODE	79:55	79:55	4	}
LEAF_NODE	79:56	79:56	4	,
LEAF_NODE	80:1	80:1	4	{
STATEMENTS	80:3	80:15	4	
LEAF_NODE	80:3	80:3	5	'm'
LEAF_NODE	80:6	80:6	5	,
LEAF_NODE	80:8	80:8	5	'w'
LEAF_NODE	80:11	80:11	5	,
LEAF_NODE	80:15	80:15	5	1
LEAF_NODE	80:17	80:17	4	}
LEAF_NODE	81:4	81:4	3	}
LEAF_NODE	81:5	81:5	3	;
LEAF_NODE	82:4	82:4	3	static
SIMPLE_DECL	82:11	83:68	3	char * svalue ; svalue = " !\"#$&'*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abc" ;
VAR_DECL	82:11	82:17	4	char * svalue ; svalue = " !\"#$&'*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abc"
TYPE	82:11	82:15	5	char *
TYPE_NAME	82:11	82:11	6	char
LEAF_NODE	82:11	82:11	7	char
POINTER	82:15	82:15	6	*
LEAF_NODE	82:15	82:15	7	*
NAME	82:17	82:17	5	svalue
LEAF_NODE	82:17	82:17	6	svalue
LEAF_NODE	0:0	0:0	5	;
INIT	82:17	82:17	5	svalue = " !\"#$&'*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abc"
ASSIGN	82:17	83:1	6	svalue = " !\"#$&'*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abc"
LVAL	82:17	82:17	7	svalue
NAME	82:17	82:17	8	svalue
LEAF_NODE	82:17	82:17	9	svalue
ASSIGN_OP	82:24	82:24	7	=
LEAF_NODE	82:24	82:24	8	=
RVAL	83:1	83:1	7	" !\"#$&'*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abc"
FIELD	83:1	83:1	8	" !\"#$&'*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abc"
LEAF_NODE	83:1	83:1	9	" !\"#$&'*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abc"
LEAF_NODE	83:68	83:68	4	;
SIMPLE_DECL	84:4	84:21	3	int colormode ; colormode = 1 ;
VAR_DECL	84:4	84:8	4	int colormode ; colormode = 1
TYPE	84:4	84:4	5	int
TYPE_NAME	84:4	84:4	6	int
LEAF_NODE	84:4	84:4	7	int
NAME	84:8	84:8	5	colormode
LEAF_NODE	84:8	84:8	6	colormode
LEAF_NODE	0:0	0:0	5	;
INIT	84:8	84:8	5	colormode = 1
ASSIGN	84:8	84:20	6	colormode = 1
LVAL	84:8	84:8	7	colormode
NAME	84:8	84:8	8	colormode
LEAF_NODE	84:8	84:8	9	colormode
ASSIGN_OP	84:18	84:18	7	=
LEAF_NODE	84:18	84:18	8	=
RVAL	84:20	84:20	7	1
FIELD	84:20	84:20	8	1
LEAF_NODE	84:20	84:20	9	1
LEAF_NODE	84:21	84:21	4	;
SIMPLE_DECL	85:4	85:24	3	uint32 runlength ; runlength = 0 ;
VAR_DECL	85:4	85:11	4	uint32 runlength ; runlength = 0
TYPE	85:4	85:4	5	uint32
TYPE_NAME	85:4	85:4	6	uint32
LEAF_NODE	85:4	85:4	7	uint32
NAME	85:11	85:11	5	runlength
LEAF_NODE	85:11	85:11	6	runlength
LEAF_NODE	0:0	0:0	5	;
INIT	85:11	85:11	5	runlength = 0
ASSIGN	85:11	85:23	6	runlength = 0
LVAL	85:11	85:11	7	runlength
NAME	85:11	85:11	8	runlength
LEAF_NODE	85:11	85:11	9	runlength
ASSIGN_OP	85:21	85:21	7	=
LEAF_NODE	85:21	85:21	8	=
RVAL	85:23	85:23	7	0
FIELD	85:23	85:23	8	0
LEAF_NODE	85:23	85:23	9	0
LEAF_NODE	85:24	85:24	4	;
SIMPLE_DECL	86:4	86:19	3	int n ; n = maxline ;
VAR_DECL	86:4	86:8	4	int n ; n = maxline
TYPE	86:4	86:4	5	int
TYPE_NAME	86:4	86:4	6	int
LEAF_NODE	86:4	86:4	7	int
NAME	86:8	86:8	5	n
LEAF_NODE	86:8	86:8	6	n
LEAF_NODE	0:0	0:0	5	;
INIT	86:8	86:8	5	n = maxline
ASSIGN	86:8	86:12	6	n = maxline
LVAL	86:8	86:8	7	n
NAME	86:8	86:8	8	n
LEAF_NODE	86:8	86:8	9	n
ASSIGN_OP	86:10	86:10	7	=
LEAF_NODE	86:10	86:10	8	=
RVAL	86:12	86:12	7	maxline
FIELD	86:12	86:12	8	maxline
LEAF_NODE	86:12	86:12	9	maxline
LEAF_NODE	86:19	86:19	4	;
SIMPLE_DECL	87:4	87:16	3	uint32 x ; x = 0 ;
VAR_DECL	87:4	87:11	4	uint32 x ; x = 0
TYPE	87:4	87:4	5	uint32
TYPE_NAME	87:4	87:4	6	uint32
LEAF_NODE	87:4	87:4	7	uint32
NAME	87:11	87:11	5	x
LEAF_NODE	87:11	87:11	6	x
LEAF_NODE	0:0	0:0	5	;
INIT	87:11	87:11	5	x = 0
ASSIGN	87:11	87:15	6	x = 0
LVAL	87:11	87:11	7	x
NAME	87:11	87:11	8	x
LEAF_NODE	87:11	87:11	9	x
ASSIGN_OP	87:13	87:13	7	=
LEAF_NODE	87:13	87:13	8	=
RVAL	87:15	87:15	7	0
FIELD	87:15	87:15	8	0
LEAF_NODE	87:15	87:15	9	0
LEAF_NODE	87:16	87:16	4	;
SIMPLE_DECL	88:4	88:9	3	int l ;
VAR_DECL	88:4	88:8	4	int l
TYPE	88:4	88:4	5	int
TYPE_NAME	88:4	88:4	6	int
LEAF_NODE	88:4	88:4	7	int
NAME	88:8	88:8	5	l
LEAF_NODE	88:8	88:8	6	l
LEAF_NODE	88:9	88:9	4	;
EXPR_STATEMENT	90:4	90:14	3	( void ) buf ;
EXPR	90:4	90:11	4	( void ) buf
LEAF_NODE	90:4	90:4	5	(
TYPE_NAME	90:5	90:5	5	void
LEAF_NODE	90:5	90:5	6	void
LEAF_NODE	90:9	90:9	5	)
FIELD	90:11	90:11	5	buf
LEAF_NODE	90:11	90:11	6	buf
LEAF_NODE	90:14	90:14	4	;
EXPR_STATEMENT	91:4	91:26	3	printf ( "%d m(" , row ++ ) ;
EXPR	91:4	91:4	4	printf ( "%d m(" , row ++ )
FUNCTION_CALL	91:4	91:25	5	printf ( "%d m(" , row ++ )
CALLEE	91:4	91:4	6	printf
LEAF_NODE	91:4	91:4	7	printf
LEAF_NODE	91:10	91:10	6	(
ARGUMENT	91:11	91:11	6	"%d m("
FIELD	91:11	91:11	7	"%d m("
LEAF_NODE	91:11	91:11	8	"%d m("
LEAF_NODE	91:18	91:18	6	,
ARGUMENT	91:20	91:20	6	row ++
FIELD	91:20	91:23	7	row ++
LEAF_NODE	91:20	91:20	8	row
LEAF_NODE	91:23	91:23	8	++
LEAF_NODE	91:25	91:25	6	)
LEAF_NODE	91:26	91:26	4	;
ITERATION	92:4	92:24	3	
KEYWORD	92:4	92:4	4	while
LEAF_NODE	92:4	92:4	5	while
LEAF_NODE	92:10	92:10	4	(
CONDITION	92:11	92:11	4	runs < erun
EXPR	92:11	92:18	5	runs < erun
FIELD	92:11	92:11	6	runs
LEAF_NODE	92:11	92:11	7	runs
REL_OPERATOR	92:16	92:16	6	<
LEAF_NODE	92:16	92:16	7	<
FIELD	92:18	92:18	6	erun
LEAF_NODE	92:18	92:18	7	erun
LEAF_NODE	92:22	92:22	4	)
STATEMENTS	92:24	155:4	4	
LEAF_NODE	92:24	92:24	5	{
STATEMENTS	93:1	124:1	5	
SELECTION	93:1	93:21	6	
KEYWORD	93:1	93:1	7	if
LEAF_NODE	93:1	93:1	8	if
LEAF_NODE	93:4	93:4	7	(
CONDITION	93:5	93:5	7	runlength <= 0
EXPR	93:5	93:18	8	runlength <= 0
FIELD	93:5	93:5	9	runlength
LEAF_NODE	93:5	93:5	10	runlength
REL_OPERATOR	93:15	93:15	9	<=
LEAF_NODE	93:15	93:15	10	<=
FIELD	93:18	93:18	9	0
LEAF_NODE	93:18	93:18	10	0
LEAF_NODE	93:19	93:19	7	)
STATEMENTS	93:21	101:1	7	
LEAF_NODE	93:21	93:21	8	{
STATEMENTS	94:5	99:5	8	
EXPR_STATEMENT	94:5	94:19	9	colormode ^= 1 ;
EXPR	94:5	94:5	10	colormode ^= 1
ASSIGN	94:5	94:18	11	colormode ^= 1
LVAL	94:5	94:5	12	colormode
FIELD	94:5	94:5	13	colormode
LEAF_NODE	94:5	94:5	14	colormode
ASSIGN_OP	94:15	94:15	12	^=
LEAF_NODE	94:15	94:15	13	^=
RVAL	94:18	94:18	12	1
FIELD	94:18	94:18	13	1
LEAF_NODE	94:18	94:18	14	1
LEAF_NODE	94:19	94:19	10	;
EXPR_STATEMENT	95:5	95:24	9	runlength = * runs ++ ;
EXPR	95:5	95:5	10	runlength = * runs ++
ASSIGN	95:5	95:17	11	runlength = * runs ++
LVAL	95:5	95:5	12	runlength
FIELD	95:5	95:5	13	runlength
LEAF_NODE	95:5	95:5	14	runlength
ASSIGN_OP	95:15	95:15	12	=
LEAF_NODE	95:15	95:15	13	=
RVAL	95:17	95:17	12	* runs ++
UNARY_EXPR	95:17	95:18	13	* runs ++
UNARY_OPERATOR	95:17	95:17	14	*
LEAF_NODE	95:17	95:17	15	*
FIELD	95:18	95:22	14	runs ++
LEAF_NODE	95:18	95:18	15	runs
LEAF_NODE	95:22	95:22	15	++
LEAF_NODE	95:24	95:24	10	;
SELECTION	96:5	97:2	9	
KEYWORD	96:5	96:5	10	if
LEAF_NODE	96:5	96:5	11	if
LEAF_NODE	96:8	96:8	10	(
CONDITION	96:9	96:9	10	x + runlength > lastx
EXPR	96:9	96:23	11	x + runlength > lastx
FIELD	96:9	96:9	12	x
LEAF_NODE	96:9	96:9	13	x
LEAF_NODE	96:10	96:10	12	+
FIELD	96:11	96:11	12	runlength
LEAF_NODE	96:11	96:11	13	runlength
REL_OPERATOR	96:21	96:21	12	>
LEAF_NODE	96:21	96:21	13	>
FIELD	96:23	96:23	12	lastx
LEAF_NODE	96:23	96:23	13	lastx
LEAF_NODE	96:28	96:28	10	)
STATEMENTS	97:2	97:2	10	
EXPR_STATEMENT	97:2	97:32	11	runlength = runs [ - 1 ] = lastx - x ;
EXPR	97:2	97:2	12	runlength = runs [ - 1 ] = lastx - x
ASSIGN	97:2	97:14	13	runlength = runs [ - 1 ] = lastx - x
LVAL	97:2	97:2	14	runlength
FIELD	97:2	97:2	15	runlength
LEAF_NODE	97:2	97:2	16	runlength
ASSIGN_OP	97:12	97:12	14	=
LEAF_NODE	97:12	97:12	15	=
RVAL	97:14	97:14	14	runs [ - 1 ] = lastx - x
ASSIGN	97:14	97:25	15	runs [ - 1 ] = lastx - x
LVAL	97:14	97:14	16	runs [ - 1 ]
FIELD	97:14	97:21	17	runs [ - 1 ]
LEAF_NODE	97:14	97:14	18	runs
LEAF_NODE	97:18	97:18	18	[
EXPR	97:19	97:19	18	- 1
UNARY_EXPR	97:19	97:20	19	- 1
UNARY_OPERATOR	97:19	97:19	20	-
LEAF_NODE	97:19	97:19	21	-
FIELD	97:20	97:20	20	1
LEAF_NODE	97:20	97:20	21	1
LEAF_NODE	97:21	97:21	18	]
ASSIGN_OP	97:23	97:23	16	=
LEAF_NODE	97:23	97:23	17	=
RVAL	97:25	97:31	16	lastx - x
FIELD	97:25	97:25	17	lastx
LEAF_NODE	97:25	97:25	18	lastx
LEAF_NODE	97:30	97:30	17	-
FIELD	97:31	97:31	17	x
LEAF_NODE	97:31	97:31	18	x
LEAF_NODE	97:32	97:32	12	;
EXPR_STATEMENT	98:5	98:19	9	x += runlength ;
EXPR	98:5	98:5	10	x += runlength
ASSIGN	98:5	98:10	11	x += runlength
LVAL	98:5	98:5	12	x
FIELD	98:5	98:5	13	x
LEAF_NODE	98:5	98:5	14	x
ASSIGN_OP	98:7	98:7	12	+=
LEAF_NODE	98:7	98:7	13	+=
RVAL	98:10	98:10	12	runlength
FIELD	98:10	98:10	13	runlength
LEAF_NODE	98:10	98:10	14	runlength
LEAF_NODE	98:19	98:19	10	;
SELECTION	99:5	100:2	9	
KEYWORD	99:5	99:5	10	if
LEAF_NODE	99:5	99:5	11	if
LEAF_NODE	99:8	99:8	10	(
CONDITION	99:9	99:9	10	! colormode && runs == erun
EXPR	99:9	99:9	11	! colormode && runs == erun
AND	99:9	99:23	12	! colormode && runs == erun
EXPR	99:9	99:9	13	! colormode
UNARY_EXPR	99:9	99:10	14	! colormode
UNARY_OPERATOR	99:9	99:9	15	!
LEAF_NODE	99:9	99:9	16	!
FIELD	99:10	99:10	15	colormode
LEAF_NODE	99:10	99:10	16	colormode
LEAF_NODE	99:20	99:20	13	&&
EXPR	99:23	99:31	13	runs == erun
FIELD	99:23	99:23	14	runs
LEAF_NODE	99:23	99:23	15	runs
EQ_OPERATOR	99:28	99:28	14	==
LEAF_NODE	99:28	99:28	15	==
FIELD	99:31	99:31	14	erun
LEAF_NODE	99:31	99:31	15	erun
LEAF_NODE	99:35	99:35	10	)
STATEMENTS	100:2	100:2	10	
JUMP_STATEMENT	100:2	100:7	11	break DESTINATION ;
KEYWORD	100:2	100:2	12	break
LEAF_NODE	100:2	100:2	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	100:7	100:7	12	;
LEAF_NODE	101:1	101:1	8	}
EXPR_STATEMENT	112:1	112:6	6	l = 0 ;
EXPR	112:1	112:1	7	l = 0
ASSIGN	112:1	112:5	8	l = 0
LVAL	112:1	112:1	9	l
FIELD	112:1	112:1	10	l
LEAF_NODE	112:1	112:1	11	l
ASSIGN_OP	112:3	112:3	9	=
LEAF_NODE	112:3	112:3	10	=
RVAL	112:5	112:5	9	0
FIELD	112:5	112:5	10	0
LEAF_NODE	112:5	112:5	11	0
LEAF_NODE	112:6	112:6	7	;
ITERATION	113:1	113:23	6	
KEYWORD	113:1	113:1	7	while
LEAF_NODE	113:1	113:1	8	while
LEAF_NODE	113:7	113:7	7	(
CONDITION	113:8	113:8	7	runlength > 6
EXPR	113:8	113:20	8	runlength > 6
FIELD	113:8	113:8	9	runlength
LEAF_NODE	113:8	113:8	10	runlength
REL_OPERATOR	113:18	113:18	9	>
LEAF_NODE	113:18	113:18	10	>
FIELD	113:20	113:20	9	6
LEAF_NODE	113:20	113:20	10	6
LEAF_NODE	113:21	113:21	7	)
STATEMENTS	113:23	123:1	7	
LEAF_NODE	113:23	113:23	8	{
STATEMENTS	114:5	121:7	8	
SELECTION	114:5	114:38	9	
KEYWORD	114:5	114:5	10	if
LEAF_NODE	114:5	114:5	11	if
LEAF_NODE	114:8	114:8	10	(
CONDITION	114:9	114:9	10	runlength >= WBarr [ l ] . width
EXPR	114:9	114:22	11	runlength >= WBarr [ l ] . width
FIELD	114:9	114:9	12	runlength
LEAF_NODE	114:9	114:9	13	runlength
REL_OPERATOR	114:19	114:19	12	>=
LEAF_NODE	114:19	114:19	13	>=
FIELD	114:22	114:31	12	WBarr [ l ] . width
LEAF_NODE	114:22	114:22	13	WBarr
LEAF_NODE	114:27	114:27	13	[
EXPR	114:28	114:28	13	l
FIELD	114:28	114:28	14	l
LEAF_NODE	114:28	114:28	15	l
LEAF_NODE	114:29	114:29	13	]
LEAF_NODE	114:30	114:30	13	.
LEAF_NODE	114:31	114:31	13	width
LEAF_NODE	114:36	114:36	10	)
STATEMENTS	114:38	121:5	10	
LEAF_NODE	114:38	114:38	11	{
STATEMENTS	115:2	120:2	11	
SELECTION	115:2	115:14	12	
KEYWORD	115:2	115:2	13	if
LEAF_NODE	115:2	115:2	14	if
LEAF_NODE	115:5	115:5	13	(
CONDITION	115:6	115:6	13	n == 0
EXPR	115:6	115:11	14	n == 0
FIELD	115:6	115:6	15	n
LEAF_NODE	115:6	115:6	16	n
EQ_OPERATOR	115:8	115:8	15	==
LEAF_NODE	115:8	115:8	16	==
FIELD	115:11	115:11	15	0
LEAF_NODE	115:11	115:11	16	0
LEAF_NODE	115:12	115:12	13	)
STATEMENTS	115:14	118:2	13	
LEAF_NODE	115:14	115:14	14	{
STATEMENTS	116:6	117:6	14	
EXPR_STATEMENT	116:6	116:19	15	putchar ( '\n' ) ;
EXPR	116:6	116:6	16	putchar ( '\n' )
FUNCTION_CALL	116:6	116:18	17	putchar ( '\n' )
CALLEE	116:6	116:6	18	putchar
LEAF_NODE	116:6	116:6	19	putchar
LEAF_NODE	116:13	116:13	18	(
ARGUMENT	116:14	116:14	18	'\n'
FIELD	116:14	116:14	19	'\n'
LEAF_NODE	116:14	116:14	20	'\n'
LEAF_NODE	116:18	116:18	18	)
LEAF_NODE	116:19	116:19	16	;
EXPR_STATEMENT	117:6	117:17	15	n = maxline ;
EXPR	117:6	117:6	16	n = maxline
ASSIGN	117:6	117:10	17	n = maxline
LVAL	117:6	117:6	18	n
FIELD	117:6	117:6	19	n
LEAF_NODE	117:6	117:6	20	n
ASSIGN_OP	117:8	117:8	18	=
LEAF_NODE	117:8	117:8	19	=
RVAL	117:10	117:10	18	maxline
FIELD	117:10	117:10	19	maxline
LEAF_NODE	117:10	117:10	20	maxline
LEAF_NODE	117:17	117:17	16	;
LEAF_NODE	118:2	118:2	14	}
EXPR_STATEMENT	119:2	119:59	12	putchar ( colormode ? WBarr [ l ] . black : WBarr [ l ] . white ) , n -- ;
EXPR	119:2	119:56	13	putchar ( colormode ? WBarr [ l ] . black : WBarr [ l ] . white ) , n --
FUNCTION_CALL	119:2	119:53	14	putchar ( colormode ? WBarr [ l ] . black : WBarr [ l ] . white )
CALLEE	119:2	119:2	15	putchar
LEAF_NODE	119:2	119:2	16	putchar
LEAF_NODE	119:9	119:9	15	(
ARGUMENT	119:10	119:10	15	colormode ? WBarr [ l ] . black : WBarr [ l ] . white
COND_EXPR	119:10	119:39	16	colormode ? WBarr [ l ] . black : WBarr [ l ] . white
CONDITION	119:10	119:10	17	colormode
FIELD	119:10	119:10	18	colormode
LEAF_NODE	119:10	119:10	19	colormode
LEAF_NODE	119:20	119:20	17	?
EXPR	119:22	119:22	17	WBarr [ l ] . black
FIELD	119:22	119:31	18	WBarr [ l ] . black
LEAF_NODE	119:22	119:22	19	WBarr
LEAF_NODE	119:27	119:27	19	[
EXPR	119:28	119:28	19	l
FIELD	119:28	119:28	20	l
LEAF_NODE	119:28	119:28	21	l
LEAF_NODE	119:29	119:29	19	]
LEAF_NODE	119:30	119:30	19	.
LEAF_NODE	119:31	119:31	19	black
LEAF_NODE	119:37	119:37	17	:
FIELD	119:39	119:48	17	WBarr [ l ] . white
LEAF_NODE	119:39	119:39	18	WBarr
LEAF_NODE	119:44	119:44	18	[
EXPR	119:45	119:45	18	l
FIELD	119:45	119:45	19	l
LEAF_NODE	119:45	119:45	20	l
LEAF_NODE	119:46	119:46	18	]
LEAF_NODE	119:47	119:47	18	.
LEAF_NODE	119:48	119:48	18	white
LEAF_NODE	119:53	119:53	15	)
LEAF_NODE	119:54	119:54	14	,
FIELD	119:56	119:57	14	n --
LEAF_NODE	119:56	119:56	15	n
LEAF_NODE	119:57	119:57	15	--
LEAF_NODE	119:59	119:59	13	;
EXPR_STATEMENT	120:2	120:29	12	runlength -= WBarr [ l ] . width ;
EXPR	120:2	120:2	13	runlength -= WBarr [ l ] . width
ASSIGN	120:2	120:15	14	runlength -= WBarr [ l ] . width
LVAL	120:2	120:2	15	runlength
FIELD	120:2	120:2	16	runlength
LEAF_NODE	120:2	120:2	17	runlength
ASSIGN_OP	120:12	120:12	15	-=
LEAF_NODE	120:12	120:12	16	-=
RVAL	120:15	120:15	15	WBarr [ l ] . width
FIELD	120:15	120:24	16	WBarr [ l ] . width
LEAF_NODE	120:15	120:15	17	WBarr
LEAF_NODE	120:20	120:20	17	[
EXPR	120:21	120:21	17	l
FIELD	120:21	120:21	18	l
LEAF_NODE	120:21	120:21	19	l
LEAF_NODE	120:22	120:22	17	]
LEAF_NODE	120:23	120:23	17	.
LEAF_NODE	120:24	120:24	17	width
LEAF_NODE	120:29	120:29	13	;
LEAF_NODE	121:5	121:5	11	}
SELECTION	121:7	122:2	9	
KEYWORD	121:7	121:7	10	else
LEAF_NODE	121:7	121:7	11	else
STATEMENTS	122:2	122:2	10	
EXPR_STATEMENT	122:2	122:5	11	l ++ ;
EXPR	122:2	122:2	12	l ++
FIELD	122:2	122:3	13	l ++
LEAF_NODE	122:2	122:2	14	l
LEAF_NODE	122:3	122:3	14	++
LEAF_NODE	122:5	122:5	12	;
LEAF_NODE	123:1	123:1	8	}
ITERATION	124:1	124:41	6	
KEYWORD	124:1	124:1	7	while
LEAF_NODE	124:1	124:1	8	while
LEAF_NODE	124:7	124:7	7	(
CONDITION	124:8	124:8	7	runlength > 0 && runlength <= 6
EXPR	124:8	124:8	8	runlength > 0 && runlength <= 6
AND	124:8	124:25	9	runlength > 0 && runlength <= 6
EXPR	124:8	124:20	10	runlength > 0
FIELD	124:8	124:8	11	runlength
LEAF_NODE	124:8	124:8	12	runlength
REL_OPERATOR	124:18	124:18	11	>
LEAF_NODE	124:18	124:18	12	>
FIELD	124:20	124:20	11	0
LEAF_NODE	124:20	124:20	12	0
LEAF_NODE	124:22	124:22	10	&&
EXPR	124:25	124:38	10	runlength <= 6
FIELD	124:25	124:25	11	runlength
LEAF_NODE	124:25	124:25	12	runlength
REL_OPERATOR	124:35	124:35	11	<=
LEAF_NODE	124:35	124:35	12	<=
FIELD	124:38	124:38	11	6
LEAF_NODE	124:38	124:38	12	6
LEAF_NODE	124:39	124:39	7	)
STATEMENTS	124:41	154:1	7	
LEAF_NODE	124:41	124:41	8	{
STATEMENTS	125:5	153:5	8	
SIMPLE_DECL	125:5	125:24	9	uint32 bitsleft ; bitsleft = 6 ;
VAR_DECL	125:5	125:12	10	uint32 bitsleft ; bitsleft = 6
TYPE	125:5	125:5	11	uint32
TYPE_NAME	125:5	125:5	12	uint32
LEAF_NODE	125:5	125:5	13	uint32
NAME	125:12	125:12	11	bitsleft
LEAF_NODE	125:12	125:12	12	bitsleft
LEAF_NODE	0:0	0:0	11	;
INIT	125:12	125:12	11	bitsleft = 6
ASSIGN	125:12	125:23	12	bitsleft = 6
LVAL	125:12	125:12	13	bitsleft
NAME	125:12	125:12	14	bitsleft
LEAF_NODE	125:12	125:12	15	bitsleft
ASSIGN_OP	125:21	125:21	13	=
LEAF_NODE	125:21	125:21	14	=
RVAL	125:23	125:23	13	6
FIELD	125:23	125:23	14	6
LEAF_NODE	125:23	125:23	15	6
LEAF_NODE	125:24	125:24	10	;
SIMPLE_DECL	126:5	126:14	9	int t ; t = 0 ;
VAR_DECL	126:5	126:9	10	int t ; t = 0
TYPE	126:5	126:5	11	int
TYPE_NAME	126:5	126:5	12	int
LEAF_NODE	126:5	126:5	13	int
NAME	126:9	126:9	11	t
LEAF_NODE	126:9	126:9	12	t
LEAF_NODE	0:0	0:0	11	;
INIT	126:9	126:9	11	t = 0
ASSIGN	126:9	126:13	12	t = 0
LVAL	126:9	126:9	13	t
NAME	126:9	126:9	14	t
LEAF_NODE	126:9	126:9	15	t
ASSIGN_OP	126:11	126:11	13	=
LEAF_NODE	126:11	126:11	14	=
RVAL	126:13	126:13	13	0
FIELD	126:13	126:13	14	0
LEAF_NODE	126:13	126:13	15	0
LEAF_NODE	126:14	126:14	10	;
ITERATION	127:5	127:22	9	
KEYWORD	127:5	127:5	10	while
LEAF_NODE	127:5	127:5	11	while
LEAF_NODE	127:11	127:11	10	(
CONDITION	127:12	127:12	10	bitsleft
EXPR	127:12	127:12	11	bitsleft
FIELD	127:12	127:12	12	bitsleft
LEAF_NODE	127:12	127:12	13	bitsleft
LEAF_NODE	127:20	127:20	10	)
STATEMENTS	127:22	148:5	10	
LEAF_NODE	127:22	127:22	11	{
STATEMENTS	128:2	142:4	11	
SELECTION	128:2	128:29	12	
KEYWORD	128:2	128:2	13	if
LEAF_NODE	128:2	128:2	14	if
LEAF_NODE	128:5	128:5	13	(
CONDITION	128:6	128:6	13	runlength <= bitsleft
EXPR	128:6	128:19	14	runlength <= bitsleft
FIELD	128:6	128:6	15	runlength
LEAF_NODE	128:6	128:6	16	runlength
REL_OPERATOR	128:16	128:16	15	<=
LEAF_NODE	128:16	128:16	16	<=
FIELD	128:19	128:19	15	bitsleft
LEAF_NODE	128:19	128:19	16	bitsleft
LEAF_NODE	128:27	128:27	13	)
STATEMENTS	128:29	142:2	13	
LEAF_NODE	128:29	128:29	14	{
STATEMENTS	129:6	133:6	14	
SELECTION	129:6	130:3	15	
KEYWORD	129:6	129:6	16	if
LEAF_NODE	129:6	129:6	17	if
LEAF_NODE	129:9	129:9	16	(
CONDITION	129:10	129:10	16	colormode
EXPR	129:10	129:10	17	colormode
FIELD	129:10	129:10	18	colormode
LEAF_NODE	129:10	129:10	19	colormode
LEAF_NODE	129:19	129:19	16	)
STATEMENTS	130:3	130:3	16	
EXPR_STATEMENT	130:3	130:52	17	t |= ( ( 1 << runlength ) - 1 ) << ( bitsleft - runlength ) ;
EXPR	130:3	130:3	18	t |= ( ( 1 << runlength ) - 1 ) << ( bitsleft - runlength )
ASSIGN	130:3	130:8	19	t |= ( ( 1 << runlength ) - 1 ) << ( bitsleft - runlength )
LVAL	130:3	130:3	20	t
FIELD	130:3	130:3	21	t
LEAF_NODE	130:3	130:3	22	t
ASSIGN_OP	130:5	130:5	20	|=
LEAF_NODE	130:5	130:5	21	|=
RVAL	130:8	130:51	20	( ( 1 << runlength ) - 1 ) << ( bitsleft - runlength )
LEAF_NODE	130:8	130:8	21	(
LEAF_NODE	130:9	130:9	21	(
FIELD	130:10	130:10	21	1
LEAF_NODE	130:10	130:10	22	1
LEAF_NODE	130:12	130:12	21	<<
FIELD	130:15	130:15	21	runlength
LEAF_NODE	130:15	130:15	22	runlength
LEAF_NODE	130:24	130:24	21	)
LEAF_NODE	130:25	130:25	21	-
FIELD	130:26	130:26	21	1
LEAF_NODE	130:26	130:26	22	1
LEAF_NODE	130:27	130:27	21	)
LEAF_NODE	130:29	130:29	21	<<
LEAF_NODE	130:32	130:32	21	(
FIELD	130:33	130:33	21	bitsleft
LEAF_NODE	130:33	130:33	22	bitsleft
LEAF_NODE	130:41	130:41	21	-
FIELD	130:42	130:42	21	runlength
LEAF_NODE	130:42	130:42	22	runlength
LEAF_NODE	130:51	130:51	21	)
LEAF_NODE	130:52	130:52	18	;
EXPR_STATEMENT	131:6	131:27	15	bitsleft -= runlength ;
EXPR	131:6	131:6	16	bitsleft -= runlength
ASSIGN	131:6	131:18	17	bitsleft -= runlength
LVAL	131:6	131:6	18	bitsleft
FIELD	131:6	131:6	19	bitsleft
LEAF_NODE	131:6	131:6	20	bitsleft
ASSIGN_OP	131:15	131:15	18	-=
LEAF_NODE	131:15	131:15	19	-=
RVAL	131:18	131:18	18	runlength
FIELD	131:18	131:18	19	runlength
LEAF_NODE	131:18	131:18	20	runlength
LEAF_NODE	131:27	131:27	16	;
EXPR_STATEMENT	132:6	132:19	15	runlength = 0 ;
EXPR	132:6	132:6	16	runlength = 0
ASSIGN	132:6	132:18	17	runlength = 0
LVAL	132:6	132:6	18	runlength
FIELD	132:6	132:6	19	runlength
LEAF_NODE	132:6	132:6	20	runlength
ASSIGN_OP	132:16	132:16	18	=
LEAF_NODE	132:16	132:16	19	=
RVAL	132:18	132:18	18	0
FIELD	132:18	132:18	19	0
LEAF_NODE	132:18	132:18	20	0
LEAF_NODE	132:19	132:19	16	;
SELECTION	133:6	133:20	15	
KEYWORD	133:6	133:6	16	if
LEAF_NODE	133:6	133:6	17	if
LEAF_NODE	133:9	133:9	16	(
CONDITION	133:10	133:10	16	bitsleft
EXPR	133:10	133:10	17	bitsleft
FIELD	133:10	133:10	18	bitsleft
LEAF_NODE	133:10	133:10	19	bitsleft
LEAF_NODE	133:18	133:18	16	)
STATEMENTS	133:20	141:6	16	
LEAF_NODE	133:20	133:20	17	{
STATEMENTS	134:3	140:3	17	
SELECTION	134:3	135:7	18	
KEYWORD	134:3	134:3	19	if
LEAF_NODE	134:3	134:3	20	if
LEAF_NODE	134:6	134:6	19	(
CONDITION	134:7	134:7	19	runs >= erun
EXPR	134:7	134:15	20	runs >= erun
FIELD	134:7	134:7	21	runs
LEAF_NODE	134:7	134:7	22	runs
REL_OPERATOR	134:12	134:12	21	>=
LEAF_NODE	134:12	134:12	22	>=
FIELD	134:15	134:15	21	erun
LEAF_NODE	134:15	134:15	22	erun
LEAF_NODE	134:19	134:19	19	)
STATEMENTS	135:7	135:7	19	
JUMP_STATEMENT	135:7	135:12	20	break DESTINATION ;
KEYWORD	135:7	135:7	21	break
LEAF_NODE	135:7	135:7	22	break
LEAF_NODE	0:0	0:0	21	DESTINATION
LEAF_NODE	135:12	135:12	21	;
EXPR_STATEMENT	136:3	136:17	18	colormode ^= 1 ;
EXPR	136:3	136:3	19	colormode ^= 1
ASSIGN	136:3	136:16	20	colormode ^= 1
LVAL	136:3	136:3	21	colormode
FIELD	136:3	136:3	22	colormode
LEAF_NODE	136:3	136:3	23	colormode
ASSIGN_OP	136:13	136:13	21	^=
LEAF_NODE	136:13	136:13	22	^=
RVAL	136:16	136:16	21	1
FIELD	136:16	136:16	22	1
LEAF_NODE	136:16	136:16	23	1
LEAF_NODE	136:17	136:17	19	;
EXPR_STATEMENT	137:3	137:22	18	runlength = * runs ++ ;
EXPR	137:3	137:3	19	runlength = * runs ++
ASSIGN	137:3	137:15	20	runlength = * runs ++
LVAL	137:3	137:3	21	runlength
FIELD	137:3	137:3	22	runlength
LEAF_NODE	137:3	137:3	23	runlength
ASSIGN_OP	137:13	137:13	21	=
LEAF_NODE	137:13	137:13	22	=
RVAL	137:15	137:15	21	* runs ++
UNARY_EXPR	137:15	137:16	22	* runs ++
UNARY_OPERATOR	137:15	137:15	23	*
LEAF_NODE	137:15	137:15	24	*
FIELD	137:16	137:20	23	runs ++
LEAF_NODE	137:16	137:16	24	runs
LEAF_NODE	137:20	137:20	24	++
LEAF_NODE	137:22	137:22	19	;
SELECTION	138:3	139:7	18	
KEYWORD	138:3	138:3	19	if
LEAF_NODE	138:3	138:3	20	if
LEAF_NODE	138:6	138:6	19	(
CONDITION	138:7	138:7	19	x + runlength > lastx
EXPR	138:7	138:21	20	x + runlength > lastx
FIELD	138:7	138:7	21	x
LEAF_NODE	138:7	138:7	22	x
LEAF_NODE	138:8	138:8	21	+
FIELD	138:9	138:9	21	runlength
LEAF_NODE	138:9	138:9	22	runlength
REL_OPERATOR	138:19	138:19	21	>
LEAF_NODE	138:19	138:19	22	>
FIELD	138:21	138:21	21	lastx
LEAF_NODE	138:21	138:21	22	lastx
LEAF_NODE	138:26	138:26	19	)
STATEMENTS	139:7	139:7	19	
EXPR_STATEMENT	139:7	139:37	20	runlength = runs [ - 1 ] = lastx - x ;
EXPR	139:7	139:7	21	runlength = runs [ - 1 ] = lastx - x
ASSIGN	139:7	139:19	22	runlength = runs [ - 1 ] = lastx - x
LVAL	139:7	139:7	23	runlength
FIELD	139:7	139:7	24	runlength
LEAF_NODE	139:7	139:7	25	runlength
ASSIGN_OP	139:17	139:17	23	=
LEAF_NODE	139:17	139:17	24	=
RVAL	139:19	139:19	23	runs [ - 1 ] = lastx - x
ASSIGN	139:19	139:30	24	runs [ - 1 ] = lastx - x
LVAL	139:19	139:19	25	runs [ - 1 ]
FIELD	139:19	139:26	26	runs [ - 1 ]
LEAF_NODE	139:19	139:19	27	runs
LEAF_NODE	139:23	139:23	27	[
EXPR	139:24	139:24	27	- 1
UNARY_EXPR	139:24	139:25	28	- 1
UNARY_OPERATOR	139:24	139:24	29	-
LEAF_NODE	139:24	139:24	30	-
FIELD	139:25	139:25	29	1
LEAF_NODE	139:25	139:25	30	1
LEAF_NODE	139:26	139:26	27	]
ASSIGN_OP	139:28	139:28	25	=
LEAF_NODE	139:28	139:28	26	=
RVAL	139:30	139:36	25	lastx - x
FIELD	139:30	139:30	26	lastx
LEAF_NODE	139:30	139:30	27	lastx
LEAF_NODE	139:35	139:35	26	-
FIELD	139:36	139:36	26	x
LEAF_NODE	139:36	139:36	27	x
LEAF_NODE	139:37	139:37	21	;
EXPR_STATEMENT	140:3	140:17	18	x += runlength ;
EXPR	140:3	140:3	19	x += runlength
ASSIGN	140:3	140:8	20	x += runlength
LVAL	140:3	140:3	21	x
FIELD	140:3	140:3	22	x
LEAF_NODE	140:3	140:3	23	x
ASSIGN_OP	140:5	140:5	21	+=
LEAF_NODE	140:5	140:5	22	+=
RVAL	140:8	140:8	21	runlength
FIELD	140:8	140:8	22	runlength
LEAF_NODE	140:8	140:8	23	runlength
LEAF_NODE	140:17	140:17	19	;
LEAF_NODE	141:6	141:6	17	}
LEAF_NODE	142:2	142:2	14	}
SELECTION	142:4	142:9	12	
KEYWORD	142:4	142:4	13	else
LEAF_NODE	142:4	142:4	14	else
STATEMENTS	142:9	147:2	13	
LEAF_NODE	142:9	142:9	14	{
STATEMENTS	143:6	146:6	14	
SELECTION	143:6	144:3	15	
KEYWORD	143:6	143:6	16	if
LEAF_NODE	143:6	143:6	17	if
LEAF_NODE	143:9	143:9	16	(
CONDITION	143:10	143:10	16	colormode
EXPR	143:10	143:10	17	colormode
FIELD	143:10	143:10	18	colormode
LEAF_NODE	143:10	143:10	19	colormode
LEAF_NODE	143:19	143:19	16	)
STATEMENTS	144:3	144:3	16	
EXPR_STATEMENT	144:3	144:27	17	t |= ( ( 1 << bitsleft ) - 1 ) ;
EXPR	144:3	144:3	18	t |= ( ( 1 << bitsleft ) - 1 )
ASSIGN	144:3	144:8	19	t |= ( ( 1 << bitsleft ) - 1 )
LVAL	144:3	144:3	20	t
FIELD	144:3	144:3	21	t
LEAF_NODE	144:3	144:3	22	t
ASSIGN_OP	144:5	144:5	20	|=
LEAF_NODE	144:5	144:5	21	|=
RVAL	144:8	144:26	20	( ( 1 << bitsleft ) - 1 )
LEAF_NODE	144:8	144:8	21	(
LEAF_NODE	144:9	144:9	21	(
FIELD	144:10	144:10	21	1
LEAF_NODE	144:10	144:10	22	1
LEAF_NODE	144:12	144:12	21	<<
FIELD	144:15	144:15	21	bitsleft
LEAF_NODE	144:15	144:15	22	bitsleft
LEAF_NODE	144:23	144:23	21	)
LEAF_NODE	144:24	144:24	21	-
FIELD	144:25	144:25	21	1
LEAF_NODE	144:25	144:25	22	1
LEAF_NODE	144:26	144:26	21	)
LEAF_NODE	144:27	144:27	18	;
EXPR_STATEMENT	145:6	145:27	15	runlength -= bitsleft ;
EXPR	145:6	145:6	16	runlength -= bitsleft
ASSIGN	145:6	145:19	17	runlength -= bitsleft
LVAL	145:6	145:6	18	runlength
FIELD	145:6	145:6	19	runlength
LEAF_NODE	145:6	145:6	20	runlength
ASSIGN_OP	145:16	145:16	18	-=
LEAF_NODE	145:16	145:16	19	-=
RVAL	145:19	145:19	18	bitsleft
FIELD	145:19	145:19	19	bitsleft
LEAF_NODE	145:19	145:19	20	bitsleft
LEAF_NODE	145:27	145:27	16	;
EXPR_STATEMENT	146:6	146:18	15	bitsleft = 0 ;
EXPR	146:6	146:6	16	bitsleft = 0
ASSIGN	146:6	146:17	17	bitsleft = 0
LVAL	146:6	146:6	18	bitsleft
FIELD	146:6	146:6	19	bitsleft
LEAF_NODE	146:6	146:6	20	bitsleft
ASSIGN_OP	146:15	146:15	18	=
LEAF_NODE	146:15	146:15	19	=
RVAL	146:17	146:17	18	0
FIELD	146:17	146:17	19	0
LEAF_NODE	146:17	146:17	20	0
LEAF_NODE	146:18	146:18	16	;
LEAF_NODE	147:2	147:2	14	}
LEAF_NODE	148:5	148:5	11	}
SELECTION	149:5	149:17	9	
KEYWORD	149:5	149:5	10	if
LEAF_NODE	149:5	149:5	11	if
LEAF_NODE	149:8	149:8	10	(
CONDITION	149:9	149:9	10	n == 0
EXPR	149:9	149:14	11	n == 0
FIELD	149:9	149:9	12	n
LEAF_NODE	149:9	149:9	13	n
EQ_OPERATOR	149:11	149:11	12	==
LEAF_NODE	149:11	149:11	13	==
FIELD	149:14	149:14	12	0
LEAF_NODE	149:14	149:14	13	0
LEAF_NODE	149:15	149:15	10	)
STATEMENTS	149:17	152:5	10	
LEAF_NODE	149:17	149:17	11	{
STATEMENTS	150:2	151:2	11	
EXPR_STATEMENT	150:2	150:15	12	putchar ( '\n' ) ;
EXPR	150:2	150:2	13	putchar ( '\n' )
FUNCTION_CALL	150:2	150:14	14	putchar ( '\n' )
CALLEE	150:2	150:2	15	putchar
LEAF_NODE	150:2	150:2	16	putchar
LEAF_NODE	150:9	150:9	15	(
ARGUMENT	150:10	150:10	15	'\n'
FIELD	150:10	150:10	16	'\n'
LEAF_NODE	150:10	150:10	17	'\n'
LEAF_NODE	150:14	150:14	15	)
LEAF_NODE	150:15	150:15	13	;
EXPR_STATEMENT	151:2	151:13	12	n = maxline ;
EXPR	151:2	151:2	13	n = maxline
ASSIGN	151:2	151:6	14	n = maxline
LVAL	151:2	151:2	15	n
FIELD	151:2	151:2	16	n
LEAF_NODE	151:2	151:2	17	n
ASSIGN_OP	151:4	151:4	15	=
LEAF_NODE	151:4	151:4	16	=
RVAL	151:6	151:6	15	maxline
FIELD	151:6	151:6	16	maxline
LEAF_NODE	151:6	151:6	17	maxline
LEAF_NODE	151:13	151:13	13	;
LEAF_NODE	152:5	152:5	11	}
EXPR_STATEMENT	153:5	153:28	9	putchar ( svalue [ t ] ) , n -- ;
EXPR	153:5	153:25	10	putchar ( svalue [ t ] ) , n --
FUNCTION_CALL	153:5	153:22	11	putchar ( svalue [ t ] )
CALLEE	153:5	153:5	12	putchar
LEAF_NODE	153:5	153:5	13	putchar
LEAF_NODE	153:12	153:12	12	(
ARGUMENT	153:13	153:13	12	svalue [ t ]
FIELD	153:13	153:21	13	svalue [ t ]
LEAF_NODE	153:13	153:13	14	svalue
LEAF_NODE	153:19	153:19	14	[
EXPR	153:20	153:20	14	t
FIELD	153:20	153:20	15	t
LEAF_NODE	153:20	153:20	16	t
LEAF_NODE	153:21	153:21	14	]
LEAF_NODE	153:22	153:22	12	)
LEAF_NODE	153:23	153:23	11	,
FIELD	153:25	153:26	11	n --
LEAF_NODE	153:25	153:25	12	n
LEAF_NODE	153:26	153:26	12	--
LEAF_NODE	153:28	153:28	10	;
LEAF_NODE	154:1	154:1	8	}
LEAF_NODE	155:4	155:4	5	}
EXPR_STATEMENT	156:4	156:18	3	printf ( ")s\n" ) ;
EXPR	156:4	156:4	4	printf ( ")s\n" )
FUNCTION_CALL	156:4	156:17	5	printf ( ")s\n" )
CALLEE	156:4	156:4	6	printf
LEAF_NODE	156:4	156:4	7	printf
LEAF_NODE	156:10	156:10	6	(
ARGUMENT	156:11	156:11	6	")s\n"
FIELD	156:11	156:11	7	")s\n"
LEAF_NODE	156:11	156:11	8	")s\n"
LEAF_NODE	156:17	156:17	6	)
LEAF_NODE	156:18	156:18	4	;
LEAF_NODE	157:0	157:0	2	}
FUNCTION_DEF	164:0	194:0	1	
RETURN_TYPE	164:0	164:7	2	static void
LEAF_NODE	164:0	164:0	3	static
TYPE_NAME	164:7	164:7	3	void
LEAF_NODE	164:7	164:7	4	void
FUNCTION_NAME	165:0	165:0	2	emitFont
LEAF_NODE	165:0	165:0	3	emitFont
PARAMETER_LIST	165:8	165:17	2	( FILE * fd )
LEAF_NODE	165:8	165:8	3	(
PARAMETER_DECL	165:9	165:15	3	FILE * fd
TYPE	165:9	165:13	4	FILE *
TYPE_NAME	165:9	165:9	5	FILE
LEAF_NODE	165:9	165:9	6	FILE
POINTER	165:13	165:13	5	*
LEAF_NODE	165:13	165:13	6	*
NAME	165:15	165:15	4	fd
LEAF_NODE	165:15	165:15	5	fd
LEAF_NODE	165:17	165:17	3	)
LEAF_NODE	166:0	166:0	2	{
STATEMENTS	167:4	192:4	2	
LEAF_NODE	167:4	167:4	3	static
LEAF_NODE	167:11	167:11	3	const
LEAF_NODE	167:17	167:17	3	char
LEAF_NODE	167:21	167:21	3	*
LEAF_NODE	167:23	167:23	3	fontPrologue
LEAF_NODE	167:35	167:35	3	[
LEAF_NODE	167:36	167:36	3	]
LEAF_NODE	167:38	167:38	3	=
LEAF_NODE	167:40	167:40	3	{
STATEMENTS	168:1	189:1	3	
LEAF_NODE	168:1	168:1	4	"/newfont 10 dict def newfont begin /FontType 3 def /FontMatrix [1"
LEAF_NODE	168:68	168:68	4	,
LEAF_NODE	169:1	169:1	4	"0 0 1 0 0] def /FontBBox [0 0 512 1] def /Encoding 256 array def"
LEAF_NODE	169:67	169:67	4	,
LEAF_NODE	170:1	170:1	4	"0 1 31{Encoding exch /255 put}for 120 1 255{Encoding exch /255"
LEAF_NODE	170:65	170:65	4	,
LEAF_NODE	171:1	171:1	4	"put}for Encoding 37 /255 put Encoding 40 /255 put Encoding 41 /255"
LEAF_NODE	171:69	171:69	4	,
LEAF_NODE	172:1	172:1	4	"put Encoding 92 /255 put /count 0 def /ls{Encoding exch count 3"
LEAF_NODE	172:66	172:66	4	,
LEAF_NODE	173:1	173:1	4	"string cvs cvn put /count count 1 add def}def 32 1 36{ls}for"
LEAF_NODE	173:63	173:63	4	,
LEAF_NODE	174:1	174:1	4	"38 1 39{ls}for 42 1 91{ls}for 93 1 99{ls}for /count 100"
LEAF_NODE	174:58	174:58	4	,
LEAF_NODE	175:1	175:1	4	"def 100 1 119{ls}for /CharDict 5 dict def CharDict begin /white"
LEAF_NODE	175:66	175:66	4	,
LEAF_NODE	176:1	176:1	4	"{dup 255 eq{pop}{1 dict begin 100 sub neg 512 exch bitshift"
LEAF_NODE	176:62	176:62	4	,
LEAF_NODE	177:1	177:1	4	"/cw exch def cw 0 0 0 cw 1 setcachedevice end}ifelse}def /black"
LEAF_NODE	177:66	177:66	4	,
LEAF_NODE	178:1	178:1	4	"{dup 255 eq{pop}{1 dict begin 110 sub neg 512 exch bitshift"
LEAF_NODE	178:62	178:62	4	,
LEAF_NODE	179:1	179:1	4	"/cw exch def cw 0 0 0 cw 1 setcachedevice 0 0 moveto cw 0 rlineto"
LEAF_NODE	179:68	179:68	4	,
LEAF_NODE	180:1	180:1	4	"0 1 rlineto cw neg 0 rlineto closepath fill end}ifelse}def /numbuild"
LEAF_NODE	180:71	180:71	4	,
LEAF_NODE	181:1	181:1	4	"{dup 255 eq{pop}{6 0 0 0 6 1 setcachedevice 0 1 5{0 moveto"
LEAF_NODE	181:61	181:61	4	,
LEAF_NODE	182:1	182:1	4	"dup 32 and 32 eq{1 0 rlineto 0 1 rlineto -1 0 rlineto closepath"
LEAF_NODE	182:66	182:66	4	,
LEAF_NODE	183:1	183:1	4	"fill newpath}if 1 bitshift}for pop}ifelse}def /.notdef {}"
LEAF_NODE	183:60	183:60	4	,
LEAF_NODE	184:1	184:1	4	"def /255 {}def end /BuildChar{exch begin dup 110 ge{Encoding"
LEAF_NODE	184:63	184:63	4	,
LEAF_NODE	185:1	185:1	4	"exch get 3 string cvs cvi CharDict /black get}{dup 100 ge {Encoding"
LEAF_NODE	185:70	185:70	4	,
LEAF_NODE	186:1	186:1	4	"exch get 3 string cvs cvi CharDict /white get}{Encoding exch get"
LEAF_NODE	186:67	186:67	4	,
LEAF_NODE	187:1	187:1	4	"3 string cvs cvi CharDict /numbuild get}ifelse}ifelse exec end"
LEAF_NODE	187:65	187:65	4	,
LEAF_NODE	188:1	188:1	4	"}def end /Bitfont newfont definefont 1 scalefont setfont"
LEAF_NODE	188:59	188:59	4	,
LEAF_NODE	189:1	189:1	4	NULL
LEAF_NODE	190:4	190:4	3	}
LEAF_NODE	190:5	190:5	3	;
SIMPLE_DECL	191:4	191:9	3	int i ;
VAR_DECL	191:4	191:8	4	int i
TYPE	191:4	191:4	5	int
TYPE_NAME	191:4	191:4	6	int
LEAF_NODE	191:4	191:4	7	int
NAME	191:8	191:8	5	i
LEAF_NODE	191:8	191:8	6	i
LEAF_NODE	191:9	191:9	4	;
ITERATION	192:4	193:1	3	
KEYWORD	192:4	192:4	4	for
LEAF_NODE	192:4	192:4	5	for
LEAF_NODE	192:8	192:8	4	(
FOR_INIT	192:9	192:14	4	i = 0 ;
EXPR	192:9	192:9	5	i = 0
ASSIGN	192:9	192:13	6	i = 0
LVAL	192:9	192:9	7	i
FIELD	192:9	192:9	8	i
LEAF_NODE	192:9	192:9	9	i
ASSIGN_OP	192:11	192:11	7	=
LEAF_NODE	192:11	192:11	8	=
RVAL	192:13	192:13	7	0
FIELD	192:13	192:13	8	0
LEAF_NODE	192:13	192:13	9	0
LEAF_NODE	192:14	192:14	5	;
CONDITION	192:16	192:16	4	fontPrologue [ i ] != NULL
EXPR	192:16	192:35	5	fontPrologue [ i ] != NULL
FIELD	192:16	192:30	6	fontPrologue [ i ]
LEAF_NODE	192:16	192:16	7	fontPrologue
LEAF_NODE	192:28	192:28	7	[
EXPR	192:29	192:29	7	i
FIELD	192:29	192:29	8	i
LEAF_NODE	192:29	192:29	9	i
LEAF_NODE	192:30	192:30	7	]
EQ_OPERATOR	192:32	192:32	6	!=
LEAF_NODE	192:32	192:32	7	!=
FIELD	192:35	192:35	6	NULL
LEAF_NODE	192:35	192:35	7	NULL
LEAF_NODE	192:39	192:39	4	;
FOR_EXPR	192:41	192:41	4	i ++
EXPR	192:41	192:41	5	i ++
FIELD	192:41	192:42	6	i ++
LEAF_NODE	192:41	192:41	7	i
LEAF_NODE	192:42	192:42	7	++
LEAF_NODE	192:44	192:44	4	)
STATEMENTS	193:1	193:1	4	
EXPR_STATEMENT	193:1	193:37	5	fprintf ( fd , "%s\n" , fontPrologue [ i ] ) ;
EXPR	193:1	193:1	6	fprintf ( fd , "%s\n" , fontPrologue [ i ] )
FUNCTION_CALL	193:1	193:36	7	fprintf ( fd , "%s\n" , fontPrologue [ i ] )
CALLEE	193:1	193:1	8	fprintf
LEAF_NODE	193:1	193:1	9	fprintf
LEAF_NODE	193:8	193:8	8	(
ARGUMENT	193:9	193:9	8	fd
FIELD	193:9	193:9	9	fd
LEAF_NODE	193:9	193:9	10	fd
LEAF_NODE	193:11	193:11	8	,
ARGUMENT	193:13	193:13	8	"%s\n"
FIELD	193:13	193:13	9	"%s\n"
LEAF_NODE	193:13	193:13	10	"%s\n"
LEAF_NODE	193:19	193:19	8	,
ARGUMENT	193:21	193:21	8	fontPrologue [ i ]
FIELD	193:21	193:35	9	fontPrologue [ i ]
LEAF_NODE	193:21	193:21	10	fontPrologue
LEAF_NODE	193:33	193:33	10	[
EXPR	193:34	193:34	10	i
FIELD	193:34	193:34	11	i
LEAF_NODE	193:34	193:34	12	i
LEAF_NODE	193:35	193:35	10	]
LEAF_NODE	193:36	193:36	8	)
LEAF_NODE	193:37	193:37	6	;
LEAF_NODE	194:0	194:0	2	}
FUNCTION_DEF	196:0	268:0	1	
RETURN_TYPE	196:0	196:0	2	void
TYPE_NAME	196:0	196:0	3	void
LEAF_NODE	196:0	196:0	4	void
FUNCTION_NAME	197:0	197:0	2	printTIF
LEAF_NODE	197:0	197:0	3	printTIF
PARAMETER_LIST	197:8	197:37	2	( TIFF * tif , uint16 pageNumber )
LEAF_NODE	197:8	197:8	3	(
PARAMETER_DECL	197:9	197:15	3	TIFF * tif
TYPE	197:9	197:13	4	TIFF *
TYPE_NAME	197:9	197:9	5	TIFF
LEAF_NODE	197:9	197:9	6	TIFF
POINTER	197:13	197:13	5	*
LEAF_NODE	197:13	197:13	6	*
NAME	197:15	197:15	4	tif
LEAF_NODE	197:15	197:15	5	tif
LEAF_NODE	197:18	197:18	3	,
PARAMETER_DECL	197:20	197:27	3	uint16 pageNumber
TYPE	197:20	197:20	4	uint16
TYPE_NAME	197:20	197:20	5	uint16
LEAF_NODE	197:20	197:20	6	uint16
NAME	197:27	197:27	4	pageNumber
LEAF_NODE	197:27	197:27	5	pageNumber
LEAF_NODE	197:37	197:37	3	)
LEAF_NODE	198:0	198:0	2	{
STATEMENTS	199:4	267:4	2	
SIMPLE_DECL	199:4	199:15	3	uint32 w , uint32 h ;
INIT_DECL_LIST	199:4	199:4	4	uint32 w , uint32 h
VAR_DECL	199:4	199:11	5	uint32 w
TYPE	199:4	199:4	6	uint32
TYPE_NAME	199:4	199:4	7	uint32
LEAF_NODE	199:4	199:4	8	uint32
NAME	199:11	199:11	6	w
LEAF_NODE	199:11	199:11	7	w
LEAF_NODE	199:12	199:12	5	,
VAR_DECL	199:4	199:14	5	uint32 h
TYPE	199:4	199:4	6	uint32
TYPE_NAME	199:4	199:4	7	uint32
LEAF_NODE	199:4	199:4	8	uint32
NAME	199:14	199:14	6	h
LEAF_NODE	199:14	199:14	7	h
LEAF_NODE	199:15	199:15	4	;
SIMPLE_DECL	200:4	200:28	3	uint16 unit , uint16 compression ;
INIT_DECL_LIST	200:4	200:4	4	uint16 unit , uint16 compression
VAR_DECL	200:4	200:11	5	uint16 unit
TYPE	200:4	200:4	6	uint16
TYPE_NAME	200:4	200:4	7	uint16
LEAF_NODE	200:4	200:4	8	uint16
NAME	200:11	200:11	6	unit
LEAF_NODE	200:11	200:11	7	unit
LEAF_NODE	200:15	200:15	5	,
VAR_DECL	200:4	200:17	5	uint16 compression
TYPE	200:4	200:4	6	uint16
TYPE_NAME	200:4	200:4	7	uint16
LEAF_NODE	200:4	200:4	8	uint16
NAME	200:17	200:17	6	compression
LEAF_NODE	200:17	200:17	7	compression
LEAF_NODE	200:28	200:28	4	;
SIMPLE_DECL	201:4	201:33	3	float xres , float yres , float scale ; scale = 1.0 ;
INIT_DECL_LIST	201:4	201:4	4	float xres , float yres , float scale ; scale = 1.0
VAR_DECL	201:4	201:10	5	float xres
TYPE	201:4	201:4	6	float
TYPE_NAME	201:4	201:4	7	float
LEAF_NODE	201:4	201:4	8	float
NAME	201:10	201:10	6	xres
LEAF_NODE	201:10	201:10	7	xres
LEAF_NODE	201:14	201:14	5	,
INIT_DECL_LIST	201:4	201:4	5	float yres , float scale ; scale = 1.0
VAR_DECL	201:4	201:16	6	float yres
TYPE	201:4	201:4	7	float
TYPE_NAME	201:4	201:4	8	float
LEAF_NODE	201:4	201:4	9	float
NAME	201:16	201:16	7	yres
LEAF_NODE	201:16	201:16	8	yres
LEAF_NODE	201:20	201:20	6	,
VAR_DECL	201:4	201:22	6	float scale ; scale = 1.0
TYPE	201:4	201:4	7	float
TYPE_NAME	201:4	201:4	8	float
LEAF_NODE	201:4	201:4	9	float
NAME	201:22	201:22	7	scale
LEAF_NODE	201:22	201:22	8	scale
LEAF_NODE	0:0	0:0	7	;
INIT	201:22	201:22	7	scale = 1.0
ASSIGN	201:22	201:30	8	scale = 1.0
LVAL	201:22	201:22	9	scale
NAME	201:22	201:22	10	scale
LEAF_NODE	201:22	201:22	11	scale
ASSIGN_OP	201:28	201:28	9	=
LEAF_NODE	201:28	201:28	10	=
RVAL	201:30	201:30	9	1.0
FIELD	201:30	201:30	10	1.0
LEAF_NODE	201:30	201:30	11	1.0
LEAF_NODE	201:33	201:33	4	;
SIMPLE_DECL	202:4	202:18	3	tstrip_t s , tstrip_t ns ;
INIT_DECL_LIST	202:4	202:4	4	tstrip_t s , tstrip_t ns
VAR_DECL	202:4	202:13	5	tstrip_t s
TYPE	202:4	202:4	6	tstrip_t
TYPE_NAME	202:4	202:4	7	tstrip_t
LEAF_NODE	202:4	202:4	8	tstrip_t
NAME	202:13	202:13	6	s
LEAF_NODE	202:13	202:13	7	s
LEAF_NODE	202:14	202:14	5	,
VAR_DECL	202:4	202:16	5	tstrip_t ns
TYPE	202:4	202:4	6	tstrip_t
TYPE_NAME	202:4	202:4	7	tstrip_t
LEAF_NODE	202:4	202:4	8	tstrip_t
NAME	202:16	202:16	6	ns
LEAF_NODE	202:16	202:16	7	ns
LEAF_NODE	202:18	202:18	4	;
SIMPLE_DECL	203:4	203:24	3	time_t creation_time ;
VAR_DECL	203:4	203:11	4	time_t creation_time
TYPE	203:4	203:4	5	time_t
TYPE_NAME	203:4	203:4	6	time_t
LEAF_NODE	203:4	203:4	7	time_t
NAME	203:11	203:11	5	creation_time
LEAF_NODE	203:11	203:11	6	creation_time
LEAF_NODE	203:24	203:24	4	;
EXPR_STATEMENT	205:4	205:46	3	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	205:4	205:4	4	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	205:4	205:45	5	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
CALLEE	205:4	205:4	6	TIFFGetField
LEAF_NODE	205:4	205:4	7	TIFFGetField
LEAF_NODE	205:16	205:16	6	(
ARGUMENT	205:17	205:17	6	tif
FIELD	205:17	205:17	7	tif
LEAF_NODE	205:17	205:17	8	tif
LEAF_NODE	205:20	205:20	6	,
ARGUMENT	205:22	205:22	6	TIFFTAG_IMAGELENGTH
FIELD	205:22	205:22	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	205:22	205:22	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	205:41	205:41	6	,
ARGUMENT	205:43	205:43	6	& h
UNARY_EXPR	205:43	205:44	7	& h
UNARY_OPERATOR	205:43	205:43	8	&
LEAF_NODE	205:43	205:43	9	&
FIELD	205:44	205:44	8	h
LEAF_NODE	205:44	205:44	9	h
LEAF_NODE	205:45	205:45	6	)
LEAF_NODE	205:46	205:46	4	;
EXPR_STATEMENT	206:4	206:45	3	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w ) ;
EXPR	206:4	206:4	4	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
FUNCTION_CALL	206:4	206:44	5	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
CALLEE	206:4	206:4	6	TIFFGetField
LEAF_NODE	206:4	206:4	7	TIFFGetField
LEAF_NODE	206:16	206:16	6	(
ARGUMENT	206:17	206:17	6	tif
FIELD	206:17	206:17	7	tif
LEAF_NODE	206:17	206:17	8	tif
LEAF_NODE	206:20	206:20	6	,
ARGUMENT	206:22	206:22	6	TIFFTAG_IMAGEWIDTH
FIELD	206:22	206:22	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	206:22	206:22	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	206:40	206:40	6	,
ARGUMENT	206:42	206:42	6	& w
UNARY_EXPR	206:42	206:43	7	& w
UNARY_OPERATOR	206:42	206:42	8	&
LEAF_NODE	206:42	206:42	9	&
FIELD	206:43	206:43	8	w
LEAF_NODE	206:43	206:43	9	w
LEAF_NODE	206:44	206:44	6	)
LEAF_NODE	206:45	206:45	4	;
SELECTION	207:4	210:1	3	
KEYWORD	207:4	207:4	4	if
LEAF_NODE	207:4	207:4	5	if
LEAF_NODE	207:7	207:7	4	(
CONDITION	207:8	207:8	4	! TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compression ) || compression < COMPRESSION_CCITTRLE || compression > COMPRESSION_CCITT_T6
EXPR	207:8	207:8	5	! TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compression ) || compression < COMPRESSION_CCITTRLE || compression > COMPRESSION_CCITT_T6
OR	207:8	208:4	6	! TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compression ) || compression < COMPRESSION_CCITTRLE || compression > COMPRESSION_CCITT_T6
EXPR	207:8	207:8	7	! TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compression )
UNARY_EXPR	207:8	207:9	8	! TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compression )
UNARY_OPERATOR	207:8	207:8	9	!
LEAF_NODE	207:8	207:8	10	!
FUNCTION_CALL	207:9	207:60	9	TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compression )
CALLEE	207:9	207:9	10	TIFFGetField
LEAF_NODE	207:9	207:9	11	TIFFGetField
LEAF_NODE	207:21	207:21	10	(
ARGUMENT	207:22	207:22	10	tif
FIELD	207:22	207:22	11	tif
LEAF_NODE	207:22	207:22	12	tif
LEAF_NODE	207:25	207:25	10	,
ARGUMENT	207:27	207:27	10	TIFFTAG_COMPRESSION
FIELD	207:27	207:27	11	TIFFTAG_COMPRESSION
LEAF_NODE	207:27	207:27	12	TIFFTAG_COMPRESSION
LEAF_NODE	207:46	207:46	10	,
ARGUMENT	207:48	207:48	10	& compression
UNARY_EXPR	207:48	207:49	11	& compression
UNARY_OPERATOR	207:48	207:48	12	&
LEAF_NODE	207:48	207:48	13	&
FIELD	207:49	207:49	12	compression
LEAF_NODE	207:49	207:49	13	compression
LEAF_NODE	207:60	207:60	10	)
LEAF_NODE	208:1	208:1	7	||
EXPR	208:4	208:4	7	compression < COMPRESSION_CCITTRLE || compression > COMPRESSION_CCITT_T6
OR	208:4	209:4	8	compression < COMPRESSION_CCITTRLE || compression > COMPRESSION_CCITT_T6
EXPR	208:4	208:18	9	compression < COMPRESSION_CCITTRLE
FIELD	208:4	208:4	10	compression
LEAF_NODE	208:4	208:4	11	compression
REL_OPERATOR	208:16	208:16	10	<
LEAF_NODE	208:16	208:16	11	<
FIELD	208:18	208:18	10	COMPRESSION_CCITTRLE
LEAF_NODE	208:18	208:18	11	COMPRESSION_CCITTRLE
LEAF_NODE	209:1	209:1	9	||
EXPR	209:4	209:18	9	compression > COMPRESSION_CCITT_T6
FIELD	209:4	209:4	10	compression
LEAF_NODE	209:4	209:4	11	compression
REL_OPERATOR	209:16	209:16	10	>
LEAF_NODE	209:16	209:16	11	>
FIELD	209:18	209:18	10	COMPRESSION_CCITT_T6
LEAF_NODE	209:18	209:18	11	COMPRESSION_CCITT_T6
LEAF_NODE	209:38	209:38	4	)
STATEMENTS	210:1	210:1	4	
JUMP_STATEMENT	210:1	210:7	5	return DESTINATION ;
KEYWORD	210:1	210:1	6	return
LEAF_NODE	210:1	210:1	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	210:7	210:7	6	;
SELECTION	211:4	211:65	3	
KEYWORD	211:4	211:4	4	if
LEAF_NODE	211:4	211:4	5	if
LEAF_NODE	211:7	211:7	4	(
CONDITION	211:8	211:8	4	! TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres ) || ! xres
EXPR	211:8	211:8	5	! TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres ) || ! xres
OR	211:8	211:58	6	! TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres ) || ! xres
EXPR	211:8	211:8	7	! TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres )
UNARY_EXPR	211:8	211:9	8	! TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres )
UNARY_OPERATOR	211:8	211:8	9	!
LEAF_NODE	211:8	211:8	10	!
FUNCTION_CALL	211:9	211:53	9	TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres )
CALLEE	211:9	211:9	10	TIFFGetField
LEAF_NODE	211:9	211:9	11	TIFFGetField
LEAF_NODE	211:21	211:21	10	(
ARGUMENT	211:22	211:22	10	tif
FIELD	211:22	211:22	11	tif
LEAF_NODE	211:22	211:22	12	tif
LEAF_NODE	211:25	211:25	10	,
ARGUMENT	211:27	211:27	10	TIFFTAG_XRESOLUTION
FIELD	211:27	211:27	11	TIFFTAG_XRESOLUTION
LEAF_NODE	211:27	211:27	12	TIFFTAG_XRESOLUTION
LEAF_NODE	211:46	211:46	10	,
ARGUMENT	211:48	211:48	10	& xres
UNARY_EXPR	211:48	211:49	11	& xres
UNARY_OPERATOR	211:48	211:48	12	&
LEAF_NODE	211:48	211:48	13	&
FIELD	211:49	211:49	12	xres
LEAF_NODE	211:49	211:49	13	xres
LEAF_NODE	211:53	211:53	10	)
LEAF_NODE	211:55	211:55	7	||
EXPR	211:58	211:58	7	! xres
UNARY_EXPR	211:58	211:59	8	! xres
UNARY_OPERATOR	211:58	211:58	9	!
LEAF_NODE	211:58	211:58	10	!
FIELD	211:59	211:59	9	xres
LEAF_NODE	211:59	211:59	10	xres
LEAF_NODE	211:63	211:63	4	)
STATEMENTS	211:65	215:4	4	
LEAF_NODE	211:65	211:65	5	{
STATEMENTS	212:1	214:1	5	
EXPR_STATEMENT	212:1	213:49	6	TIFFWarning ( TIFFFileName ( tif ) , "No x-resolution, assuming %g dpi" , defxres ) ;
EXPR	212:1	212:1	7	TIFFWarning ( TIFFFileName ( tif ) , "No x-resolution, assuming %g dpi" , defxres )
FUNCTION_CALL	212:1	213:48	8	TIFFWarning ( TIFFFileName ( tif ) , "No x-resolution, assuming %g dpi" , defxres )
CALLEE	212:1	212:1	9	TIFFWarning
LEAF_NODE	212:1	212:1	10	TIFFWarning
LEAF_NODE	212:12	212:12	9	(
ARGUMENT	212:13	212:13	9	TIFFFileName ( tif )
FUNCTION_CALL	212:13	212:29	10	TIFFFileName ( tif )
CALLEE	212:13	212:13	11	TIFFFileName
LEAF_NODE	212:13	212:13	12	TIFFFileName
LEAF_NODE	212:25	212:25	11	(
ARGUMENT	212:26	212:26	11	tif
FIELD	212:26	212:26	12	tif
LEAF_NODE	212:26	212:26	13	tif
LEAF_NODE	212:29	212:29	11	)
LEAF_NODE	212:30	212:30	9	,
ARGUMENT	213:5	213:5	9	"No x-resolution, assuming %g dpi"
FIELD	213:5	213:5	10	"No x-resolution, assuming %g dpi"
LEAF_NODE	213:5	213:5	11	"No x-resolution, assuming %g dpi"
LEAF_NODE	213:39	213:39	9	,
ARGUMENT	213:41	213:41	9	defxres
FIELD	213:41	213:41	10	defxres
LEAF_NODE	213:41	213:41	11	defxres
LEAF_NODE	213:48	213:48	9	)
LEAF_NODE	213:49	213:49	7	;
EXPR_STATEMENT	214:1	214:15	6	xres = defxres ;
EXPR	214:1	214:1	7	xres = defxres
ASSIGN	214:1	214:8	8	xres = defxres
LVAL	214:1	214:1	9	xres
FIELD	214:1	214:1	10	xres
LEAF_NODE	214:1	214:1	11	xres
ASSIGN_OP	214:6	214:6	9	=
LEAF_NODE	214:6	214:6	10	=
RVAL	214:8	214:8	9	defxres
FIELD	214:8	214:8	10	defxres
LEAF_NODE	214:8	214:8	11	defxres
LEAF_NODE	214:15	214:15	7	;
LEAF_NODE	215:4	215:4	5	}
SELECTION	216:4	216:65	3	
KEYWORD	216:4	216:4	4	if
LEAF_NODE	216:4	216:4	5	if
LEAF_NODE	216:7	216:7	4	(
CONDITION	216:8	216:8	4	! TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres ) || ! yres
EXPR	216:8	216:8	5	! TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres ) || ! yres
OR	216:8	216:58	6	! TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres ) || ! yres
EXPR	216:8	216:8	7	! TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres )
UNARY_EXPR	216:8	216:9	8	! TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres )
UNARY_OPERATOR	216:8	216:8	9	!
LEAF_NODE	216:8	216:8	10	!
FUNCTION_CALL	216:9	216:53	9	TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres )
CALLEE	216:9	216:9	10	TIFFGetField
LEAF_NODE	216:9	216:9	11	TIFFGetField
LEAF_NODE	216:21	216:21	10	(
ARGUMENT	216:22	216:22	10	tif
FIELD	216:22	216:22	11	tif
LEAF_NODE	216:22	216:22	12	tif
LEAF_NODE	216:25	216:25	10	,
ARGUMENT	216:27	216:27	10	TIFFTAG_YRESOLUTION
FIELD	216:27	216:27	11	TIFFTAG_YRESOLUTION
LEAF_NODE	216:27	216:27	12	TIFFTAG_YRESOLUTION
LEAF_NODE	216:46	216:46	10	,
ARGUMENT	216:48	216:48	10	& yres
UNARY_EXPR	216:48	216:49	11	& yres
UNARY_OPERATOR	216:48	216:48	12	&
LEAF_NODE	216:48	216:48	13	&
FIELD	216:49	216:49	12	yres
LEAF_NODE	216:49	216:49	13	yres
LEAF_NODE	216:53	216:53	10	)
LEAF_NODE	216:55	216:55	7	||
EXPR	216:58	216:58	7	! yres
UNARY_EXPR	216:58	216:59	8	! yres
UNARY_OPERATOR	216:58	216:58	9	!
LEAF_NODE	216:58	216:58	10	!
FIELD	216:59	216:59	9	yres
LEAF_NODE	216:59	216:59	10	yres
LEAF_NODE	216:63	216:63	4	)
STATEMENTS	216:65	220:4	4	
LEAF_NODE	216:65	216:65	5	{
STATEMENTS	217:1	219:1	5	
EXPR_STATEMENT	217:1	218:49	6	TIFFWarning ( TIFFFileName ( tif ) , "No y-resolution, assuming %g lpi" , defyres ) ;
EXPR	217:1	217:1	7	TIFFWarning ( TIFFFileName ( tif ) , "No y-resolution, assuming %g lpi" , defyres )
FUNCTION_CALL	217:1	218:48	8	TIFFWarning ( TIFFFileName ( tif ) , "No y-resolution, assuming %g lpi" , defyres )
CALLEE	217:1	217:1	9	TIFFWarning
LEAF_NODE	217:1	217:1	10	TIFFWarning
LEAF_NODE	217:12	217:12	9	(
ARGUMENT	217:13	217:13	9	TIFFFileName ( tif )
FUNCTION_CALL	217:13	217:29	10	TIFFFileName ( tif )
CALLEE	217:13	217:13	11	TIFFFileName
LEAF_NODE	217:13	217:13	12	TIFFFileName
LEAF_NODE	217:25	217:25	11	(
ARGUMENT	217:26	217:26	11	tif
FIELD	217:26	217:26	12	tif
LEAF_NODE	217:26	217:26	13	tif
LEAF_NODE	217:29	217:29	11	)
LEAF_NODE	217:30	217:30	9	,
ARGUMENT	218:5	218:5	9	"No y-resolution, assuming %g lpi"
FIELD	218:5	218:5	10	"No y-resolution, assuming %g lpi"
LEAF_NODE	218:5	218:5	11	"No y-resolution, assuming %g lpi"
LEAF_NODE	218:39	218:39	9	,
ARGUMENT	218:41	218:41	9	defyres
FIELD	218:41	218:41	10	defyres
LEAF_NODE	218:41	218:41	11	defyres
LEAF_NODE	218:48	218:48	9	)
LEAF_NODE	218:49	218:49	7	;
EXPR_STATEMENT	219:1	219:15	6	yres = defyres ;
EXPR	219:1	219:1	7	yres = defyres
ASSIGN	219:1	219:8	8	yres = defyres
LVAL	219:1	219:1	9	yres
FIELD	219:1	219:1	10	yres
LEAF_NODE	219:1	219:1	11	yres
ASSIGN_OP	219:6	219:6	9	=
LEAF_NODE	219:6	219:6	10	=
RVAL	219:8	219:8	9	defyres
FIELD	219:8	219:8	10	defyres
LEAF_NODE	219:8	219:8	11	defyres
LEAF_NODE	219:15	219:15	7	;
LEAF_NODE	220:4	220:4	5	}
SELECTION	221:4	222:34	3	
KEYWORD	221:4	221:4	4	if
LEAF_NODE	221:4	221:4	5	if
LEAF_NODE	221:7	221:7	4	(
CONDITION	221:8	221:8	4	TIFFGetField ( tif , TIFFTAG_RESOLUTIONUNIT , & unit ) && unit == RESUNIT_CENTIMETER
EXPR	221:8	221:8	5	TIFFGetField ( tif , TIFFTAG_RESOLUTIONUNIT , & unit ) && unit == RESUNIT_CENTIMETER
AND	221:8	222:6	6	TIFFGetField ( tif , TIFFTAG_RESOLUTIONUNIT , & unit ) && unit == RESUNIT_CENTIMETER
EXPR	221:8	221:8	7	TIFFGetField ( tif , TIFFTAG_RESOLUTIONUNIT , & unit )
FUNCTION_CALL	221:8	221:55	8	TIFFGetField ( tif , TIFFTAG_RESOLUTIONUNIT , & unit )
CALLEE	221:8	221:8	9	TIFFGetField
LEAF_NODE	221:8	221:8	10	TIFFGetField
LEAF_NODE	221:20	221:20	9	(
ARGUMENT	221:21	221:21	9	tif
FIELD	221:21	221:21	10	tif
LEAF_NODE	221:21	221:21	11	tif
LEAF_NODE	221:24	221:24	9	,
ARGUMENT	221:26	221:26	9	TIFFTAG_RESOLUTIONUNIT
FIELD	221:26	221:26	10	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	221:26	221:26	11	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	221:48	221:48	9	,
ARGUMENT	221:50	221:50	9	& unit
UNARY_EXPR	221:50	221:51	10	& unit
UNARY_OPERATOR	221:50	221:50	11	&
LEAF_NODE	221:50	221:50	12	&
FIELD	221:51	221:51	11	unit
LEAF_NODE	221:51	221:51	12	unit
LEAF_NODE	221:55	221:55	9	)
LEAF_NODE	221:57	221:57	7	&&
EXPR	222:6	222:14	7	unit == RESUNIT_CENTIMETER
FIELD	222:6	222:6	8	unit
LEAF_NODE	222:6	222:6	9	unit
EQ_OPERATOR	222:11	222:11	8	==
LEAF_NODE	222:11	222:11	9	==
FIELD	222:14	222:14	8	RESUNIT_CENTIMETER
LEAF_NODE	222:14	222:14	9	RESUNIT_CENTIMETER
LEAF_NODE	222:32	222:32	4	)
STATEMENTS	222:34	225:4	4	
LEAF_NODE	222:34	222:34	5	{
STATEMENTS	223:1	224:1	5	
EXPR_STATEMENT	223:1	223:14	6	xres *= 2.54F ;
EXPR	223:1	223:1	7	xres *= 2.54F
ASSIGN	223:1	223:9	8	xres *= 2.54F
LVAL	223:1	223:1	9	xres
FIELD	223:1	223:1	10	xres
LEAF_NODE	223:1	223:1	11	xres
ASSIGN_OP	223:6	223:6	9	*=
LEAF_NODE	223:6	223:6	10	*=
RVAL	223:9	223:9	9	2.54F
FIELD	223:9	223:9	10	2.54F
LEAF_NODE	223:9	223:9	11	2.54F
LEAF_NODE	223:14	223:14	7	;
EXPR_STATEMENT	224:1	224:14	6	yres *= 2.54F ;
EXPR	224:1	224:1	7	yres *= 2.54F
ASSIGN	224:1	224:9	8	yres *= 2.54F
LVAL	224:1	224:1	9	yres
FIELD	224:1	224:1	10	yres
LEAF_NODE	224:1	224:1	11	yres
ASSIGN_OP	224:6	224:6	9	*=
LEAF_NODE	224:6	224:6	10	*=
RVAL	224:9	224:9	9	2.54F
FIELD	224:9	224:9	10	2.54F
LEAF_NODE	224:9	224:9	11	2.54F
LEAF_NODE	224:14	224:14	7	;
LEAF_NODE	225:4	225:4	5	}
SELECTION	226:4	227:1	3	
KEYWORD	226:4	226:4	4	if
LEAF_NODE	226:4	226:4	5	if
LEAF_NODE	226:7	226:7	4	(
CONDITION	226:8	226:8	4	pageWidth == 0
EXPR	226:8	226:21	5	pageWidth == 0
FIELD	226:8	226:8	6	pageWidth
LEAF_NODE	226:8	226:8	7	pageWidth
EQ_OPERATOR	226:18	226:18	6	==
LEAF_NODE	226:18	226:18	7	==
FIELD	226:21	226:21	6	0
LEAF_NODE	226:21	226:21	7	0
LEAF_NODE	226:22	226:22	4	)
STATEMENTS	227:1	227:1	4	
EXPR_STATEMENT	227:1	227:21	5	pageWidth = w / xres ;
EXPR	227:1	227:1	6	pageWidth = w / xres
ASSIGN	227:1	227:13	7	pageWidth = w / xres
LVAL	227:1	227:1	8	pageWidth
FIELD	227:1	227:1	9	pageWidth
LEAF_NODE	227:1	227:1	10	pageWidth
ASSIGN_OP	227:11	227:11	8	=
LEAF_NODE	227:11	227:11	9	=
RVAL	227:13	227:17	8	w / xres
FIELD	227:13	227:13	9	w
LEAF_NODE	227:13	227:13	10	w
LEAF_NODE	227:15	227:15	9	/
FIELD	227:17	227:17	9	xres
LEAF_NODE	227:17	227:17	10	xres
LEAF_NODE	227:21	227:21	6	;
SELECTION	228:4	229:1	3	
KEYWORD	228:4	228:4	4	if
LEAF_NODE	228:4	228:4	5	if
LEAF_NODE	228:7	228:7	4	(
CONDITION	228:8	228:8	4	pageHeight == 0
EXPR	228:8	228:22	5	pageHeight == 0
FIELD	228:8	228:8	6	pageHeight
LEAF_NODE	228:8	228:8	7	pageHeight
EQ_OPERATOR	228:19	228:19	6	==
LEAF_NODE	228:19	228:19	7	==
FIELD	228:22	228:22	6	0
LEAF_NODE	228:22	228:22	7	0
LEAF_NODE	228:23	228:23	4	)
STATEMENTS	229:1	229:1	4	
EXPR_STATEMENT	229:1	229:22	5	pageHeight = h / yres ;
EXPR	229:1	229:1	6	pageHeight = h / yres
ASSIGN	229:1	229:14	7	pageHeight = h / yres
LVAL	229:1	229:1	8	pageHeight
FIELD	229:1	229:1	9	pageHeight
LEAF_NODE	229:1	229:1	10	pageHeight
ASSIGN_OP	229:12	229:12	8	=
LEAF_NODE	229:12	229:12	9	=
RVAL	229:14	229:18	8	h / yres
FIELD	229:14	229:14	9	h
LEAF_NODE	229:14	229:14	10	h
LEAF_NODE	229:16	229:16	9	/
FIELD	229:18	229:18	9	yres
LEAF_NODE	229:18	229:18	10	yres
LEAF_NODE	229:22	229:22	6	;
EXPR_STATEMENT	231:4	231:31	3	printf ( "%%!PS-Adobe-3.0\n" ) ;
EXPR	231:4	231:4	4	printf ( "%%!PS-Adobe-3.0\n" )
FUNCTION_CALL	231:4	231:30	5	printf ( "%%!PS-Adobe-3.0\n" )
CALLEE	231:4	231:4	6	printf
LEAF_NODE	231:4	231:4	7	printf
LEAF_NODE	231:10	231:10	6	(
ARGUMENT	231:11	231:11	6	"%%!PS-Adobe-3.0\n"
FIELD	231:11	231:11	7	"%%!PS-Adobe-3.0\n"
LEAF_NODE	231:11	231:11	8	"%%!PS-Adobe-3.0\n"
LEAF_NODE	231:30	231:30	6	)
LEAF_NODE	231:31	231:31	4	;
EXPR_STATEMENT	232:4	232:35	3	printf ( "%%%%Creator: fax2ps\n" ) ;
EXPR	232:4	232:4	4	printf ( "%%%%Creator: fax2ps\n" )
FUNCTION_CALL	232:4	232:34	5	printf ( "%%%%Creator: fax2ps\n" )
CALLEE	232:4	232:4	6	printf
LEAF_NODE	232:4	232:4	7	printf
LEAF_NODE	232:10	232:10	6	(
ARGUMENT	232:11	232:11	6	"%%%%Creator: fax2ps\n"
FIELD	232:11	232:11	7	"%%%%Creator: fax2ps\n"
LEAF_NODE	232:11	232:11	8	"%%%%Creator: fax2ps\n"
LEAF_NODE	232:34	232:34	6	)
LEAF_NODE	232:35	232:35	4	;
EXPR_STATEMENT	234:4	234:35	3	printf ( "%%%%Title: %s\n" , file ) ;
EXPR	234:4	234:4	4	printf ( "%%%%Title: %s\n" , file )
FUNCTION_CALL	234:4	234:34	5	printf ( "%%%%Title: %s\n" , file )
CALLEE	234:4	234:4	6	printf
LEAF_NODE	234:4	234:4	7	printf
LEAF_NODE	234:10	234:10	6	(
ARGUMENT	234:11	234:11	6	"%%%%Title: %s\n"
FIELD	234:11	234:11	7	"%%%%Title: %s\n"
LEAF_NODE	234:11	234:11	8	"%%%%Title: %s\n"
LEAF_NODE	234:28	234:28	6	,
ARGUMENT	234:30	234:30	6	file
FIELD	234:30	234:30	7	file
LEAF_NODE	234:30	234:30	8	file
LEAF_NODE	234:34	234:34	6	)
LEAF_NODE	234:35	234:35	4	;
EXPR_STATEMENT	236:4	236:27	3	creation_time = time ( 0 ) ;
EXPR	236:4	236:4	4	creation_time = time ( 0 )
ASSIGN	236:4	236:20	5	creation_time = time ( 0 )
LVAL	236:4	236:4	6	creation_time
FIELD	236:4	236:4	7	creation_time
LEAF_NODE	236:4	236:4	8	creation_time
ASSIGN_OP	236:18	236:18	6	=
LEAF_NODE	236:18	236:18	7	=
RVAL	236:20	236:20	6	time ( 0 )
FUNCTION_CALL	236:20	236:26	7	time ( 0 )
CALLEE	236:20	236:20	8	time
LEAF_NODE	236:20	236:20	9	time
LEAF_NODE	236:24	236:24	8	(
ARGUMENT	236:25	236:25	8	0
FIELD	236:25	236:25	9	0
LEAF_NODE	236:25	236:25	10	0
LEAF_NODE	236:26	236:26	8	)
LEAF_NODE	236:27	236:27	4	;
EXPR_STATEMENT	237:4	237:57	3	printf ( "%%%%CreationDate: %s" , ctime ( & creation_time ) ) ;
EXPR	237:4	237:4	4	printf ( "%%%%CreationDate: %s" , ctime ( & creation_time ) )
FUNCTION_CALL	237:4	237:56	5	printf ( "%%%%CreationDate: %s" , ctime ( & creation_time ) )
CALLEE	237:4	237:4	6	printf
LEAF_NODE	237:4	237:4	7	printf
LEAF_NODE	237:10	237:10	6	(
ARGUMENT	237:11	237:11	6	"%%%%CreationDate: %s"
FIELD	237:11	237:11	7	"%%%%CreationDate: %s"
LEAF_NODE	237:11	237:11	8	"%%%%CreationDate: %s"
LEAF_NODE	237:33	237:33	6	,
ARGUMENT	237:35	237:35	6	ctime ( & creation_time )
FUNCTION_CALL	237:35	237:55	7	ctime ( & creation_time )
CALLEE	237:35	237:35	8	ctime
LEAF_NODE	237:35	237:35	9	ctime
LEAF_NODE	237:40	237:40	8	(
ARGUMENT	237:41	237:41	8	& creation_time
UNARY_EXPR	237:41	237:42	9	& creation_time
UNARY_OPERATOR	237:41	237:41	10	&
LEAF_NODE	237:41	237:41	11	&
FIELD	237:42	237:42	10	creation_time
LEAF_NODE	237:42	237:42	11	creation_time
LEAF_NODE	237:55	237:55	8	)
LEAF_NODE	237:56	237:56	6	)
LEAF_NODE	237:57	237:57	4	;
EXPR_STATEMENT	238:4	238:31	3	printf ( "%%%%Origin: 0 0\n" ) ;
EXPR	238:4	238:4	4	printf ( "%%%%Origin: 0 0\n" )
FUNCTION_CALL	238:4	238:30	5	printf ( "%%%%Origin: 0 0\n" )
CALLEE	238:4	238:4	6	printf
LEAF_NODE	238:4	238:4	7	printf
LEAF_NODE	238:10	238:10	6	(
ARGUMENT	238:11	238:11	6	"%%%%Origin: 0 0\n"
FIELD	238:11	238:11	7	"%%%%Origin: 0 0\n"
LEAF_NODE	238:11	238:11	8	"%%%%Origin: 0 0\n"
LEAF_NODE	238:30	238:30	6	)
LEAF_NODE	238:31	238:31	4	;
EXPR_STATEMENT	239:4	240:55	3	printf ( "%%%%BoundingBox: 0 0 %u %u\n" , ( int ) ( pageWidth * points ) , ( int ) ( pageHeight * points ) ) ;
EXPR	239:4	239:4	4	printf ( "%%%%BoundingBox: 0 0 %u %u\n" , ( int ) ( pageWidth * points ) , ( int ) ( pageHeight * points ) )
FUNCTION_CALL	239:4	240:54	5	printf ( "%%%%BoundingBox: 0 0 %u %u\n" , ( int ) ( pageWidth * points ) , ( int ) ( pageHeight * points ) )
CALLEE	239:4	239:4	6	printf
LEAF_NODE	239:4	239:4	7	printf
LEAF_NODE	239:10	239:10	6	(
ARGUMENT	239:11	239:11	6	"%%%%BoundingBox: 0 0 %u %u\n"
FIELD	239:11	239:11	7	"%%%%BoundingBox: 0 0 %u %u\n"
LEAF_NODE	239:11	239:11	8	"%%%%BoundingBox: 0 0 %u %u\n"
LEAF_NODE	239:41	239:41	6	,
ARGUMENT	240:1	240:25	6	( int ) ( pageWidth * points )
LEAF_NODE	240:1	240:1	7	(
TYPE_NAME	240:2	240:2	7	int
LEAF_NODE	240:2	240:2	8	int
LEAF_NODE	240:5	240:5	7	)
LEAF_NODE	240:6	240:6	7	(
FIELD	240:7	240:7	7	pageWidth
LEAF_NODE	240:7	240:7	8	pageWidth
LEAF_NODE	240:17	240:17	7	*
FIELD	240:19	240:19	7	points
LEAF_NODE	240:19	240:19	8	points
LEAF_NODE	240:25	240:25	7	)
LEAF_NODE	240:26	240:26	6	,
ARGUMENT	240:28	240:53	6	( int ) ( pageHeight * points )
LEAF_NODE	240:28	240:28	7	(
TYPE_NAME	240:29	240:29	7	int
LEAF_NODE	240:29	240:29	8	int
LEAF_NODE	240:32	240:32	7	)
LEAF_NODE	240:33	240:33	7	(
FIELD	240:34	240:34	7	pageHeight
LEAF_NODE	240:34	240:34	8	pageHeight
LEAF_NODE	240:45	240:45	7	*
FIELD	240:47	240:47	7	points
LEAF_NODE	240:47	240:47	8	points
LEAF_NODE	240:53	240:53	7	)
LEAF_NODE	240:54	240:54	6	)
LEAF_NODE	240:55	240:55	4	;
EXPR_STATEMENT	241:4	241:34	3	printf ( "%%%%Pages: (atend)\n" ) ;
EXPR	241:4	241:4	4	printf ( "%%%%Pages: (atend)\n" )
FUNCTION_CALL	241:4	241:33	5	printf ( "%%%%Pages: (atend)\n" )
CALLEE	241:4	241:4	6	printf
LEAF_NODE	241:4	241:4	7	printf
LEAF_NODE	241:10	241:10	6	(
ARGUMENT	241:11	241:11	6	"%%%%Pages: (atend)\n"
FIELD	241:11	241:11	7	"%%%%Pages: (atend)\n"
LEAF_NODE	241:11	241:11	8	"%%%%Pages: (atend)\n"
LEAF_NODE	241:33	241:33	6	)
LEAF_NODE	241:34	241:34	4	;
EXPR_STATEMENT	242:4	242:31	3	printf ( "%%%%EndComments\n" ) ;
EXPR	242:4	242:4	4	printf ( "%%%%EndComments\n" )
FUNCTION_CALL	242:4	242:30	5	printf ( "%%%%EndComments\n" )
CALLEE	242:4	242:4	6	printf
LEAF_NODE	242:4	242:4	7	printf
LEAF_NODE	242:10	242:10	6	(
ARGUMENT	242:11	242:11	6	"%%%%EndComments\n"
FIELD	242:11	242:11	7	"%%%%EndComments\n"
LEAF_NODE	242:11	242:11	8	"%%%%EndComments\n"
LEAF_NODE	242:30	242:30	6	)
LEAF_NODE	242:31	242:31	4	;
EXPR_STATEMENT	243:4	243:31	3	printf ( "%%%%BeginProlog\n" ) ;
EXPR	243:4	243:4	4	printf ( "%%%%BeginProlog\n" )
FUNCTION_CALL	243:4	243:30	5	printf ( "%%%%BeginProlog\n" )
CALLEE	243:4	243:4	6	printf
LEAF_NODE	243:4	243:4	7	printf
LEAF_NODE	243:10	243:10	6	(
ARGUMENT	243:11	243:11	6	"%%%%BeginProlog\n"
FIELD	243:11	243:11	7	"%%%%BeginProlog\n"
LEAF_NODE	243:11	243:11	8	"%%%%BeginProlog\n"
LEAF_NODE	243:30	243:30	6	)
LEAF_NODE	243:31	243:31	4	;
EXPR_STATEMENT	244:4	244:20	3	emitFont ( stdout ) ;
EXPR	244:4	244:4	4	emitFont ( stdout )
FUNCTION_CALL	244:4	244:19	5	emitFont ( stdout )
CALLEE	244:4	244:4	6	emitFont
LEAF_NODE	244:4	244:4	7	emitFont
LEAF_NODE	244:12	244:12	6	(
ARGUMENT	244:13	244:13	6	stdout
FIELD	244:13	244:13	7	stdout
LEAF_NODE	244:13	244:13	8	stdout
LEAF_NODE	244:19	244:19	6	)
LEAF_NODE	244:20	244:20	4	;
EXPR_STATEMENT	245:4	245:31	3	printf ( "/d{bind def}def\n" ) ;
EXPR	245:4	245:4	4	printf ( "/d{bind def}def\n" )
FUNCTION_CALL	245:4	245:30	5	printf ( "/d{bind def}def\n" )
CALLEE	245:4	245:4	6	printf
LEAF_NODE	245:4	245:4	7	printf
LEAF_NODE	245:10	245:10	6	(
ARGUMENT	245:11	245:11	6	"/d{bind def}def\n"
FIELD	245:11	245:11	7	"/d{bind def}def\n"
LEAF_NODE	245:11	245:11	8	"/d{bind def}def\n"
LEAF_NODE	245:30	245:30	6	)
LEAF_NODE	245:31	245:31	4	;
EXPR_STATEMENT	246:4	246:34	3	printf ( "/m{0 exch moveto}d\n" ) ;
EXPR	246:4	246:4	4	printf ( "/m{0 exch moveto}d\n" )
FUNCTION_CALL	246:4	246:33	5	printf ( "/m{0 exch moveto}d\n" )
CALLEE	246:4	246:4	6	printf
LEAF_NODE	246:4	246:4	7	printf
LEAF_NODE	246:10	246:10	6	(
ARGUMENT	246:11	246:11	6	"/m{0 exch moveto}d\n"
FIELD	246:11	246:11	7	"/m{0 exch moveto}d\n"
LEAF_NODE	246:11	246:11	8	"/m{0 exch moveto}d\n"
LEAF_NODE	246:33	246:33	6	)
LEAF_NODE	246:34	246:34	4	;
EXPR_STATEMENT	247:4	247:25	3	printf ( "/s{show}d\n" ) ;
EXPR	247:4	247:4	4	printf ( "/s{show}d\n" )
FUNCTION_CALL	247:4	247:24	5	printf ( "/s{show}d\n" )
CALLEE	247:4	247:4	6	printf
LEAF_NODE	247:4	247:4	7	printf
LEAF_NODE	247:10	247:10	6	(
ARGUMENT	247:11	247:11	6	"/s{show}d\n"
FIELD	247:11	247:11	7	"/s{show}d\n"
LEAF_NODE	247:11	247:11	8	"/s{show}d\n"
LEAF_NODE	247:24	247:24	6	)
LEAF_NODE	247:25	247:25	4	;
EXPR_STATEMENT	248:4	248:30	3	printf ( "/p{showpage}d \n" ) ;
EXPR	248:4	248:4	4	printf ( "/p{showpage}d \n" )
FUNCTION_CALL	248:4	248:29	5	printf ( "/p{showpage}d \n" )
CALLEE	248:4	248:4	6	printf
LEAF_NODE	248:4	248:4	7	printf
LEAF_NODE	248:10	248:10	6	(
ARGUMENT	248:11	248:11	6	"/p{showpage}d \n"
FIELD	248:11	248:11	7	"/p{showpage}d \n"
LEAF_NODE	248:11	248:11	8	"/p{showpage}d \n"
LEAF_NODE	248:29	248:29	6	)
LEAF_NODE	248:30	248:30	4	;
EXPR_STATEMENT	249:4	249:29	3	printf ( "%%%%EndProlog\n" ) ;
EXPR	249:4	249:4	4	printf ( "%%%%EndProlog\n" )
FUNCTION_CALL	249:4	249:28	5	printf ( "%%%%EndProlog\n" )
CALLEE	249:4	249:4	6	printf
LEAF_NODE	249:4	249:4	7	printf
LEAF_NODE	249:10	249:10	6	(
ARGUMENT	249:11	249:11	6	"%%%%EndProlog\n"
FIELD	249:11	249:11	7	"%%%%EndProlog\n"
LEAF_NODE	249:11	249:11	8	"%%%%EndProlog\n"
LEAF_NODE	249:28	249:28	6	)
LEAF_NODE	249:29	249:29	4	;
EXPR_STATEMENT	250:4	250:59	3	printf ( "%%%%Page: \"%u\" %u\n" , pageNumber , pageNumber ) ;
EXPR	250:4	250:4	4	printf ( "%%%%Page: \"%u\" %u\n" , pageNumber , pageNumber )
FUNCTION_CALL	250:4	250:58	5	printf ( "%%%%Page: \"%u\" %u\n" , pageNumber , pageNumber )
CALLEE	250:4	250:4	6	printf
LEAF_NODE	250:4	250:4	7	printf
LEAF_NODE	250:10	250:10	6	(
ARGUMENT	250:11	250:11	6	"%%%%Page: \"%u\" %u\n"
FIELD	250:11	250:11	7	"%%%%Page: \"%u\" %u\n"
LEAF_NODE	250:11	250:11	8	"%%%%Page: \"%u\" %u\n"
LEAF_NODE	250:34	250:34	6	,
ARGUMENT	250:36	250:36	6	pageNumber
FIELD	250:36	250:36	7	pageNumber
LEAF_NODE	250:36	250:36	8	pageNumber
LEAF_NODE	250:46	250:46	6	,
ARGUMENT	250:48	250:48	6	pageNumber
FIELD	250:48	250:48	7	pageNumber
LEAF_NODE	250:48	250:48	8	pageNumber
LEAF_NODE	250:58	250:58	6	)
LEAF_NODE	250:59	250:59	4	;
EXPR_STATEMENT	251:4	251:40	3	printf ( "/$pageTop save def gsave\n" ) ;
EXPR	251:4	251:4	4	printf ( "/$pageTop save def gsave\n" )
FUNCTION_CALL	251:4	251:39	5	printf ( "/$pageTop save def gsave\n" )
CALLEE	251:4	251:4	6	printf
LEAF_NODE	251:4	251:4	7	printf
LEAF_NODE	251:10	251:10	6	(
ARGUMENT	251:11	251:11	6	"/$pageTop save def gsave\n"
FIELD	251:11	251:11	7	"/$pageTop save def gsave\n"
LEAF_NODE	251:11	251:11	8	"/$pageTop save def gsave\n"
LEAF_NODE	251:39	251:39	6	)
LEAF_NODE	251:40	251:40	4	;
SELECTION	252:4	253:8	3	
KEYWORD	252:4	252:4	4	if
LEAF_NODE	252:4	252:4	5	if
LEAF_NODE	252:7	252:7	4	(
CONDITION	252:8	252:8	4	scaleToPage
EXPR	252:8	252:8	5	scaleToPage
FIELD	252:8	252:8	6	scaleToPage
LEAF_NODE	252:8	252:8	7	scaleToPage
LEAF_NODE	252:19	252:19	4	)
STATEMENTS	253:8	253:8	4	
EXPR_STATEMENT	253:8	254:56	5	scale = pageHeight / ( h / yres ) < pageWidth / ( w / xres ) ? pageHeight / ( h / yres ) : pageWidth / ( w / xres ) ;
EXPR	253:8	253:8	6	scale = pageHeight / ( h / yres ) < pageWidth / ( w / xres ) ? pageHeight / ( h / yres ) : pageWidth / ( w / xres )
ASSIGN	253:8	253:16	7	scale = pageHeight / ( h / yres ) < pageWidth / ( w / xres ) ? pageHeight / ( h / yres ) : pageWidth / ( w / xres )
LVAL	253:8	253:8	8	scale
FIELD	253:8	253:8	9	scale
LEAF_NODE	253:8	253:8	10	scale
ASSIGN_OP	253:14	253:14	8	=
LEAF_NODE	253:14	253:14	9	=
RVAL	253:16	253:16	8	pageHeight / ( h / yres ) < pageWidth / ( w / xres ) ? pageHeight / ( h / yres ) : pageWidth / ( w / xres )
COND_EXPR	253:16	254:55	9	pageHeight / ( h / yres ) < pageWidth / ( w / xres ) ? pageHeight / ( h / yres ) : pageWidth / ( w / xres )
CONDITION	253:16	253:59	10	pageHeight / ( h / yres ) < pageWidth / ( w / xres )
FIELD	253:16	253:16	11	pageHeight
LEAF_NODE	253:16	253:16	12	pageHeight
LEAF_NODE	253:27	253:27	11	/
LEAF_NODE	253:29	253:29	11	(
FIELD	253:30	253:30	11	h
LEAF_NODE	253:30	253:30	12	h
LEAF_NODE	253:31	253:31	11	/
FIELD	253:32	253:32	11	yres
LEAF_NODE	253:32	253:32	12	yres
LEAF_NODE	253:36	253:36	11	)
REL_OPERATOR	253:38	253:38	11	<
LEAF_NODE	253:38	253:38	12	<
FIELD	253:40	253:40	11	pageWidth
LEAF_NODE	253:40	253:40	12	pageWidth
LEAF_NODE	253:50	253:50	11	/
LEAF_NODE	253:52	253:52	11	(
FIELD	253:53	253:53	11	w
LEAF_NODE	253:53	253:53	12	w
LEAF_NODE	253:54	253:54	11	/
FIELD	253:55	253:55	11	xres
LEAF_NODE	253:55	253:55	12	xres
LEAF_NODE	253:59	253:59	11	)
LEAF_NODE	253:61	253:61	10	?
EXPR	254:12	254:32	10	pageHeight / ( h / yres )
FIELD	254:12	254:12	11	pageHeight
LEAF_NODE	254:12	254:12	12	pageHeight
LEAF_NODE	254:23	254:23	11	/
LEAF_NODE	254:25	254:25	11	(
FIELD	254:26	254:26	11	h
LEAF_NODE	254:26	254:26	12	h
LEAF_NODE	254:27	254:27	11	/
FIELD	254:28	254:28	11	yres
LEAF_NODE	254:28	254:28	12	yres
LEAF_NODE	254:32	254:32	11	)
LEAF_NODE	254:34	254:34	10	:
FIELD	254:36	254:36	10	pageWidth
LEAF_NODE	254:36	254:36	11	pageWidth
LEAF_NODE	254:46	254:46	10	/
LEAF_NODE	254:48	254:48	10	(
FIELD	254:49	254:49	10	w
LEAF_NODE	254:49	254:49	11	w
LEAF_NODE	254:50	254:50	10	/
FIELD	254:51	254:51	10	xres
LEAF_NODE	254:51	254:51	11	xres
LEAF_NODE	254:55	254:55	10	)
LEAF_NODE	254:56	254:56	6	;
LEAF_NODE	255:4	255:4	3	printf
LEAF_NODE	255:10	255:10	3	(
LEAF_NODE	255:11	255:11	3	"%g %g translate\n"
LEAF_NODE	255:30	255:30	3	,
LEAF_NODE	256:11	256:11	3	points
LEAF_NODE	256:18	256:18	3	*
LEAF_NODE	256:20	256:20	3	(
LEAF_NODE	256:21	256:21	3	pageWidth
LEAF_NODE	256:31	256:31	3	-
LEAF_NODE	256:33	256:33	3	scale
LEAF_NODE	256:38	256:38	3	*
LEAF_NODE	256:39	256:39	3	w
LEAF_NODE	256:40	256:40	3	/
LEAF_NODE	256:41	256:41	3	xres
LEAF_NODE	256:45	256:45	3	)
LEAF_NODE	256:47	256:47	3	*
LEAF_NODE	256:49	256:49	3	half
LEAF_NODE	256:53	256:53	3	,
LEAF_NODE	257:11	257:11	3	points
LEAF_NODE	257:18	257:18	3	*
LEAF_NODE	257:20	257:20	3	(
LEAF_NODE	257:21	257:21	3	scale
LEAF_NODE	257:26	257:26	3	*
LEAF_NODE	257:27	257:27	3	h
LEAF_NODE	257:28	257:28	3	/
LEAF_NODE	257:29	257:29	3	yres
LEAF_NODE	257:34	257:34	3	+
LEAF_NODE	257:36	257:36	3	(
LEAF_NODE	257:37	257:37	3	pageHeight
LEAF_NODE	257:48	257:48	3	-
LEAF_NODE	257:50	257:50	3	scale
LEAF_NODE	257:55	257:55	3	*
LEAF_NODE	257:56	257:56	3	h
LEAF_NODE	257:57	257:57	3	/
LEAF_NODE	257:58	257:58	3	yres
LEAF_NODE	257:62	257:62	3	)
LEAF_NODE	257:64	257:64	3	*
LEAF_NODE	257:66	257:66	3	half
LEAF_NODE	257:70	257:70	3	)
LEAF_NODE	257:71	257:71	3	)
LEAF_NODE	257:72	257:72	3	;
LEAF_NODE	258:4	258:4	3	printf
LEAF_NODE	258:10	258:10	3	(
LEAF_NODE	258:11	258:11	3	"%g %g scale\n"
LEAF_NODE	258:26	258:26	3	,
LEAF_NODE	258:28	258:28	3	points
LEAF_NODE	258:34	258:34	3	/
LEAF_NODE	258:35	258:35	3	xres
LEAF_NODE	258:39	258:39	3	*
LEAF_NODE	258:40	258:40	3	scale
LEAF_NODE	258:45	258:45	3	,
LEAF_NODE	258:47	258:47	3	-
LEAF_NODE	258:48	258:48	3	points
LEAF_NODE	258:54	258:54	3	/
LEAF_NODE	258:55	258:55	3	yres
LEAF_NODE	258:59	258:59	3	*
LEAF_NODE	258:60	258:60	3	scale
LEAF_NODE	258:65	258:65	3	)
LEAF_NODE	258:66	258:66	3	;
EXPR_STATEMENT	259:4	259:25	3	printf ( "0 setgray\n" ) ;
EXPR	259:4	259:4	4	printf ( "0 setgray\n" )
FUNCTION_CALL	259:4	259:24	5	printf ( "0 setgray\n" )
CALLEE	259:4	259:4	6	printf
LEAF_NODE	259:4	259:4	7	printf
LEAF_NODE	259:10	259:10	6	(
ARGUMENT	259:11	259:11	6	"0 setgray\n"
FIELD	259:11	259:11	7	"0 setgray\n"
LEAF_NODE	259:11	259:11	8	"0 setgray\n"
LEAF_NODE	259:24	259:24	6	)
LEAF_NODE	259:25	259:25	4	;
EXPR_STATEMENT	260:4	260:53	3	TIFFSetField ( tif , TIFFTAG_FAXFILLFUNC , printruns ) ;
EXPR	260:4	260:4	4	TIFFSetField ( tif , TIFFTAG_FAXFILLFUNC , printruns )
FUNCTION_CALL	260:4	260:52	5	TIFFSetField ( tif , TIFFTAG_FAXFILLFUNC , printruns )
CALLEE	260:4	260:4	6	TIFFSetField
LEAF_NODE	260:4	260:4	7	TIFFSetField
LEAF_NODE	260:16	260:16	6	(
ARGUMENT	260:17	260:17	6	tif
FIELD	260:17	260:17	7	tif
LEAF_NODE	260:17	260:17	8	tif
LEAF_NODE	260:20	260:20	6	,
ARGUMENT	260:22	260:22	6	TIFFTAG_FAXFILLFUNC
FIELD	260:22	260:22	7	TIFFTAG_FAXFILLFUNC
LEAF_NODE	260:22	260:22	8	TIFFTAG_FAXFILLFUNC
LEAF_NODE	260:41	260:41	6	,
ARGUMENT	260:43	260:43	6	printruns
FIELD	260:43	260:43	7	printruns
LEAF_NODE	260:43	260:43	8	printruns
LEAF_NODE	260:52	260:52	6	)
LEAF_NODE	260:53	260:53	4	;
EXPR_STATEMENT	261:4	261:32	3	ns = TIFFNumberOfStrips ( tif ) ;
EXPR	261:4	261:4	4	ns = TIFFNumberOfStrips ( tif )
ASSIGN	261:4	261:9	5	ns = TIFFNumberOfStrips ( tif )
LVAL	261:4	261:4	6	ns
FIELD	261:4	261:4	7	ns
LEAF_NODE	261:4	261:4	8	ns
ASSIGN_OP	261:7	261:7	6	=
LEAF_NODE	261:7	261:7	7	=
RVAL	261:9	261:9	6	TIFFNumberOfStrips ( tif )
FUNCTION_CALL	261:9	261:31	7	TIFFNumberOfStrips ( tif )
CALLEE	261:9	261:9	8	TIFFNumberOfStrips
LEAF_NODE	261:9	261:9	9	TIFFNumberOfStrips
LEAF_NODE	261:27	261:27	8	(
ARGUMENT	261:28	261:28	8	tif
FIELD	261:28	261:28	9	tif
LEAF_NODE	261:28	261:28	10	tif
LEAF_NODE	261:31	261:31	8	)
LEAF_NODE	261:32	261:32	4	;
EXPR_STATEMENT	262:4	262:11	3	row = 0 ;
EXPR	262:4	262:4	4	row = 0
ASSIGN	262:4	262:10	5	row = 0
LVAL	262:4	262:4	6	row
FIELD	262:4	262:4	7	row
LEAF_NODE	262:4	262:4	8	row
ASSIGN_OP	262:8	262:8	6	=
LEAF_NODE	262:8	262:8	7	=
RVAL	262:10	262:10	6	0
FIELD	262:10	262:10	7	0
LEAF_NODE	262:10	262:10	8	0
LEAF_NODE	262:11	262:11	4	;
ITERATION	263:4	264:1	3	
KEYWORD	263:4	263:4	4	for
LEAF_NODE	263:4	263:4	5	for
LEAF_NODE	263:8	263:8	4	(
FOR_INIT	263:9	263:14	4	s = 0 ;
EXPR	263:9	263:9	5	s = 0
ASSIGN	263:9	263:13	6	s = 0
LVAL	263:9	263:9	7	s
FIELD	263:9	263:9	8	s
LEAF_NODE	263:9	263:9	9	s
ASSIGN_OP	263:11	263:11	7	=
LEAF_NODE	263:11	263:11	8	=
RVAL	263:13	263:13	7	0
FIELD	263:13	263:13	8	0
LEAF_NODE	263:13	263:13	9	0
LEAF_NODE	263:14	263:14	5	;
CONDITION	263:16	263:16	4	s < ns
EXPR	263:16	263:20	5	s < ns
FIELD	263:16	263:16	6	s
LEAF_NODE	263:16	263:16	7	s
REL_OPERATOR	263:18	263:18	6	<
LEAF_NODE	263:18	263:18	7	<
FIELD	263:20	263:20	6	ns
LEAF_NODE	263:20	263:20	7	ns
LEAF_NODE	263:22	263:22	4	;
FOR_EXPR	263:24	263:24	4	s ++
EXPR	263:24	263:24	5	s ++
FIELD	263:24	263:25	6	s ++
LEAF_NODE	263:24	263:24	7	s
LEAF_NODE	263:25	263:25	7	++
LEAF_NODE	263:27	263:27	4	)
STATEMENTS	264:1	264:1	4	
EXPR_STATEMENT	264:1	264:66	5	( void ) TIFFReadEncodedStrip ( tif , s , ( tdata_t ) NULL , ( tsize_t ) - 1 ) ;
EXPR	264:1	264:8	6	( void ) TIFFReadEncodedStrip ( tif , s , ( tdata_t ) NULL , ( tsize_t ) - 1 )
LEAF_NODE	264:1	264:1	7	(
TYPE_NAME	264:2	264:2	7	void
LEAF_NODE	264:2	264:2	8	void
LEAF_NODE	264:6	264:6	7	)
FUNCTION_CALL	264:8	264:65	7	TIFFReadEncodedStrip ( tif , s , ( tdata_t ) NULL , ( tsize_t ) - 1 )
CALLEE	264:8	264:8	8	TIFFReadEncodedStrip
LEAF_NODE	264:8	264:8	9	TIFFReadEncodedStrip
LEAF_NODE	264:28	264:28	8	(
ARGUMENT	264:29	264:29	8	tif
FIELD	264:29	264:29	9	tif
LEAF_NODE	264:29	264:29	10	tif
LEAF_NODE	264:32	264:32	8	,
ARGUMENT	264:34	264:34	8	s
FIELD	264:34	264:34	9	s
LEAF_NODE	264:34	264:34	10	s
LEAF_NODE	264:35	264:35	8	,
ARGUMENT	264:37	264:47	8	( tdata_t ) NULL
LEAF_NODE	264:37	264:37	9	(
TYPE_NAME	264:38	264:38	9	tdata_t
LEAF_NODE	264:38	264:38	10	tdata_t
LEAF_NODE	264:45	264:45	9	)
FIELD	264:47	264:47	9	NULL
LEAF_NODE	264:47	264:47	10	NULL
LEAF_NODE	264:51	264:51	8	,
ARGUMENT	264:53	264:63	8	( tsize_t ) - 1
LEAF_NODE	264:53	264:53	9	(
TYPE_NAME	264:54	264:54	9	tsize_t
LEAF_NODE	264:54	264:54	10	tsize_t
LEAF_NODE	264:61	264:61	9	)
UNARY_EXPR	264:63	264:64	9	- 1
UNARY_OPERATOR	264:63	264:63	10	-
LEAF_NODE	264:63	264:63	11	-
FIELD	264:64	264:64	10	1
LEAF_NODE	264:64	264:64	11	1
LEAF_NODE	264:65	264:65	8	)
LEAF_NODE	264:66	264:66	6	;
EXPR_STATEMENT	265:4	265:17	3	printf ( "p\n" ) ;
EXPR	265:4	265:4	4	printf ( "p\n" )
FUNCTION_CALL	265:4	265:16	5	printf ( "p\n" )
CALLEE	265:4	265:4	6	printf
LEAF_NODE	265:4	265:4	7	printf
LEAF_NODE	265:10	265:10	6	(
ARGUMENT	265:11	265:11	6	"p\n"
FIELD	265:11	265:11	7	"p\n"
LEAF_NODE	265:11	265:11	8	"p\n"
LEAF_NODE	265:16	265:16	6	)
LEAF_NODE	265:17	265:17	4	;
EXPR_STATEMENT	266:4	266:41	3	printf ( "grestore $pageTop restore\n" ) ;
EXPR	266:4	266:4	4	printf ( "grestore $pageTop restore\n" )
FUNCTION_CALL	266:4	266:40	5	printf ( "grestore $pageTop restore\n" )
CALLEE	266:4	266:4	6	printf
LEAF_NODE	266:4	266:4	7	printf
LEAF_NODE	266:10	266:10	6	(
ARGUMENT	266:11	266:11	6	"grestore $pageTop restore\n"
FIELD	266:11	266:11	7	"grestore $pageTop restore\n"
LEAF_NODE	266:11	266:11	8	"grestore $pageTop restore\n"
LEAF_NODE	266:40	266:40	6	)
LEAF_NODE	266:41	266:41	4	;
EXPR_STATEMENT	267:4	267:16	3	totalPages ++ ;
EXPR	267:4	267:4	4	totalPages ++
FIELD	267:4	267:14	5	totalPages ++
LEAF_NODE	267:4	267:4	6	totalPages
LEAF_NODE	267:14	267:14	6	++
LEAF_NODE	267:16	267:16	4	;
LEAF_NODE	268:0	268:0	2	}
FUNCTION_DEF	273:0	284:0	1	
RETURN_TYPE	273:0	273:0	2	int
TYPE_NAME	273:0	273:0	3	int
LEAF_NODE	273:0	273:0	4	int
FUNCTION_NAME	274:0	274:0	2	findPage
LEAF_NODE	274:0	274:0	3	findPage
PARAMETER_LIST	274:8	274:37	2	( TIFF * tif , uint16 pageNumber )
LEAF_NODE	274:8	274:8	3	(
PARAMETER_DECL	274:9	274:15	3	TIFF * tif
TYPE	274:9	274:13	4	TIFF *
TYPE_NAME	274:9	274:9	5	TIFF
LEAF_NODE	274:9	274:9	6	TIFF
POINTER	274:13	274:13	5	*
LEAF_NODE	274:13	274:13	6	*
NAME	274:15	274:15	4	tif
LEAF_NODE	274:15	274:15	5	tif
LEAF_NODE	274:18	274:18	3	,
PARAMETER_DECL	274:20	274:27	3	uint16 pageNumber
TYPE	274:20	274:20	4	uint16
TYPE_NAME	274:20	274:20	5	uint16
LEAF_NODE	274:20	274:20	6	uint16
NAME	274:27	274:27	4	pageNumber
LEAF_NODE	274:27	274:27	5	pageNumber
LEAF_NODE	274:37	274:37	3	)
LEAF_NODE	275:0	275:0	2	{
STATEMENTS	276:4	282:6	2	
SIMPLE_DECL	276:4	276:27	3	uint16 pn ; pn = ( uint16 ) - 1 ;
VAR_DECL	276:4	276:11	4	uint16 pn ; pn = ( uint16 ) - 1
TYPE	276:4	276:4	5	uint16
TYPE_NAME	276:4	276:4	6	uint16
LEAF_NODE	276:4	276:4	7	uint16
NAME	276:11	276:11	5	pn
LEAF_NODE	276:11	276:11	6	pn
LEAF_NODE	0:0	0:0	5	;
INIT	276:11	276:11	5	pn = ( uint16 ) - 1
ASSIGN	276:11	276:16	6	pn = ( uint16 ) - 1
LVAL	276:11	276:11	7	pn
NAME	276:11	276:11	8	pn
LEAF_NODE	276:11	276:11	9	pn
ASSIGN_OP	276:14	276:14	7	=
LEAF_NODE	276:14	276:14	8	=
RVAL	276:16	276:25	7	( uint16 ) - 1
LEAF_NODE	276:16	276:16	8	(
TYPE_NAME	276:17	276:17	8	uint16
LEAF_NODE	276:17	276:17	9	uint16
LEAF_NODE	276:23	276:23	8	)
UNARY_EXPR	276:25	276:26	8	- 1
UNARY_OPERATOR	276:25	276:25	9	-
LEAF_NODE	276:25	276:25	10	-
FIELD	276:26	276:26	9	1
LEAF_NODE	276:26	276:26	10	1
LEAF_NODE	276:27	276:27	4	;
SIMPLE_DECL	277:4	277:31	3	uint16 ptotal ; ptotal = ( uint16 ) - 1 ;
VAR_DECL	277:4	277:11	4	uint16 ptotal ; ptotal = ( uint16 ) - 1
TYPE	277:4	277:4	5	uint16
TYPE_NAME	277:4	277:4	6	uint16
LEAF_NODE	277:4	277:4	7	uint16
NAME	277:11	277:11	5	ptotal
LEAF_NODE	277:11	277:11	6	ptotal
LEAF_NODE	0:0	0:0	5	;
INIT	277:11	277:11	5	ptotal = ( uint16 ) - 1
ASSIGN	277:11	277:20	6	ptotal = ( uint16 ) - 1
LVAL	277:11	277:11	7	ptotal
NAME	277:11	277:11	8	ptotal
LEAF_NODE	277:11	277:11	9	ptotal
ASSIGN_OP	277:18	277:18	7	=
LEAF_NODE	277:18	277:18	8	=
RVAL	277:20	277:29	7	( uint16 ) - 1
LEAF_NODE	277:20	277:20	8	(
TYPE_NAME	277:21	277:21	8	uint16
LEAF_NODE	277:21	277:21	9	uint16
LEAF_NODE	277:27	277:27	8	)
UNARY_EXPR	277:29	277:30	8	- 1
UNARY_OPERATOR	277:29	277:29	9	-
LEAF_NODE	277:29	277:29	10	-
FIELD	277:30	277:30	9	1
LEAF_NODE	277:30	277:30	10	1
LEAF_NODE	277:31	277:31	4	;
SELECTION	278:4	278:28	3	
KEYWORD	278:4	278:4	4	if
LEAF_NODE	278:4	278:4	5	if
LEAF_NODE	278:7	278:7	4	(
CONDITION	278:8	278:8	4	GetPageNumber ( tif )
EXPR	278:8	278:8	5	GetPageNumber ( tif )
FUNCTION_CALL	278:8	278:25	6	GetPageNumber ( tif )
CALLEE	278:8	278:8	7	GetPageNumber
LEAF_NODE	278:8	278:8	8	GetPageNumber
LEAF_NODE	278:21	278:21	7	(
ARGUMENT	278:22	278:22	7	tif
FIELD	278:22	278:22	8	tif
LEAF_NODE	278:22	278:22	9	tif
LEAF_NODE	278:25	278:25	7	)
LEAF_NODE	278:26	278:26	4	)
STATEMENTS	278:28	282:4	4	
LEAF_NODE	278:28	278:28	5	{
STATEMENTS	279:1	281:1	5	
ITERATION	279:1	280:5	6	
KEYWORD	279:1	279:1	7	while
LEAF_NODE	279:1	279:1	8	while
LEAF_NODE	279:7	279:7	7	(
CONDITION	279:8	279:8	7	pn != ( pageNumber - 1 ) && TIFFReadDirectory ( tif ) && GetPageNumber ( tif )
EXPR	279:8	279:8	8	pn != ( pageNumber - 1 ) && TIFFReadDirectory ( tif ) && GetPageNumber ( tif )
AND	279:8	279:32	9	pn != ( pageNumber - 1 ) && TIFFReadDirectory ( tif ) && GetPageNumber ( tif )
EXPR	279:8	279:27	10	pn != ( pageNumber - 1 )
FIELD	279:8	279:8	11	pn
LEAF_NODE	279:8	279:8	12	pn
EQ_OPERATOR	279:11	279:11	11	!=
LEAF_NODE	279:11	279:11	12	!=
LEAF_NODE	279:14	279:14	11	(
FIELD	279:15	279:15	11	pageNumber
LEAF_NODE	279:15	279:15	12	pageNumber
LEAF_NODE	279:25	279:25	11	-
FIELD	279:26	279:26	11	1
LEAF_NODE	279:26	279:26	12	1
LEAF_NODE	279:27	279:27	11	)
LEAF_NODE	279:29	279:29	10	&&
EXPR	279:32	279:32	10	TIFFReadDirectory ( tif ) && GetPageNumber ( tif )
AND	279:32	279:58	11	TIFFReadDirectory ( tif ) && GetPageNumber ( tif )
EXPR	279:32	279:32	12	TIFFReadDirectory ( tif )
FUNCTION_CALL	279:32	279:53	13	TIFFReadDirectory ( tif )
CALLEE	279:32	279:32	14	TIFFReadDirectory
LEAF_NODE	279:32	279:32	15	TIFFReadDirectory
LEAF_NODE	279:49	279:49	14	(
ARGUMENT	279:50	279:50	14	tif
FIELD	279:50	279:50	15	tif
LEAF_NODE	279:50	279:50	16	tif
LEAF_NODE	279:53	279:53	14	)
LEAF_NODE	279:55	279:55	12	&&
EXPR	279:58	279:58	12	GetPageNumber ( tif )
FUNCTION_CALL	279:58	279:75	13	GetPageNumber ( tif )
CALLEE	279:58	279:58	14	GetPageNumber
LEAF_NODE	279:58	279:58	15	GetPageNumber
LEAF_NODE	279:71	279:71	14	(
ARGUMENT	279:72	279:72	14	tif
FIELD	279:72	279:72	15	tif
LEAF_NODE	279:72	279:72	16	tif
LEAF_NODE	279:75	279:75	14	)
LEAF_NODE	279:76	279:76	7	)
STATEMENTS	280:5	280:5	7	
LEAF_NODE	280:5	280:5	8	;
JUMP_STATEMENT	281:1	281:30	6	return ( pn == ( pageNumber - 1 ) ) ;
KEYWORD	281:1	281:1	7	return
LEAF_NODE	281:1	281:1	8	return
DESTINATION	281:8	281:8	7	( pn == ( pageNumber - 1 ) )
EXPR	281:8	281:29	8	( pn == ( pageNumber - 1 ) )
LEAF_NODE	281:8	281:8	9	(
FIELD	281:9	281:9	9	pn
LEAF_NODE	281:9	281:9	10	pn
EQ_OPERATOR	281:12	281:12	9	==
LEAF_NODE	281:12	281:12	10	==
LEAF_NODE	281:15	281:15	9	(
FIELD	281:16	281:16	9	pageNumber
LEAF_NODE	281:16	281:16	10	pageNumber
LEAF_NODE	281:26	281:26	9	-
FIELD	281:27	281:27	9	1
LEAF_NODE	281:27	281:27	10	1
LEAF_NODE	281:28	281:28	9	)
LEAF_NODE	281:29	281:29	9	)
LEAF_NODE	281:30	281:30	7	;
LEAF_NODE	282:4	282:4	5	}
SELECTION	282:6	283:1	3	
KEYWORD	282:6	282:6	4	else
LEAF_NODE	282:6	282:6	5	else
STATEMENTS	283:1	283:1	4	
JUMP_STATEMENT	283:1	283:55	5	return ( TIFFSetDirectory ( tif , ( tdir_t ) ( pageNumber - 1 ) ) ) ;
KEYWORD	283:1	283:1	6	return
LEAF_NODE	283:1	283:1	7	return
DESTINATION	283:8	283:8	6	( TIFFSetDirectory ( tif , ( tdir_t ) ( pageNumber - 1 ) ) )
EXPR	283:8	283:54	7	( TIFFSetDirectory ( tif , ( tdir_t ) ( pageNumber - 1 ) ) )
LEAF_NODE	283:8	283:8	8	(
FUNCTION_CALL	283:9	283:53	8	TIFFSetDirectory ( tif , ( tdir_t ) ( pageNumber - 1 ) )
CALLEE	283:9	283:9	9	TIFFSetDirectory
LEAF_NODE	283:9	283:9	10	TIFFSetDirectory
LEAF_NODE	283:25	283:25	9	(
ARGUMENT	283:26	283:26	9	tif
FIELD	283:26	283:26	10	tif
LEAF_NODE	283:26	283:26	11	tif
LEAF_NODE	283:29	283:29	9	,
ARGUMENT	283:31	283:52	9	( tdir_t ) ( pageNumber - 1 )
LEAF_NODE	283:31	283:31	10	(
TYPE_NAME	283:32	283:32	10	tdir_t
LEAF_NODE	283:32	283:32	11	tdir_t
LEAF_NODE	283:38	283:38	10	)
LEAF_NODE	283:39	283:39	10	(
FIELD	283:40	283:40	10	pageNumber
LEAF_NODE	283:40	283:40	11	pageNumber
LEAF_NODE	283:50	283:50	10	-
FIELD	283:51	283:51	10	1
LEAF_NODE	283:51	283:51	11	1
LEAF_NODE	283:52	283:52	10	)
LEAF_NODE	283:53	283:53	9	)
LEAF_NODE	283:54	283:54	8	)
LEAF_NODE	283:55	283:55	6	;
LEAF_NODE	284:0	284:0	2	}
FUNCTION_DEF	286:0	308:0	1	
RETURN_TYPE	286:0	286:0	2	void
TYPE_NAME	286:0	286:0	3	void
LEAF_NODE	286:0	286:0	4	void
FUNCTION_NAME	287:0	287:0	2	fax2ps
LEAF_NODE	287:0	287:0	3	fax2ps
PARAMETER_LIST	287:6	287:62	2	( TIFF * tif , uint16 npages , uint16 * pages , char * filename )
LEAF_NODE	287:6	287:6	3	(
PARAMETER_DECL	287:7	287:13	3	TIFF * tif
TYPE	287:7	287:11	4	TIFF *
TYPE_NAME	287:7	287:7	5	TIFF
LEAF_NODE	287:7	287:7	6	TIFF
POINTER	287:11	287:11	5	*
LEAF_NODE	287:11	287:11	6	*
NAME	287:13	287:13	4	tif
LEAF_NODE	287:13	287:13	5	tif
LEAF_NODE	287:16	287:16	3	,
PARAMETER_DECL	287:18	287:25	3	uint16 npages
TYPE	287:18	287:18	4	uint16
TYPE_NAME	287:18	287:18	5	uint16
LEAF_NODE	287:18	287:18	6	uint16
NAME	287:25	287:25	4	npages
LEAF_NODE	287:25	287:25	5	npages
LEAF_NODE	287:31	287:31	3	,
PARAMETER_DECL	287:33	287:41	3	uint16 * pages
TYPE	287:33	287:39	4	uint16 *
TYPE_NAME	287:33	287:33	5	uint16
LEAF_NODE	287:33	287:33	6	uint16
POINTER	287:39	287:39	5	*
LEAF_NODE	287:39	287:39	6	*
NAME	287:41	287:41	4	pages
LEAF_NODE	287:41	287:41	5	pages
LEAF_NODE	287:46	287:46	3	,
PARAMETER_DECL	287:48	287:54	3	char * filename
TYPE	287:48	287:52	4	char *
TYPE_NAME	287:48	287:48	5	char
LEAF_NODE	287:48	287:48	6	char
POINTER	287:52	287:52	5	*
LEAF_NODE	287:52	287:52	6	*
NAME	287:54	287:54	4	filename
LEAF_NODE	287:54	287:54	5	filename
LEAF_NODE	287:62	287:62	3	)
LEAF_NODE	288:0	288:0	2	{
STATEMENTS	289:4	302:6	2	
SELECTION	289:4	289:20	3	
KEYWORD	289:4	289:4	4	if
LEAF_NODE	289:4	289:4	5	if
LEAF_NODE	289:7	289:7	4	(
CONDITION	289:8	289:8	4	npages > 0
EXPR	289:8	289:17	5	npages > 0
FIELD	289:8	289:8	6	npages
LEAF_NODE	289:8	289:8	7	npages
REL_OPERATOR	289:15	289:15	6	>
LEAF_NODE	289:15	289:15	7	>
FIELD	289:17	289:17	6	0
LEAF_NODE	289:17	289:17	7	0
LEAF_NODE	289:18	289:18	4	)
STATEMENTS	289:20	302:4	4	
LEAF_NODE	289:20	289:20	5	{
STATEMENTS	290:1	296:1	5	
SIMPLE_DECL	290:1	290:18	6	uint16 pn , uint16 ptotal ;
INIT_DECL_LIST	290:1	290:1	7	uint16 pn , uint16 ptotal
VAR_DECL	290:1	290:8	8	uint16 pn
TYPE	290:1	290:1	9	uint16
TYPE_NAME	290:1	290:1	10	uint16
LEAF_NODE	290:1	290:1	11	uint16
NAME	290:8	290:8	9	pn
LEAF_NODE	290:8	290:8	10	pn
LEAF_NODE	290:10	290:10	8	,
VAR_DECL	290:1	290:12	8	uint16 ptotal
TYPE	290:1	290:1	9	uint16
TYPE_NAME	290:1	290:1	10	uint16
LEAF_NODE	290:1	290:1	11	uint16
NAME	290:12	290:12	9	ptotal
LEAF_NODE	290:12	290:12	10	ptotal
LEAF_NODE	290:18	290:18	7	;
SIMPLE_DECL	291:1	291:6	6	int i ;
VAR_DECL	291:1	291:5	7	int i
TYPE	291:1	291:1	8	int
TYPE_NAME	291:1	291:1	9	int
LEAF_NODE	291:1	291:1	10	int
NAME	291:5	291:5	8	i
LEAF_NODE	291:5	291:5	9	i
LEAF_NODE	291:6	291:6	7	;
SELECTION	293:1	294:5	6	
KEYWORD	293:1	293:1	7	if
LEAF_NODE	293:1	293:1	8	if
LEAF_NODE	293:4	293:4	7	(
CONDITION	293:5	293:5	7	! GetPageNumber ( tif )
EXPR	293:5	293:5	8	! GetPageNumber ( tif )
UNARY_EXPR	293:5	293:6	9	! GetPageNumber ( tif )
UNARY_OPERATOR	293:5	293:5	10	!
LEAF_NODE	293:5	293:5	11	!
FUNCTION_CALL	293:6	293:23	10	GetPageNumber ( tif )
CALLEE	293:6	293:6	11	GetPageNumber
LEAF_NODE	293:6	293:6	12	GetPageNumber
LEAF_NODE	293:19	293:19	11	(
ARGUMENT	293:20	293:20	11	tif
FIELD	293:20	293:20	12	tif
LEAF_NODE	293:20	293:20	13	tif
LEAF_NODE	293:23	293:23	11	)
LEAF_NODE	293:24	293:24	7	)
STATEMENTS	294:5	294:5	7	
EXPR_STATEMENT	294:5	295:11	8	fprintf ( stderr , "%s: No page numbers, counting directories.\n" , filename ) ;
EXPR	294:5	294:5	9	fprintf ( stderr , "%s: No page numbers, counting directories.\n" , filename )
FUNCTION_CALL	294:5	295:10	10	fprintf ( stderr , "%s: No page numbers, counting directories.\n" , filename )
CALLEE	294:5	294:5	11	fprintf
LEAF_NODE	294:5	294:5	12	fprintf
LEAF_NODE	294:12	294:12	11	(
ARGUMENT	294:13	294:13	11	stderr
FIELD	294:13	294:13	12	stderr
LEAF_NODE	294:13	294:13	13	stderr
LEAF_NODE	294:19	294:19	11	,
ARGUMENT	294:21	294:21	11	"%s: No page numbers, counting directories.\n"
FIELD	294:21	294:21	12	"%s: No page numbers, counting directories.\n"
LEAF_NODE	294:21	294:21	13	"%s: No page numbers, counting directories.\n"
LEAF_NODE	294:67	294:67	11	,
ARGUMENT	295:2	295:2	11	filename
FIELD	295:2	295:2	12	filename
LEAF_NODE	295:2	295:2	13	filename
LEAF_NODE	295:10	295:10	11	)
LEAF_NODE	295:11	295:11	9	;
ITERATION	296:1	296:30	6	
KEYWORD	296:1	296:1	7	for
LEAF_NODE	296:1	296:1	8	for
LEAF_NODE	296:5	296:5	7	(
FOR_INIT	296:6	296:11	7	i = 0 ;
EXPR	296:6	296:6	8	i = 0
ASSIGN	296:6	296:10	9	i = 0
LVAL	296:6	296:6	10	i
FIELD	296:6	296:6	11	i
LEAF_NODE	296:6	296:6	12	i
ASSIGN_OP	296:8	296:8	10	=
LEAF_NODE	296:8	296:8	11	=
RVAL	296:10	296:10	10	0
FIELD	296:10	296:10	11	0
LEAF_NODE	296:10	296:10	12	0
LEAF_NODE	296:11	296:11	8	;
CONDITION	296:13	296:13	7	i < npages
EXPR	296:13	296:17	8	i < npages
FIELD	296:13	296:13	9	i
LEAF_NODE	296:13	296:13	10	i
REL_OPERATOR	296:15	296:15	9	<
LEAF_NODE	296:15	296:15	10	<
FIELD	296:17	296:17	9	npages
LEAF_NODE	296:17	296:17	10	npages
LEAF_NODE	296:23	296:23	7	;
FOR_EXPR	296:25	296:25	7	i ++
EXPR	296:25	296:25	8	i ++
FIELD	296:25	296:26	9	i ++
LEAF_NODE	296:25	296:25	10	i
LEAF_NODE	296:26	296:26	10	++
LEAF_NODE	296:28	296:28	7	)
STATEMENTS	296:30	301:1	7	
LEAF_NODE	296:30	296:30	8	{
STATEMENTS	297:5	299:5	8	
SELECTION	297:5	298:2	9	
KEYWORD	297:5	297:5	10	if
LEAF_NODE	297:5	297:5	11	if
LEAF_NODE	297:8	297:8	10	(
CONDITION	297:9	297:9	10	findPage ( tif , pages [ i ] )
EXPR	297:9	297:9	11	findPage ( tif , pages [ i ] )
FUNCTION_CALL	297:9	297:31	12	findPage ( tif , pages [ i ] )
CALLEE	297:9	297:9	13	findPage
LEAF_NODE	297:9	297:9	14	findPage
LEAF_NODE	297:17	297:17	13	(
ARGUMENT	297:18	297:18	13	tif
FIELD	297:18	297:18	14	tif
LEAF_NODE	297:18	297:18	15	tif
LEAF_NODE	297:21	297:21	13	,
ARGUMENT	297:23	297:23	13	pages [ i ]
FIELD	297:23	297:30	14	pages [ i ]
LEAF_NODE	297:23	297:23	15	pages
LEAF_NODE	297:28	297:28	15	[
EXPR	297:29	297:29	15	i
FIELD	297:29	297:29	16	i
LEAF_NODE	297:29	297:29	17	i
LEAF_NODE	297:30	297:30	15	]
LEAF_NODE	297:31	297:31	13	)
LEAF_NODE	297:32	297:32	10	)
STATEMENTS	298:2	298:2	10	
EXPR_STATEMENT	298:2	298:25	11	printTIF ( tif , pages [ i ] ) ;
EXPR	298:2	298:2	12	printTIF ( tif , pages [ i ] )
FUNCTION_CALL	298:2	298:24	13	printTIF ( tif , pages [ i ] )
CALLEE	298:2	298:2	14	printTIF
LEAF_NODE	298:2	298:2	15	printTIF
LEAF_NODE	298:10	298:10	14	(
ARGUMENT	298:11	298:11	14	tif
FIELD	298:11	298:11	15	tif
LEAF_NODE	298:11	298:11	16	tif
LEAF_NODE	298:14	298:14	14	,
ARGUMENT	298:16	298:16	14	pages [ i ]
FIELD	298:16	298:23	15	pages [ i ]
LEAF_NODE	298:16	298:16	16	pages
LEAF_NODE	298:21	298:21	16	[
EXPR	298:22	298:22	16	i
FIELD	298:22	298:22	17	i
LEAF_NODE	298:22	298:22	18	i
LEAF_NODE	298:23	298:23	16	]
LEAF_NODE	298:24	298:24	14	)
LEAF_NODE	298:25	298:25	12	;
SELECTION	299:5	300:2	9	
KEYWORD	299:5	299:5	10	else
LEAF_NODE	299:5	299:5	11	else
STATEMENTS	300:2	300:2	10	
EXPR_STATEMENT	300:2	300:64	11	fprintf ( stderr , "%s: No page number %d\n" , filename , pages [ i ] ) ;
EXPR	300:2	300:2	12	fprintf ( stderr , "%s: No page number %d\n" , filename , pages [ i ] )
FUNCTION_CALL	300:2	300:63	13	fprintf ( stderr , "%s: No page number %d\n" , filename , pages [ i ] )
CALLEE	300:2	300:2	14	fprintf
LEAF_NODE	300:2	300:2	15	fprintf
LEAF_NODE	300:9	300:9	14	(
ARGUMENT	300:10	300:10	14	stderr
FIELD	300:10	300:10	15	stderr
LEAF_NODE	300:10	300:10	16	stderr
LEAF_NODE	300:16	300:16	14	,
ARGUMENT	300:18	300:18	14	"%s: No page number %d\n"
FIELD	300:18	300:18	15	"%s: No page number %d\n"
LEAF_NODE	300:18	300:18	16	"%s: No page number %d\n"
LEAF_NODE	300:43	300:43	14	,
ARGUMENT	300:45	300:45	14	filename
FIELD	300:45	300:45	15	filename
LEAF_NODE	300:45	300:45	16	filename
LEAF_NODE	300:53	300:53	14	,
ARGUMENT	300:55	300:55	14	pages [ i ]
FIELD	300:55	300:62	15	pages [ i ]
LEAF_NODE	300:55	300:55	16	pages
LEAF_NODE	300:60	300:60	16	[
EXPR	300:61	300:61	16	i
FIELD	300:61	300:61	17	i
LEAF_NODE	300:61	300:61	18	i
LEAF_NODE	300:62	300:62	16	]
LEAF_NODE	300:63	300:63	14	)
LEAF_NODE	300:64	300:64	12	;
LEAF_NODE	301:1	301:1	8	}
LEAF_NODE	302:4	302:4	5	}
SELECTION	302:6	302:11	3	
KEYWORD	302:6	302:6	4	else
LEAF_NODE	302:6	302:6	5	else
STATEMENTS	302:11	307:4	4	
LEAF_NODE	302:11	302:11	5	{
STATEMENTS	303:1	306:31	5	
SIMPLE_DECL	303:1	303:22	6	uint16 pageNumber ; pageNumber = 0 ;
VAR_DECL	303:1	303:8	7	uint16 pageNumber ; pageNumber = 0
TYPE	303:1	303:1	8	uint16
TYPE_NAME	303:1	303:1	9	uint16
LEAF_NODE	303:1	303:1	10	uint16
NAME	303:8	303:8	8	pageNumber
LEAF_NODE	303:8	303:8	9	pageNumber
LEAF_NODE	0:0	0:0	8	;
INIT	303:8	303:8	8	pageNumber = 0
ASSIGN	303:8	303:21	9	pageNumber = 0
LVAL	303:8	303:8	10	pageNumber
NAME	303:8	303:8	11	pageNumber
LEAF_NODE	303:8	303:8	12	pageNumber
ASSIGN_OP	303:19	303:19	10	=
LEAF_NODE	303:19	303:19	11	=
RVAL	303:21	303:21	10	0
FIELD	303:21	303:21	11	0
LEAF_NODE	303:21	303:21	12	0
LEAF_NODE	303:22	303:22	7	;
ITERATION	304:1	305:5	6	
KEYWORD	304:1	304:1	7	do
LEAF_NODE	304:1	304:1	8	do
LEAF_NODE	306:7	306:7	7	(
CONDITION	306:8	306:8	7	TIFFReadDirectory ( tif )
EXPR	306:8	306:8	8	TIFFReadDirectory ( tif )
FUNCTION_CALL	306:8	306:29	9	TIFFReadDirectory ( tif )
CALLEE	306:8	306:8	10	TIFFReadDirectory
LEAF_NODE	306:8	306:8	11	TIFFReadDirectory
LEAF_NODE	306:25	306:25	10	(
ARGUMENT	306:26	306:26	10	tif
FIELD	306:26	306:26	11	tif
LEAF_NODE	306:26	306:26	12	tif
LEAF_NODE	306:29	306:29	10	)
LEAF_NODE	306:30	306:30	7	)
STATEMENTS	305:5	305:5	7	
EXPR_STATEMENT	305:5	305:32	8	printTIF ( tif , pageNumber ++ ) ;
EXPR	305:5	305:5	9	printTIF ( tif , pageNumber ++ )
FUNCTION_CALL	305:5	305:31	10	printTIF ( tif , pageNumber ++ )
CALLEE	305:5	305:5	11	printTIF
LEAF_NODE	305:5	305:5	12	printTIF
LEAF_NODE	305:13	305:13	11	(
ARGUMENT	305:14	305:14	11	tif
FIELD	305:14	305:14	12	tif
LEAF_NODE	305:14	305:14	13	tif
LEAF_NODE	305:17	305:17	11	,
ARGUMENT	305:19	305:19	11	pageNumber ++
FIELD	305:19	305:29	12	pageNumber ++
LEAF_NODE	305:19	305:19	13	pageNumber
LEAF_NODE	305:29	305:29	13	++
LEAF_NODE	305:31	305:31	11	)
LEAF_NODE	305:32	305:32	9	;
LEAF_NODE	306:31	306:31	6	;
LEAF_NODE	307:4	307:4	5	}
LEAF_NODE	308:0	308:0	2	}
FUNCTION_DEF	312:0	318:0	1	
RETURN_TYPE	312:0	312:7	2	static int
LEAF_NODE	312:0	312:0	3	static
TYPE_NAME	312:7	312:7	3	int
LEAF_NODE	312:7	312:7	4	int
FUNCTION_NAME	313:0	313:0	2	pcompar
LEAF_NODE	313:0	313:0	3	pcompar
PARAMETER_LIST	313:7	313:38	2	( const void * va , const void * vb )
LEAF_NODE	313:7	313:7	3	(
PARAMETER_DECL	313:8	313:20	3	const void * va
TYPE	313:8	313:18	4	const void *
TYPE_NAME	313:8	313:14	5	const void
LEAF_NODE	313:8	313:8	6	const
LEAF_NODE	313:14	313:14	6	void
POINTER	313:18	313:18	5	*
LEAF_NODE	313:18	313:18	6	*
NAME	313:20	313:20	4	va
LEAF_NODE	313:20	313:20	5	va
LEAF_NODE	313:22	313:22	3	,
PARAMETER_DECL	313:24	313:36	3	const void * vb
TYPE	313:24	313:34	4	const void *
TYPE_NAME	313:24	313:30	5	const void
LEAF_NODE	313:24	313:24	6	const
LEAF_NODE	313:30	313:30	6	void
POINTER	313:34	313:34	5	*
LEAF_NODE	313:34	313:34	6	*
NAME	313:36	313:36	4	vb
LEAF_NODE	313:36	313:36	5	vb
LEAF_NODE	313:38	313:38	3	)
LEAF_NODE	314:0	314:0	2	{
STATEMENTS	315:4	317:4	2	
SIMPLE_DECL	315:4	315:35	3	const int * pa ; pa = ( const int * ) va ;
VAR_DECL	315:4	315:15	4	const int * pa ; pa = ( const int * ) va
TYPE	315:4	315:13	5	const int *
TYPE_NAME	315:4	315:10	6	const int
LEAF_NODE	315:4	315:4	7	const
LEAF_NODE	315:10	315:10	7	int
POINTER	315:13	315:13	6	*
LEAF_NODE	315:13	315:13	7	*
NAME	315:15	315:15	5	pa
LEAF_NODE	315:15	315:15	6	pa
LEAF_NODE	0:0	0:0	5	;
INIT	315:15	315:15	5	pa = ( const int * ) va
ASSIGN	315:15	315:20	6	pa = ( const int * ) va
LVAL	315:15	315:15	7	pa
NAME	315:15	315:15	8	pa
LEAF_NODE	315:15	315:15	9	pa
ASSIGN_OP	315:18	315:18	7	=
LEAF_NODE	315:18	315:18	8	=
RVAL	315:20	315:33	7	( const int * ) va
LEAF_NODE	315:20	315:20	8	(
TYPE_NAME	315:21	315:27	8	const int
LEAF_NODE	315:21	315:21	9	const
LEAF_NODE	315:27	315:27	9	int
LEAF_NODE	315:30	315:30	8	*
LEAF_NODE	315:31	315:31	8	)
FIELD	315:33	315:33	8	va
LEAF_NODE	315:33	315:33	9	va
LEAF_NODE	315:35	315:35	4	;
SIMPLE_DECL	316:4	316:35	3	const int * pb ; pb = ( const int * ) vb ;
VAR_DECL	316:4	316:15	4	const int * pb ; pb = ( const int * ) vb
TYPE	316:4	316:13	5	const int *
TYPE_NAME	316:4	316:10	6	const int
LEAF_NODE	316:4	316:4	7	const
LEAF_NODE	316:10	316:10	7	int
POINTER	316:13	316:13	6	*
LEAF_NODE	316:13	316:13	7	*
NAME	316:15	316:15	5	pb
LEAF_NODE	316:15	316:15	6	pb
LEAF_NODE	0:0	0:0	5	;
INIT	316:15	316:15	5	pb = ( const int * ) vb
ASSIGN	316:15	316:20	6	pb = ( const int * ) vb
LVAL	316:15	316:15	7	pb
NAME	316:15	316:15	8	pb
LEAF_NODE	316:15	316:15	9	pb
ASSIGN_OP	316:18	316:18	7	=
LEAF_NODE	316:18	316:18	8	=
RVAL	316:20	316:33	7	( const int * ) vb
LEAF_NODE	316:20	316:20	8	(
TYPE_NAME	316:21	316:27	8	const int
LEAF_NODE	316:21	316:21	9	const
LEAF_NODE	316:27	316:27	9	int
LEAF_NODE	316:30	316:30	8	*
LEAF_NODE	316:31	316:31	8	)
FIELD	316:33	316:33	8	vb
LEAF_NODE	316:33	316:33	9	vb
LEAF_NODE	316:35	316:35	4	;
JUMP_STATEMENT	317:4	317:22	3	return ( * pa - * pb ) ;
KEYWORD	317:4	317:4	4	return
LEAF_NODE	317:4	317:4	5	return
DESTINATION	317:11	317:11	4	( * pa - * pb )
EXPR	317:11	317:21	5	( * pa - * pb )
LEAF_NODE	317:11	317:11	6	(
UNARY_EXPR	317:12	317:13	6	* pa
UNARY_OPERATOR	317:12	317:12	7	*
LEAF_NODE	317:12	317:12	8	*
FIELD	317:13	317:13	7	pa
LEAF_NODE	317:13	317:13	8	pa
LEAF_NODE	317:16	317:16	6	-
UNARY_EXPR	317:18	317:19	6	* pb
UNARY_OPERATOR	317:18	317:18	7	*
LEAF_NODE	317:18	317:18	8	*
FIELD	317:19	317:19	7	pb
LEAF_NODE	317:19	317:19	8	pb
LEAF_NODE	317:21	317:21	6	)
LEAF_NODE	317:22	317:22	4	;
LEAF_NODE	318:0	318:0	2	}
FUNCTION_DEF	322:0	425:0	1	
RETURN_TYPE	322:0	322:0	2	int
TYPE_NAME	322:0	322:0	3	int
LEAF_NODE	322:0	322:0	4	int
FUNCTION_NAME	323:0	323:0	2	main
LEAF_NODE	323:0	323:0	3	main
PARAMETER_LIST	323:4	323:26	2	( int argc , char * * argv )
LEAF_NODE	323:4	323:4	3	(
PARAMETER_DECL	323:5	323:9	3	int argc
TYPE	323:5	323:5	4	int
TYPE_NAME	323:5	323:5	5	int
LEAF_NODE	323:5	323:5	6	int
NAME	323:9	323:9	4	argc
LEAF_NODE	323:9	323:9	5	argc
LEAF_NODE	323:13	323:13	3	,
PARAMETER_DECL	323:15	323:22	3	char * * argv
TYPE	323:15	323:19	4	char * *
TYPE_NAME	323:15	323:15	5	char
LEAF_NODE	323:15	323:15	6	char
POINTER	323:19	323:20	5	* *
LEAF_NODE	323:19	323:19	6	*
LEAF_NODE	323:20	323:20	6	*
NAME	323:22	323:22	4	argv
LEAF_NODE	323:22	323:22	5	argv
LEAF_NODE	323:26	323:26	3	)
LEAF_NODE	324:0	324:0	2	{
STATEMENTS	326:4	424:4	2	
LEAF_NODE	326:4	326:4	3	extern
SIMPLE_DECL	326:11	326:21	3	int optind ;
VAR_DECL	326:11	326:15	4	int optind
TYPE	326:11	326:11	5	int
TYPE_NAME	326:11	326:11	6	int
LEAF_NODE	326:11	326:11	7	int
NAME	326:15	326:15	5	optind
LEAF_NODE	326:15	326:15	6	optind
LEAF_NODE	326:21	326:21	4	;
LEAF_NODE	327:4	327:4	3	extern
SIMPLE_DECL	327:11	327:23	3	char * optarg ;
VAR_DECL	327:11	327:17	4	char * optarg
TYPE	327:11	327:15	5	char *
TYPE_NAME	327:11	327:11	6	char
LEAF_NODE	327:11	327:11	7	char
POINTER	327:15	327:15	6	*
LEAF_NODE	327:15	327:15	7	*
NAME	327:17	327:17	5	optarg
LEAF_NODE	327:17	327:17	6	optarg
LEAF_NODE	327:23	327:23	4	;
SIMPLE_DECL	329:4	329:48	3	uint16 * pages ; pages = NULL , uint16 npages ; npages = 0 , uint16 pageNumber ;
INIT_DECL_LIST	329:4	329:4	4	uint16 * pages ; pages = NULL , uint16 npages ; npages = 0 , uint16 pageNumber
VAR_DECL	329:4	329:12	5	uint16 * pages ; pages = NULL
TYPE	329:4	329:11	6	uint16 *
TYPE_NAME	329:4	329:4	7	uint16
LEAF_NODE	329:4	329:4	8	uint16
POINTER	329:11	329:11	7	*
LEAF_NODE	329:11	329:11	8	*
NAME	329:12	329:12	6	pages
LEAF_NODE	329:12	329:12	7	pages
LEAF_NODE	0:0	0:0	6	;
INIT	329:12	329:12	6	pages = NULL
ASSIGN	329:12	329:20	7	pages = NULL
LVAL	329:12	329:12	8	pages
NAME	329:12	329:12	9	pages
LEAF_NODE	329:12	329:12	10	pages
ASSIGN_OP	329:18	329:18	8	=
LEAF_NODE	329:18	329:18	9	=
RVAL	329:20	329:20	8	NULL
FIELD	329:20	329:20	9	NULL
LEAF_NODE	329:20	329:20	10	NULL
LEAF_NODE	329:24	329:24	5	,
INIT_DECL_LIST	329:4	329:4	5	uint16 npages ; npages = 0 , uint16 pageNumber
VAR_DECL	329:4	329:26	6	uint16 npages ; npages = 0
TYPE	329:4	329:4	7	uint16
TYPE_NAME	329:4	329:4	8	uint16
LEAF_NODE	329:4	329:4	9	uint16
NAME	329:26	329:26	7	npages
LEAF_NODE	329:26	329:26	8	npages
LEAF_NODE	0:0	0:0	7	;
INIT	329:26	329:26	7	npages = 0
ASSIGN	329:26	329:35	8	npages = 0
LVAL	329:26	329:26	9	npages
NAME	329:26	329:26	10	npages
LEAF_NODE	329:26	329:26	11	npages
ASSIGN_OP	329:33	329:33	9	=
LEAF_NODE	329:33	329:33	10	=
RVAL	329:35	329:35	9	0
FIELD	329:35	329:35	10	0
LEAF_NODE	329:35	329:35	11	0
LEAF_NODE	329:36	329:36	6	,
VAR_DECL	329:4	329:38	6	uint16 pageNumber
TYPE	329:4	329:4	7	uint16
TYPE_NAME	329:4	329:4	8	uint16
LEAF_NODE	329:4	329:4	9	uint16
NAME	329:38	329:38	7	pageNumber
LEAF_NODE	329:38	329:38	8	pageNumber
LEAF_NODE	329:48	329:48	4	;
SIMPLE_DECL	330:4	330:25	3	int c , int dowarnings ; dowarnings = 0 ;
INIT_DECL_LIST	330:4	330:4	4	int c , int dowarnings ; dowarnings = 0
VAR_DECL	330:4	330:8	5	int c
TYPE	330:4	330:4	6	int
TYPE_NAME	330:4	330:4	7	int
LEAF_NODE	330:4	330:4	8	int
NAME	330:8	330:8	6	c
LEAF_NODE	330:8	330:8	7	c
LEAF_NODE	330:9	330:9	5	,
VAR_DECL	330:4	330:11	5	int dowarnings ; dowarnings = 0
TYPE	330:4	330:4	6	int
TYPE_NAME	330:4	330:4	7	int
LEAF_NODE	330:4	330:4	8	int
NAME	330:11	330:11	6	dowarnings
LEAF_NODE	330:11	330:11	7	dowarnings
LEAF_NODE	0:0	0:0	6	;
INIT	330:11	330:11	6	dowarnings = 0
ASSIGN	330:11	330:24	7	dowarnings = 0
LVAL	330:11	330:11	8	dowarnings
NAME	330:11	330:11	9	dowarnings
LEAF_NODE	330:11	330:11	10	dowarnings
ASSIGN_OP	330:22	330:22	8	=
LEAF_NODE	330:22	330:22	9	=
RVAL	330:24	330:24	8	0
FIELD	330:24	330:24	9	0
LEAF_NODE	330:24	330:24	10	0
LEAF_NODE	330:25	330:25	4	;
SIMPLE_DECL	331:4	331:13	3	TIFF * tif ;
VAR_DECL	331:4	331:10	4	TIFF * tif
TYPE	331:4	331:8	5	TIFF *
TYPE_NAME	331:4	331:4	6	TIFF
LEAF_NODE	331:4	331:4	7	TIFF
POINTER	331:8	331:8	6	*
LEAF_NODE	331:8	331:8	7	*
NAME	331:10	331:10	5	tif
LEAF_NODE	331:10	331:10	6	tif
LEAF_NODE	331:13	331:13	4	;
ITERATION	333:4	334:1	3	
KEYWORD	333:4	333:4	4	while
LEAF_NODE	333:4	333:4	5	while
LEAF_NODE	333:10	333:10	4	(
CONDITION	333:11	333:11	4	( c = getopt ( argc , argv , "l:p:x:y:W:H:wS" ) ) != - 1
EXPR	333:11	333:57	5	( c = getopt ( argc , argv , "l:p:x:y:W:H:wS" ) ) != - 1
LEAF_NODE	333:11	333:11	6	(
ASSIGN	333:12	333:16	6	c = getopt ( argc , argv , "l:p:x:y:W:H:wS" )
LVAL	333:12	333:12	7	c
FIELD	333:12	333:12	8	c
LEAF_NODE	333:12	333:12	9	c
ASSIGN_OP	333:14	333:14	7	=
LEAF_NODE	333:14	333:14	8	=
RVAL	333:16	333:16	7	getopt ( argc , argv , "l:p:x:y:W:H:wS" )
FUNCTION_CALL	333:16	333:51	8	getopt ( argc , argv , "l:p:x:y:W:H:wS" )
CALLEE	333:16	333:16	9	getopt
LEAF_NODE	333:16	333:16	10	getopt
LEAF_NODE	333:22	333:22	9	(
ARGUMENT	333:23	333:23	9	argc
FIELD	333:23	333:23	10	argc
LEAF_NODE	333:23	333:23	11	argc
LEAF_NODE	333:27	333:27	9	,
ARGUMENT	333:29	333:29	9	argv
FIELD	333:29	333:29	10	argv
LEAF_NODE	333:29	333:29	11	argv
LEAF_NODE	333:33	333:33	9	,
ARGUMENT	333:35	333:35	9	"l:p:x:y:W:H:wS"
FIELD	333:35	333:35	10	"l:p:x:y:W:H:wS"
LEAF_NODE	333:35	333:35	11	"l:p:x:y:W:H:wS"
LEAF_NODE	333:51	333:51	9	)
LEAF_NODE	333:52	333:52	6	)
EQ_OPERATOR	333:54	333:54	6	!=
LEAF_NODE	333:54	333:54	7	!=
UNARY_EXPR	333:57	333:58	6	- 1
UNARY_OPERATOR	333:57	333:57	7	-
LEAF_NODE	333:57	333:57	8	-
FIELD	333:58	333:58	7	1
LEAF_NODE	333:58	333:58	8	1
LEAF_NODE	333:59	333:59	4	)
STATEMENTS	334:1	334:1	4	
SELECTION	334:1	334:12	5	
KEYWORD	334:1	334:1	6	switch
LEAF_NODE	334:1	334:1	7	switch
LEAF_NODE	334:8	334:8	6	(
CONDITION	334:9	334:9	6	c
EXPR	334:9	334:9	7	c
FIELD	334:9	334:9	8	c
LEAF_NODE	334:9	334:9	9	c
LEAF_NODE	334:10	334:10	6	)
STATEMENTS	334:12	371:1	6	
LEAF_NODE	334:12	334:12	7	{
STATEMENTS	335:1	370:5	7	
LEAF_NODE	335:1	335:1	8	case
LEAF_NODE	335:6	335:6	8	'H'
LEAF_NODE	335:9	335:9	8	:
EXPR_STATEMENT	336:5	336:37	8	pageHeight = ( float ) atof ( optarg ) ;
EXPR	336:5	336:5	9	pageHeight = ( float ) atof ( optarg )
ASSIGN	336:5	336:18	10	pageHeight = ( float ) atof ( optarg )
LVAL	336:5	336:5	11	pageHeight
FIELD	336:5	336:5	12	pageHeight
LEAF_NODE	336:5	336:5	13	pageHeight
ASSIGN_OP	336:16	336:16	11	=
LEAF_NODE	336:16	336:16	12	=
RVAL	336:18	336:25	11	( float ) atof ( optarg )
LEAF_NODE	336:18	336:18	12	(
TYPE_NAME	336:19	336:19	12	float
LEAF_NODE	336:19	336:19	13	float
LEAF_NODE	336:24	336:24	12	)
FUNCTION_CALL	336:25	336:36	12	atof ( optarg )
CALLEE	336:25	336:25	13	atof
LEAF_NODE	336:25	336:25	14	atof
LEAF_NODE	336:29	336:29	13	(
ARGUMENT	336:30	336:30	13	optarg
FIELD	336:30	336:30	14	optarg
LEAF_NODE	336:30	336:30	15	optarg
LEAF_NODE	336:36	336:36	13	)
LEAF_NODE	336:37	336:37	9	;
JUMP_STATEMENT	337:5	337:10	8	break DESTINATION ;
KEYWORD	337:5	337:5	9	break
LEAF_NODE	337:5	337:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	337:10	337:10	9	;
LEAF_NODE	338:1	338:1	8	case
LEAF_NODE	338:6	338:6	8	'S'
LEAF_NODE	338:9	338:9	8	:
EXPR_STATEMENT	339:5	339:20	8	scaleToPage = 1 ;
EXPR	339:5	339:5	9	scaleToPage = 1
ASSIGN	339:5	339:19	10	scaleToPage = 1
LVAL	339:5	339:5	11	scaleToPage
FIELD	339:5	339:5	12	scaleToPage
LEAF_NODE	339:5	339:5	13	scaleToPage
ASSIGN_OP	339:17	339:17	11	=
LEAF_NODE	339:17	339:17	12	=
RVAL	339:19	339:19	11	1
FIELD	339:19	339:19	12	1
LEAF_NODE	339:19	339:19	13	1
LEAF_NODE	339:20	339:20	9	;
JUMP_STATEMENT	340:5	340:10	8	break DESTINATION ;
KEYWORD	340:5	340:5	9	break
LEAF_NODE	340:5	340:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	340:10	340:10	9	;
LEAF_NODE	341:1	341:1	8	case
LEAF_NODE	341:6	341:6	8	'W'
LEAF_NODE	341:9	341:9	8	:
EXPR_STATEMENT	342:5	342:36	8	pageWidth = ( float ) atof ( optarg ) ;
EXPR	342:5	342:5	9	pageWidth = ( float ) atof ( optarg )
ASSIGN	342:5	342:17	10	pageWidth = ( float ) atof ( optarg )
LVAL	342:5	342:5	11	pageWidth
FIELD	342:5	342:5	12	pageWidth
LEAF_NODE	342:5	342:5	13	pageWidth
ASSIGN_OP	342:15	342:15	11	=
LEAF_NODE	342:15	342:15	12	=
RVAL	342:17	342:24	11	( float ) atof ( optarg )
LEAF_NODE	342:17	342:17	12	(
TYPE_NAME	342:18	342:18	12	float
LEAF_NODE	342:18	342:18	13	float
LEAF_NODE	342:23	342:23	12	)
FUNCTION_CALL	342:24	342:35	12	atof ( optarg )
CALLEE	342:24	342:24	13	atof
LEAF_NODE	342:24	342:24	14	atof
LEAF_NODE	342:28	342:28	13	(
ARGUMENT	342:29	342:29	13	optarg
FIELD	342:29	342:29	14	optarg
LEAF_NODE	342:29	342:29	15	optarg
LEAF_NODE	342:35	342:35	13	)
LEAF_NODE	342:36	342:36	9	;
JUMP_STATEMENT	343:5	343:10	8	break DESTINATION ;
KEYWORD	343:5	343:5	9	break
LEAF_NODE	343:5	343:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	343:10	343:10	9	;
LEAF_NODE	344:1	344:1	8	case
LEAF_NODE	344:6	344:6	8	'p'
LEAF_NODE	344:9	344:9	8	:
EXPR_STATEMENT	345:5	345:38	8	pageNumber = ( uint16 ) atoi ( optarg ) ;
EXPR	345:5	345:5	9	pageNumber = ( uint16 ) atoi ( optarg )
ASSIGN	345:5	345:18	10	pageNumber = ( uint16 ) atoi ( optarg )
LVAL	345:5	345:5	11	pageNumber
FIELD	345:5	345:5	12	pageNumber
LEAF_NODE	345:5	345:5	13	pageNumber
ASSIGN_OP	345:16	345:16	11	=
LEAF_NODE	345:16	345:16	12	=
RVAL	345:18	345:26	11	( uint16 ) atoi ( optarg )
LEAF_NODE	345:18	345:18	12	(
TYPE_NAME	345:19	345:19	12	uint16
LEAF_NODE	345:19	345:19	13	uint16
LEAF_NODE	345:25	345:25	12	)
FUNCTION_CALL	345:26	345:37	12	atoi ( optarg )
CALLEE	345:26	345:26	13	atoi
LEAF_NODE	345:26	345:26	14	atoi
LEAF_NODE	345:30	345:30	13	(
ARGUMENT	345:31	345:31	13	optarg
FIELD	345:31	345:31	14	optarg
LEAF_NODE	345:31	345:31	15	optarg
LEAF_NODE	345:37	345:37	13	)
LEAF_NODE	345:38	345:38	9	;
SELECTION	346:5	347:2	8	
KEYWORD	346:5	346:5	9	if
LEAF_NODE	346:5	346:5	10	if
LEAF_NODE	346:8	346:8	9	(
CONDITION	346:9	346:9	9	pages
EXPR	346:9	346:9	10	pages
FIELD	346:9	346:9	11	pages
LEAF_NODE	346:9	346:9	12	pages
LEAF_NODE	346:14	346:14	9	)
STATEMENTS	347:2	347:2	9	
EXPR_STATEMENT	347:2	347:61	10	pages = ( uint16 * ) realloc ( pages , ( npages + 1 ) * sizeof ( uint16 ) ) ;
EXPR	347:2	347:2	11	pages = ( uint16 * ) realloc ( pages , ( npages + 1 ) * sizeof ( uint16 ) )
ASSIGN	347:2	347:10	12	pages = ( uint16 * ) realloc ( pages , ( npages + 1 ) * sizeof ( uint16 ) )
LVAL	347:2	347:2	13	pages
FIELD	347:2	347:2	14	pages
LEAF_NODE	347:2	347:2	15	pages
ASSIGN_OP	347:8	347:8	13	=
LEAF_NODE	347:8	347:8	14	=
RVAL	347:10	347:20	13	( uint16 * ) realloc ( pages , ( npages + 1 ) * sizeof ( uint16 ) )
LEAF_NODE	347:10	347:10	14	(
TYPE_NAME	347:11	347:11	14	uint16
LEAF_NODE	347:11	347:11	15	uint16
LEAF_NODE	347:17	347:17	14	*
LEAF_NODE	347:18	347:18	14	)
FUNCTION_CALL	347:20	347:60	14	realloc ( pages , ( npages + 1 ) * sizeof ( uint16 ) )
CALLEE	347:20	347:20	15	realloc
LEAF_NODE	347:20	347:20	16	realloc
LEAF_NODE	347:27	347:27	15	(
ARGUMENT	347:28	347:28	15	pages
FIELD	347:28	347:28	16	pages
LEAF_NODE	347:28	347:28	17	pages
LEAF_NODE	347:33	347:33	15	,
ARGUMENT	347:35	347:46	15	( npages + 1 ) * sizeof ( uint16 )
LEAF_NODE	347:35	347:35	16	(
FIELD	347:36	347:36	16	npages
LEAF_NODE	347:36	347:36	17	npages
LEAF_NODE	347:42	347:42	16	+
FIELD	347:43	347:43	16	1
LEAF_NODE	347:43	347:43	17	1
LEAF_NODE	347:44	347:44	16	)
LEAF_NODE	347:45	347:45	16	*
FUNCTION_CALL	347:46	347:59	16	sizeof ( uint16 )
CALLEE	347:46	347:46	17	sizeof
LEAF_NODE	347:46	347:46	18	sizeof
LEAF_NODE	347:52	347:52	17	(
ARGUMENT	347:53	347:53	17	uint16
FIELD	347:53	347:53	18	uint16
LEAF_NODE	347:53	347:53	19	uint16
LEAF_NODE	347:59	347:59	17	)
LEAF_NODE	347:60	347:60	15	)
LEAF_NODE	347:61	347:61	11	;
SELECTION	348:5	349:2	8	
KEYWORD	348:5	348:5	9	else
LEAF_NODE	348:5	348:5	10	else
STATEMENTS	349:2	349:2	9	
EXPR_STATEMENT	349:2	349:42	10	pages = ( uint16 * ) malloc ( sizeof ( uint16 ) ) ;
EXPR	349:2	349:2	11	pages = ( uint16 * ) malloc ( sizeof ( uint16 ) )
ASSIGN	349:2	349:10	12	pages = ( uint16 * ) malloc ( sizeof ( uint16 ) )
LVAL	349:2	349:2	13	pages
FIELD	349:2	349:2	14	pages
LEAF_NODE	349:2	349:2	15	pages
ASSIGN_OP	349:8	349:8	13	=
LEAF_NODE	349:8	349:8	14	=
RVAL	349:10	349:20	13	( uint16 * ) malloc ( sizeof ( uint16 ) )
LEAF_NODE	349:10	349:10	14	(
TYPE_NAME	349:11	349:11	14	uint16
LEAF_NODE	349:11	349:11	15	uint16
LEAF_NODE	349:17	349:17	14	*
LEAF_NODE	349:18	349:18	14	)
FUNCTION_CALL	349:20	349:41	14	malloc ( sizeof ( uint16 ) )
CALLEE	349:20	349:20	15	malloc
LEAF_NODE	349:20	349:20	16	malloc
LEAF_NODE	349:26	349:26	15	(
ARGUMENT	349:27	349:27	15	sizeof ( uint16 )
FUNCTION_CALL	349:27	349:40	16	sizeof ( uint16 )
CALLEE	349:27	349:27	17	sizeof
LEAF_NODE	349:27	349:27	18	sizeof
LEAF_NODE	349:33	349:33	17	(
ARGUMENT	349:34	349:34	17	uint16
FIELD	349:34	349:34	18	uint16
LEAF_NODE	349:34	349:34	19	uint16
LEAF_NODE	349:40	349:40	17	)
LEAF_NODE	349:41	349:41	15	)
LEAF_NODE	349:42	349:42	11	;
SELECTION	350:5	351:5	8	
KEYWORD	350:5	350:5	9	if
LEAF_NODE	350:5	350:5	10	if
LEAF_NODE	350:7	350:7	9	(
CONDITION	350:9	350:9	9	pages == NULL
EXPR	350:9	350:18	10	pages == NULL
FIELD	350:9	350:9	11	pages
LEAF_NODE	350:9	350:9	12	pages
EQ_OPERATOR	350:15	350:15	11	==
LEAF_NODE	350:15	350:15	12	==
FIELD	350:18	350:18	11	NULL
LEAF_NODE	350:18	350:18	12	NULL
LEAF_NODE	350:23	350:23	9	)
STATEMENTS	351:5	354:5	9	
LEAF_NODE	351:5	351:5	10	{
STATEMENTS	352:2	353:2	10	
EXPR_STATEMENT	352:2	352:36	11	fprintf ( stderr , "Out of memory\n" ) ;
EXPR	352:2	352:2	12	fprintf ( stderr , "Out of memory\n" )
FUNCTION_CALL	352:2	352:35	13	fprintf ( stderr , "Out of memory\n" )
CALLEE	352:2	352:2	14	fprintf
LEAF_NODE	352:2	352:2	15	fprintf
LEAF_NODE	352:9	352:9	14	(
ARGUMENT	352:10	352:10	14	stderr
FIELD	352:10	352:10	15	stderr
LEAF_NODE	352:10	352:10	16	stderr
LEAF_NODE	352:16	352:16	14	,
ARGUMENT	352:18	352:18	14	"Out of memory\n"
FIELD	352:18	352:18	15	"Out of memory\n"
LEAF_NODE	352:18	352:18	16	"Out of memory\n"
LEAF_NODE	352:35	352:35	14	)
LEAF_NODE	352:36	352:36	12	;
EXPR_STATEMENT	353:2	353:10	11	exit ( - 1 ) ;
EXPR	353:2	353:2	12	exit ( - 1 )
FUNCTION_CALL	353:2	353:9	13	exit ( - 1 )
CALLEE	353:2	353:2	14	exit
LEAF_NODE	353:2	353:2	15	exit
LEAF_NODE	353:6	353:6	14	(
ARGUMENT	353:7	353:7	14	- 1
UNARY_EXPR	353:7	353:8	15	- 1
UNARY_OPERATOR	353:7	353:7	16	-
LEAF_NODE	353:7	353:7	17	-
FIELD	353:8	353:8	16	1
LEAF_NODE	353:8	353:8	17	1
LEAF_NODE	353:9	353:9	14	)
LEAF_NODE	353:10	353:10	12	;
LEAF_NODE	354:5	354:5	10	}
EXPR_STATEMENT	355:5	355:33	8	pages [ npages ++ ] = pageNumber ;
EXPR	355:5	355:5	9	pages [ npages ++ ] = pageNumber
ASSIGN	355:5	355:23	10	pages [ npages ++ ] = pageNumber
LVAL	355:5	355:5	11	pages [ npages ++ ]
FIELD	355:5	355:19	12	pages [ npages ++ ]
LEAF_NODE	355:5	355:5	13	pages
LEAF_NODE	355:10	355:10	13	[
EXPR	355:11	355:11	13	npages ++
FIELD	355:11	355:17	14	npages ++
LEAF_NODE	355:11	355:11	15	npages
LEAF_NODE	355:17	355:17	15	++
LEAF_NODE	355:19	355:19	13	]
ASSIGN_OP	355:21	355:21	11	=
LEAF_NODE	355:21	355:21	12	=
RVAL	355:23	355:23	11	pageNumber
FIELD	355:23	355:23	12	pageNumber
LEAF_NODE	355:23	355:23	13	pageNumber
LEAF_NODE	355:33	355:33	9	;
JUMP_STATEMENT	356:5	356:10	8	break DESTINATION ;
KEYWORD	356:5	356:5	9	break
LEAF_NODE	356:5	356:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	356:10	356:10	9	;
LEAF_NODE	357:1	357:1	8	case
LEAF_NODE	357:6	357:6	8	'w'
LEAF_NODE	357:9	357:9	8	:
EXPR_STATEMENT	358:5	358:19	8	dowarnings = 1 ;
EXPR	358:5	358:5	9	dowarnings = 1
ASSIGN	358:5	358:18	10	dowarnings = 1
LVAL	358:5	358:5	11	dowarnings
FIELD	358:5	358:5	12	dowarnings
LEAF_NODE	358:5	358:5	13	dowarnings
ASSIGN_OP	358:16	358:16	11	=
LEAF_NODE	358:16	358:16	12	=
RVAL	358:18	358:18	11	1
FIELD	358:18	358:18	12	1
LEAF_NODE	358:18	358:18	13	1
LEAF_NODE	358:19	358:19	9	;
JUMP_STATEMENT	359:5	359:10	8	break DESTINATION ;
KEYWORD	359:5	359:5	9	break
LEAF_NODE	359:5	359:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	359:10	359:10	9	;
LEAF_NODE	360:1	360:1	8	case
LEAF_NODE	360:6	360:6	8	'x'
LEAF_NODE	360:9	360:9	8	:
EXPR_STATEMENT	361:5	361:34	8	defxres = ( float ) atof ( optarg ) ;
EXPR	361:5	361:5	9	defxres = ( float ) atof ( optarg )
ASSIGN	361:5	361:15	10	defxres = ( float ) atof ( optarg )
LVAL	361:5	361:5	11	defxres
FIELD	361:5	361:5	12	defxres
LEAF_NODE	361:5	361:5	13	defxres
ASSIGN_OP	361:13	361:13	11	=
LEAF_NODE	361:13	361:13	12	=
RVAL	361:15	361:22	11	( float ) atof ( optarg )
LEAF_NODE	361:15	361:15	12	(
TYPE_NAME	361:16	361:16	12	float
LEAF_NODE	361:16	361:16	13	float
LEAF_NODE	361:21	361:21	12	)
FUNCTION_CALL	361:22	361:33	12	atof ( optarg )
CALLEE	361:22	361:22	13	atof
LEAF_NODE	361:22	361:22	14	atof
LEAF_NODE	361:26	361:26	13	(
ARGUMENT	361:27	361:27	13	optarg
FIELD	361:27	361:27	14	optarg
LEAF_NODE	361:27	361:27	15	optarg
LEAF_NODE	361:33	361:33	13	)
LEAF_NODE	361:34	361:34	9	;
JUMP_STATEMENT	362:5	362:10	8	break DESTINATION ;
KEYWORD	362:5	362:5	9	break
LEAF_NODE	362:5	362:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	362:10	362:10	9	;
LEAF_NODE	363:1	363:1	8	case
LEAF_NODE	363:6	363:6	8	'y'
LEAF_NODE	363:9	363:9	8	:
EXPR_STATEMENT	364:5	364:34	8	defyres = ( float ) atof ( optarg ) ;
EXPR	364:5	364:5	9	defyres = ( float ) atof ( optarg )
ASSIGN	364:5	364:15	10	defyres = ( float ) atof ( optarg )
LVAL	364:5	364:5	11	defyres
FIELD	364:5	364:5	12	defyres
LEAF_NODE	364:5	364:5	13	defyres
ASSIGN_OP	364:13	364:13	11	=
LEAF_NODE	364:13	364:13	12	=
RVAL	364:15	364:22	11	( float ) atof ( optarg )
LEAF_NODE	364:15	364:15	12	(
TYPE_NAME	364:16	364:16	12	float
LEAF_NODE	364:16	364:16	13	float
LEAF_NODE	364:21	364:21	12	)
FUNCTION_CALL	364:22	364:33	12	atof ( optarg )
CALLEE	364:22	364:22	13	atof
LEAF_NODE	364:22	364:22	14	atof
LEAF_NODE	364:26	364:26	13	(
ARGUMENT	364:27	364:27	13	optarg
FIELD	364:27	364:27	14	optarg
LEAF_NODE	364:27	364:27	15	optarg
LEAF_NODE	364:33	364:33	13	)
LEAF_NODE	364:34	364:34	9	;
JUMP_STATEMENT	365:5	365:10	8	break DESTINATION ;
KEYWORD	365:5	365:5	9	break
LEAF_NODE	365:5	365:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	365:10	365:10	9	;
LEAF_NODE	366:1	366:1	8	case
LEAF_NODE	366:6	366:6	8	'l'
LEAF_NODE	366:9	366:9	8	:
EXPR_STATEMENT	367:5	367:27	8	maxline = atoi ( optarg ) ;
EXPR	367:5	367:5	9	maxline = atoi ( optarg )
ASSIGN	367:5	367:15	10	maxline = atoi ( optarg )
LVAL	367:5	367:5	11	maxline
FIELD	367:5	367:5	12	maxline
LEAF_NODE	367:5	367:5	13	maxline
ASSIGN_OP	367:13	367:13	11	=
LEAF_NODE	367:13	367:13	12	=
RVAL	367:15	367:15	11	atoi ( optarg )
FUNCTION_CALL	367:15	367:26	12	atoi ( optarg )
CALLEE	367:15	367:15	13	atoi
LEAF_NODE	367:15	367:15	14	atoi
LEAF_NODE	367:19	367:19	13	(
ARGUMENT	367:20	367:20	13	optarg
FIELD	367:20	367:20	14	optarg
LEAF_NODE	367:20	367:20	15	optarg
LEAF_NODE	367:26	367:26	13	)
LEAF_NODE	367:27	367:27	9	;
JUMP_STATEMENT	368:5	368:10	8	break DESTINATION ;
KEYWORD	368:5	368:5	9	break
LEAF_NODE	368:5	368:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	368:10	368:10	9	;
LEAF_NODE	369:1	369:1	8	case
LEAF_NODE	369:6	369:6	8	'?'
LEAF_NODE	369:9	369:9	8	:
EXPR_STATEMENT	370:5	370:14	8	usage ( - 1 ) ;
EXPR	370:5	370:5	9	usage ( - 1 )
FUNCTION_CALL	370:5	370:13	10	usage ( - 1 )
CALLEE	370:5	370:5	11	usage
LEAF_NODE	370:5	370:5	12	usage
LEAF_NODE	370:10	370:10	11	(
ARGUMENT	370:11	370:11	11	- 1
UNARY_EXPR	370:11	370:12	12	- 1
UNARY_OPERATOR	370:11	370:11	13	-
LEAF_NODE	370:11	370:11	14	-
FIELD	370:12	370:12	13	1
LEAF_NODE	370:12	370:12	14	1
LEAF_NODE	370:13	370:13	11	)
LEAF_NODE	370:14	370:14	9	;
LEAF_NODE	371:1	371:1	7	}
SELECTION	372:4	373:1	3	
KEYWORD	372:4	372:4	4	if
LEAF_NODE	372:4	372:4	5	if
LEAF_NODE	372:7	372:7	4	(
CONDITION	372:8	372:8	4	npages > 0
EXPR	372:8	372:17	5	npages > 0
FIELD	372:8	372:8	6	npages
LEAF_NODE	372:8	372:8	7	npages
REL_OPERATOR	372:15	372:15	6	>
LEAF_NODE	372:15	372:15	7	>
FIELD	372:17	372:17	6	0
LEAF_NODE	372:17	372:17	7	0
LEAF_NODE	372:18	372:18	4	)
STATEMENTS	373:1	373:1	4	
EXPR_STATEMENT	373:1	373:46	5	qsort ( pages , npages , sizeof ( uint16 ) , pcompar ) ;
EXPR	373:1	373:1	6	qsort ( pages , npages , sizeof ( uint16 ) , pcompar )
FUNCTION_CALL	373:1	373:45	7	qsort ( pages , npages , sizeof ( uint16 ) , pcompar )
CALLEE	373:1	373:1	8	qsort
LEAF_NODE	373:1	373:1	9	qsort
LEAF_NODE	373:6	373:6	8	(
ARGUMENT	373:7	373:7	8	pages
FIELD	373:7	373:7	9	pages
LEAF_NODE	373:7	373:7	10	pages
LEAF_NODE	373:12	373:12	8	,
ARGUMENT	373:14	373:14	8	npages
FIELD	373:14	373:14	9	npages
LEAF_NODE	373:14	373:14	10	npages
LEAF_NODE	373:20	373:20	8	,
ARGUMENT	373:22	373:22	8	sizeof ( uint16 )
FUNCTION_CALL	373:22	373:35	9	sizeof ( uint16 )
CALLEE	373:22	373:22	10	sizeof
LEAF_NODE	373:22	373:22	11	sizeof
LEAF_NODE	373:28	373:28	10	(
ARGUMENT	373:29	373:29	10	uint16
FIELD	373:29	373:29	11	uint16
LEAF_NODE	373:29	373:29	12	uint16
LEAF_NODE	373:35	373:35	10	)
LEAF_NODE	373:36	373:36	8	,
ARGUMENT	373:38	373:38	8	pcompar
FIELD	373:38	373:38	9	pcompar
LEAF_NODE	373:38	373:38	10	pcompar
LEAF_NODE	373:45	373:45	8	)
LEAF_NODE	373:46	373:46	6	;
SELECTION	374:4	375:1	3	
KEYWORD	374:4	374:4	4	if
LEAF_NODE	374:4	374:4	5	if
LEAF_NODE	374:7	374:7	4	(
CONDITION	374:8	374:8	4	! dowarnings
EXPR	374:8	374:8	5	! dowarnings
UNARY_EXPR	374:8	374:9	6	! dowarnings
UNARY_OPERATOR	374:8	374:8	7	!
LEAF_NODE	374:8	374:8	8	!
FIELD	374:9	374:9	7	dowarnings
LEAF_NODE	374:9	374:9	8	dowarnings
LEAF_NODE	374:19	374:19	4	)
STATEMENTS	375:1	375:1	4	
EXPR_STATEMENT	375:1	375:25	5	TIFFSetWarningHandler ( 0 ) ;
EXPR	375:1	375:1	6	TIFFSetWarningHandler ( 0 )
FUNCTION_CALL	375:1	375:24	7	TIFFSetWarningHandler ( 0 )
CALLEE	375:1	375:1	8	TIFFSetWarningHandler
LEAF_NODE	375:1	375:1	9	TIFFSetWarningHandler
LEAF_NODE	375:22	375:22	8	(
ARGUMENT	375:23	375:23	8	0
FIELD	375:23	375:23	9	0
LEAF_NODE	375:23	375:23	10	0
LEAF_NODE	375:24	375:24	8	)
LEAF_NODE	375:25	375:25	6	;
SELECTION	376:4	376:23	3	
KEYWORD	376:4	376:4	4	if
LEAF_NODE	376:4	376:4	5	if
LEAF_NODE	376:7	376:7	4	(
CONDITION	376:8	376:8	4	optind < argc
EXPR	376:8	376:17	5	optind < argc
FIELD	376:8	376:8	6	optind
LEAF_NODE	376:8	376:8	7	optind
REL_OPERATOR	376:15	376:15	6	<
LEAF_NODE	376:15	376:15	7	<
FIELD	376:17	376:17	6	argc
LEAF_NODE	376:17	376:17	7	argc
LEAF_NODE	376:21	376:21	4	)
STATEMENTS	376:23	386:4	4	
LEAF_NODE	376:23	376:23	5	{
STATEMENTS	377:1	385:26	5	
ITERATION	377:1	377:4	6	
KEYWORD	377:1	377:1	7	do
LEAF_NODE	377:1	377:1	8	do
LEAF_NODE	385:9	385:9	7	(
CONDITION	385:10	385:10	7	++ optind < argc
EXPR	385:10	385:21	8	++ optind < argc
LEAF_NODE	385:10	385:10	9	++
FIELD	385:12	385:12	9	optind
LEAF_NODE	385:12	385:12	10	optind
REL_OPERATOR	385:19	385:19	9	<
LEAF_NODE	385:19	385:19	10	<
FIELD	385:21	385:21	9	argc
LEAF_NODE	385:21	385:21	10	argc
LEAF_NODE	385:25	385:25	7	)
STATEMENTS	377:4	385:1	7	
LEAF_NODE	377:4	377:4	8	{
STATEMENTS	378:5	382:7	8	
EXPR_STATEMENT	378:5	378:38	9	tif = TIFFOpen ( argv [ optind ] , "r" ) ;
EXPR	378:5	378:5	10	tif = TIFFOpen ( argv [ optind ] , "r" )
ASSIGN	378:5	378:11	11	tif = TIFFOpen ( argv [ optind ] , "r" )
LVAL	378:5	378:5	12	tif
FIELD	378:5	378:5	13	tif
LEAF_NODE	378:5	378:5	14	tif
ASSIGN_OP	378:9	378:9	12	=
LEAF_NODE	378:9	378:9	13	=
RVAL	378:11	378:11	12	TIFFOpen ( argv [ optind ] , "r" )
FUNCTION_CALL	378:11	378:37	13	TIFFOpen ( argv [ optind ] , "r" )
CALLEE	378:11	378:11	14	TIFFOpen
LEAF_NODE	378:11	378:11	15	TIFFOpen
LEAF_NODE	378:19	378:19	14	(
ARGUMENT	378:20	378:20	14	argv [ optind ]
FIELD	378:20	378:31	15	argv [ optind ]
LEAF_NODE	378:20	378:20	16	argv
LEAF_NODE	378:24	378:24	16	[
EXPR	378:25	378:25	16	optind
FIELD	378:25	378:25	17	optind
LEAF_NODE	378:25	378:25	18	optind
LEAF_NODE	378:31	378:31	16	]
LEAF_NODE	378:32	378:32	14	,
ARGUMENT	378:34	378:34	14	"r"
FIELD	378:34	378:34	15	"r"
LEAF_NODE	378:34	378:34	16	"r"
LEAF_NODE	378:37	378:37	14	)
LEAF_NODE	378:38	378:38	10	;
SELECTION	379:5	379:14	9	
KEYWORD	379:5	379:5	10	if
LEAF_NODE	379:5	379:5	11	if
LEAF_NODE	379:8	379:8	10	(
CONDITION	379:9	379:9	10	tif
EXPR	379:9	379:9	11	tif
FIELD	379:9	379:9	12	tif
LEAF_NODE	379:9	379:9	13	tif
LEAF_NODE	379:12	379:12	10	)
STATEMENTS	379:14	382:5	10	
LEAF_NODE	379:14	379:14	11	{
STATEMENTS	380:2	381:2	11	
EXPR_STATEMENT	380:2	380:42	12	fax2ps ( tif , npages , pages , argv [ optind ] ) ;
EXPR	380:2	380:2	13	fax2ps ( tif , npages , pages , argv [ optind ] )
FUNCTION_CALL	380:2	380:41	14	fax2ps ( tif , npages , pages , argv [ optind ] )
CALLEE	380:2	380:2	15	fax2ps
LEAF_NODE	380:2	380:2	16	fax2ps
LEAF_NODE	380:8	380:8	15	(
ARGUMENT	380:9	380:9	15	tif
FIELD	380:9	380:9	16	tif
LEAF_NODE	380:9	380:9	17	tif
LEAF_NODE	380:12	380:12	15	,
ARGUMENT	380:14	380:14	15	npages
FIELD	380:14	380:14	16	npages
LEAF_NODE	380:14	380:14	17	npages
LEAF_NODE	380:20	380:20	15	,
ARGUMENT	380:22	380:22	15	pages
FIELD	380:22	380:22	16	pages
LEAF_NODE	380:22	380:22	17	pages
LEAF_NODE	380:27	380:27	15	,
ARGUMENT	380:29	380:29	15	argv [ optind ]
FIELD	380:29	380:40	16	argv [ optind ]
LEAF_NODE	380:29	380:29	17	argv
LEAF_NODE	380:33	380:33	17	[
EXPR	380:34	380:34	17	optind
FIELD	380:34	380:34	18	optind
LEAF_NODE	380:34	380:34	19	optind
LEAF_NODE	380:40	380:40	17	]
LEAF_NODE	380:41	380:41	15	)
LEAF_NODE	380:42	380:42	13	;
EXPR_STATEMENT	381:2	381:16	12	TIFFClose ( tif ) ;
EXPR	381:2	381:2	13	TIFFClose ( tif )
FUNCTION_CALL	381:2	381:15	14	TIFFClose ( tif )
CALLEE	381:2	381:2	15	TIFFClose
LEAF_NODE	381:2	381:2	16	TIFFClose
LEAF_NODE	381:11	381:11	15	(
ARGUMENT	381:12	381:12	15	tif
FIELD	381:12	381:12	16	tif
LEAF_NODE	381:12	381:12	17	tif
LEAF_NODE	381:15	381:15	15	)
LEAF_NODE	381:16	381:16	13	;
LEAF_NODE	382:5	382:5	11	}
SELECTION	382:7	383:2	9	
KEYWORD	382:7	382:7	10	else
LEAF_NODE	382:7	382:7	11	else
STATEMENTS	383:2	383:2	10	
EXPR_STATEMENT	383:2	384:19	11	fprintf ( stderr , "%s: Can not open, or not a TIFF file.\n" , argv [ optind ] ) ;
EXPR	383:2	383:2	12	fprintf ( stderr , "%s: Can not open, or not a TIFF file.\n" , argv [ optind ] )
FUNCTION_CALL	383:2	384:18	13	fprintf ( stderr , "%s: Can not open, or not a TIFF file.\n" , argv [ optind ] )
CALLEE	383:2	383:2	14	fprintf
LEAF_NODE	383:2	383:2	15	fprintf
LEAF_NODE	383:9	383:9	14	(
ARGUMENT	383:10	383:10	14	stderr
FIELD	383:10	383:10	15	stderr
LEAF_NODE	383:10	383:10	16	stderr
LEAF_NODE	383:16	383:16	14	,
ARGUMENT	383:18	383:18	14	"%s: Can not open, or not a TIFF file.\n"
FIELD	383:18	383:18	15	"%s: Can not open, or not a TIFF file.\n"
LEAF_NODE	383:18	383:18	16	"%s: Can not open, or not a TIFF file.\n"
LEAF_NODE	383:59	383:59	14	,
ARGUMENT	384:6	384:6	14	argv [ optind ]
FIELD	384:6	384:17	15	argv [ optind ]
LEAF_NODE	384:6	384:6	16	argv
LEAF_NODE	384:10	384:10	16	[
EXPR	384:11	384:11	16	optind
FIELD	384:11	384:11	17	optind
LEAF_NODE	384:11	384:11	18	optind
LEAF_NODE	384:17	384:17	16	]
LEAF_NODE	384:18	384:18	14	)
LEAF_NODE	384:19	384:19	12	;
LEAF_NODE	385:1	385:1	8	}
LEAF_NODE	385:26	385:26	6	;
LEAF_NODE	386:4	386:4	5	}
SELECTION	386:6	386:11	3	
KEYWORD	386:6	386:6	4	else
LEAF_NODE	386:6	386:6	5	else
STATEMENTS	386:11	419:4	4	
LEAF_NODE	386:11	386:11	5	{
STATEMENTS	387:1	418:1	5	
SIMPLE_DECL	387:1	387:6	6	int n ;
VAR_DECL	387:1	387:5	7	int n
TYPE	387:1	387:1	8	int
TYPE_NAME	387:1	387:1	9	int
LEAF_NODE	387:1	387:1	10	int
NAME	387:5	387:5	8	n
LEAF_NODE	387:5	387:5	9	n
LEAF_NODE	387:6	387:6	7	;
SIMPLE_DECL	388:1	388:9	6	FILE * fd ;
VAR_DECL	388:1	388:7	7	FILE * fd
TYPE	388:1	388:5	8	FILE *
TYPE_NAME	388:1	388:1	9	FILE
LEAF_NODE	388:1	388:1	10	FILE
POINTER	388:5	388:5	9	*
LEAF_NODE	388:5	388:5	10	*
NAME	388:7	388:7	8	fd
LEAF_NODE	388:7	388:7	9	fd
LEAF_NODE	388:9	388:9	7	;
SIMPLE_DECL	389:1	389:18	6	char [ 16 * 1024 ] buf ;
VAR_DECL	389:1	389:6	7	char [ 16 * 1024 ] buf
TYPE	389:1	389:9	8	char [ 16 * 1024 ]
TYPE_NAME	389:1	389:1	9	char
LEAF_NODE	389:1	389:1	10	char
TYPE_SUFFIX	389:9	389:17	9	[ 16 * 1024 ]
LEAF_NODE	389:9	389:9	10	[
FIELD	389:10	389:10	10	16
LEAF_NODE	389:10	389:10	11	16
LEAF_NODE	389:12	389:12	10	*
FIELD	389:13	389:13	10	1024
LEAF_NODE	389:13	389:13	11	1024
LEAF_NODE	389:17	389:17	10	]
NAME	389:6	389:6	8	buf
LEAF_NODE	389:6	389:6	9	buf
LEAF_NODE	389:18	389:18	7	;
EXPR_STATEMENT	391:1	391:15	6	fd = tmpfile ( ) ;
EXPR	391:1	391:1	7	fd = tmpfile ( )
ASSIGN	391:1	391:6	8	fd = tmpfile ( )
LVAL	391:1	391:1	9	fd
FIELD	391:1	391:1	10	fd
LEAF_NODE	391:1	391:1	11	fd
ASSIGN_OP	391:4	391:4	9	=
LEAF_NODE	391:4	391:4	10	=
RVAL	391:6	391:6	9	tmpfile ( )
FUNCTION_CALL	391:6	391:14	10	tmpfile ( )
CALLEE	391:6	391:6	11	tmpfile
LEAF_NODE	391:6	391:6	12	tmpfile
LEAF_NODE	391:13	391:13	11	(
LEAF_NODE	391:14	391:14	11	)
LEAF_NODE	391:15	391:15	7	;
SELECTION	392:1	392:17	6	
KEYWORD	392:1	392:1	7	if
LEAF_NODE	392:1	392:1	8	if
LEAF_NODE	392:4	392:4	7	(
CONDITION	392:5	392:5	7	fd == NULL
EXPR	392:5	392:11	8	fd == NULL
FIELD	392:5	392:5	9	fd
LEAF_NODE	392:5	392:5	10	fd
EQ_OPERATOR	392:8	392:8	9	==
LEAF_NODE	392:8	392:8	10	==
FIELD	392:11	392:11	9	NULL
LEAF_NODE	392:11	392:11	10	NULL
LEAF_NODE	392:15	392:15	7	)
STATEMENTS	392:17	395:1	7	
LEAF_NODE	392:17	392:17	8	{
STATEMENTS	393:5	394:5	8	
EXPR_STATEMENT	393:5	393:58	9	fprintf ( stderr , "Could not obtain temporary file.\n" ) ;
EXPR	393:5	393:5	10	fprintf ( stderr , "Could not obtain temporary file.\n" )
FUNCTION_CALL	393:5	393:57	11	fprintf ( stderr , "Could not obtain temporary file.\n" )
CALLEE	393:5	393:5	12	fprintf
LEAF_NODE	393:5	393:5	13	fprintf
LEAF_NODE	393:12	393:12	12	(
ARGUMENT	393:13	393:13	12	stderr
FIELD	393:13	393:13	13	stderr
LEAF_NODE	393:13	393:13	14	stderr
LEAF_NODE	393:19	393:19	12	,
ARGUMENT	393:21	393:21	12	"Could not obtain temporary file.\n"
FIELD	393:21	393:21	13	"Could not obtain temporary file.\n"
LEAF_NODE	393:21	393:21	14	"Could not obtain temporary file.\n"
LEAF_NODE	393:57	393:57	12	)
LEAF_NODE	393:58	393:58	10	;
EXPR_STATEMENT	394:5	394:13	9	exit ( - 2 ) ;
EXPR	394:5	394:5	10	exit ( - 2 )
FUNCTION_CALL	394:5	394:12	11	exit ( - 2 )
CALLEE	394:5	394:5	12	exit
LEAF_NODE	394:5	394:5	13	exit
LEAF_NODE	394:9	394:9	12	(
ARGUMENT	394:10	394:10	12	- 2
UNARY_EXPR	394:10	394:11	13	- 2
UNARY_OPERATOR	394:10	394:10	14	-
LEAF_NODE	394:10	394:10	15	-
FIELD	394:11	394:11	14	2
LEAF_NODE	394:11	394:11	15	2
LEAF_NODE	394:12	394:12	12	)
LEAF_NODE	394:13	394:13	10	;
LEAF_NODE	395:1	395:1	8	}
EXPR_STATEMENT	397:1	397:33	6	setmode ( fileno ( stdin ) , O_BINARY ) ;
EXPR	397:1	397:1	7	setmode ( fileno ( stdin ) , O_BINARY )
FUNCTION_CALL	397:1	397:32	8	setmode ( fileno ( stdin ) , O_BINARY )
CALLEE	397:1	397:1	9	setmode
LEAF_NODE	397:1	397:1	10	setmode
LEAF_NODE	397:8	397:8	9	(
ARGUMENT	397:9	397:9	9	fileno ( stdin )
FUNCTION_CALL	397:9	397:21	10	fileno ( stdin )
CALLEE	397:9	397:9	11	fileno
LEAF_NODE	397:9	397:9	12	fileno
LEAF_NODE	397:15	397:15	11	(
ARGUMENT	397:16	397:16	11	stdin
FIELD	397:16	397:16	12	stdin
LEAF_NODE	397:16	397:16	13	stdin
LEAF_NODE	397:21	397:21	11	)
LEAF_NODE	397:22	397:22	9	,
ARGUMENT	397:24	397:24	9	O_BINARY
FIELD	397:24	397:24	10	O_BINARY
LEAF_NODE	397:24	397:24	11	O_BINARY
LEAF_NODE	397:32	397:32	9	)
LEAF_NODE	397:33	397:33	7	;
ITERATION	399:1	399:58	6	
KEYWORD	399:1	399:1	7	while
LEAF_NODE	399:1	399:1	8	while
LEAF_NODE	399:7	399:7	7	(
CONDITION	399:8	399:8	7	( n = read ( fileno ( stdin ) , buf , sizeof ( buf ) ) ) > 0
EXPR	399:8	399:55	8	( n = read ( fileno ( stdin ) , buf , sizeof ( buf ) ) ) > 0
LEAF_NODE	399:8	399:8	9	(
ASSIGN	399:9	399:13	9	n = read ( fileno ( stdin ) , buf , sizeof ( buf ) )
LVAL	399:9	399:9	10	n
FIELD	399:9	399:9	11	n
LEAF_NODE	399:9	399:9	12	n
ASSIGN_OP	399:11	399:11	10	=
LEAF_NODE	399:11	399:11	11	=
RVAL	399:13	399:13	10	read ( fileno ( stdin ) , buf , sizeof ( buf ) )
FUNCTION_CALL	399:13	399:50	11	read ( fileno ( stdin ) , buf , sizeof ( buf ) )
CALLEE	399:13	399:13	12	read
LEAF_NODE	399:13	399:13	13	read
LEAF_NODE	399:17	399:17	12	(
ARGUMENT	399:18	399:18	12	fileno ( stdin )
FUNCTION_CALL	399:18	399:30	13	fileno ( stdin )
CALLEE	399:18	399:18	14	fileno
LEAF_NODE	399:18	399:18	15	fileno
LEAF_NODE	399:24	399:24	14	(
ARGUMENT	399:25	399:25	14	stdin
FIELD	399:25	399:25	15	stdin
LEAF_NODE	399:25	399:25	16	stdin
LEAF_NODE	399:30	399:30	14	)
LEAF_NODE	399:31	399:31	12	,
ARGUMENT	399:33	399:33	12	buf
FIELD	399:33	399:33	13	buf
LEAF_NODE	399:33	399:33	14	buf
LEAF_NODE	399:36	399:36	12	,
ARGUMENT	399:38	399:38	12	sizeof ( buf )
FUNCTION_CALL	399:38	399:49	13	sizeof ( buf )
CALLEE	399:38	399:38	14	sizeof
LEAF_NODE	399:38	399:38	15	sizeof
LEAF_NODE	399:45	399:45	14	(
ARGUMENT	399:46	399:46	14	buf
FIELD	399:46	399:46	15	buf
LEAF_NODE	399:46	399:46	16	buf
LEAF_NODE	399:49	399:49	14	)
LEAF_NODE	399:50	399:50	12	)
LEAF_NODE	399:51	399:51	9	)
REL_OPERATOR	399:53	399:53	9	>
LEAF_NODE	399:53	399:53	10	>
FIELD	399:55	399:55	9	0
LEAF_NODE	399:55	399:55	10	0
LEAF_NODE	399:56	399:56	7	)
STATEMENTS	399:58	406:8	7	
LEAF_NODE	399:58	399:58	8	{
STATEMENTS	400:16	400:16	8	
SELECTION	400:16	400:52	9	
KEYWORD	400:16	400:16	10	if
LEAF_NODE	400:16	400:16	11	if
LEAF_NODE	400:19	400:19	10	(
CONDITION	400:20	400:20	10	write ( fileno ( fd ) , buf , n ) != n
EXPR	400:20	400:49	11	write ( fileno ( fd ) , buf , n ) != n
FUNCTION_CALL	400:20	400:44	12	write ( fileno ( fd ) , buf , n )
CALLEE	400:20	400:20	13	write
LEAF_NODE	400:20	400:20	14	write
LEAF_NODE	400:25	400:25	13	(
ARGUMENT	400:26	400:26	13	fileno ( fd )
FUNCTION_CALL	400:26	400:35	14	fileno ( fd )
CALLEE	400:26	400:26	15	fileno
LEAF_NODE	400:26	400:26	16	fileno
LEAF_NODE	400:32	400:32	15	(
ARGUMENT	400:33	400:33	15	fd
FIELD	400:33	400:33	16	fd
LEAF_NODE	400:33	400:33	17	fd
LEAF_NODE	400:35	400:35	15	)
LEAF_NODE	400:36	400:36	13	,
ARGUMENT	400:38	400:38	13	buf
FIELD	400:38	400:38	14	buf
LEAF_NODE	400:38	400:38	15	buf
LEAF_NODE	400:41	400:41	13	,
ARGUMENT	400:43	400:43	13	n
FIELD	400:43	400:43	14	n
LEAF_NODE	400:43	400:43	15	n
LEAF_NODE	400:44	400:44	13	)
EQ_OPERATOR	400:46	400:46	12	!=
LEAF_NODE	400:46	400:46	13	!=
FIELD	400:49	400:49	12	n
LEAF_NODE	400:49	400:49	13	n
LEAF_NODE	400:50	400:50	10	)
STATEMENTS	400:52	405:16	10	
LEAF_NODE	400:52	400:52	11	{
STATEMENTS	401:24	404:24	11	
EXPR_STATEMENT	401:24	401:34	12	fclose ( fd ) ;
EXPR	401:24	401:24	13	fclose ( fd )
FUNCTION_CALL	401:24	401:33	14	fclose ( fd )
CALLEE	401:24	401:24	15	fclose
LEAF_NODE	401:24	401:24	16	fclose
LEAF_NODE	401:30	401:30	15	(
ARGUMENT	401:31	401:31	15	fd
FIELD	401:31	401:31	16	fd
LEAF_NODE	401:31	401:31	17	fd
LEAF_NODE	401:33	401:33	15	)
LEAF_NODE	401:34	401:34	13	;
EXPR_STATEMENT	402:24	403:76	12	fprintf ( stderr , "Could not copy stdin to temporary file.\n" ) ;
EXPR	402:24	402:24	13	fprintf ( stderr , "Could not copy stdin to temporary file.\n" )
FUNCTION_CALL	402:24	403:75	14	fprintf ( stderr , "Could not copy stdin to temporary file.\n" )
CALLEE	402:24	402:24	15	fprintf
LEAF_NODE	402:24	402:24	16	fprintf
LEAF_NODE	402:31	402:31	15	(
ARGUMENT	402:32	402:32	15	stderr
FIELD	402:32	402:32	16	stderr
LEAF_NODE	402:32	402:32	17	stderr
LEAF_NODE	402:38	402:38	15	,
ARGUMENT	403:32	403:32	15	"Could not copy stdin to temporary file.\n"
FIELD	403:32	403:32	16	"Could not copy stdin to temporary file.\n"
LEAF_NODE	403:32	403:32	17	"Could not copy stdin to temporary file.\n"
LEAF_NODE	403:75	403:75	15	)
LEAF_NODE	403:76	403:76	13	;
EXPR_STATEMENT	404:24	404:32	12	exit ( - 2 ) ;
EXPR	404:24	404:24	13	exit ( - 2 )
FUNCTION_CALL	404:24	404:31	14	exit ( - 2 )
CALLEE	404:24	404:24	15	exit
LEAF_NODE	404:24	404:24	16	exit
LEAF_NODE	404:28	404:28	15	(
ARGUMENT	404:29	404:29	15	- 2
UNARY_EXPR	404:29	404:30	16	- 2
UNARY_OPERATOR	404:29	404:29	17	-
LEAF_NODE	404:29	404:29	18	-
FIELD	404:30	404:30	17	2
LEAF_NODE	404:30	404:30	18	2
LEAF_NODE	404:31	404:31	15	)
LEAF_NODE	404:32	404:32	13	;
LEAF_NODE	405:16	405:16	11	}
LEAF_NODE	406:8	406:8	8	}
EXPR_STATEMENT	407:1	407:39	6	_TIFF_lseek_f ( fileno ( fd ) , 0 , SEEK_SET ) ;
EXPR	407:1	407:1	7	_TIFF_lseek_f ( fileno ( fd ) , 0 , SEEK_SET )
FUNCTION_CALL	407:1	407:38	8	_TIFF_lseek_f ( fileno ( fd ) , 0 , SEEK_SET )
CALLEE	407:1	407:1	9	_TIFF_lseek_f
LEAF_NODE	407:1	407:1	10	_TIFF_lseek_f
LEAF_NODE	407:14	407:14	9	(
ARGUMENT	407:15	407:15	9	fileno ( fd )
FUNCTION_CALL	407:15	407:24	10	fileno ( fd )
CALLEE	407:15	407:15	11	fileno
LEAF_NODE	407:15	407:15	12	fileno
LEAF_NODE	407:21	407:21	11	(
ARGUMENT	407:22	407:22	11	fd
FIELD	407:22	407:22	12	fd
LEAF_NODE	407:22	407:22	13	fd
LEAF_NODE	407:24	407:24	11	)
LEAF_NODE	407:25	407:25	9	,
ARGUMENT	407:27	407:27	9	0
FIELD	407:27	407:27	10	0
LEAF_NODE	407:27	407:27	11	0
LEAF_NODE	407:28	407:28	9	,
ARGUMENT	407:30	407:30	9	SEEK_SET
FIELD	407:30	407:30	10	SEEK_SET
LEAF_NODE	407:30	407:30	11	SEEK_SET
LEAF_NODE	407:38	407:38	9	)
LEAF_NODE	407:39	407:39	7	;
EXPR_STATEMENT	409:1	409:58	6	tif = TIFFFdOpen ( _get_osfhandle ( fileno ( fd ) ) , "temp" , "r" ) ;
EXPR	409:1	409:1	7	tif = TIFFFdOpen ( _get_osfhandle ( fileno ( fd ) ) , "temp" , "r" )
ASSIGN	409:1	409:7	8	tif = TIFFFdOpen ( _get_osfhandle ( fileno ( fd ) ) , "temp" , "r" )
LVAL	409:1	409:1	9	tif
FIELD	409:1	409:1	10	tif
LEAF_NODE	409:1	409:1	11	tif
ASSIGN_OP	409:5	409:5	9	=
LEAF_NODE	409:5	409:5	10	=
RVAL	409:7	409:7	9	TIFFFdOpen ( _get_osfhandle ( fileno ( fd ) ) , "temp" , "r" )
FUNCTION_CALL	409:7	409:57	10	TIFFFdOpen ( _get_osfhandle ( fileno ( fd ) ) , "temp" , "r" )
CALLEE	409:7	409:7	11	TIFFFdOpen
LEAF_NODE	409:7	409:7	12	TIFFFdOpen
LEAF_NODE	409:17	409:17	11	(
ARGUMENT	409:18	409:18	11	_get_osfhandle ( fileno ( fd ) )
FUNCTION_CALL	409:18	409:43	12	_get_osfhandle ( fileno ( fd ) )
CALLEE	409:18	409:18	13	_get_osfhandle
LEAF_NODE	409:18	409:18	14	_get_osfhandle
LEAF_NODE	409:32	409:32	13	(
ARGUMENT	409:33	409:33	13	fileno ( fd )
FUNCTION_CALL	409:33	409:42	14	fileno ( fd )
CALLEE	409:33	409:33	15	fileno
LEAF_NODE	409:33	409:33	16	fileno
LEAF_NODE	409:39	409:39	15	(
ARGUMENT	409:40	409:40	15	fd
FIELD	409:40	409:40	16	fd
LEAF_NODE	409:40	409:40	17	fd
LEAF_NODE	409:42	409:42	15	)
LEAF_NODE	409:43	409:43	13	)
LEAF_NODE	409:44	409:44	11	,
ARGUMENT	409:46	409:46	11	"temp"
FIELD	409:46	409:46	12	"temp"
LEAF_NODE	409:46	409:46	13	"temp"
LEAF_NODE	409:52	409:52	11	,
ARGUMENT	409:54	409:54	11	"r"
FIELD	409:54	409:54	12	"r"
LEAF_NODE	409:54	409:54	13	"r"
LEAF_NODE	409:57	409:57	11	)
LEAF_NODE	409:58	409:58	7	;
EXPR_STATEMENT	411:1	411:42	6	tif = TIFFFdOpen ( fileno ( fd ) , "temp" , "r" ) ;
EXPR	411:1	411:1	7	tif = TIFFFdOpen ( fileno ( fd ) , "temp" , "r" )
ASSIGN	411:1	411:7	8	tif = TIFFFdOpen ( fileno ( fd ) , "temp" , "r" )
LVAL	411:1	411:1	9	tif
FIELD	411:1	411:1	10	tif
LEAF_NODE	411:1	411:1	11	tif
ASSIGN_OP	411:5	411:5	9	=
LEAF_NODE	411:5	411:5	10	=
RVAL	411:7	411:7	9	TIFFFdOpen ( fileno ( fd ) , "temp" , "r" )
FUNCTION_CALL	411:7	411:41	10	TIFFFdOpen ( fileno ( fd ) , "temp" , "r" )
CALLEE	411:7	411:7	11	TIFFFdOpen
LEAF_NODE	411:7	411:7	12	TIFFFdOpen
LEAF_NODE	411:17	411:17	11	(
ARGUMENT	411:18	411:18	11	fileno ( fd )
FUNCTION_CALL	411:18	411:27	12	fileno ( fd )
CALLEE	411:18	411:18	13	fileno
LEAF_NODE	411:18	411:18	14	fileno
LEAF_NODE	411:24	411:24	13	(
ARGUMENT	411:25	411:25	13	fd
FIELD	411:25	411:25	14	fd
LEAF_NODE	411:25	411:25	15	fd
LEAF_NODE	411:27	411:27	13	)
LEAF_NODE	411:28	411:28	11	,
ARGUMENT	411:30	411:30	11	"temp"
FIELD	411:30	411:30	12	"temp"
LEAF_NODE	411:30	411:30	13	"temp"
LEAF_NODE	411:36	411:36	11	,
ARGUMENT	411:38	411:38	11	"r"
FIELD	411:38	411:38	12	"r"
LEAF_NODE	411:38	411:38	13	"r"
LEAF_NODE	411:41	411:41	11	)
LEAF_NODE	411:42	411:42	7	;
SELECTION	413:1	413:10	6	
KEYWORD	413:1	413:1	7	if
LEAF_NODE	413:1	413:1	8	if
LEAF_NODE	413:4	413:4	7	(
CONDITION	413:5	413:5	7	tif
EXPR	413:5	413:5	8	tif
FIELD	413:5	413:5	9	tif
LEAF_NODE	413:5	413:5	10	tif
LEAF_NODE	413:8	413:8	7	)
STATEMENTS	413:10	416:1	7	
LEAF_NODE	413:10	413:10	8	{
STATEMENTS	414:5	415:5	8	
EXPR_STATEMENT	414:5	414:42	9	fax2ps ( tif , npages , pages , "<stdin>" ) ;
EXPR	414:5	414:5	10	fax2ps ( tif , npages , pages , "<stdin>" )
FUNCTION_CALL	414:5	414:41	11	fax2ps ( tif , npages , pages , "<stdin>" )
CALLEE	414:5	414:5	12	fax2ps
LEAF_NODE	414:5	414:5	13	fax2ps
LEAF_NODE	414:11	414:11	12	(
ARGUMENT	414:12	414:12	12	tif
FIELD	414:12	414:12	13	tif
LEAF_NODE	414:12	414:12	14	tif
LEAF_NODE	414:15	414:15	12	,
ARGUMENT	414:17	414:17	12	npages
FIELD	414:17	414:17	13	npages
LEAF_NODE	414:17	414:17	14	npages
LEAF_NODE	414:23	414:23	12	,
ARGUMENT	414:25	414:25	12	pages
FIELD	414:25	414:25	13	pages
LEAF_NODE	414:25	414:25	14	pages
LEAF_NODE	414:30	414:30	12	,
ARGUMENT	414:32	414:32	12	"<stdin>"
FIELD	414:32	414:32	13	"<stdin>"
LEAF_NODE	414:32	414:32	14	"<stdin>"
LEAF_NODE	414:41	414:41	12	)
LEAF_NODE	414:42	414:42	10	;
EXPR_STATEMENT	415:5	415:19	9	TIFFClose ( tif ) ;
EXPR	415:5	415:5	10	TIFFClose ( tif )
FUNCTION_CALL	415:5	415:18	11	TIFFClose ( tif )
CALLEE	415:5	415:5	12	TIFFClose
LEAF_NODE	415:5	415:5	13	TIFFClose
LEAF_NODE	415:14	415:14	12	(
ARGUMENT	415:15	415:15	12	tif
FIELD	415:15	415:15	13	tif
LEAF_NODE	415:15	415:15	14	tif
LEAF_NODE	415:18	415:18	12	)
LEAF_NODE	415:19	415:19	10	;
LEAF_NODE	416:1	416:1	8	}
SELECTION	416:3	417:5	6	
KEYWORD	416:3	416:3	7	else
LEAF_NODE	416:3	416:3	8	else
STATEMENTS	417:5	417:5	7	
EXPR_STATEMENT	417:5	417:59	8	fprintf ( stderr , "Can not open, or not a TIFF file.\n" ) ;
EXPR	417:5	417:5	9	fprintf ( stderr , "Can not open, or not a TIFF file.\n" )
FUNCTION_CALL	417:5	417:58	10	fprintf ( stderr , "Can not open, or not a TIFF file.\n" )
CALLEE	417:5	417:5	11	fprintf
LEAF_NODE	417:5	417:5	12	fprintf
LEAF_NODE	417:12	417:12	11	(
ARGUMENT	417:13	417:13	11	stderr
FIELD	417:13	417:13	12	stderr
LEAF_NODE	417:13	417:13	13	stderr
LEAF_NODE	417:19	417:19	11	,
ARGUMENT	417:21	417:21	11	"Can not open, or not a TIFF file.\n"
FIELD	417:21	417:21	12	"Can not open, or not a TIFF file.\n"
LEAF_NODE	417:21	417:21	13	"Can not open, or not a TIFF file.\n"
LEAF_NODE	417:58	417:58	11	)
LEAF_NODE	417:59	417:59	9	;
EXPR_STATEMENT	418:1	418:11	6	fclose ( fd ) ;
EXPR	418:1	418:1	7	fclose ( fd )
FUNCTION_CALL	418:1	418:10	8	fclose ( fd )
CALLEE	418:1	418:1	9	fclose
LEAF_NODE	418:1	418:1	10	fclose
LEAF_NODE	418:7	418:7	9	(
ARGUMENT	418:8	418:8	9	fd
FIELD	418:8	418:8	10	fd
LEAF_NODE	418:8	418:8	11	fd
LEAF_NODE	418:10	418:10	9	)
LEAF_NODE	418:11	418:11	7	;
LEAF_NODE	419:4	419:4	5	}
EXPR_STATEMENT	420:4	420:27	3	printf ( "%%%%Trailer\n" ) ;
EXPR	420:4	420:4	4	printf ( "%%%%Trailer\n" )
FUNCTION_CALL	420:4	420:26	5	printf ( "%%%%Trailer\n" )
CALLEE	420:4	420:4	6	printf
LEAF_NODE	420:4	420:4	7	printf
LEAF_NODE	420:10	420:10	6	(
ARGUMENT	420:11	420:11	6	"%%%%Trailer\n"
FIELD	420:11	420:11	7	"%%%%Trailer\n"
LEAF_NODE	420:11	420:11	8	"%%%%Trailer\n"
LEAF_NODE	420:26	420:26	6	)
LEAF_NODE	420:27	420:27	4	;
EXPR_STATEMENT	421:4	421:41	3	printf ( "%%%%Pages: %u\n" , totalPages ) ;
EXPR	421:4	421:4	4	printf ( "%%%%Pages: %u\n" , totalPages )
FUNCTION_CALL	421:4	421:40	5	printf ( "%%%%Pages: %u\n" , totalPages )
CALLEE	421:4	421:4	6	printf
LEAF_NODE	421:4	421:4	7	printf
LEAF_NODE	421:10	421:10	6	(
ARGUMENT	421:11	421:11	6	"%%%%Pages: %u\n"
FIELD	421:11	421:11	7	"%%%%Pages: %u\n"
LEAF_NODE	421:11	421:11	8	"%%%%Pages: %u\n"
LEAF_NODE	421:28	421:28	6	,
ARGUMENT	421:30	421:30	6	totalPages
FIELD	421:30	421:30	7	totalPages
LEAF_NODE	421:30	421:30	8	totalPages
LEAF_NODE	421:40	421:40	6	)
LEAF_NODE	421:41	421:41	4	;
EXPR_STATEMENT	422:4	422:23	3	printf ( "%%%%EOF\n" ) ;
EXPR	422:4	422:4	4	printf ( "%%%%EOF\n" )
FUNCTION_CALL	422:4	422:22	5	printf ( "%%%%EOF\n" )
CALLEE	422:4	422:4	6	printf
LEAF_NODE	422:4	422:4	7	printf
LEAF_NODE	422:10	422:10	6	(
ARGUMENT	422:11	422:11	6	"%%%%EOF\n"
FIELD	422:11	422:11	7	"%%%%EOF\n"
LEAF_NODE	422:11	422:11	8	"%%%%EOF\n"
LEAF_NODE	422:22	422:22	6	)
LEAF_NODE	422:23	422:23	4	;
JUMP_STATEMENT	424:4	424:14	3	return ( 0 ) ;
KEYWORD	424:4	424:4	4	return
LEAF_NODE	424:4	424:4	5	return
DESTINATION	424:11	424:11	4	( 0 )
EXPR	424:11	424:13	5	( 0 )
LEAF_NODE	424:11	424:11	6	(
FIELD	424:12	424:12	6	0
LEAF_NODE	424:12	424:12	7	0
LEAF_NODE	424:13	424:13	6	)
LEAF_NODE	424:14	424:14	4	;
LEAF_NODE	425:0	425:0	2	}
FUNCTION_DEF	441:0	452:0	1	
RETURN_TYPE	441:0	441:7	2	static void
LEAF_NODE	441:0	441:0	3	static
TYPE_NAME	441:7	441:7	3	void
LEAF_NODE	441:7	441:7	4	void
FUNCTION_NAME	442:0	442:0	2	usage
LEAF_NODE	442:0	442:0	3	usage
PARAMETER_LIST	442:5	442:14	2	( int code )
LEAF_NODE	442:5	442:5	3	(
PARAMETER_DECL	442:6	442:10	3	int code
TYPE	442:6	442:6	4	int
TYPE_NAME	442:6	442:6	5	int
LEAF_NODE	442:6	442:6	6	int
NAME	442:10	442:10	4	code
LEAF_NODE	442:10	442:10	5	code
LEAF_NODE	442:14	442:14	3	)
LEAF_NODE	443:0	443:0	2	{
STATEMENTS	444:1	451:1	2	
SIMPLE_DECL	444:1	444:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	444:1	444:6	4	char [ BUFSIZ ] buf
TYPE	444:1	444:9	5	char [ BUFSIZ ]
TYPE_NAME	444:1	444:1	6	char
LEAF_NODE	444:1	444:1	7	char
TYPE_SUFFIX	444:9	444:16	6	[ BUFSIZ ]
LEAF_NODE	444:9	444:9	7	[
FIELD	444:10	444:10	7	BUFSIZ
LEAF_NODE	444:10	444:10	8	BUFSIZ
LEAF_NODE	444:16	444:16	7	]
NAME	444:6	444:6	5	buf
LEAF_NODE	444:6	444:6	6	buf
LEAF_NODE	444:17	444:17	4	;
SIMPLE_DECL	445:1	445:6	3	int i ;
VAR_DECL	445:1	445:5	4	int i
TYPE	445:1	445:1	5	int
TYPE_NAME	445:1	445:1	6	int
LEAF_NODE	445:1	445:1	7	int
NAME	445:5	445:5	5	i
LEAF_NODE	445:5	445:5	6	i
LEAF_NODE	445:6	445:6	4	;
EXPR_STATEMENT	447:1	447:20	3	setbuf ( stderr , buf ) ;
EXPR	447:1	447:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	447:1	447:19	5	setbuf ( stderr , buf )
CALLEE	447:1	447:1	6	setbuf
LEAF_NODE	447:1	447:1	7	setbuf
LEAF_NODE	447:7	447:7	6	(
ARGUMENT	447:8	447:8	6	stderr
FIELD	447:8	447:8	7	stderr
LEAF_NODE	447:8	447:8	8	stderr
LEAF_NODE	447:14	447:14	6	,
ARGUMENT	447:16	447:16	6	buf
FIELD	447:16	447:16	7	buf
LEAF_NODE	447:16	447:16	8	buf
LEAF_NODE	447:19	447:19	6	)
LEAF_NODE	447:20	447:20	4	;
EXPR_STATEMENT	448:8	448:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	448:8	448:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	448:8	448:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	448:8	448:8	6	fprintf
LEAF_NODE	448:8	448:8	7	fprintf
LEAF_NODE	448:15	448:15	6	(
ARGUMENT	448:16	448:16	6	stderr
FIELD	448:16	448:16	7	stderr
LEAF_NODE	448:16	448:16	8	stderr
LEAF_NODE	448:22	448:22	6	,
ARGUMENT	448:24	448:24	6	"%s\n\n"
FIELD	448:24	448:24	7	"%s\n\n"
LEAF_NODE	448:24	448:24	8	"%s\n\n"
LEAF_NODE	448:32	448:32	6	,
ARGUMENT	448:34	448:34	6	TIFFGetVersion ( )
FUNCTION_CALL	448:34	448:49	7	TIFFGetVersion ( )
CALLEE	448:34	448:34	8	TIFFGetVersion
LEAF_NODE	448:34	448:34	9	TIFFGetVersion
LEAF_NODE	448:48	448:48	8	(
LEAF_NODE	448:49	448:49	8	)
LEAF_NODE	448:50	448:50	6	)
LEAF_NODE	448:51	448:51	4	;
ITERATION	449:1	450:2	3	
KEYWORD	449:1	449:1	4	for
LEAF_NODE	449:1	449:1	5	for
LEAF_NODE	449:5	449:5	4	(
FOR_INIT	449:6	449:11	4	i = 0 ;
EXPR	449:6	449:6	5	i = 0
ASSIGN	449:6	449:10	6	i = 0
LVAL	449:6	449:6	7	i
FIELD	449:6	449:6	8	i
LEAF_NODE	449:6	449:6	9	i
ASSIGN_OP	449:8	449:8	7	=
LEAF_NODE	449:8	449:8	8	=
RVAL	449:10	449:10	7	0
FIELD	449:10	449:10	8	0
LEAF_NODE	449:10	449:10	9	0
LEAF_NODE	449:11	449:11	5	;
CONDITION	449:13	449:13	4	stuff [ i ] != NULL
EXPR	449:13	449:25	5	stuff [ i ] != NULL
FIELD	449:13	449:20	6	stuff [ i ]
LEAF_NODE	449:13	449:13	7	stuff
LEAF_NODE	449:18	449:18	7	[
EXPR	449:19	449:19	7	i
FIELD	449:19	449:19	8	i
LEAF_NODE	449:19	449:19	9	i
LEAF_NODE	449:20	449:20	7	]
EQ_OPERATOR	449:22	449:22	6	!=
LEAF_NODE	449:22	449:22	7	!=
FIELD	449:25	449:25	6	NULL
LEAF_NODE	449:25	449:25	7	NULL
LEAF_NODE	449:29	449:29	4	;
FOR_EXPR	449:31	449:31	4	i ++
EXPR	449:31	449:31	5	i ++
FIELD	449:31	449:32	6	i ++
LEAF_NODE	449:31	449:31	7	i
LEAF_NODE	449:32	449:32	7	++
LEAF_NODE	449:34	449:34	4	)
STATEMENTS	450:2	450:2	4	
EXPR_STATEMENT	450:2	450:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	450:2	450:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	450:2	450:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	450:2	450:2	8	fprintf
LEAF_NODE	450:2	450:2	9	fprintf
LEAF_NODE	450:9	450:9	8	(
ARGUMENT	450:10	450:10	8	stderr
FIELD	450:10	450:10	9	stderr
LEAF_NODE	450:10	450:10	10	stderr
LEAF_NODE	450:16	450:16	8	,
ARGUMENT	450:18	450:18	8	"%s\n"
FIELD	450:18	450:18	9	"%s\n"
LEAF_NODE	450:18	450:18	10	"%s\n"
LEAF_NODE	450:24	450:24	8	,
ARGUMENT	450:26	450:26	8	stuff [ i ]
FIELD	450:26	450:33	9	stuff [ i ]
LEAF_NODE	450:26	450:26	10	stuff
LEAF_NODE	450:31	450:31	10	[
EXPR	450:32	450:32	10	i
FIELD	450:32	450:32	11	i
LEAF_NODE	450:32	450:32	12	i
LEAF_NODE	450:33	450:33	10	]
LEAF_NODE	450:34	450:34	8	)
LEAF_NODE	450:35	450:35	6	;
EXPR_STATEMENT	451:1	451:11	3	exit ( code ) ;
EXPR	451:1	451:1	4	exit ( code )
FUNCTION_CALL	451:1	451:10	5	exit ( code )
CALLEE	451:1	451:1	6	exit
LEAF_NODE	451:1	451:1	7	exit
LEAF_NODE	451:5	451:5	6	(
ARGUMENT	451:6	451:6	6	code
FIELD	451:6	451:6	7	code
LEAF_NODE	451:6	451:6	8	code
LEAF_NODE	451:10	451:10	6	)
LEAF_NODE	451:11	451:11	4	;
LEAF_NODE	452:0	452:0	2	}
