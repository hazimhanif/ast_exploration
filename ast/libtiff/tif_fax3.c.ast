SOURCE_FILE	48:8	1621:0	0	
SIMPLE_DECL	48:8	62:15	1	struct CLASS_NAME BASE_CLASSES { int rw_mode ; int mode ; tmsize_t rowbytes ; uint32 rowpixels ; uint16 cleanfaxdata ; uint32 badfaxrun ; uint32 badfaxlines ; uint32 groupoptions ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; } Fax3BaseState ;
VAR_DECL	48:8	62:2	2	struct CLASS_NAME BASE_CLASSES { int rw_mode ; int mode ; tmsize_t rowbytes ; uint32 rowpixels ; uint16 cleanfaxdata ; uint32 badfaxrun ; uint32 badfaxlines ; uint32 groupoptions ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; } Fax3BaseState
TYPE	48:8	48:8	3	struct CLASS_NAME BASE_CLASSES { int rw_mode ; int mode ; tmsize_t rowbytes ; uint32 rowpixels ; uint16 cleanfaxdata ; uint32 badfaxrun ; uint32 badfaxlines ; uint32 groupoptions ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; }
CLASS_DEF	48:8	62:0	4	struct CLASS_NAME BASE_CLASSES { int rw_mode ; int mode ; tmsize_t rowbytes ; uint32 rowpixels ; uint16 cleanfaxdata ; uint32 badfaxrun ; uint32 badfaxlines ; uint32 groupoptions ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; }
LEAF_NODE	48:8	48:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	48:15	48:15	5	{
CLASS_CONTENT	49:1	61:1	5	int rw_mode ; int mode ; tmsize_t rowbytes ; uint32 rowpixels ; uint16 cleanfaxdata ; uint32 badfaxrun ; uint32 badfaxlines ; uint32 groupoptions ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ;
SIMPLE_DECL	49:1	49:17	6	int rw_mode ;
VAR_DECL	49:1	49:10	7	int rw_mode
TYPE	49:1	49:1	8	int
TYPE_NAME	49:1	49:1	9	int
LEAF_NODE	49:1	49:1	10	int
NAME	49:10	49:10	8	rw_mode
LEAF_NODE	49:10	49:10	9	rw_mode
LEAF_NODE	49:17	49:17	7	;
SIMPLE_DECL	50:1	50:14	6	int mode ;
VAR_DECL	50:1	50:10	7	int mode
TYPE	50:1	50:1	8	int
TYPE_NAME	50:1	50:1	9	int
LEAF_NODE	50:1	50:1	10	int
NAME	50:10	50:10	8	mode
LEAF_NODE	50:10	50:10	9	mode
LEAF_NODE	50:14	50:14	7	;
SIMPLE_DECL	51:1	51:18	6	tmsize_t rowbytes ;
VAR_DECL	51:1	51:10	7	tmsize_t rowbytes
TYPE	51:1	51:1	8	tmsize_t
TYPE_NAME	51:1	51:1	9	tmsize_t
LEAF_NODE	51:1	51:1	10	tmsize_t
NAME	51:10	51:10	8	rowbytes
LEAF_NODE	51:10	51:10	9	rowbytes
LEAF_NODE	51:18	51:18	7	;
SIMPLE_DECL	52:1	52:19	6	uint32 rowpixels ;
VAR_DECL	52:1	52:10	7	uint32 rowpixels
TYPE	52:1	52:1	8	uint32
TYPE_NAME	52:1	52:1	9	uint32
LEAF_NODE	52:1	52:1	10	uint32
NAME	52:10	52:10	8	rowpixels
LEAF_NODE	52:10	52:10	9	rowpixels
LEAF_NODE	52:19	52:19	7	;
SIMPLE_DECL	54:1	54:22	6	uint16 cleanfaxdata ;
VAR_DECL	54:1	54:10	7	uint16 cleanfaxdata
TYPE	54:1	54:1	8	uint16
TYPE_NAME	54:1	54:1	9	uint16
LEAF_NODE	54:1	54:1	10	uint16
NAME	54:10	54:10	8	cleanfaxdata
LEAF_NODE	54:10	54:10	9	cleanfaxdata
LEAF_NODE	54:22	54:22	7	;
SIMPLE_DECL	55:1	55:19	6	uint32 badfaxrun ;
VAR_DECL	55:1	55:10	7	uint32 badfaxrun
TYPE	55:1	55:1	8	uint32
TYPE_NAME	55:1	55:1	9	uint32
LEAF_NODE	55:1	55:1	10	uint32
NAME	55:10	55:10	8	badfaxrun
LEAF_NODE	55:10	55:10	9	badfaxrun
LEAF_NODE	55:19	55:19	7	;
SIMPLE_DECL	56:1	56:21	6	uint32 badfaxlines ;
VAR_DECL	56:1	56:10	7	uint32 badfaxlines
TYPE	56:1	56:1	8	uint32
TYPE_NAME	56:1	56:1	9	uint32
LEAF_NODE	56:1	56:1	10	uint32
NAME	56:10	56:10	8	badfaxlines
LEAF_NODE	56:10	56:10	9	badfaxlines
LEAF_NODE	56:21	56:21	7	;
SIMPLE_DECL	57:1	57:22	6	uint32 groupoptions ;
VAR_DECL	57:1	57:10	7	uint32 groupoptions
TYPE	57:1	57:1	8	uint32
TYPE_NAME	57:1	57:1	9	uint32
LEAF_NODE	57:1	57:1	10	uint32
NAME	57:10	57:10	8	groupoptions
LEAF_NODE	57:10	57:10	9	groupoptions
LEAF_NODE	57:22	57:22	7	;
SIMPLE_DECL	59:1	59:27	6	TIFFVGetMethod vgetparent ;
VAR_DECL	59:1	59:17	7	TIFFVGetMethod vgetparent
TYPE	59:1	59:1	8	TIFFVGetMethod
TYPE_NAME	59:1	59:1	9	TIFFVGetMethod
LEAF_NODE	59:1	59:1	10	TIFFVGetMethod
NAME	59:17	59:17	8	vgetparent
LEAF_NODE	59:17	59:17	9	vgetparent
LEAF_NODE	59:27	59:27	7	;
SIMPLE_DECL	60:1	60:27	6	TIFFVSetMethod vsetparent ;
VAR_DECL	60:1	60:17	7	TIFFVSetMethod vsetparent
TYPE	60:1	60:1	8	TIFFVSetMethod
TYPE_NAME	60:1	60:1	9	TIFFVSetMethod
LEAF_NODE	60:1	60:1	10	TIFFVSetMethod
NAME	60:17	60:17	8	vsetparent
LEAF_NODE	60:17	60:17	9	vsetparent
LEAF_NODE	60:27	60:27	7	;
SIMPLE_DECL	61:1	61:25	6	TIFFPrintMethod printdir ;
VAR_DECL	61:1	61:17	7	TIFFPrintMethod printdir
TYPE	61:1	61:1	8	TIFFPrintMethod
TYPE_NAME	61:1	61:1	9	TIFFPrintMethod
LEAF_NODE	61:1	61:1	10	TIFFPrintMethod
NAME	61:17	61:17	8	printdir
LEAF_NODE	61:17	61:17	9	printdir
LEAF_NODE	61:25	61:25	7	;
LEAF_NODE	62:0	62:0	5	}
NAME	62:2	62:2	3	Fax3BaseState
LEAF_NODE	62:2	62:2	4	Fax3BaseState
LEAF_NODE	62:15	62:15	2	;
SIMPLE_DECL	65:8	65:34	1	enum CLASS_NAME BASE_CLASSES { G3_1D , G3_2D } Ttag ;
VAR_DECL	65:8	65:30	2	enum CLASS_NAME BASE_CLASSES { G3_1D , G3_2D } Ttag
TYPE	65:8	65:8	3	enum CLASS_NAME BASE_CLASSES { G3_1D , G3_2D }
CLASS_DEF	65:8	65:28	4	enum CLASS_NAME BASE_CLASSES { G3_1D , G3_2D }
LEAF_NODE	65:8	65:8	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	65:13	65:13	5	{
CLASS_CONTENT	65:15	65:22	5	G3_1D , G3_2D
LEAF_NODE	65:15	65:15	6	G3_1D
LEAF_NODE	65:20	65:20	6	,
LEAF_NODE	65:22	65:22	6	G3_2D
LEAF_NODE	65:28	65:28	5	}
NAME	65:30	65:30	3	Ttag
LEAF_NODE	65:30	65:30	4	Ttag
LEAF_NODE	65:34	65:34	2	;
SIMPLE_DECL	66:8	86:16	1	struct CLASS_NAME BASE_CLASSES { Fax3BaseState b ; const unsigned char * bitmap ; uint32 data ; int bit ; int EOLcnt ; TIFFFaxFillFunc fill ; uint32 * runs ; uint32 * refruns ; uint32 * curruns ; Ttag tag ; unsigned char * refline ; int k ; int maxk ; int line ; } Fax3CodecState ;
VAR_DECL	66:8	86:2	2	struct CLASS_NAME BASE_CLASSES { Fax3BaseState b ; const unsigned char * bitmap ; uint32 data ; int bit ; int EOLcnt ; TIFFFaxFillFunc fill ; uint32 * runs ; uint32 * refruns ; uint32 * curruns ; Ttag tag ; unsigned char * refline ; int k ; int maxk ; int line ; } Fax3CodecState
TYPE	66:8	66:8	3	struct CLASS_NAME BASE_CLASSES { Fax3BaseState b ; const unsigned char * bitmap ; uint32 data ; int bit ; int EOLcnt ; TIFFFaxFillFunc fill ; uint32 * runs ; uint32 * refruns ; uint32 * curruns ; Ttag tag ; unsigned char * refline ; int k ; int maxk ; int line ; }
CLASS_DEF	66:8	86:0	4	struct CLASS_NAME BASE_CLASSES { Fax3BaseState b ; const unsigned char * bitmap ; uint32 data ; int bit ; int EOLcnt ; TIFFFaxFillFunc fill ; uint32 * runs ; uint32 * refruns ; uint32 * curruns ; Ttag tag ; unsigned char * refline ; int k ; int maxk ; int line ; }
LEAF_NODE	66:8	66:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	66:15	66:15	5	{
CLASS_CONTENT	67:1	85:1	5	Fax3BaseState b ; const unsigned char * bitmap ; uint32 data ; int bit ; int EOLcnt ; TIFFFaxFillFunc fill ; uint32 * runs ; uint32 * refruns ; uint32 * curruns ; Ttag tag ; unsigned char * refline ; int k ; int maxk ; int line ;
SIMPLE_DECL	67:1	67:16	6	Fax3BaseState b ;
VAR_DECL	67:1	67:15	7	Fax3BaseState b
TYPE	67:1	67:1	8	Fax3BaseState
TYPE_NAME	67:1	67:1	9	Fax3BaseState
LEAF_NODE	67:1	67:1	10	Fax3BaseState
NAME	67:15	67:15	8	b
LEAF_NODE	67:15	67:15	9	b
LEAF_NODE	67:16	67:16	7	;
SIMPLE_DECL	70:1	70:28	6	const unsigned char * bitmap ;
VAR_DECL	70:1	70:22	7	const unsigned char * bitmap
TYPE	70:1	70:20	8	const unsigned char *
TYPE_NAME	70:1	70:16	9	const unsigned char
LEAF_NODE	70:1	70:1	10	const
LEAF_NODE	70:7	70:7	10	unsigned
LEAF_NODE	70:16	70:16	10	char
POINTER	70:20	70:20	9	*
LEAF_NODE	70:20	70:20	10	*
NAME	70:22	70:22	8	bitmap
LEAF_NODE	70:22	70:22	9	bitmap
LEAF_NODE	70:28	70:28	7	;
SIMPLE_DECL	71:1	71:12	6	uint32 data ;
VAR_DECL	71:1	71:8	7	uint32 data
TYPE	71:1	71:1	8	uint32
TYPE_NAME	71:1	71:1	9	uint32
LEAF_NODE	71:1	71:1	10	uint32
NAME	71:8	71:8	8	data
LEAF_NODE	71:8	71:8	9	data
LEAF_NODE	71:12	71:12	7	;
SIMPLE_DECL	72:1	72:8	6	int bit ;
VAR_DECL	72:1	72:5	7	int bit
TYPE	72:1	72:1	8	int
TYPE_NAME	72:1	72:1	9	int
LEAF_NODE	72:1	72:1	10	int
NAME	72:5	72:5	8	bit
LEAF_NODE	72:5	72:5	9	bit
LEAF_NODE	72:8	72:8	7	;
SIMPLE_DECL	73:1	73:11	6	int EOLcnt ;
VAR_DECL	73:1	73:5	7	int EOLcnt
TYPE	73:1	73:1	8	int
TYPE_NAME	73:1	73:1	9	int
LEAF_NODE	73:1	73:1	10	int
NAME	73:5	73:5	8	EOLcnt
LEAF_NODE	73:5	73:5	9	EOLcnt
LEAF_NODE	73:11	73:11	7	;
SIMPLE_DECL	74:1	74:21	6	TIFFFaxFillFunc fill ;
VAR_DECL	74:1	74:17	7	TIFFFaxFillFunc fill
TYPE	74:1	74:1	8	TIFFFaxFillFunc
TYPE_NAME	74:1	74:1	9	TIFFFaxFillFunc
LEAF_NODE	74:1	74:1	10	TIFFFaxFillFunc
NAME	74:17	74:17	8	fill
LEAF_NODE	74:17	74:17	9	fill
LEAF_NODE	74:21	74:21	7	;
SIMPLE_DECL	75:1	75:13	6	uint32 * runs ;
VAR_DECL	75:1	75:9	7	uint32 * runs
TYPE	75:1	75:7	8	uint32 *
TYPE_NAME	75:1	75:1	9	uint32
LEAF_NODE	75:1	75:1	10	uint32
POINTER	75:7	75:7	9	*
LEAF_NODE	75:7	75:7	10	*
NAME	75:9	75:9	8	runs
LEAF_NODE	75:9	75:9	9	runs
LEAF_NODE	75:13	75:13	7	;
SIMPLE_DECL	76:1	76:16	6	uint32 * refruns ;
VAR_DECL	76:1	76:9	7	uint32 * refruns
TYPE	76:1	76:7	8	uint32 *
TYPE_NAME	76:1	76:1	9	uint32
LEAF_NODE	76:1	76:1	10	uint32
POINTER	76:7	76:7	9	*
LEAF_NODE	76:7	76:7	10	*
NAME	76:9	76:9	8	refruns
LEAF_NODE	76:9	76:9	9	refruns
LEAF_NODE	76:16	76:16	7	;
SIMPLE_DECL	77:1	77:16	6	uint32 * curruns ;
VAR_DECL	77:1	77:9	7	uint32 * curruns
TYPE	77:1	77:7	8	uint32 *
TYPE_NAME	77:1	77:1	9	uint32
LEAF_NODE	77:1	77:1	10	uint32
POINTER	77:7	77:7	9	*
LEAF_NODE	77:7	77:7	10	*
NAME	77:9	77:9	8	curruns
LEAF_NODE	77:9	77:9	9	curruns
LEAF_NODE	77:16	77:16	7	;
SIMPLE_DECL	80:1	80:12	6	Ttag tag ;
VAR_DECL	80:1	80:9	7	Ttag tag
TYPE	80:1	80:1	8	Ttag
TYPE_NAME	80:1	80:1	9	Ttag
LEAF_NODE	80:1	80:1	10	Ttag
NAME	80:9	80:9	8	tag
LEAF_NODE	80:9	80:9	9	tag
LEAF_NODE	80:12	80:12	7	;
SIMPLE_DECL	81:1	81:23	6	unsigned char * refline ;
VAR_DECL	81:1	81:16	7	unsigned char * refline
TYPE	81:1	81:14	8	unsigned char *
TYPE_NAME	81:1	81:10	9	unsigned char
LEAF_NODE	81:1	81:1	10	unsigned
LEAF_NODE	81:10	81:10	10	char
POINTER	81:14	81:14	9	*
LEAF_NODE	81:14	81:14	10	*
NAME	81:16	81:16	8	refline
LEAF_NODE	81:16	81:16	9	refline
LEAF_NODE	81:23	81:23	7	;
SIMPLE_DECL	82:1	82:6	6	int k ;
VAR_DECL	82:1	82:5	7	int k
TYPE	82:1	82:1	8	int
TYPE_NAME	82:1	82:1	9	int
LEAF_NODE	82:1	82:1	10	int
NAME	82:5	82:5	8	k
LEAF_NODE	82:5	82:5	9	k
LEAF_NODE	82:6	82:6	7	;
SIMPLE_DECL	83:1	83:9	6	int maxk ;
VAR_DECL	83:1	83:5	7	int maxk
TYPE	83:1	83:1	8	int
TYPE_NAME	83:1	83:1	9	int
LEAF_NODE	83:1	83:1	10	int
NAME	83:5	83:5	8	maxk
LEAF_NODE	83:5	83:5	9	maxk
LEAF_NODE	83:9	83:9	7	;
SIMPLE_DECL	85:1	85:9	6	int line ;
VAR_DECL	85:1	85:5	7	int line
TYPE	85:1	85:1	8	int
TYPE_NAME	85:1	85:1	9	int
LEAF_NODE	85:1	85:1	10	int
NAME	85:5	85:5	8	line
LEAF_NODE	85:5	85:5	9	line
LEAF_NODE	85:9	85:9	7	;
LEAF_NODE	86:0	86:0	5	}
NAME	86:2	86:2	3	Fax3CodecState
LEAF_NODE	86:2	86:2	4	Fax3CodecState
LEAF_NODE	86:16	86:16	2	;
FUNCTION_DEF	144:0	169:0	1	
RETURN_TYPE	144:0	144:7	2	static int
LEAF_NODE	144:0	144:0	3	static
TYPE_NAME	144:7	144:7	3	int
LEAF_NODE	144:7	144:7	4	int
FUNCTION_NAME	145:0	145:0	2	Fax3PreDecode
LEAF_NODE	145:0	145:0	3	Fax3PreDecode
PARAMETER_LIST	145:13	145:33	2	( TIFF * tif , uint16 s )
LEAF_NODE	145:13	145:13	3	(
PARAMETER_DECL	145:14	145:20	3	TIFF * tif
TYPE	145:14	145:18	4	TIFF *
TYPE_NAME	145:14	145:14	5	TIFF
LEAF_NODE	145:14	145:14	6	TIFF
POINTER	145:18	145:18	5	*
LEAF_NODE	145:18	145:18	6	*
NAME	145:20	145:20	4	tif
LEAF_NODE	145:20	145:20	5	tif
LEAF_NODE	145:23	145:23	3	,
PARAMETER_DECL	145:25	145:32	3	uint16 s
TYPE	145:25	145:25	4	uint16
TYPE_NAME	145:25	145:25	5	uint16
LEAF_NODE	145:25	145:25	6	uint16
NAME	145:32	145:32	4	s
LEAF_NODE	145:32	145:32	5	s
LEAF_NODE	145:33	145:33	3	)
LEAF_NODE	146:0	146:0	2	{
STATEMENTS	147:1	168:1	2	
SIMPLE_DECL	147:1	147:39	3	Fax3CodecState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	147:1	147:17	4	Fax3CodecState * sp ; sp = DecoderState ( tif )
TYPE	147:1	147:15	5	Fax3CodecState *
TYPE_NAME	147:1	147:1	6	Fax3CodecState
LEAF_NODE	147:1	147:1	7	Fax3CodecState
POINTER	147:15	147:15	6	*
LEAF_NODE	147:15	147:15	7	*
NAME	147:17	147:17	5	sp
LEAF_NODE	147:17	147:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	147:17	147:17	5	sp = DecoderState ( tif )
ASSIGN	147:17	147:22	6	sp = DecoderState ( tif )
LVAL	147:17	147:17	7	sp
NAME	147:17	147:17	8	sp
LEAF_NODE	147:17	147:17	9	sp
ASSIGN_OP	147:20	147:20	7	=
LEAF_NODE	147:20	147:20	8	=
RVAL	147:22	147:22	7	DecoderState ( tif )
FUNCTION_CALL	147:22	147:38	8	DecoderState ( tif )
CALLEE	147:22	147:22	9	DecoderState
LEAF_NODE	147:22	147:22	10	DecoderState
LEAF_NODE	147:34	147:34	9	(
ARGUMENT	147:35	147:35	9	tif
FIELD	147:35	147:35	10	tif
LEAF_NODE	147:35	147:35	11	tif
LEAF_NODE	147:38	147:38	9	)
LEAF_NODE	147:39	147:39	4	;
EXPR_STATEMENT	149:1	149:9	3	( void ) s ;
EXPR	149:1	149:8	4	( void ) s
LEAF_NODE	149:1	149:1	5	(
TYPE_NAME	149:2	149:2	5	void
LEAF_NODE	149:2	149:2	6	void
LEAF_NODE	149:6	149:6	5	)
FIELD	149:8	149:8	5	s
LEAF_NODE	149:8	149:8	6	s
LEAF_NODE	149:9	149:9	4	;
EXPR_STATEMENT	150:1	150:19	3	assert ( sp != NULL ) ;
EXPR	150:1	150:1	4	assert ( sp != NULL )
FUNCTION_CALL	150:1	150:18	5	assert ( sp != NULL )
CALLEE	150:1	150:1	6	assert
LEAF_NODE	150:1	150:1	7	assert
LEAF_NODE	150:7	150:7	6	(
ARGUMENT	150:8	150:14	6	sp != NULL
FIELD	150:8	150:8	7	sp
LEAF_NODE	150:8	150:8	8	sp
EQ_OPERATOR	150:11	150:11	7	!=
LEAF_NODE	150:11	150:11	8	!=
FIELD	150:14	150:14	7	NULL
LEAF_NODE	150:14	150:14	8	NULL
LEAF_NODE	150:18	150:18	6	)
LEAF_NODE	150:19	150:19	4	;
EXPR_STATEMENT	151:1	151:12	3	sp -> bit = 0 ;
EXPR	151:1	151:1	4	sp -> bit = 0
ASSIGN	151:1	151:11	5	sp -> bit = 0
LVAL	151:1	151:1	6	sp -> bit
FIELD	151:1	151:5	7	sp -> bit
LEAF_NODE	151:1	151:1	8	sp
LEAF_NODE	151:3	151:3	8	->
LEAF_NODE	151:5	151:5	8	bit
ASSIGN_OP	151:9	151:9	6	=
LEAF_NODE	151:9	151:9	7	=
RVAL	151:11	151:11	6	0
FIELD	151:11	151:11	7	0
LEAF_NODE	151:11	151:11	8	0
LEAF_NODE	151:12	151:12	4	;
EXPR_STATEMENT	152:1	152:13	3	sp -> data = 0 ;
EXPR	152:1	152:1	4	sp -> data = 0
ASSIGN	152:1	152:12	5	sp -> data = 0
LVAL	152:1	152:1	6	sp -> data
FIELD	152:1	152:5	7	sp -> data
LEAF_NODE	152:1	152:1	8	sp
LEAF_NODE	152:3	152:3	8	->
LEAF_NODE	152:5	152:5	8	data
ASSIGN_OP	152:10	152:10	6	=
LEAF_NODE	152:10	152:10	7	=
RVAL	152:12	152:12	6	0
FIELD	152:12	152:12	7	0
LEAF_NODE	152:12	152:12	8	0
LEAF_NODE	152:13	152:13	4	;
EXPR_STATEMENT	153:1	153:15	3	sp -> EOLcnt = 0 ;
EXPR	153:1	153:1	4	sp -> EOLcnt = 0
ASSIGN	153:1	153:14	5	sp -> EOLcnt = 0
LVAL	153:1	153:1	6	sp -> EOLcnt
FIELD	153:1	153:5	7	sp -> EOLcnt
LEAF_NODE	153:1	153:1	8	sp
LEAF_NODE	153:3	153:3	8	->
LEAF_NODE	153:5	153:5	8	EOLcnt
ASSIGN_OP	153:12	153:12	6	=
LEAF_NODE	153:12	153:12	7	=
RVAL	153:14	153:14	6	0
FIELD	153:14	153:14	7	0
LEAF_NODE	153:14	153:14	8	0
LEAF_NODE	153:15	153:15	4	;
EXPR_STATEMENT	161:1	162:71	3	sp -> bitmap = TIFFGetBitRevTable ( tif -> tif_dir . td_fillorder != FILLORDER_LSB2MSB ) ;
EXPR	161:1	161:1	4	sp -> bitmap = TIFFGetBitRevTable ( tif -> tif_dir . td_fillorder != FILLORDER_LSB2MSB )
ASSIGN	161:1	162:5	5	sp -> bitmap = TIFFGetBitRevTable ( tif -> tif_dir . td_fillorder != FILLORDER_LSB2MSB )
LVAL	161:1	161:1	6	sp -> bitmap
FIELD	161:1	161:5	7	sp -> bitmap
LEAF_NODE	161:1	161:1	8	sp
LEAF_NODE	161:3	161:3	8	->
LEAF_NODE	161:5	161:5	8	bitmap
ASSIGN_OP	161:12	161:12	6	=
LEAF_NODE	161:12	161:12	7	=
RVAL	162:5	162:5	6	TIFFGetBitRevTable ( tif -> tif_dir . td_fillorder != FILLORDER_LSB2MSB )
FUNCTION_CALL	162:5	162:70	7	TIFFGetBitRevTable ( tif -> tif_dir . td_fillorder != FILLORDER_LSB2MSB )
CALLEE	162:5	162:5	8	TIFFGetBitRevTable
LEAF_NODE	162:5	162:5	9	TIFFGetBitRevTable
LEAF_NODE	162:23	162:23	8	(
ARGUMENT	162:24	162:53	8	tif -> tif_dir . td_fillorder != FILLORDER_LSB2MSB
FIELD	162:24	162:37	9	tif -> tif_dir . td_fillorder
LEAF_NODE	162:24	162:24	10	tif
LEAF_NODE	162:27	162:27	10	->
LEAF_NODE	162:29	162:29	10	tif_dir
LEAF_NODE	162:36	162:36	10	.
LEAF_NODE	162:37	162:37	10	td_fillorder
EQ_OPERATOR	162:50	162:50	9	!=
LEAF_NODE	162:50	162:50	10	!=
FIELD	162:53	162:53	9	FILLORDER_LSB2MSB
LEAF_NODE	162:53	162:53	10	FILLORDER_LSB2MSB
LEAF_NODE	162:70	162:70	8	)
LEAF_NODE	162:71	162:71	4	;
SELECTION	163:1	163:18	3	
KEYWORD	163:1	163:1	4	if
LEAF_NODE	163:1	163:1	5	if
LEAF_NODE	163:4	163:4	4	(
CONDITION	163:5	163:5	4	sp -> refruns
EXPR	163:5	163:5	5	sp -> refruns
FIELD	163:5	163:9	6	sp -> refruns
LEAF_NODE	163:5	163:5	7	sp
LEAF_NODE	163:7	163:7	7	->
LEAF_NODE	163:9	163:9	7	refruns
LEAF_NODE	163:16	163:16	4	)
STATEMENTS	163:18	166:1	4	
LEAF_NODE	163:18	163:18	5	{
STATEMENTS	164:2	165:2	5	
EXPR_STATEMENT	164:2	164:43	6	sp -> refruns [ 0 ] = ( uint32 ) sp -> b . rowpixels ;
EXPR	164:2	164:2	7	sp -> refruns [ 0 ] = ( uint32 ) sp -> b . rowpixels
ASSIGN	164:2	164:19	8	sp -> refruns [ 0 ] = ( uint32 ) sp -> b . rowpixels
LVAL	164:2	164:2	9	sp -> refruns [ 0 ]
FIELD	164:2	164:15	10	sp -> refruns [ 0 ]
LEAF_NODE	164:2	164:2	11	sp
LEAF_NODE	164:4	164:4	11	->
LEAF_NODE	164:6	164:6	11	refruns
LEAF_NODE	164:13	164:13	11	[
EXPR	164:14	164:14	11	0
FIELD	164:14	164:14	12	0
LEAF_NODE	164:14	164:14	13	0
LEAF_NODE	164:15	164:15	11	]
ASSIGN_OP	164:17	164:17	9	=
LEAF_NODE	164:17	164:17	10	=
RVAL	164:19	164:28	9	( uint32 ) sp -> b . rowpixels
LEAF_NODE	164:19	164:19	10	(
TYPE_NAME	164:20	164:20	10	uint32
LEAF_NODE	164:20	164:20	11	uint32
LEAF_NODE	164:26	164:26	10	)
FIELD	164:28	164:34	10	sp -> b . rowpixels
LEAF_NODE	164:28	164:28	11	sp
LEAF_NODE	164:30	164:30	11	->
LEAF_NODE	164:32	164:32	11	b
LEAF_NODE	164:33	164:33	11	.
LEAF_NODE	164:34	164:34	11	rowpixels
LEAF_NODE	164:43	164:43	7	;
EXPR_STATEMENT	165:2	165:20	6	sp -> refruns [ 1 ] = 0 ;
EXPR	165:2	165:2	7	sp -> refruns [ 1 ] = 0
ASSIGN	165:2	165:19	8	sp -> refruns [ 1 ] = 0
LVAL	165:2	165:2	9	sp -> refruns [ 1 ]
FIELD	165:2	165:15	10	sp -> refruns [ 1 ]
LEAF_NODE	165:2	165:2	11	sp
LEAF_NODE	165:4	165:4	11	->
LEAF_NODE	165:6	165:6	11	refruns
LEAF_NODE	165:13	165:13	11	[
EXPR	165:14	165:14	11	1
FIELD	165:14	165:14	12	1
LEAF_NODE	165:14	165:14	13	1
LEAF_NODE	165:15	165:15	11	]
ASSIGN_OP	165:17	165:17	9	=
LEAF_NODE	165:17	165:17	10	=
RVAL	165:19	165:19	9	0
FIELD	165:19	165:19	10	0
LEAF_NODE	165:19	165:19	11	0
LEAF_NODE	165:20	165:20	7	;
LEAF_NODE	166:1	166:1	5	}
EXPR_STATEMENT	167:1	167:13	3	sp -> line = 0 ;
EXPR	167:1	167:1	4	sp -> line = 0
ASSIGN	167:1	167:12	5	sp -> line = 0
LVAL	167:1	167:1	6	sp -> line
FIELD	167:1	167:5	7	sp -> line
LEAF_NODE	167:1	167:1	8	sp
LEAF_NODE	167:3	167:3	8	->
LEAF_NODE	167:5	167:5	8	line
ASSIGN_OP	167:10	167:10	6	=
LEAF_NODE	167:10	167:10	7	=
RVAL	167:12	167:12	6	0
FIELD	167:12	167:12	7	0
LEAF_NODE	167:12	167:12	8	0
LEAF_NODE	167:13	167:13	4	;
JUMP_STATEMENT	168:1	168:11	3	return ( 1 ) ;
KEYWORD	168:1	168:1	4	return
LEAF_NODE	168:1	168:1	5	return
DESTINATION	168:8	168:8	4	( 1 )
EXPR	168:8	168:10	5	( 1 )
LEAF_NODE	168:8	168:8	6	(
FIELD	168:9	168:9	6	1
LEAF_NODE	168:9	168:9	7	1
LEAF_NODE	168:10	168:10	6	)
LEAF_NODE	168:11	168:11	4	;
LEAF_NODE	169:0	169:0	2	}
FUNCTION_DEF	177:0	184:0	1	
RETURN_TYPE	177:0	177:7	2	static void
LEAF_NODE	177:0	177:0	3	static
TYPE_NAME	177:7	177:7	3	void
LEAF_NODE	177:7	177:7	4	void
FUNCTION_NAME	178:0	178:0	2	Fax3Unexpected
LEAF_NODE	178:0	178:0	3	Fax3Unexpected
PARAMETER_LIST	178:14	178:68	2	( const char * module , TIFF * tif , uint32 line , uint32 a0 )
LEAF_NODE	178:14	178:14	3	(
PARAMETER_DECL	178:15	178:27	3	const char * module
TYPE	178:15	178:25	4	const char *
TYPE_NAME	178:15	178:21	5	const char
LEAF_NODE	178:15	178:15	6	const
LEAF_NODE	178:21	178:21	6	char
POINTER	178:25	178:25	5	*
LEAF_NODE	178:25	178:25	6	*
NAME	178:27	178:27	4	module
LEAF_NODE	178:27	178:27	5	module
LEAF_NODE	178:33	178:33	3	,
PARAMETER_DECL	178:35	178:41	3	TIFF * tif
TYPE	178:35	178:39	4	TIFF *
TYPE_NAME	178:35	178:35	5	TIFF
LEAF_NODE	178:35	178:35	6	TIFF
POINTER	178:39	178:39	5	*
LEAF_NODE	178:39	178:39	6	*
NAME	178:41	178:41	4	tif
LEAF_NODE	178:41	178:41	5	tif
LEAF_NODE	178:44	178:44	3	,
PARAMETER_DECL	178:46	178:53	3	uint32 line
TYPE	178:46	178:46	4	uint32
TYPE_NAME	178:46	178:46	5	uint32
LEAF_NODE	178:46	178:46	6	uint32
NAME	178:53	178:53	4	line
LEAF_NODE	178:53	178:53	5	line
LEAF_NODE	178:57	178:57	3	,
PARAMETER_DECL	178:59	178:66	3	uint32 a0
TYPE	178:59	178:59	4	uint32
TYPE_NAME	178:59	178:59	5	uint32
LEAF_NODE	178:59	178:59	6	uint32
NAME	178:66	178:66	4	a0
LEAF_NODE	178:66	178:66	5	a0
LEAF_NODE	178:68	178:68	3	)
LEAF_NODE	179:0	179:0	2	{
STATEMENTS	180:1	180:1	2	
EXPR_STATEMENT	180:1	183:8	3	TIFFErrorExt ( tif -> tif_clientdata , module , "Bad code word at line %u of %s %u (x %u)" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 ) ;
EXPR	180:1	180:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "Bad code word at line %u of %s %u (x %u)" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 )
FUNCTION_CALL	180:1	183:7	5	TIFFErrorExt ( tif -> tif_clientdata , module , "Bad code word at line %u of %s %u (x %u)" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 )
CALLEE	180:1	180:1	6	TIFFErrorExt
LEAF_NODE	180:1	180:1	7	TIFFErrorExt
LEAF_NODE	180:13	180:13	6	(
ARGUMENT	180:14	180:14	6	tif -> tif_clientdata
FIELD	180:14	180:19	7	tif -> tif_clientdata
LEAF_NODE	180:14	180:14	8	tif
LEAF_NODE	180:17	180:17	8	->
LEAF_NODE	180:19	180:19	8	tif_clientdata
LEAF_NODE	180:33	180:33	6	,
ARGUMENT	180:35	180:35	6	module
FIELD	180:35	180:35	7	module
LEAF_NODE	180:35	180:35	8	module
LEAF_NODE	180:41	180:41	6	,
ARGUMENT	180:43	180:43	6	"Bad code word at line %u of %s %u (x %u)"
FIELD	180:43	180:43	7	"Bad code word at line %u of %s %u (x %u)"
LEAF_NODE	180:43	180:43	8	"Bad code word at line %u of %s %u (x %u)"
LEAF_NODE	180:85	180:85	6	,
ARGUMENT	181:5	181:5	6	line
FIELD	181:5	181:5	7	line
LEAF_NODE	181:5	181:5	8	line
LEAF_NODE	181:9	181:9	6	,
ARGUMENT	181:11	181:11	6	isTiled ( tif ) ? "tile" : "strip"
COND_EXPR	181:11	181:35	7	isTiled ( tif ) ? "tile" : "strip"
CONDITION	181:11	181:11	8	isTiled ( tif )
FUNCTION_CALL	181:11	181:22	9	isTiled ( tif )
CALLEE	181:11	181:11	10	isTiled
LEAF_NODE	181:11	181:11	11	isTiled
LEAF_NODE	181:18	181:18	10	(
ARGUMENT	181:19	181:19	10	tif
FIELD	181:19	181:19	11	tif
LEAF_NODE	181:19	181:19	12	tif
LEAF_NODE	181:22	181:22	10	)
LEAF_NODE	181:24	181:24	8	?
EXPR	181:26	181:26	8	"tile"
FIELD	181:26	181:26	9	"tile"
LEAF_NODE	181:26	181:26	10	"tile"
LEAF_NODE	181:33	181:33	8	:
FIELD	181:35	181:35	8	"strip"
LEAF_NODE	181:35	181:35	9	"strip"
LEAF_NODE	181:42	181:42	6	,
ARGUMENT	182:5	182:57	6	( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip )
LEAF_NODE	182:5	182:5	7	(
COND_EXPR	182:6	182:40	7	isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip
CONDITION	182:6	182:6	8	isTiled ( tif )
FUNCTION_CALL	182:6	182:17	9	isTiled ( tif )
CALLEE	182:6	182:6	10	isTiled
LEAF_NODE	182:6	182:6	11	isTiled
LEAF_NODE	182:13	182:13	10	(
ARGUMENT	182:14	182:14	10	tif
FIELD	182:14	182:14	11	tif
LEAF_NODE	182:14	182:14	12	tif
LEAF_NODE	182:17	182:17	10	)
LEAF_NODE	182:19	182:19	8	?
EXPR	182:21	182:21	8	tif -> tif_curtile
FIELD	182:21	182:26	9	tif -> tif_curtile
LEAF_NODE	182:21	182:21	10	tif
LEAF_NODE	182:24	182:24	10	->
LEAF_NODE	182:26	182:26	10	tif_curtile
LEAF_NODE	182:38	182:38	8	:
FIELD	182:40	182:45	8	tif -> tif_curstrip
LEAF_NODE	182:40	182:40	9	tif
LEAF_NODE	182:43	182:43	9	->
LEAF_NODE	182:45	182:45	9	tif_curstrip
LEAF_NODE	182:57	182:57	7	)
LEAF_NODE	182:58	182:58	6	,
ARGUMENT	183:5	183:5	6	a0
FIELD	183:5	183:5	7	a0
LEAF_NODE	183:5	183:5	8	a0
LEAF_NODE	183:7	183:7	6	)
LEAF_NODE	183:8	183:8	4	;
LEAF_NODE	184:0	184:0	2	}
FUNCTION_DEF	187:0	195:0	1	
RETURN_TYPE	187:0	187:7	2	static void
LEAF_NODE	187:0	187:0	3	static
TYPE_NAME	187:7	187:7	3	void
LEAF_NODE	187:7	187:7	4	void
FUNCTION_NAME	188:0	188:0	2	Fax3Extension
LEAF_NODE	188:0	188:0	3	Fax3Extension
PARAMETER_LIST	188:13	188:67	2	( const char * module , TIFF * tif , uint32 line , uint32 a0 )
LEAF_NODE	188:13	188:13	3	(
PARAMETER_DECL	188:14	188:26	3	const char * module
TYPE	188:14	188:24	4	const char *
TYPE_NAME	188:14	188:20	5	const char
LEAF_NODE	188:14	188:14	6	const
LEAF_NODE	188:20	188:20	6	char
POINTER	188:24	188:24	5	*
LEAF_NODE	188:24	188:24	6	*
NAME	188:26	188:26	4	module
LEAF_NODE	188:26	188:26	5	module
LEAF_NODE	188:32	188:32	3	,
PARAMETER_DECL	188:34	188:40	3	TIFF * tif
TYPE	188:34	188:38	4	TIFF *
TYPE_NAME	188:34	188:34	5	TIFF
LEAF_NODE	188:34	188:34	6	TIFF
POINTER	188:38	188:38	5	*
LEAF_NODE	188:38	188:38	6	*
NAME	188:40	188:40	4	tif
LEAF_NODE	188:40	188:40	5	tif
LEAF_NODE	188:43	188:43	3	,
PARAMETER_DECL	188:45	188:52	3	uint32 line
TYPE	188:45	188:45	4	uint32
TYPE_NAME	188:45	188:45	5	uint32
LEAF_NODE	188:45	188:45	6	uint32
NAME	188:52	188:52	4	line
LEAF_NODE	188:52	188:52	5	line
LEAF_NODE	188:56	188:56	3	,
PARAMETER_DECL	188:58	188:65	3	uint32 a0
TYPE	188:58	188:58	4	uint32
TYPE_NAME	188:58	188:58	5	uint32
LEAF_NODE	188:58	188:58	6	uint32
NAME	188:65	188:65	4	a0
LEAF_NODE	188:65	188:65	5	a0
LEAF_NODE	188:67	188:67	3	)
LEAF_NODE	189:0	189:0	2	{
STATEMENTS	190:1	190:1	2	
EXPR_STATEMENT	190:1	194:8	3	TIFFErrorExt ( tif -> tif_clientdata , module , "Uncompressed data (not supported) at line %u of %s %u (x %u)" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 ) ;
EXPR	190:1	190:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "Uncompressed data (not supported) at line %u of %s %u (x %u)" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 )
FUNCTION_CALL	190:1	194:7	5	TIFFErrorExt ( tif -> tif_clientdata , module , "Uncompressed data (not supported) at line %u of %s %u (x %u)" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 )
CALLEE	190:1	190:1	6	TIFFErrorExt
LEAF_NODE	190:1	190:1	7	TIFFErrorExt
LEAF_NODE	190:13	190:13	6	(
ARGUMENT	190:14	190:14	6	tif -> tif_clientdata
FIELD	190:14	190:19	7	tif -> tif_clientdata
LEAF_NODE	190:14	190:14	8	tif
LEAF_NODE	190:17	190:17	8	->
LEAF_NODE	190:19	190:19	8	tif_clientdata
LEAF_NODE	190:33	190:33	6	,
ARGUMENT	190:35	190:35	6	module
FIELD	190:35	190:35	7	module
LEAF_NODE	190:35	190:35	8	module
LEAF_NODE	190:41	190:41	6	,
ARGUMENT	191:5	191:5	6	"Uncompressed data (not supported) at line %u of %s %u (x %u)"
FIELD	191:5	191:5	7	"Uncompressed data (not supported) at line %u of %s %u (x %u)"
LEAF_NODE	191:5	191:5	8	"Uncompressed data (not supported) at line %u of %s %u (x %u)"
LEAF_NODE	191:67	191:67	6	,
ARGUMENT	192:5	192:5	6	line
FIELD	192:5	192:5	7	line
LEAF_NODE	192:5	192:5	8	line
LEAF_NODE	192:9	192:9	6	,
ARGUMENT	192:11	192:11	6	isTiled ( tif ) ? "tile" : "strip"
COND_EXPR	192:11	192:35	7	isTiled ( tif ) ? "tile" : "strip"
CONDITION	192:11	192:11	8	isTiled ( tif )
FUNCTION_CALL	192:11	192:22	9	isTiled ( tif )
CALLEE	192:11	192:11	10	isTiled
LEAF_NODE	192:11	192:11	11	isTiled
LEAF_NODE	192:18	192:18	10	(
ARGUMENT	192:19	192:19	10	tif
FIELD	192:19	192:19	11	tif
LEAF_NODE	192:19	192:19	12	tif
LEAF_NODE	192:22	192:22	10	)
LEAF_NODE	192:24	192:24	8	?
EXPR	192:26	192:26	8	"tile"
FIELD	192:26	192:26	9	"tile"
LEAF_NODE	192:26	192:26	10	"tile"
LEAF_NODE	192:33	192:33	8	:
FIELD	192:35	192:35	8	"strip"
LEAF_NODE	192:35	192:35	9	"strip"
LEAF_NODE	192:42	192:42	6	,
ARGUMENT	193:5	193:57	6	( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip )
LEAF_NODE	193:5	193:5	7	(
COND_EXPR	193:6	193:40	7	isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip
CONDITION	193:6	193:6	8	isTiled ( tif )
FUNCTION_CALL	193:6	193:17	9	isTiled ( tif )
CALLEE	193:6	193:6	10	isTiled
LEAF_NODE	193:6	193:6	11	isTiled
LEAF_NODE	193:13	193:13	10	(
ARGUMENT	193:14	193:14	10	tif
FIELD	193:14	193:14	11	tif
LEAF_NODE	193:14	193:14	12	tif
LEAF_NODE	193:17	193:17	10	)
LEAF_NODE	193:19	193:19	8	?
EXPR	193:21	193:21	8	tif -> tif_curtile
FIELD	193:21	193:26	9	tif -> tif_curtile
LEAF_NODE	193:21	193:21	10	tif
LEAF_NODE	193:24	193:24	10	->
LEAF_NODE	193:26	193:26	10	tif_curtile
LEAF_NODE	193:38	193:38	8	:
FIELD	193:40	193:45	8	tif -> tif_curstrip
LEAF_NODE	193:40	193:40	9	tif
LEAF_NODE	193:43	193:43	9	->
LEAF_NODE	193:45	193:45	9	tif_curstrip
LEAF_NODE	193:57	193:57	7	)
LEAF_NODE	193:58	193:58	6	,
ARGUMENT	194:5	194:5	6	a0
FIELD	194:5	194:5	7	a0
LEAF_NODE	194:5	194:5	8	a0
LEAF_NODE	194:7	194:7	6	)
LEAF_NODE	194:8	194:8	4	;
LEAF_NODE	195:0	195:0	2	}
FUNCTION_DEF	198:0	206:0	1	
RETURN_TYPE	198:0	198:7	2	static void
LEAF_NODE	198:0	198:0	3	static
TYPE_NAME	198:7	198:7	3	void
LEAF_NODE	198:7	198:7	4	void
FUNCTION_NAME	199:0	199:0	2	Fax3BadLength
LEAF_NODE	199:0	199:0	3	Fax3BadLength
PARAMETER_LIST	199:13	199:81	2	( const char * module , TIFF * tif , uint32 line , uint32 a0 , uint32 lastx )
LEAF_NODE	199:13	199:13	3	(
PARAMETER_DECL	199:14	199:26	3	const char * module
TYPE	199:14	199:24	4	const char *
TYPE_NAME	199:14	199:20	5	const char
LEAF_NODE	199:14	199:14	6	const
LEAF_NODE	199:20	199:20	6	char
POINTER	199:24	199:24	5	*
LEAF_NODE	199:24	199:24	6	*
NAME	199:26	199:26	4	module
LEAF_NODE	199:26	199:26	5	module
LEAF_NODE	199:32	199:32	3	,
PARAMETER_DECL	199:34	199:40	3	TIFF * tif
TYPE	199:34	199:38	4	TIFF *
TYPE_NAME	199:34	199:34	5	TIFF
LEAF_NODE	199:34	199:34	6	TIFF
POINTER	199:38	199:38	5	*
LEAF_NODE	199:38	199:38	6	*
NAME	199:40	199:40	4	tif
LEAF_NODE	199:40	199:40	5	tif
LEAF_NODE	199:43	199:43	3	,
PARAMETER_DECL	199:45	199:52	3	uint32 line
TYPE	199:45	199:45	4	uint32
TYPE_NAME	199:45	199:45	5	uint32
LEAF_NODE	199:45	199:45	6	uint32
NAME	199:52	199:52	4	line
LEAF_NODE	199:52	199:52	5	line
LEAF_NODE	199:56	199:56	3	,
PARAMETER_DECL	199:58	199:65	3	uint32 a0
TYPE	199:58	199:58	4	uint32
TYPE_NAME	199:58	199:58	5	uint32
LEAF_NODE	199:58	199:58	6	uint32
NAME	199:65	199:65	4	a0
LEAF_NODE	199:65	199:65	5	a0
LEAF_NODE	199:67	199:67	3	,
PARAMETER_DECL	199:69	199:76	3	uint32 lastx
TYPE	199:69	199:69	4	uint32
TYPE_NAME	199:69	199:69	5	uint32
LEAF_NODE	199:69	199:69	6	uint32
NAME	199:76	199:76	4	lastx
LEAF_NODE	199:76	199:76	5	lastx
LEAF_NODE	199:81	199:81	3	)
LEAF_NODE	200:0	200:0	2	{
STATEMENTS	201:1	201:1	2	
EXPR_STATEMENT	201:1	205:15	3	TIFFWarningExt ( tif -> tif_clientdata , module , "%s at line %u of %s %u (got %u, expected %u)" , a0 < lastx ? "Premature EOL" : "Line length mismatch" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 , lastx ) ;
EXPR	201:1	201:1	4	TIFFWarningExt ( tif -> tif_clientdata , module , "%s at line %u of %s %u (got %u, expected %u)" , a0 < lastx ? "Premature EOL" : "Line length mismatch" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 , lastx )
FUNCTION_CALL	201:1	205:14	5	TIFFWarningExt ( tif -> tif_clientdata , module , "%s at line %u of %s %u (got %u, expected %u)" , a0 < lastx ? "Premature EOL" : "Line length mismatch" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 , lastx )
CALLEE	201:1	201:1	6	TIFFWarningExt
LEAF_NODE	201:1	201:1	7	TIFFWarningExt
LEAF_NODE	201:15	201:15	6	(
ARGUMENT	201:16	201:16	6	tif -> tif_clientdata
FIELD	201:16	201:21	7	tif -> tif_clientdata
LEAF_NODE	201:16	201:16	8	tif
LEAF_NODE	201:19	201:19	8	->
LEAF_NODE	201:21	201:21	8	tif_clientdata
LEAF_NODE	201:35	201:35	6	,
ARGUMENT	201:37	201:37	6	module
FIELD	201:37	201:37	7	module
LEAF_NODE	201:37	201:37	8	module
LEAF_NODE	201:43	201:43	6	,
ARGUMENT	201:45	201:45	6	"%s at line %u of %s %u (got %u, expected %u)"
FIELD	201:45	201:45	7	"%s at line %u of %s %u (got %u, expected %u)"
LEAF_NODE	201:45	201:45	8	"%s at line %u of %s %u (got %u, expected %u)"
LEAF_NODE	201:91	201:91	6	,
ARGUMENT	202:5	202:5	6	a0 < lastx ? "Premature EOL" : "Line length mismatch"
COND_EXPR	202:5	202:36	7	a0 < lastx ? "Premature EOL" : "Line length mismatch"
CONDITION	202:5	202:10	8	a0 < lastx
FIELD	202:5	202:5	9	a0
LEAF_NODE	202:5	202:5	10	a0
REL_OPERATOR	202:8	202:8	9	<
LEAF_NODE	202:8	202:8	10	<
FIELD	202:10	202:10	9	lastx
LEAF_NODE	202:10	202:10	10	lastx
LEAF_NODE	202:16	202:16	8	?
EXPR	202:18	202:18	8	"Premature EOL"
FIELD	202:18	202:18	9	"Premature EOL"
LEAF_NODE	202:18	202:18	10	"Premature EOL"
LEAF_NODE	202:34	202:34	8	:
FIELD	202:36	202:36	8	"Line length mismatch"
LEAF_NODE	202:36	202:36	9	"Line length mismatch"
LEAF_NODE	202:58	202:58	6	,
ARGUMENT	203:5	203:5	6	line
FIELD	203:5	203:5	7	line
LEAF_NODE	203:5	203:5	8	line
LEAF_NODE	203:9	203:9	6	,
ARGUMENT	203:11	203:11	6	isTiled ( tif ) ? "tile" : "strip"
COND_EXPR	203:11	203:35	7	isTiled ( tif ) ? "tile" : "strip"
CONDITION	203:11	203:11	8	isTiled ( tif )
FUNCTION_CALL	203:11	203:22	9	isTiled ( tif )
CALLEE	203:11	203:11	10	isTiled
LEAF_NODE	203:11	203:11	11	isTiled
LEAF_NODE	203:18	203:18	10	(
ARGUMENT	203:19	203:19	10	tif
FIELD	203:19	203:19	11	tif
LEAF_NODE	203:19	203:19	12	tif
LEAF_NODE	203:22	203:22	10	)
LEAF_NODE	203:24	203:24	8	?
EXPR	203:26	203:26	8	"tile"
FIELD	203:26	203:26	9	"tile"
LEAF_NODE	203:26	203:26	10	"tile"
LEAF_NODE	203:33	203:33	8	:
FIELD	203:35	203:35	8	"strip"
LEAF_NODE	203:35	203:35	9	"strip"
LEAF_NODE	203:42	203:42	6	,
ARGUMENT	204:5	204:57	6	( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip )
LEAF_NODE	204:5	204:5	7	(
COND_EXPR	204:6	204:40	7	isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip
CONDITION	204:6	204:6	8	isTiled ( tif )
FUNCTION_CALL	204:6	204:17	9	isTiled ( tif )
CALLEE	204:6	204:6	10	isTiled
LEAF_NODE	204:6	204:6	11	isTiled
LEAF_NODE	204:13	204:13	10	(
ARGUMENT	204:14	204:14	10	tif
FIELD	204:14	204:14	11	tif
LEAF_NODE	204:14	204:14	12	tif
LEAF_NODE	204:17	204:17	10	)
LEAF_NODE	204:19	204:19	8	?
EXPR	204:21	204:21	8	tif -> tif_curtile
FIELD	204:21	204:26	9	tif -> tif_curtile
LEAF_NODE	204:21	204:21	10	tif
LEAF_NODE	204:24	204:24	10	->
LEAF_NODE	204:26	204:26	10	tif_curtile
LEAF_NODE	204:38	204:38	8	:
FIELD	204:40	204:45	8	tif -> tif_curstrip
LEAF_NODE	204:40	204:40	9	tif
LEAF_NODE	204:43	204:43	9	->
LEAF_NODE	204:45	204:45	9	tif_curstrip
LEAF_NODE	204:57	204:57	7	)
LEAF_NODE	204:58	204:58	6	,
ARGUMENT	205:5	205:5	6	a0
FIELD	205:5	205:5	7	a0
LEAF_NODE	205:5	205:5	8	a0
LEAF_NODE	205:7	205:7	6	,
ARGUMENT	205:9	205:9	6	lastx
FIELD	205:9	205:9	7	lastx
LEAF_NODE	205:9	205:9	8	lastx
LEAF_NODE	205:14	205:14	6	)
LEAF_NODE	205:15	205:15	4	;
LEAF_NODE	206:0	206:0	2	}
FUNCTION_DEF	209:0	216:0	1	
RETURN_TYPE	209:0	209:7	2	static void
LEAF_NODE	209:0	209:0	3	static
TYPE_NAME	209:7	209:7	3	void
LEAF_NODE	209:7	209:7	4	void
FUNCTION_NAME	210:0	210:0	2	Fax3PrematureEOF
LEAF_NODE	210:0	210:0	3	Fax3PrematureEOF
PARAMETER_LIST	210:16	210:70	2	( const char * module , TIFF * tif , uint32 line , uint32 a0 )
LEAF_NODE	210:16	210:16	3	(
PARAMETER_DECL	210:17	210:29	3	const char * module
TYPE	210:17	210:27	4	const char *
TYPE_NAME	210:17	210:23	5	const char
LEAF_NODE	210:17	210:17	6	const
LEAF_NODE	210:23	210:23	6	char
POINTER	210:27	210:27	5	*
LEAF_NODE	210:27	210:27	6	*
NAME	210:29	210:29	4	module
LEAF_NODE	210:29	210:29	5	module
LEAF_NODE	210:35	210:35	3	,
PARAMETER_DECL	210:37	210:43	3	TIFF * tif
TYPE	210:37	210:41	4	TIFF *
TYPE_NAME	210:37	210:37	5	TIFF
LEAF_NODE	210:37	210:37	6	TIFF
POINTER	210:41	210:41	5	*
LEAF_NODE	210:41	210:41	6	*
NAME	210:43	210:43	4	tif
LEAF_NODE	210:43	210:43	5	tif
LEAF_NODE	210:46	210:46	3	,
PARAMETER_DECL	210:48	210:55	3	uint32 line
TYPE	210:48	210:48	4	uint32
TYPE_NAME	210:48	210:48	5	uint32
LEAF_NODE	210:48	210:48	6	uint32
NAME	210:55	210:55	4	line
LEAF_NODE	210:55	210:55	5	line
LEAF_NODE	210:59	210:59	3	,
PARAMETER_DECL	210:61	210:68	3	uint32 a0
TYPE	210:61	210:61	4	uint32
TYPE_NAME	210:61	210:61	5	uint32
LEAF_NODE	210:61	210:61	6	uint32
NAME	210:68	210:68	4	a0
LEAF_NODE	210:68	210:68	5	a0
LEAF_NODE	210:70	210:70	3	)
LEAF_NODE	211:0	211:0	2	{
STATEMENTS	212:1	212:1	2	
EXPR_STATEMENT	212:1	215:8	3	TIFFWarningExt ( tif -> tif_clientdata , module , "Premature EOF at line %u of %s %u (x %u)" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 ) ;
EXPR	212:1	212:1	4	TIFFWarningExt ( tif -> tif_clientdata , module , "Premature EOF at line %u of %s %u (x %u)" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 )
FUNCTION_CALL	212:1	215:7	5	TIFFWarningExt ( tif -> tif_clientdata , module , "Premature EOF at line %u of %s %u (x %u)" , line , isTiled ( tif ) ? "tile" : "strip" , ( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip ) , a0 )
CALLEE	212:1	212:1	6	TIFFWarningExt
LEAF_NODE	212:1	212:1	7	TIFFWarningExt
LEAF_NODE	212:15	212:15	6	(
ARGUMENT	212:16	212:16	6	tif -> tif_clientdata
FIELD	212:16	212:21	7	tif -> tif_clientdata
LEAF_NODE	212:16	212:16	8	tif
LEAF_NODE	212:19	212:19	8	->
LEAF_NODE	212:21	212:21	8	tif_clientdata
LEAF_NODE	212:35	212:35	6	,
ARGUMENT	212:37	212:37	6	module
FIELD	212:37	212:37	7	module
LEAF_NODE	212:37	212:37	8	module
LEAF_NODE	212:43	212:43	6	,
ARGUMENT	212:45	212:45	6	"Premature EOF at line %u of %s %u (x %u)"
FIELD	212:45	212:45	7	"Premature EOF at line %u of %s %u (x %u)"
LEAF_NODE	212:45	212:45	8	"Premature EOF at line %u of %s %u (x %u)"
LEAF_NODE	212:87	212:87	6	,
ARGUMENT	213:5	213:5	6	line
FIELD	213:5	213:5	7	line
LEAF_NODE	213:5	213:5	8	line
LEAF_NODE	213:9	213:9	6	,
ARGUMENT	213:11	213:11	6	isTiled ( tif ) ? "tile" : "strip"
COND_EXPR	213:11	213:35	7	isTiled ( tif ) ? "tile" : "strip"
CONDITION	213:11	213:11	8	isTiled ( tif )
FUNCTION_CALL	213:11	213:22	9	isTiled ( tif )
CALLEE	213:11	213:11	10	isTiled
LEAF_NODE	213:11	213:11	11	isTiled
LEAF_NODE	213:18	213:18	10	(
ARGUMENT	213:19	213:19	10	tif
FIELD	213:19	213:19	11	tif
LEAF_NODE	213:19	213:19	12	tif
LEAF_NODE	213:22	213:22	10	)
LEAF_NODE	213:24	213:24	8	?
EXPR	213:26	213:26	8	"tile"
FIELD	213:26	213:26	9	"tile"
LEAF_NODE	213:26	213:26	10	"tile"
LEAF_NODE	213:33	213:33	8	:
FIELD	213:35	213:35	8	"strip"
LEAF_NODE	213:35	213:35	9	"strip"
LEAF_NODE	213:42	213:42	6	,
ARGUMENT	214:5	214:57	6	( isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip )
LEAF_NODE	214:5	214:5	7	(
COND_EXPR	214:6	214:40	7	isTiled ( tif ) ? tif -> tif_curtile : tif -> tif_curstrip
CONDITION	214:6	214:6	8	isTiled ( tif )
FUNCTION_CALL	214:6	214:17	9	isTiled ( tif )
CALLEE	214:6	214:6	10	isTiled
LEAF_NODE	214:6	214:6	11	isTiled
LEAF_NODE	214:13	214:13	10	(
ARGUMENT	214:14	214:14	10	tif
FIELD	214:14	214:14	11	tif
LEAF_NODE	214:14	214:14	12	tif
LEAF_NODE	214:17	214:17	10	)
LEAF_NODE	214:19	214:19	8	?
EXPR	214:21	214:21	8	tif -> tif_curtile
FIELD	214:21	214:26	9	tif -> tif_curtile
LEAF_NODE	214:21	214:21	10	tif
LEAF_NODE	214:24	214:24	10	->
LEAF_NODE	214:26	214:26	10	tif_curtile
LEAF_NODE	214:38	214:38	8	:
FIELD	214:40	214:45	8	tif -> tif_curstrip
LEAF_NODE	214:40	214:40	9	tif
LEAF_NODE	214:43	214:43	9	->
LEAF_NODE	214:45	214:45	9	tif_curstrip
LEAF_NODE	214:57	214:57	7	)
LEAF_NODE	214:58	214:58	6	,
ARGUMENT	215:5	215:5	6	a0
FIELD	215:5	215:5	7	a0
LEAF_NODE	215:5	215:5	8	a0
LEAF_NODE	215:7	215:7	6	)
LEAF_NODE	215:8	215:8	4	;
LEAF_NODE	216:0	216:0	2	}
FUNCTION_DEF	224:0	261:0	1	
RETURN_TYPE	224:0	224:7	2	static int
LEAF_NODE	224:0	224:0	3	static
TYPE_NAME	224:7	224:7	3	int
LEAF_NODE	224:7	224:7	4	int
FUNCTION_NAME	225:0	225:0	2	Fax3Decode1D
LEAF_NODE	225:0	225:0	3	Fax3Decode1D
PARAMETER_LIST	225:12	225:58	2	( TIFF * tif , uint8 * buf , tmsize_t occ , uint16 s )
LEAF_NODE	225:12	225:12	3	(
PARAMETER_DECL	225:13	225:19	3	TIFF * tif
TYPE	225:13	225:17	4	TIFF *
TYPE_NAME	225:13	225:13	5	TIFF
LEAF_NODE	225:13	225:13	6	TIFF
POINTER	225:17	225:17	5	*
LEAF_NODE	225:17	225:17	6	*
NAME	225:19	225:19	4	tif
LEAF_NODE	225:19	225:19	5	tif
LEAF_NODE	225:22	225:22	3	,
PARAMETER_DECL	225:24	225:31	3	uint8 * buf
TYPE	225:24	225:29	4	uint8 *
TYPE_NAME	225:24	225:24	5	uint8
LEAF_NODE	225:24	225:24	6	uint8
POINTER	225:29	225:29	5	*
LEAF_NODE	225:29	225:29	6	*
NAME	225:31	225:31	4	buf
LEAF_NODE	225:31	225:31	5	buf
LEAF_NODE	225:34	225:34	3	,
PARAMETER_DECL	225:36	225:45	3	tmsize_t occ
TYPE	225:36	225:36	4	tmsize_t
TYPE_NAME	225:36	225:36	5	tmsize_t
LEAF_NODE	225:36	225:36	6	tmsize_t
NAME	225:45	225:45	4	occ
LEAF_NODE	225:45	225:45	5	occ
LEAF_NODE	225:48	225:48	3	,
PARAMETER_DECL	225:50	225:57	3	uint16 s
TYPE	225:50	225:50	4	uint16
TYPE_NAME	225:50	225:50	5	uint16
LEAF_NODE	225:50	225:50	6	uint16
NAME	225:57	225:57	4	s
LEAF_NODE	225:57	225:57	5	s
LEAF_NODE	225:58	225:58	3	)
LEAF_NODE	226:0	226:0	2	{
STATEMENTS	227:1	260:1	2	
EXPR_STATEMENT	227:1	227:39	3	DECLARE_STATE ( tif , sp , "Fax3Decode1D" ) ;
EXPR	227:1	227:1	4	DECLARE_STATE ( tif , sp , "Fax3Decode1D" )
FUNCTION_CALL	227:1	227:38	5	DECLARE_STATE ( tif , sp , "Fax3Decode1D" )
CALLEE	227:1	227:1	6	DECLARE_STATE
LEAF_NODE	227:1	227:1	7	DECLARE_STATE
LEAF_NODE	227:14	227:14	6	(
ARGUMENT	227:15	227:15	6	tif
FIELD	227:15	227:15	7	tif
LEAF_NODE	227:15	227:15	8	tif
LEAF_NODE	227:18	227:18	6	,
ARGUMENT	227:20	227:20	6	sp
FIELD	227:20	227:20	7	sp
LEAF_NODE	227:20	227:20	8	sp
LEAF_NODE	227:22	227:22	6	,
ARGUMENT	227:24	227:24	6	"Fax3Decode1D"
FIELD	227:24	227:24	7	"Fax3Decode1D"
LEAF_NODE	227:24	227:24	8	"Fax3Decode1D"
LEAF_NODE	227:38	227:38	6	)
LEAF_NODE	227:39	227:39	4	;
EXPR_STATEMENT	228:1	228:9	3	( void ) s ;
EXPR	228:1	228:8	4	( void ) s
LEAF_NODE	228:1	228:1	5	(
TYPE_NAME	228:2	228:2	5	void
LEAF_NODE	228:2	228:2	6	void
LEAF_NODE	228:6	228:6	5	)
FIELD	228:8	228:8	5	s
LEAF_NODE	228:8	228:8	6	s
LEAF_NODE	228:9	228:9	4	;
SELECTION	229:1	230:1	3	
KEYWORD	229:1	229:1	4	if
LEAF_NODE	229:1	229:1	5	if
LEAF_NODE	229:4	229:4	4	(
CONDITION	229:5	229:5	4	occ % sp -> b . rowbytes
EXPR	229:5	229:11	5	occ % sp -> b . rowbytes
FIELD	229:5	229:5	6	occ
LEAF_NODE	229:5	229:5	7	occ
LEAF_NODE	229:9	229:9	6	%
FIELD	229:11	229:17	6	sp -> b . rowbytes
LEAF_NODE	229:11	229:11	7	sp
LEAF_NODE	229:13	229:13	7	->
LEAF_NODE	229:15	229:15	7	b
LEAF_NODE	229:16	229:16	7	.
LEAF_NODE	229:17	229:17	7	rowbytes
LEAF_NODE	229:25	229:25	4	)
STATEMENTS	230:1	233:1	4	
LEAF_NODE	230:1	230:1	5	{
STATEMENTS	231:2	232:2	5	
EXPR_STATEMENT	231:2	231:82	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" ) ;
EXPR	231:2	231:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
FUNCTION_CALL	231:2	231:81	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
CALLEE	231:2	231:2	9	TIFFErrorExt
LEAF_NODE	231:2	231:2	10	TIFFErrorExt
LEAF_NODE	231:14	231:14	9	(
ARGUMENT	231:15	231:15	9	tif -> tif_clientdata
FIELD	231:15	231:20	10	tif -> tif_clientdata
LEAF_NODE	231:15	231:15	11	tif
LEAF_NODE	231:18	231:18	11	->
LEAF_NODE	231:20	231:20	11	tif_clientdata
LEAF_NODE	231:34	231:34	9	,
ARGUMENT	231:36	231:36	9	module
FIELD	231:36	231:36	10	module
LEAF_NODE	231:36	231:36	11	module
LEAF_NODE	231:42	231:42	9	,
ARGUMENT	231:44	231:44	9	"Fractional scanlines cannot be read"
FIELD	231:44	231:44	10	"Fractional scanlines cannot be read"
LEAF_NODE	231:44	231:44	11	"Fractional scanlines cannot be read"
LEAF_NODE	231:81	231:81	9	)
LEAF_NODE	231:82	231:82	7	;
JUMP_STATEMENT	232:2	232:13	6	return ( - 1 ) ;
KEYWORD	232:2	232:2	7	return
LEAF_NODE	232:2	232:2	8	return
DESTINATION	232:9	232:9	7	( - 1 )
EXPR	232:9	232:12	8	( - 1 )
LEAF_NODE	232:9	232:9	9	(
UNARY_EXPR	232:10	232:11	9	- 1
UNARY_OPERATOR	232:10	232:10	10	-
LEAF_NODE	232:10	232:10	11	-
FIELD	232:11	232:11	10	1
LEAF_NODE	232:11	232:11	11	1
LEAF_NODE	232:12	232:12	9	)
LEAF_NODE	232:13	232:13	7	;
LEAF_NODE	233:1	233:1	5	}
EXPR_STATEMENT	234:1	234:21	3	CACHE_STATE ( tif , sp ) ;
EXPR	234:1	234:1	4	CACHE_STATE ( tif , sp )
FUNCTION_CALL	234:1	234:20	5	CACHE_STATE ( tif , sp )
CALLEE	234:1	234:1	6	CACHE_STATE
LEAF_NODE	234:1	234:1	7	CACHE_STATE
LEAF_NODE	234:12	234:12	6	(
ARGUMENT	234:13	234:13	6	tif
FIELD	234:13	234:13	7	tif
LEAF_NODE	234:13	234:13	8	tif
LEAF_NODE	234:16	234:16	6	,
ARGUMENT	234:18	234:18	6	sp
FIELD	234:18	234:18	7	sp
LEAF_NODE	234:18	234:18	8	sp
LEAF_NODE	234:20	234:20	6	)
LEAF_NODE	234:21	234:21	4	;
EXPR_STATEMENT	235:1	235:22	3	thisrun = sp -> curruns ;
EXPR	235:1	235:1	4	thisrun = sp -> curruns
ASSIGN	235:1	235:11	5	thisrun = sp -> curruns
LVAL	235:1	235:1	6	thisrun
FIELD	235:1	235:1	7	thisrun
LEAF_NODE	235:1	235:1	8	thisrun
ASSIGN_OP	235:9	235:9	6	=
LEAF_NODE	235:9	235:9	7	=
RVAL	235:11	235:11	6	sp -> curruns
FIELD	235:11	235:15	7	sp -> curruns
LEAF_NODE	235:11	235:11	8	sp
LEAF_NODE	235:13	235:13	8	->
LEAF_NODE	235:15	235:15	8	curruns
LEAF_NODE	235:22	235:22	4	;
ITERATION	236:1	236:17	3	
KEYWORD	236:1	236:1	4	while
LEAF_NODE	236:1	236:1	5	while
LEAF_NODE	236:7	236:7	4	(
CONDITION	236:8	236:8	4	occ > 0
EXPR	236:8	236:14	5	occ > 0
FIELD	236:8	236:8	6	occ
LEAF_NODE	236:8	236:8	7	occ
REL_OPERATOR	236:12	236:12	6	>
LEAF_NODE	236:12	236:12	7	>
FIELD	236:14	236:14	6	0
LEAF_NODE	236:14	236:14	7	0
LEAF_NODE	236:15	236:15	4	)
STATEMENTS	236:17	258:1	4	
LEAF_NODE	236:17	236:17	5	{
STATEMENTS	237:2	257:2	5	
EXPR_STATEMENT	237:2	237:8	6	a0 = 0 ;
EXPR	237:2	237:2	7	a0 = 0
ASSIGN	237:2	237:7	8	a0 = 0
LVAL	237:2	237:2	9	a0
FIELD	237:2	237:2	10	a0
LEAF_NODE	237:2	237:2	11	a0
ASSIGN_OP	237:5	237:5	9	=
LEAF_NODE	237:5	237:5	10	=
RVAL	237:7	237:7	9	0
FIELD	237:7	237:7	10	0
LEAF_NODE	237:7	237:7	11	0
LEAF_NODE	237:8	237:8	7	;
EXPR_STATEMENT	238:2	238:15	6	RunLength = 0 ;
EXPR	238:2	238:2	7	RunLength = 0
ASSIGN	238:2	238:14	8	RunLength = 0
LVAL	238:2	238:2	9	RunLength
FIELD	238:2	238:2	10	RunLength
LEAF_NODE	238:2	238:2	11	RunLength
ASSIGN_OP	238:12	238:12	9	=
LEAF_NODE	238:12	238:12	10	=
RVAL	238:14	238:14	9	0
FIELD	238:14	238:14	10	0
LEAF_NODE	238:14	238:14	11	0
LEAF_NODE	238:15	238:15	7	;
EXPR_STATEMENT	239:2	239:14	6	pa = thisrun ;
EXPR	239:2	239:2	7	pa = thisrun
ASSIGN	239:2	239:7	8	pa = thisrun
LVAL	239:2	239:2	9	pa
FIELD	239:2	239:2	10	pa
LEAF_NODE	239:2	239:2	11	pa
ASSIGN_OP	239:5	239:5	9	=
LEAF_NODE	239:5	239:5	10	=
RVAL	239:7	239:7	9	thisrun
FIELD	239:7	239:7	10	thisrun
LEAF_NODE	239:7	239:7	11	thisrun
LEAF_NODE	239:14	239:14	7	;
EXPR_STATEMENT	241:2	241:62	6	printf ( "\nBitAcc=%08X, BitsAvail = %d\n" , BitAcc , BitsAvail ) ;
EXPR	241:2	241:2	7	printf ( "\nBitAcc=%08X, BitsAvail = %d\n" , BitAcc , BitsAvail )
FUNCTION_CALL	241:2	241:61	8	printf ( "\nBitAcc=%08X, BitsAvail = %d\n" , BitAcc , BitsAvail )
CALLEE	241:2	241:2	9	printf
LEAF_NODE	241:2	241:2	10	printf
LEAF_NODE	241:8	241:8	9	(
ARGUMENT	241:9	241:9	9	"\nBitAcc=%08X, BitsAvail = %d\n"
FIELD	241:9	241:9	10	"\nBitAcc=%08X, BitsAvail = %d\n"
LEAF_NODE	241:9	241:9	11	"\nBitAcc=%08X, BitsAvail = %d\n"
LEAF_NODE	241:42	241:42	9	,
ARGUMENT	241:44	241:44	9	BitAcc
FIELD	241:44	241:44	10	BitAcc
LEAF_NODE	241:44	241:44	11	BitAcc
LEAF_NODE	241:50	241:50	9	,
ARGUMENT	241:52	241:52	9	BitsAvail
FIELD	241:52	241:52	10	BitsAvail
LEAF_NODE	241:52	241:52	11	BitsAvail
LEAF_NODE	241:61	241:61	9	)
LEAF_NODE	241:62	241:62	7	;
EXPR_STATEMENT	242:2	242:51	6	printf ( "-------------------- %d\n" , tif -> tif_row ) ;
EXPR	242:2	242:2	7	printf ( "-------------------- %d\n" , tif -> tif_row )
FUNCTION_CALL	242:2	242:50	8	printf ( "-------------------- %d\n" , tif -> tif_row )
CALLEE	242:2	242:2	9	printf
LEAF_NODE	242:2	242:2	10	printf
LEAF_NODE	242:8	242:8	9	(
ARGUMENT	242:9	242:9	9	"-------------------- %d\n"
FIELD	242:9	242:9	10	"-------------------- %d\n"
LEAF_NODE	242:9	242:9	11	"-------------------- %d\n"
LEAF_NODE	242:36	242:36	9	,
ARGUMENT	242:38	242:38	9	tif -> tif_row
FIELD	242:38	242:43	10	tif -> tif_row
LEAF_NODE	242:38	242:38	11	tif
LEAF_NODE	242:41	242:41	11	->
LEAF_NODE	242:43	242:43	11	tif_row
LEAF_NODE	242:50	242:50	9	)
LEAF_NODE	242:51	242:51	7	;
EXPR_STATEMENT	243:2	243:16	6	fflush ( stdout ) ;
EXPR	243:2	243:2	7	fflush ( stdout )
FUNCTION_CALL	243:2	243:15	8	fflush ( stdout )
CALLEE	243:2	243:2	9	fflush
LEAF_NODE	243:2	243:2	10	fflush
LEAF_NODE	243:8	243:8	9	(
ARGUMENT	243:9	243:9	9	stdout
FIELD	243:9	243:9	10	stdout
LEAF_NODE	243:9	243:9	11	stdout
LEAF_NODE	243:15	243:15	9	)
LEAF_NODE	243:16	243:16	7	;
EXPR_STATEMENT	245:2	245:17	6	SYNC_EOL ( EOF1D ) ;
EXPR	245:2	245:2	7	SYNC_EOL ( EOF1D )
FUNCTION_CALL	245:2	245:16	8	SYNC_EOL ( EOF1D )
CALLEE	245:2	245:2	9	SYNC_EOL
LEAF_NODE	245:2	245:2	10	SYNC_EOL
LEAF_NODE	245:10	245:10	9	(
ARGUMENT	245:11	245:11	9	EOF1D
FIELD	245:11	245:11	10	EOF1D
LEAF_NODE	245:11	245:11	11	EOF1D
LEAF_NODE	245:16	245:16	9	)
LEAF_NODE	245:17	245:17	7	;
EXPR_STATEMENT	246:2	246:18	6	EXPAND1D ( EOF1Da ) ;
EXPR	246:2	246:2	7	EXPAND1D ( EOF1Da )
FUNCTION_CALL	246:2	246:17	8	EXPAND1D ( EOF1Da )
CALLEE	246:2	246:2	9	EXPAND1D
LEAF_NODE	246:2	246:2	10	EXPAND1D
LEAF_NODE	246:10	246:10	9	(
ARGUMENT	246:11	246:11	9	EOF1Da
FIELD	246:11	246:11	10	EOF1Da
LEAF_NODE	246:11	246:11	11	EOF1Da
LEAF_NODE	246:17	246:17	9	)
LEAF_NODE	246:18	246:18	7	;
EXPR_STATEMENT	247:2	247:38	6	( * sp -> fill ) ( buf , thisrun , pa , lastx ) ;
EXPR	247:2	247:2	7	( * sp -> fill ) ( buf , thisrun , pa , lastx )
FUNCTION_CALL	247:2	247:37	8	( * sp -> fill ) ( buf , thisrun , pa , lastx )
CALLEE	247:2	247:12	9	( * sp -> fill )
LEAF_NODE	247:2	247:2	10	(
UNARY_EXPR	247:3	247:4	10	* sp -> fill
UNARY_OPERATOR	247:3	247:3	11	*
LEAF_NODE	247:3	247:3	12	*
FIELD	247:4	247:8	11	sp -> fill
LEAF_NODE	247:4	247:4	12	sp
LEAF_NODE	247:6	247:6	12	->
LEAF_NODE	247:8	247:8	12	fill
LEAF_NODE	247:12	247:12	10	)
LEAF_NODE	247:13	247:13	9	(
ARGUMENT	247:14	247:14	9	buf
FIELD	247:14	247:14	10	buf
LEAF_NODE	247:14	247:14	11	buf
LEAF_NODE	247:17	247:17	9	,
ARGUMENT	247:19	247:19	9	thisrun
FIELD	247:19	247:19	10	thisrun
LEAF_NODE	247:19	247:19	11	thisrun
LEAF_NODE	247:26	247:26	9	,
ARGUMENT	247:28	247:28	9	pa
FIELD	247:28	247:28	10	pa
LEAF_NODE	247:28	247:28	11	pa
LEAF_NODE	247:30	247:30	9	,
ARGUMENT	247:32	247:32	9	lastx
FIELD	247:32	247:32	10	lastx
LEAF_NODE	247:32	247:32	11	lastx
LEAF_NODE	247:37	247:37	9	)
LEAF_NODE	247:38	247:38	7	;
EXPR_STATEMENT	248:2	248:23	6	buf += sp -> b . rowbytes ;
EXPR	248:2	248:2	7	buf += sp -> b . rowbytes
ASSIGN	248:2	248:9	8	buf += sp -> b . rowbytes
LVAL	248:2	248:2	9	buf
FIELD	248:2	248:2	10	buf
LEAF_NODE	248:2	248:2	11	buf
ASSIGN_OP	248:6	248:6	9	+=
LEAF_NODE	248:6	248:6	10	+=
RVAL	248:9	248:9	9	sp -> b . rowbytes
FIELD	248:9	248:15	10	sp -> b . rowbytes
LEAF_NODE	248:9	248:9	11	sp
LEAF_NODE	248:11	248:11	11	->
LEAF_NODE	248:13	248:13	11	b
LEAF_NODE	248:14	248:14	11	.
LEAF_NODE	248:15	248:15	11	rowbytes
LEAF_NODE	248:23	248:23	7	;
EXPR_STATEMENT	249:2	249:23	6	occ -= sp -> b . rowbytes ;
EXPR	249:2	249:2	7	occ -= sp -> b . rowbytes
ASSIGN	249:2	249:9	8	occ -= sp -> b . rowbytes
LVAL	249:2	249:2	9	occ
FIELD	249:2	249:2	10	occ
LEAF_NODE	249:2	249:2	11	occ
ASSIGN_OP	249:6	249:6	9	-=
LEAF_NODE	249:6	249:6	10	-=
RVAL	249:9	249:9	9	sp -> b . rowbytes
FIELD	249:9	249:15	10	sp -> b . rowbytes
LEAF_NODE	249:9	249:9	11	sp
LEAF_NODE	249:11	249:11	11	->
LEAF_NODE	249:13	249:13	11	b
LEAF_NODE	249:14	249:14	11	.
LEAF_NODE	249:15	249:15	11	rowbytes
LEAF_NODE	249:23	249:23	7	;
EXPR_STATEMENT	250:2	250:12	6	sp -> line ++ ;
EXPR	250:2	250:2	7	sp -> line ++
FIELD	250:2	250:10	8	sp -> line ++
LEAF_NODE	250:2	250:2	9	sp
LEAF_NODE	250:4	250:4	9	->
LEAF_NODE	250:6	250:6	9	line
LEAF_NODE	250:10	250:10	9	++
LEAF_NODE	250:12	250:12	7	;
JUMP_STATEMENT	251:2	251:10	6	continue DESTINATION ;
KEYWORD	251:2	251:2	7	continue
LEAF_NODE	251:2	251:2	8	continue
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	251:10	251:10	7	;
LABEL	252:1	252:6	6	EOF1D :
LEAF_NODE	252:1	252:1	7	EOF1D
LEAF_NODE	252:6	252:6	7	:
EXPR_STATEMENT	253:2	253:16	6	CLEANUP_RUNS ( ) ;
EXPR	253:2	253:2	7	CLEANUP_RUNS ( )
FUNCTION_CALL	253:2	253:15	8	CLEANUP_RUNS ( )
CALLEE	253:2	253:2	9	CLEANUP_RUNS
LEAF_NODE	253:2	253:2	10	CLEANUP_RUNS
LEAF_NODE	253:14	253:14	9	(
LEAF_NODE	253:15	253:15	9	)
LEAF_NODE	253:16	253:16	7	;
LABEL	254:1	254:7	6	EOF1Da :
LEAF_NODE	254:1	254:1	7	EOF1Da
LEAF_NODE	254:7	254:7	7	:
EXPR_STATEMENT	255:2	255:38	6	( * sp -> fill ) ( buf , thisrun , pa , lastx ) ;
EXPR	255:2	255:2	7	( * sp -> fill ) ( buf , thisrun , pa , lastx )
FUNCTION_CALL	255:2	255:37	8	( * sp -> fill ) ( buf , thisrun , pa , lastx )
CALLEE	255:2	255:12	9	( * sp -> fill )
LEAF_NODE	255:2	255:2	10	(
UNARY_EXPR	255:3	255:4	10	* sp -> fill
UNARY_OPERATOR	255:3	255:3	11	*
LEAF_NODE	255:3	255:3	12	*
FIELD	255:4	255:8	11	sp -> fill
LEAF_NODE	255:4	255:4	12	sp
LEAF_NODE	255:6	255:6	12	->
LEAF_NODE	255:8	255:8	12	fill
LEAF_NODE	255:12	255:12	10	)
LEAF_NODE	255:13	255:13	9	(
ARGUMENT	255:14	255:14	9	buf
FIELD	255:14	255:14	10	buf
LEAF_NODE	255:14	255:14	11	buf
LEAF_NODE	255:17	255:17	9	,
ARGUMENT	255:19	255:19	9	thisrun
FIELD	255:19	255:19	10	thisrun
LEAF_NODE	255:19	255:19	11	thisrun
LEAF_NODE	255:26	255:26	9	,
ARGUMENT	255:28	255:28	9	pa
FIELD	255:28	255:28	10	pa
LEAF_NODE	255:28	255:28	11	pa
LEAF_NODE	255:30	255:30	9	,
ARGUMENT	255:32	255:32	9	lastx
FIELD	255:32	255:32	10	lastx
LEAF_NODE	255:32	255:32	11	lastx
LEAF_NODE	255:37	255:37	9	)
LEAF_NODE	255:38	255:38	7	;
EXPR_STATEMENT	256:2	256:24	6	UNCACHE_STATE ( tif , sp ) ;
EXPR	256:2	256:2	7	UNCACHE_STATE ( tif , sp )
FUNCTION_CALL	256:2	256:23	8	UNCACHE_STATE ( tif , sp )
CALLEE	256:2	256:2	9	UNCACHE_STATE
LEAF_NODE	256:2	256:2	10	UNCACHE_STATE
LEAF_NODE	256:15	256:15	9	(
ARGUMENT	256:16	256:16	9	tif
FIELD	256:16	256:16	10	tif
LEAF_NODE	256:16	256:16	11	tif
LEAF_NODE	256:19	256:19	9	,
ARGUMENT	256:21	256:21	9	sp
FIELD	256:21	256:21	10	sp
LEAF_NODE	256:21	256:21	11	sp
LEAF_NODE	256:23	256:23	9	)
LEAF_NODE	256:24	256:24	7	;
JUMP_STATEMENT	257:2	257:13	6	return ( - 1 ) ;
KEYWORD	257:2	257:2	7	return
LEAF_NODE	257:2	257:2	8	return
DESTINATION	257:9	257:9	7	( - 1 )
EXPR	257:9	257:12	8	( - 1 )
LEAF_NODE	257:9	257:9	9	(
UNARY_EXPR	257:10	257:11	9	- 1
UNARY_OPERATOR	257:10	257:10	10	-
LEAF_NODE	257:10	257:10	11	-
FIELD	257:11	257:11	10	1
LEAF_NODE	257:11	257:11	11	1
LEAF_NODE	257:12	257:12	9	)
LEAF_NODE	257:13	257:13	7	;
LEAF_NODE	258:1	258:1	5	}
EXPR_STATEMENT	259:1	259:23	3	UNCACHE_STATE ( tif , sp ) ;
EXPR	259:1	259:1	4	UNCACHE_STATE ( tif , sp )
FUNCTION_CALL	259:1	259:22	5	UNCACHE_STATE ( tif , sp )
CALLEE	259:1	259:1	6	UNCACHE_STATE
LEAF_NODE	259:1	259:1	7	UNCACHE_STATE
LEAF_NODE	259:14	259:14	6	(
ARGUMENT	259:15	259:15	6	tif
FIELD	259:15	259:15	7	tif
LEAF_NODE	259:15	259:15	8	tif
LEAF_NODE	259:18	259:18	6	,
ARGUMENT	259:20	259:20	6	sp
FIELD	259:20	259:20	7	sp
LEAF_NODE	259:20	259:20	8	sp
LEAF_NODE	259:22	259:22	6	)
LEAF_NODE	259:23	259:23	4	;
JUMP_STATEMENT	260:1	260:11	3	return ( 1 ) ;
KEYWORD	260:1	260:1	4	return
LEAF_NODE	260:1	260:1	5	return
DESTINATION	260:8	260:8	4	( 1 )
EXPR	260:8	260:10	5	( 1 )
LEAF_NODE	260:8	260:8	6	(
FIELD	260:9	260:9	6	1
LEAF_NODE	260:9	260:9	7	1
LEAF_NODE	260:10	260:10	6	)
LEAF_NODE	260:11	260:11	4	;
LEAF_NODE	261:0	261:0	2	}
FUNCTION_DEF	267:0	318:0	1	
RETURN_TYPE	267:0	267:7	2	static int
LEAF_NODE	267:0	267:0	3	static
TYPE_NAME	267:7	267:7	3	int
LEAF_NODE	267:7	267:7	4	int
FUNCTION_NAME	268:0	268:0	2	Fax3Decode2D
LEAF_NODE	268:0	268:0	3	Fax3Decode2D
PARAMETER_LIST	268:12	268:58	2	( TIFF * tif , uint8 * buf , tmsize_t occ , uint16 s )
LEAF_NODE	268:12	268:12	3	(
PARAMETER_DECL	268:13	268:19	3	TIFF * tif
TYPE	268:13	268:17	4	TIFF *
TYPE_NAME	268:13	268:13	5	TIFF
LEAF_NODE	268:13	268:13	6	TIFF
POINTER	268:17	268:17	5	*
LEAF_NODE	268:17	268:17	6	*
NAME	268:19	268:19	4	tif
LEAF_NODE	268:19	268:19	5	tif
LEAF_NODE	268:22	268:22	3	,
PARAMETER_DECL	268:24	268:31	3	uint8 * buf
TYPE	268:24	268:29	4	uint8 *
TYPE_NAME	268:24	268:24	5	uint8
LEAF_NODE	268:24	268:24	6	uint8
POINTER	268:29	268:29	5	*
LEAF_NODE	268:29	268:29	6	*
NAME	268:31	268:31	4	buf
LEAF_NODE	268:31	268:31	5	buf
LEAF_NODE	268:34	268:34	3	,
PARAMETER_DECL	268:36	268:45	3	tmsize_t occ
TYPE	268:36	268:36	4	tmsize_t
TYPE_NAME	268:36	268:36	5	tmsize_t
LEAF_NODE	268:36	268:36	6	tmsize_t
NAME	268:45	268:45	4	occ
LEAF_NODE	268:45	268:45	5	occ
LEAF_NODE	268:48	268:48	3	,
PARAMETER_DECL	268:50	268:57	3	uint16 s
TYPE	268:50	268:50	4	uint16
TYPE_NAME	268:50	268:50	5	uint16
LEAF_NODE	268:50	268:50	6	uint16
NAME	268:57	268:57	4	s
LEAF_NODE	268:57	268:57	5	s
LEAF_NODE	268:58	268:58	3	)
LEAF_NODE	269:0	269:0	2	{
STATEMENTS	270:1	317:1	2	
EXPR_STATEMENT	270:1	270:42	3	DECLARE_STATE_2D ( tif , sp , "Fax3Decode2D" ) ;
EXPR	270:1	270:1	4	DECLARE_STATE_2D ( tif , sp , "Fax3Decode2D" )
FUNCTION_CALL	270:1	270:41	5	DECLARE_STATE_2D ( tif , sp , "Fax3Decode2D" )
CALLEE	270:1	270:1	6	DECLARE_STATE_2D
LEAF_NODE	270:1	270:1	7	DECLARE_STATE_2D
LEAF_NODE	270:17	270:17	6	(
ARGUMENT	270:18	270:18	6	tif
FIELD	270:18	270:18	7	tif
LEAF_NODE	270:18	270:18	8	tif
LEAF_NODE	270:21	270:21	6	,
ARGUMENT	270:23	270:23	6	sp
FIELD	270:23	270:23	7	sp
LEAF_NODE	270:23	270:23	8	sp
LEAF_NODE	270:25	270:25	6	,
ARGUMENT	270:27	270:27	6	"Fax3Decode2D"
FIELD	270:27	270:27	7	"Fax3Decode2D"
LEAF_NODE	270:27	270:27	8	"Fax3Decode2D"
LEAF_NODE	270:41	270:41	6	)
LEAF_NODE	270:42	270:42	4	;
SIMPLE_DECL	271:1	271:9	3	int is1D ;
VAR_DECL	271:1	271:5	4	int is1D
TYPE	271:1	271:1	5	int
TYPE_NAME	271:1	271:1	6	int
LEAF_NODE	271:1	271:1	7	int
NAME	271:5	271:5	5	is1D
LEAF_NODE	271:5	271:5	6	is1D
LEAF_NODE	271:9	271:9	4	;
EXPR_STATEMENT	272:1	272:9	3	( void ) s ;
EXPR	272:1	272:8	4	( void ) s
LEAF_NODE	272:1	272:1	5	(
TYPE_NAME	272:2	272:2	5	void
LEAF_NODE	272:2	272:2	6	void
LEAF_NODE	272:6	272:6	5	)
FIELD	272:8	272:8	5	s
LEAF_NODE	272:8	272:8	6	s
LEAF_NODE	272:9	272:9	4	;
SELECTION	273:1	274:1	3	
KEYWORD	273:1	273:1	4	if
LEAF_NODE	273:1	273:1	5	if
LEAF_NODE	273:4	273:4	4	(
CONDITION	273:5	273:5	4	occ % sp -> b . rowbytes
EXPR	273:5	273:11	5	occ % sp -> b . rowbytes
FIELD	273:5	273:5	6	occ
LEAF_NODE	273:5	273:5	7	occ
LEAF_NODE	273:9	273:9	6	%
FIELD	273:11	273:17	6	sp -> b . rowbytes
LEAF_NODE	273:11	273:11	7	sp
LEAF_NODE	273:13	273:13	7	->
LEAF_NODE	273:15	273:15	7	b
LEAF_NODE	273:16	273:16	7	.
LEAF_NODE	273:17	273:17	7	rowbytes
LEAF_NODE	273:25	273:25	4	)
STATEMENTS	274:1	277:1	4	
LEAF_NODE	274:1	274:1	5	{
STATEMENTS	275:2	276:2	5	
EXPR_STATEMENT	275:2	275:82	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" ) ;
EXPR	275:2	275:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
FUNCTION_CALL	275:2	275:81	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
CALLEE	275:2	275:2	9	TIFFErrorExt
LEAF_NODE	275:2	275:2	10	TIFFErrorExt
LEAF_NODE	275:14	275:14	9	(
ARGUMENT	275:15	275:15	9	tif -> tif_clientdata
FIELD	275:15	275:20	10	tif -> tif_clientdata
LEAF_NODE	275:15	275:15	11	tif
LEAF_NODE	275:18	275:18	11	->
LEAF_NODE	275:20	275:20	11	tif_clientdata
LEAF_NODE	275:34	275:34	9	,
ARGUMENT	275:36	275:36	9	module
FIELD	275:36	275:36	10	module
LEAF_NODE	275:36	275:36	11	module
LEAF_NODE	275:42	275:42	9	,
ARGUMENT	275:44	275:44	9	"Fractional scanlines cannot be read"
FIELD	275:44	275:44	10	"Fractional scanlines cannot be read"
LEAF_NODE	275:44	275:44	11	"Fractional scanlines cannot be read"
LEAF_NODE	275:81	275:81	9	)
LEAF_NODE	275:82	275:82	7	;
JUMP_STATEMENT	276:2	276:13	6	return ( - 1 ) ;
KEYWORD	276:2	276:2	7	return
LEAF_NODE	276:2	276:2	8	return
DESTINATION	276:9	276:9	7	( - 1 )
EXPR	276:9	276:12	8	( - 1 )
LEAF_NODE	276:9	276:9	9	(
UNARY_EXPR	276:10	276:11	9	- 1
UNARY_OPERATOR	276:10	276:10	10	-
LEAF_NODE	276:10	276:10	11	-
FIELD	276:11	276:11	10	1
LEAF_NODE	276:11	276:11	11	1
LEAF_NODE	276:12	276:12	9	)
LEAF_NODE	276:13	276:13	7	;
LEAF_NODE	277:1	277:1	5	}
EXPR_STATEMENT	278:1	278:21	3	CACHE_STATE ( tif , sp ) ;
EXPR	278:1	278:1	4	CACHE_STATE ( tif , sp )
FUNCTION_CALL	278:1	278:20	5	CACHE_STATE ( tif , sp )
CALLEE	278:1	278:1	6	CACHE_STATE
LEAF_NODE	278:1	278:1	7	CACHE_STATE
LEAF_NODE	278:12	278:12	6	(
ARGUMENT	278:13	278:13	6	tif
FIELD	278:13	278:13	7	tif
LEAF_NODE	278:13	278:13	8	tif
LEAF_NODE	278:16	278:16	6	,
ARGUMENT	278:18	278:18	6	sp
FIELD	278:18	278:18	7	sp
LEAF_NODE	278:18	278:18	8	sp
LEAF_NODE	278:20	278:20	6	)
LEAF_NODE	278:21	278:21	4	;
ITERATION	279:1	279:17	3	
KEYWORD	279:1	279:1	4	while
LEAF_NODE	279:1	279:1	5	while
LEAF_NODE	279:7	279:7	4	(
CONDITION	279:8	279:8	4	occ > 0
EXPR	279:8	279:14	5	occ > 0
FIELD	279:8	279:8	6	occ
LEAF_NODE	279:8	279:8	7	occ
REL_OPERATOR	279:12	279:12	6	>
LEAF_NODE	279:12	279:12	7	>
FIELD	279:14	279:14	6	0
LEAF_NODE	279:14	279:14	7	0
LEAF_NODE	279:15	279:15	4	)
STATEMENTS	279:17	315:1	4	
LEAF_NODE	279:17	279:17	5	{
STATEMENTS	280:2	314:2	5	
EXPR_STATEMENT	280:2	280:8	6	a0 = 0 ;
EXPR	280:2	280:2	7	a0 = 0
ASSIGN	280:2	280:7	8	a0 = 0
LVAL	280:2	280:2	9	a0
FIELD	280:2	280:2	10	a0
LEAF_NODE	280:2	280:2	11	a0
ASSIGN_OP	280:5	280:5	9	=
LEAF_NODE	280:5	280:5	10	=
RVAL	280:7	280:7	9	0
FIELD	280:7	280:7	10	0
LEAF_NODE	280:7	280:7	11	0
LEAF_NODE	280:8	280:8	7	;
EXPR_STATEMENT	281:2	281:15	6	RunLength = 0 ;
EXPR	281:2	281:2	7	RunLength = 0
ASSIGN	281:2	281:14	8	RunLength = 0
LVAL	281:2	281:2	9	RunLength
FIELD	281:2	281:2	10	RunLength
LEAF_NODE	281:2	281:2	11	RunLength
ASSIGN_OP	281:12	281:12	9	=
LEAF_NODE	281:12	281:12	10	=
RVAL	281:14	281:14	9	0
FIELD	281:14	281:14	10	0
LEAF_NODE	281:14	281:14	11	0
LEAF_NODE	281:15	281:15	7	;
EXPR_STATEMENT	282:2	282:28	6	pa = thisrun = sp -> curruns ;
EXPR	282:2	282:2	7	pa = thisrun = sp -> curruns
ASSIGN	282:2	282:7	8	pa = thisrun = sp -> curruns
LVAL	282:2	282:2	9	pa
FIELD	282:2	282:2	10	pa
LEAF_NODE	282:2	282:2	11	pa
ASSIGN_OP	282:5	282:5	9	=
LEAF_NODE	282:5	282:5	10	=
RVAL	282:7	282:7	9	thisrun = sp -> curruns
ASSIGN	282:7	282:17	10	thisrun = sp -> curruns
LVAL	282:7	282:7	11	thisrun
FIELD	282:7	282:7	12	thisrun
LEAF_NODE	282:7	282:7	13	thisrun
ASSIGN_OP	282:15	282:15	11	=
LEAF_NODE	282:15	282:15	12	=
RVAL	282:17	282:17	11	sp -> curruns
FIELD	282:17	282:21	12	sp -> curruns
LEAF_NODE	282:17	282:17	13	sp
LEAF_NODE	282:19	282:19	13	->
LEAF_NODE	282:21	282:21	13	curruns
LEAF_NODE	282:28	282:28	7	;
EXPR_STATEMENT	284:2	285:32	6	printf ( "\nBitAcc=%08X, BitsAvail = %d EOLcnt = %d" , BitAcc , BitsAvail , EOLcnt ) ;
EXPR	284:2	284:2	7	printf ( "\nBitAcc=%08X, BitsAvail = %d EOLcnt = %d" , BitAcc , BitsAvail , EOLcnt )
FUNCTION_CALL	284:2	285:31	8	printf ( "\nBitAcc=%08X, BitsAvail = %d EOLcnt = %d" , BitAcc , BitsAvail , EOLcnt )
CALLEE	284:2	284:2	9	printf
LEAF_NODE	284:2	284:2	10	printf
LEAF_NODE	284:8	284:8	9	(
ARGUMENT	284:9	284:9	9	"\nBitAcc=%08X, BitsAvail = %d EOLcnt = %d"
FIELD	284:9	284:9	10	"\nBitAcc=%08X, BitsAvail = %d EOLcnt = %d"
LEAF_NODE	284:9	284:9	11	"\nBitAcc=%08X, BitsAvail = %d EOLcnt = %d"
LEAF_NODE	284:52	284:52	9	,
ARGUMENT	285:6	285:6	9	BitAcc
FIELD	285:6	285:6	10	BitAcc
LEAF_NODE	285:6	285:6	11	BitAcc
LEAF_NODE	285:12	285:12	9	,
ARGUMENT	285:14	285:14	9	BitsAvail
FIELD	285:14	285:14	10	BitsAvail
LEAF_NODE	285:14	285:14	11	BitsAvail
LEAF_NODE	285:23	285:23	9	,
ARGUMENT	285:25	285:25	9	EOLcnt
FIELD	285:25	285:25	10	EOLcnt
LEAF_NODE	285:25	285:25	11	EOLcnt
LEAF_NODE	285:31	285:31	9	)
LEAF_NODE	285:32	285:32	7	;
EXPR_STATEMENT	287:2	287:17	6	SYNC_EOL ( EOF2D ) ;
EXPR	287:2	287:2	7	SYNC_EOL ( EOF2D )
FUNCTION_CALL	287:2	287:16	8	SYNC_EOL ( EOF2D )
CALLEE	287:2	287:2	9	SYNC_EOL
LEAF_NODE	287:2	287:2	10	SYNC_EOL
LEAF_NODE	287:10	287:10	9	(
ARGUMENT	287:11	287:11	9	EOF2D
FIELD	287:11	287:11	10	EOF2D
LEAF_NODE	287:11	287:11	11	EOF2D
LEAF_NODE	287:16	287:16	9	)
LEAF_NODE	287:17	287:17	7	;
EXPR_STATEMENT	288:2	288:21	6	NeedBits8 ( 1 , EOF2D ) ;
EXPR	288:2	288:2	7	NeedBits8 ( 1 , EOF2D )
FUNCTION_CALL	288:2	288:20	8	NeedBits8 ( 1 , EOF2D )
CALLEE	288:2	288:2	9	NeedBits8
LEAF_NODE	288:2	288:2	10	NeedBits8
LEAF_NODE	288:11	288:11	9	(
ARGUMENT	288:12	288:12	9	1
FIELD	288:12	288:12	10	1
LEAF_NODE	288:12	288:12	11	1
LEAF_NODE	288:13	288:13	9	,
ARGUMENT	288:15	288:15	9	EOF2D
FIELD	288:15	288:15	10	EOF2D
LEAF_NODE	288:15	288:15	11	EOF2D
LEAF_NODE	288:20	288:20	9	)
LEAF_NODE	288:21	288:21	7	;
EXPR_STATEMENT	289:2	289:19	6	is1D = GetBits ( 1 ) ;
EXPR	289:2	289:2	7	is1D = GetBits ( 1 )
ASSIGN	289:2	289:9	8	is1D = GetBits ( 1 )
LVAL	289:2	289:2	9	is1D
FIELD	289:2	289:2	10	is1D
LEAF_NODE	289:2	289:2	11	is1D
ASSIGN_OP	289:7	289:7	9	=
LEAF_NODE	289:7	289:7	10	=
RVAL	289:9	289:9	9	GetBits ( 1 )
FUNCTION_CALL	289:9	289:18	10	GetBits ( 1 )
CALLEE	289:9	289:9	11	GetBits
LEAF_NODE	289:9	289:9	12	GetBits
LEAF_NODE	289:16	289:16	11	(
ARGUMENT	289:17	289:17	11	1
FIELD	289:17	289:17	12	1
LEAF_NODE	289:17	289:17	13	1
LEAF_NODE	289:18	289:18	11	)
LEAF_NODE	289:19	289:19	7	;
EXPR_STATEMENT	290:2	290:12	6	ClrBits ( 1 ) ;
EXPR	290:2	290:2	7	ClrBits ( 1 )
FUNCTION_CALL	290:2	290:11	8	ClrBits ( 1 )
CALLEE	290:2	290:2	9	ClrBits
LEAF_NODE	290:2	290:2	10	ClrBits
LEAF_NODE	290:9	290:9	9	(
ARGUMENT	290:10	290:10	9	1
FIELD	290:10	290:10	10	1
LEAF_NODE	290:10	290:10	11	1
LEAF_NODE	290:11	290:11	9	)
LEAF_NODE	290:12	290:12	7	;
EXPR_STATEMENT	292:2	293:39	6	printf ( " %s\n-------------------- %d\n" , is1D ? "1D" : "2D" , tif -> tif_row ) ;
EXPR	292:2	292:2	7	printf ( " %s\n-------------------- %d\n" , is1D ? "1D" : "2D" , tif -> tif_row )
FUNCTION_CALL	292:2	293:38	8	printf ( " %s\n-------------------- %d\n" , is1D ? "1D" : "2D" , tif -> tif_row )
CALLEE	292:2	292:2	9	printf
LEAF_NODE	292:2	292:2	10	printf
LEAF_NODE	292:8	292:8	9	(
ARGUMENT	292:9	292:9	9	" %s\n-------------------- %d\n"
FIELD	292:9	292:9	10	" %s\n-------------------- %d\n"
LEAF_NODE	292:9	292:9	11	" %s\n-------------------- %d\n"
LEAF_NODE	292:41	292:41	9	,
ARGUMENT	293:6	293:6	9	is1D ? "1D" : "2D"
COND_EXPR	293:6	293:20	10	is1D ? "1D" : "2D"
CONDITION	293:6	293:6	11	is1D
FIELD	293:6	293:6	12	is1D
LEAF_NODE	293:6	293:6	13	is1D
LEAF_NODE	293:11	293:11	11	?
EXPR	293:13	293:13	11	"1D"
FIELD	293:13	293:13	12	"1D"
LEAF_NODE	293:13	293:13	13	"1D"
LEAF_NODE	293:18	293:18	11	:
FIELD	293:20	293:20	11	"2D"
LEAF_NODE	293:20	293:20	12	"2D"
LEAF_NODE	293:24	293:24	9	,
ARGUMENT	293:26	293:26	9	tif -> tif_row
FIELD	293:26	293:31	10	tif -> tif_row
LEAF_NODE	293:26	293:26	11	tif
LEAF_NODE	293:29	293:29	11	->
LEAF_NODE	293:31	293:31	11	tif_row
LEAF_NODE	293:38	293:38	9	)
LEAF_NODE	293:39	293:39	7	;
EXPR_STATEMENT	294:2	294:16	6	fflush ( stdout ) ;
EXPR	294:2	294:2	7	fflush ( stdout )
FUNCTION_CALL	294:2	294:15	8	fflush ( stdout )
CALLEE	294:2	294:2	9	fflush
LEAF_NODE	294:2	294:2	10	fflush
LEAF_NODE	294:8	294:8	9	(
ARGUMENT	294:9	294:9	9	stdout
FIELD	294:9	294:9	10	stdout
LEAF_NODE	294:9	294:9	11	stdout
LEAF_NODE	294:15	294:15	9	)
LEAF_NODE	294:16	294:16	7	;
EXPR_STATEMENT	296:2	296:18	6	pb = sp -> refruns ;
EXPR	296:2	296:2	7	pb = sp -> refruns
ASSIGN	296:2	296:7	8	pb = sp -> refruns
LVAL	296:2	296:2	9	pb
FIELD	296:2	296:2	10	pb
LEAF_NODE	296:2	296:2	11	pb
ASSIGN_OP	296:5	296:5	9	=
LEAF_NODE	296:5	296:5	10	=
RVAL	296:7	296:7	9	sp -> refruns
FIELD	296:7	296:11	10	sp -> refruns
LEAF_NODE	296:7	296:7	11	sp
LEAF_NODE	296:9	296:9	11	->
LEAF_NODE	296:11	296:11	11	refruns
LEAF_NODE	296:18	296:18	7	;
EXPR_STATEMENT	297:2	297:12	6	b1 = * pb ++ ;
EXPR	297:2	297:2	7	b1 = * pb ++
ASSIGN	297:2	297:7	8	b1 = * pb ++
LVAL	297:2	297:2	9	b1
FIELD	297:2	297:2	10	b1
LEAF_NODE	297:2	297:2	11	b1
ASSIGN_OP	297:5	297:5	9	=
LEAF_NODE	297:5	297:5	10	=
RVAL	297:7	297:7	9	* pb ++
UNARY_EXPR	297:7	297:8	10	* pb ++
UNARY_OPERATOR	297:7	297:7	11	*
LEAF_NODE	297:7	297:7	12	*
FIELD	297:8	297:10	11	pb ++
LEAF_NODE	297:8	297:8	12	pb
LEAF_NODE	297:10	297:10	12	++
LEAF_NODE	297:12	297:12	7	;
SELECTION	298:2	299:3	6	
KEYWORD	298:2	298:2	7	if
LEAF_NODE	298:2	298:2	8	if
LEAF_NODE	298:5	298:5	7	(
CONDITION	298:6	298:6	7	is1D
EXPR	298:6	298:6	8	is1D
FIELD	298:6	298:6	9	is1D
LEAF_NODE	298:6	298:6	10	is1D
LEAF_NODE	298:10	298:10	7	)
STATEMENTS	299:3	299:3	7	
EXPR_STATEMENT	299:3	299:19	8	EXPAND1D ( EOF2Da ) ;
EXPR	299:3	299:3	9	EXPAND1D ( EOF2Da )
FUNCTION_CALL	299:3	299:18	10	EXPAND1D ( EOF2Da )
CALLEE	299:3	299:3	11	EXPAND1D
LEAF_NODE	299:3	299:3	12	EXPAND1D
LEAF_NODE	299:11	299:11	11	(
ARGUMENT	299:12	299:12	11	EOF2Da
FIELD	299:12	299:12	12	EOF2Da
LEAF_NODE	299:12	299:12	13	EOF2Da
LEAF_NODE	299:18	299:18	11	)
LEAF_NODE	299:19	299:19	9	;
SELECTION	300:2	301:3	6	
KEYWORD	300:2	300:2	7	else
LEAF_NODE	300:2	300:2	8	else
STATEMENTS	301:3	301:3	7	
EXPR_STATEMENT	301:3	301:19	8	EXPAND2D ( EOF2Da ) ;
EXPR	301:3	301:3	9	EXPAND2D ( EOF2Da )
FUNCTION_CALL	301:3	301:18	10	EXPAND2D ( EOF2Da )
CALLEE	301:3	301:3	11	EXPAND2D
LEAF_NODE	301:3	301:3	12	EXPAND2D
LEAF_NODE	301:11	301:11	11	(
ARGUMENT	301:12	301:12	11	EOF2Da
FIELD	301:12	301:12	12	EOF2Da
LEAF_NODE	301:12	301:12	13	EOF2Da
LEAF_NODE	301:18	301:18	11	)
LEAF_NODE	301:19	301:19	9	;
EXPR_STATEMENT	302:2	302:38	6	( * sp -> fill ) ( buf , thisrun , pa , lastx ) ;
EXPR	302:2	302:2	7	( * sp -> fill ) ( buf , thisrun , pa , lastx )
FUNCTION_CALL	302:2	302:37	8	( * sp -> fill ) ( buf , thisrun , pa , lastx )
CALLEE	302:2	302:12	9	( * sp -> fill )
LEAF_NODE	302:2	302:2	10	(
UNARY_EXPR	302:3	302:4	10	* sp -> fill
UNARY_OPERATOR	302:3	302:3	11	*
LEAF_NODE	302:3	302:3	12	*
FIELD	302:4	302:8	11	sp -> fill
LEAF_NODE	302:4	302:4	12	sp
LEAF_NODE	302:6	302:6	12	->
LEAF_NODE	302:8	302:8	12	fill
LEAF_NODE	302:12	302:12	10	)
LEAF_NODE	302:13	302:13	9	(
ARGUMENT	302:14	302:14	9	buf
FIELD	302:14	302:14	10	buf
LEAF_NODE	302:14	302:14	11	buf
LEAF_NODE	302:17	302:17	9	,
ARGUMENT	302:19	302:19	9	thisrun
FIELD	302:19	302:19	10	thisrun
LEAF_NODE	302:19	302:19	11	thisrun
LEAF_NODE	302:26	302:26	9	,
ARGUMENT	302:28	302:28	9	pa
FIELD	302:28	302:28	10	pa
LEAF_NODE	302:28	302:28	11	pa
LEAF_NODE	302:30	302:30	9	,
ARGUMENT	302:32	302:32	9	lastx
FIELD	302:32	302:32	10	lastx
LEAF_NODE	302:32	302:32	11	lastx
LEAF_NODE	302:37	302:37	9	)
LEAF_NODE	302:38	302:38	7	;
EXPR_STATEMENT	303:2	303:13	6	SETVALUE ( 0 ) ;
EXPR	303:2	303:2	7	SETVALUE ( 0 )
FUNCTION_CALL	303:2	303:12	8	SETVALUE ( 0 )
CALLEE	303:2	303:2	9	SETVALUE
LEAF_NODE	303:2	303:2	10	SETVALUE
LEAF_NODE	303:10	303:10	9	(
ARGUMENT	303:11	303:11	9	0
FIELD	303:11	303:11	10	0
LEAF_NODE	303:11	303:11	11	0
LEAF_NODE	303:12	303:12	9	)
LEAF_NODE	303:13	303:13	7	;
LEAF_NODE	304:2	304:2	6	SWAP
LEAF_NODE	304:6	304:6	6	(
LEAF_NODE	304:7	304:7	6	uint32
LEAF_NODE	304:13	304:13	6	*
LEAF_NODE	304:14	304:14	6	,
LEAF_NODE	304:16	304:16	6	sp
LEAF_NODE	304:18	304:18	6	->
LEAF_NODE	304:20	304:20	6	curruns
LEAF_NODE	304:27	304:27	6	,
LEAF_NODE	304:29	304:29	6	sp
LEAF_NODE	304:31	304:31	6	->
LEAF_NODE	304:33	304:33	6	refruns
LEAF_NODE	304:40	304:40	6	)
LEAF_NODE	304:41	304:41	6	;
EXPR_STATEMENT	305:2	305:23	6	buf += sp -> b . rowbytes ;
EXPR	305:2	305:2	7	buf += sp -> b . rowbytes
ASSIGN	305:2	305:9	8	buf += sp -> b . rowbytes
LVAL	305:2	305:2	9	buf
FIELD	305:2	305:2	10	buf
LEAF_NODE	305:2	305:2	11	buf
ASSIGN_OP	305:6	305:6	9	+=
LEAF_NODE	305:6	305:6	10	+=
RVAL	305:9	305:9	9	sp -> b . rowbytes
FIELD	305:9	305:15	10	sp -> b . rowbytes
LEAF_NODE	305:9	305:9	11	sp
LEAF_NODE	305:11	305:11	11	->
LEAF_NODE	305:13	305:13	11	b
LEAF_NODE	305:14	305:14	11	.
LEAF_NODE	305:15	305:15	11	rowbytes
LEAF_NODE	305:23	305:23	7	;
EXPR_STATEMENT	306:2	306:23	6	occ -= sp -> b . rowbytes ;
EXPR	306:2	306:2	7	occ -= sp -> b . rowbytes
ASSIGN	306:2	306:9	8	occ -= sp -> b . rowbytes
LVAL	306:2	306:2	9	occ
FIELD	306:2	306:2	10	occ
LEAF_NODE	306:2	306:2	11	occ
ASSIGN_OP	306:6	306:6	9	-=
LEAF_NODE	306:6	306:6	10	-=
RVAL	306:9	306:9	9	sp -> b . rowbytes
FIELD	306:9	306:15	10	sp -> b . rowbytes
LEAF_NODE	306:9	306:9	11	sp
LEAF_NODE	306:11	306:11	11	->
LEAF_NODE	306:13	306:13	11	b
LEAF_NODE	306:14	306:14	11	.
LEAF_NODE	306:15	306:15	11	rowbytes
LEAF_NODE	306:23	306:23	7	;
EXPR_STATEMENT	307:2	307:12	6	sp -> line ++ ;
EXPR	307:2	307:2	7	sp -> line ++
FIELD	307:2	307:10	8	sp -> line ++
LEAF_NODE	307:2	307:2	9	sp
LEAF_NODE	307:4	307:4	9	->
LEAF_NODE	307:6	307:6	9	line
LEAF_NODE	307:10	307:10	9	++
LEAF_NODE	307:12	307:12	7	;
JUMP_STATEMENT	308:2	308:10	6	continue DESTINATION ;
KEYWORD	308:2	308:2	7	continue
LEAF_NODE	308:2	308:2	8	continue
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	308:10	308:10	7	;
LABEL	309:1	309:6	6	EOF2D :
LEAF_NODE	309:1	309:1	7	EOF2D
LEAF_NODE	309:6	309:6	7	:
EXPR_STATEMENT	310:2	310:16	6	CLEANUP_RUNS ( ) ;
EXPR	310:2	310:2	7	CLEANUP_RUNS ( )
FUNCTION_CALL	310:2	310:15	8	CLEANUP_RUNS ( )
CALLEE	310:2	310:2	9	CLEANUP_RUNS
LEAF_NODE	310:2	310:2	10	CLEANUP_RUNS
LEAF_NODE	310:14	310:14	9	(
LEAF_NODE	310:15	310:15	9	)
LEAF_NODE	310:16	310:16	7	;
LABEL	311:1	311:7	6	EOF2Da :
LEAF_NODE	311:1	311:1	7	EOF2Da
LEAF_NODE	311:7	311:7	7	:
EXPR_STATEMENT	312:2	312:38	6	( * sp -> fill ) ( buf , thisrun , pa , lastx ) ;
EXPR	312:2	312:2	7	( * sp -> fill ) ( buf , thisrun , pa , lastx )
FUNCTION_CALL	312:2	312:37	8	( * sp -> fill ) ( buf , thisrun , pa , lastx )
CALLEE	312:2	312:12	9	( * sp -> fill )
LEAF_NODE	312:2	312:2	10	(
UNARY_EXPR	312:3	312:4	10	* sp -> fill
UNARY_OPERATOR	312:3	312:3	11	*
LEAF_NODE	312:3	312:3	12	*
FIELD	312:4	312:8	11	sp -> fill
LEAF_NODE	312:4	312:4	12	sp
LEAF_NODE	312:6	312:6	12	->
LEAF_NODE	312:8	312:8	12	fill
LEAF_NODE	312:12	312:12	10	)
LEAF_NODE	312:13	312:13	9	(
ARGUMENT	312:14	312:14	9	buf
FIELD	312:14	312:14	10	buf
LEAF_NODE	312:14	312:14	11	buf
LEAF_NODE	312:17	312:17	9	,
ARGUMENT	312:19	312:19	9	thisrun
FIELD	312:19	312:19	10	thisrun
LEAF_NODE	312:19	312:19	11	thisrun
LEAF_NODE	312:26	312:26	9	,
ARGUMENT	312:28	312:28	9	pa
FIELD	312:28	312:28	10	pa
LEAF_NODE	312:28	312:28	11	pa
LEAF_NODE	312:30	312:30	9	,
ARGUMENT	312:32	312:32	9	lastx
FIELD	312:32	312:32	10	lastx
LEAF_NODE	312:32	312:32	11	lastx
LEAF_NODE	312:37	312:37	9	)
LEAF_NODE	312:38	312:38	7	;
EXPR_STATEMENT	313:2	313:24	6	UNCACHE_STATE ( tif , sp ) ;
EXPR	313:2	313:2	7	UNCACHE_STATE ( tif , sp )
FUNCTION_CALL	313:2	313:23	8	UNCACHE_STATE ( tif , sp )
CALLEE	313:2	313:2	9	UNCACHE_STATE
LEAF_NODE	313:2	313:2	10	UNCACHE_STATE
LEAF_NODE	313:15	313:15	9	(
ARGUMENT	313:16	313:16	9	tif
FIELD	313:16	313:16	10	tif
LEAF_NODE	313:16	313:16	11	tif
LEAF_NODE	313:19	313:19	9	,
ARGUMENT	313:21	313:21	9	sp
FIELD	313:21	313:21	10	sp
LEAF_NODE	313:21	313:21	11	sp
LEAF_NODE	313:23	313:23	9	)
LEAF_NODE	313:24	313:24	7	;
JUMP_STATEMENT	314:2	314:13	6	return ( - 1 ) ;
KEYWORD	314:2	314:2	7	return
LEAF_NODE	314:2	314:2	8	return
DESTINATION	314:9	314:9	7	( - 1 )
EXPR	314:9	314:12	8	( - 1 )
LEAF_NODE	314:9	314:9	9	(
UNARY_EXPR	314:10	314:11	9	- 1
UNARY_OPERATOR	314:10	314:10	10	-
LEAF_NODE	314:10	314:10	11	-
FIELD	314:11	314:11	10	1
LEAF_NODE	314:11	314:11	11	1
LEAF_NODE	314:12	314:12	9	)
LEAF_NODE	314:13	314:13	7	;
LEAF_NODE	315:1	315:1	5	}
EXPR_STATEMENT	316:1	316:23	3	UNCACHE_STATE ( tif , sp ) ;
EXPR	316:1	316:1	4	UNCACHE_STATE ( tif , sp )
FUNCTION_CALL	316:1	316:22	5	UNCACHE_STATE ( tif , sp )
CALLEE	316:1	316:1	6	UNCACHE_STATE
LEAF_NODE	316:1	316:1	7	UNCACHE_STATE
LEAF_NODE	316:14	316:14	6	(
ARGUMENT	316:15	316:15	6	tif
FIELD	316:15	316:15	7	tif
LEAF_NODE	316:15	316:15	8	tif
LEAF_NODE	316:18	316:18	6	,
ARGUMENT	316:20	316:20	6	sp
FIELD	316:20	316:20	7	sp
LEAF_NODE	316:20	316:20	8	sp
LEAF_NODE	316:22	316:22	6	)
LEAF_NODE	316:23	316:23	4	;
JUMP_STATEMENT	317:1	317:11	3	return ( 1 ) ;
KEYWORD	317:1	317:1	4	return
LEAF_NODE	317:1	317:1	5	return
DESTINATION	317:8	317:8	4	( 1 )
EXPR	317:8	317:10	5	( 1 )
LEAF_NODE	317:8	317:8	6	(
FIELD	317:9	317:9	6	1
LEAF_NODE	317:9	317:9	7	1
LEAF_NODE	317:10	317:10	6	)
LEAF_NODE	317:11	317:11	4	;
LEAF_NODE	318:0	318:0	2	}
FUNCTION_DEF	395:0	482:0	1	
RETURN_TYPE	395:0	395:0	2	void
TYPE_NAME	395:0	395:0	3	void
LEAF_NODE	395:0	395:0	4	void
FUNCTION_NAME	396:0	396:0	2	_TIFFFax3fillruns
LEAF_NODE	396:0	396:0	3	_TIFFFax3fillruns
PARAMETER_LIST	396:17	396:78	2	( unsigned char * buf , uint32 * runs , uint32 * erun , uint32 lastx )
LEAF_NODE	396:17	396:17	3	(
PARAMETER_DECL	396:18	396:33	3	unsigned char * buf
TYPE	396:18	396:31	4	unsigned char *
TYPE_NAME	396:18	396:27	5	unsigned char
LEAF_NODE	396:18	396:18	6	unsigned
LEAF_NODE	396:27	396:27	6	char
POINTER	396:31	396:31	5	*
LEAF_NODE	396:31	396:31	6	*
NAME	396:33	396:33	4	buf
LEAF_NODE	396:33	396:33	5	buf
LEAF_NODE	396:36	396:36	3	,
PARAMETER_DECL	396:38	396:46	3	uint32 * runs
TYPE	396:38	396:44	4	uint32 *
TYPE_NAME	396:38	396:38	5	uint32
LEAF_NODE	396:38	396:38	6	uint32
POINTER	396:44	396:44	5	*
LEAF_NODE	396:44	396:44	6	*
NAME	396:46	396:46	4	runs
LEAF_NODE	396:46	396:46	5	runs
LEAF_NODE	396:50	396:50	3	,
PARAMETER_DECL	396:52	396:60	3	uint32 * erun
TYPE	396:52	396:58	4	uint32 *
TYPE_NAME	396:52	396:52	5	uint32
LEAF_NODE	396:52	396:52	6	uint32
POINTER	396:58	396:58	5	*
LEAF_NODE	396:58	396:58	6	*
NAME	396:60	396:60	4	erun
LEAF_NODE	396:60	396:60	5	erun
LEAF_NODE	396:64	396:64	3	,
PARAMETER_DECL	396:66	396:73	3	uint32 lastx
TYPE	396:66	396:66	4	uint32
TYPE_NAME	396:66	396:66	5	uint32
LEAF_NODE	396:66	396:66	6	uint32
NAME	396:73	396:73	4	lastx
LEAF_NODE	396:73	396:73	5	lastx
LEAF_NODE	396:78	396:78	3	)
LEAF_NODE	397:0	397:0	2	{
STATEMENTS	398:1	481:1	2	
LEAF_NODE	398:1	398:1	3	static
LEAF_NODE	398:8	398:8	3	const
LEAF_NODE	398:14	398:14	3	unsigned
LEAF_NODE	398:23	398:23	3	char
LEAF_NODE	398:28	398:28	3	_fillmasks
LEAF_NODE	398:38	398:38	3	[
LEAF_NODE	398:39	398:39	3	]
LEAF_NODE	398:41	398:41	3	=
LEAF_NODE	399:5	399:5	3	{
STATEMENTS	399:7	399:55	3	
LEAF_NODE	399:7	399:7	4	0x00
LEAF_NODE	399:11	399:11	4	,
LEAF_NODE	399:13	399:13	4	0x80
LEAF_NODE	399:17	399:17	4	,
LEAF_NODE	399:19	399:19	4	0xc0
LEAF_NODE	399:23	399:23	4	,
LEAF_NODE	399:25	399:25	4	0xe0
LEAF_NODE	399:29	399:29	4	,
LEAF_NODE	399:31	399:31	4	0xf0
LEAF_NODE	399:35	399:35	4	,
LEAF_NODE	399:37	399:37	4	0xf8
LEAF_NODE	399:41	399:41	4	,
LEAF_NODE	399:43	399:43	4	0xfc
LEAF_NODE	399:47	399:47	4	,
LEAF_NODE	399:49	399:49	4	0xfe
LEAF_NODE	399:53	399:53	4	,
LEAF_NODE	399:55	399:55	4	0xff
LEAF_NODE	399:60	399:60	3	}
LEAF_NODE	399:61	399:61	3	;
SIMPLE_DECL	400:1	400:18	3	unsigned char * cp ;
VAR_DECL	400:1	400:16	4	unsigned char * cp
TYPE	400:1	400:14	5	unsigned char *
TYPE_NAME	400:1	400:10	6	unsigned char
LEAF_NODE	400:1	400:1	7	unsigned
LEAF_NODE	400:10	400:10	7	char
POINTER	400:14	400:14	6	*
LEAF_NODE	400:14	400:14	7	*
NAME	400:16	400:16	5	cp
LEAF_NODE	400:16	400:16	6	cp
LEAF_NODE	400:18	400:18	4	;
SIMPLE_DECL	401:1	401:18	3	uint32 x , uint32 bx , uint32 run ;
INIT_DECL_LIST	401:1	401:1	4	uint32 x , uint32 bx , uint32 run
VAR_DECL	401:1	401:8	5	uint32 x
TYPE	401:1	401:1	6	uint32
TYPE_NAME	401:1	401:1	7	uint32
LEAF_NODE	401:1	401:1	8	uint32
NAME	401:8	401:8	6	x
LEAF_NODE	401:8	401:8	7	x
LEAF_NODE	401:9	401:9	5	,
INIT_DECL_LIST	401:1	401:1	5	uint32 bx , uint32 run
VAR_DECL	401:1	401:11	6	uint32 bx
TYPE	401:1	401:1	7	uint32
TYPE_NAME	401:1	401:1	8	uint32
LEAF_NODE	401:1	401:1	9	uint32
NAME	401:11	401:11	7	bx
LEAF_NODE	401:11	401:11	8	bx
LEAF_NODE	401:13	401:13	6	,
VAR_DECL	401:1	401:15	6	uint32 run
TYPE	401:1	401:1	7	uint32
TYPE_NAME	401:1	401:1	8	uint32
LEAF_NODE	401:1	401:1	9	uint32
NAME	401:15	401:15	7	run
LEAF_NODE	401:15	401:15	8	run
LEAF_NODE	401:18	401:18	4	;
SIMPLE_DECL	402:1	402:12	3	int32 n , int32 nw ;
INIT_DECL_LIST	402:1	402:1	4	int32 n , int32 nw
VAR_DECL	402:1	402:7	5	int32 n
TYPE	402:1	402:1	6	int32
TYPE_NAME	402:1	402:1	7	int32
LEAF_NODE	402:1	402:1	8	int32
NAME	402:7	402:7	6	n
LEAF_NODE	402:7	402:7	7	n
LEAF_NODE	402:8	402:8	5	,
VAR_DECL	402:1	402:10	5	int32 nw
TYPE	402:1	402:1	6	int32
TYPE_NAME	402:1	402:1	7	int32
LEAF_NODE	402:1	402:1	8	int32
NAME	402:10	402:10	6	nw
LEAF_NODE	402:10	402:10	7	nw
LEAF_NODE	402:12	402:12	4	;
SIMPLE_DECL	403:1	403:9	3	long * lp ;
VAR_DECL	403:1	403:7	4	long * lp
TYPE	403:1	403:5	5	long *
TYPE_NAME	403:1	403:1	6	long
LEAF_NODE	403:1	403:1	7	long
POINTER	403:5	403:5	6	*
LEAF_NODE	403:5	403:5	7	*
NAME	403:7	403:7	5	lp
LEAF_NODE	403:7	403:7	6	lp
LEAF_NODE	403:9	403:9	4	;
SELECTION	405:1	406:5	3	
KEYWORD	405:1	405:1	4	if
LEAF_NODE	405:1	405:1	5	if
LEAF_NODE	405:4	405:4	4	(
CONDITION	405:5	405:5	4	( erun - runs ) & 1
EXPR	405:5	405:17	5	( erun - runs ) & 1
LEAF_NODE	405:5	405:5	6	(
FIELD	405:6	405:6	6	erun
LEAF_NODE	405:6	405:6	7	erun
LEAF_NODE	405:10	405:10	6	-
FIELD	405:11	405:11	6	runs
LEAF_NODE	405:11	405:11	7	runs
LEAF_NODE	405:15	405:15	6	)
LEAF_NODE	405:16	405:16	6	&
FIELD	405:17	405:17	6	1
LEAF_NODE	405:17	405:17	7	1
LEAF_NODE	405:18	405:18	4	)
STATEMENTS	406:5	406:5	4	
EXPR_STATEMENT	406:5	406:16	5	* erun ++ = 0 ;
EXPR	406:5	406:5	6	* erun ++ = 0
ASSIGN	406:5	406:15	7	* erun ++ = 0
LVAL	406:5	406:5	8	* erun ++
UNARY_EXPR	406:5	406:6	9	* erun ++
UNARY_OPERATOR	406:5	406:5	10	*
LEAF_NODE	406:5	406:5	11	*
FIELD	406:6	406:10	10	erun ++
LEAF_NODE	406:6	406:6	11	erun
LEAF_NODE	406:10	406:10	11	++
ASSIGN_OP	406:13	406:13	8	=
LEAF_NODE	406:13	406:13	9	=
RVAL	406:15	406:15	8	0
FIELD	406:15	406:15	9	0
LEAF_NODE	406:15	406:15	10	0
LEAF_NODE	406:16	406:16	6	;
EXPR_STATEMENT	407:1	407:6	3	x = 0 ;
EXPR	407:1	407:1	4	x = 0
ASSIGN	407:1	407:5	5	x = 0
LVAL	407:1	407:1	6	x
FIELD	407:1	407:1	7	x
LEAF_NODE	407:1	407:1	8	x
ASSIGN_OP	407:3	407:3	6	=
LEAF_NODE	407:3	407:3	7	=
RVAL	407:5	407:5	6	0
FIELD	407:5	407:5	7	0
LEAF_NODE	407:5	407:5	8	0
LEAF_NODE	407:6	407:6	4	;
ITERATION	408:1	408:32	3	
KEYWORD	408:1	408:1	4	for
LEAF_NODE	408:1	408:1	5	for
LEAF_NODE	408:5	408:5	4	(
FOR_INIT	408:6	408:6	4	;
LEAF_NODE	408:6	408:6	5	;
CONDITION	408:8	408:8	4	runs < erun
EXPR	408:8	408:15	5	runs < erun
FIELD	408:8	408:8	6	runs
LEAF_NODE	408:8	408:8	7	runs
REL_OPERATOR	408:13	408:13	6	<
LEAF_NODE	408:13	408:13	7	<
FIELD	408:15	408:15	6	erun
LEAF_NODE	408:15	408:15	7	erun
LEAF_NODE	408:19	408:19	4	;
FOR_EXPR	408:21	408:21	4	runs += 2
EXPR	408:21	408:21	5	runs += 2
ASSIGN	408:21	408:29	6	runs += 2
LVAL	408:21	408:21	7	runs
FIELD	408:21	408:21	8	runs
LEAF_NODE	408:21	408:21	9	runs
ASSIGN_OP	408:26	408:26	7	+=
LEAF_NODE	408:26	408:26	8	+=
RVAL	408:29	408:29	7	2
FIELD	408:29	408:29	8	2
LEAF_NODE	408:29	408:29	9	2
LEAF_NODE	408:30	408:30	4	)
STATEMENTS	408:32	480:1	4	
LEAF_NODE	408:32	408:32	5	{
STATEMENTS	409:5	447:5	5	
EXPR_STATEMENT	409:5	409:18	6	run = runs [ 0 ] ;
EXPR	409:5	409:5	7	run = runs [ 0 ]
ASSIGN	409:5	409:11	8	run = runs [ 0 ]
LVAL	409:5	409:5	9	run
FIELD	409:5	409:5	10	run
LEAF_NODE	409:5	409:5	11	run
ASSIGN_OP	409:9	409:9	9	=
LEAF_NODE	409:9	409:9	10	=
RVAL	409:11	409:11	9	runs [ 0 ]
FIELD	409:11	409:17	10	runs [ 0 ]
LEAF_NODE	409:11	409:11	11	runs
LEAF_NODE	409:15	409:15	11	[
EXPR	409:16	409:16	11	0
FIELD	409:16	409:16	12	0
LEAF_NODE	409:16	409:16	13	0
LEAF_NODE	409:17	409:17	11	]
LEAF_NODE	409:18	409:18	7	;
SELECTION	410:5	411:2	6	
KEYWORD	410:5	410:5	7	if
LEAF_NODE	410:5	410:5	8	if
LEAF_NODE	410:8	410:8	7	(
CONDITION	410:9	410:9	7	x + run > lastx || run > lastx
EXPR	410:9	410:9	8	x + run > lastx || run > lastx
OR	410:9	410:26	9	x + run > lastx || run > lastx
EXPR	410:9	410:17	10	x + run > lastx
FIELD	410:9	410:9	11	x
LEAF_NODE	410:9	410:9	12	x
LEAF_NODE	410:10	410:10	11	+
FIELD	410:11	410:11	11	run
LEAF_NODE	410:11	410:11	12	run
REL_OPERATOR	410:15	410:15	11	>
LEAF_NODE	410:15	410:15	12	>
FIELD	410:17	410:17	11	lastx
LEAF_NODE	410:17	410:17	12	lastx
LEAF_NODE	410:23	410:23	10	||
EXPR	410:26	410:32	10	run > lastx
FIELD	410:26	410:26	11	run
LEAF_NODE	410:26	410:26	12	run
REL_OPERATOR	410:30	410:30	11	>
LEAF_NODE	410:30	410:30	12	>
FIELD	410:32	410:32	11	lastx
LEAF_NODE	410:32	410:32	12	lastx
LEAF_NODE	410:38	410:38	7	)
STATEMENTS	411:2	411:2	7	
EXPR_STATEMENT	411:2	411:38	8	run = runs [ 0 ] = ( uint32 ) ( lastx - x ) ;
EXPR	411:2	411:2	9	run = runs [ 0 ] = ( uint32 ) ( lastx - x )
ASSIGN	411:2	411:8	10	run = runs [ 0 ] = ( uint32 ) ( lastx - x )
LVAL	411:2	411:2	11	run
FIELD	411:2	411:2	12	run
LEAF_NODE	411:2	411:2	13	run
ASSIGN_OP	411:6	411:6	11	=
LEAF_NODE	411:6	411:6	12	=
RVAL	411:8	411:8	11	runs [ 0 ] = ( uint32 ) ( lastx - x )
ASSIGN	411:8	411:18	12	runs [ 0 ] = ( uint32 ) ( lastx - x )
LVAL	411:8	411:8	13	runs [ 0 ]
FIELD	411:8	411:14	14	runs [ 0 ]
LEAF_NODE	411:8	411:8	15	runs
LEAF_NODE	411:12	411:12	15	[
EXPR	411:13	411:13	15	0
FIELD	411:13	411:13	16	0
LEAF_NODE	411:13	411:13	17	0
LEAF_NODE	411:14	411:14	15	]
ASSIGN_OP	411:16	411:16	13	=
LEAF_NODE	411:16	411:16	14	=
RVAL	411:18	411:37	13	( uint32 ) ( lastx - x )
LEAF_NODE	411:18	411:18	14	(
TYPE_NAME	411:19	411:19	14	uint32
LEAF_NODE	411:19	411:19	15	uint32
LEAF_NODE	411:25	411:25	14	)
LEAF_NODE	411:27	411:27	14	(
FIELD	411:28	411:28	14	lastx
LEAF_NODE	411:28	411:28	15	lastx
LEAF_NODE	411:34	411:34	14	-
FIELD	411:36	411:36	14	x
LEAF_NODE	411:36	411:36	15	x
LEAF_NODE	411:37	411:37	14	)
LEAF_NODE	411:38	411:38	9	;
SELECTION	412:5	412:14	6	
KEYWORD	412:5	412:5	7	if
LEAF_NODE	412:5	412:5	8	if
LEAF_NODE	412:8	412:8	7	(
CONDITION	412:9	412:9	7	run
EXPR	412:9	412:9	8	run
FIELD	412:9	412:9	9	run
LEAF_NODE	412:9	412:9	10	run
LEAF_NODE	412:12	412:12	7	)
STATEMENTS	412:14	443:5	7	
LEAF_NODE	412:14	412:14	8	{
STATEMENTS	413:2	442:2	8	
EXPR_STATEMENT	413:2	413:19	9	cp = buf + ( x >> 3 ) ;
EXPR	413:2	413:2	10	cp = buf + ( x >> 3 )
ASSIGN	413:2	413:7	11	cp = buf + ( x >> 3 )
LVAL	413:2	413:2	12	cp
FIELD	413:2	413:2	13	cp
LEAF_NODE	413:2	413:2	14	cp
ASSIGN_OP	413:5	413:5	12	=
LEAF_NODE	413:5	413:5	13	=
RVAL	413:7	413:18	12	buf + ( x >> 3 )
FIELD	413:7	413:7	13	buf
LEAF_NODE	413:7	413:7	14	buf
LEAF_NODE	413:11	413:11	13	+
LEAF_NODE	413:13	413:13	13	(
FIELD	413:14	413:14	13	x
LEAF_NODE	413:14	413:14	14	x
LEAF_NODE	413:15	413:15	13	>>
FIELD	413:17	413:17	13	3
LEAF_NODE	413:17	413:17	14	3
LEAF_NODE	413:18	413:18	13	)
LEAF_NODE	413:19	413:19	10	;
EXPR_STATEMENT	414:2	414:10	9	bx = x & 7 ;
EXPR	414:2	414:2	10	bx = x & 7
ASSIGN	414:2	414:7	11	bx = x & 7
LVAL	414:2	414:2	12	bx
FIELD	414:2	414:2	13	bx
LEAF_NODE	414:2	414:2	14	bx
ASSIGN_OP	414:5	414:5	12	=
LEAF_NODE	414:5	414:5	13	=
RVAL	414:7	414:9	12	x & 7
FIELD	414:7	414:7	13	x
LEAF_NODE	414:7	414:7	14	x
LEAF_NODE	414:8	414:8	13	&
FIELD	414:9	414:9	13	7
LEAF_NODE	414:9	414:9	14	7
LEAF_NODE	414:10	414:10	10	;
SELECTION	415:2	415:18	9	
KEYWORD	415:2	415:2	10	if
LEAF_NODE	415:2	415:2	11	if
LEAF_NODE	415:5	415:5	10	(
CONDITION	415:6	415:6	10	run > 8 - bx
EXPR	415:6	415:14	11	run > 8 - bx
FIELD	415:6	415:6	12	run
LEAF_NODE	415:6	415:6	13	run
REL_OPERATOR	415:10	415:10	12	>
LEAF_NODE	415:10	415:10	13	>
FIELD	415:12	415:12	12	8
LEAF_NODE	415:12	415:12	13	8
LEAF_NODE	415:13	415:13	12	-
FIELD	415:14	415:14	12	bx
LEAF_NODE	415:14	415:14	13	bx
LEAF_NODE	415:16	415:16	10	)
STATEMENTS	415:18	440:2	10	
LEAF_NODE	415:18	415:18	11	{
STATEMENTS	416:6	438:6	11	
SELECTION	416:6	416:14	12	
KEYWORD	416:6	416:6	13	if
LEAF_NODE	416:6	416:6	14	if
LEAF_NODE	416:9	416:9	13	(
CONDITION	416:10	416:10	13	bx
EXPR	416:10	416:10	14	bx
FIELD	416:10	416:10	15	bx
LEAF_NODE	416:10	416:10	16	bx
LEAF_NODE	416:12	416:12	13	)
STATEMENTS	416:14	419:6	13	
LEAF_NODE	416:14	416:14	14	{
STATEMENTS	417:3	418:3	14	
EXPR_STATEMENT	417:3	417:26	15	* cp ++ &= 0xff << ( 8 - bx ) ;
EXPR	417:3	417:3	16	* cp ++ &= 0xff << ( 8 - bx )
ASSIGN	417:3	417:12	17	* cp ++ &= 0xff << ( 8 - bx )
LVAL	417:3	417:3	18	* cp ++
UNARY_EXPR	417:3	417:4	19	* cp ++
UNARY_OPERATOR	417:3	417:3	20	*
LEAF_NODE	417:3	417:3	21	*
FIELD	417:4	417:6	20	cp ++
LEAF_NODE	417:4	417:4	21	cp
LEAF_NODE	417:6	417:6	21	++
ASSIGN_OP	417:9	417:9	18	&=
LEAF_NODE	417:9	417:9	19	&=
RVAL	417:12	417:25	18	0xff << ( 8 - bx )
FIELD	417:12	417:12	19	0xff
LEAF_NODE	417:12	417:12	20	0xff
LEAF_NODE	417:17	417:17	19	<<
LEAF_NODE	417:20	417:20	19	(
FIELD	417:21	417:21	19	8
LEAF_NODE	417:21	417:21	20	8
LEAF_NODE	417:22	417:22	19	-
FIELD	417:23	417:23	19	bx
LEAF_NODE	417:23	417:23	20	bx
LEAF_NODE	417:25	417:25	19	)
LEAF_NODE	417:26	417:26	16	;
EXPR_STATEMENT	418:3	418:14	15	run -= 8 - bx ;
EXPR	418:3	418:3	16	run -= 8 - bx
ASSIGN	418:3	418:10	17	run -= 8 - bx
LVAL	418:3	418:3	18	run
FIELD	418:3	418:3	19	run
LEAF_NODE	418:3	418:3	20	run
ASSIGN_OP	418:7	418:7	18	-=
LEAF_NODE	418:7	418:7	19	-=
RVAL	418:10	418:12	18	8 - bx
FIELD	418:10	418:10	19	8
LEAF_NODE	418:10	418:10	20	8
LEAF_NODE	418:11	418:11	19	-
FIELD	418:12	418:12	19	bx
LEAF_NODE	418:12	418:12	20	bx
LEAF_NODE	418:14	418:14	16	;
LEAF_NODE	419:6	419:6	14	}
SELECTION	420:6	420:32	12	
KEYWORD	420:6	420:6	13	if
LEAF_NODE	420:6	420:6	14	if
LEAF_NODE	420:8	420:8	13	(
CONDITION	420:10	420:10	13	( n = run >> 3 ) != 0
EXPR	420:10	420:28	14	( n = run >> 3 ) != 0
LEAF_NODE	420:10	420:10	15	(
ASSIGN	420:11	420:15	15	n = run >> 3
LVAL	420:11	420:11	16	n
FIELD	420:11	420:11	17	n
LEAF_NODE	420:11	420:11	18	n
ASSIGN_OP	420:13	420:13	16	=
LEAF_NODE	420:13	420:13	17	=
RVAL	420:15	420:22	16	run >> 3
FIELD	420:15	420:15	17	run
LEAF_NODE	420:15	420:15	18	run
LEAF_NODE	420:19	420:19	17	>>
FIELD	420:22	420:22	17	3
LEAF_NODE	420:22	420:22	18	3
LEAF_NODE	420:23	420:23	15	)
EQ_OPERATOR	420:25	420:25	15	!=
LEAF_NODE	420:25	420:25	16	!=
FIELD	420:28	420:28	15	0
LEAF_NODE	420:28	420:28	16	0
LEAF_NODE	420:30	420:30	13	)
STATEMENTS	420:32	437:6	13	
LEAF_NODE	420:32	420:32	14	{
STATEMENTS	421:3	436:3	14	
SELECTION	421:3	421:30	15	
KEYWORD	421:3	421:3	16	if
LEAF_NODE	421:3	421:3	17	if
LEAF_NODE	421:6	421:6	16	(
CONDITION	421:7	421:7	16	( n / sizeof ( long ) ) > 1
EXPR	421:7	421:27	17	( n / sizeof ( long ) ) > 1
LEAF_NODE	421:7	421:7	18	(
FIELD	421:8	421:8	18	n
LEAF_NODE	421:8	421:8	19	n
LEAF_NODE	421:9	421:9	18	/
FUNCTION_CALL	421:10	421:22	18	sizeof ( long )
CALLEE	421:10	421:10	19	sizeof
LEAF_NODE	421:10	421:10	20	sizeof
LEAF_NODE	421:17	421:17	19	(
ARGUMENT	421:18	421:18	19	long
FIELD	421:18	421:18	20	long
LEAF_NODE	421:18	421:18	21	long
LEAF_NODE	421:22	421:22	19	)
LEAF_NODE	421:23	421:23	18	)
REL_OPERATOR	421:25	421:25	18	>
LEAF_NODE	421:25	421:25	19	>
FIELD	421:27	421:27	18	1
LEAF_NODE	421:27	421:27	19	1
LEAF_NODE	421:28	421:28	16	)
STATEMENTS	421:30	434:3	16	
LEAF_NODE	421:30	421:30	17	{
STATEMENTS	425:7	433:7	17	
ITERATION	425:7	426:8	18	
KEYWORD	425:7	425:7	19	for
LEAF_NODE	425:7	425:7	20	for
LEAF_NODE	425:11	425:11	19	(
FOR_INIT	425:12	425:12	19	;
LEAF_NODE	425:12	425:12	20	;
CONDITION	425:14	425:14	19	n && ! isAligned ( cp , long )
EXPR	425:14	425:14	20	n && ! isAligned ( cp , long )
AND	425:14	425:19	21	n && ! isAligned ( cp , long )
EXPR	425:14	425:14	22	n
FIELD	425:14	425:14	23	n
LEAF_NODE	425:14	425:14	24	n
LEAF_NODE	425:16	425:16	22	&&
EXPR	425:19	425:19	22	! isAligned ( cp , long )
UNARY_EXPR	425:19	425:20	23	! isAligned ( cp , long )
UNARY_OPERATOR	425:19	425:19	24	!
LEAF_NODE	425:19	425:19	25	!
FUNCTION_CALL	425:20	425:38	24	isAligned ( cp , long )
CALLEE	425:20	425:20	25	isAligned
LEAF_NODE	425:20	425:20	26	isAligned
LEAF_NODE	425:29	425:29	25	(
ARGUMENT	425:30	425:30	25	cp
FIELD	425:30	425:30	26	cp
LEAF_NODE	425:30	425:30	27	cp
LEAF_NODE	425:32	425:32	25	,
ARGUMENT	425:34	425:34	25	long
FIELD	425:34	425:34	26	long
LEAF_NODE	425:34	425:34	27	long
LEAF_NODE	425:38	425:38	25	)
LEAF_NODE	425:39	425:39	19	;
FOR_EXPR	425:41	425:41	19	n --
EXPR	425:41	425:41	20	n --
FIELD	425:41	425:42	21	n --
LEAF_NODE	425:41	425:41	22	n
LEAF_NODE	425:42	425:42	22	--
LEAF_NODE	425:44	425:44	19	)
STATEMENTS	426:8	426:8	19	
EXPR_STATEMENT	426:8	426:20	20	* cp ++ = 0x00 ;
EXPR	426:8	426:8	21	* cp ++ = 0x00
ASSIGN	426:8	426:16	22	* cp ++ = 0x00
LVAL	426:8	426:8	23	* cp ++
UNARY_EXPR	426:8	426:9	24	* cp ++
UNARY_OPERATOR	426:8	426:8	25	*
LEAF_NODE	426:8	426:8	26	*
FIELD	426:9	426:11	25	cp ++
LEAF_NODE	426:9	426:9	26	cp
LEAF_NODE	426:11	426:11	26	++
ASSIGN_OP	426:14	426:14	23	=
LEAF_NODE	426:14	426:14	24	=
RVAL	426:16	426:16	23	0x00
FIELD	426:16	426:16	24	0x00
LEAF_NODE	426:16	426:16	25	0x00
LEAF_NODE	426:20	426:20	21	;
EXPR_STATEMENT	427:7	427:22	18	lp = ( long * ) cp ;
EXPR	427:7	427:7	19	lp = ( long * ) cp
ASSIGN	427:7	427:12	20	lp = ( long * ) cp
LVAL	427:7	427:7	21	lp
FIELD	427:7	427:7	22	lp
LEAF_NODE	427:7	427:7	23	lp
ASSIGN_OP	427:10	427:10	21	=
LEAF_NODE	427:10	427:10	22	=
RVAL	427:12	427:20	21	( long * ) cp
LEAF_NODE	427:12	427:12	22	(
TYPE_NAME	427:13	427:13	22	long
LEAF_NODE	427:13	427:13	23	long
LEAF_NODE	427:17	427:17	22	*
LEAF_NODE	427:18	427:18	22	)
FIELD	427:20	427:20	22	cp
LEAF_NODE	427:20	427:20	23	cp
LEAF_NODE	427:22	427:22	19	;
EXPR_STATEMENT	428:7	428:38	18	nw = ( int32 ) ( n / sizeof ( long ) ) ;
EXPR	428:7	428:7	19	nw = ( int32 ) ( n / sizeof ( long ) )
ASSIGN	428:7	428:12	20	nw = ( int32 ) ( n / sizeof ( long ) )
LVAL	428:7	428:7	21	nw
FIELD	428:7	428:7	22	nw
LEAF_NODE	428:7	428:7	23	nw
ASSIGN_OP	428:10	428:10	21	=
LEAF_NODE	428:10	428:10	22	=
RVAL	428:12	428:37	21	( int32 ) ( n / sizeof ( long ) )
LEAF_NODE	428:12	428:12	22	(
TYPE_NAME	428:13	428:13	22	int32
LEAF_NODE	428:13	428:13	23	int32
LEAF_NODE	428:18	428:18	22	)
LEAF_NODE	428:19	428:19	22	(
FIELD	428:20	428:20	22	n
LEAF_NODE	428:20	428:20	23	n
LEAF_NODE	428:22	428:22	22	/
FUNCTION_CALL	428:24	428:36	22	sizeof ( long )
CALLEE	428:24	428:24	23	sizeof
LEAF_NODE	428:24	428:24	24	sizeof
LEAF_NODE	428:31	428:31	23	(
ARGUMENT	428:32	428:32	23	long
FIELD	428:32	428:32	24	long
LEAF_NODE	428:32	428:32	25	long
LEAF_NODE	428:36	428:36	23	)
LEAF_NODE	428:37	428:37	22	)
LEAF_NODE	428:38	428:38	19	;
EXPR_STATEMENT	429:7	429:30	18	n -= nw * sizeof ( long ) ;
EXPR	429:7	429:7	19	n -= nw * sizeof ( long )
ASSIGN	429:7	429:12	20	n -= nw * sizeof ( long )
LVAL	429:7	429:7	21	n
FIELD	429:7	429:7	22	n
LEAF_NODE	429:7	429:7	23	n
ASSIGN_OP	429:9	429:9	21	-=
LEAF_NODE	429:9	429:9	22	-=
RVAL	429:12	429:17	21	nw * sizeof ( long )
FIELD	429:12	429:12	22	nw
LEAF_NODE	429:12	429:12	23	nw
LEAF_NODE	429:15	429:15	22	*
FUNCTION_CALL	429:17	429:29	22	sizeof ( long )
CALLEE	429:17	429:17	23	sizeof
LEAF_NODE	429:17	429:17	24	sizeof
LEAF_NODE	429:24	429:24	23	(
ARGUMENT	429:25	429:25	23	long
FIELD	429:25	429:25	24	long
LEAF_NODE	429:25	429:25	25	long
LEAF_NODE	429:29	429:29	23	)
LEAF_NODE	429:30	429:30	19	;
ITERATION	430:7	430:10	18	
KEYWORD	430:7	430:7	19	do
LEAF_NODE	430:7	430:7	20	do
LEAF_NODE	432:15	432:15	19	(
CONDITION	432:16	432:16	19	-- nw
EXPR	432:16	432:18	20	-- nw
LEAF_NODE	432:16	432:16	21	--
FIELD	432:18	432:18	21	nw
LEAF_NODE	432:18	432:18	22	nw
LEAF_NODE	432:20	432:20	19	)
STATEMENTS	430:10	432:7	19	
LEAF_NODE	430:10	430:10	20	{
STATEMENTS	431:8	431:8	20	
EXPR_STATEMENT	431:8	431:18	21	* lp ++ = 0L ;
EXPR	431:8	431:8	22	* lp ++ = 0L
ASSIGN	431:8	431:16	23	* lp ++ = 0L
LVAL	431:8	431:8	24	* lp ++
UNARY_EXPR	431:8	431:9	25	* lp ++
UNARY_OPERATOR	431:8	431:8	26	*
LEAF_NODE	431:8	431:8	27	*
FIELD	431:9	431:11	26	lp ++
LEAF_NODE	431:9	431:9	27	lp
LEAF_NODE	431:11	431:11	27	++
ASSIGN_OP	431:14	431:14	24	=
LEAF_NODE	431:14	431:14	25	=
RVAL	431:16	431:16	24	0L
FIELD	431:16	431:16	25	0L
LEAF_NODE	431:16	431:16	26	0L
LEAF_NODE	431:18	431:18	22	;
LEAF_NODE	432:7	432:7	20	}
LEAF_NODE	432:21	432:21	18	;
EXPR_STATEMENT	433:7	433:31	18	cp = ( unsigned char * ) lp ;
EXPR	433:7	433:7	19	cp = ( unsigned char * ) lp
ASSIGN	433:7	433:12	20	cp = ( unsigned char * ) lp
LVAL	433:7	433:7	21	cp
FIELD	433:7	433:7	22	cp
LEAF_NODE	433:7	433:7	23	cp
ASSIGN_OP	433:10	433:10	21	=
LEAF_NODE	433:10	433:10	22	=
RVAL	433:12	433:29	21	( unsigned char * ) lp
LEAF_NODE	433:12	433:12	22	(
TYPE_NAME	433:13	433:22	22	unsigned char
LEAF_NODE	433:13	433:13	23	unsigned
LEAF_NODE	433:22	433:22	23	char
LEAF_NODE	433:26	433:26	22	*
LEAF_NODE	433:27	433:27	22	)
FIELD	433:29	433:29	22	lp
LEAF_NODE	433:29	433:29	23	lp
LEAF_NODE	433:31	433:31	19	;
LEAF_NODE	434:3	434:3	17	}
EXPR_STATEMENT	435:3	435:14	15	ZERO ( n , cp ) ;
EXPR	435:3	435:3	16	ZERO ( n , cp )
FUNCTION_CALL	435:3	435:13	17	ZERO ( n , cp )
CALLEE	435:3	435:3	18	ZERO
LEAF_NODE	435:3	435:3	19	ZERO
LEAF_NODE	435:7	435:7	18	(
ARGUMENT	435:8	435:8	18	n
FIELD	435:8	435:8	19	n
LEAF_NODE	435:8	435:8	20	n
LEAF_NODE	435:9	435:9	18	,
ARGUMENT	435:11	435:11	18	cp
FIELD	435:11	435:11	19	cp
LEAF_NODE	435:11	435:11	20	cp
LEAF_NODE	435:13	435:13	18	)
LEAF_NODE	435:14	435:14	16	;
EXPR_STATEMENT	436:3	436:11	15	run &= 7 ;
EXPR	436:3	436:3	16	run &= 7
ASSIGN	436:3	436:10	17	run &= 7
LVAL	436:3	436:3	18	run
FIELD	436:3	436:3	19	run
LEAF_NODE	436:3	436:3	20	run
ASSIGN_OP	436:7	436:7	18	&=
LEAF_NODE	436:7	436:7	19	&=
RVAL	436:10	436:10	18	7
FIELD	436:10	436:10	19	7
LEAF_NODE	436:10	436:10	20	7
LEAF_NODE	436:11	436:11	16	;
LEAF_NODE	437:6	437:6	14	}
SELECTION	438:6	439:3	12	
KEYWORD	438:6	438:6	13	if
LEAF_NODE	438:6	438:6	14	if
LEAF_NODE	438:9	438:9	13	(
CONDITION	438:10	438:10	13	run
EXPR	438:10	438:10	14	run
FIELD	438:10	438:10	15	run
LEAF_NODE	438:10	438:10	16	run
LEAF_NODE	438:13	438:13	13	)
STATEMENTS	439:3	439:3	13	
EXPR_STATEMENT	439:3	439:23	14	cp [ 0 ] &= 0xff >> run ;
EXPR	439:3	439:3	15	cp [ 0 ] &= 0xff >> run
ASSIGN	439:3	439:12	16	cp [ 0 ] &= 0xff >> run
LVAL	439:3	439:3	17	cp [ 0 ]
FIELD	439:3	439:7	18	cp [ 0 ]
LEAF_NODE	439:3	439:3	19	cp
LEAF_NODE	439:5	439:5	19	[
EXPR	439:6	439:6	19	0
FIELD	439:6	439:6	20	0
LEAF_NODE	439:6	439:6	21	0
LEAF_NODE	439:7	439:7	19	]
ASSIGN_OP	439:9	439:9	17	&=
LEAF_NODE	439:9	439:9	18	&=
RVAL	439:12	439:20	17	0xff >> run
FIELD	439:12	439:12	18	0xff
LEAF_NODE	439:12	439:12	19	0xff
LEAF_NODE	439:17	439:17	18	>>
FIELD	439:20	439:20	18	run
LEAF_NODE	439:20	439:20	19	run
LEAF_NODE	439:23	439:23	15	;
LEAF_NODE	440:2	440:2	11	}
SELECTION	440:4	441:6	9	
KEYWORD	440:4	440:4	10	else
LEAF_NODE	440:4	440:4	11	else
STATEMENTS	441:6	441:6	10	
EXPR_STATEMENT	441:6	441:37	11	cp [ 0 ] &= ~ ( _fillmasks [ run ] >> bx ) ;
EXPR	441:6	441:6	12	cp [ 0 ] &= ~ ( _fillmasks [ run ] >> bx )
ASSIGN	441:6	441:15	13	cp [ 0 ] &= ~ ( _fillmasks [ run ] >> bx )
LVAL	441:6	441:6	14	cp [ 0 ]
FIELD	441:6	441:10	15	cp [ 0 ]
LEAF_NODE	441:6	441:6	16	cp
LEAF_NODE	441:8	441:8	16	[
EXPR	441:9	441:9	16	0
FIELD	441:9	441:9	17	0
LEAF_NODE	441:9	441:9	18	0
LEAF_NODE	441:10	441:10	16	]
ASSIGN_OP	441:12	441:12	14	&=
LEAF_NODE	441:12	441:12	15	&=
RVAL	441:15	441:15	14	~ ( _fillmasks [ run ] >> bx )
UNARY_EXPR	441:15	441:36	15	~ ( _fillmasks [ run ] >> bx )
UNARY_OPERATOR	441:15	441:15	16	~
LEAF_NODE	441:15	441:15	17	~
LEAF_NODE	441:16	441:16	16	(
FIELD	441:17	441:31	16	_fillmasks [ run ]
LEAF_NODE	441:17	441:17	17	_fillmasks
LEAF_NODE	441:27	441:27	17	[
EXPR	441:28	441:28	17	run
FIELD	441:28	441:28	18	run
LEAF_NODE	441:28	441:28	19	run
LEAF_NODE	441:31	441:31	17	]
LEAF_NODE	441:32	441:32	16	>>
FIELD	441:34	441:34	16	bx
LEAF_NODE	441:34	441:34	17	bx
LEAF_NODE	441:36	441:36	16	)
LEAF_NODE	441:37	441:37	12	;
EXPR_STATEMENT	442:2	442:14	9	x += runs [ 0 ] ;
EXPR	442:2	442:2	10	x += runs [ 0 ]
ASSIGN	442:2	442:7	11	x += runs [ 0 ]
LVAL	442:2	442:2	12	x
FIELD	442:2	442:2	13	x
LEAF_NODE	442:2	442:2	14	x
ASSIGN_OP	442:4	442:4	12	+=
LEAF_NODE	442:4	442:4	13	+=
RVAL	442:7	442:7	12	runs [ 0 ]
FIELD	442:7	442:13	13	runs [ 0 ]
LEAF_NODE	442:7	442:7	14	runs
LEAF_NODE	442:11	442:11	14	[
EXPR	442:12	442:12	14	0
FIELD	442:12	442:12	15	0
LEAF_NODE	442:12	442:12	16	0
LEAF_NODE	442:13	442:13	14	]
LEAF_NODE	442:14	442:14	10	;
LEAF_NODE	443:5	443:5	8	}
EXPR_STATEMENT	444:5	444:18	6	run = runs [ 1 ] ;
EXPR	444:5	444:5	7	run = runs [ 1 ]
ASSIGN	444:5	444:11	8	run = runs [ 1 ]
LVAL	444:5	444:5	9	run
FIELD	444:5	444:5	10	run
LEAF_NODE	444:5	444:5	11	run
ASSIGN_OP	444:9	444:9	9	=
LEAF_NODE	444:9	444:9	10	=
RVAL	444:11	444:11	9	runs [ 1 ]
FIELD	444:11	444:17	10	runs [ 1 ]
LEAF_NODE	444:11	444:11	11	runs
LEAF_NODE	444:15	444:15	11	[
EXPR	444:16	444:16	11	1
FIELD	444:16	444:16	12	1
LEAF_NODE	444:16	444:16	13	1
LEAF_NODE	444:17	444:17	11	]
LEAF_NODE	444:18	444:18	7	;
SELECTION	445:5	446:2	6	
KEYWORD	445:5	445:5	7	if
LEAF_NODE	445:5	445:5	8	if
LEAF_NODE	445:8	445:8	7	(
CONDITION	445:9	445:9	7	x + run > lastx || run > lastx
EXPR	445:9	445:9	8	x + run > lastx || run > lastx
OR	445:9	445:26	9	x + run > lastx || run > lastx
EXPR	445:9	445:17	10	x + run > lastx
FIELD	445:9	445:9	11	x
LEAF_NODE	445:9	445:9	12	x
LEAF_NODE	445:10	445:10	11	+
FIELD	445:11	445:11	11	run
LEAF_NODE	445:11	445:11	12	run
REL_OPERATOR	445:15	445:15	11	>
LEAF_NODE	445:15	445:15	12	>
FIELD	445:17	445:17	11	lastx
LEAF_NODE	445:17	445:17	12	lastx
LEAF_NODE	445:23	445:23	10	||
EXPR	445:26	445:32	10	run > lastx
FIELD	445:26	445:26	11	run
LEAF_NODE	445:26	445:26	12	run
REL_OPERATOR	445:30	445:30	11	>
LEAF_NODE	445:30	445:30	12	>
FIELD	445:32	445:32	11	lastx
LEAF_NODE	445:32	445:32	12	lastx
LEAF_NODE	445:38	445:38	7	)
STATEMENTS	446:2	446:2	7	
EXPR_STATEMENT	446:2	446:27	8	run = runs [ 1 ] = lastx - x ;
EXPR	446:2	446:2	9	run = runs [ 1 ] = lastx - x
ASSIGN	446:2	446:8	10	run = runs [ 1 ] = lastx - x
LVAL	446:2	446:2	11	run
FIELD	446:2	446:2	12	run
LEAF_NODE	446:2	446:2	13	run
ASSIGN_OP	446:6	446:6	11	=
LEAF_NODE	446:6	446:6	12	=
RVAL	446:8	446:8	11	runs [ 1 ] = lastx - x
ASSIGN	446:8	446:18	12	runs [ 1 ] = lastx - x
LVAL	446:8	446:8	13	runs [ 1 ]
FIELD	446:8	446:14	14	runs [ 1 ]
LEAF_NODE	446:8	446:8	15	runs
LEAF_NODE	446:12	446:12	15	[
EXPR	446:13	446:13	15	1
FIELD	446:13	446:13	16	1
LEAF_NODE	446:13	446:13	17	1
LEAF_NODE	446:14	446:14	15	]
ASSIGN_OP	446:16	446:16	13	=
LEAF_NODE	446:16	446:16	14	=
RVAL	446:18	446:26	13	lastx - x
FIELD	446:18	446:18	14	lastx
LEAF_NODE	446:18	446:18	15	lastx
LEAF_NODE	446:24	446:24	14	-
FIELD	446:26	446:26	14	x
LEAF_NODE	446:26	446:26	15	x
LEAF_NODE	446:27	446:27	9	;
SELECTION	447:5	447:14	6	
KEYWORD	447:5	447:5	7	if
LEAF_NODE	447:5	447:5	8	if
LEAF_NODE	447:8	447:8	7	(
CONDITION	447:9	447:9	7	run
EXPR	447:9	447:9	8	run
FIELD	447:9	447:9	9	run
LEAF_NODE	447:9	447:9	10	run
LEAF_NODE	447:12	447:12	7	)
STATEMENTS	447:14	479:5	7	
LEAF_NODE	447:14	447:14	8	{
STATEMENTS	448:2	478:2	8	
EXPR_STATEMENT	448:2	448:19	9	cp = buf + ( x >> 3 ) ;
EXPR	448:2	448:2	10	cp = buf + ( x >> 3 )
ASSIGN	448:2	448:7	11	cp = buf + ( x >> 3 )
LVAL	448:2	448:2	12	cp
FIELD	448:2	448:2	13	cp
LEAF_NODE	448:2	448:2	14	cp
ASSIGN_OP	448:5	448:5	12	=
LEAF_NODE	448:5	448:5	13	=
RVAL	448:7	448:18	12	buf + ( x >> 3 )
FIELD	448:7	448:7	13	buf
LEAF_NODE	448:7	448:7	14	buf
LEAF_NODE	448:11	448:11	13	+
LEAF_NODE	448:13	448:13	13	(
FIELD	448:14	448:14	13	x
LEAF_NODE	448:14	448:14	14	x
LEAF_NODE	448:15	448:15	13	>>
FIELD	448:17	448:17	13	3
LEAF_NODE	448:17	448:17	14	3
LEAF_NODE	448:18	448:18	13	)
LEAF_NODE	448:19	448:19	10	;
EXPR_STATEMENT	449:2	449:10	9	bx = x & 7 ;
EXPR	449:2	449:2	10	bx = x & 7
ASSIGN	449:2	449:7	11	bx = x & 7
LVAL	449:2	449:2	12	bx
FIELD	449:2	449:2	13	bx
LEAF_NODE	449:2	449:2	14	bx
ASSIGN_OP	449:5	449:5	12	=
LEAF_NODE	449:5	449:5	13	=
RVAL	449:7	449:9	12	x & 7
FIELD	449:7	449:7	13	x
LEAF_NODE	449:7	449:7	14	x
LEAF_NODE	449:8	449:8	13	&
FIELD	449:9	449:9	13	7
LEAF_NODE	449:9	449:9	14	7
LEAF_NODE	449:10	449:10	10	;
SELECTION	450:2	450:18	9	
KEYWORD	450:2	450:2	10	if
LEAF_NODE	450:2	450:2	11	if
LEAF_NODE	450:5	450:5	10	(
CONDITION	450:6	450:6	10	run > 8 - bx
EXPR	450:6	450:14	11	run > 8 - bx
FIELD	450:6	450:6	12	run
LEAF_NODE	450:6	450:6	13	run
REL_OPERATOR	450:10	450:10	12	>
LEAF_NODE	450:10	450:10	13	>
FIELD	450:12	450:12	12	8
LEAF_NODE	450:12	450:12	13	8
LEAF_NODE	450:13	450:13	12	-
FIELD	450:14	450:14	12	bx
LEAF_NODE	450:14	450:14	13	bx
LEAF_NODE	450:16	450:16	10	)
STATEMENTS	450:18	476:2	10	
LEAF_NODE	450:18	450:18	11	{
STATEMENTS	451:6	474:6	11	
SELECTION	451:6	451:14	12	
KEYWORD	451:6	451:6	13	if
LEAF_NODE	451:6	451:6	14	if
LEAF_NODE	451:9	451:9	13	(
CONDITION	451:10	451:10	13	bx
EXPR	451:10	451:10	14	bx
FIELD	451:10	451:10	15	bx
LEAF_NODE	451:10	451:10	16	bx
LEAF_NODE	451:12	451:12	13	)
STATEMENTS	451:14	454:6	13	
LEAF_NODE	451:14	451:14	14	{
STATEMENTS	452:3	453:3	14	
EXPR_STATEMENT	452:3	452:22	15	* cp ++ |= 0xff >> bx ;
EXPR	452:3	452:3	16	* cp ++ |= 0xff >> bx
ASSIGN	452:3	452:12	17	* cp ++ |= 0xff >> bx
LVAL	452:3	452:3	18	* cp ++
UNARY_EXPR	452:3	452:4	19	* cp ++
UNARY_OPERATOR	452:3	452:3	20	*
LEAF_NODE	452:3	452:3	21	*
FIELD	452:4	452:6	20	cp ++
LEAF_NODE	452:4	452:4	21	cp
LEAF_NODE	452:6	452:6	21	++
ASSIGN_OP	452:9	452:9	18	|=
LEAF_NODE	452:9	452:9	19	|=
RVAL	452:12	452:20	18	0xff >> bx
FIELD	452:12	452:12	19	0xff
LEAF_NODE	452:12	452:12	20	0xff
LEAF_NODE	452:17	452:17	19	>>
FIELD	452:20	452:20	19	bx
LEAF_NODE	452:20	452:20	20	bx
LEAF_NODE	452:22	452:22	16	;
EXPR_STATEMENT	453:3	453:14	15	run -= 8 - bx ;
EXPR	453:3	453:3	16	run -= 8 - bx
ASSIGN	453:3	453:10	17	run -= 8 - bx
LVAL	453:3	453:3	18	run
FIELD	453:3	453:3	19	run
LEAF_NODE	453:3	453:3	20	run
ASSIGN_OP	453:7	453:7	18	-=
LEAF_NODE	453:7	453:7	19	-=
RVAL	453:10	453:12	18	8 - bx
FIELD	453:10	453:10	19	8
LEAF_NODE	453:10	453:10	20	8
LEAF_NODE	453:11	453:11	19	-
FIELD	453:12	453:12	19	bx
LEAF_NODE	453:12	453:12	20	bx
LEAF_NODE	453:14	453:14	16	;
LEAF_NODE	454:6	454:6	14	}
SELECTION	455:6	455:30	12	
KEYWORD	455:6	455:6	13	if
LEAF_NODE	455:6	455:6	14	if
LEAF_NODE	455:8	455:8	13	(
CONDITION	455:10	455:10	13	( n = run >> 3 ) != 0
EXPR	455:10	455:26	14	( n = run >> 3 ) != 0
LEAF_NODE	455:10	455:10	15	(
ASSIGN	455:11	455:15	15	n = run >> 3
LVAL	455:11	455:11	16	n
FIELD	455:11	455:11	17	n
LEAF_NODE	455:11	455:11	18	n
ASSIGN_OP	455:13	455:13	16	=
LEAF_NODE	455:13	455:13	17	=
RVAL	455:15	455:20	16	run >> 3
FIELD	455:15	455:15	17	run
LEAF_NODE	455:15	455:15	18	run
LEAF_NODE	455:18	455:18	17	>>
FIELD	455:20	455:20	17	3
LEAF_NODE	455:20	455:20	18	3
LEAF_NODE	455:21	455:21	15	)
EQ_OPERATOR	455:23	455:23	15	!=
LEAF_NODE	455:23	455:23	16	!=
FIELD	455:26	455:26	15	0
LEAF_NODE	455:26	455:26	16	0
LEAF_NODE	455:28	455:28	13	)
STATEMENTS	455:30	472:6	13	
LEAF_NODE	455:30	455:30	14	{
STATEMENTS	456:3	471:3	14	
SELECTION	456:3	456:30	15	
KEYWORD	456:3	456:3	16	if
LEAF_NODE	456:3	456:3	17	if
LEAF_NODE	456:6	456:6	16	(
CONDITION	456:7	456:7	16	( n / sizeof ( long ) ) > 1
EXPR	456:7	456:27	17	( n / sizeof ( long ) ) > 1
LEAF_NODE	456:7	456:7	18	(
FIELD	456:8	456:8	18	n
LEAF_NODE	456:8	456:8	19	n
LEAF_NODE	456:9	456:9	18	/
FUNCTION_CALL	456:10	456:22	18	sizeof ( long )
CALLEE	456:10	456:10	19	sizeof
LEAF_NODE	456:10	456:10	20	sizeof
LEAF_NODE	456:17	456:17	19	(
ARGUMENT	456:18	456:18	19	long
FIELD	456:18	456:18	20	long
LEAF_NODE	456:18	456:18	21	long
LEAF_NODE	456:22	456:22	19	)
LEAF_NODE	456:23	456:23	18	)
REL_OPERATOR	456:25	456:25	18	>
LEAF_NODE	456:25	456:25	19	>
FIELD	456:27	456:27	18	1
LEAF_NODE	456:27	456:27	19	1
LEAF_NODE	456:28	456:28	16	)
STATEMENTS	456:30	469:3	16	
LEAF_NODE	456:30	456:30	17	{
STATEMENTS	460:7	468:7	17	
ITERATION	460:7	461:4	18	
KEYWORD	460:7	460:7	19	for
LEAF_NODE	460:7	460:7	20	for
LEAF_NODE	460:11	460:11	19	(
FOR_INIT	460:12	460:12	19	;
LEAF_NODE	460:12	460:12	20	;
CONDITION	460:14	460:14	19	n && ! isAligned ( cp , long )
EXPR	460:14	460:14	20	n && ! isAligned ( cp , long )
AND	460:14	460:19	21	n && ! isAligned ( cp , long )
EXPR	460:14	460:14	22	n
FIELD	460:14	460:14	23	n
LEAF_NODE	460:14	460:14	24	n
LEAF_NODE	460:16	460:16	22	&&
EXPR	460:19	460:19	22	! isAligned ( cp , long )
UNARY_EXPR	460:19	460:20	23	! isAligned ( cp , long )
UNARY_OPERATOR	460:19	460:19	24	!
LEAF_NODE	460:19	460:19	25	!
FUNCTION_CALL	460:20	460:38	24	isAligned ( cp , long )
CALLEE	460:20	460:20	25	isAligned
LEAF_NODE	460:20	460:20	26	isAligned
LEAF_NODE	460:29	460:29	25	(
ARGUMENT	460:30	460:30	25	cp
FIELD	460:30	460:30	26	cp
LEAF_NODE	460:30	460:30	27	cp
LEAF_NODE	460:32	460:32	25	,
ARGUMENT	460:34	460:34	25	long
FIELD	460:34	460:34	26	long
LEAF_NODE	460:34	460:34	27	long
LEAF_NODE	460:38	460:38	25	)
LEAF_NODE	460:39	460:39	19	;
FOR_EXPR	460:41	460:41	19	n --
EXPR	460:41	460:41	20	n --
FIELD	460:41	460:42	21	n --
LEAF_NODE	460:41	460:41	22	n
LEAF_NODE	460:42	460:42	22	--
LEAF_NODE	460:44	460:44	19	)
STATEMENTS	461:4	461:4	19	
EXPR_STATEMENT	461:4	461:16	20	* cp ++ = 0xff ;
EXPR	461:4	461:4	21	* cp ++ = 0xff
ASSIGN	461:4	461:12	22	* cp ++ = 0xff
LVAL	461:4	461:4	23	* cp ++
UNARY_EXPR	461:4	461:5	24	* cp ++
UNARY_OPERATOR	461:4	461:4	25	*
LEAF_NODE	461:4	461:4	26	*
FIELD	461:5	461:7	25	cp ++
LEAF_NODE	461:5	461:5	26	cp
LEAF_NODE	461:7	461:7	26	++
ASSIGN_OP	461:10	461:10	23	=
LEAF_NODE	461:10	461:10	24	=
RVAL	461:12	461:12	23	0xff
FIELD	461:12	461:12	24	0xff
LEAF_NODE	461:12	461:12	25	0xff
LEAF_NODE	461:16	461:16	21	;
EXPR_STATEMENT	462:7	462:22	18	lp = ( long * ) cp ;
EXPR	462:7	462:7	19	lp = ( long * ) cp
ASSIGN	462:7	462:12	20	lp = ( long * ) cp
LVAL	462:7	462:7	21	lp
FIELD	462:7	462:7	22	lp
LEAF_NODE	462:7	462:7	23	lp
ASSIGN_OP	462:10	462:10	21	=
LEAF_NODE	462:10	462:10	22	=
RVAL	462:12	462:20	21	( long * ) cp
LEAF_NODE	462:12	462:12	22	(
TYPE_NAME	462:13	462:13	22	long
LEAF_NODE	462:13	462:13	23	long
LEAF_NODE	462:17	462:17	22	*
LEAF_NODE	462:18	462:18	22	)
FIELD	462:20	462:20	22	cp
LEAF_NODE	462:20	462:20	23	cp
LEAF_NODE	462:22	462:22	19	;
EXPR_STATEMENT	463:7	463:38	18	nw = ( int32 ) ( n / sizeof ( long ) ) ;
EXPR	463:7	463:7	19	nw = ( int32 ) ( n / sizeof ( long ) )
ASSIGN	463:7	463:12	20	nw = ( int32 ) ( n / sizeof ( long ) )
LVAL	463:7	463:7	21	nw
FIELD	463:7	463:7	22	nw
LEAF_NODE	463:7	463:7	23	nw
ASSIGN_OP	463:10	463:10	21	=
LEAF_NODE	463:10	463:10	22	=
RVAL	463:12	463:37	21	( int32 ) ( n / sizeof ( long ) )
LEAF_NODE	463:12	463:12	22	(
TYPE_NAME	463:13	463:13	22	int32
LEAF_NODE	463:13	463:13	23	int32
LEAF_NODE	463:18	463:18	22	)
LEAF_NODE	463:19	463:19	22	(
FIELD	463:20	463:20	22	n
LEAF_NODE	463:20	463:20	23	n
LEAF_NODE	463:22	463:22	22	/
FUNCTION_CALL	463:24	463:36	22	sizeof ( long )
CALLEE	463:24	463:24	23	sizeof
LEAF_NODE	463:24	463:24	24	sizeof
LEAF_NODE	463:31	463:31	23	(
ARGUMENT	463:32	463:32	23	long
FIELD	463:32	463:32	24	long
LEAF_NODE	463:32	463:32	25	long
LEAF_NODE	463:36	463:36	23	)
LEAF_NODE	463:37	463:37	22	)
LEAF_NODE	463:38	463:38	19	;
EXPR_STATEMENT	464:7	464:30	18	n -= nw * sizeof ( long ) ;
EXPR	464:7	464:7	19	n -= nw * sizeof ( long )
ASSIGN	464:7	464:12	20	n -= nw * sizeof ( long )
LVAL	464:7	464:7	21	n
FIELD	464:7	464:7	22	n
LEAF_NODE	464:7	464:7	23	n
ASSIGN_OP	464:9	464:9	21	-=
LEAF_NODE	464:9	464:9	22	-=
RVAL	464:12	464:17	21	nw * sizeof ( long )
FIELD	464:12	464:12	22	nw
LEAF_NODE	464:12	464:12	23	nw
LEAF_NODE	464:15	464:15	22	*
FUNCTION_CALL	464:17	464:29	22	sizeof ( long )
CALLEE	464:17	464:17	23	sizeof
LEAF_NODE	464:17	464:17	24	sizeof
LEAF_NODE	464:24	464:24	23	(
ARGUMENT	464:25	464:25	23	long
FIELD	464:25	464:25	24	long
LEAF_NODE	464:25	464:25	25	long
LEAF_NODE	464:29	464:29	23	)
LEAF_NODE	464:30	464:30	19	;
ITERATION	465:7	465:10	18	
KEYWORD	465:7	465:7	19	do
LEAF_NODE	465:7	465:7	20	do
LEAF_NODE	467:15	467:15	19	(
CONDITION	467:16	467:16	19	-- nw
EXPR	467:16	467:18	20	-- nw
LEAF_NODE	467:16	467:16	21	--
FIELD	467:18	467:18	21	nw
LEAF_NODE	467:18	467:18	22	nw
LEAF_NODE	467:20	467:20	19	)
STATEMENTS	465:10	467:7	19	
LEAF_NODE	465:10	465:10	20	{
STATEMENTS	466:4	466:4	20	
EXPR_STATEMENT	466:4	466:15	21	* lp ++ = - 1L ;
EXPR	466:4	466:4	22	* lp ++ = - 1L
ASSIGN	466:4	466:12	23	* lp ++ = - 1L
LVAL	466:4	466:4	24	* lp ++
UNARY_EXPR	466:4	466:5	25	* lp ++
UNARY_OPERATOR	466:4	466:4	26	*
LEAF_NODE	466:4	466:4	27	*
FIELD	466:5	466:7	26	lp ++
LEAF_NODE	466:5	466:5	27	lp
LEAF_NODE	466:7	466:7	27	++
ASSIGN_OP	466:10	466:10	24	=
LEAF_NODE	466:10	466:10	25	=
RVAL	466:12	466:12	24	- 1L
UNARY_EXPR	466:12	466:13	25	- 1L
UNARY_OPERATOR	466:12	466:12	26	-
LEAF_NODE	466:12	466:12	27	-
FIELD	466:13	466:13	26	1L
LEAF_NODE	466:13	466:13	27	1L
LEAF_NODE	466:15	466:15	22	;
LEAF_NODE	467:7	467:7	20	}
LEAF_NODE	467:21	467:21	18	;
EXPR_STATEMENT	468:7	468:31	18	cp = ( unsigned char * ) lp ;
EXPR	468:7	468:7	19	cp = ( unsigned char * ) lp
ASSIGN	468:7	468:12	20	cp = ( unsigned char * ) lp
LVAL	468:7	468:7	21	cp
FIELD	468:7	468:7	22	cp
LEAF_NODE	468:7	468:7	23	cp
ASSIGN_OP	468:10	468:10	21	=
LEAF_NODE	468:10	468:10	22	=
RVAL	468:12	468:29	21	( unsigned char * ) lp
LEAF_NODE	468:12	468:12	22	(
TYPE_NAME	468:13	468:22	22	unsigned char
LEAF_NODE	468:13	468:13	23	unsigned
LEAF_NODE	468:22	468:22	23	char
LEAF_NODE	468:26	468:26	22	*
LEAF_NODE	468:27	468:27	22	)
FIELD	468:29	468:29	22	lp
LEAF_NODE	468:29	468:29	23	lp
LEAF_NODE	468:31	468:31	19	;
LEAF_NODE	469:3	469:3	17	}
EXPR_STATEMENT	470:3	470:14	15	FILL ( n , cp ) ;
EXPR	470:3	470:3	16	FILL ( n , cp )
FUNCTION_CALL	470:3	470:13	17	FILL ( n , cp )
CALLEE	470:3	470:3	18	FILL
LEAF_NODE	470:3	470:3	19	FILL
LEAF_NODE	470:7	470:7	18	(
ARGUMENT	470:8	470:8	18	n
FIELD	470:8	470:8	19	n
LEAF_NODE	470:8	470:8	20	n
LEAF_NODE	470:9	470:9	18	,
ARGUMENT	470:11	470:11	18	cp
FIELD	470:11	470:11	19	cp
LEAF_NODE	470:11	470:11	20	cp
LEAF_NODE	470:13	470:13	18	)
LEAF_NODE	470:14	470:14	16	;
EXPR_STATEMENT	471:3	471:11	15	run &= 7 ;
EXPR	471:3	471:3	16	run &= 7
ASSIGN	471:3	471:10	17	run &= 7
LVAL	471:3	471:3	18	run
FIELD	471:3	471:3	19	run
LEAF_NODE	471:3	471:3	20	run
ASSIGN_OP	471:7	471:7	18	&=
LEAF_NODE	471:7	471:7	19	&=
RVAL	471:10	471:10	18	7
FIELD	471:10	471:10	19	7
LEAF_NODE	471:10	471:10	20	7
LEAF_NODE	471:11	471:11	16	;
LEAF_NODE	472:6	472:6	14	}
SELECTION	474:6	475:3	12	
KEYWORD	474:6	474:6	13	if
LEAF_NODE	474:6	474:6	14	if
LEAF_NODE	474:9	474:9	13	(
CONDITION	474:10	474:10	13	run
EXPR	474:10	474:10	14	run
FIELD	474:10	474:10	15	run
LEAF_NODE	474:10	474:10	16	run
LEAF_NODE	474:13	474:13	13	)
STATEMENTS	475:3	475:3	13	
EXPR_STATEMENT	475:3	475:58	14	cp [ 0 ] = ( unsigned char ) ( ( cp [ 0 ] | ( 0xff00 >> run ) ) & 0xff ) ;
EXPR	475:3	475:3	15	cp [ 0 ] = ( unsigned char ) ( ( cp [ 0 ] | ( 0xff00 >> run ) ) & 0xff )
ASSIGN	475:3	475:11	16	cp [ 0 ] = ( unsigned char ) ( ( cp [ 0 ] | ( 0xff00 >> run ) ) & 0xff )
LVAL	475:3	475:3	17	cp [ 0 ]
FIELD	475:3	475:7	18	cp [ 0 ]
LEAF_NODE	475:3	475:3	19	cp
LEAF_NODE	475:5	475:5	19	[
EXPR	475:6	475:6	19	0
FIELD	475:6	475:6	20	0
LEAF_NODE	475:6	475:6	21	0
LEAF_NODE	475:7	475:7	19	]
ASSIGN_OP	475:9	475:9	17	=
LEAF_NODE	475:9	475:9	18	=
RVAL	475:11	475:57	17	( unsigned char ) ( ( cp [ 0 ] | ( 0xff00 >> run ) ) & 0xff )
LEAF_NODE	475:11	475:11	18	(
TYPE_NAME	475:12	475:21	18	unsigned char
LEAF_NODE	475:12	475:12	19	unsigned
LEAF_NODE	475:21	475:21	19	char
LEAF_NODE	475:25	475:25	18	)
LEAF_NODE	475:26	475:26	18	(
LEAF_NODE	475:27	475:27	18	(
BIT_OR	475:28	475:36	18	cp [ 0 ] | ( 0xff00 >> run )
BIT_OR_ELEM	475:28	475:28	19	cp [ 0 ]
FIELD	475:28	475:32	20	cp [ 0 ]
LEAF_NODE	475:28	475:28	21	cp
LEAF_NODE	475:30	475:30	21	[
EXPR	475:31	475:31	21	0
FIELD	475:31	475:31	22	0
LEAF_NODE	475:31	475:31	23	0
LEAF_NODE	475:32	475:32	21	]
LEAF_NODE	475:34	475:34	19	|
BIT_OR_ELEM	475:36	475:50	19	( 0xff00 >> run )
LEAF_NODE	475:36	475:36	20	(
FIELD	475:37	475:37	20	0xff00
LEAF_NODE	475:37	475:37	21	0xff00
LEAF_NODE	475:44	475:44	20	>>
FIELD	475:47	475:47	20	run
LEAF_NODE	475:47	475:47	21	run
LEAF_NODE	475:50	475:50	20	)
LEAF_NODE	475:51	475:51	18	)
LEAF_NODE	475:52	475:52	18	&
FIELD	475:53	475:53	18	0xff
LEAF_NODE	475:53	475:53	19	0xff
LEAF_NODE	475:57	475:57	18	)
LEAF_NODE	475:58	475:58	15	;
LEAF_NODE	476:2	476:2	11	}
SELECTION	476:4	477:6	9	
KEYWORD	476:4	476:4	10	else
LEAF_NODE	476:4	476:4	11	else
STATEMENTS	477:6	477:6	10	
EXPR_STATEMENT	477:6	477:34	11	cp [ 0 ] |= _fillmasks [ run ] >> bx ;
EXPR	477:6	477:6	12	cp [ 0 ] |= _fillmasks [ run ] >> bx
ASSIGN	477:6	477:15	13	cp [ 0 ] |= _fillmasks [ run ] >> bx
LVAL	477:6	477:6	14	cp [ 0 ]
FIELD	477:6	477:10	15	cp [ 0 ]
LEAF_NODE	477:6	477:6	16	cp
LEAF_NODE	477:8	477:8	16	[
EXPR	477:9	477:9	16	0
FIELD	477:9	477:9	17	0
LEAF_NODE	477:9	477:9	18	0
LEAF_NODE	477:10	477:10	16	]
ASSIGN_OP	477:12	477:12	14	|=
LEAF_NODE	477:12	477:12	15	|=
RVAL	477:15	477:32	14	_fillmasks [ run ] >> bx
FIELD	477:15	477:29	15	_fillmasks [ run ]
LEAF_NODE	477:15	477:15	16	_fillmasks
LEAF_NODE	477:25	477:25	16	[
EXPR	477:26	477:26	16	run
FIELD	477:26	477:26	17	run
LEAF_NODE	477:26	477:26	18	run
LEAF_NODE	477:29	477:29	16	]
LEAF_NODE	477:30	477:30	15	>>
FIELD	477:32	477:32	15	bx
LEAF_NODE	477:32	477:32	16	bx
LEAF_NODE	477:34	477:34	12	;
EXPR_STATEMENT	478:2	478:14	9	x += runs [ 1 ] ;
EXPR	478:2	478:2	10	x += runs [ 1 ]
ASSIGN	478:2	478:7	11	x += runs [ 1 ]
LVAL	478:2	478:2	12	x
FIELD	478:2	478:2	13	x
LEAF_NODE	478:2	478:2	14	x
ASSIGN_OP	478:4	478:4	12	+=
LEAF_NODE	478:4	478:4	13	+=
RVAL	478:7	478:7	12	runs [ 1 ]
FIELD	478:7	478:13	13	runs [ 1 ]
LEAF_NODE	478:7	478:7	14	runs
LEAF_NODE	478:11	478:11	14	[
EXPR	478:12	478:12	14	1
FIELD	478:12	478:12	15	1
LEAF_NODE	478:12	478:12	16	1
LEAF_NODE	478:13	478:13	14	]
LEAF_NODE	478:14	478:14	10	;
LEAF_NODE	479:5	479:5	8	}
LEAF_NODE	480:1	480:1	5	}
EXPR_STATEMENT	481:1	481:19	3	assert ( x == lastx ) ;
EXPR	481:1	481:1	4	assert ( x == lastx )
FUNCTION_CALL	481:1	481:18	5	assert ( x == lastx )
CALLEE	481:1	481:1	6	assert
LEAF_NODE	481:1	481:1	7	assert
LEAF_NODE	481:7	481:7	6	(
ARGUMENT	481:8	481:13	6	x == lastx
FIELD	481:8	481:8	7	x
LEAF_NODE	481:8	481:8	8	x
EQ_OPERATOR	481:10	481:10	7	==
LEAF_NODE	481:10	481:10	8	==
FIELD	481:13	481:13	7	lastx
LEAF_NODE	481:13	481:13	8	lastx
LEAF_NODE	481:18	481:18	6	)
LEAF_NODE	481:19	481:19	4	;
LEAF_NODE	482:0	482:0	2	}
FUNCTION_DEF	486:0	491:0	1	
RETURN_TYPE	486:0	486:7	2	static int
LEAF_NODE	486:0	486:0	3	static
TYPE_NAME	486:7	486:7	3	int
LEAF_NODE	486:7	486:7	4	int
FUNCTION_NAME	487:0	487:0	2	Fax3FixupTags
LEAF_NODE	487:0	487:0	3	Fax3FixupTags
PARAMETER_LIST	487:13	487:23	2	( TIFF * tif )
LEAF_NODE	487:13	487:13	3	(
PARAMETER_DECL	487:14	487:20	3	TIFF * tif
TYPE	487:14	487:18	4	TIFF *
TYPE_NAME	487:14	487:14	5	TIFF
LEAF_NODE	487:14	487:14	6	TIFF
POINTER	487:18	487:18	5	*
LEAF_NODE	487:18	487:18	6	*
NAME	487:20	487:20	4	tif
LEAF_NODE	487:20	487:20	5	tif
LEAF_NODE	487:23	487:23	3	)
LEAF_NODE	488:0	488:0	2	{
STATEMENTS	489:1	490:1	2	
EXPR_STATEMENT	489:1	489:11	3	( void ) tif ;
EXPR	489:1	489:8	4	( void ) tif
LEAF_NODE	489:1	489:1	5	(
TYPE_NAME	489:2	489:2	5	void
LEAF_NODE	489:2	489:2	6	void
LEAF_NODE	489:6	489:6	5	)
FIELD	489:8	489:8	5	tif
LEAF_NODE	489:8	489:8	6	tif
LEAF_NODE	489:11	489:11	4	;
JUMP_STATEMENT	490:1	490:11	3	return ( 1 ) ;
KEYWORD	490:1	490:1	4	return
LEAF_NODE	490:1	490:1	5	return
DESTINATION	490:8	490:8	4	( 1 )
EXPR	490:8	490:10	5	( 1 )
LEAF_NODE	490:8	490:8	6	(
FIELD	490:9	490:9	6	1
LEAF_NODE	490:9	490:9	7	1
LEAF_NODE	490:10	490:10	6	)
LEAF_NODE	490:11	490:11	4	;
LEAF_NODE	491:0	491:0	2	}
FUNCTION_DEF	500:0	590:0	1	
RETURN_TYPE	500:0	500:7	2	static int
LEAF_NODE	500:0	500:0	3	static
TYPE_NAME	500:7	500:7	3	int
LEAF_NODE	500:7	500:7	4	int
FUNCTION_NAME	501:0	501:0	2	Fax3SetupState
LEAF_NODE	501:0	501:0	3	Fax3SetupState
PARAMETER_LIST	501:14	501:24	2	( TIFF * tif )
LEAF_NODE	501:14	501:14	3	(
PARAMETER_DECL	501:15	501:21	3	TIFF * tif
TYPE	501:15	501:19	4	TIFF *
TYPE_NAME	501:15	501:15	5	TIFF
LEAF_NODE	501:15	501:15	6	TIFF
POINTER	501:19	501:19	5	*
LEAF_NODE	501:19	501:19	6	*
NAME	501:21	501:21	4	tif
LEAF_NODE	501:21	501:21	5	tif
LEAF_NODE	501:24	501:24	3	)
LEAF_NODE	502:0	502:0	2	{
STATEMENTS	503:1	589:1	2	
LEAF_NODE	503:1	503:1	3	static
SIMPLE_DECL	503:8	503:46	3	const char [ ] module ; module = "Fax3SetupState" ;
VAR_DECL	503:8	503:19	4	const char [ ] module ; module = "Fax3SetupState"
TYPE	503:8	503:25	5	const char [ ]
TYPE_NAME	503:8	503:14	6	const char
LEAF_NODE	503:8	503:8	7	const
LEAF_NODE	503:14	503:14	7	char
TYPE_SUFFIX	503:25	503:26	6	[ ]
LEAF_NODE	503:25	503:25	7	[
LEAF_NODE	503:26	503:26	7	]
NAME	503:19	503:19	5	module
LEAF_NODE	503:19	503:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	503:19	503:19	5	module = "Fax3SetupState"
ASSIGN	503:19	503:30	6	module = "Fax3SetupState"
LVAL	503:19	503:19	7	module
NAME	503:19	503:19	8	module
LEAF_NODE	503:19	503:19	9	module
ASSIGN_OP	503:28	503:28	7	=
LEAF_NODE	503:28	503:28	8	=
RVAL	503:30	503:30	7	"Fax3SetupState"
FIELD	503:30	503:30	8	"Fax3SetupState"
LEAF_NODE	503:30	503:30	9	"Fax3SetupState"
LEAF_NODE	503:46	503:46	4	;
SIMPLE_DECL	504:1	504:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	504:1	504:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	504:1	504:14	5	TIFFDirectory *
TYPE_NAME	504:1	504:1	6	TIFFDirectory
LEAF_NODE	504:1	504:1	7	TIFFDirectory
POINTER	504:14	504:14	6	*
LEAF_NODE	504:14	504:14	7	*
NAME	504:16	504:16	5	td
LEAF_NODE	504:16	504:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	504:16	504:16	5	td = & tif -> tif_dir
ASSIGN	504:16	504:21	6	td = & tif -> tif_dir
LVAL	504:16	504:16	7	td
NAME	504:16	504:16	8	td
LEAF_NODE	504:16	504:16	9	td
ASSIGN_OP	504:19	504:19	7	=
LEAF_NODE	504:19	504:19	8	=
RVAL	504:21	504:21	7	& tif -> tif_dir
UNARY_EXPR	504:21	504:22	8	& tif -> tif_dir
UNARY_OPERATOR	504:21	504:21	9	&
LEAF_NODE	504:21	504:21	10	&
FIELD	504:22	504:27	9	tif -> tif_dir
LEAF_NODE	504:22	504:22	10	tif
LEAF_NODE	504:25	504:25	10	->
LEAF_NODE	504:27	504:27	10	tif_dir
LEAF_NODE	504:34	504:34	4	;
SIMPLE_DECL	505:1	505:35	3	Fax3BaseState * sp ; sp = Fax3State ( tif ) ;
VAR_DECL	505:1	505:16	4	Fax3BaseState * sp ; sp = Fax3State ( tif )
TYPE	505:1	505:14	5	Fax3BaseState *
TYPE_NAME	505:1	505:1	6	Fax3BaseState
LEAF_NODE	505:1	505:1	7	Fax3BaseState
POINTER	505:14	505:14	6	*
LEAF_NODE	505:14	505:14	7	*
NAME	505:16	505:16	5	sp
LEAF_NODE	505:16	505:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	505:16	505:16	5	sp = Fax3State ( tif )
ASSIGN	505:16	505:21	6	sp = Fax3State ( tif )
LVAL	505:16	505:16	7	sp
NAME	505:16	505:16	8	sp
LEAF_NODE	505:16	505:16	9	sp
ASSIGN_OP	505:19	505:19	7	=
LEAF_NODE	505:19	505:19	8	=
RVAL	505:21	505:21	7	Fax3State ( tif )
FUNCTION_CALL	505:21	505:34	8	Fax3State ( tif )
CALLEE	505:21	505:21	9	Fax3State
LEAF_NODE	505:21	505:21	10	Fax3State
LEAF_NODE	505:30	505:30	9	(
ARGUMENT	505:31	505:31	9	tif
FIELD	505:31	505:31	10	tif
LEAF_NODE	505:31	505:31	11	tif
LEAF_NODE	505:34	505:34	9	)
LEAF_NODE	505:35	505:35	4	;
SIMPLE_DECL	506:1	506:17	3	int needsRefLine ;
VAR_DECL	506:1	506:5	4	int needsRefLine
TYPE	506:1	506:1	5	int
TYPE_NAME	506:1	506:1	6	int
LEAF_NODE	506:1	506:1	7	int
NAME	506:5	506:5	5	needsRefLine
LEAF_NODE	506:5	506:5	6	needsRefLine
LEAF_NODE	506:17	506:17	4	;
SIMPLE_DECL	507:1	507:55	3	Fax3CodecState * dsp ; dsp = ( Fax3CodecState * ) Fax3State ( tif ) ;
VAR_DECL	507:1	507:17	4	Fax3CodecState * dsp ; dsp = ( Fax3CodecState * ) Fax3State ( tif )
TYPE	507:1	507:15	5	Fax3CodecState *
TYPE_NAME	507:1	507:1	6	Fax3CodecState
LEAF_NODE	507:1	507:1	7	Fax3CodecState
POINTER	507:15	507:15	6	*
LEAF_NODE	507:15	507:15	7	*
NAME	507:17	507:17	5	dsp
LEAF_NODE	507:17	507:17	6	dsp
LEAF_NODE	0:0	0:0	5	;
INIT	507:17	507:17	5	dsp = ( Fax3CodecState * ) Fax3State ( tif )
ASSIGN	507:17	507:23	6	dsp = ( Fax3CodecState * ) Fax3State ( tif )
LVAL	507:17	507:17	7	dsp
NAME	507:17	507:17	8	dsp
LEAF_NODE	507:17	507:17	9	dsp
ASSIGN_OP	507:21	507:21	7	=
LEAF_NODE	507:21	507:21	8	=
RVAL	507:23	507:41	7	( Fax3CodecState * ) Fax3State ( tif )
LEAF_NODE	507:23	507:23	8	(
TYPE_NAME	507:24	507:24	8	Fax3CodecState
LEAF_NODE	507:24	507:24	9	Fax3CodecState
LEAF_NODE	507:38	507:38	8	*
LEAF_NODE	507:39	507:39	8	)
FUNCTION_CALL	507:41	507:54	8	Fax3State ( tif )
CALLEE	507:41	507:41	9	Fax3State
LEAF_NODE	507:41	507:41	10	Fax3State
LEAF_NODE	507:50	507:50	9	(
ARGUMENT	507:51	507:51	9	tif
FIELD	507:51	507:51	10	tif
LEAF_NODE	507:51	507:51	11	tif
LEAF_NODE	507:54	507:54	9	)
LEAF_NODE	507:55	507:55	4	;
SIMPLE_DECL	508:1	508:18	3	tmsize_t rowbytes ;
VAR_DECL	508:1	508:10	4	tmsize_t rowbytes
TYPE	508:1	508:1	5	tmsize_t
TYPE_NAME	508:1	508:1	6	tmsize_t
LEAF_NODE	508:1	508:1	7	tmsize_t
NAME	508:10	508:10	5	rowbytes
LEAF_NODE	508:10	508:10	6	rowbytes
LEAF_NODE	508:18	508:18	4	;
SIMPLE_DECL	509:1	509:24	3	uint32 rowpixels , uint32 nruns ;
INIT_DECL_LIST	509:1	509:1	4	uint32 rowpixels , uint32 nruns
VAR_DECL	509:1	509:8	5	uint32 rowpixels
TYPE	509:1	509:1	6	uint32
TYPE_NAME	509:1	509:1	7	uint32
LEAF_NODE	509:1	509:1	8	uint32
NAME	509:8	509:8	6	rowpixels
LEAF_NODE	509:8	509:8	7	rowpixels
LEAF_NODE	509:17	509:17	5	,
VAR_DECL	509:1	509:19	5	uint32 nruns
TYPE	509:1	509:1	6	uint32
TYPE_NAME	509:1	509:1	7	uint32
LEAF_NODE	509:1	509:1	8	uint32
NAME	509:19	509:19	6	nruns
LEAF_NODE	509:19	509:19	7	nruns
LEAF_NODE	509:24	509:24	4	;
SELECTION	511:1	511:32	3	
KEYWORD	511:1	511:1	4	if
LEAF_NODE	511:1	511:1	5	if
LEAF_NODE	511:4	511:4	4	(
CONDITION	511:5	511:5	4	td -> td_bitspersample != 1
EXPR	511:5	511:29	5	td -> td_bitspersample != 1
FIELD	511:5	511:9	6	td -> td_bitspersample
LEAF_NODE	511:5	511:5	7	td
LEAF_NODE	511:7	511:7	7	->
LEAF_NODE	511:9	511:9	7	td_bitspersample
EQ_OPERATOR	511:26	511:26	6	!=
LEAF_NODE	511:26	511:26	7	!=
FIELD	511:29	511:29	6	1
LEAF_NODE	511:29	511:29	7	1
LEAF_NODE	511:30	511:30	4	)
STATEMENTS	511:32	515:1	4	
LEAF_NODE	511:32	511:32	5	{
STATEMENTS	512:2	514:2	5	
EXPR_STATEMENT	512:2	513:62	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Bits/sample must be 1 for Group 3/4 encoding/decoding" ) ;
EXPR	512:2	512:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Bits/sample must be 1 for Group 3/4 encoding/decoding" )
FUNCTION_CALL	512:2	513:61	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Bits/sample must be 1 for Group 3/4 encoding/decoding" )
CALLEE	512:2	512:2	9	TIFFErrorExt
LEAF_NODE	512:2	512:2	10	TIFFErrorExt
LEAF_NODE	512:14	512:14	9	(
ARGUMENT	512:15	512:15	9	tif -> tif_clientdata
FIELD	512:15	512:20	10	tif -> tif_clientdata
LEAF_NODE	512:15	512:15	11	tif
LEAF_NODE	512:18	512:18	11	->
LEAF_NODE	512:20	512:20	11	tif_clientdata
LEAF_NODE	512:34	512:34	9	,
ARGUMENT	512:36	512:36	9	module
FIELD	512:36	512:36	10	module
LEAF_NODE	512:36	512:36	11	module
LEAF_NODE	512:42	512:42	9	,
ARGUMENT	513:6	513:6	9	"Bits/sample must be 1 for Group 3/4 encoding/decoding"
FIELD	513:6	513:6	10	"Bits/sample must be 1 for Group 3/4 encoding/decoding"
LEAF_NODE	513:6	513:6	11	"Bits/sample must be 1 for Group 3/4 encoding/decoding"
LEAF_NODE	513:61	513:61	9	)
LEAF_NODE	513:62	513:62	7	;
JUMP_STATEMENT	514:2	514:12	6	return ( 0 ) ;
KEYWORD	514:2	514:2	7	return
LEAF_NODE	514:2	514:2	8	return
DESTINATION	514:9	514:9	7	( 0 )
EXPR	514:9	514:11	8	( 0 )
LEAF_NODE	514:9	514:9	9	(
FIELD	514:10	514:10	9	0
LEAF_NODE	514:10	514:10	10	0
LEAF_NODE	514:11	514:11	9	)
LEAF_NODE	514:12	514:12	7	;
LEAF_NODE	515:1	515:1	5	}
SELECTION	519:1	519:19	3	
KEYWORD	519:1	519:1	4	if
LEAF_NODE	519:1	519:1	5	if
LEAF_NODE	519:4	519:4	4	(
CONDITION	519:5	519:5	4	isTiled ( tif )
EXPR	519:5	519:5	5	isTiled ( tif )
FUNCTION_CALL	519:5	519:16	6	isTiled ( tif )
CALLEE	519:5	519:5	7	isTiled
LEAF_NODE	519:5	519:5	8	isTiled
LEAF_NODE	519:12	519:12	7	(
ARGUMENT	519:13	519:13	7	tif
FIELD	519:13	519:13	8	tif
LEAF_NODE	519:13	519:13	9	tif
LEAF_NODE	519:16	519:16	7	)
LEAF_NODE	519:17	519:17	4	)
STATEMENTS	519:19	522:1	4	
LEAF_NODE	519:19	519:19	5	{
STATEMENTS	520:2	521:2	5	
EXPR_STATEMENT	520:2	520:33	6	rowbytes = TIFFTileRowSize ( tif ) ;
EXPR	520:2	520:2	7	rowbytes = TIFFTileRowSize ( tif )
ASSIGN	520:2	520:13	8	rowbytes = TIFFTileRowSize ( tif )
LVAL	520:2	520:2	9	rowbytes
FIELD	520:2	520:2	10	rowbytes
LEAF_NODE	520:2	520:2	11	rowbytes
ASSIGN_OP	520:11	520:11	9	=
LEAF_NODE	520:11	520:11	10	=
RVAL	520:13	520:13	9	TIFFTileRowSize ( tif )
FUNCTION_CALL	520:13	520:32	10	TIFFTileRowSize ( tif )
CALLEE	520:13	520:13	11	TIFFTileRowSize
LEAF_NODE	520:13	520:13	12	TIFFTileRowSize
LEAF_NODE	520:28	520:28	11	(
ARGUMENT	520:29	520:29	11	tif
FIELD	520:29	520:29	12	tif
LEAF_NODE	520:29	520:29	13	tif
LEAF_NODE	520:32	520:32	11	)
LEAF_NODE	520:33	520:33	7	;
EXPR_STATEMENT	521:2	521:30	6	rowpixels = td -> td_tilewidth ;
EXPR	521:2	521:2	7	rowpixels = td -> td_tilewidth
ASSIGN	521:2	521:14	8	rowpixels = td -> td_tilewidth
LVAL	521:2	521:2	9	rowpixels
FIELD	521:2	521:2	10	rowpixels
LEAF_NODE	521:2	521:2	11	rowpixels
ASSIGN_OP	521:12	521:12	9	=
LEAF_NODE	521:12	521:12	10	=
RVAL	521:14	521:14	9	td -> td_tilewidth
FIELD	521:14	521:18	10	td -> td_tilewidth
LEAF_NODE	521:14	521:14	11	td
LEAF_NODE	521:16	521:16	11	->
LEAF_NODE	521:18	521:18	11	td_tilewidth
LEAF_NODE	521:30	521:30	7	;
LEAF_NODE	522:1	522:1	5	}
SELECTION	522:3	522:8	3	
KEYWORD	522:3	522:3	4	else
LEAF_NODE	522:3	522:3	5	else
STATEMENTS	522:8	525:1	4	
LEAF_NODE	522:8	522:8	5	{
STATEMENTS	523:2	524:2	5	
EXPR_STATEMENT	523:2	523:34	6	rowbytes = TIFFScanlineSize ( tif ) ;
EXPR	523:2	523:2	7	rowbytes = TIFFScanlineSize ( tif )
ASSIGN	523:2	523:13	8	rowbytes = TIFFScanlineSize ( tif )
LVAL	523:2	523:2	9	rowbytes
FIELD	523:2	523:2	10	rowbytes
LEAF_NODE	523:2	523:2	11	rowbytes
ASSIGN_OP	523:11	523:11	9	=
LEAF_NODE	523:11	523:11	10	=
RVAL	523:13	523:13	9	TIFFScanlineSize ( tif )
FUNCTION_CALL	523:13	523:33	10	TIFFScanlineSize ( tif )
CALLEE	523:13	523:13	11	TIFFScanlineSize
LEAF_NODE	523:13	523:13	12	TIFFScanlineSize
LEAF_NODE	523:29	523:29	11	(
ARGUMENT	523:30	523:30	11	tif
FIELD	523:30	523:30	12	tif
LEAF_NODE	523:30	523:30	13	tif
LEAF_NODE	523:33	523:33	11	)
LEAF_NODE	523:34	523:34	7	;
EXPR_STATEMENT	524:2	524:31	6	rowpixels = td -> td_imagewidth ;
EXPR	524:2	524:2	7	rowpixels = td -> td_imagewidth
ASSIGN	524:2	524:14	8	rowpixels = td -> td_imagewidth
LVAL	524:2	524:2	9	rowpixels
FIELD	524:2	524:2	10	rowpixels
LEAF_NODE	524:2	524:2	11	rowpixels
ASSIGN_OP	524:12	524:12	9	=
LEAF_NODE	524:12	524:12	10	=
RVAL	524:14	524:14	9	td -> td_imagewidth
FIELD	524:14	524:18	10	td -> td_imagewidth
LEAF_NODE	524:14	524:14	11	td
LEAF_NODE	524:16	524:16	11	->
LEAF_NODE	524:18	524:18	11	td_imagewidth
LEAF_NODE	524:31	524:31	7	;
LEAF_NODE	525:1	525:1	5	}
EXPR_STATEMENT	526:1	526:24	3	sp -> rowbytes = rowbytes ;
EXPR	526:1	526:1	4	sp -> rowbytes = rowbytes
ASSIGN	526:1	526:16	5	sp -> rowbytes = rowbytes
LVAL	526:1	526:1	6	sp -> rowbytes
FIELD	526:1	526:5	7	sp -> rowbytes
LEAF_NODE	526:1	526:1	8	sp
LEAF_NODE	526:3	526:3	8	->
LEAF_NODE	526:5	526:5	8	rowbytes
ASSIGN_OP	526:14	526:14	6	=
LEAF_NODE	526:14	526:14	7	=
RVAL	526:16	526:16	6	rowbytes
FIELD	526:16	526:16	7	rowbytes
LEAF_NODE	526:16	526:16	8	rowbytes
LEAF_NODE	526:24	526:24	4	;
EXPR_STATEMENT	527:1	527:26	3	sp -> rowpixels = rowpixels ;
EXPR	527:1	527:1	4	sp -> rowpixels = rowpixels
ASSIGN	527:1	527:17	5	sp -> rowpixels = rowpixels
LVAL	527:1	527:1	6	sp -> rowpixels
FIELD	527:1	527:5	7	sp -> rowpixels
LEAF_NODE	527:1	527:1	8	sp
LEAF_NODE	527:3	527:3	8	->
LEAF_NODE	527:5	527:5	8	rowpixels
ASSIGN_OP	527:15	527:15	6	=
LEAF_NODE	527:15	527:15	7	=
RVAL	527:17	527:17	6	rowpixels
FIELD	527:17	527:17	7	rowpixels
LEAF_NODE	527:17	527:17	8	rowpixels
LEAF_NODE	527:26	527:26	4	;
EXPR_STATEMENT	531:1	534:2	3	needsRefLine = ( ( sp -> groupoptions & GROUP3OPT_2DENCODING ) || td -> td_compression == COMPRESSION_CCITTFAX4 ) ;
EXPR	531:1	531:1	4	needsRefLine = ( ( sp -> groupoptions & GROUP3OPT_2DENCODING ) || td -> td_compression == COMPRESSION_CCITTFAX4 )
ASSIGN	531:1	531:16	5	needsRefLine = ( ( sp -> groupoptions & GROUP3OPT_2DENCODING ) || td -> td_compression == COMPRESSION_CCITTFAX4 )
LVAL	531:1	531:1	6	needsRefLine
FIELD	531:1	531:1	7	needsRefLine
LEAF_NODE	531:1	531:1	8	needsRefLine
ASSIGN_OP	531:14	531:14	6	=
LEAF_NODE	531:14	531:14	7	=
RVAL	531:16	534:1	6	( ( sp -> groupoptions & GROUP3OPT_2DENCODING ) || td -> td_compression == COMPRESSION_CCITTFAX4 )
LEAF_NODE	531:16	531:16	7	(
OR	532:5	533:5	7	( sp -> groupoptions & GROUP3OPT_2DENCODING ) || td -> td_compression == COMPRESSION_CCITTFAX4
EXPR	532:5	532:45	8	( sp -> groupoptions & GROUP3OPT_2DENCODING )
LEAF_NODE	532:5	532:5	9	(
FIELD	532:6	532:10	9	sp -> groupoptions
LEAF_NODE	532:6	532:6	10	sp
LEAF_NODE	532:8	532:8	10	->
LEAF_NODE	532:10	532:10	10	groupoptions
LEAF_NODE	532:23	532:23	9	&
FIELD	532:25	532:25	9	GROUP3OPT_2DENCODING
LEAF_NODE	532:25	532:25	10	GROUP3OPT_2DENCODING
LEAF_NODE	532:45	532:45	9	)
LEAF_NODE	532:47	532:47	8	||
EXPR	533:5	533:27	8	td -> td_compression == COMPRESSION_CCITTFAX4
FIELD	533:5	533:9	9	td -> td_compression
LEAF_NODE	533:5	533:5	10	td
LEAF_NODE	533:7	533:7	10	->
LEAF_NODE	533:9	533:9	10	td_compression
EQ_OPERATOR	533:24	533:24	9	==
LEAF_NODE	533:24	533:24	10	==
FIELD	533:27	533:27	9	COMPRESSION_CCITTFAX4
LEAF_NODE	533:27	533:27	10	COMPRESSION_CCITTFAX4
LEAF_NODE	534:1	534:1	7	)
LEAF_NODE	534:2	534:2	4	;
EXPR_STATEMENT	541:1	541:25	3	dsp -> runs = ( uint32 * ) NULL ;
EXPR	541:1	541:1	4	dsp -> runs = ( uint32 * ) NULL
ASSIGN	541:1	541:11	5	dsp -> runs = ( uint32 * ) NULL
LVAL	541:1	541:1	6	dsp -> runs
FIELD	541:1	541:6	7	dsp -> runs
LEAF_NODE	541:1	541:1	8	dsp
LEAF_NODE	541:4	541:4	8	->
LEAF_NODE	541:6	541:6	8	runs
ASSIGN_OP	541:10	541:10	6	=
LEAF_NODE	541:10	541:10	7	=
RVAL	541:11	541:21	6	( uint32 * ) NULL
LEAF_NODE	541:11	541:11	7	(
TYPE_NAME	541:12	541:12	7	uint32
LEAF_NODE	541:12	541:12	8	uint32
LEAF_NODE	541:18	541:18	7	*
LEAF_NODE	541:19	541:19	7	)
FIELD	541:21	541:21	7	NULL
LEAF_NODE	541:21	541:21	8	NULL
LEAF_NODE	541:25	541:25	4	;
EXPR_STATEMENT	542:1	542:37	3	nruns = TIFFroundup_32 ( rowpixels , 32 ) ;
EXPR	542:1	542:1	4	nruns = TIFFroundup_32 ( rowpixels , 32 )
ASSIGN	542:1	542:9	5	nruns = TIFFroundup_32 ( rowpixels , 32 )
LVAL	542:1	542:1	6	nruns
FIELD	542:1	542:1	7	nruns
LEAF_NODE	542:1	542:1	8	nruns
ASSIGN_OP	542:7	542:7	6	=
LEAF_NODE	542:7	542:7	7	=
RVAL	542:9	542:9	6	TIFFroundup_32 ( rowpixels , 32 )
FUNCTION_CALL	542:9	542:36	7	TIFFroundup_32 ( rowpixels , 32 )
CALLEE	542:9	542:9	8	TIFFroundup_32
LEAF_NODE	542:9	542:9	9	TIFFroundup_32
LEAF_NODE	542:23	542:23	8	(
ARGUMENT	542:24	542:24	8	rowpixels
FIELD	542:24	542:24	9	rowpixels
LEAF_NODE	542:24	542:24	10	rowpixels
LEAF_NODE	542:33	542:33	8	,
ARGUMENT	542:34	542:34	8	32
FIELD	542:34	542:34	9	32
LEAF_NODE	542:34	542:34	10	32
LEAF_NODE	542:36	542:36	8	)
LEAF_NODE	542:37	542:37	4	;
SELECTION	543:1	543:19	3	
KEYWORD	543:1	543:1	4	if
LEAF_NODE	543:1	543:1	5	if
LEAF_NODE	543:4	543:4	4	(
CONDITION	543:5	543:5	4	needsRefLine
EXPR	543:5	543:5	5	needsRefLine
FIELD	543:5	543:5	6	needsRefLine
LEAF_NODE	543:5	543:5	7	needsRefLine
LEAF_NODE	543:17	543:17	4	)
STATEMENTS	543:19	545:1	4	
LEAF_NODE	543:19	543:19	5	{
STATEMENTS	544:2	544:2	5	
EXPR_STATEMENT	544:2	544:42	6	nruns = TIFFSafeMultiply ( uint32 , nruns , 2 ) ;
EXPR	544:2	544:2	7	nruns = TIFFSafeMultiply ( uint32 , nruns , 2 )
ASSIGN	544:2	544:10	8	nruns = TIFFSafeMultiply ( uint32 , nruns , 2 )
LVAL	544:2	544:2	9	nruns
FIELD	544:2	544:2	10	nruns
LEAF_NODE	544:2	544:2	11	nruns
ASSIGN_OP	544:8	544:8	9	=
LEAF_NODE	544:8	544:8	10	=
RVAL	544:10	544:10	9	TIFFSafeMultiply ( uint32 , nruns , 2 )
FUNCTION_CALL	544:10	544:41	10	TIFFSafeMultiply ( uint32 , nruns , 2 )
CALLEE	544:10	544:10	11	TIFFSafeMultiply
LEAF_NODE	544:10	544:10	12	TIFFSafeMultiply
LEAF_NODE	544:26	544:26	11	(
ARGUMENT	544:27	544:27	11	uint32
FIELD	544:27	544:27	12	uint32
LEAF_NODE	544:27	544:27	13	uint32
LEAF_NODE	544:33	544:33	11	,
ARGUMENT	544:34	544:34	11	nruns
FIELD	544:34	544:34	12	nruns
LEAF_NODE	544:34	544:34	13	nruns
LEAF_NODE	544:39	544:39	11	,
ARGUMENT	544:40	544:40	11	2
FIELD	544:40	544:40	12	2
LEAF_NODE	544:40	544:40	13	2
LEAF_NODE	544:41	544:41	11	)
LEAF_NODE	544:42	544:42	7	;
LEAF_NODE	545:1	545:1	5	}
SELECTION	546:1	546:62	3	
KEYWORD	546:1	546:1	4	if
LEAF_NODE	546:1	546:1	5	if
LEAF_NODE	546:4	546:4	4	(
CONDITION	546:5	546:5	4	( nruns == 0 ) || ( TIFFSafeMultiply ( uint32 , nruns , 2 ) == 0 )
EXPR	546:5	546:5	5	( nruns == 0 ) || ( TIFFSafeMultiply ( uint32 , nruns , 2 ) == 0 )
OR	546:5	546:21	6	( nruns == 0 ) || ( TIFFSafeMultiply ( uint32 , nruns , 2 ) == 0 )
EXPR	546:5	546:16	7	( nruns == 0 )
LEAF_NODE	546:5	546:5	8	(
FIELD	546:6	546:6	8	nruns
LEAF_NODE	546:6	546:6	9	nruns
EQ_OPERATOR	546:12	546:12	8	==
LEAF_NODE	546:12	546:12	9	==
FIELD	546:15	546:15	8	0
LEAF_NODE	546:15	546:15	9	0
LEAF_NODE	546:16	546:16	8	)
LEAF_NODE	546:18	546:18	7	||
EXPR	546:21	546:59	7	( TIFFSafeMultiply ( uint32 , nruns , 2 ) == 0 )
LEAF_NODE	546:21	546:21	8	(
FUNCTION_CALL	546:22	546:53	8	TIFFSafeMultiply ( uint32 , nruns , 2 )
CALLEE	546:22	546:22	9	TIFFSafeMultiply
LEAF_NODE	546:22	546:22	10	TIFFSafeMultiply
LEAF_NODE	546:38	546:38	9	(
ARGUMENT	546:39	546:39	9	uint32
FIELD	546:39	546:39	10	uint32
LEAF_NODE	546:39	546:39	11	uint32
LEAF_NODE	546:45	546:45	9	,
ARGUMENT	546:46	546:46	9	nruns
FIELD	546:46	546:46	10	nruns
LEAF_NODE	546:46	546:46	11	nruns
LEAF_NODE	546:51	546:51	9	,
ARGUMENT	546:52	546:52	9	2
FIELD	546:52	546:52	10	2
LEAF_NODE	546:52	546:52	11	2
LEAF_NODE	546:53	546:53	9	)
EQ_OPERATOR	546:55	546:55	8	==
LEAF_NODE	546:55	546:55	9	==
FIELD	546:58	546:58	8	0
LEAF_NODE	546:58	546:58	9	0
LEAF_NODE	546:59	546:59	8	)
LEAF_NODE	546:60	546:60	4	)
STATEMENTS	546:62	551:1	4	
LEAF_NODE	546:62	546:62	5	{
STATEMENTS	547:2	550:2	5	
EXPR_STATEMENT	547:2	549:18	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Row pixels integer overflow (rowpixels %u)" , rowpixels ) ;
EXPR	547:2	547:2	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Row pixels integer overflow (rowpixels %u)" , rowpixels )
FUNCTION_CALL	547:2	549:17	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Row pixels integer overflow (rowpixels %u)" , rowpixels )
CALLEE	547:2	547:2	9	TIFFErrorExt
LEAF_NODE	547:2	547:2	10	TIFFErrorExt
LEAF_NODE	547:14	547:14	9	(
ARGUMENT	547:15	547:15	9	tif -> tif_clientdata
FIELD	547:15	547:20	10	tif -> tif_clientdata
LEAF_NODE	547:15	547:15	11	tif
LEAF_NODE	547:18	547:18	11	->
LEAF_NODE	547:20	547:20	11	tif_clientdata
LEAF_NODE	547:34	547:34	9	,
ARGUMENT	547:36	547:36	9	tif -> tif_name
FIELD	547:36	547:41	10	tif -> tif_name
LEAF_NODE	547:36	547:36	11	tif
LEAF_NODE	547:39	547:39	11	->
LEAF_NODE	547:41	547:41	11	tif_name
LEAF_NODE	547:49	547:49	9	,
ARGUMENT	548:8	548:8	9	"Row pixels integer overflow (rowpixels %u)"
FIELD	548:8	548:8	10	"Row pixels integer overflow (rowpixels %u)"
LEAF_NODE	548:8	548:8	11	"Row pixels integer overflow (rowpixels %u)"
LEAF_NODE	548:52	548:52	9	,
ARGUMENT	549:8	549:8	9	rowpixels
FIELD	549:8	549:8	10	rowpixels
LEAF_NODE	549:8	549:8	11	rowpixels
LEAF_NODE	549:17	549:17	9	)
LEAF_NODE	549:18	549:18	7	;
JUMP_STATEMENT	550:2	550:12	6	return ( 0 ) ;
KEYWORD	550:2	550:2	7	return
LEAF_NODE	550:2	550:2	8	return
DESTINATION	550:9	550:9	7	( 0 )
EXPR	550:9	550:11	8	( 0 )
LEAF_NODE	550:9	550:9	9	(
FIELD	550:10	550:10	9	0
LEAF_NODE	550:10	550:10	10	0
LEAF_NODE	550:11	550:11	9	)
LEAF_NODE	550:12	550:12	7	;
LEAF_NODE	551:1	551:1	5	}
EXPR_STATEMENT	552:1	555:39	3	dsp -> runs = ( uint32 * ) _TIFFCheckMalloc ( tif , TIFFSafeMultiply ( uint32 , nruns , 2 ) , sizeof ( uint32 ) , "for Group 3/4 run arrays" ) ;
EXPR	552:1	552:1	4	dsp -> runs = ( uint32 * ) _TIFFCheckMalloc ( tif , TIFFSafeMultiply ( uint32 , nruns , 2 ) , sizeof ( uint32 ) , "for Group 3/4 run arrays" )
ASSIGN	552:1	552:13	5	dsp -> runs = ( uint32 * ) _TIFFCheckMalloc ( tif , TIFFSafeMultiply ( uint32 , nruns , 2 ) , sizeof ( uint32 ) , "for Group 3/4 run arrays" )
LVAL	552:1	552:1	6	dsp -> runs
FIELD	552:1	552:6	7	dsp -> runs
LEAF_NODE	552:1	552:1	8	dsp
LEAF_NODE	552:4	552:4	8	->
LEAF_NODE	552:6	552:6	8	runs
ASSIGN_OP	552:11	552:11	6	=
LEAF_NODE	552:11	552:11	7	=
RVAL	552:13	552:23	6	( uint32 * ) _TIFFCheckMalloc ( tif , TIFFSafeMultiply ( uint32 , nruns , 2 ) , sizeof ( uint32 ) , "for Group 3/4 run arrays" )
LEAF_NODE	552:13	552:13	7	(
TYPE_NAME	552:14	552:14	7	uint32
LEAF_NODE	552:14	552:14	8	uint32
LEAF_NODE	552:20	552:20	7	*
LEAF_NODE	552:21	552:21	7	)
FUNCTION_CALL	552:23	555:38	7	_TIFFCheckMalloc ( tif , TIFFSafeMultiply ( uint32 , nruns , 2 ) , sizeof ( uint32 ) , "for Group 3/4 run arrays" )
CALLEE	552:23	552:23	8	_TIFFCheckMalloc
LEAF_NODE	552:23	552:23	9	_TIFFCheckMalloc
LEAF_NODE	552:39	552:39	8	(
ARGUMENT	552:40	552:40	8	tif
FIELD	552:40	552:40	9	tif
LEAF_NODE	552:40	552:40	10	tif
LEAF_NODE	552:43	552:43	8	,
ARGUMENT	553:12	553:12	8	TIFFSafeMultiply ( uint32 , nruns , 2 )
FUNCTION_CALL	553:12	553:43	9	TIFFSafeMultiply ( uint32 , nruns , 2 )
CALLEE	553:12	553:12	10	TIFFSafeMultiply
LEAF_NODE	553:12	553:12	11	TIFFSafeMultiply
LEAF_NODE	553:28	553:28	10	(
ARGUMENT	553:29	553:29	10	uint32
FIELD	553:29	553:29	11	uint32
LEAF_NODE	553:29	553:29	12	uint32
LEAF_NODE	553:35	553:35	10	,
ARGUMENT	553:36	553:36	10	nruns
FIELD	553:36	553:36	11	nruns
LEAF_NODE	553:36	553:36	12	nruns
LEAF_NODE	553:41	553:41	10	,
ARGUMENT	553:42	553:42	10	2
FIELD	553:42	553:42	11	2
LEAF_NODE	553:42	553:42	12	2
LEAF_NODE	553:43	553:43	10	)
LEAF_NODE	553:44	553:44	8	,
ARGUMENT	554:12	554:12	8	sizeof ( uint32 )
FUNCTION_CALL	554:12	554:26	9	sizeof ( uint32 )
CALLEE	554:12	554:12	10	sizeof
LEAF_NODE	554:12	554:12	11	sizeof
LEAF_NODE	554:19	554:19	10	(
ARGUMENT	554:20	554:20	10	uint32
FIELD	554:20	554:20	11	uint32
LEAF_NODE	554:20	554:20	12	uint32
LEAF_NODE	554:26	554:26	10	)
LEAF_NODE	554:27	554:27	8	,
ARGUMENT	555:12	555:12	8	"for Group 3/4 run arrays"
FIELD	555:12	555:12	9	"for Group 3/4 run arrays"
LEAF_NODE	555:12	555:12	10	"for Group 3/4 run arrays"
LEAF_NODE	555:38	555:38	8	)
LEAF_NODE	555:39	555:39	4	;
SELECTION	556:1	557:2	3	
KEYWORD	556:1	556:1	4	if
LEAF_NODE	556:1	556:1	5	if
LEAF_NODE	556:4	556:4	4	(
CONDITION	556:5	556:5	4	dsp -> runs == NULL
EXPR	556:5	556:18	5	dsp -> runs == NULL
FIELD	556:5	556:10	6	dsp -> runs
LEAF_NODE	556:5	556:5	7	dsp
LEAF_NODE	556:8	556:8	7	->
LEAF_NODE	556:10	556:10	7	runs
EQ_OPERATOR	556:15	556:15	6	==
LEAF_NODE	556:15	556:15	7	==
FIELD	556:18	556:18	6	NULL
LEAF_NODE	556:18	556:18	7	NULL
LEAF_NODE	556:22	556:22	4	)
STATEMENTS	557:2	557:2	4	
JUMP_STATEMENT	557:2	557:12	5	return ( 0 ) ;
KEYWORD	557:2	557:2	6	return
LEAF_NODE	557:2	557:2	7	return
DESTINATION	557:9	557:9	6	( 0 )
EXPR	557:9	557:11	7	( 0 )
LEAF_NODE	557:9	557:9	8	(
FIELD	557:10	557:10	8	0
LEAF_NODE	557:10	557:10	9	0
LEAF_NODE	557:11	557:11	8	)
LEAF_NODE	557:12	557:12	6	;
EXPR_STATEMENT	558:1	558:71	3	memset ( dsp -> runs , 0 , TIFFSafeMultiply ( uint32 , nruns , 2 ) * sizeof ( uint32 ) ) ;
EXPR	558:1	558:1	4	memset ( dsp -> runs , 0 , TIFFSafeMultiply ( uint32 , nruns , 2 ) * sizeof ( uint32 ) )
FUNCTION_CALL	558:1	558:70	5	memset ( dsp -> runs , 0 , TIFFSafeMultiply ( uint32 , nruns , 2 ) * sizeof ( uint32 ) )
CALLEE	558:1	558:1	6	memset
LEAF_NODE	558:1	558:1	7	memset
LEAF_NODE	558:7	558:7	6	(
ARGUMENT	558:9	558:9	6	dsp -> runs
FIELD	558:9	558:14	7	dsp -> runs
LEAF_NODE	558:9	558:9	8	dsp
LEAF_NODE	558:12	558:12	8	->
LEAF_NODE	558:14	558:14	8	runs
LEAF_NODE	558:18	558:18	6	,
ARGUMENT	558:20	558:20	6	0
FIELD	558:20	558:20	7	0
LEAF_NODE	558:20	558:20	8	0
LEAF_NODE	558:21	558:21	6	,
ARGUMENT	558:23	558:56	6	TIFFSafeMultiply ( uint32 , nruns , 2 ) * sizeof ( uint32 )
FUNCTION_CALL	558:23	558:54	7	TIFFSafeMultiply ( uint32 , nruns , 2 )
CALLEE	558:23	558:23	8	TIFFSafeMultiply
LEAF_NODE	558:23	558:23	9	TIFFSafeMultiply
LEAF_NODE	558:39	558:39	8	(
ARGUMENT	558:40	558:40	8	uint32
FIELD	558:40	558:40	9	uint32
LEAF_NODE	558:40	558:40	10	uint32
LEAF_NODE	558:46	558:46	8	,
ARGUMENT	558:47	558:47	8	nruns
FIELD	558:47	558:47	9	nruns
LEAF_NODE	558:47	558:47	10	nruns
LEAF_NODE	558:52	558:52	8	,
ARGUMENT	558:53	558:53	8	2
FIELD	558:53	558:53	9	2
LEAF_NODE	558:53	558:53	10	2
LEAF_NODE	558:54	558:54	8	)
LEAF_NODE	558:55	558:55	7	*
FUNCTION_CALL	558:56	558:69	7	sizeof ( uint32 )
CALLEE	558:56	558:56	8	sizeof
LEAF_NODE	558:56	558:56	9	sizeof
LEAF_NODE	558:62	558:62	8	(
ARGUMENT	558:63	558:63	8	uint32
FIELD	558:63	558:63	9	uint32
LEAF_NODE	558:63	558:63	10	uint32
LEAF_NODE	558:69	558:69	8	)
LEAF_NODE	558:70	558:70	6	)
LEAF_NODE	558:71	558:71	4	;
EXPR_STATEMENT	559:1	559:25	3	dsp -> curruns = dsp -> runs ;
EXPR	559:1	559:1	4	dsp -> curruns = dsp -> runs
ASSIGN	559:1	559:16	5	dsp -> curruns = dsp -> runs
LVAL	559:1	559:1	6	dsp -> curruns
FIELD	559:1	559:6	7	dsp -> curruns
LEAF_NODE	559:1	559:1	8	dsp
LEAF_NODE	559:4	559:4	8	->
LEAF_NODE	559:6	559:6	8	curruns
ASSIGN_OP	559:14	559:14	6	=
LEAF_NODE	559:14	559:14	7	=
RVAL	559:16	559:16	6	dsp -> runs
FIELD	559:16	559:21	7	dsp -> runs
LEAF_NODE	559:16	559:16	8	dsp
LEAF_NODE	559:19	559:19	8	->
LEAF_NODE	559:21	559:21	8	runs
LEAF_NODE	559:25	559:25	4	;
SELECTION	560:1	561:2	3	
KEYWORD	560:1	560:1	4	if
LEAF_NODE	560:1	560:1	5	if
LEAF_NODE	560:4	560:4	4	(
CONDITION	560:5	560:5	4	needsRefLine
EXPR	560:5	560:5	5	needsRefLine
FIELD	560:5	560:5	6	needsRefLine
LEAF_NODE	560:5	560:5	7	needsRefLine
LEAF_NODE	560:17	560:17	4	)
STATEMENTS	561:2	561:2	4	
EXPR_STATEMENT	561:2	561:34	5	dsp -> refruns = dsp -> runs + nruns ;
EXPR	561:2	561:2	6	dsp -> refruns = dsp -> runs + nruns
ASSIGN	561:2	561:17	7	dsp -> refruns = dsp -> runs + nruns
LVAL	561:2	561:2	8	dsp -> refruns
FIELD	561:2	561:7	9	dsp -> refruns
LEAF_NODE	561:2	561:2	10	dsp
LEAF_NODE	561:5	561:5	10	->
LEAF_NODE	561:7	561:7	10	refruns
ASSIGN_OP	561:15	561:15	8	=
LEAF_NODE	561:15	561:15	9	=
RVAL	561:17	561:29	8	dsp -> runs + nruns
FIELD	561:17	561:22	9	dsp -> runs
LEAF_NODE	561:17	561:17	10	dsp
LEAF_NODE	561:20	561:20	10	->
LEAF_NODE	561:22	561:22	10	runs
LEAF_NODE	561:27	561:27	9	+
FIELD	561:29	561:29	9	nruns
LEAF_NODE	561:29	561:29	10	nruns
LEAF_NODE	561:34	561:34	6	;
SELECTION	562:1	563:2	3	
KEYWORD	562:1	562:1	4	else
LEAF_NODE	562:1	562:1	5	else
STATEMENTS	563:2	563:2	4	
EXPR_STATEMENT	563:2	563:21	5	dsp -> refruns = NULL ;
EXPR	563:2	563:2	6	dsp -> refruns = NULL
ASSIGN	563:2	563:17	7	dsp -> refruns = NULL
LVAL	563:2	563:2	8	dsp -> refruns
FIELD	563:2	563:7	9	dsp -> refruns
LEAF_NODE	563:2	563:2	10	dsp
LEAF_NODE	563:5	563:5	10	->
LEAF_NODE	563:7	563:7	10	refruns
ASSIGN_OP	563:15	563:15	8	=
LEAF_NODE	563:15	563:15	9	=
RVAL	563:17	563:17	8	NULL
FIELD	563:17	563:17	9	NULL
LEAF_NODE	563:17	563:17	10	NULL
LEAF_NODE	563:21	563:21	6	;
SELECTION	564:1	565:27	3	
KEYWORD	564:1	564:1	4	if
LEAF_NODE	564:1	564:1	5	if
LEAF_NODE	564:4	564:4	4	(
CONDITION	564:5	564:5	4	td -> td_compression == COMPRESSION_CCITTFAX3 && is2DEncoding ( dsp )
EXPR	564:5	564:5	5	td -> td_compression == COMPRESSION_CCITTFAX3 && is2DEncoding ( dsp )
AND	564:5	565:8	6	td -> td_compression == COMPRESSION_CCITTFAX3 && is2DEncoding ( dsp )
EXPR	564:5	564:27	7	td -> td_compression == COMPRESSION_CCITTFAX3
FIELD	564:5	564:9	8	td -> td_compression
LEAF_NODE	564:5	564:5	9	td
LEAF_NODE	564:7	564:7	9	->
LEAF_NODE	564:9	564:9	9	td_compression
EQ_OPERATOR	564:24	564:24	8	==
LEAF_NODE	564:24	564:24	9	==
FIELD	564:27	564:27	8	COMPRESSION_CCITTFAX3
LEAF_NODE	564:27	564:27	9	COMPRESSION_CCITTFAX3
LEAF_NODE	565:5	565:5	7	&&
EXPR	565:8	565:8	7	is2DEncoding ( dsp )
FUNCTION_CALL	565:8	565:24	8	is2DEncoding ( dsp )
CALLEE	565:8	565:8	9	is2DEncoding
LEAF_NODE	565:8	565:8	10	is2DEncoding
LEAF_NODE	565:20	565:20	9	(
ARGUMENT	565:21	565:21	9	dsp
FIELD	565:21	565:21	10	dsp
LEAF_NODE	565:21	565:21	11	dsp
LEAF_NODE	565:24	565:24	9	)
LEAF_NODE	565:25	565:25	4	)
STATEMENTS	565:27	569:1	4	
LEAF_NODE	565:27	565:27	5	{
STATEMENTS	566:2	568:2	5	
EXPR_STATEMENT	566:2	566:35	6	tif -> tif_decoderow = Fax3Decode2D ;
EXPR	566:2	566:2	7	tif -> tif_decoderow = Fax3Decode2D
ASSIGN	566:2	566:23	8	tif -> tif_decoderow = Fax3Decode2D
LVAL	566:2	566:2	9	tif -> tif_decoderow
FIELD	566:2	566:7	10	tif -> tif_decoderow
LEAF_NODE	566:2	566:2	11	tif
LEAF_NODE	566:5	566:5	11	->
LEAF_NODE	566:7	566:7	11	tif_decoderow
ASSIGN_OP	566:21	566:21	9	=
LEAF_NODE	566:21	566:21	10	=
RVAL	566:23	566:23	9	Fax3Decode2D
FIELD	566:23	566:23	10	Fax3Decode2D
LEAF_NODE	566:23	566:23	11	Fax3Decode2D
LEAF_NODE	566:35	566:35	7	;
EXPR_STATEMENT	567:2	567:37	6	tif -> tif_decodestrip = Fax3Decode2D ;
EXPR	567:2	567:2	7	tif -> tif_decodestrip = Fax3Decode2D
ASSIGN	567:2	567:25	8	tif -> tif_decodestrip = Fax3Decode2D
LVAL	567:2	567:2	9	tif -> tif_decodestrip
FIELD	567:2	567:7	10	tif -> tif_decodestrip
LEAF_NODE	567:2	567:2	11	tif
LEAF_NODE	567:5	567:5	11	->
LEAF_NODE	567:7	567:7	11	tif_decodestrip
ASSIGN_OP	567:23	567:23	9	=
LEAF_NODE	567:23	567:23	10	=
RVAL	567:25	567:25	9	Fax3Decode2D
FIELD	567:25	567:25	10	Fax3Decode2D
LEAF_NODE	567:25	567:25	11	Fax3Decode2D
LEAF_NODE	567:37	567:37	7	;
EXPR_STATEMENT	568:2	568:36	6	tif -> tif_decodetile = Fax3Decode2D ;
EXPR	568:2	568:2	7	tif -> tif_decodetile = Fax3Decode2D
ASSIGN	568:2	568:24	8	tif -> tif_decodetile = Fax3Decode2D
LVAL	568:2	568:2	9	tif -> tif_decodetile
FIELD	568:2	568:7	10	tif -> tif_decodetile
LEAF_NODE	568:2	568:2	11	tif
LEAF_NODE	568:5	568:5	11	->
LEAF_NODE	568:7	568:7	11	tif_decodetile
ASSIGN_OP	568:22	568:22	9	=
LEAF_NODE	568:22	568:22	10	=
RVAL	568:24	568:24	9	Fax3Decode2D
FIELD	568:24	568:24	10	Fax3Decode2D
LEAF_NODE	568:24	568:24	11	Fax3Decode2D
LEAF_NODE	568:36	568:36	7	;
LEAF_NODE	569:1	569:1	5	}
SELECTION	571:1	571:19	3	
KEYWORD	571:1	571:1	4	if
LEAF_NODE	571:1	571:1	5	if
LEAF_NODE	571:4	571:4	4	(
CONDITION	571:5	571:5	4	needsRefLine
EXPR	571:5	571:5	5	needsRefLine
FIELD	571:5	571:5	6	needsRefLine
LEAF_NODE	571:5	571:5	7	needsRefLine
LEAF_NODE	571:17	571:17	4	)
STATEMENTS	571:19	586:1	4	
LEAF_NODE	571:19	571:19	5	{
STATEMENTS	572:2	581:2	5	
SIMPLE_DECL	572:2	572:41	6	Fax3CodecState * esp ; esp = EncoderState ( tif ) ;
VAR_DECL	572:2	572:18	7	Fax3CodecState * esp ; esp = EncoderState ( tif )
TYPE	572:2	572:16	8	Fax3CodecState *
TYPE_NAME	572:2	572:2	9	Fax3CodecState
LEAF_NODE	572:2	572:2	10	Fax3CodecState
POINTER	572:16	572:16	9	*
LEAF_NODE	572:16	572:16	10	*
NAME	572:18	572:18	8	esp
LEAF_NODE	572:18	572:18	9	esp
LEAF_NODE	0:0	0:0	8	;
INIT	572:18	572:18	8	esp = EncoderState ( tif )
ASSIGN	572:18	572:24	9	esp = EncoderState ( tif )
LVAL	572:18	572:18	10	esp
NAME	572:18	572:18	11	esp
LEAF_NODE	572:18	572:18	12	esp
ASSIGN_OP	572:22	572:22	10	=
LEAF_NODE	572:22	572:22	11	=
RVAL	572:24	572:24	10	EncoderState ( tif )
FUNCTION_CALL	572:24	572:40	11	EncoderState ( tif )
CALLEE	572:24	572:24	12	EncoderState
LEAF_NODE	572:24	572:24	13	EncoderState
LEAF_NODE	572:36	572:36	12	(
ARGUMENT	572:37	572:37	12	tif
FIELD	572:37	572:37	13	tif
LEAF_NODE	572:37	572:37	14	tif
LEAF_NODE	572:40	572:40	12	)
LEAF_NODE	572:41	572:41	7	;
EXPR_STATEMENT	580:2	580:55	6	esp -> refline = ( unsigned char * ) _TIFFmalloc ( rowbytes ) ;
EXPR	580:2	580:2	7	esp -> refline = ( unsigned char * ) _TIFFmalloc ( rowbytes )
ASSIGN	580:2	580:17	8	esp -> refline = ( unsigned char * ) _TIFFmalloc ( rowbytes )
LVAL	580:2	580:2	9	esp -> refline
FIELD	580:2	580:7	10	esp -> refline
LEAF_NODE	580:2	580:2	11	esp
LEAF_NODE	580:5	580:5	11	->
LEAF_NODE	580:7	580:7	11	refline
ASSIGN_OP	580:15	580:15	9	=
LEAF_NODE	580:15	580:15	10	=
RVAL	580:17	580:34	9	( unsigned char * ) _TIFFmalloc ( rowbytes )
LEAF_NODE	580:17	580:17	10	(
TYPE_NAME	580:18	580:27	10	unsigned char
LEAF_NODE	580:18	580:18	11	unsigned
LEAF_NODE	580:27	580:27	11	char
LEAF_NODE	580:31	580:31	10	*
LEAF_NODE	580:32	580:32	10	)
FUNCTION_CALL	580:34	580:54	10	_TIFFmalloc ( rowbytes )
CALLEE	580:34	580:34	11	_TIFFmalloc
LEAF_NODE	580:34	580:34	12	_TIFFmalloc
LEAF_NODE	580:45	580:45	11	(
ARGUMENT	580:46	580:46	11	rowbytes
FIELD	580:46	580:46	12	rowbytes
LEAF_NODE	580:46	580:46	13	rowbytes
LEAF_NODE	580:54	580:54	11	)
LEAF_NODE	580:55	580:55	7	;
SELECTION	581:2	581:28	6	
KEYWORD	581:2	581:2	7	if
LEAF_NODE	581:2	581:2	8	if
LEAF_NODE	581:5	581:5	7	(
CONDITION	581:6	581:6	7	esp -> refline == NULL
EXPR	581:6	581:22	8	esp -> refline == NULL
FIELD	581:6	581:11	9	esp -> refline
LEAF_NODE	581:6	581:6	10	esp
LEAF_NODE	581:9	581:9	10	->
LEAF_NODE	581:11	581:11	10	refline
EQ_OPERATOR	581:19	581:19	9	==
LEAF_NODE	581:19	581:19	10	==
FIELD	581:22	581:22	9	NULL
LEAF_NODE	581:22	581:22	10	NULL
LEAF_NODE	581:26	581:26	7	)
STATEMENTS	581:28	585:2	7	
LEAF_NODE	581:28	581:28	8	{
STATEMENTS	582:3	584:3	8	
EXPR_STATEMENT	582:3	583:47	9	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for Group 3/4 reference line" ) ;
EXPR	582:3	582:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for Group 3/4 reference line" )
FUNCTION_CALL	582:3	583:46	11	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for Group 3/4 reference line" )
CALLEE	582:3	582:3	12	TIFFErrorExt
LEAF_NODE	582:3	582:3	13	TIFFErrorExt
LEAF_NODE	582:15	582:15	12	(
ARGUMENT	582:16	582:16	12	tif -> tif_clientdata
FIELD	582:16	582:21	13	tif -> tif_clientdata
LEAF_NODE	582:16	582:16	14	tif
LEAF_NODE	582:19	582:19	14	->
LEAF_NODE	582:21	582:21	14	tif_clientdata
LEAF_NODE	582:35	582:35	12	,
ARGUMENT	582:37	582:37	12	module
FIELD	582:37	582:37	13	module
LEAF_NODE	582:37	582:37	14	module
LEAF_NODE	582:43	582:43	12	,
ARGUMENT	583:7	583:7	12	"No space for Group 3/4 reference line"
FIELD	583:7	583:7	13	"No space for Group 3/4 reference line"
LEAF_NODE	583:7	583:7	14	"No space for Group 3/4 reference line"
LEAF_NODE	583:46	583:46	12	)
LEAF_NODE	583:47	583:47	10	;
JUMP_STATEMENT	584:3	584:13	9	return ( 0 ) ;
KEYWORD	584:3	584:3	10	return
LEAF_NODE	584:3	584:3	11	return
DESTINATION	584:10	584:10	10	( 0 )
EXPR	584:10	584:12	11	( 0 )
LEAF_NODE	584:10	584:10	12	(
FIELD	584:11	584:11	12	0
LEAF_NODE	584:11	584:11	13	0
LEAF_NODE	584:12	584:12	12	)
LEAF_NODE	584:13	584:13	10	;
LEAF_NODE	585:2	585:2	8	}
LEAF_NODE	586:1	586:1	5	}
SELECTION	586:3	587:2	3	
KEYWORD	586:3	586:3	4	else
LEAF_NODE	586:3	586:3	5	else
STATEMENTS	587:2	587:2	4	
EXPR_STATEMENT	587:2	587:35	5	EncoderState ( tif ) -> refline = NULL ;
EXPR	587:2	587:2	6	EncoderState ( tif ) -> refline = NULL
ASSIGN	587:2	587:31	7	EncoderState ( tif ) -> refline = NULL
LVAL	587:2	587:21	8	EncoderState ( tif ) -> refline
FUNCTION_CALL	587:2	587:18	9	EncoderState ( tif )
CALLEE	587:2	587:2	10	EncoderState
LEAF_NODE	587:2	587:2	11	EncoderState
LEAF_NODE	587:14	587:14	10	(
ARGUMENT	587:15	587:15	10	tif
FIELD	587:15	587:15	11	tif
LEAF_NODE	587:15	587:15	12	tif
LEAF_NODE	587:18	587:18	10	)
LEAF_NODE	587:19	587:19	9	->
LEAF_NODE	587:21	587:21	9	refline
ASSIGN_OP	587:29	587:29	8	=
LEAF_NODE	587:29	587:29	9	=
RVAL	587:31	587:31	8	NULL
FIELD	587:31	587:31	9	NULL
LEAF_NODE	587:31	587:31	10	NULL
LEAF_NODE	587:35	587:35	6	;
JUMP_STATEMENT	589:1	589:11	3	return ( 1 ) ;
KEYWORD	589:1	589:1	4	return
LEAF_NODE	589:1	589:1	5	return
DESTINATION	589:8	589:8	4	( 1 )
EXPR	589:8	589:10	5	( 1 )
LEAF_NODE	589:8	589:8	6	(
FIELD	589:9	589:9	6	1
LEAF_NODE	589:9	589:9	7	1
LEAF_NODE	589:10	589:10	6	)
LEAF_NODE	589:11	589:11	4	;
LEAF_NODE	590:0	590:0	2	}
FUNCTION_DEF	630:0	641:0	1	
RETURN_TYPE	630:0	630:7	2	static void
LEAF_NODE	630:0	630:0	3	static
TYPE_NAME	630:7	630:7	3	void
LEAF_NODE	630:7	630:7	4	void
FUNCTION_NAME	631:0	631:0	2	Fax3PutBits
LEAF_NODE	631:0	631:0	3	Fax3PutBits
PARAMETER_LIST	631:11	631:61	2	( TIFF * tif , unsigned int bits , unsigned int length )
LEAF_NODE	631:11	631:11	3	(
PARAMETER_DECL	631:12	631:18	3	TIFF * tif
TYPE	631:12	631:16	4	TIFF *
TYPE_NAME	631:12	631:12	5	TIFF
LEAF_NODE	631:12	631:12	6	TIFF
POINTER	631:16	631:16	5	*
LEAF_NODE	631:16	631:16	6	*
NAME	631:18	631:18	4	tif
LEAF_NODE	631:18	631:18	5	tif
LEAF_NODE	631:21	631:21	3	,
PARAMETER_DECL	631:23	631:36	3	unsigned int bits
TYPE	631:23	631:23	4	unsigned int
TYPE_NAME	631:23	631:32	5	unsigned int
LEAF_NODE	631:23	631:23	6	unsigned
LEAF_NODE	631:32	631:32	6	int
NAME	631:36	631:36	4	bits
LEAF_NODE	631:36	631:36	5	bits
LEAF_NODE	631:40	631:40	3	,
PARAMETER_DECL	631:42	631:55	3	unsigned int length
TYPE	631:42	631:42	4	unsigned int
TYPE_NAME	631:42	631:51	5	unsigned int
LEAF_NODE	631:42	631:42	6	unsigned
LEAF_NODE	631:51	631:51	6	int
NAME	631:55	631:55	4	length
LEAF_NODE	631:55	631:55	5	length
LEAF_NODE	631:61	631:61	3	)
LEAF_NODE	632:0	632:0	2	{
STATEMENTS	633:1	640:1	2	
SIMPLE_DECL	633:1	633:39	3	Fax3CodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	633:1	633:17	4	Fax3CodecState * sp ; sp = EncoderState ( tif )
TYPE	633:1	633:15	5	Fax3CodecState *
TYPE_NAME	633:1	633:1	6	Fax3CodecState
LEAF_NODE	633:1	633:1	7	Fax3CodecState
POINTER	633:15	633:15	6	*
LEAF_NODE	633:15	633:15	7	*
NAME	633:17	633:17	5	sp
LEAF_NODE	633:17	633:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	633:17	633:17	5	sp = EncoderState ( tif )
ASSIGN	633:17	633:22	6	sp = EncoderState ( tif )
LVAL	633:17	633:17	7	sp
NAME	633:17	633:17	8	sp
LEAF_NODE	633:17	633:17	9	sp
ASSIGN_OP	633:20	633:20	7	=
LEAF_NODE	633:20	633:20	8	=
RVAL	633:22	633:22	7	EncoderState ( tif )
FUNCTION_CALL	633:22	633:38	8	EncoderState ( tif )
CALLEE	633:22	633:22	9	EncoderState
LEAF_NODE	633:22	633:22	10	EncoderState
LEAF_NODE	633:34	633:34	9	(
ARGUMENT	633:35	633:35	9	tif
FIELD	633:35	633:35	10	tif
LEAF_NODE	633:35	633:35	11	tif
LEAF_NODE	633:38	633:38	9	)
LEAF_NODE	633:39	633:39	4	;
SIMPLE_DECL	634:1	634:27	3	unsigned int bit ; bit = sp -> bit ;
VAR_DECL	634:1	634:14	4	unsigned int bit ; bit = sp -> bit
TYPE	634:1	634:1	5	unsigned int
TYPE_NAME	634:1	634:10	6	unsigned int
LEAF_NODE	634:1	634:1	7	unsigned
LEAF_NODE	634:10	634:10	7	int
NAME	634:14	634:14	5	bit
LEAF_NODE	634:14	634:14	6	bit
LEAF_NODE	0:0	0:0	5	;
INIT	634:14	634:14	5	bit = sp -> bit
ASSIGN	634:14	634:20	6	bit = sp -> bit
LVAL	634:14	634:14	7	bit
NAME	634:14	634:14	8	bit
LEAF_NODE	634:14	634:14	9	bit
ASSIGN_OP	634:18	634:18	7	=
LEAF_NODE	634:18	634:18	8	=
RVAL	634:20	634:20	7	sp -> bit
FIELD	634:20	634:24	8	sp -> bit
LEAF_NODE	634:20	634:20	9	sp
LEAF_NODE	634:22	634:22	9	->
LEAF_NODE	634:24	634:24	9	bit
LEAF_NODE	634:27	634:27	4	;
SIMPLE_DECL	635:1	635:20	3	int data ; data = sp -> data ;
VAR_DECL	635:1	635:5	4	int data ; data = sp -> data
TYPE	635:1	635:1	5	int
TYPE_NAME	635:1	635:1	6	int
LEAF_NODE	635:1	635:1	7	int
NAME	635:5	635:5	5	data
LEAF_NODE	635:5	635:5	6	data
LEAF_NODE	0:0	0:0	5	;
INIT	635:5	635:5	5	data = sp -> data
ASSIGN	635:5	635:12	6	data = sp -> data
LVAL	635:5	635:5	7	data
NAME	635:5	635:5	8	data
LEAF_NODE	635:5	635:5	9	data
ASSIGN_OP	635:10	635:10	7	=
LEAF_NODE	635:10	635:10	8	=
RVAL	635:12	635:12	7	sp -> data
FIELD	635:12	635:16	8	sp -> data
LEAF_NODE	635:12	635:12	9	sp
LEAF_NODE	635:14	635:14	9	->
LEAF_NODE	635:16	635:16	9	data
LEAF_NODE	635:20	635:20	4	;
EXPR_STATEMENT	637:1	637:28	3	_PutBits ( tif , bits , length ) ;
EXPR	637:1	637:1	4	_PutBits ( tif , bits , length )
FUNCTION_CALL	637:1	637:27	5	_PutBits ( tif , bits , length )
CALLEE	637:1	637:1	6	_PutBits
LEAF_NODE	637:1	637:1	7	_PutBits
LEAF_NODE	637:9	637:9	6	(
ARGUMENT	637:10	637:10	6	tif
FIELD	637:10	637:10	7	tif
LEAF_NODE	637:10	637:10	8	tif
LEAF_NODE	637:13	637:13	6	,
ARGUMENT	637:15	637:15	6	bits
FIELD	637:15	637:15	7	bits
LEAF_NODE	637:15	637:15	8	bits
LEAF_NODE	637:19	637:19	6	,
ARGUMENT	637:21	637:21	6	length
FIELD	637:21	637:21	7	length
LEAF_NODE	637:21	637:21	8	length
LEAF_NODE	637:27	637:27	6	)
LEAF_NODE	637:28	637:28	4	;
EXPR_STATEMENT	639:1	639:16	3	sp -> data = data ;
EXPR	639:1	639:1	4	sp -> data = data
ASSIGN	639:1	639:12	5	sp -> data = data
LVAL	639:1	639:1	6	sp -> data
FIELD	639:1	639:5	7	sp -> data
LEAF_NODE	639:1	639:1	8	sp
LEAF_NODE	639:3	639:3	8	->
LEAF_NODE	639:5	639:5	8	data
ASSIGN_OP	639:10	639:10	6	=
LEAF_NODE	639:10	639:10	7	=
RVAL	639:12	639:12	6	data
FIELD	639:12	639:12	7	data
LEAF_NODE	639:12	639:12	8	data
LEAF_NODE	639:16	639:16	4	;
EXPR_STATEMENT	640:1	640:14	3	sp -> bit = bit ;
EXPR	640:1	640:1	4	sp -> bit = bit
ASSIGN	640:1	640:11	5	sp -> bit = bit
LVAL	640:1	640:1	6	sp -> bit
FIELD	640:1	640:5	7	sp -> bit
LEAF_NODE	640:1	640:1	8	sp
LEAF_NODE	640:3	640:3	8	->
LEAF_NODE	640:5	640:5	8	bit
ASSIGN_OP	640:9	640:9	6	=
LEAF_NODE	640:9	640:9	7	=
RVAL	640:11	640:11	6	bit
FIELD	640:11	640:11	7	bit
LEAF_NODE	640:11	640:11	8	bit
LEAF_NODE	640:14	640:14	4	;
LEAF_NODE	641:0	641:0	2	}
FUNCTION_DEF	665:0	703:0	1	
RETURN_TYPE	665:0	665:7	2	static void
LEAF_NODE	665:0	665:0	3	static
TYPE_NAME	665:7	665:7	3	void
LEAF_NODE	665:7	665:7	4	void
FUNCTION_NAME	666:0	666:0	2	putspan
LEAF_NODE	666:0	666:0	3	putspan
PARAMETER_LIST	666:7	666:52	2	( TIFF * tif , int32 span , const tableentry * tab )
LEAF_NODE	666:7	666:7	3	(
PARAMETER_DECL	666:8	666:14	3	TIFF * tif
TYPE	666:8	666:12	4	TIFF *
TYPE_NAME	666:8	666:8	5	TIFF
LEAF_NODE	666:8	666:8	6	TIFF
POINTER	666:12	666:12	5	*
LEAF_NODE	666:12	666:12	6	*
NAME	666:14	666:14	4	tif
LEAF_NODE	666:14	666:14	5	tif
LEAF_NODE	666:17	666:17	3	,
PARAMETER_DECL	666:19	666:25	3	int32 span
TYPE	666:19	666:19	4	int32
TYPE_NAME	666:19	666:19	5	int32
LEAF_NODE	666:19	666:19	6	int32
NAME	666:25	666:25	4	span
LEAF_NODE	666:25	666:25	5	span
LEAF_NODE	666:29	666:29	3	,
PARAMETER_DECL	666:31	666:49	3	const tableentry * tab
TYPE	666:31	666:47	4	const tableentry *
TYPE_NAME	666:31	666:37	5	const tableentry
LEAF_NODE	666:31	666:31	6	const
LEAF_NODE	666:37	666:37	6	tableentry
POINTER	666:47	666:47	5	*
LEAF_NODE	666:47	666:47	6	*
NAME	666:49	666:49	4	tab
LEAF_NODE	666:49	666:49	5	tab
LEAF_NODE	666:52	666:52	3	)
LEAF_NODE	667:0	667:0	2	{
STATEMENTS	668:1	702:1	2	
SIMPLE_DECL	668:1	668:39	3	Fax3CodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	668:1	668:17	4	Fax3CodecState * sp ; sp = EncoderState ( tif )
TYPE	668:1	668:15	5	Fax3CodecState *
TYPE_NAME	668:1	668:1	6	Fax3CodecState
LEAF_NODE	668:1	668:1	7	Fax3CodecState
POINTER	668:15	668:15	6	*
LEAF_NODE	668:15	668:15	7	*
NAME	668:17	668:17	5	sp
LEAF_NODE	668:17	668:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	668:17	668:17	5	sp = EncoderState ( tif )
ASSIGN	668:17	668:22	6	sp = EncoderState ( tif )
LVAL	668:17	668:17	7	sp
NAME	668:17	668:17	8	sp
LEAF_NODE	668:17	668:17	9	sp
ASSIGN_OP	668:20	668:20	7	=
LEAF_NODE	668:20	668:20	8	=
RVAL	668:22	668:22	7	EncoderState ( tif )
FUNCTION_CALL	668:22	668:38	8	EncoderState ( tif )
CALLEE	668:22	668:22	9	EncoderState
LEAF_NODE	668:22	668:22	10	EncoderState
LEAF_NODE	668:34	668:34	9	(
ARGUMENT	668:35	668:35	9	tif
FIELD	668:35	668:35	10	tif
LEAF_NODE	668:35	668:35	11	tif
LEAF_NODE	668:38	668:38	9	)
LEAF_NODE	668:39	668:39	4	;
SIMPLE_DECL	669:1	669:27	3	unsigned int bit ; bit = sp -> bit ;
VAR_DECL	669:1	669:14	4	unsigned int bit ; bit = sp -> bit
TYPE	669:1	669:1	5	unsigned int
TYPE_NAME	669:1	669:10	6	unsigned int
LEAF_NODE	669:1	669:1	7	unsigned
LEAF_NODE	669:10	669:10	7	int
NAME	669:14	669:14	5	bit
LEAF_NODE	669:14	669:14	6	bit
LEAF_NODE	0:0	0:0	5	;
INIT	669:14	669:14	5	bit = sp -> bit
ASSIGN	669:14	669:20	6	bit = sp -> bit
LVAL	669:14	669:14	7	bit
NAME	669:14	669:14	8	bit
LEAF_NODE	669:14	669:14	9	bit
ASSIGN_OP	669:18	669:18	7	=
LEAF_NODE	669:18	669:18	8	=
RVAL	669:20	669:20	7	sp -> bit
FIELD	669:20	669:24	8	sp -> bit
LEAF_NODE	669:20	669:20	9	sp
LEAF_NODE	669:22	669:22	9	->
LEAF_NODE	669:24	669:24	9	bit
LEAF_NODE	669:27	669:27	4	;
SIMPLE_DECL	670:1	670:20	3	int data ; data = sp -> data ;
VAR_DECL	670:1	670:5	4	int data ; data = sp -> data
TYPE	670:1	670:1	5	int
TYPE_NAME	670:1	670:1	6	int
LEAF_NODE	670:1	670:1	7	int
NAME	670:5	670:5	5	data
LEAF_NODE	670:5	670:5	6	data
LEAF_NODE	0:0	0:0	5	;
INIT	670:5	670:5	5	data = sp -> data
ASSIGN	670:5	670:12	6	data = sp -> data
LVAL	670:5	670:5	7	data
NAME	670:5	670:5	8	data
LEAF_NODE	670:5	670:5	9	data
ASSIGN_OP	670:10	670:10	7	=
LEAF_NODE	670:10	670:10	8	=
RVAL	670:12	670:12	7	sp -> data
FIELD	670:12	670:16	8	sp -> data
LEAF_NODE	670:12	670:12	9	sp
LEAF_NODE	670:14	670:14	9	->
LEAF_NODE	670:16	670:16	9	data
LEAF_NODE	670:20	670:20	4	;
SIMPLE_DECL	671:1	671:26	3	unsigned int code , unsigned int length ;
INIT_DECL_LIST	671:1	671:1	4	unsigned int code , unsigned int length
VAR_DECL	671:1	671:14	5	unsigned int code
TYPE	671:1	671:1	6	unsigned int
TYPE_NAME	671:1	671:10	7	unsigned int
LEAF_NODE	671:1	671:1	8	unsigned
LEAF_NODE	671:10	671:10	8	int
NAME	671:14	671:14	6	code
LEAF_NODE	671:14	671:14	7	code
LEAF_NODE	671:18	671:18	5	,
VAR_DECL	671:1	671:20	5	unsigned int length
TYPE	671:1	671:1	6	unsigned int
TYPE_NAME	671:1	671:10	7	unsigned int
LEAF_NODE	671:1	671:1	8	unsigned
LEAF_NODE	671:10	671:10	8	int
NAME	671:20	671:20	6	length
LEAF_NODE	671:20	671:20	7	length
LEAF_NODE	671:26	671:26	4	;
ITERATION	673:1	673:22	3	
KEYWORD	673:1	673:1	4	while
LEAF_NODE	673:1	673:1	5	while
LEAF_NODE	673:7	673:7	4	(
CONDITION	673:8	673:8	4	span >= 2624
EXPR	673:8	673:16	5	span >= 2624
FIELD	673:8	673:8	6	span
LEAF_NODE	673:8	673:8	7	span
REL_OPERATOR	673:13	673:13	6	>=
LEAF_NODE	673:13	673:13	7	>=
FIELD	673:16	673:16	6	2624
LEAF_NODE	673:16	673:16	7	2624
LEAF_NODE	673:20	673:20	4	)
STATEMENTS	673:22	682:1	4	
LEAF_NODE	673:22	673:22	5	{
STATEMENTS	674:2	681:2	5	
SIMPLE_DECL	674:2	674:45	6	const tableentry * te ; te = & tab [ 63 + ( 2560 >> 6 ) ] ;
VAR_DECL	674:2	674:20	7	const tableentry * te ; te = & tab [ 63 + ( 2560 >> 6 ) ]
TYPE	674:2	674:18	8	const tableentry *
TYPE_NAME	674:2	674:8	9	const tableentry
LEAF_NODE	674:2	674:2	10	const
LEAF_NODE	674:8	674:8	10	tableentry
POINTER	674:18	674:18	9	*
LEAF_NODE	674:18	674:18	10	*
NAME	674:20	674:20	8	te
LEAF_NODE	674:20	674:20	9	te
LEAF_NODE	0:0	0:0	8	;
INIT	674:20	674:20	8	te = & tab [ 63 + ( 2560 >> 6 ) ]
ASSIGN	674:20	674:25	9	te = & tab [ 63 + ( 2560 >> 6 ) ]
LVAL	674:20	674:20	10	te
NAME	674:20	674:20	11	te
LEAF_NODE	674:20	674:20	12	te
ASSIGN_OP	674:23	674:23	10	=
LEAF_NODE	674:23	674:23	11	=
RVAL	674:25	674:25	10	& tab [ 63 + ( 2560 >> 6 ) ]
UNARY_EXPR	674:25	674:26	11	& tab [ 63 + ( 2560 >> 6 ) ]
UNARY_OPERATOR	674:25	674:25	12	&
LEAF_NODE	674:25	674:25	13	&
FIELD	674:26	674:44	12	tab [ 63 + ( 2560 >> 6 ) ]
LEAF_NODE	674:26	674:26	13	tab
LEAF_NODE	674:29	674:29	13	[
EXPR	674:30	674:43	13	63 + ( 2560 >> 6 )
FIELD	674:30	674:30	14	63
LEAF_NODE	674:30	674:30	15	63
LEAF_NODE	674:33	674:33	14	+
LEAF_NODE	674:35	674:35	14	(
FIELD	674:36	674:36	14	2560
LEAF_NODE	674:36	674:36	15	2560
LEAF_NODE	674:40	674:40	14	>>
FIELD	674:42	674:42	14	6
LEAF_NODE	674:42	674:42	15	6
LEAF_NODE	674:43	674:43	14	)
LEAF_NODE	674:44	674:44	13	]
LEAF_NODE	674:45	674:45	7	;
EXPR_STATEMENT	675:2	675:17	6	code = te -> code ;
EXPR	675:2	675:2	7	code = te -> code
ASSIGN	675:2	675:9	8	code = te -> code
LVAL	675:2	675:2	9	code
FIELD	675:2	675:2	10	code
LEAF_NODE	675:2	675:2	11	code
ASSIGN_OP	675:7	675:7	9	=
LEAF_NODE	675:7	675:7	10	=
RVAL	675:9	675:9	9	te -> code
FIELD	675:9	675:13	10	te -> code
LEAF_NODE	675:9	675:9	11	te
LEAF_NODE	675:11	675:11	11	->
LEAF_NODE	675:13	675:13	11	code
LEAF_NODE	675:17	675:17	7	;
EXPR_STATEMENT	676:2	676:21	6	length = te -> length ;
EXPR	676:2	676:2	7	length = te -> length
ASSIGN	676:2	676:11	8	length = te -> length
LVAL	676:2	676:2	9	length
FIELD	676:2	676:2	10	length
LEAF_NODE	676:2	676:2	11	length
ASSIGN_OP	676:9	676:9	9	=
LEAF_NODE	676:9	676:9	10	=
RVAL	676:11	676:11	9	te -> length
FIELD	676:11	676:15	10	te -> length
LEAF_NODE	676:11	676:11	11	te
LEAF_NODE	676:13	676:13	11	->
LEAF_NODE	676:15	676:15	11	length
LEAF_NODE	676:21	676:21	7	;
EXPR_STATEMENT	678:2	678:35	6	DEBUG_PRINT ( "MakeUp" , te -> runlen ) ;
EXPR	678:2	678:2	7	DEBUG_PRINT ( "MakeUp" , te -> runlen )
FUNCTION_CALL	678:2	678:34	8	DEBUG_PRINT ( "MakeUp" , te -> runlen )
CALLEE	678:2	678:2	9	DEBUG_PRINT
LEAF_NODE	678:2	678:2	10	DEBUG_PRINT
LEAF_NODE	678:13	678:13	9	(
ARGUMENT	678:14	678:14	9	"MakeUp"
FIELD	678:14	678:14	10	"MakeUp"
LEAF_NODE	678:14	678:14	11	"MakeUp"
LEAF_NODE	678:22	678:22	9	,
ARGUMENT	678:24	678:24	9	te -> runlen
FIELD	678:24	678:28	10	te -> runlen
LEAF_NODE	678:24	678:24	11	te
LEAF_NODE	678:26	678:26	11	->
LEAF_NODE	678:28	678:28	11	runlen
LEAF_NODE	678:34	678:34	9	)
LEAF_NODE	678:35	678:35	7	;
EXPR_STATEMENT	680:2	680:29	6	_PutBits ( tif , code , length ) ;
EXPR	680:2	680:2	7	_PutBits ( tif , code , length )
FUNCTION_CALL	680:2	680:28	8	_PutBits ( tif , code , length )
CALLEE	680:2	680:2	9	_PutBits
LEAF_NODE	680:2	680:2	10	_PutBits
LEAF_NODE	680:10	680:10	9	(
ARGUMENT	680:11	680:11	9	tif
FIELD	680:11	680:11	10	tif
LEAF_NODE	680:11	680:11	11	tif
LEAF_NODE	680:14	680:14	9	,
ARGUMENT	680:16	680:16	9	code
FIELD	680:16	680:16	10	code
LEAF_NODE	680:16	680:16	11	code
LEAF_NODE	680:20	680:20	9	,
ARGUMENT	680:22	680:22	9	length
FIELD	680:22	680:22	10	length
LEAF_NODE	680:22	680:22	11	length
LEAF_NODE	680:28	680:28	9	)
LEAF_NODE	680:29	680:29	7	;
EXPR_STATEMENT	681:2	681:20	6	span -= te -> runlen ;
EXPR	681:2	681:2	7	span -= te -> runlen
ASSIGN	681:2	681:10	8	span -= te -> runlen
LVAL	681:2	681:2	9	span
FIELD	681:2	681:2	10	span
LEAF_NODE	681:2	681:2	11	span
ASSIGN_OP	681:7	681:7	9	-=
LEAF_NODE	681:7	681:7	10	-=
RVAL	681:10	681:10	9	te -> runlen
FIELD	681:10	681:14	10	te -> runlen
LEAF_NODE	681:10	681:10	11	te
LEAF_NODE	681:12	681:12	11	->
LEAF_NODE	681:14	681:14	11	runlen
LEAF_NODE	681:20	681:20	7	;
LEAF_NODE	682:1	682:1	5	}
SELECTION	683:1	683:17	3	
KEYWORD	683:1	683:1	4	if
LEAF_NODE	683:1	683:1	5	if
LEAF_NODE	683:4	683:4	4	(
CONDITION	683:5	683:5	4	span >= 64
EXPR	683:5	683:13	5	span >= 64
FIELD	683:5	683:5	6	span
LEAF_NODE	683:5	683:5	7	span
REL_OPERATOR	683:10	683:10	6	>=
LEAF_NODE	683:10	683:10	7	>=
FIELD	683:13	683:13	6	64
LEAF_NODE	683:13	683:13	7	64
LEAF_NODE	683:15	683:15	4	)
STATEMENTS	683:17	693:1	4	
LEAF_NODE	683:17	683:17	5	{
STATEMENTS	684:2	692:2	5	
SIMPLE_DECL	684:2	684:45	6	const tableentry * te ; te = & tab [ 63 + ( span >> 6 ) ] ;
VAR_DECL	684:2	684:20	7	const tableentry * te ; te = & tab [ 63 + ( span >> 6 ) ]
TYPE	684:2	684:18	8	const tableentry *
TYPE_NAME	684:2	684:8	9	const tableentry
LEAF_NODE	684:2	684:2	10	const
LEAF_NODE	684:8	684:8	10	tableentry
POINTER	684:18	684:18	9	*
LEAF_NODE	684:18	684:18	10	*
NAME	684:20	684:20	8	te
LEAF_NODE	684:20	684:20	9	te
LEAF_NODE	0:0	0:0	8	;
INIT	684:20	684:20	8	te = & tab [ 63 + ( span >> 6 ) ]
ASSIGN	684:20	684:25	9	te = & tab [ 63 + ( span >> 6 ) ]
LVAL	684:20	684:20	10	te
NAME	684:20	684:20	11	te
LEAF_NODE	684:20	684:20	12	te
ASSIGN_OP	684:23	684:23	10	=
LEAF_NODE	684:23	684:23	11	=
RVAL	684:25	684:25	10	& tab [ 63 + ( span >> 6 ) ]
UNARY_EXPR	684:25	684:26	11	& tab [ 63 + ( span >> 6 ) ]
UNARY_OPERATOR	684:25	684:25	12	&
LEAF_NODE	684:25	684:25	13	&
FIELD	684:26	684:44	12	tab [ 63 + ( span >> 6 ) ]
LEAF_NODE	684:26	684:26	13	tab
LEAF_NODE	684:29	684:29	13	[
EXPR	684:30	684:43	13	63 + ( span >> 6 )
FIELD	684:30	684:30	14	63
LEAF_NODE	684:30	684:30	15	63
LEAF_NODE	684:33	684:33	14	+
LEAF_NODE	684:35	684:35	14	(
FIELD	684:36	684:36	14	span
LEAF_NODE	684:36	684:36	15	span
LEAF_NODE	684:40	684:40	14	>>
FIELD	684:42	684:42	14	6
LEAF_NODE	684:42	684:42	15	6
LEAF_NODE	684:43	684:43	14	)
LEAF_NODE	684:44	684:44	13	]
LEAF_NODE	684:45	684:45	7	;
EXPR_STATEMENT	685:2	685:36	6	assert ( te -> runlen == 64 * ( span >> 6 ) ) ;
EXPR	685:2	685:2	7	assert ( te -> runlen == 64 * ( span >> 6 ) )
FUNCTION_CALL	685:2	685:35	8	assert ( te -> runlen == 64 * ( span >> 6 ) )
CALLEE	685:2	685:2	9	assert
LEAF_NODE	685:2	685:2	10	assert
LEAF_NODE	685:8	685:8	9	(
ARGUMENT	685:9	685:34	9	te -> runlen == 64 * ( span >> 6 )
FIELD	685:9	685:13	10	te -> runlen
LEAF_NODE	685:9	685:9	11	te
LEAF_NODE	685:11	685:11	11	->
LEAF_NODE	685:13	685:13	11	runlen
EQ_OPERATOR	685:20	685:20	10	==
LEAF_NODE	685:20	685:20	11	==
FIELD	685:23	685:23	10	64
LEAF_NODE	685:23	685:23	11	64
LEAF_NODE	685:25	685:25	10	*
LEAF_NODE	685:26	685:26	10	(
FIELD	685:27	685:27	10	span
LEAF_NODE	685:27	685:27	11	span
LEAF_NODE	685:31	685:31	10	>>
FIELD	685:33	685:33	10	6
LEAF_NODE	685:33	685:33	11	6
LEAF_NODE	685:34	685:34	10	)
LEAF_NODE	685:35	685:35	9	)
LEAF_NODE	685:36	685:36	7	;
EXPR_STATEMENT	686:2	686:17	6	code = te -> code ;
EXPR	686:2	686:2	7	code = te -> code
ASSIGN	686:2	686:9	8	code = te -> code
LVAL	686:2	686:2	9	code
FIELD	686:2	686:2	10	code
LEAF_NODE	686:2	686:2	11	code
ASSIGN_OP	686:7	686:7	9	=
LEAF_NODE	686:7	686:7	10	=
RVAL	686:9	686:9	9	te -> code
FIELD	686:9	686:13	10	te -> code
LEAF_NODE	686:9	686:9	11	te
LEAF_NODE	686:11	686:11	11	->
LEAF_NODE	686:13	686:13	11	code
LEAF_NODE	686:17	686:17	7	;
EXPR_STATEMENT	687:2	687:21	6	length = te -> length ;
EXPR	687:2	687:2	7	length = te -> length
ASSIGN	687:2	687:11	8	length = te -> length
LVAL	687:2	687:2	9	length
FIELD	687:2	687:2	10	length
LEAF_NODE	687:2	687:2	11	length
ASSIGN_OP	687:9	687:9	9	=
LEAF_NODE	687:9	687:9	10	=
RVAL	687:11	687:11	9	te -> length
FIELD	687:11	687:15	10	te -> length
LEAF_NODE	687:11	687:11	11	te
LEAF_NODE	687:13	687:13	11	->
LEAF_NODE	687:15	687:15	11	length
LEAF_NODE	687:21	687:21	7	;
EXPR_STATEMENT	689:2	689:35	6	DEBUG_PRINT ( "MakeUp" , te -> runlen ) ;
EXPR	689:2	689:2	7	DEBUG_PRINT ( "MakeUp" , te -> runlen )
FUNCTION_CALL	689:2	689:34	8	DEBUG_PRINT ( "MakeUp" , te -> runlen )
CALLEE	689:2	689:2	9	DEBUG_PRINT
LEAF_NODE	689:2	689:2	10	DEBUG_PRINT
LEAF_NODE	689:13	689:13	9	(
ARGUMENT	689:14	689:14	9	"MakeUp"
FIELD	689:14	689:14	10	"MakeUp"
LEAF_NODE	689:14	689:14	11	"MakeUp"
LEAF_NODE	689:22	689:22	9	,
ARGUMENT	689:24	689:24	9	te -> runlen
FIELD	689:24	689:28	10	te -> runlen
LEAF_NODE	689:24	689:24	11	te
LEAF_NODE	689:26	689:26	11	->
LEAF_NODE	689:28	689:28	11	runlen
LEAF_NODE	689:34	689:34	9	)
LEAF_NODE	689:35	689:35	7	;
EXPR_STATEMENT	691:2	691:29	6	_PutBits ( tif , code , length ) ;
EXPR	691:2	691:2	7	_PutBits ( tif , code , length )
FUNCTION_CALL	691:2	691:28	8	_PutBits ( tif , code , length )
CALLEE	691:2	691:2	9	_PutBits
LEAF_NODE	691:2	691:2	10	_PutBits
LEAF_NODE	691:10	691:10	9	(
ARGUMENT	691:11	691:11	9	tif
FIELD	691:11	691:11	10	tif
LEAF_NODE	691:11	691:11	11	tif
LEAF_NODE	691:14	691:14	9	,
ARGUMENT	691:16	691:16	9	code
FIELD	691:16	691:16	10	code
LEAF_NODE	691:16	691:16	11	code
LEAF_NODE	691:20	691:20	9	,
ARGUMENT	691:22	691:22	9	length
FIELD	691:22	691:22	10	length
LEAF_NODE	691:22	691:22	11	length
LEAF_NODE	691:28	691:28	9	)
LEAF_NODE	691:29	691:29	7	;
EXPR_STATEMENT	692:2	692:20	6	span -= te -> runlen ;
EXPR	692:2	692:2	7	span -= te -> runlen
ASSIGN	692:2	692:10	8	span -= te -> runlen
LVAL	692:2	692:2	9	span
FIELD	692:2	692:2	10	span
LEAF_NODE	692:2	692:2	11	span
ASSIGN_OP	692:7	692:7	9	-=
LEAF_NODE	692:7	692:7	10	-=
RVAL	692:10	692:10	9	te -> runlen
FIELD	692:10	692:14	10	te -> runlen
LEAF_NODE	692:10	692:10	11	te
LEAF_NODE	692:12	692:12	11	->
LEAF_NODE	692:14	692:14	11	runlen
LEAF_NODE	692:20	692:20	7	;
LEAF_NODE	693:1	693:1	5	}
EXPR_STATEMENT	694:1	694:22	3	code = tab [ span ] . code ;
EXPR	694:1	694:1	4	code = tab [ span ] . code
ASSIGN	694:1	694:8	5	code = tab [ span ] . code
LVAL	694:1	694:1	6	code
FIELD	694:1	694:1	7	code
LEAF_NODE	694:1	694:1	8	code
ASSIGN_OP	694:6	694:6	6	=
LEAF_NODE	694:6	694:6	7	=
RVAL	694:8	694:8	6	tab [ span ] . code
FIELD	694:8	694:18	7	tab [ span ] . code
LEAF_NODE	694:8	694:8	8	tab
LEAF_NODE	694:11	694:11	8	[
EXPR	694:12	694:12	8	span
FIELD	694:12	694:12	9	span
LEAF_NODE	694:12	694:12	10	span
LEAF_NODE	694:16	694:16	8	]
LEAF_NODE	694:17	694:17	8	.
LEAF_NODE	694:18	694:18	8	code
LEAF_NODE	694:22	694:22	4	;
EXPR_STATEMENT	695:1	695:26	3	length = tab [ span ] . length ;
EXPR	695:1	695:1	4	length = tab [ span ] . length
ASSIGN	695:1	695:10	5	length = tab [ span ] . length
LVAL	695:1	695:1	6	length
FIELD	695:1	695:1	7	length
LEAF_NODE	695:1	695:1	8	length
ASSIGN_OP	695:8	695:8	6	=
LEAF_NODE	695:8	695:8	7	=
RVAL	695:10	695:10	6	tab [ span ] . length
FIELD	695:10	695:20	7	tab [ span ] . length
LEAF_NODE	695:10	695:10	8	tab
LEAF_NODE	695:13	695:13	8	[
EXPR	695:14	695:14	8	span
FIELD	695:14	695:14	9	span
LEAF_NODE	695:14	695:14	10	span
LEAF_NODE	695:18	695:18	8	]
LEAF_NODE	695:19	695:19	8	.
LEAF_NODE	695:20	695:20	8	length
LEAF_NODE	695:26	695:26	4	;
EXPR_STATEMENT	697:1	697:40	3	DEBUG_PRINT ( "  Term" , tab [ span ] . runlen ) ;
EXPR	697:1	697:1	4	DEBUG_PRINT ( "  Term" , tab [ span ] . runlen )
FUNCTION_CALL	697:1	697:39	5	DEBUG_PRINT ( "  Term" , tab [ span ] . runlen )
CALLEE	697:1	697:1	6	DEBUG_PRINT
LEAF_NODE	697:1	697:1	7	DEBUG_PRINT
LEAF_NODE	697:12	697:12	6	(
ARGUMENT	697:13	697:13	6	"  Term"
FIELD	697:13	697:13	7	"  Term"
LEAF_NODE	697:13	697:13	8	"  Term"
LEAF_NODE	697:21	697:21	6	,
ARGUMENT	697:23	697:23	6	tab [ span ] . runlen
FIELD	697:23	697:33	7	tab [ span ] . runlen
LEAF_NODE	697:23	697:23	8	tab
LEAF_NODE	697:26	697:26	8	[
EXPR	697:27	697:27	8	span
FIELD	697:27	697:27	9	span
LEAF_NODE	697:27	697:27	10	span
LEAF_NODE	697:31	697:31	8	]
LEAF_NODE	697:32	697:32	8	.
LEAF_NODE	697:33	697:33	8	runlen
LEAF_NODE	697:39	697:39	6	)
LEAF_NODE	697:40	697:40	4	;
EXPR_STATEMENT	699:1	699:28	3	_PutBits ( tif , code , length ) ;
EXPR	699:1	699:1	4	_PutBits ( tif , code , length )
FUNCTION_CALL	699:1	699:27	5	_PutBits ( tif , code , length )
CALLEE	699:1	699:1	6	_PutBits
LEAF_NODE	699:1	699:1	7	_PutBits
LEAF_NODE	699:9	699:9	6	(
ARGUMENT	699:10	699:10	6	tif
FIELD	699:10	699:10	7	tif
LEAF_NODE	699:10	699:10	8	tif
LEAF_NODE	699:13	699:13	6	,
ARGUMENT	699:15	699:15	6	code
FIELD	699:15	699:15	7	code
LEAF_NODE	699:15	699:15	8	code
LEAF_NODE	699:19	699:19	6	,
ARGUMENT	699:21	699:21	6	length
FIELD	699:21	699:21	7	length
LEAF_NODE	699:21	699:21	8	length
LEAF_NODE	699:27	699:27	6	)
LEAF_NODE	699:28	699:28	4	;
EXPR_STATEMENT	701:1	701:16	3	sp -> data = data ;
EXPR	701:1	701:1	4	sp -> data = data
ASSIGN	701:1	701:12	5	sp -> data = data
LVAL	701:1	701:1	6	sp -> data
FIELD	701:1	701:5	7	sp -> data
LEAF_NODE	701:1	701:1	8	sp
LEAF_NODE	701:3	701:3	8	->
LEAF_NODE	701:5	701:5	8	data
ASSIGN_OP	701:10	701:10	6	=
LEAF_NODE	701:10	701:10	7	=
RVAL	701:12	701:12	6	data
FIELD	701:12	701:12	7	data
LEAF_NODE	701:12	701:12	8	data
LEAF_NODE	701:16	701:16	4	;
EXPR_STATEMENT	702:1	702:14	3	sp -> bit = bit ;
EXPR	702:1	702:1	4	sp -> bit = bit
ASSIGN	702:1	702:11	5	sp -> bit = bit
LVAL	702:1	702:1	6	sp -> bit
FIELD	702:1	702:5	7	sp -> bit
LEAF_NODE	702:1	702:1	8	sp
LEAF_NODE	702:3	702:3	8	->
LEAF_NODE	702:5	702:5	8	bit
ASSIGN_OP	702:9	702:9	6	=
LEAF_NODE	702:9	702:9	7	=
RVAL	702:11	702:11	6	bit
FIELD	702:11	702:11	7	bit
LEAF_NODE	702:11	702:11	8	bit
LEAF_NODE	702:14	702:14	4	;
LEAF_NODE	703:0	703:0	2	}
FUNCTION_DEF	711:0	745:0	1	
RETURN_TYPE	711:0	711:7	2	static void
LEAF_NODE	711:0	711:0	3	static
TYPE_NAME	711:7	711:7	3	void
LEAF_NODE	711:7	711:7	4	void
FUNCTION_NAME	712:0	712:0	2	Fax3PutEOL
LEAF_NODE	712:0	712:0	3	Fax3PutEOL
PARAMETER_LIST	712:10	712:20	2	( TIFF * tif )
LEAF_NODE	712:10	712:10	3	(
PARAMETER_DECL	712:11	712:17	3	TIFF * tif
TYPE	712:11	712:15	4	TIFF *
TYPE_NAME	712:11	712:11	5	TIFF
LEAF_NODE	712:11	712:11	6	TIFF
POINTER	712:15	712:15	5	*
LEAF_NODE	712:15	712:15	6	*
NAME	712:17	712:17	4	tif
LEAF_NODE	712:17	712:17	5	tif
LEAF_NODE	712:20	712:20	3	)
LEAF_NODE	713:0	713:0	2	{
STATEMENTS	714:1	744:1	2	
SIMPLE_DECL	714:1	714:39	3	Fax3CodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	714:1	714:17	4	Fax3CodecState * sp ; sp = EncoderState ( tif )
TYPE	714:1	714:15	5	Fax3CodecState *
TYPE_NAME	714:1	714:1	6	Fax3CodecState
LEAF_NODE	714:1	714:1	7	Fax3CodecState
POINTER	714:15	714:15	6	*
LEAF_NODE	714:15	714:15	7	*
NAME	714:17	714:17	5	sp
LEAF_NODE	714:17	714:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	714:17	714:17	5	sp = EncoderState ( tif )
ASSIGN	714:17	714:22	6	sp = EncoderState ( tif )
LVAL	714:17	714:17	7	sp
NAME	714:17	714:17	8	sp
LEAF_NODE	714:17	714:17	9	sp
ASSIGN_OP	714:20	714:20	7	=
LEAF_NODE	714:20	714:20	8	=
RVAL	714:22	714:22	7	EncoderState ( tif )
FUNCTION_CALL	714:22	714:38	8	EncoderState ( tif )
CALLEE	714:22	714:22	9	EncoderState
LEAF_NODE	714:22	714:22	10	EncoderState
LEAF_NODE	714:34	714:34	9	(
ARGUMENT	714:35	714:35	9	tif
FIELD	714:35	714:35	10	tif
LEAF_NODE	714:35	714:35	11	tif
LEAF_NODE	714:38	714:38	9	)
LEAF_NODE	714:39	714:39	4	;
SIMPLE_DECL	715:1	715:27	3	unsigned int bit ; bit = sp -> bit ;
VAR_DECL	715:1	715:14	4	unsigned int bit ; bit = sp -> bit
TYPE	715:1	715:1	5	unsigned int
TYPE_NAME	715:1	715:10	6	unsigned int
LEAF_NODE	715:1	715:1	7	unsigned
LEAF_NODE	715:10	715:10	7	int
NAME	715:14	715:14	5	bit
LEAF_NODE	715:14	715:14	6	bit
LEAF_NODE	0:0	0:0	5	;
INIT	715:14	715:14	5	bit = sp -> bit
ASSIGN	715:14	715:20	6	bit = sp -> bit
LVAL	715:14	715:14	7	bit
NAME	715:14	715:14	8	bit
LEAF_NODE	715:14	715:14	9	bit
ASSIGN_OP	715:18	715:18	7	=
LEAF_NODE	715:18	715:18	8	=
RVAL	715:20	715:20	7	sp -> bit
FIELD	715:20	715:24	8	sp -> bit
LEAF_NODE	715:20	715:20	9	sp
LEAF_NODE	715:22	715:22	9	->
LEAF_NODE	715:24	715:24	9	bit
LEAF_NODE	715:27	715:27	4	;
SIMPLE_DECL	716:1	716:20	3	int data ; data = sp -> data ;
VAR_DECL	716:1	716:5	4	int data ; data = sp -> data
TYPE	716:1	716:1	5	int
TYPE_NAME	716:1	716:1	6	int
LEAF_NODE	716:1	716:1	7	int
NAME	716:5	716:5	5	data
LEAF_NODE	716:5	716:5	6	data
LEAF_NODE	0:0	0:0	5	;
INIT	716:5	716:5	5	data = sp -> data
ASSIGN	716:5	716:12	6	data = sp -> data
LVAL	716:5	716:5	7	data
NAME	716:5	716:5	8	data
LEAF_NODE	716:5	716:5	9	data
ASSIGN_OP	716:10	716:10	7	=
LEAF_NODE	716:10	716:10	8	=
RVAL	716:12	716:12	7	sp -> data
FIELD	716:12	716:16	8	sp -> data
LEAF_NODE	716:12	716:12	9	sp
LEAF_NODE	716:14	716:14	9	->
LEAF_NODE	716:16	716:16	9	data
LEAF_NODE	716:20	716:20	4	;
SIMPLE_DECL	717:1	717:33	3	unsigned int code , unsigned int length , unsigned int tparm ;
INIT_DECL_LIST	717:1	717:1	4	unsigned int code , unsigned int length , unsigned int tparm
VAR_DECL	717:1	717:14	5	unsigned int code
TYPE	717:1	717:1	6	unsigned int
TYPE_NAME	717:1	717:10	7	unsigned int
LEAF_NODE	717:1	717:1	8	unsigned
LEAF_NODE	717:10	717:10	8	int
NAME	717:14	717:14	6	code
LEAF_NODE	717:14	717:14	7	code
LEAF_NODE	717:18	717:18	5	,
INIT_DECL_LIST	717:1	717:1	5	unsigned int length , unsigned int tparm
VAR_DECL	717:1	717:20	6	unsigned int length
TYPE	717:1	717:1	7	unsigned int
TYPE_NAME	717:1	717:10	8	unsigned int
LEAF_NODE	717:1	717:1	9	unsigned
LEAF_NODE	717:10	717:10	9	int
NAME	717:20	717:20	7	length
LEAF_NODE	717:20	717:20	8	length
LEAF_NODE	717:26	717:26	6	,
VAR_DECL	717:1	717:28	6	unsigned int tparm
TYPE	717:1	717:1	7	unsigned int
TYPE_NAME	717:1	717:10	8	unsigned int
LEAF_NODE	717:1	717:1	9	unsigned
LEAF_NODE	717:10	717:10	9	int
NAME	717:28	717:28	7	tparm
LEAF_NODE	717:28	717:28	8	tparm
LEAF_NODE	717:33	717:33	4	;
SELECTION	719:1	719:46	3	
KEYWORD	719:1	719:1	4	if
LEAF_NODE	719:1	719:1	5	if
LEAF_NODE	719:4	719:4	4	(
CONDITION	719:5	719:5	4	sp -> b . groupoptions & GROUP3OPT_FILLBITS
EXPR	719:5	719:26	5	sp -> b . groupoptions & GROUP3OPT_FILLBITS
FIELD	719:5	719:11	6	sp -> b . groupoptions
LEAF_NODE	719:5	719:5	7	sp
LEAF_NODE	719:7	719:7	7	->
LEAF_NODE	719:9	719:9	7	b
LEAF_NODE	719:10	719:10	7	.
LEAF_NODE	719:11	719:11	7	groupoptions
LEAF_NODE	719:24	719:24	6	&
FIELD	719:26	719:26	6	GROUP3OPT_FILLBITS
LEAF_NODE	719:26	719:26	7	GROUP3OPT_FILLBITS
LEAF_NODE	719:44	719:44	4	)
STATEMENTS	719:46	734:1	4	
LEAF_NODE	719:46	719:46	5	{
STATEMENTS	725:2	726:2	5	
SIMPLE_DECL	725:2	725:19	6	int align ; align = 8 - 4 ;
VAR_DECL	725:2	725:6	7	int align ; align = 8 - 4
TYPE	725:2	725:2	8	int
TYPE_NAME	725:2	725:2	9	int
LEAF_NODE	725:2	725:2	10	int
NAME	725:6	725:6	8	align
LEAF_NODE	725:6	725:6	9	align
LEAF_NODE	0:0	0:0	8	;
INIT	725:6	725:6	8	align = 8 - 4
ASSIGN	725:6	725:14	9	align = 8 - 4
LVAL	725:6	725:6	10	align
NAME	725:6	725:6	11	align
LEAF_NODE	725:6	725:6	12	align
ASSIGN_OP	725:12	725:12	10	=
LEAF_NODE	725:12	725:12	11	=
RVAL	725:14	725:18	10	8 - 4
FIELD	725:14	725:14	11	8
LEAF_NODE	725:14	725:14	12	8
LEAF_NODE	725:16	725:16	11	-
FIELD	725:18	725:18	11	4
LEAF_NODE	725:18	725:18	12	4
LEAF_NODE	725:19	725:19	7	;
SELECTION	726:2	726:24	6	
KEYWORD	726:2	726:2	7	if
LEAF_NODE	726:2	726:2	8	if
LEAF_NODE	726:5	726:5	7	(
CONDITION	726:6	726:6	7	align != sp -> bit
EXPR	726:6	726:15	8	align != sp -> bit
FIELD	726:6	726:6	9	align
LEAF_NODE	726:6	726:6	10	align
EQ_OPERATOR	726:12	726:12	9	!=
LEAF_NODE	726:12	726:12	10	!=
FIELD	726:15	726:19	9	sp -> bit
LEAF_NODE	726:15	726:15	10	sp
LEAF_NODE	726:17	726:17	10	->
LEAF_NODE	726:19	726:19	10	bit
LEAF_NODE	726:22	726:22	7	)
STATEMENTS	726:24	733:2	7	
LEAF_NODE	726:24	726:24	8	{
STATEMENTS	727:3	732:3	8	
SELECTION	727:3	728:4	9	
KEYWORD	727:3	727:3	10	if
LEAF_NODE	727:3	727:3	11	if
LEAF_NODE	727:6	727:6	10	(
CONDITION	727:7	727:7	10	align > sp -> bit
EXPR	727:7	727:15	11	align > sp -> bit
FIELD	727:7	727:7	12	align
LEAF_NODE	727:7	727:7	13	align
REL_OPERATOR	727:13	727:13	12	>
LEAF_NODE	727:13	727:13	13	>
FIELD	727:15	727:19	12	sp -> bit
LEAF_NODE	727:15	727:15	13	sp
LEAF_NODE	727:17	727:17	13	->
LEAF_NODE	727:19	727:19	13	bit
LEAF_NODE	727:22	727:22	10	)
STATEMENTS	728:4	728:4	10	
EXPR_STATEMENT	728:4	728:33	11	align = sp -> bit + ( 8 - align ) ;
EXPR	728:4	728:4	12	align = sp -> bit + ( 8 - align )
ASSIGN	728:4	728:12	13	align = sp -> bit + ( 8 - align )
LVAL	728:4	728:4	14	align
FIELD	728:4	728:4	15	align
LEAF_NODE	728:4	728:4	16	align
ASSIGN_OP	728:10	728:10	14	=
LEAF_NODE	728:10	728:10	15	=
RVAL	728:12	728:32	14	sp -> bit + ( 8 - align )
FIELD	728:12	728:16	15	sp -> bit
LEAF_NODE	728:12	728:12	16	sp
LEAF_NODE	728:14	728:14	16	->
LEAF_NODE	728:16	728:16	16	bit
LEAF_NODE	728:20	728:20	15	+
LEAF_NODE	728:22	728:22	15	(
FIELD	728:23	728:23	15	8
LEAF_NODE	728:23	728:23	16	8
LEAF_NODE	728:25	728:25	15	-
FIELD	728:27	728:27	15	align
LEAF_NODE	728:27	728:27	16	align
LEAF_NODE	728:32	728:32	15	)
LEAF_NODE	728:33	728:33	12	;
SELECTION	729:3	730:4	9	
KEYWORD	729:3	729:3	10	else
LEAF_NODE	729:3	729:3	11	else
STATEMENTS	730:4	730:4	10	
EXPR_STATEMENT	730:4	730:27	11	align = sp -> bit - align ;
EXPR	730:4	730:4	12	align = sp -> bit - align
ASSIGN	730:4	730:12	13	align = sp -> bit - align
LVAL	730:4	730:4	14	align
FIELD	730:4	730:4	15	align
LEAF_NODE	730:4	730:4	16	align
ASSIGN_OP	730:10	730:10	14	=
LEAF_NODE	730:10	730:10	15	=
RVAL	730:12	730:22	14	sp -> bit - align
FIELD	730:12	730:16	15	sp -> bit
LEAF_NODE	730:12	730:12	16	sp
LEAF_NODE	730:14	730:14	16	->
LEAF_NODE	730:16	730:16	16	bit
LEAF_NODE	730:20	730:20	15	-
FIELD	730:22	730:22	15	align
LEAF_NODE	730:22	730:22	16	align
LEAF_NODE	730:27	730:27	12	;
EXPR_STATEMENT	731:3	731:14	9	tparm = align ;
EXPR	731:3	731:3	10	tparm = align
ASSIGN	731:3	731:9	11	tparm = align
LVAL	731:3	731:3	12	tparm
FIELD	731:3	731:3	13	tparm
LEAF_NODE	731:3	731:3	14	tparm
ASSIGN_OP	731:8	731:8	12	=
LEAF_NODE	731:8	731:8	13	=
RVAL	731:9	731:9	12	align
FIELD	731:9	731:9	13	align
LEAF_NODE	731:9	731:9	14	align
LEAF_NODE	731:14	731:14	10	;
EXPR_STATEMENT	732:3	732:26	9	_PutBits ( tif , 0 , tparm ) ;
EXPR	732:3	732:3	10	_PutBits ( tif , 0 , tparm )
FUNCTION_CALL	732:3	732:25	11	_PutBits ( tif , 0 , tparm )
CALLEE	732:3	732:3	12	_PutBits
LEAF_NODE	732:3	732:3	13	_PutBits
LEAF_NODE	732:11	732:11	12	(
ARGUMENT	732:12	732:12	12	tif
FIELD	732:12	732:12	13	tif
LEAF_NODE	732:12	732:12	14	tif
LEAF_NODE	732:15	732:15	12	,
ARGUMENT	732:17	732:17	12	0
FIELD	732:17	732:17	13	0
LEAF_NODE	732:17	732:17	14	0
LEAF_NODE	732:18	732:18	12	,
ARGUMENT	732:20	732:20	12	tparm
FIELD	732:20	732:20	13	tparm
LEAF_NODE	732:20	732:20	14	tparm
LEAF_NODE	732:25	732:25	12	)
LEAF_NODE	732:26	732:26	10	;
LEAF_NODE	733:2	733:2	8	}
LEAF_NODE	734:1	734:1	5	}
EXPR_STATEMENT	735:1	735:11	3	code = EOL ;
EXPR	735:1	735:1	4	code = EOL
ASSIGN	735:1	735:8	5	code = EOL
LVAL	735:1	735:1	6	code
FIELD	735:1	735:1	7	code
LEAF_NODE	735:1	735:1	8	code
ASSIGN_OP	735:6	735:6	6	=
LEAF_NODE	735:6	735:6	7	=
RVAL	735:8	735:8	6	EOL
FIELD	735:8	735:8	7	EOL
LEAF_NODE	735:8	735:8	8	EOL
LEAF_NODE	735:11	735:11	4	;
EXPR_STATEMENT	736:1	736:12	3	length = 12 ;
EXPR	736:1	736:1	4	length = 12
ASSIGN	736:1	736:10	5	length = 12
LVAL	736:1	736:1	6	length
FIELD	736:1	736:1	7	length
LEAF_NODE	736:1	736:1	8	length
ASSIGN_OP	736:8	736:8	6	=
LEAF_NODE	736:8	736:8	7	=
RVAL	736:10	736:10	6	12
FIELD	736:10	736:10	7	12
LEAF_NODE	736:10	736:10	8	12
LEAF_NODE	736:12	736:12	4	;
SELECTION	737:1	737:23	3	
KEYWORD	737:1	737:1	4	if
LEAF_NODE	737:1	737:1	5	if
LEAF_NODE	737:4	737:4	4	(
CONDITION	737:5	737:5	4	is2DEncoding ( sp )
EXPR	737:5	737:5	5	is2DEncoding ( sp )
FUNCTION_CALL	737:5	737:20	6	is2DEncoding ( sp )
CALLEE	737:5	737:5	7	is2DEncoding
LEAF_NODE	737:5	737:5	8	is2DEncoding
LEAF_NODE	737:17	737:17	7	(
ARGUMENT	737:18	737:18	7	sp
FIELD	737:18	737:18	8	sp
LEAF_NODE	737:18	737:18	9	sp
LEAF_NODE	737:20	737:20	7	)
LEAF_NODE	737:21	737:21	4	)
STATEMENTS	737:23	740:1	4	
LEAF_NODE	737:23	737:23	5	{
STATEMENTS	738:2	739:2	5	
EXPR_STATEMENT	738:2	738:39	6	code = ( code << 1 ) | ( sp -> tag == G3_1D ) ;
EXPR	738:2	738:2	7	code = ( code << 1 ) | ( sp -> tag == G3_1D )
ASSIGN	738:2	738:9	8	code = ( code << 1 ) | ( sp -> tag == G3_1D )
LVAL	738:2	738:2	9	code
FIELD	738:2	738:2	10	code
LEAF_NODE	738:2	738:2	11	code
ASSIGN_OP	738:7	738:7	9	=
LEAF_NODE	738:7	738:7	10	=
RVAL	738:9	738:9	9	( code << 1 ) | ( sp -> tag == G3_1D )
BIT_OR	738:9	738:21	10	( code << 1 ) | ( sp -> tag == G3_1D )
BIT_OR_ELEM	738:9	738:17	11	( code << 1 )
LEAF_NODE	738:9	738:9	12	(
FIELD	738:10	738:10	12	code
LEAF_NODE	738:10	738:10	13	code
LEAF_NODE	738:14	738:14	12	<<
FIELD	738:16	738:16	12	1
LEAF_NODE	738:16	738:16	13	1
LEAF_NODE	738:17	738:17	12	)
LEAF_NODE	738:19	738:19	11	|
BIT_OR_ELEM	738:21	738:38	11	( sp -> tag == G3_1D )
LEAF_NODE	738:21	738:21	12	(
FIELD	738:22	738:26	12	sp -> tag
LEAF_NODE	738:22	738:22	13	sp
LEAF_NODE	738:24	738:24	13	->
LEAF_NODE	738:26	738:26	13	tag
EQ_OPERATOR	738:30	738:30	12	==
LEAF_NODE	738:30	738:30	13	==
FIELD	738:33	738:33	12	G3_1D
LEAF_NODE	738:33	738:33	13	G3_1D
LEAF_NODE	738:38	738:38	12	)
LEAF_NODE	738:39	738:39	7	;
EXPR_STATEMENT	739:2	739:10	6	length ++ ;
EXPR	739:2	739:2	7	length ++
FIELD	739:2	739:8	8	length ++
LEAF_NODE	739:2	739:2	9	length
LEAF_NODE	739:8	739:8	9	++
LEAF_NODE	739:10	739:10	7	;
LEAF_NODE	740:1	740:1	5	}
EXPR_STATEMENT	741:1	741:28	3	_PutBits ( tif , code , length ) ;
EXPR	741:1	741:1	4	_PutBits ( tif , code , length )
FUNCTION_CALL	741:1	741:27	5	_PutBits ( tif , code , length )
CALLEE	741:1	741:1	6	_PutBits
LEAF_NODE	741:1	741:1	7	_PutBits
LEAF_NODE	741:9	741:9	6	(
ARGUMENT	741:10	741:10	6	tif
FIELD	741:10	741:10	7	tif
LEAF_NODE	741:10	741:10	8	tif
LEAF_NODE	741:13	741:13	6	,
ARGUMENT	741:15	741:15	6	code
FIELD	741:15	741:15	7	code
LEAF_NODE	741:15	741:15	8	code
LEAF_NODE	741:19	741:19	6	,
ARGUMENT	741:21	741:21	6	length
FIELD	741:21	741:21	7	length
LEAF_NODE	741:21	741:21	8	length
LEAF_NODE	741:27	741:27	6	)
LEAF_NODE	741:28	741:28	4	;
EXPR_STATEMENT	743:1	743:16	3	sp -> data = data ;
EXPR	743:1	743:1	4	sp -> data = data
ASSIGN	743:1	743:12	5	sp -> data = data
LVAL	743:1	743:1	6	sp -> data
FIELD	743:1	743:5	7	sp -> data
LEAF_NODE	743:1	743:1	8	sp
LEAF_NODE	743:3	743:3	8	->
LEAF_NODE	743:5	743:5	8	data
ASSIGN_OP	743:10	743:10	6	=
LEAF_NODE	743:10	743:10	7	=
RVAL	743:12	743:12	6	data
FIELD	743:12	743:12	7	data
LEAF_NODE	743:12	743:12	8	data
LEAF_NODE	743:16	743:16	4	;
EXPR_STATEMENT	744:1	744:14	3	sp -> bit = bit ;
EXPR	744:1	744:1	4	sp -> bit = bit
ASSIGN	744:1	744:11	5	sp -> bit = bit
LVAL	744:1	744:1	6	sp -> bit
FIELD	744:1	744:5	7	sp -> bit
LEAF_NODE	744:1	744:1	8	sp
LEAF_NODE	744:3	744:3	8	->
LEAF_NODE	744:5	744:5	8	bit
ASSIGN_OP	744:9	744:9	6	=
LEAF_NODE	744:9	744:9	7	=
RVAL	744:11	744:11	6	bit
FIELD	744:11	744:11	7	bit
LEAF_NODE	744:11	744:11	8	bit
LEAF_NODE	744:14	744:14	4	;
LEAF_NODE	745:0	745:0	2	}
FUNCTION_DEF	750:0	787:0	1	
RETURN_TYPE	750:0	750:7	2	static int
LEAF_NODE	750:0	750:0	3	static
TYPE_NAME	750:7	750:7	3	int
LEAF_NODE	750:7	750:7	4	int
FUNCTION_NAME	751:0	751:0	2	Fax3PreEncode
LEAF_NODE	751:0	751:0	3	Fax3PreEncode
PARAMETER_LIST	751:13	751:33	2	( TIFF * tif , uint16 s )
LEAF_NODE	751:13	751:13	3	(
PARAMETER_DECL	751:14	751:20	3	TIFF * tif
TYPE	751:14	751:18	4	TIFF *
TYPE_NAME	751:14	751:14	5	TIFF
LEAF_NODE	751:14	751:14	6	TIFF
POINTER	751:18	751:18	5	*
LEAF_NODE	751:18	751:18	6	*
NAME	751:20	751:20	4	tif
LEAF_NODE	751:20	751:20	5	tif
LEAF_NODE	751:23	751:23	3	,
PARAMETER_DECL	751:25	751:32	3	uint16 s
TYPE	751:25	751:25	4	uint16
TYPE_NAME	751:25	751:25	5	uint16
LEAF_NODE	751:25	751:25	6	uint16
NAME	751:32	751:32	4	s
LEAF_NODE	751:32	751:32	5	s
LEAF_NODE	751:33	751:33	3	)
LEAF_NODE	752:0	752:0	2	{
STATEMENTS	753:1	786:1	2	
SIMPLE_DECL	753:1	753:39	3	Fax3CodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	753:1	753:17	4	Fax3CodecState * sp ; sp = EncoderState ( tif )
TYPE	753:1	753:15	5	Fax3CodecState *
TYPE_NAME	753:1	753:1	6	Fax3CodecState
LEAF_NODE	753:1	753:1	7	Fax3CodecState
POINTER	753:15	753:15	6	*
LEAF_NODE	753:15	753:15	7	*
NAME	753:17	753:17	5	sp
LEAF_NODE	753:17	753:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	753:17	753:17	5	sp = EncoderState ( tif )
ASSIGN	753:17	753:22	6	sp = EncoderState ( tif )
LVAL	753:17	753:17	7	sp
NAME	753:17	753:17	8	sp
LEAF_NODE	753:17	753:17	9	sp
ASSIGN_OP	753:20	753:20	7	=
LEAF_NODE	753:20	753:20	8	=
RVAL	753:22	753:22	7	EncoderState ( tif )
FUNCTION_CALL	753:22	753:38	8	EncoderState ( tif )
CALLEE	753:22	753:22	9	EncoderState
LEAF_NODE	753:22	753:22	10	EncoderState
LEAF_NODE	753:34	753:34	9	(
ARGUMENT	753:35	753:35	9	tif
FIELD	753:35	753:35	10	tif
LEAF_NODE	753:35	753:35	11	tif
LEAF_NODE	753:38	753:38	9	)
LEAF_NODE	753:39	753:39	4	;
EXPR_STATEMENT	755:1	755:9	3	( void ) s ;
EXPR	755:1	755:8	4	( void ) s
LEAF_NODE	755:1	755:1	5	(
TYPE_NAME	755:2	755:2	5	void
LEAF_NODE	755:2	755:2	6	void
LEAF_NODE	755:6	755:6	5	)
FIELD	755:8	755:8	5	s
LEAF_NODE	755:8	755:8	6	s
LEAF_NODE	755:9	755:9	4	;
EXPR_STATEMENT	756:1	756:19	3	assert ( sp != NULL ) ;
EXPR	756:1	756:1	4	assert ( sp != NULL )
FUNCTION_CALL	756:1	756:18	5	assert ( sp != NULL )
CALLEE	756:1	756:1	6	assert
LEAF_NODE	756:1	756:1	7	assert
LEAF_NODE	756:7	756:7	6	(
ARGUMENT	756:8	756:14	6	sp != NULL
FIELD	756:8	756:8	7	sp
LEAF_NODE	756:8	756:8	8	sp
EQ_OPERATOR	756:11	756:11	7	!=
LEAF_NODE	756:11	756:11	8	!=
FIELD	756:14	756:14	7	NULL
LEAF_NODE	756:14	756:14	8	NULL
LEAF_NODE	756:18	756:18	6	)
LEAF_NODE	756:19	756:19	4	;
EXPR_STATEMENT	757:1	757:12	3	sp -> bit = 8 ;
EXPR	757:1	757:1	4	sp -> bit = 8
ASSIGN	757:1	757:11	5	sp -> bit = 8
LVAL	757:1	757:1	6	sp -> bit
FIELD	757:1	757:5	7	sp -> bit
LEAF_NODE	757:1	757:1	8	sp
LEAF_NODE	757:3	757:3	8	->
LEAF_NODE	757:5	757:5	8	bit
ASSIGN_OP	757:9	757:9	6	=
LEAF_NODE	757:9	757:9	7	=
RVAL	757:11	757:11	6	8
FIELD	757:11	757:11	7	8
LEAF_NODE	757:11	757:11	8	8
LEAF_NODE	757:12	757:12	4	;
EXPR_STATEMENT	758:1	758:13	3	sp -> data = 0 ;
EXPR	758:1	758:1	4	sp -> data = 0
ASSIGN	758:1	758:12	5	sp -> data = 0
LVAL	758:1	758:1	6	sp -> data
FIELD	758:1	758:5	7	sp -> data
LEAF_NODE	758:1	758:1	8	sp
LEAF_NODE	758:3	758:3	8	->
LEAF_NODE	758:5	758:5	8	data
ASSIGN_OP	758:10	758:10	6	=
LEAF_NODE	758:10	758:10	7	=
RVAL	758:12	758:12	6	0
FIELD	758:12	758:12	7	0
LEAF_NODE	758:12	758:12	8	0
LEAF_NODE	758:13	758:13	4	;
EXPR_STATEMENT	759:1	759:16	3	sp -> tag = G3_1D ;
EXPR	759:1	759:1	4	sp -> tag = G3_1D
ASSIGN	759:1	759:11	5	sp -> tag = G3_1D
LVAL	759:1	759:1	6	sp -> tag
FIELD	759:1	759:5	7	sp -> tag
LEAF_NODE	759:1	759:1	8	sp
LEAF_NODE	759:3	759:3	8	->
LEAF_NODE	759:5	759:5	8	tag
ASSIGN_OP	759:9	759:9	6	=
LEAF_NODE	759:9	759:9	7	=
RVAL	759:11	759:11	6	G3_1D
FIELD	759:11	759:11	7	G3_1D
LEAF_NODE	759:11	759:11	8	G3_1D
LEAF_NODE	759:16	759:16	4	;
SELECTION	765:1	766:2	3	
KEYWORD	765:1	765:1	4	if
LEAF_NODE	765:1	765:1	5	if
LEAF_NODE	765:4	765:4	4	(
CONDITION	765:5	765:5	4	sp -> refline
EXPR	765:5	765:5	5	sp -> refline
FIELD	765:5	765:9	6	sp -> refline
LEAF_NODE	765:5	765:5	7	sp
LEAF_NODE	765:7	765:7	7	->
LEAF_NODE	765:9	765:9	7	refline
LEAF_NODE	765:16	765:16	4	)
STATEMENTS	766:2	766:2	4	
EXPR_STATEMENT	766:2	766:48	5	_TIFFmemset ( sp -> refline , 0x00 , sp -> b . rowbytes ) ;
EXPR	766:2	766:2	6	_TIFFmemset ( sp -> refline , 0x00 , sp -> b . rowbytes )
FUNCTION_CALL	766:2	766:47	7	_TIFFmemset ( sp -> refline , 0x00 , sp -> b . rowbytes )
CALLEE	766:2	766:2	8	_TIFFmemset
LEAF_NODE	766:2	766:2	9	_TIFFmemset
LEAF_NODE	766:13	766:13	8	(
ARGUMENT	766:14	766:14	8	sp -> refline
FIELD	766:14	766:18	9	sp -> refline
LEAF_NODE	766:14	766:14	10	sp
LEAF_NODE	766:16	766:16	10	->
LEAF_NODE	766:18	766:18	10	refline
LEAF_NODE	766:25	766:25	8	,
ARGUMENT	766:27	766:27	8	0x00
FIELD	766:27	766:27	9	0x00
LEAF_NODE	766:27	766:27	10	0x00
LEAF_NODE	766:31	766:31	8	,
ARGUMENT	766:33	766:33	8	sp -> b . rowbytes
FIELD	766:33	766:39	9	sp -> b . rowbytes
LEAF_NODE	766:33	766:33	10	sp
LEAF_NODE	766:35	766:35	10	->
LEAF_NODE	766:37	766:37	10	b
LEAF_NODE	766:38	766:38	10	.
LEAF_NODE	766:39	766:39	10	rowbytes
LEAF_NODE	766:47	766:47	8	)
LEAF_NODE	766:48	766:48	6	;
SELECTION	767:1	767:23	3	
KEYWORD	767:1	767:1	4	if
LEAF_NODE	767:1	767:1	5	if
LEAF_NODE	767:4	767:4	4	(
CONDITION	767:5	767:5	4	is2DEncoding ( sp )
EXPR	767:5	767:5	5	is2DEncoding ( sp )
FUNCTION_CALL	767:5	767:20	6	is2DEncoding ( sp )
CALLEE	767:5	767:5	7	is2DEncoding
LEAF_NODE	767:5	767:5	8	is2DEncoding
LEAF_NODE	767:17	767:17	7	(
ARGUMENT	767:18	767:18	7	sp
FIELD	767:18	767:18	8	sp
LEAF_NODE	767:18	767:18	9	sp
LEAF_NODE	767:20	767:20	7	)
LEAF_NODE	767:21	767:21	4	)
STATEMENTS	767:23	783:1	4	
LEAF_NODE	767:23	767:23	5	{
STATEMENTS	768:2	782:2	5	
SIMPLE_DECL	768:2	768:41	6	float res ; res = tif -> tif_dir . td_yresolution ;
VAR_DECL	768:2	768:8	7	float res ; res = tif -> tif_dir . td_yresolution
TYPE	768:2	768:2	8	float
TYPE_NAME	768:2	768:2	9	float
LEAF_NODE	768:2	768:2	10	float
NAME	768:8	768:8	8	res
LEAF_NODE	768:8	768:8	9	res
LEAF_NODE	0:0	0:0	8	;
INIT	768:8	768:8	8	res = tif -> tif_dir . td_yresolution
ASSIGN	768:8	768:14	9	res = tif -> tif_dir . td_yresolution
LVAL	768:8	768:8	10	res
NAME	768:8	768:8	11	res
LEAF_NODE	768:8	768:8	12	res
ASSIGN_OP	768:12	768:12	10	=
LEAF_NODE	768:12	768:12	11	=
RVAL	768:14	768:14	10	tif -> tif_dir . td_yresolution
FIELD	768:14	768:27	11	tif -> tif_dir . td_yresolution
LEAF_NODE	768:14	768:14	12	tif
LEAF_NODE	768:17	768:17	12	->
LEAF_NODE	768:19	768:19	12	tif_dir
LEAF_NODE	768:26	768:26	12	.
LEAF_NODE	768:27	768:27	12	td_yresolution
LEAF_NODE	768:41	768:41	7	;
SELECTION	779:2	780:3	6	
KEYWORD	779:2	779:2	7	if
LEAF_NODE	779:2	779:2	8	if
LEAF_NODE	779:5	779:5	7	(
CONDITION	779:6	779:6	7	tif -> tif_dir . td_resolutionunit == RESUNIT_CENTIMETER
EXPR	779:6	779:40	8	tif -> tif_dir . td_resolutionunit == RESUNIT_CENTIMETER
FIELD	779:6	779:19	9	tif -> tif_dir . td_resolutionunit
LEAF_NODE	779:6	779:6	10	tif
LEAF_NODE	779:9	779:9	10	->
LEAF_NODE	779:11	779:11	10	tif_dir
LEAF_NODE	779:18	779:18	10	.
LEAF_NODE	779:19	779:19	10	td_resolutionunit
EQ_OPERATOR	779:37	779:37	9	==
LEAF_NODE	779:37	779:37	10	==
FIELD	779:40	779:40	9	RESUNIT_CENTIMETER
LEAF_NODE	779:40	779:40	10	RESUNIT_CENTIMETER
LEAF_NODE	779:58	779:58	7	)
STATEMENTS	780:3	780:3	7	
EXPR_STATEMENT	780:3	780:15	8	res *= 2.54f ;
EXPR	780:3	780:3	9	res *= 2.54f
ASSIGN	780:3	780:10	10	res *= 2.54f
LVAL	780:3	780:3	11	res
FIELD	780:3	780:3	12	res
LEAF_NODE	780:3	780:3	13	res
ASSIGN_OP	780:7	780:7	11	*=
LEAF_NODE	780:7	780:7	12	*=
RVAL	780:10	780:10	11	2.54f
FIELD	780:10	780:10	12	2.54f
LEAF_NODE	780:10	780:10	13	2.54f
LEAF_NODE	780:15	780:15	9	;
EXPR_STATEMENT	781:2	781:32	6	sp -> maxk = ( res > 150 ? 4 : 2 ) ;
EXPR	781:2	781:2	7	sp -> maxk = ( res > 150 ? 4 : 2 )
ASSIGN	781:2	781:13	8	sp -> maxk = ( res > 150 ? 4 : 2 )
LVAL	781:2	781:2	9	sp -> maxk
FIELD	781:2	781:6	10	sp -> maxk
LEAF_NODE	781:2	781:2	11	sp
LEAF_NODE	781:4	781:4	11	->
LEAF_NODE	781:6	781:6	11	maxk
ASSIGN_OP	781:11	781:11	9	=
LEAF_NODE	781:11	781:11	10	=
RVAL	781:13	781:31	9	( res > 150 ? 4 : 2 )
LEAF_NODE	781:13	781:13	10	(
COND_EXPR	781:14	781:30	10	res > 150 ? 4 : 2
CONDITION	781:14	781:20	11	res > 150
FIELD	781:14	781:14	12	res
LEAF_NODE	781:14	781:14	13	res
REL_OPERATOR	781:18	781:18	12	>
LEAF_NODE	781:18	781:18	13	>
FIELD	781:20	781:20	12	150
LEAF_NODE	781:20	781:20	13	150
LEAF_NODE	781:24	781:24	11	?
EXPR	781:26	781:26	11	4
FIELD	781:26	781:26	12	4
LEAF_NODE	781:26	781:26	13	4
LEAF_NODE	781:28	781:28	11	:
FIELD	781:30	781:30	11	2
LEAF_NODE	781:30	781:30	12	2
LEAF_NODE	781:31	781:31	10	)
LEAF_NODE	781:32	781:32	7	;
EXPR_STATEMENT	782:2	782:20	6	sp -> k = sp -> maxk - 1 ;
EXPR	782:2	782:2	7	sp -> k = sp -> maxk - 1
ASSIGN	782:2	782:10	8	sp -> k = sp -> maxk - 1
LVAL	782:2	782:2	9	sp -> k
FIELD	782:2	782:6	10	sp -> k
LEAF_NODE	782:2	782:2	11	sp
LEAF_NODE	782:4	782:4	11	->
LEAF_NODE	782:6	782:6	11	k
ASSIGN_OP	782:8	782:8	9	=
LEAF_NODE	782:8	782:8	10	=
RVAL	782:10	782:19	9	sp -> maxk - 1
FIELD	782:10	782:14	10	sp -> maxk
LEAF_NODE	782:10	782:10	11	sp
LEAF_NODE	782:12	782:12	11	->
LEAF_NODE	782:14	782:14	11	maxk
LEAF_NODE	782:18	782:18	10	-
FIELD	782:19	782:19	10	1
LEAF_NODE	782:19	782:19	11	1
LEAF_NODE	782:20	782:20	7	;
LEAF_NODE	783:1	783:1	5	}
SELECTION	783:3	784:2	3	
KEYWORD	783:3	783:3	4	else
LEAF_NODE	783:3	783:3	5	else
STATEMENTS	784:2	784:2	4	
EXPR_STATEMENT	784:2	784:22	5	sp -> k = sp -> maxk = 0 ;
EXPR	784:2	784:2	6	sp -> k = sp -> maxk = 0
ASSIGN	784:2	784:10	7	sp -> k = sp -> maxk = 0
LVAL	784:2	784:2	8	sp -> k
FIELD	784:2	784:6	9	sp -> k
LEAF_NODE	784:2	784:2	10	sp
LEAF_NODE	784:4	784:4	10	->
LEAF_NODE	784:6	784:6	10	k
ASSIGN_OP	784:8	784:8	8	=
LEAF_NODE	784:8	784:8	9	=
RVAL	784:10	784:10	8	sp -> maxk = 0
ASSIGN	784:10	784:21	9	sp -> maxk = 0
LVAL	784:10	784:10	10	sp -> maxk
FIELD	784:10	784:14	11	sp -> maxk
LEAF_NODE	784:10	784:10	12	sp
LEAF_NODE	784:12	784:12	12	->
LEAF_NODE	784:14	784:14	12	maxk
ASSIGN_OP	784:19	784:19	10	=
LEAF_NODE	784:19	784:19	11	=
RVAL	784:21	784:21	10	0
FIELD	784:21	784:21	11	0
LEAF_NODE	784:21	784:21	12	0
LEAF_NODE	784:22	784:22	6	;
EXPR_STATEMENT	785:1	785:13	3	sp -> line = 0 ;
EXPR	785:1	785:1	4	sp -> line = 0
ASSIGN	785:1	785:12	5	sp -> line = 0
LVAL	785:1	785:1	6	sp -> line
FIELD	785:1	785:5	7	sp -> line
LEAF_NODE	785:1	785:1	8	sp
LEAF_NODE	785:3	785:3	8	->
LEAF_NODE	785:5	785:5	8	line
ASSIGN_OP	785:10	785:10	6	=
LEAF_NODE	785:10	785:10	7	=
RVAL	785:12	785:12	6	0
FIELD	785:12	785:12	7	0
LEAF_NODE	785:12	785:12	8	0
LEAF_NODE	785:13	785:13	4	;
JUMP_STATEMENT	786:1	786:11	3	return ( 1 ) ;
KEYWORD	786:1	786:1	4	return
LEAF_NODE	786:1	786:1	5	return
DESTINATION	786:8	786:8	4	( 1 )
EXPR	786:8	786:10	5	( 1 )
LEAF_NODE	786:8	786:8	6	(
FIELD	786:9	786:9	6	1
LEAF_NODE	786:9	786:9	7	1
LEAF_NODE	786:10	786:10	6	)
LEAF_NODE	786:11	786:11	4	;
LEAF_NODE	787:0	787:0	2	}
FUNCTION_DEF	841:0	901:0	1	
RETURN_TYPE	841:0	841:14	2	inline static int32
LEAF_NODE	841:0	841:0	3	inline
LEAF_NODE	841:7	841:7	3	static
TYPE_NAME	841:14	841:14	3	int32
LEAF_NODE	841:14	841:14	4	int32
FUNCTION_NAME	842:0	842:0	2	find0span
LEAF_NODE	842:0	842:0	3	find0span
PARAMETER_LIST	842:9	842:47	2	( unsigned char * bp , int32 bs , int32 be )
LEAF_NODE	842:9	842:9	3	(
PARAMETER_DECL	842:10	842:25	3	unsigned char * bp
TYPE	842:10	842:23	4	unsigned char *
TYPE_NAME	842:10	842:19	5	unsigned char
LEAF_NODE	842:10	842:10	6	unsigned
LEAF_NODE	842:19	842:19	6	char
POINTER	842:23	842:23	5	*
LEAF_NODE	842:23	842:23	6	*
NAME	842:25	842:25	4	bp
LEAF_NODE	842:25	842:25	5	bp
LEAF_NODE	842:27	842:27	3	,
PARAMETER_DECL	842:29	842:35	3	int32 bs
TYPE	842:29	842:29	4	int32
TYPE_NAME	842:29	842:29	5	int32
LEAF_NODE	842:29	842:29	6	int32
NAME	842:35	842:35	4	bs
LEAF_NODE	842:35	842:35	5	bs
LEAF_NODE	842:37	842:37	3	,
PARAMETER_DECL	842:39	842:45	3	int32 be
TYPE	842:39	842:39	4	int32
TYPE_NAME	842:39	842:39	5	int32
LEAF_NODE	842:39	842:39	6	int32
NAME	842:45	842:45	4	be
LEAF_NODE	842:45	842:45	5	be
LEAF_NODE	842:47	842:47	3	)
LEAF_NODE	843:0	843:0	2	{
STATEMENTS	844:1	900:14	2	
SIMPLE_DECL	844:1	844:21	3	int32 bits ; bits = be - bs ;
VAR_DECL	844:1	844:7	4	int32 bits ; bits = be - bs
TYPE	844:1	844:1	5	int32
TYPE_NAME	844:1	844:1	6	int32
LEAF_NODE	844:1	844:1	7	int32
NAME	844:7	844:7	5	bits
LEAF_NODE	844:7	844:7	6	bits
LEAF_NODE	0:0	0:0	5	;
INIT	844:7	844:7	5	bits = be - bs
ASSIGN	844:7	844:14	6	bits = be - bs
LVAL	844:7	844:7	7	bits
NAME	844:7	844:7	8	bits
LEAF_NODE	844:7	844:7	9	bits
ASSIGN_OP	844:12	844:12	7	=
LEAF_NODE	844:12	844:12	8	=
RVAL	844:14	844:19	7	be - bs
FIELD	844:14	844:14	8	be
LEAF_NODE	844:14	844:14	9	be
LEAF_NODE	844:17	844:17	8	-
FIELD	844:19	844:19	8	bs
LEAF_NODE	844:19	844:19	9	bs
LEAF_NODE	844:21	844:21	4	;
SIMPLE_DECL	845:1	845:14	3	int32 n , int32 span ;
INIT_DECL_LIST	845:1	845:1	4	int32 n , int32 span
VAR_DECL	845:1	845:7	5	int32 n
TYPE	845:1	845:1	6	int32
TYPE_NAME	845:1	845:1	7	int32
LEAF_NODE	845:1	845:1	8	int32
NAME	845:7	845:7	6	n
LEAF_NODE	845:7	845:7	7	n
LEAF_NODE	845:8	845:8	5	,
VAR_DECL	845:1	845:10	5	int32 span
TYPE	845:1	845:1	6	int32
TYPE_NAME	845:1	845:1	7	int32
LEAF_NODE	845:1	845:1	8	int32
NAME	845:10	845:10	6	span
LEAF_NODE	845:10	845:10	7	span
LEAF_NODE	845:14	845:14	4	;
EXPR_STATEMENT	847:1	847:12	3	bp += bs >> 3 ;
EXPR	847:1	847:1	4	bp += bs >> 3
ASSIGN	847:1	847:7	5	bp += bs >> 3
LVAL	847:1	847:1	6	bp
FIELD	847:1	847:1	7	bp
LEAF_NODE	847:1	847:1	8	bp
ASSIGN_OP	847:4	847:4	6	+=
LEAF_NODE	847:4	847:4	7	+=
RVAL	847:7	847:11	6	bs >> 3
FIELD	847:7	847:7	7	bs
LEAF_NODE	847:7	847:7	8	bs
LEAF_NODE	847:9	847:9	7	>>
FIELD	847:11	847:11	7	3
LEAF_NODE	847:11	847:11	8	3
LEAF_NODE	847:12	847:12	4	;
SELECTION	851:1	851:38	3	
KEYWORD	851:1	851:1	4	if
LEAF_NODE	851:1	851:1	5	if
LEAF_NODE	851:4	851:4	4	(
CONDITION	851:5	851:5	4	bits > 0 && ( n = ( bs & 7 ) ) != 0
EXPR	851:5	851:5	5	bits > 0 && ( n = ( bs & 7 ) ) != 0
AND	851:5	851:17	6	bits > 0 && ( n = ( bs & 7 ) ) != 0
EXPR	851:5	851:12	7	bits > 0
FIELD	851:5	851:5	8	bits
LEAF_NODE	851:5	851:5	9	bits
REL_OPERATOR	851:10	851:10	8	>
LEAF_NODE	851:10	851:10	9	>
FIELD	851:12	851:12	8	0
LEAF_NODE	851:12	851:12	9	0
LEAF_NODE	851:14	851:14	7	&&
EXPR	851:17	851:35	7	( n = ( bs & 7 ) ) != 0
LEAF_NODE	851:17	851:17	8	(
ASSIGN	851:18	851:22	8	n = ( bs & 7 )
LVAL	851:18	851:18	9	n
FIELD	851:18	851:18	10	n
LEAF_NODE	851:18	851:18	11	n
ASSIGN_OP	851:20	851:20	9	=
LEAF_NODE	851:20	851:20	10	=
RVAL	851:22	851:29	9	( bs & 7 )
LEAF_NODE	851:22	851:22	10	(
FIELD	851:23	851:23	10	bs
LEAF_NODE	851:23	851:23	11	bs
LEAF_NODE	851:26	851:26	10	&
FIELD	851:28	851:28	10	7
LEAF_NODE	851:28	851:28	11	7
LEAF_NODE	851:29	851:29	10	)
LEAF_NODE	851:30	851:30	8	)
EQ_OPERATOR	851:32	851:32	8	!=
LEAF_NODE	851:32	851:32	9	!=
FIELD	851:35	851:35	8	0
LEAF_NODE	851:35	851:35	9	0
LEAF_NODE	851:36	851:36	4	)
STATEMENTS	851:38	861:1	4	
LEAF_NODE	851:38	851:38	5	{
STATEMENTS	852:2	860:2	5	
EXPR_STATEMENT	852:2	852:36	6	span = zeroruns [ ( * bp << n ) & 0xff ] ;
EXPR	852:2	852:2	7	span = zeroruns [ ( * bp << n ) & 0xff ]
ASSIGN	852:2	852:9	8	span = zeroruns [ ( * bp << n ) & 0xff ]
LVAL	852:2	852:2	9	span
FIELD	852:2	852:2	10	span
LEAF_NODE	852:2	852:2	11	span
ASSIGN_OP	852:7	852:7	9	=
LEAF_NODE	852:7	852:7	10	=
RVAL	852:9	852:9	9	zeroruns [ ( * bp << n ) & 0xff ]
FIELD	852:9	852:35	10	zeroruns [ ( * bp << n ) & 0xff ]
LEAF_NODE	852:9	852:9	11	zeroruns
LEAF_NODE	852:17	852:17	11	[
EXPR	852:18	852:31	11	( * bp << n ) & 0xff
LEAF_NODE	852:18	852:18	12	(
UNARY_EXPR	852:19	852:20	12	* bp
UNARY_OPERATOR	852:19	852:19	13	*
LEAF_NODE	852:19	852:19	14	*
FIELD	852:20	852:20	13	bp
LEAF_NODE	852:20	852:20	14	bp
LEAF_NODE	852:23	852:23	12	<<
FIELD	852:26	852:26	12	n
LEAF_NODE	852:26	852:26	13	n
LEAF_NODE	852:27	852:27	12	)
LEAF_NODE	852:29	852:29	12	&
FIELD	852:31	852:31	12	0xff
LEAF_NODE	852:31	852:31	13	0xff
LEAF_NODE	852:35	852:35	11	]
LEAF_NODE	852:36	852:36	7	;
SELECTION	853:2	854:3	6	
KEYWORD	853:2	853:2	7	if
LEAF_NODE	853:2	853:2	8	if
LEAF_NODE	853:5	853:5	7	(
CONDITION	853:6	853:6	7	span > 8 - n
EXPR	853:6	853:15	8	span > 8 - n
FIELD	853:6	853:6	9	span
LEAF_NODE	853:6	853:6	10	span
REL_OPERATOR	853:11	853:11	9	>
LEAF_NODE	853:11	853:11	10	>
FIELD	853:13	853:13	9	8
LEAF_NODE	853:13	853:13	10	8
LEAF_NODE	853:14	853:14	9	-
FIELD	853:15	853:15	9	n
LEAF_NODE	853:15	853:15	10	n
LEAF_NODE	853:16	853:16	7	)
STATEMENTS	854:3	854:3	7	
EXPR_STATEMENT	854:3	854:13	8	span = 8 - n ;
EXPR	854:3	854:3	9	span = 8 - n
ASSIGN	854:3	854:10	10	span = 8 - n
LVAL	854:3	854:3	11	span
FIELD	854:3	854:3	12	span
LEAF_NODE	854:3	854:3	13	span
ASSIGN_OP	854:8	854:8	11	=
LEAF_NODE	854:8	854:8	12	=
RVAL	854:10	854:12	11	8 - n
FIELD	854:10	854:10	12	8
LEAF_NODE	854:10	854:10	13	8
LEAF_NODE	854:11	854:11	12	-
FIELD	854:12	854:12	12	n
LEAF_NODE	854:12	854:12	13	n
LEAF_NODE	854:13	854:13	9	;
SELECTION	855:2	856:3	6	
KEYWORD	855:2	855:2	7	if
LEAF_NODE	855:2	855:2	8	if
LEAF_NODE	855:5	855:5	7	(
CONDITION	855:6	855:6	7	span > bits
EXPR	855:6	855:13	8	span > bits
FIELD	855:6	855:6	9	span
LEAF_NODE	855:6	855:6	10	span
REL_OPERATOR	855:11	855:11	9	>
LEAF_NODE	855:11	855:11	10	>
FIELD	855:13	855:13	9	bits
LEAF_NODE	855:13	855:13	10	bits
LEAF_NODE	855:17	855:17	7	)
STATEMENTS	856:3	856:3	7	
EXPR_STATEMENT	856:3	856:14	8	span = bits ;
EXPR	856:3	856:3	9	span = bits
ASSIGN	856:3	856:10	10	span = bits
LVAL	856:3	856:3	11	span
FIELD	856:3	856:3	12	span
LEAF_NODE	856:3	856:3	13	span
ASSIGN_OP	856:8	856:8	11	=
LEAF_NODE	856:8	856:8	12	=
RVAL	856:10	856:10	11	bits
FIELD	856:10	856:10	12	bits
LEAF_NODE	856:10	856:10	13	bits
LEAF_NODE	856:14	856:14	9	;
SELECTION	857:2	858:3	6	
KEYWORD	857:2	857:2	7	if
LEAF_NODE	857:2	857:2	8	if
LEAF_NODE	857:5	857:5	7	(
CONDITION	857:6	857:6	7	n + span < 8
EXPR	857:6	857:15	8	n + span < 8
FIELD	857:6	857:6	9	n
LEAF_NODE	857:6	857:6	10	n
LEAF_NODE	857:7	857:7	9	+
FIELD	857:8	857:8	9	span
LEAF_NODE	857:8	857:8	10	span
REL_OPERATOR	857:13	857:13	9	<
LEAF_NODE	857:13	857:13	10	<
FIELD	857:15	857:15	9	8
LEAF_NODE	857:15	857:15	10	8
LEAF_NODE	857:16	857:16	7	)
STATEMENTS	858:3	858:3	7	
LEAF_NODE	858:3	858:3	8	return
LEAF_NODE	858:10	858:10	6	(
LEAF_NODE	858:11	858:11	6	span
LEAF_NODE	858:15	858:15	6	)
LEAF_NODE	858:16	858:16	6	;
EXPR_STATEMENT	859:2	859:14	6	bits -= span ;
EXPR	859:2	859:2	7	bits -= span
ASSIGN	859:2	859:10	8	bits -= span
LVAL	859:2	859:2	9	bits
FIELD	859:2	859:2	10	bits
LEAF_NODE	859:2	859:2	11	bits
ASSIGN_OP	859:7	859:7	9	-=
LEAF_NODE	859:7	859:7	10	-=
RVAL	859:10	859:10	9	span
FIELD	859:10	859:10	10	span
LEAF_NODE	859:10	859:10	11	span
LEAF_NODE	859:14	859:14	7	;
EXPR_STATEMENT	860:2	860:6	6	bp ++ ;
EXPR	860:2	860:2	7	bp ++
FIELD	860:2	860:4	8	bp ++
LEAF_NODE	860:2	860:2	9	bp
LEAF_NODE	860:4	860:4	9	++
LEAF_NODE	860:6	860:6	7	;
LEAF_NODE	861:1	861:1	5	}
SELECTION	861:3	862:2	3	
KEYWORD	861:3	861:3	4	else
LEAF_NODE	861:3	861:3	5	else
STATEMENTS	862:2	862:2	4	
EXPR_STATEMENT	862:2	862:10	5	span = 0 ;
EXPR	862:2	862:2	6	span = 0
ASSIGN	862:2	862:9	7	span = 0
LVAL	862:2	862:2	8	span
FIELD	862:2	862:2	9	span
LEAF_NODE	862:2	862:2	10	span
ASSIGN_OP	862:7	862:7	8	=
LEAF_NODE	862:7	862:7	9	=
RVAL	862:9	862:9	8	0
FIELD	862:9	862:9	9	0
LEAF_NODE	862:9	862:9	10	0
LEAF_NODE	862:10	862:10	6	;
LEAF_NODE	863:1	863:1	3	if
LEAF_NODE	863:4	863:4	3	(
LEAF_NODE	863:5	863:5	3	bits
LEAF_NODE	863:10	863:10	3	>=
LEAF_NODE	863:13	863:13	3	(
LEAF_NODE	863:14	863:14	3	int32
LEAF_NODE	863:19	863:19	3	)
LEAF_NODE	863:20	863:20	3	(
LEAF_NODE	863:21	863:21	3	2
LEAF_NODE	863:23	863:23	3	*
LEAF_NODE	863:25	863:25	3	8
LEAF_NODE	863:27	863:27	3	*
LEAF_NODE	863:29	863:29	3	sizeof
LEAF_NODE	863:35	863:35	3	(
LEAF_NODE	863:36	863:36	3	long
LEAF_NODE	863:40	863:40	3	)
LEAF_NODE	863:41	863:41	3	)
LEAF_NODE	863:42	863:42	3	)
LEAF_NODE	863:44	863:44	3	{
STATEMENTS	864:2	881:2	3	
SIMPLE_DECL	864:2	864:10	4	long * lp ;
VAR_DECL	864:2	864:8	5	long * lp
TYPE	864:2	864:6	6	long *
TYPE_NAME	864:2	864:2	7	long
LEAF_NODE	864:2	864:2	8	long
POINTER	864:6	864:6	7	*
LEAF_NODE	864:6	864:6	8	*
NAME	864:8	864:8	6	lp
LEAF_NODE	864:8	864:8	7	lp
LEAF_NODE	864:10	864:10	5	;
ITERATION	868:2	868:31	4	
KEYWORD	868:2	868:2	5	while
LEAF_NODE	868:2	868:2	6	while
LEAF_NODE	868:8	868:8	5	(
CONDITION	868:9	868:9	5	! isAligned ( bp , long )
EXPR	868:9	868:9	6	! isAligned ( bp , long )
UNARY_EXPR	868:9	868:10	7	! isAligned ( bp , long )
UNARY_OPERATOR	868:9	868:9	8	!
LEAF_NODE	868:9	868:9	9	!
FUNCTION_CALL	868:10	868:28	8	isAligned ( bp , long )
CALLEE	868:10	868:10	9	isAligned
LEAF_NODE	868:10	868:10	10	isAligned
LEAF_NODE	868:19	868:19	9	(
ARGUMENT	868:20	868:20	9	bp
FIELD	868:20	868:20	10	bp
LEAF_NODE	868:20	868:20	11	bp
LEAF_NODE	868:22	868:22	9	,
ARGUMENT	868:24	868:24	9	long
FIELD	868:24	868:24	10	long
LEAF_NODE	868:24	868:24	11	long
LEAF_NODE	868:28	868:28	9	)
LEAF_NODE	868:29	868:29	5	)
STATEMENTS	868:31	874:2	5	
LEAF_NODE	868:31	868:31	6	{
STATEMENTS	869:3	873:3	6	
SELECTION	869:3	870:4	7	
KEYWORD	869:3	869:3	8	if
LEAF_NODE	869:3	869:3	9	if
LEAF_NODE	869:6	869:6	8	(
CONDITION	869:7	869:7	8	* bp != 0x00
EXPR	869:7	869:14	9	* bp != 0x00
UNARY_EXPR	869:7	869:8	10	* bp
UNARY_OPERATOR	869:7	869:7	11	*
LEAF_NODE	869:7	869:7	12	*
FIELD	869:8	869:8	11	bp
LEAF_NODE	869:8	869:8	12	bp
EQ_OPERATOR	869:11	869:11	10	!=
LEAF_NODE	869:11	869:11	11	!=
FIELD	869:14	869:14	10	0x00
LEAF_NODE	869:14	869:14	11	0x00
LEAF_NODE	869:18	869:18	8	)
STATEMENTS	870:4	870:4	8	
JUMP_STATEMENT	870:4	870:33	9	return ( span + zeroruns [ * bp ] ) ;
KEYWORD	870:4	870:4	10	return
LEAF_NODE	870:4	870:4	11	return
DESTINATION	870:11	870:11	10	( span + zeroruns [ * bp ] )
EXPR	870:11	870:32	11	( span + zeroruns [ * bp ] )
LEAF_NODE	870:11	870:11	12	(
FIELD	870:12	870:12	12	span
LEAF_NODE	870:12	870:12	13	span
LEAF_NODE	870:17	870:17	12	+
FIELD	870:19	870:31	12	zeroruns [ * bp ]
LEAF_NODE	870:19	870:19	13	zeroruns
LEAF_NODE	870:27	870:27	13	[
EXPR	870:28	870:28	13	* bp
UNARY_EXPR	870:28	870:29	14	* bp
UNARY_OPERATOR	870:28	870:28	15	*
LEAF_NODE	870:28	870:28	16	*
FIELD	870:29	870:29	15	bp
LEAF_NODE	870:29	870:29	16	bp
LEAF_NODE	870:31	870:31	13	]
LEAF_NODE	870:32	870:32	12	)
LEAF_NODE	870:33	870:33	10	;
EXPR_STATEMENT	871:3	871:12	7	span += 8 ;
EXPR	871:3	871:3	8	span += 8
ASSIGN	871:3	871:11	9	span += 8
LVAL	871:3	871:3	10	span
FIELD	871:3	871:3	11	span
LEAF_NODE	871:3	871:3	12	span
ASSIGN_OP	871:8	871:8	10	+=
LEAF_NODE	871:8	871:8	11	+=
RVAL	871:11	871:11	10	8
FIELD	871:11	871:11	11	8
LEAF_NODE	871:11	871:11	12	8
LEAF_NODE	871:12	871:12	8	;
EXPR_STATEMENT	872:3	872:12	7	bits -= 8 ;
EXPR	872:3	872:3	8	bits -= 8
ASSIGN	872:3	872:11	9	bits -= 8
LVAL	872:3	872:3	10	bits
FIELD	872:3	872:3	11	bits
LEAF_NODE	872:3	872:3	12	bits
ASSIGN_OP	872:8	872:8	10	-=
LEAF_NODE	872:8	872:8	11	-=
RVAL	872:11	872:11	10	8
FIELD	872:11	872:11	11	8
LEAF_NODE	872:11	872:11	12	8
LEAF_NODE	872:12	872:12	8	;
EXPR_STATEMENT	873:3	873:7	7	bp ++ ;
EXPR	873:3	873:3	8	bp ++
FIELD	873:3	873:5	9	bp ++
LEAF_NODE	873:3	873:3	10	bp
LEAF_NODE	873:5	873:5	10	++
LEAF_NODE	873:7	873:7	8	;
LEAF_NODE	874:2	874:2	6	}
EXPR_STATEMENT	875:2	875:17	4	lp = ( long * ) bp ;
EXPR	875:2	875:2	5	lp = ( long * ) bp
ASSIGN	875:2	875:7	6	lp = ( long * ) bp
LVAL	875:2	875:2	7	lp
FIELD	875:2	875:2	8	lp
LEAF_NODE	875:2	875:2	9	lp
ASSIGN_OP	875:5	875:5	7	=
LEAF_NODE	875:5	875:5	8	=
RVAL	875:7	875:15	7	( long * ) bp
LEAF_NODE	875:7	875:7	8	(
TYPE_NAME	875:8	875:8	8	long
LEAF_NODE	875:8	875:8	9	long
LEAF_NODE	875:12	875:12	8	*
LEAF_NODE	875:13	875:13	8	)
FIELD	875:15	875:15	8	bp
LEAF_NODE	875:15	875:15	9	bp
LEAF_NODE	875:17	875:17	5	;
ITERATION	876:2	876:60	4	
KEYWORD	876:2	876:2	5	while
LEAF_NODE	876:2	876:2	6	while
LEAF_NODE	876:8	876:8	5	(
CONDITION	876:9	876:9	5	( bits >= ( int32 ) ( 8 * sizeof ( long ) ) ) && ( 0 == * lp )
EXPR	876:9	876:9	6	( bits >= ( int32 ) ( 8 * sizeof ( long ) ) ) && ( 0 == * lp )
AND	876:9	876:48	7	( bits >= ( int32 ) ( 8 * sizeof ( long ) ) ) && ( 0 == * lp )
EXPR	876:9	876:43	8	( bits >= ( int32 ) ( 8 * sizeof ( long ) ) )
LEAF_NODE	876:9	876:9	9	(
FIELD	876:10	876:10	9	bits
LEAF_NODE	876:10	876:10	10	bits
REL_OPERATOR	876:15	876:15	9	>=
LEAF_NODE	876:15	876:15	10	>=
LEAF_NODE	876:18	876:18	9	(
TYPE_NAME	876:19	876:19	9	int32
LEAF_NODE	876:19	876:19	10	int32
LEAF_NODE	876:24	876:24	9	)
LEAF_NODE	876:25	876:25	9	(
FIELD	876:26	876:26	9	8
LEAF_NODE	876:26	876:26	10	8
LEAF_NODE	876:28	876:28	9	*
FUNCTION_CALL	876:30	876:41	9	sizeof ( long )
CALLEE	876:30	876:30	10	sizeof
LEAF_NODE	876:30	876:30	11	sizeof
LEAF_NODE	876:36	876:36	10	(
ARGUMENT	876:37	876:37	10	long
FIELD	876:37	876:37	11	long
LEAF_NODE	876:37	876:37	12	long
LEAF_NODE	876:41	876:41	10	)
LEAF_NODE	876:42	876:42	9	)
LEAF_NODE	876:43	876:43	9	)
LEAF_NODE	876:45	876:45	8	&&
EXPR	876:48	876:57	8	( 0 == * lp )
LEAF_NODE	876:48	876:48	9	(
FIELD	876:49	876:49	9	0
LEAF_NODE	876:49	876:49	10	0
EQ_OPERATOR	876:51	876:51	9	==
LEAF_NODE	876:51	876:51	10	==
UNARY_EXPR	876:54	876:55	9	* lp
UNARY_OPERATOR	876:54	876:54	10	*
LEAF_NODE	876:54	876:54	11	*
FIELD	876:55	876:55	10	lp
LEAF_NODE	876:55	876:55	11	lp
LEAF_NODE	876:57	876:57	9	)
LEAF_NODE	876:58	876:58	5	)
STATEMENTS	876:60	880:2	5	
LEAF_NODE	876:60	876:60	6	{
STATEMENTS	877:3	879:3	6	
EXPR_STATEMENT	877:3	877:26	7	span += 8 * sizeof ( long ) ;
EXPR	877:3	877:3	8	span += 8 * sizeof ( long )
ASSIGN	877:3	877:11	9	span += 8 * sizeof ( long )
LVAL	877:3	877:3	10	span
FIELD	877:3	877:3	11	span
LEAF_NODE	877:3	877:3	12	span
ASSIGN_OP	877:8	877:8	10	+=
LEAF_NODE	877:8	877:8	11	+=
RVAL	877:11	877:13	10	8 * sizeof ( long )
FIELD	877:11	877:11	11	8
LEAF_NODE	877:11	877:11	12	8
LEAF_NODE	877:12	877:12	11	*
FUNCTION_CALL	877:13	877:25	11	sizeof ( long )
CALLEE	877:13	877:13	12	sizeof
LEAF_NODE	877:13	877:13	13	sizeof
LEAF_NODE	877:20	877:20	12	(
ARGUMENT	877:21	877:21	12	long
FIELD	877:21	877:21	13	long
LEAF_NODE	877:21	877:21	14	long
LEAF_NODE	877:25	877:25	12	)
LEAF_NODE	877:26	877:26	8	;
EXPR_STATEMENT	878:3	878:26	7	bits -= 8 * sizeof ( long ) ;
EXPR	878:3	878:3	8	bits -= 8 * sizeof ( long )
ASSIGN	878:3	878:11	9	bits -= 8 * sizeof ( long )
LVAL	878:3	878:3	10	bits
FIELD	878:3	878:3	11	bits
LEAF_NODE	878:3	878:3	12	bits
ASSIGN_OP	878:8	878:8	10	-=
LEAF_NODE	878:8	878:8	11	-=
RVAL	878:11	878:13	10	8 * sizeof ( long )
FIELD	878:11	878:11	11	8
LEAF_NODE	878:11	878:11	12	8
LEAF_NODE	878:12	878:12	11	*
FUNCTION_CALL	878:13	878:25	11	sizeof ( long )
CALLEE	878:13	878:13	12	sizeof
LEAF_NODE	878:13	878:13	13	sizeof
LEAF_NODE	878:20	878:20	12	(
ARGUMENT	878:21	878:21	12	long
FIELD	878:21	878:21	13	long
LEAF_NODE	878:21	878:21	14	long
LEAF_NODE	878:25	878:25	12	)
LEAF_NODE	878:26	878:26	8	;
EXPR_STATEMENT	879:3	879:7	7	lp ++ ;
EXPR	879:3	879:3	8	lp ++
FIELD	879:3	879:5	9	lp ++
LEAF_NODE	879:3	879:3	10	lp
LEAF_NODE	879:5	879:5	10	++
LEAF_NODE	879:7	879:7	8	;
LEAF_NODE	880:2	880:2	6	}
EXPR_STATEMENT	881:2	881:26	4	bp = ( unsigned char * ) lp ;
EXPR	881:2	881:2	5	bp = ( unsigned char * ) lp
ASSIGN	881:2	881:7	6	bp = ( unsigned char * ) lp
LVAL	881:2	881:2	7	bp
FIELD	881:2	881:2	8	bp
LEAF_NODE	881:2	881:2	9	bp
ASSIGN_OP	881:5	881:5	7	=
LEAF_NODE	881:5	881:5	8	=
RVAL	881:7	881:24	7	( unsigned char * ) lp
LEAF_NODE	881:7	881:7	8	(
TYPE_NAME	881:8	881:17	8	unsigned char
LEAF_NODE	881:8	881:8	9	unsigned
LEAF_NODE	881:17	881:17	9	char
LEAF_NODE	881:21	881:21	8	*
LEAF_NODE	881:22	881:22	8	)
FIELD	881:24	881:24	8	lp
LEAF_NODE	881:24	881:24	9	lp
LEAF_NODE	881:26	881:26	5	;
LEAF_NODE	882:1	882:1	3	}
ITERATION	886:1	886:19	3	
KEYWORD	886:1	886:1	4	while
LEAF_NODE	886:1	886:1	5	while
LEAF_NODE	886:7	886:7	4	(
CONDITION	886:8	886:8	4	bits >= 8
EXPR	886:8	886:16	5	bits >= 8
FIELD	886:8	886:8	6	bits
LEAF_NODE	886:8	886:8	7	bits
REL_OPERATOR	886:13	886:13	6	>=
LEAF_NODE	886:13	886:13	7	>=
FIELD	886:16	886:16	6	8
LEAF_NODE	886:16	886:16	7	8
LEAF_NODE	886:17	886:17	4	)
STATEMENTS	886:19	892:1	4	
LEAF_NODE	886:19	886:19	5	{
STATEMENTS	887:2	891:2	5	
SELECTION	887:2	888:3	6	
KEYWORD	887:2	887:2	7	if
LEAF_NODE	887:2	887:2	8	if
LEAF_NODE	887:5	887:5	7	(
CONDITION	887:6	887:6	7	* bp != 0x00
EXPR	887:6	887:13	8	* bp != 0x00
UNARY_EXPR	887:6	887:7	9	* bp
UNARY_OPERATOR	887:6	887:6	10	*
LEAF_NODE	887:6	887:6	11	*
FIELD	887:7	887:7	10	bp
LEAF_NODE	887:7	887:7	11	bp
EQ_OPERATOR	887:10	887:10	9	!=
LEAF_NODE	887:10	887:10	10	!=
FIELD	887:13	887:13	9	0x00
LEAF_NODE	887:13	887:13	10	0x00
LEAF_NODE	887:17	887:17	7	)
STATEMENTS	888:3	888:3	7	
JUMP_STATEMENT	888:3	888:32	8	return ( span + zeroruns [ * bp ] ) ;
KEYWORD	888:3	888:3	9	return
LEAF_NODE	888:3	888:3	10	return
DESTINATION	888:10	888:10	9	( span + zeroruns [ * bp ] )
EXPR	888:10	888:31	10	( span + zeroruns [ * bp ] )
LEAF_NODE	888:10	888:10	11	(
FIELD	888:11	888:11	11	span
LEAF_NODE	888:11	888:11	12	span
LEAF_NODE	888:16	888:16	11	+
FIELD	888:18	888:30	11	zeroruns [ * bp ]
LEAF_NODE	888:18	888:18	12	zeroruns
LEAF_NODE	888:26	888:26	12	[
EXPR	888:27	888:27	12	* bp
UNARY_EXPR	888:27	888:28	13	* bp
UNARY_OPERATOR	888:27	888:27	14	*
LEAF_NODE	888:27	888:27	15	*
FIELD	888:28	888:28	14	bp
LEAF_NODE	888:28	888:28	15	bp
LEAF_NODE	888:30	888:30	12	]
LEAF_NODE	888:31	888:31	11	)
LEAF_NODE	888:32	888:32	9	;
EXPR_STATEMENT	889:2	889:11	6	span += 8 ;
EXPR	889:2	889:2	7	span += 8
ASSIGN	889:2	889:10	8	span += 8
LVAL	889:2	889:2	9	span
FIELD	889:2	889:2	10	span
LEAF_NODE	889:2	889:2	11	span
ASSIGN_OP	889:7	889:7	9	+=
LEAF_NODE	889:7	889:7	10	+=
RVAL	889:10	889:10	9	8
FIELD	889:10	889:10	10	8
LEAF_NODE	889:10	889:10	11	8
LEAF_NODE	889:11	889:11	7	;
EXPR_STATEMENT	890:2	890:11	6	bits -= 8 ;
EXPR	890:2	890:2	7	bits -= 8
ASSIGN	890:2	890:10	8	bits -= 8
LVAL	890:2	890:2	9	bits
FIELD	890:2	890:2	10	bits
LEAF_NODE	890:2	890:2	11	bits
ASSIGN_OP	890:7	890:7	9	-=
LEAF_NODE	890:7	890:7	10	-=
RVAL	890:10	890:10	9	8
FIELD	890:10	890:10	10	8
LEAF_NODE	890:10	890:10	11	8
LEAF_NODE	890:11	890:11	7	;
EXPR_STATEMENT	891:2	891:6	6	bp ++ ;
EXPR	891:2	891:2	7	bp ++
FIELD	891:2	891:4	8	bp ++
LEAF_NODE	891:2	891:2	9	bp
LEAF_NODE	891:4	891:4	9	++
LEAF_NODE	891:6	891:6	7	;
LEAF_NODE	892:1	892:1	5	}
SELECTION	896:1	896:15	3	
KEYWORD	896:1	896:1	4	if
LEAF_NODE	896:1	896:1	5	if
LEAF_NODE	896:4	896:4	4	(
CONDITION	896:5	896:5	4	bits > 0
EXPR	896:5	896:12	5	bits > 0
FIELD	896:5	896:5	6	bits
LEAF_NODE	896:5	896:5	7	bits
REL_OPERATOR	896:10	896:10	6	>
LEAF_NODE	896:10	896:10	7	>
FIELD	896:12	896:12	6	0
LEAF_NODE	896:12	896:12	7	0
LEAF_NODE	896:13	896:13	4	)
STATEMENTS	896:15	899:1	4	
LEAF_NODE	896:15	896:15	5	{
STATEMENTS	897:2	898:2	5	
EXPR_STATEMENT	897:2	897:19	6	n = zeroruns [ * bp ] ;
EXPR	897:2	897:2	7	n = zeroruns [ * bp ]
ASSIGN	897:2	897:6	8	n = zeroruns [ * bp ]
LVAL	897:2	897:2	9	n
FIELD	897:2	897:2	10	n
LEAF_NODE	897:2	897:2	11	n
ASSIGN_OP	897:4	897:4	9	=
LEAF_NODE	897:4	897:4	10	=
RVAL	897:6	897:6	9	zeroruns [ * bp ]
FIELD	897:6	897:18	10	zeroruns [ * bp ]
LEAF_NODE	897:6	897:6	11	zeroruns
LEAF_NODE	897:14	897:14	11	[
EXPR	897:15	897:15	11	* bp
UNARY_EXPR	897:15	897:16	12	* bp
UNARY_OPERATOR	897:15	897:15	13	*
LEAF_NODE	897:15	897:15	14	*
FIELD	897:16	897:16	13	bp
LEAF_NODE	897:16	897:16	14	bp
LEAF_NODE	897:18	897:18	11	]
LEAF_NODE	897:19	897:19	7	;
EXPR_STATEMENT	898:2	898:31	6	span += ( n > bits ? bits : n ) ;
EXPR	898:2	898:2	7	span += ( n > bits ? bits : n )
ASSIGN	898:2	898:10	8	span += ( n > bits ? bits : n )
LVAL	898:2	898:2	9	span
FIELD	898:2	898:2	10	span
LEAF_NODE	898:2	898:2	11	span
ASSIGN_OP	898:7	898:7	9	+=
LEAF_NODE	898:7	898:7	10	+=
RVAL	898:10	898:30	9	( n > bits ? bits : n )
LEAF_NODE	898:10	898:10	10	(
COND_EXPR	898:11	898:29	10	n > bits ? bits : n
CONDITION	898:11	898:15	11	n > bits
FIELD	898:11	898:11	12	n
LEAF_NODE	898:11	898:11	13	n
REL_OPERATOR	898:13	898:13	12	>
LEAF_NODE	898:13	898:13	13	>
FIELD	898:15	898:15	12	bits
LEAF_NODE	898:15	898:15	13	bits
LEAF_NODE	898:20	898:20	11	?
EXPR	898:22	898:22	11	bits
FIELD	898:22	898:22	12	bits
LEAF_NODE	898:22	898:22	13	bits
LEAF_NODE	898:27	898:27	11	:
FIELD	898:29	898:29	11	n
LEAF_NODE	898:29	898:29	12	n
LEAF_NODE	898:30	898:30	10	)
LEAF_NODE	898:31	898:31	7	;
LEAF_NODE	899:1	899:1	5	}
LEAF_NODE	900:1	900:1	3	return
LEAF_NODE	900:8	900:8	3	(
LEAF_NODE	900:9	900:9	3	span
LEAF_NODE	900:13	900:13	3	)
LEAF_NODE	900:14	900:14	3	;
LEAF_NODE	901:0	901:0	2	}
FUNCTION_DEF	903:0	963:0	1	
RETURN_TYPE	903:0	903:14	2	inline static int32
LEAF_NODE	903:0	903:0	3	inline
LEAF_NODE	903:7	903:7	3	static
TYPE_NAME	903:14	903:14	3	int32
LEAF_NODE	903:14	903:14	4	int32
FUNCTION_NAME	904:0	904:0	2	find1span
LEAF_NODE	904:0	904:0	3	find1span
PARAMETER_LIST	904:9	904:47	2	( unsigned char * bp , int32 bs , int32 be )
LEAF_NODE	904:9	904:9	3	(
PARAMETER_DECL	904:10	904:25	3	unsigned char * bp
TYPE	904:10	904:23	4	unsigned char *
TYPE_NAME	904:10	904:19	5	unsigned char
LEAF_NODE	904:10	904:10	6	unsigned
LEAF_NODE	904:19	904:19	6	char
POINTER	904:23	904:23	5	*
LEAF_NODE	904:23	904:23	6	*
NAME	904:25	904:25	4	bp
LEAF_NODE	904:25	904:25	5	bp
LEAF_NODE	904:27	904:27	3	,
PARAMETER_DECL	904:29	904:35	3	int32 bs
TYPE	904:29	904:29	4	int32
TYPE_NAME	904:29	904:29	5	int32
LEAF_NODE	904:29	904:29	6	int32
NAME	904:35	904:35	4	bs
LEAF_NODE	904:35	904:35	5	bs
LEAF_NODE	904:37	904:37	3	,
PARAMETER_DECL	904:39	904:45	3	int32 be
TYPE	904:39	904:39	4	int32
TYPE_NAME	904:39	904:39	5	int32
LEAF_NODE	904:39	904:39	6	int32
NAME	904:45	904:45	4	be
LEAF_NODE	904:45	904:45	5	be
LEAF_NODE	904:47	904:47	3	)
LEAF_NODE	905:0	905:0	2	{
STATEMENTS	906:1	962:14	2	
SIMPLE_DECL	906:1	906:21	3	int32 bits ; bits = be - bs ;
VAR_DECL	906:1	906:7	4	int32 bits ; bits = be - bs
TYPE	906:1	906:1	5	int32
TYPE_NAME	906:1	906:1	6	int32
LEAF_NODE	906:1	906:1	7	int32
NAME	906:7	906:7	5	bits
LEAF_NODE	906:7	906:7	6	bits
LEAF_NODE	0:0	0:0	5	;
INIT	906:7	906:7	5	bits = be - bs
ASSIGN	906:7	906:14	6	bits = be - bs
LVAL	906:7	906:7	7	bits
NAME	906:7	906:7	8	bits
LEAF_NODE	906:7	906:7	9	bits
ASSIGN_OP	906:12	906:12	7	=
LEAF_NODE	906:12	906:12	8	=
RVAL	906:14	906:19	7	be - bs
FIELD	906:14	906:14	8	be
LEAF_NODE	906:14	906:14	9	be
LEAF_NODE	906:17	906:17	8	-
FIELD	906:19	906:19	8	bs
LEAF_NODE	906:19	906:19	9	bs
LEAF_NODE	906:21	906:21	4	;
SIMPLE_DECL	907:1	907:14	3	int32 n , int32 span ;
INIT_DECL_LIST	907:1	907:1	4	int32 n , int32 span
VAR_DECL	907:1	907:7	5	int32 n
TYPE	907:1	907:1	6	int32
TYPE_NAME	907:1	907:1	7	int32
LEAF_NODE	907:1	907:1	8	int32
NAME	907:7	907:7	6	n
LEAF_NODE	907:7	907:7	7	n
LEAF_NODE	907:8	907:8	5	,
VAR_DECL	907:1	907:10	5	int32 span
TYPE	907:1	907:1	6	int32
TYPE_NAME	907:1	907:1	7	int32
LEAF_NODE	907:1	907:1	8	int32
NAME	907:10	907:10	6	span
LEAF_NODE	907:10	907:10	7	span
LEAF_NODE	907:14	907:14	4	;
EXPR_STATEMENT	909:1	909:12	3	bp += bs >> 3 ;
EXPR	909:1	909:1	4	bp += bs >> 3
ASSIGN	909:1	909:7	5	bp += bs >> 3
LVAL	909:1	909:1	6	bp
FIELD	909:1	909:1	7	bp
LEAF_NODE	909:1	909:1	8	bp
ASSIGN_OP	909:4	909:4	6	+=
LEAF_NODE	909:4	909:4	7	+=
RVAL	909:7	909:11	6	bs >> 3
FIELD	909:7	909:7	7	bs
LEAF_NODE	909:7	909:7	8	bs
LEAF_NODE	909:9	909:9	7	>>
FIELD	909:11	909:11	7	3
LEAF_NODE	909:11	909:11	8	3
LEAF_NODE	909:12	909:12	4	;
SELECTION	913:1	913:38	3	
KEYWORD	913:1	913:1	4	if
LEAF_NODE	913:1	913:1	5	if
LEAF_NODE	913:4	913:4	4	(
CONDITION	913:5	913:5	4	bits > 0 && ( n = ( bs & 7 ) ) != 0
EXPR	913:5	913:5	5	bits > 0 && ( n = ( bs & 7 ) ) != 0
AND	913:5	913:17	6	bits > 0 && ( n = ( bs & 7 ) ) != 0
EXPR	913:5	913:12	7	bits > 0
FIELD	913:5	913:5	8	bits
LEAF_NODE	913:5	913:5	9	bits
REL_OPERATOR	913:10	913:10	8	>
LEAF_NODE	913:10	913:10	9	>
FIELD	913:12	913:12	8	0
LEAF_NODE	913:12	913:12	9	0
LEAF_NODE	913:14	913:14	7	&&
EXPR	913:17	913:35	7	( n = ( bs & 7 ) ) != 0
LEAF_NODE	913:17	913:17	8	(
ASSIGN	913:18	913:22	8	n = ( bs & 7 )
LVAL	913:18	913:18	9	n
FIELD	913:18	913:18	10	n
LEAF_NODE	913:18	913:18	11	n
ASSIGN_OP	913:20	913:20	9	=
LEAF_NODE	913:20	913:20	10	=
RVAL	913:22	913:29	9	( bs & 7 )
LEAF_NODE	913:22	913:22	10	(
FIELD	913:23	913:23	10	bs
LEAF_NODE	913:23	913:23	11	bs
LEAF_NODE	913:26	913:26	10	&
FIELD	913:28	913:28	10	7
LEAF_NODE	913:28	913:28	11	7
LEAF_NODE	913:29	913:29	10	)
LEAF_NODE	913:30	913:30	8	)
EQ_OPERATOR	913:32	913:32	8	!=
LEAF_NODE	913:32	913:32	9	!=
FIELD	913:35	913:35	8	0
LEAF_NODE	913:35	913:35	9	0
LEAF_NODE	913:36	913:36	4	)
STATEMENTS	913:38	923:1	4	
LEAF_NODE	913:38	913:38	5	{
STATEMENTS	914:2	922:2	5	
EXPR_STATEMENT	914:2	914:35	6	span = oneruns [ ( * bp << n ) & 0xff ] ;
EXPR	914:2	914:2	7	span = oneruns [ ( * bp << n ) & 0xff ]
ASSIGN	914:2	914:9	8	span = oneruns [ ( * bp << n ) & 0xff ]
LVAL	914:2	914:2	9	span
FIELD	914:2	914:2	10	span
LEAF_NODE	914:2	914:2	11	span
ASSIGN_OP	914:7	914:7	9	=
LEAF_NODE	914:7	914:7	10	=
RVAL	914:9	914:9	9	oneruns [ ( * bp << n ) & 0xff ]
FIELD	914:9	914:34	10	oneruns [ ( * bp << n ) & 0xff ]
LEAF_NODE	914:9	914:9	11	oneruns
LEAF_NODE	914:16	914:16	11	[
EXPR	914:17	914:30	11	( * bp << n ) & 0xff
LEAF_NODE	914:17	914:17	12	(
UNARY_EXPR	914:18	914:19	12	* bp
UNARY_OPERATOR	914:18	914:18	13	*
LEAF_NODE	914:18	914:18	14	*
FIELD	914:19	914:19	13	bp
LEAF_NODE	914:19	914:19	14	bp
LEAF_NODE	914:22	914:22	12	<<
FIELD	914:25	914:25	12	n
LEAF_NODE	914:25	914:25	13	n
LEAF_NODE	914:26	914:26	12	)
LEAF_NODE	914:28	914:28	12	&
FIELD	914:30	914:30	12	0xff
LEAF_NODE	914:30	914:30	13	0xff
LEAF_NODE	914:34	914:34	11	]
LEAF_NODE	914:35	914:35	7	;
SELECTION	915:2	916:3	6	
KEYWORD	915:2	915:2	7	if
LEAF_NODE	915:2	915:2	8	if
LEAF_NODE	915:5	915:5	7	(
CONDITION	915:6	915:6	7	span > 8 - n
EXPR	915:6	915:15	8	span > 8 - n
FIELD	915:6	915:6	9	span
LEAF_NODE	915:6	915:6	10	span
REL_OPERATOR	915:11	915:11	9	>
LEAF_NODE	915:11	915:11	10	>
FIELD	915:13	915:13	9	8
LEAF_NODE	915:13	915:13	10	8
LEAF_NODE	915:14	915:14	9	-
FIELD	915:15	915:15	9	n
LEAF_NODE	915:15	915:15	10	n
LEAF_NODE	915:16	915:16	7	)
STATEMENTS	916:3	916:3	7	
EXPR_STATEMENT	916:3	916:13	8	span = 8 - n ;
EXPR	916:3	916:3	9	span = 8 - n
ASSIGN	916:3	916:10	10	span = 8 - n
LVAL	916:3	916:3	11	span
FIELD	916:3	916:3	12	span
LEAF_NODE	916:3	916:3	13	span
ASSIGN_OP	916:8	916:8	11	=
LEAF_NODE	916:8	916:8	12	=
RVAL	916:10	916:12	11	8 - n
FIELD	916:10	916:10	12	8
LEAF_NODE	916:10	916:10	13	8
LEAF_NODE	916:11	916:11	12	-
FIELD	916:12	916:12	12	n
LEAF_NODE	916:12	916:12	13	n
LEAF_NODE	916:13	916:13	9	;
SELECTION	917:2	918:3	6	
KEYWORD	917:2	917:2	7	if
LEAF_NODE	917:2	917:2	8	if
LEAF_NODE	917:5	917:5	7	(
CONDITION	917:6	917:6	7	span > bits
EXPR	917:6	917:13	8	span > bits
FIELD	917:6	917:6	9	span
LEAF_NODE	917:6	917:6	10	span
REL_OPERATOR	917:11	917:11	9	>
LEAF_NODE	917:11	917:11	10	>
FIELD	917:13	917:13	9	bits
LEAF_NODE	917:13	917:13	10	bits
LEAF_NODE	917:17	917:17	7	)
STATEMENTS	918:3	918:3	7	
EXPR_STATEMENT	918:3	918:14	8	span = bits ;
EXPR	918:3	918:3	9	span = bits
ASSIGN	918:3	918:10	10	span = bits
LVAL	918:3	918:3	11	span
FIELD	918:3	918:3	12	span
LEAF_NODE	918:3	918:3	13	span
ASSIGN_OP	918:8	918:8	11	=
LEAF_NODE	918:8	918:8	12	=
RVAL	918:10	918:10	11	bits
FIELD	918:10	918:10	12	bits
LEAF_NODE	918:10	918:10	13	bits
LEAF_NODE	918:14	918:14	9	;
SELECTION	919:2	920:3	6	
KEYWORD	919:2	919:2	7	if
LEAF_NODE	919:2	919:2	8	if
LEAF_NODE	919:5	919:5	7	(
CONDITION	919:6	919:6	7	n + span < 8
EXPR	919:6	919:15	8	n + span < 8
FIELD	919:6	919:6	9	n
LEAF_NODE	919:6	919:6	10	n
LEAF_NODE	919:7	919:7	9	+
FIELD	919:8	919:8	9	span
LEAF_NODE	919:8	919:8	10	span
REL_OPERATOR	919:13	919:13	9	<
LEAF_NODE	919:13	919:13	10	<
FIELD	919:15	919:15	9	8
LEAF_NODE	919:15	919:15	10	8
LEAF_NODE	919:16	919:16	7	)
STATEMENTS	920:3	920:3	7	
LEAF_NODE	920:3	920:3	8	return
LEAF_NODE	920:10	920:10	6	(
LEAF_NODE	920:11	920:11	6	span
LEAF_NODE	920:15	920:15	6	)
LEAF_NODE	920:16	920:16	6	;
EXPR_STATEMENT	921:2	921:14	6	bits -= span ;
EXPR	921:2	921:2	7	bits -= span
ASSIGN	921:2	921:10	8	bits -= span
LVAL	921:2	921:2	9	bits
FIELD	921:2	921:2	10	bits
LEAF_NODE	921:2	921:2	11	bits
ASSIGN_OP	921:7	921:7	9	-=
LEAF_NODE	921:7	921:7	10	-=
RVAL	921:10	921:10	9	span
FIELD	921:10	921:10	10	span
LEAF_NODE	921:10	921:10	11	span
LEAF_NODE	921:14	921:14	7	;
EXPR_STATEMENT	922:2	922:6	6	bp ++ ;
EXPR	922:2	922:2	7	bp ++
FIELD	922:2	922:4	8	bp ++
LEAF_NODE	922:2	922:2	9	bp
LEAF_NODE	922:4	922:4	9	++
LEAF_NODE	922:6	922:6	7	;
LEAF_NODE	923:1	923:1	5	}
SELECTION	923:3	924:2	3	
KEYWORD	923:3	923:3	4	else
LEAF_NODE	923:3	923:3	5	else
STATEMENTS	924:2	924:2	4	
EXPR_STATEMENT	924:2	924:10	5	span = 0 ;
EXPR	924:2	924:2	6	span = 0
ASSIGN	924:2	924:9	7	span = 0
LVAL	924:2	924:2	8	span
FIELD	924:2	924:2	9	span
LEAF_NODE	924:2	924:2	10	span
ASSIGN_OP	924:7	924:7	8	=
LEAF_NODE	924:7	924:7	9	=
RVAL	924:9	924:9	8	0
FIELD	924:9	924:9	9	0
LEAF_NODE	924:9	924:9	10	0
LEAF_NODE	924:10	924:10	6	;
LEAF_NODE	925:1	925:1	3	if
LEAF_NODE	925:4	925:4	3	(
LEAF_NODE	925:5	925:5	3	bits
LEAF_NODE	925:10	925:10	3	>=
LEAF_NODE	925:13	925:13	3	(
LEAF_NODE	925:14	925:14	3	int32
LEAF_NODE	925:19	925:19	3	)
LEAF_NODE	925:20	925:20	3	(
LEAF_NODE	925:21	925:21	3	2
LEAF_NODE	925:23	925:23	3	*
LEAF_NODE	925:25	925:25	3	8
LEAF_NODE	925:27	925:27	3	*
LEAF_NODE	925:29	925:29	3	sizeof
LEAF_NODE	925:35	925:35	3	(
LEAF_NODE	925:36	925:36	3	long
LEAF_NODE	925:40	925:40	3	)
LEAF_NODE	925:41	925:41	3	)
LEAF_NODE	925:42	925:42	3	)
LEAF_NODE	925:44	925:44	3	{
STATEMENTS	926:2	943:2	3	
SIMPLE_DECL	926:2	926:10	4	long * lp ;
VAR_DECL	926:2	926:8	5	long * lp
TYPE	926:2	926:6	6	long *
TYPE_NAME	926:2	926:2	7	long
LEAF_NODE	926:2	926:2	8	long
POINTER	926:6	926:6	7	*
LEAF_NODE	926:6	926:6	8	*
NAME	926:8	926:8	6	lp
LEAF_NODE	926:8	926:8	7	lp
LEAF_NODE	926:10	926:10	5	;
ITERATION	930:2	930:31	4	
KEYWORD	930:2	930:2	5	while
LEAF_NODE	930:2	930:2	6	while
LEAF_NODE	930:8	930:8	5	(
CONDITION	930:9	930:9	5	! isAligned ( bp , long )
EXPR	930:9	930:9	6	! isAligned ( bp , long )
UNARY_EXPR	930:9	930:10	7	! isAligned ( bp , long )
UNARY_OPERATOR	930:9	930:9	8	!
LEAF_NODE	930:9	930:9	9	!
FUNCTION_CALL	930:10	930:28	8	isAligned ( bp , long )
CALLEE	930:10	930:10	9	isAligned
LEAF_NODE	930:10	930:10	10	isAligned
LEAF_NODE	930:19	930:19	9	(
ARGUMENT	930:20	930:20	9	bp
FIELD	930:20	930:20	10	bp
LEAF_NODE	930:20	930:20	11	bp
LEAF_NODE	930:22	930:22	9	,
ARGUMENT	930:24	930:24	9	long
FIELD	930:24	930:24	10	long
LEAF_NODE	930:24	930:24	11	long
LEAF_NODE	930:28	930:28	9	)
LEAF_NODE	930:29	930:29	5	)
STATEMENTS	930:31	936:2	5	
LEAF_NODE	930:31	930:31	6	{
STATEMENTS	931:3	935:3	6	
SELECTION	931:3	932:4	7	
KEYWORD	931:3	931:3	8	if
LEAF_NODE	931:3	931:3	9	if
LEAF_NODE	931:6	931:6	8	(
CONDITION	931:7	931:7	8	* bp != 0xff
EXPR	931:7	931:14	9	* bp != 0xff
UNARY_EXPR	931:7	931:8	10	* bp
UNARY_OPERATOR	931:7	931:7	11	*
LEAF_NODE	931:7	931:7	12	*
FIELD	931:8	931:8	11	bp
LEAF_NODE	931:8	931:8	12	bp
EQ_OPERATOR	931:11	931:11	10	!=
LEAF_NODE	931:11	931:11	11	!=
FIELD	931:14	931:14	10	0xff
LEAF_NODE	931:14	931:14	11	0xff
LEAF_NODE	931:18	931:18	8	)
STATEMENTS	932:4	932:4	8	
JUMP_STATEMENT	932:4	932:32	9	return ( span + oneruns [ * bp ] ) ;
KEYWORD	932:4	932:4	10	return
LEAF_NODE	932:4	932:4	11	return
DESTINATION	932:11	932:11	10	( span + oneruns [ * bp ] )
EXPR	932:11	932:31	11	( span + oneruns [ * bp ] )
LEAF_NODE	932:11	932:11	12	(
FIELD	932:12	932:12	12	span
LEAF_NODE	932:12	932:12	13	span
LEAF_NODE	932:17	932:17	12	+
FIELD	932:19	932:30	12	oneruns [ * bp ]
LEAF_NODE	932:19	932:19	13	oneruns
LEAF_NODE	932:26	932:26	13	[
EXPR	932:27	932:27	13	* bp
UNARY_EXPR	932:27	932:28	14	* bp
UNARY_OPERATOR	932:27	932:27	15	*
LEAF_NODE	932:27	932:27	16	*
FIELD	932:28	932:28	15	bp
LEAF_NODE	932:28	932:28	16	bp
LEAF_NODE	932:30	932:30	13	]
LEAF_NODE	932:31	932:31	12	)
LEAF_NODE	932:32	932:32	10	;
EXPR_STATEMENT	933:3	933:12	7	span += 8 ;
EXPR	933:3	933:3	8	span += 8
ASSIGN	933:3	933:11	9	span += 8
LVAL	933:3	933:3	10	span
FIELD	933:3	933:3	11	span
LEAF_NODE	933:3	933:3	12	span
ASSIGN_OP	933:8	933:8	10	+=
LEAF_NODE	933:8	933:8	11	+=
RVAL	933:11	933:11	10	8
FIELD	933:11	933:11	11	8
LEAF_NODE	933:11	933:11	12	8
LEAF_NODE	933:12	933:12	8	;
EXPR_STATEMENT	934:3	934:12	7	bits -= 8 ;
EXPR	934:3	934:3	8	bits -= 8
ASSIGN	934:3	934:11	9	bits -= 8
LVAL	934:3	934:3	10	bits
FIELD	934:3	934:3	11	bits
LEAF_NODE	934:3	934:3	12	bits
ASSIGN_OP	934:8	934:8	10	-=
LEAF_NODE	934:8	934:8	11	-=
RVAL	934:11	934:11	10	8
FIELD	934:11	934:11	11	8
LEAF_NODE	934:11	934:11	12	8
LEAF_NODE	934:12	934:12	8	;
EXPR_STATEMENT	935:3	935:7	7	bp ++ ;
EXPR	935:3	935:3	8	bp ++
FIELD	935:3	935:5	9	bp ++
LEAF_NODE	935:3	935:3	10	bp
LEAF_NODE	935:5	935:5	10	++
LEAF_NODE	935:7	935:7	8	;
LEAF_NODE	936:2	936:2	6	}
EXPR_STATEMENT	937:2	937:17	4	lp = ( long * ) bp ;
EXPR	937:2	937:2	5	lp = ( long * ) bp
ASSIGN	937:2	937:7	6	lp = ( long * ) bp
LVAL	937:2	937:2	7	lp
FIELD	937:2	937:2	8	lp
LEAF_NODE	937:2	937:2	9	lp
ASSIGN_OP	937:5	937:5	7	=
LEAF_NODE	937:5	937:5	8	=
RVAL	937:7	937:15	7	( long * ) bp
LEAF_NODE	937:7	937:7	8	(
TYPE_NAME	937:8	937:8	8	long
LEAF_NODE	937:8	937:8	9	long
LEAF_NODE	937:12	937:12	8	*
LEAF_NODE	937:13	937:13	8	)
FIELD	937:15	937:15	8	bp
LEAF_NODE	937:15	937:15	9	bp
LEAF_NODE	937:17	937:17	5	;
ITERATION	938:2	938:61	4	
KEYWORD	938:2	938:2	5	while
LEAF_NODE	938:2	938:2	6	while
LEAF_NODE	938:8	938:8	5	(
CONDITION	938:9	938:9	5	( bits >= ( int32 ) ( 8 * sizeof ( long ) ) ) && ( ~0 == * lp )
EXPR	938:9	938:9	6	( bits >= ( int32 ) ( 8 * sizeof ( long ) ) ) && ( ~0 == * lp )
AND	938:9	938:48	7	( bits >= ( int32 ) ( 8 * sizeof ( long ) ) ) && ( ~0 == * lp )
EXPR	938:9	938:43	8	( bits >= ( int32 ) ( 8 * sizeof ( long ) ) )
LEAF_NODE	938:9	938:9	9	(
FIELD	938:10	938:10	9	bits
LEAF_NODE	938:10	938:10	10	bits
REL_OPERATOR	938:15	938:15	9	>=
LEAF_NODE	938:15	938:15	10	>=
LEAF_NODE	938:18	938:18	9	(
TYPE_NAME	938:19	938:19	9	int32
LEAF_NODE	938:19	938:19	10	int32
LEAF_NODE	938:24	938:24	9	)
LEAF_NODE	938:25	938:25	9	(
FIELD	938:26	938:26	9	8
LEAF_NODE	938:26	938:26	10	8
LEAF_NODE	938:28	938:28	9	*
FUNCTION_CALL	938:30	938:41	9	sizeof ( long )
CALLEE	938:30	938:30	10	sizeof
LEAF_NODE	938:30	938:30	11	sizeof
LEAF_NODE	938:36	938:36	10	(
ARGUMENT	938:37	938:37	10	long
FIELD	938:37	938:37	11	long
LEAF_NODE	938:37	938:37	12	long
LEAF_NODE	938:41	938:41	10	)
LEAF_NODE	938:42	938:42	9	)
LEAF_NODE	938:43	938:43	9	)
LEAF_NODE	938:45	938:45	8	&&
EXPR	938:48	938:58	8	( ~0 == * lp )
LEAF_NODE	938:48	938:48	9	(
FIELD	938:49	938:49	9	~0
LEAF_NODE	938:49	938:49	10	~0
EQ_OPERATOR	938:52	938:52	9	==
LEAF_NODE	938:52	938:52	10	==
UNARY_EXPR	938:55	938:56	9	* lp
UNARY_OPERATOR	938:55	938:55	10	*
LEAF_NODE	938:55	938:55	11	*
FIELD	938:56	938:56	10	lp
LEAF_NODE	938:56	938:56	11	lp
LEAF_NODE	938:58	938:58	9	)
LEAF_NODE	938:59	938:59	5	)
STATEMENTS	938:61	942:2	5	
LEAF_NODE	938:61	938:61	6	{
STATEMENTS	939:3	941:3	6	
EXPR_STATEMENT	939:3	939:26	7	span += 8 * sizeof ( long ) ;
EXPR	939:3	939:3	8	span += 8 * sizeof ( long )
ASSIGN	939:3	939:11	9	span += 8 * sizeof ( long )
LVAL	939:3	939:3	10	span
FIELD	939:3	939:3	11	span
LEAF_NODE	939:3	939:3	12	span
ASSIGN_OP	939:8	939:8	10	+=
LEAF_NODE	939:8	939:8	11	+=
RVAL	939:11	939:13	10	8 * sizeof ( long )
FIELD	939:11	939:11	11	8
LEAF_NODE	939:11	939:11	12	8
LEAF_NODE	939:12	939:12	11	*
FUNCTION_CALL	939:13	939:25	11	sizeof ( long )
CALLEE	939:13	939:13	12	sizeof
LEAF_NODE	939:13	939:13	13	sizeof
LEAF_NODE	939:20	939:20	12	(
ARGUMENT	939:21	939:21	12	long
FIELD	939:21	939:21	13	long
LEAF_NODE	939:21	939:21	14	long
LEAF_NODE	939:25	939:25	12	)
LEAF_NODE	939:26	939:26	8	;
EXPR_STATEMENT	940:3	940:26	7	bits -= 8 * sizeof ( long ) ;
EXPR	940:3	940:3	8	bits -= 8 * sizeof ( long )
ASSIGN	940:3	940:11	9	bits -= 8 * sizeof ( long )
LVAL	940:3	940:3	10	bits
FIELD	940:3	940:3	11	bits
LEAF_NODE	940:3	940:3	12	bits
ASSIGN_OP	940:8	940:8	10	-=
LEAF_NODE	940:8	940:8	11	-=
RVAL	940:11	940:13	10	8 * sizeof ( long )
FIELD	940:11	940:11	11	8
LEAF_NODE	940:11	940:11	12	8
LEAF_NODE	940:12	940:12	11	*
FUNCTION_CALL	940:13	940:25	11	sizeof ( long )
CALLEE	940:13	940:13	12	sizeof
LEAF_NODE	940:13	940:13	13	sizeof
LEAF_NODE	940:20	940:20	12	(
ARGUMENT	940:21	940:21	12	long
FIELD	940:21	940:21	13	long
LEAF_NODE	940:21	940:21	14	long
LEAF_NODE	940:25	940:25	12	)
LEAF_NODE	940:26	940:26	8	;
EXPR_STATEMENT	941:3	941:7	7	lp ++ ;
EXPR	941:3	941:3	8	lp ++
FIELD	941:3	941:5	9	lp ++
LEAF_NODE	941:3	941:3	10	lp
LEAF_NODE	941:5	941:5	10	++
LEAF_NODE	941:7	941:7	8	;
LEAF_NODE	942:2	942:2	6	}
EXPR_STATEMENT	943:2	943:26	4	bp = ( unsigned char * ) lp ;
EXPR	943:2	943:2	5	bp = ( unsigned char * ) lp
ASSIGN	943:2	943:7	6	bp = ( unsigned char * ) lp
LVAL	943:2	943:2	7	bp
FIELD	943:2	943:2	8	bp
LEAF_NODE	943:2	943:2	9	bp
ASSIGN_OP	943:5	943:5	7	=
LEAF_NODE	943:5	943:5	8	=
RVAL	943:7	943:24	7	( unsigned char * ) lp
LEAF_NODE	943:7	943:7	8	(
TYPE_NAME	943:8	943:17	8	unsigned char
LEAF_NODE	943:8	943:8	9	unsigned
LEAF_NODE	943:17	943:17	9	char
LEAF_NODE	943:21	943:21	8	*
LEAF_NODE	943:22	943:22	8	)
FIELD	943:24	943:24	8	lp
LEAF_NODE	943:24	943:24	9	lp
LEAF_NODE	943:26	943:26	5	;
LEAF_NODE	944:1	944:1	3	}
ITERATION	948:1	948:19	3	
KEYWORD	948:1	948:1	4	while
LEAF_NODE	948:1	948:1	5	while
LEAF_NODE	948:7	948:7	4	(
CONDITION	948:8	948:8	4	bits >= 8
EXPR	948:8	948:16	5	bits >= 8
FIELD	948:8	948:8	6	bits
LEAF_NODE	948:8	948:8	7	bits
REL_OPERATOR	948:13	948:13	6	>=
LEAF_NODE	948:13	948:13	7	>=
FIELD	948:16	948:16	6	8
LEAF_NODE	948:16	948:16	7	8
LEAF_NODE	948:17	948:17	4	)
STATEMENTS	948:19	954:1	4	
LEAF_NODE	948:19	948:19	5	{
STATEMENTS	949:2	953:2	5	
SELECTION	949:2	950:3	6	
KEYWORD	949:2	949:2	7	if
LEAF_NODE	949:2	949:2	8	if
LEAF_NODE	949:5	949:5	7	(
CONDITION	949:6	949:6	7	* bp != 0xff
EXPR	949:6	949:13	8	* bp != 0xff
UNARY_EXPR	949:6	949:7	9	* bp
UNARY_OPERATOR	949:6	949:6	10	*
LEAF_NODE	949:6	949:6	11	*
FIELD	949:7	949:7	10	bp
LEAF_NODE	949:7	949:7	11	bp
EQ_OPERATOR	949:10	949:10	9	!=
LEAF_NODE	949:10	949:10	10	!=
FIELD	949:13	949:13	9	0xff
LEAF_NODE	949:13	949:13	10	0xff
LEAF_NODE	949:17	949:17	7	)
STATEMENTS	950:3	950:3	7	
JUMP_STATEMENT	950:3	950:31	8	return ( span + oneruns [ * bp ] ) ;
KEYWORD	950:3	950:3	9	return
LEAF_NODE	950:3	950:3	10	return
DESTINATION	950:10	950:10	9	( span + oneruns [ * bp ] )
EXPR	950:10	950:30	10	( span + oneruns [ * bp ] )
LEAF_NODE	950:10	950:10	11	(
FIELD	950:11	950:11	11	span
LEAF_NODE	950:11	950:11	12	span
LEAF_NODE	950:16	950:16	11	+
FIELD	950:18	950:29	11	oneruns [ * bp ]
LEAF_NODE	950:18	950:18	12	oneruns
LEAF_NODE	950:25	950:25	12	[
EXPR	950:26	950:26	12	* bp
UNARY_EXPR	950:26	950:27	13	* bp
UNARY_OPERATOR	950:26	950:26	14	*
LEAF_NODE	950:26	950:26	15	*
FIELD	950:27	950:27	14	bp
LEAF_NODE	950:27	950:27	15	bp
LEAF_NODE	950:29	950:29	12	]
LEAF_NODE	950:30	950:30	11	)
LEAF_NODE	950:31	950:31	9	;
EXPR_STATEMENT	951:2	951:11	6	span += 8 ;
EXPR	951:2	951:2	7	span += 8
ASSIGN	951:2	951:10	8	span += 8
LVAL	951:2	951:2	9	span
FIELD	951:2	951:2	10	span
LEAF_NODE	951:2	951:2	11	span
ASSIGN_OP	951:7	951:7	9	+=
LEAF_NODE	951:7	951:7	10	+=
RVAL	951:10	951:10	9	8
FIELD	951:10	951:10	10	8
LEAF_NODE	951:10	951:10	11	8
LEAF_NODE	951:11	951:11	7	;
EXPR_STATEMENT	952:2	952:11	6	bits -= 8 ;
EXPR	952:2	952:2	7	bits -= 8
ASSIGN	952:2	952:10	8	bits -= 8
LVAL	952:2	952:2	9	bits
FIELD	952:2	952:2	10	bits
LEAF_NODE	952:2	952:2	11	bits
ASSIGN_OP	952:7	952:7	9	-=
LEAF_NODE	952:7	952:7	10	-=
RVAL	952:10	952:10	9	8
FIELD	952:10	952:10	10	8
LEAF_NODE	952:10	952:10	11	8
LEAF_NODE	952:11	952:11	7	;
EXPR_STATEMENT	953:2	953:6	6	bp ++ ;
EXPR	953:2	953:2	7	bp ++
FIELD	953:2	953:4	8	bp ++
LEAF_NODE	953:2	953:2	9	bp
LEAF_NODE	953:4	953:4	9	++
LEAF_NODE	953:6	953:6	7	;
LEAF_NODE	954:1	954:1	5	}
SELECTION	958:1	958:15	3	
KEYWORD	958:1	958:1	4	if
LEAF_NODE	958:1	958:1	5	if
LEAF_NODE	958:4	958:4	4	(
CONDITION	958:5	958:5	4	bits > 0
EXPR	958:5	958:12	5	bits > 0
FIELD	958:5	958:5	6	bits
LEAF_NODE	958:5	958:5	7	bits
REL_OPERATOR	958:10	958:10	6	>
LEAF_NODE	958:10	958:10	7	>
FIELD	958:12	958:12	6	0
LEAF_NODE	958:12	958:12	7	0
LEAF_NODE	958:13	958:13	4	)
STATEMENTS	958:15	961:1	4	
LEAF_NODE	958:15	958:15	5	{
STATEMENTS	959:2	960:2	5	
EXPR_STATEMENT	959:2	959:18	6	n = oneruns [ * bp ] ;
EXPR	959:2	959:2	7	n = oneruns [ * bp ]
ASSIGN	959:2	959:6	8	n = oneruns [ * bp ]
LVAL	959:2	959:2	9	n
FIELD	959:2	959:2	10	n
LEAF_NODE	959:2	959:2	11	n
ASSIGN_OP	959:4	959:4	9	=
LEAF_NODE	959:4	959:4	10	=
RVAL	959:6	959:6	9	oneruns [ * bp ]
FIELD	959:6	959:17	10	oneruns [ * bp ]
LEAF_NODE	959:6	959:6	11	oneruns
LEAF_NODE	959:13	959:13	11	[
EXPR	959:14	959:14	11	* bp
UNARY_EXPR	959:14	959:15	12	* bp
UNARY_OPERATOR	959:14	959:14	13	*
LEAF_NODE	959:14	959:14	14	*
FIELD	959:15	959:15	13	bp
LEAF_NODE	959:15	959:15	14	bp
LEAF_NODE	959:17	959:17	11	]
LEAF_NODE	959:18	959:18	7	;
EXPR_STATEMENT	960:2	960:31	6	span += ( n > bits ? bits : n ) ;
EXPR	960:2	960:2	7	span += ( n > bits ? bits : n )
ASSIGN	960:2	960:10	8	span += ( n > bits ? bits : n )
LVAL	960:2	960:2	9	span
FIELD	960:2	960:2	10	span
LEAF_NODE	960:2	960:2	11	span
ASSIGN_OP	960:7	960:7	9	+=
LEAF_NODE	960:7	960:7	10	+=
RVAL	960:10	960:30	9	( n > bits ? bits : n )
LEAF_NODE	960:10	960:10	10	(
COND_EXPR	960:11	960:29	10	n > bits ? bits : n
CONDITION	960:11	960:15	11	n > bits
FIELD	960:11	960:11	12	n
LEAF_NODE	960:11	960:11	13	n
REL_OPERATOR	960:13	960:13	12	>
LEAF_NODE	960:13	960:13	13	>
FIELD	960:15	960:15	12	bits
LEAF_NODE	960:15	960:15	13	bits
LEAF_NODE	960:20	960:20	11	?
EXPR	960:22	960:22	11	bits
FIELD	960:22	960:22	12	bits
LEAF_NODE	960:22	960:22	13	bits
LEAF_NODE	960:27	960:27	11	:
FIELD	960:29	960:29	11	n
LEAF_NODE	960:29	960:29	12	n
LEAF_NODE	960:30	960:30	10	)
LEAF_NODE	960:31	960:31	7	;
LEAF_NODE	961:1	961:1	5	}
LEAF_NODE	962:1	962:1	3	return
LEAF_NODE	962:8	962:8	3	(
LEAF_NODE	962:9	962:9	3	span
LEAF_NODE	962:13	962:13	3	)
LEAF_NODE	962:14	962:14	3	;
LEAF_NODE	963:0	963:0	2	}
FUNCTION_DEF	985:0	1012:0	1	
RETURN_TYPE	985:0	985:7	2	static int
LEAF_NODE	985:0	985:0	3	static
TYPE_NAME	985:7	985:7	3	int
LEAF_NODE	985:7	985:7	4	int
FUNCTION_NAME	986:0	986:0	2	Fax3Encode1DRow
LEAF_NODE	986:0	986:0	3	Fax3Encode1DRow
PARAMETER_LIST	986:15	986:57	2	( TIFF * tif , unsigned char * bp , uint32 bits )
LEAF_NODE	986:15	986:15	3	(
PARAMETER_DECL	986:16	986:22	3	TIFF * tif
TYPE	986:16	986:20	4	TIFF *
TYPE_NAME	986:16	986:16	5	TIFF
LEAF_NODE	986:16	986:16	6	TIFF
POINTER	986:20	986:20	5	*
LEAF_NODE	986:20	986:20	6	*
NAME	986:22	986:22	4	tif
LEAF_NODE	986:22	986:22	5	tif
LEAF_NODE	986:25	986:25	3	,
PARAMETER_DECL	986:27	986:42	3	unsigned char * bp
TYPE	986:27	986:40	4	unsigned char *
TYPE_NAME	986:27	986:36	5	unsigned char
LEAF_NODE	986:27	986:27	6	unsigned
LEAF_NODE	986:36	986:36	6	char
POINTER	986:40	986:40	5	*
LEAF_NODE	986:40	986:40	6	*
NAME	986:42	986:42	4	bp
LEAF_NODE	986:42	986:42	5	bp
LEAF_NODE	986:44	986:44	3	,
PARAMETER_DECL	986:46	986:53	3	uint32 bits
TYPE	986:46	986:46	4	uint32
TYPE_NAME	986:46	986:46	5	uint32
LEAF_NODE	986:46	986:46	6	uint32
NAME	986:53	986:53	4	bits
LEAF_NODE	986:53	986:53	5	bits
LEAF_NODE	986:57	986:57	3	)
LEAF_NODE	987:0	987:0	2	{
STATEMENTS	988:1	1011:1	2	
SIMPLE_DECL	988:1	988:39	3	Fax3CodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	988:1	988:17	4	Fax3CodecState * sp ; sp = EncoderState ( tif )
TYPE	988:1	988:15	5	Fax3CodecState *
TYPE_NAME	988:1	988:1	6	Fax3CodecState
LEAF_NODE	988:1	988:1	7	Fax3CodecState
POINTER	988:15	988:15	6	*
LEAF_NODE	988:15	988:15	7	*
NAME	988:17	988:17	5	sp
LEAF_NODE	988:17	988:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	988:17	988:17	5	sp = EncoderState ( tif )
ASSIGN	988:17	988:22	6	sp = EncoderState ( tif )
LVAL	988:17	988:17	7	sp
NAME	988:17	988:17	8	sp
LEAF_NODE	988:17	988:17	9	sp
ASSIGN_OP	988:20	988:20	7	=
LEAF_NODE	988:20	988:20	8	=
RVAL	988:22	988:22	7	EncoderState ( tif )
FUNCTION_CALL	988:22	988:38	8	EncoderState ( tif )
CALLEE	988:22	988:22	9	EncoderState
LEAF_NODE	988:22	988:22	10	EncoderState
LEAF_NODE	988:34	988:34	9	(
ARGUMENT	988:35	988:35	9	tif
FIELD	988:35	988:35	10	tif
LEAF_NODE	988:35	988:35	11	tif
LEAF_NODE	988:38	988:38	9	)
LEAF_NODE	988:39	988:39	4	;
SIMPLE_DECL	989:1	989:11	3	int32 span ;
VAR_DECL	989:1	989:7	4	int32 span
TYPE	989:1	989:1	5	int32
TYPE_NAME	989:1	989:1	6	int32
LEAF_NODE	989:1	989:1	7	int32
NAME	989:7	989:7	5	span
LEAF_NODE	989:7	989:7	6	span
LEAF_NODE	989:11	989:11	4	;
SIMPLE_DECL	990:8	990:21	3	uint32 bs ; bs = 0 ;
VAR_DECL	990:8	990:15	4	uint32 bs ; bs = 0
TYPE	990:8	990:8	5	uint32
TYPE_NAME	990:8	990:8	6	uint32
LEAF_NODE	990:8	990:8	7	uint32
NAME	990:15	990:15	5	bs
LEAF_NODE	990:15	990:15	6	bs
LEAF_NODE	0:0	0:0	5	;
INIT	990:15	990:15	5	bs = 0
ASSIGN	990:15	990:20	6	bs = 0
LVAL	990:15	990:15	7	bs
NAME	990:15	990:15	8	bs
LEAF_NODE	990:15	990:15	9	bs
ASSIGN_OP	990:18	990:18	7	=
LEAF_NODE	990:18	990:18	8	=
RVAL	990:20	990:20	7	0
FIELD	990:20	990:20	8	0
LEAF_NODE	990:20	990:20	9	0
LEAF_NODE	990:21	990:21	4	;
ITERATION	992:1	992:10	3	
KEYWORD	992:1	992:1	4	for
LEAF_NODE	992:1	992:1	5	for
LEAF_NODE	992:5	992:5	4	(
FOR_INIT	992:6	992:6	4	;
LEAF_NODE	992:6	992:6	5	;
LEAF_NODE	0:0	0:0	4	CONDITION
LEAF_NODE	992:7	992:7	4	;
LEAF_NODE	0:0	0:0	4	FOR_EXPR
LEAF_NODE	992:8	992:8	4	)
STATEMENTS	992:10	1003:1	4	
LEAF_NODE	992:10	992:10	5	{
STATEMENTS	993:2	1001:2	5	
EXPR_STATEMENT	993:2	993:32	6	span = find0span ( bp , bs , bits ) ;
EXPR	993:2	993:2	7	span = find0span ( bp , bs , bits )
ASSIGN	993:2	993:9	8	span = find0span ( bp , bs , bits )
LVAL	993:2	993:2	9	span
FIELD	993:2	993:2	10	span
LEAF_NODE	993:2	993:2	11	span
ASSIGN_OP	993:7	993:7	9	=
LEAF_NODE	993:7	993:7	10	=
RVAL	993:9	993:9	9	find0span ( bp , bs , bits )
FUNCTION_CALL	993:9	993:31	10	find0span ( bp , bs , bits )
CALLEE	993:9	993:9	11	find0span
LEAF_NODE	993:9	993:9	12	find0span
LEAF_NODE	993:18	993:18	11	(
ARGUMENT	993:19	993:19	11	bp
FIELD	993:19	993:19	12	bp
LEAF_NODE	993:19	993:19	13	bp
LEAF_NODE	993:21	993:21	11	,
ARGUMENT	993:23	993:23	11	bs
FIELD	993:23	993:23	12	bs
LEAF_NODE	993:23	993:23	13	bs
LEAF_NODE	993:25	993:25	11	,
ARGUMENT	993:27	993:27	11	bits
FIELD	993:27	993:27	12	bits
LEAF_NODE	993:27	993:27	13	bits
LEAF_NODE	993:31	993:31	11	)
LEAF_NODE	993:32	993:32	7	;
EXPR_STATEMENT	994:2	994:39	6	putspan ( tif , span , TIFFFaxWhiteCodes ) ;
EXPR	994:2	994:2	7	putspan ( tif , span , TIFFFaxWhiteCodes )
FUNCTION_CALL	994:2	994:38	8	putspan ( tif , span , TIFFFaxWhiteCodes )
CALLEE	994:2	994:2	9	putspan
LEAF_NODE	994:2	994:2	10	putspan
LEAF_NODE	994:9	994:9	9	(
ARGUMENT	994:10	994:10	9	tif
FIELD	994:10	994:10	10	tif
LEAF_NODE	994:10	994:10	11	tif
LEAF_NODE	994:13	994:13	9	,
ARGUMENT	994:15	994:15	9	span
FIELD	994:15	994:15	10	span
LEAF_NODE	994:15	994:15	11	span
LEAF_NODE	994:19	994:19	9	,
ARGUMENT	994:21	994:21	9	TIFFFaxWhiteCodes
FIELD	994:21	994:21	10	TIFFFaxWhiteCodes
LEAF_NODE	994:21	994:21	11	TIFFFaxWhiteCodes
LEAF_NODE	994:38	994:38	9	)
LEAF_NODE	994:39	994:39	7	;
EXPR_STATEMENT	995:2	995:12	6	bs += span ;
EXPR	995:2	995:2	7	bs += span
ASSIGN	995:2	995:8	8	bs += span
LVAL	995:2	995:2	9	bs
FIELD	995:2	995:2	10	bs
LEAF_NODE	995:2	995:2	11	bs
ASSIGN_OP	995:5	995:5	9	+=
LEAF_NODE	995:5	995:5	10	+=
RVAL	995:8	995:8	9	span
FIELD	995:8	995:8	10	span
LEAF_NODE	995:8	995:8	11	span
LEAF_NODE	995:12	995:12	7	;
SELECTION	996:2	997:3	6	
KEYWORD	996:2	996:2	7	if
LEAF_NODE	996:2	996:2	8	if
LEAF_NODE	996:5	996:5	7	(
CONDITION	996:6	996:6	7	bs >= bits
EXPR	996:6	996:12	8	bs >= bits
FIELD	996:6	996:6	9	bs
LEAF_NODE	996:6	996:6	10	bs
REL_OPERATOR	996:9	996:9	9	>=
LEAF_NODE	996:9	996:9	10	>=
FIELD	996:12	996:12	9	bits
LEAF_NODE	996:12	996:12	10	bits
LEAF_NODE	996:16	996:16	7	)
STATEMENTS	997:3	997:3	7	
JUMP_STATEMENT	997:3	997:8	8	break DESTINATION ;
KEYWORD	997:3	997:3	9	break
LEAF_NODE	997:3	997:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	997:8	997:8	9	;
EXPR_STATEMENT	998:2	998:32	6	span = find1span ( bp , bs , bits ) ;
EXPR	998:2	998:2	7	span = find1span ( bp , bs , bits )
ASSIGN	998:2	998:9	8	span = find1span ( bp , bs , bits )
LVAL	998:2	998:2	9	span
FIELD	998:2	998:2	10	span
LEAF_NODE	998:2	998:2	11	span
ASSIGN_OP	998:7	998:7	9	=
LEAF_NODE	998:7	998:7	10	=
RVAL	998:9	998:9	9	find1span ( bp , bs , bits )
FUNCTION_CALL	998:9	998:31	10	find1span ( bp , bs , bits )
CALLEE	998:9	998:9	11	find1span
LEAF_NODE	998:9	998:9	12	find1span
LEAF_NODE	998:18	998:18	11	(
ARGUMENT	998:19	998:19	11	bp
FIELD	998:19	998:19	12	bp
LEAF_NODE	998:19	998:19	13	bp
LEAF_NODE	998:21	998:21	11	,
ARGUMENT	998:23	998:23	11	bs
FIELD	998:23	998:23	12	bs
LEAF_NODE	998:23	998:23	13	bs
LEAF_NODE	998:25	998:25	11	,
ARGUMENT	998:27	998:27	11	bits
FIELD	998:27	998:27	12	bits
LEAF_NODE	998:27	998:27	13	bits
LEAF_NODE	998:31	998:31	11	)
LEAF_NODE	998:32	998:32	7	;
EXPR_STATEMENT	999:2	999:39	6	putspan ( tif , span , TIFFFaxBlackCodes ) ;
EXPR	999:2	999:2	7	putspan ( tif , span , TIFFFaxBlackCodes )
FUNCTION_CALL	999:2	999:38	8	putspan ( tif , span , TIFFFaxBlackCodes )
CALLEE	999:2	999:2	9	putspan
LEAF_NODE	999:2	999:2	10	putspan
LEAF_NODE	999:9	999:9	9	(
ARGUMENT	999:10	999:10	9	tif
FIELD	999:10	999:10	10	tif
LEAF_NODE	999:10	999:10	11	tif
LEAF_NODE	999:13	999:13	9	,
ARGUMENT	999:15	999:15	9	span
FIELD	999:15	999:15	10	span
LEAF_NODE	999:15	999:15	11	span
LEAF_NODE	999:19	999:19	9	,
ARGUMENT	999:21	999:21	9	TIFFFaxBlackCodes
FIELD	999:21	999:21	10	TIFFFaxBlackCodes
LEAF_NODE	999:21	999:21	11	TIFFFaxBlackCodes
LEAF_NODE	999:38	999:38	9	)
LEAF_NODE	999:39	999:39	7	;
EXPR_STATEMENT	1000:2	1000:12	6	bs += span ;
EXPR	1000:2	1000:2	7	bs += span
ASSIGN	1000:2	1000:8	8	bs += span
LVAL	1000:2	1000:2	9	bs
FIELD	1000:2	1000:2	10	bs
LEAF_NODE	1000:2	1000:2	11	bs
ASSIGN_OP	1000:5	1000:5	9	+=
LEAF_NODE	1000:5	1000:5	10	+=
RVAL	1000:8	1000:8	9	span
FIELD	1000:8	1000:8	10	span
LEAF_NODE	1000:8	1000:8	11	span
LEAF_NODE	1000:12	1000:12	7	;
SELECTION	1001:2	1002:3	6	
KEYWORD	1001:2	1001:2	7	if
LEAF_NODE	1001:2	1001:2	8	if
LEAF_NODE	1001:5	1001:5	7	(
CONDITION	1001:6	1001:6	7	bs >= bits
EXPR	1001:6	1001:12	8	bs >= bits
FIELD	1001:6	1001:6	9	bs
LEAF_NODE	1001:6	1001:6	10	bs
REL_OPERATOR	1001:9	1001:9	9	>=
LEAF_NODE	1001:9	1001:9	10	>=
FIELD	1001:12	1001:12	9	bits
LEAF_NODE	1001:12	1001:12	10	bits
LEAF_NODE	1001:16	1001:16	7	)
STATEMENTS	1002:3	1002:3	7	
JUMP_STATEMENT	1002:3	1002:8	8	break DESTINATION ;
KEYWORD	1002:3	1002:3	9	break
LEAF_NODE	1002:3	1002:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	1002:8	1002:8	9	;
LEAF_NODE	1003:1	1003:1	5	}
SELECTION	1004:1	1004:57	3	
KEYWORD	1004:1	1004:1	4	if
LEAF_NODE	1004:1	1004:1	5	if
LEAF_NODE	1004:4	1004:4	4	(
CONDITION	1004:5	1004:5	4	sp -> b . mode & ( FAXMODE_BYTEALIGN | FAXMODE_WORDALIGN )
EXPR	1004:5	1004:54	5	sp -> b . mode & ( FAXMODE_BYTEALIGN | FAXMODE_WORDALIGN )
FIELD	1004:5	1004:11	6	sp -> b . mode
LEAF_NODE	1004:5	1004:5	7	sp
LEAF_NODE	1004:7	1004:7	7	->
LEAF_NODE	1004:9	1004:9	7	b
LEAF_NODE	1004:10	1004:10	7	.
LEAF_NODE	1004:11	1004:11	7	mode
LEAF_NODE	1004:16	1004:16	6	&
LEAF_NODE	1004:18	1004:18	6	(
BIT_OR	1004:19	1004:37	6	FAXMODE_BYTEALIGN | FAXMODE_WORDALIGN
BIT_OR_ELEM	1004:19	1004:19	7	FAXMODE_BYTEALIGN
FIELD	1004:19	1004:19	8	FAXMODE_BYTEALIGN
LEAF_NODE	1004:19	1004:19	9	FAXMODE_BYTEALIGN
LEAF_NODE	1004:36	1004:36	7	|
BIT_OR_ELEM	1004:37	1004:37	7	FAXMODE_WORDALIGN
FIELD	1004:37	1004:37	8	FAXMODE_WORDALIGN
LEAF_NODE	1004:37	1004:37	9	FAXMODE_WORDALIGN
LEAF_NODE	1004:54	1004:54	6	)
LEAF_NODE	1004:55	1004:55	4	)
STATEMENTS	1004:57	1010:1	4	
LEAF_NODE	1004:57	1004:57	5	{
STATEMENTS	1005:2	1007:2	5	
SELECTION	1005:2	1006:3	6	
KEYWORD	1005:2	1005:2	7	if
LEAF_NODE	1005:2	1005:2	8	if
LEAF_NODE	1005:5	1005:5	7	(
CONDITION	1005:6	1005:6	7	sp -> bit != 8
EXPR	1005:6	1005:17	8	sp -> bit != 8
FIELD	1005:6	1005:10	9	sp -> bit
LEAF_NODE	1005:6	1005:6	10	sp
LEAF_NODE	1005:8	1005:8	10	->
LEAF_NODE	1005:10	1005:10	10	bit
EQ_OPERATOR	1005:14	1005:14	9	!=
LEAF_NODE	1005:14	1005:14	10	!=
FIELD	1005:17	1005:17	9	8
LEAF_NODE	1005:17	1005:17	10	8
LEAF_NODE	1005:18	1005:18	7	)
STATEMENTS	1006:3	1006:3	7	
EXPR_STATEMENT	1006:3	1006:25	8	Fax3FlushBits ( tif , sp ) ;
EXPR	1006:3	1006:3	9	Fax3FlushBits ( tif , sp )
FUNCTION_CALL	1006:3	1006:24	10	Fax3FlushBits ( tif , sp )
CALLEE	1006:3	1006:3	11	Fax3FlushBits
LEAF_NODE	1006:3	1006:3	12	Fax3FlushBits
LEAF_NODE	1006:16	1006:16	11	(
ARGUMENT	1006:17	1006:17	11	tif
FIELD	1006:17	1006:17	12	tif
LEAF_NODE	1006:17	1006:17	13	tif
LEAF_NODE	1006:20	1006:20	11	,
ARGUMENT	1006:22	1006:22	11	sp
FIELD	1006:22	1006:22	12	sp
LEAF_NODE	1006:22	1006:22	13	sp
LEAF_NODE	1006:24	1006:24	11	)
LEAF_NODE	1006:25	1006:25	9	;
SELECTION	1007:2	1009:3	6	
KEYWORD	1007:2	1007:2	7	if
LEAF_NODE	1007:2	1007:2	8	if
LEAF_NODE	1007:5	1007:5	7	(
CONDITION	1007:6	1007:6	7	( sp -> b . mode & FAXMODE_WORDALIGN ) && ! isAligned ( tif -> tif_rawcp , uint16 )
EXPR	1007:6	1007:6	8	( sp -> b . mode & FAXMODE_WORDALIGN ) && ! isAligned ( tif -> tif_rawcp , uint16 )
AND	1007:6	1008:6	9	( sp -> b . mode & FAXMODE_WORDALIGN ) && ! isAligned ( tif -> tif_rawcp , uint16 )
EXPR	1007:6	1007:35	10	( sp -> b . mode & FAXMODE_WORDALIGN )
LEAF_NODE	1007:6	1007:6	11	(
FIELD	1007:7	1007:13	11	sp -> b . mode
LEAF_NODE	1007:7	1007:7	12	sp
LEAF_NODE	1007:9	1007:9	12	->
LEAF_NODE	1007:11	1007:11	12	b
LEAF_NODE	1007:12	1007:12	12	.
LEAF_NODE	1007:13	1007:13	12	mode
LEAF_NODE	1007:17	1007:17	11	&
FIELD	1007:18	1007:18	11	FAXMODE_WORDALIGN
LEAF_NODE	1007:18	1007:18	12	FAXMODE_WORDALIGN
LEAF_NODE	1007:35	1007:35	11	)
LEAF_NODE	1007:37	1007:37	10	&&
EXPR	1008:6	1008:6	10	! isAligned ( tif -> tif_rawcp , uint16 )
UNARY_EXPR	1008:6	1008:7	11	! isAligned ( tif -> tif_rawcp , uint16 )
UNARY_OPERATOR	1008:6	1008:6	12	!
LEAF_NODE	1008:6	1008:6	13	!
FUNCTION_CALL	1008:7	1008:39	12	isAligned ( tif -> tif_rawcp , uint16 )
CALLEE	1008:7	1008:7	13	isAligned
LEAF_NODE	1008:7	1008:7	14	isAligned
LEAF_NODE	1008:16	1008:16	13	(
ARGUMENT	1008:17	1008:17	13	tif -> tif_rawcp
FIELD	1008:17	1008:22	14	tif -> tif_rawcp
LEAF_NODE	1008:17	1008:17	15	tif
LEAF_NODE	1008:20	1008:20	15	->
LEAF_NODE	1008:22	1008:22	15	tif_rawcp
LEAF_NODE	1008:31	1008:31	13	,
ARGUMENT	1008:33	1008:33	13	uint16
FIELD	1008:33	1008:33	14	uint16
LEAF_NODE	1008:33	1008:33	15	uint16
LEAF_NODE	1008:39	1008:39	13	)
LEAF_NODE	1008:40	1008:40	7	)
STATEMENTS	1009:3	1009:3	7	
EXPR_STATEMENT	1009:3	1009:25	8	Fax3FlushBits ( tif , sp ) ;
EXPR	1009:3	1009:3	9	Fax3FlushBits ( tif , sp )
FUNCTION_CALL	1009:3	1009:24	10	Fax3FlushBits ( tif , sp )
CALLEE	1009:3	1009:3	11	Fax3FlushBits
LEAF_NODE	1009:3	1009:3	12	Fax3FlushBits
LEAF_NODE	1009:16	1009:16	11	(
ARGUMENT	1009:17	1009:17	11	tif
FIELD	1009:17	1009:17	12	tif
LEAF_NODE	1009:17	1009:17	13	tif
LEAF_NODE	1009:20	1009:20	11	,
ARGUMENT	1009:22	1009:22	11	sp
FIELD	1009:22	1009:22	12	sp
LEAF_NODE	1009:22	1009:22	13	sp
LEAF_NODE	1009:24	1009:24	11	)
LEAF_NODE	1009:25	1009:25	9	;
LEAF_NODE	1010:1	1010:1	5	}
JUMP_STATEMENT	1011:1	1011:11	3	return ( 1 ) ;
KEYWORD	1011:1	1011:1	4	return
LEAF_NODE	1011:1	1011:1	5	return
DESTINATION	1011:8	1011:8	4	( 1 )
EXPR	1011:8	1011:10	5	( 1 )
LEAF_NODE	1011:8	1011:8	6	(
FIELD	1011:9	1011:9	6	1
LEAF_NODE	1011:9	1011:9	7	1
LEAF_NODE	1011:10	1011:10	6	)
LEAF_NODE	1011:11	1011:11	4	;
LEAF_NODE	1012:0	1012:0	2	}
FUNCTION_DEF	1032:0	1076:0	1	
RETURN_TYPE	1032:0	1032:7	2	static int
LEAF_NODE	1032:0	1032:0	3	static
TYPE_NAME	1032:7	1032:7	3	int
LEAF_NODE	1032:7	1032:7	4	int
FUNCTION_NAME	1033:0	1033:0	2	Fax3Encode2DRow
LEAF_NODE	1033:0	1033:0	3	Fax3Encode2DRow
PARAMETER_LIST	1033:15	1033:76	2	( TIFF * tif , unsigned char * bp , unsigned char * rp , uint32 bits )
LEAF_NODE	1033:15	1033:15	3	(
PARAMETER_DECL	1033:16	1033:22	3	TIFF * tif
TYPE	1033:16	1033:20	4	TIFF *
TYPE_NAME	1033:16	1033:16	5	TIFF
LEAF_NODE	1033:16	1033:16	6	TIFF
POINTER	1033:20	1033:20	5	*
LEAF_NODE	1033:20	1033:20	6	*
NAME	1033:22	1033:22	4	tif
LEAF_NODE	1033:22	1033:22	5	tif
LEAF_NODE	1033:25	1033:25	3	,
PARAMETER_DECL	1033:27	1033:42	3	unsigned char * bp
TYPE	1033:27	1033:40	4	unsigned char *
TYPE_NAME	1033:27	1033:36	5	unsigned char
LEAF_NODE	1033:27	1033:27	6	unsigned
LEAF_NODE	1033:36	1033:36	6	char
POINTER	1033:40	1033:40	5	*
LEAF_NODE	1033:40	1033:40	6	*
NAME	1033:42	1033:42	4	bp
LEAF_NODE	1033:42	1033:42	5	bp
LEAF_NODE	1033:44	1033:44	3	,
PARAMETER_DECL	1033:46	1033:61	3	unsigned char * rp
TYPE	1033:46	1033:59	4	unsigned char *
TYPE_NAME	1033:46	1033:55	5	unsigned char
LEAF_NODE	1033:46	1033:46	6	unsigned
LEAF_NODE	1033:55	1033:55	6	char
POINTER	1033:59	1033:59	5	*
LEAF_NODE	1033:59	1033:59	6	*
NAME	1033:61	1033:61	4	rp
LEAF_NODE	1033:61	1033:61	5	rp
LEAF_NODE	1033:63	1033:63	3	,
PARAMETER_DECL	1033:65	1033:72	3	uint32 bits
TYPE	1033:65	1033:65	4	uint32
TYPE_NAME	1033:65	1033:65	5	uint32
LEAF_NODE	1033:65	1033:65	6	uint32
NAME	1033:72	1033:72	4	bits
LEAF_NODE	1033:72	1033:72	5	bits
LEAF_NODE	1033:76	1033:76	3	)
LEAF_NODE	1034:0	1034:0	2	{
STATEMENTS	1036:8	1074:1	2	
SIMPLE_DECL	1036:8	1036:21	3	uint32 a0 ; a0 = 0 ;
VAR_DECL	1036:8	1036:15	4	uint32 a0 ; a0 = 0
TYPE	1036:8	1036:8	5	uint32
TYPE_NAME	1036:8	1036:8	6	uint32
LEAF_NODE	1036:8	1036:8	7	uint32
NAME	1036:15	1036:15	5	a0
LEAF_NODE	1036:15	1036:15	6	a0
LEAF_NODE	0:0	0:0	5	;
INIT	1036:15	1036:15	5	a0 = 0
ASSIGN	1036:15	1036:20	6	a0 = 0
LVAL	1036:15	1036:15	7	a0
NAME	1036:15	1036:15	8	a0
LEAF_NODE	1036:15	1036:15	9	a0
ASSIGN_OP	1036:18	1036:18	7	=
LEAF_NODE	1036:18	1036:18	8	=
RVAL	1036:20	1036:20	7	0
FIELD	1036:20	1036:20	8	0
LEAF_NODE	1036:20	1036:20	9	0
LEAF_NODE	1036:21	1036:21	4	;
SIMPLE_DECL	1037:1	1037:63	3	uint32 a1 ; a1 = ( PIXEL ( bp , 0 ) != 0 ? 0 : finddiff ( bp , 0 , bits , 0 ) ) ;
VAR_DECL	1037:1	1037:8	4	uint32 a1 ; a1 = ( PIXEL ( bp , 0 ) != 0 ? 0 : finddiff ( bp , 0 , bits , 0 ) )
TYPE	1037:1	1037:1	5	uint32
TYPE_NAME	1037:1	1037:1	6	uint32
LEAF_NODE	1037:1	1037:1	7	uint32
NAME	1037:8	1037:8	5	a1
LEAF_NODE	1037:8	1037:8	6	a1
LEAF_NODE	0:0	0:0	5	;
INIT	1037:8	1037:8	5	a1 = ( PIXEL ( bp , 0 ) != 0 ? 0 : finddiff ( bp , 0 , bits , 0 ) )
ASSIGN	1037:8	1037:13	6	a1 = ( PIXEL ( bp , 0 ) != 0 ? 0 : finddiff ( bp , 0 , bits , 0 ) )
LVAL	1037:8	1037:8	7	a1
NAME	1037:8	1037:8	8	a1
LEAF_NODE	1037:8	1037:8	9	a1
ASSIGN_OP	1037:11	1037:11	7	=
LEAF_NODE	1037:11	1037:11	8	=
RVAL	1037:13	1037:62	7	( PIXEL ( bp , 0 ) != 0 ? 0 : finddiff ( bp , 0 , bits , 0 ) )
LEAF_NODE	1037:13	1037:13	8	(
COND_EXPR	1037:14	1037:38	8	PIXEL ( bp , 0 ) != 0 ? 0 : finddiff ( bp , 0 , bits , 0 )
CONDITION	1037:14	1037:30	9	PIXEL ( bp , 0 ) != 0
FUNCTION_CALL	1037:14	1037:25	10	PIXEL ( bp , 0 )
CALLEE	1037:14	1037:14	11	PIXEL
LEAF_NODE	1037:14	1037:14	12	PIXEL
LEAF_NODE	1037:19	1037:19	11	(
ARGUMENT	1037:20	1037:20	11	bp
FIELD	1037:20	1037:20	12	bp
LEAF_NODE	1037:20	1037:20	13	bp
LEAF_NODE	1037:22	1037:22	11	,
ARGUMENT	1037:24	1037:24	11	0
FIELD	1037:24	1037:24	12	0
LEAF_NODE	1037:24	1037:24	13	0
LEAF_NODE	1037:25	1037:25	11	)
EQ_OPERATOR	1037:27	1037:27	10	!=
LEAF_NODE	1037:27	1037:27	11	!=
FIELD	1037:30	1037:30	10	0
LEAF_NODE	1037:30	1037:30	11	0
LEAF_NODE	1037:32	1037:32	9	?
EXPR	1037:34	1037:34	9	0
FIELD	1037:34	1037:34	10	0
LEAF_NODE	1037:34	1037:34	11	0
LEAF_NODE	1037:36	1037:36	9	:
FUNCTION_CALL	1037:38	1037:61	9	finddiff ( bp , 0 , bits , 0 )
CALLEE	1037:38	1037:38	10	finddiff
LEAF_NODE	1037:38	1037:38	11	finddiff
LEAF_NODE	1037:46	1037:46	10	(
ARGUMENT	1037:47	1037:47	10	bp
FIELD	1037:47	1037:47	11	bp
LEAF_NODE	1037:47	1037:47	12	bp
LEAF_NODE	1037:49	1037:49	10	,
ARGUMENT	1037:51	1037:51	10	0
FIELD	1037:51	1037:51	11	0
LEAF_NODE	1037:51	1037:51	12	0
LEAF_NODE	1037:52	1037:52	10	,
ARGUMENT	1037:54	1037:54	10	bits
FIELD	1037:54	1037:54	11	bits
LEAF_NODE	1037:54	1037:54	12	bits
LEAF_NODE	1037:58	1037:58	10	,
ARGUMENT	1037:60	1037:60	10	0
FIELD	1037:60	1037:60	11	0
LEAF_NODE	1037:60	1037:60	12	0
LEAF_NODE	1037:61	1037:61	10	)
LEAF_NODE	1037:62	1037:62	8	)
LEAF_NODE	1037:63	1037:63	4	;
SIMPLE_DECL	1038:1	1038:63	3	uint32 b1 ; b1 = ( PIXEL ( rp , 0 ) != 0 ? 0 : finddiff ( rp , 0 , bits , 0 ) ) ;
VAR_DECL	1038:1	1038:8	4	uint32 b1 ; b1 = ( PIXEL ( rp , 0 ) != 0 ? 0 : finddiff ( rp , 0 , bits , 0 ) )
TYPE	1038:1	1038:1	5	uint32
TYPE_NAME	1038:1	1038:1	6	uint32
LEAF_NODE	1038:1	1038:1	7	uint32
NAME	1038:8	1038:8	5	b1
LEAF_NODE	1038:8	1038:8	6	b1
LEAF_NODE	0:0	0:0	5	;
INIT	1038:8	1038:8	5	b1 = ( PIXEL ( rp , 0 ) != 0 ? 0 : finddiff ( rp , 0 , bits , 0 ) )
ASSIGN	1038:8	1038:13	6	b1 = ( PIXEL ( rp , 0 ) != 0 ? 0 : finddiff ( rp , 0 , bits , 0 ) )
LVAL	1038:8	1038:8	7	b1
NAME	1038:8	1038:8	8	b1
LEAF_NODE	1038:8	1038:8	9	b1
ASSIGN_OP	1038:11	1038:11	7	=
LEAF_NODE	1038:11	1038:11	8	=
RVAL	1038:13	1038:62	7	( PIXEL ( rp , 0 ) != 0 ? 0 : finddiff ( rp , 0 , bits , 0 ) )
LEAF_NODE	1038:13	1038:13	8	(
COND_EXPR	1038:14	1038:38	8	PIXEL ( rp , 0 ) != 0 ? 0 : finddiff ( rp , 0 , bits , 0 )
CONDITION	1038:14	1038:30	9	PIXEL ( rp , 0 ) != 0
FUNCTION_CALL	1038:14	1038:25	10	PIXEL ( rp , 0 )
CALLEE	1038:14	1038:14	11	PIXEL
LEAF_NODE	1038:14	1038:14	12	PIXEL
LEAF_NODE	1038:19	1038:19	11	(
ARGUMENT	1038:20	1038:20	11	rp
FIELD	1038:20	1038:20	12	rp
LEAF_NODE	1038:20	1038:20	13	rp
LEAF_NODE	1038:22	1038:22	11	,
ARGUMENT	1038:24	1038:24	11	0
FIELD	1038:24	1038:24	12	0
LEAF_NODE	1038:24	1038:24	13	0
LEAF_NODE	1038:25	1038:25	11	)
EQ_OPERATOR	1038:27	1038:27	10	!=
LEAF_NODE	1038:27	1038:27	11	!=
FIELD	1038:30	1038:30	10	0
LEAF_NODE	1038:30	1038:30	11	0
LEAF_NODE	1038:32	1038:32	9	?
EXPR	1038:34	1038:34	9	0
FIELD	1038:34	1038:34	10	0
LEAF_NODE	1038:34	1038:34	11	0
LEAF_NODE	1038:36	1038:36	9	:
FUNCTION_CALL	1038:38	1038:61	9	finddiff ( rp , 0 , bits , 0 )
CALLEE	1038:38	1038:38	10	finddiff
LEAF_NODE	1038:38	1038:38	11	finddiff
LEAF_NODE	1038:46	1038:46	10	(
ARGUMENT	1038:47	1038:47	10	rp
FIELD	1038:47	1038:47	11	rp
LEAF_NODE	1038:47	1038:47	12	rp
LEAF_NODE	1038:49	1038:49	10	,
ARGUMENT	1038:51	1038:51	10	0
FIELD	1038:51	1038:51	11	0
LEAF_NODE	1038:51	1038:51	12	0
LEAF_NODE	1038:52	1038:52	10	,
ARGUMENT	1038:54	1038:54	10	bits
FIELD	1038:54	1038:54	11	bits
LEAF_NODE	1038:54	1038:54	12	bits
LEAF_NODE	1038:58	1038:58	10	,
ARGUMENT	1038:60	1038:60	10	0
FIELD	1038:60	1038:60	11	0
LEAF_NODE	1038:60	1038:60	12	0
LEAF_NODE	1038:61	1038:61	10	)
LEAF_NODE	1038:62	1038:62	8	)
LEAF_NODE	1038:63	1038:63	4	;
SIMPLE_DECL	1039:1	1039:14	3	uint32 a2 , uint32 b2 ;
INIT_DECL_LIST	1039:1	1039:1	4	uint32 a2 , uint32 b2
VAR_DECL	1039:1	1039:8	5	uint32 a2
TYPE	1039:1	1039:1	6	uint32
TYPE_NAME	1039:1	1039:1	7	uint32
LEAF_NODE	1039:1	1039:1	8	uint32
NAME	1039:8	1039:8	6	a2
LEAF_NODE	1039:8	1039:8	7	a2
LEAF_NODE	1039:10	1039:10	5	,
VAR_DECL	1039:1	1039:12	5	uint32 b2
TYPE	1039:1	1039:1	6	uint32
TYPE_NAME	1039:1	1039:1	7	uint32
LEAF_NODE	1039:1	1039:1	8	uint32
NAME	1039:12	1039:12	6	b2
LEAF_NODE	1039:12	1039:12	7	b2
LEAF_NODE	1039:14	1039:14	4	;
ITERATION	1041:1	1041:10	3	
KEYWORD	1041:1	1041:1	4	for
LEAF_NODE	1041:1	1041:1	5	for
LEAF_NODE	1041:5	1041:5	4	(
FOR_INIT	1041:6	1041:6	4	;
LEAF_NODE	1041:6	1041:6	5	;
LEAF_NODE	0:0	0:0	4	CONDITION
LEAF_NODE	1041:7	1041:7	4	;
LEAF_NODE	0:0	0:0	4	FOR_EXPR
LEAF_NODE	1041:8	1041:8	4	)
STATEMENTS	1041:10	1073:1	4	
LEAF_NODE	1041:10	1041:10	5	{
STATEMENTS	1042:2	1072:2	5	
EXPR_STATEMENT	1042:2	1042:44	6	b2 = finddiff2 ( rp , b1 , bits , PIXEL ( rp , b1 ) ) ;
EXPR	1042:2	1042:2	7	b2 = finddiff2 ( rp , b1 , bits , PIXEL ( rp , b1 ) )
ASSIGN	1042:2	1042:7	8	b2 = finddiff2 ( rp , b1 , bits , PIXEL ( rp , b1 ) )
LVAL	1042:2	1042:2	9	b2
FIELD	1042:2	1042:2	10	b2
LEAF_NODE	1042:2	1042:2	11	b2
ASSIGN_OP	1042:5	1042:5	9	=
LEAF_NODE	1042:5	1042:5	10	=
RVAL	1042:7	1042:7	9	finddiff2 ( rp , b1 , bits , PIXEL ( rp , b1 ) )
FUNCTION_CALL	1042:7	1042:43	10	finddiff2 ( rp , b1 , bits , PIXEL ( rp , b1 ) )
CALLEE	1042:7	1042:7	11	finddiff2
LEAF_NODE	1042:7	1042:7	12	finddiff2
LEAF_NODE	1042:16	1042:16	11	(
ARGUMENT	1042:17	1042:17	11	rp
FIELD	1042:17	1042:17	12	rp
LEAF_NODE	1042:17	1042:17	13	rp
LEAF_NODE	1042:19	1042:19	11	,
ARGUMENT	1042:21	1042:21	11	b1
FIELD	1042:21	1042:21	12	b1
LEAF_NODE	1042:21	1042:21	13	b1
LEAF_NODE	1042:23	1042:23	11	,
ARGUMENT	1042:25	1042:25	11	bits
FIELD	1042:25	1042:25	12	bits
LEAF_NODE	1042:25	1042:25	13	bits
LEAF_NODE	1042:29	1042:29	11	,
ARGUMENT	1042:31	1042:31	11	PIXEL ( rp , b1 )
FUNCTION_CALL	1042:31	1042:42	12	PIXEL ( rp , b1 )
CALLEE	1042:31	1042:31	13	PIXEL
LEAF_NODE	1042:31	1042:31	14	PIXEL
LEAF_NODE	1042:36	1042:36	13	(
ARGUMENT	1042:37	1042:37	13	rp
FIELD	1042:37	1042:37	14	rp
LEAF_NODE	1042:37	1042:37	15	rp
LEAF_NODE	1042:39	1042:39	13	,
ARGUMENT	1042:40	1042:40	13	b1
FIELD	1042:40	1042:40	14	b1
LEAF_NODE	1042:40	1042:40	15	b1
LEAF_NODE	1042:42	1042:42	13	)
LEAF_NODE	1042:43	1042:43	11	)
LEAF_NODE	1042:44	1042:44	7	;
SELECTION	1043:2	1043:16	6	
KEYWORD	1043:2	1043:2	7	if
LEAF_NODE	1043:2	1043:2	8	if
LEAF_NODE	1043:5	1043:5	7	(
CONDITION	1043:6	1043:6	7	b2 >= a1
EXPR	1043:6	1043:12	8	b2 >= a1
FIELD	1043:6	1043:6	9	b2
LEAF_NODE	1043:6	1043:6	10	b2
REL_OPERATOR	1043:9	1043:9	9	>=
LEAF_NODE	1043:9	1043:9	10	>=
FIELD	1043:12	1043:12	9	a1
LEAF_NODE	1043:12	1043:12	10	a1
LEAF_NODE	1043:14	1043:14	7	)
STATEMENTS	1043:16	1064:2	7	
LEAF_NODE	1043:16	1043:16	8	{
STATEMENTS	1047:3	1060:5	8	
SIMPLE_DECL	1047:3	1048:72	9	int32 d ; d = ( b1 >= a1 && b1 - a1 <= 3U ) ? ( int32 ) ( b1 - a1 ) : ( b1 < a1 && a1 - b1 <= 3U ) ? - ( int32 ) ( a1 - b1 ) : 0x7FFFFFFF ;
VAR_DECL	1047:3	1047:9	10	int32 d ; d = ( b1 >= a1 && b1 - a1 <= 3U ) ? ( int32 ) ( b1 - a1 ) : ( b1 < a1 && a1 - b1 <= 3U ) ? - ( int32 ) ( a1 - b1 ) : 0x7FFFFFFF
TYPE	1047:3	1047:3	11	int32
TYPE_NAME	1047:3	1047:3	12	int32
LEAF_NODE	1047:3	1047:3	13	int32
NAME	1047:9	1047:9	11	d
LEAF_NODE	1047:9	1047:9	12	d
LEAF_NODE	0:0	0:0	11	;
INIT	1047:9	1047:9	11	d = ( b1 >= a1 && b1 - a1 <= 3U ) ? ( int32 ) ( b1 - a1 ) : ( b1 < a1 && a1 - b1 <= 3U ) ? - ( int32 ) ( a1 - b1 ) : 0x7FFFFFFF
ASSIGN	1047:9	1047:13	12	d = ( b1 >= a1 && b1 - a1 <= 3U ) ? ( int32 ) ( b1 - a1 ) : ( b1 < a1 && a1 - b1 <= 3U ) ? - ( int32 ) ( a1 - b1 ) : 0x7FFFFFFF
LVAL	1047:9	1047:9	13	d
NAME	1047:9	1047:9	14	d
LEAF_NODE	1047:9	1047:9	15	d
ASSIGN_OP	1047:11	1047:11	13	=
LEAF_NODE	1047:11	1047:11	14	=
RVAL	1047:13	1047:13	13	( b1 >= a1 && b1 - a1 <= 3U ) ? ( int32 ) ( b1 - a1 ) : ( b1 < a1 && a1 - b1 <= 3U ) ? - ( int32 ) ( a1 - b1 ) : 0x7FFFFFFF
COND_EXPR	1047:13	1048:13	14	( b1 >= a1 && b1 - a1 <= 3U ) ? ( int32 ) ( b1 - a1 ) : ( b1 < a1 && a1 - b1 <= 3U ) ? - ( int32 ) ( a1 - b1 ) : 0x7FFFFFFF
CONDITION	1047:13	1047:39	15	( b1 >= a1 && b1 - a1 <= 3U )
LEAF_NODE	1047:13	1047:13	16	(
AND	1047:14	1047:26	16	b1 >= a1 && b1 - a1 <= 3U
EXPR	1047:14	1047:20	17	b1 >= a1
FIELD	1047:14	1047:14	18	b1
LEAF_NODE	1047:14	1047:14	19	b1
REL_OPERATOR	1047:17	1047:17	18	>=
LEAF_NODE	1047:17	1047:17	19	>=
FIELD	1047:20	1047:20	18	a1
LEAF_NODE	1047:20	1047:20	19	a1
LEAF_NODE	1047:23	1047:23	17	&&
EXPR	1047:26	1047:37	17	b1 - a1 <= 3U
FIELD	1047:26	1047:26	18	b1
LEAF_NODE	1047:26	1047:26	19	b1
LEAF_NODE	1047:29	1047:29	18	-
FIELD	1047:31	1047:31	18	a1
LEAF_NODE	1047:31	1047:31	19	a1
REL_OPERATOR	1047:34	1047:34	18	<=
LEAF_NODE	1047:34	1047:34	19	<=
FIELD	1047:37	1047:37	18	3U
LEAF_NODE	1047:37	1047:37	19	3U
LEAF_NODE	1047:39	1047:39	16	)
LEAF_NODE	1047:41	1047:41	15	?
EXPR	1047:43	1047:58	15	( int32 ) ( b1 - a1 )
LEAF_NODE	1047:43	1047:43	16	(
TYPE_NAME	1047:44	1047:44	16	int32
LEAF_NODE	1047:44	1047:44	17	int32
LEAF_NODE	1047:49	1047:49	16	)
LEAF_NODE	1047:50	1047:50	16	(
FIELD	1047:51	1047:51	16	b1
LEAF_NODE	1047:51	1047:51	17	b1
LEAF_NODE	1047:54	1047:54	16	-
FIELD	1047:56	1047:56	16	a1
LEAF_NODE	1047:56	1047:56	17	a1
LEAF_NODE	1047:58	1047:58	16	)
LEAF_NODE	1047:59	1047:59	15	:
COND_EXPR	1048:13	1048:62	15	( b1 < a1 && a1 - b1 <= 3U ) ? - ( int32 ) ( a1 - b1 ) : 0x7FFFFFFF
CONDITION	1048:13	1048:38	16	( b1 < a1 && a1 - b1 <= 3U )
LEAF_NODE	1048:13	1048:13	17	(
AND	1048:14	1048:25	17	b1 < a1 && a1 - b1 <= 3U
EXPR	1048:14	1048:19	18	b1 < a1
FIELD	1048:14	1048:14	19	b1
LEAF_NODE	1048:14	1048:14	20	b1
REL_OPERATOR	1048:17	1048:17	19	<
LEAF_NODE	1048:17	1048:17	20	<
FIELD	1048:19	1048:19	19	a1
LEAF_NODE	1048:19	1048:19	20	a1
LEAF_NODE	1048:22	1048:22	18	&&
EXPR	1048:25	1048:36	18	a1 - b1 <= 3U
FIELD	1048:25	1048:25	19	a1
LEAF_NODE	1048:25	1048:25	20	a1
LEAF_NODE	1048:28	1048:28	19	-
FIELD	1048:30	1048:30	19	b1
LEAF_NODE	1048:30	1048:30	20	b1
REL_OPERATOR	1048:33	1048:33	19	<=
LEAF_NODE	1048:33	1048:33	20	<=
FIELD	1048:36	1048:36	19	3U
LEAF_NODE	1048:36	1048:36	20	3U
LEAF_NODE	1048:38	1048:38	17	)
LEAF_NODE	1048:40	1048:40	16	?
EXPR	1048:42	1048:42	16	- ( int32 ) ( a1 - b1 )
UNARY_EXPR	1048:42	1048:43	17	- ( int32 ) ( a1 - b1 )
UNARY_OPERATOR	1048:42	1048:42	18	-
LEAF_NODE	1048:42	1048:42	19	-
FUNCTION_CALL	1048:43	1048:58	18	( int32 ) ( a1 - b1 )
CALLEE	1048:43	1048:49	19	( int32 )
LEAF_NODE	1048:43	1048:43	20	(
FIELD	1048:44	1048:44	20	int32
LEAF_NODE	1048:44	1048:44	21	int32
LEAF_NODE	1048:49	1048:49	20	)
LEAF_NODE	1048:50	1048:50	19	(
ARGUMENT	1048:51	1048:56	19	a1 - b1
FIELD	1048:51	1048:51	20	a1
LEAF_NODE	1048:51	1048:51	21	a1
LEAF_NODE	1048:54	1048:54	20	-
FIELD	1048:56	1048:56	20	b1
LEAF_NODE	1048:56	1048:56	21	b1
LEAF_NODE	1048:58	1048:58	19	)
LEAF_NODE	1048:60	1048:60	16	:
FIELD	1048:62	1048:62	16	0x7FFFFFFF
LEAF_NODE	1048:62	1048:62	17	0x7FFFFFFF
LEAF_NODE	1048:72	1048:72	10	;
SELECTION	1049:3	1049:29	9	
KEYWORD	1049:3	1049:3	10	if
LEAF_NODE	1049:3	1049:3	11	if
LEAF_NODE	1049:6	1049:6	10	(
CONDITION	1049:7	1049:7	10	! ( - 3 <= d && d <= 3 )
EXPR	1049:7	1049:7	11	! ( - 3 <= d && d <= 3 )
UNARY_EXPR	1049:7	1049:26	12	! ( - 3 <= d && d <= 3 )
UNARY_OPERATOR	1049:7	1049:7	13	!
LEAF_NODE	1049:7	1049:7	14	!
LEAF_NODE	1049:8	1049:8	13	(
AND	1049:9	1049:20	13	- 3 <= d && d <= 3
EXPR	1049:9	1049:15	14	- 3 <= d
UNARY_EXPR	1049:9	1049:10	15	- 3
UNARY_OPERATOR	1049:9	1049:9	16	-
LEAF_NODE	1049:9	1049:9	17	-
FIELD	1049:10	1049:10	16	3
LEAF_NODE	1049:10	1049:10	17	3
REL_OPERATOR	1049:12	1049:12	15	<=
LEAF_NODE	1049:12	1049:12	16	<=
FIELD	1049:15	1049:15	15	d
LEAF_NODE	1049:15	1049:15	16	d
LEAF_NODE	1049:17	1049:17	14	&&
EXPR	1049:20	1049:25	14	d <= 3
FIELD	1049:20	1049:20	15	d
LEAF_NODE	1049:20	1049:20	16	d
REL_OPERATOR	1049:22	1049:22	15	<=
LEAF_NODE	1049:22	1049:22	16	<=
FIELD	1049:25	1049:25	15	3
LEAF_NODE	1049:25	1049:25	16	3
LEAF_NODE	1049:26	1049:26	13	)
LEAF_NODE	1049:27	1049:27	10	)
STATEMENTS	1049:29	1060:3	10	
LEAF_NODE	1049:29	1049:29	11	{
STATEMENTS	1050:4	1059:4	11	
EXPR_STATEMENT	1050:4	1050:46	12	a2 = finddiff2 ( bp , a1 , bits , PIXEL ( bp , a1 ) ) ;
EXPR	1050:4	1050:4	13	a2 = finddiff2 ( bp , a1 , bits , PIXEL ( bp , a1 ) )
ASSIGN	1050:4	1050:9	14	a2 = finddiff2 ( bp , a1 , bits , PIXEL ( bp , a1 ) )
LVAL	1050:4	1050:4	15	a2
FIELD	1050:4	1050:4	16	a2
LEAF_NODE	1050:4	1050:4	17	a2
ASSIGN_OP	1050:7	1050:7	15	=
LEAF_NODE	1050:7	1050:7	16	=
RVAL	1050:9	1050:9	15	finddiff2 ( bp , a1 , bits , PIXEL ( bp , a1 ) )
FUNCTION_CALL	1050:9	1050:45	16	finddiff2 ( bp , a1 , bits , PIXEL ( bp , a1 ) )
CALLEE	1050:9	1050:9	17	finddiff2
LEAF_NODE	1050:9	1050:9	18	finddiff2
LEAF_NODE	1050:18	1050:18	17	(
ARGUMENT	1050:19	1050:19	17	bp
FIELD	1050:19	1050:19	18	bp
LEAF_NODE	1050:19	1050:19	19	bp
LEAF_NODE	1050:21	1050:21	17	,
ARGUMENT	1050:23	1050:23	17	a1
FIELD	1050:23	1050:23	18	a1
LEAF_NODE	1050:23	1050:23	19	a1
LEAF_NODE	1050:25	1050:25	17	,
ARGUMENT	1050:27	1050:27	17	bits
FIELD	1050:27	1050:27	18	bits
LEAF_NODE	1050:27	1050:27	19	bits
LEAF_NODE	1050:31	1050:31	17	,
ARGUMENT	1050:33	1050:33	17	PIXEL ( bp , a1 )
FUNCTION_CALL	1050:33	1050:44	18	PIXEL ( bp , a1 )
CALLEE	1050:33	1050:33	19	PIXEL
LEAF_NODE	1050:33	1050:33	20	PIXEL
LEAF_NODE	1050:38	1050:38	19	(
ARGUMENT	1050:39	1050:39	19	bp
FIELD	1050:39	1050:39	20	bp
LEAF_NODE	1050:39	1050:39	21	bp
LEAF_NODE	1050:41	1050:41	19	,
ARGUMENT	1050:42	1050:42	19	a1
FIELD	1050:42	1050:42	20	a1
LEAF_NODE	1050:42	1050:42	21	a1
LEAF_NODE	1050:44	1050:44	19	)
LEAF_NODE	1050:45	1050:45	17	)
LEAF_NODE	1050:46	1050:46	13	;
EXPR_STATEMENT	1051:4	1051:28	12	putcode ( tif , & horizcode ) ;
EXPR	1051:4	1051:4	13	putcode ( tif , & horizcode )
FUNCTION_CALL	1051:4	1051:27	14	putcode ( tif , & horizcode )
CALLEE	1051:4	1051:4	15	putcode
LEAF_NODE	1051:4	1051:4	16	putcode
LEAF_NODE	1051:11	1051:11	15	(
ARGUMENT	1051:12	1051:12	15	tif
FIELD	1051:12	1051:12	16	tif
LEAF_NODE	1051:12	1051:12	17	tif
LEAF_NODE	1051:15	1051:15	15	,
ARGUMENT	1051:17	1051:17	15	& horizcode
UNARY_EXPR	1051:17	1051:18	16	& horizcode
UNARY_OPERATOR	1051:17	1051:17	17	&
LEAF_NODE	1051:17	1051:17	18	&
FIELD	1051:18	1051:18	17	horizcode
LEAF_NODE	1051:18	1051:18	18	horizcode
LEAF_NODE	1051:27	1051:27	15	)
LEAF_NODE	1051:28	1051:28	13	;
SELECTION	1052:4	1052:42	12	
KEYWORD	1052:4	1052:4	13	if
LEAF_NODE	1052:4	1052:4	14	if
LEAF_NODE	1052:7	1052:7	13	(
CONDITION	1052:8	1052:8	13	a0 + a1 == 0 || PIXEL ( bp , a0 ) == 0
EXPR	1052:8	1052:8	14	a0 + a1 == 0 || PIXEL ( bp , a0 ) == 0
OR	1052:8	1052:22	15	a0 + a1 == 0 || PIXEL ( bp , a0 ) == 0
EXPR	1052:8	1052:17	16	a0 + a1 == 0
FIELD	1052:8	1052:8	17	a0
LEAF_NODE	1052:8	1052:8	18	a0
LEAF_NODE	1052:10	1052:10	17	+
FIELD	1052:11	1052:11	17	a1
LEAF_NODE	1052:11	1052:11	18	a1
EQ_OPERATOR	1052:14	1052:14	17	==
LEAF_NODE	1052:14	1052:14	18	==
FIELD	1052:17	1052:17	17	0
LEAF_NODE	1052:17	1052:17	18	0
LEAF_NODE	1052:19	1052:19	16	||
EXPR	1052:22	1052:39	16	PIXEL ( bp , a0 ) == 0
FUNCTION_CALL	1052:22	1052:34	17	PIXEL ( bp , a0 )
CALLEE	1052:22	1052:22	18	PIXEL
LEAF_NODE	1052:22	1052:22	19	PIXEL
LEAF_NODE	1052:27	1052:27	18	(
ARGUMENT	1052:28	1052:28	18	bp
FIELD	1052:28	1052:28	19	bp
LEAF_NODE	1052:28	1052:28	20	bp
LEAF_NODE	1052:30	1052:30	18	,
ARGUMENT	1052:32	1052:32	18	a0
FIELD	1052:32	1052:32	19	a0
LEAF_NODE	1052:32	1052:32	20	a0
LEAF_NODE	1052:34	1052:34	18	)
EQ_OPERATOR	1052:36	1052:36	17	==
LEAF_NODE	1052:36	1052:36	18	==
FIELD	1052:39	1052:39	17	0
LEAF_NODE	1052:39	1052:39	18	0
LEAF_NODE	1052:40	1052:40	13	)
STATEMENTS	1052:42	1055:4	13	
LEAF_NODE	1052:42	1052:42	14	{
STATEMENTS	1053:5	1054:5	14	
EXPR_STATEMENT	1053:5	1053:43	15	putspan ( tif , a1 - a0 , TIFFFaxWhiteCodes ) ;
EXPR	1053:5	1053:5	16	putspan ( tif , a1 - a0 , TIFFFaxWhiteCodes )
FUNCTION_CALL	1053:5	1053:42	17	putspan ( tif , a1 - a0 , TIFFFaxWhiteCodes )
CALLEE	1053:5	1053:5	18	putspan
LEAF_NODE	1053:5	1053:5	19	putspan
LEAF_NODE	1053:12	1053:12	18	(
ARGUMENT	1053:13	1053:13	18	tif
FIELD	1053:13	1053:13	19	tif
LEAF_NODE	1053:13	1053:13	20	tif
LEAF_NODE	1053:16	1053:16	18	,
ARGUMENT	1053:18	1053:21	18	a1 - a0
FIELD	1053:18	1053:18	19	a1
LEAF_NODE	1053:18	1053:18	20	a1
LEAF_NODE	1053:20	1053:20	19	-
FIELD	1053:21	1053:21	19	a0
LEAF_NODE	1053:21	1053:21	20	a0
LEAF_NODE	1053:23	1053:23	18	,
ARGUMENT	1053:25	1053:25	18	TIFFFaxWhiteCodes
FIELD	1053:25	1053:25	19	TIFFFaxWhiteCodes
LEAF_NODE	1053:25	1053:25	20	TIFFFaxWhiteCodes
LEAF_NODE	1053:42	1053:42	18	)
LEAF_NODE	1053:43	1053:43	16	;
EXPR_STATEMENT	1054:5	1054:43	15	putspan ( tif , a2 - a1 , TIFFFaxBlackCodes ) ;
EXPR	1054:5	1054:5	16	putspan ( tif , a2 - a1 , TIFFFaxBlackCodes )
FUNCTION_CALL	1054:5	1054:42	17	putspan ( tif , a2 - a1 , TIFFFaxBlackCodes )
CALLEE	1054:5	1054:5	18	putspan
LEAF_NODE	1054:5	1054:5	19	putspan
LEAF_NODE	1054:12	1054:12	18	(
ARGUMENT	1054:13	1054:13	18	tif
FIELD	1054:13	1054:13	19	tif
LEAF_NODE	1054:13	1054:13	20	tif
LEAF_NODE	1054:16	1054:16	18	,
ARGUMENT	1054:18	1054:21	18	a2 - a1
FIELD	1054:18	1054:18	19	a2
LEAF_NODE	1054:18	1054:18	20	a2
LEAF_NODE	1054:20	1054:20	19	-
FIELD	1054:21	1054:21	19	a1
LEAF_NODE	1054:21	1054:21	20	a1
LEAF_NODE	1054:23	1054:23	18	,
ARGUMENT	1054:25	1054:25	18	TIFFFaxBlackCodes
FIELD	1054:25	1054:25	19	TIFFFaxBlackCodes
LEAF_NODE	1054:25	1054:25	20	TIFFFaxBlackCodes
LEAF_NODE	1054:42	1054:42	18	)
LEAF_NODE	1054:43	1054:43	16	;
LEAF_NODE	1055:4	1055:4	14	}
SELECTION	1055:6	1055:11	12	
KEYWORD	1055:6	1055:6	13	else
LEAF_NODE	1055:6	1055:6	14	else
STATEMENTS	1055:11	1058:4	13	
LEAF_NODE	1055:11	1055:11	14	{
STATEMENTS	1056:5	1057:5	14	
EXPR_STATEMENT	1056:5	1056:43	15	putspan ( tif , a1 - a0 , TIFFFaxBlackCodes ) ;
EXPR	1056:5	1056:5	16	putspan ( tif , a1 - a0 , TIFFFaxBlackCodes )
FUNCTION_CALL	1056:5	1056:42	17	putspan ( tif , a1 - a0 , TIFFFaxBlackCodes )
CALLEE	1056:5	1056:5	18	putspan
LEAF_NODE	1056:5	1056:5	19	putspan
LEAF_NODE	1056:12	1056:12	18	(
ARGUMENT	1056:13	1056:13	18	tif
FIELD	1056:13	1056:13	19	tif
LEAF_NODE	1056:13	1056:13	20	tif
LEAF_NODE	1056:16	1056:16	18	,
ARGUMENT	1056:18	1056:21	18	a1 - a0
FIELD	1056:18	1056:18	19	a1
LEAF_NODE	1056:18	1056:18	20	a1
LEAF_NODE	1056:20	1056:20	19	-
FIELD	1056:21	1056:21	19	a0
LEAF_NODE	1056:21	1056:21	20	a0
LEAF_NODE	1056:23	1056:23	18	,
ARGUMENT	1056:25	1056:25	18	TIFFFaxBlackCodes
FIELD	1056:25	1056:25	19	TIFFFaxBlackCodes
LEAF_NODE	1056:25	1056:25	20	TIFFFaxBlackCodes
LEAF_NODE	1056:42	1056:42	18	)
LEAF_NODE	1056:43	1056:43	16	;
EXPR_STATEMENT	1057:5	1057:43	15	putspan ( tif , a2 - a1 , TIFFFaxWhiteCodes ) ;
EXPR	1057:5	1057:5	16	putspan ( tif , a2 - a1 , TIFFFaxWhiteCodes )
FUNCTION_CALL	1057:5	1057:42	17	putspan ( tif , a2 - a1 , TIFFFaxWhiteCodes )
CALLEE	1057:5	1057:5	18	putspan
LEAF_NODE	1057:5	1057:5	19	putspan
LEAF_NODE	1057:12	1057:12	18	(
ARGUMENT	1057:13	1057:13	18	tif
FIELD	1057:13	1057:13	19	tif
LEAF_NODE	1057:13	1057:13	20	tif
LEAF_NODE	1057:16	1057:16	18	,
ARGUMENT	1057:18	1057:21	18	a2 - a1
FIELD	1057:18	1057:18	19	a2
LEAF_NODE	1057:18	1057:18	20	a2
LEAF_NODE	1057:20	1057:20	19	-
FIELD	1057:21	1057:21	19	a1
LEAF_NODE	1057:21	1057:21	20	a1
LEAF_NODE	1057:23	1057:23	18	,
ARGUMENT	1057:25	1057:25	18	TIFFFaxWhiteCodes
FIELD	1057:25	1057:25	19	TIFFFaxWhiteCodes
LEAF_NODE	1057:25	1057:25	20	TIFFFaxWhiteCodes
LEAF_NODE	1057:42	1057:42	18	)
LEAF_NODE	1057:43	1057:43	16	;
LEAF_NODE	1058:4	1058:4	14	}
EXPR_STATEMENT	1059:4	1059:11	12	a0 = a2 ;
EXPR	1059:4	1059:4	13	a0 = a2
ASSIGN	1059:4	1059:9	14	a0 = a2
LVAL	1059:4	1059:4	15	a0
FIELD	1059:4	1059:4	16	a0
LEAF_NODE	1059:4	1059:4	17	a0
ASSIGN_OP	1059:7	1059:7	15	=
LEAF_NODE	1059:7	1059:7	16	=
RVAL	1059:9	1059:9	15	a2
FIELD	1059:9	1059:9	16	a2
LEAF_NODE	1059:9	1059:9	17	a2
LEAF_NODE	1059:11	1059:11	13	;
LEAF_NODE	1060:3	1060:3	11	}
SELECTION	1060:5	1060:10	9	
KEYWORD	1060:5	1060:5	10	else
LEAF_NODE	1060:5	1060:5	11	else
STATEMENTS	1060:10	1063:3	10	
LEAF_NODE	1060:10	1060:10	11	{
STATEMENTS	1061:4	1062:4	11	
EXPR_STATEMENT	1061:4	1061:30	12	putcode ( tif , & vcodes [ d + 3 ] ) ;
EXPR	1061:4	1061:4	13	putcode ( tif , & vcodes [ d + 3 ] )
FUNCTION_CALL	1061:4	1061:29	14	putcode ( tif , & vcodes [ d + 3 ] )
CALLEE	1061:4	1061:4	15	putcode
LEAF_NODE	1061:4	1061:4	16	putcode
LEAF_NODE	1061:11	1061:11	15	(
ARGUMENT	1061:12	1061:12	15	tif
FIELD	1061:12	1061:12	16	tif
LEAF_NODE	1061:12	1061:12	17	tif
LEAF_NODE	1061:15	1061:15	15	,
ARGUMENT	1061:17	1061:17	15	& vcodes [ d + 3 ]
UNARY_EXPR	1061:17	1061:18	16	& vcodes [ d + 3 ]
UNARY_OPERATOR	1061:17	1061:17	17	&
LEAF_NODE	1061:17	1061:17	18	&
FIELD	1061:18	1061:28	17	vcodes [ d + 3 ]
LEAF_NODE	1061:18	1061:18	18	vcodes
LEAF_NODE	1061:24	1061:24	18	[
EXPR	1061:25	1061:27	18	d + 3
FIELD	1061:25	1061:25	19	d
LEAF_NODE	1061:25	1061:25	20	d
LEAF_NODE	1061:26	1061:26	19	+
FIELD	1061:27	1061:27	19	3
LEAF_NODE	1061:27	1061:27	20	3
LEAF_NODE	1061:28	1061:28	18	]
LEAF_NODE	1061:29	1061:29	15	)
LEAF_NODE	1061:30	1061:30	13	;
EXPR_STATEMENT	1062:4	1062:11	12	a0 = a1 ;
EXPR	1062:4	1062:4	13	a0 = a1
ASSIGN	1062:4	1062:9	14	a0 = a1
LVAL	1062:4	1062:4	15	a0
FIELD	1062:4	1062:4	16	a0
LEAF_NODE	1062:4	1062:4	17	a0
ASSIGN_OP	1062:7	1062:7	15	=
LEAF_NODE	1062:7	1062:7	16	=
RVAL	1062:9	1062:9	15	a1
FIELD	1062:9	1062:9	16	a1
LEAF_NODE	1062:9	1062:9	17	a1
LEAF_NODE	1062:11	1062:11	13	;
LEAF_NODE	1063:3	1063:3	11	}
LEAF_NODE	1064:2	1064:2	8	}
SELECTION	1064:4	1064:9	6	
KEYWORD	1064:4	1064:4	7	else
LEAF_NODE	1064:4	1064:4	8	else
STATEMENTS	1064:9	1067:2	7	
LEAF_NODE	1064:9	1064:9	8	{
STATEMENTS	1065:3	1066:3	8	
EXPR_STATEMENT	1065:3	1065:26	9	putcode ( tif , & passcode ) ;
EXPR	1065:3	1065:3	10	putcode ( tif , & passcode )
FUNCTION_CALL	1065:3	1065:25	11	putcode ( tif , & passcode )
CALLEE	1065:3	1065:3	12	putcode
LEAF_NODE	1065:3	1065:3	13	putcode
LEAF_NODE	1065:10	1065:10	12	(
ARGUMENT	1065:11	1065:11	12	tif
FIELD	1065:11	1065:11	13	tif
LEAF_NODE	1065:11	1065:11	14	tif
LEAF_NODE	1065:14	1065:14	12	,
ARGUMENT	1065:16	1065:16	12	& passcode
UNARY_EXPR	1065:16	1065:17	13	& passcode
UNARY_OPERATOR	1065:16	1065:16	14	&
LEAF_NODE	1065:16	1065:16	15	&
FIELD	1065:17	1065:17	14	passcode
LEAF_NODE	1065:17	1065:17	15	passcode
LEAF_NODE	1065:25	1065:25	12	)
LEAF_NODE	1065:26	1065:26	10	;
EXPR_STATEMENT	1066:3	1066:10	9	a0 = b2 ;
EXPR	1066:3	1066:3	10	a0 = b2
ASSIGN	1066:3	1066:8	11	a0 = b2
LVAL	1066:3	1066:3	12	a0
FIELD	1066:3	1066:3	13	a0
LEAF_NODE	1066:3	1066:3	14	a0
ASSIGN_OP	1066:6	1066:6	12	=
LEAF_NODE	1066:6	1066:6	13	=
RVAL	1066:8	1066:8	12	b2
FIELD	1066:8	1066:8	13	b2
LEAF_NODE	1066:8	1066:8	14	b2
LEAF_NODE	1066:10	1066:10	10	;
LEAF_NODE	1067:2	1067:2	8	}
SELECTION	1068:2	1069:3	6	
KEYWORD	1068:2	1068:2	7	if
LEAF_NODE	1068:2	1068:2	8	if
LEAF_NODE	1068:5	1068:5	7	(
CONDITION	1068:6	1068:6	7	a0 >= bits
EXPR	1068:6	1068:12	8	a0 >= bits
FIELD	1068:6	1068:6	9	a0
LEAF_NODE	1068:6	1068:6	10	a0
REL_OPERATOR	1068:9	1068:9	9	>=
LEAF_NODE	1068:9	1068:9	10	>=
FIELD	1068:12	1068:12	9	bits
LEAF_NODE	1068:12	1068:12	10	bits
LEAF_NODE	1068:16	1068:16	7	)
STATEMENTS	1069:3	1069:3	7	
JUMP_STATEMENT	1069:3	1069:8	8	break DESTINATION ;
KEYWORD	1069:3	1069:3	9	break
LEAF_NODE	1069:3	1069:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	1069:8	1069:8	9	;
EXPR_STATEMENT	1070:2	1070:43	6	a1 = finddiff ( bp , a0 , bits , PIXEL ( bp , a0 ) ) ;
EXPR	1070:2	1070:2	7	a1 = finddiff ( bp , a0 , bits , PIXEL ( bp , a0 ) )
ASSIGN	1070:2	1070:7	8	a1 = finddiff ( bp , a0 , bits , PIXEL ( bp , a0 ) )
LVAL	1070:2	1070:2	9	a1
FIELD	1070:2	1070:2	10	a1
LEAF_NODE	1070:2	1070:2	11	a1
ASSIGN_OP	1070:5	1070:5	9	=
LEAF_NODE	1070:5	1070:5	10	=
RVAL	1070:7	1070:7	9	finddiff ( bp , a0 , bits , PIXEL ( bp , a0 ) )
FUNCTION_CALL	1070:7	1070:42	10	finddiff ( bp , a0 , bits , PIXEL ( bp , a0 ) )
CALLEE	1070:7	1070:7	11	finddiff
LEAF_NODE	1070:7	1070:7	12	finddiff
LEAF_NODE	1070:15	1070:15	11	(
ARGUMENT	1070:16	1070:16	11	bp
FIELD	1070:16	1070:16	12	bp
LEAF_NODE	1070:16	1070:16	13	bp
LEAF_NODE	1070:18	1070:18	11	,
ARGUMENT	1070:20	1070:20	11	a0
FIELD	1070:20	1070:20	12	a0
LEAF_NODE	1070:20	1070:20	13	a0
LEAF_NODE	1070:22	1070:22	11	,
ARGUMENT	1070:24	1070:24	11	bits
FIELD	1070:24	1070:24	12	bits
LEAF_NODE	1070:24	1070:24	13	bits
LEAF_NODE	1070:28	1070:28	11	,
ARGUMENT	1070:30	1070:30	11	PIXEL ( bp , a0 )
FUNCTION_CALL	1070:30	1070:41	12	PIXEL ( bp , a0 )
CALLEE	1070:30	1070:30	13	PIXEL
LEAF_NODE	1070:30	1070:30	14	PIXEL
LEAF_NODE	1070:35	1070:35	13	(
ARGUMENT	1070:36	1070:36	13	bp
FIELD	1070:36	1070:36	14	bp
LEAF_NODE	1070:36	1070:36	15	bp
LEAF_NODE	1070:38	1070:38	13	,
ARGUMENT	1070:39	1070:39	13	a0
FIELD	1070:39	1070:39	14	a0
LEAF_NODE	1070:39	1070:39	15	a0
LEAF_NODE	1070:41	1070:41	13	)
LEAF_NODE	1070:42	1070:42	11	)
LEAF_NODE	1070:43	1070:43	7	;
EXPR_STATEMENT	1071:2	1071:44	6	b1 = finddiff ( rp , a0 , bits , ! PIXEL ( bp , a0 ) ) ;
EXPR	1071:2	1071:2	7	b1 = finddiff ( rp , a0 , bits , ! PIXEL ( bp , a0 ) )
ASSIGN	1071:2	1071:7	8	b1 = finddiff ( rp , a0 , bits , ! PIXEL ( bp , a0 ) )
LVAL	1071:2	1071:2	9	b1
FIELD	1071:2	1071:2	10	b1
LEAF_NODE	1071:2	1071:2	11	b1
ASSIGN_OP	1071:5	1071:5	9	=
LEAF_NODE	1071:5	1071:5	10	=
RVAL	1071:7	1071:7	9	finddiff ( rp , a0 , bits , ! PIXEL ( bp , a0 ) )
FUNCTION_CALL	1071:7	1071:43	10	finddiff ( rp , a0 , bits , ! PIXEL ( bp , a0 ) )
CALLEE	1071:7	1071:7	11	finddiff
LEAF_NODE	1071:7	1071:7	12	finddiff
LEAF_NODE	1071:15	1071:15	11	(
ARGUMENT	1071:16	1071:16	11	rp
FIELD	1071:16	1071:16	12	rp
LEAF_NODE	1071:16	1071:16	13	rp
LEAF_NODE	1071:18	1071:18	11	,
ARGUMENT	1071:20	1071:20	11	a0
FIELD	1071:20	1071:20	12	a0
LEAF_NODE	1071:20	1071:20	13	a0
LEAF_NODE	1071:22	1071:22	11	,
ARGUMENT	1071:24	1071:24	11	bits
FIELD	1071:24	1071:24	12	bits
LEAF_NODE	1071:24	1071:24	13	bits
LEAF_NODE	1071:28	1071:28	11	,
ARGUMENT	1071:30	1071:30	11	! PIXEL ( bp , a0 )
UNARY_EXPR	1071:30	1071:31	12	! PIXEL ( bp , a0 )
UNARY_OPERATOR	1071:30	1071:30	13	!
LEAF_NODE	1071:30	1071:30	14	!
FUNCTION_CALL	1071:31	1071:42	13	PIXEL ( bp , a0 )
CALLEE	1071:31	1071:31	14	PIXEL
LEAF_NODE	1071:31	1071:31	15	PIXEL
LEAF_NODE	1071:36	1071:36	14	(
ARGUMENT	1071:37	1071:37	14	bp
FIELD	1071:37	1071:37	15	bp
LEAF_NODE	1071:37	1071:37	16	bp
LEAF_NODE	1071:39	1071:39	14	,
ARGUMENT	1071:40	1071:40	14	a0
FIELD	1071:40	1071:40	15	a0
LEAF_NODE	1071:40	1071:40	16	a0
LEAF_NODE	1071:42	1071:42	14	)
LEAF_NODE	1071:43	1071:43	11	)
LEAF_NODE	1071:44	1071:44	7	;
EXPR_STATEMENT	1072:2	1072:43	6	b1 = finddiff ( rp , b1 , bits , PIXEL ( bp , a0 ) ) ;
EXPR	1072:2	1072:2	7	b1 = finddiff ( rp , b1 , bits , PIXEL ( bp , a0 ) )
ASSIGN	1072:2	1072:7	8	b1 = finddiff ( rp , b1 , bits , PIXEL ( bp , a0 ) )
LVAL	1072:2	1072:2	9	b1
FIELD	1072:2	1072:2	10	b1
LEAF_NODE	1072:2	1072:2	11	b1
ASSIGN_OP	1072:5	1072:5	9	=
LEAF_NODE	1072:5	1072:5	10	=
RVAL	1072:7	1072:7	9	finddiff ( rp , b1 , bits , PIXEL ( bp , a0 ) )
FUNCTION_CALL	1072:7	1072:42	10	finddiff ( rp , b1 , bits , PIXEL ( bp , a0 ) )
CALLEE	1072:7	1072:7	11	finddiff
LEAF_NODE	1072:7	1072:7	12	finddiff
LEAF_NODE	1072:15	1072:15	11	(
ARGUMENT	1072:16	1072:16	11	rp
FIELD	1072:16	1072:16	12	rp
LEAF_NODE	1072:16	1072:16	13	rp
LEAF_NODE	1072:18	1072:18	11	,
ARGUMENT	1072:20	1072:20	11	b1
FIELD	1072:20	1072:20	12	b1
LEAF_NODE	1072:20	1072:20	13	b1
LEAF_NODE	1072:22	1072:22	11	,
ARGUMENT	1072:24	1072:24	11	bits
FIELD	1072:24	1072:24	12	bits
LEAF_NODE	1072:24	1072:24	13	bits
LEAF_NODE	1072:28	1072:28	11	,
ARGUMENT	1072:30	1072:30	11	PIXEL ( bp , a0 )
FUNCTION_CALL	1072:30	1072:41	12	PIXEL ( bp , a0 )
CALLEE	1072:30	1072:30	13	PIXEL
LEAF_NODE	1072:30	1072:30	14	PIXEL
LEAF_NODE	1072:35	1072:35	13	(
ARGUMENT	1072:36	1072:36	13	bp
FIELD	1072:36	1072:36	14	bp
LEAF_NODE	1072:36	1072:36	15	bp
LEAF_NODE	1072:38	1072:38	13	,
ARGUMENT	1072:39	1072:39	13	a0
FIELD	1072:39	1072:39	14	a0
LEAF_NODE	1072:39	1072:39	15	a0
LEAF_NODE	1072:41	1072:41	13	)
LEAF_NODE	1072:42	1072:42	11	)
LEAF_NODE	1072:43	1072:43	7	;
LEAF_NODE	1073:1	1073:1	5	}
JUMP_STATEMENT	1074:1	1074:11	3	return ( 1 ) ;
KEYWORD	1074:1	1074:1	4	return
LEAF_NODE	1074:1	1074:1	5	return
DESTINATION	1074:8	1074:8	4	( 1 )
EXPR	1074:8	1074:10	5	( 1 )
LEAF_NODE	1074:8	1074:8	6	(
FIELD	1074:9	1074:9	6	1
LEAF_NODE	1074:9	1074:9	7	1
LEAF_NODE	1074:10	1074:10	6	)
LEAF_NODE	1074:11	1074:11	4	;
LEAF_NODE	1076:0	1076:0	2	}
FUNCTION_DEF	1081:0	1119:0	1	
RETURN_TYPE	1081:0	1081:7	2	static int
LEAF_NODE	1081:0	1081:0	3	static
TYPE_NAME	1081:7	1081:7	3	int
LEAF_NODE	1081:7	1081:7	4	int
FUNCTION_NAME	1082:0	1082:0	2	Fax3Encode
LEAF_NODE	1082:0	1082:0	3	Fax3Encode
PARAMETER_LIST	1082:10	1082:54	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	1082:10	1082:10	3	(
PARAMETER_DECL	1082:11	1082:17	3	TIFF * tif
TYPE	1082:11	1082:15	4	TIFF *
TYPE_NAME	1082:11	1082:11	5	TIFF
LEAF_NODE	1082:11	1082:11	6	TIFF
POINTER	1082:15	1082:15	5	*
LEAF_NODE	1082:15	1082:15	6	*
NAME	1082:17	1082:17	4	tif
LEAF_NODE	1082:17	1082:17	5	tif
LEAF_NODE	1082:20	1082:20	3	,
PARAMETER_DECL	1082:22	1082:29	3	uint8 * bp
TYPE	1082:22	1082:27	4	uint8 *
TYPE_NAME	1082:22	1082:22	5	uint8
LEAF_NODE	1082:22	1082:22	6	uint8
POINTER	1082:27	1082:27	5	*
LEAF_NODE	1082:27	1082:27	6	*
NAME	1082:29	1082:29	4	bp
LEAF_NODE	1082:29	1082:29	5	bp
LEAF_NODE	1082:31	1082:31	3	,
PARAMETER_DECL	1082:33	1082:42	3	tmsize_t cc
TYPE	1082:33	1082:33	4	tmsize_t
TYPE_NAME	1082:33	1082:33	5	tmsize_t
LEAF_NODE	1082:33	1082:33	6	tmsize_t
NAME	1082:42	1082:42	4	cc
LEAF_NODE	1082:42	1082:42	5	cc
LEAF_NODE	1082:44	1082:44	3	,
PARAMETER_DECL	1082:46	1082:53	3	uint16 s
TYPE	1082:46	1082:46	4	uint16
TYPE_NAME	1082:46	1082:46	5	uint16
LEAF_NODE	1082:46	1082:46	6	uint16
NAME	1082:53	1082:53	4	s
LEAF_NODE	1082:53	1082:53	5	s
LEAF_NODE	1082:54	1082:54	3	)
LEAF_NODE	1083:0	1083:0	2	{
STATEMENTS	1084:1	1118:1	2	
LEAF_NODE	1084:1	1084:1	3	static
SIMPLE_DECL	1084:8	1084:42	3	const char [ ] module ; module = "Fax3Encode" ;
VAR_DECL	1084:8	1084:19	4	const char [ ] module ; module = "Fax3Encode"
TYPE	1084:8	1084:25	5	const char [ ]
TYPE_NAME	1084:8	1084:14	6	const char
LEAF_NODE	1084:8	1084:8	7	const
LEAF_NODE	1084:14	1084:14	7	char
TYPE_SUFFIX	1084:25	1084:26	6	[ ]
LEAF_NODE	1084:25	1084:25	7	[
LEAF_NODE	1084:26	1084:26	7	]
NAME	1084:19	1084:19	5	module
LEAF_NODE	1084:19	1084:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1084:19	1084:19	5	module = "Fax3Encode"
ASSIGN	1084:19	1084:30	6	module = "Fax3Encode"
LVAL	1084:19	1084:19	7	module
NAME	1084:19	1084:19	8	module
LEAF_NODE	1084:19	1084:19	9	module
ASSIGN_OP	1084:28	1084:28	7	=
LEAF_NODE	1084:28	1084:28	8	=
RVAL	1084:30	1084:30	7	"Fax3Encode"
FIELD	1084:30	1084:30	8	"Fax3Encode"
LEAF_NODE	1084:30	1084:30	9	"Fax3Encode"
LEAF_NODE	1084:42	1084:42	4	;
SIMPLE_DECL	1085:1	1085:39	3	Fax3CodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	1085:1	1085:17	4	Fax3CodecState * sp ; sp = EncoderState ( tif )
TYPE	1085:1	1085:15	5	Fax3CodecState *
TYPE_NAME	1085:1	1085:1	6	Fax3CodecState
LEAF_NODE	1085:1	1085:1	7	Fax3CodecState
POINTER	1085:15	1085:15	6	*
LEAF_NODE	1085:15	1085:15	7	*
NAME	1085:17	1085:17	5	sp
LEAF_NODE	1085:17	1085:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1085:17	1085:17	5	sp = EncoderState ( tif )
ASSIGN	1085:17	1085:22	6	sp = EncoderState ( tif )
LVAL	1085:17	1085:17	7	sp
NAME	1085:17	1085:17	8	sp
LEAF_NODE	1085:17	1085:17	9	sp
ASSIGN_OP	1085:20	1085:20	7	=
LEAF_NODE	1085:20	1085:20	8	=
RVAL	1085:22	1085:22	7	EncoderState ( tif )
FUNCTION_CALL	1085:22	1085:38	8	EncoderState ( tif )
CALLEE	1085:22	1085:22	9	EncoderState
LEAF_NODE	1085:22	1085:22	10	EncoderState
LEAF_NODE	1085:34	1085:34	9	(
ARGUMENT	1085:35	1085:35	9	tif
FIELD	1085:35	1085:35	10	tif
LEAF_NODE	1085:35	1085:35	11	tif
LEAF_NODE	1085:38	1085:38	9	)
LEAF_NODE	1085:39	1085:39	4	;
EXPR_STATEMENT	1086:1	1086:9	3	( void ) s ;
EXPR	1086:1	1086:8	4	( void ) s
LEAF_NODE	1086:1	1086:1	5	(
TYPE_NAME	1086:2	1086:2	5	void
LEAF_NODE	1086:2	1086:2	6	void
LEAF_NODE	1086:6	1086:6	5	)
FIELD	1086:8	1086:8	5	s
LEAF_NODE	1086:8	1086:8	6	s
LEAF_NODE	1086:9	1086:9	4	;
SELECTION	1087:1	1088:1	3	
KEYWORD	1087:1	1087:1	4	if
LEAF_NODE	1087:1	1087:1	5	if
LEAF_NODE	1087:4	1087:4	4	(
CONDITION	1087:5	1087:5	4	cc % sp -> b . rowbytes
EXPR	1087:5	1087:10	5	cc % sp -> b . rowbytes
FIELD	1087:5	1087:5	6	cc
LEAF_NODE	1087:5	1087:5	7	cc
LEAF_NODE	1087:8	1087:8	6	%
FIELD	1087:10	1087:16	6	sp -> b . rowbytes
LEAF_NODE	1087:10	1087:10	7	sp
LEAF_NODE	1087:12	1087:12	7	->
LEAF_NODE	1087:14	1087:14	7	b
LEAF_NODE	1087:15	1087:15	7	.
LEAF_NODE	1087:16	1087:16	7	rowbytes
LEAF_NODE	1087:24	1087:24	4	)
STATEMENTS	1088:1	1091:1	4	
LEAF_NODE	1088:1	1088:1	5	{
STATEMENTS	1089:2	1090:2	5	
EXPR_STATEMENT	1089:2	1089:85	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be written" ) ;
EXPR	1089:2	1089:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be written" )
FUNCTION_CALL	1089:2	1089:84	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be written" )
CALLEE	1089:2	1089:2	9	TIFFErrorExt
LEAF_NODE	1089:2	1089:2	10	TIFFErrorExt
LEAF_NODE	1089:14	1089:14	9	(
ARGUMENT	1089:15	1089:15	9	tif -> tif_clientdata
FIELD	1089:15	1089:20	10	tif -> tif_clientdata
LEAF_NODE	1089:15	1089:15	11	tif
LEAF_NODE	1089:18	1089:18	11	->
LEAF_NODE	1089:20	1089:20	11	tif_clientdata
LEAF_NODE	1089:34	1089:34	9	,
ARGUMENT	1089:36	1089:36	9	module
FIELD	1089:36	1089:36	10	module
LEAF_NODE	1089:36	1089:36	11	module
LEAF_NODE	1089:42	1089:42	9	,
ARGUMENT	1089:44	1089:44	9	"Fractional scanlines cannot be written"
FIELD	1089:44	1089:44	10	"Fractional scanlines cannot be written"
LEAF_NODE	1089:44	1089:44	11	"Fractional scanlines cannot be written"
LEAF_NODE	1089:84	1089:84	9	)
LEAF_NODE	1089:85	1089:85	7	;
JUMP_STATEMENT	1090:2	1090:12	6	return ( 0 ) ;
KEYWORD	1090:2	1090:2	7	return
LEAF_NODE	1090:2	1090:2	8	return
DESTINATION	1090:9	1090:9	7	( 0 )
EXPR	1090:9	1090:11	8	( 0 )
LEAF_NODE	1090:9	1090:9	9	(
FIELD	1090:10	1090:10	9	0
LEAF_NODE	1090:10	1090:10	10	0
LEAF_NODE	1090:11	1090:11	9	)
LEAF_NODE	1090:12	1090:12	7	;
LEAF_NODE	1091:1	1091:1	5	}
ITERATION	1092:1	1092:16	3	
KEYWORD	1092:1	1092:1	4	while
LEAF_NODE	1092:1	1092:1	5	while
LEAF_NODE	1092:7	1092:7	4	(
CONDITION	1092:8	1092:8	4	cc > 0
EXPR	1092:8	1092:13	5	cc > 0
FIELD	1092:8	1092:8	6	cc
LEAF_NODE	1092:8	1092:8	7	cc
REL_OPERATOR	1092:11	1092:11	6	>
LEAF_NODE	1092:11	1092:11	7	>
FIELD	1092:13	1092:13	6	0
LEAF_NODE	1092:13	1092:13	7	0
LEAF_NODE	1092:14	1092:14	4	)
STATEMENTS	1092:16	1117:1	4	
LEAF_NODE	1092:16	1092:16	5	{
STATEMENTS	1093:2	1116:2	5	
SELECTION	1093:2	1094:3	6	
KEYWORD	1093:2	1093:2	7	if
LEAF_NODE	1093:2	1093:2	8	if
LEAF_NODE	1093:5	1093:5	7	(
CONDITION	1093:6	1093:6	7	( sp -> b . mode & FAXMODE_NOEOL ) == 0
EXPR	1093:6	1093:38	8	( sp -> b . mode & FAXMODE_NOEOL ) == 0
LEAF_NODE	1093:6	1093:6	9	(
FIELD	1093:7	1093:13	9	sp -> b . mode
LEAF_NODE	1093:7	1093:7	10	sp
LEAF_NODE	1093:9	1093:9	10	->
LEAF_NODE	1093:11	1093:11	10	b
LEAF_NODE	1093:12	1093:12	10	.
LEAF_NODE	1093:13	1093:13	10	mode
LEAF_NODE	1093:18	1093:18	9	&
FIELD	1093:20	1093:20	9	FAXMODE_NOEOL
LEAF_NODE	1093:20	1093:20	10	FAXMODE_NOEOL
LEAF_NODE	1093:33	1093:33	9	)
EQ_OPERATOR	1093:35	1093:35	9	==
LEAF_NODE	1093:35	1093:35	10	==
FIELD	1093:38	1093:38	9	0
LEAF_NODE	1093:38	1093:38	10	0
LEAF_NODE	1093:39	1093:39	7	)
STATEMENTS	1094:3	1094:3	7	
EXPR_STATEMENT	1094:3	1094:18	8	Fax3PutEOL ( tif ) ;
EXPR	1094:3	1094:3	9	Fax3PutEOL ( tif )
FUNCTION_CALL	1094:3	1094:17	10	Fax3PutEOL ( tif )
CALLEE	1094:3	1094:3	11	Fax3PutEOL
LEAF_NODE	1094:3	1094:3	12	Fax3PutEOL
LEAF_NODE	1094:13	1094:13	11	(
ARGUMENT	1094:14	1094:14	11	tif
FIELD	1094:14	1094:14	12	tif
LEAF_NODE	1094:14	1094:14	13	tif
LEAF_NODE	1094:17	1094:17	11	)
LEAF_NODE	1094:18	1094:18	9	;
SELECTION	1095:2	1095:24	6	
KEYWORD	1095:2	1095:2	7	if
LEAF_NODE	1095:2	1095:2	8	if
LEAF_NODE	1095:5	1095:5	7	(
CONDITION	1095:6	1095:6	7	is2DEncoding ( sp )
EXPR	1095:6	1095:6	8	is2DEncoding ( sp )
FUNCTION_CALL	1095:6	1095:21	9	is2DEncoding ( sp )
CALLEE	1095:6	1095:6	10	is2DEncoding
LEAF_NODE	1095:6	1095:6	11	is2DEncoding
LEAF_NODE	1095:18	1095:18	10	(
ARGUMENT	1095:19	1095:19	10	sp
FIELD	1095:19	1095:19	11	sp
LEAF_NODE	1095:19	1095:19	12	sp
LEAF_NODE	1095:21	1095:21	10	)
LEAF_NODE	1095:22	1095:22	7	)
STATEMENTS	1095:24	1111:2	7	
LEAF_NODE	1095:24	1095:24	8	{
STATEMENTS	1096:3	1109:5	8	
SELECTION	1096:3	1096:25	9	
KEYWORD	1096:3	1096:3	10	if
LEAF_NODE	1096:3	1096:3	11	if
LEAF_NODE	1096:6	1096:6	10	(
CONDITION	1096:7	1096:7	10	sp -> tag == G3_1D
EXPR	1096:7	1096:18	11	sp -> tag == G3_1D
FIELD	1096:7	1096:11	12	sp -> tag
LEAF_NODE	1096:7	1096:7	13	sp
LEAF_NODE	1096:9	1096:9	13	->
LEAF_NODE	1096:11	1096:11	13	tag
EQ_OPERATOR	1096:15	1096:15	12	==
LEAF_NODE	1096:15	1096:15	13	==
FIELD	1096:18	1096:18	12	G3_1D
LEAF_NODE	1096:18	1096:18	13	G3_1D
LEAF_NODE	1096:23	1096:23	10	)
STATEMENTS	1096:25	1100:3	10	
LEAF_NODE	1096:25	1096:25	11	{
STATEMENTS	1097:4	1099:4	11	
SELECTION	1097:4	1098:5	12	
KEYWORD	1097:4	1097:4	13	if
LEAF_NODE	1097:4	1097:4	14	if
LEAF_NODE	1097:7	1097:7	13	(
CONDITION	1097:8	1097:8	13	! Fax3Encode1DRow ( tif , bp , sp -> b . rowpixels )
EXPR	1097:8	1097:8	14	! Fax3Encode1DRow ( tif , bp , sp -> b . rowpixels )
UNARY_EXPR	1097:8	1097:9	15	! Fax3Encode1DRow ( tif , bp , sp -> b . rowpixels )
UNARY_OPERATOR	1097:8	1097:8	16	!
LEAF_NODE	1097:8	1097:8	17	!
FUNCTION_CALL	1097:9	1097:49	16	Fax3Encode1DRow ( tif , bp , sp -> b . rowpixels )
CALLEE	1097:9	1097:9	17	Fax3Encode1DRow
LEAF_NODE	1097:9	1097:9	18	Fax3Encode1DRow
LEAF_NODE	1097:24	1097:24	17	(
ARGUMENT	1097:25	1097:25	17	tif
FIELD	1097:25	1097:25	18	tif
LEAF_NODE	1097:25	1097:25	19	tif
LEAF_NODE	1097:28	1097:28	17	,
ARGUMENT	1097:30	1097:30	17	bp
FIELD	1097:30	1097:30	18	bp
LEAF_NODE	1097:30	1097:30	19	bp
LEAF_NODE	1097:32	1097:32	17	,
ARGUMENT	1097:34	1097:34	17	sp -> b . rowpixels
FIELD	1097:34	1097:40	18	sp -> b . rowpixels
LEAF_NODE	1097:34	1097:34	19	sp
LEAF_NODE	1097:36	1097:36	19	->
LEAF_NODE	1097:38	1097:38	19	b
LEAF_NODE	1097:39	1097:39	19	.
LEAF_NODE	1097:40	1097:40	19	rowpixels
LEAF_NODE	1097:49	1097:49	17	)
LEAF_NODE	1097:50	1097:50	13	)
STATEMENTS	1098:5	1098:5	13	
JUMP_STATEMENT	1098:5	1098:15	14	return ( 0 ) ;
KEYWORD	1098:5	1098:5	15	return
LEAF_NODE	1098:5	1098:5	16	return
DESTINATION	1098:12	1098:12	15	( 0 )
EXPR	1098:12	1098:14	16	( 0 )
LEAF_NODE	1098:12	1098:12	17	(
FIELD	1098:13	1098:13	17	0
LEAF_NODE	1098:13	1098:13	18	0
LEAF_NODE	1098:14	1098:14	17	)
LEAF_NODE	1098:15	1098:15	15	;
EXPR_STATEMENT	1099:4	1099:19	12	sp -> tag = G3_2D ;
EXPR	1099:4	1099:4	13	sp -> tag = G3_2D
ASSIGN	1099:4	1099:14	14	sp -> tag = G3_2D
LVAL	1099:4	1099:4	15	sp -> tag
FIELD	1099:4	1099:8	16	sp -> tag
LEAF_NODE	1099:4	1099:4	17	sp
LEAF_NODE	1099:6	1099:6	17	->
LEAF_NODE	1099:8	1099:8	17	tag
ASSIGN_OP	1099:12	1099:12	15	=
LEAF_NODE	1099:12	1099:12	16	=
RVAL	1099:14	1099:14	15	G3_2D
FIELD	1099:14	1099:14	16	G3_2D
LEAF_NODE	1099:14	1099:14	17	G3_2D
LEAF_NODE	1099:19	1099:19	13	;
LEAF_NODE	1100:3	1100:3	11	}
SELECTION	1100:5	1100:10	9	
KEYWORD	1100:5	1100:5	10	else
LEAF_NODE	1100:5	1100:5	11	else
STATEMENTS	1100:10	1105:3	10	
LEAF_NODE	1100:10	1100:10	11	{
STATEMENTS	1101:4	1104:4	11	
SELECTION	1101:4	1103:5	12	
KEYWORD	1101:4	1101:4	13	if
LEAF_NODE	1101:4	1101:4	14	if
LEAF_NODE	1101:7	1101:7	13	(
CONDITION	1101:8	1101:8	13	! Fax3Encode2DRow ( tif , bp , sp -> refline , sp -> b . rowpixels )
EXPR	1101:8	1101:8	14	! Fax3Encode2DRow ( tif , bp , sp -> refline , sp -> b . rowpixels )
UNARY_EXPR	1101:8	1101:9	15	! Fax3Encode2DRow ( tif , bp , sp -> refline , sp -> b . rowpixels )
UNARY_OPERATOR	1101:8	1101:8	16	!
LEAF_NODE	1101:8	1101:8	17	!
FUNCTION_CALL	1101:9	1102:23	16	Fax3Encode2DRow ( tif , bp , sp -> refline , sp -> b . rowpixels )
CALLEE	1101:9	1101:9	17	Fax3Encode2DRow
LEAF_NODE	1101:9	1101:9	18	Fax3Encode2DRow
LEAF_NODE	1101:24	1101:24	17	(
ARGUMENT	1101:25	1101:25	17	tif
FIELD	1101:25	1101:25	18	tif
LEAF_NODE	1101:25	1101:25	19	tif
LEAF_NODE	1101:28	1101:28	17	,
ARGUMENT	1101:30	1101:30	17	bp
FIELD	1101:30	1101:30	18	bp
LEAF_NODE	1101:30	1101:30	19	bp
LEAF_NODE	1101:32	1101:32	17	,
ARGUMENT	1101:34	1101:34	17	sp -> refline
FIELD	1101:34	1101:38	18	sp -> refline
LEAF_NODE	1101:34	1101:34	19	sp
LEAF_NODE	1101:36	1101:36	19	->
LEAF_NODE	1101:38	1101:38	19	refline
LEAF_NODE	1101:45	1101:45	17	,
ARGUMENT	1102:8	1102:8	17	sp -> b . rowpixels
FIELD	1102:8	1102:14	18	sp -> b . rowpixels
LEAF_NODE	1102:8	1102:8	19	sp
LEAF_NODE	1102:10	1102:10	19	->
LEAF_NODE	1102:12	1102:12	19	b
LEAF_NODE	1102:13	1102:13	19	.
LEAF_NODE	1102:14	1102:14	19	rowpixels
LEAF_NODE	1102:23	1102:23	17	)
LEAF_NODE	1102:24	1102:24	13	)
STATEMENTS	1103:5	1103:5	13	
JUMP_STATEMENT	1103:5	1103:15	14	return ( 0 ) ;
KEYWORD	1103:5	1103:5	15	return
LEAF_NODE	1103:5	1103:5	16	return
DESTINATION	1103:12	1103:12	15	( 0 )
EXPR	1103:12	1103:14	16	( 0 )
LEAF_NODE	1103:12	1103:12	17	(
FIELD	1103:13	1103:13	17	0
LEAF_NODE	1103:13	1103:13	18	0
LEAF_NODE	1103:14	1103:14	17	)
LEAF_NODE	1103:15	1103:15	15	;
EXPR_STATEMENT	1104:4	1104:11	12	sp -> k -- ;
EXPR	1104:4	1104:4	13	sp -> k --
FIELD	1104:4	1104:9	14	sp -> k --
LEAF_NODE	1104:4	1104:4	15	sp
LEAF_NODE	1104:6	1104:6	15	->
LEAF_NODE	1104:8	1104:8	15	k
LEAF_NODE	1104:9	1104:9	15	--
LEAF_NODE	1104:11	1104:11	13	;
LEAF_NODE	1105:3	1105:3	11	}
SELECTION	1106:3	1106:19	9	
KEYWORD	1106:3	1106:3	10	if
LEAF_NODE	1106:3	1106:3	11	if
LEAF_NODE	1106:6	1106:6	10	(
CONDITION	1106:7	1106:7	10	sp -> k == 0
EXPR	1106:7	1106:16	11	sp -> k == 0
FIELD	1106:7	1106:11	12	sp -> k
LEAF_NODE	1106:7	1106:7	13	sp
LEAF_NODE	1106:9	1106:9	13	->
LEAF_NODE	1106:11	1106:11	13	k
EQ_OPERATOR	1106:13	1106:13	12	==
LEAF_NODE	1106:13	1106:13	13	==
FIELD	1106:16	1106:16	12	0
LEAF_NODE	1106:16	1106:16	13	0
LEAF_NODE	1106:17	1106:17	10	)
STATEMENTS	1106:19	1109:3	10	
LEAF_NODE	1106:19	1106:19	11	{
STATEMENTS	1107:4	1108:4	11	
EXPR_STATEMENT	1107:4	1107:19	12	sp -> tag = G3_1D ;
EXPR	1107:4	1107:4	13	sp -> tag = G3_1D
ASSIGN	1107:4	1107:14	14	sp -> tag = G3_1D
LVAL	1107:4	1107:4	15	sp -> tag
FIELD	1107:4	1107:8	16	sp -> tag
LEAF_NODE	1107:4	1107:4	17	sp
LEAF_NODE	1107:6	1107:6	17	->
LEAF_NODE	1107:8	1107:8	17	tag
ASSIGN_OP	1107:12	1107:12	15	=
LEAF_NODE	1107:12	1107:12	16	=
RVAL	1107:14	1107:14	15	G3_1D
FIELD	1107:14	1107:14	16	G3_1D
LEAF_NODE	1107:14	1107:14	17	G3_1D
LEAF_NODE	1107:19	1107:19	13	;
EXPR_STATEMENT	1108:4	1108:22	12	sp -> k = sp -> maxk - 1 ;
EXPR	1108:4	1108:4	13	sp -> k = sp -> maxk - 1
ASSIGN	1108:4	1108:12	14	sp -> k = sp -> maxk - 1
LVAL	1108:4	1108:4	15	sp -> k
FIELD	1108:4	1108:8	16	sp -> k
LEAF_NODE	1108:4	1108:4	17	sp
LEAF_NODE	1108:6	1108:6	17	->
LEAF_NODE	1108:8	1108:8	17	k
ASSIGN_OP	1108:10	1108:10	15	=
LEAF_NODE	1108:10	1108:10	16	=
RVAL	1108:12	1108:21	15	sp -> maxk - 1
FIELD	1108:12	1108:16	16	sp -> maxk
LEAF_NODE	1108:12	1108:12	17	sp
LEAF_NODE	1108:14	1108:14	17	->
LEAF_NODE	1108:16	1108:16	17	maxk
LEAF_NODE	1108:20	1108:20	16	-
FIELD	1108:21	1108:21	16	1
LEAF_NODE	1108:21	1108:21	17	1
LEAF_NODE	1108:22	1108:22	13	;
LEAF_NODE	1109:3	1109:3	11	}
SELECTION	1109:5	1110:4	9	
KEYWORD	1109:5	1109:5	10	else
LEAF_NODE	1109:5	1109:5	11	else
STATEMENTS	1110:4	1110:4	10	
EXPR_STATEMENT	1110:4	1110:48	11	_TIFFmemcpy ( sp -> refline , bp , sp -> b . rowbytes ) ;
EXPR	1110:4	1110:4	12	_TIFFmemcpy ( sp -> refline , bp , sp -> b . rowbytes )
FUNCTION_CALL	1110:4	1110:47	13	_TIFFmemcpy ( sp -> refline , bp , sp -> b . rowbytes )
CALLEE	1110:4	1110:4	14	_TIFFmemcpy
LEAF_NODE	1110:4	1110:4	15	_TIFFmemcpy
LEAF_NODE	1110:15	1110:15	14	(
ARGUMENT	1110:16	1110:16	14	sp -> refline
FIELD	1110:16	1110:20	15	sp -> refline
LEAF_NODE	1110:16	1110:16	16	sp
LEAF_NODE	1110:18	1110:18	16	->
LEAF_NODE	1110:20	1110:20	16	refline
LEAF_NODE	1110:27	1110:27	14	,
ARGUMENT	1110:29	1110:29	14	bp
FIELD	1110:29	1110:29	15	bp
LEAF_NODE	1110:29	1110:29	16	bp
LEAF_NODE	1110:31	1110:31	14	,
ARGUMENT	1110:33	1110:33	14	sp -> b . rowbytes
FIELD	1110:33	1110:39	15	sp -> b . rowbytes
LEAF_NODE	1110:33	1110:33	16	sp
LEAF_NODE	1110:35	1110:35	16	->
LEAF_NODE	1110:37	1110:37	16	b
LEAF_NODE	1110:38	1110:38	16	.
LEAF_NODE	1110:39	1110:39	16	rowbytes
LEAF_NODE	1110:47	1110:47	14	)
LEAF_NODE	1110:48	1110:48	12	;
LEAF_NODE	1111:2	1111:2	8	}
SELECTION	1111:4	1111:9	6	
KEYWORD	1111:4	1111:4	7	else
LEAF_NODE	1111:4	1111:4	8	else
STATEMENTS	1111:9	1114:2	7	
LEAF_NODE	1111:9	1111:9	8	{
STATEMENTS	1112:3	1112:3	8	
SELECTION	1112:3	1113:4	9	
KEYWORD	1112:3	1112:3	10	if
LEAF_NODE	1112:3	1112:3	11	if
LEAF_NODE	1112:6	1112:6	10	(
CONDITION	1112:7	1112:7	10	! Fax3Encode1DRow ( tif , bp , sp -> b . rowpixels )
EXPR	1112:7	1112:7	11	! Fax3Encode1DRow ( tif , bp , sp -> b . rowpixels )
UNARY_EXPR	1112:7	1112:8	12	! Fax3Encode1DRow ( tif , bp , sp -> b . rowpixels )
UNARY_OPERATOR	1112:7	1112:7	13	!
LEAF_NODE	1112:7	1112:7	14	!
FUNCTION_CALL	1112:8	1112:48	13	Fax3Encode1DRow ( tif , bp , sp -> b . rowpixels )
CALLEE	1112:8	1112:8	14	Fax3Encode1DRow
LEAF_NODE	1112:8	1112:8	15	Fax3Encode1DRow
LEAF_NODE	1112:23	1112:23	14	(
ARGUMENT	1112:24	1112:24	14	tif
FIELD	1112:24	1112:24	15	tif
LEAF_NODE	1112:24	1112:24	16	tif
LEAF_NODE	1112:27	1112:27	14	,
ARGUMENT	1112:29	1112:29	14	bp
FIELD	1112:29	1112:29	15	bp
LEAF_NODE	1112:29	1112:29	16	bp
LEAF_NODE	1112:31	1112:31	14	,
ARGUMENT	1112:33	1112:33	14	sp -> b . rowpixels
FIELD	1112:33	1112:39	15	sp -> b . rowpixels
LEAF_NODE	1112:33	1112:33	16	sp
LEAF_NODE	1112:35	1112:35	16	->
LEAF_NODE	1112:37	1112:37	16	b
LEAF_NODE	1112:38	1112:38	16	.
LEAF_NODE	1112:39	1112:39	16	rowpixels
LEAF_NODE	1112:48	1112:48	14	)
LEAF_NODE	1112:49	1112:49	10	)
STATEMENTS	1113:4	1113:4	10	
JUMP_STATEMENT	1113:4	1113:14	11	return ( 0 ) ;
KEYWORD	1113:4	1113:4	12	return
LEAF_NODE	1113:4	1113:4	13	return
DESTINATION	1113:11	1113:11	12	( 0 )
EXPR	1113:11	1113:13	13	( 0 )
LEAF_NODE	1113:11	1113:11	14	(
FIELD	1113:12	1113:12	14	0
LEAF_NODE	1113:12	1113:12	15	0
LEAF_NODE	1113:13	1113:13	14	)
LEAF_NODE	1113:14	1113:14	12	;
LEAF_NODE	1114:2	1114:2	8	}
EXPR_STATEMENT	1115:2	1115:22	6	bp += sp -> b . rowbytes ;
EXPR	1115:2	1115:2	7	bp += sp -> b . rowbytes
ASSIGN	1115:2	1115:8	8	bp += sp -> b . rowbytes
LVAL	1115:2	1115:2	9	bp
FIELD	1115:2	1115:2	10	bp
LEAF_NODE	1115:2	1115:2	11	bp
ASSIGN_OP	1115:5	1115:5	9	+=
LEAF_NODE	1115:5	1115:5	10	+=
RVAL	1115:8	1115:8	9	sp -> b . rowbytes
FIELD	1115:8	1115:14	10	sp -> b . rowbytes
LEAF_NODE	1115:8	1115:8	11	sp
LEAF_NODE	1115:10	1115:10	11	->
LEAF_NODE	1115:12	1115:12	11	b
LEAF_NODE	1115:13	1115:13	11	.
LEAF_NODE	1115:14	1115:14	11	rowbytes
LEAF_NODE	1115:22	1115:22	7	;
EXPR_STATEMENT	1116:2	1116:22	6	cc -= sp -> b . rowbytes ;
EXPR	1116:2	1116:2	7	cc -= sp -> b . rowbytes
ASSIGN	1116:2	1116:8	8	cc -= sp -> b . rowbytes
LVAL	1116:2	1116:2	9	cc
FIELD	1116:2	1116:2	10	cc
LEAF_NODE	1116:2	1116:2	11	cc
ASSIGN_OP	1116:5	1116:5	9	-=
LEAF_NODE	1116:5	1116:5	10	-=
RVAL	1116:8	1116:8	9	sp -> b . rowbytes
FIELD	1116:8	1116:14	10	sp -> b . rowbytes
LEAF_NODE	1116:8	1116:8	11	sp
LEAF_NODE	1116:10	1116:10	11	->
LEAF_NODE	1116:12	1116:12	11	b
LEAF_NODE	1116:13	1116:13	11	.
LEAF_NODE	1116:14	1116:14	11	rowbytes
LEAF_NODE	1116:22	1116:22	7	;
LEAF_NODE	1117:1	1117:1	5	}
JUMP_STATEMENT	1118:1	1118:11	3	return ( 1 ) ;
KEYWORD	1118:1	1118:1	4	return
LEAF_NODE	1118:1	1118:1	5	return
DESTINATION	1118:8	1118:8	4	( 1 )
EXPR	1118:8	1118:10	5	( 1 )
LEAF_NODE	1118:8	1118:8	6	(
FIELD	1118:9	1118:9	6	1
LEAF_NODE	1118:9	1118:9	7	1
LEAF_NODE	1118:10	1118:10	6	)
LEAF_NODE	1118:11	1118:11	4	;
LEAF_NODE	1119:0	1119:0	2	}
FUNCTION_DEF	1121:0	1129:0	1	
RETURN_TYPE	1121:0	1121:7	2	static int
LEAF_NODE	1121:0	1121:0	3	static
TYPE_NAME	1121:7	1121:7	3	int
LEAF_NODE	1121:7	1121:7	4	int
FUNCTION_NAME	1122:0	1122:0	2	Fax3PostEncode
LEAF_NODE	1122:0	1122:0	3	Fax3PostEncode
PARAMETER_LIST	1122:14	1122:24	2	( TIFF * tif )
LEAF_NODE	1122:14	1122:14	3	(
PARAMETER_DECL	1122:15	1122:21	3	TIFF * tif
TYPE	1122:15	1122:19	4	TIFF *
TYPE_NAME	1122:15	1122:15	5	TIFF
LEAF_NODE	1122:15	1122:15	6	TIFF
POINTER	1122:19	1122:19	5	*
LEAF_NODE	1122:19	1122:19	6	*
NAME	1122:21	1122:21	4	tif
LEAF_NODE	1122:21	1122:21	5	tif
LEAF_NODE	1122:24	1122:24	3	)
LEAF_NODE	1123:0	1123:0	2	{
STATEMENTS	1124:1	1128:1	2	
SIMPLE_DECL	1124:1	1124:39	3	Fax3CodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	1124:1	1124:17	4	Fax3CodecState * sp ; sp = EncoderState ( tif )
TYPE	1124:1	1124:15	5	Fax3CodecState *
TYPE_NAME	1124:1	1124:1	6	Fax3CodecState
LEAF_NODE	1124:1	1124:1	7	Fax3CodecState
POINTER	1124:15	1124:15	6	*
LEAF_NODE	1124:15	1124:15	7	*
NAME	1124:17	1124:17	5	sp
LEAF_NODE	1124:17	1124:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1124:17	1124:17	5	sp = EncoderState ( tif )
ASSIGN	1124:17	1124:22	6	sp = EncoderState ( tif )
LVAL	1124:17	1124:17	7	sp
NAME	1124:17	1124:17	8	sp
LEAF_NODE	1124:17	1124:17	9	sp
ASSIGN_OP	1124:20	1124:20	7	=
LEAF_NODE	1124:20	1124:20	8	=
RVAL	1124:22	1124:22	7	EncoderState ( tif )
FUNCTION_CALL	1124:22	1124:38	8	EncoderState ( tif )
CALLEE	1124:22	1124:22	9	EncoderState
LEAF_NODE	1124:22	1124:22	10	EncoderState
LEAF_NODE	1124:34	1124:34	9	(
ARGUMENT	1124:35	1124:35	9	tif
FIELD	1124:35	1124:35	10	tif
LEAF_NODE	1124:35	1124:35	11	tif
LEAF_NODE	1124:38	1124:38	9	)
LEAF_NODE	1124:39	1124:39	4	;
SELECTION	1126:1	1127:2	3	
KEYWORD	1126:1	1126:1	4	if
LEAF_NODE	1126:1	1126:1	5	if
LEAF_NODE	1126:4	1126:4	4	(
CONDITION	1126:5	1126:5	4	sp -> bit != 8
EXPR	1126:5	1126:16	5	sp -> bit != 8
FIELD	1126:5	1126:9	6	sp -> bit
LEAF_NODE	1126:5	1126:5	7	sp
LEAF_NODE	1126:7	1126:7	7	->
LEAF_NODE	1126:9	1126:9	7	bit
EQ_OPERATOR	1126:13	1126:13	6	!=
LEAF_NODE	1126:13	1126:13	7	!=
FIELD	1126:16	1126:16	6	8
LEAF_NODE	1126:16	1126:16	7	8
LEAF_NODE	1126:17	1126:17	4	)
STATEMENTS	1127:2	1127:2	4	
EXPR_STATEMENT	1127:2	1127:24	5	Fax3FlushBits ( tif , sp ) ;
EXPR	1127:2	1127:2	6	Fax3FlushBits ( tif , sp )
FUNCTION_CALL	1127:2	1127:23	7	Fax3FlushBits ( tif , sp )
CALLEE	1127:2	1127:2	8	Fax3FlushBits
LEAF_NODE	1127:2	1127:2	9	Fax3FlushBits
LEAF_NODE	1127:15	1127:15	8	(
ARGUMENT	1127:16	1127:16	8	tif
FIELD	1127:16	1127:16	9	tif
LEAF_NODE	1127:16	1127:16	10	tif
LEAF_NODE	1127:19	1127:19	8	,
ARGUMENT	1127:21	1127:21	8	sp
FIELD	1127:21	1127:21	9	sp
LEAF_NODE	1127:21	1127:21	10	sp
LEAF_NODE	1127:23	1127:23	8	)
LEAF_NODE	1127:24	1127:24	6	;
JUMP_STATEMENT	1128:1	1128:11	3	return ( 1 ) ;
KEYWORD	1128:1	1128:1	4	return
LEAF_NODE	1128:1	1128:1	5	return
DESTINATION	1128:8	1128:8	4	( 1 )
EXPR	1128:8	1128:10	5	( 1 )
LEAF_NODE	1128:8	1128:8	6	(
FIELD	1128:9	1128:9	6	1
LEAF_NODE	1128:9	1128:9	7	1
LEAF_NODE	1128:10	1128:10	6	)
LEAF_NODE	1128:11	1128:11	4	;
LEAF_NODE	1129:0	1129:0	2	}
FUNCTION_DEF	1131:0	1148:0	1	
RETURN_TYPE	1131:0	1131:7	2	static void
LEAF_NODE	1131:0	1131:0	3	static
TYPE_NAME	1131:7	1131:7	3	void
LEAF_NODE	1131:7	1131:7	4	void
FUNCTION_NAME	1132:0	1132:0	2	Fax3Close
LEAF_NODE	1132:0	1132:0	3	Fax3Close
PARAMETER_LIST	1132:9	1132:19	2	( TIFF * tif )
LEAF_NODE	1132:9	1132:9	3	(
PARAMETER_DECL	1132:10	1132:16	3	TIFF * tif
TYPE	1132:10	1132:14	4	TIFF *
TYPE_NAME	1132:10	1132:10	5	TIFF
LEAF_NODE	1132:10	1132:10	6	TIFF
POINTER	1132:14	1132:14	5	*
LEAF_NODE	1132:14	1132:14	6	*
NAME	1132:16	1132:16	4	tif
LEAF_NODE	1132:16	1132:16	5	tif
LEAF_NODE	1132:19	1132:19	3	)
LEAF_NODE	1133:0	1133:0	2	{
STATEMENTS	1134:1	1134:1	2	
SELECTION	1134:1	1134:68	3	
KEYWORD	1134:1	1134:1	4	if
LEAF_NODE	1134:1	1134:1	5	if
LEAF_NODE	1134:4	1134:4	4	(
CONDITION	1134:5	1134:5	4	( Fax3State ( tif ) -> mode & FAXMODE_NORTC ) == 0 && tif -> tif_rawcp
EXPR	1134:5	1134:5	5	( Fax3State ( tif ) -> mode & FAXMODE_NORTC ) == 0 && tif -> tif_rawcp
AND	1134:5	1134:52	6	( Fax3State ( tif ) -> mode & FAXMODE_NORTC ) == 0 && tif -> tif_rawcp
EXPR	1134:5	1134:47	7	( Fax3State ( tif ) -> mode & FAXMODE_NORTC ) == 0
LEAF_NODE	1134:5	1134:5	8	(
FUNCTION_CALL	1134:6	1134:19	8	Fax3State ( tif )
CALLEE	1134:6	1134:6	9	Fax3State
LEAF_NODE	1134:6	1134:6	10	Fax3State
LEAF_NODE	1134:15	1134:15	9	(
ARGUMENT	1134:16	1134:16	9	tif
FIELD	1134:16	1134:16	10	tif
LEAF_NODE	1134:16	1134:16	11	tif
LEAF_NODE	1134:19	1134:19	9	)
LEAF_NODE	1134:20	1134:20	8	->
LEAF_NODE	1134:22	1134:22	8	mode
LEAF_NODE	1134:27	1134:27	8	&
FIELD	1134:29	1134:29	8	FAXMODE_NORTC
LEAF_NODE	1134:29	1134:29	9	FAXMODE_NORTC
LEAF_NODE	1134:42	1134:42	8	)
EQ_OPERATOR	1134:44	1134:44	8	==
LEAF_NODE	1134:44	1134:44	9	==
FIELD	1134:47	1134:47	8	0
LEAF_NODE	1134:47	1134:47	9	0
LEAF_NODE	1134:49	1134:49	7	&&
EXPR	1134:52	1134:52	7	tif -> tif_rawcp
FIELD	1134:52	1134:57	8	tif -> tif_rawcp
LEAF_NODE	1134:52	1134:52	9	tif
LEAF_NODE	1134:55	1134:55	9	->
LEAF_NODE	1134:57	1134:57	9	tif_rawcp
LEAF_NODE	1134:66	1134:66	4	)
STATEMENTS	1134:68	1147:1	4	
LEAF_NODE	1134:68	1134:68	5	{
STATEMENTS	1135:2	1146:2	5	
SIMPLE_DECL	1135:2	1135:40	6	Fax3CodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	1135:2	1135:18	7	Fax3CodecState * sp ; sp = EncoderState ( tif )
TYPE	1135:2	1135:16	8	Fax3CodecState *
TYPE_NAME	1135:2	1135:2	9	Fax3CodecState
LEAF_NODE	1135:2	1135:2	10	Fax3CodecState
POINTER	1135:16	1135:16	9	*
LEAF_NODE	1135:16	1135:16	10	*
NAME	1135:18	1135:18	8	sp
LEAF_NODE	1135:18	1135:18	9	sp
LEAF_NODE	0:0	0:0	8	;
INIT	1135:18	1135:18	8	sp = EncoderState ( tif )
ASSIGN	1135:18	1135:23	9	sp = EncoderState ( tif )
LVAL	1135:18	1135:18	10	sp
NAME	1135:18	1135:18	11	sp
LEAF_NODE	1135:18	1135:18	12	sp
ASSIGN_OP	1135:21	1135:21	10	=
LEAF_NODE	1135:21	1135:21	11	=
RVAL	1135:23	1135:23	10	EncoderState ( tif )
FUNCTION_CALL	1135:23	1135:39	11	EncoderState ( tif )
CALLEE	1135:23	1135:23	12	EncoderState
LEAF_NODE	1135:23	1135:23	13	EncoderState
LEAF_NODE	1135:35	1135:35	12	(
ARGUMENT	1135:36	1135:36	12	tif
FIELD	1135:36	1135:36	13	tif
LEAF_NODE	1135:36	1135:36	14	tif
LEAF_NODE	1135:39	1135:39	12	)
LEAF_NODE	1135:40	1135:40	7	;
SIMPLE_DECL	1136:2	1136:25	6	unsigned int code ; code = EOL ;
VAR_DECL	1136:2	1136:15	7	unsigned int code ; code = EOL
TYPE	1136:2	1136:2	8	unsigned int
TYPE_NAME	1136:2	1136:11	9	unsigned int
LEAF_NODE	1136:2	1136:2	10	unsigned
LEAF_NODE	1136:11	1136:11	10	int
NAME	1136:15	1136:15	8	code
LEAF_NODE	1136:15	1136:15	9	code
LEAF_NODE	0:0	0:0	8	;
INIT	1136:15	1136:15	8	code = EOL
ASSIGN	1136:15	1136:22	9	code = EOL
LVAL	1136:15	1136:15	10	code
NAME	1136:15	1136:15	11	code
LEAF_NODE	1136:15	1136:15	12	code
ASSIGN_OP	1136:20	1136:20	10	=
LEAF_NODE	1136:20	1136:20	11	=
RVAL	1136:22	1136:22	10	EOL
FIELD	1136:22	1136:22	11	EOL
LEAF_NODE	1136:22	1136:22	12	EOL
LEAF_NODE	1136:25	1136:25	7	;
SIMPLE_DECL	1137:2	1137:26	6	unsigned int length ; length = 12 ;
VAR_DECL	1137:2	1137:15	7	unsigned int length ; length = 12
TYPE	1137:2	1137:2	8	unsigned int
TYPE_NAME	1137:2	1137:11	9	unsigned int
LEAF_NODE	1137:2	1137:2	10	unsigned
LEAF_NODE	1137:11	1137:11	10	int
NAME	1137:15	1137:15	8	length
LEAF_NODE	1137:15	1137:15	9	length
LEAF_NODE	0:0	0:0	8	;
INIT	1137:15	1137:15	8	length = 12
ASSIGN	1137:15	1137:24	9	length = 12
LVAL	1137:15	1137:15	10	length
NAME	1137:15	1137:15	11	length
LEAF_NODE	1137:15	1137:15	12	length
ASSIGN_OP	1137:22	1137:22	10	=
LEAF_NODE	1137:22	1137:22	11	=
RVAL	1137:24	1137:24	10	12
FIELD	1137:24	1137:24	11	12
LEAF_NODE	1137:24	1137:24	12	12
LEAF_NODE	1137:26	1137:26	7	;
SIMPLE_DECL	1138:2	1138:7	6	int i ;
VAR_DECL	1138:2	1138:6	7	int i
TYPE	1138:2	1138:2	8	int
TYPE_NAME	1138:2	1138:2	9	int
LEAF_NODE	1138:2	1138:2	10	int
NAME	1138:6	1138:6	8	i
LEAF_NODE	1138:6	1138:6	9	i
LEAF_NODE	1138:7	1138:7	7	;
SELECTION	1140:2	1140:24	6	
KEYWORD	1140:2	1140:2	7	if
LEAF_NODE	1140:2	1140:2	8	if
LEAF_NODE	1140:5	1140:5	7	(
CONDITION	1140:6	1140:6	7	is2DEncoding ( sp )
EXPR	1140:6	1140:6	8	is2DEncoding ( sp )
FUNCTION_CALL	1140:6	1140:21	9	is2DEncoding ( sp )
CALLEE	1140:6	1140:6	10	is2DEncoding
LEAF_NODE	1140:6	1140:6	11	is2DEncoding
LEAF_NODE	1140:18	1140:18	10	(
ARGUMENT	1140:19	1140:19	10	sp
FIELD	1140:19	1140:19	11	sp
LEAF_NODE	1140:19	1140:19	12	sp
LEAF_NODE	1140:21	1140:21	10	)
LEAF_NODE	1140:22	1140:22	7	)
STATEMENTS	1140:24	1143:2	7	
LEAF_NODE	1140:24	1140:24	8	{
STATEMENTS	1141:3	1142:3	8	
EXPR_STATEMENT	1141:3	1141:40	9	code = ( code << 1 ) | ( sp -> tag == G3_1D ) ;
EXPR	1141:3	1141:3	10	code = ( code << 1 ) | ( sp -> tag == G3_1D )
ASSIGN	1141:3	1141:10	11	code = ( code << 1 ) | ( sp -> tag == G3_1D )
LVAL	1141:3	1141:3	12	code
FIELD	1141:3	1141:3	13	code
LEAF_NODE	1141:3	1141:3	14	code
ASSIGN_OP	1141:8	1141:8	12	=
LEAF_NODE	1141:8	1141:8	13	=
RVAL	1141:10	1141:10	12	( code << 1 ) | ( sp -> tag == G3_1D )
BIT_OR	1141:10	1141:22	13	( code << 1 ) | ( sp -> tag == G3_1D )
BIT_OR_ELEM	1141:10	1141:18	14	( code << 1 )
LEAF_NODE	1141:10	1141:10	15	(
FIELD	1141:11	1141:11	15	code
LEAF_NODE	1141:11	1141:11	16	code
LEAF_NODE	1141:15	1141:15	15	<<
FIELD	1141:17	1141:17	15	1
LEAF_NODE	1141:17	1141:17	16	1
LEAF_NODE	1141:18	1141:18	15	)
LEAF_NODE	1141:20	1141:20	14	|
BIT_OR_ELEM	1141:22	1141:39	14	( sp -> tag == G3_1D )
LEAF_NODE	1141:22	1141:22	15	(
FIELD	1141:23	1141:27	15	sp -> tag
LEAF_NODE	1141:23	1141:23	16	sp
LEAF_NODE	1141:25	1141:25	16	->
LEAF_NODE	1141:27	1141:27	16	tag
EQ_OPERATOR	1141:31	1141:31	15	==
LEAF_NODE	1141:31	1141:31	16	==
FIELD	1141:34	1141:34	15	G3_1D
LEAF_NODE	1141:34	1141:34	16	G3_1D
LEAF_NODE	1141:39	1141:39	15	)
LEAF_NODE	1141:40	1141:40	10	;
EXPR_STATEMENT	1142:3	1142:11	9	length ++ ;
EXPR	1142:3	1142:3	10	length ++
FIELD	1142:3	1142:9	11	length ++
LEAF_NODE	1142:3	1142:3	12	length
LEAF_NODE	1142:9	1142:9	12	++
LEAF_NODE	1142:11	1142:11	10	;
LEAF_NODE	1143:2	1143:2	8	}
ITERATION	1144:2	1145:3	6	
KEYWORD	1144:2	1144:2	7	for
LEAF_NODE	1144:2	1144:2	8	for
LEAF_NODE	1144:6	1144:6	7	(
FOR_INIT	1144:7	1144:12	7	i = 0 ;
EXPR	1144:7	1144:7	8	i = 0
ASSIGN	1144:7	1144:11	9	i = 0
LVAL	1144:7	1144:7	10	i
FIELD	1144:7	1144:7	11	i
LEAF_NODE	1144:7	1144:7	12	i
ASSIGN_OP	1144:9	1144:9	10	=
LEAF_NODE	1144:9	1144:9	11	=
RVAL	1144:11	1144:11	10	0
FIELD	1144:11	1144:11	11	0
LEAF_NODE	1144:11	1144:11	12	0
LEAF_NODE	1144:12	1144:12	8	;
CONDITION	1144:14	1144:14	7	i < 6
EXPR	1144:14	1144:18	8	i < 6
FIELD	1144:14	1144:14	9	i
LEAF_NODE	1144:14	1144:14	10	i
REL_OPERATOR	1144:16	1144:16	9	<
LEAF_NODE	1144:16	1144:16	10	<
FIELD	1144:18	1144:18	9	6
LEAF_NODE	1144:18	1144:18	10	6
LEAF_NODE	1144:19	1144:19	7	;
FOR_EXPR	1144:21	1144:21	7	i ++
EXPR	1144:21	1144:21	8	i ++
FIELD	1144:21	1144:22	9	i ++
LEAF_NODE	1144:21	1144:21	10	i
LEAF_NODE	1144:22	1144:22	10	++
LEAF_NODE	1144:24	1144:24	7	)
STATEMENTS	1145:3	1145:3	7	
EXPR_STATEMENT	1145:3	1145:33	8	Fax3PutBits ( tif , code , length ) ;
EXPR	1145:3	1145:3	9	Fax3PutBits ( tif , code , length )
FUNCTION_CALL	1145:3	1145:32	10	Fax3PutBits ( tif , code , length )
CALLEE	1145:3	1145:3	11	Fax3PutBits
LEAF_NODE	1145:3	1145:3	12	Fax3PutBits
LEAF_NODE	1145:14	1145:14	11	(
ARGUMENT	1145:15	1145:15	11	tif
FIELD	1145:15	1145:15	12	tif
LEAF_NODE	1145:15	1145:15	13	tif
LEAF_NODE	1145:18	1145:18	11	,
ARGUMENT	1145:20	1145:20	11	code
FIELD	1145:20	1145:20	12	code
LEAF_NODE	1145:20	1145:20	13	code
LEAF_NODE	1145:24	1145:24	11	,
ARGUMENT	1145:26	1145:26	11	length
FIELD	1145:26	1145:26	12	length
LEAF_NODE	1145:26	1145:26	13	length
LEAF_NODE	1145:32	1145:32	11	)
LEAF_NODE	1145:33	1145:33	9	;
EXPR_STATEMENT	1146:2	1146:24	6	Fax3FlushBits ( tif , sp ) ;
EXPR	1146:2	1146:2	7	Fax3FlushBits ( tif , sp )
FUNCTION_CALL	1146:2	1146:23	8	Fax3FlushBits ( tif , sp )
CALLEE	1146:2	1146:2	9	Fax3FlushBits
LEAF_NODE	1146:2	1146:2	10	Fax3FlushBits
LEAF_NODE	1146:15	1146:15	9	(
ARGUMENT	1146:16	1146:16	9	tif
FIELD	1146:16	1146:16	10	tif
LEAF_NODE	1146:16	1146:16	11	tif
LEAF_NODE	1146:19	1146:19	9	,
ARGUMENT	1146:21	1146:21	9	sp
FIELD	1146:21	1146:21	10	sp
LEAF_NODE	1146:21	1146:21	11	sp
LEAF_NODE	1146:23	1146:23	9	)
LEAF_NODE	1146:24	1146:24	7	;
LEAF_NODE	1147:1	1147:1	5	}
LEAF_NODE	1148:0	1148:0	2	}
FUNCTION_DEF	1150:0	1170:0	1	
RETURN_TYPE	1150:0	1150:7	2	static void
LEAF_NODE	1150:0	1150:0	3	static
TYPE_NAME	1150:7	1150:7	3	void
LEAF_NODE	1150:7	1150:7	4	void
FUNCTION_NAME	1151:0	1151:0	2	Fax3Cleanup
LEAF_NODE	1151:0	1151:0	3	Fax3Cleanup
PARAMETER_LIST	1151:11	1151:21	2	( TIFF * tif )
LEAF_NODE	1151:11	1151:11	3	(
PARAMETER_DECL	1151:12	1151:18	3	TIFF * tif
TYPE	1151:12	1151:16	4	TIFF *
TYPE_NAME	1151:12	1151:12	5	TIFF
LEAF_NODE	1151:12	1151:12	6	TIFF
POINTER	1151:16	1151:16	5	*
LEAF_NODE	1151:16	1151:16	6	*
NAME	1151:18	1151:18	4	tif
LEAF_NODE	1151:18	1151:18	5	tif
LEAF_NODE	1151:21	1151:21	3	)
LEAF_NODE	1152:0	1152:0	2	{
STATEMENTS	1153:1	1169:1	2	
SIMPLE_DECL	1153:1	1153:39	3	Fax3CodecState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	1153:1	1153:17	4	Fax3CodecState * sp ; sp = DecoderState ( tif )
TYPE	1153:1	1153:15	5	Fax3CodecState *
TYPE_NAME	1153:1	1153:1	6	Fax3CodecState
LEAF_NODE	1153:1	1153:1	7	Fax3CodecState
POINTER	1153:15	1153:15	6	*
LEAF_NODE	1153:15	1153:15	7	*
NAME	1153:17	1153:17	5	sp
LEAF_NODE	1153:17	1153:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1153:17	1153:17	5	sp = DecoderState ( tif )
ASSIGN	1153:17	1153:22	6	sp = DecoderState ( tif )
LVAL	1153:17	1153:17	7	sp
NAME	1153:17	1153:17	8	sp
LEAF_NODE	1153:17	1153:17	9	sp
ASSIGN_OP	1153:20	1153:20	7	=
LEAF_NODE	1153:20	1153:20	8	=
RVAL	1153:22	1153:22	7	DecoderState ( tif )
FUNCTION_CALL	1153:22	1153:38	8	DecoderState ( tif )
CALLEE	1153:22	1153:22	9	DecoderState
LEAF_NODE	1153:22	1153:22	10	DecoderState
LEAF_NODE	1153:34	1153:34	9	(
ARGUMENT	1153:35	1153:35	9	tif
FIELD	1153:35	1153:35	10	tif
LEAF_NODE	1153:35	1153:35	11	tif
LEAF_NODE	1153:38	1153:38	9	)
LEAF_NODE	1153:39	1153:39	4	;
EXPR_STATEMENT	1155:1	1155:16	3	assert ( sp != 0 ) ;
EXPR	1155:1	1155:1	4	assert ( sp != 0 )
FUNCTION_CALL	1155:1	1155:15	5	assert ( sp != 0 )
CALLEE	1155:1	1155:1	6	assert
LEAF_NODE	1155:1	1155:1	7	assert
LEAF_NODE	1155:7	1155:7	6	(
ARGUMENT	1155:8	1155:14	6	sp != 0
FIELD	1155:8	1155:8	7	sp
LEAF_NODE	1155:8	1155:8	8	sp
EQ_OPERATOR	1155:11	1155:11	7	!=
LEAF_NODE	1155:11	1155:11	8	!=
FIELD	1155:14	1155:14	7	0
LEAF_NODE	1155:14	1155:14	8	0
LEAF_NODE	1155:15	1155:15	6	)
LEAF_NODE	1155:16	1155:16	4	;
EXPR_STATEMENT	1157:1	1157:49	3	tif -> tif_tagmethods . vgetfield = sp -> b . vgetparent ;
EXPR	1157:1	1157:1	4	tif -> tif_tagmethods . vgetfield = sp -> b . vgetparent
ASSIGN	1157:1	1157:33	5	tif -> tif_tagmethods . vgetfield = sp -> b . vgetparent
LVAL	1157:1	1157:1	6	tif -> tif_tagmethods . vgetfield
FIELD	1157:1	1157:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1157:1	1157:1	8	tif
LEAF_NODE	1157:4	1157:4	8	->
LEAF_NODE	1157:6	1157:6	8	tif_tagmethods
LEAF_NODE	1157:20	1157:20	8	.
LEAF_NODE	1157:21	1157:21	8	vgetfield
ASSIGN_OP	1157:31	1157:31	6	=
LEAF_NODE	1157:31	1157:31	7	=
RVAL	1157:33	1157:33	6	sp -> b . vgetparent
FIELD	1157:33	1157:39	7	sp -> b . vgetparent
LEAF_NODE	1157:33	1157:33	8	sp
LEAF_NODE	1157:35	1157:35	8	->
LEAF_NODE	1157:37	1157:37	8	b
LEAF_NODE	1157:38	1157:38	8	.
LEAF_NODE	1157:39	1157:39	8	vgetparent
LEAF_NODE	1157:49	1157:49	4	;
EXPR_STATEMENT	1158:1	1158:49	3	tif -> tif_tagmethods . vsetfield = sp -> b . vsetparent ;
EXPR	1158:1	1158:1	4	tif -> tif_tagmethods . vsetfield = sp -> b . vsetparent
ASSIGN	1158:1	1158:33	5	tif -> tif_tagmethods . vsetfield = sp -> b . vsetparent
LVAL	1158:1	1158:1	6	tif -> tif_tagmethods . vsetfield
FIELD	1158:1	1158:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	1158:1	1158:1	8	tif
LEAF_NODE	1158:4	1158:4	8	->
LEAF_NODE	1158:6	1158:6	8	tif_tagmethods
LEAF_NODE	1158:20	1158:20	8	.
LEAF_NODE	1158:21	1158:21	8	vsetfield
ASSIGN_OP	1158:31	1158:31	6	=
LEAF_NODE	1158:31	1158:31	7	=
RVAL	1158:33	1158:33	6	sp -> b . vsetparent
FIELD	1158:33	1158:39	7	sp -> b . vsetparent
LEAF_NODE	1158:33	1158:33	8	sp
LEAF_NODE	1158:35	1158:35	8	->
LEAF_NODE	1158:37	1158:37	8	b
LEAF_NODE	1158:38	1158:38	8	.
LEAF_NODE	1158:39	1158:39	8	vsetparent
LEAF_NODE	1158:49	1158:49	4	;
EXPR_STATEMENT	1159:1	1159:46	3	tif -> tif_tagmethods . printdir = sp -> b . printdir ;
EXPR	1159:1	1159:1	4	tif -> tif_tagmethods . printdir = sp -> b . printdir
ASSIGN	1159:1	1159:32	5	tif -> tif_tagmethods . printdir = sp -> b . printdir
LVAL	1159:1	1159:1	6	tif -> tif_tagmethods . printdir
FIELD	1159:1	1159:21	7	tif -> tif_tagmethods . printdir
LEAF_NODE	1159:1	1159:1	8	tif
LEAF_NODE	1159:4	1159:4	8	->
LEAF_NODE	1159:6	1159:6	8	tif_tagmethods
LEAF_NODE	1159:20	1159:20	8	.
LEAF_NODE	1159:21	1159:21	8	printdir
ASSIGN_OP	1159:30	1159:30	6	=
LEAF_NODE	1159:30	1159:30	7	=
RVAL	1159:32	1159:32	6	sp -> b . printdir
FIELD	1159:32	1159:38	7	sp -> b . printdir
LEAF_NODE	1159:32	1159:32	8	sp
LEAF_NODE	1159:34	1159:34	8	->
LEAF_NODE	1159:36	1159:36	8	b
LEAF_NODE	1159:37	1159:37	8	.
LEAF_NODE	1159:38	1159:38	8	printdir
LEAF_NODE	1159:46	1159:46	4	;
SELECTION	1161:1	1162:2	3	
KEYWORD	1161:1	1161:1	4	if
LEAF_NODE	1161:1	1161:1	5	if
LEAF_NODE	1161:4	1161:4	4	(
CONDITION	1161:5	1161:5	4	sp -> runs
EXPR	1161:5	1161:5	5	sp -> runs
FIELD	1161:5	1161:9	6	sp -> runs
LEAF_NODE	1161:5	1161:5	7	sp
LEAF_NODE	1161:7	1161:7	7	->
LEAF_NODE	1161:9	1161:9	7	runs
LEAF_NODE	1161:13	1161:13	4	)
STATEMENTS	1162:2	1162:2	4	
EXPR_STATEMENT	1162:2	1162:21	5	_TIFFfree ( sp -> runs ) ;
EXPR	1162:2	1162:2	6	_TIFFfree ( sp -> runs )
FUNCTION_CALL	1162:2	1162:20	7	_TIFFfree ( sp -> runs )
CALLEE	1162:2	1162:2	8	_TIFFfree
LEAF_NODE	1162:2	1162:2	9	_TIFFfree
LEAF_NODE	1162:11	1162:11	8	(
ARGUMENT	1162:12	1162:12	8	sp -> runs
FIELD	1162:12	1162:16	9	sp -> runs
LEAF_NODE	1162:12	1162:12	10	sp
LEAF_NODE	1162:14	1162:14	10	->
LEAF_NODE	1162:16	1162:16	10	runs
LEAF_NODE	1162:20	1162:20	8	)
LEAF_NODE	1162:21	1162:21	6	;
SELECTION	1163:1	1164:2	3	
KEYWORD	1163:1	1163:1	4	if
LEAF_NODE	1163:1	1163:1	5	if
LEAF_NODE	1163:4	1163:4	4	(
CONDITION	1163:5	1163:5	4	sp -> refline
EXPR	1163:5	1163:5	5	sp -> refline
FIELD	1163:5	1163:9	6	sp -> refline
LEAF_NODE	1163:5	1163:5	7	sp
LEAF_NODE	1163:7	1163:7	7	->
LEAF_NODE	1163:9	1163:9	7	refline
LEAF_NODE	1163:16	1163:16	4	)
STATEMENTS	1164:2	1164:2	4	
EXPR_STATEMENT	1164:2	1164:24	5	_TIFFfree ( sp -> refline ) ;
EXPR	1164:2	1164:2	6	_TIFFfree ( sp -> refline )
FUNCTION_CALL	1164:2	1164:23	7	_TIFFfree ( sp -> refline )
CALLEE	1164:2	1164:2	8	_TIFFfree
LEAF_NODE	1164:2	1164:2	9	_TIFFfree
LEAF_NODE	1164:11	1164:11	8	(
ARGUMENT	1164:12	1164:12	8	sp -> refline
FIELD	1164:12	1164:16	9	sp -> refline
LEAF_NODE	1164:12	1164:12	10	sp
LEAF_NODE	1164:14	1164:14	10	->
LEAF_NODE	1164:16	1164:16	10	refline
LEAF_NODE	1164:23	1164:23	8	)
LEAF_NODE	1164:24	1164:24	6	;
EXPR_STATEMENT	1166:1	1166:25	3	_TIFFfree ( tif -> tif_data ) ;
EXPR	1166:1	1166:1	4	_TIFFfree ( tif -> tif_data )
FUNCTION_CALL	1166:1	1166:24	5	_TIFFfree ( tif -> tif_data )
CALLEE	1166:1	1166:1	6	_TIFFfree
LEAF_NODE	1166:1	1166:1	7	_TIFFfree
LEAF_NODE	1166:10	1166:10	6	(
ARGUMENT	1166:11	1166:11	6	tif -> tif_data
FIELD	1166:11	1166:16	7	tif -> tif_data
LEAF_NODE	1166:11	1166:11	8	tif
LEAF_NODE	1166:14	1166:14	8	->
LEAF_NODE	1166:16	1166:16	8	tif_data
LEAF_NODE	1166:24	1166:24	6	)
LEAF_NODE	1166:25	1166:25	4	;
EXPR_STATEMENT	1167:1	1167:21	3	tif -> tif_data = NULL ;
EXPR	1167:1	1167:1	4	tif -> tif_data = NULL
ASSIGN	1167:1	1167:17	5	tif -> tif_data = NULL
LVAL	1167:1	1167:1	6	tif -> tif_data
FIELD	1167:1	1167:6	7	tif -> tif_data
LEAF_NODE	1167:1	1167:1	8	tif
LEAF_NODE	1167:4	1167:4	8	->
LEAF_NODE	1167:6	1167:6	8	tif_data
ASSIGN_OP	1167:15	1167:15	6	=
LEAF_NODE	1167:15	1167:15	7	=
RVAL	1167:17	1167:17	6	NULL
FIELD	1167:17	1167:17	7	NULL
LEAF_NODE	1167:17	1167:17	8	NULL
LEAF_NODE	1167:21	1167:21	4	;
EXPR_STATEMENT	1169:1	1169:37	3	_TIFFSetDefaultCompressionState ( tif ) ;
EXPR	1169:1	1169:1	4	_TIFFSetDefaultCompressionState ( tif )
FUNCTION_CALL	1169:1	1169:36	5	_TIFFSetDefaultCompressionState ( tif )
CALLEE	1169:1	1169:1	6	_TIFFSetDefaultCompressionState
LEAF_NODE	1169:1	1169:1	7	_TIFFSetDefaultCompressionState
LEAF_NODE	1169:32	1169:32	6	(
ARGUMENT	1169:33	1169:33	6	tif
FIELD	1169:33	1169:33	7	tif
LEAF_NODE	1169:33	1169:33	8	tif
LEAF_NODE	1169:36	1169:36	6	)
LEAF_NODE	1169:37	1169:37	4	;
LEAF_NODE	1170:0	1170:0	2	}
FUNCTION_DEF	1191:0	1237:0	1	
RETURN_TYPE	1191:0	1191:7	2	static int
LEAF_NODE	1191:0	1191:0	3	static
TYPE_NAME	1191:7	1191:7	3	int
LEAF_NODE	1191:7	1191:7	4	int
FUNCTION_NAME	1192:0	1192:0	2	Fax3VSetField
LEAF_NODE	1192:0	1192:0	3	Fax3VSetField
PARAMETER_LIST	1192:13	1192:47	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	1192:13	1192:13	3	(
PARAMETER_DECL	1192:14	1192:20	3	TIFF * tif
TYPE	1192:14	1192:18	4	TIFF *
TYPE_NAME	1192:14	1192:14	5	TIFF
LEAF_NODE	1192:14	1192:14	6	TIFF
POINTER	1192:18	1192:18	5	*
LEAF_NODE	1192:18	1192:18	6	*
NAME	1192:20	1192:20	4	tif
LEAF_NODE	1192:20	1192:20	5	tif
LEAF_NODE	1192:23	1192:23	3	,
PARAMETER_DECL	1192:25	1192:32	3	uint32 tag
TYPE	1192:25	1192:25	4	uint32
TYPE_NAME	1192:25	1192:25	5	uint32
LEAF_NODE	1192:25	1192:25	6	uint32
NAME	1192:32	1192:32	4	tag
LEAF_NODE	1192:32	1192:32	5	tag
LEAF_NODE	1192:35	1192:35	3	,
PARAMETER_DECL	1192:37	1192:45	3	va_list ap
TYPE	1192:37	1192:37	4	va_list
TYPE_NAME	1192:37	1192:37	5	va_list
LEAF_NODE	1192:37	1192:37	6	va_list
NAME	1192:45	1192:45	4	ap
LEAF_NODE	1192:45	1192:45	5	ap
LEAF_NODE	1192:47	1192:47	3	)
LEAF_NODE	1193:0	1193:0	2	{
STATEMENTS	1194:1	1236:1	2	
SIMPLE_DECL	1194:1	1194:35	3	Fax3BaseState * sp ; sp = Fax3State ( tif ) ;
VAR_DECL	1194:1	1194:16	4	Fax3BaseState * sp ; sp = Fax3State ( tif )
TYPE	1194:1	1194:14	5	Fax3BaseState *
TYPE_NAME	1194:1	1194:1	6	Fax3BaseState
LEAF_NODE	1194:1	1194:1	7	Fax3BaseState
POINTER	1194:14	1194:14	6	*
LEAF_NODE	1194:14	1194:14	7	*
NAME	1194:16	1194:16	5	sp
LEAF_NODE	1194:16	1194:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1194:16	1194:16	5	sp = Fax3State ( tif )
ASSIGN	1194:16	1194:21	6	sp = Fax3State ( tif )
LVAL	1194:16	1194:16	7	sp
NAME	1194:16	1194:16	8	sp
LEAF_NODE	1194:16	1194:16	9	sp
ASSIGN_OP	1194:19	1194:19	7	=
LEAF_NODE	1194:19	1194:19	8	=
RVAL	1194:21	1194:21	7	Fax3State ( tif )
FUNCTION_CALL	1194:21	1194:34	8	Fax3State ( tif )
CALLEE	1194:21	1194:21	9	Fax3State
LEAF_NODE	1194:21	1194:21	10	Fax3State
LEAF_NODE	1194:30	1194:30	9	(
ARGUMENT	1194:31	1194:31	9	tif
FIELD	1194:31	1194:31	10	tif
LEAF_NODE	1194:31	1194:31	11	tif
LEAF_NODE	1194:34	1194:34	9	)
LEAF_NODE	1194:35	1194:35	4	;
SIMPLE_DECL	1195:1	1195:21	3	const TIFFField * fip ;
VAR_DECL	1195:1	1195:18	4	const TIFFField * fip
TYPE	1195:1	1195:16	5	const TIFFField *
TYPE_NAME	1195:1	1195:7	6	const TIFFField
LEAF_NODE	1195:1	1195:1	7	const
LEAF_NODE	1195:7	1195:7	7	TIFFField
POINTER	1195:16	1195:16	6	*
LEAF_NODE	1195:16	1195:16	7	*
NAME	1195:18	1195:18	5	fip
LEAF_NODE	1195:18	1195:18	6	fip
LEAF_NODE	1195:21	1195:21	4	;
EXPR_STATEMENT	1197:1	1197:16	3	assert ( sp != 0 ) ;
EXPR	1197:1	1197:1	4	assert ( sp != 0 )
FUNCTION_CALL	1197:1	1197:15	5	assert ( sp != 0 )
CALLEE	1197:1	1197:1	6	assert
LEAF_NODE	1197:1	1197:1	7	assert
LEAF_NODE	1197:7	1197:7	6	(
ARGUMENT	1197:8	1197:14	6	sp != 0
FIELD	1197:8	1197:8	7	sp
LEAF_NODE	1197:8	1197:8	8	sp
EQ_OPERATOR	1197:11	1197:11	7	!=
LEAF_NODE	1197:11	1197:11	8	!=
FIELD	1197:14	1197:14	7	0
LEAF_NODE	1197:14	1197:14	8	0
LEAF_NODE	1197:15	1197:15	6	)
LEAF_NODE	1197:16	1197:16	4	;
EXPR_STATEMENT	1198:1	1198:28	3	assert ( sp -> vsetparent != 0 ) ;
EXPR	1198:1	1198:1	4	assert ( sp -> vsetparent != 0 )
FUNCTION_CALL	1198:1	1198:27	5	assert ( sp -> vsetparent != 0 )
CALLEE	1198:1	1198:1	6	assert
LEAF_NODE	1198:1	1198:1	7	assert
LEAF_NODE	1198:7	1198:7	6	(
ARGUMENT	1198:8	1198:26	6	sp -> vsetparent != 0
FIELD	1198:8	1198:12	7	sp -> vsetparent
LEAF_NODE	1198:8	1198:8	8	sp
LEAF_NODE	1198:10	1198:10	8	->
LEAF_NODE	1198:12	1198:12	8	vsetparent
EQ_OPERATOR	1198:23	1198:23	7	!=
LEAF_NODE	1198:23	1198:23	8	!=
FIELD	1198:26	1198:26	7	0
LEAF_NODE	1198:26	1198:26	8	0
LEAF_NODE	1198:27	1198:27	6	)
LEAF_NODE	1198:28	1198:28	4	;
SELECTION	1200:1	1200:14	3	
KEYWORD	1200:1	1200:1	4	switch
LEAF_NODE	1200:1	1200:1	5	switch
LEAF_NODE	1200:8	1200:8	4	(
CONDITION	1200:9	1200:9	4	tag
EXPR	1200:9	1200:9	5	tag
FIELD	1200:9	1200:9	6	tag
LEAF_NODE	1200:9	1200:9	7	tag
LEAF_NODE	1200:12	1200:12	4	)
STATEMENTS	1200:14	1228:1	4	
LEAF_NODE	1200:14	1200:14	5	{
STATEMENTS	1201:1	1227:2	5	
LABEL	1201:1	1201:21	6	case TIFFTAG_FAXMODE :
LEAF_NODE	1201:1	1201:1	7	case
LEAF_NODE	1201:6	1201:6	7	TIFFTAG_FAXMODE
LEAF_NODE	1201:21	1201:21	7	:
EXPR_STATEMENT	1202:2	1202:34	6	sp -> mode = ( int ) va_arg ( ap , int ) ;
EXPR	1202:2	1202:2	7	sp -> mode = ( int ) va_arg ( ap , int )
ASSIGN	1202:2	1202:13	8	sp -> mode = ( int ) va_arg ( ap , int )
LVAL	1202:2	1202:2	9	sp -> mode
FIELD	1202:2	1202:6	10	sp -> mode
LEAF_NODE	1202:2	1202:2	11	sp
LEAF_NODE	1202:4	1202:4	11	->
LEAF_NODE	1202:6	1202:6	11	mode
ASSIGN_OP	1202:11	1202:11	9	=
LEAF_NODE	1202:11	1202:11	10	=
RVAL	1202:13	1202:19	9	( int ) va_arg ( ap , int )
LEAF_NODE	1202:13	1202:13	10	(
TYPE_NAME	1202:14	1202:14	10	int
LEAF_NODE	1202:14	1202:14	11	int
LEAF_NODE	1202:17	1202:17	10	)
FUNCTION_CALL	1202:19	1202:33	10	va_arg ( ap , int )
CALLEE	1202:19	1202:19	11	va_arg
LEAF_NODE	1202:19	1202:19	12	va_arg
LEAF_NODE	1202:25	1202:25	11	(
ARGUMENT	1202:26	1202:26	11	ap
FIELD	1202:26	1202:26	12	ap
LEAF_NODE	1202:26	1202:26	13	ap
LEAF_NODE	1202:28	1202:28	11	,
ARGUMENT	1202:30	1202:30	11	int
FIELD	1202:30	1202:30	12	int
LEAF_NODE	1202:30	1202:30	13	int
LEAF_NODE	1202:33	1202:33	11	)
LEAF_NODE	1202:34	1202:34	7	;
JUMP_STATEMENT	1203:2	1203:10	6	return 1 ;
KEYWORD	1203:2	1203:2	7	return
LEAF_NODE	1203:2	1203:2	8	return
DESTINATION	1203:9	1203:9	7	1
EXPR	1203:9	1203:9	8	1
FIELD	1203:9	1203:9	9	1
LEAF_NODE	1203:9	1203:9	10	1
LEAF_NODE	1203:10	1203:10	7	;
LABEL	1204:1	1204:25	6	case TIFFTAG_FAXFILLFUNC :
LEAF_NODE	1204:1	1204:1	7	case
LEAF_NODE	1204:6	1204:6	7	TIFFTAG_FAXFILLFUNC
LEAF_NODE	1204:25	1204:25	7	:
EXPR_STATEMENT	1205:2	1205:55	6	DecoderState ( tif ) -> fill = va_arg ( ap , TIFFFaxFillFunc ) ;
EXPR	1205:2	1205:2	7	DecoderState ( tif ) -> fill = va_arg ( ap , TIFFFaxFillFunc )
ASSIGN	1205:2	1205:28	8	DecoderState ( tif ) -> fill = va_arg ( ap , TIFFFaxFillFunc )
LVAL	1205:2	1205:21	9	DecoderState ( tif ) -> fill
FUNCTION_CALL	1205:2	1205:18	10	DecoderState ( tif )
CALLEE	1205:2	1205:2	11	DecoderState
LEAF_NODE	1205:2	1205:2	12	DecoderState
LEAF_NODE	1205:14	1205:14	11	(
ARGUMENT	1205:15	1205:15	11	tif
FIELD	1205:15	1205:15	12	tif
LEAF_NODE	1205:15	1205:15	13	tif
LEAF_NODE	1205:18	1205:18	11	)
LEAF_NODE	1205:19	1205:19	10	->
LEAF_NODE	1205:21	1205:21	10	fill
ASSIGN_OP	1205:26	1205:26	9	=
LEAF_NODE	1205:26	1205:26	10	=
RVAL	1205:28	1205:28	9	va_arg ( ap , TIFFFaxFillFunc )
FUNCTION_CALL	1205:28	1205:54	10	va_arg ( ap , TIFFFaxFillFunc )
CALLEE	1205:28	1205:28	11	va_arg
LEAF_NODE	1205:28	1205:28	12	va_arg
LEAF_NODE	1205:34	1205:34	11	(
ARGUMENT	1205:35	1205:35	11	ap
FIELD	1205:35	1205:35	12	ap
LEAF_NODE	1205:35	1205:35	13	ap
LEAF_NODE	1205:37	1205:37	11	,
ARGUMENT	1205:39	1205:39	11	TIFFFaxFillFunc
FIELD	1205:39	1205:39	12	TIFFFaxFillFunc
LEAF_NODE	1205:39	1205:39	13	TIFFFaxFillFunc
LEAF_NODE	1205:54	1205:54	11	)
LEAF_NODE	1205:55	1205:55	7	;
JUMP_STATEMENT	1206:2	1206:10	6	return 1 ;
KEYWORD	1206:2	1206:2	7	return
LEAF_NODE	1206:2	1206:2	8	return
DESTINATION	1206:9	1206:9	7	1
EXPR	1206:9	1206:9	8	1
FIELD	1206:9	1206:9	9	1
LEAF_NODE	1206:9	1206:9	10	1
LEAF_NODE	1206:10	1206:10	7	;
LABEL	1207:1	1207:27	6	case TIFFTAG_GROUP3OPTIONS :
LEAF_NODE	1207:1	1207:1	7	case
LEAF_NODE	1207:6	1207:6	7	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	1207:27	1207:27	7	:
SELECTION	1209:2	1210:3	6	
KEYWORD	1209:2	1209:2	7	if
LEAF_NODE	1209:2	1209:2	8	if
LEAF_NODE	1209:5	1209:5	7	(
CONDITION	1209:6	1209:6	7	tif -> tif_dir . td_compression == COMPRESSION_CCITTFAX3
EXPR	1209:6	1209:37	8	tif -> tif_dir . td_compression == COMPRESSION_CCITTFAX3
FIELD	1209:6	1209:19	9	tif -> tif_dir . td_compression
LEAF_NODE	1209:6	1209:6	10	tif
LEAF_NODE	1209:9	1209:9	10	->
LEAF_NODE	1209:11	1209:11	10	tif_dir
LEAF_NODE	1209:18	1209:18	10	.
LEAF_NODE	1209:19	1209:19	10	td_compression
EQ_OPERATOR	1209:34	1209:34	9	==
LEAF_NODE	1209:34	1209:34	10	==
FIELD	1209:37	1209:37	9	COMPRESSION_CCITTFAX3
LEAF_NODE	1209:37	1209:37	10	COMPRESSION_CCITTFAX3
LEAF_NODE	1209:58	1209:58	7	)
STATEMENTS	1210:3	1210:3	7	
EXPR_STATEMENT	1210:3	1210:49	8	sp -> groupoptions = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	1210:3	1210:3	9	sp -> groupoptions = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	1210:3	1210:22	10	sp -> groupoptions = ( uint32 ) va_arg ( ap , uint32 )
LVAL	1210:3	1210:3	11	sp -> groupoptions
FIELD	1210:3	1210:7	12	sp -> groupoptions
LEAF_NODE	1210:3	1210:3	13	sp
LEAF_NODE	1210:5	1210:5	13	->
LEAF_NODE	1210:7	1210:7	13	groupoptions
ASSIGN_OP	1210:20	1210:20	11	=
LEAF_NODE	1210:20	1210:20	12	=
RVAL	1210:22	1210:31	11	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	1210:22	1210:22	12	(
TYPE_NAME	1210:23	1210:23	12	uint32
LEAF_NODE	1210:23	1210:23	13	uint32
LEAF_NODE	1210:29	1210:29	12	)
FUNCTION_CALL	1210:31	1210:48	12	va_arg ( ap , uint32 )
CALLEE	1210:31	1210:31	13	va_arg
LEAF_NODE	1210:31	1210:31	14	va_arg
LEAF_NODE	1210:37	1210:37	13	(
ARGUMENT	1210:38	1210:38	13	ap
FIELD	1210:38	1210:38	14	ap
LEAF_NODE	1210:38	1210:38	15	ap
LEAF_NODE	1210:40	1210:40	13	,
ARGUMENT	1210:42	1210:42	13	uint32
FIELD	1210:42	1210:42	14	uint32
LEAF_NODE	1210:42	1210:42	15	uint32
LEAF_NODE	1210:48	1210:48	13	)
LEAF_NODE	1210:49	1210:49	9	;
JUMP_STATEMENT	1211:2	1211:7	6	break DESTINATION ;
KEYWORD	1211:2	1211:2	7	break
LEAF_NODE	1211:2	1211:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1211:7	1211:7	7	;
LABEL	1212:1	1212:27	6	case TIFFTAG_GROUP4OPTIONS :
LEAF_NODE	1212:1	1212:1	7	case
LEAF_NODE	1212:6	1212:6	7	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	1212:27	1212:27	7	:
SELECTION	1214:2	1215:3	6	
KEYWORD	1214:2	1214:2	7	if
LEAF_NODE	1214:2	1214:2	8	if
LEAF_NODE	1214:5	1214:5	7	(
CONDITION	1214:6	1214:6	7	tif -> tif_dir . td_compression == COMPRESSION_CCITTFAX4
EXPR	1214:6	1214:37	8	tif -> tif_dir . td_compression == COMPRESSION_CCITTFAX4
FIELD	1214:6	1214:19	9	tif -> tif_dir . td_compression
LEAF_NODE	1214:6	1214:6	10	tif
LEAF_NODE	1214:9	1214:9	10	->
LEAF_NODE	1214:11	1214:11	10	tif_dir
LEAF_NODE	1214:18	1214:18	10	.
LEAF_NODE	1214:19	1214:19	10	td_compression
EQ_OPERATOR	1214:34	1214:34	9	==
LEAF_NODE	1214:34	1214:34	10	==
FIELD	1214:37	1214:37	9	COMPRESSION_CCITTFAX4
LEAF_NODE	1214:37	1214:37	10	COMPRESSION_CCITTFAX4
LEAF_NODE	1214:58	1214:58	7	)
STATEMENTS	1215:3	1215:3	7	
EXPR_STATEMENT	1215:3	1215:49	8	sp -> groupoptions = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	1215:3	1215:3	9	sp -> groupoptions = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	1215:3	1215:22	10	sp -> groupoptions = ( uint32 ) va_arg ( ap , uint32 )
LVAL	1215:3	1215:3	11	sp -> groupoptions
FIELD	1215:3	1215:7	12	sp -> groupoptions
LEAF_NODE	1215:3	1215:3	13	sp
LEAF_NODE	1215:5	1215:5	13	->
LEAF_NODE	1215:7	1215:7	13	groupoptions
ASSIGN_OP	1215:20	1215:20	11	=
LEAF_NODE	1215:20	1215:20	12	=
RVAL	1215:22	1215:31	11	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	1215:22	1215:22	12	(
TYPE_NAME	1215:23	1215:23	12	uint32
LEAF_NODE	1215:23	1215:23	13	uint32
LEAF_NODE	1215:29	1215:29	12	)
FUNCTION_CALL	1215:31	1215:48	12	va_arg ( ap , uint32 )
CALLEE	1215:31	1215:31	13	va_arg
LEAF_NODE	1215:31	1215:31	14	va_arg
LEAF_NODE	1215:37	1215:37	13	(
ARGUMENT	1215:38	1215:38	13	ap
FIELD	1215:38	1215:38	14	ap
LEAF_NODE	1215:38	1215:38	15	ap
LEAF_NODE	1215:40	1215:40	13	,
ARGUMENT	1215:42	1215:42	13	uint32
FIELD	1215:42	1215:42	14	uint32
LEAF_NODE	1215:42	1215:42	15	uint32
LEAF_NODE	1215:48	1215:48	13	)
LEAF_NODE	1215:49	1215:49	9	;
JUMP_STATEMENT	1216:2	1216:7	6	break DESTINATION ;
KEYWORD	1216:2	1216:2	7	break
LEAF_NODE	1216:2	1216:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1216:7	1216:7	7	;
LABEL	1217:1	1217:25	6	case TIFFTAG_BADFAXLINES :
LEAF_NODE	1217:1	1217:1	7	case
LEAF_NODE	1217:6	1217:6	7	TIFFTAG_BADFAXLINES
LEAF_NODE	1217:25	1217:25	7	:
EXPR_STATEMENT	1218:2	1218:47	6	sp -> badfaxlines = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	1218:2	1218:2	7	sp -> badfaxlines = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	1218:2	1218:20	8	sp -> badfaxlines = ( uint32 ) va_arg ( ap , uint32 )
LVAL	1218:2	1218:2	9	sp -> badfaxlines
FIELD	1218:2	1218:6	10	sp -> badfaxlines
LEAF_NODE	1218:2	1218:2	11	sp
LEAF_NODE	1218:4	1218:4	11	->
LEAF_NODE	1218:6	1218:6	11	badfaxlines
ASSIGN_OP	1218:18	1218:18	9	=
LEAF_NODE	1218:18	1218:18	10	=
RVAL	1218:20	1218:29	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	1218:20	1218:20	10	(
TYPE_NAME	1218:21	1218:21	10	uint32
LEAF_NODE	1218:21	1218:21	11	uint32
LEAF_NODE	1218:27	1218:27	10	)
FUNCTION_CALL	1218:29	1218:46	10	va_arg ( ap , uint32 )
CALLEE	1218:29	1218:29	11	va_arg
LEAF_NODE	1218:29	1218:29	12	va_arg
LEAF_NODE	1218:35	1218:35	11	(
ARGUMENT	1218:36	1218:36	11	ap
FIELD	1218:36	1218:36	12	ap
LEAF_NODE	1218:36	1218:36	13	ap
LEAF_NODE	1218:38	1218:38	11	,
ARGUMENT	1218:40	1218:40	11	uint32
FIELD	1218:40	1218:40	12	uint32
LEAF_NODE	1218:40	1218:40	13	uint32
LEAF_NODE	1218:46	1218:46	11	)
LEAF_NODE	1218:47	1218:47	7	;
JUMP_STATEMENT	1219:2	1219:7	6	break DESTINATION ;
KEYWORD	1219:2	1219:2	7	break
LEAF_NODE	1219:2	1219:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1219:7	1219:7	7	;
LABEL	1220:1	1220:26	6	case TIFFTAG_CLEANFAXDATA :
LEAF_NODE	1220:1	1220:1	7	case
LEAF_NODE	1220:6	1220:6	7	TIFFTAG_CLEANFAXDATA
LEAF_NODE	1220:26	1220:26	7	:
EXPR_STATEMENT	1221:2	1221:52	6	sp -> cleanfaxdata = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	1221:2	1221:2	7	sp -> cleanfaxdata = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	1221:2	1221:21	8	sp -> cleanfaxdata = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	1221:2	1221:2	9	sp -> cleanfaxdata
FIELD	1221:2	1221:6	10	sp -> cleanfaxdata
LEAF_NODE	1221:2	1221:2	11	sp
LEAF_NODE	1221:4	1221:4	11	->
LEAF_NODE	1221:6	1221:6	11	cleanfaxdata
ASSIGN_OP	1221:19	1221:19	9	=
LEAF_NODE	1221:19	1221:19	10	=
RVAL	1221:21	1221:30	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	1221:21	1221:21	10	(
TYPE_NAME	1221:22	1221:22	10	uint16
LEAF_NODE	1221:22	1221:22	11	uint16
LEAF_NODE	1221:28	1221:28	10	)
FUNCTION_CALL	1221:30	1221:51	10	va_arg ( ap , uint16_vap )
CALLEE	1221:30	1221:30	11	va_arg
LEAF_NODE	1221:30	1221:30	12	va_arg
LEAF_NODE	1221:36	1221:36	11	(
ARGUMENT	1221:37	1221:37	11	ap
FIELD	1221:37	1221:37	12	ap
LEAF_NODE	1221:37	1221:37	13	ap
LEAF_NODE	1221:39	1221:39	11	,
ARGUMENT	1221:41	1221:41	11	uint16_vap
FIELD	1221:41	1221:41	12	uint16_vap
LEAF_NODE	1221:41	1221:41	13	uint16_vap
LEAF_NODE	1221:51	1221:51	11	)
LEAF_NODE	1221:52	1221:52	7	;
JUMP_STATEMENT	1222:2	1222:7	6	break DESTINATION ;
KEYWORD	1222:2	1222:2	7	break
LEAF_NODE	1222:2	1222:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1222:7	1222:7	7	;
LABEL	1223:1	1223:36	6	case TIFFTAG_CONSECUTIVEBADFAXLINES :
LEAF_NODE	1223:1	1223:1	7	case
LEAF_NODE	1223:6	1223:6	7	TIFFTAG_CONSECUTIVEBADFAXLINES
LEAF_NODE	1223:36	1223:36	7	:
EXPR_STATEMENT	1224:2	1224:45	6	sp -> badfaxrun = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	1224:2	1224:2	7	sp -> badfaxrun = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	1224:2	1224:18	8	sp -> badfaxrun = ( uint32 ) va_arg ( ap , uint32 )
LVAL	1224:2	1224:2	9	sp -> badfaxrun
FIELD	1224:2	1224:6	10	sp -> badfaxrun
LEAF_NODE	1224:2	1224:2	11	sp
LEAF_NODE	1224:4	1224:4	11	->
LEAF_NODE	1224:6	1224:6	11	badfaxrun
ASSIGN_OP	1224:16	1224:16	9	=
LEAF_NODE	1224:16	1224:16	10	=
RVAL	1224:18	1224:27	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	1224:18	1224:18	10	(
TYPE_NAME	1224:19	1224:19	10	uint32
LEAF_NODE	1224:19	1224:19	11	uint32
LEAF_NODE	1224:25	1224:25	10	)
FUNCTION_CALL	1224:27	1224:44	10	va_arg ( ap , uint32 )
CALLEE	1224:27	1224:27	11	va_arg
LEAF_NODE	1224:27	1224:27	12	va_arg
LEAF_NODE	1224:33	1224:33	11	(
ARGUMENT	1224:34	1224:34	11	ap
FIELD	1224:34	1224:34	12	ap
LEAF_NODE	1224:34	1224:34	13	ap
LEAF_NODE	1224:36	1224:36	11	,
ARGUMENT	1224:38	1224:38	11	uint32
FIELD	1224:38	1224:38	12	uint32
LEAF_NODE	1224:38	1224:38	13	uint32
LEAF_NODE	1224:44	1224:44	11	)
LEAF_NODE	1224:45	1224:45	7	;
JUMP_STATEMENT	1225:2	1225:7	6	break DESTINATION ;
KEYWORD	1225:2	1225:2	7	break
LEAF_NODE	1225:2	1225:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1225:7	1225:7	7	;
LABEL	1226:1	1226:8	6	default :
LEAF_NODE	1226:1	1226:1	7	default
LEAF_NODE	1226:8	1226:8	7	:
JUMP_STATEMENT	1227:2	1227:40	6	return ( * sp -> vsetparent ) ( tif , tag , ap ) ;
KEYWORD	1227:2	1227:2	7	return
LEAF_NODE	1227:2	1227:2	8	return
DESTINATION	1227:9	1227:9	7	( * sp -> vsetparent ) ( tif , tag , ap )
EXPR	1227:9	1227:9	8	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	1227:9	1227:39	9	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	1227:9	1227:25	10	( * sp -> vsetparent )
LEAF_NODE	1227:9	1227:9	11	(
UNARY_EXPR	1227:10	1227:11	11	* sp -> vsetparent
UNARY_OPERATOR	1227:10	1227:10	12	*
LEAF_NODE	1227:10	1227:10	13	*
FIELD	1227:11	1227:15	12	sp -> vsetparent
LEAF_NODE	1227:11	1227:11	13	sp
LEAF_NODE	1227:13	1227:13	13	->
LEAF_NODE	1227:15	1227:15	13	vsetparent
LEAF_NODE	1227:25	1227:25	11	)
LEAF_NODE	1227:26	1227:26	10	(
ARGUMENT	1227:27	1227:27	10	tif
FIELD	1227:27	1227:27	11	tif
LEAF_NODE	1227:27	1227:27	12	tif
LEAF_NODE	1227:30	1227:30	10	,
ARGUMENT	1227:32	1227:32	10	tag
FIELD	1227:32	1227:32	11	tag
LEAF_NODE	1227:32	1227:32	12	tag
LEAF_NODE	1227:35	1227:35	10	,
ARGUMENT	1227:37	1227:37	10	ap
FIELD	1227:37	1227:37	11	ap
LEAF_NODE	1227:37	1227:37	12	ap
LEAF_NODE	1227:39	1227:39	10	)
LEAF_NODE	1227:40	1227:40	7	;
LEAF_NODE	1228:1	1228:1	5	}
SELECTION	1230:1	1231:2	3	
KEYWORD	1230:1	1230:1	4	if
LEAF_NODE	1230:1	1230:1	5	if
LEAF_NODE	1230:4	1230:4	4	(
CONDITION	1230:5	1230:5	4	( fip = TIFFFieldWithTag ( tif , tag ) ) != NULL
EXPR	1230:5	1230:43	5	( fip = TIFFFieldWithTag ( tif , tag ) ) != NULL
LEAF_NODE	1230:5	1230:5	6	(
ASSIGN	1230:6	1230:12	6	fip = TIFFFieldWithTag ( tif , tag )
LVAL	1230:6	1230:6	7	fip
FIELD	1230:6	1230:6	8	fip
LEAF_NODE	1230:6	1230:6	9	fip
ASSIGN_OP	1230:10	1230:10	7	=
LEAF_NODE	1230:10	1230:10	8	=
RVAL	1230:12	1230:12	7	TIFFFieldWithTag ( tif , tag )
FUNCTION_CALL	1230:12	1230:37	8	TIFFFieldWithTag ( tif , tag )
CALLEE	1230:12	1230:12	9	TIFFFieldWithTag
LEAF_NODE	1230:12	1230:12	10	TIFFFieldWithTag
LEAF_NODE	1230:28	1230:28	9	(
ARGUMENT	1230:29	1230:29	9	tif
FIELD	1230:29	1230:29	10	tif
LEAF_NODE	1230:29	1230:29	11	tif
LEAF_NODE	1230:32	1230:32	9	,
ARGUMENT	1230:34	1230:34	9	tag
FIELD	1230:34	1230:34	10	tag
LEAF_NODE	1230:34	1230:34	11	tag
LEAF_NODE	1230:37	1230:37	9	)
LEAF_NODE	1230:38	1230:38	6	)
EQ_OPERATOR	1230:40	1230:40	6	!=
LEAF_NODE	1230:40	1230:40	7	!=
FIELD	1230:43	1230:43	6	NULL
LEAF_NODE	1230:43	1230:43	7	NULL
LEAF_NODE	1230:47	1230:47	4	)
STATEMENTS	1231:2	1231:2	4	
EXPR_STATEMENT	1231:2	1231:38	5	TIFFSetFieldBit ( tif , fip -> field_bit ) ;
EXPR	1231:2	1231:2	6	TIFFSetFieldBit ( tif , fip -> field_bit )
FUNCTION_CALL	1231:2	1231:37	7	TIFFSetFieldBit ( tif , fip -> field_bit )
CALLEE	1231:2	1231:2	8	TIFFSetFieldBit
LEAF_NODE	1231:2	1231:2	9	TIFFSetFieldBit
LEAF_NODE	1231:17	1231:17	8	(
ARGUMENT	1231:18	1231:18	8	tif
FIELD	1231:18	1231:18	9	tif
LEAF_NODE	1231:18	1231:18	10	tif
LEAF_NODE	1231:21	1231:21	8	,
ARGUMENT	1231:23	1231:23	8	fip -> field_bit
FIELD	1231:23	1231:28	9	fip -> field_bit
LEAF_NODE	1231:23	1231:23	10	fip
LEAF_NODE	1231:26	1231:26	10	->
LEAF_NODE	1231:28	1231:28	10	field_bit
LEAF_NODE	1231:37	1231:37	8	)
LEAF_NODE	1231:38	1231:38	6	;
SELECTION	1232:1	1233:2	3	
KEYWORD	1232:1	1232:1	4	else
LEAF_NODE	1232:1	1232:1	5	else
STATEMENTS	1233:2	1233:2	4	
JUMP_STATEMENT	1233:2	1233:10	5	return 0 ;
KEYWORD	1233:2	1233:2	6	return
LEAF_NODE	1233:2	1233:2	7	return
DESTINATION	1233:9	1233:9	6	0
EXPR	1233:9	1233:9	7	0
FIELD	1233:9	1233:9	8	0
LEAF_NODE	1233:9	1233:9	9	0
LEAF_NODE	1233:10	1233:10	6	;
EXPR_STATEMENT	1235:1	1235:35	3	tif -> tif_flags |= TIFF_DIRTYDIRECT ;
EXPR	1235:1	1235:1	4	tif -> tif_flags |= TIFF_DIRTYDIRECT
ASSIGN	1235:1	1235:19	5	tif -> tif_flags |= TIFF_DIRTYDIRECT
LVAL	1235:1	1235:1	6	tif -> tif_flags
FIELD	1235:1	1235:6	7	tif -> tif_flags
LEAF_NODE	1235:1	1235:1	8	tif
LEAF_NODE	1235:4	1235:4	8	->
LEAF_NODE	1235:6	1235:6	8	tif_flags
ASSIGN_OP	1235:16	1235:16	6	|=
LEAF_NODE	1235:16	1235:16	7	|=
RVAL	1235:19	1235:19	6	TIFF_DIRTYDIRECT
FIELD	1235:19	1235:19	7	TIFF_DIRTYDIRECT
LEAF_NODE	1235:19	1235:19	8	TIFF_DIRTYDIRECT
LEAF_NODE	1235:35	1235:35	4	;
JUMP_STATEMENT	1236:1	1236:9	3	return 1 ;
KEYWORD	1236:1	1236:1	4	return
LEAF_NODE	1236:1	1236:1	5	return
DESTINATION	1236:8	1236:8	4	1
EXPR	1236:8	1236:8	5	1
FIELD	1236:8	1236:8	6	1
LEAF_NODE	1236:8	1236:8	7	1
LEAF_NODE	1236:9	1236:9	4	;
LEAF_NODE	1237:0	1237:0	2	}
FUNCTION_DEF	1239:0	1270:0	1	
RETURN_TYPE	1239:0	1239:7	2	static int
LEAF_NODE	1239:0	1239:0	3	static
TYPE_NAME	1239:7	1239:7	3	int
LEAF_NODE	1239:7	1239:7	4	int
FUNCTION_NAME	1240:0	1240:0	2	Fax3VGetField
LEAF_NODE	1240:0	1240:0	3	Fax3VGetField
PARAMETER_LIST	1240:13	1240:47	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	1240:13	1240:13	3	(
PARAMETER_DECL	1240:14	1240:20	3	TIFF * tif
TYPE	1240:14	1240:18	4	TIFF *
TYPE_NAME	1240:14	1240:14	5	TIFF
LEAF_NODE	1240:14	1240:14	6	TIFF
POINTER	1240:18	1240:18	5	*
LEAF_NODE	1240:18	1240:18	6	*
NAME	1240:20	1240:20	4	tif
LEAF_NODE	1240:20	1240:20	5	tif
LEAF_NODE	1240:23	1240:23	3	,
PARAMETER_DECL	1240:25	1240:32	3	uint32 tag
TYPE	1240:25	1240:25	4	uint32
TYPE_NAME	1240:25	1240:25	5	uint32
LEAF_NODE	1240:25	1240:25	6	uint32
NAME	1240:32	1240:32	4	tag
LEAF_NODE	1240:32	1240:32	5	tag
LEAF_NODE	1240:35	1240:35	3	,
PARAMETER_DECL	1240:37	1240:45	3	va_list ap
TYPE	1240:37	1240:37	4	va_list
TYPE_NAME	1240:37	1240:37	5	va_list
LEAF_NODE	1240:37	1240:37	6	va_list
NAME	1240:45	1240:45	4	ap
LEAF_NODE	1240:45	1240:45	5	ap
LEAF_NODE	1240:47	1240:47	3	)
LEAF_NODE	1241:0	1241:0	2	{
STATEMENTS	1242:1	1269:1	2	
SIMPLE_DECL	1242:1	1242:35	3	Fax3BaseState * sp ; sp = Fax3State ( tif ) ;
VAR_DECL	1242:1	1242:16	4	Fax3BaseState * sp ; sp = Fax3State ( tif )
TYPE	1242:1	1242:14	5	Fax3BaseState *
TYPE_NAME	1242:1	1242:1	6	Fax3BaseState
LEAF_NODE	1242:1	1242:1	7	Fax3BaseState
POINTER	1242:14	1242:14	6	*
LEAF_NODE	1242:14	1242:14	7	*
NAME	1242:16	1242:16	5	sp
LEAF_NODE	1242:16	1242:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1242:16	1242:16	5	sp = Fax3State ( tif )
ASSIGN	1242:16	1242:21	6	sp = Fax3State ( tif )
LVAL	1242:16	1242:16	7	sp
NAME	1242:16	1242:16	8	sp
LEAF_NODE	1242:16	1242:16	9	sp
ASSIGN_OP	1242:19	1242:19	7	=
LEAF_NODE	1242:19	1242:19	8	=
RVAL	1242:21	1242:21	7	Fax3State ( tif )
FUNCTION_CALL	1242:21	1242:34	8	Fax3State ( tif )
CALLEE	1242:21	1242:21	9	Fax3State
LEAF_NODE	1242:21	1242:21	10	Fax3State
LEAF_NODE	1242:30	1242:30	9	(
ARGUMENT	1242:31	1242:31	9	tif
FIELD	1242:31	1242:31	10	tif
LEAF_NODE	1242:31	1242:31	11	tif
LEAF_NODE	1242:34	1242:34	9	)
LEAF_NODE	1242:35	1242:35	4	;
EXPR_STATEMENT	1244:1	1244:16	3	assert ( sp != 0 ) ;
EXPR	1244:1	1244:1	4	assert ( sp != 0 )
FUNCTION_CALL	1244:1	1244:15	5	assert ( sp != 0 )
CALLEE	1244:1	1244:1	6	assert
LEAF_NODE	1244:1	1244:1	7	assert
LEAF_NODE	1244:7	1244:7	6	(
ARGUMENT	1244:8	1244:14	6	sp != 0
FIELD	1244:8	1244:8	7	sp
LEAF_NODE	1244:8	1244:8	8	sp
EQ_OPERATOR	1244:11	1244:11	7	!=
LEAF_NODE	1244:11	1244:11	8	!=
FIELD	1244:14	1244:14	7	0
LEAF_NODE	1244:14	1244:14	8	0
LEAF_NODE	1244:15	1244:15	6	)
LEAF_NODE	1244:16	1244:16	4	;
SELECTION	1246:1	1246:14	3	
KEYWORD	1246:1	1246:1	4	switch
LEAF_NODE	1246:1	1246:1	5	switch
LEAF_NODE	1246:8	1246:8	4	(
CONDITION	1246:9	1246:9	4	tag
EXPR	1246:9	1246:9	5	tag
FIELD	1246:9	1246:9	6	tag
LEAF_NODE	1246:9	1246:9	7	tag
LEAF_NODE	1246:12	1246:12	4	)
STATEMENTS	1246:14	1268:1	4	
LEAF_NODE	1246:14	1246:14	5	{
STATEMENTS	1247:1	1267:2	5	
LABEL	1247:1	1247:21	6	case TIFFTAG_FAXMODE :
LEAF_NODE	1247:1	1247:1	7	case
LEAF_NODE	1247:6	1247:6	7	TIFFTAG_FAXMODE
LEAF_NODE	1247:21	1247:21	7	:
LEAF_NODE	1248:2	1248:2	6	*
LEAF_NODE	1248:3	1248:3	6	va_arg
LEAF_NODE	1248:9	1248:9	6	(
LEAF_NODE	1248:10	1248:10	6	ap
LEAF_NODE	1248:12	1248:12	6	,
LEAF_NODE	1248:14	1248:14	6	int
LEAF_NODE	1248:17	1248:17	6	*
LEAF_NODE	1248:18	1248:18	6	)
LEAF_NODE	1248:20	1248:20	6	=
EXPR_STATEMENT	1248:22	1248:30	6	sp -> mode ;
EXPR	1248:22	1248:22	7	sp -> mode
FIELD	1248:22	1248:26	8	sp -> mode
LEAF_NODE	1248:22	1248:22	9	sp
LEAF_NODE	1248:24	1248:24	9	->
LEAF_NODE	1248:26	1248:26	9	mode
LEAF_NODE	1248:30	1248:30	7	;
JUMP_STATEMENT	1249:2	1249:7	6	break DESTINATION ;
KEYWORD	1249:2	1249:2	7	break
LEAF_NODE	1249:2	1249:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1249:7	1249:7	7	;
LABEL	1250:1	1250:25	6	case TIFFTAG_FAXFILLFUNC :
LEAF_NODE	1250:1	1250:1	7	case
LEAF_NODE	1250:6	1250:6	7	TIFFTAG_FAXFILLFUNC
LEAF_NODE	1250:25	1250:25	7	:
LEAF_NODE	1251:2	1251:2	6	*
LEAF_NODE	1251:3	1251:3	6	va_arg
LEAF_NODE	1251:9	1251:9	6	(
LEAF_NODE	1251:10	1251:10	6	ap
LEAF_NODE	1251:12	1251:12	6	,
LEAF_NODE	1251:14	1251:14	6	TIFFFaxFillFunc
LEAF_NODE	1251:29	1251:29	6	*
LEAF_NODE	1251:30	1251:30	6	)
LEAF_NODE	1251:32	1251:32	6	=
EXPR_STATEMENT	1251:34	1251:57	6	DecoderState ( tif ) -> fill ;
EXPR	1251:34	1251:53	7	DecoderState ( tif ) -> fill
FUNCTION_CALL	1251:34	1251:50	8	DecoderState ( tif )
CALLEE	1251:34	1251:34	9	DecoderState
LEAF_NODE	1251:34	1251:34	10	DecoderState
LEAF_NODE	1251:46	1251:46	9	(
ARGUMENT	1251:47	1251:47	9	tif
FIELD	1251:47	1251:47	10	tif
LEAF_NODE	1251:47	1251:47	11	tif
LEAF_NODE	1251:50	1251:50	9	)
LEAF_NODE	1251:51	1251:51	8	->
LEAF_NODE	1251:53	1251:53	8	fill
LEAF_NODE	1251:57	1251:57	7	;
JUMP_STATEMENT	1252:2	1252:7	6	break DESTINATION ;
KEYWORD	1252:2	1252:2	7	break
LEAF_NODE	1252:2	1252:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1252:7	1252:7	7	;
LABEL	1253:1	1253:27	6	case TIFFTAG_GROUP3OPTIONS :
LEAF_NODE	1253:1	1253:1	7	case
LEAF_NODE	1253:6	1253:6	7	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	1253:27	1253:27	7	:
LABEL	1254:1	1254:27	6	case TIFFTAG_GROUP4OPTIONS :
LEAF_NODE	1254:1	1254:1	7	case
LEAF_NODE	1254:6	1254:6	7	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	1254:27	1254:27	7	:
LEAF_NODE	1255:2	1255:2	6	*
LEAF_NODE	1255:3	1255:3	6	va_arg
LEAF_NODE	1255:9	1255:9	6	(
LEAF_NODE	1255:10	1255:10	6	ap
LEAF_NODE	1255:12	1255:12	6	,
LEAF_NODE	1255:14	1255:14	6	uint32
LEAF_NODE	1255:20	1255:20	6	*
LEAF_NODE	1255:21	1255:21	6	)
LEAF_NODE	1255:23	1255:23	6	=
EXPR_STATEMENT	1255:25	1255:41	6	sp -> groupoptions ;
EXPR	1255:25	1255:25	7	sp -> groupoptions
FIELD	1255:25	1255:29	8	sp -> groupoptions
LEAF_NODE	1255:25	1255:25	9	sp
LEAF_NODE	1255:27	1255:27	9	->
LEAF_NODE	1255:29	1255:29	9	groupoptions
LEAF_NODE	1255:41	1255:41	7	;
JUMP_STATEMENT	1256:2	1256:7	6	break DESTINATION ;
KEYWORD	1256:2	1256:2	7	break
LEAF_NODE	1256:2	1256:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1256:7	1256:7	7	;
LABEL	1257:1	1257:25	6	case TIFFTAG_BADFAXLINES :
LEAF_NODE	1257:1	1257:1	7	case
LEAF_NODE	1257:6	1257:6	7	TIFFTAG_BADFAXLINES
LEAF_NODE	1257:25	1257:25	7	:
LEAF_NODE	1258:2	1258:2	6	*
LEAF_NODE	1258:3	1258:3	6	va_arg
LEAF_NODE	1258:9	1258:9	6	(
LEAF_NODE	1258:10	1258:10	6	ap
LEAF_NODE	1258:12	1258:12	6	,
LEAF_NODE	1258:14	1258:14	6	uint32
LEAF_NODE	1258:20	1258:20	6	*
LEAF_NODE	1258:21	1258:21	6	)
LEAF_NODE	1258:23	1258:23	6	=
EXPR_STATEMENT	1258:25	1258:40	6	sp -> badfaxlines ;
EXPR	1258:25	1258:25	7	sp -> badfaxlines
FIELD	1258:25	1258:29	8	sp -> badfaxlines
LEAF_NODE	1258:25	1258:25	9	sp
LEAF_NODE	1258:27	1258:27	9	->
LEAF_NODE	1258:29	1258:29	9	badfaxlines
LEAF_NODE	1258:40	1258:40	7	;
JUMP_STATEMENT	1259:2	1259:7	6	break DESTINATION ;
KEYWORD	1259:2	1259:2	7	break
LEAF_NODE	1259:2	1259:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1259:7	1259:7	7	;
LABEL	1260:1	1260:26	6	case TIFFTAG_CLEANFAXDATA :
LEAF_NODE	1260:1	1260:1	7	case
LEAF_NODE	1260:6	1260:6	7	TIFFTAG_CLEANFAXDATA
LEAF_NODE	1260:26	1260:26	7	:
LEAF_NODE	1261:2	1261:2	6	*
LEAF_NODE	1261:3	1261:3	6	va_arg
LEAF_NODE	1261:9	1261:9	6	(
LEAF_NODE	1261:10	1261:10	6	ap
LEAF_NODE	1261:12	1261:12	6	,
LEAF_NODE	1261:14	1261:14	6	uint16
LEAF_NODE	1261:20	1261:20	6	*
LEAF_NODE	1261:21	1261:21	6	)
LEAF_NODE	1261:23	1261:23	6	=
EXPR_STATEMENT	1261:25	1261:41	6	sp -> cleanfaxdata ;
EXPR	1261:25	1261:25	7	sp -> cleanfaxdata
FIELD	1261:25	1261:29	8	sp -> cleanfaxdata
LEAF_NODE	1261:25	1261:25	9	sp
LEAF_NODE	1261:27	1261:27	9	->
LEAF_NODE	1261:29	1261:29	9	cleanfaxdata
LEAF_NODE	1261:41	1261:41	7	;
JUMP_STATEMENT	1262:2	1262:7	6	break DESTINATION ;
KEYWORD	1262:2	1262:2	7	break
LEAF_NODE	1262:2	1262:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1262:7	1262:7	7	;
LABEL	1263:1	1263:36	6	case TIFFTAG_CONSECUTIVEBADFAXLINES :
LEAF_NODE	1263:1	1263:1	7	case
LEAF_NODE	1263:6	1263:6	7	TIFFTAG_CONSECUTIVEBADFAXLINES
LEAF_NODE	1263:36	1263:36	7	:
LEAF_NODE	1264:2	1264:2	6	*
LEAF_NODE	1264:3	1264:3	6	va_arg
LEAF_NODE	1264:9	1264:9	6	(
LEAF_NODE	1264:10	1264:10	6	ap
LEAF_NODE	1264:12	1264:12	6	,
LEAF_NODE	1264:14	1264:14	6	uint32
LEAF_NODE	1264:20	1264:20	6	*
LEAF_NODE	1264:21	1264:21	6	)
LEAF_NODE	1264:23	1264:23	6	=
EXPR_STATEMENT	1264:25	1264:38	6	sp -> badfaxrun ;
EXPR	1264:25	1264:25	7	sp -> badfaxrun
FIELD	1264:25	1264:29	8	sp -> badfaxrun
LEAF_NODE	1264:25	1264:25	9	sp
LEAF_NODE	1264:27	1264:27	9	->
LEAF_NODE	1264:29	1264:29	9	badfaxrun
LEAF_NODE	1264:38	1264:38	7	;
JUMP_STATEMENT	1265:2	1265:7	6	break DESTINATION ;
KEYWORD	1265:2	1265:2	7	break
LEAF_NODE	1265:2	1265:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1265:7	1265:7	7	;
LABEL	1266:1	1266:8	6	default :
LEAF_NODE	1266:1	1266:1	7	default
LEAF_NODE	1266:8	1266:8	7	:
JUMP_STATEMENT	1267:2	1267:40	6	return ( * sp -> vgetparent ) ( tif , tag , ap ) ;
KEYWORD	1267:2	1267:2	7	return
LEAF_NODE	1267:2	1267:2	8	return
DESTINATION	1267:9	1267:9	7	( * sp -> vgetparent ) ( tif , tag , ap )
EXPR	1267:9	1267:9	8	( * sp -> vgetparent ) ( tif , tag , ap )
FUNCTION_CALL	1267:9	1267:39	9	( * sp -> vgetparent ) ( tif , tag , ap )
CALLEE	1267:9	1267:25	10	( * sp -> vgetparent )
LEAF_NODE	1267:9	1267:9	11	(
UNARY_EXPR	1267:10	1267:11	11	* sp -> vgetparent
UNARY_OPERATOR	1267:10	1267:10	12	*
LEAF_NODE	1267:10	1267:10	13	*
FIELD	1267:11	1267:15	12	sp -> vgetparent
LEAF_NODE	1267:11	1267:11	13	sp
LEAF_NODE	1267:13	1267:13	13	->
LEAF_NODE	1267:15	1267:15	13	vgetparent
LEAF_NODE	1267:25	1267:25	11	)
LEAF_NODE	1267:26	1267:26	10	(
ARGUMENT	1267:27	1267:27	10	tif
FIELD	1267:27	1267:27	11	tif
LEAF_NODE	1267:27	1267:27	12	tif
LEAF_NODE	1267:30	1267:30	10	,
ARGUMENT	1267:32	1267:32	10	tag
FIELD	1267:32	1267:32	11	tag
LEAF_NODE	1267:32	1267:32	12	tag
LEAF_NODE	1267:35	1267:35	10	,
ARGUMENT	1267:37	1267:37	10	ap
FIELD	1267:37	1267:37	11	ap
LEAF_NODE	1267:37	1267:37	12	ap
LEAF_NODE	1267:39	1267:39	10	)
LEAF_NODE	1267:40	1267:40	7	;
LEAF_NODE	1268:1	1268:1	5	}
JUMP_STATEMENT	1269:1	1269:11	3	return ( 1 ) ;
KEYWORD	1269:1	1269:1	4	return
LEAF_NODE	1269:1	1269:1	5	return
DESTINATION	1269:8	1269:8	4	( 1 )
EXPR	1269:8	1269:10	5	( 1 )
LEAF_NODE	1269:8	1269:8	6	(
FIELD	1269:9	1269:9	6	1
LEAF_NODE	1269:9	1269:9	7	1
LEAF_NODE	1269:10	1269:10	6	)
LEAF_NODE	1269:11	1269:11	4	;
LEAF_NODE	1270:0	1270:0	2	}
FUNCTION_DEF	1272:0	1328:0	1	
RETURN_TYPE	1272:0	1272:7	2	static void
LEAF_NODE	1272:0	1272:0	3	static
TYPE_NAME	1272:7	1272:7	3	void
LEAF_NODE	1272:7	1272:7	4	void
FUNCTION_NAME	1273:0	1273:0	2	Fax3PrintDir
LEAF_NODE	1273:0	1273:0	3	Fax3PrintDir
PARAMETER_LIST	1273:12	1273:44	2	( TIFF * tif , FILE * fd , long flags )
LEAF_NODE	1273:12	1273:12	3	(
PARAMETER_DECL	1273:13	1273:19	3	TIFF * tif
TYPE	1273:13	1273:17	4	TIFF *
TYPE_NAME	1273:13	1273:13	5	TIFF
LEAF_NODE	1273:13	1273:13	6	TIFF
POINTER	1273:17	1273:17	5	*
LEAF_NODE	1273:17	1273:17	6	*
NAME	1273:19	1273:19	4	tif
LEAF_NODE	1273:19	1273:19	5	tif
LEAF_NODE	1273:22	1273:22	3	,
PARAMETER_DECL	1273:24	1273:30	3	FILE * fd
TYPE	1273:24	1273:28	4	FILE *
TYPE_NAME	1273:24	1273:24	5	FILE
LEAF_NODE	1273:24	1273:24	6	FILE
POINTER	1273:28	1273:28	5	*
LEAF_NODE	1273:28	1273:28	6	*
NAME	1273:30	1273:30	4	fd
LEAF_NODE	1273:30	1273:30	5	fd
LEAF_NODE	1273:32	1273:32	3	,
PARAMETER_DECL	1273:34	1273:39	3	long flags
TYPE	1273:34	1273:34	4	long
TYPE_NAME	1273:34	1273:34	5	long
LEAF_NODE	1273:34	1273:34	6	long
NAME	1273:39	1273:39	4	flags
LEAF_NODE	1273:39	1273:39	5	flags
LEAF_NODE	1273:44	1273:44	3	)
LEAF_NODE	1274:0	1274:0	2	{
STATEMENTS	1275:1	1326:1	2	
SIMPLE_DECL	1275:1	1275:35	3	Fax3BaseState * sp ; sp = Fax3State ( tif ) ;
VAR_DECL	1275:1	1275:16	4	Fax3BaseState * sp ; sp = Fax3State ( tif )
TYPE	1275:1	1275:14	5	Fax3BaseState *
TYPE_NAME	1275:1	1275:1	6	Fax3BaseState
LEAF_NODE	1275:1	1275:1	7	Fax3BaseState
POINTER	1275:14	1275:14	6	*
LEAF_NODE	1275:14	1275:14	7	*
NAME	1275:16	1275:16	5	sp
LEAF_NODE	1275:16	1275:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1275:16	1275:16	5	sp = Fax3State ( tif )
ASSIGN	1275:16	1275:21	6	sp = Fax3State ( tif )
LVAL	1275:16	1275:16	7	sp
NAME	1275:16	1275:16	8	sp
LEAF_NODE	1275:16	1275:16	9	sp
ASSIGN_OP	1275:19	1275:19	7	=
LEAF_NODE	1275:19	1275:19	8	=
RVAL	1275:21	1275:21	7	Fax3State ( tif )
FUNCTION_CALL	1275:21	1275:34	8	Fax3State ( tif )
CALLEE	1275:21	1275:21	9	Fax3State
LEAF_NODE	1275:21	1275:21	10	Fax3State
LEAF_NODE	1275:30	1275:30	9	(
ARGUMENT	1275:31	1275:31	9	tif
FIELD	1275:31	1275:31	10	tif
LEAF_NODE	1275:31	1275:31	11	tif
LEAF_NODE	1275:34	1275:34	9	)
LEAF_NODE	1275:35	1275:35	4	;
EXPR_STATEMENT	1277:1	1277:16	3	assert ( sp != 0 ) ;
EXPR	1277:1	1277:1	4	assert ( sp != 0 )
FUNCTION_CALL	1277:1	1277:15	5	assert ( sp != 0 )
CALLEE	1277:1	1277:1	6	assert
LEAF_NODE	1277:1	1277:1	7	assert
LEAF_NODE	1277:7	1277:7	6	(
ARGUMENT	1277:8	1277:14	6	sp != 0
FIELD	1277:8	1277:8	7	sp
LEAF_NODE	1277:8	1277:8	8	sp
EQ_OPERATOR	1277:11	1277:11	7	!=
LEAF_NODE	1277:11	1277:11	8	!=
FIELD	1277:14	1277:14	7	0
LEAF_NODE	1277:14	1277:14	8	0
LEAF_NODE	1277:15	1277:15	6	)
LEAF_NODE	1277:16	1277:16	4	;
EXPR_STATEMENT	1279:1	1279:13	3	( void ) flags ;
EXPR	1279:1	1279:8	4	( void ) flags
LEAF_NODE	1279:1	1279:1	5	(
TYPE_NAME	1279:2	1279:2	5	void
LEAF_NODE	1279:2	1279:2	6	void
LEAF_NODE	1279:6	1279:6	5	)
FIELD	1279:8	1279:8	5	flags
LEAF_NODE	1279:8	1279:8	6	flags
LEAF_NODE	1279:13	1279:13	4	;
SELECTION	1280:1	1280:38	3	
KEYWORD	1280:1	1280:1	4	if
LEAF_NODE	1280:1	1280:1	5	if
LEAF_NODE	1280:4	1280:4	4	(
CONDITION	1280:5	1280:5	4	TIFFFieldSet ( tif , FIELD_OPTIONS )
EXPR	1280:5	1280:5	5	TIFFFieldSet ( tif , FIELD_OPTIONS )
FUNCTION_CALL	1280:5	1280:35	6	TIFFFieldSet ( tif , FIELD_OPTIONS )
CALLEE	1280:5	1280:5	7	TIFFFieldSet
LEAF_NODE	1280:5	1280:5	8	TIFFFieldSet
LEAF_NODE	1280:17	1280:17	7	(
ARGUMENT	1280:18	1280:18	7	tif
FIELD	1280:18	1280:18	8	tif
LEAF_NODE	1280:18	1280:18	9	tif
LEAF_NODE	1280:21	1280:21	7	,
ARGUMENT	1280:22	1280:22	7	FIELD_OPTIONS
FIELD	1280:22	1280:22	8	FIELD_OPTIONS
LEAF_NODE	1280:22	1280:22	9	FIELD_OPTIONS
LEAF_NODE	1280:35	1280:35	7	)
LEAF_NODE	1280:36	1280:36	4	)
STATEMENTS	1280:38	1303:1	4	
LEAF_NODE	1280:38	1280:38	5	{
STATEMENTS	1281:2	1300:2	5	
SIMPLE_DECL	1281:2	1281:23	6	const char * sep ; sep = " " ;
VAR_DECL	1281:2	1281:14	7	const char * sep ; sep = " "
TYPE	1281:2	1281:12	8	const char *
TYPE_NAME	1281:2	1281:8	9	const char
LEAF_NODE	1281:2	1281:2	10	const
LEAF_NODE	1281:8	1281:8	10	char
POINTER	1281:12	1281:12	9	*
LEAF_NODE	1281:12	1281:12	10	*
NAME	1281:14	1281:14	8	sep
LEAF_NODE	1281:14	1281:14	9	sep
LEAF_NODE	0:0	0:0	8	;
INIT	1281:14	1281:14	8	sep = " "
ASSIGN	1281:14	1281:20	9	sep = " "
LVAL	1281:14	1281:14	10	sep
NAME	1281:14	1281:14	11	sep
LEAF_NODE	1281:14	1281:14	12	sep
ASSIGN_OP	1281:18	1281:18	10	=
LEAF_NODE	1281:18	1281:18	11	=
RVAL	1281:20	1281:20	10	" "
FIELD	1281:20	1281:20	11	" "
LEAF_NODE	1281:20	1281:20	12	" "
LEAF_NODE	1281:23	1281:23	7	;
SELECTION	1282:2	1282:60	6	
KEYWORD	1282:2	1282:2	7	if
LEAF_NODE	1282:2	1282:2	8	if
LEAF_NODE	1282:5	1282:5	7	(
CONDITION	1282:6	1282:6	7	tif -> tif_dir . td_compression == COMPRESSION_CCITTFAX4
EXPR	1282:6	1282:37	8	tif -> tif_dir . td_compression == COMPRESSION_CCITTFAX4
FIELD	1282:6	1282:19	9	tif -> tif_dir . td_compression
LEAF_NODE	1282:6	1282:6	10	tif
LEAF_NODE	1282:9	1282:9	10	->
LEAF_NODE	1282:11	1282:11	10	tif_dir
LEAF_NODE	1282:18	1282:18	10	.
LEAF_NODE	1282:19	1282:19	10	td_compression
EQ_OPERATOR	1282:34	1282:34	9	==
LEAF_NODE	1282:34	1282:34	10	==
FIELD	1282:37	1282:37	9	COMPRESSION_CCITTFAX4
LEAF_NODE	1282:37	1282:37	10	COMPRESSION_CCITTFAX4
LEAF_NODE	1282:58	1282:58	7	)
STATEMENTS	1282:60	1286:2	7	
LEAF_NODE	1282:60	1282:60	8	{
STATEMENTS	1283:3	1284:3	8	
EXPR_STATEMENT	1283:3	1283:36	9	fprintf ( fd , "  Group 4 Options:" ) ;
EXPR	1283:3	1283:3	10	fprintf ( fd , "  Group 4 Options:" )
FUNCTION_CALL	1283:3	1283:35	11	fprintf ( fd , "  Group 4 Options:" )
CALLEE	1283:3	1283:3	12	fprintf
LEAF_NODE	1283:3	1283:3	13	fprintf
LEAF_NODE	1283:10	1283:10	12	(
ARGUMENT	1283:11	1283:11	12	fd
FIELD	1283:11	1283:11	13	fd
LEAF_NODE	1283:11	1283:11	14	fd
LEAF_NODE	1283:13	1283:13	12	,
ARGUMENT	1283:15	1283:15	12	"  Group 4 Options:"
FIELD	1283:15	1283:15	13	"  Group 4 Options:"
LEAF_NODE	1283:15	1283:15	14	"  Group 4 Options:"
LEAF_NODE	1283:35	1283:35	12	)
LEAF_NODE	1283:36	1283:36	10	;
SELECTION	1284:3	1285:4	9	
KEYWORD	1284:3	1284:3	10	if
LEAF_NODE	1284:3	1284:3	11	if
LEAF_NODE	1284:6	1284:6	10	(
CONDITION	1284:7	1284:7	10	sp -> groupoptions & GROUP4OPT_UNCOMPRESSED
EXPR	1284:7	1284:26	11	sp -> groupoptions & GROUP4OPT_UNCOMPRESSED
FIELD	1284:7	1284:11	12	sp -> groupoptions
LEAF_NODE	1284:7	1284:7	13	sp
LEAF_NODE	1284:9	1284:9	13	->
LEAF_NODE	1284:11	1284:11	13	groupoptions
LEAF_NODE	1284:24	1284:24	12	&
FIELD	1284:26	1284:26	12	GROUP4OPT_UNCOMPRESSED
LEAF_NODE	1284:26	1284:26	13	GROUP4OPT_UNCOMPRESSED
LEAF_NODE	1284:48	1284:48	10	)
STATEMENTS	1285:4	1285:4	10	
EXPR_STATEMENT	1285:4	1285:43	11	fprintf ( fd , "%suncompressed data" , sep ) ;
EXPR	1285:4	1285:4	12	fprintf ( fd , "%suncompressed data" , sep )
FUNCTION_CALL	1285:4	1285:42	13	fprintf ( fd , "%suncompressed data" , sep )
CALLEE	1285:4	1285:4	14	fprintf
LEAF_NODE	1285:4	1285:4	15	fprintf
LEAF_NODE	1285:11	1285:11	14	(
ARGUMENT	1285:12	1285:12	14	fd
FIELD	1285:12	1285:12	15	fd
LEAF_NODE	1285:12	1285:12	16	fd
LEAF_NODE	1285:14	1285:14	14	,
ARGUMENT	1285:16	1285:16	14	"%suncompressed data"
FIELD	1285:16	1285:16	15	"%suncompressed data"
LEAF_NODE	1285:16	1285:16	16	"%suncompressed data"
LEAF_NODE	1285:37	1285:37	14	,
ARGUMENT	1285:39	1285:39	14	sep
FIELD	1285:39	1285:39	15	sep
LEAF_NODE	1285:39	1285:39	16	sep
LEAF_NODE	1285:42	1285:42	14	)
LEAF_NODE	1285:43	1285:43	12	;
LEAF_NODE	1286:2	1286:2	8	}
SELECTION	1286:4	1286:9	6	
KEYWORD	1286:4	1286:4	7	else
LEAF_NODE	1286:4	1286:4	8	else
STATEMENTS	1286:9	1299:2	7	
LEAF_NODE	1286:9	1286:9	8	{
STATEMENTS	1288:3	1297:3	8	
EXPR_STATEMENT	1288:3	1288:36	9	fprintf ( fd , "  Group 3 Options:" ) ;
EXPR	1288:3	1288:3	10	fprintf ( fd , "  Group 3 Options:" )
FUNCTION_CALL	1288:3	1288:35	11	fprintf ( fd , "  Group 3 Options:" )
CALLEE	1288:3	1288:3	12	fprintf
LEAF_NODE	1288:3	1288:3	13	fprintf
LEAF_NODE	1288:10	1288:10	12	(
ARGUMENT	1288:11	1288:11	12	fd
FIELD	1288:11	1288:11	13	fd
LEAF_NODE	1288:11	1288:11	14	fd
LEAF_NODE	1288:13	1288:13	12	,
ARGUMENT	1288:15	1288:15	12	"  Group 3 Options:"
FIELD	1288:15	1288:15	13	"  Group 3 Options:"
LEAF_NODE	1288:15	1288:15	14	"  Group 3 Options:"
LEAF_NODE	1288:35	1288:35	12	)
LEAF_NODE	1288:36	1288:36	10	;
SELECTION	1289:3	1289:48	9	
KEYWORD	1289:3	1289:3	10	if
LEAF_NODE	1289:3	1289:3	11	if
LEAF_NODE	1289:6	1289:6	10	(
CONDITION	1289:7	1289:7	10	sp -> groupoptions & GROUP3OPT_2DENCODING
EXPR	1289:7	1289:26	11	sp -> groupoptions & GROUP3OPT_2DENCODING
FIELD	1289:7	1289:11	12	sp -> groupoptions
LEAF_NODE	1289:7	1289:7	13	sp
LEAF_NODE	1289:9	1289:9	13	->
LEAF_NODE	1289:11	1289:11	13	groupoptions
LEAF_NODE	1289:24	1289:24	12	&
FIELD	1289:26	1289:26	12	GROUP3OPT_2DENCODING
LEAF_NODE	1289:26	1289:26	13	GROUP3OPT_2DENCODING
LEAF_NODE	1289:46	1289:46	10	)
STATEMENTS	1289:48	1292:3	10	
LEAF_NODE	1289:48	1289:48	11	{
STATEMENTS	1290:4	1291:4	11	
EXPR_STATEMENT	1290:4	1290:38	12	fprintf ( fd , "%s2-d encoding" , sep ) ;
EXPR	1290:4	1290:4	13	fprintf ( fd , "%s2-d encoding" , sep )
FUNCTION_CALL	1290:4	1290:37	14	fprintf ( fd , "%s2-d encoding" , sep )
CALLEE	1290:4	1290:4	15	fprintf
LEAF_NODE	1290:4	1290:4	16	fprintf
LEAF_NODE	1290:11	1290:11	15	(
ARGUMENT	1290:12	1290:12	15	fd
FIELD	1290:12	1290:12	16	fd
LEAF_NODE	1290:12	1290:12	17	fd
LEAF_NODE	1290:14	1290:14	15	,
ARGUMENT	1290:16	1290:16	15	"%s2-d encoding"
FIELD	1290:16	1290:16	16	"%s2-d encoding"
LEAF_NODE	1290:16	1290:16	17	"%s2-d encoding"
LEAF_NODE	1290:32	1290:32	15	,
ARGUMENT	1290:34	1290:34	15	sep
FIELD	1290:34	1290:34	16	sep
LEAF_NODE	1290:34	1290:34	17	sep
LEAF_NODE	1290:37	1290:37	15	)
LEAF_NODE	1290:38	1290:38	13	;
EXPR_STATEMENT	1291:4	1291:13	12	sep = "+" ;
EXPR	1291:4	1291:4	13	sep = "+"
ASSIGN	1291:4	1291:10	14	sep = "+"
LVAL	1291:4	1291:4	15	sep
FIELD	1291:4	1291:4	16	sep
LEAF_NODE	1291:4	1291:4	17	sep
ASSIGN_OP	1291:8	1291:8	15	=
LEAF_NODE	1291:8	1291:8	16	=
RVAL	1291:10	1291:10	15	"+"
FIELD	1291:10	1291:10	16	"+"
LEAF_NODE	1291:10	1291:10	17	"+"
LEAF_NODE	1291:13	1291:13	13	;
LEAF_NODE	1292:3	1292:3	11	}
SELECTION	1293:3	1293:46	9	
KEYWORD	1293:3	1293:3	10	if
LEAF_NODE	1293:3	1293:3	11	if
LEAF_NODE	1293:6	1293:6	10	(
CONDITION	1293:7	1293:7	10	sp -> groupoptions & GROUP3OPT_FILLBITS
EXPR	1293:7	1293:26	11	sp -> groupoptions & GROUP3OPT_FILLBITS
FIELD	1293:7	1293:11	12	sp -> groupoptions
LEAF_NODE	1293:7	1293:7	13	sp
LEAF_NODE	1293:9	1293:9	13	->
LEAF_NODE	1293:11	1293:11	13	groupoptions
LEAF_NODE	1293:24	1293:24	12	&
FIELD	1293:26	1293:26	12	GROUP3OPT_FILLBITS
LEAF_NODE	1293:26	1293:26	13	GROUP3OPT_FILLBITS
LEAF_NODE	1293:44	1293:44	10	)
STATEMENTS	1293:46	1296:3	10	
LEAF_NODE	1293:46	1293:46	11	{
STATEMENTS	1294:4	1295:4	11	
EXPR_STATEMENT	1294:4	1294:37	12	fprintf ( fd , "%sEOL padding" , sep ) ;
EXPR	1294:4	1294:4	13	fprintf ( fd , "%sEOL padding" , sep )
FUNCTION_CALL	1294:4	1294:36	14	fprintf ( fd , "%sEOL padding" , sep )
CALLEE	1294:4	1294:4	15	fprintf
LEAF_NODE	1294:4	1294:4	16	fprintf
LEAF_NODE	1294:11	1294:11	15	(
ARGUMENT	1294:12	1294:12	15	fd
FIELD	1294:12	1294:12	16	fd
LEAF_NODE	1294:12	1294:12	17	fd
LEAF_NODE	1294:14	1294:14	15	,
ARGUMENT	1294:16	1294:16	15	"%sEOL padding"
FIELD	1294:16	1294:16	16	"%sEOL padding"
LEAF_NODE	1294:16	1294:16	17	"%sEOL padding"
LEAF_NODE	1294:31	1294:31	15	,
ARGUMENT	1294:33	1294:33	15	sep
FIELD	1294:33	1294:33	16	sep
LEAF_NODE	1294:33	1294:33	17	sep
LEAF_NODE	1294:36	1294:36	15	)
LEAF_NODE	1294:37	1294:37	13	;
EXPR_STATEMENT	1295:4	1295:13	12	sep = "+" ;
EXPR	1295:4	1295:4	13	sep = "+"
ASSIGN	1295:4	1295:10	14	sep = "+"
LVAL	1295:4	1295:4	15	sep
FIELD	1295:4	1295:4	16	sep
LEAF_NODE	1295:4	1295:4	17	sep
ASSIGN_OP	1295:8	1295:8	15	=
LEAF_NODE	1295:8	1295:8	16	=
RVAL	1295:10	1295:10	15	"+"
FIELD	1295:10	1295:10	16	"+"
LEAF_NODE	1295:10	1295:10	17	"+"
LEAF_NODE	1295:13	1295:13	13	;
LEAF_NODE	1296:3	1296:3	11	}
SELECTION	1297:3	1298:4	9	
KEYWORD	1297:3	1297:3	10	if
LEAF_NODE	1297:3	1297:3	11	if
LEAF_NODE	1297:6	1297:6	10	(
CONDITION	1297:7	1297:7	10	sp -> groupoptions & GROUP3OPT_UNCOMPRESSED
EXPR	1297:7	1297:26	11	sp -> groupoptions & GROUP3OPT_UNCOMPRESSED
FIELD	1297:7	1297:11	12	sp -> groupoptions
LEAF_NODE	1297:7	1297:7	13	sp
LEAF_NODE	1297:9	1297:9	13	->
LEAF_NODE	1297:11	1297:11	13	groupoptions
LEAF_NODE	1297:24	1297:24	12	&
FIELD	1297:26	1297:26	12	GROUP3OPT_UNCOMPRESSED
LEAF_NODE	1297:26	1297:26	13	GROUP3OPT_UNCOMPRESSED
LEAF_NODE	1297:48	1297:48	10	)
STATEMENTS	1298:4	1298:4	10	
EXPR_STATEMENT	1298:4	1298:43	11	fprintf ( fd , "%suncompressed data" , sep ) ;
EXPR	1298:4	1298:4	12	fprintf ( fd , "%suncompressed data" , sep )
FUNCTION_CALL	1298:4	1298:42	13	fprintf ( fd , "%suncompressed data" , sep )
CALLEE	1298:4	1298:4	14	fprintf
LEAF_NODE	1298:4	1298:4	15	fprintf
LEAF_NODE	1298:11	1298:11	14	(
ARGUMENT	1298:12	1298:12	14	fd
FIELD	1298:12	1298:12	15	fd
LEAF_NODE	1298:12	1298:12	16	fd
LEAF_NODE	1298:14	1298:14	14	,
ARGUMENT	1298:16	1298:16	14	"%suncompressed data"
FIELD	1298:16	1298:16	15	"%suncompressed data"
LEAF_NODE	1298:16	1298:16	16	"%suncompressed data"
LEAF_NODE	1298:37	1298:37	14	,
ARGUMENT	1298:39	1298:39	14	sep
FIELD	1298:39	1298:39	15	sep
LEAF_NODE	1298:39	1298:39	16	sep
LEAF_NODE	1298:42	1298:42	14	)
LEAF_NODE	1298:43	1298:43	12	;
LEAF_NODE	1299:2	1299:2	8	}
EXPR_STATEMENT	1300:2	1302:57	6	fprintf ( fd , " (%lu = 0x%lx)\n" , ( unsigned long ) sp -> groupoptions , ( unsigned long ) sp -> groupoptions ) ;
EXPR	1300:2	1300:2	7	fprintf ( fd , " (%lu = 0x%lx)\n" , ( unsigned long ) sp -> groupoptions , ( unsigned long ) sp -> groupoptions )
FUNCTION_CALL	1300:2	1302:56	8	fprintf ( fd , " (%lu = 0x%lx)\n" , ( unsigned long ) sp -> groupoptions , ( unsigned long ) sp -> groupoptions )
CALLEE	1300:2	1300:2	9	fprintf
LEAF_NODE	1300:2	1300:2	10	fprintf
LEAF_NODE	1300:9	1300:9	9	(
ARGUMENT	1300:10	1300:10	9	fd
FIELD	1300:10	1300:10	10	fd
LEAF_NODE	1300:10	1300:10	11	fd
LEAF_NODE	1300:12	1300:12	9	,
ARGUMENT	1300:14	1300:14	9	" (%lu = 0x%lx)\n"
FIELD	1300:14	1300:14	10	" (%lu = 0x%lx)\n"
LEAF_NODE	1300:14	1300:14	11	" (%lu = 0x%lx)\n"
LEAF_NODE	1300:32	1300:32	9	,
ARGUMENT	1301:24	1301:40	9	( unsigned long ) sp -> groupoptions
LEAF_NODE	1301:24	1301:24	10	(
TYPE_NAME	1301:25	1301:34	10	unsigned long
LEAF_NODE	1301:25	1301:25	11	unsigned
LEAF_NODE	1301:34	1301:34	11	long
LEAF_NODE	1301:38	1301:38	10	)
FIELD	1301:40	1301:44	10	sp -> groupoptions
LEAF_NODE	1301:40	1301:40	11	sp
LEAF_NODE	1301:42	1301:42	11	->
LEAF_NODE	1301:44	1301:44	11	groupoptions
LEAF_NODE	1301:56	1301:56	9	,
ARGUMENT	1302:24	1302:40	9	( unsigned long ) sp -> groupoptions
LEAF_NODE	1302:24	1302:24	10	(
TYPE_NAME	1302:25	1302:34	10	unsigned long
LEAF_NODE	1302:25	1302:25	11	unsigned
LEAF_NODE	1302:34	1302:34	11	long
LEAF_NODE	1302:38	1302:38	10	)
FIELD	1302:40	1302:44	10	sp -> groupoptions
LEAF_NODE	1302:40	1302:40	11	sp
LEAF_NODE	1302:42	1302:42	11	->
LEAF_NODE	1302:44	1302:44	11	groupoptions
LEAF_NODE	1302:56	1302:56	9	)
LEAF_NODE	1302:57	1302:57	7	;
LEAF_NODE	1303:1	1303:1	5	}
SELECTION	1304:1	1304:43	3	
KEYWORD	1304:1	1304:1	4	if
LEAF_NODE	1304:1	1304:1	5	if
LEAF_NODE	1304:4	1304:4	4	(
CONDITION	1304:5	1304:5	4	TIFFFieldSet ( tif , FIELD_CLEANFAXDATA )
EXPR	1304:5	1304:5	5	TIFFFieldSet ( tif , FIELD_CLEANFAXDATA )
FUNCTION_CALL	1304:5	1304:40	6	TIFFFieldSet ( tif , FIELD_CLEANFAXDATA )
CALLEE	1304:5	1304:5	7	TIFFFieldSet
LEAF_NODE	1304:5	1304:5	8	TIFFFieldSet
LEAF_NODE	1304:17	1304:17	7	(
ARGUMENT	1304:18	1304:18	7	tif
FIELD	1304:18	1304:18	8	tif
LEAF_NODE	1304:18	1304:18	9	tif
LEAF_NODE	1304:21	1304:21	7	,
ARGUMENT	1304:22	1304:22	7	FIELD_CLEANFAXDATA
FIELD	1304:22	1304:22	8	FIELD_CLEANFAXDATA
LEAF_NODE	1304:22	1304:22	9	FIELD_CLEANFAXDATA
LEAF_NODE	1304:40	1304:40	7	)
LEAF_NODE	1304:41	1304:41	4	)
STATEMENTS	1304:43	1319:1	4	
LEAF_NODE	1304:43	1304:43	5	{
STATEMENTS	1305:2	1317:2	5	
EXPR_STATEMENT	1305:2	1305:28	6	fprintf ( fd , "  Fax Data:" ) ;
EXPR	1305:2	1305:2	7	fprintf ( fd , "  Fax Data:" )
FUNCTION_CALL	1305:2	1305:27	8	fprintf ( fd , "  Fax Data:" )
CALLEE	1305:2	1305:2	9	fprintf
LEAF_NODE	1305:2	1305:2	10	fprintf
LEAF_NODE	1305:9	1305:9	9	(
ARGUMENT	1305:10	1305:10	9	fd
FIELD	1305:10	1305:10	10	fd
LEAF_NODE	1305:10	1305:10	11	fd
LEAF_NODE	1305:12	1305:12	9	,
ARGUMENT	1305:14	1305:14	9	"  Fax Data:"
FIELD	1305:14	1305:14	10	"  Fax Data:"
LEAF_NODE	1305:14	1305:14	11	"  Fax Data:"
LEAF_NODE	1305:27	1305:27	9	)
LEAF_NODE	1305:28	1305:28	7	;
SELECTION	1306:2	1306:28	6	
KEYWORD	1306:2	1306:2	7	switch
LEAF_NODE	1306:2	1306:2	8	switch
LEAF_NODE	1306:9	1306:9	7	(
CONDITION	1306:10	1306:10	7	sp -> cleanfaxdata
EXPR	1306:10	1306:10	8	sp -> cleanfaxdata
FIELD	1306:10	1306:14	9	sp -> cleanfaxdata
LEAF_NODE	1306:10	1306:10	10	sp
LEAF_NODE	1306:12	1306:12	10	->
LEAF_NODE	1306:14	1306:14	10	cleanfaxdata
LEAF_NODE	1306:26	1306:26	7	)
STATEMENTS	1306:28	1316:2	7	
LEAF_NODE	1306:28	1306:28	8	{
STATEMENTS	1307:2	1315:3	8	
LABEL	1307:2	1307:25	9	case CLEANFAXDATA_CLEAN :
LEAF_NODE	1307:2	1307:2	10	case
LEAF_NODE	1307:7	1307:7	10	CLEANFAXDATA_CLEAN
LEAF_NODE	1307:25	1307:25	10	:
EXPR_STATEMENT	1308:3	1308:24	9	fprintf ( fd , " clean" ) ;
EXPR	1308:3	1308:3	10	fprintf ( fd , " clean" )
FUNCTION_CALL	1308:3	1308:23	11	fprintf ( fd , " clean" )
CALLEE	1308:3	1308:3	12	fprintf
LEAF_NODE	1308:3	1308:3	13	fprintf
LEAF_NODE	1308:10	1308:10	12	(
ARGUMENT	1308:11	1308:11	12	fd
FIELD	1308:11	1308:11	13	fd
LEAF_NODE	1308:11	1308:11	14	fd
LEAF_NODE	1308:13	1308:13	12	,
ARGUMENT	1308:15	1308:15	12	" clean"
FIELD	1308:15	1308:15	13	" clean"
LEAF_NODE	1308:15	1308:15	14	" clean"
LEAF_NODE	1308:23	1308:23	12	)
LEAF_NODE	1308:24	1308:24	10	;
JUMP_STATEMENT	1309:3	1309:8	9	break DESTINATION ;
KEYWORD	1309:3	1309:3	10	break
LEAF_NODE	1309:3	1309:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1309:8	1309:8	10	;
LABEL	1310:2	1310:31	9	case CLEANFAXDATA_REGENERATED :
LEAF_NODE	1310:2	1310:2	10	case
LEAF_NODE	1310:7	1310:7	10	CLEANFAXDATA_REGENERATED
LEAF_NODE	1310:31	1310:31	10	:
EXPR_STATEMENT	1311:3	1311:39	9	fprintf ( fd , " receiver regenerated" ) ;
EXPR	1311:3	1311:3	10	fprintf ( fd , " receiver regenerated" )
FUNCTION_CALL	1311:3	1311:38	11	fprintf ( fd , " receiver regenerated" )
CALLEE	1311:3	1311:3	12	fprintf
LEAF_NODE	1311:3	1311:3	13	fprintf
LEAF_NODE	1311:10	1311:10	12	(
ARGUMENT	1311:11	1311:11	12	fd
FIELD	1311:11	1311:11	13	fd
LEAF_NODE	1311:11	1311:11	14	fd
LEAF_NODE	1311:13	1311:13	12	,
ARGUMENT	1311:15	1311:15	12	" receiver regenerated"
FIELD	1311:15	1311:15	13	" receiver regenerated"
LEAF_NODE	1311:15	1311:15	14	" receiver regenerated"
LEAF_NODE	1311:38	1311:38	12	)
LEAF_NODE	1311:39	1311:39	10	;
JUMP_STATEMENT	1312:3	1312:8	9	break DESTINATION ;
KEYWORD	1312:3	1312:3	10	break
LEAF_NODE	1312:3	1312:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1312:8	1312:8	10	;
LABEL	1313:2	1313:27	9	case CLEANFAXDATA_UNCLEAN :
LEAF_NODE	1313:2	1313:2	10	case
LEAF_NODE	1313:7	1313:7	10	CLEANFAXDATA_UNCLEAN
LEAF_NODE	1313:27	1313:27	10	:
EXPR_STATEMENT	1314:3	1314:37	9	fprintf ( fd , " uncorrected errors" ) ;
EXPR	1314:3	1314:3	10	fprintf ( fd , " uncorrected errors" )
FUNCTION_CALL	1314:3	1314:36	11	fprintf ( fd , " uncorrected errors" )
CALLEE	1314:3	1314:3	12	fprintf
LEAF_NODE	1314:3	1314:3	13	fprintf
LEAF_NODE	1314:10	1314:10	12	(
ARGUMENT	1314:11	1314:11	12	fd
FIELD	1314:11	1314:11	13	fd
LEAF_NODE	1314:11	1314:11	14	fd
LEAF_NODE	1314:13	1314:13	12	,
ARGUMENT	1314:15	1314:15	12	" uncorrected errors"
FIELD	1314:15	1314:15	13	" uncorrected errors"
LEAF_NODE	1314:15	1314:15	14	" uncorrected errors"
LEAF_NODE	1314:36	1314:36	12	)
LEAF_NODE	1314:37	1314:37	10	;
JUMP_STATEMENT	1315:3	1315:8	9	break DESTINATION ;
KEYWORD	1315:3	1315:3	10	break
LEAF_NODE	1315:3	1315:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1315:8	1315:8	10	;
LEAF_NODE	1316:2	1316:2	8	}
EXPR_STATEMENT	1317:2	1318:41	6	fprintf ( fd , " (%u = 0x%x)\n" , sp -> cleanfaxdata , sp -> cleanfaxdata ) ;
EXPR	1317:2	1317:2	7	fprintf ( fd , " (%u = 0x%x)\n" , sp -> cleanfaxdata , sp -> cleanfaxdata )
FUNCTION_CALL	1317:2	1318:40	8	fprintf ( fd , " (%u = 0x%x)\n" , sp -> cleanfaxdata , sp -> cleanfaxdata )
CALLEE	1317:2	1317:2	9	fprintf
LEAF_NODE	1317:2	1317:2	10	fprintf
LEAF_NODE	1317:9	1317:9	9	(
ARGUMENT	1317:10	1317:10	9	fd
FIELD	1317:10	1317:10	10	fd
LEAF_NODE	1317:10	1317:10	11	fd
LEAF_NODE	1317:12	1317:12	9	,
ARGUMENT	1317:14	1317:14	9	" (%u = 0x%x)\n"
FIELD	1317:14	1317:14	10	" (%u = 0x%x)\n"
LEAF_NODE	1317:14	1317:14	11	" (%u = 0x%x)\n"
LEAF_NODE	1317:30	1317:30	9	,
ARGUMENT	1318:6	1318:6	9	sp -> cleanfaxdata
FIELD	1318:6	1318:10	10	sp -> cleanfaxdata
LEAF_NODE	1318:6	1318:6	11	sp
LEAF_NODE	1318:8	1318:8	11	->
LEAF_NODE	1318:10	1318:10	11	cleanfaxdata
LEAF_NODE	1318:22	1318:22	9	,
ARGUMENT	1318:24	1318:24	9	sp -> cleanfaxdata
FIELD	1318:24	1318:28	10	sp -> cleanfaxdata
LEAF_NODE	1318:24	1318:24	11	sp
LEAF_NODE	1318:26	1318:26	11	->
LEAF_NODE	1318:28	1318:28	11	cleanfaxdata
LEAF_NODE	1318:40	1318:40	9	)
LEAF_NODE	1318:41	1318:41	7	;
LEAF_NODE	1319:1	1319:1	5	}
SELECTION	1320:1	1321:2	3	
KEYWORD	1320:1	1320:1	4	if
LEAF_NODE	1320:1	1320:1	5	if
LEAF_NODE	1320:4	1320:4	4	(
CONDITION	1320:5	1320:5	4	TIFFFieldSet ( tif , FIELD_BADFAXLINES )
EXPR	1320:5	1320:5	5	TIFFFieldSet ( tif , FIELD_BADFAXLINES )
FUNCTION_CALL	1320:5	1320:39	6	TIFFFieldSet ( tif , FIELD_BADFAXLINES )
CALLEE	1320:5	1320:5	7	TIFFFieldSet
LEAF_NODE	1320:5	1320:5	8	TIFFFieldSet
LEAF_NODE	1320:17	1320:17	7	(
ARGUMENT	1320:18	1320:18	7	tif
FIELD	1320:18	1320:18	8	tif
LEAF_NODE	1320:18	1320:18	9	tif
LEAF_NODE	1320:21	1320:21	7	,
ARGUMENT	1320:22	1320:22	7	FIELD_BADFAXLINES
FIELD	1320:22	1320:22	8	FIELD_BADFAXLINES
LEAF_NODE	1320:22	1320:22	9	FIELD_BADFAXLINES
LEAF_NODE	1320:39	1320:39	7	)
LEAF_NODE	1320:40	1320:40	4	)
STATEMENTS	1321:2	1321:2	4	
EXPR_STATEMENT	1321:2	1322:56	5	fprintf ( fd , "  Bad Fax Lines: %lu\n" , ( unsigned long ) sp -> badfaxlines ) ;
EXPR	1321:2	1321:2	6	fprintf ( fd , "  Bad Fax Lines: %lu\n" , ( unsigned long ) sp -> badfaxlines )
FUNCTION_CALL	1321:2	1322:55	7	fprintf ( fd , "  Bad Fax Lines: %lu\n" , ( unsigned long ) sp -> badfaxlines )
CALLEE	1321:2	1321:2	8	fprintf
LEAF_NODE	1321:2	1321:2	9	fprintf
LEAF_NODE	1321:9	1321:9	8	(
ARGUMENT	1321:10	1321:10	8	fd
FIELD	1321:10	1321:10	9	fd
LEAF_NODE	1321:10	1321:10	10	fd
LEAF_NODE	1321:12	1321:12	8	,
ARGUMENT	1321:14	1321:14	8	"  Bad Fax Lines: %lu\n"
FIELD	1321:14	1321:14	9	"  Bad Fax Lines: %lu\n"
LEAF_NODE	1321:14	1321:14	10	"  Bad Fax Lines: %lu\n"
LEAF_NODE	1321:38	1321:38	8	,
ARGUMENT	1322:24	1322:40	8	( unsigned long ) sp -> badfaxlines
LEAF_NODE	1322:24	1322:24	9	(
TYPE_NAME	1322:25	1322:34	9	unsigned long
LEAF_NODE	1322:25	1322:25	10	unsigned
LEAF_NODE	1322:34	1322:34	10	long
LEAF_NODE	1322:38	1322:38	9	)
FIELD	1322:40	1322:44	9	sp -> badfaxlines
LEAF_NODE	1322:40	1322:40	10	sp
LEAF_NODE	1322:42	1322:42	10	->
LEAF_NODE	1322:44	1322:44	10	badfaxlines
LEAF_NODE	1322:55	1322:55	8	)
LEAF_NODE	1322:56	1322:56	6	;
SELECTION	1323:1	1324:2	3	
KEYWORD	1323:1	1323:1	4	if
LEAF_NODE	1323:1	1323:1	5	if
LEAF_NODE	1323:4	1323:4	4	(
CONDITION	1323:5	1323:5	4	TIFFFieldSet ( tif , FIELD_BADFAXRUN )
EXPR	1323:5	1323:5	5	TIFFFieldSet ( tif , FIELD_BADFAXRUN )
FUNCTION_CALL	1323:5	1323:37	6	TIFFFieldSet ( tif , FIELD_BADFAXRUN )
CALLEE	1323:5	1323:5	7	TIFFFieldSet
LEAF_NODE	1323:5	1323:5	8	TIFFFieldSet
LEAF_NODE	1323:17	1323:17	7	(
ARGUMENT	1323:18	1323:18	7	tif
FIELD	1323:18	1323:18	8	tif
LEAF_NODE	1323:18	1323:18	9	tif
LEAF_NODE	1323:21	1323:21	7	,
ARGUMENT	1323:22	1323:22	7	FIELD_BADFAXRUN
FIELD	1323:22	1323:22	8	FIELD_BADFAXRUN
LEAF_NODE	1323:22	1323:22	9	FIELD_BADFAXRUN
LEAF_NODE	1323:37	1323:37	7	)
LEAF_NODE	1323:38	1323:38	4	)
STATEMENTS	1324:2	1324:2	4	
EXPR_STATEMENT	1324:2	1325:36	5	fprintf ( fd , "  Consecutive Bad Fax Lines: %lu\n" , ( unsigned long ) sp -> badfaxrun ) ;
EXPR	1324:2	1324:2	6	fprintf ( fd , "  Consecutive Bad Fax Lines: %lu\n" , ( unsigned long ) sp -> badfaxrun )
FUNCTION_CALL	1324:2	1325:35	7	fprintf ( fd , "  Consecutive Bad Fax Lines: %lu\n" , ( unsigned long ) sp -> badfaxrun )
CALLEE	1324:2	1324:2	8	fprintf
LEAF_NODE	1324:2	1324:2	9	fprintf
LEAF_NODE	1324:9	1324:9	8	(
ARGUMENT	1324:10	1324:10	8	fd
FIELD	1324:10	1324:10	9	fd
LEAF_NODE	1324:10	1324:10	10	fd
LEAF_NODE	1324:12	1324:12	8	,
ARGUMENT	1324:14	1324:14	8	"  Consecutive Bad Fax Lines: %lu\n"
FIELD	1324:14	1324:14	9	"  Consecutive Bad Fax Lines: %lu\n"
LEAF_NODE	1324:14	1324:14	10	"  Consecutive Bad Fax Lines: %lu\n"
LEAF_NODE	1324:50	1324:50	8	,
ARGUMENT	1325:6	1325:22	8	( unsigned long ) sp -> badfaxrun
LEAF_NODE	1325:6	1325:6	9	(
TYPE_NAME	1325:7	1325:16	9	unsigned long
LEAF_NODE	1325:7	1325:7	10	unsigned
LEAF_NODE	1325:16	1325:16	10	long
LEAF_NODE	1325:20	1325:20	9	)
FIELD	1325:22	1325:26	9	sp -> badfaxrun
LEAF_NODE	1325:22	1325:22	10	sp
LEAF_NODE	1325:24	1325:24	10	->
LEAF_NODE	1325:26	1325:26	10	badfaxrun
LEAF_NODE	1325:35	1325:35	8	)
LEAF_NODE	1325:36	1325:36	6	;
SELECTION	1326:1	1327:2	3	
KEYWORD	1326:1	1326:1	4	if
LEAF_NODE	1326:1	1326:1	5	if
LEAF_NODE	1326:4	1326:4	4	(
CONDITION	1326:5	1326:5	4	sp -> printdir
EXPR	1326:5	1326:5	5	sp -> printdir
FIELD	1326:5	1326:9	6	sp -> printdir
LEAF_NODE	1326:5	1326:5	7	sp
LEAF_NODE	1326:7	1326:7	7	->
LEAF_NODE	1326:9	1326:9	7	printdir
LEAF_NODE	1326:17	1326:17	4	)
STATEMENTS	1327:2	1327:2	4	
EXPR_STATEMENT	1327:2	1327:33	5	( * sp -> printdir ) ( tif , fd , flags ) ;
EXPR	1327:2	1327:2	6	( * sp -> printdir ) ( tif , fd , flags )
FUNCTION_CALL	1327:2	1327:32	7	( * sp -> printdir ) ( tif , fd , flags )
CALLEE	1327:2	1327:16	8	( * sp -> printdir )
LEAF_NODE	1327:2	1327:2	9	(
UNARY_EXPR	1327:3	1327:4	9	* sp -> printdir
UNARY_OPERATOR	1327:3	1327:3	10	*
LEAF_NODE	1327:3	1327:3	11	*
FIELD	1327:4	1327:8	10	sp -> printdir
LEAF_NODE	1327:4	1327:4	11	sp
LEAF_NODE	1327:6	1327:6	11	->
LEAF_NODE	1327:8	1327:8	11	printdir
LEAF_NODE	1327:16	1327:16	9	)
LEAF_NODE	1327:17	1327:17	8	(
ARGUMENT	1327:18	1327:18	8	tif
FIELD	1327:18	1327:18	9	tif
LEAF_NODE	1327:18	1327:18	10	tif
LEAF_NODE	1327:21	1327:21	8	,
ARGUMENT	1327:23	1327:23	8	fd
FIELD	1327:23	1327:23	9	fd
LEAF_NODE	1327:23	1327:23	10	fd
LEAF_NODE	1327:25	1327:25	8	,
ARGUMENT	1327:27	1327:27	8	flags
FIELD	1327:27	1327:27	9	flags
LEAF_NODE	1327:27	1327:27	10	flags
LEAF_NODE	1327:32	1327:32	8	)
LEAF_NODE	1327:33	1327:33	6	;
LEAF_NODE	1328:0	1328:0	2	}
FUNCTION_DEF	1330:0	1397:0	1	
RETURN_TYPE	1330:0	1330:7	2	static int
LEAF_NODE	1330:0	1330:0	3	static
TYPE_NAME	1330:7	1330:7	3	int
LEAF_NODE	1330:7	1330:7	4	int
FUNCTION_NAME	1331:0	1331:0	2	InitCCITTFax3
LEAF_NODE	1331:0	1331:0	3	InitCCITTFax3
PARAMETER_LIST	1331:13	1331:23	2	( TIFF * tif )
LEAF_NODE	1331:13	1331:13	3	(
PARAMETER_DECL	1331:14	1331:20	3	TIFF * tif
TYPE	1331:14	1331:18	4	TIFF *
TYPE_NAME	1331:14	1331:14	5	TIFF
LEAF_NODE	1331:14	1331:14	6	TIFF
POINTER	1331:18	1331:18	5	*
LEAF_NODE	1331:18	1331:18	6	*
NAME	1331:20	1331:20	4	tif
LEAF_NODE	1331:20	1331:20	5	tif
LEAF_NODE	1331:23	1331:23	3	)
LEAF_NODE	1332:0	1332:0	2	{
STATEMENTS	1333:1	1396:1	2	
LEAF_NODE	1333:1	1333:1	3	static
SIMPLE_DECL	1333:8	1333:45	3	const char [ ] module ; module = "InitCCITTFax3" ;
VAR_DECL	1333:8	1333:19	4	const char [ ] module ; module = "InitCCITTFax3"
TYPE	1333:8	1333:25	5	const char [ ]
TYPE_NAME	1333:8	1333:14	6	const char
LEAF_NODE	1333:8	1333:8	7	const
LEAF_NODE	1333:14	1333:14	7	char
TYPE_SUFFIX	1333:25	1333:26	6	[ ]
LEAF_NODE	1333:25	1333:25	7	[
LEAF_NODE	1333:26	1333:26	7	]
NAME	1333:19	1333:19	5	module
LEAF_NODE	1333:19	1333:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1333:19	1333:19	5	module = "InitCCITTFax3"
ASSIGN	1333:19	1333:30	6	module = "InitCCITTFax3"
LVAL	1333:19	1333:19	7	module
NAME	1333:19	1333:19	8	module
LEAF_NODE	1333:19	1333:19	9	module
ASSIGN_OP	1333:28	1333:28	7	=
LEAF_NODE	1333:28	1333:28	8	=
RVAL	1333:30	1333:30	7	"InitCCITTFax3"
FIELD	1333:30	1333:30	8	"InitCCITTFax3"
LEAF_NODE	1333:30	1333:30	9	"InitCCITTFax3"
LEAF_NODE	1333:45	1333:45	4	;
SIMPLE_DECL	1334:1	1334:18	3	Fax3BaseState * sp ;
VAR_DECL	1334:1	1334:16	4	Fax3BaseState * sp
TYPE	1334:1	1334:14	5	Fax3BaseState *
TYPE_NAME	1334:1	1334:1	6	Fax3BaseState
LEAF_NODE	1334:1	1334:1	7	Fax3BaseState
POINTER	1334:14	1334:14	6	*
LEAF_NODE	1334:14	1334:14	7	*
NAME	1334:16	1334:16	5	sp
LEAF_NODE	1334:16	1334:16	6	sp
LEAF_NODE	1334:18	1334:18	4	;
SELECTION	1339:1	1339:67	3	
KEYWORD	1339:1	1339:1	4	if
LEAF_NODE	1339:1	1339:1	5	if
LEAF_NODE	1339:4	1339:4	4	(
CONDITION	1339:5	1339:5	4	! _TIFFMergeFields ( tif , faxFields , TIFFArrayCount ( faxFields ) )
EXPR	1339:5	1339:5	5	! _TIFFMergeFields ( tif , faxFields , TIFFArrayCount ( faxFields ) )
UNARY_EXPR	1339:5	1339:6	6	! _TIFFMergeFields ( tif , faxFields , TIFFArrayCount ( faxFields ) )
UNARY_OPERATOR	1339:5	1339:5	7	!
LEAF_NODE	1339:5	1339:5	8	!
FUNCTION_CALL	1339:6	1339:64	7	_TIFFMergeFields ( tif , faxFields , TIFFArrayCount ( faxFields ) )
CALLEE	1339:6	1339:6	8	_TIFFMergeFields
LEAF_NODE	1339:6	1339:6	9	_TIFFMergeFields
LEAF_NODE	1339:22	1339:22	8	(
ARGUMENT	1339:23	1339:23	8	tif
FIELD	1339:23	1339:23	9	tif
LEAF_NODE	1339:23	1339:23	10	tif
LEAF_NODE	1339:26	1339:26	8	,
ARGUMENT	1339:28	1339:28	8	faxFields
FIELD	1339:28	1339:28	9	faxFields
LEAF_NODE	1339:28	1339:28	10	faxFields
LEAF_NODE	1339:37	1339:37	8	,
ARGUMENT	1339:39	1339:39	8	TIFFArrayCount ( faxFields )
FUNCTION_CALL	1339:39	1339:63	9	TIFFArrayCount ( faxFields )
CALLEE	1339:39	1339:39	10	TIFFArrayCount
LEAF_NODE	1339:39	1339:39	11	TIFFArrayCount
LEAF_NODE	1339:53	1339:53	10	(
ARGUMENT	1339:54	1339:54	10	faxFields
FIELD	1339:54	1339:54	11	faxFields
LEAF_NODE	1339:54	1339:54	12	faxFields
LEAF_NODE	1339:63	1339:63	10	)
LEAF_NODE	1339:64	1339:64	8	)
LEAF_NODE	1339:65	1339:65	4	)
STATEMENTS	1339:67	1343:1	4	
LEAF_NODE	1339:67	1339:67	5	{
STATEMENTS	1340:2	1342:2	5	
EXPR_STATEMENT	1340:2	1341:57	6	TIFFErrorExt ( tif -> tif_clientdata , "InitCCITTFax3" , "Merging common CCITT Fax codec-specific tags failed" ) ;
EXPR	1340:2	1340:2	7	TIFFErrorExt ( tif -> tif_clientdata , "InitCCITTFax3" , "Merging common CCITT Fax codec-specific tags failed" )
FUNCTION_CALL	1340:2	1341:56	8	TIFFErrorExt ( tif -> tif_clientdata , "InitCCITTFax3" , "Merging common CCITT Fax codec-specific tags failed" )
CALLEE	1340:2	1340:2	9	TIFFErrorExt
LEAF_NODE	1340:2	1340:2	10	TIFFErrorExt
LEAF_NODE	1340:14	1340:14	9	(
ARGUMENT	1340:15	1340:15	9	tif -> tif_clientdata
FIELD	1340:15	1340:20	10	tif -> tif_clientdata
LEAF_NODE	1340:15	1340:15	11	tif
LEAF_NODE	1340:18	1340:18	11	->
LEAF_NODE	1340:20	1340:20	11	tif_clientdata
LEAF_NODE	1340:34	1340:34	9	,
ARGUMENT	1340:36	1340:36	9	"InitCCITTFax3"
FIELD	1340:36	1340:36	10	"InitCCITTFax3"
LEAF_NODE	1340:36	1340:36	11	"InitCCITTFax3"
LEAF_NODE	1340:51	1340:51	9	,
ARGUMENT	1341:3	1341:3	9	"Merging common CCITT Fax codec-specific tags failed"
FIELD	1341:3	1341:3	10	"Merging common CCITT Fax codec-specific tags failed"
LEAF_NODE	1341:3	1341:3	11	"Merging common CCITT Fax codec-specific tags failed"
LEAF_NODE	1341:56	1341:56	9	)
LEAF_NODE	1341:57	1341:57	7	;
JUMP_STATEMENT	1342:2	1342:10	6	return 0 ;
KEYWORD	1342:2	1342:2	7	return
LEAF_NODE	1342:2	1342:2	8	return
DESTINATION	1342:9	1342:9	7	0
EXPR	1342:9	1342:9	8	0
FIELD	1342:9	1342:9	9	0
LEAF_NODE	1342:9	1342:9	10	0
LEAF_NODE	1342:10	1342:10	7	;
LEAF_NODE	1343:1	1343:1	5	}
EXPR_STATEMENT	1348:1	1349:38	3	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( Fax3CodecState ) ) ;
EXPR	1348:1	1348:1	4	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( Fax3CodecState ) )
ASSIGN	1348:1	1348:17	5	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( Fax3CodecState ) )
LVAL	1348:1	1348:1	6	tif -> tif_data
FIELD	1348:1	1348:6	7	tif -> tif_data
LEAF_NODE	1348:1	1348:1	8	tif
LEAF_NODE	1348:4	1348:4	8	->
LEAF_NODE	1348:6	1348:6	8	tif_data
ASSIGN_OP	1348:15	1348:15	6	=
LEAF_NODE	1348:15	1348:15	7	=
RVAL	1348:17	1349:2	6	( uint8 * ) _TIFFmalloc ( sizeof ( Fax3CodecState ) )
LEAF_NODE	1348:17	1348:17	7	(
TYPE_NAME	1348:18	1348:18	7	uint8
LEAF_NODE	1348:18	1348:18	8	uint8
LEAF_NODE	1348:23	1348:23	7	*
LEAF_NODE	1348:24	1348:24	7	)
FUNCTION_CALL	1349:2	1349:37	7	_TIFFmalloc ( sizeof ( Fax3CodecState ) )
CALLEE	1349:2	1349:2	8	_TIFFmalloc
LEAF_NODE	1349:2	1349:2	9	_TIFFmalloc
LEAF_NODE	1349:13	1349:13	8	(
ARGUMENT	1349:14	1349:14	8	sizeof ( Fax3CodecState )
FUNCTION_CALL	1349:14	1349:36	9	sizeof ( Fax3CodecState )
CALLEE	1349:14	1349:14	10	sizeof
LEAF_NODE	1349:14	1349:14	11	sizeof
LEAF_NODE	1349:21	1349:21	10	(
ARGUMENT	1349:22	1349:22	10	Fax3CodecState
FIELD	1349:22	1349:22	11	Fax3CodecState
LEAF_NODE	1349:22	1349:22	12	Fax3CodecState
LEAF_NODE	1349:36	1349:36	10	)
LEAF_NODE	1349:37	1349:37	8	)
LEAF_NODE	1349:38	1349:38	4	;
SELECTION	1351:1	1351:28	3	
KEYWORD	1351:1	1351:1	4	if
LEAF_NODE	1351:1	1351:1	5	if
LEAF_NODE	1351:4	1351:4	4	(
CONDITION	1351:5	1351:5	4	tif -> tif_data == NULL
EXPR	1351:5	1351:22	5	tif -> tif_data == NULL
FIELD	1351:5	1351:10	6	tif -> tif_data
LEAF_NODE	1351:5	1351:5	7	tif
LEAF_NODE	1351:8	1351:8	7	->
LEAF_NODE	1351:10	1351:10	7	tif_data
EQ_OPERATOR	1351:19	1351:19	6	==
LEAF_NODE	1351:19	1351:19	7	==
FIELD	1351:22	1351:22	6	NULL
LEAF_NODE	1351:22	1351:22	7	NULL
LEAF_NODE	1351:26	1351:26	4	)
STATEMENTS	1351:28	1355:1	4	
LEAF_NODE	1351:28	1351:28	5	{
STATEMENTS	1352:2	1354:2	5	
EXPR_STATEMENT	1352:2	1353:33	6	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for state block" ) ;
EXPR	1352:2	1352:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for state block" )
FUNCTION_CALL	1352:2	1353:32	8	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for state block" )
CALLEE	1352:2	1352:2	9	TIFFErrorExt
LEAF_NODE	1352:2	1352:2	10	TIFFErrorExt
LEAF_NODE	1352:14	1352:14	9	(
ARGUMENT	1352:15	1352:15	9	tif -> tif_clientdata
FIELD	1352:15	1352:20	10	tif -> tif_clientdata
LEAF_NODE	1352:15	1352:15	11	tif
LEAF_NODE	1352:18	1352:18	11	->
LEAF_NODE	1352:20	1352:20	11	tif_clientdata
LEAF_NODE	1352:34	1352:34	9	,
ARGUMENT	1352:36	1352:36	9	module
FIELD	1352:36	1352:36	10	module
LEAF_NODE	1352:36	1352:36	11	module
LEAF_NODE	1352:42	1352:42	9	,
ARGUMENT	1353:6	1353:6	9	"No space for state block"
FIELD	1353:6	1353:6	10	"No space for state block"
LEAF_NODE	1353:6	1353:6	11	"No space for state block"
LEAF_NODE	1353:32	1353:32	9	)
LEAF_NODE	1353:33	1353:33	7	;
JUMP_STATEMENT	1354:2	1354:12	6	return ( 0 ) ;
KEYWORD	1354:2	1354:2	7	return
LEAF_NODE	1354:2	1354:2	8	return
DESTINATION	1354:9	1354:9	7	( 0 )
EXPR	1354:9	1354:11	8	( 0 )
LEAF_NODE	1354:9	1354:9	9	(
FIELD	1354:10	1354:10	9	0
LEAF_NODE	1354:10	1354:10	10	0
LEAF_NODE	1354:11	1354:11	9	)
LEAF_NODE	1354:12	1354:12	7	;
LEAF_NODE	1355:1	1355:1	5	}
EXPR_STATEMENT	1356:1	1356:55	3	_TIFFmemset ( tif -> tif_data , 0 , sizeof ( Fax3CodecState ) ) ;
EXPR	1356:1	1356:1	4	_TIFFmemset ( tif -> tif_data , 0 , sizeof ( Fax3CodecState ) )
FUNCTION_CALL	1356:1	1356:54	5	_TIFFmemset ( tif -> tif_data , 0 , sizeof ( Fax3CodecState ) )
CALLEE	1356:1	1356:1	6	_TIFFmemset
LEAF_NODE	1356:1	1356:1	7	_TIFFmemset
LEAF_NODE	1356:12	1356:12	6	(
ARGUMENT	1356:13	1356:13	6	tif -> tif_data
FIELD	1356:13	1356:18	7	tif -> tif_data
LEAF_NODE	1356:13	1356:13	8	tif
LEAF_NODE	1356:16	1356:16	8	->
LEAF_NODE	1356:18	1356:18	8	tif_data
LEAF_NODE	1356:26	1356:26	6	,
ARGUMENT	1356:28	1356:28	6	0
FIELD	1356:28	1356:28	7	0
LEAF_NODE	1356:28	1356:28	8	0
LEAF_NODE	1356:29	1356:29	6	,
ARGUMENT	1356:31	1356:31	6	sizeof ( Fax3CodecState )
FUNCTION_CALL	1356:31	1356:53	7	sizeof ( Fax3CodecState )
CALLEE	1356:31	1356:31	8	sizeof
LEAF_NODE	1356:31	1356:31	9	sizeof
LEAF_NODE	1356:38	1356:38	8	(
ARGUMENT	1356:39	1356:39	8	Fax3CodecState
FIELD	1356:39	1356:39	9	Fax3CodecState
LEAF_NODE	1356:39	1356:39	10	Fax3CodecState
LEAF_NODE	1356:53	1356:53	8	)
LEAF_NODE	1356:54	1356:54	6	)
LEAF_NODE	1356:55	1356:55	4	;
EXPR_STATEMENT	1358:1	1358:20	3	sp = Fax3State ( tif ) ;
EXPR	1358:1	1358:1	4	sp = Fax3State ( tif )
ASSIGN	1358:1	1358:6	5	sp = Fax3State ( tif )
LVAL	1358:1	1358:1	6	sp
FIELD	1358:1	1358:1	7	sp
LEAF_NODE	1358:1	1358:1	8	sp
ASSIGN_OP	1358:4	1358:4	6	=
LEAF_NODE	1358:4	1358:4	7	=
RVAL	1358:6	1358:6	6	Fax3State ( tif )
FUNCTION_CALL	1358:6	1358:19	7	Fax3State ( tif )
CALLEE	1358:6	1358:6	8	Fax3State
LEAF_NODE	1358:6	1358:6	9	Fax3State
LEAF_NODE	1358:15	1358:15	8	(
ARGUMENT	1358:16	1358:16	8	tif
FIELD	1358:16	1358:16	9	tif
LEAF_NODE	1358:16	1358:16	10	tif
LEAF_NODE	1358:19	1358:19	8	)
LEAF_NODE	1358:20	1358:20	4	;
EXPR_STATEMENT	1359:8	1359:35	3	sp -> rw_mode = tif -> tif_mode ;
EXPR	1359:8	1359:8	4	sp -> rw_mode = tif -> tif_mode
ASSIGN	1359:8	1359:22	5	sp -> rw_mode = tif -> tif_mode
LVAL	1359:8	1359:8	6	sp -> rw_mode
FIELD	1359:8	1359:12	7	sp -> rw_mode
LEAF_NODE	1359:8	1359:8	8	sp
LEAF_NODE	1359:10	1359:10	8	->
LEAF_NODE	1359:12	1359:12	8	rw_mode
ASSIGN_OP	1359:20	1359:20	6	=
LEAF_NODE	1359:20	1359:20	7	=
RVAL	1359:22	1359:22	6	tif -> tif_mode
FIELD	1359:22	1359:27	7	tif -> tif_mode
LEAF_NODE	1359:22	1359:22	8	tif
LEAF_NODE	1359:25	1359:25	8	->
LEAF_NODE	1359:27	1359:27	8	tif_mode
LEAF_NODE	1359:35	1359:35	4	;
EXPR_STATEMENT	1364:1	1364:47	3	sp -> vgetparent = tif -> tif_tagmethods . vgetfield ;
EXPR	1364:1	1364:1	4	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
ASSIGN	1364:1	1364:18	5	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
LVAL	1364:1	1364:1	6	sp -> vgetparent
FIELD	1364:1	1364:5	7	sp -> vgetparent
LEAF_NODE	1364:1	1364:1	8	sp
LEAF_NODE	1364:3	1364:3	8	->
LEAF_NODE	1364:5	1364:5	8	vgetparent
ASSIGN_OP	1364:16	1364:16	6	=
LEAF_NODE	1364:16	1364:16	7	=
RVAL	1364:18	1364:18	6	tif -> tif_tagmethods . vgetfield
FIELD	1364:18	1364:38	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1364:18	1364:18	8	tif
LEAF_NODE	1364:21	1364:21	8	->
LEAF_NODE	1364:23	1364:23	8	tif_tagmethods
LEAF_NODE	1364:37	1364:37	8	.
LEAF_NODE	1364:38	1364:38	8	vgetfield
LEAF_NODE	1364:47	1364:47	4	;
EXPR_STATEMENT	1365:1	1365:46	3	tif -> tif_tagmethods . vgetfield = Fax3VGetField ;
EXPR	1365:1	1365:1	4	tif -> tif_tagmethods . vgetfield = Fax3VGetField
ASSIGN	1365:1	1365:33	5	tif -> tif_tagmethods . vgetfield = Fax3VGetField
LVAL	1365:1	1365:1	6	tif -> tif_tagmethods . vgetfield
FIELD	1365:1	1365:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1365:1	1365:1	8	tif
LEAF_NODE	1365:4	1365:4	8	->
LEAF_NODE	1365:6	1365:6	8	tif_tagmethods
LEAF_NODE	1365:20	1365:20	8	.
LEAF_NODE	1365:21	1365:21	8	vgetfield
ASSIGN_OP	1365:31	1365:31	6	=
LEAF_NODE	1365:31	1365:31	7	=
RVAL	1365:33	1365:33	6	Fax3VGetField
FIELD	1365:33	1365:33	7	Fax3VGetField
LEAF_NODE	1365:33	1365:33	8	Fax3VGetField
LEAF_NODE	1365:46	1365:46	4	;
EXPR_STATEMENT	1366:1	1366:47	3	sp -> vsetparent = tif -> tif_tagmethods . vsetfield ;
EXPR	1366:1	1366:1	4	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
ASSIGN	1366:1	1366:18	5	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
LVAL	1366:1	1366:1	6	sp -> vsetparent
FIELD	1366:1	1366:5	7	sp -> vsetparent
LEAF_NODE	1366:1	1366:1	8	sp
LEAF_NODE	1366:3	1366:3	8	->
LEAF_NODE	1366:5	1366:5	8	vsetparent
ASSIGN_OP	1366:16	1366:16	6	=
LEAF_NODE	1366:16	1366:16	7	=
RVAL	1366:18	1366:18	6	tif -> tif_tagmethods . vsetfield
FIELD	1366:18	1366:38	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	1366:18	1366:18	8	tif
LEAF_NODE	1366:21	1366:21	8	->
LEAF_NODE	1366:23	1366:23	8	tif_tagmethods
LEAF_NODE	1366:37	1366:37	8	.
LEAF_NODE	1366:38	1366:38	8	vsetfield
LEAF_NODE	1366:47	1366:47	4	;
EXPR_STATEMENT	1367:1	1367:46	3	tif -> tif_tagmethods . vsetfield = Fax3VSetField ;
EXPR	1367:1	1367:1	4	tif -> tif_tagmethods . vsetfield = Fax3VSetField
ASSIGN	1367:1	1367:33	5	tif -> tif_tagmethods . vsetfield = Fax3VSetField
LVAL	1367:1	1367:1	6	tif -> tif_tagmethods . vsetfield
FIELD	1367:1	1367:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	1367:1	1367:1	8	tif
LEAF_NODE	1367:4	1367:4	8	->
LEAF_NODE	1367:6	1367:6	8	tif_tagmethods
LEAF_NODE	1367:20	1367:20	8	.
LEAF_NODE	1367:21	1367:21	8	vsetfield
ASSIGN_OP	1367:31	1367:31	6	=
LEAF_NODE	1367:31	1367:31	7	=
RVAL	1367:33	1367:33	6	Fax3VSetField
FIELD	1367:33	1367:33	7	Fax3VSetField
LEAF_NODE	1367:33	1367:33	8	Fax3VSetField
LEAF_NODE	1367:46	1367:46	4	;
EXPR_STATEMENT	1368:1	1368:44	3	sp -> printdir = tif -> tif_tagmethods . printdir ;
EXPR	1368:1	1368:1	4	sp -> printdir = tif -> tif_tagmethods . printdir
ASSIGN	1368:1	1368:16	5	sp -> printdir = tif -> tif_tagmethods . printdir
LVAL	1368:1	1368:1	6	sp -> printdir
FIELD	1368:1	1368:5	7	sp -> printdir
LEAF_NODE	1368:1	1368:1	8	sp
LEAF_NODE	1368:3	1368:3	8	->
LEAF_NODE	1368:5	1368:5	8	printdir
ASSIGN_OP	1368:14	1368:14	6	=
LEAF_NODE	1368:14	1368:14	7	=
RVAL	1368:16	1368:16	6	tif -> tif_tagmethods . printdir
FIELD	1368:16	1368:36	7	tif -> tif_tagmethods . printdir
LEAF_NODE	1368:16	1368:16	8	tif
LEAF_NODE	1368:19	1368:19	8	->
LEAF_NODE	1368:21	1368:21	8	tif_tagmethods
LEAF_NODE	1368:35	1368:35	8	.
LEAF_NODE	1368:36	1368:36	8	printdir
LEAF_NODE	1368:44	1368:44	4	;
EXPR_STATEMENT	1369:1	1369:44	3	tif -> tif_tagmethods . printdir = Fax3PrintDir ;
EXPR	1369:1	1369:1	4	tif -> tif_tagmethods . printdir = Fax3PrintDir
ASSIGN	1369:1	1369:32	5	tif -> tif_tagmethods . printdir = Fax3PrintDir
LVAL	1369:1	1369:1	6	tif -> tif_tagmethods . printdir
FIELD	1369:1	1369:21	7	tif -> tif_tagmethods . printdir
LEAF_NODE	1369:1	1369:1	8	tif
LEAF_NODE	1369:4	1369:4	8	->
LEAF_NODE	1369:6	1369:6	8	tif_tagmethods
LEAF_NODE	1369:20	1369:20	8	.
LEAF_NODE	1369:21	1369:21	8	printdir
ASSIGN_OP	1369:30	1369:30	6	=
LEAF_NODE	1369:30	1369:30	7	=
RVAL	1369:32	1369:32	6	Fax3PrintDir
FIELD	1369:32	1369:32	7	Fax3PrintDir
LEAF_NODE	1369:32	1369:32	8	Fax3PrintDir
LEAF_NODE	1369:44	1369:44	4	;
EXPR_STATEMENT	1370:1	1370:21	3	sp -> groupoptions = 0 ;
EXPR	1370:1	1370:1	4	sp -> groupoptions = 0
ASSIGN	1370:1	1370:20	5	sp -> groupoptions = 0
LVAL	1370:1	1370:1	6	sp -> groupoptions
FIELD	1370:1	1370:5	7	sp -> groupoptions
LEAF_NODE	1370:1	1370:1	8	sp
LEAF_NODE	1370:3	1370:3	8	->
LEAF_NODE	1370:5	1370:5	8	groupoptions
ASSIGN_OP	1370:18	1370:18	6	=
LEAF_NODE	1370:18	1370:18	7	=
RVAL	1370:20	1370:20	6	0
FIELD	1370:20	1370:20	7	0
LEAF_NODE	1370:20	1370:20	8	0
LEAF_NODE	1370:21	1370:21	4	;
SELECTION	1372:1	1373:2	3	
KEYWORD	1372:1	1372:1	4	if
LEAF_NODE	1372:1	1372:1	5	if
LEAF_NODE	1372:4	1372:4	4	(
CONDITION	1372:5	1372:5	4	sp -> rw_mode == O_RDONLY
EXPR	1372:5	1372:20	5	sp -> rw_mode == O_RDONLY
FIELD	1372:5	1372:9	6	sp -> rw_mode
LEAF_NODE	1372:5	1372:5	7	sp
LEAF_NODE	1372:7	1372:7	7	->
LEAF_NODE	1372:9	1372:9	7	rw_mode
EQ_OPERATOR	1372:17	1372:17	6	==
LEAF_NODE	1372:17	1372:17	7	==
FIELD	1372:20	1372:20	6	O_RDONLY
LEAF_NODE	1372:20	1372:20	7	O_RDONLY
LEAF_NODE	1372:28	1372:28	4	)
STATEMENTS	1373:2	1373:2	4	
EXPR_STATEMENT	1373:2	1373:33	5	tif -> tif_flags |= TIFF_NOBITREV ;
EXPR	1373:2	1373:2	6	tif -> tif_flags |= TIFF_NOBITREV
ASSIGN	1373:2	1373:20	7	tif -> tif_flags |= TIFF_NOBITREV
LVAL	1373:2	1373:2	8	tif -> tif_flags
FIELD	1373:2	1373:7	9	tif -> tif_flags
LEAF_NODE	1373:2	1373:2	10	tif
LEAF_NODE	1373:5	1373:5	10	->
LEAF_NODE	1373:7	1373:7	10	tif_flags
ASSIGN_OP	1373:17	1373:17	8	|=
LEAF_NODE	1373:17	1373:17	9	|=
RVAL	1373:20	1373:20	8	TIFF_NOBITREV
FIELD	1373:20	1373:20	9	TIFF_NOBITREV
LEAF_NODE	1373:20	1373:20	10	TIFF_NOBITREV
LEAF_NODE	1373:33	1373:33	6	;
EXPR_STATEMENT	1374:1	1374:31	3	DecoderState ( tif ) -> runs = NULL ;
EXPR	1374:1	1374:1	4	DecoderState ( tif ) -> runs = NULL
ASSIGN	1374:1	1374:27	5	DecoderState ( tif ) -> runs = NULL
LVAL	1374:1	1374:20	6	DecoderState ( tif ) -> runs
FUNCTION_CALL	1374:1	1374:17	7	DecoderState ( tif )
CALLEE	1374:1	1374:1	8	DecoderState
LEAF_NODE	1374:1	1374:1	9	DecoderState
LEAF_NODE	1374:13	1374:13	8	(
ARGUMENT	1374:14	1374:14	8	tif
FIELD	1374:14	1374:14	9	tif
LEAF_NODE	1374:14	1374:14	10	tif
LEAF_NODE	1374:17	1374:17	8	)
LEAF_NODE	1374:18	1374:18	7	->
LEAF_NODE	1374:20	1374:20	7	runs
ASSIGN_OP	1374:25	1374:25	6	=
LEAF_NODE	1374:25	1374:25	7	=
RVAL	1374:27	1374:27	6	NULL
FIELD	1374:27	1374:27	7	NULL
LEAF_NODE	1374:27	1374:27	8	NULL
LEAF_NODE	1374:31	1374:31	4	;
EXPR_STATEMENT	1375:1	1375:58	3	TIFFSetField ( tif , TIFFTAG_FAXFILLFUNC , _TIFFFax3fillruns ) ;
EXPR	1375:1	1375:1	4	TIFFSetField ( tif , TIFFTAG_FAXFILLFUNC , _TIFFFax3fillruns )
FUNCTION_CALL	1375:1	1375:57	5	TIFFSetField ( tif , TIFFTAG_FAXFILLFUNC , _TIFFFax3fillruns )
CALLEE	1375:1	1375:1	6	TIFFSetField
LEAF_NODE	1375:1	1375:1	7	TIFFSetField
LEAF_NODE	1375:13	1375:13	6	(
ARGUMENT	1375:14	1375:14	6	tif
FIELD	1375:14	1375:14	7	tif
LEAF_NODE	1375:14	1375:14	8	tif
LEAF_NODE	1375:17	1375:17	6	,
ARGUMENT	1375:19	1375:19	6	TIFFTAG_FAXFILLFUNC
FIELD	1375:19	1375:19	7	TIFFTAG_FAXFILLFUNC
LEAF_NODE	1375:19	1375:19	8	TIFFTAG_FAXFILLFUNC
LEAF_NODE	1375:38	1375:38	6	,
ARGUMENT	1375:40	1375:40	6	_TIFFFax3fillruns
FIELD	1375:40	1375:40	7	_TIFFFax3fillruns
LEAF_NODE	1375:40	1375:40	8	_TIFFFax3fillruns
LEAF_NODE	1375:57	1375:57	6	)
LEAF_NODE	1375:58	1375:58	4	;
EXPR_STATEMENT	1376:1	1376:34	3	EncoderState ( tif ) -> refline = NULL ;
EXPR	1376:1	1376:1	4	EncoderState ( tif ) -> refline = NULL
ASSIGN	1376:1	1376:30	5	EncoderState ( tif ) -> refline = NULL
LVAL	1376:1	1376:20	6	EncoderState ( tif ) -> refline
FUNCTION_CALL	1376:1	1376:17	7	EncoderState ( tif )
CALLEE	1376:1	1376:1	8	EncoderState
LEAF_NODE	1376:1	1376:1	9	EncoderState
LEAF_NODE	1376:13	1376:13	8	(
ARGUMENT	1376:14	1376:14	8	tif
FIELD	1376:14	1376:14	9	tif
LEAF_NODE	1376:14	1376:14	10	tif
LEAF_NODE	1376:17	1376:17	8	)
LEAF_NODE	1376:18	1376:18	7	->
LEAF_NODE	1376:20	1376:20	7	refline
ASSIGN_OP	1376:28	1376:28	6	=
LEAF_NODE	1376:28	1376:28	7	=
RVAL	1376:30	1376:30	6	NULL
FIELD	1376:30	1376:30	7	NULL
LEAF_NODE	1376:30	1376:30	8	NULL
LEAF_NODE	1376:34	1376:34	4	;
EXPR_STATEMENT	1381:1	1381:35	3	tif -> tif_fixuptags = Fax3FixupTags ;
EXPR	1381:1	1381:1	4	tif -> tif_fixuptags = Fax3FixupTags
ASSIGN	1381:1	1381:22	5	tif -> tif_fixuptags = Fax3FixupTags
LVAL	1381:1	1381:1	6	tif -> tif_fixuptags
FIELD	1381:1	1381:6	7	tif -> tif_fixuptags
LEAF_NODE	1381:1	1381:1	8	tif
LEAF_NODE	1381:4	1381:4	8	->
LEAF_NODE	1381:6	1381:6	8	tif_fixuptags
ASSIGN_OP	1381:20	1381:20	6	=
LEAF_NODE	1381:20	1381:20	7	=
RVAL	1381:22	1381:22	6	Fax3FixupTags
FIELD	1381:22	1381:22	7	Fax3FixupTags
LEAF_NODE	1381:22	1381:22	8	Fax3FixupTags
LEAF_NODE	1381:35	1381:35	4	;
EXPR_STATEMENT	1382:1	1382:38	3	tif -> tif_setupdecode = Fax3SetupState ;
EXPR	1382:1	1382:1	4	tif -> tif_setupdecode = Fax3SetupState
ASSIGN	1382:1	1382:24	5	tif -> tif_setupdecode = Fax3SetupState
LVAL	1382:1	1382:1	6	tif -> tif_setupdecode
FIELD	1382:1	1382:6	7	tif -> tif_setupdecode
LEAF_NODE	1382:1	1382:1	8	tif
LEAF_NODE	1382:4	1382:4	8	->
LEAF_NODE	1382:6	1382:6	8	tif_setupdecode
ASSIGN_OP	1382:22	1382:22	6	=
LEAF_NODE	1382:22	1382:22	7	=
RVAL	1382:24	1382:24	6	Fax3SetupState
FIELD	1382:24	1382:24	7	Fax3SetupState
LEAF_NODE	1382:24	1382:24	8	Fax3SetupState
LEAF_NODE	1382:38	1382:38	4	;
EXPR_STATEMENT	1383:1	1383:35	3	tif -> tif_predecode = Fax3PreDecode ;
EXPR	1383:1	1383:1	4	tif -> tif_predecode = Fax3PreDecode
ASSIGN	1383:1	1383:22	5	tif -> tif_predecode = Fax3PreDecode
LVAL	1383:1	1383:1	6	tif -> tif_predecode
FIELD	1383:1	1383:6	7	tif -> tif_predecode
LEAF_NODE	1383:1	1383:1	8	tif
LEAF_NODE	1383:4	1383:4	8	->
LEAF_NODE	1383:6	1383:6	8	tif_predecode
ASSIGN_OP	1383:20	1383:20	6	=
LEAF_NODE	1383:20	1383:20	7	=
RVAL	1383:22	1383:22	6	Fax3PreDecode
FIELD	1383:22	1383:22	7	Fax3PreDecode
LEAF_NODE	1383:22	1383:22	8	Fax3PreDecode
LEAF_NODE	1383:35	1383:35	4	;
EXPR_STATEMENT	1384:1	1384:34	3	tif -> tif_decoderow = Fax3Decode1D ;
EXPR	1384:1	1384:1	4	tif -> tif_decoderow = Fax3Decode1D
ASSIGN	1384:1	1384:22	5	tif -> tif_decoderow = Fax3Decode1D
LVAL	1384:1	1384:1	6	tif -> tif_decoderow
FIELD	1384:1	1384:6	7	tif -> tif_decoderow
LEAF_NODE	1384:1	1384:1	8	tif
LEAF_NODE	1384:4	1384:4	8	->
LEAF_NODE	1384:6	1384:6	8	tif_decoderow
ASSIGN_OP	1384:20	1384:20	6	=
LEAF_NODE	1384:20	1384:20	7	=
RVAL	1384:22	1384:22	6	Fax3Decode1D
FIELD	1384:22	1384:22	7	Fax3Decode1D
LEAF_NODE	1384:22	1384:22	8	Fax3Decode1D
LEAF_NODE	1384:34	1384:34	4	;
EXPR_STATEMENT	1385:1	1385:36	3	tif -> tif_decodestrip = Fax3Decode1D ;
EXPR	1385:1	1385:1	4	tif -> tif_decodestrip = Fax3Decode1D
ASSIGN	1385:1	1385:24	5	tif -> tif_decodestrip = Fax3Decode1D
LVAL	1385:1	1385:1	6	tif -> tif_decodestrip
FIELD	1385:1	1385:6	7	tif -> tif_decodestrip
LEAF_NODE	1385:1	1385:1	8	tif
LEAF_NODE	1385:4	1385:4	8	->
LEAF_NODE	1385:6	1385:6	8	tif_decodestrip
ASSIGN_OP	1385:22	1385:22	6	=
LEAF_NODE	1385:22	1385:22	7	=
RVAL	1385:24	1385:24	6	Fax3Decode1D
FIELD	1385:24	1385:24	7	Fax3Decode1D
LEAF_NODE	1385:24	1385:24	8	Fax3Decode1D
LEAF_NODE	1385:36	1385:36	4	;
EXPR_STATEMENT	1386:1	1386:35	3	tif -> tif_decodetile = Fax3Decode1D ;
EXPR	1386:1	1386:1	4	tif -> tif_decodetile = Fax3Decode1D
ASSIGN	1386:1	1386:23	5	tif -> tif_decodetile = Fax3Decode1D
LVAL	1386:1	1386:1	6	tif -> tif_decodetile
FIELD	1386:1	1386:6	7	tif -> tif_decodetile
LEAF_NODE	1386:1	1386:1	8	tif
LEAF_NODE	1386:4	1386:4	8	->
LEAF_NODE	1386:6	1386:6	8	tif_decodetile
ASSIGN_OP	1386:21	1386:21	6	=
LEAF_NODE	1386:21	1386:21	7	=
RVAL	1386:23	1386:23	6	Fax3Decode1D
FIELD	1386:23	1386:23	7	Fax3Decode1D
LEAF_NODE	1386:23	1386:23	8	Fax3Decode1D
LEAF_NODE	1386:35	1386:35	4	;
EXPR_STATEMENT	1387:1	1387:38	3	tif -> tif_setupencode = Fax3SetupState ;
EXPR	1387:1	1387:1	4	tif -> tif_setupencode = Fax3SetupState
ASSIGN	1387:1	1387:24	5	tif -> tif_setupencode = Fax3SetupState
LVAL	1387:1	1387:1	6	tif -> tif_setupencode
FIELD	1387:1	1387:6	7	tif -> tif_setupencode
LEAF_NODE	1387:1	1387:1	8	tif
LEAF_NODE	1387:4	1387:4	8	->
LEAF_NODE	1387:6	1387:6	8	tif_setupencode
ASSIGN_OP	1387:22	1387:22	6	=
LEAF_NODE	1387:22	1387:22	7	=
RVAL	1387:24	1387:24	6	Fax3SetupState
FIELD	1387:24	1387:24	7	Fax3SetupState
LEAF_NODE	1387:24	1387:24	8	Fax3SetupState
LEAF_NODE	1387:38	1387:38	4	;
EXPR_STATEMENT	1388:1	1388:35	3	tif -> tif_preencode = Fax3PreEncode ;
EXPR	1388:1	1388:1	4	tif -> tif_preencode = Fax3PreEncode
ASSIGN	1388:1	1388:22	5	tif -> tif_preencode = Fax3PreEncode
LVAL	1388:1	1388:1	6	tif -> tif_preencode
FIELD	1388:1	1388:6	7	tif -> tif_preencode
LEAF_NODE	1388:1	1388:1	8	tif
LEAF_NODE	1388:4	1388:4	8	->
LEAF_NODE	1388:6	1388:6	8	tif_preencode
ASSIGN_OP	1388:20	1388:20	6	=
LEAF_NODE	1388:20	1388:20	7	=
RVAL	1388:22	1388:22	6	Fax3PreEncode
FIELD	1388:22	1388:22	7	Fax3PreEncode
LEAF_NODE	1388:22	1388:22	8	Fax3PreEncode
LEAF_NODE	1388:35	1388:35	4	;
EXPR_STATEMENT	1389:1	1389:37	3	tif -> tif_postencode = Fax3PostEncode ;
EXPR	1389:1	1389:1	4	tif -> tif_postencode = Fax3PostEncode
ASSIGN	1389:1	1389:23	5	tif -> tif_postencode = Fax3PostEncode
LVAL	1389:1	1389:1	6	tif -> tif_postencode
FIELD	1389:1	1389:6	7	tif -> tif_postencode
LEAF_NODE	1389:1	1389:1	8	tif
LEAF_NODE	1389:4	1389:4	8	->
LEAF_NODE	1389:6	1389:6	8	tif_postencode
ASSIGN_OP	1389:21	1389:21	6	=
LEAF_NODE	1389:21	1389:21	7	=
RVAL	1389:23	1389:23	6	Fax3PostEncode
FIELD	1389:23	1389:23	7	Fax3PostEncode
LEAF_NODE	1389:23	1389:23	8	Fax3PostEncode
LEAF_NODE	1389:37	1389:37	4	;
EXPR_STATEMENT	1390:1	1390:32	3	tif -> tif_encoderow = Fax3Encode ;
EXPR	1390:1	1390:1	4	tif -> tif_encoderow = Fax3Encode
ASSIGN	1390:1	1390:22	5	tif -> tif_encoderow = Fax3Encode
LVAL	1390:1	1390:1	6	tif -> tif_encoderow
FIELD	1390:1	1390:6	7	tif -> tif_encoderow
LEAF_NODE	1390:1	1390:1	8	tif
LEAF_NODE	1390:4	1390:4	8	->
LEAF_NODE	1390:6	1390:6	8	tif_encoderow
ASSIGN_OP	1390:20	1390:20	6	=
LEAF_NODE	1390:20	1390:20	7	=
RVAL	1390:22	1390:22	6	Fax3Encode
FIELD	1390:22	1390:22	7	Fax3Encode
LEAF_NODE	1390:22	1390:22	8	Fax3Encode
LEAF_NODE	1390:32	1390:32	4	;
EXPR_STATEMENT	1391:1	1391:34	3	tif -> tif_encodestrip = Fax3Encode ;
EXPR	1391:1	1391:1	4	tif -> tif_encodestrip = Fax3Encode
ASSIGN	1391:1	1391:24	5	tif -> tif_encodestrip = Fax3Encode
LVAL	1391:1	1391:1	6	tif -> tif_encodestrip
FIELD	1391:1	1391:6	7	tif -> tif_encodestrip
LEAF_NODE	1391:1	1391:1	8	tif
LEAF_NODE	1391:4	1391:4	8	->
LEAF_NODE	1391:6	1391:6	8	tif_encodestrip
ASSIGN_OP	1391:22	1391:22	6	=
LEAF_NODE	1391:22	1391:22	7	=
RVAL	1391:24	1391:24	6	Fax3Encode
FIELD	1391:24	1391:24	7	Fax3Encode
LEAF_NODE	1391:24	1391:24	8	Fax3Encode
LEAF_NODE	1391:34	1391:34	4	;
EXPR_STATEMENT	1392:1	1392:33	3	tif -> tif_encodetile = Fax3Encode ;
EXPR	1392:1	1392:1	4	tif -> tif_encodetile = Fax3Encode
ASSIGN	1392:1	1392:23	5	tif -> tif_encodetile = Fax3Encode
LVAL	1392:1	1392:1	6	tif -> tif_encodetile
FIELD	1392:1	1392:6	7	tif -> tif_encodetile
LEAF_NODE	1392:1	1392:1	8	tif
LEAF_NODE	1392:4	1392:4	8	->
LEAF_NODE	1392:6	1392:6	8	tif_encodetile
ASSIGN_OP	1392:21	1392:21	6	=
LEAF_NODE	1392:21	1392:21	7	=
RVAL	1392:23	1392:23	6	Fax3Encode
FIELD	1392:23	1392:23	7	Fax3Encode
LEAF_NODE	1392:23	1392:23	8	Fax3Encode
LEAF_NODE	1392:33	1392:33	4	;
EXPR_STATEMENT	1393:1	1393:27	3	tif -> tif_close = Fax3Close ;
EXPR	1393:1	1393:1	4	tif -> tif_close = Fax3Close
ASSIGN	1393:1	1393:18	5	tif -> tif_close = Fax3Close
LVAL	1393:1	1393:1	6	tif -> tif_close
FIELD	1393:1	1393:6	7	tif -> tif_close
LEAF_NODE	1393:1	1393:1	8	tif
LEAF_NODE	1393:4	1393:4	8	->
LEAF_NODE	1393:6	1393:6	8	tif_close
ASSIGN_OP	1393:16	1393:16	6	=
LEAF_NODE	1393:16	1393:16	7	=
RVAL	1393:18	1393:18	6	Fax3Close
FIELD	1393:18	1393:18	7	Fax3Close
LEAF_NODE	1393:18	1393:18	8	Fax3Close
LEAF_NODE	1393:27	1393:27	4	;
EXPR_STATEMENT	1394:1	1394:31	3	tif -> tif_cleanup = Fax3Cleanup ;
EXPR	1394:1	1394:1	4	tif -> tif_cleanup = Fax3Cleanup
ASSIGN	1394:1	1394:20	5	tif -> tif_cleanup = Fax3Cleanup
LVAL	1394:1	1394:1	6	tif -> tif_cleanup
FIELD	1394:1	1394:6	7	tif -> tif_cleanup
LEAF_NODE	1394:1	1394:1	8	tif
LEAF_NODE	1394:4	1394:4	8	->
LEAF_NODE	1394:6	1394:6	8	tif_cleanup
ASSIGN_OP	1394:18	1394:18	6	=
LEAF_NODE	1394:18	1394:18	7	=
RVAL	1394:20	1394:20	6	Fax3Cleanup
FIELD	1394:20	1394:20	7	Fax3Cleanup
LEAF_NODE	1394:20	1394:20	8	Fax3Cleanup
LEAF_NODE	1394:31	1394:31	4	;
JUMP_STATEMENT	1396:1	1396:11	3	return ( 1 ) ;
KEYWORD	1396:1	1396:1	4	return
LEAF_NODE	1396:1	1396:1	5	return
DESTINATION	1396:8	1396:8	4	( 1 )
EXPR	1396:8	1396:10	5	( 1 )
LEAF_NODE	1396:8	1396:8	6	(
FIELD	1396:9	1396:9	6	1
LEAF_NODE	1396:9	1396:9	7	1
LEAF_NODE	1396:10	1396:10	6	)
LEAF_NODE	1396:11	1396:11	4	;
LEAF_NODE	1397:0	1397:0	2	}
FUNCTION_DEF	1399:0	1420:0	1	
RETURN_TYPE	1399:0	1399:0	2	int
TYPE_NAME	1399:0	1399:0	3	int
LEAF_NODE	1399:0	1399:0	4	int
FUNCTION_NAME	1400:0	1400:0	2	TIFFInitCCITTFax3
LEAF_NODE	1400:0	1400:0	3	TIFFInitCCITTFax3
PARAMETER_LIST	1400:17	1400:39	2	( TIFF * tif , int scheme )
LEAF_NODE	1400:17	1400:17	3	(
PARAMETER_DECL	1400:18	1400:24	3	TIFF * tif
TYPE	1400:18	1400:22	4	TIFF *
TYPE_NAME	1400:18	1400:18	5	TIFF
LEAF_NODE	1400:18	1400:18	6	TIFF
POINTER	1400:22	1400:22	5	*
LEAF_NODE	1400:22	1400:22	6	*
NAME	1400:24	1400:24	4	tif
LEAF_NODE	1400:24	1400:24	5	tif
LEAF_NODE	1400:27	1400:27	3	,
PARAMETER_DECL	1400:29	1400:33	3	int scheme
TYPE	1400:29	1400:29	4	int
TYPE_NAME	1400:29	1400:29	5	int
LEAF_NODE	1400:29	1400:29	6	int
NAME	1400:33	1400:33	4	scheme
LEAF_NODE	1400:33	1400:33	5	scheme
LEAF_NODE	1400:39	1400:39	3	)
LEAF_NODE	1401:0	1401:0	2	{
STATEMENTS	1402:1	1418:3	2	
EXPR_STATEMENT	1402:1	1402:14	3	( void ) scheme ;
EXPR	1402:1	1402:8	4	( void ) scheme
LEAF_NODE	1402:1	1402:1	5	(
TYPE_NAME	1402:2	1402:2	5	void
LEAF_NODE	1402:2	1402:2	6	void
LEAF_NODE	1402:6	1402:6	5	)
FIELD	1402:8	1402:8	5	scheme
LEAF_NODE	1402:8	1402:8	6	scheme
LEAF_NODE	1402:14	1402:14	4	;
SELECTION	1403:1	1403:25	3	
KEYWORD	1403:1	1403:1	4	if
LEAF_NODE	1403:1	1403:1	5	if
LEAF_NODE	1403:4	1403:4	4	(
CONDITION	1403:5	1403:5	4	InitCCITTFax3 ( tif )
EXPR	1403:5	1403:5	5	InitCCITTFax3 ( tif )
FUNCTION_CALL	1403:5	1403:22	6	InitCCITTFax3 ( tif )
CALLEE	1403:5	1403:5	7	InitCCITTFax3
LEAF_NODE	1403:5	1403:5	8	InitCCITTFax3
LEAF_NODE	1403:18	1403:18	7	(
ARGUMENT	1403:19	1403:19	7	tif
FIELD	1403:19	1403:19	8	tif
LEAF_NODE	1403:19	1403:19	9	tif
LEAF_NODE	1403:22	1403:22	7	)
LEAF_NODE	1403:23	1403:23	4	)
STATEMENTS	1403:25	1418:1	4	
LEAF_NODE	1403:25	1403:25	5	{
STATEMENTS	1407:2	1417:2	5	
SELECTION	1407:2	1408:39	6	
KEYWORD	1407:2	1407:2	7	if
LEAF_NODE	1407:2	1407:2	8	if
LEAF_NODE	1407:5	1407:5	7	(
CONDITION	1407:6	1407:6	7	! _TIFFMergeFields ( tif , fax3Fields , TIFFArrayCount ( fax3Fields ) )
EXPR	1407:6	1407:6	8	! _TIFFMergeFields ( tif , fax3Fields , TIFFArrayCount ( fax3Fields ) )
UNARY_EXPR	1407:6	1407:7	9	! _TIFFMergeFields ( tif , fax3Fields , TIFFArrayCount ( fax3Fields ) )
UNARY_OPERATOR	1407:6	1407:6	10	!
LEAF_NODE	1407:6	1407:6	11	!
FUNCTION_CALL	1407:7	1408:36	10	_TIFFMergeFields ( tif , fax3Fields , TIFFArrayCount ( fax3Fields ) )
CALLEE	1407:7	1407:7	11	_TIFFMergeFields
LEAF_NODE	1407:7	1407:7	12	_TIFFMergeFields
LEAF_NODE	1407:23	1407:23	11	(
ARGUMENT	1407:24	1407:24	11	tif
FIELD	1407:24	1407:24	12	tif
LEAF_NODE	1407:24	1407:24	13	tif
LEAF_NODE	1407:27	1407:27	11	,
ARGUMENT	1407:29	1407:29	11	fax3Fields
FIELD	1407:29	1407:29	12	fax3Fields
LEAF_NODE	1407:29	1407:29	13	fax3Fields
LEAF_NODE	1407:39	1407:39	11	,
ARGUMENT	1408:10	1408:10	11	TIFFArrayCount ( fax3Fields )
FUNCTION_CALL	1408:10	1408:35	12	TIFFArrayCount ( fax3Fields )
CALLEE	1408:10	1408:10	13	TIFFArrayCount
LEAF_NODE	1408:10	1408:10	14	TIFFArrayCount
LEAF_NODE	1408:24	1408:24	13	(
ARGUMENT	1408:25	1408:25	13	fax3Fields
FIELD	1408:25	1408:25	14	fax3Fields
LEAF_NODE	1408:25	1408:25	15	fax3Fields
LEAF_NODE	1408:35	1408:35	13	)
LEAF_NODE	1408:36	1408:36	11	)
LEAF_NODE	1408:37	1408:37	7	)
STATEMENTS	1408:39	1412:2	7	
LEAF_NODE	1408:39	1408:39	8	{
STATEMENTS	1409:3	1411:3	8	
EXPR_STATEMENT	1409:3	1410:52	9	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitCCITTFax3" , "Merging CCITT Fax 3 codec-specific tags failed" ) ;
EXPR	1409:3	1409:3	10	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitCCITTFax3" , "Merging CCITT Fax 3 codec-specific tags failed" )
FUNCTION_CALL	1409:3	1410:51	11	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitCCITTFax3" , "Merging CCITT Fax 3 codec-specific tags failed" )
CALLEE	1409:3	1409:3	12	TIFFErrorExt
LEAF_NODE	1409:3	1409:3	13	TIFFErrorExt
LEAF_NODE	1409:15	1409:15	12	(
ARGUMENT	1409:16	1409:16	12	tif -> tif_clientdata
FIELD	1409:16	1409:21	13	tif -> tif_clientdata
LEAF_NODE	1409:16	1409:16	14	tif
LEAF_NODE	1409:19	1409:19	14	->
LEAF_NODE	1409:21	1409:21	14	tif_clientdata
LEAF_NODE	1409:35	1409:35	12	,
ARGUMENT	1409:37	1409:37	12	"TIFFInitCCITTFax3"
FIELD	1409:37	1409:37	13	"TIFFInitCCITTFax3"
LEAF_NODE	1409:37	1409:37	14	"TIFFInitCCITTFax3"
LEAF_NODE	1409:56	1409:56	12	,
ARGUMENT	1410:3	1410:3	12	"Merging CCITT Fax 3 codec-specific tags failed"
FIELD	1410:3	1410:3	13	"Merging CCITT Fax 3 codec-specific tags failed"
LEAF_NODE	1410:3	1410:3	14	"Merging CCITT Fax 3 codec-specific tags failed"
LEAF_NODE	1410:51	1410:51	12	)
LEAF_NODE	1410:52	1410:52	10	;
JUMP_STATEMENT	1411:3	1411:11	9	return 0 ;
KEYWORD	1411:3	1411:3	10	return
LEAF_NODE	1411:3	1411:3	11	return
DESTINATION	1411:10	1411:10	10	0
EXPR	1411:10	1411:10	11	0
FIELD	1411:10	1411:10	12	0
LEAF_NODE	1411:10	1411:10	13	0
LEAF_NODE	1411:11	1411:11	10	;
LEAF_NODE	1412:2	1412:2	8	}
JUMP_STATEMENT	1417:2	1417:59	6	return TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_CLASSF ) ;
KEYWORD	1417:2	1417:2	7	return
LEAF_NODE	1417:2	1417:2	8	return
DESTINATION	1417:9	1417:9	7	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_CLASSF )
EXPR	1417:9	1417:9	8	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_CLASSF )
FUNCTION_CALL	1417:9	1417:58	9	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_CLASSF )
CALLEE	1417:9	1417:9	10	TIFFSetField
LEAF_NODE	1417:9	1417:9	11	TIFFSetField
LEAF_NODE	1417:21	1417:21	10	(
ARGUMENT	1417:22	1417:22	10	tif
FIELD	1417:22	1417:22	11	tif
LEAF_NODE	1417:22	1417:22	12	tif
LEAF_NODE	1417:25	1417:25	10	,
ARGUMENT	1417:27	1417:27	10	TIFFTAG_FAXMODE
FIELD	1417:27	1417:27	11	TIFFTAG_FAXMODE
LEAF_NODE	1417:27	1417:27	12	TIFFTAG_FAXMODE
LEAF_NODE	1417:42	1417:42	10	,
ARGUMENT	1417:44	1417:44	10	FAXMODE_CLASSF
FIELD	1417:44	1417:44	11	FAXMODE_CLASSF
LEAF_NODE	1417:44	1417:44	12	FAXMODE_CLASSF
LEAF_NODE	1417:58	1417:58	10	)
LEAF_NODE	1417:59	1417:59	7	;
LEAF_NODE	1418:1	1418:1	5	}
SELECTION	1418:3	1419:2	3	
KEYWORD	1418:3	1418:3	4	else
LEAF_NODE	1418:3	1418:3	5	else
STATEMENTS	1419:2	1419:2	4	
JUMP_STATEMENT	1419:2	1419:11	5	return 01 ;
KEYWORD	1419:2	1419:2	6	return
LEAF_NODE	1419:2	1419:2	7	return
DESTINATION	1419:9	1419:9	6	01
EXPR	1419:9	1419:9	7	01
FIELD	1419:9	1419:9	8	01
LEAF_NODE	1419:9	1419:9	9	01
LEAF_NODE	1419:11	1419:11	6	;
LEAF_NODE	1420:0	1420:0	2	}
FUNCTION_DEF	1431:0	1477:0	1	
RETURN_TYPE	1431:0	1431:7	2	static int
LEAF_NODE	1431:0	1431:0	3	static
TYPE_NAME	1431:7	1431:7	3	int
LEAF_NODE	1431:7	1431:7	4	int
FUNCTION_NAME	1432:0	1432:0	2	Fax4Decode
LEAF_NODE	1432:0	1432:0	3	Fax4Decode
PARAMETER_LIST	1432:10	1432:56	2	( TIFF * tif , uint8 * buf , tmsize_t occ , uint16 s )
LEAF_NODE	1432:10	1432:10	3	(
PARAMETER_DECL	1432:11	1432:17	3	TIFF * tif
TYPE	1432:11	1432:15	4	TIFF *
TYPE_NAME	1432:11	1432:11	5	TIFF
LEAF_NODE	1432:11	1432:11	6	TIFF
POINTER	1432:15	1432:15	5	*
LEAF_NODE	1432:15	1432:15	6	*
NAME	1432:17	1432:17	4	tif
LEAF_NODE	1432:17	1432:17	5	tif
LEAF_NODE	1432:20	1432:20	3	,
PARAMETER_DECL	1432:22	1432:29	3	uint8 * buf
TYPE	1432:22	1432:27	4	uint8 *
TYPE_NAME	1432:22	1432:22	5	uint8
LEAF_NODE	1432:22	1432:22	6	uint8
POINTER	1432:27	1432:27	5	*
LEAF_NODE	1432:27	1432:27	6	*
NAME	1432:29	1432:29	4	buf
LEAF_NODE	1432:29	1432:29	5	buf
LEAF_NODE	1432:32	1432:32	3	,
PARAMETER_DECL	1432:34	1432:43	3	tmsize_t occ
TYPE	1432:34	1432:34	4	tmsize_t
TYPE_NAME	1432:34	1432:34	5	tmsize_t
LEAF_NODE	1432:34	1432:34	6	tmsize_t
NAME	1432:43	1432:43	4	occ
LEAF_NODE	1432:43	1432:43	5	occ
LEAF_NODE	1432:46	1432:46	3	,
PARAMETER_DECL	1432:48	1432:55	3	uint16 s
TYPE	1432:48	1432:48	4	uint16
TYPE_NAME	1432:48	1432:48	5	uint16
LEAF_NODE	1432:48	1432:48	6	uint16
NAME	1432:55	1432:55	4	s
LEAF_NODE	1432:55	1432:55	5	s
LEAF_NODE	1432:56	1432:56	3	)
LEAF_NODE	1433:0	1433:0	2	{
STATEMENTS	1434:1	1476:1	2	
EXPR_STATEMENT	1434:1	1434:40	3	DECLARE_STATE_2D ( tif , sp , "Fax4Decode" ) ;
EXPR	1434:1	1434:1	4	DECLARE_STATE_2D ( tif , sp , "Fax4Decode" )
FUNCTION_CALL	1434:1	1434:39	5	DECLARE_STATE_2D ( tif , sp , "Fax4Decode" )
CALLEE	1434:1	1434:1	6	DECLARE_STATE_2D
LEAF_NODE	1434:1	1434:1	7	DECLARE_STATE_2D
LEAF_NODE	1434:17	1434:17	6	(
ARGUMENT	1434:18	1434:18	6	tif
FIELD	1434:18	1434:18	7	tif
LEAF_NODE	1434:18	1434:18	8	tif
LEAF_NODE	1434:21	1434:21	6	,
ARGUMENT	1434:23	1434:23	6	sp
FIELD	1434:23	1434:23	7	sp
LEAF_NODE	1434:23	1434:23	8	sp
LEAF_NODE	1434:25	1434:25	6	,
ARGUMENT	1434:27	1434:27	6	"Fax4Decode"
FIELD	1434:27	1434:27	7	"Fax4Decode"
LEAF_NODE	1434:27	1434:27	8	"Fax4Decode"
LEAF_NODE	1434:39	1434:39	6	)
LEAF_NODE	1434:40	1434:40	4	;
EXPR_STATEMENT	1435:1	1435:9	3	( void ) s ;
EXPR	1435:1	1435:8	4	( void ) s
LEAF_NODE	1435:1	1435:1	5	(
TYPE_NAME	1435:2	1435:2	5	void
LEAF_NODE	1435:2	1435:2	6	void
LEAF_NODE	1435:6	1435:6	5	)
FIELD	1435:8	1435:8	5	s
LEAF_NODE	1435:8	1435:8	6	s
LEAF_NODE	1435:9	1435:9	4	;
SELECTION	1436:1	1437:1	3	
KEYWORD	1436:1	1436:1	4	if
LEAF_NODE	1436:1	1436:1	5	if
LEAF_NODE	1436:4	1436:4	4	(
CONDITION	1436:5	1436:5	4	occ % sp -> b . rowbytes
EXPR	1436:5	1436:11	5	occ % sp -> b . rowbytes
FIELD	1436:5	1436:5	6	occ
LEAF_NODE	1436:5	1436:5	7	occ
LEAF_NODE	1436:9	1436:9	6	%
FIELD	1436:11	1436:17	6	sp -> b . rowbytes
LEAF_NODE	1436:11	1436:11	7	sp
LEAF_NODE	1436:13	1436:13	7	->
LEAF_NODE	1436:15	1436:15	7	b
LEAF_NODE	1436:16	1436:16	7	.
LEAF_NODE	1436:17	1436:17	7	rowbytes
LEAF_NODE	1436:25	1436:25	4	)
STATEMENTS	1437:1	1440:1	4	
LEAF_NODE	1437:1	1437:1	5	{
STATEMENTS	1438:2	1439:2	5	
EXPR_STATEMENT	1438:2	1438:82	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" ) ;
EXPR	1438:2	1438:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
FUNCTION_CALL	1438:2	1438:81	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
CALLEE	1438:2	1438:2	9	TIFFErrorExt
LEAF_NODE	1438:2	1438:2	10	TIFFErrorExt
LEAF_NODE	1438:14	1438:14	9	(
ARGUMENT	1438:15	1438:15	9	tif -> tif_clientdata
FIELD	1438:15	1438:20	10	tif -> tif_clientdata
LEAF_NODE	1438:15	1438:15	11	tif
LEAF_NODE	1438:18	1438:18	11	->
LEAF_NODE	1438:20	1438:20	11	tif_clientdata
LEAF_NODE	1438:34	1438:34	9	,
ARGUMENT	1438:36	1438:36	9	module
FIELD	1438:36	1438:36	10	module
LEAF_NODE	1438:36	1438:36	11	module
LEAF_NODE	1438:42	1438:42	9	,
ARGUMENT	1438:44	1438:44	9	"Fractional scanlines cannot be read"
FIELD	1438:44	1438:44	10	"Fractional scanlines cannot be read"
LEAF_NODE	1438:44	1438:44	11	"Fractional scanlines cannot be read"
LEAF_NODE	1438:81	1438:81	9	)
LEAF_NODE	1438:82	1438:82	7	;
JUMP_STATEMENT	1439:2	1439:13	6	return ( - 1 ) ;
KEYWORD	1439:2	1439:2	7	return
LEAF_NODE	1439:2	1439:2	8	return
DESTINATION	1439:9	1439:9	7	( - 1 )
EXPR	1439:9	1439:12	8	( - 1 )
LEAF_NODE	1439:9	1439:9	9	(
UNARY_EXPR	1439:10	1439:11	9	- 1
UNARY_OPERATOR	1439:10	1439:10	10	-
LEAF_NODE	1439:10	1439:10	11	-
FIELD	1439:11	1439:11	10	1
LEAF_NODE	1439:11	1439:11	11	1
LEAF_NODE	1439:12	1439:12	9	)
LEAF_NODE	1439:13	1439:13	7	;
LEAF_NODE	1440:1	1440:1	5	}
EXPR_STATEMENT	1441:1	1441:21	3	CACHE_STATE ( tif , sp ) ;
EXPR	1441:1	1441:1	4	CACHE_STATE ( tif , sp )
FUNCTION_CALL	1441:1	1441:20	5	CACHE_STATE ( tif , sp )
CALLEE	1441:1	1441:1	6	CACHE_STATE
LEAF_NODE	1441:1	1441:1	7	CACHE_STATE
LEAF_NODE	1441:12	1441:12	6	(
ARGUMENT	1441:13	1441:13	6	tif
FIELD	1441:13	1441:13	7	tif
LEAF_NODE	1441:13	1441:13	8	tif
LEAF_NODE	1441:16	1441:16	6	,
ARGUMENT	1441:18	1441:18	6	sp
FIELD	1441:18	1441:18	7	sp
LEAF_NODE	1441:18	1441:18	8	sp
LEAF_NODE	1441:20	1441:20	6	)
LEAF_NODE	1441:21	1441:21	4	;
ITERATION	1442:1	1442:17	3	
KEYWORD	1442:1	1442:1	4	while
LEAF_NODE	1442:1	1442:1	5	while
LEAF_NODE	1442:7	1442:7	4	(
CONDITION	1442:8	1442:8	4	occ > 0
EXPR	1442:8	1442:14	5	occ > 0
FIELD	1442:8	1442:8	6	occ
LEAF_NODE	1442:8	1442:8	7	occ
REL_OPERATOR	1442:12	1442:12	6	>
LEAF_NODE	1442:12	1442:12	7	>
FIELD	1442:14	1442:14	6	0
LEAF_NODE	1442:14	1442:14	7	0
LEAF_NODE	1442:15	1442:15	4	)
STATEMENTS	1442:17	1474:1	4	
LEAF_NODE	1442:17	1442:17	5	{
STATEMENTS	1443:2	1473:2	5	
EXPR_STATEMENT	1443:2	1443:8	6	a0 = 0 ;
EXPR	1443:2	1443:2	7	a0 = 0
ASSIGN	1443:2	1443:7	8	a0 = 0
LVAL	1443:2	1443:2	9	a0
FIELD	1443:2	1443:2	10	a0
LEAF_NODE	1443:2	1443:2	11	a0
ASSIGN_OP	1443:5	1443:5	9	=
LEAF_NODE	1443:5	1443:5	10	=
RVAL	1443:7	1443:7	9	0
FIELD	1443:7	1443:7	10	0
LEAF_NODE	1443:7	1443:7	11	0
LEAF_NODE	1443:8	1443:8	7	;
EXPR_STATEMENT	1444:2	1444:15	6	RunLength = 0 ;
EXPR	1444:2	1444:2	7	RunLength = 0
ASSIGN	1444:2	1444:14	8	RunLength = 0
LVAL	1444:2	1444:2	9	RunLength
FIELD	1444:2	1444:2	10	RunLength
LEAF_NODE	1444:2	1444:2	11	RunLength
ASSIGN_OP	1444:12	1444:12	9	=
LEAF_NODE	1444:12	1444:12	10	=
RVAL	1444:14	1444:14	9	0
FIELD	1444:14	1444:14	10	0
LEAF_NODE	1444:14	1444:14	11	0
LEAF_NODE	1444:15	1444:15	7	;
EXPR_STATEMENT	1445:2	1445:28	6	pa = thisrun = sp -> curruns ;
EXPR	1445:2	1445:2	7	pa = thisrun = sp -> curruns
ASSIGN	1445:2	1445:7	8	pa = thisrun = sp -> curruns
LVAL	1445:2	1445:2	9	pa
FIELD	1445:2	1445:2	10	pa
LEAF_NODE	1445:2	1445:2	11	pa
ASSIGN_OP	1445:5	1445:5	9	=
LEAF_NODE	1445:5	1445:5	10	=
RVAL	1445:7	1445:7	9	thisrun = sp -> curruns
ASSIGN	1445:7	1445:17	10	thisrun = sp -> curruns
LVAL	1445:7	1445:7	11	thisrun
FIELD	1445:7	1445:7	12	thisrun
LEAF_NODE	1445:7	1445:7	13	thisrun
ASSIGN_OP	1445:15	1445:15	11	=
LEAF_NODE	1445:15	1445:15	12	=
RVAL	1445:17	1445:17	11	sp -> curruns
FIELD	1445:17	1445:21	12	sp -> curruns
LEAF_NODE	1445:17	1445:17	13	sp
LEAF_NODE	1445:19	1445:19	13	->
LEAF_NODE	1445:21	1445:21	13	curruns
LEAF_NODE	1445:28	1445:28	7	;
EXPR_STATEMENT	1446:2	1446:18	6	pb = sp -> refruns ;
EXPR	1446:2	1446:2	7	pb = sp -> refruns
ASSIGN	1446:2	1446:7	8	pb = sp -> refruns
LVAL	1446:2	1446:2	9	pb
FIELD	1446:2	1446:2	10	pb
LEAF_NODE	1446:2	1446:2	11	pb
ASSIGN_OP	1446:5	1446:5	9	=
LEAF_NODE	1446:5	1446:5	10	=
RVAL	1446:7	1446:7	9	sp -> refruns
FIELD	1446:7	1446:11	10	sp -> refruns
LEAF_NODE	1446:7	1446:7	11	sp
LEAF_NODE	1446:9	1446:9	11	->
LEAF_NODE	1446:11	1446:11	11	refruns
LEAF_NODE	1446:18	1446:18	7	;
EXPR_STATEMENT	1447:2	1447:12	6	b1 = * pb ++ ;
EXPR	1447:2	1447:2	7	b1 = * pb ++
ASSIGN	1447:2	1447:7	8	b1 = * pb ++
LVAL	1447:2	1447:2	9	b1
FIELD	1447:2	1447:2	10	b1
LEAF_NODE	1447:2	1447:2	11	b1
ASSIGN_OP	1447:5	1447:5	9	=
LEAF_NODE	1447:5	1447:5	10	=
RVAL	1447:7	1447:7	9	* pb ++
UNARY_EXPR	1447:7	1447:8	10	* pb ++
UNARY_OPERATOR	1447:7	1447:7	11	*
LEAF_NODE	1447:7	1447:7	12	*
FIELD	1447:8	1447:10	11	pb ++
LEAF_NODE	1447:8	1447:8	12	pb
LEAF_NODE	1447:10	1447:10	12	++
LEAF_NODE	1447:12	1447:12	7	;
EXPR_STATEMENT	1449:2	1449:62	6	printf ( "\nBitAcc=%08X, BitsAvail = %d\n" , BitAcc , BitsAvail ) ;
EXPR	1449:2	1449:2	7	printf ( "\nBitAcc=%08X, BitsAvail = %d\n" , BitAcc , BitsAvail )
FUNCTION_CALL	1449:2	1449:61	8	printf ( "\nBitAcc=%08X, BitsAvail = %d\n" , BitAcc , BitsAvail )
CALLEE	1449:2	1449:2	9	printf
LEAF_NODE	1449:2	1449:2	10	printf
LEAF_NODE	1449:8	1449:8	9	(
ARGUMENT	1449:9	1449:9	9	"\nBitAcc=%08X, BitsAvail = %d\n"
FIELD	1449:9	1449:9	10	"\nBitAcc=%08X, BitsAvail = %d\n"
LEAF_NODE	1449:9	1449:9	11	"\nBitAcc=%08X, BitsAvail = %d\n"
LEAF_NODE	1449:42	1449:42	9	,
ARGUMENT	1449:44	1449:44	9	BitAcc
FIELD	1449:44	1449:44	10	BitAcc
LEAF_NODE	1449:44	1449:44	11	BitAcc
LEAF_NODE	1449:50	1449:50	9	,
ARGUMENT	1449:52	1449:52	9	BitsAvail
FIELD	1449:52	1449:52	10	BitsAvail
LEAF_NODE	1449:52	1449:52	11	BitsAvail
LEAF_NODE	1449:61	1449:61	9	)
LEAF_NODE	1449:62	1449:62	7	;
EXPR_STATEMENT	1450:2	1450:51	6	printf ( "-------------------- %d\n" , tif -> tif_row ) ;
EXPR	1450:2	1450:2	7	printf ( "-------------------- %d\n" , tif -> tif_row )
FUNCTION_CALL	1450:2	1450:50	8	printf ( "-------------------- %d\n" , tif -> tif_row )
CALLEE	1450:2	1450:2	9	printf
LEAF_NODE	1450:2	1450:2	10	printf
LEAF_NODE	1450:8	1450:8	9	(
ARGUMENT	1450:9	1450:9	9	"-------------------- %d\n"
FIELD	1450:9	1450:9	10	"-------------------- %d\n"
LEAF_NODE	1450:9	1450:9	11	"-------------------- %d\n"
LEAF_NODE	1450:36	1450:36	9	,
ARGUMENT	1450:38	1450:38	9	tif -> tif_row
FIELD	1450:38	1450:43	10	tif -> tif_row
LEAF_NODE	1450:38	1450:38	11	tif
LEAF_NODE	1450:41	1450:41	11	->
LEAF_NODE	1450:43	1450:43	11	tif_row
LEAF_NODE	1450:50	1450:50	9	)
LEAF_NODE	1450:51	1450:51	7	;
EXPR_STATEMENT	1451:2	1451:16	6	fflush ( stdout ) ;
EXPR	1451:2	1451:2	7	fflush ( stdout )
FUNCTION_CALL	1451:2	1451:15	8	fflush ( stdout )
CALLEE	1451:2	1451:2	9	fflush
LEAF_NODE	1451:2	1451:2	10	fflush
LEAF_NODE	1451:8	1451:8	9	(
ARGUMENT	1451:9	1451:9	9	stdout
FIELD	1451:9	1451:9	10	stdout
LEAF_NODE	1451:9	1451:9	11	stdout
LEAF_NODE	1451:15	1451:15	9	)
LEAF_NODE	1451:16	1451:16	7	;
EXPR_STATEMENT	1453:2	1453:17	6	EXPAND2D ( EOFG4 ) ;
EXPR	1453:2	1453:2	7	EXPAND2D ( EOFG4 )
FUNCTION_CALL	1453:2	1453:16	8	EXPAND2D ( EOFG4 )
CALLEE	1453:2	1453:2	9	EXPAND2D
LEAF_NODE	1453:2	1453:2	10	EXPAND2D
LEAF_NODE	1453:10	1453:10	9	(
ARGUMENT	1453:11	1453:11	9	EOFG4
FIELD	1453:11	1453:11	10	EOFG4
LEAF_NODE	1453:11	1453:11	11	EOFG4
LEAF_NODE	1453:16	1453:16	9	)
LEAF_NODE	1453:17	1453:17	7	;
SELECTION	1454:16	1455:20	6	
KEYWORD	1454:16	1454:16	7	if
LEAF_NODE	1454:16	1454:16	8	if
LEAF_NODE	1454:19	1454:19	7	(
CONDITION	1454:20	1454:20	7	EOLcnt
EXPR	1454:20	1454:20	8	EOLcnt
FIELD	1454:20	1454:20	9	EOLcnt
LEAF_NODE	1454:20	1454:20	10	EOLcnt
LEAF_NODE	1454:26	1454:26	7	)
STATEMENTS	1455:20	1455:20	7	
JUMP_STATEMENT	1455:20	1455:30	8	goto EOFG4 ;
KEYWORD	1455:20	1455:20	9	goto
LEAF_NODE	1455:20	1455:20	10	goto
DESTINATION	1455:25	1455:25	9	EOFG4
LEAF_NODE	1455:25	1455:25	10	EOFG4
LEAF_NODE	1455:30	1455:30	9	;
EXPR_STATEMENT	1456:2	1456:38	6	( * sp -> fill ) ( buf , thisrun , pa , lastx ) ;
EXPR	1456:2	1456:2	7	( * sp -> fill ) ( buf , thisrun , pa , lastx )
FUNCTION_CALL	1456:2	1456:37	8	( * sp -> fill ) ( buf , thisrun , pa , lastx )
CALLEE	1456:2	1456:12	9	( * sp -> fill )
LEAF_NODE	1456:2	1456:2	10	(
UNARY_EXPR	1456:3	1456:4	10	* sp -> fill
UNARY_OPERATOR	1456:3	1456:3	11	*
LEAF_NODE	1456:3	1456:3	12	*
FIELD	1456:4	1456:8	11	sp -> fill
LEAF_NODE	1456:4	1456:4	12	sp
LEAF_NODE	1456:6	1456:6	12	->
LEAF_NODE	1456:8	1456:8	12	fill
LEAF_NODE	1456:12	1456:12	10	)
LEAF_NODE	1456:13	1456:13	9	(
ARGUMENT	1456:14	1456:14	9	buf
FIELD	1456:14	1456:14	10	buf
LEAF_NODE	1456:14	1456:14	11	buf
LEAF_NODE	1456:17	1456:17	9	,
ARGUMENT	1456:19	1456:19	9	thisrun
FIELD	1456:19	1456:19	10	thisrun
LEAF_NODE	1456:19	1456:19	11	thisrun
LEAF_NODE	1456:26	1456:26	9	,
ARGUMENT	1456:28	1456:28	9	pa
FIELD	1456:28	1456:28	10	pa
LEAF_NODE	1456:28	1456:28	11	pa
LEAF_NODE	1456:30	1456:30	9	,
ARGUMENT	1456:32	1456:32	9	lastx
FIELD	1456:32	1456:32	10	lastx
LEAF_NODE	1456:32	1456:32	11	lastx
LEAF_NODE	1456:37	1456:37	9	)
LEAF_NODE	1456:38	1456:38	7	;
EXPR_STATEMENT	1457:2	1457:13	6	SETVALUE ( 0 ) ;
EXPR	1457:2	1457:2	7	SETVALUE ( 0 )
FUNCTION_CALL	1457:2	1457:12	8	SETVALUE ( 0 )
CALLEE	1457:2	1457:2	9	SETVALUE
LEAF_NODE	1457:2	1457:2	10	SETVALUE
LEAF_NODE	1457:10	1457:10	9	(
ARGUMENT	1457:11	1457:11	9	0
FIELD	1457:11	1457:11	10	0
LEAF_NODE	1457:11	1457:11	11	0
LEAF_NODE	1457:12	1457:12	9	)
LEAF_NODE	1457:13	1457:13	7	;
LEAF_NODE	1458:2	1458:2	6	SWAP
LEAF_NODE	1458:6	1458:6	6	(
LEAF_NODE	1458:7	1458:7	6	uint32
LEAF_NODE	1458:13	1458:13	6	*
LEAF_NODE	1458:14	1458:14	6	,
LEAF_NODE	1458:16	1458:16	6	sp
LEAF_NODE	1458:18	1458:18	6	->
LEAF_NODE	1458:20	1458:20	6	curruns
LEAF_NODE	1458:27	1458:27	6	,
LEAF_NODE	1458:29	1458:29	6	sp
LEAF_NODE	1458:31	1458:31	6	->
LEAF_NODE	1458:33	1458:33	6	refruns
LEAF_NODE	1458:40	1458:40	6	)
LEAF_NODE	1458:41	1458:41	6	;
EXPR_STATEMENT	1459:2	1459:23	6	buf += sp -> b . rowbytes ;
EXPR	1459:2	1459:2	7	buf += sp -> b . rowbytes
ASSIGN	1459:2	1459:9	8	buf += sp -> b . rowbytes
LVAL	1459:2	1459:2	9	buf
FIELD	1459:2	1459:2	10	buf
LEAF_NODE	1459:2	1459:2	11	buf
ASSIGN_OP	1459:6	1459:6	9	+=
LEAF_NODE	1459:6	1459:6	10	+=
RVAL	1459:9	1459:9	9	sp -> b . rowbytes
FIELD	1459:9	1459:15	10	sp -> b . rowbytes
LEAF_NODE	1459:9	1459:9	11	sp
LEAF_NODE	1459:11	1459:11	11	->
LEAF_NODE	1459:13	1459:13	11	b
LEAF_NODE	1459:14	1459:14	11	.
LEAF_NODE	1459:15	1459:15	11	rowbytes
LEAF_NODE	1459:23	1459:23	7	;
EXPR_STATEMENT	1460:2	1460:23	6	occ -= sp -> b . rowbytes ;
EXPR	1460:2	1460:2	7	occ -= sp -> b . rowbytes
ASSIGN	1460:2	1460:9	8	occ -= sp -> b . rowbytes
LVAL	1460:2	1460:2	9	occ
FIELD	1460:2	1460:2	10	occ
LEAF_NODE	1460:2	1460:2	11	occ
ASSIGN_OP	1460:6	1460:6	9	-=
LEAF_NODE	1460:6	1460:6	10	-=
RVAL	1460:9	1460:9	9	sp -> b . rowbytes
FIELD	1460:9	1460:15	10	sp -> b . rowbytes
LEAF_NODE	1460:9	1460:9	11	sp
LEAF_NODE	1460:11	1460:11	11	->
LEAF_NODE	1460:13	1460:13	11	b
LEAF_NODE	1460:14	1460:14	11	.
LEAF_NODE	1460:15	1460:15	11	rowbytes
LEAF_NODE	1460:23	1460:23	7	;
EXPR_STATEMENT	1461:2	1461:12	6	sp -> line ++ ;
EXPR	1461:2	1461:2	7	sp -> line ++
FIELD	1461:2	1461:10	8	sp -> line ++
LEAF_NODE	1461:2	1461:2	9	sp
LEAF_NODE	1461:4	1461:4	9	->
LEAF_NODE	1461:6	1461:6	9	line
LEAF_NODE	1461:10	1461:10	9	++
LEAF_NODE	1461:12	1461:12	7	;
JUMP_STATEMENT	1462:2	1462:10	6	continue DESTINATION ;
KEYWORD	1462:2	1462:2	7	continue
LEAF_NODE	1462:2	1462:2	8	continue
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1462:10	1462:10	7	;
LABEL	1463:1	1463:6	6	EOFG4 :
LEAF_NODE	1463:1	1463:1	7	EOFG4
LEAF_NODE	1463:6	1463:6	7	:
EXPR_STATEMENT	1464:16	1464:39	6	NeedBits16 ( 13 , BADG4 ) ;
EXPR	1464:16	1464:16	7	NeedBits16 ( 13 , BADG4 )
FUNCTION_CALL	1464:16	1464:38	8	NeedBits16 ( 13 , BADG4 )
CALLEE	1464:16	1464:16	9	NeedBits16
LEAF_NODE	1464:16	1464:16	10	NeedBits16
LEAF_NODE	1464:26	1464:26	9	(
ARGUMENT	1464:28	1464:28	9	13
FIELD	1464:28	1464:28	10	13
LEAF_NODE	1464:28	1464:28	11	13
LEAF_NODE	1464:30	1464:30	9	,
ARGUMENT	1464:32	1464:32	9	BADG4
FIELD	1464:32	1464:32	10	BADG4
LEAF_NODE	1464:32	1464:32	11	BADG4
LEAF_NODE	1464:38	1464:38	9	)
LEAF_NODE	1464:39	1464:39	7	;
LABEL	1465:8	1465:13	6	BADG4 :
LEAF_NODE	1465:8	1465:8	7	BADG4
LEAF_NODE	1465:13	1465:13	7	:
SELECTION	1467:16	1468:20	6	
KEYWORD	1467:16	1467:16	7	if
LEAF_NODE	1467:16	1467:16	8	if
LEAF_NODE	1467:18	1467:18	7	(
CONDITION	1467:20	1467:20	7	GetBits ( 13 ) != 0x1001
EXPR	1467:20	1467:35	8	GetBits ( 13 ) != 0x1001
FUNCTION_CALL	1467:20	1467:30	9	GetBits ( 13 )
CALLEE	1467:20	1467:20	10	GetBits
LEAF_NODE	1467:20	1467:20	11	GetBits
LEAF_NODE	1467:27	1467:27	10	(
ARGUMENT	1467:28	1467:28	10	13
FIELD	1467:28	1467:28	11	13
LEAF_NODE	1467:28	1467:28	12	13
LEAF_NODE	1467:30	1467:30	10	)
EQ_OPERATOR	1467:32	1467:32	9	!=
LEAF_NODE	1467:32	1467:32	10	!=
FIELD	1467:35	1467:35	9	0x1001
LEAF_NODE	1467:35	1467:35	10	0x1001
LEAF_NODE	1467:42	1467:42	7	)
STATEMENTS	1468:20	1468:20	7	
EXPR_STATEMENT	1468:20	1468:49	8	fputs ( "Bad EOFB\n" , stderr ) ;
EXPR	1468:20	1468:20	9	fputs ( "Bad EOFB\n" , stderr )
FUNCTION_CALL	1468:20	1468:48	10	fputs ( "Bad EOFB\n" , stderr )
CALLEE	1468:20	1468:20	11	fputs
LEAF_NODE	1468:20	1468:20	12	fputs
LEAF_NODE	1468:25	1468:25	11	(
ARGUMENT	1468:27	1468:27	11	"Bad EOFB\n"
FIELD	1468:27	1468:27	12	"Bad EOFB\n"
LEAF_NODE	1468:27	1468:27	13	"Bad EOFB\n"
LEAF_NODE	1468:39	1468:39	11	,
ARGUMENT	1468:41	1468:41	11	stderr
FIELD	1468:41	1468:41	12	stderr
LEAF_NODE	1468:41	1468:41	13	stderr
LEAF_NODE	1468:48	1468:48	11	)
LEAF_NODE	1468:49	1468:49	9	;
EXPR_STATEMENT	1470:16	1470:29	6	ClrBits ( 13 ) ;
EXPR	1470:16	1470:16	7	ClrBits ( 13 )
FUNCTION_CALL	1470:16	1470:28	8	ClrBits ( 13 )
CALLEE	1470:16	1470:16	9	ClrBits
LEAF_NODE	1470:16	1470:16	10	ClrBits
LEAF_NODE	1470:23	1470:23	9	(
ARGUMENT	1470:25	1470:25	9	13
FIELD	1470:25	1470:25	10	13
LEAF_NODE	1470:25	1470:25	11	13
LEAF_NODE	1470:28	1470:28	9	)
LEAF_NODE	1470:29	1470:29	7	;
EXPR_STATEMENT	1471:2	1471:38	6	( * sp -> fill ) ( buf , thisrun , pa , lastx ) ;
EXPR	1471:2	1471:2	7	( * sp -> fill ) ( buf , thisrun , pa , lastx )
FUNCTION_CALL	1471:2	1471:37	8	( * sp -> fill ) ( buf , thisrun , pa , lastx )
CALLEE	1471:2	1471:12	9	( * sp -> fill )
LEAF_NODE	1471:2	1471:2	10	(
UNARY_EXPR	1471:3	1471:4	10	* sp -> fill
UNARY_OPERATOR	1471:3	1471:3	11	*
LEAF_NODE	1471:3	1471:3	12	*
FIELD	1471:4	1471:8	11	sp -> fill
LEAF_NODE	1471:4	1471:4	12	sp
LEAF_NODE	1471:6	1471:6	12	->
LEAF_NODE	1471:8	1471:8	12	fill
LEAF_NODE	1471:12	1471:12	10	)
LEAF_NODE	1471:13	1471:13	9	(
ARGUMENT	1471:14	1471:14	9	buf
FIELD	1471:14	1471:14	10	buf
LEAF_NODE	1471:14	1471:14	11	buf
LEAF_NODE	1471:17	1471:17	9	,
ARGUMENT	1471:19	1471:19	9	thisrun
FIELD	1471:19	1471:19	10	thisrun
LEAF_NODE	1471:19	1471:19	11	thisrun
LEAF_NODE	1471:26	1471:26	9	,
ARGUMENT	1471:28	1471:28	9	pa
FIELD	1471:28	1471:28	10	pa
LEAF_NODE	1471:28	1471:28	11	pa
LEAF_NODE	1471:30	1471:30	9	,
ARGUMENT	1471:32	1471:32	9	lastx
FIELD	1471:32	1471:32	10	lastx
LEAF_NODE	1471:32	1471:32	11	lastx
LEAF_NODE	1471:37	1471:37	9	)
LEAF_NODE	1471:38	1471:38	7	;
EXPR_STATEMENT	1472:2	1472:24	6	UNCACHE_STATE ( tif , sp ) ;
EXPR	1472:2	1472:2	7	UNCACHE_STATE ( tif , sp )
FUNCTION_CALL	1472:2	1472:23	8	UNCACHE_STATE ( tif , sp )
CALLEE	1472:2	1472:2	9	UNCACHE_STATE
LEAF_NODE	1472:2	1472:2	10	UNCACHE_STATE
LEAF_NODE	1472:15	1472:15	9	(
ARGUMENT	1472:16	1472:16	9	tif
FIELD	1472:16	1472:16	10	tif
LEAF_NODE	1472:16	1472:16	11	tif
LEAF_NODE	1472:19	1472:19	9	,
ARGUMENT	1472:21	1472:21	9	sp
FIELD	1472:21	1472:21	10	sp
LEAF_NODE	1472:21	1472:21	11	sp
LEAF_NODE	1472:23	1472:23	9	)
LEAF_NODE	1472:24	1472:24	7	;
JUMP_STATEMENT	1473:2	1473:29	6	return ( sp -> line ? 1 : - 1 ) ;
KEYWORD	1473:2	1473:2	7	return
LEAF_NODE	1473:2	1473:2	8	return
DESTINATION	1473:9	1473:9	7	( sp -> line ? 1 : - 1 )
EXPR	1473:9	1473:28	8	( sp -> line ? 1 : - 1 )
LEAF_NODE	1473:9	1473:9	9	(
COND_EXPR	1473:11	1473:26	9	sp -> line ? 1 : - 1
CONDITION	1473:11	1473:11	10	sp -> line
FIELD	1473:11	1473:15	11	sp -> line
LEAF_NODE	1473:11	1473:11	12	sp
LEAF_NODE	1473:13	1473:13	12	->
LEAF_NODE	1473:15	1473:15	12	line
LEAF_NODE	1473:20	1473:20	10	?
EXPR	1473:22	1473:22	10	1
FIELD	1473:22	1473:22	11	1
LEAF_NODE	1473:22	1473:22	12	1
LEAF_NODE	1473:24	1473:24	10	:
UNARY_EXPR	1473:26	1473:27	10	- 1
UNARY_OPERATOR	1473:26	1473:26	11	-
LEAF_NODE	1473:26	1473:26	12	-
FIELD	1473:27	1473:27	11	1
LEAF_NODE	1473:27	1473:27	12	1
LEAF_NODE	1473:28	1473:28	9	)
LEAF_NODE	1473:29	1473:29	7	;
LEAF_NODE	1474:1	1474:1	5	}
EXPR_STATEMENT	1475:1	1475:23	3	UNCACHE_STATE ( tif , sp ) ;
EXPR	1475:1	1475:1	4	UNCACHE_STATE ( tif , sp )
FUNCTION_CALL	1475:1	1475:22	5	UNCACHE_STATE ( tif , sp )
CALLEE	1475:1	1475:1	6	UNCACHE_STATE
LEAF_NODE	1475:1	1475:1	7	UNCACHE_STATE
LEAF_NODE	1475:14	1475:14	6	(
ARGUMENT	1475:15	1475:15	6	tif
FIELD	1475:15	1475:15	7	tif
LEAF_NODE	1475:15	1475:15	8	tif
LEAF_NODE	1475:18	1475:18	6	,
ARGUMENT	1475:20	1475:20	6	sp
FIELD	1475:20	1475:20	7	sp
LEAF_NODE	1475:20	1475:20	8	sp
LEAF_NODE	1475:22	1475:22	6	)
LEAF_NODE	1475:23	1475:23	4	;
JUMP_STATEMENT	1476:1	1476:11	3	return ( 1 ) ;
KEYWORD	1476:1	1476:1	4	return
LEAF_NODE	1476:1	1476:1	5	return
DESTINATION	1476:8	1476:8	4	( 1 )
EXPR	1476:8	1476:10	5	( 1 )
LEAF_NODE	1476:8	1476:8	6	(
FIELD	1476:9	1476:9	6	1
LEAF_NODE	1476:9	1476:9	7	1
LEAF_NODE	1476:10	1476:10	6	)
LEAF_NODE	1476:11	1476:11	4	;
LEAF_NODE	1477:0	1477:0	2	}
FUNCTION_DEF	1483:0	1502:0	1	
RETURN_TYPE	1483:0	1483:7	2	static int
LEAF_NODE	1483:0	1483:0	3	static
TYPE_NAME	1483:7	1483:7	3	int
LEAF_NODE	1483:7	1483:7	4	int
FUNCTION_NAME	1484:0	1484:0	2	Fax4Encode
LEAF_NODE	1484:0	1484:0	3	Fax4Encode
PARAMETER_LIST	1484:10	1484:54	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	1484:10	1484:10	3	(
PARAMETER_DECL	1484:11	1484:17	3	TIFF * tif
TYPE	1484:11	1484:15	4	TIFF *
TYPE_NAME	1484:11	1484:11	5	TIFF
LEAF_NODE	1484:11	1484:11	6	TIFF
POINTER	1484:15	1484:15	5	*
LEAF_NODE	1484:15	1484:15	6	*
NAME	1484:17	1484:17	4	tif
LEAF_NODE	1484:17	1484:17	5	tif
LEAF_NODE	1484:20	1484:20	3	,
PARAMETER_DECL	1484:22	1484:29	3	uint8 * bp
TYPE	1484:22	1484:27	4	uint8 *
TYPE_NAME	1484:22	1484:22	5	uint8
LEAF_NODE	1484:22	1484:22	6	uint8
POINTER	1484:27	1484:27	5	*
LEAF_NODE	1484:27	1484:27	6	*
NAME	1484:29	1484:29	4	bp
LEAF_NODE	1484:29	1484:29	5	bp
LEAF_NODE	1484:31	1484:31	3	,
PARAMETER_DECL	1484:33	1484:42	3	tmsize_t cc
TYPE	1484:33	1484:33	4	tmsize_t
TYPE_NAME	1484:33	1484:33	5	tmsize_t
LEAF_NODE	1484:33	1484:33	6	tmsize_t
NAME	1484:42	1484:42	4	cc
LEAF_NODE	1484:42	1484:42	5	cc
LEAF_NODE	1484:44	1484:44	3	,
PARAMETER_DECL	1484:46	1484:53	3	uint16 s
TYPE	1484:46	1484:46	4	uint16
TYPE_NAME	1484:46	1484:46	5	uint16
LEAF_NODE	1484:46	1484:46	6	uint16
NAME	1484:53	1484:53	4	s
LEAF_NODE	1484:53	1484:53	5	s
LEAF_NODE	1484:54	1484:54	3	)
LEAF_NODE	1485:0	1485:0	2	{
STATEMENTS	1486:1	1501:1	2	
LEAF_NODE	1486:1	1486:1	3	static
SIMPLE_DECL	1486:8	1486:42	3	const char [ ] module ; module = "Fax4Encode" ;
VAR_DECL	1486:8	1486:19	4	const char [ ] module ; module = "Fax4Encode"
TYPE	1486:8	1486:25	5	const char [ ]
TYPE_NAME	1486:8	1486:14	6	const char
LEAF_NODE	1486:8	1486:8	7	const
LEAF_NODE	1486:14	1486:14	7	char
TYPE_SUFFIX	1486:25	1486:26	6	[ ]
LEAF_NODE	1486:25	1486:25	7	[
LEAF_NODE	1486:26	1486:26	7	]
NAME	1486:19	1486:19	5	module
LEAF_NODE	1486:19	1486:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1486:19	1486:19	5	module = "Fax4Encode"
ASSIGN	1486:19	1486:30	6	module = "Fax4Encode"
LVAL	1486:19	1486:19	7	module
NAME	1486:19	1486:19	8	module
LEAF_NODE	1486:19	1486:19	9	module
ASSIGN_OP	1486:28	1486:28	7	=
LEAF_NODE	1486:28	1486:28	8	=
RVAL	1486:30	1486:30	7	"Fax4Encode"
FIELD	1486:30	1486:30	8	"Fax4Encode"
LEAF_NODE	1486:30	1486:30	9	"Fax4Encode"
LEAF_NODE	1486:42	1486:42	4	;
SIMPLE_DECL	1487:1	1487:39	3	Fax3CodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	1487:1	1487:17	4	Fax3CodecState * sp ; sp = EncoderState ( tif )
TYPE	1487:1	1487:16	5	Fax3CodecState *
TYPE_NAME	1487:1	1487:1	6	Fax3CodecState
LEAF_NODE	1487:1	1487:1	7	Fax3CodecState
POINTER	1487:16	1487:16	6	*
LEAF_NODE	1487:16	1487:16	7	*
NAME	1487:17	1487:17	5	sp
LEAF_NODE	1487:17	1487:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1487:17	1487:17	5	sp = EncoderState ( tif )
ASSIGN	1487:17	1487:22	6	sp = EncoderState ( tif )
LVAL	1487:17	1487:17	7	sp
NAME	1487:17	1487:17	8	sp
LEAF_NODE	1487:17	1487:17	9	sp
ASSIGN_OP	1487:20	1487:20	7	=
LEAF_NODE	1487:20	1487:20	8	=
RVAL	1487:22	1487:22	7	EncoderState ( tif )
FUNCTION_CALL	1487:22	1487:38	8	EncoderState ( tif )
CALLEE	1487:22	1487:22	9	EncoderState
LEAF_NODE	1487:22	1487:22	10	EncoderState
LEAF_NODE	1487:34	1487:34	9	(
ARGUMENT	1487:35	1487:35	9	tif
FIELD	1487:35	1487:35	10	tif
LEAF_NODE	1487:35	1487:35	11	tif
LEAF_NODE	1487:38	1487:38	9	)
LEAF_NODE	1487:39	1487:39	4	;
EXPR_STATEMENT	1488:1	1488:9	3	( void ) s ;
EXPR	1488:1	1488:8	4	( void ) s
LEAF_NODE	1488:1	1488:1	5	(
TYPE_NAME	1488:2	1488:2	5	void
LEAF_NODE	1488:2	1488:2	6	void
LEAF_NODE	1488:6	1488:6	5	)
FIELD	1488:8	1488:8	5	s
LEAF_NODE	1488:8	1488:8	6	s
LEAF_NODE	1488:9	1488:9	4	;
SELECTION	1489:1	1490:1	3	
KEYWORD	1489:1	1489:1	4	if
LEAF_NODE	1489:1	1489:1	5	if
LEAF_NODE	1489:4	1489:4	4	(
CONDITION	1489:5	1489:5	4	cc % sp -> b . rowbytes
EXPR	1489:5	1489:10	5	cc % sp -> b . rowbytes
FIELD	1489:5	1489:5	6	cc
LEAF_NODE	1489:5	1489:5	7	cc
LEAF_NODE	1489:8	1489:8	6	%
FIELD	1489:10	1489:16	6	sp -> b . rowbytes
LEAF_NODE	1489:10	1489:10	7	sp
LEAF_NODE	1489:12	1489:12	7	->
LEAF_NODE	1489:14	1489:14	7	b
LEAF_NODE	1489:15	1489:15	7	.
LEAF_NODE	1489:16	1489:16	7	rowbytes
LEAF_NODE	1489:24	1489:24	4	)
STATEMENTS	1490:1	1493:1	4	
LEAF_NODE	1490:1	1490:1	5	{
STATEMENTS	1491:2	1492:2	5	
EXPR_STATEMENT	1491:2	1491:85	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be written" ) ;
EXPR	1491:2	1491:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be written" )
FUNCTION_CALL	1491:2	1491:84	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be written" )
CALLEE	1491:2	1491:2	9	TIFFErrorExt
LEAF_NODE	1491:2	1491:2	10	TIFFErrorExt
LEAF_NODE	1491:14	1491:14	9	(
ARGUMENT	1491:15	1491:15	9	tif -> tif_clientdata
FIELD	1491:15	1491:20	10	tif -> tif_clientdata
LEAF_NODE	1491:15	1491:15	11	tif
LEAF_NODE	1491:18	1491:18	11	->
LEAF_NODE	1491:20	1491:20	11	tif_clientdata
LEAF_NODE	1491:34	1491:34	9	,
ARGUMENT	1491:36	1491:36	9	module
FIELD	1491:36	1491:36	10	module
LEAF_NODE	1491:36	1491:36	11	module
LEAF_NODE	1491:42	1491:42	9	,
ARGUMENT	1491:44	1491:44	9	"Fractional scanlines cannot be written"
FIELD	1491:44	1491:44	10	"Fractional scanlines cannot be written"
LEAF_NODE	1491:44	1491:44	11	"Fractional scanlines cannot be written"
LEAF_NODE	1491:84	1491:84	9	)
LEAF_NODE	1491:85	1491:85	7	;
JUMP_STATEMENT	1492:2	1492:12	6	return ( 0 ) ;
KEYWORD	1492:2	1492:2	7	return
LEAF_NODE	1492:2	1492:2	8	return
DESTINATION	1492:9	1492:9	7	( 0 )
EXPR	1492:9	1492:11	8	( 0 )
LEAF_NODE	1492:9	1492:9	9	(
FIELD	1492:10	1492:10	9	0
LEAF_NODE	1492:10	1492:10	10	0
LEAF_NODE	1492:11	1492:11	9	)
LEAF_NODE	1492:12	1492:12	7	;
LEAF_NODE	1493:1	1493:1	5	}
ITERATION	1494:1	1494:16	3	
KEYWORD	1494:1	1494:1	4	while
LEAF_NODE	1494:1	1494:1	5	while
LEAF_NODE	1494:7	1494:7	4	(
CONDITION	1494:8	1494:8	4	cc > 0
EXPR	1494:8	1494:13	5	cc > 0
FIELD	1494:8	1494:8	6	cc
LEAF_NODE	1494:8	1494:8	7	cc
REL_OPERATOR	1494:11	1494:11	6	>
LEAF_NODE	1494:11	1494:11	7	>
FIELD	1494:13	1494:13	6	0
LEAF_NODE	1494:13	1494:13	7	0
LEAF_NODE	1494:14	1494:14	4	)
STATEMENTS	1494:16	1500:1	4	
LEAF_NODE	1494:16	1494:16	5	{
STATEMENTS	1495:2	1499:2	5	
SELECTION	1495:2	1496:3	6	
KEYWORD	1495:2	1495:2	7	if
LEAF_NODE	1495:2	1495:2	8	if
LEAF_NODE	1495:5	1495:5	7	(
CONDITION	1495:6	1495:6	7	! Fax3Encode2DRow ( tif , bp , sp -> refline , sp -> b . rowpixels )
EXPR	1495:6	1495:6	8	! Fax3Encode2DRow ( tif , bp , sp -> refline , sp -> b . rowpixels )
UNARY_EXPR	1495:6	1495:7	9	! Fax3Encode2DRow ( tif , bp , sp -> refline , sp -> b . rowpixels )
UNARY_OPERATOR	1495:6	1495:6	10	!
LEAF_NODE	1495:6	1495:6	11	!
FUNCTION_CALL	1495:7	1495:60	10	Fax3Encode2DRow ( tif , bp , sp -> refline , sp -> b . rowpixels )
CALLEE	1495:7	1495:7	11	Fax3Encode2DRow
LEAF_NODE	1495:7	1495:7	12	Fax3Encode2DRow
LEAF_NODE	1495:22	1495:22	11	(
ARGUMENT	1495:23	1495:23	11	tif
FIELD	1495:23	1495:23	12	tif
LEAF_NODE	1495:23	1495:23	13	tif
LEAF_NODE	1495:26	1495:26	11	,
ARGUMENT	1495:28	1495:28	11	bp
FIELD	1495:28	1495:28	12	bp
LEAF_NODE	1495:28	1495:28	13	bp
LEAF_NODE	1495:30	1495:30	11	,
ARGUMENT	1495:32	1495:32	11	sp -> refline
FIELD	1495:32	1495:36	12	sp -> refline
LEAF_NODE	1495:32	1495:32	13	sp
LEAF_NODE	1495:34	1495:34	13	->
LEAF_NODE	1495:36	1495:36	13	refline
LEAF_NODE	1495:43	1495:43	11	,
ARGUMENT	1495:45	1495:45	11	sp -> b . rowpixels
FIELD	1495:45	1495:51	12	sp -> b . rowpixels
LEAF_NODE	1495:45	1495:45	13	sp
LEAF_NODE	1495:47	1495:47	13	->
LEAF_NODE	1495:49	1495:49	13	b
LEAF_NODE	1495:50	1495:50	13	.
LEAF_NODE	1495:51	1495:51	13	rowpixels
LEAF_NODE	1495:60	1495:60	11	)
LEAF_NODE	1495:61	1495:61	7	)
STATEMENTS	1496:3	1496:3	7	
JUMP_STATEMENT	1496:3	1496:13	8	return ( 0 ) ;
KEYWORD	1496:3	1496:3	9	return
LEAF_NODE	1496:3	1496:3	10	return
DESTINATION	1496:10	1496:10	9	( 0 )
EXPR	1496:10	1496:12	10	( 0 )
LEAF_NODE	1496:10	1496:10	11	(
FIELD	1496:11	1496:11	11	0
LEAF_NODE	1496:11	1496:11	12	0
LEAF_NODE	1496:12	1496:12	11	)
LEAF_NODE	1496:13	1496:13	9	;
EXPR_STATEMENT	1497:2	1497:46	6	_TIFFmemcpy ( sp -> refline , bp , sp -> b . rowbytes ) ;
EXPR	1497:2	1497:2	7	_TIFFmemcpy ( sp -> refline , bp , sp -> b . rowbytes )
FUNCTION_CALL	1497:2	1497:45	8	_TIFFmemcpy ( sp -> refline , bp , sp -> b . rowbytes )
CALLEE	1497:2	1497:2	9	_TIFFmemcpy
LEAF_NODE	1497:2	1497:2	10	_TIFFmemcpy
LEAF_NODE	1497:13	1497:13	9	(
ARGUMENT	1497:14	1497:14	9	sp -> refline
FIELD	1497:14	1497:18	10	sp -> refline
LEAF_NODE	1497:14	1497:14	11	sp
LEAF_NODE	1497:16	1497:16	11	->
LEAF_NODE	1497:18	1497:18	11	refline
LEAF_NODE	1497:25	1497:25	9	,
ARGUMENT	1497:27	1497:27	9	bp
FIELD	1497:27	1497:27	10	bp
LEAF_NODE	1497:27	1497:27	11	bp
LEAF_NODE	1497:29	1497:29	9	,
ARGUMENT	1497:31	1497:31	9	sp -> b . rowbytes
FIELD	1497:31	1497:37	10	sp -> b . rowbytes
LEAF_NODE	1497:31	1497:31	11	sp
LEAF_NODE	1497:33	1497:33	11	->
LEAF_NODE	1497:35	1497:35	11	b
LEAF_NODE	1497:36	1497:36	11	.
LEAF_NODE	1497:37	1497:37	11	rowbytes
LEAF_NODE	1497:45	1497:45	9	)
LEAF_NODE	1497:46	1497:46	7	;
EXPR_STATEMENT	1498:2	1498:22	6	bp += sp -> b . rowbytes ;
EXPR	1498:2	1498:2	7	bp += sp -> b . rowbytes
ASSIGN	1498:2	1498:8	8	bp += sp -> b . rowbytes
LVAL	1498:2	1498:2	9	bp
FIELD	1498:2	1498:2	10	bp
LEAF_NODE	1498:2	1498:2	11	bp
ASSIGN_OP	1498:5	1498:5	9	+=
LEAF_NODE	1498:5	1498:5	10	+=
RVAL	1498:8	1498:8	9	sp -> b . rowbytes
FIELD	1498:8	1498:14	10	sp -> b . rowbytes
LEAF_NODE	1498:8	1498:8	11	sp
LEAF_NODE	1498:10	1498:10	11	->
LEAF_NODE	1498:12	1498:12	11	b
LEAF_NODE	1498:13	1498:13	11	.
LEAF_NODE	1498:14	1498:14	11	rowbytes
LEAF_NODE	1498:22	1498:22	7	;
EXPR_STATEMENT	1499:2	1499:22	6	cc -= sp -> b . rowbytes ;
EXPR	1499:2	1499:2	7	cc -= sp -> b . rowbytes
ASSIGN	1499:2	1499:8	8	cc -= sp -> b . rowbytes
LVAL	1499:2	1499:2	9	cc
FIELD	1499:2	1499:2	10	cc
LEAF_NODE	1499:2	1499:2	11	cc
ASSIGN_OP	1499:5	1499:5	9	-=
LEAF_NODE	1499:5	1499:5	10	-=
RVAL	1499:8	1499:8	9	sp -> b . rowbytes
FIELD	1499:8	1499:14	10	sp -> b . rowbytes
LEAF_NODE	1499:8	1499:8	11	sp
LEAF_NODE	1499:10	1499:10	11	->
LEAF_NODE	1499:12	1499:12	11	b
LEAF_NODE	1499:13	1499:13	11	.
LEAF_NODE	1499:14	1499:14	11	rowbytes
LEAF_NODE	1499:22	1499:22	7	;
LEAF_NODE	1500:1	1500:1	5	}
JUMP_STATEMENT	1501:1	1501:11	3	return ( 1 ) ;
KEYWORD	1501:1	1501:1	4	return
LEAF_NODE	1501:1	1501:1	5	return
DESTINATION	1501:8	1501:8	4	( 1 )
EXPR	1501:8	1501:10	5	( 1 )
LEAF_NODE	1501:8	1501:8	6	(
FIELD	1501:9	1501:9	6	1
LEAF_NODE	1501:9	1501:9	7	1
LEAF_NODE	1501:10	1501:10	6	)
LEAF_NODE	1501:11	1501:11	4	;
LEAF_NODE	1502:0	1502:0	2	}
FUNCTION_DEF	1504:0	1515:0	1	
RETURN_TYPE	1504:0	1504:7	2	static int
LEAF_NODE	1504:0	1504:0	3	static
TYPE_NAME	1504:7	1504:7	3	int
LEAF_NODE	1504:7	1504:7	4	int
FUNCTION_NAME	1505:0	1505:0	2	Fax4PostEncode
LEAF_NODE	1505:0	1505:0	3	Fax4PostEncode
PARAMETER_LIST	1505:14	1505:24	2	( TIFF * tif )
LEAF_NODE	1505:14	1505:14	3	(
PARAMETER_DECL	1505:15	1505:21	3	TIFF * tif
TYPE	1505:15	1505:19	4	TIFF *
TYPE_NAME	1505:15	1505:15	5	TIFF
LEAF_NODE	1505:15	1505:15	6	TIFF
POINTER	1505:19	1505:19	5	*
LEAF_NODE	1505:19	1505:19	6	*
NAME	1505:21	1505:21	4	tif
LEAF_NODE	1505:21	1505:21	5	tif
LEAF_NODE	1505:24	1505:24	3	)
LEAF_NODE	1506:0	1506:0	2	{
STATEMENTS	1507:1	1514:1	2	
SIMPLE_DECL	1507:1	1507:39	3	Fax3CodecState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	1507:1	1507:17	4	Fax3CodecState * sp ; sp = EncoderState ( tif )
TYPE	1507:1	1507:16	5	Fax3CodecState *
TYPE_NAME	1507:1	1507:1	6	Fax3CodecState
LEAF_NODE	1507:1	1507:1	7	Fax3CodecState
POINTER	1507:16	1507:16	6	*
LEAF_NODE	1507:16	1507:16	7	*
NAME	1507:17	1507:17	5	sp
LEAF_NODE	1507:17	1507:17	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1507:17	1507:17	5	sp = EncoderState ( tif )
ASSIGN	1507:17	1507:22	6	sp = EncoderState ( tif )
LVAL	1507:17	1507:17	7	sp
NAME	1507:17	1507:17	8	sp
LEAF_NODE	1507:17	1507:17	9	sp
ASSIGN_OP	1507:20	1507:20	7	=
LEAF_NODE	1507:20	1507:20	8	=
RVAL	1507:22	1507:22	7	EncoderState ( tif )
FUNCTION_CALL	1507:22	1507:38	8	EncoderState ( tif )
CALLEE	1507:22	1507:22	9	EncoderState
LEAF_NODE	1507:22	1507:22	10	EncoderState
LEAF_NODE	1507:34	1507:34	9	(
ARGUMENT	1507:35	1507:35	9	tif
FIELD	1507:35	1507:35	10	tif
LEAF_NODE	1507:35	1507:35	11	tif
LEAF_NODE	1507:38	1507:38	9	)
LEAF_NODE	1507:39	1507:39	4	;
EXPR_STATEMENT	1510:1	1510:26	3	Fax3PutBits ( tif , EOL , 12 ) ;
EXPR	1510:1	1510:1	4	Fax3PutBits ( tif , EOL , 12 )
FUNCTION_CALL	1510:1	1510:25	5	Fax3PutBits ( tif , EOL , 12 )
CALLEE	1510:1	1510:1	6	Fax3PutBits
LEAF_NODE	1510:1	1510:1	7	Fax3PutBits
LEAF_NODE	1510:12	1510:12	6	(
ARGUMENT	1510:13	1510:13	6	tif
FIELD	1510:13	1510:13	7	tif
LEAF_NODE	1510:13	1510:13	8	tif
LEAF_NODE	1510:16	1510:16	6	,
ARGUMENT	1510:18	1510:18	6	EOL
FIELD	1510:18	1510:18	7	EOL
LEAF_NODE	1510:18	1510:18	8	EOL
LEAF_NODE	1510:21	1510:21	6	,
ARGUMENT	1510:23	1510:23	6	12
FIELD	1510:23	1510:23	7	12
LEAF_NODE	1510:23	1510:23	8	12
LEAF_NODE	1510:25	1510:25	6	)
LEAF_NODE	1510:26	1510:26	4	;
EXPR_STATEMENT	1511:1	1511:26	3	Fax3PutBits ( tif , EOL , 12 ) ;
EXPR	1511:1	1511:1	4	Fax3PutBits ( tif , EOL , 12 )
FUNCTION_CALL	1511:1	1511:25	5	Fax3PutBits ( tif , EOL , 12 )
CALLEE	1511:1	1511:1	6	Fax3PutBits
LEAF_NODE	1511:1	1511:1	7	Fax3PutBits
LEAF_NODE	1511:12	1511:12	6	(
ARGUMENT	1511:13	1511:13	6	tif
FIELD	1511:13	1511:13	7	tif
LEAF_NODE	1511:13	1511:13	8	tif
LEAF_NODE	1511:16	1511:16	6	,
ARGUMENT	1511:18	1511:18	6	EOL
FIELD	1511:18	1511:18	7	EOL
LEAF_NODE	1511:18	1511:18	8	EOL
LEAF_NODE	1511:21	1511:21	6	,
ARGUMENT	1511:23	1511:23	6	12
FIELD	1511:23	1511:23	7	12
LEAF_NODE	1511:23	1511:23	8	12
LEAF_NODE	1511:25	1511:25	6	)
LEAF_NODE	1511:26	1511:26	4	;
SELECTION	1512:1	1513:2	3	
KEYWORD	1512:1	1512:1	4	if
LEAF_NODE	1512:1	1512:1	5	if
LEAF_NODE	1512:4	1512:4	4	(
CONDITION	1512:5	1512:5	4	sp -> bit != 8
EXPR	1512:5	1512:16	5	sp -> bit != 8
FIELD	1512:5	1512:9	6	sp -> bit
LEAF_NODE	1512:5	1512:5	7	sp
LEAF_NODE	1512:7	1512:7	7	->
LEAF_NODE	1512:9	1512:9	7	bit
EQ_OPERATOR	1512:13	1512:13	6	!=
LEAF_NODE	1512:13	1512:13	7	!=
FIELD	1512:16	1512:16	6	8
LEAF_NODE	1512:16	1512:16	7	8
LEAF_NODE	1512:17	1512:17	4	)
STATEMENTS	1513:2	1513:2	4	
EXPR_STATEMENT	1513:2	1513:24	5	Fax3FlushBits ( tif , sp ) ;
EXPR	1513:2	1513:2	6	Fax3FlushBits ( tif , sp )
FUNCTION_CALL	1513:2	1513:23	7	Fax3FlushBits ( tif , sp )
CALLEE	1513:2	1513:2	8	Fax3FlushBits
LEAF_NODE	1513:2	1513:2	9	Fax3FlushBits
LEAF_NODE	1513:15	1513:15	8	(
ARGUMENT	1513:16	1513:16	8	tif
FIELD	1513:16	1513:16	9	tif
LEAF_NODE	1513:16	1513:16	10	tif
LEAF_NODE	1513:19	1513:19	8	,
ARGUMENT	1513:21	1513:21	8	sp
FIELD	1513:21	1513:21	9	sp
LEAF_NODE	1513:21	1513:21	10	sp
LEAF_NODE	1513:23	1513:23	8	)
LEAF_NODE	1513:24	1513:24	6	;
JUMP_STATEMENT	1514:1	1514:11	3	return ( 1 ) ;
KEYWORD	1514:1	1514:1	4	return
LEAF_NODE	1514:1	1514:1	5	return
DESTINATION	1514:8	1514:8	4	( 1 )
EXPR	1514:8	1514:10	5	( 1 )
LEAF_NODE	1514:8	1514:8	6	(
FIELD	1514:9	1514:9	6	1
LEAF_NODE	1514:9	1514:9	7	1
LEAF_NODE	1514:10	1514:10	6	)
LEAF_NODE	1514:11	1514:11	4	;
LEAF_NODE	1515:0	1515:0	2	}
FUNCTION_DEF	1517:0	1545:0	1	
RETURN_TYPE	1517:0	1517:0	2	int
TYPE_NAME	1517:0	1517:0	3	int
LEAF_NODE	1517:0	1517:0	4	int
FUNCTION_NAME	1518:0	1518:0	2	TIFFInitCCITTFax4
LEAF_NODE	1518:0	1518:0	3	TIFFInitCCITTFax4
PARAMETER_LIST	1518:17	1518:39	2	( TIFF * tif , int scheme )
LEAF_NODE	1518:17	1518:17	3	(
PARAMETER_DECL	1518:18	1518:24	3	TIFF * tif
TYPE	1518:18	1518:22	4	TIFF *
TYPE_NAME	1518:18	1518:18	5	TIFF
LEAF_NODE	1518:18	1518:18	6	TIFF
POINTER	1518:22	1518:22	5	*
LEAF_NODE	1518:22	1518:22	6	*
NAME	1518:24	1518:24	4	tif
LEAF_NODE	1518:24	1518:24	5	tif
LEAF_NODE	1518:27	1518:27	3	,
PARAMETER_DECL	1518:29	1518:33	3	int scheme
TYPE	1518:29	1518:29	4	int
TYPE_NAME	1518:29	1518:29	5	int
LEAF_NODE	1518:29	1518:29	6	int
NAME	1518:33	1518:33	4	scheme
LEAF_NODE	1518:33	1518:33	5	scheme
LEAF_NODE	1518:39	1518:39	3	)
LEAF_NODE	1519:0	1519:0	2	{
STATEMENTS	1520:1	1543:3	2	
EXPR_STATEMENT	1520:1	1520:14	3	( void ) scheme ;
EXPR	1520:1	1520:8	4	( void ) scheme
LEAF_NODE	1520:1	1520:1	5	(
TYPE_NAME	1520:2	1520:2	5	void
LEAF_NODE	1520:2	1520:2	6	void
LEAF_NODE	1520:6	1520:6	5	)
FIELD	1520:8	1520:8	5	scheme
LEAF_NODE	1520:8	1520:8	6	scheme
LEAF_NODE	1520:14	1520:14	4	;
SELECTION	1521:1	1521:25	3	
KEYWORD	1521:1	1521:1	4	if
LEAF_NODE	1521:1	1521:1	5	if
LEAF_NODE	1521:4	1521:4	4	(
CONDITION	1521:5	1521:5	4	InitCCITTFax3 ( tif )
EXPR	1521:5	1521:5	5	InitCCITTFax3 ( tif )
FUNCTION_CALL	1521:5	1521:22	6	InitCCITTFax3 ( tif )
CALLEE	1521:5	1521:5	7	InitCCITTFax3
LEAF_NODE	1521:5	1521:5	8	InitCCITTFax3
LEAF_NODE	1521:18	1521:18	7	(
ARGUMENT	1521:19	1521:19	7	tif
FIELD	1521:19	1521:19	8	tif
LEAF_NODE	1521:19	1521:19	9	tif
LEAF_NODE	1521:22	1521:22	7	)
LEAF_NODE	1521:23	1521:23	4	)
STATEMENTS	1521:25	1543:1	4	
LEAF_NODE	1521:25	1521:25	5	{
STATEMENTS	1525:2	1542:2	5	
SELECTION	1525:2	1526:39	6	
KEYWORD	1525:2	1525:2	7	if
LEAF_NODE	1525:2	1525:2	8	if
LEAF_NODE	1525:5	1525:5	7	(
CONDITION	1525:6	1525:6	7	! _TIFFMergeFields ( tif , fax4Fields , TIFFArrayCount ( fax4Fields ) )
EXPR	1525:6	1525:6	8	! _TIFFMergeFields ( tif , fax4Fields , TIFFArrayCount ( fax4Fields ) )
UNARY_EXPR	1525:6	1525:7	9	! _TIFFMergeFields ( tif , fax4Fields , TIFFArrayCount ( fax4Fields ) )
UNARY_OPERATOR	1525:6	1525:6	10	!
LEAF_NODE	1525:6	1525:6	11	!
FUNCTION_CALL	1525:7	1526:36	10	_TIFFMergeFields ( tif , fax4Fields , TIFFArrayCount ( fax4Fields ) )
CALLEE	1525:7	1525:7	11	_TIFFMergeFields
LEAF_NODE	1525:7	1525:7	12	_TIFFMergeFields
LEAF_NODE	1525:23	1525:23	11	(
ARGUMENT	1525:24	1525:24	11	tif
FIELD	1525:24	1525:24	12	tif
LEAF_NODE	1525:24	1525:24	13	tif
LEAF_NODE	1525:27	1525:27	11	,
ARGUMENT	1525:29	1525:29	11	fax4Fields
FIELD	1525:29	1525:29	12	fax4Fields
LEAF_NODE	1525:29	1525:29	13	fax4Fields
LEAF_NODE	1525:39	1525:39	11	,
ARGUMENT	1526:10	1526:10	11	TIFFArrayCount ( fax4Fields )
FUNCTION_CALL	1526:10	1526:35	12	TIFFArrayCount ( fax4Fields )
CALLEE	1526:10	1526:10	13	TIFFArrayCount
LEAF_NODE	1526:10	1526:10	14	TIFFArrayCount
LEAF_NODE	1526:24	1526:24	13	(
ARGUMENT	1526:25	1526:25	13	fax4Fields
FIELD	1526:25	1526:25	14	fax4Fields
LEAF_NODE	1526:25	1526:25	15	fax4Fields
LEAF_NODE	1526:35	1526:35	13	)
LEAF_NODE	1526:36	1526:36	11	)
LEAF_NODE	1526:37	1526:37	7	)
STATEMENTS	1526:39	1530:2	7	
LEAF_NODE	1526:39	1526:39	8	{
STATEMENTS	1527:3	1529:3	8	
EXPR_STATEMENT	1527:3	1528:52	9	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitCCITTFax4" , "Merging CCITT Fax 4 codec-specific tags failed" ) ;
EXPR	1527:3	1527:3	10	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitCCITTFax4" , "Merging CCITT Fax 4 codec-specific tags failed" )
FUNCTION_CALL	1527:3	1528:51	11	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitCCITTFax4" , "Merging CCITT Fax 4 codec-specific tags failed" )
CALLEE	1527:3	1527:3	12	TIFFErrorExt
LEAF_NODE	1527:3	1527:3	13	TIFFErrorExt
LEAF_NODE	1527:15	1527:15	12	(
ARGUMENT	1527:16	1527:16	12	tif -> tif_clientdata
FIELD	1527:16	1527:21	13	tif -> tif_clientdata
LEAF_NODE	1527:16	1527:16	14	tif
LEAF_NODE	1527:19	1527:19	14	->
LEAF_NODE	1527:21	1527:21	14	tif_clientdata
LEAF_NODE	1527:35	1527:35	12	,
ARGUMENT	1527:37	1527:37	12	"TIFFInitCCITTFax4"
FIELD	1527:37	1527:37	13	"TIFFInitCCITTFax4"
LEAF_NODE	1527:37	1527:37	14	"TIFFInitCCITTFax4"
LEAF_NODE	1527:56	1527:56	12	,
ARGUMENT	1528:3	1528:3	12	"Merging CCITT Fax 4 codec-specific tags failed"
FIELD	1528:3	1528:3	13	"Merging CCITT Fax 4 codec-specific tags failed"
LEAF_NODE	1528:3	1528:3	14	"Merging CCITT Fax 4 codec-specific tags failed"
LEAF_NODE	1528:51	1528:51	12	)
LEAF_NODE	1528:52	1528:52	10	;
JUMP_STATEMENT	1529:3	1529:11	9	return 0 ;
KEYWORD	1529:3	1529:3	10	return
LEAF_NODE	1529:3	1529:3	11	return
DESTINATION	1529:10	1529:10	10	0
EXPR	1529:10	1529:10	11	0
FIELD	1529:10	1529:10	12	0
LEAF_NODE	1529:10	1529:10	13	0
LEAF_NODE	1529:11	1529:11	10	;
LEAF_NODE	1530:2	1530:2	8	}
EXPR_STATEMENT	1532:2	1532:33	6	tif -> tif_decoderow = Fax4Decode ;
EXPR	1532:2	1532:2	7	tif -> tif_decoderow = Fax4Decode
ASSIGN	1532:2	1532:23	8	tif -> tif_decoderow = Fax4Decode
LVAL	1532:2	1532:2	9	tif -> tif_decoderow
FIELD	1532:2	1532:7	10	tif -> tif_decoderow
LEAF_NODE	1532:2	1532:2	11	tif
LEAF_NODE	1532:5	1532:5	11	->
LEAF_NODE	1532:7	1532:7	11	tif_decoderow
ASSIGN_OP	1532:21	1532:21	9	=
LEAF_NODE	1532:21	1532:21	10	=
RVAL	1532:23	1532:23	9	Fax4Decode
FIELD	1532:23	1532:23	10	Fax4Decode
LEAF_NODE	1532:23	1532:23	11	Fax4Decode
LEAF_NODE	1532:33	1532:33	7	;
EXPR_STATEMENT	1533:2	1533:35	6	tif -> tif_decodestrip = Fax4Decode ;
EXPR	1533:2	1533:2	7	tif -> tif_decodestrip = Fax4Decode
ASSIGN	1533:2	1533:25	8	tif -> tif_decodestrip = Fax4Decode
LVAL	1533:2	1533:2	9	tif -> tif_decodestrip
FIELD	1533:2	1533:7	10	tif -> tif_decodestrip
LEAF_NODE	1533:2	1533:2	11	tif
LEAF_NODE	1533:5	1533:5	11	->
LEAF_NODE	1533:7	1533:7	11	tif_decodestrip
ASSIGN_OP	1533:23	1533:23	9	=
LEAF_NODE	1533:23	1533:23	10	=
RVAL	1533:25	1533:25	9	Fax4Decode
FIELD	1533:25	1533:25	10	Fax4Decode
LEAF_NODE	1533:25	1533:25	11	Fax4Decode
LEAF_NODE	1533:35	1533:35	7	;
EXPR_STATEMENT	1534:2	1534:34	6	tif -> tif_decodetile = Fax4Decode ;
EXPR	1534:2	1534:2	7	tif -> tif_decodetile = Fax4Decode
ASSIGN	1534:2	1534:24	8	tif -> tif_decodetile = Fax4Decode
LVAL	1534:2	1534:2	9	tif -> tif_decodetile
FIELD	1534:2	1534:7	10	tif -> tif_decodetile
LEAF_NODE	1534:2	1534:2	11	tif
LEAF_NODE	1534:5	1534:5	11	->
LEAF_NODE	1534:7	1534:7	11	tif_decodetile
ASSIGN_OP	1534:22	1534:22	9	=
LEAF_NODE	1534:22	1534:22	10	=
RVAL	1534:24	1534:24	9	Fax4Decode
FIELD	1534:24	1534:24	10	Fax4Decode
LEAF_NODE	1534:24	1534:24	11	Fax4Decode
LEAF_NODE	1534:34	1534:34	7	;
EXPR_STATEMENT	1535:2	1535:33	6	tif -> tif_encoderow = Fax4Encode ;
EXPR	1535:2	1535:2	7	tif -> tif_encoderow = Fax4Encode
ASSIGN	1535:2	1535:23	8	tif -> tif_encoderow = Fax4Encode
LVAL	1535:2	1535:2	9	tif -> tif_encoderow
FIELD	1535:2	1535:7	10	tif -> tif_encoderow
LEAF_NODE	1535:2	1535:2	11	tif
LEAF_NODE	1535:5	1535:5	11	->
LEAF_NODE	1535:7	1535:7	11	tif_encoderow
ASSIGN_OP	1535:21	1535:21	9	=
LEAF_NODE	1535:21	1535:21	10	=
RVAL	1535:23	1535:23	9	Fax4Encode
FIELD	1535:23	1535:23	10	Fax4Encode
LEAF_NODE	1535:23	1535:23	11	Fax4Encode
LEAF_NODE	1535:33	1535:33	7	;
EXPR_STATEMENT	1536:2	1536:35	6	tif -> tif_encodestrip = Fax4Encode ;
EXPR	1536:2	1536:2	7	tif -> tif_encodestrip = Fax4Encode
ASSIGN	1536:2	1536:25	8	tif -> tif_encodestrip = Fax4Encode
LVAL	1536:2	1536:2	9	tif -> tif_encodestrip
FIELD	1536:2	1536:7	10	tif -> tif_encodestrip
LEAF_NODE	1536:2	1536:2	11	tif
LEAF_NODE	1536:5	1536:5	11	->
LEAF_NODE	1536:7	1536:7	11	tif_encodestrip
ASSIGN_OP	1536:23	1536:23	9	=
LEAF_NODE	1536:23	1536:23	10	=
RVAL	1536:25	1536:25	9	Fax4Encode
FIELD	1536:25	1536:25	10	Fax4Encode
LEAF_NODE	1536:25	1536:25	11	Fax4Encode
LEAF_NODE	1536:35	1536:35	7	;
EXPR_STATEMENT	1537:2	1537:34	6	tif -> tif_encodetile = Fax4Encode ;
EXPR	1537:2	1537:2	7	tif -> tif_encodetile = Fax4Encode
ASSIGN	1537:2	1537:24	8	tif -> tif_encodetile = Fax4Encode
LVAL	1537:2	1537:2	9	tif -> tif_encodetile
FIELD	1537:2	1537:7	10	tif -> tif_encodetile
LEAF_NODE	1537:2	1537:2	11	tif
LEAF_NODE	1537:5	1537:5	11	->
LEAF_NODE	1537:7	1537:7	11	tif_encodetile
ASSIGN_OP	1537:22	1537:22	9	=
LEAF_NODE	1537:22	1537:22	10	=
RVAL	1537:24	1537:24	9	Fax4Encode
FIELD	1537:24	1537:24	10	Fax4Encode
LEAF_NODE	1537:24	1537:24	11	Fax4Encode
LEAF_NODE	1537:34	1537:34	7	;
EXPR_STATEMENT	1538:2	1538:38	6	tif -> tif_postencode = Fax4PostEncode ;
EXPR	1538:2	1538:2	7	tif -> tif_postencode = Fax4PostEncode
ASSIGN	1538:2	1538:24	8	tif -> tif_postencode = Fax4PostEncode
LVAL	1538:2	1538:2	9	tif -> tif_postencode
FIELD	1538:2	1538:7	10	tif -> tif_postencode
LEAF_NODE	1538:2	1538:2	11	tif
LEAF_NODE	1538:5	1538:5	11	->
LEAF_NODE	1538:7	1538:7	11	tif_postencode
ASSIGN_OP	1538:22	1538:22	9	=
LEAF_NODE	1538:22	1538:22	10	=
RVAL	1538:24	1538:24	9	Fax4PostEncode
FIELD	1538:24	1538:24	10	Fax4PostEncode
LEAF_NODE	1538:24	1538:24	11	Fax4PostEncode
LEAF_NODE	1538:38	1538:38	7	;
JUMP_STATEMENT	1542:2	1542:58	6	return TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC ) ;
KEYWORD	1542:2	1542:2	7	return
LEAF_NODE	1542:2	1542:2	8	return
DESTINATION	1542:9	1542:9	7	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC )
EXPR	1542:9	1542:9	8	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC )
FUNCTION_CALL	1542:9	1542:57	9	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC )
CALLEE	1542:9	1542:9	10	TIFFSetField
LEAF_NODE	1542:9	1542:9	11	TIFFSetField
LEAF_NODE	1542:21	1542:21	10	(
ARGUMENT	1542:22	1542:22	10	tif
FIELD	1542:22	1542:22	11	tif
LEAF_NODE	1542:22	1542:22	12	tif
LEAF_NODE	1542:25	1542:25	10	,
ARGUMENT	1542:27	1542:27	10	TIFFTAG_FAXMODE
FIELD	1542:27	1542:27	11	TIFFTAG_FAXMODE
LEAF_NODE	1542:27	1542:27	12	TIFFTAG_FAXMODE
LEAF_NODE	1542:42	1542:42	10	,
ARGUMENT	1542:44	1542:44	10	FAXMODE_NORTC
FIELD	1542:44	1542:44	11	FAXMODE_NORTC
LEAF_NODE	1542:44	1542:44	12	FAXMODE_NORTC
LEAF_NODE	1542:57	1542:57	10	)
LEAF_NODE	1542:58	1542:58	7	;
LEAF_NODE	1543:1	1543:1	5	}
SELECTION	1543:3	1544:2	3	
KEYWORD	1543:3	1543:3	4	else
LEAF_NODE	1543:3	1543:3	5	else
STATEMENTS	1544:2	1544:2	4	
JUMP_STATEMENT	1544:2	1544:12	5	return ( 0 ) ;
KEYWORD	1544:2	1544:2	6	return
LEAF_NODE	1544:2	1544:2	7	return
DESTINATION	1544:9	1544:9	6	( 0 )
EXPR	1544:9	1544:11	7	( 0 )
LEAF_NODE	1544:9	1544:9	8	(
FIELD	1544:10	1544:10	8	0
LEAF_NODE	1544:10	1544:10	9	0
LEAF_NODE	1544:11	1544:11	8	)
LEAF_NODE	1544:12	1544:12	6	;
LEAF_NODE	1545:0	1545:0	2	}
FUNCTION_DEF	1555:0	1602:0	1	
RETURN_TYPE	1555:0	1555:7	2	static int
LEAF_NODE	1555:0	1555:0	3	static
TYPE_NAME	1555:7	1555:7	3	int
LEAF_NODE	1555:7	1555:7	4	int
FUNCTION_NAME	1556:0	1556:0	2	Fax3DecodeRLE
LEAF_NODE	1556:0	1556:0	3	Fax3DecodeRLE
PARAMETER_LIST	1556:13	1556:59	2	( TIFF * tif , uint8 * buf , tmsize_t occ , uint16 s )
LEAF_NODE	1556:13	1556:13	3	(
PARAMETER_DECL	1556:14	1556:20	3	TIFF * tif
TYPE	1556:14	1556:18	4	TIFF *
TYPE_NAME	1556:14	1556:14	5	TIFF
LEAF_NODE	1556:14	1556:14	6	TIFF
POINTER	1556:18	1556:18	5	*
LEAF_NODE	1556:18	1556:18	6	*
NAME	1556:20	1556:20	4	tif
LEAF_NODE	1556:20	1556:20	5	tif
LEAF_NODE	1556:23	1556:23	3	,
PARAMETER_DECL	1556:25	1556:32	3	uint8 * buf
TYPE	1556:25	1556:30	4	uint8 *
TYPE_NAME	1556:25	1556:25	5	uint8
LEAF_NODE	1556:25	1556:25	6	uint8
POINTER	1556:30	1556:30	5	*
LEAF_NODE	1556:30	1556:30	6	*
NAME	1556:32	1556:32	4	buf
LEAF_NODE	1556:32	1556:32	5	buf
LEAF_NODE	1556:35	1556:35	3	,
PARAMETER_DECL	1556:37	1556:46	3	tmsize_t occ
TYPE	1556:37	1556:37	4	tmsize_t
TYPE_NAME	1556:37	1556:37	5	tmsize_t
LEAF_NODE	1556:37	1556:37	6	tmsize_t
NAME	1556:46	1556:46	4	occ
LEAF_NODE	1556:46	1556:46	5	occ
LEAF_NODE	1556:49	1556:49	3	,
PARAMETER_DECL	1556:51	1556:58	3	uint16 s
TYPE	1556:51	1556:51	4	uint16
TYPE_NAME	1556:51	1556:51	5	uint16
LEAF_NODE	1556:51	1556:51	6	uint16
NAME	1556:58	1556:58	4	s
LEAF_NODE	1556:58	1556:58	5	s
LEAF_NODE	1556:59	1556:59	3	)
LEAF_NODE	1557:0	1557:0	2	{
STATEMENTS	1558:1	1601:1	2	
EXPR_STATEMENT	1558:1	1558:40	3	DECLARE_STATE ( tif , sp , "Fax3DecodeRLE" ) ;
EXPR	1558:1	1558:1	4	DECLARE_STATE ( tif , sp , "Fax3DecodeRLE" )
FUNCTION_CALL	1558:1	1558:39	5	DECLARE_STATE ( tif , sp , "Fax3DecodeRLE" )
CALLEE	1558:1	1558:1	6	DECLARE_STATE
LEAF_NODE	1558:1	1558:1	7	DECLARE_STATE
LEAF_NODE	1558:14	1558:14	6	(
ARGUMENT	1558:15	1558:15	6	tif
FIELD	1558:15	1558:15	7	tif
LEAF_NODE	1558:15	1558:15	8	tif
LEAF_NODE	1558:18	1558:18	6	,
ARGUMENT	1558:20	1558:20	6	sp
FIELD	1558:20	1558:20	7	sp
LEAF_NODE	1558:20	1558:20	8	sp
LEAF_NODE	1558:22	1558:22	6	,
ARGUMENT	1558:24	1558:24	6	"Fax3DecodeRLE"
FIELD	1558:24	1558:24	7	"Fax3DecodeRLE"
LEAF_NODE	1558:24	1558:24	8	"Fax3DecodeRLE"
LEAF_NODE	1558:39	1558:39	6	)
LEAF_NODE	1558:40	1558:40	4	;
SIMPLE_DECL	1559:1	1559:22	3	int mode ; mode = sp -> b . mode ;
VAR_DECL	1559:1	1559:5	4	int mode ; mode = sp -> b . mode
TYPE	1559:1	1559:1	5	int
TYPE_NAME	1559:1	1559:1	6	int
LEAF_NODE	1559:1	1559:1	7	int
NAME	1559:5	1559:5	5	mode
LEAF_NODE	1559:5	1559:5	6	mode
LEAF_NODE	0:0	0:0	5	;
INIT	1559:5	1559:5	5	mode = sp -> b . mode
ASSIGN	1559:5	1559:12	6	mode = sp -> b . mode
LVAL	1559:5	1559:5	7	mode
NAME	1559:5	1559:5	8	mode
LEAF_NODE	1559:5	1559:5	9	mode
ASSIGN_OP	1559:10	1559:10	7	=
LEAF_NODE	1559:10	1559:10	8	=
RVAL	1559:12	1559:12	7	sp -> b . mode
FIELD	1559:12	1559:18	8	sp -> b . mode
LEAF_NODE	1559:12	1559:12	9	sp
LEAF_NODE	1559:14	1559:14	9	->
LEAF_NODE	1559:16	1559:16	9	b
LEAF_NODE	1559:17	1559:17	9	.
LEAF_NODE	1559:18	1559:18	9	mode
LEAF_NODE	1559:22	1559:22	4	;
EXPR_STATEMENT	1560:1	1560:9	3	( void ) s ;
EXPR	1560:1	1560:8	4	( void ) s
LEAF_NODE	1560:1	1560:1	5	(
TYPE_NAME	1560:2	1560:2	5	void
LEAF_NODE	1560:2	1560:2	6	void
LEAF_NODE	1560:6	1560:6	5	)
FIELD	1560:8	1560:8	5	s
LEAF_NODE	1560:8	1560:8	6	s
LEAF_NODE	1560:9	1560:9	4	;
SELECTION	1561:1	1562:1	3	
KEYWORD	1561:1	1561:1	4	if
LEAF_NODE	1561:1	1561:1	5	if
LEAF_NODE	1561:4	1561:4	4	(
CONDITION	1561:5	1561:5	4	occ % sp -> b . rowbytes
EXPR	1561:5	1561:11	5	occ % sp -> b . rowbytes
FIELD	1561:5	1561:5	6	occ
LEAF_NODE	1561:5	1561:5	7	occ
LEAF_NODE	1561:9	1561:9	6	%
FIELD	1561:11	1561:17	6	sp -> b . rowbytes
LEAF_NODE	1561:11	1561:11	7	sp
LEAF_NODE	1561:13	1561:13	7	->
LEAF_NODE	1561:15	1561:15	7	b
LEAF_NODE	1561:16	1561:16	7	.
LEAF_NODE	1561:17	1561:17	7	rowbytes
LEAF_NODE	1561:25	1561:25	4	)
STATEMENTS	1562:1	1565:1	4	
LEAF_NODE	1562:1	1562:1	5	{
STATEMENTS	1563:2	1564:2	5	
EXPR_STATEMENT	1563:2	1563:82	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" ) ;
EXPR	1563:2	1563:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
FUNCTION_CALL	1563:2	1563:81	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
CALLEE	1563:2	1563:2	9	TIFFErrorExt
LEAF_NODE	1563:2	1563:2	10	TIFFErrorExt
LEAF_NODE	1563:14	1563:14	9	(
ARGUMENT	1563:15	1563:15	9	tif -> tif_clientdata
FIELD	1563:15	1563:20	10	tif -> tif_clientdata
LEAF_NODE	1563:15	1563:15	11	tif
LEAF_NODE	1563:18	1563:18	11	->
LEAF_NODE	1563:20	1563:20	11	tif_clientdata
LEAF_NODE	1563:34	1563:34	9	,
ARGUMENT	1563:36	1563:36	9	module
FIELD	1563:36	1563:36	10	module
LEAF_NODE	1563:36	1563:36	11	module
LEAF_NODE	1563:42	1563:42	9	,
ARGUMENT	1563:44	1563:44	9	"Fractional scanlines cannot be read"
FIELD	1563:44	1563:44	10	"Fractional scanlines cannot be read"
LEAF_NODE	1563:44	1563:44	11	"Fractional scanlines cannot be read"
LEAF_NODE	1563:81	1563:81	9	)
LEAF_NODE	1563:82	1563:82	7	;
JUMP_STATEMENT	1564:2	1564:13	6	return ( - 1 ) ;
KEYWORD	1564:2	1564:2	7	return
LEAF_NODE	1564:2	1564:2	8	return
DESTINATION	1564:9	1564:9	7	( - 1 )
EXPR	1564:9	1564:12	8	( - 1 )
LEAF_NODE	1564:9	1564:9	9	(
UNARY_EXPR	1564:10	1564:11	9	- 1
UNARY_OPERATOR	1564:10	1564:10	10	-
LEAF_NODE	1564:10	1564:10	11	-
FIELD	1564:11	1564:11	10	1
LEAF_NODE	1564:11	1564:11	11	1
LEAF_NODE	1564:12	1564:12	9	)
LEAF_NODE	1564:13	1564:13	7	;
LEAF_NODE	1565:1	1565:1	5	}
EXPR_STATEMENT	1566:1	1566:21	3	CACHE_STATE ( tif , sp ) ;
EXPR	1566:1	1566:1	4	CACHE_STATE ( tif , sp )
FUNCTION_CALL	1566:1	1566:20	5	CACHE_STATE ( tif , sp )
CALLEE	1566:1	1566:1	6	CACHE_STATE
LEAF_NODE	1566:1	1566:1	7	CACHE_STATE
LEAF_NODE	1566:12	1566:12	6	(
ARGUMENT	1566:13	1566:13	6	tif
FIELD	1566:13	1566:13	7	tif
LEAF_NODE	1566:13	1566:13	8	tif
LEAF_NODE	1566:16	1566:16	6	,
ARGUMENT	1566:18	1566:18	6	sp
FIELD	1566:18	1566:18	7	sp
LEAF_NODE	1566:18	1566:18	8	sp
LEAF_NODE	1566:20	1566:20	6	)
LEAF_NODE	1566:21	1566:21	4	;
EXPR_STATEMENT	1567:1	1567:22	3	thisrun = sp -> curruns ;
EXPR	1567:1	1567:1	4	thisrun = sp -> curruns
ASSIGN	1567:1	1567:11	5	thisrun = sp -> curruns
LVAL	1567:1	1567:1	6	thisrun
FIELD	1567:1	1567:1	7	thisrun
LEAF_NODE	1567:1	1567:1	8	thisrun
ASSIGN_OP	1567:9	1567:9	6	=
LEAF_NODE	1567:9	1567:9	7	=
RVAL	1567:11	1567:11	6	sp -> curruns
FIELD	1567:11	1567:15	7	sp -> curruns
LEAF_NODE	1567:11	1567:11	8	sp
LEAF_NODE	1567:13	1567:13	8	->
LEAF_NODE	1567:15	1567:15	8	curruns
LEAF_NODE	1567:22	1567:22	4	;
ITERATION	1568:1	1568:17	3	
KEYWORD	1568:1	1568:1	4	while
LEAF_NODE	1568:1	1568:1	5	while
LEAF_NODE	1568:7	1568:7	4	(
CONDITION	1568:8	1568:8	4	occ > 0
EXPR	1568:8	1568:14	5	occ > 0
FIELD	1568:8	1568:8	6	occ
LEAF_NODE	1568:8	1568:8	7	occ
REL_OPERATOR	1568:12	1568:12	6	>
LEAF_NODE	1568:12	1568:12	7	>
FIELD	1568:14	1568:14	6	0
LEAF_NODE	1568:14	1568:14	7	0
LEAF_NODE	1568:15	1568:15	4	)
STATEMENTS	1568:17	1599:1	4	
LEAF_NODE	1568:17	1568:17	5	{
STATEMENTS	1569:2	1598:2	5	
EXPR_STATEMENT	1569:2	1569:8	6	a0 = 0 ;
EXPR	1569:2	1569:2	7	a0 = 0
ASSIGN	1569:2	1569:7	8	a0 = 0
LVAL	1569:2	1569:2	9	a0
FIELD	1569:2	1569:2	10	a0
LEAF_NODE	1569:2	1569:2	11	a0
ASSIGN_OP	1569:5	1569:5	9	=
LEAF_NODE	1569:5	1569:5	10	=
RVAL	1569:7	1569:7	9	0
FIELD	1569:7	1569:7	10	0
LEAF_NODE	1569:7	1569:7	11	0
LEAF_NODE	1569:8	1569:8	7	;
EXPR_STATEMENT	1570:2	1570:15	6	RunLength = 0 ;
EXPR	1570:2	1570:2	7	RunLength = 0
ASSIGN	1570:2	1570:14	8	RunLength = 0
LVAL	1570:2	1570:2	9	RunLength
FIELD	1570:2	1570:2	10	RunLength
LEAF_NODE	1570:2	1570:2	11	RunLength
ASSIGN_OP	1570:12	1570:12	9	=
LEAF_NODE	1570:12	1570:12	10	=
RVAL	1570:14	1570:14	9	0
FIELD	1570:14	1570:14	10	0
LEAF_NODE	1570:14	1570:14	11	0
LEAF_NODE	1570:15	1570:15	7	;
EXPR_STATEMENT	1571:2	1571:14	6	pa = thisrun ;
EXPR	1571:2	1571:2	7	pa = thisrun
ASSIGN	1571:2	1571:7	8	pa = thisrun
LVAL	1571:2	1571:2	9	pa
FIELD	1571:2	1571:2	10	pa
LEAF_NODE	1571:2	1571:2	11	pa
ASSIGN_OP	1571:5	1571:5	9	=
LEAF_NODE	1571:5	1571:5	10	=
RVAL	1571:7	1571:7	9	thisrun
FIELD	1571:7	1571:7	10	thisrun
LEAF_NODE	1571:7	1571:7	11	thisrun
LEAF_NODE	1571:14	1571:14	7	;
EXPR_STATEMENT	1573:2	1573:62	6	printf ( "\nBitAcc=%08X, BitsAvail = %d\n" , BitAcc , BitsAvail ) ;
EXPR	1573:2	1573:2	7	printf ( "\nBitAcc=%08X, BitsAvail = %d\n" , BitAcc , BitsAvail )
FUNCTION_CALL	1573:2	1573:61	8	printf ( "\nBitAcc=%08X, BitsAvail = %d\n" , BitAcc , BitsAvail )
CALLEE	1573:2	1573:2	9	printf
LEAF_NODE	1573:2	1573:2	10	printf
LEAF_NODE	1573:8	1573:8	9	(
ARGUMENT	1573:9	1573:9	9	"\nBitAcc=%08X, BitsAvail = %d\n"
FIELD	1573:9	1573:9	10	"\nBitAcc=%08X, BitsAvail = %d\n"
LEAF_NODE	1573:9	1573:9	11	"\nBitAcc=%08X, BitsAvail = %d\n"
LEAF_NODE	1573:42	1573:42	9	,
ARGUMENT	1573:44	1573:44	9	BitAcc
FIELD	1573:44	1573:44	10	BitAcc
LEAF_NODE	1573:44	1573:44	11	BitAcc
LEAF_NODE	1573:50	1573:50	9	,
ARGUMENT	1573:52	1573:52	9	BitsAvail
FIELD	1573:52	1573:52	10	BitsAvail
LEAF_NODE	1573:52	1573:52	11	BitsAvail
LEAF_NODE	1573:61	1573:61	9	)
LEAF_NODE	1573:62	1573:62	7	;
EXPR_STATEMENT	1574:2	1574:51	6	printf ( "-------------------- %d\n" , tif -> tif_row ) ;
EXPR	1574:2	1574:2	7	printf ( "-------------------- %d\n" , tif -> tif_row )
FUNCTION_CALL	1574:2	1574:50	8	printf ( "-------------------- %d\n" , tif -> tif_row )
CALLEE	1574:2	1574:2	9	printf
LEAF_NODE	1574:2	1574:2	10	printf
LEAF_NODE	1574:8	1574:8	9	(
ARGUMENT	1574:9	1574:9	9	"-------------------- %d\n"
FIELD	1574:9	1574:9	10	"-------------------- %d\n"
LEAF_NODE	1574:9	1574:9	11	"-------------------- %d\n"
LEAF_NODE	1574:36	1574:36	9	,
ARGUMENT	1574:38	1574:38	9	tif -> tif_row
FIELD	1574:38	1574:43	10	tif -> tif_row
LEAF_NODE	1574:38	1574:38	11	tif
LEAF_NODE	1574:41	1574:41	11	->
LEAF_NODE	1574:43	1574:43	11	tif_row
LEAF_NODE	1574:50	1574:50	9	)
LEAF_NODE	1574:51	1574:51	7	;
EXPR_STATEMENT	1575:2	1575:16	6	fflush ( stdout ) ;
EXPR	1575:2	1575:2	7	fflush ( stdout )
FUNCTION_CALL	1575:2	1575:15	8	fflush ( stdout )
CALLEE	1575:2	1575:2	9	fflush
LEAF_NODE	1575:2	1575:2	10	fflush
LEAF_NODE	1575:8	1575:8	9	(
ARGUMENT	1575:9	1575:9	9	stdout
FIELD	1575:9	1575:9	10	stdout
LEAF_NODE	1575:9	1575:9	11	stdout
LEAF_NODE	1575:15	1575:15	9	)
LEAF_NODE	1575:16	1575:16	7	;
EXPR_STATEMENT	1577:2	1577:18	6	EXPAND1D ( EOFRLE ) ;
EXPR	1577:2	1577:2	7	EXPAND1D ( EOFRLE )
FUNCTION_CALL	1577:2	1577:17	8	EXPAND1D ( EOFRLE )
CALLEE	1577:2	1577:2	9	EXPAND1D
LEAF_NODE	1577:2	1577:2	10	EXPAND1D
LEAF_NODE	1577:10	1577:10	9	(
ARGUMENT	1577:11	1577:11	9	EOFRLE
FIELD	1577:11	1577:11	10	EOFRLE
LEAF_NODE	1577:11	1577:11	11	EOFRLE
LEAF_NODE	1577:17	1577:17	9	)
LEAF_NODE	1577:18	1577:18	7	;
EXPR_STATEMENT	1578:2	1578:38	6	( * sp -> fill ) ( buf , thisrun , pa , lastx ) ;
EXPR	1578:2	1578:2	7	( * sp -> fill ) ( buf , thisrun , pa , lastx )
FUNCTION_CALL	1578:2	1578:37	8	( * sp -> fill ) ( buf , thisrun , pa , lastx )
CALLEE	1578:2	1578:12	9	( * sp -> fill )
LEAF_NODE	1578:2	1578:2	10	(
UNARY_EXPR	1578:3	1578:4	10	* sp -> fill
UNARY_OPERATOR	1578:3	1578:3	11	*
LEAF_NODE	1578:3	1578:3	12	*
FIELD	1578:4	1578:8	11	sp -> fill
LEAF_NODE	1578:4	1578:4	12	sp
LEAF_NODE	1578:6	1578:6	12	->
LEAF_NODE	1578:8	1578:8	12	fill
LEAF_NODE	1578:12	1578:12	10	)
LEAF_NODE	1578:13	1578:13	9	(
ARGUMENT	1578:14	1578:14	9	buf
FIELD	1578:14	1578:14	10	buf
LEAF_NODE	1578:14	1578:14	11	buf
LEAF_NODE	1578:17	1578:17	9	,
ARGUMENT	1578:19	1578:19	9	thisrun
FIELD	1578:19	1578:19	10	thisrun
LEAF_NODE	1578:19	1578:19	11	thisrun
LEAF_NODE	1578:26	1578:26	9	,
ARGUMENT	1578:28	1578:28	9	pa
FIELD	1578:28	1578:28	10	pa
LEAF_NODE	1578:28	1578:28	11	pa
LEAF_NODE	1578:30	1578:30	9	,
ARGUMENT	1578:32	1578:32	9	lastx
FIELD	1578:32	1578:32	10	lastx
LEAF_NODE	1578:32	1578:32	11	lastx
LEAF_NODE	1578:37	1578:37	9	)
LEAF_NODE	1578:38	1578:38	7	;
SELECTION	1582:2	1582:32	6	
KEYWORD	1582:2	1582:2	7	if
LEAF_NODE	1582:2	1582:2	8	if
LEAF_NODE	1582:5	1582:5	7	(
CONDITION	1582:6	1582:6	7	mode & FAXMODE_BYTEALIGN
EXPR	1582:6	1582:13	8	mode & FAXMODE_BYTEALIGN
FIELD	1582:6	1582:6	9	mode
LEAF_NODE	1582:6	1582:6	10	mode
LEAF_NODE	1582:11	1582:11	9	&
FIELD	1582:13	1582:13	9	FAXMODE_BYTEALIGN
LEAF_NODE	1582:13	1582:13	10	FAXMODE_BYTEALIGN
LEAF_NODE	1582:30	1582:30	7	)
STATEMENTS	1582:32	1585:2	7	
LEAF_NODE	1582:32	1582:32	8	{
STATEMENTS	1583:3	1584:3	8	
SIMPLE_DECL	1583:3	1583:39	9	int n ; n = BitsAvail - ( BitsAvail & ~ 7 ) ;
VAR_DECL	1583:3	1583:7	10	int n ; n = BitsAvail - ( BitsAvail & ~ 7 )
TYPE	1583:3	1583:3	11	int
TYPE_NAME	1583:3	1583:3	12	int
LEAF_NODE	1583:3	1583:3	13	int
NAME	1583:7	1583:7	11	n
LEAF_NODE	1583:7	1583:7	12	n
LEAF_NODE	0:0	0:0	11	;
INIT	1583:7	1583:7	11	n = BitsAvail - ( BitsAvail & ~ 7 )
ASSIGN	1583:7	1583:11	12	n = BitsAvail - ( BitsAvail & ~ 7 )
LVAL	1583:7	1583:7	13	n
NAME	1583:7	1583:7	14	n
LEAF_NODE	1583:7	1583:7	15	n
ASSIGN_OP	1583:9	1583:9	13	=
LEAF_NODE	1583:9	1583:9	14	=
RVAL	1583:11	1583:38	13	BitsAvail - ( BitsAvail & ~ 7 )
FIELD	1583:11	1583:11	14	BitsAvail
LEAF_NODE	1583:11	1583:11	15	BitsAvail
LEAF_NODE	1583:21	1583:21	14	-
LEAF_NODE	1583:23	1583:23	14	(
FIELD	1583:24	1583:24	14	BitsAvail
LEAF_NODE	1583:24	1583:24	15	BitsAvail
LEAF_NODE	1583:34	1583:34	14	&
UNARY_EXPR	1583:35	1583:37	14	~ 7
UNARY_OPERATOR	1583:35	1583:35	15	~
LEAF_NODE	1583:35	1583:35	16	~
FIELD	1583:37	1583:37	15	7
LEAF_NODE	1583:37	1583:37	16	7
LEAF_NODE	1583:38	1583:38	14	)
LEAF_NODE	1583:39	1583:39	10	;
EXPR_STATEMENT	1584:3	1584:13	9	ClrBits ( n ) ;
EXPR	1584:3	1584:3	10	ClrBits ( n )
FUNCTION_CALL	1584:3	1584:12	11	ClrBits ( n )
CALLEE	1584:3	1584:3	12	ClrBits
LEAF_NODE	1584:3	1584:3	13	ClrBits
LEAF_NODE	1584:10	1584:10	12	(
ARGUMENT	1584:11	1584:11	12	n
FIELD	1584:11	1584:11	13	n
LEAF_NODE	1584:11	1584:11	14	n
LEAF_NODE	1584:12	1584:12	12	)
LEAF_NODE	1584:13	1584:13	10	;
LEAF_NODE	1585:2	1585:2	8	}
SELECTION	1585:4	1585:9	6	
KEYWORD	1585:4	1585:4	7	else
LEAF_NODE	1585:4	1585:4	8	else
STATEMENTS	1585:9	1585:9	7	
SELECTION	1585:9	1585:39	8	
KEYWORD	1585:9	1585:9	9	if
LEAF_NODE	1585:9	1585:9	10	if
LEAF_NODE	1585:12	1585:12	9	(
CONDITION	1585:13	1585:13	9	mode & FAXMODE_WORDALIGN
EXPR	1585:13	1585:20	10	mode & FAXMODE_WORDALIGN
FIELD	1585:13	1585:13	11	mode
LEAF_NODE	1585:13	1585:13	12	mode
LEAF_NODE	1585:18	1585:18	11	&
FIELD	1585:20	1585:20	11	FAXMODE_WORDALIGN
LEAF_NODE	1585:20	1585:20	12	FAXMODE_WORDALIGN
LEAF_NODE	1585:37	1585:37	9	)
STATEMENTS	1585:39	1590:2	9	
LEAF_NODE	1585:39	1585:39	10	{
STATEMENTS	1586:3	1588:3	10	
SIMPLE_DECL	1586:3	1586:40	11	int n ; n = BitsAvail - ( BitsAvail & ~ 15 ) ;
VAR_DECL	1586:3	1586:7	12	int n ; n = BitsAvail - ( BitsAvail & ~ 15 )
TYPE	1586:3	1586:3	13	int
TYPE_NAME	1586:3	1586:3	14	int
LEAF_NODE	1586:3	1586:3	15	int
NAME	1586:7	1586:7	13	n
LEAF_NODE	1586:7	1586:7	14	n
LEAF_NODE	0:0	0:0	13	;
INIT	1586:7	1586:7	13	n = BitsAvail - ( BitsAvail & ~ 15 )
ASSIGN	1586:7	1586:11	14	n = BitsAvail - ( BitsAvail & ~ 15 )
LVAL	1586:7	1586:7	15	n
NAME	1586:7	1586:7	16	n
LEAF_NODE	1586:7	1586:7	17	n
ASSIGN_OP	1586:9	1586:9	15	=
LEAF_NODE	1586:9	1586:9	16	=
RVAL	1586:11	1586:39	15	BitsAvail - ( BitsAvail & ~ 15 )
FIELD	1586:11	1586:11	16	BitsAvail
LEAF_NODE	1586:11	1586:11	17	BitsAvail
LEAF_NODE	1586:21	1586:21	16	-
LEAF_NODE	1586:23	1586:23	16	(
FIELD	1586:24	1586:24	16	BitsAvail
LEAF_NODE	1586:24	1586:24	17	BitsAvail
LEAF_NODE	1586:34	1586:34	16	&
UNARY_EXPR	1586:35	1586:37	16	~ 15
UNARY_OPERATOR	1586:35	1586:35	17	~
LEAF_NODE	1586:35	1586:35	18	~
FIELD	1586:37	1586:37	17	15
LEAF_NODE	1586:37	1586:37	18	15
LEAF_NODE	1586:39	1586:39	16	)
LEAF_NODE	1586:40	1586:40	12	;
EXPR_STATEMENT	1587:3	1587:13	11	ClrBits ( n ) ;
EXPR	1587:3	1587:3	12	ClrBits ( n )
FUNCTION_CALL	1587:3	1587:12	13	ClrBits ( n )
CALLEE	1587:3	1587:3	14	ClrBits
LEAF_NODE	1587:3	1587:3	15	ClrBits
LEAF_NODE	1587:10	1587:10	14	(
ARGUMENT	1587:11	1587:11	14	n
FIELD	1587:11	1587:11	15	n
LEAF_NODE	1587:11	1587:11	16	n
LEAF_NODE	1587:12	1587:12	14	)
LEAF_NODE	1587:13	1587:13	12	;
SELECTION	1588:3	1589:7	11	
KEYWORD	1588:3	1588:3	12	if
LEAF_NODE	1588:3	1588:3	13	if
LEAF_NODE	1588:6	1588:6	12	(
CONDITION	1588:7	1588:7	12	BitsAvail == 0 && ! isAligned ( cp , uint16 )
EXPR	1588:7	1588:7	13	BitsAvail == 0 && ! isAligned ( cp , uint16 )
AND	1588:7	1588:25	14	BitsAvail == 0 && ! isAligned ( cp , uint16 )
EXPR	1588:7	1588:20	15	BitsAvail == 0
FIELD	1588:7	1588:7	16	BitsAvail
LEAF_NODE	1588:7	1588:7	17	BitsAvail
EQ_OPERATOR	1588:17	1588:17	16	==
LEAF_NODE	1588:17	1588:17	17	==
FIELD	1588:20	1588:20	16	0
LEAF_NODE	1588:20	1588:20	17	0
LEAF_NODE	1588:22	1588:22	15	&&
EXPR	1588:25	1588:25	15	! isAligned ( cp , uint16 )
UNARY_EXPR	1588:25	1588:26	16	! isAligned ( cp , uint16 )
UNARY_OPERATOR	1588:25	1588:25	17	!
LEAF_NODE	1588:25	1588:25	18	!
FUNCTION_CALL	1588:26	1588:46	17	isAligned ( cp , uint16 )
CALLEE	1588:26	1588:26	18	isAligned
LEAF_NODE	1588:26	1588:26	19	isAligned
LEAF_NODE	1588:35	1588:35	18	(
ARGUMENT	1588:36	1588:36	18	cp
FIELD	1588:36	1588:36	19	cp
LEAF_NODE	1588:36	1588:36	20	cp
LEAF_NODE	1588:38	1588:38	18	,
ARGUMENT	1588:40	1588:40	18	uint16
FIELD	1588:40	1588:40	19	uint16
LEAF_NODE	1588:40	1588:40	20	uint16
LEAF_NODE	1588:46	1588:46	18	)
LEAF_NODE	1588:47	1588:47	12	)
STATEMENTS	1589:7	1589:7	12	
EXPR_STATEMENT	1589:7	1589:11	13	cp ++ ;
EXPR	1589:7	1589:7	14	cp ++
FIELD	1589:7	1589:9	15	cp ++
LEAF_NODE	1589:7	1589:7	16	cp
LEAF_NODE	1589:9	1589:9	16	++
LEAF_NODE	1589:11	1589:11	14	;
LEAF_NODE	1590:2	1590:2	10	}
EXPR_STATEMENT	1591:2	1591:23	6	buf += sp -> b . rowbytes ;
EXPR	1591:2	1591:2	7	buf += sp -> b . rowbytes
ASSIGN	1591:2	1591:9	8	buf += sp -> b . rowbytes
LVAL	1591:2	1591:2	9	buf
FIELD	1591:2	1591:2	10	buf
LEAF_NODE	1591:2	1591:2	11	buf
ASSIGN_OP	1591:6	1591:6	9	+=
LEAF_NODE	1591:6	1591:6	10	+=
RVAL	1591:9	1591:9	9	sp -> b . rowbytes
FIELD	1591:9	1591:15	10	sp -> b . rowbytes
LEAF_NODE	1591:9	1591:9	11	sp
LEAF_NODE	1591:11	1591:11	11	->
LEAF_NODE	1591:13	1591:13	11	b
LEAF_NODE	1591:14	1591:14	11	.
LEAF_NODE	1591:15	1591:15	11	rowbytes
LEAF_NODE	1591:23	1591:23	7	;
EXPR_STATEMENT	1592:2	1592:23	6	occ -= sp -> b . rowbytes ;
EXPR	1592:2	1592:2	7	occ -= sp -> b . rowbytes
ASSIGN	1592:2	1592:9	8	occ -= sp -> b . rowbytes
LVAL	1592:2	1592:2	9	occ
FIELD	1592:2	1592:2	10	occ
LEAF_NODE	1592:2	1592:2	11	occ
ASSIGN_OP	1592:6	1592:6	9	-=
LEAF_NODE	1592:6	1592:6	10	-=
RVAL	1592:9	1592:9	9	sp -> b . rowbytes
FIELD	1592:9	1592:15	10	sp -> b . rowbytes
LEAF_NODE	1592:9	1592:9	11	sp
LEAF_NODE	1592:11	1592:11	11	->
LEAF_NODE	1592:13	1592:13	11	b
LEAF_NODE	1592:14	1592:14	11	.
LEAF_NODE	1592:15	1592:15	11	rowbytes
LEAF_NODE	1592:23	1592:23	7	;
EXPR_STATEMENT	1593:2	1593:12	6	sp -> line ++ ;
EXPR	1593:2	1593:2	7	sp -> line ++
FIELD	1593:2	1593:10	8	sp -> line ++
LEAF_NODE	1593:2	1593:2	9	sp
LEAF_NODE	1593:4	1593:4	9	->
LEAF_NODE	1593:6	1593:6	9	line
LEAF_NODE	1593:10	1593:10	9	++
LEAF_NODE	1593:12	1593:12	7	;
JUMP_STATEMENT	1594:2	1594:10	6	continue DESTINATION ;
KEYWORD	1594:2	1594:2	7	continue
LEAF_NODE	1594:2	1594:2	8	continue
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1594:10	1594:10	7	;
LABEL	1595:1	1595:7	6	EOFRLE :
LEAF_NODE	1595:1	1595:1	7	EOFRLE
LEAF_NODE	1595:7	1595:7	7	:
EXPR_STATEMENT	1596:2	1596:38	6	( * sp -> fill ) ( buf , thisrun , pa , lastx ) ;
EXPR	1596:2	1596:2	7	( * sp -> fill ) ( buf , thisrun , pa , lastx )
FUNCTION_CALL	1596:2	1596:37	8	( * sp -> fill ) ( buf , thisrun , pa , lastx )
CALLEE	1596:2	1596:12	9	( * sp -> fill )
LEAF_NODE	1596:2	1596:2	10	(
UNARY_EXPR	1596:3	1596:4	10	* sp -> fill
UNARY_OPERATOR	1596:3	1596:3	11	*
LEAF_NODE	1596:3	1596:3	12	*
FIELD	1596:4	1596:8	11	sp -> fill
LEAF_NODE	1596:4	1596:4	12	sp
LEAF_NODE	1596:6	1596:6	12	->
LEAF_NODE	1596:8	1596:8	12	fill
LEAF_NODE	1596:12	1596:12	10	)
LEAF_NODE	1596:13	1596:13	9	(
ARGUMENT	1596:14	1596:14	9	buf
FIELD	1596:14	1596:14	10	buf
LEAF_NODE	1596:14	1596:14	11	buf
LEAF_NODE	1596:17	1596:17	9	,
ARGUMENT	1596:19	1596:19	9	thisrun
FIELD	1596:19	1596:19	10	thisrun
LEAF_NODE	1596:19	1596:19	11	thisrun
LEAF_NODE	1596:26	1596:26	9	,
ARGUMENT	1596:28	1596:28	9	pa
FIELD	1596:28	1596:28	10	pa
LEAF_NODE	1596:28	1596:28	11	pa
LEAF_NODE	1596:30	1596:30	9	,
ARGUMENT	1596:32	1596:32	9	lastx
FIELD	1596:32	1596:32	10	lastx
LEAF_NODE	1596:32	1596:32	11	lastx
LEAF_NODE	1596:37	1596:37	9	)
LEAF_NODE	1596:38	1596:38	7	;
EXPR_STATEMENT	1597:2	1597:24	6	UNCACHE_STATE ( tif , sp ) ;
EXPR	1597:2	1597:2	7	UNCACHE_STATE ( tif , sp )
FUNCTION_CALL	1597:2	1597:23	8	UNCACHE_STATE ( tif , sp )
CALLEE	1597:2	1597:2	9	UNCACHE_STATE
LEAF_NODE	1597:2	1597:2	10	UNCACHE_STATE
LEAF_NODE	1597:15	1597:15	9	(
ARGUMENT	1597:16	1597:16	9	tif
FIELD	1597:16	1597:16	10	tif
LEAF_NODE	1597:16	1597:16	11	tif
LEAF_NODE	1597:19	1597:19	9	,
ARGUMENT	1597:21	1597:21	9	sp
FIELD	1597:21	1597:21	10	sp
LEAF_NODE	1597:21	1597:21	11	sp
LEAF_NODE	1597:23	1597:23	9	)
LEAF_NODE	1597:24	1597:24	7	;
JUMP_STATEMENT	1598:2	1598:13	6	return ( - 1 ) ;
KEYWORD	1598:2	1598:2	7	return
LEAF_NODE	1598:2	1598:2	8	return
DESTINATION	1598:9	1598:9	7	( - 1 )
EXPR	1598:9	1598:12	8	( - 1 )
LEAF_NODE	1598:9	1598:9	9	(
UNARY_EXPR	1598:10	1598:11	9	- 1
UNARY_OPERATOR	1598:10	1598:10	10	-
LEAF_NODE	1598:10	1598:10	11	-
FIELD	1598:11	1598:11	10	1
LEAF_NODE	1598:11	1598:11	11	1
LEAF_NODE	1598:12	1598:12	9	)
LEAF_NODE	1598:13	1598:13	7	;
LEAF_NODE	1599:1	1599:1	5	}
EXPR_STATEMENT	1600:1	1600:23	3	UNCACHE_STATE ( tif , sp ) ;
EXPR	1600:1	1600:1	4	UNCACHE_STATE ( tif , sp )
FUNCTION_CALL	1600:1	1600:22	5	UNCACHE_STATE ( tif , sp )
CALLEE	1600:1	1600:1	6	UNCACHE_STATE
LEAF_NODE	1600:1	1600:1	7	UNCACHE_STATE
LEAF_NODE	1600:14	1600:14	6	(
ARGUMENT	1600:15	1600:15	6	tif
FIELD	1600:15	1600:15	7	tif
LEAF_NODE	1600:15	1600:15	8	tif
LEAF_NODE	1600:18	1600:18	6	,
ARGUMENT	1600:20	1600:20	6	sp
FIELD	1600:20	1600:20	7	sp
LEAF_NODE	1600:20	1600:20	8	sp
LEAF_NODE	1600:22	1600:22	6	)
LEAF_NODE	1600:23	1600:23	4	;
JUMP_STATEMENT	1601:1	1601:11	3	return ( 1 ) ;
KEYWORD	1601:1	1601:1	4	return
LEAF_NODE	1601:1	1601:1	5	return
DESTINATION	1601:8	1601:8	4	( 1 )
EXPR	1601:8	1601:10	5	( 1 )
LEAF_NODE	1601:8	1601:8	6	(
FIELD	1601:9	1601:9	6	1
LEAF_NODE	1601:9	1601:9	7	1
LEAF_NODE	1601:10	1601:10	6	)
LEAF_NODE	1601:11	1601:11	4	;
LEAF_NODE	1602:0	1602:0	2	}
FUNCTION_DEF	1604:0	1619:0	1	
RETURN_TYPE	1604:0	1604:0	2	int
TYPE_NAME	1604:0	1604:0	3	int
LEAF_NODE	1604:0	1604:0	4	int
FUNCTION_NAME	1605:0	1605:0	2	TIFFInitCCITTRLE
LEAF_NODE	1605:0	1605:0	3	TIFFInitCCITTRLE
PARAMETER_LIST	1605:16	1605:38	2	( TIFF * tif , int scheme )
LEAF_NODE	1605:16	1605:16	3	(
PARAMETER_DECL	1605:17	1605:23	3	TIFF * tif
TYPE	1605:17	1605:21	4	TIFF *
TYPE_NAME	1605:17	1605:17	5	TIFF
LEAF_NODE	1605:17	1605:17	6	TIFF
POINTER	1605:21	1605:21	5	*
LEAF_NODE	1605:21	1605:21	6	*
NAME	1605:23	1605:23	4	tif
LEAF_NODE	1605:23	1605:23	5	tif
LEAF_NODE	1605:26	1605:26	3	,
PARAMETER_DECL	1605:28	1605:32	3	int scheme
TYPE	1605:28	1605:28	4	int
TYPE_NAME	1605:28	1605:28	5	int
LEAF_NODE	1605:28	1605:28	6	int
NAME	1605:32	1605:32	4	scheme
LEAF_NODE	1605:32	1605:32	5	scheme
LEAF_NODE	1605:38	1605:38	3	)
LEAF_NODE	1606:0	1606:0	2	{
STATEMENTS	1607:1	1617:3	2	
EXPR_STATEMENT	1607:1	1607:14	3	( void ) scheme ;
EXPR	1607:1	1607:8	4	( void ) scheme
LEAF_NODE	1607:1	1607:1	5	(
TYPE_NAME	1607:2	1607:2	5	void
LEAF_NODE	1607:2	1607:2	6	void
LEAF_NODE	1607:6	1607:6	5	)
FIELD	1607:8	1607:8	5	scheme
LEAF_NODE	1607:8	1607:8	6	scheme
LEAF_NODE	1607:14	1607:14	4	;
SELECTION	1608:1	1608:25	3	
KEYWORD	1608:1	1608:1	4	if
LEAF_NODE	1608:1	1608:1	5	if
LEAF_NODE	1608:4	1608:4	4	(
CONDITION	1608:5	1608:5	4	InitCCITTFax3 ( tif )
EXPR	1608:5	1608:5	5	InitCCITTFax3 ( tif )
FUNCTION_CALL	1608:5	1608:22	6	InitCCITTFax3 ( tif )
CALLEE	1608:5	1608:5	7	InitCCITTFax3
LEAF_NODE	1608:5	1608:5	8	InitCCITTFax3
LEAF_NODE	1608:18	1608:18	7	(
ARGUMENT	1608:19	1608:19	7	tif
FIELD	1608:19	1608:19	8	tif
LEAF_NODE	1608:19	1608:19	9	tif
LEAF_NODE	1608:22	1608:22	7	)
LEAF_NODE	1608:23	1608:23	4	)
STATEMENTS	1608:25	1617:1	4	
LEAF_NODE	1608:25	1608:25	5	{
STATEMENTS	1609:2	1615:2	5	
EXPR_STATEMENT	1609:2	1609:36	6	tif -> tif_decoderow = Fax3DecodeRLE ;
EXPR	1609:2	1609:2	7	tif -> tif_decoderow = Fax3DecodeRLE
ASSIGN	1609:2	1609:23	8	tif -> tif_decoderow = Fax3DecodeRLE
LVAL	1609:2	1609:2	9	tif -> tif_decoderow
FIELD	1609:2	1609:7	10	tif -> tif_decoderow
LEAF_NODE	1609:2	1609:2	11	tif
LEAF_NODE	1609:5	1609:5	11	->
LEAF_NODE	1609:7	1609:7	11	tif_decoderow
ASSIGN_OP	1609:21	1609:21	9	=
LEAF_NODE	1609:21	1609:21	10	=
RVAL	1609:23	1609:23	9	Fax3DecodeRLE
FIELD	1609:23	1609:23	10	Fax3DecodeRLE
LEAF_NODE	1609:23	1609:23	11	Fax3DecodeRLE
LEAF_NODE	1609:36	1609:36	7	;
EXPR_STATEMENT	1610:2	1610:38	6	tif -> tif_decodestrip = Fax3DecodeRLE ;
EXPR	1610:2	1610:2	7	tif -> tif_decodestrip = Fax3DecodeRLE
ASSIGN	1610:2	1610:25	8	tif -> tif_decodestrip = Fax3DecodeRLE
LVAL	1610:2	1610:2	9	tif -> tif_decodestrip
FIELD	1610:2	1610:7	10	tif -> tif_decodestrip
LEAF_NODE	1610:2	1610:2	11	tif
LEAF_NODE	1610:5	1610:5	11	->
LEAF_NODE	1610:7	1610:7	11	tif_decodestrip
ASSIGN_OP	1610:23	1610:23	9	=
LEAF_NODE	1610:23	1610:23	10	=
RVAL	1610:25	1610:25	9	Fax3DecodeRLE
FIELD	1610:25	1610:25	10	Fax3DecodeRLE
LEAF_NODE	1610:25	1610:25	11	Fax3DecodeRLE
LEAF_NODE	1610:38	1610:38	7	;
EXPR_STATEMENT	1611:2	1611:37	6	tif -> tif_decodetile = Fax3DecodeRLE ;
EXPR	1611:2	1611:2	7	tif -> tif_decodetile = Fax3DecodeRLE
ASSIGN	1611:2	1611:24	8	tif -> tif_decodetile = Fax3DecodeRLE
LVAL	1611:2	1611:2	9	tif -> tif_decodetile
FIELD	1611:2	1611:7	10	tif -> tif_decodetile
LEAF_NODE	1611:2	1611:2	11	tif
LEAF_NODE	1611:5	1611:5	11	->
LEAF_NODE	1611:7	1611:7	11	tif_decodetile
ASSIGN_OP	1611:22	1611:22	9	=
LEAF_NODE	1611:22	1611:22	10	=
RVAL	1611:24	1611:24	9	Fax3DecodeRLE
FIELD	1611:24	1611:24	10	Fax3DecodeRLE
LEAF_NODE	1611:24	1611:24	11	Fax3DecodeRLE
LEAF_NODE	1611:37	1611:37	7	;
JUMP_STATEMENT	1615:2	1616:52	6	return TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_BYTEALIGN ) ;
KEYWORD	1615:2	1615:2	7	return
LEAF_NODE	1615:2	1615:2	8	return
DESTINATION	1615:9	1615:9	7	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_BYTEALIGN )
EXPR	1615:9	1615:9	8	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_BYTEALIGN )
FUNCTION_CALL	1615:9	1616:51	9	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_BYTEALIGN )
CALLEE	1615:9	1615:9	10	TIFFSetField
LEAF_NODE	1615:9	1615:9	11	TIFFSetField
LEAF_NODE	1615:21	1615:21	10	(
ARGUMENT	1615:22	1615:22	10	tif
FIELD	1615:22	1615:22	11	tif
LEAF_NODE	1615:22	1615:22	12	tif
LEAF_NODE	1615:25	1615:25	10	,
ARGUMENT	1615:27	1615:27	10	TIFFTAG_FAXMODE
FIELD	1615:27	1615:27	11	TIFFTAG_FAXMODE
LEAF_NODE	1615:27	1615:27	12	TIFFTAG_FAXMODE
LEAF_NODE	1615:42	1615:42	10	,
ARGUMENT	1616:6	1616:6	10	FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_BYTEALIGN
BIT_OR	1616:6	1616:20	11	FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_BYTEALIGN
BIT_OR_ELEM	1616:6	1616:6	12	FAXMODE_NORTC
FIELD	1616:6	1616:6	13	FAXMODE_NORTC
LEAF_NODE	1616:6	1616:6	14	FAXMODE_NORTC
LEAF_NODE	1616:19	1616:19	12	|
BIT_OR_ELEM	1616:20	1616:20	12	FAXMODE_NOEOL | FAXMODE_BYTEALIGN
BIT_OR	1616:20	1616:34	13	FAXMODE_NOEOL | FAXMODE_BYTEALIGN
BIT_OR_ELEM	1616:20	1616:20	14	FAXMODE_NOEOL
FIELD	1616:20	1616:20	15	FAXMODE_NOEOL
LEAF_NODE	1616:20	1616:20	16	FAXMODE_NOEOL
LEAF_NODE	1616:33	1616:33	14	|
BIT_OR_ELEM	1616:34	1616:34	14	FAXMODE_BYTEALIGN
FIELD	1616:34	1616:34	15	FAXMODE_BYTEALIGN
LEAF_NODE	1616:34	1616:34	16	FAXMODE_BYTEALIGN
LEAF_NODE	1616:51	1616:51	10	)
LEAF_NODE	1616:52	1616:52	7	;
LEAF_NODE	1617:1	1617:1	5	}
SELECTION	1617:3	1618:2	3	
KEYWORD	1617:3	1617:3	4	else
LEAF_NODE	1617:3	1617:3	5	else
STATEMENTS	1618:2	1618:2	4	
JUMP_STATEMENT	1618:2	1618:12	5	return ( 0 ) ;
KEYWORD	1618:2	1618:2	6	return
LEAF_NODE	1618:2	1618:2	7	return
DESTINATION	1618:9	1618:9	6	( 0 )
EXPR	1618:9	1618:11	7	( 0 )
LEAF_NODE	1618:9	1618:9	8	(
FIELD	1618:10	1618:10	8	0
LEAF_NODE	1618:10	1618:10	9	0
LEAF_NODE	1618:11	1618:11	8	)
LEAF_NODE	1618:12	1618:12	6	;
LEAF_NODE	1619:0	1619:0	2	}
FUNCTION_DEF	1621:0	1636:0	1	
RETURN_TYPE	1621:0	1621:0	2	int
TYPE_NAME	1621:0	1621:0	3	int
LEAF_NODE	1621:0	1621:0	4	int
FUNCTION_NAME	1622:0	1622:0	2	TIFFInitCCITTRLEW
LEAF_NODE	1622:0	1622:0	3	TIFFInitCCITTRLEW
PARAMETER_LIST	1622:17	1622:39	2	( TIFF * tif , int scheme )
LEAF_NODE	1622:17	1622:17	3	(
PARAMETER_DECL	1622:18	1622:24	3	TIFF * tif
TYPE	1622:18	1622:22	4	TIFF *
TYPE_NAME	1622:18	1622:18	5	TIFF
LEAF_NODE	1622:18	1622:18	6	TIFF
POINTER	1622:22	1622:22	5	*
LEAF_NODE	1622:22	1622:22	6	*
NAME	1622:24	1622:24	4	tif
LEAF_NODE	1622:24	1622:24	5	tif
LEAF_NODE	1622:27	1622:27	3	,
PARAMETER_DECL	1622:29	1622:33	3	int scheme
TYPE	1622:29	1622:29	4	int
TYPE_NAME	1622:29	1622:29	5	int
LEAF_NODE	1622:29	1622:29	6	int
NAME	1622:33	1622:33	4	scheme
LEAF_NODE	1622:33	1622:33	5	scheme
LEAF_NODE	1622:39	1622:39	3	)
LEAF_NODE	1623:0	1623:0	2	{
STATEMENTS	1624:1	1634:3	2	
EXPR_STATEMENT	1624:1	1624:14	3	( void ) scheme ;
EXPR	1624:1	1624:8	4	( void ) scheme
LEAF_NODE	1624:1	1624:1	5	(
TYPE_NAME	1624:2	1624:2	5	void
LEAF_NODE	1624:2	1624:2	6	void
LEAF_NODE	1624:6	1624:6	5	)
FIELD	1624:8	1624:8	5	scheme
LEAF_NODE	1624:8	1624:8	6	scheme
LEAF_NODE	1624:14	1624:14	4	;
SELECTION	1625:1	1625:25	3	
KEYWORD	1625:1	1625:1	4	if
LEAF_NODE	1625:1	1625:1	5	if
LEAF_NODE	1625:4	1625:4	4	(
CONDITION	1625:5	1625:5	4	InitCCITTFax3 ( tif )
EXPR	1625:5	1625:5	5	InitCCITTFax3 ( tif )
FUNCTION_CALL	1625:5	1625:22	6	InitCCITTFax3 ( tif )
CALLEE	1625:5	1625:5	7	InitCCITTFax3
LEAF_NODE	1625:5	1625:5	8	InitCCITTFax3
LEAF_NODE	1625:18	1625:18	7	(
ARGUMENT	1625:19	1625:19	7	tif
FIELD	1625:19	1625:19	8	tif
LEAF_NODE	1625:19	1625:19	9	tif
LEAF_NODE	1625:22	1625:22	7	)
LEAF_NODE	1625:23	1625:23	4	)
STATEMENTS	1625:25	1634:1	4	
LEAF_NODE	1625:25	1625:25	5	{
STATEMENTS	1626:2	1632:2	5	
EXPR_STATEMENT	1626:2	1626:36	6	tif -> tif_decoderow = Fax3DecodeRLE ;
EXPR	1626:2	1626:2	7	tif -> tif_decoderow = Fax3DecodeRLE
ASSIGN	1626:2	1626:23	8	tif -> tif_decoderow = Fax3DecodeRLE
LVAL	1626:2	1626:2	9	tif -> tif_decoderow
FIELD	1626:2	1626:7	10	tif -> tif_decoderow
LEAF_NODE	1626:2	1626:2	11	tif
LEAF_NODE	1626:5	1626:5	11	->
LEAF_NODE	1626:7	1626:7	11	tif_decoderow
ASSIGN_OP	1626:21	1626:21	9	=
LEAF_NODE	1626:21	1626:21	10	=
RVAL	1626:23	1626:23	9	Fax3DecodeRLE
FIELD	1626:23	1626:23	10	Fax3DecodeRLE
LEAF_NODE	1626:23	1626:23	11	Fax3DecodeRLE
LEAF_NODE	1626:36	1626:36	7	;
EXPR_STATEMENT	1627:2	1627:38	6	tif -> tif_decodestrip = Fax3DecodeRLE ;
EXPR	1627:2	1627:2	7	tif -> tif_decodestrip = Fax3DecodeRLE
ASSIGN	1627:2	1627:25	8	tif -> tif_decodestrip = Fax3DecodeRLE
LVAL	1627:2	1627:2	9	tif -> tif_decodestrip
FIELD	1627:2	1627:7	10	tif -> tif_decodestrip
LEAF_NODE	1627:2	1627:2	11	tif
LEAF_NODE	1627:5	1627:5	11	->
LEAF_NODE	1627:7	1627:7	11	tif_decodestrip
ASSIGN_OP	1627:23	1627:23	9	=
LEAF_NODE	1627:23	1627:23	10	=
RVAL	1627:25	1627:25	9	Fax3DecodeRLE
FIELD	1627:25	1627:25	10	Fax3DecodeRLE
LEAF_NODE	1627:25	1627:25	11	Fax3DecodeRLE
LEAF_NODE	1627:38	1627:38	7	;
EXPR_STATEMENT	1628:2	1628:37	6	tif -> tif_decodetile = Fax3DecodeRLE ;
EXPR	1628:2	1628:2	7	tif -> tif_decodetile = Fax3DecodeRLE
ASSIGN	1628:2	1628:24	8	tif -> tif_decodetile = Fax3DecodeRLE
LVAL	1628:2	1628:2	9	tif -> tif_decodetile
FIELD	1628:2	1628:7	10	tif -> tif_decodetile
LEAF_NODE	1628:2	1628:2	11	tif
LEAF_NODE	1628:5	1628:5	11	->
LEAF_NODE	1628:7	1628:7	11	tif_decodetile
ASSIGN_OP	1628:22	1628:22	9	=
LEAF_NODE	1628:22	1628:22	10	=
RVAL	1628:24	1628:24	9	Fax3DecodeRLE
FIELD	1628:24	1628:24	10	Fax3DecodeRLE
LEAF_NODE	1628:24	1628:24	11	Fax3DecodeRLE
LEAF_NODE	1628:37	1628:37	7	;
JUMP_STATEMENT	1632:2	1633:52	6	return TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_WORDALIGN ) ;
KEYWORD	1632:2	1632:2	7	return
LEAF_NODE	1632:2	1632:2	8	return
DESTINATION	1632:9	1632:9	7	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_WORDALIGN )
EXPR	1632:9	1632:9	8	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_WORDALIGN )
FUNCTION_CALL	1632:9	1633:51	9	TIFFSetField ( tif , TIFFTAG_FAXMODE , FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_WORDALIGN )
CALLEE	1632:9	1632:9	10	TIFFSetField
LEAF_NODE	1632:9	1632:9	11	TIFFSetField
LEAF_NODE	1632:21	1632:21	10	(
ARGUMENT	1632:22	1632:22	10	tif
FIELD	1632:22	1632:22	11	tif
LEAF_NODE	1632:22	1632:22	12	tif
LEAF_NODE	1632:25	1632:25	10	,
ARGUMENT	1632:27	1632:27	10	TIFFTAG_FAXMODE
FIELD	1632:27	1632:27	11	TIFFTAG_FAXMODE
LEAF_NODE	1632:27	1632:27	12	TIFFTAG_FAXMODE
LEAF_NODE	1632:42	1632:42	10	,
ARGUMENT	1633:6	1633:6	10	FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_WORDALIGN
BIT_OR	1633:6	1633:20	11	FAXMODE_NORTC | FAXMODE_NOEOL | FAXMODE_WORDALIGN
BIT_OR_ELEM	1633:6	1633:6	12	FAXMODE_NORTC
FIELD	1633:6	1633:6	13	FAXMODE_NORTC
LEAF_NODE	1633:6	1633:6	14	FAXMODE_NORTC
LEAF_NODE	1633:19	1633:19	12	|
BIT_OR_ELEM	1633:20	1633:20	12	FAXMODE_NOEOL | FAXMODE_WORDALIGN
BIT_OR	1633:20	1633:34	13	FAXMODE_NOEOL | FAXMODE_WORDALIGN
BIT_OR_ELEM	1633:20	1633:20	14	FAXMODE_NOEOL
FIELD	1633:20	1633:20	15	FAXMODE_NOEOL
LEAF_NODE	1633:20	1633:20	16	FAXMODE_NOEOL
LEAF_NODE	1633:33	1633:33	14	|
BIT_OR_ELEM	1633:34	1633:34	14	FAXMODE_WORDALIGN
FIELD	1633:34	1633:34	15	FAXMODE_WORDALIGN
LEAF_NODE	1633:34	1633:34	16	FAXMODE_WORDALIGN
LEAF_NODE	1633:51	1633:51	10	)
LEAF_NODE	1633:52	1633:52	7	;
LEAF_NODE	1634:1	1634:1	5	}
SELECTION	1634:3	1635:2	3	
KEYWORD	1634:3	1634:3	4	else
LEAF_NODE	1634:3	1634:3	5	else
STATEMENTS	1635:2	1635:2	4	
JUMP_STATEMENT	1635:2	1635:12	5	return ( 0 ) ;
KEYWORD	1635:2	1635:2	6	return
LEAF_NODE	1635:2	1635:2	7	return
DESTINATION	1635:9	1635:9	6	( 0 )
EXPR	1635:9	1635:11	7	( 0 )
LEAF_NODE	1635:9	1635:9	8	(
FIELD	1635:10	1635:10	8	0
LEAF_NODE	1635:10	1635:10	9	0
LEAF_NODE	1635:11	1635:11	8	)
LEAF_NODE	1635:12	1635:12	6	;
LEAF_NODE	1636:0	1636:0	2	}
