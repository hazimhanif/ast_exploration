SOURCE_FILE	34:0	286:0	0	
FUNCTION_DEF	34:0	50:0	1	
RETURN_TYPE	34:0	34:7	2	static int
LEAF_NODE	34:0	34:0	3	static
TYPE_NAME	34:7	34:7	3	int
LEAF_NODE	34:7	34:7	4	int
FUNCTION_NAME	35:0	35:0	2	PackBitsPreEncode
LEAF_NODE	35:0	35:0	3	PackBitsPreEncode
PARAMETER_LIST	35:17	35:37	2	( TIFF * tif , uint16 s )
LEAF_NODE	35:17	35:17	3	(
PARAMETER_DECL	35:18	35:24	3	TIFF * tif
TYPE	35:18	35:22	4	TIFF *
TYPE_NAME	35:18	35:18	5	TIFF
LEAF_NODE	35:18	35:18	6	TIFF
POINTER	35:22	35:22	5	*
LEAF_NODE	35:22	35:22	6	*
NAME	35:24	35:24	4	tif
LEAF_NODE	35:24	35:24	5	tif
LEAF_NODE	35:27	35:27	3	,
PARAMETER_DECL	35:29	35:36	3	uint16 s
TYPE	35:29	35:29	4	uint16
TYPE_NAME	35:29	35:29	5	uint16
LEAF_NODE	35:29	35:29	6	uint16
NAME	35:36	35:36	4	s
LEAF_NODE	35:36	35:36	5	s
LEAF_NODE	35:37	35:37	3	)
LEAF_NODE	36:0	36:0	2	{
STATEMENTS	37:1	49:1	2	
EXPR_STATEMENT	37:1	37:9	3	( void ) s ;
EXPR	37:1	37:8	4	( void ) s
LEAF_NODE	37:1	37:1	5	(
TYPE_NAME	37:2	37:2	5	void
LEAF_NODE	37:2	37:2	6	void
LEAF_NODE	37:6	37:6	5	)
FIELD	37:8	37:8	5	s
LEAF_NODE	37:8	37:8	6	s
LEAF_NODE	37:9	37:9	4	;
EXPR_STATEMENT	39:8	39:61	3	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( tmsize_t ) ) ;
EXPR	39:8	39:8	4	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( tmsize_t ) )
ASSIGN	39:8	39:24	5	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( tmsize_t ) )
LVAL	39:8	39:8	6	tif -> tif_data
FIELD	39:8	39:13	7	tif -> tif_data
LEAF_NODE	39:8	39:8	8	tif
LEAF_NODE	39:11	39:11	8	->
LEAF_NODE	39:13	39:13	8	tif_data
ASSIGN_OP	39:22	39:22	6	=
LEAF_NODE	39:22	39:22	7	=
RVAL	39:24	39:32	6	( uint8 * ) _TIFFmalloc ( sizeof ( tmsize_t ) )
LEAF_NODE	39:24	39:24	7	(
TYPE_NAME	39:25	39:25	7	uint8
LEAF_NODE	39:25	39:25	8	uint8
LEAF_NODE	39:30	39:30	7	*
LEAF_NODE	39:31	39:31	7	)
FUNCTION_CALL	39:32	39:60	7	_TIFFmalloc ( sizeof ( tmsize_t ) )
CALLEE	39:32	39:32	8	_TIFFmalloc
LEAF_NODE	39:32	39:32	9	_TIFFmalloc
LEAF_NODE	39:43	39:43	8	(
ARGUMENT	39:44	39:44	8	sizeof ( tmsize_t )
FUNCTION_CALL	39:44	39:59	9	sizeof ( tmsize_t )
CALLEE	39:44	39:44	10	sizeof
LEAF_NODE	39:44	39:44	11	sizeof
LEAF_NODE	39:50	39:50	10	(
ARGUMENT	39:51	39:51	10	tmsize_t
FIELD	39:51	39:51	11	tmsize_t
LEAF_NODE	39:51	39:51	12	tmsize_t
LEAF_NODE	39:59	39:59	10	)
LEAF_NODE	39:60	39:60	8	)
LEAF_NODE	39:61	39:61	4	;
SELECTION	40:1	41:2	3	
KEYWORD	40:1	40:1	4	if
LEAF_NODE	40:1	40:1	5	if
LEAF_NODE	40:4	40:4	4	(
CONDITION	40:5	40:5	4	tif -> tif_data == NULL
EXPR	40:5	40:22	5	tif -> tif_data == NULL
FIELD	40:5	40:10	6	tif -> tif_data
LEAF_NODE	40:5	40:5	7	tif
LEAF_NODE	40:8	40:8	7	->
LEAF_NODE	40:10	40:10	7	tif_data
EQ_OPERATOR	40:19	40:19	6	==
LEAF_NODE	40:19	40:19	7	==
FIELD	40:22	40:22	6	NULL
LEAF_NODE	40:22	40:22	7	NULL
LEAF_NODE	40:26	40:26	4	)
STATEMENTS	41:2	41:2	4	
JUMP_STATEMENT	41:2	41:12	5	return ( 0 ) ;
KEYWORD	41:2	41:2	6	return
LEAF_NODE	41:2	41:2	7	return
DESTINATION	41:9	41:9	6	( 0 )
EXPR	41:9	41:11	7	( 0 )
LEAF_NODE	41:9	41:9	8	(
FIELD	41:10	41:10	8	0
LEAF_NODE	41:10	41:10	9	0
LEAF_NODE	41:11	41:11	8	)
LEAF_NODE	41:12	41:12	6	;
SELECTION	45:1	46:2	3	
KEYWORD	45:1	45:1	4	if
LEAF_NODE	45:1	45:1	5	if
LEAF_NODE	45:4	45:4	4	(
CONDITION	45:5	45:5	4	isTiled ( tif )
EXPR	45:5	45:5	5	isTiled ( tif )
FUNCTION_CALL	45:5	45:16	6	isTiled ( tif )
CALLEE	45:5	45:5	7	isTiled
LEAF_NODE	45:5	45:5	8	isTiled
LEAF_NODE	45:12	45:12	7	(
ARGUMENT	45:13	45:13	7	tif
FIELD	45:13	45:13	8	tif
LEAF_NODE	45:13	45:13	9	tif
LEAF_NODE	45:16	45:16	7	)
LEAF_NODE	45:17	45:17	4	)
STATEMENTS	46:2	46:2	4	
LEAF_NODE	46:2	46:2	5	*
EXPR_STATEMENT	46:3	46:50	3	( tmsize_t * ) tif -> tif_data = TIFFTileRowSize ( tif ) ;
EXPR	46:3	46:3	4	( tmsize_t * ) tif -> tif_data = TIFFTileRowSize ( tif )
ASSIGN	46:3	46:30	5	( tmsize_t * ) tif -> tif_data = TIFFTileRowSize ( tif )
LVAL	46:3	46:14	6	( tmsize_t * ) tif -> tif_data
LEAF_NODE	46:3	46:3	7	(
TYPE_NAME	46:4	46:4	7	tmsize_t
LEAF_NODE	46:4	46:4	8	tmsize_t
LEAF_NODE	46:12	46:12	7	*
LEAF_NODE	46:13	46:13	7	)
FIELD	46:14	46:19	7	tif -> tif_data
LEAF_NODE	46:14	46:14	8	tif
LEAF_NODE	46:17	46:17	8	->
LEAF_NODE	46:19	46:19	8	tif_data
ASSIGN_OP	46:28	46:28	6	=
LEAF_NODE	46:28	46:28	7	=
RVAL	46:30	46:30	6	TIFFTileRowSize ( tif )
FUNCTION_CALL	46:30	46:49	7	TIFFTileRowSize ( tif )
CALLEE	46:30	46:30	8	TIFFTileRowSize
LEAF_NODE	46:30	46:30	9	TIFFTileRowSize
LEAF_NODE	46:45	46:45	8	(
ARGUMENT	46:46	46:46	8	tif
FIELD	46:46	46:46	9	tif
LEAF_NODE	46:46	46:46	10	tif
LEAF_NODE	46:49	46:49	8	)
LEAF_NODE	46:50	46:50	4	;
SELECTION	47:1	48:2	3	
KEYWORD	47:1	47:1	4	else
LEAF_NODE	47:1	47:1	5	else
STATEMENTS	48:2	48:2	4	
LEAF_NODE	48:2	48:2	5	*
EXPR_STATEMENT	48:3	48:51	3	( tmsize_t * ) tif -> tif_data = TIFFScanlineSize ( tif ) ;
EXPR	48:3	48:3	4	( tmsize_t * ) tif -> tif_data = TIFFScanlineSize ( tif )
ASSIGN	48:3	48:30	5	( tmsize_t * ) tif -> tif_data = TIFFScanlineSize ( tif )
LVAL	48:3	48:14	6	( tmsize_t * ) tif -> tif_data
LEAF_NODE	48:3	48:3	7	(
TYPE_NAME	48:4	48:4	7	tmsize_t
LEAF_NODE	48:4	48:4	8	tmsize_t
LEAF_NODE	48:12	48:12	7	*
LEAF_NODE	48:13	48:13	7	)
FIELD	48:14	48:19	7	tif -> tif_data
LEAF_NODE	48:14	48:14	8	tif
LEAF_NODE	48:17	48:17	8	->
LEAF_NODE	48:19	48:19	8	tif_data
ASSIGN_OP	48:28	48:28	6	=
LEAF_NODE	48:28	48:28	7	=
RVAL	48:30	48:30	6	TIFFScanlineSize ( tif )
FUNCTION_CALL	48:30	48:50	7	TIFFScanlineSize ( tif )
CALLEE	48:30	48:30	8	TIFFScanlineSize
LEAF_NODE	48:30	48:30	9	TIFFScanlineSize
LEAF_NODE	48:46	48:46	8	(
ARGUMENT	48:47	48:47	8	tif
FIELD	48:47	48:47	9	tif
LEAF_NODE	48:47	48:47	10	tif
LEAF_NODE	48:50	48:50	8	)
LEAF_NODE	48:51	48:51	4	;
JUMP_STATEMENT	49:1	49:11	3	return ( 1 ) ;
KEYWORD	49:1	49:1	4	return
LEAF_NODE	49:1	49:1	5	return
DESTINATION	49:8	49:8	4	( 1 )
EXPR	49:8	49:10	5	( 1 )
LEAF_NODE	49:8	49:8	6	(
FIELD	49:9	49:9	6	1
LEAF_NODE	49:9	49:9	7	1
LEAF_NODE	49:10	49:10	6	)
LEAF_NODE	49:11	49:11	4	;
LEAF_NODE	50:0	50:0	2	}
FUNCTION_DEF	52:0	58:0	1	
RETURN_TYPE	52:0	52:7	2	static int
LEAF_NODE	52:0	52:0	3	static
TYPE_NAME	52:7	52:7	3	int
LEAF_NODE	52:7	52:7	4	int
FUNCTION_NAME	53:0	53:0	2	PackBitsPostEncode
LEAF_NODE	53:0	53:0	3	PackBitsPostEncode
PARAMETER_LIST	53:18	53:28	2	( TIFF * tif )
LEAF_NODE	53:18	53:18	3	(
PARAMETER_DECL	53:19	53:25	3	TIFF * tif
TYPE	53:19	53:23	4	TIFF *
TYPE_NAME	53:19	53:19	5	TIFF
LEAF_NODE	53:19	53:19	6	TIFF
POINTER	53:23	53:23	5	*
LEAF_NODE	53:23	53:23	6	*
NAME	53:25	53:25	4	tif
LEAF_NODE	53:25	53:25	5	tif
LEAF_NODE	53:28	53:28	3	)
LEAF_NODE	54:0	54:0	2	{
STATEMENTS	55:8	57:1	2	
SELECTION	55:8	56:12	3	
KEYWORD	55:8	55:8	4	if
LEAF_NODE	55:8	55:8	5	if
LEAF_NODE	55:11	55:11	4	(
CONDITION	55:12	55:12	4	tif -> tif_data
EXPR	55:12	55:12	5	tif -> tif_data
FIELD	55:12	55:17	6	tif -> tif_data
LEAF_NODE	55:12	55:12	7	tif
LEAF_NODE	55:15	55:15	7	->
LEAF_NODE	55:17	55:17	7	tif_data
LEAF_NODE	55:25	55:25	4	)
STATEMENTS	56:12	56:12	4	
EXPR_STATEMENT	56:12	56:36	5	_TIFFfree ( tif -> tif_data ) ;
EXPR	56:12	56:12	6	_TIFFfree ( tif -> tif_data )
FUNCTION_CALL	56:12	56:35	7	_TIFFfree ( tif -> tif_data )
CALLEE	56:12	56:12	8	_TIFFfree
LEAF_NODE	56:12	56:12	9	_TIFFfree
LEAF_NODE	56:21	56:21	8	(
ARGUMENT	56:22	56:22	8	tif -> tif_data
FIELD	56:22	56:27	9	tif -> tif_data
LEAF_NODE	56:22	56:22	10	tif
LEAF_NODE	56:25	56:25	10	->
LEAF_NODE	56:27	56:27	10	tif_data
LEAF_NODE	56:35	56:35	8	)
LEAF_NODE	56:36	56:36	6	;
JUMP_STATEMENT	57:1	57:11	3	return ( 1 ) ;
KEYWORD	57:1	57:1	4	return
LEAF_NODE	57:1	57:1	5	return
DESTINATION	57:8	57:8	4	( 1 )
EXPR	57:8	57:10	5	( 1 )
LEAF_NODE	57:8	57:8	6	(
FIELD	57:9	57:9	6	1
LEAF_NODE	57:9	57:9	7	1
LEAF_NODE	57:10	57:10	6	)
LEAF_NODE	57:11	57:11	4	;
LEAF_NODE	58:0	58:0	2	}
FUNCTION_DEF	63:0	185:0	1	
RETURN_TYPE	63:0	63:7	2	static int
LEAF_NODE	63:0	63:0	3	static
TYPE_NAME	63:7	63:7	3	int
LEAF_NODE	63:7	63:7	4	int
FUNCTION_NAME	64:0	64:0	2	PackBitsEncode
LEAF_NODE	64:0	64:0	3	PackBitsEncode
PARAMETER_LIST	64:14	64:59	2	( TIFF * tif , uint8 * buf , tmsize_t cc , uint16 s )
LEAF_NODE	64:14	64:14	3	(
PARAMETER_DECL	64:15	64:21	3	TIFF * tif
TYPE	64:15	64:19	4	TIFF *
TYPE_NAME	64:15	64:15	5	TIFF
LEAF_NODE	64:15	64:15	6	TIFF
POINTER	64:19	64:19	5	*
LEAF_NODE	64:19	64:19	6	*
NAME	64:21	64:21	4	tif
LEAF_NODE	64:21	64:21	5	tif
LEAF_NODE	64:24	64:24	3	,
PARAMETER_DECL	64:26	64:33	3	uint8 * buf
TYPE	64:26	64:31	4	uint8 *
TYPE_NAME	64:26	64:26	5	uint8
LEAF_NODE	64:26	64:26	6	uint8
POINTER	64:31	64:31	5	*
LEAF_NODE	64:31	64:31	6	*
NAME	64:33	64:33	4	buf
LEAF_NODE	64:33	64:33	5	buf
LEAF_NODE	64:36	64:36	3	,
PARAMETER_DECL	64:38	64:47	3	tmsize_t cc
TYPE	64:38	64:38	4	tmsize_t
TYPE_NAME	64:38	64:38	5	tmsize_t
LEAF_NODE	64:38	64:38	6	tmsize_t
NAME	64:47	64:47	4	cc
LEAF_NODE	64:47	64:47	5	cc
LEAF_NODE	64:49	64:49	3	,
PARAMETER_DECL	64:51	64:58	3	uint16 s
TYPE	64:51	64:51	4	uint16
TYPE_NAME	64:51	64:51	5	uint16
LEAF_NODE	64:51	64:51	6	uint16
NAME	64:58	64:58	4	s
LEAF_NODE	64:58	64:58	5	s
LEAF_NODE	64:59	64:59	3	)
LEAF_NODE	65:0	65:0	2	{
STATEMENTS	66:1	184:1	2	
SIMPLE_DECL	66:1	66:41	3	unsigned char * bp ; bp = ( unsigned char * ) buf ;
VAR_DECL	66:1	66:16	4	unsigned char * bp ; bp = ( unsigned char * ) buf
TYPE	66:1	66:14	5	unsigned char *
TYPE_NAME	66:1	66:10	6	unsigned char
LEAF_NODE	66:1	66:1	7	unsigned
LEAF_NODE	66:10	66:10	7	char
POINTER	66:14	66:14	6	*
LEAF_NODE	66:14	66:14	7	*
NAME	66:16	66:16	5	bp
LEAF_NODE	66:16	66:16	6	bp
LEAF_NODE	0:0	0:0	5	;
INIT	66:16	66:16	5	bp = ( unsigned char * ) buf
ASSIGN	66:16	66:21	6	bp = ( unsigned char * ) buf
LVAL	66:16	66:16	7	bp
NAME	66:16	66:16	8	bp
LEAF_NODE	66:16	66:16	9	bp
ASSIGN_OP	66:19	66:19	7	=
LEAF_NODE	66:19	66:19	8	=
RVAL	66:21	66:38	7	( unsigned char * ) buf
LEAF_NODE	66:21	66:21	8	(
TYPE_NAME	66:22	66:31	8	unsigned char
LEAF_NODE	66:22	66:22	9	unsigned
LEAF_NODE	66:31	66:31	9	char
LEAF_NODE	66:35	66:35	8	*
LEAF_NODE	66:36	66:36	8	)
FIELD	66:38	66:38	8	buf
LEAF_NODE	66:38	66:38	9	buf
LEAF_NODE	66:41	66:41	4	;
SIMPLE_DECL	67:1	67:10	3	uint8 * op ;
VAR_DECL	67:1	67:8	4	uint8 * op
TYPE	67:1	67:6	5	uint8 *
TYPE_NAME	67:1	67:1	6	uint8
LEAF_NODE	67:1	67:1	7	uint8
POINTER	67:6	67:6	6	*
LEAF_NODE	67:6	67:6	7	*
NAME	67:8	67:8	5	op
LEAF_NODE	67:8	67:8	6	op
LEAF_NODE	67:10	67:10	4	;
SIMPLE_DECL	68:1	68:10	3	uint8 * ep ;
VAR_DECL	68:1	68:8	4	uint8 * ep
TYPE	68:1	68:6	5	uint8 *
TYPE_NAME	68:1	68:1	6	uint8
LEAF_NODE	68:1	68:1	7	uint8
POINTER	68:6	68:6	6	*
LEAF_NODE	68:6	68:6	7	*
NAME	68:8	68:8	5	ep
LEAF_NODE	68:8	68:8	6	ep
LEAF_NODE	68:10	68:10	4	;
SIMPLE_DECL	69:1	69:19	3	uint8 * lastliteral ;
VAR_DECL	69:1	69:8	4	uint8 * lastliteral
TYPE	69:1	69:6	5	uint8 *
TYPE_NAME	69:1	69:1	6	uint8
LEAF_NODE	69:1	69:1	7	uint8
POINTER	69:6	69:6	6	*
LEAF_NODE	69:6	69:6	7	*
NAME	69:8	69:8	5	lastliteral
LEAF_NODE	69:8	69:8	6	lastliteral
LEAF_NODE	69:19	69:19	4	;
SIMPLE_DECL	70:1	70:13	3	long n , long slop ;
INIT_DECL_LIST	70:1	70:1	4	long n , long slop
VAR_DECL	70:1	70:6	5	long n
TYPE	70:1	70:1	6	long
TYPE_NAME	70:1	70:1	7	long
LEAF_NODE	70:1	70:1	8	long
NAME	70:6	70:6	6	n
LEAF_NODE	70:6	70:6	7	n
LEAF_NODE	70:7	70:7	5	,
VAR_DECL	70:1	70:9	5	long slop
TYPE	70:1	70:1	6	long
TYPE_NAME	70:1	70:1	7	long
LEAF_NODE	70:1	70:1	8	long
NAME	70:9	70:9	6	slop
LEAF_NODE	70:9	70:9	7	slop
LEAF_NODE	70:13	70:13	4	;
SIMPLE_DECL	71:1	71:6	3	int b ;
VAR_DECL	71:1	71:5	4	int b
TYPE	71:1	71:1	5	int
TYPE_NAME	71:1	71:1	6	int
LEAF_NODE	71:1	71:1	7	int
NAME	71:5	71:5	5	b
LEAF_NODE	71:5	71:5	6	b
LEAF_NODE	71:6	71:6	4	;
SIMPLE_DECL	72:1	72:47	3	enum CLASS_NAME BASE_CLASSES { BASE , LITERAL , RUN , LITERAL_RUN } state ;
VAR_DECL	72:1	72:42	4	enum CLASS_NAME BASE_CLASSES { BASE , LITERAL , RUN , LITERAL_RUN } state
TYPE	72:1	72:1	5	enum CLASS_NAME BASE_CLASSES { BASE , LITERAL , RUN , LITERAL_RUN }
CLASS_DEF	72:1	72:40	6	enum CLASS_NAME BASE_CLASSES { BASE , LITERAL , RUN , LITERAL_RUN }
LEAF_NODE	72:1	72:1	7	enum
LEAF_NODE	0:0	0:0	7	CLASS_NAME
LEAF_NODE	0:0	0:0	7	BASE_CLASSES
LEAF_NODE	72:6	72:6	7	{
CLASS_CONTENT	72:8	72:28	7	BASE , LITERAL , RUN , LITERAL_RUN
LEAF_NODE	72:8	72:8	8	BASE
LEAF_NODE	72:12	72:12	8	,
LEAF_NODE	72:14	72:14	8	LITERAL
LEAF_NODE	72:21	72:21	8	,
LEAF_NODE	72:23	72:23	8	RUN
LEAF_NODE	72:26	72:26	8	,
LEAF_NODE	72:28	72:28	8	LITERAL_RUN
LEAF_NODE	72:40	72:40	7	}
NAME	72:42	72:42	5	state
LEAF_NODE	72:42	72:42	6	state
LEAF_NODE	72:47	72:47	4	;
EXPR_STATEMENT	74:1	74:9	3	( void ) s ;
EXPR	74:1	74:8	4	( void ) s
LEAF_NODE	74:1	74:1	5	(
TYPE_NAME	74:2	74:2	5	void
LEAF_NODE	74:2	74:2	6	void
LEAF_NODE	74:6	74:6	5	)
FIELD	74:8	74:8	5	s
LEAF_NODE	74:8	74:8	6	s
LEAF_NODE	74:9	74:9	4	;
EXPR_STATEMENT	75:1	75:20	3	op = tif -> tif_rawcp ;
EXPR	75:1	75:1	4	op = tif -> tif_rawcp
ASSIGN	75:1	75:6	5	op = tif -> tif_rawcp
LVAL	75:1	75:1	6	op
FIELD	75:1	75:1	7	op
LEAF_NODE	75:1	75:1	8	op
ASSIGN_OP	75:4	75:4	6	=
LEAF_NODE	75:4	75:4	7	=
RVAL	75:6	75:6	6	tif -> tif_rawcp
FIELD	75:6	75:11	7	tif -> tif_rawcp
LEAF_NODE	75:6	75:6	8	tif
LEAF_NODE	75:9	75:9	8	->
LEAF_NODE	75:11	75:11	8	tif_rawcp
LEAF_NODE	75:20	75:20	4	;
EXPR_STATEMENT	76:1	76:45	3	ep = tif -> tif_rawdata + tif -> tif_rawdatasize ;
EXPR	76:1	76:1	4	ep = tif -> tif_rawdata + tif -> tif_rawdatasize
ASSIGN	76:1	76:6	5	ep = tif -> tif_rawdata + tif -> tif_rawdatasize
LVAL	76:1	76:1	6	ep
FIELD	76:1	76:1	7	ep
LEAF_NODE	76:1	76:1	8	ep
ASSIGN_OP	76:4	76:4	6	=
LEAF_NODE	76:4	76:4	7	=
RVAL	76:6	76:25	6	tif -> tif_rawdata + tif -> tif_rawdatasize
FIELD	76:6	76:11	7	tif -> tif_rawdata
LEAF_NODE	76:6	76:6	8	tif
LEAF_NODE	76:9	76:9	8	->
LEAF_NODE	76:11	76:11	8	tif_rawdata
LEAF_NODE	76:23	76:23	7	+
FIELD	76:25	76:30	7	tif -> tif_rawdatasize
LEAF_NODE	76:25	76:25	8	tif
LEAF_NODE	76:28	76:28	8	->
LEAF_NODE	76:30	76:30	8	tif_rawdatasize
LEAF_NODE	76:45	76:45	4	;
EXPR_STATEMENT	77:1	77:13	3	state = BASE ;
EXPR	77:1	77:1	4	state = BASE
ASSIGN	77:1	77:9	5	state = BASE
LVAL	77:1	77:1	6	state
FIELD	77:1	77:1	7	state
LEAF_NODE	77:1	77:1	8	state
ASSIGN_OP	77:7	77:7	6	=
LEAF_NODE	77:7	77:7	7	=
RVAL	77:9	77:9	6	BASE
FIELD	77:9	77:9	7	BASE
LEAF_NODE	77:9	77:9	8	BASE
LEAF_NODE	77:13	77:13	4	;
EXPR_STATEMENT	78:1	78:16	3	lastliteral = 0 ;
EXPR	78:1	78:1	4	lastliteral = 0
ASSIGN	78:1	78:15	5	lastliteral = 0
LVAL	78:1	78:1	6	lastliteral
FIELD	78:1	78:1	7	lastliteral
LEAF_NODE	78:1	78:1	8	lastliteral
ASSIGN_OP	78:13	78:13	6	=
LEAF_NODE	78:13	78:13	7	=
RVAL	78:15	78:15	6	0
FIELD	78:15	78:15	7	0
LEAF_NODE	78:15	78:15	8	0
LEAF_NODE	78:16	78:16	4	;
ITERATION	79:1	79:16	3	
KEYWORD	79:1	79:1	4	while
LEAF_NODE	79:1	79:1	5	while
LEAF_NODE	79:7	79:7	4	(
CONDITION	79:8	79:8	4	cc > 0
EXPR	79:8	79:13	5	cc > 0
FIELD	79:8	79:8	6	cc
LEAF_NODE	79:8	79:8	7	cc
REL_OPERATOR	79:11	79:11	6	>
LEAF_NODE	79:11	79:11	7	>
FIELD	79:13	79:13	6	0
LEAF_NODE	79:13	79:13	7	0
LEAF_NODE	79:14	79:14	4	)
STATEMENTS	79:16	181:1	4	
LEAF_NODE	79:16	79:16	5	{
STATEMENTS	83:2	112:2	5	
EXPR_STATEMENT	83:2	83:11	6	b = * bp ++ ;
EXPR	83:2	83:2	7	b = * bp ++
ASSIGN	83:2	83:6	8	b = * bp ++
LVAL	83:2	83:2	9	b
FIELD	83:2	83:2	10	b
LEAF_NODE	83:2	83:2	11	b
ASSIGN_OP	83:4	83:4	9	=
LEAF_NODE	83:4	83:4	10	=
RVAL	83:6	83:6	9	* bp ++
UNARY_EXPR	83:6	83:7	10	* bp ++
UNARY_OPERATOR	83:6	83:6	11	*
LEAF_NODE	83:6	83:6	12	*
FIELD	83:7	83:9	11	bp ++
LEAF_NODE	83:7	83:7	12	bp
LEAF_NODE	83:9	83:9	12	++
LEAF_NODE	83:11	83:11	7	;
EXPR_STATEMENT	84:2	84:6	6	cc -- ;
EXPR	84:2	84:2	7	cc --
FIELD	84:2	84:4	8	cc --
LEAF_NODE	84:2	84:2	9	cc
LEAF_NODE	84:4	84:4	9	--
LEAF_NODE	84:6	84:6	7	;
EXPR_STATEMENT	85:2	85:7	6	n = 1 ;
EXPR	85:2	85:2	7	n = 1
ASSIGN	85:2	85:6	8	n = 1
LVAL	85:2	85:2	9	n
FIELD	85:2	85:2	10	n
LEAF_NODE	85:2	85:2	11	n
ASSIGN_OP	85:4	85:4	9	=
LEAF_NODE	85:4	85:4	10	=
RVAL	85:6	85:6	9	1
FIELD	85:6	85:6	10	1
LEAF_NODE	85:6	85:6	11	1
LEAF_NODE	85:7	85:7	7	;
ITERATION	86:2	87:3	6	
KEYWORD	86:2	86:2	7	for
LEAF_NODE	86:2	86:2	8	for
LEAF_NODE	86:6	86:6	7	(
FOR_INIT	86:7	86:7	7	;
LEAF_NODE	86:7	86:7	8	;
CONDITION	86:9	86:9	7	cc > 0 && b == * bp
EXPR	86:9	86:9	8	cc > 0 && b == * bp
AND	86:9	86:19	9	cc > 0 && b == * bp
EXPR	86:9	86:14	10	cc > 0
FIELD	86:9	86:9	11	cc
LEAF_NODE	86:9	86:9	12	cc
REL_OPERATOR	86:12	86:12	11	>
LEAF_NODE	86:12	86:12	12	>
FIELD	86:14	86:14	11	0
LEAF_NODE	86:14	86:14	12	0
LEAF_NODE	86:16	86:16	10	&&
EXPR	86:19	86:24	10	b == * bp
FIELD	86:19	86:19	11	b
LEAF_NODE	86:19	86:19	12	b
EQ_OPERATOR	86:21	86:21	11	==
LEAF_NODE	86:21	86:21	12	==
UNARY_EXPR	86:24	86:25	11	* bp
UNARY_OPERATOR	86:24	86:24	12	*
LEAF_NODE	86:24	86:24	13	*
FIELD	86:25	86:25	12	bp
LEAF_NODE	86:25	86:25	13	bp
LEAF_NODE	86:27	86:27	7	;
FOR_EXPR	86:29	86:29	7	cc -- , bp ++
EXPR	86:29	86:35	8	cc -- , bp ++
FIELD	86:29	86:31	9	cc --
LEAF_NODE	86:29	86:29	10	cc
LEAF_NODE	86:31	86:31	10	--
LEAF_NODE	86:33	86:33	9	,
FIELD	86:35	86:37	9	bp ++
LEAF_NODE	86:35	86:35	10	bp
LEAF_NODE	86:37	86:37	10	++
LEAF_NODE	86:39	86:39	7	)
STATEMENTS	87:3	87:3	7	
EXPR_STATEMENT	87:3	87:6	8	n ++ ;
EXPR	87:3	87:3	9	n ++
FIELD	87:3	87:4	10	n ++
LEAF_NODE	87:3	87:3	11	n
LEAF_NODE	87:4	87:4	11	++
LEAF_NODE	87:6	87:6	9	;
LABEL	88:1	88:6	6	again :
LEAF_NODE	88:1	88:1	7	again
LEAF_NODE	88:6	88:6	7	:
SELECTION	89:2	89:20	6	
KEYWORD	89:2	89:2	7	if
LEAF_NODE	89:2	89:2	8	if
LEAF_NODE	89:5	89:5	7	(
CONDITION	89:6	89:6	7	op + 2 >= ep
EXPR	89:6	89:16	8	op + 2 >= ep
FIELD	89:6	89:6	9	op
LEAF_NODE	89:6	89:6	10	op
LEAF_NODE	89:9	89:9	9	+
FIELD	89:11	89:11	9	2
LEAF_NODE	89:11	89:11	10	2
REL_OPERATOR	89:13	89:13	9	>=
LEAF_NODE	89:13	89:13	10	>=
FIELD	89:16	89:16	9	ep
LEAF_NODE	89:16	89:16	10	ep
LEAF_NODE	89:18	89:18	7	)
STATEMENTS	89:20	111:2	7	
LEAF_NODE	89:20	89:20	8	{
STATEMENTS	96:3	105:5	8	
SELECTION	96:3	96:49	9	
KEYWORD	96:3	96:3	10	if
LEAF_NODE	96:3	96:3	11	if
LEAF_NODE	96:6	96:6	10	(
CONDITION	96:7	96:7	10	state == LITERAL || state == LITERAL_RUN
EXPR	96:7	96:7	11	state == LITERAL || state == LITERAL_RUN
OR	96:7	96:27	12	state == LITERAL || state == LITERAL_RUN
EXPR	96:7	96:16	13	state == LITERAL
FIELD	96:7	96:7	14	state
LEAF_NODE	96:7	96:7	15	state
EQ_OPERATOR	96:13	96:13	14	==
LEAF_NODE	96:13	96:13	15	==
FIELD	96:16	96:16	14	LITERAL
LEAF_NODE	96:16	96:16	15	LITERAL
LEAF_NODE	96:24	96:24	13	||
EXPR	96:27	96:36	13	state == LITERAL_RUN
FIELD	96:27	96:27	14	state
LEAF_NODE	96:27	96:27	15	state
EQ_OPERATOR	96:33	96:33	14	==
LEAF_NODE	96:33	96:33	15	==
FIELD	96:36	96:36	14	LITERAL_RUN
LEAF_NODE	96:36	96:36	15	LITERAL_RUN
LEAF_NODE	96:47	96:47	10	)
STATEMENTS	96:49	105:3	10	
LEAF_NODE	96:49	96:49	11	{
STATEMENTS	97:4	104:4	11	
EXPR_STATEMENT	97:4	97:35	12	slop = ( long ) ( op - lastliteral ) ;
EXPR	97:4	97:4	13	slop = ( long ) ( op - lastliteral )
ASSIGN	97:4	97:11	14	slop = ( long ) ( op - lastliteral )
LVAL	97:4	97:4	15	slop
FIELD	97:4	97:4	16	slop
LEAF_NODE	97:4	97:4	17	slop
ASSIGN_OP	97:9	97:9	15	=
LEAF_NODE	97:9	97:9	16	=
RVAL	97:11	97:34	15	( long ) ( op - lastliteral )
LEAF_NODE	97:11	97:11	16	(
TYPE_NAME	97:12	97:12	16	long
LEAF_NODE	97:12	97:12	17	long
LEAF_NODE	97:16	97:16	16	)
LEAF_NODE	97:17	97:17	16	(
FIELD	97:18	97:18	16	op
LEAF_NODE	97:18	97:18	17	op
LEAF_NODE	97:21	97:21	16	-
FIELD	97:23	97:23	16	lastliteral
LEAF_NODE	97:23	97:23	17	lastliteral
LEAF_NODE	97:34	97:34	16	)
LEAF_NODE	97:35	97:35	13	;
EXPR_STATEMENT	98:4	98:62	12	tif -> tif_rawcc += ( tmsize_t ) ( lastliteral - tif -> tif_rawcp ) ;
EXPR	98:4	98:4	13	tif -> tif_rawcc += ( tmsize_t ) ( lastliteral - tif -> tif_rawcp )
ASSIGN	98:4	98:22	14	tif -> tif_rawcc += ( tmsize_t ) ( lastliteral - tif -> tif_rawcp )
LVAL	98:4	98:4	15	tif -> tif_rawcc
FIELD	98:4	98:9	16	tif -> tif_rawcc
LEAF_NODE	98:4	98:4	17	tif
LEAF_NODE	98:7	98:7	17	->
LEAF_NODE	98:9	98:9	17	tif_rawcc
ASSIGN_OP	98:19	98:19	15	+=
LEAF_NODE	98:19	98:19	16	+=
RVAL	98:22	98:61	15	( tmsize_t ) ( lastliteral - tif -> tif_rawcp )
LEAF_NODE	98:22	98:22	16	(
TYPE_NAME	98:23	98:23	16	tmsize_t
LEAF_NODE	98:23	98:23	17	tmsize_t
LEAF_NODE	98:31	98:31	16	)
LEAF_NODE	98:32	98:32	16	(
FIELD	98:33	98:33	16	lastliteral
LEAF_NODE	98:33	98:33	17	lastliteral
LEAF_NODE	98:45	98:45	16	-
FIELD	98:47	98:52	16	tif -> tif_rawcp
LEAF_NODE	98:47	98:47	17	tif
LEAF_NODE	98:50	98:50	17	->
LEAF_NODE	98:52	98:52	17	tif_rawcp
LEAF_NODE	98:61	98:61	16	)
LEAF_NODE	98:62	98:62	13	;
SELECTION	99:4	100:5	12	
KEYWORD	99:4	99:4	13	if
LEAF_NODE	99:4	99:4	14	if
LEAF_NODE	99:7	99:7	13	(
CONDITION	99:8	99:8	13	! TIFFFlushData1 ( tif )
EXPR	99:8	99:8	14	! TIFFFlushData1 ( tif )
UNARY_EXPR	99:8	99:9	15	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	99:8	99:8	16	!
LEAF_NODE	99:8	99:8	17	!
FUNCTION_CALL	99:9	99:27	16	TIFFFlushData1 ( tif )
CALLEE	99:9	99:9	17	TIFFFlushData1
LEAF_NODE	99:9	99:9	18	TIFFFlushData1
LEAF_NODE	99:23	99:23	17	(
ARGUMENT	99:24	99:24	17	tif
FIELD	99:24	99:24	18	tif
LEAF_NODE	99:24	99:24	19	tif
LEAF_NODE	99:27	99:27	17	)
LEAF_NODE	99:28	99:28	13	)
STATEMENTS	100:5	100:5	13	
JUMP_STATEMENT	100:5	100:15	14	return ( 0 ) ;
KEYWORD	100:5	100:5	15	return
LEAF_NODE	100:5	100:5	16	return
DESTINATION	100:12	100:12	15	( 0 )
EXPR	100:12	100:14	16	( 0 )
LEAF_NODE	100:12	100:12	17	(
FIELD	100:13	100:13	17	0
LEAF_NODE	100:13	100:13	18	0
LEAF_NODE	100:14	100:14	17	)
LEAF_NODE	100:15	100:15	15	;
EXPR_STATEMENT	101:4	101:23	12	op = tif -> tif_rawcp ;
EXPR	101:4	101:4	13	op = tif -> tif_rawcp
ASSIGN	101:4	101:9	14	op = tif -> tif_rawcp
LVAL	101:4	101:4	15	op
FIELD	101:4	101:4	16	op
LEAF_NODE	101:4	101:4	17	op
ASSIGN_OP	101:7	101:7	15	=
LEAF_NODE	101:7	101:7	16	=
RVAL	101:9	101:9	15	tif -> tif_rawcp
FIELD	101:9	101:14	16	tif -> tif_rawcp
LEAF_NODE	101:9	101:9	17	tif
LEAF_NODE	101:12	101:12	17	->
LEAF_NODE	101:14	101:14	17	tif_rawcp
LEAF_NODE	101:23	101:23	13	;
ITERATION	102:4	103:5	12	
KEYWORD	102:4	102:4	13	while
LEAF_NODE	102:4	102:4	14	while
LEAF_NODE	102:10	102:10	13	(
CONDITION	102:11	102:11	13	slop -- > 0
EXPR	102:11	102:20	14	slop -- > 0
FIELD	102:11	102:15	15	slop --
LEAF_NODE	102:11	102:11	16	slop
LEAF_NODE	102:15	102:15	16	--
REL_OPERATOR	102:18	102:18	15	>
LEAF_NODE	102:18	102:18	16	>
FIELD	102:20	102:20	15	0
LEAF_NODE	102:20	102:20	16	0
LEAF_NODE	102:21	102:21	13	)
STATEMENTS	103:5	103:5	13	
EXPR_STATEMENT	103:5	103:27	14	* op ++ = * lastliteral ++ ;
EXPR	103:5	103:5	15	* op ++ = * lastliteral ++
ASSIGN	103:5	103:13	16	* op ++ = * lastliteral ++
LVAL	103:5	103:5	17	* op ++
UNARY_EXPR	103:5	103:6	18	* op ++
UNARY_OPERATOR	103:5	103:5	19	*
LEAF_NODE	103:5	103:5	20	*
FIELD	103:6	103:8	19	op ++
LEAF_NODE	103:6	103:6	20	op
LEAF_NODE	103:8	103:8	20	++
ASSIGN_OP	103:11	103:11	17	=
LEAF_NODE	103:11	103:11	18	=
RVAL	103:13	103:13	17	* lastliteral ++
UNARY_EXPR	103:13	103:14	18	* lastliteral ++
UNARY_OPERATOR	103:13	103:13	19	*
LEAF_NODE	103:13	103:13	20	*
FIELD	103:14	103:25	19	lastliteral ++
LEAF_NODE	103:14	103:14	20	lastliteral
LEAF_NODE	103:25	103:25	20	++
LEAF_NODE	103:27	103:27	15	;
EXPR_STATEMENT	104:4	104:32	12	lastliteral = tif -> tif_rawcp ;
EXPR	104:4	104:4	13	lastliteral = tif -> tif_rawcp
ASSIGN	104:4	104:18	14	lastliteral = tif -> tif_rawcp
LVAL	104:4	104:4	15	lastliteral
FIELD	104:4	104:4	16	lastliteral
LEAF_NODE	104:4	104:4	17	lastliteral
ASSIGN_OP	104:16	104:16	15	=
LEAF_NODE	104:16	104:16	16	=
RVAL	104:18	104:18	15	tif -> tif_rawcp
FIELD	104:18	104:23	16	tif -> tif_rawcp
LEAF_NODE	104:18	104:18	17	tif
LEAF_NODE	104:21	104:21	17	->
LEAF_NODE	104:23	104:23	17	tif_rawcp
LEAF_NODE	104:32	104:32	13	;
LEAF_NODE	105:3	105:3	11	}
SELECTION	105:5	105:10	9	
KEYWORD	105:5	105:5	10	else
LEAF_NODE	105:5	105:5	11	else
STATEMENTS	105:10	110:3	10	
LEAF_NODE	105:10	105:10	11	{
STATEMENTS	106:4	109:4	11	
EXPR_STATEMENT	106:4	106:53	12	tif -> tif_rawcc += ( tmsize_t ) ( op - tif -> tif_rawcp ) ;
EXPR	106:4	106:4	13	tif -> tif_rawcc += ( tmsize_t ) ( op - tif -> tif_rawcp )
ASSIGN	106:4	106:22	14	tif -> tif_rawcc += ( tmsize_t ) ( op - tif -> tif_rawcp )
LVAL	106:4	106:4	15	tif -> tif_rawcc
FIELD	106:4	106:9	16	tif -> tif_rawcc
LEAF_NODE	106:4	106:4	17	tif
LEAF_NODE	106:7	106:7	17	->
LEAF_NODE	106:9	106:9	17	tif_rawcc
ASSIGN_OP	106:19	106:19	15	+=
LEAF_NODE	106:19	106:19	16	+=
RVAL	106:22	106:52	15	( tmsize_t ) ( op - tif -> tif_rawcp )
LEAF_NODE	106:22	106:22	16	(
TYPE_NAME	106:23	106:23	16	tmsize_t
LEAF_NODE	106:23	106:23	17	tmsize_t
LEAF_NODE	106:31	106:31	16	)
LEAF_NODE	106:32	106:32	16	(
FIELD	106:33	106:33	16	op
LEAF_NODE	106:33	106:33	17	op
LEAF_NODE	106:36	106:36	16	-
FIELD	106:38	106:43	16	tif -> tif_rawcp
LEAF_NODE	106:38	106:38	17	tif
LEAF_NODE	106:41	106:41	17	->
LEAF_NODE	106:43	106:43	17	tif_rawcp
LEAF_NODE	106:52	106:52	16	)
LEAF_NODE	106:53	106:53	13	;
SELECTION	107:4	108:5	12	
KEYWORD	107:4	107:4	13	if
LEAF_NODE	107:4	107:4	14	if
LEAF_NODE	107:7	107:7	13	(
CONDITION	107:8	107:8	13	! TIFFFlushData1 ( tif )
EXPR	107:8	107:8	14	! TIFFFlushData1 ( tif )
UNARY_EXPR	107:8	107:9	15	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	107:8	107:8	16	!
LEAF_NODE	107:8	107:8	17	!
FUNCTION_CALL	107:9	107:27	16	TIFFFlushData1 ( tif )
CALLEE	107:9	107:9	17	TIFFFlushData1
LEAF_NODE	107:9	107:9	18	TIFFFlushData1
LEAF_NODE	107:23	107:23	17	(
ARGUMENT	107:24	107:24	17	tif
FIELD	107:24	107:24	18	tif
LEAF_NODE	107:24	107:24	19	tif
LEAF_NODE	107:27	107:27	17	)
LEAF_NODE	107:28	107:28	13	)
STATEMENTS	108:5	108:5	13	
JUMP_STATEMENT	108:5	108:15	14	return ( 0 ) ;
KEYWORD	108:5	108:5	15	return
LEAF_NODE	108:5	108:5	16	return
DESTINATION	108:12	108:12	15	( 0 )
EXPR	108:12	108:14	16	( 0 )
LEAF_NODE	108:12	108:12	17	(
FIELD	108:13	108:13	17	0
LEAF_NODE	108:13	108:13	18	0
LEAF_NODE	108:14	108:14	17	)
LEAF_NODE	108:15	108:15	15	;
EXPR_STATEMENT	109:4	109:23	12	op = tif -> tif_rawcp ;
EXPR	109:4	109:4	13	op = tif -> tif_rawcp
ASSIGN	109:4	109:9	14	op = tif -> tif_rawcp
LVAL	109:4	109:4	15	op
FIELD	109:4	109:4	16	op
LEAF_NODE	109:4	109:4	17	op
ASSIGN_OP	109:7	109:7	15	=
LEAF_NODE	109:7	109:7	16	=
RVAL	109:9	109:9	15	tif -> tif_rawcp
FIELD	109:9	109:14	16	tif -> tif_rawcp
LEAF_NODE	109:9	109:9	17	tif
LEAF_NODE	109:12	109:12	17	->
LEAF_NODE	109:14	109:14	17	tif_rawcp
LEAF_NODE	109:23	109:23	13	;
LEAF_NODE	110:3	110:3	11	}
LEAF_NODE	111:2	111:2	8	}
SELECTION	112:2	112:17	6	
KEYWORD	112:2	112:2	7	switch
LEAF_NODE	112:2	112:2	8	switch
LEAF_NODE	112:9	112:9	7	(
CONDITION	112:10	112:10	7	state
EXPR	112:10	112:10	8	state
FIELD	112:10	112:10	9	state
LEAF_NODE	112:10	112:10	10	state
LEAF_NODE	112:15	112:15	7	)
STATEMENTS	112:17	180:2	7	
LEAF_NODE	112:17	112:17	8	{
STATEMENTS	113:2	179:3	8	
LABEL	113:2	113:11	9	case BASE :
LEAF_NODE	113:2	113:2	10	case
LEAF_NODE	113:7	113:7	10	BASE
LEAF_NODE	113:11	113:11	10	:
SELECTION	114:3	114:14	9	
KEYWORD	114:3	114:3	10	if
LEAF_NODE	114:3	114:3	11	if
LEAF_NODE	114:6	114:6	10	(
CONDITION	114:7	114:7	10	n > 1
EXPR	114:7	114:11	11	n > 1
FIELD	114:7	114:7	12	n
LEAF_NODE	114:7	114:7	13	n
REL_OPERATOR	114:9	114:9	12	>
LEAF_NODE	114:9	114:9	13	>
FIELD	114:11	114:11	12	1
LEAF_NODE	114:11	114:11	13	1
LEAF_NODE	114:12	114:12	10	)
STATEMENTS	114:14	124:3	10	
LEAF_NODE	114:14	114:14	11	{
STATEMENTS	115:4	123:4	11	
EXPR_STATEMENT	115:4	115:15	12	state = RUN ;
EXPR	115:4	115:4	13	state = RUN
ASSIGN	115:4	115:12	14	state = RUN
LVAL	115:4	115:4	15	state
FIELD	115:4	115:4	16	state
LEAF_NODE	115:4	115:4	17	state
ASSIGN_OP	115:10	115:10	15	=
LEAF_NODE	115:10	115:10	16	=
RVAL	115:12	115:12	15	RUN
FIELD	115:12	115:12	16	RUN
LEAF_NODE	115:12	115:12	17	RUN
LEAF_NODE	115:15	115:15	13	;
SELECTION	116:4	116:17	12	
KEYWORD	116:4	116:4	13	if
LEAF_NODE	116:4	116:4	14	if
LEAF_NODE	116:7	116:7	13	(
CONDITION	116:8	116:8	13	n > 128
EXPR	116:8	116:12	14	n > 128
FIELD	116:8	116:8	15	n
LEAF_NODE	116:8	116:8	16	n
REL_OPERATOR	116:10	116:10	15	>
LEAF_NODE	116:10	116:10	16	>
FIELD	116:12	116:12	15	128
LEAF_NODE	116:12	116:12	16	128
LEAF_NODE	116:15	116:15	13	)
STATEMENTS	116:17	121:4	13	
LEAF_NODE	116:17	116:17	14	{
STATEMENTS	117:5	120:5	14	
EXPR_STATEMENT	117:5	117:25	15	* op ++ = ( uint8 ) - 127 ;
EXPR	117:5	117:5	16	* op ++ = ( uint8 ) - 127
ASSIGN	117:5	117:13	17	* op ++ = ( uint8 ) - 127
LVAL	117:5	117:5	18	* op ++
UNARY_EXPR	117:5	117:6	19	* op ++
UNARY_OPERATOR	117:5	117:5	20	*
LEAF_NODE	117:5	117:5	21	*
FIELD	117:6	117:8	20	op ++
LEAF_NODE	117:6	117:6	21	op
LEAF_NODE	117:8	117:8	21	++
ASSIGN_OP	117:11	117:11	18	=
LEAF_NODE	117:11	117:11	19	=
RVAL	117:13	117:21	18	( uint8 ) - 127
LEAF_NODE	117:13	117:13	19	(
TYPE_NAME	117:14	117:14	19	uint8
LEAF_NODE	117:14	117:14	20	uint8
LEAF_NODE	117:19	117:19	19	)
UNARY_EXPR	117:21	117:22	19	- 127
UNARY_OPERATOR	117:21	117:21	20	-
LEAF_NODE	117:21	117:21	21	-
FIELD	117:22	117:22	20	127
LEAF_NODE	117:22	117:22	21	127
LEAF_NODE	117:25	117:25	16	;
EXPR_STATEMENT	118:5	118:22	15	* op ++ = ( uint8 ) b ;
EXPR	118:5	118:5	16	* op ++ = ( uint8 ) b
ASSIGN	118:5	118:13	17	* op ++ = ( uint8 ) b
LVAL	118:5	118:5	18	* op ++
UNARY_EXPR	118:5	118:6	19	* op ++
UNARY_OPERATOR	118:5	118:5	20	*
LEAF_NODE	118:5	118:5	21	*
FIELD	118:6	118:8	20	op ++
LEAF_NODE	118:6	118:6	21	op
LEAF_NODE	118:8	118:8	21	++
ASSIGN_OP	118:11	118:11	18	=
LEAF_NODE	118:11	118:11	19	=
RVAL	118:13	118:21	18	( uint8 ) b
LEAF_NODE	118:13	118:13	19	(
TYPE_NAME	118:14	118:14	19	uint8
LEAF_NODE	118:14	118:14	20	uint8
LEAF_NODE	118:19	118:19	19	)
FIELD	118:21	118:21	19	b
LEAF_NODE	118:21	118:21	20	b
LEAF_NODE	118:22	118:22	16	;
EXPR_STATEMENT	119:5	119:13	15	n -= 128 ;
EXPR	119:5	119:5	16	n -= 128
ASSIGN	119:5	119:10	17	n -= 128
LVAL	119:5	119:5	18	n
FIELD	119:5	119:5	19	n
LEAF_NODE	119:5	119:5	20	n
ASSIGN_OP	119:7	119:7	18	-=
LEAF_NODE	119:7	119:7	19	-=
RVAL	119:10	119:10	18	128
FIELD	119:10	119:10	19	128
LEAF_NODE	119:10	119:10	20	128
LEAF_NODE	119:13	119:13	16	;
JUMP_STATEMENT	120:5	120:15	15	goto again ;
KEYWORD	120:5	120:5	16	goto
LEAF_NODE	120:5	120:5	17	goto
DESTINATION	120:10	120:10	16	again
LEAF_NODE	120:10	120:10	17	again
LEAF_NODE	120:15	120:15	16	;
LEAF_NODE	121:4	121:4	14	}
EXPR_STATEMENT	122:4	122:27	12	* op ++ = ( uint8 ) ( - ( n - 1 ) ) ;
EXPR	122:4	122:4	13	* op ++ = ( uint8 ) ( - ( n - 1 ) )
ASSIGN	122:4	122:12	14	* op ++ = ( uint8 ) ( - ( n - 1 ) )
LVAL	122:4	122:4	15	* op ++
UNARY_EXPR	122:4	122:5	16	* op ++
UNARY_OPERATOR	122:4	122:4	17	*
LEAF_NODE	122:4	122:4	18	*
FIELD	122:5	122:7	17	op ++
LEAF_NODE	122:5	122:5	18	op
LEAF_NODE	122:7	122:7	18	++
ASSIGN_OP	122:10	122:10	15	=
LEAF_NODE	122:10	122:10	16	=
RVAL	122:12	122:26	15	( uint8 ) ( - ( n - 1 ) )
LEAF_NODE	122:12	122:12	16	(
TYPE_NAME	122:13	122:13	16	uint8
LEAF_NODE	122:13	122:13	17	uint8
LEAF_NODE	122:18	122:18	16	)
LEAF_NODE	122:19	122:19	16	(
UNARY_EXPR	122:20	122:25	16	- ( n - 1 )
UNARY_OPERATOR	122:20	122:20	17	-
LEAF_NODE	122:20	122:20	18	-
LEAF_NODE	122:21	122:21	17	(
FIELD	122:22	122:22	17	n
LEAF_NODE	122:22	122:22	18	n
LEAF_NODE	122:23	122:23	17	-
FIELD	122:24	122:24	17	1
LEAF_NODE	122:24	122:24	18	1
LEAF_NODE	122:25	122:25	17	)
LEAF_NODE	122:26	122:26	16	)
LEAF_NODE	122:27	122:27	13	;
EXPR_STATEMENT	123:4	123:21	12	* op ++ = ( uint8 ) b ;
EXPR	123:4	123:4	13	* op ++ = ( uint8 ) b
ASSIGN	123:4	123:12	14	* op ++ = ( uint8 ) b
LVAL	123:4	123:4	15	* op ++
UNARY_EXPR	123:4	123:5	16	* op ++
UNARY_OPERATOR	123:4	123:4	17	*
LEAF_NODE	123:4	123:4	18	*
FIELD	123:5	123:7	17	op ++
LEAF_NODE	123:5	123:5	18	op
LEAF_NODE	123:7	123:7	18	++
ASSIGN_OP	123:10	123:10	15	=
LEAF_NODE	123:10	123:10	16	=
RVAL	123:12	123:20	15	( uint8 ) b
LEAF_NODE	123:12	123:12	16	(
TYPE_NAME	123:13	123:13	16	uint8
LEAF_NODE	123:13	123:13	17	uint8
LEAF_NODE	123:18	123:18	16	)
FIELD	123:20	123:20	16	b
LEAF_NODE	123:20	123:20	17	b
LEAF_NODE	123:21	123:21	13	;
LEAF_NODE	124:3	124:3	11	}
SELECTION	124:5	124:10	9	
KEYWORD	124:5	124:5	10	else
LEAF_NODE	124:5	124:5	11	else
STATEMENTS	124:10	129:3	10	
LEAF_NODE	124:10	124:10	11	{
STATEMENTS	125:4	128:4	11	
EXPR_STATEMENT	125:4	125:20	12	lastliteral = op ;
EXPR	125:4	125:4	13	lastliteral = op
ASSIGN	125:4	125:18	14	lastliteral = op
LVAL	125:4	125:4	15	lastliteral
FIELD	125:4	125:4	16	lastliteral
LEAF_NODE	125:4	125:4	17	lastliteral
ASSIGN_OP	125:16	125:16	15	=
LEAF_NODE	125:16	125:16	16	=
RVAL	125:18	125:18	15	op
FIELD	125:18	125:18	16	op
LEAF_NODE	125:18	125:18	17	op
LEAF_NODE	125:20	125:20	13	;
EXPR_STATEMENT	126:4	126:13	12	* op ++ = 0 ;
EXPR	126:4	126:4	13	* op ++ = 0
ASSIGN	126:4	126:12	14	* op ++ = 0
LVAL	126:4	126:4	15	* op ++
UNARY_EXPR	126:4	126:5	16	* op ++
UNARY_OPERATOR	126:4	126:4	17	*
LEAF_NODE	126:4	126:4	18	*
FIELD	126:5	126:7	17	op ++
LEAF_NODE	126:5	126:5	18	op
LEAF_NODE	126:7	126:7	18	++
ASSIGN_OP	126:10	126:10	15	=
LEAF_NODE	126:10	126:10	16	=
RVAL	126:12	126:12	15	0
FIELD	126:12	126:12	16	0
LEAF_NODE	126:12	126:12	17	0
LEAF_NODE	126:13	126:13	13	;
EXPR_STATEMENT	127:4	127:21	12	* op ++ = ( uint8 ) b ;
EXPR	127:4	127:4	13	* op ++ = ( uint8 ) b
ASSIGN	127:4	127:12	14	* op ++ = ( uint8 ) b
LVAL	127:4	127:4	15	* op ++
UNARY_EXPR	127:4	127:5	16	* op ++
UNARY_OPERATOR	127:4	127:4	17	*
LEAF_NODE	127:4	127:4	18	*
FIELD	127:5	127:7	17	op ++
LEAF_NODE	127:5	127:5	18	op
LEAF_NODE	127:7	127:7	18	++
ASSIGN_OP	127:10	127:10	15	=
LEAF_NODE	127:10	127:10	16	=
RVAL	127:12	127:20	15	( uint8 ) b
LEAF_NODE	127:12	127:12	16	(
TYPE_NAME	127:13	127:13	16	uint8
LEAF_NODE	127:13	127:13	17	uint8
LEAF_NODE	127:18	127:18	16	)
FIELD	127:20	127:20	16	b
LEAF_NODE	127:20	127:20	17	b
LEAF_NODE	127:21	127:21	13	;
EXPR_STATEMENT	128:4	128:19	12	state = LITERAL ;
EXPR	128:4	128:4	13	state = LITERAL
ASSIGN	128:4	128:12	14	state = LITERAL
LVAL	128:4	128:4	15	state
FIELD	128:4	128:4	16	state
LEAF_NODE	128:4	128:4	17	state
ASSIGN_OP	128:10	128:10	15	=
LEAF_NODE	128:10	128:10	16	=
RVAL	128:12	128:12	15	LITERAL
FIELD	128:12	128:12	16	LITERAL
LEAF_NODE	128:12	128:12	17	LITERAL
LEAF_NODE	128:19	128:19	13	;
LEAF_NODE	129:3	129:3	11	}
JUMP_STATEMENT	130:3	130:8	9	break DESTINATION ;
KEYWORD	130:3	130:3	10	break
LEAF_NODE	130:3	130:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	130:8	130:8	10	;
LABEL	131:2	131:14	9	case LITERAL :
LEAF_NODE	131:2	131:2	10	case
LEAF_NODE	131:7	131:7	10	LITERAL
LEAF_NODE	131:14	131:14	10	:
SELECTION	132:3	132:14	9	
KEYWORD	132:3	132:3	10	if
LEAF_NODE	132:3	132:3	11	if
LEAF_NODE	132:6	132:6	10	(
CONDITION	132:7	132:7	10	n > 1
EXPR	132:7	132:11	11	n > 1
FIELD	132:7	132:7	12	n
LEAF_NODE	132:7	132:7	13	n
REL_OPERATOR	132:9	132:9	12	>
LEAF_NODE	132:9	132:9	13	>
FIELD	132:11	132:11	12	1
LEAF_NODE	132:11	132:11	13	1
LEAF_NODE	132:12	132:12	10	)
STATEMENTS	132:14	142:3	10	
LEAF_NODE	132:14	132:14	11	{
STATEMENTS	133:4	141:4	11	
EXPR_STATEMENT	133:4	133:23	12	state = LITERAL_RUN ;
EXPR	133:4	133:4	13	state = LITERAL_RUN
ASSIGN	133:4	133:12	14	state = LITERAL_RUN
LVAL	133:4	133:4	15	state
FIELD	133:4	133:4	16	state
LEAF_NODE	133:4	133:4	17	state
ASSIGN_OP	133:10	133:10	15	=
LEAF_NODE	133:10	133:10	16	=
RVAL	133:12	133:12	15	LITERAL_RUN
FIELD	133:12	133:12	16	LITERAL_RUN
LEAF_NODE	133:12	133:12	17	LITERAL_RUN
LEAF_NODE	133:23	133:23	13	;
SELECTION	134:4	134:17	12	
KEYWORD	134:4	134:4	13	if
LEAF_NODE	134:4	134:4	14	if
LEAF_NODE	134:7	134:7	13	(
CONDITION	134:8	134:8	13	n > 128
EXPR	134:8	134:12	14	n > 128
FIELD	134:8	134:8	15	n
LEAF_NODE	134:8	134:8	16	n
REL_OPERATOR	134:10	134:10	15	>
LEAF_NODE	134:10	134:10	16	>
FIELD	134:12	134:12	15	128
LEAF_NODE	134:12	134:12	16	128
LEAF_NODE	134:15	134:15	13	)
STATEMENTS	134:17	139:4	13	
LEAF_NODE	134:17	134:17	14	{
STATEMENTS	135:5	138:5	14	
EXPR_STATEMENT	135:5	135:25	15	* op ++ = ( uint8 ) - 127 ;
EXPR	135:5	135:5	16	* op ++ = ( uint8 ) - 127
ASSIGN	135:5	135:13	17	* op ++ = ( uint8 ) - 127
LVAL	135:5	135:5	18	* op ++
UNARY_EXPR	135:5	135:6	19	* op ++
UNARY_OPERATOR	135:5	135:5	20	*
LEAF_NODE	135:5	135:5	21	*
FIELD	135:6	135:8	20	op ++
LEAF_NODE	135:6	135:6	21	op
LEAF_NODE	135:8	135:8	21	++
ASSIGN_OP	135:11	135:11	18	=
LEAF_NODE	135:11	135:11	19	=
RVAL	135:13	135:21	18	( uint8 ) - 127
LEAF_NODE	135:13	135:13	19	(
TYPE_NAME	135:14	135:14	19	uint8
LEAF_NODE	135:14	135:14	20	uint8
LEAF_NODE	135:19	135:19	19	)
UNARY_EXPR	135:21	135:22	19	- 127
UNARY_OPERATOR	135:21	135:21	20	-
LEAF_NODE	135:21	135:21	21	-
FIELD	135:22	135:22	20	127
LEAF_NODE	135:22	135:22	21	127
LEAF_NODE	135:25	135:25	16	;
EXPR_STATEMENT	136:5	136:22	15	* op ++ = ( uint8 ) b ;
EXPR	136:5	136:5	16	* op ++ = ( uint8 ) b
ASSIGN	136:5	136:13	17	* op ++ = ( uint8 ) b
LVAL	136:5	136:5	18	* op ++
UNARY_EXPR	136:5	136:6	19	* op ++
UNARY_OPERATOR	136:5	136:5	20	*
LEAF_NODE	136:5	136:5	21	*
FIELD	136:6	136:8	20	op ++
LEAF_NODE	136:6	136:6	21	op
LEAF_NODE	136:8	136:8	21	++
ASSIGN_OP	136:11	136:11	18	=
LEAF_NODE	136:11	136:11	19	=
RVAL	136:13	136:21	18	( uint8 ) b
LEAF_NODE	136:13	136:13	19	(
TYPE_NAME	136:14	136:14	19	uint8
LEAF_NODE	136:14	136:14	20	uint8
LEAF_NODE	136:19	136:19	19	)
FIELD	136:21	136:21	19	b
LEAF_NODE	136:21	136:21	20	b
LEAF_NODE	136:22	136:22	16	;
EXPR_STATEMENT	137:5	137:13	15	n -= 128 ;
EXPR	137:5	137:5	16	n -= 128
ASSIGN	137:5	137:10	17	n -= 128
LVAL	137:5	137:5	18	n
FIELD	137:5	137:5	19	n
LEAF_NODE	137:5	137:5	20	n
ASSIGN_OP	137:7	137:7	18	-=
LEAF_NODE	137:7	137:7	19	-=
RVAL	137:10	137:10	18	128
FIELD	137:10	137:10	19	128
LEAF_NODE	137:10	137:10	20	128
LEAF_NODE	137:13	137:13	16	;
JUMP_STATEMENT	138:5	138:15	15	goto again ;
KEYWORD	138:5	138:5	16	goto
LEAF_NODE	138:5	138:5	17	goto
DESTINATION	138:10	138:10	16	again
LEAF_NODE	138:10	138:10	17	again
LEAF_NODE	138:15	138:15	16	;
LEAF_NODE	139:4	139:4	14	}
EXPR_STATEMENT	140:4	140:27	12	* op ++ = ( uint8 ) ( - ( n - 1 ) ) ;
EXPR	140:4	140:4	13	* op ++ = ( uint8 ) ( - ( n - 1 ) )
ASSIGN	140:4	140:12	14	* op ++ = ( uint8 ) ( - ( n - 1 ) )
LVAL	140:4	140:4	15	* op ++
UNARY_EXPR	140:4	140:5	16	* op ++
UNARY_OPERATOR	140:4	140:4	17	*
LEAF_NODE	140:4	140:4	18	*
FIELD	140:5	140:7	17	op ++
LEAF_NODE	140:5	140:5	18	op
LEAF_NODE	140:7	140:7	18	++
ASSIGN_OP	140:10	140:10	15	=
LEAF_NODE	140:10	140:10	16	=
RVAL	140:12	140:26	15	( uint8 ) ( - ( n - 1 ) )
LEAF_NODE	140:12	140:12	16	(
TYPE_NAME	140:13	140:13	16	uint8
LEAF_NODE	140:13	140:13	17	uint8
LEAF_NODE	140:18	140:18	16	)
LEAF_NODE	140:19	140:19	16	(
UNARY_EXPR	140:20	140:25	16	- ( n - 1 )
UNARY_OPERATOR	140:20	140:20	17	-
LEAF_NODE	140:20	140:20	18	-
LEAF_NODE	140:21	140:21	17	(
FIELD	140:22	140:22	17	n
LEAF_NODE	140:22	140:22	18	n
LEAF_NODE	140:23	140:23	17	-
FIELD	140:24	140:24	17	1
LEAF_NODE	140:24	140:24	18	1
LEAF_NODE	140:25	140:25	17	)
LEAF_NODE	140:26	140:26	16	)
LEAF_NODE	140:27	140:27	13	;
EXPR_STATEMENT	141:4	141:21	12	* op ++ = ( uint8 ) b ;
EXPR	141:4	141:4	13	* op ++ = ( uint8 ) b
ASSIGN	141:4	141:12	14	* op ++ = ( uint8 ) b
LVAL	141:4	141:4	15	* op ++
UNARY_EXPR	141:4	141:5	16	* op ++
UNARY_OPERATOR	141:4	141:4	17	*
LEAF_NODE	141:4	141:4	18	*
FIELD	141:5	141:7	17	op ++
LEAF_NODE	141:5	141:5	18	op
LEAF_NODE	141:7	141:7	18	++
ASSIGN_OP	141:10	141:10	15	=
LEAF_NODE	141:10	141:10	16	=
RVAL	141:12	141:20	15	( uint8 ) b
LEAF_NODE	141:12	141:12	16	(
TYPE_NAME	141:13	141:13	16	uint8
LEAF_NODE	141:13	141:13	17	uint8
LEAF_NODE	141:18	141:18	16	)
FIELD	141:20	141:20	16	b
LEAF_NODE	141:20	141:20	17	b
LEAF_NODE	141:21	141:21	13	;
LEAF_NODE	142:3	142:3	11	}
SELECTION	142:5	142:10	9	
KEYWORD	142:5	142:5	10	else
LEAF_NODE	142:5	142:5	11	else
STATEMENTS	142:10	146:3	10	
LEAF_NODE	142:10	142:10	11	{
STATEMENTS	143:4	145:4	11	
SELECTION	143:4	144:5	12	
KEYWORD	143:4	143:4	13	if
LEAF_NODE	143:4	143:4	14	if
LEAF_NODE	143:7	143:7	13	(
CONDITION	143:8	143:8	13	++ ( * lastliteral ) == 127
EXPR	143:8	143:28	14	++ ( * lastliteral ) == 127
LEAF_NODE	143:8	143:8	15	++
LEAF_NODE	143:10	143:10	15	(
UNARY_EXPR	143:11	143:12	15	* lastliteral
UNARY_OPERATOR	143:11	143:11	16	*
LEAF_NODE	143:11	143:11	17	*
FIELD	143:12	143:12	16	lastliteral
LEAF_NODE	143:12	143:12	17	lastliteral
LEAF_NODE	143:23	143:23	15	)
EQ_OPERATOR	143:25	143:25	15	==
LEAF_NODE	143:25	143:25	16	==
FIELD	143:28	143:28	15	127
LEAF_NODE	143:28	143:28	16	127
LEAF_NODE	143:31	143:31	13	)
STATEMENTS	144:5	144:5	13	
EXPR_STATEMENT	144:5	144:17	14	state = BASE ;
EXPR	144:5	144:5	15	state = BASE
ASSIGN	144:5	144:13	16	state = BASE
LVAL	144:5	144:5	17	state
FIELD	144:5	144:5	18	state
LEAF_NODE	144:5	144:5	19	state
ASSIGN_OP	144:11	144:11	17	=
LEAF_NODE	144:11	144:11	18	=
RVAL	144:13	144:13	17	BASE
FIELD	144:13	144:13	18	BASE
LEAF_NODE	144:13	144:13	19	BASE
LEAF_NODE	144:17	144:17	15	;
EXPR_STATEMENT	145:4	145:21	12	* op ++ = ( uint8 ) b ;
EXPR	145:4	145:4	13	* op ++ = ( uint8 ) b
ASSIGN	145:4	145:12	14	* op ++ = ( uint8 ) b
LVAL	145:4	145:4	15	* op ++
UNARY_EXPR	145:4	145:5	16	* op ++
UNARY_OPERATOR	145:4	145:4	17	*
LEAF_NODE	145:4	145:4	18	*
FIELD	145:5	145:7	17	op ++
LEAF_NODE	145:5	145:5	18	op
LEAF_NODE	145:7	145:7	18	++
ASSIGN_OP	145:10	145:10	15	=
LEAF_NODE	145:10	145:10	16	=
RVAL	145:12	145:20	15	( uint8 ) b
LEAF_NODE	145:12	145:12	16	(
TYPE_NAME	145:13	145:13	16	uint8
LEAF_NODE	145:13	145:13	17	uint8
LEAF_NODE	145:18	145:18	16	)
FIELD	145:20	145:20	16	b
LEAF_NODE	145:20	145:20	17	b
LEAF_NODE	145:21	145:21	13	;
LEAF_NODE	146:3	146:3	11	}
JUMP_STATEMENT	147:3	147:8	9	break DESTINATION ;
KEYWORD	147:3	147:3	10	break
LEAF_NODE	147:3	147:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	147:8	147:8	10	;
LABEL	148:2	148:10	9	case RUN :
LEAF_NODE	148:2	148:2	10	case
LEAF_NODE	148:7	148:7	10	RUN
LEAF_NODE	148:10	148:10	10	:
SELECTION	149:3	149:14	9	
KEYWORD	149:3	149:3	10	if
LEAF_NODE	149:3	149:3	11	if
LEAF_NODE	149:6	149:6	10	(
CONDITION	149:7	149:7	10	n > 1
EXPR	149:7	149:11	11	n > 1
FIELD	149:7	149:7	12	n
LEAF_NODE	149:7	149:7	13	n
REL_OPERATOR	149:9	149:9	12	>
LEAF_NODE	149:9	149:9	13	>
FIELD	149:11	149:11	12	1
LEAF_NODE	149:11	149:11	13	1
LEAF_NODE	149:12	149:12	10	)
STATEMENTS	149:14	158:3	10	
LEAF_NODE	149:14	149:14	11	{
STATEMENTS	150:4	157:4	11	
SELECTION	150:4	150:17	12	
KEYWORD	150:4	150:4	13	if
LEAF_NODE	150:4	150:4	14	if
LEAF_NODE	150:7	150:7	13	(
CONDITION	150:8	150:8	13	n > 128
EXPR	150:8	150:12	14	n > 128
FIELD	150:8	150:8	15	n
LEAF_NODE	150:8	150:8	16	n
REL_OPERATOR	150:10	150:10	15	>
LEAF_NODE	150:10	150:10	16	>
FIELD	150:12	150:12	15	128
LEAF_NODE	150:12	150:12	16	128
LEAF_NODE	150:15	150:15	13	)
STATEMENTS	150:17	155:4	13	
LEAF_NODE	150:17	150:17	14	{
STATEMENTS	151:5	154:5	14	
EXPR_STATEMENT	151:5	151:25	15	* op ++ = ( uint8 ) - 127 ;
EXPR	151:5	151:5	16	* op ++ = ( uint8 ) - 127
ASSIGN	151:5	151:13	17	* op ++ = ( uint8 ) - 127
LVAL	151:5	151:5	18	* op ++
UNARY_EXPR	151:5	151:6	19	* op ++
UNARY_OPERATOR	151:5	151:5	20	*
LEAF_NODE	151:5	151:5	21	*
FIELD	151:6	151:8	20	op ++
LEAF_NODE	151:6	151:6	21	op
LEAF_NODE	151:8	151:8	21	++
ASSIGN_OP	151:11	151:11	18	=
LEAF_NODE	151:11	151:11	19	=
RVAL	151:13	151:21	18	( uint8 ) - 127
LEAF_NODE	151:13	151:13	19	(
TYPE_NAME	151:14	151:14	19	uint8
LEAF_NODE	151:14	151:14	20	uint8
LEAF_NODE	151:19	151:19	19	)
UNARY_EXPR	151:21	151:22	19	- 127
UNARY_OPERATOR	151:21	151:21	20	-
LEAF_NODE	151:21	151:21	21	-
FIELD	151:22	151:22	20	127
LEAF_NODE	151:22	151:22	21	127
LEAF_NODE	151:25	151:25	16	;
EXPR_STATEMENT	152:5	152:22	15	* op ++ = ( uint8 ) b ;
EXPR	152:5	152:5	16	* op ++ = ( uint8 ) b
ASSIGN	152:5	152:13	17	* op ++ = ( uint8 ) b
LVAL	152:5	152:5	18	* op ++
UNARY_EXPR	152:5	152:6	19	* op ++
UNARY_OPERATOR	152:5	152:5	20	*
LEAF_NODE	152:5	152:5	21	*
FIELD	152:6	152:8	20	op ++
LEAF_NODE	152:6	152:6	21	op
LEAF_NODE	152:8	152:8	21	++
ASSIGN_OP	152:11	152:11	18	=
LEAF_NODE	152:11	152:11	19	=
RVAL	152:13	152:21	18	( uint8 ) b
LEAF_NODE	152:13	152:13	19	(
TYPE_NAME	152:14	152:14	19	uint8
LEAF_NODE	152:14	152:14	20	uint8
LEAF_NODE	152:19	152:19	19	)
FIELD	152:21	152:21	19	b
LEAF_NODE	152:21	152:21	20	b
LEAF_NODE	152:22	152:22	16	;
EXPR_STATEMENT	153:5	153:13	15	n -= 128 ;
EXPR	153:5	153:5	16	n -= 128
ASSIGN	153:5	153:10	17	n -= 128
LVAL	153:5	153:5	18	n
FIELD	153:5	153:5	19	n
LEAF_NODE	153:5	153:5	20	n
ASSIGN_OP	153:7	153:7	18	-=
LEAF_NODE	153:7	153:7	19	-=
RVAL	153:10	153:10	18	128
FIELD	153:10	153:10	19	128
LEAF_NODE	153:10	153:10	20	128
LEAF_NODE	153:13	153:13	16	;
JUMP_STATEMENT	154:5	154:15	15	goto again ;
KEYWORD	154:5	154:5	16	goto
LEAF_NODE	154:5	154:5	17	goto
DESTINATION	154:10	154:10	16	again
LEAF_NODE	154:10	154:10	17	again
LEAF_NODE	154:15	154:15	16	;
LEAF_NODE	155:4	155:4	14	}
EXPR_STATEMENT	156:4	156:27	12	* op ++ = ( uint8 ) ( - ( n - 1 ) ) ;
EXPR	156:4	156:4	13	* op ++ = ( uint8 ) ( - ( n - 1 ) )
ASSIGN	156:4	156:12	14	* op ++ = ( uint8 ) ( - ( n - 1 ) )
LVAL	156:4	156:4	15	* op ++
UNARY_EXPR	156:4	156:5	16	* op ++
UNARY_OPERATOR	156:4	156:4	17	*
LEAF_NODE	156:4	156:4	18	*
FIELD	156:5	156:7	17	op ++
LEAF_NODE	156:5	156:5	18	op
LEAF_NODE	156:7	156:7	18	++
ASSIGN_OP	156:10	156:10	15	=
LEAF_NODE	156:10	156:10	16	=
RVAL	156:12	156:26	15	( uint8 ) ( - ( n - 1 ) )
LEAF_NODE	156:12	156:12	16	(
TYPE_NAME	156:13	156:13	16	uint8
LEAF_NODE	156:13	156:13	17	uint8
LEAF_NODE	156:18	156:18	16	)
LEAF_NODE	156:19	156:19	16	(
UNARY_EXPR	156:20	156:25	16	- ( n - 1 )
UNARY_OPERATOR	156:20	156:20	17	-
LEAF_NODE	156:20	156:20	18	-
LEAF_NODE	156:21	156:21	17	(
FIELD	156:22	156:22	17	n
LEAF_NODE	156:22	156:22	18	n
LEAF_NODE	156:23	156:23	17	-
FIELD	156:24	156:24	17	1
LEAF_NODE	156:24	156:24	18	1
LEAF_NODE	156:25	156:25	17	)
LEAF_NODE	156:26	156:26	16	)
LEAF_NODE	156:27	156:27	13	;
EXPR_STATEMENT	157:4	157:21	12	* op ++ = ( uint8 ) b ;
EXPR	157:4	157:4	13	* op ++ = ( uint8 ) b
ASSIGN	157:4	157:12	14	* op ++ = ( uint8 ) b
LVAL	157:4	157:4	15	* op ++
UNARY_EXPR	157:4	157:5	16	* op ++
UNARY_OPERATOR	157:4	157:4	17	*
LEAF_NODE	157:4	157:4	18	*
FIELD	157:5	157:7	17	op ++
LEAF_NODE	157:5	157:5	18	op
LEAF_NODE	157:7	157:7	18	++
ASSIGN_OP	157:10	157:10	15	=
LEAF_NODE	157:10	157:10	16	=
RVAL	157:12	157:20	15	( uint8 ) b
LEAF_NODE	157:12	157:12	16	(
TYPE_NAME	157:13	157:13	16	uint8
LEAF_NODE	157:13	157:13	17	uint8
LEAF_NODE	157:18	157:18	16	)
FIELD	157:20	157:20	16	b
LEAF_NODE	157:20	157:20	17	b
LEAF_NODE	157:21	157:21	13	;
LEAF_NODE	158:3	158:3	11	}
SELECTION	158:5	158:10	9	
KEYWORD	158:5	158:5	10	else
LEAF_NODE	158:5	158:5	11	else
STATEMENTS	158:10	163:3	10	
LEAF_NODE	158:10	158:10	11	{
STATEMENTS	159:4	162:4	11	
EXPR_STATEMENT	159:4	159:20	12	lastliteral = op ;
EXPR	159:4	159:4	13	lastliteral = op
ASSIGN	159:4	159:18	14	lastliteral = op
LVAL	159:4	159:4	15	lastliteral
FIELD	159:4	159:4	16	lastliteral
LEAF_NODE	159:4	159:4	17	lastliteral
ASSIGN_OP	159:16	159:16	15	=
LEAF_NODE	159:16	159:16	16	=
RVAL	159:18	159:18	15	op
FIELD	159:18	159:18	16	op
LEAF_NODE	159:18	159:18	17	op
LEAF_NODE	159:20	159:20	13	;
EXPR_STATEMENT	160:4	160:13	12	* op ++ = 0 ;
EXPR	160:4	160:4	13	* op ++ = 0
ASSIGN	160:4	160:12	14	* op ++ = 0
LVAL	160:4	160:4	15	* op ++
UNARY_EXPR	160:4	160:5	16	* op ++
UNARY_OPERATOR	160:4	160:4	17	*
LEAF_NODE	160:4	160:4	18	*
FIELD	160:5	160:7	17	op ++
LEAF_NODE	160:5	160:5	18	op
LEAF_NODE	160:7	160:7	18	++
ASSIGN_OP	160:10	160:10	15	=
LEAF_NODE	160:10	160:10	16	=
RVAL	160:12	160:12	15	0
FIELD	160:12	160:12	16	0
LEAF_NODE	160:12	160:12	17	0
LEAF_NODE	160:13	160:13	13	;
EXPR_STATEMENT	161:4	161:21	12	* op ++ = ( uint8 ) b ;
EXPR	161:4	161:4	13	* op ++ = ( uint8 ) b
ASSIGN	161:4	161:12	14	* op ++ = ( uint8 ) b
LVAL	161:4	161:4	15	* op ++
UNARY_EXPR	161:4	161:5	16	* op ++
UNARY_OPERATOR	161:4	161:4	17	*
LEAF_NODE	161:4	161:4	18	*
FIELD	161:5	161:7	17	op ++
LEAF_NODE	161:5	161:5	18	op
LEAF_NODE	161:7	161:7	18	++
ASSIGN_OP	161:10	161:10	15	=
LEAF_NODE	161:10	161:10	16	=
RVAL	161:12	161:20	15	( uint8 ) b
LEAF_NODE	161:12	161:12	16	(
TYPE_NAME	161:13	161:13	16	uint8
LEAF_NODE	161:13	161:13	17	uint8
LEAF_NODE	161:18	161:18	16	)
FIELD	161:20	161:20	16	b
LEAF_NODE	161:20	161:20	17	b
LEAF_NODE	161:21	161:21	13	;
EXPR_STATEMENT	162:4	162:19	12	state = LITERAL ;
EXPR	162:4	162:4	13	state = LITERAL
ASSIGN	162:4	162:12	14	state = LITERAL
LVAL	162:4	162:4	15	state
FIELD	162:4	162:4	16	state
LEAF_NODE	162:4	162:4	17	state
ASSIGN_OP	162:10	162:10	15	=
LEAF_NODE	162:10	162:10	16	=
RVAL	162:12	162:12	15	LITERAL
FIELD	162:12	162:12	16	LITERAL
LEAF_NODE	162:12	162:12	17	LITERAL
LEAF_NODE	162:19	162:19	13	;
LEAF_NODE	163:3	163:3	11	}
JUMP_STATEMENT	164:3	164:8	9	break DESTINATION ;
KEYWORD	164:3	164:3	10	break
LEAF_NODE	164:3	164:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	164:8	164:8	10	;
LABEL	165:2	165:18	9	case LITERAL_RUN :
LEAF_NODE	165:2	165:2	10	case
LEAF_NODE	165:7	165:7	10	LITERAL_RUN
LEAF_NODE	165:18	165:18	10	:
SELECTION	172:3	173:27	9	
KEYWORD	172:3	172:3	10	if
LEAF_NODE	172:3	172:3	11	if
LEAF_NODE	172:6	172:6	10	(
CONDITION	172:7	172:7	10	n == 1 && op [ - 2 ] == ( uint8 ) - 1 && * lastliteral < 126
EXPR	172:7	172:7	11	n == 1 && op [ - 2 ] == ( uint8 ) - 1 && * lastliteral < 126
AND	172:7	172:17	12	n == 1 && op [ - 2 ] == ( uint8 ) - 1 && * lastliteral < 126
EXPR	172:7	172:12	13	n == 1
FIELD	172:7	172:7	14	n
LEAF_NODE	172:7	172:7	15	n
EQ_OPERATOR	172:9	172:9	14	==
LEAF_NODE	172:9	172:9	15	==
FIELD	172:12	172:12	14	1
LEAF_NODE	172:12	172:12	15	1
LEAF_NODE	172:14	172:14	13	&&
EXPR	172:17	172:17	13	op [ - 2 ] == ( uint8 ) - 1 && * lastliteral < 126
AND	172:17	173:7	14	op [ - 2 ] == ( uint8 ) - 1 && * lastliteral < 126
EXPR	172:17	172:35	15	op [ - 2 ] == ( uint8 ) - 1
FIELD	172:17	172:22	16	op [ - 2 ]
LEAF_NODE	172:17	172:17	17	op
LEAF_NODE	172:19	172:19	17	[
EXPR	172:20	172:20	17	- 2
UNARY_EXPR	172:20	172:21	18	- 2
UNARY_OPERATOR	172:20	172:20	19	-
LEAF_NODE	172:20	172:20	20	-
FIELD	172:21	172:21	19	2
LEAF_NODE	172:21	172:21	20	2
LEAF_NODE	172:22	172:22	17	]
EQ_OPERATOR	172:24	172:24	16	==
LEAF_NODE	172:24	172:24	17	==
LEAF_NODE	172:27	172:27	16	(
TYPE_NAME	172:28	172:28	16	uint8
LEAF_NODE	172:28	172:28	17	uint8
LEAF_NODE	172:33	172:33	16	)
UNARY_EXPR	172:35	172:36	16	- 1
UNARY_OPERATOR	172:35	172:35	17	-
LEAF_NODE	172:35	172:35	18	-
FIELD	172:36	172:36	17	1
LEAF_NODE	172:36	172:36	18	1
LEAF_NODE	172:38	172:38	15	&&
EXPR	173:7	173:22	15	* lastliteral < 126
UNARY_EXPR	173:7	173:8	16	* lastliteral
UNARY_OPERATOR	173:7	173:7	17	*
LEAF_NODE	173:7	173:7	18	*
FIELD	173:8	173:8	17	lastliteral
LEAF_NODE	173:8	173:8	18	lastliteral
REL_OPERATOR	173:20	173:20	16	<
LEAF_NODE	173:20	173:20	17	<
FIELD	173:22	173:22	16	126
LEAF_NODE	173:22	173:22	17	126
LEAF_NODE	173:25	173:25	10	)
STATEMENTS	173:27	177:3	10	
LEAF_NODE	173:27	173:27	11	{
STATEMENTS	174:4	176:4	11	
EXPR_STATEMENT	174:4	175:23	12	state = ( ( ( * lastliteral ) += 2 ) == 127 ? BASE : LITERAL ) ;
EXPR	174:4	174:4	13	state = ( ( ( * lastliteral ) += 2 ) == 127 ? BASE : LITERAL )
ASSIGN	174:4	174:12	14	state = ( ( ( * lastliteral ) += 2 ) == 127 ? BASE : LITERAL )
LVAL	174:4	174:4	15	state
FIELD	174:4	174:4	16	state
LEAF_NODE	174:4	174:4	17	state
ASSIGN_OP	174:10	174:10	15	=
LEAF_NODE	174:10	174:10	16	=
RVAL	174:12	175:22	15	( ( ( * lastliteral ) += 2 ) == 127 ? BASE : LITERAL )
LEAF_NODE	174:12	174:12	16	(
COND_EXPR	174:13	175:15	16	( ( * lastliteral ) += 2 ) == 127 ? BASE : LITERAL
CONDITION	174:13	174:38	17	( ( * lastliteral ) += 2 ) == 127
LEAF_NODE	174:13	174:13	18	(
ASSIGN	174:14	174:32	18	( * lastliteral ) += 2
LVAL	174:14	174:27	19	( * lastliteral )
LEAF_NODE	174:14	174:14	20	(
UNARY_EXPR	174:15	174:16	20	* lastliteral
UNARY_OPERATOR	174:15	174:15	21	*
LEAF_NODE	174:15	174:15	22	*
FIELD	174:16	174:16	21	lastliteral
LEAF_NODE	174:16	174:16	22	lastliteral
LEAF_NODE	174:27	174:27	20	)
ASSIGN_OP	174:29	174:29	19	+=
LEAF_NODE	174:29	174:29	20	+=
RVAL	174:32	174:32	19	2
FIELD	174:32	174:32	20	2
LEAF_NODE	174:32	174:32	21	2
LEAF_NODE	174:33	174:33	18	)
EQ_OPERATOR	174:35	174:35	18	==
LEAF_NODE	174:35	174:35	19	==
FIELD	174:38	174:38	18	127
LEAF_NODE	174:38	174:38	19	127
LEAF_NODE	174:42	174:42	17	?
EXPR	175:8	175:8	17	BASE
FIELD	175:8	175:8	18	BASE
LEAF_NODE	175:8	175:8	19	BASE
LEAF_NODE	175:13	175:13	17	:
FIELD	175:15	175:15	17	LITERAL
LEAF_NODE	175:15	175:15	18	LITERAL
LEAF_NODE	175:22	175:22	16	)
LEAF_NODE	175:23	175:23	13	;
EXPR_STATEMENT	176:4	176:19	12	op [ - 2 ] = op [ - 1 ] ;
EXPR	176:4	176:4	13	op [ - 2 ] = op [ - 1 ]
ASSIGN	176:4	176:13	14	op [ - 2 ] = op [ - 1 ]
LVAL	176:4	176:4	15	op [ - 2 ]
FIELD	176:4	176:9	16	op [ - 2 ]
LEAF_NODE	176:4	176:4	17	op
LEAF_NODE	176:6	176:6	17	[
EXPR	176:7	176:7	17	- 2
UNARY_EXPR	176:7	176:8	18	- 2
UNARY_OPERATOR	176:7	176:7	19	-
LEAF_NODE	176:7	176:7	20	-
FIELD	176:8	176:8	19	2
LEAF_NODE	176:8	176:8	20	2
LEAF_NODE	176:9	176:9	17	]
ASSIGN_OP	176:11	176:11	15	=
LEAF_NODE	176:11	176:11	16	=
RVAL	176:13	176:13	15	op [ - 1 ]
FIELD	176:13	176:18	16	op [ - 1 ]
LEAF_NODE	176:13	176:13	17	op
LEAF_NODE	176:15	176:15	17	[
EXPR	176:16	176:16	17	- 1
UNARY_EXPR	176:16	176:17	18	- 1
UNARY_OPERATOR	176:16	176:16	19	-
LEAF_NODE	176:16	176:16	20	-
FIELD	176:17	176:17	19	1
LEAF_NODE	176:17	176:17	20	1
LEAF_NODE	176:18	176:18	17	]
LEAF_NODE	176:19	176:19	13	;
LEAF_NODE	177:3	177:3	11	}
SELECTION	177:5	178:4	9	
KEYWORD	177:5	177:5	10	else
LEAF_NODE	177:5	177:5	11	else
STATEMENTS	178:4	178:4	10	
EXPR_STATEMENT	178:4	178:15	11	state = RUN ;
EXPR	178:4	178:4	12	state = RUN
ASSIGN	178:4	178:12	13	state = RUN
LVAL	178:4	178:4	14	state
FIELD	178:4	178:4	15	state
LEAF_NODE	178:4	178:4	16	state
ASSIGN_OP	178:10	178:10	14	=
LEAF_NODE	178:10	178:10	15	=
RVAL	178:12	178:12	14	RUN
FIELD	178:12	178:12	15	RUN
LEAF_NODE	178:12	178:12	16	RUN
LEAF_NODE	178:15	178:15	12	;
JUMP_STATEMENT	179:3	179:13	9	goto again ;
KEYWORD	179:3	179:3	10	goto
LEAF_NODE	179:3	179:3	11	goto
DESTINATION	179:8	179:8	10	again
LEAF_NODE	179:8	179:8	11	again
LEAF_NODE	179:13	179:13	10	;
LEAF_NODE	180:2	180:2	8	}
LEAF_NODE	181:1	181:1	5	}
EXPR_STATEMENT	182:1	182:50	3	tif -> tif_rawcc += ( tmsize_t ) ( op - tif -> tif_rawcp ) ;
EXPR	182:1	182:1	4	tif -> tif_rawcc += ( tmsize_t ) ( op - tif -> tif_rawcp )
ASSIGN	182:1	182:19	5	tif -> tif_rawcc += ( tmsize_t ) ( op - tif -> tif_rawcp )
LVAL	182:1	182:1	6	tif -> tif_rawcc
FIELD	182:1	182:6	7	tif -> tif_rawcc
LEAF_NODE	182:1	182:1	8	tif
LEAF_NODE	182:4	182:4	8	->
LEAF_NODE	182:6	182:6	8	tif_rawcc
ASSIGN_OP	182:16	182:16	6	+=
LEAF_NODE	182:16	182:16	7	+=
RVAL	182:19	182:49	6	( tmsize_t ) ( op - tif -> tif_rawcp )
LEAF_NODE	182:19	182:19	7	(
TYPE_NAME	182:20	182:20	7	tmsize_t
LEAF_NODE	182:20	182:20	8	tmsize_t
LEAF_NODE	182:28	182:28	7	)
LEAF_NODE	182:29	182:29	7	(
FIELD	182:30	182:30	7	op
LEAF_NODE	182:30	182:30	8	op
LEAF_NODE	182:33	182:33	7	-
FIELD	182:35	182:40	7	tif -> tif_rawcp
LEAF_NODE	182:35	182:35	8	tif
LEAF_NODE	182:38	182:38	8	->
LEAF_NODE	182:40	182:40	8	tif_rawcp
LEAF_NODE	182:49	182:49	7	)
LEAF_NODE	182:50	182:50	4	;
EXPR_STATEMENT	183:1	183:20	3	tif -> tif_rawcp = op ;
EXPR	183:1	183:1	4	tif -> tif_rawcp = op
ASSIGN	183:1	183:18	5	tif -> tif_rawcp = op
LVAL	183:1	183:1	6	tif -> tif_rawcp
FIELD	183:1	183:6	7	tif -> tif_rawcp
LEAF_NODE	183:1	183:1	8	tif
LEAF_NODE	183:4	183:4	8	->
LEAF_NODE	183:6	183:6	8	tif_rawcp
ASSIGN_OP	183:16	183:16	6	=
LEAF_NODE	183:16	183:16	7	=
RVAL	183:18	183:18	6	op
FIELD	183:18	183:18	7	op
LEAF_NODE	183:18	183:18	8	op
LEAF_NODE	183:20	183:20	4	;
JUMP_STATEMENT	184:1	184:11	3	return ( 1 ) ;
KEYWORD	184:1	184:1	4	return
LEAF_NODE	184:1	184:1	5	return
DESTINATION	184:8	184:8	4	( 1 )
EXPR	184:8	184:10	5	( 1 )
LEAF_NODE	184:8	184:8	6	(
FIELD	184:9	184:9	6	1
LEAF_NODE	184:9	184:9	7	1
LEAF_NODE	184:10	184:10	6	)
LEAF_NODE	184:11	184:11	4	;
LEAF_NODE	185:0	185:0	2	}
FUNCTION_DEF	194:0	211:0	1	
RETURN_TYPE	194:0	194:7	2	static int
LEAF_NODE	194:0	194:0	3	static
TYPE_NAME	194:7	194:7	3	int
LEAF_NODE	194:7	194:7	4	int
FUNCTION_NAME	195:0	195:0	2	PackBitsEncodeChunk
LEAF_NODE	195:0	195:0	3	PackBitsEncodeChunk
PARAMETER_LIST	195:19	195:63	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	195:19	195:19	3	(
PARAMETER_DECL	195:20	195:26	3	TIFF * tif
TYPE	195:20	195:24	4	TIFF *
TYPE_NAME	195:20	195:20	5	TIFF
LEAF_NODE	195:20	195:20	6	TIFF
POINTER	195:24	195:24	5	*
LEAF_NODE	195:24	195:24	6	*
NAME	195:26	195:26	4	tif
LEAF_NODE	195:26	195:26	5	tif
LEAF_NODE	195:29	195:29	3	,
PARAMETER_DECL	195:31	195:38	3	uint8 * bp
TYPE	195:31	195:36	4	uint8 *
TYPE_NAME	195:31	195:31	5	uint8
LEAF_NODE	195:31	195:31	6	uint8
POINTER	195:36	195:36	5	*
LEAF_NODE	195:36	195:36	6	*
NAME	195:38	195:38	4	bp
LEAF_NODE	195:38	195:38	5	bp
LEAF_NODE	195:40	195:40	3	,
PARAMETER_DECL	195:42	195:51	3	tmsize_t cc
TYPE	195:42	195:42	4	tmsize_t
TYPE_NAME	195:42	195:42	5	tmsize_t
LEAF_NODE	195:42	195:42	6	tmsize_t
NAME	195:51	195:51	4	cc
LEAF_NODE	195:51	195:51	5	cc
LEAF_NODE	195:53	195:53	3	,
PARAMETER_DECL	195:55	195:62	3	uint16 s
TYPE	195:55	195:55	4	uint16
TYPE_NAME	195:55	195:55	5	uint16
LEAF_NODE	195:55	195:55	6	uint16
NAME	195:62	195:62	4	s
LEAF_NODE	195:62	195:62	5	s
LEAF_NODE	195:63	195:63	3	)
LEAF_NODE	196:0	196:0	2	{
STATEMENTS	197:1	210:1	2	
LEAF_NODE	197:1	197:1	3	tmsize_t
LEAF_NODE	197:10	197:10	3	rowsize
LEAF_NODE	197:18	197:18	3	=
LEAF_NODE	197:20	197:20	3	*
EXPR_STATEMENT	197:21	197:45	3	( tmsize_t * ) tif -> tif_data ;
EXPR	197:21	197:32	4	( tmsize_t * ) tif -> tif_data
LEAF_NODE	197:21	197:21	5	(
TYPE_NAME	197:22	197:22	5	tmsize_t
LEAF_NODE	197:22	197:22	6	tmsize_t
LEAF_NODE	197:30	197:30	5	*
LEAF_NODE	197:31	197:31	5	)
FIELD	197:32	197:37	5	tif -> tif_data
LEAF_NODE	197:32	197:32	6	tif
LEAF_NODE	197:35	197:35	6	->
LEAF_NODE	197:37	197:37	6	tif_data
LEAF_NODE	197:45	197:45	4	;
ITERATION	199:1	199:16	3	
KEYWORD	199:1	199:1	4	while
LEAF_NODE	199:1	199:1	5	while
LEAF_NODE	199:7	199:7	4	(
CONDITION	199:8	199:8	4	cc > 0
EXPR	199:8	199:13	5	cc > 0
FIELD	199:8	199:8	6	cc
LEAF_NODE	199:8	199:8	7	cc
REL_OPERATOR	199:11	199:11	6	>
LEAF_NODE	199:11	199:11	7	>
FIELD	199:13	199:13	6	0
LEAF_NODE	199:13	199:13	7	0
LEAF_NODE	199:14	199:14	4	)
STATEMENTS	199:16	209:1	4	
LEAF_NODE	199:16	199:16	5	{
STATEMENTS	200:2	208:2	5	
SIMPLE_DECL	200:2	200:26	6	tmsize_t chunk ; chunk = rowsize ;
VAR_DECL	200:2	200:11	7	tmsize_t chunk ; chunk = rowsize
TYPE	200:2	200:2	8	tmsize_t
TYPE_NAME	200:2	200:2	9	tmsize_t
LEAF_NODE	200:2	200:2	10	tmsize_t
NAME	200:11	200:11	8	chunk
LEAF_NODE	200:11	200:11	9	chunk
LEAF_NODE	0:0	0:0	8	;
INIT	200:11	200:11	8	chunk = rowsize
ASSIGN	200:11	200:19	9	chunk = rowsize
LVAL	200:11	200:11	10	chunk
NAME	200:11	200:11	11	chunk
LEAF_NODE	200:11	200:11	12	chunk
ASSIGN_OP	200:17	200:17	10	=
LEAF_NODE	200:17	200:17	11	=
RVAL	200:19	200:19	10	rowsize
FIELD	200:19	200:19	11	rowsize
LEAF_NODE	200:19	200:19	12	rowsize
LEAF_NODE	200:26	200:26	7	;
SELECTION	202:2	203:6	6	
KEYWORD	202:2	202:2	7	if
LEAF_NODE	202:2	202:2	8	if
LEAF_NODE	202:4	202:4	7	(
CONDITION	202:6	202:6	7	cc < chunk
EXPR	202:6	202:11	8	cc < chunk
FIELD	202:6	202:6	9	cc
LEAF_NODE	202:6	202:6	10	cc
REL_OPERATOR	202:9	202:9	9	<
LEAF_NODE	202:9	202:9	10	<
FIELD	202:11	202:11	9	chunk
LEAF_NODE	202:11	202:11	10	chunk
LEAF_NODE	202:17	202:17	7	)
STATEMENTS	203:6	203:6	7	
EXPR_STATEMENT	203:6	203:16	8	chunk = cc ;
EXPR	203:6	203:6	9	chunk = cc
ASSIGN	203:6	203:14	10	chunk = cc
LVAL	203:6	203:6	11	chunk
FIELD	203:6	203:6	12	chunk
LEAF_NODE	203:6	203:6	13	chunk
ASSIGN_OP	203:12	203:12	11	=
LEAF_NODE	203:12	203:12	12	=
RVAL	203:14	203:14	11	cc
FIELD	203:14	203:14	12	cc
LEAF_NODE	203:14	203:14	13	cc
LEAF_NODE	203:16	203:16	9	;
SELECTION	205:2	206:6	6	
KEYWORD	205:2	205:2	7	if
LEAF_NODE	205:2	205:2	8	if
LEAF_NODE	205:5	205:5	7	(
CONDITION	205:6	205:6	7	PackBitsEncode ( tif , bp , chunk , s ) < 0
EXPR	205:6	205:42	8	PackBitsEncode ( tif , bp , chunk , s ) < 0
FUNCTION_CALL	205:6	205:38	9	PackBitsEncode ( tif , bp , chunk , s )
CALLEE	205:6	205:6	10	PackBitsEncode
LEAF_NODE	205:6	205:6	11	PackBitsEncode
LEAF_NODE	205:20	205:20	10	(
ARGUMENT	205:21	205:21	10	tif
FIELD	205:21	205:21	11	tif
LEAF_NODE	205:21	205:21	12	tif
LEAF_NODE	205:24	205:24	10	,
ARGUMENT	205:26	205:26	10	bp
FIELD	205:26	205:26	11	bp
LEAF_NODE	205:26	205:26	12	bp
LEAF_NODE	205:28	205:28	10	,
ARGUMENT	205:30	205:30	10	chunk
FIELD	205:30	205:30	11	chunk
LEAF_NODE	205:30	205:30	12	chunk
LEAF_NODE	205:35	205:35	10	,
ARGUMENT	205:37	205:37	10	s
FIELD	205:37	205:37	11	s
LEAF_NODE	205:37	205:37	12	s
LEAF_NODE	205:38	205:38	10	)
REL_OPERATOR	205:40	205:40	9	<
LEAF_NODE	205:40	205:40	10	<
FIELD	205:42	205:42	9	0
LEAF_NODE	205:42	205:42	10	0
LEAF_NODE	205:43	205:43	7	)
STATEMENTS	206:6	206:6	7	
JUMP_STATEMENT	206:6	206:17	8	return ( - 1 ) ;
KEYWORD	206:6	206:6	9	return
LEAF_NODE	206:6	206:6	10	return
DESTINATION	206:13	206:13	9	( - 1 )
EXPR	206:13	206:16	10	( - 1 )
LEAF_NODE	206:13	206:13	11	(
UNARY_EXPR	206:14	206:15	11	- 1
UNARY_OPERATOR	206:14	206:14	12	-
LEAF_NODE	206:14	206:14	13	-
FIELD	206:15	206:15	12	1
LEAF_NODE	206:15	206:15	13	1
LEAF_NODE	206:16	206:16	11	)
LEAF_NODE	206:17	206:17	9	;
EXPR_STATEMENT	207:2	207:13	6	bp += chunk ;
EXPR	207:2	207:2	7	bp += chunk
ASSIGN	207:2	207:8	8	bp += chunk
LVAL	207:2	207:2	9	bp
FIELD	207:2	207:2	10	bp
LEAF_NODE	207:2	207:2	11	bp
ASSIGN_OP	207:5	207:5	9	+=
LEAF_NODE	207:5	207:5	10	+=
RVAL	207:8	207:8	9	chunk
FIELD	207:8	207:8	10	chunk
LEAF_NODE	207:8	207:8	11	chunk
LEAF_NODE	207:13	207:13	7	;
EXPR_STATEMENT	208:2	208:13	6	cc -= chunk ;
EXPR	208:2	208:2	7	cc -= chunk
ASSIGN	208:2	208:8	8	cc -= chunk
LVAL	208:2	208:2	9	cc
FIELD	208:2	208:2	10	cc
LEAF_NODE	208:2	208:2	11	cc
ASSIGN_OP	208:5	208:5	9	-=
LEAF_NODE	208:5	208:5	10	-=
RVAL	208:8	208:8	9	chunk
FIELD	208:8	208:8	10	chunk
LEAF_NODE	208:8	208:8	11	chunk
LEAF_NODE	208:13	208:13	7	;
LEAF_NODE	209:1	209:1	5	}
JUMP_STATEMENT	210:1	210:11	3	return ( 1 ) ;
KEYWORD	210:1	210:1	4	return
LEAF_NODE	210:1	210:1	5	return
DESTINATION	210:8	210:8	4	( 1 )
EXPR	210:8	210:10	5	( 1 )
LEAF_NODE	210:8	210:8	6	(
FIELD	210:9	210:9	6	1
LEAF_NODE	210:9	210:9	7	1
LEAF_NODE	210:10	210:10	6	)
LEAF_NODE	210:11	210:11	4	;
LEAF_NODE	211:0	211:0	2	}
FUNCTION_DEF	213:0	284:0	1	
RETURN_TYPE	213:0	213:7	2	static int
LEAF_NODE	213:0	213:0	3	static
TYPE_NAME	213:7	213:7	3	int
LEAF_NODE	213:7	213:7	4	int
FUNCTION_NAME	214:0	214:0	2	PackBitsDecode
LEAF_NODE	214:0	214:0	3	PackBitsDecode
PARAMETER_LIST	214:14	214:59	2	( TIFF * tif , uint8 * op , tmsize_t occ , uint16 s )
LEAF_NODE	214:14	214:14	3	(
PARAMETER_DECL	214:15	214:21	3	TIFF * tif
TYPE	214:15	214:19	4	TIFF *
TYPE_NAME	214:15	214:15	5	TIFF
LEAF_NODE	214:15	214:15	6	TIFF
POINTER	214:19	214:19	5	*
LEAF_NODE	214:19	214:19	6	*
NAME	214:21	214:21	4	tif
LEAF_NODE	214:21	214:21	5	tif
LEAF_NODE	214:24	214:24	3	,
PARAMETER_DECL	214:26	214:33	3	uint8 * op
TYPE	214:26	214:31	4	uint8 *
TYPE_NAME	214:26	214:26	5	uint8
LEAF_NODE	214:26	214:26	6	uint8
POINTER	214:31	214:31	5	*
LEAF_NODE	214:31	214:31	6	*
NAME	214:33	214:33	4	op
LEAF_NODE	214:33	214:33	5	op
LEAF_NODE	214:35	214:35	3	,
PARAMETER_DECL	214:37	214:46	3	tmsize_t occ
TYPE	214:37	214:37	4	tmsize_t
TYPE_NAME	214:37	214:37	5	tmsize_t
LEAF_NODE	214:37	214:37	6	tmsize_t
NAME	214:46	214:46	4	occ
LEAF_NODE	214:46	214:46	5	occ
LEAF_NODE	214:49	214:49	3	,
PARAMETER_DECL	214:51	214:58	3	uint16 s
TYPE	214:51	214:51	4	uint16
TYPE_NAME	214:51	214:51	5	uint16
LEAF_NODE	214:51	214:51	6	uint16
NAME	214:58	214:58	4	s
LEAF_NODE	214:58	214:58	5	s
LEAF_NODE	214:59	214:59	3	)
LEAF_NODE	215:0	215:0	2	{
STATEMENTS	216:1	283:1	2	
LEAF_NODE	216:1	216:1	3	static
SIMPLE_DECL	216:8	216:46	3	const char [ ] module ; module = "PackBitsDecode" ;
VAR_DECL	216:8	216:19	4	const char [ ] module ; module = "PackBitsDecode"
TYPE	216:8	216:25	5	const char [ ]
TYPE_NAME	216:8	216:14	6	const char
LEAF_NODE	216:8	216:8	7	const
LEAF_NODE	216:14	216:14	7	char
TYPE_SUFFIX	216:25	216:26	6	[ ]
LEAF_NODE	216:25	216:25	7	[
LEAF_NODE	216:26	216:26	7	]
NAME	216:19	216:19	5	module
LEAF_NODE	216:19	216:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	216:19	216:19	5	module = "PackBitsDecode"
ASSIGN	216:19	216:30	6	module = "PackBitsDecode"
LVAL	216:19	216:19	7	module
NAME	216:19	216:19	8	module
LEAF_NODE	216:19	216:19	9	module
ASSIGN_OP	216:28	216:28	7	=
LEAF_NODE	216:28	216:28	8	=
RVAL	216:30	216:30	7	"PackBitsDecode"
FIELD	216:30	216:30	8	"PackBitsDecode"
LEAF_NODE	216:30	216:30	9	"PackBitsDecode"
LEAF_NODE	216:46	216:46	4	;
SIMPLE_DECL	217:1	217:9	3	char * bp ;
VAR_DECL	217:1	217:7	4	char * bp
TYPE	217:1	217:6	5	char *
TYPE_NAME	217:1	217:1	6	char
LEAF_NODE	217:1	217:1	7	char
POINTER	217:6	217:6	6	*
LEAF_NODE	217:6	217:6	7	*
NAME	217:7	217:7	5	bp
LEAF_NODE	217:7	217:7	6	bp
LEAF_NODE	217:9	217:9	4	;
SIMPLE_DECL	218:1	218:12	3	tmsize_t cc ;
VAR_DECL	218:1	218:10	4	tmsize_t cc
TYPE	218:1	218:1	5	tmsize_t
TYPE_NAME	218:1	218:1	6	tmsize_t
LEAF_NODE	218:1	218:1	7	tmsize_t
NAME	218:10	218:10	5	cc
LEAF_NODE	218:10	218:10	6	cc
LEAF_NODE	218:12	218:12	4	;
SIMPLE_DECL	219:1	219:7	3	long n ;
VAR_DECL	219:1	219:6	4	long n
TYPE	219:1	219:1	5	long
TYPE_NAME	219:1	219:1	6	long
LEAF_NODE	219:1	219:1	7	long
NAME	219:6	219:6	5	n
LEAF_NODE	219:6	219:6	6	n
LEAF_NODE	219:7	219:7	4	;
SIMPLE_DECL	220:1	220:6	3	int b ;
VAR_DECL	220:1	220:5	4	int b
TYPE	220:1	220:1	5	int
TYPE_NAME	220:1	220:1	6	int
LEAF_NODE	220:1	220:1	7	int
NAME	220:5	220:5	5	b
LEAF_NODE	220:5	220:5	6	b
LEAF_NODE	220:6	220:6	4	;
EXPR_STATEMENT	222:1	222:9	3	( void ) s ;
EXPR	222:1	222:8	4	( void ) s
LEAF_NODE	222:1	222:1	5	(
TYPE_NAME	222:2	222:2	5	void
LEAF_NODE	222:2	222:2	6	void
LEAF_NODE	222:6	222:6	5	)
FIELD	222:8	222:8	5	s
LEAF_NODE	222:8	222:8	6	s
LEAF_NODE	222:9	222:9	4	;
EXPR_STATEMENT	223:1	223:28	3	bp = ( char * ) tif -> tif_rawcp ;
EXPR	223:1	223:1	4	bp = ( char * ) tif -> tif_rawcp
ASSIGN	223:1	223:6	5	bp = ( char * ) tif -> tif_rawcp
LVAL	223:1	223:1	6	bp
FIELD	223:1	223:1	7	bp
LEAF_NODE	223:1	223:1	8	bp
ASSIGN_OP	223:4	223:4	6	=
LEAF_NODE	223:4	223:4	7	=
RVAL	223:6	223:14	6	( char * ) tif -> tif_rawcp
LEAF_NODE	223:6	223:6	7	(
TYPE_NAME	223:7	223:7	7	char
LEAF_NODE	223:7	223:7	8	char
LEAF_NODE	223:11	223:11	7	*
LEAF_NODE	223:12	223:12	7	)
FIELD	223:14	223:19	7	tif -> tif_rawcp
LEAF_NODE	223:14	223:14	8	tif
LEAF_NODE	223:17	223:17	8	->
LEAF_NODE	223:19	223:19	8	tif_rawcp
LEAF_NODE	223:28	223:28	4	;
EXPR_STATEMENT	224:1	224:20	3	cc = tif -> tif_rawcc ;
EXPR	224:1	224:1	4	cc = tif -> tif_rawcc
ASSIGN	224:1	224:6	5	cc = tif -> tif_rawcc
LVAL	224:1	224:1	6	cc
FIELD	224:1	224:1	7	cc
LEAF_NODE	224:1	224:1	8	cc
ASSIGN_OP	224:4	224:4	6	=
LEAF_NODE	224:4	224:4	7	=
RVAL	224:6	224:6	6	tif -> tif_rawcc
FIELD	224:6	224:11	7	tif -> tif_rawcc
LEAF_NODE	224:6	224:6	8	tif
LEAF_NODE	224:9	224:9	8	->
LEAF_NODE	224:11	224:11	8	tif_rawcc
LEAF_NODE	224:20	224:20	4	;
ITERATION	225:1	225:27	3	
KEYWORD	225:1	225:1	4	while
LEAF_NODE	225:1	225:1	5	while
LEAF_NODE	225:7	225:7	4	(
CONDITION	225:8	225:8	4	cc > 0 && occ > 0
EXPR	225:8	225:8	5	cc > 0 && occ > 0
AND	225:8	225:18	6	cc > 0 && occ > 0
EXPR	225:8	225:13	7	cc > 0
FIELD	225:8	225:8	8	cc
LEAF_NODE	225:8	225:8	9	cc
REL_OPERATOR	225:11	225:11	8	>
LEAF_NODE	225:11	225:11	9	>
FIELD	225:13	225:13	8	0
LEAF_NODE	225:13	225:13	9	0
LEAF_NODE	225:15	225:15	7	&&
EXPR	225:18	225:24	7	occ > 0
FIELD	225:18	225:18	8	occ
LEAF_NODE	225:18	225:18	9	occ
REL_OPERATOR	225:22	225:22	8	>
LEAF_NODE	225:22	225:22	9	>
FIELD	225:24	225:24	8	0
LEAF_NODE	225:24	225:24	9	0
LEAF_NODE	225:25	225:25	4	)
STATEMENTS	225:27	274:1	4	
LEAF_NODE	225:27	225:27	5	{
STATEMENTS	226:2	256:4	5	
EXPR_STATEMENT	226:2	226:18	6	n = ( long ) * bp ++ ;
EXPR	226:2	226:2	7	n = ( long ) * bp ++
ASSIGN	226:2	226:6	8	n = ( long ) * bp ++
LVAL	226:2	226:2	9	n
FIELD	226:2	226:2	10	n
LEAF_NODE	226:2	226:2	11	n
ASSIGN_OP	226:4	226:4	9	=
LEAF_NODE	226:4	226:4	10	=
RVAL	226:6	226:13	9	( long ) * bp ++
LEAF_NODE	226:6	226:6	10	(
TYPE_NAME	226:7	226:7	10	long
LEAF_NODE	226:7	226:7	11	long
LEAF_NODE	226:11	226:11	10	)
UNARY_EXPR	226:13	226:14	10	* bp ++
UNARY_OPERATOR	226:13	226:13	11	*
LEAF_NODE	226:13	226:13	12	*
FIELD	226:14	226:16	11	bp ++
LEAF_NODE	226:14	226:14	12	bp
LEAF_NODE	226:16	226:16	12	++
LEAF_NODE	226:18	226:18	7	;
EXPR_STATEMENT	227:2	227:6	6	cc -- ;
EXPR	227:2	227:2	7	cc --
FIELD	227:2	227:4	8	cc --
LEAF_NODE	227:2	227:2	9	cc
LEAF_NODE	227:4	227:4	9	--
LEAF_NODE	227:6	227:6	7	;
SELECTION	232:2	233:3	6	
KEYWORD	232:2	232:2	7	if
LEAF_NODE	232:2	232:2	8	if
LEAF_NODE	232:5	232:5	7	(
CONDITION	232:6	232:6	7	n >= 128
EXPR	232:6	232:11	8	n >= 128
FIELD	232:6	232:6	9	n
LEAF_NODE	232:6	232:6	10	n
REL_OPERATOR	232:8	232:8	9	>=
LEAF_NODE	232:8	232:8	10	>=
FIELD	232:11	232:11	9	128
LEAF_NODE	232:11	232:11	10	128
LEAF_NODE	232:14	232:14	7	)
STATEMENTS	233:3	233:3	7	
EXPR_STATEMENT	233:3	233:11	8	n -= 256 ;
EXPR	233:3	233:3	9	n -= 256
ASSIGN	233:3	233:8	10	n -= 256
LVAL	233:3	233:3	11	n
FIELD	233:3	233:3	12	n
LEAF_NODE	233:3	233:3	13	n
ASSIGN_OP	233:5	233:5	11	-=
LEAF_NODE	233:5	233:5	12	-=
RVAL	233:8	233:8	11	256
FIELD	233:8	233:8	12	256
LEAF_NODE	233:8	233:8	13	256
LEAF_NODE	233:11	233:11	9	;
SELECTION	234:2	234:13	6	
KEYWORD	234:2	234:2	7	if
LEAF_NODE	234:2	234:2	8	if
LEAF_NODE	234:5	234:5	7	(
CONDITION	234:6	234:6	7	n < 0
EXPR	234:6	234:10	8	n < 0
FIELD	234:6	234:6	9	n
LEAF_NODE	234:6	234:6	10	n
REL_OPERATOR	234:8	234:8	9	<
LEAF_NODE	234:8	234:8	10	<
FIELD	234:10	234:10	9	0
LEAF_NODE	234:10	234:10	10	0
LEAF_NODE	234:11	234:11	7	)
STATEMENTS	234:13	256:2	7	
LEAF_NODE	234:13	234:13	8	{
STATEMENTS	235:3	254:3	8	
SELECTION	235:3	236:4	9	
KEYWORD	235:3	235:3	10	if
LEAF_NODE	235:3	235:3	11	if
LEAF_NODE	235:6	235:6	10	(
CONDITION	235:7	235:7	10	n == - 128
EXPR	235:7	235:12	11	n == - 128
FIELD	235:7	235:7	12	n
LEAF_NODE	235:7	235:7	13	n
EQ_OPERATOR	235:9	235:9	12	==
LEAF_NODE	235:9	235:9	13	==
UNARY_EXPR	235:12	235:13	12	- 128
UNARY_OPERATOR	235:12	235:12	13	-
LEAF_NODE	235:12	235:12	14	-
FIELD	235:13	235:13	13	128
LEAF_NODE	235:13	235:13	14	128
LEAF_NODE	235:16	235:16	10	)
STATEMENTS	236:4	236:4	10	
JUMP_STATEMENT	236:4	236:12	11	continue DESTINATION ;
KEYWORD	236:4	236:4	12	continue
LEAF_NODE	236:4	236:4	13	continue
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	236:12	236:12	12	;
EXPR_STATEMENT	237:3	237:13	9	n = - n + 1 ;
EXPR	237:3	237:3	10	n = - n + 1
ASSIGN	237:3	237:7	11	n = - n + 1
LVAL	237:3	237:3	12	n
FIELD	237:3	237:3	13	n
LEAF_NODE	237:3	237:3	14	n
ASSIGN_OP	237:5	237:5	12	=
LEAF_NODE	237:5	237:5	13	=
RVAL	237:7	237:12	12	- n + 1
UNARY_EXPR	237:7	237:8	13	- n
UNARY_OPERATOR	237:7	237:7	14	-
LEAF_NODE	237:7	237:7	15	-
FIELD	237:8	237:8	14	n
LEAF_NODE	237:8	237:8	15	n
LEAF_NODE	237:10	237:10	13	+
FIELD	237:12	237:12	13	1
LEAF_NODE	237:12	237:12	14	1
LEAF_NODE	237:13	237:13	10	;
SELECTION	238:3	239:3	9	
KEYWORD	238:3	238:3	10	if
LEAF_NODE	238:3	238:3	11	if
LEAF_NODE	238:5	238:5	10	(
CONDITION	238:7	238:7	10	occ < ( tmsize_t ) n
EXPR	238:7	238:23	11	occ < ( tmsize_t ) n
FIELD	238:7	238:7	12	occ
LEAF_NODE	238:7	238:7	13	occ
REL_OPERATOR	238:11	238:11	12	<
LEAF_NODE	238:11	238:11	13	<
LEAF_NODE	238:13	238:13	12	(
TYPE_NAME	238:14	238:14	12	tmsize_t
LEAF_NODE	238:14	238:14	13	tmsize_t
LEAF_NODE	238:22	238:22	12	)
FIELD	238:23	238:23	12	n
LEAF_NODE	238:23	238:23	13	n
LEAF_NODE	238:25	238:25	10	)
STATEMENTS	239:3	244:3	10	
LEAF_NODE	239:3	239:3	11	{
STATEMENTS	240:4	243:4	11	
EXPR_STATEMENT	240:4	242:44	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Discarding %lu bytes to avoid buffer overrun" , ( unsigned long ) ( ( tmsize_t ) n - occ ) ) ;
EXPR	240:4	240:4	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Discarding %lu bytes to avoid buffer overrun" , ( unsigned long ) ( ( tmsize_t ) n - occ ) )
FUNCTION_CALL	240:4	242:43	14	TIFFWarningExt ( tif -> tif_clientdata , module , "Discarding %lu bytes to avoid buffer overrun" , ( unsigned long ) ( ( tmsize_t ) n - occ ) )
CALLEE	240:4	240:4	15	TIFFWarningExt
LEAF_NODE	240:4	240:4	16	TIFFWarningExt
LEAF_NODE	240:18	240:18	15	(
ARGUMENT	240:19	240:19	15	tif -> tif_clientdata
FIELD	240:19	240:24	16	tif -> tif_clientdata
LEAF_NODE	240:19	240:19	17	tif
LEAF_NODE	240:22	240:22	17	->
LEAF_NODE	240:24	240:24	17	tif_clientdata
LEAF_NODE	240:38	240:38	15	,
ARGUMENT	240:40	240:40	15	module
FIELD	240:40	240:40	16	module
LEAF_NODE	240:40	240:40	17	module
LEAF_NODE	240:46	240:46	15	,
ARGUMENT	241:8	241:8	15	"Discarding %lu bytes to avoid buffer overrun"
FIELD	241:8	241:8	16	"Discarding %lu bytes to avoid buffer overrun"
LEAF_NODE	241:8	241:8	17	"Discarding %lu bytes to avoid buffer overrun"
LEAF_NODE	241:54	241:54	15	,
ARGUMENT	242:8	242:42	15	( unsigned long ) ( ( tmsize_t ) n - occ )
LEAF_NODE	242:8	242:8	16	(
TYPE_NAME	242:9	242:18	16	unsigned long
LEAF_NODE	242:9	242:9	17	unsigned
LEAF_NODE	242:18	242:18	17	long
LEAF_NODE	242:22	242:22	16	)
LEAF_NODE	242:24	242:24	16	(
LEAF_NODE	242:25	242:25	16	(
TYPE_NAME	242:26	242:26	16	tmsize_t
LEAF_NODE	242:26	242:26	17	tmsize_t
LEAF_NODE	242:34	242:34	16	)
FIELD	242:35	242:35	16	n
LEAF_NODE	242:35	242:35	17	n
LEAF_NODE	242:37	242:37	16	-
FIELD	242:39	242:39	16	occ
LEAF_NODE	242:39	242:39	17	occ
LEAF_NODE	242:42	242:42	16	)
LEAF_NODE	242:43	242:43	15	)
LEAF_NODE	242:44	242:44	13	;
EXPR_STATEMENT	243:4	243:17	12	n = ( long ) occ ;
EXPR	243:4	243:4	13	n = ( long ) occ
ASSIGN	243:4	243:8	14	n = ( long ) occ
LVAL	243:4	243:4	15	n
FIELD	243:4	243:4	16	n
LEAF_NODE	243:4	243:4	17	n
ASSIGN_OP	243:6	243:6	15	=
LEAF_NODE	243:6	243:6	16	=
RVAL	243:8	243:14	15	( long ) occ
LEAF_NODE	243:8	243:8	16	(
TYPE_NAME	243:9	243:9	16	long
LEAF_NODE	243:9	243:9	17	long
LEAF_NODE	243:13	243:13	16	)
FIELD	243:14	243:14	16	occ
LEAF_NODE	243:14	243:14	17	occ
LEAF_NODE	243:17	243:17	13	;
LEAF_NODE	244:3	244:3	11	}
SELECTION	245:3	246:3	9	
KEYWORD	245:3	245:3	10	if
LEAF_NODE	245:3	245:3	11	if
LEAF_NODE	245:5	245:5	10	(
CONDITION	245:7	245:7	10	cc == 0
EXPR	245:7	245:13	11	cc == 0
FIELD	245:7	245:7	12	cc
LEAF_NODE	245:7	245:7	13	cc
EQ_OPERATOR	245:10	245:10	12	==
LEAF_NODE	245:10	245:10	13	==
FIELD	245:13	245:13	12	0
LEAF_NODE	245:13	245:13	13	0
LEAF_NODE	245:15	245:15	10	)
STATEMENTS	246:3	250:3	10	
LEAF_NODE	246:3	246:3	11	{
STATEMENTS	247:4	249:4	11	
EXPR_STATEMENT	247:4	248:62	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Terminating PackBitsDecode due to lack of data." ) ;
EXPR	247:4	247:4	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Terminating PackBitsDecode due to lack of data." )
FUNCTION_CALL	247:4	248:61	14	TIFFWarningExt ( tif -> tif_clientdata , module , "Terminating PackBitsDecode due to lack of data." )
CALLEE	247:4	247:4	15	TIFFWarningExt
LEAF_NODE	247:4	247:4	16	TIFFWarningExt
LEAF_NODE	247:18	247:18	15	(
ARGUMENT	247:19	247:19	15	tif -> tif_clientdata
FIELD	247:19	247:24	16	tif -> tif_clientdata
LEAF_NODE	247:19	247:19	17	tif
LEAF_NODE	247:22	247:22	17	->
LEAF_NODE	247:24	247:24	17	tif_clientdata
LEAF_NODE	247:38	247:38	15	,
ARGUMENT	247:40	247:40	15	module
FIELD	247:40	247:40	16	module
LEAF_NODE	247:40	247:40	17	module
LEAF_NODE	247:46	247:46	15	,
ARGUMENT	248:12	248:12	15	"Terminating PackBitsDecode due to lack of data."
FIELD	248:12	248:12	16	"Terminating PackBitsDecode due to lack of data."
LEAF_NODE	248:12	248:12	17	"Terminating PackBitsDecode due to lack of data."
LEAF_NODE	248:61	248:61	15	)
LEAF_NODE	248:62	248:62	13	;
JUMP_STATEMENT	249:4	249:9	12	break DESTINATION ;
KEYWORD	249:4	249:4	13	break
LEAF_NODE	249:4	249:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	249:9	249:9	13	;
LEAF_NODE	250:3	250:3	11	}
EXPR_STATEMENT	251:3	251:11	9	occ -= n ;
EXPR	251:3	251:3	10	occ -= n
ASSIGN	251:3	251:10	11	occ -= n
LVAL	251:3	251:3	12	occ
FIELD	251:3	251:3	13	occ
LEAF_NODE	251:3	251:3	14	occ
ASSIGN_OP	251:7	251:7	12	-=
LEAF_NODE	251:7	251:7	13	-=
RVAL	251:10	251:10	12	n
FIELD	251:10	251:10	13	n
LEAF_NODE	251:10	251:10	14	n
LEAF_NODE	251:11	251:11	10	;
EXPR_STATEMENT	252:3	252:12	9	b = * bp ++ ;
EXPR	252:3	252:3	10	b = * bp ++
ASSIGN	252:3	252:7	11	b = * bp ++
LVAL	252:3	252:3	12	b
FIELD	252:3	252:3	13	b
LEAF_NODE	252:3	252:3	14	b
ASSIGN_OP	252:5	252:5	12	=
LEAF_NODE	252:5	252:5	13	=
RVAL	252:7	252:7	12	* bp ++
UNARY_EXPR	252:7	252:8	13	* bp ++
UNARY_OPERATOR	252:7	252:7	14	*
LEAF_NODE	252:7	252:7	15	*
FIELD	252:8	252:10	14	bp ++
LEAF_NODE	252:8	252:8	15	bp
LEAF_NODE	252:10	252:10	15	++
LEAF_NODE	252:12	252:12	10	;
EXPR_STATEMENT	253:3	253:7	9	cc -- ;
EXPR	253:3	253:3	10	cc --
FIELD	253:3	253:5	11	cc --
LEAF_NODE	253:3	253:3	12	cc
LEAF_NODE	253:5	253:5	12	--
LEAF_NODE	253:7	253:7	10	;
ITERATION	254:3	255:4	9	
KEYWORD	254:3	254:3	10	while
LEAF_NODE	254:3	254:3	11	while
LEAF_NODE	254:9	254:9	10	(
CONDITION	254:10	254:10	10	n -- > 0
EXPR	254:10	254:16	11	n -- > 0
FIELD	254:10	254:11	12	n --
LEAF_NODE	254:10	254:10	13	n
LEAF_NODE	254:11	254:11	13	--
REL_OPERATOR	254:14	254:14	12	>
LEAF_NODE	254:14	254:14	13	>
FIELD	254:16	254:16	12	0
LEAF_NODE	254:16	254:16	13	0
LEAF_NODE	254:17	254:17	10	)
STATEMENTS	255:4	255:4	10	
EXPR_STATEMENT	255:4	255:21	11	* op ++ = ( uint8 ) b ;
EXPR	255:4	255:4	12	* op ++ = ( uint8 ) b
ASSIGN	255:4	255:12	13	* op ++ = ( uint8 ) b
LVAL	255:4	255:4	14	* op ++
UNARY_EXPR	255:4	255:5	15	* op ++
UNARY_OPERATOR	255:4	255:4	16	*
LEAF_NODE	255:4	255:4	17	*
FIELD	255:5	255:7	16	op ++
LEAF_NODE	255:5	255:5	17	op
LEAF_NODE	255:7	255:7	17	++
ASSIGN_OP	255:10	255:10	14	=
LEAF_NODE	255:10	255:10	15	=
RVAL	255:12	255:20	14	( uint8 ) b
LEAF_NODE	255:12	255:12	15	(
TYPE_NAME	255:13	255:13	15	uint8
LEAF_NODE	255:13	255:13	16	uint8
LEAF_NODE	255:18	255:18	15	)
FIELD	255:20	255:20	15	b
LEAF_NODE	255:20	255:20	16	b
LEAF_NODE	255:21	255:21	12	;
LEAF_NODE	256:2	256:2	8	}
SELECTION	256:4	256:9	6	
KEYWORD	256:4	256:4	7	else
LEAF_NODE	256:4	256:4	8	else
STATEMENTS	256:9	273:2	7	
LEAF_NODE	256:9	256:9	8	{
STATEMENTS	257:3	272:12	8	
SELECTION	257:3	258:3	9	
KEYWORD	257:3	257:3	10	if
LEAF_NODE	257:3	257:3	11	if
LEAF_NODE	257:6	257:6	10	(
CONDITION	257:7	257:7	10	occ < ( tmsize_t ) ( n + 1 )
EXPR	257:7	257:29	11	occ < ( tmsize_t ) ( n + 1 )
FIELD	257:7	257:7	12	occ
LEAF_NODE	257:7	257:7	13	occ
REL_OPERATOR	257:11	257:11	12	<
LEAF_NODE	257:11	257:11	13	<
LEAF_NODE	257:13	257:13	12	(
TYPE_NAME	257:14	257:14	12	tmsize_t
LEAF_NODE	257:14	257:14	13	tmsize_t
LEAF_NODE	257:22	257:22	12	)
LEAF_NODE	257:23	257:23	12	(
FIELD	257:24	257:24	12	n
LEAF_NODE	257:24	257:24	13	n
LEAF_NODE	257:26	257:26	12	+
FIELD	257:28	257:28	12	1
LEAF_NODE	257:28	257:28	13	1
LEAF_NODE	257:29	257:29	12	)
LEAF_NODE	257:30	257:30	10	)
STATEMENTS	258:3	263:3	10	
LEAF_NODE	258:3	258:3	11	{
STATEMENTS	259:4	262:4	11	
EXPR_STATEMENT	259:4	261:48	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Discarding %lu bytes to avoid buffer overrun" , ( unsigned long ) ( ( tmsize_t ) n - occ + 1 ) ) ;
EXPR	259:4	259:4	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Discarding %lu bytes to avoid buffer overrun" , ( unsigned long ) ( ( tmsize_t ) n - occ + 1 ) )
FUNCTION_CALL	259:4	261:47	14	TIFFWarningExt ( tif -> tif_clientdata , module , "Discarding %lu bytes to avoid buffer overrun" , ( unsigned long ) ( ( tmsize_t ) n - occ + 1 ) )
CALLEE	259:4	259:4	15	TIFFWarningExt
LEAF_NODE	259:4	259:4	16	TIFFWarningExt
LEAF_NODE	259:18	259:18	15	(
ARGUMENT	259:19	259:19	15	tif -> tif_clientdata
FIELD	259:19	259:24	16	tif -> tif_clientdata
LEAF_NODE	259:19	259:19	17	tif
LEAF_NODE	259:22	259:22	17	->
LEAF_NODE	259:24	259:24	17	tif_clientdata
LEAF_NODE	259:38	259:38	15	,
ARGUMENT	259:40	259:40	15	module
FIELD	259:40	259:40	16	module
LEAF_NODE	259:40	259:40	17	module
LEAF_NODE	259:46	259:46	15	,
ARGUMENT	260:8	260:8	15	"Discarding %lu bytes to avoid buffer overrun"
FIELD	260:8	260:8	16	"Discarding %lu bytes to avoid buffer overrun"
LEAF_NODE	260:8	260:8	17	"Discarding %lu bytes to avoid buffer overrun"
LEAF_NODE	260:54	260:54	15	,
ARGUMENT	261:8	261:46	15	( unsigned long ) ( ( tmsize_t ) n - occ + 1 )
LEAF_NODE	261:8	261:8	16	(
TYPE_NAME	261:9	261:18	16	unsigned long
LEAF_NODE	261:9	261:9	17	unsigned
LEAF_NODE	261:18	261:18	17	long
LEAF_NODE	261:22	261:22	16	)
LEAF_NODE	261:24	261:24	16	(
LEAF_NODE	261:25	261:25	16	(
TYPE_NAME	261:26	261:26	16	tmsize_t
LEAF_NODE	261:26	261:26	17	tmsize_t
LEAF_NODE	261:34	261:34	16	)
FIELD	261:35	261:35	16	n
LEAF_NODE	261:35	261:35	17	n
LEAF_NODE	261:37	261:37	16	-
FIELD	261:39	261:39	16	occ
LEAF_NODE	261:39	261:39	17	occ
LEAF_NODE	261:43	261:43	16	+
FIELD	261:45	261:45	16	1
LEAF_NODE	261:45	261:45	17	1
LEAF_NODE	261:46	261:46	16	)
LEAF_NODE	261:47	261:47	15	)
LEAF_NODE	261:48	261:48	13	;
EXPR_STATEMENT	262:4	262:21	12	n = ( long ) occ - 1 ;
EXPR	262:4	262:4	13	n = ( long ) occ - 1
ASSIGN	262:4	262:8	14	n = ( long ) occ - 1
LVAL	262:4	262:4	15	n
FIELD	262:4	262:4	16	n
LEAF_NODE	262:4	262:4	17	n
ASSIGN_OP	262:6	262:6	15	=
LEAF_NODE	262:6	262:6	16	=
RVAL	262:8	262:20	15	( long ) occ - 1
LEAF_NODE	262:8	262:8	16	(
TYPE_NAME	262:9	262:9	16	long
LEAF_NODE	262:9	262:9	17	long
LEAF_NODE	262:13	262:13	16	)
FIELD	262:14	262:14	16	occ
LEAF_NODE	262:14	262:14	17	occ
LEAF_NODE	262:18	262:18	16	-
FIELD	262:20	262:20	16	1
LEAF_NODE	262:20	262:20	17	1
LEAF_NODE	262:21	262:21	13	;
LEAF_NODE	263:3	263:3	11	}
SELECTION	264:3	265:3	9	
KEYWORD	264:3	264:3	10	if
LEAF_NODE	264:3	264:3	11	if
LEAF_NODE	264:6	264:6	10	(
CONDITION	264:7	264:7	10	cc < ( tmsize_t ) ( n + 1 )
EXPR	264:7	264:27	11	cc < ( tmsize_t ) ( n + 1 )
FIELD	264:7	264:7	12	cc
LEAF_NODE	264:7	264:7	13	cc
REL_OPERATOR	264:10	264:10	12	<
LEAF_NODE	264:10	264:10	13	<
LEAF_NODE	264:12	264:12	12	(
TYPE_NAME	264:13	264:13	12	tmsize_t
LEAF_NODE	264:13	264:13	13	tmsize_t
LEAF_NODE	264:21	264:21	12	)
LEAF_NODE	264:23	264:23	12	(
FIELD	264:24	264:24	12	n
LEAF_NODE	264:24	264:24	13	n
LEAF_NODE	264:25	264:25	12	+
FIELD	264:26	264:26	12	1
LEAF_NODE	264:26	264:26	13	1
LEAF_NODE	264:27	264:27	12	)
LEAF_NODE	264:28	264:28	10	)
STATEMENTS	265:3	269:3	10	
LEAF_NODE	265:3	265:3	11	{
STATEMENTS	266:4	268:4	11	
EXPR_STATEMENT	266:4	267:62	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Terminating PackBitsDecode due to lack of data." ) ;
EXPR	266:4	266:4	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Terminating PackBitsDecode due to lack of data." )
FUNCTION_CALL	266:4	267:61	14	TIFFWarningExt ( tif -> tif_clientdata , module , "Terminating PackBitsDecode due to lack of data." )
CALLEE	266:4	266:4	15	TIFFWarningExt
LEAF_NODE	266:4	266:4	16	TIFFWarningExt
LEAF_NODE	266:18	266:18	15	(
ARGUMENT	266:19	266:19	15	tif -> tif_clientdata
FIELD	266:19	266:24	16	tif -> tif_clientdata
LEAF_NODE	266:19	266:19	17	tif
LEAF_NODE	266:22	266:22	17	->
LEAF_NODE	266:24	266:24	17	tif_clientdata
LEAF_NODE	266:38	266:38	15	,
ARGUMENT	266:40	266:40	15	module
FIELD	266:40	266:40	16	module
LEAF_NODE	266:40	266:40	17	module
LEAF_NODE	266:46	266:46	15	,
ARGUMENT	267:12	267:12	15	"Terminating PackBitsDecode due to lack of data."
FIELD	267:12	267:12	16	"Terminating PackBitsDecode due to lack of data."
LEAF_NODE	267:12	267:12	17	"Terminating PackBitsDecode due to lack of data."
LEAF_NODE	267:61	267:61	15	)
LEAF_NODE	267:62	267:62	13	;
JUMP_STATEMENT	268:4	268:9	12	break DESTINATION ;
KEYWORD	268:4	268:4	13	break
LEAF_NODE	268:4	268:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	268:9	268:9	13	;
LEAF_NODE	269:3	269:3	11	}
EXPR_STATEMENT	270:3	270:27	9	_TIFFmemcpy ( op , bp , ++ n ) ;
EXPR	270:3	270:3	10	_TIFFmemcpy ( op , bp , ++ n )
FUNCTION_CALL	270:3	270:26	11	_TIFFmemcpy ( op , bp , ++ n )
CALLEE	270:3	270:3	12	_TIFFmemcpy
LEAF_NODE	270:3	270:3	13	_TIFFmemcpy
LEAF_NODE	270:14	270:14	12	(
ARGUMENT	270:15	270:15	12	op
FIELD	270:15	270:15	13	op
LEAF_NODE	270:15	270:15	14	op
LEAF_NODE	270:17	270:17	12	,
ARGUMENT	270:19	270:19	12	bp
FIELD	270:19	270:19	13	bp
LEAF_NODE	270:19	270:19	14	bp
LEAF_NODE	270:21	270:21	12	,
ARGUMENT	270:23	270:25	12	++ n
LEAF_NODE	270:23	270:23	13	++
FIELD	270:25	270:25	13	n
LEAF_NODE	270:25	270:25	14	n
LEAF_NODE	270:26	270:26	12	)
LEAF_NODE	270:27	270:27	10	;
EXPR_STATEMENT	271:3	271:10	9	op += n ;
EXPR	271:3	271:3	10	op += n
ASSIGN	271:3	271:9	11	op += n
LVAL	271:3	271:3	12	op
FIELD	271:3	271:3	13	op
LEAF_NODE	271:3	271:3	14	op
ASSIGN_OP	271:6	271:6	12	+=
LEAF_NODE	271:6	271:6	13	+=
RVAL	271:9	271:9	12	n
FIELD	271:9	271:9	13	n
LEAF_NODE	271:9	271:9	14	n
LEAF_NODE	271:10	271:10	10	;
EXPR_STATEMENT	271:12	271:20	9	occ -= n ;
EXPR	271:12	271:12	10	occ -= n
ASSIGN	271:12	271:19	11	occ -= n
LVAL	271:12	271:12	12	occ
FIELD	271:12	271:12	13	occ
LEAF_NODE	271:12	271:12	14	occ
ASSIGN_OP	271:16	271:16	12	-=
LEAF_NODE	271:16	271:16	13	-=
RVAL	271:19	271:19	12	n
FIELD	271:19	271:19	13	n
LEAF_NODE	271:19	271:19	14	n
LEAF_NODE	271:20	271:20	10	;
EXPR_STATEMENT	272:3	272:10	9	bp += n ;
EXPR	272:3	272:3	10	bp += n
ASSIGN	272:3	272:9	11	bp += n
LVAL	272:3	272:3	12	bp
FIELD	272:3	272:3	13	bp
LEAF_NODE	272:3	272:3	14	bp
ASSIGN_OP	272:6	272:6	12	+=
LEAF_NODE	272:6	272:6	13	+=
RVAL	272:9	272:9	12	n
FIELD	272:9	272:9	13	n
LEAF_NODE	272:9	272:9	14	n
LEAF_NODE	272:10	272:10	10	;
EXPR_STATEMENT	272:12	272:19	9	cc -= n ;
EXPR	272:12	272:12	10	cc -= n
ASSIGN	272:12	272:18	11	cc -= n
LVAL	272:12	272:12	12	cc
FIELD	272:12	272:12	13	cc
LEAF_NODE	272:12	272:12	14	cc
ASSIGN_OP	272:15	272:15	12	-=
LEAF_NODE	272:15	272:15	13	-=
RVAL	272:18	272:18	12	n
FIELD	272:18	272:18	13	n
LEAF_NODE	272:18	272:18	14	n
LEAF_NODE	272:19	272:19	10	;
LEAF_NODE	273:2	273:2	8	}
LEAF_NODE	274:1	274:1	5	}
EXPR_STATEMENT	275:1	275:29	3	tif -> tif_rawcp = ( uint8 * ) bp ;
EXPR	275:1	275:1	4	tif -> tif_rawcp = ( uint8 * ) bp
ASSIGN	275:1	275:18	5	tif -> tif_rawcp = ( uint8 * ) bp
LVAL	275:1	275:1	6	tif -> tif_rawcp
FIELD	275:1	275:6	7	tif -> tif_rawcp
LEAF_NODE	275:1	275:1	8	tif
LEAF_NODE	275:4	275:4	8	->
LEAF_NODE	275:6	275:6	8	tif_rawcp
ASSIGN_OP	275:16	275:16	6	=
LEAF_NODE	275:16	275:16	7	=
RVAL	275:18	275:27	6	( uint8 * ) bp
LEAF_NODE	275:18	275:18	7	(
TYPE_NAME	275:19	275:19	7	uint8
LEAF_NODE	275:19	275:19	8	uint8
LEAF_NODE	275:24	275:24	7	*
LEAF_NODE	275:25	275:25	7	)
FIELD	275:27	275:27	7	bp
LEAF_NODE	275:27	275:27	8	bp
LEAF_NODE	275:29	275:29	4	;
EXPR_STATEMENT	276:1	276:20	3	tif -> tif_rawcc = cc ;
EXPR	276:1	276:1	4	tif -> tif_rawcc = cc
ASSIGN	276:1	276:18	5	tif -> tif_rawcc = cc
LVAL	276:1	276:1	6	tif -> tif_rawcc
FIELD	276:1	276:6	7	tif -> tif_rawcc
LEAF_NODE	276:1	276:1	8	tif
LEAF_NODE	276:4	276:4	8	->
LEAF_NODE	276:6	276:6	8	tif_rawcc
ASSIGN_OP	276:16	276:16	6	=
LEAF_NODE	276:16	276:16	7	=
RVAL	276:18	276:18	6	cc
FIELD	276:18	276:18	7	cc
LEAF_NODE	276:18	276:18	8	cc
LEAF_NODE	276:20	276:20	4	;
SELECTION	277:1	277:14	3	
KEYWORD	277:1	277:1	4	if
LEAF_NODE	277:1	277:1	5	if
LEAF_NODE	277:4	277:4	4	(
CONDITION	277:5	277:5	4	occ > 0
EXPR	277:5	277:11	5	occ > 0
FIELD	277:5	277:5	6	occ
LEAF_NODE	277:5	277:5	7	occ
REL_OPERATOR	277:9	277:9	6	>
LEAF_NODE	277:9	277:9	7	>
FIELD	277:11	277:11	6	0
LEAF_NODE	277:11	277:11	7	0
LEAF_NODE	277:12	277:12	4	)
STATEMENTS	277:14	282:1	4	
LEAF_NODE	277:14	277:14	5	{
STATEMENTS	278:2	281:2	5	
EXPR_STATEMENT	278:2	280:35	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data for scanline %lu" , ( unsigned long ) tif -> tif_row ) ;
EXPR	278:2	278:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data for scanline %lu" , ( unsigned long ) tif -> tif_row )
FUNCTION_CALL	278:2	280:34	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data for scanline %lu" , ( unsigned long ) tif -> tif_row )
CALLEE	278:2	278:2	9	TIFFErrorExt
LEAF_NODE	278:2	278:2	10	TIFFErrorExt
LEAF_NODE	278:14	278:14	9	(
ARGUMENT	278:15	278:15	9	tif -> tif_clientdata
FIELD	278:15	278:20	10	tif -> tif_clientdata
LEAF_NODE	278:15	278:15	11	tif
LEAF_NODE	278:18	278:18	11	->
LEAF_NODE	278:20	278:20	11	tif_clientdata
LEAF_NODE	278:34	278:34	9	,
ARGUMENT	278:36	278:36	9	module
FIELD	278:36	278:36	10	module
LEAF_NODE	278:36	278:36	11	module
LEAF_NODE	278:42	278:42	9	,
ARGUMENT	279:6	279:6	9	"Not enough data for scanline %lu"
FIELD	279:6	279:6	10	"Not enough data for scanline %lu"
LEAF_NODE	279:6	279:6	11	"Not enough data for scanline %lu"
LEAF_NODE	279:40	279:40	9	,
ARGUMENT	280:6	280:22	9	( unsigned long ) tif -> tif_row
LEAF_NODE	280:6	280:6	10	(
TYPE_NAME	280:7	280:16	10	unsigned long
LEAF_NODE	280:7	280:7	11	unsigned
LEAF_NODE	280:16	280:16	11	long
LEAF_NODE	280:20	280:20	10	)
FIELD	280:22	280:27	10	tif -> tif_row
LEAF_NODE	280:22	280:22	11	tif
LEAF_NODE	280:25	280:25	11	->
LEAF_NODE	280:27	280:27	11	tif_row
LEAF_NODE	280:34	280:34	9	)
LEAF_NODE	280:35	280:35	7	;
JUMP_STATEMENT	281:2	281:12	6	return ( 0 ) ;
KEYWORD	281:2	281:2	7	return
LEAF_NODE	281:2	281:2	8	return
DESTINATION	281:9	281:9	7	( 0 )
EXPR	281:9	281:11	8	( 0 )
LEAF_NODE	281:9	281:9	9	(
FIELD	281:10	281:10	9	0
LEAF_NODE	281:10	281:10	10	0
LEAF_NODE	281:11	281:11	9	)
LEAF_NODE	281:12	281:12	7	;
LEAF_NODE	282:1	282:1	5	}
JUMP_STATEMENT	283:1	283:11	3	return ( 1 ) ;
KEYWORD	283:1	283:1	4	return
LEAF_NODE	283:1	283:1	5	return
DESTINATION	283:8	283:8	4	( 1 )
EXPR	283:8	283:10	5	( 1 )
LEAF_NODE	283:8	283:8	6	(
FIELD	283:9	283:9	6	1
LEAF_NODE	283:9	283:9	7	1
LEAF_NODE	283:10	283:10	6	)
LEAF_NODE	283:11	283:11	4	;
LEAF_NODE	284:0	284:0	2	}
FUNCTION_DEF	286:0	299:0	1	
RETURN_TYPE	286:0	286:0	2	int
TYPE_NAME	286:0	286:0	3	int
LEAF_NODE	286:0	286:0	4	int
FUNCTION_NAME	287:0	287:0	2	TIFFInitPackBits
LEAF_NODE	287:0	287:0	3	TIFFInitPackBits
PARAMETER_LIST	287:16	287:38	2	( TIFF * tif , int scheme )
LEAF_NODE	287:16	287:16	3	(
PARAMETER_DECL	287:17	287:23	3	TIFF * tif
TYPE	287:17	287:21	4	TIFF *
TYPE_NAME	287:17	287:17	5	TIFF
LEAF_NODE	287:17	287:17	6	TIFF
POINTER	287:21	287:21	5	*
LEAF_NODE	287:21	287:21	6	*
NAME	287:23	287:23	4	tif
LEAF_NODE	287:23	287:23	5	tif
LEAF_NODE	287:26	287:26	3	,
PARAMETER_DECL	287:28	287:32	3	int scheme
TYPE	287:28	287:28	4	int
TYPE_NAME	287:28	287:28	5	int
LEAF_NODE	287:28	287:28	6	int
NAME	287:32	287:32	4	scheme
LEAF_NODE	287:32	287:32	5	scheme
LEAF_NODE	287:38	287:38	3	)
LEAF_NODE	288:0	288:0	2	{
STATEMENTS	289:1	298:1	2	
EXPR_STATEMENT	289:1	289:14	3	( void ) scheme ;
EXPR	289:1	289:8	4	( void ) scheme
LEAF_NODE	289:1	289:1	5	(
TYPE_NAME	289:2	289:2	5	void
LEAF_NODE	289:2	289:2	6	void
LEAF_NODE	289:6	289:6	5	)
FIELD	289:8	289:8	5	scheme
LEAF_NODE	289:8	289:8	6	scheme
LEAF_NODE	289:14	289:14	4	;
EXPR_STATEMENT	290:1	290:36	3	tif -> tif_decoderow = PackBitsDecode ;
EXPR	290:1	290:1	4	tif -> tif_decoderow = PackBitsDecode
ASSIGN	290:1	290:22	5	tif -> tif_decoderow = PackBitsDecode
LVAL	290:1	290:1	6	tif -> tif_decoderow
FIELD	290:1	290:6	7	tif -> tif_decoderow
LEAF_NODE	290:1	290:1	8	tif
LEAF_NODE	290:4	290:4	8	->
LEAF_NODE	290:6	290:6	8	tif_decoderow
ASSIGN_OP	290:20	290:20	6	=
LEAF_NODE	290:20	290:20	7	=
RVAL	290:22	290:22	6	PackBitsDecode
FIELD	290:22	290:22	7	PackBitsDecode
LEAF_NODE	290:22	290:22	8	PackBitsDecode
LEAF_NODE	290:36	290:36	4	;
EXPR_STATEMENT	291:1	291:38	3	tif -> tif_decodestrip = PackBitsDecode ;
EXPR	291:1	291:1	4	tif -> tif_decodestrip = PackBitsDecode
ASSIGN	291:1	291:24	5	tif -> tif_decodestrip = PackBitsDecode
LVAL	291:1	291:1	6	tif -> tif_decodestrip
FIELD	291:1	291:6	7	tif -> tif_decodestrip
LEAF_NODE	291:1	291:1	8	tif
LEAF_NODE	291:4	291:4	8	->
LEAF_NODE	291:6	291:6	8	tif_decodestrip
ASSIGN_OP	291:22	291:22	6	=
LEAF_NODE	291:22	291:22	7	=
RVAL	291:24	291:24	6	PackBitsDecode
FIELD	291:24	291:24	7	PackBitsDecode
LEAF_NODE	291:24	291:24	8	PackBitsDecode
LEAF_NODE	291:38	291:38	4	;
EXPR_STATEMENT	292:1	292:37	3	tif -> tif_decodetile = PackBitsDecode ;
EXPR	292:1	292:1	4	tif -> tif_decodetile = PackBitsDecode
ASSIGN	292:1	292:23	5	tif -> tif_decodetile = PackBitsDecode
LVAL	292:1	292:1	6	tif -> tif_decodetile
FIELD	292:1	292:6	7	tif -> tif_decodetile
LEAF_NODE	292:1	292:1	8	tif
LEAF_NODE	292:4	292:4	8	->
LEAF_NODE	292:6	292:6	8	tif_decodetile
ASSIGN_OP	292:21	292:21	6	=
LEAF_NODE	292:21	292:21	7	=
RVAL	292:23	292:23	6	PackBitsDecode
FIELD	292:23	292:23	7	PackBitsDecode
LEAF_NODE	292:23	292:23	8	PackBitsDecode
LEAF_NODE	292:37	292:37	4	;
EXPR_STATEMENT	293:1	293:39	3	tif -> tif_preencode = PackBitsPreEncode ;
EXPR	293:1	293:1	4	tif -> tif_preencode = PackBitsPreEncode
ASSIGN	293:1	293:22	5	tif -> tif_preencode = PackBitsPreEncode
LVAL	293:1	293:1	6	tif -> tif_preencode
FIELD	293:1	293:6	7	tif -> tif_preencode
LEAF_NODE	293:1	293:1	8	tif
LEAF_NODE	293:4	293:4	8	->
LEAF_NODE	293:6	293:6	8	tif_preencode
ASSIGN_OP	293:20	293:20	6	=
LEAF_NODE	293:20	293:20	7	=
RVAL	293:22	293:22	6	PackBitsPreEncode
FIELD	293:22	293:22	7	PackBitsPreEncode
LEAF_NODE	293:22	293:22	8	PackBitsPreEncode
LEAF_NODE	293:39	293:39	4	;
EXPR_STATEMENT	294:1	294:41	3	tif -> tif_postencode = PackBitsPostEncode ;
EXPR	294:1	294:1	4	tif -> tif_postencode = PackBitsPostEncode
ASSIGN	294:1	294:23	5	tif -> tif_postencode = PackBitsPostEncode
LVAL	294:1	294:1	6	tif -> tif_postencode
FIELD	294:1	294:6	7	tif -> tif_postencode
LEAF_NODE	294:1	294:1	8	tif
LEAF_NODE	294:4	294:4	8	->
LEAF_NODE	294:6	294:6	8	tif_postencode
ASSIGN_OP	294:21	294:21	6	=
LEAF_NODE	294:21	294:21	7	=
RVAL	294:23	294:23	6	PackBitsPostEncode
FIELD	294:23	294:23	7	PackBitsPostEncode
LEAF_NODE	294:23	294:23	8	PackBitsPostEncode
LEAF_NODE	294:41	294:41	4	;
EXPR_STATEMENT	295:1	295:36	3	tif -> tif_encoderow = PackBitsEncode ;
EXPR	295:1	295:1	4	tif -> tif_encoderow = PackBitsEncode
ASSIGN	295:1	295:22	5	tif -> tif_encoderow = PackBitsEncode
LVAL	295:1	295:1	6	tif -> tif_encoderow
FIELD	295:1	295:6	7	tif -> tif_encoderow
LEAF_NODE	295:1	295:1	8	tif
LEAF_NODE	295:4	295:4	8	->
LEAF_NODE	295:6	295:6	8	tif_encoderow
ASSIGN_OP	295:20	295:20	6	=
LEAF_NODE	295:20	295:20	7	=
RVAL	295:22	295:22	6	PackBitsEncode
FIELD	295:22	295:22	7	PackBitsEncode
LEAF_NODE	295:22	295:22	8	PackBitsEncode
LEAF_NODE	295:36	295:36	4	;
EXPR_STATEMENT	296:1	296:43	3	tif -> tif_encodestrip = PackBitsEncodeChunk ;
EXPR	296:1	296:1	4	tif -> tif_encodestrip = PackBitsEncodeChunk
ASSIGN	296:1	296:24	5	tif -> tif_encodestrip = PackBitsEncodeChunk
LVAL	296:1	296:1	6	tif -> tif_encodestrip
FIELD	296:1	296:6	7	tif -> tif_encodestrip
LEAF_NODE	296:1	296:1	8	tif
LEAF_NODE	296:4	296:4	8	->
LEAF_NODE	296:6	296:6	8	tif_encodestrip
ASSIGN_OP	296:22	296:22	6	=
LEAF_NODE	296:22	296:22	7	=
RVAL	296:24	296:24	6	PackBitsEncodeChunk
FIELD	296:24	296:24	7	PackBitsEncodeChunk
LEAF_NODE	296:24	296:24	8	PackBitsEncodeChunk
LEAF_NODE	296:43	296:43	4	;
EXPR_STATEMENT	297:1	297:42	3	tif -> tif_encodetile = PackBitsEncodeChunk ;
EXPR	297:1	297:1	4	tif -> tif_encodetile = PackBitsEncodeChunk
ASSIGN	297:1	297:23	5	tif -> tif_encodetile = PackBitsEncodeChunk
LVAL	297:1	297:1	6	tif -> tif_encodetile
FIELD	297:1	297:6	7	tif -> tif_encodetile
LEAF_NODE	297:1	297:1	8	tif
LEAF_NODE	297:4	297:4	8	->
LEAF_NODE	297:6	297:6	8	tif_encodetile
ASSIGN_OP	297:21	297:21	6	=
LEAF_NODE	297:21	297:21	7	=
RVAL	297:23	297:23	6	PackBitsEncodeChunk
FIELD	297:23	297:23	7	PackBitsEncodeChunk
LEAF_NODE	297:23	297:23	8	PackBitsEncodeChunk
LEAF_NODE	297:42	297:42	4	;
JUMP_STATEMENT	298:1	298:11	3	return ( 1 ) ;
KEYWORD	298:1	298:1	4	return
LEAF_NODE	298:1	298:1	5	return
DESTINATION	298:8	298:8	4	( 1 )
EXPR	298:8	298:10	5	( 1 )
LEAF_NODE	298:8	298:8	6	(
FIELD	298:9	298:9	6	1
LEAF_NODE	298:9	298:9	7	1
LEAF_NODE	298:10	298:10	6	)
LEAF_NODE	298:11	298:11	4	;
LEAF_NODE	299:0	299:0	2	}
