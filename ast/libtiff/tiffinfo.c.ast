SOURCE_FILE	45:7	458:0	0	
SIMPLE_DECL	45:7	45:45	1	TIFFErrorHandler old_error_handler ; old_error_handler = 0 ;
VAR_DECL	45:7	45:24	2	TIFFErrorHandler old_error_handler ; old_error_handler = 0
TYPE	45:7	45:7	3	TIFFErrorHandler
TYPE_NAME	45:7	45:7	4	TIFFErrorHandler
LEAF_NODE	45:7	45:7	5	TIFFErrorHandler
NAME	45:24	45:24	3	old_error_handler
LEAF_NODE	45:24	45:24	4	old_error_handler
LEAF_NODE	0:0	0:0	3	;
INIT	45:24	45:24	3	old_error_handler = 0
ASSIGN	45:24	45:44	4	old_error_handler = 0
LVAL	45:24	45:24	5	old_error_handler
NAME	45:24	45:24	6	old_error_handler
LEAF_NODE	45:24	45:24	7	old_error_handler
ASSIGN_OP	45:42	45:42	5	=
LEAF_NODE	45:42	45:42	6	=
RVAL	45:44	45:44	5	0
FIELD	45:44	45:44	6	0
LEAF_NODE	45:44	45:44	7	0
LEAF_NODE	45:45	45:45	2	;
SIMPLE_DECL	46:7	46:21	1	int status ; status = 0 ;
VAR_DECL	46:7	46:11	2	int status ; status = 0
TYPE	46:7	46:7	3	int
TYPE_NAME	46:7	46:7	4	int
LEAF_NODE	46:7	46:7	5	int
NAME	46:11	46:11	3	status
LEAF_NODE	46:11	46:11	4	status
LEAF_NODE	0:0	0:0	3	;
INIT	46:11	46:11	3	status = 0
ASSIGN	46:11	46:20	4	status = 0
LVAL	46:11	46:11	5	status
NAME	46:11	46:11	6	status
LEAF_NODE	46:11	46:11	7	status
ASSIGN_OP	46:18	46:18	5	=
LEAF_NODE	46:18	46:18	6	=
RVAL	46:20	46:20	5	0
FIELD	46:20	46:20	6	0
LEAF_NODE	46:20	46:20	7	0
LEAF_NODE	46:21	46:21	2	;
SIMPLE_DECL	47:7	47:23	1	int showdata ; showdata = 0 ;
VAR_DECL	47:7	47:11	2	int showdata ; showdata = 0
TYPE	47:7	47:7	3	int
TYPE_NAME	47:7	47:7	4	int
LEAF_NODE	47:7	47:7	5	int
NAME	47:11	47:11	3	showdata
LEAF_NODE	47:11	47:11	4	showdata
LEAF_NODE	0:0	0:0	3	;
INIT	47:11	47:11	3	showdata = 0
ASSIGN	47:11	47:22	4	showdata = 0
LVAL	47:11	47:11	5	showdata
NAME	47:11	47:11	6	showdata
LEAF_NODE	47:11	47:11	7	showdata
ASSIGN_OP	47:20	47:20	5	=
LEAF_NODE	47:20	47:20	6	=
RVAL	47:22	47:22	5	0
FIELD	47:22	47:22	6	0
LEAF_NODE	47:22	47:22	7	0
LEAF_NODE	47:23	47:23	2	;
SIMPLE_DECL	48:7	48:22	1	int rawdata ; rawdata = 0 ;
VAR_DECL	48:7	48:11	2	int rawdata ; rawdata = 0
TYPE	48:7	48:7	3	int
TYPE_NAME	48:7	48:7	4	int
LEAF_NODE	48:7	48:7	5	int
NAME	48:11	48:11	3	rawdata
LEAF_NODE	48:11	48:11	4	rawdata
LEAF_NODE	0:0	0:0	3	;
INIT	48:11	48:11	3	rawdata = 0
ASSIGN	48:11	48:21	4	rawdata = 0
LVAL	48:11	48:11	5	rawdata
NAME	48:11	48:11	6	rawdata
LEAF_NODE	48:11	48:11	7	rawdata
ASSIGN_OP	48:19	48:19	5	=
LEAF_NODE	48:19	48:19	6	=
RVAL	48:21	48:21	5	0
FIELD	48:21	48:21	6	0
LEAF_NODE	48:21	48:21	7	0
LEAF_NODE	48:22	48:22	2	;
SIMPLE_DECL	49:7	49:24	1	int showwords ; showwords = 0 ;
VAR_DECL	49:7	49:11	2	int showwords ; showwords = 0
TYPE	49:7	49:7	3	int
TYPE_NAME	49:7	49:7	4	int
LEAF_NODE	49:7	49:7	5	int
NAME	49:11	49:11	3	showwords
LEAF_NODE	49:11	49:11	4	showwords
LEAF_NODE	0:0	0:0	3	;
INIT	49:11	49:11	3	showwords = 0
ASSIGN	49:11	49:23	4	showwords = 0
LVAL	49:11	49:11	5	showwords
NAME	49:11	49:11	6	showwords
LEAF_NODE	49:11	49:11	7	showwords
ASSIGN_OP	49:21	49:21	5	=
LEAF_NODE	49:21	49:21	6	=
RVAL	49:23	49:23	5	0
FIELD	49:23	49:23	6	0
LEAF_NODE	49:23	49:23	7	0
LEAF_NODE	49:24	49:24	2	;
SIMPLE_DECL	50:7	50:23	1	int readdata ; readdata = 0 ;
VAR_DECL	50:7	50:11	2	int readdata ; readdata = 0
TYPE	50:7	50:7	3	int
TYPE_NAME	50:7	50:7	4	int
LEAF_NODE	50:7	50:7	5	int
NAME	50:11	50:11	3	readdata
LEAF_NODE	50:11	50:11	4	readdata
LEAF_NODE	0:0	0:0	3	;
INIT	50:11	50:11	3	readdata = 0
ASSIGN	50:11	50:22	4	readdata = 0
LVAL	50:11	50:11	5	readdata
NAME	50:11	50:11	6	readdata
LEAF_NODE	50:11	50:11	7	readdata
ASSIGN_OP	50:20	50:20	5	=
LEAF_NODE	50:20	50:20	6	=
RVAL	50:22	50:22	5	0
FIELD	50:22	50:22	6	0
LEAF_NODE	50:22	50:22	7	0
LEAF_NODE	50:23	50:23	2	;
SIMPLE_DECL	51:7	51:24	1	int stoponerr ; stoponerr = 1 ;
VAR_DECL	51:7	51:11	2	int stoponerr ; stoponerr = 1
TYPE	51:7	51:7	3	int
TYPE_NAME	51:7	51:7	4	int
LEAF_NODE	51:7	51:7	5	int
NAME	51:11	51:11	3	stoponerr
LEAF_NODE	51:11	51:11	4	stoponerr
LEAF_NODE	0:0	0:0	3	;
INIT	51:11	51:11	3	stoponerr = 1
ASSIGN	51:11	51:23	4	stoponerr = 1
LVAL	51:11	51:11	5	stoponerr
NAME	51:11	51:11	6	stoponerr
LEAF_NODE	51:11	51:11	7	stoponerr
ASSIGN_OP	51:21	51:21	5	=
LEAF_NODE	51:21	51:21	6	=
RVAL	51:23	51:23	5	1
FIELD	51:23	51:23	6	1
LEAF_NODE	51:23	51:23	7	1
LEAF_NODE	51:24	51:24	2	;
SIMPLE_DECL	53:7	53:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	53:7	53:12	2	void usage ; usage usage ( void )
TYPE	53:7	53:7	3	void
TYPE_NAME	53:7	53:7	4	void
LEAF_NODE	53:7	53:7	5	void
NAME	53:12	53:12	3	usage
LEAF_NODE	53:12	53:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	53:12	53:12	3	usage usage ( void )
ASSIGN	53:12	53:17	4	usage usage ( void )
LVAL	53:12	53:12	5	usage
NAME	53:12	53:12	6	usage
LEAF_NODE	53:12	53:12	7	usage
ASSIGN_OP	53:12	53:12	5	usage
NAME	53:12	53:12	6	usage
LEAF_NODE	53:12	53:12	7	usage
RVAL	53:17	53:22	5	( void )
LEAF_NODE	53:17	53:17	6	(
EXPR	53:18	53:18	6	void
FIELD	53:18	53:18	7	void
LEAF_NODE	53:18	53:18	8	void
LEAF_NODE	53:22	53:22	6	)
LEAF_NODE	53:23	53:23	2	;
FUNCTION_DEF	56:0	62:0	1	
RETURN_TYPE	56:0	56:7	2	static void
LEAF_NODE	56:0	56:0	3	static
TYPE_NAME	56:7	56:7	3	void
LEAF_NODE	56:7	56:7	4	void
FUNCTION_NAME	57:0	57:0	2	PrivateErrorHandler
LEAF_NODE	57:0	57:0	3	PrivateErrorHandler
PARAMETER_LIST	57:19	57:67	2	( const char * module , const char * fmt , va_list ap )
LEAF_NODE	57:19	57:19	3	(
PARAMETER_DECL	57:20	57:32	3	const char * module
TYPE	57:20	57:30	4	const char *
TYPE_NAME	57:20	57:26	5	const char
LEAF_NODE	57:20	57:20	6	const
LEAF_NODE	57:26	57:26	6	char
POINTER	57:30	57:30	5	*
LEAF_NODE	57:30	57:30	6	*
NAME	57:32	57:32	4	module
LEAF_NODE	57:32	57:32	5	module
LEAF_NODE	57:38	57:38	3	,
PARAMETER_DECL	57:40	57:52	3	const char * fmt
TYPE	57:40	57:50	4	const char *
TYPE_NAME	57:40	57:46	5	const char
LEAF_NODE	57:40	57:40	6	const
LEAF_NODE	57:46	57:46	6	char
POINTER	57:50	57:50	5	*
LEAF_NODE	57:50	57:50	6	*
NAME	57:52	57:52	4	fmt
LEAF_NODE	57:52	57:52	5	fmt
LEAF_NODE	57:55	57:55	3	,
PARAMETER_DECL	57:57	57:65	3	va_list ap
TYPE	57:57	57:57	4	va_list
TYPE_NAME	57:57	57:57	5	va_list
LEAF_NODE	57:57	57:57	6	va_list
NAME	57:65	57:65	4	ap
LEAF_NODE	57:65	57:65	5	ap
LEAF_NODE	57:67	57:67	3	)
LEAF_NODE	58:0	58:0	2	{
STATEMENTS	59:8	61:1	2	
SELECTION	59:8	60:16	3	
KEYWORD	59:8	59:8	4	if
LEAF_NODE	59:8	59:8	5	if
LEAF_NODE	59:11	59:11	4	(
CONDITION	59:12	59:12	4	old_error_handler
EXPR	59:12	59:12	5	old_error_handler
FIELD	59:12	59:12	6	old_error_handler
LEAF_NODE	59:12	59:12	7	old_error_handler
LEAF_NODE	59:29	59:29	4	)
STATEMENTS	60:16	60:16	4	
EXPR_STATEMENT	60:16	60:51	5	( * old_error_handler ) ( module , fmt , ap ) ;
EXPR	60:16	60:16	6	( * old_error_handler ) ( module , fmt , ap )
FUNCTION_CALL	60:16	60:50	7	( * old_error_handler ) ( module , fmt , ap )
CALLEE	60:16	60:35	8	( * old_error_handler )
LEAF_NODE	60:16	60:16	9	(
UNARY_EXPR	60:17	60:18	9	* old_error_handler
UNARY_OPERATOR	60:17	60:17	10	*
LEAF_NODE	60:17	60:17	11	*
FIELD	60:18	60:18	10	old_error_handler
LEAF_NODE	60:18	60:18	11	old_error_handler
LEAF_NODE	60:35	60:35	9	)
LEAF_NODE	60:36	60:36	8	(
ARGUMENT	60:37	60:37	8	module
FIELD	60:37	60:37	9	module
LEAF_NODE	60:37	60:37	10	module
LEAF_NODE	60:43	60:43	8	,
ARGUMENT	60:44	60:44	8	fmt
FIELD	60:44	60:44	9	fmt
LEAF_NODE	60:44	60:44	10	fmt
LEAF_NODE	60:47	60:47	8	,
ARGUMENT	60:48	60:48	8	ap
FIELD	60:48	60:48	9	ap
LEAF_NODE	60:48	60:48	10	ap
LEAF_NODE	60:50	60:50	8	)
LEAF_NODE	60:51	60:51	6	;
EXPR_STATEMENT	61:1	61:11	3	status = 1 ;
EXPR	61:1	61:1	4	status = 1
ASSIGN	61:1	61:10	5	status = 1
LVAL	61:1	61:1	6	status
FIELD	61:1	61:1	7	status
LEAF_NODE	61:1	61:1	8	status
ASSIGN_OP	61:8	61:8	6	=
LEAF_NODE	61:8	61:8	7	=
RVAL	61:10	61:10	6	1
FIELD	61:10	61:10	7	1
LEAF_NODE	61:10	61:10	8	1
LEAF_NODE	61:11	61:11	4	;
LEAF_NODE	62:0	62:0	2	}
FUNCTION_DEF	64:0	163:0	1	
RETURN_TYPE	64:0	64:0	2	int
TYPE_NAME	64:0	64:0	3	int
LEAF_NODE	64:0	64:0	4	int
FUNCTION_NAME	65:0	65:0	2	main
LEAF_NODE	65:0	65:0	3	main
PARAMETER_LIST	65:4	65:27	2	( int argc , char * [ ] argv )
LEAF_NODE	65:4	65:4	3	(
PARAMETER_DECL	65:5	65:9	3	int argc
TYPE	65:5	65:5	4	int
TYPE_NAME	65:5	65:5	5	int
LEAF_NODE	65:5	65:5	6	int
NAME	65:9	65:9	4	argc
LEAF_NODE	65:9	65:9	5	argc
LEAF_NODE	65:13	65:13	3	,
PARAMETER_DECL	65:15	65:21	3	char * [ ] argv
TYPE	65:15	65:25	4	char * [ ]
TYPE_NAME	65:15	65:15	5	char
LEAF_NODE	65:15	65:15	6	char
POINTER	65:19	65:19	5	*
LEAF_NODE	65:19	65:19	6	*
TYPE_SUFFIX	65:25	65:26	5	[ ]
LEAF_NODE	65:25	65:25	6	[
LEAF_NODE	65:26	65:26	6	]
NAME	65:21	65:21	4	argv
LEAF_NODE	65:21	65:21	5	argv
LEAF_NODE	65:27	65:27	3	)
LEAF_NODE	66:0	66:0	2	{
STATEMENTS	67:1	162:16	2	
SIMPLE_DECL	67:1	67:34	3	int dirnum ; dirnum = - 1 , int multiplefiles , int c ;
INIT_DECL_LIST	67:1	67:1	4	int dirnum ; dirnum = - 1 , int multiplefiles , int c
VAR_DECL	67:1	67:5	5	int dirnum ; dirnum = - 1
TYPE	67:1	67:1	6	int
TYPE_NAME	67:1	67:1	7	int
LEAF_NODE	67:1	67:1	8	int
NAME	67:5	67:5	6	dirnum
LEAF_NODE	67:5	67:5	7	dirnum
LEAF_NODE	0:0	0:0	6	;
INIT	67:5	67:5	6	dirnum = - 1
ASSIGN	67:5	67:14	7	dirnum = - 1
LVAL	67:5	67:5	8	dirnum
NAME	67:5	67:5	9	dirnum
LEAF_NODE	67:5	67:5	10	dirnum
ASSIGN_OP	67:12	67:12	8	=
LEAF_NODE	67:12	67:12	9	=
RVAL	67:14	67:14	8	- 1
UNARY_EXPR	67:14	67:15	9	- 1
UNARY_OPERATOR	67:14	67:14	10	-
LEAF_NODE	67:14	67:14	11	-
FIELD	67:15	67:15	10	1
LEAF_NODE	67:15	67:15	11	1
LEAF_NODE	67:16	67:16	5	,
INIT_DECL_LIST	67:1	67:1	5	int multiplefiles , int c
VAR_DECL	67:1	67:18	6	int multiplefiles
TYPE	67:1	67:1	7	int
TYPE_NAME	67:1	67:1	8	int
LEAF_NODE	67:1	67:1	9	int
NAME	67:18	67:18	7	multiplefiles
LEAF_NODE	67:18	67:18	8	multiplefiles
LEAF_NODE	67:31	67:31	6	,
VAR_DECL	67:1	67:33	6	int c
TYPE	67:1	67:1	7	int
TYPE_NAME	67:1	67:1	8	int
LEAF_NODE	67:1	67:1	9	int
NAME	67:33	67:33	7	c
LEAF_NODE	67:33	67:33	8	c
LEAF_NODE	67:34	67:34	4	;
SIMPLE_DECL	68:1	68:17	3	uint16 order ; order = 0 ;
VAR_DECL	68:1	68:8	4	uint16 order ; order = 0
TYPE	68:1	68:1	5	uint16
TYPE_NAME	68:1	68:1	6	uint16
LEAF_NODE	68:1	68:1	7	uint16
NAME	68:8	68:8	5	order
LEAF_NODE	68:8	68:8	6	order
LEAF_NODE	0:0	0:0	5	;
INIT	68:8	68:8	5	order = 0
ASSIGN	68:8	68:16	6	order = 0
LVAL	68:8	68:8	7	order
NAME	68:8	68:8	8	order
LEAF_NODE	68:8	68:8	9	order
ASSIGN_OP	68:14	68:14	7	=
LEAF_NODE	68:14	68:14	8	=
RVAL	68:16	68:16	7	0
FIELD	68:16	68:16	8	0
LEAF_NODE	68:16	68:16	9	0
LEAF_NODE	68:17	68:17	4	;
SIMPLE_DECL	69:1	69:10	3	TIFF * tif ;
VAR_DECL	69:1	69:7	4	TIFF * tif
TYPE	69:1	69:5	5	TIFF *
TYPE_NAME	69:1	69:1	6	TIFF
LEAF_NODE	69:1	69:1	7	TIFF
POINTER	69:5	69:5	6	*
LEAF_NODE	69:5	69:5	7	*
NAME	69:7	69:7	5	tif
LEAF_NODE	69:7	69:7	6	tif
LEAF_NODE	69:10	69:10	4	;
LEAF_NODE	71:1	71:1	3	extern
SIMPLE_DECL	71:8	71:18	3	int optind ;
VAR_DECL	71:8	71:12	4	int optind
TYPE	71:8	71:8	5	int
TYPE_NAME	71:8	71:8	6	int
LEAF_NODE	71:8	71:8	7	int
NAME	71:12	71:12	5	optind
LEAF_NODE	71:12	71:12	6	optind
LEAF_NODE	71:18	71:18	4	;
LEAF_NODE	72:1	72:1	3	extern
SIMPLE_DECL	72:8	72:20	3	char * optarg ;
VAR_DECL	72:8	72:14	4	char * optarg
TYPE	72:8	72:12	5	char *
TYPE_NAME	72:8	72:8	6	char
LEAF_NODE	72:8	72:8	7	char
POINTER	72:12	72:12	6	*
LEAF_NODE	72:12	72:12	7	*
NAME	72:14	72:14	5	optarg
LEAF_NODE	72:14	72:14	6	optarg
LEAF_NODE	72:20	72:20	4	;
SIMPLE_DECL	74:1	74:15	3	long flags ; flags = 0 ;
VAR_DECL	74:1	74:6	4	long flags ; flags = 0
TYPE	74:1	74:1	5	long
TYPE_NAME	74:1	74:1	6	long
LEAF_NODE	74:1	74:1	7	long
NAME	74:6	74:6	5	flags
LEAF_NODE	74:6	74:6	6	flags
LEAF_NODE	0:0	0:0	5	;
INIT	74:6	74:6	5	flags = 0
ASSIGN	74:6	74:14	6	flags = 0
LVAL	74:6	74:6	7	flags
NAME	74:6	74:6	8	flags
LEAF_NODE	74:6	74:6	9	flags
ASSIGN_OP	74:12	74:12	7	=
LEAF_NODE	74:12	74:12	8	=
RVAL	74:14	74:14	7	0
FIELD	74:14	74:14	8	0
LEAF_NODE	74:14	74:14	9	0
LEAF_NODE	74:15	74:15	4	;
SIMPLE_DECL	75:1	75:18	3	uint64 diroff ; diroff = 0 ;
VAR_DECL	75:1	75:8	4	uint64 diroff ; diroff = 0
TYPE	75:1	75:1	5	uint64
TYPE_NAME	75:1	75:1	6	uint64
LEAF_NODE	75:1	75:1	7	uint64
NAME	75:8	75:8	5	diroff
LEAF_NODE	75:8	75:8	6	diroff
LEAF_NODE	0:0	0:0	5	;
INIT	75:8	75:8	5	diroff = 0
ASSIGN	75:8	75:17	6	diroff = 0
LVAL	75:8	75:8	7	diroff
NAME	75:8	75:8	8	diroff
LEAF_NODE	75:8	75:8	9	diroff
ASSIGN_OP	75:15	75:15	7	=
LEAF_NODE	75:15	75:15	8	=
RVAL	75:17	75:17	7	0
FIELD	75:17	75:17	8	0
LEAF_NODE	75:17	75:17	9	0
LEAF_NODE	75:18	75:18	4	;
SIMPLE_DECL	76:1	76:19	3	int chopstrips ; chopstrips = 0 ;
VAR_DECL	76:1	76:5	4	int chopstrips ; chopstrips = 0
TYPE	76:1	76:1	5	int
TYPE_NAME	76:1	76:1	6	int
LEAF_NODE	76:1	76:1	7	int
NAME	76:5	76:5	5	chopstrips
LEAF_NODE	76:5	76:5	6	chopstrips
LEAF_NODE	0:0	0:0	5	;
INIT	76:5	76:5	5	chopstrips = 0
ASSIGN	76:5	76:18	6	chopstrips = 0
LVAL	76:5	76:5	7	chopstrips
NAME	76:5	76:5	8	chopstrips
LEAF_NODE	76:5	76:5	9	chopstrips
ASSIGN_OP	76:16	76:16	7	=
LEAF_NODE	76:16	76:16	8	=
RVAL	76:18	76:18	7	0
FIELD	76:18	76:18	8	0
LEAF_NODE	76:18	76:18	9	0
LEAF_NODE	76:19	76:19	4	;
ITERATION	78:1	79:2	3	
KEYWORD	78:1	78:1	4	while
LEAF_NODE	78:1	78:1	5	while
LEAF_NODE	78:7	78:7	4	(
CONDITION	78:8	78:8	4	( c = getopt ( argc , argv , "f:o:cdDSjilmrsvwz0123456789" ) ) != - 1
EXPR	78:8	78:67	5	( c = getopt ( argc , argv , "f:o:cdDSjilmrsvwz0123456789" ) ) != - 1
LEAF_NODE	78:8	78:8	6	(
ASSIGN	78:9	78:13	6	c = getopt ( argc , argv , "f:o:cdDSjilmrsvwz0123456789" )
LVAL	78:9	78:9	7	c
FIELD	78:9	78:9	8	c
LEAF_NODE	78:9	78:9	9	c
ASSIGN_OP	78:11	78:11	7	=
LEAF_NODE	78:11	78:11	8	=
RVAL	78:13	78:13	7	getopt ( argc , argv , "f:o:cdDSjilmrsvwz0123456789" )
FUNCTION_CALL	78:13	78:61	8	getopt ( argc , argv , "f:o:cdDSjilmrsvwz0123456789" )
CALLEE	78:13	78:13	9	getopt
LEAF_NODE	78:13	78:13	10	getopt
LEAF_NODE	78:19	78:19	9	(
ARGUMENT	78:20	78:20	9	argc
FIELD	78:20	78:20	10	argc
LEAF_NODE	78:20	78:20	11	argc
LEAF_NODE	78:24	78:24	9	,
ARGUMENT	78:26	78:26	9	argv
FIELD	78:26	78:26	10	argv
LEAF_NODE	78:26	78:26	11	argv
LEAF_NODE	78:30	78:30	9	,
ARGUMENT	78:32	78:32	9	"f:o:cdDSjilmrsvwz0123456789"
FIELD	78:32	78:32	10	"f:o:cdDSjilmrsvwz0123456789"
LEAF_NODE	78:32	78:32	11	"f:o:cdDSjilmrsvwz0123456789"
LEAF_NODE	78:61	78:61	9	)
LEAF_NODE	78:62	78:62	6	)
EQ_OPERATOR	78:64	78:64	6	!=
LEAF_NODE	78:64	78:64	7	!=
UNARY_EXPR	78:67	78:68	6	- 1
UNARY_OPERATOR	78:67	78:67	7	-
LEAF_NODE	78:67	78:67	8	-
FIELD	78:68	78:68	7	1
LEAF_NODE	78:68	78:68	8	1
LEAF_NODE	78:69	78:69	4	)
STATEMENTS	79:2	79:2	4	
SELECTION	79:2	79:13	5	
KEYWORD	79:2	79:2	6	switch
LEAF_NODE	79:2	79:2	7	switch
LEAF_NODE	79:9	79:9	6	(
CONDITION	79:10	79:10	6	c
EXPR	79:10	79:10	7	c
FIELD	79:10	79:10	8	c
LEAF_NODE	79:10	79:10	9	c
LEAF_NODE	79:11	79:11	6	)
STATEMENTS	79:13	128:2	6	
LEAF_NODE	79:13	79:13	7	{
STATEMENTS	80:2	126:3	7	
LEAF_NODE	80:2	80:2	8	case
LEAF_NODE	80:7	80:7	8	'0'
LEAF_NODE	80:10	80:10	8	:
LEAF_NODE	80:12	80:12	8	case
LEAF_NODE	80:17	80:17	8	'1'
LEAF_NODE	80:20	80:20	8	:
LEAF_NODE	80:22	80:22	8	case
LEAF_NODE	80:27	80:27	8	'2'
LEAF_NODE	80:30	80:30	8	:
LEAF_NODE	80:32	80:32	8	case
LEAF_NODE	80:37	80:37	8	'3'
LEAF_NODE	80:40	80:40	8	:
LEAF_NODE	81:2	81:2	8	case
LEAF_NODE	81:7	81:7	8	'4'
LEAF_NODE	81:10	81:10	8	:
LEAF_NODE	81:12	81:12	8	case
LEAF_NODE	81:17	81:17	8	'5'
LEAF_NODE	81:20	81:20	8	:
LEAF_NODE	81:22	81:22	8	case
LEAF_NODE	81:27	81:27	8	'6'
LEAF_NODE	81:30	81:30	8	:
LEAF_NODE	81:32	81:32	8	case
LEAF_NODE	81:37	81:37	8	'7'
LEAF_NODE	81:40	81:40	8	:
LEAF_NODE	82:2	82:2	8	case
LEAF_NODE	82:7	82:7	8	'8'
LEAF_NODE	82:10	82:10	8	:
LEAF_NODE	82:12	82:12	8	case
LEAF_NODE	82:17	82:17	8	'9'
LEAF_NODE	82:20	82:20	8	:
EXPR_STATEMENT	83:3	83:36	8	dirnum = atoi ( & argv [ optind - 1 ] [ 1 ] ) ;
EXPR	83:3	83:3	9	dirnum = atoi ( & argv [ optind - 1 ] [ 1 ] )
ASSIGN	83:3	83:12	10	dirnum = atoi ( & argv [ optind - 1 ] [ 1 ] )
LVAL	83:3	83:3	11	dirnum
FIELD	83:3	83:3	12	dirnum
LEAF_NODE	83:3	83:3	13	dirnum
ASSIGN_OP	83:10	83:10	11	=
LEAF_NODE	83:10	83:10	12	=
RVAL	83:12	83:12	11	atoi ( & argv [ optind - 1 ] [ 1 ] )
FUNCTION_CALL	83:12	83:35	12	atoi ( & argv [ optind - 1 ] [ 1 ] )
CALLEE	83:12	83:12	13	atoi
LEAF_NODE	83:12	83:12	14	atoi
LEAF_NODE	83:16	83:16	13	(
ARGUMENT	83:17	83:17	13	& argv [ optind - 1 ] [ 1 ]
UNARY_EXPR	83:17	83:18	14	& argv [ optind - 1 ] [ 1 ]
UNARY_OPERATOR	83:17	83:17	15	&
LEAF_NODE	83:17	83:17	16	&
FIELD	83:18	83:34	15	argv [ optind - 1 ] [ 1 ]
LEAF_NODE	83:18	83:18	16	argv
LEAF_NODE	83:22	83:22	16	[
EXPR	83:23	83:30	16	optind - 1
FIELD	83:23	83:23	17	optind
LEAF_NODE	83:23	83:23	18	optind
LEAF_NODE	83:29	83:29	17	-
FIELD	83:30	83:30	17	1
LEAF_NODE	83:30	83:30	18	1
LEAF_NODE	83:31	83:31	16	]
LEAF_NODE	83:32	83:32	16	[
EXPR	83:33	83:33	16	1
FIELD	83:33	83:33	17	1
LEAF_NODE	83:33	83:33	18	1
LEAF_NODE	83:34	83:34	16	]
LEAF_NODE	83:35	83:35	13	)
LEAF_NODE	83:36	83:36	9	;
JUMP_STATEMENT	84:3	84:8	8	break DESTINATION ;
KEYWORD	84:3	84:3	9	break
LEAF_NODE	84:3	84:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	84:8	84:8	9	;
LEAF_NODE	85:2	85:2	8	case
LEAF_NODE	85:7	85:7	8	'd'
LEAF_NODE	85:10	85:10	8	:
EXPR_STATEMENT	86:3	86:13	8	showdata ++ ;
EXPR	86:3	86:3	9	showdata ++
FIELD	86:3	86:11	10	showdata ++
LEAF_NODE	86:3	86:3	11	showdata
LEAF_NODE	86:11	86:11	11	++
LEAF_NODE	86:13	86:13	9	;
LEAF_NODE	88:2	88:2	8	case
LEAF_NODE	88:7	88:7	8	'D'
LEAF_NODE	88:10	88:10	8	:
EXPR_STATEMENT	89:3	89:13	8	readdata ++ ;
EXPR	89:3	89:3	9	readdata ++
FIELD	89:3	89:11	10	readdata ++
LEAF_NODE	89:3	89:3	11	readdata
LEAF_NODE	89:11	89:11	11	++
LEAF_NODE	89:13	89:13	9	;
JUMP_STATEMENT	90:3	90:8	8	break DESTINATION ;
KEYWORD	90:3	90:3	9	break
LEAF_NODE	90:3	90:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	90:8	90:8	9	;
LEAF_NODE	91:2	91:2	8	case
LEAF_NODE	91:7	91:7	8	'c'
LEAF_NODE	91:10	91:10	8	:
EXPR_STATEMENT	92:3	92:49	8	flags |= TIFFPRINT_COLORMAP | TIFFPRINT_CURVES ;
EXPR	92:3	92:3	9	flags |= TIFFPRINT_COLORMAP | TIFFPRINT_CURVES
ASSIGN	92:3	92:12	10	flags |= TIFFPRINT_COLORMAP | TIFFPRINT_CURVES
LVAL	92:3	92:3	11	flags
FIELD	92:3	92:3	12	flags
LEAF_NODE	92:3	92:3	13	flags
ASSIGN_OP	92:9	92:9	11	|=
LEAF_NODE	92:9	92:9	12	|=
RVAL	92:12	92:12	11	TIFFPRINT_COLORMAP | TIFFPRINT_CURVES
BIT_OR	92:12	92:33	12	TIFFPRINT_COLORMAP | TIFFPRINT_CURVES
BIT_OR_ELEM	92:12	92:12	13	TIFFPRINT_COLORMAP
FIELD	92:12	92:12	14	TIFFPRINT_COLORMAP
LEAF_NODE	92:12	92:12	15	TIFFPRINT_COLORMAP
LEAF_NODE	92:31	92:31	13	|
BIT_OR_ELEM	92:33	92:33	13	TIFFPRINT_CURVES
FIELD	92:33	92:33	14	TIFFPRINT_CURVES
LEAF_NODE	92:33	92:33	15	TIFFPRINT_CURVES
LEAF_NODE	92:49	92:49	9	;
JUMP_STATEMENT	93:3	93:8	8	break DESTINATION ;
KEYWORD	93:3	93:3	9	break
LEAF_NODE	93:3	93:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	93:8	93:8	9	;
LEAF_NODE	94:2	94:2	8	case
LEAF_NODE	94:7	94:7	8	'f'
LEAF_NODE	94:10	94:10	8	:
SELECTION	95:3	96:4	8	
KEYWORD	95:3	95:3	9	if
LEAF_NODE	95:3	95:3	10	if
LEAF_NODE	95:6	95:6	9	(
CONDITION	95:7	95:7	9	streq ( optarg , "lsb2msb" )
EXPR	95:7	95:7	10	streq ( optarg , "lsb2msb" )
FUNCTION_CALL	95:7	95:30	11	streq ( optarg , "lsb2msb" )
CALLEE	95:7	95:7	12	streq
LEAF_NODE	95:7	95:7	13	streq
LEAF_NODE	95:12	95:12	12	(
ARGUMENT	95:13	95:13	12	optarg
FIELD	95:13	95:13	13	optarg
LEAF_NODE	95:13	95:13	14	optarg
LEAF_NODE	95:19	95:19	12	,
ARGUMENT	95:21	95:21	12	"lsb2msb"
FIELD	95:21	95:21	13	"lsb2msb"
LEAF_NODE	95:21	95:21	14	"lsb2msb"
LEAF_NODE	95:30	95:30	12	)
LEAF_NODE	95:31	95:31	9	)
STATEMENTS	96:4	96:4	9	
EXPR_STATEMENT	96:4	96:29	10	order = FILLORDER_LSB2MSB ;
EXPR	96:4	96:4	11	order = FILLORDER_LSB2MSB
ASSIGN	96:4	96:12	12	order = FILLORDER_LSB2MSB
LVAL	96:4	96:4	13	order
FIELD	96:4	96:4	14	order
LEAF_NODE	96:4	96:4	15	order
ASSIGN_OP	96:10	96:10	13	=
LEAF_NODE	96:10	96:10	14	=
RVAL	96:12	96:12	13	FILLORDER_LSB2MSB
FIELD	96:12	96:12	14	FILLORDER_LSB2MSB
LEAF_NODE	96:12	96:12	15	FILLORDER_LSB2MSB
LEAF_NODE	96:29	96:29	11	;
SELECTION	97:3	97:8	8	
KEYWORD	97:3	97:3	9	else
LEAF_NODE	97:3	97:3	10	else
STATEMENTS	97:8	97:8	9	
SELECTION	97:8	98:4	10	
KEYWORD	97:8	97:8	11	if
LEAF_NODE	97:8	97:8	12	if
LEAF_NODE	97:11	97:11	11	(
CONDITION	97:12	97:12	11	streq ( optarg , "msb2lsb" )
EXPR	97:12	97:12	12	streq ( optarg , "msb2lsb" )
FUNCTION_CALL	97:12	97:35	13	streq ( optarg , "msb2lsb" )
CALLEE	97:12	97:12	14	streq
LEAF_NODE	97:12	97:12	15	streq
LEAF_NODE	97:17	97:17	14	(
ARGUMENT	97:18	97:18	14	optarg
FIELD	97:18	97:18	15	optarg
LEAF_NODE	97:18	97:18	16	optarg
LEAF_NODE	97:24	97:24	14	,
ARGUMENT	97:26	97:26	14	"msb2lsb"
FIELD	97:26	97:26	15	"msb2lsb"
LEAF_NODE	97:26	97:26	16	"msb2lsb"
LEAF_NODE	97:35	97:35	14	)
LEAF_NODE	97:36	97:36	11	)
STATEMENTS	98:4	98:4	11	
EXPR_STATEMENT	98:4	98:29	12	order = FILLORDER_MSB2LSB ;
EXPR	98:4	98:4	13	order = FILLORDER_MSB2LSB
ASSIGN	98:4	98:12	14	order = FILLORDER_MSB2LSB
LVAL	98:4	98:4	15	order
FIELD	98:4	98:4	16	order
LEAF_NODE	98:4	98:4	17	order
ASSIGN_OP	98:10	98:10	15	=
LEAF_NODE	98:10	98:10	16	=
RVAL	98:12	98:12	15	FILLORDER_MSB2LSB
FIELD	98:12	98:12	16	FILLORDER_MSB2LSB
LEAF_NODE	98:12	98:12	17	FILLORDER_MSB2LSB
LEAF_NODE	98:29	98:29	13	;
SELECTION	99:3	100:4	8	
KEYWORD	99:3	99:3	9	else
LEAF_NODE	99:3	99:3	10	else
STATEMENTS	100:4	100:4	9	
EXPR_STATEMENT	100:4	100:11	10	usage ( ) ;
EXPR	100:4	100:4	11	usage ( )
FUNCTION_CALL	100:4	100:10	12	usage ( )
CALLEE	100:4	100:4	13	usage
LEAF_NODE	100:4	100:4	14	usage
LEAF_NODE	100:9	100:9	13	(
LEAF_NODE	100:10	100:10	13	)
LEAF_NODE	100:11	100:11	11	;
JUMP_STATEMENT	101:3	101:8	8	break DESTINATION ;
KEYWORD	101:3	101:3	9	break
LEAF_NODE	101:3	101:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	101:8	101:8	9	;
LEAF_NODE	102:2	102:2	8	case
LEAF_NODE	102:7	102:7	8	'i'
LEAF_NODE	102:10	102:10	8	:
EXPR_STATEMENT	103:3	103:16	8	stoponerr = 0 ;
EXPR	103:3	103:3	9	stoponerr = 0
ASSIGN	103:3	103:15	10	stoponerr = 0
LVAL	103:3	103:3	11	stoponerr
FIELD	103:3	103:3	12	stoponerr
LEAF_NODE	103:3	103:3	13	stoponerr
ASSIGN_OP	103:13	103:13	11	=
LEAF_NODE	103:13	103:13	12	=
RVAL	103:15	103:15	11	0
FIELD	103:15	103:15	12	0
LEAF_NODE	103:15	103:15	13	0
LEAF_NODE	103:16	103:16	9	;
JUMP_STATEMENT	104:3	104:8	8	break DESTINATION ;
KEYWORD	104:3	104:3	9	break
LEAF_NODE	104:3	104:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	104:8	104:8	9	;
LEAF_NODE	105:2	105:2	8	case
LEAF_NODE	105:7	105:7	8	'o'
LEAF_NODE	105:10	105:10	8	:
EXPR_STATEMENT	106:3	106:36	8	diroff = strtoul ( optarg , NULL , 0 ) ;
EXPR	106:3	106:3	9	diroff = strtoul ( optarg , NULL , 0 )
ASSIGN	106:3	106:12	10	diroff = strtoul ( optarg , NULL , 0 )
LVAL	106:3	106:3	11	diroff
FIELD	106:3	106:3	12	diroff
LEAF_NODE	106:3	106:3	13	diroff
ASSIGN_OP	106:10	106:10	11	=
LEAF_NODE	106:10	106:10	12	=
RVAL	106:12	106:12	11	strtoul ( optarg , NULL , 0 )
FUNCTION_CALL	106:12	106:35	12	strtoul ( optarg , NULL , 0 )
CALLEE	106:12	106:12	13	strtoul
LEAF_NODE	106:12	106:12	14	strtoul
LEAF_NODE	106:19	106:19	13	(
ARGUMENT	106:20	106:20	13	optarg
FIELD	106:20	106:20	14	optarg
LEAF_NODE	106:20	106:20	15	optarg
LEAF_NODE	106:26	106:26	13	,
ARGUMENT	106:28	106:28	13	NULL
FIELD	106:28	106:28	14	NULL
LEAF_NODE	106:28	106:28	15	NULL
LEAF_NODE	106:32	106:32	13	,
ARGUMENT	106:34	106:34	13	0
FIELD	106:34	106:34	14	0
LEAF_NODE	106:34	106:34	15	0
LEAF_NODE	106:35	106:35	13	)
LEAF_NODE	106:36	106:36	9	;
JUMP_STATEMENT	107:3	107:8	8	break DESTINATION ;
KEYWORD	107:3	107:3	9	break
LEAF_NODE	107:3	107:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	107:8	107:8	9	;
LEAF_NODE	108:2	108:2	8	case
LEAF_NODE	108:7	108:7	8	'j'
LEAF_NODE	108:10	108:10	8	:
EXPR_STATEMENT	109:3	111:27	8	flags |= TIFFPRINT_JPEGQTABLES | TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES ;
EXPR	109:3	109:3	9	flags |= TIFFPRINT_JPEGQTABLES | TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
ASSIGN	109:3	109:12	10	flags |= TIFFPRINT_JPEGQTABLES | TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
LVAL	109:3	109:3	11	flags
FIELD	109:3	109:3	12	flags
LEAF_NODE	109:3	109:3	13	flags
ASSIGN_OP	109:9	109:9	11	|=
LEAF_NODE	109:9	109:9	12	|=
RVAL	109:12	109:12	11	TIFFPRINT_JPEGQTABLES | TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
BIT_OR	109:12	110:5	12	TIFFPRINT_JPEGQTABLES | TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
BIT_OR_ELEM	109:12	109:12	13	TIFFPRINT_JPEGQTABLES
FIELD	109:12	109:12	14	TIFFPRINT_JPEGQTABLES
LEAF_NODE	109:12	109:12	15	TIFFPRINT_JPEGQTABLES
LEAF_NODE	109:34	109:34	13	|
BIT_OR_ELEM	110:5	110:5	13	TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
BIT_OR	110:5	111:5	14	TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
BIT_OR_ELEM	110:5	110:5	15	TIFFPRINT_JPEGACTABLES
FIELD	110:5	110:5	16	TIFFPRINT_JPEGACTABLES
LEAF_NODE	110:5	110:5	17	TIFFPRINT_JPEGACTABLES
LEAF_NODE	110:28	110:28	15	|
BIT_OR_ELEM	111:5	111:5	15	TIFFPRINT_JPEGDCTABLES
FIELD	111:5	111:5	16	TIFFPRINT_JPEGDCTABLES
LEAF_NODE	111:5	111:5	17	TIFFPRINT_JPEGDCTABLES
LEAF_NODE	111:27	111:27	9	;
JUMP_STATEMENT	112:3	112:8	8	break DESTINATION ;
KEYWORD	112:3	112:3	9	break
LEAF_NODE	112:3	112:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	112:8	112:8	9	;
LEAF_NODE	113:2	113:2	8	case
LEAF_NODE	113:7	113:7	8	'r'
LEAF_NODE	113:10	113:10	8	:
EXPR_STATEMENT	114:3	114:14	8	rawdata = 1 ;
EXPR	114:3	114:3	9	rawdata = 1
ASSIGN	114:3	114:13	10	rawdata = 1
LVAL	114:3	114:3	11	rawdata
FIELD	114:3	114:3	12	rawdata
LEAF_NODE	114:3	114:3	13	rawdata
ASSIGN_OP	114:11	114:11	11	=
LEAF_NODE	114:11	114:11	12	=
RVAL	114:13	114:13	11	1
FIELD	114:13	114:13	12	1
LEAF_NODE	114:13	114:13	13	1
LEAF_NODE	114:14	114:14	9	;
JUMP_STATEMENT	115:3	115:8	8	break DESTINATION ;
KEYWORD	115:3	115:3	9	break
LEAF_NODE	115:3	115:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	115:8	115:8	9	;
LEAF_NODE	116:2	116:2	8	case
LEAF_NODE	116:7	116:7	8	's'
LEAF_NODE	116:10	116:10	8	:
EXPR_STATEMENT	117:3	117:28	8	flags |= TIFFPRINT_STRIPS ;
EXPR	117:3	117:3	9	flags |= TIFFPRINT_STRIPS
ASSIGN	117:3	117:12	10	flags |= TIFFPRINT_STRIPS
LVAL	117:3	117:3	11	flags
FIELD	117:3	117:3	12	flags
LEAF_NODE	117:3	117:3	13	flags
ASSIGN_OP	117:9	117:9	11	|=
LEAF_NODE	117:9	117:9	12	|=
RVAL	117:12	117:12	11	TIFFPRINT_STRIPS
FIELD	117:12	117:12	12	TIFFPRINT_STRIPS
LEAF_NODE	117:12	117:12	13	TIFFPRINT_STRIPS
LEAF_NODE	117:28	117:28	9	;
JUMP_STATEMENT	118:3	118:8	8	break DESTINATION ;
KEYWORD	118:3	118:3	9	break
LEAF_NODE	118:3	118:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	118:8	118:8	9	;
LEAF_NODE	119:2	119:2	8	case
LEAF_NODE	119:7	119:7	8	'w'
LEAF_NODE	119:10	119:10	8	:
EXPR_STATEMENT	120:3	120:16	8	showwords = 1 ;
EXPR	120:3	120:3	9	showwords = 1
ASSIGN	120:3	120:15	10	showwords = 1
LVAL	120:3	120:3	11	showwords
FIELD	120:3	120:3	12	showwords
LEAF_NODE	120:3	120:3	13	showwords
ASSIGN_OP	120:13	120:13	11	=
LEAF_NODE	120:13	120:13	12	=
RVAL	120:15	120:15	11	1
FIELD	120:15	120:15	12	1
LEAF_NODE	120:15	120:15	13	1
LEAF_NODE	120:16	120:16	9	;
JUMP_STATEMENT	121:3	121:8	8	break DESTINATION ;
KEYWORD	121:3	121:3	9	break
LEAF_NODE	121:3	121:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	121:8	121:8	9	;
LEAF_NODE	122:2	122:2	8	case
LEAF_NODE	122:7	122:7	8	'z'
LEAF_NODE	122:10	122:10	8	:
EXPR_STATEMENT	123:3	123:17	8	chopstrips = 1 ;
EXPR	123:3	123:3	9	chopstrips = 1
ASSIGN	123:3	123:16	10	chopstrips = 1
LVAL	123:3	123:3	11	chopstrips
FIELD	123:3	123:3	12	chopstrips
LEAF_NODE	123:3	123:3	13	chopstrips
ASSIGN_OP	123:14	123:14	11	=
LEAF_NODE	123:14	123:14	12	=
RVAL	123:16	123:16	11	1
FIELD	123:16	123:16	12	1
LEAF_NODE	123:16	123:16	13	1
LEAF_NODE	123:17	123:17	9	;
JUMP_STATEMENT	124:3	124:8	8	break DESTINATION ;
KEYWORD	124:3	124:3	9	break
LEAF_NODE	124:3	124:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	124:8	124:8	9	;
LEAF_NODE	125:2	125:2	8	case
LEAF_NODE	125:7	125:7	8	'?'
LEAF_NODE	125:10	125:10	8	:
EXPR_STATEMENT	126:3	126:10	8	usage ( ) ;
EXPR	126:3	126:3	9	usage ( )
FUNCTION_CALL	126:3	126:9	10	usage ( )
CALLEE	126:3	126:3	11	usage
LEAF_NODE	126:3	126:3	12	usage
LEAF_NODE	126:8	126:8	11	(
LEAF_NODE	126:9	126:9	11	)
LEAF_NODE	126:10	126:10	9	;
LEAF_NODE	128:2	128:2	7	}
SELECTION	129:1	130:2	3	
KEYWORD	129:1	129:1	4	if
LEAF_NODE	129:1	129:1	5	if
LEAF_NODE	129:4	129:4	4	(
CONDITION	129:5	129:5	4	optind >= argc
EXPR	129:5	129:15	5	optind >= argc
FIELD	129:5	129:5	6	optind
LEAF_NODE	129:5	129:5	7	optind
REL_OPERATOR	129:12	129:12	6	>=
LEAF_NODE	129:12	129:12	7	>=
FIELD	129:15	129:15	6	argc
LEAF_NODE	129:15	129:15	7	argc
LEAF_NODE	129:19	129:19	4	)
STATEMENTS	130:2	130:2	4	
EXPR_STATEMENT	130:2	130:9	5	usage ( ) ;
EXPR	130:2	130:2	6	usage ( )
FUNCTION_CALL	130:2	130:8	7	usage ( )
CALLEE	130:2	130:2	8	usage
LEAF_NODE	130:2	130:2	9	usage
LEAF_NODE	130:7	130:7	8	(
LEAF_NODE	130:8	130:8	8	)
LEAF_NODE	130:9	130:9	6	;
EXPR_STATEMENT	132:1	132:61	3	old_error_handler = TIFFSetErrorHandler ( PrivateErrorHandler ) ;
EXPR	132:1	132:1	4	old_error_handler = TIFFSetErrorHandler ( PrivateErrorHandler )
ASSIGN	132:1	132:21	5	old_error_handler = TIFFSetErrorHandler ( PrivateErrorHandler )
LVAL	132:1	132:1	6	old_error_handler
FIELD	132:1	132:1	7	old_error_handler
LEAF_NODE	132:1	132:1	8	old_error_handler
ASSIGN_OP	132:19	132:19	6	=
LEAF_NODE	132:19	132:19	7	=
RVAL	132:21	132:21	6	TIFFSetErrorHandler ( PrivateErrorHandler )
FUNCTION_CALL	132:21	132:60	7	TIFFSetErrorHandler ( PrivateErrorHandler )
CALLEE	132:21	132:21	8	TIFFSetErrorHandler
LEAF_NODE	132:21	132:21	9	TIFFSetErrorHandler
LEAF_NODE	132:40	132:40	8	(
ARGUMENT	132:41	132:41	8	PrivateErrorHandler
FIELD	132:41	132:41	9	PrivateErrorHandler
LEAF_NODE	132:41	132:41	10	PrivateErrorHandler
LEAF_NODE	132:60	132:60	8	)
LEAF_NODE	132:61	132:61	4	;
EXPR_STATEMENT	134:1	134:36	3	multiplefiles = ( argc - optind > 1 ) ;
EXPR	134:1	134:1	4	multiplefiles = ( argc - optind > 1 )
ASSIGN	134:1	134:17	5	multiplefiles = ( argc - optind > 1 )
LVAL	134:1	134:1	6	multiplefiles
FIELD	134:1	134:1	7	multiplefiles
LEAF_NODE	134:1	134:1	8	multiplefiles
ASSIGN_OP	134:15	134:15	6	=
LEAF_NODE	134:15	134:15	7	=
RVAL	134:17	134:35	6	( argc - optind > 1 )
LEAF_NODE	134:17	134:17	7	(
FIELD	134:18	134:18	7	argc
LEAF_NODE	134:18	134:18	8	argc
LEAF_NODE	134:23	134:23	7	-
FIELD	134:25	134:25	7	optind
LEAF_NODE	134:25	134:25	8	optind
REL_OPERATOR	134:32	134:32	7	>
LEAF_NODE	134:32	134:32	8	>
FIELD	134:34	134:34	7	1
LEAF_NODE	134:34	134:34	8	1
LEAF_NODE	134:35	134:35	7	)
LEAF_NODE	134:36	134:36	4	;
ITERATION	135:1	135:33	3	
KEYWORD	135:1	135:1	4	for
LEAF_NODE	135:1	135:1	5	for
LEAF_NODE	135:5	135:5	4	(
FOR_INIT	135:6	135:6	4	;
LEAF_NODE	135:6	135:6	5	;
CONDITION	135:8	135:8	4	optind < argc
EXPR	135:8	135:17	5	optind < argc
FIELD	135:8	135:8	6	optind
LEAF_NODE	135:8	135:8	7	optind
REL_OPERATOR	135:15	135:15	6	<
LEAF_NODE	135:15	135:15	7	<
FIELD	135:17	135:17	6	argc
LEAF_NODE	135:17	135:17	7	argc
LEAF_NODE	135:21	135:21	4	;
FOR_EXPR	135:23	135:23	4	optind ++
EXPR	135:23	135:23	5	optind ++
FIELD	135:23	135:29	6	optind ++
LEAF_NODE	135:23	135:23	7	optind
LEAF_NODE	135:29	135:29	7	++
LEAF_NODE	135:31	135:31	4	)
STATEMENTS	135:33	161:1	4	
LEAF_NODE	135:33	135:33	5	{
STATEMENTS	136:2	139:2	5	
SELECTION	136:2	137:3	6	
KEYWORD	136:2	136:2	7	if
LEAF_NODE	136:2	136:2	8	if
LEAF_NODE	136:5	136:5	7	(
CONDITION	136:6	136:6	7	multiplefiles
EXPR	136:6	136:6	8	multiplefiles
FIELD	136:6	136:6	9	multiplefiles
LEAF_NODE	136:6	136:6	10	multiplefiles
LEAF_NODE	136:19	136:19	7	)
STATEMENTS	137:3	137:3	7	
EXPR_STATEMENT	137:3	137:32	8	printf ( "%s:\n" , argv [ optind ] ) ;
EXPR	137:3	137:3	9	printf ( "%s:\n" , argv [ optind ] )
FUNCTION_CALL	137:3	137:31	10	printf ( "%s:\n" , argv [ optind ] )
CALLEE	137:3	137:3	11	printf
LEAF_NODE	137:3	137:3	12	printf
LEAF_NODE	137:9	137:9	11	(
ARGUMENT	137:10	137:10	11	"%s:\n"
FIELD	137:10	137:10	12	"%s:\n"
LEAF_NODE	137:10	137:10	13	"%s:\n"
LEAF_NODE	137:17	137:17	11	,
ARGUMENT	137:19	137:19	11	argv [ optind ]
FIELD	137:19	137:30	12	argv [ optind ]
LEAF_NODE	137:19	137:19	13	argv
LEAF_NODE	137:23	137:23	13	[
EXPR	137:24	137:24	13	optind
FIELD	137:24	137:24	14	optind
LEAF_NODE	137:24	137:24	15	optind
LEAF_NODE	137:30	137:30	13	]
LEAF_NODE	137:31	137:31	11	)
LEAF_NODE	137:32	137:32	9	;
EXPR_STATEMENT	138:2	138:56	6	tif = TIFFOpen ( argv [ optind ] , chopstrips ? "rC" : "rc" ) ;
EXPR	138:2	138:2	7	tif = TIFFOpen ( argv [ optind ] , chopstrips ? "rC" : "rc" )
ASSIGN	138:2	138:8	8	tif = TIFFOpen ( argv [ optind ] , chopstrips ? "rC" : "rc" )
LVAL	138:2	138:2	9	tif
FIELD	138:2	138:2	10	tif
LEAF_NODE	138:2	138:2	11	tif
ASSIGN_OP	138:6	138:6	9	=
LEAF_NODE	138:6	138:6	10	=
RVAL	138:8	138:8	9	TIFFOpen ( argv [ optind ] , chopstrips ? "rC" : "rc" )
FUNCTION_CALL	138:8	138:55	10	TIFFOpen ( argv [ optind ] , chopstrips ? "rC" : "rc" )
CALLEE	138:8	138:8	11	TIFFOpen
LEAF_NODE	138:8	138:8	12	TIFFOpen
LEAF_NODE	138:16	138:16	11	(
ARGUMENT	138:17	138:17	11	argv [ optind ]
FIELD	138:17	138:28	12	argv [ optind ]
LEAF_NODE	138:17	138:17	13	argv
LEAF_NODE	138:21	138:21	13	[
EXPR	138:22	138:22	13	optind
FIELD	138:22	138:22	14	optind
LEAF_NODE	138:22	138:22	15	optind
LEAF_NODE	138:28	138:28	13	]
LEAF_NODE	138:29	138:29	11	,
ARGUMENT	138:31	138:31	11	chopstrips ? "rC" : "rc"
COND_EXPR	138:31	138:51	12	chopstrips ? "rC" : "rc"
CONDITION	138:31	138:31	13	chopstrips
FIELD	138:31	138:31	14	chopstrips
LEAF_NODE	138:31	138:31	15	chopstrips
LEAF_NODE	138:42	138:42	13	?
EXPR	138:44	138:44	13	"rC"
FIELD	138:44	138:44	14	"rC"
LEAF_NODE	138:44	138:44	15	"rC"
LEAF_NODE	138:49	138:49	13	:
FIELD	138:51	138:51	13	"rc"
LEAF_NODE	138:51	138:51	14	"rc"
LEAF_NODE	138:55	138:55	11	)
LEAF_NODE	138:56	138:56	7	;
SELECTION	139:2	139:19	6	
KEYWORD	139:2	139:2	7	if
LEAF_NODE	139:2	139:2	8	if
LEAF_NODE	139:5	139:5	7	(
CONDITION	139:6	139:6	7	tif != NULL
EXPR	139:6	139:13	8	tif != NULL
FIELD	139:6	139:6	9	tif
LEAF_NODE	139:6	139:6	10	tif
EQ_OPERATOR	139:10	139:10	9	!=
LEAF_NODE	139:10	139:10	10	!=
FIELD	139:13	139:13	9	NULL
LEAF_NODE	139:13	139:13	10	NULL
LEAF_NODE	139:17	139:17	7	)
STATEMENTS	139:19	160:2	7	
LEAF_NODE	139:19	139:19	8	{
STATEMENTS	140:3	159:3	8	
SELECTION	140:3	140:21	9	
KEYWORD	140:3	140:3	10	if
LEAF_NODE	140:3	140:3	11	if
LEAF_NODE	140:6	140:6	10	(
CONDITION	140:7	140:7	10	dirnum != - 1
EXPR	140:7	140:17	11	dirnum != - 1
FIELD	140:7	140:7	12	dirnum
LEAF_NODE	140:7	140:7	13	dirnum
EQ_OPERATOR	140:14	140:14	12	!=
LEAF_NODE	140:14	140:14	13	!=
UNARY_EXPR	140:17	140:18	12	- 1
UNARY_OPERATOR	140:17	140:17	13	-
LEAF_NODE	140:17	140:17	14	-
FIELD	140:18	140:18	13	1
LEAF_NODE	140:18	140:18	14	1
LEAF_NODE	140:19	140:19	10	)
STATEMENTS	140:21	143:3	10	
LEAF_NODE	140:21	140:21	11	{
STATEMENTS	141:4	141:4	11	
SELECTION	141:4	142:5	12	
KEYWORD	141:4	141:4	13	if
LEAF_NODE	141:4	141:4	14	if
LEAF_NODE	141:7	141:7	13	(
CONDITION	141:8	141:8	13	TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
EXPR	141:8	141:8	14	TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
FUNCTION_CALL	141:8	141:45	15	TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
CALLEE	141:8	141:8	16	TIFFSetDirectory
LEAF_NODE	141:8	141:8	17	TIFFSetDirectory
LEAF_NODE	141:24	141:24	16	(
ARGUMENT	141:25	141:25	16	tif
FIELD	141:25	141:25	17	tif
LEAF_NODE	141:25	141:25	18	tif
LEAF_NODE	141:28	141:28	16	,
ARGUMENT	141:30	141:39	16	( tdir_t ) dirnum
LEAF_NODE	141:30	141:30	17	(
TYPE_NAME	141:31	141:31	17	tdir_t
LEAF_NODE	141:31	141:31	18	tdir_t
LEAF_NODE	141:37	141:37	17	)
FIELD	141:39	141:39	17	dirnum
LEAF_NODE	141:39	141:39	18	dirnum
LEAF_NODE	141:45	141:45	16	)
LEAF_NODE	141:46	141:46	13	)
STATEMENTS	142:5	142:5	13	
EXPR_STATEMENT	142:5	142:35	14	tiffinfo ( tif , order , flags , 1 ) ;
EXPR	142:5	142:5	15	tiffinfo ( tif , order , flags , 1 )
FUNCTION_CALL	142:5	142:34	16	tiffinfo ( tif , order , flags , 1 )
CALLEE	142:5	142:5	17	tiffinfo
LEAF_NODE	142:5	142:5	18	tiffinfo
LEAF_NODE	142:13	142:13	17	(
ARGUMENT	142:14	142:14	17	tif
FIELD	142:14	142:14	18	tif
LEAF_NODE	142:14	142:14	19	tif
LEAF_NODE	142:17	142:17	17	,
ARGUMENT	142:19	142:19	17	order
FIELD	142:19	142:19	18	order
LEAF_NODE	142:19	142:19	19	order
LEAF_NODE	142:24	142:24	17	,
ARGUMENT	142:26	142:26	17	flags
FIELD	142:26	142:26	18	flags
LEAF_NODE	142:26	142:26	19	flags
LEAF_NODE	142:31	142:31	17	,
ARGUMENT	142:33	142:33	17	1
FIELD	142:33	142:33	18	1
LEAF_NODE	142:33	142:33	19	1
LEAF_NODE	142:34	142:34	17	)
LEAF_NODE	142:35	142:35	15	;
LEAF_NODE	143:3	143:3	11	}
SELECTION	143:5	143:10	9	
KEYWORD	143:5	143:5	10	else
LEAF_NODE	143:5	143:5	11	else
STATEMENTS	143:10	143:10	10	
SELECTION	143:10	143:27	11	
KEYWORD	143:10	143:10	12	if
LEAF_NODE	143:10	143:10	13	if
LEAF_NODE	143:13	143:13	12	(
CONDITION	143:14	143:14	12	diroff != 0
EXPR	143:14	143:24	13	diroff != 0
FIELD	143:14	143:14	14	diroff
LEAF_NODE	143:14	143:14	15	diroff
EQ_OPERATOR	143:21	143:21	14	!=
LEAF_NODE	143:21	143:21	15	!=
FIELD	143:24	143:24	14	0
LEAF_NODE	143:24	143:24	15	0
LEAF_NODE	143:25	143:25	12	)
STATEMENTS	143:27	146:3	12	
LEAF_NODE	143:27	143:27	13	{
STATEMENTS	144:4	144:4	13	
SELECTION	144:4	145:5	14	
KEYWORD	144:4	144:4	15	if
LEAF_NODE	144:4	144:4	16	if
LEAF_NODE	144:7	144:7	15	(
CONDITION	144:8	144:8	15	TIFFSetSubDirectory ( tif , diroff )
EXPR	144:8	144:8	16	TIFFSetSubDirectory ( tif , diroff )
FUNCTION_CALL	144:8	144:39	17	TIFFSetSubDirectory ( tif , diroff )
CALLEE	144:8	144:8	18	TIFFSetSubDirectory
LEAF_NODE	144:8	144:8	19	TIFFSetSubDirectory
LEAF_NODE	144:27	144:27	18	(
ARGUMENT	144:28	144:28	18	tif
FIELD	144:28	144:28	19	tif
LEAF_NODE	144:28	144:28	20	tif
LEAF_NODE	144:31	144:31	18	,
ARGUMENT	144:33	144:33	18	diroff
FIELD	144:33	144:33	19	diroff
LEAF_NODE	144:33	144:33	20	diroff
LEAF_NODE	144:39	144:39	18	)
LEAF_NODE	144:40	144:40	15	)
STATEMENTS	145:5	145:5	15	
EXPR_STATEMENT	145:5	145:35	16	tiffinfo ( tif , order , flags , 1 ) ;
EXPR	145:5	145:5	17	tiffinfo ( tif , order , flags , 1 )
FUNCTION_CALL	145:5	145:34	18	tiffinfo ( tif , order , flags , 1 )
CALLEE	145:5	145:5	19	tiffinfo
LEAF_NODE	145:5	145:5	20	tiffinfo
LEAF_NODE	145:13	145:13	19	(
ARGUMENT	145:14	145:14	19	tif
FIELD	145:14	145:14	20	tif
LEAF_NODE	145:14	145:14	21	tif
LEAF_NODE	145:17	145:17	19	,
ARGUMENT	145:19	145:19	19	order
FIELD	145:19	145:19	20	order
LEAF_NODE	145:19	145:19	21	order
LEAF_NODE	145:24	145:24	19	,
ARGUMENT	145:26	145:26	19	flags
FIELD	145:26	145:26	20	flags
LEAF_NODE	145:26	145:26	21	flags
LEAF_NODE	145:31	145:31	19	,
ARGUMENT	145:33	145:33	19	1
FIELD	145:33	145:33	20	1
LEAF_NODE	145:33	145:33	21	1
LEAF_NODE	145:34	145:34	19	)
LEAF_NODE	145:35	145:35	17	;
LEAF_NODE	146:3	146:3	13	}
SELECTION	146:5	146:10	9	
KEYWORD	146:5	146:5	10	else
LEAF_NODE	146:5	146:5	11	else
STATEMENTS	146:10	158:3	10	
LEAF_NODE	146:10	146:10	11	{
STATEMENTS	147:4	157:36	11	
ITERATION	147:4	147:7	12	
KEYWORD	147:4	147:4	13	do
LEAF_NODE	147:4	147:4	14	do
LEAF_NODE	157:12	157:12	13	(
CONDITION	157:13	157:13	13	TIFFReadDirectory ( tif )
EXPR	157:13	157:13	14	TIFFReadDirectory ( tif )
FUNCTION_CALL	157:13	157:34	15	TIFFReadDirectory ( tif )
CALLEE	157:13	157:13	16	TIFFReadDirectory
LEAF_NODE	157:13	157:13	17	TIFFReadDirectory
LEAF_NODE	157:30	157:30	16	(
ARGUMENT	157:31	157:31	16	tif
FIELD	157:31	157:31	17	tif
LEAF_NODE	157:31	157:31	18	tif
LEAF_NODE	157:34	157:34	16	)
LEAF_NODE	157:35	157:35	13	)
STATEMENTS	147:7	157:4	13	
LEAF_NODE	147:7	147:7	14	{
STATEMENTS	148:5	151:5	14	
SIMPLE_DECL	148:5	148:20	15	toff_t offset ; offset = 0 ;
VAR_DECL	148:5	148:12	16	toff_t offset ; offset = 0
TYPE	148:5	148:5	17	toff_t
TYPE_NAME	148:5	148:5	18	toff_t
LEAF_NODE	148:5	148:5	19	toff_t
NAME	148:12	148:12	17	offset
LEAF_NODE	148:12	148:12	18	offset
LEAF_NODE	0:0	0:0	17	;
INIT	148:12	148:12	17	offset = 0
ASSIGN	148:12	148:19	18	offset = 0
LVAL	148:12	148:12	19	offset
NAME	148:12	148:12	20	offset
LEAF_NODE	148:12	148:12	21	offset
ASSIGN_OP	148:18	148:18	19	=
LEAF_NODE	148:18	148:18	20	=
RVAL	148:19	148:19	19	0
FIELD	148:19	148:19	20	0
LEAF_NODE	148:19	148:19	21	0
LEAF_NODE	148:20	148:20	16	;
EXPR_STATEMENT	150:5	150:35	15	tiffinfo ( tif , order , flags , 1 ) ;
EXPR	150:5	150:5	16	tiffinfo ( tif , order , flags , 1 )
FUNCTION_CALL	150:5	150:34	17	tiffinfo ( tif , order , flags , 1 )
CALLEE	150:5	150:5	18	tiffinfo
LEAF_NODE	150:5	150:5	19	tiffinfo
LEAF_NODE	150:13	150:13	18	(
ARGUMENT	150:14	150:14	18	tif
FIELD	150:14	150:14	19	tif
LEAF_NODE	150:14	150:14	20	tif
LEAF_NODE	150:17	150:17	18	,
ARGUMENT	150:19	150:19	18	order
FIELD	150:19	150:19	19	order
LEAF_NODE	150:19	150:19	20	order
LEAF_NODE	150:24	150:24	18	,
ARGUMENT	150:26	150:26	18	flags
FIELD	150:26	150:26	19	flags
LEAF_NODE	150:26	150:26	20	flags
LEAF_NODE	150:31	150:31	18	,
ARGUMENT	150:33	150:33	18	1
FIELD	150:33	150:33	19	1
LEAF_NODE	150:33	150:33	20	1
LEAF_NODE	150:34	150:34	18	)
LEAF_NODE	150:35	150:35	16	;
SELECTION	151:5	152:18	15	
KEYWORD	151:5	151:5	16	if
LEAF_NODE	151:5	151:5	17	if
LEAF_NODE	151:8	151:8	16	(
CONDITION	151:9	151:9	16	TIFFGetField ( tif , TIFFTAG_EXIFIFD , & offset )
EXPR	151:9	151:9	17	TIFFGetField ( tif , TIFFTAG_EXIFIFD , & offset )
FUNCTION_CALL	151:9	152:15	18	TIFFGetField ( tif , TIFFTAG_EXIFIFD , & offset )
CALLEE	151:9	151:9	19	TIFFGetField
LEAF_NODE	151:9	151:9	20	TIFFGetField
LEAF_NODE	151:21	151:21	19	(
ARGUMENT	151:22	151:22	19	tif
FIELD	151:22	151:22	20	tif
LEAF_NODE	151:22	151:22	21	tif
LEAF_NODE	151:25	151:25	19	,
ARGUMENT	151:27	151:27	19	TIFFTAG_EXIFIFD
FIELD	151:27	151:27	20	TIFFTAG_EXIFIFD
LEAF_NODE	151:27	151:27	21	TIFFTAG_EXIFIFD
LEAF_NODE	151:42	151:42	19	,
ARGUMENT	152:8	152:8	19	& offset
UNARY_EXPR	152:8	152:9	20	& offset
UNARY_OPERATOR	152:8	152:8	21	&
LEAF_NODE	152:8	152:8	22	&
FIELD	152:9	152:9	21	offset
LEAF_NODE	152:9	152:9	22	offset
LEAF_NODE	152:15	152:15	19	)
LEAF_NODE	152:16	152:16	16	)
STATEMENTS	152:18	156:5	16	
LEAF_NODE	152:18	152:18	17	{
STATEMENTS	153:6	153:6	17	
SELECTION	153:6	153:46	18	
KEYWORD	153:6	153:6	19	if
LEAF_NODE	153:6	153:6	20	if
LEAF_NODE	153:9	153:9	19	(
CONDITION	153:10	153:10	19	TIFFReadEXIFDirectory ( tif , offset )
EXPR	153:10	153:10	20	TIFFReadEXIFDirectory ( tif , offset )
FUNCTION_CALL	153:10	153:43	21	TIFFReadEXIFDirectory ( tif , offset )
CALLEE	153:10	153:10	22	TIFFReadEXIFDirectory
LEAF_NODE	153:10	153:10	23	TIFFReadEXIFDirectory
LEAF_NODE	153:31	153:31	22	(
ARGUMENT	153:32	153:32	22	tif
FIELD	153:32	153:32	23	tif
LEAF_NODE	153:32	153:32	24	tif
LEAF_NODE	153:35	153:35	22	,
ARGUMENT	153:37	153:37	22	offset
FIELD	153:37	153:37	23	offset
LEAF_NODE	153:37	153:37	24	offset
LEAF_NODE	153:43	153:43	22	)
LEAF_NODE	153:44	153:44	19	)
STATEMENTS	153:46	155:6	19	
LEAF_NODE	153:46	153:46	20	{
STATEMENTS	154:7	154:7	20	
EXPR_STATEMENT	154:7	154:37	21	tiffinfo ( tif , order , flags , 0 ) ;
EXPR	154:7	154:7	22	tiffinfo ( tif , order , flags , 0 )
FUNCTION_CALL	154:7	154:36	23	tiffinfo ( tif , order , flags , 0 )
CALLEE	154:7	154:7	24	tiffinfo
LEAF_NODE	154:7	154:7	25	tiffinfo
LEAF_NODE	154:15	154:15	24	(
ARGUMENT	154:16	154:16	24	tif
FIELD	154:16	154:16	25	tif
LEAF_NODE	154:16	154:16	26	tif
LEAF_NODE	154:19	154:19	24	,
ARGUMENT	154:21	154:21	24	order
FIELD	154:21	154:21	25	order
LEAF_NODE	154:21	154:21	26	order
LEAF_NODE	154:26	154:26	24	,
ARGUMENT	154:28	154:28	24	flags
FIELD	154:28	154:28	25	flags
LEAF_NODE	154:28	154:28	26	flags
LEAF_NODE	154:33	154:33	24	,
ARGUMENT	154:35	154:35	24	0
FIELD	154:35	154:35	25	0
LEAF_NODE	154:35	154:35	26	0
LEAF_NODE	154:36	154:36	24	)
LEAF_NODE	154:37	154:37	22	;
LEAF_NODE	155:6	155:6	20	}
LEAF_NODE	156:5	156:5	17	}
LEAF_NODE	157:4	157:4	14	}
LEAF_NODE	157:36	157:36	12	;
LEAF_NODE	158:3	158:3	11	}
EXPR_STATEMENT	159:3	159:17	9	TIFFClose ( tif ) ;
EXPR	159:3	159:3	10	TIFFClose ( tif )
FUNCTION_CALL	159:3	159:16	11	TIFFClose ( tif )
CALLEE	159:3	159:3	12	TIFFClose
LEAF_NODE	159:3	159:3	13	TIFFClose
LEAF_NODE	159:12	159:12	12	(
ARGUMENT	159:13	159:13	12	tif
FIELD	159:13	159:13	13	tif
LEAF_NODE	159:13	159:13	14	tif
LEAF_NODE	159:16	159:16	12	)
LEAF_NODE	159:17	159:17	10	;
LEAF_NODE	160:2	160:2	8	}
LEAF_NODE	161:1	161:1	5	}
LEAF_NODE	162:1	162:1	3	return
LEAF_NODE	162:8	162:8	3	(
LEAF_NODE	162:9	162:9	3	status
LEAF_NODE	162:15	162:15	3	)
LEAF_NODE	162:16	162:16	3	;
LEAF_NODE	163:0	163:0	2	}
FUNCTION_DEF	184:0	195:0	1	
RETURN_TYPE	184:0	184:7	2	static void
LEAF_NODE	184:0	184:0	3	static
TYPE_NAME	184:7	184:7	3	void
LEAF_NODE	184:7	184:7	4	void
FUNCTION_NAME	185:0	185:0	2	usage
LEAF_NODE	185:0	185:0	3	usage
PARAMETER_LIST	185:5	185:10	2	( void )
LEAF_NODE	185:5	185:5	3	(
PARAMETER_DECL	185:6	185:6	3	void
LEAF_NODE	185:6	185:6	4	void
LEAF_NODE	185:10	185:10	3	)
LEAF_NODE	186:0	186:0	2	{
STATEMENTS	187:1	194:1	2	
SIMPLE_DECL	187:1	187:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	187:1	187:6	4	char [ BUFSIZ ] buf
TYPE	187:1	187:9	5	char [ BUFSIZ ]
TYPE_NAME	187:1	187:1	6	char
LEAF_NODE	187:1	187:1	7	char
TYPE_SUFFIX	187:9	187:16	6	[ BUFSIZ ]
LEAF_NODE	187:9	187:9	7	[
FIELD	187:10	187:10	7	BUFSIZ
LEAF_NODE	187:10	187:10	8	BUFSIZ
LEAF_NODE	187:16	187:16	7	]
NAME	187:6	187:6	5	buf
LEAF_NODE	187:6	187:6	6	buf
LEAF_NODE	187:17	187:17	4	;
SIMPLE_DECL	188:1	188:6	3	int i ;
VAR_DECL	188:1	188:5	4	int i
TYPE	188:1	188:1	5	int
TYPE_NAME	188:1	188:1	6	int
LEAF_NODE	188:1	188:1	7	int
NAME	188:5	188:5	5	i
LEAF_NODE	188:5	188:5	6	i
LEAF_NODE	188:6	188:6	4	;
EXPR_STATEMENT	190:1	190:20	3	setbuf ( stderr , buf ) ;
EXPR	190:1	190:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	190:1	190:19	5	setbuf ( stderr , buf )
CALLEE	190:1	190:1	6	setbuf
LEAF_NODE	190:1	190:1	7	setbuf
LEAF_NODE	190:7	190:7	6	(
ARGUMENT	190:8	190:8	6	stderr
FIELD	190:8	190:8	7	stderr
LEAF_NODE	190:8	190:8	8	stderr
LEAF_NODE	190:14	190:14	6	,
ARGUMENT	190:16	190:16	6	buf
FIELD	190:16	190:16	7	buf
LEAF_NODE	190:16	190:16	8	buf
LEAF_NODE	190:19	190:19	6	)
LEAF_NODE	190:20	190:20	4	;
EXPR_STATEMENT	191:8	191:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	191:8	191:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	191:8	191:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	191:8	191:8	6	fprintf
LEAF_NODE	191:8	191:8	7	fprintf
LEAF_NODE	191:15	191:15	6	(
ARGUMENT	191:16	191:16	6	stderr
FIELD	191:16	191:16	7	stderr
LEAF_NODE	191:16	191:16	8	stderr
LEAF_NODE	191:22	191:22	6	,
ARGUMENT	191:24	191:24	6	"%s\n\n"
FIELD	191:24	191:24	7	"%s\n\n"
LEAF_NODE	191:24	191:24	8	"%s\n\n"
LEAF_NODE	191:32	191:32	6	,
ARGUMENT	191:34	191:34	6	TIFFGetVersion ( )
FUNCTION_CALL	191:34	191:49	7	TIFFGetVersion ( )
CALLEE	191:34	191:34	8	TIFFGetVersion
LEAF_NODE	191:34	191:34	9	TIFFGetVersion
LEAF_NODE	191:48	191:48	8	(
LEAF_NODE	191:49	191:49	8	)
LEAF_NODE	191:50	191:50	6	)
LEAF_NODE	191:51	191:51	4	;
ITERATION	192:1	193:2	3	
KEYWORD	192:1	192:1	4	for
LEAF_NODE	192:1	192:1	5	for
LEAF_NODE	192:5	192:5	4	(
FOR_INIT	192:6	192:11	4	i = 0 ;
EXPR	192:6	192:6	5	i = 0
ASSIGN	192:6	192:10	6	i = 0
LVAL	192:6	192:6	7	i
FIELD	192:6	192:6	8	i
LEAF_NODE	192:6	192:6	9	i
ASSIGN_OP	192:8	192:8	7	=
LEAF_NODE	192:8	192:8	8	=
RVAL	192:10	192:10	7	0
FIELD	192:10	192:10	8	0
LEAF_NODE	192:10	192:10	9	0
LEAF_NODE	192:11	192:11	5	;
CONDITION	192:13	192:13	4	stuff [ i ] != NULL
EXPR	192:13	192:25	5	stuff [ i ] != NULL
FIELD	192:13	192:20	6	stuff [ i ]
LEAF_NODE	192:13	192:13	7	stuff
LEAF_NODE	192:18	192:18	7	[
EXPR	192:19	192:19	7	i
FIELD	192:19	192:19	8	i
LEAF_NODE	192:19	192:19	9	i
LEAF_NODE	192:20	192:20	7	]
EQ_OPERATOR	192:22	192:22	6	!=
LEAF_NODE	192:22	192:22	7	!=
FIELD	192:25	192:25	6	NULL
LEAF_NODE	192:25	192:25	7	NULL
LEAF_NODE	192:29	192:29	4	;
FOR_EXPR	192:31	192:31	4	i ++
EXPR	192:31	192:31	5	i ++
FIELD	192:31	192:32	6	i ++
LEAF_NODE	192:31	192:31	7	i
LEAF_NODE	192:32	192:32	7	++
LEAF_NODE	192:34	192:34	4	)
STATEMENTS	193:2	193:2	4	
EXPR_STATEMENT	193:2	193:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	193:2	193:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	193:2	193:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	193:2	193:2	8	fprintf
LEAF_NODE	193:2	193:2	9	fprintf
LEAF_NODE	193:9	193:9	8	(
ARGUMENT	193:10	193:10	8	stderr
FIELD	193:10	193:10	9	stderr
LEAF_NODE	193:10	193:10	10	stderr
LEAF_NODE	193:16	193:16	8	,
ARGUMENT	193:18	193:18	8	"%s\n"
FIELD	193:18	193:18	9	"%s\n"
LEAF_NODE	193:18	193:18	10	"%s\n"
LEAF_NODE	193:24	193:24	8	,
ARGUMENT	193:26	193:26	8	stuff [ i ]
FIELD	193:26	193:33	9	stuff [ i ]
LEAF_NODE	193:26	193:26	10	stuff
LEAF_NODE	193:31	193:31	10	[
EXPR	193:32	193:32	10	i
FIELD	193:32	193:32	11	i
LEAF_NODE	193:32	193:32	12	i
LEAF_NODE	193:33	193:33	10	]
LEAF_NODE	193:34	193:34	8	)
LEAF_NODE	193:35	193:35	6	;
EXPR_STATEMENT	194:1	194:9	3	exit ( - 1 ) ;
EXPR	194:1	194:1	4	exit ( - 1 )
FUNCTION_CALL	194:1	194:8	5	exit ( - 1 )
CALLEE	194:1	194:1	6	exit
LEAF_NODE	194:1	194:1	7	exit
LEAF_NODE	194:5	194:5	6	(
ARGUMENT	194:6	194:6	6	- 1
UNARY_EXPR	194:6	194:7	7	- 1
UNARY_OPERATOR	194:6	194:6	8	-
LEAF_NODE	194:6	194:6	9	-
FIELD	194:7	194:7	8	1
LEAF_NODE	194:7	194:7	9	1
LEAF_NODE	194:8	194:8	6	)
LEAF_NODE	194:9	194:9	4	;
LEAF_NODE	195:0	195:0	2	}
FUNCTION_DEF	197:0	211:0	1	
RETURN_TYPE	197:0	197:7	2	static void
LEAF_NODE	197:0	197:0	3	static
TYPE_NAME	197:7	197:7	3	void
LEAF_NODE	197:7	197:7	4	void
FUNCTION_NAME	198:0	198:0	2	ShowStrip
LEAF_NODE	198:0	198:0	3	ShowStrip
PARAMETER_LIST	198:9	198:74	2	( tstrip_t strip , unsigned char * pp , uint32 nrow , tsize_t scanline )
LEAF_NODE	198:9	198:9	3	(
PARAMETER_DECL	198:10	198:19	3	tstrip_t strip
TYPE	198:10	198:10	4	tstrip_t
TYPE_NAME	198:10	198:10	5	tstrip_t
LEAF_NODE	198:10	198:10	6	tstrip_t
NAME	198:19	198:19	4	strip
LEAF_NODE	198:19	198:19	5	strip
LEAF_NODE	198:24	198:24	3	,
PARAMETER_DECL	198:26	198:41	3	unsigned char * pp
TYPE	198:26	198:39	4	unsigned char *
TYPE_NAME	198:26	198:35	5	unsigned char
LEAF_NODE	198:26	198:26	6	unsigned
LEAF_NODE	198:35	198:35	6	char
POINTER	198:39	198:39	5	*
LEAF_NODE	198:39	198:39	6	*
NAME	198:41	198:41	4	pp
LEAF_NODE	198:41	198:41	5	pp
LEAF_NODE	198:43	198:43	3	,
PARAMETER_DECL	198:45	198:52	3	uint32 nrow
TYPE	198:45	198:45	4	uint32
TYPE_NAME	198:45	198:45	5	uint32
LEAF_NODE	198:45	198:45	6	uint32
NAME	198:52	198:52	4	nrow
LEAF_NODE	198:52	198:52	5	nrow
LEAF_NODE	198:56	198:56	3	,
PARAMETER_DECL	198:58	198:66	3	tsize_t scanline
TYPE	198:58	198:58	4	tsize_t
TYPE_NAME	198:58	198:58	5	tsize_t
LEAF_NODE	198:58	198:58	6	tsize_t
NAME	198:66	198:66	4	scanline
LEAF_NODE	198:66	198:66	5	scanline
LEAF_NODE	198:74	198:74	3	)
LEAF_NODE	199:0	199:0	2	{
STATEMENTS	200:1	203:1	2	
LEAF_NODE	200:1	200:1	3	register
SIMPLE_DECL	200:10	200:20	3	tsize_t cc ;
VAR_DECL	200:10	200:18	4	tsize_t cc
TYPE	200:10	200:10	5	tsize_t
TYPE_NAME	200:10	200:10	6	tsize_t
LEAF_NODE	200:10	200:10	7	tsize_t
NAME	200:18	200:18	5	cc
LEAF_NODE	200:18	200:18	6	cc
LEAF_NODE	200:20	200:20	4	;
EXPR_STATEMENT	202:1	202:46	3	printf ( "Strip %lu:\n" , ( unsigned long ) strip ) ;
EXPR	202:1	202:1	4	printf ( "Strip %lu:\n" , ( unsigned long ) strip )
FUNCTION_CALL	202:1	202:45	5	printf ( "Strip %lu:\n" , ( unsigned long ) strip )
CALLEE	202:1	202:1	6	printf
LEAF_NODE	202:1	202:1	7	printf
LEAF_NODE	202:7	202:7	6	(
ARGUMENT	202:8	202:8	6	"Strip %lu:\n"
FIELD	202:8	202:8	7	"Strip %lu:\n"
LEAF_NODE	202:8	202:8	8	"Strip %lu:\n"
LEAF_NODE	202:22	202:22	6	,
ARGUMENT	202:24	202:40	6	( unsigned long ) strip
LEAF_NODE	202:24	202:24	7	(
TYPE_NAME	202:25	202:34	7	unsigned long
LEAF_NODE	202:25	202:25	8	unsigned
LEAF_NODE	202:34	202:34	8	long
LEAF_NODE	202:38	202:38	7	)
FIELD	202:40	202:40	7	strip
LEAF_NODE	202:40	202:40	8	strip
LEAF_NODE	202:45	202:45	6	)
LEAF_NODE	202:46	202:46	4	;
ITERATION	203:1	203:20	3	
KEYWORD	203:1	203:1	4	while
LEAF_NODE	203:1	203:1	5	while
LEAF_NODE	203:7	203:7	4	(
CONDITION	203:8	203:8	4	nrow -- > 0
EXPR	203:8	203:17	5	nrow -- > 0
FIELD	203:8	203:12	6	nrow --
LEAF_NODE	203:8	203:8	7	nrow
LEAF_NODE	203:12	203:12	7	--
REL_OPERATOR	203:15	203:15	6	>
LEAF_NODE	203:15	203:15	7	>
FIELD	203:17	203:17	6	0
LEAF_NODE	203:17	203:17	7	0
LEAF_NODE	203:18	203:18	4	)
STATEMENTS	203:20	210:1	4	
LEAF_NODE	203:20	203:20	5	{
STATEMENTS	204:2	209:2	5	
ITERATION	204:2	204:36	6	
KEYWORD	204:2	204:2	7	for
LEAF_NODE	204:2	204:2	8	for
LEAF_NODE	204:6	204:6	7	(
FOR_INIT	204:7	204:13	7	cc = 0 ;
EXPR	204:7	204:7	8	cc = 0
ASSIGN	204:7	204:12	9	cc = 0
LVAL	204:7	204:7	10	cc
FIELD	204:7	204:7	11	cc
LEAF_NODE	204:7	204:7	12	cc
ASSIGN_OP	204:10	204:10	10	=
LEAF_NODE	204:10	204:10	11	=
RVAL	204:12	204:12	10	0
FIELD	204:12	204:12	11	0
LEAF_NODE	204:12	204:12	12	0
LEAF_NODE	204:13	204:13	8	;
CONDITION	204:15	204:15	7	cc < scanline
EXPR	204:15	204:20	8	cc < scanline
FIELD	204:15	204:15	9	cc
LEAF_NODE	204:15	204:15	10	cc
REL_OPERATOR	204:18	204:18	9	<
LEAF_NODE	204:18	204:18	10	<
FIELD	204:20	204:20	9	scanline
LEAF_NODE	204:20	204:20	10	scanline
LEAF_NODE	204:28	204:28	7	;
FOR_EXPR	204:30	204:30	7	cc ++
EXPR	204:30	204:30	8	cc ++
FIELD	204:30	204:32	9	cc ++
LEAF_NODE	204:30	204:30	10	cc
LEAF_NODE	204:32	204:32	10	++
LEAF_NODE	204:34	204:34	7	)
STATEMENTS	204:36	208:2	7	
LEAF_NODE	204:36	204:36	8	{
STATEMENTS	205:3	206:3	8	
EXPR_STATEMENT	205:3	205:25	9	printf ( " %02x" , * pp ++ ) ;
EXPR	205:3	205:3	10	printf ( " %02x" , * pp ++ )
FUNCTION_CALL	205:3	205:24	11	printf ( " %02x" , * pp ++ )
CALLEE	205:3	205:3	12	printf
LEAF_NODE	205:3	205:3	13	printf
LEAF_NODE	205:9	205:9	12	(
ARGUMENT	205:10	205:10	12	" %02x"
FIELD	205:10	205:10	13	" %02x"
LEAF_NODE	205:10	205:10	14	" %02x"
LEAF_NODE	205:17	205:17	12	,
ARGUMENT	205:19	205:19	12	* pp ++
UNARY_EXPR	205:19	205:20	13	* pp ++
UNARY_OPERATOR	205:19	205:19	14	*
LEAF_NODE	205:19	205:19	15	*
FIELD	205:20	205:22	14	pp ++
LEAF_NODE	205:20	205:20	15	pp
LEAF_NODE	205:22	205:22	15	++
LEAF_NODE	205:24	205:24	12	)
LEAF_NODE	205:25	205:25	10	;
SELECTION	206:3	207:4	9	
KEYWORD	206:3	206:3	10	if
LEAF_NODE	206:3	206:3	11	if
LEAF_NODE	206:6	206:6	10	(
CONDITION	206:7	206:7	10	( ( cc + 1 ) % 24 ) == 0
EXPR	206:7	206:24	11	( ( cc + 1 ) % 24 ) == 0
LEAF_NODE	206:7	206:7	12	(
LEAF_NODE	206:8	206:8	12	(
FIELD	206:9	206:9	12	cc
LEAF_NODE	206:9	206:9	13	cc
LEAF_NODE	206:11	206:11	12	+
FIELD	206:12	206:12	12	1
LEAF_NODE	206:12	206:12	13	1
LEAF_NODE	206:13	206:13	12	)
LEAF_NODE	206:15	206:15	12	%
FIELD	206:17	206:17	12	24
LEAF_NODE	206:17	206:17	13	24
LEAF_NODE	206:19	206:19	12	)
EQ_OPERATOR	206:21	206:21	12	==
LEAF_NODE	206:21	206:21	13	==
FIELD	206:24	206:24	12	0
LEAF_NODE	206:24	206:24	13	0
LEAF_NODE	206:25	206:25	10	)
STATEMENTS	207:4	207:4	10	
EXPR_STATEMENT	207:4	207:17	11	putchar ( '\n' ) ;
EXPR	207:4	207:4	12	putchar ( '\n' )
FUNCTION_CALL	207:4	207:16	13	putchar ( '\n' )
CALLEE	207:4	207:4	14	putchar
LEAF_NODE	207:4	207:4	15	putchar
LEAF_NODE	207:11	207:11	14	(
ARGUMENT	207:12	207:12	14	'\n'
FIELD	207:12	207:12	15	'\n'
LEAF_NODE	207:12	207:12	16	'\n'
LEAF_NODE	207:16	207:16	14	)
LEAF_NODE	207:17	207:17	12	;
LEAF_NODE	208:2	208:2	8	}
EXPR_STATEMENT	209:2	209:15	6	putchar ( '\n' ) ;
EXPR	209:2	209:2	7	putchar ( '\n' )
FUNCTION_CALL	209:2	209:14	8	putchar ( '\n' )
CALLEE	209:2	209:2	9	putchar
LEAF_NODE	209:2	209:2	10	putchar
LEAF_NODE	209:9	209:9	9	(
ARGUMENT	209:10	209:10	9	'\n'
FIELD	209:10	209:10	10	'\n'
LEAF_NODE	209:10	209:10	11	'\n'
LEAF_NODE	209:14	209:14	9	)
LEAF_NODE	209:15	209:15	7	;
LEAF_NODE	210:1	210:1	5	}
LEAF_NODE	211:0	211:0	2	}
FUNCTION_DEF	213:0	238:0	1	
RETURN_TYPE	213:0	213:0	2	void
TYPE_NAME	213:0	213:0	3	void
LEAF_NODE	213:0	213:0	4	void
FUNCTION_NAME	214:0	214:0	2	TIFFReadContigStripData
LEAF_NODE	214:0	214:0	3	TIFFReadContigStripData
PARAMETER_LIST	214:23	214:33	2	( TIFF * tif )
LEAF_NODE	214:23	214:23	3	(
PARAMETER_DECL	214:24	214:30	3	TIFF * tif
TYPE	214:24	214:28	4	TIFF *
TYPE_NAME	214:24	214:24	5	TIFF
LEAF_NODE	214:24	214:24	6	TIFF
POINTER	214:28	214:28	5	*
LEAF_NODE	214:28	214:28	6	*
NAME	214:30	214:30	4	tif
LEAF_NODE	214:30	214:30	5	tif
LEAF_NODE	214:33	214:33	3	)
LEAF_NODE	215:0	215:0	2	{
STATEMENTS	216:1	220:1	2	
SIMPLE_DECL	216:1	216:19	3	unsigned char * buf ;
VAR_DECL	216:1	216:16	4	unsigned char * buf
TYPE	216:1	216:15	5	unsigned char *
TYPE_NAME	216:1	216:10	6	unsigned char
LEAF_NODE	216:1	216:1	7	unsigned
LEAF_NODE	216:10	216:10	7	char
POINTER	216:15	216:15	6	*
LEAF_NODE	216:15	216:15	7	*
NAME	216:16	216:16	5	buf
LEAF_NODE	216:16	216:16	6	buf
LEAF_NODE	216:19	216:19	4	;
SIMPLE_DECL	217:1	217:41	3	tsize_t scanline ; scanline = TIFFScanlineSize ( tif ) ;
VAR_DECL	217:1	217:9	4	tsize_t scanline ; scanline = TIFFScanlineSize ( tif )
TYPE	217:1	217:1	5	tsize_t
TYPE_NAME	217:1	217:1	6	tsize_t
LEAF_NODE	217:1	217:1	7	tsize_t
NAME	217:9	217:9	5	scanline
LEAF_NODE	217:9	217:9	6	scanline
LEAF_NODE	0:0	0:0	5	;
INIT	217:9	217:9	5	scanline = TIFFScanlineSize ( tif )
ASSIGN	217:9	217:20	6	scanline = TIFFScanlineSize ( tif )
LVAL	217:9	217:9	7	scanline
NAME	217:9	217:9	8	scanline
LEAF_NODE	217:9	217:9	9	scanline
ASSIGN_OP	217:18	217:18	7	=
LEAF_NODE	217:18	217:18	8	=
RVAL	217:20	217:20	7	TIFFScanlineSize ( tif )
FUNCTION_CALL	217:20	217:40	8	TIFFScanlineSize ( tif )
CALLEE	217:20	217:20	9	TIFFScanlineSize
LEAF_NODE	217:20	217:20	10	TIFFScanlineSize
LEAF_NODE	217:36	217:36	9	(
ARGUMENT	217:37	217:37	9	tif
FIELD	217:37	217:37	10	tif
LEAF_NODE	217:37	217:37	11	tif
LEAF_NODE	217:40	217:40	9	)
LEAF_NODE	217:41	217:41	4	;
EXPR_STATEMENT	219:1	219:55	3	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) ) ;
EXPR	219:1	219:1	4	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
ASSIGN	219:1	219:7	5	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
LVAL	219:1	219:1	6	buf
FIELD	219:1	219:1	7	buf
LEAF_NODE	219:1	219:1	8	buf
ASSIGN_OP	219:5	219:5	6	=
LEAF_NODE	219:5	219:5	7	=
RVAL	219:7	219:24	6	( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
LEAF_NODE	219:7	219:7	7	(
TYPE_NAME	219:8	219:17	7	unsigned char
LEAF_NODE	219:8	219:8	8	unsigned
LEAF_NODE	219:17	219:17	8	char
LEAF_NODE	219:22	219:22	7	*
LEAF_NODE	219:23	219:23	7	)
FUNCTION_CALL	219:24	219:54	7	_TIFFmalloc ( TIFFStripSize ( tif ) )
CALLEE	219:24	219:24	8	_TIFFmalloc
LEAF_NODE	219:24	219:24	9	_TIFFmalloc
LEAF_NODE	219:35	219:35	8	(
ARGUMENT	219:36	219:36	8	TIFFStripSize ( tif )
FUNCTION_CALL	219:36	219:53	9	TIFFStripSize ( tif )
CALLEE	219:36	219:36	10	TIFFStripSize
LEAF_NODE	219:36	219:36	11	TIFFStripSize
LEAF_NODE	219:49	219:49	10	(
ARGUMENT	219:50	219:50	10	tif
FIELD	219:50	219:50	11	tif
LEAF_NODE	219:50	219:50	12	tif
LEAF_NODE	219:53	219:53	10	)
LEAF_NODE	219:54	219:54	8	)
LEAF_NODE	219:55	219:55	4	;
SELECTION	220:1	220:10	3	
KEYWORD	220:1	220:1	4	if
LEAF_NODE	220:1	220:1	5	if
LEAF_NODE	220:4	220:4	4	(
CONDITION	220:5	220:5	4	buf
EXPR	220:5	220:5	5	buf
FIELD	220:5	220:5	6	buf
LEAF_NODE	220:5	220:5	7	buf
LEAF_NODE	220:8	220:8	4	)
STATEMENTS	220:10	237:1	4	
LEAF_NODE	220:10	220:10	5	{
STATEMENTS	221:2	236:2	5	
SIMPLE_DECL	221:2	221:17	6	uint32 row , uint32 h ; h = 0 ;
INIT_DECL_LIST	221:2	221:2	7	uint32 row , uint32 h ; h = 0
VAR_DECL	221:2	221:9	8	uint32 row
TYPE	221:2	221:2	9	uint32
TYPE_NAME	221:2	221:2	10	uint32
LEAF_NODE	221:2	221:2	11	uint32
NAME	221:9	221:9	9	row
LEAF_NODE	221:9	221:9	10	row
LEAF_NODE	221:12	221:12	8	,
VAR_DECL	221:2	221:14	8	uint32 h ; h = 0
TYPE	221:2	221:2	9	uint32
TYPE_NAME	221:2	221:2	10	uint32
LEAF_NODE	221:2	221:2	11	uint32
NAME	221:14	221:14	9	h
LEAF_NODE	221:14	221:14	10	h
LEAF_NODE	0:0	0:0	9	;
INIT	221:14	221:14	9	h = 0
ASSIGN	221:14	221:16	10	h = 0
LVAL	221:14	221:14	11	h
NAME	221:14	221:14	12	h
LEAF_NODE	221:14	221:14	13	h
ASSIGN_OP	221:15	221:15	11	=
LEAF_NODE	221:15	221:15	12	=
RVAL	221:16	221:16	11	0
FIELD	221:16	221:16	12	0
LEAF_NODE	221:16	221:16	13	0
LEAF_NODE	221:17	221:17	7	;
SIMPLE_DECL	222:2	222:34	6	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	222:2	222:9	7	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	222:2	222:2	8	uint32
TYPE_NAME	222:2	222:2	9	uint32
LEAF_NODE	222:2	222:2	10	uint32
NAME	222:9	222:9	8	rowsperstrip
LEAF_NODE	222:9	222:9	9	rowsperstrip
LEAF_NODE	0:0	0:0	8	;
INIT	222:9	222:9	8	rowsperstrip = ( uint32 ) - 1
ASSIGN	222:9	222:24	9	rowsperstrip = ( uint32 ) - 1
LVAL	222:9	222:9	10	rowsperstrip
NAME	222:9	222:9	11	rowsperstrip
LEAF_NODE	222:9	222:9	12	rowsperstrip
ASSIGN_OP	222:22	222:22	10	=
LEAF_NODE	222:22	222:22	11	=
RVAL	222:24	222:32	10	( uint32 ) - 1
LEAF_NODE	222:24	222:24	11	(
TYPE_NAME	222:25	222:25	11	uint32
LEAF_NODE	222:25	222:25	12	uint32
LEAF_NODE	222:31	222:31	11	)
UNARY_EXPR	222:32	222:33	11	- 1
UNARY_OPERATOR	222:32	222:32	12	-
LEAF_NODE	222:32	222:32	13	-
FIELD	222:33	222:33	12	1
LEAF_NODE	222:33	222:33	13	1
LEAF_NODE	222:34	222:34	7	;
EXPR_STATEMENT	224:2	224:44	6	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	224:2	224:2	7	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	224:2	224:43	8	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
CALLEE	224:2	224:2	9	TIFFGetField
LEAF_NODE	224:2	224:2	10	TIFFGetField
LEAF_NODE	224:14	224:14	9	(
ARGUMENT	224:15	224:15	9	tif
FIELD	224:15	224:15	10	tif
LEAF_NODE	224:15	224:15	11	tif
LEAF_NODE	224:18	224:18	9	,
ARGUMENT	224:20	224:20	9	TIFFTAG_IMAGELENGTH
FIELD	224:20	224:20	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	224:20	224:20	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	224:39	224:39	9	,
ARGUMENT	224:41	224:41	9	& h
UNARY_EXPR	224:41	224:42	10	& h
UNARY_OPERATOR	224:41	224:41	11	&
LEAF_NODE	224:41	224:41	12	&
FIELD	224:42	224:42	11	h
LEAF_NODE	224:42	224:42	12	h
LEAF_NODE	224:43	224:43	9	)
LEAF_NODE	224:44	224:44	7	;
EXPR_STATEMENT	225:2	225:56	6	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	225:2	225:2	7	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
FUNCTION_CALL	225:2	225:55	8	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	225:2	225:2	9	TIFFGetField
LEAF_NODE	225:2	225:2	10	TIFFGetField
LEAF_NODE	225:14	225:14	9	(
ARGUMENT	225:15	225:15	9	tif
FIELD	225:15	225:15	10	tif
LEAF_NODE	225:15	225:15	11	tif
LEAF_NODE	225:18	225:18	9	,
ARGUMENT	225:20	225:20	9	TIFFTAG_ROWSPERSTRIP
FIELD	225:20	225:20	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	225:20	225:20	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	225:40	225:40	9	,
ARGUMENT	225:42	225:42	9	& rowsperstrip
UNARY_EXPR	225:42	225:43	10	& rowsperstrip
UNARY_OPERATOR	225:42	225:42	11	&
LEAF_NODE	225:42	225:42	12	&
FIELD	225:43	225:43	11	rowsperstrip
LEAF_NODE	225:43	225:43	12	rowsperstrip
LEAF_NODE	225:55	225:55	9	)
LEAF_NODE	225:56	225:56	7	;
ITERATION	226:2	226:46	6	
KEYWORD	226:2	226:2	7	for
LEAF_NODE	226:2	226:2	8	for
LEAF_NODE	226:6	226:6	7	(
FOR_INIT	226:7	226:14	7	row = 0 ;
EXPR	226:7	226:7	8	row = 0
ASSIGN	226:7	226:13	9	row = 0
LVAL	226:7	226:7	10	row
FIELD	226:7	226:7	11	row
LEAF_NODE	226:7	226:7	12	row
ASSIGN_OP	226:11	226:11	10	=
LEAF_NODE	226:11	226:11	11	=
RVAL	226:13	226:13	10	0
FIELD	226:13	226:13	11	0
LEAF_NODE	226:13	226:13	12	0
LEAF_NODE	226:14	226:14	8	;
CONDITION	226:16	226:16	7	row < h
EXPR	226:16	226:22	8	row < h
FIELD	226:16	226:16	9	row
LEAF_NODE	226:16	226:16	10	row
REL_OPERATOR	226:20	226:20	9	<
LEAF_NODE	226:20	226:20	10	<
FIELD	226:22	226:22	9	h
LEAF_NODE	226:22	226:22	10	h
LEAF_NODE	226:23	226:23	7	;
FOR_EXPR	226:25	226:25	7	row += rowsperstrip
EXPR	226:25	226:25	8	row += rowsperstrip
ASSIGN	226:25	226:32	9	row += rowsperstrip
LVAL	226:25	226:25	10	row
FIELD	226:25	226:25	11	row
LEAF_NODE	226:25	226:25	12	row
ASSIGN_OP	226:29	226:29	10	+=
LEAF_NODE	226:29	226:29	11	+=
RVAL	226:32	226:32	10	rowsperstrip
FIELD	226:32	226:32	11	rowsperstrip
LEAF_NODE	226:32	226:32	12	rowsperstrip
LEAF_NODE	226:44	226:44	7	)
STATEMENTS	226:46	235:2	7	
LEAF_NODE	226:46	226:46	8	{
STATEMENTS	227:3	233:5	8	
SIMPLE_DECL	227:3	228:28	9	uint32 nrow ; nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip ) ;
VAR_DECL	227:3	227:10	10	uint32 nrow ; nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
TYPE	227:3	227:3	11	uint32
TYPE_NAME	227:3	227:3	12	uint32
LEAF_NODE	227:3	227:3	13	uint32
NAME	227:10	227:10	11	nrow
LEAF_NODE	227:10	227:10	12	nrow
LEAF_NODE	0:0	0:0	11	;
INIT	227:10	227:10	11	nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
ASSIGN	227:10	227:17	12	nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
LVAL	227:10	227:10	13	nrow
NAME	227:10	227:10	14	nrow
LEAF_NODE	227:10	227:10	15	nrow
ASSIGN_OP	227:15	227:15	13	=
LEAF_NODE	227:15	227:15	14	=
RVAL	227:17	228:27	13	( row + rowsperstrip > h ? h - row : rowsperstrip )
LEAF_NODE	227:17	227:17	14	(
COND_EXPR	227:18	228:15	14	row + rowsperstrip > h ? h - row : rowsperstrip
CONDITION	227:18	227:37	15	row + rowsperstrip > h
FIELD	227:18	227:18	16	row
LEAF_NODE	227:18	227:18	17	row
LEAF_NODE	227:21	227:21	16	+
FIELD	227:22	227:22	16	rowsperstrip
LEAF_NODE	227:22	227:22	17	rowsperstrip
REL_OPERATOR	227:35	227:35	16	>
LEAF_NODE	227:35	227:35	17	>
FIELD	227:37	227:37	16	h
LEAF_NODE	227:37	227:37	17	h
LEAF_NODE	227:39	227:39	15	?
EXPR	228:7	228:9	15	h - row
FIELD	228:7	228:7	16	h
LEAF_NODE	228:7	228:7	17	h
LEAF_NODE	228:8	228:8	16	-
FIELD	228:9	228:9	16	row
LEAF_NODE	228:9	228:9	17	row
LEAF_NODE	228:13	228:13	15	:
FIELD	228:15	228:15	15	rowsperstrip
LEAF_NODE	228:15	228:15	16	rowsperstrip
LEAF_NODE	228:27	228:27	14	)
LEAF_NODE	228:28	228:28	10	;
SIMPLE_DECL	229:3	229:49	9	tstrip_t strip ; strip = TIFFComputeStrip ( tif , row , 0 ) ;
VAR_DECL	229:3	229:12	10	tstrip_t strip ; strip = TIFFComputeStrip ( tif , row , 0 )
TYPE	229:3	229:3	11	tstrip_t
TYPE_NAME	229:3	229:3	12	tstrip_t
LEAF_NODE	229:3	229:3	13	tstrip_t
NAME	229:12	229:12	11	strip
LEAF_NODE	229:12	229:12	12	strip
LEAF_NODE	0:0	0:0	11	;
INIT	229:12	229:12	11	strip = TIFFComputeStrip ( tif , row , 0 )
ASSIGN	229:12	229:20	12	strip = TIFFComputeStrip ( tif , row , 0 )
LVAL	229:12	229:12	13	strip
NAME	229:12	229:12	14	strip
LEAF_NODE	229:12	229:12	15	strip
ASSIGN_OP	229:18	229:18	13	=
LEAF_NODE	229:18	229:18	14	=
RVAL	229:20	229:20	13	TIFFComputeStrip ( tif , row , 0 )
FUNCTION_CALL	229:20	229:48	14	TIFFComputeStrip ( tif , row , 0 )
CALLEE	229:20	229:20	15	TIFFComputeStrip
LEAF_NODE	229:20	229:20	16	TIFFComputeStrip
LEAF_NODE	229:36	229:36	15	(
ARGUMENT	229:37	229:37	15	tif
FIELD	229:37	229:37	16	tif
LEAF_NODE	229:37	229:37	17	tif
LEAF_NODE	229:40	229:40	15	,
ARGUMENT	229:42	229:42	15	row
FIELD	229:42	229:42	16	row
LEAF_NODE	229:42	229:42	17	row
LEAF_NODE	229:45	229:45	15	,
ARGUMENT	229:47	229:47	15	0
FIELD	229:47	229:47	16	0
LEAF_NODE	229:47	229:47	17	0
LEAF_NODE	229:48	229:48	15	)
LEAF_NODE	229:49	229:49	10	;
SELECTION	230:3	230:65	9	
KEYWORD	230:3	230:3	10	if
LEAF_NODE	230:3	230:3	11	if
LEAF_NODE	230:6	230:6	10	(
CONDITION	230:7	230:7	10	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline ) < 0
EXPR	230:7	230:62	11	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline ) < 0
FUNCTION_CALL	230:7	230:58	12	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline )
CALLEE	230:7	230:7	13	TIFFReadEncodedStrip
LEAF_NODE	230:7	230:7	14	TIFFReadEncodedStrip
LEAF_NODE	230:27	230:27	13	(
ARGUMENT	230:28	230:28	13	tif
FIELD	230:28	230:28	14	tif
LEAF_NODE	230:28	230:28	15	tif
LEAF_NODE	230:31	230:31	13	,
ARGUMENT	230:33	230:33	13	strip
FIELD	230:33	230:33	14	strip
LEAF_NODE	230:33	230:33	15	strip
LEAF_NODE	230:38	230:38	13	,
ARGUMENT	230:40	230:40	13	buf
FIELD	230:40	230:40	14	buf
LEAF_NODE	230:40	230:40	15	buf
LEAF_NODE	230:43	230:43	13	,
ARGUMENT	230:45	230:50	13	nrow * scanline
FIELD	230:45	230:45	14	nrow
LEAF_NODE	230:45	230:45	15	nrow
LEAF_NODE	230:49	230:49	14	*
FIELD	230:50	230:50	14	scanline
LEAF_NODE	230:50	230:50	15	scanline
LEAF_NODE	230:58	230:58	13	)
REL_OPERATOR	230:60	230:60	12	<
LEAF_NODE	230:60	230:60	13	<
FIELD	230:62	230:62	12	0
LEAF_NODE	230:62	230:62	13	0
LEAF_NODE	230:63	230:63	10	)
STATEMENTS	230:65	233:3	10	
LEAF_NODE	230:65	230:65	11	{
STATEMENTS	231:4	231:4	11	
SELECTION	231:4	232:5	12	
KEYWORD	231:4	231:4	13	if
LEAF_NODE	231:4	231:4	14	if
LEAF_NODE	231:7	231:7	13	(
CONDITION	231:8	231:8	13	stoponerr
EXPR	231:8	231:8	14	stoponerr
FIELD	231:8	231:8	15	stoponerr
LEAF_NODE	231:8	231:8	16	stoponerr
LEAF_NODE	231:17	231:17	13	)
STATEMENTS	232:5	232:5	13	
JUMP_STATEMENT	232:5	232:10	14	break DESTINATION ;
KEYWORD	232:5	232:5	15	break
LEAF_NODE	232:5	232:5	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	232:10	232:10	15	;
LEAF_NODE	233:3	233:3	11	}
SELECTION	233:5	233:10	9	
KEYWORD	233:5	233:5	10	else
LEAF_NODE	233:5	233:5	11	else
STATEMENTS	233:10	233:10	10	
SELECTION	233:10	234:4	11	
KEYWORD	233:10	233:10	12	if
LEAF_NODE	233:10	233:10	13	if
LEAF_NODE	233:13	233:13	12	(
CONDITION	233:14	233:14	12	showdata
EXPR	233:14	233:14	13	showdata
FIELD	233:14	233:14	14	showdata
LEAF_NODE	233:14	233:14	15	showdata
LEAF_NODE	233:22	233:22	12	)
STATEMENTS	234:4	234:4	12	
EXPR_STATEMENT	234:4	234:41	13	ShowStrip ( strip , buf , nrow , scanline ) ;
EXPR	234:4	234:4	14	ShowStrip ( strip , buf , nrow , scanline )
FUNCTION_CALL	234:4	234:40	15	ShowStrip ( strip , buf , nrow , scanline )
CALLEE	234:4	234:4	16	ShowStrip
LEAF_NODE	234:4	234:4	17	ShowStrip
LEAF_NODE	234:13	234:13	16	(
ARGUMENT	234:14	234:14	16	strip
FIELD	234:14	234:14	17	strip
LEAF_NODE	234:14	234:14	18	strip
LEAF_NODE	234:19	234:19	16	,
ARGUMENT	234:21	234:21	16	buf
FIELD	234:21	234:21	17	buf
LEAF_NODE	234:21	234:21	18	buf
LEAF_NODE	234:24	234:24	16	,
ARGUMENT	234:26	234:26	16	nrow
FIELD	234:26	234:26	17	nrow
LEAF_NODE	234:26	234:26	18	nrow
LEAF_NODE	234:30	234:30	16	,
ARGUMENT	234:32	234:32	16	scanline
FIELD	234:32	234:32	17	scanline
LEAF_NODE	234:32	234:32	18	scanline
LEAF_NODE	234:40	234:40	16	)
LEAF_NODE	234:41	234:41	14	;
LEAF_NODE	235:2	235:2	8	}
EXPR_STATEMENT	236:2	236:16	6	_TIFFfree ( buf ) ;
EXPR	236:2	236:2	7	_TIFFfree ( buf )
FUNCTION_CALL	236:2	236:15	8	_TIFFfree ( buf )
CALLEE	236:2	236:2	9	_TIFFfree
LEAF_NODE	236:2	236:2	10	_TIFFfree
LEAF_NODE	236:11	236:11	9	(
ARGUMENT	236:12	236:12	9	buf
FIELD	236:12	236:12	10	buf
LEAF_NODE	236:12	236:12	11	buf
LEAF_NODE	236:15	236:15	9	)
LEAF_NODE	236:16	236:16	7	;
LEAF_NODE	237:1	237:1	5	}
LEAF_NODE	238:0	238:0	2	}
FUNCTION_DEF	240:0	269:0	1	
RETURN_TYPE	240:0	240:0	2	void
TYPE_NAME	240:0	240:0	3	void
LEAF_NODE	240:0	240:0	4	void
FUNCTION_NAME	241:0	241:0	2	TIFFReadSeparateStripData
LEAF_NODE	241:0	241:0	3	TIFFReadSeparateStripData
PARAMETER_LIST	241:25	241:35	2	( TIFF * tif )
LEAF_NODE	241:25	241:25	3	(
PARAMETER_DECL	241:26	241:32	3	TIFF * tif
TYPE	241:26	241:30	4	TIFF *
TYPE_NAME	241:26	241:26	5	TIFF
LEAF_NODE	241:26	241:26	6	TIFF
POINTER	241:30	241:30	5	*
LEAF_NODE	241:30	241:30	6	*
NAME	241:32	241:32	4	tif
LEAF_NODE	241:32	241:32	5	tif
LEAF_NODE	241:35	241:35	3	)
LEAF_NODE	242:0	242:0	2	{
STATEMENTS	243:1	247:1	2	
SIMPLE_DECL	243:1	243:19	3	unsigned char * buf ;
VAR_DECL	243:1	243:16	4	unsigned char * buf
TYPE	243:1	243:15	5	unsigned char *
TYPE_NAME	243:1	243:10	6	unsigned char
LEAF_NODE	243:1	243:1	7	unsigned
LEAF_NODE	243:10	243:10	7	char
POINTER	243:15	243:15	6	*
LEAF_NODE	243:15	243:15	7	*
NAME	243:16	243:16	5	buf
LEAF_NODE	243:16	243:16	6	buf
LEAF_NODE	243:19	243:19	4	;
SIMPLE_DECL	244:1	244:41	3	tsize_t scanline ; scanline = TIFFScanlineSize ( tif ) ;
VAR_DECL	244:1	244:9	4	tsize_t scanline ; scanline = TIFFScanlineSize ( tif )
TYPE	244:1	244:1	5	tsize_t
TYPE_NAME	244:1	244:1	6	tsize_t
LEAF_NODE	244:1	244:1	7	tsize_t
NAME	244:9	244:9	5	scanline
LEAF_NODE	244:9	244:9	6	scanline
LEAF_NODE	0:0	0:0	5	;
INIT	244:9	244:9	5	scanline = TIFFScanlineSize ( tif )
ASSIGN	244:9	244:20	6	scanline = TIFFScanlineSize ( tif )
LVAL	244:9	244:9	7	scanline
NAME	244:9	244:9	8	scanline
LEAF_NODE	244:9	244:9	9	scanline
ASSIGN_OP	244:18	244:18	7	=
LEAF_NODE	244:18	244:18	8	=
RVAL	244:20	244:20	7	TIFFScanlineSize ( tif )
FUNCTION_CALL	244:20	244:40	8	TIFFScanlineSize ( tif )
CALLEE	244:20	244:20	9	TIFFScanlineSize
LEAF_NODE	244:20	244:20	10	TIFFScanlineSize
LEAF_NODE	244:36	244:36	9	(
ARGUMENT	244:37	244:37	9	tif
FIELD	244:37	244:37	10	tif
LEAF_NODE	244:37	244:37	11	tif
LEAF_NODE	244:40	244:40	9	)
LEAF_NODE	244:41	244:41	4	;
EXPR_STATEMENT	246:1	246:55	3	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) ) ;
EXPR	246:1	246:1	4	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
ASSIGN	246:1	246:7	5	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
LVAL	246:1	246:1	6	buf
FIELD	246:1	246:1	7	buf
LEAF_NODE	246:1	246:1	8	buf
ASSIGN_OP	246:5	246:5	6	=
LEAF_NODE	246:5	246:5	7	=
RVAL	246:7	246:24	6	( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
LEAF_NODE	246:7	246:7	7	(
TYPE_NAME	246:8	246:17	7	unsigned char
LEAF_NODE	246:8	246:8	8	unsigned
LEAF_NODE	246:17	246:17	8	char
LEAF_NODE	246:22	246:22	7	*
LEAF_NODE	246:23	246:23	7	)
FUNCTION_CALL	246:24	246:54	7	_TIFFmalloc ( TIFFStripSize ( tif ) )
CALLEE	246:24	246:24	8	_TIFFmalloc
LEAF_NODE	246:24	246:24	9	_TIFFmalloc
LEAF_NODE	246:35	246:35	8	(
ARGUMENT	246:36	246:36	8	TIFFStripSize ( tif )
FUNCTION_CALL	246:36	246:53	9	TIFFStripSize ( tif )
CALLEE	246:36	246:36	10	TIFFStripSize
LEAF_NODE	246:36	246:36	11	TIFFStripSize
LEAF_NODE	246:49	246:49	10	(
ARGUMENT	246:50	246:50	10	tif
FIELD	246:50	246:50	11	tif
LEAF_NODE	246:50	246:50	12	tif
LEAF_NODE	246:53	246:53	10	)
LEAF_NODE	246:54	246:54	8	)
LEAF_NODE	246:55	246:55	4	;
SELECTION	247:1	247:10	3	
KEYWORD	247:1	247:1	4	if
LEAF_NODE	247:1	247:1	5	if
LEAF_NODE	247:4	247:4	4	(
CONDITION	247:5	247:5	4	buf
EXPR	247:5	247:5	5	buf
FIELD	247:5	247:5	6	buf
LEAF_NODE	247:5	247:5	7	buf
LEAF_NODE	247:8	247:8	4	)
STATEMENTS	247:10	268:1	4	
LEAF_NODE	247:10	247:10	5	{
STATEMENTS	248:2	267:2	5	
SIMPLE_DECL	248:2	248:17	6	uint32 row , uint32 h ; h = 0 ;
INIT_DECL_LIST	248:2	248:2	7	uint32 row , uint32 h ; h = 0
VAR_DECL	248:2	248:9	8	uint32 row
TYPE	248:2	248:2	9	uint32
TYPE_NAME	248:2	248:2	10	uint32
LEAF_NODE	248:2	248:2	11	uint32
NAME	248:9	248:9	9	row
LEAF_NODE	248:9	248:9	10	row
LEAF_NODE	248:12	248:12	8	,
VAR_DECL	248:2	248:14	8	uint32 h ; h = 0
TYPE	248:2	248:2	9	uint32
TYPE_NAME	248:2	248:2	10	uint32
LEAF_NODE	248:2	248:2	11	uint32
NAME	248:14	248:14	9	h
LEAF_NODE	248:14	248:14	10	h
LEAF_NODE	0:0	0:0	9	;
INIT	248:14	248:14	9	h = 0
ASSIGN	248:14	248:16	10	h = 0
LVAL	248:14	248:14	11	h
NAME	248:14	248:14	12	h
LEAF_NODE	248:14	248:14	13	h
ASSIGN_OP	248:15	248:15	11	=
LEAF_NODE	248:15	248:15	12	=
RVAL	248:16	248:16	11	0
FIELD	248:16	248:16	12	0
LEAF_NODE	248:16	248:16	13	0
LEAF_NODE	248:17	248:17	7	;
SIMPLE_DECL	249:2	249:34	6	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	249:2	249:9	7	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	249:2	249:2	8	uint32
TYPE_NAME	249:2	249:2	9	uint32
LEAF_NODE	249:2	249:2	10	uint32
NAME	249:9	249:9	8	rowsperstrip
LEAF_NODE	249:9	249:9	9	rowsperstrip
LEAF_NODE	0:0	0:0	8	;
INIT	249:9	249:9	8	rowsperstrip = ( uint32 ) - 1
ASSIGN	249:9	249:24	9	rowsperstrip = ( uint32 ) - 1
LVAL	249:9	249:9	10	rowsperstrip
NAME	249:9	249:9	11	rowsperstrip
LEAF_NODE	249:9	249:9	12	rowsperstrip
ASSIGN_OP	249:22	249:22	10	=
LEAF_NODE	249:22	249:22	11	=
RVAL	249:24	249:32	10	( uint32 ) - 1
LEAF_NODE	249:24	249:24	11	(
TYPE_NAME	249:25	249:25	11	uint32
LEAF_NODE	249:25	249:25	12	uint32
LEAF_NODE	249:31	249:31	11	)
UNARY_EXPR	249:32	249:33	11	- 1
UNARY_OPERATOR	249:32	249:32	12	-
LEAF_NODE	249:32	249:32	13	-
FIELD	249:33	249:33	12	1
LEAF_NODE	249:33	249:33	13	1
LEAF_NODE	249:34	249:34	7	;
SIMPLE_DECL	250:2	250:32	6	tsample_t s , tsample_t samplesperpixel ; samplesperpixel = 0 ;
INIT_DECL_LIST	250:2	250:2	7	tsample_t s , tsample_t samplesperpixel ; samplesperpixel = 0
VAR_DECL	250:2	250:12	8	tsample_t s
TYPE	250:2	250:2	9	tsample_t
TYPE_NAME	250:2	250:2	10	tsample_t
LEAF_NODE	250:2	250:2	11	tsample_t
NAME	250:12	250:12	9	s
LEAF_NODE	250:12	250:12	10	s
LEAF_NODE	250:13	250:13	8	,
VAR_DECL	250:2	250:15	8	tsample_t samplesperpixel ; samplesperpixel = 0
TYPE	250:2	250:2	9	tsample_t
TYPE_NAME	250:2	250:2	10	tsample_t
LEAF_NODE	250:2	250:2	11	tsample_t
NAME	250:15	250:15	9	samplesperpixel
LEAF_NODE	250:15	250:15	10	samplesperpixel
LEAF_NODE	0:0	0:0	9	;
INIT	250:15	250:15	9	samplesperpixel = 0
ASSIGN	250:15	250:31	10	samplesperpixel = 0
LVAL	250:15	250:15	11	samplesperpixel
NAME	250:15	250:15	12	samplesperpixel
LEAF_NODE	250:15	250:15	13	samplesperpixel
ASSIGN_OP	250:30	250:30	11	=
LEAF_NODE	250:30	250:30	12	=
RVAL	250:31	250:31	11	0
FIELD	250:31	250:31	12	0
LEAF_NODE	250:31	250:31	13	0
LEAF_NODE	250:32	250:32	7	;
EXPR_STATEMENT	252:2	252:44	6	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	252:2	252:2	7	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	252:2	252:43	8	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
CALLEE	252:2	252:2	9	TIFFGetField
LEAF_NODE	252:2	252:2	10	TIFFGetField
LEAF_NODE	252:14	252:14	9	(
ARGUMENT	252:15	252:15	9	tif
FIELD	252:15	252:15	10	tif
LEAF_NODE	252:15	252:15	11	tif
LEAF_NODE	252:18	252:18	9	,
ARGUMENT	252:20	252:20	9	TIFFTAG_IMAGELENGTH
FIELD	252:20	252:20	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	252:20	252:20	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	252:39	252:39	9	,
ARGUMENT	252:41	252:41	9	& h
UNARY_EXPR	252:41	252:42	10	& h
UNARY_OPERATOR	252:41	252:41	11	&
LEAF_NODE	252:41	252:41	12	&
FIELD	252:42	252:42	11	h
LEAF_NODE	252:42	252:42	12	h
LEAF_NODE	252:43	252:43	9	)
LEAF_NODE	252:44	252:44	7	;
EXPR_STATEMENT	253:2	253:56	6	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	253:2	253:2	7	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
FUNCTION_CALL	253:2	253:55	8	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	253:2	253:2	9	TIFFGetField
LEAF_NODE	253:2	253:2	10	TIFFGetField
LEAF_NODE	253:14	253:14	9	(
ARGUMENT	253:15	253:15	9	tif
FIELD	253:15	253:15	10	tif
LEAF_NODE	253:15	253:15	11	tif
LEAF_NODE	253:18	253:18	9	,
ARGUMENT	253:20	253:20	9	TIFFTAG_ROWSPERSTRIP
FIELD	253:20	253:20	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	253:20	253:20	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	253:40	253:40	9	,
ARGUMENT	253:42	253:42	9	& rowsperstrip
UNARY_EXPR	253:42	253:43	10	& rowsperstrip
UNARY_OPERATOR	253:42	253:42	11	&
LEAF_NODE	253:42	253:42	12	&
FIELD	253:43	253:43	11	rowsperstrip
LEAF_NODE	253:43	253:43	12	rowsperstrip
LEAF_NODE	253:55	253:55	9	)
LEAF_NODE	253:56	253:56	7	;
EXPR_STATEMENT	254:2	254:62	6	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel ) ;
EXPR	254:2	254:2	7	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
FUNCTION_CALL	254:2	254:61	8	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
CALLEE	254:2	254:2	9	TIFFGetField
LEAF_NODE	254:2	254:2	10	TIFFGetField
LEAF_NODE	254:14	254:14	9	(
ARGUMENT	254:15	254:15	9	tif
FIELD	254:15	254:15	10	tif
LEAF_NODE	254:15	254:15	11	tif
LEAF_NODE	254:18	254:18	9	,
ARGUMENT	254:20	254:20	9	TIFFTAG_SAMPLESPERPIXEL
FIELD	254:20	254:20	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	254:20	254:20	11	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	254:43	254:43	9	,
ARGUMENT	254:45	254:45	9	& samplesperpixel
UNARY_EXPR	254:45	254:46	10	& samplesperpixel
UNARY_OPERATOR	254:45	254:45	11	&
LEAF_NODE	254:45	254:45	12	&
FIELD	254:46	254:46	11	samplesperpixel
LEAF_NODE	254:46	254:46	12	samplesperpixel
LEAF_NODE	254:61	254:61	9	)
LEAF_NODE	254:62	254:62	7	;
ITERATION	255:2	255:46	6	
KEYWORD	255:2	255:2	7	for
LEAF_NODE	255:2	255:2	8	for
LEAF_NODE	255:6	255:6	7	(
FOR_INIT	255:7	255:14	7	row = 0 ;
EXPR	255:7	255:7	8	row = 0
ASSIGN	255:7	255:13	9	row = 0
LVAL	255:7	255:7	10	row
FIELD	255:7	255:7	11	row
LEAF_NODE	255:7	255:7	12	row
ASSIGN_OP	255:11	255:11	10	=
LEAF_NODE	255:11	255:11	11	=
RVAL	255:13	255:13	10	0
FIELD	255:13	255:13	11	0
LEAF_NODE	255:13	255:13	12	0
LEAF_NODE	255:14	255:14	8	;
CONDITION	255:16	255:16	7	row < h
EXPR	255:16	255:22	8	row < h
FIELD	255:16	255:16	9	row
LEAF_NODE	255:16	255:16	10	row
REL_OPERATOR	255:20	255:20	9	<
LEAF_NODE	255:20	255:20	10	<
FIELD	255:22	255:22	9	h
LEAF_NODE	255:22	255:22	10	h
LEAF_NODE	255:23	255:23	7	;
FOR_EXPR	255:25	255:25	7	row += rowsperstrip
EXPR	255:25	255:25	8	row += rowsperstrip
ASSIGN	255:25	255:32	9	row += rowsperstrip
LVAL	255:25	255:25	10	row
FIELD	255:25	255:25	11	row
LEAF_NODE	255:25	255:25	12	row
ASSIGN_OP	255:29	255:29	10	+=
LEAF_NODE	255:29	255:29	11	+=
RVAL	255:32	255:32	10	rowsperstrip
FIELD	255:32	255:32	11	rowsperstrip
LEAF_NODE	255:32	255:32	12	rowsperstrip
LEAF_NODE	255:44	255:44	7	)
STATEMENTS	255:46	266:2	7	
LEAF_NODE	255:46	255:46	8	{
STATEMENTS	256:3	256:3	8	
ITERATION	256:3	256:41	9	
KEYWORD	256:3	256:3	10	for
LEAF_NODE	256:3	256:3	11	for
LEAF_NODE	256:7	256:7	10	(
FOR_INIT	256:8	256:13	10	s = 0 ;
EXPR	256:8	256:8	11	s = 0
ASSIGN	256:8	256:12	12	s = 0
LVAL	256:8	256:8	13	s
FIELD	256:8	256:8	14	s
LEAF_NODE	256:8	256:8	15	s
ASSIGN_OP	256:10	256:10	13	=
LEAF_NODE	256:10	256:10	14	=
RVAL	256:12	256:12	13	0
FIELD	256:12	256:12	14	0
LEAF_NODE	256:12	256:12	15	0
LEAF_NODE	256:13	256:13	11	;
CONDITION	256:15	256:15	10	s < samplesperpixel
EXPR	256:15	256:19	11	s < samplesperpixel
FIELD	256:15	256:15	12	s
LEAF_NODE	256:15	256:15	13	s
REL_OPERATOR	256:17	256:17	12	<
LEAF_NODE	256:17	256:17	13	<
FIELD	256:19	256:19	12	samplesperpixel
LEAF_NODE	256:19	256:19	13	samplesperpixel
LEAF_NODE	256:34	256:34	10	;
FOR_EXPR	256:36	256:36	10	s ++
EXPR	256:36	256:36	11	s ++
FIELD	256:36	256:37	12	s ++
LEAF_NODE	256:36	256:36	13	s
LEAF_NODE	256:37	256:37	13	++
LEAF_NODE	256:39	256:39	10	)
STATEMENTS	256:41	265:3	10	
LEAF_NODE	256:41	256:41	11	{
STATEMENTS	257:4	263:6	11	
SIMPLE_DECL	257:4	258:29	12	uint32 nrow ; nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip ) ;
VAR_DECL	257:4	257:11	13	uint32 nrow ; nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
TYPE	257:4	257:4	14	uint32
TYPE_NAME	257:4	257:4	15	uint32
LEAF_NODE	257:4	257:4	16	uint32
NAME	257:11	257:11	14	nrow
LEAF_NODE	257:11	257:11	15	nrow
LEAF_NODE	0:0	0:0	14	;
INIT	257:11	257:11	14	nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
ASSIGN	257:11	257:18	15	nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
LVAL	257:11	257:11	16	nrow
NAME	257:11	257:11	17	nrow
LEAF_NODE	257:11	257:11	18	nrow
ASSIGN_OP	257:16	257:16	16	=
LEAF_NODE	257:16	257:16	17	=
RVAL	257:18	258:28	16	( row + rowsperstrip > h ? h - row : rowsperstrip )
LEAF_NODE	257:18	257:18	17	(
COND_EXPR	257:19	258:16	17	row + rowsperstrip > h ? h - row : rowsperstrip
CONDITION	257:19	257:38	18	row + rowsperstrip > h
FIELD	257:19	257:19	19	row
LEAF_NODE	257:19	257:19	20	row
LEAF_NODE	257:22	257:22	19	+
FIELD	257:23	257:23	19	rowsperstrip
LEAF_NODE	257:23	257:23	20	rowsperstrip
REL_OPERATOR	257:36	257:36	19	>
LEAF_NODE	257:36	257:36	20	>
FIELD	257:38	257:38	19	h
LEAF_NODE	257:38	257:38	20	h
LEAF_NODE	257:40	257:40	18	?
EXPR	258:8	258:10	18	h - row
FIELD	258:8	258:8	19	h
LEAF_NODE	258:8	258:8	20	h
LEAF_NODE	258:9	258:9	19	-
FIELD	258:10	258:10	19	row
LEAF_NODE	258:10	258:10	20	row
LEAF_NODE	258:14	258:14	18	:
FIELD	258:16	258:16	18	rowsperstrip
LEAF_NODE	258:16	258:16	19	rowsperstrip
LEAF_NODE	258:28	258:28	17	)
LEAF_NODE	258:29	258:29	13	;
SIMPLE_DECL	259:4	259:50	12	tstrip_t strip ; strip = TIFFComputeStrip ( tif , row , s ) ;
VAR_DECL	259:4	259:13	13	tstrip_t strip ; strip = TIFFComputeStrip ( tif , row , s )
TYPE	259:4	259:4	14	tstrip_t
TYPE_NAME	259:4	259:4	15	tstrip_t
LEAF_NODE	259:4	259:4	16	tstrip_t
NAME	259:13	259:13	14	strip
LEAF_NODE	259:13	259:13	15	strip
LEAF_NODE	0:0	0:0	14	;
INIT	259:13	259:13	14	strip = TIFFComputeStrip ( tif , row , s )
ASSIGN	259:13	259:21	15	strip = TIFFComputeStrip ( tif , row , s )
LVAL	259:13	259:13	16	strip
NAME	259:13	259:13	17	strip
LEAF_NODE	259:13	259:13	18	strip
ASSIGN_OP	259:19	259:19	16	=
LEAF_NODE	259:19	259:19	17	=
RVAL	259:21	259:21	16	TIFFComputeStrip ( tif , row , s )
FUNCTION_CALL	259:21	259:49	17	TIFFComputeStrip ( tif , row , s )
CALLEE	259:21	259:21	18	TIFFComputeStrip
LEAF_NODE	259:21	259:21	19	TIFFComputeStrip
LEAF_NODE	259:37	259:37	18	(
ARGUMENT	259:38	259:38	18	tif
FIELD	259:38	259:38	19	tif
LEAF_NODE	259:38	259:38	20	tif
LEAF_NODE	259:41	259:41	18	,
ARGUMENT	259:43	259:43	18	row
FIELD	259:43	259:43	19	row
LEAF_NODE	259:43	259:43	20	row
LEAF_NODE	259:46	259:46	18	,
ARGUMENT	259:48	259:48	18	s
FIELD	259:48	259:48	19	s
LEAF_NODE	259:48	259:48	20	s
LEAF_NODE	259:49	259:49	18	)
LEAF_NODE	259:50	259:50	13	;
SELECTION	260:4	260:66	12	
KEYWORD	260:4	260:4	13	if
LEAF_NODE	260:4	260:4	14	if
LEAF_NODE	260:7	260:7	13	(
CONDITION	260:8	260:8	13	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline ) < 0
EXPR	260:8	260:63	14	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline ) < 0
FUNCTION_CALL	260:8	260:59	15	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline )
CALLEE	260:8	260:8	16	TIFFReadEncodedStrip
LEAF_NODE	260:8	260:8	17	TIFFReadEncodedStrip
LEAF_NODE	260:28	260:28	16	(
ARGUMENT	260:29	260:29	16	tif
FIELD	260:29	260:29	17	tif
LEAF_NODE	260:29	260:29	18	tif
LEAF_NODE	260:32	260:32	16	,
ARGUMENT	260:34	260:34	16	strip
FIELD	260:34	260:34	17	strip
LEAF_NODE	260:34	260:34	18	strip
LEAF_NODE	260:39	260:39	16	,
ARGUMENT	260:41	260:41	16	buf
FIELD	260:41	260:41	17	buf
LEAF_NODE	260:41	260:41	18	buf
LEAF_NODE	260:44	260:44	16	,
ARGUMENT	260:46	260:51	16	nrow * scanline
FIELD	260:46	260:46	17	nrow
LEAF_NODE	260:46	260:46	18	nrow
LEAF_NODE	260:50	260:50	17	*
FIELD	260:51	260:51	17	scanline
LEAF_NODE	260:51	260:51	18	scanline
LEAF_NODE	260:59	260:59	16	)
REL_OPERATOR	260:61	260:61	15	<
LEAF_NODE	260:61	260:61	16	<
FIELD	260:63	260:63	15	0
LEAF_NODE	260:63	260:63	16	0
LEAF_NODE	260:64	260:64	13	)
STATEMENTS	260:66	263:4	13	
LEAF_NODE	260:66	260:66	14	{
STATEMENTS	261:5	261:5	14	
SELECTION	261:5	262:6	15	
KEYWORD	261:5	261:5	16	if
LEAF_NODE	261:5	261:5	17	if
LEAF_NODE	261:8	261:8	16	(
CONDITION	261:9	261:9	16	stoponerr
EXPR	261:9	261:9	17	stoponerr
FIELD	261:9	261:9	18	stoponerr
LEAF_NODE	261:9	261:9	19	stoponerr
LEAF_NODE	261:18	261:18	16	)
STATEMENTS	262:6	262:6	16	
JUMP_STATEMENT	262:6	262:11	17	break DESTINATION ;
KEYWORD	262:6	262:6	18	break
LEAF_NODE	262:6	262:6	19	break
LEAF_NODE	0:0	0:0	18	DESTINATION
LEAF_NODE	262:11	262:11	18	;
LEAF_NODE	263:4	263:4	14	}
SELECTION	263:6	263:11	12	
KEYWORD	263:6	263:6	13	else
LEAF_NODE	263:6	263:6	14	else
STATEMENTS	263:11	263:11	13	
SELECTION	263:11	264:5	14	
KEYWORD	263:11	263:11	15	if
LEAF_NODE	263:11	263:11	16	if
LEAF_NODE	263:14	263:14	15	(
CONDITION	263:15	263:15	15	showdata
EXPR	263:15	263:15	16	showdata
FIELD	263:15	263:15	17	showdata
LEAF_NODE	263:15	263:15	18	showdata
LEAF_NODE	263:23	263:23	15	)
STATEMENTS	264:5	264:5	15	
EXPR_STATEMENT	264:5	264:42	16	ShowStrip ( strip , buf , nrow , scanline ) ;
EXPR	264:5	264:5	17	ShowStrip ( strip , buf , nrow , scanline )
FUNCTION_CALL	264:5	264:41	18	ShowStrip ( strip , buf , nrow , scanline )
CALLEE	264:5	264:5	19	ShowStrip
LEAF_NODE	264:5	264:5	20	ShowStrip
LEAF_NODE	264:14	264:14	19	(
ARGUMENT	264:15	264:15	19	strip
FIELD	264:15	264:15	20	strip
LEAF_NODE	264:15	264:15	21	strip
LEAF_NODE	264:20	264:20	19	,
ARGUMENT	264:22	264:22	19	buf
FIELD	264:22	264:22	20	buf
LEAF_NODE	264:22	264:22	21	buf
LEAF_NODE	264:25	264:25	19	,
ARGUMENT	264:27	264:27	19	nrow
FIELD	264:27	264:27	20	nrow
LEAF_NODE	264:27	264:27	21	nrow
LEAF_NODE	264:31	264:31	19	,
ARGUMENT	264:33	264:33	19	scanline
FIELD	264:33	264:33	20	scanline
LEAF_NODE	264:33	264:33	21	scanline
LEAF_NODE	264:41	264:41	19	)
LEAF_NODE	264:42	264:42	17	;
LEAF_NODE	265:3	265:3	11	}
LEAF_NODE	266:2	266:2	8	}
EXPR_STATEMENT	267:2	267:16	6	_TIFFfree ( buf ) ;
EXPR	267:2	267:2	7	_TIFFfree ( buf )
FUNCTION_CALL	267:2	267:15	8	_TIFFfree ( buf )
CALLEE	267:2	267:2	9	_TIFFfree
LEAF_NODE	267:2	267:2	10	_TIFFfree
LEAF_NODE	267:11	267:11	9	(
ARGUMENT	267:12	267:12	9	buf
FIELD	267:12	267:12	10	buf
LEAF_NODE	267:12	267:12	11	buf
LEAF_NODE	267:15	267:15	9	)
LEAF_NODE	267:16	267:16	7	;
LEAF_NODE	268:1	268:1	5	}
LEAF_NODE	269:0	269:0	2	}
FUNCTION_DEF	271:0	289:0	1	
RETURN_TYPE	271:0	271:7	2	static void
LEAF_NODE	271:0	271:0	3	static
TYPE_NAME	271:7	271:7	3	void
LEAF_NODE	271:7	271:7	4	void
FUNCTION_NAME	272:0	272:0	2	ShowTile
LEAF_NODE	272:0	272:0	3	ShowTile
PARAMETER_LIST	272:8	273:51	2	( uint32 row , uint32 col , tsample_t sample , unsigned char * pp , uint32 nrow , tsize_t rowsize )
LEAF_NODE	272:8	272:8	3	(
PARAMETER_DECL	272:9	272:16	3	uint32 row
TYPE	272:9	272:9	4	uint32
TYPE_NAME	272:9	272:9	5	uint32
LEAF_NODE	272:9	272:9	6	uint32
NAME	272:16	272:16	4	row
LEAF_NODE	272:16	272:16	5	row
LEAF_NODE	272:19	272:19	3	,
PARAMETER_DECL	272:21	272:28	3	uint32 col
TYPE	272:21	272:21	4	uint32
TYPE_NAME	272:21	272:21	5	uint32
LEAF_NODE	272:21	272:21	6	uint32
NAME	272:28	272:28	4	col
LEAF_NODE	272:28	272:28	5	col
LEAF_NODE	272:31	272:31	3	,
PARAMETER_DECL	272:33	272:43	3	tsample_t sample
TYPE	272:33	272:33	4	tsample_t
TYPE_NAME	272:33	272:33	5	tsample_t
LEAF_NODE	272:33	272:33	6	tsample_t
NAME	272:43	272:43	4	sample
LEAF_NODE	272:43	272:43	5	sample
LEAF_NODE	272:49	272:49	3	,
PARAMETER_DECL	273:4	273:19	3	unsigned char * pp
TYPE	273:4	273:17	4	unsigned char *
TYPE_NAME	273:4	273:13	5	unsigned char
LEAF_NODE	273:4	273:4	6	unsigned
LEAF_NODE	273:13	273:13	6	char
POINTER	273:17	273:17	5	*
LEAF_NODE	273:17	273:17	6	*
NAME	273:19	273:19	4	pp
LEAF_NODE	273:19	273:19	5	pp
LEAF_NODE	273:21	273:21	3	,
PARAMETER_DECL	273:23	273:30	3	uint32 nrow
TYPE	273:23	273:23	4	uint32
TYPE_NAME	273:23	273:23	5	uint32
LEAF_NODE	273:23	273:23	6	uint32
NAME	273:30	273:30	4	nrow
LEAF_NODE	273:30	273:30	5	nrow
LEAF_NODE	273:34	273:34	3	,
PARAMETER_DECL	273:36	273:44	3	tsize_t rowsize
TYPE	273:36	273:36	4	tsize_t
TYPE_NAME	273:36	273:36	5	tsize_t
LEAF_NODE	273:36	273:36	6	tsize_t
NAME	273:44	273:44	4	rowsize
LEAF_NODE	273:44	273:44	5	rowsize
LEAF_NODE	273:51	273:51	3	)
LEAF_NODE	274:0	274:0	2	{
STATEMENTS	275:1	281:1	2	
SIMPLE_DECL	275:1	275:10	3	uint32 cc ;
VAR_DECL	275:1	275:8	4	uint32 cc
TYPE	275:1	275:1	5	uint32
TYPE_NAME	275:1	275:1	6	uint32
LEAF_NODE	275:1	275:1	7	uint32
NAME	275:8	275:8	5	cc
LEAF_NODE	275:8	275:8	6	cc
LEAF_NODE	275:10	275:10	4	;
EXPR_STATEMENT	277:1	277:66	3	printf ( "Tile (%lu,%lu" , ( unsigned long ) row , ( unsigned long ) col ) ;
EXPR	277:1	277:1	4	printf ( "Tile (%lu,%lu" , ( unsigned long ) row , ( unsigned long ) col )
FUNCTION_CALL	277:1	277:65	5	printf ( "Tile (%lu,%lu" , ( unsigned long ) row , ( unsigned long ) col )
CALLEE	277:1	277:1	6	printf
LEAF_NODE	277:1	277:1	7	printf
LEAF_NODE	277:7	277:7	6	(
ARGUMENT	277:8	277:8	6	"Tile (%lu,%lu"
FIELD	277:8	277:8	7	"Tile (%lu,%lu"
LEAF_NODE	277:8	277:8	8	"Tile (%lu,%lu"
LEAF_NODE	277:23	277:23	6	,
ARGUMENT	277:25	277:41	6	( unsigned long ) row
LEAF_NODE	277:25	277:25	7	(
TYPE_NAME	277:26	277:35	7	unsigned long
LEAF_NODE	277:26	277:26	8	unsigned
LEAF_NODE	277:35	277:35	8	long
LEAF_NODE	277:39	277:39	7	)
FIELD	277:41	277:41	7	row
LEAF_NODE	277:41	277:41	8	row
LEAF_NODE	277:44	277:44	6	,
ARGUMENT	277:46	277:62	6	( unsigned long ) col
LEAF_NODE	277:46	277:46	7	(
TYPE_NAME	277:47	277:56	7	unsigned long
LEAF_NODE	277:47	277:47	8	unsigned
LEAF_NODE	277:56	277:56	8	long
LEAF_NODE	277:60	277:60	7	)
FIELD	277:62	277:62	7	col
LEAF_NODE	277:62	277:62	8	col
LEAF_NODE	277:65	277:65	6	)
LEAF_NODE	277:66	277:66	4	;
SELECTION	278:1	279:2	3	
KEYWORD	278:1	278:1	4	if
LEAF_NODE	278:1	278:1	5	if
LEAF_NODE	278:4	278:4	4	(
CONDITION	278:5	278:5	4	sample != ( tsample_t ) - 1
EXPR	278:5	278:27	5	sample != ( tsample_t ) - 1
FIELD	278:5	278:5	6	sample
LEAF_NODE	278:5	278:5	7	sample
EQ_OPERATOR	278:12	278:12	6	!=
LEAF_NODE	278:12	278:12	7	!=
LEAF_NODE	278:15	278:15	6	(
TYPE_NAME	278:16	278:16	6	tsample_t
LEAF_NODE	278:16	278:16	7	tsample_t
LEAF_NODE	278:25	278:25	6	)
UNARY_EXPR	278:27	278:28	6	- 1
UNARY_OPERATOR	278:27	278:27	7	-
LEAF_NODE	278:27	278:27	8	-
FIELD	278:28	278:28	7	1
LEAF_NODE	278:28	278:28	8	1
LEAF_NODE	278:29	278:29	4	)
STATEMENTS	279:2	279:2	4	
EXPR_STATEMENT	279:2	279:23	5	printf ( ",%u" , sample ) ;
EXPR	279:2	279:2	6	printf ( ",%u" , sample )
FUNCTION_CALL	279:2	279:22	7	printf ( ",%u" , sample )
CALLEE	279:2	279:2	8	printf
LEAF_NODE	279:2	279:2	9	printf
LEAF_NODE	279:8	279:8	8	(
ARGUMENT	279:9	279:9	8	",%u"
FIELD	279:9	279:9	9	",%u"
LEAF_NODE	279:9	279:9	10	",%u"
LEAF_NODE	279:14	279:14	8	,
ARGUMENT	279:16	279:16	8	sample
FIELD	279:16	279:16	9	sample
LEAF_NODE	279:16	279:16	10	sample
LEAF_NODE	279:22	279:22	8	)
LEAF_NODE	279:23	279:23	6	;
EXPR_STATEMENT	280:1	280:15	3	printf ( "):\n" ) ;
EXPR	280:1	280:1	4	printf ( "):\n" )
FUNCTION_CALL	280:1	280:14	5	printf ( "):\n" )
CALLEE	280:1	280:1	6	printf
LEAF_NODE	280:1	280:1	7	printf
LEAF_NODE	280:7	280:7	6	(
ARGUMENT	280:8	280:8	6	"):\n"
FIELD	280:8	280:8	7	"):\n"
LEAF_NODE	280:8	280:8	8	"):\n"
LEAF_NODE	280:14	280:14	6	)
LEAF_NODE	280:15	280:15	4	;
ITERATION	281:1	281:20	3	
KEYWORD	281:1	281:1	4	while
LEAF_NODE	281:1	281:1	5	while
LEAF_NODE	281:7	281:7	4	(
CONDITION	281:8	281:8	4	nrow -- > 0
EXPR	281:8	281:17	5	nrow -- > 0
FIELD	281:8	281:12	6	nrow --
LEAF_NODE	281:8	281:8	7	nrow
LEAF_NODE	281:12	281:12	7	--
REL_OPERATOR	281:15	281:15	6	>
LEAF_NODE	281:15	281:15	7	>
FIELD	281:17	281:17	6	0
LEAF_NODE	281:17	281:17	7	0
LEAF_NODE	281:18	281:18	4	)
STATEMENTS	281:20	288:1	4	
LEAF_NODE	281:20	281:20	5	{
STATEMENTS	282:3	287:2	5	
ITERATION	282:3	282:45	6	
KEYWORD	282:3	282:3	7	for
LEAF_NODE	282:3	282:3	8	for
LEAF_NODE	282:7	282:7	7	(
FOR_INIT	282:8	282:14	7	cc = 0 ;
EXPR	282:8	282:8	8	cc = 0
ASSIGN	282:8	282:13	9	cc = 0
LVAL	282:8	282:8	10	cc
FIELD	282:8	282:8	11	cc
LEAF_NODE	282:8	282:8	12	cc
ASSIGN_OP	282:11	282:11	10	=
LEAF_NODE	282:11	282:11	11	=
RVAL	282:13	282:13	10	0
FIELD	282:13	282:13	11	0
LEAF_NODE	282:13	282:13	12	0
LEAF_NODE	282:14	282:14	8	;
CONDITION	282:16	282:16	7	cc < ( uint32 ) rowsize
EXPR	282:16	282:30	8	cc < ( uint32 ) rowsize
FIELD	282:16	282:16	9	cc
LEAF_NODE	282:16	282:16	10	cc
REL_OPERATOR	282:19	282:19	9	<
LEAF_NODE	282:19	282:19	10	<
LEAF_NODE	282:21	282:21	9	(
TYPE_NAME	282:22	282:22	9	uint32
LEAF_NODE	282:22	282:22	10	uint32
LEAF_NODE	282:28	282:28	9	)
FIELD	282:30	282:30	9	rowsize
LEAF_NODE	282:30	282:30	10	rowsize
LEAF_NODE	282:37	282:37	7	;
FOR_EXPR	282:39	282:39	7	cc ++
EXPR	282:39	282:39	8	cc ++
FIELD	282:39	282:41	9	cc ++
LEAF_NODE	282:39	282:39	10	cc
LEAF_NODE	282:41	282:41	10	++
LEAF_NODE	282:43	282:43	7	)
STATEMENTS	282:45	286:2	7	
LEAF_NODE	282:45	282:45	8	{
STATEMENTS	283:3	284:3	8	
EXPR_STATEMENT	283:3	283:25	9	printf ( " %02x" , * pp ++ ) ;
EXPR	283:3	283:3	10	printf ( " %02x" , * pp ++ )
FUNCTION_CALL	283:3	283:24	11	printf ( " %02x" , * pp ++ )
CALLEE	283:3	283:3	12	printf
LEAF_NODE	283:3	283:3	13	printf
LEAF_NODE	283:9	283:9	12	(
ARGUMENT	283:10	283:10	12	" %02x"
FIELD	283:10	283:10	13	" %02x"
LEAF_NODE	283:10	283:10	14	" %02x"
LEAF_NODE	283:17	283:17	12	,
ARGUMENT	283:19	283:19	12	* pp ++
UNARY_EXPR	283:19	283:20	13	* pp ++
UNARY_OPERATOR	283:19	283:19	14	*
LEAF_NODE	283:19	283:19	15	*
FIELD	283:20	283:22	14	pp ++
LEAF_NODE	283:20	283:20	15	pp
LEAF_NODE	283:22	283:22	15	++
LEAF_NODE	283:24	283:24	12	)
LEAF_NODE	283:25	283:25	10	;
SELECTION	284:3	285:4	9	
KEYWORD	284:3	284:3	10	if
LEAF_NODE	284:3	284:3	11	if
LEAF_NODE	284:6	284:6	10	(
CONDITION	284:7	284:7	10	( ( cc + 1 ) % 24 ) == 0
EXPR	284:7	284:24	11	( ( cc + 1 ) % 24 ) == 0
LEAF_NODE	284:7	284:7	12	(
LEAF_NODE	284:8	284:8	12	(
FIELD	284:9	284:9	12	cc
LEAF_NODE	284:9	284:9	13	cc
LEAF_NODE	284:11	284:11	12	+
FIELD	284:12	284:12	12	1
LEAF_NODE	284:12	284:12	13	1
LEAF_NODE	284:13	284:13	12	)
LEAF_NODE	284:15	284:15	12	%
FIELD	284:17	284:17	12	24
LEAF_NODE	284:17	284:17	13	24
LEAF_NODE	284:19	284:19	12	)
EQ_OPERATOR	284:21	284:21	12	==
LEAF_NODE	284:21	284:21	13	==
FIELD	284:24	284:24	12	0
LEAF_NODE	284:24	284:24	13	0
LEAF_NODE	284:25	284:25	10	)
STATEMENTS	285:4	285:4	10	
EXPR_STATEMENT	285:4	285:17	11	putchar ( '\n' ) ;
EXPR	285:4	285:4	12	putchar ( '\n' )
FUNCTION_CALL	285:4	285:16	13	putchar ( '\n' )
CALLEE	285:4	285:4	14	putchar
LEAF_NODE	285:4	285:4	15	putchar
LEAF_NODE	285:11	285:11	14	(
ARGUMENT	285:12	285:12	14	'\n'
FIELD	285:12	285:12	15	'\n'
LEAF_NODE	285:12	285:12	16	'\n'
LEAF_NODE	285:16	285:16	14	)
LEAF_NODE	285:17	285:17	12	;
LEAF_NODE	286:2	286:2	8	}
EXPR_STATEMENT	287:2	287:15	6	putchar ( '\n' ) ;
EXPR	287:2	287:2	7	putchar ( '\n' )
FUNCTION_CALL	287:2	287:14	8	putchar ( '\n' )
CALLEE	287:2	287:2	9	putchar
LEAF_NODE	287:2	287:2	10	putchar
LEAF_NODE	287:9	287:9	9	(
ARGUMENT	287:10	287:10	9	'\n'
FIELD	287:10	287:10	10	'\n'
LEAF_NODE	287:10	287:10	11	'\n'
LEAF_NODE	287:14	287:14	9	)
LEAF_NODE	287:15	287:15	7	;
LEAF_NODE	288:1	288:1	5	}
LEAF_NODE	289:0	289:0	2	}
FUNCTION_DEF	291:0	324:0	1	
RETURN_TYPE	291:0	291:0	2	void
TYPE_NAME	291:0	291:0	3	void
LEAF_NODE	291:0	291:0	4	void
FUNCTION_NAME	292:0	292:0	2	TIFFReadContigTileData
LEAF_NODE	292:0	292:0	3	TIFFReadContigTileData
PARAMETER_LIST	292:22	292:32	2	( TIFF * tif )
LEAF_NODE	292:22	292:22	3	(
PARAMETER_DECL	292:23	292:29	3	TIFF * tif
TYPE	292:23	292:27	4	TIFF *
TYPE_NAME	292:23	292:23	5	TIFF
LEAF_NODE	292:23	292:23	6	TIFF
POINTER	292:27	292:27	5	*
LEAF_NODE	292:27	292:27	6	*
NAME	292:29	292:29	4	tif
LEAF_NODE	292:29	292:29	5	tif
LEAF_NODE	292:32	292:32	3	)
LEAF_NODE	293:0	293:0	2	{
STATEMENTS	294:1	299:1	2	
SIMPLE_DECL	294:1	294:19	3	unsigned char * buf ;
VAR_DECL	294:1	294:16	4	unsigned char * buf
TYPE	294:1	294:15	5	unsigned char *
TYPE_NAME	294:1	294:10	6	unsigned char
LEAF_NODE	294:1	294:1	7	unsigned
LEAF_NODE	294:10	294:10	7	char
POINTER	294:15	294:15	6	*
LEAF_NODE	294:15	294:15	7	*
NAME	294:16	294:16	5	buf
LEAF_NODE	294:16	294:16	6	buf
LEAF_NODE	294:19	294:19	4	;
SIMPLE_DECL	295:1	295:40	3	tmsize_t rowsize ; rowsize = TIFFTileRowSize ( tif ) ;
VAR_DECL	295:1	295:10	4	tmsize_t rowsize ; rowsize = TIFFTileRowSize ( tif )
TYPE	295:1	295:1	5	tmsize_t
TYPE_NAME	295:1	295:1	6	tmsize_t
LEAF_NODE	295:1	295:1	7	tmsize_t
NAME	295:10	295:10	5	rowsize
LEAF_NODE	295:10	295:10	6	rowsize
LEAF_NODE	0:0	0:0	5	;
INIT	295:10	295:10	5	rowsize = TIFFTileRowSize ( tif )
ASSIGN	295:10	295:20	6	rowsize = TIFFTileRowSize ( tif )
LVAL	295:10	295:10	7	rowsize
NAME	295:10	295:10	8	rowsize
LEAF_NODE	295:10	295:10	9	rowsize
ASSIGN_OP	295:18	295:18	7	=
LEAF_NODE	295:18	295:18	8	=
RVAL	295:20	295:20	7	TIFFTileRowSize ( tif )
FUNCTION_CALL	295:20	295:39	8	TIFFTileRowSize ( tif )
CALLEE	295:20	295:20	9	TIFFTileRowSize
LEAF_NODE	295:20	295:20	10	TIFFTileRowSize
LEAF_NODE	295:35	295:35	9	(
ARGUMENT	295:36	295:36	9	tif
FIELD	295:36	295:36	10	tif
LEAF_NODE	295:36	295:36	11	tif
LEAF_NODE	295:39	295:39	9	)
LEAF_NODE	295:40	295:40	4	;
SIMPLE_DECL	296:8	296:45	3	tmsize_t tilesize ; tilesize = TIFFTileSize ( tif ) ;
VAR_DECL	296:8	296:17	4	tmsize_t tilesize ; tilesize = TIFFTileSize ( tif )
TYPE	296:8	296:8	5	tmsize_t
TYPE_NAME	296:8	296:8	6	tmsize_t
LEAF_NODE	296:8	296:8	7	tmsize_t
NAME	296:17	296:17	5	tilesize
LEAF_NODE	296:17	296:17	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	296:17	296:17	5	tilesize = TIFFTileSize ( tif )
ASSIGN	296:17	296:28	6	tilesize = TIFFTileSize ( tif )
LVAL	296:17	296:17	7	tilesize
NAME	296:17	296:17	8	tilesize
LEAF_NODE	296:17	296:17	9	tilesize
ASSIGN_OP	296:26	296:26	7	=
LEAF_NODE	296:26	296:26	8	=
RVAL	296:28	296:28	7	TIFFTileSize ( tif )
FUNCTION_CALL	296:28	296:44	8	TIFFTileSize ( tif )
CALLEE	296:28	296:28	9	TIFFTileSize
LEAF_NODE	296:28	296:28	10	TIFFTileSize
LEAF_NODE	296:40	296:40	9	(
ARGUMENT	296:41	296:41	9	tif
FIELD	296:41	296:41	10	tif
LEAF_NODE	296:41	296:41	11	tif
LEAF_NODE	296:44	296:44	9	)
LEAF_NODE	296:45	296:45	4	;
EXPR_STATEMENT	298:1	298:45	3	buf = ( unsigned char * ) _TIFFmalloc ( tilesize ) ;
EXPR	298:1	298:1	4	buf = ( unsigned char * ) _TIFFmalloc ( tilesize )
ASSIGN	298:1	298:7	5	buf = ( unsigned char * ) _TIFFmalloc ( tilesize )
LVAL	298:1	298:1	6	buf
FIELD	298:1	298:1	7	buf
LEAF_NODE	298:1	298:1	8	buf
ASSIGN_OP	298:5	298:5	6	=
LEAF_NODE	298:5	298:5	7	=
RVAL	298:7	298:24	6	( unsigned char * ) _TIFFmalloc ( tilesize )
LEAF_NODE	298:7	298:7	7	(
TYPE_NAME	298:8	298:17	7	unsigned char
LEAF_NODE	298:8	298:8	8	unsigned
LEAF_NODE	298:17	298:17	8	char
LEAF_NODE	298:22	298:22	7	*
LEAF_NODE	298:23	298:23	7	)
FUNCTION_CALL	298:24	298:44	7	_TIFFmalloc ( tilesize )
CALLEE	298:24	298:24	8	_TIFFmalloc
LEAF_NODE	298:24	298:24	9	_TIFFmalloc
LEAF_NODE	298:35	298:35	8	(
ARGUMENT	298:36	298:36	8	tilesize
FIELD	298:36	298:36	9	tilesize
LEAF_NODE	298:36	298:36	10	tilesize
LEAF_NODE	298:44	298:44	8	)
LEAF_NODE	298:45	298:45	4	;
SELECTION	299:1	299:10	3	
KEYWORD	299:1	299:1	4	if
LEAF_NODE	299:1	299:1	5	if
LEAF_NODE	299:4	299:4	4	(
CONDITION	299:5	299:5	4	buf
EXPR	299:5	299:5	5	buf
FIELD	299:5	299:5	6	buf
LEAF_NODE	299:5	299:5	7	buf
LEAF_NODE	299:8	299:8	4	)
STATEMENTS	299:10	323:1	4	
LEAF_NODE	299:10	299:10	5	{
STATEMENTS	300:2	322:2	5	
SIMPLE_DECL	300:2	300:29	6	uint32 tw ; tw = 0 , uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0 ;
INIT_DECL_LIST	300:2	300:2	7	uint32 tw ; tw = 0 , uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	300:2	300:9	8	uint32 tw ; tw = 0
TYPE	300:2	300:2	9	uint32
TYPE_NAME	300:2	300:2	10	uint32
LEAF_NODE	300:2	300:2	11	uint32
NAME	300:9	300:9	9	tw
LEAF_NODE	300:9	300:9	10	tw
LEAF_NODE	0:0	0:0	9	;
INIT	300:9	300:9	9	tw = 0
ASSIGN	300:9	300:12	10	tw = 0
LVAL	300:9	300:9	11	tw
NAME	300:9	300:9	12	tw
LEAF_NODE	300:9	300:9	13	tw
ASSIGN_OP	300:11	300:11	11	=
LEAF_NODE	300:11	300:11	12	=
RVAL	300:12	300:12	11	0
FIELD	300:12	300:12	12	0
LEAF_NODE	300:12	300:12	13	0
LEAF_NODE	300:13	300:13	8	,
INIT_DECL_LIST	300:2	300:2	8	uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	300:2	300:15	9	uint32 th ; th = 0
TYPE	300:2	300:2	10	uint32
TYPE_NAME	300:2	300:2	11	uint32
LEAF_NODE	300:2	300:2	12	uint32
NAME	300:15	300:15	10	th
LEAF_NODE	300:15	300:15	11	th
LEAF_NODE	0:0	0:0	10	;
INIT	300:15	300:15	10	th = 0
ASSIGN	300:15	300:18	11	th = 0
LVAL	300:15	300:15	12	th
NAME	300:15	300:15	13	th
LEAF_NODE	300:15	300:15	14	th
ASSIGN_OP	300:17	300:17	12	=
LEAF_NODE	300:17	300:17	13	=
RVAL	300:18	300:18	12	0
FIELD	300:18	300:18	13	0
LEAF_NODE	300:18	300:18	14	0
LEAF_NODE	300:19	300:19	9	,
INIT_DECL_LIST	300:2	300:2	9	uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	300:2	300:21	10	uint32 w ; w = 0
TYPE	300:2	300:2	11	uint32
TYPE_NAME	300:2	300:2	12	uint32
LEAF_NODE	300:2	300:2	13	uint32
NAME	300:21	300:21	11	w
LEAF_NODE	300:21	300:21	12	w
LEAF_NODE	0:0	0:0	11	;
INIT	300:21	300:21	11	w = 0
ASSIGN	300:21	300:23	12	w = 0
LVAL	300:21	300:21	13	w
NAME	300:21	300:21	14	w
LEAF_NODE	300:21	300:21	15	w
ASSIGN_OP	300:22	300:22	13	=
LEAF_NODE	300:22	300:22	14	=
RVAL	300:23	300:23	13	0
FIELD	300:23	300:23	14	0
LEAF_NODE	300:23	300:23	15	0
LEAF_NODE	300:24	300:24	10	,
VAR_DECL	300:2	300:26	10	uint32 h ; h = 0
TYPE	300:2	300:2	11	uint32
TYPE_NAME	300:2	300:2	12	uint32
LEAF_NODE	300:2	300:2	13	uint32
NAME	300:26	300:26	11	h
LEAF_NODE	300:26	300:26	12	h
LEAF_NODE	0:0	0:0	11	;
INIT	300:26	300:26	11	h = 0
ASSIGN	300:26	300:28	12	h = 0
LVAL	300:26	300:26	13	h
NAME	300:26	300:26	14	h
LEAF_NODE	300:26	300:26	15	h
ASSIGN_OP	300:27	300:27	13	=
LEAF_NODE	300:27	300:27	14	=
RVAL	300:28	300:28	13	0
FIELD	300:28	300:28	14	0
LEAF_NODE	300:28	300:28	15	0
LEAF_NODE	300:29	300:29	7	;
SIMPLE_DECL	301:2	301:17	6	uint32 row , uint32 col ;
INIT_DECL_LIST	301:2	301:2	7	uint32 row , uint32 col
VAR_DECL	301:2	301:9	8	uint32 row
TYPE	301:2	301:2	9	uint32
TYPE_NAME	301:2	301:2	10	uint32
LEAF_NODE	301:2	301:2	11	uint32
NAME	301:9	301:9	9	row
LEAF_NODE	301:9	301:9	10	row
LEAF_NODE	301:12	301:12	8	,
VAR_DECL	301:2	301:14	8	uint32 col
TYPE	301:2	301:2	9	uint32
TYPE_NAME	301:2	301:2	10	uint32
LEAF_NODE	301:2	301:2	11	uint32
NAME	301:14	301:14	9	col
LEAF_NODE	301:14	301:14	10	col
LEAF_NODE	301:17	301:17	7	;
EXPR_STATEMENT	303:2	303:43	6	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w ) ;
EXPR	303:2	303:2	7	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
FUNCTION_CALL	303:2	303:42	8	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
CALLEE	303:2	303:2	9	TIFFGetField
LEAF_NODE	303:2	303:2	10	TIFFGetField
LEAF_NODE	303:14	303:14	9	(
ARGUMENT	303:15	303:15	9	tif
FIELD	303:15	303:15	10	tif
LEAF_NODE	303:15	303:15	11	tif
LEAF_NODE	303:18	303:18	9	,
ARGUMENT	303:20	303:20	9	TIFFTAG_IMAGEWIDTH
FIELD	303:20	303:20	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	303:20	303:20	11	TIFFTAG_IMAGEWIDTH
LEAF_NODE	303:38	303:38	9	,
ARGUMENT	303:40	303:40	9	& w
UNARY_EXPR	303:40	303:41	10	& w
UNARY_OPERATOR	303:40	303:40	11	&
LEAF_NODE	303:40	303:40	12	&
FIELD	303:41	303:41	11	w
LEAF_NODE	303:41	303:41	12	w
LEAF_NODE	303:42	303:42	9	)
LEAF_NODE	303:43	303:43	7	;
EXPR_STATEMENT	304:2	304:44	6	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	304:2	304:2	7	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	304:2	304:43	8	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
CALLEE	304:2	304:2	9	TIFFGetField
LEAF_NODE	304:2	304:2	10	TIFFGetField
LEAF_NODE	304:14	304:14	9	(
ARGUMENT	304:15	304:15	9	tif
FIELD	304:15	304:15	10	tif
LEAF_NODE	304:15	304:15	11	tif
LEAF_NODE	304:18	304:18	9	,
ARGUMENT	304:20	304:20	9	TIFFTAG_IMAGELENGTH
FIELD	304:20	304:20	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	304:20	304:20	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	304:39	304:39	9	,
ARGUMENT	304:41	304:41	9	& h
UNARY_EXPR	304:41	304:42	10	& h
UNARY_OPERATOR	304:41	304:41	11	&
LEAF_NODE	304:41	304:41	12	&
FIELD	304:42	304:42	11	h
LEAF_NODE	304:42	304:42	12	h
LEAF_NODE	304:43	304:43	9	)
LEAF_NODE	304:44	304:44	7	;
EXPR_STATEMENT	305:2	305:43	6	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	305:2	305:2	7	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
FUNCTION_CALL	305:2	305:42	8	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
CALLEE	305:2	305:2	9	TIFFGetField
LEAF_NODE	305:2	305:2	10	TIFFGetField
LEAF_NODE	305:14	305:14	9	(
ARGUMENT	305:15	305:15	9	tif
FIELD	305:15	305:15	10	tif
LEAF_NODE	305:15	305:15	11	tif
LEAF_NODE	305:18	305:18	9	,
ARGUMENT	305:20	305:20	9	TIFFTAG_TILEWIDTH
FIELD	305:20	305:20	10	TIFFTAG_TILEWIDTH
LEAF_NODE	305:20	305:20	11	TIFFTAG_TILEWIDTH
LEAF_NODE	305:37	305:37	9	,
ARGUMENT	305:39	305:39	9	& tw
UNARY_EXPR	305:39	305:40	10	& tw
UNARY_OPERATOR	305:39	305:39	11	&
LEAF_NODE	305:39	305:39	12	&
FIELD	305:40	305:40	11	tw
LEAF_NODE	305:40	305:40	12	tw
LEAF_NODE	305:42	305:42	9	)
LEAF_NODE	305:43	305:43	7	;
EXPR_STATEMENT	306:2	306:44	6	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th ) ;
EXPR	306:2	306:2	7	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
FUNCTION_CALL	306:2	306:43	8	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
CALLEE	306:2	306:2	9	TIFFGetField
LEAF_NODE	306:2	306:2	10	TIFFGetField
LEAF_NODE	306:14	306:14	9	(
ARGUMENT	306:15	306:15	9	tif
FIELD	306:15	306:15	10	tif
LEAF_NODE	306:15	306:15	11	tif
LEAF_NODE	306:18	306:18	9	,
ARGUMENT	306:20	306:20	9	TIFFTAG_TILELENGTH
FIELD	306:20	306:20	10	TIFFTAG_TILELENGTH
LEAF_NODE	306:20	306:20	11	TIFFTAG_TILELENGTH
LEAF_NODE	306:38	306:38	9	,
ARGUMENT	306:40	306:40	9	& th
UNARY_EXPR	306:40	306:41	10	& th
UNARY_OPERATOR	306:40	306:40	11	&
LEAF_NODE	306:40	306:40	12	&
FIELD	306:41	306:41	11	th
LEAF_NODE	306:41	306:41	12	th
LEAF_NODE	306:43	306:43	9	)
LEAF_NODE	306:44	306:44	7	;
SELECTION	307:16	308:8	6	
KEYWORD	307:16	307:16	7	if
LEAF_NODE	307:16	307:16	8	if
LEAF_NODE	307:19	307:19	7	(
CONDITION	307:21	307:21	7	rowsize == 0 || th > ( size_t ) ( tilesize / rowsize )
EXPR	307:21	307:21	8	rowsize == 0 || th > ( size_t ) ( tilesize / rowsize )
OR	307:21	307:37	9	rowsize == 0 || th > ( size_t ) ( tilesize / rowsize )
EXPR	307:21	307:32	10	rowsize == 0
FIELD	307:21	307:21	11	rowsize
LEAF_NODE	307:21	307:21	12	rowsize
EQ_OPERATOR	307:29	307:29	11	==
LEAF_NODE	307:29	307:29	12	==
FIELD	307:32	307:32	11	0
LEAF_NODE	307:32	307:32	12	0
LEAF_NODE	307:34	307:34	10	||
EXPR	307:37	307:70	10	th > ( size_t ) ( tilesize / rowsize )
FIELD	307:37	307:37	11	th
LEAF_NODE	307:37	307:37	12	th
REL_OPERATOR	307:40	307:40	11	>
LEAF_NODE	307:40	307:40	12	>
LEAF_NODE	307:42	307:42	11	(
TYPE_NAME	307:43	307:43	11	size_t
LEAF_NODE	307:43	307:43	12	size_t
LEAF_NODE	307:49	307:49	11	)
LEAF_NODE	307:51	307:51	11	(
FIELD	307:52	307:52	11	tilesize
LEAF_NODE	307:52	307:52	12	tilesize
LEAF_NODE	307:61	307:61	11	/
FIELD	307:63	307:63	11	rowsize
LEAF_NODE	307:63	307:63	12	rowsize
LEAF_NODE	307:70	307:70	11	)
LEAF_NODE	307:72	307:72	7	)
STATEMENTS	308:8	312:8	7	
LEAF_NODE	308:8	308:8	8	{
STATEMENTS	309:12	311:12	8	
EXPR_STATEMENT	309:12	309:77	9	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" ) ;
EXPR	309:12	309:12	10	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" )
FUNCTION_CALL	309:12	309:76	11	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" )
CALLEE	309:12	309:12	12	fprintf
LEAF_NODE	309:12	309:12	13	fprintf
LEAF_NODE	309:19	309:19	12	(
ARGUMENT	309:20	309:20	12	stderr
FIELD	309:20	309:20	13	stderr
LEAF_NODE	309:20	309:20	14	stderr
LEAF_NODE	309:26	309:26	12	,
ARGUMENT	309:28	309:28	12	"Cannot display data: th * rowsize > tilesize\n"
FIELD	309:28	309:28	13	"Cannot display data: th * rowsize > tilesize\n"
LEAF_NODE	309:28	309:28	14	"Cannot display data: th * rowsize > tilesize\n"
LEAF_NODE	309:76	309:76	12	)
LEAF_NODE	309:77	309:77	10	;
EXPR_STATEMENT	310:12	310:26	9	_TIFFfree ( buf ) ;
EXPR	310:12	310:12	10	_TIFFfree ( buf )
FUNCTION_CALL	310:12	310:25	11	_TIFFfree ( buf )
CALLEE	310:12	310:12	12	_TIFFfree
LEAF_NODE	310:12	310:12	13	_TIFFfree
LEAF_NODE	310:21	310:21	12	(
ARGUMENT	310:22	310:22	12	buf
FIELD	310:22	310:22	13	buf
LEAF_NODE	310:22	310:22	14	buf
LEAF_NODE	310:25	310:25	12	)
LEAF_NODE	310:26	310:26	10	;
JUMP_STATEMENT	311:12	311:18	9	return DESTINATION ;
KEYWORD	311:12	311:12	10	return
LEAF_NODE	311:12	311:12	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	311:18	311:18	10	;
LEAF_NODE	312:8	312:8	8	}
ITERATION	313:2	313:36	6	
KEYWORD	313:2	313:2	7	for
LEAF_NODE	313:2	313:2	8	for
LEAF_NODE	313:6	313:6	7	(
FOR_INIT	313:7	313:14	7	row = 0 ;
EXPR	313:7	313:7	8	row = 0
ASSIGN	313:7	313:13	9	row = 0
LVAL	313:7	313:7	10	row
FIELD	313:7	313:7	11	row
LEAF_NODE	313:7	313:7	12	row
ASSIGN_OP	313:11	313:11	10	=
LEAF_NODE	313:11	313:11	11	=
RVAL	313:13	313:13	10	0
FIELD	313:13	313:13	11	0
LEAF_NODE	313:13	313:13	12	0
LEAF_NODE	313:14	313:14	8	;
CONDITION	313:16	313:16	7	row < h
EXPR	313:16	313:22	8	row < h
FIELD	313:16	313:16	9	row
LEAF_NODE	313:16	313:16	10	row
REL_OPERATOR	313:20	313:20	9	<
LEAF_NODE	313:20	313:20	10	<
FIELD	313:22	313:22	9	h
LEAF_NODE	313:22	313:22	10	h
LEAF_NODE	313:23	313:23	7	;
FOR_EXPR	313:25	313:25	7	row += th
EXPR	313:25	313:25	8	row += th
ASSIGN	313:25	313:32	9	row += th
LVAL	313:25	313:25	10	row
FIELD	313:25	313:25	11	row
LEAF_NODE	313:25	313:25	12	row
ASSIGN_OP	313:29	313:29	10	+=
LEAF_NODE	313:29	313:29	11	+=
RVAL	313:32	313:32	10	th
FIELD	313:32	313:32	11	th
LEAF_NODE	313:32	313:32	12	th
LEAF_NODE	313:34	313:34	7	)
STATEMENTS	313:36	321:2	7	
LEAF_NODE	313:36	313:36	8	{
STATEMENTS	314:3	314:3	8	
ITERATION	314:3	314:37	9	
KEYWORD	314:3	314:3	10	for
LEAF_NODE	314:3	314:3	11	for
LEAF_NODE	314:7	314:7	10	(
FOR_INIT	314:8	314:15	10	col = 0 ;
EXPR	314:8	314:8	11	col = 0
ASSIGN	314:8	314:14	12	col = 0
LVAL	314:8	314:8	13	col
FIELD	314:8	314:8	14	col
LEAF_NODE	314:8	314:8	15	col
ASSIGN_OP	314:12	314:12	13	=
LEAF_NODE	314:12	314:12	14	=
RVAL	314:14	314:14	13	0
FIELD	314:14	314:14	14	0
LEAF_NODE	314:14	314:14	15	0
LEAF_NODE	314:15	314:15	11	;
CONDITION	314:17	314:17	10	col < w
EXPR	314:17	314:23	11	col < w
FIELD	314:17	314:17	12	col
LEAF_NODE	314:17	314:17	13	col
REL_OPERATOR	314:21	314:21	12	<
LEAF_NODE	314:21	314:21	13	<
FIELD	314:23	314:23	12	w
LEAF_NODE	314:23	314:23	13	w
LEAF_NODE	314:24	314:24	10	;
FOR_EXPR	314:26	314:26	10	col += tw
EXPR	314:26	314:26	11	col += tw
ASSIGN	314:26	314:33	12	col += tw
LVAL	314:26	314:26	13	col
FIELD	314:26	314:26	14	col
LEAF_NODE	314:26	314:26	15	col
ASSIGN_OP	314:30	314:30	13	+=
LEAF_NODE	314:30	314:30	14	+=
RVAL	314:33	314:33	13	tw
FIELD	314:33	314:33	14	tw
LEAF_NODE	314:33	314:33	15	tw
LEAF_NODE	314:35	314:35	10	)
STATEMENTS	314:37	320:3	10	
LEAF_NODE	314:37	314:37	11	{
STATEMENTS	315:4	318:6	11	
SELECTION	315:4	315:52	12	
KEYWORD	315:4	315:4	13	if
LEAF_NODE	315:4	315:4	14	if
LEAF_NODE	315:7	315:7	13	(
CONDITION	315:8	315:8	13	TIFFReadTile ( tif , buf , col , row , 0 , 0 ) < 0
EXPR	315:8	315:49	14	TIFFReadTile ( tif , buf , col , row , 0 , 0 ) < 0
FUNCTION_CALL	315:8	315:45	15	TIFFReadTile ( tif , buf , col , row , 0 , 0 )
CALLEE	315:8	315:8	16	TIFFReadTile
LEAF_NODE	315:8	315:8	17	TIFFReadTile
LEAF_NODE	315:20	315:20	16	(
ARGUMENT	315:21	315:21	16	tif
FIELD	315:21	315:21	17	tif
LEAF_NODE	315:21	315:21	18	tif
LEAF_NODE	315:24	315:24	16	,
ARGUMENT	315:26	315:26	16	buf
FIELD	315:26	315:26	17	buf
LEAF_NODE	315:26	315:26	18	buf
LEAF_NODE	315:29	315:29	16	,
ARGUMENT	315:31	315:31	16	col
FIELD	315:31	315:31	17	col
LEAF_NODE	315:31	315:31	18	col
LEAF_NODE	315:34	315:34	16	,
ARGUMENT	315:36	315:36	16	row
FIELD	315:36	315:36	17	row
LEAF_NODE	315:36	315:36	18	row
LEAF_NODE	315:39	315:39	16	,
ARGUMENT	315:41	315:41	16	0
FIELD	315:41	315:41	17	0
LEAF_NODE	315:41	315:41	18	0
LEAF_NODE	315:42	315:42	16	,
ARGUMENT	315:44	315:44	16	0
FIELD	315:44	315:44	17	0
LEAF_NODE	315:44	315:44	18	0
LEAF_NODE	315:45	315:45	16	)
REL_OPERATOR	315:47	315:47	15	<
LEAF_NODE	315:47	315:47	16	<
FIELD	315:49	315:49	15	0
LEAF_NODE	315:49	315:49	16	0
LEAF_NODE	315:50	315:50	13	)
STATEMENTS	315:52	318:4	13	
LEAF_NODE	315:52	315:52	14	{
STATEMENTS	316:5	316:5	14	
SELECTION	316:5	317:6	15	
KEYWORD	316:5	316:5	16	if
LEAF_NODE	316:5	316:5	17	if
LEAF_NODE	316:8	316:8	16	(
CONDITION	316:9	316:9	16	stoponerr
EXPR	316:9	316:9	17	stoponerr
FIELD	316:9	316:9	18	stoponerr
LEAF_NODE	316:9	316:9	19	stoponerr
LEAF_NODE	316:18	316:18	16	)
STATEMENTS	317:6	317:6	16	
JUMP_STATEMENT	317:6	317:11	17	break DESTINATION ;
KEYWORD	317:6	317:6	18	break
LEAF_NODE	317:6	317:6	19	break
LEAF_NODE	0:0	0:0	18	DESTINATION
LEAF_NODE	317:11	317:11	18	;
LEAF_NODE	318:4	318:4	14	}
SELECTION	318:6	318:11	12	
KEYWORD	318:6	318:6	13	else
LEAF_NODE	318:6	318:6	14	else
STATEMENTS	318:11	318:11	13	
SELECTION	318:11	319:5	14	
KEYWORD	318:11	318:11	15	if
LEAF_NODE	318:11	318:11	16	if
LEAF_NODE	318:14	318:14	15	(
CONDITION	318:15	318:15	15	showdata
EXPR	318:15	318:15	16	showdata
FIELD	318:15	318:15	17	showdata
LEAF_NODE	318:15	318:15	18	showdata
LEAF_NODE	318:23	318:23	15	)
STATEMENTS	319:5	319:5	15	
EXPR_STATEMENT	319:5	319:57	16	ShowTile ( row , col , ( tsample_t ) - 1 , buf , th , rowsize ) ;
EXPR	319:5	319:5	17	ShowTile ( row , col , ( tsample_t ) - 1 , buf , th , rowsize )
FUNCTION_CALL	319:5	319:56	18	ShowTile ( row , col , ( tsample_t ) - 1 , buf , th , rowsize )
CALLEE	319:5	319:5	19	ShowTile
LEAF_NODE	319:5	319:5	20	ShowTile
LEAF_NODE	319:13	319:13	19	(
ARGUMENT	319:14	319:14	19	row
FIELD	319:14	319:14	20	row
LEAF_NODE	319:14	319:14	21	row
LEAF_NODE	319:17	319:17	19	,
ARGUMENT	319:19	319:19	19	col
FIELD	319:19	319:19	20	col
LEAF_NODE	319:19	319:19	21	col
LEAF_NODE	319:22	319:22	19	,
ARGUMENT	319:24	319:36	19	( tsample_t ) - 1
LEAF_NODE	319:24	319:24	20	(
TYPE_NAME	319:25	319:25	20	tsample_t
LEAF_NODE	319:25	319:25	21	tsample_t
LEAF_NODE	319:34	319:34	20	)
UNARY_EXPR	319:36	319:37	20	- 1
UNARY_OPERATOR	319:36	319:36	21	-
LEAF_NODE	319:36	319:36	22	-
FIELD	319:37	319:37	21	1
LEAF_NODE	319:37	319:37	22	1
LEAF_NODE	319:38	319:38	19	,
ARGUMENT	319:40	319:40	19	buf
FIELD	319:40	319:40	20	buf
LEAF_NODE	319:40	319:40	21	buf
LEAF_NODE	319:43	319:43	19	,
ARGUMENT	319:45	319:45	19	th
FIELD	319:45	319:45	20	th
LEAF_NODE	319:45	319:45	21	th
LEAF_NODE	319:47	319:47	19	,
ARGUMENT	319:49	319:49	19	rowsize
FIELD	319:49	319:49	20	rowsize
LEAF_NODE	319:49	319:49	21	rowsize
LEAF_NODE	319:56	319:56	19	)
LEAF_NODE	319:57	319:57	17	;
LEAF_NODE	320:3	320:3	11	}
LEAF_NODE	321:2	321:2	8	}
EXPR_STATEMENT	322:2	322:16	6	_TIFFfree ( buf ) ;
EXPR	322:2	322:2	7	_TIFFfree ( buf )
FUNCTION_CALL	322:2	322:15	8	_TIFFfree ( buf )
CALLEE	322:2	322:2	9	_TIFFfree
LEAF_NODE	322:2	322:2	10	_TIFFfree
LEAF_NODE	322:11	322:11	9	(
ARGUMENT	322:12	322:12	9	buf
FIELD	322:12	322:12	10	buf
LEAF_NODE	322:12	322:12	11	buf
LEAF_NODE	322:15	322:15	9	)
LEAF_NODE	322:16	322:16	7	;
LEAF_NODE	323:1	323:1	5	}
LEAF_NODE	324:0	324:0	2	}
FUNCTION_DEF	326:0	363:0	1	
RETURN_TYPE	326:0	326:0	2	void
TYPE_NAME	326:0	326:0	3	void
LEAF_NODE	326:0	326:0	4	void
FUNCTION_NAME	327:0	327:0	2	TIFFReadSeparateTileData
LEAF_NODE	327:0	327:0	3	TIFFReadSeparateTileData
PARAMETER_LIST	327:24	327:34	2	( TIFF * tif )
LEAF_NODE	327:24	327:24	3	(
PARAMETER_DECL	327:25	327:31	3	TIFF * tif
TYPE	327:25	327:29	4	TIFF *
TYPE_NAME	327:25	327:25	5	TIFF
LEAF_NODE	327:25	327:25	6	TIFF
POINTER	327:29	327:29	5	*
LEAF_NODE	327:29	327:29	6	*
NAME	327:31	327:31	4	tif
LEAF_NODE	327:31	327:31	5	tif
LEAF_NODE	327:34	327:34	3	)
LEAF_NODE	328:0	328:0	2	{
STATEMENTS	329:1	334:1	2	
SIMPLE_DECL	329:1	329:19	3	unsigned char * buf ;
VAR_DECL	329:1	329:16	4	unsigned char * buf
TYPE	329:1	329:15	5	unsigned char *
TYPE_NAME	329:1	329:10	6	unsigned char
LEAF_NODE	329:1	329:1	7	unsigned
LEAF_NODE	329:10	329:10	7	char
POINTER	329:15	329:15	6	*
LEAF_NODE	329:15	329:15	7	*
NAME	329:16	329:16	5	buf
LEAF_NODE	329:16	329:16	6	buf
LEAF_NODE	329:19	329:19	4	;
SIMPLE_DECL	330:8	330:47	3	tmsize_t rowsize ; rowsize = TIFFTileRowSize ( tif ) ;
VAR_DECL	330:8	330:17	4	tmsize_t rowsize ; rowsize = TIFFTileRowSize ( tif )
TYPE	330:8	330:8	5	tmsize_t
TYPE_NAME	330:8	330:8	6	tmsize_t
LEAF_NODE	330:8	330:8	7	tmsize_t
NAME	330:17	330:17	5	rowsize
LEAF_NODE	330:17	330:17	6	rowsize
LEAF_NODE	0:0	0:0	5	;
INIT	330:17	330:17	5	rowsize = TIFFTileRowSize ( tif )
ASSIGN	330:17	330:27	6	rowsize = TIFFTileRowSize ( tif )
LVAL	330:17	330:17	7	rowsize
NAME	330:17	330:17	8	rowsize
LEAF_NODE	330:17	330:17	9	rowsize
ASSIGN_OP	330:25	330:25	7	=
LEAF_NODE	330:25	330:25	8	=
RVAL	330:27	330:27	7	TIFFTileRowSize ( tif )
FUNCTION_CALL	330:27	330:46	8	TIFFTileRowSize ( tif )
CALLEE	330:27	330:27	9	TIFFTileRowSize
LEAF_NODE	330:27	330:27	10	TIFFTileRowSize
LEAF_NODE	330:42	330:42	9	(
ARGUMENT	330:43	330:43	9	tif
FIELD	330:43	330:43	10	tif
LEAF_NODE	330:43	330:43	11	tif
LEAF_NODE	330:46	330:46	9	)
LEAF_NODE	330:47	330:47	4	;
SIMPLE_DECL	331:8	331:45	3	tmsize_t tilesize ; tilesize = TIFFTileSize ( tif ) ;
VAR_DECL	331:8	331:17	4	tmsize_t tilesize ; tilesize = TIFFTileSize ( tif )
TYPE	331:8	331:8	5	tmsize_t
TYPE_NAME	331:8	331:8	6	tmsize_t
LEAF_NODE	331:8	331:8	7	tmsize_t
NAME	331:17	331:17	5	tilesize
LEAF_NODE	331:17	331:17	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	331:17	331:17	5	tilesize = TIFFTileSize ( tif )
ASSIGN	331:17	331:28	6	tilesize = TIFFTileSize ( tif )
LVAL	331:17	331:17	7	tilesize
NAME	331:17	331:17	8	tilesize
LEAF_NODE	331:17	331:17	9	tilesize
ASSIGN_OP	331:26	331:26	7	=
LEAF_NODE	331:26	331:26	8	=
RVAL	331:28	331:28	7	TIFFTileSize ( tif )
FUNCTION_CALL	331:28	331:44	8	TIFFTileSize ( tif )
CALLEE	331:28	331:28	9	TIFFTileSize
LEAF_NODE	331:28	331:28	10	TIFFTileSize
LEAF_NODE	331:40	331:40	9	(
ARGUMENT	331:41	331:41	9	tif
FIELD	331:41	331:41	10	tif
LEAF_NODE	331:41	331:41	11	tif
LEAF_NODE	331:44	331:44	9	)
LEAF_NODE	331:45	331:45	4	;
EXPR_STATEMENT	333:1	333:45	3	buf = ( unsigned char * ) _TIFFmalloc ( tilesize ) ;
EXPR	333:1	333:1	4	buf = ( unsigned char * ) _TIFFmalloc ( tilesize )
ASSIGN	333:1	333:7	5	buf = ( unsigned char * ) _TIFFmalloc ( tilesize )
LVAL	333:1	333:1	6	buf
FIELD	333:1	333:1	7	buf
LEAF_NODE	333:1	333:1	8	buf
ASSIGN_OP	333:5	333:5	6	=
LEAF_NODE	333:5	333:5	7	=
RVAL	333:7	333:24	6	( unsigned char * ) _TIFFmalloc ( tilesize )
LEAF_NODE	333:7	333:7	7	(
TYPE_NAME	333:8	333:17	7	unsigned char
LEAF_NODE	333:8	333:8	8	unsigned
LEAF_NODE	333:17	333:17	8	char
LEAF_NODE	333:22	333:22	7	*
LEAF_NODE	333:23	333:23	7	)
FUNCTION_CALL	333:24	333:44	7	_TIFFmalloc ( tilesize )
CALLEE	333:24	333:24	8	_TIFFmalloc
LEAF_NODE	333:24	333:24	9	_TIFFmalloc
LEAF_NODE	333:35	333:35	8	(
ARGUMENT	333:36	333:36	8	tilesize
FIELD	333:36	333:36	9	tilesize
LEAF_NODE	333:36	333:36	10	tilesize
LEAF_NODE	333:44	333:44	8	)
LEAF_NODE	333:45	333:45	4	;
SELECTION	334:1	334:10	3	
KEYWORD	334:1	334:1	4	if
LEAF_NODE	334:1	334:1	5	if
LEAF_NODE	334:4	334:4	4	(
CONDITION	334:5	334:5	4	buf
EXPR	334:5	334:5	5	buf
FIELD	334:5	334:5	6	buf
LEAF_NODE	334:5	334:5	7	buf
LEAF_NODE	334:8	334:8	4	)
STATEMENTS	334:10	362:1	4	
LEAF_NODE	334:10	334:10	5	{
STATEMENTS	335:2	361:2	5	
SIMPLE_DECL	335:2	335:29	6	uint32 tw ; tw = 0 , uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0 ;
INIT_DECL_LIST	335:2	335:2	7	uint32 tw ; tw = 0 , uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	335:2	335:9	8	uint32 tw ; tw = 0
TYPE	335:2	335:2	9	uint32
TYPE_NAME	335:2	335:2	10	uint32
LEAF_NODE	335:2	335:2	11	uint32
NAME	335:9	335:9	9	tw
LEAF_NODE	335:9	335:9	10	tw
LEAF_NODE	0:0	0:0	9	;
INIT	335:9	335:9	9	tw = 0
ASSIGN	335:9	335:12	10	tw = 0
LVAL	335:9	335:9	11	tw
NAME	335:9	335:9	12	tw
LEAF_NODE	335:9	335:9	13	tw
ASSIGN_OP	335:11	335:11	11	=
LEAF_NODE	335:11	335:11	12	=
RVAL	335:12	335:12	11	0
FIELD	335:12	335:12	12	0
LEAF_NODE	335:12	335:12	13	0
LEAF_NODE	335:13	335:13	8	,
INIT_DECL_LIST	335:2	335:2	8	uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	335:2	335:15	9	uint32 th ; th = 0
TYPE	335:2	335:2	10	uint32
TYPE_NAME	335:2	335:2	11	uint32
LEAF_NODE	335:2	335:2	12	uint32
NAME	335:15	335:15	10	th
LEAF_NODE	335:15	335:15	11	th
LEAF_NODE	0:0	0:0	10	;
INIT	335:15	335:15	10	th = 0
ASSIGN	335:15	335:18	11	th = 0
LVAL	335:15	335:15	12	th
NAME	335:15	335:15	13	th
LEAF_NODE	335:15	335:15	14	th
ASSIGN_OP	335:17	335:17	12	=
LEAF_NODE	335:17	335:17	13	=
RVAL	335:18	335:18	12	0
FIELD	335:18	335:18	13	0
LEAF_NODE	335:18	335:18	14	0
LEAF_NODE	335:19	335:19	9	,
INIT_DECL_LIST	335:2	335:2	9	uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	335:2	335:21	10	uint32 w ; w = 0
TYPE	335:2	335:2	11	uint32
TYPE_NAME	335:2	335:2	12	uint32
LEAF_NODE	335:2	335:2	13	uint32
NAME	335:21	335:21	11	w
LEAF_NODE	335:21	335:21	12	w
LEAF_NODE	0:0	0:0	11	;
INIT	335:21	335:21	11	w = 0
ASSIGN	335:21	335:23	12	w = 0
LVAL	335:21	335:21	13	w
NAME	335:21	335:21	14	w
LEAF_NODE	335:21	335:21	15	w
ASSIGN_OP	335:22	335:22	13	=
LEAF_NODE	335:22	335:22	14	=
RVAL	335:23	335:23	13	0
FIELD	335:23	335:23	14	0
LEAF_NODE	335:23	335:23	15	0
LEAF_NODE	335:24	335:24	10	,
VAR_DECL	335:2	335:26	10	uint32 h ; h = 0
TYPE	335:2	335:2	11	uint32
TYPE_NAME	335:2	335:2	12	uint32
LEAF_NODE	335:2	335:2	13	uint32
NAME	335:26	335:26	11	h
LEAF_NODE	335:26	335:26	12	h
LEAF_NODE	0:0	0:0	11	;
INIT	335:26	335:26	11	h = 0
ASSIGN	335:26	335:28	12	h = 0
LVAL	335:26	335:26	13	h
NAME	335:26	335:26	14	h
LEAF_NODE	335:26	335:26	15	h
ASSIGN_OP	335:27	335:27	13	=
LEAF_NODE	335:27	335:27	14	=
RVAL	335:28	335:28	13	0
FIELD	335:28	335:28	14	0
LEAF_NODE	335:28	335:28	15	0
LEAF_NODE	335:29	335:29	7	;
SIMPLE_DECL	336:2	336:17	6	uint32 row , uint32 col ;
INIT_DECL_LIST	336:2	336:2	7	uint32 row , uint32 col
VAR_DECL	336:2	336:9	8	uint32 row
TYPE	336:2	336:2	9	uint32
TYPE_NAME	336:2	336:2	10	uint32
LEAF_NODE	336:2	336:2	11	uint32
NAME	336:9	336:9	9	row
LEAF_NODE	336:9	336:9	10	row
LEAF_NODE	336:12	336:12	8	,
VAR_DECL	336:2	336:14	8	uint32 col
TYPE	336:2	336:2	9	uint32
TYPE_NAME	336:2	336:2	10	uint32
LEAF_NODE	336:2	336:2	11	uint32
NAME	336:14	336:14	9	col
LEAF_NODE	336:14	336:14	10	col
LEAF_NODE	336:17	336:17	7	;
SIMPLE_DECL	337:2	337:32	6	tsample_t s , tsample_t samplesperpixel ; samplesperpixel = 0 ;
INIT_DECL_LIST	337:2	337:2	7	tsample_t s , tsample_t samplesperpixel ; samplesperpixel = 0
VAR_DECL	337:2	337:12	8	tsample_t s
TYPE	337:2	337:2	9	tsample_t
TYPE_NAME	337:2	337:2	10	tsample_t
LEAF_NODE	337:2	337:2	11	tsample_t
NAME	337:12	337:12	9	s
LEAF_NODE	337:12	337:12	10	s
LEAF_NODE	337:13	337:13	8	,
VAR_DECL	337:2	337:15	8	tsample_t samplesperpixel ; samplesperpixel = 0
TYPE	337:2	337:2	9	tsample_t
TYPE_NAME	337:2	337:2	10	tsample_t
LEAF_NODE	337:2	337:2	11	tsample_t
NAME	337:15	337:15	9	samplesperpixel
LEAF_NODE	337:15	337:15	10	samplesperpixel
LEAF_NODE	0:0	0:0	9	;
INIT	337:15	337:15	9	samplesperpixel = 0
ASSIGN	337:15	337:31	10	samplesperpixel = 0
LVAL	337:15	337:15	11	samplesperpixel
NAME	337:15	337:15	12	samplesperpixel
LEAF_NODE	337:15	337:15	13	samplesperpixel
ASSIGN_OP	337:30	337:30	11	=
LEAF_NODE	337:30	337:30	12	=
RVAL	337:31	337:31	11	0
FIELD	337:31	337:31	12	0
LEAF_NODE	337:31	337:31	13	0
LEAF_NODE	337:32	337:32	7	;
EXPR_STATEMENT	339:2	339:43	6	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w ) ;
EXPR	339:2	339:2	7	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
FUNCTION_CALL	339:2	339:42	8	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
CALLEE	339:2	339:2	9	TIFFGetField
LEAF_NODE	339:2	339:2	10	TIFFGetField
LEAF_NODE	339:14	339:14	9	(
ARGUMENT	339:15	339:15	9	tif
FIELD	339:15	339:15	10	tif
LEAF_NODE	339:15	339:15	11	tif
LEAF_NODE	339:18	339:18	9	,
ARGUMENT	339:20	339:20	9	TIFFTAG_IMAGEWIDTH
FIELD	339:20	339:20	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	339:20	339:20	11	TIFFTAG_IMAGEWIDTH
LEAF_NODE	339:38	339:38	9	,
ARGUMENT	339:40	339:40	9	& w
UNARY_EXPR	339:40	339:41	10	& w
UNARY_OPERATOR	339:40	339:40	11	&
LEAF_NODE	339:40	339:40	12	&
FIELD	339:41	339:41	11	w
LEAF_NODE	339:41	339:41	12	w
LEAF_NODE	339:42	339:42	9	)
LEAF_NODE	339:43	339:43	7	;
EXPR_STATEMENT	340:2	340:44	6	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	340:2	340:2	7	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	340:2	340:43	8	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
CALLEE	340:2	340:2	9	TIFFGetField
LEAF_NODE	340:2	340:2	10	TIFFGetField
LEAF_NODE	340:14	340:14	9	(
ARGUMENT	340:15	340:15	9	tif
FIELD	340:15	340:15	10	tif
LEAF_NODE	340:15	340:15	11	tif
LEAF_NODE	340:18	340:18	9	,
ARGUMENT	340:20	340:20	9	TIFFTAG_IMAGELENGTH
FIELD	340:20	340:20	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	340:20	340:20	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	340:39	340:39	9	,
ARGUMENT	340:41	340:41	9	& h
UNARY_EXPR	340:41	340:42	10	& h
UNARY_OPERATOR	340:41	340:41	11	&
LEAF_NODE	340:41	340:41	12	&
FIELD	340:42	340:42	11	h
LEAF_NODE	340:42	340:42	12	h
LEAF_NODE	340:43	340:43	9	)
LEAF_NODE	340:44	340:44	7	;
EXPR_STATEMENT	341:2	341:43	6	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	341:2	341:2	7	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
FUNCTION_CALL	341:2	341:42	8	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
CALLEE	341:2	341:2	9	TIFFGetField
LEAF_NODE	341:2	341:2	10	TIFFGetField
LEAF_NODE	341:14	341:14	9	(
ARGUMENT	341:15	341:15	9	tif
FIELD	341:15	341:15	10	tif
LEAF_NODE	341:15	341:15	11	tif
LEAF_NODE	341:18	341:18	9	,
ARGUMENT	341:20	341:20	9	TIFFTAG_TILEWIDTH
FIELD	341:20	341:20	10	TIFFTAG_TILEWIDTH
LEAF_NODE	341:20	341:20	11	TIFFTAG_TILEWIDTH
LEAF_NODE	341:37	341:37	9	,
ARGUMENT	341:39	341:39	9	& tw
UNARY_EXPR	341:39	341:40	10	& tw
UNARY_OPERATOR	341:39	341:39	11	&
LEAF_NODE	341:39	341:39	12	&
FIELD	341:40	341:40	11	tw
LEAF_NODE	341:40	341:40	12	tw
LEAF_NODE	341:42	341:42	9	)
LEAF_NODE	341:43	341:43	7	;
EXPR_STATEMENT	342:2	342:44	6	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th ) ;
EXPR	342:2	342:2	7	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
FUNCTION_CALL	342:2	342:43	8	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
CALLEE	342:2	342:2	9	TIFFGetField
LEAF_NODE	342:2	342:2	10	TIFFGetField
LEAF_NODE	342:14	342:14	9	(
ARGUMENT	342:15	342:15	9	tif
FIELD	342:15	342:15	10	tif
LEAF_NODE	342:15	342:15	11	tif
LEAF_NODE	342:18	342:18	9	,
ARGUMENT	342:20	342:20	9	TIFFTAG_TILELENGTH
FIELD	342:20	342:20	10	TIFFTAG_TILELENGTH
LEAF_NODE	342:20	342:20	11	TIFFTAG_TILELENGTH
LEAF_NODE	342:38	342:38	9	,
ARGUMENT	342:40	342:40	9	& th
UNARY_EXPR	342:40	342:41	10	& th
UNARY_OPERATOR	342:40	342:40	11	&
LEAF_NODE	342:40	342:40	12	&
FIELD	342:41	342:41	11	th
LEAF_NODE	342:41	342:41	12	th
LEAF_NODE	342:43	342:43	9	)
LEAF_NODE	342:44	342:44	7	;
EXPR_STATEMENT	343:2	343:62	6	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel ) ;
EXPR	343:2	343:2	7	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
FUNCTION_CALL	343:2	343:61	8	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
CALLEE	343:2	343:2	9	TIFFGetField
LEAF_NODE	343:2	343:2	10	TIFFGetField
LEAF_NODE	343:14	343:14	9	(
ARGUMENT	343:15	343:15	9	tif
FIELD	343:15	343:15	10	tif
LEAF_NODE	343:15	343:15	11	tif
LEAF_NODE	343:18	343:18	9	,
ARGUMENT	343:20	343:20	9	TIFFTAG_SAMPLESPERPIXEL
FIELD	343:20	343:20	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	343:20	343:20	11	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	343:43	343:43	9	,
ARGUMENT	343:45	343:45	9	& samplesperpixel
UNARY_EXPR	343:45	343:46	10	& samplesperpixel
UNARY_OPERATOR	343:45	343:45	11	&
LEAF_NODE	343:45	343:45	12	&
FIELD	343:46	343:46	11	samplesperpixel
LEAF_NODE	343:46	343:46	12	samplesperpixel
LEAF_NODE	343:61	343:61	9	)
LEAF_NODE	343:62	343:62	7	;
SELECTION	344:16	345:8	6	
KEYWORD	344:16	344:16	7	if
LEAF_NODE	344:16	344:16	8	if
LEAF_NODE	344:19	344:19	7	(
CONDITION	344:21	344:21	7	rowsize == 0 || th > ( size_t ) ( tilesize / rowsize )
EXPR	344:21	344:21	8	rowsize == 0 || th > ( size_t ) ( tilesize / rowsize )
OR	344:21	344:37	9	rowsize == 0 || th > ( size_t ) ( tilesize / rowsize )
EXPR	344:21	344:32	10	rowsize == 0
FIELD	344:21	344:21	11	rowsize
LEAF_NODE	344:21	344:21	12	rowsize
EQ_OPERATOR	344:29	344:29	11	==
LEAF_NODE	344:29	344:29	12	==
FIELD	344:32	344:32	11	0
LEAF_NODE	344:32	344:32	12	0
LEAF_NODE	344:34	344:34	10	||
EXPR	344:37	344:70	10	th > ( size_t ) ( tilesize / rowsize )
FIELD	344:37	344:37	11	th
LEAF_NODE	344:37	344:37	12	th
REL_OPERATOR	344:40	344:40	11	>
LEAF_NODE	344:40	344:40	12	>
LEAF_NODE	344:42	344:42	11	(
TYPE_NAME	344:43	344:43	11	size_t
LEAF_NODE	344:43	344:43	12	size_t
LEAF_NODE	344:49	344:49	11	)
LEAF_NODE	344:51	344:51	11	(
FIELD	344:52	344:52	11	tilesize
LEAF_NODE	344:52	344:52	12	tilesize
LEAF_NODE	344:61	344:61	11	/
FIELD	344:63	344:63	11	rowsize
LEAF_NODE	344:63	344:63	12	rowsize
LEAF_NODE	344:70	344:70	11	)
LEAF_NODE	344:72	344:72	7	)
STATEMENTS	345:8	349:8	7	
LEAF_NODE	345:8	345:8	8	{
STATEMENTS	346:12	348:12	8	
EXPR_STATEMENT	346:12	346:77	9	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" ) ;
EXPR	346:12	346:12	10	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" )
FUNCTION_CALL	346:12	346:76	11	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" )
CALLEE	346:12	346:12	12	fprintf
LEAF_NODE	346:12	346:12	13	fprintf
LEAF_NODE	346:19	346:19	12	(
ARGUMENT	346:20	346:20	12	stderr
FIELD	346:20	346:20	13	stderr
LEAF_NODE	346:20	346:20	14	stderr
LEAF_NODE	346:26	346:26	12	,
ARGUMENT	346:28	346:28	12	"Cannot display data: th * rowsize > tilesize\n"
FIELD	346:28	346:28	13	"Cannot display data: th * rowsize > tilesize\n"
LEAF_NODE	346:28	346:28	14	"Cannot display data: th * rowsize > tilesize\n"
LEAF_NODE	346:76	346:76	12	)
LEAF_NODE	346:77	346:77	10	;
EXPR_STATEMENT	347:12	347:26	9	_TIFFfree ( buf ) ;
EXPR	347:12	347:12	10	_TIFFfree ( buf )
FUNCTION_CALL	347:12	347:25	11	_TIFFfree ( buf )
CALLEE	347:12	347:12	12	_TIFFfree
LEAF_NODE	347:12	347:12	13	_TIFFfree
LEAF_NODE	347:21	347:21	12	(
ARGUMENT	347:22	347:22	12	buf
FIELD	347:22	347:22	13	buf
LEAF_NODE	347:22	347:22	14	buf
LEAF_NODE	347:25	347:25	12	)
LEAF_NODE	347:26	347:26	10	;
JUMP_STATEMENT	348:12	348:18	9	return DESTINATION ;
KEYWORD	348:12	348:12	10	return
LEAF_NODE	348:12	348:12	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	348:18	348:18	10	;
LEAF_NODE	349:8	349:8	8	}
ITERATION	350:2	350:36	6	
KEYWORD	350:2	350:2	7	for
LEAF_NODE	350:2	350:2	8	for
LEAF_NODE	350:6	350:6	7	(
FOR_INIT	350:7	350:14	7	row = 0 ;
EXPR	350:7	350:7	8	row = 0
ASSIGN	350:7	350:13	9	row = 0
LVAL	350:7	350:7	10	row
FIELD	350:7	350:7	11	row
LEAF_NODE	350:7	350:7	12	row
ASSIGN_OP	350:11	350:11	10	=
LEAF_NODE	350:11	350:11	11	=
RVAL	350:13	350:13	10	0
FIELD	350:13	350:13	11	0
LEAF_NODE	350:13	350:13	12	0
LEAF_NODE	350:14	350:14	8	;
CONDITION	350:16	350:16	7	row < h
EXPR	350:16	350:22	8	row < h
FIELD	350:16	350:16	9	row
LEAF_NODE	350:16	350:16	10	row
REL_OPERATOR	350:20	350:20	9	<
LEAF_NODE	350:20	350:20	10	<
FIELD	350:22	350:22	9	h
LEAF_NODE	350:22	350:22	10	h
LEAF_NODE	350:23	350:23	7	;
FOR_EXPR	350:25	350:25	7	row += th
EXPR	350:25	350:25	8	row += th
ASSIGN	350:25	350:32	9	row += th
LVAL	350:25	350:25	10	row
FIELD	350:25	350:25	11	row
LEAF_NODE	350:25	350:25	12	row
ASSIGN_OP	350:29	350:29	10	+=
LEAF_NODE	350:29	350:29	11	+=
RVAL	350:32	350:32	10	th
FIELD	350:32	350:32	11	th
LEAF_NODE	350:32	350:32	12	th
LEAF_NODE	350:34	350:34	7	)
STATEMENTS	350:36	360:2	7	
LEAF_NODE	350:36	350:36	8	{
STATEMENTS	351:3	351:3	8	
ITERATION	351:3	351:37	9	
KEYWORD	351:3	351:3	10	for
LEAF_NODE	351:3	351:3	11	for
LEAF_NODE	351:7	351:7	10	(
FOR_INIT	351:8	351:15	10	col = 0 ;
EXPR	351:8	351:8	11	col = 0
ASSIGN	351:8	351:14	12	col = 0
LVAL	351:8	351:8	13	col
FIELD	351:8	351:8	14	col
LEAF_NODE	351:8	351:8	15	col
ASSIGN_OP	351:12	351:12	13	=
LEAF_NODE	351:12	351:12	14	=
RVAL	351:14	351:14	13	0
FIELD	351:14	351:14	14	0
LEAF_NODE	351:14	351:14	15	0
LEAF_NODE	351:15	351:15	11	;
CONDITION	351:17	351:17	10	col < w
EXPR	351:17	351:23	11	col < w
FIELD	351:17	351:17	12	col
LEAF_NODE	351:17	351:17	13	col
REL_OPERATOR	351:21	351:21	12	<
LEAF_NODE	351:21	351:21	13	<
FIELD	351:23	351:23	12	w
LEAF_NODE	351:23	351:23	13	w
LEAF_NODE	351:24	351:24	10	;
FOR_EXPR	351:26	351:26	10	col += tw
EXPR	351:26	351:26	11	col += tw
ASSIGN	351:26	351:33	12	col += tw
LVAL	351:26	351:26	13	col
FIELD	351:26	351:26	14	col
LEAF_NODE	351:26	351:26	15	col
ASSIGN_OP	351:30	351:30	13	+=
LEAF_NODE	351:30	351:30	14	+=
RVAL	351:33	351:33	13	tw
FIELD	351:33	351:33	14	tw
LEAF_NODE	351:33	351:33	15	tw
LEAF_NODE	351:35	351:35	10	)
STATEMENTS	351:37	359:3	10	
LEAF_NODE	351:37	351:37	11	{
STATEMENTS	352:4	352:4	11	
ITERATION	352:4	352:42	12	
KEYWORD	352:4	352:4	13	for
LEAF_NODE	352:4	352:4	14	for
LEAF_NODE	352:8	352:8	13	(
FOR_INIT	352:9	352:14	13	s = 0 ;
EXPR	352:9	352:9	14	s = 0
ASSIGN	352:9	352:13	15	s = 0
LVAL	352:9	352:9	16	s
FIELD	352:9	352:9	17	s
LEAF_NODE	352:9	352:9	18	s
ASSIGN_OP	352:11	352:11	16	=
LEAF_NODE	352:11	352:11	17	=
RVAL	352:13	352:13	16	0
FIELD	352:13	352:13	17	0
LEAF_NODE	352:13	352:13	18	0
LEAF_NODE	352:14	352:14	14	;
CONDITION	352:16	352:16	13	s < samplesperpixel
EXPR	352:16	352:20	14	s < samplesperpixel
FIELD	352:16	352:16	15	s
LEAF_NODE	352:16	352:16	16	s
REL_OPERATOR	352:18	352:18	15	<
LEAF_NODE	352:18	352:18	16	<
FIELD	352:20	352:20	15	samplesperpixel
LEAF_NODE	352:20	352:20	16	samplesperpixel
LEAF_NODE	352:35	352:35	13	;
FOR_EXPR	352:37	352:37	13	s ++
EXPR	352:37	352:37	14	s ++
FIELD	352:37	352:38	15	s ++
LEAF_NODE	352:37	352:37	16	s
LEAF_NODE	352:38	352:38	16	++
LEAF_NODE	352:40	352:40	13	)
STATEMENTS	352:42	358:4	13	
LEAF_NODE	352:42	352:42	14	{
STATEMENTS	353:5	356:7	14	
SELECTION	353:5	353:53	15	
KEYWORD	353:5	353:5	16	if
LEAF_NODE	353:5	353:5	17	if
LEAF_NODE	353:8	353:8	16	(
CONDITION	353:9	353:9	16	TIFFReadTile ( tif , buf , col , row , 0 , s ) < 0
EXPR	353:9	353:50	17	TIFFReadTile ( tif , buf , col , row , 0 , s ) < 0
FUNCTION_CALL	353:9	353:46	18	TIFFReadTile ( tif , buf , col , row , 0 , s )
CALLEE	353:9	353:9	19	TIFFReadTile
LEAF_NODE	353:9	353:9	20	TIFFReadTile
LEAF_NODE	353:21	353:21	19	(
ARGUMENT	353:22	353:22	19	tif
FIELD	353:22	353:22	20	tif
LEAF_NODE	353:22	353:22	21	tif
LEAF_NODE	353:25	353:25	19	,
ARGUMENT	353:27	353:27	19	buf
FIELD	353:27	353:27	20	buf
LEAF_NODE	353:27	353:27	21	buf
LEAF_NODE	353:30	353:30	19	,
ARGUMENT	353:32	353:32	19	col
FIELD	353:32	353:32	20	col
LEAF_NODE	353:32	353:32	21	col
LEAF_NODE	353:35	353:35	19	,
ARGUMENT	353:37	353:37	19	row
FIELD	353:37	353:37	20	row
LEAF_NODE	353:37	353:37	21	row
LEAF_NODE	353:40	353:40	19	,
ARGUMENT	353:42	353:42	19	0
FIELD	353:42	353:42	20	0
LEAF_NODE	353:42	353:42	21	0
LEAF_NODE	353:43	353:43	19	,
ARGUMENT	353:45	353:45	19	s
FIELD	353:45	353:45	20	s
LEAF_NODE	353:45	353:45	21	s
LEAF_NODE	353:46	353:46	19	)
REL_OPERATOR	353:48	353:48	18	<
LEAF_NODE	353:48	353:48	19	<
FIELD	353:50	353:50	18	0
LEAF_NODE	353:50	353:50	19	0
LEAF_NODE	353:51	353:51	16	)
STATEMENTS	353:53	356:5	16	
LEAF_NODE	353:53	353:53	17	{
STATEMENTS	354:6	354:6	17	
SELECTION	354:6	355:7	18	
KEYWORD	354:6	354:6	19	if
LEAF_NODE	354:6	354:6	20	if
LEAF_NODE	354:9	354:9	19	(
CONDITION	354:10	354:10	19	stoponerr
EXPR	354:10	354:10	20	stoponerr
FIELD	354:10	354:10	21	stoponerr
LEAF_NODE	354:10	354:10	22	stoponerr
LEAF_NODE	354:19	354:19	19	)
STATEMENTS	355:7	355:7	19	
JUMP_STATEMENT	355:7	355:12	20	break DESTINATION ;
KEYWORD	355:7	355:7	21	break
LEAF_NODE	355:7	355:7	22	break
LEAF_NODE	0:0	0:0	21	DESTINATION
LEAF_NODE	355:12	355:12	21	;
LEAF_NODE	356:5	356:5	17	}
SELECTION	356:7	356:12	15	
KEYWORD	356:7	356:7	16	else
LEAF_NODE	356:7	356:7	17	else
STATEMENTS	356:12	356:12	16	
SELECTION	356:12	357:6	17	
KEYWORD	356:12	356:12	18	if
LEAF_NODE	356:12	356:12	19	if
LEAF_NODE	356:15	356:15	18	(
CONDITION	356:16	356:16	18	showdata
EXPR	356:16	356:16	19	showdata
FIELD	356:16	356:16	20	showdata
LEAF_NODE	356:16	356:16	21	showdata
LEAF_NODE	356:24	356:24	18	)
STATEMENTS	357:6	357:6	18	
EXPR_STATEMENT	357:6	357:45	19	ShowTile ( row , col , s , buf , th , rowsize ) ;
EXPR	357:6	357:6	20	ShowTile ( row , col , s , buf , th , rowsize )
FUNCTION_CALL	357:6	357:44	21	ShowTile ( row , col , s , buf , th , rowsize )
CALLEE	357:6	357:6	22	ShowTile
LEAF_NODE	357:6	357:6	23	ShowTile
LEAF_NODE	357:14	357:14	22	(
ARGUMENT	357:15	357:15	22	row
FIELD	357:15	357:15	23	row
LEAF_NODE	357:15	357:15	24	row
LEAF_NODE	357:18	357:18	22	,
ARGUMENT	357:20	357:20	22	col
FIELD	357:20	357:20	23	col
LEAF_NODE	357:20	357:20	24	col
LEAF_NODE	357:23	357:23	22	,
ARGUMENT	357:25	357:25	22	s
FIELD	357:25	357:25	23	s
LEAF_NODE	357:25	357:25	24	s
LEAF_NODE	357:26	357:26	22	,
ARGUMENT	357:28	357:28	22	buf
FIELD	357:28	357:28	23	buf
LEAF_NODE	357:28	357:28	24	buf
LEAF_NODE	357:31	357:31	22	,
ARGUMENT	357:33	357:33	22	th
FIELD	357:33	357:33	23	th
LEAF_NODE	357:33	357:33	24	th
LEAF_NODE	357:35	357:35	22	,
ARGUMENT	357:37	357:37	22	rowsize
FIELD	357:37	357:37	23	rowsize
LEAF_NODE	357:37	357:37	24	rowsize
LEAF_NODE	357:44	357:44	22	)
LEAF_NODE	357:45	357:45	20	;
LEAF_NODE	358:4	358:4	14	}
LEAF_NODE	359:3	359:3	11	}
LEAF_NODE	360:2	360:2	8	}
EXPR_STATEMENT	361:2	361:16	6	_TIFFfree ( buf ) ;
EXPR	361:2	361:2	7	_TIFFfree ( buf )
FUNCTION_CALL	361:2	361:15	8	_TIFFfree ( buf )
CALLEE	361:2	361:2	9	_TIFFfree
LEAF_NODE	361:2	361:2	10	_TIFFfree
LEAF_NODE	361:11	361:11	9	(
ARGUMENT	361:12	361:12	9	buf
FIELD	361:12	361:12	10	buf
LEAF_NODE	361:12	361:12	11	buf
LEAF_NODE	361:15	361:15	9	)
LEAF_NODE	361:16	361:16	7	;
LEAF_NODE	362:1	362:1	5	}
LEAF_NODE	363:0	363:0	2	}
FUNCTION_DEF	365:0	382:0	1	
RETURN_TYPE	365:0	365:0	2	void
TYPE_NAME	365:0	365:0	3	void
LEAF_NODE	365:0	365:0	4	void
FUNCTION_NAME	366:0	366:0	2	TIFFReadData
LEAF_NODE	366:0	366:0	3	TIFFReadData
PARAMETER_LIST	366:12	366:22	2	( TIFF * tif )
LEAF_NODE	366:12	366:12	3	(
PARAMETER_DECL	366:13	366:19	3	TIFF * tif
TYPE	366:13	366:17	4	TIFF *
TYPE_NAME	366:13	366:13	5	TIFF
LEAF_NODE	366:13	366:13	6	TIFF
POINTER	366:17	366:17	5	*
LEAF_NODE	366:17	366:17	6	*
NAME	366:19	366:19	4	tif
LEAF_NODE	366:19	366:19	5	tif
LEAF_NODE	366:22	366:22	3	)
LEAF_NODE	367:0	367:0	2	{
STATEMENTS	368:1	376:3	2	
SIMPLE_DECL	368:1	368:36	3	uint16 config ; config = PLANARCONFIG_CONTIG ;
VAR_DECL	368:1	368:8	4	uint16 config ; config = PLANARCONFIG_CONTIG
TYPE	368:1	368:1	5	uint16
TYPE_NAME	368:1	368:1	6	uint16
LEAF_NODE	368:1	368:1	7	uint16
NAME	368:8	368:8	5	config
LEAF_NODE	368:8	368:8	6	config
LEAF_NODE	0:0	0:0	5	;
INIT	368:8	368:8	5	config = PLANARCONFIG_CONTIG
ASSIGN	368:8	368:17	6	config = PLANARCONFIG_CONTIG
LVAL	368:8	368:8	7	config
NAME	368:8	368:8	8	config
LEAF_NODE	368:8	368:8	9	config
ASSIGN_OP	368:15	368:15	7	=
LEAF_NODE	368:15	368:15	8	=
RVAL	368:17	368:17	7	PLANARCONFIG_CONTIG
FIELD	368:17	368:17	8	PLANARCONFIG_CONTIG
LEAF_NODE	368:17	368:17	9	PLANARCONFIG_CONTIG
LEAF_NODE	368:36	368:36	4	;
EXPR_STATEMENT	370:1	370:49	3	TIFFGetField ( tif , TIFFTAG_PLANARCONFIG , & config ) ;
EXPR	370:1	370:1	4	TIFFGetField ( tif , TIFFTAG_PLANARCONFIG , & config )
FUNCTION_CALL	370:1	370:48	5	TIFFGetField ( tif , TIFFTAG_PLANARCONFIG , & config )
CALLEE	370:1	370:1	6	TIFFGetField
LEAF_NODE	370:1	370:1	7	TIFFGetField
LEAF_NODE	370:13	370:13	6	(
ARGUMENT	370:14	370:14	6	tif
FIELD	370:14	370:14	7	tif
LEAF_NODE	370:14	370:14	8	tif
LEAF_NODE	370:17	370:17	6	,
ARGUMENT	370:19	370:19	6	TIFFTAG_PLANARCONFIG
FIELD	370:19	370:19	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	370:19	370:19	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	370:39	370:39	6	,
ARGUMENT	370:41	370:41	6	& config
UNARY_EXPR	370:41	370:42	7	& config
UNARY_OPERATOR	370:41	370:41	8	&
LEAF_NODE	370:41	370:41	9	&
FIELD	370:42	370:42	8	config
LEAF_NODE	370:42	370:42	9	config
LEAF_NODE	370:48	370:48	6	)
LEAF_NODE	370:49	370:49	4	;
SELECTION	371:1	371:23	3	
KEYWORD	371:1	371:1	4	if
LEAF_NODE	371:1	371:1	5	if
LEAF_NODE	371:4	371:4	4	(
CONDITION	371:5	371:5	4	TIFFIsTiled ( tif )
EXPR	371:5	371:5	5	TIFFIsTiled ( tif )
FUNCTION_CALL	371:5	371:20	6	TIFFIsTiled ( tif )
CALLEE	371:5	371:5	7	TIFFIsTiled
LEAF_NODE	371:5	371:5	8	TIFFIsTiled
LEAF_NODE	371:16	371:16	7	(
ARGUMENT	371:17	371:17	7	tif
FIELD	371:17	371:17	8	tif
LEAF_NODE	371:17	371:17	9	tif
LEAF_NODE	371:20	371:20	7	)
LEAF_NODE	371:21	371:21	4	)
STATEMENTS	371:23	376:1	4	
LEAF_NODE	371:23	371:23	5	{
STATEMENTS	372:2	374:2	5	
SELECTION	372:2	373:3	6	
KEYWORD	372:2	372:2	7	if
LEAF_NODE	372:2	372:2	8	if
LEAF_NODE	372:5	372:5	7	(
CONDITION	372:6	372:6	7	config == PLANARCONFIG_CONTIG
EXPR	372:6	372:16	8	config == PLANARCONFIG_CONTIG
FIELD	372:6	372:6	9	config
LEAF_NODE	372:6	372:6	10	config
EQ_OPERATOR	372:13	372:13	9	==
LEAF_NODE	372:13	372:13	10	==
FIELD	372:16	372:16	9	PLANARCONFIG_CONTIG
LEAF_NODE	372:16	372:16	10	PLANARCONFIG_CONTIG
LEAF_NODE	372:35	372:35	7	)
STATEMENTS	373:3	373:3	7	
EXPR_STATEMENT	373:3	373:30	8	TIFFReadContigTileData ( tif ) ;
EXPR	373:3	373:3	9	TIFFReadContigTileData ( tif )
FUNCTION_CALL	373:3	373:29	10	TIFFReadContigTileData ( tif )
CALLEE	373:3	373:3	11	TIFFReadContigTileData
LEAF_NODE	373:3	373:3	12	TIFFReadContigTileData
LEAF_NODE	373:25	373:25	11	(
ARGUMENT	373:26	373:26	11	tif
FIELD	373:26	373:26	12	tif
LEAF_NODE	373:26	373:26	13	tif
LEAF_NODE	373:29	373:29	11	)
LEAF_NODE	373:30	373:30	9	;
SELECTION	374:2	375:3	6	
KEYWORD	374:2	374:2	7	else
LEAF_NODE	374:2	374:2	8	else
STATEMENTS	375:3	375:3	7	
EXPR_STATEMENT	375:3	375:32	8	TIFFReadSeparateTileData ( tif ) ;
EXPR	375:3	375:3	9	TIFFReadSeparateTileData ( tif )
FUNCTION_CALL	375:3	375:31	10	TIFFReadSeparateTileData ( tif )
CALLEE	375:3	375:3	11	TIFFReadSeparateTileData
LEAF_NODE	375:3	375:3	12	TIFFReadSeparateTileData
LEAF_NODE	375:27	375:27	11	(
ARGUMENT	375:28	375:28	11	tif
FIELD	375:28	375:28	12	tif
LEAF_NODE	375:28	375:28	13	tif
LEAF_NODE	375:31	375:31	11	)
LEAF_NODE	375:32	375:32	9	;
LEAF_NODE	376:1	376:1	5	}
SELECTION	376:3	376:8	3	
KEYWORD	376:3	376:3	4	else
LEAF_NODE	376:3	376:3	5	else
STATEMENTS	376:8	381:1	4	
LEAF_NODE	376:8	376:8	5	{
STATEMENTS	377:2	379:2	5	
SELECTION	377:2	378:3	6	
KEYWORD	377:2	377:2	7	if
LEAF_NODE	377:2	377:2	8	if
LEAF_NODE	377:5	377:5	7	(
CONDITION	377:6	377:6	7	config == PLANARCONFIG_CONTIG
EXPR	377:6	377:16	8	config == PLANARCONFIG_CONTIG
FIELD	377:6	377:6	9	config
LEAF_NODE	377:6	377:6	10	config
EQ_OPERATOR	377:13	377:13	9	==
LEAF_NODE	377:13	377:13	10	==
FIELD	377:16	377:16	9	PLANARCONFIG_CONTIG
LEAF_NODE	377:16	377:16	10	PLANARCONFIG_CONTIG
LEAF_NODE	377:35	377:35	7	)
STATEMENTS	378:3	378:3	7	
EXPR_STATEMENT	378:3	378:31	8	TIFFReadContigStripData ( tif ) ;
EXPR	378:3	378:3	9	TIFFReadContigStripData ( tif )
FUNCTION_CALL	378:3	378:30	10	TIFFReadContigStripData ( tif )
CALLEE	378:3	378:3	11	TIFFReadContigStripData
LEAF_NODE	378:3	378:3	12	TIFFReadContigStripData
LEAF_NODE	378:26	378:26	11	(
ARGUMENT	378:27	378:27	11	tif
FIELD	378:27	378:27	12	tif
LEAF_NODE	378:27	378:27	13	tif
LEAF_NODE	378:30	378:30	11	)
LEAF_NODE	378:31	378:31	9	;
SELECTION	379:2	380:3	6	
KEYWORD	379:2	379:2	7	else
LEAF_NODE	379:2	379:2	8	else
STATEMENTS	380:3	380:3	7	
EXPR_STATEMENT	380:3	380:33	8	TIFFReadSeparateStripData ( tif ) ;
EXPR	380:3	380:3	9	TIFFReadSeparateStripData ( tif )
FUNCTION_CALL	380:3	380:32	10	TIFFReadSeparateStripData ( tif )
CALLEE	380:3	380:3	11	TIFFReadSeparateStripData
LEAF_NODE	380:3	380:3	12	TIFFReadSeparateStripData
LEAF_NODE	380:28	380:28	11	(
ARGUMENT	380:29	380:29	11	tif
FIELD	380:29	380:29	12	tif
LEAF_NODE	380:29	380:29	13	tif
LEAF_NODE	380:32	380:32	11	)
LEAF_NODE	380:33	380:33	9	;
LEAF_NODE	381:1	381:1	5	}
LEAF_NODE	382:0	382:0	2	}
FUNCTION_DEF	384:0	395:0	1	
RETURN_TYPE	384:0	384:7	2	static void
LEAF_NODE	384:0	384:0	3	static
TYPE_NAME	384:7	384:7	3	void
LEAF_NODE	384:7	384:7	4	void
FUNCTION_NAME	385:0	385:0	2	ShowRawBytes
LEAF_NODE	385:0	385:0	3	ShowRawBytes
PARAMETER_LIST	385:12	385:40	2	( unsigned char * pp , uint32 n )
LEAF_NODE	385:12	385:12	3	(
PARAMETER_DECL	385:13	385:28	3	unsigned char * pp
TYPE	385:13	385:26	4	unsigned char *
TYPE_NAME	385:13	385:22	5	unsigned char
LEAF_NODE	385:13	385:13	6	unsigned
LEAF_NODE	385:22	385:22	6	char
POINTER	385:26	385:26	5	*
LEAF_NODE	385:26	385:26	6	*
NAME	385:28	385:28	4	pp
LEAF_NODE	385:28	385:28	5	pp
LEAF_NODE	385:30	385:30	3	,
PARAMETER_DECL	385:32	385:39	3	uint32 n
TYPE	385:32	385:32	4	uint32
TYPE_NAME	385:32	385:32	5	uint32
LEAF_NODE	385:32	385:32	6	uint32
NAME	385:39	385:39	4	n
LEAF_NODE	385:39	385:39	5	n
LEAF_NODE	385:40	385:40	3	)
LEAF_NODE	386:0	386:0	2	{
STATEMENTS	387:1	394:1	2	
SIMPLE_DECL	387:1	387:9	3	uint32 i ;
VAR_DECL	387:1	387:8	4	uint32 i
TYPE	387:1	387:1	5	uint32
TYPE_NAME	387:1	387:1	6	uint32
LEAF_NODE	387:1	387:1	7	uint32
NAME	387:8	387:8	5	i
LEAF_NODE	387:8	387:8	6	i
LEAF_NODE	387:9	387:9	4	;
ITERATION	389:1	389:25	3	
KEYWORD	389:1	389:1	4	for
LEAF_NODE	389:1	389:1	5	for
LEAF_NODE	389:5	389:5	4	(
FOR_INIT	389:6	389:11	4	i = 0 ;
EXPR	389:6	389:6	5	i = 0
ASSIGN	389:6	389:10	6	i = 0
LVAL	389:6	389:6	7	i
FIELD	389:6	389:6	8	i
LEAF_NODE	389:6	389:6	9	i
ASSIGN_OP	389:8	389:8	7	=
LEAF_NODE	389:8	389:8	8	=
RVAL	389:10	389:10	7	0
FIELD	389:10	389:10	8	0
LEAF_NODE	389:10	389:10	9	0
LEAF_NODE	389:11	389:11	5	;
CONDITION	389:13	389:13	4	i < n
EXPR	389:13	389:17	5	i < n
FIELD	389:13	389:13	6	i
LEAF_NODE	389:13	389:13	7	i
REL_OPERATOR	389:15	389:15	6	<
LEAF_NODE	389:15	389:15	7	<
FIELD	389:17	389:17	6	n
LEAF_NODE	389:17	389:17	7	n
LEAF_NODE	389:18	389:18	4	;
FOR_EXPR	389:20	389:20	4	i ++
EXPR	389:20	389:20	5	i ++
FIELD	389:20	389:21	6	i ++
LEAF_NODE	389:20	389:20	7	i
LEAF_NODE	389:21	389:21	7	++
LEAF_NODE	389:23	389:23	4	)
STATEMENTS	389:25	393:1	4	
LEAF_NODE	389:25	389:25	5	{
STATEMENTS	390:2	391:2	5	
EXPR_STATEMENT	390:2	390:24	6	printf ( " %02x" , * pp ++ ) ;
EXPR	390:2	390:2	7	printf ( " %02x" , * pp ++ )
FUNCTION_CALL	390:2	390:23	8	printf ( " %02x" , * pp ++ )
CALLEE	390:2	390:2	9	printf
LEAF_NODE	390:2	390:2	10	printf
LEAF_NODE	390:8	390:8	9	(
ARGUMENT	390:9	390:9	9	" %02x"
FIELD	390:9	390:9	10	" %02x"
LEAF_NODE	390:9	390:9	11	" %02x"
LEAF_NODE	390:16	390:16	9	,
ARGUMENT	390:18	390:18	9	* pp ++
UNARY_EXPR	390:18	390:19	10	* pp ++
UNARY_OPERATOR	390:18	390:18	11	*
LEAF_NODE	390:18	390:18	12	*
FIELD	390:19	390:21	11	pp ++
LEAF_NODE	390:19	390:19	12	pp
LEAF_NODE	390:21	390:21	12	++
LEAF_NODE	390:23	390:23	9	)
LEAF_NODE	390:24	390:24	7	;
SELECTION	391:2	392:3	6	
KEYWORD	391:2	391:2	7	if
LEAF_NODE	391:2	391:2	8	if
LEAF_NODE	391:5	391:5	7	(
CONDITION	391:6	391:6	7	( ( i + 1 ) % 24 ) == 0
EXPR	391:6	391:22	8	( ( i + 1 ) % 24 ) == 0
LEAF_NODE	391:6	391:6	9	(
LEAF_NODE	391:7	391:7	9	(
FIELD	391:8	391:8	9	i
LEAF_NODE	391:8	391:8	10	i
LEAF_NODE	391:9	391:9	9	+
FIELD	391:10	391:10	9	1
LEAF_NODE	391:10	391:10	10	1
LEAF_NODE	391:11	391:11	9	)
LEAF_NODE	391:13	391:13	9	%
FIELD	391:15	391:15	9	24
LEAF_NODE	391:15	391:15	10	24
LEAF_NODE	391:17	391:17	9	)
EQ_OPERATOR	391:19	391:19	9	==
LEAF_NODE	391:19	391:19	10	==
FIELD	391:22	391:22	9	0
LEAF_NODE	391:22	391:22	10	0
LEAF_NODE	391:23	391:23	7	)
STATEMENTS	392:3	392:3	7	
EXPR_STATEMENT	392:3	392:16	8	printf ( "\n " ) ;
EXPR	392:3	392:3	9	printf ( "\n " )
FUNCTION_CALL	392:3	392:15	10	printf ( "\n " )
CALLEE	392:3	392:3	11	printf
LEAF_NODE	392:3	392:3	12	printf
LEAF_NODE	392:9	392:9	11	(
ARGUMENT	392:10	392:10	11	"\n "
FIELD	392:10	392:10	12	"\n "
LEAF_NODE	392:10	392:10	13	"\n "
LEAF_NODE	392:15	392:15	11	)
LEAF_NODE	392:16	392:16	9	;
LEAF_NODE	393:1	393:1	5	}
EXPR_STATEMENT	394:1	394:14	3	putchar ( '\n' ) ;
EXPR	394:1	394:1	4	putchar ( '\n' )
FUNCTION_CALL	394:1	394:13	5	putchar ( '\n' )
CALLEE	394:1	394:1	6	putchar
LEAF_NODE	394:1	394:1	7	putchar
LEAF_NODE	394:8	394:8	6	(
ARGUMENT	394:9	394:9	6	'\n'
FIELD	394:9	394:9	7	'\n'
LEAF_NODE	394:9	394:9	8	'\n'
LEAF_NODE	394:13	394:13	6	)
LEAF_NODE	394:14	394:14	4	;
LEAF_NODE	395:0	395:0	2	}
FUNCTION_DEF	397:0	408:0	1	
RETURN_TYPE	397:0	397:7	2	static void
LEAF_NODE	397:0	397:0	3	static
TYPE_NAME	397:7	397:7	3	void
LEAF_NODE	397:7	397:7	4	void
FUNCTION_NAME	398:0	398:0	2	ShowRawWords
LEAF_NODE	398:0	398:0	3	ShowRawWords
PARAMETER_LIST	398:12	398:33	2	( uint16 * pp , uint32 n )
LEAF_NODE	398:12	398:12	3	(
PARAMETER_DECL	398:13	398:21	3	uint16 * pp
TYPE	398:13	398:19	4	uint16 *
TYPE_NAME	398:13	398:13	5	uint16
LEAF_NODE	398:13	398:13	6	uint16
POINTER	398:19	398:19	5	*
LEAF_NODE	398:19	398:19	6	*
NAME	398:21	398:21	4	pp
LEAF_NODE	398:21	398:21	5	pp
LEAF_NODE	398:23	398:23	3	,
PARAMETER_DECL	398:25	398:32	3	uint32 n
TYPE	398:25	398:25	4	uint32
TYPE_NAME	398:25	398:25	5	uint32
LEAF_NODE	398:25	398:25	6	uint32
NAME	398:32	398:32	4	n
LEAF_NODE	398:32	398:32	5	n
LEAF_NODE	398:33	398:33	3	)
LEAF_NODE	399:0	399:0	2	{
STATEMENTS	400:1	407:1	2	
SIMPLE_DECL	400:1	400:9	3	uint32 i ;
VAR_DECL	400:1	400:8	4	uint32 i
TYPE	400:1	400:1	5	uint32
TYPE_NAME	400:1	400:1	6	uint32
LEAF_NODE	400:1	400:1	7	uint32
NAME	400:8	400:8	5	i
LEAF_NODE	400:8	400:8	6	i
LEAF_NODE	400:9	400:9	4	;
ITERATION	402:1	402:25	3	
KEYWORD	402:1	402:1	4	for
LEAF_NODE	402:1	402:1	5	for
LEAF_NODE	402:5	402:5	4	(
FOR_INIT	402:6	402:11	4	i = 0 ;
EXPR	402:6	402:6	5	i = 0
ASSIGN	402:6	402:10	6	i = 0
LVAL	402:6	402:6	7	i
FIELD	402:6	402:6	8	i
LEAF_NODE	402:6	402:6	9	i
ASSIGN_OP	402:8	402:8	7	=
LEAF_NODE	402:8	402:8	8	=
RVAL	402:10	402:10	7	0
FIELD	402:10	402:10	8	0
LEAF_NODE	402:10	402:10	9	0
LEAF_NODE	402:11	402:11	5	;
CONDITION	402:13	402:13	4	i < n
EXPR	402:13	402:17	5	i < n
FIELD	402:13	402:13	6	i
LEAF_NODE	402:13	402:13	7	i
REL_OPERATOR	402:15	402:15	6	<
LEAF_NODE	402:15	402:15	7	<
FIELD	402:17	402:17	6	n
LEAF_NODE	402:17	402:17	7	n
LEAF_NODE	402:18	402:18	4	;
FOR_EXPR	402:20	402:20	4	i ++
EXPR	402:20	402:20	5	i ++
FIELD	402:20	402:21	6	i ++
LEAF_NODE	402:20	402:20	7	i
LEAF_NODE	402:21	402:21	7	++
LEAF_NODE	402:23	402:23	4	)
STATEMENTS	402:25	406:1	4	
LEAF_NODE	402:25	402:25	5	{
STATEMENTS	403:2	404:2	5	
EXPR_STATEMENT	403:2	403:24	6	printf ( " %04x" , * pp ++ ) ;
EXPR	403:2	403:2	7	printf ( " %04x" , * pp ++ )
FUNCTION_CALL	403:2	403:23	8	printf ( " %04x" , * pp ++ )
CALLEE	403:2	403:2	9	printf
LEAF_NODE	403:2	403:2	10	printf
LEAF_NODE	403:8	403:8	9	(
ARGUMENT	403:9	403:9	9	" %04x"
FIELD	403:9	403:9	10	" %04x"
LEAF_NODE	403:9	403:9	11	" %04x"
LEAF_NODE	403:16	403:16	9	,
ARGUMENT	403:18	403:18	9	* pp ++
UNARY_EXPR	403:18	403:19	10	* pp ++
UNARY_OPERATOR	403:18	403:18	11	*
LEAF_NODE	403:18	403:18	12	*
FIELD	403:19	403:21	11	pp ++
LEAF_NODE	403:19	403:19	12	pp
LEAF_NODE	403:21	403:21	12	++
LEAF_NODE	403:23	403:23	9	)
LEAF_NODE	403:24	403:24	7	;
SELECTION	404:2	405:3	6	
KEYWORD	404:2	404:2	7	if
LEAF_NODE	404:2	404:2	8	if
LEAF_NODE	404:5	404:5	7	(
CONDITION	404:6	404:6	7	( ( i + 1 ) % 15 ) == 0
EXPR	404:6	404:22	8	( ( i + 1 ) % 15 ) == 0
LEAF_NODE	404:6	404:6	9	(
LEAF_NODE	404:7	404:7	9	(
FIELD	404:8	404:8	9	i
LEAF_NODE	404:8	404:8	10	i
LEAF_NODE	404:9	404:9	9	+
FIELD	404:10	404:10	9	1
LEAF_NODE	404:10	404:10	10	1
LEAF_NODE	404:11	404:11	9	)
LEAF_NODE	404:13	404:13	9	%
FIELD	404:15	404:15	9	15
LEAF_NODE	404:15	404:15	10	15
LEAF_NODE	404:17	404:17	9	)
EQ_OPERATOR	404:19	404:19	9	==
LEAF_NODE	404:19	404:19	10	==
FIELD	404:22	404:22	9	0
LEAF_NODE	404:22	404:22	10	0
LEAF_NODE	404:23	404:23	7	)
STATEMENTS	405:3	405:3	7	
EXPR_STATEMENT	405:3	405:16	8	printf ( "\n " ) ;
EXPR	405:3	405:3	9	printf ( "\n " )
FUNCTION_CALL	405:3	405:15	10	printf ( "\n " )
CALLEE	405:3	405:3	11	printf
LEAF_NODE	405:3	405:3	12	printf
LEAF_NODE	405:9	405:9	11	(
ARGUMENT	405:10	405:10	11	"\n "
FIELD	405:10	405:10	12	"\n "
LEAF_NODE	405:10	405:10	13	"\n "
LEAF_NODE	405:15	405:15	11	)
LEAF_NODE	405:16	405:16	9	;
LEAF_NODE	406:1	406:1	5	}
EXPR_STATEMENT	407:1	407:14	3	putchar ( '\n' ) ;
EXPR	407:1	407:1	4	putchar ( '\n' )
FUNCTION_CALL	407:1	407:13	5	putchar ( '\n' )
CALLEE	407:1	407:1	6	putchar
LEAF_NODE	407:1	407:1	7	putchar
LEAF_NODE	407:8	407:8	6	(
ARGUMENT	407:9	407:9	6	'\n'
FIELD	407:9	407:9	7	'\n'
LEAF_NODE	407:9	407:9	8	'\n'
LEAF_NODE	407:13	407:13	6	)
LEAF_NODE	407:14	407:14	4	;
LEAF_NODE	408:0	408:0	2	}
FUNCTION_DEF	410:0	456:0	1	
RETURN_TYPE	410:0	410:0	2	void
TYPE_NAME	410:0	410:0	3	void
LEAF_NODE	410:0	410:0	4	void
FUNCTION_NAME	411:0	411:0	2	TIFFReadRawData
LEAF_NODE	411:0	411:0	3	TIFFReadRawData
PARAMETER_LIST	411:15	411:37	2	( TIFF * tif , int bitrev )
LEAF_NODE	411:15	411:15	3	(
PARAMETER_DECL	411:16	411:22	3	TIFF * tif
TYPE	411:16	411:20	4	TIFF *
TYPE_NAME	411:16	411:16	5	TIFF
LEAF_NODE	411:16	411:16	6	TIFF
POINTER	411:20	411:20	5	*
LEAF_NODE	411:20	411:20	6	*
NAME	411:22	411:22	4	tif
LEAF_NODE	411:22	411:22	5	tif
LEAF_NODE	411:25	411:25	3	,
PARAMETER_DECL	411:27	411:31	3	int bitrev
TYPE	411:27	411:27	4	int
TYPE_NAME	411:27	411:27	5	int
LEAF_NODE	411:27	411:27	6	int
NAME	411:31	411:31	4	bitrev
LEAF_NODE	411:31	411:31	5	bitrev
LEAF_NODE	411:37	411:37	3	)
LEAF_NODE	412:0	412:0	2	{
STATEMENTS	413:1	418:1	2	
SIMPLE_DECL	413:1	413:43	3	tstrip_t nstrips ; nstrips = TIFFNumberOfStrips ( tif ) ;
VAR_DECL	413:1	413:10	4	tstrip_t nstrips ; nstrips = TIFFNumberOfStrips ( tif )
TYPE	413:1	413:1	5	tstrip_t
TYPE_NAME	413:1	413:1	6	tstrip_t
LEAF_NODE	413:1	413:1	7	tstrip_t
NAME	413:10	413:10	5	nstrips
LEAF_NODE	413:10	413:10	6	nstrips
LEAF_NODE	0:0	0:0	5	;
INIT	413:10	413:10	5	nstrips = TIFFNumberOfStrips ( tif )
ASSIGN	413:10	413:20	6	nstrips = TIFFNumberOfStrips ( tif )
LVAL	413:10	413:10	7	nstrips
NAME	413:10	413:10	8	nstrips
LEAF_NODE	413:10	413:10	9	nstrips
ASSIGN_OP	413:18	413:18	7	=
LEAF_NODE	413:18	413:18	8	=
RVAL	413:20	413:20	7	TIFFNumberOfStrips ( tif )
FUNCTION_CALL	413:20	413:42	8	TIFFNumberOfStrips ( tif )
CALLEE	413:20	413:20	9	TIFFNumberOfStrips
LEAF_NODE	413:20	413:20	10	TIFFNumberOfStrips
LEAF_NODE	413:38	413:38	9	(
ARGUMENT	413:39	413:39	9	tif
FIELD	413:39	413:39	10	tif
LEAF_NODE	413:39	413:39	11	tif
LEAF_NODE	413:42	413:42	9	)
LEAF_NODE	413:43	413:43	4	;
SIMPLE_DECL	414:1	414:55	3	const char * what ; what = TIFFIsTiled ( tif ) ? "Tile" : "Strip" ;
VAR_DECL	414:1	414:13	4	const char * what ; what = TIFFIsTiled ( tif ) ? "Tile" : "Strip"
TYPE	414:1	414:11	5	const char *
TYPE_NAME	414:1	414:7	6	const char
LEAF_NODE	414:1	414:1	7	const
LEAF_NODE	414:7	414:7	7	char
POINTER	414:11	414:11	6	*
LEAF_NODE	414:11	414:11	7	*
NAME	414:13	414:13	5	what
LEAF_NODE	414:13	414:13	6	what
LEAF_NODE	0:0	0:0	5	;
INIT	414:13	414:13	5	what = TIFFIsTiled ( tif ) ? "Tile" : "Strip"
ASSIGN	414:13	414:20	6	what = TIFFIsTiled ( tif ) ? "Tile" : "Strip"
LVAL	414:13	414:13	7	what
NAME	414:13	414:13	8	what
LEAF_NODE	414:13	414:13	9	what
ASSIGN_OP	414:18	414:18	7	=
LEAF_NODE	414:18	414:18	8	=
RVAL	414:20	414:20	7	TIFFIsTiled ( tif ) ? "Tile" : "Strip"
COND_EXPR	414:20	414:48	8	TIFFIsTiled ( tif ) ? "Tile" : "Strip"
CONDITION	414:20	414:20	9	TIFFIsTiled ( tif )
FUNCTION_CALL	414:20	414:35	10	TIFFIsTiled ( tif )
CALLEE	414:20	414:20	11	TIFFIsTiled
LEAF_NODE	414:20	414:20	12	TIFFIsTiled
LEAF_NODE	414:31	414:31	11	(
ARGUMENT	414:32	414:32	11	tif
FIELD	414:32	414:32	12	tif
LEAF_NODE	414:32	414:32	13	tif
LEAF_NODE	414:35	414:35	11	)
LEAF_NODE	414:37	414:37	9	?
EXPR	414:39	414:39	9	"Tile"
FIELD	414:39	414:39	10	"Tile"
LEAF_NODE	414:39	414:39	11	"Tile"
LEAF_NODE	414:46	414:46	9	:
FIELD	414:48	414:48	9	"Strip"
LEAF_NODE	414:48	414:48	10	"Strip"
LEAF_NODE	414:55	414:55	4	;
SIMPLE_DECL	415:1	415:21	3	uint64 * stripbc ; stripbc = NULL ;
VAR_DECL	415:1	415:9	4	uint64 * stripbc ; stripbc = NULL
TYPE	415:1	415:7	5	uint64 *
TYPE_NAME	415:1	415:1	6	uint64
LEAF_NODE	415:1	415:1	7	uint64
POINTER	415:7	415:7	6	*
LEAF_NODE	415:7	415:7	7	*
NAME	415:9	415:9	5	stripbc
LEAF_NODE	415:9	415:9	6	stripbc
LEAF_NODE	0:0	0:0	5	;
INIT	415:9	415:9	5	stripbc = NULL
ASSIGN	415:9	415:17	6	stripbc = NULL
LVAL	415:9	415:9	7	stripbc
NAME	415:9	415:9	8	stripbc
LEAF_NODE	415:9	415:9	9	stripbc
ASSIGN_OP	415:16	415:16	7	=
LEAF_NODE	415:16	415:16	8	=
RVAL	415:17	415:17	7	NULL
FIELD	415:17	415:17	8	NULL
LEAF_NODE	415:17	415:17	9	NULL
LEAF_NODE	415:21	415:21	4	;
EXPR_STATEMENT	417:1	417:53	3	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & stripbc ) ;
EXPR	417:1	417:1	4	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & stripbc )
FUNCTION_CALL	417:1	417:52	5	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & stripbc )
CALLEE	417:1	417:1	6	TIFFGetField
LEAF_NODE	417:1	417:1	7	TIFFGetField
LEAF_NODE	417:13	417:13	6	(
ARGUMENT	417:14	417:14	6	tif
FIELD	417:14	417:14	7	tif
LEAF_NODE	417:14	417:14	8	tif
LEAF_NODE	417:17	417:17	6	,
ARGUMENT	417:19	417:19	6	TIFFTAG_STRIPBYTECOUNTS
FIELD	417:19	417:19	7	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	417:19	417:19	8	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	417:42	417:42	6	,
ARGUMENT	417:44	417:44	6	& stripbc
UNARY_EXPR	417:44	417:45	7	& stripbc
UNARY_OPERATOR	417:44	417:44	8	&
LEAF_NODE	417:44	417:44	9	&
FIELD	417:45	417:45	8	stripbc
LEAF_NODE	417:45	417:45	9	stripbc
LEAF_NODE	417:52	417:52	6	)
LEAF_NODE	417:53	417:53	4	;
SELECTION	418:1	418:37	3	
KEYWORD	418:1	418:1	4	if
LEAF_NODE	418:1	418:1	5	if
LEAF_NODE	418:4	418:4	4	(
CONDITION	418:5	418:5	4	stripbc != NULL && nstrips > 0
EXPR	418:5	418:5	5	stripbc != NULL && nstrips > 0
AND	418:5	418:24	6	stripbc != NULL && nstrips > 0
EXPR	418:5	418:16	7	stripbc != NULL
FIELD	418:5	418:5	8	stripbc
LEAF_NODE	418:5	418:5	9	stripbc
EQ_OPERATOR	418:13	418:13	8	!=
LEAF_NODE	418:13	418:13	9	!=
FIELD	418:16	418:16	8	NULL
LEAF_NODE	418:16	418:16	9	NULL
LEAF_NODE	418:21	418:21	7	&&
EXPR	418:24	418:34	7	nstrips > 0
FIELD	418:24	418:24	8	nstrips
LEAF_NODE	418:24	418:24	9	nstrips
REL_OPERATOR	418:32	418:32	8	>
LEAF_NODE	418:32	418:32	9	>
FIELD	418:34	418:34	8	0
LEAF_NODE	418:34	418:34	9	0
LEAF_NODE	418:35	418:35	4	)
STATEMENTS	418:37	455:1	4	
LEAF_NODE	418:37	418:37	5	{
STATEMENTS	419:2	453:2	5	
SIMPLE_DECL	419:2	419:38	6	uint32 bufsize ; bufsize = ( uint32 ) stripbc [ 0 ] ;
VAR_DECL	419:2	419:9	7	uint32 bufsize ; bufsize = ( uint32 ) stripbc [ 0 ]
TYPE	419:2	419:2	8	uint32
TYPE_NAME	419:2	419:2	9	uint32
LEAF_NODE	419:2	419:2	10	uint32
NAME	419:9	419:9	8	bufsize
LEAF_NODE	419:9	419:9	9	bufsize
LEAF_NODE	0:0	0:0	8	;
INIT	419:9	419:9	8	bufsize = ( uint32 ) stripbc [ 0 ]
ASSIGN	419:9	419:19	9	bufsize = ( uint32 ) stripbc [ 0 ]
LVAL	419:9	419:9	10	bufsize
NAME	419:9	419:9	11	bufsize
LEAF_NODE	419:9	419:9	12	bufsize
ASSIGN_OP	419:17	419:17	10	=
LEAF_NODE	419:17	419:17	11	=
RVAL	419:19	419:28	10	( uint32 ) stripbc [ 0 ]
LEAF_NODE	419:19	419:19	11	(
TYPE_NAME	419:20	419:20	11	uint32
LEAF_NODE	419:20	419:20	12	uint32
LEAF_NODE	419:26	419:26	11	)
FIELD	419:28	419:37	11	stripbc [ 0 ]
LEAF_NODE	419:28	419:28	12	stripbc
LEAF_NODE	419:35	419:35	12	[
EXPR	419:36	419:36	12	0
FIELD	419:36	419:36	13	0
LEAF_NODE	419:36	419:36	14	0
LEAF_NODE	419:37	419:37	12	]
LEAF_NODE	419:38	419:38	7	;
SIMPLE_DECL	420:2	420:36	6	tdata_t buf ; buf = _TIFFmalloc ( bufsize ) ;
VAR_DECL	420:2	420:10	7	tdata_t buf ; buf = _TIFFmalloc ( bufsize )
TYPE	420:2	420:2	8	tdata_t
TYPE_NAME	420:2	420:2	9	tdata_t
LEAF_NODE	420:2	420:2	10	tdata_t
NAME	420:10	420:10	8	buf
LEAF_NODE	420:10	420:10	9	buf
LEAF_NODE	0:0	0:0	8	;
INIT	420:10	420:10	8	buf = _TIFFmalloc ( bufsize )
ASSIGN	420:10	420:16	9	buf = _TIFFmalloc ( bufsize )
LVAL	420:10	420:10	10	buf
NAME	420:10	420:10	11	buf
LEAF_NODE	420:10	420:10	12	buf
ASSIGN_OP	420:14	420:14	10	=
LEAF_NODE	420:14	420:14	11	=
RVAL	420:16	420:16	10	_TIFFmalloc ( bufsize )
FUNCTION_CALL	420:16	420:35	11	_TIFFmalloc ( bufsize )
CALLEE	420:16	420:16	12	_TIFFmalloc
LEAF_NODE	420:16	420:16	13	_TIFFmalloc
LEAF_NODE	420:27	420:27	12	(
ARGUMENT	420:28	420:28	12	bufsize
FIELD	420:28	420:28	13	bufsize
LEAF_NODE	420:28	420:28	14	bufsize
LEAF_NODE	420:35	420:35	12	)
LEAF_NODE	420:36	420:36	7	;
SIMPLE_DECL	421:2	421:12	6	tstrip_t s ;
VAR_DECL	421:2	421:11	7	tstrip_t s
TYPE	421:2	421:2	8	tstrip_t
TYPE_NAME	421:2	421:2	9	tstrip_t
LEAF_NODE	421:2	421:2	10	tstrip_t
NAME	421:11	421:11	8	s
LEAF_NODE	421:11	421:11	9	s
LEAF_NODE	421:12	421:12	7	;
ITERATION	423:2	423:32	6	
KEYWORD	423:2	423:2	7	for
LEAF_NODE	423:2	423:2	8	for
LEAF_NODE	423:6	423:6	7	(
FOR_INIT	423:7	423:12	7	s = 0 ;
EXPR	423:7	423:7	8	s = 0
ASSIGN	423:7	423:11	9	s = 0
LVAL	423:7	423:7	10	s
FIELD	423:7	423:7	11	s
LEAF_NODE	423:7	423:7	12	s
ASSIGN_OP	423:9	423:9	10	=
LEAF_NODE	423:9	423:9	11	=
RVAL	423:11	423:11	10	0
FIELD	423:11	423:11	11	0
LEAF_NODE	423:11	423:11	12	0
LEAF_NODE	423:12	423:12	8	;
CONDITION	423:14	423:14	7	s < nstrips
EXPR	423:14	423:18	8	s < nstrips
FIELD	423:14	423:14	9	s
LEAF_NODE	423:14	423:14	10	s
REL_OPERATOR	423:16	423:16	9	<
LEAF_NODE	423:16	423:16	10	<
FIELD	423:18	423:18	9	nstrips
LEAF_NODE	423:18	423:18	10	nstrips
LEAF_NODE	423:25	423:25	7	;
FOR_EXPR	423:27	423:27	7	s ++
EXPR	423:27	423:27	8	s ++
FIELD	423:27	423:28	9	s ++
LEAF_NODE	423:27	423:27	10	s
LEAF_NODE	423:28	423:28	10	++
LEAF_NODE	423:30	423:30	7	)
STATEMENTS	423:32	452:2	7	
LEAF_NODE	423:32	423:32	8	{
STATEMENTS	424:3	439:5	8	
SELECTION	424:3	424:29	9	
KEYWORD	424:3	424:3	10	if
LEAF_NODE	424:3	424:3	11	if
LEAF_NODE	424:6	424:6	10	(
CONDITION	424:7	424:7	10	stripbc [ s ] > bufsize
EXPR	424:7	424:20	11	stripbc [ s ] > bufsize
FIELD	424:7	424:16	12	stripbc [ s ]
LEAF_NODE	424:7	424:7	13	stripbc
LEAF_NODE	424:14	424:14	13	[
EXPR	424:15	424:15	13	s
FIELD	424:15	424:15	14	s
LEAF_NODE	424:15	424:15	15	s
LEAF_NODE	424:16	424:16	13	]
REL_OPERATOR	424:18	424:18	12	>
LEAF_NODE	424:18	424:18	13	>
FIELD	424:20	424:20	12	bufsize
LEAF_NODE	424:20	424:20	13	bufsize
LEAF_NODE	424:27	424:27	10	)
STATEMENTS	424:29	427:3	10	
LEAF_NODE	424:29	424:29	11	{
STATEMENTS	425:4	426:4	11	
EXPR_STATEMENT	425:4	425:49	12	buf = _TIFFrealloc ( buf , ( tmsize_t ) stripbc [ s ] ) ;
EXPR	425:4	425:4	13	buf = _TIFFrealloc ( buf , ( tmsize_t ) stripbc [ s ] )
ASSIGN	425:4	425:10	14	buf = _TIFFrealloc ( buf , ( tmsize_t ) stripbc [ s ] )
LVAL	425:4	425:4	15	buf
FIELD	425:4	425:4	16	buf
LEAF_NODE	425:4	425:4	17	buf
ASSIGN_OP	425:8	425:8	15	=
LEAF_NODE	425:8	425:8	16	=
RVAL	425:10	425:10	15	_TIFFrealloc ( buf , ( tmsize_t ) stripbc [ s ] )
FUNCTION_CALL	425:10	425:48	16	_TIFFrealloc ( buf , ( tmsize_t ) stripbc [ s ] )
CALLEE	425:10	425:10	17	_TIFFrealloc
LEAF_NODE	425:10	425:10	18	_TIFFrealloc
LEAF_NODE	425:22	425:22	17	(
ARGUMENT	425:23	425:23	17	buf
FIELD	425:23	425:23	18	buf
LEAF_NODE	425:23	425:23	19	buf
LEAF_NODE	425:26	425:26	17	,
ARGUMENT	425:28	425:38	17	( tmsize_t ) stripbc [ s ]
LEAF_NODE	425:28	425:28	18	(
TYPE_NAME	425:29	425:29	18	tmsize_t
LEAF_NODE	425:29	425:29	19	tmsize_t
LEAF_NODE	425:37	425:37	18	)
FIELD	425:38	425:47	18	stripbc [ s ]
LEAF_NODE	425:38	425:38	19	stripbc
LEAF_NODE	425:45	425:45	19	[
EXPR	425:46	425:46	19	s
FIELD	425:46	425:46	20	s
LEAF_NODE	425:46	425:46	21	s
LEAF_NODE	425:47	425:47	19	]
LEAF_NODE	425:48	425:48	17	)
LEAF_NODE	425:49	425:49	13	;
EXPR_STATEMENT	426:4	426:33	12	bufsize = ( uint32 ) stripbc [ s ] ;
EXPR	426:4	426:4	13	bufsize = ( uint32 ) stripbc [ s ]
ASSIGN	426:4	426:14	14	bufsize = ( uint32 ) stripbc [ s ]
LVAL	426:4	426:4	15	bufsize
FIELD	426:4	426:4	16	bufsize
LEAF_NODE	426:4	426:4	17	bufsize
ASSIGN_OP	426:12	426:12	15	=
LEAF_NODE	426:12	426:12	16	=
RVAL	426:14	426:23	15	( uint32 ) stripbc [ s ]
LEAF_NODE	426:14	426:14	16	(
TYPE_NAME	426:15	426:15	16	uint32
LEAF_NODE	426:15	426:15	17	uint32
LEAF_NODE	426:21	426:21	16	)
FIELD	426:23	426:32	16	stripbc [ s ]
LEAF_NODE	426:23	426:23	17	stripbc
LEAF_NODE	426:30	426:30	17	[
EXPR	426:31	426:31	17	s
FIELD	426:31	426:31	18	s
LEAF_NODE	426:31	426:31	19	s
LEAF_NODE	426:32	426:32	17	]
LEAF_NODE	426:33	426:33	13	;
LEAF_NODE	427:3	427:3	11	}
SELECTION	428:3	428:20	9	
KEYWORD	428:3	428:3	10	if
LEAF_NODE	428:3	428:3	11	if
LEAF_NODE	428:6	428:6	10	(
CONDITION	428:7	428:7	10	buf == NULL
EXPR	428:7	428:14	11	buf == NULL
FIELD	428:7	428:7	12	buf
LEAF_NODE	428:7	428:7	13	buf
EQ_OPERATOR	428:11	428:11	12	==
LEAF_NODE	428:11	428:11	13	==
FIELD	428:14	428:14	12	NULL
LEAF_NODE	428:14	428:14	13	NULL
LEAF_NODE	428:18	428:18	10	)
STATEMENTS	428:20	433:3	10	
LEAF_NODE	428:20	428:20	11	{
STATEMENTS	429:4	432:4	11	
EXPR_STATEMENT	429:4	431:26	12	fprintf ( stderr , "Cannot allocate buffer to read strip %lu\n" , ( unsigned long ) s ) ;
EXPR	429:4	429:4	13	fprintf ( stderr , "Cannot allocate buffer to read strip %lu\n" , ( unsigned long ) s )
FUNCTION_CALL	429:4	431:25	14	fprintf ( stderr , "Cannot allocate buffer to read strip %lu\n" , ( unsigned long ) s )
CALLEE	429:4	429:4	15	fprintf
LEAF_NODE	429:4	429:4	16	fprintf
LEAF_NODE	429:11	429:11	15	(
ARGUMENT	429:12	429:12	15	stderr
FIELD	429:12	429:12	16	stderr
LEAF_NODE	429:12	429:12	17	stderr
LEAF_NODE	429:18	429:18	15	,
ARGUMENT	430:7	430:7	15	"Cannot allocate buffer to read strip %lu\n"
FIELD	430:7	430:7	16	"Cannot allocate buffer to read strip %lu\n"
LEAF_NODE	430:7	430:7	17	"Cannot allocate buffer to read strip %lu\n"
LEAF_NODE	430:51	430:51	15	,
ARGUMENT	431:8	431:24	15	( unsigned long ) s
LEAF_NODE	431:8	431:8	16	(
TYPE_NAME	431:9	431:18	16	unsigned long
LEAF_NODE	431:9	431:9	17	unsigned
LEAF_NODE	431:18	431:18	17	long
LEAF_NODE	431:22	431:22	16	)
FIELD	431:24	431:24	16	s
LEAF_NODE	431:24	431:24	17	s
LEAF_NODE	431:25	431:25	15	)
LEAF_NODE	431:26	431:26	13	;
JUMP_STATEMENT	432:4	432:9	12	break DESTINATION ;
KEYWORD	432:4	432:4	13	break
LEAF_NODE	432:4	432:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	432:9	432:9	13	;
LEAF_NODE	433:3	433:3	11	}
SELECTION	434:3	434:65	9	
KEYWORD	434:3	434:3	10	if
LEAF_NODE	434:3	434:3	11	if
LEAF_NODE	434:6	434:6	10	(
CONDITION	434:7	434:7	10	TIFFReadRawStrip ( tif , s , buf , ( tmsize_t ) stripbc [ s ] ) < 0
EXPR	434:7	434:62	11	TIFFReadRawStrip ( tif , s , buf , ( tmsize_t ) stripbc [ s ] ) < 0
FUNCTION_CALL	434:7	434:58	12	TIFFReadRawStrip ( tif , s , buf , ( tmsize_t ) stripbc [ s ] )
CALLEE	434:7	434:7	13	TIFFReadRawStrip
LEAF_NODE	434:7	434:7	14	TIFFReadRawStrip
LEAF_NODE	434:23	434:23	13	(
ARGUMENT	434:24	434:24	13	tif
FIELD	434:24	434:24	14	tif
LEAF_NODE	434:24	434:24	15	tif
LEAF_NODE	434:27	434:27	13	,
ARGUMENT	434:29	434:29	13	s
FIELD	434:29	434:29	14	s
LEAF_NODE	434:29	434:29	15	s
LEAF_NODE	434:30	434:30	13	,
ARGUMENT	434:32	434:32	13	buf
FIELD	434:32	434:32	14	buf
LEAF_NODE	434:32	434:32	15	buf
LEAF_NODE	434:35	434:35	13	,
ARGUMENT	434:37	434:48	13	( tmsize_t ) stripbc [ s ]
LEAF_NODE	434:37	434:37	14	(
TYPE_NAME	434:38	434:38	14	tmsize_t
LEAF_NODE	434:38	434:38	15	tmsize_t
LEAF_NODE	434:46	434:46	14	)
FIELD	434:48	434:57	14	stripbc [ s ]
LEAF_NODE	434:48	434:48	15	stripbc
LEAF_NODE	434:55	434:55	15	[
EXPR	434:56	434:56	15	s
FIELD	434:56	434:56	16	s
LEAF_NODE	434:56	434:56	17	s
LEAF_NODE	434:57	434:57	15	]
LEAF_NODE	434:58	434:58	13	)
REL_OPERATOR	434:60	434:60	12	<
LEAF_NODE	434:60	434:60	13	<
FIELD	434:62	434:62	12	0
LEAF_NODE	434:62	434:62	13	0
LEAF_NODE	434:63	434:63	10	)
STATEMENTS	434:65	439:3	10	
LEAF_NODE	434:65	434:65	11	{
STATEMENTS	435:4	437:4	11	
EXPR_STATEMENT	435:4	436:26	12	fprintf ( stderr , "Error reading strip %lu\n" , ( unsigned long ) s ) ;
EXPR	435:4	435:4	13	fprintf ( stderr , "Error reading strip %lu\n" , ( unsigned long ) s )
FUNCTION_CALL	435:4	436:25	14	fprintf ( stderr , "Error reading strip %lu\n" , ( unsigned long ) s )
CALLEE	435:4	435:4	15	fprintf
LEAF_NODE	435:4	435:4	16	fprintf
LEAF_NODE	435:11	435:11	15	(
ARGUMENT	435:12	435:12	15	stderr
FIELD	435:12	435:12	16	stderr
LEAF_NODE	435:12	435:12	17	stderr
LEAF_NODE	435:18	435:18	15	,
ARGUMENT	435:20	435:20	15	"Error reading strip %lu\n"
FIELD	435:20	435:20	16	"Error reading strip %lu\n"
LEAF_NODE	435:20	435:20	17	"Error reading strip %lu\n"
LEAF_NODE	435:47	435:47	15	,
ARGUMENT	436:8	436:24	15	( unsigned long ) s
LEAF_NODE	436:8	436:8	16	(
TYPE_NAME	436:9	436:18	16	unsigned long
LEAF_NODE	436:9	436:9	17	unsigned
LEAF_NODE	436:18	436:18	17	long
LEAF_NODE	436:22	436:22	16	)
FIELD	436:24	436:24	16	s
LEAF_NODE	436:24	436:24	17	s
LEAF_NODE	436:25	436:25	15	)
LEAF_NODE	436:26	436:26	13	;
SELECTION	437:4	438:5	12	
KEYWORD	437:4	437:4	13	if
LEAF_NODE	437:4	437:4	14	if
LEAF_NODE	437:7	437:7	13	(
CONDITION	437:8	437:8	13	stoponerr
EXPR	437:8	437:8	14	stoponerr
FIELD	437:8	437:8	15	stoponerr
LEAF_NODE	437:8	437:8	16	stoponerr
LEAF_NODE	437:17	437:17	13	)
STATEMENTS	438:5	438:5	13	
JUMP_STATEMENT	438:5	438:10	14	break DESTINATION ;
KEYWORD	438:5	438:5	15	break
LEAF_NODE	438:5	438:5	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	438:10	438:10	15	;
LEAF_NODE	439:3	439:3	11	}
SELECTION	439:5	439:10	9	
KEYWORD	439:5	439:5	10	else
LEAF_NODE	439:5	439:5	11	else
STATEMENTS	439:10	439:10	10	
SELECTION	439:10	439:24	11	
KEYWORD	439:10	439:10	12	if
LEAF_NODE	439:10	439:10	13	if
LEAF_NODE	439:13	439:13	12	(
CONDITION	439:14	439:14	12	showdata
EXPR	439:14	439:14	13	showdata
FIELD	439:14	439:14	14	showdata
LEAF_NODE	439:14	439:14	15	showdata
LEAF_NODE	439:22	439:22	12	)
STATEMENTS	439:24	451:3	12	
LEAF_NODE	439:24	439:24	13	{
STATEMENTS	440:4	449:4	13	
SELECTION	440:4	440:16	14	
KEYWORD	440:4	440:4	15	if
LEAF_NODE	440:4	440:4	16	if
LEAF_NODE	440:7	440:7	15	(
CONDITION	440:8	440:8	15	bitrev
EXPR	440:8	440:8	16	bitrev
FIELD	440:8	440:8	17	bitrev
LEAF_NODE	440:8	440:8	18	bitrev
LEAF_NODE	440:14	440:14	15	)
STATEMENTS	440:16	444:4	15	
LEAF_NODE	440:16	440:16	16	{
STATEMENTS	441:5	442:5	16	
EXPR_STATEMENT	441:5	441:47	17	TIFFReverseBits ( buf , ( tmsize_t ) stripbc [ s ] ) ;
EXPR	441:5	441:5	18	TIFFReverseBits ( buf , ( tmsize_t ) stripbc [ s ] )
FUNCTION_CALL	441:5	441:46	19	TIFFReverseBits ( buf , ( tmsize_t ) stripbc [ s ] )
CALLEE	441:5	441:5	20	TIFFReverseBits
LEAF_NODE	441:5	441:5	21	TIFFReverseBits
LEAF_NODE	441:20	441:20	20	(
ARGUMENT	441:21	441:21	20	buf
FIELD	441:21	441:21	21	buf
LEAF_NODE	441:21	441:21	22	buf
LEAF_NODE	441:24	441:24	20	,
ARGUMENT	441:26	441:36	20	( tmsize_t ) stripbc [ s ]
LEAF_NODE	441:26	441:26	21	(
TYPE_NAME	441:27	441:27	21	tmsize_t
LEAF_NODE	441:27	441:27	22	tmsize_t
LEAF_NODE	441:35	441:35	21	)
FIELD	441:36	441:45	21	stripbc [ s ]
LEAF_NODE	441:36	441:36	22	stripbc
LEAF_NODE	441:43	441:43	22	[
EXPR	441:44	441:44	22	s
FIELD	441:44	441:44	23	s
LEAF_NODE	441:44	441:44	24	s
LEAF_NODE	441:45	441:45	22	]
LEAF_NODE	441:46	441:46	20	)
LEAF_NODE	441:47	441:47	18	;
EXPR_STATEMENT	442:5	443:33	17	printf ( "%s %lu: (bit reversed)\n " , what , ( unsigned long ) s ) ;
EXPR	442:5	442:5	18	printf ( "%s %lu: (bit reversed)\n " , what , ( unsigned long ) s )
FUNCTION_CALL	442:5	443:32	19	printf ( "%s %lu: (bit reversed)\n " , what , ( unsigned long ) s )
CALLEE	442:5	442:5	20	printf
LEAF_NODE	442:5	442:5	21	printf
LEAF_NODE	442:11	442:11	20	(
ARGUMENT	442:12	442:12	20	"%s %lu: (bit reversed)\n "
FIELD	442:12	442:12	21	"%s %lu: (bit reversed)\n "
LEAF_NODE	442:12	442:12	22	"%s %lu: (bit reversed)\n "
LEAF_NODE	442:39	442:39	20	,
ARGUMENT	443:9	443:9	20	what
FIELD	443:9	443:9	21	what
LEAF_NODE	443:9	443:9	22	what
LEAF_NODE	443:13	443:13	20	,
ARGUMENT	443:15	443:31	20	( unsigned long ) s
LEAF_NODE	443:15	443:15	21	(
TYPE_NAME	443:16	443:25	21	unsigned long
LEAF_NODE	443:16	443:16	22	unsigned
LEAF_NODE	443:25	443:25	22	long
LEAF_NODE	443:29	443:29	21	)
FIELD	443:31	443:31	21	s
LEAF_NODE	443:31	443:31	22	s
LEAF_NODE	443:32	443:32	20	)
LEAF_NODE	443:33	443:33	18	;
LEAF_NODE	444:4	444:4	16	}
SELECTION	444:6	445:5	14	
KEYWORD	444:6	444:6	15	else
LEAF_NODE	444:6	444:6	16	else
STATEMENTS	445:5	445:5	15	
EXPR_STATEMENT	445:5	446:27	16	printf ( "%s %lu:\n " , what , ( unsigned long ) s ) ;
EXPR	445:5	445:5	17	printf ( "%s %lu:\n " , what , ( unsigned long ) s )
FUNCTION_CALL	445:5	446:26	18	printf ( "%s %lu:\n " , what , ( unsigned long ) s )
CALLEE	445:5	445:5	19	printf
LEAF_NODE	445:5	445:5	20	printf
LEAF_NODE	445:11	445:11	19	(
ARGUMENT	445:12	445:12	19	"%s %lu:\n "
FIELD	445:12	445:12	20	"%s %lu:\n "
LEAF_NODE	445:12	445:12	21	"%s %lu:\n "
LEAF_NODE	445:24	445:24	19	,
ARGUMENT	445:26	445:26	19	what
FIELD	445:26	445:26	20	what
LEAF_NODE	445:26	445:26	21	what
LEAF_NODE	445:30	445:30	19	,
ARGUMENT	446:9	446:25	19	( unsigned long ) s
LEAF_NODE	446:9	446:9	20	(
TYPE_NAME	446:10	446:19	20	unsigned long
LEAF_NODE	446:10	446:10	21	unsigned
LEAF_NODE	446:19	446:19	21	long
LEAF_NODE	446:23	446:23	20	)
FIELD	446:25	446:25	20	s
LEAF_NODE	446:25	446:25	21	s
LEAF_NODE	446:26	446:26	19	)
LEAF_NODE	446:27	446:27	17	;
SELECTION	447:4	448:5	14	
KEYWORD	447:4	447:4	15	if
LEAF_NODE	447:4	447:4	16	if
LEAF_NODE	447:7	447:7	15	(
CONDITION	447:8	447:8	15	showwords
EXPR	447:8	447:8	16	showwords
FIELD	447:8	447:8	17	showwords
LEAF_NODE	447:8	447:8	18	showwords
LEAF_NODE	447:17	447:17	15	)
STATEMENTS	448:5	448:5	15	
EXPR_STATEMENT	448:5	448:56	16	ShowRawWords ( ( uint16 * ) buf , ( uint32 ) stripbc [ s ] >> 1 ) ;
EXPR	448:5	448:5	17	ShowRawWords ( ( uint16 * ) buf , ( uint32 ) stripbc [ s ] >> 1 )
FUNCTION_CALL	448:5	448:55	18	ShowRawWords ( ( uint16 * ) buf , ( uint32 ) stripbc [ s ] >> 1 )
CALLEE	448:5	448:5	19	ShowRawWords
LEAF_NODE	448:5	448:5	20	ShowRawWords
LEAF_NODE	448:17	448:17	19	(
ARGUMENT	448:18	448:28	19	( uint16 * ) buf
LEAF_NODE	448:18	448:18	20	(
TYPE_NAME	448:19	448:19	20	uint16
LEAF_NODE	448:19	448:19	21	uint16
LEAF_NODE	448:25	448:25	20	*
LEAF_NODE	448:26	448:26	20	)
FIELD	448:28	448:28	20	buf
LEAF_NODE	448:28	448:28	21	buf
LEAF_NODE	448:31	448:31	19	,
ARGUMENT	448:33	448:54	19	( uint32 ) stripbc [ s ] >> 1
LEAF_NODE	448:33	448:33	20	(
TYPE_NAME	448:34	448:34	20	uint32
LEAF_NODE	448:34	448:34	21	uint32
LEAF_NODE	448:40	448:40	20	)
FIELD	448:42	448:51	20	stripbc [ s ]
LEAF_NODE	448:42	448:42	21	stripbc
LEAF_NODE	448:49	448:49	21	[
EXPR	448:50	448:50	21	s
FIELD	448:50	448:50	22	s
LEAF_NODE	448:50	448:50	23	s
LEAF_NODE	448:51	448:51	21	]
LEAF_NODE	448:52	448:52	20	>>
FIELD	448:54	448:54	20	1
LEAF_NODE	448:54	448:54	21	1
LEAF_NODE	448:55	448:55	19	)
LEAF_NODE	448:56	448:56	17	;
SELECTION	449:4	450:5	14	
KEYWORD	449:4	449:4	15	else
LEAF_NODE	449:4	449:4	16	else
STATEMENTS	450:5	450:5	15	
EXPR_STATEMENT	450:5	450:60	16	ShowRawBytes ( ( unsigned char * ) buf , ( uint32 ) stripbc [ s ] ) ;
EXPR	450:5	450:5	17	ShowRawBytes ( ( unsigned char * ) buf , ( uint32 ) stripbc [ s ] )
FUNCTION_CALL	450:5	450:59	18	ShowRawBytes ( ( unsigned char * ) buf , ( uint32 ) stripbc [ s ] )
CALLEE	450:5	450:5	19	ShowRawBytes
LEAF_NODE	450:5	450:5	20	ShowRawBytes
LEAF_NODE	450:17	450:17	19	(
ARGUMENT	450:18	450:35	19	( unsigned char * ) buf
LEAF_NODE	450:18	450:18	20	(
TYPE_NAME	450:19	450:28	20	unsigned char
LEAF_NODE	450:19	450:19	21	unsigned
LEAF_NODE	450:28	450:28	21	char
LEAF_NODE	450:32	450:32	20	*
LEAF_NODE	450:33	450:33	20	)
FIELD	450:35	450:35	20	buf
LEAF_NODE	450:35	450:35	21	buf
LEAF_NODE	450:38	450:38	19	,
ARGUMENT	450:40	450:49	19	( uint32 ) stripbc [ s ]
LEAF_NODE	450:40	450:40	20	(
TYPE_NAME	450:41	450:41	20	uint32
LEAF_NODE	450:41	450:41	21	uint32
LEAF_NODE	450:47	450:47	20	)
FIELD	450:49	450:58	20	stripbc [ s ]
LEAF_NODE	450:49	450:49	21	stripbc
LEAF_NODE	450:56	450:56	21	[
EXPR	450:57	450:57	21	s
FIELD	450:57	450:57	22	s
LEAF_NODE	450:57	450:57	23	s
LEAF_NODE	450:58	450:58	21	]
LEAF_NODE	450:59	450:59	19	)
LEAF_NODE	450:60	450:60	17	;
LEAF_NODE	451:3	451:3	13	}
LEAF_NODE	452:2	452:2	8	}
SELECTION	453:2	454:3	6	
KEYWORD	453:2	453:2	7	if
LEAF_NODE	453:2	453:2	8	if
LEAF_NODE	453:5	453:5	7	(
CONDITION	453:6	453:6	7	buf != NULL
EXPR	453:6	453:13	8	buf != NULL
FIELD	453:6	453:6	9	buf
LEAF_NODE	453:6	453:6	10	buf
EQ_OPERATOR	453:10	453:10	9	!=
LEAF_NODE	453:10	453:10	10	!=
FIELD	453:13	453:13	9	NULL
LEAF_NODE	453:13	453:13	10	NULL
LEAF_NODE	453:17	453:17	7	)
STATEMENTS	454:3	454:3	7	
EXPR_STATEMENT	454:3	454:17	8	_TIFFfree ( buf ) ;
EXPR	454:3	454:3	9	_TIFFfree ( buf )
FUNCTION_CALL	454:3	454:16	10	_TIFFfree ( buf )
CALLEE	454:3	454:3	11	_TIFFfree
LEAF_NODE	454:3	454:3	12	_TIFFfree
LEAF_NODE	454:12	454:12	11	(
ARGUMENT	454:13	454:13	11	buf
FIELD	454:13	454:13	12	buf
LEAF_NODE	454:13	454:13	13	buf
LEAF_NODE	454:16	454:16	11	)
LEAF_NODE	454:17	454:17	9	;
LEAF_NODE	455:1	455:1	5	}
LEAF_NODE	456:0	456:0	2	}
FUNCTION_DEF	458:0	477:0	1	
RETURN_TYPE	458:0	458:7	2	static void
LEAF_NODE	458:0	458:0	3	static
TYPE_NAME	458:7	458:7	3	void
LEAF_NODE	458:7	458:7	4	void
FUNCTION_NAME	459:0	459:0	2	tiffinfo
LEAF_NODE	459:0	459:0	3	tiffinfo
PARAMETER_LIST	459:8	459:58	2	( TIFF * tif , uint16 order , long flags , int is_image )
LEAF_NODE	459:8	459:8	3	(
PARAMETER_DECL	459:9	459:15	3	TIFF * tif
TYPE	459:9	459:13	4	TIFF *
TYPE_NAME	459:9	459:9	5	TIFF
LEAF_NODE	459:9	459:9	6	TIFF
POINTER	459:13	459:13	5	*
LEAF_NODE	459:13	459:13	6	*
NAME	459:15	459:15	4	tif
LEAF_NODE	459:15	459:15	5	tif
LEAF_NODE	459:18	459:18	3	,
PARAMETER_DECL	459:20	459:27	3	uint16 order
TYPE	459:20	459:20	4	uint16
TYPE_NAME	459:20	459:20	5	uint16
LEAF_NODE	459:20	459:20	6	uint16
NAME	459:27	459:27	4	order
LEAF_NODE	459:27	459:27	5	order
LEAF_NODE	459:32	459:32	3	,
PARAMETER_DECL	459:34	459:39	3	long flags
TYPE	459:34	459:34	4	long
TYPE_NAME	459:34	459:34	5	long
LEAF_NODE	459:34	459:34	6	long
NAME	459:39	459:39	4	flags
LEAF_NODE	459:39	459:39	5	flags
LEAF_NODE	459:44	459:44	3	,
PARAMETER_DECL	459:46	459:50	3	int is_image
TYPE	459:46	459:46	4	int
TYPE_NAME	459:46	459:46	5	int
LEAF_NODE	459:46	459:46	6	int
NAME	459:50	459:50	4	is_image
LEAF_NODE	459:50	459:50	5	is_image
LEAF_NODE	459:58	459:58	3	)
LEAF_NODE	460:0	460:0	2	{
STATEMENTS	461:1	472:3	2	
EXPR_STATEMENT	461:1	461:39	3	TIFFPrintDirectory ( tif , stdout , flags ) ;
EXPR	461:1	461:1	4	TIFFPrintDirectory ( tif , stdout , flags )
FUNCTION_CALL	461:1	461:38	5	TIFFPrintDirectory ( tif , stdout , flags )
CALLEE	461:1	461:1	6	TIFFPrintDirectory
LEAF_NODE	461:1	461:1	7	TIFFPrintDirectory
LEAF_NODE	461:19	461:19	6	(
ARGUMENT	461:20	461:20	6	tif
FIELD	461:20	461:20	7	tif
LEAF_NODE	461:20	461:20	8	tif
LEAF_NODE	461:23	461:23	6	,
ARGUMENT	461:25	461:25	6	stdout
FIELD	461:25	461:25	7	stdout
LEAF_NODE	461:25	461:25	8	stdout
LEAF_NODE	461:31	461:31	6	,
ARGUMENT	461:33	461:33	6	flags
FIELD	461:33	461:33	7	flags
LEAF_NODE	461:33	461:33	8	flags
LEAF_NODE	461:38	461:38	6	)
LEAF_NODE	461:39	461:39	4	;
SELECTION	462:1	463:2	3	
KEYWORD	462:1	462:1	4	if
LEAF_NODE	462:1	462:1	5	if
LEAF_NODE	462:4	462:4	4	(
CONDITION	462:5	462:5	4	! readdata || ! is_image
EXPR	462:5	462:5	5	! readdata || ! is_image
OR	462:5	462:18	6	! readdata || ! is_image
EXPR	462:5	462:5	7	! readdata
UNARY_EXPR	462:5	462:6	8	! readdata
UNARY_OPERATOR	462:5	462:5	9	!
LEAF_NODE	462:5	462:5	10	!
FIELD	462:6	462:6	9	readdata
LEAF_NODE	462:6	462:6	10	readdata
LEAF_NODE	462:15	462:15	7	||
EXPR	462:18	462:18	7	! is_image
UNARY_EXPR	462:18	462:19	8	! is_image
UNARY_OPERATOR	462:18	462:18	9	!
LEAF_NODE	462:18	462:18	10	!
FIELD	462:19	462:19	9	is_image
LEAF_NODE	462:19	462:19	10	is_image
LEAF_NODE	462:27	462:27	4	)
STATEMENTS	463:2	463:2	4	
JUMP_STATEMENT	463:2	463:8	5	return DESTINATION ;
KEYWORD	463:2	463:2	6	return
LEAF_NODE	463:2	463:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	463:8	463:8	6	;
SELECTION	464:1	464:14	3	
KEYWORD	464:1	464:1	4	if
LEAF_NODE	464:1	464:1	5	if
LEAF_NODE	464:4	464:4	4	(
CONDITION	464:5	464:5	4	rawdata
EXPR	464:5	464:5	5	rawdata
FIELD	464:5	464:5	6	rawdata
LEAF_NODE	464:5	464:5	7	rawdata
LEAF_NODE	464:12	464:12	4	)
STATEMENTS	464:14	472:1	4	
LEAF_NODE	464:14	464:14	5	{
STATEMENTS	465:2	470:4	5	
SELECTION	465:2	465:13	6	
KEYWORD	465:2	465:2	7	if
LEAF_NODE	465:2	465:2	8	if
LEAF_NODE	465:5	465:5	7	(
CONDITION	465:6	465:6	7	order
EXPR	465:6	465:6	8	order
FIELD	465:6	465:6	9	order
LEAF_NODE	465:6	465:6	10	order
LEAF_NODE	465:11	465:11	7	)
STATEMENTS	465:13	470:2	7	
LEAF_NODE	465:13	465:13	8	{
STATEMENTS	466:3	469:3	8	
SIMPLE_DECL	466:3	466:11	9	uint16 o ;
VAR_DECL	466:3	466:10	10	uint16 o
TYPE	466:3	466:3	11	uint16
TYPE_NAME	466:3	466:3	12	uint16
LEAF_NODE	466:3	466:3	13	uint16
NAME	466:10	466:10	11	o
LEAF_NODE	466:10	466:10	12	o
LEAF_NODE	466:11	466:11	10	;
EXPR_STATEMENT	467:3	468:29	9	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & o ) ;
EXPR	467:3	467:3	10	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & o )
FUNCTION_CALL	467:3	468:28	11	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & o )
CALLEE	467:3	467:3	12	TIFFGetFieldDefaulted
LEAF_NODE	467:3	467:3	13	TIFFGetFieldDefaulted
LEAF_NODE	467:24	467:24	12	(
ARGUMENT	467:25	467:25	12	tif
FIELD	467:25	467:25	13	tif
LEAF_NODE	467:25	467:25	14	tif
LEAF_NODE	467:28	467:28	12	,
ARGUMENT	468:7	468:7	12	TIFFTAG_FILLORDER
FIELD	468:7	468:7	13	TIFFTAG_FILLORDER
LEAF_NODE	468:7	468:7	14	TIFFTAG_FILLORDER
LEAF_NODE	468:24	468:24	12	,
ARGUMENT	468:26	468:26	12	& o
UNARY_EXPR	468:26	468:27	13	& o
UNARY_OPERATOR	468:26	468:26	14	&
LEAF_NODE	468:26	468:26	15	&
FIELD	468:27	468:27	14	o
LEAF_NODE	468:27	468:27	15	o
LEAF_NODE	468:28	468:28	12	)
LEAF_NODE	468:29	468:29	10	;
EXPR_STATEMENT	469:3	469:35	9	TIFFReadRawData ( tif , o != order ) ;
EXPR	469:3	469:3	10	TIFFReadRawData ( tif , o != order )
FUNCTION_CALL	469:3	469:34	11	TIFFReadRawData ( tif , o != order )
CALLEE	469:3	469:3	12	TIFFReadRawData
LEAF_NODE	469:3	469:3	13	TIFFReadRawData
LEAF_NODE	469:18	469:18	12	(
ARGUMENT	469:19	469:19	12	tif
FIELD	469:19	469:19	13	tif
LEAF_NODE	469:19	469:19	14	tif
LEAF_NODE	469:22	469:22	12	,
ARGUMENT	469:24	469:29	12	o != order
FIELD	469:24	469:24	13	o
LEAF_NODE	469:24	469:24	14	o
EQ_OPERATOR	469:26	469:26	13	!=
LEAF_NODE	469:26	469:26	14	!=
FIELD	469:29	469:29	13	order
LEAF_NODE	469:29	469:29	14	order
LEAF_NODE	469:34	469:34	12	)
LEAF_NODE	469:35	469:35	10	;
LEAF_NODE	470:2	470:2	8	}
SELECTION	470:4	471:3	6	
KEYWORD	470:4	470:4	7	else
LEAF_NODE	470:4	470:4	8	else
STATEMENTS	471:3	471:3	7	
EXPR_STATEMENT	471:3	471:26	8	TIFFReadRawData ( tif , 0 ) ;
EXPR	471:3	471:3	9	TIFFReadRawData ( tif , 0 )
FUNCTION_CALL	471:3	471:25	10	TIFFReadRawData ( tif , 0 )
CALLEE	471:3	471:3	11	TIFFReadRawData
LEAF_NODE	471:3	471:3	12	TIFFReadRawData
LEAF_NODE	471:18	471:18	11	(
ARGUMENT	471:19	471:19	11	tif
FIELD	471:19	471:19	12	tif
LEAF_NODE	471:19	471:19	13	tif
LEAF_NODE	471:22	471:22	11	,
ARGUMENT	471:24	471:24	11	0
FIELD	471:24	471:24	12	0
LEAF_NODE	471:24	471:24	13	0
LEAF_NODE	471:25	471:25	11	)
LEAF_NODE	471:26	471:26	9	;
LEAF_NODE	472:1	472:1	5	}
SELECTION	472:3	472:8	3	
KEYWORD	472:3	472:3	4	else
LEAF_NODE	472:3	472:3	5	else
STATEMENTS	472:8	476:1	4	
LEAF_NODE	472:8	472:8	5	{
STATEMENTS	473:2	475:2	5	
SELECTION	473:2	474:3	6	
KEYWORD	473:2	473:2	7	if
LEAF_NODE	473:2	473:2	8	if
LEAF_NODE	473:5	473:5	7	(
CONDITION	473:6	473:6	7	order
EXPR	473:6	473:6	8	order
FIELD	473:6	473:6	9	order
LEAF_NODE	473:6	473:6	10	order
LEAF_NODE	473:11	473:11	7	)
STATEMENTS	474:3	474:3	7	
EXPR_STATEMENT	474:3	474:46	8	TIFFSetField ( tif , TIFFTAG_FILLORDER , order ) ;
EXPR	474:3	474:3	9	TIFFSetField ( tif , TIFFTAG_FILLORDER , order )
FUNCTION_CALL	474:3	474:45	10	TIFFSetField ( tif , TIFFTAG_FILLORDER , order )
CALLEE	474:3	474:3	11	TIFFSetField
LEAF_NODE	474:3	474:3	12	TIFFSetField
LEAF_NODE	474:15	474:15	11	(
ARGUMENT	474:16	474:16	11	tif
FIELD	474:16	474:16	12	tif
LEAF_NODE	474:16	474:16	13	tif
LEAF_NODE	474:19	474:19	11	,
ARGUMENT	474:21	474:21	11	TIFFTAG_FILLORDER
FIELD	474:21	474:21	12	TIFFTAG_FILLORDER
LEAF_NODE	474:21	474:21	13	TIFFTAG_FILLORDER
LEAF_NODE	474:38	474:38	11	,
ARGUMENT	474:40	474:40	11	order
FIELD	474:40	474:40	12	order
LEAF_NODE	474:40	474:40	13	order
LEAF_NODE	474:45	474:45	11	)
LEAF_NODE	474:46	474:46	9	;
EXPR_STATEMENT	475:2	475:19	6	TIFFReadData ( tif ) ;
EXPR	475:2	475:2	7	TIFFReadData ( tif )
FUNCTION_CALL	475:2	475:18	8	TIFFReadData ( tif )
CALLEE	475:2	475:2	9	TIFFReadData
LEAF_NODE	475:2	475:2	10	TIFFReadData
LEAF_NODE	475:14	475:14	9	(
ARGUMENT	475:15	475:15	9	tif
FIELD	475:15	475:15	10	tif
LEAF_NODE	475:15	475:15	11	tif
LEAF_NODE	475:18	475:18	9	)
LEAF_NODE	475:19	475:19	7	;
LEAF_NODE	476:1	476:1	5	}
LEAF_NODE	477:0	477:0	2	}
