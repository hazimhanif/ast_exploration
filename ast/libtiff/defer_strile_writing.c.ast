SOURCE_FILE	42:0	223:0	0	
FUNCTION_DEF	42:0	221:0	1	
RETURN_TYPE	42:0	42:0	2	int
TYPE_NAME	42:0	42:0	3	int
LEAF_NODE	42:0	42:0	4	int
FUNCTION_NAME	42:4	42:4	2	test
LEAF_NODE	42:4	42:4	3	test
PARAMETER_LIST	42:8	42:48	2	( const char * mode , int tiled , int height )
LEAF_NODE	42:8	42:8	3	(
PARAMETER_DECL	42:9	42:21	3	const char * mode
TYPE	42:9	42:19	4	const char *
TYPE_NAME	42:9	42:15	5	const char
LEAF_NODE	42:9	42:9	6	const
LEAF_NODE	42:15	42:15	6	char
POINTER	42:19	42:19	5	*
LEAF_NODE	42:19	42:19	6	*
NAME	42:21	42:21	4	mode
LEAF_NODE	42:21	42:21	5	mode
LEAF_NODE	42:25	42:25	3	,
PARAMETER_DECL	42:27	42:31	3	int tiled
TYPE	42:27	42:27	4	int
TYPE_NAME	42:27	42:27	5	int
LEAF_NODE	42:27	42:27	6	int
NAME	42:31	42:31	4	tiled
LEAF_NODE	42:31	42:31	5	tiled
LEAF_NODE	42:36	42:36	3	,
PARAMETER_DECL	42:38	42:42	3	int height
TYPE	42:38	42:38	4	int
TYPE_NAME	42:38	42:38	5	int
LEAF_NODE	42:38	42:38	6	int
NAME	42:42	42:42	4	height
LEAF_NODE	42:42	42:42	5	height
LEAF_NODE	42:48	42:48	3	)
LEAF_NODE	43:0	43:0	2	{
STATEMENTS	44:4	220:4	2	
SIMPLE_DECL	44:4	44:53	3	const char * filename ; filename = "defer_strile_writing.tif" ;
VAR_DECL	44:4	44:16	4	const char * filename ; filename = "defer_strile_writing.tif"
TYPE	44:4	44:14	5	const char *
TYPE_NAME	44:4	44:10	6	const char
LEAF_NODE	44:4	44:4	7	const
LEAF_NODE	44:10	44:10	7	char
POINTER	44:14	44:14	6	*
LEAF_NODE	44:14	44:14	7	*
NAME	44:16	44:16	5	filename
LEAF_NODE	44:16	44:16	6	filename
LEAF_NODE	0:0	0:0	5	;
INIT	44:16	44:16	5	filename = "defer_strile_writing.tif"
ASSIGN	44:16	44:27	6	filename = "defer_strile_writing.tif"
LVAL	44:16	44:16	7	filename
NAME	44:16	44:16	8	filename
LEAF_NODE	44:16	44:16	9	filename
ASSIGN_OP	44:25	44:25	7	=
LEAF_NODE	44:25	44:25	8	=
RVAL	44:27	44:27	7	"defer_strile_writing.tif"
FIELD	44:27	44:27	8	"defer_strile_writing.tif"
LEAF_NODE	44:27	44:27	9	"defer_strile_writing.tif"
LEAF_NODE	44:53	44:53	4	;
SIMPLE_DECL	45:4	45:13	3	TIFF * tif ;
VAR_DECL	45:4	45:10	4	TIFF * tif
TYPE	45:4	45:8	5	TIFF *
TYPE_NAME	45:4	45:4	6	TIFF
LEAF_NODE	45:4	45:4	7	TIFF
POINTER	45:8	45:8	6	*
LEAF_NODE	45:8	45:8	7	*
NAME	45:10	45:10	5	tif
LEAF_NODE	45:10	45:10	6	tif
LEAF_NODE	45:13	45:13	4	;
SIMPLE_DECL	46:4	46:9	3	int i ;
VAR_DECL	46:4	46:8	4	int i
TYPE	46:4	46:4	5	int
TYPE_NAME	46:4	46:4	6	int
LEAF_NODE	46:4	46:4	7	int
NAME	46:8	46:8	5	i
LEAF_NODE	46:8	46:8	6	i
LEAF_NODE	46:9	46:9	4	;
SIMPLE_DECL	47:4	47:15	3	int ret ; ret = 0 ;
VAR_DECL	47:4	47:8	4	int ret ; ret = 0
TYPE	47:4	47:4	5	int
TYPE_NAME	47:4	47:4	6	int
LEAF_NODE	47:4	47:4	7	int
NAME	47:8	47:8	5	ret
LEAF_NODE	47:8	47:8	6	ret
LEAF_NODE	0:0	0:0	5	;
INIT	47:8	47:8	5	ret = 0
ASSIGN	47:8	47:14	6	ret = 0
LVAL	47:8	47:8	7	ret
NAME	47:8	47:8	8	ret
LEAF_NODE	47:8	47:8	9	ret
ASSIGN_OP	47:12	47:12	7	=
LEAF_NODE	47:12	47:12	8	=
RVAL	47:14	47:14	7	0
FIELD	47:14	47:14	8	0
LEAF_NODE	47:14	47:14	9	0
LEAF_NODE	47:15	47:15	4	;
EXPR_STATEMENT	48:4	48:13	3	( void ) ret ;
EXPR	48:4	48:10	4	( void ) ret
LEAF_NODE	48:4	48:4	5	(
TYPE_NAME	48:5	48:5	5	void
LEAF_NODE	48:5	48:5	6	void
LEAF_NODE	48:9	48:9	5	)
FIELD	48:10	48:10	5	ret
LEAF_NODE	48:10	48:10	6	ret
LEAF_NODE	48:13	48:13	4	;
EXPR_STATEMENT	50:4	50:34	3	tif = TIFFOpen ( filename , mode ) ;
EXPR	50:4	50:4	4	tif = TIFFOpen ( filename , mode )
ASSIGN	50:4	50:10	5	tif = TIFFOpen ( filename , mode )
LVAL	50:4	50:4	6	tif
FIELD	50:4	50:4	7	tif
LEAF_NODE	50:4	50:4	8	tif
ASSIGN_OP	50:8	50:8	6	=
LEAF_NODE	50:8	50:8	7	=
RVAL	50:10	50:10	6	TIFFOpen ( filename , mode )
FUNCTION_CALL	50:10	50:33	7	TIFFOpen ( filename , mode )
CALLEE	50:10	50:10	8	TIFFOpen
LEAF_NODE	50:10	50:10	9	TIFFOpen
LEAF_NODE	50:18	50:18	8	(
ARGUMENT	50:19	50:19	8	filename
FIELD	50:19	50:19	9	filename
LEAF_NODE	50:19	50:19	10	filename
LEAF_NODE	50:27	50:27	8	,
ARGUMENT	50:29	50:29	8	mode
FIELD	50:29	50:29	9	mode
LEAF_NODE	50:29	50:29	10	mode
LEAF_NODE	50:33	50:33	8	)
LEAF_NODE	50:34	50:34	4	;
SELECTION	51:4	52:4	3	
KEYWORD	51:4	51:4	4	if
LEAF_NODE	51:4	51:4	5	if
LEAF_NODE	51:6	51:6	4	(
CONDITION	51:7	51:7	4	! tif
EXPR	51:7	51:7	5	! tif
UNARY_EXPR	51:7	51:8	6	! tif
UNARY_OPERATOR	51:7	51:7	7	!
LEAF_NODE	51:7	51:7	8	!
FIELD	51:8	51:8	7	tif
LEAF_NODE	51:8	51:8	8	tif
LEAF_NODE	51:11	51:11	4	)
STATEMENTS	52:4	55:4	4	
LEAF_NODE	52:4	52:4	5	{
STATEMENTS	53:8	54:8	5	
EXPR_STATEMENT	53:8	53:55	6	fprintf ( stderr , "cannot create %s\n" , filename ) ;
EXPR	53:8	53:8	7	fprintf ( stderr , "cannot create %s\n" , filename )
FUNCTION_CALL	53:8	53:54	8	fprintf ( stderr , "cannot create %s\n" , filename )
CALLEE	53:8	53:8	9	fprintf
LEAF_NODE	53:8	53:8	10	fprintf
LEAF_NODE	53:15	53:15	9	(
ARGUMENT	53:16	53:16	9	stderr
FIELD	53:16	53:16	10	stderr
LEAF_NODE	53:16	53:16	11	stderr
LEAF_NODE	53:22	53:22	9	,
ARGUMENT	53:24	53:24	9	"cannot create %s\n"
FIELD	53:24	53:24	10	"cannot create %s\n"
LEAF_NODE	53:24	53:24	11	"cannot create %s\n"
LEAF_NODE	53:44	53:44	9	,
ARGUMENT	53:46	53:46	9	filename
FIELD	53:46	53:46	10	filename
LEAF_NODE	53:46	53:46	11	filename
LEAF_NODE	53:54	53:54	9	)
LEAF_NODE	53:55	53:55	7	;
JUMP_STATEMENT	54:8	54:16	6	return 1 ;
KEYWORD	54:8	54:8	7	return
LEAF_NODE	54:8	54:8	8	return
DESTINATION	54:15	54:15	7	1
EXPR	54:15	54:15	8	1
FIELD	54:15	54:15	9	1
LEAF_NODE	54:15	54:15	10	1
LEAF_NODE	54:16	54:16	7	;
LEAF_NODE	55:4	55:4	5	}
EXPR_STATEMENT	56:4	56:66	3	ret = TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE ) ;
EXPR	56:4	56:4	4	ret = TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
ASSIGN	56:4	56:10	5	ret = TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
LVAL	56:4	56:4	6	ret
FIELD	56:4	56:4	7	ret
LEAF_NODE	56:4	56:4	8	ret
ASSIGN_OP	56:8	56:8	6	=
LEAF_NODE	56:8	56:8	7	=
RVAL	56:10	56:10	6	TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
FUNCTION_CALL	56:10	56:65	7	TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
CALLEE	56:10	56:10	8	TIFFSetField
LEAF_NODE	56:10	56:10	9	TIFFSetField
LEAF_NODE	56:22	56:22	8	(
ARGUMENT	56:23	56:23	8	tif
FIELD	56:23	56:23	9	tif
LEAF_NODE	56:23	56:23	10	tif
LEAF_NODE	56:26	56:26	8	,
ARGUMENT	56:28	56:28	8	TIFFTAG_COMPRESSION
FIELD	56:28	56:28	9	TIFFTAG_COMPRESSION
LEAF_NODE	56:28	56:28	10	TIFFTAG_COMPRESSION
LEAF_NODE	56:47	56:47	8	,
ARGUMENT	56:49	56:49	8	COMPRESSION_NONE
FIELD	56:49	56:49	9	COMPRESSION_NONE
LEAF_NODE	56:49	56:49	10	COMPRESSION_NONE
LEAF_NODE	56:65	56:65	8	)
LEAF_NODE	56:66	56:66	4	;
EXPR_STATEMENT	57:4	57:15	3	assert ( ret ) ;
EXPR	57:4	57:4	4	assert ( ret )
FUNCTION_CALL	57:4	57:14	5	assert ( ret )
CALLEE	57:4	57:4	6	assert
LEAF_NODE	57:4	57:4	7	assert
LEAF_NODE	57:10	57:10	6	(
ARGUMENT	57:11	57:11	6	ret
FIELD	57:11	57:11	7	ret
LEAF_NODE	57:11	57:11	8	ret
LEAF_NODE	57:14	57:14	6	)
LEAF_NODE	57:15	57:15	4	;
EXPR_STATEMENT	58:4	58:50	3	ret = TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 ) ;
EXPR	58:4	58:4	4	ret = TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
ASSIGN	58:4	58:10	5	ret = TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
LVAL	58:4	58:4	6	ret
FIELD	58:4	58:4	7	ret
LEAF_NODE	58:4	58:4	8	ret
ASSIGN_OP	58:8	58:8	6	=
LEAF_NODE	58:8	58:8	7	=
RVAL	58:10	58:10	6	TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
FUNCTION_CALL	58:10	58:49	7	TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
CALLEE	58:10	58:10	8	TIFFSetField
LEAF_NODE	58:10	58:10	9	TIFFSetField
LEAF_NODE	58:22	58:22	8	(
ARGUMENT	58:23	58:23	8	tif
FIELD	58:23	58:23	9	tif
LEAF_NODE	58:23	58:23	10	tif
LEAF_NODE	58:26	58:26	8	,
ARGUMENT	58:28	58:28	8	TIFFTAG_IMAGEWIDTH
FIELD	58:28	58:28	9	TIFFTAG_IMAGEWIDTH
LEAF_NODE	58:28	58:28	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	58:46	58:46	8	,
ARGUMENT	58:48	58:48	8	1
FIELD	58:48	58:48	9	1
LEAF_NODE	58:48	58:48	10	1
LEAF_NODE	58:49	58:49	8	)
LEAF_NODE	58:50	58:50	4	;
EXPR_STATEMENT	59:4	59:15	3	assert ( ret ) ;
EXPR	59:4	59:4	4	assert ( ret )
FUNCTION_CALL	59:4	59:14	5	assert ( ret )
CALLEE	59:4	59:4	6	assert
LEAF_NODE	59:4	59:4	7	assert
LEAF_NODE	59:10	59:10	6	(
ARGUMENT	59:11	59:11	6	ret
FIELD	59:11	59:11	7	ret
LEAF_NODE	59:11	59:11	8	ret
LEAF_NODE	59:14	59:14	6	)
LEAF_NODE	59:15	59:15	4	;
EXPR_STATEMENT	60:4	60:56	3	ret = TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , height ) ;
EXPR	60:4	60:4	4	ret = TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , height )
ASSIGN	60:4	60:10	5	ret = TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , height )
LVAL	60:4	60:4	6	ret
FIELD	60:4	60:4	7	ret
LEAF_NODE	60:4	60:4	8	ret
ASSIGN_OP	60:8	60:8	6	=
LEAF_NODE	60:8	60:8	7	=
RVAL	60:10	60:10	6	TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , height )
FUNCTION_CALL	60:10	60:55	7	TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , height )
CALLEE	60:10	60:10	8	TIFFSetField
LEAF_NODE	60:10	60:10	9	TIFFSetField
LEAF_NODE	60:22	60:22	8	(
ARGUMENT	60:23	60:23	8	tif
FIELD	60:23	60:23	9	tif
LEAF_NODE	60:23	60:23	10	tif
LEAF_NODE	60:26	60:26	8	,
ARGUMENT	60:28	60:28	8	TIFFTAG_IMAGELENGTH
FIELD	60:28	60:28	9	TIFFTAG_IMAGELENGTH
LEAF_NODE	60:28	60:28	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	60:47	60:47	8	,
ARGUMENT	60:49	60:49	8	height
FIELD	60:49	60:49	9	height
LEAF_NODE	60:49	60:49	10	height
LEAF_NODE	60:55	60:55	8	)
LEAF_NODE	60:56	60:56	4	;
EXPR_STATEMENT	61:4	61:15	3	assert ( ret ) ;
EXPR	61:4	61:4	4	assert ( ret )
FUNCTION_CALL	61:4	61:14	5	assert ( ret )
CALLEE	61:4	61:4	6	assert
LEAF_NODE	61:4	61:4	7	assert
LEAF_NODE	61:10	61:10	6	(
ARGUMENT	61:11	61:11	6	ret
FIELD	61:11	61:11	7	ret
LEAF_NODE	61:11	61:11	8	ret
LEAF_NODE	61:14	61:14	6	)
LEAF_NODE	61:15	61:15	4	;
EXPR_STATEMENT	62:4	62:53	3	ret = TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 ) ;
EXPR	62:4	62:4	4	ret = TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
ASSIGN	62:4	62:10	5	ret = TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
LVAL	62:4	62:4	6	ret
FIELD	62:4	62:4	7	ret
LEAF_NODE	62:4	62:4	8	ret
ASSIGN_OP	62:8	62:8	6	=
LEAF_NODE	62:8	62:8	7	=
RVAL	62:10	62:10	6	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
FUNCTION_CALL	62:10	62:52	7	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
CALLEE	62:10	62:10	8	TIFFSetField
LEAF_NODE	62:10	62:10	9	TIFFSetField
LEAF_NODE	62:22	62:22	8	(
ARGUMENT	62:23	62:23	8	tif
FIELD	62:23	62:23	9	tif
LEAF_NODE	62:23	62:23	10	tif
LEAF_NODE	62:26	62:26	8	,
ARGUMENT	62:28	62:28	8	TIFFTAG_BITSPERSAMPLE
FIELD	62:28	62:28	9	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	62:28	62:28	10	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	62:49	62:49	8	,
ARGUMENT	62:51	62:51	8	8
FIELD	62:51	62:51	9	8
LEAF_NODE	62:51	62:51	10	8
LEAF_NODE	62:52	62:52	8	)
LEAF_NODE	62:53	62:53	4	;
EXPR_STATEMENT	63:4	63:15	3	assert ( ret ) ;
EXPR	63:4	63:4	4	assert ( ret )
FUNCTION_CALL	63:4	63:14	5	assert ( ret )
CALLEE	63:4	63:4	6	assert
LEAF_NODE	63:4	63:4	7	assert
LEAF_NODE	63:10	63:10	6	(
ARGUMENT	63:11	63:11	6	ret
FIELD	63:11	63:11	7	ret
LEAF_NODE	63:11	63:11	8	ret
LEAF_NODE	63:14	63:14	6	)
LEAF_NODE	63:15	63:15	4	;
EXPR_STATEMENT	64:4	64:55	3	ret = TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 ) ;
EXPR	64:4	64:4	4	ret = TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
ASSIGN	64:4	64:10	5	ret = TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
LVAL	64:4	64:4	6	ret
FIELD	64:4	64:4	7	ret
LEAF_NODE	64:4	64:4	8	ret
ASSIGN_OP	64:8	64:8	6	=
LEAF_NODE	64:8	64:8	7	=
RVAL	64:10	64:10	6	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
FUNCTION_CALL	64:10	64:54	7	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	64:10	64:10	8	TIFFSetField
LEAF_NODE	64:10	64:10	9	TIFFSetField
LEAF_NODE	64:22	64:22	8	(
ARGUMENT	64:23	64:23	8	tif
FIELD	64:23	64:23	9	tif
LEAF_NODE	64:23	64:23	10	tif
LEAF_NODE	64:26	64:26	8	,
ARGUMENT	64:28	64:28	8	TIFFTAG_SAMPLESPERPIXEL
FIELD	64:28	64:28	9	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	64:28	64:28	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	64:51	64:51	8	,
ARGUMENT	64:53	64:53	8	1
FIELD	64:53	64:53	9	1
LEAF_NODE	64:53	64:53	10	1
LEAF_NODE	64:54	64:54	8	)
LEAF_NODE	64:55	64:55	4	;
EXPR_STATEMENT	65:4	65:15	3	assert ( ret ) ;
EXPR	65:4	65:4	4	assert ( ret )
FUNCTION_CALL	65:4	65:14	5	assert ( ret )
CALLEE	65:4	65:4	6	assert
LEAF_NODE	65:4	65:4	7	assert
LEAF_NODE	65:10	65:10	6	(
ARGUMENT	65:11	65:11	6	ret
FIELD	65:11	65:11	7	ret
LEAF_NODE	65:11	65:11	8	ret
LEAF_NODE	65:14	65:14	6	)
LEAF_NODE	65:15	65:15	4	;
EXPR_STATEMENT	66:4	66:70	3	ret = TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	66:4	66:4	4	ret = TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
ASSIGN	66:4	66:10	5	ret = TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
LVAL	66:4	66:4	6	ret
FIELD	66:4	66:4	7	ret
LEAF_NODE	66:4	66:4	8	ret
ASSIGN_OP	66:8	66:8	6	=
LEAF_NODE	66:8	66:8	7	=
RVAL	66:10	66:10	6	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	66:10	66:69	7	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	66:10	66:10	8	TIFFSetField
LEAF_NODE	66:10	66:10	9	TIFFSetField
LEAF_NODE	66:22	66:22	8	(
ARGUMENT	66:23	66:23	8	tif
FIELD	66:23	66:23	9	tif
LEAF_NODE	66:23	66:23	10	tif
LEAF_NODE	66:26	66:26	8	,
ARGUMENT	66:28	66:28	8	TIFFTAG_PLANARCONFIG
FIELD	66:28	66:28	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	66:28	66:28	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	66:48	66:48	8	,
ARGUMENT	66:50	66:50	8	PLANARCONFIG_CONTIG
FIELD	66:50	66:50	9	PLANARCONFIG_CONTIG
LEAF_NODE	66:50	66:50	10	PLANARCONFIG_CONTIG
LEAF_NODE	66:69	66:69	8	)
LEAF_NODE	66:70	66:70	4	;
EXPR_STATEMENT	67:4	67:15	3	assert ( ret ) ;
EXPR	67:4	67:4	4	assert ( ret )
FUNCTION_CALL	67:4	67:14	5	assert ( ret )
CALLEE	67:4	67:4	6	assert
LEAF_NODE	67:4	67:4	7	assert
LEAF_NODE	67:10	67:10	6	(
ARGUMENT	67:11	67:11	6	ret
FIELD	67:11	67:11	7	ret
LEAF_NODE	67:11	67:11	8	ret
LEAF_NODE	67:14	67:14	6	)
LEAF_NODE	67:15	67:15	4	;
SELECTION	69:4	70:4	3	
KEYWORD	69:4	69:4	4	if
LEAF_NODE	69:4	69:4	5	if
LEAF_NODE	69:6	69:6	4	(
CONDITION	69:8	69:8	4	tiled
EXPR	69:8	69:8	5	tiled
FIELD	69:8	69:8	6	tiled
LEAF_NODE	69:8	69:8	7	tiled
LEAF_NODE	69:14	69:14	4	)
STATEMENTS	70:4	75:4	4	
LEAF_NODE	70:4	70:4	5	{
STATEMENTS	71:8	74:8	5	
EXPR_STATEMENT	71:8	71:54	6	ret = TIFFSetField ( tif , TIFFTAG_TILEWIDTH , 16 ) ;
EXPR	71:8	71:8	7	ret = TIFFSetField ( tif , TIFFTAG_TILEWIDTH , 16 )
ASSIGN	71:8	71:14	8	ret = TIFFSetField ( tif , TIFFTAG_TILEWIDTH , 16 )
LVAL	71:8	71:8	9	ret
FIELD	71:8	71:8	10	ret
LEAF_NODE	71:8	71:8	11	ret
ASSIGN_OP	71:12	71:12	9	=
LEAF_NODE	71:12	71:12	10	=
RVAL	71:14	71:14	9	TIFFSetField ( tif , TIFFTAG_TILEWIDTH , 16 )
FUNCTION_CALL	71:14	71:53	10	TIFFSetField ( tif , TIFFTAG_TILEWIDTH , 16 )
CALLEE	71:14	71:14	11	TIFFSetField
LEAF_NODE	71:14	71:14	12	TIFFSetField
LEAF_NODE	71:26	71:26	11	(
ARGUMENT	71:27	71:27	11	tif
FIELD	71:27	71:27	12	tif
LEAF_NODE	71:27	71:27	13	tif
LEAF_NODE	71:30	71:30	11	,
ARGUMENT	71:32	71:32	11	TIFFTAG_TILEWIDTH
FIELD	71:32	71:32	12	TIFFTAG_TILEWIDTH
LEAF_NODE	71:32	71:32	13	TIFFTAG_TILEWIDTH
LEAF_NODE	71:49	71:49	11	,
ARGUMENT	71:51	71:51	11	16
FIELD	71:51	71:51	12	16
LEAF_NODE	71:51	71:51	13	16
LEAF_NODE	71:53	71:53	11	)
LEAF_NODE	71:54	71:54	7	;
EXPR_STATEMENT	72:8	72:21	6	assert ( ret ) ;
EXPR	72:8	72:8	7	assert ( ret )
FUNCTION_CALL	72:8	72:20	8	assert ( ret )
CALLEE	72:8	72:8	9	assert
LEAF_NODE	72:8	72:8	10	assert
LEAF_NODE	72:14	72:14	9	(
ARGUMENT	72:16	72:16	9	ret
FIELD	72:16	72:16	10	ret
LEAF_NODE	72:16	72:16	11	ret
LEAF_NODE	72:20	72:20	9	)
LEAF_NODE	72:21	72:21	7	;
EXPR_STATEMENT	73:8	73:55	6	ret = TIFFSetField ( tif , TIFFTAG_TILELENGTH , 16 ) ;
EXPR	73:8	73:8	7	ret = TIFFSetField ( tif , TIFFTAG_TILELENGTH , 16 )
ASSIGN	73:8	73:14	8	ret = TIFFSetField ( tif , TIFFTAG_TILELENGTH , 16 )
LVAL	73:8	73:8	9	ret
FIELD	73:8	73:8	10	ret
LEAF_NODE	73:8	73:8	11	ret
ASSIGN_OP	73:12	73:12	9	=
LEAF_NODE	73:12	73:12	10	=
RVAL	73:14	73:14	9	TIFFSetField ( tif , TIFFTAG_TILELENGTH , 16 )
FUNCTION_CALL	73:14	73:54	10	TIFFSetField ( tif , TIFFTAG_TILELENGTH , 16 )
CALLEE	73:14	73:14	11	TIFFSetField
LEAF_NODE	73:14	73:14	12	TIFFSetField
LEAF_NODE	73:26	73:26	11	(
ARGUMENT	73:27	73:27	11	tif
FIELD	73:27	73:27	12	tif
LEAF_NODE	73:27	73:27	13	tif
LEAF_NODE	73:30	73:30	11	,
ARGUMENT	73:32	73:32	11	TIFFTAG_TILELENGTH
FIELD	73:32	73:32	12	TIFFTAG_TILELENGTH
LEAF_NODE	73:32	73:32	13	TIFFTAG_TILELENGTH
LEAF_NODE	73:50	73:50	11	,
ARGUMENT	73:52	73:52	11	16
FIELD	73:52	73:52	12	16
LEAF_NODE	73:52	73:52	13	16
LEAF_NODE	73:54	73:54	11	)
LEAF_NODE	73:55	73:55	7	;
EXPR_STATEMENT	74:8	74:21	6	assert ( ret ) ;
EXPR	74:8	74:8	7	assert ( ret )
FUNCTION_CALL	74:8	74:20	8	assert ( ret )
CALLEE	74:8	74:8	9	assert
LEAF_NODE	74:8	74:8	10	assert
LEAF_NODE	74:14	74:14	9	(
ARGUMENT	74:16	74:16	9	ret
FIELD	74:16	74:16	10	ret
LEAF_NODE	74:16	74:16	11	ret
LEAF_NODE	74:20	74:20	9	)
LEAF_NODE	74:21	74:21	7	;
LEAF_NODE	75:4	75:4	5	}
SELECTION	76:4	77:4	3	
KEYWORD	76:4	76:4	4	else
LEAF_NODE	76:4	76:4	5	else
STATEMENTS	77:4	80:4	4	
LEAF_NODE	77:4	77:4	5	{
STATEMENTS	78:8	79:8	5	
EXPR_STATEMENT	78:8	78:56	6	ret = TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 ) ;
EXPR	78:8	78:8	7	ret = TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
ASSIGN	78:8	78:14	8	ret = TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
LVAL	78:8	78:8	9	ret
FIELD	78:8	78:8	10	ret
LEAF_NODE	78:8	78:8	11	ret
ASSIGN_OP	78:12	78:12	9	=
LEAF_NODE	78:12	78:12	10	=
RVAL	78:14	78:14	9	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
FUNCTION_CALL	78:14	78:55	10	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
CALLEE	78:14	78:14	11	TIFFSetField
LEAF_NODE	78:14	78:14	12	TIFFSetField
LEAF_NODE	78:26	78:26	11	(
ARGUMENT	78:27	78:27	11	tif
FIELD	78:27	78:27	12	tif
LEAF_NODE	78:27	78:27	13	tif
LEAF_NODE	78:30	78:30	11	,
ARGUMENT	78:32	78:32	11	TIFFTAG_ROWSPERSTRIP
FIELD	78:32	78:32	12	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	78:32	78:32	13	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	78:52	78:52	11	,
ARGUMENT	78:54	78:54	11	1
FIELD	78:54	78:54	12	1
LEAF_NODE	78:54	78:54	13	1
LEAF_NODE	78:55	78:55	11	)
LEAF_NODE	78:56	78:56	7	;
EXPR_STATEMENT	79:8	79:19	6	assert ( ret ) ;
EXPR	79:8	79:8	7	assert ( ret )
FUNCTION_CALL	79:8	79:18	8	assert ( ret )
CALLEE	79:8	79:8	9	assert
LEAF_NODE	79:8	79:8	10	assert
LEAF_NODE	79:14	79:14	9	(
ARGUMENT	79:15	79:15	9	ret
FIELD	79:15	79:15	10	ret
LEAF_NODE	79:15	79:15	11	ret
LEAF_NODE	79:18	79:18	9	)
LEAF_NODE	79:19	79:19	7	;
LEAF_NODE	80:4	80:4	5	}
EXPR_STATEMENT	82:4	82:42	3	ret = TIFFDeferStrileArrayWriting ( tif ) ;
EXPR	82:4	82:4	4	ret = TIFFDeferStrileArrayWriting ( tif )
ASSIGN	82:4	82:10	5	ret = TIFFDeferStrileArrayWriting ( tif )
LVAL	82:4	82:4	6	ret
FIELD	82:4	82:4	7	ret
LEAF_NODE	82:4	82:4	8	ret
ASSIGN_OP	82:8	82:8	6	=
LEAF_NODE	82:8	82:8	7	=
RVAL	82:10	82:10	6	TIFFDeferStrileArrayWriting ( tif )
FUNCTION_CALL	82:10	82:41	7	TIFFDeferStrileArrayWriting ( tif )
CALLEE	82:10	82:10	8	TIFFDeferStrileArrayWriting
LEAF_NODE	82:10	82:10	9	TIFFDeferStrileArrayWriting
LEAF_NODE	82:37	82:37	8	(
ARGUMENT	82:38	82:38	8	tif
FIELD	82:38	82:38	9	tif
LEAF_NODE	82:38	82:38	10	tif
LEAF_NODE	82:41	82:41	8	)
LEAF_NODE	82:42	82:42	4	;
EXPR_STATEMENT	83:4	83:15	3	assert ( ret ) ;
EXPR	83:4	83:4	4	assert ( ret )
FUNCTION_CALL	83:4	83:14	5	assert ( ret )
CALLEE	83:4	83:4	6	assert
LEAF_NODE	83:4	83:4	7	assert
LEAF_NODE	83:10	83:10	6	(
ARGUMENT	83:11	83:11	6	ret
FIELD	83:11	83:11	7	ret
LEAF_NODE	83:11	83:11	8	ret
LEAF_NODE	83:14	83:14	6	)
LEAF_NODE	83:15	83:15	4	;
EXPR_STATEMENT	85:4	85:46	3	ret = TIFFWriteCheck ( tif , tiled , "test" ) ;
EXPR	85:4	85:4	4	ret = TIFFWriteCheck ( tif , tiled , "test" )
ASSIGN	85:4	85:10	5	ret = TIFFWriteCheck ( tif , tiled , "test" )
LVAL	85:4	85:4	6	ret
FIELD	85:4	85:4	7	ret
LEAF_NODE	85:4	85:4	8	ret
ASSIGN_OP	85:8	85:8	6	=
LEAF_NODE	85:8	85:8	7	=
RVAL	85:10	85:10	6	TIFFWriteCheck ( tif , tiled , "test" )
FUNCTION_CALL	85:10	85:45	7	TIFFWriteCheck ( tif , tiled , "test" )
CALLEE	85:10	85:10	8	TIFFWriteCheck
LEAF_NODE	85:10	85:10	9	TIFFWriteCheck
LEAF_NODE	85:24	85:24	8	(
ARGUMENT	85:26	85:26	8	tif
FIELD	85:26	85:26	9	tif
LEAF_NODE	85:26	85:26	10	tif
LEAF_NODE	85:29	85:29	8	,
ARGUMENT	85:31	85:31	8	tiled
FIELD	85:31	85:31	9	tiled
LEAF_NODE	85:31	85:31	10	tiled
LEAF_NODE	85:36	85:36	8	,
ARGUMENT	85:38	85:38	8	"test"
FIELD	85:38	85:38	9	"test"
LEAF_NODE	85:38	85:38	10	"test"
LEAF_NODE	85:45	85:45	8	)
LEAF_NODE	85:46	85:46	4	;
EXPR_STATEMENT	86:4	86:15	3	assert ( ret ) ;
EXPR	86:4	86:4	4	assert ( ret )
FUNCTION_CALL	86:4	86:14	5	assert ( ret )
CALLEE	86:4	86:4	6	assert
LEAF_NODE	86:4	86:4	7	assert
LEAF_NODE	86:10	86:10	6	(
ARGUMENT	86:11	86:11	6	ret
FIELD	86:11	86:11	7	ret
LEAF_NODE	86:11	86:11	8	ret
LEAF_NODE	86:14	86:14	6	)
LEAF_NODE	86:15	86:15	4	;
EXPR_STATEMENT	88:4	88:35	3	ret = TIFFWriteDirectory ( tif ) ;
EXPR	88:4	88:4	4	ret = TIFFWriteDirectory ( tif )
ASSIGN	88:4	88:10	5	ret = TIFFWriteDirectory ( tif )
LVAL	88:4	88:4	6	ret
FIELD	88:4	88:4	7	ret
LEAF_NODE	88:4	88:4	8	ret
ASSIGN_OP	88:8	88:8	6	=
LEAF_NODE	88:8	88:8	7	=
RVAL	88:10	88:10	6	TIFFWriteDirectory ( tif )
FUNCTION_CALL	88:10	88:34	7	TIFFWriteDirectory ( tif )
CALLEE	88:10	88:10	8	TIFFWriteDirectory
LEAF_NODE	88:10	88:10	9	TIFFWriteDirectory
LEAF_NODE	88:28	88:28	8	(
ARGUMENT	88:30	88:30	8	tif
FIELD	88:30	88:30	9	tif
LEAF_NODE	88:30	88:30	10	tif
LEAF_NODE	88:34	88:34	8	)
LEAF_NODE	88:35	88:35	4	;
EXPR_STATEMENT	89:4	89:15	3	assert ( ret ) ;
EXPR	89:4	89:4	4	assert ( ret )
FUNCTION_CALL	89:4	89:14	5	assert ( ret )
CALLEE	89:4	89:4	6	assert
LEAF_NODE	89:4	89:4	7	assert
LEAF_NODE	89:10	89:10	6	(
ARGUMENT	89:11	89:11	6	ret
FIELD	89:11	89:11	7	ret
LEAF_NODE	89:11	89:11	8	ret
LEAF_NODE	89:14	89:14	6	)
LEAF_NODE	89:15	89:15	4	;
EXPR_STATEMENT	92:4	92:28	3	TIFFFreeDirectory ( tif ) ;
EXPR	92:4	92:4	4	TIFFFreeDirectory ( tif )
FUNCTION_CALL	92:4	92:27	5	TIFFFreeDirectory ( tif )
CALLEE	92:4	92:4	6	TIFFFreeDirectory
LEAF_NODE	92:4	92:4	7	TIFFFreeDirectory
LEAF_NODE	92:21	92:21	6	(
ARGUMENT	92:23	92:23	6	tif
FIELD	92:23	92:23	7	tif
LEAF_NODE	92:23	92:23	8	tif
LEAF_NODE	92:27	92:27	6	)
LEAF_NODE	92:28	92:28	4	;
EXPR_STATEMENT	93:4	93:30	3	TIFFCreateDirectory ( tif ) ;
EXPR	93:4	93:4	4	TIFFCreateDirectory ( tif )
FUNCTION_CALL	93:4	93:29	5	TIFFCreateDirectory ( tif )
CALLEE	93:4	93:4	6	TIFFCreateDirectory
LEAF_NODE	93:4	93:4	7	TIFFCreateDirectory
LEAF_NODE	93:23	93:23	6	(
ARGUMENT	93:25	93:25	6	tif
FIELD	93:25	93:25	7	tif
LEAF_NODE	93:25	93:25	8	tif
LEAF_NODE	93:29	93:29	6	)
LEAF_NODE	93:30	93:30	4	;
EXPR_STATEMENT	95:4	95:65	3	ret = TIFFSetField ( tif , TIFFTAG_SUBFILETYPE , FILETYPE_PAGE ) ;
EXPR	95:4	95:4	4	ret = TIFFSetField ( tif , TIFFTAG_SUBFILETYPE , FILETYPE_PAGE )
ASSIGN	95:4	95:10	5	ret = TIFFSetField ( tif , TIFFTAG_SUBFILETYPE , FILETYPE_PAGE )
LVAL	95:4	95:4	6	ret
FIELD	95:4	95:4	7	ret
LEAF_NODE	95:4	95:4	8	ret
ASSIGN_OP	95:8	95:8	6	=
LEAF_NODE	95:8	95:8	7	=
RVAL	95:10	95:10	6	TIFFSetField ( tif , TIFFTAG_SUBFILETYPE , FILETYPE_PAGE )
FUNCTION_CALL	95:10	95:64	7	TIFFSetField ( tif , TIFFTAG_SUBFILETYPE , FILETYPE_PAGE )
CALLEE	95:10	95:10	8	TIFFSetField
LEAF_NODE	95:10	95:10	9	TIFFSetField
LEAF_NODE	95:22	95:22	8	(
ARGUMENT	95:24	95:24	8	tif
FIELD	95:24	95:24	9	tif
LEAF_NODE	95:24	95:24	10	tif
LEAF_NODE	95:27	95:27	8	,
ARGUMENT	95:29	95:29	8	TIFFTAG_SUBFILETYPE
FIELD	95:29	95:29	9	TIFFTAG_SUBFILETYPE
LEAF_NODE	95:29	95:29	10	TIFFTAG_SUBFILETYPE
LEAF_NODE	95:48	95:48	8	,
ARGUMENT	95:50	95:50	8	FILETYPE_PAGE
FIELD	95:50	95:50	9	FILETYPE_PAGE
LEAF_NODE	95:50	95:50	10	FILETYPE_PAGE
LEAF_NODE	95:64	95:64	8	)
LEAF_NODE	95:65	95:65	4	;
EXPR_STATEMENT	96:4	96:15	3	assert ( ret ) ;
EXPR	96:4	96:4	4	assert ( ret )
FUNCTION_CALL	96:4	96:14	5	assert ( ret )
CALLEE	96:4	96:4	6	assert
LEAF_NODE	96:4	96:4	7	assert
LEAF_NODE	96:10	96:10	6	(
ARGUMENT	96:11	96:11	6	ret
FIELD	96:11	96:11	7	ret
LEAF_NODE	96:11	96:11	8	ret
LEAF_NODE	96:14	96:14	6	)
LEAF_NODE	96:15	96:15	4	;
EXPR_STATEMENT	97:4	97:66	3	ret = TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE ) ;
EXPR	97:4	97:4	4	ret = TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
ASSIGN	97:4	97:10	5	ret = TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
LVAL	97:4	97:4	6	ret
FIELD	97:4	97:4	7	ret
LEAF_NODE	97:4	97:4	8	ret
ASSIGN_OP	97:8	97:8	6	=
LEAF_NODE	97:8	97:8	7	=
RVAL	97:10	97:10	6	TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
FUNCTION_CALL	97:10	97:65	7	TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
CALLEE	97:10	97:10	8	TIFFSetField
LEAF_NODE	97:10	97:10	9	TIFFSetField
LEAF_NODE	97:22	97:22	8	(
ARGUMENT	97:23	97:23	8	tif
FIELD	97:23	97:23	9	tif
LEAF_NODE	97:23	97:23	10	tif
LEAF_NODE	97:26	97:26	8	,
ARGUMENT	97:28	97:28	8	TIFFTAG_COMPRESSION
FIELD	97:28	97:28	9	TIFFTAG_COMPRESSION
LEAF_NODE	97:28	97:28	10	TIFFTAG_COMPRESSION
LEAF_NODE	97:47	97:47	8	,
ARGUMENT	97:49	97:49	8	COMPRESSION_NONE
FIELD	97:49	97:49	9	COMPRESSION_NONE
LEAF_NODE	97:49	97:49	10	COMPRESSION_NONE
LEAF_NODE	97:65	97:65	8	)
LEAF_NODE	97:66	97:66	4	;
EXPR_STATEMENT	98:4	98:15	3	assert ( ret ) ;
EXPR	98:4	98:4	4	assert ( ret )
FUNCTION_CALL	98:4	98:14	5	assert ( ret )
CALLEE	98:4	98:4	6	assert
LEAF_NODE	98:4	98:4	7	assert
LEAF_NODE	98:10	98:10	6	(
ARGUMENT	98:11	98:11	6	ret
FIELD	98:11	98:11	7	ret
LEAF_NODE	98:11	98:11	8	ret
LEAF_NODE	98:14	98:14	6	)
LEAF_NODE	98:15	98:15	4	;
EXPR_STATEMENT	99:4	99:50	3	ret = TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 ) ;
EXPR	99:4	99:4	4	ret = TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
ASSIGN	99:4	99:10	5	ret = TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
LVAL	99:4	99:4	6	ret
FIELD	99:4	99:4	7	ret
LEAF_NODE	99:4	99:4	8	ret
ASSIGN_OP	99:8	99:8	6	=
LEAF_NODE	99:8	99:8	7	=
RVAL	99:10	99:10	6	TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
FUNCTION_CALL	99:10	99:49	7	TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
CALLEE	99:10	99:10	8	TIFFSetField
LEAF_NODE	99:10	99:10	9	TIFFSetField
LEAF_NODE	99:22	99:22	8	(
ARGUMENT	99:23	99:23	8	tif
FIELD	99:23	99:23	9	tif
LEAF_NODE	99:23	99:23	10	tif
LEAF_NODE	99:26	99:26	8	,
ARGUMENT	99:28	99:28	8	TIFFTAG_IMAGEWIDTH
FIELD	99:28	99:28	9	TIFFTAG_IMAGEWIDTH
LEAF_NODE	99:28	99:28	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	99:46	99:46	8	,
ARGUMENT	99:48	99:48	8	1
FIELD	99:48	99:48	9	1
LEAF_NODE	99:48	99:48	10	1
LEAF_NODE	99:49	99:49	8	)
LEAF_NODE	99:50	99:50	4	;
EXPR_STATEMENT	100:4	100:15	3	assert ( ret ) ;
EXPR	100:4	100:4	4	assert ( ret )
FUNCTION_CALL	100:4	100:14	5	assert ( ret )
CALLEE	100:4	100:4	6	assert
LEAF_NODE	100:4	100:4	7	assert
LEAF_NODE	100:10	100:10	6	(
ARGUMENT	100:11	100:11	6	ret
FIELD	100:11	100:11	7	ret
LEAF_NODE	100:11	100:11	8	ret
LEAF_NODE	100:14	100:14	6	)
LEAF_NODE	100:15	100:15	4	;
EXPR_STATEMENT	101:4	101:51	3	ret = TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , 1 ) ;
EXPR	101:4	101:4	4	ret = TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , 1 )
ASSIGN	101:4	101:10	5	ret = TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , 1 )
LVAL	101:4	101:4	6	ret
FIELD	101:4	101:4	7	ret
LEAF_NODE	101:4	101:4	8	ret
ASSIGN_OP	101:8	101:8	6	=
LEAF_NODE	101:8	101:8	7	=
RVAL	101:10	101:10	6	TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , 1 )
FUNCTION_CALL	101:10	101:50	7	TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , 1 )
CALLEE	101:10	101:10	8	TIFFSetField
LEAF_NODE	101:10	101:10	9	TIFFSetField
LEAF_NODE	101:22	101:22	8	(
ARGUMENT	101:23	101:23	8	tif
FIELD	101:23	101:23	9	tif
LEAF_NODE	101:23	101:23	10	tif
LEAF_NODE	101:26	101:26	8	,
ARGUMENT	101:28	101:28	8	TIFFTAG_IMAGELENGTH
FIELD	101:28	101:28	9	TIFFTAG_IMAGELENGTH
LEAF_NODE	101:28	101:28	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	101:47	101:47	8	,
ARGUMENT	101:49	101:49	8	1
FIELD	101:49	101:49	9	1
LEAF_NODE	101:49	101:49	10	1
LEAF_NODE	101:50	101:50	8	)
LEAF_NODE	101:51	101:51	4	;
EXPR_STATEMENT	102:4	102:15	3	assert ( ret ) ;
EXPR	102:4	102:4	4	assert ( ret )
FUNCTION_CALL	102:4	102:14	5	assert ( ret )
CALLEE	102:4	102:4	6	assert
LEAF_NODE	102:4	102:4	7	assert
LEAF_NODE	102:10	102:10	6	(
ARGUMENT	102:11	102:11	6	ret
FIELD	102:11	102:11	7	ret
LEAF_NODE	102:11	102:11	8	ret
LEAF_NODE	102:14	102:14	6	)
LEAF_NODE	102:15	102:15	4	;
EXPR_STATEMENT	103:4	103:53	3	ret = TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 ) ;
EXPR	103:4	103:4	4	ret = TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
ASSIGN	103:4	103:10	5	ret = TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
LVAL	103:4	103:4	6	ret
FIELD	103:4	103:4	7	ret
LEAF_NODE	103:4	103:4	8	ret
ASSIGN_OP	103:8	103:8	6	=
LEAF_NODE	103:8	103:8	7	=
RVAL	103:10	103:10	6	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
FUNCTION_CALL	103:10	103:52	7	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
CALLEE	103:10	103:10	8	TIFFSetField
LEAF_NODE	103:10	103:10	9	TIFFSetField
LEAF_NODE	103:22	103:22	8	(
ARGUMENT	103:23	103:23	8	tif
FIELD	103:23	103:23	9	tif
LEAF_NODE	103:23	103:23	10	tif
LEAF_NODE	103:26	103:26	8	,
ARGUMENT	103:28	103:28	8	TIFFTAG_BITSPERSAMPLE
FIELD	103:28	103:28	9	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	103:28	103:28	10	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	103:49	103:49	8	,
ARGUMENT	103:51	103:51	8	8
FIELD	103:51	103:51	9	8
LEAF_NODE	103:51	103:51	10	8
LEAF_NODE	103:52	103:52	8	)
LEAF_NODE	103:53	103:53	4	;
EXPR_STATEMENT	104:4	104:15	3	assert ( ret ) ;
EXPR	104:4	104:4	4	assert ( ret )
FUNCTION_CALL	104:4	104:14	5	assert ( ret )
CALLEE	104:4	104:4	6	assert
LEAF_NODE	104:4	104:4	7	assert
LEAF_NODE	104:10	104:10	6	(
ARGUMENT	104:11	104:11	6	ret
FIELD	104:11	104:11	7	ret
LEAF_NODE	104:11	104:11	8	ret
LEAF_NODE	104:14	104:14	6	)
LEAF_NODE	104:15	104:15	4	;
EXPR_STATEMENT	105:4	105:55	3	ret = TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 ) ;
EXPR	105:4	105:4	4	ret = TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
ASSIGN	105:4	105:10	5	ret = TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
LVAL	105:4	105:4	6	ret
FIELD	105:4	105:4	7	ret
LEAF_NODE	105:4	105:4	8	ret
ASSIGN_OP	105:8	105:8	6	=
LEAF_NODE	105:8	105:8	7	=
RVAL	105:10	105:10	6	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
FUNCTION_CALL	105:10	105:54	7	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	105:10	105:10	8	TIFFSetField
LEAF_NODE	105:10	105:10	9	TIFFSetField
LEAF_NODE	105:22	105:22	8	(
ARGUMENT	105:23	105:23	8	tif
FIELD	105:23	105:23	9	tif
LEAF_NODE	105:23	105:23	10	tif
LEAF_NODE	105:26	105:26	8	,
ARGUMENT	105:28	105:28	8	TIFFTAG_SAMPLESPERPIXEL
FIELD	105:28	105:28	9	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	105:28	105:28	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	105:51	105:51	8	,
ARGUMENT	105:53	105:53	8	1
FIELD	105:53	105:53	9	1
LEAF_NODE	105:53	105:53	10	1
LEAF_NODE	105:54	105:54	8	)
LEAF_NODE	105:55	105:55	4	;
EXPR_STATEMENT	106:4	106:15	3	assert ( ret ) ;
EXPR	106:4	106:4	4	assert ( ret )
FUNCTION_CALL	106:4	106:14	5	assert ( ret )
CALLEE	106:4	106:4	6	assert
LEAF_NODE	106:4	106:4	7	assert
LEAF_NODE	106:10	106:10	6	(
ARGUMENT	106:11	106:11	6	ret
FIELD	106:11	106:11	7	ret
LEAF_NODE	106:11	106:11	8	ret
LEAF_NODE	106:14	106:14	6	)
LEAF_NODE	106:15	106:15	4	;
EXPR_STATEMENT	107:4	107:70	3	ret = TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	107:4	107:4	4	ret = TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
ASSIGN	107:4	107:10	5	ret = TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
LVAL	107:4	107:4	6	ret
FIELD	107:4	107:4	7	ret
LEAF_NODE	107:4	107:4	8	ret
ASSIGN_OP	107:8	107:8	6	=
LEAF_NODE	107:8	107:8	7	=
RVAL	107:10	107:10	6	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	107:10	107:69	7	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	107:10	107:10	8	TIFFSetField
LEAF_NODE	107:10	107:10	9	TIFFSetField
LEAF_NODE	107:22	107:22	8	(
ARGUMENT	107:23	107:23	8	tif
FIELD	107:23	107:23	9	tif
LEAF_NODE	107:23	107:23	10	tif
LEAF_NODE	107:26	107:26	8	,
ARGUMENT	107:28	107:28	8	TIFFTAG_PLANARCONFIG
FIELD	107:28	107:28	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	107:28	107:28	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	107:48	107:48	8	,
ARGUMENT	107:50	107:50	8	PLANARCONFIG_CONTIG
FIELD	107:50	107:50	9	PLANARCONFIG_CONTIG
LEAF_NODE	107:50	107:50	10	PLANARCONFIG_CONTIG
LEAF_NODE	107:69	107:69	8	)
LEAF_NODE	107:70	107:70	4	;
EXPR_STATEMENT	108:4	108:15	3	assert ( ret ) ;
EXPR	108:4	108:4	4	assert ( ret )
FUNCTION_CALL	108:4	108:14	5	assert ( ret )
CALLEE	108:4	108:4	6	assert
LEAF_NODE	108:4	108:4	7	assert
LEAF_NODE	108:10	108:10	6	(
ARGUMENT	108:11	108:11	6	ret
FIELD	108:11	108:11	7	ret
LEAF_NODE	108:11	108:11	8	ret
LEAF_NODE	108:14	108:14	6	)
LEAF_NODE	108:15	108:15	4	;
EXPR_STATEMENT	109:4	109:52	3	ret = TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 ) ;
EXPR	109:4	109:4	4	ret = TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
ASSIGN	109:4	109:10	5	ret = TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
LVAL	109:4	109:4	6	ret
FIELD	109:4	109:4	7	ret
LEAF_NODE	109:4	109:4	8	ret
ASSIGN_OP	109:8	109:8	6	=
LEAF_NODE	109:8	109:8	7	=
RVAL	109:10	109:10	6	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
FUNCTION_CALL	109:10	109:51	7	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
CALLEE	109:10	109:10	8	TIFFSetField
LEAF_NODE	109:10	109:10	9	TIFFSetField
LEAF_NODE	109:22	109:22	8	(
ARGUMENT	109:23	109:23	8	tif
FIELD	109:23	109:23	9	tif
LEAF_NODE	109:23	109:23	10	tif
LEAF_NODE	109:26	109:26	8	,
ARGUMENT	109:28	109:28	8	TIFFTAG_ROWSPERSTRIP
FIELD	109:28	109:28	9	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	109:28	109:28	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	109:48	109:48	8	,
ARGUMENT	109:50	109:50	8	1
FIELD	109:50	109:50	9	1
LEAF_NODE	109:50	109:50	10	1
LEAF_NODE	109:51	109:51	8	)
LEAF_NODE	109:52	109:52	4	;
EXPR_STATEMENT	110:4	110:15	3	assert ( ret ) ;
EXPR	110:4	110:4	4	assert ( ret )
FUNCTION_CALL	110:4	110:14	5	assert ( ret )
CALLEE	110:4	110:4	6	assert
LEAF_NODE	110:4	110:4	7	assert
LEAF_NODE	110:10	110:10	6	(
ARGUMENT	110:11	110:11	6	ret
FIELD	110:11	110:11	7	ret
LEAF_NODE	110:11	110:11	8	ret
LEAF_NODE	110:14	110:14	6	)
LEAF_NODE	110:15	110:15	4	;
EXPR_STATEMENT	112:4	112:42	3	ret = TIFFDeferStrileArrayWriting ( tif ) ;
EXPR	112:4	112:4	4	ret = TIFFDeferStrileArrayWriting ( tif )
ASSIGN	112:4	112:10	5	ret = TIFFDeferStrileArrayWriting ( tif )
LVAL	112:4	112:4	6	ret
FIELD	112:4	112:4	7	ret
LEAF_NODE	112:4	112:4	8	ret
ASSIGN_OP	112:8	112:8	6	=
LEAF_NODE	112:8	112:8	7	=
RVAL	112:10	112:10	6	TIFFDeferStrileArrayWriting ( tif )
FUNCTION_CALL	112:10	112:41	7	TIFFDeferStrileArrayWriting ( tif )
CALLEE	112:10	112:10	8	TIFFDeferStrileArrayWriting
LEAF_NODE	112:10	112:10	9	TIFFDeferStrileArrayWriting
LEAF_NODE	112:37	112:37	8	(
ARGUMENT	112:38	112:38	8	tif
FIELD	112:38	112:38	9	tif
LEAF_NODE	112:38	112:38	10	tif
LEAF_NODE	112:41	112:41	8	)
LEAF_NODE	112:42	112:42	4	;
EXPR_STATEMENT	113:4	113:15	3	assert ( ret ) ;
EXPR	113:4	113:4	4	assert ( ret )
FUNCTION_CALL	113:4	113:14	5	assert ( ret )
CALLEE	113:4	113:4	6	assert
LEAF_NODE	113:4	113:4	7	assert
LEAF_NODE	113:10	113:10	6	(
ARGUMENT	113:11	113:11	6	ret
FIELD	113:11	113:11	7	ret
LEAF_NODE	113:11	113:11	8	ret
LEAF_NODE	113:14	113:14	6	)
LEAF_NODE	113:15	113:15	4	;
EXPR_STATEMENT	115:4	115:42	3	ret = TIFFWriteCheck ( tif , 0 , "test" ) ;
EXPR	115:4	115:4	4	ret = TIFFWriteCheck ( tif , 0 , "test" )
ASSIGN	115:4	115:10	5	ret = TIFFWriteCheck ( tif , 0 , "test" )
LVAL	115:4	115:4	6	ret
FIELD	115:4	115:4	7	ret
LEAF_NODE	115:4	115:4	8	ret
ASSIGN_OP	115:8	115:8	6	=
LEAF_NODE	115:8	115:8	7	=
RVAL	115:10	115:10	6	TIFFWriteCheck ( tif , 0 , "test" )
FUNCTION_CALL	115:10	115:41	7	TIFFWriteCheck ( tif , 0 , "test" )
CALLEE	115:10	115:10	8	TIFFWriteCheck
LEAF_NODE	115:10	115:10	9	TIFFWriteCheck
LEAF_NODE	115:24	115:24	8	(
ARGUMENT	115:26	115:26	8	tif
FIELD	115:26	115:26	9	tif
LEAF_NODE	115:26	115:26	10	tif
LEAF_NODE	115:29	115:29	8	,
ARGUMENT	115:31	115:31	8	0
FIELD	115:31	115:31	9	0
LEAF_NODE	115:31	115:31	10	0
LEAF_NODE	115:32	115:32	8	,
ARGUMENT	115:34	115:34	8	"test"
FIELD	115:34	115:34	9	"test"
LEAF_NODE	115:34	115:34	10	"test"
LEAF_NODE	115:41	115:41	8	)
LEAF_NODE	115:42	115:42	4	;
EXPR_STATEMENT	116:4	116:15	3	assert ( ret ) ;
EXPR	116:4	116:4	4	assert ( ret )
FUNCTION_CALL	116:4	116:14	5	assert ( ret )
CALLEE	116:4	116:4	6	assert
LEAF_NODE	116:4	116:4	7	assert
LEAF_NODE	116:10	116:10	6	(
ARGUMENT	116:11	116:11	6	ret
FIELD	116:11	116:11	7	ret
LEAF_NODE	116:11	116:11	8	ret
LEAF_NODE	116:14	116:14	6	)
LEAF_NODE	116:15	116:15	4	;
EXPR_STATEMENT	118:4	118:35	3	ret = TIFFWriteDirectory ( tif ) ;
EXPR	118:4	118:4	4	ret = TIFFWriteDirectory ( tif )
ASSIGN	118:4	118:10	5	ret = TIFFWriteDirectory ( tif )
LVAL	118:4	118:4	6	ret
FIELD	118:4	118:4	7	ret
LEAF_NODE	118:4	118:4	8	ret
ASSIGN_OP	118:8	118:8	6	=
LEAF_NODE	118:8	118:8	7	=
RVAL	118:10	118:10	6	TIFFWriteDirectory ( tif )
FUNCTION_CALL	118:10	118:34	7	TIFFWriteDirectory ( tif )
CALLEE	118:10	118:10	8	TIFFWriteDirectory
LEAF_NODE	118:10	118:10	9	TIFFWriteDirectory
LEAF_NODE	118:28	118:28	8	(
ARGUMENT	118:30	118:30	8	tif
FIELD	118:30	118:30	9	tif
LEAF_NODE	118:30	118:30	10	tif
LEAF_NODE	118:34	118:34	8	)
LEAF_NODE	118:35	118:35	4	;
EXPR_STATEMENT	119:4	119:15	3	assert ( ret ) ;
EXPR	119:4	119:4	4	assert ( ret )
FUNCTION_CALL	119:4	119:14	5	assert ( ret )
CALLEE	119:4	119:4	6	assert
LEAF_NODE	119:4	119:4	7	assert
LEAF_NODE	119:10	119:10	6	(
ARGUMENT	119:11	119:11	6	ret
FIELD	119:11	119:11	7	ret
LEAF_NODE	119:11	119:11	8	ret
LEAF_NODE	119:14	119:14	6	)
LEAF_NODE	119:15	119:15	4	;
EXPR_STATEMENT	122:4	122:36	3	ret = TIFFSetDirectory ( tif , 0 ) ;
EXPR	122:4	122:4	4	ret = TIFFSetDirectory ( tif , 0 )
ASSIGN	122:4	122:10	5	ret = TIFFSetDirectory ( tif , 0 )
LVAL	122:4	122:4	6	ret
FIELD	122:4	122:4	7	ret
LEAF_NODE	122:4	122:4	8	ret
ASSIGN_OP	122:8	122:8	6	=
LEAF_NODE	122:8	122:8	7	=
RVAL	122:10	122:10	6	TIFFSetDirectory ( tif , 0 )
FUNCTION_CALL	122:10	122:35	7	TIFFSetDirectory ( tif , 0 )
CALLEE	122:10	122:10	8	TIFFSetDirectory
LEAF_NODE	122:10	122:10	9	TIFFSetDirectory
LEAF_NODE	122:26	122:26	8	(
ARGUMENT	122:28	122:28	8	tif
FIELD	122:28	122:28	9	tif
LEAF_NODE	122:28	122:28	10	tif
LEAF_NODE	122:31	122:31	8	,
ARGUMENT	122:33	122:33	8	0
FIELD	122:33	122:33	9	0
LEAF_NODE	122:33	122:33	10	0
LEAF_NODE	122:35	122:35	8	)
LEAF_NODE	122:36	122:36	4	;
EXPR_STATEMENT	123:4	123:15	3	assert ( ret ) ;
EXPR	123:4	123:4	4	assert ( ret )
FUNCTION_CALL	123:4	123:14	5	assert ( ret )
CALLEE	123:4	123:4	6	assert
LEAF_NODE	123:4	123:4	7	assert
LEAF_NODE	123:10	123:10	6	(
ARGUMENT	123:11	123:11	6	ret
FIELD	123:11	123:11	7	ret
LEAF_NODE	123:11	123:11	8	ret
LEAF_NODE	123:14	123:14	6	)
LEAF_NODE	123:15	123:15	4	;
EXPR_STATEMENT	125:4	125:42	3	ret = TIFFForceStrileArrayWriting ( tif ) ;
EXPR	125:4	125:4	4	ret = TIFFForceStrileArrayWriting ( tif )
ASSIGN	125:4	125:10	5	ret = TIFFForceStrileArrayWriting ( tif )
LVAL	125:4	125:4	6	ret
FIELD	125:4	125:4	7	ret
LEAF_NODE	125:4	125:4	8	ret
ASSIGN_OP	125:8	125:8	6	=
LEAF_NODE	125:8	125:8	7	=
RVAL	125:10	125:10	6	TIFFForceStrileArrayWriting ( tif )
FUNCTION_CALL	125:10	125:41	7	TIFFForceStrileArrayWriting ( tif )
CALLEE	125:10	125:10	8	TIFFForceStrileArrayWriting
LEAF_NODE	125:10	125:10	9	TIFFForceStrileArrayWriting
LEAF_NODE	125:37	125:37	8	(
ARGUMENT	125:38	125:38	8	tif
FIELD	125:38	125:38	9	tif
LEAF_NODE	125:38	125:38	10	tif
LEAF_NODE	125:41	125:41	8	)
LEAF_NODE	125:42	125:42	4	;
EXPR_STATEMENT	126:4	126:15	3	assert ( ret ) ;
EXPR	126:4	126:4	4	assert ( ret )
FUNCTION_CALL	126:4	126:14	5	assert ( ret )
CALLEE	126:4	126:4	6	assert
LEAF_NODE	126:4	126:4	7	assert
LEAF_NODE	126:10	126:10	6	(
ARGUMENT	126:11	126:11	6	ret
FIELD	126:11	126:11	7	ret
LEAF_NODE	126:11	126:11	8	ret
LEAF_NODE	126:14	126:14	6	)
LEAF_NODE	126:15	126:15	4	;
EXPR_STATEMENT	128:4	128:36	3	ret = TIFFSetDirectory ( tif , 1 ) ;
EXPR	128:4	128:4	4	ret = TIFFSetDirectory ( tif , 1 )
ASSIGN	128:4	128:10	5	ret = TIFFSetDirectory ( tif , 1 )
LVAL	128:4	128:4	6	ret
FIELD	128:4	128:4	7	ret
LEAF_NODE	128:4	128:4	8	ret
ASSIGN_OP	128:8	128:8	6	=
LEAF_NODE	128:8	128:8	7	=
RVAL	128:10	128:10	6	TIFFSetDirectory ( tif , 1 )
FUNCTION_CALL	128:10	128:35	7	TIFFSetDirectory ( tif , 1 )
CALLEE	128:10	128:10	8	TIFFSetDirectory
LEAF_NODE	128:10	128:10	9	TIFFSetDirectory
LEAF_NODE	128:26	128:26	8	(
ARGUMENT	128:28	128:28	8	tif
FIELD	128:28	128:28	9	tif
LEAF_NODE	128:28	128:28	10	tif
LEAF_NODE	128:31	128:31	8	,
ARGUMENT	128:33	128:33	8	1
FIELD	128:33	128:33	9	1
LEAF_NODE	128:33	128:33	10	1
LEAF_NODE	128:35	128:35	8	)
LEAF_NODE	128:36	128:36	4	;
EXPR_STATEMENT	129:4	129:15	3	assert ( ret ) ;
EXPR	129:4	129:4	4	assert ( ret )
FUNCTION_CALL	129:4	129:14	5	assert ( ret )
CALLEE	129:4	129:4	6	assert
LEAF_NODE	129:4	129:4	7	assert
LEAF_NODE	129:10	129:10	6	(
ARGUMENT	129:11	129:11	6	ret
FIELD	129:11	129:11	7	ret
LEAF_NODE	129:11	129:11	8	ret
LEAF_NODE	129:14	129:14	6	)
LEAF_NODE	129:15	129:15	4	;
EXPR_STATEMENT	131:4	131:42	3	ret = TIFFForceStrileArrayWriting ( tif ) ;
EXPR	131:4	131:4	4	ret = TIFFForceStrileArrayWriting ( tif )
ASSIGN	131:4	131:10	5	ret = TIFFForceStrileArrayWriting ( tif )
LVAL	131:4	131:4	6	ret
FIELD	131:4	131:4	7	ret
LEAF_NODE	131:4	131:4	8	ret
ASSIGN_OP	131:8	131:8	6	=
LEAF_NODE	131:8	131:8	7	=
RVAL	131:10	131:10	6	TIFFForceStrileArrayWriting ( tif )
FUNCTION_CALL	131:10	131:41	7	TIFFForceStrileArrayWriting ( tif )
CALLEE	131:10	131:10	8	TIFFForceStrileArrayWriting
LEAF_NODE	131:10	131:10	9	TIFFForceStrileArrayWriting
LEAF_NODE	131:37	131:37	8	(
ARGUMENT	131:38	131:38	8	tif
FIELD	131:38	131:38	9	tif
LEAF_NODE	131:38	131:38	10	tif
LEAF_NODE	131:41	131:41	8	)
LEAF_NODE	131:42	131:42	4	;
EXPR_STATEMENT	132:4	132:15	3	assert ( ret ) ;
EXPR	132:4	132:4	4	assert ( ret )
FUNCTION_CALL	132:4	132:14	5	assert ( ret )
CALLEE	132:4	132:4	6	assert
LEAF_NODE	132:4	132:4	7	assert
LEAF_NODE	132:10	132:10	6	(
ARGUMENT	132:11	132:11	6	ret
FIELD	132:11	132:11	7	ret
LEAF_NODE	132:11	132:11	8	ret
LEAF_NODE	132:14	132:14	6	)
LEAF_NODE	132:15	132:15	4	;
EXPR_STATEMENT	135:4	135:36	3	ret = TIFFSetDirectory ( tif , 0 ) ;
EXPR	135:4	135:4	4	ret = TIFFSetDirectory ( tif , 0 )
ASSIGN	135:4	135:10	5	ret = TIFFSetDirectory ( tif , 0 )
LVAL	135:4	135:4	6	ret
FIELD	135:4	135:4	7	ret
LEAF_NODE	135:4	135:4	8	ret
ASSIGN_OP	135:8	135:8	6	=
LEAF_NODE	135:8	135:8	7	=
RVAL	135:10	135:10	6	TIFFSetDirectory ( tif , 0 )
FUNCTION_CALL	135:10	135:35	7	TIFFSetDirectory ( tif , 0 )
CALLEE	135:10	135:10	8	TIFFSetDirectory
LEAF_NODE	135:10	135:10	9	TIFFSetDirectory
LEAF_NODE	135:26	135:26	8	(
ARGUMENT	135:28	135:28	8	tif
FIELD	135:28	135:28	9	tif
LEAF_NODE	135:28	135:28	10	tif
LEAF_NODE	135:31	135:31	8	,
ARGUMENT	135:33	135:33	8	0
FIELD	135:33	135:33	9	0
LEAF_NODE	135:33	135:33	10	0
LEAF_NODE	135:35	135:35	8	)
LEAF_NODE	135:36	135:36	4	;
EXPR_STATEMENT	136:4	136:15	3	assert ( ret ) ;
EXPR	136:4	136:4	4	assert ( ret )
FUNCTION_CALL	136:4	136:14	5	assert ( ret )
CALLEE	136:4	136:4	6	assert
LEAF_NODE	136:4	136:4	7	assert
LEAF_NODE	136:10	136:10	6	(
ARGUMENT	136:11	136:11	6	ret
FIELD	136:11	136:11	7	ret
LEAF_NODE	136:11	136:11	8	ret
LEAF_NODE	136:14	136:14	6	)
LEAF_NODE	136:15	136:15	4	;
SELECTION	138:4	139:4	3	
KEYWORD	138:4	138:4	4	if
LEAF_NODE	138:4	138:4	5	if
LEAF_NODE	138:6	138:6	4	(
CONDITION	138:8	138:8	4	tiled
EXPR	138:8	138:8	5	tiled
FIELD	138:8	138:8	6	tiled
LEAF_NODE	138:8	138:8	7	tiled
LEAF_NODE	138:14	138:14	4	)
STATEMENTS	139:4	148:4	4	
LEAF_NODE	139:4	139:4	5	{
STATEMENTS	140:8	141:8	5	
SIMPLE_DECL	140:8	140:13	6	int j ;
VAR_DECL	140:8	140:12	7	int j
TYPE	140:8	140:8	8	int
TYPE_NAME	140:8	140:8	9	int
LEAF_NODE	140:8	140:8	10	int
NAME	140:12	140:12	8	j
LEAF_NODE	140:12	140:12	9	j
LEAF_NODE	140:13	140:13	7	;
ITERATION	141:8	142:8	6	
KEYWORD	141:8	141:8	7	for
LEAF_NODE	141:8	141:8	8	for
LEAF_NODE	141:11	141:11	7	(
FOR_INIT	141:13	141:18	7	j = 0 ;
EXPR	141:13	141:13	8	j = 0
ASSIGN	141:13	141:17	9	j = 0
LVAL	141:13	141:13	10	j
FIELD	141:13	141:13	11	j
LEAF_NODE	141:13	141:13	12	j
ASSIGN_OP	141:15	141:15	10	=
LEAF_NODE	141:15	141:15	11	=
RVAL	141:17	141:17	10	0
FIELD	141:17	141:17	11	0
LEAF_NODE	141:17	141:17	12	0
LEAF_NODE	141:18	141:18	8	;
CONDITION	141:20	141:20	7	j < ( height + 15 ) / 16
EXPR	141:20	141:38	8	j < ( height + 15 ) / 16
FIELD	141:20	141:20	9	j
LEAF_NODE	141:20	141:20	10	j
REL_OPERATOR	141:22	141:22	9	<
LEAF_NODE	141:22	141:22	10	<
LEAF_NODE	141:24	141:24	9	(
FIELD	141:25	141:25	9	height
LEAF_NODE	141:25	141:25	10	height
LEAF_NODE	141:31	141:31	9	+
FIELD	141:32	141:32	9	15
LEAF_NODE	141:32	141:32	10	15
LEAF_NODE	141:34	141:34	9	)
LEAF_NODE	141:36	141:36	9	/
FIELD	141:38	141:38	9	16
LEAF_NODE	141:38	141:38	10	16
LEAF_NODE	141:40	141:40	7	;
FOR_EXPR	141:42	141:42	7	j ++
EXPR	141:42	141:42	8	j ++
FIELD	141:42	141:43	9	j ++
LEAF_NODE	141:42	141:42	10	j
LEAF_NODE	141:43	141:43	10	++
LEAF_NODE	141:46	141:46	7	)
STATEMENTS	142:8	147:8	7	
LEAF_NODE	142:8	142:8	8	{
STATEMENTS	143:12	146:12	8	
SIMPLE_DECL	143:12	143:41	9	unsigned char [ 256 ] tilebuffer ;
VAR_DECL	143:12	143:26	10	unsigned char [ 256 ] tilebuffer
TYPE	143:12	143:36	11	unsigned char [ 256 ]
TYPE_NAME	143:12	143:21	12	unsigned char
LEAF_NODE	143:12	143:12	13	unsigned
LEAF_NODE	143:21	143:21	13	char
TYPE_SUFFIX	143:36	143:40	12	[ 256 ]
LEAF_NODE	143:36	143:36	13	[
FIELD	143:37	143:37	13	256
LEAF_NODE	143:37	143:37	14	256
LEAF_NODE	143:40	143:40	13	]
NAME	143:26	143:26	11	tilebuffer
LEAF_NODE	143:26	143:26	12	tilebuffer
LEAF_NODE	143:41	143:41	10	;
EXPR_STATEMENT	144:12	144:53	9	memset ( tilebuffer , ( unsigned char ) j , 256 ) ;
EXPR	144:12	144:12	10	memset ( tilebuffer , ( unsigned char ) j , 256 )
FUNCTION_CALL	144:12	144:52	11	memset ( tilebuffer , ( unsigned char ) j , 256 )
CALLEE	144:12	144:12	12	memset
LEAF_NODE	144:12	144:12	13	memset
LEAF_NODE	144:18	144:18	12	(
ARGUMENT	144:19	144:19	12	tilebuffer
FIELD	144:19	144:19	13	tilebuffer
LEAF_NODE	144:19	144:19	14	tilebuffer
LEAF_NODE	144:29	144:29	12	,
ARGUMENT	144:31	144:46	12	( unsigned char ) j
LEAF_NODE	144:31	144:31	13	(
TYPE_NAME	144:32	144:41	13	unsigned char
LEAF_NODE	144:32	144:32	14	unsigned
LEAF_NODE	144:41	144:41	14	char
LEAF_NODE	144:45	144:45	13	)
FIELD	144:46	144:46	13	j
LEAF_NODE	144:46	144:46	14	j
LEAF_NODE	144:47	144:47	12	,
ARGUMENT	144:49	144:49	12	256
FIELD	144:49	144:49	13	256
LEAF_NODE	144:49	144:49	14	256
LEAF_NODE	144:52	144:52	12	)
LEAF_NODE	144:53	144:53	10	;
EXPR_STATEMENT	145:12	145:65	9	ret = TIFFWriteEncodedTile ( tif , j , tilebuffer , 256 ) ;
EXPR	145:12	145:12	10	ret = TIFFWriteEncodedTile ( tif , j , tilebuffer , 256 )
ASSIGN	145:12	145:18	11	ret = TIFFWriteEncodedTile ( tif , j , tilebuffer , 256 )
LVAL	145:12	145:12	12	ret
FIELD	145:12	145:12	13	ret
LEAF_NODE	145:12	145:12	14	ret
ASSIGN_OP	145:16	145:16	12	=
LEAF_NODE	145:16	145:16	13	=
RVAL	145:18	145:18	12	TIFFWriteEncodedTile ( tif , j , tilebuffer , 256 )
FUNCTION_CALL	145:18	145:64	13	TIFFWriteEncodedTile ( tif , j , tilebuffer , 256 )
CALLEE	145:18	145:18	14	TIFFWriteEncodedTile
LEAF_NODE	145:18	145:18	15	TIFFWriteEncodedTile
LEAF_NODE	145:38	145:38	14	(
ARGUMENT	145:40	145:40	14	tif
FIELD	145:40	145:40	15	tif
LEAF_NODE	145:40	145:40	16	tif
LEAF_NODE	145:43	145:43	14	,
ARGUMENT	145:45	145:45	14	j
FIELD	145:45	145:45	15	j
LEAF_NODE	145:45	145:45	16	j
LEAF_NODE	145:46	145:46	14	,
ARGUMENT	145:48	145:48	14	tilebuffer
FIELD	145:48	145:48	15	tilebuffer
LEAF_NODE	145:48	145:48	16	tilebuffer
LEAF_NODE	145:58	145:58	14	,
ARGUMENT	145:60	145:60	14	256
FIELD	145:60	145:60	15	256
LEAF_NODE	145:60	145:60	16	256
LEAF_NODE	145:64	145:64	14	)
LEAF_NODE	145:65	145:65	10	;
EXPR_STATEMENT	146:12	146:30	9	assert ( ret == 256 ) ;
EXPR	146:12	146:12	10	assert ( ret == 256 )
FUNCTION_CALL	146:12	146:29	11	assert ( ret == 256 )
CALLEE	146:12	146:12	12	assert
LEAF_NODE	146:12	146:12	13	assert
LEAF_NODE	146:18	146:18	12	(
ARGUMENT	146:19	146:26	12	ret == 256
FIELD	146:19	146:19	13	ret
LEAF_NODE	146:19	146:19	14	ret
EQ_OPERATOR	146:23	146:23	13	==
LEAF_NODE	146:23	146:23	14	==
FIELD	146:26	146:26	13	256
LEAF_NODE	146:26	146:26	14	256
LEAF_NODE	146:29	146:29	12	)
LEAF_NODE	146:30	146:30	10	;
LEAF_NODE	147:8	147:8	8	}
LEAF_NODE	148:4	148:4	5	}
SELECTION	149:4	150:4	3	
KEYWORD	149:4	149:4	4	else
LEAF_NODE	149:4	149:4	5	else
STATEMENTS	150:4	160:4	4	
LEAF_NODE	150:4	150:4	5	{
STATEMENTS	151:8	151:8	5	
ITERATION	151:8	152:8	6	
KEYWORD	151:8	151:8	7	for
LEAF_NODE	151:8	151:8	8	for
LEAF_NODE	151:11	151:11	7	(
FOR_INIT	151:13	151:18	7	i = 0 ;
EXPR	151:13	151:13	8	i = 0
ASSIGN	151:13	151:17	9	i = 0
LVAL	151:13	151:13	10	i
FIELD	151:13	151:13	11	i
LEAF_NODE	151:13	151:13	12	i
ASSIGN_OP	151:15	151:15	10	=
LEAF_NODE	151:15	151:15	11	=
RVAL	151:17	151:17	10	0
FIELD	151:17	151:17	11	0
LEAF_NODE	151:17	151:17	12	0
LEAF_NODE	151:18	151:18	8	;
CONDITION	151:20	151:20	7	i < height
EXPR	151:20	151:24	8	i < height
FIELD	151:20	151:20	9	i
LEAF_NODE	151:20	151:20	10	i
REL_OPERATOR	151:22	151:22	9	<
LEAF_NODE	151:22	151:22	10	<
FIELD	151:24	151:24	9	height
LEAF_NODE	151:24	151:24	10	height
LEAF_NODE	151:30	151:30	7	;
FOR_EXPR	151:32	151:32	7	i ++
EXPR	151:32	151:32	8	i ++
FIELD	151:32	151:33	9	i ++
LEAF_NODE	151:32	151:32	10	i
LEAF_NODE	151:33	151:33	10	++
LEAF_NODE	151:36	151:36	7	)
STATEMENTS	152:8	159:8	7	
LEAF_NODE	152:8	152:8	8	{
STATEMENTS	153:12	157:12	8	
SIMPLE_DECL	153:12	153:46	9	unsigned char c ; c = ( unsigned char ) i ;
VAR_DECL	153:12	153:26	10	unsigned char c ; c = ( unsigned char ) i
TYPE	153:12	153:12	11	unsigned char
TYPE_NAME	153:12	153:21	12	unsigned char
LEAF_NODE	153:12	153:12	13	unsigned
LEAF_NODE	153:21	153:21	13	char
NAME	153:26	153:26	11	c
LEAF_NODE	153:26	153:26	12	c
LEAF_NODE	0:0	0:0	11	;
INIT	153:26	153:26	11	c = ( unsigned char ) i
ASSIGN	153:26	153:30	12	c = ( unsigned char ) i
LVAL	153:26	153:26	13	c
NAME	153:26	153:26	14	c
LEAF_NODE	153:26	153:26	15	c
ASSIGN_OP	153:28	153:28	13	=
LEAF_NODE	153:28	153:28	14	=
RVAL	153:30	153:45	13	( unsigned char ) i
LEAF_NODE	153:30	153:30	14	(
TYPE_NAME	153:31	153:40	14	unsigned char
LEAF_NODE	153:31	153:31	15	unsigned
LEAF_NODE	153:40	153:40	15	char
LEAF_NODE	153:44	153:44	14	)
FIELD	153:45	153:45	14	i
LEAF_NODE	153:45	153:45	15	i
LEAF_NODE	153:46	153:46	10	;
EXPR_STATEMENT	154:12	154:56	9	ret = TIFFWriteEncodedStrip ( tif , i , & c , 1 ) ;
EXPR	154:12	154:12	10	ret = TIFFWriteEncodedStrip ( tif , i , & c , 1 )
ASSIGN	154:12	154:18	11	ret = TIFFWriteEncodedStrip ( tif , i , & c , 1 )
LVAL	154:12	154:12	12	ret
FIELD	154:12	154:12	13	ret
LEAF_NODE	154:12	154:12	14	ret
ASSIGN_OP	154:16	154:16	12	=
LEAF_NODE	154:16	154:16	13	=
RVAL	154:18	154:18	12	TIFFWriteEncodedStrip ( tif , i , & c , 1 )
FUNCTION_CALL	154:18	154:55	13	TIFFWriteEncodedStrip ( tif , i , & c , 1 )
CALLEE	154:18	154:18	14	TIFFWriteEncodedStrip
LEAF_NODE	154:18	154:18	15	TIFFWriteEncodedStrip
LEAF_NODE	154:39	154:39	14	(
ARGUMENT	154:41	154:41	14	tif
FIELD	154:41	154:41	15	tif
LEAF_NODE	154:41	154:41	16	tif
LEAF_NODE	154:44	154:44	14	,
ARGUMENT	154:46	154:46	14	i
FIELD	154:46	154:46	15	i
LEAF_NODE	154:46	154:46	16	i
LEAF_NODE	154:47	154:47	14	,
ARGUMENT	154:49	154:49	14	& c
UNARY_EXPR	154:49	154:50	15	& c
UNARY_OPERATOR	154:49	154:49	16	&
LEAF_NODE	154:49	154:49	17	&
FIELD	154:50	154:50	16	c
LEAF_NODE	154:50	154:50	17	c
LEAF_NODE	154:51	154:51	14	,
ARGUMENT	154:53	154:53	14	1
FIELD	154:53	154:53	15	1
LEAF_NODE	154:53	154:53	16	1
LEAF_NODE	154:55	154:55	14	)
LEAF_NODE	154:56	154:56	10	;
EXPR_STATEMENT	155:12	155:28	9	assert ( ret == 1 ) ;
EXPR	155:12	155:12	10	assert ( ret == 1 )
FUNCTION_CALL	155:12	155:27	11	assert ( ret == 1 )
CALLEE	155:12	155:12	12	assert
LEAF_NODE	155:12	155:12	13	assert
LEAF_NODE	155:18	155:18	12	(
ARGUMENT	155:19	155:26	12	ret == 1
FIELD	155:19	155:19	13	ret
LEAF_NODE	155:19	155:19	14	ret
EQ_OPERATOR	155:23	155:23	13	==
LEAF_NODE	155:23	155:23	14	==
FIELD	155:26	155:26	13	1
LEAF_NODE	155:26	155:26	14	1
LEAF_NODE	155:27	155:27	12	)
LEAF_NODE	155:28	155:28	10	;
SELECTION	157:12	158:16	9	
KEYWORD	157:12	157:12	10	if
LEAF_NODE	157:12	157:12	11	if
LEAF_NODE	157:14	157:14	10	(
CONDITION	157:16	157:16	10	i == 1 && height > 100000
EXPR	157:16	157:16	11	i == 1 && height > 100000
AND	157:16	157:26	12	i == 1 && height > 100000
EXPR	157:16	157:21	13	i == 1
FIELD	157:16	157:16	14	i
LEAF_NODE	157:16	157:16	15	i
EQ_OPERATOR	157:18	157:18	14	==
LEAF_NODE	157:18	157:18	15	==
FIELD	157:21	157:21	14	1
LEAF_NODE	157:21	157:21	15	1
LEAF_NODE	157:23	157:23	13	&&
EXPR	157:26	157:35	13	height > 100000
FIELD	157:26	157:26	14	height
LEAF_NODE	157:26	157:26	15	height
REL_OPERATOR	157:33	157:33	14	>
LEAF_NODE	157:33	157:33	15	>
FIELD	157:35	157:35	14	100000
LEAF_NODE	157:35	157:35	15	100000
LEAF_NODE	157:42	157:42	10	)
STATEMENTS	158:16	158:16	10	
EXPR_STATEMENT	158:16	158:31	11	i = height - 2 ;
EXPR	158:16	158:16	12	i = height - 2
ASSIGN	158:16	158:20	13	i = height - 2
LVAL	158:16	158:16	14	i
FIELD	158:16	158:16	15	i
LEAF_NODE	158:16	158:16	16	i
ASSIGN_OP	158:18	158:18	14	=
LEAF_NODE	158:18	158:18	15	=
RVAL	158:20	158:30	14	height - 2
FIELD	158:20	158:20	15	height
LEAF_NODE	158:20	158:20	16	height
LEAF_NODE	158:27	158:27	15	-
FIELD	158:30	158:30	15	2
LEAF_NODE	158:30	158:30	16	2
LEAF_NODE	158:31	158:31	12	;
LEAF_NODE	159:8	159:8	8	}
LEAF_NODE	160:4	160:4	5	}
EXPR_STATEMENT	162:4	162:18	3	TIFFClose ( tif ) ;
EXPR	162:4	162:4	4	TIFFClose ( tif )
FUNCTION_CALL	162:4	162:17	5	TIFFClose ( tif )
CALLEE	162:4	162:4	6	TIFFClose
LEAF_NODE	162:4	162:4	7	TIFFClose
LEAF_NODE	162:13	162:13	6	(
ARGUMENT	162:14	162:14	6	tif
FIELD	162:14	162:14	7	tif
LEAF_NODE	162:14	162:14	8	tif
LEAF_NODE	162:17	162:17	6	)
LEAF_NODE	162:18	162:18	4	;
EXPR_STATEMENT	164:4	164:33	3	tif = TIFFOpen ( filename , "r" ) ;
EXPR	164:4	164:4	4	tif = TIFFOpen ( filename , "r" )
ASSIGN	164:4	164:10	5	tif = TIFFOpen ( filename , "r" )
LVAL	164:4	164:4	6	tif
FIELD	164:4	164:4	7	tif
LEAF_NODE	164:4	164:4	8	tif
ASSIGN_OP	164:8	164:8	6	=
LEAF_NODE	164:8	164:8	7	=
RVAL	164:10	164:10	6	TIFFOpen ( filename , "r" )
FUNCTION_CALL	164:10	164:32	7	TIFFOpen ( filename , "r" )
CALLEE	164:10	164:10	8	TIFFOpen
LEAF_NODE	164:10	164:10	9	TIFFOpen
LEAF_NODE	164:18	164:18	8	(
ARGUMENT	164:19	164:19	8	filename
FIELD	164:19	164:19	9	filename
LEAF_NODE	164:19	164:19	10	filename
LEAF_NODE	164:27	164:27	8	,
ARGUMENT	164:29	164:29	8	"r"
FIELD	164:29	164:29	9	"r"
LEAF_NODE	164:29	164:29	10	"r"
LEAF_NODE	164:32	164:32	8	)
LEAF_NODE	164:33	164:33	4	;
SELECTION	165:4	166:4	3	
KEYWORD	165:4	165:4	4	if
LEAF_NODE	165:4	165:4	5	if
LEAF_NODE	165:6	165:6	4	(
CONDITION	165:7	165:7	4	! tif
EXPR	165:7	165:7	5	! tif
UNARY_EXPR	165:7	165:8	6	! tif
UNARY_OPERATOR	165:7	165:7	7	!
LEAF_NODE	165:7	165:7	8	!
FIELD	165:8	165:8	7	tif
LEAF_NODE	165:8	165:8	8	tif
LEAF_NODE	165:11	165:11	4	)
STATEMENTS	166:4	169:4	4	
LEAF_NODE	166:4	166:4	5	{
STATEMENTS	167:8	168:8	5	
EXPR_STATEMENT	167:8	167:53	6	fprintf ( stderr , "cannot open %s\n" , filename ) ;
EXPR	167:8	167:8	7	fprintf ( stderr , "cannot open %s\n" , filename )
FUNCTION_CALL	167:8	167:52	8	fprintf ( stderr , "cannot open %s\n" , filename )
CALLEE	167:8	167:8	9	fprintf
LEAF_NODE	167:8	167:8	10	fprintf
LEAF_NODE	167:15	167:15	9	(
ARGUMENT	167:16	167:16	9	stderr
FIELD	167:16	167:16	10	stderr
LEAF_NODE	167:16	167:16	11	stderr
LEAF_NODE	167:22	167:22	9	,
ARGUMENT	167:24	167:24	9	"cannot open %s\n"
FIELD	167:24	167:24	10	"cannot open %s\n"
LEAF_NODE	167:24	167:24	11	"cannot open %s\n"
LEAF_NODE	167:42	167:42	9	,
ARGUMENT	167:44	167:44	9	filename
FIELD	167:44	167:44	10	filename
LEAF_NODE	167:44	167:44	11	filename
LEAF_NODE	167:52	167:52	9	)
LEAF_NODE	167:53	167:53	7	;
JUMP_STATEMENT	168:8	168:16	6	return 1 ;
KEYWORD	168:8	168:8	7	return
LEAF_NODE	168:8	168:8	8	return
DESTINATION	168:15	168:15	7	1
EXPR	168:15	168:15	8	1
FIELD	168:15	168:15	9	1
LEAF_NODE	168:15	168:15	10	1
LEAF_NODE	168:16	168:16	7	;
LEAF_NODE	169:4	169:4	5	}
SELECTION	170:4	171:4	3	
KEYWORD	170:4	170:4	4	if
LEAF_NODE	170:4	170:4	5	if
LEAF_NODE	170:6	170:6	4	(
CONDITION	170:8	170:8	4	tiled
EXPR	170:8	170:8	5	tiled
FIELD	170:8	170:8	6	tiled
LEAF_NODE	170:8	170:8	7	tiled
LEAF_NODE	170:14	170:14	4	)
STATEMENTS	171:4	193:4	4	
LEAF_NODE	171:4	171:4	5	{
STATEMENTS	172:8	173:8	5	
SIMPLE_DECL	172:8	172:13	6	int j ;
VAR_DECL	172:8	172:12	7	int j
TYPE	172:8	172:8	8	int
TYPE_NAME	172:8	172:8	9	int
LEAF_NODE	172:8	172:8	10	int
NAME	172:12	172:12	8	j
LEAF_NODE	172:12	172:12	9	j
LEAF_NODE	172:13	172:13	7	;
ITERATION	173:8	174:8	6	
KEYWORD	173:8	173:8	7	for
LEAF_NODE	173:8	173:8	8	for
LEAF_NODE	173:11	173:11	7	(
FOR_INIT	173:13	173:18	7	j = 0 ;
EXPR	173:13	173:13	8	j = 0
ASSIGN	173:13	173:17	9	j = 0
LVAL	173:13	173:13	10	j
FIELD	173:13	173:13	11	j
LEAF_NODE	173:13	173:13	12	j
ASSIGN_OP	173:15	173:15	10	=
LEAF_NODE	173:15	173:15	11	=
RVAL	173:17	173:17	10	0
FIELD	173:17	173:17	11	0
LEAF_NODE	173:17	173:17	12	0
LEAF_NODE	173:18	173:18	8	;
CONDITION	173:20	173:20	7	j < ( height + 15 ) / 16
EXPR	173:20	173:38	8	j < ( height + 15 ) / 16
FIELD	173:20	173:20	9	j
LEAF_NODE	173:20	173:20	10	j
REL_OPERATOR	173:22	173:22	9	<
LEAF_NODE	173:22	173:22	10	<
LEAF_NODE	173:24	173:24	9	(
FIELD	173:25	173:25	9	height
LEAF_NODE	173:25	173:25	10	height
LEAF_NODE	173:31	173:31	9	+
FIELD	173:32	173:32	9	15
LEAF_NODE	173:32	173:32	10	15
LEAF_NODE	173:34	173:34	9	)
LEAF_NODE	173:36	173:36	9	/
FIELD	173:38	173:38	9	16
LEAF_NODE	173:38	173:38	10	16
LEAF_NODE	173:40	173:40	7	;
FOR_EXPR	173:42	173:42	7	j ++
EXPR	173:42	173:42	8	j ++
FIELD	173:42	173:43	9	j ++
LEAF_NODE	173:42	173:42	10	j
LEAF_NODE	173:43	173:43	10	++
LEAF_NODE	173:46	173:46	7	)
STATEMENTS	174:8	192:8	7	
LEAF_NODE	174:8	174:8	8	{
STATEMENTS	175:12	176:12	8	
SIMPLE_DECL	175:12	175:21	9	int retry ;
VAR_DECL	175:12	175:16	10	int retry
TYPE	175:12	175:12	11	int
TYPE_NAME	175:12	175:12	12	int
LEAF_NODE	175:12	175:12	13	int
NAME	175:16	175:16	11	retry
LEAF_NODE	175:16	175:16	12	retry
LEAF_NODE	175:21	175:21	10	;
ITERATION	176:12	177:12	9	
KEYWORD	176:12	176:12	10	for
LEAF_NODE	176:12	176:12	11	for
LEAF_NODE	176:15	176:15	10	(
FOR_INIT	176:17	176:26	10	retry = 0 ;
EXPR	176:17	176:17	11	retry = 0
ASSIGN	176:17	176:25	12	retry = 0
LVAL	176:17	176:17	13	retry
FIELD	176:17	176:17	14	retry
LEAF_NODE	176:17	176:17	15	retry
ASSIGN_OP	176:23	176:23	13	=
LEAF_NODE	176:23	176:23	14	=
RVAL	176:25	176:25	13	0
FIELD	176:25	176:25	14	0
LEAF_NODE	176:25	176:25	15	0
LEAF_NODE	176:26	176:26	11	;
CONDITION	176:28	176:28	10	retry < 2
EXPR	176:28	176:36	11	retry < 2
FIELD	176:28	176:28	12	retry
LEAF_NODE	176:28	176:28	13	retry
REL_OPERATOR	176:34	176:34	12	<
LEAF_NODE	176:34	176:34	13	<
FIELD	176:36	176:36	12	2
LEAF_NODE	176:36	176:36	13	2
LEAF_NODE	176:37	176:37	10	;
FOR_EXPR	176:39	176:39	10	retry ++
EXPR	176:39	176:39	11	retry ++
FIELD	176:39	176:44	12	retry ++
LEAF_NODE	176:39	176:39	13	retry
LEAF_NODE	176:44	176:44	13	++
LEAF_NODE	176:47	176:47	10	)
STATEMENTS	177:12	191:12	10	
LEAF_NODE	177:12	177:12	11	{
STATEMENTS	178:16	183:16	11	
SIMPLE_DECL	178:16	178:45	12	unsigned char [ 256 ] tilebuffer ;
VAR_DECL	178:16	178:30	13	unsigned char [ 256 ] tilebuffer
TYPE	178:16	178:40	14	unsigned char [ 256 ]
TYPE_NAME	178:16	178:25	15	unsigned char
LEAF_NODE	178:16	178:16	16	unsigned
LEAF_NODE	178:25	178:25	16	char
TYPE_SUFFIX	178:40	178:44	15	[ 256 ]
LEAF_NODE	178:40	178:40	16	[
FIELD	178:41	178:41	16	256
LEAF_NODE	178:41	178:41	17	256
LEAF_NODE	178:44	178:44	16	]
NAME	178:30	178:30	14	tilebuffer
LEAF_NODE	178:30	178:30	15	tilebuffer
LEAF_NODE	178:45	178:45	13	;
SIMPLE_DECL	179:16	179:59	12	unsigned char expected_c ; expected_c = ( unsigned char ) j ;
VAR_DECL	179:16	179:30	13	unsigned char expected_c ; expected_c = ( unsigned char ) j
TYPE	179:16	179:16	14	unsigned char
TYPE_NAME	179:16	179:25	15	unsigned char
LEAF_NODE	179:16	179:16	16	unsigned
LEAF_NODE	179:25	179:25	16	char
NAME	179:30	179:30	14	expected_c
LEAF_NODE	179:30	179:30	15	expected_c
LEAF_NODE	0:0	0:0	14	;
INIT	179:30	179:30	14	expected_c = ( unsigned char ) j
ASSIGN	179:30	179:43	15	expected_c = ( unsigned char ) j
LVAL	179:30	179:30	16	expected_c
NAME	179:30	179:30	17	expected_c
LEAF_NODE	179:30	179:30	18	expected_c
ASSIGN_OP	179:41	179:41	16	=
LEAF_NODE	179:41	179:41	17	=
RVAL	179:43	179:58	16	( unsigned char ) j
LEAF_NODE	179:43	179:43	17	(
TYPE_NAME	179:44	179:53	17	unsigned char
LEAF_NODE	179:44	179:44	18	unsigned
LEAF_NODE	179:53	179:53	18	char
LEAF_NODE	179:57	179:57	17	)
FIELD	179:58	179:58	17	j
LEAF_NODE	179:58	179:58	18	j
LEAF_NODE	179:59	179:59	13	;
EXPR_STATEMENT	180:16	180:41	12	memset ( tilebuffer , 0 , 256 ) ;
EXPR	180:16	180:16	13	memset ( tilebuffer , 0 , 256 )
FUNCTION_CALL	180:16	180:40	14	memset ( tilebuffer , 0 , 256 )
CALLEE	180:16	180:16	15	memset
LEAF_NODE	180:16	180:16	16	memset
LEAF_NODE	180:22	180:22	15	(
ARGUMENT	180:23	180:23	15	tilebuffer
FIELD	180:23	180:23	16	tilebuffer
LEAF_NODE	180:23	180:23	17	tilebuffer
LEAF_NODE	180:33	180:33	15	,
ARGUMENT	180:34	180:34	15	0
FIELD	180:34	180:34	16	0
LEAF_NODE	180:34	180:34	17	0
LEAF_NODE	180:35	180:35	15	,
ARGUMENT	180:37	180:37	15	256
FIELD	180:37	180:37	16	256
LEAF_NODE	180:37	180:37	17	256
LEAF_NODE	180:40	180:40	15	)
LEAF_NODE	180:41	180:41	13	;
EXPR_STATEMENT	181:16	181:68	12	ret = TIFFReadEncodedTile ( tif , j , tilebuffer , 256 ) ;
EXPR	181:16	181:16	13	ret = TIFFReadEncodedTile ( tif , j , tilebuffer , 256 )
ASSIGN	181:16	181:22	14	ret = TIFFReadEncodedTile ( tif , j , tilebuffer , 256 )
LVAL	181:16	181:16	15	ret
FIELD	181:16	181:16	16	ret
LEAF_NODE	181:16	181:16	17	ret
ASSIGN_OP	181:20	181:20	15	=
LEAF_NODE	181:20	181:20	16	=
RVAL	181:22	181:22	15	TIFFReadEncodedTile ( tif , j , tilebuffer , 256 )
FUNCTION_CALL	181:22	181:67	16	TIFFReadEncodedTile ( tif , j , tilebuffer , 256 )
CALLEE	181:22	181:22	17	TIFFReadEncodedTile
LEAF_NODE	181:22	181:22	18	TIFFReadEncodedTile
LEAF_NODE	181:41	181:41	17	(
ARGUMENT	181:43	181:43	17	tif
FIELD	181:43	181:43	18	tif
LEAF_NODE	181:43	181:43	19	tif
LEAF_NODE	181:46	181:46	17	,
ARGUMENT	181:48	181:48	17	j
FIELD	181:48	181:48	18	j
LEAF_NODE	181:48	181:48	19	j
LEAF_NODE	181:49	181:49	17	,
ARGUMENT	181:51	181:51	17	tilebuffer
FIELD	181:51	181:51	18	tilebuffer
LEAF_NODE	181:51	181:51	19	tilebuffer
LEAF_NODE	181:61	181:61	17	,
ARGUMENT	181:63	181:63	17	256
FIELD	181:63	181:63	18	256
LEAF_NODE	181:63	181:63	19	256
LEAF_NODE	181:67	181:67	17	)
LEAF_NODE	181:68	181:68	13	;
EXPR_STATEMENT	182:16	182:34	12	assert ( ret == 256 ) ;
EXPR	182:16	182:16	13	assert ( ret == 256 )
FUNCTION_CALL	182:16	182:33	14	assert ( ret == 256 )
CALLEE	182:16	182:16	15	assert
LEAF_NODE	182:16	182:16	16	assert
LEAF_NODE	182:22	182:22	15	(
ARGUMENT	182:23	182:30	15	ret == 256
FIELD	182:23	182:23	16	ret
LEAF_NODE	182:23	182:23	17	ret
EQ_OPERATOR	182:27	182:27	16	==
LEAF_NODE	182:27	182:27	17	==
FIELD	182:30	182:30	16	256
LEAF_NODE	182:30	182:30	17	256
LEAF_NODE	182:33	182:33	15	)
LEAF_NODE	182:34	182:34	13	;
SELECTION	183:16	185:16	12	
KEYWORD	183:16	183:16	13	if
LEAF_NODE	183:16	183:16	14	if
LEAF_NODE	183:18	183:18	13	(
CONDITION	183:20	183:20	13	tilebuffer [ 0 ] != expected_c || tilebuffer [ 255 ] != expected_c
EXPR	183:20	183:20	14	tilebuffer [ 0 ] != expected_c || tilebuffer [ 255 ] != expected_c
OR	183:20	184:20	15	tilebuffer [ 0 ] != expected_c || tilebuffer [ 255 ] != expected_c
EXPR	183:20	183:37	16	tilebuffer [ 0 ] != expected_c
FIELD	183:20	183:32	17	tilebuffer [ 0 ]
LEAF_NODE	183:20	183:20	18	tilebuffer
LEAF_NODE	183:30	183:30	18	[
EXPR	183:31	183:31	18	0
FIELD	183:31	183:31	19	0
LEAF_NODE	183:31	183:31	20	0
LEAF_NODE	183:32	183:32	18	]
EQ_OPERATOR	183:34	183:34	17	!=
LEAF_NODE	183:34	183:34	18	!=
FIELD	183:37	183:37	17	expected_c
LEAF_NODE	183:37	183:37	18	expected_c
LEAF_NODE	183:48	183:48	16	||
EXPR	184:20	184:39	16	tilebuffer [ 255 ] != expected_c
FIELD	184:20	184:34	17	tilebuffer [ 255 ]
LEAF_NODE	184:20	184:20	18	tilebuffer
LEAF_NODE	184:30	184:30	18	[
EXPR	184:31	184:31	18	255
FIELD	184:31	184:31	19	255
LEAF_NODE	184:31	184:31	20	255
LEAF_NODE	184:34	184:34	18	]
EQ_OPERATOR	184:36	184:36	17	!=
LEAF_NODE	184:36	184:36	18	!=
FIELD	184:39	184:39	17	expected_c
LEAF_NODE	184:39	184:39	18	expected_c
LEAF_NODE	184:50	184:50	13	)
STATEMENTS	185:16	190:16	13	
LEAF_NODE	185:16	185:16	14	{
STATEMENTS	186:20	189:20	14	
EXPR_STATEMENT	186:20	187:62	15	fprintf ( stderr , "unexpected value at tile %d: %d %d\n" , j , tilebuffer [ 0 ] , tilebuffer [ 255 ] ) ;
EXPR	186:20	186:20	16	fprintf ( stderr , "unexpected value at tile %d: %d %d\n" , j , tilebuffer [ 0 ] , tilebuffer [ 255 ] )
FUNCTION_CALL	186:20	187:61	17	fprintf ( stderr , "unexpected value at tile %d: %d %d\n" , j , tilebuffer [ 0 ] , tilebuffer [ 255 ] )
CALLEE	186:20	186:20	18	fprintf
LEAF_NODE	186:20	186:20	19	fprintf
LEAF_NODE	186:27	186:27	18	(
ARGUMENT	186:28	186:28	18	stderr
FIELD	186:28	186:28	19	stderr
LEAF_NODE	186:28	186:28	20	stderr
LEAF_NODE	186:34	186:34	18	,
ARGUMENT	186:36	186:36	18	"unexpected value at tile %d: %d %d\n"
FIELD	186:36	186:36	19	"unexpected value at tile %d: %d %d\n"
LEAF_NODE	186:36	186:36	20	"unexpected value at tile %d: %d %d\n"
LEAF_NODE	186:74	186:74	18	,
ARGUMENT	187:28	187:28	18	j
FIELD	187:28	187:28	19	j
LEAF_NODE	187:28	187:28	20	j
LEAF_NODE	187:29	187:29	18	,
ARGUMENT	187:31	187:31	18	tilebuffer [ 0 ]
FIELD	187:31	187:43	19	tilebuffer [ 0 ]
LEAF_NODE	187:31	187:31	20	tilebuffer
LEAF_NODE	187:41	187:41	20	[
EXPR	187:42	187:42	20	0
FIELD	187:42	187:42	21	0
LEAF_NODE	187:42	187:42	22	0
LEAF_NODE	187:43	187:43	20	]
LEAF_NODE	187:44	187:44	18	,
ARGUMENT	187:46	187:46	18	tilebuffer [ 255 ]
FIELD	187:46	187:60	19	tilebuffer [ 255 ]
LEAF_NODE	187:46	187:46	20	tilebuffer
LEAF_NODE	187:56	187:56	20	[
EXPR	187:57	187:57	20	255
FIELD	187:57	187:57	21	255
LEAF_NODE	187:57	187:57	22	255
LEAF_NODE	187:60	187:60	20	]
LEAF_NODE	187:61	187:61	18	)
LEAF_NODE	187:62	187:62	16	;
EXPR_STATEMENT	188:20	188:34	15	TIFFClose ( tif ) ;
EXPR	188:20	188:20	16	TIFFClose ( tif )
FUNCTION_CALL	188:20	188:33	17	TIFFClose ( tif )
CALLEE	188:20	188:20	18	TIFFClose
LEAF_NODE	188:20	188:20	19	TIFFClose
LEAF_NODE	188:29	188:29	18	(
ARGUMENT	188:30	188:30	18	tif
FIELD	188:30	188:30	19	tif
LEAF_NODE	188:30	188:30	20	tif
LEAF_NODE	188:33	188:33	18	)
LEAF_NODE	188:34	188:34	16	;
JUMP_STATEMENT	189:20	189:28	15	return 1 ;
KEYWORD	189:20	189:20	16	return
LEAF_NODE	189:20	189:20	17	return
DESTINATION	189:27	189:27	16	1
EXPR	189:27	189:27	17	1
FIELD	189:27	189:27	18	1
LEAF_NODE	189:27	189:27	19	1
LEAF_NODE	189:28	189:28	16	;
LEAF_NODE	190:16	190:16	14	}
LEAF_NODE	191:12	191:12	11	}
LEAF_NODE	192:8	192:8	8	}
LEAF_NODE	193:4	193:4	5	}
SELECTION	194:4	195:4	3	
KEYWORD	194:4	194:4	4	else
LEAF_NODE	194:4	194:4	5	else
STATEMENTS	195:4	215:4	4	
LEAF_NODE	195:4	195:4	5	{
STATEMENTS	196:8	197:8	5	
SIMPLE_DECL	196:8	196:13	6	int j ;
VAR_DECL	196:8	196:12	7	int j
TYPE	196:8	196:8	8	int
TYPE_NAME	196:8	196:8	9	int
LEAF_NODE	196:8	196:8	10	int
NAME	196:12	196:12	8	j
LEAF_NODE	196:12	196:12	9	j
LEAF_NODE	196:13	196:13	7	;
ITERATION	197:8	198:8	6	
KEYWORD	197:8	197:8	7	for
LEAF_NODE	197:8	197:8	8	for
LEAF_NODE	197:11	197:11	7	(
FOR_INIT	197:13	197:18	7	j = 0 ;
EXPR	197:13	197:13	8	j = 0
ASSIGN	197:13	197:17	9	j = 0
LVAL	197:13	197:13	10	j
FIELD	197:13	197:13	11	j
LEAF_NODE	197:13	197:13	12	j
ASSIGN_OP	197:15	197:15	10	=
LEAF_NODE	197:15	197:15	11	=
RVAL	197:17	197:17	10	0
FIELD	197:17	197:17	11	0
LEAF_NODE	197:17	197:17	12	0
LEAF_NODE	197:18	197:18	8	;
CONDITION	197:20	197:20	7	j < height
EXPR	197:20	197:24	8	j < height
FIELD	197:20	197:20	9	j
LEAF_NODE	197:20	197:20	10	j
REL_OPERATOR	197:22	197:22	9	<
LEAF_NODE	197:22	197:22	10	<
FIELD	197:24	197:24	9	height
LEAF_NODE	197:24	197:24	10	height
LEAF_NODE	197:30	197:30	7	;
FOR_EXPR	197:32	197:32	7	j ++
EXPR	197:32	197:32	8	j ++
FIELD	197:32	197:33	9	j ++
LEAF_NODE	197:32	197:32	10	j
LEAF_NODE	197:33	197:33	10	++
LEAF_NODE	197:36	197:36	7	)
STATEMENTS	198:8	214:8	7	
LEAF_NODE	198:8	198:8	8	{
STATEMENTS	199:12	200:12	8	
SIMPLE_DECL	199:12	199:21	9	int retry ;
VAR_DECL	199:12	199:16	10	int retry
TYPE	199:12	199:12	11	int
TYPE_NAME	199:12	199:12	12	int
LEAF_NODE	199:12	199:12	13	int
NAME	199:16	199:16	11	retry
LEAF_NODE	199:16	199:16	12	retry
LEAF_NODE	199:21	199:21	10	;
ITERATION	200:12	201:12	9	
KEYWORD	200:12	200:12	10	for
LEAF_NODE	200:12	200:12	11	for
LEAF_NODE	200:15	200:15	10	(
FOR_INIT	200:17	200:26	10	retry = 0 ;
EXPR	200:17	200:17	11	retry = 0
ASSIGN	200:17	200:25	12	retry = 0
LVAL	200:17	200:17	13	retry
FIELD	200:17	200:17	14	retry
LEAF_NODE	200:17	200:17	15	retry
ASSIGN_OP	200:23	200:23	13	=
LEAF_NODE	200:23	200:23	14	=
RVAL	200:25	200:25	13	0
FIELD	200:25	200:25	14	0
LEAF_NODE	200:25	200:25	15	0
LEAF_NODE	200:26	200:26	11	;
CONDITION	200:28	200:28	10	retry < 2
EXPR	200:28	200:36	11	retry < 2
FIELD	200:28	200:28	12	retry
LEAF_NODE	200:28	200:28	13	retry
REL_OPERATOR	200:34	200:34	12	<
LEAF_NODE	200:34	200:34	13	<
FIELD	200:36	200:36	12	2
LEAF_NODE	200:36	200:36	13	2
LEAF_NODE	200:37	200:37	10	;
FOR_EXPR	200:39	200:39	10	retry ++
EXPR	200:39	200:39	11	retry ++
FIELD	200:39	200:44	12	retry ++
LEAF_NODE	200:39	200:39	13	retry
LEAF_NODE	200:44	200:44	13	++
LEAF_NODE	200:47	200:47	10	)
STATEMENTS	201:12	213:12	10	
LEAF_NODE	201:12	201:12	11	{
STATEMENTS	202:16	206:16	11	
SIMPLE_DECL	202:16	202:35	12	unsigned char c ; c = 0 ;
VAR_DECL	202:16	202:30	13	unsigned char c ; c = 0
TYPE	202:16	202:16	14	unsigned char
TYPE_NAME	202:16	202:25	15	unsigned char
LEAF_NODE	202:16	202:16	16	unsigned
LEAF_NODE	202:25	202:25	16	char
NAME	202:30	202:30	14	c
LEAF_NODE	202:30	202:30	15	c
LEAF_NODE	0:0	0:0	14	;
INIT	202:30	202:30	14	c = 0
ASSIGN	202:30	202:34	15	c = 0
LVAL	202:30	202:30	16	c
NAME	202:30	202:30	17	c
LEAF_NODE	202:30	202:30	18	c
ASSIGN_OP	202:32	202:32	16	=
LEAF_NODE	202:32	202:32	17	=
RVAL	202:34	202:34	16	0
FIELD	202:34	202:34	17	0
LEAF_NODE	202:34	202:34	18	0
LEAF_NODE	202:35	202:35	13	;
SIMPLE_DECL	203:16	203:59	12	unsigned char expected_c ; expected_c = ( unsigned char ) j ;
VAR_DECL	203:16	203:30	13	unsigned char expected_c ; expected_c = ( unsigned char ) j
TYPE	203:16	203:16	14	unsigned char
TYPE_NAME	203:16	203:25	15	unsigned char
LEAF_NODE	203:16	203:16	16	unsigned
LEAF_NODE	203:25	203:25	16	char
NAME	203:30	203:30	14	expected_c
LEAF_NODE	203:30	203:30	15	expected_c
LEAF_NODE	0:0	0:0	14	;
INIT	203:30	203:30	14	expected_c = ( unsigned char ) j
ASSIGN	203:30	203:43	15	expected_c = ( unsigned char ) j
LVAL	203:30	203:30	16	expected_c
NAME	203:30	203:30	17	expected_c
LEAF_NODE	203:30	203:30	18	expected_c
ASSIGN_OP	203:41	203:41	16	=
LEAF_NODE	203:41	203:41	17	=
RVAL	203:43	203:58	16	( unsigned char ) j
LEAF_NODE	203:43	203:43	17	(
TYPE_NAME	203:44	203:53	17	unsigned char
LEAF_NODE	203:44	203:44	18	unsigned
LEAF_NODE	203:53	203:53	18	char
LEAF_NODE	203:57	203:57	17	)
FIELD	203:58	203:58	17	j
LEAF_NODE	203:58	203:58	18	j
LEAF_NODE	203:59	203:59	13	;
EXPR_STATEMENT	204:16	204:59	12	ret = TIFFReadEncodedStrip ( tif , j , & c , 1 ) ;
EXPR	204:16	204:16	13	ret = TIFFReadEncodedStrip ( tif , j , & c , 1 )
ASSIGN	204:16	204:22	14	ret = TIFFReadEncodedStrip ( tif , j , & c , 1 )
LVAL	204:16	204:16	15	ret
FIELD	204:16	204:16	16	ret
LEAF_NODE	204:16	204:16	17	ret
ASSIGN_OP	204:20	204:20	15	=
LEAF_NODE	204:20	204:20	16	=
RVAL	204:22	204:22	15	TIFFReadEncodedStrip ( tif , j , & c , 1 )
FUNCTION_CALL	204:22	204:58	16	TIFFReadEncodedStrip ( tif , j , & c , 1 )
CALLEE	204:22	204:22	17	TIFFReadEncodedStrip
LEAF_NODE	204:22	204:22	18	TIFFReadEncodedStrip
LEAF_NODE	204:42	204:42	17	(
ARGUMENT	204:44	204:44	17	tif
FIELD	204:44	204:44	18	tif
LEAF_NODE	204:44	204:44	19	tif
LEAF_NODE	204:47	204:47	17	,
ARGUMENT	204:49	204:49	17	j
FIELD	204:49	204:49	18	j
LEAF_NODE	204:49	204:49	19	j
LEAF_NODE	204:50	204:50	17	,
ARGUMENT	204:52	204:52	17	& c
UNARY_EXPR	204:52	204:53	18	& c
UNARY_OPERATOR	204:52	204:52	19	&
LEAF_NODE	204:52	204:52	20	&
FIELD	204:53	204:53	19	c
LEAF_NODE	204:53	204:53	20	c
LEAF_NODE	204:54	204:54	17	,
ARGUMENT	204:56	204:56	17	1
FIELD	204:56	204:56	18	1
LEAF_NODE	204:56	204:56	19	1
LEAF_NODE	204:58	204:58	17	)
LEAF_NODE	204:59	204:59	13	;
EXPR_STATEMENT	205:16	205:32	12	assert ( ret == 1 ) ;
EXPR	205:16	205:16	13	assert ( ret == 1 )
FUNCTION_CALL	205:16	205:31	14	assert ( ret == 1 )
CALLEE	205:16	205:16	15	assert
LEAF_NODE	205:16	205:16	16	assert
LEAF_NODE	205:22	205:22	15	(
ARGUMENT	205:23	205:30	15	ret == 1
FIELD	205:23	205:23	16	ret
LEAF_NODE	205:23	205:23	17	ret
EQ_OPERATOR	205:27	205:27	16	==
LEAF_NODE	205:27	205:27	17	==
FIELD	205:30	205:30	16	1
LEAF_NODE	205:30	205:30	17	1
LEAF_NODE	205:31	205:31	15	)
LEAF_NODE	205:32	205:32	13	;
SELECTION	206:16	207:16	12	
KEYWORD	206:16	206:16	13	if
LEAF_NODE	206:16	206:16	14	if
LEAF_NODE	206:18	206:18	13	(
CONDITION	206:20	206:20	13	c != expected_c
EXPR	206:20	206:25	14	c != expected_c
FIELD	206:20	206:20	15	c
LEAF_NODE	206:20	206:20	16	c
EQ_OPERATOR	206:22	206:22	15	!=
LEAF_NODE	206:22	206:22	16	!=
FIELD	206:25	206:25	15	expected_c
LEAF_NODE	206:25	206:25	16	expected_c
LEAF_NODE	206:36	206:36	13	)
STATEMENTS	207:16	212:16	13	
LEAF_NODE	207:16	207:16	14	{
STATEMENTS	208:20	211:20	14	
EXPR_STATEMENT	208:20	209:33	15	fprintf ( stderr , "unexpected value at line %d: %d\n" , j , c ) ;
EXPR	208:20	208:20	16	fprintf ( stderr , "unexpected value at line %d: %d\n" , j , c )
FUNCTION_CALL	208:20	209:32	17	fprintf ( stderr , "unexpected value at line %d: %d\n" , j , c )
CALLEE	208:20	208:20	18	fprintf
LEAF_NODE	208:20	208:20	19	fprintf
LEAF_NODE	208:27	208:27	18	(
ARGUMENT	208:28	208:28	18	stderr
FIELD	208:28	208:28	19	stderr
LEAF_NODE	208:28	208:28	20	stderr
LEAF_NODE	208:34	208:34	18	,
ARGUMENT	208:36	208:36	18	"unexpected value at line %d: %d\n"
FIELD	208:36	208:36	19	"unexpected value at line %d: %d\n"
LEAF_NODE	208:36	208:36	20	"unexpected value at line %d: %d\n"
LEAF_NODE	208:71	208:71	18	,
ARGUMENT	209:28	209:28	18	j
FIELD	209:28	209:28	19	j
LEAF_NODE	209:28	209:28	20	j
LEAF_NODE	209:29	209:29	18	,
ARGUMENT	209:31	209:31	18	c
FIELD	209:31	209:31	19	c
LEAF_NODE	209:31	209:31	20	c
LEAF_NODE	209:32	209:32	18	)
LEAF_NODE	209:33	209:33	16	;
EXPR_STATEMENT	210:20	210:34	15	TIFFClose ( tif ) ;
EXPR	210:20	210:20	16	TIFFClose ( tif )
FUNCTION_CALL	210:20	210:33	17	TIFFClose ( tif )
CALLEE	210:20	210:20	18	TIFFClose
LEAF_NODE	210:20	210:20	19	TIFFClose
LEAF_NODE	210:29	210:29	18	(
ARGUMENT	210:30	210:30	18	tif
FIELD	210:30	210:30	19	tif
LEAF_NODE	210:30	210:30	20	tif
LEAF_NODE	210:33	210:33	18	)
LEAF_NODE	210:34	210:34	16	;
JUMP_STATEMENT	211:20	211:28	15	return 1 ;
KEYWORD	211:20	211:20	16	return
LEAF_NODE	211:20	211:20	17	return
DESTINATION	211:27	211:27	16	1
EXPR	211:27	211:27	17	1
FIELD	211:27	211:27	18	1
LEAF_NODE	211:27	211:27	19	1
LEAF_NODE	211:28	211:28	16	;
LEAF_NODE	212:16	212:16	14	}
LEAF_NODE	213:12	213:12	11	}
LEAF_NODE	214:8	214:8	8	}
LEAF_NODE	215:4	215:4	5	}
EXPR_STATEMENT	217:4	217:18	3	TIFFClose ( tif ) ;
EXPR	217:4	217:4	4	TIFFClose ( tif )
FUNCTION_CALL	217:4	217:17	5	TIFFClose ( tif )
CALLEE	217:4	217:4	6	TIFFClose
LEAF_NODE	217:4	217:4	7	TIFFClose
LEAF_NODE	217:13	217:13	6	(
ARGUMENT	217:14	217:14	6	tif
FIELD	217:14	217:14	7	tif
LEAF_NODE	217:14	217:14	8	tif
LEAF_NODE	217:17	217:17	6	)
LEAF_NODE	217:18	217:18	4	;
EXPR_STATEMENT	219:4	219:20	3	unlink ( filename ) ;
EXPR	219:4	219:4	4	unlink ( filename )
FUNCTION_CALL	219:4	219:19	5	unlink ( filename )
CALLEE	219:4	219:4	6	unlink
LEAF_NODE	219:4	219:4	7	unlink
LEAF_NODE	219:10	219:10	6	(
ARGUMENT	219:11	219:11	6	filename
FIELD	219:11	219:11	7	filename
LEAF_NODE	219:11	219:11	8	filename
LEAF_NODE	219:19	219:19	6	)
LEAF_NODE	219:20	219:20	4	;
JUMP_STATEMENT	220:4	220:12	3	return 0 ;
KEYWORD	220:4	220:4	4	return
LEAF_NODE	220:4	220:4	5	return
DESTINATION	220:11	220:11	4	0
EXPR	220:11	220:11	5	0
FIELD	220:11	220:11	6	0
LEAF_NODE	220:11	220:11	7	0
LEAF_NODE	220:12	220:12	4	;
LEAF_NODE	221:0	221:0	2	}
FUNCTION_DEF	223:0	239:0	1	
RETURN_TYPE	223:0	223:0	2	int
TYPE_NAME	223:0	223:0	3	int
LEAF_NODE	223:0	223:0	4	int
FUNCTION_NAME	224:0	224:0	2	main
LEAF_NODE	224:0	224:0	3	main
PARAMETER_LIST	224:4	224:5	2	( )
LEAF_NODE	224:4	224:4	3	(
LEAF_NODE	224:5	224:5	3	)
LEAF_NODE	225:0	225:0	2	{
STATEMENTS	226:4	238:4	2	
SIMPLE_DECL	226:4	226:13	3	int tiled ;
VAR_DECL	226:4	226:8	4	int tiled
TYPE	226:4	226:4	5	int
TYPE_NAME	226:4	226:4	6	int
LEAF_NODE	226:4	226:4	7	int
NAME	226:8	226:8	5	tiled
LEAF_NODE	226:8	226:8	6	tiled
LEAF_NODE	226:13	226:13	4	;
ITERATION	227:4	228:4	3	
KEYWORD	227:4	227:4	4	for
LEAF_NODE	227:4	227:4	5	for
LEAF_NODE	227:7	227:7	4	(
FOR_INIT	227:9	227:18	4	tiled = 0 ;
EXPR	227:9	227:9	5	tiled = 0
ASSIGN	227:9	227:17	6	tiled = 0
LVAL	227:9	227:9	7	tiled
FIELD	227:9	227:9	8	tiled
LEAF_NODE	227:9	227:9	9	tiled
ASSIGN_OP	227:15	227:15	7	=
LEAF_NODE	227:15	227:15	8	=
RVAL	227:17	227:17	7	0
FIELD	227:17	227:17	8	0
LEAF_NODE	227:17	227:17	9	0
LEAF_NODE	227:18	227:18	5	;
CONDITION	227:20	227:20	4	tiled <= 1
EXPR	227:20	227:29	5	tiled <= 1
FIELD	227:20	227:20	6	tiled
LEAF_NODE	227:20	227:20	7	tiled
REL_OPERATOR	227:26	227:26	6	<=
LEAF_NODE	227:26	227:26	7	<=
FIELD	227:29	227:29	6	1
LEAF_NODE	227:29	227:29	7	1
LEAF_NODE	227:30	227:30	4	;
FOR_EXPR	227:32	227:32	4	tiled ++
EXPR	227:32	227:32	5	tiled ++
FIELD	227:32	227:38	6	tiled ++
LEAF_NODE	227:32	227:32	7	tiled
LEAF_NODE	227:38	227:38	7	++
LEAF_NODE	227:41	227:41	4	)
STATEMENTS	228:4	237:4	4	
LEAF_NODE	228:4	228:4	5	{
STATEMENTS	229:8	235:8	5	
SELECTION	229:8	230:12	6	
KEYWORD	229:8	229:8	7	if
LEAF_NODE	229:8	229:8	8	if
LEAF_NODE	229:10	229:10	7	(
CONDITION	229:12	229:12	7	test ( "w" , tiled , 1 )
EXPR	229:12	229:12	8	test ( "w" , tiled , 1 )
FUNCTION_CALL	229:12	229:30	9	test ( "w" , tiled , 1 )
CALLEE	229:12	229:12	10	test
LEAF_NODE	229:12	229:12	11	test
LEAF_NODE	229:16	229:16	10	(
ARGUMENT	229:17	229:17	10	"w"
FIELD	229:17	229:17	11	"w"
LEAF_NODE	229:17	229:17	12	"w"
LEAF_NODE	229:20	229:20	10	,
ARGUMENT	229:22	229:22	10	tiled
FIELD	229:22	229:22	11	tiled
LEAF_NODE	229:22	229:22	12	tiled
LEAF_NODE	229:27	229:27	10	,
ARGUMENT	229:29	229:29	10	1
FIELD	229:29	229:29	11	1
LEAF_NODE	229:29	229:29	12	1
LEAF_NODE	229:30	229:30	10	)
LEAF_NODE	229:32	229:32	7	)
STATEMENTS	230:12	230:12	7	
JUMP_STATEMENT	230:12	230:20	8	return 1 ;
KEYWORD	230:12	230:12	9	return
LEAF_NODE	230:12	230:12	10	return
DESTINATION	230:19	230:19	9	1
EXPR	230:19	230:19	10	1
FIELD	230:19	230:19	11	1
LEAF_NODE	230:19	230:19	12	1
LEAF_NODE	230:20	230:20	9	;
SELECTION	231:8	232:12	6	
KEYWORD	231:8	231:8	7	if
LEAF_NODE	231:8	231:8	8	if
LEAF_NODE	231:10	231:10	7	(
CONDITION	231:12	231:12	7	test ( "w" , tiled , 10 )
EXPR	231:12	231:12	8	test ( "w" , tiled , 10 )
FUNCTION_CALL	231:12	231:31	9	test ( "w" , tiled , 10 )
CALLEE	231:12	231:12	10	test
LEAF_NODE	231:12	231:12	11	test
LEAF_NODE	231:16	231:16	10	(
ARGUMENT	231:17	231:17	10	"w"
FIELD	231:17	231:17	11	"w"
LEAF_NODE	231:17	231:17	12	"w"
LEAF_NODE	231:20	231:20	10	,
ARGUMENT	231:22	231:22	10	tiled
FIELD	231:22	231:22	11	tiled
LEAF_NODE	231:22	231:22	12	tiled
LEAF_NODE	231:27	231:27	10	,
ARGUMENT	231:29	231:29	10	10
FIELD	231:29	231:29	11	10
LEAF_NODE	231:29	231:29	12	10
LEAF_NODE	231:31	231:31	10	)
LEAF_NODE	231:33	231:33	7	)
STATEMENTS	232:12	232:12	7	
JUMP_STATEMENT	232:12	232:20	8	return 1 ;
KEYWORD	232:12	232:12	9	return
LEAF_NODE	232:12	232:12	10	return
DESTINATION	232:19	232:19	9	1
EXPR	232:19	232:19	10	1
FIELD	232:19	232:19	11	1
LEAF_NODE	232:19	232:19	12	1
LEAF_NODE	232:20	232:20	9	;
SELECTION	233:8	234:12	6	
KEYWORD	233:8	233:8	7	if
LEAF_NODE	233:8	233:8	8	if
LEAF_NODE	233:10	233:10	7	(
CONDITION	233:12	233:12	7	test ( "w8" , tiled , 1 )
EXPR	233:12	233:12	8	test ( "w8" , tiled , 1 )
FUNCTION_CALL	233:12	233:31	9	test ( "w8" , tiled , 1 )
CALLEE	233:12	233:12	10	test
LEAF_NODE	233:12	233:12	11	test
LEAF_NODE	233:16	233:16	10	(
ARGUMENT	233:17	233:17	10	"w8"
FIELD	233:17	233:17	11	"w8"
LEAF_NODE	233:17	233:17	12	"w8"
LEAF_NODE	233:21	233:21	10	,
ARGUMENT	233:23	233:23	10	tiled
FIELD	233:23	233:23	11	tiled
LEAF_NODE	233:23	233:23	12	tiled
LEAF_NODE	233:28	233:28	10	,
ARGUMENT	233:30	233:30	10	1
FIELD	233:30	233:30	11	1
LEAF_NODE	233:30	233:30	12	1
LEAF_NODE	233:31	233:31	10	)
LEAF_NODE	233:33	233:33	7	)
STATEMENTS	234:12	234:12	7	
JUMP_STATEMENT	234:12	234:20	8	return 1 ;
KEYWORD	234:12	234:12	9	return
LEAF_NODE	234:12	234:12	10	return
DESTINATION	234:19	234:19	9	1
EXPR	234:19	234:19	10	1
FIELD	234:19	234:19	11	1
LEAF_NODE	234:19	234:19	12	1
LEAF_NODE	234:20	234:20	9	;
SELECTION	235:8	236:12	6	
KEYWORD	235:8	235:8	7	if
LEAF_NODE	235:8	235:8	8	if
LEAF_NODE	235:10	235:10	7	(
CONDITION	235:12	235:12	7	test ( "wD" , tiled , 1 )
EXPR	235:12	235:12	8	test ( "wD" , tiled , 1 )
FUNCTION_CALL	235:12	235:31	9	test ( "wD" , tiled , 1 )
CALLEE	235:12	235:12	10	test
LEAF_NODE	235:12	235:12	11	test
LEAF_NODE	235:16	235:16	10	(
ARGUMENT	235:17	235:17	10	"wD"
FIELD	235:17	235:17	11	"wD"
LEAF_NODE	235:17	235:17	12	"wD"
LEAF_NODE	235:21	235:21	10	,
ARGUMENT	235:23	235:23	10	tiled
FIELD	235:23	235:23	11	tiled
LEAF_NODE	235:23	235:23	12	tiled
LEAF_NODE	235:28	235:28	10	,
ARGUMENT	235:30	235:30	10	1
FIELD	235:30	235:30	11	1
LEAF_NODE	235:30	235:30	12	1
LEAF_NODE	235:31	235:31	10	)
LEAF_NODE	235:33	235:33	7	)
STATEMENTS	236:12	236:12	7	
JUMP_STATEMENT	236:12	236:20	8	return 1 ;
KEYWORD	236:12	236:12	9	return
LEAF_NODE	236:12	236:12	10	return
DESTINATION	236:19	236:19	9	1
EXPR	236:19	236:19	10	1
FIELD	236:19	236:19	11	1
LEAF_NODE	236:19	236:19	12	1
LEAF_NODE	236:20	236:20	9	;
LEAF_NODE	237:4	237:4	5	}
JUMP_STATEMENT	238:4	238:12	3	return 0 ;
KEYWORD	238:4	238:4	4	return
LEAF_NODE	238:4	238:4	5	return
DESTINATION	238:11	238:11	4	0
EXPR	238:11	238:11	5	0
FIELD	238:11	238:11	6	0
LEAF_NODE	238:11	238:11	7	0
LEAF_NODE	238:12	238:12	4	;
LEAF_NODE	239:0	239:0	2	}
