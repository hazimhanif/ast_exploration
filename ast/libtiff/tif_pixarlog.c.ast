SOURCE_FILE	106:7	1394:0	0	
SIMPLE_DECL	106:7	106:21	1	float Fltsize ;
VAR_DECL	106:7	106:14	2	float Fltsize
TYPE	106:7	106:7	3	float
TYPE_NAME	106:7	106:7	4	float
LEAF_NODE	106:7	106:7	5	float
NAME	106:14	106:14	3	Fltsize
LEAF_NODE	106:14	106:14	4	Fltsize
LEAF_NODE	106:21	106:21	2	;
SIMPLE_DECL	107:7	107:26	1	float LogK1 , float LogK2 ;
INIT_DECL_LIST	107:7	107:7	2	float LogK1 , float LogK2
VAR_DECL	107:7	107:14	3	float LogK1
TYPE	107:7	107:7	4	float
TYPE_NAME	107:7	107:7	5	float
LEAF_NODE	107:7	107:7	6	float
NAME	107:14	107:14	4	LogK1
LEAF_NODE	107:14	107:14	5	LogK1
LEAF_NODE	107:19	107:19	3	,
VAR_DECL	107:7	107:21	3	float LogK2
TYPE	107:7	107:7	4	float
TYPE_NAME	107:7	107:7	5	float
LEAF_NODE	107:7	107:7	6	float
NAME	107:21	107:21	4	LogK2
LEAF_NODE	107:21	107:21	5	LogK2
LEAF_NODE	107:26	107:26	2	;
FUNCTION_DEF	111:0	172:0	1	
RETURN_TYPE	111:0	111:7	2	static void
LEAF_NODE	111:0	111:0	3	static
TYPE_NAME	111:7	111:7	3	void
LEAF_NODE	111:7	111:7	4	void
FUNCTION_NAME	112:0	112:0	2	horizontalAccumulateF
LEAF_NODE	112:0	112:0	3	horizontalAccumulateF
PARAMETER_LIST	112:21	113:17	2	( uint16 * wp , int n , int stride , float * op , float * ToLinearF )
LEAF_NODE	112:21	112:21	3	(
PARAMETER_DECL	112:22	112:30	3	uint16 * wp
TYPE	112:22	112:29	4	uint16 *
TYPE_NAME	112:22	112:22	5	uint16
LEAF_NODE	112:22	112:22	6	uint16
POINTER	112:29	112:29	5	*
LEAF_NODE	112:29	112:29	6	*
NAME	112:30	112:30	4	wp
LEAF_NODE	112:30	112:30	5	wp
LEAF_NODE	112:32	112:32	3	,
PARAMETER_DECL	112:34	112:38	3	int n
TYPE	112:34	112:34	4	int
TYPE_NAME	112:34	112:34	5	int
LEAF_NODE	112:34	112:34	6	int
NAME	112:38	112:38	4	n
LEAF_NODE	112:38	112:38	5	n
LEAF_NODE	112:39	112:39	3	,
PARAMETER_DECL	112:41	112:45	3	int stride
TYPE	112:41	112:41	4	int
TYPE_NAME	112:41	112:41	5	int
LEAF_NODE	112:41	112:41	6	int
NAME	112:45	112:45	4	stride
LEAF_NODE	112:45	112:45	5	stride
LEAF_NODE	112:51	112:51	3	,
PARAMETER_DECL	112:53	112:60	3	float * op
TYPE	112:53	112:59	4	float *
TYPE_NAME	112:53	112:53	5	float
LEAF_NODE	112:53	112:53	6	float
POINTER	112:59	112:59	5	*
LEAF_NODE	112:59	112:59	6	*
NAME	112:60	112:60	4	op
LEAF_NODE	112:60	112:60	5	op
LEAF_NODE	112:62	112:62	3	,
PARAMETER_DECL	113:1	113:8	3	float * ToLinearF
TYPE	113:1	113:7	4	float *
TYPE_NAME	113:1	113:1	5	float
LEAF_NODE	113:1	113:1	6	float
POINTER	113:7	113:7	5	*
LEAF_NODE	113:7	113:7	6	*
NAME	113:8	113:8	4	ToLinearF
LEAF_NODE	113:8	113:8	5	ToLinearF
LEAF_NODE	113:17	113:17	3	)
LEAF_NODE	114:0	114:0	2	{
STATEMENTS	115:4	118:4	2	
LEAF_NODE	115:4	115:4	3	register
SIMPLE_DECL	115:13	115:47	3	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask ;
INIT_DECL_LIST	115:13	115:13	4	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	115:13	115:27	5	unsigned int cr
TYPE	115:13	115:13	6	unsigned int
TYPE_NAME	115:13	115:22	7	unsigned int
LEAF_NODE	115:13	115:13	8	unsigned
LEAF_NODE	115:22	115:22	8	int
NAME	115:27	115:27	6	cr
LEAF_NODE	115:27	115:27	7	cr
LEAF_NODE	115:29	115:29	5	,
INIT_DECL_LIST	115:13	115:13	5	unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	115:13	115:31	6	unsigned int cg
TYPE	115:13	115:13	7	unsigned int
TYPE_NAME	115:13	115:22	8	unsigned int
LEAF_NODE	115:13	115:13	9	unsigned
LEAF_NODE	115:22	115:22	9	int
NAME	115:31	115:31	7	cg
LEAF_NODE	115:31	115:31	8	cg
LEAF_NODE	115:33	115:33	6	,
INIT_DECL_LIST	115:13	115:13	6	unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	115:13	115:35	7	unsigned int cb
TYPE	115:13	115:13	8	unsigned int
TYPE_NAME	115:13	115:22	9	unsigned int
LEAF_NODE	115:13	115:13	10	unsigned
LEAF_NODE	115:22	115:22	10	int
NAME	115:35	115:35	8	cb
LEAF_NODE	115:35	115:35	9	cb
LEAF_NODE	115:37	115:37	7	,
INIT_DECL_LIST	115:13	115:13	7	unsigned int ca , unsigned int mask
VAR_DECL	115:13	115:39	8	unsigned int ca
TYPE	115:13	115:13	9	unsigned int
TYPE_NAME	115:13	115:22	10	unsigned int
LEAF_NODE	115:13	115:13	11	unsigned
LEAF_NODE	115:22	115:22	11	int
NAME	115:39	115:39	9	ca
LEAF_NODE	115:39	115:39	10	ca
LEAF_NODE	115:41	115:41	8	,
VAR_DECL	115:13	115:43	8	unsigned int mask
TYPE	115:13	115:13	9	unsigned int
TYPE_NAME	115:13	115:22	10	unsigned int
LEAF_NODE	115:13	115:13	11	unsigned
LEAF_NODE	115:22	115:22	11	int
NAME	115:43	115:43	9	mask
LEAF_NODE	115:43	115:43	10	mask
LEAF_NODE	115:47	115:47	4	;
LEAF_NODE	116:4	116:4	3	register
SIMPLE_DECL	116:13	116:34	3	float t0 , float t1 , float t2 , float t3 ;
INIT_DECL_LIST	116:13	116:13	4	float t0 , float t1 , float t2 , float t3
VAR_DECL	116:13	116:20	5	float t0
TYPE	116:13	116:13	6	float
TYPE_NAME	116:13	116:13	7	float
LEAF_NODE	116:13	116:13	8	float
NAME	116:20	116:20	6	t0
LEAF_NODE	116:20	116:20	7	t0
LEAF_NODE	116:22	116:22	5	,
INIT_DECL_LIST	116:13	116:13	5	float t1 , float t2 , float t3
VAR_DECL	116:13	116:24	6	float t1
TYPE	116:13	116:13	7	float
TYPE_NAME	116:13	116:13	8	float
LEAF_NODE	116:13	116:13	9	float
NAME	116:24	116:24	7	t1
LEAF_NODE	116:24	116:24	8	t1
LEAF_NODE	116:26	116:26	6	,
INIT_DECL_LIST	116:13	116:13	6	float t2 , float t3
VAR_DECL	116:13	116:28	7	float t2
TYPE	116:13	116:13	8	float
TYPE_NAME	116:13	116:13	9	float
LEAF_NODE	116:13	116:13	10	float
NAME	116:28	116:28	8	t2
LEAF_NODE	116:28	116:28	9	t2
LEAF_NODE	116:30	116:30	7	,
VAR_DECL	116:13	116:32	7	float t3
TYPE	116:13	116:13	8	float
TYPE_NAME	116:13	116:13	9	float
LEAF_NODE	116:13	116:13	10	float
NAME	116:32	116:32	8	t3
LEAF_NODE	116:32	116:32	9	t3
LEAF_NODE	116:34	116:34	4	;
SELECTION	118:4	118:21	3	
KEYWORD	118:4	118:4	4	if
LEAF_NODE	118:4	118:4	5	if
LEAF_NODE	118:7	118:7	4	(
CONDITION	118:8	118:8	4	n >= stride
EXPR	118:8	118:13	5	n >= stride
FIELD	118:8	118:8	6	n
LEAF_NODE	118:8	118:8	7	n
REL_OPERATOR	118:10	118:10	6	>=
LEAF_NODE	118:10	118:10	7	>=
FIELD	118:13	118:13	6	stride
LEAF_NODE	118:13	118:13	7	stride
LEAF_NODE	118:19	118:19	4	)
STATEMENTS	118:21	171:4	4	
LEAF_NODE	118:21	118:21	5	{
STATEMENTS	119:1	162:3	5	
EXPR_STATEMENT	119:1	119:17	6	mask = CODE_MASK ;
EXPR	119:1	119:1	7	mask = CODE_MASK
ASSIGN	119:1	119:8	8	mask = CODE_MASK
LVAL	119:1	119:1	9	mask
FIELD	119:1	119:1	10	mask
LEAF_NODE	119:1	119:1	11	mask
ASSIGN_OP	119:6	119:6	9	=
LEAF_NODE	119:6	119:6	10	=
RVAL	119:8	119:8	9	CODE_MASK
FIELD	119:8	119:8	10	CODE_MASK
LEAF_NODE	119:8	119:8	11	CODE_MASK
LEAF_NODE	119:17	119:17	7	;
SELECTION	120:1	120:18	6	
KEYWORD	120:1	120:1	7	if
LEAF_NODE	120:1	120:1	8	if
LEAF_NODE	120:4	120:4	7	(
CONDITION	120:5	120:5	7	stride == 3
EXPR	120:5	120:15	8	stride == 3
FIELD	120:5	120:5	9	stride
LEAF_NODE	120:5	120:5	10	stride
EQ_OPERATOR	120:12	120:12	9	==
LEAF_NODE	120:12	120:12	10	==
FIELD	120:15	120:15	9	3
LEAF_NODE	120:15	120:15	10	3
LEAF_NODE	120:16	120:16	7	)
STATEMENTS	120:18	139:1	7	
LEAF_NODE	120:18	120:18	8	{
STATEMENTS	121:5	128:5	8	
EXPR_STATEMENT	121:5	121:40	9	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ] ;
EXPR	121:5	121:5	10	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ]
ASSIGN	121:5	121:10	11	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ]
LVAL	121:5	121:5	12	t0
FIELD	121:5	121:5	13	t0
LEAF_NODE	121:5	121:5	14	t0
ASSIGN_OP	121:8	121:8	12	=
LEAF_NODE	121:8	121:8	13	=
RVAL	121:10	121:10	12	ToLinearF [ cr = ( wp [ 0 ] & mask ) ]
FIELD	121:10	121:39	13	ToLinearF [ cr = ( wp [ 0 ] & mask ) ]
LEAF_NODE	121:10	121:10	14	ToLinearF
LEAF_NODE	121:19	121:19	14	[
EXPR	121:20	121:20	14	cr = ( wp [ 0 ] & mask )
ASSIGN	121:20	121:25	15	cr = ( wp [ 0 ] & mask )
LVAL	121:20	121:20	16	cr
FIELD	121:20	121:20	17	cr
LEAF_NODE	121:20	121:20	18	cr
ASSIGN_OP	121:23	121:23	16	=
LEAF_NODE	121:23	121:23	17	=
RVAL	121:25	121:38	16	( wp [ 0 ] & mask )
LEAF_NODE	121:25	121:25	17	(
FIELD	121:26	121:30	17	wp [ 0 ]
LEAF_NODE	121:26	121:26	18	wp
LEAF_NODE	121:28	121:28	18	[
EXPR	121:29	121:29	18	0
FIELD	121:29	121:29	19	0
LEAF_NODE	121:29	121:29	20	0
LEAF_NODE	121:30	121:30	18	]
LEAF_NODE	121:32	121:32	17	&
FIELD	121:34	121:34	17	mask
LEAF_NODE	121:34	121:34	18	mask
LEAF_NODE	121:38	121:38	17	)
LEAF_NODE	121:39	121:39	14	]
LEAF_NODE	121:40	121:40	10	;
EXPR_STATEMENT	122:5	122:40	9	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ] ;
EXPR	122:5	122:5	10	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ]
ASSIGN	122:5	122:10	11	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ]
LVAL	122:5	122:5	12	t1
FIELD	122:5	122:5	13	t1
LEAF_NODE	122:5	122:5	14	t1
ASSIGN_OP	122:8	122:8	12	=
LEAF_NODE	122:8	122:8	13	=
RVAL	122:10	122:10	12	ToLinearF [ cg = ( wp [ 1 ] & mask ) ]
FIELD	122:10	122:39	13	ToLinearF [ cg = ( wp [ 1 ] & mask ) ]
LEAF_NODE	122:10	122:10	14	ToLinearF
LEAF_NODE	122:19	122:19	14	[
EXPR	122:20	122:20	14	cg = ( wp [ 1 ] & mask )
ASSIGN	122:20	122:25	15	cg = ( wp [ 1 ] & mask )
LVAL	122:20	122:20	16	cg
FIELD	122:20	122:20	17	cg
LEAF_NODE	122:20	122:20	18	cg
ASSIGN_OP	122:23	122:23	16	=
LEAF_NODE	122:23	122:23	17	=
RVAL	122:25	122:38	16	( wp [ 1 ] & mask )
LEAF_NODE	122:25	122:25	17	(
FIELD	122:26	122:30	17	wp [ 1 ]
LEAF_NODE	122:26	122:26	18	wp
LEAF_NODE	122:28	122:28	18	[
EXPR	122:29	122:29	18	1
FIELD	122:29	122:29	19	1
LEAF_NODE	122:29	122:29	20	1
LEAF_NODE	122:30	122:30	18	]
LEAF_NODE	122:32	122:32	17	&
FIELD	122:34	122:34	17	mask
LEAF_NODE	122:34	122:34	18	mask
LEAF_NODE	122:38	122:38	17	)
LEAF_NODE	122:39	122:39	14	]
LEAF_NODE	122:40	122:40	10	;
EXPR_STATEMENT	123:5	123:40	9	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ] ;
EXPR	123:5	123:5	10	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ]
ASSIGN	123:5	123:10	11	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ]
LVAL	123:5	123:5	12	t2
FIELD	123:5	123:5	13	t2
LEAF_NODE	123:5	123:5	14	t2
ASSIGN_OP	123:8	123:8	12	=
LEAF_NODE	123:8	123:8	13	=
RVAL	123:10	123:10	12	ToLinearF [ cb = ( wp [ 2 ] & mask ) ]
FIELD	123:10	123:39	13	ToLinearF [ cb = ( wp [ 2 ] & mask ) ]
LEAF_NODE	123:10	123:10	14	ToLinearF
LEAF_NODE	123:19	123:19	14	[
EXPR	123:20	123:20	14	cb = ( wp [ 2 ] & mask )
ASSIGN	123:20	123:25	15	cb = ( wp [ 2 ] & mask )
LVAL	123:20	123:20	16	cb
FIELD	123:20	123:20	17	cb
LEAF_NODE	123:20	123:20	18	cb
ASSIGN_OP	123:23	123:23	16	=
LEAF_NODE	123:23	123:23	17	=
RVAL	123:25	123:38	16	( wp [ 2 ] & mask )
LEAF_NODE	123:25	123:25	17	(
FIELD	123:26	123:30	17	wp [ 2 ]
LEAF_NODE	123:26	123:26	18	wp
LEAF_NODE	123:28	123:28	18	[
EXPR	123:29	123:29	18	2
FIELD	123:29	123:29	19	2
LEAF_NODE	123:29	123:29	20	2
LEAF_NODE	123:30	123:30	18	]
LEAF_NODE	123:32	123:32	17	&
FIELD	123:34	123:34	17	mask
LEAF_NODE	123:34	123:34	18	mask
LEAF_NODE	123:38	123:38	17	)
LEAF_NODE	123:39	123:39	14	]
LEAF_NODE	123:40	123:40	10	;
EXPR_STATEMENT	124:5	124:15	9	op [ 0 ] = t0 ;
EXPR	124:5	124:5	10	op [ 0 ] = t0
ASSIGN	124:5	124:13	11	op [ 0 ] = t0
LVAL	124:5	124:5	12	op [ 0 ]
FIELD	124:5	124:9	13	op [ 0 ]
LEAF_NODE	124:5	124:5	14	op
LEAF_NODE	124:7	124:7	14	[
EXPR	124:8	124:8	14	0
FIELD	124:8	124:8	15	0
LEAF_NODE	124:8	124:8	16	0
LEAF_NODE	124:9	124:9	14	]
ASSIGN_OP	124:11	124:11	12	=
LEAF_NODE	124:11	124:11	13	=
RVAL	124:13	124:13	12	t0
FIELD	124:13	124:13	13	t0
LEAF_NODE	124:13	124:13	14	t0
LEAF_NODE	124:15	124:15	10	;
EXPR_STATEMENT	125:5	125:15	9	op [ 1 ] = t1 ;
EXPR	125:5	125:5	10	op [ 1 ] = t1
ASSIGN	125:5	125:13	11	op [ 1 ] = t1
LVAL	125:5	125:5	12	op [ 1 ]
FIELD	125:5	125:9	13	op [ 1 ]
LEAF_NODE	125:5	125:5	14	op
LEAF_NODE	125:7	125:7	14	[
EXPR	125:8	125:8	14	1
FIELD	125:8	125:8	15	1
LEAF_NODE	125:8	125:8	16	1
LEAF_NODE	125:9	125:9	14	]
ASSIGN_OP	125:11	125:11	12	=
LEAF_NODE	125:11	125:11	13	=
RVAL	125:13	125:13	12	t1
FIELD	125:13	125:13	13	t1
LEAF_NODE	125:13	125:13	14	t1
LEAF_NODE	125:15	125:15	10	;
EXPR_STATEMENT	126:5	126:15	9	op [ 2 ] = t2 ;
EXPR	126:5	126:5	10	op [ 2 ] = t2
ASSIGN	126:5	126:13	11	op [ 2 ] = t2
LVAL	126:5	126:5	12	op [ 2 ]
FIELD	126:5	126:9	13	op [ 2 ]
LEAF_NODE	126:5	126:5	14	op
LEAF_NODE	126:7	126:7	14	[
EXPR	126:8	126:8	14	2
FIELD	126:8	126:8	15	2
LEAF_NODE	126:8	126:8	16	2
LEAF_NODE	126:9	126:9	14	]
ASSIGN_OP	126:11	126:11	12	=
LEAF_NODE	126:11	126:11	13	=
RVAL	126:13	126:13	12	t2
FIELD	126:13	126:13	13	t2
LEAF_NODE	126:13	126:13	14	t2
LEAF_NODE	126:15	126:15	10	;
EXPR_STATEMENT	127:5	127:11	9	n -= 3 ;
EXPR	127:5	127:5	10	n -= 3
ASSIGN	127:5	127:10	11	n -= 3
LVAL	127:5	127:5	12	n
FIELD	127:5	127:5	13	n
LEAF_NODE	127:5	127:5	14	n
ASSIGN_OP	127:7	127:7	12	-=
LEAF_NODE	127:7	127:7	13	-=
RVAL	127:10	127:10	12	3
FIELD	127:10	127:10	13	3
LEAF_NODE	127:10	127:10	14	3
LEAF_NODE	127:11	127:11	10	;
ITERATION	128:5	128:19	9	
KEYWORD	128:5	128:5	10	while
LEAF_NODE	128:5	128:5	11	while
LEAF_NODE	128:11	128:11	10	(
CONDITION	128:12	128:12	10	n > 0
EXPR	128:12	128:16	11	n > 0
FIELD	128:12	128:12	12	n
LEAF_NODE	128:12	128:12	13	n
REL_OPERATOR	128:14	128:14	12	>
LEAF_NODE	128:14	128:14	13	>
FIELD	128:16	128:16	12	0
LEAF_NODE	128:16	128:16	13	0
LEAF_NODE	128:17	128:17	10	)
STATEMENTS	128:19	138:5	10	
LEAF_NODE	128:19	128:19	11	{
STATEMENTS	129:2	137:2	11	
EXPR_STATEMENT	129:2	129:9	12	wp += 3 ;
EXPR	129:2	129:2	13	wp += 3
ASSIGN	129:2	129:8	14	wp += 3
LVAL	129:2	129:2	15	wp
FIELD	129:2	129:2	16	wp
LEAF_NODE	129:2	129:2	17	wp
ASSIGN_OP	129:5	129:5	15	+=
LEAF_NODE	129:5	129:5	16	+=
RVAL	129:8	129:8	15	3
FIELD	129:8	129:8	16	3
LEAF_NODE	129:8	129:8	17	3
LEAF_NODE	129:9	129:9	13	;
EXPR_STATEMENT	130:2	130:9	12	op += 3 ;
EXPR	130:2	130:2	13	op += 3
ASSIGN	130:2	130:8	14	op += 3
LVAL	130:2	130:2	15	op
FIELD	130:2	130:2	16	op
LEAF_NODE	130:2	130:2	17	op
ASSIGN_OP	130:5	130:5	15	+=
LEAF_NODE	130:5	130:5	16	+=
RVAL	130:8	130:8	15	3
FIELD	130:8	130:8	16	3
LEAF_NODE	130:8	130:8	17	3
LEAF_NODE	130:9	130:9	13	;
EXPR_STATEMENT	131:2	131:8	12	n -= 3 ;
EXPR	131:2	131:2	13	n -= 3
ASSIGN	131:2	131:7	14	n -= 3
LVAL	131:2	131:2	15	n
FIELD	131:2	131:2	16	n
LEAF_NODE	131:2	131:2	17	n
ASSIGN_OP	131:4	131:4	15	-=
LEAF_NODE	131:4	131:4	16	-=
RVAL	131:7	131:7	15	3
FIELD	131:7	131:7	16	3
LEAF_NODE	131:7	131:7	17	3
LEAF_NODE	131:8	131:8	13	;
EXPR_STATEMENT	132:2	132:38	12	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ] ;
EXPR	132:2	132:2	13	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ]
ASSIGN	132:2	132:7	14	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ]
LVAL	132:2	132:2	15	t0
FIELD	132:2	132:2	16	t0
LEAF_NODE	132:2	132:2	17	t0
ASSIGN_OP	132:5	132:5	15	=
LEAF_NODE	132:5	132:5	16	=
RVAL	132:7	132:7	15	ToLinearF [ ( cr += wp [ 0 ] ) & mask ]
FIELD	132:7	132:37	16	ToLinearF [ ( cr += wp [ 0 ] ) & mask ]
LEAF_NODE	132:7	132:7	17	ToLinearF
LEAF_NODE	132:16	132:16	17	[
EXPR	132:17	132:33	17	( cr += wp [ 0 ] ) & mask
LEAF_NODE	132:17	132:17	18	(
ASSIGN	132:18	132:24	18	cr += wp [ 0 ]
LVAL	132:18	132:18	19	cr
FIELD	132:18	132:18	20	cr
LEAF_NODE	132:18	132:18	21	cr
ASSIGN_OP	132:21	132:21	19	+=
LEAF_NODE	132:21	132:21	20	+=
RVAL	132:24	132:24	19	wp [ 0 ]
FIELD	132:24	132:28	20	wp [ 0 ]
LEAF_NODE	132:24	132:24	21	wp
LEAF_NODE	132:26	132:26	21	[
EXPR	132:27	132:27	21	0
FIELD	132:27	132:27	22	0
LEAF_NODE	132:27	132:27	23	0
LEAF_NODE	132:28	132:28	21	]
LEAF_NODE	132:29	132:29	18	)
LEAF_NODE	132:31	132:31	18	&
FIELD	132:33	132:33	18	mask
LEAF_NODE	132:33	132:33	19	mask
LEAF_NODE	132:37	132:37	17	]
LEAF_NODE	132:38	132:38	13	;
EXPR_STATEMENT	133:2	133:38	12	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ] ;
EXPR	133:2	133:2	13	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ]
ASSIGN	133:2	133:7	14	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ]
LVAL	133:2	133:2	15	t1
FIELD	133:2	133:2	16	t1
LEAF_NODE	133:2	133:2	17	t1
ASSIGN_OP	133:5	133:5	15	=
LEAF_NODE	133:5	133:5	16	=
RVAL	133:7	133:7	15	ToLinearF [ ( cg += wp [ 1 ] ) & mask ]
FIELD	133:7	133:37	16	ToLinearF [ ( cg += wp [ 1 ] ) & mask ]
LEAF_NODE	133:7	133:7	17	ToLinearF
LEAF_NODE	133:16	133:16	17	[
EXPR	133:17	133:33	17	( cg += wp [ 1 ] ) & mask
LEAF_NODE	133:17	133:17	18	(
ASSIGN	133:18	133:24	18	cg += wp [ 1 ]
LVAL	133:18	133:18	19	cg
FIELD	133:18	133:18	20	cg
LEAF_NODE	133:18	133:18	21	cg
ASSIGN_OP	133:21	133:21	19	+=
LEAF_NODE	133:21	133:21	20	+=
RVAL	133:24	133:24	19	wp [ 1 ]
FIELD	133:24	133:28	20	wp [ 1 ]
LEAF_NODE	133:24	133:24	21	wp
LEAF_NODE	133:26	133:26	21	[
EXPR	133:27	133:27	21	1
FIELD	133:27	133:27	22	1
LEAF_NODE	133:27	133:27	23	1
LEAF_NODE	133:28	133:28	21	]
LEAF_NODE	133:29	133:29	18	)
LEAF_NODE	133:31	133:31	18	&
FIELD	133:33	133:33	18	mask
LEAF_NODE	133:33	133:33	19	mask
LEAF_NODE	133:37	133:37	17	]
LEAF_NODE	133:38	133:38	13	;
EXPR_STATEMENT	134:2	134:38	12	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ] ;
EXPR	134:2	134:2	13	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ]
ASSIGN	134:2	134:7	14	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ]
LVAL	134:2	134:2	15	t2
FIELD	134:2	134:2	16	t2
LEAF_NODE	134:2	134:2	17	t2
ASSIGN_OP	134:5	134:5	15	=
LEAF_NODE	134:5	134:5	16	=
RVAL	134:7	134:7	15	ToLinearF [ ( cb += wp [ 2 ] ) & mask ]
FIELD	134:7	134:37	16	ToLinearF [ ( cb += wp [ 2 ] ) & mask ]
LEAF_NODE	134:7	134:7	17	ToLinearF
LEAF_NODE	134:16	134:16	17	[
EXPR	134:17	134:33	17	( cb += wp [ 2 ] ) & mask
LEAF_NODE	134:17	134:17	18	(
ASSIGN	134:18	134:24	18	cb += wp [ 2 ]
LVAL	134:18	134:18	19	cb
FIELD	134:18	134:18	20	cb
LEAF_NODE	134:18	134:18	21	cb
ASSIGN_OP	134:21	134:21	19	+=
LEAF_NODE	134:21	134:21	20	+=
RVAL	134:24	134:24	19	wp [ 2 ]
FIELD	134:24	134:28	20	wp [ 2 ]
LEAF_NODE	134:24	134:24	21	wp
LEAF_NODE	134:26	134:26	21	[
EXPR	134:27	134:27	21	2
FIELD	134:27	134:27	22	2
LEAF_NODE	134:27	134:27	23	2
LEAF_NODE	134:28	134:28	21	]
LEAF_NODE	134:29	134:29	18	)
LEAF_NODE	134:31	134:31	18	&
FIELD	134:33	134:33	18	mask
LEAF_NODE	134:33	134:33	19	mask
LEAF_NODE	134:37	134:37	17	]
LEAF_NODE	134:38	134:38	13	;
EXPR_STATEMENT	135:2	135:12	12	op [ 0 ] = t0 ;
EXPR	135:2	135:2	13	op [ 0 ] = t0
ASSIGN	135:2	135:10	14	op [ 0 ] = t0
LVAL	135:2	135:2	15	op [ 0 ]
FIELD	135:2	135:6	16	op [ 0 ]
LEAF_NODE	135:2	135:2	17	op
LEAF_NODE	135:4	135:4	17	[
EXPR	135:5	135:5	17	0
FIELD	135:5	135:5	18	0
LEAF_NODE	135:5	135:5	19	0
LEAF_NODE	135:6	135:6	17	]
ASSIGN_OP	135:8	135:8	15	=
LEAF_NODE	135:8	135:8	16	=
RVAL	135:10	135:10	15	t0
FIELD	135:10	135:10	16	t0
LEAF_NODE	135:10	135:10	17	t0
LEAF_NODE	135:12	135:12	13	;
EXPR_STATEMENT	136:2	136:12	12	op [ 1 ] = t1 ;
EXPR	136:2	136:2	13	op [ 1 ] = t1
ASSIGN	136:2	136:10	14	op [ 1 ] = t1
LVAL	136:2	136:2	15	op [ 1 ]
FIELD	136:2	136:6	16	op [ 1 ]
LEAF_NODE	136:2	136:2	17	op
LEAF_NODE	136:4	136:4	17	[
EXPR	136:5	136:5	17	1
FIELD	136:5	136:5	18	1
LEAF_NODE	136:5	136:5	19	1
LEAF_NODE	136:6	136:6	17	]
ASSIGN_OP	136:8	136:8	15	=
LEAF_NODE	136:8	136:8	16	=
RVAL	136:10	136:10	15	t1
FIELD	136:10	136:10	16	t1
LEAF_NODE	136:10	136:10	17	t1
LEAF_NODE	136:12	136:12	13	;
EXPR_STATEMENT	137:2	137:12	12	op [ 2 ] = t2 ;
EXPR	137:2	137:2	13	op [ 2 ] = t2
ASSIGN	137:2	137:10	14	op [ 2 ] = t2
LVAL	137:2	137:2	15	op [ 2 ]
FIELD	137:2	137:6	16	op [ 2 ]
LEAF_NODE	137:2	137:2	17	op
LEAF_NODE	137:4	137:4	17	[
EXPR	137:5	137:5	17	2
FIELD	137:5	137:5	18	2
LEAF_NODE	137:5	137:5	19	2
LEAF_NODE	137:6	137:6	17	]
ASSIGN_OP	137:8	137:8	15	=
LEAF_NODE	137:8	137:8	16	=
RVAL	137:10	137:10	15	t2
FIELD	137:10	137:10	16	t2
LEAF_NODE	137:10	137:10	17	t2
LEAF_NODE	137:12	137:12	13	;
LEAF_NODE	138:5	138:5	11	}
LEAF_NODE	139:1	139:1	8	}
SELECTION	139:3	139:8	6	
KEYWORD	139:3	139:3	7	else
LEAF_NODE	139:3	139:3	8	else
STATEMENTS	139:8	139:8	7	
SELECTION	139:8	139:25	8	
KEYWORD	139:8	139:8	9	if
LEAF_NODE	139:8	139:8	10	if
LEAF_NODE	139:11	139:11	9	(
CONDITION	139:12	139:12	9	stride == 4
EXPR	139:12	139:22	10	stride == 4
FIELD	139:12	139:12	11	stride
LEAF_NODE	139:12	139:12	12	stride
EQ_OPERATOR	139:19	139:19	11	==
LEAF_NODE	139:19	139:19	12	==
FIELD	139:22	139:22	11	4
LEAF_NODE	139:22	139:22	12	4
LEAF_NODE	139:23	139:23	9	)
STATEMENTS	139:25	162:1	9	
LEAF_NODE	139:25	139:25	10	{
STATEMENTS	140:5	149:5	10	
EXPR_STATEMENT	140:5	140:40	11	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ] ;
EXPR	140:5	140:5	12	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ]
ASSIGN	140:5	140:10	13	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ]
LVAL	140:5	140:5	14	t0
FIELD	140:5	140:5	15	t0
LEAF_NODE	140:5	140:5	16	t0
ASSIGN_OP	140:8	140:8	14	=
LEAF_NODE	140:8	140:8	15	=
RVAL	140:10	140:10	14	ToLinearF [ cr = ( wp [ 0 ] & mask ) ]
FIELD	140:10	140:39	15	ToLinearF [ cr = ( wp [ 0 ] & mask ) ]
LEAF_NODE	140:10	140:10	16	ToLinearF
LEAF_NODE	140:19	140:19	16	[
EXPR	140:20	140:20	16	cr = ( wp [ 0 ] & mask )
ASSIGN	140:20	140:25	17	cr = ( wp [ 0 ] & mask )
LVAL	140:20	140:20	18	cr
FIELD	140:20	140:20	19	cr
LEAF_NODE	140:20	140:20	20	cr
ASSIGN_OP	140:23	140:23	18	=
LEAF_NODE	140:23	140:23	19	=
RVAL	140:25	140:38	18	( wp [ 0 ] & mask )
LEAF_NODE	140:25	140:25	19	(
FIELD	140:26	140:30	19	wp [ 0 ]
LEAF_NODE	140:26	140:26	20	wp
LEAF_NODE	140:28	140:28	20	[
EXPR	140:29	140:29	20	0
FIELD	140:29	140:29	21	0
LEAF_NODE	140:29	140:29	22	0
LEAF_NODE	140:30	140:30	20	]
LEAF_NODE	140:32	140:32	19	&
FIELD	140:34	140:34	19	mask
LEAF_NODE	140:34	140:34	20	mask
LEAF_NODE	140:38	140:38	19	)
LEAF_NODE	140:39	140:39	16	]
LEAF_NODE	140:40	140:40	12	;
EXPR_STATEMENT	141:5	141:40	11	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ] ;
EXPR	141:5	141:5	12	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ]
ASSIGN	141:5	141:10	13	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ]
LVAL	141:5	141:5	14	t1
FIELD	141:5	141:5	15	t1
LEAF_NODE	141:5	141:5	16	t1
ASSIGN_OP	141:8	141:8	14	=
LEAF_NODE	141:8	141:8	15	=
RVAL	141:10	141:10	14	ToLinearF [ cg = ( wp [ 1 ] & mask ) ]
FIELD	141:10	141:39	15	ToLinearF [ cg = ( wp [ 1 ] & mask ) ]
LEAF_NODE	141:10	141:10	16	ToLinearF
LEAF_NODE	141:19	141:19	16	[
EXPR	141:20	141:20	16	cg = ( wp [ 1 ] & mask )
ASSIGN	141:20	141:25	17	cg = ( wp [ 1 ] & mask )
LVAL	141:20	141:20	18	cg
FIELD	141:20	141:20	19	cg
LEAF_NODE	141:20	141:20	20	cg
ASSIGN_OP	141:23	141:23	18	=
LEAF_NODE	141:23	141:23	19	=
RVAL	141:25	141:38	18	( wp [ 1 ] & mask )
LEAF_NODE	141:25	141:25	19	(
FIELD	141:26	141:30	19	wp [ 1 ]
LEAF_NODE	141:26	141:26	20	wp
LEAF_NODE	141:28	141:28	20	[
EXPR	141:29	141:29	20	1
FIELD	141:29	141:29	21	1
LEAF_NODE	141:29	141:29	22	1
LEAF_NODE	141:30	141:30	20	]
LEAF_NODE	141:32	141:32	19	&
FIELD	141:34	141:34	19	mask
LEAF_NODE	141:34	141:34	20	mask
LEAF_NODE	141:38	141:38	19	)
LEAF_NODE	141:39	141:39	16	]
LEAF_NODE	141:40	141:40	12	;
EXPR_STATEMENT	142:5	142:40	11	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ] ;
EXPR	142:5	142:5	12	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ]
ASSIGN	142:5	142:10	13	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ]
LVAL	142:5	142:5	14	t2
FIELD	142:5	142:5	15	t2
LEAF_NODE	142:5	142:5	16	t2
ASSIGN_OP	142:8	142:8	14	=
LEAF_NODE	142:8	142:8	15	=
RVAL	142:10	142:10	14	ToLinearF [ cb = ( wp [ 2 ] & mask ) ]
FIELD	142:10	142:39	15	ToLinearF [ cb = ( wp [ 2 ] & mask ) ]
LEAF_NODE	142:10	142:10	16	ToLinearF
LEAF_NODE	142:19	142:19	16	[
EXPR	142:20	142:20	16	cb = ( wp [ 2 ] & mask )
ASSIGN	142:20	142:25	17	cb = ( wp [ 2 ] & mask )
LVAL	142:20	142:20	18	cb
FIELD	142:20	142:20	19	cb
LEAF_NODE	142:20	142:20	20	cb
ASSIGN_OP	142:23	142:23	18	=
LEAF_NODE	142:23	142:23	19	=
RVAL	142:25	142:38	18	( wp [ 2 ] & mask )
LEAF_NODE	142:25	142:25	19	(
FIELD	142:26	142:30	19	wp [ 2 ]
LEAF_NODE	142:26	142:26	20	wp
LEAF_NODE	142:28	142:28	20	[
EXPR	142:29	142:29	20	2
FIELD	142:29	142:29	21	2
LEAF_NODE	142:29	142:29	22	2
LEAF_NODE	142:30	142:30	20	]
LEAF_NODE	142:32	142:32	19	&
FIELD	142:34	142:34	19	mask
LEAF_NODE	142:34	142:34	20	mask
LEAF_NODE	142:38	142:38	19	)
LEAF_NODE	142:39	142:39	16	]
LEAF_NODE	142:40	142:40	12	;
EXPR_STATEMENT	143:5	143:40	11	t3 = ToLinearF [ ca = ( wp [ 3 ] & mask ) ] ;
EXPR	143:5	143:5	12	t3 = ToLinearF [ ca = ( wp [ 3 ] & mask ) ]
ASSIGN	143:5	143:10	13	t3 = ToLinearF [ ca = ( wp [ 3 ] & mask ) ]
LVAL	143:5	143:5	14	t3
FIELD	143:5	143:5	15	t3
LEAF_NODE	143:5	143:5	16	t3
ASSIGN_OP	143:8	143:8	14	=
LEAF_NODE	143:8	143:8	15	=
RVAL	143:10	143:10	14	ToLinearF [ ca = ( wp [ 3 ] & mask ) ]
FIELD	143:10	143:39	15	ToLinearF [ ca = ( wp [ 3 ] & mask ) ]
LEAF_NODE	143:10	143:10	16	ToLinearF
LEAF_NODE	143:19	143:19	16	[
EXPR	143:20	143:20	16	ca = ( wp [ 3 ] & mask )
ASSIGN	143:20	143:25	17	ca = ( wp [ 3 ] & mask )
LVAL	143:20	143:20	18	ca
FIELD	143:20	143:20	19	ca
LEAF_NODE	143:20	143:20	20	ca
ASSIGN_OP	143:23	143:23	18	=
LEAF_NODE	143:23	143:23	19	=
RVAL	143:25	143:38	18	( wp [ 3 ] & mask )
LEAF_NODE	143:25	143:25	19	(
FIELD	143:26	143:30	19	wp [ 3 ]
LEAF_NODE	143:26	143:26	20	wp
LEAF_NODE	143:28	143:28	20	[
EXPR	143:29	143:29	20	3
FIELD	143:29	143:29	21	3
LEAF_NODE	143:29	143:29	22	3
LEAF_NODE	143:30	143:30	20	]
LEAF_NODE	143:32	143:32	19	&
FIELD	143:34	143:34	19	mask
LEAF_NODE	143:34	143:34	20	mask
LEAF_NODE	143:38	143:38	19	)
LEAF_NODE	143:39	143:39	16	]
LEAF_NODE	143:40	143:40	12	;
EXPR_STATEMENT	144:5	144:15	11	op [ 0 ] = t0 ;
EXPR	144:5	144:5	12	op [ 0 ] = t0
ASSIGN	144:5	144:13	13	op [ 0 ] = t0
LVAL	144:5	144:5	14	op [ 0 ]
FIELD	144:5	144:9	15	op [ 0 ]
LEAF_NODE	144:5	144:5	16	op
LEAF_NODE	144:7	144:7	16	[
EXPR	144:8	144:8	16	0
FIELD	144:8	144:8	17	0
LEAF_NODE	144:8	144:8	18	0
LEAF_NODE	144:9	144:9	16	]
ASSIGN_OP	144:11	144:11	14	=
LEAF_NODE	144:11	144:11	15	=
RVAL	144:13	144:13	14	t0
FIELD	144:13	144:13	15	t0
LEAF_NODE	144:13	144:13	16	t0
LEAF_NODE	144:15	144:15	12	;
EXPR_STATEMENT	145:5	145:15	11	op [ 1 ] = t1 ;
EXPR	145:5	145:5	12	op [ 1 ] = t1
ASSIGN	145:5	145:13	13	op [ 1 ] = t1
LVAL	145:5	145:5	14	op [ 1 ]
FIELD	145:5	145:9	15	op [ 1 ]
LEAF_NODE	145:5	145:5	16	op
LEAF_NODE	145:7	145:7	16	[
EXPR	145:8	145:8	16	1
FIELD	145:8	145:8	17	1
LEAF_NODE	145:8	145:8	18	1
LEAF_NODE	145:9	145:9	16	]
ASSIGN_OP	145:11	145:11	14	=
LEAF_NODE	145:11	145:11	15	=
RVAL	145:13	145:13	14	t1
FIELD	145:13	145:13	15	t1
LEAF_NODE	145:13	145:13	16	t1
LEAF_NODE	145:15	145:15	12	;
EXPR_STATEMENT	146:5	146:15	11	op [ 2 ] = t2 ;
EXPR	146:5	146:5	12	op [ 2 ] = t2
ASSIGN	146:5	146:13	13	op [ 2 ] = t2
LVAL	146:5	146:5	14	op [ 2 ]
FIELD	146:5	146:9	15	op [ 2 ]
LEAF_NODE	146:5	146:5	16	op
LEAF_NODE	146:7	146:7	16	[
EXPR	146:8	146:8	16	2
FIELD	146:8	146:8	17	2
LEAF_NODE	146:8	146:8	18	2
LEAF_NODE	146:9	146:9	16	]
ASSIGN_OP	146:11	146:11	14	=
LEAF_NODE	146:11	146:11	15	=
RVAL	146:13	146:13	14	t2
FIELD	146:13	146:13	15	t2
LEAF_NODE	146:13	146:13	16	t2
LEAF_NODE	146:15	146:15	12	;
EXPR_STATEMENT	147:5	147:15	11	op [ 3 ] = t3 ;
EXPR	147:5	147:5	12	op [ 3 ] = t3
ASSIGN	147:5	147:13	13	op [ 3 ] = t3
LVAL	147:5	147:5	14	op [ 3 ]
FIELD	147:5	147:9	15	op [ 3 ]
LEAF_NODE	147:5	147:5	16	op
LEAF_NODE	147:7	147:7	16	[
EXPR	147:8	147:8	16	3
FIELD	147:8	147:8	17	3
LEAF_NODE	147:8	147:8	18	3
LEAF_NODE	147:9	147:9	16	]
ASSIGN_OP	147:11	147:11	14	=
LEAF_NODE	147:11	147:11	15	=
RVAL	147:13	147:13	14	t3
FIELD	147:13	147:13	15	t3
LEAF_NODE	147:13	147:13	16	t3
LEAF_NODE	147:15	147:15	12	;
EXPR_STATEMENT	148:5	148:11	11	n -= 4 ;
EXPR	148:5	148:5	12	n -= 4
ASSIGN	148:5	148:10	13	n -= 4
LVAL	148:5	148:5	14	n
FIELD	148:5	148:5	15	n
LEAF_NODE	148:5	148:5	16	n
ASSIGN_OP	148:7	148:7	14	-=
LEAF_NODE	148:7	148:7	15	-=
RVAL	148:10	148:10	14	4
FIELD	148:10	148:10	15	4
LEAF_NODE	148:10	148:10	16	4
LEAF_NODE	148:11	148:11	12	;
ITERATION	149:5	149:19	11	
KEYWORD	149:5	149:5	12	while
LEAF_NODE	149:5	149:5	13	while
LEAF_NODE	149:11	149:11	12	(
CONDITION	149:12	149:12	12	n > 0
EXPR	149:12	149:16	13	n > 0
FIELD	149:12	149:12	14	n
LEAF_NODE	149:12	149:12	15	n
REL_OPERATOR	149:14	149:14	14	>
LEAF_NODE	149:14	149:14	15	>
FIELD	149:16	149:16	14	0
LEAF_NODE	149:16	149:16	15	0
LEAF_NODE	149:17	149:17	12	)
STATEMENTS	149:19	161:5	12	
LEAF_NODE	149:19	149:19	13	{
STATEMENTS	150:2	160:2	13	
EXPR_STATEMENT	150:2	150:9	14	wp += 4 ;
EXPR	150:2	150:2	15	wp += 4
ASSIGN	150:2	150:8	16	wp += 4
LVAL	150:2	150:2	17	wp
FIELD	150:2	150:2	18	wp
LEAF_NODE	150:2	150:2	19	wp
ASSIGN_OP	150:5	150:5	17	+=
LEAF_NODE	150:5	150:5	18	+=
RVAL	150:8	150:8	17	4
FIELD	150:8	150:8	18	4
LEAF_NODE	150:8	150:8	19	4
LEAF_NODE	150:9	150:9	15	;
EXPR_STATEMENT	151:2	151:9	14	op += 4 ;
EXPR	151:2	151:2	15	op += 4
ASSIGN	151:2	151:8	16	op += 4
LVAL	151:2	151:2	17	op
FIELD	151:2	151:2	18	op
LEAF_NODE	151:2	151:2	19	op
ASSIGN_OP	151:5	151:5	17	+=
LEAF_NODE	151:5	151:5	18	+=
RVAL	151:8	151:8	17	4
FIELD	151:8	151:8	18	4
LEAF_NODE	151:8	151:8	19	4
LEAF_NODE	151:9	151:9	15	;
EXPR_STATEMENT	152:2	152:8	14	n -= 4 ;
EXPR	152:2	152:2	15	n -= 4
ASSIGN	152:2	152:7	16	n -= 4
LVAL	152:2	152:2	17	n
FIELD	152:2	152:2	18	n
LEAF_NODE	152:2	152:2	19	n
ASSIGN_OP	152:4	152:4	17	-=
LEAF_NODE	152:4	152:4	18	-=
RVAL	152:7	152:7	17	4
FIELD	152:7	152:7	18	4
LEAF_NODE	152:7	152:7	19	4
LEAF_NODE	152:8	152:8	15	;
EXPR_STATEMENT	153:2	153:38	14	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ] ;
EXPR	153:2	153:2	15	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ]
ASSIGN	153:2	153:7	16	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ]
LVAL	153:2	153:2	17	t0
FIELD	153:2	153:2	18	t0
LEAF_NODE	153:2	153:2	19	t0
ASSIGN_OP	153:5	153:5	17	=
LEAF_NODE	153:5	153:5	18	=
RVAL	153:7	153:7	17	ToLinearF [ ( cr += wp [ 0 ] ) & mask ]
FIELD	153:7	153:37	18	ToLinearF [ ( cr += wp [ 0 ] ) & mask ]
LEAF_NODE	153:7	153:7	19	ToLinearF
LEAF_NODE	153:16	153:16	19	[
EXPR	153:17	153:33	19	( cr += wp [ 0 ] ) & mask
LEAF_NODE	153:17	153:17	20	(
ASSIGN	153:18	153:24	20	cr += wp [ 0 ]
LVAL	153:18	153:18	21	cr
FIELD	153:18	153:18	22	cr
LEAF_NODE	153:18	153:18	23	cr
ASSIGN_OP	153:21	153:21	21	+=
LEAF_NODE	153:21	153:21	22	+=
RVAL	153:24	153:24	21	wp [ 0 ]
FIELD	153:24	153:28	22	wp [ 0 ]
LEAF_NODE	153:24	153:24	23	wp
LEAF_NODE	153:26	153:26	23	[
EXPR	153:27	153:27	23	0
FIELD	153:27	153:27	24	0
LEAF_NODE	153:27	153:27	25	0
LEAF_NODE	153:28	153:28	23	]
LEAF_NODE	153:29	153:29	20	)
LEAF_NODE	153:31	153:31	20	&
FIELD	153:33	153:33	20	mask
LEAF_NODE	153:33	153:33	21	mask
LEAF_NODE	153:37	153:37	19	]
LEAF_NODE	153:38	153:38	15	;
EXPR_STATEMENT	154:2	154:38	14	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ] ;
EXPR	154:2	154:2	15	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ]
ASSIGN	154:2	154:7	16	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ]
LVAL	154:2	154:2	17	t1
FIELD	154:2	154:2	18	t1
LEAF_NODE	154:2	154:2	19	t1
ASSIGN_OP	154:5	154:5	17	=
LEAF_NODE	154:5	154:5	18	=
RVAL	154:7	154:7	17	ToLinearF [ ( cg += wp [ 1 ] ) & mask ]
FIELD	154:7	154:37	18	ToLinearF [ ( cg += wp [ 1 ] ) & mask ]
LEAF_NODE	154:7	154:7	19	ToLinearF
LEAF_NODE	154:16	154:16	19	[
EXPR	154:17	154:33	19	( cg += wp [ 1 ] ) & mask
LEAF_NODE	154:17	154:17	20	(
ASSIGN	154:18	154:24	20	cg += wp [ 1 ]
LVAL	154:18	154:18	21	cg
FIELD	154:18	154:18	22	cg
LEAF_NODE	154:18	154:18	23	cg
ASSIGN_OP	154:21	154:21	21	+=
LEAF_NODE	154:21	154:21	22	+=
RVAL	154:24	154:24	21	wp [ 1 ]
FIELD	154:24	154:28	22	wp [ 1 ]
LEAF_NODE	154:24	154:24	23	wp
LEAF_NODE	154:26	154:26	23	[
EXPR	154:27	154:27	23	1
FIELD	154:27	154:27	24	1
LEAF_NODE	154:27	154:27	25	1
LEAF_NODE	154:28	154:28	23	]
LEAF_NODE	154:29	154:29	20	)
LEAF_NODE	154:31	154:31	20	&
FIELD	154:33	154:33	20	mask
LEAF_NODE	154:33	154:33	21	mask
LEAF_NODE	154:37	154:37	19	]
LEAF_NODE	154:38	154:38	15	;
EXPR_STATEMENT	155:2	155:38	14	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ] ;
EXPR	155:2	155:2	15	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ]
ASSIGN	155:2	155:7	16	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ]
LVAL	155:2	155:2	17	t2
FIELD	155:2	155:2	18	t2
LEAF_NODE	155:2	155:2	19	t2
ASSIGN_OP	155:5	155:5	17	=
LEAF_NODE	155:5	155:5	18	=
RVAL	155:7	155:7	17	ToLinearF [ ( cb += wp [ 2 ] ) & mask ]
FIELD	155:7	155:37	18	ToLinearF [ ( cb += wp [ 2 ] ) & mask ]
LEAF_NODE	155:7	155:7	19	ToLinearF
LEAF_NODE	155:16	155:16	19	[
EXPR	155:17	155:33	19	( cb += wp [ 2 ] ) & mask
LEAF_NODE	155:17	155:17	20	(
ASSIGN	155:18	155:24	20	cb += wp [ 2 ]
LVAL	155:18	155:18	21	cb
FIELD	155:18	155:18	22	cb
LEAF_NODE	155:18	155:18	23	cb
ASSIGN_OP	155:21	155:21	21	+=
LEAF_NODE	155:21	155:21	22	+=
RVAL	155:24	155:24	21	wp [ 2 ]
FIELD	155:24	155:28	22	wp [ 2 ]
LEAF_NODE	155:24	155:24	23	wp
LEAF_NODE	155:26	155:26	23	[
EXPR	155:27	155:27	23	2
FIELD	155:27	155:27	24	2
LEAF_NODE	155:27	155:27	25	2
LEAF_NODE	155:28	155:28	23	]
LEAF_NODE	155:29	155:29	20	)
LEAF_NODE	155:31	155:31	20	&
FIELD	155:33	155:33	20	mask
LEAF_NODE	155:33	155:33	21	mask
LEAF_NODE	155:37	155:37	19	]
LEAF_NODE	155:38	155:38	15	;
EXPR_STATEMENT	156:2	156:38	14	t3 = ToLinearF [ ( ca += wp [ 3 ] ) & mask ] ;
EXPR	156:2	156:2	15	t3 = ToLinearF [ ( ca += wp [ 3 ] ) & mask ]
ASSIGN	156:2	156:7	16	t3 = ToLinearF [ ( ca += wp [ 3 ] ) & mask ]
LVAL	156:2	156:2	17	t3
FIELD	156:2	156:2	18	t3
LEAF_NODE	156:2	156:2	19	t3
ASSIGN_OP	156:5	156:5	17	=
LEAF_NODE	156:5	156:5	18	=
RVAL	156:7	156:7	17	ToLinearF [ ( ca += wp [ 3 ] ) & mask ]
FIELD	156:7	156:37	18	ToLinearF [ ( ca += wp [ 3 ] ) & mask ]
LEAF_NODE	156:7	156:7	19	ToLinearF
LEAF_NODE	156:16	156:16	19	[
EXPR	156:17	156:33	19	( ca += wp [ 3 ] ) & mask
LEAF_NODE	156:17	156:17	20	(
ASSIGN	156:18	156:24	20	ca += wp [ 3 ]
LVAL	156:18	156:18	21	ca
FIELD	156:18	156:18	22	ca
LEAF_NODE	156:18	156:18	23	ca
ASSIGN_OP	156:21	156:21	21	+=
LEAF_NODE	156:21	156:21	22	+=
RVAL	156:24	156:24	21	wp [ 3 ]
FIELD	156:24	156:28	22	wp [ 3 ]
LEAF_NODE	156:24	156:24	23	wp
LEAF_NODE	156:26	156:26	23	[
EXPR	156:27	156:27	23	3
FIELD	156:27	156:27	24	3
LEAF_NODE	156:27	156:27	25	3
LEAF_NODE	156:28	156:28	23	]
LEAF_NODE	156:29	156:29	20	)
LEAF_NODE	156:31	156:31	20	&
FIELD	156:33	156:33	20	mask
LEAF_NODE	156:33	156:33	21	mask
LEAF_NODE	156:37	156:37	19	]
LEAF_NODE	156:38	156:38	15	;
EXPR_STATEMENT	157:2	157:12	14	op [ 0 ] = t0 ;
EXPR	157:2	157:2	15	op [ 0 ] = t0
ASSIGN	157:2	157:10	16	op [ 0 ] = t0
LVAL	157:2	157:2	17	op [ 0 ]
FIELD	157:2	157:6	18	op [ 0 ]
LEAF_NODE	157:2	157:2	19	op
LEAF_NODE	157:4	157:4	19	[
EXPR	157:5	157:5	19	0
FIELD	157:5	157:5	20	0
LEAF_NODE	157:5	157:5	21	0
LEAF_NODE	157:6	157:6	19	]
ASSIGN_OP	157:8	157:8	17	=
LEAF_NODE	157:8	157:8	18	=
RVAL	157:10	157:10	17	t0
FIELD	157:10	157:10	18	t0
LEAF_NODE	157:10	157:10	19	t0
LEAF_NODE	157:12	157:12	15	;
EXPR_STATEMENT	158:2	158:12	14	op [ 1 ] = t1 ;
EXPR	158:2	158:2	15	op [ 1 ] = t1
ASSIGN	158:2	158:10	16	op [ 1 ] = t1
LVAL	158:2	158:2	17	op [ 1 ]
FIELD	158:2	158:6	18	op [ 1 ]
LEAF_NODE	158:2	158:2	19	op
LEAF_NODE	158:4	158:4	19	[
EXPR	158:5	158:5	19	1
FIELD	158:5	158:5	20	1
LEAF_NODE	158:5	158:5	21	1
LEAF_NODE	158:6	158:6	19	]
ASSIGN_OP	158:8	158:8	17	=
LEAF_NODE	158:8	158:8	18	=
RVAL	158:10	158:10	17	t1
FIELD	158:10	158:10	18	t1
LEAF_NODE	158:10	158:10	19	t1
LEAF_NODE	158:12	158:12	15	;
EXPR_STATEMENT	159:2	159:12	14	op [ 2 ] = t2 ;
EXPR	159:2	159:2	15	op [ 2 ] = t2
ASSIGN	159:2	159:10	16	op [ 2 ] = t2
LVAL	159:2	159:2	17	op [ 2 ]
FIELD	159:2	159:6	18	op [ 2 ]
LEAF_NODE	159:2	159:2	19	op
LEAF_NODE	159:4	159:4	19	[
EXPR	159:5	159:5	19	2
FIELD	159:5	159:5	20	2
LEAF_NODE	159:5	159:5	21	2
LEAF_NODE	159:6	159:6	19	]
ASSIGN_OP	159:8	159:8	17	=
LEAF_NODE	159:8	159:8	18	=
RVAL	159:10	159:10	17	t2
FIELD	159:10	159:10	18	t2
LEAF_NODE	159:10	159:10	19	t2
LEAF_NODE	159:12	159:12	15	;
EXPR_STATEMENT	160:2	160:12	14	op [ 3 ] = t3 ;
EXPR	160:2	160:2	15	op [ 3 ] = t3
ASSIGN	160:2	160:10	16	op [ 3 ] = t3
LVAL	160:2	160:2	17	op [ 3 ]
FIELD	160:2	160:6	18	op [ 3 ]
LEAF_NODE	160:2	160:2	19	op
LEAF_NODE	160:4	160:4	19	[
EXPR	160:5	160:5	19	3
FIELD	160:5	160:5	20	3
LEAF_NODE	160:5	160:5	21	3
LEAF_NODE	160:6	160:6	19	]
ASSIGN_OP	160:8	160:8	17	=
LEAF_NODE	160:8	160:8	18	=
RVAL	160:10	160:10	17	t3
FIELD	160:10	160:10	18	t3
LEAF_NODE	160:10	160:10	19	t3
LEAF_NODE	160:12	160:12	15	;
LEAF_NODE	161:5	161:5	13	}
LEAF_NODE	162:1	162:1	10	}
SELECTION	162:3	162:8	6	
KEYWORD	162:3	162:3	7	else
LEAF_NODE	162:3	162:3	8	else
STATEMENTS	162:8	170:1	7	
LEAF_NODE	162:8	162:8	8	{
STATEMENTS	163:5	165:5	8	
LEAF_NODE	163:5	163:5	9	REPEAT
LEAF_NODE	163:11	163:11	9	(
EXPR_STATEMENT	163:12	163:45	9	stride , * op = ToLinearF [ * wp & mask ] ;
EXPR	163:12	163:20	10	stride , * op = ToLinearF [ * wp & mask ]
FIELD	163:12	163:12	11	stride
LEAF_NODE	163:12	163:12	12	stride
LEAF_NODE	163:18	163:18	11	,
ASSIGN	163:20	163:26	11	* op = ToLinearF [ * wp & mask ]
LVAL	163:20	163:20	12	* op
UNARY_EXPR	163:20	163:21	13	* op
UNARY_OPERATOR	163:20	163:20	14	*
LEAF_NODE	163:20	163:20	15	*
FIELD	163:21	163:21	14	op
LEAF_NODE	163:21	163:21	15	op
ASSIGN_OP	163:24	163:24	12	=
LEAF_NODE	163:24	163:24	13	=
RVAL	163:26	163:26	12	ToLinearF [ * wp & mask ]
FIELD	163:26	163:44	13	ToLinearF [ * wp & mask ]
LEAF_NODE	163:26	163:26	14	ToLinearF
LEAF_NODE	163:35	163:35	14	[
EXPR	163:36	163:40	14	* wp & mask
UNARY_EXPR	163:36	163:37	15	* wp
UNARY_OPERATOR	163:36	163:36	16	*
LEAF_NODE	163:36	163:36	17	*
FIELD	163:37	163:37	16	wp
LEAF_NODE	163:37	163:37	17	wp
LEAF_NODE	163:39	163:39	15	&
FIELD	163:40	163:40	15	mask
LEAF_NODE	163:40	163:40	16	mask
LEAF_NODE	163:44	163:44	14	]
LEAF_NODE	163:45	163:45	10	;
EXPR_STATEMENT	163:47	163:51	9	wp ++ ;
EXPR	163:47	163:47	10	wp ++
FIELD	163:47	163:49	11	wp ++
LEAF_NODE	163:47	163:47	12	wp
LEAF_NODE	163:49	163:49	12	++
LEAF_NODE	163:51	163:51	10	;
LEAF_NODE	163:53	163:53	9	op
LEAF_NODE	163:55	163:55	9	++
LEAF_NODE	163:57	163:57	9	)
EXPR_STATEMENT	164:5	164:16	9	n -= stride ;
EXPR	164:5	164:5	10	n -= stride
ASSIGN	164:5	164:10	11	n -= stride
LVAL	164:5	164:5	12	n
FIELD	164:5	164:5	13	n
LEAF_NODE	164:5	164:5	14	n
ASSIGN_OP	164:7	164:7	12	-=
LEAF_NODE	164:7	164:7	13	-=
RVAL	164:10	164:10	12	stride
FIELD	164:10	164:10	13	stride
LEAF_NODE	164:10	164:10	14	stride
LEAF_NODE	164:16	164:16	10	;
ITERATION	165:5	165:19	9	
KEYWORD	165:5	165:5	10	while
LEAF_NODE	165:5	165:5	11	while
LEAF_NODE	165:11	165:11	10	(
CONDITION	165:12	165:12	10	n > 0
EXPR	165:12	165:16	11	n > 0
FIELD	165:12	165:12	12	n
LEAF_NODE	165:12	165:12	13	n
REL_OPERATOR	165:14	165:14	12	>
LEAF_NODE	165:14	165:14	13	>
FIELD	165:16	165:16	12	0
LEAF_NODE	165:16	165:16	13	0
LEAF_NODE	165:17	165:17	10	)
STATEMENTS	165:19	169:5	10	
LEAF_NODE	165:19	165:19	11	{
STATEMENTS	166:2	168:2	11	
LEAF_NODE	166:2	166:2	12	REPEAT
LEAF_NODE	166:8	166:8	12	(
EXPR_STATEMENT	166:9	167:23	12	stride , wp [ stride ] += * wp ;
EXPR	166:9	167:6	13	stride , wp [ stride ] += * wp
FIELD	166:9	166:9	14	stride
LEAF_NODE	166:9	166:9	15	stride
LEAF_NODE	166:15	166:15	14	,
ASSIGN	167:6	167:20	14	wp [ stride ] += * wp
LVAL	167:6	167:6	15	wp [ stride ]
FIELD	167:6	167:15	16	wp [ stride ]
LEAF_NODE	167:6	167:6	17	wp
LEAF_NODE	167:8	167:8	17	[
EXPR	167:9	167:9	17	stride
FIELD	167:9	167:9	18	stride
LEAF_NODE	167:9	167:9	19	stride
LEAF_NODE	167:15	167:15	17	]
ASSIGN_OP	167:17	167:17	15	+=
LEAF_NODE	167:17	167:17	16	+=
RVAL	167:20	167:20	15	* wp
UNARY_EXPR	167:20	167:21	16	* wp
UNARY_OPERATOR	167:20	167:20	17	*
LEAF_NODE	167:20	167:20	18	*
FIELD	167:21	167:21	17	wp
LEAF_NODE	167:21	167:21	18	wp
LEAF_NODE	167:23	167:23	13	;
EXPR_STATEMENT	167:25	167:50	12	* op = ToLinearF [ * wp & mask ] ;
EXPR	167:25	167:25	13	* op = ToLinearF [ * wp & mask ]
ASSIGN	167:25	167:31	14	* op = ToLinearF [ * wp & mask ]
LVAL	167:25	167:25	15	* op
UNARY_EXPR	167:25	167:26	16	* op
UNARY_OPERATOR	167:25	167:25	17	*
LEAF_NODE	167:25	167:25	18	*
FIELD	167:26	167:26	17	op
LEAF_NODE	167:26	167:26	18	op
ASSIGN_OP	167:29	167:29	15	=
LEAF_NODE	167:29	167:29	16	=
RVAL	167:31	167:31	15	ToLinearF [ * wp & mask ]
FIELD	167:31	167:49	16	ToLinearF [ * wp & mask ]
LEAF_NODE	167:31	167:31	17	ToLinearF
LEAF_NODE	167:40	167:40	17	[
EXPR	167:41	167:45	17	* wp & mask
UNARY_EXPR	167:41	167:42	18	* wp
UNARY_OPERATOR	167:41	167:41	19	*
LEAF_NODE	167:41	167:41	20	*
FIELD	167:42	167:42	19	wp
LEAF_NODE	167:42	167:42	20	wp
LEAF_NODE	167:44	167:44	18	&
FIELD	167:45	167:45	18	mask
LEAF_NODE	167:45	167:45	19	mask
LEAF_NODE	167:49	167:49	17	]
LEAF_NODE	167:50	167:50	13	;
EXPR_STATEMENT	167:52	167:56	12	wp ++ ;
EXPR	167:52	167:52	13	wp ++
FIELD	167:52	167:54	14	wp ++
LEAF_NODE	167:52	167:52	15	wp
LEAF_NODE	167:54	167:54	15	++
LEAF_NODE	167:56	167:56	13	;
LEAF_NODE	167:58	167:58	12	op
LEAF_NODE	167:60	167:60	12	++
LEAF_NODE	167:62	167:62	12	)
EXPR_STATEMENT	168:2	168:13	12	n -= stride ;
EXPR	168:2	168:2	13	n -= stride
ASSIGN	168:2	168:7	14	n -= stride
LVAL	168:2	168:2	15	n
FIELD	168:2	168:2	16	n
LEAF_NODE	168:2	168:2	17	n
ASSIGN_OP	168:4	168:4	15	-=
LEAF_NODE	168:4	168:4	16	-=
RVAL	168:7	168:7	15	stride
FIELD	168:7	168:7	16	stride
LEAF_NODE	168:7	168:7	17	stride
LEAF_NODE	168:13	168:13	13	;
LEAF_NODE	169:5	169:5	11	}
LEAF_NODE	170:1	170:1	8	}
LEAF_NODE	171:4	171:4	5	}
LEAF_NODE	172:0	172:0	2	}
FUNCTION_DEF	174:0	240:0	1	
RETURN_TYPE	174:0	174:7	2	static void
LEAF_NODE	174:0	174:0	3	static
TYPE_NAME	174:7	174:7	3	void
LEAF_NODE	174:7	174:7	4	void
FUNCTION_NAME	175:0	175:0	2	horizontalAccumulate12
LEAF_NODE	175:0	175:0	3	horizontalAccumulate12
PARAMETER_LIST	175:22	176:17	2	( uint16 * wp , int n , int stride , int16 * op , float * ToLinearF )
LEAF_NODE	175:22	175:22	3	(
PARAMETER_DECL	175:23	175:31	3	uint16 * wp
TYPE	175:23	175:30	4	uint16 *
TYPE_NAME	175:23	175:23	5	uint16
LEAF_NODE	175:23	175:23	6	uint16
POINTER	175:30	175:30	5	*
LEAF_NODE	175:30	175:30	6	*
NAME	175:31	175:31	4	wp
LEAF_NODE	175:31	175:31	5	wp
LEAF_NODE	175:33	175:33	3	,
PARAMETER_DECL	175:35	175:39	3	int n
TYPE	175:35	175:35	4	int
TYPE_NAME	175:35	175:35	5	int
LEAF_NODE	175:35	175:35	6	int
NAME	175:39	175:39	4	n
LEAF_NODE	175:39	175:39	5	n
LEAF_NODE	175:40	175:40	3	,
PARAMETER_DECL	175:42	175:46	3	int stride
TYPE	175:42	175:42	4	int
TYPE_NAME	175:42	175:42	5	int
LEAF_NODE	175:42	175:42	6	int
NAME	175:46	175:46	4	stride
LEAF_NODE	175:46	175:46	5	stride
LEAF_NODE	175:52	175:52	3	,
PARAMETER_DECL	175:54	175:61	3	int16 * op
TYPE	175:54	175:60	4	int16 *
TYPE_NAME	175:54	175:54	5	int16
LEAF_NODE	175:54	175:54	6	int16
POINTER	175:60	175:60	5	*
LEAF_NODE	175:60	175:60	6	*
NAME	175:61	175:61	4	op
LEAF_NODE	175:61	175:61	5	op
LEAF_NODE	175:63	175:63	3	,
PARAMETER_DECL	176:1	176:8	3	float * ToLinearF
TYPE	176:1	176:7	4	float *
TYPE_NAME	176:1	176:1	5	float
LEAF_NODE	176:1	176:1	6	float
POINTER	176:7	176:7	5	*
LEAF_NODE	176:7	176:7	6	*
NAME	176:8	176:8	4	ToLinearF
LEAF_NODE	176:8	176:8	5	ToLinearF
LEAF_NODE	176:17	176:17	3	)
LEAF_NODE	177:0	177:0	2	{
STATEMENTS	178:4	184:4	2	
LEAF_NODE	178:4	178:4	3	register
SIMPLE_DECL	178:13	178:47	3	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask ;
INIT_DECL_LIST	178:13	178:13	4	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	178:13	178:27	5	unsigned int cr
TYPE	178:13	178:13	6	unsigned int
TYPE_NAME	178:13	178:22	7	unsigned int
LEAF_NODE	178:13	178:13	8	unsigned
LEAF_NODE	178:22	178:22	8	int
NAME	178:27	178:27	6	cr
LEAF_NODE	178:27	178:27	7	cr
LEAF_NODE	178:29	178:29	5	,
INIT_DECL_LIST	178:13	178:13	5	unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	178:13	178:31	6	unsigned int cg
TYPE	178:13	178:13	7	unsigned int
TYPE_NAME	178:13	178:22	8	unsigned int
LEAF_NODE	178:13	178:13	9	unsigned
LEAF_NODE	178:22	178:22	9	int
NAME	178:31	178:31	7	cg
LEAF_NODE	178:31	178:31	8	cg
LEAF_NODE	178:33	178:33	6	,
INIT_DECL_LIST	178:13	178:13	6	unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	178:13	178:35	7	unsigned int cb
TYPE	178:13	178:13	8	unsigned int
TYPE_NAME	178:13	178:22	9	unsigned int
LEAF_NODE	178:13	178:13	10	unsigned
LEAF_NODE	178:22	178:22	10	int
NAME	178:35	178:35	8	cb
LEAF_NODE	178:35	178:35	9	cb
LEAF_NODE	178:37	178:37	7	,
INIT_DECL_LIST	178:13	178:13	7	unsigned int ca , unsigned int mask
VAR_DECL	178:13	178:39	8	unsigned int ca
TYPE	178:13	178:13	9	unsigned int
TYPE_NAME	178:13	178:22	10	unsigned int
LEAF_NODE	178:13	178:13	11	unsigned
LEAF_NODE	178:22	178:22	11	int
NAME	178:39	178:39	9	ca
LEAF_NODE	178:39	178:39	10	ca
LEAF_NODE	178:41	178:41	8	,
VAR_DECL	178:13	178:43	8	unsigned int mask
TYPE	178:13	178:13	9	unsigned int
TYPE_NAME	178:13	178:22	10	unsigned int
LEAF_NODE	178:13	178:13	11	unsigned
LEAF_NODE	178:22	178:22	11	int
NAME	178:43	178:43	9	mask
LEAF_NODE	178:43	178:43	10	mask
LEAF_NODE	178:47	178:47	4	;
LEAF_NODE	179:4	179:4	3	register
SIMPLE_DECL	179:13	179:34	3	float t0 , float t1 , float t2 , float t3 ;
INIT_DECL_LIST	179:13	179:13	4	float t0 , float t1 , float t2 , float t3
VAR_DECL	179:13	179:20	5	float t0
TYPE	179:13	179:13	6	float
TYPE_NAME	179:13	179:13	7	float
LEAF_NODE	179:13	179:13	8	float
NAME	179:20	179:20	6	t0
LEAF_NODE	179:20	179:20	7	t0
LEAF_NODE	179:22	179:22	5	,
INIT_DECL_LIST	179:13	179:13	5	float t1 , float t2 , float t3
VAR_DECL	179:13	179:24	6	float t1
TYPE	179:13	179:13	7	float
TYPE_NAME	179:13	179:13	8	float
LEAF_NODE	179:13	179:13	9	float
NAME	179:24	179:24	7	t1
LEAF_NODE	179:24	179:24	8	t1
LEAF_NODE	179:26	179:26	6	,
INIT_DECL_LIST	179:13	179:13	6	float t2 , float t3
VAR_DECL	179:13	179:28	7	float t2
TYPE	179:13	179:13	8	float
TYPE_NAME	179:13	179:13	9	float
LEAF_NODE	179:13	179:13	10	float
NAME	179:28	179:28	8	t2
LEAF_NODE	179:28	179:28	9	t2
LEAF_NODE	179:30	179:30	7	,
VAR_DECL	179:13	179:32	7	float t3
TYPE	179:13	179:13	8	float
TYPE_NAME	179:13	179:13	9	float
LEAF_NODE	179:13	179:13	10	float
NAME	179:32	179:32	8	t3
LEAF_NODE	179:32	179:32	9	t3
LEAF_NODE	179:34	179:34	4	;
SELECTION	184:4	184:21	3	
KEYWORD	184:4	184:4	4	if
LEAF_NODE	184:4	184:4	5	if
LEAF_NODE	184:7	184:7	4	(
CONDITION	184:8	184:8	4	n >= stride
EXPR	184:8	184:13	5	n >= stride
FIELD	184:8	184:8	6	n
LEAF_NODE	184:8	184:8	7	n
REL_OPERATOR	184:10	184:10	6	>=
LEAF_NODE	184:10	184:10	7	>=
FIELD	184:13	184:13	6	stride
LEAF_NODE	184:13	184:13	7	stride
LEAF_NODE	184:19	184:19	4	)
STATEMENTS	184:21	239:4	4	
LEAF_NODE	184:21	184:21	5	{
STATEMENTS	185:1	228:3	5	
EXPR_STATEMENT	185:1	185:17	6	mask = CODE_MASK ;
EXPR	185:1	185:1	7	mask = CODE_MASK
ASSIGN	185:1	185:8	8	mask = CODE_MASK
LVAL	185:1	185:1	9	mask
FIELD	185:1	185:1	10	mask
LEAF_NODE	185:1	185:1	11	mask
ASSIGN_OP	185:6	185:6	9	=
LEAF_NODE	185:6	185:6	10	=
RVAL	185:8	185:8	9	CODE_MASK
FIELD	185:8	185:8	10	CODE_MASK
LEAF_NODE	185:8	185:8	11	CODE_MASK
LEAF_NODE	185:17	185:17	7	;
SELECTION	186:1	186:18	6	
KEYWORD	186:1	186:1	7	if
LEAF_NODE	186:1	186:1	8	if
LEAF_NODE	186:4	186:4	7	(
CONDITION	186:5	186:5	7	stride == 3
EXPR	186:5	186:15	8	stride == 3
FIELD	186:5	186:5	9	stride
LEAF_NODE	186:5	186:5	10	stride
EQ_OPERATOR	186:12	186:12	9	==
LEAF_NODE	186:12	186:12	10	==
FIELD	186:15	186:15	9	3
LEAF_NODE	186:15	186:15	10	3
LEAF_NODE	186:16	186:16	7	)
STATEMENTS	186:18	205:1	7	
LEAF_NODE	186:18	186:18	8	{
STATEMENTS	187:5	194:5	8	
EXPR_STATEMENT	187:5	187:50	9	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ] * SCALE12 ;
EXPR	187:5	187:5	10	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ] * SCALE12
ASSIGN	187:5	187:10	11	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ] * SCALE12
LVAL	187:5	187:5	12	t0
FIELD	187:5	187:5	13	t0
LEAF_NODE	187:5	187:5	14	t0
ASSIGN_OP	187:8	187:8	12	=
LEAF_NODE	187:8	187:8	13	=
RVAL	187:10	187:43	12	ToLinearF [ cr = ( wp [ 0 ] & mask ) ] * SCALE12
FIELD	187:10	187:39	13	ToLinearF [ cr = ( wp [ 0 ] & mask ) ]
LEAF_NODE	187:10	187:10	14	ToLinearF
LEAF_NODE	187:19	187:19	14	[
EXPR	187:20	187:20	14	cr = ( wp [ 0 ] & mask )
ASSIGN	187:20	187:25	15	cr = ( wp [ 0 ] & mask )
LVAL	187:20	187:20	16	cr
FIELD	187:20	187:20	17	cr
LEAF_NODE	187:20	187:20	18	cr
ASSIGN_OP	187:23	187:23	16	=
LEAF_NODE	187:23	187:23	17	=
RVAL	187:25	187:38	16	( wp [ 0 ] & mask )
LEAF_NODE	187:25	187:25	17	(
FIELD	187:26	187:30	17	wp [ 0 ]
LEAF_NODE	187:26	187:26	18	wp
LEAF_NODE	187:28	187:28	18	[
EXPR	187:29	187:29	18	0
FIELD	187:29	187:29	19	0
LEAF_NODE	187:29	187:29	20	0
LEAF_NODE	187:30	187:30	18	]
LEAF_NODE	187:32	187:32	17	&
FIELD	187:34	187:34	17	mask
LEAF_NODE	187:34	187:34	18	mask
LEAF_NODE	187:38	187:38	17	)
LEAF_NODE	187:39	187:39	14	]
LEAF_NODE	187:41	187:41	13	*
FIELD	187:43	187:43	13	SCALE12
LEAF_NODE	187:43	187:43	14	SCALE12
LEAF_NODE	187:50	187:50	10	;
EXPR_STATEMENT	188:5	188:50	9	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ] * SCALE12 ;
EXPR	188:5	188:5	10	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ] * SCALE12
ASSIGN	188:5	188:10	11	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ] * SCALE12
LVAL	188:5	188:5	12	t1
FIELD	188:5	188:5	13	t1
LEAF_NODE	188:5	188:5	14	t1
ASSIGN_OP	188:8	188:8	12	=
LEAF_NODE	188:8	188:8	13	=
RVAL	188:10	188:43	12	ToLinearF [ cg = ( wp [ 1 ] & mask ) ] * SCALE12
FIELD	188:10	188:39	13	ToLinearF [ cg = ( wp [ 1 ] & mask ) ]
LEAF_NODE	188:10	188:10	14	ToLinearF
LEAF_NODE	188:19	188:19	14	[
EXPR	188:20	188:20	14	cg = ( wp [ 1 ] & mask )
ASSIGN	188:20	188:25	15	cg = ( wp [ 1 ] & mask )
LVAL	188:20	188:20	16	cg
FIELD	188:20	188:20	17	cg
LEAF_NODE	188:20	188:20	18	cg
ASSIGN_OP	188:23	188:23	16	=
LEAF_NODE	188:23	188:23	17	=
RVAL	188:25	188:38	16	( wp [ 1 ] & mask )
LEAF_NODE	188:25	188:25	17	(
FIELD	188:26	188:30	17	wp [ 1 ]
LEAF_NODE	188:26	188:26	18	wp
LEAF_NODE	188:28	188:28	18	[
EXPR	188:29	188:29	18	1
FIELD	188:29	188:29	19	1
LEAF_NODE	188:29	188:29	20	1
LEAF_NODE	188:30	188:30	18	]
LEAF_NODE	188:32	188:32	17	&
FIELD	188:34	188:34	17	mask
LEAF_NODE	188:34	188:34	18	mask
LEAF_NODE	188:38	188:38	17	)
LEAF_NODE	188:39	188:39	14	]
LEAF_NODE	188:41	188:41	13	*
FIELD	188:43	188:43	13	SCALE12
LEAF_NODE	188:43	188:43	14	SCALE12
LEAF_NODE	188:50	188:50	10	;
EXPR_STATEMENT	189:5	189:50	9	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ] * SCALE12 ;
EXPR	189:5	189:5	10	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ] * SCALE12
ASSIGN	189:5	189:10	11	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ] * SCALE12
LVAL	189:5	189:5	12	t2
FIELD	189:5	189:5	13	t2
LEAF_NODE	189:5	189:5	14	t2
ASSIGN_OP	189:8	189:8	12	=
LEAF_NODE	189:8	189:8	13	=
RVAL	189:10	189:43	12	ToLinearF [ cb = ( wp [ 2 ] & mask ) ] * SCALE12
FIELD	189:10	189:39	13	ToLinearF [ cb = ( wp [ 2 ] & mask ) ]
LEAF_NODE	189:10	189:10	14	ToLinearF
LEAF_NODE	189:19	189:19	14	[
EXPR	189:20	189:20	14	cb = ( wp [ 2 ] & mask )
ASSIGN	189:20	189:25	15	cb = ( wp [ 2 ] & mask )
LVAL	189:20	189:20	16	cb
FIELD	189:20	189:20	17	cb
LEAF_NODE	189:20	189:20	18	cb
ASSIGN_OP	189:23	189:23	16	=
LEAF_NODE	189:23	189:23	17	=
RVAL	189:25	189:38	16	( wp [ 2 ] & mask )
LEAF_NODE	189:25	189:25	17	(
FIELD	189:26	189:30	17	wp [ 2 ]
LEAF_NODE	189:26	189:26	18	wp
LEAF_NODE	189:28	189:28	18	[
EXPR	189:29	189:29	18	2
FIELD	189:29	189:29	19	2
LEAF_NODE	189:29	189:29	20	2
LEAF_NODE	189:30	189:30	18	]
LEAF_NODE	189:32	189:32	17	&
FIELD	189:34	189:34	17	mask
LEAF_NODE	189:34	189:34	18	mask
LEAF_NODE	189:38	189:38	17	)
LEAF_NODE	189:39	189:39	14	]
LEAF_NODE	189:41	189:41	13	*
FIELD	189:43	189:43	13	SCALE12
LEAF_NODE	189:43	189:43	14	SCALE12
LEAF_NODE	189:50	189:50	10	;
EXPR_STATEMENT	190:5	190:24	9	op [ 0 ] = CLAMP12 ( t0 ) ;
EXPR	190:5	190:5	10	op [ 0 ] = CLAMP12 ( t0 )
ASSIGN	190:5	190:13	11	op [ 0 ] = CLAMP12 ( t0 )
LVAL	190:5	190:5	12	op [ 0 ]
FIELD	190:5	190:9	13	op [ 0 ]
LEAF_NODE	190:5	190:5	14	op
LEAF_NODE	190:7	190:7	14	[
EXPR	190:8	190:8	14	0
FIELD	190:8	190:8	15	0
LEAF_NODE	190:8	190:8	16	0
LEAF_NODE	190:9	190:9	14	]
ASSIGN_OP	190:11	190:11	12	=
LEAF_NODE	190:11	190:11	13	=
RVAL	190:13	190:13	12	CLAMP12 ( t0 )
FUNCTION_CALL	190:13	190:23	13	CLAMP12 ( t0 )
CALLEE	190:13	190:13	14	CLAMP12
LEAF_NODE	190:13	190:13	15	CLAMP12
LEAF_NODE	190:20	190:20	14	(
ARGUMENT	190:21	190:21	14	t0
FIELD	190:21	190:21	15	t0
LEAF_NODE	190:21	190:21	16	t0
LEAF_NODE	190:23	190:23	14	)
LEAF_NODE	190:24	190:24	10	;
EXPR_STATEMENT	191:5	191:24	9	op [ 1 ] = CLAMP12 ( t1 ) ;
EXPR	191:5	191:5	10	op [ 1 ] = CLAMP12 ( t1 )
ASSIGN	191:5	191:13	11	op [ 1 ] = CLAMP12 ( t1 )
LVAL	191:5	191:5	12	op [ 1 ]
FIELD	191:5	191:9	13	op [ 1 ]
LEAF_NODE	191:5	191:5	14	op
LEAF_NODE	191:7	191:7	14	[
EXPR	191:8	191:8	14	1
FIELD	191:8	191:8	15	1
LEAF_NODE	191:8	191:8	16	1
LEAF_NODE	191:9	191:9	14	]
ASSIGN_OP	191:11	191:11	12	=
LEAF_NODE	191:11	191:11	13	=
RVAL	191:13	191:13	12	CLAMP12 ( t1 )
FUNCTION_CALL	191:13	191:23	13	CLAMP12 ( t1 )
CALLEE	191:13	191:13	14	CLAMP12
LEAF_NODE	191:13	191:13	15	CLAMP12
LEAF_NODE	191:20	191:20	14	(
ARGUMENT	191:21	191:21	14	t1
FIELD	191:21	191:21	15	t1
LEAF_NODE	191:21	191:21	16	t1
LEAF_NODE	191:23	191:23	14	)
LEAF_NODE	191:24	191:24	10	;
EXPR_STATEMENT	192:5	192:24	9	op [ 2 ] = CLAMP12 ( t2 ) ;
EXPR	192:5	192:5	10	op [ 2 ] = CLAMP12 ( t2 )
ASSIGN	192:5	192:13	11	op [ 2 ] = CLAMP12 ( t2 )
LVAL	192:5	192:5	12	op [ 2 ]
FIELD	192:5	192:9	13	op [ 2 ]
LEAF_NODE	192:5	192:5	14	op
LEAF_NODE	192:7	192:7	14	[
EXPR	192:8	192:8	14	2
FIELD	192:8	192:8	15	2
LEAF_NODE	192:8	192:8	16	2
LEAF_NODE	192:9	192:9	14	]
ASSIGN_OP	192:11	192:11	12	=
LEAF_NODE	192:11	192:11	13	=
RVAL	192:13	192:13	12	CLAMP12 ( t2 )
FUNCTION_CALL	192:13	192:23	13	CLAMP12 ( t2 )
CALLEE	192:13	192:13	14	CLAMP12
LEAF_NODE	192:13	192:13	15	CLAMP12
LEAF_NODE	192:20	192:20	14	(
ARGUMENT	192:21	192:21	14	t2
FIELD	192:21	192:21	15	t2
LEAF_NODE	192:21	192:21	16	t2
LEAF_NODE	192:23	192:23	14	)
LEAF_NODE	192:24	192:24	10	;
EXPR_STATEMENT	193:5	193:11	9	n -= 3 ;
EXPR	193:5	193:5	10	n -= 3
ASSIGN	193:5	193:10	11	n -= 3
LVAL	193:5	193:5	12	n
FIELD	193:5	193:5	13	n
LEAF_NODE	193:5	193:5	14	n
ASSIGN_OP	193:7	193:7	12	-=
LEAF_NODE	193:7	193:7	13	-=
RVAL	193:10	193:10	12	3
FIELD	193:10	193:10	13	3
LEAF_NODE	193:10	193:10	14	3
LEAF_NODE	193:11	193:11	10	;
ITERATION	194:5	194:19	9	
KEYWORD	194:5	194:5	10	while
LEAF_NODE	194:5	194:5	11	while
LEAF_NODE	194:11	194:11	10	(
CONDITION	194:12	194:12	10	n > 0
EXPR	194:12	194:16	11	n > 0
FIELD	194:12	194:12	12	n
LEAF_NODE	194:12	194:12	13	n
REL_OPERATOR	194:14	194:14	12	>
LEAF_NODE	194:14	194:14	13	>
FIELD	194:16	194:16	12	0
LEAF_NODE	194:16	194:16	13	0
LEAF_NODE	194:17	194:17	10	)
STATEMENTS	194:19	204:5	10	
LEAF_NODE	194:19	194:19	11	{
STATEMENTS	195:2	203:2	11	
EXPR_STATEMENT	195:2	195:9	12	wp += 3 ;
EXPR	195:2	195:2	13	wp += 3
ASSIGN	195:2	195:8	14	wp += 3
LVAL	195:2	195:2	15	wp
FIELD	195:2	195:2	16	wp
LEAF_NODE	195:2	195:2	17	wp
ASSIGN_OP	195:5	195:5	15	+=
LEAF_NODE	195:5	195:5	16	+=
RVAL	195:8	195:8	15	3
FIELD	195:8	195:8	16	3
LEAF_NODE	195:8	195:8	17	3
LEAF_NODE	195:9	195:9	13	;
EXPR_STATEMENT	196:2	196:9	12	op += 3 ;
EXPR	196:2	196:2	13	op += 3
ASSIGN	196:2	196:8	14	op += 3
LVAL	196:2	196:2	15	op
FIELD	196:2	196:2	16	op
LEAF_NODE	196:2	196:2	17	op
ASSIGN_OP	196:5	196:5	15	+=
LEAF_NODE	196:5	196:5	16	+=
RVAL	196:8	196:8	15	3
FIELD	196:8	196:8	16	3
LEAF_NODE	196:8	196:8	17	3
LEAF_NODE	196:9	196:9	13	;
EXPR_STATEMENT	197:2	197:8	12	n -= 3 ;
EXPR	197:2	197:2	13	n -= 3
ASSIGN	197:2	197:7	14	n -= 3
LVAL	197:2	197:2	15	n
FIELD	197:2	197:2	16	n
LEAF_NODE	197:2	197:2	17	n
ASSIGN_OP	197:4	197:4	15	-=
LEAF_NODE	197:4	197:4	16	-=
RVAL	197:7	197:7	15	3
FIELD	197:7	197:7	16	3
LEAF_NODE	197:7	197:7	17	3
LEAF_NODE	197:8	197:8	13	;
EXPR_STATEMENT	198:2	198:48	12	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ] * SCALE12 ;
EXPR	198:2	198:2	13	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ] * SCALE12
ASSIGN	198:2	198:7	14	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ] * SCALE12
LVAL	198:2	198:2	15	t0
FIELD	198:2	198:2	16	t0
LEAF_NODE	198:2	198:2	17	t0
ASSIGN_OP	198:5	198:5	15	=
LEAF_NODE	198:5	198:5	16	=
RVAL	198:7	198:41	15	ToLinearF [ ( cr += wp [ 0 ] ) & mask ] * SCALE12
FIELD	198:7	198:37	16	ToLinearF [ ( cr += wp [ 0 ] ) & mask ]
LEAF_NODE	198:7	198:7	17	ToLinearF
LEAF_NODE	198:16	198:16	17	[
EXPR	198:17	198:33	17	( cr += wp [ 0 ] ) & mask
LEAF_NODE	198:17	198:17	18	(
ASSIGN	198:18	198:24	18	cr += wp [ 0 ]
LVAL	198:18	198:18	19	cr
FIELD	198:18	198:18	20	cr
LEAF_NODE	198:18	198:18	21	cr
ASSIGN_OP	198:21	198:21	19	+=
LEAF_NODE	198:21	198:21	20	+=
RVAL	198:24	198:24	19	wp [ 0 ]
FIELD	198:24	198:28	20	wp [ 0 ]
LEAF_NODE	198:24	198:24	21	wp
LEAF_NODE	198:26	198:26	21	[
EXPR	198:27	198:27	21	0
FIELD	198:27	198:27	22	0
LEAF_NODE	198:27	198:27	23	0
LEAF_NODE	198:28	198:28	21	]
LEAF_NODE	198:29	198:29	18	)
LEAF_NODE	198:31	198:31	18	&
FIELD	198:33	198:33	18	mask
LEAF_NODE	198:33	198:33	19	mask
LEAF_NODE	198:37	198:37	17	]
LEAF_NODE	198:39	198:39	16	*
FIELD	198:41	198:41	16	SCALE12
LEAF_NODE	198:41	198:41	17	SCALE12
LEAF_NODE	198:48	198:48	13	;
EXPR_STATEMENT	199:2	199:48	12	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ] * SCALE12 ;
EXPR	199:2	199:2	13	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ] * SCALE12
ASSIGN	199:2	199:7	14	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ] * SCALE12
LVAL	199:2	199:2	15	t1
FIELD	199:2	199:2	16	t1
LEAF_NODE	199:2	199:2	17	t1
ASSIGN_OP	199:5	199:5	15	=
LEAF_NODE	199:5	199:5	16	=
RVAL	199:7	199:41	15	ToLinearF [ ( cg += wp [ 1 ] ) & mask ] * SCALE12
FIELD	199:7	199:37	16	ToLinearF [ ( cg += wp [ 1 ] ) & mask ]
LEAF_NODE	199:7	199:7	17	ToLinearF
LEAF_NODE	199:16	199:16	17	[
EXPR	199:17	199:33	17	( cg += wp [ 1 ] ) & mask
LEAF_NODE	199:17	199:17	18	(
ASSIGN	199:18	199:24	18	cg += wp [ 1 ]
LVAL	199:18	199:18	19	cg
FIELD	199:18	199:18	20	cg
LEAF_NODE	199:18	199:18	21	cg
ASSIGN_OP	199:21	199:21	19	+=
LEAF_NODE	199:21	199:21	20	+=
RVAL	199:24	199:24	19	wp [ 1 ]
FIELD	199:24	199:28	20	wp [ 1 ]
LEAF_NODE	199:24	199:24	21	wp
LEAF_NODE	199:26	199:26	21	[
EXPR	199:27	199:27	21	1
FIELD	199:27	199:27	22	1
LEAF_NODE	199:27	199:27	23	1
LEAF_NODE	199:28	199:28	21	]
LEAF_NODE	199:29	199:29	18	)
LEAF_NODE	199:31	199:31	18	&
FIELD	199:33	199:33	18	mask
LEAF_NODE	199:33	199:33	19	mask
LEAF_NODE	199:37	199:37	17	]
LEAF_NODE	199:39	199:39	16	*
FIELD	199:41	199:41	16	SCALE12
LEAF_NODE	199:41	199:41	17	SCALE12
LEAF_NODE	199:48	199:48	13	;
EXPR_STATEMENT	200:2	200:48	12	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ] * SCALE12 ;
EXPR	200:2	200:2	13	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ] * SCALE12
ASSIGN	200:2	200:7	14	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ] * SCALE12
LVAL	200:2	200:2	15	t2
FIELD	200:2	200:2	16	t2
LEAF_NODE	200:2	200:2	17	t2
ASSIGN_OP	200:5	200:5	15	=
LEAF_NODE	200:5	200:5	16	=
RVAL	200:7	200:41	15	ToLinearF [ ( cb += wp [ 2 ] ) & mask ] * SCALE12
FIELD	200:7	200:37	16	ToLinearF [ ( cb += wp [ 2 ] ) & mask ]
LEAF_NODE	200:7	200:7	17	ToLinearF
LEAF_NODE	200:16	200:16	17	[
EXPR	200:17	200:33	17	( cb += wp [ 2 ] ) & mask
LEAF_NODE	200:17	200:17	18	(
ASSIGN	200:18	200:24	18	cb += wp [ 2 ]
LVAL	200:18	200:18	19	cb
FIELD	200:18	200:18	20	cb
LEAF_NODE	200:18	200:18	21	cb
ASSIGN_OP	200:21	200:21	19	+=
LEAF_NODE	200:21	200:21	20	+=
RVAL	200:24	200:24	19	wp [ 2 ]
FIELD	200:24	200:28	20	wp [ 2 ]
LEAF_NODE	200:24	200:24	21	wp
LEAF_NODE	200:26	200:26	21	[
EXPR	200:27	200:27	21	2
FIELD	200:27	200:27	22	2
LEAF_NODE	200:27	200:27	23	2
LEAF_NODE	200:28	200:28	21	]
LEAF_NODE	200:29	200:29	18	)
LEAF_NODE	200:31	200:31	18	&
FIELD	200:33	200:33	18	mask
LEAF_NODE	200:33	200:33	19	mask
LEAF_NODE	200:37	200:37	17	]
LEAF_NODE	200:39	200:39	16	*
FIELD	200:41	200:41	16	SCALE12
LEAF_NODE	200:41	200:41	17	SCALE12
LEAF_NODE	200:48	200:48	13	;
EXPR_STATEMENT	201:2	201:21	12	op [ 0 ] = CLAMP12 ( t0 ) ;
EXPR	201:2	201:2	13	op [ 0 ] = CLAMP12 ( t0 )
ASSIGN	201:2	201:10	14	op [ 0 ] = CLAMP12 ( t0 )
LVAL	201:2	201:2	15	op [ 0 ]
FIELD	201:2	201:6	16	op [ 0 ]
LEAF_NODE	201:2	201:2	17	op
LEAF_NODE	201:4	201:4	17	[
EXPR	201:5	201:5	17	0
FIELD	201:5	201:5	18	0
LEAF_NODE	201:5	201:5	19	0
LEAF_NODE	201:6	201:6	17	]
ASSIGN_OP	201:8	201:8	15	=
LEAF_NODE	201:8	201:8	16	=
RVAL	201:10	201:10	15	CLAMP12 ( t0 )
FUNCTION_CALL	201:10	201:20	16	CLAMP12 ( t0 )
CALLEE	201:10	201:10	17	CLAMP12
LEAF_NODE	201:10	201:10	18	CLAMP12
LEAF_NODE	201:17	201:17	17	(
ARGUMENT	201:18	201:18	17	t0
FIELD	201:18	201:18	18	t0
LEAF_NODE	201:18	201:18	19	t0
LEAF_NODE	201:20	201:20	17	)
LEAF_NODE	201:21	201:21	13	;
EXPR_STATEMENT	202:2	202:21	12	op [ 1 ] = CLAMP12 ( t1 ) ;
EXPR	202:2	202:2	13	op [ 1 ] = CLAMP12 ( t1 )
ASSIGN	202:2	202:10	14	op [ 1 ] = CLAMP12 ( t1 )
LVAL	202:2	202:2	15	op [ 1 ]
FIELD	202:2	202:6	16	op [ 1 ]
LEAF_NODE	202:2	202:2	17	op
LEAF_NODE	202:4	202:4	17	[
EXPR	202:5	202:5	17	1
FIELD	202:5	202:5	18	1
LEAF_NODE	202:5	202:5	19	1
LEAF_NODE	202:6	202:6	17	]
ASSIGN_OP	202:8	202:8	15	=
LEAF_NODE	202:8	202:8	16	=
RVAL	202:10	202:10	15	CLAMP12 ( t1 )
FUNCTION_CALL	202:10	202:20	16	CLAMP12 ( t1 )
CALLEE	202:10	202:10	17	CLAMP12
LEAF_NODE	202:10	202:10	18	CLAMP12
LEAF_NODE	202:17	202:17	17	(
ARGUMENT	202:18	202:18	17	t1
FIELD	202:18	202:18	18	t1
LEAF_NODE	202:18	202:18	19	t1
LEAF_NODE	202:20	202:20	17	)
LEAF_NODE	202:21	202:21	13	;
EXPR_STATEMENT	203:2	203:21	12	op [ 2 ] = CLAMP12 ( t2 ) ;
EXPR	203:2	203:2	13	op [ 2 ] = CLAMP12 ( t2 )
ASSIGN	203:2	203:10	14	op [ 2 ] = CLAMP12 ( t2 )
LVAL	203:2	203:2	15	op [ 2 ]
FIELD	203:2	203:6	16	op [ 2 ]
LEAF_NODE	203:2	203:2	17	op
LEAF_NODE	203:4	203:4	17	[
EXPR	203:5	203:5	17	2
FIELD	203:5	203:5	18	2
LEAF_NODE	203:5	203:5	19	2
LEAF_NODE	203:6	203:6	17	]
ASSIGN_OP	203:8	203:8	15	=
LEAF_NODE	203:8	203:8	16	=
RVAL	203:10	203:10	15	CLAMP12 ( t2 )
FUNCTION_CALL	203:10	203:20	16	CLAMP12 ( t2 )
CALLEE	203:10	203:10	17	CLAMP12
LEAF_NODE	203:10	203:10	18	CLAMP12
LEAF_NODE	203:17	203:17	17	(
ARGUMENT	203:18	203:18	17	t2
FIELD	203:18	203:18	18	t2
LEAF_NODE	203:18	203:18	19	t2
LEAF_NODE	203:20	203:20	17	)
LEAF_NODE	203:21	203:21	13	;
LEAF_NODE	204:5	204:5	11	}
LEAF_NODE	205:1	205:1	8	}
SELECTION	205:3	205:8	6	
KEYWORD	205:3	205:3	7	else
LEAF_NODE	205:3	205:3	8	else
STATEMENTS	205:8	205:8	7	
SELECTION	205:8	205:25	8	
KEYWORD	205:8	205:8	9	if
LEAF_NODE	205:8	205:8	10	if
LEAF_NODE	205:11	205:11	9	(
CONDITION	205:12	205:12	9	stride == 4
EXPR	205:12	205:22	10	stride == 4
FIELD	205:12	205:12	11	stride
LEAF_NODE	205:12	205:12	12	stride
EQ_OPERATOR	205:19	205:19	11	==
LEAF_NODE	205:19	205:19	12	==
FIELD	205:22	205:22	11	4
LEAF_NODE	205:22	205:22	12	4
LEAF_NODE	205:23	205:23	9	)
STATEMENTS	205:25	228:1	9	
LEAF_NODE	205:25	205:25	10	{
STATEMENTS	206:5	215:5	10	
EXPR_STATEMENT	206:5	206:50	11	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ] * SCALE12 ;
EXPR	206:5	206:5	12	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ] * SCALE12
ASSIGN	206:5	206:10	13	t0 = ToLinearF [ cr = ( wp [ 0 ] & mask ) ] * SCALE12
LVAL	206:5	206:5	14	t0
FIELD	206:5	206:5	15	t0
LEAF_NODE	206:5	206:5	16	t0
ASSIGN_OP	206:8	206:8	14	=
LEAF_NODE	206:8	206:8	15	=
RVAL	206:10	206:43	14	ToLinearF [ cr = ( wp [ 0 ] & mask ) ] * SCALE12
FIELD	206:10	206:39	15	ToLinearF [ cr = ( wp [ 0 ] & mask ) ]
LEAF_NODE	206:10	206:10	16	ToLinearF
LEAF_NODE	206:19	206:19	16	[
EXPR	206:20	206:20	16	cr = ( wp [ 0 ] & mask )
ASSIGN	206:20	206:25	17	cr = ( wp [ 0 ] & mask )
LVAL	206:20	206:20	18	cr
FIELD	206:20	206:20	19	cr
LEAF_NODE	206:20	206:20	20	cr
ASSIGN_OP	206:23	206:23	18	=
LEAF_NODE	206:23	206:23	19	=
RVAL	206:25	206:38	18	( wp [ 0 ] & mask )
LEAF_NODE	206:25	206:25	19	(
FIELD	206:26	206:30	19	wp [ 0 ]
LEAF_NODE	206:26	206:26	20	wp
LEAF_NODE	206:28	206:28	20	[
EXPR	206:29	206:29	20	0
FIELD	206:29	206:29	21	0
LEAF_NODE	206:29	206:29	22	0
LEAF_NODE	206:30	206:30	20	]
LEAF_NODE	206:32	206:32	19	&
FIELD	206:34	206:34	19	mask
LEAF_NODE	206:34	206:34	20	mask
LEAF_NODE	206:38	206:38	19	)
LEAF_NODE	206:39	206:39	16	]
LEAF_NODE	206:41	206:41	15	*
FIELD	206:43	206:43	15	SCALE12
LEAF_NODE	206:43	206:43	16	SCALE12
LEAF_NODE	206:50	206:50	12	;
EXPR_STATEMENT	207:5	207:50	11	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ] * SCALE12 ;
EXPR	207:5	207:5	12	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ] * SCALE12
ASSIGN	207:5	207:10	13	t1 = ToLinearF [ cg = ( wp [ 1 ] & mask ) ] * SCALE12
LVAL	207:5	207:5	14	t1
FIELD	207:5	207:5	15	t1
LEAF_NODE	207:5	207:5	16	t1
ASSIGN_OP	207:8	207:8	14	=
LEAF_NODE	207:8	207:8	15	=
RVAL	207:10	207:43	14	ToLinearF [ cg = ( wp [ 1 ] & mask ) ] * SCALE12
FIELD	207:10	207:39	15	ToLinearF [ cg = ( wp [ 1 ] & mask ) ]
LEAF_NODE	207:10	207:10	16	ToLinearF
LEAF_NODE	207:19	207:19	16	[
EXPR	207:20	207:20	16	cg = ( wp [ 1 ] & mask )
ASSIGN	207:20	207:25	17	cg = ( wp [ 1 ] & mask )
LVAL	207:20	207:20	18	cg
FIELD	207:20	207:20	19	cg
LEAF_NODE	207:20	207:20	20	cg
ASSIGN_OP	207:23	207:23	18	=
LEAF_NODE	207:23	207:23	19	=
RVAL	207:25	207:38	18	( wp [ 1 ] & mask )
LEAF_NODE	207:25	207:25	19	(
FIELD	207:26	207:30	19	wp [ 1 ]
LEAF_NODE	207:26	207:26	20	wp
LEAF_NODE	207:28	207:28	20	[
EXPR	207:29	207:29	20	1
FIELD	207:29	207:29	21	1
LEAF_NODE	207:29	207:29	22	1
LEAF_NODE	207:30	207:30	20	]
LEAF_NODE	207:32	207:32	19	&
FIELD	207:34	207:34	19	mask
LEAF_NODE	207:34	207:34	20	mask
LEAF_NODE	207:38	207:38	19	)
LEAF_NODE	207:39	207:39	16	]
LEAF_NODE	207:41	207:41	15	*
FIELD	207:43	207:43	15	SCALE12
LEAF_NODE	207:43	207:43	16	SCALE12
LEAF_NODE	207:50	207:50	12	;
EXPR_STATEMENT	208:5	208:50	11	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ] * SCALE12 ;
EXPR	208:5	208:5	12	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ] * SCALE12
ASSIGN	208:5	208:10	13	t2 = ToLinearF [ cb = ( wp [ 2 ] & mask ) ] * SCALE12
LVAL	208:5	208:5	14	t2
FIELD	208:5	208:5	15	t2
LEAF_NODE	208:5	208:5	16	t2
ASSIGN_OP	208:8	208:8	14	=
LEAF_NODE	208:8	208:8	15	=
RVAL	208:10	208:43	14	ToLinearF [ cb = ( wp [ 2 ] & mask ) ] * SCALE12
FIELD	208:10	208:39	15	ToLinearF [ cb = ( wp [ 2 ] & mask ) ]
LEAF_NODE	208:10	208:10	16	ToLinearF
LEAF_NODE	208:19	208:19	16	[
EXPR	208:20	208:20	16	cb = ( wp [ 2 ] & mask )
ASSIGN	208:20	208:25	17	cb = ( wp [ 2 ] & mask )
LVAL	208:20	208:20	18	cb
FIELD	208:20	208:20	19	cb
LEAF_NODE	208:20	208:20	20	cb
ASSIGN_OP	208:23	208:23	18	=
LEAF_NODE	208:23	208:23	19	=
RVAL	208:25	208:38	18	( wp [ 2 ] & mask )
LEAF_NODE	208:25	208:25	19	(
FIELD	208:26	208:30	19	wp [ 2 ]
LEAF_NODE	208:26	208:26	20	wp
LEAF_NODE	208:28	208:28	20	[
EXPR	208:29	208:29	20	2
FIELD	208:29	208:29	21	2
LEAF_NODE	208:29	208:29	22	2
LEAF_NODE	208:30	208:30	20	]
LEAF_NODE	208:32	208:32	19	&
FIELD	208:34	208:34	19	mask
LEAF_NODE	208:34	208:34	20	mask
LEAF_NODE	208:38	208:38	19	)
LEAF_NODE	208:39	208:39	16	]
LEAF_NODE	208:41	208:41	15	*
FIELD	208:43	208:43	15	SCALE12
LEAF_NODE	208:43	208:43	16	SCALE12
LEAF_NODE	208:50	208:50	12	;
EXPR_STATEMENT	209:5	209:50	11	t3 = ToLinearF [ ca = ( wp [ 3 ] & mask ) ] * SCALE12 ;
EXPR	209:5	209:5	12	t3 = ToLinearF [ ca = ( wp [ 3 ] & mask ) ] * SCALE12
ASSIGN	209:5	209:10	13	t3 = ToLinearF [ ca = ( wp [ 3 ] & mask ) ] * SCALE12
LVAL	209:5	209:5	14	t3
FIELD	209:5	209:5	15	t3
LEAF_NODE	209:5	209:5	16	t3
ASSIGN_OP	209:8	209:8	14	=
LEAF_NODE	209:8	209:8	15	=
RVAL	209:10	209:43	14	ToLinearF [ ca = ( wp [ 3 ] & mask ) ] * SCALE12
FIELD	209:10	209:39	15	ToLinearF [ ca = ( wp [ 3 ] & mask ) ]
LEAF_NODE	209:10	209:10	16	ToLinearF
LEAF_NODE	209:19	209:19	16	[
EXPR	209:20	209:20	16	ca = ( wp [ 3 ] & mask )
ASSIGN	209:20	209:25	17	ca = ( wp [ 3 ] & mask )
LVAL	209:20	209:20	18	ca
FIELD	209:20	209:20	19	ca
LEAF_NODE	209:20	209:20	20	ca
ASSIGN_OP	209:23	209:23	18	=
LEAF_NODE	209:23	209:23	19	=
RVAL	209:25	209:38	18	( wp [ 3 ] & mask )
LEAF_NODE	209:25	209:25	19	(
FIELD	209:26	209:30	19	wp [ 3 ]
LEAF_NODE	209:26	209:26	20	wp
LEAF_NODE	209:28	209:28	20	[
EXPR	209:29	209:29	20	3
FIELD	209:29	209:29	21	3
LEAF_NODE	209:29	209:29	22	3
LEAF_NODE	209:30	209:30	20	]
LEAF_NODE	209:32	209:32	19	&
FIELD	209:34	209:34	19	mask
LEAF_NODE	209:34	209:34	20	mask
LEAF_NODE	209:38	209:38	19	)
LEAF_NODE	209:39	209:39	16	]
LEAF_NODE	209:41	209:41	15	*
FIELD	209:43	209:43	15	SCALE12
LEAF_NODE	209:43	209:43	16	SCALE12
LEAF_NODE	209:50	209:50	12	;
EXPR_STATEMENT	210:5	210:24	11	op [ 0 ] = CLAMP12 ( t0 ) ;
EXPR	210:5	210:5	12	op [ 0 ] = CLAMP12 ( t0 )
ASSIGN	210:5	210:13	13	op [ 0 ] = CLAMP12 ( t0 )
LVAL	210:5	210:5	14	op [ 0 ]
FIELD	210:5	210:9	15	op [ 0 ]
LEAF_NODE	210:5	210:5	16	op
LEAF_NODE	210:7	210:7	16	[
EXPR	210:8	210:8	16	0
FIELD	210:8	210:8	17	0
LEAF_NODE	210:8	210:8	18	0
LEAF_NODE	210:9	210:9	16	]
ASSIGN_OP	210:11	210:11	14	=
LEAF_NODE	210:11	210:11	15	=
RVAL	210:13	210:13	14	CLAMP12 ( t0 )
FUNCTION_CALL	210:13	210:23	15	CLAMP12 ( t0 )
CALLEE	210:13	210:13	16	CLAMP12
LEAF_NODE	210:13	210:13	17	CLAMP12
LEAF_NODE	210:20	210:20	16	(
ARGUMENT	210:21	210:21	16	t0
FIELD	210:21	210:21	17	t0
LEAF_NODE	210:21	210:21	18	t0
LEAF_NODE	210:23	210:23	16	)
LEAF_NODE	210:24	210:24	12	;
EXPR_STATEMENT	211:5	211:24	11	op [ 1 ] = CLAMP12 ( t1 ) ;
EXPR	211:5	211:5	12	op [ 1 ] = CLAMP12 ( t1 )
ASSIGN	211:5	211:13	13	op [ 1 ] = CLAMP12 ( t1 )
LVAL	211:5	211:5	14	op [ 1 ]
FIELD	211:5	211:9	15	op [ 1 ]
LEAF_NODE	211:5	211:5	16	op
LEAF_NODE	211:7	211:7	16	[
EXPR	211:8	211:8	16	1
FIELD	211:8	211:8	17	1
LEAF_NODE	211:8	211:8	18	1
LEAF_NODE	211:9	211:9	16	]
ASSIGN_OP	211:11	211:11	14	=
LEAF_NODE	211:11	211:11	15	=
RVAL	211:13	211:13	14	CLAMP12 ( t1 )
FUNCTION_CALL	211:13	211:23	15	CLAMP12 ( t1 )
CALLEE	211:13	211:13	16	CLAMP12
LEAF_NODE	211:13	211:13	17	CLAMP12
LEAF_NODE	211:20	211:20	16	(
ARGUMENT	211:21	211:21	16	t1
FIELD	211:21	211:21	17	t1
LEAF_NODE	211:21	211:21	18	t1
LEAF_NODE	211:23	211:23	16	)
LEAF_NODE	211:24	211:24	12	;
EXPR_STATEMENT	212:5	212:24	11	op [ 2 ] = CLAMP12 ( t2 ) ;
EXPR	212:5	212:5	12	op [ 2 ] = CLAMP12 ( t2 )
ASSIGN	212:5	212:13	13	op [ 2 ] = CLAMP12 ( t2 )
LVAL	212:5	212:5	14	op [ 2 ]
FIELD	212:5	212:9	15	op [ 2 ]
LEAF_NODE	212:5	212:5	16	op
LEAF_NODE	212:7	212:7	16	[
EXPR	212:8	212:8	16	2
FIELD	212:8	212:8	17	2
LEAF_NODE	212:8	212:8	18	2
LEAF_NODE	212:9	212:9	16	]
ASSIGN_OP	212:11	212:11	14	=
LEAF_NODE	212:11	212:11	15	=
RVAL	212:13	212:13	14	CLAMP12 ( t2 )
FUNCTION_CALL	212:13	212:23	15	CLAMP12 ( t2 )
CALLEE	212:13	212:13	16	CLAMP12
LEAF_NODE	212:13	212:13	17	CLAMP12
LEAF_NODE	212:20	212:20	16	(
ARGUMENT	212:21	212:21	16	t2
FIELD	212:21	212:21	17	t2
LEAF_NODE	212:21	212:21	18	t2
LEAF_NODE	212:23	212:23	16	)
LEAF_NODE	212:24	212:24	12	;
EXPR_STATEMENT	213:5	213:24	11	op [ 3 ] = CLAMP12 ( t3 ) ;
EXPR	213:5	213:5	12	op [ 3 ] = CLAMP12 ( t3 )
ASSIGN	213:5	213:13	13	op [ 3 ] = CLAMP12 ( t3 )
LVAL	213:5	213:5	14	op [ 3 ]
FIELD	213:5	213:9	15	op [ 3 ]
LEAF_NODE	213:5	213:5	16	op
LEAF_NODE	213:7	213:7	16	[
EXPR	213:8	213:8	16	3
FIELD	213:8	213:8	17	3
LEAF_NODE	213:8	213:8	18	3
LEAF_NODE	213:9	213:9	16	]
ASSIGN_OP	213:11	213:11	14	=
LEAF_NODE	213:11	213:11	15	=
RVAL	213:13	213:13	14	CLAMP12 ( t3 )
FUNCTION_CALL	213:13	213:23	15	CLAMP12 ( t3 )
CALLEE	213:13	213:13	16	CLAMP12
LEAF_NODE	213:13	213:13	17	CLAMP12
LEAF_NODE	213:20	213:20	16	(
ARGUMENT	213:21	213:21	16	t3
FIELD	213:21	213:21	17	t3
LEAF_NODE	213:21	213:21	18	t3
LEAF_NODE	213:23	213:23	16	)
LEAF_NODE	213:24	213:24	12	;
EXPR_STATEMENT	214:5	214:11	11	n -= 4 ;
EXPR	214:5	214:5	12	n -= 4
ASSIGN	214:5	214:10	13	n -= 4
LVAL	214:5	214:5	14	n
FIELD	214:5	214:5	15	n
LEAF_NODE	214:5	214:5	16	n
ASSIGN_OP	214:7	214:7	14	-=
LEAF_NODE	214:7	214:7	15	-=
RVAL	214:10	214:10	14	4
FIELD	214:10	214:10	15	4
LEAF_NODE	214:10	214:10	16	4
LEAF_NODE	214:11	214:11	12	;
ITERATION	215:5	215:19	11	
KEYWORD	215:5	215:5	12	while
LEAF_NODE	215:5	215:5	13	while
LEAF_NODE	215:11	215:11	12	(
CONDITION	215:12	215:12	12	n > 0
EXPR	215:12	215:16	13	n > 0
FIELD	215:12	215:12	14	n
LEAF_NODE	215:12	215:12	15	n
REL_OPERATOR	215:14	215:14	14	>
LEAF_NODE	215:14	215:14	15	>
FIELD	215:16	215:16	14	0
LEAF_NODE	215:16	215:16	15	0
LEAF_NODE	215:17	215:17	12	)
STATEMENTS	215:19	227:5	12	
LEAF_NODE	215:19	215:19	13	{
STATEMENTS	216:2	226:2	13	
EXPR_STATEMENT	216:2	216:9	14	wp += 4 ;
EXPR	216:2	216:2	15	wp += 4
ASSIGN	216:2	216:8	16	wp += 4
LVAL	216:2	216:2	17	wp
FIELD	216:2	216:2	18	wp
LEAF_NODE	216:2	216:2	19	wp
ASSIGN_OP	216:5	216:5	17	+=
LEAF_NODE	216:5	216:5	18	+=
RVAL	216:8	216:8	17	4
FIELD	216:8	216:8	18	4
LEAF_NODE	216:8	216:8	19	4
LEAF_NODE	216:9	216:9	15	;
EXPR_STATEMENT	217:2	217:9	14	op += 4 ;
EXPR	217:2	217:2	15	op += 4
ASSIGN	217:2	217:8	16	op += 4
LVAL	217:2	217:2	17	op
FIELD	217:2	217:2	18	op
LEAF_NODE	217:2	217:2	19	op
ASSIGN_OP	217:5	217:5	17	+=
LEAF_NODE	217:5	217:5	18	+=
RVAL	217:8	217:8	17	4
FIELD	217:8	217:8	18	4
LEAF_NODE	217:8	217:8	19	4
LEAF_NODE	217:9	217:9	15	;
EXPR_STATEMENT	218:2	218:8	14	n -= 4 ;
EXPR	218:2	218:2	15	n -= 4
ASSIGN	218:2	218:7	16	n -= 4
LVAL	218:2	218:2	17	n
FIELD	218:2	218:2	18	n
LEAF_NODE	218:2	218:2	19	n
ASSIGN_OP	218:4	218:4	17	-=
LEAF_NODE	218:4	218:4	18	-=
RVAL	218:7	218:7	17	4
FIELD	218:7	218:7	18	4
LEAF_NODE	218:7	218:7	19	4
LEAF_NODE	218:8	218:8	15	;
EXPR_STATEMENT	219:2	219:48	14	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ] * SCALE12 ;
EXPR	219:2	219:2	15	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ] * SCALE12
ASSIGN	219:2	219:7	16	t0 = ToLinearF [ ( cr += wp [ 0 ] ) & mask ] * SCALE12
LVAL	219:2	219:2	17	t0
FIELD	219:2	219:2	18	t0
LEAF_NODE	219:2	219:2	19	t0
ASSIGN_OP	219:5	219:5	17	=
LEAF_NODE	219:5	219:5	18	=
RVAL	219:7	219:41	17	ToLinearF [ ( cr += wp [ 0 ] ) & mask ] * SCALE12
FIELD	219:7	219:37	18	ToLinearF [ ( cr += wp [ 0 ] ) & mask ]
LEAF_NODE	219:7	219:7	19	ToLinearF
LEAF_NODE	219:16	219:16	19	[
EXPR	219:17	219:33	19	( cr += wp [ 0 ] ) & mask
LEAF_NODE	219:17	219:17	20	(
ASSIGN	219:18	219:24	20	cr += wp [ 0 ]
LVAL	219:18	219:18	21	cr
FIELD	219:18	219:18	22	cr
LEAF_NODE	219:18	219:18	23	cr
ASSIGN_OP	219:21	219:21	21	+=
LEAF_NODE	219:21	219:21	22	+=
RVAL	219:24	219:24	21	wp [ 0 ]
FIELD	219:24	219:28	22	wp [ 0 ]
LEAF_NODE	219:24	219:24	23	wp
LEAF_NODE	219:26	219:26	23	[
EXPR	219:27	219:27	23	0
FIELD	219:27	219:27	24	0
LEAF_NODE	219:27	219:27	25	0
LEAF_NODE	219:28	219:28	23	]
LEAF_NODE	219:29	219:29	20	)
LEAF_NODE	219:31	219:31	20	&
FIELD	219:33	219:33	20	mask
LEAF_NODE	219:33	219:33	21	mask
LEAF_NODE	219:37	219:37	19	]
LEAF_NODE	219:39	219:39	18	*
FIELD	219:41	219:41	18	SCALE12
LEAF_NODE	219:41	219:41	19	SCALE12
LEAF_NODE	219:48	219:48	15	;
EXPR_STATEMENT	220:2	220:48	14	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ] * SCALE12 ;
EXPR	220:2	220:2	15	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ] * SCALE12
ASSIGN	220:2	220:7	16	t1 = ToLinearF [ ( cg += wp [ 1 ] ) & mask ] * SCALE12
LVAL	220:2	220:2	17	t1
FIELD	220:2	220:2	18	t1
LEAF_NODE	220:2	220:2	19	t1
ASSIGN_OP	220:5	220:5	17	=
LEAF_NODE	220:5	220:5	18	=
RVAL	220:7	220:41	17	ToLinearF [ ( cg += wp [ 1 ] ) & mask ] * SCALE12
FIELD	220:7	220:37	18	ToLinearF [ ( cg += wp [ 1 ] ) & mask ]
LEAF_NODE	220:7	220:7	19	ToLinearF
LEAF_NODE	220:16	220:16	19	[
EXPR	220:17	220:33	19	( cg += wp [ 1 ] ) & mask
LEAF_NODE	220:17	220:17	20	(
ASSIGN	220:18	220:24	20	cg += wp [ 1 ]
LVAL	220:18	220:18	21	cg
FIELD	220:18	220:18	22	cg
LEAF_NODE	220:18	220:18	23	cg
ASSIGN_OP	220:21	220:21	21	+=
LEAF_NODE	220:21	220:21	22	+=
RVAL	220:24	220:24	21	wp [ 1 ]
FIELD	220:24	220:28	22	wp [ 1 ]
LEAF_NODE	220:24	220:24	23	wp
LEAF_NODE	220:26	220:26	23	[
EXPR	220:27	220:27	23	1
FIELD	220:27	220:27	24	1
LEAF_NODE	220:27	220:27	25	1
LEAF_NODE	220:28	220:28	23	]
LEAF_NODE	220:29	220:29	20	)
LEAF_NODE	220:31	220:31	20	&
FIELD	220:33	220:33	20	mask
LEAF_NODE	220:33	220:33	21	mask
LEAF_NODE	220:37	220:37	19	]
LEAF_NODE	220:39	220:39	18	*
FIELD	220:41	220:41	18	SCALE12
LEAF_NODE	220:41	220:41	19	SCALE12
LEAF_NODE	220:48	220:48	15	;
EXPR_STATEMENT	221:2	221:48	14	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ] * SCALE12 ;
EXPR	221:2	221:2	15	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ] * SCALE12
ASSIGN	221:2	221:7	16	t2 = ToLinearF [ ( cb += wp [ 2 ] ) & mask ] * SCALE12
LVAL	221:2	221:2	17	t2
FIELD	221:2	221:2	18	t2
LEAF_NODE	221:2	221:2	19	t2
ASSIGN_OP	221:5	221:5	17	=
LEAF_NODE	221:5	221:5	18	=
RVAL	221:7	221:41	17	ToLinearF [ ( cb += wp [ 2 ] ) & mask ] * SCALE12
FIELD	221:7	221:37	18	ToLinearF [ ( cb += wp [ 2 ] ) & mask ]
LEAF_NODE	221:7	221:7	19	ToLinearF
LEAF_NODE	221:16	221:16	19	[
EXPR	221:17	221:33	19	( cb += wp [ 2 ] ) & mask
LEAF_NODE	221:17	221:17	20	(
ASSIGN	221:18	221:24	20	cb += wp [ 2 ]
LVAL	221:18	221:18	21	cb
FIELD	221:18	221:18	22	cb
LEAF_NODE	221:18	221:18	23	cb
ASSIGN_OP	221:21	221:21	21	+=
LEAF_NODE	221:21	221:21	22	+=
RVAL	221:24	221:24	21	wp [ 2 ]
FIELD	221:24	221:28	22	wp [ 2 ]
LEAF_NODE	221:24	221:24	23	wp
LEAF_NODE	221:26	221:26	23	[
EXPR	221:27	221:27	23	2
FIELD	221:27	221:27	24	2
LEAF_NODE	221:27	221:27	25	2
LEAF_NODE	221:28	221:28	23	]
LEAF_NODE	221:29	221:29	20	)
LEAF_NODE	221:31	221:31	20	&
FIELD	221:33	221:33	20	mask
LEAF_NODE	221:33	221:33	21	mask
LEAF_NODE	221:37	221:37	19	]
LEAF_NODE	221:39	221:39	18	*
FIELD	221:41	221:41	18	SCALE12
LEAF_NODE	221:41	221:41	19	SCALE12
LEAF_NODE	221:48	221:48	15	;
EXPR_STATEMENT	222:2	222:48	14	t3 = ToLinearF [ ( ca += wp [ 3 ] ) & mask ] * SCALE12 ;
EXPR	222:2	222:2	15	t3 = ToLinearF [ ( ca += wp [ 3 ] ) & mask ] * SCALE12
ASSIGN	222:2	222:7	16	t3 = ToLinearF [ ( ca += wp [ 3 ] ) & mask ] * SCALE12
LVAL	222:2	222:2	17	t3
FIELD	222:2	222:2	18	t3
LEAF_NODE	222:2	222:2	19	t3
ASSIGN_OP	222:5	222:5	17	=
LEAF_NODE	222:5	222:5	18	=
RVAL	222:7	222:41	17	ToLinearF [ ( ca += wp [ 3 ] ) & mask ] * SCALE12
FIELD	222:7	222:37	18	ToLinearF [ ( ca += wp [ 3 ] ) & mask ]
LEAF_NODE	222:7	222:7	19	ToLinearF
LEAF_NODE	222:16	222:16	19	[
EXPR	222:17	222:33	19	( ca += wp [ 3 ] ) & mask
LEAF_NODE	222:17	222:17	20	(
ASSIGN	222:18	222:24	20	ca += wp [ 3 ]
LVAL	222:18	222:18	21	ca
FIELD	222:18	222:18	22	ca
LEAF_NODE	222:18	222:18	23	ca
ASSIGN_OP	222:21	222:21	21	+=
LEAF_NODE	222:21	222:21	22	+=
RVAL	222:24	222:24	21	wp [ 3 ]
FIELD	222:24	222:28	22	wp [ 3 ]
LEAF_NODE	222:24	222:24	23	wp
LEAF_NODE	222:26	222:26	23	[
EXPR	222:27	222:27	23	3
FIELD	222:27	222:27	24	3
LEAF_NODE	222:27	222:27	25	3
LEAF_NODE	222:28	222:28	23	]
LEAF_NODE	222:29	222:29	20	)
LEAF_NODE	222:31	222:31	20	&
FIELD	222:33	222:33	20	mask
LEAF_NODE	222:33	222:33	21	mask
LEAF_NODE	222:37	222:37	19	]
LEAF_NODE	222:39	222:39	18	*
FIELD	222:41	222:41	18	SCALE12
LEAF_NODE	222:41	222:41	19	SCALE12
LEAF_NODE	222:48	222:48	15	;
EXPR_STATEMENT	223:2	223:21	14	op [ 0 ] = CLAMP12 ( t0 ) ;
EXPR	223:2	223:2	15	op [ 0 ] = CLAMP12 ( t0 )
ASSIGN	223:2	223:10	16	op [ 0 ] = CLAMP12 ( t0 )
LVAL	223:2	223:2	17	op [ 0 ]
FIELD	223:2	223:6	18	op [ 0 ]
LEAF_NODE	223:2	223:2	19	op
LEAF_NODE	223:4	223:4	19	[
EXPR	223:5	223:5	19	0
FIELD	223:5	223:5	20	0
LEAF_NODE	223:5	223:5	21	0
LEAF_NODE	223:6	223:6	19	]
ASSIGN_OP	223:8	223:8	17	=
LEAF_NODE	223:8	223:8	18	=
RVAL	223:10	223:10	17	CLAMP12 ( t0 )
FUNCTION_CALL	223:10	223:20	18	CLAMP12 ( t0 )
CALLEE	223:10	223:10	19	CLAMP12
LEAF_NODE	223:10	223:10	20	CLAMP12
LEAF_NODE	223:17	223:17	19	(
ARGUMENT	223:18	223:18	19	t0
FIELD	223:18	223:18	20	t0
LEAF_NODE	223:18	223:18	21	t0
LEAF_NODE	223:20	223:20	19	)
LEAF_NODE	223:21	223:21	15	;
EXPR_STATEMENT	224:2	224:21	14	op [ 1 ] = CLAMP12 ( t1 ) ;
EXPR	224:2	224:2	15	op [ 1 ] = CLAMP12 ( t1 )
ASSIGN	224:2	224:10	16	op [ 1 ] = CLAMP12 ( t1 )
LVAL	224:2	224:2	17	op [ 1 ]
FIELD	224:2	224:6	18	op [ 1 ]
LEAF_NODE	224:2	224:2	19	op
LEAF_NODE	224:4	224:4	19	[
EXPR	224:5	224:5	19	1
FIELD	224:5	224:5	20	1
LEAF_NODE	224:5	224:5	21	1
LEAF_NODE	224:6	224:6	19	]
ASSIGN_OP	224:8	224:8	17	=
LEAF_NODE	224:8	224:8	18	=
RVAL	224:10	224:10	17	CLAMP12 ( t1 )
FUNCTION_CALL	224:10	224:20	18	CLAMP12 ( t1 )
CALLEE	224:10	224:10	19	CLAMP12
LEAF_NODE	224:10	224:10	20	CLAMP12
LEAF_NODE	224:17	224:17	19	(
ARGUMENT	224:18	224:18	19	t1
FIELD	224:18	224:18	20	t1
LEAF_NODE	224:18	224:18	21	t1
LEAF_NODE	224:20	224:20	19	)
LEAF_NODE	224:21	224:21	15	;
EXPR_STATEMENT	225:2	225:21	14	op [ 2 ] = CLAMP12 ( t2 ) ;
EXPR	225:2	225:2	15	op [ 2 ] = CLAMP12 ( t2 )
ASSIGN	225:2	225:10	16	op [ 2 ] = CLAMP12 ( t2 )
LVAL	225:2	225:2	17	op [ 2 ]
FIELD	225:2	225:6	18	op [ 2 ]
LEAF_NODE	225:2	225:2	19	op
LEAF_NODE	225:4	225:4	19	[
EXPR	225:5	225:5	19	2
FIELD	225:5	225:5	20	2
LEAF_NODE	225:5	225:5	21	2
LEAF_NODE	225:6	225:6	19	]
ASSIGN_OP	225:8	225:8	17	=
LEAF_NODE	225:8	225:8	18	=
RVAL	225:10	225:10	17	CLAMP12 ( t2 )
FUNCTION_CALL	225:10	225:20	18	CLAMP12 ( t2 )
CALLEE	225:10	225:10	19	CLAMP12
LEAF_NODE	225:10	225:10	20	CLAMP12
LEAF_NODE	225:17	225:17	19	(
ARGUMENT	225:18	225:18	19	t2
FIELD	225:18	225:18	20	t2
LEAF_NODE	225:18	225:18	21	t2
LEAF_NODE	225:20	225:20	19	)
LEAF_NODE	225:21	225:21	15	;
EXPR_STATEMENT	226:2	226:21	14	op [ 3 ] = CLAMP12 ( t3 ) ;
EXPR	226:2	226:2	15	op [ 3 ] = CLAMP12 ( t3 )
ASSIGN	226:2	226:10	16	op [ 3 ] = CLAMP12 ( t3 )
LVAL	226:2	226:2	17	op [ 3 ]
FIELD	226:2	226:6	18	op [ 3 ]
LEAF_NODE	226:2	226:2	19	op
LEAF_NODE	226:4	226:4	19	[
EXPR	226:5	226:5	19	3
FIELD	226:5	226:5	20	3
LEAF_NODE	226:5	226:5	21	3
LEAF_NODE	226:6	226:6	19	]
ASSIGN_OP	226:8	226:8	17	=
LEAF_NODE	226:8	226:8	18	=
RVAL	226:10	226:10	17	CLAMP12 ( t3 )
FUNCTION_CALL	226:10	226:20	18	CLAMP12 ( t3 )
CALLEE	226:10	226:10	19	CLAMP12
LEAF_NODE	226:10	226:10	20	CLAMP12
LEAF_NODE	226:17	226:17	19	(
ARGUMENT	226:18	226:18	19	t3
FIELD	226:18	226:18	20	t3
LEAF_NODE	226:18	226:18	21	t3
LEAF_NODE	226:20	226:20	19	)
LEAF_NODE	226:21	226:21	15	;
LEAF_NODE	227:5	227:5	13	}
LEAF_NODE	228:1	228:1	10	}
SELECTION	228:3	228:8	6	
KEYWORD	228:3	228:3	7	else
LEAF_NODE	228:3	228:3	8	else
STATEMENTS	228:8	238:1	7	
LEAF_NODE	228:8	228:8	8	{
STATEMENTS	229:5	232:5	8	
LEAF_NODE	229:5	229:5	9	REPEAT
LEAF_NODE	229:11	229:11	9	(
EXPR_STATEMENT	229:12	229:54	9	stride , t0 = ToLinearF [ * wp & mask ] * SCALE12 ;
EXPR	229:12	229:20	10	stride , t0 = ToLinearF [ * wp & mask ] * SCALE12
FIELD	229:12	229:12	11	stride
LEAF_NODE	229:12	229:12	12	stride
LEAF_NODE	229:18	229:18	11	,
ASSIGN	229:20	229:25	11	t0 = ToLinearF [ * wp & mask ] * SCALE12
LVAL	229:20	229:20	12	t0
FIELD	229:20	229:20	13	t0
LEAF_NODE	229:20	229:20	14	t0
ASSIGN_OP	229:23	229:23	12	=
LEAF_NODE	229:23	229:23	13	=
RVAL	229:25	229:47	12	ToLinearF [ * wp & mask ] * SCALE12
FIELD	229:25	229:43	13	ToLinearF [ * wp & mask ]
LEAF_NODE	229:25	229:25	14	ToLinearF
LEAF_NODE	229:34	229:34	14	[
EXPR	229:35	229:39	14	* wp & mask
UNARY_EXPR	229:35	229:36	15	* wp
UNARY_OPERATOR	229:35	229:35	16	*
LEAF_NODE	229:35	229:35	17	*
FIELD	229:36	229:36	16	wp
LEAF_NODE	229:36	229:36	17	wp
LEAF_NODE	229:38	229:38	15	&
FIELD	229:39	229:39	15	mask
LEAF_NODE	229:39	229:39	16	mask
LEAF_NODE	229:43	229:43	14	]
LEAF_NODE	229:45	229:45	13	*
FIELD	229:47	229:47	13	SCALE12
LEAF_NODE	229:47	229:47	14	SCALE12
LEAF_NODE	229:54	229:54	10	;
EXPR_STATEMENT	230:27	230:44	9	* op = CLAMP12 ( t0 ) ;
EXPR	230:27	230:27	10	* op = CLAMP12 ( t0 )
ASSIGN	230:27	230:33	11	* op = CLAMP12 ( t0 )
LVAL	230:27	230:27	12	* op
UNARY_EXPR	230:27	230:28	13	* op
UNARY_OPERATOR	230:27	230:27	14	*
LEAF_NODE	230:27	230:27	15	*
FIELD	230:28	230:28	14	op
LEAF_NODE	230:28	230:28	15	op
ASSIGN_OP	230:31	230:31	12	=
LEAF_NODE	230:31	230:31	13	=
RVAL	230:33	230:33	12	CLAMP12 ( t0 )
FUNCTION_CALL	230:33	230:43	13	CLAMP12 ( t0 )
CALLEE	230:33	230:33	14	CLAMP12
LEAF_NODE	230:33	230:33	15	CLAMP12
LEAF_NODE	230:40	230:40	14	(
ARGUMENT	230:41	230:41	14	t0
FIELD	230:41	230:41	15	t0
LEAF_NODE	230:41	230:41	16	t0
LEAF_NODE	230:43	230:43	14	)
LEAF_NODE	230:44	230:44	10	;
EXPR_STATEMENT	230:46	230:50	9	wp ++ ;
EXPR	230:46	230:46	10	wp ++
FIELD	230:46	230:48	11	wp ++
LEAF_NODE	230:46	230:46	12	wp
LEAF_NODE	230:48	230:48	12	++
LEAF_NODE	230:50	230:50	10	;
LEAF_NODE	230:52	230:52	9	op
LEAF_NODE	230:54	230:54	9	++
LEAF_NODE	230:56	230:56	9	)
EXPR_STATEMENT	231:5	231:16	9	n -= stride ;
EXPR	231:5	231:5	10	n -= stride
ASSIGN	231:5	231:10	11	n -= stride
LVAL	231:5	231:5	12	n
FIELD	231:5	231:5	13	n
LEAF_NODE	231:5	231:5	14	n
ASSIGN_OP	231:7	231:7	12	-=
LEAF_NODE	231:7	231:7	13	-=
RVAL	231:10	231:10	12	stride
FIELD	231:10	231:10	13	stride
LEAF_NODE	231:10	231:10	14	stride
LEAF_NODE	231:16	231:16	10	;
ITERATION	232:5	232:19	9	
KEYWORD	232:5	232:5	10	while
LEAF_NODE	232:5	232:5	11	while
LEAF_NODE	232:11	232:11	10	(
CONDITION	232:12	232:12	10	n > 0
EXPR	232:12	232:16	11	n > 0
FIELD	232:12	232:12	12	n
LEAF_NODE	232:12	232:12	13	n
REL_OPERATOR	232:14	232:14	12	>
LEAF_NODE	232:14	232:14	13	>
FIELD	232:16	232:16	12	0
LEAF_NODE	232:16	232:16	13	0
LEAF_NODE	232:17	232:17	10	)
STATEMENTS	232:19	237:5	10	
LEAF_NODE	232:19	232:19	11	{
STATEMENTS	233:2	236:2	11	
LEAF_NODE	233:2	233:2	12	REPEAT
LEAF_NODE	233:8	233:8	12	(
EXPR_STATEMENT	233:9	234:23	12	stride , wp [ stride ] += * wp ;
EXPR	233:9	234:6	13	stride , wp [ stride ] += * wp
FIELD	233:9	233:9	14	stride
LEAF_NODE	233:9	233:9	15	stride
LEAF_NODE	233:15	233:15	14	,
ASSIGN	234:6	234:20	14	wp [ stride ] += * wp
LVAL	234:6	234:6	15	wp [ stride ]
FIELD	234:6	234:15	16	wp [ stride ]
LEAF_NODE	234:6	234:6	17	wp
LEAF_NODE	234:8	234:8	17	[
EXPR	234:9	234:9	17	stride
FIELD	234:9	234:9	18	stride
LEAF_NODE	234:9	234:9	19	stride
LEAF_NODE	234:15	234:15	17	]
ASSIGN_OP	234:17	234:17	15	+=
LEAF_NODE	234:17	234:17	16	+=
RVAL	234:20	234:20	15	* wp
UNARY_EXPR	234:20	234:21	16	* wp
UNARY_OPERATOR	234:20	234:20	17	*
LEAF_NODE	234:20	234:20	18	*
FIELD	234:21	234:21	17	wp
LEAF_NODE	234:21	234:21	18	wp
LEAF_NODE	234:23	234:23	13	;
EXPR_STATEMENT	234:25	234:64	12	t0 = ToLinearF [ wp [ stride ] & mask ] * SCALE12 ;
EXPR	234:25	234:25	13	t0 = ToLinearF [ wp [ stride ] & mask ] * SCALE12
ASSIGN	234:25	234:30	14	t0 = ToLinearF [ wp [ stride ] & mask ] * SCALE12
LVAL	234:25	234:25	15	t0
FIELD	234:25	234:25	16	t0
LEAF_NODE	234:25	234:25	17	t0
ASSIGN_OP	234:28	234:28	15	=
LEAF_NODE	234:28	234:28	16	=
RVAL	234:30	234:57	15	ToLinearF [ wp [ stride ] & mask ] * SCALE12
FIELD	234:30	234:55	16	ToLinearF [ wp [ stride ] & mask ]
LEAF_NODE	234:30	234:30	17	ToLinearF
LEAF_NODE	234:39	234:39	17	[
EXPR	234:40	234:51	17	wp [ stride ] & mask
FIELD	234:40	234:49	18	wp [ stride ]
LEAF_NODE	234:40	234:40	19	wp
LEAF_NODE	234:42	234:42	19	[
EXPR	234:43	234:43	19	stride
FIELD	234:43	234:43	20	stride
LEAF_NODE	234:43	234:43	21	stride
LEAF_NODE	234:49	234:49	19	]
LEAF_NODE	234:50	234:50	18	&
FIELD	234:51	234:51	18	mask
LEAF_NODE	234:51	234:51	19	mask
LEAF_NODE	234:55	234:55	17	]
LEAF_NODE	234:56	234:56	16	*
FIELD	234:57	234:57	16	SCALE12
LEAF_NODE	234:57	234:57	17	SCALE12
LEAF_NODE	234:64	234:64	13	;
EXPR_STATEMENT	235:6	235:23	12	* op = CLAMP12 ( t0 ) ;
EXPR	235:6	235:6	13	* op = CLAMP12 ( t0 )
ASSIGN	235:6	235:12	14	* op = CLAMP12 ( t0 )
LVAL	235:6	235:6	15	* op
UNARY_EXPR	235:6	235:7	16	* op
UNARY_OPERATOR	235:6	235:6	17	*
LEAF_NODE	235:6	235:6	18	*
FIELD	235:7	235:7	17	op
LEAF_NODE	235:7	235:7	18	op
ASSIGN_OP	235:10	235:10	15	=
LEAF_NODE	235:10	235:10	16	=
RVAL	235:12	235:12	15	CLAMP12 ( t0 )
FUNCTION_CALL	235:12	235:22	16	CLAMP12 ( t0 )
CALLEE	235:12	235:12	17	CLAMP12
LEAF_NODE	235:12	235:12	18	CLAMP12
LEAF_NODE	235:19	235:19	17	(
ARGUMENT	235:20	235:20	17	t0
FIELD	235:20	235:20	18	t0
LEAF_NODE	235:20	235:20	19	t0
LEAF_NODE	235:22	235:22	17	)
LEAF_NODE	235:23	235:23	13	;
EXPR_STATEMENT	235:26	235:30	12	wp ++ ;
EXPR	235:26	235:26	13	wp ++
FIELD	235:26	235:28	14	wp ++
LEAF_NODE	235:26	235:26	15	wp
LEAF_NODE	235:28	235:28	15	++
LEAF_NODE	235:30	235:30	13	;
LEAF_NODE	235:32	235:32	12	op
LEAF_NODE	235:34	235:34	12	++
LEAF_NODE	235:36	235:36	12	)
EXPR_STATEMENT	236:2	236:13	12	n -= stride ;
EXPR	236:2	236:2	13	n -= stride
ASSIGN	236:2	236:7	14	n -= stride
LVAL	236:2	236:2	15	n
FIELD	236:2	236:2	16	n
LEAF_NODE	236:2	236:2	17	n
ASSIGN_OP	236:4	236:4	15	-=
LEAF_NODE	236:4	236:4	16	-=
RVAL	236:7	236:7	15	stride
FIELD	236:7	236:7	16	stride
LEAF_NODE	236:7	236:7	17	stride
LEAF_NODE	236:13	236:13	13	;
LEAF_NODE	237:5	237:5	11	}
LEAF_NODE	238:1	238:1	8	}
LEAF_NODE	239:4	239:4	5	}
LEAF_NODE	240:0	240:0	2	}
FUNCTION_DEF	242:0	288:0	1	
RETURN_TYPE	242:0	242:7	2	static void
LEAF_NODE	242:0	242:0	3	static
TYPE_NAME	242:7	242:7	3	void
LEAF_NODE	242:7	242:7	4	void
FUNCTION_NAME	243:0	243:0	2	horizontalAccumulate16
LEAF_NODE	243:0	243:0	3	horizontalAccumulate16
PARAMETER_LIST	243:22	244:19	2	( uint16 * wp , int n , int stride , uint16 * op , uint16 * ToLinear16 )
LEAF_NODE	243:22	243:22	3	(
PARAMETER_DECL	243:23	243:31	3	uint16 * wp
TYPE	243:23	243:30	4	uint16 *
TYPE_NAME	243:23	243:23	5	uint16
LEAF_NODE	243:23	243:23	6	uint16
POINTER	243:30	243:30	5	*
LEAF_NODE	243:30	243:30	6	*
NAME	243:31	243:31	4	wp
LEAF_NODE	243:31	243:31	5	wp
LEAF_NODE	243:33	243:33	3	,
PARAMETER_DECL	243:35	243:39	3	int n
TYPE	243:35	243:35	4	int
TYPE_NAME	243:35	243:35	5	int
LEAF_NODE	243:35	243:35	6	int
NAME	243:39	243:39	4	n
LEAF_NODE	243:39	243:39	5	n
LEAF_NODE	243:40	243:40	3	,
PARAMETER_DECL	243:42	243:46	3	int stride
TYPE	243:42	243:42	4	int
TYPE_NAME	243:42	243:42	5	int
LEAF_NODE	243:42	243:42	6	int
NAME	243:46	243:46	4	stride
LEAF_NODE	243:46	243:46	5	stride
LEAF_NODE	243:52	243:52	3	,
PARAMETER_DECL	243:54	243:62	3	uint16 * op
TYPE	243:54	243:61	4	uint16 *
TYPE_NAME	243:54	243:54	5	uint16
LEAF_NODE	243:54	243:54	6	uint16
POINTER	243:61	243:61	5	*
LEAF_NODE	243:61	243:61	6	*
NAME	243:62	243:62	4	op
LEAF_NODE	243:62	243:62	5	op
LEAF_NODE	243:64	243:64	3	,
PARAMETER_DECL	244:1	244:9	3	uint16 * ToLinear16
TYPE	244:1	244:8	4	uint16 *
TYPE_NAME	244:1	244:1	5	uint16
LEAF_NODE	244:1	244:1	6	uint16
POINTER	244:8	244:8	5	*
LEAF_NODE	244:8	244:8	6	*
NAME	244:9	244:9	4	ToLinear16
LEAF_NODE	244:9	244:9	5	ToLinear16
LEAF_NODE	244:19	244:19	3	)
LEAF_NODE	245:0	245:0	2	{
STATEMENTS	246:4	248:4	2	
LEAF_NODE	246:4	246:4	3	register
SIMPLE_DECL	246:13	246:47	3	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask ;
INIT_DECL_LIST	246:13	246:13	4	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	246:13	246:27	5	unsigned int cr
TYPE	246:13	246:13	6	unsigned int
TYPE_NAME	246:13	246:22	7	unsigned int
LEAF_NODE	246:13	246:13	8	unsigned
LEAF_NODE	246:22	246:22	8	int
NAME	246:27	246:27	6	cr
LEAF_NODE	246:27	246:27	7	cr
LEAF_NODE	246:29	246:29	5	,
INIT_DECL_LIST	246:13	246:13	5	unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	246:13	246:31	6	unsigned int cg
TYPE	246:13	246:13	7	unsigned int
TYPE_NAME	246:13	246:22	8	unsigned int
LEAF_NODE	246:13	246:13	9	unsigned
LEAF_NODE	246:22	246:22	9	int
NAME	246:31	246:31	7	cg
LEAF_NODE	246:31	246:31	8	cg
LEAF_NODE	246:33	246:33	6	,
INIT_DECL_LIST	246:13	246:13	6	unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	246:13	246:35	7	unsigned int cb
TYPE	246:13	246:13	8	unsigned int
TYPE_NAME	246:13	246:22	9	unsigned int
LEAF_NODE	246:13	246:13	10	unsigned
LEAF_NODE	246:22	246:22	10	int
NAME	246:35	246:35	8	cb
LEAF_NODE	246:35	246:35	9	cb
LEAF_NODE	246:37	246:37	7	,
INIT_DECL_LIST	246:13	246:13	7	unsigned int ca , unsigned int mask
VAR_DECL	246:13	246:39	8	unsigned int ca
TYPE	246:13	246:13	9	unsigned int
TYPE_NAME	246:13	246:22	10	unsigned int
LEAF_NODE	246:13	246:13	11	unsigned
LEAF_NODE	246:22	246:22	11	int
NAME	246:39	246:39	9	ca
LEAF_NODE	246:39	246:39	10	ca
LEAF_NODE	246:41	246:41	8	,
VAR_DECL	246:13	246:43	8	unsigned int mask
TYPE	246:13	246:13	9	unsigned int
TYPE_NAME	246:13	246:22	10	unsigned int
LEAF_NODE	246:13	246:13	11	unsigned
LEAF_NODE	246:22	246:22	11	int
NAME	246:43	246:43	9	mask
LEAF_NODE	246:43	246:43	10	mask
LEAF_NODE	246:47	246:47	4	;
SELECTION	248:4	248:21	3	
KEYWORD	248:4	248:4	4	if
LEAF_NODE	248:4	248:4	5	if
LEAF_NODE	248:7	248:7	4	(
CONDITION	248:8	248:8	4	n >= stride
EXPR	248:8	248:13	5	n >= stride
FIELD	248:8	248:8	6	n
LEAF_NODE	248:8	248:8	7	n
REL_OPERATOR	248:10	248:10	6	>=
LEAF_NODE	248:10	248:10	7	>=
FIELD	248:13	248:13	6	stride
LEAF_NODE	248:13	248:13	7	stride
LEAF_NODE	248:19	248:19	4	)
STATEMENTS	248:21	287:4	4	
LEAF_NODE	248:21	248:21	5	{
STATEMENTS	249:1	278:3	5	
EXPR_STATEMENT	249:1	249:17	6	mask = CODE_MASK ;
EXPR	249:1	249:1	7	mask = CODE_MASK
ASSIGN	249:1	249:8	8	mask = CODE_MASK
LVAL	249:1	249:1	9	mask
FIELD	249:1	249:1	10	mask
LEAF_NODE	249:1	249:1	11	mask
ASSIGN_OP	249:6	249:6	9	=
LEAF_NODE	249:6	249:6	10	=
RVAL	249:8	249:8	9	CODE_MASK
FIELD	249:8	249:8	10	CODE_MASK
LEAF_NODE	249:8	249:8	11	CODE_MASK
LEAF_NODE	249:17	249:17	7	;
SELECTION	250:1	250:18	6	
KEYWORD	250:1	250:1	7	if
LEAF_NODE	250:1	250:1	8	if
LEAF_NODE	250:4	250:4	7	(
CONDITION	250:5	250:5	7	stride == 3
EXPR	250:5	250:15	8	stride == 3
FIELD	250:5	250:5	9	stride
LEAF_NODE	250:5	250:5	10	stride
EQ_OPERATOR	250:12	250:12	9	==
LEAF_NODE	250:12	250:12	10	==
FIELD	250:15	250:15	9	3
LEAF_NODE	250:15	250:15	10	3
LEAF_NODE	250:16	250:16	7	)
STATEMENTS	250:18	263:1	7	
LEAF_NODE	250:18	250:18	8	{
STATEMENTS	251:5	255:5	8	
EXPR_STATEMENT	251:5	251:44	9	op [ 0 ] = ToLinear16 [ cr = ( wp [ 0 ] & mask ) ] ;
EXPR	251:5	251:5	10	op [ 0 ] = ToLinear16 [ cr = ( wp [ 0 ] & mask ) ]
ASSIGN	251:5	251:13	11	op [ 0 ] = ToLinear16 [ cr = ( wp [ 0 ] & mask ) ]
LVAL	251:5	251:5	12	op [ 0 ]
FIELD	251:5	251:9	13	op [ 0 ]
LEAF_NODE	251:5	251:5	14	op
LEAF_NODE	251:7	251:7	14	[
EXPR	251:8	251:8	14	0
FIELD	251:8	251:8	15	0
LEAF_NODE	251:8	251:8	16	0
LEAF_NODE	251:9	251:9	14	]
ASSIGN_OP	251:11	251:11	12	=
LEAF_NODE	251:11	251:11	13	=
RVAL	251:13	251:13	12	ToLinear16 [ cr = ( wp [ 0 ] & mask ) ]
FIELD	251:13	251:43	13	ToLinear16 [ cr = ( wp [ 0 ] & mask ) ]
LEAF_NODE	251:13	251:13	14	ToLinear16
LEAF_NODE	251:23	251:23	14	[
EXPR	251:24	251:24	14	cr = ( wp [ 0 ] & mask )
ASSIGN	251:24	251:29	15	cr = ( wp [ 0 ] & mask )
LVAL	251:24	251:24	16	cr
FIELD	251:24	251:24	17	cr
LEAF_NODE	251:24	251:24	18	cr
ASSIGN_OP	251:27	251:27	16	=
LEAF_NODE	251:27	251:27	17	=
RVAL	251:29	251:42	16	( wp [ 0 ] & mask )
LEAF_NODE	251:29	251:29	17	(
FIELD	251:30	251:34	17	wp [ 0 ]
LEAF_NODE	251:30	251:30	18	wp
LEAF_NODE	251:32	251:32	18	[
EXPR	251:33	251:33	18	0
FIELD	251:33	251:33	19	0
LEAF_NODE	251:33	251:33	20	0
LEAF_NODE	251:34	251:34	18	]
LEAF_NODE	251:36	251:36	17	&
FIELD	251:38	251:38	17	mask
LEAF_NODE	251:38	251:38	18	mask
LEAF_NODE	251:42	251:42	17	)
LEAF_NODE	251:43	251:43	14	]
LEAF_NODE	251:44	251:44	10	;
EXPR_STATEMENT	252:5	252:44	9	op [ 1 ] = ToLinear16 [ cg = ( wp [ 1 ] & mask ) ] ;
EXPR	252:5	252:5	10	op [ 1 ] = ToLinear16 [ cg = ( wp [ 1 ] & mask ) ]
ASSIGN	252:5	252:13	11	op [ 1 ] = ToLinear16 [ cg = ( wp [ 1 ] & mask ) ]
LVAL	252:5	252:5	12	op [ 1 ]
FIELD	252:5	252:9	13	op [ 1 ]
LEAF_NODE	252:5	252:5	14	op
LEAF_NODE	252:7	252:7	14	[
EXPR	252:8	252:8	14	1
FIELD	252:8	252:8	15	1
LEAF_NODE	252:8	252:8	16	1
LEAF_NODE	252:9	252:9	14	]
ASSIGN_OP	252:11	252:11	12	=
LEAF_NODE	252:11	252:11	13	=
RVAL	252:13	252:13	12	ToLinear16 [ cg = ( wp [ 1 ] & mask ) ]
FIELD	252:13	252:43	13	ToLinear16 [ cg = ( wp [ 1 ] & mask ) ]
LEAF_NODE	252:13	252:13	14	ToLinear16
LEAF_NODE	252:23	252:23	14	[
EXPR	252:24	252:24	14	cg = ( wp [ 1 ] & mask )
ASSIGN	252:24	252:29	15	cg = ( wp [ 1 ] & mask )
LVAL	252:24	252:24	16	cg
FIELD	252:24	252:24	17	cg
LEAF_NODE	252:24	252:24	18	cg
ASSIGN_OP	252:27	252:27	16	=
LEAF_NODE	252:27	252:27	17	=
RVAL	252:29	252:42	16	( wp [ 1 ] & mask )
LEAF_NODE	252:29	252:29	17	(
FIELD	252:30	252:34	17	wp [ 1 ]
LEAF_NODE	252:30	252:30	18	wp
LEAF_NODE	252:32	252:32	18	[
EXPR	252:33	252:33	18	1
FIELD	252:33	252:33	19	1
LEAF_NODE	252:33	252:33	20	1
LEAF_NODE	252:34	252:34	18	]
LEAF_NODE	252:36	252:36	17	&
FIELD	252:38	252:38	17	mask
LEAF_NODE	252:38	252:38	18	mask
LEAF_NODE	252:42	252:42	17	)
LEAF_NODE	252:43	252:43	14	]
LEAF_NODE	252:44	252:44	10	;
EXPR_STATEMENT	253:5	253:44	9	op [ 2 ] = ToLinear16 [ cb = ( wp [ 2 ] & mask ) ] ;
EXPR	253:5	253:5	10	op [ 2 ] = ToLinear16 [ cb = ( wp [ 2 ] & mask ) ]
ASSIGN	253:5	253:13	11	op [ 2 ] = ToLinear16 [ cb = ( wp [ 2 ] & mask ) ]
LVAL	253:5	253:5	12	op [ 2 ]
FIELD	253:5	253:9	13	op [ 2 ]
LEAF_NODE	253:5	253:5	14	op
LEAF_NODE	253:7	253:7	14	[
EXPR	253:8	253:8	14	2
FIELD	253:8	253:8	15	2
LEAF_NODE	253:8	253:8	16	2
LEAF_NODE	253:9	253:9	14	]
ASSIGN_OP	253:11	253:11	12	=
LEAF_NODE	253:11	253:11	13	=
RVAL	253:13	253:13	12	ToLinear16 [ cb = ( wp [ 2 ] & mask ) ]
FIELD	253:13	253:43	13	ToLinear16 [ cb = ( wp [ 2 ] & mask ) ]
LEAF_NODE	253:13	253:13	14	ToLinear16
LEAF_NODE	253:23	253:23	14	[
EXPR	253:24	253:24	14	cb = ( wp [ 2 ] & mask )
ASSIGN	253:24	253:29	15	cb = ( wp [ 2 ] & mask )
LVAL	253:24	253:24	16	cb
FIELD	253:24	253:24	17	cb
LEAF_NODE	253:24	253:24	18	cb
ASSIGN_OP	253:27	253:27	16	=
LEAF_NODE	253:27	253:27	17	=
RVAL	253:29	253:42	16	( wp [ 2 ] & mask )
LEAF_NODE	253:29	253:29	17	(
FIELD	253:30	253:34	17	wp [ 2 ]
LEAF_NODE	253:30	253:30	18	wp
LEAF_NODE	253:32	253:32	18	[
EXPR	253:33	253:33	18	2
FIELD	253:33	253:33	19	2
LEAF_NODE	253:33	253:33	20	2
LEAF_NODE	253:34	253:34	18	]
LEAF_NODE	253:36	253:36	17	&
FIELD	253:38	253:38	17	mask
LEAF_NODE	253:38	253:38	18	mask
LEAF_NODE	253:42	253:42	17	)
LEAF_NODE	253:43	253:43	14	]
LEAF_NODE	253:44	253:44	10	;
EXPR_STATEMENT	254:5	254:11	9	n -= 3 ;
EXPR	254:5	254:5	10	n -= 3
ASSIGN	254:5	254:10	11	n -= 3
LVAL	254:5	254:5	12	n
FIELD	254:5	254:5	13	n
LEAF_NODE	254:5	254:5	14	n
ASSIGN_OP	254:7	254:7	12	-=
LEAF_NODE	254:7	254:7	13	-=
RVAL	254:10	254:10	12	3
FIELD	254:10	254:10	13	3
LEAF_NODE	254:10	254:10	14	3
LEAF_NODE	254:11	254:11	10	;
ITERATION	255:5	255:19	9	
KEYWORD	255:5	255:5	10	while
LEAF_NODE	255:5	255:5	11	while
LEAF_NODE	255:11	255:11	10	(
CONDITION	255:12	255:12	10	n > 0
EXPR	255:12	255:16	11	n > 0
FIELD	255:12	255:12	12	n
LEAF_NODE	255:12	255:12	13	n
REL_OPERATOR	255:14	255:14	12	>
LEAF_NODE	255:14	255:14	13	>
FIELD	255:16	255:16	12	0
LEAF_NODE	255:16	255:16	13	0
LEAF_NODE	255:17	255:17	10	)
STATEMENTS	255:19	262:5	10	
LEAF_NODE	255:19	255:19	11	{
STATEMENTS	256:2	261:2	11	
EXPR_STATEMENT	256:2	256:9	12	wp += 3 ;
EXPR	256:2	256:2	13	wp += 3
ASSIGN	256:2	256:8	14	wp += 3
LVAL	256:2	256:2	15	wp
FIELD	256:2	256:2	16	wp
LEAF_NODE	256:2	256:2	17	wp
ASSIGN_OP	256:5	256:5	15	+=
LEAF_NODE	256:5	256:5	16	+=
RVAL	256:8	256:8	15	3
FIELD	256:8	256:8	16	3
LEAF_NODE	256:8	256:8	17	3
LEAF_NODE	256:9	256:9	13	;
EXPR_STATEMENT	257:2	257:9	12	op += 3 ;
EXPR	257:2	257:2	13	op += 3
ASSIGN	257:2	257:8	14	op += 3
LVAL	257:2	257:2	15	op
FIELD	257:2	257:2	16	op
LEAF_NODE	257:2	257:2	17	op
ASSIGN_OP	257:5	257:5	15	+=
LEAF_NODE	257:5	257:5	16	+=
RVAL	257:8	257:8	15	3
FIELD	257:8	257:8	16	3
LEAF_NODE	257:8	257:8	17	3
LEAF_NODE	257:9	257:9	13	;
EXPR_STATEMENT	258:2	258:8	12	n -= 3 ;
EXPR	258:2	258:2	13	n -= 3
ASSIGN	258:2	258:7	14	n -= 3
LVAL	258:2	258:2	15	n
FIELD	258:2	258:2	16	n
LEAF_NODE	258:2	258:2	17	n
ASSIGN_OP	258:4	258:4	15	-=
LEAF_NODE	258:4	258:4	16	-=
RVAL	258:7	258:7	15	3
FIELD	258:7	258:7	16	3
LEAF_NODE	258:7	258:7	17	3
LEAF_NODE	258:8	258:8	13	;
EXPR_STATEMENT	259:2	259:42	12	op [ 0 ] = ToLinear16 [ ( cr += wp [ 0 ] ) & mask ] ;
EXPR	259:2	259:2	13	op [ 0 ] = ToLinear16 [ ( cr += wp [ 0 ] ) & mask ]
ASSIGN	259:2	259:10	14	op [ 0 ] = ToLinear16 [ ( cr += wp [ 0 ] ) & mask ]
LVAL	259:2	259:2	15	op [ 0 ]
FIELD	259:2	259:6	16	op [ 0 ]
LEAF_NODE	259:2	259:2	17	op
LEAF_NODE	259:4	259:4	17	[
EXPR	259:5	259:5	17	0
FIELD	259:5	259:5	18	0
LEAF_NODE	259:5	259:5	19	0
LEAF_NODE	259:6	259:6	17	]
ASSIGN_OP	259:8	259:8	15	=
LEAF_NODE	259:8	259:8	16	=
RVAL	259:10	259:10	15	ToLinear16 [ ( cr += wp [ 0 ] ) & mask ]
FIELD	259:10	259:41	16	ToLinear16 [ ( cr += wp [ 0 ] ) & mask ]
LEAF_NODE	259:10	259:10	17	ToLinear16
LEAF_NODE	259:20	259:20	17	[
EXPR	259:21	259:37	17	( cr += wp [ 0 ] ) & mask
LEAF_NODE	259:21	259:21	18	(
ASSIGN	259:22	259:28	18	cr += wp [ 0 ]
LVAL	259:22	259:22	19	cr
FIELD	259:22	259:22	20	cr
LEAF_NODE	259:22	259:22	21	cr
ASSIGN_OP	259:25	259:25	19	+=
LEAF_NODE	259:25	259:25	20	+=
RVAL	259:28	259:28	19	wp [ 0 ]
FIELD	259:28	259:32	20	wp [ 0 ]
LEAF_NODE	259:28	259:28	21	wp
LEAF_NODE	259:30	259:30	21	[
EXPR	259:31	259:31	21	0
FIELD	259:31	259:31	22	0
LEAF_NODE	259:31	259:31	23	0
LEAF_NODE	259:32	259:32	21	]
LEAF_NODE	259:33	259:33	18	)
LEAF_NODE	259:35	259:35	18	&
FIELD	259:37	259:37	18	mask
LEAF_NODE	259:37	259:37	19	mask
LEAF_NODE	259:41	259:41	17	]
LEAF_NODE	259:42	259:42	13	;
EXPR_STATEMENT	260:2	260:42	12	op [ 1 ] = ToLinear16 [ ( cg += wp [ 1 ] ) & mask ] ;
EXPR	260:2	260:2	13	op [ 1 ] = ToLinear16 [ ( cg += wp [ 1 ] ) & mask ]
ASSIGN	260:2	260:10	14	op [ 1 ] = ToLinear16 [ ( cg += wp [ 1 ] ) & mask ]
LVAL	260:2	260:2	15	op [ 1 ]
FIELD	260:2	260:6	16	op [ 1 ]
LEAF_NODE	260:2	260:2	17	op
LEAF_NODE	260:4	260:4	17	[
EXPR	260:5	260:5	17	1
FIELD	260:5	260:5	18	1
LEAF_NODE	260:5	260:5	19	1
LEAF_NODE	260:6	260:6	17	]
ASSIGN_OP	260:8	260:8	15	=
LEAF_NODE	260:8	260:8	16	=
RVAL	260:10	260:10	15	ToLinear16 [ ( cg += wp [ 1 ] ) & mask ]
FIELD	260:10	260:41	16	ToLinear16 [ ( cg += wp [ 1 ] ) & mask ]
LEAF_NODE	260:10	260:10	17	ToLinear16
LEAF_NODE	260:20	260:20	17	[
EXPR	260:21	260:37	17	( cg += wp [ 1 ] ) & mask
LEAF_NODE	260:21	260:21	18	(
ASSIGN	260:22	260:28	18	cg += wp [ 1 ]
LVAL	260:22	260:22	19	cg
FIELD	260:22	260:22	20	cg
LEAF_NODE	260:22	260:22	21	cg
ASSIGN_OP	260:25	260:25	19	+=
LEAF_NODE	260:25	260:25	20	+=
RVAL	260:28	260:28	19	wp [ 1 ]
FIELD	260:28	260:32	20	wp [ 1 ]
LEAF_NODE	260:28	260:28	21	wp
LEAF_NODE	260:30	260:30	21	[
EXPR	260:31	260:31	21	1
FIELD	260:31	260:31	22	1
LEAF_NODE	260:31	260:31	23	1
LEAF_NODE	260:32	260:32	21	]
LEAF_NODE	260:33	260:33	18	)
LEAF_NODE	260:35	260:35	18	&
FIELD	260:37	260:37	18	mask
LEAF_NODE	260:37	260:37	19	mask
LEAF_NODE	260:41	260:41	17	]
LEAF_NODE	260:42	260:42	13	;
EXPR_STATEMENT	261:2	261:42	12	op [ 2 ] = ToLinear16 [ ( cb += wp [ 2 ] ) & mask ] ;
EXPR	261:2	261:2	13	op [ 2 ] = ToLinear16 [ ( cb += wp [ 2 ] ) & mask ]
ASSIGN	261:2	261:10	14	op [ 2 ] = ToLinear16 [ ( cb += wp [ 2 ] ) & mask ]
LVAL	261:2	261:2	15	op [ 2 ]
FIELD	261:2	261:6	16	op [ 2 ]
LEAF_NODE	261:2	261:2	17	op
LEAF_NODE	261:4	261:4	17	[
EXPR	261:5	261:5	17	2
FIELD	261:5	261:5	18	2
LEAF_NODE	261:5	261:5	19	2
LEAF_NODE	261:6	261:6	17	]
ASSIGN_OP	261:8	261:8	15	=
LEAF_NODE	261:8	261:8	16	=
RVAL	261:10	261:10	15	ToLinear16 [ ( cb += wp [ 2 ] ) & mask ]
FIELD	261:10	261:41	16	ToLinear16 [ ( cb += wp [ 2 ] ) & mask ]
LEAF_NODE	261:10	261:10	17	ToLinear16
LEAF_NODE	261:20	261:20	17	[
EXPR	261:21	261:37	17	( cb += wp [ 2 ] ) & mask
LEAF_NODE	261:21	261:21	18	(
ASSIGN	261:22	261:28	18	cb += wp [ 2 ]
LVAL	261:22	261:22	19	cb
FIELD	261:22	261:22	20	cb
LEAF_NODE	261:22	261:22	21	cb
ASSIGN_OP	261:25	261:25	19	+=
LEAF_NODE	261:25	261:25	20	+=
RVAL	261:28	261:28	19	wp [ 2 ]
FIELD	261:28	261:32	20	wp [ 2 ]
LEAF_NODE	261:28	261:28	21	wp
LEAF_NODE	261:30	261:30	21	[
EXPR	261:31	261:31	21	2
FIELD	261:31	261:31	22	2
LEAF_NODE	261:31	261:31	23	2
LEAF_NODE	261:32	261:32	21	]
LEAF_NODE	261:33	261:33	18	)
LEAF_NODE	261:35	261:35	18	&
FIELD	261:37	261:37	18	mask
LEAF_NODE	261:37	261:37	19	mask
LEAF_NODE	261:41	261:41	17	]
LEAF_NODE	261:42	261:42	13	;
LEAF_NODE	262:5	262:5	11	}
LEAF_NODE	263:1	263:1	8	}
SELECTION	263:3	263:8	6	
KEYWORD	263:3	263:3	7	else
LEAF_NODE	263:3	263:3	8	else
STATEMENTS	263:8	263:8	7	
SELECTION	263:8	263:25	8	
KEYWORD	263:8	263:8	9	if
LEAF_NODE	263:8	263:8	10	if
LEAF_NODE	263:11	263:11	9	(
CONDITION	263:12	263:12	9	stride == 4
EXPR	263:12	263:22	10	stride == 4
FIELD	263:12	263:12	11	stride
LEAF_NODE	263:12	263:12	12	stride
EQ_OPERATOR	263:19	263:19	11	==
LEAF_NODE	263:19	263:19	12	==
FIELD	263:22	263:22	11	4
LEAF_NODE	263:22	263:22	12	4
LEAF_NODE	263:23	263:23	9	)
STATEMENTS	263:25	278:1	9	
LEAF_NODE	263:25	263:25	10	{
STATEMENTS	264:5	269:5	10	
EXPR_STATEMENT	264:5	264:44	11	op [ 0 ] = ToLinear16 [ cr = ( wp [ 0 ] & mask ) ] ;
EXPR	264:5	264:5	12	op [ 0 ] = ToLinear16 [ cr = ( wp [ 0 ] & mask ) ]
ASSIGN	264:5	264:13	13	op [ 0 ] = ToLinear16 [ cr = ( wp [ 0 ] & mask ) ]
LVAL	264:5	264:5	14	op [ 0 ]
FIELD	264:5	264:9	15	op [ 0 ]
LEAF_NODE	264:5	264:5	16	op
LEAF_NODE	264:7	264:7	16	[
EXPR	264:8	264:8	16	0
FIELD	264:8	264:8	17	0
LEAF_NODE	264:8	264:8	18	0
LEAF_NODE	264:9	264:9	16	]
ASSIGN_OP	264:11	264:11	14	=
LEAF_NODE	264:11	264:11	15	=
RVAL	264:13	264:13	14	ToLinear16 [ cr = ( wp [ 0 ] & mask ) ]
FIELD	264:13	264:43	15	ToLinear16 [ cr = ( wp [ 0 ] & mask ) ]
LEAF_NODE	264:13	264:13	16	ToLinear16
LEAF_NODE	264:23	264:23	16	[
EXPR	264:24	264:24	16	cr = ( wp [ 0 ] & mask )
ASSIGN	264:24	264:29	17	cr = ( wp [ 0 ] & mask )
LVAL	264:24	264:24	18	cr
FIELD	264:24	264:24	19	cr
LEAF_NODE	264:24	264:24	20	cr
ASSIGN_OP	264:27	264:27	18	=
LEAF_NODE	264:27	264:27	19	=
RVAL	264:29	264:42	18	( wp [ 0 ] & mask )
LEAF_NODE	264:29	264:29	19	(
FIELD	264:30	264:34	19	wp [ 0 ]
LEAF_NODE	264:30	264:30	20	wp
LEAF_NODE	264:32	264:32	20	[
EXPR	264:33	264:33	20	0
FIELD	264:33	264:33	21	0
LEAF_NODE	264:33	264:33	22	0
LEAF_NODE	264:34	264:34	20	]
LEAF_NODE	264:36	264:36	19	&
FIELD	264:38	264:38	19	mask
LEAF_NODE	264:38	264:38	20	mask
LEAF_NODE	264:42	264:42	19	)
LEAF_NODE	264:43	264:43	16	]
LEAF_NODE	264:44	264:44	12	;
EXPR_STATEMENT	265:5	265:44	11	op [ 1 ] = ToLinear16 [ cg = ( wp [ 1 ] & mask ) ] ;
EXPR	265:5	265:5	12	op [ 1 ] = ToLinear16 [ cg = ( wp [ 1 ] & mask ) ]
ASSIGN	265:5	265:13	13	op [ 1 ] = ToLinear16 [ cg = ( wp [ 1 ] & mask ) ]
LVAL	265:5	265:5	14	op [ 1 ]
FIELD	265:5	265:9	15	op [ 1 ]
LEAF_NODE	265:5	265:5	16	op
LEAF_NODE	265:7	265:7	16	[
EXPR	265:8	265:8	16	1
FIELD	265:8	265:8	17	1
LEAF_NODE	265:8	265:8	18	1
LEAF_NODE	265:9	265:9	16	]
ASSIGN_OP	265:11	265:11	14	=
LEAF_NODE	265:11	265:11	15	=
RVAL	265:13	265:13	14	ToLinear16 [ cg = ( wp [ 1 ] & mask ) ]
FIELD	265:13	265:43	15	ToLinear16 [ cg = ( wp [ 1 ] & mask ) ]
LEAF_NODE	265:13	265:13	16	ToLinear16
LEAF_NODE	265:23	265:23	16	[
EXPR	265:24	265:24	16	cg = ( wp [ 1 ] & mask )
ASSIGN	265:24	265:29	17	cg = ( wp [ 1 ] & mask )
LVAL	265:24	265:24	18	cg
FIELD	265:24	265:24	19	cg
LEAF_NODE	265:24	265:24	20	cg
ASSIGN_OP	265:27	265:27	18	=
LEAF_NODE	265:27	265:27	19	=
RVAL	265:29	265:42	18	( wp [ 1 ] & mask )
LEAF_NODE	265:29	265:29	19	(
FIELD	265:30	265:34	19	wp [ 1 ]
LEAF_NODE	265:30	265:30	20	wp
LEAF_NODE	265:32	265:32	20	[
EXPR	265:33	265:33	20	1
FIELD	265:33	265:33	21	1
LEAF_NODE	265:33	265:33	22	1
LEAF_NODE	265:34	265:34	20	]
LEAF_NODE	265:36	265:36	19	&
FIELD	265:38	265:38	19	mask
LEAF_NODE	265:38	265:38	20	mask
LEAF_NODE	265:42	265:42	19	)
LEAF_NODE	265:43	265:43	16	]
LEAF_NODE	265:44	265:44	12	;
EXPR_STATEMENT	266:5	266:44	11	op [ 2 ] = ToLinear16 [ cb = ( wp [ 2 ] & mask ) ] ;
EXPR	266:5	266:5	12	op [ 2 ] = ToLinear16 [ cb = ( wp [ 2 ] & mask ) ]
ASSIGN	266:5	266:13	13	op [ 2 ] = ToLinear16 [ cb = ( wp [ 2 ] & mask ) ]
LVAL	266:5	266:5	14	op [ 2 ]
FIELD	266:5	266:9	15	op [ 2 ]
LEAF_NODE	266:5	266:5	16	op
LEAF_NODE	266:7	266:7	16	[
EXPR	266:8	266:8	16	2
FIELD	266:8	266:8	17	2
LEAF_NODE	266:8	266:8	18	2
LEAF_NODE	266:9	266:9	16	]
ASSIGN_OP	266:11	266:11	14	=
LEAF_NODE	266:11	266:11	15	=
RVAL	266:13	266:13	14	ToLinear16 [ cb = ( wp [ 2 ] & mask ) ]
FIELD	266:13	266:43	15	ToLinear16 [ cb = ( wp [ 2 ] & mask ) ]
LEAF_NODE	266:13	266:13	16	ToLinear16
LEAF_NODE	266:23	266:23	16	[
EXPR	266:24	266:24	16	cb = ( wp [ 2 ] & mask )
ASSIGN	266:24	266:29	17	cb = ( wp [ 2 ] & mask )
LVAL	266:24	266:24	18	cb
FIELD	266:24	266:24	19	cb
LEAF_NODE	266:24	266:24	20	cb
ASSIGN_OP	266:27	266:27	18	=
LEAF_NODE	266:27	266:27	19	=
RVAL	266:29	266:42	18	( wp [ 2 ] & mask )
LEAF_NODE	266:29	266:29	19	(
FIELD	266:30	266:34	19	wp [ 2 ]
LEAF_NODE	266:30	266:30	20	wp
LEAF_NODE	266:32	266:32	20	[
EXPR	266:33	266:33	20	2
FIELD	266:33	266:33	21	2
LEAF_NODE	266:33	266:33	22	2
LEAF_NODE	266:34	266:34	20	]
LEAF_NODE	266:36	266:36	19	&
FIELD	266:38	266:38	19	mask
LEAF_NODE	266:38	266:38	20	mask
LEAF_NODE	266:42	266:42	19	)
LEAF_NODE	266:43	266:43	16	]
LEAF_NODE	266:44	266:44	12	;
EXPR_STATEMENT	267:5	267:44	11	op [ 3 ] = ToLinear16 [ ca = ( wp [ 3 ] & mask ) ] ;
EXPR	267:5	267:5	12	op [ 3 ] = ToLinear16 [ ca = ( wp [ 3 ] & mask ) ]
ASSIGN	267:5	267:13	13	op [ 3 ] = ToLinear16 [ ca = ( wp [ 3 ] & mask ) ]
LVAL	267:5	267:5	14	op [ 3 ]
FIELD	267:5	267:9	15	op [ 3 ]
LEAF_NODE	267:5	267:5	16	op
LEAF_NODE	267:7	267:7	16	[
EXPR	267:8	267:8	16	3
FIELD	267:8	267:8	17	3
LEAF_NODE	267:8	267:8	18	3
LEAF_NODE	267:9	267:9	16	]
ASSIGN_OP	267:11	267:11	14	=
LEAF_NODE	267:11	267:11	15	=
RVAL	267:13	267:13	14	ToLinear16 [ ca = ( wp [ 3 ] & mask ) ]
FIELD	267:13	267:43	15	ToLinear16 [ ca = ( wp [ 3 ] & mask ) ]
LEAF_NODE	267:13	267:13	16	ToLinear16
LEAF_NODE	267:23	267:23	16	[
EXPR	267:24	267:24	16	ca = ( wp [ 3 ] & mask )
ASSIGN	267:24	267:29	17	ca = ( wp [ 3 ] & mask )
LVAL	267:24	267:24	18	ca
FIELD	267:24	267:24	19	ca
LEAF_NODE	267:24	267:24	20	ca
ASSIGN_OP	267:27	267:27	18	=
LEAF_NODE	267:27	267:27	19	=
RVAL	267:29	267:42	18	( wp [ 3 ] & mask )
LEAF_NODE	267:29	267:29	19	(
FIELD	267:30	267:34	19	wp [ 3 ]
LEAF_NODE	267:30	267:30	20	wp
LEAF_NODE	267:32	267:32	20	[
EXPR	267:33	267:33	20	3
FIELD	267:33	267:33	21	3
LEAF_NODE	267:33	267:33	22	3
LEAF_NODE	267:34	267:34	20	]
LEAF_NODE	267:36	267:36	19	&
FIELD	267:38	267:38	19	mask
LEAF_NODE	267:38	267:38	20	mask
LEAF_NODE	267:42	267:42	19	)
LEAF_NODE	267:43	267:43	16	]
LEAF_NODE	267:44	267:44	12	;
EXPR_STATEMENT	268:5	268:11	11	n -= 4 ;
EXPR	268:5	268:5	12	n -= 4
ASSIGN	268:5	268:10	13	n -= 4
LVAL	268:5	268:5	14	n
FIELD	268:5	268:5	15	n
LEAF_NODE	268:5	268:5	16	n
ASSIGN_OP	268:7	268:7	14	-=
LEAF_NODE	268:7	268:7	15	-=
RVAL	268:10	268:10	14	4
FIELD	268:10	268:10	15	4
LEAF_NODE	268:10	268:10	16	4
LEAF_NODE	268:11	268:11	12	;
ITERATION	269:5	269:19	11	
KEYWORD	269:5	269:5	12	while
LEAF_NODE	269:5	269:5	13	while
LEAF_NODE	269:11	269:11	12	(
CONDITION	269:12	269:12	12	n > 0
EXPR	269:12	269:16	13	n > 0
FIELD	269:12	269:12	14	n
LEAF_NODE	269:12	269:12	15	n
REL_OPERATOR	269:14	269:14	14	>
LEAF_NODE	269:14	269:14	15	>
FIELD	269:16	269:16	14	0
LEAF_NODE	269:16	269:16	15	0
LEAF_NODE	269:17	269:17	12	)
STATEMENTS	269:19	277:5	12	
LEAF_NODE	269:19	269:19	13	{
STATEMENTS	270:2	276:2	13	
EXPR_STATEMENT	270:2	270:9	14	wp += 4 ;
EXPR	270:2	270:2	15	wp += 4
ASSIGN	270:2	270:8	16	wp += 4
LVAL	270:2	270:2	17	wp
FIELD	270:2	270:2	18	wp
LEAF_NODE	270:2	270:2	19	wp
ASSIGN_OP	270:5	270:5	17	+=
LEAF_NODE	270:5	270:5	18	+=
RVAL	270:8	270:8	17	4
FIELD	270:8	270:8	18	4
LEAF_NODE	270:8	270:8	19	4
LEAF_NODE	270:9	270:9	15	;
EXPR_STATEMENT	271:2	271:9	14	op += 4 ;
EXPR	271:2	271:2	15	op += 4
ASSIGN	271:2	271:8	16	op += 4
LVAL	271:2	271:2	17	op
FIELD	271:2	271:2	18	op
LEAF_NODE	271:2	271:2	19	op
ASSIGN_OP	271:5	271:5	17	+=
LEAF_NODE	271:5	271:5	18	+=
RVAL	271:8	271:8	17	4
FIELD	271:8	271:8	18	4
LEAF_NODE	271:8	271:8	19	4
LEAF_NODE	271:9	271:9	15	;
EXPR_STATEMENT	272:2	272:8	14	n -= 4 ;
EXPR	272:2	272:2	15	n -= 4
ASSIGN	272:2	272:7	16	n -= 4
LVAL	272:2	272:2	17	n
FIELD	272:2	272:2	18	n
LEAF_NODE	272:2	272:2	19	n
ASSIGN_OP	272:4	272:4	17	-=
LEAF_NODE	272:4	272:4	18	-=
RVAL	272:7	272:7	17	4
FIELD	272:7	272:7	18	4
LEAF_NODE	272:7	272:7	19	4
LEAF_NODE	272:8	272:8	15	;
EXPR_STATEMENT	273:2	273:42	14	op [ 0 ] = ToLinear16 [ ( cr += wp [ 0 ] ) & mask ] ;
EXPR	273:2	273:2	15	op [ 0 ] = ToLinear16 [ ( cr += wp [ 0 ] ) & mask ]
ASSIGN	273:2	273:10	16	op [ 0 ] = ToLinear16 [ ( cr += wp [ 0 ] ) & mask ]
LVAL	273:2	273:2	17	op [ 0 ]
FIELD	273:2	273:6	18	op [ 0 ]
LEAF_NODE	273:2	273:2	19	op
LEAF_NODE	273:4	273:4	19	[
EXPR	273:5	273:5	19	0
FIELD	273:5	273:5	20	0
LEAF_NODE	273:5	273:5	21	0
LEAF_NODE	273:6	273:6	19	]
ASSIGN_OP	273:8	273:8	17	=
LEAF_NODE	273:8	273:8	18	=
RVAL	273:10	273:10	17	ToLinear16 [ ( cr += wp [ 0 ] ) & mask ]
FIELD	273:10	273:41	18	ToLinear16 [ ( cr += wp [ 0 ] ) & mask ]
LEAF_NODE	273:10	273:10	19	ToLinear16
LEAF_NODE	273:20	273:20	19	[
EXPR	273:21	273:37	19	( cr += wp [ 0 ] ) & mask
LEAF_NODE	273:21	273:21	20	(
ASSIGN	273:22	273:28	20	cr += wp [ 0 ]
LVAL	273:22	273:22	21	cr
FIELD	273:22	273:22	22	cr
LEAF_NODE	273:22	273:22	23	cr
ASSIGN_OP	273:25	273:25	21	+=
LEAF_NODE	273:25	273:25	22	+=
RVAL	273:28	273:28	21	wp [ 0 ]
FIELD	273:28	273:32	22	wp [ 0 ]
LEAF_NODE	273:28	273:28	23	wp
LEAF_NODE	273:30	273:30	23	[
EXPR	273:31	273:31	23	0
FIELD	273:31	273:31	24	0
LEAF_NODE	273:31	273:31	25	0
LEAF_NODE	273:32	273:32	23	]
LEAF_NODE	273:33	273:33	20	)
LEAF_NODE	273:35	273:35	20	&
FIELD	273:37	273:37	20	mask
LEAF_NODE	273:37	273:37	21	mask
LEAF_NODE	273:41	273:41	19	]
LEAF_NODE	273:42	273:42	15	;
EXPR_STATEMENT	274:2	274:42	14	op [ 1 ] = ToLinear16 [ ( cg += wp [ 1 ] ) & mask ] ;
EXPR	274:2	274:2	15	op [ 1 ] = ToLinear16 [ ( cg += wp [ 1 ] ) & mask ]
ASSIGN	274:2	274:10	16	op [ 1 ] = ToLinear16 [ ( cg += wp [ 1 ] ) & mask ]
LVAL	274:2	274:2	17	op [ 1 ]
FIELD	274:2	274:6	18	op [ 1 ]
LEAF_NODE	274:2	274:2	19	op
LEAF_NODE	274:4	274:4	19	[
EXPR	274:5	274:5	19	1
FIELD	274:5	274:5	20	1
LEAF_NODE	274:5	274:5	21	1
LEAF_NODE	274:6	274:6	19	]
ASSIGN_OP	274:8	274:8	17	=
LEAF_NODE	274:8	274:8	18	=
RVAL	274:10	274:10	17	ToLinear16 [ ( cg += wp [ 1 ] ) & mask ]
FIELD	274:10	274:41	18	ToLinear16 [ ( cg += wp [ 1 ] ) & mask ]
LEAF_NODE	274:10	274:10	19	ToLinear16
LEAF_NODE	274:20	274:20	19	[
EXPR	274:21	274:37	19	( cg += wp [ 1 ] ) & mask
LEAF_NODE	274:21	274:21	20	(
ASSIGN	274:22	274:28	20	cg += wp [ 1 ]
LVAL	274:22	274:22	21	cg
FIELD	274:22	274:22	22	cg
LEAF_NODE	274:22	274:22	23	cg
ASSIGN_OP	274:25	274:25	21	+=
LEAF_NODE	274:25	274:25	22	+=
RVAL	274:28	274:28	21	wp [ 1 ]
FIELD	274:28	274:32	22	wp [ 1 ]
LEAF_NODE	274:28	274:28	23	wp
LEAF_NODE	274:30	274:30	23	[
EXPR	274:31	274:31	23	1
FIELD	274:31	274:31	24	1
LEAF_NODE	274:31	274:31	25	1
LEAF_NODE	274:32	274:32	23	]
LEAF_NODE	274:33	274:33	20	)
LEAF_NODE	274:35	274:35	20	&
FIELD	274:37	274:37	20	mask
LEAF_NODE	274:37	274:37	21	mask
LEAF_NODE	274:41	274:41	19	]
LEAF_NODE	274:42	274:42	15	;
EXPR_STATEMENT	275:2	275:42	14	op [ 2 ] = ToLinear16 [ ( cb += wp [ 2 ] ) & mask ] ;
EXPR	275:2	275:2	15	op [ 2 ] = ToLinear16 [ ( cb += wp [ 2 ] ) & mask ]
ASSIGN	275:2	275:10	16	op [ 2 ] = ToLinear16 [ ( cb += wp [ 2 ] ) & mask ]
LVAL	275:2	275:2	17	op [ 2 ]
FIELD	275:2	275:6	18	op [ 2 ]
LEAF_NODE	275:2	275:2	19	op
LEAF_NODE	275:4	275:4	19	[
EXPR	275:5	275:5	19	2
FIELD	275:5	275:5	20	2
LEAF_NODE	275:5	275:5	21	2
LEAF_NODE	275:6	275:6	19	]
ASSIGN_OP	275:8	275:8	17	=
LEAF_NODE	275:8	275:8	18	=
RVAL	275:10	275:10	17	ToLinear16 [ ( cb += wp [ 2 ] ) & mask ]
FIELD	275:10	275:41	18	ToLinear16 [ ( cb += wp [ 2 ] ) & mask ]
LEAF_NODE	275:10	275:10	19	ToLinear16
LEAF_NODE	275:20	275:20	19	[
EXPR	275:21	275:37	19	( cb += wp [ 2 ] ) & mask
LEAF_NODE	275:21	275:21	20	(
ASSIGN	275:22	275:28	20	cb += wp [ 2 ]
LVAL	275:22	275:22	21	cb
FIELD	275:22	275:22	22	cb
LEAF_NODE	275:22	275:22	23	cb
ASSIGN_OP	275:25	275:25	21	+=
LEAF_NODE	275:25	275:25	22	+=
RVAL	275:28	275:28	21	wp [ 2 ]
FIELD	275:28	275:32	22	wp [ 2 ]
LEAF_NODE	275:28	275:28	23	wp
LEAF_NODE	275:30	275:30	23	[
EXPR	275:31	275:31	23	2
FIELD	275:31	275:31	24	2
LEAF_NODE	275:31	275:31	25	2
LEAF_NODE	275:32	275:32	23	]
LEAF_NODE	275:33	275:33	20	)
LEAF_NODE	275:35	275:35	20	&
FIELD	275:37	275:37	20	mask
LEAF_NODE	275:37	275:37	21	mask
LEAF_NODE	275:41	275:41	19	]
LEAF_NODE	275:42	275:42	15	;
EXPR_STATEMENT	276:2	276:42	14	op [ 3 ] = ToLinear16 [ ( ca += wp [ 3 ] ) & mask ] ;
EXPR	276:2	276:2	15	op [ 3 ] = ToLinear16 [ ( ca += wp [ 3 ] ) & mask ]
ASSIGN	276:2	276:10	16	op [ 3 ] = ToLinear16 [ ( ca += wp [ 3 ] ) & mask ]
LVAL	276:2	276:2	17	op [ 3 ]
FIELD	276:2	276:6	18	op [ 3 ]
LEAF_NODE	276:2	276:2	19	op
LEAF_NODE	276:4	276:4	19	[
EXPR	276:5	276:5	19	3
FIELD	276:5	276:5	20	3
LEAF_NODE	276:5	276:5	21	3
LEAF_NODE	276:6	276:6	19	]
ASSIGN_OP	276:8	276:8	17	=
LEAF_NODE	276:8	276:8	18	=
RVAL	276:10	276:10	17	ToLinear16 [ ( ca += wp [ 3 ] ) & mask ]
FIELD	276:10	276:41	18	ToLinear16 [ ( ca += wp [ 3 ] ) & mask ]
LEAF_NODE	276:10	276:10	19	ToLinear16
LEAF_NODE	276:20	276:20	19	[
EXPR	276:21	276:37	19	( ca += wp [ 3 ] ) & mask
LEAF_NODE	276:21	276:21	20	(
ASSIGN	276:22	276:28	20	ca += wp [ 3 ]
LVAL	276:22	276:22	21	ca
FIELD	276:22	276:22	22	ca
LEAF_NODE	276:22	276:22	23	ca
ASSIGN_OP	276:25	276:25	21	+=
LEAF_NODE	276:25	276:25	22	+=
RVAL	276:28	276:28	21	wp [ 3 ]
FIELD	276:28	276:32	22	wp [ 3 ]
LEAF_NODE	276:28	276:28	23	wp
LEAF_NODE	276:30	276:30	23	[
EXPR	276:31	276:31	23	3
FIELD	276:31	276:31	24	3
LEAF_NODE	276:31	276:31	25	3
LEAF_NODE	276:32	276:32	23	]
LEAF_NODE	276:33	276:33	20	)
LEAF_NODE	276:35	276:35	20	&
FIELD	276:37	276:37	20	mask
LEAF_NODE	276:37	276:37	21	mask
LEAF_NODE	276:41	276:41	19	]
LEAF_NODE	276:42	276:42	15	;
LEAF_NODE	277:5	277:5	13	}
LEAF_NODE	278:1	278:1	10	}
SELECTION	278:3	278:8	6	
KEYWORD	278:3	278:3	7	else
LEAF_NODE	278:3	278:3	8	else
STATEMENTS	278:8	286:1	7	
LEAF_NODE	278:8	278:8	8	{
STATEMENTS	279:5	281:5	8	
LEAF_NODE	279:5	279:5	9	REPEAT
LEAF_NODE	279:11	279:11	9	(
EXPR_STATEMENT	279:12	279:46	9	stride , * op = ToLinear16 [ * wp & mask ] ;
EXPR	279:12	279:20	10	stride , * op = ToLinear16 [ * wp & mask ]
FIELD	279:12	279:12	11	stride
LEAF_NODE	279:12	279:12	12	stride
LEAF_NODE	279:18	279:18	11	,
ASSIGN	279:20	279:26	11	* op = ToLinear16 [ * wp & mask ]
LVAL	279:20	279:20	12	* op
UNARY_EXPR	279:20	279:21	13	* op
UNARY_OPERATOR	279:20	279:20	14	*
LEAF_NODE	279:20	279:20	15	*
FIELD	279:21	279:21	14	op
LEAF_NODE	279:21	279:21	15	op
ASSIGN_OP	279:24	279:24	12	=
LEAF_NODE	279:24	279:24	13	=
RVAL	279:26	279:26	12	ToLinear16 [ * wp & mask ]
FIELD	279:26	279:45	13	ToLinear16 [ * wp & mask ]
LEAF_NODE	279:26	279:26	14	ToLinear16
LEAF_NODE	279:36	279:36	14	[
EXPR	279:37	279:41	14	* wp & mask
UNARY_EXPR	279:37	279:38	15	* wp
UNARY_OPERATOR	279:37	279:37	16	*
LEAF_NODE	279:37	279:37	17	*
FIELD	279:38	279:38	16	wp
LEAF_NODE	279:38	279:38	17	wp
LEAF_NODE	279:40	279:40	15	&
FIELD	279:41	279:41	15	mask
LEAF_NODE	279:41	279:41	16	mask
LEAF_NODE	279:45	279:45	14	]
LEAF_NODE	279:46	279:46	10	;
EXPR_STATEMENT	279:48	279:52	9	wp ++ ;
EXPR	279:48	279:48	10	wp ++
FIELD	279:48	279:50	11	wp ++
LEAF_NODE	279:48	279:48	12	wp
LEAF_NODE	279:50	279:50	12	++
LEAF_NODE	279:52	279:52	10	;
LEAF_NODE	279:54	279:54	9	op
LEAF_NODE	279:56	279:56	9	++
LEAF_NODE	279:58	279:58	9	)
EXPR_STATEMENT	280:5	280:16	9	n -= stride ;
EXPR	280:5	280:5	10	n -= stride
ASSIGN	280:5	280:10	11	n -= stride
LVAL	280:5	280:5	12	n
FIELD	280:5	280:5	13	n
LEAF_NODE	280:5	280:5	14	n
ASSIGN_OP	280:7	280:7	12	-=
LEAF_NODE	280:7	280:7	13	-=
RVAL	280:10	280:10	12	stride
FIELD	280:10	280:10	13	stride
LEAF_NODE	280:10	280:10	14	stride
LEAF_NODE	280:16	280:16	10	;
ITERATION	281:5	281:19	9	
KEYWORD	281:5	281:5	10	while
LEAF_NODE	281:5	281:5	11	while
LEAF_NODE	281:11	281:11	10	(
CONDITION	281:12	281:12	10	n > 0
EXPR	281:12	281:16	11	n > 0
FIELD	281:12	281:12	12	n
LEAF_NODE	281:12	281:12	13	n
REL_OPERATOR	281:14	281:14	12	>
LEAF_NODE	281:14	281:14	13	>
FIELD	281:16	281:16	12	0
LEAF_NODE	281:16	281:16	13	0
LEAF_NODE	281:17	281:17	10	)
STATEMENTS	281:19	285:5	10	
LEAF_NODE	281:19	281:19	11	{
STATEMENTS	282:2	284:2	11	
LEAF_NODE	282:2	282:2	12	REPEAT
LEAF_NODE	282:8	282:8	12	(
EXPR_STATEMENT	282:9	283:23	12	stride , wp [ stride ] += * wp ;
EXPR	282:9	283:6	13	stride , wp [ stride ] += * wp
FIELD	282:9	282:9	14	stride
LEAF_NODE	282:9	282:9	15	stride
LEAF_NODE	282:15	282:15	14	,
ASSIGN	283:6	283:20	14	wp [ stride ] += * wp
LVAL	283:6	283:6	15	wp [ stride ]
FIELD	283:6	283:15	16	wp [ stride ]
LEAF_NODE	283:6	283:6	17	wp
LEAF_NODE	283:8	283:8	17	[
EXPR	283:9	283:9	17	stride
FIELD	283:9	283:9	18	stride
LEAF_NODE	283:9	283:9	19	stride
LEAF_NODE	283:15	283:15	17	]
ASSIGN_OP	283:17	283:17	15	+=
LEAF_NODE	283:17	283:17	16	+=
RVAL	283:20	283:20	15	* wp
UNARY_EXPR	283:20	283:21	16	* wp
UNARY_OPERATOR	283:20	283:20	17	*
LEAF_NODE	283:20	283:20	18	*
FIELD	283:21	283:21	17	wp
LEAF_NODE	283:21	283:21	18	wp
LEAF_NODE	283:23	283:23	13	;
EXPR_STATEMENT	283:25	283:51	12	* op = ToLinear16 [ * wp & mask ] ;
EXPR	283:25	283:25	13	* op = ToLinear16 [ * wp & mask ]
ASSIGN	283:25	283:31	14	* op = ToLinear16 [ * wp & mask ]
LVAL	283:25	283:25	15	* op
UNARY_EXPR	283:25	283:26	16	* op
UNARY_OPERATOR	283:25	283:25	17	*
LEAF_NODE	283:25	283:25	18	*
FIELD	283:26	283:26	17	op
LEAF_NODE	283:26	283:26	18	op
ASSIGN_OP	283:29	283:29	15	=
LEAF_NODE	283:29	283:29	16	=
RVAL	283:31	283:31	15	ToLinear16 [ * wp & mask ]
FIELD	283:31	283:50	16	ToLinear16 [ * wp & mask ]
LEAF_NODE	283:31	283:31	17	ToLinear16
LEAF_NODE	283:41	283:41	17	[
EXPR	283:42	283:46	17	* wp & mask
UNARY_EXPR	283:42	283:43	18	* wp
UNARY_OPERATOR	283:42	283:42	19	*
LEAF_NODE	283:42	283:42	20	*
FIELD	283:43	283:43	19	wp
LEAF_NODE	283:43	283:43	20	wp
LEAF_NODE	283:45	283:45	18	&
FIELD	283:46	283:46	18	mask
LEAF_NODE	283:46	283:46	19	mask
LEAF_NODE	283:50	283:50	17	]
LEAF_NODE	283:51	283:51	13	;
EXPR_STATEMENT	283:53	283:57	12	wp ++ ;
EXPR	283:53	283:53	13	wp ++
FIELD	283:53	283:55	14	wp ++
LEAF_NODE	283:53	283:53	15	wp
LEAF_NODE	283:55	283:55	15	++
LEAF_NODE	283:57	283:57	13	;
LEAF_NODE	283:59	283:59	12	op
LEAF_NODE	283:61	283:61	12	++
LEAF_NODE	283:63	283:63	12	)
EXPR_STATEMENT	284:2	284:13	12	n -= stride ;
EXPR	284:2	284:2	13	n -= stride
ASSIGN	284:2	284:7	14	n -= stride
LVAL	284:2	284:2	15	n
FIELD	284:2	284:2	16	n
LEAF_NODE	284:2	284:2	17	n
ASSIGN_OP	284:4	284:4	15	-=
LEAF_NODE	284:4	284:4	16	-=
RVAL	284:7	284:7	15	stride
FIELD	284:7	284:7	16	stride
LEAF_NODE	284:7	284:7	17	stride
LEAF_NODE	284:13	284:13	13	;
LEAF_NODE	285:5	285:5	11	}
LEAF_NODE	286:1	286:1	8	}
LEAF_NODE	287:4	287:4	5	}
LEAF_NODE	288:0	288:0	2	}
FUNCTION_DEF	294:0	337:0	1	
RETURN_TYPE	294:0	294:7	2	static void
LEAF_NODE	294:0	294:0	3	static
TYPE_NAME	294:7	294:7	3	void
LEAF_NODE	294:7	294:7	4	void
FUNCTION_NAME	295:0	295:0	2	horizontalAccumulate11
LEAF_NODE	295:0	295:0	3	horizontalAccumulate11
PARAMETER_LIST	295:22	295:64	2	( uint16 * wp , int n , int stride , uint16 * op )
LEAF_NODE	295:22	295:22	3	(
PARAMETER_DECL	295:23	295:31	3	uint16 * wp
TYPE	295:23	295:30	4	uint16 *
TYPE_NAME	295:23	295:23	5	uint16
LEAF_NODE	295:23	295:23	6	uint16
POINTER	295:30	295:30	5	*
LEAF_NODE	295:30	295:30	6	*
NAME	295:31	295:31	4	wp
LEAF_NODE	295:31	295:31	5	wp
LEAF_NODE	295:33	295:33	3	,
PARAMETER_DECL	295:35	295:39	3	int n
TYPE	295:35	295:35	4	int
TYPE_NAME	295:35	295:35	5	int
LEAF_NODE	295:35	295:35	6	int
NAME	295:39	295:39	4	n
LEAF_NODE	295:39	295:39	5	n
LEAF_NODE	295:40	295:40	3	,
PARAMETER_DECL	295:42	295:46	3	int stride
TYPE	295:42	295:42	4	int
TYPE_NAME	295:42	295:42	5	int
LEAF_NODE	295:42	295:42	6	int
NAME	295:46	295:46	4	stride
LEAF_NODE	295:46	295:46	5	stride
LEAF_NODE	295:52	295:52	3	,
PARAMETER_DECL	295:54	295:62	3	uint16 * op
TYPE	295:54	295:61	4	uint16 *
TYPE_NAME	295:54	295:54	5	uint16
LEAF_NODE	295:54	295:54	6	uint16
POINTER	295:61	295:61	5	*
LEAF_NODE	295:61	295:61	6	*
NAME	295:62	295:62	4	op
LEAF_NODE	295:62	295:62	5	op
LEAF_NODE	295:64	295:64	3	)
LEAF_NODE	296:0	296:0	2	{
STATEMENTS	297:4	299:4	2	
LEAF_NODE	297:4	297:4	3	register
SIMPLE_DECL	297:13	297:46	3	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask ;
INIT_DECL_LIST	297:13	297:13	4	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	297:13	297:26	5	unsigned int cr
TYPE	297:13	297:13	6	unsigned int
TYPE_NAME	297:13	297:22	7	unsigned int
LEAF_NODE	297:13	297:13	8	unsigned
LEAF_NODE	297:22	297:22	8	int
NAME	297:26	297:26	6	cr
LEAF_NODE	297:26	297:26	7	cr
LEAF_NODE	297:28	297:28	5	,
INIT_DECL_LIST	297:13	297:13	5	unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	297:13	297:30	6	unsigned int cg
TYPE	297:13	297:13	7	unsigned int
TYPE_NAME	297:13	297:22	8	unsigned int
LEAF_NODE	297:13	297:13	9	unsigned
LEAF_NODE	297:22	297:22	9	int
NAME	297:30	297:30	7	cg
LEAF_NODE	297:30	297:30	8	cg
LEAF_NODE	297:32	297:32	6	,
INIT_DECL_LIST	297:13	297:13	6	unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	297:13	297:34	7	unsigned int cb
TYPE	297:13	297:13	8	unsigned int
TYPE_NAME	297:13	297:22	9	unsigned int
LEAF_NODE	297:13	297:13	10	unsigned
LEAF_NODE	297:22	297:22	10	int
NAME	297:34	297:34	8	cb
LEAF_NODE	297:34	297:34	9	cb
LEAF_NODE	297:36	297:36	7	,
INIT_DECL_LIST	297:13	297:13	7	unsigned int ca , unsigned int mask
VAR_DECL	297:13	297:38	8	unsigned int ca
TYPE	297:13	297:13	9	unsigned int
TYPE_NAME	297:13	297:22	10	unsigned int
LEAF_NODE	297:13	297:13	11	unsigned
LEAF_NODE	297:22	297:22	11	int
NAME	297:38	297:38	9	ca
LEAF_NODE	297:38	297:38	10	ca
LEAF_NODE	297:40	297:40	8	,
VAR_DECL	297:13	297:42	8	unsigned int mask
TYPE	297:13	297:13	9	unsigned int
TYPE_NAME	297:13	297:22	10	unsigned int
LEAF_NODE	297:13	297:13	11	unsigned
LEAF_NODE	297:22	297:22	11	int
NAME	297:42	297:42	9	mask
LEAF_NODE	297:42	297:42	10	mask
LEAF_NODE	297:46	297:46	4	;
SELECTION	299:4	299:21	3	
KEYWORD	299:4	299:4	4	if
LEAF_NODE	299:4	299:4	5	if
LEAF_NODE	299:7	299:7	4	(
CONDITION	299:8	299:8	4	n >= stride
EXPR	299:8	299:13	5	n >= stride
FIELD	299:8	299:8	6	n
LEAF_NODE	299:8	299:8	7	n
REL_OPERATOR	299:10	299:10	6	>=
LEAF_NODE	299:10	299:10	7	>=
FIELD	299:13	299:13	6	stride
LEAF_NODE	299:13	299:13	7	stride
LEAF_NODE	299:19	299:19	4	)
STATEMENTS	299:21	336:4	4	
LEAF_NODE	299:21	299:21	5	{
STATEMENTS	300:1	327:3	5	
EXPR_STATEMENT	300:1	300:17	6	mask = CODE_MASK ;
EXPR	300:1	300:1	7	mask = CODE_MASK
ASSIGN	300:1	300:8	8	mask = CODE_MASK
LVAL	300:1	300:1	9	mask
FIELD	300:1	300:1	10	mask
LEAF_NODE	300:1	300:1	11	mask
ASSIGN_OP	300:6	300:6	9	=
LEAF_NODE	300:6	300:6	10	=
RVAL	300:8	300:8	9	CODE_MASK
FIELD	300:8	300:8	10	CODE_MASK
LEAF_NODE	300:8	300:8	11	CODE_MASK
LEAF_NODE	300:17	300:17	7	;
SELECTION	301:1	301:18	6	
KEYWORD	301:1	301:1	7	if
LEAF_NODE	301:1	301:1	8	if
LEAF_NODE	301:4	301:4	7	(
CONDITION	301:5	301:5	7	stride == 3
EXPR	301:5	301:15	8	stride == 3
FIELD	301:5	301:5	9	stride
LEAF_NODE	301:5	301:5	10	stride
EQ_OPERATOR	301:12	301:12	9	==
LEAF_NODE	301:12	301:12	10	==
FIELD	301:15	301:15	9	3
LEAF_NODE	301:15	301:15	10	3
LEAF_NODE	301:16	301:16	7	)
STATEMENTS	301:18	313:1	7	
LEAF_NODE	301:18	301:18	8	{
STATEMENTS	302:5	305:5	8	
EXPR_STATEMENT	302:5	302:18	9	op [ 0 ] = wp [ 0 ] ;
EXPR	302:5	302:5	10	op [ 0 ] = wp [ 0 ]
ASSIGN	302:5	302:13	11	op [ 0 ] = wp [ 0 ]
LVAL	302:5	302:5	12	op [ 0 ]
FIELD	302:5	302:9	13	op [ 0 ]
LEAF_NODE	302:5	302:5	14	op
LEAF_NODE	302:7	302:7	14	[
EXPR	302:8	302:8	14	0
FIELD	302:8	302:8	15	0
LEAF_NODE	302:8	302:8	16	0
LEAF_NODE	302:9	302:9	14	]
ASSIGN_OP	302:11	302:11	12	=
LEAF_NODE	302:11	302:11	13	=
RVAL	302:13	302:13	12	wp [ 0 ]
FIELD	302:13	302:17	13	wp [ 0 ]
LEAF_NODE	302:13	302:13	14	wp
LEAF_NODE	302:15	302:15	14	[
EXPR	302:16	302:16	14	0
FIELD	302:16	302:16	15	0
LEAF_NODE	302:16	302:16	16	0
LEAF_NODE	302:17	302:17	14	]
LEAF_NODE	302:18	302:18	10	;
EXPR_STATEMENT	302:21	302:34	9	op [ 1 ] = wp [ 1 ] ;
EXPR	302:21	302:21	10	op [ 1 ] = wp [ 1 ]
ASSIGN	302:21	302:29	11	op [ 1 ] = wp [ 1 ]
LVAL	302:21	302:21	12	op [ 1 ]
FIELD	302:21	302:25	13	op [ 1 ]
LEAF_NODE	302:21	302:21	14	op
LEAF_NODE	302:23	302:23	14	[
EXPR	302:24	302:24	14	1
FIELD	302:24	302:24	15	1
LEAF_NODE	302:24	302:24	16	1
LEAF_NODE	302:25	302:25	14	]
ASSIGN_OP	302:27	302:27	12	=
LEAF_NODE	302:27	302:27	13	=
RVAL	302:29	302:29	12	wp [ 1 ]
FIELD	302:29	302:33	13	wp [ 1 ]
LEAF_NODE	302:29	302:29	14	wp
LEAF_NODE	302:31	302:31	14	[
EXPR	302:32	302:32	14	1
FIELD	302:32	302:32	15	1
LEAF_NODE	302:32	302:32	16	1
LEAF_NODE	302:33	302:33	14	]
LEAF_NODE	302:34	302:34	10	;
EXPR_STATEMENT	302:37	302:50	9	op [ 2 ] = wp [ 2 ] ;
EXPR	302:37	302:37	10	op [ 2 ] = wp [ 2 ]
ASSIGN	302:37	302:45	11	op [ 2 ] = wp [ 2 ]
LVAL	302:37	302:37	12	op [ 2 ]
FIELD	302:37	302:41	13	op [ 2 ]
LEAF_NODE	302:37	302:37	14	op
LEAF_NODE	302:39	302:39	14	[
EXPR	302:40	302:40	14	2
FIELD	302:40	302:40	15	2
LEAF_NODE	302:40	302:40	16	2
LEAF_NODE	302:41	302:41	14	]
ASSIGN_OP	302:43	302:43	12	=
LEAF_NODE	302:43	302:43	13	=
RVAL	302:45	302:45	12	wp [ 2 ]
FIELD	302:45	302:49	13	wp [ 2 ]
LEAF_NODE	302:45	302:45	14	wp
LEAF_NODE	302:47	302:47	14	[
EXPR	302:48	302:48	14	2
FIELD	302:48	302:48	15	2
LEAF_NODE	302:48	302:48	16	2
LEAF_NODE	302:49	302:49	14	]
LEAF_NODE	302:50	302:50	10	;
EXPR_STATEMENT	303:12	303:22	9	cr = wp [ 0 ] ;
EXPR	303:12	303:12	10	cr = wp [ 0 ]
ASSIGN	303:12	303:17	11	cr = wp [ 0 ]
LVAL	303:12	303:12	12	cr
FIELD	303:12	303:12	13	cr
LEAF_NODE	303:12	303:12	14	cr
ASSIGN_OP	303:15	303:15	12	=
LEAF_NODE	303:15	303:15	13	=
RVAL	303:17	303:17	12	wp [ 0 ]
FIELD	303:17	303:21	13	wp [ 0 ]
LEAF_NODE	303:17	303:17	14	wp
LEAF_NODE	303:19	303:19	14	[
EXPR	303:20	303:20	14	0
FIELD	303:20	303:20	15	0
LEAF_NODE	303:20	303:20	16	0
LEAF_NODE	303:21	303:21	14	]
LEAF_NODE	303:22	303:22	10	;
EXPR_STATEMENT	303:25	303:35	9	cg = wp [ 1 ] ;
EXPR	303:25	303:25	10	cg = wp [ 1 ]
ASSIGN	303:25	303:30	11	cg = wp [ 1 ]
LVAL	303:25	303:25	12	cg
FIELD	303:25	303:25	13	cg
LEAF_NODE	303:25	303:25	14	cg
ASSIGN_OP	303:28	303:28	12	=
LEAF_NODE	303:28	303:28	13	=
RVAL	303:30	303:30	12	wp [ 1 ]
FIELD	303:30	303:34	13	wp [ 1 ]
LEAF_NODE	303:30	303:30	14	wp
LEAF_NODE	303:32	303:32	14	[
EXPR	303:33	303:33	14	1
FIELD	303:33	303:33	15	1
LEAF_NODE	303:33	303:33	16	1
LEAF_NODE	303:34	303:34	14	]
LEAF_NODE	303:35	303:35	10	;
EXPR_STATEMENT	303:38	303:48	9	cb = wp [ 2 ] ;
EXPR	303:38	303:38	10	cb = wp [ 2 ]
ASSIGN	303:38	303:43	11	cb = wp [ 2 ]
LVAL	303:38	303:38	12	cb
FIELD	303:38	303:38	13	cb
LEAF_NODE	303:38	303:38	14	cb
ASSIGN_OP	303:41	303:41	12	=
LEAF_NODE	303:41	303:41	13	=
RVAL	303:43	303:43	12	wp [ 2 ]
FIELD	303:43	303:47	13	wp [ 2 ]
LEAF_NODE	303:43	303:43	14	wp
LEAF_NODE	303:45	303:45	14	[
EXPR	303:46	303:46	14	2
FIELD	303:46	303:46	15	2
LEAF_NODE	303:46	303:46	16	2
LEAF_NODE	303:47	303:47	14	]
LEAF_NODE	303:48	303:48	10	;
EXPR_STATEMENT	304:5	304:11	9	n -= 3 ;
EXPR	304:5	304:5	10	n -= 3
ASSIGN	304:5	304:10	11	n -= 3
LVAL	304:5	304:5	12	n
FIELD	304:5	304:5	13	n
LEAF_NODE	304:5	304:5	14	n
ASSIGN_OP	304:7	304:7	12	-=
LEAF_NODE	304:7	304:7	13	-=
RVAL	304:10	304:10	12	3
FIELD	304:10	304:10	13	3
LEAF_NODE	304:10	304:10	14	3
LEAF_NODE	304:11	304:11	10	;
ITERATION	305:5	305:19	9	
KEYWORD	305:5	305:5	10	while
LEAF_NODE	305:5	305:5	11	while
LEAF_NODE	305:11	305:11	10	(
CONDITION	305:12	305:12	10	n > 0
EXPR	305:12	305:16	11	n > 0
FIELD	305:12	305:12	12	n
LEAF_NODE	305:12	305:12	13	n
REL_OPERATOR	305:14	305:14	12	>
LEAF_NODE	305:14	305:14	13	>
FIELD	305:16	305:16	12	0
LEAF_NODE	305:16	305:16	13	0
LEAF_NODE	305:17	305:17	10	)
STATEMENTS	305:19	312:5	10	
LEAF_NODE	305:19	305:19	11	{
STATEMENTS	306:2	311:2	11	
EXPR_STATEMENT	306:2	306:9	12	wp += 3 ;
EXPR	306:2	306:2	13	wp += 3
ASSIGN	306:2	306:8	14	wp += 3
LVAL	306:2	306:2	15	wp
FIELD	306:2	306:2	16	wp
LEAF_NODE	306:2	306:2	17	wp
ASSIGN_OP	306:5	306:5	15	+=
LEAF_NODE	306:5	306:5	16	+=
RVAL	306:8	306:8	15	3
FIELD	306:8	306:8	16	3
LEAF_NODE	306:8	306:8	17	3
LEAF_NODE	306:9	306:9	13	;
EXPR_STATEMENT	307:2	307:9	12	op += 3 ;
EXPR	307:2	307:2	13	op += 3
ASSIGN	307:2	307:8	14	op += 3
LVAL	307:2	307:2	15	op
FIELD	307:2	307:2	16	op
LEAF_NODE	307:2	307:2	17	op
ASSIGN_OP	307:5	307:5	15	+=
LEAF_NODE	307:5	307:5	16	+=
RVAL	307:8	307:8	15	3
FIELD	307:8	307:8	16	3
LEAF_NODE	307:8	307:8	17	3
LEAF_NODE	307:9	307:9	13	;
EXPR_STATEMENT	308:2	308:8	12	n -= 3 ;
EXPR	308:2	308:2	13	n -= 3
ASSIGN	308:2	308:7	14	n -= 3
LVAL	308:2	308:2	15	n
FIELD	308:2	308:2	16	n
LEAF_NODE	308:2	308:2	17	n
ASSIGN_OP	308:4	308:4	15	-=
LEAF_NODE	308:4	308:4	16	-=
RVAL	308:7	308:7	15	3
FIELD	308:7	308:7	16	3
LEAF_NODE	308:7	308:7	17	3
LEAF_NODE	308:8	308:8	13	;
EXPR_STATEMENT	309:2	309:40	12	op [ 0 ] = ( uint16 ) ( ( cr += wp [ 0 ] ) & mask ) ;
EXPR	309:2	309:2	13	op [ 0 ] = ( uint16 ) ( ( cr += wp [ 0 ] ) & mask )
ASSIGN	309:2	309:10	14	op [ 0 ] = ( uint16 ) ( ( cr += wp [ 0 ] ) & mask )
LVAL	309:2	309:2	15	op [ 0 ]
FIELD	309:2	309:6	16	op [ 0 ]
LEAF_NODE	309:2	309:2	17	op
LEAF_NODE	309:4	309:4	17	[
EXPR	309:5	309:5	17	0
FIELD	309:5	309:5	18	0
LEAF_NODE	309:5	309:5	19	0
LEAF_NODE	309:6	309:6	17	]
ASSIGN_OP	309:8	309:8	15	=
LEAF_NODE	309:8	309:8	16	=
RVAL	309:10	309:39	15	( uint16 ) ( ( cr += wp [ 0 ] ) & mask )
LEAF_NODE	309:10	309:10	16	(
TYPE_NAME	309:11	309:11	16	uint16
LEAF_NODE	309:11	309:11	17	uint16
LEAF_NODE	309:17	309:17	16	)
LEAF_NODE	309:18	309:18	16	(
LEAF_NODE	309:19	309:19	16	(
ASSIGN	309:20	309:26	16	cr += wp [ 0 ]
LVAL	309:20	309:20	17	cr
FIELD	309:20	309:20	18	cr
LEAF_NODE	309:20	309:20	19	cr
ASSIGN_OP	309:23	309:23	17	+=
LEAF_NODE	309:23	309:23	18	+=
RVAL	309:26	309:26	17	wp [ 0 ]
FIELD	309:26	309:30	18	wp [ 0 ]
LEAF_NODE	309:26	309:26	19	wp
LEAF_NODE	309:28	309:28	19	[
EXPR	309:29	309:29	19	0
FIELD	309:29	309:29	20	0
LEAF_NODE	309:29	309:29	21	0
LEAF_NODE	309:30	309:30	19	]
LEAF_NODE	309:31	309:31	16	)
LEAF_NODE	309:33	309:33	16	&
FIELD	309:35	309:35	16	mask
LEAF_NODE	309:35	309:35	17	mask
LEAF_NODE	309:39	309:39	16	)
LEAF_NODE	309:40	309:40	13	;
EXPR_STATEMENT	310:2	310:40	12	op [ 1 ] = ( uint16 ) ( ( cg += wp [ 1 ] ) & mask ) ;
EXPR	310:2	310:2	13	op [ 1 ] = ( uint16 ) ( ( cg += wp [ 1 ] ) & mask )
ASSIGN	310:2	310:10	14	op [ 1 ] = ( uint16 ) ( ( cg += wp [ 1 ] ) & mask )
LVAL	310:2	310:2	15	op [ 1 ]
FIELD	310:2	310:6	16	op [ 1 ]
LEAF_NODE	310:2	310:2	17	op
LEAF_NODE	310:4	310:4	17	[
EXPR	310:5	310:5	17	1
FIELD	310:5	310:5	18	1
LEAF_NODE	310:5	310:5	19	1
LEAF_NODE	310:6	310:6	17	]
ASSIGN_OP	310:8	310:8	15	=
LEAF_NODE	310:8	310:8	16	=
RVAL	310:10	310:39	15	( uint16 ) ( ( cg += wp [ 1 ] ) & mask )
LEAF_NODE	310:10	310:10	16	(
TYPE_NAME	310:11	310:11	16	uint16
LEAF_NODE	310:11	310:11	17	uint16
LEAF_NODE	310:17	310:17	16	)
LEAF_NODE	310:18	310:18	16	(
LEAF_NODE	310:19	310:19	16	(
ASSIGN	310:20	310:26	16	cg += wp [ 1 ]
LVAL	310:20	310:20	17	cg
FIELD	310:20	310:20	18	cg
LEAF_NODE	310:20	310:20	19	cg
ASSIGN_OP	310:23	310:23	17	+=
LEAF_NODE	310:23	310:23	18	+=
RVAL	310:26	310:26	17	wp [ 1 ]
FIELD	310:26	310:30	18	wp [ 1 ]
LEAF_NODE	310:26	310:26	19	wp
LEAF_NODE	310:28	310:28	19	[
EXPR	310:29	310:29	19	1
FIELD	310:29	310:29	20	1
LEAF_NODE	310:29	310:29	21	1
LEAF_NODE	310:30	310:30	19	]
LEAF_NODE	310:31	310:31	16	)
LEAF_NODE	310:33	310:33	16	&
FIELD	310:35	310:35	16	mask
LEAF_NODE	310:35	310:35	17	mask
LEAF_NODE	310:39	310:39	16	)
LEAF_NODE	310:40	310:40	13	;
EXPR_STATEMENT	311:2	311:40	12	op [ 2 ] = ( uint16 ) ( ( cb += wp [ 2 ] ) & mask ) ;
EXPR	311:2	311:2	13	op [ 2 ] = ( uint16 ) ( ( cb += wp [ 2 ] ) & mask )
ASSIGN	311:2	311:10	14	op [ 2 ] = ( uint16 ) ( ( cb += wp [ 2 ] ) & mask )
LVAL	311:2	311:2	15	op [ 2 ]
FIELD	311:2	311:6	16	op [ 2 ]
LEAF_NODE	311:2	311:2	17	op
LEAF_NODE	311:4	311:4	17	[
EXPR	311:5	311:5	17	2
FIELD	311:5	311:5	18	2
LEAF_NODE	311:5	311:5	19	2
LEAF_NODE	311:6	311:6	17	]
ASSIGN_OP	311:8	311:8	15	=
LEAF_NODE	311:8	311:8	16	=
RVAL	311:10	311:39	15	( uint16 ) ( ( cb += wp [ 2 ] ) & mask )
LEAF_NODE	311:10	311:10	16	(
TYPE_NAME	311:11	311:11	16	uint16
LEAF_NODE	311:11	311:11	17	uint16
LEAF_NODE	311:17	311:17	16	)
LEAF_NODE	311:18	311:18	16	(
LEAF_NODE	311:19	311:19	16	(
ASSIGN	311:20	311:26	16	cb += wp [ 2 ]
LVAL	311:20	311:20	17	cb
FIELD	311:20	311:20	18	cb
LEAF_NODE	311:20	311:20	19	cb
ASSIGN_OP	311:23	311:23	17	+=
LEAF_NODE	311:23	311:23	18	+=
RVAL	311:26	311:26	17	wp [ 2 ]
FIELD	311:26	311:30	18	wp [ 2 ]
LEAF_NODE	311:26	311:26	19	wp
LEAF_NODE	311:28	311:28	19	[
EXPR	311:29	311:29	19	2
FIELD	311:29	311:29	20	2
LEAF_NODE	311:29	311:29	21	2
LEAF_NODE	311:30	311:30	19	]
LEAF_NODE	311:31	311:31	16	)
LEAF_NODE	311:33	311:33	16	&
FIELD	311:35	311:35	16	mask
LEAF_NODE	311:35	311:35	17	mask
LEAF_NODE	311:39	311:39	16	)
LEAF_NODE	311:40	311:40	13	;
LEAF_NODE	312:5	312:5	11	}
LEAF_NODE	313:1	313:1	8	}
SELECTION	313:3	313:8	6	
KEYWORD	313:3	313:3	7	else
LEAF_NODE	313:3	313:3	8	else
STATEMENTS	313:8	313:8	7	
SELECTION	313:8	313:25	8	
KEYWORD	313:8	313:8	9	if
LEAF_NODE	313:8	313:8	10	if
LEAF_NODE	313:11	313:11	9	(
CONDITION	313:12	313:12	9	stride == 4
EXPR	313:12	313:22	10	stride == 4
FIELD	313:12	313:12	11	stride
LEAF_NODE	313:12	313:12	12	stride
EQ_OPERATOR	313:19	313:19	11	==
LEAF_NODE	313:19	313:19	12	==
FIELD	313:22	313:22	11	4
LEAF_NODE	313:22	313:22	12	4
LEAF_NODE	313:23	313:23	9	)
STATEMENTS	313:25	327:1	9	
LEAF_NODE	313:25	313:25	10	{
STATEMENTS	314:5	318:5	10	
EXPR_STATEMENT	314:5	314:18	11	op [ 0 ] = wp [ 0 ] ;
EXPR	314:5	314:5	12	op [ 0 ] = wp [ 0 ]
ASSIGN	314:5	314:13	13	op [ 0 ] = wp [ 0 ]
LVAL	314:5	314:5	14	op [ 0 ]
FIELD	314:5	314:9	15	op [ 0 ]
LEAF_NODE	314:5	314:5	16	op
LEAF_NODE	314:7	314:7	16	[
EXPR	314:8	314:8	16	0
FIELD	314:8	314:8	17	0
LEAF_NODE	314:8	314:8	18	0
LEAF_NODE	314:9	314:9	16	]
ASSIGN_OP	314:11	314:11	14	=
LEAF_NODE	314:11	314:11	15	=
RVAL	314:13	314:13	14	wp [ 0 ]
FIELD	314:13	314:17	15	wp [ 0 ]
LEAF_NODE	314:13	314:13	16	wp
LEAF_NODE	314:15	314:15	16	[
EXPR	314:16	314:16	16	0
FIELD	314:16	314:16	17	0
LEAF_NODE	314:16	314:16	18	0
LEAF_NODE	314:17	314:17	16	]
LEAF_NODE	314:18	314:18	12	;
EXPR_STATEMENT	314:21	314:34	11	op [ 1 ] = wp [ 1 ] ;
EXPR	314:21	314:21	12	op [ 1 ] = wp [ 1 ]
ASSIGN	314:21	314:29	13	op [ 1 ] = wp [ 1 ]
LVAL	314:21	314:21	14	op [ 1 ]
FIELD	314:21	314:25	15	op [ 1 ]
LEAF_NODE	314:21	314:21	16	op
LEAF_NODE	314:23	314:23	16	[
EXPR	314:24	314:24	16	1
FIELD	314:24	314:24	17	1
LEAF_NODE	314:24	314:24	18	1
LEAF_NODE	314:25	314:25	16	]
ASSIGN_OP	314:27	314:27	14	=
LEAF_NODE	314:27	314:27	15	=
RVAL	314:29	314:29	14	wp [ 1 ]
FIELD	314:29	314:33	15	wp [ 1 ]
LEAF_NODE	314:29	314:29	16	wp
LEAF_NODE	314:31	314:31	16	[
EXPR	314:32	314:32	16	1
FIELD	314:32	314:32	17	1
LEAF_NODE	314:32	314:32	18	1
LEAF_NODE	314:33	314:33	16	]
LEAF_NODE	314:34	314:34	12	;
EXPR_STATEMENT	315:5	315:18	11	op [ 2 ] = wp [ 2 ] ;
EXPR	315:5	315:5	12	op [ 2 ] = wp [ 2 ]
ASSIGN	315:5	315:13	13	op [ 2 ] = wp [ 2 ]
LVAL	315:5	315:5	14	op [ 2 ]
FIELD	315:5	315:9	15	op [ 2 ]
LEAF_NODE	315:5	315:5	16	op
LEAF_NODE	315:7	315:7	16	[
EXPR	315:8	315:8	16	2
FIELD	315:8	315:8	17	2
LEAF_NODE	315:8	315:8	18	2
LEAF_NODE	315:9	315:9	16	]
ASSIGN_OP	315:11	315:11	14	=
LEAF_NODE	315:11	315:11	15	=
RVAL	315:13	315:13	14	wp [ 2 ]
FIELD	315:13	315:17	15	wp [ 2 ]
LEAF_NODE	315:13	315:13	16	wp
LEAF_NODE	315:15	315:15	16	[
EXPR	315:16	315:16	16	2
FIELD	315:16	315:16	17	2
LEAF_NODE	315:16	315:16	18	2
LEAF_NODE	315:17	315:17	16	]
LEAF_NODE	315:18	315:18	12	;
EXPR_STATEMENT	315:21	315:34	11	op [ 3 ] = wp [ 3 ] ;
EXPR	315:21	315:21	12	op [ 3 ] = wp [ 3 ]
ASSIGN	315:21	315:29	13	op [ 3 ] = wp [ 3 ]
LVAL	315:21	315:21	14	op [ 3 ]
FIELD	315:21	315:25	15	op [ 3 ]
LEAF_NODE	315:21	315:21	16	op
LEAF_NODE	315:23	315:23	16	[
EXPR	315:24	315:24	16	3
FIELD	315:24	315:24	17	3
LEAF_NODE	315:24	315:24	18	3
LEAF_NODE	315:25	315:25	16	]
ASSIGN_OP	315:27	315:27	14	=
LEAF_NODE	315:27	315:27	15	=
RVAL	315:29	315:29	14	wp [ 3 ]
FIELD	315:29	315:33	15	wp [ 3 ]
LEAF_NODE	315:29	315:29	16	wp
LEAF_NODE	315:31	315:31	16	[
EXPR	315:32	315:32	16	3
FIELD	315:32	315:32	17	3
LEAF_NODE	315:32	315:32	18	3
LEAF_NODE	315:33	315:33	16	]
LEAF_NODE	315:34	315:34	12	;
EXPR_STATEMENT	316:12	316:22	11	cr = wp [ 0 ] ;
EXPR	316:12	316:12	12	cr = wp [ 0 ]
ASSIGN	316:12	316:17	13	cr = wp [ 0 ]
LVAL	316:12	316:12	14	cr
FIELD	316:12	316:12	15	cr
LEAF_NODE	316:12	316:12	16	cr
ASSIGN_OP	316:15	316:15	14	=
LEAF_NODE	316:15	316:15	15	=
RVAL	316:17	316:17	14	wp [ 0 ]
FIELD	316:17	316:21	15	wp [ 0 ]
LEAF_NODE	316:17	316:17	16	wp
LEAF_NODE	316:19	316:19	16	[
EXPR	316:20	316:20	16	0
FIELD	316:20	316:20	17	0
LEAF_NODE	316:20	316:20	18	0
LEAF_NODE	316:21	316:21	16	]
LEAF_NODE	316:22	316:22	12	;
EXPR_STATEMENT	316:24	316:34	11	cg = wp [ 1 ] ;
EXPR	316:24	316:24	12	cg = wp [ 1 ]
ASSIGN	316:24	316:29	13	cg = wp [ 1 ]
LVAL	316:24	316:24	14	cg
FIELD	316:24	316:24	15	cg
LEAF_NODE	316:24	316:24	16	cg
ASSIGN_OP	316:27	316:27	14	=
LEAF_NODE	316:27	316:27	15	=
RVAL	316:29	316:29	14	wp [ 1 ]
FIELD	316:29	316:33	15	wp [ 1 ]
LEAF_NODE	316:29	316:29	16	wp
LEAF_NODE	316:31	316:31	16	[
EXPR	316:32	316:32	16	1
FIELD	316:32	316:32	17	1
LEAF_NODE	316:32	316:32	18	1
LEAF_NODE	316:33	316:33	16	]
LEAF_NODE	316:34	316:34	12	;
EXPR_STATEMENT	316:36	316:46	11	cb = wp [ 2 ] ;
EXPR	316:36	316:36	12	cb = wp [ 2 ]
ASSIGN	316:36	316:41	13	cb = wp [ 2 ]
LVAL	316:36	316:36	14	cb
FIELD	316:36	316:36	15	cb
LEAF_NODE	316:36	316:36	16	cb
ASSIGN_OP	316:39	316:39	14	=
LEAF_NODE	316:39	316:39	15	=
RVAL	316:41	316:41	14	wp [ 2 ]
FIELD	316:41	316:45	15	wp [ 2 ]
LEAF_NODE	316:41	316:41	16	wp
LEAF_NODE	316:43	316:43	16	[
EXPR	316:44	316:44	16	2
FIELD	316:44	316:44	17	2
LEAF_NODE	316:44	316:44	18	2
LEAF_NODE	316:45	316:45	16	]
LEAF_NODE	316:46	316:46	12	;
EXPR_STATEMENT	316:48	316:58	11	ca = wp [ 3 ] ;
EXPR	316:48	316:48	12	ca = wp [ 3 ]
ASSIGN	316:48	316:53	13	ca = wp [ 3 ]
LVAL	316:48	316:48	14	ca
FIELD	316:48	316:48	15	ca
LEAF_NODE	316:48	316:48	16	ca
ASSIGN_OP	316:51	316:51	14	=
LEAF_NODE	316:51	316:51	15	=
RVAL	316:53	316:53	14	wp [ 3 ]
FIELD	316:53	316:57	15	wp [ 3 ]
LEAF_NODE	316:53	316:53	16	wp
LEAF_NODE	316:55	316:55	16	[
EXPR	316:56	316:56	16	3
FIELD	316:56	316:56	17	3
LEAF_NODE	316:56	316:56	18	3
LEAF_NODE	316:57	316:57	16	]
LEAF_NODE	316:58	316:58	12	;
EXPR_STATEMENT	317:5	317:11	11	n -= 4 ;
EXPR	317:5	317:5	12	n -= 4
ASSIGN	317:5	317:10	13	n -= 4
LVAL	317:5	317:5	14	n
FIELD	317:5	317:5	15	n
LEAF_NODE	317:5	317:5	16	n
ASSIGN_OP	317:7	317:7	14	-=
LEAF_NODE	317:7	317:7	15	-=
RVAL	317:10	317:10	14	4
FIELD	317:10	317:10	15	4
LEAF_NODE	317:10	317:10	16	4
LEAF_NODE	317:11	317:11	12	;
ITERATION	318:5	318:19	11	
KEYWORD	318:5	318:5	12	while
LEAF_NODE	318:5	318:5	13	while
LEAF_NODE	318:11	318:11	12	(
CONDITION	318:12	318:12	12	n > 0
EXPR	318:12	318:16	13	n > 0
FIELD	318:12	318:12	14	n
LEAF_NODE	318:12	318:12	15	n
REL_OPERATOR	318:14	318:14	14	>
LEAF_NODE	318:14	318:14	15	>
FIELD	318:16	318:16	14	0
LEAF_NODE	318:16	318:16	15	0
LEAF_NODE	318:17	318:17	12	)
STATEMENTS	318:19	326:5	12	
LEAF_NODE	318:19	318:19	13	{
STATEMENTS	319:2	325:2	13	
EXPR_STATEMENT	319:2	319:9	14	wp += 4 ;
EXPR	319:2	319:2	15	wp += 4
ASSIGN	319:2	319:8	16	wp += 4
LVAL	319:2	319:2	17	wp
FIELD	319:2	319:2	18	wp
LEAF_NODE	319:2	319:2	19	wp
ASSIGN_OP	319:5	319:5	17	+=
LEAF_NODE	319:5	319:5	18	+=
RVAL	319:8	319:8	17	4
FIELD	319:8	319:8	18	4
LEAF_NODE	319:8	319:8	19	4
LEAF_NODE	319:9	319:9	15	;
EXPR_STATEMENT	320:2	320:9	14	op += 4 ;
EXPR	320:2	320:2	15	op += 4
ASSIGN	320:2	320:8	16	op += 4
LVAL	320:2	320:2	17	op
FIELD	320:2	320:2	18	op
LEAF_NODE	320:2	320:2	19	op
ASSIGN_OP	320:5	320:5	17	+=
LEAF_NODE	320:5	320:5	18	+=
RVAL	320:8	320:8	17	4
FIELD	320:8	320:8	18	4
LEAF_NODE	320:8	320:8	19	4
LEAF_NODE	320:9	320:9	15	;
EXPR_STATEMENT	321:2	321:8	14	n -= 4 ;
EXPR	321:2	321:2	15	n -= 4
ASSIGN	321:2	321:7	16	n -= 4
LVAL	321:2	321:2	17	n
FIELD	321:2	321:2	18	n
LEAF_NODE	321:2	321:2	19	n
ASSIGN_OP	321:4	321:4	17	-=
LEAF_NODE	321:4	321:4	18	-=
RVAL	321:7	321:7	17	4
FIELD	321:7	321:7	18	4
LEAF_NODE	321:7	321:7	19	4
LEAF_NODE	321:8	321:8	15	;
EXPR_STATEMENT	322:2	322:40	14	op [ 0 ] = ( uint16 ) ( ( cr += wp [ 0 ] ) & mask ) ;
EXPR	322:2	322:2	15	op [ 0 ] = ( uint16 ) ( ( cr += wp [ 0 ] ) & mask )
ASSIGN	322:2	322:10	16	op [ 0 ] = ( uint16 ) ( ( cr += wp [ 0 ] ) & mask )
LVAL	322:2	322:2	17	op [ 0 ]
FIELD	322:2	322:6	18	op [ 0 ]
LEAF_NODE	322:2	322:2	19	op
LEAF_NODE	322:4	322:4	19	[
EXPR	322:5	322:5	19	0
FIELD	322:5	322:5	20	0
LEAF_NODE	322:5	322:5	21	0
LEAF_NODE	322:6	322:6	19	]
ASSIGN_OP	322:8	322:8	17	=
LEAF_NODE	322:8	322:8	18	=
RVAL	322:10	322:39	17	( uint16 ) ( ( cr += wp [ 0 ] ) & mask )
LEAF_NODE	322:10	322:10	18	(
TYPE_NAME	322:11	322:11	18	uint16
LEAF_NODE	322:11	322:11	19	uint16
LEAF_NODE	322:17	322:17	18	)
LEAF_NODE	322:18	322:18	18	(
LEAF_NODE	322:19	322:19	18	(
ASSIGN	322:20	322:26	18	cr += wp [ 0 ]
LVAL	322:20	322:20	19	cr
FIELD	322:20	322:20	20	cr
LEAF_NODE	322:20	322:20	21	cr
ASSIGN_OP	322:23	322:23	19	+=
LEAF_NODE	322:23	322:23	20	+=
RVAL	322:26	322:26	19	wp [ 0 ]
FIELD	322:26	322:30	20	wp [ 0 ]
LEAF_NODE	322:26	322:26	21	wp
LEAF_NODE	322:28	322:28	21	[
EXPR	322:29	322:29	21	0
FIELD	322:29	322:29	22	0
LEAF_NODE	322:29	322:29	23	0
LEAF_NODE	322:30	322:30	21	]
LEAF_NODE	322:31	322:31	18	)
LEAF_NODE	322:33	322:33	18	&
FIELD	322:35	322:35	18	mask
LEAF_NODE	322:35	322:35	19	mask
LEAF_NODE	322:39	322:39	18	)
LEAF_NODE	322:40	322:40	15	;
EXPR_STATEMENT	323:2	323:40	14	op [ 1 ] = ( uint16 ) ( ( cg += wp [ 1 ] ) & mask ) ;
EXPR	323:2	323:2	15	op [ 1 ] = ( uint16 ) ( ( cg += wp [ 1 ] ) & mask )
ASSIGN	323:2	323:10	16	op [ 1 ] = ( uint16 ) ( ( cg += wp [ 1 ] ) & mask )
LVAL	323:2	323:2	17	op [ 1 ]
FIELD	323:2	323:6	18	op [ 1 ]
LEAF_NODE	323:2	323:2	19	op
LEAF_NODE	323:4	323:4	19	[
EXPR	323:5	323:5	19	1
FIELD	323:5	323:5	20	1
LEAF_NODE	323:5	323:5	21	1
LEAF_NODE	323:6	323:6	19	]
ASSIGN_OP	323:8	323:8	17	=
LEAF_NODE	323:8	323:8	18	=
RVAL	323:10	323:39	17	( uint16 ) ( ( cg += wp [ 1 ] ) & mask )
LEAF_NODE	323:10	323:10	18	(
TYPE_NAME	323:11	323:11	18	uint16
LEAF_NODE	323:11	323:11	19	uint16
LEAF_NODE	323:17	323:17	18	)
LEAF_NODE	323:18	323:18	18	(
LEAF_NODE	323:19	323:19	18	(
ASSIGN	323:20	323:26	18	cg += wp [ 1 ]
LVAL	323:20	323:20	19	cg
FIELD	323:20	323:20	20	cg
LEAF_NODE	323:20	323:20	21	cg
ASSIGN_OP	323:23	323:23	19	+=
LEAF_NODE	323:23	323:23	20	+=
RVAL	323:26	323:26	19	wp [ 1 ]
FIELD	323:26	323:30	20	wp [ 1 ]
LEAF_NODE	323:26	323:26	21	wp
LEAF_NODE	323:28	323:28	21	[
EXPR	323:29	323:29	21	1
FIELD	323:29	323:29	22	1
LEAF_NODE	323:29	323:29	23	1
LEAF_NODE	323:30	323:30	21	]
LEAF_NODE	323:31	323:31	18	)
LEAF_NODE	323:33	323:33	18	&
FIELD	323:35	323:35	18	mask
LEAF_NODE	323:35	323:35	19	mask
LEAF_NODE	323:39	323:39	18	)
LEAF_NODE	323:40	323:40	15	;
EXPR_STATEMENT	324:2	324:40	14	op [ 2 ] = ( uint16 ) ( ( cb += wp [ 2 ] ) & mask ) ;
EXPR	324:2	324:2	15	op [ 2 ] = ( uint16 ) ( ( cb += wp [ 2 ] ) & mask )
ASSIGN	324:2	324:10	16	op [ 2 ] = ( uint16 ) ( ( cb += wp [ 2 ] ) & mask )
LVAL	324:2	324:2	17	op [ 2 ]
FIELD	324:2	324:6	18	op [ 2 ]
LEAF_NODE	324:2	324:2	19	op
LEAF_NODE	324:4	324:4	19	[
EXPR	324:5	324:5	19	2
FIELD	324:5	324:5	20	2
LEAF_NODE	324:5	324:5	21	2
LEAF_NODE	324:6	324:6	19	]
ASSIGN_OP	324:8	324:8	17	=
LEAF_NODE	324:8	324:8	18	=
RVAL	324:10	324:39	17	( uint16 ) ( ( cb += wp [ 2 ] ) & mask )
LEAF_NODE	324:10	324:10	18	(
TYPE_NAME	324:11	324:11	18	uint16
LEAF_NODE	324:11	324:11	19	uint16
LEAF_NODE	324:17	324:17	18	)
LEAF_NODE	324:18	324:18	18	(
LEAF_NODE	324:19	324:19	18	(
ASSIGN	324:20	324:26	18	cb += wp [ 2 ]
LVAL	324:20	324:20	19	cb
FIELD	324:20	324:20	20	cb
LEAF_NODE	324:20	324:20	21	cb
ASSIGN_OP	324:23	324:23	19	+=
LEAF_NODE	324:23	324:23	20	+=
RVAL	324:26	324:26	19	wp [ 2 ]
FIELD	324:26	324:30	20	wp [ 2 ]
LEAF_NODE	324:26	324:26	21	wp
LEAF_NODE	324:28	324:28	21	[
EXPR	324:29	324:29	21	2
FIELD	324:29	324:29	22	2
LEAF_NODE	324:29	324:29	23	2
LEAF_NODE	324:30	324:30	21	]
LEAF_NODE	324:31	324:31	18	)
LEAF_NODE	324:33	324:33	18	&
FIELD	324:35	324:35	18	mask
LEAF_NODE	324:35	324:35	19	mask
LEAF_NODE	324:39	324:39	18	)
LEAF_NODE	324:40	324:40	15	;
EXPR_STATEMENT	325:2	325:40	14	op [ 3 ] = ( uint16 ) ( ( ca += wp [ 3 ] ) & mask ) ;
EXPR	325:2	325:2	15	op [ 3 ] = ( uint16 ) ( ( ca += wp [ 3 ] ) & mask )
ASSIGN	325:2	325:10	16	op [ 3 ] = ( uint16 ) ( ( ca += wp [ 3 ] ) & mask )
LVAL	325:2	325:2	17	op [ 3 ]
FIELD	325:2	325:6	18	op [ 3 ]
LEAF_NODE	325:2	325:2	19	op
LEAF_NODE	325:4	325:4	19	[
EXPR	325:5	325:5	19	3
FIELD	325:5	325:5	20	3
LEAF_NODE	325:5	325:5	21	3
LEAF_NODE	325:6	325:6	19	]
ASSIGN_OP	325:8	325:8	17	=
LEAF_NODE	325:8	325:8	18	=
RVAL	325:10	325:39	17	( uint16 ) ( ( ca += wp [ 3 ] ) & mask )
LEAF_NODE	325:10	325:10	18	(
TYPE_NAME	325:11	325:11	18	uint16
LEAF_NODE	325:11	325:11	19	uint16
LEAF_NODE	325:17	325:17	18	)
LEAF_NODE	325:18	325:18	18	(
LEAF_NODE	325:19	325:19	18	(
ASSIGN	325:20	325:26	18	ca += wp [ 3 ]
LVAL	325:20	325:20	19	ca
FIELD	325:20	325:20	20	ca
LEAF_NODE	325:20	325:20	21	ca
ASSIGN_OP	325:23	325:23	19	+=
LEAF_NODE	325:23	325:23	20	+=
RVAL	325:26	325:26	19	wp [ 3 ]
FIELD	325:26	325:30	20	wp [ 3 ]
LEAF_NODE	325:26	325:26	21	wp
LEAF_NODE	325:28	325:28	21	[
EXPR	325:29	325:29	21	3
FIELD	325:29	325:29	22	3
LEAF_NODE	325:29	325:29	23	3
LEAF_NODE	325:30	325:30	21	]
LEAF_NODE	325:31	325:31	18	)
LEAF_NODE	325:33	325:33	18	&
FIELD	325:35	325:35	18	mask
LEAF_NODE	325:35	325:35	19	mask
LEAF_NODE	325:39	325:39	18	)
LEAF_NODE	325:40	325:40	15	;
LEAF_NODE	326:5	326:5	13	}
LEAF_NODE	327:1	327:1	10	}
SELECTION	327:3	327:8	6	
KEYWORD	327:3	327:3	7	else
LEAF_NODE	327:3	327:3	8	else
STATEMENTS	327:8	335:1	7	
LEAF_NODE	327:8	327:8	8	{
STATEMENTS	328:5	330:5	8	
LEAF_NODE	328:5	328:5	9	REPEAT
LEAF_NODE	328:11	328:11	9	(
EXPR_STATEMENT	328:12	328:34	9	stride , * op = * wp & mask ;
EXPR	328:12	328:20	10	stride , * op = * wp & mask
FIELD	328:12	328:12	11	stride
LEAF_NODE	328:12	328:12	12	stride
LEAF_NODE	328:18	328:18	11	,
ASSIGN	328:20	328:26	11	* op = * wp & mask
LVAL	328:20	328:20	12	* op
UNARY_EXPR	328:20	328:21	13	* op
UNARY_OPERATOR	328:20	328:20	14	*
LEAF_NODE	328:20	328:20	15	*
FIELD	328:21	328:21	14	op
LEAF_NODE	328:21	328:21	15	op
ASSIGN_OP	328:24	328:24	12	=
LEAF_NODE	328:24	328:24	13	=
RVAL	328:26	328:30	12	* wp & mask
UNARY_EXPR	328:26	328:27	13	* wp
UNARY_OPERATOR	328:26	328:26	14	*
LEAF_NODE	328:26	328:26	15	*
FIELD	328:27	328:27	14	wp
LEAF_NODE	328:27	328:27	15	wp
LEAF_NODE	328:29	328:29	13	&
FIELD	328:30	328:30	13	mask
LEAF_NODE	328:30	328:30	14	mask
LEAF_NODE	328:34	328:34	10	;
EXPR_STATEMENT	328:36	328:40	9	wp ++ ;
EXPR	328:36	328:36	10	wp ++
FIELD	328:36	328:38	11	wp ++
LEAF_NODE	328:36	328:36	12	wp
LEAF_NODE	328:38	328:38	12	++
LEAF_NODE	328:40	328:40	10	;
LEAF_NODE	328:42	328:42	9	op
LEAF_NODE	328:44	328:44	9	++
LEAF_NODE	328:46	328:46	9	)
EXPR_STATEMENT	329:5	329:16	9	n -= stride ;
EXPR	329:5	329:5	10	n -= stride
ASSIGN	329:5	329:10	11	n -= stride
LVAL	329:5	329:5	12	n
FIELD	329:5	329:5	13	n
LEAF_NODE	329:5	329:5	14	n
ASSIGN_OP	329:7	329:7	12	-=
LEAF_NODE	329:7	329:7	13	-=
RVAL	329:10	329:10	12	stride
FIELD	329:10	329:10	13	stride
LEAF_NODE	329:10	329:10	14	stride
LEAF_NODE	329:16	329:16	10	;
ITERATION	330:5	330:19	9	
KEYWORD	330:5	330:5	10	while
LEAF_NODE	330:5	330:5	11	while
LEAF_NODE	330:11	330:11	10	(
CONDITION	330:12	330:12	10	n > 0
EXPR	330:12	330:16	11	n > 0
FIELD	330:12	330:12	12	n
LEAF_NODE	330:12	330:12	13	n
REL_OPERATOR	330:14	330:14	12	>
LEAF_NODE	330:14	330:14	13	>
FIELD	330:16	330:16	12	0
LEAF_NODE	330:16	330:16	13	0
LEAF_NODE	330:17	330:17	10	)
STATEMENTS	330:19	334:5	10	
LEAF_NODE	330:19	330:19	11	{
STATEMENTS	331:2	333:2	11	
LEAF_NODE	331:2	331:2	12	REPEAT
LEAF_NODE	331:8	331:8	12	(
EXPR_STATEMENT	331:9	332:23	12	stride , wp [ stride ] += * wp ;
EXPR	331:9	332:6	13	stride , wp [ stride ] += * wp
FIELD	331:9	331:9	14	stride
LEAF_NODE	331:9	331:9	15	stride
LEAF_NODE	331:15	331:15	14	,
ASSIGN	332:6	332:20	14	wp [ stride ] += * wp
LVAL	332:6	332:6	15	wp [ stride ]
FIELD	332:6	332:15	16	wp [ stride ]
LEAF_NODE	332:6	332:6	17	wp
LEAF_NODE	332:8	332:8	17	[
EXPR	332:9	332:9	17	stride
FIELD	332:9	332:9	18	stride
LEAF_NODE	332:9	332:9	19	stride
LEAF_NODE	332:15	332:15	17	]
ASSIGN_OP	332:17	332:17	15	+=
LEAF_NODE	332:17	332:17	16	+=
RVAL	332:20	332:20	15	* wp
UNARY_EXPR	332:20	332:21	16	* wp
UNARY_OPERATOR	332:20	332:20	17	*
LEAF_NODE	332:20	332:20	18	*
FIELD	332:21	332:21	17	wp
LEAF_NODE	332:21	332:21	18	wp
LEAF_NODE	332:23	332:23	13	;
EXPR_STATEMENT	332:25	332:39	12	* op = * wp & mask ;
EXPR	332:25	332:25	13	* op = * wp & mask
ASSIGN	332:25	332:31	14	* op = * wp & mask
LVAL	332:25	332:25	15	* op
UNARY_EXPR	332:25	332:26	16	* op
UNARY_OPERATOR	332:25	332:25	17	*
LEAF_NODE	332:25	332:25	18	*
FIELD	332:26	332:26	17	op
LEAF_NODE	332:26	332:26	18	op
ASSIGN_OP	332:29	332:29	15	=
LEAF_NODE	332:29	332:29	16	=
RVAL	332:31	332:35	15	* wp & mask
UNARY_EXPR	332:31	332:32	16	* wp
UNARY_OPERATOR	332:31	332:31	17	*
LEAF_NODE	332:31	332:31	18	*
FIELD	332:32	332:32	17	wp
LEAF_NODE	332:32	332:32	18	wp
LEAF_NODE	332:34	332:34	16	&
FIELD	332:35	332:35	16	mask
LEAF_NODE	332:35	332:35	17	mask
LEAF_NODE	332:39	332:39	13	;
EXPR_STATEMENT	332:41	332:45	12	wp ++ ;
EXPR	332:41	332:41	13	wp ++
FIELD	332:41	332:43	14	wp ++
LEAF_NODE	332:41	332:41	15	wp
LEAF_NODE	332:43	332:43	15	++
LEAF_NODE	332:45	332:45	13	;
LEAF_NODE	332:47	332:47	12	op
LEAF_NODE	332:49	332:49	12	++
LEAF_NODE	332:51	332:51	12	)
EXPR_STATEMENT	333:2	333:13	12	n -= stride ;
EXPR	333:2	333:2	13	n -= stride
ASSIGN	333:2	333:7	14	n -= stride
LVAL	333:2	333:2	15	n
FIELD	333:2	333:2	16	n
LEAF_NODE	333:2	333:2	17	n
ASSIGN_OP	333:4	333:4	15	-=
LEAF_NODE	333:4	333:4	16	-=
RVAL	333:7	333:7	15	stride
FIELD	333:7	333:7	16	stride
LEAF_NODE	333:7	333:7	17	stride
LEAF_NODE	333:13	333:13	13	;
LEAF_NODE	334:5	334:5	11	}
LEAF_NODE	335:1	335:1	8	}
LEAF_NODE	336:4	336:4	5	}
LEAF_NODE	337:0	337:0	2	}
FUNCTION_DEF	339:0	385:0	1	
RETURN_TYPE	339:0	339:7	2	static void
LEAF_NODE	339:0	339:0	3	static
TYPE_NAME	339:7	339:7	3	void
LEAF_NODE	339:7	339:7	4	void
FUNCTION_NAME	340:0	340:0	2	horizontalAccumulate8
LEAF_NODE	340:0	340:0	3	horizontalAccumulate8
PARAMETER_LIST	340:21	341:25	2	( uint16 * wp , int n , int stride , unsigned char * op , unsigned char * ToLinear8 )
LEAF_NODE	340:21	340:21	3	(
PARAMETER_DECL	340:22	340:30	3	uint16 * wp
TYPE	340:22	340:29	4	uint16 *
TYPE_NAME	340:22	340:22	5	uint16
LEAF_NODE	340:22	340:22	6	uint16
POINTER	340:29	340:29	5	*
LEAF_NODE	340:29	340:29	6	*
NAME	340:30	340:30	4	wp
LEAF_NODE	340:30	340:30	5	wp
LEAF_NODE	340:32	340:32	3	,
PARAMETER_DECL	340:34	340:38	3	int n
TYPE	340:34	340:34	4	int
TYPE_NAME	340:34	340:34	5	int
LEAF_NODE	340:34	340:34	6	int
NAME	340:38	340:38	4	n
LEAF_NODE	340:38	340:38	5	n
LEAF_NODE	340:39	340:39	3	,
PARAMETER_DECL	340:41	340:45	3	int stride
TYPE	340:41	340:41	4	int
TYPE_NAME	340:41	340:41	5	int
LEAF_NODE	340:41	340:41	6	int
NAME	340:45	340:45	4	stride
LEAF_NODE	340:45	340:45	5	stride
LEAF_NODE	340:51	340:51	3	,
PARAMETER_DECL	340:53	340:68	3	unsigned char * op
TYPE	340:53	340:67	4	unsigned char *
TYPE_NAME	340:53	340:62	5	unsigned char
LEAF_NODE	340:53	340:53	6	unsigned
LEAF_NODE	340:62	340:62	6	char
POINTER	340:67	340:67	5	*
LEAF_NODE	340:67	340:67	6	*
NAME	340:68	340:68	4	op
LEAF_NODE	340:68	340:68	5	op
LEAF_NODE	340:70	340:70	3	,
PARAMETER_DECL	341:1	341:16	3	unsigned char * ToLinear8
TYPE	341:1	341:15	4	unsigned char *
TYPE_NAME	341:1	341:10	5	unsigned char
LEAF_NODE	341:1	341:1	6	unsigned
LEAF_NODE	341:10	341:10	6	char
POINTER	341:15	341:15	5	*
LEAF_NODE	341:15	341:15	6	*
NAME	341:16	341:16	4	ToLinear8
LEAF_NODE	341:16	341:16	5	ToLinear8
LEAF_NODE	341:25	341:25	3	)
LEAF_NODE	342:0	342:0	2	{
STATEMENTS	343:4	345:4	2	
LEAF_NODE	343:4	343:4	3	register
SIMPLE_DECL	343:13	343:47	3	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask ;
INIT_DECL_LIST	343:13	343:13	4	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	343:13	343:27	5	unsigned int cr
TYPE	343:13	343:13	6	unsigned int
TYPE_NAME	343:13	343:22	7	unsigned int
LEAF_NODE	343:13	343:13	8	unsigned
LEAF_NODE	343:22	343:22	8	int
NAME	343:27	343:27	6	cr
LEAF_NODE	343:27	343:27	7	cr
LEAF_NODE	343:29	343:29	5	,
INIT_DECL_LIST	343:13	343:13	5	unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	343:13	343:31	6	unsigned int cg
TYPE	343:13	343:13	7	unsigned int
TYPE_NAME	343:13	343:22	8	unsigned int
LEAF_NODE	343:13	343:13	9	unsigned
LEAF_NODE	343:22	343:22	9	int
NAME	343:31	343:31	7	cg
LEAF_NODE	343:31	343:31	8	cg
LEAF_NODE	343:33	343:33	6	,
INIT_DECL_LIST	343:13	343:13	6	unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	343:13	343:35	7	unsigned int cb
TYPE	343:13	343:13	8	unsigned int
TYPE_NAME	343:13	343:22	9	unsigned int
LEAF_NODE	343:13	343:13	10	unsigned
LEAF_NODE	343:22	343:22	10	int
NAME	343:35	343:35	8	cb
LEAF_NODE	343:35	343:35	9	cb
LEAF_NODE	343:37	343:37	7	,
INIT_DECL_LIST	343:13	343:13	7	unsigned int ca , unsigned int mask
VAR_DECL	343:13	343:39	8	unsigned int ca
TYPE	343:13	343:13	9	unsigned int
TYPE_NAME	343:13	343:22	10	unsigned int
LEAF_NODE	343:13	343:13	11	unsigned
LEAF_NODE	343:22	343:22	11	int
NAME	343:39	343:39	9	ca
LEAF_NODE	343:39	343:39	10	ca
LEAF_NODE	343:41	343:41	8	,
VAR_DECL	343:13	343:43	8	unsigned int mask
TYPE	343:13	343:13	9	unsigned int
TYPE_NAME	343:13	343:22	10	unsigned int
LEAF_NODE	343:13	343:13	11	unsigned
LEAF_NODE	343:22	343:22	11	int
NAME	343:43	343:43	9	mask
LEAF_NODE	343:43	343:43	10	mask
LEAF_NODE	343:47	343:47	4	;
SELECTION	345:4	345:21	3	
KEYWORD	345:4	345:4	4	if
LEAF_NODE	345:4	345:4	5	if
LEAF_NODE	345:7	345:7	4	(
CONDITION	345:8	345:8	4	n >= stride
EXPR	345:8	345:13	5	n >= stride
FIELD	345:8	345:8	6	n
LEAF_NODE	345:8	345:8	7	n
REL_OPERATOR	345:10	345:10	6	>=
LEAF_NODE	345:10	345:10	7	>=
FIELD	345:13	345:13	6	stride
LEAF_NODE	345:13	345:13	7	stride
LEAF_NODE	345:19	345:19	4	)
STATEMENTS	345:21	384:4	4	
LEAF_NODE	345:21	345:21	5	{
STATEMENTS	346:1	375:3	5	
EXPR_STATEMENT	346:1	346:17	6	mask = CODE_MASK ;
EXPR	346:1	346:1	7	mask = CODE_MASK
ASSIGN	346:1	346:8	8	mask = CODE_MASK
LVAL	346:1	346:1	9	mask
FIELD	346:1	346:1	10	mask
LEAF_NODE	346:1	346:1	11	mask
ASSIGN_OP	346:6	346:6	9	=
LEAF_NODE	346:6	346:6	10	=
RVAL	346:8	346:8	9	CODE_MASK
FIELD	346:8	346:8	10	CODE_MASK
LEAF_NODE	346:8	346:8	11	CODE_MASK
LEAF_NODE	346:17	346:17	7	;
SELECTION	347:1	347:18	6	
KEYWORD	347:1	347:1	7	if
LEAF_NODE	347:1	347:1	8	if
LEAF_NODE	347:4	347:4	7	(
CONDITION	347:5	347:5	7	stride == 3
EXPR	347:5	347:15	8	stride == 3
FIELD	347:5	347:5	9	stride
LEAF_NODE	347:5	347:5	10	stride
EQ_OPERATOR	347:12	347:12	9	==
LEAF_NODE	347:12	347:12	10	==
FIELD	347:15	347:15	9	3
LEAF_NODE	347:15	347:15	10	3
LEAF_NODE	347:16	347:16	7	)
STATEMENTS	347:18	360:1	7	
LEAF_NODE	347:18	347:18	8	{
STATEMENTS	348:5	352:5	8	
EXPR_STATEMENT	348:5	348:43	9	op [ 0 ] = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ] ;
EXPR	348:5	348:5	10	op [ 0 ] = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
ASSIGN	348:5	348:13	11	op [ 0 ] = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
LVAL	348:5	348:5	12	op [ 0 ]
FIELD	348:5	348:9	13	op [ 0 ]
LEAF_NODE	348:5	348:5	14	op
LEAF_NODE	348:7	348:7	14	[
EXPR	348:8	348:8	14	0
FIELD	348:8	348:8	15	0
LEAF_NODE	348:8	348:8	16	0
LEAF_NODE	348:9	348:9	14	]
ASSIGN_OP	348:11	348:11	12	=
LEAF_NODE	348:11	348:11	13	=
RVAL	348:13	348:13	12	ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
FIELD	348:13	348:42	13	ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
LEAF_NODE	348:13	348:13	14	ToLinear8
LEAF_NODE	348:22	348:22	14	[
EXPR	348:23	348:23	14	cr = ( wp [ 0 ] & mask )
ASSIGN	348:23	348:28	15	cr = ( wp [ 0 ] & mask )
LVAL	348:23	348:23	16	cr
FIELD	348:23	348:23	17	cr
LEAF_NODE	348:23	348:23	18	cr
ASSIGN_OP	348:26	348:26	16	=
LEAF_NODE	348:26	348:26	17	=
RVAL	348:28	348:41	16	( wp [ 0 ] & mask )
LEAF_NODE	348:28	348:28	17	(
FIELD	348:29	348:33	17	wp [ 0 ]
LEAF_NODE	348:29	348:29	18	wp
LEAF_NODE	348:31	348:31	18	[
EXPR	348:32	348:32	18	0
FIELD	348:32	348:32	19	0
LEAF_NODE	348:32	348:32	20	0
LEAF_NODE	348:33	348:33	18	]
LEAF_NODE	348:35	348:35	17	&
FIELD	348:37	348:37	17	mask
LEAF_NODE	348:37	348:37	18	mask
LEAF_NODE	348:41	348:41	17	)
LEAF_NODE	348:42	348:42	14	]
LEAF_NODE	348:43	348:43	10	;
EXPR_STATEMENT	349:5	349:43	9	op [ 1 ] = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ] ;
EXPR	349:5	349:5	10	op [ 1 ] = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
ASSIGN	349:5	349:13	11	op [ 1 ] = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
LVAL	349:5	349:5	12	op [ 1 ]
FIELD	349:5	349:9	13	op [ 1 ]
LEAF_NODE	349:5	349:5	14	op
LEAF_NODE	349:7	349:7	14	[
EXPR	349:8	349:8	14	1
FIELD	349:8	349:8	15	1
LEAF_NODE	349:8	349:8	16	1
LEAF_NODE	349:9	349:9	14	]
ASSIGN_OP	349:11	349:11	12	=
LEAF_NODE	349:11	349:11	13	=
RVAL	349:13	349:13	12	ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
FIELD	349:13	349:42	13	ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
LEAF_NODE	349:13	349:13	14	ToLinear8
LEAF_NODE	349:22	349:22	14	[
EXPR	349:23	349:23	14	cg = ( wp [ 1 ] & mask )
ASSIGN	349:23	349:28	15	cg = ( wp [ 1 ] & mask )
LVAL	349:23	349:23	16	cg
FIELD	349:23	349:23	17	cg
LEAF_NODE	349:23	349:23	18	cg
ASSIGN_OP	349:26	349:26	16	=
LEAF_NODE	349:26	349:26	17	=
RVAL	349:28	349:41	16	( wp [ 1 ] & mask )
LEAF_NODE	349:28	349:28	17	(
FIELD	349:29	349:33	17	wp [ 1 ]
LEAF_NODE	349:29	349:29	18	wp
LEAF_NODE	349:31	349:31	18	[
EXPR	349:32	349:32	18	1
FIELD	349:32	349:32	19	1
LEAF_NODE	349:32	349:32	20	1
LEAF_NODE	349:33	349:33	18	]
LEAF_NODE	349:35	349:35	17	&
FIELD	349:37	349:37	17	mask
LEAF_NODE	349:37	349:37	18	mask
LEAF_NODE	349:41	349:41	17	)
LEAF_NODE	349:42	349:42	14	]
LEAF_NODE	349:43	349:43	10	;
EXPR_STATEMENT	350:5	350:43	9	op [ 2 ] = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ] ;
EXPR	350:5	350:5	10	op [ 2 ] = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
ASSIGN	350:5	350:13	11	op [ 2 ] = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
LVAL	350:5	350:5	12	op [ 2 ]
FIELD	350:5	350:9	13	op [ 2 ]
LEAF_NODE	350:5	350:5	14	op
LEAF_NODE	350:7	350:7	14	[
EXPR	350:8	350:8	14	2
FIELD	350:8	350:8	15	2
LEAF_NODE	350:8	350:8	16	2
LEAF_NODE	350:9	350:9	14	]
ASSIGN_OP	350:11	350:11	12	=
LEAF_NODE	350:11	350:11	13	=
RVAL	350:13	350:13	12	ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
FIELD	350:13	350:42	13	ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
LEAF_NODE	350:13	350:13	14	ToLinear8
LEAF_NODE	350:22	350:22	14	[
EXPR	350:23	350:23	14	cb = ( wp [ 2 ] & mask )
ASSIGN	350:23	350:28	15	cb = ( wp [ 2 ] & mask )
LVAL	350:23	350:23	16	cb
FIELD	350:23	350:23	17	cb
LEAF_NODE	350:23	350:23	18	cb
ASSIGN_OP	350:26	350:26	16	=
LEAF_NODE	350:26	350:26	17	=
RVAL	350:28	350:41	16	( wp [ 2 ] & mask )
LEAF_NODE	350:28	350:28	17	(
FIELD	350:29	350:33	17	wp [ 2 ]
LEAF_NODE	350:29	350:29	18	wp
LEAF_NODE	350:31	350:31	18	[
EXPR	350:32	350:32	18	2
FIELD	350:32	350:32	19	2
LEAF_NODE	350:32	350:32	20	2
LEAF_NODE	350:33	350:33	18	]
LEAF_NODE	350:35	350:35	17	&
FIELD	350:37	350:37	17	mask
LEAF_NODE	350:37	350:37	18	mask
LEAF_NODE	350:41	350:41	17	)
LEAF_NODE	350:42	350:42	14	]
LEAF_NODE	350:43	350:43	10	;
EXPR_STATEMENT	351:5	351:11	9	n -= 3 ;
EXPR	351:5	351:5	10	n -= 3
ASSIGN	351:5	351:10	11	n -= 3
LVAL	351:5	351:5	12	n
FIELD	351:5	351:5	13	n
LEAF_NODE	351:5	351:5	14	n
ASSIGN_OP	351:7	351:7	12	-=
LEAF_NODE	351:7	351:7	13	-=
RVAL	351:10	351:10	12	3
FIELD	351:10	351:10	13	3
LEAF_NODE	351:10	351:10	14	3
LEAF_NODE	351:11	351:11	10	;
ITERATION	352:5	352:19	9	
KEYWORD	352:5	352:5	10	while
LEAF_NODE	352:5	352:5	11	while
LEAF_NODE	352:11	352:11	10	(
CONDITION	352:12	352:12	10	n > 0
EXPR	352:12	352:16	11	n > 0
FIELD	352:12	352:12	12	n
LEAF_NODE	352:12	352:12	13	n
REL_OPERATOR	352:14	352:14	12	>
LEAF_NODE	352:14	352:14	13	>
FIELD	352:16	352:16	12	0
LEAF_NODE	352:16	352:16	13	0
LEAF_NODE	352:17	352:17	10	)
STATEMENTS	352:19	359:5	10	
LEAF_NODE	352:19	352:19	11	{
STATEMENTS	353:2	358:2	11	
EXPR_STATEMENT	353:2	353:8	12	n -= 3 ;
EXPR	353:2	353:2	13	n -= 3
ASSIGN	353:2	353:7	14	n -= 3
LVAL	353:2	353:2	15	n
FIELD	353:2	353:2	16	n
LEAF_NODE	353:2	353:2	17	n
ASSIGN_OP	353:4	353:4	15	-=
LEAF_NODE	353:4	353:4	16	-=
RVAL	353:7	353:7	15	3
FIELD	353:7	353:7	16	3
LEAF_NODE	353:7	353:7	17	3
LEAF_NODE	353:8	353:8	13	;
EXPR_STATEMENT	354:2	354:9	12	wp += 3 ;
EXPR	354:2	354:2	13	wp += 3
ASSIGN	354:2	354:8	14	wp += 3
LVAL	354:2	354:2	15	wp
FIELD	354:2	354:2	16	wp
LEAF_NODE	354:2	354:2	17	wp
ASSIGN_OP	354:5	354:5	15	+=
LEAF_NODE	354:5	354:5	16	+=
RVAL	354:8	354:8	15	3
FIELD	354:8	354:8	16	3
LEAF_NODE	354:8	354:8	17	3
LEAF_NODE	354:9	354:9	13	;
EXPR_STATEMENT	355:2	355:9	12	op += 3 ;
EXPR	355:2	355:2	13	op += 3
ASSIGN	355:2	355:8	14	op += 3
LVAL	355:2	355:2	15	op
FIELD	355:2	355:2	16	op
LEAF_NODE	355:2	355:2	17	op
ASSIGN_OP	355:5	355:5	15	+=
LEAF_NODE	355:5	355:5	16	+=
RVAL	355:8	355:8	15	3
FIELD	355:8	355:8	16	3
LEAF_NODE	355:8	355:8	17	3
LEAF_NODE	355:9	355:9	13	;
EXPR_STATEMENT	356:2	356:41	12	op [ 0 ] = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ] ;
EXPR	356:2	356:2	13	op [ 0 ] = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
ASSIGN	356:2	356:10	14	op [ 0 ] = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
LVAL	356:2	356:2	15	op [ 0 ]
FIELD	356:2	356:6	16	op [ 0 ]
LEAF_NODE	356:2	356:2	17	op
LEAF_NODE	356:4	356:4	17	[
EXPR	356:5	356:5	17	0
FIELD	356:5	356:5	18	0
LEAF_NODE	356:5	356:5	19	0
LEAF_NODE	356:6	356:6	17	]
ASSIGN_OP	356:8	356:8	15	=
LEAF_NODE	356:8	356:8	16	=
RVAL	356:10	356:10	15	ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
FIELD	356:10	356:40	16	ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
LEAF_NODE	356:10	356:10	17	ToLinear8
LEAF_NODE	356:19	356:19	17	[
EXPR	356:20	356:36	17	( cr += wp [ 0 ] ) & mask
LEAF_NODE	356:20	356:20	18	(
ASSIGN	356:21	356:27	18	cr += wp [ 0 ]
LVAL	356:21	356:21	19	cr
FIELD	356:21	356:21	20	cr
LEAF_NODE	356:21	356:21	21	cr
ASSIGN_OP	356:24	356:24	19	+=
LEAF_NODE	356:24	356:24	20	+=
RVAL	356:27	356:27	19	wp [ 0 ]
FIELD	356:27	356:31	20	wp [ 0 ]
LEAF_NODE	356:27	356:27	21	wp
LEAF_NODE	356:29	356:29	21	[
EXPR	356:30	356:30	21	0
FIELD	356:30	356:30	22	0
LEAF_NODE	356:30	356:30	23	0
LEAF_NODE	356:31	356:31	21	]
LEAF_NODE	356:32	356:32	18	)
LEAF_NODE	356:34	356:34	18	&
FIELD	356:36	356:36	18	mask
LEAF_NODE	356:36	356:36	19	mask
LEAF_NODE	356:40	356:40	17	]
LEAF_NODE	356:41	356:41	13	;
EXPR_STATEMENT	357:2	357:41	12	op [ 1 ] = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ] ;
EXPR	357:2	357:2	13	op [ 1 ] = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
ASSIGN	357:2	357:10	14	op [ 1 ] = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
LVAL	357:2	357:2	15	op [ 1 ]
FIELD	357:2	357:6	16	op [ 1 ]
LEAF_NODE	357:2	357:2	17	op
LEAF_NODE	357:4	357:4	17	[
EXPR	357:5	357:5	17	1
FIELD	357:5	357:5	18	1
LEAF_NODE	357:5	357:5	19	1
LEAF_NODE	357:6	357:6	17	]
ASSIGN_OP	357:8	357:8	15	=
LEAF_NODE	357:8	357:8	16	=
RVAL	357:10	357:10	15	ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
FIELD	357:10	357:40	16	ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
LEAF_NODE	357:10	357:10	17	ToLinear8
LEAF_NODE	357:19	357:19	17	[
EXPR	357:20	357:36	17	( cg += wp [ 1 ] ) & mask
LEAF_NODE	357:20	357:20	18	(
ASSIGN	357:21	357:27	18	cg += wp [ 1 ]
LVAL	357:21	357:21	19	cg
FIELD	357:21	357:21	20	cg
LEAF_NODE	357:21	357:21	21	cg
ASSIGN_OP	357:24	357:24	19	+=
LEAF_NODE	357:24	357:24	20	+=
RVAL	357:27	357:27	19	wp [ 1 ]
FIELD	357:27	357:31	20	wp [ 1 ]
LEAF_NODE	357:27	357:27	21	wp
LEAF_NODE	357:29	357:29	21	[
EXPR	357:30	357:30	21	1
FIELD	357:30	357:30	22	1
LEAF_NODE	357:30	357:30	23	1
LEAF_NODE	357:31	357:31	21	]
LEAF_NODE	357:32	357:32	18	)
LEAF_NODE	357:34	357:34	18	&
FIELD	357:36	357:36	18	mask
LEAF_NODE	357:36	357:36	19	mask
LEAF_NODE	357:40	357:40	17	]
LEAF_NODE	357:41	357:41	13	;
EXPR_STATEMENT	358:2	358:41	12	op [ 2 ] = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ] ;
EXPR	358:2	358:2	13	op [ 2 ] = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
ASSIGN	358:2	358:10	14	op [ 2 ] = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
LVAL	358:2	358:2	15	op [ 2 ]
FIELD	358:2	358:6	16	op [ 2 ]
LEAF_NODE	358:2	358:2	17	op
LEAF_NODE	358:4	358:4	17	[
EXPR	358:5	358:5	17	2
FIELD	358:5	358:5	18	2
LEAF_NODE	358:5	358:5	19	2
LEAF_NODE	358:6	358:6	17	]
ASSIGN_OP	358:8	358:8	15	=
LEAF_NODE	358:8	358:8	16	=
RVAL	358:10	358:10	15	ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
FIELD	358:10	358:40	16	ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
LEAF_NODE	358:10	358:10	17	ToLinear8
LEAF_NODE	358:19	358:19	17	[
EXPR	358:20	358:36	17	( cb += wp [ 2 ] ) & mask
LEAF_NODE	358:20	358:20	18	(
ASSIGN	358:21	358:27	18	cb += wp [ 2 ]
LVAL	358:21	358:21	19	cb
FIELD	358:21	358:21	20	cb
LEAF_NODE	358:21	358:21	21	cb
ASSIGN_OP	358:24	358:24	19	+=
LEAF_NODE	358:24	358:24	20	+=
RVAL	358:27	358:27	19	wp [ 2 ]
FIELD	358:27	358:31	20	wp [ 2 ]
LEAF_NODE	358:27	358:27	21	wp
LEAF_NODE	358:29	358:29	21	[
EXPR	358:30	358:30	21	2
FIELD	358:30	358:30	22	2
LEAF_NODE	358:30	358:30	23	2
LEAF_NODE	358:31	358:31	21	]
LEAF_NODE	358:32	358:32	18	)
LEAF_NODE	358:34	358:34	18	&
FIELD	358:36	358:36	18	mask
LEAF_NODE	358:36	358:36	19	mask
LEAF_NODE	358:40	358:40	17	]
LEAF_NODE	358:41	358:41	13	;
LEAF_NODE	359:5	359:5	11	}
LEAF_NODE	360:1	360:1	8	}
SELECTION	360:3	360:8	6	
KEYWORD	360:3	360:3	7	else
LEAF_NODE	360:3	360:3	8	else
STATEMENTS	360:8	360:8	7	
SELECTION	360:8	360:25	8	
KEYWORD	360:8	360:8	9	if
LEAF_NODE	360:8	360:8	10	if
LEAF_NODE	360:11	360:11	9	(
CONDITION	360:12	360:12	9	stride == 4
EXPR	360:12	360:22	10	stride == 4
FIELD	360:12	360:12	11	stride
LEAF_NODE	360:12	360:12	12	stride
EQ_OPERATOR	360:19	360:19	11	==
LEAF_NODE	360:19	360:19	12	==
FIELD	360:22	360:22	11	4
LEAF_NODE	360:22	360:22	12	4
LEAF_NODE	360:23	360:23	9	)
STATEMENTS	360:25	375:1	9	
LEAF_NODE	360:25	360:25	10	{
STATEMENTS	361:5	366:5	10	
EXPR_STATEMENT	361:5	361:43	11	op [ 0 ] = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ] ;
EXPR	361:5	361:5	12	op [ 0 ] = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
ASSIGN	361:5	361:13	13	op [ 0 ] = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
LVAL	361:5	361:5	14	op [ 0 ]
FIELD	361:5	361:9	15	op [ 0 ]
LEAF_NODE	361:5	361:5	16	op
LEAF_NODE	361:7	361:7	16	[
EXPR	361:8	361:8	16	0
FIELD	361:8	361:8	17	0
LEAF_NODE	361:8	361:8	18	0
LEAF_NODE	361:9	361:9	16	]
ASSIGN_OP	361:11	361:11	14	=
LEAF_NODE	361:11	361:11	15	=
RVAL	361:13	361:13	14	ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
FIELD	361:13	361:42	15	ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
LEAF_NODE	361:13	361:13	16	ToLinear8
LEAF_NODE	361:22	361:22	16	[
EXPR	361:23	361:23	16	cr = ( wp [ 0 ] & mask )
ASSIGN	361:23	361:28	17	cr = ( wp [ 0 ] & mask )
LVAL	361:23	361:23	18	cr
FIELD	361:23	361:23	19	cr
LEAF_NODE	361:23	361:23	20	cr
ASSIGN_OP	361:26	361:26	18	=
LEAF_NODE	361:26	361:26	19	=
RVAL	361:28	361:41	18	( wp [ 0 ] & mask )
LEAF_NODE	361:28	361:28	19	(
FIELD	361:29	361:33	19	wp [ 0 ]
LEAF_NODE	361:29	361:29	20	wp
LEAF_NODE	361:31	361:31	20	[
EXPR	361:32	361:32	20	0
FIELD	361:32	361:32	21	0
LEAF_NODE	361:32	361:32	22	0
LEAF_NODE	361:33	361:33	20	]
LEAF_NODE	361:35	361:35	19	&
FIELD	361:37	361:37	19	mask
LEAF_NODE	361:37	361:37	20	mask
LEAF_NODE	361:41	361:41	19	)
LEAF_NODE	361:42	361:42	16	]
LEAF_NODE	361:43	361:43	12	;
EXPR_STATEMENT	362:5	362:43	11	op [ 1 ] = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ] ;
EXPR	362:5	362:5	12	op [ 1 ] = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
ASSIGN	362:5	362:13	13	op [ 1 ] = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
LVAL	362:5	362:5	14	op [ 1 ]
FIELD	362:5	362:9	15	op [ 1 ]
LEAF_NODE	362:5	362:5	16	op
LEAF_NODE	362:7	362:7	16	[
EXPR	362:8	362:8	16	1
FIELD	362:8	362:8	17	1
LEAF_NODE	362:8	362:8	18	1
LEAF_NODE	362:9	362:9	16	]
ASSIGN_OP	362:11	362:11	14	=
LEAF_NODE	362:11	362:11	15	=
RVAL	362:13	362:13	14	ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
FIELD	362:13	362:42	15	ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
LEAF_NODE	362:13	362:13	16	ToLinear8
LEAF_NODE	362:22	362:22	16	[
EXPR	362:23	362:23	16	cg = ( wp [ 1 ] & mask )
ASSIGN	362:23	362:28	17	cg = ( wp [ 1 ] & mask )
LVAL	362:23	362:23	18	cg
FIELD	362:23	362:23	19	cg
LEAF_NODE	362:23	362:23	20	cg
ASSIGN_OP	362:26	362:26	18	=
LEAF_NODE	362:26	362:26	19	=
RVAL	362:28	362:41	18	( wp [ 1 ] & mask )
LEAF_NODE	362:28	362:28	19	(
FIELD	362:29	362:33	19	wp [ 1 ]
LEAF_NODE	362:29	362:29	20	wp
LEAF_NODE	362:31	362:31	20	[
EXPR	362:32	362:32	20	1
FIELD	362:32	362:32	21	1
LEAF_NODE	362:32	362:32	22	1
LEAF_NODE	362:33	362:33	20	]
LEAF_NODE	362:35	362:35	19	&
FIELD	362:37	362:37	19	mask
LEAF_NODE	362:37	362:37	20	mask
LEAF_NODE	362:41	362:41	19	)
LEAF_NODE	362:42	362:42	16	]
LEAF_NODE	362:43	362:43	12	;
EXPR_STATEMENT	363:5	363:43	11	op [ 2 ] = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ] ;
EXPR	363:5	363:5	12	op [ 2 ] = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
ASSIGN	363:5	363:13	13	op [ 2 ] = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
LVAL	363:5	363:5	14	op [ 2 ]
FIELD	363:5	363:9	15	op [ 2 ]
LEAF_NODE	363:5	363:5	16	op
LEAF_NODE	363:7	363:7	16	[
EXPR	363:8	363:8	16	2
FIELD	363:8	363:8	17	2
LEAF_NODE	363:8	363:8	18	2
LEAF_NODE	363:9	363:9	16	]
ASSIGN_OP	363:11	363:11	14	=
LEAF_NODE	363:11	363:11	15	=
RVAL	363:13	363:13	14	ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
FIELD	363:13	363:42	15	ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
LEAF_NODE	363:13	363:13	16	ToLinear8
LEAF_NODE	363:22	363:22	16	[
EXPR	363:23	363:23	16	cb = ( wp [ 2 ] & mask )
ASSIGN	363:23	363:28	17	cb = ( wp [ 2 ] & mask )
LVAL	363:23	363:23	18	cb
FIELD	363:23	363:23	19	cb
LEAF_NODE	363:23	363:23	20	cb
ASSIGN_OP	363:26	363:26	18	=
LEAF_NODE	363:26	363:26	19	=
RVAL	363:28	363:41	18	( wp [ 2 ] & mask )
LEAF_NODE	363:28	363:28	19	(
FIELD	363:29	363:33	19	wp [ 2 ]
LEAF_NODE	363:29	363:29	20	wp
LEAF_NODE	363:31	363:31	20	[
EXPR	363:32	363:32	20	2
FIELD	363:32	363:32	21	2
LEAF_NODE	363:32	363:32	22	2
LEAF_NODE	363:33	363:33	20	]
LEAF_NODE	363:35	363:35	19	&
FIELD	363:37	363:37	19	mask
LEAF_NODE	363:37	363:37	20	mask
LEAF_NODE	363:41	363:41	19	)
LEAF_NODE	363:42	363:42	16	]
LEAF_NODE	363:43	363:43	12	;
EXPR_STATEMENT	364:5	364:43	11	op [ 3 ] = ToLinear8 [ ca = ( wp [ 3 ] & mask ) ] ;
EXPR	364:5	364:5	12	op [ 3 ] = ToLinear8 [ ca = ( wp [ 3 ] & mask ) ]
ASSIGN	364:5	364:13	13	op [ 3 ] = ToLinear8 [ ca = ( wp [ 3 ] & mask ) ]
LVAL	364:5	364:5	14	op [ 3 ]
FIELD	364:5	364:9	15	op [ 3 ]
LEAF_NODE	364:5	364:5	16	op
LEAF_NODE	364:7	364:7	16	[
EXPR	364:8	364:8	16	3
FIELD	364:8	364:8	17	3
LEAF_NODE	364:8	364:8	18	3
LEAF_NODE	364:9	364:9	16	]
ASSIGN_OP	364:11	364:11	14	=
LEAF_NODE	364:11	364:11	15	=
RVAL	364:13	364:13	14	ToLinear8 [ ca = ( wp [ 3 ] & mask ) ]
FIELD	364:13	364:42	15	ToLinear8 [ ca = ( wp [ 3 ] & mask ) ]
LEAF_NODE	364:13	364:13	16	ToLinear8
LEAF_NODE	364:22	364:22	16	[
EXPR	364:23	364:23	16	ca = ( wp [ 3 ] & mask )
ASSIGN	364:23	364:28	17	ca = ( wp [ 3 ] & mask )
LVAL	364:23	364:23	18	ca
FIELD	364:23	364:23	19	ca
LEAF_NODE	364:23	364:23	20	ca
ASSIGN_OP	364:26	364:26	18	=
LEAF_NODE	364:26	364:26	19	=
RVAL	364:28	364:41	18	( wp [ 3 ] & mask )
LEAF_NODE	364:28	364:28	19	(
FIELD	364:29	364:33	19	wp [ 3 ]
LEAF_NODE	364:29	364:29	20	wp
LEAF_NODE	364:31	364:31	20	[
EXPR	364:32	364:32	20	3
FIELD	364:32	364:32	21	3
LEAF_NODE	364:32	364:32	22	3
LEAF_NODE	364:33	364:33	20	]
LEAF_NODE	364:35	364:35	19	&
FIELD	364:37	364:37	19	mask
LEAF_NODE	364:37	364:37	20	mask
LEAF_NODE	364:41	364:41	19	)
LEAF_NODE	364:42	364:42	16	]
LEAF_NODE	364:43	364:43	12	;
EXPR_STATEMENT	365:5	365:11	11	n -= 4 ;
EXPR	365:5	365:5	12	n -= 4
ASSIGN	365:5	365:10	13	n -= 4
LVAL	365:5	365:5	14	n
FIELD	365:5	365:5	15	n
LEAF_NODE	365:5	365:5	16	n
ASSIGN_OP	365:7	365:7	14	-=
LEAF_NODE	365:7	365:7	15	-=
RVAL	365:10	365:10	14	4
FIELD	365:10	365:10	15	4
LEAF_NODE	365:10	365:10	16	4
LEAF_NODE	365:11	365:11	12	;
ITERATION	366:5	366:19	11	
KEYWORD	366:5	366:5	12	while
LEAF_NODE	366:5	366:5	13	while
LEAF_NODE	366:11	366:11	12	(
CONDITION	366:12	366:12	12	n > 0
EXPR	366:12	366:16	13	n > 0
FIELD	366:12	366:12	14	n
LEAF_NODE	366:12	366:12	15	n
REL_OPERATOR	366:14	366:14	14	>
LEAF_NODE	366:14	366:14	15	>
FIELD	366:16	366:16	14	0
LEAF_NODE	366:16	366:16	15	0
LEAF_NODE	366:17	366:17	12	)
STATEMENTS	366:19	374:5	12	
LEAF_NODE	366:19	366:19	13	{
STATEMENTS	367:2	373:2	13	
EXPR_STATEMENT	367:2	367:8	14	n -= 4 ;
EXPR	367:2	367:2	15	n -= 4
ASSIGN	367:2	367:7	16	n -= 4
LVAL	367:2	367:2	17	n
FIELD	367:2	367:2	18	n
LEAF_NODE	367:2	367:2	19	n
ASSIGN_OP	367:4	367:4	17	-=
LEAF_NODE	367:4	367:4	18	-=
RVAL	367:7	367:7	17	4
FIELD	367:7	367:7	18	4
LEAF_NODE	367:7	367:7	19	4
LEAF_NODE	367:8	367:8	15	;
EXPR_STATEMENT	368:2	368:9	14	wp += 4 ;
EXPR	368:2	368:2	15	wp += 4
ASSIGN	368:2	368:8	16	wp += 4
LVAL	368:2	368:2	17	wp
FIELD	368:2	368:2	18	wp
LEAF_NODE	368:2	368:2	19	wp
ASSIGN_OP	368:5	368:5	17	+=
LEAF_NODE	368:5	368:5	18	+=
RVAL	368:8	368:8	17	4
FIELD	368:8	368:8	18	4
LEAF_NODE	368:8	368:8	19	4
LEAF_NODE	368:9	368:9	15	;
EXPR_STATEMENT	369:2	369:9	14	op += 4 ;
EXPR	369:2	369:2	15	op += 4
ASSIGN	369:2	369:8	16	op += 4
LVAL	369:2	369:2	17	op
FIELD	369:2	369:2	18	op
LEAF_NODE	369:2	369:2	19	op
ASSIGN_OP	369:5	369:5	17	+=
LEAF_NODE	369:5	369:5	18	+=
RVAL	369:8	369:8	17	4
FIELD	369:8	369:8	18	4
LEAF_NODE	369:8	369:8	19	4
LEAF_NODE	369:9	369:9	15	;
EXPR_STATEMENT	370:2	370:41	14	op [ 0 ] = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ] ;
EXPR	370:2	370:2	15	op [ 0 ] = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
ASSIGN	370:2	370:10	16	op [ 0 ] = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
LVAL	370:2	370:2	17	op [ 0 ]
FIELD	370:2	370:6	18	op [ 0 ]
LEAF_NODE	370:2	370:2	19	op
LEAF_NODE	370:4	370:4	19	[
EXPR	370:5	370:5	19	0
FIELD	370:5	370:5	20	0
LEAF_NODE	370:5	370:5	21	0
LEAF_NODE	370:6	370:6	19	]
ASSIGN_OP	370:8	370:8	17	=
LEAF_NODE	370:8	370:8	18	=
RVAL	370:10	370:10	17	ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
FIELD	370:10	370:40	18	ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
LEAF_NODE	370:10	370:10	19	ToLinear8
LEAF_NODE	370:19	370:19	19	[
EXPR	370:20	370:36	19	( cr += wp [ 0 ] ) & mask
LEAF_NODE	370:20	370:20	20	(
ASSIGN	370:21	370:27	20	cr += wp [ 0 ]
LVAL	370:21	370:21	21	cr
FIELD	370:21	370:21	22	cr
LEAF_NODE	370:21	370:21	23	cr
ASSIGN_OP	370:24	370:24	21	+=
LEAF_NODE	370:24	370:24	22	+=
RVAL	370:27	370:27	21	wp [ 0 ]
FIELD	370:27	370:31	22	wp [ 0 ]
LEAF_NODE	370:27	370:27	23	wp
LEAF_NODE	370:29	370:29	23	[
EXPR	370:30	370:30	23	0
FIELD	370:30	370:30	24	0
LEAF_NODE	370:30	370:30	25	0
LEAF_NODE	370:31	370:31	23	]
LEAF_NODE	370:32	370:32	20	)
LEAF_NODE	370:34	370:34	20	&
FIELD	370:36	370:36	20	mask
LEAF_NODE	370:36	370:36	21	mask
LEAF_NODE	370:40	370:40	19	]
LEAF_NODE	370:41	370:41	15	;
EXPR_STATEMENT	371:2	371:41	14	op [ 1 ] = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ] ;
EXPR	371:2	371:2	15	op [ 1 ] = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
ASSIGN	371:2	371:10	16	op [ 1 ] = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
LVAL	371:2	371:2	17	op [ 1 ]
FIELD	371:2	371:6	18	op [ 1 ]
LEAF_NODE	371:2	371:2	19	op
LEAF_NODE	371:4	371:4	19	[
EXPR	371:5	371:5	19	1
FIELD	371:5	371:5	20	1
LEAF_NODE	371:5	371:5	21	1
LEAF_NODE	371:6	371:6	19	]
ASSIGN_OP	371:8	371:8	17	=
LEAF_NODE	371:8	371:8	18	=
RVAL	371:10	371:10	17	ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
FIELD	371:10	371:40	18	ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
LEAF_NODE	371:10	371:10	19	ToLinear8
LEAF_NODE	371:19	371:19	19	[
EXPR	371:20	371:36	19	( cg += wp [ 1 ] ) & mask
LEAF_NODE	371:20	371:20	20	(
ASSIGN	371:21	371:27	20	cg += wp [ 1 ]
LVAL	371:21	371:21	21	cg
FIELD	371:21	371:21	22	cg
LEAF_NODE	371:21	371:21	23	cg
ASSIGN_OP	371:24	371:24	21	+=
LEAF_NODE	371:24	371:24	22	+=
RVAL	371:27	371:27	21	wp [ 1 ]
FIELD	371:27	371:31	22	wp [ 1 ]
LEAF_NODE	371:27	371:27	23	wp
LEAF_NODE	371:29	371:29	23	[
EXPR	371:30	371:30	23	1
FIELD	371:30	371:30	24	1
LEAF_NODE	371:30	371:30	25	1
LEAF_NODE	371:31	371:31	23	]
LEAF_NODE	371:32	371:32	20	)
LEAF_NODE	371:34	371:34	20	&
FIELD	371:36	371:36	20	mask
LEAF_NODE	371:36	371:36	21	mask
LEAF_NODE	371:40	371:40	19	]
LEAF_NODE	371:41	371:41	15	;
EXPR_STATEMENT	372:2	372:41	14	op [ 2 ] = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ] ;
EXPR	372:2	372:2	15	op [ 2 ] = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
ASSIGN	372:2	372:10	16	op [ 2 ] = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
LVAL	372:2	372:2	17	op [ 2 ]
FIELD	372:2	372:6	18	op [ 2 ]
LEAF_NODE	372:2	372:2	19	op
LEAF_NODE	372:4	372:4	19	[
EXPR	372:5	372:5	19	2
FIELD	372:5	372:5	20	2
LEAF_NODE	372:5	372:5	21	2
LEAF_NODE	372:6	372:6	19	]
ASSIGN_OP	372:8	372:8	17	=
LEAF_NODE	372:8	372:8	18	=
RVAL	372:10	372:10	17	ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
FIELD	372:10	372:40	18	ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
LEAF_NODE	372:10	372:10	19	ToLinear8
LEAF_NODE	372:19	372:19	19	[
EXPR	372:20	372:36	19	( cb += wp [ 2 ] ) & mask
LEAF_NODE	372:20	372:20	20	(
ASSIGN	372:21	372:27	20	cb += wp [ 2 ]
LVAL	372:21	372:21	21	cb
FIELD	372:21	372:21	22	cb
LEAF_NODE	372:21	372:21	23	cb
ASSIGN_OP	372:24	372:24	21	+=
LEAF_NODE	372:24	372:24	22	+=
RVAL	372:27	372:27	21	wp [ 2 ]
FIELD	372:27	372:31	22	wp [ 2 ]
LEAF_NODE	372:27	372:27	23	wp
LEAF_NODE	372:29	372:29	23	[
EXPR	372:30	372:30	23	2
FIELD	372:30	372:30	24	2
LEAF_NODE	372:30	372:30	25	2
LEAF_NODE	372:31	372:31	23	]
LEAF_NODE	372:32	372:32	20	)
LEAF_NODE	372:34	372:34	20	&
FIELD	372:36	372:36	20	mask
LEAF_NODE	372:36	372:36	21	mask
LEAF_NODE	372:40	372:40	19	]
LEAF_NODE	372:41	372:41	15	;
EXPR_STATEMENT	373:2	373:41	14	op [ 3 ] = ToLinear8 [ ( ca += wp [ 3 ] ) & mask ] ;
EXPR	373:2	373:2	15	op [ 3 ] = ToLinear8 [ ( ca += wp [ 3 ] ) & mask ]
ASSIGN	373:2	373:10	16	op [ 3 ] = ToLinear8 [ ( ca += wp [ 3 ] ) & mask ]
LVAL	373:2	373:2	17	op [ 3 ]
FIELD	373:2	373:6	18	op [ 3 ]
LEAF_NODE	373:2	373:2	19	op
LEAF_NODE	373:4	373:4	19	[
EXPR	373:5	373:5	19	3
FIELD	373:5	373:5	20	3
LEAF_NODE	373:5	373:5	21	3
LEAF_NODE	373:6	373:6	19	]
ASSIGN_OP	373:8	373:8	17	=
LEAF_NODE	373:8	373:8	18	=
RVAL	373:10	373:10	17	ToLinear8 [ ( ca += wp [ 3 ] ) & mask ]
FIELD	373:10	373:40	18	ToLinear8 [ ( ca += wp [ 3 ] ) & mask ]
LEAF_NODE	373:10	373:10	19	ToLinear8
LEAF_NODE	373:19	373:19	19	[
EXPR	373:20	373:36	19	( ca += wp [ 3 ] ) & mask
LEAF_NODE	373:20	373:20	20	(
ASSIGN	373:21	373:27	20	ca += wp [ 3 ]
LVAL	373:21	373:21	21	ca
FIELD	373:21	373:21	22	ca
LEAF_NODE	373:21	373:21	23	ca
ASSIGN_OP	373:24	373:24	21	+=
LEAF_NODE	373:24	373:24	22	+=
RVAL	373:27	373:27	21	wp [ 3 ]
FIELD	373:27	373:31	22	wp [ 3 ]
LEAF_NODE	373:27	373:27	23	wp
LEAF_NODE	373:29	373:29	23	[
EXPR	373:30	373:30	23	3
FIELD	373:30	373:30	24	3
LEAF_NODE	373:30	373:30	25	3
LEAF_NODE	373:31	373:31	23	]
LEAF_NODE	373:32	373:32	20	)
LEAF_NODE	373:34	373:34	20	&
FIELD	373:36	373:36	20	mask
LEAF_NODE	373:36	373:36	21	mask
LEAF_NODE	373:40	373:40	19	]
LEAF_NODE	373:41	373:41	15	;
LEAF_NODE	374:5	374:5	13	}
LEAF_NODE	375:1	375:1	10	}
SELECTION	375:3	375:8	6	
KEYWORD	375:3	375:3	7	else
LEAF_NODE	375:3	375:3	8	else
STATEMENTS	375:8	383:1	7	
LEAF_NODE	375:8	375:8	8	{
STATEMENTS	376:5	378:5	8	
LEAF_NODE	376:5	376:5	9	REPEAT
LEAF_NODE	376:11	376:11	9	(
EXPR_STATEMENT	376:12	376:45	9	stride , * op = ToLinear8 [ * wp & mask ] ;
EXPR	376:12	376:20	10	stride , * op = ToLinear8 [ * wp & mask ]
FIELD	376:12	376:12	11	stride
LEAF_NODE	376:12	376:12	12	stride
LEAF_NODE	376:18	376:18	11	,
ASSIGN	376:20	376:26	11	* op = ToLinear8 [ * wp & mask ]
LVAL	376:20	376:20	12	* op
UNARY_EXPR	376:20	376:21	13	* op
UNARY_OPERATOR	376:20	376:20	14	*
LEAF_NODE	376:20	376:20	15	*
FIELD	376:21	376:21	14	op
LEAF_NODE	376:21	376:21	15	op
ASSIGN_OP	376:24	376:24	12	=
LEAF_NODE	376:24	376:24	13	=
RVAL	376:26	376:26	12	ToLinear8 [ * wp & mask ]
FIELD	376:26	376:44	13	ToLinear8 [ * wp & mask ]
LEAF_NODE	376:26	376:26	14	ToLinear8
LEAF_NODE	376:35	376:35	14	[
EXPR	376:36	376:40	14	* wp & mask
UNARY_EXPR	376:36	376:37	15	* wp
UNARY_OPERATOR	376:36	376:36	16	*
LEAF_NODE	376:36	376:36	17	*
FIELD	376:37	376:37	16	wp
LEAF_NODE	376:37	376:37	17	wp
LEAF_NODE	376:39	376:39	15	&
FIELD	376:40	376:40	15	mask
LEAF_NODE	376:40	376:40	16	mask
LEAF_NODE	376:44	376:44	14	]
LEAF_NODE	376:45	376:45	10	;
EXPR_STATEMENT	376:47	376:51	9	wp ++ ;
EXPR	376:47	376:47	10	wp ++
FIELD	376:47	376:49	11	wp ++
LEAF_NODE	376:47	376:47	12	wp
LEAF_NODE	376:49	376:49	12	++
LEAF_NODE	376:51	376:51	10	;
LEAF_NODE	376:53	376:53	9	op
LEAF_NODE	376:55	376:55	9	++
LEAF_NODE	376:57	376:57	9	)
EXPR_STATEMENT	377:5	377:16	9	n -= stride ;
EXPR	377:5	377:5	10	n -= stride
ASSIGN	377:5	377:10	11	n -= stride
LVAL	377:5	377:5	12	n
FIELD	377:5	377:5	13	n
LEAF_NODE	377:5	377:5	14	n
ASSIGN_OP	377:7	377:7	12	-=
LEAF_NODE	377:7	377:7	13	-=
RVAL	377:10	377:10	12	stride
FIELD	377:10	377:10	13	stride
LEAF_NODE	377:10	377:10	14	stride
LEAF_NODE	377:16	377:16	10	;
ITERATION	378:5	378:19	9	
KEYWORD	378:5	378:5	10	while
LEAF_NODE	378:5	378:5	11	while
LEAF_NODE	378:11	378:11	10	(
CONDITION	378:12	378:12	10	n > 0
EXPR	378:12	378:16	11	n > 0
FIELD	378:12	378:12	12	n
LEAF_NODE	378:12	378:12	13	n
REL_OPERATOR	378:14	378:14	12	>
LEAF_NODE	378:14	378:14	13	>
FIELD	378:16	378:16	12	0
LEAF_NODE	378:16	378:16	13	0
LEAF_NODE	378:17	378:17	10	)
STATEMENTS	378:19	382:5	10	
LEAF_NODE	378:19	378:19	11	{
STATEMENTS	379:2	381:2	11	
LEAF_NODE	379:2	379:2	12	REPEAT
LEAF_NODE	379:8	379:8	12	(
EXPR_STATEMENT	379:9	380:23	12	stride , wp [ stride ] += * wp ;
EXPR	379:9	380:6	13	stride , wp [ stride ] += * wp
FIELD	379:9	379:9	14	stride
LEAF_NODE	379:9	379:9	15	stride
LEAF_NODE	379:15	379:15	14	,
ASSIGN	380:6	380:20	14	wp [ stride ] += * wp
LVAL	380:6	380:6	15	wp [ stride ]
FIELD	380:6	380:15	16	wp [ stride ]
LEAF_NODE	380:6	380:6	17	wp
LEAF_NODE	380:8	380:8	17	[
EXPR	380:9	380:9	17	stride
FIELD	380:9	380:9	18	stride
LEAF_NODE	380:9	380:9	19	stride
LEAF_NODE	380:15	380:15	17	]
ASSIGN_OP	380:17	380:17	15	+=
LEAF_NODE	380:17	380:17	16	+=
RVAL	380:20	380:20	15	* wp
UNARY_EXPR	380:20	380:21	16	* wp
UNARY_OPERATOR	380:20	380:20	17	*
LEAF_NODE	380:20	380:20	18	*
FIELD	380:21	380:21	17	wp
LEAF_NODE	380:21	380:21	18	wp
LEAF_NODE	380:23	380:23	13	;
EXPR_STATEMENT	380:25	380:50	12	* op = ToLinear8 [ * wp & mask ] ;
EXPR	380:25	380:25	13	* op = ToLinear8 [ * wp & mask ]
ASSIGN	380:25	380:31	14	* op = ToLinear8 [ * wp & mask ]
LVAL	380:25	380:25	15	* op
UNARY_EXPR	380:25	380:26	16	* op
UNARY_OPERATOR	380:25	380:25	17	*
LEAF_NODE	380:25	380:25	18	*
FIELD	380:26	380:26	17	op
LEAF_NODE	380:26	380:26	18	op
ASSIGN_OP	380:29	380:29	15	=
LEAF_NODE	380:29	380:29	16	=
RVAL	380:31	380:31	15	ToLinear8 [ * wp & mask ]
FIELD	380:31	380:49	16	ToLinear8 [ * wp & mask ]
LEAF_NODE	380:31	380:31	17	ToLinear8
LEAF_NODE	380:40	380:40	17	[
EXPR	380:41	380:45	17	* wp & mask
UNARY_EXPR	380:41	380:42	18	* wp
UNARY_OPERATOR	380:41	380:41	19	*
LEAF_NODE	380:41	380:41	20	*
FIELD	380:42	380:42	19	wp
LEAF_NODE	380:42	380:42	20	wp
LEAF_NODE	380:44	380:44	18	&
FIELD	380:45	380:45	18	mask
LEAF_NODE	380:45	380:45	19	mask
LEAF_NODE	380:49	380:49	17	]
LEAF_NODE	380:50	380:50	13	;
EXPR_STATEMENT	380:52	380:56	12	wp ++ ;
EXPR	380:52	380:52	13	wp ++
FIELD	380:52	380:54	14	wp ++
LEAF_NODE	380:52	380:52	15	wp
LEAF_NODE	380:54	380:54	15	++
LEAF_NODE	380:56	380:56	13	;
LEAF_NODE	380:58	380:58	12	op
LEAF_NODE	380:60	380:60	12	++
LEAF_NODE	380:62	380:62	12	)
EXPR_STATEMENT	381:2	381:13	12	n -= stride ;
EXPR	381:2	381:2	13	n -= stride
ASSIGN	381:2	381:7	14	n -= stride
LVAL	381:2	381:2	15	n
FIELD	381:2	381:2	16	n
LEAF_NODE	381:2	381:2	17	n
ASSIGN_OP	381:4	381:4	15	-=
LEAF_NODE	381:4	381:4	16	-=
RVAL	381:7	381:7	15	stride
FIELD	381:7	381:7	16	stride
LEAF_NODE	381:7	381:7	17	stride
LEAF_NODE	381:13	381:13	13	;
LEAF_NODE	382:5	382:5	11	}
LEAF_NODE	383:1	383:1	8	}
LEAF_NODE	384:4	384:4	5	}
LEAF_NODE	385:0	385:0	2	}
FUNCTION_DEF	388:0	451:0	1	
RETURN_TYPE	388:0	388:7	2	static void
LEAF_NODE	388:0	388:0	3	static
TYPE_NAME	388:7	388:7	3	void
LEAF_NODE	388:7	388:7	4	void
FUNCTION_NAME	389:0	389:0	2	horizontalAccumulate8abgr
LEAF_NODE	389:0	389:0	3	horizontalAccumulate8abgr
PARAMETER_LIST	389:25	390:25	2	( uint16 * wp , int n , int stride , unsigned char * op , unsigned char * ToLinear8 )
LEAF_NODE	389:25	389:25	3	(
PARAMETER_DECL	389:26	389:34	3	uint16 * wp
TYPE	389:26	389:33	4	uint16 *
TYPE_NAME	389:26	389:26	5	uint16
LEAF_NODE	389:26	389:26	6	uint16
POINTER	389:33	389:33	5	*
LEAF_NODE	389:33	389:33	6	*
NAME	389:34	389:34	4	wp
LEAF_NODE	389:34	389:34	5	wp
LEAF_NODE	389:36	389:36	3	,
PARAMETER_DECL	389:38	389:42	3	int n
TYPE	389:38	389:38	4	int
TYPE_NAME	389:38	389:38	5	int
LEAF_NODE	389:38	389:38	6	int
NAME	389:42	389:42	4	n
LEAF_NODE	389:42	389:42	5	n
LEAF_NODE	389:43	389:43	3	,
PARAMETER_DECL	389:45	389:49	3	int stride
TYPE	389:45	389:45	4	int
TYPE_NAME	389:45	389:45	5	int
LEAF_NODE	389:45	389:45	6	int
NAME	389:49	389:49	4	stride
LEAF_NODE	389:49	389:49	5	stride
LEAF_NODE	389:55	389:55	3	,
PARAMETER_DECL	389:57	389:72	3	unsigned char * op
TYPE	389:57	389:71	4	unsigned char *
TYPE_NAME	389:57	389:66	5	unsigned char
LEAF_NODE	389:57	389:57	6	unsigned
LEAF_NODE	389:66	389:66	6	char
POINTER	389:71	389:71	5	*
LEAF_NODE	389:71	389:71	6	*
NAME	389:72	389:72	4	op
LEAF_NODE	389:72	389:72	5	op
LEAF_NODE	389:74	389:74	3	,
PARAMETER_DECL	390:1	390:16	3	unsigned char * ToLinear8
TYPE	390:1	390:15	4	unsigned char *
TYPE_NAME	390:1	390:10	5	unsigned char
LEAF_NODE	390:1	390:1	6	unsigned
LEAF_NODE	390:10	390:10	6	char
POINTER	390:15	390:15	5	*
LEAF_NODE	390:15	390:15	6	*
NAME	390:16	390:16	4	ToLinear8
LEAF_NODE	390:16	390:16	5	ToLinear8
LEAF_NODE	390:25	390:25	3	)
LEAF_NODE	391:0	391:0	2	{
STATEMENTS	392:4	395:4	2	
LEAF_NODE	392:4	392:4	3	register
SIMPLE_DECL	392:13	392:47	3	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask ;
INIT_DECL_LIST	392:13	392:13	4	unsigned int cr , unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	392:13	392:27	5	unsigned int cr
TYPE	392:13	392:13	6	unsigned int
TYPE_NAME	392:13	392:22	7	unsigned int
LEAF_NODE	392:13	392:13	8	unsigned
LEAF_NODE	392:22	392:22	8	int
NAME	392:27	392:27	6	cr
LEAF_NODE	392:27	392:27	7	cr
LEAF_NODE	392:29	392:29	5	,
INIT_DECL_LIST	392:13	392:13	5	unsigned int cg , unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	392:13	392:31	6	unsigned int cg
TYPE	392:13	392:13	7	unsigned int
TYPE_NAME	392:13	392:22	8	unsigned int
LEAF_NODE	392:13	392:13	9	unsigned
LEAF_NODE	392:22	392:22	9	int
NAME	392:31	392:31	7	cg
LEAF_NODE	392:31	392:31	8	cg
LEAF_NODE	392:33	392:33	6	,
INIT_DECL_LIST	392:13	392:13	6	unsigned int cb , unsigned int ca , unsigned int mask
VAR_DECL	392:13	392:35	7	unsigned int cb
TYPE	392:13	392:13	8	unsigned int
TYPE_NAME	392:13	392:22	9	unsigned int
LEAF_NODE	392:13	392:13	10	unsigned
LEAF_NODE	392:22	392:22	10	int
NAME	392:35	392:35	8	cb
LEAF_NODE	392:35	392:35	9	cb
LEAF_NODE	392:37	392:37	7	,
INIT_DECL_LIST	392:13	392:13	7	unsigned int ca , unsigned int mask
VAR_DECL	392:13	392:39	8	unsigned int ca
TYPE	392:13	392:13	9	unsigned int
TYPE_NAME	392:13	392:22	10	unsigned int
LEAF_NODE	392:13	392:13	11	unsigned
LEAF_NODE	392:22	392:22	11	int
NAME	392:39	392:39	9	ca
LEAF_NODE	392:39	392:39	10	ca
LEAF_NODE	392:41	392:41	8	,
VAR_DECL	392:13	392:43	8	unsigned int mask
TYPE	392:13	392:13	9	unsigned int
TYPE_NAME	392:13	392:22	10	unsigned int
LEAF_NODE	392:13	392:13	11	unsigned
LEAF_NODE	392:22	392:22	11	int
NAME	392:43	392:43	9	mask
LEAF_NODE	392:43	392:43	10	mask
LEAF_NODE	392:47	392:47	4	;
LEAF_NODE	393:4	393:4	3	register
SIMPLE_DECL	393:13	393:42	3	unsigned char t0 , unsigned char t1 , unsigned char t2 , unsigned char t3 ;
INIT_DECL_LIST	393:13	393:13	4	unsigned char t0 , unsigned char t1 , unsigned char t2 , unsigned char t3
VAR_DECL	393:13	393:28	5	unsigned char t0
TYPE	393:13	393:13	6	unsigned char
TYPE_NAME	393:13	393:22	7	unsigned char
LEAF_NODE	393:13	393:13	8	unsigned
LEAF_NODE	393:22	393:22	8	char
NAME	393:28	393:28	6	t0
LEAF_NODE	393:28	393:28	7	t0
LEAF_NODE	393:30	393:30	5	,
INIT_DECL_LIST	393:13	393:13	5	unsigned char t1 , unsigned char t2 , unsigned char t3
VAR_DECL	393:13	393:32	6	unsigned char t1
TYPE	393:13	393:13	7	unsigned char
TYPE_NAME	393:13	393:22	8	unsigned char
LEAF_NODE	393:13	393:13	9	unsigned
LEAF_NODE	393:22	393:22	9	char
NAME	393:32	393:32	7	t1
LEAF_NODE	393:32	393:32	8	t1
LEAF_NODE	393:34	393:34	6	,
INIT_DECL_LIST	393:13	393:13	6	unsigned char t2 , unsigned char t3
VAR_DECL	393:13	393:36	7	unsigned char t2
TYPE	393:13	393:13	8	unsigned char
TYPE_NAME	393:13	393:22	9	unsigned char
LEAF_NODE	393:13	393:13	10	unsigned
LEAF_NODE	393:22	393:22	10	char
NAME	393:36	393:36	8	t2
LEAF_NODE	393:36	393:36	9	t2
LEAF_NODE	393:38	393:38	7	,
VAR_DECL	393:13	393:40	7	unsigned char t3
TYPE	393:13	393:13	8	unsigned char
TYPE_NAME	393:13	393:22	9	unsigned char
LEAF_NODE	393:13	393:13	10	unsigned
LEAF_NODE	393:22	393:22	10	char
NAME	393:40	393:40	8	t3
LEAF_NODE	393:40	393:40	9	t3
LEAF_NODE	393:42	393:42	4	;
SELECTION	395:4	395:21	3	
KEYWORD	395:4	395:4	4	if
LEAF_NODE	395:4	395:4	5	if
LEAF_NODE	395:7	395:7	4	(
CONDITION	395:8	395:8	4	n >= stride
EXPR	395:8	395:13	5	n >= stride
FIELD	395:8	395:8	6	n
LEAF_NODE	395:8	395:8	7	n
REL_OPERATOR	395:10	395:10	6	>=
LEAF_NODE	395:10	395:10	7	>=
FIELD	395:13	395:13	6	stride
LEAF_NODE	395:13	395:13	7	stride
LEAF_NODE	395:19	395:19	4	)
STATEMENTS	395:21	450:4	4	
LEAF_NODE	395:21	395:21	5	{
STATEMENTS	396:1	441:3	5	
EXPR_STATEMENT	396:1	396:17	6	mask = CODE_MASK ;
EXPR	396:1	396:1	7	mask = CODE_MASK
ASSIGN	396:1	396:8	8	mask = CODE_MASK
LVAL	396:1	396:1	9	mask
FIELD	396:1	396:1	10	mask
LEAF_NODE	396:1	396:1	11	mask
ASSIGN_OP	396:6	396:6	9	=
LEAF_NODE	396:6	396:6	10	=
RVAL	396:8	396:8	9	CODE_MASK
FIELD	396:8	396:8	10	CODE_MASK
LEAF_NODE	396:8	396:8	11	CODE_MASK
LEAF_NODE	396:17	396:17	7	;
SELECTION	397:1	397:18	6	
KEYWORD	397:1	397:1	7	if
LEAF_NODE	397:1	397:1	8	if
LEAF_NODE	397:4	397:4	7	(
CONDITION	397:5	397:5	7	stride == 3
EXPR	397:5	397:15	8	stride == 3
FIELD	397:5	397:5	9	stride
LEAF_NODE	397:5	397:5	10	stride
EQ_OPERATOR	397:12	397:12	9	==
LEAF_NODE	397:12	397:12	10	==
FIELD	397:15	397:15	9	3
LEAF_NODE	397:15	397:15	10	3
LEAF_NODE	397:16	397:16	7	)
STATEMENTS	397:18	418:1	7	
LEAF_NODE	397:18	397:18	8	{
STATEMENTS	398:5	406:5	8	
EXPR_STATEMENT	398:5	398:14	9	op [ 0 ] = 0 ;
EXPR	398:5	398:5	10	op [ 0 ] = 0
ASSIGN	398:5	398:13	11	op [ 0 ] = 0
LVAL	398:5	398:5	12	op [ 0 ]
FIELD	398:5	398:9	13	op [ 0 ]
LEAF_NODE	398:5	398:5	14	op
LEAF_NODE	398:7	398:7	14	[
EXPR	398:8	398:8	14	0
FIELD	398:8	398:8	15	0
LEAF_NODE	398:8	398:8	16	0
LEAF_NODE	398:9	398:9	14	]
ASSIGN_OP	398:11	398:11	12	=
LEAF_NODE	398:11	398:11	13	=
RVAL	398:13	398:13	12	0
FIELD	398:13	398:13	13	0
LEAF_NODE	398:13	398:13	14	0
LEAF_NODE	398:14	398:14	10	;
EXPR_STATEMENT	399:5	399:40	9	t1 = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ] ;
EXPR	399:5	399:5	10	t1 = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
ASSIGN	399:5	399:10	11	t1 = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
LVAL	399:5	399:5	12	t1
FIELD	399:5	399:5	13	t1
LEAF_NODE	399:5	399:5	14	t1
ASSIGN_OP	399:8	399:8	12	=
LEAF_NODE	399:8	399:8	13	=
RVAL	399:10	399:10	12	ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
FIELD	399:10	399:39	13	ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
LEAF_NODE	399:10	399:10	14	ToLinear8
LEAF_NODE	399:19	399:19	14	[
EXPR	399:20	399:20	14	cb = ( wp [ 2 ] & mask )
ASSIGN	399:20	399:25	15	cb = ( wp [ 2 ] & mask )
LVAL	399:20	399:20	16	cb
FIELD	399:20	399:20	17	cb
LEAF_NODE	399:20	399:20	18	cb
ASSIGN_OP	399:23	399:23	16	=
LEAF_NODE	399:23	399:23	17	=
RVAL	399:25	399:38	16	( wp [ 2 ] & mask )
LEAF_NODE	399:25	399:25	17	(
FIELD	399:26	399:30	17	wp [ 2 ]
LEAF_NODE	399:26	399:26	18	wp
LEAF_NODE	399:28	399:28	18	[
EXPR	399:29	399:29	18	2
FIELD	399:29	399:29	19	2
LEAF_NODE	399:29	399:29	20	2
LEAF_NODE	399:30	399:30	18	]
LEAF_NODE	399:32	399:32	17	&
FIELD	399:34	399:34	17	mask
LEAF_NODE	399:34	399:34	18	mask
LEAF_NODE	399:38	399:38	17	)
LEAF_NODE	399:39	399:39	14	]
LEAF_NODE	399:40	399:40	10	;
EXPR_STATEMENT	400:5	400:40	9	t2 = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ] ;
EXPR	400:5	400:5	10	t2 = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
ASSIGN	400:5	400:10	11	t2 = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
LVAL	400:5	400:5	12	t2
FIELD	400:5	400:5	13	t2
LEAF_NODE	400:5	400:5	14	t2
ASSIGN_OP	400:8	400:8	12	=
LEAF_NODE	400:8	400:8	13	=
RVAL	400:10	400:10	12	ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
FIELD	400:10	400:39	13	ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
LEAF_NODE	400:10	400:10	14	ToLinear8
LEAF_NODE	400:19	400:19	14	[
EXPR	400:20	400:20	14	cg = ( wp [ 1 ] & mask )
ASSIGN	400:20	400:25	15	cg = ( wp [ 1 ] & mask )
LVAL	400:20	400:20	16	cg
FIELD	400:20	400:20	17	cg
LEAF_NODE	400:20	400:20	18	cg
ASSIGN_OP	400:23	400:23	16	=
LEAF_NODE	400:23	400:23	17	=
RVAL	400:25	400:38	16	( wp [ 1 ] & mask )
LEAF_NODE	400:25	400:25	17	(
FIELD	400:26	400:30	17	wp [ 1 ]
LEAF_NODE	400:26	400:26	18	wp
LEAF_NODE	400:28	400:28	18	[
EXPR	400:29	400:29	18	1
FIELD	400:29	400:29	19	1
LEAF_NODE	400:29	400:29	20	1
LEAF_NODE	400:30	400:30	18	]
LEAF_NODE	400:32	400:32	17	&
FIELD	400:34	400:34	17	mask
LEAF_NODE	400:34	400:34	18	mask
LEAF_NODE	400:38	400:38	17	)
LEAF_NODE	400:39	400:39	14	]
LEAF_NODE	400:40	400:40	10	;
EXPR_STATEMENT	401:5	401:40	9	t3 = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ] ;
EXPR	401:5	401:5	10	t3 = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
ASSIGN	401:5	401:10	11	t3 = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
LVAL	401:5	401:5	12	t3
FIELD	401:5	401:5	13	t3
LEAF_NODE	401:5	401:5	14	t3
ASSIGN_OP	401:8	401:8	12	=
LEAF_NODE	401:8	401:8	13	=
RVAL	401:10	401:10	12	ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
FIELD	401:10	401:39	13	ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
LEAF_NODE	401:10	401:10	14	ToLinear8
LEAF_NODE	401:19	401:19	14	[
EXPR	401:20	401:20	14	cr = ( wp [ 0 ] & mask )
ASSIGN	401:20	401:25	15	cr = ( wp [ 0 ] & mask )
LVAL	401:20	401:20	16	cr
FIELD	401:20	401:20	17	cr
LEAF_NODE	401:20	401:20	18	cr
ASSIGN_OP	401:23	401:23	16	=
LEAF_NODE	401:23	401:23	17	=
RVAL	401:25	401:38	16	( wp [ 0 ] & mask )
LEAF_NODE	401:25	401:25	17	(
FIELD	401:26	401:30	17	wp [ 0 ]
LEAF_NODE	401:26	401:26	18	wp
LEAF_NODE	401:28	401:28	18	[
EXPR	401:29	401:29	18	0
FIELD	401:29	401:29	19	0
LEAF_NODE	401:29	401:29	20	0
LEAF_NODE	401:30	401:30	18	]
LEAF_NODE	401:32	401:32	17	&
FIELD	401:34	401:34	17	mask
LEAF_NODE	401:34	401:34	18	mask
LEAF_NODE	401:38	401:38	17	)
LEAF_NODE	401:39	401:39	14	]
LEAF_NODE	401:40	401:40	10	;
EXPR_STATEMENT	402:5	402:15	9	op [ 1 ] = t1 ;
EXPR	402:5	402:5	10	op [ 1 ] = t1
ASSIGN	402:5	402:13	11	op [ 1 ] = t1
LVAL	402:5	402:5	12	op [ 1 ]
FIELD	402:5	402:9	13	op [ 1 ]
LEAF_NODE	402:5	402:5	14	op
LEAF_NODE	402:7	402:7	14	[
EXPR	402:8	402:8	14	1
FIELD	402:8	402:8	15	1
LEAF_NODE	402:8	402:8	16	1
LEAF_NODE	402:9	402:9	14	]
ASSIGN_OP	402:11	402:11	12	=
LEAF_NODE	402:11	402:11	13	=
RVAL	402:13	402:13	12	t1
FIELD	402:13	402:13	13	t1
LEAF_NODE	402:13	402:13	14	t1
LEAF_NODE	402:15	402:15	10	;
EXPR_STATEMENT	403:5	403:15	9	op [ 2 ] = t2 ;
EXPR	403:5	403:5	10	op [ 2 ] = t2
ASSIGN	403:5	403:13	11	op [ 2 ] = t2
LVAL	403:5	403:5	12	op [ 2 ]
FIELD	403:5	403:9	13	op [ 2 ]
LEAF_NODE	403:5	403:5	14	op
LEAF_NODE	403:7	403:7	14	[
EXPR	403:8	403:8	14	2
FIELD	403:8	403:8	15	2
LEAF_NODE	403:8	403:8	16	2
LEAF_NODE	403:9	403:9	14	]
ASSIGN_OP	403:11	403:11	12	=
LEAF_NODE	403:11	403:11	13	=
RVAL	403:13	403:13	12	t2
FIELD	403:13	403:13	13	t2
LEAF_NODE	403:13	403:13	14	t2
LEAF_NODE	403:15	403:15	10	;
EXPR_STATEMENT	404:5	404:15	9	op [ 3 ] = t3 ;
EXPR	404:5	404:5	10	op [ 3 ] = t3
ASSIGN	404:5	404:13	11	op [ 3 ] = t3
LVAL	404:5	404:5	12	op [ 3 ]
FIELD	404:5	404:9	13	op [ 3 ]
LEAF_NODE	404:5	404:5	14	op
LEAF_NODE	404:7	404:7	14	[
EXPR	404:8	404:8	14	3
FIELD	404:8	404:8	15	3
LEAF_NODE	404:8	404:8	16	3
LEAF_NODE	404:9	404:9	14	]
ASSIGN_OP	404:11	404:11	12	=
LEAF_NODE	404:11	404:11	13	=
RVAL	404:13	404:13	12	t3
FIELD	404:13	404:13	13	t3
LEAF_NODE	404:13	404:13	14	t3
LEAF_NODE	404:15	404:15	10	;
EXPR_STATEMENT	405:5	405:11	9	n -= 3 ;
EXPR	405:5	405:5	10	n -= 3
ASSIGN	405:5	405:10	11	n -= 3
LVAL	405:5	405:5	12	n
FIELD	405:5	405:5	13	n
LEAF_NODE	405:5	405:5	14	n
ASSIGN_OP	405:7	405:7	12	-=
LEAF_NODE	405:7	405:7	13	-=
RVAL	405:10	405:10	12	3
FIELD	405:10	405:10	13	3
LEAF_NODE	405:10	405:10	14	3
LEAF_NODE	405:11	405:11	10	;
ITERATION	406:5	406:19	9	
KEYWORD	406:5	406:5	10	while
LEAF_NODE	406:5	406:5	11	while
LEAF_NODE	406:11	406:11	10	(
CONDITION	406:12	406:12	10	n > 0
EXPR	406:12	406:16	11	n > 0
FIELD	406:12	406:12	12	n
LEAF_NODE	406:12	406:12	13	n
REL_OPERATOR	406:14	406:14	12	>
LEAF_NODE	406:14	406:14	13	>
FIELD	406:16	406:16	12	0
LEAF_NODE	406:16	406:16	13	0
LEAF_NODE	406:17	406:17	10	)
STATEMENTS	406:19	417:5	10	
LEAF_NODE	406:19	406:19	11	{
STATEMENTS	407:2	416:2	11	
EXPR_STATEMENT	407:2	407:8	12	n -= 3 ;
EXPR	407:2	407:2	13	n -= 3
ASSIGN	407:2	407:7	14	n -= 3
LVAL	407:2	407:2	15	n
FIELD	407:2	407:2	16	n
LEAF_NODE	407:2	407:2	17	n
ASSIGN_OP	407:4	407:4	15	-=
LEAF_NODE	407:4	407:4	16	-=
RVAL	407:7	407:7	15	3
FIELD	407:7	407:7	16	3
LEAF_NODE	407:7	407:7	17	3
LEAF_NODE	407:8	407:8	13	;
EXPR_STATEMENT	408:2	408:9	12	wp += 3 ;
EXPR	408:2	408:2	13	wp += 3
ASSIGN	408:2	408:8	14	wp += 3
LVAL	408:2	408:2	15	wp
FIELD	408:2	408:2	16	wp
LEAF_NODE	408:2	408:2	17	wp
ASSIGN_OP	408:5	408:5	15	+=
LEAF_NODE	408:5	408:5	16	+=
RVAL	408:8	408:8	15	3
FIELD	408:8	408:8	16	3
LEAF_NODE	408:8	408:8	17	3
LEAF_NODE	408:9	408:9	13	;
EXPR_STATEMENT	409:2	409:9	12	op += 4 ;
EXPR	409:2	409:2	13	op += 4
ASSIGN	409:2	409:8	14	op += 4
LVAL	409:2	409:2	15	op
FIELD	409:2	409:2	16	op
LEAF_NODE	409:2	409:2	17	op
ASSIGN_OP	409:5	409:5	15	+=
LEAF_NODE	409:5	409:5	16	+=
RVAL	409:8	409:8	15	4
FIELD	409:8	409:8	16	4
LEAF_NODE	409:8	409:8	17	4
LEAF_NODE	409:9	409:9	13	;
EXPR_STATEMENT	410:2	410:11	12	op [ 0 ] = 0 ;
EXPR	410:2	410:2	13	op [ 0 ] = 0
ASSIGN	410:2	410:10	14	op [ 0 ] = 0
LVAL	410:2	410:2	15	op [ 0 ]
FIELD	410:2	410:6	16	op [ 0 ]
LEAF_NODE	410:2	410:2	17	op
LEAF_NODE	410:4	410:4	17	[
EXPR	410:5	410:5	17	0
FIELD	410:5	410:5	18	0
LEAF_NODE	410:5	410:5	19	0
LEAF_NODE	410:6	410:6	17	]
ASSIGN_OP	410:8	410:8	15	=
LEAF_NODE	410:8	410:8	16	=
RVAL	410:10	410:10	15	0
FIELD	410:10	410:10	16	0
LEAF_NODE	410:10	410:10	17	0
LEAF_NODE	410:11	410:11	13	;
EXPR_STATEMENT	411:2	411:38	12	t1 = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ] ;
EXPR	411:2	411:2	13	t1 = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
ASSIGN	411:2	411:7	14	t1 = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
LVAL	411:2	411:2	15	t1
FIELD	411:2	411:2	16	t1
LEAF_NODE	411:2	411:2	17	t1
ASSIGN_OP	411:5	411:5	15	=
LEAF_NODE	411:5	411:5	16	=
RVAL	411:7	411:7	15	ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
FIELD	411:7	411:37	16	ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
LEAF_NODE	411:7	411:7	17	ToLinear8
LEAF_NODE	411:16	411:16	17	[
EXPR	411:17	411:33	17	( cb += wp [ 2 ] ) & mask
LEAF_NODE	411:17	411:17	18	(
ASSIGN	411:18	411:24	18	cb += wp [ 2 ]
LVAL	411:18	411:18	19	cb
FIELD	411:18	411:18	20	cb
LEAF_NODE	411:18	411:18	21	cb
ASSIGN_OP	411:21	411:21	19	+=
LEAF_NODE	411:21	411:21	20	+=
RVAL	411:24	411:24	19	wp [ 2 ]
FIELD	411:24	411:28	20	wp [ 2 ]
LEAF_NODE	411:24	411:24	21	wp
LEAF_NODE	411:26	411:26	21	[
EXPR	411:27	411:27	21	2
FIELD	411:27	411:27	22	2
LEAF_NODE	411:27	411:27	23	2
LEAF_NODE	411:28	411:28	21	]
LEAF_NODE	411:29	411:29	18	)
LEAF_NODE	411:31	411:31	18	&
FIELD	411:33	411:33	18	mask
LEAF_NODE	411:33	411:33	19	mask
LEAF_NODE	411:37	411:37	17	]
LEAF_NODE	411:38	411:38	13	;
EXPR_STATEMENT	412:2	412:38	12	t2 = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ] ;
EXPR	412:2	412:2	13	t2 = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
ASSIGN	412:2	412:7	14	t2 = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
LVAL	412:2	412:2	15	t2
FIELD	412:2	412:2	16	t2
LEAF_NODE	412:2	412:2	17	t2
ASSIGN_OP	412:5	412:5	15	=
LEAF_NODE	412:5	412:5	16	=
RVAL	412:7	412:7	15	ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
FIELD	412:7	412:37	16	ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
LEAF_NODE	412:7	412:7	17	ToLinear8
LEAF_NODE	412:16	412:16	17	[
EXPR	412:17	412:33	17	( cg += wp [ 1 ] ) & mask
LEAF_NODE	412:17	412:17	18	(
ASSIGN	412:18	412:24	18	cg += wp [ 1 ]
LVAL	412:18	412:18	19	cg
FIELD	412:18	412:18	20	cg
LEAF_NODE	412:18	412:18	21	cg
ASSIGN_OP	412:21	412:21	19	+=
LEAF_NODE	412:21	412:21	20	+=
RVAL	412:24	412:24	19	wp [ 1 ]
FIELD	412:24	412:28	20	wp [ 1 ]
LEAF_NODE	412:24	412:24	21	wp
LEAF_NODE	412:26	412:26	21	[
EXPR	412:27	412:27	21	1
FIELD	412:27	412:27	22	1
LEAF_NODE	412:27	412:27	23	1
LEAF_NODE	412:28	412:28	21	]
LEAF_NODE	412:29	412:29	18	)
LEAF_NODE	412:31	412:31	18	&
FIELD	412:33	412:33	18	mask
LEAF_NODE	412:33	412:33	19	mask
LEAF_NODE	412:37	412:37	17	]
LEAF_NODE	412:38	412:38	13	;
EXPR_STATEMENT	413:2	413:38	12	t3 = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ] ;
EXPR	413:2	413:2	13	t3 = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
ASSIGN	413:2	413:7	14	t3 = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
LVAL	413:2	413:2	15	t3
FIELD	413:2	413:2	16	t3
LEAF_NODE	413:2	413:2	17	t3
ASSIGN_OP	413:5	413:5	15	=
LEAF_NODE	413:5	413:5	16	=
RVAL	413:7	413:7	15	ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
FIELD	413:7	413:37	16	ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
LEAF_NODE	413:7	413:7	17	ToLinear8
LEAF_NODE	413:16	413:16	17	[
EXPR	413:17	413:33	17	( cr += wp [ 0 ] ) & mask
LEAF_NODE	413:17	413:17	18	(
ASSIGN	413:18	413:24	18	cr += wp [ 0 ]
LVAL	413:18	413:18	19	cr
FIELD	413:18	413:18	20	cr
LEAF_NODE	413:18	413:18	21	cr
ASSIGN_OP	413:21	413:21	19	+=
LEAF_NODE	413:21	413:21	20	+=
RVAL	413:24	413:24	19	wp [ 0 ]
FIELD	413:24	413:28	20	wp [ 0 ]
LEAF_NODE	413:24	413:24	21	wp
LEAF_NODE	413:26	413:26	21	[
EXPR	413:27	413:27	21	0
FIELD	413:27	413:27	22	0
LEAF_NODE	413:27	413:27	23	0
LEAF_NODE	413:28	413:28	21	]
LEAF_NODE	413:29	413:29	18	)
LEAF_NODE	413:31	413:31	18	&
FIELD	413:33	413:33	18	mask
LEAF_NODE	413:33	413:33	19	mask
LEAF_NODE	413:37	413:37	17	]
LEAF_NODE	413:38	413:38	13	;
EXPR_STATEMENT	414:2	414:12	12	op [ 1 ] = t1 ;
EXPR	414:2	414:2	13	op [ 1 ] = t1
ASSIGN	414:2	414:10	14	op [ 1 ] = t1
LVAL	414:2	414:2	15	op [ 1 ]
FIELD	414:2	414:6	16	op [ 1 ]
LEAF_NODE	414:2	414:2	17	op
LEAF_NODE	414:4	414:4	17	[
EXPR	414:5	414:5	17	1
FIELD	414:5	414:5	18	1
LEAF_NODE	414:5	414:5	19	1
LEAF_NODE	414:6	414:6	17	]
ASSIGN_OP	414:8	414:8	15	=
LEAF_NODE	414:8	414:8	16	=
RVAL	414:10	414:10	15	t1
FIELD	414:10	414:10	16	t1
LEAF_NODE	414:10	414:10	17	t1
LEAF_NODE	414:12	414:12	13	;
EXPR_STATEMENT	415:2	415:12	12	op [ 2 ] = t2 ;
EXPR	415:2	415:2	13	op [ 2 ] = t2
ASSIGN	415:2	415:10	14	op [ 2 ] = t2
LVAL	415:2	415:2	15	op [ 2 ]
FIELD	415:2	415:6	16	op [ 2 ]
LEAF_NODE	415:2	415:2	17	op
LEAF_NODE	415:4	415:4	17	[
EXPR	415:5	415:5	17	2
FIELD	415:5	415:5	18	2
LEAF_NODE	415:5	415:5	19	2
LEAF_NODE	415:6	415:6	17	]
ASSIGN_OP	415:8	415:8	15	=
LEAF_NODE	415:8	415:8	16	=
RVAL	415:10	415:10	15	t2
FIELD	415:10	415:10	16	t2
LEAF_NODE	415:10	415:10	17	t2
LEAF_NODE	415:12	415:12	13	;
EXPR_STATEMENT	416:2	416:12	12	op [ 3 ] = t3 ;
EXPR	416:2	416:2	13	op [ 3 ] = t3
ASSIGN	416:2	416:10	14	op [ 3 ] = t3
LVAL	416:2	416:2	15	op [ 3 ]
FIELD	416:2	416:6	16	op [ 3 ]
LEAF_NODE	416:2	416:2	17	op
LEAF_NODE	416:4	416:4	17	[
EXPR	416:5	416:5	17	3
FIELD	416:5	416:5	18	3
LEAF_NODE	416:5	416:5	19	3
LEAF_NODE	416:6	416:6	17	]
ASSIGN_OP	416:8	416:8	15	=
LEAF_NODE	416:8	416:8	16	=
RVAL	416:10	416:10	15	t3
FIELD	416:10	416:10	16	t3
LEAF_NODE	416:10	416:10	17	t3
LEAF_NODE	416:12	416:12	13	;
LEAF_NODE	417:5	417:5	11	}
LEAF_NODE	418:1	418:1	8	}
SELECTION	418:3	418:8	6	
KEYWORD	418:3	418:3	7	else
LEAF_NODE	418:3	418:3	8	else
STATEMENTS	418:8	418:8	7	
SELECTION	418:8	418:25	8	
KEYWORD	418:8	418:8	9	if
LEAF_NODE	418:8	418:8	10	if
LEAF_NODE	418:11	418:11	9	(
CONDITION	418:12	418:12	9	stride == 4
EXPR	418:12	418:22	10	stride == 4
FIELD	418:12	418:12	11	stride
LEAF_NODE	418:12	418:12	12	stride
EQ_OPERATOR	418:19	418:19	11	==
LEAF_NODE	418:19	418:19	12	==
FIELD	418:22	418:22	11	4
LEAF_NODE	418:22	418:22	12	4
LEAF_NODE	418:23	418:23	9	)
STATEMENTS	418:25	441:1	9	
LEAF_NODE	418:25	418:25	10	{
STATEMENTS	419:5	428:5	10	
EXPR_STATEMENT	419:5	419:40	11	t0 = ToLinear8 [ ca = ( wp [ 3 ] & mask ) ] ;
EXPR	419:5	419:5	12	t0 = ToLinear8 [ ca = ( wp [ 3 ] & mask ) ]
ASSIGN	419:5	419:10	13	t0 = ToLinear8 [ ca = ( wp [ 3 ] & mask ) ]
LVAL	419:5	419:5	14	t0
FIELD	419:5	419:5	15	t0
LEAF_NODE	419:5	419:5	16	t0
ASSIGN_OP	419:8	419:8	14	=
LEAF_NODE	419:8	419:8	15	=
RVAL	419:10	419:10	14	ToLinear8 [ ca = ( wp [ 3 ] & mask ) ]
FIELD	419:10	419:39	15	ToLinear8 [ ca = ( wp [ 3 ] & mask ) ]
LEAF_NODE	419:10	419:10	16	ToLinear8
LEAF_NODE	419:19	419:19	16	[
EXPR	419:20	419:20	16	ca = ( wp [ 3 ] & mask )
ASSIGN	419:20	419:25	17	ca = ( wp [ 3 ] & mask )
LVAL	419:20	419:20	18	ca
FIELD	419:20	419:20	19	ca
LEAF_NODE	419:20	419:20	20	ca
ASSIGN_OP	419:23	419:23	18	=
LEAF_NODE	419:23	419:23	19	=
RVAL	419:25	419:38	18	( wp [ 3 ] & mask )
LEAF_NODE	419:25	419:25	19	(
FIELD	419:26	419:30	19	wp [ 3 ]
LEAF_NODE	419:26	419:26	20	wp
LEAF_NODE	419:28	419:28	20	[
EXPR	419:29	419:29	20	3
FIELD	419:29	419:29	21	3
LEAF_NODE	419:29	419:29	22	3
LEAF_NODE	419:30	419:30	20	]
LEAF_NODE	419:32	419:32	19	&
FIELD	419:34	419:34	19	mask
LEAF_NODE	419:34	419:34	20	mask
LEAF_NODE	419:38	419:38	19	)
LEAF_NODE	419:39	419:39	16	]
LEAF_NODE	419:40	419:40	12	;
EXPR_STATEMENT	420:5	420:40	11	t1 = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ] ;
EXPR	420:5	420:5	12	t1 = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
ASSIGN	420:5	420:10	13	t1 = ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
LVAL	420:5	420:5	14	t1
FIELD	420:5	420:5	15	t1
LEAF_NODE	420:5	420:5	16	t1
ASSIGN_OP	420:8	420:8	14	=
LEAF_NODE	420:8	420:8	15	=
RVAL	420:10	420:10	14	ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
FIELD	420:10	420:39	15	ToLinear8 [ cb = ( wp [ 2 ] & mask ) ]
LEAF_NODE	420:10	420:10	16	ToLinear8
LEAF_NODE	420:19	420:19	16	[
EXPR	420:20	420:20	16	cb = ( wp [ 2 ] & mask )
ASSIGN	420:20	420:25	17	cb = ( wp [ 2 ] & mask )
LVAL	420:20	420:20	18	cb
FIELD	420:20	420:20	19	cb
LEAF_NODE	420:20	420:20	20	cb
ASSIGN_OP	420:23	420:23	18	=
LEAF_NODE	420:23	420:23	19	=
RVAL	420:25	420:38	18	( wp [ 2 ] & mask )
LEAF_NODE	420:25	420:25	19	(
FIELD	420:26	420:30	19	wp [ 2 ]
LEAF_NODE	420:26	420:26	20	wp
LEAF_NODE	420:28	420:28	20	[
EXPR	420:29	420:29	20	2
FIELD	420:29	420:29	21	2
LEAF_NODE	420:29	420:29	22	2
LEAF_NODE	420:30	420:30	20	]
LEAF_NODE	420:32	420:32	19	&
FIELD	420:34	420:34	19	mask
LEAF_NODE	420:34	420:34	20	mask
LEAF_NODE	420:38	420:38	19	)
LEAF_NODE	420:39	420:39	16	]
LEAF_NODE	420:40	420:40	12	;
EXPR_STATEMENT	421:5	421:40	11	t2 = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ] ;
EXPR	421:5	421:5	12	t2 = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
ASSIGN	421:5	421:10	13	t2 = ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
LVAL	421:5	421:5	14	t2
FIELD	421:5	421:5	15	t2
LEAF_NODE	421:5	421:5	16	t2
ASSIGN_OP	421:8	421:8	14	=
LEAF_NODE	421:8	421:8	15	=
RVAL	421:10	421:10	14	ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
FIELD	421:10	421:39	15	ToLinear8 [ cg = ( wp [ 1 ] & mask ) ]
LEAF_NODE	421:10	421:10	16	ToLinear8
LEAF_NODE	421:19	421:19	16	[
EXPR	421:20	421:20	16	cg = ( wp [ 1 ] & mask )
ASSIGN	421:20	421:25	17	cg = ( wp [ 1 ] & mask )
LVAL	421:20	421:20	18	cg
FIELD	421:20	421:20	19	cg
LEAF_NODE	421:20	421:20	20	cg
ASSIGN_OP	421:23	421:23	18	=
LEAF_NODE	421:23	421:23	19	=
RVAL	421:25	421:38	18	( wp [ 1 ] & mask )
LEAF_NODE	421:25	421:25	19	(
FIELD	421:26	421:30	19	wp [ 1 ]
LEAF_NODE	421:26	421:26	20	wp
LEAF_NODE	421:28	421:28	20	[
EXPR	421:29	421:29	20	1
FIELD	421:29	421:29	21	1
LEAF_NODE	421:29	421:29	22	1
LEAF_NODE	421:30	421:30	20	]
LEAF_NODE	421:32	421:32	19	&
FIELD	421:34	421:34	19	mask
LEAF_NODE	421:34	421:34	20	mask
LEAF_NODE	421:38	421:38	19	)
LEAF_NODE	421:39	421:39	16	]
LEAF_NODE	421:40	421:40	12	;
EXPR_STATEMENT	422:5	422:40	11	t3 = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ] ;
EXPR	422:5	422:5	12	t3 = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
ASSIGN	422:5	422:10	13	t3 = ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
LVAL	422:5	422:5	14	t3
FIELD	422:5	422:5	15	t3
LEAF_NODE	422:5	422:5	16	t3
ASSIGN_OP	422:8	422:8	14	=
LEAF_NODE	422:8	422:8	15	=
RVAL	422:10	422:10	14	ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
FIELD	422:10	422:39	15	ToLinear8 [ cr = ( wp [ 0 ] & mask ) ]
LEAF_NODE	422:10	422:10	16	ToLinear8
LEAF_NODE	422:19	422:19	16	[
EXPR	422:20	422:20	16	cr = ( wp [ 0 ] & mask )
ASSIGN	422:20	422:25	17	cr = ( wp [ 0 ] & mask )
LVAL	422:20	422:20	18	cr
FIELD	422:20	422:20	19	cr
LEAF_NODE	422:20	422:20	20	cr
ASSIGN_OP	422:23	422:23	18	=
LEAF_NODE	422:23	422:23	19	=
RVAL	422:25	422:38	18	( wp [ 0 ] & mask )
LEAF_NODE	422:25	422:25	19	(
FIELD	422:26	422:30	19	wp [ 0 ]
LEAF_NODE	422:26	422:26	20	wp
LEAF_NODE	422:28	422:28	20	[
EXPR	422:29	422:29	20	0
FIELD	422:29	422:29	21	0
LEAF_NODE	422:29	422:29	22	0
LEAF_NODE	422:30	422:30	20	]
LEAF_NODE	422:32	422:32	19	&
FIELD	422:34	422:34	19	mask
LEAF_NODE	422:34	422:34	20	mask
LEAF_NODE	422:38	422:38	19	)
LEAF_NODE	422:39	422:39	16	]
LEAF_NODE	422:40	422:40	12	;
EXPR_STATEMENT	423:5	423:15	11	op [ 0 ] = t0 ;
EXPR	423:5	423:5	12	op [ 0 ] = t0
ASSIGN	423:5	423:13	13	op [ 0 ] = t0
LVAL	423:5	423:5	14	op [ 0 ]
FIELD	423:5	423:9	15	op [ 0 ]
LEAF_NODE	423:5	423:5	16	op
LEAF_NODE	423:7	423:7	16	[
EXPR	423:8	423:8	16	0
FIELD	423:8	423:8	17	0
LEAF_NODE	423:8	423:8	18	0
LEAF_NODE	423:9	423:9	16	]
ASSIGN_OP	423:11	423:11	14	=
LEAF_NODE	423:11	423:11	15	=
RVAL	423:13	423:13	14	t0
FIELD	423:13	423:13	15	t0
LEAF_NODE	423:13	423:13	16	t0
LEAF_NODE	423:15	423:15	12	;
EXPR_STATEMENT	424:5	424:15	11	op [ 1 ] = t1 ;
EXPR	424:5	424:5	12	op [ 1 ] = t1
ASSIGN	424:5	424:13	13	op [ 1 ] = t1
LVAL	424:5	424:5	14	op [ 1 ]
FIELD	424:5	424:9	15	op [ 1 ]
LEAF_NODE	424:5	424:5	16	op
LEAF_NODE	424:7	424:7	16	[
EXPR	424:8	424:8	16	1
FIELD	424:8	424:8	17	1
LEAF_NODE	424:8	424:8	18	1
LEAF_NODE	424:9	424:9	16	]
ASSIGN_OP	424:11	424:11	14	=
LEAF_NODE	424:11	424:11	15	=
RVAL	424:13	424:13	14	t1
FIELD	424:13	424:13	15	t1
LEAF_NODE	424:13	424:13	16	t1
LEAF_NODE	424:15	424:15	12	;
EXPR_STATEMENT	425:5	425:15	11	op [ 2 ] = t2 ;
EXPR	425:5	425:5	12	op [ 2 ] = t2
ASSIGN	425:5	425:13	13	op [ 2 ] = t2
LVAL	425:5	425:5	14	op [ 2 ]
FIELD	425:5	425:9	15	op [ 2 ]
LEAF_NODE	425:5	425:5	16	op
LEAF_NODE	425:7	425:7	16	[
EXPR	425:8	425:8	16	2
FIELD	425:8	425:8	17	2
LEAF_NODE	425:8	425:8	18	2
LEAF_NODE	425:9	425:9	16	]
ASSIGN_OP	425:11	425:11	14	=
LEAF_NODE	425:11	425:11	15	=
RVAL	425:13	425:13	14	t2
FIELD	425:13	425:13	15	t2
LEAF_NODE	425:13	425:13	16	t2
LEAF_NODE	425:15	425:15	12	;
EXPR_STATEMENT	426:5	426:15	11	op [ 3 ] = t3 ;
EXPR	426:5	426:5	12	op [ 3 ] = t3
ASSIGN	426:5	426:13	13	op [ 3 ] = t3
LVAL	426:5	426:5	14	op [ 3 ]
FIELD	426:5	426:9	15	op [ 3 ]
LEAF_NODE	426:5	426:5	16	op
LEAF_NODE	426:7	426:7	16	[
EXPR	426:8	426:8	16	3
FIELD	426:8	426:8	17	3
LEAF_NODE	426:8	426:8	18	3
LEAF_NODE	426:9	426:9	16	]
ASSIGN_OP	426:11	426:11	14	=
LEAF_NODE	426:11	426:11	15	=
RVAL	426:13	426:13	14	t3
FIELD	426:13	426:13	15	t3
LEAF_NODE	426:13	426:13	16	t3
LEAF_NODE	426:15	426:15	12	;
EXPR_STATEMENT	427:5	427:11	11	n -= 4 ;
EXPR	427:5	427:5	12	n -= 4
ASSIGN	427:5	427:10	13	n -= 4
LVAL	427:5	427:5	14	n
FIELD	427:5	427:5	15	n
LEAF_NODE	427:5	427:5	16	n
ASSIGN_OP	427:7	427:7	14	-=
LEAF_NODE	427:7	427:7	15	-=
RVAL	427:10	427:10	14	4
FIELD	427:10	427:10	15	4
LEAF_NODE	427:10	427:10	16	4
LEAF_NODE	427:11	427:11	12	;
ITERATION	428:5	428:19	11	
KEYWORD	428:5	428:5	12	while
LEAF_NODE	428:5	428:5	13	while
LEAF_NODE	428:11	428:11	12	(
CONDITION	428:12	428:12	12	n > 0
EXPR	428:12	428:16	13	n > 0
FIELD	428:12	428:12	14	n
LEAF_NODE	428:12	428:12	15	n
REL_OPERATOR	428:14	428:14	14	>
LEAF_NODE	428:14	428:14	15	>
FIELD	428:16	428:16	14	0
LEAF_NODE	428:16	428:16	15	0
LEAF_NODE	428:17	428:17	12	)
STATEMENTS	428:19	440:5	12	
LEAF_NODE	428:19	428:19	13	{
STATEMENTS	429:2	439:2	13	
EXPR_STATEMENT	429:2	429:8	14	n -= 4 ;
EXPR	429:2	429:2	15	n -= 4
ASSIGN	429:2	429:7	16	n -= 4
LVAL	429:2	429:2	17	n
FIELD	429:2	429:2	18	n
LEAF_NODE	429:2	429:2	19	n
ASSIGN_OP	429:4	429:4	17	-=
LEAF_NODE	429:4	429:4	18	-=
RVAL	429:7	429:7	17	4
FIELD	429:7	429:7	18	4
LEAF_NODE	429:7	429:7	19	4
LEAF_NODE	429:8	429:8	15	;
EXPR_STATEMENT	430:2	430:9	14	wp += 4 ;
EXPR	430:2	430:2	15	wp += 4
ASSIGN	430:2	430:8	16	wp += 4
LVAL	430:2	430:2	17	wp
FIELD	430:2	430:2	18	wp
LEAF_NODE	430:2	430:2	19	wp
ASSIGN_OP	430:5	430:5	17	+=
LEAF_NODE	430:5	430:5	18	+=
RVAL	430:8	430:8	17	4
FIELD	430:8	430:8	18	4
LEAF_NODE	430:8	430:8	19	4
LEAF_NODE	430:9	430:9	15	;
EXPR_STATEMENT	431:2	431:9	14	op += 4 ;
EXPR	431:2	431:2	15	op += 4
ASSIGN	431:2	431:8	16	op += 4
LVAL	431:2	431:2	17	op
FIELD	431:2	431:2	18	op
LEAF_NODE	431:2	431:2	19	op
ASSIGN_OP	431:5	431:5	17	+=
LEAF_NODE	431:5	431:5	18	+=
RVAL	431:8	431:8	17	4
FIELD	431:8	431:8	18	4
LEAF_NODE	431:8	431:8	19	4
LEAF_NODE	431:9	431:9	15	;
EXPR_STATEMENT	432:2	432:38	14	t0 = ToLinear8 [ ( ca += wp [ 3 ] ) & mask ] ;
EXPR	432:2	432:2	15	t0 = ToLinear8 [ ( ca += wp [ 3 ] ) & mask ]
ASSIGN	432:2	432:7	16	t0 = ToLinear8 [ ( ca += wp [ 3 ] ) & mask ]
LVAL	432:2	432:2	17	t0
FIELD	432:2	432:2	18	t0
LEAF_NODE	432:2	432:2	19	t0
ASSIGN_OP	432:5	432:5	17	=
LEAF_NODE	432:5	432:5	18	=
RVAL	432:7	432:7	17	ToLinear8 [ ( ca += wp [ 3 ] ) & mask ]
FIELD	432:7	432:37	18	ToLinear8 [ ( ca += wp [ 3 ] ) & mask ]
LEAF_NODE	432:7	432:7	19	ToLinear8
LEAF_NODE	432:16	432:16	19	[
EXPR	432:17	432:33	19	( ca += wp [ 3 ] ) & mask
LEAF_NODE	432:17	432:17	20	(
ASSIGN	432:18	432:24	20	ca += wp [ 3 ]
LVAL	432:18	432:18	21	ca
FIELD	432:18	432:18	22	ca
LEAF_NODE	432:18	432:18	23	ca
ASSIGN_OP	432:21	432:21	21	+=
LEAF_NODE	432:21	432:21	22	+=
RVAL	432:24	432:24	21	wp [ 3 ]
FIELD	432:24	432:28	22	wp [ 3 ]
LEAF_NODE	432:24	432:24	23	wp
LEAF_NODE	432:26	432:26	23	[
EXPR	432:27	432:27	23	3
FIELD	432:27	432:27	24	3
LEAF_NODE	432:27	432:27	25	3
LEAF_NODE	432:28	432:28	23	]
LEAF_NODE	432:29	432:29	20	)
LEAF_NODE	432:31	432:31	20	&
FIELD	432:33	432:33	20	mask
LEAF_NODE	432:33	432:33	21	mask
LEAF_NODE	432:37	432:37	19	]
LEAF_NODE	432:38	432:38	15	;
EXPR_STATEMENT	433:2	433:38	14	t1 = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ] ;
EXPR	433:2	433:2	15	t1 = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
ASSIGN	433:2	433:7	16	t1 = ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
LVAL	433:2	433:2	17	t1
FIELD	433:2	433:2	18	t1
LEAF_NODE	433:2	433:2	19	t1
ASSIGN_OP	433:5	433:5	17	=
LEAF_NODE	433:5	433:5	18	=
RVAL	433:7	433:7	17	ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
FIELD	433:7	433:37	18	ToLinear8 [ ( cb += wp [ 2 ] ) & mask ]
LEAF_NODE	433:7	433:7	19	ToLinear8
LEAF_NODE	433:16	433:16	19	[
EXPR	433:17	433:33	19	( cb += wp [ 2 ] ) & mask
LEAF_NODE	433:17	433:17	20	(
ASSIGN	433:18	433:24	20	cb += wp [ 2 ]
LVAL	433:18	433:18	21	cb
FIELD	433:18	433:18	22	cb
LEAF_NODE	433:18	433:18	23	cb
ASSIGN_OP	433:21	433:21	21	+=
LEAF_NODE	433:21	433:21	22	+=
RVAL	433:24	433:24	21	wp [ 2 ]
FIELD	433:24	433:28	22	wp [ 2 ]
LEAF_NODE	433:24	433:24	23	wp
LEAF_NODE	433:26	433:26	23	[
EXPR	433:27	433:27	23	2
FIELD	433:27	433:27	24	2
LEAF_NODE	433:27	433:27	25	2
LEAF_NODE	433:28	433:28	23	]
LEAF_NODE	433:29	433:29	20	)
LEAF_NODE	433:31	433:31	20	&
FIELD	433:33	433:33	20	mask
LEAF_NODE	433:33	433:33	21	mask
LEAF_NODE	433:37	433:37	19	]
LEAF_NODE	433:38	433:38	15	;
EXPR_STATEMENT	434:2	434:38	14	t2 = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ] ;
EXPR	434:2	434:2	15	t2 = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
ASSIGN	434:2	434:7	16	t2 = ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
LVAL	434:2	434:2	17	t2
FIELD	434:2	434:2	18	t2
LEAF_NODE	434:2	434:2	19	t2
ASSIGN_OP	434:5	434:5	17	=
LEAF_NODE	434:5	434:5	18	=
RVAL	434:7	434:7	17	ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
FIELD	434:7	434:37	18	ToLinear8 [ ( cg += wp [ 1 ] ) & mask ]
LEAF_NODE	434:7	434:7	19	ToLinear8
LEAF_NODE	434:16	434:16	19	[
EXPR	434:17	434:33	19	( cg += wp [ 1 ] ) & mask
LEAF_NODE	434:17	434:17	20	(
ASSIGN	434:18	434:24	20	cg += wp [ 1 ]
LVAL	434:18	434:18	21	cg
FIELD	434:18	434:18	22	cg
LEAF_NODE	434:18	434:18	23	cg
ASSIGN_OP	434:21	434:21	21	+=
LEAF_NODE	434:21	434:21	22	+=
RVAL	434:24	434:24	21	wp [ 1 ]
FIELD	434:24	434:28	22	wp [ 1 ]
LEAF_NODE	434:24	434:24	23	wp
LEAF_NODE	434:26	434:26	23	[
EXPR	434:27	434:27	23	1
FIELD	434:27	434:27	24	1
LEAF_NODE	434:27	434:27	25	1
LEAF_NODE	434:28	434:28	23	]
LEAF_NODE	434:29	434:29	20	)
LEAF_NODE	434:31	434:31	20	&
FIELD	434:33	434:33	20	mask
LEAF_NODE	434:33	434:33	21	mask
LEAF_NODE	434:37	434:37	19	]
LEAF_NODE	434:38	434:38	15	;
EXPR_STATEMENT	435:2	435:38	14	t3 = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ] ;
EXPR	435:2	435:2	15	t3 = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
ASSIGN	435:2	435:7	16	t3 = ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
LVAL	435:2	435:2	17	t3
FIELD	435:2	435:2	18	t3
LEAF_NODE	435:2	435:2	19	t3
ASSIGN_OP	435:5	435:5	17	=
LEAF_NODE	435:5	435:5	18	=
RVAL	435:7	435:7	17	ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
FIELD	435:7	435:37	18	ToLinear8 [ ( cr += wp [ 0 ] ) & mask ]
LEAF_NODE	435:7	435:7	19	ToLinear8
LEAF_NODE	435:16	435:16	19	[
EXPR	435:17	435:33	19	( cr += wp [ 0 ] ) & mask
LEAF_NODE	435:17	435:17	20	(
ASSIGN	435:18	435:24	20	cr += wp [ 0 ]
LVAL	435:18	435:18	21	cr
FIELD	435:18	435:18	22	cr
LEAF_NODE	435:18	435:18	23	cr
ASSIGN_OP	435:21	435:21	21	+=
LEAF_NODE	435:21	435:21	22	+=
RVAL	435:24	435:24	21	wp [ 0 ]
FIELD	435:24	435:28	22	wp [ 0 ]
LEAF_NODE	435:24	435:24	23	wp
LEAF_NODE	435:26	435:26	23	[
EXPR	435:27	435:27	23	0
FIELD	435:27	435:27	24	0
LEAF_NODE	435:27	435:27	25	0
LEAF_NODE	435:28	435:28	23	]
LEAF_NODE	435:29	435:29	20	)
LEAF_NODE	435:31	435:31	20	&
FIELD	435:33	435:33	20	mask
LEAF_NODE	435:33	435:33	21	mask
LEAF_NODE	435:37	435:37	19	]
LEAF_NODE	435:38	435:38	15	;
EXPR_STATEMENT	436:2	436:12	14	op [ 0 ] = t0 ;
EXPR	436:2	436:2	15	op [ 0 ] = t0
ASSIGN	436:2	436:10	16	op [ 0 ] = t0
LVAL	436:2	436:2	17	op [ 0 ]
FIELD	436:2	436:6	18	op [ 0 ]
LEAF_NODE	436:2	436:2	19	op
LEAF_NODE	436:4	436:4	19	[
EXPR	436:5	436:5	19	0
FIELD	436:5	436:5	20	0
LEAF_NODE	436:5	436:5	21	0
LEAF_NODE	436:6	436:6	19	]
ASSIGN_OP	436:8	436:8	17	=
LEAF_NODE	436:8	436:8	18	=
RVAL	436:10	436:10	17	t0
FIELD	436:10	436:10	18	t0
LEAF_NODE	436:10	436:10	19	t0
LEAF_NODE	436:12	436:12	15	;
EXPR_STATEMENT	437:2	437:12	14	op [ 1 ] = t1 ;
EXPR	437:2	437:2	15	op [ 1 ] = t1
ASSIGN	437:2	437:10	16	op [ 1 ] = t1
LVAL	437:2	437:2	17	op [ 1 ]
FIELD	437:2	437:6	18	op [ 1 ]
LEAF_NODE	437:2	437:2	19	op
LEAF_NODE	437:4	437:4	19	[
EXPR	437:5	437:5	19	1
FIELD	437:5	437:5	20	1
LEAF_NODE	437:5	437:5	21	1
LEAF_NODE	437:6	437:6	19	]
ASSIGN_OP	437:8	437:8	17	=
LEAF_NODE	437:8	437:8	18	=
RVAL	437:10	437:10	17	t1
FIELD	437:10	437:10	18	t1
LEAF_NODE	437:10	437:10	19	t1
LEAF_NODE	437:12	437:12	15	;
EXPR_STATEMENT	438:2	438:12	14	op [ 2 ] = t2 ;
EXPR	438:2	438:2	15	op [ 2 ] = t2
ASSIGN	438:2	438:10	16	op [ 2 ] = t2
LVAL	438:2	438:2	17	op [ 2 ]
FIELD	438:2	438:6	18	op [ 2 ]
LEAF_NODE	438:2	438:2	19	op
LEAF_NODE	438:4	438:4	19	[
EXPR	438:5	438:5	19	2
FIELD	438:5	438:5	20	2
LEAF_NODE	438:5	438:5	21	2
LEAF_NODE	438:6	438:6	19	]
ASSIGN_OP	438:8	438:8	17	=
LEAF_NODE	438:8	438:8	18	=
RVAL	438:10	438:10	17	t2
FIELD	438:10	438:10	18	t2
LEAF_NODE	438:10	438:10	19	t2
LEAF_NODE	438:12	438:12	15	;
EXPR_STATEMENT	439:2	439:12	14	op [ 3 ] = t3 ;
EXPR	439:2	439:2	15	op [ 3 ] = t3
ASSIGN	439:2	439:10	16	op [ 3 ] = t3
LVAL	439:2	439:2	17	op [ 3 ]
FIELD	439:2	439:6	18	op [ 3 ]
LEAF_NODE	439:2	439:2	19	op
LEAF_NODE	439:4	439:4	19	[
EXPR	439:5	439:5	19	3
FIELD	439:5	439:5	20	3
LEAF_NODE	439:5	439:5	21	3
LEAF_NODE	439:6	439:6	19	]
ASSIGN_OP	439:8	439:8	17	=
LEAF_NODE	439:8	439:8	18	=
RVAL	439:10	439:10	17	t3
FIELD	439:10	439:10	18	t3
LEAF_NODE	439:10	439:10	19	t3
LEAF_NODE	439:12	439:12	15	;
LEAF_NODE	440:5	440:5	13	}
LEAF_NODE	441:1	441:1	10	}
SELECTION	441:3	441:8	6	
KEYWORD	441:3	441:3	7	else
LEAF_NODE	441:3	441:3	8	else
STATEMENTS	441:8	449:1	7	
LEAF_NODE	441:8	441:8	8	{
STATEMENTS	442:5	444:5	8	
LEAF_NODE	442:5	442:5	9	REPEAT
LEAF_NODE	442:11	442:11	9	(
EXPR_STATEMENT	442:12	442:45	9	stride , * op = ToLinear8 [ * wp & mask ] ;
EXPR	442:12	442:20	10	stride , * op = ToLinear8 [ * wp & mask ]
FIELD	442:12	442:12	11	stride
LEAF_NODE	442:12	442:12	12	stride
LEAF_NODE	442:18	442:18	11	,
ASSIGN	442:20	442:26	11	* op = ToLinear8 [ * wp & mask ]
LVAL	442:20	442:20	12	* op
UNARY_EXPR	442:20	442:21	13	* op
UNARY_OPERATOR	442:20	442:20	14	*
LEAF_NODE	442:20	442:20	15	*
FIELD	442:21	442:21	14	op
LEAF_NODE	442:21	442:21	15	op
ASSIGN_OP	442:24	442:24	12	=
LEAF_NODE	442:24	442:24	13	=
RVAL	442:26	442:26	12	ToLinear8 [ * wp & mask ]
FIELD	442:26	442:44	13	ToLinear8 [ * wp & mask ]
LEAF_NODE	442:26	442:26	14	ToLinear8
LEAF_NODE	442:35	442:35	14	[
EXPR	442:36	442:40	14	* wp & mask
UNARY_EXPR	442:36	442:37	15	* wp
UNARY_OPERATOR	442:36	442:36	16	*
LEAF_NODE	442:36	442:36	17	*
FIELD	442:37	442:37	16	wp
LEAF_NODE	442:37	442:37	17	wp
LEAF_NODE	442:39	442:39	15	&
FIELD	442:40	442:40	15	mask
LEAF_NODE	442:40	442:40	16	mask
LEAF_NODE	442:44	442:44	14	]
LEAF_NODE	442:45	442:45	10	;
EXPR_STATEMENT	442:47	442:51	9	wp ++ ;
EXPR	442:47	442:47	10	wp ++
FIELD	442:47	442:49	11	wp ++
LEAF_NODE	442:47	442:47	12	wp
LEAF_NODE	442:49	442:49	12	++
LEAF_NODE	442:51	442:51	10	;
LEAF_NODE	442:53	442:53	9	op
LEAF_NODE	442:55	442:55	9	++
LEAF_NODE	442:57	442:57	9	)
EXPR_STATEMENT	443:5	443:16	9	n -= stride ;
EXPR	443:5	443:5	10	n -= stride
ASSIGN	443:5	443:10	11	n -= stride
LVAL	443:5	443:5	12	n
FIELD	443:5	443:5	13	n
LEAF_NODE	443:5	443:5	14	n
ASSIGN_OP	443:7	443:7	12	-=
LEAF_NODE	443:7	443:7	13	-=
RVAL	443:10	443:10	12	stride
FIELD	443:10	443:10	13	stride
LEAF_NODE	443:10	443:10	14	stride
LEAF_NODE	443:16	443:16	10	;
ITERATION	444:5	444:19	9	
KEYWORD	444:5	444:5	10	while
LEAF_NODE	444:5	444:5	11	while
LEAF_NODE	444:11	444:11	10	(
CONDITION	444:12	444:12	10	n > 0
EXPR	444:12	444:16	11	n > 0
FIELD	444:12	444:12	12	n
LEAF_NODE	444:12	444:12	13	n
REL_OPERATOR	444:14	444:14	12	>
LEAF_NODE	444:14	444:14	13	>
FIELD	444:16	444:16	12	0
LEAF_NODE	444:16	444:16	13	0
LEAF_NODE	444:17	444:17	10	)
STATEMENTS	444:19	448:5	10	
LEAF_NODE	444:19	444:19	11	{
STATEMENTS	445:2	447:2	11	
LEAF_NODE	445:2	445:2	12	REPEAT
LEAF_NODE	445:8	445:8	12	(
EXPR_STATEMENT	445:9	446:23	12	stride , wp [ stride ] += * wp ;
EXPR	445:9	446:6	13	stride , wp [ stride ] += * wp
FIELD	445:9	445:9	14	stride
LEAF_NODE	445:9	445:9	15	stride
LEAF_NODE	445:15	445:15	14	,
ASSIGN	446:6	446:20	14	wp [ stride ] += * wp
LVAL	446:6	446:6	15	wp [ stride ]
FIELD	446:6	446:15	16	wp [ stride ]
LEAF_NODE	446:6	446:6	17	wp
LEAF_NODE	446:8	446:8	17	[
EXPR	446:9	446:9	17	stride
FIELD	446:9	446:9	18	stride
LEAF_NODE	446:9	446:9	19	stride
LEAF_NODE	446:15	446:15	17	]
ASSIGN_OP	446:17	446:17	15	+=
LEAF_NODE	446:17	446:17	16	+=
RVAL	446:20	446:20	15	* wp
UNARY_EXPR	446:20	446:21	16	* wp
UNARY_OPERATOR	446:20	446:20	17	*
LEAF_NODE	446:20	446:20	18	*
FIELD	446:21	446:21	17	wp
LEAF_NODE	446:21	446:21	18	wp
LEAF_NODE	446:23	446:23	13	;
EXPR_STATEMENT	446:25	446:50	12	* op = ToLinear8 [ * wp & mask ] ;
EXPR	446:25	446:25	13	* op = ToLinear8 [ * wp & mask ]
ASSIGN	446:25	446:31	14	* op = ToLinear8 [ * wp & mask ]
LVAL	446:25	446:25	15	* op
UNARY_EXPR	446:25	446:26	16	* op
UNARY_OPERATOR	446:25	446:25	17	*
LEAF_NODE	446:25	446:25	18	*
FIELD	446:26	446:26	17	op
LEAF_NODE	446:26	446:26	18	op
ASSIGN_OP	446:29	446:29	15	=
LEAF_NODE	446:29	446:29	16	=
RVAL	446:31	446:31	15	ToLinear8 [ * wp & mask ]
FIELD	446:31	446:49	16	ToLinear8 [ * wp & mask ]
LEAF_NODE	446:31	446:31	17	ToLinear8
LEAF_NODE	446:40	446:40	17	[
EXPR	446:41	446:45	17	* wp & mask
UNARY_EXPR	446:41	446:42	18	* wp
UNARY_OPERATOR	446:41	446:41	19	*
LEAF_NODE	446:41	446:41	20	*
FIELD	446:42	446:42	19	wp
LEAF_NODE	446:42	446:42	20	wp
LEAF_NODE	446:44	446:44	18	&
FIELD	446:45	446:45	18	mask
LEAF_NODE	446:45	446:45	19	mask
LEAF_NODE	446:49	446:49	17	]
LEAF_NODE	446:50	446:50	13	;
EXPR_STATEMENT	446:52	446:56	12	wp ++ ;
EXPR	446:52	446:52	13	wp ++
FIELD	446:52	446:54	14	wp ++
LEAF_NODE	446:52	446:52	15	wp
LEAF_NODE	446:54	446:54	15	++
LEAF_NODE	446:56	446:56	13	;
LEAF_NODE	446:58	446:58	12	op
LEAF_NODE	446:60	446:60	12	++
LEAF_NODE	446:62	446:62	12	)
EXPR_STATEMENT	447:2	447:13	12	n -= stride ;
EXPR	447:2	447:2	13	n -= stride
ASSIGN	447:2	447:7	14	n -= stride
LVAL	447:2	447:2	15	n
FIELD	447:2	447:2	16	n
LEAF_NODE	447:2	447:2	17	n
ASSIGN_OP	447:4	447:4	15	-=
LEAF_NODE	447:4	447:4	16	-=
RVAL	447:7	447:7	15	stride
FIELD	447:7	447:7	16	stride
LEAF_NODE	447:7	447:7	17	stride
LEAF_NODE	447:13	447:13	13	;
LEAF_NODE	448:5	448:5	11	}
LEAF_NODE	449:1	449:1	8	}
LEAF_NODE	450:4	450:4	5	}
LEAF_NODE	451:0	451:0	2	}
SIMPLE_DECL	457:8	478:15	1	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; z_stream stream ; tmsize_t tbuf_size ; uint16 * tbuf ; uint16 stride ; int state ; int user_datafmt ; int quality ; TIFFVSetMethod vgetparent ; TIFFVSetMethod vsetparent ; float * ToLinearF ; uint16 * ToLinear16 ; unsigned char * ToLinear8 ; uint16 * FromLT2 ; uint16 * From14 ; uint16 * From8 ; } PixarLogState ;
VAR_DECL	457:8	478:2	2	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; z_stream stream ; tmsize_t tbuf_size ; uint16 * tbuf ; uint16 stride ; int state ; int user_datafmt ; int quality ; TIFFVSetMethod vgetparent ; TIFFVSetMethod vsetparent ; float * ToLinearF ; uint16 * ToLinear16 ; unsigned char * ToLinear8 ; uint16 * FromLT2 ; uint16 * From14 ; uint16 * From8 ; } PixarLogState
TYPE	457:8	457:8	3	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; z_stream stream ; tmsize_t tbuf_size ; uint16 * tbuf ; uint16 stride ; int state ; int user_datafmt ; int quality ; TIFFVSetMethod vgetparent ; TIFFVSetMethod vsetparent ; float * ToLinearF ; uint16 * ToLinear16 ; unsigned char * ToLinear8 ; uint16 * FromLT2 ; uint16 * From14 ; uint16 * From8 ; }
CLASS_DEF	457:8	478:0	4	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; z_stream stream ; tmsize_t tbuf_size ; uint16 * tbuf ; uint16 stride ; int state ; int user_datafmt ; int quality ; TIFFVSetMethod vgetparent ; TIFFVSetMethod vsetparent ; float * ToLinearF ; uint16 * ToLinear16 ; unsigned char * ToLinear8 ; uint16 * FromLT2 ; uint16 * From14 ; uint16 * From8 ; }
LEAF_NODE	457:8	457:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	457:15	457:15	5	{
CLASS_CONTENT	458:1	476:1	5	TIFFPredictorState predict ; z_stream stream ; tmsize_t tbuf_size ; uint16 * tbuf ; uint16 stride ; int state ; int user_datafmt ; int quality ; TIFFVSetMethod vgetparent ; TIFFVSetMethod vsetparent ; float * ToLinearF ; uint16 * ToLinear16 ; unsigned char * ToLinear8 ; uint16 * FromLT2 ; uint16 * From14 ; uint16 * From8 ;
SIMPLE_DECL	458:1	458:27	6	TIFFPredictorState predict ;
VAR_DECL	458:1	458:20	7	TIFFPredictorState predict
TYPE	458:1	458:1	8	TIFFPredictorState
TYPE_NAME	458:1	458:1	9	TIFFPredictorState
LEAF_NODE	458:1	458:1	10	TIFFPredictorState
NAME	458:20	458:20	8	predict
LEAF_NODE	458:20	458:20	9	predict
LEAF_NODE	458:27	458:27	7	;
SIMPLE_DECL	459:1	459:17	6	z_stream stream ;
VAR_DECL	459:1	459:11	7	z_stream stream
TYPE	459:1	459:1	8	z_stream
TYPE_NAME	459:1	459:1	9	z_stream
LEAF_NODE	459:1	459:1	10	z_stream
NAME	459:11	459:11	8	stream
LEAF_NODE	459:11	459:11	9	stream
LEAF_NODE	459:17	459:17	7	;
SIMPLE_DECL	460:1	460:20	6	tmsize_t tbuf_size ;
VAR_DECL	460:1	460:11	7	tmsize_t tbuf_size
TYPE	460:1	460:1	8	tmsize_t
TYPE_NAME	460:1	460:1	9	tmsize_t
LEAF_NODE	460:1	460:1	10	tmsize_t
NAME	460:11	460:11	8	tbuf_size
LEAF_NODE	460:11	460:11	9	tbuf_size
LEAF_NODE	460:20	460:20	7	;
SIMPLE_DECL	461:1	461:15	6	uint16 * tbuf ;
VAR_DECL	461:1	461:11	7	uint16 * tbuf
TYPE	461:1	461:10	8	uint16 *
TYPE_NAME	461:1	461:1	9	uint16
LEAF_NODE	461:1	461:1	10	uint16
POINTER	461:10	461:10	9	*
LEAF_NODE	461:10	461:10	10	*
NAME	461:11	461:11	8	tbuf
LEAF_NODE	461:11	461:11	9	tbuf
LEAF_NODE	461:15	461:15	7	;
SIMPLE_DECL	462:1	462:16	6	uint16 stride ;
VAR_DECL	462:1	462:10	7	uint16 stride
TYPE	462:1	462:1	8	uint16
TYPE_NAME	462:1	462:1	9	uint16
LEAF_NODE	462:1	462:1	10	uint16
NAME	462:10	462:10	8	stride
LEAF_NODE	462:10	462:10	9	stride
LEAF_NODE	462:16	462:16	7	;
SIMPLE_DECL	463:1	463:12	6	int state ;
VAR_DECL	463:1	463:7	7	int state
TYPE	463:1	463:1	8	int
TYPE_NAME	463:1	463:1	9	int
LEAF_NODE	463:1	463:1	10	int
NAME	463:7	463:7	8	state
LEAF_NODE	463:7	463:7	9	state
LEAF_NODE	463:12	463:12	7	;
SIMPLE_DECL	464:1	464:19	6	int user_datafmt ;
VAR_DECL	464:1	464:7	7	int user_datafmt
TYPE	464:1	464:1	8	int
TYPE_NAME	464:1	464:1	9	int
LEAF_NODE	464:1	464:1	10	int
NAME	464:7	464:7	8	user_datafmt
LEAF_NODE	464:7	464:7	9	user_datafmt
LEAF_NODE	464:19	464:19	7	;
SIMPLE_DECL	465:1	465:14	6	int quality ;
VAR_DECL	465:1	465:7	7	int quality
TYPE	465:1	465:1	8	int
TYPE_NAME	465:1	465:1	9	int
LEAF_NODE	465:1	465:1	10	int
NAME	465:7	465:7	8	quality
LEAF_NODE	465:7	465:7	9	quality
LEAF_NODE	465:14	465:14	7	;
SIMPLE_DECL	468:1	468:27	6	TIFFVSetMethod vgetparent ;
VAR_DECL	468:1	468:17	7	TIFFVSetMethod vgetparent
TYPE	468:1	468:1	8	TIFFVSetMethod
TYPE_NAME	468:1	468:1	9	TIFFVSetMethod
LEAF_NODE	468:1	468:1	10	TIFFVSetMethod
NAME	468:17	468:17	8	vgetparent
LEAF_NODE	468:17	468:17	9	vgetparent
LEAF_NODE	468:27	468:27	7	;
SIMPLE_DECL	469:1	469:27	6	TIFFVSetMethod vsetparent ;
VAR_DECL	469:1	469:17	7	TIFFVSetMethod vsetparent
TYPE	469:1	469:1	8	TIFFVSetMethod
TYPE_NAME	469:1	469:1	9	TIFFVSetMethod
LEAF_NODE	469:1	469:1	10	TIFFVSetMethod
NAME	469:17	469:17	8	vsetparent
LEAF_NODE	469:17	469:17	9	vsetparent
LEAF_NODE	469:27	469:27	7	;
SIMPLE_DECL	471:1	471:17	6	float * ToLinearF ;
VAR_DECL	471:1	471:8	7	float * ToLinearF
TYPE	471:1	471:7	8	float *
TYPE_NAME	471:1	471:1	9	float
LEAF_NODE	471:1	471:1	10	float
POINTER	471:7	471:7	9	*
LEAF_NODE	471:7	471:7	10	*
NAME	471:8	471:8	8	ToLinearF
LEAF_NODE	471:8	471:8	9	ToLinearF
LEAF_NODE	471:17	471:17	7	;
SIMPLE_DECL	472:1	472:19	6	uint16 * ToLinear16 ;
VAR_DECL	472:1	472:9	7	uint16 * ToLinear16
TYPE	472:1	472:8	8	uint16 *
TYPE_NAME	472:1	472:1	9	uint16
LEAF_NODE	472:1	472:1	10	uint16
POINTER	472:8	472:8	9	*
LEAF_NODE	472:8	472:8	10	*
NAME	472:9	472:9	8	ToLinear16
LEAF_NODE	472:9	472:9	9	ToLinear16
LEAF_NODE	472:19	472:19	7	;
SIMPLE_DECL	473:1	473:25	6	unsigned char * ToLinear8 ;
VAR_DECL	473:1	473:16	7	unsigned char * ToLinear8
TYPE	473:1	473:15	8	unsigned char *
TYPE_NAME	473:1	473:10	9	unsigned char
LEAF_NODE	473:1	473:1	10	unsigned
LEAF_NODE	473:10	473:10	10	char
POINTER	473:15	473:15	9	*
LEAF_NODE	473:15	473:15	10	*
NAME	473:16	473:16	8	ToLinear8
LEAF_NODE	473:16	473:16	9	ToLinear8
LEAF_NODE	473:25	473:25	7	;
SIMPLE_DECL	474:1	474:17	6	uint16 * FromLT2 ;
VAR_DECL	474:1	474:10	7	uint16 * FromLT2
TYPE	474:1	474:9	8	uint16 *
TYPE_NAME	474:1	474:1	9	uint16
LEAF_NODE	474:1	474:1	10	uint16
POINTER	474:9	474:9	9	*
LEAF_NODE	474:9	474:9	10	*
NAME	474:10	474:10	8	FromLT2
LEAF_NODE	474:10	474:10	9	FromLT2
LEAF_NODE	474:17	474:17	7	;
SIMPLE_DECL	475:1	475:16	6	uint16 * From14 ;
VAR_DECL	475:1	475:10	7	uint16 * From14
TYPE	475:1	475:9	8	uint16 *
TYPE_NAME	475:1	475:1	9	uint16
LEAF_NODE	475:1	475:1	10	uint16
POINTER	475:9	475:9	9	*
LEAF_NODE	475:9	475:9	10	*
NAME	475:10	475:10	8	From14
LEAF_NODE	475:10	475:10	9	From14
LEAF_NODE	475:16	475:16	7	;
SIMPLE_DECL	476:1	476:15	6	uint16 * From8 ;
VAR_DECL	476:1	476:10	7	uint16 * From8
TYPE	476:1	476:9	8	uint16 *
TYPE_NAME	476:1	476:1	9	uint16
LEAF_NODE	476:1	476:1	10	uint16
POINTER	476:9	476:9	9	*
LEAF_NODE	476:9	476:9	10	*
NAME	476:10	476:10	8	From8
LEAF_NODE	476:10	476:10	9	From8
LEAF_NODE	476:15	476:15	7	;
LEAF_NODE	478:0	478:0	5	}
NAME	478:2	478:2	3	PixarLogState
LEAF_NODE	478:2	478:2	4	PixarLogState
LEAF_NODE	478:15	478:15	2	;
FUNCTION_DEF	480:0	592:0	1	
RETURN_TYPE	480:0	480:7	2	static int
LEAF_NODE	480:0	480:0	3	static
TYPE_NAME	480:7	480:7	3	int
LEAF_NODE	480:7	480:7	4	int
FUNCTION_NAME	481:0	481:0	2	PixarLogMakeTables
LEAF_NODE	481:0	481:0	3	PixarLogMakeTables
PARAMETER_LIST	481:18	481:36	2	( PixarLogState * sp )
LEAF_NODE	481:18	481:18	3	(
PARAMETER_DECL	481:19	481:34	3	PixarLogState * sp
TYPE	481:19	481:33	4	PixarLogState *
TYPE_NAME	481:19	481:19	5	PixarLogState
LEAF_NODE	481:19	481:19	6	PixarLogState
POINTER	481:33	481:33	5	*
LEAF_NODE	481:33	481:33	6	*
NAME	481:34	481:34	4	sp
LEAF_NODE	481:34	481:34	5	sp
LEAF_NODE	481:36	481:36	3	)
LEAF_NODE	482:0	482:0	2	{
STATEMENTS	495:4	591:4	2	
SIMPLE_DECL	495:4	495:22	3	int nlin , int lt2size ;
INIT_DECL_LIST	495:4	495:4	4	int nlin , int lt2size
VAR_DECL	495:4	495:9	5	int nlin
TYPE	495:4	495:4	6	int
TYPE_NAME	495:4	495:4	7	int
LEAF_NODE	495:4	495:4	8	int
NAME	495:9	495:9	6	nlin
LEAF_NODE	495:9	495:9	7	nlin
LEAF_NODE	495:13	495:13	5	,
VAR_DECL	495:4	495:15	5	int lt2size
TYPE	495:4	495:4	6	int
TYPE_NAME	495:4	495:4	7	int
LEAF_NODE	495:4	495:4	8	int
NAME	495:15	495:15	6	lt2size
LEAF_NODE	495:15	495:15	7	lt2size
LEAF_NODE	495:22	495:22	4	;
SIMPLE_DECL	496:4	496:13	3	int i , int j ;
INIT_DECL_LIST	496:4	496:4	4	int i , int j
VAR_DECL	496:4	496:9	5	int i
TYPE	496:4	496:4	6	int
TYPE_NAME	496:4	496:4	7	int
LEAF_NODE	496:4	496:4	8	int
NAME	496:9	496:9	6	i
LEAF_NODE	496:9	496:9	7	i
LEAF_NODE	496:10	496:10	5	,
VAR_DECL	496:4	496:12	5	int j
TYPE	496:4	496:4	6	int
TYPE_NAME	496:4	496:4	7	int
LEAF_NODE	496:4	496:4	8	int
NAME	496:12	496:12	6	j
LEAF_NODE	496:12	496:12	7	j
LEAF_NODE	496:13	496:13	4	;
SIMPLE_DECL	497:4	497:28	3	double b , double c , double linstep , double v ;
INIT_DECL_LIST	497:4	497:4	4	double b , double c , double linstep , double v
VAR_DECL	497:4	497:12	5	double b
TYPE	497:4	497:4	6	double
TYPE_NAME	497:4	497:4	7	double
LEAF_NODE	497:4	497:4	8	double
NAME	497:12	497:12	6	b
LEAF_NODE	497:12	497:12	7	b
LEAF_NODE	497:13	497:13	5	,
INIT_DECL_LIST	497:4	497:4	5	double c , double linstep , double v
VAR_DECL	497:4	497:15	6	double c
TYPE	497:4	497:4	7	double
TYPE_NAME	497:4	497:4	8	double
LEAF_NODE	497:4	497:4	9	double
NAME	497:15	497:15	7	c
LEAF_NODE	497:15	497:15	8	c
LEAF_NODE	497:16	497:16	6	,
INIT_DECL_LIST	497:4	497:4	6	double linstep , double v
VAR_DECL	497:4	497:18	7	double linstep
TYPE	497:4	497:4	8	double
TYPE_NAME	497:4	497:4	9	double
LEAF_NODE	497:4	497:4	10	double
NAME	497:18	497:18	8	linstep
LEAF_NODE	497:18	497:18	9	linstep
LEAF_NODE	497:25	497:25	7	,
VAR_DECL	497:4	497:27	7	double v
TYPE	497:4	497:4	8	double
TYPE_NAME	497:4	497:4	9	double
LEAF_NODE	497:4	497:4	10	double
NAME	497:27	497:27	8	v
LEAF_NODE	497:27	497:27	9	v
LEAF_NODE	497:28	497:28	4	;
SIMPLE_DECL	498:4	498:20	3	float * ToLinearF ;
VAR_DECL	498:4	498:11	4	float * ToLinearF
TYPE	498:4	498:10	5	float *
TYPE_NAME	498:4	498:4	6	float
LEAF_NODE	498:4	498:4	7	float
POINTER	498:10	498:10	6	*
LEAF_NODE	498:10	498:10	7	*
NAME	498:11	498:11	5	ToLinearF
LEAF_NODE	498:11	498:11	6	ToLinearF
LEAF_NODE	498:20	498:20	4	;
SIMPLE_DECL	499:4	499:22	3	uint16 * ToLinear16 ;
VAR_DECL	499:4	499:12	4	uint16 * ToLinear16
TYPE	499:4	499:11	5	uint16 *
TYPE_NAME	499:4	499:4	6	uint16
LEAF_NODE	499:4	499:4	7	uint16
POINTER	499:11	499:11	6	*
LEAF_NODE	499:11	499:11	7	*
NAME	499:12	499:12	5	ToLinear16
LEAF_NODE	499:12	499:12	6	ToLinear16
LEAF_NODE	499:22	499:22	4	;
SIMPLE_DECL	500:4	500:28	3	unsigned char * ToLinear8 ;
VAR_DECL	500:4	500:19	4	unsigned char * ToLinear8
TYPE	500:4	500:18	5	unsigned char *
TYPE_NAME	500:4	500:13	6	unsigned char
LEAF_NODE	500:4	500:4	7	unsigned
LEAF_NODE	500:13	500:13	7	char
POINTER	500:18	500:18	6	*
LEAF_NODE	500:18	500:18	7	*
NAME	500:19	500:19	5	ToLinear8
LEAF_NODE	500:19	500:19	6	ToLinear8
LEAF_NODE	500:28	500:28	4	;
SIMPLE_DECL	501:4	501:20	3	uint16 * FromLT2 ;
VAR_DECL	501:4	501:13	4	uint16 * FromLT2
TYPE	501:4	501:12	5	uint16 *
TYPE_NAME	501:4	501:4	6	uint16
LEAF_NODE	501:4	501:4	7	uint16
POINTER	501:12	501:12	6	*
LEAF_NODE	501:12	501:12	7	*
NAME	501:13	501:13	5	FromLT2
LEAF_NODE	501:13	501:13	6	FromLT2
LEAF_NODE	501:20	501:20	4	;
SIMPLE_DECL	502:4	502:19	3	uint16 * From14 ;
VAR_DECL	502:4	502:13	4	uint16 * From14
TYPE	502:4	502:12	5	uint16 *
TYPE_NAME	502:4	502:4	6	uint16
LEAF_NODE	502:4	502:4	7	uint16
POINTER	502:12	502:12	6	*
LEAF_NODE	502:12	502:12	7	*
NAME	502:13	502:13	5	From14
LEAF_NODE	502:13	502:13	6	From14
LEAF_NODE	502:19	502:19	4	;
SIMPLE_DECL	503:4	503:18	3	uint16 * From8 ;
VAR_DECL	503:4	503:13	4	uint16 * From8
TYPE	503:4	503:12	5	uint16 *
TYPE_NAME	503:4	503:4	6	uint16
LEAF_NODE	503:4	503:4	7	uint16
POINTER	503:12	503:12	6	*
LEAF_NODE	503:12	503:12	7	*
NAME	503:13	503:13	5	From8
LEAF_NODE	503:13	503:13	6	From8
LEAF_NODE	503:18	503:18	4	;
EXPR_STATEMENT	505:4	505:18	3	c = log ( RATIO ) ;
EXPR	505:4	505:4	4	c = log ( RATIO )
ASSIGN	505:4	505:8	5	c = log ( RATIO )
LVAL	505:4	505:4	6	c
FIELD	505:4	505:4	7	c
LEAF_NODE	505:4	505:4	8	c
ASSIGN_OP	505:6	505:6	6	=
LEAF_NODE	505:6	505:6	7	=
RVAL	505:8	505:8	6	log ( RATIO )
FUNCTION_CALL	505:8	505:17	7	log ( RATIO )
CALLEE	505:8	505:8	8	log
LEAF_NODE	505:8	505:8	9	log
LEAF_NODE	505:11	505:11	8	(
ARGUMENT	505:12	505:12	8	RATIO
FIELD	505:12	505:12	9	RATIO
LEAF_NODE	505:12	505:12	10	RATIO
LEAF_NODE	505:17	505:17	8	)
LEAF_NODE	505:18	505:18	4	;
EXPR_STATEMENT	506:4	506:22	3	nlin = ( int ) ( 1. / c ) ;
EXPR	506:4	506:4	4	nlin = ( int ) ( 1. / c )
ASSIGN	506:4	506:11	5	nlin = ( int ) ( 1. / c )
LVAL	506:4	506:4	6	nlin
FIELD	506:4	506:4	7	nlin
LEAF_NODE	506:4	506:4	8	nlin
ASSIGN_OP	506:9	506:9	6	=
LEAF_NODE	506:9	506:9	7	=
RVAL	506:11	506:21	6	( int ) ( 1. / c )
LEAF_NODE	506:11	506:11	7	(
TYPE_NAME	506:12	506:12	7	int
LEAF_NODE	506:12	506:12	8	int
LEAF_NODE	506:15	506:15	7	)
LEAF_NODE	506:16	506:16	7	(
FIELD	506:17	506:17	7	1.
LEAF_NODE	506:17	506:17	8	1.
LEAF_NODE	506:19	506:19	7	/
FIELD	506:20	506:20	7	c
LEAF_NODE	506:20	506:20	8	c
LEAF_NODE	506:21	506:21	7	)
LEAF_NODE	506:22	506:22	4	;
EXPR_STATEMENT	507:4	507:15	3	c = 1. / nlin ;
EXPR	507:4	507:4	4	c = 1. / nlin
ASSIGN	507:4	507:8	5	c = 1. / nlin
LVAL	507:4	507:4	6	c
FIELD	507:4	507:4	7	c
LEAF_NODE	507:4	507:4	8	c
ASSIGN_OP	507:6	507:6	6	=
LEAF_NODE	507:6	507:6	7	=
RVAL	507:8	507:11	6	1. / nlin
FIELD	507:8	507:8	7	1.
LEAF_NODE	507:8	507:8	8	1.
LEAF_NODE	507:10	507:10	7	/
FIELD	507:11	507:11	7	nlin
LEAF_NODE	507:11	507:11	8	nlin
LEAF_NODE	507:15	507:15	4	;
EXPR_STATEMENT	508:4	508:19	3	b = exp ( - c * ONE ) ;
EXPR	508:4	508:4	4	b = exp ( - c * ONE )
ASSIGN	508:4	508:8	5	b = exp ( - c * ONE )
LVAL	508:4	508:4	6	b
FIELD	508:4	508:4	7	b
LEAF_NODE	508:4	508:4	8	b
ASSIGN_OP	508:6	508:6	6	=
LEAF_NODE	508:6	508:6	7	=
RVAL	508:8	508:8	6	exp ( - c * ONE )
FUNCTION_CALL	508:8	508:18	7	exp ( - c * ONE )
CALLEE	508:8	508:8	8	exp
LEAF_NODE	508:8	508:8	9	exp
LEAF_NODE	508:11	508:11	8	(
ARGUMENT	508:12	508:15	8	- c * ONE
UNARY_EXPR	508:12	508:13	9	- c
UNARY_OPERATOR	508:12	508:12	10	-
LEAF_NODE	508:12	508:12	11	-
FIELD	508:13	508:13	10	c
LEAF_NODE	508:13	508:13	11	c
LEAF_NODE	508:14	508:14	9	*
FIELD	508:15	508:15	9	ONE
LEAF_NODE	508:15	508:15	10	ONE
LEAF_NODE	508:18	508:18	8	)
LEAF_NODE	508:19	508:19	4	;
LEAF_NODE	509:4	509:4	3	linstep
LEAF_NODE	509:12	509:12	3	=
LEAF_NODE	509:14	509:14	3	b
EXPR_STATEMENT	509:15	509:25	3	* c * exp ( 1. ) ;
EXPR	509:15	509:18	4	* c * exp ( 1. )
UNARY_EXPR	509:15	509:16	5	* c
UNARY_OPERATOR	509:15	509:15	6	*
LEAF_NODE	509:15	509:15	7	*
FIELD	509:16	509:16	6	c
LEAF_NODE	509:16	509:16	7	c
LEAF_NODE	509:17	509:17	5	*
FUNCTION_CALL	509:18	509:24	5	exp ( 1. )
CALLEE	509:18	509:18	6	exp
LEAF_NODE	509:18	509:18	7	exp
LEAF_NODE	509:21	509:21	6	(
ARGUMENT	509:22	509:22	6	1.
FIELD	509:22	509:22	7	1.
LEAF_NODE	509:22	509:22	8	1.
LEAF_NODE	509:24	509:24	6	)
LEAF_NODE	509:25	509:25	4	;
EXPR_STATEMENT	511:4	511:25	3	LogK1 = ( float ) ( 1. / c ) ;
EXPR	511:4	511:4	4	LogK1 = ( float ) ( 1. / c )
ASSIGN	511:4	511:12	5	LogK1 = ( float ) ( 1. / c )
LVAL	511:4	511:4	6	LogK1
FIELD	511:4	511:4	7	LogK1
LEAF_NODE	511:4	511:4	8	LogK1
ASSIGN_OP	511:10	511:10	6	=
LEAF_NODE	511:10	511:10	7	=
RVAL	511:12	511:24	6	( float ) ( 1. / c )
LEAF_NODE	511:12	511:12	7	(
TYPE_NAME	511:13	511:13	7	float
LEAF_NODE	511:13	511:13	8	float
LEAF_NODE	511:18	511:18	7	)
LEAF_NODE	511:19	511:19	7	(
FIELD	511:20	511:20	7	1.
LEAF_NODE	511:20	511:20	8	1.
LEAF_NODE	511:22	511:22	7	/
FIELD	511:23	511:23	7	c
LEAF_NODE	511:23	511:23	8	c
LEAF_NODE	511:24	511:24	7	)
LEAF_NODE	511:25	511:25	4	;
EXPR_STATEMENT	512:4	512:25	3	LogK2 = ( float ) ( 1. / b ) ;
EXPR	512:4	512:4	4	LogK2 = ( float ) ( 1. / b )
ASSIGN	512:4	512:12	5	LogK2 = ( float ) ( 1. / b )
LVAL	512:4	512:4	6	LogK2
FIELD	512:4	512:4	7	LogK2
LEAF_NODE	512:4	512:4	8	LogK2
ASSIGN_OP	512:10	512:10	6	=
LEAF_NODE	512:10	512:10	7	=
RVAL	512:12	512:24	6	( float ) ( 1. / b )
LEAF_NODE	512:12	512:12	7	(
TYPE_NAME	512:13	512:13	7	float
LEAF_NODE	512:13	512:13	8	float
LEAF_NODE	512:18	512:18	7	)
LEAF_NODE	512:19	512:19	7	(
FIELD	512:20	512:20	7	1.
LEAF_NODE	512:20	512:20	8	1.
LEAF_NODE	512:22	512:22	7	/
FIELD	512:23	512:23	7	b
LEAF_NODE	512:23	512:23	8	b
LEAF_NODE	512:24	512:24	7	)
LEAF_NODE	512:25	512:25	4	;
EXPR_STATEMENT	513:4	513:35	3	lt2size = ( int ) ( 2. / linstep ) + 1 ;
EXPR	513:4	513:4	4	lt2size = ( int ) ( 2. / linstep ) + 1
ASSIGN	513:4	513:14	5	lt2size = ( int ) ( 2. / linstep ) + 1
LVAL	513:4	513:4	6	lt2size
FIELD	513:4	513:4	7	lt2size
LEAF_NODE	513:4	513:4	8	lt2size
ASSIGN_OP	513:12	513:12	6	=
LEAF_NODE	513:12	513:12	7	=
RVAL	513:14	513:34	6	( int ) ( 2. / linstep ) + 1
LEAF_NODE	513:14	513:14	7	(
TYPE_NAME	513:15	513:15	7	int
LEAF_NODE	513:15	513:15	8	int
LEAF_NODE	513:18	513:18	7	)
LEAF_NODE	513:19	513:19	7	(
FIELD	513:20	513:20	7	2.
LEAF_NODE	513:20	513:20	8	2.
LEAF_NODE	513:22	513:22	7	/
FIELD	513:23	513:23	7	linstep
LEAF_NODE	513:23	513:23	8	linstep
LEAF_NODE	513:30	513:30	7	)
LEAF_NODE	513:32	513:32	7	+
FIELD	513:34	513:34	7	1
LEAF_NODE	513:34	513:34	8	1
LEAF_NODE	513:35	513:35	4	;
EXPR_STATEMENT	514:4	514:59	3	FromLT2 = ( uint16 * ) _TIFFmalloc ( lt2size * sizeof ( uint16 ) ) ;
EXPR	514:4	514:4	4	FromLT2 = ( uint16 * ) _TIFFmalloc ( lt2size * sizeof ( uint16 ) )
ASSIGN	514:4	514:14	5	FromLT2 = ( uint16 * ) _TIFFmalloc ( lt2size * sizeof ( uint16 ) )
LVAL	514:4	514:4	6	FromLT2
FIELD	514:4	514:4	7	FromLT2
LEAF_NODE	514:4	514:4	8	FromLT2
ASSIGN_OP	514:12	514:12	6	=
LEAF_NODE	514:12	514:12	7	=
RVAL	514:14	514:24	6	( uint16 * ) _TIFFmalloc ( lt2size * sizeof ( uint16 ) )
LEAF_NODE	514:14	514:14	7	(
TYPE_NAME	514:15	514:15	7	uint16
LEAF_NODE	514:15	514:15	8	uint16
LEAF_NODE	514:22	514:22	7	*
LEAF_NODE	514:23	514:23	7	)
FUNCTION_CALL	514:24	514:58	7	_TIFFmalloc ( lt2size * sizeof ( uint16 ) )
CALLEE	514:24	514:24	8	_TIFFmalloc
LEAF_NODE	514:24	514:24	9	_TIFFmalloc
LEAF_NODE	514:35	514:35	8	(
ARGUMENT	514:36	514:44	8	lt2size * sizeof ( uint16 )
FIELD	514:36	514:36	9	lt2size
LEAF_NODE	514:36	514:36	10	lt2size
LEAF_NODE	514:43	514:43	9	*
FUNCTION_CALL	514:44	514:57	9	sizeof ( uint16 )
CALLEE	514:44	514:44	10	sizeof
LEAF_NODE	514:44	514:44	11	sizeof
LEAF_NODE	514:50	514:50	10	(
ARGUMENT	514:51	514:51	10	uint16
FIELD	514:51	514:51	11	uint16
LEAF_NODE	514:51	514:51	12	uint16
LEAF_NODE	514:57	514:57	10	)
LEAF_NODE	514:58	514:58	8	)
LEAF_NODE	514:59	514:59	4	;
EXPR_STATEMENT	515:4	515:56	3	From14 = ( uint16 * ) _TIFFmalloc ( 16384 * sizeof ( uint16 ) ) ;
EXPR	515:4	515:4	4	From14 = ( uint16 * ) _TIFFmalloc ( 16384 * sizeof ( uint16 ) )
ASSIGN	515:4	515:13	5	From14 = ( uint16 * ) _TIFFmalloc ( 16384 * sizeof ( uint16 ) )
LVAL	515:4	515:4	6	From14
FIELD	515:4	515:4	7	From14
LEAF_NODE	515:4	515:4	8	From14
ASSIGN_OP	515:11	515:11	6	=
LEAF_NODE	515:11	515:11	7	=
RVAL	515:13	515:23	6	( uint16 * ) _TIFFmalloc ( 16384 * sizeof ( uint16 ) )
LEAF_NODE	515:13	515:13	7	(
TYPE_NAME	515:14	515:14	7	uint16
LEAF_NODE	515:14	515:14	8	uint16
LEAF_NODE	515:21	515:21	7	*
LEAF_NODE	515:22	515:22	7	)
FUNCTION_CALL	515:23	515:55	7	_TIFFmalloc ( 16384 * sizeof ( uint16 ) )
CALLEE	515:23	515:23	8	_TIFFmalloc
LEAF_NODE	515:23	515:23	9	_TIFFmalloc
LEAF_NODE	515:34	515:34	8	(
ARGUMENT	515:35	515:41	8	16384 * sizeof ( uint16 )
FIELD	515:35	515:35	9	16384
LEAF_NODE	515:35	515:35	10	16384
LEAF_NODE	515:40	515:40	9	*
FUNCTION_CALL	515:41	515:54	9	sizeof ( uint16 )
CALLEE	515:41	515:41	10	sizeof
LEAF_NODE	515:41	515:41	11	sizeof
LEAF_NODE	515:47	515:47	10	(
ARGUMENT	515:48	515:48	10	uint16
FIELD	515:48	515:48	11	uint16
LEAF_NODE	515:48	515:48	12	uint16
LEAF_NODE	515:54	515:54	10	)
LEAF_NODE	515:55	515:55	8	)
LEAF_NODE	515:56	515:56	4	;
EXPR_STATEMENT	516:4	516:53	3	From8 = ( uint16 * ) _TIFFmalloc ( 256 * sizeof ( uint16 ) ) ;
EXPR	516:4	516:4	4	From8 = ( uint16 * ) _TIFFmalloc ( 256 * sizeof ( uint16 ) )
ASSIGN	516:4	516:12	5	From8 = ( uint16 * ) _TIFFmalloc ( 256 * sizeof ( uint16 ) )
LVAL	516:4	516:4	6	From8
FIELD	516:4	516:4	7	From8
LEAF_NODE	516:4	516:4	8	From8
ASSIGN_OP	516:10	516:10	6	=
LEAF_NODE	516:10	516:10	7	=
RVAL	516:12	516:22	6	( uint16 * ) _TIFFmalloc ( 256 * sizeof ( uint16 ) )
LEAF_NODE	516:12	516:12	7	(
TYPE_NAME	516:13	516:13	7	uint16
LEAF_NODE	516:13	516:13	8	uint16
LEAF_NODE	516:20	516:20	7	*
LEAF_NODE	516:21	516:21	7	)
FUNCTION_CALL	516:22	516:52	7	_TIFFmalloc ( 256 * sizeof ( uint16 ) )
CALLEE	516:22	516:22	8	_TIFFmalloc
LEAF_NODE	516:22	516:22	9	_TIFFmalloc
LEAF_NODE	516:33	516:33	8	(
ARGUMENT	516:34	516:38	8	256 * sizeof ( uint16 )
FIELD	516:34	516:34	9	256
LEAF_NODE	516:34	516:34	10	256
LEAF_NODE	516:37	516:37	9	*
FUNCTION_CALL	516:38	516:51	9	sizeof ( uint16 )
CALLEE	516:38	516:38	10	sizeof
LEAF_NODE	516:38	516:38	11	sizeof
LEAF_NODE	516:44	516:44	10	(
ARGUMENT	516:45	516:45	10	uint16
FIELD	516:45	516:45	11	uint16
LEAF_NODE	516:45	516:45	12	uint16
LEAF_NODE	516:51	516:51	10	)
LEAF_NODE	516:52	516:52	8	)
LEAF_NODE	516:53	516:53	4	;
EXPR_STATEMENT	517:4	517:61	3	ToLinearF = ( float * ) _TIFFmalloc ( TSIZEP1 * sizeof ( float ) ) ;
EXPR	517:4	517:4	4	ToLinearF = ( float * ) _TIFFmalloc ( TSIZEP1 * sizeof ( float ) )
ASSIGN	517:4	517:16	5	ToLinearF = ( float * ) _TIFFmalloc ( TSIZEP1 * sizeof ( float ) )
LVAL	517:4	517:4	6	ToLinearF
FIELD	517:4	517:4	7	ToLinearF
LEAF_NODE	517:4	517:4	8	ToLinearF
ASSIGN_OP	517:14	517:14	6	=
LEAF_NODE	517:14	517:14	7	=
RVAL	517:16	517:25	6	( float * ) _TIFFmalloc ( TSIZEP1 * sizeof ( float ) )
LEAF_NODE	517:16	517:16	7	(
TYPE_NAME	517:17	517:17	7	float
LEAF_NODE	517:17	517:17	8	float
LEAF_NODE	517:23	517:23	7	*
LEAF_NODE	517:24	517:24	7	)
FUNCTION_CALL	517:25	517:60	7	_TIFFmalloc ( TSIZEP1 * sizeof ( float ) )
CALLEE	517:25	517:25	8	_TIFFmalloc
LEAF_NODE	517:25	517:25	9	_TIFFmalloc
LEAF_NODE	517:36	517:36	8	(
ARGUMENT	517:37	517:47	8	TSIZEP1 * sizeof ( float )
FIELD	517:37	517:37	9	TSIZEP1
LEAF_NODE	517:37	517:37	10	TSIZEP1
LEAF_NODE	517:45	517:45	9	*
FUNCTION_CALL	517:47	517:59	9	sizeof ( float )
CALLEE	517:47	517:47	10	sizeof
LEAF_NODE	517:47	517:47	11	sizeof
LEAF_NODE	517:53	517:53	10	(
ARGUMENT	517:54	517:54	10	float
FIELD	517:54	517:54	11	float
LEAF_NODE	517:54	517:54	12	float
LEAF_NODE	517:59	517:59	10	)
LEAF_NODE	517:60	517:60	8	)
LEAF_NODE	517:61	517:61	4	;
EXPR_STATEMENT	518:4	518:64	3	ToLinear16 = ( uint16 * ) _TIFFmalloc ( TSIZEP1 * sizeof ( uint16 ) ) ;
EXPR	518:4	518:4	4	ToLinear16 = ( uint16 * ) _TIFFmalloc ( TSIZEP1 * sizeof ( uint16 ) )
ASSIGN	518:4	518:17	5	ToLinear16 = ( uint16 * ) _TIFFmalloc ( TSIZEP1 * sizeof ( uint16 ) )
LVAL	518:4	518:4	6	ToLinear16
FIELD	518:4	518:4	7	ToLinear16
LEAF_NODE	518:4	518:4	8	ToLinear16
ASSIGN_OP	518:15	518:15	6	=
LEAF_NODE	518:15	518:15	7	=
RVAL	518:17	518:27	6	( uint16 * ) _TIFFmalloc ( TSIZEP1 * sizeof ( uint16 ) )
LEAF_NODE	518:17	518:17	7	(
TYPE_NAME	518:18	518:18	7	uint16
LEAF_NODE	518:18	518:18	8	uint16
LEAF_NODE	518:25	518:25	7	*
LEAF_NODE	518:26	518:26	7	)
FUNCTION_CALL	518:27	518:63	7	_TIFFmalloc ( TSIZEP1 * sizeof ( uint16 ) )
CALLEE	518:27	518:27	8	_TIFFmalloc
LEAF_NODE	518:27	518:27	9	_TIFFmalloc
LEAF_NODE	518:38	518:38	8	(
ARGUMENT	518:39	518:49	8	TSIZEP1 * sizeof ( uint16 )
FIELD	518:39	518:39	9	TSIZEP1
LEAF_NODE	518:39	518:39	10	TSIZEP1
LEAF_NODE	518:47	518:47	9	*
FUNCTION_CALL	518:49	518:62	9	sizeof ( uint16 )
CALLEE	518:49	518:49	10	sizeof
LEAF_NODE	518:49	518:49	11	sizeof
LEAF_NODE	518:55	518:55	10	(
ARGUMENT	518:56	518:56	10	uint16
FIELD	518:56	518:56	11	uint16
LEAF_NODE	518:56	518:56	12	uint16
LEAF_NODE	518:62	518:62	10	)
LEAF_NODE	518:63	518:63	8	)
LEAF_NODE	518:64	518:64	4	;
LEAF_NODE	519:4	519:4	3	ToLinear8
LEAF_NODE	519:14	519:14	3	=
LEAF_NODE	519:16	519:16	3	(
LEAF_NODE	519:17	519:17	3	unsigned
LEAF_NODE	519:26	519:26	3	char
LEAF_NODE	519:31	519:31	3	*
LEAF_NODE	519:32	519:32	3	)
LEAF_NODE	519:33	519:33	3	_TIFFmalloc
LEAF_NODE	519:44	519:44	3	(
LEAF_NODE	519:45	519:45	3	TSIZEP1
LEAF_NODE	519:53	519:53	3	*
LEAF_NODE	519:55	519:55	3	sizeof
LEAF_NODE	519:61	519:61	3	(
LEAF_NODE	519:62	519:62	3	unsigned
LEAF_NODE	519:71	519:71	3	char
LEAF_NODE	519:75	519:75	3	)
LEAF_NODE	519:76	519:76	3	)
LEAF_NODE	519:77	519:77	3	;
SELECTION	520:4	521:64	3	
KEYWORD	520:4	520:4	4	if
LEAF_NODE	520:4	520:4	5	if
LEAF_NODE	520:7	520:7	4	(
CONDITION	520:8	520:8	4	FromLT2 == NULL || From14 == NULL || From8 == NULL || ToLinearF == NULL || ToLinear16 == NULL || ToLinear8 == NULL
EXPR	520:8	520:8	5	FromLT2 == NULL || From14 == NULL || From8 == NULL || ToLinearF == NULL || ToLinear16 == NULL || ToLinear8 == NULL
OR	520:8	520:27	6	FromLT2 == NULL || From14 == NULL || From8 == NULL || ToLinearF == NULL || ToLinear16 == NULL || ToLinear8 == NULL
EXPR	520:8	520:19	7	FromLT2 == NULL
FIELD	520:8	520:8	8	FromLT2
LEAF_NODE	520:8	520:8	9	FromLT2
EQ_OPERATOR	520:16	520:16	8	==
LEAF_NODE	520:16	520:16	9	==
FIELD	520:19	520:19	8	NULL
LEAF_NODE	520:19	520:19	9	NULL
LEAF_NODE	520:24	520:24	7	||
EXPR	520:27	520:27	7	From14 == NULL || From8 == NULL || ToLinearF == NULL || ToLinear16 == NULL || ToLinear8 == NULL
OR	520:27	520:46	8	From14 == NULL || From8 == NULL || ToLinearF == NULL || ToLinear16 == NULL || ToLinear8 == NULL
EXPR	520:27	520:38	9	From14 == NULL
FIELD	520:27	520:27	10	From14
LEAF_NODE	520:27	520:27	11	From14
EQ_OPERATOR	520:35	520:35	10	==
LEAF_NODE	520:35	520:35	11	==
FIELD	520:38	520:38	10	NULL
LEAF_NODE	520:38	520:38	11	NULL
LEAF_NODE	520:43	520:43	9	||
EXPR	520:46	520:46	9	From8 == NULL || ToLinearF == NULL || ToLinear16 == NULL || ToLinear8 == NULL
OR	520:46	521:2	10	From8 == NULL || ToLinearF == NULL || ToLinear16 == NULL || ToLinear8 == NULL
EXPR	520:46	520:57	11	From8 == NULL
FIELD	520:46	520:46	12	From8
LEAF_NODE	520:46	520:46	13	From8
EQ_OPERATOR	520:54	520:54	12	==
LEAF_NODE	520:54	520:54	13	==
FIELD	520:57	520:57	12	NULL
LEAF_NODE	520:57	520:57	13	NULL
LEAF_NODE	520:62	520:62	11	||
EXPR	521:2	521:2	11	ToLinearF == NULL || ToLinear16 == NULL || ToLinear8 == NULL
OR	521:2	521:23	12	ToLinearF == NULL || ToLinear16 == NULL || ToLinear8 == NULL
EXPR	521:2	521:15	13	ToLinearF == NULL
FIELD	521:2	521:2	14	ToLinearF
LEAF_NODE	521:2	521:2	15	ToLinearF
EQ_OPERATOR	521:12	521:12	14	==
LEAF_NODE	521:12	521:12	15	==
FIELD	521:15	521:15	14	NULL
LEAF_NODE	521:15	521:15	15	NULL
LEAF_NODE	521:20	521:20	13	||
EXPR	521:23	521:23	13	ToLinear16 == NULL || ToLinear8 == NULL
OR	521:23	521:45	14	ToLinear16 == NULL || ToLinear8 == NULL
EXPR	521:23	521:37	15	ToLinear16 == NULL
FIELD	521:23	521:23	16	ToLinear16
LEAF_NODE	521:23	521:23	17	ToLinear16
EQ_OPERATOR	521:34	521:34	16	==
LEAF_NODE	521:34	521:34	17	==
FIELD	521:37	521:37	16	NULL
LEAF_NODE	521:37	521:37	17	NULL
LEAF_NODE	521:42	521:42	15	||
EXPR	521:45	521:58	15	ToLinear8 == NULL
FIELD	521:45	521:45	16	ToLinear8
LEAF_NODE	521:45	521:45	17	ToLinear8
EQ_OPERATOR	521:55	521:55	16	==
LEAF_NODE	521:55	521:55	17	==
FIELD	521:58	521:58	16	NULL
LEAF_NODE	521:58	521:58	17	NULL
LEAF_NODE	521:62	521:62	4	)
STATEMENTS	521:64	535:4	4	
LEAF_NODE	521:64	521:64	5	{
STATEMENTS	522:1	534:1	5	
SELECTION	522:1	522:14	6	
KEYWORD	522:1	522:1	7	if
LEAF_NODE	522:1	522:1	8	if
LEAF_NODE	522:4	522:4	7	(
CONDITION	522:5	522:5	7	FromLT2
EXPR	522:5	522:5	8	FromLT2
FIELD	522:5	522:5	9	FromLT2
LEAF_NODE	522:5	522:5	10	FromLT2
LEAF_NODE	522:12	522:12	7	)
STATEMENTS	522:14	522:14	7	
EXPR_STATEMENT	522:14	522:32	8	_TIFFfree ( FromLT2 ) ;
EXPR	522:14	522:14	9	_TIFFfree ( FromLT2 )
FUNCTION_CALL	522:14	522:31	10	_TIFFfree ( FromLT2 )
CALLEE	522:14	522:14	11	_TIFFfree
LEAF_NODE	522:14	522:14	12	_TIFFfree
LEAF_NODE	522:23	522:23	11	(
ARGUMENT	522:24	522:24	11	FromLT2
FIELD	522:24	522:24	12	FromLT2
LEAF_NODE	522:24	522:24	13	FromLT2
LEAF_NODE	522:31	522:31	11	)
LEAF_NODE	522:32	522:32	9	;
SELECTION	523:1	523:13	6	
KEYWORD	523:1	523:1	7	if
LEAF_NODE	523:1	523:1	8	if
LEAF_NODE	523:4	523:4	7	(
CONDITION	523:5	523:5	7	From14
EXPR	523:5	523:5	8	From14
FIELD	523:5	523:5	9	From14
LEAF_NODE	523:5	523:5	10	From14
LEAF_NODE	523:11	523:11	7	)
STATEMENTS	523:13	523:13	7	
EXPR_STATEMENT	523:13	523:30	8	_TIFFfree ( From14 ) ;
EXPR	523:13	523:13	9	_TIFFfree ( From14 )
FUNCTION_CALL	523:13	523:29	10	_TIFFfree ( From14 )
CALLEE	523:13	523:13	11	_TIFFfree
LEAF_NODE	523:13	523:13	12	_TIFFfree
LEAF_NODE	523:22	523:22	11	(
ARGUMENT	523:23	523:23	11	From14
FIELD	523:23	523:23	12	From14
LEAF_NODE	523:23	523:23	13	From14
LEAF_NODE	523:29	523:29	11	)
LEAF_NODE	523:30	523:30	9	;
SELECTION	524:1	524:12	6	
KEYWORD	524:1	524:1	7	if
LEAF_NODE	524:1	524:1	8	if
LEAF_NODE	524:4	524:4	7	(
CONDITION	524:5	524:5	7	From8
EXPR	524:5	524:5	8	From8
FIELD	524:5	524:5	9	From8
LEAF_NODE	524:5	524:5	10	From8
LEAF_NODE	524:10	524:10	7	)
STATEMENTS	524:12	524:12	7	
EXPR_STATEMENT	524:12	524:28	8	_TIFFfree ( From8 ) ;
EXPR	524:12	524:12	9	_TIFFfree ( From8 )
FUNCTION_CALL	524:12	524:27	10	_TIFFfree ( From8 )
CALLEE	524:12	524:12	11	_TIFFfree
LEAF_NODE	524:12	524:12	12	_TIFFfree
LEAF_NODE	524:21	524:21	11	(
ARGUMENT	524:22	524:22	11	From8
FIELD	524:22	524:22	12	From8
LEAF_NODE	524:22	524:22	13	From8
LEAF_NODE	524:27	524:27	11	)
LEAF_NODE	524:28	524:28	9	;
SELECTION	525:1	525:16	6	
KEYWORD	525:1	525:1	7	if
LEAF_NODE	525:1	525:1	8	if
LEAF_NODE	525:4	525:4	7	(
CONDITION	525:5	525:5	7	ToLinearF
EXPR	525:5	525:5	8	ToLinearF
FIELD	525:5	525:5	9	ToLinearF
LEAF_NODE	525:5	525:5	10	ToLinearF
LEAF_NODE	525:14	525:14	7	)
STATEMENTS	525:16	525:16	7	
EXPR_STATEMENT	525:16	525:36	8	_TIFFfree ( ToLinearF ) ;
EXPR	525:16	525:16	9	_TIFFfree ( ToLinearF )
FUNCTION_CALL	525:16	525:35	10	_TIFFfree ( ToLinearF )
CALLEE	525:16	525:16	11	_TIFFfree
LEAF_NODE	525:16	525:16	12	_TIFFfree
LEAF_NODE	525:25	525:25	11	(
ARGUMENT	525:26	525:26	11	ToLinearF
FIELD	525:26	525:26	12	ToLinearF
LEAF_NODE	525:26	525:26	13	ToLinearF
LEAF_NODE	525:35	525:35	11	)
LEAF_NODE	525:36	525:36	9	;
SELECTION	526:1	526:17	6	
KEYWORD	526:1	526:1	7	if
LEAF_NODE	526:1	526:1	8	if
LEAF_NODE	526:4	526:4	7	(
CONDITION	526:5	526:5	7	ToLinear16
EXPR	526:5	526:5	8	ToLinear16
FIELD	526:5	526:5	9	ToLinear16
LEAF_NODE	526:5	526:5	10	ToLinear16
LEAF_NODE	526:15	526:15	7	)
STATEMENTS	526:17	526:17	7	
EXPR_STATEMENT	526:17	526:38	8	_TIFFfree ( ToLinear16 ) ;
EXPR	526:17	526:17	9	_TIFFfree ( ToLinear16 )
FUNCTION_CALL	526:17	526:37	10	_TIFFfree ( ToLinear16 )
CALLEE	526:17	526:17	11	_TIFFfree
LEAF_NODE	526:17	526:17	12	_TIFFfree
LEAF_NODE	526:26	526:26	11	(
ARGUMENT	526:27	526:27	11	ToLinear16
FIELD	526:27	526:27	12	ToLinear16
LEAF_NODE	526:27	526:27	13	ToLinear16
LEAF_NODE	526:37	526:37	11	)
LEAF_NODE	526:38	526:38	9	;
SELECTION	527:1	527:16	6	
KEYWORD	527:1	527:1	7	if
LEAF_NODE	527:1	527:1	8	if
LEAF_NODE	527:4	527:4	7	(
CONDITION	527:5	527:5	7	ToLinear8
EXPR	527:5	527:5	8	ToLinear8
FIELD	527:5	527:5	9	ToLinear8
LEAF_NODE	527:5	527:5	10	ToLinear8
LEAF_NODE	527:14	527:14	7	)
STATEMENTS	527:16	527:16	7	
EXPR_STATEMENT	527:16	527:36	8	_TIFFfree ( ToLinear8 ) ;
EXPR	527:16	527:16	9	_TIFFfree ( ToLinear8 )
FUNCTION_CALL	527:16	527:35	10	_TIFFfree ( ToLinear8 )
CALLEE	527:16	527:16	11	_TIFFfree
LEAF_NODE	527:16	527:16	12	_TIFFfree
LEAF_NODE	527:25	527:25	11	(
ARGUMENT	527:26	527:26	11	ToLinear8
FIELD	527:26	527:26	12	ToLinear8
LEAF_NODE	527:26	527:26	13	ToLinear8
LEAF_NODE	527:35	527:35	11	)
LEAF_NODE	527:36	527:36	9	;
EXPR_STATEMENT	528:1	528:19	6	sp -> FromLT2 = NULL ;
EXPR	528:1	528:1	7	sp -> FromLT2 = NULL
ASSIGN	528:1	528:15	8	sp -> FromLT2 = NULL
LVAL	528:1	528:1	9	sp -> FromLT2
FIELD	528:1	528:5	10	sp -> FromLT2
LEAF_NODE	528:1	528:1	11	sp
LEAF_NODE	528:3	528:3	11	->
LEAF_NODE	528:5	528:5	11	FromLT2
ASSIGN_OP	528:13	528:13	9	=
LEAF_NODE	528:13	528:13	10	=
RVAL	528:15	528:15	9	NULL
FIELD	528:15	528:15	10	NULL
LEAF_NODE	528:15	528:15	11	NULL
LEAF_NODE	528:19	528:19	7	;
EXPR_STATEMENT	529:1	529:18	6	sp -> From14 = NULL ;
EXPR	529:1	529:1	7	sp -> From14 = NULL
ASSIGN	529:1	529:14	8	sp -> From14 = NULL
LVAL	529:1	529:1	9	sp -> From14
FIELD	529:1	529:5	10	sp -> From14
LEAF_NODE	529:1	529:1	11	sp
LEAF_NODE	529:3	529:3	11	->
LEAF_NODE	529:5	529:5	11	From14
ASSIGN_OP	529:12	529:12	9	=
LEAF_NODE	529:12	529:12	10	=
RVAL	529:14	529:14	9	NULL
FIELD	529:14	529:14	10	NULL
LEAF_NODE	529:14	529:14	11	NULL
LEAF_NODE	529:18	529:18	7	;
EXPR_STATEMENT	530:1	530:17	6	sp -> From8 = NULL ;
EXPR	530:1	530:1	7	sp -> From8 = NULL
ASSIGN	530:1	530:13	8	sp -> From8 = NULL
LVAL	530:1	530:1	9	sp -> From8
FIELD	530:1	530:5	10	sp -> From8
LEAF_NODE	530:1	530:1	11	sp
LEAF_NODE	530:3	530:3	11	->
LEAF_NODE	530:5	530:5	11	From8
ASSIGN_OP	530:11	530:11	9	=
LEAF_NODE	530:11	530:11	10	=
RVAL	530:13	530:13	9	NULL
FIELD	530:13	530:13	10	NULL
LEAF_NODE	530:13	530:13	11	NULL
LEAF_NODE	530:17	530:17	7	;
EXPR_STATEMENT	531:1	531:21	6	sp -> ToLinearF = NULL ;
EXPR	531:1	531:1	7	sp -> ToLinearF = NULL
ASSIGN	531:1	531:17	8	sp -> ToLinearF = NULL
LVAL	531:1	531:1	9	sp -> ToLinearF
FIELD	531:1	531:5	10	sp -> ToLinearF
LEAF_NODE	531:1	531:1	11	sp
LEAF_NODE	531:3	531:3	11	->
LEAF_NODE	531:5	531:5	11	ToLinearF
ASSIGN_OP	531:15	531:15	9	=
LEAF_NODE	531:15	531:15	10	=
RVAL	531:17	531:17	9	NULL
FIELD	531:17	531:17	10	NULL
LEAF_NODE	531:17	531:17	11	NULL
LEAF_NODE	531:21	531:21	7	;
EXPR_STATEMENT	532:1	532:22	6	sp -> ToLinear16 = NULL ;
EXPR	532:1	532:1	7	sp -> ToLinear16 = NULL
ASSIGN	532:1	532:18	8	sp -> ToLinear16 = NULL
LVAL	532:1	532:1	9	sp -> ToLinear16
FIELD	532:1	532:5	10	sp -> ToLinear16
LEAF_NODE	532:1	532:1	11	sp
LEAF_NODE	532:3	532:3	11	->
LEAF_NODE	532:5	532:5	11	ToLinear16
ASSIGN_OP	532:16	532:16	9	=
LEAF_NODE	532:16	532:16	10	=
RVAL	532:18	532:18	9	NULL
FIELD	532:18	532:18	10	NULL
LEAF_NODE	532:18	532:18	11	NULL
LEAF_NODE	532:22	532:22	7	;
EXPR_STATEMENT	533:1	533:21	6	sp -> ToLinear8 = NULL ;
EXPR	533:1	533:1	7	sp -> ToLinear8 = NULL
ASSIGN	533:1	533:17	8	sp -> ToLinear8 = NULL
LVAL	533:1	533:1	9	sp -> ToLinear8
FIELD	533:1	533:5	10	sp -> ToLinear8
LEAF_NODE	533:1	533:1	11	sp
LEAF_NODE	533:3	533:3	11	->
LEAF_NODE	533:5	533:5	11	ToLinear8
ASSIGN_OP	533:15	533:15	9	=
LEAF_NODE	533:15	533:15	10	=
RVAL	533:17	533:17	9	NULL
FIELD	533:17	533:17	10	NULL
LEAF_NODE	533:17	533:17	11	NULL
LEAF_NODE	533:21	533:21	7	;
JUMP_STATEMENT	534:1	534:9	6	return 0 ;
KEYWORD	534:1	534:1	7	return
LEAF_NODE	534:1	534:1	8	return
DESTINATION	534:8	534:8	7	0
EXPR	534:8	534:8	8	0
FIELD	534:8	534:8	9	0
LEAF_NODE	534:8	534:8	10	0
LEAF_NODE	534:9	534:9	7	;
LEAF_NODE	535:4	535:4	5	}
EXPR_STATEMENT	537:4	537:9	3	j = 0 ;
EXPR	537:4	537:4	4	j = 0
ASSIGN	537:4	537:8	5	j = 0
LVAL	537:4	537:4	6	j
FIELD	537:4	537:4	7	j
LEAF_NODE	537:4	537:4	8	j
ASSIGN_OP	537:6	537:6	6	=
LEAF_NODE	537:6	537:6	7	=
RVAL	537:8	537:8	6	0
FIELD	537:8	537:8	7	0
LEAF_NODE	537:8	537:8	8	0
LEAF_NODE	537:9	537:9	4	;
ITERATION	539:4	539:32	3	
KEYWORD	539:4	539:4	4	for
LEAF_NODE	539:4	539:4	5	for
LEAF_NODE	539:8	539:8	4	(
FOR_INIT	539:9	539:14	4	i = 0 ;
EXPR	539:9	539:9	5	i = 0
ASSIGN	539:9	539:13	6	i = 0
LVAL	539:9	539:9	7	i
FIELD	539:9	539:9	8	i
LEAF_NODE	539:9	539:9	9	i
ASSIGN_OP	539:11	539:11	7	=
LEAF_NODE	539:11	539:11	8	=
RVAL	539:13	539:13	7	0
FIELD	539:13	539:13	8	0
LEAF_NODE	539:13	539:13	9	0
LEAF_NODE	539:14	539:14	5	;
CONDITION	539:16	539:16	4	i < nlin
EXPR	539:16	539:20	5	i < nlin
FIELD	539:16	539:16	6	i
LEAF_NODE	539:16	539:16	7	i
REL_OPERATOR	539:18	539:18	6	<
LEAF_NODE	539:18	539:18	7	<
FIELD	539:20	539:20	6	nlin
LEAF_NODE	539:20	539:20	7	nlin
LEAF_NODE	539:24	539:24	4	;
FOR_EXPR	539:26	539:26	4	i ++
EXPR	539:26	539:26	5	i ++
FIELD	539:26	539:27	6	i ++
LEAF_NODE	539:26	539:26	7	i
LEAF_NODE	539:27	539:27	7	++
LEAF_NODE	539:29	539:29	4	)
STATEMENTS	539:32	542:4	4	
LEAF_NODE	539:32	539:32	5	{
STATEMENTS	540:1	541:1	5	
EXPR_STATEMENT	540:1	540:16	6	v = i * linstep ;
EXPR	540:1	540:1	7	v = i * linstep
ASSIGN	540:1	540:5	8	v = i * linstep
LVAL	540:1	540:1	9	v
FIELD	540:1	540:1	10	v
LEAF_NODE	540:1	540:1	11	v
ASSIGN_OP	540:3	540:3	9	=
LEAF_NODE	540:3	540:3	10	=
RVAL	540:5	540:9	9	i * linstep
FIELD	540:5	540:5	10	i
LEAF_NODE	540:5	540:5	11	i
LEAF_NODE	540:7	540:7	10	*
FIELD	540:9	540:9	10	linstep
LEAF_NODE	540:9	540:9	11	linstep
LEAF_NODE	540:16	540:16	7	;
EXPR_STATEMENT	541:1	541:26	6	ToLinearF [ j ++ ] = ( float ) v ;
EXPR	541:1	541:1	7	ToLinearF [ j ++ ] = ( float ) v
ASSIGN	541:1	541:18	8	ToLinearF [ j ++ ] = ( float ) v
LVAL	541:1	541:1	9	ToLinearF [ j ++ ]
FIELD	541:1	541:14	10	ToLinearF [ j ++ ]
LEAF_NODE	541:1	541:1	11	ToLinearF
LEAF_NODE	541:10	541:10	11	[
EXPR	541:11	541:11	11	j ++
FIELD	541:11	541:12	12	j ++
LEAF_NODE	541:11	541:11	13	j
LEAF_NODE	541:12	541:12	13	++
LEAF_NODE	541:14	541:14	11	]
ASSIGN_OP	541:16	541:16	9	=
LEAF_NODE	541:16	541:16	10	=
RVAL	541:18	541:25	9	( float ) v
LEAF_NODE	541:18	541:18	10	(
TYPE_NAME	541:19	541:19	10	float
LEAF_NODE	541:19	541:19	11	float
LEAF_NODE	541:24	541:24	10	)
FIELD	541:25	541:25	10	v
LEAF_NODE	541:25	541:25	11	v
LEAF_NODE	541:26	541:26	7	;
LEAF_NODE	542:4	542:4	5	}
ITERATION	544:4	545:1	3	
KEYWORD	544:4	544:4	4	for
LEAF_NODE	544:4	544:4	5	for
LEAF_NODE	544:8	544:8	4	(
FOR_INIT	544:9	544:17	4	i = nlin ;
EXPR	544:9	544:9	5	i = nlin
ASSIGN	544:9	544:13	6	i = nlin
LVAL	544:9	544:9	7	i
FIELD	544:9	544:9	8	i
LEAF_NODE	544:9	544:9	9	i
ASSIGN_OP	544:11	544:11	7	=
LEAF_NODE	544:11	544:11	8	=
RVAL	544:13	544:13	7	nlin
FIELD	544:13	544:13	8	nlin
LEAF_NODE	544:13	544:13	9	nlin
LEAF_NODE	544:17	544:17	5	;
CONDITION	544:19	544:19	4	i < TSIZE
EXPR	544:19	544:23	5	i < TSIZE
FIELD	544:19	544:19	6	i
LEAF_NODE	544:19	544:19	7	i
REL_OPERATOR	544:21	544:21	6	<
LEAF_NODE	544:21	544:21	7	<
FIELD	544:23	544:23	6	TSIZE
LEAF_NODE	544:23	544:23	7	TSIZE
LEAF_NODE	544:28	544:28	4	;
FOR_EXPR	544:30	544:30	4	i ++
EXPR	544:30	544:30	5	i ++
FIELD	544:30	544:31	6	i ++
LEAF_NODE	544:30	544:30	7	i
LEAF_NODE	544:31	544:31	7	++
LEAF_NODE	544:33	544:33	4	)
STATEMENTS	545:1	545:1	4	
EXPR_STATEMENT	545:1	545:37	5	ToLinearF [ j ++ ] = ( float ) ( b * exp ( c * i ) ) ;
EXPR	545:1	545:1	6	ToLinearF [ j ++ ] = ( float ) ( b * exp ( c * i ) )
ASSIGN	545:1	545:18	7	ToLinearF [ j ++ ] = ( float ) ( b * exp ( c * i ) )
LVAL	545:1	545:1	8	ToLinearF [ j ++ ]
FIELD	545:1	545:14	9	ToLinearF [ j ++ ]
LEAF_NODE	545:1	545:1	10	ToLinearF
LEAF_NODE	545:10	545:10	10	[
EXPR	545:11	545:11	10	j ++
FIELD	545:11	545:12	11	j ++
LEAF_NODE	545:11	545:11	12	j
LEAF_NODE	545:12	545:12	12	++
LEAF_NODE	545:14	545:14	10	]
ASSIGN_OP	545:16	545:16	8	=
LEAF_NODE	545:16	545:16	9	=
RVAL	545:18	545:36	8	( float ) ( b * exp ( c * i ) )
LEAF_NODE	545:18	545:18	9	(
TYPE_NAME	545:19	545:19	9	float
LEAF_NODE	545:19	545:19	10	float
LEAF_NODE	545:24	545:24	9	)
LEAF_NODE	545:25	545:25	9	(
FIELD	545:26	545:26	9	b
LEAF_NODE	545:26	545:26	10	b
LEAF_NODE	545:27	545:27	9	*
FUNCTION_CALL	545:28	545:35	9	exp ( c * i )
CALLEE	545:28	545:28	10	exp
LEAF_NODE	545:28	545:28	11	exp
LEAF_NODE	545:31	545:31	10	(
ARGUMENT	545:32	545:34	10	c * i
FIELD	545:32	545:32	11	c
LEAF_NODE	545:32	545:32	12	c
LEAF_NODE	545:33	545:33	11	*
FIELD	545:34	545:34	11	i
LEAF_NODE	545:34	545:34	12	i
LEAF_NODE	545:35	545:35	10	)
LEAF_NODE	545:36	545:36	9	)
LEAF_NODE	545:37	545:37	6	;
EXPR_STATEMENT	547:4	547:37	3	ToLinearF [ 2048 ] = ToLinearF [ 2047 ] ;
EXPR	547:4	547:4	4	ToLinearF [ 2048 ] = ToLinearF [ 2047 ]
ASSIGN	547:4	547:22	5	ToLinearF [ 2048 ] = ToLinearF [ 2047 ]
LVAL	547:4	547:4	6	ToLinearF [ 2048 ]
FIELD	547:4	547:18	7	ToLinearF [ 2048 ]
LEAF_NODE	547:4	547:4	8	ToLinearF
LEAF_NODE	547:13	547:13	8	[
EXPR	547:14	547:14	8	2048
FIELD	547:14	547:14	9	2048
LEAF_NODE	547:14	547:14	10	2048
LEAF_NODE	547:18	547:18	8	]
ASSIGN_OP	547:20	547:20	6	=
LEAF_NODE	547:20	547:20	7	=
RVAL	547:22	547:22	6	ToLinearF [ 2047 ]
FIELD	547:22	547:36	7	ToLinearF [ 2047 ]
LEAF_NODE	547:22	547:22	8	ToLinearF
LEAF_NODE	547:31	547:31	8	[
EXPR	547:32	547:32	8	2047
FIELD	547:32	547:32	9	2047
LEAF_NODE	547:32	547:32	10	2047
LEAF_NODE	547:36	547:36	8	]
LEAF_NODE	547:37	547:37	4	;
ITERATION	549:4	549:35	3	
KEYWORD	549:4	549:4	4	for
LEAF_NODE	549:4	549:4	5	for
LEAF_NODE	549:8	549:8	4	(
FOR_INIT	549:9	549:14	4	i = 0 ;
EXPR	549:9	549:9	5	i = 0
ASSIGN	549:9	549:13	6	i = 0
LVAL	549:9	549:9	7	i
FIELD	549:9	549:9	8	i
LEAF_NODE	549:9	549:9	9	i
ASSIGN_OP	549:11	549:11	7	=
LEAF_NODE	549:11	549:11	8	=
RVAL	549:13	549:13	7	0
FIELD	549:13	549:13	8	0
LEAF_NODE	549:13	549:13	9	0
LEAF_NODE	549:14	549:14	5	;
CONDITION	549:16	549:16	4	i < TSIZEP1
EXPR	549:16	549:20	5	i < TSIZEP1
FIELD	549:16	549:16	6	i
LEAF_NODE	549:16	549:16	7	i
REL_OPERATOR	549:18	549:18	6	<
LEAF_NODE	549:18	549:18	7	<
FIELD	549:20	549:20	6	TSIZEP1
LEAF_NODE	549:20	549:20	7	TSIZEP1
LEAF_NODE	549:27	549:27	4	;
FOR_EXPR	549:29	549:29	4	i ++
EXPR	549:29	549:29	5	i ++
FIELD	549:29	549:30	6	i ++
LEAF_NODE	549:29	549:29	7	i
LEAF_NODE	549:30	549:30	7	++
LEAF_NODE	549:32	549:32	4	)
STATEMENTS	549:35	554:4	4	
LEAF_NODE	549:35	549:35	5	{
STATEMENTS	550:1	553:1	5	
EXPR_STATEMENT	550:1	550:31	6	v = ToLinearF [ i ] * 65535.0 + 0.5 ;
EXPR	550:1	550:1	7	v = ToLinearF [ i ] * 65535.0 + 0.5
ASSIGN	550:1	550:5	8	v = ToLinearF [ i ] * 65535.0 + 0.5
LVAL	550:1	550:1	9	v
FIELD	550:1	550:1	10	v
LEAF_NODE	550:1	550:1	11	v
ASSIGN_OP	550:3	550:3	9	=
LEAF_NODE	550:3	550:3	10	=
RVAL	550:5	550:28	9	ToLinearF [ i ] * 65535.0 + 0.5
FIELD	550:5	550:16	10	ToLinearF [ i ]
LEAF_NODE	550:5	550:5	11	ToLinearF
LEAF_NODE	550:14	550:14	11	[
EXPR	550:15	550:15	11	i
FIELD	550:15	550:15	12	i
LEAF_NODE	550:15	550:15	13	i
LEAF_NODE	550:16	550:16	11	]
LEAF_NODE	550:17	550:17	10	*
FIELD	550:18	550:18	10	65535.0
LEAF_NODE	550:18	550:18	11	65535.0
LEAF_NODE	550:26	550:26	10	+
FIELD	550:28	550:28	10	0.5
LEAF_NODE	550:28	550:28	11	0.5
LEAF_NODE	550:31	550:31	7	;
EXPR_STATEMENT	551:1	551:50	6	ToLinear16 [ i ] = ( v > 65535.0 ) ? 65535 : ( uint16 ) v ;
EXPR	551:1	551:1	7	ToLinear16 [ i ] = ( v > 65535.0 ) ? 65535 : ( uint16 ) v
ASSIGN	551:1	551:17	8	ToLinear16 [ i ] = ( v > 65535.0 ) ? 65535 : ( uint16 ) v
LVAL	551:1	551:1	9	ToLinear16 [ i ]
FIELD	551:1	551:13	10	ToLinear16 [ i ]
LEAF_NODE	551:1	551:1	11	ToLinear16
LEAF_NODE	551:11	551:11	11	[
EXPR	551:12	551:12	11	i
FIELD	551:12	551:12	12	i
LEAF_NODE	551:12	551:12	13	i
LEAF_NODE	551:13	551:13	11	]
ASSIGN_OP	551:15	551:15	9	=
LEAF_NODE	551:15	551:15	10	=
RVAL	551:17	551:17	9	( v > 65535.0 ) ? 65535 : ( uint16 ) v
COND_EXPR	551:17	551:49	10	( v > 65535.0 ) ? 65535 : ( uint16 ) v
CONDITION	551:17	551:29	11	( v > 65535.0 )
LEAF_NODE	551:17	551:17	12	(
FIELD	551:18	551:18	12	v
LEAF_NODE	551:18	551:18	13	v
REL_OPERATOR	551:20	551:20	12	>
LEAF_NODE	551:20	551:20	13	>
FIELD	551:22	551:22	12	65535.0
LEAF_NODE	551:22	551:22	13	65535.0
LEAF_NODE	551:29	551:29	12	)
LEAF_NODE	551:31	551:31	11	?
EXPR	551:33	551:33	11	65535
FIELD	551:33	551:33	12	65535
LEAF_NODE	551:33	551:33	13	65535
LEAF_NODE	551:39	551:39	11	:
LEAF_NODE	551:41	551:41	11	(
TYPE_NAME	551:42	551:42	11	uint16
LEAF_NODE	551:42	551:42	12	uint16
LEAF_NODE	551:48	551:48	11	)
FIELD	551:49	551:49	11	v
LEAF_NODE	551:49	551:49	12	v
LEAF_NODE	551:50	551:50	7	;
EXPR_STATEMENT	552:1	552:30	6	v = ToLinearF [ i ] * 255.0 + 0.5 ;
EXPR	552:1	552:1	7	v = ToLinearF [ i ] * 255.0 + 0.5
ASSIGN	552:1	552:5	8	v = ToLinearF [ i ] * 255.0 + 0.5
LVAL	552:1	552:1	9	v
FIELD	552:1	552:1	10	v
LEAF_NODE	552:1	552:1	11	v
ASSIGN_OP	552:3	552:3	9	=
LEAF_NODE	552:3	552:3	10	=
RVAL	552:5	552:27	9	ToLinearF [ i ] * 255.0 + 0.5
FIELD	552:5	552:16	10	ToLinearF [ i ]
LEAF_NODE	552:5	552:5	11	ToLinearF
LEAF_NODE	552:14	552:14	11	[
EXPR	552:15	552:15	11	i
FIELD	552:15	552:15	12	i
LEAF_NODE	552:15	552:15	13	i
LEAF_NODE	552:16	552:16	11	]
LEAF_NODE	552:17	552:17	10	*
FIELD	552:18	552:18	10	255.0
LEAF_NODE	552:18	552:18	11	255.0
LEAF_NODE	552:25	552:25	10	+
FIELD	552:27	552:27	10	0.5
LEAF_NODE	552:27	552:27	11	0.5
LEAF_NODE	552:30	552:30	7	;
EXPR_STATEMENT	553:1	553:53	6	ToLinear8 [ i ] = ( v > 255.0 ) ? 255 : ( unsigned char ) v ;
EXPR	553:1	553:1	7	ToLinear8 [ i ] = ( v > 255.0 ) ? 255 : ( unsigned char ) v
ASSIGN	553:1	553:17	8	ToLinear8 [ i ] = ( v > 255.0 ) ? 255 : ( unsigned char ) v
LVAL	553:1	553:1	9	ToLinear8 [ i ]
FIELD	553:1	553:12	10	ToLinear8 [ i ]
LEAF_NODE	553:1	553:1	11	ToLinear8
LEAF_NODE	553:10	553:10	11	[
EXPR	553:11	553:11	11	i
FIELD	553:11	553:11	12	i
LEAF_NODE	553:11	553:11	13	i
LEAF_NODE	553:12	553:12	11	]
ASSIGN_OP	553:15	553:15	9	=
LEAF_NODE	553:15	553:15	10	=
RVAL	553:17	553:17	9	( v > 255.0 ) ? 255 : ( unsigned char ) v
COND_EXPR	553:17	553:52	10	( v > 255.0 ) ? 255 : ( unsigned char ) v
CONDITION	553:17	553:27	11	( v > 255.0 )
LEAF_NODE	553:17	553:17	12	(
FIELD	553:18	553:18	12	v
LEAF_NODE	553:18	553:18	13	v
REL_OPERATOR	553:20	553:20	12	>
LEAF_NODE	553:20	553:20	13	>
FIELD	553:22	553:22	12	255.0
LEAF_NODE	553:22	553:22	13	255.0
LEAF_NODE	553:27	553:27	12	)
LEAF_NODE	553:29	553:29	11	?
EXPR	553:31	553:31	11	255
FIELD	553:31	553:31	12	255
LEAF_NODE	553:31	553:31	13	255
LEAF_NODE	553:35	553:35	11	:
LEAF_NODE	553:37	553:37	11	(
TYPE_NAME	553:38	553:47	11	unsigned char
LEAF_NODE	553:38	553:38	12	unsigned
LEAF_NODE	553:47	553:47	12	char
LEAF_NODE	553:51	553:51	11	)
FIELD	553:52	553:52	11	v
LEAF_NODE	553:52	553:52	12	v
LEAF_NODE	553:53	553:53	7	;
LEAF_NODE	554:4	554:4	5	}
EXPR_STATEMENT	556:4	556:9	3	j = 0 ;
EXPR	556:4	556:4	4	j = 0
ASSIGN	556:4	556:8	5	j = 0
LVAL	556:4	556:4	6	j
FIELD	556:4	556:4	7	j
LEAF_NODE	556:4	556:4	8	j
ASSIGN_OP	556:6	556:6	6	=
LEAF_NODE	556:6	556:6	7	=
RVAL	556:8	556:8	6	0
FIELD	556:8	556:8	7	0
LEAF_NODE	556:8	556:8	8	0
LEAF_NODE	556:9	556:9	4	;
ITERATION	557:4	557:35	3	
KEYWORD	557:4	557:4	4	for
LEAF_NODE	557:4	557:4	5	for
LEAF_NODE	557:8	557:8	4	(
FOR_INIT	557:9	557:14	4	i = 0 ;
EXPR	557:9	557:9	5	i = 0
ASSIGN	557:9	557:13	6	i = 0
LVAL	557:9	557:9	7	i
FIELD	557:9	557:9	8	i
LEAF_NODE	557:9	557:9	9	i
ASSIGN_OP	557:11	557:11	7	=
LEAF_NODE	557:11	557:11	8	=
RVAL	557:13	557:13	7	0
FIELD	557:13	557:13	8	0
LEAF_NODE	557:13	557:13	9	0
LEAF_NODE	557:14	557:14	5	;
CONDITION	557:16	557:16	4	i < lt2size
EXPR	557:16	557:20	5	i < lt2size
FIELD	557:16	557:16	6	i
LEAF_NODE	557:16	557:16	7	i
REL_OPERATOR	557:18	557:18	6	<
LEAF_NODE	557:18	557:18	7	<
FIELD	557:20	557:20	6	lt2size
LEAF_NODE	557:20	557:20	7	lt2size
LEAF_NODE	557:27	557:27	4	;
FOR_EXPR	557:29	557:29	4	i ++
EXPR	557:29	557:29	5	i ++
FIELD	557:29	557:30	6	i ++
LEAF_NODE	557:29	557:29	7	i
LEAF_NODE	557:30	557:30	7	++
LEAF_NODE	557:32	557:32	4	)
STATEMENTS	557:35	561:4	4	
LEAF_NODE	557:35	557:35	5	{
STATEMENTS	558:1	560:1	5	
SELECTION	558:1	559:5	6	
KEYWORD	558:1	558:1	7	if
LEAF_NODE	558:1	558:1	8	if
LEAF_NODE	558:4	558:4	7	(
CONDITION	558:5	558:5	7	( i * linstep ) * ( i * linstep ) > ToLinearF [ j ] * ToLinearF [ j + 1 ]
EXPR	558:5	558:44	8	( i * linstep ) * ( i * linstep ) > ToLinearF [ j ] * ToLinearF [ j + 1 ]
LEAF_NODE	558:5	558:5	9	(
FIELD	558:6	558:6	9	i
LEAF_NODE	558:6	558:6	10	i
LEAF_NODE	558:7	558:7	9	*
FIELD	558:8	558:8	9	linstep
LEAF_NODE	558:8	558:8	10	linstep
LEAF_NODE	558:15	558:15	9	)
LEAF_NODE	558:16	558:16	9	*
LEAF_NODE	558:17	558:17	9	(
FIELD	558:18	558:18	9	i
LEAF_NODE	558:18	558:18	10	i
LEAF_NODE	558:19	558:19	9	*
FIELD	558:20	558:20	9	linstep
LEAF_NODE	558:20	558:20	10	linstep
LEAF_NODE	558:27	558:27	9	)
REL_OPERATOR	558:29	558:29	9	>
LEAF_NODE	558:29	558:29	10	>
FIELD	558:31	558:42	9	ToLinearF [ j ]
LEAF_NODE	558:31	558:31	10	ToLinearF
LEAF_NODE	558:40	558:40	10	[
EXPR	558:41	558:41	10	j
FIELD	558:41	558:41	11	j
LEAF_NODE	558:41	558:41	12	j
LEAF_NODE	558:42	558:42	10	]
LEAF_NODE	558:43	558:43	9	*
FIELD	558:44	558:57	9	ToLinearF [ j + 1 ]
LEAF_NODE	558:44	558:44	10	ToLinearF
LEAF_NODE	558:53	558:53	10	[
EXPR	558:54	558:56	10	j + 1
FIELD	558:54	558:54	11	j
LEAF_NODE	558:54	558:54	12	j
LEAF_NODE	558:55	558:55	11	+
FIELD	558:56	558:56	11	1
LEAF_NODE	558:56	558:56	12	1
LEAF_NODE	558:57	558:57	10	]
LEAF_NODE	558:58	558:58	7	)
STATEMENTS	559:5	559:5	7	
EXPR_STATEMENT	559:5	559:8	8	j ++ ;
EXPR	559:5	559:5	9	j ++
FIELD	559:5	559:6	10	j ++
LEAF_NODE	559:5	559:5	11	j
LEAF_NODE	559:6	559:6	11	++
LEAF_NODE	559:8	559:8	9	;
EXPR_STATEMENT	560:1	560:23	6	FromLT2 [ i ] = ( uint16 ) j ;
EXPR	560:1	560:1	7	FromLT2 [ i ] = ( uint16 ) j
ASSIGN	560:1	560:14	8	FromLT2 [ i ] = ( uint16 ) j
LVAL	560:1	560:1	9	FromLT2 [ i ]
FIELD	560:1	560:10	10	FromLT2 [ i ]
LEAF_NODE	560:1	560:1	11	FromLT2
LEAF_NODE	560:8	560:8	11	[
EXPR	560:9	560:9	11	i
FIELD	560:9	560:9	12	i
LEAF_NODE	560:9	560:9	13	i
LEAF_NODE	560:10	560:10	11	]
ASSIGN_OP	560:12	560:12	9	=
LEAF_NODE	560:12	560:12	10	=
RVAL	560:14	560:22	9	( uint16 ) j
LEAF_NODE	560:14	560:14	10	(
TYPE_NAME	560:15	560:15	10	uint16
LEAF_NODE	560:15	560:15	11	uint16
LEAF_NODE	560:21	560:21	10	)
FIELD	560:22	560:22	10	j
LEAF_NODE	560:22	560:22	11	j
LEAF_NODE	560:23	560:23	7	;
LEAF_NODE	561:4	561:4	5	}
EXPR_STATEMENT	568:4	568:9	3	j = 0 ;
EXPR	568:4	568:4	4	j = 0
ASSIGN	568:4	568:8	5	j = 0
LVAL	568:4	568:4	6	j
FIELD	568:4	568:4	7	j
LEAF_NODE	568:4	568:4	8	j
ASSIGN_OP	568:6	568:6	6	=
LEAF_NODE	568:6	568:6	7	=
RVAL	568:8	568:8	6	0
FIELD	568:8	568:8	7	0
LEAF_NODE	568:8	568:8	8	0
LEAF_NODE	568:9	568:9	4	;
ITERATION	569:4	569:33	3	
KEYWORD	569:4	569:4	4	for
LEAF_NODE	569:4	569:4	5	for
LEAF_NODE	569:8	569:8	4	(
FOR_INIT	569:9	569:14	4	i = 0 ;
EXPR	569:9	569:9	5	i = 0
ASSIGN	569:9	569:13	6	i = 0
LVAL	569:9	569:9	7	i
FIELD	569:9	569:9	8	i
LEAF_NODE	569:9	569:9	9	i
ASSIGN_OP	569:11	569:11	7	=
LEAF_NODE	569:11	569:11	8	=
RVAL	569:13	569:13	7	0
FIELD	569:13	569:13	8	0
LEAF_NODE	569:13	569:13	9	0
LEAF_NODE	569:14	569:14	5	;
CONDITION	569:16	569:16	4	i < 16384
EXPR	569:16	569:20	5	i < 16384
FIELD	569:16	569:16	6	i
LEAF_NODE	569:16	569:16	7	i
REL_OPERATOR	569:18	569:18	6	<
LEAF_NODE	569:18	569:18	7	<
FIELD	569:20	569:20	6	16384
LEAF_NODE	569:20	569:20	7	16384
LEAF_NODE	569:25	569:25	4	;
FOR_EXPR	569:27	569:27	4	i ++
EXPR	569:27	569:27	5	i ++
FIELD	569:27	569:28	6	i ++
LEAF_NODE	569:27	569:27	7	i
LEAF_NODE	569:28	569:28	7	++
LEAF_NODE	569:30	569:30	4	)
STATEMENTS	569:33	573:4	4	
LEAF_NODE	569:33	569:33	5	{
STATEMENTS	570:1	572:1	5	
ITERATION	570:1	571:5	6	
KEYWORD	570:1	570:1	7	while
LEAF_NODE	570:1	570:1	8	while
LEAF_NODE	570:7	570:7	7	(
CONDITION	570:8	570:8	7	( i / 16383. ) * ( i / 16383. ) > ToLinearF [ j ] * ToLinearF [ j + 1 ]
EXPR	570:8	570:45	8	( i / 16383. ) * ( i / 16383. ) > ToLinearF [ j ] * ToLinearF [ j + 1 ]
LEAF_NODE	570:8	570:8	9	(
FIELD	570:9	570:9	9	i
LEAF_NODE	570:9	570:9	10	i
LEAF_NODE	570:10	570:10	9	/
FIELD	570:11	570:11	9	16383.
LEAF_NODE	570:11	570:11	10	16383.
LEAF_NODE	570:17	570:17	9	)
LEAF_NODE	570:18	570:18	9	*
LEAF_NODE	570:19	570:19	9	(
FIELD	570:20	570:20	9	i
LEAF_NODE	570:20	570:20	10	i
LEAF_NODE	570:21	570:21	9	/
FIELD	570:22	570:22	9	16383.
LEAF_NODE	570:22	570:22	10	16383.
LEAF_NODE	570:28	570:28	9	)
REL_OPERATOR	570:30	570:30	9	>
LEAF_NODE	570:30	570:30	10	>
FIELD	570:32	570:43	9	ToLinearF [ j ]
LEAF_NODE	570:32	570:32	10	ToLinearF
LEAF_NODE	570:41	570:41	10	[
EXPR	570:42	570:42	10	j
FIELD	570:42	570:42	11	j
LEAF_NODE	570:42	570:42	12	j
LEAF_NODE	570:43	570:43	10	]
LEAF_NODE	570:44	570:44	9	*
FIELD	570:45	570:58	9	ToLinearF [ j + 1 ]
LEAF_NODE	570:45	570:45	10	ToLinearF
LEAF_NODE	570:54	570:54	10	[
EXPR	570:55	570:57	10	j + 1
FIELD	570:55	570:55	11	j
LEAF_NODE	570:55	570:55	12	j
LEAF_NODE	570:56	570:56	11	+
FIELD	570:57	570:57	11	1
LEAF_NODE	570:57	570:57	12	1
LEAF_NODE	570:58	570:58	10	]
LEAF_NODE	570:59	570:59	7	)
STATEMENTS	571:5	571:5	7	
EXPR_STATEMENT	571:5	571:8	8	j ++ ;
EXPR	571:5	571:5	9	j ++
FIELD	571:5	571:6	10	j ++
LEAF_NODE	571:5	571:5	11	j
LEAF_NODE	571:6	571:6	11	++
LEAF_NODE	571:8	571:8	9	;
EXPR_STATEMENT	572:1	572:22	6	From14 [ i ] = ( uint16 ) j ;
EXPR	572:1	572:1	7	From14 [ i ] = ( uint16 ) j
ASSIGN	572:1	572:13	8	From14 [ i ] = ( uint16 ) j
LVAL	572:1	572:1	9	From14 [ i ]
FIELD	572:1	572:9	10	From14 [ i ]
LEAF_NODE	572:1	572:1	11	From14
LEAF_NODE	572:7	572:7	11	[
EXPR	572:8	572:8	11	i
FIELD	572:8	572:8	12	i
LEAF_NODE	572:8	572:8	13	i
LEAF_NODE	572:9	572:9	11	]
ASSIGN_OP	572:11	572:11	9	=
LEAF_NODE	572:11	572:11	10	=
RVAL	572:13	572:21	9	( uint16 ) j
LEAF_NODE	572:13	572:13	10	(
TYPE_NAME	572:14	572:14	10	uint16
LEAF_NODE	572:14	572:14	11	uint16
LEAF_NODE	572:20	572:20	10	)
FIELD	572:21	572:21	10	j
LEAF_NODE	572:21	572:21	11	j
LEAF_NODE	572:22	572:22	7	;
LEAF_NODE	573:4	573:4	5	}
EXPR_STATEMENT	575:4	575:9	3	j = 0 ;
EXPR	575:4	575:4	4	j = 0
ASSIGN	575:4	575:8	5	j = 0
LVAL	575:4	575:4	6	j
FIELD	575:4	575:4	7	j
LEAF_NODE	575:4	575:4	8	j
ASSIGN_OP	575:6	575:6	6	=
LEAF_NODE	575:6	575:6	7	=
RVAL	575:8	575:8	6	0
FIELD	575:8	575:8	7	0
LEAF_NODE	575:8	575:8	8	0
LEAF_NODE	575:9	575:9	4	;
ITERATION	576:4	576:31	3	
KEYWORD	576:4	576:4	4	for
LEAF_NODE	576:4	576:4	5	for
LEAF_NODE	576:8	576:8	4	(
FOR_INIT	576:9	576:14	4	i = 0 ;
EXPR	576:9	576:9	5	i = 0
ASSIGN	576:9	576:13	6	i = 0
LVAL	576:9	576:9	7	i
FIELD	576:9	576:9	8	i
LEAF_NODE	576:9	576:9	9	i
ASSIGN_OP	576:11	576:11	7	=
LEAF_NODE	576:11	576:11	8	=
RVAL	576:13	576:13	7	0
FIELD	576:13	576:13	8	0
LEAF_NODE	576:13	576:13	9	0
LEAF_NODE	576:14	576:14	5	;
CONDITION	576:16	576:16	4	i < 256
EXPR	576:16	576:20	5	i < 256
FIELD	576:16	576:16	6	i
LEAF_NODE	576:16	576:16	7	i
REL_OPERATOR	576:18	576:18	6	<
LEAF_NODE	576:18	576:18	7	<
FIELD	576:20	576:20	6	256
LEAF_NODE	576:20	576:20	7	256
LEAF_NODE	576:23	576:23	4	;
FOR_EXPR	576:25	576:25	4	i ++
EXPR	576:25	576:25	5	i ++
FIELD	576:25	576:26	6	i ++
LEAF_NODE	576:25	576:25	7	i
LEAF_NODE	576:26	576:26	7	++
LEAF_NODE	576:28	576:28	4	)
STATEMENTS	576:31	580:4	4	
LEAF_NODE	576:31	576:31	5	{
STATEMENTS	577:1	579:1	5	
ITERATION	577:1	578:5	6	
KEYWORD	577:1	577:1	7	while
LEAF_NODE	577:1	577:1	8	while
LEAF_NODE	577:7	577:7	7	(
CONDITION	577:8	577:8	7	( i / 255. ) * ( i / 255. ) > ToLinearF [ j ] * ToLinearF [ j + 1 ]
EXPR	577:8	577:41	8	( i / 255. ) * ( i / 255. ) > ToLinearF [ j ] * ToLinearF [ j + 1 ]
LEAF_NODE	577:8	577:8	9	(
FIELD	577:9	577:9	9	i
LEAF_NODE	577:9	577:9	10	i
LEAF_NODE	577:10	577:10	9	/
FIELD	577:11	577:11	9	255.
LEAF_NODE	577:11	577:11	10	255.
LEAF_NODE	577:15	577:15	9	)
LEAF_NODE	577:16	577:16	9	*
LEAF_NODE	577:17	577:17	9	(
FIELD	577:18	577:18	9	i
LEAF_NODE	577:18	577:18	10	i
LEAF_NODE	577:19	577:19	9	/
FIELD	577:20	577:20	9	255.
LEAF_NODE	577:20	577:20	10	255.
LEAF_NODE	577:24	577:24	9	)
REL_OPERATOR	577:26	577:26	9	>
LEAF_NODE	577:26	577:26	10	>
FIELD	577:28	577:39	9	ToLinearF [ j ]
LEAF_NODE	577:28	577:28	10	ToLinearF
LEAF_NODE	577:37	577:37	10	[
EXPR	577:38	577:38	10	j
FIELD	577:38	577:38	11	j
LEAF_NODE	577:38	577:38	12	j
LEAF_NODE	577:39	577:39	10	]
LEAF_NODE	577:40	577:40	9	*
FIELD	577:41	577:54	9	ToLinearF [ j + 1 ]
LEAF_NODE	577:41	577:41	10	ToLinearF
LEAF_NODE	577:50	577:50	10	[
EXPR	577:51	577:53	10	j + 1
FIELD	577:51	577:51	11	j
LEAF_NODE	577:51	577:51	12	j
LEAF_NODE	577:52	577:52	11	+
FIELD	577:53	577:53	11	1
LEAF_NODE	577:53	577:53	12	1
LEAF_NODE	577:54	577:54	10	]
LEAF_NODE	577:55	577:55	7	)
STATEMENTS	578:5	578:5	7	
EXPR_STATEMENT	578:5	578:8	8	j ++ ;
EXPR	578:5	578:5	9	j ++
FIELD	578:5	578:6	10	j ++
LEAF_NODE	578:5	578:5	11	j
LEAF_NODE	578:6	578:6	11	++
LEAF_NODE	578:8	578:8	9	;
EXPR_STATEMENT	579:1	579:21	6	From8 [ i ] = ( uint16 ) j ;
EXPR	579:1	579:1	7	From8 [ i ] = ( uint16 ) j
ASSIGN	579:1	579:12	8	From8 [ i ] = ( uint16 ) j
LVAL	579:1	579:1	9	From8 [ i ]
FIELD	579:1	579:8	10	From8 [ i ]
LEAF_NODE	579:1	579:1	11	From8
LEAF_NODE	579:6	579:6	11	[
EXPR	579:7	579:7	11	i
FIELD	579:7	579:7	12	i
LEAF_NODE	579:7	579:7	13	i
LEAF_NODE	579:8	579:8	11	]
ASSIGN_OP	579:10	579:10	9	=
LEAF_NODE	579:10	579:10	10	=
RVAL	579:12	579:20	9	( uint16 ) j
LEAF_NODE	579:12	579:12	10	(
TYPE_NAME	579:13	579:13	10	uint16
LEAF_NODE	579:13	579:13	11	uint16
LEAF_NODE	579:19	579:19	10	)
FIELD	579:20	579:20	10	j
LEAF_NODE	579:20	579:20	11	j
LEAF_NODE	579:21	579:21	7	;
LEAF_NODE	580:4	580:4	5	}
EXPR_STATEMENT	582:4	582:32	3	Fltsize = ( float ) ( lt2size / 2 ) ;
EXPR	582:4	582:4	4	Fltsize = ( float ) ( lt2size / 2 )
ASSIGN	582:4	582:14	5	Fltsize = ( float ) ( lt2size / 2 )
LVAL	582:4	582:4	6	Fltsize
FIELD	582:4	582:4	7	Fltsize
LEAF_NODE	582:4	582:4	8	Fltsize
ASSIGN_OP	582:12	582:12	6	=
LEAF_NODE	582:12	582:12	7	=
RVAL	582:14	582:31	6	( float ) ( lt2size / 2 )
LEAF_NODE	582:14	582:14	7	(
TYPE_NAME	582:15	582:15	7	float
LEAF_NODE	582:15	582:15	8	float
LEAF_NODE	582:20	582:20	7	)
LEAF_NODE	582:21	582:21	7	(
FIELD	582:22	582:22	7	lt2size
LEAF_NODE	582:22	582:22	8	lt2size
LEAF_NODE	582:29	582:29	7	/
FIELD	582:30	582:30	7	2
LEAF_NODE	582:30	582:30	8	2
LEAF_NODE	582:31	582:31	7	)
LEAF_NODE	582:32	582:32	4	;
EXPR_STATEMENT	584:4	584:29	3	sp -> ToLinearF = ToLinearF ;
EXPR	584:4	584:4	4	sp -> ToLinearF = ToLinearF
ASSIGN	584:4	584:20	5	sp -> ToLinearF = ToLinearF
LVAL	584:4	584:4	6	sp -> ToLinearF
FIELD	584:4	584:8	7	sp -> ToLinearF
LEAF_NODE	584:4	584:4	8	sp
LEAF_NODE	584:6	584:6	8	->
LEAF_NODE	584:8	584:8	8	ToLinearF
ASSIGN_OP	584:18	584:18	6	=
LEAF_NODE	584:18	584:18	7	=
RVAL	584:20	584:20	6	ToLinearF
FIELD	584:20	584:20	7	ToLinearF
LEAF_NODE	584:20	584:20	8	ToLinearF
LEAF_NODE	584:29	584:29	4	;
EXPR_STATEMENT	585:4	585:31	3	sp -> ToLinear16 = ToLinear16 ;
EXPR	585:4	585:4	4	sp -> ToLinear16 = ToLinear16
ASSIGN	585:4	585:21	5	sp -> ToLinear16 = ToLinear16
LVAL	585:4	585:4	6	sp -> ToLinear16
FIELD	585:4	585:8	7	sp -> ToLinear16
LEAF_NODE	585:4	585:4	8	sp
LEAF_NODE	585:6	585:6	8	->
LEAF_NODE	585:8	585:8	8	ToLinear16
ASSIGN_OP	585:19	585:19	6	=
LEAF_NODE	585:19	585:19	7	=
RVAL	585:21	585:21	6	ToLinear16
FIELD	585:21	585:21	7	ToLinear16
LEAF_NODE	585:21	585:21	8	ToLinear16
LEAF_NODE	585:31	585:31	4	;
EXPR_STATEMENT	586:4	586:29	3	sp -> ToLinear8 = ToLinear8 ;
EXPR	586:4	586:4	4	sp -> ToLinear8 = ToLinear8
ASSIGN	586:4	586:20	5	sp -> ToLinear8 = ToLinear8
LVAL	586:4	586:4	6	sp -> ToLinear8
FIELD	586:4	586:8	7	sp -> ToLinear8
LEAF_NODE	586:4	586:4	8	sp
LEAF_NODE	586:6	586:6	8	->
LEAF_NODE	586:8	586:8	8	ToLinear8
ASSIGN_OP	586:18	586:18	6	=
LEAF_NODE	586:18	586:18	7	=
RVAL	586:20	586:20	6	ToLinear8
FIELD	586:20	586:20	7	ToLinear8
LEAF_NODE	586:20	586:20	8	ToLinear8
LEAF_NODE	586:29	586:29	4	;
EXPR_STATEMENT	587:4	587:25	3	sp -> FromLT2 = FromLT2 ;
EXPR	587:4	587:4	4	sp -> FromLT2 = FromLT2
ASSIGN	587:4	587:18	5	sp -> FromLT2 = FromLT2
LVAL	587:4	587:4	6	sp -> FromLT2
FIELD	587:4	587:8	7	sp -> FromLT2
LEAF_NODE	587:4	587:4	8	sp
LEAF_NODE	587:6	587:6	8	->
LEAF_NODE	587:8	587:8	8	FromLT2
ASSIGN_OP	587:16	587:16	6	=
LEAF_NODE	587:16	587:16	7	=
RVAL	587:18	587:18	6	FromLT2
FIELD	587:18	587:18	7	FromLT2
LEAF_NODE	587:18	587:18	8	FromLT2
LEAF_NODE	587:25	587:25	4	;
EXPR_STATEMENT	588:4	588:23	3	sp -> From14 = From14 ;
EXPR	588:4	588:4	4	sp -> From14 = From14
ASSIGN	588:4	588:17	5	sp -> From14 = From14
LVAL	588:4	588:4	6	sp -> From14
FIELD	588:4	588:8	7	sp -> From14
LEAF_NODE	588:4	588:4	8	sp
LEAF_NODE	588:6	588:6	8	->
LEAF_NODE	588:8	588:8	8	From14
ASSIGN_OP	588:15	588:15	6	=
LEAF_NODE	588:15	588:15	7	=
RVAL	588:17	588:17	6	From14
FIELD	588:17	588:17	7	From14
LEAF_NODE	588:17	588:17	8	From14
LEAF_NODE	588:23	588:23	4	;
EXPR_STATEMENT	589:4	589:21	3	sp -> From8 = From8 ;
EXPR	589:4	589:4	4	sp -> From8 = From8
ASSIGN	589:4	589:16	5	sp -> From8 = From8
LVAL	589:4	589:4	6	sp -> From8
FIELD	589:4	589:8	7	sp -> From8
LEAF_NODE	589:4	589:4	8	sp
LEAF_NODE	589:6	589:6	8	->
LEAF_NODE	589:8	589:8	8	From8
ASSIGN_OP	589:14	589:14	6	=
LEAF_NODE	589:14	589:14	7	=
RVAL	589:16	589:16	6	From8
FIELD	589:16	589:16	7	From8
LEAF_NODE	589:16	589:16	8	From8
LEAF_NODE	589:21	589:21	4	;
JUMP_STATEMENT	591:4	591:12	3	return 1 ;
KEYWORD	591:4	591:4	4	return
LEAF_NODE	591:4	591:4	5	return
DESTINATION	591:11	591:11	4	1
EXPR	591:11	591:11	5	1
FIELD	591:11	591:11	6	1
LEAF_NODE	591:11	591:11	7	1
LEAF_NODE	591:12	591:12	4	;
LEAF_NODE	592:0	592:0	2	}
FUNCTION_DEF	602:0	635:0	1	
RETURN_TYPE	602:0	602:7	2	static int
LEAF_NODE	602:0	602:0	3	static
TYPE_NAME	602:7	602:7	3	int
LEAF_NODE	602:7	602:7	4	int
FUNCTION_NAME	603:0	603:0	2	PixarLogGuessDataFmt
LEAF_NODE	603:0	603:0	3	PixarLogGuessDataFmt
PARAMETER_LIST	603:20	603:38	2	( TIFFDirectory * td )
LEAF_NODE	603:20	603:20	3	(
PARAMETER_DECL	603:21	603:36	3	TIFFDirectory * td
TYPE	603:21	603:35	4	TIFFDirectory *
TYPE_NAME	603:21	603:21	5	TIFFDirectory
LEAF_NODE	603:21	603:21	6	TIFFDirectory
POINTER	603:35	603:35	5	*
LEAF_NODE	603:35	603:35	6	*
NAME	603:36	603:36	4	td
LEAF_NODE	603:36	603:36	5	td
LEAF_NODE	603:38	603:38	3	)
LEAF_NODE	604:0	604:0	2	{
STATEMENTS	605:1	634:1	2	
SIMPLE_DECL	605:1	605:36	3	int guess ; guess = PIXARLOGDATAFMT_UNKNOWN ;
VAR_DECL	605:1	605:5	4	int guess ; guess = PIXARLOGDATAFMT_UNKNOWN
TYPE	605:1	605:1	5	int
TYPE_NAME	605:1	605:1	6	int
LEAF_NODE	605:1	605:1	7	int
NAME	605:5	605:5	5	guess
LEAF_NODE	605:5	605:5	6	guess
LEAF_NODE	0:0	0:0	5	;
INIT	605:5	605:5	5	guess = PIXARLOGDATAFMT_UNKNOWN
ASSIGN	605:5	605:13	6	guess = PIXARLOGDATAFMT_UNKNOWN
LVAL	605:5	605:5	7	guess
NAME	605:5	605:5	8	guess
LEAF_NODE	605:5	605:5	9	guess
ASSIGN_OP	605:11	605:11	7	=
LEAF_NODE	605:11	605:11	8	=
RVAL	605:13	605:13	7	PIXARLOGDATAFMT_UNKNOWN
FIELD	605:13	605:13	8	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	605:13	605:13	9	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	605:36	605:36	4	;
SIMPLE_DECL	606:1	606:33	3	int format ; format = td -> td_sampleformat ;
VAR_DECL	606:1	606:5	4	int format ; format = td -> td_sampleformat
TYPE	606:1	606:1	5	int
TYPE_NAME	606:1	606:1	6	int
LEAF_NODE	606:1	606:1	7	int
NAME	606:5	606:5	5	format
LEAF_NODE	606:5	606:5	6	format
LEAF_NODE	0:0	0:0	5	;
INIT	606:5	606:5	5	format = td -> td_sampleformat
ASSIGN	606:5	606:14	6	format = td -> td_sampleformat
LVAL	606:5	606:5	7	format
NAME	606:5	606:5	8	format
LEAF_NODE	606:5	606:5	9	format
ASSIGN_OP	606:12	606:12	7	=
LEAF_NODE	606:12	606:12	8	=
RVAL	606:14	606:14	7	td -> td_sampleformat
FIELD	606:14	606:18	8	td -> td_sampleformat
LEAF_NODE	606:14	606:14	9	td
LEAF_NODE	606:16	606:16	9	->
LEAF_NODE	606:18	606:18	9	td_sampleformat
LEAF_NODE	606:33	606:33	4	;
SELECTION	611:1	611:31	3	
KEYWORD	611:1	611:1	4	switch
LEAF_NODE	611:1	611:1	5	switch
LEAF_NODE	611:8	611:8	4	(
CONDITION	611:9	611:9	4	td -> td_bitspersample
EXPR	611:9	611:9	5	td -> td_bitspersample
FIELD	611:9	611:13	6	td -> td_bitspersample
LEAF_NODE	611:9	611:9	7	td
LEAF_NODE	611:11	611:11	7	->
LEAF_NODE	611:13	611:13	7	td_bitspersample
LEAF_NODE	611:29	611:29	4	)
STATEMENTS	611:31	632:1	4	
LEAF_NODE	611:31	611:31	5	{
STATEMENTS	612:2	631:2	5	
LABEL	612:2	612:9	6	case 32 :
LEAF_NODE	612:2	612:2	7	case
LEAF_NODE	612:7	612:7	7	32
LEAF_NODE	612:9	612:9	7	:
SELECTION	613:2	614:3	6	
KEYWORD	613:2	613:2	7	if
LEAF_NODE	613:2	613:2	8	if
LEAF_NODE	613:5	613:5	7	(
CONDITION	613:6	613:6	7	format == SAMPLEFORMAT_IEEEFP
EXPR	613:6	613:16	8	format == SAMPLEFORMAT_IEEEFP
FIELD	613:6	613:6	9	format
LEAF_NODE	613:6	613:6	10	format
EQ_OPERATOR	613:13	613:13	9	==
LEAF_NODE	613:13	613:13	10	==
FIELD	613:16	613:16	9	SAMPLEFORMAT_IEEEFP
LEAF_NODE	613:16	613:16	10	SAMPLEFORMAT_IEEEFP
LEAF_NODE	613:35	613:35	7	)
STATEMENTS	614:3	614:3	7	
EXPR_STATEMENT	614:3	614:32	8	guess = PIXARLOGDATAFMT_FLOAT ;
EXPR	614:3	614:3	9	guess = PIXARLOGDATAFMT_FLOAT
ASSIGN	614:3	614:11	10	guess = PIXARLOGDATAFMT_FLOAT
LVAL	614:3	614:3	11	guess
FIELD	614:3	614:3	12	guess
LEAF_NODE	614:3	614:3	13	guess
ASSIGN_OP	614:9	614:9	11	=
LEAF_NODE	614:9	614:9	12	=
RVAL	614:11	614:11	11	PIXARLOGDATAFMT_FLOAT
FIELD	614:11	614:11	12	PIXARLOGDATAFMT_FLOAT
LEAF_NODE	614:11	614:11	13	PIXARLOGDATAFMT_FLOAT
LEAF_NODE	614:32	614:32	9	;
JUMP_STATEMENT	615:2	615:7	6	break DESTINATION ;
KEYWORD	615:2	615:2	7	break
LEAF_NODE	615:2	615:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	615:7	615:7	7	;
LABEL	616:2	616:9	6	case 16 :
LEAF_NODE	616:2	616:2	7	case
LEAF_NODE	616:7	616:7	7	16
LEAF_NODE	616:9	616:9	7	:
SELECTION	617:2	618:3	6	
KEYWORD	617:2	617:2	7	if
LEAF_NODE	617:2	617:2	8	if
LEAF_NODE	617:5	617:5	7	(
CONDITION	617:6	617:6	7	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_UINT
EXPR	617:6	617:6	8	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_UINT
OR	617:6	617:37	9	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_UINT
EXPR	617:6	617:16	10	format == SAMPLEFORMAT_VOID
FIELD	617:6	617:6	11	format
LEAF_NODE	617:6	617:6	12	format
EQ_OPERATOR	617:13	617:13	11	==
LEAF_NODE	617:13	617:13	12	==
FIELD	617:16	617:16	11	SAMPLEFORMAT_VOID
LEAF_NODE	617:16	617:16	12	SAMPLEFORMAT_VOID
LEAF_NODE	617:34	617:34	10	||
EXPR	617:37	617:47	10	format == SAMPLEFORMAT_UINT
FIELD	617:37	617:37	11	format
LEAF_NODE	617:37	617:37	12	format
EQ_OPERATOR	617:44	617:44	11	==
LEAF_NODE	617:44	617:44	12	==
FIELD	617:47	617:47	11	SAMPLEFORMAT_UINT
LEAF_NODE	617:47	617:47	12	SAMPLEFORMAT_UINT
LEAF_NODE	617:64	617:64	7	)
STATEMENTS	618:3	618:3	7	
EXPR_STATEMENT	618:3	618:32	8	guess = PIXARLOGDATAFMT_16BIT ;
EXPR	618:3	618:3	9	guess = PIXARLOGDATAFMT_16BIT
ASSIGN	618:3	618:11	10	guess = PIXARLOGDATAFMT_16BIT
LVAL	618:3	618:3	11	guess
FIELD	618:3	618:3	12	guess
LEAF_NODE	618:3	618:3	13	guess
ASSIGN_OP	618:9	618:9	11	=
LEAF_NODE	618:9	618:9	12	=
RVAL	618:11	618:11	11	PIXARLOGDATAFMT_16BIT
FIELD	618:11	618:11	12	PIXARLOGDATAFMT_16BIT
LEAF_NODE	618:11	618:11	13	PIXARLOGDATAFMT_16BIT
LEAF_NODE	618:32	618:32	9	;
JUMP_STATEMENT	619:2	619:7	6	break DESTINATION ;
KEYWORD	619:2	619:2	7	break
LEAF_NODE	619:2	619:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	619:7	619:7	7	;
LABEL	620:2	620:9	6	case 12 :
LEAF_NODE	620:2	620:2	7	case
LEAF_NODE	620:7	620:7	7	12
LEAF_NODE	620:9	620:9	7	:
SELECTION	621:2	622:3	6	
KEYWORD	621:2	621:2	7	if
LEAF_NODE	621:2	621:2	8	if
LEAF_NODE	621:5	621:5	7	(
CONDITION	621:6	621:6	7	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_INT
EXPR	621:6	621:6	8	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_INT
OR	621:6	621:37	9	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_INT
EXPR	621:6	621:16	10	format == SAMPLEFORMAT_VOID
FIELD	621:6	621:6	11	format
LEAF_NODE	621:6	621:6	12	format
EQ_OPERATOR	621:13	621:13	11	==
LEAF_NODE	621:13	621:13	12	==
FIELD	621:16	621:16	11	SAMPLEFORMAT_VOID
LEAF_NODE	621:16	621:16	12	SAMPLEFORMAT_VOID
LEAF_NODE	621:34	621:34	10	||
EXPR	621:37	621:47	10	format == SAMPLEFORMAT_INT
FIELD	621:37	621:37	11	format
LEAF_NODE	621:37	621:37	12	format
EQ_OPERATOR	621:44	621:44	11	==
LEAF_NODE	621:44	621:44	12	==
FIELD	621:47	621:47	11	SAMPLEFORMAT_INT
LEAF_NODE	621:47	621:47	12	SAMPLEFORMAT_INT
LEAF_NODE	621:63	621:63	7	)
STATEMENTS	622:3	622:3	7	
EXPR_STATEMENT	622:3	622:37	8	guess = PIXARLOGDATAFMT_12BITPICIO ;
EXPR	622:3	622:3	9	guess = PIXARLOGDATAFMT_12BITPICIO
ASSIGN	622:3	622:11	10	guess = PIXARLOGDATAFMT_12BITPICIO
LVAL	622:3	622:3	11	guess
FIELD	622:3	622:3	12	guess
LEAF_NODE	622:3	622:3	13	guess
ASSIGN_OP	622:9	622:9	11	=
LEAF_NODE	622:9	622:9	12	=
RVAL	622:11	622:11	11	PIXARLOGDATAFMT_12BITPICIO
FIELD	622:11	622:11	12	PIXARLOGDATAFMT_12BITPICIO
LEAF_NODE	622:11	622:11	13	PIXARLOGDATAFMT_12BITPICIO
LEAF_NODE	622:37	622:37	9	;
JUMP_STATEMENT	623:2	623:7	6	break DESTINATION ;
KEYWORD	623:2	623:2	7	break
LEAF_NODE	623:2	623:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	623:7	623:7	7	;
LABEL	624:2	624:9	6	case 11 :
LEAF_NODE	624:2	624:2	7	case
LEAF_NODE	624:7	624:7	7	11
LEAF_NODE	624:9	624:9	7	:
SELECTION	625:2	626:3	6	
KEYWORD	625:2	625:2	7	if
LEAF_NODE	625:2	625:2	8	if
LEAF_NODE	625:5	625:5	7	(
CONDITION	625:6	625:6	7	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_UINT
EXPR	625:6	625:6	8	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_UINT
OR	625:6	625:37	9	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_UINT
EXPR	625:6	625:16	10	format == SAMPLEFORMAT_VOID
FIELD	625:6	625:6	11	format
LEAF_NODE	625:6	625:6	12	format
EQ_OPERATOR	625:13	625:13	11	==
LEAF_NODE	625:13	625:13	12	==
FIELD	625:16	625:16	11	SAMPLEFORMAT_VOID
LEAF_NODE	625:16	625:16	12	SAMPLEFORMAT_VOID
LEAF_NODE	625:34	625:34	10	||
EXPR	625:37	625:47	10	format == SAMPLEFORMAT_UINT
FIELD	625:37	625:37	11	format
LEAF_NODE	625:37	625:37	12	format
EQ_OPERATOR	625:44	625:44	11	==
LEAF_NODE	625:44	625:44	12	==
FIELD	625:47	625:47	11	SAMPLEFORMAT_UINT
LEAF_NODE	625:47	625:47	12	SAMPLEFORMAT_UINT
LEAF_NODE	625:64	625:64	7	)
STATEMENTS	626:3	626:3	7	
EXPR_STATEMENT	626:3	626:35	8	guess = PIXARLOGDATAFMT_11BITLOG ;
EXPR	626:3	626:3	9	guess = PIXARLOGDATAFMT_11BITLOG
ASSIGN	626:3	626:11	10	guess = PIXARLOGDATAFMT_11BITLOG
LVAL	626:3	626:3	11	guess
FIELD	626:3	626:3	12	guess
LEAF_NODE	626:3	626:3	13	guess
ASSIGN_OP	626:9	626:9	11	=
LEAF_NODE	626:9	626:9	12	=
RVAL	626:11	626:11	11	PIXARLOGDATAFMT_11BITLOG
FIELD	626:11	626:11	12	PIXARLOGDATAFMT_11BITLOG
LEAF_NODE	626:11	626:11	13	PIXARLOGDATAFMT_11BITLOG
LEAF_NODE	626:35	626:35	9	;
JUMP_STATEMENT	627:2	627:7	6	break DESTINATION ;
KEYWORD	627:2	627:2	7	break
LEAF_NODE	627:2	627:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	627:7	627:7	7	;
LABEL	628:2	628:8	6	case 8 :
LEAF_NODE	628:2	628:2	7	case
LEAF_NODE	628:7	628:7	7	8
LEAF_NODE	628:8	628:8	7	:
SELECTION	629:2	630:3	6	
KEYWORD	629:2	629:2	7	if
LEAF_NODE	629:2	629:2	8	if
LEAF_NODE	629:5	629:5	7	(
CONDITION	629:6	629:6	7	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_UINT
EXPR	629:6	629:6	8	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_UINT
OR	629:6	629:37	9	format == SAMPLEFORMAT_VOID || format == SAMPLEFORMAT_UINT
EXPR	629:6	629:16	10	format == SAMPLEFORMAT_VOID
FIELD	629:6	629:6	11	format
LEAF_NODE	629:6	629:6	12	format
EQ_OPERATOR	629:13	629:13	11	==
LEAF_NODE	629:13	629:13	12	==
FIELD	629:16	629:16	11	SAMPLEFORMAT_VOID
LEAF_NODE	629:16	629:16	12	SAMPLEFORMAT_VOID
LEAF_NODE	629:34	629:34	10	||
EXPR	629:37	629:47	10	format == SAMPLEFORMAT_UINT
FIELD	629:37	629:37	11	format
LEAF_NODE	629:37	629:37	12	format
EQ_OPERATOR	629:44	629:44	11	==
LEAF_NODE	629:44	629:44	12	==
FIELD	629:47	629:47	11	SAMPLEFORMAT_UINT
LEAF_NODE	629:47	629:47	12	SAMPLEFORMAT_UINT
LEAF_NODE	629:64	629:64	7	)
STATEMENTS	630:3	630:3	7	
EXPR_STATEMENT	630:3	630:31	8	guess = PIXARLOGDATAFMT_8BIT ;
EXPR	630:3	630:3	9	guess = PIXARLOGDATAFMT_8BIT
ASSIGN	630:3	630:11	10	guess = PIXARLOGDATAFMT_8BIT
LVAL	630:3	630:3	11	guess
FIELD	630:3	630:3	12	guess
LEAF_NODE	630:3	630:3	13	guess
ASSIGN_OP	630:9	630:9	11	=
LEAF_NODE	630:9	630:9	12	=
RVAL	630:11	630:11	11	PIXARLOGDATAFMT_8BIT
FIELD	630:11	630:11	12	PIXARLOGDATAFMT_8BIT
LEAF_NODE	630:11	630:11	13	PIXARLOGDATAFMT_8BIT
LEAF_NODE	630:31	630:31	9	;
JUMP_STATEMENT	631:2	631:7	6	break DESTINATION ;
KEYWORD	631:2	631:2	7	break
LEAF_NODE	631:2	631:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	631:7	631:7	7	;
LEAF_NODE	632:1	632:1	5	}
JUMP_STATEMENT	634:1	634:13	3	return guess ;
KEYWORD	634:1	634:1	4	return
LEAF_NODE	634:1	634:1	5	return
DESTINATION	634:8	634:8	4	guess
EXPR	634:8	634:8	5	guess
FIELD	634:8	634:8	6	guess
LEAF_NODE	634:8	634:8	7	guess
LEAF_NODE	634:13	634:13	4	;
LEAF_NODE	635:0	635:0	2	}
FUNCTION_DEF	637:0	641:0	1	
RETURN_TYPE	637:0	637:7	2	static tmsize_t
LEAF_NODE	637:0	637:0	3	static
TYPE_NAME	637:7	637:7	3	tmsize_t
LEAF_NODE	637:7	637:7	4	tmsize_t
FUNCTION_NAME	638:0	638:0	2	multiply_ms
LEAF_NODE	638:0	638:0	3	multiply_ms
PARAMETER_LIST	638:11	638:36	2	( tmsize_t m1 , tmsize_t m2 )
LEAF_NODE	638:11	638:11	3	(
PARAMETER_DECL	638:12	638:21	3	tmsize_t m1
TYPE	638:12	638:12	4	tmsize_t
TYPE_NAME	638:12	638:12	5	tmsize_t
LEAF_NODE	638:12	638:12	6	tmsize_t
NAME	638:21	638:21	4	m1
LEAF_NODE	638:21	638:21	5	m1
LEAF_NODE	638:23	638:23	3	,
PARAMETER_DECL	638:25	638:34	3	tmsize_t m2
TYPE	638:25	638:25	4	tmsize_t
TYPE_NAME	638:25	638:25	5	tmsize_t
LEAF_NODE	638:25	638:25	6	tmsize_t
NAME	638:34	638:34	4	m2
LEAF_NODE	638:34	638:34	5	m2
LEAF_NODE	638:36	638:36	3	)
LEAF_NODE	639:0	639:0	2	{
STATEMENTS	640:8	640:8	2	
JUMP_STATEMENT	640:8	640:53	3	return _TIFFMultiplySSize ( NULL , m1 , m2 , NULL ) ;
KEYWORD	640:8	640:8	4	return
LEAF_NODE	640:8	640:8	5	return
DESTINATION	640:15	640:15	4	_TIFFMultiplySSize ( NULL , m1 , m2 , NULL )
EXPR	640:15	640:15	5	_TIFFMultiplySSize ( NULL , m1 , m2 , NULL )
FUNCTION_CALL	640:15	640:52	6	_TIFFMultiplySSize ( NULL , m1 , m2 , NULL )
CALLEE	640:15	640:15	7	_TIFFMultiplySSize
LEAF_NODE	640:15	640:15	8	_TIFFMultiplySSize
LEAF_NODE	640:33	640:33	7	(
ARGUMENT	640:34	640:34	7	NULL
FIELD	640:34	640:34	8	NULL
LEAF_NODE	640:34	640:34	9	NULL
LEAF_NODE	640:38	640:38	7	,
ARGUMENT	640:40	640:40	7	m1
FIELD	640:40	640:40	8	m1
LEAF_NODE	640:40	640:40	9	m1
LEAF_NODE	640:42	640:42	7	,
ARGUMENT	640:44	640:44	7	m2
FIELD	640:44	640:44	8	m2
LEAF_NODE	640:44	640:44	9	m2
LEAF_NODE	640:46	640:46	7	,
ARGUMENT	640:48	640:48	7	NULL
FIELD	640:48	640:48	8	NULL
LEAF_NODE	640:48	640:48	9	NULL
LEAF_NODE	640:52	640:52	7	)
LEAF_NODE	640:53	640:53	4	;
LEAF_NODE	641:0	641:0	2	}
FUNCTION_DEF	643:0	654:0	1	
RETURN_TYPE	643:0	643:7	2	static tmsize_t
LEAF_NODE	643:0	643:0	3	static
TYPE_NAME	643:7	643:7	3	tmsize_t
LEAF_NODE	643:7	643:7	4	tmsize_t
FUNCTION_NAME	644:0	644:0	2	add_ms
LEAF_NODE	644:0	644:0	3	add_ms
PARAMETER_LIST	644:6	644:31	2	( tmsize_t m1 , tmsize_t m2 )
LEAF_NODE	644:6	644:6	3	(
PARAMETER_DECL	644:7	644:16	3	tmsize_t m1
TYPE	644:7	644:7	4	tmsize_t
TYPE_NAME	644:7	644:7	5	tmsize_t
LEAF_NODE	644:7	644:7	6	tmsize_t
NAME	644:16	644:16	4	m1
LEAF_NODE	644:16	644:16	5	m1
LEAF_NODE	644:18	644:18	3	,
PARAMETER_DECL	644:20	644:29	3	tmsize_t m2
TYPE	644:20	644:20	4	tmsize_t
TYPE_NAME	644:20	644:20	5	tmsize_t
LEAF_NODE	644:20	644:20	6	tmsize_t
NAME	644:29	644:29	4	m2
LEAF_NODE	644:29	644:29	5	m2
LEAF_NODE	644:31	644:31	3	)
LEAF_NODE	645:0	645:0	2	{
STATEMENTS	646:8	653:1	2	
EXPR_STATEMENT	646:8	646:34	3	assert ( m1 >= 0 && m2 >= 0 ) ;
EXPR	646:8	646:8	4	assert ( m1 >= 0 && m2 >= 0 )
FUNCTION_CALL	646:8	646:33	5	assert ( m1 >= 0 && m2 >= 0 )
CALLEE	646:8	646:8	6	assert
LEAF_NODE	646:8	646:8	7	assert
LEAF_NODE	646:14	646:14	6	(
ARGUMENT	646:15	646:15	6	m1 >= 0 && m2 >= 0
AND	646:15	646:26	7	m1 >= 0 && m2 >= 0
EXPR	646:15	646:21	8	m1 >= 0
FIELD	646:15	646:15	9	m1
LEAF_NODE	646:15	646:15	10	m1
REL_OPERATOR	646:18	646:18	9	>=
LEAF_NODE	646:18	646:18	10	>=
FIELD	646:21	646:21	9	0
LEAF_NODE	646:21	646:21	10	0
LEAF_NODE	646:23	646:23	8	&&
EXPR	646:26	646:32	8	m2 >= 0
FIELD	646:26	646:26	9	m2
LEAF_NODE	646:26	646:26	10	m2
REL_OPERATOR	646:29	646:29	9	>=
LEAF_NODE	646:29	646:29	10	>=
FIELD	646:32	646:32	9	0
LEAF_NODE	646:32	646:32	10	0
LEAF_NODE	646:33	646:33	6	)
LEAF_NODE	646:34	646:34	4	;
SELECTION	648:1	649:2	3	
KEYWORD	648:1	648:1	4	if
LEAF_NODE	648:1	648:1	5	if
LEAF_NODE	648:4	648:4	4	(
CONDITION	648:5	648:5	4	m1 == 0 || m2 == 0
EXPR	648:5	648:5	5	m1 == 0 || m2 == 0
OR	648:5	648:16	6	m1 == 0 || m2 == 0
EXPR	648:5	648:11	7	m1 == 0
FIELD	648:5	648:5	8	m1
LEAF_NODE	648:5	648:5	9	m1
EQ_OPERATOR	648:8	648:8	8	==
LEAF_NODE	648:8	648:8	9	==
FIELD	648:11	648:11	8	0
LEAF_NODE	648:11	648:11	9	0
LEAF_NODE	648:13	648:13	7	||
EXPR	648:16	648:22	7	m2 == 0
FIELD	648:16	648:16	8	m2
LEAF_NODE	648:16	648:16	9	m2
EQ_OPERATOR	648:19	648:19	8	==
LEAF_NODE	648:19	648:19	9	==
FIELD	648:22	648:22	8	0
LEAF_NODE	648:22	648:22	9	0
LEAF_NODE	648:23	648:23	4	)
STATEMENTS	649:2	649:2	4	
JUMP_STATEMENT	649:2	649:10	5	return 0 ;
KEYWORD	649:2	649:2	6	return
LEAF_NODE	649:2	649:2	7	return
DESTINATION	649:9	649:9	6	0
EXPR	649:9	649:9	7	0
FIELD	649:9	649:9	8	0
LEAF_NODE	649:9	649:9	9	0
LEAF_NODE	649:10	649:10	6	;
SELECTION	650:1	650:6	3	
KEYWORD	650:1	650:1	4	else
LEAF_NODE	650:1	650:1	5	else
STATEMENTS	650:6	650:6	4	
SELECTION	650:6	651:2	5	
KEYWORD	650:6	650:6	6	if
LEAF_NODE	650:6	650:6	7	if
LEAF_NODE	650:9	650:9	6	(
CONDITION	650:10	650:10	6	m1 > TIFF_TMSIZE_T_MAX - m2
EXPR	650:10	650:35	7	m1 > TIFF_TMSIZE_T_MAX - m2
FIELD	650:10	650:10	8	m1
LEAF_NODE	650:10	650:10	9	m1
REL_OPERATOR	650:13	650:13	8	>
LEAF_NODE	650:13	650:13	9	>
FIELD	650:15	650:15	8	TIFF_TMSIZE_T_MAX
LEAF_NODE	650:15	650:15	9	TIFF_TMSIZE_T_MAX
LEAF_NODE	650:33	650:33	8	-
FIELD	650:35	650:35	8	m2
LEAF_NODE	650:35	650:35	9	m2
LEAF_NODE	650:37	650:37	6	)
STATEMENTS	651:2	651:2	6	
JUMP_STATEMENT	651:2	651:10	7	return 0 ;
KEYWORD	651:2	651:2	8	return
LEAF_NODE	651:2	651:2	9	return
DESTINATION	651:9	651:9	8	0
EXPR	651:9	651:9	9	0
FIELD	651:9	651:9	10	0
LEAF_NODE	651:9	651:9	11	0
LEAF_NODE	651:10	651:10	8	;
JUMP_STATEMENT	653:1	653:15	3	return m1 + m2 ;
KEYWORD	653:1	653:1	4	return
LEAF_NODE	653:1	653:1	5	return
DESTINATION	653:8	653:8	4	m1 + m2
EXPR	653:8	653:13	5	m1 + m2
FIELD	653:8	653:8	6	m1
LEAF_NODE	653:8	653:8	7	m1
LEAF_NODE	653:11	653:11	6	+
FIELD	653:13	653:13	6	m2
LEAF_NODE	653:13	653:13	7	m2
LEAF_NODE	653:15	653:15	4	;
LEAF_NODE	654:0	654:0	2	}
FUNCTION_DEF	656:0	661:0	1	
RETURN_TYPE	656:0	656:7	2	static int
LEAF_NODE	656:0	656:0	3	static
TYPE_NAME	656:7	656:7	3	int
LEAF_NODE	656:7	656:7	4	int
FUNCTION_NAME	657:0	657:0	2	PixarLogFixupTags
LEAF_NODE	657:0	657:0	3	PixarLogFixupTags
PARAMETER_LIST	657:17	657:27	2	( TIFF * tif )
LEAF_NODE	657:17	657:17	3	(
PARAMETER_DECL	657:18	657:24	3	TIFF * tif
TYPE	657:18	657:22	4	TIFF *
TYPE_NAME	657:18	657:18	5	TIFF
LEAF_NODE	657:18	657:18	6	TIFF
POINTER	657:22	657:22	5	*
LEAF_NODE	657:22	657:22	6	*
NAME	657:24	657:24	4	tif
LEAF_NODE	657:24	657:24	5	tif
LEAF_NODE	657:27	657:27	3	)
LEAF_NODE	658:0	658:0	2	{
STATEMENTS	659:1	660:1	2	
EXPR_STATEMENT	659:1	659:11	3	( void ) tif ;
EXPR	659:1	659:8	4	( void ) tif
LEAF_NODE	659:1	659:1	5	(
TYPE_NAME	659:2	659:2	5	void
LEAF_NODE	659:2	659:2	6	void
LEAF_NODE	659:6	659:6	5	)
FIELD	659:8	659:8	5	tif
LEAF_NODE	659:8	659:8	6	tif
LEAF_NODE	659:11	659:11	4	;
JUMP_STATEMENT	660:1	660:11	3	return ( 1 ) ;
KEYWORD	660:1	660:1	4	return
LEAF_NODE	660:1	660:1	5	return
DESTINATION	660:8	660:8	4	( 1 )
EXPR	660:8	660:10	5	( 1 )
LEAF_NODE	660:8	660:8	6	(
FIELD	660:9	660:9	6	1
LEAF_NODE	660:9	660:9	7	1
LEAF_NODE	660:10	660:10	6	)
LEAF_NODE	660:11	660:11	4	;
LEAF_NODE	661:0	661:0	2	}
FUNCTION_DEF	663:0	724:0	1	
RETURN_TYPE	663:0	663:7	2	static int
LEAF_NODE	663:0	663:0	3	static
TYPE_NAME	663:7	663:7	3	int
LEAF_NODE	663:7	663:7	4	int
FUNCTION_NAME	664:0	664:0	2	PixarLogSetupDecode
LEAF_NODE	664:0	664:0	3	PixarLogSetupDecode
PARAMETER_LIST	664:19	664:29	2	( TIFF * tif )
LEAF_NODE	664:19	664:19	3	(
PARAMETER_DECL	664:20	664:26	3	TIFF * tif
TYPE	664:20	664:24	4	TIFF *
TYPE_NAME	664:20	664:20	5	TIFF
LEAF_NODE	664:20	664:20	6	TIFF
POINTER	664:24	664:24	5	*
LEAF_NODE	664:24	664:24	6	*
NAME	664:26	664:26	4	tif
LEAF_NODE	664:26	664:26	5	tif
LEAF_NODE	664:29	664:29	3	)
LEAF_NODE	665:0	665:0	2	{
STATEMENTS	666:1	720:3	2	
LEAF_NODE	666:1	666:1	3	static
SIMPLE_DECL	666:8	666:51	3	const char [ ] module ; module = "PixarLogSetupDecode" ;
VAR_DECL	666:8	666:19	4	const char [ ] module ; module = "PixarLogSetupDecode"
TYPE	666:8	666:25	5	const char [ ]
TYPE_NAME	666:8	666:14	6	const char
LEAF_NODE	666:8	666:8	7	const
LEAF_NODE	666:14	666:14	7	char
TYPE_SUFFIX	666:25	666:26	6	[ ]
LEAF_NODE	666:25	666:25	7	[
LEAF_NODE	666:26	666:26	7	]
NAME	666:19	666:19	5	module
LEAF_NODE	666:19	666:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	666:19	666:19	5	module = "PixarLogSetupDecode"
ASSIGN	666:19	666:30	6	module = "PixarLogSetupDecode"
LVAL	666:19	666:19	7	module
NAME	666:19	666:19	8	module
LEAF_NODE	666:19	666:19	9	module
ASSIGN_OP	666:28	666:28	7	=
LEAF_NODE	666:28	666:28	8	=
RVAL	666:30	666:30	7	"PixarLogSetupDecode"
FIELD	666:30	666:30	8	"PixarLogSetupDecode"
LEAF_NODE	666:30	666:30	9	"PixarLogSetupDecode"
LEAF_NODE	666:51	666:51	4	;
SIMPLE_DECL	667:1	667:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	667:1	667:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	667:1	667:15	5	TIFFDirectory *
TYPE_NAME	667:1	667:1	6	TIFFDirectory
LEAF_NODE	667:1	667:1	7	TIFFDirectory
POINTER	667:15	667:15	6	*
LEAF_NODE	667:15	667:15	7	*
NAME	667:16	667:16	5	td
LEAF_NODE	667:16	667:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	667:16	667:16	5	td = & tif -> tif_dir
ASSIGN	667:16	667:21	6	td = & tif -> tif_dir
LVAL	667:16	667:16	7	td
NAME	667:16	667:16	8	td
LEAF_NODE	667:16	667:16	9	td
ASSIGN_OP	667:19	667:19	7	=
LEAF_NODE	667:19	667:19	8	=
RVAL	667:21	667:21	7	& tif -> tif_dir
UNARY_EXPR	667:21	667:22	8	& tif -> tif_dir
UNARY_OPERATOR	667:21	667:21	9	&
LEAF_NODE	667:21	667:21	10	&
FIELD	667:22	667:27	9	tif -> tif_dir
LEAF_NODE	667:22	667:22	10	tif
LEAF_NODE	667:25	667:25	10	->
LEAF_NODE	667:27	667:27	10	tif_dir
LEAF_NODE	667:34	667:34	4	;
SIMPLE_DECL	668:1	668:38	3	PixarLogState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	668:1	668:16	4	PixarLogState * sp ; sp = DecoderState ( tif )
TYPE	668:1	668:14	5	PixarLogState *
TYPE_NAME	668:1	668:1	6	PixarLogState
LEAF_NODE	668:1	668:1	7	PixarLogState
POINTER	668:14	668:14	6	*
LEAF_NODE	668:14	668:14	7	*
NAME	668:16	668:16	5	sp
LEAF_NODE	668:16	668:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	668:16	668:16	5	sp = DecoderState ( tif )
ASSIGN	668:16	668:21	6	sp = DecoderState ( tif )
LVAL	668:16	668:16	7	sp
NAME	668:16	668:16	8	sp
LEAF_NODE	668:16	668:16	9	sp
ASSIGN_OP	668:19	668:19	7	=
LEAF_NODE	668:19	668:19	8	=
RVAL	668:21	668:21	7	DecoderState ( tif )
FUNCTION_CALL	668:21	668:37	8	DecoderState ( tif )
CALLEE	668:21	668:21	9	DecoderState
LEAF_NODE	668:21	668:21	10	DecoderState
LEAF_NODE	668:33	668:33	9	(
ARGUMENT	668:34	668:34	9	tif
FIELD	668:34	668:34	10	tif
LEAF_NODE	668:34	668:34	11	tif
LEAF_NODE	668:37	668:37	9	)
LEAF_NODE	668:38	668:38	4	;
SIMPLE_DECL	669:1	669:19	3	tmsize_t tbuf_size ;
VAR_DECL	669:1	669:10	4	tmsize_t tbuf_size
TYPE	669:1	669:1	5	tmsize_t
TYPE_NAME	669:1	669:1	6	tmsize_t
LEAF_NODE	669:1	669:1	7	tmsize_t
NAME	669:10	669:10	5	tbuf_size
LEAF_NODE	669:10	669:10	6	tbuf_size
LEAF_NODE	669:19	669:19	4	;
SIMPLE_DECL	670:8	670:27	3	uint32 strip_height ;
VAR_DECL	670:8	670:15	4	uint32 strip_height
TYPE	670:8	670:8	5	uint32
TYPE_NAME	670:8	670:8	6	uint32
LEAF_NODE	670:8	670:8	7	uint32
NAME	670:15	670:15	5	strip_height
LEAF_NODE	670:15	670:15	6	strip_height
LEAF_NODE	670:27	670:27	4	;
EXPR_STATEMENT	672:1	672:19	3	assert ( sp != NULL ) ;
EXPR	672:1	672:1	4	assert ( sp != NULL )
FUNCTION_CALL	672:1	672:18	5	assert ( sp != NULL )
CALLEE	672:1	672:1	6	assert
LEAF_NODE	672:1	672:1	7	assert
LEAF_NODE	672:7	672:7	6	(
ARGUMENT	672:8	672:14	6	sp != NULL
FIELD	672:8	672:8	7	sp
LEAF_NODE	672:8	672:8	8	sp
EQ_OPERATOR	672:11	672:11	7	!=
LEAF_NODE	672:11	672:11	8	!=
FIELD	672:14	672:14	7	NULL
LEAF_NODE	672:14	672:14	8	NULL
LEAF_NODE	672:18	672:18	6	)
LEAF_NODE	672:19	672:19	4	;
SELECTION	677:1	678:2	3	
KEYWORD	677:1	677:1	4	if
LEAF_NODE	677:1	677:1	5	if
LEAF_NODE	677:3	677:3	4	(
CONDITION	677:5	677:5	4	( sp -> state & PLSTATE_INIT ) != 0
EXPR	677:5	677:35	5	( sp -> state & PLSTATE_INIT ) != 0
LEAF_NODE	677:5	677:5	6	(
FIELD	677:6	677:10	6	sp -> state
LEAF_NODE	677:6	677:6	7	sp
LEAF_NODE	677:8	677:8	7	->
LEAF_NODE	677:10	677:10	7	state
LEAF_NODE	677:16	677:16	6	&
FIELD	677:18	677:18	6	PLSTATE_INIT
LEAF_NODE	677:18	677:18	7	PLSTATE_INIT
LEAF_NODE	677:30	677:30	6	)
EQ_OPERATOR	677:32	677:32	6	!=
LEAF_NODE	677:32	677:32	7	!=
FIELD	677:35	677:35	6	0
LEAF_NODE	677:35	677:35	7	0
LEAF_NODE	677:37	677:37	4	)
STATEMENTS	678:2	678:2	4	
JUMP_STATEMENT	678:2	678:10	5	return 1 ;
KEYWORD	678:2	678:2	6	return
LEAF_NODE	678:2	678:2	7	return
DESTINATION	678:9	678:9	6	1
EXPR	678:9	678:9	7	1
FIELD	678:9	678:9	8	1
LEAF_NODE	678:9	678:9	9	1
LEAF_NODE	678:10	678:10	6	;
EXPR_STATEMENT	680:8	680:42	3	strip_height = td -> td_rowsperstrip ;
EXPR	680:8	680:8	4	strip_height = td -> td_rowsperstrip
ASSIGN	680:8	680:23	5	strip_height = td -> td_rowsperstrip
LVAL	680:8	680:8	6	strip_height
FIELD	680:8	680:8	7	strip_height
LEAF_NODE	680:8	680:8	8	strip_height
ASSIGN_OP	680:21	680:21	6	=
LEAF_NODE	680:21	680:21	7	=
RVAL	680:23	680:23	6	td -> td_rowsperstrip
FIELD	680:23	680:27	7	td -> td_rowsperstrip
LEAF_NODE	680:23	680:23	8	td
LEAF_NODE	680:25	680:25	8	->
LEAF_NODE	680:27	680:27	8	td_rowsperstrip
LEAF_NODE	680:42	680:42	4	;
SELECTION	681:8	682:12	3	
KEYWORD	681:8	681:8	4	if
LEAF_NODE	681:8	681:8	5	if
LEAF_NODE	681:10	681:10	4	(
CONDITION	681:12	681:12	4	strip_height > td -> td_imagelength
EXPR	681:12	681:27	5	strip_height > td -> td_imagelength
FIELD	681:12	681:12	6	strip_height
LEAF_NODE	681:12	681:12	7	strip_height
REL_OPERATOR	681:25	681:25	6	>
LEAF_NODE	681:25	681:25	7	>
FIELD	681:27	681:31	6	td -> td_imagelength
LEAF_NODE	681:27	681:27	7	td
LEAF_NODE	681:29	681:29	7	->
LEAF_NODE	681:31	681:31	7	td_imagelength
LEAF_NODE	681:46	681:46	4	)
STATEMENTS	682:12	682:12	4	
EXPR_STATEMENT	682:12	682:45	5	strip_height = td -> td_imagelength ;
EXPR	682:12	682:12	6	strip_height = td -> td_imagelength
ASSIGN	682:12	682:27	7	strip_height = td -> td_imagelength
LVAL	682:12	682:12	8	strip_height
FIELD	682:12	682:12	9	strip_height
LEAF_NODE	682:12	682:12	10	strip_height
ASSIGN_OP	682:25	682:25	8	=
LEAF_NODE	682:25	682:25	9	=
RVAL	682:27	682:27	8	td -> td_imagelength
FIELD	682:27	682:31	9	td -> td_imagelength
LEAF_NODE	682:27	682:27	10	td
LEAF_NODE	682:29	682:29	10	->
LEAF_NODE	682:31	682:31	10	td_imagelength
LEAF_NODE	682:45	682:45	6	;
EXPR_STATEMENT	686:1	686:40	3	tif -> tif_postdecode = _TIFFNoPostDecode ;
EXPR	686:1	686:1	4	tif -> tif_postdecode = _TIFFNoPostDecode
ASSIGN	686:1	686:23	5	tif -> tif_postdecode = _TIFFNoPostDecode
LVAL	686:1	686:1	6	tif -> tif_postdecode
FIELD	686:1	686:6	7	tif -> tif_postdecode
LEAF_NODE	686:1	686:1	8	tif
LEAF_NODE	686:4	686:4	8	->
LEAF_NODE	686:6	686:6	8	tif_postdecode
ASSIGN_OP	686:21	686:21	6	=
LEAF_NODE	686:21	686:21	7	=
RVAL	686:23	686:23	6	_TIFFNoPostDecode
FIELD	686:23	686:23	7	_TIFFNoPostDecode
LEAF_NODE	686:23	686:23	8	_TIFFNoPostDecode
LEAF_NODE	686:40	686:40	4	;
EXPR_STATEMENT	690:1	691:32	3	sp -> stride = ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 ) ;
EXPR	690:1	690:1	4	sp -> stride = ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
ASSIGN	690:1	690:14	5	sp -> stride = ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
LVAL	690:1	690:1	6	sp -> stride
FIELD	690:1	690:5	7	sp -> stride
LEAF_NODE	690:1	690:1	8	sp
LEAF_NODE	690:3	690:3	8	->
LEAF_NODE	690:5	690:5	8	stride
ASSIGN_OP	690:12	690:12	6	=
LEAF_NODE	690:12	690:12	7	=
RVAL	690:14	691:31	6	( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
LEAF_NODE	690:14	690:14	7	(
COND_EXPR	690:15	691:30	7	td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1
CONDITION	690:15	690:38	8	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	690:15	690:19	9	td -> td_planarconfig
LEAF_NODE	690:15	690:15	10	td
LEAF_NODE	690:17	690:17	10	->
LEAF_NODE	690:19	690:19	10	td_planarconfig
EQ_OPERATOR	690:35	690:35	9	==
LEAF_NODE	690:35	690:35	10	==
FIELD	690:38	690:38	9	PLANARCONFIG_CONTIG
LEAF_NODE	690:38	690:38	10	PLANARCONFIG_CONTIG
LEAF_NODE	690:58	690:58	8	?
EXPR	691:5	691:5	8	td -> td_samplesperpixel
FIELD	691:5	691:9	9	td -> td_samplesperpixel
LEAF_NODE	691:5	691:5	10	td
LEAF_NODE	691:7	691:7	10	->
LEAF_NODE	691:9	691:9	10	td_samplesperpixel
LEAF_NODE	691:28	691:28	8	:
FIELD	691:30	691:30	8	1
LEAF_NODE	691:30	691:30	9	1
LEAF_NODE	691:31	691:31	7	)
LEAF_NODE	691:32	691:32	4	;
EXPR_STATEMENT	692:1	693:40	3	tbuf_size = multiply_ms ( multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , strip_height ) , sizeof ( uint16 ) ) ;
EXPR	692:1	692:1	4	tbuf_size = multiply_ms ( multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , strip_height ) , sizeof ( uint16 ) )
ASSIGN	692:1	692:13	5	tbuf_size = multiply_ms ( multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , strip_height ) , sizeof ( uint16 ) )
LVAL	692:1	692:1	6	tbuf_size
FIELD	692:1	692:1	7	tbuf_size
LEAF_NODE	692:1	692:1	8	tbuf_size
ASSIGN_OP	692:11	692:11	6	=
LEAF_NODE	692:11	692:11	7	=
RVAL	692:13	692:13	6	multiply_ms ( multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , strip_height ) , sizeof ( uint16 ) )
FUNCTION_CALL	692:13	693:39	7	multiply_ms ( multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , strip_height ) , sizeof ( uint16 ) )
CALLEE	692:13	692:13	8	multiply_ms
LEAF_NODE	692:13	692:13	9	multiply_ms
LEAF_NODE	692:24	692:24	8	(
ARGUMENT	692:25	692:25	8	multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , strip_height )
FUNCTION_CALL	692:25	693:22	9	multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , strip_height )
CALLEE	692:25	692:25	10	multiply_ms
LEAF_NODE	692:25	692:25	11	multiply_ms
LEAF_NODE	692:36	692:36	10	(
ARGUMENT	692:37	692:37	10	multiply_ms ( sp -> stride , td -> td_imagewidth )
FUNCTION_CALL	692:37	692:78	11	multiply_ms ( sp -> stride , td -> td_imagewidth )
CALLEE	692:37	692:37	12	multiply_ms
LEAF_NODE	692:37	692:37	13	multiply_ms
LEAF_NODE	692:48	692:48	12	(
ARGUMENT	692:49	692:49	12	sp -> stride
FIELD	692:49	692:53	13	sp -> stride
LEAF_NODE	692:49	692:49	14	sp
LEAF_NODE	692:51	692:51	14	->
LEAF_NODE	692:53	692:53	14	stride
LEAF_NODE	692:59	692:59	12	,
ARGUMENT	692:61	692:61	12	td -> td_imagewidth
FIELD	692:61	692:65	13	td -> td_imagewidth
LEAF_NODE	692:61	692:61	14	td
LEAF_NODE	692:63	692:63	14	->
LEAF_NODE	692:65	692:65	14	td_imagewidth
LEAF_NODE	692:78	692:78	12	)
LEAF_NODE	692:79	692:79	10	,
ARGUMENT	693:10	693:10	10	strip_height
FIELD	693:10	693:10	11	strip_height
LEAF_NODE	693:10	693:10	12	strip_height
LEAF_NODE	693:22	693:22	10	)
LEAF_NODE	693:23	693:23	8	,
ARGUMENT	693:25	693:25	8	sizeof ( uint16 )
FUNCTION_CALL	693:25	693:38	9	sizeof ( uint16 )
CALLEE	693:25	693:25	10	sizeof
LEAF_NODE	693:25	693:25	11	sizeof
LEAF_NODE	693:31	693:31	10	(
ARGUMENT	693:32	693:32	10	uint16
FIELD	693:32	693:32	11	uint16
LEAF_NODE	693:32	693:32	12	uint16
LEAF_NODE	693:38	693:38	10	)
LEAF_NODE	693:39	693:39	8	)
LEAF_NODE	693:40	693:40	4	;
EXPR_STATEMENT	695:1	695:59	3	tbuf_size = add_ms ( tbuf_size , sizeof ( uint16 ) * sp -> stride ) ;
EXPR	695:1	695:1	4	tbuf_size = add_ms ( tbuf_size , sizeof ( uint16 ) * sp -> stride )
ASSIGN	695:1	695:13	5	tbuf_size = add_ms ( tbuf_size , sizeof ( uint16 ) * sp -> stride )
LVAL	695:1	695:1	6	tbuf_size
FIELD	695:1	695:1	7	tbuf_size
LEAF_NODE	695:1	695:1	8	tbuf_size
ASSIGN_OP	695:11	695:11	6	=
LEAF_NODE	695:11	695:11	7	=
RVAL	695:13	695:13	6	add_ms ( tbuf_size , sizeof ( uint16 ) * sp -> stride )
FUNCTION_CALL	695:13	695:58	7	add_ms ( tbuf_size , sizeof ( uint16 ) * sp -> stride )
CALLEE	695:13	695:13	8	add_ms
LEAF_NODE	695:13	695:13	9	add_ms
LEAF_NODE	695:19	695:19	8	(
ARGUMENT	695:20	695:20	8	tbuf_size
FIELD	695:20	695:20	9	tbuf_size
LEAF_NODE	695:20	695:20	10	tbuf_size
LEAF_NODE	695:29	695:29	8	,
ARGUMENT	695:31	695:48	8	sizeof ( uint16 ) * sp -> stride
FUNCTION_CALL	695:31	695:44	9	sizeof ( uint16 )
CALLEE	695:31	695:31	10	sizeof
LEAF_NODE	695:31	695:31	11	sizeof
LEAF_NODE	695:37	695:37	10	(
ARGUMENT	695:38	695:38	10	uint16
FIELD	695:38	695:38	11	uint16
LEAF_NODE	695:38	695:38	12	uint16
LEAF_NODE	695:44	695:44	10	)
LEAF_NODE	695:46	695:46	9	*
FIELD	695:48	695:52	9	sp -> stride
LEAF_NODE	695:48	695:48	10	sp
LEAF_NODE	695:50	695:50	10	->
LEAF_NODE	695:52	695:52	10	stride
LEAF_NODE	695:58	695:58	8	)
LEAF_NODE	695:59	695:59	4	;
SELECTION	696:1	697:2	3	
KEYWORD	696:1	696:1	4	if
LEAF_NODE	696:1	696:1	5	if
LEAF_NODE	696:4	696:4	4	(
CONDITION	696:5	696:5	4	tbuf_size == 0
EXPR	696:5	696:18	5	tbuf_size == 0
FIELD	696:5	696:5	6	tbuf_size
LEAF_NODE	696:5	696:5	7	tbuf_size
EQ_OPERATOR	696:15	696:15	6	==
LEAF_NODE	696:15	696:15	7	==
FIELD	696:18	696:18	6	0
LEAF_NODE	696:18	696:18	7	0
LEAF_NODE	696:19	696:19	4	)
STATEMENTS	697:2	697:2	4	
JUMP_STATEMENT	697:2	697:12	5	return ( 0 ) ;
KEYWORD	697:2	697:2	6	return
LEAF_NODE	697:2	697:2	7	return
DESTINATION	697:9	697:9	6	( 0 )
EXPR	697:9	697:11	7	( 0 )
LEAF_NODE	697:9	697:9	8	(
FIELD	697:10	697:10	8	0
LEAF_NODE	697:10	697:10	9	0
LEAF_NODE	697:11	697:11	8	)
LEAF_NODE	697:12	697:12	6	;
EXPR_STATEMENT	698:1	698:45	3	sp -> tbuf = ( uint16 * ) _TIFFmalloc ( tbuf_size ) ;
EXPR	698:1	698:1	4	sp -> tbuf = ( uint16 * ) _TIFFmalloc ( tbuf_size )
ASSIGN	698:1	698:12	5	sp -> tbuf = ( uint16 * ) _TIFFmalloc ( tbuf_size )
LVAL	698:1	698:1	6	sp -> tbuf
FIELD	698:1	698:5	7	sp -> tbuf
LEAF_NODE	698:1	698:1	8	sp
LEAF_NODE	698:3	698:3	8	->
LEAF_NODE	698:5	698:5	8	tbuf
ASSIGN_OP	698:10	698:10	6	=
LEAF_NODE	698:10	698:10	7	=
RVAL	698:12	698:23	6	( uint16 * ) _TIFFmalloc ( tbuf_size )
LEAF_NODE	698:12	698:12	7	(
TYPE_NAME	698:13	698:13	7	uint16
LEAF_NODE	698:13	698:13	8	uint16
LEAF_NODE	698:20	698:20	7	*
LEAF_NODE	698:21	698:21	7	)
FUNCTION_CALL	698:23	698:44	7	_TIFFmalloc ( tbuf_size )
CALLEE	698:23	698:23	8	_TIFFmalloc
LEAF_NODE	698:23	698:23	9	_TIFFmalloc
LEAF_NODE	698:34	698:34	8	(
ARGUMENT	698:35	698:35	8	tbuf_size
FIELD	698:35	698:35	9	tbuf_size
LEAF_NODE	698:35	698:35	10	tbuf_size
LEAF_NODE	698:44	698:44	8	)
LEAF_NODE	698:45	698:45	4	;
SELECTION	699:1	700:2	3	
KEYWORD	699:1	699:1	4	if
LEAF_NODE	699:1	699:1	5	if
LEAF_NODE	699:4	699:4	4	(
CONDITION	699:5	699:5	4	sp -> tbuf == NULL
EXPR	699:5	699:17	5	sp -> tbuf == NULL
FIELD	699:5	699:9	6	sp -> tbuf
LEAF_NODE	699:5	699:5	7	sp
LEAF_NODE	699:7	699:7	7	->
LEAF_NODE	699:9	699:9	7	tbuf
EQ_OPERATOR	699:14	699:14	6	==
LEAF_NODE	699:14	699:14	7	==
FIELD	699:17	699:17	6	NULL
LEAF_NODE	699:17	699:17	7	NULL
LEAF_NODE	699:21	699:21	4	)
STATEMENTS	700:2	700:2	4	
JUMP_STATEMENT	700:2	700:12	5	return ( 0 ) ;
KEYWORD	700:2	700:2	6	return
LEAF_NODE	700:2	700:2	7	return
DESTINATION	700:9	700:9	6	( 0 )
EXPR	700:9	700:11	7	( 0 )
LEAF_NODE	700:9	700:9	8	(
FIELD	700:10	700:10	8	0
LEAF_NODE	700:10	700:10	9	0
LEAF_NODE	700:11	700:11	8	)
LEAF_NODE	700:12	700:12	6	;
EXPR_STATEMENT	701:1	701:26	3	sp -> tbuf_size = tbuf_size ;
EXPR	701:1	701:1	4	sp -> tbuf_size = tbuf_size
ASSIGN	701:1	701:17	5	sp -> tbuf_size = tbuf_size
LVAL	701:1	701:1	6	sp -> tbuf_size
FIELD	701:1	701:5	7	sp -> tbuf_size
LEAF_NODE	701:1	701:1	8	sp
LEAF_NODE	701:3	701:3	8	->
LEAF_NODE	701:5	701:5	8	tbuf_size
ASSIGN_OP	701:15	701:15	6	=
LEAF_NODE	701:15	701:15	7	=
RVAL	701:17	701:17	6	tbuf_size
FIELD	701:17	701:17	7	tbuf_size
LEAF_NODE	701:17	701:17	8	tbuf_size
LEAF_NODE	701:26	701:26	4	;
SELECTION	702:1	703:2	3	
KEYWORD	702:1	702:1	4	if
LEAF_NODE	702:1	702:1	5	if
LEAF_NODE	702:4	702:4	4	(
CONDITION	702:5	702:5	4	sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN
EXPR	702:5	702:25	5	sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN
FIELD	702:5	702:9	6	sp -> user_datafmt
LEAF_NODE	702:5	702:5	7	sp
LEAF_NODE	702:7	702:7	7	->
LEAF_NODE	702:9	702:9	7	user_datafmt
EQ_OPERATOR	702:22	702:22	6	==
LEAF_NODE	702:22	702:22	7	==
FIELD	702:25	702:25	6	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	702:25	702:25	7	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	702:48	702:48	4	)
STATEMENTS	703:2	703:2	4	
EXPR_STATEMENT	703:2	703:45	5	sp -> user_datafmt = PixarLogGuessDataFmt ( td ) ;
EXPR	703:2	703:2	6	sp -> user_datafmt = PixarLogGuessDataFmt ( td )
ASSIGN	703:2	703:21	7	sp -> user_datafmt = PixarLogGuessDataFmt ( td )
LVAL	703:2	703:2	8	sp -> user_datafmt
FIELD	703:2	703:6	9	sp -> user_datafmt
LEAF_NODE	703:2	703:2	10	sp
LEAF_NODE	703:4	703:4	10	->
LEAF_NODE	703:6	703:6	10	user_datafmt
ASSIGN_OP	703:19	703:19	8	=
LEAF_NODE	703:19	703:19	9	=
RVAL	703:21	703:21	8	PixarLogGuessDataFmt ( td )
FUNCTION_CALL	703:21	703:44	9	PixarLogGuessDataFmt ( td )
CALLEE	703:21	703:21	10	PixarLogGuessDataFmt
LEAF_NODE	703:21	703:21	11	PixarLogGuessDataFmt
LEAF_NODE	703:41	703:41	10	(
ARGUMENT	703:42	703:42	10	td
FIELD	703:42	703:42	11	td
LEAF_NODE	703:42	703:42	12	td
LEAF_NODE	703:44	703:44	10	)
LEAF_NODE	703:45	703:45	6	;
SELECTION	704:1	704:50	3	
KEYWORD	704:1	704:1	4	if
LEAF_NODE	704:1	704:1	5	if
LEAF_NODE	704:4	704:4	4	(
CONDITION	704:5	704:5	4	sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN
EXPR	704:5	704:25	5	sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN
FIELD	704:5	704:9	6	sp -> user_datafmt
LEAF_NODE	704:5	704:5	7	sp
LEAF_NODE	704:7	704:7	7	->
LEAF_NODE	704:9	704:9	7	user_datafmt
EQ_OPERATOR	704:22	704:22	6	==
LEAF_NODE	704:22	704:22	7	==
FIELD	704:25	704:25	6	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	704:25	704:25	7	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	704:48	704:48	4	)
STATEMENTS	704:50	712:1	4	
LEAF_NODE	704:50	704:50	5	{
STATEMENTS	705:16	711:2	5	
EXPR_STATEMENT	705:16	705:35	6	_TIFFfree ( sp -> tbuf ) ;
EXPR	705:16	705:16	7	_TIFFfree ( sp -> tbuf )
FUNCTION_CALL	705:16	705:34	8	_TIFFfree ( sp -> tbuf )
CALLEE	705:16	705:16	9	_TIFFfree
LEAF_NODE	705:16	705:16	10	_TIFFfree
LEAF_NODE	705:25	705:25	9	(
ARGUMENT	705:26	705:26	9	sp -> tbuf
FIELD	705:26	705:30	10	sp -> tbuf
LEAF_NODE	705:26	705:26	11	sp
LEAF_NODE	705:28	705:28	11	->
LEAF_NODE	705:30	705:30	11	tbuf
LEAF_NODE	705:34	705:34	9	)
LEAF_NODE	705:35	705:35	7	;
EXPR_STATEMENT	706:16	706:31	6	sp -> tbuf = NULL ;
EXPR	706:16	706:16	7	sp -> tbuf = NULL
ASSIGN	706:16	706:27	8	sp -> tbuf = NULL
LVAL	706:16	706:16	9	sp -> tbuf
FIELD	706:16	706:20	10	sp -> tbuf
LEAF_NODE	706:16	706:16	11	sp
LEAF_NODE	706:18	706:18	11	->
LEAF_NODE	706:20	706:20	11	tbuf
ASSIGN_OP	706:25	706:25	9	=
LEAF_NODE	706:25	706:25	10	=
RVAL	706:27	706:27	9	NULL
FIELD	706:27	706:27	10	NULL
LEAF_NODE	706:27	706:27	11	NULL
LEAF_NODE	706:31	706:31	7	;
EXPR_STATEMENT	707:16	707:33	6	sp -> tbuf_size = 0 ;
EXPR	707:16	707:16	7	sp -> tbuf_size = 0
ASSIGN	707:16	707:32	8	sp -> tbuf_size = 0
LVAL	707:16	707:16	9	sp -> tbuf_size
FIELD	707:16	707:20	10	sp -> tbuf_size
LEAF_NODE	707:16	707:16	11	sp
LEAF_NODE	707:18	707:18	11	->
LEAF_NODE	707:20	707:20	11	tbuf_size
ASSIGN_OP	707:30	707:30	9	=
LEAF_NODE	707:30	707:30	10	=
RVAL	707:32	707:32	9	0
FIELD	707:32	707:32	10	0
LEAF_NODE	707:32	707:32	11	0
LEAF_NODE	707:33	707:33	7	;
EXPR_STATEMENT	708:2	710:24	6	TIFFErrorExt ( tif -> tif_clientdata , module , "PixarLog compression can't handle bits depth/data format combination (depth: %d)" , td -> td_bitspersample ) ;
EXPR	708:2	708:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "PixarLog compression can't handle bits depth/data format combination (depth: %d)" , td -> td_bitspersample )
FUNCTION_CALL	708:2	710:23	8	TIFFErrorExt ( tif -> tif_clientdata , module , "PixarLog compression can't handle bits depth/data format combination (depth: %d)" , td -> td_bitspersample )
CALLEE	708:2	708:2	9	TIFFErrorExt
LEAF_NODE	708:2	708:2	10	TIFFErrorExt
LEAF_NODE	708:14	708:14	9	(
ARGUMENT	708:15	708:15	9	tif -> tif_clientdata
FIELD	708:15	708:20	10	tif -> tif_clientdata
LEAF_NODE	708:15	708:15	11	tif
LEAF_NODE	708:18	708:18	11	->
LEAF_NODE	708:20	708:20	11	tif_clientdata
LEAF_NODE	708:34	708:34	9	,
ARGUMENT	708:36	708:36	9	module
FIELD	708:36	708:36	10	module
LEAF_NODE	708:36	708:36	11	module
LEAF_NODE	708:42	708:42	9	,
ARGUMENT	709:3	709:3	9	"PixarLog compression can't handle bits depth/data format combination (depth: %d)"
FIELD	709:3	709:3	10	"PixarLog compression can't handle bits depth/data format combination (depth: %d)"
LEAF_NODE	709:3	709:3	11	"PixarLog compression can't handle bits depth/data format combination (depth: %d)"
LEAF_NODE	709:85	709:85	9	,
ARGUMENT	710:3	710:3	9	td -> td_bitspersample
FIELD	710:3	710:7	10	td -> td_bitspersample
LEAF_NODE	710:3	710:3	11	td
LEAF_NODE	710:5	710:5	11	->
LEAF_NODE	710:7	710:7	11	td_bitspersample
LEAF_NODE	710:23	710:23	9	)
LEAF_NODE	710:24	710:24	7	;
JUMP_STATEMENT	711:2	711:12	6	return ( 0 ) ;
KEYWORD	711:2	711:2	7	return
LEAF_NODE	711:2	711:2	8	return
DESTINATION	711:9	711:9	7	( 0 )
EXPR	711:9	711:11	8	( 0 )
LEAF_NODE	711:9	711:9	9	(
FIELD	711:10	711:10	9	0
LEAF_NODE	711:10	711:10	10	0
LEAF_NODE	711:11	711:11	9	)
LEAF_NODE	711:12	711:12	7	;
LEAF_NODE	712:1	712:1	5	}
SELECTION	714:1	714:39	3	
KEYWORD	714:1	714:1	4	if
LEAF_NODE	714:1	714:1	5	if
LEAF_NODE	714:4	714:4	4	(
CONDITION	714:5	714:5	4	inflateInit ( & sp -> stream ) != Z_OK
EXPR	714:5	714:33	5	inflateInit ( & sp -> stream ) != Z_OK
FUNCTION_CALL	714:5	714:28	6	inflateInit ( & sp -> stream )
CALLEE	714:5	714:5	7	inflateInit
LEAF_NODE	714:5	714:5	8	inflateInit
LEAF_NODE	714:16	714:16	7	(
ARGUMENT	714:17	714:17	7	& sp -> stream
UNARY_EXPR	714:17	714:18	8	& sp -> stream
UNARY_OPERATOR	714:17	714:17	9	&
LEAF_NODE	714:17	714:17	10	&
FIELD	714:18	714:22	9	sp -> stream
LEAF_NODE	714:18	714:18	10	sp
LEAF_NODE	714:20	714:20	10	->
LEAF_NODE	714:22	714:22	10	stream
LEAF_NODE	714:28	714:28	7	)
EQ_OPERATOR	714:30	714:30	6	!=
LEAF_NODE	714:30	714:30	7	!=
FIELD	714:33	714:33	6	Z_OK
LEAF_NODE	714:33	714:33	7	Z_OK
LEAF_NODE	714:37	714:37	4	)
STATEMENTS	714:39	720:1	4	
LEAF_NODE	714:39	714:39	5	{
STATEMENTS	715:16	719:2	5	
EXPR_STATEMENT	715:16	715:35	6	_TIFFfree ( sp -> tbuf ) ;
EXPR	715:16	715:16	7	_TIFFfree ( sp -> tbuf )
FUNCTION_CALL	715:16	715:34	8	_TIFFfree ( sp -> tbuf )
CALLEE	715:16	715:16	9	_TIFFfree
LEAF_NODE	715:16	715:16	10	_TIFFfree
LEAF_NODE	715:25	715:25	9	(
ARGUMENT	715:26	715:26	9	sp -> tbuf
FIELD	715:26	715:30	10	sp -> tbuf
LEAF_NODE	715:26	715:26	11	sp
LEAF_NODE	715:28	715:28	11	->
LEAF_NODE	715:30	715:30	11	tbuf
LEAF_NODE	715:34	715:34	9	)
LEAF_NODE	715:35	715:35	7	;
EXPR_STATEMENT	716:16	716:31	6	sp -> tbuf = NULL ;
EXPR	716:16	716:16	7	sp -> tbuf = NULL
ASSIGN	716:16	716:27	8	sp -> tbuf = NULL
LVAL	716:16	716:16	9	sp -> tbuf
FIELD	716:16	716:20	10	sp -> tbuf
LEAF_NODE	716:16	716:16	11	sp
LEAF_NODE	716:18	716:18	11	->
LEAF_NODE	716:20	716:20	11	tbuf
ASSIGN_OP	716:25	716:25	9	=
LEAF_NODE	716:25	716:25	10	=
RVAL	716:27	716:27	9	NULL
FIELD	716:27	716:27	10	NULL
LEAF_NODE	716:27	716:27	11	NULL
LEAF_NODE	716:31	716:31	7	;
EXPR_STATEMENT	717:16	717:33	6	sp -> tbuf_size = 0 ;
EXPR	717:16	717:16	7	sp -> tbuf_size = 0
ASSIGN	717:16	717:32	8	sp -> tbuf_size = 0
LVAL	717:16	717:16	9	sp -> tbuf_size
FIELD	717:16	717:20	10	sp -> tbuf_size
LEAF_NODE	717:16	717:16	11	sp
LEAF_NODE	717:18	717:18	11	->
LEAF_NODE	717:20	717:20	11	tbuf_size
ASSIGN_OP	717:30	717:30	9	=
LEAF_NODE	717:30	717:30	10	=
RVAL	717:32	717:32	9	0
FIELD	717:32	717:32	10	0
LEAF_NODE	717:32	717:32	11	0
LEAF_NODE	717:33	717:33	7	;
EXPR_STATEMENT	718:2	718:93	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , sp -> stream . msg ? sp -> stream . msg : "(null)" ) ;
EXPR	718:2	718:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
FUNCTION_CALL	718:2	718:92	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
CALLEE	718:2	718:2	9	TIFFErrorExt
LEAF_NODE	718:2	718:2	10	TIFFErrorExt
LEAF_NODE	718:14	718:14	9	(
ARGUMENT	718:15	718:15	9	tif -> tif_clientdata
FIELD	718:15	718:20	10	tif -> tif_clientdata
LEAF_NODE	718:15	718:15	11	tif
LEAF_NODE	718:18	718:18	11	->
LEAF_NODE	718:20	718:20	11	tif_clientdata
LEAF_NODE	718:34	718:34	9	,
ARGUMENT	718:36	718:36	9	module
FIELD	718:36	718:36	10	module
LEAF_NODE	718:36	718:36	11	module
LEAF_NODE	718:42	718:42	9	,
ARGUMENT	718:44	718:44	9	"%s"
FIELD	718:44	718:44	10	"%s"
LEAF_NODE	718:44	718:44	11	"%s"
LEAF_NODE	718:48	718:48	9	,
ARGUMENT	718:50	718:50	9	sp -> stream . msg ? sp -> stream . msg : "(null)"
COND_EXPR	718:50	718:84	10	sp -> stream . msg ? sp -> stream . msg : "(null)"
CONDITION	718:50	718:50	11	sp -> stream . msg
FIELD	718:50	718:61	12	sp -> stream . msg
LEAF_NODE	718:50	718:50	13	sp
LEAF_NODE	718:52	718:52	13	->
LEAF_NODE	718:54	718:54	13	stream
LEAF_NODE	718:60	718:60	13	.
LEAF_NODE	718:61	718:61	13	msg
LEAF_NODE	718:65	718:65	11	?
EXPR	718:67	718:67	11	sp -> stream . msg
FIELD	718:67	718:78	12	sp -> stream . msg
LEAF_NODE	718:67	718:67	13	sp
LEAF_NODE	718:69	718:69	13	->
LEAF_NODE	718:71	718:71	13	stream
LEAF_NODE	718:77	718:77	13	.
LEAF_NODE	718:78	718:78	13	msg
LEAF_NODE	718:82	718:82	11	:
FIELD	718:84	718:84	11	"(null)"
LEAF_NODE	718:84	718:84	12	"(null)"
LEAF_NODE	718:92	718:92	9	)
LEAF_NODE	718:93	718:93	7	;
JUMP_STATEMENT	719:2	719:12	6	return ( 0 ) ;
KEYWORD	719:2	719:2	7	return
LEAF_NODE	719:2	719:2	8	return
DESTINATION	719:9	719:9	7	( 0 )
EXPR	719:9	719:11	8	( 0 )
LEAF_NODE	719:9	719:9	9	(
FIELD	719:10	719:10	9	0
LEAF_NODE	719:10	719:10	10	0
LEAF_NODE	719:11	719:11	9	)
LEAF_NODE	719:12	719:12	7	;
LEAF_NODE	720:1	720:1	5	}
SELECTION	720:3	720:8	3	
KEYWORD	720:3	720:3	4	else
LEAF_NODE	720:3	720:3	5	else
STATEMENTS	720:8	723:1	4	
LEAF_NODE	720:8	720:8	5	{
STATEMENTS	721:2	722:2	5	
EXPR_STATEMENT	721:2	721:27	6	sp -> state |= PLSTATE_INIT ;
EXPR	721:2	721:2	7	sp -> state |= PLSTATE_INIT
ASSIGN	721:2	721:15	8	sp -> state |= PLSTATE_INIT
LVAL	721:2	721:2	9	sp -> state
FIELD	721:2	721:6	10	sp -> state
LEAF_NODE	721:2	721:2	11	sp
LEAF_NODE	721:4	721:4	11	->
LEAF_NODE	721:6	721:6	11	state
ASSIGN_OP	721:12	721:12	9	|=
LEAF_NODE	721:12	721:12	10	|=
RVAL	721:15	721:15	9	PLSTATE_INIT
FIELD	721:15	721:15	10	PLSTATE_INIT
LEAF_NODE	721:15	721:15	11	PLSTATE_INIT
LEAF_NODE	721:27	721:27	7	;
JUMP_STATEMENT	722:2	722:12	6	return ( 1 ) ;
KEYWORD	722:2	722:2	7	return
LEAF_NODE	722:2	722:2	8	return
DESTINATION	722:9	722:9	7	( 1 )
EXPR	722:9	722:11	8	( 1 )
LEAF_NODE	722:9	722:9	9	(
FIELD	722:10	722:10	9	1
LEAF_NODE	722:10	722:10	10	1
LEAF_NODE	722:11	722:11	9	)
LEAF_NODE	722:12	722:12	7	;
LEAF_NODE	723:1	723:1	5	}
LEAF_NODE	724:0	724:0	2	}
FUNCTION_DEF	729:0	749:0	1	
RETURN_TYPE	729:0	729:7	2	static int
LEAF_NODE	729:0	729:0	3	static
TYPE_NAME	729:7	729:7	3	int
LEAF_NODE	729:7	729:7	4	int
FUNCTION_NAME	730:0	730:0	2	PixarLogPreDecode
LEAF_NODE	730:0	730:0	3	PixarLogPreDecode
PARAMETER_LIST	730:17	730:37	2	( TIFF * tif , uint16 s )
LEAF_NODE	730:17	730:17	3	(
PARAMETER_DECL	730:18	730:24	3	TIFF * tif
TYPE	730:18	730:22	4	TIFF *
TYPE_NAME	730:18	730:18	5	TIFF
LEAF_NODE	730:18	730:18	6	TIFF
POINTER	730:22	730:22	5	*
LEAF_NODE	730:22	730:22	6	*
NAME	730:24	730:24	4	tif
LEAF_NODE	730:24	730:24	5	tif
LEAF_NODE	730:27	730:27	3	,
PARAMETER_DECL	730:29	730:36	3	uint16 s
TYPE	730:29	730:29	4	uint16
TYPE_NAME	730:29	730:29	5	uint16
LEAF_NODE	730:29	730:29	6	uint16
NAME	730:36	730:36	4	s
LEAF_NODE	730:36	730:36	5	s
LEAF_NODE	730:37	730:37	3	)
LEAF_NODE	731:0	731:0	2	{
STATEMENTS	732:1	748:1	2	
LEAF_NODE	732:1	732:1	3	static
SIMPLE_DECL	732:8	732:49	3	const char [ ] module ; module = "PixarLogPreDecode" ;
VAR_DECL	732:8	732:19	4	const char [ ] module ; module = "PixarLogPreDecode"
TYPE	732:8	732:25	5	const char [ ]
TYPE_NAME	732:8	732:14	6	const char
LEAF_NODE	732:8	732:8	7	const
LEAF_NODE	732:14	732:14	7	char
TYPE_SUFFIX	732:25	732:26	6	[ ]
LEAF_NODE	732:25	732:25	7	[
LEAF_NODE	732:26	732:26	7	]
NAME	732:19	732:19	5	module
LEAF_NODE	732:19	732:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	732:19	732:19	5	module = "PixarLogPreDecode"
ASSIGN	732:19	732:30	6	module = "PixarLogPreDecode"
LVAL	732:19	732:19	7	module
NAME	732:19	732:19	8	module
LEAF_NODE	732:19	732:19	9	module
ASSIGN_OP	732:28	732:28	7	=
LEAF_NODE	732:28	732:28	8	=
RVAL	732:30	732:30	7	"PixarLogPreDecode"
FIELD	732:30	732:30	8	"PixarLogPreDecode"
LEAF_NODE	732:30	732:30	9	"PixarLogPreDecode"
LEAF_NODE	732:49	732:49	4	;
SIMPLE_DECL	733:1	733:38	3	PixarLogState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	733:1	733:16	4	PixarLogState * sp ; sp = DecoderState ( tif )
TYPE	733:1	733:14	5	PixarLogState *
TYPE_NAME	733:1	733:1	6	PixarLogState
LEAF_NODE	733:1	733:1	7	PixarLogState
POINTER	733:14	733:14	6	*
LEAF_NODE	733:14	733:14	7	*
NAME	733:16	733:16	5	sp
LEAF_NODE	733:16	733:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	733:16	733:16	5	sp = DecoderState ( tif )
ASSIGN	733:16	733:21	6	sp = DecoderState ( tif )
LVAL	733:16	733:16	7	sp
NAME	733:16	733:16	8	sp
LEAF_NODE	733:16	733:16	9	sp
ASSIGN_OP	733:19	733:19	7	=
LEAF_NODE	733:19	733:19	8	=
RVAL	733:21	733:21	7	DecoderState ( tif )
FUNCTION_CALL	733:21	733:37	8	DecoderState ( tif )
CALLEE	733:21	733:21	9	DecoderState
LEAF_NODE	733:21	733:21	10	DecoderState
LEAF_NODE	733:33	733:33	9	(
ARGUMENT	733:34	733:34	9	tif
FIELD	733:34	733:34	10	tif
LEAF_NODE	733:34	733:34	11	tif
LEAF_NODE	733:37	733:37	9	)
LEAF_NODE	733:38	733:38	4	;
EXPR_STATEMENT	735:1	735:9	3	( void ) s ;
EXPR	735:1	735:8	4	( void ) s
LEAF_NODE	735:1	735:1	5	(
TYPE_NAME	735:2	735:2	5	void
LEAF_NODE	735:2	735:2	6	void
LEAF_NODE	735:6	735:6	5	)
FIELD	735:8	735:8	5	s
LEAF_NODE	735:8	735:8	6	s
LEAF_NODE	735:9	735:9	4	;
EXPR_STATEMENT	736:1	736:19	3	assert ( sp != NULL ) ;
EXPR	736:1	736:1	4	assert ( sp != NULL )
FUNCTION_CALL	736:1	736:18	5	assert ( sp != NULL )
CALLEE	736:1	736:1	6	assert
LEAF_NODE	736:1	736:1	7	assert
LEAF_NODE	736:7	736:7	6	(
ARGUMENT	736:8	736:14	6	sp != NULL
FIELD	736:8	736:8	7	sp
LEAF_NODE	736:8	736:8	8	sp
EQ_OPERATOR	736:11	736:11	7	!=
LEAF_NODE	736:11	736:11	8	!=
FIELD	736:14	736:14	7	NULL
LEAF_NODE	736:14	736:14	8	NULL
LEAF_NODE	736:18	736:18	6	)
LEAF_NODE	736:19	736:19	4	;
EXPR_STATEMENT	737:1	737:38	3	sp -> stream . next_in = tif -> tif_rawdata ;
EXPR	737:1	737:1	4	sp -> stream . next_in = tif -> tif_rawdata
ASSIGN	737:1	737:22	5	sp -> stream . next_in = tif -> tif_rawdata
LVAL	737:1	737:1	6	sp -> stream . next_in
FIELD	737:1	737:12	7	sp -> stream . next_in
LEAF_NODE	737:1	737:1	8	sp
LEAF_NODE	737:3	737:3	8	->
LEAF_NODE	737:5	737:5	8	stream
LEAF_NODE	737:11	737:11	8	.
LEAF_NODE	737:12	737:12	8	next_in
ASSIGN_OP	737:20	737:20	6	=
LEAF_NODE	737:20	737:20	7	=
RVAL	737:22	737:22	6	tif -> tif_rawdata
FIELD	737:22	737:27	7	tif -> tif_rawdata
LEAF_NODE	737:22	737:22	8	tif
LEAF_NODE	737:25	737:25	8	->
LEAF_NODE	737:27	737:27	8	tif_rawdata
LEAF_NODE	737:38	737:38	4	;
EXPR_STATEMENT	738:1	738:39	3	assert ( sizeof ( sp -> stream . avail_in ) == 4 ) ;
EXPR	738:1	738:1	4	assert ( sizeof ( sp -> stream . avail_in ) == 4 )
FUNCTION_CALL	738:1	738:38	5	assert ( sizeof ( sp -> stream . avail_in ) == 4 )
CALLEE	738:1	738:1	6	assert
LEAF_NODE	738:1	738:1	7	assert
LEAF_NODE	738:7	738:7	6	(
ARGUMENT	738:8	738:37	6	sizeof ( sp -> stream . avail_in ) == 4
FUNCTION_CALL	738:8	738:34	7	sizeof ( sp -> stream . avail_in )
CALLEE	738:8	738:8	8	sizeof
LEAF_NODE	738:8	738:8	9	sizeof
LEAF_NODE	738:14	738:14	8	(
ARGUMENT	738:15	738:15	8	sp -> stream . avail_in
FIELD	738:15	738:26	9	sp -> stream . avail_in
LEAF_NODE	738:15	738:15	10	sp
LEAF_NODE	738:17	738:17	10	->
LEAF_NODE	738:19	738:19	10	stream
LEAF_NODE	738:25	738:25	10	.
LEAF_NODE	738:26	738:26	10	avail_in
LEAF_NODE	738:34	738:34	8	)
EQ_OPERATOR	738:35	738:35	7	==
LEAF_NODE	738:35	738:35	8	==
FIELD	738:37	738:37	7	4
LEAF_NODE	738:37	738:37	8	4
LEAF_NODE	738:38	738:38	6	)
LEAF_NODE	738:39	738:39	4	;
EXPR_STATEMENT	742:1	742:44	3	sp -> stream . avail_in = ( uInt ) tif -> tif_rawcc ;
EXPR	742:1	742:1	4	sp -> stream . avail_in = ( uInt ) tif -> tif_rawcc
ASSIGN	742:1	742:23	5	sp -> stream . avail_in = ( uInt ) tif -> tif_rawcc
LVAL	742:1	742:1	6	sp -> stream . avail_in
FIELD	742:1	742:12	7	sp -> stream . avail_in
LEAF_NODE	742:1	742:1	8	sp
LEAF_NODE	742:3	742:3	8	->
LEAF_NODE	742:5	742:5	8	stream
LEAF_NODE	742:11	742:11	8	.
LEAF_NODE	742:12	742:12	8	avail_in
ASSIGN_OP	742:21	742:21	6	=
LEAF_NODE	742:21	742:21	7	=
RVAL	742:23	742:30	6	( uInt ) tif -> tif_rawcc
LEAF_NODE	742:23	742:23	7	(
TYPE_NAME	742:24	742:24	7	uInt
LEAF_NODE	742:24	742:24	8	uInt
LEAF_NODE	742:28	742:28	7	)
FIELD	742:30	742:35	7	tif -> tif_rawcc
LEAF_NODE	742:30	742:30	8	tif
LEAF_NODE	742:33	742:33	8	->
LEAF_NODE	742:35	742:35	8	tif_rawcc
LEAF_NODE	742:44	742:44	4	;
SELECTION	743:1	744:1	3	
KEYWORD	743:1	743:1	4	if
LEAF_NODE	743:1	743:1	5	if
LEAF_NODE	743:4	743:4	4	(
CONDITION	743:5	743:5	4	( tmsize_t ) sp -> stream . avail_in != tif -> tif_rawcc
EXPR	743:5	743:38	5	( tmsize_t ) sp -> stream . avail_in != tif -> tif_rawcc
LEAF_NODE	743:5	743:5	6	(
TYPE_NAME	743:6	743:6	6	tmsize_t
LEAF_NODE	743:6	743:6	7	tmsize_t
LEAF_NODE	743:14	743:14	6	)
FIELD	743:15	743:26	6	sp -> stream . avail_in
LEAF_NODE	743:15	743:15	7	sp
LEAF_NODE	743:17	743:17	7	->
LEAF_NODE	743:19	743:19	7	stream
LEAF_NODE	743:25	743:25	7	.
LEAF_NODE	743:26	743:26	7	avail_in
EQ_OPERATOR	743:35	743:35	6	!=
LEAF_NODE	743:35	743:35	7	!=
FIELD	743:38	743:43	6	tif -> tif_rawcc
LEAF_NODE	743:38	743:38	7	tif
LEAF_NODE	743:41	743:41	7	->
LEAF_NODE	743:43	743:43	7	tif_rawcc
LEAF_NODE	743:52	743:52	4	)
STATEMENTS	744:1	747:1	4	
LEAF_NODE	744:1	744:1	5	{
STATEMENTS	745:2	746:2	5	
EXPR_STATEMENT	745:2	745:86	6	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" ) ;
EXPR	745:2	745:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" )
FUNCTION_CALL	745:2	745:85	8	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" )
CALLEE	745:2	745:2	9	TIFFErrorExt
LEAF_NODE	745:2	745:2	10	TIFFErrorExt
LEAF_NODE	745:14	745:14	9	(
ARGUMENT	745:15	745:15	9	tif -> tif_clientdata
FIELD	745:15	745:20	10	tif -> tif_clientdata
LEAF_NODE	745:15	745:15	11	tif
LEAF_NODE	745:18	745:18	11	->
LEAF_NODE	745:20	745:20	11	tif_clientdata
LEAF_NODE	745:34	745:34	9	,
ARGUMENT	745:36	745:36	9	module
FIELD	745:36	745:36	10	module
LEAF_NODE	745:36	745:36	11	module
LEAF_NODE	745:42	745:42	9	,
ARGUMENT	745:44	745:44	9	"ZLib cannot deal with buffers this size"
FIELD	745:44	745:44	10	"ZLib cannot deal with buffers this size"
LEAF_NODE	745:44	745:44	11	"ZLib cannot deal with buffers this size"
LEAF_NODE	745:85	745:85	9	)
LEAF_NODE	745:86	745:86	7	;
JUMP_STATEMENT	746:2	746:12	6	return ( 0 ) ;
KEYWORD	746:2	746:2	7	return
LEAF_NODE	746:2	746:2	8	return
DESTINATION	746:9	746:9	7	( 0 )
EXPR	746:9	746:11	8	( 0 )
LEAF_NODE	746:9	746:9	9	(
FIELD	746:10	746:10	9	0
LEAF_NODE	746:10	746:10	10	0
LEAF_NODE	746:11	746:11	9	)
LEAF_NODE	746:12	746:12	7	;
LEAF_NODE	747:1	747:1	5	}
JUMP_STATEMENT	748:1	748:43	3	return ( inflateReset ( & sp -> stream ) == Z_OK ) ;
KEYWORD	748:1	748:1	4	return
LEAF_NODE	748:1	748:1	5	return
DESTINATION	748:8	748:8	4	( inflateReset ( & sp -> stream ) == Z_OK )
EXPR	748:8	748:42	5	( inflateReset ( & sp -> stream ) == Z_OK )
LEAF_NODE	748:8	748:8	6	(
FUNCTION_CALL	748:9	748:33	6	inflateReset ( & sp -> stream )
CALLEE	748:9	748:9	7	inflateReset
LEAF_NODE	748:9	748:9	8	inflateReset
LEAF_NODE	748:21	748:21	7	(
ARGUMENT	748:22	748:22	7	& sp -> stream
UNARY_EXPR	748:22	748:23	8	& sp -> stream
UNARY_OPERATOR	748:22	748:22	9	&
LEAF_NODE	748:22	748:22	10	&
FIELD	748:23	748:27	9	sp -> stream
LEAF_NODE	748:23	748:23	10	sp
LEAF_NODE	748:25	748:25	10	->
LEAF_NODE	748:27	748:27	10	stream
LEAF_NODE	748:33	748:33	7	)
EQ_OPERATOR	748:35	748:35	6	==
LEAF_NODE	748:35	748:35	7	==
FIELD	748:38	748:38	6	Z_OK
LEAF_NODE	748:38	748:38	7	Z_OK
LEAF_NODE	748:42	748:42	6	)
LEAF_NODE	748:43	748:43	4	;
LEAF_NODE	749:0	749:0	2	}
FUNCTION_DEF	751:0	894:0	1	
RETURN_TYPE	751:0	751:7	2	static int
LEAF_NODE	751:0	751:0	3	static
TYPE_NAME	751:7	751:7	3	int
LEAF_NODE	751:7	751:7	4	int
FUNCTION_NAME	752:0	752:0	2	PixarLogDecode
LEAF_NODE	752:0	752:0	3	PixarLogDecode
PARAMETER_LIST	752:14	752:59	2	( TIFF * tif , uint8 * op , tmsize_t occ , uint16 s )
LEAF_NODE	752:14	752:14	3	(
PARAMETER_DECL	752:15	752:21	3	TIFF * tif
TYPE	752:15	752:19	4	TIFF *
TYPE_NAME	752:15	752:15	5	TIFF
LEAF_NODE	752:15	752:15	6	TIFF
POINTER	752:19	752:19	5	*
LEAF_NODE	752:19	752:19	6	*
NAME	752:21	752:21	4	tif
LEAF_NODE	752:21	752:21	5	tif
LEAF_NODE	752:24	752:24	3	,
PARAMETER_DECL	752:26	752:33	3	uint8 * op
TYPE	752:26	752:31	4	uint8 *
TYPE_NAME	752:26	752:26	5	uint8
LEAF_NODE	752:26	752:26	6	uint8
POINTER	752:31	752:31	5	*
LEAF_NODE	752:31	752:31	6	*
NAME	752:33	752:33	4	op
LEAF_NODE	752:33	752:33	5	op
LEAF_NODE	752:35	752:35	3	,
PARAMETER_DECL	752:37	752:46	3	tmsize_t occ
TYPE	752:37	752:37	4	tmsize_t
TYPE_NAME	752:37	752:37	5	tmsize_t
LEAF_NODE	752:37	752:37	6	tmsize_t
NAME	752:46	752:46	4	occ
LEAF_NODE	752:46	752:46	5	occ
LEAF_NODE	752:49	752:49	3	,
PARAMETER_DECL	752:51	752:58	3	uint16 s
TYPE	752:51	752:51	4	uint16
TYPE_NAME	752:51	752:51	5	uint16
LEAF_NODE	752:51	752:51	6	uint16
NAME	752:58	752:58	4	s
LEAF_NODE	752:58	752:58	5	s
LEAF_NODE	752:59	752:59	3	)
LEAF_NODE	753:0	753:0	2	{
STATEMENTS	754:1	893:1	2	
LEAF_NODE	754:1	754:1	3	static
SIMPLE_DECL	754:8	754:46	3	const char [ ] module ; module = "PixarLogDecode" ;
VAR_DECL	754:8	754:19	4	const char [ ] module ; module = "PixarLogDecode"
TYPE	754:8	754:25	5	const char [ ]
TYPE_NAME	754:8	754:14	6	const char
LEAF_NODE	754:8	754:8	7	const
LEAF_NODE	754:14	754:14	7	char
TYPE_SUFFIX	754:25	754:26	6	[ ]
LEAF_NODE	754:25	754:25	7	[
LEAF_NODE	754:26	754:26	7	]
NAME	754:19	754:19	5	module
LEAF_NODE	754:19	754:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	754:19	754:19	5	module = "PixarLogDecode"
ASSIGN	754:19	754:30	6	module = "PixarLogDecode"
LVAL	754:19	754:19	7	module
NAME	754:19	754:19	8	module
LEAF_NODE	754:19	754:19	9	module
ASSIGN_OP	754:28	754:28	7	=
LEAF_NODE	754:28	754:28	8	=
RVAL	754:30	754:30	7	"PixarLogDecode"
FIELD	754:30	754:30	8	"PixarLogDecode"
LEAF_NODE	754:30	754:30	9	"PixarLogDecode"
LEAF_NODE	754:46	754:46	4	;
SIMPLE_DECL	755:1	755:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	755:1	755:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	755:1	755:15	5	TIFFDirectory *
TYPE_NAME	755:1	755:1	6	TIFFDirectory
LEAF_NODE	755:1	755:1	7	TIFFDirectory
POINTER	755:15	755:15	6	*
LEAF_NODE	755:15	755:15	7	*
NAME	755:16	755:16	5	td
LEAF_NODE	755:16	755:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	755:16	755:16	5	td = & tif -> tif_dir
ASSIGN	755:16	755:21	6	td = & tif -> tif_dir
LVAL	755:16	755:16	7	td
NAME	755:16	755:16	8	td
LEAF_NODE	755:16	755:16	9	td
ASSIGN_OP	755:19	755:19	7	=
LEAF_NODE	755:19	755:19	8	=
RVAL	755:21	755:21	7	& tif -> tif_dir
UNARY_EXPR	755:21	755:22	8	& tif -> tif_dir
UNARY_OPERATOR	755:21	755:21	9	&
LEAF_NODE	755:21	755:21	10	&
FIELD	755:22	755:27	9	tif -> tif_dir
LEAF_NODE	755:22	755:22	10	tif
LEAF_NODE	755:25	755:25	10	->
LEAF_NODE	755:27	755:27	10	tif_dir
LEAF_NODE	755:34	755:34	4	;
SIMPLE_DECL	756:1	756:38	3	PixarLogState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	756:1	756:16	4	PixarLogState * sp ; sp = DecoderState ( tif )
TYPE	756:1	756:14	5	PixarLogState *
TYPE_NAME	756:1	756:1	6	PixarLogState
LEAF_NODE	756:1	756:1	7	PixarLogState
POINTER	756:14	756:14	6	*
LEAF_NODE	756:14	756:14	7	*
NAME	756:16	756:16	5	sp
LEAF_NODE	756:16	756:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	756:16	756:16	5	sp = DecoderState ( tif )
ASSIGN	756:16	756:21	6	sp = DecoderState ( tif )
LVAL	756:16	756:16	7	sp
NAME	756:16	756:16	8	sp
LEAF_NODE	756:16	756:16	9	sp
ASSIGN_OP	756:19	756:19	7	=
LEAF_NODE	756:19	756:19	8	=
RVAL	756:21	756:21	7	DecoderState ( tif )
FUNCTION_CALL	756:21	756:37	8	DecoderState ( tif )
CALLEE	756:21	756:21	9	DecoderState
LEAF_NODE	756:21	756:21	10	DecoderState
LEAF_NODE	756:33	756:33	9	(
ARGUMENT	756:34	756:34	9	tif
FIELD	756:34	756:34	10	tif
LEAF_NODE	756:34	756:34	11	tif
LEAF_NODE	756:37	756:37	9	)
LEAF_NODE	756:38	756:38	4	;
SIMPLE_DECL	757:1	757:11	3	tmsize_t i ;
VAR_DECL	757:1	757:10	4	tmsize_t i
TYPE	757:1	757:1	5	tmsize_t
TYPE_NAME	757:1	757:1	6	tmsize_t
LEAF_NODE	757:1	757:1	7	tmsize_t
NAME	757:10	757:10	5	i
LEAF_NODE	757:10	757:10	6	i
LEAF_NODE	757:11	757:11	4	;
SIMPLE_DECL	758:1	758:18	3	tmsize_t nsamples ;
VAR_DECL	758:1	758:10	4	tmsize_t nsamples
TYPE	758:1	758:1	5	tmsize_t
TYPE_NAME	758:1	758:1	6	tmsize_t
LEAF_NODE	758:1	758:1	7	tmsize_t
NAME	758:10	758:10	5	nsamples
LEAF_NODE	758:10	758:10	6	nsamples
LEAF_NODE	758:18	758:18	4	;
SIMPLE_DECL	759:1	759:9	3	int llen ;
VAR_DECL	759:1	759:5	4	int llen
TYPE	759:1	759:1	5	int
TYPE_NAME	759:1	759:1	6	int
LEAF_NODE	759:1	759:1	7	int
NAME	759:5	759:5	5	llen
LEAF_NODE	759:5	759:5	6	llen
LEAF_NODE	759:9	759:9	4	;
SIMPLE_DECL	760:1	760:11	3	uint16 * up ;
VAR_DECL	760:1	760:9	4	uint16 * up
TYPE	760:1	760:8	5	uint16 *
TYPE_NAME	760:1	760:1	6	uint16
LEAF_NODE	760:1	760:1	7	uint16
POINTER	760:8	760:8	6	*
LEAF_NODE	760:8	760:8	7	*
NAME	760:9	760:9	5	up
LEAF_NODE	760:9	760:9	6	up
LEAF_NODE	760:11	760:11	4	;
SELECTION	762:1	762:27	3	
KEYWORD	762:1	762:1	4	switch
LEAF_NODE	762:1	762:1	5	switch
LEAF_NODE	762:8	762:8	4	(
CONDITION	762:9	762:9	4	sp -> user_datafmt
EXPR	762:9	762:9	5	sp -> user_datafmt
FIELD	762:9	762:13	6	sp -> user_datafmt
LEAF_NODE	762:9	762:9	7	sp
LEAF_NODE	762:11	762:11	7	->
LEAF_NODE	762:13	762:13	7	user_datafmt
LEAF_NODE	762:25	762:25	4	)
STATEMENTS	762:27	780:1	4	
LEAF_NODE	762:27	762:27	5	{
STATEMENTS	763:1	779:2	5	
LABEL	763:1	763:27	6	case PIXARLOGDATAFMT_FLOAT :
LEAF_NODE	763:1	763:1	7	case
LEAF_NODE	763:6	763:6	7	PIXARLOGDATAFMT_FLOAT
LEAF_NODE	763:27	763:27	7	:
EXPR_STATEMENT	764:2	764:32	6	nsamples = occ / sizeof ( float ) ;
EXPR	764:2	764:2	7	nsamples = occ / sizeof ( float )
ASSIGN	764:2	764:13	8	nsamples = occ / sizeof ( float )
LVAL	764:2	764:2	9	nsamples
FIELD	764:2	764:2	10	nsamples
LEAF_NODE	764:2	764:2	11	nsamples
ASSIGN_OP	764:11	764:11	9	=
LEAF_NODE	764:11	764:11	10	=
RVAL	764:13	764:19	9	occ / sizeof ( float )
FIELD	764:13	764:13	10	occ
LEAF_NODE	764:13	764:13	11	occ
LEAF_NODE	764:17	764:17	10	/
FUNCTION_CALL	764:19	764:31	10	sizeof ( float )
CALLEE	764:19	764:19	11	sizeof
LEAF_NODE	764:19	764:19	12	sizeof
LEAF_NODE	764:25	764:25	11	(
ARGUMENT	764:26	764:26	11	float
FIELD	764:26	764:26	12	float
LEAF_NODE	764:26	764:26	13	float
LEAF_NODE	764:31	764:31	11	)
LEAF_NODE	764:32	764:32	7	;
JUMP_STATEMENT	765:2	765:7	6	break DESTINATION ;
KEYWORD	765:2	765:2	7	break
LEAF_NODE	765:2	765:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	765:7	765:7	7	;
LABEL	766:1	766:27	6	case PIXARLOGDATAFMT_16BIT :
LEAF_NODE	766:1	766:1	7	case
LEAF_NODE	766:6	766:6	7	PIXARLOGDATAFMT_16BIT
LEAF_NODE	766:27	766:27	7	:
LABEL	767:1	767:32	6	case PIXARLOGDATAFMT_12BITPICIO :
LEAF_NODE	767:1	767:1	7	case
LEAF_NODE	767:6	767:6	7	PIXARLOGDATAFMT_12BITPICIO
LEAF_NODE	767:32	767:32	7	:
LABEL	768:1	768:30	6	case PIXARLOGDATAFMT_11BITLOG :
LEAF_NODE	768:1	768:1	7	case
LEAF_NODE	768:6	768:6	7	PIXARLOGDATAFMT_11BITLOG
LEAF_NODE	768:30	768:30	7	:
EXPR_STATEMENT	769:2	769:33	6	nsamples = occ / sizeof ( uint16 ) ;
EXPR	769:2	769:2	7	nsamples = occ / sizeof ( uint16 )
ASSIGN	769:2	769:13	8	nsamples = occ / sizeof ( uint16 )
LVAL	769:2	769:2	9	nsamples
FIELD	769:2	769:2	10	nsamples
LEAF_NODE	769:2	769:2	11	nsamples
ASSIGN_OP	769:11	769:11	9	=
LEAF_NODE	769:11	769:11	10	=
RVAL	769:13	769:19	9	occ / sizeof ( uint16 )
FIELD	769:13	769:13	10	occ
LEAF_NODE	769:13	769:13	11	occ
LEAF_NODE	769:17	769:17	10	/
FUNCTION_CALL	769:19	769:32	10	sizeof ( uint16 )
CALLEE	769:19	769:19	11	sizeof
LEAF_NODE	769:19	769:19	12	sizeof
LEAF_NODE	769:25	769:25	11	(
ARGUMENT	769:26	769:26	11	uint16
FIELD	769:26	769:26	12	uint16
LEAF_NODE	769:26	769:26	13	uint16
LEAF_NODE	769:32	769:32	11	)
LEAF_NODE	769:33	769:33	7	;
JUMP_STATEMENT	770:2	770:7	6	break DESTINATION ;
KEYWORD	770:2	770:2	7	break
LEAF_NODE	770:2	770:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	770:7	770:7	7	;
LABEL	771:1	771:26	6	case PIXARLOGDATAFMT_8BIT :
LEAF_NODE	771:1	771:1	7	case
LEAF_NODE	771:6	771:6	7	PIXARLOGDATAFMT_8BIT
LEAF_NODE	771:26	771:26	7	:
LABEL	772:1	772:30	6	case PIXARLOGDATAFMT_8BITABGR :
LEAF_NODE	772:1	772:1	7	case
LEAF_NODE	772:6	772:6	7	PIXARLOGDATAFMT_8BITABGR
LEAF_NODE	772:30	772:30	7	:
EXPR_STATEMENT	773:2	773:16	6	nsamples = occ ;
EXPR	773:2	773:2	7	nsamples = occ
ASSIGN	773:2	773:13	8	nsamples = occ
LVAL	773:2	773:2	9	nsamples
FIELD	773:2	773:2	10	nsamples
LEAF_NODE	773:2	773:2	11	nsamples
ASSIGN_OP	773:11	773:11	9	=
LEAF_NODE	773:11	773:11	10	=
RVAL	773:13	773:13	9	occ
FIELD	773:13	773:13	10	occ
LEAF_NODE	773:13	773:13	11	occ
LEAF_NODE	773:16	773:16	7	;
JUMP_STATEMENT	774:2	774:7	6	break DESTINATION ;
KEYWORD	774:2	774:2	7	break
LEAF_NODE	774:2	774:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	774:7	774:7	7	;
LABEL	775:1	775:8	6	default :
LEAF_NODE	775:1	775:1	7	default
LEAF_NODE	775:8	775:8	7	:
EXPR_STATEMENT	776:2	778:24	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%d bit input not supported in PixarLog" , td -> td_bitspersample ) ;
EXPR	776:2	776:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%d bit input not supported in PixarLog" , td -> td_bitspersample )
FUNCTION_CALL	776:2	778:23	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%d bit input not supported in PixarLog" , td -> td_bitspersample )
CALLEE	776:2	776:2	9	TIFFErrorExt
LEAF_NODE	776:2	776:2	10	TIFFErrorExt
LEAF_NODE	776:14	776:14	9	(
ARGUMENT	776:15	776:15	9	tif -> tif_clientdata
FIELD	776:15	776:20	10	tif -> tif_clientdata
LEAF_NODE	776:15	776:15	11	tif
LEAF_NODE	776:18	776:18	11	->
LEAF_NODE	776:20	776:20	11	tif_clientdata
LEAF_NODE	776:34	776:34	9	,
ARGUMENT	776:36	776:36	9	module
FIELD	776:36	776:36	10	module
LEAF_NODE	776:36	776:36	11	module
LEAF_NODE	776:42	776:42	9	,
ARGUMENT	777:3	777:3	9	"%d bit input not supported in PixarLog"
FIELD	777:3	777:3	10	"%d bit input not supported in PixarLog"
LEAF_NODE	777:3	777:3	11	"%d bit input not supported in PixarLog"
LEAF_NODE	777:43	777:43	9	,
ARGUMENT	778:3	778:3	9	td -> td_bitspersample
FIELD	778:3	778:7	10	td -> td_bitspersample
LEAF_NODE	778:3	778:3	11	td
LEAF_NODE	778:5	778:5	11	->
LEAF_NODE	778:7	778:7	11	td_bitspersample
LEAF_NODE	778:23	778:23	9	)
LEAF_NODE	778:24	778:24	7	;
JUMP_STATEMENT	779:2	779:10	6	return 0 ;
KEYWORD	779:2	779:2	7	return
LEAF_NODE	779:2	779:2	8	return
DESTINATION	779:9	779:9	7	0
EXPR	779:9	779:9	8	0
FIELD	779:9	779:9	9	0
LEAF_NODE	779:9	779:9	10	0
LEAF_NODE	779:10	779:10	7	;
LEAF_NODE	780:1	780:1	5	}
EXPR_STATEMENT	782:1	782:38	3	llen = sp -> stride * td -> td_imagewidth ;
EXPR	782:1	782:1	4	llen = sp -> stride * td -> td_imagewidth
ASSIGN	782:1	782:8	5	llen = sp -> stride * td -> td_imagewidth
LVAL	782:1	782:1	6	llen
FIELD	782:1	782:1	7	llen
LEAF_NODE	782:1	782:1	8	llen
ASSIGN_OP	782:6	782:6	6	=
LEAF_NODE	782:6	782:6	7	=
RVAL	782:8	782:21	6	sp -> stride * td -> td_imagewidth
FIELD	782:8	782:12	7	sp -> stride
LEAF_NODE	782:8	782:8	8	sp
LEAF_NODE	782:10	782:10	8	->
LEAF_NODE	782:12	782:12	8	stride
LEAF_NODE	782:19	782:19	7	*
FIELD	782:21	782:25	7	td -> td_imagewidth
LEAF_NODE	782:21	782:21	8	td
LEAF_NODE	782:23	782:23	8	->
LEAF_NODE	782:25	782:25	8	td_imagewidth
LEAF_NODE	782:38	782:38	4	;
EXPR_STATEMENT	784:1	784:9	3	( void ) s ;
EXPR	784:1	784:8	4	( void ) s
LEAF_NODE	784:1	784:1	5	(
TYPE_NAME	784:2	784:2	5	void
LEAF_NODE	784:2	784:2	6	void
LEAF_NODE	784:6	784:6	5	)
FIELD	784:8	784:8	5	s
LEAF_NODE	784:8	784:8	6	s
LEAF_NODE	784:9	784:9	4	;
EXPR_STATEMENT	785:1	785:19	3	assert ( sp != NULL ) ;
EXPR	785:1	785:1	4	assert ( sp != NULL )
FUNCTION_CALL	785:1	785:18	5	assert ( sp != NULL )
CALLEE	785:1	785:1	6	assert
LEAF_NODE	785:1	785:1	7	assert
LEAF_NODE	785:7	785:7	6	(
ARGUMENT	785:8	785:14	6	sp != NULL
FIELD	785:8	785:8	7	sp
LEAF_NODE	785:8	785:8	8	sp
EQ_OPERATOR	785:11	785:11	7	!=
LEAF_NODE	785:11	785:11	8	!=
FIELD	785:14	785:14	7	NULL
LEAF_NODE	785:14	785:14	8	NULL
LEAF_NODE	785:18	785:18	6	)
LEAF_NODE	785:19	785:19	4	;
EXPR_STATEMENT	787:8	787:43	3	sp -> stream . next_in = tif -> tif_rawcp ;
EXPR	787:8	787:8	4	sp -> stream . next_in = tif -> tif_rawcp
ASSIGN	787:8	787:29	5	sp -> stream . next_in = tif -> tif_rawcp
LVAL	787:8	787:8	6	sp -> stream . next_in
FIELD	787:8	787:19	7	sp -> stream . next_in
LEAF_NODE	787:8	787:8	8	sp
LEAF_NODE	787:10	787:10	8	->
LEAF_NODE	787:12	787:12	8	stream
LEAF_NODE	787:18	787:18	8	.
LEAF_NODE	787:19	787:19	8	next_in
ASSIGN_OP	787:27	787:27	6	=
LEAF_NODE	787:27	787:27	7	=
RVAL	787:29	787:29	6	tif -> tif_rawcp
FIELD	787:29	787:34	7	tif -> tif_rawcp
LEAF_NODE	787:29	787:29	8	tif
LEAF_NODE	787:32	787:32	8	->
LEAF_NODE	787:34	787:34	8	tif_rawcp
LEAF_NODE	787:43	787:43	4	;
EXPR_STATEMENT	788:1	788:44	3	sp -> stream . avail_in = ( uInt ) tif -> tif_rawcc ;
EXPR	788:1	788:1	4	sp -> stream . avail_in = ( uInt ) tif -> tif_rawcc
ASSIGN	788:1	788:23	5	sp -> stream . avail_in = ( uInt ) tif -> tif_rawcc
LVAL	788:1	788:1	6	sp -> stream . avail_in
FIELD	788:1	788:12	7	sp -> stream . avail_in
LEAF_NODE	788:1	788:1	8	sp
LEAF_NODE	788:3	788:3	8	->
LEAF_NODE	788:5	788:5	8	stream
LEAF_NODE	788:11	788:11	8	.
LEAF_NODE	788:12	788:12	8	avail_in
ASSIGN_OP	788:21	788:21	6	=
LEAF_NODE	788:21	788:21	7	=
RVAL	788:23	788:30	6	( uInt ) tif -> tif_rawcc
LEAF_NODE	788:23	788:23	7	(
TYPE_NAME	788:24	788:24	7	uInt
LEAF_NODE	788:24	788:24	8	uInt
LEAF_NODE	788:28	788:28	7	)
FIELD	788:30	788:35	7	tif -> tif_rawcc
LEAF_NODE	788:30	788:30	8	tif
LEAF_NODE	788:33	788:33	8	->
LEAF_NODE	788:35	788:35	8	tif_rawcc
LEAF_NODE	788:44	788:44	4	;
EXPR_STATEMENT	790:1	790:49	3	sp -> stream . next_out = ( unsigned char * ) sp -> tbuf ;
EXPR	790:1	790:1	4	sp -> stream . next_out = ( unsigned char * ) sp -> tbuf
ASSIGN	790:1	790:23	5	sp -> stream . next_out = ( unsigned char * ) sp -> tbuf
LVAL	790:1	790:1	6	sp -> stream . next_out
FIELD	790:1	790:12	7	sp -> stream . next_out
LEAF_NODE	790:1	790:1	8	sp
LEAF_NODE	790:3	790:3	8	->
LEAF_NODE	790:5	790:5	8	stream
LEAF_NODE	790:11	790:11	8	.
LEAF_NODE	790:12	790:12	8	next_out
ASSIGN_OP	790:21	790:21	6	=
LEAF_NODE	790:21	790:21	7	=
RVAL	790:23	790:41	6	( unsigned char * ) sp -> tbuf
LEAF_NODE	790:23	790:23	7	(
TYPE_NAME	790:24	790:33	7	unsigned char
LEAF_NODE	790:24	790:24	8	unsigned
LEAF_NODE	790:33	790:33	8	char
LEAF_NODE	790:38	790:38	7	*
LEAF_NODE	790:39	790:39	7	)
FIELD	790:41	790:45	7	sp -> tbuf
LEAF_NODE	790:41	790:41	8	sp
LEAF_NODE	790:43	790:43	8	->
LEAF_NODE	790:45	790:45	8	tbuf
LEAF_NODE	790:49	790:49	4	;
EXPR_STATEMENT	791:1	791:40	3	assert ( sizeof ( sp -> stream . avail_out ) == 4 ) ;
EXPR	791:1	791:1	4	assert ( sizeof ( sp -> stream . avail_out ) == 4 )
FUNCTION_CALL	791:1	791:39	5	assert ( sizeof ( sp -> stream . avail_out ) == 4 )
CALLEE	791:1	791:1	6	assert
LEAF_NODE	791:1	791:1	7	assert
LEAF_NODE	791:7	791:7	6	(
ARGUMENT	791:8	791:38	6	sizeof ( sp -> stream . avail_out ) == 4
FUNCTION_CALL	791:8	791:35	7	sizeof ( sp -> stream . avail_out )
CALLEE	791:8	791:8	8	sizeof
LEAF_NODE	791:8	791:8	9	sizeof
LEAF_NODE	791:14	791:14	8	(
ARGUMENT	791:15	791:15	8	sp -> stream . avail_out
FIELD	791:15	791:26	9	sp -> stream . avail_out
LEAF_NODE	791:15	791:15	10	sp
LEAF_NODE	791:17	791:17	10	->
LEAF_NODE	791:19	791:19	10	stream
LEAF_NODE	791:25	791:25	10	.
LEAF_NODE	791:26	791:26	10	avail_out
LEAF_NODE	791:35	791:35	8	)
EQ_OPERATOR	791:36	791:36	7	==
LEAF_NODE	791:36	791:36	8	==
FIELD	791:38	791:38	7	4
LEAF_NODE	791:38	791:38	8	4
LEAF_NODE	791:39	791:39	6	)
LEAF_NODE	791:40	791:40	4	;
EXPR_STATEMENT	795:1	795:58	3	sp -> stream . avail_out = ( uInt ) ( nsamples * sizeof ( uint16 ) ) ;
EXPR	795:1	795:1	4	sp -> stream . avail_out = ( uInt ) ( nsamples * sizeof ( uint16 ) )
ASSIGN	795:1	795:24	5	sp -> stream . avail_out = ( uInt ) ( nsamples * sizeof ( uint16 ) )
LVAL	795:1	795:1	6	sp -> stream . avail_out
FIELD	795:1	795:12	7	sp -> stream . avail_out
LEAF_NODE	795:1	795:1	8	sp
LEAF_NODE	795:3	795:3	8	->
LEAF_NODE	795:5	795:5	8	stream
LEAF_NODE	795:11	795:11	8	.
LEAF_NODE	795:12	795:12	8	avail_out
ASSIGN_OP	795:22	795:22	6	=
LEAF_NODE	795:22	795:22	7	=
RVAL	795:24	795:57	6	( uInt ) ( nsamples * sizeof ( uint16 ) )
LEAF_NODE	795:24	795:24	7	(
TYPE_NAME	795:25	795:25	7	uInt
LEAF_NODE	795:25	795:25	8	uInt
LEAF_NODE	795:29	795:29	7	)
LEAF_NODE	795:31	795:31	7	(
FIELD	795:32	795:32	7	nsamples
LEAF_NODE	795:32	795:32	8	nsamples
LEAF_NODE	795:41	795:41	7	*
FUNCTION_CALL	795:43	795:56	7	sizeof ( uint16 )
CALLEE	795:43	795:43	8	sizeof
LEAF_NODE	795:43	795:43	9	sizeof
LEAF_NODE	795:49	795:49	8	(
ARGUMENT	795:50	795:50	8	uint16
FIELD	795:50	795:50	9	uint16
LEAF_NODE	795:50	795:50	10	uint16
LEAF_NODE	795:56	795:56	8	)
LEAF_NODE	795:57	795:57	7	)
LEAF_NODE	795:58	795:58	4	;
SELECTION	796:1	797:1	3	
KEYWORD	796:1	796:1	4	if
LEAF_NODE	796:1	796:1	5	if
LEAF_NODE	796:4	796:4	4	(
CONDITION	796:5	796:5	4	sp -> stream . avail_out != nsamples * sizeof ( uint16 )
EXPR	796:5	796:40	5	sp -> stream . avail_out != nsamples * sizeof ( uint16 )
FIELD	796:5	796:16	6	sp -> stream . avail_out
LEAF_NODE	796:5	796:5	7	sp
LEAF_NODE	796:7	796:7	7	->
LEAF_NODE	796:9	796:9	7	stream
LEAF_NODE	796:15	796:15	7	.
LEAF_NODE	796:16	796:16	7	avail_out
EQ_OPERATOR	796:26	796:26	6	!=
LEAF_NODE	796:26	796:26	7	!=
FIELD	796:29	796:29	6	nsamples
LEAF_NODE	796:29	796:29	7	nsamples
LEAF_NODE	796:38	796:38	6	*
FUNCTION_CALL	796:40	796:53	6	sizeof ( uint16 )
CALLEE	796:40	796:40	7	sizeof
LEAF_NODE	796:40	796:40	8	sizeof
LEAF_NODE	796:46	796:46	7	(
ARGUMENT	796:47	796:47	7	uint16
FIELD	796:47	796:47	8	uint16
LEAF_NODE	796:47	796:47	9	uint16
LEAF_NODE	796:53	796:53	7	)
LEAF_NODE	796:54	796:54	4	)
STATEMENTS	797:1	800:1	4	
LEAF_NODE	797:1	797:1	5	{
STATEMENTS	798:2	799:2	5	
EXPR_STATEMENT	798:2	798:86	6	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" ) ;
EXPR	798:2	798:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" )
FUNCTION_CALL	798:2	798:85	8	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" )
CALLEE	798:2	798:2	9	TIFFErrorExt
LEAF_NODE	798:2	798:2	10	TIFFErrorExt
LEAF_NODE	798:14	798:14	9	(
ARGUMENT	798:15	798:15	9	tif -> tif_clientdata
FIELD	798:15	798:20	10	tif -> tif_clientdata
LEAF_NODE	798:15	798:15	11	tif
LEAF_NODE	798:18	798:18	11	->
LEAF_NODE	798:20	798:20	11	tif_clientdata
LEAF_NODE	798:34	798:34	9	,
ARGUMENT	798:36	798:36	9	module
FIELD	798:36	798:36	10	module
LEAF_NODE	798:36	798:36	11	module
LEAF_NODE	798:42	798:42	9	,
ARGUMENT	798:44	798:44	9	"ZLib cannot deal with buffers this size"
FIELD	798:44	798:44	10	"ZLib cannot deal with buffers this size"
LEAF_NODE	798:44	798:44	11	"ZLib cannot deal with buffers this size"
LEAF_NODE	798:85	798:85	9	)
LEAF_NODE	798:86	798:86	7	;
JUMP_STATEMENT	799:2	799:12	6	return ( 0 ) ;
KEYWORD	799:2	799:2	7	return
LEAF_NODE	799:2	799:2	8	return
DESTINATION	799:9	799:9	7	( 0 )
EXPR	799:9	799:11	8	( 0 )
LEAF_NODE	799:9	799:9	9	(
FIELD	799:10	799:10	9	0
LEAF_NODE	799:10	799:10	10	0
LEAF_NODE	799:11	799:11	9	)
LEAF_NODE	799:12	799:12	7	;
LEAF_NODE	800:1	800:1	5	}
SELECTION	802:1	803:1	3	
KEYWORD	802:1	802:1	4	if
LEAF_NODE	802:1	802:1	5	if
LEAF_NODE	802:4	802:4	4	(
CONDITION	802:5	802:5	4	( tmsize_t ) sp -> stream . avail_out > sp -> tbuf_size
EXPR	802:5	802:38	5	( tmsize_t ) sp -> stream . avail_out > sp -> tbuf_size
LEAF_NODE	802:5	802:5	6	(
TYPE_NAME	802:6	802:6	6	tmsize_t
LEAF_NODE	802:6	802:6	7	tmsize_t
LEAF_NODE	802:14	802:14	6	)
FIELD	802:15	802:26	6	sp -> stream . avail_out
LEAF_NODE	802:15	802:15	7	sp
LEAF_NODE	802:17	802:17	7	->
LEAF_NODE	802:19	802:19	7	stream
LEAF_NODE	802:25	802:25	7	.
LEAF_NODE	802:26	802:26	7	avail_out
REL_OPERATOR	802:36	802:36	6	>
LEAF_NODE	802:36	802:36	7	>
FIELD	802:38	802:42	6	sp -> tbuf_size
LEAF_NODE	802:38	802:38	7	sp
LEAF_NODE	802:40	802:40	7	->
LEAF_NODE	802:42	802:42	7	tbuf_size
LEAF_NODE	802:51	802:51	4	)
STATEMENTS	803:1	806:1	4	
LEAF_NODE	803:1	803:1	5	{
STATEMENTS	804:2	805:2	5	
EXPR_STATEMENT	804:2	804:83	6	TIFFErrorExt ( tif -> tif_clientdata , module , "sp->stream.avail_out > sp->tbuf_size" ) ;
EXPR	804:2	804:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "sp->stream.avail_out > sp->tbuf_size" )
FUNCTION_CALL	804:2	804:82	8	TIFFErrorExt ( tif -> tif_clientdata , module , "sp->stream.avail_out > sp->tbuf_size" )
CALLEE	804:2	804:2	9	TIFFErrorExt
LEAF_NODE	804:2	804:2	10	TIFFErrorExt
LEAF_NODE	804:14	804:14	9	(
ARGUMENT	804:15	804:15	9	tif -> tif_clientdata
FIELD	804:15	804:20	10	tif -> tif_clientdata
LEAF_NODE	804:15	804:15	11	tif
LEAF_NODE	804:18	804:18	11	->
LEAF_NODE	804:20	804:20	11	tif_clientdata
LEAF_NODE	804:34	804:34	9	,
ARGUMENT	804:36	804:36	9	module
FIELD	804:36	804:36	10	module
LEAF_NODE	804:36	804:36	11	module
LEAF_NODE	804:42	804:42	9	,
ARGUMENT	804:44	804:44	9	"sp->stream.avail_out > sp->tbuf_size"
FIELD	804:44	804:44	10	"sp->stream.avail_out > sp->tbuf_size"
LEAF_NODE	804:44	804:44	11	"sp->stream.avail_out > sp->tbuf_size"
LEAF_NODE	804:82	804:82	9	)
LEAF_NODE	804:83	804:83	7	;
JUMP_STATEMENT	805:2	805:12	6	return ( 0 ) ;
KEYWORD	805:2	805:2	7	return
LEAF_NODE	805:2	805:2	8	return
DESTINATION	805:9	805:9	7	( 0 )
EXPR	805:9	805:11	8	( 0 )
LEAF_NODE	805:9	805:9	9	(
FIELD	805:10	805:10	9	0
LEAF_NODE	805:10	805:10	10	0
LEAF_NODE	805:11	805:11	9	)
LEAF_NODE	805:12	805:12	7	;
LEAF_NODE	806:1	806:1	5	}
ITERATION	807:1	807:4	3	
KEYWORD	807:1	807:1	4	do
LEAF_NODE	807:1	807:1	5	do
LEAF_NODE	823:9	823:9	4	(
CONDITION	823:10	823:10	4	sp -> stream . avail_out > 0
EXPR	823:10	823:33	5	sp -> stream . avail_out > 0
FIELD	823:10	823:21	6	sp -> stream . avail_out
LEAF_NODE	823:10	823:10	7	sp
LEAF_NODE	823:12	823:12	7	->
LEAF_NODE	823:14	823:14	7	stream
LEAF_NODE	823:20	823:20	7	.
LEAF_NODE	823:21	823:21	7	avail_out
REL_OPERATOR	823:31	823:31	6	>
LEAF_NODE	823:31	823:31	7	>
FIELD	823:33	823:33	6	0
LEAF_NODE	823:33	823:33	7	0
LEAF_NODE	823:34	823:34	4	)
STATEMENTS	807:4	823:1	4	
LEAF_NODE	807:4	807:4	5	{
STATEMENTS	808:2	818:2	5	
SIMPLE_DECL	808:2	808:51	6	int state ; state = inflate ( & sp -> stream , Z_PARTIAL_FLUSH ) ;
VAR_DECL	808:2	808:6	7	int state ; state = inflate ( & sp -> stream , Z_PARTIAL_FLUSH )
TYPE	808:2	808:2	8	int
TYPE_NAME	808:2	808:2	9	int
LEAF_NODE	808:2	808:2	10	int
NAME	808:6	808:6	8	state
LEAF_NODE	808:6	808:6	9	state
LEAF_NODE	0:0	0:0	8	;
INIT	808:6	808:6	8	state = inflate ( & sp -> stream , Z_PARTIAL_FLUSH )
ASSIGN	808:6	808:14	9	state = inflate ( & sp -> stream , Z_PARTIAL_FLUSH )
LVAL	808:6	808:6	10	state
NAME	808:6	808:6	11	state
LEAF_NODE	808:6	808:6	12	state
ASSIGN_OP	808:12	808:12	10	=
LEAF_NODE	808:12	808:12	11	=
RVAL	808:14	808:14	10	inflate ( & sp -> stream , Z_PARTIAL_FLUSH )
FUNCTION_CALL	808:14	808:50	11	inflate ( & sp -> stream , Z_PARTIAL_FLUSH )
CALLEE	808:14	808:14	12	inflate
LEAF_NODE	808:14	808:14	13	inflate
LEAF_NODE	808:21	808:21	12	(
ARGUMENT	808:22	808:22	12	& sp -> stream
UNARY_EXPR	808:22	808:23	13	& sp -> stream
UNARY_OPERATOR	808:22	808:22	14	&
LEAF_NODE	808:22	808:22	15	&
FIELD	808:23	808:27	14	sp -> stream
LEAF_NODE	808:23	808:23	15	sp
LEAF_NODE	808:25	808:25	15	->
LEAF_NODE	808:27	808:27	15	stream
LEAF_NODE	808:33	808:33	12	,
ARGUMENT	808:35	808:35	12	Z_PARTIAL_FLUSH
FIELD	808:35	808:35	13	Z_PARTIAL_FLUSH
LEAF_NODE	808:35	808:35	14	Z_PARTIAL_FLUSH
LEAF_NODE	808:50	808:50	12	)
LEAF_NODE	808:51	808:51	7	;
SELECTION	809:2	809:29	6	
KEYWORD	809:2	809:2	7	if
LEAF_NODE	809:2	809:2	8	if
LEAF_NODE	809:5	809:5	7	(
CONDITION	809:6	809:6	7	state == Z_STREAM_END
EXPR	809:6	809:15	8	state == Z_STREAM_END
FIELD	809:6	809:6	9	state
LEAF_NODE	809:6	809:6	10	state
EQ_OPERATOR	809:12	809:12	9	==
LEAF_NODE	809:12	809:12	10	==
FIELD	809:15	809:15	9	Z_STREAM_END
LEAF_NODE	809:15	809:15	10	Z_STREAM_END
LEAF_NODE	809:27	809:27	7	)
STATEMENTS	809:29	811:2	7	
LEAF_NODE	809:29	809:29	8	{
STATEMENTS	810:3	810:3	8	
JUMP_STATEMENT	810:3	810:8	9	break DESTINATION ;
KEYWORD	810:3	810:3	10	break
LEAF_NODE	810:3	810:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	810:8	810:8	10	;
LEAF_NODE	811:2	811:2	8	}
SELECTION	812:2	812:29	6	
KEYWORD	812:2	812:2	7	if
LEAF_NODE	812:2	812:2	8	if
LEAF_NODE	812:5	812:5	7	(
CONDITION	812:6	812:6	7	state == Z_DATA_ERROR
EXPR	812:6	812:15	8	state == Z_DATA_ERROR
FIELD	812:6	812:6	9	state
LEAF_NODE	812:6	812:6	10	state
EQ_OPERATOR	812:12	812:12	9	==
LEAF_NODE	812:12	812:12	10	==
FIELD	812:15	812:15	9	Z_DATA_ERROR
LEAF_NODE	812:15	812:15	10	Z_DATA_ERROR
LEAF_NODE	812:27	812:27	7	)
STATEMENTS	812:29	817:2	7	
LEAF_NODE	812:29	812:29	8	{
STATEMENTS	813:3	816:3	8	
EXPR_STATEMENT	813:3	815:80	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Decoding error at scanline %lu, %s" , ( unsigned long ) tif -> tif_row , sp -> stream . msg ? sp -> stream . msg : "(null)" ) ;
EXPR	813:3	813:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Decoding error at scanline %lu, %s" , ( unsigned long ) tif -> tif_row , sp -> stream . msg ? sp -> stream . msg : "(null)" )
FUNCTION_CALL	813:3	815:79	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Decoding error at scanline %lu, %s" , ( unsigned long ) tif -> tif_row , sp -> stream . msg ? sp -> stream . msg : "(null)" )
CALLEE	813:3	813:3	12	TIFFErrorExt
LEAF_NODE	813:3	813:3	13	TIFFErrorExt
LEAF_NODE	813:15	813:15	12	(
ARGUMENT	813:16	813:16	12	tif -> tif_clientdata
FIELD	813:16	813:21	13	tif -> tif_clientdata
LEAF_NODE	813:16	813:16	14	tif
LEAF_NODE	813:19	813:19	14	->
LEAF_NODE	813:21	813:21	14	tif_clientdata
LEAF_NODE	813:35	813:35	12	,
ARGUMENT	813:37	813:37	12	module
FIELD	813:37	813:37	13	module
LEAF_NODE	813:37	813:37	14	module
LEAF_NODE	813:43	813:43	12	,
ARGUMENT	814:7	814:7	12	"Decoding error at scanline %lu, %s"
FIELD	814:7	814:7	13	"Decoding error at scanline %lu, %s"
LEAF_NODE	814:7	814:7	14	"Decoding error at scanline %lu, %s"
LEAF_NODE	814:43	814:43	12	,
ARGUMENT	815:7	815:23	12	( unsigned long ) tif -> tif_row
LEAF_NODE	815:7	815:7	13	(
TYPE_NAME	815:8	815:17	13	unsigned long
LEAF_NODE	815:8	815:8	14	unsigned
LEAF_NODE	815:17	815:17	14	long
LEAF_NODE	815:21	815:21	13	)
FIELD	815:23	815:28	13	tif -> tif_row
LEAF_NODE	815:23	815:23	14	tif
LEAF_NODE	815:26	815:26	14	->
LEAF_NODE	815:28	815:28	14	tif_row
LEAF_NODE	815:35	815:35	12	,
ARGUMENT	815:37	815:37	12	sp -> stream . msg ? sp -> stream . msg : "(null)"
COND_EXPR	815:37	815:71	13	sp -> stream . msg ? sp -> stream . msg : "(null)"
CONDITION	815:37	815:37	14	sp -> stream . msg
FIELD	815:37	815:48	15	sp -> stream . msg
LEAF_NODE	815:37	815:37	16	sp
LEAF_NODE	815:39	815:39	16	->
LEAF_NODE	815:41	815:41	16	stream
LEAF_NODE	815:47	815:47	16	.
LEAF_NODE	815:48	815:48	16	msg
LEAF_NODE	815:52	815:52	14	?
EXPR	815:54	815:54	14	sp -> stream . msg
FIELD	815:54	815:65	15	sp -> stream . msg
LEAF_NODE	815:54	815:54	16	sp
LEAF_NODE	815:56	815:56	16	->
LEAF_NODE	815:58	815:58	16	stream
LEAF_NODE	815:64	815:64	16	.
LEAF_NODE	815:65	815:65	16	msg
LEAF_NODE	815:69	815:69	14	:
FIELD	815:71	815:71	14	"(null)"
LEAF_NODE	815:71	815:71	15	"(null)"
LEAF_NODE	815:79	815:79	12	)
LEAF_NODE	815:80	815:80	10	;
JUMP_STATEMENT	816:3	816:13	9	return ( 0 ) ;
KEYWORD	816:3	816:3	10	return
LEAF_NODE	816:3	816:3	11	return
DESTINATION	816:10	816:10	10	( 0 )
EXPR	816:10	816:12	11	( 0 )
LEAF_NODE	816:10	816:10	12	(
FIELD	816:11	816:11	12	0
LEAF_NODE	816:11	816:11	13	0
LEAF_NODE	816:12	816:12	12	)
LEAF_NODE	816:13	816:13	10	;
LEAF_NODE	817:2	817:2	8	}
SELECTION	818:2	818:21	6	
KEYWORD	818:2	818:2	7	if
LEAF_NODE	818:2	818:2	8	if
LEAF_NODE	818:5	818:5	7	(
CONDITION	818:6	818:6	7	state != Z_OK
EXPR	818:6	818:15	8	state != Z_OK
FIELD	818:6	818:6	9	state
LEAF_NODE	818:6	818:6	10	state
EQ_OPERATOR	818:12	818:12	9	!=
LEAF_NODE	818:12	818:12	10	!=
FIELD	818:15	818:15	9	Z_OK
LEAF_NODE	818:15	818:15	10	Z_OK
LEAF_NODE	818:19	818:19	7	)
STATEMENTS	818:21	822:2	7	
LEAF_NODE	818:21	818:21	8	{
STATEMENTS	819:3	821:3	8	
EXPR_STATEMENT	819:3	820:50	9	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" ) ;
EXPR	819:3	819:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
FUNCTION_CALL	819:3	820:49	11	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
CALLEE	819:3	819:3	12	TIFFErrorExt
LEAF_NODE	819:3	819:3	13	TIFFErrorExt
LEAF_NODE	819:15	819:15	12	(
ARGUMENT	819:16	819:16	12	tif -> tif_clientdata
FIELD	819:16	819:21	13	tif -> tif_clientdata
LEAF_NODE	819:16	819:16	14	tif
LEAF_NODE	819:19	819:19	14	->
LEAF_NODE	819:21	819:21	14	tif_clientdata
LEAF_NODE	819:35	819:35	12	,
ARGUMENT	819:37	819:37	12	module
FIELD	819:37	819:37	13	module
LEAF_NODE	819:37	819:37	14	module
LEAF_NODE	819:43	819:43	12	,
ARGUMENT	819:45	819:45	12	"ZLib error: %s"
FIELD	819:45	819:45	13	"ZLib error: %s"
LEAF_NODE	819:45	819:45	14	"ZLib error: %s"
LEAF_NODE	819:61	819:61	12	,
ARGUMENT	820:7	820:7	12	sp -> stream . msg ? sp -> stream . msg : "(null)"
COND_EXPR	820:7	820:41	13	sp -> stream . msg ? sp -> stream . msg : "(null)"
CONDITION	820:7	820:7	14	sp -> stream . msg
FIELD	820:7	820:18	15	sp -> stream . msg
LEAF_NODE	820:7	820:7	16	sp
LEAF_NODE	820:9	820:9	16	->
LEAF_NODE	820:11	820:11	16	stream
LEAF_NODE	820:17	820:17	16	.
LEAF_NODE	820:18	820:18	16	msg
LEAF_NODE	820:22	820:22	14	?
EXPR	820:24	820:24	14	sp -> stream . msg
FIELD	820:24	820:35	15	sp -> stream . msg
LEAF_NODE	820:24	820:24	16	sp
LEAF_NODE	820:26	820:26	16	->
LEAF_NODE	820:28	820:28	16	stream
LEAF_NODE	820:34	820:34	16	.
LEAF_NODE	820:35	820:35	16	msg
LEAF_NODE	820:39	820:39	14	:
FIELD	820:41	820:41	14	"(null)"
LEAF_NODE	820:41	820:41	15	"(null)"
LEAF_NODE	820:49	820:49	12	)
LEAF_NODE	820:50	820:50	10	;
JUMP_STATEMENT	821:3	821:13	9	return ( 0 ) ;
KEYWORD	821:3	821:3	10	return
LEAF_NODE	821:3	821:3	11	return
DESTINATION	821:10	821:10	10	( 0 )
EXPR	821:10	821:12	11	( 0 )
LEAF_NODE	821:10	821:10	12	(
FIELD	821:11	821:11	12	0
LEAF_NODE	821:11	821:11	13	0
LEAF_NODE	821:12	821:12	12	)
LEAF_NODE	821:13	821:13	10	;
LEAF_NODE	822:2	822:2	8	}
LEAF_NODE	823:1	823:1	5	}
LEAF_NODE	823:35	823:35	3	;
SELECTION	826:1	826:32	3	
KEYWORD	826:1	826:1	4	if
LEAF_NODE	826:1	826:1	5	if
LEAF_NODE	826:4	826:4	4	(
CONDITION	826:5	826:5	4	sp -> stream . avail_out != 0
EXPR	826:5	826:29	5	sp -> stream . avail_out != 0
FIELD	826:5	826:16	6	sp -> stream . avail_out
LEAF_NODE	826:5	826:5	7	sp
LEAF_NODE	826:7	826:7	7	->
LEAF_NODE	826:9	826:9	7	stream
LEAF_NODE	826:15	826:15	7	.
LEAF_NODE	826:16	826:16	7	avail_out
EQ_OPERATOR	826:26	826:26	6	!=
LEAF_NODE	826:26	826:26	7	!=
FIELD	826:29	826:29	6	0
LEAF_NODE	826:29	826:29	7	0
LEAF_NODE	826:30	826:30	4	)
STATEMENTS	826:32	831:1	4	
LEAF_NODE	826:32	826:32	5	{
STATEMENTS	827:2	830:2	5	
LEAF_NODE	827:2	827:2	6	TIFFErrorExt
LEAF_NODE	827:14	827:14	6	(
LEAF_NODE	827:15	827:15	6	tif
LEAF_NODE	827:18	827:18	6	->
LEAF_NODE	827:20	827:20	6	tif_clientdata
LEAF_NODE	827:34	827:34	6	,
LEAF_NODE	827:36	827:36	6	module
LEAF_NODE	827:42	827:42	6	,
LEAF_NODE	828:6	828:6	6	"Not enough data at scanline %lu (short "
LEAF_NODE	828:48	828:48	6	TIFF_UINT64_FORMAT
LEAF_NODE	828:67	828:67	6	" bytes)"
LEAF_NODE	828:76	828:76	6	,
LEAF_NODE	829:6	829:6	6	(
LEAF_NODE	829:7	829:7	6	unsigned
LEAF_NODE	829:16	829:16	6	long
LEAF_NODE	829:20	829:20	6	)
LEAF_NODE	829:22	829:22	6	tif
LEAF_NODE	829:25	829:25	6	->
LEAF_NODE	829:27	829:27	6	tif_row
LEAF_NODE	829:34	829:34	6	,
LEAF_NODE	829:36	829:36	6	(
LEAF_NODE	829:37	829:37	6	TIFF_UINT64_T
LEAF_NODE	829:50	829:50	6	)
LEAF_NODE	829:52	829:52	6	sp
LEAF_NODE	829:54	829:54	6	->
LEAF_NODE	829:56	829:56	6	stream
LEAF_NODE	829:62	829:62	6	.
LEAF_NODE	829:63	829:63	6	avail_out
LEAF_NODE	829:72	829:72	6	)
LEAF_NODE	829:73	829:73	6	;
JUMP_STATEMENT	830:2	830:12	6	return ( 0 ) ;
KEYWORD	830:2	830:2	7	return
LEAF_NODE	830:2	830:2	8	return
DESTINATION	830:9	830:9	7	( 0 )
EXPR	830:9	830:11	8	( 0 )
LEAF_NODE	830:9	830:9	9	(
FIELD	830:10	830:10	9	0
LEAF_NODE	830:10	830:10	10	0
LEAF_NODE	830:11	830:11	9	)
LEAF_NODE	830:12	830:12	7	;
LEAF_NODE	831:1	831:1	5	}
EXPR_STATEMENT	833:8	833:43	3	tif -> tif_rawcp = sp -> stream . next_in ;
EXPR	833:8	833:8	4	tif -> tif_rawcp = sp -> stream . next_in
ASSIGN	833:8	833:25	5	tif -> tif_rawcp = sp -> stream . next_in
LVAL	833:8	833:8	6	tif -> tif_rawcp
FIELD	833:8	833:13	7	tif -> tif_rawcp
LEAF_NODE	833:8	833:8	8	tif
LEAF_NODE	833:11	833:11	8	->
LEAF_NODE	833:13	833:13	8	tif_rawcp
ASSIGN_OP	833:23	833:23	6	=
LEAF_NODE	833:23	833:23	7	=
RVAL	833:25	833:25	6	sp -> stream . next_in
FIELD	833:25	833:36	7	sp -> stream . next_in
LEAF_NODE	833:25	833:25	8	sp
LEAF_NODE	833:27	833:27	8	->
LEAF_NODE	833:29	833:29	8	stream
LEAF_NODE	833:35	833:35	8	.
LEAF_NODE	833:36	833:36	8	next_in
LEAF_NODE	833:43	833:43	4	;
EXPR_STATEMENT	834:8	834:44	3	tif -> tif_rawcc = sp -> stream . avail_in ;
EXPR	834:8	834:8	4	tif -> tif_rawcc = sp -> stream . avail_in
ASSIGN	834:8	834:25	5	tif -> tif_rawcc = sp -> stream . avail_in
LVAL	834:8	834:8	6	tif -> tif_rawcc
FIELD	834:8	834:13	7	tif -> tif_rawcc
LEAF_NODE	834:8	834:8	8	tif
LEAF_NODE	834:11	834:11	8	->
LEAF_NODE	834:13	834:13	8	tif_rawcc
ASSIGN_OP	834:23	834:23	6	=
LEAF_NODE	834:23	834:23	7	=
RVAL	834:25	834:25	6	sp -> stream . avail_in
FIELD	834:25	834:36	7	sp -> stream . avail_in
LEAF_NODE	834:25	834:25	8	sp
LEAF_NODE	834:27	834:27	8	->
LEAF_NODE	834:29	834:29	8	stream
LEAF_NODE	834:35	834:35	8	.
LEAF_NODE	834:36	834:36	8	avail_in
LEAF_NODE	834:44	834:44	4	;
EXPR_STATEMENT	836:1	836:14	3	up = sp -> tbuf ;
EXPR	836:1	836:1	4	up = sp -> tbuf
ASSIGN	836:1	836:6	5	up = sp -> tbuf
LVAL	836:1	836:1	6	up
FIELD	836:1	836:1	7	up
LEAF_NODE	836:1	836:1	8	up
ASSIGN_OP	836:4	836:4	6	=
LEAF_NODE	836:4	836:4	7	=
RVAL	836:6	836:6	6	sp -> tbuf
FIELD	836:6	836:10	7	sp -> tbuf
LEAF_NODE	836:6	836:6	8	sp
LEAF_NODE	836:8	836:8	8	->
LEAF_NODE	836:10	836:10	8	tbuf
LEAF_NODE	836:14	836:14	4	;
SELECTION	838:1	839:2	3	
KEYWORD	838:1	838:1	4	if
LEAF_NODE	838:1	838:1	5	if
LEAF_NODE	838:4	838:4	4	(
CONDITION	838:5	838:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	838:5	838:22	5	tif -> tif_flags & TIFF_SWAB
FIELD	838:5	838:10	6	tif -> tif_flags
LEAF_NODE	838:5	838:5	7	tif
LEAF_NODE	838:8	838:8	7	->
LEAF_NODE	838:10	838:10	7	tif_flags
LEAF_NODE	838:20	838:20	6	&
FIELD	838:22	838:22	6	TIFF_SWAB
LEAF_NODE	838:22	838:22	7	TIFF_SWAB
LEAF_NODE	838:31	838:31	4	)
STATEMENTS	839:2	839:2	4	
EXPR_STATEMENT	839:2	839:36	5	TIFFSwabArrayOfShort ( up , nsamples ) ;
EXPR	839:2	839:2	6	TIFFSwabArrayOfShort ( up , nsamples )
FUNCTION_CALL	839:2	839:35	7	TIFFSwabArrayOfShort ( up , nsamples )
CALLEE	839:2	839:2	8	TIFFSwabArrayOfShort
LEAF_NODE	839:2	839:2	9	TIFFSwabArrayOfShort
LEAF_NODE	839:22	839:22	8	(
ARGUMENT	839:23	839:23	8	up
FIELD	839:23	839:23	9	up
LEAF_NODE	839:23	839:23	10	up
LEAF_NODE	839:25	839:25	8	,
ARGUMENT	839:27	839:27	8	nsamples
FIELD	839:27	839:27	9	nsamples
LEAF_NODE	839:27	839:27	10	nsamples
LEAF_NODE	839:35	839:35	8	)
LEAF_NODE	839:36	839:36	6	;
SELECTION	846:1	846:22	3	
KEYWORD	846:1	846:1	4	if
LEAF_NODE	846:1	846:1	5	if
LEAF_NODE	846:4	846:4	4	(
CONDITION	846:5	846:5	4	nsamples % llen
EXPR	846:5	846:16	5	nsamples % llen
FIELD	846:5	846:5	6	nsamples
LEAF_NODE	846:5	846:5	7	nsamples
LEAF_NODE	846:14	846:14	6	%
FIELD	846:16	846:16	6	llen
LEAF_NODE	846:16	846:16	7	llen
LEAF_NODE	846:20	846:20	4	)
STATEMENTS	846:22	851:1	4	
LEAF_NODE	846:22	846:22	5	{
STATEMENTS	847:2	850:2	5	
LEAF_NODE	847:2	847:2	6	TIFFWarningExt
LEAF_NODE	847:16	847:16	6	(
LEAF_NODE	847:17	847:17	6	tif
LEAF_NODE	847:20	847:20	6	->
LEAF_NODE	847:22	847:22	6	tif_clientdata
LEAF_NODE	847:36	847:36	6	,
LEAF_NODE	847:38	847:38	6	module
LEAF_NODE	847:44	847:44	6	,
LEAF_NODE	848:3	848:3	6	"stride %lu is not a multiple of sample count, "
LEAF_NODE	849:3	849:3	6	"%lu, data truncated."
LEAF_NODE	849:25	849:25	6	,
LEAF_NODE	849:27	849:27	6	(
LEAF_NODE	849:28	849:28	6	unsigned
LEAF_NODE	849:37	849:37	6	long
LEAF_NODE	849:41	849:41	6	)
LEAF_NODE	849:43	849:43	6	llen
LEAF_NODE	849:47	849:47	6	,
LEAF_NODE	849:49	849:49	6	(
LEAF_NODE	849:50	849:50	6	unsigned
LEAF_NODE	849:59	849:59	6	long
LEAF_NODE	849:63	849:63	6	)
LEAF_NODE	849:65	849:65	6	nsamples
LEAF_NODE	849:73	849:73	6	)
LEAF_NODE	849:74	849:74	6	;
EXPR_STATEMENT	850:2	850:29	6	nsamples -= nsamples % llen ;
EXPR	850:2	850:2	7	nsamples -= nsamples % llen
ASSIGN	850:2	850:14	8	nsamples -= nsamples % llen
LVAL	850:2	850:2	9	nsamples
FIELD	850:2	850:2	10	nsamples
LEAF_NODE	850:2	850:2	11	nsamples
ASSIGN_OP	850:11	850:11	9	-=
LEAF_NODE	850:11	850:11	10	-=
RVAL	850:14	850:25	9	nsamples % llen
FIELD	850:14	850:14	10	nsamples
LEAF_NODE	850:14	850:14	11	nsamples
LEAF_NODE	850:23	850:23	10	%
FIELD	850:25	850:25	10	llen
LEAF_NODE	850:25	850:25	11	llen
LEAF_NODE	850:29	850:29	7	;
LEAF_NODE	851:1	851:1	5	}
ITERATION	853:1	853:50	3	
KEYWORD	853:1	853:1	4	for
LEAF_NODE	853:1	853:1	5	for
LEAF_NODE	853:5	853:5	4	(
FOR_INIT	853:6	853:11	4	i = 0 ;
EXPR	853:6	853:6	5	i = 0
ASSIGN	853:6	853:10	6	i = 0
LVAL	853:6	853:6	7	i
FIELD	853:6	853:6	8	i
LEAF_NODE	853:6	853:6	9	i
ASSIGN_OP	853:8	853:8	7	=
LEAF_NODE	853:8	853:8	8	=
RVAL	853:10	853:10	7	0
FIELD	853:10	853:10	8	0
LEAF_NODE	853:10	853:10	9	0
LEAF_NODE	853:11	853:11	5	;
CONDITION	853:13	853:13	4	i < nsamples
EXPR	853:13	853:17	5	i < nsamples
FIELD	853:13	853:13	6	i
LEAF_NODE	853:13	853:13	7	i
REL_OPERATOR	853:15	853:15	6	<
LEAF_NODE	853:15	853:15	7	<
FIELD	853:17	853:17	6	nsamples
LEAF_NODE	853:17	853:17	7	nsamples
LEAF_NODE	853:25	853:25	4	;
FOR_EXPR	853:27	853:27	4	i += llen , up += llen
EXPR	853:27	853:38	5	i += llen , up += llen
ASSIGN	853:27	853:32	6	i += llen
LVAL	853:27	853:27	7	i
FIELD	853:27	853:27	8	i
LEAF_NODE	853:27	853:27	9	i
ASSIGN_OP	853:29	853:29	7	+=
LEAF_NODE	853:29	853:29	8	+=
RVAL	853:32	853:32	7	llen
FIELD	853:32	853:32	8	llen
LEAF_NODE	853:32	853:32	9	llen
LEAF_NODE	853:36	853:36	6	,
ASSIGN	853:38	853:44	6	up += llen
LVAL	853:38	853:38	7	up
FIELD	853:38	853:38	8	up
LEAF_NODE	853:38	853:38	9	up
ASSIGN_OP	853:41	853:41	7	+=
LEAF_NODE	853:41	853:41	8	+=
RVAL	853:44	853:44	7	llen
FIELD	853:44	853:44	8	llen
LEAF_NODE	853:44	853:44	9	llen
LEAF_NODE	853:48	853:48	4	)
STATEMENTS	853:50	891:1	4	
LEAF_NODE	853:50	853:50	5	{
STATEMENTS	854:2	854:2	5	
SELECTION	854:2	854:29	6	
KEYWORD	854:2	854:2	7	switch
LEAF_NODE	854:2	854:2	8	switch
LEAF_NODE	854:9	854:9	7	(
CONDITION	854:10	854:10	7	sp -> user_datafmt
EXPR	854:10	854:10	8	sp -> user_datafmt
FIELD	854:10	854:14	9	sp -> user_datafmt
LEAF_NODE	854:10	854:10	10	sp
LEAF_NODE	854:12	854:12	10	->
LEAF_NODE	854:14	854:14	10	user_datafmt
LEAF_NODE	854:26	854:26	7	)
STATEMENTS	854:29	890:2	7	
LEAF_NODE	854:29	854:29	8	{
STATEMENTS	855:2	889:3	8	
LABEL	855:2	855:28	9	case PIXARLOGDATAFMT_FLOAT :
LEAF_NODE	855:2	855:2	10	case
LEAF_NODE	855:7	855:7	10	PIXARLOGDATAFMT_FLOAT
LEAF_NODE	855:28	855:28	10	:
EXPR_STATEMENT	856:3	857:32	9	horizontalAccumulateF ( up , llen , sp -> stride , ( float * ) op , sp -> ToLinearF ) ;
EXPR	856:3	856:3	10	horizontalAccumulateF ( up , llen , sp -> stride , ( float * ) op , sp -> ToLinearF )
FUNCTION_CALL	856:3	857:31	11	horizontalAccumulateF ( up , llen , sp -> stride , ( float * ) op , sp -> ToLinearF )
CALLEE	856:3	856:3	12	horizontalAccumulateF
LEAF_NODE	856:3	856:3	13	horizontalAccumulateF
LEAF_NODE	856:24	856:24	12	(
ARGUMENT	856:25	856:25	12	up
FIELD	856:25	856:25	13	up
LEAF_NODE	856:25	856:25	14	up
LEAF_NODE	856:27	856:27	12	,
ARGUMENT	856:29	856:29	12	llen
FIELD	856:29	856:29	13	llen
LEAF_NODE	856:29	856:29	14	llen
LEAF_NODE	856:33	856:33	12	,
ARGUMENT	856:35	856:35	12	sp -> stride
FIELD	856:35	856:39	13	sp -> stride
LEAF_NODE	856:35	856:35	14	sp
LEAF_NODE	856:37	856:37	14	->
LEAF_NODE	856:39	856:39	14	stride
LEAF_NODE	856:45	856:45	12	,
ARGUMENT	857:5	857:14	12	( float * ) op
LEAF_NODE	857:5	857:5	13	(
TYPE_NAME	857:6	857:6	13	float
LEAF_NODE	857:6	857:6	14	float
LEAF_NODE	857:12	857:12	13	*
LEAF_NODE	857:13	857:13	13	)
FIELD	857:14	857:14	13	op
LEAF_NODE	857:14	857:14	14	op
LEAF_NODE	857:16	857:16	12	,
ARGUMENT	857:18	857:18	12	sp -> ToLinearF
FIELD	857:18	857:22	13	sp -> ToLinearF
LEAF_NODE	857:18	857:18	14	sp
LEAF_NODE	857:20	857:20	14	->
LEAF_NODE	857:22	857:22	14	ToLinearF
LEAF_NODE	857:31	857:31	12	)
LEAF_NODE	857:32	857:32	10	;
EXPR_STATEMENT	858:3	858:29	9	op += llen * sizeof ( float ) ;
EXPR	858:3	858:3	10	op += llen * sizeof ( float )
ASSIGN	858:3	858:9	11	op += llen * sizeof ( float )
LVAL	858:3	858:3	12	op
FIELD	858:3	858:3	13	op
LEAF_NODE	858:3	858:3	14	op
ASSIGN_OP	858:6	858:6	12	+=
LEAF_NODE	858:6	858:6	13	+=
RVAL	858:9	858:16	12	llen * sizeof ( float )
FIELD	858:9	858:9	13	llen
LEAF_NODE	858:9	858:9	14	llen
LEAF_NODE	858:14	858:14	13	*
FUNCTION_CALL	858:16	858:28	13	sizeof ( float )
CALLEE	858:16	858:16	14	sizeof
LEAF_NODE	858:16	858:16	15	sizeof
LEAF_NODE	858:22	858:22	14	(
ARGUMENT	858:23	858:23	14	float
FIELD	858:23	858:23	15	float
LEAF_NODE	858:23	858:23	16	float
LEAF_NODE	858:28	858:28	14	)
LEAF_NODE	858:29	858:29	10	;
JUMP_STATEMENT	859:3	859:8	9	break DESTINATION ;
KEYWORD	859:3	859:3	10	break
LEAF_NODE	859:3	859:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	859:8	859:8	10	;
LABEL	860:2	860:28	9	case PIXARLOGDATAFMT_16BIT :
LEAF_NODE	860:2	860:2	10	case
LEAF_NODE	860:7	860:7	10	PIXARLOGDATAFMT_16BIT
LEAF_NODE	860:28	860:28	10	:
EXPR_STATEMENT	861:3	862:34	9	horizontalAccumulate16 ( up , llen , sp -> stride , ( uint16 * ) op , sp -> ToLinear16 ) ;
EXPR	861:3	861:3	10	horizontalAccumulate16 ( up , llen , sp -> stride , ( uint16 * ) op , sp -> ToLinear16 )
FUNCTION_CALL	861:3	862:33	11	horizontalAccumulate16 ( up , llen , sp -> stride , ( uint16 * ) op , sp -> ToLinear16 )
CALLEE	861:3	861:3	12	horizontalAccumulate16
LEAF_NODE	861:3	861:3	13	horizontalAccumulate16
LEAF_NODE	861:25	861:25	12	(
ARGUMENT	861:26	861:26	12	up
FIELD	861:26	861:26	13	up
LEAF_NODE	861:26	861:26	14	up
LEAF_NODE	861:28	861:28	12	,
ARGUMENT	861:30	861:30	12	llen
FIELD	861:30	861:30	13	llen
LEAF_NODE	861:30	861:30	14	llen
LEAF_NODE	861:34	861:34	12	,
ARGUMENT	861:36	861:36	12	sp -> stride
FIELD	861:36	861:40	13	sp -> stride
LEAF_NODE	861:36	861:36	14	sp
LEAF_NODE	861:38	861:38	14	->
LEAF_NODE	861:40	861:40	14	stride
LEAF_NODE	861:46	861:46	12	,
ARGUMENT	862:5	862:15	12	( uint16 * ) op
LEAF_NODE	862:5	862:5	13	(
TYPE_NAME	862:6	862:6	13	uint16
LEAF_NODE	862:6	862:6	14	uint16
LEAF_NODE	862:13	862:13	13	*
LEAF_NODE	862:14	862:14	13	)
FIELD	862:15	862:15	13	op
LEAF_NODE	862:15	862:15	14	op
LEAF_NODE	862:17	862:17	12	,
ARGUMENT	862:19	862:19	12	sp -> ToLinear16
FIELD	862:19	862:23	13	sp -> ToLinear16
LEAF_NODE	862:19	862:19	14	sp
LEAF_NODE	862:21	862:21	14	->
LEAF_NODE	862:23	862:23	14	ToLinear16
LEAF_NODE	862:33	862:33	12	)
LEAF_NODE	862:34	862:34	10	;
EXPR_STATEMENT	863:3	863:30	9	op += llen * sizeof ( uint16 ) ;
EXPR	863:3	863:3	10	op += llen * sizeof ( uint16 )
ASSIGN	863:3	863:9	11	op += llen * sizeof ( uint16 )
LVAL	863:3	863:3	12	op
FIELD	863:3	863:3	13	op
LEAF_NODE	863:3	863:3	14	op
ASSIGN_OP	863:6	863:6	12	+=
LEAF_NODE	863:6	863:6	13	+=
RVAL	863:9	863:16	12	llen * sizeof ( uint16 )
FIELD	863:9	863:9	13	llen
LEAF_NODE	863:9	863:9	14	llen
LEAF_NODE	863:14	863:14	13	*
FUNCTION_CALL	863:16	863:29	13	sizeof ( uint16 )
CALLEE	863:16	863:16	14	sizeof
LEAF_NODE	863:16	863:16	15	sizeof
LEAF_NODE	863:22	863:22	14	(
ARGUMENT	863:23	863:23	14	uint16
FIELD	863:23	863:23	15	uint16
LEAF_NODE	863:23	863:23	16	uint16
LEAF_NODE	863:29	863:29	14	)
LEAF_NODE	863:30	863:30	10	;
JUMP_STATEMENT	864:3	864:8	9	break DESTINATION ;
KEYWORD	864:3	864:3	10	break
LEAF_NODE	864:3	864:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	864:8	864:8	10	;
LABEL	865:2	865:33	9	case PIXARLOGDATAFMT_12BITPICIO :
LEAF_NODE	865:2	865:2	10	case
LEAF_NODE	865:7	865:7	10	PIXARLOGDATAFMT_12BITPICIO
LEAF_NODE	865:33	865:33	10	:
EXPR_STATEMENT	866:3	867:32	9	horizontalAccumulate12 ( up , llen , sp -> stride , ( int16 * ) op , sp -> ToLinearF ) ;
EXPR	866:3	866:3	10	horizontalAccumulate12 ( up , llen , sp -> stride , ( int16 * ) op , sp -> ToLinearF )
FUNCTION_CALL	866:3	867:31	11	horizontalAccumulate12 ( up , llen , sp -> stride , ( int16 * ) op , sp -> ToLinearF )
CALLEE	866:3	866:3	12	horizontalAccumulate12
LEAF_NODE	866:3	866:3	13	horizontalAccumulate12
LEAF_NODE	866:25	866:25	12	(
ARGUMENT	866:26	866:26	12	up
FIELD	866:26	866:26	13	up
LEAF_NODE	866:26	866:26	14	up
LEAF_NODE	866:28	866:28	12	,
ARGUMENT	866:30	866:30	12	llen
FIELD	866:30	866:30	13	llen
LEAF_NODE	866:30	866:30	14	llen
LEAF_NODE	866:34	866:34	12	,
ARGUMENT	866:36	866:36	12	sp -> stride
FIELD	866:36	866:40	13	sp -> stride
LEAF_NODE	866:36	866:36	14	sp
LEAF_NODE	866:38	866:38	14	->
LEAF_NODE	866:40	866:40	14	stride
LEAF_NODE	866:46	866:46	12	,
ARGUMENT	867:5	867:14	12	( int16 * ) op
LEAF_NODE	867:5	867:5	13	(
TYPE_NAME	867:6	867:6	13	int16
LEAF_NODE	867:6	867:6	14	int16
LEAF_NODE	867:12	867:12	13	*
LEAF_NODE	867:13	867:13	13	)
FIELD	867:14	867:14	13	op
LEAF_NODE	867:14	867:14	14	op
LEAF_NODE	867:16	867:16	12	,
ARGUMENT	867:18	867:18	12	sp -> ToLinearF
FIELD	867:18	867:22	13	sp -> ToLinearF
LEAF_NODE	867:18	867:18	14	sp
LEAF_NODE	867:20	867:20	14	->
LEAF_NODE	867:22	867:22	14	ToLinearF
LEAF_NODE	867:31	867:31	12	)
LEAF_NODE	867:32	867:32	10	;
EXPR_STATEMENT	868:3	868:29	9	op += llen * sizeof ( int16 ) ;
EXPR	868:3	868:3	10	op += llen * sizeof ( int16 )
ASSIGN	868:3	868:9	11	op += llen * sizeof ( int16 )
LVAL	868:3	868:3	12	op
FIELD	868:3	868:3	13	op
LEAF_NODE	868:3	868:3	14	op
ASSIGN_OP	868:6	868:6	12	+=
LEAF_NODE	868:6	868:6	13	+=
RVAL	868:9	868:16	12	llen * sizeof ( int16 )
FIELD	868:9	868:9	13	llen
LEAF_NODE	868:9	868:9	14	llen
LEAF_NODE	868:14	868:14	13	*
FUNCTION_CALL	868:16	868:28	13	sizeof ( int16 )
CALLEE	868:16	868:16	14	sizeof
LEAF_NODE	868:16	868:16	15	sizeof
LEAF_NODE	868:22	868:22	14	(
ARGUMENT	868:23	868:23	14	int16
FIELD	868:23	868:23	15	int16
LEAF_NODE	868:23	868:23	16	int16
LEAF_NODE	868:28	868:28	14	)
LEAF_NODE	868:29	868:29	10	;
JUMP_STATEMENT	869:3	869:8	9	break DESTINATION ;
KEYWORD	869:3	869:3	10	break
LEAF_NODE	869:3	869:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	869:8	869:8	10	;
LABEL	870:2	870:31	9	case PIXARLOGDATAFMT_11BITLOG :
LEAF_NODE	870:2	870:2	10	case
LEAF_NODE	870:7	870:7	10	PIXARLOGDATAFMT_11BITLOG
LEAF_NODE	870:31	870:31	10	:
EXPR_STATEMENT	871:3	872:18	9	horizontalAccumulate11 ( up , llen , sp -> stride , ( uint16 * ) op ) ;
EXPR	871:3	871:3	10	horizontalAccumulate11 ( up , llen , sp -> stride , ( uint16 * ) op )
FUNCTION_CALL	871:3	872:17	11	horizontalAccumulate11 ( up , llen , sp -> stride , ( uint16 * ) op )
CALLEE	871:3	871:3	12	horizontalAccumulate11
LEAF_NODE	871:3	871:3	13	horizontalAccumulate11
LEAF_NODE	871:25	871:25	12	(
ARGUMENT	871:26	871:26	12	up
FIELD	871:26	871:26	13	up
LEAF_NODE	871:26	871:26	14	up
LEAF_NODE	871:28	871:28	12	,
ARGUMENT	871:30	871:30	12	llen
FIELD	871:30	871:30	13	llen
LEAF_NODE	871:30	871:30	14	llen
LEAF_NODE	871:34	871:34	12	,
ARGUMENT	871:36	871:36	12	sp -> stride
FIELD	871:36	871:40	13	sp -> stride
LEAF_NODE	871:36	871:36	14	sp
LEAF_NODE	871:38	871:38	14	->
LEAF_NODE	871:40	871:40	14	stride
LEAF_NODE	871:46	871:46	12	,
ARGUMENT	872:5	872:15	12	( uint16 * ) op
LEAF_NODE	872:5	872:5	13	(
TYPE_NAME	872:6	872:6	13	uint16
LEAF_NODE	872:6	872:6	14	uint16
LEAF_NODE	872:13	872:13	13	*
LEAF_NODE	872:14	872:14	13	)
FIELD	872:15	872:15	13	op
LEAF_NODE	872:15	872:15	14	op
LEAF_NODE	872:17	872:17	12	)
LEAF_NODE	872:18	872:18	10	;
EXPR_STATEMENT	873:3	873:30	9	op += llen * sizeof ( uint16 ) ;
EXPR	873:3	873:3	10	op += llen * sizeof ( uint16 )
ASSIGN	873:3	873:9	11	op += llen * sizeof ( uint16 )
LVAL	873:3	873:3	12	op
FIELD	873:3	873:3	13	op
LEAF_NODE	873:3	873:3	14	op
ASSIGN_OP	873:6	873:6	12	+=
LEAF_NODE	873:6	873:6	13	+=
RVAL	873:9	873:16	12	llen * sizeof ( uint16 )
FIELD	873:9	873:9	13	llen
LEAF_NODE	873:9	873:9	14	llen
LEAF_NODE	873:14	873:14	13	*
FUNCTION_CALL	873:16	873:29	13	sizeof ( uint16 )
CALLEE	873:16	873:16	14	sizeof
LEAF_NODE	873:16	873:16	15	sizeof
LEAF_NODE	873:22	873:22	14	(
ARGUMENT	873:23	873:23	14	uint16
FIELD	873:23	873:23	15	uint16
LEAF_NODE	873:23	873:23	16	uint16
LEAF_NODE	873:29	873:29	14	)
LEAF_NODE	873:30	873:30	10	;
JUMP_STATEMENT	874:3	874:8	9	break DESTINATION ;
KEYWORD	874:3	874:3	10	break
LEAF_NODE	874:3	874:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	874:8	874:8	10	;
LABEL	875:2	875:27	9	case PIXARLOGDATAFMT_8BIT :
LEAF_NODE	875:2	875:2	10	case
LEAF_NODE	875:7	875:7	10	PIXARLOGDATAFMT_8BIT
LEAF_NODE	875:27	875:27	10	:
EXPR_STATEMENT	876:3	877:40	9	horizontalAccumulate8 ( up , llen , sp -> stride , ( unsigned char * ) op , sp -> ToLinear8 ) ;
EXPR	876:3	876:3	10	horizontalAccumulate8 ( up , llen , sp -> stride , ( unsigned char * ) op , sp -> ToLinear8 )
FUNCTION_CALL	876:3	877:39	11	horizontalAccumulate8 ( up , llen , sp -> stride , ( unsigned char * ) op , sp -> ToLinear8 )
CALLEE	876:3	876:3	12	horizontalAccumulate8
LEAF_NODE	876:3	876:3	13	horizontalAccumulate8
LEAF_NODE	876:24	876:24	12	(
ARGUMENT	876:25	876:25	12	up
FIELD	876:25	876:25	13	up
LEAF_NODE	876:25	876:25	14	up
LEAF_NODE	876:27	876:27	12	,
ARGUMENT	876:29	876:29	12	llen
FIELD	876:29	876:29	13	llen
LEAF_NODE	876:29	876:29	14	llen
LEAF_NODE	876:33	876:33	12	,
ARGUMENT	876:35	876:35	12	sp -> stride
FIELD	876:35	876:39	13	sp -> stride
LEAF_NODE	876:35	876:35	14	sp
LEAF_NODE	876:37	876:37	14	->
LEAF_NODE	876:39	876:39	14	stride
LEAF_NODE	876:45	876:45	12	,
ARGUMENT	877:5	877:22	12	( unsigned char * ) op
LEAF_NODE	877:5	877:5	13	(
TYPE_NAME	877:6	877:15	13	unsigned char
LEAF_NODE	877:6	877:6	14	unsigned
LEAF_NODE	877:15	877:15	14	char
LEAF_NODE	877:20	877:20	13	*
LEAF_NODE	877:21	877:21	13	)
FIELD	877:22	877:22	13	op
LEAF_NODE	877:22	877:22	14	op
LEAF_NODE	877:24	877:24	12	,
ARGUMENT	877:26	877:26	12	sp -> ToLinear8
FIELD	877:26	877:30	13	sp -> ToLinear8
LEAF_NODE	877:26	877:26	14	sp
LEAF_NODE	877:28	877:28	14	->
LEAF_NODE	877:30	877:30	14	ToLinear8
LEAF_NODE	877:39	877:39	12	)
LEAF_NODE	877:40	877:40	10	;
LEAF_NODE	878:3	878:3	9	op
LEAF_NODE	878:6	878:6	9	+=
LEAF_NODE	878:9	878:9	9	llen
LEAF_NODE	878:14	878:14	9	*
LEAF_NODE	878:16	878:16	9	sizeof
LEAF_NODE	878:22	878:22	9	(
LEAF_NODE	878:23	878:23	9	unsigned
LEAF_NODE	878:32	878:32	9	char
LEAF_NODE	878:36	878:36	9	)
LEAF_NODE	878:37	878:37	9	;
JUMP_STATEMENT	879:3	879:8	9	break DESTINATION ;
KEYWORD	879:3	879:3	10	break
LEAF_NODE	879:3	879:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	879:8	879:8	10	;
LABEL	880:2	880:31	9	case PIXARLOGDATAFMT_8BITABGR :
LEAF_NODE	880:2	880:2	10	case
LEAF_NODE	880:7	880:7	10	PIXARLOGDATAFMT_8BITABGR
LEAF_NODE	880:31	880:31	10	:
EXPR_STATEMENT	881:3	882:40	9	horizontalAccumulate8abgr ( up , llen , sp -> stride , ( unsigned char * ) op , sp -> ToLinear8 ) ;
EXPR	881:3	881:3	10	horizontalAccumulate8abgr ( up , llen , sp -> stride , ( unsigned char * ) op , sp -> ToLinear8 )
FUNCTION_CALL	881:3	882:39	11	horizontalAccumulate8abgr ( up , llen , sp -> stride , ( unsigned char * ) op , sp -> ToLinear8 )
CALLEE	881:3	881:3	12	horizontalAccumulate8abgr
LEAF_NODE	881:3	881:3	13	horizontalAccumulate8abgr
LEAF_NODE	881:28	881:28	12	(
ARGUMENT	881:29	881:29	12	up
FIELD	881:29	881:29	13	up
LEAF_NODE	881:29	881:29	14	up
LEAF_NODE	881:31	881:31	12	,
ARGUMENT	881:33	881:33	12	llen
FIELD	881:33	881:33	13	llen
LEAF_NODE	881:33	881:33	14	llen
LEAF_NODE	881:37	881:37	12	,
ARGUMENT	881:39	881:39	12	sp -> stride
FIELD	881:39	881:43	13	sp -> stride
LEAF_NODE	881:39	881:39	14	sp
LEAF_NODE	881:41	881:41	14	->
LEAF_NODE	881:43	881:43	14	stride
LEAF_NODE	881:49	881:49	12	,
ARGUMENT	882:5	882:22	12	( unsigned char * ) op
LEAF_NODE	882:5	882:5	13	(
TYPE_NAME	882:6	882:15	13	unsigned char
LEAF_NODE	882:6	882:6	14	unsigned
LEAF_NODE	882:15	882:15	14	char
LEAF_NODE	882:20	882:20	13	*
LEAF_NODE	882:21	882:21	13	)
FIELD	882:22	882:22	13	op
LEAF_NODE	882:22	882:22	14	op
LEAF_NODE	882:24	882:24	12	,
ARGUMENT	882:26	882:26	12	sp -> ToLinear8
FIELD	882:26	882:30	13	sp -> ToLinear8
LEAF_NODE	882:26	882:26	14	sp
LEAF_NODE	882:28	882:28	14	->
LEAF_NODE	882:30	882:30	14	ToLinear8
LEAF_NODE	882:39	882:39	12	)
LEAF_NODE	882:40	882:40	10	;
LEAF_NODE	883:3	883:3	9	op
LEAF_NODE	883:6	883:6	9	+=
LEAF_NODE	883:9	883:9	9	llen
LEAF_NODE	883:14	883:14	9	*
LEAF_NODE	883:16	883:16	9	sizeof
LEAF_NODE	883:22	883:22	9	(
LEAF_NODE	883:23	883:23	9	unsigned
LEAF_NODE	883:32	883:32	9	char
LEAF_NODE	883:36	883:36	9	)
LEAF_NODE	883:37	883:37	9	;
JUMP_STATEMENT	884:3	884:8	9	break DESTINATION ;
KEYWORD	884:3	884:3	10	break
LEAF_NODE	884:3	884:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	884:8	884:8	10	;
LABEL	885:2	885:9	9	default :
LEAF_NODE	885:2	885:2	10	default
LEAF_NODE	885:9	885:9	10	:
EXPR_STATEMENT	886:3	888:27	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Unsupported bits/sample: %d" , td -> td_bitspersample ) ;
EXPR	886:3	886:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Unsupported bits/sample: %d" , td -> td_bitspersample )
FUNCTION_CALL	886:3	888:26	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Unsupported bits/sample: %d" , td -> td_bitspersample )
CALLEE	886:3	886:3	12	TIFFErrorExt
LEAF_NODE	886:3	886:3	13	TIFFErrorExt
LEAF_NODE	886:15	886:15	12	(
ARGUMENT	886:16	886:16	12	tif -> tif_clientdata
FIELD	886:16	886:21	13	tif -> tif_clientdata
LEAF_NODE	886:16	886:16	14	tif
LEAF_NODE	886:19	886:19	14	->
LEAF_NODE	886:21	886:21	14	tif_clientdata
LEAF_NODE	886:35	886:35	12	,
ARGUMENT	886:37	886:37	12	module
FIELD	886:37	886:37	13	module
LEAF_NODE	886:37	886:37	14	module
LEAF_NODE	886:43	886:43	12	,
ARGUMENT	887:6	887:6	12	"Unsupported bits/sample: %d"
FIELD	887:6	887:6	13	"Unsupported bits/sample: %d"
LEAF_NODE	887:6	887:6	14	"Unsupported bits/sample: %d"
LEAF_NODE	887:35	887:35	12	,
ARGUMENT	888:6	888:6	12	td -> td_bitspersample
FIELD	888:6	888:10	13	td -> td_bitspersample
LEAF_NODE	888:6	888:6	14	td
LEAF_NODE	888:8	888:8	14	->
LEAF_NODE	888:10	888:10	14	td_bitspersample
LEAF_NODE	888:26	888:26	12	)
LEAF_NODE	888:27	888:27	10	;
JUMP_STATEMENT	889:3	889:13	9	return ( 0 ) ;
KEYWORD	889:3	889:3	10	return
LEAF_NODE	889:3	889:3	11	return
DESTINATION	889:10	889:10	10	( 0 )
EXPR	889:10	889:12	11	( 0 )
LEAF_NODE	889:10	889:10	12	(
FIELD	889:11	889:11	12	0
LEAF_NODE	889:11	889:11	13	0
LEAF_NODE	889:12	889:12	12	)
LEAF_NODE	889:13	889:13	10	;
LEAF_NODE	890:2	890:2	8	}
LEAF_NODE	891:1	891:1	5	}
JUMP_STATEMENT	893:1	893:11	3	return ( 1 ) ;
KEYWORD	893:1	893:1	4	return
LEAF_NODE	893:1	893:1	5	return
DESTINATION	893:8	893:8	4	( 1 )
EXPR	893:8	893:10	5	( 1 )
LEAF_NODE	893:8	893:8	6	(
FIELD	893:9	893:9	6	1
LEAF_NODE	893:9	893:9	7	1
LEAF_NODE	893:10	893:10	6	)
LEAF_NODE	893:11	893:11	4	;
LEAF_NODE	894:0	894:0	2	}
FUNCTION_DEF	896:0	931:0	1	
RETURN_TYPE	896:0	896:7	2	static int
LEAF_NODE	896:0	896:0	3	static
TYPE_NAME	896:7	896:7	3	int
LEAF_NODE	896:7	896:7	4	int
FUNCTION_NAME	897:0	897:0	2	PixarLogSetupEncode
LEAF_NODE	897:0	897:0	3	PixarLogSetupEncode
PARAMETER_LIST	897:19	897:29	2	( TIFF * tif )
LEAF_NODE	897:19	897:19	3	(
PARAMETER_DECL	897:20	897:26	3	TIFF * tif
TYPE	897:20	897:24	4	TIFF *
TYPE_NAME	897:20	897:20	5	TIFF
LEAF_NODE	897:20	897:20	6	TIFF
POINTER	897:24	897:24	5	*
LEAF_NODE	897:24	897:24	6	*
NAME	897:26	897:26	4	tif
LEAF_NODE	897:26	897:26	5	tif
LEAF_NODE	897:29	897:29	3	)
LEAF_NODE	898:0	898:0	2	{
STATEMENTS	899:1	927:3	2	
LEAF_NODE	899:1	899:1	3	static
SIMPLE_DECL	899:8	899:51	3	const char [ ] module ; module = "PixarLogSetupEncode" ;
VAR_DECL	899:8	899:19	4	const char [ ] module ; module = "PixarLogSetupEncode"
TYPE	899:8	899:25	5	const char [ ]
TYPE_NAME	899:8	899:14	6	const char
LEAF_NODE	899:8	899:8	7	const
LEAF_NODE	899:14	899:14	7	char
TYPE_SUFFIX	899:25	899:26	6	[ ]
LEAF_NODE	899:25	899:25	7	[
LEAF_NODE	899:26	899:26	7	]
NAME	899:19	899:19	5	module
LEAF_NODE	899:19	899:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	899:19	899:19	5	module = "PixarLogSetupEncode"
ASSIGN	899:19	899:30	6	module = "PixarLogSetupEncode"
LVAL	899:19	899:19	7	module
NAME	899:19	899:19	8	module
LEAF_NODE	899:19	899:19	9	module
ASSIGN_OP	899:28	899:28	7	=
LEAF_NODE	899:28	899:28	8	=
RVAL	899:30	899:30	7	"PixarLogSetupEncode"
FIELD	899:30	899:30	8	"PixarLogSetupEncode"
LEAF_NODE	899:30	899:30	9	"PixarLogSetupEncode"
LEAF_NODE	899:51	899:51	4	;
SIMPLE_DECL	900:1	900:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	900:1	900:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	900:1	900:15	5	TIFFDirectory *
TYPE_NAME	900:1	900:1	6	TIFFDirectory
LEAF_NODE	900:1	900:1	7	TIFFDirectory
POINTER	900:15	900:15	6	*
LEAF_NODE	900:15	900:15	7	*
NAME	900:16	900:16	5	td
LEAF_NODE	900:16	900:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	900:16	900:16	5	td = & tif -> tif_dir
ASSIGN	900:16	900:21	6	td = & tif -> tif_dir
LVAL	900:16	900:16	7	td
NAME	900:16	900:16	8	td
LEAF_NODE	900:16	900:16	9	td
ASSIGN_OP	900:19	900:19	7	=
LEAF_NODE	900:19	900:19	8	=
RVAL	900:21	900:21	7	& tif -> tif_dir
UNARY_EXPR	900:21	900:22	8	& tif -> tif_dir
UNARY_OPERATOR	900:21	900:21	9	&
LEAF_NODE	900:21	900:21	10	&
FIELD	900:22	900:27	9	tif -> tif_dir
LEAF_NODE	900:22	900:22	10	tif
LEAF_NODE	900:25	900:25	10	->
LEAF_NODE	900:27	900:27	10	tif_dir
LEAF_NODE	900:34	900:34	4	;
SIMPLE_DECL	901:1	901:38	3	PixarLogState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	901:1	901:16	4	PixarLogState * sp ; sp = EncoderState ( tif )
TYPE	901:1	901:14	5	PixarLogState *
TYPE_NAME	901:1	901:1	6	PixarLogState
LEAF_NODE	901:1	901:1	7	PixarLogState
POINTER	901:14	901:14	6	*
LEAF_NODE	901:14	901:14	7	*
NAME	901:16	901:16	5	sp
LEAF_NODE	901:16	901:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	901:16	901:16	5	sp = EncoderState ( tif )
ASSIGN	901:16	901:21	6	sp = EncoderState ( tif )
LVAL	901:16	901:16	7	sp
NAME	901:16	901:16	8	sp
LEAF_NODE	901:16	901:16	9	sp
ASSIGN_OP	901:19	901:19	7	=
LEAF_NODE	901:19	901:19	8	=
RVAL	901:21	901:21	7	EncoderState ( tif )
FUNCTION_CALL	901:21	901:37	8	EncoderState ( tif )
CALLEE	901:21	901:21	9	EncoderState
LEAF_NODE	901:21	901:21	10	EncoderState
LEAF_NODE	901:33	901:33	9	(
ARGUMENT	901:34	901:34	9	tif
FIELD	901:34	901:34	10	tif
LEAF_NODE	901:34	901:34	11	tif
LEAF_NODE	901:37	901:37	9	)
LEAF_NODE	901:38	901:38	4	;
SIMPLE_DECL	902:1	902:19	3	tmsize_t tbuf_size ;
VAR_DECL	902:1	902:10	4	tmsize_t tbuf_size
TYPE	902:1	902:1	5	tmsize_t
TYPE_NAME	902:1	902:1	6	tmsize_t
LEAF_NODE	902:1	902:1	7	tmsize_t
NAME	902:10	902:10	5	tbuf_size
LEAF_NODE	902:10	902:10	6	tbuf_size
LEAF_NODE	902:19	902:19	4	;
EXPR_STATEMENT	904:1	904:19	3	assert ( sp != NULL ) ;
EXPR	904:1	904:1	4	assert ( sp != NULL )
FUNCTION_CALL	904:1	904:18	5	assert ( sp != NULL )
CALLEE	904:1	904:1	6	assert
LEAF_NODE	904:1	904:1	7	assert
LEAF_NODE	904:7	904:7	6	(
ARGUMENT	904:8	904:14	6	sp != NULL
FIELD	904:8	904:8	7	sp
LEAF_NODE	904:8	904:8	8	sp
EQ_OPERATOR	904:11	904:11	7	!=
LEAF_NODE	904:11	904:11	8	!=
FIELD	904:14	904:14	7	NULL
LEAF_NODE	904:14	904:14	8	NULL
LEAF_NODE	904:18	904:18	6	)
LEAF_NODE	904:19	904:19	4	;
EXPR_STATEMENT	908:1	909:32	3	sp -> stride = ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 ) ;
EXPR	908:1	908:1	4	sp -> stride = ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
ASSIGN	908:1	908:14	5	sp -> stride = ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
LVAL	908:1	908:1	6	sp -> stride
FIELD	908:1	908:5	7	sp -> stride
LEAF_NODE	908:1	908:1	8	sp
LEAF_NODE	908:3	908:3	8	->
LEAF_NODE	908:5	908:5	8	stride
ASSIGN_OP	908:12	908:12	6	=
LEAF_NODE	908:12	908:12	7	=
RVAL	908:14	909:31	6	( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
LEAF_NODE	908:14	908:14	7	(
COND_EXPR	908:15	909:30	7	td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1
CONDITION	908:15	908:38	8	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	908:15	908:19	9	td -> td_planarconfig
LEAF_NODE	908:15	908:15	10	td
LEAF_NODE	908:17	908:17	10	->
LEAF_NODE	908:19	908:19	10	td_planarconfig
EQ_OPERATOR	908:35	908:35	9	==
LEAF_NODE	908:35	908:35	10	==
FIELD	908:38	908:38	9	PLANARCONFIG_CONTIG
LEAF_NODE	908:38	908:38	10	PLANARCONFIG_CONTIG
LEAF_NODE	908:58	908:58	8	?
EXPR	909:5	909:5	8	td -> td_samplesperpixel
FIELD	909:5	909:9	9	td -> td_samplesperpixel
LEAF_NODE	909:5	909:5	10	td
LEAF_NODE	909:7	909:7	10	->
LEAF_NODE	909:9	909:9	10	td_samplesperpixel
LEAF_NODE	909:28	909:28	8	:
FIELD	909:30	909:30	8	1
LEAF_NODE	909:30	909:30	9	1
LEAF_NODE	909:31	909:31	7	)
LEAF_NODE	909:32	909:32	4	;
EXPR_STATEMENT	910:1	911:47	3	tbuf_size = multiply_ms ( multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , td -> td_rowsperstrip ) , sizeof ( uint16 ) ) ;
EXPR	910:1	910:1	4	tbuf_size = multiply_ms ( multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , td -> td_rowsperstrip ) , sizeof ( uint16 ) )
ASSIGN	910:1	910:13	5	tbuf_size = multiply_ms ( multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , td -> td_rowsperstrip ) , sizeof ( uint16 ) )
LVAL	910:1	910:1	6	tbuf_size
FIELD	910:1	910:1	7	tbuf_size
LEAF_NODE	910:1	910:1	8	tbuf_size
ASSIGN_OP	910:11	910:11	6	=
LEAF_NODE	910:11	910:11	7	=
RVAL	910:13	910:13	6	multiply_ms ( multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , td -> td_rowsperstrip ) , sizeof ( uint16 ) )
FUNCTION_CALL	910:13	911:46	7	multiply_ms ( multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , td -> td_rowsperstrip ) , sizeof ( uint16 ) )
CALLEE	910:13	910:13	8	multiply_ms
LEAF_NODE	910:13	910:13	9	multiply_ms
LEAF_NODE	910:24	910:24	8	(
ARGUMENT	910:25	910:25	8	multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , td -> td_rowsperstrip )
FUNCTION_CALL	910:25	911:29	9	multiply_ms ( multiply_ms ( sp -> stride , td -> td_imagewidth ) , td -> td_rowsperstrip )
CALLEE	910:25	910:25	10	multiply_ms
LEAF_NODE	910:25	910:25	11	multiply_ms
LEAF_NODE	910:36	910:36	10	(
ARGUMENT	910:37	910:37	10	multiply_ms ( sp -> stride , td -> td_imagewidth )
FUNCTION_CALL	910:37	910:78	11	multiply_ms ( sp -> stride , td -> td_imagewidth )
CALLEE	910:37	910:37	12	multiply_ms
LEAF_NODE	910:37	910:37	13	multiply_ms
LEAF_NODE	910:48	910:48	12	(
ARGUMENT	910:49	910:49	12	sp -> stride
FIELD	910:49	910:53	13	sp -> stride
LEAF_NODE	910:49	910:49	14	sp
LEAF_NODE	910:51	910:51	14	->
LEAF_NODE	910:53	910:53	14	stride
LEAF_NODE	910:59	910:59	12	,
ARGUMENT	910:61	910:61	12	td -> td_imagewidth
FIELD	910:61	910:65	13	td -> td_imagewidth
LEAF_NODE	910:61	910:61	14	td
LEAF_NODE	910:63	910:63	14	->
LEAF_NODE	910:65	910:65	14	td_imagewidth
LEAF_NODE	910:78	910:78	12	)
LEAF_NODE	910:79	910:79	10	,
ARGUMENT	911:10	911:10	10	td -> td_rowsperstrip
FIELD	911:10	911:14	11	td -> td_rowsperstrip
LEAF_NODE	911:10	911:10	12	td
LEAF_NODE	911:12	911:12	12	->
LEAF_NODE	911:14	911:14	12	td_rowsperstrip
LEAF_NODE	911:29	911:29	10	)
LEAF_NODE	911:30	911:30	8	,
ARGUMENT	911:32	911:32	8	sizeof ( uint16 )
FUNCTION_CALL	911:32	911:45	9	sizeof ( uint16 )
CALLEE	911:32	911:32	10	sizeof
LEAF_NODE	911:32	911:32	11	sizeof
LEAF_NODE	911:38	911:38	10	(
ARGUMENT	911:39	911:39	10	uint16
FIELD	911:39	911:39	11	uint16
LEAF_NODE	911:39	911:39	12	uint16
LEAF_NODE	911:45	911:45	10	)
LEAF_NODE	911:46	911:46	8	)
LEAF_NODE	911:47	911:47	4	;
SELECTION	912:1	913:2	3	
KEYWORD	912:1	912:1	4	if
LEAF_NODE	912:1	912:1	5	if
LEAF_NODE	912:4	912:4	4	(
CONDITION	912:5	912:5	4	tbuf_size == 0
EXPR	912:5	912:18	5	tbuf_size == 0
FIELD	912:5	912:5	6	tbuf_size
LEAF_NODE	912:5	912:5	7	tbuf_size
EQ_OPERATOR	912:15	912:15	6	==
LEAF_NODE	912:15	912:15	7	==
FIELD	912:18	912:18	6	0
LEAF_NODE	912:18	912:18	7	0
LEAF_NODE	912:19	912:19	4	)
STATEMENTS	913:2	913:2	4	
JUMP_STATEMENT	913:2	913:12	5	return ( 0 ) ;
KEYWORD	913:2	913:2	6	return
LEAF_NODE	913:2	913:2	7	return
DESTINATION	913:9	913:9	6	( 0 )
EXPR	913:9	913:11	7	( 0 )
LEAF_NODE	913:9	913:9	8	(
FIELD	913:10	913:10	8	0
LEAF_NODE	913:10	913:10	9	0
LEAF_NODE	913:11	913:11	8	)
LEAF_NODE	913:12	913:12	6	;
EXPR_STATEMENT	914:1	914:45	3	sp -> tbuf = ( uint16 * ) _TIFFmalloc ( tbuf_size ) ;
EXPR	914:1	914:1	4	sp -> tbuf = ( uint16 * ) _TIFFmalloc ( tbuf_size )
ASSIGN	914:1	914:12	5	sp -> tbuf = ( uint16 * ) _TIFFmalloc ( tbuf_size )
LVAL	914:1	914:1	6	sp -> tbuf
FIELD	914:1	914:5	7	sp -> tbuf
LEAF_NODE	914:1	914:1	8	sp
LEAF_NODE	914:3	914:3	8	->
LEAF_NODE	914:5	914:5	8	tbuf
ASSIGN_OP	914:10	914:10	6	=
LEAF_NODE	914:10	914:10	7	=
RVAL	914:12	914:23	6	( uint16 * ) _TIFFmalloc ( tbuf_size )
LEAF_NODE	914:12	914:12	7	(
TYPE_NAME	914:13	914:13	7	uint16
LEAF_NODE	914:13	914:13	8	uint16
LEAF_NODE	914:20	914:20	7	*
LEAF_NODE	914:21	914:21	7	)
FUNCTION_CALL	914:23	914:44	7	_TIFFmalloc ( tbuf_size )
CALLEE	914:23	914:23	8	_TIFFmalloc
LEAF_NODE	914:23	914:23	9	_TIFFmalloc
LEAF_NODE	914:34	914:34	8	(
ARGUMENT	914:35	914:35	8	tbuf_size
FIELD	914:35	914:35	9	tbuf_size
LEAF_NODE	914:35	914:35	10	tbuf_size
LEAF_NODE	914:44	914:44	8	)
LEAF_NODE	914:45	914:45	4	;
SELECTION	915:1	916:2	3	
KEYWORD	915:1	915:1	4	if
LEAF_NODE	915:1	915:1	5	if
LEAF_NODE	915:4	915:4	4	(
CONDITION	915:5	915:5	4	sp -> tbuf == NULL
EXPR	915:5	915:17	5	sp -> tbuf == NULL
FIELD	915:5	915:9	6	sp -> tbuf
LEAF_NODE	915:5	915:5	7	sp
LEAF_NODE	915:7	915:7	7	->
LEAF_NODE	915:9	915:9	7	tbuf
EQ_OPERATOR	915:14	915:14	6	==
LEAF_NODE	915:14	915:14	7	==
FIELD	915:17	915:17	6	NULL
LEAF_NODE	915:17	915:17	7	NULL
LEAF_NODE	915:21	915:21	4	)
STATEMENTS	916:2	916:2	4	
JUMP_STATEMENT	916:2	916:12	5	return ( 0 ) ;
KEYWORD	916:2	916:2	6	return
LEAF_NODE	916:2	916:2	7	return
DESTINATION	916:9	916:9	6	( 0 )
EXPR	916:9	916:11	7	( 0 )
LEAF_NODE	916:9	916:9	8	(
FIELD	916:10	916:10	8	0
LEAF_NODE	916:10	916:10	9	0
LEAF_NODE	916:11	916:11	8	)
LEAF_NODE	916:12	916:12	6	;
SELECTION	917:1	918:2	3	
KEYWORD	917:1	917:1	4	if
LEAF_NODE	917:1	917:1	5	if
LEAF_NODE	917:4	917:4	4	(
CONDITION	917:5	917:5	4	sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN
EXPR	917:5	917:25	5	sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN
FIELD	917:5	917:9	6	sp -> user_datafmt
LEAF_NODE	917:5	917:5	7	sp
LEAF_NODE	917:7	917:7	7	->
LEAF_NODE	917:9	917:9	7	user_datafmt
EQ_OPERATOR	917:22	917:22	6	==
LEAF_NODE	917:22	917:22	7	==
FIELD	917:25	917:25	6	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	917:25	917:25	7	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	917:48	917:48	4	)
STATEMENTS	918:2	918:2	4	
EXPR_STATEMENT	918:2	918:45	5	sp -> user_datafmt = PixarLogGuessDataFmt ( td ) ;
EXPR	918:2	918:2	6	sp -> user_datafmt = PixarLogGuessDataFmt ( td )
ASSIGN	918:2	918:21	7	sp -> user_datafmt = PixarLogGuessDataFmt ( td )
LVAL	918:2	918:2	8	sp -> user_datafmt
FIELD	918:2	918:6	9	sp -> user_datafmt
LEAF_NODE	918:2	918:2	10	sp
LEAF_NODE	918:4	918:4	10	->
LEAF_NODE	918:6	918:6	10	user_datafmt
ASSIGN_OP	918:19	918:19	8	=
LEAF_NODE	918:19	918:19	9	=
RVAL	918:21	918:21	8	PixarLogGuessDataFmt ( td )
FUNCTION_CALL	918:21	918:44	9	PixarLogGuessDataFmt ( td )
CALLEE	918:21	918:21	10	PixarLogGuessDataFmt
LEAF_NODE	918:21	918:21	11	PixarLogGuessDataFmt
LEAF_NODE	918:41	918:41	10	(
ARGUMENT	918:42	918:42	10	td
FIELD	918:42	918:42	11	td
LEAF_NODE	918:42	918:42	12	td
LEAF_NODE	918:44	918:44	10	)
LEAF_NODE	918:45	918:45	6	;
SELECTION	919:1	919:50	3	
KEYWORD	919:1	919:1	4	if
LEAF_NODE	919:1	919:1	5	if
LEAF_NODE	919:4	919:4	4	(
CONDITION	919:5	919:5	4	sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN
EXPR	919:5	919:25	5	sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN
FIELD	919:5	919:9	6	sp -> user_datafmt
LEAF_NODE	919:5	919:5	7	sp
LEAF_NODE	919:7	919:7	7	->
LEAF_NODE	919:9	919:9	7	user_datafmt
EQ_OPERATOR	919:22	919:22	6	==
LEAF_NODE	919:22	919:22	7	==
FIELD	919:25	919:25	6	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	919:25	919:25	7	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	919:48	919:48	4	)
STATEMENTS	919:50	922:1	4	
LEAF_NODE	919:50	919:50	5	{
STATEMENTS	920:2	921:2	5	
EXPR_STATEMENT	920:2	920:126	6	TIFFErrorExt ( tif -> tif_clientdata , module , "PixarLog compression can't handle %d bit linear encodings" , td -> td_bitspersample ) ;
EXPR	920:2	920:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "PixarLog compression can't handle %d bit linear encodings" , td -> td_bitspersample )
FUNCTION_CALL	920:2	920:125	8	TIFFErrorExt ( tif -> tif_clientdata , module , "PixarLog compression can't handle %d bit linear encodings" , td -> td_bitspersample )
CALLEE	920:2	920:2	9	TIFFErrorExt
LEAF_NODE	920:2	920:2	10	TIFFErrorExt
LEAF_NODE	920:14	920:14	9	(
ARGUMENT	920:15	920:15	9	tif -> tif_clientdata
FIELD	920:15	920:20	10	tif -> tif_clientdata
LEAF_NODE	920:15	920:15	11	tif
LEAF_NODE	920:18	920:18	11	->
LEAF_NODE	920:20	920:20	11	tif_clientdata
LEAF_NODE	920:34	920:34	9	,
ARGUMENT	920:36	920:36	9	module
FIELD	920:36	920:36	10	module
LEAF_NODE	920:36	920:36	11	module
LEAF_NODE	920:42	920:42	9	,
ARGUMENT	920:44	920:44	9	"PixarLog compression can't handle %d bit linear encodings"
FIELD	920:44	920:44	10	"PixarLog compression can't handle %d bit linear encodings"
LEAF_NODE	920:44	920:44	11	"PixarLog compression can't handle %d bit linear encodings"
LEAF_NODE	920:103	920:103	9	,
ARGUMENT	920:105	920:105	9	td -> td_bitspersample
FIELD	920:105	920:109	10	td -> td_bitspersample
LEAF_NODE	920:105	920:105	11	td
LEAF_NODE	920:107	920:107	11	->
LEAF_NODE	920:109	920:109	11	td_bitspersample
LEAF_NODE	920:125	920:125	9	)
LEAF_NODE	920:126	920:126	7	;
JUMP_STATEMENT	921:2	921:12	6	return ( 0 ) ;
KEYWORD	921:2	921:2	7	return
LEAF_NODE	921:2	921:2	8	return
DESTINATION	921:9	921:9	7	( 0 )
EXPR	921:9	921:11	8	( 0 )
LEAF_NODE	921:9	921:9	9	(
FIELD	921:10	921:10	9	0
LEAF_NODE	921:10	921:10	10	0
LEAF_NODE	921:11	921:11	9	)
LEAF_NODE	921:12	921:12	7	;
LEAF_NODE	922:1	922:1	5	}
SELECTION	924:1	924:52	3	
KEYWORD	924:1	924:1	4	if
LEAF_NODE	924:1	924:1	5	if
LEAF_NODE	924:4	924:4	4	(
CONDITION	924:5	924:5	4	deflateInit ( & sp -> stream , sp -> quality ) != Z_OK
EXPR	924:5	924:46	5	deflateInit ( & sp -> stream , sp -> quality ) != Z_OK
FUNCTION_CALL	924:5	924:41	6	deflateInit ( & sp -> stream , sp -> quality )
CALLEE	924:5	924:5	7	deflateInit
LEAF_NODE	924:5	924:5	8	deflateInit
LEAF_NODE	924:16	924:16	7	(
ARGUMENT	924:17	924:17	7	& sp -> stream
UNARY_EXPR	924:17	924:18	8	& sp -> stream
UNARY_OPERATOR	924:17	924:17	9	&
LEAF_NODE	924:17	924:17	10	&
FIELD	924:18	924:22	9	sp -> stream
LEAF_NODE	924:18	924:18	10	sp
LEAF_NODE	924:20	924:20	10	->
LEAF_NODE	924:22	924:22	10	stream
LEAF_NODE	924:28	924:28	7	,
ARGUMENT	924:30	924:30	7	sp -> quality
FIELD	924:30	924:34	8	sp -> quality
LEAF_NODE	924:30	924:30	9	sp
LEAF_NODE	924:32	924:32	9	->
LEAF_NODE	924:34	924:34	9	quality
LEAF_NODE	924:41	924:41	7	)
EQ_OPERATOR	924:43	924:43	6	!=
LEAF_NODE	924:43	924:43	7	!=
FIELD	924:46	924:46	6	Z_OK
LEAF_NODE	924:46	924:46	7	Z_OK
LEAF_NODE	924:50	924:50	4	)
STATEMENTS	924:52	927:1	4	
LEAF_NODE	924:52	924:52	5	{
STATEMENTS	925:2	926:2	5	
EXPR_STATEMENT	925:2	925:93	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , sp -> stream . msg ? sp -> stream . msg : "(null)" ) ;
EXPR	925:2	925:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
FUNCTION_CALL	925:2	925:92	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
CALLEE	925:2	925:2	9	TIFFErrorExt
LEAF_NODE	925:2	925:2	10	TIFFErrorExt
LEAF_NODE	925:14	925:14	9	(
ARGUMENT	925:15	925:15	9	tif -> tif_clientdata
FIELD	925:15	925:20	10	tif -> tif_clientdata
LEAF_NODE	925:15	925:15	11	tif
LEAF_NODE	925:18	925:18	11	->
LEAF_NODE	925:20	925:20	11	tif_clientdata
LEAF_NODE	925:34	925:34	9	,
ARGUMENT	925:36	925:36	9	module
FIELD	925:36	925:36	10	module
LEAF_NODE	925:36	925:36	11	module
LEAF_NODE	925:42	925:42	9	,
ARGUMENT	925:44	925:44	9	"%s"
FIELD	925:44	925:44	10	"%s"
LEAF_NODE	925:44	925:44	11	"%s"
LEAF_NODE	925:48	925:48	9	,
ARGUMENT	925:50	925:50	9	sp -> stream . msg ? sp -> stream . msg : "(null)"
COND_EXPR	925:50	925:84	10	sp -> stream . msg ? sp -> stream . msg : "(null)"
CONDITION	925:50	925:50	11	sp -> stream . msg
FIELD	925:50	925:61	12	sp -> stream . msg
LEAF_NODE	925:50	925:50	13	sp
LEAF_NODE	925:52	925:52	13	->
LEAF_NODE	925:54	925:54	13	stream
LEAF_NODE	925:60	925:60	13	.
LEAF_NODE	925:61	925:61	13	msg
LEAF_NODE	925:65	925:65	11	?
EXPR	925:67	925:67	11	sp -> stream . msg
FIELD	925:67	925:78	12	sp -> stream . msg
LEAF_NODE	925:67	925:67	13	sp
LEAF_NODE	925:69	925:69	13	->
LEAF_NODE	925:71	925:71	13	stream
LEAF_NODE	925:77	925:77	13	.
LEAF_NODE	925:78	925:78	13	msg
LEAF_NODE	925:82	925:82	11	:
FIELD	925:84	925:84	11	"(null)"
LEAF_NODE	925:84	925:84	12	"(null)"
LEAF_NODE	925:92	925:92	9	)
LEAF_NODE	925:93	925:93	7	;
JUMP_STATEMENT	926:2	926:12	6	return ( 0 ) ;
KEYWORD	926:2	926:2	7	return
LEAF_NODE	926:2	926:2	8	return
DESTINATION	926:9	926:9	7	( 0 )
EXPR	926:9	926:11	8	( 0 )
LEAF_NODE	926:9	926:9	9	(
FIELD	926:10	926:10	9	0
LEAF_NODE	926:10	926:10	10	0
LEAF_NODE	926:11	926:11	9	)
LEAF_NODE	926:12	926:12	7	;
LEAF_NODE	927:1	927:1	5	}
SELECTION	927:3	927:8	3	
KEYWORD	927:3	927:3	4	else
LEAF_NODE	927:3	927:3	5	else
STATEMENTS	927:8	930:1	4	
LEAF_NODE	927:8	927:8	5	{
STATEMENTS	928:2	929:2	5	
EXPR_STATEMENT	928:2	928:27	6	sp -> state |= PLSTATE_INIT ;
EXPR	928:2	928:2	7	sp -> state |= PLSTATE_INIT
ASSIGN	928:2	928:15	8	sp -> state |= PLSTATE_INIT
LVAL	928:2	928:2	9	sp -> state
FIELD	928:2	928:6	10	sp -> state
LEAF_NODE	928:2	928:2	11	sp
LEAF_NODE	928:4	928:4	11	->
LEAF_NODE	928:6	928:6	11	state
ASSIGN_OP	928:12	928:12	9	|=
LEAF_NODE	928:12	928:12	10	|=
RVAL	928:15	928:15	9	PLSTATE_INIT
FIELD	928:15	928:15	10	PLSTATE_INIT
LEAF_NODE	928:15	928:15	11	PLSTATE_INIT
LEAF_NODE	928:27	928:27	7	;
JUMP_STATEMENT	929:2	929:12	6	return ( 1 ) ;
KEYWORD	929:2	929:2	7	return
LEAF_NODE	929:2	929:2	8	return
DESTINATION	929:9	929:9	7	( 1 )
EXPR	929:9	929:11	8	( 1 )
LEAF_NODE	929:9	929:9	9	(
FIELD	929:10	929:10	9	1
LEAF_NODE	929:10	929:10	10	1
LEAF_NODE	929:11	929:11	9	)
LEAF_NODE	929:12	929:12	7	;
LEAF_NODE	930:1	930:1	5	}
LEAF_NODE	931:0	931:0	2	}
FUNCTION_DEF	936:0	956:0	1	
RETURN_TYPE	936:0	936:7	2	static int
LEAF_NODE	936:0	936:0	3	static
TYPE_NAME	936:7	936:7	3	int
LEAF_NODE	936:7	936:7	4	int
FUNCTION_NAME	937:0	937:0	2	PixarLogPreEncode
LEAF_NODE	937:0	937:0	3	PixarLogPreEncode
PARAMETER_LIST	937:17	937:37	2	( TIFF * tif , uint16 s )
LEAF_NODE	937:17	937:17	3	(
PARAMETER_DECL	937:18	937:24	3	TIFF * tif
TYPE	937:18	937:22	4	TIFF *
TYPE_NAME	937:18	937:18	5	TIFF
LEAF_NODE	937:18	937:18	6	TIFF
POINTER	937:22	937:22	5	*
LEAF_NODE	937:22	937:22	6	*
NAME	937:24	937:24	4	tif
LEAF_NODE	937:24	937:24	5	tif
LEAF_NODE	937:27	937:27	3	,
PARAMETER_DECL	937:29	937:36	3	uint16 s
TYPE	937:29	937:29	4	uint16
TYPE_NAME	937:29	937:29	5	uint16
LEAF_NODE	937:29	937:29	6	uint16
NAME	937:36	937:36	4	s
LEAF_NODE	937:36	937:36	5	s
LEAF_NODE	937:37	937:37	3	)
LEAF_NODE	938:0	938:0	2	{
STATEMENTS	939:1	955:1	2	
LEAF_NODE	939:1	939:1	3	static
SIMPLE_DECL	939:8	939:49	3	const char [ ] module ; module = "PixarLogPreEncode" ;
VAR_DECL	939:8	939:19	4	const char [ ] module ; module = "PixarLogPreEncode"
TYPE	939:8	939:25	5	const char [ ]
TYPE_NAME	939:8	939:14	6	const char
LEAF_NODE	939:8	939:8	7	const
LEAF_NODE	939:14	939:14	7	char
TYPE_SUFFIX	939:25	939:26	6	[ ]
LEAF_NODE	939:25	939:25	7	[
LEAF_NODE	939:26	939:26	7	]
NAME	939:19	939:19	5	module
LEAF_NODE	939:19	939:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	939:19	939:19	5	module = "PixarLogPreEncode"
ASSIGN	939:19	939:30	6	module = "PixarLogPreEncode"
LVAL	939:19	939:19	7	module
NAME	939:19	939:19	8	module
LEAF_NODE	939:19	939:19	9	module
ASSIGN_OP	939:28	939:28	7	=
LEAF_NODE	939:28	939:28	8	=
RVAL	939:30	939:30	7	"PixarLogPreEncode"
FIELD	939:30	939:30	8	"PixarLogPreEncode"
LEAF_NODE	939:30	939:30	9	"PixarLogPreEncode"
LEAF_NODE	939:49	939:49	4	;
SIMPLE_DECL	940:1	940:38	3	PixarLogState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	940:1	940:16	4	PixarLogState * sp ; sp = EncoderState ( tif )
TYPE	940:1	940:15	5	PixarLogState *
TYPE_NAME	940:1	940:1	6	PixarLogState
LEAF_NODE	940:1	940:1	7	PixarLogState
POINTER	940:15	940:15	6	*
LEAF_NODE	940:15	940:15	7	*
NAME	940:16	940:16	5	sp
LEAF_NODE	940:16	940:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	940:16	940:16	5	sp = EncoderState ( tif )
ASSIGN	940:16	940:21	6	sp = EncoderState ( tif )
LVAL	940:16	940:16	7	sp
NAME	940:16	940:16	8	sp
LEAF_NODE	940:16	940:16	9	sp
ASSIGN_OP	940:19	940:19	7	=
LEAF_NODE	940:19	940:19	8	=
RVAL	940:21	940:21	7	EncoderState ( tif )
FUNCTION_CALL	940:21	940:37	8	EncoderState ( tif )
CALLEE	940:21	940:21	9	EncoderState
LEAF_NODE	940:21	940:21	10	EncoderState
LEAF_NODE	940:33	940:33	9	(
ARGUMENT	940:34	940:34	9	tif
FIELD	940:34	940:34	10	tif
LEAF_NODE	940:34	940:34	11	tif
LEAF_NODE	940:37	940:37	9	)
LEAF_NODE	940:38	940:38	4	;
EXPR_STATEMENT	942:1	942:9	3	( void ) s ;
EXPR	942:1	942:8	4	( void ) s
LEAF_NODE	942:1	942:1	5	(
TYPE_NAME	942:2	942:2	5	void
LEAF_NODE	942:2	942:2	6	void
LEAF_NODE	942:6	942:6	5	)
FIELD	942:8	942:8	5	s
LEAF_NODE	942:8	942:8	6	s
LEAF_NODE	942:9	942:9	4	;
EXPR_STATEMENT	943:1	943:19	3	assert ( sp != NULL ) ;
EXPR	943:1	943:1	4	assert ( sp != NULL )
FUNCTION_CALL	943:1	943:18	5	assert ( sp != NULL )
CALLEE	943:1	943:1	6	assert
LEAF_NODE	943:1	943:1	7	assert
LEAF_NODE	943:7	943:7	6	(
ARGUMENT	943:8	943:14	6	sp != NULL
FIELD	943:8	943:8	7	sp
LEAF_NODE	943:8	943:8	8	sp
EQ_OPERATOR	943:11	943:11	7	!=
LEAF_NODE	943:11	943:11	8	!=
FIELD	943:14	943:14	7	NULL
LEAF_NODE	943:14	943:14	8	NULL
LEAF_NODE	943:18	943:18	6	)
LEAF_NODE	943:19	943:19	4	;
EXPR_STATEMENT	944:1	944:39	3	sp -> stream . next_out = tif -> tif_rawdata ;
EXPR	944:1	944:1	4	sp -> stream . next_out = tif -> tif_rawdata
ASSIGN	944:1	944:23	5	sp -> stream . next_out = tif -> tif_rawdata
LVAL	944:1	944:1	6	sp -> stream . next_out
FIELD	944:1	944:12	7	sp -> stream . next_out
LEAF_NODE	944:1	944:1	8	sp
LEAF_NODE	944:3	944:3	8	->
LEAF_NODE	944:5	944:5	8	stream
LEAF_NODE	944:11	944:11	8	.
LEAF_NODE	944:12	944:12	8	next_out
ASSIGN_OP	944:21	944:21	6	=
LEAF_NODE	944:21	944:21	7	=
RVAL	944:23	944:23	6	tif -> tif_rawdata
FIELD	944:23	944:28	7	tif -> tif_rawdata
LEAF_NODE	944:23	944:23	8	tif
LEAF_NODE	944:26	944:26	8	->
LEAF_NODE	944:28	944:28	8	tif_rawdata
LEAF_NODE	944:39	944:39	4	;
EXPR_STATEMENT	945:1	945:40	3	assert ( sizeof ( sp -> stream . avail_out ) == 4 ) ;
EXPR	945:1	945:1	4	assert ( sizeof ( sp -> stream . avail_out ) == 4 )
FUNCTION_CALL	945:1	945:39	5	assert ( sizeof ( sp -> stream . avail_out ) == 4 )
CALLEE	945:1	945:1	6	assert
LEAF_NODE	945:1	945:1	7	assert
LEAF_NODE	945:7	945:7	6	(
ARGUMENT	945:8	945:38	6	sizeof ( sp -> stream . avail_out ) == 4
FUNCTION_CALL	945:8	945:35	7	sizeof ( sp -> stream . avail_out )
CALLEE	945:8	945:8	8	sizeof
LEAF_NODE	945:8	945:8	9	sizeof
LEAF_NODE	945:14	945:14	8	(
ARGUMENT	945:15	945:15	8	sp -> stream . avail_out
FIELD	945:15	945:26	9	sp -> stream . avail_out
LEAF_NODE	945:15	945:15	10	sp
LEAF_NODE	945:17	945:17	10	->
LEAF_NODE	945:19	945:19	10	stream
LEAF_NODE	945:25	945:25	10	.
LEAF_NODE	945:26	945:26	10	avail_out
LEAF_NODE	945:35	945:35	8	)
EQ_OPERATOR	945:36	945:36	7	==
LEAF_NODE	945:36	945:36	8	==
FIELD	945:38	945:38	7	4
LEAF_NODE	945:38	945:38	8	4
LEAF_NODE	945:39	945:39	6	)
LEAF_NODE	945:40	945:40	4	;
EXPR_STATEMENT	949:1	949:50	3	sp -> stream . avail_out = ( uInt ) tif -> tif_rawdatasize ;
EXPR	949:1	949:1	4	sp -> stream . avail_out = ( uInt ) tif -> tif_rawdatasize
ASSIGN	949:1	949:24	5	sp -> stream . avail_out = ( uInt ) tif -> tif_rawdatasize
LVAL	949:1	949:1	6	sp -> stream . avail_out
FIELD	949:1	949:12	7	sp -> stream . avail_out
LEAF_NODE	949:1	949:1	8	sp
LEAF_NODE	949:3	949:3	8	->
LEAF_NODE	949:5	949:5	8	stream
LEAF_NODE	949:11	949:11	8	.
LEAF_NODE	949:12	949:12	8	avail_out
ASSIGN_OP	949:22	949:22	6	=
LEAF_NODE	949:22	949:22	7	=
RVAL	949:24	949:30	6	( uInt ) tif -> tif_rawdatasize
LEAF_NODE	949:24	949:24	7	(
TYPE_NAME	949:25	949:25	7	uInt
LEAF_NODE	949:25	949:25	8	uInt
LEAF_NODE	949:29	949:29	7	)
FIELD	949:30	949:35	7	tif -> tif_rawdatasize
LEAF_NODE	949:30	949:30	8	tif
LEAF_NODE	949:33	949:33	8	->
LEAF_NODE	949:35	949:35	8	tif_rawdatasize
LEAF_NODE	949:50	949:50	4	;
SELECTION	950:1	951:1	3	
KEYWORD	950:1	950:1	4	if
LEAF_NODE	950:1	950:1	5	if
LEAF_NODE	950:4	950:4	4	(
CONDITION	950:5	950:5	4	( tmsize_t ) sp -> stream . avail_out != tif -> tif_rawdatasize
EXPR	950:5	950:39	5	( tmsize_t ) sp -> stream . avail_out != tif -> tif_rawdatasize
LEAF_NODE	950:5	950:5	6	(
TYPE_NAME	950:6	950:6	6	tmsize_t
LEAF_NODE	950:6	950:6	7	tmsize_t
LEAF_NODE	950:14	950:14	6	)
FIELD	950:15	950:26	6	sp -> stream . avail_out
LEAF_NODE	950:15	950:15	7	sp
LEAF_NODE	950:17	950:17	7	->
LEAF_NODE	950:19	950:19	7	stream
LEAF_NODE	950:25	950:25	7	.
LEAF_NODE	950:26	950:26	7	avail_out
EQ_OPERATOR	950:36	950:36	6	!=
LEAF_NODE	950:36	950:36	7	!=
FIELD	950:39	950:44	6	tif -> tif_rawdatasize
LEAF_NODE	950:39	950:39	7	tif
LEAF_NODE	950:42	950:42	7	->
LEAF_NODE	950:44	950:44	7	tif_rawdatasize
LEAF_NODE	950:59	950:59	4	)
STATEMENTS	951:1	954:1	4	
LEAF_NODE	951:1	951:1	5	{
STATEMENTS	952:2	953:2	5	
EXPR_STATEMENT	952:2	952:86	6	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" ) ;
EXPR	952:2	952:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" )
FUNCTION_CALL	952:2	952:85	8	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" )
CALLEE	952:2	952:2	9	TIFFErrorExt
LEAF_NODE	952:2	952:2	10	TIFFErrorExt
LEAF_NODE	952:14	952:14	9	(
ARGUMENT	952:15	952:15	9	tif -> tif_clientdata
FIELD	952:15	952:20	10	tif -> tif_clientdata
LEAF_NODE	952:15	952:15	11	tif
LEAF_NODE	952:18	952:18	11	->
LEAF_NODE	952:20	952:20	11	tif_clientdata
LEAF_NODE	952:34	952:34	9	,
ARGUMENT	952:36	952:36	9	module
FIELD	952:36	952:36	10	module
LEAF_NODE	952:36	952:36	11	module
LEAF_NODE	952:42	952:42	9	,
ARGUMENT	952:44	952:44	9	"ZLib cannot deal with buffers this size"
FIELD	952:44	952:44	10	"ZLib cannot deal with buffers this size"
LEAF_NODE	952:44	952:44	11	"ZLib cannot deal with buffers this size"
LEAF_NODE	952:85	952:85	9	)
LEAF_NODE	952:86	952:86	7	;
JUMP_STATEMENT	953:2	953:12	6	return ( 0 ) ;
KEYWORD	953:2	953:2	7	return
LEAF_NODE	953:2	953:2	8	return
DESTINATION	953:9	953:9	7	( 0 )
EXPR	953:9	953:11	8	( 0 )
LEAF_NODE	953:9	953:9	9	(
FIELD	953:10	953:10	9	0
LEAF_NODE	953:10	953:10	10	0
LEAF_NODE	953:11	953:11	9	)
LEAF_NODE	953:12	953:12	7	;
LEAF_NODE	954:1	954:1	5	}
JUMP_STATEMENT	955:1	955:43	3	return ( deflateReset ( & sp -> stream ) == Z_OK ) ;
KEYWORD	955:1	955:1	4	return
LEAF_NODE	955:1	955:1	5	return
DESTINATION	955:8	955:8	4	( deflateReset ( & sp -> stream ) == Z_OK )
EXPR	955:8	955:42	5	( deflateReset ( & sp -> stream ) == Z_OK )
LEAF_NODE	955:8	955:8	6	(
FUNCTION_CALL	955:9	955:33	6	deflateReset ( & sp -> stream )
CALLEE	955:9	955:9	7	deflateReset
LEAF_NODE	955:9	955:9	8	deflateReset
LEAF_NODE	955:21	955:21	7	(
ARGUMENT	955:22	955:22	7	& sp -> stream
UNARY_EXPR	955:22	955:23	8	& sp -> stream
UNARY_OPERATOR	955:22	955:22	9	&
LEAF_NODE	955:22	955:22	10	&
FIELD	955:23	955:27	9	sp -> stream
LEAF_NODE	955:23	955:23	10	sp
LEAF_NODE	955:25	955:25	10	->
LEAF_NODE	955:27	955:27	10	stream
LEAF_NODE	955:33	955:33	7	)
EQ_OPERATOR	955:35	955:35	6	==
LEAF_NODE	955:35	955:35	7	==
FIELD	955:38	955:38	6	Z_OK
LEAF_NODE	955:38	955:38	7	Z_OK
LEAF_NODE	955:42	955:42	6	)
LEAF_NODE	955:43	955:43	4	;
LEAF_NODE	956:0	956:0	2	}
FUNCTION_DEF	958:0	1010:0	1	
RETURN_TYPE	958:0	958:7	2	static void
LEAF_NODE	958:0	958:0	3	static
TYPE_NAME	958:7	958:7	3	void
LEAF_NODE	958:7	958:7	4	void
FUNCTION_NAME	959:0	959:0	2	horizontalDifferenceF
LEAF_NODE	959:0	959:0	3	horizontalDifferenceF
PARAMETER_LIST	959:21	959:79	2	( float * ip , int n , int stride , uint16 * wp , uint16 * FromLT2 )
LEAF_NODE	959:21	959:21	3	(
PARAMETER_DECL	959:22	959:29	3	float * ip
TYPE	959:22	959:28	4	float *
TYPE_NAME	959:22	959:22	5	float
LEAF_NODE	959:22	959:22	6	float
POINTER	959:28	959:28	5	*
LEAF_NODE	959:28	959:28	6	*
NAME	959:29	959:29	4	ip
LEAF_NODE	959:29	959:29	5	ip
LEAF_NODE	959:31	959:31	3	,
PARAMETER_DECL	959:33	959:37	3	int n
TYPE	959:33	959:33	4	int
TYPE_NAME	959:33	959:33	5	int
LEAF_NODE	959:33	959:33	6	int
NAME	959:37	959:37	4	n
LEAF_NODE	959:37	959:37	5	n
LEAF_NODE	959:38	959:38	3	,
PARAMETER_DECL	959:40	959:44	3	int stride
TYPE	959:40	959:40	4	int
TYPE_NAME	959:40	959:40	5	int
LEAF_NODE	959:40	959:40	6	int
NAME	959:44	959:44	4	stride
LEAF_NODE	959:44	959:44	5	stride
LEAF_NODE	959:50	959:50	3	,
PARAMETER_DECL	959:52	959:60	3	uint16 * wp
TYPE	959:52	959:59	4	uint16 *
TYPE_NAME	959:52	959:52	5	uint16
LEAF_NODE	959:52	959:52	6	uint16
POINTER	959:59	959:59	5	*
LEAF_NODE	959:59	959:59	6	*
NAME	959:60	959:60	4	wp
LEAF_NODE	959:60	959:60	5	wp
LEAF_NODE	959:62	959:62	3	,
PARAMETER_DECL	959:64	959:72	3	uint16 * FromLT2
TYPE	959:64	959:71	4	uint16 *
TYPE_NAME	959:64	959:64	5	uint16
LEAF_NODE	959:64	959:64	6	uint16
POINTER	959:71	959:71	5	*
LEAF_NODE	959:71	959:71	6	*
NAME	959:72	959:72	4	FromLT2
LEAF_NODE	959:72	959:72	5	FromLT2
LEAF_NODE	959:79	959:79	3	)
LEAF_NODE	960:0	960:0	2	{
STATEMENTS	961:4	970:4	2	
SIMPLE_DECL	961:4	961:46	3	int32 r1 , int32 g1 , int32 b1 , int32 a1 , int32 r2 , int32 g2 , int32 b2 , int32 a2 , int32 mask ;
INIT_DECL_LIST	961:4	961:4	4	int32 r1 , int32 g1 , int32 b1 , int32 a1 , int32 r2 , int32 g2 , int32 b2 , int32 a2 , int32 mask
VAR_DECL	961:4	961:10	5	int32 r1
TYPE	961:4	961:4	6	int32
TYPE_NAME	961:4	961:4	7	int32
LEAF_NODE	961:4	961:4	8	int32
NAME	961:10	961:10	6	r1
LEAF_NODE	961:10	961:10	7	r1
LEAF_NODE	961:12	961:12	5	,
INIT_DECL_LIST	961:4	961:4	5	int32 g1 , int32 b1 , int32 a1 , int32 r2 , int32 g2 , int32 b2 , int32 a2 , int32 mask
VAR_DECL	961:4	961:14	6	int32 g1
TYPE	961:4	961:4	7	int32
TYPE_NAME	961:4	961:4	8	int32
LEAF_NODE	961:4	961:4	9	int32
NAME	961:14	961:14	7	g1
LEAF_NODE	961:14	961:14	8	g1
LEAF_NODE	961:16	961:16	6	,
INIT_DECL_LIST	961:4	961:4	6	int32 b1 , int32 a1 , int32 r2 , int32 g2 , int32 b2 , int32 a2 , int32 mask
VAR_DECL	961:4	961:18	7	int32 b1
TYPE	961:4	961:4	8	int32
TYPE_NAME	961:4	961:4	9	int32
LEAF_NODE	961:4	961:4	10	int32
NAME	961:18	961:18	8	b1
LEAF_NODE	961:18	961:18	9	b1
LEAF_NODE	961:20	961:20	7	,
INIT_DECL_LIST	961:4	961:4	7	int32 a1 , int32 r2 , int32 g2 , int32 b2 , int32 a2 , int32 mask
VAR_DECL	961:4	961:22	8	int32 a1
TYPE	961:4	961:4	9	int32
TYPE_NAME	961:4	961:4	10	int32
LEAF_NODE	961:4	961:4	11	int32
NAME	961:22	961:22	9	a1
LEAF_NODE	961:22	961:22	10	a1
LEAF_NODE	961:24	961:24	8	,
INIT_DECL_LIST	961:4	961:4	8	int32 r2 , int32 g2 , int32 b2 , int32 a2 , int32 mask
VAR_DECL	961:4	961:26	9	int32 r2
TYPE	961:4	961:4	10	int32
TYPE_NAME	961:4	961:4	11	int32
LEAF_NODE	961:4	961:4	12	int32
NAME	961:26	961:26	10	r2
LEAF_NODE	961:26	961:26	11	r2
LEAF_NODE	961:28	961:28	9	,
INIT_DECL_LIST	961:4	961:4	9	int32 g2 , int32 b2 , int32 a2 , int32 mask
VAR_DECL	961:4	961:30	10	int32 g2
TYPE	961:4	961:4	11	int32
TYPE_NAME	961:4	961:4	12	int32
LEAF_NODE	961:4	961:4	13	int32
NAME	961:30	961:30	11	g2
LEAF_NODE	961:30	961:30	12	g2
LEAF_NODE	961:32	961:32	10	,
INIT_DECL_LIST	961:4	961:4	10	int32 b2 , int32 a2 , int32 mask
VAR_DECL	961:4	961:34	11	int32 b2
TYPE	961:4	961:4	12	int32
TYPE_NAME	961:4	961:4	13	int32
LEAF_NODE	961:4	961:4	14	int32
NAME	961:34	961:34	12	b2
LEAF_NODE	961:34	961:34	13	b2
LEAF_NODE	961:36	961:36	11	,
INIT_DECL_LIST	961:4	961:4	11	int32 a2 , int32 mask
VAR_DECL	961:4	961:38	12	int32 a2
TYPE	961:4	961:4	13	int32
TYPE_NAME	961:4	961:4	14	int32
LEAF_NODE	961:4	961:4	15	int32
NAME	961:38	961:38	13	a2
LEAF_NODE	961:38	961:38	14	a2
LEAF_NODE	961:40	961:40	12	,
VAR_DECL	961:4	961:42	12	int32 mask
TYPE	961:4	961:4	13	int32
TYPE_NAME	961:4	961:4	14	int32
LEAF_NODE	961:4	961:4	15	int32
NAME	961:42	961:42	13	mask
LEAF_NODE	961:42	961:42	14	mask
LEAF_NODE	961:46	961:46	4	;
SIMPLE_DECL	962:4	962:27	3	float fltsize ; fltsize = Fltsize ;
VAR_DECL	962:4	962:10	4	float fltsize ; fltsize = Fltsize
TYPE	962:4	962:4	5	float
TYPE_NAME	962:4	962:4	6	float
LEAF_NODE	962:4	962:4	7	float
NAME	962:10	962:10	5	fltsize
LEAF_NODE	962:10	962:10	6	fltsize
LEAF_NODE	0:0	0:0	5	;
INIT	962:10	962:10	5	fltsize = Fltsize
ASSIGN	962:10	962:20	6	fltsize = Fltsize
LVAL	962:10	962:10	7	fltsize
NAME	962:10	962:10	8	fltsize
LEAF_NODE	962:10	962:10	9	fltsize
ASSIGN_OP	962:18	962:18	7	=
LEAF_NODE	962:18	962:18	8	=
RVAL	962:20	962:20	7	Fltsize
FIELD	962:20	962:20	8	Fltsize
LEAF_NODE	962:20	962:20	9	Fltsize
LEAF_NODE	962:27	962:27	4	;
EXPR_STATEMENT	969:4	969:20	3	mask = CODE_MASK ;
EXPR	969:4	969:4	4	mask = CODE_MASK
ASSIGN	969:4	969:11	5	mask = CODE_MASK
LVAL	969:4	969:4	6	mask
FIELD	969:4	969:4	7	mask
LEAF_NODE	969:4	969:4	8	mask
ASSIGN_OP	969:9	969:9	6	=
LEAF_NODE	969:9	969:9	7	=
RVAL	969:11	969:11	6	CODE_MASK
FIELD	969:11	969:11	7	CODE_MASK
LEAF_NODE	969:11	969:11	8	CODE_MASK
LEAF_NODE	969:20	969:20	4	;
SELECTION	970:4	970:21	3	
KEYWORD	970:4	970:4	4	if
LEAF_NODE	970:4	970:4	5	if
LEAF_NODE	970:7	970:7	4	(
CONDITION	970:8	970:8	4	n >= stride
EXPR	970:8	970:13	5	n >= stride
FIELD	970:8	970:8	6	n
LEAF_NODE	970:8	970:8	7	n
REL_OPERATOR	970:10	970:10	6	>=
LEAF_NODE	970:10	970:10	7	>=
FIELD	970:13	970:13	6	stride
LEAF_NODE	970:13	970:13	7	stride
LEAF_NODE	970:19	970:19	4	)
STATEMENTS	970:21	1009:4	4	
LEAF_NODE	970:21	970:21	5	{
STATEMENTS	971:1	999:3	5	
SELECTION	971:1	971:18	6	
KEYWORD	971:1	971:1	7	if
LEAF_NODE	971:1	971:1	8	if
LEAF_NODE	971:4	971:4	7	(
CONDITION	971:5	971:5	7	stride == 3
EXPR	971:5	971:15	8	stride == 3
FIELD	971:5	971:5	9	stride
LEAF_NODE	971:5	971:5	10	stride
EQ_OPERATOR	971:12	971:12	9	==
LEAF_NODE	971:12	971:12	10	==
FIELD	971:15	971:15	9	3
LEAF_NODE	971:15	971:15	10	3
LEAF_NODE	971:16	971:16	7	)
STATEMENTS	971:18	984:1	7	
LEAF_NODE	971:18	971:18	8	{
STATEMENTS	972:5	976:5	8	
EXPR_STATEMENT	972:5	972:39	9	r2 = wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] ) ;
EXPR	972:5	972:5	10	r2 = wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] )
ASSIGN	972:5	972:10	11	r2 = wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] )
LVAL	972:5	972:5	12	r2
FIELD	972:5	972:5	13	r2
LEAF_NODE	972:5	972:5	14	r2
ASSIGN_OP	972:8	972:8	12	=
LEAF_NODE	972:8	972:8	13	=
RVAL	972:10	972:10	12	wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] )
ASSIGN	972:10	972:18	13	wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] )
LVAL	972:10	972:10	14	wp [ 0 ]
FIELD	972:10	972:14	15	wp [ 0 ]
LEAF_NODE	972:10	972:10	16	wp
LEAF_NODE	972:12	972:12	16	[
EXPR	972:13	972:13	16	0
FIELD	972:13	972:13	17	0
LEAF_NODE	972:13	972:13	18	0
LEAF_NODE	972:14	972:14	16	]
ASSIGN_OP	972:16	972:16	14	=
LEAF_NODE	972:16	972:16	15	=
RVAL	972:18	972:27	14	( uint16 ) CLAMP ( ip [ 0 ] )
LEAF_NODE	972:18	972:18	15	(
TYPE_NAME	972:19	972:19	15	uint16
LEAF_NODE	972:19	972:19	16	uint16
LEAF_NODE	972:25	972:25	15	)
FUNCTION_CALL	972:27	972:38	15	CLAMP ( ip [ 0 ] )
CALLEE	972:27	972:27	16	CLAMP
LEAF_NODE	972:27	972:27	17	CLAMP
LEAF_NODE	972:32	972:32	16	(
ARGUMENT	972:33	972:33	16	ip [ 0 ]
FIELD	972:33	972:37	17	ip [ 0 ]
LEAF_NODE	972:33	972:33	18	ip
LEAF_NODE	972:35	972:35	18	[
EXPR	972:36	972:36	18	0
FIELD	972:36	972:36	19	0
LEAF_NODE	972:36	972:36	20	0
LEAF_NODE	972:37	972:37	18	]
LEAF_NODE	972:38	972:38	16	)
LEAF_NODE	972:39	972:39	10	;
EXPR_STATEMENT	973:5	973:39	9	g2 = wp [ 1 ] = ( uint16 ) CLAMP ( ip [ 1 ] ) ;
EXPR	973:5	973:5	10	g2 = wp [ 1 ] = ( uint16 ) CLAMP ( ip [ 1 ] )
ASSIGN	973:5	973:10	11	g2 = wp [ 1 ] = ( uint16 ) CLAMP ( ip [ 1 ] )
LVAL	973:5	973:5	12	g2
FIELD	973:5	973:5	13	g2
LEAF_NODE	973:5	973:5	14	g2
ASSIGN_OP	973:8	973:8	12	=
LEAF_NODE	973:8	973:8	13	=
RVAL	973:10	973:10	12	wp [ 1 ] = ( uint16 ) CLAMP ( ip [ 1 ] )
ASSIGN	973:10	973:18	13	wp [ 1 ] = ( uint16 ) CLAMP ( ip [ 1 ] )
LVAL	973:10	973:10	14	wp [ 1 ]
FIELD	973:10	973:14	15	wp [ 1 ]
LEAF_NODE	973:10	973:10	16	wp
LEAF_NODE	973:12	973:12	16	[
EXPR	973:13	973:13	16	1
FIELD	973:13	973:13	17	1
LEAF_NODE	973:13	973:13	18	1
LEAF_NODE	973:14	973:14	16	]
ASSIGN_OP	973:16	973:16	14	=
LEAF_NODE	973:16	973:16	15	=
RVAL	973:18	973:27	14	( uint16 ) CLAMP ( ip [ 1 ] )
LEAF_NODE	973:18	973:18	15	(
TYPE_NAME	973:19	973:19	15	uint16
LEAF_NODE	973:19	973:19	16	uint16
LEAF_NODE	973:25	973:25	15	)
FUNCTION_CALL	973:27	973:38	15	CLAMP ( ip [ 1 ] )
CALLEE	973:27	973:27	16	CLAMP
LEAF_NODE	973:27	973:27	17	CLAMP
LEAF_NODE	973:32	973:32	16	(
ARGUMENT	973:33	973:33	16	ip [ 1 ]
FIELD	973:33	973:37	17	ip [ 1 ]
LEAF_NODE	973:33	973:33	18	ip
LEAF_NODE	973:35	973:35	18	[
EXPR	973:36	973:36	18	1
FIELD	973:36	973:36	19	1
LEAF_NODE	973:36	973:36	20	1
LEAF_NODE	973:37	973:37	18	]
LEAF_NODE	973:38	973:38	16	)
LEAF_NODE	973:39	973:39	10	;
EXPR_STATEMENT	974:5	974:39	9	b2 = wp [ 2 ] = ( uint16 ) CLAMP ( ip [ 2 ] ) ;
EXPR	974:5	974:5	10	b2 = wp [ 2 ] = ( uint16 ) CLAMP ( ip [ 2 ] )
ASSIGN	974:5	974:10	11	b2 = wp [ 2 ] = ( uint16 ) CLAMP ( ip [ 2 ] )
LVAL	974:5	974:5	12	b2
FIELD	974:5	974:5	13	b2
LEAF_NODE	974:5	974:5	14	b2
ASSIGN_OP	974:8	974:8	12	=
LEAF_NODE	974:8	974:8	13	=
RVAL	974:10	974:10	12	wp [ 2 ] = ( uint16 ) CLAMP ( ip [ 2 ] )
ASSIGN	974:10	974:18	13	wp [ 2 ] = ( uint16 ) CLAMP ( ip [ 2 ] )
LVAL	974:10	974:10	14	wp [ 2 ]
FIELD	974:10	974:14	15	wp [ 2 ]
LEAF_NODE	974:10	974:10	16	wp
LEAF_NODE	974:12	974:12	16	[
EXPR	974:13	974:13	16	2
FIELD	974:13	974:13	17	2
LEAF_NODE	974:13	974:13	18	2
LEAF_NODE	974:14	974:14	16	]
ASSIGN_OP	974:16	974:16	14	=
LEAF_NODE	974:16	974:16	15	=
RVAL	974:18	974:27	14	( uint16 ) CLAMP ( ip [ 2 ] )
LEAF_NODE	974:18	974:18	15	(
TYPE_NAME	974:19	974:19	15	uint16
LEAF_NODE	974:19	974:19	16	uint16
LEAF_NODE	974:25	974:25	15	)
FUNCTION_CALL	974:27	974:38	15	CLAMP ( ip [ 2 ] )
CALLEE	974:27	974:27	16	CLAMP
LEAF_NODE	974:27	974:27	17	CLAMP
LEAF_NODE	974:32	974:32	16	(
ARGUMENT	974:33	974:33	16	ip [ 2 ]
FIELD	974:33	974:37	17	ip [ 2 ]
LEAF_NODE	974:33	974:33	18	ip
LEAF_NODE	974:35	974:35	18	[
EXPR	974:36	974:36	18	2
FIELD	974:36	974:36	19	2
LEAF_NODE	974:36	974:36	20	2
LEAF_NODE	974:37	974:37	18	]
LEAF_NODE	974:38	974:38	16	)
LEAF_NODE	974:39	974:39	10	;
EXPR_STATEMENT	975:5	975:11	9	n -= 3 ;
EXPR	975:5	975:5	10	n -= 3
ASSIGN	975:5	975:10	11	n -= 3
LVAL	975:5	975:5	12	n
FIELD	975:5	975:5	13	n
LEAF_NODE	975:5	975:5	14	n
ASSIGN_OP	975:7	975:7	12	-=
LEAF_NODE	975:7	975:7	13	-=
RVAL	975:10	975:10	12	3
FIELD	975:10	975:10	13	3
LEAF_NODE	975:10	975:10	14	3
LEAF_NODE	975:11	975:11	10	;
ITERATION	976:5	976:19	9	
KEYWORD	976:5	976:5	10	while
LEAF_NODE	976:5	976:5	11	while
LEAF_NODE	976:11	976:11	10	(
CONDITION	976:12	976:12	10	n > 0
EXPR	976:12	976:16	11	n > 0
FIELD	976:12	976:12	12	n
LEAF_NODE	976:12	976:12	13	n
REL_OPERATOR	976:14	976:14	12	>
LEAF_NODE	976:14	976:14	13	>
FIELD	976:16	976:16	12	0
LEAF_NODE	976:16	976:16	13	0
LEAF_NODE	976:17	976:17	10	)
STATEMENTS	976:19	983:5	10	
LEAF_NODE	976:19	976:19	11	{
STATEMENTS	977:2	982:63	11	
EXPR_STATEMENT	977:2	977:8	12	n -= 3 ;
EXPR	977:2	977:2	13	n -= 3
ASSIGN	977:2	977:7	14	n -= 3
LVAL	977:2	977:2	15	n
FIELD	977:2	977:2	16	n
LEAF_NODE	977:2	977:2	17	n
ASSIGN_OP	977:4	977:4	15	-=
LEAF_NODE	977:4	977:4	16	-=
RVAL	977:7	977:7	15	3
FIELD	977:7	977:7	16	3
LEAF_NODE	977:7	977:7	17	3
LEAF_NODE	977:8	977:8	13	;
EXPR_STATEMENT	978:2	978:9	12	wp += 3 ;
EXPR	978:2	978:2	13	wp += 3
ASSIGN	978:2	978:8	14	wp += 3
LVAL	978:2	978:2	15	wp
FIELD	978:2	978:2	16	wp
LEAF_NODE	978:2	978:2	17	wp
ASSIGN_OP	978:5	978:5	15	+=
LEAF_NODE	978:5	978:5	16	+=
RVAL	978:8	978:8	15	3
FIELD	978:8	978:8	16	3
LEAF_NODE	978:8	978:8	17	3
LEAF_NODE	978:9	978:9	13	;
EXPR_STATEMENT	979:2	979:9	12	ip += 3 ;
EXPR	979:2	979:2	13	ip += 3
ASSIGN	979:2	979:8	14	ip += 3
LVAL	979:2	979:2	15	ip
FIELD	979:2	979:2	16	ip
LEAF_NODE	979:2	979:2	17	ip
ASSIGN_OP	979:5	979:5	15	+=
LEAF_NODE	979:5	979:5	16	+=
RVAL	979:8	979:8	15	3
FIELD	979:8	979:8	16	3
LEAF_NODE	979:8	979:8	17	3
LEAF_NODE	979:9	979:9	13	;
EXPR_STATEMENT	980:2	980:27	12	r1 = ( int32 ) CLAMP ( ip [ 0 ] ) ;
EXPR	980:2	980:2	13	r1 = ( int32 ) CLAMP ( ip [ 0 ] )
ASSIGN	980:2	980:7	14	r1 = ( int32 ) CLAMP ( ip [ 0 ] )
LVAL	980:2	980:2	15	r1
FIELD	980:2	980:2	16	r1
LEAF_NODE	980:2	980:2	17	r1
ASSIGN_OP	980:5	980:5	15	=
LEAF_NODE	980:5	980:5	16	=
RVAL	980:7	980:15	15	( int32 ) CLAMP ( ip [ 0 ] )
LEAF_NODE	980:7	980:7	16	(
TYPE_NAME	980:8	980:8	16	int32
LEAF_NODE	980:8	980:8	17	int32
LEAF_NODE	980:13	980:13	16	)
FUNCTION_CALL	980:15	980:26	16	CLAMP ( ip [ 0 ] )
CALLEE	980:15	980:15	17	CLAMP
LEAF_NODE	980:15	980:15	18	CLAMP
LEAF_NODE	980:20	980:20	17	(
ARGUMENT	980:21	980:21	17	ip [ 0 ]
FIELD	980:21	980:25	18	ip [ 0 ]
LEAF_NODE	980:21	980:21	19	ip
LEAF_NODE	980:23	980:23	19	[
EXPR	980:24	980:24	19	0
FIELD	980:24	980:24	20	0
LEAF_NODE	980:24	980:24	21	0
LEAF_NODE	980:25	980:25	19	]
LEAF_NODE	980:26	980:26	17	)
LEAF_NODE	980:27	980:27	13	;
EXPR_STATEMENT	980:29	980:61	12	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask ) ;
EXPR	980:29	980:29	13	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
ASSIGN	980:29	980:37	14	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
LVAL	980:29	980:29	15	wp [ 0 ]
FIELD	980:29	980:33	16	wp [ 0 ]
LEAF_NODE	980:29	980:29	17	wp
LEAF_NODE	980:31	980:31	17	[
EXPR	980:32	980:32	17	0
FIELD	980:32	980:32	18	0
LEAF_NODE	980:32	980:32	19	0
LEAF_NODE	980:33	980:33	17	]
ASSIGN_OP	980:35	980:35	15	=
LEAF_NODE	980:35	980:35	16	=
RVAL	980:37	980:60	15	( uint16 ) ( ( r1 - r2 ) & mask )
LEAF_NODE	980:37	980:37	16	(
TYPE_NAME	980:38	980:38	16	uint16
LEAF_NODE	980:38	980:38	17	uint16
LEAF_NODE	980:44	980:44	16	)
LEAF_NODE	980:45	980:45	16	(
LEAF_NODE	980:46	980:46	16	(
FIELD	980:47	980:47	16	r1
LEAF_NODE	980:47	980:47	17	r1
LEAF_NODE	980:49	980:49	16	-
FIELD	980:50	980:50	16	r2
LEAF_NODE	980:50	980:50	17	r2
LEAF_NODE	980:52	980:52	16	)
LEAF_NODE	980:54	980:54	16	&
FIELD	980:56	980:56	16	mask
LEAF_NODE	980:56	980:56	17	mask
LEAF_NODE	980:60	980:60	16	)
LEAF_NODE	980:61	980:61	13	;
EXPR_STATEMENT	980:63	980:70	12	r2 = r1 ;
EXPR	980:63	980:63	13	r2 = r1
ASSIGN	980:63	980:68	14	r2 = r1
LVAL	980:63	980:63	15	r2
FIELD	980:63	980:63	16	r2
LEAF_NODE	980:63	980:63	17	r2
ASSIGN_OP	980:66	980:66	15	=
LEAF_NODE	980:66	980:66	16	=
RVAL	980:68	980:68	15	r1
FIELD	980:68	980:68	16	r1
LEAF_NODE	980:68	980:68	17	r1
LEAF_NODE	980:70	980:70	13	;
EXPR_STATEMENT	981:2	981:27	12	g1 = ( int32 ) CLAMP ( ip [ 1 ] ) ;
EXPR	981:2	981:2	13	g1 = ( int32 ) CLAMP ( ip [ 1 ] )
ASSIGN	981:2	981:7	14	g1 = ( int32 ) CLAMP ( ip [ 1 ] )
LVAL	981:2	981:2	15	g1
FIELD	981:2	981:2	16	g1
LEAF_NODE	981:2	981:2	17	g1
ASSIGN_OP	981:5	981:5	15	=
LEAF_NODE	981:5	981:5	16	=
RVAL	981:7	981:15	15	( int32 ) CLAMP ( ip [ 1 ] )
LEAF_NODE	981:7	981:7	16	(
TYPE_NAME	981:8	981:8	16	int32
LEAF_NODE	981:8	981:8	17	int32
LEAF_NODE	981:13	981:13	16	)
FUNCTION_CALL	981:15	981:26	16	CLAMP ( ip [ 1 ] )
CALLEE	981:15	981:15	17	CLAMP
LEAF_NODE	981:15	981:15	18	CLAMP
LEAF_NODE	981:20	981:20	17	(
ARGUMENT	981:21	981:21	17	ip [ 1 ]
FIELD	981:21	981:25	18	ip [ 1 ]
LEAF_NODE	981:21	981:21	19	ip
LEAF_NODE	981:23	981:23	19	[
EXPR	981:24	981:24	19	1
FIELD	981:24	981:24	20	1
LEAF_NODE	981:24	981:24	21	1
LEAF_NODE	981:25	981:25	19	]
LEAF_NODE	981:26	981:26	17	)
LEAF_NODE	981:27	981:27	13	;
EXPR_STATEMENT	981:29	981:61	12	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask ) ;
EXPR	981:29	981:29	13	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
ASSIGN	981:29	981:37	14	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
LVAL	981:29	981:29	15	wp [ 1 ]
FIELD	981:29	981:33	16	wp [ 1 ]
LEAF_NODE	981:29	981:29	17	wp
LEAF_NODE	981:31	981:31	17	[
EXPR	981:32	981:32	17	1
FIELD	981:32	981:32	18	1
LEAF_NODE	981:32	981:32	19	1
LEAF_NODE	981:33	981:33	17	]
ASSIGN_OP	981:35	981:35	15	=
LEAF_NODE	981:35	981:35	16	=
RVAL	981:37	981:60	15	( uint16 ) ( ( g1 - g2 ) & mask )
LEAF_NODE	981:37	981:37	16	(
TYPE_NAME	981:38	981:38	16	uint16
LEAF_NODE	981:38	981:38	17	uint16
LEAF_NODE	981:44	981:44	16	)
LEAF_NODE	981:45	981:45	16	(
LEAF_NODE	981:46	981:46	16	(
FIELD	981:47	981:47	16	g1
LEAF_NODE	981:47	981:47	17	g1
LEAF_NODE	981:49	981:49	16	-
FIELD	981:50	981:50	16	g2
LEAF_NODE	981:50	981:50	17	g2
LEAF_NODE	981:52	981:52	16	)
LEAF_NODE	981:54	981:54	16	&
FIELD	981:56	981:56	16	mask
LEAF_NODE	981:56	981:56	17	mask
LEAF_NODE	981:60	981:60	16	)
LEAF_NODE	981:61	981:61	13	;
EXPR_STATEMENT	981:63	981:70	12	g2 = g1 ;
EXPR	981:63	981:63	13	g2 = g1
ASSIGN	981:63	981:68	14	g2 = g1
LVAL	981:63	981:63	15	g2
FIELD	981:63	981:63	16	g2
LEAF_NODE	981:63	981:63	17	g2
ASSIGN_OP	981:66	981:66	15	=
LEAF_NODE	981:66	981:66	16	=
RVAL	981:68	981:68	15	g1
FIELD	981:68	981:68	16	g1
LEAF_NODE	981:68	981:68	17	g1
LEAF_NODE	981:70	981:70	13	;
EXPR_STATEMENT	982:2	982:27	12	b1 = ( int32 ) CLAMP ( ip [ 2 ] ) ;
EXPR	982:2	982:2	13	b1 = ( int32 ) CLAMP ( ip [ 2 ] )
ASSIGN	982:2	982:7	14	b1 = ( int32 ) CLAMP ( ip [ 2 ] )
LVAL	982:2	982:2	15	b1
FIELD	982:2	982:2	16	b1
LEAF_NODE	982:2	982:2	17	b1
ASSIGN_OP	982:5	982:5	15	=
LEAF_NODE	982:5	982:5	16	=
RVAL	982:7	982:15	15	( int32 ) CLAMP ( ip [ 2 ] )
LEAF_NODE	982:7	982:7	16	(
TYPE_NAME	982:8	982:8	16	int32
LEAF_NODE	982:8	982:8	17	int32
LEAF_NODE	982:13	982:13	16	)
FUNCTION_CALL	982:15	982:26	16	CLAMP ( ip [ 2 ] )
CALLEE	982:15	982:15	17	CLAMP
LEAF_NODE	982:15	982:15	18	CLAMP
LEAF_NODE	982:20	982:20	17	(
ARGUMENT	982:21	982:21	17	ip [ 2 ]
FIELD	982:21	982:25	18	ip [ 2 ]
LEAF_NODE	982:21	982:21	19	ip
LEAF_NODE	982:23	982:23	19	[
EXPR	982:24	982:24	19	2
FIELD	982:24	982:24	20	2
LEAF_NODE	982:24	982:24	21	2
LEAF_NODE	982:25	982:25	19	]
LEAF_NODE	982:26	982:26	17	)
LEAF_NODE	982:27	982:27	13	;
EXPR_STATEMENT	982:29	982:61	12	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask ) ;
EXPR	982:29	982:29	13	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
ASSIGN	982:29	982:37	14	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
LVAL	982:29	982:29	15	wp [ 2 ]
FIELD	982:29	982:33	16	wp [ 2 ]
LEAF_NODE	982:29	982:29	17	wp
LEAF_NODE	982:31	982:31	17	[
EXPR	982:32	982:32	17	2
FIELD	982:32	982:32	18	2
LEAF_NODE	982:32	982:32	19	2
LEAF_NODE	982:33	982:33	17	]
ASSIGN_OP	982:35	982:35	15	=
LEAF_NODE	982:35	982:35	16	=
RVAL	982:37	982:60	15	( uint16 ) ( ( b1 - b2 ) & mask )
LEAF_NODE	982:37	982:37	16	(
TYPE_NAME	982:38	982:38	16	uint16
LEAF_NODE	982:38	982:38	17	uint16
LEAF_NODE	982:44	982:44	16	)
LEAF_NODE	982:45	982:45	16	(
LEAF_NODE	982:46	982:46	16	(
FIELD	982:47	982:47	16	b1
LEAF_NODE	982:47	982:47	17	b1
LEAF_NODE	982:49	982:49	16	-
FIELD	982:50	982:50	16	b2
LEAF_NODE	982:50	982:50	17	b2
LEAF_NODE	982:52	982:52	16	)
LEAF_NODE	982:54	982:54	16	&
FIELD	982:56	982:56	16	mask
LEAF_NODE	982:56	982:56	17	mask
LEAF_NODE	982:60	982:60	16	)
LEAF_NODE	982:61	982:61	13	;
EXPR_STATEMENT	982:63	982:70	12	b2 = b1 ;
EXPR	982:63	982:63	13	b2 = b1
ASSIGN	982:63	982:68	14	b2 = b1
LVAL	982:63	982:63	15	b2
FIELD	982:63	982:63	16	b2
LEAF_NODE	982:63	982:63	17	b2
ASSIGN_OP	982:66	982:66	15	=
LEAF_NODE	982:66	982:66	16	=
RVAL	982:68	982:68	15	b1
FIELD	982:68	982:68	16	b1
LEAF_NODE	982:68	982:68	17	b1
LEAF_NODE	982:70	982:70	13	;
LEAF_NODE	983:5	983:5	11	}
LEAF_NODE	984:1	984:1	8	}
SELECTION	984:3	984:8	6	
KEYWORD	984:3	984:3	7	else
LEAF_NODE	984:3	984:3	8	else
STATEMENTS	984:8	984:8	7	
SELECTION	984:8	984:25	8	
KEYWORD	984:8	984:8	9	if
LEAF_NODE	984:8	984:8	10	if
LEAF_NODE	984:11	984:11	9	(
CONDITION	984:12	984:12	9	stride == 4
EXPR	984:12	984:22	10	stride == 4
FIELD	984:12	984:12	11	stride
LEAF_NODE	984:12	984:12	12	stride
EQ_OPERATOR	984:19	984:19	11	==
LEAF_NODE	984:19	984:19	12	==
FIELD	984:22	984:22	11	4
LEAF_NODE	984:22	984:22	12	4
LEAF_NODE	984:23	984:23	9	)
STATEMENTS	984:25	999:1	9	
LEAF_NODE	984:25	984:25	10	{
STATEMENTS	985:5	990:5	10	
EXPR_STATEMENT	985:5	985:39	11	r2 = wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] ) ;
EXPR	985:5	985:5	12	r2 = wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] )
ASSIGN	985:5	985:10	13	r2 = wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] )
LVAL	985:5	985:5	14	r2
FIELD	985:5	985:5	15	r2
LEAF_NODE	985:5	985:5	16	r2
ASSIGN_OP	985:8	985:8	14	=
LEAF_NODE	985:8	985:8	15	=
RVAL	985:10	985:10	14	wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] )
ASSIGN	985:10	985:18	15	wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] )
LVAL	985:10	985:10	16	wp [ 0 ]
FIELD	985:10	985:14	17	wp [ 0 ]
LEAF_NODE	985:10	985:10	18	wp
LEAF_NODE	985:12	985:12	18	[
EXPR	985:13	985:13	18	0
FIELD	985:13	985:13	19	0
LEAF_NODE	985:13	985:13	20	0
LEAF_NODE	985:14	985:14	18	]
ASSIGN_OP	985:16	985:16	16	=
LEAF_NODE	985:16	985:16	17	=
RVAL	985:18	985:27	16	( uint16 ) CLAMP ( ip [ 0 ] )
LEAF_NODE	985:18	985:18	17	(
TYPE_NAME	985:19	985:19	17	uint16
LEAF_NODE	985:19	985:19	18	uint16
LEAF_NODE	985:25	985:25	17	)
FUNCTION_CALL	985:27	985:38	17	CLAMP ( ip [ 0 ] )
CALLEE	985:27	985:27	18	CLAMP
LEAF_NODE	985:27	985:27	19	CLAMP
LEAF_NODE	985:32	985:32	18	(
ARGUMENT	985:33	985:33	18	ip [ 0 ]
FIELD	985:33	985:37	19	ip [ 0 ]
LEAF_NODE	985:33	985:33	20	ip
LEAF_NODE	985:35	985:35	20	[
EXPR	985:36	985:36	20	0
FIELD	985:36	985:36	21	0
LEAF_NODE	985:36	985:36	22	0
LEAF_NODE	985:37	985:37	20	]
LEAF_NODE	985:38	985:38	18	)
LEAF_NODE	985:39	985:39	12	;
EXPR_STATEMENT	986:5	986:39	11	g2 = wp [ 1 ] = ( uint16 ) CLAMP ( ip [ 1 ] ) ;
EXPR	986:5	986:5	12	g2 = wp [ 1 ] = ( uint16 ) CLAMP ( ip [ 1 ] )
ASSIGN	986:5	986:10	13	g2 = wp [ 1 ] = ( uint16 ) CLAMP ( ip [ 1 ] )
LVAL	986:5	986:5	14	g2
FIELD	986:5	986:5	15	g2
LEAF_NODE	986:5	986:5	16	g2
ASSIGN_OP	986:8	986:8	14	=
LEAF_NODE	986:8	986:8	15	=
RVAL	986:10	986:10	14	wp [ 1 ] = ( uint16 ) CLAMP ( ip [ 1 ] )
ASSIGN	986:10	986:18	15	wp [ 1 ] = ( uint16 ) CLAMP ( ip [ 1 ] )
LVAL	986:10	986:10	16	wp [ 1 ]
FIELD	986:10	986:14	17	wp [ 1 ]
LEAF_NODE	986:10	986:10	18	wp
LEAF_NODE	986:12	986:12	18	[
EXPR	986:13	986:13	18	1
FIELD	986:13	986:13	19	1
LEAF_NODE	986:13	986:13	20	1
LEAF_NODE	986:14	986:14	18	]
ASSIGN_OP	986:16	986:16	16	=
LEAF_NODE	986:16	986:16	17	=
RVAL	986:18	986:27	16	( uint16 ) CLAMP ( ip [ 1 ] )
LEAF_NODE	986:18	986:18	17	(
TYPE_NAME	986:19	986:19	17	uint16
LEAF_NODE	986:19	986:19	18	uint16
LEAF_NODE	986:25	986:25	17	)
FUNCTION_CALL	986:27	986:38	17	CLAMP ( ip [ 1 ] )
CALLEE	986:27	986:27	18	CLAMP
LEAF_NODE	986:27	986:27	19	CLAMP
LEAF_NODE	986:32	986:32	18	(
ARGUMENT	986:33	986:33	18	ip [ 1 ]
FIELD	986:33	986:37	19	ip [ 1 ]
LEAF_NODE	986:33	986:33	20	ip
LEAF_NODE	986:35	986:35	20	[
EXPR	986:36	986:36	20	1
FIELD	986:36	986:36	21	1
LEAF_NODE	986:36	986:36	22	1
LEAF_NODE	986:37	986:37	20	]
LEAF_NODE	986:38	986:38	18	)
LEAF_NODE	986:39	986:39	12	;
EXPR_STATEMENT	987:5	987:39	11	b2 = wp [ 2 ] = ( uint16 ) CLAMP ( ip [ 2 ] ) ;
EXPR	987:5	987:5	12	b2 = wp [ 2 ] = ( uint16 ) CLAMP ( ip [ 2 ] )
ASSIGN	987:5	987:10	13	b2 = wp [ 2 ] = ( uint16 ) CLAMP ( ip [ 2 ] )
LVAL	987:5	987:5	14	b2
FIELD	987:5	987:5	15	b2
LEAF_NODE	987:5	987:5	16	b2
ASSIGN_OP	987:8	987:8	14	=
LEAF_NODE	987:8	987:8	15	=
RVAL	987:10	987:10	14	wp [ 2 ] = ( uint16 ) CLAMP ( ip [ 2 ] )
ASSIGN	987:10	987:18	15	wp [ 2 ] = ( uint16 ) CLAMP ( ip [ 2 ] )
LVAL	987:10	987:10	16	wp [ 2 ]
FIELD	987:10	987:14	17	wp [ 2 ]
LEAF_NODE	987:10	987:10	18	wp
LEAF_NODE	987:12	987:12	18	[
EXPR	987:13	987:13	18	2
FIELD	987:13	987:13	19	2
LEAF_NODE	987:13	987:13	20	2
LEAF_NODE	987:14	987:14	18	]
ASSIGN_OP	987:16	987:16	16	=
LEAF_NODE	987:16	987:16	17	=
RVAL	987:18	987:27	16	( uint16 ) CLAMP ( ip [ 2 ] )
LEAF_NODE	987:18	987:18	17	(
TYPE_NAME	987:19	987:19	17	uint16
LEAF_NODE	987:19	987:19	18	uint16
LEAF_NODE	987:25	987:25	17	)
FUNCTION_CALL	987:27	987:38	17	CLAMP ( ip [ 2 ] )
CALLEE	987:27	987:27	18	CLAMP
LEAF_NODE	987:27	987:27	19	CLAMP
LEAF_NODE	987:32	987:32	18	(
ARGUMENT	987:33	987:33	18	ip [ 2 ]
FIELD	987:33	987:37	19	ip [ 2 ]
LEAF_NODE	987:33	987:33	20	ip
LEAF_NODE	987:35	987:35	20	[
EXPR	987:36	987:36	20	2
FIELD	987:36	987:36	21	2
LEAF_NODE	987:36	987:36	22	2
LEAF_NODE	987:37	987:37	20	]
LEAF_NODE	987:38	987:38	18	)
LEAF_NODE	987:39	987:39	12	;
EXPR_STATEMENT	988:5	988:39	11	a2 = wp [ 3 ] = ( uint16 ) CLAMP ( ip [ 3 ] ) ;
EXPR	988:5	988:5	12	a2 = wp [ 3 ] = ( uint16 ) CLAMP ( ip [ 3 ] )
ASSIGN	988:5	988:10	13	a2 = wp [ 3 ] = ( uint16 ) CLAMP ( ip [ 3 ] )
LVAL	988:5	988:5	14	a2
FIELD	988:5	988:5	15	a2
LEAF_NODE	988:5	988:5	16	a2
ASSIGN_OP	988:8	988:8	14	=
LEAF_NODE	988:8	988:8	15	=
RVAL	988:10	988:10	14	wp [ 3 ] = ( uint16 ) CLAMP ( ip [ 3 ] )
ASSIGN	988:10	988:18	15	wp [ 3 ] = ( uint16 ) CLAMP ( ip [ 3 ] )
LVAL	988:10	988:10	16	wp [ 3 ]
FIELD	988:10	988:14	17	wp [ 3 ]
LEAF_NODE	988:10	988:10	18	wp
LEAF_NODE	988:12	988:12	18	[
EXPR	988:13	988:13	18	3
FIELD	988:13	988:13	19	3
LEAF_NODE	988:13	988:13	20	3
LEAF_NODE	988:14	988:14	18	]
ASSIGN_OP	988:16	988:16	16	=
LEAF_NODE	988:16	988:16	17	=
RVAL	988:18	988:27	16	( uint16 ) CLAMP ( ip [ 3 ] )
LEAF_NODE	988:18	988:18	17	(
TYPE_NAME	988:19	988:19	17	uint16
LEAF_NODE	988:19	988:19	18	uint16
LEAF_NODE	988:25	988:25	17	)
FUNCTION_CALL	988:27	988:38	17	CLAMP ( ip [ 3 ] )
CALLEE	988:27	988:27	18	CLAMP
LEAF_NODE	988:27	988:27	19	CLAMP
LEAF_NODE	988:32	988:32	18	(
ARGUMENT	988:33	988:33	18	ip [ 3 ]
FIELD	988:33	988:37	19	ip [ 3 ]
LEAF_NODE	988:33	988:33	20	ip
LEAF_NODE	988:35	988:35	20	[
EXPR	988:36	988:36	20	3
FIELD	988:36	988:36	21	3
LEAF_NODE	988:36	988:36	22	3
LEAF_NODE	988:37	988:37	20	]
LEAF_NODE	988:38	988:38	18	)
LEAF_NODE	988:39	988:39	12	;
EXPR_STATEMENT	989:5	989:11	11	n -= 4 ;
EXPR	989:5	989:5	12	n -= 4
ASSIGN	989:5	989:10	13	n -= 4
LVAL	989:5	989:5	14	n
FIELD	989:5	989:5	15	n
LEAF_NODE	989:5	989:5	16	n
ASSIGN_OP	989:7	989:7	14	-=
LEAF_NODE	989:7	989:7	15	-=
RVAL	989:10	989:10	14	4
FIELD	989:10	989:10	15	4
LEAF_NODE	989:10	989:10	16	4
LEAF_NODE	989:11	989:11	12	;
ITERATION	990:5	990:19	11	
KEYWORD	990:5	990:5	12	while
LEAF_NODE	990:5	990:5	13	while
LEAF_NODE	990:11	990:11	12	(
CONDITION	990:12	990:12	12	n > 0
EXPR	990:12	990:16	13	n > 0
FIELD	990:12	990:12	14	n
LEAF_NODE	990:12	990:12	15	n
REL_OPERATOR	990:14	990:14	14	>
LEAF_NODE	990:14	990:14	15	>
FIELD	990:16	990:16	14	0
LEAF_NODE	990:16	990:16	15	0
LEAF_NODE	990:17	990:17	12	)
STATEMENTS	990:19	998:5	12	
LEAF_NODE	990:19	990:19	13	{
STATEMENTS	991:2	997:63	13	
EXPR_STATEMENT	991:2	991:8	14	n -= 4 ;
EXPR	991:2	991:2	15	n -= 4
ASSIGN	991:2	991:7	16	n -= 4
LVAL	991:2	991:2	17	n
FIELD	991:2	991:2	18	n
LEAF_NODE	991:2	991:2	19	n
ASSIGN_OP	991:4	991:4	17	-=
LEAF_NODE	991:4	991:4	18	-=
RVAL	991:7	991:7	17	4
FIELD	991:7	991:7	18	4
LEAF_NODE	991:7	991:7	19	4
LEAF_NODE	991:8	991:8	15	;
EXPR_STATEMENT	992:2	992:9	14	wp += 4 ;
EXPR	992:2	992:2	15	wp += 4
ASSIGN	992:2	992:8	16	wp += 4
LVAL	992:2	992:2	17	wp
FIELD	992:2	992:2	18	wp
LEAF_NODE	992:2	992:2	19	wp
ASSIGN_OP	992:5	992:5	17	+=
LEAF_NODE	992:5	992:5	18	+=
RVAL	992:8	992:8	17	4
FIELD	992:8	992:8	18	4
LEAF_NODE	992:8	992:8	19	4
LEAF_NODE	992:9	992:9	15	;
EXPR_STATEMENT	993:2	993:9	14	ip += 4 ;
EXPR	993:2	993:2	15	ip += 4
ASSIGN	993:2	993:8	16	ip += 4
LVAL	993:2	993:2	17	ip
FIELD	993:2	993:2	18	ip
LEAF_NODE	993:2	993:2	19	ip
ASSIGN_OP	993:5	993:5	17	+=
LEAF_NODE	993:5	993:5	18	+=
RVAL	993:8	993:8	17	4
FIELD	993:8	993:8	18	4
LEAF_NODE	993:8	993:8	19	4
LEAF_NODE	993:9	993:9	15	;
EXPR_STATEMENT	994:2	994:27	14	r1 = ( int32 ) CLAMP ( ip [ 0 ] ) ;
EXPR	994:2	994:2	15	r1 = ( int32 ) CLAMP ( ip [ 0 ] )
ASSIGN	994:2	994:7	16	r1 = ( int32 ) CLAMP ( ip [ 0 ] )
LVAL	994:2	994:2	17	r1
FIELD	994:2	994:2	18	r1
LEAF_NODE	994:2	994:2	19	r1
ASSIGN_OP	994:5	994:5	17	=
LEAF_NODE	994:5	994:5	18	=
RVAL	994:7	994:15	17	( int32 ) CLAMP ( ip [ 0 ] )
LEAF_NODE	994:7	994:7	18	(
TYPE_NAME	994:8	994:8	18	int32
LEAF_NODE	994:8	994:8	19	int32
LEAF_NODE	994:13	994:13	18	)
FUNCTION_CALL	994:15	994:26	18	CLAMP ( ip [ 0 ] )
CALLEE	994:15	994:15	19	CLAMP
LEAF_NODE	994:15	994:15	20	CLAMP
LEAF_NODE	994:20	994:20	19	(
ARGUMENT	994:21	994:21	19	ip [ 0 ]
FIELD	994:21	994:25	20	ip [ 0 ]
LEAF_NODE	994:21	994:21	21	ip
LEAF_NODE	994:23	994:23	21	[
EXPR	994:24	994:24	21	0
FIELD	994:24	994:24	22	0
LEAF_NODE	994:24	994:24	23	0
LEAF_NODE	994:25	994:25	21	]
LEAF_NODE	994:26	994:26	19	)
LEAF_NODE	994:27	994:27	15	;
EXPR_STATEMENT	994:29	994:61	14	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask ) ;
EXPR	994:29	994:29	15	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
ASSIGN	994:29	994:37	16	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
LVAL	994:29	994:29	17	wp [ 0 ]
FIELD	994:29	994:33	18	wp [ 0 ]
LEAF_NODE	994:29	994:29	19	wp
LEAF_NODE	994:31	994:31	19	[
EXPR	994:32	994:32	19	0
FIELD	994:32	994:32	20	0
LEAF_NODE	994:32	994:32	21	0
LEAF_NODE	994:33	994:33	19	]
ASSIGN_OP	994:35	994:35	17	=
LEAF_NODE	994:35	994:35	18	=
RVAL	994:37	994:60	17	( uint16 ) ( ( r1 - r2 ) & mask )
LEAF_NODE	994:37	994:37	18	(
TYPE_NAME	994:38	994:38	18	uint16
LEAF_NODE	994:38	994:38	19	uint16
LEAF_NODE	994:44	994:44	18	)
LEAF_NODE	994:45	994:45	18	(
LEAF_NODE	994:46	994:46	18	(
FIELD	994:47	994:47	18	r1
LEAF_NODE	994:47	994:47	19	r1
LEAF_NODE	994:49	994:49	18	-
FIELD	994:50	994:50	18	r2
LEAF_NODE	994:50	994:50	19	r2
LEAF_NODE	994:52	994:52	18	)
LEAF_NODE	994:54	994:54	18	&
FIELD	994:56	994:56	18	mask
LEAF_NODE	994:56	994:56	19	mask
LEAF_NODE	994:60	994:60	18	)
LEAF_NODE	994:61	994:61	15	;
EXPR_STATEMENT	994:63	994:70	14	r2 = r1 ;
EXPR	994:63	994:63	15	r2 = r1
ASSIGN	994:63	994:68	16	r2 = r1
LVAL	994:63	994:63	17	r2
FIELD	994:63	994:63	18	r2
LEAF_NODE	994:63	994:63	19	r2
ASSIGN_OP	994:66	994:66	17	=
LEAF_NODE	994:66	994:66	18	=
RVAL	994:68	994:68	17	r1
FIELD	994:68	994:68	18	r1
LEAF_NODE	994:68	994:68	19	r1
LEAF_NODE	994:70	994:70	15	;
EXPR_STATEMENT	995:2	995:27	14	g1 = ( int32 ) CLAMP ( ip [ 1 ] ) ;
EXPR	995:2	995:2	15	g1 = ( int32 ) CLAMP ( ip [ 1 ] )
ASSIGN	995:2	995:7	16	g1 = ( int32 ) CLAMP ( ip [ 1 ] )
LVAL	995:2	995:2	17	g1
FIELD	995:2	995:2	18	g1
LEAF_NODE	995:2	995:2	19	g1
ASSIGN_OP	995:5	995:5	17	=
LEAF_NODE	995:5	995:5	18	=
RVAL	995:7	995:15	17	( int32 ) CLAMP ( ip [ 1 ] )
LEAF_NODE	995:7	995:7	18	(
TYPE_NAME	995:8	995:8	18	int32
LEAF_NODE	995:8	995:8	19	int32
LEAF_NODE	995:13	995:13	18	)
FUNCTION_CALL	995:15	995:26	18	CLAMP ( ip [ 1 ] )
CALLEE	995:15	995:15	19	CLAMP
LEAF_NODE	995:15	995:15	20	CLAMP
LEAF_NODE	995:20	995:20	19	(
ARGUMENT	995:21	995:21	19	ip [ 1 ]
FIELD	995:21	995:25	20	ip [ 1 ]
LEAF_NODE	995:21	995:21	21	ip
LEAF_NODE	995:23	995:23	21	[
EXPR	995:24	995:24	21	1
FIELD	995:24	995:24	22	1
LEAF_NODE	995:24	995:24	23	1
LEAF_NODE	995:25	995:25	21	]
LEAF_NODE	995:26	995:26	19	)
LEAF_NODE	995:27	995:27	15	;
EXPR_STATEMENT	995:29	995:61	14	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask ) ;
EXPR	995:29	995:29	15	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
ASSIGN	995:29	995:37	16	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
LVAL	995:29	995:29	17	wp [ 1 ]
FIELD	995:29	995:33	18	wp [ 1 ]
LEAF_NODE	995:29	995:29	19	wp
LEAF_NODE	995:31	995:31	19	[
EXPR	995:32	995:32	19	1
FIELD	995:32	995:32	20	1
LEAF_NODE	995:32	995:32	21	1
LEAF_NODE	995:33	995:33	19	]
ASSIGN_OP	995:35	995:35	17	=
LEAF_NODE	995:35	995:35	18	=
RVAL	995:37	995:60	17	( uint16 ) ( ( g1 - g2 ) & mask )
LEAF_NODE	995:37	995:37	18	(
TYPE_NAME	995:38	995:38	18	uint16
LEAF_NODE	995:38	995:38	19	uint16
LEAF_NODE	995:44	995:44	18	)
LEAF_NODE	995:45	995:45	18	(
LEAF_NODE	995:46	995:46	18	(
FIELD	995:47	995:47	18	g1
LEAF_NODE	995:47	995:47	19	g1
LEAF_NODE	995:49	995:49	18	-
FIELD	995:50	995:50	18	g2
LEAF_NODE	995:50	995:50	19	g2
LEAF_NODE	995:52	995:52	18	)
LEAF_NODE	995:54	995:54	18	&
FIELD	995:56	995:56	18	mask
LEAF_NODE	995:56	995:56	19	mask
LEAF_NODE	995:60	995:60	18	)
LEAF_NODE	995:61	995:61	15	;
EXPR_STATEMENT	995:63	995:70	14	g2 = g1 ;
EXPR	995:63	995:63	15	g2 = g1
ASSIGN	995:63	995:68	16	g2 = g1
LVAL	995:63	995:63	17	g2
FIELD	995:63	995:63	18	g2
LEAF_NODE	995:63	995:63	19	g2
ASSIGN_OP	995:66	995:66	17	=
LEAF_NODE	995:66	995:66	18	=
RVAL	995:68	995:68	17	g1
FIELD	995:68	995:68	18	g1
LEAF_NODE	995:68	995:68	19	g1
LEAF_NODE	995:70	995:70	15	;
EXPR_STATEMENT	996:2	996:27	14	b1 = ( int32 ) CLAMP ( ip [ 2 ] ) ;
EXPR	996:2	996:2	15	b1 = ( int32 ) CLAMP ( ip [ 2 ] )
ASSIGN	996:2	996:7	16	b1 = ( int32 ) CLAMP ( ip [ 2 ] )
LVAL	996:2	996:2	17	b1
FIELD	996:2	996:2	18	b1
LEAF_NODE	996:2	996:2	19	b1
ASSIGN_OP	996:5	996:5	17	=
LEAF_NODE	996:5	996:5	18	=
RVAL	996:7	996:15	17	( int32 ) CLAMP ( ip [ 2 ] )
LEAF_NODE	996:7	996:7	18	(
TYPE_NAME	996:8	996:8	18	int32
LEAF_NODE	996:8	996:8	19	int32
LEAF_NODE	996:13	996:13	18	)
FUNCTION_CALL	996:15	996:26	18	CLAMP ( ip [ 2 ] )
CALLEE	996:15	996:15	19	CLAMP
LEAF_NODE	996:15	996:15	20	CLAMP
LEAF_NODE	996:20	996:20	19	(
ARGUMENT	996:21	996:21	19	ip [ 2 ]
FIELD	996:21	996:25	20	ip [ 2 ]
LEAF_NODE	996:21	996:21	21	ip
LEAF_NODE	996:23	996:23	21	[
EXPR	996:24	996:24	21	2
FIELD	996:24	996:24	22	2
LEAF_NODE	996:24	996:24	23	2
LEAF_NODE	996:25	996:25	21	]
LEAF_NODE	996:26	996:26	19	)
LEAF_NODE	996:27	996:27	15	;
EXPR_STATEMENT	996:29	996:61	14	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask ) ;
EXPR	996:29	996:29	15	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
ASSIGN	996:29	996:37	16	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
LVAL	996:29	996:29	17	wp [ 2 ]
FIELD	996:29	996:33	18	wp [ 2 ]
LEAF_NODE	996:29	996:29	19	wp
LEAF_NODE	996:31	996:31	19	[
EXPR	996:32	996:32	19	2
FIELD	996:32	996:32	20	2
LEAF_NODE	996:32	996:32	21	2
LEAF_NODE	996:33	996:33	19	]
ASSIGN_OP	996:35	996:35	17	=
LEAF_NODE	996:35	996:35	18	=
RVAL	996:37	996:60	17	( uint16 ) ( ( b1 - b2 ) & mask )
LEAF_NODE	996:37	996:37	18	(
TYPE_NAME	996:38	996:38	18	uint16
LEAF_NODE	996:38	996:38	19	uint16
LEAF_NODE	996:44	996:44	18	)
LEAF_NODE	996:45	996:45	18	(
LEAF_NODE	996:46	996:46	18	(
FIELD	996:47	996:47	18	b1
LEAF_NODE	996:47	996:47	19	b1
LEAF_NODE	996:49	996:49	18	-
FIELD	996:50	996:50	18	b2
LEAF_NODE	996:50	996:50	19	b2
LEAF_NODE	996:52	996:52	18	)
LEAF_NODE	996:54	996:54	18	&
FIELD	996:56	996:56	18	mask
LEAF_NODE	996:56	996:56	19	mask
LEAF_NODE	996:60	996:60	18	)
LEAF_NODE	996:61	996:61	15	;
EXPR_STATEMENT	996:63	996:70	14	b2 = b1 ;
EXPR	996:63	996:63	15	b2 = b1
ASSIGN	996:63	996:68	16	b2 = b1
LVAL	996:63	996:63	17	b2
FIELD	996:63	996:63	18	b2
LEAF_NODE	996:63	996:63	19	b2
ASSIGN_OP	996:66	996:66	17	=
LEAF_NODE	996:66	996:66	18	=
RVAL	996:68	996:68	17	b1
FIELD	996:68	996:68	18	b1
LEAF_NODE	996:68	996:68	19	b1
LEAF_NODE	996:70	996:70	15	;
EXPR_STATEMENT	997:2	997:27	14	a1 = ( int32 ) CLAMP ( ip [ 3 ] ) ;
EXPR	997:2	997:2	15	a1 = ( int32 ) CLAMP ( ip [ 3 ] )
ASSIGN	997:2	997:7	16	a1 = ( int32 ) CLAMP ( ip [ 3 ] )
LVAL	997:2	997:2	17	a1
FIELD	997:2	997:2	18	a1
LEAF_NODE	997:2	997:2	19	a1
ASSIGN_OP	997:5	997:5	17	=
LEAF_NODE	997:5	997:5	18	=
RVAL	997:7	997:15	17	( int32 ) CLAMP ( ip [ 3 ] )
LEAF_NODE	997:7	997:7	18	(
TYPE_NAME	997:8	997:8	18	int32
LEAF_NODE	997:8	997:8	19	int32
LEAF_NODE	997:13	997:13	18	)
FUNCTION_CALL	997:15	997:26	18	CLAMP ( ip [ 3 ] )
CALLEE	997:15	997:15	19	CLAMP
LEAF_NODE	997:15	997:15	20	CLAMP
LEAF_NODE	997:20	997:20	19	(
ARGUMENT	997:21	997:21	19	ip [ 3 ]
FIELD	997:21	997:25	20	ip [ 3 ]
LEAF_NODE	997:21	997:21	21	ip
LEAF_NODE	997:23	997:23	21	[
EXPR	997:24	997:24	21	3
FIELD	997:24	997:24	22	3
LEAF_NODE	997:24	997:24	23	3
LEAF_NODE	997:25	997:25	21	]
LEAF_NODE	997:26	997:26	19	)
LEAF_NODE	997:27	997:27	15	;
EXPR_STATEMENT	997:29	997:61	14	wp [ 3 ] = ( uint16 ) ( ( a1 - a2 ) & mask ) ;
EXPR	997:29	997:29	15	wp [ 3 ] = ( uint16 ) ( ( a1 - a2 ) & mask )
ASSIGN	997:29	997:37	16	wp [ 3 ] = ( uint16 ) ( ( a1 - a2 ) & mask )
LVAL	997:29	997:29	17	wp [ 3 ]
FIELD	997:29	997:33	18	wp [ 3 ]
LEAF_NODE	997:29	997:29	19	wp
LEAF_NODE	997:31	997:31	19	[
EXPR	997:32	997:32	19	3
FIELD	997:32	997:32	20	3
LEAF_NODE	997:32	997:32	21	3
LEAF_NODE	997:33	997:33	19	]
ASSIGN_OP	997:35	997:35	17	=
LEAF_NODE	997:35	997:35	18	=
RVAL	997:37	997:60	17	( uint16 ) ( ( a1 - a2 ) & mask )
LEAF_NODE	997:37	997:37	18	(
TYPE_NAME	997:38	997:38	18	uint16
LEAF_NODE	997:38	997:38	19	uint16
LEAF_NODE	997:44	997:44	18	)
LEAF_NODE	997:45	997:45	18	(
LEAF_NODE	997:46	997:46	18	(
FIELD	997:47	997:47	18	a1
LEAF_NODE	997:47	997:47	19	a1
LEAF_NODE	997:49	997:49	18	-
FIELD	997:50	997:50	18	a2
LEAF_NODE	997:50	997:50	19	a2
LEAF_NODE	997:52	997:52	18	)
LEAF_NODE	997:54	997:54	18	&
FIELD	997:56	997:56	18	mask
LEAF_NODE	997:56	997:56	19	mask
LEAF_NODE	997:60	997:60	18	)
LEAF_NODE	997:61	997:61	15	;
EXPR_STATEMENT	997:63	997:70	14	a2 = a1 ;
EXPR	997:63	997:63	15	a2 = a1
ASSIGN	997:63	997:68	16	a2 = a1
LVAL	997:63	997:63	17	a2
FIELD	997:63	997:63	18	a2
LEAF_NODE	997:63	997:63	19	a2
ASSIGN_OP	997:66	997:66	17	=
LEAF_NODE	997:66	997:66	18	=
RVAL	997:68	997:68	17	a1
FIELD	997:68	997:68	18	a1
LEAF_NODE	997:68	997:68	19	a1
LEAF_NODE	997:70	997:70	15	;
LEAF_NODE	998:5	998:5	13	}
LEAF_NODE	999:1	999:1	10	}
SELECTION	999:3	999:8	6	
KEYWORD	999:3	999:3	7	else
LEAF_NODE	999:3	999:3	8	else
STATEMENTS	999:8	1008:1	7	
LEAF_NODE	999:8	999:8	8	{
STATEMENTS	1000:8	1002:8	8	
LEAF_NODE	1000:8	1000:8	9	REPEAT
LEAF_NODE	1000:14	1000:14	9	(
EXPR_STATEMENT	1000:15	1000:52	9	stride , wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] ) ;
EXPR	1000:15	1000:23	10	stride , wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] )
FIELD	1000:15	1000:15	11	stride
LEAF_NODE	1000:15	1000:15	12	stride
LEAF_NODE	1000:21	1000:21	11	,
ASSIGN	1000:23	1000:31	11	wp [ 0 ] = ( uint16 ) CLAMP ( ip [ 0 ] )
LVAL	1000:23	1000:23	12	wp [ 0 ]
FIELD	1000:23	1000:27	13	wp [ 0 ]
LEAF_NODE	1000:23	1000:23	14	wp
LEAF_NODE	1000:25	1000:25	14	[
EXPR	1000:26	1000:26	14	0
FIELD	1000:26	1000:26	15	0
LEAF_NODE	1000:26	1000:26	16	0
LEAF_NODE	1000:27	1000:27	14	]
ASSIGN_OP	1000:29	1000:29	12	=
LEAF_NODE	1000:29	1000:29	13	=
RVAL	1000:31	1000:40	12	( uint16 ) CLAMP ( ip [ 0 ] )
LEAF_NODE	1000:31	1000:31	13	(
TYPE_NAME	1000:32	1000:32	13	uint16
LEAF_NODE	1000:32	1000:32	14	uint16
LEAF_NODE	1000:38	1000:38	13	)
FUNCTION_CALL	1000:40	1000:51	13	CLAMP ( ip [ 0 ] )
CALLEE	1000:40	1000:40	14	CLAMP
LEAF_NODE	1000:40	1000:40	15	CLAMP
LEAF_NODE	1000:45	1000:45	14	(
ARGUMENT	1000:46	1000:46	14	ip [ 0 ]
FIELD	1000:46	1000:50	15	ip [ 0 ]
LEAF_NODE	1000:46	1000:46	16	ip
LEAF_NODE	1000:48	1000:48	16	[
EXPR	1000:49	1000:49	16	0
FIELD	1000:49	1000:49	17	0
LEAF_NODE	1000:49	1000:49	18	0
LEAF_NODE	1000:50	1000:50	16	]
LEAF_NODE	1000:51	1000:51	14	)
LEAF_NODE	1000:52	1000:52	10	;
EXPR_STATEMENT	1000:54	1000:58	9	wp ++ ;
EXPR	1000:54	1000:54	10	wp ++
FIELD	1000:54	1000:56	11	wp ++
LEAF_NODE	1000:54	1000:54	12	wp
LEAF_NODE	1000:56	1000:56	12	++
LEAF_NODE	1000:58	1000:58	10	;
LEAF_NODE	1000:60	1000:60	9	ip
LEAF_NODE	1000:62	1000:62	9	++
LEAF_NODE	1000:64	1000:64	9	)
EXPR_STATEMENT	1001:8	1001:19	9	n -= stride ;
EXPR	1001:8	1001:8	10	n -= stride
ASSIGN	1001:8	1001:13	11	n -= stride
LVAL	1001:8	1001:8	12	n
FIELD	1001:8	1001:8	13	n
LEAF_NODE	1001:8	1001:8	14	n
ASSIGN_OP	1001:10	1001:10	12	-=
LEAF_NODE	1001:10	1001:10	13	-=
RVAL	1001:13	1001:13	12	stride
FIELD	1001:13	1001:13	13	stride
LEAF_NODE	1001:13	1001:13	14	stride
LEAF_NODE	1001:19	1001:19	10	;
ITERATION	1002:8	1002:22	9	
KEYWORD	1002:8	1002:8	10	while
LEAF_NODE	1002:8	1002:8	11	while
LEAF_NODE	1002:14	1002:14	10	(
CONDITION	1002:15	1002:15	10	n > 0
EXPR	1002:15	1002:19	11	n > 0
FIELD	1002:15	1002:15	12	n
LEAF_NODE	1002:15	1002:15	13	n
REL_OPERATOR	1002:17	1002:17	12	>
LEAF_NODE	1002:17	1002:17	13	>
FIELD	1002:19	1002:19	12	0
LEAF_NODE	1002:19	1002:19	13	0
LEAF_NODE	1002:20	1002:20	10	)
STATEMENTS	1002:22	1007:8	10	
LEAF_NODE	1002:22	1002:22	11	{
STATEMENTS	1003:12	1006:12	11	
LEAF_NODE	1003:12	1003:12	12	REPEAT
LEAF_NODE	1003:18	1003:18	12	(
EXPR_STATEMENT	1003:19	1004:88	12	stride , wp [ 0 ] = ( uint16 ) ( ( ( int32 ) CLAMP ( ip [ 0 ] ) - ( int32 ) CLAMP ( ip [ - stride ] ) ) & mask ) ;
EXPR	1003:19	1004:16	13	stride , wp [ 0 ] = ( uint16 ) ( ( ( int32 ) CLAMP ( ip [ 0 ] ) - ( int32 ) CLAMP ( ip [ - stride ] ) ) & mask )
FIELD	1003:19	1003:19	14	stride
LEAF_NODE	1003:19	1003:19	15	stride
LEAF_NODE	1003:25	1003:25	14	,
ASSIGN	1004:16	1004:24	14	wp [ 0 ] = ( uint16 ) ( ( ( int32 ) CLAMP ( ip [ 0 ] ) - ( int32 ) CLAMP ( ip [ - stride ] ) ) & mask )
LVAL	1004:16	1004:16	15	wp [ 0 ]
FIELD	1004:16	1004:20	16	wp [ 0 ]
LEAF_NODE	1004:16	1004:16	17	wp
LEAF_NODE	1004:18	1004:18	17	[
EXPR	1004:19	1004:19	17	0
FIELD	1004:19	1004:19	18	0
LEAF_NODE	1004:19	1004:19	19	0
LEAF_NODE	1004:20	1004:20	17	]
ASSIGN_OP	1004:22	1004:22	15	=
LEAF_NODE	1004:22	1004:22	16	=
RVAL	1004:24	1004:87	15	( uint16 ) ( ( ( int32 ) CLAMP ( ip [ 0 ] ) - ( int32 ) CLAMP ( ip [ - stride ] ) ) & mask )
LEAF_NODE	1004:24	1004:24	16	(
TYPE_NAME	1004:25	1004:25	16	uint16
LEAF_NODE	1004:25	1004:25	17	uint16
LEAF_NODE	1004:31	1004:31	16	)
LEAF_NODE	1004:32	1004:32	16	(
LEAF_NODE	1004:33	1004:33	16	(
LEAF_NODE	1004:34	1004:34	16	(
TYPE_NAME	1004:35	1004:35	16	int32
LEAF_NODE	1004:35	1004:35	17	int32
LEAF_NODE	1004:40	1004:40	16	)
FUNCTION_CALL	1004:41	1004:52	16	CLAMP ( ip [ 0 ] )
CALLEE	1004:41	1004:41	17	CLAMP
LEAF_NODE	1004:41	1004:41	18	CLAMP
LEAF_NODE	1004:46	1004:46	17	(
ARGUMENT	1004:47	1004:47	17	ip [ 0 ]
FIELD	1004:47	1004:51	18	ip [ 0 ]
LEAF_NODE	1004:47	1004:47	19	ip
LEAF_NODE	1004:49	1004:49	19	[
EXPR	1004:50	1004:50	19	0
FIELD	1004:50	1004:50	20	0
LEAF_NODE	1004:50	1004:50	21	0
LEAF_NODE	1004:51	1004:51	19	]
LEAF_NODE	1004:52	1004:52	17	)
LEAF_NODE	1004:53	1004:53	16	-
LEAF_NODE	1004:54	1004:54	16	(
TYPE_NAME	1004:55	1004:55	16	int32
LEAF_NODE	1004:55	1004:55	17	int32
LEAF_NODE	1004:60	1004:60	16	)
FUNCTION_CALL	1004:61	1004:78	16	CLAMP ( ip [ - stride ] )
CALLEE	1004:61	1004:61	17	CLAMP
LEAF_NODE	1004:61	1004:61	18	CLAMP
LEAF_NODE	1004:66	1004:66	17	(
ARGUMENT	1004:67	1004:67	17	ip [ - stride ]
FIELD	1004:67	1004:77	18	ip [ - stride ]
LEAF_NODE	1004:67	1004:67	19	ip
LEAF_NODE	1004:69	1004:69	19	[
EXPR	1004:70	1004:70	19	- stride
UNARY_EXPR	1004:70	1004:71	20	- stride
UNARY_OPERATOR	1004:70	1004:70	21	-
LEAF_NODE	1004:70	1004:70	22	-
FIELD	1004:71	1004:71	21	stride
LEAF_NODE	1004:71	1004:71	22	stride
LEAF_NODE	1004:77	1004:77	19	]
LEAF_NODE	1004:78	1004:78	17	)
LEAF_NODE	1004:79	1004:79	16	)
LEAF_NODE	1004:81	1004:81	16	&
FIELD	1004:83	1004:83	16	mask
LEAF_NODE	1004:83	1004:83	17	mask
LEAF_NODE	1004:87	1004:87	16	)
LEAF_NODE	1004:88	1004:88	13	;
EXPR_STATEMENT	1005:16	1005:20	12	wp ++ ;
EXPR	1005:16	1005:16	13	wp ++
FIELD	1005:16	1005:18	14	wp ++
LEAF_NODE	1005:16	1005:16	15	wp
LEAF_NODE	1005:18	1005:18	15	++
LEAF_NODE	1005:20	1005:20	13	;
LEAF_NODE	1005:22	1005:22	12	ip
LEAF_NODE	1005:24	1005:24	12	++
LEAF_NODE	1005:26	1005:26	12	)
EXPR_STATEMENT	1006:12	1006:23	12	n -= stride ;
EXPR	1006:12	1006:12	13	n -= stride
ASSIGN	1006:12	1006:17	14	n -= stride
LVAL	1006:12	1006:12	15	n
FIELD	1006:12	1006:12	16	n
LEAF_NODE	1006:12	1006:12	17	n
ASSIGN_OP	1006:14	1006:14	15	-=
LEAF_NODE	1006:14	1006:14	16	-=
RVAL	1006:17	1006:17	15	stride
FIELD	1006:17	1006:17	16	stride
LEAF_NODE	1006:17	1006:17	17	stride
LEAF_NODE	1006:23	1006:23	13	;
LEAF_NODE	1007:8	1007:8	11	}
LEAF_NODE	1008:1	1008:1	8	}
LEAF_NODE	1009:4	1009:4	5	}
LEAF_NODE	1010:0	1010:0	2	}
FUNCTION_DEF	1012:0	1060:0	1	
RETURN_TYPE	1012:0	1012:7	2	static void
LEAF_NODE	1012:0	1012:0	3	static
TYPE_NAME	1012:7	1012:7	3	void
LEAF_NODE	1012:7	1012:7	4	void
FUNCTION_NAME	1013:0	1013:0	2	horizontalDifference16
LEAF_NODE	1013:0	1013:0	3	horizontalDifference16
PARAMETER_LIST	1013:22	1014:35	2	( unsigned short * ip , int n , int stride , unsigned short * wp , uint16 * From14 )
LEAF_NODE	1013:22	1013:22	3	(
PARAMETER_DECL	1013:23	1013:39	3	unsigned short * ip
TYPE	1013:23	1013:38	4	unsigned short *
TYPE_NAME	1013:23	1013:32	5	unsigned short
LEAF_NODE	1013:23	1013:23	6	unsigned
LEAF_NODE	1013:32	1013:32	6	short
POINTER	1013:38	1013:38	5	*
LEAF_NODE	1013:38	1013:38	6	*
NAME	1013:39	1013:39	4	ip
LEAF_NODE	1013:39	1013:39	5	ip
LEAF_NODE	1013:41	1013:41	3	,
PARAMETER_DECL	1013:43	1013:47	3	int n
TYPE	1013:43	1013:43	4	int
TYPE_NAME	1013:43	1013:43	5	int
LEAF_NODE	1013:43	1013:43	6	int
NAME	1013:47	1013:47	4	n
LEAF_NODE	1013:47	1013:47	5	n
LEAF_NODE	1013:48	1013:48	3	,
PARAMETER_DECL	1013:50	1013:54	3	int stride
TYPE	1013:50	1013:50	4	int
TYPE_NAME	1013:50	1013:50	5	int
LEAF_NODE	1013:50	1013:50	6	int
NAME	1013:54	1013:54	4	stride
LEAF_NODE	1013:54	1013:54	5	stride
LEAF_NODE	1013:60	1013:60	3	,
PARAMETER_DECL	1014:1	1014:17	3	unsigned short * wp
TYPE	1014:1	1014:16	4	unsigned short *
TYPE_NAME	1014:1	1014:10	5	unsigned short
LEAF_NODE	1014:1	1014:1	6	unsigned
LEAF_NODE	1014:10	1014:10	6	short
POINTER	1014:16	1014:16	5	*
LEAF_NODE	1014:16	1014:16	6	*
NAME	1014:17	1014:17	4	wp
LEAF_NODE	1014:17	1014:17	5	wp
LEAF_NODE	1014:19	1014:19	3	,
PARAMETER_DECL	1014:21	1014:29	3	uint16 * From14
TYPE	1014:21	1014:28	4	uint16 *
TYPE_NAME	1014:21	1014:21	5	uint16
LEAF_NODE	1014:21	1014:21	6	uint16
POINTER	1014:28	1014:28	5	*
LEAF_NODE	1014:28	1014:28	6	*
NAME	1014:29	1014:29	4	From14
LEAF_NODE	1014:29	1014:29	5	From14
LEAF_NODE	1014:35	1014:35	3	)
LEAF_NODE	1015:0	1015:0	2	{
STATEMENTS	1016:4	1023:4	2	
LEAF_NODE	1016:4	1016:4	3	register
SIMPLE_DECL	1016:13	1016:54	3	int r1 , int g1 , int b1 , int a1 , int r2 , int g2 , int b2 , int a2 , int mask ;
INIT_DECL_LIST	1016:13	1016:13	4	int r1 , int g1 , int b1 , int a1 , int r2 , int g2 , int b2 , int a2 , int mask
VAR_DECL	1016:13	1016:18	5	int r1
TYPE	1016:13	1016:13	6	int
TYPE_NAME	1016:13	1016:13	7	int
LEAF_NODE	1016:13	1016:13	8	int
NAME	1016:18	1016:18	6	r1
LEAF_NODE	1016:18	1016:18	7	r1
LEAF_NODE	1016:20	1016:20	5	,
INIT_DECL_LIST	1016:13	1016:13	5	int g1 , int b1 , int a1 , int r2 , int g2 , int b2 , int a2 , int mask
VAR_DECL	1016:13	1016:22	6	int g1
TYPE	1016:13	1016:13	7	int
TYPE_NAME	1016:13	1016:13	8	int
LEAF_NODE	1016:13	1016:13	9	int
NAME	1016:22	1016:22	7	g1
LEAF_NODE	1016:22	1016:22	8	g1
LEAF_NODE	1016:24	1016:24	6	,
INIT_DECL_LIST	1016:13	1016:13	6	int b1 , int a1 , int r2 , int g2 , int b2 , int a2 , int mask
VAR_DECL	1016:13	1016:26	7	int b1
TYPE	1016:13	1016:13	8	int
TYPE_NAME	1016:13	1016:13	9	int
LEAF_NODE	1016:13	1016:13	10	int
NAME	1016:26	1016:26	8	b1
LEAF_NODE	1016:26	1016:26	9	b1
LEAF_NODE	1016:28	1016:28	7	,
INIT_DECL_LIST	1016:13	1016:13	7	int a1 , int r2 , int g2 , int b2 , int a2 , int mask
VAR_DECL	1016:13	1016:30	8	int a1
TYPE	1016:13	1016:13	9	int
TYPE_NAME	1016:13	1016:13	10	int
LEAF_NODE	1016:13	1016:13	11	int
NAME	1016:30	1016:30	9	a1
LEAF_NODE	1016:30	1016:30	10	a1
LEAF_NODE	1016:32	1016:32	8	,
INIT_DECL_LIST	1016:13	1016:13	8	int r2 , int g2 , int b2 , int a2 , int mask
VAR_DECL	1016:13	1016:34	9	int r2
TYPE	1016:13	1016:13	10	int
TYPE_NAME	1016:13	1016:13	11	int
LEAF_NODE	1016:13	1016:13	12	int
NAME	1016:34	1016:34	10	r2
LEAF_NODE	1016:34	1016:34	11	r2
LEAF_NODE	1016:36	1016:36	9	,
INIT_DECL_LIST	1016:13	1016:13	9	int g2 , int b2 , int a2 , int mask
VAR_DECL	1016:13	1016:38	10	int g2
TYPE	1016:13	1016:13	11	int
TYPE_NAME	1016:13	1016:13	12	int
LEAF_NODE	1016:13	1016:13	13	int
NAME	1016:38	1016:38	11	g2
LEAF_NODE	1016:38	1016:38	12	g2
LEAF_NODE	1016:40	1016:40	10	,
INIT_DECL_LIST	1016:13	1016:13	10	int b2 , int a2 , int mask
VAR_DECL	1016:13	1016:42	11	int b2
TYPE	1016:13	1016:13	12	int
TYPE_NAME	1016:13	1016:13	13	int
LEAF_NODE	1016:13	1016:13	14	int
NAME	1016:42	1016:42	12	b2
LEAF_NODE	1016:42	1016:42	13	b2
LEAF_NODE	1016:44	1016:44	11	,
INIT_DECL_LIST	1016:13	1016:13	11	int a2 , int mask
VAR_DECL	1016:13	1016:46	12	int a2
TYPE	1016:13	1016:13	13	int
TYPE_NAME	1016:13	1016:13	14	int
LEAF_NODE	1016:13	1016:13	15	int
NAME	1016:46	1016:46	13	a2
LEAF_NODE	1016:46	1016:46	14	a2
LEAF_NODE	1016:48	1016:48	12	,
VAR_DECL	1016:13	1016:50	12	int mask
TYPE	1016:13	1016:13	13	int
TYPE_NAME	1016:13	1016:13	14	int
LEAF_NODE	1016:13	1016:13	15	int
NAME	1016:50	1016:50	13	mask
LEAF_NODE	1016:50	1016:50	14	mask
LEAF_NODE	1016:54	1016:54	4	;
EXPR_STATEMENT	1022:4	1022:20	3	mask = CODE_MASK ;
EXPR	1022:4	1022:4	4	mask = CODE_MASK
ASSIGN	1022:4	1022:11	5	mask = CODE_MASK
LVAL	1022:4	1022:4	6	mask
FIELD	1022:4	1022:4	7	mask
LEAF_NODE	1022:4	1022:4	8	mask
ASSIGN_OP	1022:9	1022:9	6	=
LEAF_NODE	1022:9	1022:9	7	=
RVAL	1022:11	1022:11	6	CODE_MASK
FIELD	1022:11	1022:11	7	CODE_MASK
LEAF_NODE	1022:11	1022:11	8	CODE_MASK
LEAF_NODE	1022:20	1022:20	4	;
SELECTION	1023:4	1023:21	3	
KEYWORD	1023:4	1023:4	4	if
LEAF_NODE	1023:4	1023:4	5	if
LEAF_NODE	1023:7	1023:7	4	(
CONDITION	1023:8	1023:8	4	n >= stride
EXPR	1023:8	1023:13	5	n >= stride
FIELD	1023:8	1023:8	6	n
LEAF_NODE	1023:8	1023:8	7	n
REL_OPERATOR	1023:10	1023:10	6	>=
LEAF_NODE	1023:10	1023:10	7	>=
FIELD	1023:13	1023:13	6	stride
LEAF_NODE	1023:13	1023:13	7	stride
LEAF_NODE	1023:19	1023:19	4	)
STATEMENTS	1023:21	1059:4	4	
LEAF_NODE	1023:21	1023:21	5	{
STATEMENTS	1024:1	1049:3	5	
SELECTION	1024:1	1024:18	6	
KEYWORD	1024:1	1024:1	7	if
LEAF_NODE	1024:1	1024:1	8	if
LEAF_NODE	1024:4	1024:4	7	(
CONDITION	1024:5	1024:5	7	stride == 3
EXPR	1024:5	1024:15	8	stride == 3
FIELD	1024:5	1024:5	9	stride
LEAF_NODE	1024:5	1024:5	10	stride
EQ_OPERATOR	1024:12	1024:12	9	==
LEAF_NODE	1024:12	1024:12	10	==
FIELD	1024:15	1024:15	9	3
LEAF_NODE	1024:15	1024:15	10	3
LEAF_NODE	1024:16	1024:16	7	)
STATEMENTS	1024:18	1036:1	7	
LEAF_NODE	1024:18	1024:18	8	{
STATEMENTS	1025:5	1028:5	8	
EXPR_STATEMENT	1025:5	1025:30	9	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] ) ;
EXPR	1025:5	1025:5	10	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] )
ASSIGN	1025:5	1025:10	11	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] )
LVAL	1025:5	1025:5	12	r2
FIELD	1025:5	1025:5	13	r2
LEAF_NODE	1025:5	1025:5	14	r2
ASSIGN_OP	1025:8	1025:8	12	=
LEAF_NODE	1025:8	1025:8	13	=
RVAL	1025:10	1025:10	12	wp [ 0 ] = CLAMP ( ip [ 0 ] )
ASSIGN	1025:10	1025:18	13	wp [ 0 ] = CLAMP ( ip [ 0 ] )
LVAL	1025:10	1025:10	14	wp [ 0 ]
FIELD	1025:10	1025:14	15	wp [ 0 ]
LEAF_NODE	1025:10	1025:10	16	wp
LEAF_NODE	1025:12	1025:12	16	[
EXPR	1025:13	1025:13	16	0
FIELD	1025:13	1025:13	17	0
LEAF_NODE	1025:13	1025:13	18	0
LEAF_NODE	1025:14	1025:14	16	]
ASSIGN_OP	1025:16	1025:16	14	=
LEAF_NODE	1025:16	1025:16	15	=
RVAL	1025:18	1025:18	14	CLAMP ( ip [ 0 ] )
FUNCTION_CALL	1025:18	1025:29	15	CLAMP ( ip [ 0 ] )
CALLEE	1025:18	1025:18	16	CLAMP
LEAF_NODE	1025:18	1025:18	17	CLAMP
LEAF_NODE	1025:23	1025:23	16	(
ARGUMENT	1025:24	1025:24	16	ip [ 0 ]
FIELD	1025:24	1025:28	17	ip [ 0 ]
LEAF_NODE	1025:24	1025:24	18	ip
LEAF_NODE	1025:26	1025:26	18	[
EXPR	1025:27	1025:27	18	0
FIELD	1025:27	1025:27	19	0
LEAF_NODE	1025:27	1025:27	20	0
LEAF_NODE	1025:28	1025:28	18	]
LEAF_NODE	1025:29	1025:29	16	)
LEAF_NODE	1025:30	1025:30	10	;
EXPR_STATEMENT	1025:33	1025:58	9	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] ) ;
EXPR	1025:33	1025:33	10	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] )
ASSIGN	1025:33	1025:38	11	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] )
LVAL	1025:33	1025:33	12	g2
FIELD	1025:33	1025:33	13	g2
LEAF_NODE	1025:33	1025:33	14	g2
ASSIGN_OP	1025:36	1025:36	12	=
LEAF_NODE	1025:36	1025:36	13	=
RVAL	1025:38	1025:38	12	wp [ 1 ] = CLAMP ( ip [ 1 ] )
ASSIGN	1025:38	1025:46	13	wp [ 1 ] = CLAMP ( ip [ 1 ] )
LVAL	1025:38	1025:38	14	wp [ 1 ]
FIELD	1025:38	1025:42	15	wp [ 1 ]
LEAF_NODE	1025:38	1025:38	16	wp
LEAF_NODE	1025:40	1025:40	16	[
EXPR	1025:41	1025:41	16	1
FIELD	1025:41	1025:41	17	1
LEAF_NODE	1025:41	1025:41	18	1
LEAF_NODE	1025:42	1025:42	16	]
ASSIGN_OP	1025:44	1025:44	14	=
LEAF_NODE	1025:44	1025:44	15	=
RVAL	1025:46	1025:46	14	CLAMP ( ip [ 1 ] )
FUNCTION_CALL	1025:46	1025:57	15	CLAMP ( ip [ 1 ] )
CALLEE	1025:46	1025:46	16	CLAMP
LEAF_NODE	1025:46	1025:46	17	CLAMP
LEAF_NODE	1025:51	1025:51	16	(
ARGUMENT	1025:52	1025:52	16	ip [ 1 ]
FIELD	1025:52	1025:56	17	ip [ 1 ]
LEAF_NODE	1025:52	1025:52	18	ip
LEAF_NODE	1025:54	1025:54	18	[
EXPR	1025:55	1025:55	18	1
FIELD	1025:55	1025:55	19	1
LEAF_NODE	1025:55	1025:55	20	1
LEAF_NODE	1025:56	1025:56	18	]
LEAF_NODE	1025:57	1025:57	16	)
LEAF_NODE	1025:58	1025:58	10	;
EXPR_STATEMENT	1026:5	1026:30	9	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] ) ;
EXPR	1026:5	1026:5	10	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] )
ASSIGN	1026:5	1026:10	11	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] )
LVAL	1026:5	1026:5	12	b2
FIELD	1026:5	1026:5	13	b2
LEAF_NODE	1026:5	1026:5	14	b2
ASSIGN_OP	1026:8	1026:8	12	=
LEAF_NODE	1026:8	1026:8	13	=
RVAL	1026:10	1026:10	12	wp [ 2 ] = CLAMP ( ip [ 2 ] )
ASSIGN	1026:10	1026:18	13	wp [ 2 ] = CLAMP ( ip [ 2 ] )
LVAL	1026:10	1026:10	14	wp [ 2 ]
FIELD	1026:10	1026:14	15	wp [ 2 ]
LEAF_NODE	1026:10	1026:10	16	wp
LEAF_NODE	1026:12	1026:12	16	[
EXPR	1026:13	1026:13	16	2
FIELD	1026:13	1026:13	17	2
LEAF_NODE	1026:13	1026:13	18	2
LEAF_NODE	1026:14	1026:14	16	]
ASSIGN_OP	1026:16	1026:16	14	=
LEAF_NODE	1026:16	1026:16	15	=
RVAL	1026:18	1026:18	14	CLAMP ( ip [ 2 ] )
FUNCTION_CALL	1026:18	1026:29	15	CLAMP ( ip [ 2 ] )
CALLEE	1026:18	1026:18	16	CLAMP
LEAF_NODE	1026:18	1026:18	17	CLAMP
LEAF_NODE	1026:23	1026:23	16	(
ARGUMENT	1026:24	1026:24	16	ip [ 2 ]
FIELD	1026:24	1026:28	17	ip [ 2 ]
LEAF_NODE	1026:24	1026:24	18	ip
LEAF_NODE	1026:26	1026:26	18	[
EXPR	1026:27	1026:27	18	2
FIELD	1026:27	1026:27	19	2
LEAF_NODE	1026:27	1026:27	20	2
LEAF_NODE	1026:28	1026:28	18	]
LEAF_NODE	1026:29	1026:29	16	)
LEAF_NODE	1026:30	1026:30	10	;
EXPR_STATEMENT	1027:5	1027:11	9	n -= 3 ;
EXPR	1027:5	1027:5	10	n -= 3
ASSIGN	1027:5	1027:10	11	n -= 3
LVAL	1027:5	1027:5	12	n
FIELD	1027:5	1027:5	13	n
LEAF_NODE	1027:5	1027:5	14	n
ASSIGN_OP	1027:7	1027:7	12	-=
LEAF_NODE	1027:7	1027:7	13	-=
RVAL	1027:10	1027:10	12	3
FIELD	1027:10	1027:10	13	3
LEAF_NODE	1027:10	1027:10	14	3
LEAF_NODE	1027:11	1027:11	10	;
ITERATION	1028:5	1028:19	9	
KEYWORD	1028:5	1028:5	10	while
LEAF_NODE	1028:5	1028:5	11	while
LEAF_NODE	1028:11	1028:11	10	(
CONDITION	1028:12	1028:12	10	n > 0
EXPR	1028:12	1028:16	11	n > 0
FIELD	1028:12	1028:12	12	n
LEAF_NODE	1028:12	1028:12	13	n
REL_OPERATOR	1028:14	1028:14	12	>
LEAF_NODE	1028:14	1028:14	13	>
FIELD	1028:16	1028:16	12	0
LEAF_NODE	1028:16	1028:16	13	0
LEAF_NODE	1028:17	1028:17	10	)
STATEMENTS	1028:19	1035:5	10	
LEAF_NODE	1028:19	1028:19	11	{
STATEMENTS	1029:2	1034:55	11	
EXPR_STATEMENT	1029:2	1029:8	12	n -= 3 ;
EXPR	1029:2	1029:2	13	n -= 3
ASSIGN	1029:2	1029:7	14	n -= 3
LVAL	1029:2	1029:2	15	n
FIELD	1029:2	1029:2	16	n
LEAF_NODE	1029:2	1029:2	17	n
ASSIGN_OP	1029:4	1029:4	15	-=
LEAF_NODE	1029:4	1029:4	16	-=
RVAL	1029:7	1029:7	15	3
FIELD	1029:7	1029:7	16	3
LEAF_NODE	1029:7	1029:7	17	3
LEAF_NODE	1029:8	1029:8	13	;
EXPR_STATEMENT	1030:2	1030:9	12	wp += 3 ;
EXPR	1030:2	1030:2	13	wp += 3
ASSIGN	1030:2	1030:8	14	wp += 3
LVAL	1030:2	1030:2	15	wp
FIELD	1030:2	1030:2	16	wp
LEAF_NODE	1030:2	1030:2	17	wp
ASSIGN_OP	1030:5	1030:5	15	+=
LEAF_NODE	1030:5	1030:5	16	+=
RVAL	1030:8	1030:8	15	3
FIELD	1030:8	1030:8	16	3
LEAF_NODE	1030:8	1030:8	17	3
LEAF_NODE	1030:9	1030:9	13	;
EXPR_STATEMENT	1031:2	1031:9	12	ip += 3 ;
EXPR	1031:2	1031:2	13	ip += 3
ASSIGN	1031:2	1031:8	14	ip += 3
LVAL	1031:2	1031:2	15	ip
FIELD	1031:2	1031:2	16	ip
LEAF_NODE	1031:2	1031:2	17	ip
ASSIGN_OP	1031:5	1031:5	15	+=
LEAF_NODE	1031:5	1031:5	16	+=
RVAL	1031:8	1031:8	15	3
FIELD	1031:8	1031:8	16	3
LEAF_NODE	1031:8	1031:8	17	3
LEAF_NODE	1031:9	1031:9	13	;
EXPR_STATEMENT	1032:2	1032:19	12	r1 = CLAMP ( ip [ 0 ] ) ;
EXPR	1032:2	1032:2	13	r1 = CLAMP ( ip [ 0 ] )
ASSIGN	1032:2	1032:7	14	r1 = CLAMP ( ip [ 0 ] )
LVAL	1032:2	1032:2	15	r1
FIELD	1032:2	1032:2	16	r1
LEAF_NODE	1032:2	1032:2	17	r1
ASSIGN_OP	1032:5	1032:5	15	=
LEAF_NODE	1032:5	1032:5	16	=
RVAL	1032:7	1032:7	15	CLAMP ( ip [ 0 ] )
FUNCTION_CALL	1032:7	1032:18	16	CLAMP ( ip [ 0 ] )
CALLEE	1032:7	1032:7	17	CLAMP
LEAF_NODE	1032:7	1032:7	18	CLAMP
LEAF_NODE	1032:12	1032:12	17	(
ARGUMENT	1032:13	1032:13	17	ip [ 0 ]
FIELD	1032:13	1032:17	18	ip [ 0 ]
LEAF_NODE	1032:13	1032:13	19	ip
LEAF_NODE	1032:15	1032:15	19	[
EXPR	1032:16	1032:16	19	0
FIELD	1032:16	1032:16	20	0
LEAF_NODE	1032:16	1032:16	21	0
LEAF_NODE	1032:17	1032:17	19	]
LEAF_NODE	1032:18	1032:18	17	)
LEAF_NODE	1032:19	1032:19	13	;
EXPR_STATEMENT	1032:21	1032:53	12	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask ) ;
EXPR	1032:21	1032:21	13	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
ASSIGN	1032:21	1032:29	14	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
LVAL	1032:21	1032:21	15	wp [ 0 ]
FIELD	1032:21	1032:25	16	wp [ 0 ]
LEAF_NODE	1032:21	1032:21	17	wp
LEAF_NODE	1032:23	1032:23	17	[
EXPR	1032:24	1032:24	17	0
FIELD	1032:24	1032:24	18	0
LEAF_NODE	1032:24	1032:24	19	0
LEAF_NODE	1032:25	1032:25	17	]
ASSIGN_OP	1032:27	1032:27	15	=
LEAF_NODE	1032:27	1032:27	16	=
RVAL	1032:29	1032:52	15	( uint16 ) ( ( r1 - r2 ) & mask )
LEAF_NODE	1032:29	1032:29	16	(
TYPE_NAME	1032:30	1032:30	16	uint16
LEAF_NODE	1032:30	1032:30	17	uint16
LEAF_NODE	1032:36	1032:36	16	)
LEAF_NODE	1032:37	1032:37	16	(
LEAF_NODE	1032:38	1032:38	16	(
FIELD	1032:39	1032:39	16	r1
LEAF_NODE	1032:39	1032:39	17	r1
LEAF_NODE	1032:41	1032:41	16	-
FIELD	1032:42	1032:42	16	r2
LEAF_NODE	1032:42	1032:42	17	r2
LEAF_NODE	1032:44	1032:44	16	)
LEAF_NODE	1032:46	1032:46	16	&
FIELD	1032:48	1032:48	16	mask
LEAF_NODE	1032:48	1032:48	17	mask
LEAF_NODE	1032:52	1032:52	16	)
LEAF_NODE	1032:53	1032:53	13	;
EXPR_STATEMENT	1032:55	1032:62	12	r2 = r1 ;
EXPR	1032:55	1032:55	13	r2 = r1
ASSIGN	1032:55	1032:60	14	r2 = r1
LVAL	1032:55	1032:55	15	r2
FIELD	1032:55	1032:55	16	r2
LEAF_NODE	1032:55	1032:55	17	r2
ASSIGN_OP	1032:58	1032:58	15	=
LEAF_NODE	1032:58	1032:58	16	=
RVAL	1032:60	1032:60	15	r1
FIELD	1032:60	1032:60	16	r1
LEAF_NODE	1032:60	1032:60	17	r1
LEAF_NODE	1032:62	1032:62	13	;
EXPR_STATEMENT	1033:2	1033:19	12	g1 = CLAMP ( ip [ 1 ] ) ;
EXPR	1033:2	1033:2	13	g1 = CLAMP ( ip [ 1 ] )
ASSIGN	1033:2	1033:7	14	g1 = CLAMP ( ip [ 1 ] )
LVAL	1033:2	1033:2	15	g1
FIELD	1033:2	1033:2	16	g1
LEAF_NODE	1033:2	1033:2	17	g1
ASSIGN_OP	1033:5	1033:5	15	=
LEAF_NODE	1033:5	1033:5	16	=
RVAL	1033:7	1033:7	15	CLAMP ( ip [ 1 ] )
FUNCTION_CALL	1033:7	1033:18	16	CLAMP ( ip [ 1 ] )
CALLEE	1033:7	1033:7	17	CLAMP
LEAF_NODE	1033:7	1033:7	18	CLAMP
LEAF_NODE	1033:12	1033:12	17	(
ARGUMENT	1033:13	1033:13	17	ip [ 1 ]
FIELD	1033:13	1033:17	18	ip [ 1 ]
LEAF_NODE	1033:13	1033:13	19	ip
LEAF_NODE	1033:15	1033:15	19	[
EXPR	1033:16	1033:16	19	1
FIELD	1033:16	1033:16	20	1
LEAF_NODE	1033:16	1033:16	21	1
LEAF_NODE	1033:17	1033:17	19	]
LEAF_NODE	1033:18	1033:18	17	)
LEAF_NODE	1033:19	1033:19	13	;
EXPR_STATEMENT	1033:21	1033:53	12	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask ) ;
EXPR	1033:21	1033:21	13	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
ASSIGN	1033:21	1033:29	14	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
LVAL	1033:21	1033:21	15	wp [ 1 ]
FIELD	1033:21	1033:25	16	wp [ 1 ]
LEAF_NODE	1033:21	1033:21	17	wp
LEAF_NODE	1033:23	1033:23	17	[
EXPR	1033:24	1033:24	17	1
FIELD	1033:24	1033:24	18	1
LEAF_NODE	1033:24	1033:24	19	1
LEAF_NODE	1033:25	1033:25	17	]
ASSIGN_OP	1033:27	1033:27	15	=
LEAF_NODE	1033:27	1033:27	16	=
RVAL	1033:29	1033:52	15	( uint16 ) ( ( g1 - g2 ) & mask )
LEAF_NODE	1033:29	1033:29	16	(
TYPE_NAME	1033:30	1033:30	16	uint16
LEAF_NODE	1033:30	1033:30	17	uint16
LEAF_NODE	1033:36	1033:36	16	)
LEAF_NODE	1033:37	1033:37	16	(
LEAF_NODE	1033:38	1033:38	16	(
FIELD	1033:39	1033:39	16	g1
LEAF_NODE	1033:39	1033:39	17	g1
LEAF_NODE	1033:41	1033:41	16	-
FIELD	1033:42	1033:42	16	g2
LEAF_NODE	1033:42	1033:42	17	g2
LEAF_NODE	1033:44	1033:44	16	)
LEAF_NODE	1033:46	1033:46	16	&
FIELD	1033:48	1033:48	16	mask
LEAF_NODE	1033:48	1033:48	17	mask
LEAF_NODE	1033:52	1033:52	16	)
LEAF_NODE	1033:53	1033:53	13	;
EXPR_STATEMENT	1033:55	1033:62	12	g2 = g1 ;
EXPR	1033:55	1033:55	13	g2 = g1
ASSIGN	1033:55	1033:60	14	g2 = g1
LVAL	1033:55	1033:55	15	g2
FIELD	1033:55	1033:55	16	g2
LEAF_NODE	1033:55	1033:55	17	g2
ASSIGN_OP	1033:58	1033:58	15	=
LEAF_NODE	1033:58	1033:58	16	=
RVAL	1033:60	1033:60	15	g1
FIELD	1033:60	1033:60	16	g1
LEAF_NODE	1033:60	1033:60	17	g1
LEAF_NODE	1033:62	1033:62	13	;
EXPR_STATEMENT	1034:2	1034:19	12	b1 = CLAMP ( ip [ 2 ] ) ;
EXPR	1034:2	1034:2	13	b1 = CLAMP ( ip [ 2 ] )
ASSIGN	1034:2	1034:7	14	b1 = CLAMP ( ip [ 2 ] )
LVAL	1034:2	1034:2	15	b1
FIELD	1034:2	1034:2	16	b1
LEAF_NODE	1034:2	1034:2	17	b1
ASSIGN_OP	1034:5	1034:5	15	=
LEAF_NODE	1034:5	1034:5	16	=
RVAL	1034:7	1034:7	15	CLAMP ( ip [ 2 ] )
FUNCTION_CALL	1034:7	1034:18	16	CLAMP ( ip [ 2 ] )
CALLEE	1034:7	1034:7	17	CLAMP
LEAF_NODE	1034:7	1034:7	18	CLAMP
LEAF_NODE	1034:12	1034:12	17	(
ARGUMENT	1034:13	1034:13	17	ip [ 2 ]
FIELD	1034:13	1034:17	18	ip [ 2 ]
LEAF_NODE	1034:13	1034:13	19	ip
LEAF_NODE	1034:15	1034:15	19	[
EXPR	1034:16	1034:16	19	2
FIELD	1034:16	1034:16	20	2
LEAF_NODE	1034:16	1034:16	21	2
LEAF_NODE	1034:17	1034:17	19	]
LEAF_NODE	1034:18	1034:18	17	)
LEAF_NODE	1034:19	1034:19	13	;
EXPR_STATEMENT	1034:21	1034:53	12	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask ) ;
EXPR	1034:21	1034:21	13	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
ASSIGN	1034:21	1034:29	14	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
LVAL	1034:21	1034:21	15	wp [ 2 ]
FIELD	1034:21	1034:25	16	wp [ 2 ]
LEAF_NODE	1034:21	1034:21	17	wp
LEAF_NODE	1034:23	1034:23	17	[
EXPR	1034:24	1034:24	17	2
FIELD	1034:24	1034:24	18	2
LEAF_NODE	1034:24	1034:24	19	2
LEAF_NODE	1034:25	1034:25	17	]
ASSIGN_OP	1034:27	1034:27	15	=
LEAF_NODE	1034:27	1034:27	16	=
RVAL	1034:29	1034:52	15	( uint16 ) ( ( b1 - b2 ) & mask )
LEAF_NODE	1034:29	1034:29	16	(
TYPE_NAME	1034:30	1034:30	16	uint16
LEAF_NODE	1034:30	1034:30	17	uint16
LEAF_NODE	1034:36	1034:36	16	)
LEAF_NODE	1034:37	1034:37	16	(
LEAF_NODE	1034:38	1034:38	16	(
FIELD	1034:39	1034:39	16	b1
LEAF_NODE	1034:39	1034:39	17	b1
LEAF_NODE	1034:41	1034:41	16	-
FIELD	1034:42	1034:42	16	b2
LEAF_NODE	1034:42	1034:42	17	b2
LEAF_NODE	1034:44	1034:44	16	)
LEAF_NODE	1034:46	1034:46	16	&
FIELD	1034:48	1034:48	16	mask
LEAF_NODE	1034:48	1034:48	17	mask
LEAF_NODE	1034:52	1034:52	16	)
LEAF_NODE	1034:53	1034:53	13	;
EXPR_STATEMENT	1034:55	1034:62	12	b2 = b1 ;
EXPR	1034:55	1034:55	13	b2 = b1
ASSIGN	1034:55	1034:60	14	b2 = b1
LVAL	1034:55	1034:55	15	b2
FIELD	1034:55	1034:55	16	b2
LEAF_NODE	1034:55	1034:55	17	b2
ASSIGN_OP	1034:58	1034:58	15	=
LEAF_NODE	1034:58	1034:58	16	=
RVAL	1034:60	1034:60	15	b1
FIELD	1034:60	1034:60	16	b1
LEAF_NODE	1034:60	1034:60	17	b1
LEAF_NODE	1034:62	1034:62	13	;
LEAF_NODE	1035:5	1035:5	11	}
LEAF_NODE	1036:1	1036:1	8	}
SELECTION	1036:3	1036:8	6	
KEYWORD	1036:3	1036:3	7	else
LEAF_NODE	1036:3	1036:3	8	else
STATEMENTS	1036:8	1036:8	7	
SELECTION	1036:8	1036:25	8	
KEYWORD	1036:8	1036:8	9	if
LEAF_NODE	1036:8	1036:8	10	if
LEAF_NODE	1036:11	1036:11	9	(
CONDITION	1036:12	1036:12	9	stride == 4
EXPR	1036:12	1036:22	10	stride == 4
FIELD	1036:12	1036:12	11	stride
LEAF_NODE	1036:12	1036:12	12	stride
EQ_OPERATOR	1036:19	1036:19	11	==
LEAF_NODE	1036:19	1036:19	12	==
FIELD	1036:22	1036:22	11	4
LEAF_NODE	1036:22	1036:22	12	4
LEAF_NODE	1036:23	1036:23	9	)
STATEMENTS	1036:25	1049:1	9	
LEAF_NODE	1036:25	1036:25	10	{
STATEMENTS	1037:5	1040:5	10	
EXPR_STATEMENT	1037:5	1037:30	11	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] ) ;
EXPR	1037:5	1037:5	12	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] )
ASSIGN	1037:5	1037:10	13	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] )
LVAL	1037:5	1037:5	14	r2
FIELD	1037:5	1037:5	15	r2
LEAF_NODE	1037:5	1037:5	16	r2
ASSIGN_OP	1037:8	1037:8	14	=
LEAF_NODE	1037:8	1037:8	15	=
RVAL	1037:10	1037:10	14	wp [ 0 ] = CLAMP ( ip [ 0 ] )
ASSIGN	1037:10	1037:18	15	wp [ 0 ] = CLAMP ( ip [ 0 ] )
LVAL	1037:10	1037:10	16	wp [ 0 ]
FIELD	1037:10	1037:14	17	wp [ 0 ]
LEAF_NODE	1037:10	1037:10	18	wp
LEAF_NODE	1037:12	1037:12	18	[
EXPR	1037:13	1037:13	18	0
FIELD	1037:13	1037:13	19	0
LEAF_NODE	1037:13	1037:13	20	0
LEAF_NODE	1037:14	1037:14	18	]
ASSIGN_OP	1037:16	1037:16	16	=
LEAF_NODE	1037:16	1037:16	17	=
RVAL	1037:18	1037:18	16	CLAMP ( ip [ 0 ] )
FUNCTION_CALL	1037:18	1037:29	17	CLAMP ( ip [ 0 ] )
CALLEE	1037:18	1037:18	18	CLAMP
LEAF_NODE	1037:18	1037:18	19	CLAMP
LEAF_NODE	1037:23	1037:23	18	(
ARGUMENT	1037:24	1037:24	18	ip [ 0 ]
FIELD	1037:24	1037:28	19	ip [ 0 ]
LEAF_NODE	1037:24	1037:24	20	ip
LEAF_NODE	1037:26	1037:26	20	[
EXPR	1037:27	1037:27	20	0
FIELD	1037:27	1037:27	21	0
LEAF_NODE	1037:27	1037:27	22	0
LEAF_NODE	1037:28	1037:28	20	]
LEAF_NODE	1037:29	1037:29	18	)
LEAF_NODE	1037:30	1037:30	12	;
EXPR_STATEMENT	1037:33	1037:58	11	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] ) ;
EXPR	1037:33	1037:33	12	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] )
ASSIGN	1037:33	1037:38	13	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] )
LVAL	1037:33	1037:33	14	g2
FIELD	1037:33	1037:33	15	g2
LEAF_NODE	1037:33	1037:33	16	g2
ASSIGN_OP	1037:36	1037:36	14	=
LEAF_NODE	1037:36	1037:36	15	=
RVAL	1037:38	1037:38	14	wp [ 1 ] = CLAMP ( ip [ 1 ] )
ASSIGN	1037:38	1037:46	15	wp [ 1 ] = CLAMP ( ip [ 1 ] )
LVAL	1037:38	1037:38	16	wp [ 1 ]
FIELD	1037:38	1037:42	17	wp [ 1 ]
LEAF_NODE	1037:38	1037:38	18	wp
LEAF_NODE	1037:40	1037:40	18	[
EXPR	1037:41	1037:41	18	1
FIELD	1037:41	1037:41	19	1
LEAF_NODE	1037:41	1037:41	20	1
LEAF_NODE	1037:42	1037:42	18	]
ASSIGN_OP	1037:44	1037:44	16	=
LEAF_NODE	1037:44	1037:44	17	=
RVAL	1037:46	1037:46	16	CLAMP ( ip [ 1 ] )
FUNCTION_CALL	1037:46	1037:57	17	CLAMP ( ip [ 1 ] )
CALLEE	1037:46	1037:46	18	CLAMP
LEAF_NODE	1037:46	1037:46	19	CLAMP
LEAF_NODE	1037:51	1037:51	18	(
ARGUMENT	1037:52	1037:52	18	ip [ 1 ]
FIELD	1037:52	1037:56	19	ip [ 1 ]
LEAF_NODE	1037:52	1037:52	20	ip
LEAF_NODE	1037:54	1037:54	20	[
EXPR	1037:55	1037:55	20	1
FIELD	1037:55	1037:55	21	1
LEAF_NODE	1037:55	1037:55	22	1
LEAF_NODE	1037:56	1037:56	20	]
LEAF_NODE	1037:57	1037:57	18	)
LEAF_NODE	1037:58	1037:58	12	;
EXPR_STATEMENT	1038:5	1038:30	11	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] ) ;
EXPR	1038:5	1038:5	12	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] )
ASSIGN	1038:5	1038:10	13	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] )
LVAL	1038:5	1038:5	14	b2
FIELD	1038:5	1038:5	15	b2
LEAF_NODE	1038:5	1038:5	16	b2
ASSIGN_OP	1038:8	1038:8	14	=
LEAF_NODE	1038:8	1038:8	15	=
RVAL	1038:10	1038:10	14	wp [ 2 ] = CLAMP ( ip [ 2 ] )
ASSIGN	1038:10	1038:18	15	wp [ 2 ] = CLAMP ( ip [ 2 ] )
LVAL	1038:10	1038:10	16	wp [ 2 ]
FIELD	1038:10	1038:14	17	wp [ 2 ]
LEAF_NODE	1038:10	1038:10	18	wp
LEAF_NODE	1038:12	1038:12	18	[
EXPR	1038:13	1038:13	18	2
FIELD	1038:13	1038:13	19	2
LEAF_NODE	1038:13	1038:13	20	2
LEAF_NODE	1038:14	1038:14	18	]
ASSIGN_OP	1038:16	1038:16	16	=
LEAF_NODE	1038:16	1038:16	17	=
RVAL	1038:18	1038:18	16	CLAMP ( ip [ 2 ] )
FUNCTION_CALL	1038:18	1038:29	17	CLAMP ( ip [ 2 ] )
CALLEE	1038:18	1038:18	18	CLAMP
LEAF_NODE	1038:18	1038:18	19	CLAMP
LEAF_NODE	1038:23	1038:23	18	(
ARGUMENT	1038:24	1038:24	18	ip [ 2 ]
FIELD	1038:24	1038:28	19	ip [ 2 ]
LEAF_NODE	1038:24	1038:24	20	ip
LEAF_NODE	1038:26	1038:26	20	[
EXPR	1038:27	1038:27	20	2
FIELD	1038:27	1038:27	21	2
LEAF_NODE	1038:27	1038:27	22	2
LEAF_NODE	1038:28	1038:28	20	]
LEAF_NODE	1038:29	1038:29	18	)
LEAF_NODE	1038:30	1038:30	12	;
EXPR_STATEMENT	1038:33	1038:58	11	a2 = wp [ 3 ] = CLAMP ( ip [ 3 ] ) ;
EXPR	1038:33	1038:33	12	a2 = wp [ 3 ] = CLAMP ( ip [ 3 ] )
ASSIGN	1038:33	1038:38	13	a2 = wp [ 3 ] = CLAMP ( ip [ 3 ] )
LVAL	1038:33	1038:33	14	a2
FIELD	1038:33	1038:33	15	a2
LEAF_NODE	1038:33	1038:33	16	a2
ASSIGN_OP	1038:36	1038:36	14	=
LEAF_NODE	1038:36	1038:36	15	=
RVAL	1038:38	1038:38	14	wp [ 3 ] = CLAMP ( ip [ 3 ] )
ASSIGN	1038:38	1038:46	15	wp [ 3 ] = CLAMP ( ip [ 3 ] )
LVAL	1038:38	1038:38	16	wp [ 3 ]
FIELD	1038:38	1038:42	17	wp [ 3 ]
LEAF_NODE	1038:38	1038:38	18	wp
LEAF_NODE	1038:40	1038:40	18	[
EXPR	1038:41	1038:41	18	3
FIELD	1038:41	1038:41	19	3
LEAF_NODE	1038:41	1038:41	20	3
LEAF_NODE	1038:42	1038:42	18	]
ASSIGN_OP	1038:44	1038:44	16	=
LEAF_NODE	1038:44	1038:44	17	=
RVAL	1038:46	1038:46	16	CLAMP ( ip [ 3 ] )
FUNCTION_CALL	1038:46	1038:57	17	CLAMP ( ip [ 3 ] )
CALLEE	1038:46	1038:46	18	CLAMP
LEAF_NODE	1038:46	1038:46	19	CLAMP
LEAF_NODE	1038:51	1038:51	18	(
ARGUMENT	1038:52	1038:52	18	ip [ 3 ]
FIELD	1038:52	1038:56	19	ip [ 3 ]
LEAF_NODE	1038:52	1038:52	20	ip
LEAF_NODE	1038:54	1038:54	20	[
EXPR	1038:55	1038:55	20	3
FIELD	1038:55	1038:55	21	3
LEAF_NODE	1038:55	1038:55	22	3
LEAF_NODE	1038:56	1038:56	20	]
LEAF_NODE	1038:57	1038:57	18	)
LEAF_NODE	1038:58	1038:58	12	;
EXPR_STATEMENT	1039:5	1039:11	11	n -= 4 ;
EXPR	1039:5	1039:5	12	n -= 4
ASSIGN	1039:5	1039:10	13	n -= 4
LVAL	1039:5	1039:5	14	n
FIELD	1039:5	1039:5	15	n
LEAF_NODE	1039:5	1039:5	16	n
ASSIGN_OP	1039:7	1039:7	14	-=
LEAF_NODE	1039:7	1039:7	15	-=
RVAL	1039:10	1039:10	14	4
FIELD	1039:10	1039:10	15	4
LEAF_NODE	1039:10	1039:10	16	4
LEAF_NODE	1039:11	1039:11	12	;
ITERATION	1040:5	1040:19	11	
KEYWORD	1040:5	1040:5	12	while
LEAF_NODE	1040:5	1040:5	13	while
LEAF_NODE	1040:11	1040:11	12	(
CONDITION	1040:12	1040:12	12	n > 0
EXPR	1040:12	1040:16	13	n > 0
FIELD	1040:12	1040:12	14	n
LEAF_NODE	1040:12	1040:12	15	n
REL_OPERATOR	1040:14	1040:14	14	>
LEAF_NODE	1040:14	1040:14	15	>
FIELD	1040:16	1040:16	14	0
LEAF_NODE	1040:16	1040:16	15	0
LEAF_NODE	1040:17	1040:17	12	)
STATEMENTS	1040:19	1048:5	12	
LEAF_NODE	1040:19	1040:19	13	{
STATEMENTS	1041:2	1047:55	13	
EXPR_STATEMENT	1041:2	1041:8	14	n -= 4 ;
EXPR	1041:2	1041:2	15	n -= 4
ASSIGN	1041:2	1041:7	16	n -= 4
LVAL	1041:2	1041:2	17	n
FIELD	1041:2	1041:2	18	n
LEAF_NODE	1041:2	1041:2	19	n
ASSIGN_OP	1041:4	1041:4	17	-=
LEAF_NODE	1041:4	1041:4	18	-=
RVAL	1041:7	1041:7	17	4
FIELD	1041:7	1041:7	18	4
LEAF_NODE	1041:7	1041:7	19	4
LEAF_NODE	1041:8	1041:8	15	;
EXPR_STATEMENT	1042:2	1042:9	14	wp += 4 ;
EXPR	1042:2	1042:2	15	wp += 4
ASSIGN	1042:2	1042:8	16	wp += 4
LVAL	1042:2	1042:2	17	wp
FIELD	1042:2	1042:2	18	wp
LEAF_NODE	1042:2	1042:2	19	wp
ASSIGN_OP	1042:5	1042:5	17	+=
LEAF_NODE	1042:5	1042:5	18	+=
RVAL	1042:8	1042:8	17	4
FIELD	1042:8	1042:8	18	4
LEAF_NODE	1042:8	1042:8	19	4
LEAF_NODE	1042:9	1042:9	15	;
EXPR_STATEMENT	1043:2	1043:9	14	ip += 4 ;
EXPR	1043:2	1043:2	15	ip += 4
ASSIGN	1043:2	1043:8	16	ip += 4
LVAL	1043:2	1043:2	17	ip
FIELD	1043:2	1043:2	18	ip
LEAF_NODE	1043:2	1043:2	19	ip
ASSIGN_OP	1043:5	1043:5	17	+=
LEAF_NODE	1043:5	1043:5	18	+=
RVAL	1043:8	1043:8	17	4
FIELD	1043:8	1043:8	18	4
LEAF_NODE	1043:8	1043:8	19	4
LEAF_NODE	1043:9	1043:9	15	;
EXPR_STATEMENT	1044:2	1044:19	14	r1 = CLAMP ( ip [ 0 ] ) ;
EXPR	1044:2	1044:2	15	r1 = CLAMP ( ip [ 0 ] )
ASSIGN	1044:2	1044:7	16	r1 = CLAMP ( ip [ 0 ] )
LVAL	1044:2	1044:2	17	r1
FIELD	1044:2	1044:2	18	r1
LEAF_NODE	1044:2	1044:2	19	r1
ASSIGN_OP	1044:5	1044:5	17	=
LEAF_NODE	1044:5	1044:5	18	=
RVAL	1044:7	1044:7	17	CLAMP ( ip [ 0 ] )
FUNCTION_CALL	1044:7	1044:18	18	CLAMP ( ip [ 0 ] )
CALLEE	1044:7	1044:7	19	CLAMP
LEAF_NODE	1044:7	1044:7	20	CLAMP
LEAF_NODE	1044:12	1044:12	19	(
ARGUMENT	1044:13	1044:13	19	ip [ 0 ]
FIELD	1044:13	1044:17	20	ip [ 0 ]
LEAF_NODE	1044:13	1044:13	21	ip
LEAF_NODE	1044:15	1044:15	21	[
EXPR	1044:16	1044:16	21	0
FIELD	1044:16	1044:16	22	0
LEAF_NODE	1044:16	1044:16	23	0
LEAF_NODE	1044:17	1044:17	21	]
LEAF_NODE	1044:18	1044:18	19	)
LEAF_NODE	1044:19	1044:19	15	;
EXPR_STATEMENT	1044:21	1044:53	14	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask ) ;
EXPR	1044:21	1044:21	15	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
ASSIGN	1044:21	1044:29	16	wp [ 0 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
LVAL	1044:21	1044:21	17	wp [ 0 ]
FIELD	1044:21	1044:25	18	wp [ 0 ]
LEAF_NODE	1044:21	1044:21	19	wp
LEAF_NODE	1044:23	1044:23	19	[
EXPR	1044:24	1044:24	19	0
FIELD	1044:24	1044:24	20	0
LEAF_NODE	1044:24	1044:24	21	0
LEAF_NODE	1044:25	1044:25	19	]
ASSIGN_OP	1044:27	1044:27	17	=
LEAF_NODE	1044:27	1044:27	18	=
RVAL	1044:29	1044:52	17	( uint16 ) ( ( r1 - r2 ) & mask )
LEAF_NODE	1044:29	1044:29	18	(
TYPE_NAME	1044:30	1044:30	18	uint16
LEAF_NODE	1044:30	1044:30	19	uint16
LEAF_NODE	1044:36	1044:36	18	)
LEAF_NODE	1044:37	1044:37	18	(
LEAF_NODE	1044:38	1044:38	18	(
FIELD	1044:39	1044:39	18	r1
LEAF_NODE	1044:39	1044:39	19	r1
LEAF_NODE	1044:41	1044:41	18	-
FIELD	1044:42	1044:42	18	r2
LEAF_NODE	1044:42	1044:42	19	r2
LEAF_NODE	1044:44	1044:44	18	)
LEAF_NODE	1044:46	1044:46	18	&
FIELD	1044:48	1044:48	18	mask
LEAF_NODE	1044:48	1044:48	19	mask
LEAF_NODE	1044:52	1044:52	18	)
LEAF_NODE	1044:53	1044:53	15	;
EXPR_STATEMENT	1044:55	1044:62	14	r2 = r1 ;
EXPR	1044:55	1044:55	15	r2 = r1
ASSIGN	1044:55	1044:60	16	r2 = r1
LVAL	1044:55	1044:55	17	r2
FIELD	1044:55	1044:55	18	r2
LEAF_NODE	1044:55	1044:55	19	r2
ASSIGN_OP	1044:58	1044:58	17	=
LEAF_NODE	1044:58	1044:58	18	=
RVAL	1044:60	1044:60	17	r1
FIELD	1044:60	1044:60	18	r1
LEAF_NODE	1044:60	1044:60	19	r1
LEAF_NODE	1044:62	1044:62	15	;
EXPR_STATEMENT	1045:2	1045:19	14	g1 = CLAMP ( ip [ 1 ] ) ;
EXPR	1045:2	1045:2	15	g1 = CLAMP ( ip [ 1 ] )
ASSIGN	1045:2	1045:7	16	g1 = CLAMP ( ip [ 1 ] )
LVAL	1045:2	1045:2	17	g1
FIELD	1045:2	1045:2	18	g1
LEAF_NODE	1045:2	1045:2	19	g1
ASSIGN_OP	1045:5	1045:5	17	=
LEAF_NODE	1045:5	1045:5	18	=
RVAL	1045:7	1045:7	17	CLAMP ( ip [ 1 ] )
FUNCTION_CALL	1045:7	1045:18	18	CLAMP ( ip [ 1 ] )
CALLEE	1045:7	1045:7	19	CLAMP
LEAF_NODE	1045:7	1045:7	20	CLAMP
LEAF_NODE	1045:12	1045:12	19	(
ARGUMENT	1045:13	1045:13	19	ip [ 1 ]
FIELD	1045:13	1045:17	20	ip [ 1 ]
LEAF_NODE	1045:13	1045:13	21	ip
LEAF_NODE	1045:15	1045:15	21	[
EXPR	1045:16	1045:16	21	1
FIELD	1045:16	1045:16	22	1
LEAF_NODE	1045:16	1045:16	23	1
LEAF_NODE	1045:17	1045:17	21	]
LEAF_NODE	1045:18	1045:18	19	)
LEAF_NODE	1045:19	1045:19	15	;
EXPR_STATEMENT	1045:21	1045:53	14	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask ) ;
EXPR	1045:21	1045:21	15	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
ASSIGN	1045:21	1045:29	16	wp [ 1 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
LVAL	1045:21	1045:21	17	wp [ 1 ]
FIELD	1045:21	1045:25	18	wp [ 1 ]
LEAF_NODE	1045:21	1045:21	19	wp
LEAF_NODE	1045:23	1045:23	19	[
EXPR	1045:24	1045:24	19	1
FIELD	1045:24	1045:24	20	1
LEAF_NODE	1045:24	1045:24	21	1
LEAF_NODE	1045:25	1045:25	19	]
ASSIGN_OP	1045:27	1045:27	17	=
LEAF_NODE	1045:27	1045:27	18	=
RVAL	1045:29	1045:52	17	( uint16 ) ( ( g1 - g2 ) & mask )
LEAF_NODE	1045:29	1045:29	18	(
TYPE_NAME	1045:30	1045:30	18	uint16
LEAF_NODE	1045:30	1045:30	19	uint16
LEAF_NODE	1045:36	1045:36	18	)
LEAF_NODE	1045:37	1045:37	18	(
LEAF_NODE	1045:38	1045:38	18	(
FIELD	1045:39	1045:39	18	g1
LEAF_NODE	1045:39	1045:39	19	g1
LEAF_NODE	1045:41	1045:41	18	-
FIELD	1045:42	1045:42	18	g2
LEAF_NODE	1045:42	1045:42	19	g2
LEAF_NODE	1045:44	1045:44	18	)
LEAF_NODE	1045:46	1045:46	18	&
FIELD	1045:48	1045:48	18	mask
LEAF_NODE	1045:48	1045:48	19	mask
LEAF_NODE	1045:52	1045:52	18	)
LEAF_NODE	1045:53	1045:53	15	;
EXPR_STATEMENT	1045:55	1045:62	14	g2 = g1 ;
EXPR	1045:55	1045:55	15	g2 = g1
ASSIGN	1045:55	1045:60	16	g2 = g1
LVAL	1045:55	1045:55	17	g2
FIELD	1045:55	1045:55	18	g2
LEAF_NODE	1045:55	1045:55	19	g2
ASSIGN_OP	1045:58	1045:58	17	=
LEAF_NODE	1045:58	1045:58	18	=
RVAL	1045:60	1045:60	17	g1
FIELD	1045:60	1045:60	18	g1
LEAF_NODE	1045:60	1045:60	19	g1
LEAF_NODE	1045:62	1045:62	15	;
EXPR_STATEMENT	1046:2	1046:19	14	b1 = CLAMP ( ip [ 2 ] ) ;
EXPR	1046:2	1046:2	15	b1 = CLAMP ( ip [ 2 ] )
ASSIGN	1046:2	1046:7	16	b1 = CLAMP ( ip [ 2 ] )
LVAL	1046:2	1046:2	17	b1
FIELD	1046:2	1046:2	18	b1
LEAF_NODE	1046:2	1046:2	19	b1
ASSIGN_OP	1046:5	1046:5	17	=
LEAF_NODE	1046:5	1046:5	18	=
RVAL	1046:7	1046:7	17	CLAMP ( ip [ 2 ] )
FUNCTION_CALL	1046:7	1046:18	18	CLAMP ( ip [ 2 ] )
CALLEE	1046:7	1046:7	19	CLAMP
LEAF_NODE	1046:7	1046:7	20	CLAMP
LEAF_NODE	1046:12	1046:12	19	(
ARGUMENT	1046:13	1046:13	19	ip [ 2 ]
FIELD	1046:13	1046:17	20	ip [ 2 ]
LEAF_NODE	1046:13	1046:13	21	ip
LEAF_NODE	1046:15	1046:15	21	[
EXPR	1046:16	1046:16	21	2
FIELD	1046:16	1046:16	22	2
LEAF_NODE	1046:16	1046:16	23	2
LEAF_NODE	1046:17	1046:17	21	]
LEAF_NODE	1046:18	1046:18	19	)
LEAF_NODE	1046:19	1046:19	15	;
EXPR_STATEMENT	1046:21	1046:53	14	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask ) ;
EXPR	1046:21	1046:21	15	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
ASSIGN	1046:21	1046:29	16	wp [ 2 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
LVAL	1046:21	1046:21	17	wp [ 2 ]
FIELD	1046:21	1046:25	18	wp [ 2 ]
LEAF_NODE	1046:21	1046:21	19	wp
LEAF_NODE	1046:23	1046:23	19	[
EXPR	1046:24	1046:24	19	2
FIELD	1046:24	1046:24	20	2
LEAF_NODE	1046:24	1046:24	21	2
LEAF_NODE	1046:25	1046:25	19	]
ASSIGN_OP	1046:27	1046:27	17	=
LEAF_NODE	1046:27	1046:27	18	=
RVAL	1046:29	1046:52	17	( uint16 ) ( ( b1 - b2 ) & mask )
LEAF_NODE	1046:29	1046:29	18	(
TYPE_NAME	1046:30	1046:30	18	uint16
LEAF_NODE	1046:30	1046:30	19	uint16
LEAF_NODE	1046:36	1046:36	18	)
LEAF_NODE	1046:37	1046:37	18	(
LEAF_NODE	1046:38	1046:38	18	(
FIELD	1046:39	1046:39	18	b1
LEAF_NODE	1046:39	1046:39	19	b1
LEAF_NODE	1046:41	1046:41	18	-
FIELD	1046:42	1046:42	18	b2
LEAF_NODE	1046:42	1046:42	19	b2
LEAF_NODE	1046:44	1046:44	18	)
LEAF_NODE	1046:46	1046:46	18	&
FIELD	1046:48	1046:48	18	mask
LEAF_NODE	1046:48	1046:48	19	mask
LEAF_NODE	1046:52	1046:52	18	)
LEAF_NODE	1046:53	1046:53	15	;
EXPR_STATEMENT	1046:55	1046:62	14	b2 = b1 ;
EXPR	1046:55	1046:55	15	b2 = b1
ASSIGN	1046:55	1046:60	16	b2 = b1
LVAL	1046:55	1046:55	17	b2
FIELD	1046:55	1046:55	18	b2
LEAF_NODE	1046:55	1046:55	19	b2
ASSIGN_OP	1046:58	1046:58	17	=
LEAF_NODE	1046:58	1046:58	18	=
RVAL	1046:60	1046:60	17	b1
FIELD	1046:60	1046:60	18	b1
LEAF_NODE	1046:60	1046:60	19	b1
LEAF_NODE	1046:62	1046:62	15	;
EXPR_STATEMENT	1047:2	1047:19	14	a1 = CLAMP ( ip [ 3 ] ) ;
EXPR	1047:2	1047:2	15	a1 = CLAMP ( ip [ 3 ] )
ASSIGN	1047:2	1047:7	16	a1 = CLAMP ( ip [ 3 ] )
LVAL	1047:2	1047:2	17	a1
FIELD	1047:2	1047:2	18	a1
LEAF_NODE	1047:2	1047:2	19	a1
ASSIGN_OP	1047:5	1047:5	17	=
LEAF_NODE	1047:5	1047:5	18	=
RVAL	1047:7	1047:7	17	CLAMP ( ip [ 3 ] )
FUNCTION_CALL	1047:7	1047:18	18	CLAMP ( ip [ 3 ] )
CALLEE	1047:7	1047:7	19	CLAMP
LEAF_NODE	1047:7	1047:7	20	CLAMP
LEAF_NODE	1047:12	1047:12	19	(
ARGUMENT	1047:13	1047:13	19	ip [ 3 ]
FIELD	1047:13	1047:17	20	ip [ 3 ]
LEAF_NODE	1047:13	1047:13	21	ip
LEAF_NODE	1047:15	1047:15	21	[
EXPR	1047:16	1047:16	21	3
FIELD	1047:16	1047:16	22	3
LEAF_NODE	1047:16	1047:16	23	3
LEAF_NODE	1047:17	1047:17	21	]
LEAF_NODE	1047:18	1047:18	19	)
LEAF_NODE	1047:19	1047:19	15	;
EXPR_STATEMENT	1047:21	1047:53	14	wp [ 3 ] = ( uint16 ) ( ( a1 - a2 ) & mask ) ;
EXPR	1047:21	1047:21	15	wp [ 3 ] = ( uint16 ) ( ( a1 - a2 ) & mask )
ASSIGN	1047:21	1047:29	16	wp [ 3 ] = ( uint16 ) ( ( a1 - a2 ) & mask )
LVAL	1047:21	1047:21	17	wp [ 3 ]
FIELD	1047:21	1047:25	18	wp [ 3 ]
LEAF_NODE	1047:21	1047:21	19	wp
LEAF_NODE	1047:23	1047:23	19	[
EXPR	1047:24	1047:24	19	3
FIELD	1047:24	1047:24	20	3
LEAF_NODE	1047:24	1047:24	21	3
LEAF_NODE	1047:25	1047:25	19	]
ASSIGN_OP	1047:27	1047:27	17	=
LEAF_NODE	1047:27	1047:27	18	=
RVAL	1047:29	1047:52	17	( uint16 ) ( ( a1 - a2 ) & mask )
LEAF_NODE	1047:29	1047:29	18	(
TYPE_NAME	1047:30	1047:30	18	uint16
LEAF_NODE	1047:30	1047:30	19	uint16
LEAF_NODE	1047:36	1047:36	18	)
LEAF_NODE	1047:37	1047:37	18	(
LEAF_NODE	1047:38	1047:38	18	(
FIELD	1047:39	1047:39	18	a1
LEAF_NODE	1047:39	1047:39	19	a1
LEAF_NODE	1047:41	1047:41	18	-
FIELD	1047:42	1047:42	18	a2
LEAF_NODE	1047:42	1047:42	19	a2
LEAF_NODE	1047:44	1047:44	18	)
LEAF_NODE	1047:46	1047:46	18	&
FIELD	1047:48	1047:48	18	mask
LEAF_NODE	1047:48	1047:48	19	mask
LEAF_NODE	1047:52	1047:52	18	)
LEAF_NODE	1047:53	1047:53	15	;
EXPR_STATEMENT	1047:55	1047:62	14	a2 = a1 ;
EXPR	1047:55	1047:55	15	a2 = a1
ASSIGN	1047:55	1047:60	16	a2 = a1
LVAL	1047:55	1047:55	17	a2
FIELD	1047:55	1047:55	18	a2
LEAF_NODE	1047:55	1047:55	19	a2
ASSIGN_OP	1047:58	1047:58	17	=
LEAF_NODE	1047:58	1047:58	18	=
RVAL	1047:60	1047:60	17	a1
FIELD	1047:60	1047:60	18	a1
LEAF_NODE	1047:60	1047:60	19	a1
LEAF_NODE	1047:62	1047:62	15	;
LEAF_NODE	1048:5	1048:5	13	}
LEAF_NODE	1049:1	1049:1	10	}
SELECTION	1049:3	1049:8	6	
KEYWORD	1049:3	1049:3	7	else
LEAF_NODE	1049:3	1049:3	8	else
STATEMENTS	1049:8	1058:1	7	
LEAF_NODE	1049:8	1049:8	8	{
STATEMENTS	1050:8	1052:5	8	
LEAF_NODE	1050:8	1050:8	9	REPEAT
LEAF_NODE	1050:14	1050:14	9	(
EXPR_STATEMENT	1050:15	1050:43	9	stride , wp [ 0 ] = CLAMP ( ip [ 0 ] ) ;
EXPR	1050:15	1050:23	10	stride , wp [ 0 ] = CLAMP ( ip [ 0 ] )
FIELD	1050:15	1050:15	11	stride
LEAF_NODE	1050:15	1050:15	12	stride
LEAF_NODE	1050:21	1050:21	11	,
ASSIGN	1050:23	1050:31	11	wp [ 0 ] = CLAMP ( ip [ 0 ] )
LVAL	1050:23	1050:23	12	wp [ 0 ]
FIELD	1050:23	1050:27	13	wp [ 0 ]
LEAF_NODE	1050:23	1050:23	14	wp
LEAF_NODE	1050:25	1050:25	14	[
EXPR	1050:26	1050:26	14	0
FIELD	1050:26	1050:26	15	0
LEAF_NODE	1050:26	1050:26	16	0
LEAF_NODE	1050:27	1050:27	14	]
ASSIGN_OP	1050:29	1050:29	12	=
LEAF_NODE	1050:29	1050:29	13	=
RVAL	1050:31	1050:31	12	CLAMP ( ip [ 0 ] )
FUNCTION_CALL	1050:31	1050:42	13	CLAMP ( ip [ 0 ] )
CALLEE	1050:31	1050:31	14	CLAMP
LEAF_NODE	1050:31	1050:31	15	CLAMP
LEAF_NODE	1050:36	1050:36	14	(
ARGUMENT	1050:37	1050:37	14	ip [ 0 ]
FIELD	1050:37	1050:41	15	ip [ 0 ]
LEAF_NODE	1050:37	1050:37	16	ip
LEAF_NODE	1050:39	1050:39	16	[
EXPR	1050:40	1050:40	16	0
FIELD	1050:40	1050:40	17	0
LEAF_NODE	1050:40	1050:40	18	0
LEAF_NODE	1050:41	1050:41	16	]
LEAF_NODE	1050:42	1050:42	14	)
LEAF_NODE	1050:43	1050:43	10	;
EXPR_STATEMENT	1050:45	1050:49	9	wp ++ ;
EXPR	1050:45	1050:45	10	wp ++
FIELD	1050:45	1050:47	11	wp ++
LEAF_NODE	1050:45	1050:45	12	wp
LEAF_NODE	1050:47	1050:47	12	++
LEAF_NODE	1050:49	1050:49	10	;
LEAF_NODE	1050:51	1050:51	9	ip
LEAF_NODE	1050:53	1050:53	9	++
LEAF_NODE	1050:55	1050:55	9	)
EXPR_STATEMENT	1051:5	1051:16	9	n -= stride ;
EXPR	1051:5	1051:5	10	n -= stride
ASSIGN	1051:5	1051:10	11	n -= stride
LVAL	1051:5	1051:5	12	n
FIELD	1051:5	1051:5	13	n
LEAF_NODE	1051:5	1051:5	14	n
ASSIGN_OP	1051:7	1051:7	12	-=
LEAF_NODE	1051:7	1051:7	13	-=
RVAL	1051:10	1051:10	12	stride
FIELD	1051:10	1051:10	13	stride
LEAF_NODE	1051:10	1051:10	14	stride
LEAF_NODE	1051:16	1051:16	10	;
ITERATION	1052:5	1052:19	9	
KEYWORD	1052:5	1052:5	10	while
LEAF_NODE	1052:5	1052:5	11	while
LEAF_NODE	1052:11	1052:11	10	(
CONDITION	1052:12	1052:12	10	n > 0
EXPR	1052:12	1052:16	11	n > 0
FIELD	1052:12	1052:12	12	n
LEAF_NODE	1052:12	1052:12	13	n
REL_OPERATOR	1052:14	1052:14	12	>
LEAF_NODE	1052:14	1052:14	13	>
FIELD	1052:16	1052:16	12	0
LEAF_NODE	1052:16	1052:16	13	0
LEAF_NODE	1052:17	1052:17	10	)
STATEMENTS	1052:19	1057:8	10	
LEAF_NODE	1052:19	1052:19	11	{
STATEMENTS	1053:12	1056:12	11	
LEAF_NODE	1053:12	1053:12	12	REPEAT
LEAF_NODE	1053:18	1053:18	12	(
EXPR_STATEMENT	1053:19	1054:74	12	stride , wp [ 0 ] = ( uint16 ) ( ( CLAMP ( ip [ 0 ] ) - CLAMP ( ip [ - stride ] ) ) & mask ) ;
EXPR	1053:19	1054:16	13	stride , wp [ 0 ] = ( uint16 ) ( ( CLAMP ( ip [ 0 ] ) - CLAMP ( ip [ - stride ] ) ) & mask )
FIELD	1053:19	1053:19	14	stride
LEAF_NODE	1053:19	1053:19	15	stride
LEAF_NODE	1053:25	1053:25	14	,
ASSIGN	1054:16	1054:24	14	wp [ 0 ] = ( uint16 ) ( ( CLAMP ( ip [ 0 ] ) - CLAMP ( ip [ - stride ] ) ) & mask )
LVAL	1054:16	1054:16	15	wp [ 0 ]
FIELD	1054:16	1054:20	16	wp [ 0 ]
LEAF_NODE	1054:16	1054:16	17	wp
LEAF_NODE	1054:18	1054:18	17	[
EXPR	1054:19	1054:19	17	0
FIELD	1054:19	1054:19	18	0
LEAF_NODE	1054:19	1054:19	19	0
LEAF_NODE	1054:20	1054:20	17	]
ASSIGN_OP	1054:22	1054:22	15	=
LEAF_NODE	1054:22	1054:22	16	=
RVAL	1054:24	1054:73	15	( uint16 ) ( ( CLAMP ( ip [ 0 ] ) - CLAMP ( ip [ - stride ] ) ) & mask )
LEAF_NODE	1054:24	1054:24	16	(
TYPE_NAME	1054:25	1054:25	16	uint16
LEAF_NODE	1054:25	1054:25	17	uint16
LEAF_NODE	1054:31	1054:31	16	)
LEAF_NODE	1054:32	1054:32	16	(
LEAF_NODE	1054:33	1054:33	16	(
FUNCTION_CALL	1054:34	1054:45	16	CLAMP ( ip [ 0 ] )
CALLEE	1054:34	1054:34	17	CLAMP
LEAF_NODE	1054:34	1054:34	18	CLAMP
LEAF_NODE	1054:39	1054:39	17	(
ARGUMENT	1054:40	1054:40	17	ip [ 0 ]
FIELD	1054:40	1054:44	18	ip [ 0 ]
LEAF_NODE	1054:40	1054:40	19	ip
LEAF_NODE	1054:42	1054:42	19	[
EXPR	1054:43	1054:43	19	0
FIELD	1054:43	1054:43	20	0
LEAF_NODE	1054:43	1054:43	21	0
LEAF_NODE	1054:44	1054:44	19	]
LEAF_NODE	1054:45	1054:45	17	)
LEAF_NODE	1054:46	1054:46	16	-
FUNCTION_CALL	1054:47	1054:64	16	CLAMP ( ip [ - stride ] )
CALLEE	1054:47	1054:47	17	CLAMP
LEAF_NODE	1054:47	1054:47	18	CLAMP
LEAF_NODE	1054:52	1054:52	17	(
ARGUMENT	1054:53	1054:53	17	ip [ - stride ]
FIELD	1054:53	1054:63	18	ip [ - stride ]
LEAF_NODE	1054:53	1054:53	19	ip
LEAF_NODE	1054:55	1054:55	19	[
EXPR	1054:56	1054:56	19	- stride
UNARY_EXPR	1054:56	1054:57	20	- stride
UNARY_OPERATOR	1054:56	1054:56	21	-
LEAF_NODE	1054:56	1054:56	22	-
FIELD	1054:57	1054:57	21	stride
LEAF_NODE	1054:57	1054:57	22	stride
LEAF_NODE	1054:63	1054:63	19	]
LEAF_NODE	1054:64	1054:64	17	)
LEAF_NODE	1054:65	1054:65	16	)
LEAF_NODE	1054:67	1054:67	16	&
FIELD	1054:69	1054:69	16	mask
LEAF_NODE	1054:69	1054:69	17	mask
LEAF_NODE	1054:73	1054:73	16	)
LEAF_NODE	1054:74	1054:74	13	;
EXPR_STATEMENT	1055:16	1055:20	12	wp ++ ;
EXPR	1055:16	1055:16	13	wp ++
FIELD	1055:16	1055:18	14	wp ++
LEAF_NODE	1055:16	1055:16	15	wp
LEAF_NODE	1055:18	1055:18	15	++
LEAF_NODE	1055:20	1055:20	13	;
LEAF_NODE	1055:22	1055:22	12	ip
LEAF_NODE	1055:24	1055:24	12	++
LEAF_NODE	1055:26	1055:26	12	)
EXPR_STATEMENT	1056:12	1056:23	12	n -= stride ;
EXPR	1056:12	1056:12	13	n -= stride
ASSIGN	1056:12	1056:17	14	n -= stride
LVAL	1056:12	1056:12	15	n
FIELD	1056:12	1056:12	16	n
LEAF_NODE	1056:12	1056:12	17	n
ASSIGN_OP	1056:14	1056:14	15	-=
LEAF_NODE	1056:14	1056:14	16	-=
RVAL	1056:17	1056:17	15	stride
FIELD	1056:17	1056:17	16	stride
LEAF_NODE	1056:17	1056:17	17	stride
LEAF_NODE	1056:23	1056:23	13	;
LEAF_NODE	1057:8	1057:8	11	}
LEAF_NODE	1058:1	1058:1	8	}
LEAF_NODE	1059:4	1059:4	5	}
LEAF_NODE	1060:0	1060:0	2	}
FUNCTION_DEF	1063:0	1110:0	1	
RETURN_TYPE	1063:0	1063:7	2	static void
LEAF_NODE	1063:0	1063:0	3	static
TYPE_NAME	1063:7	1063:7	3	void
LEAF_NODE	1063:7	1063:7	4	void
FUNCTION_NAME	1064:0	1064:0	2	horizontalDifference8
LEAF_NODE	1064:0	1064:0	3	horizontalDifference8
PARAMETER_LIST	1064:21	1065:34	2	( unsigned char * ip , int n , int stride , unsigned short * wp , uint16 * From8 )
LEAF_NODE	1064:21	1064:21	3	(
PARAMETER_DECL	1064:22	1064:37	3	unsigned char * ip
TYPE	1064:22	1064:36	4	unsigned char *
TYPE_NAME	1064:22	1064:31	5	unsigned char
LEAF_NODE	1064:22	1064:22	6	unsigned
LEAF_NODE	1064:31	1064:31	6	char
POINTER	1064:36	1064:36	5	*
LEAF_NODE	1064:36	1064:36	6	*
NAME	1064:37	1064:37	4	ip
LEAF_NODE	1064:37	1064:37	5	ip
LEAF_NODE	1064:39	1064:39	3	,
PARAMETER_DECL	1064:41	1064:45	3	int n
TYPE	1064:41	1064:41	4	int
TYPE_NAME	1064:41	1064:41	5	int
LEAF_NODE	1064:41	1064:41	6	int
NAME	1064:45	1064:45	4	n
LEAF_NODE	1064:45	1064:45	5	n
LEAF_NODE	1064:46	1064:46	3	,
PARAMETER_DECL	1064:48	1064:52	3	int stride
TYPE	1064:48	1064:48	4	int
TYPE_NAME	1064:48	1064:48	5	int
LEAF_NODE	1064:48	1064:48	6	int
NAME	1064:52	1064:52	4	stride
LEAF_NODE	1064:52	1064:52	5	stride
LEAF_NODE	1064:58	1064:58	3	,
PARAMETER_DECL	1065:1	1065:17	3	unsigned short * wp
TYPE	1065:1	1065:16	4	unsigned short *
TYPE_NAME	1065:1	1065:10	5	unsigned short
LEAF_NODE	1065:1	1065:1	6	unsigned
LEAF_NODE	1065:10	1065:10	6	short
POINTER	1065:16	1065:16	5	*
LEAF_NODE	1065:16	1065:16	6	*
NAME	1065:17	1065:17	4	wp
LEAF_NODE	1065:17	1065:17	5	wp
LEAF_NODE	1065:19	1065:19	3	,
PARAMETER_DECL	1065:21	1065:29	3	uint16 * From8
TYPE	1065:21	1065:28	4	uint16 *
TYPE_NAME	1065:21	1065:21	5	uint16
LEAF_NODE	1065:21	1065:21	6	uint16
POINTER	1065:28	1065:28	5	*
LEAF_NODE	1065:28	1065:28	6	*
NAME	1065:29	1065:29	4	From8
LEAF_NODE	1065:29	1065:29	5	From8
LEAF_NODE	1065:34	1065:34	3	)
LEAF_NODE	1066:0	1066:0	2	{
STATEMENTS	1067:4	1073:4	2	
LEAF_NODE	1067:4	1067:4	3	register
SIMPLE_DECL	1067:13	1067:54	3	int r1 , int g1 , int b1 , int a1 , int r2 , int g2 , int b2 , int a2 , int mask ;
INIT_DECL_LIST	1067:13	1067:13	4	int r1 , int g1 , int b1 , int a1 , int r2 , int g2 , int b2 , int a2 , int mask
VAR_DECL	1067:13	1067:18	5	int r1
TYPE	1067:13	1067:13	6	int
TYPE_NAME	1067:13	1067:13	7	int
LEAF_NODE	1067:13	1067:13	8	int
NAME	1067:18	1067:18	6	r1
LEAF_NODE	1067:18	1067:18	7	r1
LEAF_NODE	1067:20	1067:20	5	,
INIT_DECL_LIST	1067:13	1067:13	5	int g1 , int b1 , int a1 , int r2 , int g2 , int b2 , int a2 , int mask
VAR_DECL	1067:13	1067:22	6	int g1
TYPE	1067:13	1067:13	7	int
TYPE_NAME	1067:13	1067:13	8	int
LEAF_NODE	1067:13	1067:13	9	int
NAME	1067:22	1067:22	7	g1
LEAF_NODE	1067:22	1067:22	8	g1
LEAF_NODE	1067:24	1067:24	6	,
INIT_DECL_LIST	1067:13	1067:13	6	int b1 , int a1 , int r2 , int g2 , int b2 , int a2 , int mask
VAR_DECL	1067:13	1067:26	7	int b1
TYPE	1067:13	1067:13	8	int
TYPE_NAME	1067:13	1067:13	9	int
LEAF_NODE	1067:13	1067:13	10	int
NAME	1067:26	1067:26	8	b1
LEAF_NODE	1067:26	1067:26	9	b1
LEAF_NODE	1067:28	1067:28	7	,
INIT_DECL_LIST	1067:13	1067:13	7	int a1 , int r2 , int g2 , int b2 , int a2 , int mask
VAR_DECL	1067:13	1067:30	8	int a1
TYPE	1067:13	1067:13	9	int
TYPE_NAME	1067:13	1067:13	10	int
LEAF_NODE	1067:13	1067:13	11	int
NAME	1067:30	1067:30	9	a1
LEAF_NODE	1067:30	1067:30	10	a1
LEAF_NODE	1067:32	1067:32	8	,
INIT_DECL_LIST	1067:13	1067:13	8	int r2 , int g2 , int b2 , int a2 , int mask
VAR_DECL	1067:13	1067:34	9	int r2
TYPE	1067:13	1067:13	10	int
TYPE_NAME	1067:13	1067:13	11	int
LEAF_NODE	1067:13	1067:13	12	int
NAME	1067:34	1067:34	10	r2
LEAF_NODE	1067:34	1067:34	11	r2
LEAF_NODE	1067:36	1067:36	9	,
INIT_DECL_LIST	1067:13	1067:13	9	int g2 , int b2 , int a2 , int mask
VAR_DECL	1067:13	1067:38	10	int g2
TYPE	1067:13	1067:13	11	int
TYPE_NAME	1067:13	1067:13	12	int
LEAF_NODE	1067:13	1067:13	13	int
NAME	1067:38	1067:38	11	g2
LEAF_NODE	1067:38	1067:38	12	g2
LEAF_NODE	1067:40	1067:40	10	,
INIT_DECL_LIST	1067:13	1067:13	10	int b2 , int a2 , int mask
VAR_DECL	1067:13	1067:42	11	int b2
TYPE	1067:13	1067:13	12	int
TYPE_NAME	1067:13	1067:13	13	int
LEAF_NODE	1067:13	1067:13	14	int
NAME	1067:42	1067:42	12	b2
LEAF_NODE	1067:42	1067:42	13	b2
LEAF_NODE	1067:44	1067:44	11	,
INIT_DECL_LIST	1067:13	1067:13	11	int a2 , int mask
VAR_DECL	1067:13	1067:46	12	int a2
TYPE	1067:13	1067:13	13	int
TYPE_NAME	1067:13	1067:13	14	int
LEAF_NODE	1067:13	1067:13	15	int
NAME	1067:46	1067:46	13	a2
LEAF_NODE	1067:46	1067:46	14	a2
LEAF_NODE	1067:48	1067:48	12	,
VAR_DECL	1067:13	1067:50	12	int mask
TYPE	1067:13	1067:13	13	int
TYPE_NAME	1067:13	1067:13	14	int
LEAF_NODE	1067:13	1067:13	15	int
NAME	1067:50	1067:50	13	mask
LEAF_NODE	1067:50	1067:50	14	mask
LEAF_NODE	1067:54	1067:54	4	;
EXPR_STATEMENT	1072:4	1072:20	3	mask = CODE_MASK ;
EXPR	1072:4	1072:4	4	mask = CODE_MASK
ASSIGN	1072:4	1072:11	5	mask = CODE_MASK
LVAL	1072:4	1072:4	6	mask
FIELD	1072:4	1072:4	7	mask
LEAF_NODE	1072:4	1072:4	8	mask
ASSIGN_OP	1072:9	1072:9	6	=
LEAF_NODE	1072:9	1072:9	7	=
RVAL	1072:11	1072:11	6	CODE_MASK
FIELD	1072:11	1072:11	7	CODE_MASK
LEAF_NODE	1072:11	1072:11	8	CODE_MASK
LEAF_NODE	1072:20	1072:20	4	;
SELECTION	1073:4	1073:21	3	
KEYWORD	1073:4	1073:4	4	if
LEAF_NODE	1073:4	1073:4	5	if
LEAF_NODE	1073:7	1073:7	4	(
CONDITION	1073:8	1073:8	4	n >= stride
EXPR	1073:8	1073:13	5	n >= stride
FIELD	1073:8	1073:8	6	n
LEAF_NODE	1073:8	1073:8	7	n
REL_OPERATOR	1073:10	1073:10	6	>=
LEAF_NODE	1073:10	1073:10	7	>=
FIELD	1073:13	1073:13	6	stride
LEAF_NODE	1073:13	1073:13	7	stride
LEAF_NODE	1073:19	1073:19	4	)
STATEMENTS	1073:21	1109:4	4	
LEAF_NODE	1073:21	1073:21	5	{
STATEMENTS	1074:1	1099:3	5	
SELECTION	1074:1	1074:18	6	
KEYWORD	1074:1	1074:1	7	if
LEAF_NODE	1074:1	1074:1	8	if
LEAF_NODE	1074:4	1074:4	7	(
CONDITION	1074:5	1074:5	7	stride == 3
EXPR	1074:5	1074:15	8	stride == 3
FIELD	1074:5	1074:5	9	stride
LEAF_NODE	1074:5	1074:5	10	stride
EQ_OPERATOR	1074:12	1074:12	9	==
LEAF_NODE	1074:12	1074:12	10	==
FIELD	1074:15	1074:15	9	3
LEAF_NODE	1074:15	1074:15	10	3
LEAF_NODE	1074:16	1074:16	7	)
STATEMENTS	1074:18	1086:1	7	
LEAF_NODE	1074:18	1074:18	8	{
STATEMENTS	1075:5	1078:5	8	
EXPR_STATEMENT	1075:5	1075:30	9	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] ) ;
EXPR	1075:5	1075:5	10	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] )
ASSIGN	1075:5	1075:10	11	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] )
LVAL	1075:5	1075:5	12	r2
FIELD	1075:5	1075:5	13	r2
LEAF_NODE	1075:5	1075:5	14	r2
ASSIGN_OP	1075:8	1075:8	12	=
LEAF_NODE	1075:8	1075:8	13	=
RVAL	1075:10	1075:10	12	wp [ 0 ] = CLAMP ( ip [ 0 ] )
ASSIGN	1075:10	1075:18	13	wp [ 0 ] = CLAMP ( ip [ 0 ] )
LVAL	1075:10	1075:10	14	wp [ 0 ]
FIELD	1075:10	1075:14	15	wp [ 0 ]
LEAF_NODE	1075:10	1075:10	16	wp
LEAF_NODE	1075:12	1075:12	16	[
EXPR	1075:13	1075:13	16	0
FIELD	1075:13	1075:13	17	0
LEAF_NODE	1075:13	1075:13	18	0
LEAF_NODE	1075:14	1075:14	16	]
ASSIGN_OP	1075:16	1075:16	14	=
LEAF_NODE	1075:16	1075:16	15	=
RVAL	1075:18	1075:18	14	CLAMP ( ip [ 0 ] )
FUNCTION_CALL	1075:18	1075:29	15	CLAMP ( ip [ 0 ] )
CALLEE	1075:18	1075:18	16	CLAMP
LEAF_NODE	1075:18	1075:18	17	CLAMP
LEAF_NODE	1075:23	1075:23	16	(
ARGUMENT	1075:24	1075:24	16	ip [ 0 ]
FIELD	1075:24	1075:28	17	ip [ 0 ]
LEAF_NODE	1075:24	1075:24	18	ip
LEAF_NODE	1075:26	1075:26	18	[
EXPR	1075:27	1075:27	18	0
FIELD	1075:27	1075:27	19	0
LEAF_NODE	1075:27	1075:27	20	0
LEAF_NODE	1075:28	1075:28	18	]
LEAF_NODE	1075:29	1075:29	16	)
LEAF_NODE	1075:30	1075:30	10	;
EXPR_STATEMENT	1075:33	1075:58	9	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] ) ;
EXPR	1075:33	1075:33	10	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] )
ASSIGN	1075:33	1075:38	11	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] )
LVAL	1075:33	1075:33	12	g2
FIELD	1075:33	1075:33	13	g2
LEAF_NODE	1075:33	1075:33	14	g2
ASSIGN_OP	1075:36	1075:36	12	=
LEAF_NODE	1075:36	1075:36	13	=
RVAL	1075:38	1075:38	12	wp [ 1 ] = CLAMP ( ip [ 1 ] )
ASSIGN	1075:38	1075:46	13	wp [ 1 ] = CLAMP ( ip [ 1 ] )
LVAL	1075:38	1075:38	14	wp [ 1 ]
FIELD	1075:38	1075:42	15	wp [ 1 ]
LEAF_NODE	1075:38	1075:38	16	wp
LEAF_NODE	1075:40	1075:40	16	[
EXPR	1075:41	1075:41	16	1
FIELD	1075:41	1075:41	17	1
LEAF_NODE	1075:41	1075:41	18	1
LEAF_NODE	1075:42	1075:42	16	]
ASSIGN_OP	1075:44	1075:44	14	=
LEAF_NODE	1075:44	1075:44	15	=
RVAL	1075:46	1075:46	14	CLAMP ( ip [ 1 ] )
FUNCTION_CALL	1075:46	1075:57	15	CLAMP ( ip [ 1 ] )
CALLEE	1075:46	1075:46	16	CLAMP
LEAF_NODE	1075:46	1075:46	17	CLAMP
LEAF_NODE	1075:51	1075:51	16	(
ARGUMENT	1075:52	1075:52	16	ip [ 1 ]
FIELD	1075:52	1075:56	17	ip [ 1 ]
LEAF_NODE	1075:52	1075:52	18	ip
LEAF_NODE	1075:54	1075:54	18	[
EXPR	1075:55	1075:55	18	1
FIELD	1075:55	1075:55	19	1
LEAF_NODE	1075:55	1075:55	20	1
LEAF_NODE	1075:56	1075:56	18	]
LEAF_NODE	1075:57	1075:57	16	)
LEAF_NODE	1075:58	1075:58	10	;
EXPR_STATEMENT	1076:5	1076:30	9	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] ) ;
EXPR	1076:5	1076:5	10	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] )
ASSIGN	1076:5	1076:10	11	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] )
LVAL	1076:5	1076:5	12	b2
FIELD	1076:5	1076:5	13	b2
LEAF_NODE	1076:5	1076:5	14	b2
ASSIGN_OP	1076:8	1076:8	12	=
LEAF_NODE	1076:8	1076:8	13	=
RVAL	1076:10	1076:10	12	wp [ 2 ] = CLAMP ( ip [ 2 ] )
ASSIGN	1076:10	1076:18	13	wp [ 2 ] = CLAMP ( ip [ 2 ] )
LVAL	1076:10	1076:10	14	wp [ 2 ]
FIELD	1076:10	1076:14	15	wp [ 2 ]
LEAF_NODE	1076:10	1076:10	16	wp
LEAF_NODE	1076:12	1076:12	16	[
EXPR	1076:13	1076:13	16	2
FIELD	1076:13	1076:13	17	2
LEAF_NODE	1076:13	1076:13	18	2
LEAF_NODE	1076:14	1076:14	16	]
ASSIGN_OP	1076:16	1076:16	14	=
LEAF_NODE	1076:16	1076:16	15	=
RVAL	1076:18	1076:18	14	CLAMP ( ip [ 2 ] )
FUNCTION_CALL	1076:18	1076:29	15	CLAMP ( ip [ 2 ] )
CALLEE	1076:18	1076:18	16	CLAMP
LEAF_NODE	1076:18	1076:18	17	CLAMP
LEAF_NODE	1076:23	1076:23	16	(
ARGUMENT	1076:24	1076:24	16	ip [ 2 ]
FIELD	1076:24	1076:28	17	ip [ 2 ]
LEAF_NODE	1076:24	1076:24	18	ip
LEAF_NODE	1076:26	1076:26	18	[
EXPR	1076:27	1076:27	18	2
FIELD	1076:27	1076:27	19	2
LEAF_NODE	1076:27	1076:27	20	2
LEAF_NODE	1076:28	1076:28	18	]
LEAF_NODE	1076:29	1076:29	16	)
LEAF_NODE	1076:30	1076:30	10	;
EXPR_STATEMENT	1077:5	1077:11	9	n -= 3 ;
EXPR	1077:5	1077:5	10	n -= 3
ASSIGN	1077:5	1077:10	11	n -= 3
LVAL	1077:5	1077:5	12	n
FIELD	1077:5	1077:5	13	n
LEAF_NODE	1077:5	1077:5	14	n
ASSIGN_OP	1077:7	1077:7	12	-=
LEAF_NODE	1077:7	1077:7	13	-=
RVAL	1077:10	1077:10	12	3
FIELD	1077:10	1077:10	13	3
LEAF_NODE	1077:10	1077:10	14	3
LEAF_NODE	1077:11	1077:11	10	;
ITERATION	1078:5	1078:19	9	
KEYWORD	1078:5	1078:5	10	while
LEAF_NODE	1078:5	1078:5	11	while
LEAF_NODE	1078:11	1078:11	10	(
CONDITION	1078:12	1078:12	10	n > 0
EXPR	1078:12	1078:16	11	n > 0
FIELD	1078:12	1078:12	12	n
LEAF_NODE	1078:12	1078:12	13	n
REL_OPERATOR	1078:14	1078:14	12	>
LEAF_NODE	1078:14	1078:14	13	>
FIELD	1078:16	1078:16	12	0
LEAF_NODE	1078:16	1078:16	13	0
LEAF_NODE	1078:17	1078:17	10	)
STATEMENTS	1078:19	1085:5	10	
LEAF_NODE	1078:19	1078:19	11	{
STATEMENTS	1079:2	1084:2	11	
EXPR_STATEMENT	1079:2	1079:8	12	n -= 3 ;
EXPR	1079:2	1079:2	13	n -= 3
ASSIGN	1079:2	1079:7	14	n -= 3
LVAL	1079:2	1079:2	15	n
FIELD	1079:2	1079:2	16	n
LEAF_NODE	1079:2	1079:2	17	n
ASSIGN_OP	1079:4	1079:4	15	-=
LEAF_NODE	1079:4	1079:4	16	-=
RVAL	1079:7	1079:7	15	3
FIELD	1079:7	1079:7	16	3
LEAF_NODE	1079:7	1079:7	17	3
LEAF_NODE	1079:8	1079:8	13	;
EXPR_STATEMENT	1080:2	1080:19	12	r1 = CLAMP ( ip [ 3 ] ) ;
EXPR	1080:2	1080:2	13	r1 = CLAMP ( ip [ 3 ] )
ASSIGN	1080:2	1080:7	14	r1 = CLAMP ( ip [ 3 ] )
LVAL	1080:2	1080:2	15	r1
FIELD	1080:2	1080:2	16	r1
LEAF_NODE	1080:2	1080:2	17	r1
ASSIGN_OP	1080:5	1080:5	15	=
LEAF_NODE	1080:5	1080:5	16	=
RVAL	1080:7	1080:7	15	CLAMP ( ip [ 3 ] )
FUNCTION_CALL	1080:7	1080:18	16	CLAMP ( ip [ 3 ] )
CALLEE	1080:7	1080:7	17	CLAMP
LEAF_NODE	1080:7	1080:7	18	CLAMP
LEAF_NODE	1080:12	1080:12	17	(
ARGUMENT	1080:13	1080:13	17	ip [ 3 ]
FIELD	1080:13	1080:17	18	ip [ 3 ]
LEAF_NODE	1080:13	1080:13	19	ip
LEAF_NODE	1080:15	1080:15	19	[
EXPR	1080:16	1080:16	19	3
FIELD	1080:16	1080:16	20	3
LEAF_NODE	1080:16	1080:16	21	3
LEAF_NODE	1080:17	1080:17	19	]
LEAF_NODE	1080:18	1080:18	17	)
LEAF_NODE	1080:19	1080:19	13	;
EXPR_STATEMENT	1080:21	1080:53	12	wp [ 3 ] = ( uint16 ) ( ( r1 - r2 ) & mask ) ;
EXPR	1080:21	1080:21	13	wp [ 3 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
ASSIGN	1080:21	1080:29	14	wp [ 3 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
LVAL	1080:21	1080:21	15	wp [ 3 ]
FIELD	1080:21	1080:25	16	wp [ 3 ]
LEAF_NODE	1080:21	1080:21	17	wp
LEAF_NODE	1080:23	1080:23	17	[
EXPR	1080:24	1080:24	17	3
FIELD	1080:24	1080:24	18	3
LEAF_NODE	1080:24	1080:24	19	3
LEAF_NODE	1080:25	1080:25	17	]
ASSIGN_OP	1080:27	1080:27	15	=
LEAF_NODE	1080:27	1080:27	16	=
RVAL	1080:29	1080:52	15	( uint16 ) ( ( r1 - r2 ) & mask )
LEAF_NODE	1080:29	1080:29	16	(
TYPE_NAME	1080:30	1080:30	16	uint16
LEAF_NODE	1080:30	1080:30	17	uint16
LEAF_NODE	1080:36	1080:36	16	)
LEAF_NODE	1080:37	1080:37	16	(
LEAF_NODE	1080:38	1080:38	16	(
FIELD	1080:39	1080:39	16	r1
LEAF_NODE	1080:39	1080:39	17	r1
LEAF_NODE	1080:41	1080:41	16	-
FIELD	1080:42	1080:42	16	r2
LEAF_NODE	1080:42	1080:42	17	r2
LEAF_NODE	1080:44	1080:44	16	)
LEAF_NODE	1080:46	1080:46	16	&
FIELD	1080:48	1080:48	16	mask
LEAF_NODE	1080:48	1080:48	17	mask
LEAF_NODE	1080:52	1080:52	16	)
LEAF_NODE	1080:53	1080:53	13	;
EXPR_STATEMENT	1080:55	1080:62	12	r2 = r1 ;
EXPR	1080:55	1080:55	13	r2 = r1
ASSIGN	1080:55	1080:60	14	r2 = r1
LVAL	1080:55	1080:55	15	r2
FIELD	1080:55	1080:55	16	r2
LEAF_NODE	1080:55	1080:55	17	r2
ASSIGN_OP	1080:58	1080:58	15	=
LEAF_NODE	1080:58	1080:58	16	=
RVAL	1080:60	1080:60	15	r1
FIELD	1080:60	1080:60	16	r1
LEAF_NODE	1080:60	1080:60	17	r1
LEAF_NODE	1080:62	1080:62	13	;
EXPR_STATEMENT	1081:2	1081:19	12	g1 = CLAMP ( ip [ 4 ] ) ;
EXPR	1081:2	1081:2	13	g1 = CLAMP ( ip [ 4 ] )
ASSIGN	1081:2	1081:7	14	g1 = CLAMP ( ip [ 4 ] )
LVAL	1081:2	1081:2	15	g1
FIELD	1081:2	1081:2	16	g1
LEAF_NODE	1081:2	1081:2	17	g1
ASSIGN_OP	1081:5	1081:5	15	=
LEAF_NODE	1081:5	1081:5	16	=
RVAL	1081:7	1081:7	15	CLAMP ( ip [ 4 ] )
FUNCTION_CALL	1081:7	1081:18	16	CLAMP ( ip [ 4 ] )
CALLEE	1081:7	1081:7	17	CLAMP
LEAF_NODE	1081:7	1081:7	18	CLAMP
LEAF_NODE	1081:12	1081:12	17	(
ARGUMENT	1081:13	1081:13	17	ip [ 4 ]
FIELD	1081:13	1081:17	18	ip [ 4 ]
LEAF_NODE	1081:13	1081:13	19	ip
LEAF_NODE	1081:15	1081:15	19	[
EXPR	1081:16	1081:16	19	4
FIELD	1081:16	1081:16	20	4
LEAF_NODE	1081:16	1081:16	21	4
LEAF_NODE	1081:17	1081:17	19	]
LEAF_NODE	1081:18	1081:18	17	)
LEAF_NODE	1081:19	1081:19	13	;
EXPR_STATEMENT	1081:21	1081:53	12	wp [ 4 ] = ( uint16 ) ( ( g1 - g2 ) & mask ) ;
EXPR	1081:21	1081:21	13	wp [ 4 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
ASSIGN	1081:21	1081:29	14	wp [ 4 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
LVAL	1081:21	1081:21	15	wp [ 4 ]
FIELD	1081:21	1081:25	16	wp [ 4 ]
LEAF_NODE	1081:21	1081:21	17	wp
LEAF_NODE	1081:23	1081:23	17	[
EXPR	1081:24	1081:24	17	4
FIELD	1081:24	1081:24	18	4
LEAF_NODE	1081:24	1081:24	19	4
LEAF_NODE	1081:25	1081:25	17	]
ASSIGN_OP	1081:27	1081:27	15	=
LEAF_NODE	1081:27	1081:27	16	=
RVAL	1081:29	1081:52	15	( uint16 ) ( ( g1 - g2 ) & mask )
LEAF_NODE	1081:29	1081:29	16	(
TYPE_NAME	1081:30	1081:30	16	uint16
LEAF_NODE	1081:30	1081:30	17	uint16
LEAF_NODE	1081:36	1081:36	16	)
LEAF_NODE	1081:37	1081:37	16	(
LEAF_NODE	1081:38	1081:38	16	(
FIELD	1081:39	1081:39	16	g1
LEAF_NODE	1081:39	1081:39	17	g1
LEAF_NODE	1081:41	1081:41	16	-
FIELD	1081:42	1081:42	16	g2
LEAF_NODE	1081:42	1081:42	17	g2
LEAF_NODE	1081:44	1081:44	16	)
LEAF_NODE	1081:46	1081:46	16	&
FIELD	1081:48	1081:48	16	mask
LEAF_NODE	1081:48	1081:48	17	mask
LEAF_NODE	1081:52	1081:52	16	)
LEAF_NODE	1081:53	1081:53	13	;
EXPR_STATEMENT	1081:55	1081:62	12	g2 = g1 ;
EXPR	1081:55	1081:55	13	g2 = g1
ASSIGN	1081:55	1081:60	14	g2 = g1
LVAL	1081:55	1081:55	15	g2
FIELD	1081:55	1081:55	16	g2
LEAF_NODE	1081:55	1081:55	17	g2
ASSIGN_OP	1081:58	1081:58	15	=
LEAF_NODE	1081:58	1081:58	16	=
RVAL	1081:60	1081:60	15	g1
FIELD	1081:60	1081:60	16	g1
LEAF_NODE	1081:60	1081:60	17	g1
LEAF_NODE	1081:62	1081:62	13	;
EXPR_STATEMENT	1082:2	1082:19	12	b1 = CLAMP ( ip [ 5 ] ) ;
EXPR	1082:2	1082:2	13	b1 = CLAMP ( ip [ 5 ] )
ASSIGN	1082:2	1082:7	14	b1 = CLAMP ( ip [ 5 ] )
LVAL	1082:2	1082:2	15	b1
FIELD	1082:2	1082:2	16	b1
LEAF_NODE	1082:2	1082:2	17	b1
ASSIGN_OP	1082:5	1082:5	15	=
LEAF_NODE	1082:5	1082:5	16	=
RVAL	1082:7	1082:7	15	CLAMP ( ip [ 5 ] )
FUNCTION_CALL	1082:7	1082:18	16	CLAMP ( ip [ 5 ] )
CALLEE	1082:7	1082:7	17	CLAMP
LEAF_NODE	1082:7	1082:7	18	CLAMP
LEAF_NODE	1082:12	1082:12	17	(
ARGUMENT	1082:13	1082:13	17	ip [ 5 ]
FIELD	1082:13	1082:17	18	ip [ 5 ]
LEAF_NODE	1082:13	1082:13	19	ip
LEAF_NODE	1082:15	1082:15	19	[
EXPR	1082:16	1082:16	19	5
FIELD	1082:16	1082:16	20	5
LEAF_NODE	1082:16	1082:16	21	5
LEAF_NODE	1082:17	1082:17	19	]
LEAF_NODE	1082:18	1082:18	17	)
LEAF_NODE	1082:19	1082:19	13	;
EXPR_STATEMENT	1082:21	1082:53	12	wp [ 5 ] = ( uint16 ) ( ( b1 - b2 ) & mask ) ;
EXPR	1082:21	1082:21	13	wp [ 5 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
ASSIGN	1082:21	1082:29	14	wp [ 5 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
LVAL	1082:21	1082:21	15	wp [ 5 ]
FIELD	1082:21	1082:25	16	wp [ 5 ]
LEAF_NODE	1082:21	1082:21	17	wp
LEAF_NODE	1082:23	1082:23	17	[
EXPR	1082:24	1082:24	17	5
FIELD	1082:24	1082:24	18	5
LEAF_NODE	1082:24	1082:24	19	5
LEAF_NODE	1082:25	1082:25	17	]
ASSIGN_OP	1082:27	1082:27	15	=
LEAF_NODE	1082:27	1082:27	16	=
RVAL	1082:29	1082:52	15	( uint16 ) ( ( b1 - b2 ) & mask )
LEAF_NODE	1082:29	1082:29	16	(
TYPE_NAME	1082:30	1082:30	16	uint16
LEAF_NODE	1082:30	1082:30	17	uint16
LEAF_NODE	1082:36	1082:36	16	)
LEAF_NODE	1082:37	1082:37	16	(
LEAF_NODE	1082:38	1082:38	16	(
FIELD	1082:39	1082:39	16	b1
LEAF_NODE	1082:39	1082:39	17	b1
LEAF_NODE	1082:41	1082:41	16	-
FIELD	1082:42	1082:42	16	b2
LEAF_NODE	1082:42	1082:42	17	b2
LEAF_NODE	1082:44	1082:44	16	)
LEAF_NODE	1082:46	1082:46	16	&
FIELD	1082:48	1082:48	16	mask
LEAF_NODE	1082:48	1082:48	17	mask
LEAF_NODE	1082:52	1082:52	16	)
LEAF_NODE	1082:53	1082:53	13	;
EXPR_STATEMENT	1082:55	1082:62	12	b2 = b1 ;
EXPR	1082:55	1082:55	13	b2 = b1
ASSIGN	1082:55	1082:60	14	b2 = b1
LVAL	1082:55	1082:55	15	b2
FIELD	1082:55	1082:55	16	b2
LEAF_NODE	1082:55	1082:55	17	b2
ASSIGN_OP	1082:58	1082:58	15	=
LEAF_NODE	1082:58	1082:58	16	=
RVAL	1082:60	1082:60	15	b1
FIELD	1082:60	1082:60	16	b1
LEAF_NODE	1082:60	1082:60	17	b1
LEAF_NODE	1082:62	1082:62	13	;
EXPR_STATEMENT	1083:2	1083:9	12	wp += 3 ;
EXPR	1083:2	1083:2	13	wp += 3
ASSIGN	1083:2	1083:8	14	wp += 3
LVAL	1083:2	1083:2	15	wp
FIELD	1083:2	1083:2	16	wp
LEAF_NODE	1083:2	1083:2	17	wp
ASSIGN_OP	1083:5	1083:5	15	+=
LEAF_NODE	1083:5	1083:5	16	+=
RVAL	1083:8	1083:8	15	3
FIELD	1083:8	1083:8	16	3
LEAF_NODE	1083:8	1083:8	17	3
LEAF_NODE	1083:9	1083:9	13	;
EXPR_STATEMENT	1084:2	1084:9	12	ip += 3 ;
EXPR	1084:2	1084:2	13	ip += 3
ASSIGN	1084:2	1084:8	14	ip += 3
LVAL	1084:2	1084:2	15	ip
FIELD	1084:2	1084:2	16	ip
LEAF_NODE	1084:2	1084:2	17	ip
ASSIGN_OP	1084:5	1084:5	15	+=
LEAF_NODE	1084:5	1084:5	16	+=
RVAL	1084:8	1084:8	15	3
FIELD	1084:8	1084:8	16	3
LEAF_NODE	1084:8	1084:8	17	3
LEAF_NODE	1084:9	1084:9	13	;
LEAF_NODE	1085:5	1085:5	11	}
LEAF_NODE	1086:1	1086:1	8	}
SELECTION	1086:3	1086:8	6	
KEYWORD	1086:3	1086:3	7	else
LEAF_NODE	1086:3	1086:3	8	else
STATEMENTS	1086:8	1086:8	7	
SELECTION	1086:8	1086:25	8	
KEYWORD	1086:8	1086:8	9	if
LEAF_NODE	1086:8	1086:8	10	if
LEAF_NODE	1086:11	1086:11	9	(
CONDITION	1086:12	1086:12	9	stride == 4
EXPR	1086:12	1086:22	10	stride == 4
FIELD	1086:12	1086:12	11	stride
LEAF_NODE	1086:12	1086:12	12	stride
EQ_OPERATOR	1086:19	1086:19	11	==
LEAF_NODE	1086:19	1086:19	12	==
FIELD	1086:22	1086:22	11	4
LEAF_NODE	1086:22	1086:22	12	4
LEAF_NODE	1086:23	1086:23	9	)
STATEMENTS	1086:25	1099:1	9	
LEAF_NODE	1086:25	1086:25	10	{
STATEMENTS	1087:5	1090:5	10	
EXPR_STATEMENT	1087:5	1087:30	11	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] ) ;
EXPR	1087:5	1087:5	12	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] )
ASSIGN	1087:5	1087:10	13	r2 = wp [ 0 ] = CLAMP ( ip [ 0 ] )
LVAL	1087:5	1087:5	14	r2
FIELD	1087:5	1087:5	15	r2
LEAF_NODE	1087:5	1087:5	16	r2
ASSIGN_OP	1087:8	1087:8	14	=
LEAF_NODE	1087:8	1087:8	15	=
RVAL	1087:10	1087:10	14	wp [ 0 ] = CLAMP ( ip [ 0 ] )
ASSIGN	1087:10	1087:18	15	wp [ 0 ] = CLAMP ( ip [ 0 ] )
LVAL	1087:10	1087:10	16	wp [ 0 ]
FIELD	1087:10	1087:14	17	wp [ 0 ]
LEAF_NODE	1087:10	1087:10	18	wp
LEAF_NODE	1087:12	1087:12	18	[
EXPR	1087:13	1087:13	18	0
FIELD	1087:13	1087:13	19	0
LEAF_NODE	1087:13	1087:13	20	0
LEAF_NODE	1087:14	1087:14	18	]
ASSIGN_OP	1087:16	1087:16	16	=
LEAF_NODE	1087:16	1087:16	17	=
RVAL	1087:18	1087:18	16	CLAMP ( ip [ 0 ] )
FUNCTION_CALL	1087:18	1087:29	17	CLAMP ( ip [ 0 ] )
CALLEE	1087:18	1087:18	18	CLAMP
LEAF_NODE	1087:18	1087:18	19	CLAMP
LEAF_NODE	1087:23	1087:23	18	(
ARGUMENT	1087:24	1087:24	18	ip [ 0 ]
FIELD	1087:24	1087:28	19	ip [ 0 ]
LEAF_NODE	1087:24	1087:24	20	ip
LEAF_NODE	1087:26	1087:26	20	[
EXPR	1087:27	1087:27	20	0
FIELD	1087:27	1087:27	21	0
LEAF_NODE	1087:27	1087:27	22	0
LEAF_NODE	1087:28	1087:28	20	]
LEAF_NODE	1087:29	1087:29	18	)
LEAF_NODE	1087:30	1087:30	12	;
EXPR_STATEMENT	1087:33	1087:58	11	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] ) ;
EXPR	1087:33	1087:33	12	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] )
ASSIGN	1087:33	1087:38	13	g2 = wp [ 1 ] = CLAMP ( ip [ 1 ] )
LVAL	1087:33	1087:33	14	g2
FIELD	1087:33	1087:33	15	g2
LEAF_NODE	1087:33	1087:33	16	g2
ASSIGN_OP	1087:36	1087:36	14	=
LEAF_NODE	1087:36	1087:36	15	=
RVAL	1087:38	1087:38	14	wp [ 1 ] = CLAMP ( ip [ 1 ] )
ASSIGN	1087:38	1087:46	15	wp [ 1 ] = CLAMP ( ip [ 1 ] )
LVAL	1087:38	1087:38	16	wp [ 1 ]
FIELD	1087:38	1087:42	17	wp [ 1 ]
LEAF_NODE	1087:38	1087:38	18	wp
LEAF_NODE	1087:40	1087:40	18	[
EXPR	1087:41	1087:41	18	1
FIELD	1087:41	1087:41	19	1
LEAF_NODE	1087:41	1087:41	20	1
LEAF_NODE	1087:42	1087:42	18	]
ASSIGN_OP	1087:44	1087:44	16	=
LEAF_NODE	1087:44	1087:44	17	=
RVAL	1087:46	1087:46	16	CLAMP ( ip [ 1 ] )
FUNCTION_CALL	1087:46	1087:57	17	CLAMP ( ip [ 1 ] )
CALLEE	1087:46	1087:46	18	CLAMP
LEAF_NODE	1087:46	1087:46	19	CLAMP
LEAF_NODE	1087:51	1087:51	18	(
ARGUMENT	1087:52	1087:52	18	ip [ 1 ]
FIELD	1087:52	1087:56	19	ip [ 1 ]
LEAF_NODE	1087:52	1087:52	20	ip
LEAF_NODE	1087:54	1087:54	20	[
EXPR	1087:55	1087:55	20	1
FIELD	1087:55	1087:55	21	1
LEAF_NODE	1087:55	1087:55	22	1
LEAF_NODE	1087:56	1087:56	20	]
LEAF_NODE	1087:57	1087:57	18	)
LEAF_NODE	1087:58	1087:58	12	;
EXPR_STATEMENT	1088:5	1088:30	11	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] ) ;
EXPR	1088:5	1088:5	12	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] )
ASSIGN	1088:5	1088:10	13	b2 = wp [ 2 ] = CLAMP ( ip [ 2 ] )
LVAL	1088:5	1088:5	14	b2
FIELD	1088:5	1088:5	15	b2
LEAF_NODE	1088:5	1088:5	16	b2
ASSIGN_OP	1088:8	1088:8	14	=
LEAF_NODE	1088:8	1088:8	15	=
RVAL	1088:10	1088:10	14	wp [ 2 ] = CLAMP ( ip [ 2 ] )
ASSIGN	1088:10	1088:18	15	wp [ 2 ] = CLAMP ( ip [ 2 ] )
LVAL	1088:10	1088:10	16	wp [ 2 ]
FIELD	1088:10	1088:14	17	wp [ 2 ]
LEAF_NODE	1088:10	1088:10	18	wp
LEAF_NODE	1088:12	1088:12	18	[
EXPR	1088:13	1088:13	18	2
FIELD	1088:13	1088:13	19	2
LEAF_NODE	1088:13	1088:13	20	2
LEAF_NODE	1088:14	1088:14	18	]
ASSIGN_OP	1088:16	1088:16	16	=
LEAF_NODE	1088:16	1088:16	17	=
RVAL	1088:18	1088:18	16	CLAMP ( ip [ 2 ] )
FUNCTION_CALL	1088:18	1088:29	17	CLAMP ( ip [ 2 ] )
CALLEE	1088:18	1088:18	18	CLAMP
LEAF_NODE	1088:18	1088:18	19	CLAMP
LEAF_NODE	1088:23	1088:23	18	(
ARGUMENT	1088:24	1088:24	18	ip [ 2 ]
FIELD	1088:24	1088:28	19	ip [ 2 ]
LEAF_NODE	1088:24	1088:24	20	ip
LEAF_NODE	1088:26	1088:26	20	[
EXPR	1088:27	1088:27	20	2
FIELD	1088:27	1088:27	21	2
LEAF_NODE	1088:27	1088:27	22	2
LEAF_NODE	1088:28	1088:28	20	]
LEAF_NODE	1088:29	1088:29	18	)
LEAF_NODE	1088:30	1088:30	12	;
EXPR_STATEMENT	1088:33	1088:58	11	a2 = wp [ 3 ] = CLAMP ( ip [ 3 ] ) ;
EXPR	1088:33	1088:33	12	a2 = wp [ 3 ] = CLAMP ( ip [ 3 ] )
ASSIGN	1088:33	1088:38	13	a2 = wp [ 3 ] = CLAMP ( ip [ 3 ] )
LVAL	1088:33	1088:33	14	a2
FIELD	1088:33	1088:33	15	a2
LEAF_NODE	1088:33	1088:33	16	a2
ASSIGN_OP	1088:36	1088:36	14	=
LEAF_NODE	1088:36	1088:36	15	=
RVAL	1088:38	1088:38	14	wp [ 3 ] = CLAMP ( ip [ 3 ] )
ASSIGN	1088:38	1088:46	15	wp [ 3 ] = CLAMP ( ip [ 3 ] )
LVAL	1088:38	1088:38	16	wp [ 3 ]
FIELD	1088:38	1088:42	17	wp [ 3 ]
LEAF_NODE	1088:38	1088:38	18	wp
LEAF_NODE	1088:40	1088:40	18	[
EXPR	1088:41	1088:41	18	3
FIELD	1088:41	1088:41	19	3
LEAF_NODE	1088:41	1088:41	20	3
LEAF_NODE	1088:42	1088:42	18	]
ASSIGN_OP	1088:44	1088:44	16	=
LEAF_NODE	1088:44	1088:44	17	=
RVAL	1088:46	1088:46	16	CLAMP ( ip [ 3 ] )
FUNCTION_CALL	1088:46	1088:57	17	CLAMP ( ip [ 3 ] )
CALLEE	1088:46	1088:46	18	CLAMP
LEAF_NODE	1088:46	1088:46	19	CLAMP
LEAF_NODE	1088:51	1088:51	18	(
ARGUMENT	1088:52	1088:52	18	ip [ 3 ]
FIELD	1088:52	1088:56	19	ip [ 3 ]
LEAF_NODE	1088:52	1088:52	20	ip
LEAF_NODE	1088:54	1088:54	20	[
EXPR	1088:55	1088:55	20	3
FIELD	1088:55	1088:55	21	3
LEAF_NODE	1088:55	1088:55	22	3
LEAF_NODE	1088:56	1088:56	20	]
LEAF_NODE	1088:57	1088:57	18	)
LEAF_NODE	1088:58	1088:58	12	;
EXPR_STATEMENT	1089:5	1089:11	11	n -= 4 ;
EXPR	1089:5	1089:5	12	n -= 4
ASSIGN	1089:5	1089:10	13	n -= 4
LVAL	1089:5	1089:5	14	n
FIELD	1089:5	1089:5	15	n
LEAF_NODE	1089:5	1089:5	16	n
ASSIGN_OP	1089:7	1089:7	14	-=
LEAF_NODE	1089:7	1089:7	15	-=
RVAL	1089:10	1089:10	14	4
FIELD	1089:10	1089:10	15	4
LEAF_NODE	1089:10	1089:10	16	4
LEAF_NODE	1089:11	1089:11	12	;
ITERATION	1090:5	1090:19	11	
KEYWORD	1090:5	1090:5	12	while
LEAF_NODE	1090:5	1090:5	13	while
LEAF_NODE	1090:11	1090:11	12	(
CONDITION	1090:12	1090:12	12	n > 0
EXPR	1090:12	1090:16	13	n > 0
FIELD	1090:12	1090:12	14	n
LEAF_NODE	1090:12	1090:12	15	n
REL_OPERATOR	1090:14	1090:14	14	>
LEAF_NODE	1090:14	1090:14	15	>
FIELD	1090:16	1090:16	14	0
LEAF_NODE	1090:16	1090:16	15	0
LEAF_NODE	1090:17	1090:17	12	)
STATEMENTS	1090:19	1098:5	12	
LEAF_NODE	1090:19	1090:19	13	{
STATEMENTS	1091:2	1097:2	13	
EXPR_STATEMENT	1091:2	1091:8	14	n -= 4 ;
EXPR	1091:2	1091:2	15	n -= 4
ASSIGN	1091:2	1091:7	16	n -= 4
LVAL	1091:2	1091:2	17	n
FIELD	1091:2	1091:2	18	n
LEAF_NODE	1091:2	1091:2	19	n
ASSIGN_OP	1091:4	1091:4	17	-=
LEAF_NODE	1091:4	1091:4	18	-=
RVAL	1091:7	1091:7	17	4
FIELD	1091:7	1091:7	18	4
LEAF_NODE	1091:7	1091:7	19	4
LEAF_NODE	1091:8	1091:8	15	;
EXPR_STATEMENT	1092:2	1092:19	14	r1 = CLAMP ( ip [ 4 ] ) ;
EXPR	1092:2	1092:2	15	r1 = CLAMP ( ip [ 4 ] )
ASSIGN	1092:2	1092:7	16	r1 = CLAMP ( ip [ 4 ] )
LVAL	1092:2	1092:2	17	r1
FIELD	1092:2	1092:2	18	r1
LEAF_NODE	1092:2	1092:2	19	r1
ASSIGN_OP	1092:5	1092:5	17	=
LEAF_NODE	1092:5	1092:5	18	=
RVAL	1092:7	1092:7	17	CLAMP ( ip [ 4 ] )
FUNCTION_CALL	1092:7	1092:18	18	CLAMP ( ip [ 4 ] )
CALLEE	1092:7	1092:7	19	CLAMP
LEAF_NODE	1092:7	1092:7	20	CLAMP
LEAF_NODE	1092:12	1092:12	19	(
ARGUMENT	1092:13	1092:13	19	ip [ 4 ]
FIELD	1092:13	1092:17	20	ip [ 4 ]
LEAF_NODE	1092:13	1092:13	21	ip
LEAF_NODE	1092:15	1092:15	21	[
EXPR	1092:16	1092:16	21	4
FIELD	1092:16	1092:16	22	4
LEAF_NODE	1092:16	1092:16	23	4
LEAF_NODE	1092:17	1092:17	21	]
LEAF_NODE	1092:18	1092:18	19	)
LEAF_NODE	1092:19	1092:19	15	;
EXPR_STATEMENT	1092:21	1092:53	14	wp [ 4 ] = ( uint16 ) ( ( r1 - r2 ) & mask ) ;
EXPR	1092:21	1092:21	15	wp [ 4 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
ASSIGN	1092:21	1092:29	16	wp [ 4 ] = ( uint16 ) ( ( r1 - r2 ) & mask )
LVAL	1092:21	1092:21	17	wp [ 4 ]
FIELD	1092:21	1092:25	18	wp [ 4 ]
LEAF_NODE	1092:21	1092:21	19	wp
LEAF_NODE	1092:23	1092:23	19	[
EXPR	1092:24	1092:24	19	4
FIELD	1092:24	1092:24	20	4
LEAF_NODE	1092:24	1092:24	21	4
LEAF_NODE	1092:25	1092:25	19	]
ASSIGN_OP	1092:27	1092:27	17	=
LEAF_NODE	1092:27	1092:27	18	=
RVAL	1092:29	1092:52	17	( uint16 ) ( ( r1 - r2 ) & mask )
LEAF_NODE	1092:29	1092:29	18	(
TYPE_NAME	1092:30	1092:30	18	uint16
LEAF_NODE	1092:30	1092:30	19	uint16
LEAF_NODE	1092:36	1092:36	18	)
LEAF_NODE	1092:37	1092:37	18	(
LEAF_NODE	1092:38	1092:38	18	(
FIELD	1092:39	1092:39	18	r1
LEAF_NODE	1092:39	1092:39	19	r1
LEAF_NODE	1092:41	1092:41	18	-
FIELD	1092:42	1092:42	18	r2
LEAF_NODE	1092:42	1092:42	19	r2
LEAF_NODE	1092:44	1092:44	18	)
LEAF_NODE	1092:46	1092:46	18	&
FIELD	1092:48	1092:48	18	mask
LEAF_NODE	1092:48	1092:48	19	mask
LEAF_NODE	1092:52	1092:52	18	)
LEAF_NODE	1092:53	1092:53	15	;
EXPR_STATEMENT	1092:55	1092:62	14	r2 = r1 ;
EXPR	1092:55	1092:55	15	r2 = r1
ASSIGN	1092:55	1092:60	16	r2 = r1
LVAL	1092:55	1092:55	17	r2
FIELD	1092:55	1092:55	18	r2
LEAF_NODE	1092:55	1092:55	19	r2
ASSIGN_OP	1092:58	1092:58	17	=
LEAF_NODE	1092:58	1092:58	18	=
RVAL	1092:60	1092:60	17	r1
FIELD	1092:60	1092:60	18	r1
LEAF_NODE	1092:60	1092:60	19	r1
LEAF_NODE	1092:62	1092:62	15	;
EXPR_STATEMENT	1093:2	1093:19	14	g1 = CLAMP ( ip [ 5 ] ) ;
EXPR	1093:2	1093:2	15	g1 = CLAMP ( ip [ 5 ] )
ASSIGN	1093:2	1093:7	16	g1 = CLAMP ( ip [ 5 ] )
LVAL	1093:2	1093:2	17	g1
FIELD	1093:2	1093:2	18	g1
LEAF_NODE	1093:2	1093:2	19	g1
ASSIGN_OP	1093:5	1093:5	17	=
LEAF_NODE	1093:5	1093:5	18	=
RVAL	1093:7	1093:7	17	CLAMP ( ip [ 5 ] )
FUNCTION_CALL	1093:7	1093:18	18	CLAMP ( ip [ 5 ] )
CALLEE	1093:7	1093:7	19	CLAMP
LEAF_NODE	1093:7	1093:7	20	CLAMP
LEAF_NODE	1093:12	1093:12	19	(
ARGUMENT	1093:13	1093:13	19	ip [ 5 ]
FIELD	1093:13	1093:17	20	ip [ 5 ]
LEAF_NODE	1093:13	1093:13	21	ip
LEAF_NODE	1093:15	1093:15	21	[
EXPR	1093:16	1093:16	21	5
FIELD	1093:16	1093:16	22	5
LEAF_NODE	1093:16	1093:16	23	5
LEAF_NODE	1093:17	1093:17	21	]
LEAF_NODE	1093:18	1093:18	19	)
LEAF_NODE	1093:19	1093:19	15	;
EXPR_STATEMENT	1093:21	1093:53	14	wp [ 5 ] = ( uint16 ) ( ( g1 - g2 ) & mask ) ;
EXPR	1093:21	1093:21	15	wp [ 5 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
ASSIGN	1093:21	1093:29	16	wp [ 5 ] = ( uint16 ) ( ( g1 - g2 ) & mask )
LVAL	1093:21	1093:21	17	wp [ 5 ]
FIELD	1093:21	1093:25	18	wp [ 5 ]
LEAF_NODE	1093:21	1093:21	19	wp
LEAF_NODE	1093:23	1093:23	19	[
EXPR	1093:24	1093:24	19	5
FIELD	1093:24	1093:24	20	5
LEAF_NODE	1093:24	1093:24	21	5
LEAF_NODE	1093:25	1093:25	19	]
ASSIGN_OP	1093:27	1093:27	17	=
LEAF_NODE	1093:27	1093:27	18	=
RVAL	1093:29	1093:52	17	( uint16 ) ( ( g1 - g2 ) & mask )
LEAF_NODE	1093:29	1093:29	18	(
TYPE_NAME	1093:30	1093:30	18	uint16
LEAF_NODE	1093:30	1093:30	19	uint16
LEAF_NODE	1093:36	1093:36	18	)
LEAF_NODE	1093:37	1093:37	18	(
LEAF_NODE	1093:38	1093:38	18	(
FIELD	1093:39	1093:39	18	g1
LEAF_NODE	1093:39	1093:39	19	g1
LEAF_NODE	1093:41	1093:41	18	-
FIELD	1093:42	1093:42	18	g2
LEAF_NODE	1093:42	1093:42	19	g2
LEAF_NODE	1093:44	1093:44	18	)
LEAF_NODE	1093:46	1093:46	18	&
FIELD	1093:48	1093:48	18	mask
LEAF_NODE	1093:48	1093:48	19	mask
LEAF_NODE	1093:52	1093:52	18	)
LEAF_NODE	1093:53	1093:53	15	;
EXPR_STATEMENT	1093:55	1093:62	14	g2 = g1 ;
EXPR	1093:55	1093:55	15	g2 = g1
ASSIGN	1093:55	1093:60	16	g2 = g1
LVAL	1093:55	1093:55	17	g2
FIELD	1093:55	1093:55	18	g2
LEAF_NODE	1093:55	1093:55	19	g2
ASSIGN_OP	1093:58	1093:58	17	=
LEAF_NODE	1093:58	1093:58	18	=
RVAL	1093:60	1093:60	17	g1
FIELD	1093:60	1093:60	18	g1
LEAF_NODE	1093:60	1093:60	19	g1
LEAF_NODE	1093:62	1093:62	15	;
EXPR_STATEMENT	1094:2	1094:19	14	b1 = CLAMP ( ip [ 6 ] ) ;
EXPR	1094:2	1094:2	15	b1 = CLAMP ( ip [ 6 ] )
ASSIGN	1094:2	1094:7	16	b1 = CLAMP ( ip [ 6 ] )
LVAL	1094:2	1094:2	17	b1
FIELD	1094:2	1094:2	18	b1
LEAF_NODE	1094:2	1094:2	19	b1
ASSIGN_OP	1094:5	1094:5	17	=
LEAF_NODE	1094:5	1094:5	18	=
RVAL	1094:7	1094:7	17	CLAMP ( ip [ 6 ] )
FUNCTION_CALL	1094:7	1094:18	18	CLAMP ( ip [ 6 ] )
CALLEE	1094:7	1094:7	19	CLAMP
LEAF_NODE	1094:7	1094:7	20	CLAMP
LEAF_NODE	1094:12	1094:12	19	(
ARGUMENT	1094:13	1094:13	19	ip [ 6 ]
FIELD	1094:13	1094:17	20	ip [ 6 ]
LEAF_NODE	1094:13	1094:13	21	ip
LEAF_NODE	1094:15	1094:15	21	[
EXPR	1094:16	1094:16	21	6
FIELD	1094:16	1094:16	22	6
LEAF_NODE	1094:16	1094:16	23	6
LEAF_NODE	1094:17	1094:17	21	]
LEAF_NODE	1094:18	1094:18	19	)
LEAF_NODE	1094:19	1094:19	15	;
EXPR_STATEMENT	1094:21	1094:53	14	wp [ 6 ] = ( uint16 ) ( ( b1 - b2 ) & mask ) ;
EXPR	1094:21	1094:21	15	wp [ 6 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
ASSIGN	1094:21	1094:29	16	wp [ 6 ] = ( uint16 ) ( ( b1 - b2 ) & mask )
LVAL	1094:21	1094:21	17	wp [ 6 ]
FIELD	1094:21	1094:25	18	wp [ 6 ]
LEAF_NODE	1094:21	1094:21	19	wp
LEAF_NODE	1094:23	1094:23	19	[
EXPR	1094:24	1094:24	19	6
FIELD	1094:24	1094:24	20	6
LEAF_NODE	1094:24	1094:24	21	6
LEAF_NODE	1094:25	1094:25	19	]
ASSIGN_OP	1094:27	1094:27	17	=
LEAF_NODE	1094:27	1094:27	18	=
RVAL	1094:29	1094:52	17	( uint16 ) ( ( b1 - b2 ) & mask )
LEAF_NODE	1094:29	1094:29	18	(
TYPE_NAME	1094:30	1094:30	18	uint16
LEAF_NODE	1094:30	1094:30	19	uint16
LEAF_NODE	1094:36	1094:36	18	)
LEAF_NODE	1094:37	1094:37	18	(
LEAF_NODE	1094:38	1094:38	18	(
FIELD	1094:39	1094:39	18	b1
LEAF_NODE	1094:39	1094:39	19	b1
LEAF_NODE	1094:41	1094:41	18	-
FIELD	1094:42	1094:42	18	b2
LEAF_NODE	1094:42	1094:42	19	b2
LEAF_NODE	1094:44	1094:44	18	)
LEAF_NODE	1094:46	1094:46	18	&
FIELD	1094:48	1094:48	18	mask
LEAF_NODE	1094:48	1094:48	19	mask
LEAF_NODE	1094:52	1094:52	18	)
LEAF_NODE	1094:53	1094:53	15	;
EXPR_STATEMENT	1094:55	1094:62	14	b2 = b1 ;
EXPR	1094:55	1094:55	15	b2 = b1
ASSIGN	1094:55	1094:60	16	b2 = b1
LVAL	1094:55	1094:55	17	b2
FIELD	1094:55	1094:55	18	b2
LEAF_NODE	1094:55	1094:55	19	b2
ASSIGN_OP	1094:58	1094:58	17	=
LEAF_NODE	1094:58	1094:58	18	=
RVAL	1094:60	1094:60	17	b1
FIELD	1094:60	1094:60	18	b1
LEAF_NODE	1094:60	1094:60	19	b1
LEAF_NODE	1094:62	1094:62	15	;
EXPR_STATEMENT	1095:2	1095:19	14	a1 = CLAMP ( ip [ 7 ] ) ;
EXPR	1095:2	1095:2	15	a1 = CLAMP ( ip [ 7 ] )
ASSIGN	1095:2	1095:7	16	a1 = CLAMP ( ip [ 7 ] )
LVAL	1095:2	1095:2	17	a1
FIELD	1095:2	1095:2	18	a1
LEAF_NODE	1095:2	1095:2	19	a1
ASSIGN_OP	1095:5	1095:5	17	=
LEAF_NODE	1095:5	1095:5	18	=
RVAL	1095:7	1095:7	17	CLAMP ( ip [ 7 ] )
FUNCTION_CALL	1095:7	1095:18	18	CLAMP ( ip [ 7 ] )
CALLEE	1095:7	1095:7	19	CLAMP
LEAF_NODE	1095:7	1095:7	20	CLAMP
LEAF_NODE	1095:12	1095:12	19	(
ARGUMENT	1095:13	1095:13	19	ip [ 7 ]
FIELD	1095:13	1095:17	20	ip [ 7 ]
LEAF_NODE	1095:13	1095:13	21	ip
LEAF_NODE	1095:15	1095:15	21	[
EXPR	1095:16	1095:16	21	7
FIELD	1095:16	1095:16	22	7
LEAF_NODE	1095:16	1095:16	23	7
LEAF_NODE	1095:17	1095:17	21	]
LEAF_NODE	1095:18	1095:18	19	)
LEAF_NODE	1095:19	1095:19	15	;
EXPR_STATEMENT	1095:21	1095:53	14	wp [ 7 ] = ( uint16 ) ( ( a1 - a2 ) & mask ) ;
EXPR	1095:21	1095:21	15	wp [ 7 ] = ( uint16 ) ( ( a1 - a2 ) & mask )
ASSIGN	1095:21	1095:29	16	wp [ 7 ] = ( uint16 ) ( ( a1 - a2 ) & mask )
LVAL	1095:21	1095:21	17	wp [ 7 ]
FIELD	1095:21	1095:25	18	wp [ 7 ]
LEAF_NODE	1095:21	1095:21	19	wp
LEAF_NODE	1095:23	1095:23	19	[
EXPR	1095:24	1095:24	19	7
FIELD	1095:24	1095:24	20	7
LEAF_NODE	1095:24	1095:24	21	7
LEAF_NODE	1095:25	1095:25	19	]
ASSIGN_OP	1095:27	1095:27	17	=
LEAF_NODE	1095:27	1095:27	18	=
RVAL	1095:29	1095:52	17	( uint16 ) ( ( a1 - a2 ) & mask )
LEAF_NODE	1095:29	1095:29	18	(
TYPE_NAME	1095:30	1095:30	18	uint16
LEAF_NODE	1095:30	1095:30	19	uint16
LEAF_NODE	1095:36	1095:36	18	)
LEAF_NODE	1095:37	1095:37	18	(
LEAF_NODE	1095:38	1095:38	18	(
FIELD	1095:39	1095:39	18	a1
LEAF_NODE	1095:39	1095:39	19	a1
LEAF_NODE	1095:41	1095:41	18	-
FIELD	1095:42	1095:42	18	a2
LEAF_NODE	1095:42	1095:42	19	a2
LEAF_NODE	1095:44	1095:44	18	)
LEAF_NODE	1095:46	1095:46	18	&
FIELD	1095:48	1095:48	18	mask
LEAF_NODE	1095:48	1095:48	19	mask
LEAF_NODE	1095:52	1095:52	18	)
LEAF_NODE	1095:53	1095:53	15	;
EXPR_STATEMENT	1095:55	1095:62	14	a2 = a1 ;
EXPR	1095:55	1095:55	15	a2 = a1
ASSIGN	1095:55	1095:60	16	a2 = a1
LVAL	1095:55	1095:55	17	a2
FIELD	1095:55	1095:55	18	a2
LEAF_NODE	1095:55	1095:55	19	a2
ASSIGN_OP	1095:58	1095:58	17	=
LEAF_NODE	1095:58	1095:58	18	=
RVAL	1095:60	1095:60	17	a1
FIELD	1095:60	1095:60	18	a1
LEAF_NODE	1095:60	1095:60	19	a1
LEAF_NODE	1095:62	1095:62	15	;
EXPR_STATEMENT	1096:2	1096:9	14	wp += 4 ;
EXPR	1096:2	1096:2	15	wp += 4
ASSIGN	1096:2	1096:8	16	wp += 4
LVAL	1096:2	1096:2	17	wp
FIELD	1096:2	1096:2	18	wp
LEAF_NODE	1096:2	1096:2	19	wp
ASSIGN_OP	1096:5	1096:5	17	+=
LEAF_NODE	1096:5	1096:5	18	+=
RVAL	1096:8	1096:8	17	4
FIELD	1096:8	1096:8	18	4
LEAF_NODE	1096:8	1096:8	19	4
LEAF_NODE	1096:9	1096:9	15	;
EXPR_STATEMENT	1097:2	1097:9	14	ip += 4 ;
EXPR	1097:2	1097:2	15	ip += 4
ASSIGN	1097:2	1097:8	16	ip += 4
LVAL	1097:2	1097:2	17	ip
FIELD	1097:2	1097:2	18	ip
LEAF_NODE	1097:2	1097:2	19	ip
ASSIGN_OP	1097:5	1097:5	17	+=
LEAF_NODE	1097:5	1097:5	18	+=
RVAL	1097:8	1097:8	17	4
FIELD	1097:8	1097:8	18	4
LEAF_NODE	1097:8	1097:8	19	4
LEAF_NODE	1097:9	1097:9	15	;
LEAF_NODE	1098:5	1098:5	13	}
LEAF_NODE	1099:1	1099:1	10	}
SELECTION	1099:3	1099:8	6	
KEYWORD	1099:3	1099:3	7	else
LEAF_NODE	1099:3	1099:3	8	else
STATEMENTS	1099:8	1108:4	7	
LEAF_NODE	1099:8	1099:8	8	{
STATEMENTS	1100:8	1102:8	8	
LEAF_NODE	1100:8	1100:8	9	REPEAT
LEAF_NODE	1100:14	1100:14	9	(
EXPR_STATEMENT	1100:15	1100:43	9	stride , wp [ 0 ] = CLAMP ( ip [ 0 ] ) ;
EXPR	1100:15	1100:23	10	stride , wp [ 0 ] = CLAMP ( ip [ 0 ] )
FIELD	1100:15	1100:15	11	stride
LEAF_NODE	1100:15	1100:15	12	stride
LEAF_NODE	1100:21	1100:21	11	,
ASSIGN	1100:23	1100:31	11	wp [ 0 ] = CLAMP ( ip [ 0 ] )
LVAL	1100:23	1100:23	12	wp [ 0 ]
FIELD	1100:23	1100:27	13	wp [ 0 ]
LEAF_NODE	1100:23	1100:23	14	wp
LEAF_NODE	1100:25	1100:25	14	[
EXPR	1100:26	1100:26	14	0
FIELD	1100:26	1100:26	15	0
LEAF_NODE	1100:26	1100:26	16	0
LEAF_NODE	1100:27	1100:27	14	]
ASSIGN_OP	1100:29	1100:29	12	=
LEAF_NODE	1100:29	1100:29	13	=
RVAL	1100:31	1100:31	12	CLAMP ( ip [ 0 ] )
FUNCTION_CALL	1100:31	1100:42	13	CLAMP ( ip [ 0 ] )
CALLEE	1100:31	1100:31	14	CLAMP
LEAF_NODE	1100:31	1100:31	15	CLAMP
LEAF_NODE	1100:36	1100:36	14	(
ARGUMENT	1100:37	1100:37	14	ip [ 0 ]
FIELD	1100:37	1100:41	15	ip [ 0 ]
LEAF_NODE	1100:37	1100:37	16	ip
LEAF_NODE	1100:39	1100:39	16	[
EXPR	1100:40	1100:40	16	0
FIELD	1100:40	1100:40	17	0
LEAF_NODE	1100:40	1100:40	18	0
LEAF_NODE	1100:41	1100:41	16	]
LEAF_NODE	1100:42	1100:42	14	)
LEAF_NODE	1100:43	1100:43	10	;
EXPR_STATEMENT	1100:45	1100:49	9	wp ++ ;
EXPR	1100:45	1100:45	10	wp ++
FIELD	1100:45	1100:47	11	wp ++
LEAF_NODE	1100:45	1100:45	12	wp
LEAF_NODE	1100:47	1100:47	12	++
LEAF_NODE	1100:49	1100:49	10	;
LEAF_NODE	1100:51	1100:51	9	ip
LEAF_NODE	1100:53	1100:53	9	++
LEAF_NODE	1100:55	1100:55	9	)
EXPR_STATEMENT	1101:8	1101:19	9	n -= stride ;
EXPR	1101:8	1101:8	10	n -= stride
ASSIGN	1101:8	1101:13	11	n -= stride
LVAL	1101:8	1101:8	12	n
FIELD	1101:8	1101:8	13	n
LEAF_NODE	1101:8	1101:8	14	n
ASSIGN_OP	1101:10	1101:10	12	-=
LEAF_NODE	1101:10	1101:10	13	-=
RVAL	1101:13	1101:13	12	stride
FIELD	1101:13	1101:13	13	stride
LEAF_NODE	1101:13	1101:13	14	stride
LEAF_NODE	1101:19	1101:19	10	;
ITERATION	1102:8	1102:22	9	
KEYWORD	1102:8	1102:8	10	while
LEAF_NODE	1102:8	1102:8	11	while
LEAF_NODE	1102:14	1102:14	10	(
CONDITION	1102:15	1102:15	10	n > 0
EXPR	1102:15	1102:19	11	n > 0
FIELD	1102:15	1102:15	12	n
LEAF_NODE	1102:15	1102:15	13	n
REL_OPERATOR	1102:17	1102:17	12	>
LEAF_NODE	1102:17	1102:17	13	>
FIELD	1102:19	1102:19	12	0
LEAF_NODE	1102:19	1102:19	13	0
LEAF_NODE	1102:20	1102:20	10	)
STATEMENTS	1102:22	1107:8	10	
LEAF_NODE	1102:22	1102:22	11	{
STATEMENTS	1103:12	1106:12	11	
LEAF_NODE	1103:12	1103:12	12	REPEAT
LEAF_NODE	1103:18	1103:18	12	(
EXPR_STATEMENT	1103:19	1104:74	12	stride , wp [ 0 ] = ( uint16 ) ( ( CLAMP ( ip [ 0 ] ) - CLAMP ( ip [ - stride ] ) ) & mask ) ;
EXPR	1103:19	1104:16	13	stride , wp [ 0 ] = ( uint16 ) ( ( CLAMP ( ip [ 0 ] ) - CLAMP ( ip [ - stride ] ) ) & mask )
FIELD	1103:19	1103:19	14	stride
LEAF_NODE	1103:19	1103:19	15	stride
LEAF_NODE	1103:25	1103:25	14	,
ASSIGN	1104:16	1104:24	14	wp [ 0 ] = ( uint16 ) ( ( CLAMP ( ip [ 0 ] ) - CLAMP ( ip [ - stride ] ) ) & mask )
LVAL	1104:16	1104:16	15	wp [ 0 ]
FIELD	1104:16	1104:20	16	wp [ 0 ]
LEAF_NODE	1104:16	1104:16	17	wp
LEAF_NODE	1104:18	1104:18	17	[
EXPR	1104:19	1104:19	17	0
FIELD	1104:19	1104:19	18	0
LEAF_NODE	1104:19	1104:19	19	0
LEAF_NODE	1104:20	1104:20	17	]
ASSIGN_OP	1104:22	1104:22	15	=
LEAF_NODE	1104:22	1104:22	16	=
RVAL	1104:24	1104:73	15	( uint16 ) ( ( CLAMP ( ip [ 0 ] ) - CLAMP ( ip [ - stride ] ) ) & mask )
LEAF_NODE	1104:24	1104:24	16	(
TYPE_NAME	1104:25	1104:25	16	uint16
LEAF_NODE	1104:25	1104:25	17	uint16
LEAF_NODE	1104:31	1104:31	16	)
LEAF_NODE	1104:32	1104:32	16	(
LEAF_NODE	1104:33	1104:33	16	(
FUNCTION_CALL	1104:34	1104:45	16	CLAMP ( ip [ 0 ] )
CALLEE	1104:34	1104:34	17	CLAMP
LEAF_NODE	1104:34	1104:34	18	CLAMP
LEAF_NODE	1104:39	1104:39	17	(
ARGUMENT	1104:40	1104:40	17	ip [ 0 ]
FIELD	1104:40	1104:44	18	ip [ 0 ]
LEAF_NODE	1104:40	1104:40	19	ip
LEAF_NODE	1104:42	1104:42	19	[
EXPR	1104:43	1104:43	19	0
FIELD	1104:43	1104:43	20	0
LEAF_NODE	1104:43	1104:43	21	0
LEAF_NODE	1104:44	1104:44	19	]
LEAF_NODE	1104:45	1104:45	17	)
LEAF_NODE	1104:46	1104:46	16	-
FUNCTION_CALL	1104:47	1104:64	16	CLAMP ( ip [ - stride ] )
CALLEE	1104:47	1104:47	17	CLAMP
LEAF_NODE	1104:47	1104:47	18	CLAMP
LEAF_NODE	1104:52	1104:52	17	(
ARGUMENT	1104:53	1104:53	17	ip [ - stride ]
FIELD	1104:53	1104:63	18	ip [ - stride ]
LEAF_NODE	1104:53	1104:53	19	ip
LEAF_NODE	1104:55	1104:55	19	[
EXPR	1104:56	1104:56	19	- stride
UNARY_EXPR	1104:56	1104:57	20	- stride
UNARY_OPERATOR	1104:56	1104:56	21	-
LEAF_NODE	1104:56	1104:56	22	-
FIELD	1104:57	1104:57	21	stride
LEAF_NODE	1104:57	1104:57	22	stride
LEAF_NODE	1104:63	1104:63	19	]
LEAF_NODE	1104:64	1104:64	17	)
LEAF_NODE	1104:65	1104:65	16	)
LEAF_NODE	1104:67	1104:67	16	&
FIELD	1104:69	1104:69	16	mask
LEAF_NODE	1104:69	1104:69	17	mask
LEAF_NODE	1104:73	1104:73	16	)
LEAF_NODE	1104:74	1104:74	13	;
EXPR_STATEMENT	1105:16	1105:20	12	wp ++ ;
EXPR	1105:16	1105:16	13	wp ++
FIELD	1105:16	1105:18	14	wp ++
LEAF_NODE	1105:16	1105:16	15	wp
LEAF_NODE	1105:18	1105:18	15	++
LEAF_NODE	1105:20	1105:20	13	;
LEAF_NODE	1105:22	1105:22	12	ip
LEAF_NODE	1105:24	1105:24	12	++
LEAF_NODE	1105:26	1105:26	12	)
EXPR_STATEMENT	1106:12	1106:23	12	n -= stride ;
EXPR	1106:12	1106:12	13	n -= stride
ASSIGN	1106:12	1106:17	14	n -= stride
LVAL	1106:12	1106:12	15	n
FIELD	1106:12	1106:12	16	n
LEAF_NODE	1106:12	1106:12	17	n
ASSIGN_OP	1106:14	1106:14	15	-=
LEAF_NODE	1106:14	1106:14	16	-=
RVAL	1106:17	1106:17	15	stride
FIELD	1106:17	1106:17	16	stride
LEAF_NODE	1106:17	1106:17	17	stride
LEAF_NODE	1106:23	1106:23	13	;
LEAF_NODE	1107:8	1107:8	11	}
LEAF_NODE	1108:4	1108:4	8	}
LEAF_NODE	1109:4	1109:4	5	}
LEAF_NODE	1110:0	1110:0	2	}
FUNCTION_DEF	1115:0	1209:0	1	
RETURN_TYPE	1115:0	1115:7	2	static int
LEAF_NODE	1115:0	1115:0	3	static
TYPE_NAME	1115:7	1115:7	3	int
LEAF_NODE	1115:7	1115:7	4	int
FUNCTION_NAME	1116:0	1116:0	2	PixarLogEncode
LEAF_NODE	1116:0	1116:0	3	PixarLogEncode
PARAMETER_LIST	1116:14	1116:58	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	1116:14	1116:14	3	(
PARAMETER_DECL	1116:15	1116:21	3	TIFF * tif
TYPE	1116:15	1116:19	4	TIFF *
TYPE_NAME	1116:15	1116:15	5	TIFF
LEAF_NODE	1116:15	1116:15	6	TIFF
POINTER	1116:19	1116:19	5	*
LEAF_NODE	1116:19	1116:19	6	*
NAME	1116:21	1116:21	4	tif
LEAF_NODE	1116:21	1116:21	5	tif
LEAF_NODE	1116:24	1116:24	3	,
PARAMETER_DECL	1116:26	1116:33	3	uint8 * bp
TYPE	1116:26	1116:31	4	uint8 *
TYPE_NAME	1116:26	1116:26	5	uint8
LEAF_NODE	1116:26	1116:26	6	uint8
POINTER	1116:31	1116:31	5	*
LEAF_NODE	1116:31	1116:31	6	*
NAME	1116:33	1116:33	4	bp
LEAF_NODE	1116:33	1116:33	5	bp
LEAF_NODE	1116:35	1116:35	3	,
PARAMETER_DECL	1116:37	1116:46	3	tmsize_t cc
TYPE	1116:37	1116:37	4	tmsize_t
TYPE_NAME	1116:37	1116:37	5	tmsize_t
LEAF_NODE	1116:37	1116:37	6	tmsize_t
NAME	1116:46	1116:46	4	cc
LEAF_NODE	1116:46	1116:46	5	cc
LEAF_NODE	1116:48	1116:48	3	,
PARAMETER_DECL	1116:50	1116:57	3	uint16 s
TYPE	1116:50	1116:50	4	uint16
TYPE_NAME	1116:50	1116:50	5	uint16
LEAF_NODE	1116:50	1116:50	6	uint16
NAME	1116:57	1116:57	4	s
LEAF_NODE	1116:57	1116:57	5	s
LEAF_NODE	1116:58	1116:58	3	)
LEAF_NODE	1117:0	1117:0	2	{
STATEMENTS	1118:1	1208:1	2	
LEAF_NODE	1118:1	1118:1	3	static
SIMPLE_DECL	1118:8	1118:46	3	const char [ ] module ; module = "PixarLogEncode" ;
VAR_DECL	1118:8	1118:19	4	const char [ ] module ; module = "PixarLogEncode"
TYPE	1118:8	1118:25	5	const char [ ]
TYPE_NAME	1118:8	1118:14	6	const char
LEAF_NODE	1118:8	1118:8	7	const
LEAF_NODE	1118:14	1118:14	7	char
TYPE_SUFFIX	1118:25	1118:26	6	[ ]
LEAF_NODE	1118:25	1118:25	7	[
LEAF_NODE	1118:26	1118:26	7	]
NAME	1118:19	1118:19	5	module
LEAF_NODE	1118:19	1118:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1118:19	1118:19	5	module = "PixarLogEncode"
ASSIGN	1118:19	1118:30	6	module = "PixarLogEncode"
LVAL	1118:19	1118:19	7	module
NAME	1118:19	1118:19	8	module
LEAF_NODE	1118:19	1118:19	9	module
ASSIGN_OP	1118:28	1118:28	7	=
LEAF_NODE	1118:28	1118:28	8	=
RVAL	1118:30	1118:30	7	"PixarLogEncode"
FIELD	1118:30	1118:30	8	"PixarLogEncode"
LEAF_NODE	1118:30	1118:30	9	"PixarLogEncode"
LEAF_NODE	1118:46	1118:46	4	;
SIMPLE_DECL	1119:1	1119:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1119:1	1119:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1119:1	1119:15	5	TIFFDirectory *
TYPE_NAME	1119:1	1119:1	6	TIFFDirectory
LEAF_NODE	1119:1	1119:1	7	TIFFDirectory
POINTER	1119:15	1119:15	6	*
LEAF_NODE	1119:15	1119:15	7	*
NAME	1119:16	1119:16	5	td
LEAF_NODE	1119:16	1119:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1119:16	1119:16	5	td = & tif -> tif_dir
ASSIGN	1119:16	1119:21	6	td = & tif -> tif_dir
LVAL	1119:16	1119:16	7	td
NAME	1119:16	1119:16	8	td
LEAF_NODE	1119:16	1119:16	9	td
ASSIGN_OP	1119:19	1119:19	7	=
LEAF_NODE	1119:19	1119:19	8	=
RVAL	1119:21	1119:21	7	& tif -> tif_dir
UNARY_EXPR	1119:21	1119:22	8	& tif -> tif_dir
UNARY_OPERATOR	1119:21	1119:21	9	&
LEAF_NODE	1119:21	1119:21	10	&
FIELD	1119:22	1119:27	9	tif -> tif_dir
LEAF_NODE	1119:22	1119:22	10	tif
LEAF_NODE	1119:25	1119:25	10	->
LEAF_NODE	1119:27	1119:27	10	tif_dir
LEAF_NODE	1119:34	1119:34	4	;
SIMPLE_DECL	1120:1	1120:38	3	PixarLogState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	1120:1	1120:16	4	PixarLogState * sp ; sp = EncoderState ( tif )
TYPE	1120:1	1120:15	5	PixarLogState *
TYPE_NAME	1120:1	1120:1	6	PixarLogState
LEAF_NODE	1120:1	1120:1	7	PixarLogState
POINTER	1120:15	1120:15	6	*
LEAF_NODE	1120:15	1120:15	7	*
NAME	1120:16	1120:16	5	sp
LEAF_NODE	1120:16	1120:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1120:16	1120:16	5	sp = EncoderState ( tif )
ASSIGN	1120:16	1120:21	6	sp = EncoderState ( tif )
LVAL	1120:16	1120:16	7	sp
NAME	1120:16	1120:16	8	sp
LEAF_NODE	1120:16	1120:16	9	sp
ASSIGN_OP	1120:19	1120:19	7	=
LEAF_NODE	1120:19	1120:19	8	=
RVAL	1120:21	1120:21	7	EncoderState ( tif )
FUNCTION_CALL	1120:21	1120:37	8	EncoderState ( tif )
CALLEE	1120:21	1120:21	9	EncoderState
LEAF_NODE	1120:21	1120:21	10	EncoderState
LEAF_NODE	1120:33	1120:33	9	(
ARGUMENT	1120:34	1120:34	9	tif
FIELD	1120:34	1120:34	10	tif
LEAF_NODE	1120:34	1120:34	11	tif
LEAF_NODE	1120:37	1120:37	9	)
LEAF_NODE	1120:38	1120:38	4	;
SIMPLE_DECL	1121:1	1121:11	3	tmsize_t i ;
VAR_DECL	1121:1	1121:10	4	tmsize_t i
TYPE	1121:1	1121:1	5	tmsize_t
TYPE_NAME	1121:1	1121:1	6	tmsize_t
LEAF_NODE	1121:1	1121:1	7	tmsize_t
NAME	1121:10	1121:10	5	i
LEAF_NODE	1121:10	1121:10	6	i
LEAF_NODE	1121:11	1121:11	4	;
SIMPLE_DECL	1122:1	1122:11	3	tmsize_t n ;
VAR_DECL	1122:1	1122:10	4	tmsize_t n
TYPE	1122:1	1122:1	5	tmsize_t
TYPE_NAME	1122:1	1122:1	6	tmsize_t
LEAF_NODE	1122:1	1122:1	7	tmsize_t
NAME	1122:10	1122:10	5	n
LEAF_NODE	1122:10	1122:10	6	n
LEAF_NODE	1122:11	1122:11	4	;
SIMPLE_DECL	1123:1	1123:9	3	int llen ;
VAR_DECL	1123:1	1123:5	4	int llen
TYPE	1123:1	1123:1	5	int
TYPE_NAME	1123:1	1123:1	6	int
LEAF_NODE	1123:1	1123:1	7	int
NAME	1123:5	1123:5	5	llen
LEAF_NODE	1123:5	1123:5	6	llen
LEAF_NODE	1123:9	1123:9	4	;
SIMPLE_DECL	1124:1	1124:20	3	unsigned short * up ;
VAR_DECL	1124:1	1124:18	4	unsigned short * up
TYPE	1124:1	1124:16	5	unsigned short *
TYPE_NAME	1124:1	1124:10	6	unsigned short
LEAF_NODE	1124:1	1124:1	7	unsigned
LEAF_NODE	1124:10	1124:10	7	short
POINTER	1124:16	1124:16	6	*
LEAF_NODE	1124:16	1124:16	7	*
NAME	1124:18	1124:18	5	up
LEAF_NODE	1124:18	1124:18	6	up
LEAF_NODE	1124:20	1124:20	4	;
EXPR_STATEMENT	1126:1	1126:9	3	( void ) s ;
EXPR	1126:1	1126:8	4	( void ) s
LEAF_NODE	1126:1	1126:1	5	(
TYPE_NAME	1126:2	1126:2	5	void
LEAF_NODE	1126:2	1126:2	6	void
LEAF_NODE	1126:6	1126:6	5	)
FIELD	1126:8	1126:8	5	s
LEAF_NODE	1126:8	1126:8	6	s
LEAF_NODE	1126:9	1126:9	4	;
SELECTION	1128:1	1128:27	3	
KEYWORD	1128:1	1128:1	4	switch
LEAF_NODE	1128:1	1128:1	5	switch
LEAF_NODE	1128:8	1128:8	4	(
CONDITION	1128:9	1128:9	4	sp -> user_datafmt
EXPR	1128:9	1128:9	5	sp -> user_datafmt
FIELD	1128:9	1128:13	6	sp -> user_datafmt
LEAF_NODE	1128:9	1128:9	7	sp
LEAF_NODE	1128:11	1128:11	7	->
LEAF_NODE	1128:13	1128:13	7	user_datafmt
LEAF_NODE	1128:25	1128:25	4	)
STATEMENTS	1128:27	1146:1	4	
LEAF_NODE	1128:27	1128:27	5	{
STATEMENTS	1129:1	1145:2	5	
LABEL	1129:1	1129:27	6	case PIXARLOGDATAFMT_FLOAT :
LEAF_NODE	1129:1	1129:1	7	case
LEAF_NODE	1129:6	1129:6	7	PIXARLOGDATAFMT_FLOAT
LEAF_NODE	1129:27	1129:27	7	:
EXPR_STATEMENT	1130:2	1130:24	6	n = cc / sizeof ( float ) ;
EXPR	1130:2	1130:2	7	n = cc / sizeof ( float )
ASSIGN	1130:2	1130:6	8	n = cc / sizeof ( float )
LVAL	1130:2	1130:2	9	n
FIELD	1130:2	1130:2	10	n
LEAF_NODE	1130:2	1130:2	11	n
ASSIGN_OP	1130:4	1130:4	9	=
LEAF_NODE	1130:4	1130:4	10	=
RVAL	1130:6	1130:11	9	cc / sizeof ( float )
FIELD	1130:6	1130:6	10	cc
LEAF_NODE	1130:6	1130:6	11	cc
LEAF_NODE	1130:9	1130:9	10	/
FUNCTION_CALL	1130:11	1130:23	10	sizeof ( float )
CALLEE	1130:11	1130:11	11	sizeof
LEAF_NODE	1130:11	1130:11	12	sizeof
LEAF_NODE	1130:17	1130:17	11	(
ARGUMENT	1130:18	1130:18	11	float
FIELD	1130:18	1130:18	12	float
LEAF_NODE	1130:18	1130:18	13	float
LEAF_NODE	1130:23	1130:23	11	)
LEAF_NODE	1130:24	1130:24	7	;
JUMP_STATEMENT	1131:2	1131:7	6	break DESTINATION ;
KEYWORD	1131:2	1131:2	7	break
LEAF_NODE	1131:2	1131:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1131:7	1131:7	7	;
LABEL	1132:1	1132:27	6	case PIXARLOGDATAFMT_16BIT :
LEAF_NODE	1132:1	1132:1	7	case
LEAF_NODE	1132:6	1132:6	7	PIXARLOGDATAFMT_16BIT
LEAF_NODE	1132:27	1132:27	7	:
LABEL	1133:1	1133:32	6	case PIXARLOGDATAFMT_12BITPICIO :
LEAF_NODE	1133:1	1133:1	7	case
LEAF_NODE	1133:6	1133:6	7	PIXARLOGDATAFMT_12BITPICIO
LEAF_NODE	1133:32	1133:32	7	:
LABEL	1134:1	1134:30	6	case PIXARLOGDATAFMT_11BITLOG :
LEAF_NODE	1134:1	1134:1	7	case
LEAF_NODE	1134:6	1134:6	7	PIXARLOGDATAFMT_11BITLOG
LEAF_NODE	1134:30	1134:30	7	:
EXPR_STATEMENT	1135:2	1135:25	6	n = cc / sizeof ( uint16 ) ;
EXPR	1135:2	1135:2	7	n = cc / sizeof ( uint16 )
ASSIGN	1135:2	1135:6	8	n = cc / sizeof ( uint16 )
LVAL	1135:2	1135:2	9	n
FIELD	1135:2	1135:2	10	n
LEAF_NODE	1135:2	1135:2	11	n
ASSIGN_OP	1135:4	1135:4	9	=
LEAF_NODE	1135:4	1135:4	10	=
RVAL	1135:6	1135:11	9	cc / sizeof ( uint16 )
FIELD	1135:6	1135:6	10	cc
LEAF_NODE	1135:6	1135:6	11	cc
LEAF_NODE	1135:9	1135:9	10	/
FUNCTION_CALL	1135:11	1135:24	10	sizeof ( uint16 )
CALLEE	1135:11	1135:11	11	sizeof
LEAF_NODE	1135:11	1135:11	12	sizeof
LEAF_NODE	1135:17	1135:17	11	(
ARGUMENT	1135:18	1135:18	11	uint16
FIELD	1135:18	1135:18	12	uint16
LEAF_NODE	1135:18	1135:18	13	uint16
LEAF_NODE	1135:24	1135:24	11	)
LEAF_NODE	1135:25	1135:25	7	;
JUMP_STATEMENT	1136:2	1136:7	6	break DESTINATION ;
KEYWORD	1136:2	1136:2	7	break
LEAF_NODE	1136:2	1136:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1136:7	1136:7	7	;
LABEL	1137:1	1137:26	6	case PIXARLOGDATAFMT_8BIT :
LEAF_NODE	1137:1	1137:1	7	case
LEAF_NODE	1137:6	1137:6	7	PIXARLOGDATAFMT_8BIT
LEAF_NODE	1137:26	1137:26	7	:
LABEL	1138:1	1138:30	6	case PIXARLOGDATAFMT_8BITABGR :
LEAF_NODE	1138:1	1138:1	7	case
LEAF_NODE	1138:6	1138:6	7	PIXARLOGDATAFMT_8BITABGR
LEAF_NODE	1138:30	1138:30	7	:
EXPR_STATEMENT	1139:2	1139:8	6	n = cc ;
EXPR	1139:2	1139:2	7	n = cc
ASSIGN	1139:2	1139:6	8	n = cc
LVAL	1139:2	1139:2	9	n
FIELD	1139:2	1139:2	10	n
LEAF_NODE	1139:2	1139:2	11	n
ASSIGN_OP	1139:4	1139:4	9	=
LEAF_NODE	1139:4	1139:4	10	=
RVAL	1139:6	1139:6	9	cc
FIELD	1139:6	1139:6	10	cc
LEAF_NODE	1139:6	1139:6	11	cc
LEAF_NODE	1139:8	1139:8	7	;
JUMP_STATEMENT	1140:2	1140:7	6	break DESTINATION ;
KEYWORD	1140:2	1140:2	7	break
LEAF_NODE	1140:2	1140:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1140:7	1140:7	7	;
LABEL	1141:1	1141:8	6	default :
LEAF_NODE	1141:1	1141:1	7	default
LEAF_NODE	1141:8	1141:8	7	:
EXPR_STATEMENT	1142:2	1144:24	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%d bit input not supported in PixarLog" , td -> td_bitspersample ) ;
EXPR	1142:2	1142:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%d bit input not supported in PixarLog" , td -> td_bitspersample )
FUNCTION_CALL	1142:2	1144:23	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%d bit input not supported in PixarLog" , td -> td_bitspersample )
CALLEE	1142:2	1142:2	9	TIFFErrorExt
LEAF_NODE	1142:2	1142:2	10	TIFFErrorExt
LEAF_NODE	1142:14	1142:14	9	(
ARGUMENT	1142:15	1142:15	9	tif -> tif_clientdata
FIELD	1142:15	1142:20	10	tif -> tif_clientdata
LEAF_NODE	1142:15	1142:15	11	tif
LEAF_NODE	1142:18	1142:18	11	->
LEAF_NODE	1142:20	1142:20	11	tif_clientdata
LEAF_NODE	1142:34	1142:34	9	,
ARGUMENT	1142:36	1142:36	9	module
FIELD	1142:36	1142:36	10	module
LEAF_NODE	1142:36	1142:36	11	module
LEAF_NODE	1142:42	1142:42	9	,
ARGUMENT	1143:3	1143:3	9	"%d bit input not supported in PixarLog"
FIELD	1143:3	1143:3	10	"%d bit input not supported in PixarLog"
LEAF_NODE	1143:3	1143:3	11	"%d bit input not supported in PixarLog"
LEAF_NODE	1143:43	1143:43	9	,
ARGUMENT	1144:3	1144:3	9	td -> td_bitspersample
FIELD	1144:3	1144:7	10	td -> td_bitspersample
LEAF_NODE	1144:3	1144:3	11	td
LEAF_NODE	1144:5	1144:5	11	->
LEAF_NODE	1144:7	1144:7	11	td_bitspersample
LEAF_NODE	1144:23	1144:23	9	)
LEAF_NODE	1144:24	1144:24	7	;
JUMP_STATEMENT	1145:2	1145:10	6	return 0 ;
KEYWORD	1145:2	1145:2	7	return
LEAF_NODE	1145:2	1145:2	8	return
DESTINATION	1145:9	1145:9	7	0
EXPR	1145:9	1145:9	8	0
FIELD	1145:9	1145:9	9	0
LEAF_NODE	1145:9	1145:9	10	0
LEAF_NODE	1145:10	1145:10	7	;
LEAF_NODE	1146:1	1146:1	5	}
EXPR_STATEMENT	1148:1	1148:38	3	llen = sp -> stride * td -> td_imagewidth ;
EXPR	1148:1	1148:1	4	llen = sp -> stride * td -> td_imagewidth
ASSIGN	1148:1	1148:8	5	llen = sp -> stride * td -> td_imagewidth
LVAL	1148:1	1148:1	6	llen
FIELD	1148:1	1148:1	7	llen
LEAF_NODE	1148:1	1148:1	8	llen
ASSIGN_OP	1148:6	1148:6	6	=
LEAF_NODE	1148:6	1148:6	7	=
RVAL	1148:8	1148:21	6	sp -> stride * td -> td_imagewidth
FIELD	1148:8	1148:12	7	sp -> stride
LEAF_NODE	1148:8	1148:8	8	sp
LEAF_NODE	1148:10	1148:10	8	->
LEAF_NODE	1148:12	1148:12	8	stride
LEAF_NODE	1148:19	1148:19	7	*
FIELD	1148:21	1148:25	7	td -> td_imagewidth
LEAF_NODE	1148:21	1148:21	8	td
LEAF_NODE	1148:23	1148:23	8	->
LEAF_NODE	1148:25	1148:25	8	td_imagewidth
LEAF_NODE	1148:38	1148:38	4	;
SELECTION	1150:4	1151:4	3	
KEYWORD	1150:4	1150:4	4	if
LEAF_NODE	1150:4	1150:4	5	if
LEAF_NODE	1150:6	1150:6	4	(
CONDITION	1150:8	1150:8	4	n > ( ( tmsize_t ) td -> td_rowsperstrip * llen )
EXPR	1150:8	1150:49	5	n > ( ( tmsize_t ) td -> td_rowsperstrip * llen )
FIELD	1150:8	1150:8	6	n
LEAF_NODE	1150:8	1150:8	7	n
REL_OPERATOR	1150:10	1150:10	6	>
LEAF_NODE	1150:10	1150:10	7	>
LEAF_NODE	1150:12	1150:12	6	(
LEAF_NODE	1150:13	1150:13	6	(
TYPE_NAME	1150:14	1150:14	6	tmsize_t
LEAF_NODE	1150:14	1150:14	7	tmsize_t
LEAF_NODE	1150:22	1150:22	6	)
FIELD	1150:23	1150:27	6	td -> td_rowsperstrip
LEAF_NODE	1150:23	1150:23	7	td
LEAF_NODE	1150:25	1150:25	7	->
LEAF_NODE	1150:27	1150:27	7	td_rowsperstrip
LEAF_NODE	1150:43	1150:43	6	*
FIELD	1150:45	1150:45	6	llen
LEAF_NODE	1150:45	1150:45	7	llen
LEAF_NODE	1150:49	1150:49	6	)
LEAF_NODE	1150:51	1150:51	4	)
STATEMENTS	1151:4	1155:4	4	
LEAF_NODE	1151:4	1151:4	5	{
STATEMENTS	1152:8	1154:8	5	
EXPR_STATEMENT	1152:8	1153:53	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Too many input bytes provided" ) ;
EXPR	1152:8	1152:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Too many input bytes provided" )
FUNCTION_CALL	1152:8	1153:52	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Too many input bytes provided" )
CALLEE	1152:8	1152:8	9	TIFFErrorExt
LEAF_NODE	1152:8	1152:8	10	TIFFErrorExt
LEAF_NODE	1152:20	1152:20	9	(
ARGUMENT	1152:21	1152:21	9	tif -> tif_clientdata
FIELD	1152:21	1152:26	10	tif -> tif_clientdata
LEAF_NODE	1152:21	1152:21	11	tif
LEAF_NODE	1152:24	1152:24	11	->
LEAF_NODE	1152:26	1152:26	11	tif_clientdata
LEAF_NODE	1152:40	1152:40	9	,
ARGUMENT	1152:42	1152:42	9	module
FIELD	1152:42	1152:42	10	module
LEAF_NODE	1152:42	1152:42	11	module
LEAF_NODE	1152:48	1152:48	9	,
ARGUMENT	1153:21	1153:21	9	"Too many input bytes provided"
FIELD	1153:21	1153:21	10	"Too many input bytes provided"
LEAF_NODE	1153:21	1153:21	11	"Too many input bytes provided"
LEAF_NODE	1153:52	1153:52	9	)
LEAF_NODE	1153:53	1153:53	7	;
JUMP_STATEMENT	1154:8	1154:16	6	return 0 ;
KEYWORD	1154:8	1154:8	7	return
LEAF_NODE	1154:8	1154:8	8	return
DESTINATION	1154:15	1154:15	7	0
EXPR	1154:15	1154:15	8	0
FIELD	1154:15	1154:15	9	0
LEAF_NODE	1154:15	1154:15	10	0
LEAF_NODE	1154:16	1154:16	7	;
LEAF_NODE	1155:4	1155:4	5	}
ITERATION	1157:1	1157:58	3	
KEYWORD	1157:1	1157:1	4	for
LEAF_NODE	1157:1	1157:1	5	for
LEAF_NODE	1157:5	1157:5	4	(
FOR_INIT	1157:6	1157:26	4	i = 0 , up = sp -> tbuf ;
EXPR	1157:6	1157:13	5	i = 0 , up = sp -> tbuf
ASSIGN	1157:6	1157:10	6	i = 0
LVAL	1157:6	1157:6	7	i
FIELD	1157:6	1157:6	8	i
LEAF_NODE	1157:6	1157:6	9	i
ASSIGN_OP	1157:8	1157:8	7	=
LEAF_NODE	1157:8	1157:8	8	=
RVAL	1157:10	1157:10	7	0
FIELD	1157:10	1157:10	8	0
LEAF_NODE	1157:10	1157:10	9	0
LEAF_NODE	1157:11	1157:11	6	,
ASSIGN	1157:13	1157:18	6	up = sp -> tbuf
LVAL	1157:13	1157:13	7	up
FIELD	1157:13	1157:13	8	up
LEAF_NODE	1157:13	1157:13	9	up
ASSIGN_OP	1157:16	1157:16	7	=
LEAF_NODE	1157:16	1157:16	8	=
RVAL	1157:18	1157:18	7	sp -> tbuf
FIELD	1157:18	1157:22	8	sp -> tbuf
LEAF_NODE	1157:18	1157:18	9	sp
LEAF_NODE	1157:20	1157:20	9	->
LEAF_NODE	1157:22	1157:22	9	tbuf
LEAF_NODE	1157:26	1157:26	5	;
CONDITION	1157:28	1157:28	4	i < n
EXPR	1157:28	1157:32	5	i < n
FIELD	1157:28	1157:28	6	i
LEAF_NODE	1157:28	1157:28	7	i
REL_OPERATOR	1157:30	1157:30	6	<
LEAF_NODE	1157:30	1157:30	7	<
FIELD	1157:32	1157:32	6	n
LEAF_NODE	1157:32	1157:32	7	n
LEAF_NODE	1157:33	1157:33	4	;
FOR_EXPR	1157:35	1157:35	4	i += llen , up += llen
EXPR	1157:35	1157:46	5	i += llen , up += llen
ASSIGN	1157:35	1157:40	6	i += llen
LVAL	1157:35	1157:35	7	i
FIELD	1157:35	1157:35	8	i
LEAF_NODE	1157:35	1157:35	9	i
ASSIGN_OP	1157:37	1157:37	7	+=
LEAF_NODE	1157:37	1157:37	8	+=
RVAL	1157:40	1157:40	7	llen
FIELD	1157:40	1157:40	8	llen
LEAF_NODE	1157:40	1157:40	9	llen
LEAF_NODE	1157:44	1157:44	6	,
ASSIGN	1157:46	1157:52	6	up += llen
LVAL	1157:46	1157:46	7	up
FIELD	1157:46	1157:46	8	up
LEAF_NODE	1157:46	1157:46	9	up
ASSIGN_OP	1157:49	1157:49	7	+=
LEAF_NODE	1157:49	1157:49	8	+=
RVAL	1157:52	1157:52	7	llen
FIELD	1157:52	1157:52	8	llen
LEAF_NODE	1157:52	1157:52	9	llen
LEAF_NODE	1157:56	1157:56	4	)
STATEMENTS	1157:58	1180:1	4	
LEAF_NODE	1157:58	1157:58	5	{
STATEMENTS	1158:2	1158:2	5	
SELECTION	1158:2	1158:29	6	
KEYWORD	1158:2	1158:2	7	switch
LEAF_NODE	1158:2	1158:2	8	switch
LEAF_NODE	1158:9	1158:9	7	(
CONDITION	1158:10	1158:10	7	sp -> user_datafmt
EXPR	1158:10	1158:10	8	sp -> user_datafmt
FIELD	1158:10	1158:14	9	sp -> user_datafmt
LEAF_NODE	1158:10	1158:10	10	sp
LEAF_NODE	1158:12	1158:12	10	->
LEAF_NODE	1158:14	1158:14	10	user_datafmt
LEAF_NODE	1158:26	1158:26	7	)
STATEMENTS	1158:29	1179:2	7	
LEAF_NODE	1158:29	1158:29	8	{
STATEMENTS	1159:2	1178:3	8	
LABEL	1159:2	1159:28	9	case PIXARLOGDATAFMT_FLOAT :
LEAF_NODE	1159:2	1159:2	10	case
LEAF_NODE	1159:7	1159:7	10	PIXARLOGDATAFMT_FLOAT
LEAF_NODE	1159:28	1159:28	10	:
EXPR_STATEMENT	1160:3	1161:32	9	horizontalDifferenceF ( ( float * ) bp , llen , sp -> stride , up , sp -> FromLT2 ) ;
EXPR	1160:3	1160:3	10	horizontalDifferenceF ( ( float * ) bp , llen , sp -> stride , up , sp -> FromLT2 )
FUNCTION_CALL	1160:3	1161:31	11	horizontalDifferenceF ( ( float * ) bp , llen , sp -> stride , up , sp -> FromLT2 )
CALLEE	1160:3	1160:3	12	horizontalDifferenceF
LEAF_NODE	1160:3	1160:3	13	horizontalDifferenceF
LEAF_NODE	1160:24	1160:24	12	(
ARGUMENT	1160:25	1160:34	12	( float * ) bp
LEAF_NODE	1160:25	1160:25	13	(
TYPE_NAME	1160:26	1160:26	13	float
LEAF_NODE	1160:26	1160:26	14	float
LEAF_NODE	1160:32	1160:32	13	*
LEAF_NODE	1160:33	1160:33	13	)
FIELD	1160:34	1160:34	13	bp
LEAF_NODE	1160:34	1160:34	14	bp
LEAF_NODE	1160:36	1160:36	12	,
ARGUMENT	1160:38	1160:38	12	llen
FIELD	1160:38	1160:38	13	llen
LEAF_NODE	1160:38	1160:38	14	llen
LEAF_NODE	1160:42	1160:42	12	,
ARGUMENT	1161:4	1161:4	12	sp -> stride
FIELD	1161:4	1161:8	13	sp -> stride
LEAF_NODE	1161:4	1161:4	14	sp
LEAF_NODE	1161:6	1161:6	14	->
LEAF_NODE	1161:8	1161:8	14	stride
LEAF_NODE	1161:14	1161:14	12	,
ARGUMENT	1161:16	1161:16	12	up
FIELD	1161:16	1161:16	13	up
LEAF_NODE	1161:16	1161:16	14	up
LEAF_NODE	1161:18	1161:18	12	,
ARGUMENT	1161:20	1161:20	12	sp -> FromLT2
FIELD	1161:20	1161:24	13	sp -> FromLT2
LEAF_NODE	1161:20	1161:20	14	sp
LEAF_NODE	1161:22	1161:22	14	->
LEAF_NODE	1161:24	1161:24	14	FromLT2
LEAF_NODE	1161:31	1161:31	12	)
LEAF_NODE	1161:32	1161:32	10	;
EXPR_STATEMENT	1162:3	1162:29	9	bp += llen * sizeof ( float ) ;
EXPR	1162:3	1162:3	10	bp += llen * sizeof ( float )
ASSIGN	1162:3	1162:9	11	bp += llen * sizeof ( float )
LVAL	1162:3	1162:3	12	bp
FIELD	1162:3	1162:3	13	bp
LEAF_NODE	1162:3	1162:3	14	bp
ASSIGN_OP	1162:6	1162:6	12	+=
LEAF_NODE	1162:6	1162:6	13	+=
RVAL	1162:9	1162:16	12	llen * sizeof ( float )
FIELD	1162:9	1162:9	13	llen
LEAF_NODE	1162:9	1162:9	14	llen
LEAF_NODE	1162:14	1162:14	13	*
FUNCTION_CALL	1162:16	1162:28	13	sizeof ( float )
CALLEE	1162:16	1162:16	14	sizeof
LEAF_NODE	1162:16	1162:16	15	sizeof
LEAF_NODE	1162:22	1162:22	14	(
ARGUMENT	1162:23	1162:23	14	float
FIELD	1162:23	1162:23	15	float
LEAF_NODE	1162:23	1162:23	16	float
LEAF_NODE	1162:28	1162:28	14	)
LEAF_NODE	1162:29	1162:29	10	;
JUMP_STATEMENT	1163:3	1163:8	9	break DESTINATION ;
KEYWORD	1163:3	1163:3	10	break
LEAF_NODE	1163:3	1163:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1163:8	1163:8	10	;
LABEL	1164:2	1164:28	9	case PIXARLOGDATAFMT_16BIT :
LEAF_NODE	1164:2	1164:2	10	case
LEAF_NODE	1164:7	1164:7	10	PIXARLOGDATAFMT_16BIT
LEAF_NODE	1164:28	1164:28	10	:
EXPR_STATEMENT	1165:3	1166:31	9	horizontalDifference16 ( ( uint16 * ) bp , llen , sp -> stride , up , sp -> From14 ) ;
EXPR	1165:3	1165:3	10	horizontalDifference16 ( ( uint16 * ) bp , llen , sp -> stride , up , sp -> From14 )
FUNCTION_CALL	1165:3	1166:30	11	horizontalDifference16 ( ( uint16 * ) bp , llen , sp -> stride , up , sp -> From14 )
CALLEE	1165:3	1165:3	12	horizontalDifference16
LEAF_NODE	1165:3	1165:3	13	horizontalDifference16
LEAF_NODE	1165:25	1165:25	12	(
ARGUMENT	1165:26	1165:36	12	( uint16 * ) bp
LEAF_NODE	1165:26	1165:26	13	(
TYPE_NAME	1165:27	1165:27	13	uint16
LEAF_NODE	1165:27	1165:27	14	uint16
LEAF_NODE	1165:34	1165:34	13	*
LEAF_NODE	1165:35	1165:35	13	)
FIELD	1165:36	1165:36	13	bp
LEAF_NODE	1165:36	1165:36	14	bp
LEAF_NODE	1165:38	1165:38	12	,
ARGUMENT	1165:40	1165:40	12	llen
FIELD	1165:40	1165:40	13	llen
LEAF_NODE	1165:40	1165:40	14	llen
LEAF_NODE	1165:44	1165:44	12	,
ARGUMENT	1166:4	1166:4	12	sp -> stride
FIELD	1166:4	1166:8	13	sp -> stride
LEAF_NODE	1166:4	1166:4	14	sp
LEAF_NODE	1166:6	1166:6	14	->
LEAF_NODE	1166:8	1166:8	14	stride
LEAF_NODE	1166:14	1166:14	12	,
ARGUMENT	1166:16	1166:16	12	up
FIELD	1166:16	1166:16	13	up
LEAF_NODE	1166:16	1166:16	14	up
LEAF_NODE	1166:18	1166:18	12	,
ARGUMENT	1166:20	1166:20	12	sp -> From14
FIELD	1166:20	1166:24	13	sp -> From14
LEAF_NODE	1166:20	1166:20	14	sp
LEAF_NODE	1166:22	1166:22	14	->
LEAF_NODE	1166:24	1166:24	14	From14
LEAF_NODE	1166:30	1166:30	12	)
LEAF_NODE	1166:31	1166:31	10	;
EXPR_STATEMENT	1167:3	1167:30	9	bp += llen * sizeof ( uint16 ) ;
EXPR	1167:3	1167:3	10	bp += llen * sizeof ( uint16 )
ASSIGN	1167:3	1167:9	11	bp += llen * sizeof ( uint16 )
LVAL	1167:3	1167:3	12	bp
FIELD	1167:3	1167:3	13	bp
LEAF_NODE	1167:3	1167:3	14	bp
ASSIGN_OP	1167:6	1167:6	12	+=
LEAF_NODE	1167:6	1167:6	13	+=
RVAL	1167:9	1167:16	12	llen * sizeof ( uint16 )
FIELD	1167:9	1167:9	13	llen
LEAF_NODE	1167:9	1167:9	14	llen
LEAF_NODE	1167:14	1167:14	13	*
FUNCTION_CALL	1167:16	1167:29	13	sizeof ( uint16 )
CALLEE	1167:16	1167:16	14	sizeof
LEAF_NODE	1167:16	1167:16	15	sizeof
LEAF_NODE	1167:22	1167:22	14	(
ARGUMENT	1167:23	1167:23	14	uint16
FIELD	1167:23	1167:23	15	uint16
LEAF_NODE	1167:23	1167:23	16	uint16
LEAF_NODE	1167:29	1167:29	14	)
LEAF_NODE	1167:30	1167:30	10	;
JUMP_STATEMENT	1168:3	1168:8	9	break DESTINATION ;
KEYWORD	1168:3	1168:3	10	break
LEAF_NODE	1168:3	1168:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1168:8	1168:8	10	;
LABEL	1169:2	1169:27	9	case PIXARLOGDATAFMT_8BIT :
LEAF_NODE	1169:2	1169:2	10	case
LEAF_NODE	1169:7	1169:7	10	PIXARLOGDATAFMT_8BIT
LEAF_NODE	1169:27	1169:27	10	:
EXPR_STATEMENT	1170:3	1171:30	9	horizontalDifference8 ( ( unsigned char * ) bp , llen , sp -> stride , up , sp -> From8 ) ;
EXPR	1170:3	1170:3	10	horizontalDifference8 ( ( unsigned char * ) bp , llen , sp -> stride , up , sp -> From8 )
FUNCTION_CALL	1170:3	1171:29	11	horizontalDifference8 ( ( unsigned char * ) bp , llen , sp -> stride , up , sp -> From8 )
CALLEE	1170:3	1170:3	12	horizontalDifference8
LEAF_NODE	1170:3	1170:3	13	horizontalDifference8
LEAF_NODE	1170:24	1170:24	12	(
ARGUMENT	1170:25	1170:42	12	( unsigned char * ) bp
LEAF_NODE	1170:25	1170:25	13	(
TYPE_NAME	1170:26	1170:35	13	unsigned char
LEAF_NODE	1170:26	1170:26	14	unsigned
LEAF_NODE	1170:35	1170:35	14	char
LEAF_NODE	1170:40	1170:40	13	*
LEAF_NODE	1170:41	1170:41	13	)
FIELD	1170:42	1170:42	13	bp
LEAF_NODE	1170:42	1170:42	14	bp
LEAF_NODE	1170:44	1170:44	12	,
ARGUMENT	1170:46	1170:46	12	llen
FIELD	1170:46	1170:46	13	llen
LEAF_NODE	1170:46	1170:46	14	llen
LEAF_NODE	1170:50	1170:50	12	,
ARGUMENT	1171:4	1171:4	12	sp -> stride
FIELD	1171:4	1171:8	13	sp -> stride
LEAF_NODE	1171:4	1171:4	14	sp
LEAF_NODE	1171:6	1171:6	14	->
LEAF_NODE	1171:8	1171:8	14	stride
LEAF_NODE	1171:14	1171:14	12	,
ARGUMENT	1171:16	1171:16	12	up
FIELD	1171:16	1171:16	13	up
LEAF_NODE	1171:16	1171:16	14	up
LEAF_NODE	1171:18	1171:18	12	,
ARGUMENT	1171:20	1171:20	12	sp -> From8
FIELD	1171:20	1171:24	13	sp -> From8
LEAF_NODE	1171:20	1171:20	14	sp
LEAF_NODE	1171:22	1171:22	14	->
LEAF_NODE	1171:24	1171:24	14	From8
LEAF_NODE	1171:29	1171:29	12	)
LEAF_NODE	1171:30	1171:30	10	;
LEAF_NODE	1172:3	1172:3	9	bp
LEAF_NODE	1172:6	1172:6	9	+=
LEAF_NODE	1172:9	1172:9	9	llen
LEAF_NODE	1172:14	1172:14	9	*
LEAF_NODE	1172:16	1172:16	9	sizeof
LEAF_NODE	1172:22	1172:22	9	(
LEAF_NODE	1172:23	1172:23	9	unsigned
LEAF_NODE	1172:32	1172:32	9	char
LEAF_NODE	1172:36	1172:36	9	)
LEAF_NODE	1172:37	1172:37	9	;
JUMP_STATEMENT	1173:3	1173:8	9	break DESTINATION ;
KEYWORD	1173:3	1173:3	10	break
LEAF_NODE	1173:3	1173:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1173:8	1173:8	10	;
LABEL	1174:2	1174:9	9	default :
LEAF_NODE	1174:2	1174:2	10	default
LEAF_NODE	1174:9	1174:9	10	:
EXPR_STATEMENT	1175:3	1177:25	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%d bit input not supported in PixarLog" , td -> td_bitspersample ) ;
EXPR	1175:3	1175:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%d bit input not supported in PixarLog" , td -> td_bitspersample )
FUNCTION_CALL	1175:3	1177:24	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%d bit input not supported in PixarLog" , td -> td_bitspersample )
CALLEE	1175:3	1175:3	12	TIFFErrorExt
LEAF_NODE	1175:3	1175:3	13	TIFFErrorExt
LEAF_NODE	1175:15	1175:15	12	(
ARGUMENT	1175:16	1175:16	12	tif -> tif_clientdata
FIELD	1175:16	1175:21	13	tif -> tif_clientdata
LEAF_NODE	1175:16	1175:16	14	tif
LEAF_NODE	1175:19	1175:19	14	->
LEAF_NODE	1175:21	1175:21	14	tif_clientdata
LEAF_NODE	1175:35	1175:35	12	,
ARGUMENT	1175:37	1175:37	12	module
FIELD	1175:37	1175:37	13	module
LEAF_NODE	1175:37	1175:37	14	module
LEAF_NODE	1175:43	1175:43	12	,
ARGUMENT	1176:4	1176:4	12	"%d bit input not supported in PixarLog"
FIELD	1176:4	1176:4	13	"%d bit input not supported in PixarLog"
LEAF_NODE	1176:4	1176:4	14	"%d bit input not supported in PixarLog"
LEAF_NODE	1176:44	1176:44	12	,
ARGUMENT	1177:4	1177:4	12	td -> td_bitspersample
FIELD	1177:4	1177:8	13	td -> td_bitspersample
LEAF_NODE	1177:4	1177:4	14	td
LEAF_NODE	1177:6	1177:6	14	->
LEAF_NODE	1177:8	1177:8	14	td_bitspersample
LEAF_NODE	1177:24	1177:24	12	)
LEAF_NODE	1177:25	1177:25	10	;
JUMP_STATEMENT	1178:3	1178:11	9	return 0 ;
KEYWORD	1178:3	1178:3	10	return
LEAF_NODE	1178:3	1178:3	11	return
DESTINATION	1178:10	1178:10	10	0
EXPR	1178:10	1178:10	11	0
FIELD	1178:10	1178:10	12	0
LEAF_NODE	1178:10	1178:10	13	0
LEAF_NODE	1178:11	1178:11	10	;
LEAF_NODE	1179:2	1179:2	8	}
LEAF_NODE	1180:1	1180:1	5	}
EXPR_STATEMENT	1182:1	1182:48	3	sp -> stream . next_in = ( unsigned char * ) sp -> tbuf ;
EXPR	1182:1	1182:1	4	sp -> stream . next_in = ( unsigned char * ) sp -> tbuf
ASSIGN	1182:1	1182:22	5	sp -> stream . next_in = ( unsigned char * ) sp -> tbuf
LVAL	1182:1	1182:1	6	sp -> stream . next_in
FIELD	1182:1	1182:12	7	sp -> stream . next_in
LEAF_NODE	1182:1	1182:1	8	sp
LEAF_NODE	1182:3	1182:3	8	->
LEAF_NODE	1182:5	1182:5	8	stream
LEAF_NODE	1182:11	1182:11	8	.
LEAF_NODE	1182:12	1182:12	8	next_in
ASSIGN_OP	1182:20	1182:20	6	=
LEAF_NODE	1182:20	1182:20	7	=
RVAL	1182:22	1182:40	6	( unsigned char * ) sp -> tbuf
LEAF_NODE	1182:22	1182:22	7	(
TYPE_NAME	1182:23	1182:32	7	unsigned char
LEAF_NODE	1182:23	1182:23	8	unsigned
LEAF_NODE	1182:32	1182:32	8	char
LEAF_NODE	1182:37	1182:37	7	*
LEAF_NODE	1182:38	1182:38	7	)
FIELD	1182:40	1182:44	7	sp -> tbuf
LEAF_NODE	1182:40	1182:40	8	sp
LEAF_NODE	1182:42	1182:42	8	->
LEAF_NODE	1182:44	1182:44	8	tbuf
LEAF_NODE	1182:48	1182:48	4	;
EXPR_STATEMENT	1183:1	1183:39	3	assert ( sizeof ( sp -> stream . avail_in ) == 4 ) ;
EXPR	1183:1	1183:1	4	assert ( sizeof ( sp -> stream . avail_in ) == 4 )
FUNCTION_CALL	1183:1	1183:38	5	assert ( sizeof ( sp -> stream . avail_in ) == 4 )
CALLEE	1183:1	1183:1	6	assert
LEAF_NODE	1183:1	1183:1	7	assert
LEAF_NODE	1183:7	1183:7	6	(
ARGUMENT	1183:8	1183:37	6	sizeof ( sp -> stream . avail_in ) == 4
FUNCTION_CALL	1183:8	1183:34	7	sizeof ( sp -> stream . avail_in )
CALLEE	1183:8	1183:8	8	sizeof
LEAF_NODE	1183:8	1183:8	9	sizeof
LEAF_NODE	1183:14	1183:14	8	(
ARGUMENT	1183:15	1183:15	8	sp -> stream . avail_in
FIELD	1183:15	1183:26	9	sp -> stream . avail_in
LEAF_NODE	1183:15	1183:15	10	sp
LEAF_NODE	1183:17	1183:17	10	->
LEAF_NODE	1183:19	1183:19	10	stream
LEAF_NODE	1183:25	1183:25	10	.
LEAF_NODE	1183:26	1183:26	10	avail_in
LEAF_NODE	1183:34	1183:34	8	)
EQ_OPERATOR	1183:35	1183:35	7	==
LEAF_NODE	1183:35	1183:35	8	==
FIELD	1183:37	1183:37	7	4
LEAF_NODE	1183:37	1183:37	8	4
LEAF_NODE	1183:38	1183:38	6	)
LEAF_NODE	1183:39	1183:39	4	;
EXPR_STATEMENT	1187:1	1187:50	3	sp -> stream . avail_in = ( uInt ) ( n * sizeof ( uint16 ) ) ;
EXPR	1187:1	1187:1	4	sp -> stream . avail_in = ( uInt ) ( n * sizeof ( uint16 ) )
ASSIGN	1187:1	1187:23	5	sp -> stream . avail_in = ( uInt ) ( n * sizeof ( uint16 ) )
LVAL	1187:1	1187:1	6	sp -> stream . avail_in
FIELD	1187:1	1187:12	7	sp -> stream . avail_in
LEAF_NODE	1187:1	1187:1	8	sp
LEAF_NODE	1187:3	1187:3	8	->
LEAF_NODE	1187:5	1187:5	8	stream
LEAF_NODE	1187:11	1187:11	8	.
LEAF_NODE	1187:12	1187:12	8	avail_in
ASSIGN_OP	1187:21	1187:21	6	=
LEAF_NODE	1187:21	1187:21	7	=
RVAL	1187:23	1187:49	6	( uInt ) ( n * sizeof ( uint16 ) )
LEAF_NODE	1187:23	1187:23	7	(
TYPE_NAME	1187:24	1187:24	7	uInt
LEAF_NODE	1187:24	1187:24	8	uInt
LEAF_NODE	1187:28	1187:28	7	)
LEAF_NODE	1187:30	1187:30	7	(
FIELD	1187:31	1187:31	7	n
LEAF_NODE	1187:31	1187:31	8	n
LEAF_NODE	1187:33	1187:33	7	*
FUNCTION_CALL	1187:35	1187:48	7	sizeof ( uint16 )
CALLEE	1187:35	1187:35	8	sizeof
LEAF_NODE	1187:35	1187:35	9	sizeof
LEAF_NODE	1187:41	1187:41	8	(
ARGUMENT	1187:42	1187:42	8	uint16
FIELD	1187:42	1187:42	9	uint16
LEAF_NODE	1187:42	1187:42	10	uint16
LEAF_NODE	1187:48	1187:48	8	)
LEAF_NODE	1187:49	1187:49	7	)
LEAF_NODE	1187:50	1187:50	4	;
SELECTION	1188:1	1189:1	3	
KEYWORD	1188:1	1188:1	4	if
LEAF_NODE	1188:1	1188:1	5	if
LEAF_NODE	1188:4	1188:4	4	(
CONDITION	1188:5	1188:5	4	( sp -> stream . avail_in / sizeof ( uint16 ) ) != ( uInt ) n
EXPR	1188:5	1188:54	5	( sp -> stream . avail_in / sizeof ( uint16 ) ) != ( uInt ) n
LEAF_NODE	1188:5	1188:5	6	(
FIELD	1188:6	1188:17	6	sp -> stream . avail_in
LEAF_NODE	1188:6	1188:6	7	sp
LEAF_NODE	1188:8	1188:8	7	->
LEAF_NODE	1188:10	1188:10	7	stream
LEAF_NODE	1188:16	1188:16	7	.
LEAF_NODE	1188:17	1188:17	7	avail_in
LEAF_NODE	1188:26	1188:26	6	/
FUNCTION_CALL	1188:28	1188:41	6	sizeof ( uint16 )
CALLEE	1188:28	1188:28	7	sizeof
LEAF_NODE	1188:28	1188:28	8	sizeof
LEAF_NODE	1188:34	1188:34	7	(
ARGUMENT	1188:35	1188:35	7	uint16
FIELD	1188:35	1188:35	8	uint16
LEAF_NODE	1188:35	1188:35	9	uint16
LEAF_NODE	1188:41	1188:41	7	)
LEAF_NODE	1188:42	1188:42	6	)
EQ_OPERATOR	1188:44	1188:44	6	!=
LEAF_NODE	1188:44	1188:44	7	!=
LEAF_NODE	1188:47	1188:47	6	(
TYPE_NAME	1188:48	1188:48	6	uInt
LEAF_NODE	1188:48	1188:48	7	uInt
LEAF_NODE	1188:52	1188:52	6	)
FIELD	1188:54	1188:54	6	n
LEAF_NODE	1188:54	1188:54	7	n
LEAF_NODE	1188:55	1188:55	4	)
STATEMENTS	1189:1	1193:1	4	
LEAF_NODE	1189:1	1189:1	5	{
STATEMENTS	1190:2	1192:2	5	
EXPR_STATEMENT	1190:2	1191:50	6	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" ) ;
EXPR	1190:2	1190:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" )
FUNCTION_CALL	1190:2	1191:49	8	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib cannot deal with buffers this size" )
CALLEE	1190:2	1190:2	9	TIFFErrorExt
LEAF_NODE	1190:2	1190:2	10	TIFFErrorExt
LEAF_NODE	1190:14	1190:14	9	(
ARGUMENT	1190:15	1190:15	9	tif -> tif_clientdata
FIELD	1190:15	1190:20	10	tif -> tif_clientdata
LEAF_NODE	1190:15	1190:15	11	tif
LEAF_NODE	1190:18	1190:18	11	->
LEAF_NODE	1190:20	1190:20	11	tif_clientdata
LEAF_NODE	1190:34	1190:34	9	,
ARGUMENT	1190:36	1190:36	9	module
FIELD	1190:36	1190:36	10	module
LEAF_NODE	1190:36	1190:36	11	module
LEAF_NODE	1190:42	1190:42	9	,
ARGUMENT	1191:8	1191:8	9	"ZLib cannot deal with buffers this size"
FIELD	1191:8	1191:8	10	"ZLib cannot deal with buffers this size"
LEAF_NODE	1191:8	1191:8	11	"ZLib cannot deal with buffers this size"
LEAF_NODE	1191:49	1191:49	9	)
LEAF_NODE	1191:50	1191:50	7	;
JUMP_STATEMENT	1192:2	1192:12	6	return ( 0 ) ;
KEYWORD	1192:2	1192:2	7	return
LEAF_NODE	1192:2	1192:2	8	return
DESTINATION	1192:9	1192:9	7	( 0 )
EXPR	1192:9	1192:11	8	( 0 )
LEAF_NODE	1192:9	1192:9	9	(
FIELD	1192:10	1192:10	9	0
LEAF_NODE	1192:10	1192:10	10	0
LEAF_NODE	1192:11	1192:11	9	)
LEAF_NODE	1192:12	1192:12	7	;
LEAF_NODE	1193:1	1193:1	5	}
ITERATION	1195:1	1195:4	3	
KEYWORD	1195:1	1195:1	4	do
LEAF_NODE	1195:1	1195:1	5	do
LEAF_NODE	1207:9	1207:9	4	(
CONDITION	1207:10	1207:10	4	sp -> stream . avail_in > 0
EXPR	1207:10	1207:32	5	sp -> stream . avail_in > 0
FIELD	1207:10	1207:21	6	sp -> stream . avail_in
LEAF_NODE	1207:10	1207:10	7	sp
LEAF_NODE	1207:12	1207:12	7	->
LEAF_NODE	1207:14	1207:14	7	stream
LEAF_NODE	1207:20	1207:20	7	.
LEAF_NODE	1207:21	1207:21	7	avail_in
REL_OPERATOR	1207:30	1207:30	6	>
LEAF_NODE	1207:30	1207:30	7	>
FIELD	1207:32	1207:32	6	0
LEAF_NODE	1207:32	1207:32	7	0
LEAF_NODE	1207:33	1207:33	4	)
STATEMENTS	1195:4	1207:1	4	
LEAF_NODE	1195:4	1195:4	5	{
STATEMENTS	1196:2	1201:2	5	
SELECTION	1196:2	1196:48	6	
KEYWORD	1196:2	1196:2	7	if
LEAF_NODE	1196:2	1196:2	8	if
LEAF_NODE	1196:5	1196:5	7	(
CONDITION	1196:6	1196:6	7	deflate ( & sp -> stream , Z_NO_FLUSH ) != Z_OK
EXPR	1196:6	1196:42	8	deflate ( & sp -> stream , Z_NO_FLUSH ) != Z_OK
FUNCTION_CALL	1196:6	1196:37	9	deflate ( & sp -> stream , Z_NO_FLUSH )
CALLEE	1196:6	1196:6	10	deflate
LEAF_NODE	1196:6	1196:6	11	deflate
LEAF_NODE	1196:13	1196:13	10	(
ARGUMENT	1196:14	1196:14	10	& sp -> stream
UNARY_EXPR	1196:14	1196:15	11	& sp -> stream
UNARY_OPERATOR	1196:14	1196:14	12	&
LEAF_NODE	1196:14	1196:14	13	&
FIELD	1196:15	1196:19	12	sp -> stream
LEAF_NODE	1196:15	1196:15	13	sp
LEAF_NODE	1196:17	1196:17	13	->
LEAF_NODE	1196:19	1196:19	13	stream
LEAF_NODE	1196:25	1196:25	10	,
ARGUMENT	1196:27	1196:27	10	Z_NO_FLUSH
FIELD	1196:27	1196:27	11	Z_NO_FLUSH
LEAF_NODE	1196:27	1196:27	12	Z_NO_FLUSH
LEAF_NODE	1196:37	1196:37	10	)
EQ_OPERATOR	1196:39	1196:39	9	!=
LEAF_NODE	1196:39	1196:39	10	!=
FIELD	1196:42	1196:42	9	Z_OK
LEAF_NODE	1196:42	1196:42	10	Z_OK
LEAF_NODE	1196:46	1196:46	7	)
STATEMENTS	1196:48	1200:2	7	
LEAF_NODE	1196:48	1196:48	8	{
STATEMENTS	1197:3	1199:3	8	
EXPR_STATEMENT	1197:3	1198:50	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Encoder error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" ) ;
EXPR	1197:3	1197:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Encoder error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
FUNCTION_CALL	1197:3	1198:49	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Encoder error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
CALLEE	1197:3	1197:3	12	TIFFErrorExt
LEAF_NODE	1197:3	1197:3	13	TIFFErrorExt
LEAF_NODE	1197:15	1197:15	12	(
ARGUMENT	1197:16	1197:16	12	tif -> tif_clientdata
FIELD	1197:16	1197:21	13	tif -> tif_clientdata
LEAF_NODE	1197:16	1197:16	14	tif
LEAF_NODE	1197:19	1197:19	14	->
LEAF_NODE	1197:21	1197:21	14	tif_clientdata
LEAF_NODE	1197:35	1197:35	12	,
ARGUMENT	1197:37	1197:37	12	module
FIELD	1197:37	1197:37	13	module
LEAF_NODE	1197:37	1197:37	14	module
LEAF_NODE	1197:43	1197:43	12	,
ARGUMENT	1197:45	1197:45	12	"Encoder error: %s"
FIELD	1197:45	1197:45	13	"Encoder error: %s"
LEAF_NODE	1197:45	1197:45	14	"Encoder error: %s"
LEAF_NODE	1197:64	1197:64	12	,
ARGUMENT	1198:7	1198:7	12	sp -> stream . msg ? sp -> stream . msg : "(null)"
COND_EXPR	1198:7	1198:41	13	sp -> stream . msg ? sp -> stream . msg : "(null)"
CONDITION	1198:7	1198:7	14	sp -> stream . msg
FIELD	1198:7	1198:18	15	sp -> stream . msg
LEAF_NODE	1198:7	1198:7	16	sp
LEAF_NODE	1198:9	1198:9	16	->
LEAF_NODE	1198:11	1198:11	16	stream
LEAF_NODE	1198:17	1198:17	16	.
LEAF_NODE	1198:18	1198:18	16	msg
LEAF_NODE	1198:22	1198:22	14	?
EXPR	1198:24	1198:24	14	sp -> stream . msg
FIELD	1198:24	1198:35	15	sp -> stream . msg
LEAF_NODE	1198:24	1198:24	16	sp
LEAF_NODE	1198:26	1198:26	16	->
LEAF_NODE	1198:28	1198:28	16	stream
LEAF_NODE	1198:34	1198:34	16	.
LEAF_NODE	1198:35	1198:35	16	msg
LEAF_NODE	1198:39	1198:39	14	:
FIELD	1198:41	1198:41	14	"(null)"
LEAF_NODE	1198:41	1198:41	15	"(null)"
LEAF_NODE	1198:49	1198:49	12	)
LEAF_NODE	1198:50	1198:50	10	;
JUMP_STATEMENT	1199:3	1199:13	9	return ( 0 ) ;
KEYWORD	1199:3	1199:3	10	return
LEAF_NODE	1199:3	1199:3	11	return
DESTINATION	1199:10	1199:10	10	( 0 )
EXPR	1199:10	1199:12	11	( 0 )
LEAF_NODE	1199:10	1199:10	12	(
FIELD	1199:11	1199:11	12	0
LEAF_NODE	1199:11	1199:11	13	0
LEAF_NODE	1199:12	1199:12	12	)
LEAF_NODE	1199:13	1199:13	10	;
LEAF_NODE	1200:2	1200:2	8	}
SELECTION	1201:2	1201:33	6	
KEYWORD	1201:2	1201:2	7	if
LEAF_NODE	1201:2	1201:2	8	if
LEAF_NODE	1201:5	1201:5	7	(
CONDITION	1201:6	1201:6	7	sp -> stream . avail_out == 0
EXPR	1201:6	1201:30	8	sp -> stream . avail_out == 0
FIELD	1201:6	1201:17	9	sp -> stream . avail_out
LEAF_NODE	1201:6	1201:6	10	sp
LEAF_NODE	1201:8	1201:8	10	->
LEAF_NODE	1201:10	1201:10	10	stream
LEAF_NODE	1201:16	1201:16	10	.
LEAF_NODE	1201:17	1201:17	10	avail_out
EQ_OPERATOR	1201:27	1201:27	9	==
LEAF_NODE	1201:27	1201:27	10	==
FIELD	1201:30	1201:30	9	0
LEAF_NODE	1201:30	1201:30	10	0
LEAF_NODE	1201:31	1201:31	7	)
STATEMENTS	1201:33	1206:2	7	
LEAF_NODE	1201:33	1201:33	8	{
STATEMENTS	1202:3	1205:3	8	
EXPR_STATEMENT	1202:3	1202:40	9	tif -> tif_rawcc = tif -> tif_rawdatasize ;
EXPR	1202:3	1202:3	10	tif -> tif_rawcc = tif -> tif_rawdatasize
ASSIGN	1202:3	1202:20	11	tif -> tif_rawcc = tif -> tif_rawdatasize
LVAL	1202:3	1202:3	12	tif -> tif_rawcc
FIELD	1202:3	1202:8	13	tif -> tif_rawcc
LEAF_NODE	1202:3	1202:3	14	tif
LEAF_NODE	1202:6	1202:6	14	->
LEAF_NODE	1202:8	1202:8	14	tif_rawcc
ASSIGN_OP	1202:18	1202:18	12	=
LEAF_NODE	1202:18	1202:18	13	=
RVAL	1202:20	1202:20	12	tif -> tif_rawdatasize
FIELD	1202:20	1202:25	13	tif -> tif_rawdatasize
LEAF_NODE	1202:20	1202:20	14	tif
LEAF_NODE	1202:23	1202:23	14	->
LEAF_NODE	1202:25	1202:25	14	tif_rawdatasize
LEAF_NODE	1202:40	1202:40	10	;
EXPR_STATEMENT	1203:3	1203:22	9	TIFFFlushData1 ( tif ) ;
EXPR	1203:3	1203:3	10	TIFFFlushData1 ( tif )
FUNCTION_CALL	1203:3	1203:21	11	TIFFFlushData1 ( tif )
CALLEE	1203:3	1203:3	12	TIFFFlushData1
LEAF_NODE	1203:3	1203:3	13	TIFFFlushData1
LEAF_NODE	1203:17	1203:17	12	(
ARGUMENT	1203:18	1203:18	12	tif
FIELD	1203:18	1203:18	13	tif
LEAF_NODE	1203:18	1203:18	14	tif
LEAF_NODE	1203:21	1203:21	12	)
LEAF_NODE	1203:22	1203:22	10	;
EXPR_STATEMENT	1204:3	1204:41	9	sp -> stream . next_out = tif -> tif_rawdata ;
EXPR	1204:3	1204:3	10	sp -> stream . next_out = tif -> tif_rawdata
ASSIGN	1204:3	1204:25	11	sp -> stream . next_out = tif -> tif_rawdata
LVAL	1204:3	1204:3	12	sp -> stream . next_out
FIELD	1204:3	1204:14	13	sp -> stream . next_out
LEAF_NODE	1204:3	1204:3	14	sp
LEAF_NODE	1204:5	1204:5	14	->
LEAF_NODE	1204:7	1204:7	14	stream
LEAF_NODE	1204:13	1204:13	14	.
LEAF_NODE	1204:14	1204:14	14	next_out
ASSIGN_OP	1204:23	1204:23	12	=
LEAF_NODE	1204:23	1204:23	13	=
RVAL	1204:25	1204:25	12	tif -> tif_rawdata
FIELD	1204:25	1204:30	13	tif -> tif_rawdata
LEAF_NODE	1204:25	1204:25	14	tif
LEAF_NODE	1204:28	1204:28	14	->
LEAF_NODE	1204:30	1204:30	14	tif_rawdata
LEAF_NODE	1204:41	1204:41	10	;
EXPR_STATEMENT	1205:3	1205:53	9	sp -> stream . avail_out = ( uInt ) tif -> tif_rawdatasize ;
EXPR	1205:3	1205:3	10	sp -> stream . avail_out = ( uInt ) tif -> tif_rawdatasize
ASSIGN	1205:3	1205:26	11	sp -> stream . avail_out = ( uInt ) tif -> tif_rawdatasize
LVAL	1205:3	1205:3	12	sp -> stream . avail_out
FIELD	1205:3	1205:14	13	sp -> stream . avail_out
LEAF_NODE	1205:3	1205:3	14	sp
LEAF_NODE	1205:5	1205:5	14	->
LEAF_NODE	1205:7	1205:7	14	stream
LEAF_NODE	1205:13	1205:13	14	.
LEAF_NODE	1205:14	1205:14	14	avail_out
ASSIGN_OP	1205:24	1205:24	12	=
LEAF_NODE	1205:24	1205:24	13	=
RVAL	1205:26	1205:33	12	( uInt ) tif -> tif_rawdatasize
LEAF_NODE	1205:26	1205:26	13	(
TYPE_NAME	1205:27	1205:27	13	uInt
LEAF_NODE	1205:27	1205:27	14	uInt
LEAF_NODE	1205:31	1205:31	13	)
FIELD	1205:33	1205:38	13	tif -> tif_rawdatasize
LEAF_NODE	1205:33	1205:33	14	tif
LEAF_NODE	1205:36	1205:36	14	->
LEAF_NODE	1205:38	1205:38	14	tif_rawdatasize
LEAF_NODE	1205:53	1205:53	10	;
LEAF_NODE	1206:2	1206:2	8	}
LEAF_NODE	1207:1	1207:1	5	}
LEAF_NODE	1207:34	1207:34	3	;
JUMP_STATEMENT	1208:1	1208:11	3	return ( 1 ) ;
KEYWORD	1208:1	1208:1	4	return
LEAF_NODE	1208:1	1208:1	5	return
DESTINATION	1208:8	1208:8	4	( 1 )
EXPR	1208:8	1208:10	5	( 1 )
LEAF_NODE	1208:8	1208:8	6	(
FIELD	1208:9	1208:9	6	1
LEAF_NODE	1208:9	1208:9	7	1
LEAF_NODE	1208:10	1208:10	6	)
LEAF_NODE	1208:11	1208:11	4	;
LEAF_NODE	1209:0	1209:0	2	}
FUNCTION_DEF	1216:0	1245:0	1	
RETURN_TYPE	1216:0	1216:7	2	static int
LEAF_NODE	1216:0	1216:0	3	static
TYPE_NAME	1216:7	1216:7	3	int
LEAF_NODE	1216:7	1216:7	4	int
FUNCTION_NAME	1217:0	1217:0	2	PixarLogPostEncode
LEAF_NODE	1217:0	1217:0	3	PixarLogPostEncode
PARAMETER_LIST	1217:18	1217:28	2	( TIFF * tif )
LEAF_NODE	1217:18	1217:18	3	(
PARAMETER_DECL	1217:19	1217:25	3	TIFF * tif
TYPE	1217:19	1217:23	4	TIFF *
TYPE_NAME	1217:19	1217:19	5	TIFF
LEAF_NODE	1217:19	1217:19	6	TIFF
POINTER	1217:23	1217:23	5	*
LEAF_NODE	1217:23	1217:23	6	*
NAME	1217:25	1217:25	4	tif
LEAF_NODE	1217:25	1217:25	5	tif
LEAF_NODE	1217:28	1217:28	3	)
LEAF_NODE	1218:0	1218:0	2	{
STATEMENTS	1219:1	1244:1	2	
LEAF_NODE	1219:1	1219:1	3	static
SIMPLE_DECL	1219:8	1219:50	3	const char [ ] module ; module = "PixarLogPostEncode" ;
VAR_DECL	1219:8	1219:19	4	const char [ ] module ; module = "PixarLogPostEncode"
TYPE	1219:8	1219:25	5	const char [ ]
TYPE_NAME	1219:8	1219:14	6	const char
LEAF_NODE	1219:8	1219:8	7	const
LEAF_NODE	1219:14	1219:14	7	char
TYPE_SUFFIX	1219:25	1219:26	6	[ ]
LEAF_NODE	1219:25	1219:25	7	[
LEAF_NODE	1219:26	1219:26	7	]
NAME	1219:19	1219:19	5	module
LEAF_NODE	1219:19	1219:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1219:19	1219:19	5	module = "PixarLogPostEncode"
ASSIGN	1219:19	1219:30	6	module = "PixarLogPostEncode"
LVAL	1219:19	1219:19	7	module
NAME	1219:19	1219:19	8	module
LEAF_NODE	1219:19	1219:19	9	module
ASSIGN_OP	1219:28	1219:28	7	=
LEAF_NODE	1219:28	1219:28	8	=
RVAL	1219:30	1219:30	7	"PixarLogPostEncode"
FIELD	1219:30	1219:30	8	"PixarLogPostEncode"
LEAF_NODE	1219:30	1219:30	9	"PixarLogPostEncode"
LEAF_NODE	1219:50	1219:50	4	;
SIMPLE_DECL	1220:1	1220:38	3	PixarLogState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	1220:1	1220:16	4	PixarLogState * sp ; sp = EncoderState ( tif )
TYPE	1220:1	1220:15	5	PixarLogState *
TYPE_NAME	1220:1	1220:1	6	PixarLogState
LEAF_NODE	1220:1	1220:1	7	PixarLogState
POINTER	1220:15	1220:15	6	*
LEAF_NODE	1220:15	1220:15	7	*
NAME	1220:16	1220:16	5	sp
LEAF_NODE	1220:16	1220:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1220:16	1220:16	5	sp = EncoderState ( tif )
ASSIGN	1220:16	1220:21	6	sp = EncoderState ( tif )
LVAL	1220:16	1220:16	7	sp
NAME	1220:16	1220:16	8	sp
LEAF_NODE	1220:16	1220:16	9	sp
ASSIGN_OP	1220:19	1220:19	7	=
LEAF_NODE	1220:19	1220:19	8	=
RVAL	1220:21	1220:21	7	EncoderState ( tif )
FUNCTION_CALL	1220:21	1220:37	8	EncoderState ( tif )
CALLEE	1220:21	1220:21	9	EncoderState
LEAF_NODE	1220:21	1220:21	10	EncoderState
LEAF_NODE	1220:33	1220:33	9	(
ARGUMENT	1220:34	1220:34	9	tif
FIELD	1220:34	1220:34	10	tif
LEAF_NODE	1220:34	1220:34	11	tif
LEAF_NODE	1220:37	1220:37	9	)
LEAF_NODE	1220:38	1220:38	4	;
SIMPLE_DECL	1221:1	1221:10	3	int state ;
VAR_DECL	1221:1	1221:5	4	int state
TYPE	1221:1	1221:1	5	int
TYPE_NAME	1221:1	1221:1	6	int
LEAF_NODE	1221:1	1221:1	7	int
NAME	1221:5	1221:5	5	state
LEAF_NODE	1221:5	1221:5	6	state
LEAF_NODE	1221:10	1221:10	4	;
EXPR_STATEMENT	1223:1	1223:24	3	sp -> stream . avail_in = 0 ;
EXPR	1223:1	1223:1	4	sp -> stream . avail_in = 0
ASSIGN	1223:1	1223:23	5	sp -> stream . avail_in = 0
LVAL	1223:1	1223:1	6	sp -> stream . avail_in
FIELD	1223:1	1223:12	7	sp -> stream . avail_in
LEAF_NODE	1223:1	1223:1	8	sp
LEAF_NODE	1223:3	1223:3	8	->
LEAF_NODE	1223:5	1223:5	8	stream
LEAF_NODE	1223:11	1223:11	8	.
LEAF_NODE	1223:12	1223:12	8	avail_in
ASSIGN_OP	1223:21	1223:21	6	=
LEAF_NODE	1223:21	1223:21	7	=
RVAL	1223:23	1223:23	6	0
FIELD	1223:23	1223:23	7	0
LEAF_NODE	1223:23	1223:23	8	0
LEAF_NODE	1223:24	1223:24	4	;
ITERATION	1225:1	1225:4	3	
KEYWORD	1225:1	1225:1	4	do
LEAF_NODE	1225:1	1225:1	5	do
LEAF_NODE	1243:9	1243:9	4	(
CONDITION	1243:10	1243:10	4	state != Z_STREAM_END
EXPR	1243:10	1243:19	5	state != Z_STREAM_END
FIELD	1243:10	1243:10	6	state
LEAF_NODE	1243:10	1243:10	7	state
EQ_OPERATOR	1243:16	1243:16	6	!=
LEAF_NODE	1243:16	1243:16	7	!=
FIELD	1243:19	1243:19	6	Z_STREAM_END
LEAF_NODE	1243:19	1243:19	7	Z_STREAM_END
LEAF_NODE	1243:31	1243:31	4	)
STATEMENTS	1225:4	1243:1	4	
LEAF_NODE	1225:4	1225:4	5	{
STATEMENTS	1226:2	1227:2	5	
EXPR_STATEMENT	1226:2	1226:40	6	state = deflate ( & sp -> stream , Z_FINISH ) ;
EXPR	1226:2	1226:2	7	state = deflate ( & sp -> stream , Z_FINISH )
ASSIGN	1226:2	1226:10	8	state = deflate ( & sp -> stream , Z_FINISH )
LVAL	1226:2	1226:2	9	state
FIELD	1226:2	1226:2	10	state
LEAF_NODE	1226:2	1226:2	11	state
ASSIGN_OP	1226:8	1226:8	9	=
LEAF_NODE	1226:8	1226:8	10	=
RVAL	1226:10	1226:10	9	deflate ( & sp -> stream , Z_FINISH )
FUNCTION_CALL	1226:10	1226:39	10	deflate ( & sp -> stream , Z_FINISH )
CALLEE	1226:10	1226:10	11	deflate
LEAF_NODE	1226:10	1226:10	12	deflate
LEAF_NODE	1226:17	1226:17	11	(
ARGUMENT	1226:18	1226:18	11	& sp -> stream
UNARY_EXPR	1226:18	1226:19	12	& sp -> stream
UNARY_OPERATOR	1226:18	1226:18	13	&
LEAF_NODE	1226:18	1226:18	14	&
FIELD	1226:19	1226:23	13	sp -> stream
LEAF_NODE	1226:19	1226:19	14	sp
LEAF_NODE	1226:21	1226:21	14	->
LEAF_NODE	1226:23	1226:23	14	stream
LEAF_NODE	1226:29	1226:29	11	,
ARGUMENT	1226:31	1226:31	11	Z_FINISH
FIELD	1226:31	1226:31	12	Z_FINISH
LEAF_NODE	1226:31	1226:31	13	Z_FINISH
LEAF_NODE	1226:39	1226:39	11	)
LEAF_NODE	1226:40	1226:40	7	;
SELECTION	1227:2	1227:17	6	
KEYWORD	1227:2	1227:2	7	switch
LEAF_NODE	1227:2	1227:2	8	switch
LEAF_NODE	1227:9	1227:9	7	(
CONDITION	1227:10	1227:10	7	state
EXPR	1227:10	1227:10	8	state
FIELD	1227:10	1227:10	9	state
LEAF_NODE	1227:10	1227:10	10	state
LEAF_NODE	1227:15	1227:15	7	)
STATEMENTS	1227:17	1242:2	7	
LEAF_NODE	1227:17	1227:17	8	{
STATEMENTS	1228:2	1241:6	8	
LABEL	1228:2	1228:19	9	case Z_STREAM_END :
LEAF_NODE	1228:2	1228:2	10	case
LEAF_NODE	1228:7	1228:7	10	Z_STREAM_END
LEAF_NODE	1228:19	1228:19	10	:
LABEL	1229:2	1229:11	9	case Z_OK :
LEAF_NODE	1229:2	1229:2	10	case
LEAF_NODE	1229:7	1229:7	10	Z_OK
LEAF_NODE	1229:11	1229:11	10	:
SELECTION	1230:6	1230:66	9	
KEYWORD	1230:6	1230:6	10	if
LEAF_NODE	1230:6	1230:6	11	if
LEAF_NODE	1230:9	1230:9	10	(
CONDITION	1230:10	1230:10	10	( tmsize_t ) sp -> stream . avail_out != tif -> tif_rawdatasize
EXPR	1230:10	1230:44	11	( tmsize_t ) sp -> stream . avail_out != tif -> tif_rawdatasize
LEAF_NODE	1230:10	1230:10	12	(
TYPE_NAME	1230:11	1230:11	12	tmsize_t
LEAF_NODE	1230:11	1230:11	13	tmsize_t
LEAF_NODE	1230:19	1230:19	12	)
FIELD	1230:20	1230:31	12	sp -> stream . avail_out
LEAF_NODE	1230:20	1230:20	13	sp
LEAF_NODE	1230:22	1230:22	13	->
LEAF_NODE	1230:24	1230:24	13	stream
LEAF_NODE	1230:30	1230:30	13	.
LEAF_NODE	1230:31	1230:31	13	avail_out
EQ_OPERATOR	1230:41	1230:41	12	!=
LEAF_NODE	1230:41	1230:41	13	!=
FIELD	1230:44	1230:49	12	tif -> tif_rawdatasize
LEAF_NODE	1230:44	1230:44	13	tif
LEAF_NODE	1230:47	1230:47	13	->
LEAF_NODE	1230:49	1230:49	13	tif_rawdatasize
LEAF_NODE	1230:64	1230:64	10	)
STATEMENTS	1230:66	1236:6	10	
LEAF_NODE	1230:66	1230:66	11	{
STATEMENTS	1231:7	1235:7	11	
EXPR_STATEMENT	1231:7	1232:47	12	tif -> tif_rawcc = tif -> tif_rawdatasize - sp -> stream . avail_out ;
EXPR	1231:7	1231:7	13	tif -> tif_rawcc = tif -> tif_rawdatasize - sp -> stream . avail_out
ASSIGN	1231:7	1232:4	14	tif -> tif_rawcc = tif -> tif_rawdatasize - sp -> stream . avail_out
LVAL	1231:7	1231:7	15	tif -> tif_rawcc
FIELD	1231:7	1231:12	16	tif -> tif_rawcc
LEAF_NODE	1231:7	1231:7	17	tif
LEAF_NODE	1231:10	1231:10	17	->
LEAF_NODE	1231:12	1231:12	17	tif_rawcc
ASSIGN_OP	1231:22	1231:22	15	=
LEAF_NODE	1231:22	1231:22	16	=
RVAL	1232:4	1232:27	15	tif -> tif_rawdatasize - sp -> stream . avail_out
FIELD	1232:4	1232:9	16	tif -> tif_rawdatasize
LEAF_NODE	1232:4	1232:4	17	tif
LEAF_NODE	1232:7	1232:7	17	->
LEAF_NODE	1232:9	1232:9	17	tif_rawdatasize
LEAF_NODE	1232:25	1232:25	16	-
FIELD	1232:27	1232:38	16	sp -> stream . avail_out
LEAF_NODE	1232:27	1232:27	17	sp
LEAF_NODE	1232:29	1232:29	17	->
LEAF_NODE	1232:31	1232:31	17	stream
LEAF_NODE	1232:37	1232:37	17	.
LEAF_NODE	1232:38	1232:38	17	avail_out
LEAF_NODE	1232:47	1232:47	13	;
EXPR_STATEMENT	1233:7	1233:26	12	TIFFFlushData1 ( tif ) ;
EXPR	1233:7	1233:7	13	TIFFFlushData1 ( tif )
FUNCTION_CALL	1233:7	1233:25	14	TIFFFlushData1 ( tif )
CALLEE	1233:7	1233:7	15	TIFFFlushData1
LEAF_NODE	1233:7	1233:7	16	TIFFFlushData1
LEAF_NODE	1233:21	1233:21	15	(
ARGUMENT	1233:22	1233:22	15	tif
FIELD	1233:22	1233:22	16	tif
LEAF_NODE	1233:22	1233:22	17	tif
LEAF_NODE	1233:25	1233:25	15	)
LEAF_NODE	1233:26	1233:26	13	;
EXPR_STATEMENT	1234:7	1234:45	12	sp -> stream . next_out = tif -> tif_rawdata ;
EXPR	1234:7	1234:7	13	sp -> stream . next_out = tif -> tif_rawdata
ASSIGN	1234:7	1234:29	14	sp -> stream . next_out = tif -> tif_rawdata
LVAL	1234:7	1234:7	15	sp -> stream . next_out
FIELD	1234:7	1234:18	16	sp -> stream . next_out
LEAF_NODE	1234:7	1234:7	17	sp
LEAF_NODE	1234:9	1234:9	17	->
LEAF_NODE	1234:11	1234:11	17	stream
LEAF_NODE	1234:17	1234:17	17	.
LEAF_NODE	1234:18	1234:18	17	next_out
ASSIGN_OP	1234:27	1234:27	15	=
LEAF_NODE	1234:27	1234:27	16	=
RVAL	1234:29	1234:29	15	tif -> tif_rawdata
FIELD	1234:29	1234:34	16	tif -> tif_rawdata
LEAF_NODE	1234:29	1234:29	17	tif
LEAF_NODE	1234:32	1234:32	17	->
LEAF_NODE	1234:34	1234:34	17	tif_rawdata
LEAF_NODE	1234:45	1234:45	13	;
EXPR_STATEMENT	1235:7	1235:57	12	sp -> stream . avail_out = ( uInt ) tif -> tif_rawdatasize ;
EXPR	1235:7	1235:7	13	sp -> stream . avail_out = ( uInt ) tif -> tif_rawdatasize
ASSIGN	1235:7	1235:30	14	sp -> stream . avail_out = ( uInt ) tif -> tif_rawdatasize
LVAL	1235:7	1235:7	15	sp -> stream . avail_out
FIELD	1235:7	1235:18	16	sp -> stream . avail_out
LEAF_NODE	1235:7	1235:7	17	sp
LEAF_NODE	1235:9	1235:9	17	->
LEAF_NODE	1235:11	1235:11	17	stream
LEAF_NODE	1235:17	1235:17	17	.
LEAF_NODE	1235:18	1235:18	17	avail_out
ASSIGN_OP	1235:28	1235:28	15	=
LEAF_NODE	1235:28	1235:28	16	=
RVAL	1235:30	1235:37	15	( uInt ) tif -> tif_rawdatasize
LEAF_NODE	1235:30	1235:30	16	(
TYPE_NAME	1235:31	1235:31	16	uInt
LEAF_NODE	1235:31	1235:31	17	uInt
LEAF_NODE	1235:35	1235:35	16	)
FIELD	1235:37	1235:42	16	tif -> tif_rawdatasize
LEAF_NODE	1235:37	1235:37	17	tif
LEAF_NODE	1235:40	1235:40	17	->
LEAF_NODE	1235:42	1235:42	17	tif_rawdatasize
LEAF_NODE	1235:57	1235:57	13	;
LEAF_NODE	1236:6	1236:6	11	}
JUMP_STATEMENT	1237:6	1237:11	9	break DESTINATION ;
KEYWORD	1237:6	1237:6	10	break
LEAF_NODE	1237:6	1237:6	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1237:11	1237:11	10	;
LABEL	1238:2	1238:9	9	default :
LEAF_NODE	1238:2	1238:2	10	default
LEAF_NODE	1238:9	1238:9	10	:
EXPR_STATEMENT	1239:3	1240:46	9	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" ) ;
EXPR	1239:3	1239:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
FUNCTION_CALL	1239:3	1240:45	11	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
CALLEE	1239:3	1239:3	12	TIFFErrorExt
LEAF_NODE	1239:3	1239:3	13	TIFFErrorExt
LEAF_NODE	1239:15	1239:15	12	(
ARGUMENT	1239:16	1239:16	12	tif -> tif_clientdata
FIELD	1239:16	1239:21	13	tif -> tif_clientdata
LEAF_NODE	1239:16	1239:16	14	tif
LEAF_NODE	1239:19	1239:19	14	->
LEAF_NODE	1239:21	1239:21	14	tif_clientdata
LEAF_NODE	1239:35	1239:35	12	,
ARGUMENT	1239:37	1239:37	12	module
FIELD	1239:37	1239:37	13	module
LEAF_NODE	1239:37	1239:37	14	module
LEAF_NODE	1239:43	1239:43	12	,
ARGUMENT	1239:45	1239:45	12	"ZLib error: %s"
FIELD	1239:45	1239:45	13	"ZLib error: %s"
LEAF_NODE	1239:45	1239:45	14	"ZLib error: %s"
LEAF_NODE	1239:61	1239:61	12	,
ARGUMENT	1240:3	1240:3	12	sp -> stream . msg ? sp -> stream . msg : "(null)"
COND_EXPR	1240:3	1240:37	13	sp -> stream . msg ? sp -> stream . msg : "(null)"
CONDITION	1240:3	1240:3	14	sp -> stream . msg
FIELD	1240:3	1240:14	15	sp -> stream . msg
LEAF_NODE	1240:3	1240:3	16	sp
LEAF_NODE	1240:5	1240:5	16	->
LEAF_NODE	1240:7	1240:7	16	stream
LEAF_NODE	1240:13	1240:13	16	.
LEAF_NODE	1240:14	1240:14	16	msg
LEAF_NODE	1240:18	1240:18	14	?
EXPR	1240:20	1240:20	14	sp -> stream . msg
FIELD	1240:20	1240:31	15	sp -> stream . msg
LEAF_NODE	1240:20	1240:20	16	sp
LEAF_NODE	1240:22	1240:22	16	->
LEAF_NODE	1240:24	1240:24	16	stream
LEAF_NODE	1240:30	1240:30	16	.
LEAF_NODE	1240:31	1240:31	16	msg
LEAF_NODE	1240:35	1240:35	14	:
FIELD	1240:37	1240:37	14	"(null)"
LEAF_NODE	1240:37	1240:37	15	"(null)"
LEAF_NODE	1240:45	1240:45	12	)
LEAF_NODE	1240:46	1240:46	10	;
JUMP_STATEMENT	1241:6	1241:16	9	return ( 0 ) ;
KEYWORD	1241:6	1241:6	10	return
LEAF_NODE	1241:6	1241:6	11	return
DESTINATION	1241:13	1241:13	10	( 0 )
EXPR	1241:13	1241:15	11	( 0 )
LEAF_NODE	1241:13	1241:13	12	(
FIELD	1241:14	1241:14	12	0
LEAF_NODE	1241:14	1241:14	13	0
LEAF_NODE	1241:15	1241:15	12	)
LEAF_NODE	1241:16	1241:16	10	;
LEAF_NODE	1242:2	1242:2	8	}
LEAF_NODE	1243:1	1243:1	5	}
LEAF_NODE	1243:32	1243:32	3	;
JUMP_STATEMENT	1244:1	1244:11	3	return ( 1 ) ;
KEYWORD	1244:1	1244:1	4	return
LEAF_NODE	1244:1	1244:1	5	return
DESTINATION	1244:8	1244:8	4	( 1 )
EXPR	1244:8	1244:10	5	( 1 )
LEAF_NODE	1244:8	1244:8	6	(
FIELD	1244:9	1244:9	6	1
LEAF_NODE	1244:9	1244:9	7	1
LEAF_NODE	1244:10	1244:10	6	)
LEAF_NODE	1244:11	1244:11	4	;
LEAF_NODE	1245:0	1245:0	2	}
FUNCTION_DEF	1247:0	1275:0	1	
RETURN_TYPE	1247:0	1247:7	2	static void
LEAF_NODE	1247:0	1247:0	3	static
TYPE_NAME	1247:7	1247:7	3	void
LEAF_NODE	1247:7	1247:7	4	void
FUNCTION_NAME	1248:0	1248:0	2	PixarLogClose
LEAF_NODE	1248:0	1248:0	3	PixarLogClose
PARAMETER_LIST	1248:13	1248:23	2	( TIFF * tif )
LEAF_NODE	1248:13	1248:13	3	(
PARAMETER_DECL	1248:14	1248:20	3	TIFF * tif
TYPE	1248:14	1248:18	4	TIFF *
TYPE_NAME	1248:14	1248:14	5	TIFF
LEAF_NODE	1248:14	1248:14	6	TIFF
POINTER	1248:18	1248:18	5	*
LEAF_NODE	1248:18	1248:18	6	*
NAME	1248:20	1248:20	4	tif
LEAF_NODE	1248:20	1248:20	5	tif
LEAF_NODE	1248:23	1248:23	3	)
LEAF_NODE	1249:0	1249:0	2	{
STATEMENTS	1250:8	1263:8	2	
SIMPLE_DECL	1250:8	1250:58	3	PixarLogState * sp ; sp = ( PixarLogState * ) tif -> tif_data ;
VAR_DECL	1250:8	1250:23	4	PixarLogState * sp ; sp = ( PixarLogState * ) tif -> tif_data
TYPE	1250:8	1250:21	5	PixarLogState *
TYPE_NAME	1250:8	1250:8	6	PixarLogState
LEAF_NODE	1250:8	1250:8	7	PixarLogState
POINTER	1250:21	1250:21	6	*
LEAF_NODE	1250:21	1250:21	7	*
NAME	1250:23	1250:23	5	sp
LEAF_NODE	1250:23	1250:23	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1250:23	1250:23	5	sp = ( PixarLogState * ) tif -> tif_data
ASSIGN	1250:23	1250:28	6	sp = ( PixarLogState * ) tif -> tif_data
LVAL	1250:23	1250:23	7	sp
NAME	1250:23	1250:23	8	sp
LEAF_NODE	1250:23	1250:23	9	sp
ASSIGN_OP	1250:26	1250:26	7	=
LEAF_NODE	1250:26	1250:26	8	=
RVAL	1250:28	1250:45	7	( PixarLogState * ) tif -> tif_data
LEAF_NODE	1250:28	1250:28	8	(
TYPE_NAME	1250:29	1250:29	8	PixarLogState
LEAF_NODE	1250:29	1250:29	9	PixarLogState
LEAF_NODE	1250:42	1250:42	8	*
LEAF_NODE	1250:43	1250:43	8	)
FIELD	1250:45	1250:50	8	tif -> tif_data
LEAF_NODE	1250:45	1250:45	9	tif
LEAF_NODE	1250:48	1250:48	9	->
LEAF_NODE	1250:50	1250:50	9	tif_data
LEAF_NODE	1250:58	1250:58	4	;
SIMPLE_DECL	1251:1	1251:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1251:1	1251:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1251:1	1251:15	5	TIFFDirectory *
TYPE_NAME	1251:1	1251:1	6	TIFFDirectory
LEAF_NODE	1251:1	1251:1	7	TIFFDirectory
POINTER	1251:15	1251:15	6	*
LEAF_NODE	1251:15	1251:15	7	*
NAME	1251:16	1251:16	5	td
LEAF_NODE	1251:16	1251:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1251:16	1251:16	5	td = & tif -> tif_dir
ASSIGN	1251:16	1251:21	6	td = & tif -> tif_dir
LVAL	1251:16	1251:16	7	td
NAME	1251:16	1251:16	8	td
LEAF_NODE	1251:16	1251:16	9	td
ASSIGN_OP	1251:19	1251:19	7	=
LEAF_NODE	1251:19	1251:19	8	=
RVAL	1251:21	1251:21	7	& tif -> tif_dir
UNARY_EXPR	1251:21	1251:22	8	& tif -> tif_dir
UNARY_OPERATOR	1251:21	1251:21	9	&
LEAF_NODE	1251:21	1251:21	10	&
FIELD	1251:22	1251:27	9	tif -> tif_dir
LEAF_NODE	1251:22	1251:22	10	tif
LEAF_NODE	1251:25	1251:25	10	->
LEAF_NODE	1251:27	1251:27	10	tif_dir
LEAF_NODE	1251:34	1251:34	4	;
EXPR_STATEMENT	1253:1	1253:16	3	assert ( sp != 0 ) ;
EXPR	1253:1	1253:1	4	assert ( sp != 0 )
FUNCTION_CALL	1253:1	1253:15	5	assert ( sp != 0 )
CALLEE	1253:1	1253:1	6	assert
LEAF_NODE	1253:1	1253:1	7	assert
LEAF_NODE	1253:7	1253:7	6	(
ARGUMENT	1253:8	1253:14	6	sp != 0
FIELD	1253:8	1253:8	7	sp
LEAF_NODE	1253:8	1253:8	8	sp
EQ_OPERATOR	1253:11	1253:11	7	!=
LEAF_NODE	1253:11	1253:11	8	!=
FIELD	1253:14	1253:14	7	0
LEAF_NODE	1253:14	1253:14	8	0
LEAF_NODE	1253:15	1253:15	6	)
LEAF_NODE	1253:16	1253:16	4	;
SELECTION	1263:8	1263:36	3	
KEYWORD	1263:8	1263:8	4	if
LEAF_NODE	1263:8	1263:8	5	if
LEAF_NODE	1263:11	1263:11	4	(
CONDITION	1263:12	1263:12	4	sp -> state & PLSTATE_INIT
EXPR	1263:12	1263:22	5	sp -> state & PLSTATE_INIT
FIELD	1263:12	1263:16	6	sp -> state
LEAF_NODE	1263:12	1263:12	7	sp
LEAF_NODE	1263:14	1263:14	7	->
LEAF_NODE	1263:16	1263:16	7	state
LEAF_NODE	1263:21	1263:21	6	&
FIELD	1263:22	1263:22	6	PLSTATE_INIT
LEAF_NODE	1263:22	1263:22	7	PLSTATE_INIT
LEAF_NODE	1263:34	1263:34	4	)
STATEMENTS	1263:36	1274:8	4	
LEAF_NODE	1263:36	1263:36	5	{
STATEMENTS	1272:12	1273:12	5	
EXPR_STATEMENT	1272:12	1272:36	6	td -> td_bitspersample = 8 ;
EXPR	1272:12	1272:12	7	td -> td_bitspersample = 8
ASSIGN	1272:12	1272:35	8	td -> td_bitspersample = 8
LVAL	1272:12	1272:12	9	td -> td_bitspersample
FIELD	1272:12	1272:16	10	td -> td_bitspersample
LEAF_NODE	1272:12	1272:12	11	td
LEAF_NODE	1272:14	1272:14	11	->
LEAF_NODE	1272:16	1272:16	11	td_bitspersample
ASSIGN_OP	1272:33	1272:33	9	=
LEAF_NODE	1272:33	1272:33	10	=
RVAL	1272:35	1272:35	9	8
FIELD	1272:35	1272:35	10	8
LEAF_NODE	1272:35	1272:35	11	8
LEAF_NODE	1272:36	1272:36	7	;
EXPR_STATEMENT	1273:12	1273:51	6	td -> td_sampleformat = SAMPLEFORMAT_UINT ;
EXPR	1273:12	1273:12	7	td -> td_sampleformat = SAMPLEFORMAT_UINT
ASSIGN	1273:12	1273:34	8	td -> td_sampleformat = SAMPLEFORMAT_UINT
LVAL	1273:12	1273:12	9	td -> td_sampleformat
FIELD	1273:12	1273:16	10	td -> td_sampleformat
LEAF_NODE	1273:12	1273:12	11	td
LEAF_NODE	1273:14	1273:14	11	->
LEAF_NODE	1273:16	1273:16	11	td_sampleformat
ASSIGN_OP	1273:32	1273:32	9	=
LEAF_NODE	1273:32	1273:32	10	=
RVAL	1273:34	1273:34	9	SAMPLEFORMAT_UINT
FIELD	1273:34	1273:34	10	SAMPLEFORMAT_UINT
LEAF_NODE	1273:34	1273:34	11	SAMPLEFORMAT_UINT
LEAF_NODE	1273:51	1273:51	7	;
LEAF_NODE	1274:8	1274:8	5	}
LEAF_NODE	1275:0	1275:0	2	}
FUNCTION_DEF	1277:0	1307:0	1	
RETURN_TYPE	1277:0	1277:7	2	static void
LEAF_NODE	1277:0	1277:0	3	static
TYPE_NAME	1277:7	1277:7	3	void
LEAF_NODE	1277:7	1277:7	4	void
FUNCTION_NAME	1278:0	1278:0	2	PixarLogCleanup
LEAF_NODE	1278:0	1278:0	3	PixarLogCleanup
PARAMETER_LIST	1278:15	1278:25	2	( TIFF * tif )
LEAF_NODE	1278:15	1278:15	3	(
PARAMETER_DECL	1278:16	1278:22	3	TIFF * tif
TYPE	1278:16	1278:20	4	TIFF *
TYPE_NAME	1278:16	1278:16	5	TIFF
LEAF_NODE	1278:16	1278:16	6	TIFF
POINTER	1278:20	1278:20	5	*
LEAF_NODE	1278:20	1278:20	6	*
NAME	1278:22	1278:22	4	tif
LEAF_NODE	1278:22	1278:22	5	tif
LEAF_NODE	1278:25	1278:25	3	)
LEAF_NODE	1279:0	1279:0	2	{
STATEMENTS	1280:1	1306:1	2	
SIMPLE_DECL	1280:1	1280:51	3	PixarLogState * sp ; sp = ( PixarLogState * ) tif -> tif_data ;
VAR_DECL	1280:1	1280:16	4	PixarLogState * sp ; sp = ( PixarLogState * ) tif -> tif_data
TYPE	1280:1	1280:14	5	PixarLogState *
TYPE_NAME	1280:1	1280:1	6	PixarLogState
LEAF_NODE	1280:1	1280:1	7	PixarLogState
POINTER	1280:14	1280:14	6	*
LEAF_NODE	1280:14	1280:14	7	*
NAME	1280:16	1280:16	5	sp
LEAF_NODE	1280:16	1280:16	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1280:16	1280:16	5	sp = ( PixarLogState * ) tif -> tif_data
ASSIGN	1280:16	1280:21	6	sp = ( PixarLogState * ) tif -> tif_data
LVAL	1280:16	1280:16	7	sp
NAME	1280:16	1280:16	8	sp
LEAF_NODE	1280:16	1280:16	9	sp
ASSIGN_OP	1280:19	1280:19	7	=
LEAF_NODE	1280:19	1280:19	8	=
RVAL	1280:21	1280:38	7	( PixarLogState * ) tif -> tif_data
LEAF_NODE	1280:21	1280:21	8	(
TYPE_NAME	1280:22	1280:22	8	PixarLogState
LEAF_NODE	1280:22	1280:22	9	PixarLogState
LEAF_NODE	1280:35	1280:35	8	*
LEAF_NODE	1280:36	1280:36	8	)
FIELD	1280:38	1280:43	8	tif -> tif_data
LEAF_NODE	1280:38	1280:38	9	tif
LEAF_NODE	1280:41	1280:41	9	->
LEAF_NODE	1280:43	1280:43	9	tif_data
LEAF_NODE	1280:51	1280:51	4	;
EXPR_STATEMENT	1282:1	1282:16	3	assert ( sp != 0 ) ;
EXPR	1282:1	1282:1	4	assert ( sp != 0 )
FUNCTION_CALL	1282:1	1282:15	5	assert ( sp != 0 )
CALLEE	1282:1	1282:1	6	assert
LEAF_NODE	1282:1	1282:1	7	assert
LEAF_NODE	1282:7	1282:7	6	(
ARGUMENT	1282:8	1282:14	6	sp != 0
FIELD	1282:8	1282:8	7	sp
LEAF_NODE	1282:8	1282:8	8	sp
EQ_OPERATOR	1282:11	1282:11	7	!=
LEAF_NODE	1282:11	1282:11	8	!=
FIELD	1282:14	1282:14	7	0
LEAF_NODE	1282:14	1282:14	8	0
LEAF_NODE	1282:15	1282:15	6	)
LEAF_NODE	1282:16	1282:16	4	;
EXPR_STATEMENT	1284:1	1284:32	3	( void ) TIFFPredictorCleanup ( tif ) ;
EXPR	1284:1	1284:7	4	( void ) TIFFPredictorCleanup ( tif )
LEAF_NODE	1284:1	1284:1	5	(
TYPE_NAME	1284:2	1284:2	5	void
LEAF_NODE	1284:2	1284:2	6	void
LEAF_NODE	1284:6	1284:6	5	)
FUNCTION_CALL	1284:7	1284:31	5	TIFFPredictorCleanup ( tif )
CALLEE	1284:7	1284:7	6	TIFFPredictorCleanup
LEAF_NODE	1284:7	1284:7	7	TIFFPredictorCleanup
LEAF_NODE	1284:27	1284:27	6	(
ARGUMENT	1284:28	1284:28	6	tif
FIELD	1284:28	1284:28	7	tif
LEAF_NODE	1284:28	1284:28	8	tif
LEAF_NODE	1284:31	1284:31	6	)
LEAF_NODE	1284:32	1284:32	4	;
EXPR_STATEMENT	1286:1	1286:47	3	tif -> tif_tagmethods . vgetfield = sp -> vgetparent ;
EXPR	1286:1	1286:1	4	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
ASSIGN	1286:1	1286:33	5	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
LVAL	1286:1	1286:1	6	tif -> tif_tagmethods . vgetfield
FIELD	1286:1	1286:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1286:1	1286:1	8	tif
LEAF_NODE	1286:4	1286:4	8	->
LEAF_NODE	1286:6	1286:6	8	tif_tagmethods
LEAF_NODE	1286:20	1286:20	8	.
LEAF_NODE	1286:21	1286:21	8	vgetfield
ASSIGN_OP	1286:31	1286:31	6	=
LEAF_NODE	1286:31	1286:31	7	=
RVAL	1286:33	1286:33	6	sp -> vgetparent
FIELD	1286:33	1286:37	7	sp -> vgetparent
LEAF_NODE	1286:33	1286:33	8	sp
LEAF_NODE	1286:35	1286:35	8	->
LEAF_NODE	1286:37	1286:37	8	vgetparent
LEAF_NODE	1286:47	1286:47	4	;
EXPR_STATEMENT	1287:1	1287:47	3	tif -> tif_tagmethods . vsetfield = sp -> vsetparent ;
EXPR	1287:1	1287:1	4	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
ASSIGN	1287:1	1287:33	5	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
LVAL	1287:1	1287:1	6	tif -> tif_tagmethods . vsetfield
FIELD	1287:1	1287:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	1287:1	1287:1	8	tif
LEAF_NODE	1287:4	1287:4	8	->
LEAF_NODE	1287:6	1287:6	8	tif_tagmethods
LEAF_NODE	1287:20	1287:20	8	.
LEAF_NODE	1287:21	1287:21	8	vsetfield
ASSIGN_OP	1287:31	1287:31	6	=
LEAF_NODE	1287:31	1287:31	7	=
RVAL	1287:33	1287:33	6	sp -> vsetparent
FIELD	1287:33	1287:37	7	sp -> vsetparent
LEAF_NODE	1287:33	1287:33	8	sp
LEAF_NODE	1287:35	1287:35	8	->
LEAF_NODE	1287:37	1287:37	8	vsetparent
LEAF_NODE	1287:47	1287:47	4	;
SELECTION	1289:1	1289:18	3	
KEYWORD	1289:1	1289:1	4	if
LEAF_NODE	1289:1	1289:1	5	if
LEAF_NODE	1289:4	1289:4	4	(
CONDITION	1289:5	1289:5	4	sp -> FromLT2
EXPR	1289:5	1289:5	5	sp -> FromLT2
FIELD	1289:5	1289:9	6	sp -> FromLT2
LEAF_NODE	1289:5	1289:5	7	sp
LEAF_NODE	1289:7	1289:7	7	->
LEAF_NODE	1289:9	1289:9	7	FromLT2
LEAF_NODE	1289:16	1289:16	4	)
STATEMENTS	1289:18	1289:18	4	
EXPR_STATEMENT	1289:18	1289:40	5	_TIFFfree ( sp -> FromLT2 ) ;
EXPR	1289:18	1289:18	6	_TIFFfree ( sp -> FromLT2 )
FUNCTION_CALL	1289:18	1289:39	7	_TIFFfree ( sp -> FromLT2 )
CALLEE	1289:18	1289:18	8	_TIFFfree
LEAF_NODE	1289:18	1289:18	9	_TIFFfree
LEAF_NODE	1289:27	1289:27	8	(
ARGUMENT	1289:28	1289:28	8	sp -> FromLT2
FIELD	1289:28	1289:32	9	sp -> FromLT2
LEAF_NODE	1289:28	1289:28	10	sp
LEAF_NODE	1289:30	1289:30	10	->
LEAF_NODE	1289:32	1289:32	10	FromLT2
LEAF_NODE	1289:39	1289:39	8	)
LEAF_NODE	1289:40	1289:40	6	;
SELECTION	1290:1	1290:17	3	
KEYWORD	1290:1	1290:1	4	if
LEAF_NODE	1290:1	1290:1	5	if
LEAF_NODE	1290:4	1290:4	4	(
CONDITION	1290:5	1290:5	4	sp -> From14
EXPR	1290:5	1290:5	5	sp -> From14
FIELD	1290:5	1290:9	6	sp -> From14
LEAF_NODE	1290:5	1290:5	7	sp
LEAF_NODE	1290:7	1290:7	7	->
LEAF_NODE	1290:9	1290:9	7	From14
LEAF_NODE	1290:15	1290:15	4	)
STATEMENTS	1290:17	1290:17	4	
EXPR_STATEMENT	1290:17	1290:38	5	_TIFFfree ( sp -> From14 ) ;
EXPR	1290:17	1290:17	6	_TIFFfree ( sp -> From14 )
FUNCTION_CALL	1290:17	1290:37	7	_TIFFfree ( sp -> From14 )
CALLEE	1290:17	1290:17	8	_TIFFfree
LEAF_NODE	1290:17	1290:17	9	_TIFFfree
LEAF_NODE	1290:26	1290:26	8	(
ARGUMENT	1290:27	1290:27	8	sp -> From14
FIELD	1290:27	1290:31	9	sp -> From14
LEAF_NODE	1290:27	1290:27	10	sp
LEAF_NODE	1290:29	1290:29	10	->
LEAF_NODE	1290:31	1290:31	10	From14
LEAF_NODE	1290:37	1290:37	8	)
LEAF_NODE	1290:38	1290:38	6	;
SELECTION	1291:1	1291:16	3	
KEYWORD	1291:1	1291:1	4	if
LEAF_NODE	1291:1	1291:1	5	if
LEAF_NODE	1291:4	1291:4	4	(
CONDITION	1291:5	1291:5	4	sp -> From8
EXPR	1291:5	1291:5	5	sp -> From8
FIELD	1291:5	1291:9	6	sp -> From8
LEAF_NODE	1291:5	1291:5	7	sp
LEAF_NODE	1291:7	1291:7	7	->
LEAF_NODE	1291:9	1291:9	7	From8
LEAF_NODE	1291:14	1291:14	4	)
STATEMENTS	1291:16	1291:16	4	
EXPR_STATEMENT	1291:16	1291:36	5	_TIFFfree ( sp -> From8 ) ;
EXPR	1291:16	1291:16	6	_TIFFfree ( sp -> From8 )
FUNCTION_CALL	1291:16	1291:35	7	_TIFFfree ( sp -> From8 )
CALLEE	1291:16	1291:16	8	_TIFFfree
LEAF_NODE	1291:16	1291:16	9	_TIFFfree
LEAF_NODE	1291:25	1291:25	8	(
ARGUMENT	1291:26	1291:26	8	sp -> From8
FIELD	1291:26	1291:30	9	sp -> From8
LEAF_NODE	1291:26	1291:26	10	sp
LEAF_NODE	1291:28	1291:28	10	->
LEAF_NODE	1291:30	1291:30	10	From8
LEAF_NODE	1291:35	1291:35	8	)
LEAF_NODE	1291:36	1291:36	6	;
SELECTION	1292:1	1292:20	3	
KEYWORD	1292:1	1292:1	4	if
LEAF_NODE	1292:1	1292:1	5	if
LEAF_NODE	1292:4	1292:4	4	(
CONDITION	1292:5	1292:5	4	sp -> ToLinearF
EXPR	1292:5	1292:5	5	sp -> ToLinearF
FIELD	1292:5	1292:9	6	sp -> ToLinearF
LEAF_NODE	1292:5	1292:5	7	sp
LEAF_NODE	1292:7	1292:7	7	->
LEAF_NODE	1292:9	1292:9	7	ToLinearF
LEAF_NODE	1292:18	1292:18	4	)
STATEMENTS	1292:20	1292:20	4	
EXPR_STATEMENT	1292:20	1292:44	5	_TIFFfree ( sp -> ToLinearF ) ;
EXPR	1292:20	1292:20	6	_TIFFfree ( sp -> ToLinearF )
FUNCTION_CALL	1292:20	1292:43	7	_TIFFfree ( sp -> ToLinearF )
CALLEE	1292:20	1292:20	8	_TIFFfree
LEAF_NODE	1292:20	1292:20	9	_TIFFfree
LEAF_NODE	1292:29	1292:29	8	(
ARGUMENT	1292:30	1292:30	8	sp -> ToLinearF
FIELD	1292:30	1292:34	9	sp -> ToLinearF
LEAF_NODE	1292:30	1292:30	10	sp
LEAF_NODE	1292:32	1292:32	10	->
LEAF_NODE	1292:34	1292:34	10	ToLinearF
LEAF_NODE	1292:43	1292:43	8	)
LEAF_NODE	1292:44	1292:44	6	;
SELECTION	1293:1	1293:21	3	
KEYWORD	1293:1	1293:1	4	if
LEAF_NODE	1293:1	1293:1	5	if
LEAF_NODE	1293:4	1293:4	4	(
CONDITION	1293:5	1293:5	4	sp -> ToLinear16
EXPR	1293:5	1293:5	5	sp -> ToLinear16
FIELD	1293:5	1293:9	6	sp -> ToLinear16
LEAF_NODE	1293:5	1293:5	7	sp
LEAF_NODE	1293:7	1293:7	7	->
LEAF_NODE	1293:9	1293:9	7	ToLinear16
LEAF_NODE	1293:19	1293:19	4	)
STATEMENTS	1293:21	1293:21	4	
EXPR_STATEMENT	1293:21	1293:46	5	_TIFFfree ( sp -> ToLinear16 ) ;
EXPR	1293:21	1293:21	6	_TIFFfree ( sp -> ToLinear16 )
FUNCTION_CALL	1293:21	1293:45	7	_TIFFfree ( sp -> ToLinear16 )
CALLEE	1293:21	1293:21	8	_TIFFfree
LEAF_NODE	1293:21	1293:21	9	_TIFFfree
LEAF_NODE	1293:30	1293:30	8	(
ARGUMENT	1293:31	1293:31	8	sp -> ToLinear16
FIELD	1293:31	1293:35	9	sp -> ToLinear16
LEAF_NODE	1293:31	1293:31	10	sp
LEAF_NODE	1293:33	1293:33	10	->
LEAF_NODE	1293:35	1293:35	10	ToLinear16
LEAF_NODE	1293:45	1293:45	8	)
LEAF_NODE	1293:46	1293:46	6	;
SELECTION	1294:1	1294:20	3	
KEYWORD	1294:1	1294:1	4	if
LEAF_NODE	1294:1	1294:1	5	if
LEAF_NODE	1294:4	1294:4	4	(
CONDITION	1294:5	1294:5	4	sp -> ToLinear8
EXPR	1294:5	1294:5	5	sp -> ToLinear8
FIELD	1294:5	1294:9	6	sp -> ToLinear8
LEAF_NODE	1294:5	1294:5	7	sp
LEAF_NODE	1294:7	1294:7	7	->
LEAF_NODE	1294:9	1294:9	7	ToLinear8
LEAF_NODE	1294:18	1294:18	4	)
STATEMENTS	1294:20	1294:20	4	
EXPR_STATEMENT	1294:20	1294:44	5	_TIFFfree ( sp -> ToLinear8 ) ;
EXPR	1294:20	1294:20	6	_TIFFfree ( sp -> ToLinear8 )
FUNCTION_CALL	1294:20	1294:43	7	_TIFFfree ( sp -> ToLinear8 )
CALLEE	1294:20	1294:20	8	_TIFFfree
LEAF_NODE	1294:20	1294:20	9	_TIFFfree
LEAF_NODE	1294:29	1294:29	8	(
ARGUMENT	1294:30	1294:30	8	sp -> ToLinear8
FIELD	1294:30	1294:34	9	sp -> ToLinear8
LEAF_NODE	1294:30	1294:30	10	sp
LEAF_NODE	1294:32	1294:32	10	->
LEAF_NODE	1294:34	1294:34	10	ToLinear8
LEAF_NODE	1294:43	1294:43	8	)
LEAF_NODE	1294:44	1294:44	6	;
SELECTION	1295:1	1295:29	3	
KEYWORD	1295:1	1295:1	4	if
LEAF_NODE	1295:1	1295:1	5	if
LEAF_NODE	1295:4	1295:4	4	(
CONDITION	1295:5	1295:5	4	sp -> state & PLSTATE_INIT
EXPR	1295:5	1295:15	5	sp -> state & PLSTATE_INIT
FIELD	1295:5	1295:9	6	sp -> state
LEAF_NODE	1295:5	1295:5	7	sp
LEAF_NODE	1295:7	1295:7	7	->
LEAF_NODE	1295:9	1295:9	7	state
LEAF_NODE	1295:14	1295:14	6	&
FIELD	1295:15	1295:15	6	PLSTATE_INIT
LEAF_NODE	1295:15	1295:15	7	PLSTATE_INIT
LEAF_NODE	1295:27	1295:27	4	)
STATEMENTS	1295:29	1300:1	4	
LEAF_NODE	1295:29	1295:29	5	{
STATEMENTS	1296:2	1298:2	5	
SELECTION	1296:2	1297:3	6	
KEYWORD	1296:2	1296:2	7	if
LEAF_NODE	1296:2	1296:2	8	if
LEAF_NODE	1296:5	1296:5	7	(
CONDITION	1296:6	1296:6	7	tif -> tif_mode == O_RDONLY
EXPR	1296:6	1296:23	8	tif -> tif_mode == O_RDONLY
FIELD	1296:6	1296:11	9	tif -> tif_mode
LEAF_NODE	1296:6	1296:6	10	tif
LEAF_NODE	1296:9	1296:9	10	->
LEAF_NODE	1296:11	1296:11	10	tif_mode
EQ_OPERATOR	1296:20	1296:20	9	==
LEAF_NODE	1296:20	1296:20	10	==
FIELD	1296:23	1296:23	9	O_RDONLY
LEAF_NODE	1296:23	1296:23	10	O_RDONLY
LEAF_NODE	1296:31	1296:31	7	)
STATEMENTS	1297:3	1297:3	7	
EXPR_STATEMENT	1297:3	1297:26	8	inflateEnd ( & sp -> stream ) ;
EXPR	1297:3	1297:3	9	inflateEnd ( & sp -> stream )
FUNCTION_CALL	1297:3	1297:25	10	inflateEnd ( & sp -> stream )
CALLEE	1297:3	1297:3	11	inflateEnd
LEAF_NODE	1297:3	1297:3	12	inflateEnd
LEAF_NODE	1297:13	1297:13	11	(
ARGUMENT	1297:14	1297:14	11	& sp -> stream
UNARY_EXPR	1297:14	1297:15	12	& sp -> stream
UNARY_OPERATOR	1297:14	1297:14	13	&
LEAF_NODE	1297:14	1297:14	14	&
FIELD	1297:15	1297:19	13	sp -> stream
LEAF_NODE	1297:15	1297:15	14	sp
LEAF_NODE	1297:17	1297:17	14	->
LEAF_NODE	1297:19	1297:19	14	stream
LEAF_NODE	1297:25	1297:25	11	)
LEAF_NODE	1297:26	1297:26	9	;
SELECTION	1298:2	1299:3	6	
KEYWORD	1298:2	1298:2	7	else
LEAF_NODE	1298:2	1298:2	8	else
STATEMENTS	1299:3	1299:3	7	
EXPR_STATEMENT	1299:3	1299:26	8	deflateEnd ( & sp -> stream ) ;
EXPR	1299:3	1299:3	9	deflateEnd ( & sp -> stream )
FUNCTION_CALL	1299:3	1299:25	10	deflateEnd ( & sp -> stream )
CALLEE	1299:3	1299:3	11	deflateEnd
LEAF_NODE	1299:3	1299:3	12	deflateEnd
LEAF_NODE	1299:13	1299:13	11	(
ARGUMENT	1299:14	1299:14	11	& sp -> stream
UNARY_EXPR	1299:14	1299:15	12	& sp -> stream
UNARY_OPERATOR	1299:14	1299:14	13	&
LEAF_NODE	1299:14	1299:14	14	&
FIELD	1299:15	1299:19	13	sp -> stream
LEAF_NODE	1299:15	1299:15	14	sp
LEAF_NODE	1299:17	1299:17	14	->
LEAF_NODE	1299:19	1299:19	14	stream
LEAF_NODE	1299:25	1299:25	11	)
LEAF_NODE	1299:26	1299:26	9	;
LEAF_NODE	1300:1	1300:1	5	}
SELECTION	1301:1	1302:2	3	
KEYWORD	1301:1	1301:1	4	if
LEAF_NODE	1301:1	1301:1	5	if
LEAF_NODE	1301:4	1301:4	4	(
CONDITION	1301:5	1301:5	4	sp -> tbuf
EXPR	1301:5	1301:5	5	sp -> tbuf
FIELD	1301:5	1301:9	6	sp -> tbuf
LEAF_NODE	1301:5	1301:5	7	sp
LEAF_NODE	1301:7	1301:7	7	->
LEAF_NODE	1301:9	1301:9	7	tbuf
LEAF_NODE	1301:13	1301:13	4	)
STATEMENTS	1302:2	1302:2	4	
EXPR_STATEMENT	1302:2	1302:21	5	_TIFFfree ( sp -> tbuf ) ;
EXPR	1302:2	1302:2	6	_TIFFfree ( sp -> tbuf )
FUNCTION_CALL	1302:2	1302:20	7	_TIFFfree ( sp -> tbuf )
CALLEE	1302:2	1302:2	8	_TIFFfree
LEAF_NODE	1302:2	1302:2	9	_TIFFfree
LEAF_NODE	1302:11	1302:11	8	(
ARGUMENT	1302:12	1302:12	8	sp -> tbuf
FIELD	1302:12	1302:16	9	sp -> tbuf
LEAF_NODE	1302:12	1302:12	10	sp
LEAF_NODE	1302:14	1302:14	10	->
LEAF_NODE	1302:16	1302:16	10	tbuf
LEAF_NODE	1302:20	1302:20	8	)
LEAF_NODE	1302:21	1302:21	6	;
EXPR_STATEMENT	1303:1	1303:14	3	_TIFFfree ( sp ) ;
EXPR	1303:1	1303:1	4	_TIFFfree ( sp )
FUNCTION_CALL	1303:1	1303:13	5	_TIFFfree ( sp )
CALLEE	1303:1	1303:1	6	_TIFFfree
LEAF_NODE	1303:1	1303:1	7	_TIFFfree
LEAF_NODE	1303:10	1303:10	6	(
ARGUMENT	1303:11	1303:11	6	sp
FIELD	1303:11	1303:11	7	sp
LEAF_NODE	1303:11	1303:11	8	sp
LEAF_NODE	1303:13	1303:13	6	)
LEAF_NODE	1303:14	1303:14	4	;
EXPR_STATEMENT	1304:1	1304:21	3	tif -> tif_data = NULL ;
EXPR	1304:1	1304:1	4	tif -> tif_data = NULL
ASSIGN	1304:1	1304:17	5	tif -> tif_data = NULL
LVAL	1304:1	1304:1	6	tif -> tif_data
FIELD	1304:1	1304:6	7	tif -> tif_data
LEAF_NODE	1304:1	1304:1	8	tif
LEAF_NODE	1304:4	1304:4	8	->
LEAF_NODE	1304:6	1304:6	8	tif_data
ASSIGN_OP	1304:15	1304:15	6	=
LEAF_NODE	1304:15	1304:15	7	=
RVAL	1304:17	1304:17	6	NULL
FIELD	1304:17	1304:17	7	NULL
LEAF_NODE	1304:17	1304:17	8	NULL
LEAF_NODE	1304:21	1304:21	4	;
EXPR_STATEMENT	1306:1	1306:37	3	_TIFFSetDefaultCompressionState ( tif ) ;
EXPR	1306:1	1306:1	4	_TIFFSetDefaultCompressionState ( tif )
FUNCTION_CALL	1306:1	1306:36	5	_TIFFSetDefaultCompressionState ( tif )
CALLEE	1306:1	1306:1	6	_TIFFSetDefaultCompressionState
LEAF_NODE	1306:1	1306:1	7	_TIFFSetDefaultCompressionState
LEAF_NODE	1306:32	1306:32	6	(
ARGUMENT	1306:33	1306:33	6	tif
FIELD	1306:33	1306:33	7	tif
LEAF_NODE	1306:33	1306:33	8	tif
LEAF_NODE	1306:36	1306:36	6	)
LEAF_NODE	1306:37	1306:37	4	;
LEAF_NODE	1307:0	1307:0	2	}
FUNCTION_DEF	1309:0	1369:0	1	
RETURN_TYPE	1309:0	1309:7	2	static int
LEAF_NODE	1309:0	1309:0	3	static
TYPE_NAME	1309:7	1309:7	3	int
LEAF_NODE	1309:7	1309:7	4	int
FUNCTION_NAME	1310:0	1310:0	2	PixarLogVSetField
LEAF_NODE	1310:0	1310:0	3	PixarLogVSetField
PARAMETER_LIST	1310:17	1310:51	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	1310:17	1310:17	3	(
PARAMETER_DECL	1310:18	1310:24	3	TIFF * tif
TYPE	1310:18	1310:22	4	TIFF *
TYPE_NAME	1310:18	1310:18	5	TIFF
LEAF_NODE	1310:18	1310:18	6	TIFF
POINTER	1310:22	1310:22	5	*
LEAF_NODE	1310:22	1310:22	6	*
NAME	1310:24	1310:24	4	tif
LEAF_NODE	1310:24	1310:24	5	tif
LEAF_NODE	1310:27	1310:27	3	,
PARAMETER_DECL	1310:29	1310:36	3	uint32 tag
TYPE	1310:29	1310:29	4	uint32
TYPE_NAME	1310:29	1310:29	5	uint32
LEAF_NODE	1310:29	1310:29	6	uint32
NAME	1310:36	1310:36	4	tag
LEAF_NODE	1310:36	1310:36	5	tag
LEAF_NODE	1310:39	1310:39	3	,
PARAMETER_DECL	1310:41	1310:49	3	va_list ap
TYPE	1310:41	1310:41	4	va_list
TYPE_NAME	1310:41	1310:41	5	va_list
LEAF_NODE	1310:41	1310:41	6	va_list
NAME	1310:49	1310:49	4	ap
LEAF_NODE	1310:49	1310:49	5	ap
LEAF_NODE	1310:51	1310:51	3	)
LEAF_NODE	1311:0	1311:0	2	{
STATEMENTS	1312:4	1368:19	2	
LEAF_NODE	1312:4	1312:4	3	static
SIMPLE_DECL	1312:11	1312:52	3	const char [ ] module ; module = "PixarLogVSetField" ;
VAR_DECL	1312:11	1312:22	4	const char [ ] module ; module = "PixarLogVSetField"
TYPE	1312:11	1312:28	5	const char [ ]
TYPE_NAME	1312:11	1312:17	6	const char
LEAF_NODE	1312:11	1312:11	7	const
LEAF_NODE	1312:17	1312:17	7	char
TYPE_SUFFIX	1312:28	1312:29	6	[ ]
LEAF_NODE	1312:28	1312:28	7	[
LEAF_NODE	1312:29	1312:29	7	]
NAME	1312:22	1312:22	5	module
LEAF_NODE	1312:22	1312:22	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1312:22	1312:22	5	module = "PixarLogVSetField"
ASSIGN	1312:22	1312:33	6	module = "PixarLogVSetField"
LVAL	1312:22	1312:22	7	module
NAME	1312:22	1312:22	8	module
LEAF_NODE	1312:22	1312:22	9	module
ASSIGN_OP	1312:31	1312:31	7	=
LEAF_NODE	1312:31	1312:31	8	=
RVAL	1312:33	1312:33	7	"PixarLogVSetField"
FIELD	1312:33	1312:33	8	"PixarLogVSetField"
LEAF_NODE	1312:33	1312:33	9	"PixarLogVSetField"
LEAF_NODE	1312:52	1312:52	4	;
SIMPLE_DECL	1313:4	1313:54	3	PixarLogState * sp ; sp = ( PixarLogState * ) tif -> tif_data ;
VAR_DECL	1313:4	1313:19	4	PixarLogState * sp ; sp = ( PixarLogState * ) tif -> tif_data
TYPE	1313:4	1313:18	5	PixarLogState *
TYPE_NAME	1313:4	1313:4	6	PixarLogState
LEAF_NODE	1313:4	1313:4	7	PixarLogState
POINTER	1313:18	1313:18	6	*
LEAF_NODE	1313:18	1313:18	7	*
NAME	1313:19	1313:19	5	sp
LEAF_NODE	1313:19	1313:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1313:19	1313:19	5	sp = ( PixarLogState * ) tif -> tif_data
ASSIGN	1313:19	1313:24	6	sp = ( PixarLogState * ) tif -> tif_data
LVAL	1313:19	1313:19	7	sp
NAME	1313:19	1313:19	8	sp
LEAF_NODE	1313:19	1313:19	9	sp
ASSIGN_OP	1313:22	1313:22	7	=
LEAF_NODE	1313:22	1313:22	8	=
RVAL	1313:24	1313:41	7	( PixarLogState * ) tif -> tif_data
LEAF_NODE	1313:24	1313:24	8	(
TYPE_NAME	1313:25	1313:25	8	PixarLogState
LEAF_NODE	1313:25	1313:25	9	PixarLogState
LEAF_NODE	1313:39	1313:39	8	*
LEAF_NODE	1313:40	1313:40	8	)
FIELD	1313:41	1313:46	8	tif -> tif_data
LEAF_NODE	1313:41	1313:41	9	tif
LEAF_NODE	1313:44	1313:44	9	->
LEAF_NODE	1313:46	1313:46	9	tif_data
LEAF_NODE	1313:54	1313:54	4	;
SIMPLE_DECL	1314:4	1314:14	3	int result ;
VAR_DECL	1314:4	1314:8	4	int result
TYPE	1314:4	1314:4	5	int
TYPE_NAME	1314:4	1314:4	6	int
LEAF_NODE	1314:4	1314:4	7	int
NAME	1314:8	1314:8	5	result
LEAF_NODE	1314:8	1314:8	6	result
LEAF_NODE	1314:14	1314:14	4	;
SELECTION	1316:4	1316:17	3	
KEYWORD	1316:4	1316:4	4	switch
LEAF_NODE	1316:4	1316:4	5	switch
LEAF_NODE	1316:11	1316:11	4	(
CONDITION	1316:12	1316:12	4	tag
EXPR	1316:12	1316:12	5	tag
FIELD	1316:12	1316:12	6	tag
LEAF_NODE	1316:12	1316:12	7	tag
LEAF_NODE	1316:15	1316:15	4	)
STATEMENTS	1316:17	1367:4	4	
LEAF_NODE	1316:17	1316:17	5	{
STATEMENTS	1317:5	1366:1	5	
LABEL	1317:5	1317:33	6	case TIFFTAG_PIXARLOGQUALITY :
LEAF_NODE	1317:5	1317:5	7	case
LEAF_NODE	1317:10	1317:10	7	TIFFTAG_PIXARLOGQUALITY
LEAF_NODE	1317:33	1317:33	7	:
EXPR_STATEMENT	1318:2	1318:37	6	sp -> quality = ( int ) va_arg ( ap , int ) ;
EXPR	1318:2	1318:2	7	sp -> quality = ( int ) va_arg ( ap , int )
ASSIGN	1318:2	1318:16	8	sp -> quality = ( int ) va_arg ( ap , int )
LVAL	1318:2	1318:2	9	sp -> quality
FIELD	1318:2	1318:6	10	sp -> quality
LEAF_NODE	1318:2	1318:2	11	sp
LEAF_NODE	1318:4	1318:4	11	->
LEAF_NODE	1318:6	1318:6	11	quality
ASSIGN_OP	1318:14	1318:14	9	=
LEAF_NODE	1318:14	1318:14	10	=
RVAL	1318:16	1318:22	9	( int ) va_arg ( ap , int )
LEAF_NODE	1318:16	1318:16	10	(
TYPE_NAME	1318:17	1318:17	10	int
LEAF_NODE	1318:17	1318:17	11	int
LEAF_NODE	1318:20	1318:20	10	)
FUNCTION_CALL	1318:22	1318:36	10	va_arg ( ap , int )
CALLEE	1318:22	1318:22	11	va_arg
LEAF_NODE	1318:22	1318:22	12	va_arg
LEAF_NODE	1318:28	1318:28	11	(
ARGUMENT	1318:29	1318:29	11	ap
FIELD	1318:29	1318:29	12	ap
LEAF_NODE	1318:29	1318:29	13	ap
LEAF_NODE	1318:31	1318:31	11	,
ARGUMENT	1318:33	1318:33	11	int
FIELD	1318:33	1318:33	12	int
LEAF_NODE	1318:33	1318:33	13	int
LEAF_NODE	1318:36	1318:36	11	)
LEAF_NODE	1318:37	1318:37	7	;
SELECTION	1319:2	1319:61	6	
KEYWORD	1319:2	1319:2	7	if
LEAF_NODE	1319:2	1319:2	8	if
LEAF_NODE	1319:5	1319:5	7	(
CONDITION	1319:6	1319:6	7	tif -> tif_mode != O_RDONLY && ( sp -> state & PLSTATE_INIT )
EXPR	1319:6	1319:6	8	tif -> tif_mode != O_RDONLY && ( sp -> state & PLSTATE_INIT )
AND	1319:6	1319:35	9	tif -> tif_mode != O_RDONLY && ( sp -> state & PLSTATE_INIT )
EXPR	1319:6	1319:23	10	tif -> tif_mode != O_RDONLY
FIELD	1319:6	1319:11	11	tif -> tif_mode
LEAF_NODE	1319:6	1319:6	12	tif
LEAF_NODE	1319:9	1319:9	12	->
LEAF_NODE	1319:11	1319:11	12	tif_mode
EQ_OPERATOR	1319:20	1319:20	11	!=
LEAF_NODE	1319:20	1319:20	12	!=
FIELD	1319:23	1319:23	11	O_RDONLY
LEAF_NODE	1319:23	1319:23	12	O_RDONLY
LEAF_NODE	1319:32	1319:32	10	&&
EXPR	1319:35	1319:58	10	( sp -> state & PLSTATE_INIT )
LEAF_NODE	1319:35	1319:35	11	(
FIELD	1319:36	1319:40	11	sp -> state
LEAF_NODE	1319:36	1319:36	12	sp
LEAF_NODE	1319:38	1319:38	12	->
LEAF_NODE	1319:40	1319:40	12	state
LEAF_NODE	1319:45	1319:45	11	&
FIELD	1319:46	1319:46	11	PLSTATE_INIT
LEAF_NODE	1319:46	1319:46	12	PLSTATE_INIT
LEAF_NODE	1319:58	1319:58	11	)
LEAF_NODE	1319:59	1319:59	7	)
STATEMENTS	1319:61	1326:2	7	
LEAF_NODE	1319:61	1319:61	8	{
STATEMENTS	1320:3	1320:3	8	
SELECTION	1320:3	1321:49	9	
KEYWORD	1320:3	1320:3	10	if
LEAF_NODE	1320:3	1320:3	11	if
LEAF_NODE	1320:6	1320:6	10	(
CONDITION	1320:7	1320:7	10	deflateParams ( & sp -> stream , sp -> quality , Z_DEFAULT_STRATEGY ) != Z_OK
EXPR	1320:7	1321:43	11	deflateParams ( & sp -> stream , sp -> quality , Z_DEFAULT_STRATEGY ) != Z_OK
FUNCTION_CALL	1320:7	1321:38	12	deflateParams ( & sp -> stream , sp -> quality , Z_DEFAULT_STRATEGY )
CALLEE	1320:7	1320:7	13	deflateParams
LEAF_NODE	1320:7	1320:7	14	deflateParams
LEAF_NODE	1320:20	1320:20	13	(
ARGUMENT	1320:21	1320:21	13	& sp -> stream
UNARY_EXPR	1320:21	1320:22	14	& sp -> stream
UNARY_OPERATOR	1320:21	1320:21	15	&
LEAF_NODE	1320:21	1320:21	16	&
FIELD	1320:22	1320:26	15	sp -> stream
LEAF_NODE	1320:22	1320:22	16	sp
LEAF_NODE	1320:24	1320:24	16	->
LEAF_NODE	1320:26	1320:26	16	stream
LEAF_NODE	1320:32	1320:32	13	,
ARGUMENT	1321:7	1321:7	13	sp -> quality
FIELD	1321:7	1321:11	14	sp -> quality
LEAF_NODE	1321:7	1321:7	15	sp
LEAF_NODE	1321:9	1321:9	15	->
LEAF_NODE	1321:11	1321:11	15	quality
LEAF_NODE	1321:18	1321:18	13	,
ARGUMENT	1321:20	1321:20	13	Z_DEFAULT_STRATEGY
FIELD	1321:20	1321:20	14	Z_DEFAULT_STRATEGY
LEAF_NODE	1321:20	1321:20	15	Z_DEFAULT_STRATEGY
LEAF_NODE	1321:38	1321:38	13	)
EQ_OPERATOR	1321:40	1321:40	12	!=
LEAF_NODE	1321:40	1321:40	13	!=
FIELD	1321:43	1321:43	12	Z_OK
LEAF_NODE	1321:43	1321:43	13	Z_OK
LEAF_NODE	1321:47	1321:47	10	)
STATEMENTS	1321:49	1325:3	10	
LEAF_NODE	1321:49	1321:49	11	{
STATEMENTS	1322:4	1324:4	11	
EXPR_STATEMENT	1322:4	1323:48	12	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" ) ;
EXPR	1322:4	1322:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
FUNCTION_CALL	1322:4	1323:47	14	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , sp -> stream . msg ? sp -> stream . msg : "(null)" )
CALLEE	1322:4	1322:4	15	TIFFErrorExt
LEAF_NODE	1322:4	1322:4	16	TIFFErrorExt
LEAF_NODE	1322:16	1322:16	15	(
ARGUMENT	1322:17	1322:17	15	tif -> tif_clientdata
FIELD	1322:17	1322:22	16	tif -> tif_clientdata
LEAF_NODE	1322:17	1322:17	17	tif
LEAF_NODE	1322:20	1322:20	17	->
LEAF_NODE	1322:22	1322:22	17	tif_clientdata
LEAF_NODE	1322:36	1322:36	15	,
ARGUMENT	1322:38	1322:38	15	module
FIELD	1322:38	1322:38	16	module
LEAF_NODE	1322:38	1322:38	17	module
LEAF_NODE	1322:44	1322:44	15	,
ARGUMENT	1322:46	1322:46	15	"ZLib error: %s"
FIELD	1322:46	1322:46	16	"ZLib error: %s"
LEAF_NODE	1322:46	1322:46	17	"ZLib error: %s"
LEAF_NODE	1322:62	1322:62	15	,
ARGUMENT	1323:5	1323:5	15	sp -> stream . msg ? sp -> stream . msg : "(null)"
COND_EXPR	1323:5	1323:39	16	sp -> stream . msg ? sp -> stream . msg : "(null)"
CONDITION	1323:5	1323:5	17	sp -> stream . msg
FIELD	1323:5	1323:16	18	sp -> stream . msg
LEAF_NODE	1323:5	1323:5	19	sp
LEAF_NODE	1323:7	1323:7	19	->
LEAF_NODE	1323:9	1323:9	19	stream
LEAF_NODE	1323:15	1323:15	19	.
LEAF_NODE	1323:16	1323:16	19	msg
LEAF_NODE	1323:20	1323:20	17	?
EXPR	1323:22	1323:22	17	sp -> stream . msg
FIELD	1323:22	1323:33	18	sp -> stream . msg
LEAF_NODE	1323:22	1323:22	19	sp
LEAF_NODE	1323:24	1323:24	19	->
LEAF_NODE	1323:26	1323:26	19	stream
LEAF_NODE	1323:32	1323:32	19	.
LEAF_NODE	1323:33	1323:33	19	msg
LEAF_NODE	1323:37	1323:37	17	:
FIELD	1323:39	1323:39	17	"(null)"
LEAF_NODE	1323:39	1323:39	18	"(null)"
LEAF_NODE	1323:47	1323:47	15	)
LEAF_NODE	1323:48	1323:48	13	;
JUMP_STATEMENT	1324:4	1324:14	12	return ( 0 ) ;
KEYWORD	1324:4	1324:4	13	return
LEAF_NODE	1324:4	1324:4	14	return
DESTINATION	1324:11	1324:11	13	( 0 )
EXPR	1324:11	1324:13	14	( 0 )
LEAF_NODE	1324:11	1324:11	15	(
FIELD	1324:12	1324:12	15	0
LEAF_NODE	1324:12	1324:12	16	0
LEAF_NODE	1324:13	1324:13	15	)
LEAF_NODE	1324:14	1324:14	13	;
LEAF_NODE	1325:3	1325:3	11	}
LEAF_NODE	1326:2	1326:2	8	}
JUMP_STATEMENT	1327:2	1327:12	6	return ( 1 ) ;
KEYWORD	1327:2	1327:2	7	return
LEAF_NODE	1327:2	1327:2	8	return
DESTINATION	1327:9	1327:9	7	( 1 )
EXPR	1327:9	1327:11	8	( 1 )
LEAF_NODE	1327:9	1327:9	9	(
FIELD	1327:10	1327:10	9	1
LEAF_NODE	1327:10	1327:10	10	1
LEAF_NODE	1327:11	1327:11	9	)
LEAF_NODE	1327:12	1327:12	7	;
LABEL	1328:5	1328:33	6	case TIFFTAG_PIXARLOGDATAFMT :
LEAF_NODE	1328:5	1328:5	7	case
LEAF_NODE	1328:10	1328:10	7	TIFFTAG_PIXARLOGDATAFMT
LEAF_NODE	1328:33	1328:33	7	:
EXPR_STATEMENT	1329:1	1329:41	6	sp -> user_datafmt = ( int ) va_arg ( ap , int ) ;
EXPR	1329:1	1329:1	7	sp -> user_datafmt = ( int ) va_arg ( ap , int )
ASSIGN	1329:1	1329:20	8	sp -> user_datafmt = ( int ) va_arg ( ap , int )
LVAL	1329:1	1329:1	9	sp -> user_datafmt
FIELD	1329:1	1329:5	10	sp -> user_datafmt
LEAF_NODE	1329:1	1329:1	11	sp
LEAF_NODE	1329:3	1329:3	11	->
LEAF_NODE	1329:5	1329:5	11	user_datafmt
ASSIGN_OP	1329:18	1329:18	9	=
LEAF_NODE	1329:18	1329:18	10	=
RVAL	1329:20	1329:26	9	( int ) va_arg ( ap , int )
LEAF_NODE	1329:20	1329:20	10	(
TYPE_NAME	1329:21	1329:21	10	int
LEAF_NODE	1329:21	1329:21	11	int
LEAF_NODE	1329:24	1329:24	10	)
FUNCTION_CALL	1329:26	1329:40	10	va_arg ( ap , int )
CALLEE	1329:26	1329:26	11	va_arg
LEAF_NODE	1329:26	1329:26	12	va_arg
LEAF_NODE	1329:32	1329:32	11	(
ARGUMENT	1329:33	1329:33	11	ap
FIELD	1329:33	1329:33	12	ap
LEAF_NODE	1329:33	1329:33	13	ap
LEAF_NODE	1329:35	1329:35	11	,
ARGUMENT	1329:37	1329:37	11	int
FIELD	1329:37	1329:37	12	int
LEAF_NODE	1329:37	1329:37	13	int
LEAF_NODE	1329:40	1329:40	11	)
LEAF_NODE	1329:41	1329:41	7	;
SELECTION	1335:1	1335:27	6	
KEYWORD	1335:1	1335:1	7	switch
LEAF_NODE	1335:1	1335:1	8	switch
LEAF_NODE	1335:8	1335:8	7	(
CONDITION	1335:9	1335:9	7	sp -> user_datafmt
EXPR	1335:9	1335:9	8	sp -> user_datafmt
FIELD	1335:9	1335:13	9	sp -> user_datafmt
LEAF_NODE	1335:9	1335:9	10	sp
LEAF_NODE	1335:11	1335:11	10	->
LEAF_NODE	1335:13	1335:13	10	user_datafmt
LEAF_NODE	1335:25	1335:25	7	)
STATEMENTS	1335:27	1357:1	7	
LEAF_NODE	1335:27	1335:27	8	{
STATEMENTS	1336:2	1356:5	8	
LABEL	1336:2	1336:27	9	case PIXARLOGDATAFMT_8BIT :
LEAF_NODE	1336:2	1336:2	10	case
LEAF_NODE	1336:7	1336:7	10	PIXARLOGDATAFMT_8BIT
LEAF_NODE	1336:27	1336:27	10	:
LABEL	1337:2	1337:31	9	case PIXARLOGDATAFMT_8BITABGR :
LEAF_NODE	1337:2	1337:2	10	case
LEAF_NODE	1337:7	1337:7	10	PIXARLOGDATAFMT_8BITABGR
LEAF_NODE	1337:31	1337:31	10	:
EXPR_STATEMENT	1338:5	1338:48	9	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 ) ;
EXPR	1338:5	1338:5	10	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
FUNCTION_CALL	1338:5	1338:47	11	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
CALLEE	1338:5	1338:5	12	TIFFSetField
LEAF_NODE	1338:5	1338:5	13	TIFFSetField
LEAF_NODE	1338:17	1338:17	12	(
ARGUMENT	1338:18	1338:18	12	tif
FIELD	1338:18	1338:18	13	tif
LEAF_NODE	1338:18	1338:18	14	tif
LEAF_NODE	1338:21	1338:21	12	,
ARGUMENT	1338:23	1338:23	12	TIFFTAG_BITSPERSAMPLE
FIELD	1338:23	1338:23	13	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1338:23	1338:23	14	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1338:44	1338:44	12	,
ARGUMENT	1338:46	1338:46	12	8
FIELD	1338:46	1338:46	13	8
LEAF_NODE	1338:46	1338:46	14	8
LEAF_NODE	1338:47	1338:47	12	)
LEAF_NODE	1338:48	1338:48	10	;
EXPR_STATEMENT	1339:5	1339:63	9	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT ) ;
EXPR	1339:5	1339:5	10	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT )
FUNCTION_CALL	1339:5	1339:62	11	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT )
CALLEE	1339:5	1339:5	12	TIFFSetField
LEAF_NODE	1339:5	1339:5	13	TIFFSetField
LEAF_NODE	1339:17	1339:17	12	(
ARGUMENT	1339:18	1339:18	12	tif
FIELD	1339:18	1339:18	13	tif
LEAF_NODE	1339:18	1339:18	14	tif
LEAF_NODE	1339:21	1339:21	12	,
ARGUMENT	1339:23	1339:23	12	TIFFTAG_SAMPLEFORMAT
FIELD	1339:23	1339:23	13	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1339:23	1339:23	14	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1339:43	1339:43	12	,
ARGUMENT	1339:45	1339:45	12	SAMPLEFORMAT_UINT
FIELD	1339:45	1339:45	13	SAMPLEFORMAT_UINT
LEAF_NODE	1339:45	1339:45	14	SAMPLEFORMAT_UINT
LEAF_NODE	1339:62	1339:62	12	)
LEAF_NODE	1339:63	1339:63	10	;
JUMP_STATEMENT	1340:5	1340:10	9	break DESTINATION ;
KEYWORD	1340:5	1340:5	10	break
LEAF_NODE	1340:5	1340:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1340:10	1340:10	10	;
LABEL	1341:2	1341:31	9	case PIXARLOGDATAFMT_11BITLOG :
LEAF_NODE	1341:2	1341:2	10	case
LEAF_NODE	1341:7	1341:7	10	PIXARLOGDATAFMT_11BITLOG
LEAF_NODE	1341:31	1341:31	10	:
EXPR_STATEMENT	1342:5	1342:49	9	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 16 ) ;
EXPR	1342:5	1342:5	10	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 16 )
FUNCTION_CALL	1342:5	1342:48	11	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 16 )
CALLEE	1342:5	1342:5	12	TIFFSetField
LEAF_NODE	1342:5	1342:5	13	TIFFSetField
LEAF_NODE	1342:17	1342:17	12	(
ARGUMENT	1342:18	1342:18	12	tif
FIELD	1342:18	1342:18	13	tif
LEAF_NODE	1342:18	1342:18	14	tif
LEAF_NODE	1342:21	1342:21	12	,
ARGUMENT	1342:23	1342:23	12	TIFFTAG_BITSPERSAMPLE
FIELD	1342:23	1342:23	13	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1342:23	1342:23	14	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1342:44	1342:44	12	,
ARGUMENT	1342:46	1342:46	12	16
FIELD	1342:46	1342:46	13	16
LEAF_NODE	1342:46	1342:46	14	16
LEAF_NODE	1342:48	1342:48	12	)
LEAF_NODE	1342:49	1342:49	10	;
EXPR_STATEMENT	1343:5	1343:63	9	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT ) ;
EXPR	1343:5	1343:5	10	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT )
FUNCTION_CALL	1343:5	1343:62	11	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT )
CALLEE	1343:5	1343:5	12	TIFFSetField
LEAF_NODE	1343:5	1343:5	13	TIFFSetField
LEAF_NODE	1343:17	1343:17	12	(
ARGUMENT	1343:18	1343:18	12	tif
FIELD	1343:18	1343:18	13	tif
LEAF_NODE	1343:18	1343:18	14	tif
LEAF_NODE	1343:21	1343:21	12	,
ARGUMENT	1343:23	1343:23	12	TIFFTAG_SAMPLEFORMAT
FIELD	1343:23	1343:23	13	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1343:23	1343:23	14	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1343:43	1343:43	12	,
ARGUMENT	1343:45	1343:45	12	SAMPLEFORMAT_UINT
FIELD	1343:45	1343:45	13	SAMPLEFORMAT_UINT
LEAF_NODE	1343:45	1343:45	14	SAMPLEFORMAT_UINT
LEAF_NODE	1343:62	1343:62	12	)
LEAF_NODE	1343:63	1343:63	10	;
JUMP_STATEMENT	1344:5	1344:10	9	break DESTINATION ;
KEYWORD	1344:5	1344:5	10	break
LEAF_NODE	1344:5	1344:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1344:10	1344:10	10	;
LABEL	1345:2	1345:33	9	case PIXARLOGDATAFMT_12BITPICIO :
LEAF_NODE	1345:2	1345:2	10	case
LEAF_NODE	1345:7	1345:7	10	PIXARLOGDATAFMT_12BITPICIO
LEAF_NODE	1345:33	1345:33	10	:
EXPR_STATEMENT	1346:5	1346:49	9	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 16 ) ;
EXPR	1346:5	1346:5	10	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 16 )
FUNCTION_CALL	1346:5	1346:48	11	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 16 )
CALLEE	1346:5	1346:5	12	TIFFSetField
LEAF_NODE	1346:5	1346:5	13	TIFFSetField
LEAF_NODE	1346:17	1346:17	12	(
ARGUMENT	1346:18	1346:18	12	tif
FIELD	1346:18	1346:18	13	tif
LEAF_NODE	1346:18	1346:18	14	tif
LEAF_NODE	1346:21	1346:21	12	,
ARGUMENT	1346:23	1346:23	12	TIFFTAG_BITSPERSAMPLE
FIELD	1346:23	1346:23	13	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1346:23	1346:23	14	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1346:44	1346:44	12	,
ARGUMENT	1346:46	1346:46	12	16
FIELD	1346:46	1346:46	13	16
LEAF_NODE	1346:46	1346:46	14	16
LEAF_NODE	1346:48	1346:48	12	)
LEAF_NODE	1346:49	1346:49	10	;
EXPR_STATEMENT	1347:5	1347:62	9	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_INT ) ;
EXPR	1347:5	1347:5	10	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_INT )
FUNCTION_CALL	1347:5	1347:61	11	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_INT )
CALLEE	1347:5	1347:5	12	TIFFSetField
LEAF_NODE	1347:5	1347:5	13	TIFFSetField
LEAF_NODE	1347:17	1347:17	12	(
ARGUMENT	1347:18	1347:18	12	tif
FIELD	1347:18	1347:18	13	tif
LEAF_NODE	1347:18	1347:18	14	tif
LEAF_NODE	1347:21	1347:21	12	,
ARGUMENT	1347:23	1347:23	12	TIFFTAG_SAMPLEFORMAT
FIELD	1347:23	1347:23	13	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1347:23	1347:23	14	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1347:43	1347:43	12	,
ARGUMENT	1347:45	1347:45	12	SAMPLEFORMAT_INT
FIELD	1347:45	1347:45	13	SAMPLEFORMAT_INT
LEAF_NODE	1347:45	1347:45	14	SAMPLEFORMAT_INT
LEAF_NODE	1347:61	1347:61	12	)
LEAF_NODE	1347:62	1347:62	10	;
JUMP_STATEMENT	1348:5	1348:10	9	break DESTINATION ;
KEYWORD	1348:5	1348:5	10	break
LEAF_NODE	1348:5	1348:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1348:10	1348:10	10	;
LABEL	1349:2	1349:28	9	case PIXARLOGDATAFMT_16BIT :
LEAF_NODE	1349:2	1349:2	10	case
LEAF_NODE	1349:7	1349:7	10	PIXARLOGDATAFMT_16BIT
LEAF_NODE	1349:28	1349:28	10	:
EXPR_STATEMENT	1350:5	1350:49	9	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 16 ) ;
EXPR	1350:5	1350:5	10	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 16 )
FUNCTION_CALL	1350:5	1350:48	11	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 16 )
CALLEE	1350:5	1350:5	12	TIFFSetField
LEAF_NODE	1350:5	1350:5	13	TIFFSetField
LEAF_NODE	1350:17	1350:17	12	(
ARGUMENT	1350:18	1350:18	12	tif
FIELD	1350:18	1350:18	13	tif
LEAF_NODE	1350:18	1350:18	14	tif
LEAF_NODE	1350:21	1350:21	12	,
ARGUMENT	1350:23	1350:23	12	TIFFTAG_BITSPERSAMPLE
FIELD	1350:23	1350:23	13	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1350:23	1350:23	14	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1350:44	1350:44	12	,
ARGUMENT	1350:46	1350:46	12	16
FIELD	1350:46	1350:46	13	16
LEAF_NODE	1350:46	1350:46	14	16
LEAF_NODE	1350:48	1350:48	12	)
LEAF_NODE	1350:49	1350:49	10	;
EXPR_STATEMENT	1351:5	1351:63	9	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT ) ;
EXPR	1351:5	1351:5	10	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT )
FUNCTION_CALL	1351:5	1351:62	11	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT )
CALLEE	1351:5	1351:5	12	TIFFSetField
LEAF_NODE	1351:5	1351:5	13	TIFFSetField
LEAF_NODE	1351:17	1351:17	12	(
ARGUMENT	1351:18	1351:18	12	tif
FIELD	1351:18	1351:18	13	tif
LEAF_NODE	1351:18	1351:18	14	tif
LEAF_NODE	1351:21	1351:21	12	,
ARGUMENT	1351:23	1351:23	12	TIFFTAG_SAMPLEFORMAT
FIELD	1351:23	1351:23	13	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1351:23	1351:23	14	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1351:43	1351:43	12	,
ARGUMENT	1351:45	1351:45	12	SAMPLEFORMAT_UINT
FIELD	1351:45	1351:45	13	SAMPLEFORMAT_UINT
LEAF_NODE	1351:45	1351:45	14	SAMPLEFORMAT_UINT
LEAF_NODE	1351:62	1351:62	12	)
LEAF_NODE	1351:63	1351:63	10	;
JUMP_STATEMENT	1352:5	1352:10	9	break DESTINATION ;
KEYWORD	1352:5	1352:5	10	break
LEAF_NODE	1352:5	1352:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1352:10	1352:10	10	;
LABEL	1353:2	1353:28	9	case PIXARLOGDATAFMT_FLOAT :
LEAF_NODE	1353:2	1353:2	10	case
LEAF_NODE	1353:7	1353:7	10	PIXARLOGDATAFMT_FLOAT
LEAF_NODE	1353:28	1353:28	10	:
EXPR_STATEMENT	1354:5	1354:49	9	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 32 ) ;
EXPR	1354:5	1354:5	10	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 32 )
FUNCTION_CALL	1354:5	1354:48	11	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 32 )
CALLEE	1354:5	1354:5	12	TIFFSetField
LEAF_NODE	1354:5	1354:5	13	TIFFSetField
LEAF_NODE	1354:17	1354:17	12	(
ARGUMENT	1354:18	1354:18	12	tif
FIELD	1354:18	1354:18	13	tif
LEAF_NODE	1354:18	1354:18	14	tif
LEAF_NODE	1354:21	1354:21	12	,
ARGUMENT	1354:23	1354:23	12	TIFFTAG_BITSPERSAMPLE
FIELD	1354:23	1354:23	13	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1354:23	1354:23	14	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1354:44	1354:44	12	,
ARGUMENT	1354:46	1354:46	12	32
FIELD	1354:46	1354:46	13	32
LEAF_NODE	1354:46	1354:46	14	32
LEAF_NODE	1354:48	1354:48	12	)
LEAF_NODE	1354:49	1354:49	10	;
EXPR_STATEMENT	1355:5	1355:65	9	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_IEEEFP ) ;
EXPR	1355:5	1355:5	10	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_IEEEFP )
FUNCTION_CALL	1355:5	1355:64	11	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_IEEEFP )
CALLEE	1355:5	1355:5	12	TIFFSetField
LEAF_NODE	1355:5	1355:5	13	TIFFSetField
LEAF_NODE	1355:17	1355:17	12	(
ARGUMENT	1355:18	1355:18	12	tif
FIELD	1355:18	1355:18	13	tif
LEAF_NODE	1355:18	1355:18	14	tif
LEAF_NODE	1355:21	1355:21	12	,
ARGUMENT	1355:23	1355:23	12	TIFFTAG_SAMPLEFORMAT
FIELD	1355:23	1355:23	13	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1355:23	1355:23	14	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1355:43	1355:43	12	,
ARGUMENT	1355:45	1355:45	12	SAMPLEFORMAT_IEEEFP
FIELD	1355:45	1355:45	13	SAMPLEFORMAT_IEEEFP
LEAF_NODE	1355:45	1355:45	14	SAMPLEFORMAT_IEEEFP
LEAF_NODE	1355:64	1355:64	12	)
LEAF_NODE	1355:65	1355:65	10	;
JUMP_STATEMENT	1356:5	1356:10	9	break DESTINATION ;
KEYWORD	1356:5	1356:5	10	break
LEAF_NODE	1356:5	1356:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1356:10	1356:10	10	;
LEAF_NODE	1357:1	1357:1	8	}
EXPR_STATEMENT	1361:1	1361:70	6	tif -> tif_tilesize = isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) ( - 1 ) ;
EXPR	1361:1	1361:1	7	tif -> tif_tilesize = isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) ( - 1 )
ASSIGN	1361:1	1361:21	8	tif -> tif_tilesize = isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) ( - 1 )
LVAL	1361:1	1361:1	9	tif -> tif_tilesize
FIELD	1361:1	1361:6	10	tif -> tif_tilesize
LEAF_NODE	1361:1	1361:1	11	tif
LEAF_NODE	1361:4	1361:4	11	->
LEAF_NODE	1361:6	1361:6	11	tif_tilesize
ASSIGN_OP	1361:19	1361:19	9	=
LEAF_NODE	1361:19	1361:19	10	=
RVAL	1361:21	1361:21	9	isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) ( - 1 )
COND_EXPR	1361:21	1361:69	10	isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) ( - 1 )
CONDITION	1361:21	1361:21	11	isTiled ( tif )
FUNCTION_CALL	1361:21	1361:32	12	isTiled ( tif )
CALLEE	1361:21	1361:21	13	isTiled
LEAF_NODE	1361:21	1361:21	14	isTiled
LEAF_NODE	1361:28	1361:28	13	(
ARGUMENT	1361:29	1361:29	13	tif
FIELD	1361:29	1361:29	14	tif
LEAF_NODE	1361:29	1361:29	15	tif
LEAF_NODE	1361:32	1361:32	13	)
LEAF_NODE	1361:34	1361:34	11	?
EXPR	1361:36	1361:36	11	TIFFTileSize ( tif )
FUNCTION_CALL	1361:36	1361:52	12	TIFFTileSize ( tif )
CALLEE	1361:36	1361:36	13	TIFFTileSize
LEAF_NODE	1361:36	1361:36	14	TIFFTileSize
LEAF_NODE	1361:48	1361:48	13	(
ARGUMENT	1361:49	1361:49	13	tif
FIELD	1361:49	1361:49	14	tif
LEAF_NODE	1361:49	1361:49	15	tif
LEAF_NODE	1361:52	1361:52	13	)
LEAF_NODE	1361:54	1361:54	11	:
LEAF_NODE	1361:56	1361:56	11	(
TYPE_NAME	1361:57	1361:57	11	tmsize_t
LEAF_NODE	1361:57	1361:57	12	tmsize_t
LEAF_NODE	1361:65	1361:65	11	)
LEAF_NODE	1361:66	1361:66	11	(
UNARY_EXPR	1361:67	1361:68	11	- 1
UNARY_OPERATOR	1361:67	1361:67	12	-
LEAF_NODE	1361:67	1361:67	13	-
FIELD	1361:68	1361:68	12	1
LEAF_NODE	1361:68	1361:68	13	1
LEAF_NODE	1361:69	1361:69	11	)
LEAF_NODE	1361:70	1361:70	7	;
EXPR_STATEMENT	1362:1	1362:46	6	tif -> tif_scanlinesize = TIFFScanlineSize ( tif ) ;
EXPR	1362:1	1362:1	7	tif -> tif_scanlinesize = TIFFScanlineSize ( tif )
ASSIGN	1362:1	1362:25	8	tif -> tif_scanlinesize = TIFFScanlineSize ( tif )
LVAL	1362:1	1362:1	9	tif -> tif_scanlinesize
FIELD	1362:1	1362:6	10	tif -> tif_scanlinesize
LEAF_NODE	1362:1	1362:1	11	tif
LEAF_NODE	1362:4	1362:4	11	->
LEAF_NODE	1362:6	1362:6	11	tif_scanlinesize
ASSIGN_OP	1362:23	1362:23	9	=
LEAF_NODE	1362:23	1362:23	10	=
RVAL	1362:25	1362:25	9	TIFFScanlineSize ( tif )
FUNCTION_CALL	1362:25	1362:45	10	TIFFScanlineSize ( tif )
CALLEE	1362:25	1362:25	11	TIFFScanlineSize
LEAF_NODE	1362:25	1362:25	12	TIFFScanlineSize
LEAF_NODE	1362:41	1362:41	11	(
ARGUMENT	1362:42	1362:42	11	tif
FIELD	1362:42	1362:42	12	tif
LEAF_NODE	1362:42	1362:42	13	tif
LEAF_NODE	1362:45	1362:45	11	)
LEAF_NODE	1362:46	1362:46	7	;
EXPR_STATEMENT	1363:1	1363:11	6	result = 1 ;
EXPR	1363:1	1363:1	7	result = 1
ASSIGN	1363:1	1363:10	8	result = 1
LVAL	1363:1	1363:1	9	result
FIELD	1363:1	1363:1	10	result
LEAF_NODE	1363:1	1363:1	11	result
ASSIGN_OP	1363:8	1363:8	9	=
LEAF_NODE	1363:8	1363:8	10	=
RVAL	1363:10	1363:10	9	1
FIELD	1363:10	1363:10	10	1
LEAF_NODE	1363:10	1363:10	11	1
LEAF_NODE	1363:11	1363:11	7	;
JUMP_STATEMENT	1364:1	1364:6	6	break DESTINATION ;
KEYWORD	1364:1	1364:1	7	break
LEAF_NODE	1364:1	1364:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1364:6	1364:6	7	;
LABEL	1365:5	1365:12	6	default :
LEAF_NODE	1365:5	1365:5	7	default
LEAF_NODE	1365:12	1365:12	7	:
EXPR_STATEMENT	1366:1	1366:41	6	result = ( * sp -> vsetparent ) ( tif , tag , ap ) ;
EXPR	1366:1	1366:1	7	result = ( * sp -> vsetparent ) ( tif , tag , ap )
ASSIGN	1366:1	1366:10	8	result = ( * sp -> vsetparent ) ( tif , tag , ap )
LVAL	1366:1	1366:1	9	result
FIELD	1366:1	1366:1	10	result
LEAF_NODE	1366:1	1366:1	11	result
ASSIGN_OP	1366:8	1366:8	9	=
LEAF_NODE	1366:8	1366:8	10	=
RVAL	1366:10	1366:10	9	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	1366:10	1366:40	10	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	1366:10	1366:26	11	( * sp -> vsetparent )
LEAF_NODE	1366:10	1366:10	12	(
UNARY_EXPR	1366:11	1366:12	12	* sp -> vsetparent
UNARY_OPERATOR	1366:11	1366:11	13	*
LEAF_NODE	1366:11	1366:11	14	*
FIELD	1366:12	1366:16	13	sp -> vsetparent
LEAF_NODE	1366:12	1366:12	14	sp
LEAF_NODE	1366:14	1366:14	14	->
LEAF_NODE	1366:16	1366:16	14	vsetparent
LEAF_NODE	1366:26	1366:26	12	)
LEAF_NODE	1366:27	1366:27	11	(
ARGUMENT	1366:28	1366:28	11	tif
FIELD	1366:28	1366:28	12	tif
LEAF_NODE	1366:28	1366:28	13	tif
LEAF_NODE	1366:31	1366:31	11	,
ARGUMENT	1366:33	1366:33	11	tag
FIELD	1366:33	1366:33	12	tag
LEAF_NODE	1366:33	1366:33	13	tag
LEAF_NODE	1366:36	1366:36	11	,
ARGUMENT	1366:38	1366:38	11	ap
FIELD	1366:38	1366:38	12	ap
LEAF_NODE	1366:38	1366:38	13	ap
LEAF_NODE	1366:40	1366:40	11	)
LEAF_NODE	1366:41	1366:41	7	;
LEAF_NODE	1367:4	1367:4	5	}
LEAF_NODE	1368:4	1368:4	3	return
LEAF_NODE	1368:11	1368:11	3	(
LEAF_NODE	1368:12	1368:12	3	result
LEAF_NODE	1368:18	1368:18	3	)
LEAF_NODE	1368:19	1368:19	3	;
LEAF_NODE	1369:0	1369:0	2	}
FUNCTION_DEF	1371:0	1387:0	1	
RETURN_TYPE	1371:0	1371:7	2	static int
LEAF_NODE	1371:0	1371:0	3	static
TYPE_NAME	1371:7	1371:7	3	int
LEAF_NODE	1371:7	1371:7	4	int
FUNCTION_NAME	1372:0	1372:0	2	PixarLogVGetField
LEAF_NODE	1372:0	1372:0	3	PixarLogVGetField
PARAMETER_LIST	1372:17	1372:51	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	1372:17	1372:17	3	(
PARAMETER_DECL	1372:18	1372:24	3	TIFF * tif
TYPE	1372:18	1372:22	4	TIFF *
TYPE_NAME	1372:18	1372:18	5	TIFF
LEAF_NODE	1372:18	1372:18	6	TIFF
POINTER	1372:22	1372:22	5	*
LEAF_NODE	1372:22	1372:22	6	*
NAME	1372:24	1372:24	4	tif
LEAF_NODE	1372:24	1372:24	5	tif
LEAF_NODE	1372:27	1372:27	3	,
PARAMETER_DECL	1372:29	1372:36	3	uint32 tag
TYPE	1372:29	1372:29	4	uint32
TYPE_NAME	1372:29	1372:29	5	uint32
LEAF_NODE	1372:29	1372:29	6	uint32
NAME	1372:36	1372:36	4	tag
LEAF_NODE	1372:36	1372:36	5	tag
LEAF_NODE	1372:39	1372:39	3	,
PARAMETER_DECL	1372:41	1372:49	3	va_list ap
TYPE	1372:41	1372:41	4	va_list
TYPE_NAME	1372:41	1372:41	5	va_list
LEAF_NODE	1372:41	1372:41	6	va_list
NAME	1372:49	1372:49	4	ap
LEAF_NODE	1372:49	1372:49	5	ap
LEAF_NODE	1372:51	1372:51	3	)
LEAF_NODE	1373:0	1373:0	2	{
STATEMENTS	1374:4	1386:4	2	
SIMPLE_DECL	1374:4	1374:54	3	PixarLogState * sp ; sp = ( PixarLogState * ) tif -> tif_data ;
VAR_DECL	1374:4	1374:19	4	PixarLogState * sp ; sp = ( PixarLogState * ) tif -> tif_data
TYPE	1374:4	1374:18	5	PixarLogState *
TYPE_NAME	1374:4	1374:4	6	PixarLogState
LEAF_NODE	1374:4	1374:4	7	PixarLogState
POINTER	1374:18	1374:18	6	*
LEAF_NODE	1374:18	1374:18	7	*
NAME	1374:19	1374:19	5	sp
LEAF_NODE	1374:19	1374:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1374:19	1374:19	5	sp = ( PixarLogState * ) tif -> tif_data
ASSIGN	1374:19	1374:24	6	sp = ( PixarLogState * ) tif -> tif_data
LVAL	1374:19	1374:19	7	sp
NAME	1374:19	1374:19	8	sp
LEAF_NODE	1374:19	1374:19	9	sp
ASSIGN_OP	1374:22	1374:22	7	=
LEAF_NODE	1374:22	1374:22	8	=
RVAL	1374:24	1374:41	7	( PixarLogState * ) tif -> tif_data
LEAF_NODE	1374:24	1374:24	8	(
TYPE_NAME	1374:25	1374:25	8	PixarLogState
LEAF_NODE	1374:25	1374:25	9	PixarLogState
LEAF_NODE	1374:39	1374:39	8	*
LEAF_NODE	1374:40	1374:40	8	)
FIELD	1374:41	1374:46	8	tif -> tif_data
LEAF_NODE	1374:41	1374:41	9	tif
LEAF_NODE	1374:44	1374:44	9	->
LEAF_NODE	1374:46	1374:46	9	tif_data
LEAF_NODE	1374:54	1374:54	4	;
SELECTION	1376:4	1376:17	3	
KEYWORD	1376:4	1376:4	4	switch
LEAF_NODE	1376:4	1376:4	5	switch
LEAF_NODE	1376:11	1376:11	4	(
CONDITION	1376:12	1376:12	4	tag
EXPR	1376:12	1376:12	5	tag
FIELD	1376:12	1376:12	6	tag
LEAF_NODE	1376:12	1376:12	7	tag
LEAF_NODE	1376:15	1376:15	4	)
STATEMENTS	1376:17	1385:4	4	
LEAF_NODE	1376:17	1376:17	5	{
STATEMENTS	1377:5	1384:1	5	
LABEL	1377:5	1377:33	6	case TIFFTAG_PIXARLOGQUALITY :
LEAF_NODE	1377:5	1377:5	7	case
LEAF_NODE	1377:10	1377:10	7	TIFFTAG_PIXARLOGQUALITY
LEAF_NODE	1377:33	1377:33	7	:
LEAF_NODE	1378:1	1378:1	6	*
LEAF_NODE	1378:2	1378:2	6	va_arg
LEAF_NODE	1378:8	1378:8	6	(
LEAF_NODE	1378:9	1378:9	6	ap
LEAF_NODE	1378:11	1378:11	6	,
LEAF_NODE	1378:13	1378:13	6	int
LEAF_NODE	1378:16	1378:16	6	*
LEAF_NODE	1378:17	1378:17	6	)
LEAF_NODE	1378:19	1378:19	6	=
EXPR_STATEMENT	1378:21	1378:32	6	sp -> quality ;
EXPR	1378:21	1378:21	7	sp -> quality
FIELD	1378:21	1378:25	8	sp -> quality
LEAF_NODE	1378:21	1378:21	9	sp
LEAF_NODE	1378:23	1378:23	9	->
LEAF_NODE	1378:25	1378:25	9	quality
LEAF_NODE	1378:32	1378:32	7	;
JUMP_STATEMENT	1379:1	1379:6	6	break DESTINATION ;
KEYWORD	1379:1	1379:1	7	break
LEAF_NODE	1379:1	1379:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1379:6	1379:6	7	;
LABEL	1380:5	1380:33	6	case TIFFTAG_PIXARLOGDATAFMT :
LEAF_NODE	1380:5	1380:5	7	case
LEAF_NODE	1380:10	1380:10	7	TIFFTAG_PIXARLOGDATAFMT
LEAF_NODE	1380:33	1380:33	7	:
LEAF_NODE	1381:1	1381:1	6	*
LEAF_NODE	1381:2	1381:2	6	va_arg
LEAF_NODE	1381:8	1381:8	6	(
LEAF_NODE	1381:9	1381:9	6	ap
LEAF_NODE	1381:11	1381:11	6	,
LEAF_NODE	1381:13	1381:13	6	int
LEAF_NODE	1381:16	1381:16	6	*
LEAF_NODE	1381:17	1381:17	6	)
LEAF_NODE	1381:19	1381:19	6	=
EXPR_STATEMENT	1381:21	1381:37	6	sp -> user_datafmt ;
EXPR	1381:21	1381:21	7	sp -> user_datafmt
FIELD	1381:21	1381:25	8	sp -> user_datafmt
LEAF_NODE	1381:21	1381:21	9	sp
LEAF_NODE	1381:23	1381:23	9	->
LEAF_NODE	1381:25	1381:25	9	user_datafmt
LEAF_NODE	1381:37	1381:37	7	;
JUMP_STATEMENT	1382:1	1382:6	6	break DESTINATION ;
KEYWORD	1382:1	1382:1	7	break
LEAF_NODE	1382:1	1382:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1382:6	1382:6	7	;
LABEL	1383:5	1383:12	6	default :
LEAF_NODE	1383:5	1383:5	7	default
LEAF_NODE	1383:12	1383:12	7	:
JUMP_STATEMENT	1384:1	1384:39	6	return ( * sp -> vgetparent ) ( tif , tag , ap ) ;
KEYWORD	1384:1	1384:1	7	return
LEAF_NODE	1384:1	1384:1	8	return
DESTINATION	1384:8	1384:8	7	( * sp -> vgetparent ) ( tif , tag , ap )
EXPR	1384:8	1384:8	8	( * sp -> vgetparent ) ( tif , tag , ap )
FUNCTION_CALL	1384:8	1384:38	9	( * sp -> vgetparent ) ( tif , tag , ap )
CALLEE	1384:8	1384:24	10	( * sp -> vgetparent )
LEAF_NODE	1384:8	1384:8	11	(
UNARY_EXPR	1384:9	1384:10	11	* sp -> vgetparent
UNARY_OPERATOR	1384:9	1384:9	12	*
LEAF_NODE	1384:9	1384:9	13	*
FIELD	1384:10	1384:14	12	sp -> vgetparent
LEAF_NODE	1384:10	1384:10	13	sp
LEAF_NODE	1384:12	1384:12	13	->
LEAF_NODE	1384:14	1384:14	13	vgetparent
LEAF_NODE	1384:24	1384:24	11	)
LEAF_NODE	1384:25	1384:25	10	(
ARGUMENT	1384:26	1384:26	10	tif
FIELD	1384:26	1384:26	11	tif
LEAF_NODE	1384:26	1384:26	12	tif
LEAF_NODE	1384:29	1384:29	10	,
ARGUMENT	1384:31	1384:31	10	tag
FIELD	1384:31	1384:31	11	tag
LEAF_NODE	1384:31	1384:31	12	tag
LEAF_NODE	1384:34	1384:34	10	,
ARGUMENT	1384:36	1384:36	10	ap
FIELD	1384:36	1384:36	11	ap
LEAF_NODE	1384:36	1384:36	12	ap
LEAF_NODE	1384:38	1384:38	10	)
LEAF_NODE	1384:39	1384:39	7	;
LEAF_NODE	1385:4	1385:4	5	}
JUMP_STATEMENT	1386:4	1386:14	3	return ( 1 ) ;
KEYWORD	1386:4	1386:4	4	return
LEAF_NODE	1386:4	1386:4	5	return
DESTINATION	1386:11	1386:11	4	( 1 )
EXPR	1386:11	1386:13	5	( 1 )
LEAF_NODE	1386:11	1386:11	6	(
FIELD	1386:12	1386:12	6	1
LEAF_NODE	1386:12	1386:12	7	1
LEAF_NODE	1386:13	1386:13	6	)
LEAF_NODE	1386:14	1386:14	4	;
LEAF_NODE	1387:0	1387:0	2	}
FUNCTION_DEF	1394:0	1467:0	1	
RETURN_TYPE	1394:0	1394:0	2	int
TYPE_NAME	1394:0	1394:0	3	int
LEAF_NODE	1394:0	1394:0	4	int
FUNCTION_NAME	1395:0	1395:0	2	TIFFInitPixarLog
LEAF_NODE	1395:0	1395:0	3	TIFFInitPixarLog
PARAMETER_LIST	1395:16	1395:38	2	( TIFF * tif , int scheme )
LEAF_NODE	1395:16	1395:16	3	(
PARAMETER_DECL	1395:17	1395:23	3	TIFF * tif
TYPE	1395:17	1395:21	4	TIFF *
TYPE_NAME	1395:17	1395:17	5	TIFF
LEAF_NODE	1395:17	1395:17	6	TIFF
POINTER	1395:21	1395:21	5	*
LEAF_NODE	1395:21	1395:21	6	*
NAME	1395:23	1395:23	4	tif
LEAF_NODE	1395:23	1395:23	5	tif
LEAF_NODE	1395:26	1395:26	3	,
PARAMETER_DECL	1395:28	1395:32	3	int scheme
TYPE	1395:28	1395:28	4	int
TYPE_NAME	1395:28	1395:28	5	int
LEAF_NODE	1395:28	1395:28	6	int
NAME	1395:32	1395:32	4	scheme
LEAF_NODE	1395:32	1395:32	5	scheme
LEAF_NODE	1395:38	1395:38	3	)
LEAF_NODE	1396:0	1396:0	2	{
STATEMENTS	1397:1	1466:1	2	
LEAF_NODE	1397:1	1397:1	3	static
SIMPLE_DECL	1397:8	1397:48	3	const char [ ] module ; module = "TIFFInitPixarLog" ;
VAR_DECL	1397:8	1397:19	4	const char [ ] module ; module = "TIFFInitPixarLog"
TYPE	1397:8	1397:25	5	const char [ ]
TYPE_NAME	1397:8	1397:14	6	const char
LEAF_NODE	1397:8	1397:8	7	const
LEAF_NODE	1397:14	1397:14	7	char
TYPE_SUFFIX	1397:25	1397:26	6	[ ]
LEAF_NODE	1397:25	1397:25	7	[
LEAF_NODE	1397:26	1397:26	7	]
NAME	1397:19	1397:19	5	module
LEAF_NODE	1397:19	1397:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1397:19	1397:19	5	module = "TIFFInitPixarLog"
ASSIGN	1397:19	1397:30	6	module = "TIFFInitPixarLog"
LVAL	1397:19	1397:19	7	module
NAME	1397:19	1397:19	8	module
LEAF_NODE	1397:19	1397:19	9	module
ASSIGN_OP	1397:28	1397:28	7	=
LEAF_NODE	1397:28	1397:28	8	=
RVAL	1397:30	1397:30	7	"TIFFInitPixarLog"
FIELD	1397:30	1397:30	8	"TIFFInitPixarLog"
LEAF_NODE	1397:30	1397:30	9	"TIFFInitPixarLog"
LEAF_NODE	1397:48	1397:48	4	;
SIMPLE_DECL	1399:1	1399:18	3	PixarLogState * sp ;
VAR_DECL	1399:1	1399:16	4	PixarLogState * sp
TYPE	1399:1	1399:14	5	PixarLogState *
TYPE_NAME	1399:1	1399:1	6	PixarLogState
LEAF_NODE	1399:1	1399:1	7	PixarLogState
POINTER	1399:14	1399:14	6	*
LEAF_NODE	1399:14	1399:14	7	*
NAME	1399:16	1399:16	5	sp
LEAF_NODE	1399:16	1399:16	6	sp
LEAF_NODE	1399:18	1399:18	4	;
EXPR_STATEMENT	1401:1	1401:39	3	assert ( scheme == COMPRESSION_PIXARLOG ) ;
EXPR	1401:1	1401:1	4	assert ( scheme == COMPRESSION_PIXARLOG )
FUNCTION_CALL	1401:1	1401:38	5	assert ( scheme == COMPRESSION_PIXARLOG )
CALLEE	1401:1	1401:1	6	assert
LEAF_NODE	1401:1	1401:1	7	assert
LEAF_NODE	1401:7	1401:7	6	(
ARGUMENT	1401:8	1401:18	6	scheme == COMPRESSION_PIXARLOG
FIELD	1401:8	1401:8	7	scheme
LEAF_NODE	1401:8	1401:8	8	scheme
EQ_OPERATOR	1401:15	1401:15	7	==
LEAF_NODE	1401:15	1401:15	8	==
FIELD	1401:18	1401:18	7	COMPRESSION_PIXARLOG
LEAF_NODE	1401:18	1401:18	8	COMPRESSION_PIXARLOG
LEAF_NODE	1401:38	1401:38	6	)
LEAF_NODE	1401:39	1401:39	4	;
SELECTION	1406:1	1407:42	3	
KEYWORD	1406:1	1406:1	4	if
LEAF_NODE	1406:1	1406:1	5	if
LEAF_NODE	1406:4	1406:4	4	(
CONDITION	1406:5	1406:5	4	! _TIFFMergeFields ( tif , pixarlogFields , TIFFArrayCount ( pixarlogFields ) )
EXPR	1406:5	1406:5	5	! _TIFFMergeFields ( tif , pixarlogFields , TIFFArrayCount ( pixarlogFields ) )
UNARY_EXPR	1406:5	1406:6	6	! _TIFFMergeFields ( tif , pixarlogFields , TIFFArrayCount ( pixarlogFields ) )
UNARY_OPERATOR	1406:5	1406:5	7	!
LEAF_NODE	1406:5	1406:5	8	!
FUNCTION_CALL	1406:6	1407:39	7	_TIFFMergeFields ( tif , pixarlogFields , TIFFArrayCount ( pixarlogFields ) )
CALLEE	1406:6	1406:6	8	_TIFFMergeFields
LEAF_NODE	1406:6	1406:6	9	_TIFFMergeFields
LEAF_NODE	1406:22	1406:22	8	(
ARGUMENT	1406:23	1406:23	8	tif
FIELD	1406:23	1406:23	9	tif
LEAF_NODE	1406:23	1406:23	10	tif
LEAF_NODE	1406:26	1406:26	8	,
ARGUMENT	1406:28	1406:28	8	pixarlogFields
FIELD	1406:28	1406:28	9	pixarlogFields
LEAF_NODE	1406:28	1406:28	10	pixarlogFields
LEAF_NODE	1406:42	1406:42	8	,
ARGUMENT	1407:9	1407:9	8	TIFFArrayCount ( pixarlogFields )
FUNCTION_CALL	1407:9	1407:38	9	TIFFArrayCount ( pixarlogFields )
CALLEE	1407:9	1407:9	10	TIFFArrayCount
LEAF_NODE	1407:9	1407:9	11	TIFFArrayCount
LEAF_NODE	1407:23	1407:23	10	(
ARGUMENT	1407:24	1407:24	10	pixarlogFields
FIELD	1407:24	1407:24	11	pixarlogFields
LEAF_NODE	1407:24	1407:24	12	pixarlogFields
LEAF_NODE	1407:38	1407:38	10	)
LEAF_NODE	1407:39	1407:39	8	)
LEAF_NODE	1407:40	1407:40	4	)
STATEMENTS	1407:42	1411:1	4	
LEAF_NODE	1407:42	1407:42	5	{
STATEMENTS	1408:2	1410:2	5	
EXPR_STATEMENT	1408:2	1409:54	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging PixarLog codec-specific tags failed" ) ;
EXPR	1408:2	1408:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging PixarLog codec-specific tags failed" )
FUNCTION_CALL	1408:2	1409:53	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging PixarLog codec-specific tags failed" )
CALLEE	1408:2	1408:2	9	TIFFErrorExt
LEAF_NODE	1408:2	1408:2	10	TIFFErrorExt
LEAF_NODE	1408:14	1408:14	9	(
ARGUMENT	1408:15	1408:15	9	tif -> tif_clientdata
FIELD	1408:15	1408:20	10	tif -> tif_clientdata
LEAF_NODE	1408:15	1408:15	11	tif
LEAF_NODE	1408:18	1408:18	11	->
LEAF_NODE	1408:20	1408:20	11	tif_clientdata
LEAF_NODE	1408:34	1408:34	9	,
ARGUMENT	1408:36	1408:36	9	module
FIELD	1408:36	1408:36	10	module
LEAF_NODE	1408:36	1408:36	11	module
LEAF_NODE	1408:42	1408:42	9	,
ARGUMENT	1409:8	1409:8	9	"Merging PixarLog codec-specific tags failed"
FIELD	1409:8	1409:8	10	"Merging PixarLog codec-specific tags failed"
LEAF_NODE	1409:8	1409:8	11	"Merging PixarLog codec-specific tags failed"
LEAF_NODE	1409:53	1409:53	9	)
LEAF_NODE	1409:54	1409:54	7	;
JUMP_STATEMENT	1410:2	1410:10	6	return 0 ;
KEYWORD	1410:2	1410:2	7	return
LEAF_NODE	1410:2	1410:2	8	return
DESTINATION	1410:9	1410:9	7	0
EXPR	1410:9	1410:9	8	0
FIELD	1410:9	1410:9	9	0
LEAF_NODE	1410:9	1410:9	10	0
LEAF_NODE	1410:10	1410:10	7	;
LEAF_NODE	1411:1	1411:1	5	}
EXPR_STATEMENT	1416:1	1416:61	3	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( PixarLogState ) ) ;
EXPR	1416:1	1416:1	4	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( PixarLogState ) )
ASSIGN	1416:1	1416:17	5	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( PixarLogState ) )
LVAL	1416:1	1416:1	6	tif -> tif_data
FIELD	1416:1	1416:6	7	tif -> tif_data
LEAF_NODE	1416:1	1416:1	8	tif
LEAF_NODE	1416:4	1416:4	8	->
LEAF_NODE	1416:6	1416:6	8	tif_data
ASSIGN_OP	1416:15	1416:15	6	=
LEAF_NODE	1416:15	1416:15	7	=
RVAL	1416:17	1416:26	6	( uint8 * ) _TIFFmalloc ( sizeof ( PixarLogState ) )
LEAF_NODE	1416:17	1416:17	7	(
TYPE_NAME	1416:18	1416:18	7	uint8
LEAF_NODE	1416:18	1416:18	8	uint8
LEAF_NODE	1416:23	1416:23	7	*
LEAF_NODE	1416:24	1416:24	7	)
FUNCTION_CALL	1416:26	1416:60	7	_TIFFmalloc ( sizeof ( PixarLogState ) )
CALLEE	1416:26	1416:26	8	_TIFFmalloc
LEAF_NODE	1416:26	1416:26	9	_TIFFmalloc
LEAF_NODE	1416:37	1416:37	8	(
ARGUMENT	1416:38	1416:38	8	sizeof ( PixarLogState )
FUNCTION_CALL	1416:38	1416:59	9	sizeof ( PixarLogState )
CALLEE	1416:38	1416:38	10	sizeof
LEAF_NODE	1416:38	1416:38	11	sizeof
LEAF_NODE	1416:45	1416:45	10	(
ARGUMENT	1416:46	1416:46	10	PixarLogState
FIELD	1416:46	1416:46	11	PixarLogState
LEAF_NODE	1416:46	1416:46	12	PixarLogState
LEAF_NODE	1416:59	1416:59	10	)
LEAF_NODE	1416:60	1416:60	8	)
LEAF_NODE	1416:61	1416:61	4	;
SELECTION	1417:1	1418:2	3	
KEYWORD	1417:1	1417:1	4	if
LEAF_NODE	1417:1	1417:1	5	if
LEAF_NODE	1417:4	1417:4	4	(
CONDITION	1417:5	1417:5	4	tif -> tif_data == NULL
EXPR	1417:5	1417:22	5	tif -> tif_data == NULL
FIELD	1417:5	1417:10	6	tif -> tif_data
LEAF_NODE	1417:5	1417:5	7	tif
LEAF_NODE	1417:8	1417:8	7	->
LEAF_NODE	1417:10	1417:10	7	tif_data
EQ_OPERATOR	1417:19	1417:19	6	==
LEAF_NODE	1417:19	1417:19	7	==
FIELD	1417:22	1417:22	6	NULL
LEAF_NODE	1417:22	1417:22	7	NULL
LEAF_NODE	1417:26	1417:26	4	)
STATEMENTS	1418:2	1418:2	4	
JUMP_STATEMENT	1418:2	1418:10	5	goto bad ;
KEYWORD	1418:2	1418:2	6	goto
LEAF_NODE	1418:2	1418:2	7	goto
DESTINATION	1418:7	1418:7	6	bad
LEAF_NODE	1418:7	1418:7	7	bad
LEAF_NODE	1418:10	1418:10	6	;
EXPR_STATEMENT	1419:1	1419:36	3	sp = ( PixarLogState * ) tif -> tif_data ;
EXPR	1419:1	1419:1	4	sp = ( PixarLogState * ) tif -> tif_data
ASSIGN	1419:1	1419:6	5	sp = ( PixarLogState * ) tif -> tif_data
LVAL	1419:1	1419:1	6	sp
FIELD	1419:1	1419:1	7	sp
LEAF_NODE	1419:1	1419:1	8	sp
ASSIGN_OP	1419:4	1419:4	6	=
LEAF_NODE	1419:4	1419:4	7	=
RVAL	1419:6	1419:23	6	( PixarLogState * ) tif -> tif_data
LEAF_NODE	1419:6	1419:6	7	(
TYPE_NAME	1419:7	1419:7	7	PixarLogState
LEAF_NODE	1419:7	1419:7	8	PixarLogState
LEAF_NODE	1419:20	1419:20	7	*
LEAF_NODE	1419:21	1419:21	7	)
FIELD	1419:23	1419:28	7	tif -> tif_data
LEAF_NODE	1419:23	1419:23	8	tif
LEAF_NODE	1419:26	1419:26	8	->
LEAF_NODE	1419:28	1419:28	8	tif_data
LEAF_NODE	1419:36	1419:36	4	;
EXPR_STATEMENT	1420:1	1420:33	3	_TIFFmemset ( sp , 0 , sizeof ( * sp ) ) ;
EXPR	1420:1	1420:1	4	_TIFFmemset ( sp , 0 , sizeof ( * sp ) )
FUNCTION_CALL	1420:1	1420:32	5	_TIFFmemset ( sp , 0 , sizeof ( * sp ) )
CALLEE	1420:1	1420:1	6	_TIFFmemset
LEAF_NODE	1420:1	1420:1	7	_TIFFmemset
LEAF_NODE	1420:12	1420:12	6	(
ARGUMENT	1420:13	1420:13	6	sp
FIELD	1420:13	1420:13	7	sp
LEAF_NODE	1420:13	1420:13	8	sp
LEAF_NODE	1420:15	1420:15	6	,
ARGUMENT	1420:17	1420:17	6	0
FIELD	1420:17	1420:17	7	0
LEAF_NODE	1420:17	1420:17	8	0
LEAF_NODE	1420:18	1420:18	6	,
ARGUMENT	1420:20	1420:20	6	sizeof ( * sp )
FUNCTION_CALL	1420:20	1420:31	7	sizeof ( * sp )
CALLEE	1420:20	1420:20	8	sizeof
LEAF_NODE	1420:20	1420:20	9	sizeof
LEAF_NODE	1420:27	1420:27	8	(
ARGUMENT	1420:28	1420:28	8	* sp
UNARY_EXPR	1420:28	1420:29	9	* sp
UNARY_OPERATOR	1420:28	1420:28	10	*
LEAF_NODE	1420:28	1420:28	11	*
FIELD	1420:29	1420:29	10	sp
LEAF_NODE	1420:29	1420:29	11	sp
LEAF_NODE	1420:31	1420:31	8	)
LEAF_NODE	1420:32	1420:32	6	)
LEAF_NODE	1420:33	1420:33	4	;
EXPR_STATEMENT	1421:1	1421:32	3	sp -> stream . data_type = Z_BINARY ;
EXPR	1421:1	1421:1	4	sp -> stream . data_type = Z_BINARY
ASSIGN	1421:1	1421:24	5	sp -> stream . data_type = Z_BINARY
LVAL	1421:1	1421:1	6	sp -> stream . data_type
FIELD	1421:1	1421:12	7	sp -> stream . data_type
LEAF_NODE	1421:1	1421:1	8	sp
LEAF_NODE	1421:3	1421:3	8	->
LEAF_NODE	1421:5	1421:5	8	stream
LEAF_NODE	1421:11	1421:11	8	.
LEAF_NODE	1421:12	1421:12	8	data_type
ASSIGN_OP	1421:22	1421:22	6	=
LEAF_NODE	1421:22	1421:22	7	=
RVAL	1421:24	1421:24	6	Z_BINARY
FIELD	1421:24	1421:24	7	Z_BINARY
LEAF_NODE	1421:24	1421:24	8	Z_BINARY
LEAF_NODE	1421:32	1421:32	4	;
EXPR_STATEMENT	1422:1	1422:43	3	sp -> user_datafmt = PIXARLOGDATAFMT_UNKNOWN ;
EXPR	1422:1	1422:1	4	sp -> user_datafmt = PIXARLOGDATAFMT_UNKNOWN
ASSIGN	1422:1	1422:20	5	sp -> user_datafmt = PIXARLOGDATAFMT_UNKNOWN
LVAL	1422:1	1422:1	6	sp -> user_datafmt
FIELD	1422:1	1422:5	7	sp -> user_datafmt
LEAF_NODE	1422:1	1422:1	8	sp
LEAF_NODE	1422:3	1422:3	8	->
LEAF_NODE	1422:5	1422:5	8	user_datafmt
ASSIGN_OP	1422:18	1422:18	6	=
LEAF_NODE	1422:18	1422:18	7	=
RVAL	1422:20	1422:20	6	PIXARLOGDATAFMT_UNKNOWN
FIELD	1422:20	1422:20	7	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	1422:20	1422:20	8	PIXARLOGDATAFMT_UNKNOWN
LEAF_NODE	1422:43	1422:43	4	;
EXPR_STATEMENT	1427:1	1427:39	3	tif -> tif_fixuptags = PixarLogFixupTags ;
EXPR	1427:1	1427:1	4	tif -> tif_fixuptags = PixarLogFixupTags
ASSIGN	1427:1	1427:22	5	tif -> tif_fixuptags = PixarLogFixupTags
LVAL	1427:1	1427:1	6	tif -> tif_fixuptags
FIELD	1427:1	1427:6	7	tif -> tif_fixuptags
LEAF_NODE	1427:1	1427:1	8	tif
LEAF_NODE	1427:4	1427:4	8	->
LEAF_NODE	1427:6	1427:6	8	tif_fixuptags
ASSIGN_OP	1427:20	1427:20	6	=
LEAF_NODE	1427:20	1427:20	7	=
RVAL	1427:22	1427:22	6	PixarLogFixupTags
FIELD	1427:22	1427:22	7	PixarLogFixupTags
LEAF_NODE	1427:22	1427:22	8	PixarLogFixupTags
LEAF_NODE	1427:39	1427:39	4	;
EXPR_STATEMENT	1428:1	1428:43	3	tif -> tif_setupdecode = PixarLogSetupDecode ;
EXPR	1428:1	1428:1	4	tif -> tif_setupdecode = PixarLogSetupDecode
ASSIGN	1428:1	1428:24	5	tif -> tif_setupdecode = PixarLogSetupDecode
LVAL	1428:1	1428:1	6	tif -> tif_setupdecode
FIELD	1428:1	1428:6	7	tif -> tif_setupdecode
LEAF_NODE	1428:1	1428:1	8	tif
LEAF_NODE	1428:4	1428:4	8	->
LEAF_NODE	1428:6	1428:6	8	tif_setupdecode
ASSIGN_OP	1428:22	1428:22	6	=
LEAF_NODE	1428:22	1428:22	7	=
RVAL	1428:24	1428:24	6	PixarLogSetupDecode
FIELD	1428:24	1428:24	7	PixarLogSetupDecode
LEAF_NODE	1428:24	1428:24	8	PixarLogSetupDecode
LEAF_NODE	1428:43	1428:43	4	;
EXPR_STATEMENT	1429:1	1429:39	3	tif -> tif_predecode = PixarLogPreDecode ;
EXPR	1429:1	1429:1	4	tif -> tif_predecode = PixarLogPreDecode
ASSIGN	1429:1	1429:22	5	tif -> tif_predecode = PixarLogPreDecode
LVAL	1429:1	1429:1	6	tif -> tif_predecode
FIELD	1429:1	1429:6	7	tif -> tif_predecode
LEAF_NODE	1429:1	1429:1	8	tif
LEAF_NODE	1429:4	1429:4	8	->
LEAF_NODE	1429:6	1429:6	8	tif_predecode
ASSIGN_OP	1429:20	1429:20	6	=
LEAF_NODE	1429:20	1429:20	7	=
RVAL	1429:22	1429:22	6	PixarLogPreDecode
FIELD	1429:22	1429:22	7	PixarLogPreDecode
LEAF_NODE	1429:22	1429:22	8	PixarLogPreDecode
LEAF_NODE	1429:39	1429:39	4	;
EXPR_STATEMENT	1430:1	1430:36	3	tif -> tif_decoderow = PixarLogDecode ;
EXPR	1430:1	1430:1	4	tif -> tif_decoderow = PixarLogDecode
ASSIGN	1430:1	1430:22	5	tif -> tif_decoderow = PixarLogDecode
LVAL	1430:1	1430:1	6	tif -> tif_decoderow
FIELD	1430:1	1430:6	7	tif -> tif_decoderow
LEAF_NODE	1430:1	1430:1	8	tif
LEAF_NODE	1430:4	1430:4	8	->
LEAF_NODE	1430:6	1430:6	8	tif_decoderow
ASSIGN_OP	1430:20	1430:20	6	=
LEAF_NODE	1430:20	1430:20	7	=
RVAL	1430:22	1430:22	6	PixarLogDecode
FIELD	1430:22	1430:22	7	PixarLogDecode
LEAF_NODE	1430:22	1430:22	8	PixarLogDecode
LEAF_NODE	1430:36	1430:36	4	;
EXPR_STATEMENT	1431:1	1431:38	3	tif -> tif_decodestrip = PixarLogDecode ;
EXPR	1431:1	1431:1	4	tif -> tif_decodestrip = PixarLogDecode
ASSIGN	1431:1	1431:24	5	tif -> tif_decodestrip = PixarLogDecode
LVAL	1431:1	1431:1	6	tif -> tif_decodestrip
FIELD	1431:1	1431:6	7	tif -> tif_decodestrip
LEAF_NODE	1431:1	1431:1	8	tif
LEAF_NODE	1431:4	1431:4	8	->
LEAF_NODE	1431:6	1431:6	8	tif_decodestrip
ASSIGN_OP	1431:22	1431:22	6	=
LEAF_NODE	1431:22	1431:22	7	=
RVAL	1431:24	1431:24	6	PixarLogDecode
FIELD	1431:24	1431:24	7	PixarLogDecode
LEAF_NODE	1431:24	1431:24	8	PixarLogDecode
LEAF_NODE	1431:38	1431:38	4	;
EXPR_STATEMENT	1432:1	1432:37	3	tif -> tif_decodetile = PixarLogDecode ;
EXPR	1432:1	1432:1	4	tif -> tif_decodetile = PixarLogDecode
ASSIGN	1432:1	1432:23	5	tif -> tif_decodetile = PixarLogDecode
LVAL	1432:1	1432:1	6	tif -> tif_decodetile
FIELD	1432:1	1432:6	7	tif -> tif_decodetile
LEAF_NODE	1432:1	1432:1	8	tif
LEAF_NODE	1432:4	1432:4	8	->
LEAF_NODE	1432:6	1432:6	8	tif_decodetile
ASSIGN_OP	1432:21	1432:21	6	=
LEAF_NODE	1432:21	1432:21	7	=
RVAL	1432:23	1432:23	6	PixarLogDecode
FIELD	1432:23	1432:23	7	PixarLogDecode
LEAF_NODE	1432:23	1432:23	8	PixarLogDecode
LEAF_NODE	1432:37	1432:37	4	;
EXPR_STATEMENT	1433:1	1433:43	3	tif -> tif_setupencode = PixarLogSetupEncode ;
EXPR	1433:1	1433:1	4	tif -> tif_setupencode = PixarLogSetupEncode
ASSIGN	1433:1	1433:24	5	tif -> tif_setupencode = PixarLogSetupEncode
LVAL	1433:1	1433:1	6	tif -> tif_setupencode
FIELD	1433:1	1433:6	7	tif -> tif_setupencode
LEAF_NODE	1433:1	1433:1	8	tif
LEAF_NODE	1433:4	1433:4	8	->
LEAF_NODE	1433:6	1433:6	8	tif_setupencode
ASSIGN_OP	1433:22	1433:22	6	=
LEAF_NODE	1433:22	1433:22	7	=
RVAL	1433:24	1433:24	6	PixarLogSetupEncode
FIELD	1433:24	1433:24	7	PixarLogSetupEncode
LEAF_NODE	1433:24	1433:24	8	PixarLogSetupEncode
LEAF_NODE	1433:43	1433:43	4	;
EXPR_STATEMENT	1434:1	1434:39	3	tif -> tif_preencode = PixarLogPreEncode ;
EXPR	1434:1	1434:1	4	tif -> tif_preencode = PixarLogPreEncode
ASSIGN	1434:1	1434:22	5	tif -> tif_preencode = PixarLogPreEncode
LVAL	1434:1	1434:1	6	tif -> tif_preencode
FIELD	1434:1	1434:6	7	tif -> tif_preencode
LEAF_NODE	1434:1	1434:1	8	tif
LEAF_NODE	1434:4	1434:4	8	->
LEAF_NODE	1434:6	1434:6	8	tif_preencode
ASSIGN_OP	1434:20	1434:20	6	=
LEAF_NODE	1434:20	1434:20	7	=
RVAL	1434:22	1434:22	6	PixarLogPreEncode
FIELD	1434:22	1434:22	7	PixarLogPreEncode
LEAF_NODE	1434:22	1434:22	8	PixarLogPreEncode
LEAF_NODE	1434:39	1434:39	4	;
EXPR_STATEMENT	1435:1	1435:41	3	tif -> tif_postencode = PixarLogPostEncode ;
EXPR	1435:1	1435:1	4	tif -> tif_postencode = PixarLogPostEncode
ASSIGN	1435:1	1435:23	5	tif -> tif_postencode = PixarLogPostEncode
LVAL	1435:1	1435:1	6	tif -> tif_postencode
FIELD	1435:1	1435:6	7	tif -> tif_postencode
LEAF_NODE	1435:1	1435:1	8	tif
LEAF_NODE	1435:4	1435:4	8	->
LEAF_NODE	1435:6	1435:6	8	tif_postencode
ASSIGN_OP	1435:21	1435:21	6	=
LEAF_NODE	1435:21	1435:21	7	=
RVAL	1435:23	1435:23	6	PixarLogPostEncode
FIELD	1435:23	1435:23	7	PixarLogPostEncode
LEAF_NODE	1435:23	1435:23	8	PixarLogPostEncode
LEAF_NODE	1435:41	1435:41	4	;
EXPR_STATEMENT	1436:1	1436:36	3	tif -> tif_encoderow = PixarLogEncode ;
EXPR	1436:1	1436:1	4	tif -> tif_encoderow = PixarLogEncode
ASSIGN	1436:1	1436:22	5	tif -> tif_encoderow = PixarLogEncode
LVAL	1436:1	1436:1	6	tif -> tif_encoderow
FIELD	1436:1	1436:6	7	tif -> tif_encoderow
LEAF_NODE	1436:1	1436:1	8	tif
LEAF_NODE	1436:4	1436:4	8	->
LEAF_NODE	1436:6	1436:6	8	tif_encoderow
ASSIGN_OP	1436:20	1436:20	6	=
LEAF_NODE	1436:20	1436:20	7	=
RVAL	1436:22	1436:22	6	PixarLogEncode
FIELD	1436:22	1436:22	7	PixarLogEncode
LEAF_NODE	1436:22	1436:22	8	PixarLogEncode
LEAF_NODE	1436:36	1436:36	4	;
EXPR_STATEMENT	1437:1	1437:38	3	tif -> tif_encodestrip = PixarLogEncode ;
EXPR	1437:1	1437:1	4	tif -> tif_encodestrip = PixarLogEncode
ASSIGN	1437:1	1437:24	5	tif -> tif_encodestrip = PixarLogEncode
LVAL	1437:1	1437:1	6	tif -> tif_encodestrip
FIELD	1437:1	1437:6	7	tif -> tif_encodestrip
LEAF_NODE	1437:1	1437:1	8	tif
LEAF_NODE	1437:4	1437:4	8	->
LEAF_NODE	1437:6	1437:6	8	tif_encodestrip
ASSIGN_OP	1437:22	1437:22	6	=
LEAF_NODE	1437:22	1437:22	7	=
RVAL	1437:24	1437:24	6	PixarLogEncode
FIELD	1437:24	1437:24	7	PixarLogEncode
LEAF_NODE	1437:24	1437:24	8	PixarLogEncode
LEAF_NODE	1437:38	1437:38	4	;
EXPR_STATEMENT	1438:1	1438:37	3	tif -> tif_encodetile = PixarLogEncode ;
EXPR	1438:1	1438:1	4	tif -> tif_encodetile = PixarLogEncode
ASSIGN	1438:1	1438:23	5	tif -> tif_encodetile = PixarLogEncode
LVAL	1438:1	1438:1	6	tif -> tif_encodetile
FIELD	1438:1	1438:6	7	tif -> tif_encodetile
LEAF_NODE	1438:1	1438:1	8	tif
LEAF_NODE	1438:4	1438:4	8	->
LEAF_NODE	1438:6	1438:6	8	tif_encodetile
ASSIGN_OP	1438:21	1438:21	6	=
LEAF_NODE	1438:21	1438:21	7	=
RVAL	1438:23	1438:23	6	PixarLogEncode
FIELD	1438:23	1438:23	7	PixarLogEncode
LEAF_NODE	1438:23	1438:23	8	PixarLogEncode
LEAF_NODE	1438:37	1438:37	4	;
EXPR_STATEMENT	1439:1	1439:31	3	tif -> tif_close = PixarLogClose ;
EXPR	1439:1	1439:1	4	tif -> tif_close = PixarLogClose
ASSIGN	1439:1	1439:18	5	tif -> tif_close = PixarLogClose
LVAL	1439:1	1439:1	6	tif -> tif_close
FIELD	1439:1	1439:6	7	tif -> tif_close
LEAF_NODE	1439:1	1439:1	8	tif
LEAF_NODE	1439:4	1439:4	8	->
LEAF_NODE	1439:6	1439:6	8	tif_close
ASSIGN_OP	1439:16	1439:16	6	=
LEAF_NODE	1439:16	1439:16	7	=
RVAL	1439:18	1439:18	6	PixarLogClose
FIELD	1439:18	1439:18	7	PixarLogClose
LEAF_NODE	1439:18	1439:18	8	PixarLogClose
LEAF_NODE	1439:31	1439:31	4	;
EXPR_STATEMENT	1440:1	1440:35	3	tif -> tif_cleanup = PixarLogCleanup ;
EXPR	1440:1	1440:1	4	tif -> tif_cleanup = PixarLogCleanup
ASSIGN	1440:1	1440:20	5	tif -> tif_cleanup = PixarLogCleanup
LVAL	1440:1	1440:1	6	tif -> tif_cleanup
FIELD	1440:1	1440:6	7	tif -> tif_cleanup
LEAF_NODE	1440:1	1440:1	8	tif
LEAF_NODE	1440:4	1440:4	8	->
LEAF_NODE	1440:6	1440:6	8	tif_cleanup
ASSIGN_OP	1440:18	1440:18	6	=
LEAF_NODE	1440:18	1440:18	7	=
RVAL	1440:20	1440:20	6	PixarLogCleanup
FIELD	1440:20	1440:20	7	PixarLogCleanup
LEAF_NODE	1440:20	1440:20	8	PixarLogCleanup
LEAF_NODE	1440:35	1440:35	4	;
EXPR_STATEMENT	1443:1	1443:47	3	sp -> vgetparent = tif -> tif_tagmethods . vgetfield ;
EXPR	1443:1	1443:1	4	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
ASSIGN	1443:1	1443:18	5	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
LVAL	1443:1	1443:1	6	sp -> vgetparent
FIELD	1443:1	1443:5	7	sp -> vgetparent
LEAF_NODE	1443:1	1443:1	8	sp
LEAF_NODE	1443:3	1443:3	8	->
LEAF_NODE	1443:5	1443:5	8	vgetparent
ASSIGN_OP	1443:16	1443:16	6	=
LEAF_NODE	1443:16	1443:16	7	=
RVAL	1443:18	1443:18	6	tif -> tif_tagmethods . vgetfield
FIELD	1443:18	1443:38	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1443:18	1443:18	8	tif
LEAF_NODE	1443:21	1443:21	8	->
LEAF_NODE	1443:23	1443:23	8	tif_tagmethods
LEAF_NODE	1443:37	1443:37	8	.
LEAF_NODE	1443:38	1443:38	8	vgetfield
LEAF_NODE	1443:47	1443:47	4	;
EXPR_STATEMENT	1444:1	1444:50	3	tif -> tif_tagmethods . vgetfield = PixarLogVGetField ;
EXPR	1444:1	1444:1	4	tif -> tif_tagmethods . vgetfield = PixarLogVGetField
ASSIGN	1444:1	1444:33	5	tif -> tif_tagmethods . vgetfield = PixarLogVGetField
LVAL	1444:1	1444:1	6	tif -> tif_tagmethods . vgetfield
FIELD	1444:1	1444:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1444:1	1444:1	8	tif
LEAF_NODE	1444:4	1444:4	8	->
LEAF_NODE	1444:6	1444:6	8	tif_tagmethods
LEAF_NODE	1444:20	1444:20	8	.
LEAF_NODE	1444:21	1444:21	8	vgetfield
ASSIGN_OP	1444:31	1444:31	6	=
LEAF_NODE	1444:31	1444:31	7	=
RVAL	1444:33	1444:33	6	PixarLogVGetField
FIELD	1444:33	1444:33	7	PixarLogVGetField
LEAF_NODE	1444:33	1444:33	8	PixarLogVGetField
LEAF_NODE	1444:50	1444:50	4	;
EXPR_STATEMENT	1445:1	1445:47	3	sp -> vsetparent = tif -> tif_tagmethods . vsetfield ;
EXPR	1445:1	1445:1	4	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
ASSIGN	1445:1	1445:18	5	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
LVAL	1445:1	1445:1	6	sp -> vsetparent
FIELD	1445:1	1445:5	7	sp -> vsetparent
LEAF_NODE	1445:1	1445:1	8	sp
LEAF_NODE	1445:3	1445:3	8	->
LEAF_NODE	1445:5	1445:5	8	vsetparent
ASSIGN_OP	1445:16	1445:16	6	=
LEAF_NODE	1445:16	1445:16	7	=
RVAL	1445:18	1445:18	6	tif -> tif_tagmethods . vsetfield
FIELD	1445:18	1445:38	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	1445:18	1445:18	8	tif
LEAF_NODE	1445:21	1445:21	8	->
LEAF_NODE	1445:23	1445:23	8	tif_tagmethods
LEAF_NODE	1445:37	1445:37	8	.
LEAF_NODE	1445:38	1445:38	8	vsetfield
LEAF_NODE	1445:47	1445:47	4	;
EXPR_STATEMENT	1446:1	1446:50	3	tif -> tif_tagmethods . vsetfield = PixarLogVSetField ;
EXPR	1446:1	1446:1	4	tif -> tif_tagmethods . vsetfield = PixarLogVSetField
ASSIGN	1446:1	1446:33	5	tif -> tif_tagmethods . vsetfield = PixarLogVSetField
LVAL	1446:1	1446:1	6	tif -> tif_tagmethods . vsetfield
FIELD	1446:1	1446:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	1446:1	1446:1	8	tif
LEAF_NODE	1446:4	1446:4	8	->
LEAF_NODE	1446:6	1446:6	8	tif_tagmethods
LEAF_NODE	1446:20	1446:20	8	.
LEAF_NODE	1446:21	1446:21	8	vsetfield
ASSIGN_OP	1446:31	1446:31	6	=
LEAF_NODE	1446:31	1446:31	7	=
RVAL	1446:33	1446:33	6	PixarLogVSetField
FIELD	1446:33	1446:33	7	PixarLogVSetField
LEAF_NODE	1446:33	1446:33	8	PixarLogVSetField
LEAF_NODE	1446:50	1446:50	4	;
EXPR_STATEMENT	1449:1	1449:36	3	sp -> quality = Z_DEFAULT_COMPRESSION ;
EXPR	1449:1	1449:1	4	sp -> quality = Z_DEFAULT_COMPRESSION
ASSIGN	1449:1	1449:15	5	sp -> quality = Z_DEFAULT_COMPRESSION
LVAL	1449:1	1449:1	6	sp -> quality
FIELD	1449:1	1449:5	7	sp -> quality
LEAF_NODE	1449:1	1449:1	8	sp
LEAF_NODE	1449:3	1449:3	8	->
LEAF_NODE	1449:5	1449:5	8	quality
ASSIGN_OP	1449:13	1449:13	6	=
LEAF_NODE	1449:13	1449:13	7	=
RVAL	1449:15	1449:15	6	Z_DEFAULT_COMPRESSION
FIELD	1449:15	1449:15	7	Z_DEFAULT_COMPRESSION
LEAF_NODE	1449:15	1449:15	8	Z_DEFAULT_COMPRESSION
LEAF_NODE	1449:36	1449:36	4	;
EXPR_STATEMENT	1450:1	1450:14	3	sp -> state = 0 ;
EXPR	1450:1	1450:1	4	sp -> state = 0
ASSIGN	1450:1	1450:13	5	sp -> state = 0
LVAL	1450:1	1450:1	6	sp -> state
FIELD	1450:1	1450:5	7	sp -> state
LEAF_NODE	1450:1	1450:1	8	sp
LEAF_NODE	1450:3	1450:3	8	->
LEAF_NODE	1450:5	1450:5	8	state
ASSIGN_OP	1450:11	1450:11	6	=
LEAF_NODE	1450:11	1450:11	7	=
RVAL	1450:13	1450:13	6	0
FIELD	1450:13	1450:13	7	0
LEAF_NODE	1450:13	1450:13	8	0
LEAF_NODE	1450:14	1450:14	4	;
EXPR_STATEMENT	1455:1	1455:30	3	( void ) TIFFPredictorInit ( tif ) ;
EXPR	1455:1	1455:8	4	( void ) TIFFPredictorInit ( tif )
LEAF_NODE	1455:1	1455:1	5	(
TYPE_NAME	1455:2	1455:2	5	void
LEAF_NODE	1455:2	1455:2	6	void
LEAF_NODE	1455:6	1455:6	5	)
FUNCTION_CALL	1455:8	1455:29	5	TIFFPredictorInit ( tif )
CALLEE	1455:8	1455:8	6	TIFFPredictorInit
LEAF_NODE	1455:8	1455:8	7	TIFFPredictorInit
LEAF_NODE	1455:25	1455:25	6	(
ARGUMENT	1455:26	1455:26	6	tif
FIELD	1455:26	1455:26	7	tif
LEAF_NODE	1455:26	1455:26	8	tif
LEAF_NODE	1455:29	1455:29	6	)
LEAF_NODE	1455:30	1455:30	4	;
EXPR_STATEMENT	1460:1	1460:23	3	PixarLogMakeTables ( sp ) ;
EXPR	1460:1	1460:1	4	PixarLogMakeTables ( sp )
FUNCTION_CALL	1460:1	1460:22	5	PixarLogMakeTables ( sp )
CALLEE	1460:1	1460:1	6	PixarLogMakeTables
LEAF_NODE	1460:1	1460:1	7	PixarLogMakeTables
LEAF_NODE	1460:19	1460:19	6	(
ARGUMENT	1460:20	1460:20	6	sp
FIELD	1460:20	1460:20	7	sp
LEAF_NODE	1460:20	1460:20	8	sp
LEAF_NODE	1460:22	1460:22	6	)
LEAF_NODE	1460:23	1460:23	4	;
JUMP_STATEMENT	1462:1	1462:11	3	return ( 1 ) ;
KEYWORD	1462:1	1462:1	4	return
LEAF_NODE	1462:1	1462:1	5	return
DESTINATION	1462:8	1462:8	4	( 1 )
EXPR	1462:8	1462:10	5	( 1 )
LEAF_NODE	1462:8	1462:8	6	(
FIELD	1462:9	1462:9	6	1
LEAF_NODE	1462:9	1462:9	7	1
LEAF_NODE	1462:10	1462:10	6	)
LEAF_NODE	1462:11	1462:11	4	;
LABEL	1463:0	1463:3	3	bad :
LEAF_NODE	1463:0	1463:0	4	bad
LEAF_NODE	1463:3	1463:3	4	:
EXPR_STATEMENT	1464:1	1465:43	3	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for PixarLog state block" ) ;
EXPR	1464:1	1464:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for PixarLog state block" )
FUNCTION_CALL	1464:1	1465:42	5	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for PixarLog state block" )
CALLEE	1464:1	1464:1	6	TIFFErrorExt
LEAF_NODE	1464:1	1464:1	7	TIFFErrorExt
LEAF_NODE	1464:13	1464:13	6	(
ARGUMENT	1464:14	1464:14	6	tif -> tif_clientdata
FIELD	1464:14	1464:19	7	tif -> tif_clientdata
LEAF_NODE	1464:14	1464:14	8	tif
LEAF_NODE	1464:17	1464:17	8	->
LEAF_NODE	1464:19	1464:19	8	tif_clientdata
LEAF_NODE	1464:33	1464:33	6	,
ARGUMENT	1464:35	1464:35	6	module
FIELD	1464:35	1464:35	7	module
LEAF_NODE	1464:35	1464:35	8	module
LEAF_NODE	1464:41	1464:41	6	,
ARGUMENT	1465:7	1465:7	6	"No space for PixarLog state block"
FIELD	1465:7	1465:7	7	"No space for PixarLog state block"
LEAF_NODE	1465:7	1465:7	8	"No space for PixarLog state block"
LEAF_NODE	1465:42	1465:42	6	)
LEAF_NODE	1465:43	1465:43	4	;
JUMP_STATEMENT	1466:1	1466:11	3	return ( 0 ) ;
KEYWORD	1466:1	1466:1	4	return
LEAF_NODE	1466:1	1466:1	5	return
DESTINATION	1466:8	1466:8	4	( 0 )
EXPR	1466:8	1466:10	5	( 0 )
LEAF_NODE	1466:8	1466:8	6	(
FIELD	1466:9	1466:9	6	0
LEAF_NODE	1466:9	1466:9	7	0
LEAF_NODE	1466:10	1466:10	6	)
LEAF_NODE	1466:11	1466:11	4	;
LEAF_NODE	1467:0	1467:0	2	}
