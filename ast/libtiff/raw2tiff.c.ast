SOURCE_FILE	70:8	669:0	0	
SIMPLE_DECL	70:8	73:18	1	enum CLASS_NAME BASE_CLASSES { PIXEL , BAND } InterleavingType ;
VAR_DECL	70:8	73:2	2	enum CLASS_NAME BASE_CLASSES { PIXEL , BAND } InterleavingType
TYPE	70:8	70:8	3	enum CLASS_NAME BASE_CLASSES { PIXEL , BAND }
CLASS_DEF	70:8	73:0	4	enum CLASS_NAME BASE_CLASSES { PIXEL , BAND }
LEAF_NODE	70:8	70:8	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	70:13	70:13	5	{
CLASS_CONTENT	71:1	72:1	5	PIXEL , BAND
LEAF_NODE	71:1	71:1	6	PIXEL
LEAF_NODE	71:6	71:6	6	,
LEAF_NODE	72:1	72:1	6	BAND
LEAF_NODE	73:0	73:0	5	}
NAME	73:2	73:2	3	InterleavingType
LEAF_NODE	73:2	73:2	4	InterleavingType
LEAF_NODE	73:18	73:18	2	;
SIMPLE_DECL	75:7	75:39	1	uint16 compression ; compression = ( uint16 ) - 1 ;
VAR_DECL	75:7	75:14	2	uint16 compression ; compression = ( uint16 ) - 1
TYPE	75:7	75:7	3	uint16
TYPE_NAME	75:7	75:7	4	uint16
LEAF_NODE	75:7	75:7	5	uint16
NAME	75:14	75:14	3	compression
LEAF_NODE	75:14	75:14	4	compression
LEAF_NODE	0:0	0:0	3	;
INIT	75:14	75:14	3	compression = ( uint16 ) - 1
ASSIGN	75:14	75:28	4	compression = ( uint16 ) - 1
LVAL	75:14	75:14	5	compression
NAME	75:14	75:14	6	compression
LEAF_NODE	75:14	75:14	7	compression
ASSIGN_OP	75:26	75:26	5	=
LEAF_NODE	75:26	75:26	6	=
RVAL	75:28	75:37	5	( uint16 ) - 1
LEAF_NODE	75:28	75:28	6	(
TYPE_NAME	75:29	75:29	6	uint16
LEAF_NODE	75:29	75:29	7	uint16
LEAF_NODE	75:35	75:35	6	)
UNARY_EXPR	75:37	75:38	6	- 1
UNARY_OPERATOR	75:37	75:37	7	-
LEAF_NODE	75:37	75:37	8	-
FIELD	75:38	75:38	7	1
LEAF_NODE	75:38	75:38	8	1
LEAF_NODE	75:39	75:39	2	;
SIMPLE_DECL	76:7	76:44	1	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB ;
VAR_DECL	76:7	76:11	2	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB
TYPE	76:7	76:7	3	int
TYPE_NAME	76:7	76:7	4	int
LEAF_NODE	76:7	76:7	5	int
NAME	76:11	76:11	3	jpegcolormode
LEAF_NODE	76:11	76:11	4	jpegcolormode
LEAF_NODE	0:0	0:0	3	;
INIT	76:11	76:11	3	jpegcolormode = JPEGCOLORMODE_RGB
ASSIGN	76:11	76:27	4	jpegcolormode = JPEGCOLORMODE_RGB
LVAL	76:11	76:11	5	jpegcolormode
NAME	76:11	76:11	6	jpegcolormode
LEAF_NODE	76:11	76:11	7	jpegcolormode
ASSIGN_OP	76:25	76:25	5	=
LEAF_NODE	76:25	76:25	6	=
RVAL	76:27	76:27	5	JPEGCOLORMODE_RGB
FIELD	76:27	76:27	6	JPEGCOLORMODE_RGB
LEAF_NODE	76:27	76:27	7	JPEGCOLORMODE_RGB
LEAF_NODE	76:44	76:44	2	;
SIMPLE_DECL	77:7	77:23	1	int quality ; quality = 75 ;
VAR_DECL	77:7	77:11	2	int quality ; quality = 75
TYPE	77:7	77:7	3	int
TYPE_NAME	77:7	77:7	4	int
LEAF_NODE	77:7	77:7	5	int
NAME	77:11	77:11	3	quality
LEAF_NODE	77:11	77:11	4	quality
LEAF_NODE	0:0	0:0	3	;
INIT	77:11	77:11	3	quality = 75
ASSIGN	77:11	77:21	4	quality = 75
LVAL	77:11	77:11	5	quality
NAME	77:11	77:11	6	quality
LEAF_NODE	77:11	77:11	7	quality
ASSIGN_OP	77:19	77:19	5	=
LEAF_NODE	77:19	77:19	6	=
RVAL	77:21	77:21	5	75
FIELD	77:21	77:21	6	75
LEAF_NODE	77:21	77:21	7	75
LEAF_NODE	77:23	77:23	2	;
SIMPLE_DECL	78:7	78:27	1	uint16 predictor ; predictor = 0 ;
VAR_DECL	78:7	78:14	2	uint16 predictor ; predictor = 0
TYPE	78:7	78:7	3	uint16
TYPE_NAME	78:7	78:7	4	uint16
LEAF_NODE	78:7	78:7	5	uint16
NAME	78:14	78:14	3	predictor
LEAF_NODE	78:14	78:14	4	predictor
LEAF_NODE	0:0	0:0	3	;
INIT	78:14	78:14	3	predictor = 0
ASSIGN	78:14	78:26	4	predictor = 0
LVAL	78:14	78:14	5	predictor
NAME	78:14	78:14	6	predictor
LEAF_NODE	78:14	78:14	7	predictor
ASSIGN_OP	78:24	78:24	5	=
LEAF_NODE	78:24	78:24	6	=
RVAL	78:26	78:26	5	0
FIELD	78:26	78:26	6	0
LEAF_NODE	78:26	78:26	7	0
LEAF_NODE	78:27	78:27	2	;
SIMPLE_DECL	84:7	84:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	84:7	84:12	2	void usage ; usage usage ( void )
TYPE	84:7	84:7	3	void
TYPE_NAME	84:7	84:7	4	void
LEAF_NODE	84:7	84:7	5	void
NAME	84:12	84:12	3	usage
LEAF_NODE	84:12	84:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	84:12	84:12	3	usage usage ( void )
ASSIGN	84:12	84:17	4	usage usage ( void )
LVAL	84:12	84:12	5	usage
NAME	84:12	84:12	6	usage
LEAF_NODE	84:12	84:12	7	usage
ASSIGN_OP	84:12	84:12	5	usage
NAME	84:12	84:12	6	usage
LEAF_NODE	84:12	84:12	7	usage
RVAL	84:17	84:22	5	( void )
LEAF_NODE	84:17	84:17	6	(
EXPR	84:18	84:18	6	void
FIELD	84:18	84:18	7	void
LEAF_NODE	84:18	84:18	8	void
LEAF_NODE	84:22	84:22	6	)
LEAF_NODE	84:23	84:23	2	;
FUNCTION_DEF	87:0	340:0	1	
RETURN_TYPE	87:0	87:0	2	int
TYPE_NAME	87:0	87:0	3	int
LEAF_NODE	87:0	87:0	4	int
FUNCTION_NAME	88:0	88:0	2	main
LEAF_NODE	88:0	88:0	3	main
PARAMETER_LIST	88:4	88:27	2	( int argc , char * [ ] argv )
LEAF_NODE	88:4	88:4	3	(
PARAMETER_DECL	88:5	88:9	3	int argc
TYPE	88:5	88:5	4	int
TYPE_NAME	88:5	88:5	5	int
LEAF_NODE	88:5	88:5	6	int
NAME	88:9	88:9	4	argc
LEAF_NODE	88:9	88:9	5	argc
LEAF_NODE	88:13	88:13	3	,
PARAMETER_DECL	88:15	88:21	3	char * [ ] argv
TYPE	88:15	88:25	4	char * [ ]
TYPE_NAME	88:15	88:15	5	char
LEAF_NODE	88:15	88:15	6	char
POINTER	88:19	88:19	5	*
LEAF_NODE	88:19	88:19	6	*
TYPE_SUFFIX	88:25	88:26	5	[ ]
LEAF_NODE	88:25	88:25	6	[
LEAF_NODE	88:26	88:26	6	]
NAME	88:21	88:21	4	argv
LEAF_NODE	88:21	88:21	5	argv
LEAF_NODE	88:27	88:27	3	)
LEAF_NODE	89:0	89:0	2	{
STATEMENTS	90:1	339:1	2	
SIMPLE_DECL	90:1	90:49	3	uint32 width ; width = 0 , uint32 length ; length = 0 , uint32 linebytes , uint32 bufsize ;
INIT_DECL_LIST	90:1	90:1	4	uint32 width ; width = 0 , uint32 length ; length = 0 , uint32 linebytes , uint32 bufsize
VAR_DECL	90:1	90:8	5	uint32 width ; width = 0
TYPE	90:1	90:1	6	uint32
TYPE_NAME	90:1	90:1	7	uint32
LEAF_NODE	90:1	90:1	8	uint32
NAME	90:8	90:8	6	width
LEAF_NODE	90:8	90:8	7	width
LEAF_NODE	0:0	0:0	6	;
INIT	90:8	90:8	6	width = 0
ASSIGN	90:8	90:16	7	width = 0
LVAL	90:8	90:8	8	width
NAME	90:8	90:8	9	width
LEAF_NODE	90:8	90:8	10	width
ASSIGN_OP	90:14	90:14	8	=
LEAF_NODE	90:14	90:14	9	=
RVAL	90:16	90:16	8	0
FIELD	90:16	90:16	9	0
LEAF_NODE	90:16	90:16	10	0
LEAF_NODE	90:17	90:17	5	,
INIT_DECL_LIST	90:1	90:1	5	uint32 length ; length = 0 , uint32 linebytes , uint32 bufsize
VAR_DECL	90:1	90:19	6	uint32 length ; length = 0
TYPE	90:1	90:1	7	uint32
TYPE_NAME	90:1	90:1	8	uint32
LEAF_NODE	90:1	90:1	9	uint32
NAME	90:19	90:19	7	length
LEAF_NODE	90:19	90:19	8	length
LEAF_NODE	0:0	0:0	7	;
INIT	90:19	90:19	7	length = 0
ASSIGN	90:19	90:28	8	length = 0
LVAL	90:19	90:19	9	length
NAME	90:19	90:19	10	length
LEAF_NODE	90:19	90:19	11	length
ASSIGN_OP	90:26	90:26	9	=
LEAF_NODE	90:26	90:26	10	=
RVAL	90:28	90:28	9	0
FIELD	90:28	90:28	10	0
LEAF_NODE	90:28	90:28	11	0
LEAF_NODE	90:29	90:29	6	,
INIT_DECL_LIST	90:1	90:1	6	uint32 linebytes , uint32 bufsize
VAR_DECL	90:1	90:31	7	uint32 linebytes
TYPE	90:1	90:1	8	uint32
TYPE_NAME	90:1	90:1	9	uint32
LEAF_NODE	90:1	90:1	10	uint32
NAME	90:31	90:31	8	linebytes
LEAF_NODE	90:31	90:31	9	linebytes
LEAF_NODE	90:40	90:40	7	,
VAR_DECL	90:1	90:42	7	uint32 bufsize
TYPE	90:1	90:1	8	uint32
TYPE_NAME	90:1	90:1	9	uint32
LEAF_NODE	90:1	90:1	10	uint32
NAME	90:42	90:42	8	bufsize
LEAF_NODE	90:42	90:42	9	bufsize
LEAF_NODE	90:49	90:49	4	;
SIMPLE_DECL	91:1	91:18	3	uint32 nbands ; nbands = 1 ;
VAR_DECL	91:1	91:8	4	uint32 nbands ; nbands = 1
TYPE	91:1	91:1	5	uint32
TYPE_NAME	91:1	91:1	6	uint32
LEAF_NODE	91:1	91:1	7	uint32
NAME	91:8	91:8	5	nbands
LEAF_NODE	91:8	91:8	6	nbands
LEAF_NODE	0:0	0:0	5	;
INIT	91:8	91:8	5	nbands = 1
ASSIGN	91:8	91:17	6	nbands = 1
LVAL	91:8	91:8	7	nbands
NAME	91:8	91:8	8	nbands
LEAF_NODE	91:8	91:8	9	nbands
ASSIGN_OP	91:15	91:15	7	=
LEAF_NODE	91:15	91:15	8	=
RVAL	91:17	91:17	7	1
FIELD	91:17	91:17	8	1
LEAF_NODE	91:17	91:17	9	1
LEAF_NODE	91:18	91:18	4	;
SIMPLE_DECL	92:1	92:25	3	_TIFF_off_t hdr_size ; hdr_size = 0 ;
VAR_DECL	92:1	92:13	4	_TIFF_off_t hdr_size ; hdr_size = 0
TYPE	92:1	92:1	5	_TIFF_off_t
TYPE_NAME	92:1	92:1	6	_TIFF_off_t
LEAF_NODE	92:1	92:1	7	_TIFF_off_t
NAME	92:13	92:13	5	hdr_size
LEAF_NODE	92:13	92:13	6	hdr_size
LEAF_NODE	0:0	0:0	5	;
INIT	92:13	92:13	5	hdr_size = 0
ASSIGN	92:13	92:24	6	hdr_size = 0
LVAL	92:13	92:13	7	hdr_size
NAME	92:13	92:13	8	hdr_size
LEAF_NODE	92:13	92:13	9	hdr_size
ASSIGN_OP	92:22	92:22	7	=
LEAF_NODE	92:22	92:22	8	=
RVAL	92:24	92:24	7	0
FIELD	92:24	92:24	8	0
LEAF_NODE	92:24	92:24	9	0
LEAF_NODE	92:25	92:25	4	;
SIMPLE_DECL	93:1	93:31	3	TIFFDataType dtype ; dtype = TIFF_BYTE ;
VAR_DECL	93:1	93:14	4	TIFFDataType dtype ; dtype = TIFF_BYTE
TYPE	93:1	93:1	5	TIFFDataType
TYPE_NAME	93:1	93:1	6	TIFFDataType
LEAF_NODE	93:1	93:1	7	TIFFDataType
NAME	93:14	93:14	5	dtype
LEAF_NODE	93:14	93:14	6	dtype
LEAF_NODE	0:0	0:0	5	;
INIT	93:14	93:14	5	dtype = TIFF_BYTE
ASSIGN	93:14	93:22	6	dtype = TIFF_BYTE
LVAL	93:14	93:14	7	dtype
NAME	93:14	93:14	8	dtype
LEAF_NODE	93:14	93:14	9	dtype
ASSIGN_OP	93:20	93:20	7	=
LEAF_NODE	93:20	93:20	8	=
RVAL	93:22	93:22	7	TIFF_BYTE
FIELD	93:22	93:22	8	TIFF_BYTE
LEAF_NODE	93:22	93:22	9	TIFF_BYTE
LEAF_NODE	93:31	93:31	4	;
SIMPLE_DECL	94:1	94:16	3	int16 depth ; depth = 1 ;
VAR_DECL	94:1	94:7	4	int16 depth ; depth = 1
TYPE	94:1	94:1	5	int16
TYPE_NAME	94:1	94:1	6	int16
LEAF_NODE	94:1	94:1	7	int16
NAME	94:7	94:7	5	depth
LEAF_NODE	94:7	94:7	6	depth
LEAF_NODE	0:0	0:0	5	;
INIT	94:7	94:7	5	depth = 1
ASSIGN	94:7	94:15	6	depth = 1
LVAL	94:7	94:7	7	depth
NAME	94:7	94:7	8	depth
LEAF_NODE	94:7	94:7	9	depth
ASSIGN_OP	94:13	94:13	7	=
LEAF_NODE	94:13	94:13	8	=
RVAL	94:15	94:15	7	1
FIELD	94:15	94:15	8	1
LEAF_NODE	94:15	94:15	9	1
LEAF_NODE	94:16	94:16	4	;
SIMPLE_DECL	95:1	95:13	3	int swab ; swab = 0 ;
VAR_DECL	95:1	95:5	4	int swab ; swab = 0
TYPE	95:1	95:1	5	int
TYPE_NAME	95:1	95:1	6	int
LEAF_NODE	95:1	95:1	7	int
NAME	95:5	95:5	5	swab
LEAF_NODE	95:5	95:5	6	swab
LEAF_NODE	0:0	0:0	5	;
INIT	95:5	95:5	5	swab = 0
ASSIGN	95:5	95:12	6	swab = 0
LVAL	95:5	95:5	7	swab
NAME	95:5	95:5	8	swab
LEAF_NODE	95:5	95:5	9	swab
ASSIGN_OP	95:10	95:10	7	=
LEAF_NODE	95:10	95:10	8	=
RVAL	95:12	95:12	7	0
FIELD	95:12	95:12	8	0
LEAF_NODE	95:12	95:12	9	0
LEAF_NODE	95:13	95:13	4	;
SIMPLE_DECL	96:1	96:34	3	InterleavingType interleaving ; interleaving = 0 ;
VAR_DECL	96:1	96:18	4	InterleavingType interleaving ; interleaving = 0
TYPE	96:1	96:1	5	InterleavingType
TYPE_NAME	96:1	96:1	6	InterleavingType
LEAF_NODE	96:1	96:1	7	InterleavingType
NAME	96:18	96:18	5	interleaving
LEAF_NODE	96:18	96:18	6	interleaving
LEAF_NODE	0:0	0:0	5	;
INIT	96:18	96:18	5	interleaving = 0
ASSIGN	96:18	96:33	6	interleaving = 0
LVAL	96:18	96:18	7	interleaving
NAME	96:18	96:18	8	interleaving
LEAF_NODE	96:18	96:18	9	interleaving
ASSIGN_OP	96:31	96:31	7	=
LEAF_NODE	96:31	96:31	8	=
RVAL	96:33	96:33	7	0
FIELD	96:33	96:33	8	0
LEAF_NODE	96:33	96:33	9	0
LEAF_NODE	96:34	96:34	4	;
SIMPLE_DECL	97:1	97:35	3	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	97:1	97:9	4	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	97:1	97:1	5	uint32
TYPE_NAME	97:1	97:1	6	uint32
LEAF_NODE	97:1	97:1	7	uint32
NAME	97:9	97:9	5	rowsperstrip
LEAF_NODE	97:9	97:9	6	rowsperstrip
LEAF_NODE	0:0	0:0	5	;
INIT	97:9	97:9	5	rowsperstrip = ( uint32 ) - 1
ASSIGN	97:9	97:24	6	rowsperstrip = ( uint32 ) - 1
LVAL	97:9	97:9	7	rowsperstrip
NAME	97:9	97:9	8	rowsperstrip
LEAF_NODE	97:9	97:9	9	rowsperstrip
ASSIGN_OP	97:22	97:22	7	=
LEAF_NODE	97:22	97:22	8	=
RVAL	97:24	97:33	7	( uint32 ) - 1
LEAF_NODE	97:24	97:24	8	(
TYPE_NAME	97:25	97:25	8	uint32
LEAF_NODE	97:25	97:25	9	uint32
LEAF_NODE	97:31	97:31	8	)
UNARY_EXPR	97:33	97:34	8	- 1
UNARY_OPERATOR	97:33	97:33	9	-
LEAF_NODE	97:33	97:33	10	-
FIELD	97:34	97:34	9	1
LEAF_NODE	97:34	97:34	10	1
LEAF_NODE	97:35	97:35	4	;
SIMPLE_DECL	98:1	98:44	3	uint16 photometric ; photometric = PHOTOMETRIC_MINISBLACK ;
VAR_DECL	98:1	98:8	4	uint16 photometric ; photometric = PHOTOMETRIC_MINISBLACK
TYPE	98:1	98:1	5	uint16
TYPE_NAME	98:1	98:1	6	uint16
LEAF_NODE	98:1	98:1	7	uint16
NAME	98:8	98:8	5	photometric
LEAF_NODE	98:8	98:8	6	photometric
LEAF_NODE	0:0	0:0	5	;
INIT	98:8	98:8	5	photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	98:8	98:22	6	photometric = PHOTOMETRIC_MINISBLACK
LVAL	98:8	98:8	7	photometric
NAME	98:8	98:8	8	photometric
LEAF_NODE	98:8	98:8	9	photometric
ASSIGN_OP	98:20	98:20	7	=
LEAF_NODE	98:20	98:20	8	=
RVAL	98:22	98:22	7	PHOTOMETRIC_MINISBLACK
FIELD	98:22	98:22	8	PHOTOMETRIC_MINISBLACK
LEAF_NODE	98:22	98:22	9	PHOTOMETRIC_MINISBLACK
LEAF_NODE	98:44	98:44	4	;
SIMPLE_DECL	99:1	99:36	3	uint16 config ; config = PLANARCONFIG_CONTIG ;
VAR_DECL	99:1	99:8	4	uint16 config ; config = PLANARCONFIG_CONTIG
TYPE	99:1	99:1	5	uint16
TYPE_NAME	99:1	99:1	6	uint16
LEAF_NODE	99:1	99:1	7	uint16
NAME	99:8	99:8	5	config
LEAF_NODE	99:8	99:8	6	config
LEAF_NODE	0:0	0:0	5	;
INIT	99:8	99:8	5	config = PLANARCONFIG_CONTIG
ASSIGN	99:8	99:17	6	config = PLANARCONFIG_CONTIG
LVAL	99:8	99:8	7	config
NAME	99:8	99:8	8	config
LEAF_NODE	99:8	99:8	9	config
ASSIGN_OP	99:15	99:15	7	=
LEAF_NODE	99:15	99:15	8	=
RVAL	99:17	99:17	7	PLANARCONFIG_CONTIG
FIELD	99:17	99:17	8	PLANARCONFIG_CONTIG
LEAF_NODE	99:17	99:17	9	PLANARCONFIG_CONTIG
LEAF_NODE	99:36	99:36	4	;
SIMPLE_DECL	100:1	100:37	3	uint16 fillorder ; fillorder = FILLORDER_LSB2MSB ;
VAR_DECL	100:1	100:8	4	uint16 fillorder ; fillorder = FILLORDER_LSB2MSB
TYPE	100:1	100:1	5	uint16
TYPE_NAME	100:1	100:1	6	uint16
LEAF_NODE	100:1	100:1	7	uint16
NAME	100:8	100:8	5	fillorder
LEAF_NODE	100:8	100:8	6	fillorder
LEAF_NODE	0:0	0:0	5	;
INIT	100:8	100:8	5	fillorder = FILLORDER_LSB2MSB
ASSIGN	100:8	100:20	6	fillorder = FILLORDER_LSB2MSB
LVAL	100:8	100:8	7	fillorder
NAME	100:8	100:8	8	fillorder
LEAF_NODE	100:8	100:8	9	fillorder
ASSIGN_OP	100:18	100:18	7	=
LEAF_NODE	100:18	100:18	8	=
RVAL	100:20	100:20	7	FILLORDER_LSB2MSB
FIELD	100:20	100:20	8	FILLORDER_LSB2MSB
LEAF_NODE	100:20	100:20	9	FILLORDER_LSB2MSB
LEAF_NODE	100:37	100:37	4	;
SIMPLE_DECL	101:1	101:7	3	int fd ;
VAR_DECL	101:1	101:5	4	int fd
TYPE	101:1	101:1	5	int
TYPE_NAME	101:1	101:1	6	int
LEAF_NODE	101:1	101:1	7	int
NAME	101:5	101:5	5	fd
LEAF_NODE	101:5	101:5	6	fd
LEAF_NODE	101:7	101:7	4	;
SIMPLE_DECL	102:1	102:25	3	char * outfilename ; outfilename = NULL ;
VAR_DECL	102:1	102:7	4	char * outfilename ; outfilename = NULL
TYPE	102:1	102:6	5	char *
TYPE_NAME	102:1	102:1	6	char
LEAF_NODE	102:1	102:1	7	char
POINTER	102:6	102:6	6	*
LEAF_NODE	102:6	102:6	7	*
NAME	102:7	102:7	5	outfilename
LEAF_NODE	102:7	102:7	6	outfilename
LEAF_NODE	0:0	0:0	5	;
INIT	102:7	102:7	5	outfilename = NULL
ASSIGN	102:7	102:21	6	outfilename = NULL
LVAL	102:7	102:7	7	outfilename
NAME	102:7	102:7	8	outfilename
LEAF_NODE	102:7	102:7	9	outfilename
ASSIGN_OP	102:19	102:19	7	=
LEAF_NODE	102:19	102:19	8	=
RVAL	102:21	102:21	7	NULL
FIELD	102:21	102:21	8	NULL
LEAF_NODE	102:21	102:21	9	NULL
LEAF_NODE	102:25	102:25	4	;
SIMPLE_DECL	103:1	103:10	3	TIFF * out ;
VAR_DECL	103:1	103:7	4	TIFF * out
TYPE	103:1	103:6	5	TIFF *
TYPE_NAME	103:1	103:1	6	TIFF
LEAF_NODE	103:1	103:1	7	TIFF
POINTER	103:6	103:6	6	*
LEAF_NODE	103:6	103:6	7	*
NAME	103:7	103:7	5	out
LEAF_NODE	103:7	103:7	6	out
LEAF_NODE	103:10	103:10	4	;
SIMPLE_DECL	105:1	105:22	3	uint32 row , uint32 col , uint32 band ;
INIT_DECL_LIST	105:1	105:1	4	uint32 row , uint32 col , uint32 band
VAR_DECL	105:1	105:8	5	uint32 row
TYPE	105:1	105:1	6	uint32
TYPE_NAME	105:1	105:1	7	uint32
LEAF_NODE	105:1	105:1	8	uint32
NAME	105:8	105:8	6	row
LEAF_NODE	105:8	105:8	7	row
LEAF_NODE	105:11	105:11	5	,
INIT_DECL_LIST	105:1	105:1	5	uint32 col , uint32 band
VAR_DECL	105:1	105:13	6	uint32 col
TYPE	105:1	105:1	7	uint32
TYPE_NAME	105:1	105:1	8	uint32
LEAF_NODE	105:1	105:1	9	uint32
NAME	105:13	105:13	7	col
LEAF_NODE	105:13	105:13	8	col
LEAF_NODE	105:16	105:16	6	,
VAR_DECL	105:1	105:18	6	uint32 band
TYPE	105:1	105:1	7	uint32
TYPE_NAME	105:1	105:1	8	uint32
LEAF_NODE	105:1	105:1	9	uint32
NAME	105:18	105:18	7	band
LEAF_NODE	105:18	105:18	8	band
LEAF_NODE	105:22	105:22	4	;
SIMPLE_DECL	106:1	106:6	3	int c ;
VAR_DECL	106:1	106:5	4	int c
TYPE	106:1	106:1	5	int
TYPE_NAME	106:1	106:1	6	int
LEAF_NODE	106:1	106:1	7	int
NAME	106:5	106:5	5	c
LEAF_NODE	106:5	106:5	6	c
LEAF_NODE	106:6	106:6	4	;
SIMPLE_DECL	107:1	107:40	3	unsigned char * buf ; buf = NULL , unsigned char * buf1 ; buf1 = NULL ;
INIT_DECL_LIST	107:1	107:1	4	unsigned char * buf ; buf = NULL , unsigned char * buf1 ; buf1 = NULL
VAR_DECL	107:1	107:16	5	unsigned char * buf ; buf = NULL
TYPE	107:1	107:15	6	unsigned char *
TYPE_NAME	107:1	107:10	7	unsigned char
LEAF_NODE	107:1	107:1	8	unsigned
LEAF_NODE	107:10	107:10	8	char
POINTER	107:15	107:15	7	*
LEAF_NODE	107:15	107:15	8	*
NAME	107:16	107:16	6	buf
LEAF_NODE	107:16	107:16	7	buf
LEAF_NODE	0:0	0:0	6	;
INIT	107:16	107:16	6	buf = NULL
ASSIGN	107:16	107:22	7	buf = NULL
LVAL	107:16	107:16	8	buf
NAME	107:16	107:16	9	buf
LEAF_NODE	107:16	107:16	10	buf
ASSIGN_OP	107:20	107:20	8	=
LEAF_NODE	107:20	107:20	9	=
RVAL	107:22	107:22	8	NULL
FIELD	107:22	107:22	9	NULL
LEAF_NODE	107:22	107:22	10	NULL
LEAF_NODE	107:26	107:26	5	,
VAR_DECL	107:1	107:29	5	unsigned char * buf1 ; buf1 = NULL
TYPE	107:1	107:28	6	unsigned char *
TYPE_NAME	107:1	107:10	7	unsigned char
LEAF_NODE	107:1	107:1	8	unsigned
LEAF_NODE	107:10	107:10	8	char
POINTER	107:28	107:28	7	*
LEAF_NODE	107:28	107:28	8	*
NAME	107:29	107:29	6	buf1
LEAF_NODE	107:29	107:29	7	buf1
LEAF_NODE	0:0	0:0	6	;
INIT	107:29	107:29	6	buf1 = NULL
ASSIGN	107:29	107:36	7	buf1 = NULL
LVAL	107:29	107:29	8	buf1
NAME	107:29	107:29	9	buf1
LEAF_NODE	107:29	107:29	10	buf1
ASSIGN_OP	107:34	107:34	8	=
LEAF_NODE	107:34	107:34	9	=
RVAL	107:36	107:36	8	NULL
FIELD	107:36	107:36	9	NULL
LEAF_NODE	107:36	107:36	10	NULL
LEAF_NODE	107:40	107:40	4	;
LEAF_NODE	109:1	109:1	3	extern
SIMPLE_DECL	109:8	109:18	3	int optind ;
VAR_DECL	109:8	109:12	4	int optind
TYPE	109:8	109:8	5	int
TYPE_NAME	109:8	109:8	6	int
LEAF_NODE	109:8	109:8	7	int
NAME	109:12	109:12	5	optind
LEAF_NODE	109:12	109:12	6	optind
LEAF_NODE	109:18	109:18	4	;
LEAF_NODE	110:1	110:1	3	extern
SIMPLE_DECL	110:8	110:20	3	char * optarg ;
VAR_DECL	110:8	110:14	4	char * optarg
TYPE	110:8	110:12	5	char *
TYPE_NAME	110:8	110:8	6	char
LEAF_NODE	110:8	110:8	7	char
POINTER	110:12	110:12	6	*
LEAF_NODE	110:12	110:12	7	*
NAME	110:14	110:14	5	optarg
LEAF_NODE	110:14	110:14	6	optarg
LEAF_NODE	110:20	110:20	4	;
ITERATION	113:1	113:68	3	
KEYWORD	113:1	113:1	4	while
LEAF_NODE	113:1	113:1	5	while
LEAF_NODE	113:7	113:7	4	(
CONDITION	113:8	113:8	4	( c = getopt ( argc , argv , "c:r:H:w:l:b:d:LMp:si:o:h" ) ) != - 1
EXPR	113:8	113:64	5	( c = getopt ( argc , argv , "c:r:H:w:l:b:d:LMp:si:o:h" ) ) != - 1
LEAF_NODE	113:8	113:8	6	(
ASSIGN	113:9	113:13	6	c = getopt ( argc , argv , "c:r:H:w:l:b:d:LMp:si:o:h" )
LVAL	113:9	113:9	7	c
FIELD	113:9	113:9	8	c
LEAF_NODE	113:9	113:9	9	c
ASSIGN_OP	113:11	113:11	7	=
LEAF_NODE	113:11	113:11	8	=
RVAL	113:13	113:13	7	getopt ( argc , argv , "c:r:H:w:l:b:d:LMp:si:o:h" )
FUNCTION_CALL	113:13	113:58	8	getopt ( argc , argv , "c:r:H:w:l:b:d:LMp:si:o:h" )
CALLEE	113:13	113:13	9	getopt
LEAF_NODE	113:13	113:13	10	getopt
LEAF_NODE	113:19	113:19	9	(
ARGUMENT	113:20	113:20	9	argc
FIELD	113:20	113:20	10	argc
LEAF_NODE	113:20	113:20	11	argc
LEAF_NODE	113:24	113:24	9	,
ARGUMENT	113:26	113:26	9	argv
FIELD	113:26	113:26	10	argv
LEAF_NODE	113:26	113:26	11	argv
LEAF_NODE	113:30	113:30	9	,
ARGUMENT	113:32	113:32	9	"c:r:H:w:l:b:d:LMp:si:o:h"
FIELD	113:32	113:32	10	"c:r:H:w:l:b:d:LMp:si:o:h"
LEAF_NODE	113:32	113:32	11	"c:r:H:w:l:b:d:LMp:si:o:h"
LEAF_NODE	113:58	113:58	9	)
LEAF_NODE	113:59	113:59	6	)
EQ_OPERATOR	113:61	113:61	6	!=
LEAF_NODE	113:61	113:61	7	!=
UNARY_EXPR	113:64	113:65	6	- 1
UNARY_OPERATOR	113:64	113:64	7	-
LEAF_NODE	113:64	113:64	8	-
FIELD	113:65	113:65	7	1
LEAF_NODE	113:65	113:65	8	1
LEAF_NODE	113:66	113:66	4	)
STATEMENTS	113:68	200:8	4	
LEAF_NODE	113:68	113:68	5	{
STATEMENTS	114:2	114:2	5	
SELECTION	114:2	114:13	6	
KEYWORD	114:2	114:2	7	switch
LEAF_NODE	114:2	114:2	8	switch
LEAF_NODE	114:9	114:9	7	(
CONDITION	114:10	114:10	7	c
EXPR	114:10	114:10	8	c
FIELD	114:10	114:10	9	c
LEAF_NODE	114:10	114:10	10	c
LEAF_NODE	114:11	114:11	7	)
STATEMENTS	114:13	199:2	7	
LEAF_NODE	114:13	114:13	8	{
STATEMENTS	115:2	198:3	8	
LEAF_NODE	115:2	115:2	9	case
LEAF_NODE	115:7	115:7	9	'c'
LEAF_NODE	115:10	115:10	9	:
SELECTION	116:3	117:4	9	
KEYWORD	116:3	116:3	10	if
LEAF_NODE	116:3	116:3	11	if
LEAF_NODE	116:6	116:6	10	(
CONDITION	116:7	116:7	10	! processCompressOptions ( optarg )
EXPR	116:7	116:7	11	! processCompressOptions ( optarg )
UNARY_EXPR	116:7	116:8	12	! processCompressOptions ( optarg )
UNARY_OPERATOR	116:7	116:7	13	!
LEAF_NODE	116:7	116:7	14	!
FUNCTION_CALL	116:8	116:37	13	processCompressOptions ( optarg )
CALLEE	116:8	116:8	14	processCompressOptions
LEAF_NODE	116:8	116:8	15	processCompressOptions
LEAF_NODE	116:30	116:30	14	(
ARGUMENT	116:31	116:31	14	optarg
FIELD	116:31	116:31	15	optarg
LEAF_NODE	116:31	116:31	16	optarg
LEAF_NODE	116:37	116:37	14	)
LEAF_NODE	116:38	116:38	10	)
STATEMENTS	117:4	117:4	10	
EXPR_STATEMENT	117:4	117:11	11	usage ( ) ;
EXPR	117:4	117:4	12	usage ( )
FUNCTION_CALL	117:4	117:10	13	usage ( )
CALLEE	117:4	117:4	14	usage
LEAF_NODE	117:4	117:4	15	usage
LEAF_NODE	117:9	117:9	14	(
LEAF_NODE	117:10	117:10	14	)
LEAF_NODE	117:11	117:11	12	;
JUMP_STATEMENT	118:3	118:8	9	break DESTINATION ;
KEYWORD	118:3	118:3	10	break
LEAF_NODE	118:3	118:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	118:8	118:8	10	;
LEAF_NODE	119:2	119:2	9	case
LEAF_NODE	119:7	119:7	9	'r'
LEAF_NODE	119:10	119:10	9	:
EXPR_STATEMENT	120:3	120:30	9	rowsperstrip = atoi ( optarg ) ;
EXPR	120:3	120:3	10	rowsperstrip = atoi ( optarg )
ASSIGN	120:3	120:18	11	rowsperstrip = atoi ( optarg )
LVAL	120:3	120:3	12	rowsperstrip
FIELD	120:3	120:3	13	rowsperstrip
LEAF_NODE	120:3	120:3	14	rowsperstrip
ASSIGN_OP	120:16	120:16	12	=
LEAF_NODE	120:16	120:16	13	=
RVAL	120:18	120:18	12	atoi ( optarg )
FUNCTION_CALL	120:18	120:29	13	atoi ( optarg )
CALLEE	120:18	120:18	14	atoi
LEAF_NODE	120:18	120:18	15	atoi
LEAF_NODE	120:22	120:22	14	(
ARGUMENT	120:23	120:23	14	optarg
FIELD	120:23	120:23	15	optarg
LEAF_NODE	120:23	120:23	16	optarg
LEAF_NODE	120:29	120:29	14	)
LEAF_NODE	120:30	120:30	10	;
JUMP_STATEMENT	121:3	121:8	9	break DESTINATION ;
KEYWORD	121:3	121:3	10	break
LEAF_NODE	121:3	121:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	121:8	121:8	10	;
LEAF_NODE	122:2	122:2	9	case
LEAF_NODE	122:7	122:7	9	'H'
LEAF_NODE	122:10	122:10	9	:
EXPR_STATEMENT	123:3	123:26	9	hdr_size = atoi ( optarg ) ;
EXPR	123:3	123:3	10	hdr_size = atoi ( optarg )
ASSIGN	123:3	123:14	11	hdr_size = atoi ( optarg )
LVAL	123:3	123:3	12	hdr_size
FIELD	123:3	123:3	13	hdr_size
LEAF_NODE	123:3	123:3	14	hdr_size
ASSIGN_OP	123:12	123:12	12	=
LEAF_NODE	123:12	123:12	13	=
RVAL	123:14	123:14	12	atoi ( optarg )
FUNCTION_CALL	123:14	123:25	13	atoi ( optarg )
CALLEE	123:14	123:14	14	atoi
LEAF_NODE	123:14	123:14	15	atoi
LEAF_NODE	123:18	123:18	14	(
ARGUMENT	123:19	123:19	14	optarg
FIELD	123:19	123:19	15	optarg
LEAF_NODE	123:19	123:19	16	optarg
LEAF_NODE	123:25	123:25	14	)
LEAF_NODE	123:26	123:26	10	;
JUMP_STATEMENT	124:3	124:8	9	break DESTINATION ;
KEYWORD	124:3	124:3	10	break
LEAF_NODE	124:3	124:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	124:8	124:8	10	;
LEAF_NODE	125:2	125:2	9	case
LEAF_NODE	125:7	125:7	9	'w'
LEAF_NODE	125:10	125:10	9	:
EXPR_STATEMENT	126:3	126:23	9	width = atoi ( optarg ) ;
EXPR	126:3	126:3	10	width = atoi ( optarg )
ASSIGN	126:3	126:11	11	width = atoi ( optarg )
LVAL	126:3	126:3	12	width
FIELD	126:3	126:3	13	width
LEAF_NODE	126:3	126:3	14	width
ASSIGN_OP	126:9	126:9	12	=
LEAF_NODE	126:9	126:9	13	=
RVAL	126:11	126:11	12	atoi ( optarg )
FUNCTION_CALL	126:11	126:22	13	atoi ( optarg )
CALLEE	126:11	126:11	14	atoi
LEAF_NODE	126:11	126:11	15	atoi
LEAF_NODE	126:15	126:15	14	(
ARGUMENT	126:16	126:16	14	optarg
FIELD	126:16	126:16	15	optarg
LEAF_NODE	126:16	126:16	16	optarg
LEAF_NODE	126:22	126:22	14	)
LEAF_NODE	126:23	126:23	10	;
JUMP_STATEMENT	127:3	127:8	9	break DESTINATION ;
KEYWORD	127:3	127:3	10	break
LEAF_NODE	127:3	127:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	127:8	127:8	10	;
LEAF_NODE	128:2	128:2	9	case
LEAF_NODE	128:7	128:7	9	'l'
LEAF_NODE	128:10	128:10	9	:
EXPR_STATEMENT	129:3	129:24	9	length = atoi ( optarg ) ;
EXPR	129:3	129:3	10	length = atoi ( optarg )
ASSIGN	129:3	129:12	11	length = atoi ( optarg )
LVAL	129:3	129:3	12	length
FIELD	129:3	129:3	13	length
LEAF_NODE	129:3	129:3	14	length
ASSIGN_OP	129:10	129:10	12	=
LEAF_NODE	129:10	129:10	13	=
RVAL	129:12	129:12	12	atoi ( optarg )
FUNCTION_CALL	129:12	129:23	13	atoi ( optarg )
CALLEE	129:12	129:12	14	atoi
LEAF_NODE	129:12	129:12	15	atoi
LEAF_NODE	129:16	129:16	14	(
ARGUMENT	129:17	129:17	14	optarg
FIELD	129:17	129:17	15	optarg
LEAF_NODE	129:17	129:17	16	optarg
LEAF_NODE	129:23	129:23	14	)
LEAF_NODE	129:24	129:24	10	;
JUMP_STATEMENT	130:3	130:8	9	break DESTINATION ;
KEYWORD	130:3	130:3	10	break
LEAF_NODE	130:3	130:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	130:8	130:8	10	;
LEAF_NODE	131:2	131:2	9	case
LEAF_NODE	131:7	131:7	9	'b'
LEAF_NODE	131:10	131:10	9	:
EXPR_STATEMENT	132:3	132:24	9	nbands = atoi ( optarg ) ;
EXPR	132:3	132:3	10	nbands = atoi ( optarg )
ASSIGN	132:3	132:12	11	nbands = atoi ( optarg )
LVAL	132:3	132:3	12	nbands
FIELD	132:3	132:3	13	nbands
LEAF_NODE	132:3	132:3	14	nbands
ASSIGN_OP	132:10	132:10	12	=
LEAF_NODE	132:10	132:10	13	=
RVAL	132:12	132:12	12	atoi ( optarg )
FUNCTION_CALL	132:12	132:23	13	atoi ( optarg )
CALLEE	132:12	132:12	14	atoi
LEAF_NODE	132:12	132:12	15	atoi
LEAF_NODE	132:16	132:16	14	(
ARGUMENT	132:17	132:17	14	optarg
FIELD	132:17	132:17	15	optarg
LEAF_NODE	132:17	132:17	16	optarg
LEAF_NODE	132:23	132:23	14	)
LEAF_NODE	132:24	132:24	10	;
JUMP_STATEMENT	133:3	133:8	9	break DESTINATION ;
KEYWORD	133:3	133:3	10	break
LEAF_NODE	133:3	133:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	133:8	133:8	10	;
LEAF_NODE	134:2	134:2	9	case
LEAF_NODE	134:7	134:7	9	'd'
LEAF_NODE	134:10	134:10	9	:
SELECTION	135:3	136:4	9	
KEYWORD	135:3	135:3	10	if
LEAF_NODE	135:3	135:3	11	if
LEAF_NODE	135:6	135:6	10	(
CONDITION	135:7	135:7	10	strncmp ( optarg , "byte" , 4 ) == 0
EXPR	135:7	135:37	11	strncmp ( optarg , "byte" , 4 ) == 0
FUNCTION_CALL	135:7	135:32	12	strncmp ( optarg , "byte" , 4 )
CALLEE	135:7	135:7	13	strncmp
LEAF_NODE	135:7	135:7	14	strncmp
LEAF_NODE	135:14	135:14	13	(
ARGUMENT	135:15	135:15	13	optarg
FIELD	135:15	135:15	14	optarg
LEAF_NODE	135:15	135:15	15	optarg
LEAF_NODE	135:21	135:21	13	,
ARGUMENT	135:23	135:23	13	"byte"
FIELD	135:23	135:23	14	"byte"
LEAF_NODE	135:23	135:23	15	"byte"
LEAF_NODE	135:29	135:29	13	,
ARGUMENT	135:31	135:31	13	4
FIELD	135:31	135:31	14	4
LEAF_NODE	135:31	135:31	15	4
LEAF_NODE	135:32	135:32	13	)
EQ_OPERATOR	135:34	135:34	12	==
LEAF_NODE	135:34	135:34	13	==
FIELD	135:37	135:37	12	0
LEAF_NODE	135:37	135:37	13	0
LEAF_NODE	135:38	135:38	10	)
STATEMENTS	136:4	136:4	10	
EXPR_STATEMENT	136:4	136:21	11	dtype = TIFF_BYTE ;
EXPR	136:4	136:4	12	dtype = TIFF_BYTE
ASSIGN	136:4	136:12	13	dtype = TIFF_BYTE
LVAL	136:4	136:4	14	dtype
FIELD	136:4	136:4	15	dtype
LEAF_NODE	136:4	136:4	16	dtype
ASSIGN_OP	136:10	136:10	14	=
LEAF_NODE	136:10	136:10	15	=
RVAL	136:12	136:12	14	TIFF_BYTE
FIELD	136:12	136:12	15	TIFF_BYTE
LEAF_NODE	136:12	136:12	16	TIFF_BYTE
LEAF_NODE	136:21	136:21	12	;
SELECTION	137:3	137:8	9	
KEYWORD	137:3	137:3	10	else
LEAF_NODE	137:3	137:3	11	else
STATEMENTS	137:8	137:8	10	
SELECTION	137:8	138:4	11	
KEYWORD	137:8	137:8	12	if
LEAF_NODE	137:8	137:8	13	if
LEAF_NODE	137:11	137:11	12	(
CONDITION	137:12	137:12	12	strncmp ( optarg , "short" , 5 ) == 0
EXPR	137:12	137:43	13	strncmp ( optarg , "short" , 5 ) == 0
FUNCTION_CALL	137:12	137:38	14	strncmp ( optarg , "short" , 5 )
CALLEE	137:12	137:12	15	strncmp
LEAF_NODE	137:12	137:12	16	strncmp
LEAF_NODE	137:19	137:19	15	(
ARGUMENT	137:20	137:20	15	optarg
FIELD	137:20	137:20	16	optarg
LEAF_NODE	137:20	137:20	17	optarg
LEAF_NODE	137:26	137:26	15	,
ARGUMENT	137:28	137:28	15	"short"
FIELD	137:28	137:28	16	"short"
LEAF_NODE	137:28	137:28	17	"short"
LEAF_NODE	137:35	137:35	15	,
ARGUMENT	137:37	137:37	15	5
FIELD	137:37	137:37	16	5
LEAF_NODE	137:37	137:37	17	5
LEAF_NODE	137:38	137:38	15	)
EQ_OPERATOR	137:40	137:40	14	==
LEAF_NODE	137:40	137:40	15	==
FIELD	137:43	137:43	14	0
LEAF_NODE	137:43	137:43	15	0
LEAF_NODE	137:44	137:44	12	)
STATEMENTS	138:4	138:4	12	
EXPR_STATEMENT	138:4	138:22	13	dtype = TIFF_SHORT ;
EXPR	138:4	138:4	14	dtype = TIFF_SHORT
ASSIGN	138:4	138:12	15	dtype = TIFF_SHORT
LVAL	138:4	138:4	16	dtype
FIELD	138:4	138:4	17	dtype
LEAF_NODE	138:4	138:4	18	dtype
ASSIGN_OP	138:10	138:10	16	=
LEAF_NODE	138:10	138:10	17	=
RVAL	138:12	138:12	16	TIFF_SHORT
FIELD	138:12	138:12	17	TIFF_SHORT
LEAF_NODE	138:12	138:12	18	TIFF_SHORT
LEAF_NODE	138:22	138:22	14	;
SELECTION	139:3	139:8	9	
KEYWORD	139:3	139:3	10	else
LEAF_NODE	139:3	139:3	11	else
STATEMENTS	139:8	139:8	10	
SELECTION	139:8	140:4	11	
KEYWORD	139:8	139:8	12	if
LEAF_NODE	139:8	139:8	13	if
LEAF_NODE	139:12	139:12	12	(
CONDITION	139:13	139:13	12	strncmp ( optarg , "long" , 4 ) == 0
EXPR	139:13	139:43	13	strncmp ( optarg , "long" , 4 ) == 0
FUNCTION_CALL	139:13	139:38	14	strncmp ( optarg , "long" , 4 )
CALLEE	139:13	139:13	15	strncmp
LEAF_NODE	139:13	139:13	16	strncmp
LEAF_NODE	139:20	139:20	15	(
ARGUMENT	139:21	139:21	15	optarg
FIELD	139:21	139:21	16	optarg
LEAF_NODE	139:21	139:21	17	optarg
LEAF_NODE	139:27	139:27	15	,
ARGUMENT	139:29	139:29	15	"long"
FIELD	139:29	139:29	16	"long"
LEAF_NODE	139:29	139:29	17	"long"
LEAF_NODE	139:35	139:35	15	,
ARGUMENT	139:37	139:37	15	4
FIELD	139:37	139:37	16	4
LEAF_NODE	139:37	139:37	17	4
LEAF_NODE	139:38	139:38	15	)
EQ_OPERATOR	139:40	139:40	14	==
LEAF_NODE	139:40	139:40	15	==
FIELD	139:43	139:43	14	0
LEAF_NODE	139:43	139:43	15	0
LEAF_NODE	139:44	139:44	12	)
STATEMENTS	140:4	140:4	12	
EXPR_STATEMENT	140:4	140:21	13	dtype = TIFF_LONG ;
EXPR	140:4	140:4	14	dtype = TIFF_LONG
ASSIGN	140:4	140:12	15	dtype = TIFF_LONG
LVAL	140:4	140:4	16	dtype
FIELD	140:4	140:4	17	dtype
LEAF_NODE	140:4	140:4	18	dtype
ASSIGN_OP	140:10	140:10	16	=
LEAF_NODE	140:10	140:10	17	=
RVAL	140:12	140:12	16	TIFF_LONG
FIELD	140:12	140:12	17	TIFF_LONG
LEAF_NODE	140:12	140:12	18	TIFF_LONG
LEAF_NODE	140:21	140:21	14	;
SELECTION	141:3	141:8	9	
KEYWORD	141:3	141:3	10	else
LEAF_NODE	141:3	141:3	11	else
STATEMENTS	141:8	141:8	10	
SELECTION	141:8	142:4	11	
KEYWORD	141:8	141:8	12	if
LEAF_NODE	141:8	141:8	13	if
LEAF_NODE	141:12	141:12	12	(
CONDITION	141:13	141:13	12	strncmp ( optarg , "sbyte" , 5 ) == 0
EXPR	141:13	141:44	13	strncmp ( optarg , "sbyte" , 5 ) == 0
FUNCTION_CALL	141:13	141:39	14	strncmp ( optarg , "sbyte" , 5 )
CALLEE	141:13	141:13	15	strncmp
LEAF_NODE	141:13	141:13	16	strncmp
LEAF_NODE	141:20	141:20	15	(
ARGUMENT	141:21	141:21	15	optarg
FIELD	141:21	141:21	16	optarg
LEAF_NODE	141:21	141:21	17	optarg
LEAF_NODE	141:27	141:27	15	,
ARGUMENT	141:29	141:29	15	"sbyte"
FIELD	141:29	141:29	16	"sbyte"
LEAF_NODE	141:29	141:29	17	"sbyte"
LEAF_NODE	141:36	141:36	15	,
ARGUMENT	141:38	141:38	15	5
FIELD	141:38	141:38	16	5
LEAF_NODE	141:38	141:38	17	5
LEAF_NODE	141:39	141:39	15	)
EQ_OPERATOR	141:41	141:41	14	==
LEAF_NODE	141:41	141:41	15	==
FIELD	141:44	141:44	14	0
LEAF_NODE	141:44	141:44	15	0
LEAF_NODE	141:45	141:45	12	)
STATEMENTS	142:4	142:4	12	
EXPR_STATEMENT	142:4	142:22	13	dtype = TIFF_SBYTE ;
EXPR	142:4	142:4	14	dtype = TIFF_SBYTE
ASSIGN	142:4	142:12	15	dtype = TIFF_SBYTE
LVAL	142:4	142:4	16	dtype
FIELD	142:4	142:4	17	dtype
LEAF_NODE	142:4	142:4	18	dtype
ASSIGN_OP	142:10	142:10	16	=
LEAF_NODE	142:10	142:10	17	=
RVAL	142:12	142:12	16	TIFF_SBYTE
FIELD	142:12	142:12	17	TIFF_SBYTE
LEAF_NODE	142:12	142:12	18	TIFF_SBYTE
LEAF_NODE	142:22	142:22	14	;
SELECTION	143:3	143:8	9	
KEYWORD	143:3	143:3	10	else
LEAF_NODE	143:3	143:3	11	else
STATEMENTS	143:8	143:8	10	
SELECTION	143:8	144:4	11	
KEYWORD	143:8	143:8	12	if
LEAF_NODE	143:8	143:8	13	if
LEAF_NODE	143:12	143:12	12	(
CONDITION	143:13	143:13	12	strncmp ( optarg , "sshort" , 6 ) == 0
EXPR	143:13	143:45	13	strncmp ( optarg , "sshort" , 6 ) == 0
FUNCTION_CALL	143:13	143:40	14	strncmp ( optarg , "sshort" , 6 )
CALLEE	143:13	143:13	15	strncmp
LEAF_NODE	143:13	143:13	16	strncmp
LEAF_NODE	143:20	143:20	15	(
ARGUMENT	143:21	143:21	15	optarg
FIELD	143:21	143:21	16	optarg
LEAF_NODE	143:21	143:21	17	optarg
LEAF_NODE	143:27	143:27	15	,
ARGUMENT	143:29	143:29	15	"sshort"
FIELD	143:29	143:29	16	"sshort"
LEAF_NODE	143:29	143:29	17	"sshort"
LEAF_NODE	143:37	143:37	15	,
ARGUMENT	143:39	143:39	15	6
FIELD	143:39	143:39	16	6
LEAF_NODE	143:39	143:39	17	6
LEAF_NODE	143:40	143:40	15	)
EQ_OPERATOR	143:42	143:42	14	==
LEAF_NODE	143:42	143:42	15	==
FIELD	143:45	143:45	14	0
LEAF_NODE	143:45	143:45	15	0
LEAF_NODE	143:46	143:46	12	)
STATEMENTS	144:4	144:4	12	
EXPR_STATEMENT	144:4	144:23	13	dtype = TIFF_SSHORT ;
EXPR	144:4	144:4	14	dtype = TIFF_SSHORT
ASSIGN	144:4	144:12	15	dtype = TIFF_SSHORT
LVAL	144:4	144:4	16	dtype
FIELD	144:4	144:4	17	dtype
LEAF_NODE	144:4	144:4	18	dtype
ASSIGN_OP	144:10	144:10	16	=
LEAF_NODE	144:10	144:10	17	=
RVAL	144:12	144:12	16	TIFF_SSHORT
FIELD	144:12	144:12	17	TIFF_SSHORT
LEAF_NODE	144:12	144:12	18	TIFF_SSHORT
LEAF_NODE	144:23	144:23	14	;
SELECTION	145:3	145:8	9	
KEYWORD	145:3	145:3	10	else
LEAF_NODE	145:3	145:3	11	else
STATEMENTS	145:8	145:8	10	
SELECTION	145:8	146:4	11	
KEYWORD	145:8	145:8	12	if
LEAF_NODE	145:8	145:8	13	if
LEAF_NODE	145:12	145:12	12	(
CONDITION	145:13	145:13	12	strncmp ( optarg , "slong" , 5 ) == 0
EXPR	145:13	145:44	13	strncmp ( optarg , "slong" , 5 ) == 0
FUNCTION_CALL	145:13	145:39	14	strncmp ( optarg , "slong" , 5 )
CALLEE	145:13	145:13	15	strncmp
LEAF_NODE	145:13	145:13	16	strncmp
LEAF_NODE	145:20	145:20	15	(
ARGUMENT	145:21	145:21	15	optarg
FIELD	145:21	145:21	16	optarg
LEAF_NODE	145:21	145:21	17	optarg
LEAF_NODE	145:27	145:27	15	,
ARGUMENT	145:29	145:29	15	"slong"
FIELD	145:29	145:29	16	"slong"
LEAF_NODE	145:29	145:29	17	"slong"
LEAF_NODE	145:36	145:36	15	,
ARGUMENT	145:38	145:38	15	5
FIELD	145:38	145:38	16	5
LEAF_NODE	145:38	145:38	17	5
LEAF_NODE	145:39	145:39	15	)
EQ_OPERATOR	145:41	145:41	14	==
LEAF_NODE	145:41	145:41	15	==
FIELD	145:44	145:44	14	0
LEAF_NODE	145:44	145:44	15	0
LEAF_NODE	145:45	145:45	12	)
STATEMENTS	146:4	146:4	12	
EXPR_STATEMENT	146:4	146:22	13	dtype = TIFF_SLONG ;
EXPR	146:4	146:4	14	dtype = TIFF_SLONG
ASSIGN	146:4	146:12	15	dtype = TIFF_SLONG
LVAL	146:4	146:4	16	dtype
FIELD	146:4	146:4	17	dtype
LEAF_NODE	146:4	146:4	18	dtype
ASSIGN_OP	146:10	146:10	16	=
LEAF_NODE	146:10	146:10	17	=
RVAL	146:12	146:12	16	TIFF_SLONG
FIELD	146:12	146:12	17	TIFF_SLONG
LEAF_NODE	146:12	146:12	18	TIFF_SLONG
LEAF_NODE	146:22	146:22	14	;
SELECTION	147:3	147:8	9	
KEYWORD	147:3	147:3	10	else
LEAF_NODE	147:3	147:3	11	else
STATEMENTS	147:8	147:8	10	
SELECTION	147:8	148:4	11	
KEYWORD	147:8	147:8	12	if
LEAF_NODE	147:8	147:8	13	if
LEAF_NODE	147:12	147:12	12	(
CONDITION	147:13	147:13	12	strncmp ( optarg , "float" , 5 ) == 0
EXPR	147:13	147:44	13	strncmp ( optarg , "float" , 5 ) == 0
FUNCTION_CALL	147:13	147:39	14	strncmp ( optarg , "float" , 5 )
CALLEE	147:13	147:13	15	strncmp
LEAF_NODE	147:13	147:13	16	strncmp
LEAF_NODE	147:20	147:20	15	(
ARGUMENT	147:21	147:21	15	optarg
FIELD	147:21	147:21	16	optarg
LEAF_NODE	147:21	147:21	17	optarg
LEAF_NODE	147:27	147:27	15	,
ARGUMENT	147:29	147:29	15	"float"
FIELD	147:29	147:29	16	"float"
LEAF_NODE	147:29	147:29	17	"float"
LEAF_NODE	147:36	147:36	15	,
ARGUMENT	147:38	147:38	15	5
FIELD	147:38	147:38	16	5
LEAF_NODE	147:38	147:38	17	5
LEAF_NODE	147:39	147:39	15	)
EQ_OPERATOR	147:41	147:41	14	==
LEAF_NODE	147:41	147:41	15	==
FIELD	147:44	147:44	14	0
LEAF_NODE	147:44	147:44	15	0
LEAF_NODE	147:45	147:45	12	)
STATEMENTS	148:4	148:4	12	
EXPR_STATEMENT	148:4	148:22	13	dtype = TIFF_FLOAT ;
EXPR	148:4	148:4	14	dtype = TIFF_FLOAT
ASSIGN	148:4	148:12	15	dtype = TIFF_FLOAT
LVAL	148:4	148:4	16	dtype
FIELD	148:4	148:4	17	dtype
LEAF_NODE	148:4	148:4	18	dtype
ASSIGN_OP	148:10	148:10	16	=
LEAF_NODE	148:10	148:10	17	=
RVAL	148:12	148:12	16	TIFF_FLOAT
FIELD	148:12	148:12	17	TIFF_FLOAT
LEAF_NODE	148:12	148:12	18	TIFF_FLOAT
LEAF_NODE	148:22	148:22	14	;
SELECTION	149:3	149:8	9	
KEYWORD	149:3	149:3	10	else
LEAF_NODE	149:3	149:3	11	else
STATEMENTS	149:8	149:8	10	
SELECTION	149:8	150:4	11	
KEYWORD	149:8	149:8	12	if
LEAF_NODE	149:8	149:8	13	if
LEAF_NODE	149:12	149:12	12	(
CONDITION	149:13	149:13	12	strncmp ( optarg , "double" , 6 ) == 0
EXPR	149:13	149:45	13	strncmp ( optarg , "double" , 6 ) == 0
FUNCTION_CALL	149:13	149:40	14	strncmp ( optarg , "double" , 6 )
CALLEE	149:13	149:13	15	strncmp
LEAF_NODE	149:13	149:13	16	strncmp
LEAF_NODE	149:20	149:20	15	(
ARGUMENT	149:21	149:21	15	optarg
FIELD	149:21	149:21	16	optarg
LEAF_NODE	149:21	149:21	17	optarg
LEAF_NODE	149:27	149:27	15	,
ARGUMENT	149:29	149:29	15	"double"
FIELD	149:29	149:29	16	"double"
LEAF_NODE	149:29	149:29	17	"double"
LEAF_NODE	149:37	149:37	15	,
ARGUMENT	149:39	149:39	15	6
FIELD	149:39	149:39	16	6
LEAF_NODE	149:39	149:39	17	6
LEAF_NODE	149:40	149:40	15	)
EQ_OPERATOR	149:42	149:42	14	==
LEAF_NODE	149:42	149:42	15	==
FIELD	149:45	149:45	14	0
LEAF_NODE	149:45	149:45	15	0
LEAF_NODE	149:46	149:46	12	)
STATEMENTS	150:4	150:4	12	
EXPR_STATEMENT	150:4	150:23	13	dtype = TIFF_DOUBLE ;
EXPR	150:4	150:4	14	dtype = TIFF_DOUBLE
ASSIGN	150:4	150:12	15	dtype = TIFF_DOUBLE
LVAL	150:4	150:4	16	dtype
FIELD	150:4	150:4	17	dtype
LEAF_NODE	150:4	150:4	18	dtype
ASSIGN_OP	150:10	150:10	16	=
LEAF_NODE	150:10	150:10	17	=
RVAL	150:12	150:12	16	TIFF_DOUBLE
FIELD	150:12	150:12	17	TIFF_DOUBLE
LEAF_NODE	150:12	150:12	18	TIFF_DOUBLE
LEAF_NODE	150:23	150:23	14	;
SELECTION	151:3	152:4	9	
KEYWORD	151:3	151:3	10	else
LEAF_NODE	151:3	151:3	11	else
STATEMENTS	152:4	152:4	10	
EXPR_STATEMENT	152:4	152:21	11	dtype = TIFF_BYTE ;
EXPR	152:4	152:4	12	dtype = TIFF_BYTE
ASSIGN	152:4	152:12	13	dtype = TIFF_BYTE
LVAL	152:4	152:4	14	dtype
FIELD	152:4	152:4	15	dtype
LEAF_NODE	152:4	152:4	16	dtype
ASSIGN_OP	152:10	152:10	14	=
LEAF_NODE	152:10	152:10	15	=
RVAL	152:12	152:12	14	TIFF_BYTE
FIELD	152:12	152:12	15	TIFF_BYTE
LEAF_NODE	152:12	152:12	16	TIFF_BYTE
LEAF_NODE	152:21	152:21	12	;
EXPR_STATEMENT	153:3	153:31	9	depth = TIFFDataWidth ( dtype ) ;
EXPR	153:3	153:3	10	depth = TIFFDataWidth ( dtype )
ASSIGN	153:3	153:11	11	depth = TIFFDataWidth ( dtype )
LVAL	153:3	153:3	12	depth
FIELD	153:3	153:3	13	depth
LEAF_NODE	153:3	153:3	14	depth
ASSIGN_OP	153:9	153:9	12	=
LEAF_NODE	153:9	153:9	13	=
RVAL	153:11	153:11	12	TIFFDataWidth ( dtype )
FUNCTION_CALL	153:11	153:30	13	TIFFDataWidth ( dtype )
CALLEE	153:11	153:11	14	TIFFDataWidth
LEAF_NODE	153:11	153:11	15	TIFFDataWidth
LEAF_NODE	153:24	153:24	14	(
ARGUMENT	153:25	153:25	14	dtype
FIELD	153:25	153:25	15	dtype
LEAF_NODE	153:25	153:25	16	dtype
LEAF_NODE	153:30	153:30	14	)
LEAF_NODE	153:31	153:31	10	;
JUMP_STATEMENT	154:3	154:8	9	break DESTINATION ;
KEYWORD	154:3	154:3	10	break
LEAF_NODE	154:3	154:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	154:8	154:8	10	;
LEAF_NODE	155:2	155:2	9	case
LEAF_NODE	155:7	155:7	9	'L'
LEAF_NODE	155:10	155:10	9	:
EXPR_STATEMENT	156:3	156:32	9	fillorder = FILLORDER_LSB2MSB ;
EXPR	156:3	156:3	10	fillorder = FILLORDER_LSB2MSB
ASSIGN	156:3	156:15	11	fillorder = FILLORDER_LSB2MSB
LVAL	156:3	156:3	12	fillorder
FIELD	156:3	156:3	13	fillorder
LEAF_NODE	156:3	156:3	14	fillorder
ASSIGN_OP	156:13	156:13	12	=
LEAF_NODE	156:13	156:13	13	=
RVAL	156:15	156:15	12	FILLORDER_LSB2MSB
FIELD	156:15	156:15	13	FILLORDER_LSB2MSB
LEAF_NODE	156:15	156:15	14	FILLORDER_LSB2MSB
LEAF_NODE	156:32	156:32	10	;
JUMP_STATEMENT	157:3	157:8	9	break DESTINATION ;
KEYWORD	157:3	157:3	10	break
LEAF_NODE	157:3	157:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	157:8	157:8	10	;
LEAF_NODE	158:2	158:2	9	case
LEAF_NODE	158:7	158:7	9	'M'
LEAF_NODE	158:10	158:10	9	:
EXPR_STATEMENT	159:3	159:32	9	fillorder = FILLORDER_MSB2LSB ;
EXPR	159:3	159:3	10	fillorder = FILLORDER_MSB2LSB
ASSIGN	159:3	159:15	11	fillorder = FILLORDER_MSB2LSB
LVAL	159:3	159:3	12	fillorder
FIELD	159:3	159:3	13	fillorder
LEAF_NODE	159:3	159:3	14	fillorder
ASSIGN_OP	159:13	159:13	12	=
LEAF_NODE	159:13	159:13	13	=
RVAL	159:15	159:15	12	FILLORDER_MSB2LSB
FIELD	159:15	159:15	13	FILLORDER_MSB2LSB
LEAF_NODE	159:15	159:15	14	FILLORDER_MSB2LSB
LEAF_NODE	159:32	159:32	10	;
JUMP_STATEMENT	160:3	160:8	9	break DESTINATION ;
KEYWORD	160:3	160:3	10	break
LEAF_NODE	160:3	160:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	160:8	160:8	10	;
LEAF_NODE	161:2	161:2	9	case
LEAF_NODE	161:7	161:7	9	'p'
LEAF_NODE	161:10	161:10	9	:
SELECTION	162:3	163:4	9	
KEYWORD	162:3	162:3	10	if
LEAF_NODE	162:3	162:3	11	if
LEAF_NODE	162:6	162:6	10	(
CONDITION	162:7	162:7	10	strncmp ( optarg , "miniswhite" , 10 ) == 0
EXPR	162:7	162:44	11	strncmp ( optarg , "miniswhite" , 10 ) == 0
FUNCTION_CALL	162:7	162:39	12	strncmp ( optarg , "miniswhite" , 10 )
CALLEE	162:7	162:7	13	strncmp
LEAF_NODE	162:7	162:7	14	strncmp
LEAF_NODE	162:14	162:14	13	(
ARGUMENT	162:15	162:15	13	optarg
FIELD	162:15	162:15	14	optarg
LEAF_NODE	162:15	162:15	15	optarg
LEAF_NODE	162:21	162:21	13	,
ARGUMENT	162:23	162:23	13	"miniswhite"
FIELD	162:23	162:23	14	"miniswhite"
LEAF_NODE	162:23	162:23	15	"miniswhite"
LEAF_NODE	162:35	162:35	13	,
ARGUMENT	162:37	162:37	13	10
FIELD	162:37	162:37	14	10
LEAF_NODE	162:37	162:37	15	10
LEAF_NODE	162:39	162:39	13	)
EQ_OPERATOR	162:41	162:41	12	==
LEAF_NODE	162:41	162:41	13	==
FIELD	162:44	162:44	12	0
LEAF_NODE	162:44	162:44	13	0
LEAF_NODE	162:45	162:45	10	)
STATEMENTS	163:4	163:4	10	
EXPR_STATEMENT	163:4	163:40	11	photometric = PHOTOMETRIC_MINISWHITE ;
EXPR	163:4	163:4	12	photometric = PHOTOMETRIC_MINISWHITE
ASSIGN	163:4	163:18	13	photometric = PHOTOMETRIC_MINISWHITE
LVAL	163:4	163:4	14	photometric
FIELD	163:4	163:4	15	photometric
LEAF_NODE	163:4	163:4	16	photometric
ASSIGN_OP	163:16	163:16	14	=
LEAF_NODE	163:16	163:16	15	=
RVAL	163:18	163:18	14	PHOTOMETRIC_MINISWHITE
FIELD	163:18	163:18	15	PHOTOMETRIC_MINISWHITE
LEAF_NODE	163:18	163:18	16	PHOTOMETRIC_MINISWHITE
LEAF_NODE	163:40	163:40	12	;
SELECTION	164:3	164:8	9	
KEYWORD	164:3	164:3	10	else
LEAF_NODE	164:3	164:3	11	else
STATEMENTS	164:8	164:8	10	
SELECTION	164:8	165:4	11	
KEYWORD	164:8	164:8	12	if
LEAF_NODE	164:8	164:8	13	if
LEAF_NODE	164:11	164:11	12	(
CONDITION	164:12	164:12	12	strncmp ( optarg , "minisblack" , 10 ) == 0
EXPR	164:12	164:49	13	strncmp ( optarg , "minisblack" , 10 ) == 0
FUNCTION_CALL	164:12	164:44	14	strncmp ( optarg , "minisblack" , 10 )
CALLEE	164:12	164:12	15	strncmp
LEAF_NODE	164:12	164:12	16	strncmp
LEAF_NODE	164:19	164:19	15	(
ARGUMENT	164:20	164:20	15	optarg
FIELD	164:20	164:20	16	optarg
LEAF_NODE	164:20	164:20	17	optarg
LEAF_NODE	164:26	164:26	15	,
ARGUMENT	164:28	164:28	15	"minisblack"
FIELD	164:28	164:28	16	"minisblack"
LEAF_NODE	164:28	164:28	17	"minisblack"
LEAF_NODE	164:40	164:40	15	,
ARGUMENT	164:42	164:42	15	10
FIELD	164:42	164:42	16	10
LEAF_NODE	164:42	164:42	17	10
LEAF_NODE	164:44	164:44	15	)
EQ_OPERATOR	164:46	164:46	14	==
LEAF_NODE	164:46	164:46	15	==
FIELD	164:49	164:49	14	0
LEAF_NODE	164:49	164:49	15	0
LEAF_NODE	164:50	164:50	12	)
STATEMENTS	165:4	165:4	12	
EXPR_STATEMENT	165:4	165:40	13	photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	165:4	165:4	14	photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	165:4	165:18	15	photometric = PHOTOMETRIC_MINISBLACK
LVAL	165:4	165:4	16	photometric
FIELD	165:4	165:4	17	photometric
LEAF_NODE	165:4	165:4	18	photometric
ASSIGN_OP	165:16	165:16	16	=
LEAF_NODE	165:16	165:16	17	=
RVAL	165:18	165:18	16	PHOTOMETRIC_MINISBLACK
FIELD	165:18	165:18	17	PHOTOMETRIC_MINISBLACK
LEAF_NODE	165:18	165:18	18	PHOTOMETRIC_MINISBLACK
LEAF_NODE	165:40	165:40	14	;
SELECTION	166:3	166:8	9	
KEYWORD	166:3	166:3	10	else
LEAF_NODE	166:3	166:3	11	else
STATEMENTS	166:8	166:8	10	
SELECTION	166:8	167:4	11	
KEYWORD	166:8	166:8	12	if
LEAF_NODE	166:8	166:8	13	if
LEAF_NODE	166:11	166:11	12	(
CONDITION	166:12	166:12	12	strncmp ( optarg , "rgb" , 3 ) == 0
EXPR	166:12	166:41	13	strncmp ( optarg , "rgb" , 3 ) == 0
FUNCTION_CALL	166:12	166:36	14	strncmp ( optarg , "rgb" , 3 )
CALLEE	166:12	166:12	15	strncmp
LEAF_NODE	166:12	166:12	16	strncmp
LEAF_NODE	166:19	166:19	15	(
ARGUMENT	166:20	166:20	15	optarg
FIELD	166:20	166:20	16	optarg
LEAF_NODE	166:20	166:20	17	optarg
LEAF_NODE	166:26	166:26	15	,
ARGUMENT	166:28	166:28	15	"rgb"
FIELD	166:28	166:28	16	"rgb"
LEAF_NODE	166:28	166:28	17	"rgb"
LEAF_NODE	166:33	166:33	15	,
ARGUMENT	166:35	166:35	15	3
FIELD	166:35	166:35	16	3
LEAF_NODE	166:35	166:35	17	3
LEAF_NODE	166:36	166:36	15	)
EQ_OPERATOR	166:38	166:38	14	==
LEAF_NODE	166:38	166:38	15	==
FIELD	166:41	166:41	14	0
LEAF_NODE	166:41	166:41	15	0
LEAF_NODE	166:42	166:42	12	)
STATEMENTS	167:4	167:4	12	
EXPR_STATEMENT	167:4	167:33	13	photometric = PHOTOMETRIC_RGB ;
EXPR	167:4	167:4	14	photometric = PHOTOMETRIC_RGB
ASSIGN	167:4	167:18	15	photometric = PHOTOMETRIC_RGB
LVAL	167:4	167:4	16	photometric
FIELD	167:4	167:4	17	photometric
LEAF_NODE	167:4	167:4	18	photometric
ASSIGN_OP	167:16	167:16	16	=
LEAF_NODE	167:16	167:16	17	=
RVAL	167:18	167:18	16	PHOTOMETRIC_RGB
FIELD	167:18	167:18	17	PHOTOMETRIC_RGB
LEAF_NODE	167:18	167:18	18	PHOTOMETRIC_RGB
LEAF_NODE	167:33	167:33	14	;
SELECTION	168:3	168:8	9	
KEYWORD	168:3	168:3	10	else
LEAF_NODE	168:3	168:3	11	else
STATEMENTS	168:8	168:8	10	
SELECTION	168:8	169:4	11	
KEYWORD	168:8	168:8	12	if
LEAF_NODE	168:8	168:8	13	if
LEAF_NODE	168:11	168:11	12	(
CONDITION	168:12	168:12	12	strncmp ( optarg , "cmyk" , 4 ) == 0
EXPR	168:12	168:42	13	strncmp ( optarg , "cmyk" , 4 ) == 0
FUNCTION_CALL	168:12	168:37	14	strncmp ( optarg , "cmyk" , 4 )
CALLEE	168:12	168:12	15	strncmp
LEAF_NODE	168:12	168:12	16	strncmp
LEAF_NODE	168:19	168:19	15	(
ARGUMENT	168:20	168:20	15	optarg
FIELD	168:20	168:20	16	optarg
LEAF_NODE	168:20	168:20	17	optarg
LEAF_NODE	168:26	168:26	15	,
ARGUMENT	168:28	168:28	15	"cmyk"
FIELD	168:28	168:28	16	"cmyk"
LEAF_NODE	168:28	168:28	17	"cmyk"
LEAF_NODE	168:34	168:34	15	,
ARGUMENT	168:36	168:36	15	4
FIELD	168:36	168:36	16	4
LEAF_NODE	168:36	168:36	17	4
LEAF_NODE	168:37	168:37	15	)
EQ_OPERATOR	168:39	168:39	14	==
LEAF_NODE	168:39	168:39	15	==
FIELD	168:42	168:42	14	0
LEAF_NODE	168:42	168:42	15	0
LEAF_NODE	168:43	168:43	12	)
STATEMENTS	169:4	169:4	12	
EXPR_STATEMENT	169:4	169:39	13	photometric = PHOTOMETRIC_SEPARATED ;
EXPR	169:4	169:4	14	photometric = PHOTOMETRIC_SEPARATED
ASSIGN	169:4	169:18	15	photometric = PHOTOMETRIC_SEPARATED
LVAL	169:4	169:4	16	photometric
FIELD	169:4	169:4	17	photometric
LEAF_NODE	169:4	169:4	18	photometric
ASSIGN_OP	169:16	169:16	16	=
LEAF_NODE	169:16	169:16	17	=
RVAL	169:18	169:18	16	PHOTOMETRIC_SEPARATED
FIELD	169:18	169:18	17	PHOTOMETRIC_SEPARATED
LEAF_NODE	169:18	169:18	18	PHOTOMETRIC_SEPARATED
LEAF_NODE	169:39	169:39	14	;
SELECTION	170:3	170:8	9	
KEYWORD	170:3	170:3	10	else
LEAF_NODE	170:3	170:3	11	else
STATEMENTS	170:8	170:8	10	
SELECTION	170:8	171:4	11	
KEYWORD	170:8	170:8	12	if
LEAF_NODE	170:8	170:8	13	if
LEAF_NODE	170:11	170:11	12	(
CONDITION	170:12	170:12	12	strncmp ( optarg , "ycbcr" , 5 ) == 0
EXPR	170:12	170:43	13	strncmp ( optarg , "ycbcr" , 5 ) == 0
FUNCTION_CALL	170:12	170:38	14	strncmp ( optarg , "ycbcr" , 5 )
CALLEE	170:12	170:12	15	strncmp
LEAF_NODE	170:12	170:12	16	strncmp
LEAF_NODE	170:19	170:19	15	(
ARGUMENT	170:20	170:20	15	optarg
FIELD	170:20	170:20	16	optarg
LEAF_NODE	170:20	170:20	17	optarg
LEAF_NODE	170:26	170:26	15	,
ARGUMENT	170:28	170:28	15	"ycbcr"
FIELD	170:28	170:28	16	"ycbcr"
LEAF_NODE	170:28	170:28	17	"ycbcr"
LEAF_NODE	170:35	170:35	15	,
ARGUMENT	170:37	170:37	15	5
FIELD	170:37	170:37	16	5
LEAF_NODE	170:37	170:37	17	5
LEAF_NODE	170:38	170:38	15	)
EQ_OPERATOR	170:40	170:40	14	==
LEAF_NODE	170:40	170:40	15	==
FIELD	170:43	170:43	14	0
LEAF_NODE	170:43	170:43	15	0
LEAF_NODE	170:44	170:44	12	)
STATEMENTS	171:4	171:4	12	
EXPR_STATEMENT	171:4	171:35	13	photometric = PHOTOMETRIC_YCBCR ;
EXPR	171:4	171:4	14	photometric = PHOTOMETRIC_YCBCR
ASSIGN	171:4	171:18	15	photometric = PHOTOMETRIC_YCBCR
LVAL	171:4	171:4	16	photometric
FIELD	171:4	171:4	17	photometric
LEAF_NODE	171:4	171:4	18	photometric
ASSIGN_OP	171:16	171:16	16	=
LEAF_NODE	171:16	171:16	17	=
RVAL	171:18	171:18	16	PHOTOMETRIC_YCBCR
FIELD	171:18	171:18	17	PHOTOMETRIC_YCBCR
LEAF_NODE	171:18	171:18	18	PHOTOMETRIC_YCBCR
LEAF_NODE	171:35	171:35	14	;
SELECTION	172:3	172:8	9	
KEYWORD	172:3	172:3	10	else
LEAF_NODE	172:3	172:3	11	else
STATEMENTS	172:8	172:8	10	
SELECTION	172:8	173:4	11	
KEYWORD	172:8	172:8	12	if
LEAF_NODE	172:8	172:8	13	if
LEAF_NODE	172:11	172:11	12	(
CONDITION	172:12	172:12	12	strncmp ( optarg , "cielab" , 6 ) == 0
EXPR	172:12	172:44	13	strncmp ( optarg , "cielab" , 6 ) == 0
FUNCTION_CALL	172:12	172:39	14	strncmp ( optarg , "cielab" , 6 )
CALLEE	172:12	172:12	15	strncmp
LEAF_NODE	172:12	172:12	16	strncmp
LEAF_NODE	172:19	172:19	15	(
ARGUMENT	172:20	172:20	15	optarg
FIELD	172:20	172:20	16	optarg
LEAF_NODE	172:20	172:20	17	optarg
LEAF_NODE	172:26	172:26	15	,
ARGUMENT	172:28	172:28	15	"cielab"
FIELD	172:28	172:28	16	"cielab"
LEAF_NODE	172:28	172:28	17	"cielab"
LEAF_NODE	172:36	172:36	15	,
ARGUMENT	172:38	172:38	15	6
FIELD	172:38	172:38	16	6
LEAF_NODE	172:38	172:38	17	6
LEAF_NODE	172:39	172:39	15	)
EQ_OPERATOR	172:41	172:41	14	==
LEAF_NODE	172:41	172:41	15	==
FIELD	172:44	172:44	14	0
LEAF_NODE	172:44	172:44	15	0
LEAF_NODE	172:45	172:45	12	)
STATEMENTS	173:4	173:4	12	
EXPR_STATEMENT	173:4	173:36	13	photometric = PHOTOMETRIC_CIELAB ;
EXPR	173:4	173:4	14	photometric = PHOTOMETRIC_CIELAB
ASSIGN	173:4	173:18	15	photometric = PHOTOMETRIC_CIELAB
LVAL	173:4	173:4	16	photometric
FIELD	173:4	173:4	17	photometric
LEAF_NODE	173:4	173:4	18	photometric
ASSIGN_OP	173:16	173:16	16	=
LEAF_NODE	173:16	173:16	17	=
RVAL	173:18	173:18	16	PHOTOMETRIC_CIELAB
FIELD	173:18	173:18	17	PHOTOMETRIC_CIELAB
LEAF_NODE	173:18	173:18	18	PHOTOMETRIC_CIELAB
LEAF_NODE	173:36	173:36	14	;
SELECTION	174:3	174:8	9	
KEYWORD	174:3	174:3	10	else
LEAF_NODE	174:3	174:3	11	else
STATEMENTS	174:8	174:8	10	
SELECTION	174:8	175:4	11	
KEYWORD	174:8	174:8	12	if
LEAF_NODE	174:8	174:8	13	if
LEAF_NODE	174:11	174:11	12	(
CONDITION	174:12	174:12	12	strncmp ( optarg , "icclab" , 6 ) == 0
EXPR	174:12	174:44	13	strncmp ( optarg , "icclab" , 6 ) == 0
FUNCTION_CALL	174:12	174:39	14	strncmp ( optarg , "icclab" , 6 )
CALLEE	174:12	174:12	15	strncmp
LEAF_NODE	174:12	174:12	16	strncmp
LEAF_NODE	174:19	174:19	15	(
ARGUMENT	174:20	174:20	15	optarg
FIELD	174:20	174:20	16	optarg
LEAF_NODE	174:20	174:20	17	optarg
LEAF_NODE	174:26	174:26	15	,
ARGUMENT	174:28	174:28	15	"icclab"
FIELD	174:28	174:28	16	"icclab"
LEAF_NODE	174:28	174:28	17	"icclab"
LEAF_NODE	174:36	174:36	15	,
ARGUMENT	174:38	174:38	15	6
FIELD	174:38	174:38	16	6
LEAF_NODE	174:38	174:38	17	6
LEAF_NODE	174:39	174:39	15	)
EQ_OPERATOR	174:41	174:41	14	==
LEAF_NODE	174:41	174:41	15	==
FIELD	174:44	174:44	14	0
LEAF_NODE	174:44	174:44	15	0
LEAF_NODE	174:45	174:45	12	)
STATEMENTS	175:4	175:4	12	
EXPR_STATEMENT	175:4	175:36	13	photometric = PHOTOMETRIC_ICCLAB ;
EXPR	175:4	175:4	14	photometric = PHOTOMETRIC_ICCLAB
ASSIGN	175:4	175:18	15	photometric = PHOTOMETRIC_ICCLAB
LVAL	175:4	175:4	16	photometric
FIELD	175:4	175:4	17	photometric
LEAF_NODE	175:4	175:4	18	photometric
ASSIGN_OP	175:16	175:16	16	=
LEAF_NODE	175:16	175:16	17	=
RVAL	175:18	175:18	16	PHOTOMETRIC_ICCLAB
FIELD	175:18	175:18	17	PHOTOMETRIC_ICCLAB
LEAF_NODE	175:18	175:18	18	PHOTOMETRIC_ICCLAB
LEAF_NODE	175:36	175:36	14	;
SELECTION	176:3	176:8	9	
KEYWORD	176:3	176:3	10	else
LEAF_NODE	176:3	176:3	11	else
STATEMENTS	176:8	176:8	10	
SELECTION	176:8	177:4	11	
KEYWORD	176:8	176:8	12	if
LEAF_NODE	176:8	176:8	13	if
LEAF_NODE	176:11	176:11	12	(
CONDITION	176:12	176:12	12	strncmp ( optarg , "itulab" , 6 ) == 0
EXPR	176:12	176:44	13	strncmp ( optarg , "itulab" , 6 ) == 0
FUNCTION_CALL	176:12	176:39	14	strncmp ( optarg , "itulab" , 6 )
CALLEE	176:12	176:12	15	strncmp
LEAF_NODE	176:12	176:12	16	strncmp
LEAF_NODE	176:19	176:19	15	(
ARGUMENT	176:20	176:20	15	optarg
FIELD	176:20	176:20	16	optarg
LEAF_NODE	176:20	176:20	17	optarg
LEAF_NODE	176:26	176:26	15	,
ARGUMENT	176:28	176:28	15	"itulab"
FIELD	176:28	176:28	16	"itulab"
LEAF_NODE	176:28	176:28	17	"itulab"
LEAF_NODE	176:36	176:36	15	,
ARGUMENT	176:38	176:38	15	6
FIELD	176:38	176:38	16	6
LEAF_NODE	176:38	176:38	17	6
LEAF_NODE	176:39	176:39	15	)
EQ_OPERATOR	176:41	176:41	14	==
LEAF_NODE	176:41	176:41	15	==
FIELD	176:44	176:44	14	0
LEAF_NODE	176:44	176:44	15	0
LEAF_NODE	176:45	176:45	12	)
STATEMENTS	177:4	177:4	12	
EXPR_STATEMENT	177:4	177:36	13	photometric = PHOTOMETRIC_ITULAB ;
EXPR	177:4	177:4	14	photometric = PHOTOMETRIC_ITULAB
ASSIGN	177:4	177:18	15	photometric = PHOTOMETRIC_ITULAB
LVAL	177:4	177:4	16	photometric
FIELD	177:4	177:4	17	photometric
LEAF_NODE	177:4	177:4	18	photometric
ASSIGN_OP	177:16	177:16	16	=
LEAF_NODE	177:16	177:16	17	=
RVAL	177:18	177:18	16	PHOTOMETRIC_ITULAB
FIELD	177:18	177:18	17	PHOTOMETRIC_ITULAB
LEAF_NODE	177:18	177:18	18	PHOTOMETRIC_ITULAB
LEAF_NODE	177:36	177:36	14	;
SELECTION	178:3	179:4	9	
KEYWORD	178:3	178:3	10	else
LEAF_NODE	178:3	178:3	11	else
STATEMENTS	179:4	179:4	10	
EXPR_STATEMENT	179:4	179:40	11	photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	179:4	179:4	12	photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	179:4	179:18	13	photometric = PHOTOMETRIC_MINISBLACK
LVAL	179:4	179:4	14	photometric
FIELD	179:4	179:4	15	photometric
LEAF_NODE	179:4	179:4	16	photometric
ASSIGN_OP	179:16	179:16	14	=
LEAF_NODE	179:16	179:16	15	=
RVAL	179:18	179:18	14	PHOTOMETRIC_MINISBLACK
FIELD	179:18	179:18	15	PHOTOMETRIC_MINISBLACK
LEAF_NODE	179:18	179:18	16	PHOTOMETRIC_MINISBLACK
LEAF_NODE	179:40	179:40	12	;
JUMP_STATEMENT	180:3	180:8	9	break DESTINATION ;
KEYWORD	180:3	180:3	10	break
LEAF_NODE	180:3	180:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	180:8	180:8	10	;
LEAF_NODE	181:2	181:2	9	case
LEAF_NODE	181:7	181:7	9	's'
LEAF_NODE	181:10	181:10	9	:
EXPR_STATEMENT	182:3	182:11	9	swab = 1 ;
EXPR	182:3	182:3	10	swab = 1
ASSIGN	182:3	182:10	11	swab = 1
LVAL	182:3	182:3	12	swab
FIELD	182:3	182:3	13	swab
LEAF_NODE	182:3	182:3	14	swab
ASSIGN_OP	182:8	182:8	12	=
LEAF_NODE	182:8	182:8	13	=
RVAL	182:10	182:10	12	1
FIELD	182:10	182:10	13	1
LEAF_NODE	182:10	182:10	14	1
LEAF_NODE	182:11	182:11	10	;
JUMP_STATEMENT	183:3	183:8	9	break DESTINATION ;
KEYWORD	183:3	183:3	10	break
LEAF_NODE	183:3	183:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	183:8	183:8	10	;
LEAF_NODE	184:2	184:2	9	case
LEAF_NODE	184:7	184:7	9	'i'
LEAF_NODE	184:10	184:10	9	:
SELECTION	185:3	186:4	9	
KEYWORD	185:3	185:3	10	if
LEAF_NODE	185:3	185:3	11	if
LEAF_NODE	185:6	185:6	10	(
CONDITION	185:7	185:7	10	strncmp ( optarg , "pixel" , 4 ) == 0
EXPR	185:7	185:38	11	strncmp ( optarg , "pixel" , 4 ) == 0
FUNCTION_CALL	185:7	185:33	12	strncmp ( optarg , "pixel" , 4 )
CALLEE	185:7	185:7	13	strncmp
LEAF_NODE	185:7	185:7	14	strncmp
LEAF_NODE	185:14	185:14	13	(
ARGUMENT	185:15	185:15	13	optarg
FIELD	185:15	185:15	14	optarg
LEAF_NODE	185:15	185:15	15	optarg
LEAF_NODE	185:21	185:21	13	,
ARGUMENT	185:23	185:23	13	"pixel"
FIELD	185:23	185:23	14	"pixel"
LEAF_NODE	185:23	185:23	15	"pixel"
LEAF_NODE	185:30	185:30	13	,
ARGUMENT	185:32	185:32	13	4
FIELD	185:32	185:32	14	4
LEAF_NODE	185:32	185:32	15	4
LEAF_NODE	185:33	185:33	13	)
EQ_OPERATOR	185:35	185:35	12	==
LEAF_NODE	185:35	185:35	13	==
FIELD	185:38	185:38	12	0
LEAF_NODE	185:38	185:38	13	0
LEAF_NODE	185:39	185:39	10	)
STATEMENTS	186:4	186:4	10	
EXPR_STATEMENT	186:4	186:24	11	interleaving = PIXEL ;
EXPR	186:4	186:4	12	interleaving = PIXEL
ASSIGN	186:4	186:19	13	interleaving = PIXEL
LVAL	186:4	186:4	14	interleaving
FIELD	186:4	186:4	15	interleaving
LEAF_NODE	186:4	186:4	16	interleaving
ASSIGN_OP	186:17	186:17	14	=
LEAF_NODE	186:17	186:17	15	=
RVAL	186:19	186:19	14	PIXEL
FIELD	186:19	186:19	15	PIXEL
LEAF_NODE	186:19	186:19	16	PIXEL
LEAF_NODE	186:24	186:24	12	;
SELECTION	187:3	187:8	9	
KEYWORD	187:3	187:3	10	else
LEAF_NODE	187:3	187:3	11	else
STATEMENTS	187:8	187:8	10	
SELECTION	187:8	188:4	11	
KEYWORD	187:8	187:8	12	if
LEAF_NODE	187:8	187:8	13	if
LEAF_NODE	187:12	187:12	12	(
CONDITION	187:13	187:13	12	strncmp ( optarg , "band" , 6 ) == 0
EXPR	187:13	187:43	13	strncmp ( optarg , "band" , 6 ) == 0
FUNCTION_CALL	187:13	187:38	14	strncmp ( optarg , "band" , 6 )
CALLEE	187:13	187:13	15	strncmp
LEAF_NODE	187:13	187:13	16	strncmp
LEAF_NODE	187:20	187:20	15	(
ARGUMENT	187:21	187:21	15	optarg
FIELD	187:21	187:21	16	optarg
LEAF_NODE	187:21	187:21	17	optarg
LEAF_NODE	187:27	187:27	15	,
ARGUMENT	187:29	187:29	15	"band"
FIELD	187:29	187:29	16	"band"
LEAF_NODE	187:29	187:29	17	"band"
LEAF_NODE	187:35	187:35	15	,
ARGUMENT	187:37	187:37	15	6
FIELD	187:37	187:37	16	6
LEAF_NODE	187:37	187:37	17	6
LEAF_NODE	187:38	187:38	15	)
EQ_OPERATOR	187:40	187:40	14	==
LEAF_NODE	187:40	187:40	15	==
FIELD	187:43	187:43	14	0
LEAF_NODE	187:43	187:43	15	0
LEAF_NODE	187:44	187:44	12	)
STATEMENTS	188:4	188:4	12	
EXPR_STATEMENT	188:4	188:23	13	interleaving = BAND ;
EXPR	188:4	188:4	14	interleaving = BAND
ASSIGN	188:4	188:19	15	interleaving = BAND
LVAL	188:4	188:4	16	interleaving
FIELD	188:4	188:4	17	interleaving
LEAF_NODE	188:4	188:4	18	interleaving
ASSIGN_OP	188:17	188:17	16	=
LEAF_NODE	188:17	188:17	17	=
RVAL	188:19	188:19	16	BAND
FIELD	188:19	188:19	17	BAND
LEAF_NODE	188:19	188:19	18	BAND
LEAF_NODE	188:23	188:23	14	;
SELECTION	189:3	190:4	9	
KEYWORD	189:3	189:3	10	else
LEAF_NODE	189:3	189:3	11	else
STATEMENTS	190:4	190:4	10	
EXPR_STATEMENT	190:4	190:20	11	interleaving = 0 ;
EXPR	190:4	190:4	12	interleaving = 0
ASSIGN	190:4	190:19	13	interleaving = 0
LVAL	190:4	190:4	14	interleaving
FIELD	190:4	190:4	15	interleaving
LEAF_NODE	190:4	190:4	16	interleaving
ASSIGN_OP	190:17	190:17	14	=
LEAF_NODE	190:17	190:17	15	=
RVAL	190:19	190:19	14	0
FIELD	190:19	190:19	15	0
LEAF_NODE	190:19	190:19	16	0
LEAF_NODE	190:20	190:20	12	;
JUMP_STATEMENT	191:3	191:8	9	break DESTINATION ;
KEYWORD	191:3	191:3	10	break
LEAF_NODE	191:3	191:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	191:8	191:8	10	;
LEAF_NODE	192:2	192:2	9	case
LEAF_NODE	192:7	192:7	9	'o'
LEAF_NODE	192:10	192:10	9	:
EXPR_STATEMENT	193:3	193:23	9	outfilename = optarg ;
EXPR	193:3	193:3	10	outfilename = optarg
ASSIGN	193:3	193:17	11	outfilename = optarg
LVAL	193:3	193:3	12	outfilename
FIELD	193:3	193:3	13	outfilename
LEAF_NODE	193:3	193:3	14	outfilename
ASSIGN_OP	193:15	193:15	12	=
LEAF_NODE	193:15	193:15	13	=
RVAL	193:17	193:17	12	optarg
FIELD	193:17	193:17	13	optarg
LEAF_NODE	193:17	193:17	14	optarg
LEAF_NODE	193:23	193:23	10	;
JUMP_STATEMENT	194:3	194:8	9	break DESTINATION ;
KEYWORD	194:3	194:3	10	break
LEAF_NODE	194:3	194:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	194:8	194:8	10	;
LEAF_NODE	195:2	195:2	9	case
LEAF_NODE	195:7	195:7	9	'h'
LEAF_NODE	195:10	195:10	9	:
EXPR_STATEMENT	196:3	196:10	9	usage ( ) ;
EXPR	196:3	196:3	10	usage ( )
FUNCTION_CALL	196:3	196:9	11	usage ( )
CALLEE	196:3	196:3	12	usage
LEAF_NODE	196:3	196:3	13	usage
LEAF_NODE	196:8	196:8	12	(
LEAF_NODE	196:9	196:9	12	)
LEAF_NODE	196:10	196:10	10	;
LABEL	197:2	197:9	9	default :
LEAF_NODE	197:2	197:2	10	default
LEAF_NODE	197:9	197:9	10	:
JUMP_STATEMENT	198:3	198:8	9	break DESTINATION ;
KEYWORD	198:3	198:3	10	break
LEAF_NODE	198:3	198:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	198:8	198:8	10	;
LEAF_NODE	199:2	199:2	8	}
LEAF_NODE	200:8	200:8	5	}
SELECTION	202:8	203:2	3	
KEYWORD	202:8	202:8	4	if
LEAF_NODE	202:8	202:8	5	if
LEAF_NODE	202:11	202:11	4	(
CONDITION	202:12	202:12	4	argc - optind < 2
EXPR	202:12	202:28	5	argc - optind < 2
FIELD	202:12	202:12	6	argc
LEAF_NODE	202:12	202:12	7	argc
LEAF_NODE	202:17	202:17	6	-
FIELD	202:19	202:19	6	optind
LEAF_NODE	202:19	202:19	7	optind
REL_OPERATOR	202:26	202:26	6	<
LEAF_NODE	202:26	202:26	7	<
FIELD	202:28	202:28	6	2
LEAF_NODE	202:28	202:28	7	2
LEAF_NODE	202:29	202:29	4	)
STATEMENTS	203:2	203:2	4	
EXPR_STATEMENT	203:2	203:9	5	usage ( ) ;
EXPR	203:2	203:2	6	usage ( )
FUNCTION_CALL	203:2	203:8	7	usage ( )
CALLEE	203:2	203:2	8	usage
LEAF_NODE	203:2	203:2	9	usage
LEAF_NODE	203:7	203:7	8	(
LEAF_NODE	203:8	203:8	8	)
LEAF_NODE	203:9	203:9	6	;
EXPR_STATEMENT	205:8	205:53	3	fd = open ( argv [ optind ] , O_RDONLY | O_BINARY , 0 ) ;
EXPR	205:8	205:8	4	fd = open ( argv [ optind ] , O_RDONLY | O_BINARY , 0 )
ASSIGN	205:8	205:13	5	fd = open ( argv [ optind ] , O_RDONLY | O_BINARY , 0 )
LVAL	205:8	205:8	6	fd
FIELD	205:8	205:8	7	fd
LEAF_NODE	205:8	205:8	8	fd
ASSIGN_OP	205:11	205:11	6	=
LEAF_NODE	205:11	205:11	7	=
RVAL	205:13	205:13	6	open ( argv [ optind ] , O_RDONLY | O_BINARY , 0 )
FUNCTION_CALL	205:13	205:52	7	open ( argv [ optind ] , O_RDONLY | O_BINARY , 0 )
CALLEE	205:13	205:13	8	open
LEAF_NODE	205:13	205:13	9	open
LEAF_NODE	205:17	205:17	8	(
ARGUMENT	205:18	205:18	8	argv [ optind ]
FIELD	205:18	205:29	9	argv [ optind ]
LEAF_NODE	205:18	205:18	10	argv
LEAF_NODE	205:22	205:22	10	[
EXPR	205:23	205:23	10	optind
FIELD	205:23	205:23	11	optind
LEAF_NODE	205:23	205:23	12	optind
LEAF_NODE	205:29	205:29	10	]
LEAF_NODE	205:30	205:30	8	,
ARGUMENT	205:32	205:32	8	O_RDONLY | O_BINARY
BIT_OR	205:32	205:41	9	O_RDONLY | O_BINARY
BIT_OR_ELEM	205:32	205:32	10	O_RDONLY
FIELD	205:32	205:32	11	O_RDONLY
LEAF_NODE	205:32	205:32	12	O_RDONLY
LEAF_NODE	205:40	205:40	10	|
BIT_OR_ELEM	205:41	205:41	10	O_BINARY
FIELD	205:41	205:41	11	O_BINARY
LEAF_NODE	205:41	205:41	12	O_BINARY
LEAF_NODE	205:49	205:49	8	,
ARGUMENT	205:51	205:51	8	0
FIELD	205:51	205:51	9	0
LEAF_NODE	205:51	205:51	10	0
LEAF_NODE	205:52	205:52	8	)
LEAF_NODE	205:53	205:53	4	;
SELECTION	206:1	206:13	3	
KEYWORD	206:1	206:1	4	if
LEAF_NODE	206:1	206:1	5	if
LEAF_NODE	206:4	206:4	4	(
CONDITION	206:5	206:5	4	fd < 0
EXPR	206:5	206:10	5	fd < 0
FIELD	206:5	206:5	6	fd
LEAF_NODE	206:5	206:5	7	fd
REL_OPERATOR	206:8	206:8	6	<
LEAF_NODE	206:8	206:8	7	<
FIELD	206:10	206:10	6	0
LEAF_NODE	206:10	206:10	7	0
LEAF_NODE	206:11	206:11	4	)
STATEMENTS	206:13	210:1	4	
LEAF_NODE	206:13	206:13	5	{
STATEMENTS	207:2	209:2	5	
EXPR_STATEMENT	207:2	208:25	6	fprintf ( stderr , "%s: %s: Cannot open input file.\n" , argv [ 0 ] , argv [ optind ] ) ;
EXPR	207:2	207:2	7	fprintf ( stderr , "%s: %s: Cannot open input file.\n" , argv [ 0 ] , argv [ optind ] )
FUNCTION_CALL	207:2	208:24	8	fprintf ( stderr , "%s: %s: Cannot open input file.\n" , argv [ 0 ] , argv [ optind ] )
CALLEE	207:2	207:2	9	fprintf
LEAF_NODE	207:2	207:2	10	fprintf
LEAF_NODE	207:9	207:9	9	(
ARGUMENT	207:10	207:10	9	stderr
FIELD	207:10	207:10	10	stderr
LEAF_NODE	207:10	207:10	11	stderr
LEAF_NODE	207:16	207:16	9	,
ARGUMENT	207:18	207:18	9	"%s: %s: Cannot open input file.\n"
FIELD	207:18	207:18	10	"%s: %s: Cannot open input file.\n"
LEAF_NODE	207:18	207:18	11	"%s: %s: Cannot open input file.\n"
LEAF_NODE	207:53	207:53	9	,
ARGUMENT	208:3	208:3	9	argv [ 0 ]
FIELD	208:3	208:9	10	argv [ 0 ]
LEAF_NODE	208:3	208:3	11	argv
LEAF_NODE	208:7	208:7	11	[
EXPR	208:8	208:8	11	0
FIELD	208:8	208:8	12	0
LEAF_NODE	208:8	208:8	13	0
LEAF_NODE	208:9	208:9	11	]
LEAF_NODE	208:10	208:10	9	,
ARGUMENT	208:12	208:12	9	argv [ optind ]
FIELD	208:12	208:23	10	argv [ optind ]
LEAF_NODE	208:12	208:12	11	argv
LEAF_NODE	208:16	208:16	11	[
EXPR	208:17	208:17	11	optind
FIELD	208:17	208:17	12	optind
LEAF_NODE	208:17	208:17	13	optind
LEAF_NODE	208:23	208:23	11	]
LEAF_NODE	208:24	208:24	9	)
LEAF_NODE	208:25	208:25	7	;
JUMP_STATEMENT	209:2	209:13	6	return ( - 1 ) ;
KEYWORD	209:2	209:2	7	return
LEAF_NODE	209:2	209:2	8	return
DESTINATION	209:9	209:9	7	( - 1 )
EXPR	209:9	209:12	8	( - 1 )
LEAF_NODE	209:9	209:9	9	(
UNARY_EXPR	209:10	209:11	9	- 1
UNARY_OPERATOR	209:10	209:10	10	-
LEAF_NODE	209:10	209:10	11	-
FIELD	209:11	209:11	10	1
LEAF_NODE	209:11	209:11	11	1
LEAF_NODE	209:12	209:12	9	)
LEAF_NODE	209:13	209:13	7	;
LEAF_NODE	210:1	210:1	5	}
SELECTION	212:1	213:2	3	
KEYWORD	212:1	212:1	4	if
LEAF_NODE	212:1	212:1	5	if
LEAF_NODE	212:4	212:4	4	(
CONDITION	212:5	212:5	4	guessSize ( fd , dtype , hdr_size , nbands , swab , & width , & length ) < 0
EXPR	212:5	212:69	5	guessSize ( fd , dtype , hdr_size , nbands , swab , & width , & length ) < 0
FUNCTION_CALL	212:5	212:65	6	guessSize ( fd , dtype , hdr_size , nbands , swab , & width , & length )
CALLEE	212:5	212:5	7	guessSize
LEAF_NODE	212:5	212:5	8	guessSize
LEAF_NODE	212:14	212:14	7	(
ARGUMENT	212:15	212:15	7	fd
FIELD	212:15	212:15	8	fd
LEAF_NODE	212:15	212:15	9	fd
LEAF_NODE	212:17	212:17	7	,
ARGUMENT	212:19	212:19	7	dtype
FIELD	212:19	212:19	8	dtype
LEAF_NODE	212:19	212:19	9	dtype
LEAF_NODE	212:24	212:24	7	,
ARGUMENT	212:26	212:26	7	hdr_size
FIELD	212:26	212:26	8	hdr_size
LEAF_NODE	212:26	212:26	9	hdr_size
LEAF_NODE	212:34	212:34	7	,
ARGUMENT	212:36	212:36	7	nbands
FIELD	212:36	212:36	8	nbands
LEAF_NODE	212:36	212:36	9	nbands
LEAF_NODE	212:42	212:42	7	,
ARGUMENT	212:44	212:44	7	swab
FIELD	212:44	212:44	8	swab
LEAF_NODE	212:44	212:44	9	swab
LEAF_NODE	212:48	212:48	7	,
ARGUMENT	212:50	212:50	7	& width
UNARY_EXPR	212:50	212:51	8	& width
UNARY_OPERATOR	212:50	212:50	9	&
LEAF_NODE	212:50	212:50	10	&
FIELD	212:51	212:51	9	width
LEAF_NODE	212:51	212:51	10	width
LEAF_NODE	212:56	212:56	7	,
ARGUMENT	212:58	212:58	7	& length
UNARY_EXPR	212:58	212:59	8	& length
UNARY_OPERATOR	212:58	212:58	9	&
LEAF_NODE	212:58	212:58	10	&
FIELD	212:59	212:59	9	length
LEAF_NODE	212:59	212:59	10	length
LEAF_NODE	212:65	212:65	7	)
REL_OPERATOR	212:67	212:67	6	<
LEAF_NODE	212:67	212:67	7	<
FIELD	212:69	212:69	6	0
LEAF_NODE	212:69	212:69	7	0
LEAF_NODE	212:70	212:70	4	)
STATEMENTS	213:2	213:2	4	
JUMP_STATEMENT	213:2	213:10	5	return 1 ;
KEYWORD	213:2	213:2	6	return
LEAF_NODE	213:2	213:2	7	return
DESTINATION	213:9	213:9	6	1
EXPR	213:9	213:9	7	1
FIELD	213:9	213:9	8	1
LEAF_NODE	213:9	213:9	9	1
LEAF_NODE	213:10	213:10	6	;
SELECTION	215:1	216:2	3	
KEYWORD	215:1	215:1	4	if
LEAF_NODE	215:1	215:1	5	if
LEAF_NODE	215:4	215:4	4	(
CONDITION	215:5	215:5	4	outfilename == NULL
EXPR	215:5	215:20	5	outfilename == NULL
FIELD	215:5	215:5	6	outfilename
LEAF_NODE	215:5	215:5	7	outfilename
EQ_OPERATOR	215:17	215:17	6	==
LEAF_NODE	215:17	215:17	7	==
FIELD	215:20	215:20	6	NULL
LEAF_NODE	215:20	215:20	7	NULL
LEAF_NODE	215:24	215:24	4	)
STATEMENTS	216:2	216:2	4	
EXPR_STATEMENT	216:2	216:30	5	outfilename = argv [ optind + 1 ] ;
EXPR	216:2	216:2	6	outfilename = argv [ optind + 1 ]
ASSIGN	216:2	216:16	7	outfilename = argv [ optind + 1 ]
LVAL	216:2	216:2	8	outfilename
FIELD	216:2	216:2	9	outfilename
LEAF_NODE	216:2	216:2	10	outfilename
ASSIGN_OP	216:14	216:14	8	=
LEAF_NODE	216:14	216:14	9	=
RVAL	216:16	216:16	8	argv [ optind + 1 ]
FIELD	216:16	216:29	9	argv [ optind + 1 ]
LEAF_NODE	216:16	216:16	10	argv
LEAF_NODE	216:20	216:20	10	[
EXPR	216:21	216:28	10	optind + 1
FIELD	216:21	216:21	11	optind
LEAF_NODE	216:21	216:21	12	optind
LEAF_NODE	216:27	216:27	11	+
FIELD	216:28	216:28	11	1
LEAF_NODE	216:28	216:28	12	1
LEAF_NODE	216:29	216:29	10	]
LEAF_NODE	216:30	216:30	6	;
EXPR_STATEMENT	217:1	217:33	3	out = TIFFOpen ( outfilename , "w" ) ;
EXPR	217:1	217:1	4	out = TIFFOpen ( outfilename , "w" )
ASSIGN	217:1	217:7	5	out = TIFFOpen ( outfilename , "w" )
LVAL	217:1	217:1	6	out
FIELD	217:1	217:1	7	out
LEAF_NODE	217:1	217:1	8	out
ASSIGN_OP	217:5	217:5	6	=
LEAF_NODE	217:5	217:5	7	=
RVAL	217:7	217:7	6	TIFFOpen ( outfilename , "w" )
FUNCTION_CALL	217:7	217:32	7	TIFFOpen ( outfilename , "w" )
CALLEE	217:7	217:7	8	TIFFOpen
LEAF_NODE	217:7	217:7	9	TIFFOpen
LEAF_NODE	217:15	217:15	8	(
ARGUMENT	217:16	217:16	8	outfilename
FIELD	217:16	217:16	9	outfilename
LEAF_NODE	217:16	217:16	10	outfilename
LEAF_NODE	217:27	217:27	8	,
ARGUMENT	217:29	217:29	8	"w"
FIELD	217:29	217:29	9	"w"
LEAF_NODE	217:29	217:29	10	"w"
LEAF_NODE	217:32	217:32	8	)
LEAF_NODE	217:33	217:33	4	;
SELECTION	218:1	218:18	3	
KEYWORD	218:1	218:1	4	if
LEAF_NODE	218:1	218:1	5	if
LEAF_NODE	218:4	218:4	4	(
CONDITION	218:5	218:5	4	out == NULL
EXPR	218:5	218:12	5	out == NULL
FIELD	218:5	218:5	6	out
LEAF_NODE	218:5	218:5	7	out
EQ_OPERATOR	218:9	218:9	6	==
LEAF_NODE	218:9	218:9	7	==
FIELD	218:12	218:12	6	NULL
LEAF_NODE	218:12	218:12	7	NULL
LEAF_NODE	218:16	218:16	4	)
STATEMENTS	218:18	222:1	4	
LEAF_NODE	218:18	218:18	5	{
STATEMENTS	219:2	221:2	5	
EXPR_STATEMENT	219:2	220:24	6	fprintf ( stderr , "%s: %s: Cannot open file for output.\n" , argv [ 0 ] , outfilename ) ;
EXPR	219:2	219:2	7	fprintf ( stderr , "%s: %s: Cannot open file for output.\n" , argv [ 0 ] , outfilename )
FUNCTION_CALL	219:2	220:23	8	fprintf ( stderr , "%s: %s: Cannot open file for output.\n" , argv [ 0 ] , outfilename )
CALLEE	219:2	219:2	9	fprintf
LEAF_NODE	219:2	219:2	10	fprintf
LEAF_NODE	219:9	219:9	9	(
ARGUMENT	219:10	219:10	9	stderr
FIELD	219:10	219:10	10	stderr
LEAF_NODE	219:10	219:10	11	stderr
LEAF_NODE	219:16	219:16	9	,
ARGUMENT	219:18	219:18	9	"%s: %s: Cannot open file for output.\n"
FIELD	219:18	219:18	10	"%s: %s: Cannot open file for output.\n"
LEAF_NODE	219:18	219:18	11	"%s: %s: Cannot open file for output.\n"
LEAF_NODE	219:58	219:58	9	,
ARGUMENT	220:3	220:3	9	argv [ 0 ]
FIELD	220:3	220:9	10	argv [ 0 ]
LEAF_NODE	220:3	220:3	11	argv
LEAF_NODE	220:7	220:7	11	[
EXPR	220:8	220:8	11	0
FIELD	220:8	220:8	12	0
LEAF_NODE	220:8	220:8	13	0
LEAF_NODE	220:9	220:9	11	]
LEAF_NODE	220:10	220:10	9	,
ARGUMENT	220:12	220:12	9	outfilename
FIELD	220:12	220:12	10	outfilename
LEAF_NODE	220:12	220:12	11	outfilename
LEAF_NODE	220:23	220:23	9	)
LEAF_NODE	220:24	220:24	7	;
JUMP_STATEMENT	221:2	221:13	6	return ( - 1 ) ;
KEYWORD	221:2	221:2	7	return
LEAF_NODE	221:2	221:2	8	return
DESTINATION	221:9	221:9	7	( - 1 )
EXPR	221:9	221:12	8	( - 1 )
LEAF_NODE	221:9	221:9	9	(
UNARY_EXPR	221:10	221:11	9	- 1
UNARY_OPERATOR	221:10	221:10	10	-
LEAF_NODE	221:10	221:10	11	-
FIELD	221:11	221:11	10	1
LEAF_NODE	221:11	221:11	11	1
LEAF_NODE	221:12	221:12	9	)
LEAF_NODE	221:13	221:13	7	;
LEAF_NODE	222:1	222:1	5	}
EXPR_STATEMENT	223:1	223:45	3	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width ) ;
EXPR	223:1	223:1	4	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width )
FUNCTION_CALL	223:1	223:44	5	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width )
CALLEE	223:1	223:1	6	TIFFSetField
LEAF_NODE	223:1	223:1	7	TIFFSetField
LEAF_NODE	223:13	223:13	6	(
ARGUMENT	223:14	223:14	6	out
FIELD	223:14	223:14	7	out
LEAF_NODE	223:14	223:14	8	out
LEAF_NODE	223:17	223:17	6	,
ARGUMENT	223:19	223:19	6	TIFFTAG_IMAGEWIDTH
FIELD	223:19	223:19	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	223:19	223:19	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	223:37	223:37	6	,
ARGUMENT	223:39	223:39	6	width
FIELD	223:39	223:39	7	width
LEAF_NODE	223:39	223:39	8	width
LEAF_NODE	223:44	223:44	6	)
LEAF_NODE	223:45	223:45	4	;
EXPR_STATEMENT	224:1	224:47	3	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , length ) ;
EXPR	224:1	224:1	4	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , length )
FUNCTION_CALL	224:1	224:46	5	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , length )
CALLEE	224:1	224:1	6	TIFFSetField
LEAF_NODE	224:1	224:1	7	TIFFSetField
LEAF_NODE	224:13	224:13	6	(
ARGUMENT	224:14	224:14	6	out
FIELD	224:14	224:14	7	out
LEAF_NODE	224:14	224:14	8	out
LEAF_NODE	224:17	224:17	6	,
ARGUMENT	224:19	224:19	6	TIFFTAG_IMAGELENGTH
FIELD	224:19	224:19	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	224:19	224:19	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	224:38	224:38	6	,
ARGUMENT	224:40	224:40	6	length
FIELD	224:40	224:40	7	length
LEAF_NODE	224:40	224:40	8	length
LEAF_NODE	224:46	224:46	6	)
LEAF_NODE	224:47	224:47	4	;
EXPR_STATEMENT	225:1	225:60	3	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT ) ;
EXPR	225:1	225:1	4	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
FUNCTION_CALL	225:1	225:59	5	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
CALLEE	225:1	225:1	6	TIFFSetField
LEAF_NODE	225:1	225:1	7	TIFFSetField
LEAF_NODE	225:13	225:13	6	(
ARGUMENT	225:14	225:14	6	out
FIELD	225:14	225:14	7	out
LEAF_NODE	225:14	225:14	8	out
LEAF_NODE	225:17	225:17	6	,
ARGUMENT	225:19	225:19	6	TIFFTAG_ORIENTATION
FIELD	225:19	225:19	7	TIFFTAG_ORIENTATION
LEAF_NODE	225:19	225:19	8	TIFFTAG_ORIENTATION
LEAF_NODE	225:38	225:38	6	,
ARGUMENT	225:40	225:40	6	ORIENTATION_TOPLEFT
FIELD	225:40	225:40	7	ORIENTATION_TOPLEFT
LEAF_NODE	225:40	225:40	8	ORIENTATION_TOPLEFT
LEAF_NODE	225:59	225:59	6	)
LEAF_NODE	225:60	225:60	4	;
EXPR_STATEMENT	226:1	226:51	3	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , nbands ) ;
EXPR	226:1	226:1	4	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , nbands )
FUNCTION_CALL	226:1	226:50	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , nbands )
CALLEE	226:1	226:1	6	TIFFSetField
LEAF_NODE	226:1	226:1	7	TIFFSetField
LEAF_NODE	226:13	226:13	6	(
ARGUMENT	226:14	226:14	6	out
FIELD	226:14	226:14	7	out
LEAF_NODE	226:14	226:14	8	out
LEAF_NODE	226:17	226:17	6	,
ARGUMENT	226:19	226:19	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	226:19	226:19	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	226:19	226:19	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	226:42	226:42	6	,
ARGUMENT	226:44	226:44	6	nbands
FIELD	226:44	226:44	7	nbands
LEAF_NODE	226:44	226:44	8	nbands
LEAF_NODE	226:50	226:50	6	)
LEAF_NODE	226:51	226:51	4	;
EXPR_STATEMENT	227:1	227:52	3	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , depth * 8 ) ;
EXPR	227:1	227:1	4	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , depth * 8 )
FUNCTION_CALL	227:1	227:51	5	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , depth * 8 )
CALLEE	227:1	227:1	6	TIFFSetField
LEAF_NODE	227:1	227:1	7	TIFFSetField
LEAF_NODE	227:13	227:13	6	(
ARGUMENT	227:14	227:14	6	out
FIELD	227:14	227:14	7	out
LEAF_NODE	227:14	227:14	8	out
LEAF_NODE	227:17	227:17	6	,
ARGUMENT	227:19	227:19	6	TIFFTAG_BITSPERSAMPLE
FIELD	227:19	227:19	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	227:19	227:19	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	227:40	227:40	6	,
ARGUMENT	227:42	227:50	6	depth * 8
FIELD	227:42	227:42	7	depth
LEAF_NODE	227:42	227:42	8	depth
LEAF_NODE	227:48	227:48	7	*
FIELD	227:50	227:50	7	8
LEAF_NODE	227:50	227:50	8	8
LEAF_NODE	227:51	227:51	6	)
LEAF_NODE	227:52	227:52	4	;
EXPR_STATEMENT	228:1	228:48	3	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder ) ;
EXPR	228:1	228:1	4	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder )
FUNCTION_CALL	228:1	228:47	5	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder )
CALLEE	228:1	228:1	6	TIFFSetField
LEAF_NODE	228:1	228:1	7	TIFFSetField
LEAF_NODE	228:13	228:13	6	(
ARGUMENT	228:14	228:14	6	out
FIELD	228:14	228:14	7	out
LEAF_NODE	228:14	228:14	8	out
LEAF_NODE	228:17	228:17	6	,
ARGUMENT	228:19	228:19	6	TIFFTAG_FILLORDER
FIELD	228:19	228:19	7	TIFFTAG_FILLORDER
LEAF_NODE	228:19	228:19	8	TIFFTAG_FILLORDER
LEAF_NODE	228:36	228:36	6	,
ARGUMENT	228:38	228:38	6	fillorder
FIELD	228:38	228:38	7	fillorder
LEAF_NODE	228:38	228:38	8	fillorder
LEAF_NODE	228:47	228:47	6	)
LEAF_NODE	228:48	228:48	4	;
EXPR_STATEMENT	229:1	229:48	3	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config ) ;
EXPR	229:1	229:1	4	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config )
FUNCTION_CALL	229:1	229:47	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config )
CALLEE	229:1	229:1	6	TIFFSetField
LEAF_NODE	229:1	229:1	7	TIFFSetField
LEAF_NODE	229:13	229:13	6	(
ARGUMENT	229:14	229:14	6	out
FIELD	229:14	229:14	7	out
LEAF_NODE	229:14	229:14	8	out
LEAF_NODE	229:17	229:17	6	,
ARGUMENT	229:19	229:19	6	TIFFTAG_PLANARCONFIG
FIELD	229:19	229:19	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	229:19	229:19	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	229:39	229:39	6	,
ARGUMENT	229:41	229:41	6	config
FIELD	229:41	229:41	7	config
LEAF_NODE	229:41	229:41	8	config
LEAF_NODE	229:47	229:47	6	)
LEAF_NODE	229:48	229:48	4	;
EXPR_STATEMENT	230:1	230:52	3	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric ) ;
EXPR	230:1	230:1	4	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric )
FUNCTION_CALL	230:1	230:51	5	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric )
CALLEE	230:1	230:1	6	TIFFSetField
LEAF_NODE	230:1	230:1	7	TIFFSetField
LEAF_NODE	230:13	230:13	6	(
ARGUMENT	230:14	230:14	6	out
FIELD	230:14	230:14	7	out
LEAF_NODE	230:14	230:14	8	out
LEAF_NODE	230:17	230:17	6	,
ARGUMENT	230:19	230:19	6	TIFFTAG_PHOTOMETRIC
FIELD	230:19	230:19	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	230:19	230:19	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	230:38	230:38	6	,
ARGUMENT	230:40	230:40	6	photometric
FIELD	230:40	230:40	7	photometric
LEAF_NODE	230:40	230:40	8	photometric
LEAF_NODE	230:51	230:51	6	)
LEAF_NODE	230:52	230:52	4	;
SELECTION	231:1	231:16	3	
KEYWORD	231:1	231:1	4	switch
LEAF_NODE	231:1	231:1	5	switch
LEAF_NODE	231:8	231:8	4	(
CONDITION	231:9	231:9	4	dtype
EXPR	231:9	231:9	5	dtype
FIELD	231:9	231:9	6	dtype
LEAF_NODE	231:9	231:9	7	dtype
LEAF_NODE	231:14	231:14	4	)
STATEMENTS	231:16	249:1	4	
LEAF_NODE	231:16	231:16	5	{
STATEMENTS	232:1	248:2	5	
LABEL	232:1	232:15	6	case TIFF_BYTE :
LEAF_NODE	232:1	232:1	7	case
LEAF_NODE	232:6	232:6	7	TIFF_BYTE
LEAF_NODE	232:15	232:15	7	:
LABEL	233:1	233:16	6	case TIFF_SHORT :
LEAF_NODE	233:1	233:1	7	case
LEAF_NODE	233:6	233:6	7	TIFF_SHORT
LEAF_NODE	233:16	233:16	7	:
LABEL	234:1	234:15	6	case TIFF_LONG :
LEAF_NODE	234:1	234:1	7	case
LEAF_NODE	234:6	234:6	7	TIFF_LONG
LEAF_NODE	234:15	234:15	7	:
EXPR_STATEMENT	235:2	235:60	6	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT ) ;
EXPR	235:2	235:2	7	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT )
FUNCTION_CALL	235:2	235:59	8	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_UINT )
CALLEE	235:2	235:2	9	TIFFSetField
LEAF_NODE	235:2	235:2	10	TIFFSetField
LEAF_NODE	235:14	235:14	9	(
ARGUMENT	235:15	235:15	9	out
FIELD	235:15	235:15	10	out
LEAF_NODE	235:15	235:15	11	out
LEAF_NODE	235:18	235:18	9	,
ARGUMENT	235:20	235:20	9	TIFFTAG_SAMPLEFORMAT
FIELD	235:20	235:20	10	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	235:20	235:20	11	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	235:40	235:40	9	,
ARGUMENT	235:42	235:42	9	SAMPLEFORMAT_UINT
FIELD	235:42	235:42	10	SAMPLEFORMAT_UINT
LEAF_NODE	235:42	235:42	11	SAMPLEFORMAT_UINT
LEAF_NODE	235:59	235:59	9	)
LEAF_NODE	235:60	235:60	7	;
JUMP_STATEMENT	236:2	236:7	6	break DESTINATION ;
KEYWORD	236:2	236:2	7	break
LEAF_NODE	236:2	236:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	236:7	236:7	7	;
LABEL	237:1	237:16	6	case TIFF_SBYTE :
LEAF_NODE	237:1	237:1	7	case
LEAF_NODE	237:6	237:6	7	TIFF_SBYTE
LEAF_NODE	237:16	237:16	7	:
LABEL	238:1	238:17	6	case TIFF_SSHORT :
LEAF_NODE	238:1	238:1	7	case
LEAF_NODE	238:6	238:6	7	TIFF_SSHORT
LEAF_NODE	238:17	238:17	7	:
LABEL	239:1	239:16	6	case TIFF_SLONG :
LEAF_NODE	239:1	239:1	7	case
LEAF_NODE	239:6	239:6	7	TIFF_SLONG
LEAF_NODE	239:16	239:16	7	:
EXPR_STATEMENT	240:2	240:59	6	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_INT ) ;
EXPR	240:2	240:2	7	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_INT )
FUNCTION_CALL	240:2	240:58	8	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_INT )
CALLEE	240:2	240:2	9	TIFFSetField
LEAF_NODE	240:2	240:2	10	TIFFSetField
LEAF_NODE	240:14	240:14	9	(
ARGUMENT	240:15	240:15	9	out
FIELD	240:15	240:15	10	out
LEAF_NODE	240:15	240:15	11	out
LEAF_NODE	240:18	240:18	9	,
ARGUMENT	240:20	240:20	9	TIFFTAG_SAMPLEFORMAT
FIELD	240:20	240:20	10	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	240:20	240:20	11	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	240:40	240:40	9	,
ARGUMENT	240:42	240:42	9	SAMPLEFORMAT_INT
FIELD	240:42	240:42	10	SAMPLEFORMAT_INT
LEAF_NODE	240:42	240:42	11	SAMPLEFORMAT_INT
LEAF_NODE	240:58	240:58	9	)
LEAF_NODE	240:59	240:59	7	;
JUMP_STATEMENT	241:2	241:7	6	break DESTINATION ;
KEYWORD	241:2	241:2	7	break
LEAF_NODE	241:2	241:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	241:7	241:7	7	;
LABEL	242:1	242:16	6	case TIFF_FLOAT :
LEAF_NODE	242:1	242:1	7	case
LEAF_NODE	242:6	242:6	7	TIFF_FLOAT
LEAF_NODE	242:16	242:16	7	:
LABEL	243:1	243:17	6	case TIFF_DOUBLE :
LEAF_NODE	243:1	243:1	7	case
LEAF_NODE	243:6	243:6	7	TIFF_DOUBLE
LEAF_NODE	243:17	243:17	7	:
EXPR_STATEMENT	244:2	244:62	6	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_IEEEFP ) ;
EXPR	244:2	244:2	7	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_IEEEFP )
FUNCTION_CALL	244:2	244:61	8	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_IEEEFP )
CALLEE	244:2	244:2	9	TIFFSetField
LEAF_NODE	244:2	244:2	10	TIFFSetField
LEAF_NODE	244:14	244:14	9	(
ARGUMENT	244:15	244:15	9	out
FIELD	244:15	244:15	10	out
LEAF_NODE	244:15	244:15	11	out
LEAF_NODE	244:18	244:18	9	,
ARGUMENT	244:20	244:20	9	TIFFTAG_SAMPLEFORMAT
FIELD	244:20	244:20	10	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	244:20	244:20	11	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	244:40	244:40	9	,
ARGUMENT	244:42	244:42	9	SAMPLEFORMAT_IEEEFP
FIELD	244:42	244:42	10	SAMPLEFORMAT_IEEEFP
LEAF_NODE	244:42	244:42	11	SAMPLEFORMAT_IEEEFP
LEAF_NODE	244:61	244:61	9	)
LEAF_NODE	244:62	244:62	7	;
JUMP_STATEMENT	245:2	245:7	6	break DESTINATION ;
KEYWORD	245:2	245:2	7	break
LEAF_NODE	245:2	245:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	245:7	245:7	7	;
LABEL	246:1	246:8	6	default :
LEAF_NODE	246:1	246:1	7	default
LEAF_NODE	246:8	246:8	7	:
EXPR_STATEMENT	247:2	247:60	6	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_VOID ) ;
EXPR	247:2	247:2	7	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_VOID )
FUNCTION_CALL	247:2	247:59	8	TIFFSetField ( out , TIFFTAG_SAMPLEFORMAT , SAMPLEFORMAT_VOID )
CALLEE	247:2	247:2	9	TIFFSetField
LEAF_NODE	247:2	247:2	10	TIFFSetField
LEAF_NODE	247:14	247:14	9	(
ARGUMENT	247:15	247:15	9	out
FIELD	247:15	247:15	10	out
LEAF_NODE	247:15	247:15	11	out
LEAF_NODE	247:18	247:18	9	,
ARGUMENT	247:20	247:20	9	TIFFTAG_SAMPLEFORMAT
FIELD	247:20	247:20	10	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	247:20	247:20	11	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	247:40	247:40	9	,
ARGUMENT	247:42	247:42	9	SAMPLEFORMAT_VOID
FIELD	247:42	247:42	10	SAMPLEFORMAT_VOID
LEAF_NODE	247:42	247:42	11	SAMPLEFORMAT_VOID
LEAF_NODE	247:59	247:59	9	)
LEAF_NODE	247:60	247:60	7	;
JUMP_STATEMENT	248:2	248:7	6	break DESTINATION ;
KEYWORD	248:2	248:2	7	break
LEAF_NODE	248:2	248:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	248:7	248:7	7	;
LEAF_NODE	249:1	249:1	5	}
SELECTION	250:1	251:2	3	
KEYWORD	250:1	250:1	4	if
LEAF_NODE	250:1	250:1	5	if
LEAF_NODE	250:4	250:4	4	(
CONDITION	250:5	250:5	4	compression == ( uint16 ) - 1
EXPR	250:5	250:29	5	compression == ( uint16 ) - 1
FIELD	250:5	250:5	6	compression
LEAF_NODE	250:5	250:5	7	compression
EQ_OPERATOR	250:17	250:17	6	==
LEAF_NODE	250:17	250:17	7	==
LEAF_NODE	250:20	250:20	6	(
TYPE_NAME	250:21	250:21	6	uint16
LEAF_NODE	250:21	250:21	7	uint16
LEAF_NODE	250:27	250:27	6	)
UNARY_EXPR	250:29	250:30	6	- 1
UNARY_OPERATOR	250:29	250:29	7	-
LEAF_NODE	250:29	250:29	8	-
FIELD	250:30	250:30	7	1
LEAF_NODE	250:30	250:30	8	1
LEAF_NODE	250:31	250:31	4	)
STATEMENTS	251:2	251:2	4	
EXPR_STATEMENT	251:2	251:36	5	compression = COMPRESSION_PACKBITS ;
EXPR	251:2	251:2	6	compression = COMPRESSION_PACKBITS
ASSIGN	251:2	251:16	7	compression = COMPRESSION_PACKBITS
LVAL	251:2	251:2	8	compression
FIELD	251:2	251:2	9	compression
LEAF_NODE	251:2	251:2	10	compression
ASSIGN_OP	251:14	251:14	8	=
LEAF_NODE	251:14	251:14	9	=
RVAL	251:16	251:16	8	COMPRESSION_PACKBITS
FIELD	251:16	251:16	9	COMPRESSION_PACKBITS
LEAF_NODE	251:16	251:16	10	COMPRESSION_PACKBITS
LEAF_NODE	251:36	251:36	6	;
EXPR_STATEMENT	252:1	252:52	3	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	252:1	252:1	4	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	252:1	252:51	5	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	252:1	252:1	6	TIFFSetField
LEAF_NODE	252:1	252:1	7	TIFFSetField
LEAF_NODE	252:13	252:13	6	(
ARGUMENT	252:14	252:14	6	out
FIELD	252:14	252:14	7	out
LEAF_NODE	252:14	252:14	8	out
LEAF_NODE	252:17	252:17	6	,
ARGUMENT	252:19	252:19	6	TIFFTAG_COMPRESSION
FIELD	252:19	252:19	7	TIFFTAG_COMPRESSION
LEAF_NODE	252:19	252:19	8	TIFFTAG_COMPRESSION
LEAF_NODE	252:38	252:38	6	,
ARGUMENT	252:40	252:40	6	compression
FIELD	252:40	252:40	7	compression
LEAF_NODE	252:40	252:40	8	compression
LEAF_NODE	252:51	252:51	6	)
LEAF_NODE	252:52	252:52	4	;
SELECTION	253:1	253:22	3	
KEYWORD	253:1	253:1	4	switch
LEAF_NODE	253:1	253:1	5	switch
LEAF_NODE	253:8	253:8	4	(
CONDITION	253:9	253:9	4	compression
EXPR	253:9	253:9	5	compression
FIELD	253:9	253:9	6	compression
LEAF_NODE	253:9	253:9	7	compression
LEAF_NODE	253:20	253:20	4	)
STATEMENTS	253:22	266:1	4	
LEAF_NODE	253:22	253:22	5	{
STATEMENTS	254:1	265:2	5	
LABEL	254:1	254:22	6	case COMPRESSION_JPEG :
LEAF_NODE	254:1	254:1	7	case
LEAF_NODE	254:6	254:6	7	COMPRESSION_JPEG
LEAF_NODE	254:22	254:22	7	:
SELECTION	255:2	257:3	6	
KEYWORD	255:2	255:2	7	if
LEAF_NODE	255:2	255:2	8	if
LEAF_NODE	255:5	255:5	7	(
CONDITION	255:6	255:6	7	photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB
EXPR	255:6	255:6	8	photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB
AND	255:6	256:9	9	photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB
EXPR	255:6	255:21	10	photometric == PHOTOMETRIC_RGB
FIELD	255:6	255:6	11	photometric
LEAF_NODE	255:6	255:6	12	photometric
EQ_OPERATOR	255:18	255:18	11	==
LEAF_NODE	255:18	255:18	12	==
FIELD	255:21	255:21	11	PHOTOMETRIC_RGB
LEAF_NODE	255:21	255:21	12	PHOTOMETRIC_RGB
LEAF_NODE	256:6	256:6	10	&&
EXPR	256:9	256:26	10	jpegcolormode == JPEGCOLORMODE_RGB
FIELD	256:9	256:9	11	jpegcolormode
LEAF_NODE	256:9	256:9	12	jpegcolormode
EQ_OPERATOR	256:23	256:23	11	==
LEAF_NODE	256:23	256:23	12	==
FIELD	256:26	256:26	11	JPEGCOLORMODE_RGB
LEAF_NODE	256:26	256:26	12	JPEGCOLORMODE_RGB
LEAF_NODE	256:43	256:43	7	)
STATEMENTS	257:3	257:3	7	
EXPR_STATEMENT	257:3	257:34	8	photometric = PHOTOMETRIC_YCBCR ;
EXPR	257:3	257:3	9	photometric = PHOTOMETRIC_YCBCR
ASSIGN	257:3	257:17	10	photometric = PHOTOMETRIC_YCBCR
LVAL	257:3	257:3	11	photometric
FIELD	257:3	257:3	12	photometric
LEAF_NODE	257:3	257:3	13	photometric
ASSIGN_OP	257:15	257:15	11	=
LEAF_NODE	257:15	257:15	12	=
RVAL	257:17	257:17	11	PHOTOMETRIC_YCBCR
FIELD	257:17	257:17	12	PHOTOMETRIC_YCBCR
LEAF_NODE	257:17	257:17	13	PHOTOMETRIC_YCBCR
LEAF_NODE	257:34	257:34	9	;
EXPR_STATEMENT	258:2	258:49	6	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality ) ;
EXPR	258:2	258:2	7	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
FUNCTION_CALL	258:2	258:48	8	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
CALLEE	258:2	258:2	9	TIFFSetField
LEAF_NODE	258:2	258:2	10	TIFFSetField
LEAF_NODE	258:14	258:14	9	(
ARGUMENT	258:15	258:15	9	out
FIELD	258:15	258:15	10	out
LEAF_NODE	258:15	258:15	11	out
LEAF_NODE	258:18	258:18	9	,
ARGUMENT	258:20	258:20	9	TIFFTAG_JPEGQUALITY
FIELD	258:20	258:20	10	TIFFTAG_JPEGQUALITY
LEAF_NODE	258:20	258:20	11	TIFFTAG_JPEGQUALITY
LEAF_NODE	258:39	258:39	9	,
ARGUMENT	258:41	258:41	9	quality
FIELD	258:41	258:41	10	quality
LEAF_NODE	258:41	258:41	11	quality
LEAF_NODE	258:48	258:48	9	)
LEAF_NODE	258:49	258:49	7	;
EXPR_STATEMENT	259:2	259:57	6	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode ) ;
EXPR	259:2	259:2	7	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode )
FUNCTION_CALL	259:2	259:56	8	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode )
CALLEE	259:2	259:2	9	TIFFSetField
LEAF_NODE	259:2	259:2	10	TIFFSetField
LEAF_NODE	259:14	259:14	9	(
ARGUMENT	259:15	259:15	9	out
FIELD	259:15	259:15	10	out
LEAF_NODE	259:15	259:15	11	out
LEAF_NODE	259:18	259:18	9	,
ARGUMENT	259:20	259:20	9	TIFFTAG_JPEGCOLORMODE
FIELD	259:20	259:20	10	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	259:20	259:20	11	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	259:41	259:41	9	,
ARGUMENT	259:43	259:43	9	jpegcolormode
FIELD	259:43	259:43	10	jpegcolormode
LEAF_NODE	259:43	259:43	11	jpegcolormode
LEAF_NODE	259:56	259:56	9	)
LEAF_NODE	259:57	259:57	7	;
JUMP_STATEMENT	260:2	260:7	6	break DESTINATION ;
KEYWORD	260:2	260:2	7	break
LEAF_NODE	260:2	260:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	260:7	260:7	7	;
LABEL	261:1	261:21	6	case COMPRESSION_LZW :
LEAF_NODE	261:1	261:1	7	case
LEAF_NODE	261:6	261:6	7	COMPRESSION_LZW
LEAF_NODE	261:21	261:21	7	:
LABEL	262:1	262:25	6	case COMPRESSION_DEFLATE :
LEAF_NODE	262:1	262:1	7	case
LEAF_NODE	262:6	262:6	7	COMPRESSION_DEFLATE
LEAF_NODE	262:25	262:25	7	:
SELECTION	263:2	264:3	6	
KEYWORD	263:2	263:2	7	if
LEAF_NODE	263:2	263:2	8	if
LEAF_NODE	263:5	263:5	7	(
CONDITION	263:6	263:6	7	predictor != 0
EXPR	263:6	263:19	8	predictor != 0
FIELD	263:6	263:6	9	predictor
LEAF_NODE	263:6	263:6	10	predictor
EQ_OPERATOR	263:16	263:16	9	!=
LEAF_NODE	263:16	263:16	10	!=
FIELD	263:19	263:19	9	0
LEAF_NODE	263:19	263:19	10	0
LEAF_NODE	263:20	263:20	7	)
STATEMENTS	264:3	264:3	7	
EXPR_STATEMENT	264:3	264:50	8	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor ) ;
EXPR	264:3	264:3	9	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	264:3	264:49	10	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
CALLEE	264:3	264:3	11	TIFFSetField
LEAF_NODE	264:3	264:3	12	TIFFSetField
LEAF_NODE	264:15	264:15	11	(
ARGUMENT	264:16	264:16	11	out
FIELD	264:16	264:16	12	out
LEAF_NODE	264:16	264:16	13	out
LEAF_NODE	264:19	264:19	11	,
ARGUMENT	264:21	264:21	11	TIFFTAG_PREDICTOR
FIELD	264:21	264:21	12	TIFFTAG_PREDICTOR
LEAF_NODE	264:21	264:21	13	TIFFTAG_PREDICTOR
LEAF_NODE	264:38	264:38	11	,
ARGUMENT	264:40	264:40	11	predictor
FIELD	264:40	264:40	12	predictor
LEAF_NODE	264:40	264:40	13	predictor
LEAF_NODE	264:49	264:49	11	)
LEAF_NODE	264:50	264:50	9	;
JUMP_STATEMENT	265:2	265:7	6	break DESTINATION ;
KEYWORD	265:2	265:2	7	break
LEAF_NODE	265:2	265:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	265:7	265:7	7	;
LEAF_NODE	266:1	266:1	5	}
SELECTION	267:1	267:22	3	
KEYWORD	267:1	267:1	4	switch
LEAF_NODE	267:1	267:1	5	switch
LEAF_NODE	267:7	267:7	4	(
CONDITION	267:8	267:8	4	interleaving
EXPR	267:8	267:8	5	interleaving
FIELD	267:8	267:8	6	interleaving
LEAF_NODE	267:8	267:8	7	interleaving
LEAF_NODE	267:20	267:20	4	)
STATEMENTS	267:22	276:1	4	
LEAF_NODE	267:22	267:22	5	{
STATEMENTS	268:1	275:2	5	
LABEL	268:1	268:10	6	case BAND :
LEAF_NODE	268:1	268:1	7	case
LEAF_NODE	268:6	268:6	7	BAND
LEAF_NODE	268:10	268:10	7	:
EXPR_STATEMENT	269:2	269:27	6	linebytes = width * depth ;
EXPR	269:2	269:2	7	linebytes = width * depth
ASSIGN	269:2	269:14	8	linebytes = width * depth
LVAL	269:2	269:2	9	linebytes
FIELD	269:2	269:2	10	linebytes
LEAF_NODE	269:2	269:2	11	linebytes
ASSIGN_OP	269:12	269:12	9	=
LEAF_NODE	269:12	269:12	10	=
RVAL	269:14	269:22	9	width * depth
FIELD	269:14	269:14	10	width
LEAF_NODE	269:14	269:14	11	width
LEAF_NODE	269:20	269:20	10	*
FIELD	269:22	269:22	10	depth
LEAF_NODE	269:22	269:22	11	depth
LEAF_NODE	269:27	269:27	7	;
EXPR_STATEMENT	270:2	270:47	6	buf = ( unsigned char * ) _TIFFmalloc ( linebytes ) ;
EXPR	270:2	270:2	7	buf = ( unsigned char * ) _TIFFmalloc ( linebytes )
ASSIGN	270:2	270:8	8	buf = ( unsigned char * ) _TIFFmalloc ( linebytes )
LVAL	270:2	270:2	9	buf
FIELD	270:2	270:2	10	buf
LEAF_NODE	270:2	270:2	11	buf
ASSIGN_OP	270:6	270:6	9	=
LEAF_NODE	270:6	270:6	10	=
RVAL	270:8	270:25	9	( unsigned char * ) _TIFFmalloc ( linebytes )
LEAF_NODE	270:8	270:8	10	(
TYPE_NAME	270:9	270:18	10	unsigned char
LEAF_NODE	270:9	270:9	11	unsigned
LEAF_NODE	270:18	270:18	11	char
LEAF_NODE	270:23	270:23	10	*
LEAF_NODE	270:24	270:24	10	)
FUNCTION_CALL	270:25	270:46	10	_TIFFmalloc ( linebytes )
CALLEE	270:25	270:25	11	_TIFFmalloc
LEAF_NODE	270:25	270:25	12	_TIFFmalloc
LEAF_NODE	270:36	270:36	11	(
ARGUMENT	270:37	270:37	11	linebytes
FIELD	270:37	270:37	12	linebytes
LEAF_NODE	270:37	270:37	13	linebytes
LEAF_NODE	270:46	270:46	11	)
LEAF_NODE	270:47	270:47	7	;
JUMP_STATEMENT	271:2	271:7	6	break DESTINATION ;
KEYWORD	271:2	271:2	7	break
LEAF_NODE	271:2	271:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	271:7	271:7	7	;
LABEL	272:1	272:11	6	case PIXEL :
LEAF_NODE	272:1	272:1	7	case
LEAF_NODE	272:6	272:6	7	PIXEL
LEAF_NODE	272:11	272:11	7	:
LABEL	273:1	273:8	6	default :
LEAF_NODE	273:1	273:1	7	default
LEAF_NODE	273:8	273:8	7	:
LEAF_NODE	274:2	274:2	6	linebytes
LEAF_NODE	274:12	274:12	6	=
LEAF_NODE	274:14	274:14	6	width
EXPR_STATEMENT	274:20	274:36	6	* nbands * depth ;
EXPR	274:20	274:31	7	* nbands * depth
UNARY_EXPR	274:20	274:22	8	* nbands
UNARY_OPERATOR	274:20	274:20	9	*
LEAF_NODE	274:20	274:20	10	*
FIELD	274:22	274:22	9	nbands
LEAF_NODE	274:22	274:22	10	nbands
LEAF_NODE	274:29	274:29	8	*
FIELD	274:31	274:31	8	depth
LEAF_NODE	274:31	274:31	9	depth
LEAF_NODE	274:36	274:36	7	;
JUMP_STATEMENT	275:2	275:7	6	break DESTINATION ;
KEYWORD	275:2	275:2	7	break
LEAF_NODE	275:2	275:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	275:7	275:7	7	;
LEAF_NODE	276:1	276:1	5	}
LEAF_NODE	277:1	277:1	3	bufsize
LEAF_NODE	277:9	277:9	3	=
LEAF_NODE	277:11	277:11	3	width
EXPR_STATEMENT	277:17	277:33	3	* nbands * depth ;
EXPR	277:17	277:28	4	* nbands * depth
UNARY_EXPR	277:17	277:19	5	* nbands
UNARY_OPERATOR	277:17	277:17	6	*
LEAF_NODE	277:17	277:17	7	*
FIELD	277:19	277:19	6	nbands
LEAF_NODE	277:19	277:19	7	nbands
LEAF_NODE	277:26	277:26	5	*
FIELD	277:28	277:28	5	depth
LEAF_NODE	277:28	277:28	6	depth
LEAF_NODE	277:33	277:33	4	;
EXPR_STATEMENT	278:1	278:45	3	buf1 = ( unsigned char * ) _TIFFmalloc ( bufsize ) ;
EXPR	278:1	278:1	4	buf1 = ( unsigned char * ) _TIFFmalloc ( bufsize )
ASSIGN	278:1	278:8	5	buf1 = ( unsigned char * ) _TIFFmalloc ( bufsize )
LVAL	278:1	278:1	6	buf1
FIELD	278:1	278:1	7	buf1
LEAF_NODE	278:1	278:1	8	buf1
ASSIGN_OP	278:6	278:6	6	=
LEAF_NODE	278:6	278:6	7	=
RVAL	278:8	278:25	6	( unsigned char * ) _TIFFmalloc ( bufsize )
LEAF_NODE	278:8	278:8	7	(
TYPE_NAME	278:9	278:18	7	unsigned char
LEAF_NODE	278:9	278:9	8	unsigned
LEAF_NODE	278:18	278:18	8	char
LEAF_NODE	278:23	278:23	7	*
LEAF_NODE	278:24	278:24	7	)
FUNCTION_CALL	278:25	278:44	7	_TIFFmalloc ( bufsize )
CALLEE	278:25	278:25	8	_TIFFmalloc
LEAF_NODE	278:25	278:25	9	_TIFFmalloc
LEAF_NODE	278:36	278:36	8	(
ARGUMENT	278:37	278:37	8	bufsize
FIELD	278:37	278:37	9	bufsize
LEAF_NODE	278:37	278:37	10	bufsize
LEAF_NODE	278:44	278:44	8	)
LEAF_NODE	278:45	278:45	4	;
EXPR_STATEMENT	280:1	280:55	3	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip ) ;
EXPR	280:1	280:1	4	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
ASSIGN	280:1	280:16	5	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
LVAL	280:1	280:1	6	rowsperstrip
FIELD	280:1	280:1	7	rowsperstrip
LEAF_NODE	280:1	280:1	8	rowsperstrip
ASSIGN_OP	280:14	280:14	6	=
LEAF_NODE	280:14	280:14	7	=
RVAL	280:16	280:16	6	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	280:16	280:54	7	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	280:16	280:16	8	TIFFDefaultStripSize
LEAF_NODE	280:16	280:16	9	TIFFDefaultStripSize
LEAF_NODE	280:36	280:36	8	(
ARGUMENT	280:37	280:37	8	out
FIELD	280:37	280:37	9	out
LEAF_NODE	280:37	280:37	10	out
LEAF_NODE	280:40	280:40	8	,
ARGUMENT	280:42	280:42	8	rowsperstrip
FIELD	280:42	280:42	9	rowsperstrip
LEAF_NODE	280:42	280:42	10	rowsperstrip
LEAF_NODE	280:54	280:54	8	)
LEAF_NODE	280:55	280:55	4	;
SELECTION	281:1	281:28	3	
KEYWORD	281:1	281:1	4	if
LEAF_NODE	281:1	281:1	5	if
LEAF_NODE	281:4	281:4	4	(
CONDITION	281:5	281:5	4	rowsperstrip > length
EXPR	281:5	281:20	5	rowsperstrip > length
FIELD	281:5	281:5	6	rowsperstrip
LEAF_NODE	281:5	281:5	7	rowsperstrip
REL_OPERATOR	281:18	281:18	6	>
LEAF_NODE	281:18	281:18	7	>
FIELD	281:20	281:20	6	length
LEAF_NODE	281:20	281:20	7	length
LEAF_NODE	281:26	281:26	4	)
STATEMENTS	281:28	283:1	4	
LEAF_NODE	281:28	281:28	5	{
STATEMENTS	282:2	282:2	5	
EXPR_STATEMENT	282:2	282:23	6	rowsperstrip = length ;
EXPR	282:2	282:2	7	rowsperstrip = length
ASSIGN	282:2	282:17	8	rowsperstrip = length
LVAL	282:2	282:2	9	rowsperstrip
FIELD	282:2	282:2	10	rowsperstrip
LEAF_NODE	282:2	282:2	11	rowsperstrip
ASSIGN_OP	282:15	282:15	9	=
LEAF_NODE	282:15	282:15	10	=
RVAL	282:17	282:17	9	length
FIELD	282:17	282:17	10	length
LEAF_NODE	282:17	282:17	11	length
LEAF_NODE	282:23	282:23	7	;
LEAF_NODE	283:1	283:1	5	}
EXPR_STATEMENT	284:1	284:55	3	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ;
EXPR	284:1	284:1	4	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
FUNCTION_CALL	284:1	284:54	5	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
CALLEE	284:1	284:1	6	TIFFSetField
LEAF_NODE	284:1	284:1	7	TIFFSetField
LEAF_NODE	284:13	284:13	6	(
ARGUMENT	284:14	284:14	6	out
FIELD	284:14	284:14	7	out
LEAF_NODE	284:14	284:14	8	out
LEAF_NODE	284:17	284:17	6	,
ARGUMENT	284:19	284:19	6	TIFFTAG_ROWSPERSTRIP
FIELD	284:19	284:19	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	284:19	284:19	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	284:39	284:39	6	,
ARGUMENT	284:41	284:41	6	rowsperstrip
FIELD	284:41	284:41	7	rowsperstrip
LEAF_NODE	284:41	284:41	8	rowsperstrip
LEAF_NODE	284:54	284:54	6	)
LEAF_NODE	284:55	284:55	4	;
EXPR_STATEMENT	286:1	286:38	3	_TIFF_lseek_f ( fd , hdr_size , SEEK_SET ) ;
EXPR	286:1	286:1	4	_TIFF_lseek_f ( fd , hdr_size , SEEK_SET )
FUNCTION_CALL	286:1	286:37	5	_TIFF_lseek_f ( fd , hdr_size , SEEK_SET )
CALLEE	286:1	286:1	6	_TIFF_lseek_f
LEAF_NODE	286:1	286:1	7	_TIFF_lseek_f
LEAF_NODE	286:14	286:14	6	(
ARGUMENT	286:15	286:15	6	fd
FIELD	286:15	286:15	7	fd
LEAF_NODE	286:15	286:15	8	fd
LEAF_NODE	286:17	286:17	6	,
ARGUMENT	286:19	286:19	6	hdr_size
FIELD	286:19	286:19	7	hdr_size
LEAF_NODE	286:19	286:19	8	hdr_size
LEAF_NODE	286:27	286:27	6	,
ARGUMENT	286:29	286:29	6	SEEK_SET
FIELD	286:29	286:29	7	SEEK_SET
LEAF_NODE	286:29	286:29	8	SEEK_SET
LEAF_NODE	286:37	286:37	6	)
LEAF_NODE	286:38	286:38	4	;
ITERATION	287:1	287:36	3	
KEYWORD	287:1	287:1	4	for
LEAF_NODE	287:1	287:1	5	for
LEAF_NODE	287:5	287:5	4	(
FOR_INIT	287:6	287:13	4	row = 0 ;
EXPR	287:6	287:6	5	row = 0
ASSIGN	287:6	287:12	6	row = 0
LVAL	287:6	287:6	7	row
FIELD	287:6	287:6	8	row
LEAF_NODE	287:6	287:6	9	row
ASSIGN_OP	287:10	287:10	7	=
LEAF_NODE	287:10	287:10	8	=
RVAL	287:12	287:12	7	0
FIELD	287:12	287:12	8	0
LEAF_NODE	287:12	287:12	9	0
LEAF_NODE	287:13	287:13	5	;
CONDITION	287:15	287:15	4	row < length
EXPR	287:15	287:21	5	row < length
FIELD	287:15	287:15	6	row
LEAF_NODE	287:15	287:15	7	row
REL_OPERATOR	287:19	287:19	6	<
LEAF_NODE	287:19	287:19	7	<
FIELD	287:21	287:21	6	length
LEAF_NODE	287:21	287:21	7	length
LEAF_NODE	287:27	287:27	4	;
FOR_EXPR	287:29	287:29	4	row ++
EXPR	287:29	287:29	5	row ++
FIELD	287:29	287:32	6	row ++
LEAF_NODE	287:29	287:29	7	row
LEAF_NODE	287:32	287:32	7	++
LEAF_NODE	287:34	287:34	4	)
STATEMENTS	287:36	333:1	4	
LEAF_NODE	287:36	287:36	5	{
STATEMENTS	288:2	328:2	5	
SELECTION	288:2	288:23	6	
KEYWORD	288:2	288:2	7	switch
LEAF_NODE	288:2	288:2	8	switch
LEAF_NODE	288:8	288:8	7	(
CONDITION	288:9	288:9	7	interleaving
EXPR	288:9	288:9	8	interleaving
FIELD	288:9	288:9	9	interleaving
LEAF_NODE	288:9	288:9	10	interleaving
LEAF_NODE	288:21	288:21	7	)
STATEMENTS	288:23	326:2	7	
LEAF_NODE	288:23	288:23	8	{
STATEMENTS	289:2	325:3	8	
LABEL	289:2	289:11	9	case BAND :
LEAF_NODE	289:2	289:2	10	case
LEAF_NODE	289:7	289:7	10	BAND
LEAF_NODE	289:11	289:11	10	:
ITERATION	290:3	290:41	9	
KEYWORD	290:3	290:3	10	for
LEAF_NODE	290:3	290:3	11	for
LEAF_NODE	290:7	290:7	10	(
FOR_INIT	290:8	290:16	10	band = 0 ;
EXPR	290:8	290:8	11	band = 0
ASSIGN	290:8	290:15	12	band = 0
LVAL	290:8	290:8	13	band
FIELD	290:8	290:8	14	band
LEAF_NODE	290:8	290:8	15	band
ASSIGN_OP	290:13	290:13	13	=
LEAF_NODE	290:13	290:13	14	=
RVAL	290:15	290:15	13	0
FIELD	290:15	290:15	14	0
LEAF_NODE	290:15	290:15	15	0
LEAF_NODE	290:16	290:16	11	;
CONDITION	290:18	290:18	10	band < nbands
EXPR	290:18	290:25	11	band < nbands
FIELD	290:18	290:18	12	band
LEAF_NODE	290:18	290:18	13	band
REL_OPERATOR	290:23	290:23	12	<
LEAF_NODE	290:23	290:23	13	<
FIELD	290:25	290:25	12	nbands
LEAF_NODE	290:25	290:25	13	nbands
LEAF_NODE	290:31	290:31	10	;
FOR_EXPR	290:33	290:33	10	band ++
EXPR	290:33	290:33	11	band ++
FIELD	290:33	290:37	12	band ++
LEAF_NODE	290:33	290:33	13	band
LEAF_NODE	290:37	290:37	13	++
LEAF_NODE	290:39	290:39	10	)
STATEMENTS	290:41	312:3	10	
LEAF_NODE	290:41	290:41	11	{
STATEMENTS	291:4	309:4	11	
SELECTION	291:4	293:72	12	
KEYWORD	291:4	291:4	13	if
LEAF_NODE	291:4	291:4	14	if
LEAF_NODE	291:7	291:7	13	(
CONDITION	291:8	291:8	13	_TIFF_lseek_f ( fd , hdr_size + ( length * band + row ) * linebytes , SEEK_SET ) == ( _TIFF_off_t ) - 1
EXPR	291:8	293:68	14	_TIFF_lseek_f ( fd , hdr_size + ( length * band + row ) * linebytes , SEEK_SET ) == ( _TIFF_off_t ) - 1
FUNCTION_CALL	291:8	293:50	15	_TIFF_lseek_f ( fd , hdr_size + ( length * band + row ) * linebytes , SEEK_SET )
CALLEE	291:8	291:8	16	_TIFF_lseek_f
LEAF_NODE	291:8	291:8	17	_TIFF_lseek_f
LEAF_NODE	291:21	291:21	16	(
ARGUMENT	291:22	291:22	16	fd
FIELD	291:22	291:22	17	fd
LEAF_NODE	291:22	291:22	18	fd
LEAF_NODE	291:24	291:24	16	,
ARGUMENT	292:42	292:71	16	hdr_size + ( length * band + row ) * linebytes
FIELD	292:42	292:42	17	hdr_size
LEAF_NODE	292:42	292:42	18	hdr_size
LEAF_NODE	292:51	292:51	17	+
LEAF_NODE	292:53	292:53	17	(
FIELD	292:54	292:54	17	length
LEAF_NODE	292:54	292:54	18	length
LEAF_NODE	292:60	292:60	17	*
FIELD	292:61	292:61	17	band
LEAF_NODE	292:61	292:61	18	band
LEAF_NODE	292:65	292:65	17	+
FIELD	292:66	292:66	17	row
LEAF_NODE	292:66	292:66	18	row
LEAF_NODE	292:69	292:69	17	)
LEAF_NODE	292:70	292:70	17	*
FIELD	292:71	292:71	17	linebytes
LEAF_NODE	292:71	292:71	18	linebytes
LEAF_NODE	292:80	292:80	16	,
ARGUMENT	293:42	293:42	16	SEEK_SET
FIELD	293:42	293:42	17	SEEK_SET
LEAF_NODE	293:42	293:42	18	SEEK_SET
LEAF_NODE	293:50	293:50	16	)
EQ_OPERATOR	293:52	293:52	15	==
LEAF_NODE	293:52	293:52	16	==
LEAF_NODE	293:55	293:55	15	(
TYPE_NAME	293:56	293:56	15	_TIFF_off_t
LEAF_NODE	293:56	293:56	16	_TIFF_off_t
LEAF_NODE	293:67	293:67	15	)
UNARY_EXPR	293:68	293:69	15	- 1
UNARY_OPERATOR	293:68	293:68	16	-
LEAF_NODE	293:68	293:68	17	-
FIELD	293:69	293:69	16	1
LEAF_NODE	293:69	293:69	17	1
LEAF_NODE	293:70	293:70	13	)
STATEMENTS	293:72	299:32	13	
LEAF_NODE	293:72	293:72	14	{
STATEMENTS	294:40	298:40	14	
EXPR_STATEMENT	294:40	297:68	15	fprintf ( stderr , "%s: %s: scanline %lu: seek error.\n" , argv [ 0 ] , argv [ optind ] , ( unsigned long ) row ) ;
EXPR	294:40	294:40	16	fprintf ( stderr , "%s: %s: scanline %lu: seek error.\n" , argv [ 0 ] , argv [ optind ] , ( unsigned long ) row )
FUNCTION_CALL	294:40	297:67	17	fprintf ( stderr , "%s: %s: scanline %lu: seek error.\n" , argv [ 0 ] , argv [ optind ] , ( unsigned long ) row )
CALLEE	294:40	294:40	18	fprintf
LEAF_NODE	294:40	294:40	19	fprintf
LEAF_NODE	294:47	294:47	18	(
ARGUMENT	294:48	294:48	18	stderr
FIELD	294:48	294:48	19	stderr
LEAF_NODE	294:48	294:48	20	stderr
LEAF_NODE	294:54	294:54	18	,
ARGUMENT	295:48	295:48	18	"%s: %s: scanline %lu: seek error.\n"
FIELD	295:48	295:48	19	"%s: %s: scanline %lu: seek error.\n"
LEAF_NODE	295:48	295:48	20	"%s: %s: scanline %lu: seek error.\n"
LEAF_NODE	295:85	295:85	18	,
ARGUMENT	296:48	296:48	18	argv [ 0 ]
FIELD	296:48	296:54	19	argv [ 0 ]
LEAF_NODE	296:48	296:48	20	argv
LEAF_NODE	296:52	296:52	20	[
EXPR	296:53	296:53	20	0
FIELD	296:53	296:53	21	0
LEAF_NODE	296:53	296:53	22	0
LEAF_NODE	296:54	296:54	20	]
LEAF_NODE	296:55	296:55	18	,
ARGUMENT	296:57	296:57	18	argv [ optind ]
FIELD	296:57	296:68	19	argv [ optind ]
LEAF_NODE	296:57	296:57	20	argv
LEAF_NODE	296:61	296:61	20	[
EXPR	296:62	296:62	20	optind
FIELD	296:62	296:62	21	optind
LEAF_NODE	296:62	296:62	22	optind
LEAF_NODE	296:68	296:68	20	]
LEAF_NODE	296:69	296:69	18	,
ARGUMENT	297:48	297:64	18	( unsigned long ) row
LEAF_NODE	297:48	297:48	19	(
TYPE_NAME	297:49	297:58	19	unsigned long
LEAF_NODE	297:49	297:49	20	unsigned
LEAF_NODE	297:58	297:58	20	long
LEAF_NODE	297:62	297:62	19	)
FIELD	297:64	297:64	19	row
LEAF_NODE	297:64	297:64	20	row
LEAF_NODE	297:67	297:67	18	)
LEAF_NODE	297:68	297:68	16	;
JUMP_STATEMENT	298:40	298:45	15	break DESTINATION ;
KEYWORD	298:40	298:40	16	break
LEAF_NODE	298:40	298:40	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	298:45	298:45	16	;
LEAF_NODE	299:32	299:32	14	}
SELECTION	300:4	300:38	12	
KEYWORD	300:4	300:4	13	if
LEAF_NODE	300:4	300:4	14	if
LEAF_NODE	300:7	300:7	13	(
CONDITION	300:8	300:8	13	read ( fd , buf , linebytes ) < 0
EXPR	300:8	300:35	14	read ( fd , buf , linebytes ) < 0
FUNCTION_CALL	300:8	300:31	15	read ( fd , buf , linebytes )
CALLEE	300:8	300:8	16	read
LEAF_NODE	300:8	300:8	17	read
LEAF_NODE	300:12	300:12	16	(
ARGUMENT	300:13	300:13	16	fd
FIELD	300:13	300:13	17	fd
LEAF_NODE	300:13	300:13	18	fd
LEAF_NODE	300:15	300:15	16	,
ARGUMENT	300:17	300:17	16	buf
FIELD	300:17	300:17	17	buf
LEAF_NODE	300:17	300:17	18	buf
LEAF_NODE	300:20	300:20	16	,
ARGUMENT	300:22	300:22	16	linebytes
FIELD	300:22	300:22	17	linebytes
LEAF_NODE	300:22	300:22	18	linebytes
LEAF_NODE	300:31	300:31	16	)
REL_OPERATOR	300:33	300:33	15	<
LEAF_NODE	300:33	300:33	16	<
FIELD	300:35	300:35	15	0
LEAF_NODE	300:35	300:35	16	0
LEAF_NODE	300:36	300:36	13	)
STATEMENTS	300:38	306:4	13	
LEAF_NODE	300:38	300:38	14	{
STATEMENTS	301:5	305:40	14	
EXPR_STATEMENT	301:5	304:68	15	fprintf ( stderr , "%s: %s: scanline %lu: Read error.\n" , argv [ 0 ] , argv [ optind ] , ( unsigned long ) row ) ;
EXPR	301:5	301:5	16	fprintf ( stderr , "%s: %s: scanline %lu: Read error.\n" , argv [ 0 ] , argv [ optind ] , ( unsigned long ) row )
FUNCTION_CALL	301:5	304:67	17	fprintf ( stderr , "%s: %s: scanline %lu: Read error.\n" , argv [ 0 ] , argv [ optind ] , ( unsigned long ) row )
CALLEE	301:5	301:5	18	fprintf
LEAF_NODE	301:5	301:5	19	fprintf
LEAF_NODE	301:12	301:12	18	(
ARGUMENT	301:13	301:13	18	stderr
FIELD	301:13	301:13	19	stderr
LEAF_NODE	301:13	301:13	20	stderr
LEAF_NODE	301:19	301:19	18	,
ARGUMENT	302:48	302:48	18	"%s: %s: scanline %lu: Read error.\n"
FIELD	302:48	302:48	19	"%s: %s: scanline %lu: Read error.\n"
LEAF_NODE	302:48	302:48	20	"%s: %s: scanline %lu: Read error.\n"
LEAF_NODE	302:85	302:85	18	,
ARGUMENT	303:48	303:48	18	argv [ 0 ]
FIELD	303:48	303:54	19	argv [ 0 ]
LEAF_NODE	303:48	303:48	20	argv
LEAF_NODE	303:52	303:52	20	[
EXPR	303:53	303:53	20	0
FIELD	303:53	303:53	21	0
LEAF_NODE	303:53	303:53	22	0
LEAF_NODE	303:54	303:54	20	]
LEAF_NODE	303:55	303:55	18	,
ARGUMENT	303:57	303:57	18	argv [ optind ]
FIELD	303:57	303:68	19	argv [ optind ]
LEAF_NODE	303:57	303:57	20	argv
LEAF_NODE	303:61	303:61	20	[
EXPR	303:62	303:62	20	optind
FIELD	303:62	303:62	21	optind
LEAF_NODE	303:62	303:62	22	optind
LEAF_NODE	303:68	303:68	20	]
LEAF_NODE	303:69	303:69	18	,
ARGUMENT	304:48	304:64	18	( unsigned long ) row
LEAF_NODE	304:48	304:48	19	(
TYPE_NAME	304:49	304:58	19	unsigned long
LEAF_NODE	304:49	304:49	20	unsigned
LEAF_NODE	304:58	304:58	20	long
LEAF_NODE	304:62	304:62	19	)
FIELD	304:64	304:64	19	row
LEAF_NODE	304:64	304:64	20	row
LEAF_NODE	304:67	304:67	18	)
LEAF_NODE	304:68	304:68	16	;
JUMP_STATEMENT	305:40	305:45	15	break DESTINATION ;
KEYWORD	305:40	305:40	16	break
LEAF_NODE	305:40	305:40	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	305:45	305:45	16	;
LEAF_NODE	306:4	306:4	14	}
SELECTION	307:4	308:5	12	
KEYWORD	307:4	307:4	13	if
LEAF_NODE	307:4	307:4	14	if
LEAF_NODE	307:7	307:7	13	(
CONDITION	307:8	307:8	13	swab
EXPR	307:8	307:8	14	swab
FIELD	307:8	307:8	15	swab
LEAF_NODE	307:8	307:8	16	swab
LEAF_NODE	307:12	307:12	13	)
STATEMENTS	308:5	308:5	13	
EXPR_STATEMENT	308:5	308:43	14	swapBytesInScanline ( buf , width , dtype ) ;
EXPR	308:5	308:5	15	swapBytesInScanline ( buf , width , dtype )
FUNCTION_CALL	308:5	308:42	16	swapBytesInScanline ( buf , width , dtype )
CALLEE	308:5	308:5	17	swapBytesInScanline
LEAF_NODE	308:5	308:5	18	swapBytesInScanline
LEAF_NODE	308:24	308:24	17	(
ARGUMENT	308:25	308:25	17	buf
FIELD	308:25	308:25	18	buf
LEAF_NODE	308:25	308:25	19	buf
LEAF_NODE	308:28	308:28	17	,
ARGUMENT	308:30	308:30	17	width
FIELD	308:30	308:30	18	width
LEAF_NODE	308:30	308:30	19	width
LEAF_NODE	308:35	308:35	17	,
ARGUMENT	308:37	308:37	17	dtype
FIELD	308:37	308:37	18	dtype
LEAF_NODE	308:37	308:37	19	dtype
LEAF_NODE	308:42	308:42	17	)
LEAF_NODE	308:43	308:43	15	;
ITERATION	309:4	310:5	12	
KEYWORD	309:4	309:4	13	for
LEAF_NODE	309:4	309:4	14	for
LEAF_NODE	309:8	309:8	13	(
FOR_INIT	309:9	309:16	13	col = 0 ;
EXPR	309:9	309:9	14	col = 0
ASSIGN	309:9	309:15	15	col = 0
LVAL	309:9	309:9	16	col
FIELD	309:9	309:9	17	col
LEAF_NODE	309:9	309:9	18	col
ASSIGN_OP	309:13	309:13	16	=
LEAF_NODE	309:13	309:13	17	=
RVAL	309:15	309:15	16	0
FIELD	309:15	309:15	17	0
LEAF_NODE	309:15	309:15	18	0
LEAF_NODE	309:16	309:16	14	;
CONDITION	309:18	309:18	13	col < width
EXPR	309:18	309:24	14	col < width
FIELD	309:18	309:18	15	col
LEAF_NODE	309:18	309:18	16	col
REL_OPERATOR	309:22	309:22	15	<
LEAF_NODE	309:22	309:22	16	<
FIELD	309:24	309:24	15	width
LEAF_NODE	309:24	309:24	16	width
LEAF_NODE	309:29	309:29	13	;
FOR_EXPR	309:31	309:31	13	col ++
EXPR	309:31	309:31	14	col ++
FIELD	309:31	309:34	15	col ++
LEAF_NODE	309:31	309:31	16	col
LEAF_NODE	309:34	309:34	16	++
LEAF_NODE	309:36	309:36	13	)
STATEMENTS	310:5	310:5	13	
EXPR_STATEMENT	310:5	311:37	14	memcpy ( buf1 + ( col * nbands + band ) * depth , buf + col * depth , depth ) ;
EXPR	310:5	310:5	15	memcpy ( buf1 + ( col * nbands + band ) * depth , buf + col * depth , depth )
FUNCTION_CALL	310:5	311:36	16	memcpy ( buf1 + ( col * nbands + band ) * depth , buf + col * depth , depth )
CALLEE	310:5	310:5	17	memcpy
LEAF_NODE	310:5	310:5	18	memcpy
LEAF_NODE	310:11	310:11	17	(
ARGUMENT	310:12	310:37	17	buf1 + ( col * nbands + band ) * depth
FIELD	310:12	310:12	18	buf1
LEAF_NODE	310:12	310:12	19	buf1
LEAF_NODE	310:17	310:17	18	+
LEAF_NODE	310:19	310:19	18	(
FIELD	310:20	310:20	18	col
LEAF_NODE	310:20	310:20	19	col
LEAF_NODE	310:23	310:23	18	*
FIELD	310:24	310:24	18	nbands
LEAF_NODE	310:24	310:24	19	nbands
LEAF_NODE	310:30	310:30	18	+
FIELD	310:31	310:31	18	band
LEAF_NODE	310:31	310:31	19	band
LEAF_NODE	310:35	310:35	18	)
LEAF_NODE	310:36	310:36	18	*
FIELD	310:37	310:37	18	depth
LEAF_NODE	310:37	310:37	19	depth
LEAF_NODE	310:42	310:42	17	,
ARGUMENT	311:12	311:24	17	buf + col * depth
FIELD	311:12	311:12	18	buf
LEAF_NODE	311:12	311:12	19	buf
LEAF_NODE	311:16	311:16	18	+
FIELD	311:18	311:18	18	col
LEAF_NODE	311:18	311:18	19	col
LEAF_NODE	311:22	311:22	18	*
FIELD	311:24	311:24	18	depth
LEAF_NODE	311:24	311:24	19	depth
LEAF_NODE	311:29	311:29	17	,
ARGUMENT	311:31	311:31	17	depth
FIELD	311:31	311:31	18	depth
LEAF_NODE	311:31	311:31	19	depth
LEAF_NODE	311:36	311:36	17	)
LEAF_NODE	311:37	311:37	15	;
LEAF_NODE	312:3	312:3	11	}
JUMP_STATEMENT	313:3	313:8	9	break DESTINATION ;
KEYWORD	313:3	313:3	10	break
LEAF_NODE	313:3	313:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	313:8	313:8	10	;
LABEL	314:2	314:12	9	case PIXEL :
LEAF_NODE	314:2	314:2	10	case
LEAF_NODE	314:7	314:7	10	PIXEL
LEAF_NODE	314:12	314:12	10	:
LABEL	315:2	315:9	9	default :
LEAF_NODE	315:2	315:2	10	default
LEAF_NODE	315:9	315:9	10	:
SELECTION	316:3	316:36	9	
KEYWORD	316:3	316:3	10	if
LEAF_NODE	316:3	316:3	11	if
LEAF_NODE	316:6	316:6	10	(
CONDITION	316:7	316:7	10	read ( fd , buf1 , bufsize ) < 0
EXPR	316:7	316:33	11	read ( fd , buf1 , bufsize ) < 0
FUNCTION_CALL	316:7	316:29	12	read ( fd , buf1 , bufsize )
CALLEE	316:7	316:7	13	read
LEAF_NODE	316:7	316:7	14	read
LEAF_NODE	316:11	316:11	13	(
ARGUMENT	316:12	316:12	13	fd
FIELD	316:12	316:12	14	fd
LEAF_NODE	316:12	316:12	15	fd
LEAF_NODE	316:14	316:14	13	,
ARGUMENT	316:16	316:16	13	buf1
FIELD	316:16	316:16	14	buf1
LEAF_NODE	316:16	316:16	15	buf1
LEAF_NODE	316:20	316:20	13	,
ARGUMENT	316:22	316:22	13	bufsize
FIELD	316:22	316:22	14	bufsize
LEAF_NODE	316:22	316:22	15	bufsize
LEAF_NODE	316:29	316:29	13	)
REL_OPERATOR	316:31	316:31	12	<
LEAF_NODE	316:31	316:31	13	<
FIELD	316:33	316:33	12	0
LEAF_NODE	316:33	316:33	13	0
LEAF_NODE	316:34	316:34	10	)
STATEMENTS	316:36	322:3	10	
LEAF_NODE	316:36	316:36	11	{
STATEMENTS	317:4	321:4	11	
EXPR_STATEMENT	317:4	320:25	12	fprintf ( stderr , "%s: %s: scanline %lu: Read error.\n" , argv [ 0 ] , argv [ optind ] , ( unsigned long ) row ) ;
EXPR	317:4	317:4	13	fprintf ( stderr , "%s: %s: scanline %lu: Read error.\n" , argv [ 0 ] , argv [ optind ] , ( unsigned long ) row )
FUNCTION_CALL	317:4	320:24	14	fprintf ( stderr , "%s: %s: scanline %lu: Read error.\n" , argv [ 0 ] , argv [ optind ] , ( unsigned long ) row )
CALLEE	317:4	317:4	15	fprintf
LEAF_NODE	317:4	317:4	16	fprintf
LEAF_NODE	317:11	317:11	15	(
ARGUMENT	317:12	317:12	15	stderr
FIELD	317:12	317:12	16	stderr
LEAF_NODE	317:12	317:12	17	stderr
LEAF_NODE	317:18	317:18	15	,
ARGUMENT	318:5	318:5	15	"%s: %s: scanline %lu: Read error.\n"
FIELD	318:5	318:5	16	"%s: %s: scanline %lu: Read error.\n"
LEAF_NODE	318:5	318:5	17	"%s: %s: scanline %lu: Read error.\n"
LEAF_NODE	318:42	318:42	15	,
ARGUMENT	319:5	319:5	15	argv [ 0 ]
FIELD	319:5	319:11	16	argv [ 0 ]
LEAF_NODE	319:5	319:5	17	argv
LEAF_NODE	319:9	319:9	17	[
EXPR	319:10	319:10	17	0
FIELD	319:10	319:10	18	0
LEAF_NODE	319:10	319:10	19	0
LEAF_NODE	319:11	319:11	17	]
LEAF_NODE	319:12	319:12	15	,
ARGUMENT	319:14	319:14	15	argv [ optind ]
FIELD	319:14	319:25	16	argv [ optind ]
LEAF_NODE	319:14	319:14	17	argv
LEAF_NODE	319:18	319:18	17	[
EXPR	319:19	319:19	17	optind
FIELD	319:19	319:19	18	optind
LEAF_NODE	319:19	319:19	19	optind
LEAF_NODE	319:25	319:25	17	]
LEAF_NODE	319:26	319:26	15	,
ARGUMENT	320:5	320:21	15	( unsigned long ) row
LEAF_NODE	320:5	320:5	16	(
TYPE_NAME	320:6	320:15	16	unsigned long
LEAF_NODE	320:6	320:6	17	unsigned
LEAF_NODE	320:15	320:15	17	long
LEAF_NODE	320:19	320:19	16	)
FIELD	320:21	320:21	16	row
LEAF_NODE	320:21	320:21	17	row
LEAF_NODE	320:24	320:24	15	)
LEAF_NODE	320:25	320:25	13	;
JUMP_STATEMENT	321:4	321:9	12	break DESTINATION ;
KEYWORD	321:4	321:4	13	break
LEAF_NODE	321:4	321:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	321:9	321:9	13	;
LEAF_NODE	322:3	322:3	11	}
SELECTION	323:3	324:4	9	
KEYWORD	323:3	323:3	10	if
LEAF_NODE	323:3	323:3	11	if
LEAF_NODE	323:6	323:6	10	(
CONDITION	323:7	323:7	10	swab
EXPR	323:7	323:7	11	swab
FIELD	323:7	323:7	12	swab
LEAF_NODE	323:7	323:7	13	swab
LEAF_NODE	323:11	323:11	10	)
STATEMENTS	324:4	324:4	10	
EXPR_STATEMENT	324:4	324:43	11	swapBytesInScanline ( buf1 , width , dtype ) ;
EXPR	324:4	324:4	12	swapBytesInScanline ( buf1 , width , dtype )
FUNCTION_CALL	324:4	324:42	13	swapBytesInScanline ( buf1 , width , dtype )
CALLEE	324:4	324:4	14	swapBytesInScanline
LEAF_NODE	324:4	324:4	15	swapBytesInScanline
LEAF_NODE	324:23	324:23	14	(
ARGUMENT	324:24	324:24	14	buf1
FIELD	324:24	324:24	15	buf1
LEAF_NODE	324:24	324:24	16	buf1
LEAF_NODE	324:28	324:28	14	,
ARGUMENT	324:30	324:30	14	width
FIELD	324:30	324:30	15	width
LEAF_NODE	324:30	324:30	16	width
LEAF_NODE	324:35	324:35	14	,
ARGUMENT	324:37	324:37	14	dtype
FIELD	324:37	324:37	15	dtype
LEAF_NODE	324:37	324:37	16	dtype
LEAF_NODE	324:42	324:42	14	)
LEAF_NODE	324:43	324:43	12	;
JUMP_STATEMENT	325:3	325:8	9	break DESTINATION ;
KEYWORD	325:3	325:3	10	break
LEAF_NODE	325:3	325:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	325:8	325:8	10	;
LEAF_NODE	326:2	326:2	8	}
SELECTION	328:2	328:48	6	
KEYWORD	328:2	328:2	7	if
LEAF_NODE	328:2	328:2	8	if
LEAF_NODE	328:5	328:5	7	(
CONDITION	328:6	328:6	7	TIFFWriteScanline ( out , buf1 , row , 0 ) < 0
EXPR	328:6	328:45	8	TIFFWriteScanline ( out , buf1 , row , 0 ) < 0
FUNCTION_CALL	328:6	328:41	9	TIFFWriteScanline ( out , buf1 , row , 0 )
CALLEE	328:6	328:6	10	TIFFWriteScanline
LEAF_NODE	328:6	328:6	11	TIFFWriteScanline
LEAF_NODE	328:23	328:23	10	(
ARGUMENT	328:24	328:24	10	out
FIELD	328:24	328:24	11	out
LEAF_NODE	328:24	328:24	12	out
LEAF_NODE	328:27	328:27	10	,
ARGUMENT	328:29	328:29	10	buf1
FIELD	328:29	328:29	11	buf1
LEAF_NODE	328:29	328:29	12	buf1
LEAF_NODE	328:33	328:33	10	,
ARGUMENT	328:35	328:35	10	row
FIELD	328:35	328:35	11	row
LEAF_NODE	328:35	328:35	12	row
LEAF_NODE	328:38	328:38	10	,
ARGUMENT	328:40	328:40	10	0
FIELD	328:40	328:40	11	0
LEAF_NODE	328:40	328:40	12	0
LEAF_NODE	328:41	328:41	10	)
REL_OPERATOR	328:43	328:43	9	<
LEAF_NODE	328:43	328:43	10	<
FIELD	328:45	328:45	9	0
LEAF_NODE	328:45	328:45	10	0
LEAF_NODE	328:46	328:46	7	)
STATEMENTS	328:48	332:2	7	
LEAF_NODE	328:48	328:48	8	{
STATEMENTS	329:3	331:3	8	
EXPR_STATEMENT	329:3	330:46	9	fprintf ( stderr , "%s: %s: scanline %lu: Write error.\n" , argv [ 0 ] , outfilename , ( unsigned long ) row ) ;
EXPR	329:3	329:3	10	fprintf ( stderr , "%s: %s: scanline %lu: Write error.\n" , argv [ 0 ] , outfilename , ( unsigned long ) row )
FUNCTION_CALL	329:3	330:45	11	fprintf ( stderr , "%s: %s: scanline %lu: Write error.\n" , argv [ 0 ] , outfilename , ( unsigned long ) row )
CALLEE	329:3	329:3	12	fprintf
LEAF_NODE	329:3	329:3	13	fprintf
LEAF_NODE	329:10	329:10	12	(
ARGUMENT	329:11	329:11	12	stderr
FIELD	329:11	329:11	13	stderr
LEAF_NODE	329:11	329:11	14	stderr
LEAF_NODE	329:17	329:17	12	,
ARGUMENT	329:19	329:19	12	"%s: %s: scanline %lu: Write error.\n"
FIELD	329:19	329:19	13	"%s: %s: scanline %lu: Write error.\n"
LEAF_NODE	329:19	329:19	14	"%s: %s: scanline %lu: Write error.\n"
LEAF_NODE	329:57	329:57	12	,
ARGUMENT	330:4	330:4	12	argv [ 0 ]
FIELD	330:4	330:10	13	argv [ 0 ]
LEAF_NODE	330:4	330:4	14	argv
LEAF_NODE	330:8	330:8	14	[
EXPR	330:9	330:9	14	0
FIELD	330:9	330:9	15	0
LEAF_NODE	330:9	330:9	16	0
LEAF_NODE	330:10	330:10	14	]
LEAF_NODE	330:11	330:11	12	,
ARGUMENT	330:13	330:13	12	outfilename
FIELD	330:13	330:13	13	outfilename
LEAF_NODE	330:13	330:13	14	outfilename
LEAF_NODE	330:24	330:24	12	,
ARGUMENT	330:26	330:42	12	( unsigned long ) row
LEAF_NODE	330:26	330:26	13	(
TYPE_NAME	330:27	330:36	13	unsigned long
LEAF_NODE	330:27	330:27	14	unsigned
LEAF_NODE	330:36	330:36	14	long
LEAF_NODE	330:40	330:40	13	)
FIELD	330:42	330:42	13	row
LEAF_NODE	330:42	330:42	14	row
LEAF_NODE	330:45	330:45	12	)
LEAF_NODE	330:46	330:46	10	;
JUMP_STATEMENT	331:3	331:8	9	break DESTINATION ;
KEYWORD	331:3	331:3	10	break
LEAF_NODE	331:3	331:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	331:8	331:8	10	;
LEAF_NODE	332:2	332:2	8	}
LEAF_NODE	333:1	333:1	5	}
SELECTION	334:1	335:2	3	
KEYWORD	334:1	334:1	4	if
LEAF_NODE	334:1	334:1	5	if
LEAF_NODE	334:4	334:4	4	(
CONDITION	334:5	334:5	4	buf
EXPR	334:5	334:5	5	buf
FIELD	334:5	334:5	6	buf
LEAF_NODE	334:5	334:5	7	buf
LEAF_NODE	334:8	334:8	4	)
STATEMENTS	335:2	335:2	4	
EXPR_STATEMENT	335:2	335:16	5	_TIFFfree ( buf ) ;
EXPR	335:2	335:2	6	_TIFFfree ( buf )
FUNCTION_CALL	335:2	335:15	7	_TIFFfree ( buf )
CALLEE	335:2	335:2	8	_TIFFfree
LEAF_NODE	335:2	335:2	9	_TIFFfree
LEAF_NODE	335:11	335:11	8	(
ARGUMENT	335:12	335:12	8	buf
FIELD	335:12	335:12	9	buf
LEAF_NODE	335:12	335:12	10	buf
LEAF_NODE	335:15	335:15	8	)
LEAF_NODE	335:16	335:16	6	;
SELECTION	336:1	337:2	3	
KEYWORD	336:1	336:1	4	if
LEAF_NODE	336:1	336:1	5	if
LEAF_NODE	336:4	336:4	4	(
CONDITION	336:5	336:5	4	buf1
EXPR	336:5	336:5	5	buf1
FIELD	336:5	336:5	6	buf1
LEAF_NODE	336:5	336:5	7	buf1
LEAF_NODE	336:9	336:9	4	)
STATEMENTS	337:2	337:2	4	
EXPR_STATEMENT	337:2	337:17	5	_TIFFfree ( buf1 ) ;
EXPR	337:2	337:2	6	_TIFFfree ( buf1 )
FUNCTION_CALL	337:2	337:16	7	_TIFFfree ( buf1 )
CALLEE	337:2	337:2	8	_TIFFfree
LEAF_NODE	337:2	337:2	9	_TIFFfree
LEAF_NODE	337:11	337:11	8	(
ARGUMENT	337:12	337:12	8	buf1
FIELD	337:12	337:12	9	buf1
LEAF_NODE	337:12	337:12	10	buf1
LEAF_NODE	337:16	337:16	8	)
LEAF_NODE	337:17	337:17	6	;
EXPR_STATEMENT	338:1	338:15	3	TIFFClose ( out ) ;
EXPR	338:1	338:1	4	TIFFClose ( out )
FUNCTION_CALL	338:1	338:14	5	TIFFClose ( out )
CALLEE	338:1	338:1	6	TIFFClose
LEAF_NODE	338:1	338:1	7	TIFFClose
LEAF_NODE	338:10	338:10	6	(
ARGUMENT	338:11	338:11	6	out
FIELD	338:11	338:11	7	out
LEAF_NODE	338:11	338:11	8	out
LEAF_NODE	338:14	338:14	6	)
LEAF_NODE	338:15	338:15	4	;
JUMP_STATEMENT	339:1	339:11	3	return ( 0 ) ;
KEYWORD	339:1	339:1	4	return
LEAF_NODE	339:1	339:1	5	return
DESTINATION	339:8	339:8	4	( 0 )
EXPR	339:8	339:10	5	( 0 )
LEAF_NODE	339:8	339:8	6	(
FIELD	339:9	339:9	6	0
LEAF_NODE	339:9	339:9	7	0
LEAF_NODE	339:10	339:10	6	)
LEAF_NODE	339:11	339:11	4	;
LEAF_NODE	340:0	340:0	2	}
FUNCTION_DEF	342:0	364:0	1	
RETURN_TYPE	342:0	342:7	2	static void
LEAF_NODE	342:0	342:0	3	static
TYPE_NAME	342:7	342:7	3	void
LEAF_NODE	342:7	342:7	4	void
FUNCTION_NAME	343:0	343:0	2	swapBytesInScanline
LEAF_NODE	343:0	343:0	3	swapBytesInScanline
PARAMETER_LIST	343:19	343:63	2	( void * buf , uint32 width , TIFFDataType dtype )
LEAF_NODE	343:19	343:19	3	(
PARAMETER_DECL	343:20	343:26	3	void * buf
TYPE	343:20	343:25	4	void *
TYPE_NAME	343:20	343:20	5	void
LEAF_NODE	343:20	343:20	6	void
POINTER	343:25	343:25	5	*
LEAF_NODE	343:25	343:25	6	*
NAME	343:26	343:26	4	buf
LEAF_NODE	343:26	343:26	5	buf
LEAF_NODE	343:29	343:29	3	,
PARAMETER_DECL	343:31	343:38	3	uint32 width
TYPE	343:31	343:31	4	uint32
TYPE_NAME	343:31	343:31	5	uint32
LEAF_NODE	343:31	343:31	6	uint32
NAME	343:38	343:38	4	width
LEAF_NODE	343:38	343:38	5	width
LEAF_NODE	343:43	343:43	3	,
PARAMETER_DECL	343:45	343:58	3	TIFFDataType dtype
TYPE	343:45	343:45	4	TIFFDataType
TYPE_NAME	343:45	343:45	5	TIFFDataType
LEAF_NODE	343:45	343:45	6	TIFFDataType
NAME	343:58	343:58	4	dtype
LEAF_NODE	343:58	343:58	5	dtype
LEAF_NODE	343:63	343:63	3	)
LEAF_NODE	344:0	344:0	2	{
STATEMENTS	345:1	345:1	2	
SELECTION	345:1	345:16	3	
KEYWORD	345:1	345:1	4	switch
LEAF_NODE	345:1	345:1	5	switch
LEAF_NODE	345:8	345:8	4	(
CONDITION	345:9	345:9	4	dtype
EXPR	345:9	345:9	5	dtype
FIELD	345:9	345:9	6	dtype
LEAF_NODE	345:9	345:9	7	dtype
LEAF_NODE	345:14	345:14	4	)
STATEMENTS	345:16	363:1	4	
LEAF_NODE	345:16	345:16	5	{
STATEMENTS	346:2	362:3	5	
LABEL	346:2	346:17	6	case TIFF_SHORT :
LEAF_NODE	346:2	346:2	7	case
LEAF_NODE	346:7	346:7	7	TIFF_SHORT
LEAF_NODE	346:17	346:17	7	:
LABEL	347:2	347:18	6	case TIFF_SSHORT :
LEAF_NODE	347:2	347:2	7	case
LEAF_NODE	347:7	347:7	7	TIFF_SSHORT
LEAF_NODE	347:18	347:18	7	:
EXPR_STATEMENT	348:3	349:66	6	TIFFSwabArrayOfShort ( ( uint16 * ) buf , ( unsigned long ) width ) ;
EXPR	348:3	348:3	7	TIFFSwabArrayOfShort ( ( uint16 * ) buf , ( unsigned long ) width )
FUNCTION_CALL	348:3	349:65	8	TIFFSwabArrayOfShort ( ( uint16 * ) buf , ( unsigned long ) width )
CALLEE	348:3	348:3	9	TIFFSwabArrayOfShort
LEAF_NODE	348:3	348:3	10	TIFFSwabArrayOfShort
LEAF_NODE	348:23	348:23	9	(
ARGUMENT	348:24	348:33	9	( uint16 * ) buf
LEAF_NODE	348:24	348:24	10	(
TYPE_NAME	348:25	348:25	10	uint16
LEAF_NODE	348:25	348:25	11	uint16
LEAF_NODE	348:31	348:31	10	*
LEAF_NODE	348:32	348:32	10	)
FIELD	348:33	348:33	10	buf
LEAF_NODE	348:33	348:33	11	buf
LEAF_NODE	348:36	348:36	9	,
ARGUMENT	349:45	349:60	9	( unsigned long ) width
LEAF_NODE	349:45	349:45	10	(
TYPE_NAME	349:46	349:55	10	unsigned long
LEAF_NODE	349:46	349:46	11	unsigned
LEAF_NODE	349:55	349:55	11	long
LEAF_NODE	349:59	349:59	10	)
FIELD	349:60	349:60	10	width
LEAF_NODE	349:60	349:60	11	width
LEAF_NODE	349:65	349:65	9	)
LEAF_NODE	349:66	349:66	7	;
JUMP_STATEMENT	350:3	350:8	6	break DESTINATION ;
KEYWORD	350:3	350:3	7	break
LEAF_NODE	350:3	350:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	350:8	350:8	7	;
LABEL	351:2	351:16	6	case TIFF_LONG :
LEAF_NODE	351:2	351:2	7	case
LEAF_NODE	351:7	351:7	7	TIFF_LONG
LEAF_NODE	351:16	351:16	7	:
LABEL	352:2	352:17	6	case TIFF_SLONG :
LEAF_NODE	352:2	352:2	7	case
LEAF_NODE	352:7	352:7	7	TIFF_SLONG
LEAF_NODE	352:17	352:17	7	:
EXPR_STATEMENT	353:3	354:65	6	TIFFSwabArrayOfLong ( ( uint32 * ) buf , ( unsigned long ) width ) ;
EXPR	353:3	353:3	7	TIFFSwabArrayOfLong ( ( uint32 * ) buf , ( unsigned long ) width )
FUNCTION_CALL	353:3	354:64	8	TIFFSwabArrayOfLong ( ( uint32 * ) buf , ( unsigned long ) width )
CALLEE	353:3	353:3	9	TIFFSwabArrayOfLong
LEAF_NODE	353:3	353:3	10	TIFFSwabArrayOfLong
LEAF_NODE	353:22	353:22	9	(
ARGUMENT	353:23	353:32	9	( uint32 * ) buf
LEAF_NODE	353:23	353:23	10	(
TYPE_NAME	353:24	353:24	10	uint32
LEAF_NODE	353:24	353:24	11	uint32
LEAF_NODE	353:30	353:30	10	*
LEAF_NODE	353:31	353:31	10	)
FIELD	353:32	353:32	10	buf
LEAF_NODE	353:32	353:32	11	buf
LEAF_NODE	353:35	353:35	9	,
ARGUMENT	354:44	354:59	9	( unsigned long ) width
LEAF_NODE	354:44	354:44	10	(
TYPE_NAME	354:45	354:54	10	unsigned long
LEAF_NODE	354:45	354:45	11	unsigned
LEAF_NODE	354:54	354:54	11	long
LEAF_NODE	354:58	354:58	10	)
FIELD	354:59	354:59	10	width
LEAF_NODE	354:59	354:59	11	width
LEAF_NODE	354:64	354:64	9	)
LEAF_NODE	354:65	354:65	7	;
JUMP_STATEMENT	355:3	355:8	6	break DESTINATION ;
KEYWORD	355:3	355:3	7	break
LEAF_NODE	355:3	355:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	355:8	355:8	7	;
LABEL	357:2	357:18	6	case TIFF_DOUBLE :
LEAF_NODE	357:2	357:2	7	case
LEAF_NODE	357:7	357:7	7	TIFF_DOUBLE
LEAF_NODE	357:18	357:18	7	:
EXPR_STATEMENT	358:3	359:67	6	TIFFSwabArrayOfDouble ( ( double * ) buf , ( unsigned long ) width ) ;
EXPR	358:3	358:3	7	TIFFSwabArrayOfDouble ( ( double * ) buf , ( unsigned long ) width )
FUNCTION_CALL	358:3	359:66	8	TIFFSwabArrayOfDouble ( ( double * ) buf , ( unsigned long ) width )
CALLEE	358:3	358:3	9	TIFFSwabArrayOfDouble
LEAF_NODE	358:3	358:3	10	TIFFSwabArrayOfDouble
LEAF_NODE	358:24	358:24	9	(
ARGUMENT	358:25	358:34	9	( double * ) buf
LEAF_NODE	358:25	358:25	10	(
TYPE_NAME	358:26	358:26	10	double
LEAF_NODE	358:26	358:26	11	double
LEAF_NODE	358:32	358:32	10	*
LEAF_NODE	358:33	358:33	10	)
FIELD	358:34	358:34	10	buf
LEAF_NODE	358:34	358:34	11	buf
LEAF_NODE	358:37	358:37	9	,
ARGUMENT	359:46	359:61	9	( unsigned long ) width
LEAF_NODE	359:46	359:46	10	(
TYPE_NAME	359:47	359:56	10	unsigned long
LEAF_NODE	359:47	359:47	11	unsigned
LEAF_NODE	359:56	359:56	11	long
LEAF_NODE	359:60	359:60	10	)
FIELD	359:61	359:61	10	width
LEAF_NODE	359:61	359:61	11	width
LEAF_NODE	359:66	359:66	9	)
LEAF_NODE	359:67	359:67	7	;
JUMP_STATEMENT	360:3	360:8	6	break DESTINATION ;
KEYWORD	360:3	360:3	7	break
LEAF_NODE	360:3	360:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	360:8	360:8	7	;
LABEL	361:2	361:9	6	default :
LEAF_NODE	361:2	361:2	7	default
LEAF_NODE	361:9	361:9	7	:
JUMP_STATEMENT	362:3	362:8	6	break DESTINATION ;
KEYWORD	362:3	362:3	7	break
LEAF_NODE	362:3	362:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	362:8	362:8	7	;
LEAF_NODE	363:1	363:1	5	}
LEAF_NODE	364:0	364:0	2	}
FUNCTION_DEF	366:0	478:0	1	
RETURN_TYPE	366:0	366:7	2	static int
LEAF_NODE	366:0	366:0	3	static
TYPE_NAME	366:7	366:7	3	int
LEAF_NODE	366:7	366:7	4	int
FUNCTION_NAME	367:0	367:0	2	guessSize
LEAF_NODE	367:0	367:0	3	guessSize
PARAMETER_LIST	367:9	368:42	2	( int fd , TIFFDataType dtype , _TIFF_off_t hdr_size , uint32 nbands , int swab , uint32 * width , uint32 * length )
LEAF_NODE	367:9	367:9	3	(
PARAMETER_DECL	367:10	367:14	3	int fd
TYPE	367:10	367:10	4	int
TYPE_NAME	367:10	367:10	5	int
LEAF_NODE	367:10	367:10	6	int
NAME	367:14	367:14	4	fd
LEAF_NODE	367:14	367:14	5	fd
LEAF_NODE	367:16	367:16	3	,
PARAMETER_DECL	367:18	367:31	3	TIFFDataType dtype
TYPE	367:18	367:18	4	TIFFDataType
TYPE_NAME	367:18	367:18	5	TIFFDataType
LEAF_NODE	367:18	367:18	6	TIFFDataType
NAME	367:31	367:31	4	dtype
LEAF_NODE	367:31	367:31	5	dtype
LEAF_NODE	367:36	367:36	3	,
PARAMETER_DECL	367:38	367:50	3	_TIFF_off_t hdr_size
TYPE	367:38	367:38	4	_TIFF_off_t
TYPE_NAME	367:38	367:38	5	_TIFF_off_t
LEAF_NODE	367:38	367:38	6	_TIFF_off_t
NAME	367:50	367:50	4	hdr_size
LEAF_NODE	367:50	367:50	5	hdr_size
LEAF_NODE	367:58	367:58	3	,
PARAMETER_DECL	367:60	367:67	3	uint32 nbands
TYPE	367:60	367:60	4	uint32
TYPE_NAME	367:60	367:60	5	uint32
LEAF_NODE	367:60	367:60	6	uint32
NAME	367:67	367:67	4	nbands
LEAF_NODE	367:67	367:67	5	nbands
LEAF_NODE	367:73	367:73	3	,
PARAMETER_DECL	368:3	368:7	3	int swab
TYPE	368:3	368:3	4	int
TYPE_NAME	368:3	368:3	5	int
LEAF_NODE	368:3	368:3	6	int
NAME	368:7	368:7	4	swab
LEAF_NODE	368:7	368:7	5	swab
LEAF_NODE	368:11	368:11	3	,
PARAMETER_DECL	368:13	368:21	3	uint32 * width
TYPE	368:13	368:20	4	uint32 *
TYPE_NAME	368:13	368:13	5	uint32
LEAF_NODE	368:13	368:13	6	uint32
POINTER	368:20	368:20	5	*
LEAF_NODE	368:20	368:20	6	*
NAME	368:21	368:21	4	width
LEAF_NODE	368:21	368:21	5	width
LEAF_NODE	368:26	368:26	3	,
PARAMETER_DECL	368:28	368:36	3	uint32 * length
TYPE	368:28	368:35	4	uint32 *
TYPE_NAME	368:28	368:28	5	uint32
LEAF_NODE	368:28	368:28	6	uint32
POINTER	368:35	368:35	5	*
LEAF_NODE	368:35	368:35	6	*
NAME	368:36	368:36	4	length
LEAF_NODE	368:36	368:36	5	length
LEAF_NODE	368:42	368:42	3	)
LEAF_NODE	369:0	369:0	2	{
STATEMENTS	370:1	477:1	2	
SIMPLE_DECL	370:1	370:25	3	const float longt ; longt = 40.0 ;
VAR_DECL	370:1	370:13	4	const float longt ; longt = 40.0
TYPE	370:1	370:1	5	const float
TYPE_NAME	370:1	370:7	6	const float
LEAF_NODE	370:1	370:1	7	const
LEAF_NODE	370:7	370:7	7	float
NAME	370:13	370:13	5	longt
LEAF_NODE	370:13	370:13	6	longt
LEAF_NODE	0:0	0:0	5	;
INIT	370:13	370:13	5	longt = 40.0
ASSIGN	370:13	370:21	6	longt = 40.0
LVAL	370:13	370:13	7	longt
NAME	370:13	370:13	8	longt
LEAF_NODE	370:13	370:13	9	longt
ASSIGN_OP	370:19	370:19	7	=
LEAF_NODE	370:19	370:19	8	=
RVAL	370:21	370:21	7	40.0
FIELD	370:21	370:21	8	40.0
LEAF_NODE	370:21	370:21	9	40.0
LEAF_NODE	370:25	370:25	4	;
SIMPLE_DECL	371:1	371:22	3	char * buf1 , char * buf2 ;
INIT_DECL_LIST	371:1	371:1	4	char * buf1 , char * buf2
VAR_DECL	371:1	371:11	5	char * buf1
TYPE	371:1	371:10	6	char *
TYPE_NAME	371:1	371:1	7	char
LEAF_NODE	371:1	371:1	8	char
POINTER	371:10	371:10	7	*
LEAF_NODE	371:10	371:10	8	*
NAME	371:11	371:11	6	buf1
LEAF_NODE	371:11	371:11	7	buf1
LEAF_NODE	371:15	371:15	5	,
VAR_DECL	371:1	371:18	5	char * buf2
TYPE	371:1	371:17	6	char *
TYPE_NAME	371:1	371:1	7	char
LEAF_NODE	371:1	371:1	8	char
POINTER	371:17	371:17	7	*
LEAF_NODE	371:17	371:17	8	*
NAME	371:18	371:18	6	buf2
LEAF_NODE	371:18	371:18	7	buf2
LEAF_NODE	371:22	371:22	4	;
SIMPLE_DECL	372:1	372:22	3	_TIFF_stat_s filestat ;
VAR_DECL	372:1	372:14	4	_TIFF_stat_s filestat
TYPE	372:1	372:1	5	_TIFF_stat_s
TYPE_NAME	372:1	372:1	6	_TIFF_stat_s
LEAF_NODE	372:1	372:1	7	_TIFF_stat_s
NAME	372:14	372:14	5	filestat
LEAF_NODE	372:14	372:14	6	filestat
LEAF_NODE	372:22	372:22	4	;
SIMPLE_DECL	373:1	373:41	3	uint32 w , uint32 h , uint32 scanlinesize , uint32 imagesize ;
INIT_DECL_LIST	373:1	373:1	4	uint32 w , uint32 h , uint32 scanlinesize , uint32 imagesize
VAR_DECL	373:1	373:12	5	uint32 w
TYPE	373:1	373:1	6	uint32
TYPE_NAME	373:1	373:1	7	uint32
LEAF_NODE	373:1	373:1	8	uint32
NAME	373:12	373:12	6	w
LEAF_NODE	373:12	373:12	7	w
LEAF_NODE	373:13	373:13	5	,
INIT_DECL_LIST	373:1	373:1	5	uint32 h , uint32 scanlinesize , uint32 imagesize
VAR_DECL	373:1	373:15	6	uint32 h
TYPE	373:1	373:1	7	uint32
TYPE_NAME	373:1	373:1	8	uint32
LEAF_NODE	373:1	373:1	9	uint32
NAME	373:15	373:15	7	h
LEAF_NODE	373:15	373:15	8	h
LEAF_NODE	373:16	373:16	6	,
INIT_DECL_LIST	373:1	373:1	6	uint32 scanlinesize , uint32 imagesize
VAR_DECL	373:1	373:18	7	uint32 scanlinesize
TYPE	373:1	373:1	8	uint32
TYPE_NAME	373:1	373:1	9	uint32
LEAF_NODE	373:1	373:1	10	uint32
NAME	373:18	373:18	8	scanlinesize
LEAF_NODE	373:18	373:18	9	scanlinesize
LEAF_NODE	373:30	373:30	7	,
VAR_DECL	373:1	373:32	7	uint32 imagesize
TYPE	373:1	373:1	8	uint32
TYPE_NAME	373:1	373:1	9	uint32
LEAF_NODE	373:1	373:1	10	uint32
NAME	373:32	373:32	8	imagesize
LEAF_NODE	373:32	373:32	9	imagesize
LEAF_NODE	373:41	373:41	4	;
SIMPLE_DECL	374:1	374:40	3	uint32 depth ; depth = TIFFDataWidth ( dtype ) ;
VAR_DECL	374:1	374:12	4	uint32 depth ; depth = TIFFDataWidth ( dtype )
TYPE	374:1	374:1	5	uint32
TYPE_NAME	374:1	374:1	6	uint32
LEAF_NODE	374:1	374:1	7	uint32
NAME	374:12	374:12	5	depth
LEAF_NODE	374:12	374:12	6	depth
LEAF_NODE	0:0	0:0	5	;
INIT	374:12	374:12	5	depth = TIFFDataWidth ( dtype )
ASSIGN	374:12	374:20	6	depth = TIFFDataWidth ( dtype )
LVAL	374:12	374:12	7	depth
NAME	374:12	374:12	8	depth
LEAF_NODE	374:12	374:12	9	depth
ASSIGN_OP	374:18	374:18	7	=
LEAF_NODE	374:18	374:18	8	=
RVAL	374:20	374:20	7	TIFFDataWidth ( dtype )
FUNCTION_CALL	374:20	374:39	8	TIFFDataWidth ( dtype )
CALLEE	374:20	374:20	9	TIFFDataWidth
LEAF_NODE	374:20	374:20	10	TIFFDataWidth
LEAF_NODE	374:33	374:33	9	(
ARGUMENT	374:34	374:34	9	dtype
FIELD	374:34	374:34	10	dtype
LEAF_NODE	374:34	374:34	11	dtype
LEAF_NODE	374:39	374:39	9	)
LEAF_NODE	374:40	374:40	4	;
SIMPLE_DECL	375:1	375:28	3	float cor_coef ; cor_coef = 0 , float tmp ;
INIT_DECL_LIST	375:1	375:1	4	float cor_coef ; cor_coef = 0 , float tmp
VAR_DECL	375:1	375:11	5	float cor_coef ; cor_coef = 0
TYPE	375:1	375:1	6	float
TYPE_NAME	375:1	375:1	7	float
LEAF_NODE	375:1	375:1	8	float
NAME	375:11	375:11	6	cor_coef
LEAF_NODE	375:11	375:11	7	cor_coef
LEAF_NODE	0:0	0:0	6	;
INIT	375:11	375:11	6	cor_coef = 0
ASSIGN	375:11	375:22	7	cor_coef = 0
LVAL	375:11	375:11	8	cor_coef
NAME	375:11	375:11	9	cor_coef
LEAF_NODE	375:11	375:11	10	cor_coef
ASSIGN_OP	375:20	375:20	8	=
LEAF_NODE	375:20	375:20	9	=
RVAL	375:22	375:22	8	0
FIELD	375:22	375:22	9	0
LEAF_NODE	375:22	375:22	10	0
LEAF_NODE	375:23	375:23	5	,
VAR_DECL	375:1	375:25	5	float tmp
TYPE	375:1	375:1	6	float
TYPE_NAME	375:1	375:1	7	float
LEAF_NODE	375:1	375:1	8	float
NAME	375:25	375:25	6	tmp
LEAF_NODE	375:25	375:25	7	tmp
LEAF_NODE	375:28	375:28	4	;
SELECTION	377:1	377:41	3	
KEYWORD	377:1	377:1	4	if
LEAF_NODE	377:1	377:1	5	if
LEAF_NODE	377:4	377:4	4	(
CONDITION	377:5	377:5	4	_TIFF_fstat_f ( fd , & filestat ) == - 1
EXPR	377:5	377:37	5	_TIFF_fstat_f ( fd , & filestat ) == - 1
FUNCTION_CALL	377:5	377:32	6	_TIFF_fstat_f ( fd , & filestat )
CALLEE	377:5	377:5	7	_TIFF_fstat_f
LEAF_NODE	377:5	377:5	8	_TIFF_fstat_f
LEAF_NODE	377:18	377:18	7	(
ARGUMENT	377:19	377:19	7	fd
FIELD	377:19	377:19	8	fd
LEAF_NODE	377:19	377:19	9	fd
LEAF_NODE	377:21	377:21	7	,
ARGUMENT	377:23	377:23	7	& filestat
UNARY_EXPR	377:23	377:24	8	& filestat
UNARY_OPERATOR	377:23	377:23	9	&
LEAF_NODE	377:23	377:23	10	&
FIELD	377:24	377:24	9	filestat
LEAF_NODE	377:24	377:24	10	filestat
LEAF_NODE	377:32	377:32	7	)
EQ_OPERATOR	377:34	377:34	6	==
LEAF_NODE	377:34	377:34	7	==
UNARY_EXPR	377:37	377:38	6	- 1
UNARY_OPERATOR	377:37	377:37	7	-
LEAF_NODE	377:37	377:37	8	-
FIELD	377:38	377:38	7	1
LEAF_NODE	377:38	377:38	8	1
LEAF_NODE	377:39	377:39	4	)
STATEMENTS	377:41	380:8	4	
LEAF_NODE	377:41	377:41	5	{
STATEMENTS	378:16	379:2	5	
EXPR_STATEMENT	378:16	378:64	6	fprintf ( stderr , "Failed to obtain file size.\n" ) ;
EXPR	378:16	378:16	7	fprintf ( stderr , "Failed to obtain file size.\n" )
FUNCTION_CALL	378:16	378:63	8	fprintf ( stderr , "Failed to obtain file size.\n" )
CALLEE	378:16	378:16	9	fprintf
LEAF_NODE	378:16	378:16	10	fprintf
LEAF_NODE	378:23	378:23	9	(
ARGUMENT	378:24	378:24	9	stderr
FIELD	378:24	378:24	10	stderr
LEAF_NODE	378:24	378:24	11	stderr
LEAF_NODE	378:30	378:30	9	,
ARGUMENT	378:32	378:32	9	"Failed to obtain file size.\n"
FIELD	378:32	378:32	10	"Failed to obtain file size.\n"
LEAF_NODE	378:32	378:32	11	"Failed to obtain file size.\n"
LEAF_NODE	378:63	378:63	9	)
LEAF_NODE	378:64	378:64	7	;
JUMP_STATEMENT	379:2	379:11	6	return - 1 ;
KEYWORD	379:2	379:2	7	return
LEAF_NODE	379:2	379:2	8	return
DESTINATION	379:9	379:9	7	- 1
EXPR	379:9	379:9	8	- 1
UNARY_EXPR	379:9	379:10	9	- 1
UNARY_OPERATOR	379:9	379:9	10	-
LEAF_NODE	379:9	379:9	11	-
FIELD	379:10	379:10	10	1
LEAF_NODE	379:10	379:10	11	1
LEAF_NODE	379:11	379:11	7	;
LEAF_NODE	380:8	380:8	5	}
SELECTION	382:1	382:34	3	
KEYWORD	382:1	382:1	4	if
LEAF_NODE	382:1	382:1	5	if
LEAF_NODE	382:4	382:4	4	(
CONDITION	382:5	382:5	4	filestat . st_size < hdr_size
EXPR	382:5	382:24	5	filestat . st_size < hdr_size
FIELD	382:5	382:14	6	filestat . st_size
LEAF_NODE	382:5	382:5	7	filestat
LEAF_NODE	382:13	382:13	7	.
LEAF_NODE	382:14	382:14	7	st_size
REL_OPERATOR	382:22	382:22	6	<
LEAF_NODE	382:22	382:22	7	<
FIELD	382:24	382:24	6	hdr_size
LEAF_NODE	382:24	382:24	7	hdr_size
LEAF_NODE	382:32	382:32	4	)
STATEMENTS	382:34	385:1	4	
LEAF_NODE	382:34	382:34	5	{
STATEMENTS	383:2	384:2	5	
EXPR_STATEMENT	383:2	383:55	6	fprintf ( stderr , "Too large header size specified.\n" ) ;
EXPR	383:2	383:2	7	fprintf ( stderr , "Too large header size specified.\n" )
FUNCTION_CALL	383:2	383:54	8	fprintf ( stderr , "Too large header size specified.\n" )
CALLEE	383:2	383:2	9	fprintf
LEAF_NODE	383:2	383:2	10	fprintf
LEAF_NODE	383:9	383:9	9	(
ARGUMENT	383:10	383:10	9	stderr
FIELD	383:10	383:10	10	stderr
LEAF_NODE	383:10	383:10	11	stderr
LEAF_NODE	383:16	383:16	9	,
ARGUMENT	383:18	383:18	9	"Too large header size specified.\n"
FIELD	383:18	383:18	10	"Too large header size specified.\n"
LEAF_NODE	383:18	383:18	11	"Too large header size specified.\n"
LEAF_NODE	383:54	383:54	9	)
LEAF_NODE	383:55	383:55	7	;
JUMP_STATEMENT	384:2	384:11	6	return - 1 ;
KEYWORD	384:2	384:2	7	return
LEAF_NODE	384:2	384:2	8	return
DESTINATION	384:9	384:9	7	- 1
EXPR	384:9	384:9	8	- 1
UNARY_EXPR	384:9	384:10	9	- 1
UNARY_OPERATOR	384:9	384:9	10	-
LEAF_NODE	384:9	384:9	11	-
FIELD	384:10	384:10	10	1
LEAF_NODE	384:10	384:10	11	1
LEAF_NODE	384:11	384:11	7	;
LEAF_NODE	385:1	385:1	5	}
LEAF_NODE	387:1	387:1	3	imagesize
LEAF_NODE	387:11	387:11	3	=
LEAF_NODE	387:13	387:13	3	(
LEAF_NODE	387:14	387:14	3	filestat
LEAF_NODE	387:22	387:22	3	.
LEAF_NODE	387:23	387:23	3	st_size
LEAF_NODE	387:31	387:31	3	-
LEAF_NODE	387:33	387:33	3	hdr_size
LEAF_NODE	387:41	387:41	3	)
LEAF_NODE	387:43	387:43	3	/
EXPR_STATEMENT	387:45	387:59	3	nbands / depth ;
EXPR	387:45	387:54	4	nbands / depth
FIELD	387:45	387:45	5	nbands
LEAF_NODE	387:45	387:45	6	nbands
LEAF_NODE	387:52	387:52	5	/
FIELD	387:54	387:54	5	depth
LEAF_NODE	387:54	387:54	6	depth
LEAF_NODE	387:59	387:59	4	;
SELECTION	389:1	389:34	3	
KEYWORD	389:1	389:1	4	if
LEAF_NODE	389:1	389:1	5	if
LEAF_NODE	389:4	389:4	4	(
CONDITION	389:5	389:5	4	* width != 0 && * length == 0
EXPR	389:5	389:5	5	* width != 0 && * length == 0
AND	389:5	389:20	6	* width != 0 && * length == 0
EXPR	389:5	389:15	7	* width != 0
UNARY_EXPR	389:5	389:6	8	* width
UNARY_OPERATOR	389:5	389:5	9	*
LEAF_NODE	389:5	389:5	10	*
FIELD	389:6	389:6	9	width
LEAF_NODE	389:6	389:6	10	width
EQ_OPERATOR	389:12	389:12	8	!=
LEAF_NODE	389:12	389:12	9	!=
FIELD	389:15	389:15	8	0
LEAF_NODE	389:15	389:15	9	0
LEAF_NODE	389:17	389:17	7	&&
EXPR	389:20	389:31	7	* length == 0
UNARY_EXPR	389:20	389:21	8	* length
UNARY_OPERATOR	389:20	389:20	9	*
LEAF_NODE	389:20	389:20	10	*
FIELD	389:21	389:21	9	length
LEAF_NODE	389:21	389:21	10	length
EQ_OPERATOR	389:28	389:28	8	==
LEAF_NODE	389:28	389:28	9	==
FIELD	389:31	389:31	8	0
LEAF_NODE	389:31	389:31	9	0
LEAF_NODE	389:32	389:32	4	)
STATEMENTS	389:34	398:1	4	
LEAF_NODE	389:34	389:34	5	{
STATEMENTS	390:2	397:2	5	
EXPR_STATEMENT	390:2	390:53	6	fprintf ( stderr , "Image height is not specified.\n" ) ;
EXPR	390:2	390:2	7	fprintf ( stderr , "Image height is not specified.\n" )
FUNCTION_CALL	390:2	390:52	8	fprintf ( stderr , "Image height is not specified.\n" )
CALLEE	390:2	390:2	9	fprintf
LEAF_NODE	390:2	390:2	10	fprintf
LEAF_NODE	390:9	390:9	9	(
ARGUMENT	390:10	390:10	9	stderr
FIELD	390:10	390:10	10	stderr
LEAF_NODE	390:10	390:10	11	stderr
LEAF_NODE	390:16	390:16	9	,
ARGUMENT	390:18	390:18	9	"Image height is not specified.\n"
FIELD	390:18	390:18	10	"Image height is not specified.\n"
LEAF_NODE	390:18	390:18	11	"Image height is not specified.\n"
LEAF_NODE	390:52	390:52	9	)
LEAF_NODE	390:53	390:53	7	;
EXPR_STATEMENT	392:2	392:30	6	* length = imagesize / * width ;
EXPR	392:2	392:2	7	* length = imagesize / * width
ASSIGN	392:2	392:12	8	* length = imagesize / * width
LVAL	392:2	392:2	9	* length
UNARY_EXPR	392:2	392:3	10	* length
UNARY_OPERATOR	392:2	392:2	11	*
LEAF_NODE	392:2	392:2	12	*
FIELD	392:3	392:3	11	length
LEAF_NODE	392:3	392:3	12	length
ASSIGN_OP	392:10	392:10	9	=
LEAF_NODE	392:10	392:10	10	=
RVAL	392:12	392:24	9	imagesize / * width
FIELD	392:12	392:12	10	imagesize
LEAF_NODE	392:12	392:12	11	imagesize
LEAF_NODE	392:22	392:22	10	/
UNARY_EXPR	392:24	392:25	10	* width
UNARY_OPERATOR	392:24	392:24	11	*
LEAF_NODE	392:24	392:24	12	*
FIELD	392:25	392:25	11	width
LEAF_NODE	392:25	392:25	12	width
LEAF_NODE	392:30	392:30	7	;
EXPR_STATEMENT	394:2	395:26	6	fprintf ( stderr , "Height is guessed as %lu.\n" , ( unsigned long ) * length ) ;
EXPR	394:2	394:2	7	fprintf ( stderr , "Height is guessed as %lu.\n" , ( unsigned long ) * length )
FUNCTION_CALL	394:2	395:25	8	fprintf ( stderr , "Height is guessed as %lu.\n" , ( unsigned long ) * length )
CALLEE	394:2	394:2	9	fprintf
LEAF_NODE	394:2	394:2	10	fprintf
LEAF_NODE	394:9	394:9	9	(
ARGUMENT	394:10	394:10	9	stderr
FIELD	394:10	394:10	10	stderr
LEAF_NODE	394:10	394:10	11	stderr
LEAF_NODE	394:16	394:16	9	,
ARGUMENT	394:18	394:18	9	"Height is guessed as %lu.\n"
FIELD	394:18	394:18	10	"Height is guessed as %lu.\n"
LEAF_NODE	394:18	394:18	11	"Height is guessed as %lu.\n"
LEAF_NODE	394:47	394:47	9	,
ARGUMENT	395:3	395:18	9	( unsigned long ) * length
LEAF_NODE	395:3	395:3	10	(
TYPE_NAME	395:4	395:13	10	unsigned long
LEAF_NODE	395:4	395:4	11	unsigned
LEAF_NODE	395:13	395:13	11	long
LEAF_NODE	395:17	395:17	10	)
UNARY_EXPR	395:18	395:19	10	* length
UNARY_OPERATOR	395:18	395:18	11	*
LEAF_NODE	395:18	395:18	12	*
FIELD	395:19	395:19	11	length
LEAF_NODE	395:19	395:19	12	length
LEAF_NODE	395:25	395:25	9	)
LEAF_NODE	395:26	395:26	7	;
JUMP_STATEMENT	397:2	397:10	6	return 1 ;
KEYWORD	397:2	397:2	7	return
LEAF_NODE	397:2	397:2	8	return
DESTINATION	397:9	397:9	7	1
EXPR	397:9	397:9	8	1
FIELD	397:9	397:9	9	1
LEAF_NODE	397:9	397:9	10	1
LEAF_NODE	397:10	397:10	7	;
LEAF_NODE	398:1	398:1	5	}
SELECTION	398:3	398:8	3	
KEYWORD	398:3	398:3	4	else
LEAF_NODE	398:3	398:3	5	else
STATEMENTS	398:8	398:8	4	
SELECTION	398:8	398:41	5	
KEYWORD	398:8	398:8	6	if
LEAF_NODE	398:8	398:8	7	if
LEAF_NODE	398:11	398:11	6	(
CONDITION	398:12	398:12	6	* width == 0 && * length != 0
EXPR	398:12	398:12	7	* width == 0 && * length != 0
AND	398:12	398:27	8	* width == 0 && * length != 0
EXPR	398:12	398:22	9	* width == 0
UNARY_EXPR	398:12	398:13	10	* width
UNARY_OPERATOR	398:12	398:12	11	*
LEAF_NODE	398:12	398:12	12	*
FIELD	398:13	398:13	11	width
LEAF_NODE	398:13	398:13	12	width
EQ_OPERATOR	398:19	398:19	10	==
LEAF_NODE	398:19	398:19	11	==
FIELD	398:22	398:22	10	0
LEAF_NODE	398:22	398:22	11	0
LEAF_NODE	398:24	398:24	9	&&
EXPR	398:27	398:38	9	* length != 0
UNARY_EXPR	398:27	398:28	10	* length
UNARY_OPERATOR	398:27	398:27	11	*
LEAF_NODE	398:27	398:27	12	*
FIELD	398:28	398:28	11	length
LEAF_NODE	398:28	398:28	12	length
EQ_OPERATOR	398:35	398:35	10	!=
LEAF_NODE	398:35	398:35	11	!=
FIELD	398:38	398:38	10	0
LEAF_NODE	398:38	398:38	11	0
LEAF_NODE	398:39	398:39	6	)
STATEMENTS	398:41	407:1	6	
LEAF_NODE	398:41	398:41	7	{
STATEMENTS	399:2	406:2	7	
EXPR_STATEMENT	399:2	399:52	8	fprintf ( stderr , "Image width is not specified.\n" ) ;
EXPR	399:2	399:2	9	fprintf ( stderr , "Image width is not specified.\n" )
FUNCTION_CALL	399:2	399:51	10	fprintf ( stderr , "Image width is not specified.\n" )
CALLEE	399:2	399:2	11	fprintf
LEAF_NODE	399:2	399:2	12	fprintf
LEAF_NODE	399:9	399:9	11	(
ARGUMENT	399:10	399:10	11	stderr
FIELD	399:10	399:10	12	stderr
LEAF_NODE	399:10	399:10	13	stderr
LEAF_NODE	399:16	399:16	11	,
ARGUMENT	399:18	399:18	11	"Image width is not specified.\n"
FIELD	399:18	399:18	12	"Image width is not specified.\n"
LEAF_NODE	399:18	399:18	13	"Image width is not specified.\n"
LEAF_NODE	399:51	399:51	11	)
LEAF_NODE	399:52	399:52	9	;
EXPR_STATEMENT	401:2	401:30	8	* width = imagesize / * length ;
EXPR	401:2	401:2	9	* width = imagesize / * length
ASSIGN	401:2	401:11	10	* width = imagesize / * length
LVAL	401:2	401:2	11	* width
UNARY_EXPR	401:2	401:3	12	* width
UNARY_OPERATOR	401:2	401:2	13	*
LEAF_NODE	401:2	401:2	14	*
FIELD	401:3	401:3	13	width
LEAF_NODE	401:3	401:3	14	width
ASSIGN_OP	401:9	401:9	11	=
LEAF_NODE	401:9	401:9	12	=
RVAL	401:11	401:23	11	imagesize / * length
FIELD	401:11	401:11	12	imagesize
LEAF_NODE	401:11	401:11	13	imagesize
LEAF_NODE	401:21	401:21	12	/
UNARY_EXPR	401:23	401:24	12	* length
UNARY_OPERATOR	401:23	401:23	13	*
LEAF_NODE	401:23	401:23	14	*
FIELD	401:24	401:24	13	length
LEAF_NODE	401:24	401:24	14	length
LEAF_NODE	401:30	401:30	9	;
EXPR_STATEMENT	403:2	404:25	8	fprintf ( stderr , "Width is guessed as %lu.\n" , ( unsigned long ) * width ) ;
EXPR	403:2	403:2	9	fprintf ( stderr , "Width is guessed as %lu.\n" , ( unsigned long ) * width )
FUNCTION_CALL	403:2	404:24	10	fprintf ( stderr , "Width is guessed as %lu.\n" , ( unsigned long ) * width )
CALLEE	403:2	403:2	11	fprintf
LEAF_NODE	403:2	403:2	12	fprintf
LEAF_NODE	403:9	403:9	11	(
ARGUMENT	403:10	403:10	11	stderr
FIELD	403:10	403:10	12	stderr
LEAF_NODE	403:10	403:10	13	stderr
LEAF_NODE	403:16	403:16	11	,
ARGUMENT	403:18	403:18	11	"Width is guessed as %lu.\n"
FIELD	403:18	403:18	12	"Width is guessed as %lu.\n"
LEAF_NODE	403:18	403:18	13	"Width is guessed as %lu.\n"
LEAF_NODE	403:46	403:46	11	,
ARGUMENT	404:3	404:18	11	( unsigned long ) * width
LEAF_NODE	404:3	404:3	12	(
TYPE_NAME	404:4	404:13	12	unsigned long
LEAF_NODE	404:4	404:4	13	unsigned
LEAF_NODE	404:13	404:13	13	long
LEAF_NODE	404:17	404:17	12	)
UNARY_EXPR	404:18	404:19	12	* width
UNARY_OPERATOR	404:18	404:18	13	*
LEAF_NODE	404:18	404:18	14	*
FIELD	404:19	404:19	13	width
LEAF_NODE	404:19	404:19	14	width
LEAF_NODE	404:24	404:24	11	)
LEAF_NODE	404:25	404:25	9	;
JUMP_STATEMENT	406:2	406:10	8	return 1 ;
KEYWORD	406:2	406:2	9	return
LEAF_NODE	406:2	406:2	10	return
DESTINATION	406:9	406:9	9	1
EXPR	406:9	406:9	10	1
FIELD	406:9	406:9	11	1
LEAF_NODE	406:9	406:9	12	1
LEAF_NODE	406:10	406:10	9	;
LEAF_NODE	407:1	407:1	7	}
SELECTION	407:3	407:8	3	
KEYWORD	407:3	407:3	4	else
LEAF_NODE	407:3	407:3	5	else
STATEMENTS	407:8	407:8	4	
SELECTION	407:8	407:41	5	
KEYWORD	407:8	407:8	6	if
LEAF_NODE	407:8	407:8	7	if
LEAF_NODE	407:11	407:11	6	(
CONDITION	407:12	407:12	6	* width == 0 && * length == 0
EXPR	407:12	407:12	7	* width == 0 && * length == 0
AND	407:12	407:27	8	* width == 0 && * length == 0
EXPR	407:12	407:22	9	* width == 0
UNARY_EXPR	407:12	407:13	10	* width
UNARY_OPERATOR	407:12	407:12	11	*
LEAF_NODE	407:12	407:12	12	*
FIELD	407:13	407:13	11	width
LEAF_NODE	407:13	407:13	12	width
EQ_OPERATOR	407:19	407:19	10	==
LEAF_NODE	407:19	407:19	11	==
FIELD	407:22	407:22	10	0
LEAF_NODE	407:22	407:22	11	0
LEAF_NODE	407:24	407:24	9	&&
EXPR	407:27	407:38	9	* length == 0
UNARY_EXPR	407:27	407:28	10	* length
UNARY_OPERATOR	407:27	407:27	11	*
LEAF_NODE	407:27	407:27	12	*
FIELD	407:28	407:28	11	length
LEAF_NODE	407:28	407:28	12	length
EQ_OPERATOR	407:35	407:35	10	==
LEAF_NODE	407:35	407:35	11	==
FIELD	407:38	407:38	10	0
LEAF_NODE	407:38	407:38	11	0
LEAF_NODE	407:39	407:39	6	)
STATEMENTS	407:41	470:1	6	
LEAF_NODE	407:41	407:41	7	{
STATEMENTS	408:16	469:2	7	
SIMPLE_DECL	408:16	408:37	8	unsigned int fail ; fail = 0 ;
VAR_DECL	408:16	408:29	9	unsigned int fail ; fail = 0
TYPE	408:16	408:16	10	unsigned int
TYPE_NAME	408:16	408:25	11	unsigned int
LEAF_NODE	408:16	408:16	12	unsigned
LEAF_NODE	408:25	408:25	12	int
NAME	408:29	408:29	10	fail
LEAF_NODE	408:29	408:29	11	fail
LEAF_NODE	0:0	0:0	10	;
INIT	408:29	408:29	10	fail = 0
ASSIGN	408:29	408:36	11	fail = 0
LVAL	408:29	408:29	12	fail
NAME	408:29	408:29	13	fail
LEAF_NODE	408:29	408:29	14	fail
ASSIGN_OP	408:34	408:34	12	=
LEAF_NODE	408:34	408:34	13	=
RVAL	408:36	408:36	12	0
FIELD	408:36	408:36	13	0
LEAF_NODE	408:36	408:36	14	0
LEAF_NODE	408:37	408:37	9	;
EXPR_STATEMENT	409:2	409:64	8	fprintf ( stderr , "Image width and height are not specified.\n" ) ;
EXPR	409:2	409:2	9	fprintf ( stderr , "Image width and height are not specified.\n" )
FUNCTION_CALL	409:2	409:63	10	fprintf ( stderr , "Image width and height are not specified.\n" )
CALLEE	409:2	409:2	11	fprintf
LEAF_NODE	409:2	409:2	12	fprintf
LEAF_NODE	409:9	409:9	11	(
ARGUMENT	409:10	409:10	11	stderr
FIELD	409:10	409:10	12	stderr
LEAF_NODE	409:10	409:10	13	stderr
LEAF_NODE	409:16	409:16	11	,
ARGUMENT	409:18	409:18	11	"Image width and height are not specified.\n"
FIELD	409:18	409:18	12	"Image width and height are not specified.\n"
LEAF_NODE	409:18	409:18	13	"Image width and height are not specified.\n"
LEAF_NODE	409:63	409:63	11	)
LEAF_NODE	409:64	409:64	9	;
EXPR_STATEMENT	410:16	410:52	8	w = ( uint32 ) sqrt ( imagesize / longt ) ;
EXPR	410:16	410:16	9	w = ( uint32 ) sqrt ( imagesize / longt )
ASSIGN	410:16	410:20	10	w = ( uint32 ) sqrt ( imagesize / longt )
LVAL	410:16	410:16	11	w
FIELD	410:16	410:16	12	w
LEAF_NODE	410:16	410:16	13	w
ASSIGN_OP	410:18	410:18	11	=
LEAF_NODE	410:18	410:18	12	=
RVAL	410:20	410:29	11	( uint32 ) sqrt ( imagesize / longt )
LEAF_NODE	410:20	410:20	12	(
TYPE_NAME	410:21	410:21	12	uint32
LEAF_NODE	410:21	410:21	13	uint32
LEAF_NODE	410:27	410:27	12	)
FUNCTION_CALL	410:29	410:51	12	sqrt ( imagesize / longt )
CALLEE	410:29	410:29	13	sqrt
LEAF_NODE	410:29	410:29	14	sqrt
LEAF_NODE	410:33	410:33	13	(
ARGUMENT	410:34	410:46	13	imagesize / longt
FIELD	410:34	410:34	14	imagesize
LEAF_NODE	410:34	410:34	15	imagesize
LEAF_NODE	410:44	410:44	14	/
FIELD	410:46	410:46	14	longt
LEAF_NODE	410:46	410:46	15	longt
LEAF_NODE	410:51	410:51	13	)
LEAF_NODE	410:52	410:52	9	;
SELECTION	411:16	412:16	8	
KEYWORD	411:16	411:16	9	if
LEAF_NODE	411:16	411:16	10	if
LEAF_NODE	411:18	411:18	9	(
CONDITION	411:20	411:20	9	w == 0
EXPR	411:20	411:25	10	w == 0
FIELD	411:20	411:20	11	w
LEAF_NODE	411:20	411:20	12	w
EQ_OPERATOR	411:22	411:22	11	==
LEAF_NODE	411:22	411:22	12	==
FIELD	411:25	411:25	11	0
LEAF_NODE	411:25	411:25	12	0
LEAF_NODE	411:27	411:27	9	)
STATEMENTS	412:16	415:16	9	
LEAF_NODE	412:16	412:16	10	{
STATEMENTS	413:20	414:20	10	
EXPR_STATEMENT	413:20	413:62	11	fprintf ( stderr , "Too small image size.\n" ) ;
EXPR	413:20	413:20	12	fprintf ( stderr , "Too small image size.\n" )
FUNCTION_CALL	413:20	413:61	13	fprintf ( stderr , "Too small image size.\n" )
CALLEE	413:20	413:20	14	fprintf
LEAF_NODE	413:20	413:20	15	fprintf
LEAF_NODE	413:27	413:27	14	(
ARGUMENT	413:28	413:28	14	stderr
FIELD	413:28	413:28	15	stderr
LEAF_NODE	413:28	413:28	16	stderr
LEAF_NODE	413:34	413:34	14	,
ARGUMENT	413:36	413:36	14	"Too small image size.\n"
FIELD	413:36	413:36	15	"Too small image size.\n"
LEAF_NODE	413:36	413:36	16	"Too small image size.\n"
LEAF_NODE	413:61	413:61	14	)
LEAF_NODE	413:62	413:62	12	;
JUMP_STATEMENT	414:20	414:29	11	return - 1 ;
KEYWORD	414:20	414:20	12	return
LEAF_NODE	414:20	414:20	13	return
DESTINATION	414:27	414:27	12	- 1
EXPR	414:27	414:27	13	- 1
UNARY_EXPR	414:27	414:28	14	- 1
UNARY_OPERATOR	414:27	414:27	15	-
LEAF_NODE	414:27	414:27	16	-
FIELD	414:28	414:28	15	1
LEAF_NODE	414:28	414:28	16	1
LEAF_NODE	414:29	414:29	12	;
LEAF_NODE	415:16	415:16	10	}
ITERATION	417:2	419:12	8	
KEYWORD	417:2	417:2	9	for
LEAF_NODE	417:2	417:2	10	for
LEAF_NODE	417:6	417:6	9	(
FOR_INIT	417:7	417:7	9	;
LEAF_NODE	417:7	417:7	10	;
CONDITION	418:7	418:7	9	w < sqrt ( imagesize * longt )
EXPR	418:7	418:11	10	w < sqrt ( imagesize * longt )
FIELD	418:7	418:7	11	w
LEAF_NODE	418:7	418:7	12	w
REL_OPERATOR	418:9	418:9	11	<
LEAF_NODE	418:9	418:9	12	<
FUNCTION_CALL	418:11	418:33	11	sqrt ( imagesize * longt )
CALLEE	418:11	418:11	12	sqrt
LEAF_NODE	418:11	418:11	13	sqrt
LEAF_NODE	418:15	418:15	12	(
ARGUMENT	418:16	418:28	12	imagesize * longt
FIELD	418:16	418:16	13	imagesize
LEAF_NODE	418:16	418:16	14	imagesize
LEAF_NODE	418:26	418:26	13	*
FIELD	418:28	418:28	13	longt
LEAF_NODE	418:28	418:28	14	longt
LEAF_NODE	418:33	418:33	12	)
LEAF_NODE	418:34	418:34	9	;
FOR_EXPR	419:7	419:7	9	w ++
EXPR	419:7	419:7	10	w ++
FIELD	419:7	419:8	11	w ++
LEAF_NODE	419:7	419:7	12	w
LEAF_NODE	419:8	419:8	12	++
LEAF_NODE	419:10	419:10	9	)
STATEMENTS	419:12	459:2	9	
LEAF_NODE	419:12	419:12	10	{
STATEMENTS	420:3	420:3	10	
SELECTION	420:3	420:27	11	
KEYWORD	420:3	420:3	12	if
LEAF_NODE	420:3	420:3	13	if
LEAF_NODE	420:6	420:6	12	(
CONDITION	420:7	420:7	12	imagesize % w == 0
EXPR	420:7	420:24	13	imagesize % w == 0
FIELD	420:7	420:7	14	imagesize
LEAF_NODE	420:7	420:7	15	imagesize
LEAF_NODE	420:17	420:17	14	%
FIELD	420:19	420:19	14	w
LEAF_NODE	420:19	420:19	15	w
EQ_OPERATOR	420:21	420:21	14	==
LEAF_NODE	420:21	420:21	15	==
FIELD	420:24	420:24	14	0
LEAF_NODE	420:24	420:24	15	0
LEAF_NODE	420:25	420:25	12	)
STATEMENTS	420:27	458:3	12	
LEAF_NODE	420:27	420:27	13	{
STATEMENTS	421:4	457:4	13	
EXPR_STATEMENT	421:4	421:28	14	scanlinesize = w * depth ;
EXPR	421:4	421:4	15	scanlinesize = w * depth
ASSIGN	421:4	421:19	16	scanlinesize = w * depth
LVAL	421:4	421:4	17	scanlinesize
FIELD	421:4	421:4	18	scanlinesize
LEAF_NODE	421:4	421:4	19	scanlinesize
ASSIGN_OP	421:17	421:17	17	=
LEAF_NODE	421:17	421:17	18	=
RVAL	421:19	421:23	17	w * depth
FIELD	421:19	421:19	18	w
LEAF_NODE	421:19	421:19	19	w
LEAF_NODE	421:21	421:21	18	*
FIELD	421:23	421:23	18	depth
LEAF_NODE	421:23	421:23	19	depth
LEAF_NODE	421:28	421:28	15	;
EXPR_STATEMENT	422:4	422:36	14	buf1 = _TIFFmalloc ( scanlinesize ) ;
EXPR	422:4	422:4	15	buf1 = _TIFFmalloc ( scanlinesize )
ASSIGN	422:4	422:11	16	buf1 = _TIFFmalloc ( scanlinesize )
LVAL	422:4	422:4	17	buf1
FIELD	422:4	422:4	18	buf1
LEAF_NODE	422:4	422:4	19	buf1
ASSIGN_OP	422:9	422:9	17	=
LEAF_NODE	422:9	422:9	18	=
RVAL	422:11	422:11	17	_TIFFmalloc ( scanlinesize )
FUNCTION_CALL	422:11	422:35	18	_TIFFmalloc ( scanlinesize )
CALLEE	422:11	422:11	19	_TIFFmalloc
LEAF_NODE	422:11	422:11	20	_TIFFmalloc
LEAF_NODE	422:22	422:22	19	(
ARGUMENT	422:23	422:23	19	scanlinesize
FIELD	422:23	422:23	20	scanlinesize
LEAF_NODE	422:23	422:23	21	scanlinesize
LEAF_NODE	422:35	422:35	19	)
LEAF_NODE	422:36	422:36	15	;
EXPR_STATEMENT	423:4	423:36	14	buf2 = _TIFFmalloc ( scanlinesize ) ;
EXPR	423:4	423:4	15	buf2 = _TIFFmalloc ( scanlinesize )
ASSIGN	423:4	423:11	16	buf2 = _TIFFmalloc ( scanlinesize )
LVAL	423:4	423:4	17	buf2
FIELD	423:4	423:4	18	buf2
LEAF_NODE	423:4	423:4	19	buf2
ASSIGN_OP	423:9	423:9	17	=
LEAF_NODE	423:9	423:9	18	=
RVAL	423:11	423:11	17	_TIFFmalloc ( scanlinesize )
FUNCTION_CALL	423:11	423:35	18	_TIFFmalloc ( scanlinesize )
CALLEE	423:11	423:11	19	_TIFFmalloc
LEAF_NODE	423:11	423:11	20	_TIFFmalloc
LEAF_NODE	423:22	423:22	19	(
ARGUMENT	423:23	423:23	19	scanlinesize
FIELD	423:23	423:23	20	scanlinesize
LEAF_NODE	423:23	423:23	21	scanlinesize
LEAF_NODE	423:35	423:35	19	)
LEAF_NODE	423:36	423:36	15	;
EXPR_STATEMENT	424:4	424:21	14	h = imagesize / w ;
EXPR	424:4	424:4	15	h = imagesize / w
ASSIGN	424:4	424:8	16	h = imagesize / w
LVAL	424:4	424:4	17	h
FIELD	424:4	424:4	18	h
LEAF_NODE	424:4	424:4	19	h
ASSIGN_OP	424:6	424:6	17	=
LEAF_NODE	424:6	424:6	18	=
RVAL	424:8	424:20	17	imagesize / w
FIELD	424:8	424:8	18	imagesize
LEAF_NODE	424:8	424:8	19	imagesize
LEAF_NODE	424:18	424:18	18	/
FIELD	424:20	424:20	18	w
LEAF_NODE	424:20	424:20	19	w
LEAF_NODE	424:21	424:21	15	;
ITERATION	425:32	425:35	14	
KEYWORD	425:32	425:32	15	do
LEAF_NODE	425:32	425:32	16	do
LEAF_NODE	454:40	454:40	15	(
CONDITION	454:41	454:41	15	0
EXPR	454:41	454:41	16	0
FIELD	454:41	454:41	17	0
LEAF_NODE	454:41	454:41	18	0
LEAF_NODE	454:42	454:42	15	)
STATEMENTS	425:35	454:32	15	
LEAF_NODE	425:35	425:35	16	{
STATEMENTS	426:40	450:40	16	
SELECTION	426:40	427:80	17	
KEYWORD	426:40	426:40	18	if
LEAF_NODE	426:40	426:40	19	if
LEAF_NODE	426:43	426:43	18	(
CONDITION	426:44	426:44	18	_TIFF_lseek_f ( fd , hdr_size + ( int ) ( h / 2 ) * scanlinesize , SEEK_SET ) == ( _TIFF_off_t ) - 1
EXPR	426:44	427:76	19	_TIFF_lseek_f ( fd , hdr_size + ( int ) ( h / 2 ) * scanlinesize , SEEK_SET ) == ( _TIFF_off_t ) - 1
FUNCTION_CALL	426:44	427:58	20	_TIFF_lseek_f ( fd , hdr_size + ( int ) ( h / 2 ) * scanlinesize , SEEK_SET )
CALLEE	426:44	426:44	21	_TIFF_lseek_f
LEAF_NODE	426:44	426:44	22	_TIFF_lseek_f
LEAF_NODE	426:57	426:57	21	(
ARGUMENT	426:58	426:58	21	fd
FIELD	426:58	426:58	22	fd
LEAF_NODE	426:58	426:58	23	fd
LEAF_NODE	426:60	426:60	21	,
ARGUMENT	426:62	426:84	21	hdr_size + ( int ) ( h / 2 ) * scanlinesize
FIELD	426:62	426:62	22	hdr_size
LEAF_NODE	426:62	426:62	23	hdr_size
LEAF_NODE	426:71	426:71	22	+
LEAF_NODE	426:73	426:73	22	(
TYPE_NAME	426:74	426:74	22	int
LEAF_NODE	426:74	426:74	23	int
LEAF_NODE	426:77	426:77	22	)
LEAF_NODE	426:78	426:78	22	(
FIELD	426:79	426:79	22	h
LEAF_NODE	426:79	426:79	23	h
LEAF_NODE	426:80	426:80	22	/
FIELD	426:81	426:81	22	2
LEAF_NODE	426:81	426:81	23	2
LEAF_NODE	426:82	426:82	22	)
LEAF_NODE	426:83	426:83	22	*
FIELD	426:84	426:84	22	scanlinesize
LEAF_NODE	426:84	426:84	23	scanlinesize
LEAF_NODE	426:96	426:96	21	,
ARGUMENT	427:50	427:50	21	SEEK_SET
FIELD	427:50	427:50	22	SEEK_SET
LEAF_NODE	427:50	427:50	23	SEEK_SET
LEAF_NODE	427:58	427:58	21	)
EQ_OPERATOR	427:60	427:60	20	==
LEAF_NODE	427:60	427:60	21	==
LEAF_NODE	427:63	427:63	20	(
TYPE_NAME	427:64	427:64	20	_TIFF_off_t
LEAF_NODE	427:64	427:64	21	_TIFF_off_t
LEAF_NODE	427:75	427:75	20	)
UNARY_EXPR	427:76	427:77	20	- 1
UNARY_OPERATOR	427:76	427:76	21	-
LEAF_NODE	427:76	427:76	22	-
FIELD	427:77	427:77	21	1
LEAF_NODE	427:77	427:77	22	1
LEAF_NODE	427:78	427:78	18	)
STATEMENTS	427:80	431:40	18	
LEAF_NODE	427:80	427:80	19	{
STATEMENTS	428:48	430:48	19	
EXPR_STATEMENT	428:48	428:80	20	fprintf ( stderr , "seek error.\n" ) ;
EXPR	428:48	428:48	21	fprintf ( stderr , "seek error.\n" )
FUNCTION_CALL	428:48	428:79	22	fprintf ( stderr , "seek error.\n" )
CALLEE	428:48	428:48	23	fprintf
LEAF_NODE	428:48	428:48	24	fprintf
LEAF_NODE	428:55	428:55	23	(
ARGUMENT	428:56	428:56	23	stderr
FIELD	428:56	428:56	24	stderr
LEAF_NODE	428:56	428:56	25	stderr
LEAF_NODE	428:62	428:62	23	,
ARGUMENT	428:64	428:64	23	"seek error.\n"
FIELD	428:64	428:64	24	"seek error.\n"
LEAF_NODE	428:64	428:64	25	"seek error.\n"
LEAF_NODE	428:79	428:79	23	)
LEAF_NODE	428:80	428:80	21	;
EXPR_STATEMENT	429:48	429:54	20	fail = 1 ;
EXPR	429:48	429:48	21	fail = 1
ASSIGN	429:48	429:53	22	fail = 1
LVAL	429:48	429:48	23	fail
FIELD	429:48	429:48	24	fail
LEAF_NODE	429:48	429:48	25	fail
ASSIGN_OP	429:52	429:52	23	=
LEAF_NODE	429:52	429:52	24	=
RVAL	429:53	429:53	23	1
FIELD	429:53	429:53	24	1
LEAF_NODE	429:53	429:53	25	1
LEAF_NODE	429:54	429:54	21	;
JUMP_STATEMENT	430:48	430:53	20	break DESTINATION ;
KEYWORD	430:48	430:48	21	break
LEAF_NODE	430:48	430:48	22	break
LEAF_NODE	0:0	0:0	21	DESTINATION
LEAF_NODE	430:53	430:53	21	;
LEAF_NODE	431:40	431:40	19	}
SELECTION	432:40	433:65	17	
KEYWORD	432:40	432:40	18	if
LEAF_NODE	432:40	432:40	19	if
LEAF_NODE	432:43	432:43	18	(
CONDITION	432:44	432:44	18	read ( fd , buf1 , scanlinesize ) != ( long ) scanlinesize
EXPR	432:44	433:51	19	read ( fd , buf1 , scanlinesize ) != ( long ) scanlinesize
FUNCTION_CALL	432:44	432:71	20	read ( fd , buf1 , scanlinesize )
CALLEE	432:44	432:44	21	read
LEAF_NODE	432:44	432:44	22	read
LEAF_NODE	432:48	432:48	21	(
ARGUMENT	432:49	432:49	21	fd
FIELD	432:49	432:49	22	fd
LEAF_NODE	432:49	432:49	23	fd
LEAF_NODE	432:51	432:51	21	,
ARGUMENT	432:53	432:53	21	buf1
FIELD	432:53	432:53	22	buf1
LEAF_NODE	432:53	432:53	23	buf1
LEAF_NODE	432:57	432:57	21	,
ARGUMENT	432:59	432:59	21	scanlinesize
FIELD	432:59	432:59	22	scanlinesize
LEAF_NODE	432:59	432:59	23	scanlinesize
LEAF_NODE	432:71	432:71	21	)
EQ_OPERATOR	432:73	432:73	20	!=
LEAF_NODE	432:73	432:73	21	!=
LEAF_NODE	433:44	433:44	20	(
TYPE_NAME	433:45	433:45	20	long
LEAF_NODE	433:45	433:45	21	long
LEAF_NODE	433:49	433:49	20	)
FIELD	433:51	433:51	20	scanlinesize
LEAF_NODE	433:51	433:51	21	scanlinesize
LEAF_NODE	433:63	433:63	18	)
STATEMENTS	433:65	437:40	18	
LEAF_NODE	433:65	433:65	19	{
STATEMENTS	434:48	436:48	19	
EXPR_STATEMENT	434:48	434:80	20	fprintf ( stderr , "read error.\n" ) ;
EXPR	434:48	434:48	21	fprintf ( stderr , "read error.\n" )
FUNCTION_CALL	434:48	434:79	22	fprintf ( stderr , "read error.\n" )
CALLEE	434:48	434:48	23	fprintf
LEAF_NODE	434:48	434:48	24	fprintf
LEAF_NODE	434:55	434:55	23	(
ARGUMENT	434:56	434:56	23	stderr
FIELD	434:56	434:56	24	stderr
LEAF_NODE	434:56	434:56	25	stderr
LEAF_NODE	434:62	434:62	23	,
ARGUMENT	434:64	434:64	23	"read error.\n"
FIELD	434:64	434:64	24	"read error.\n"
LEAF_NODE	434:64	434:64	25	"read error.\n"
LEAF_NODE	434:79	434:79	23	)
LEAF_NODE	434:80	434:80	21	;
EXPR_STATEMENT	435:48	435:54	20	fail = 1 ;
EXPR	435:48	435:48	21	fail = 1
ASSIGN	435:48	435:53	22	fail = 1
LVAL	435:48	435:48	23	fail
FIELD	435:48	435:48	24	fail
LEAF_NODE	435:48	435:48	25	fail
ASSIGN_OP	435:52	435:52	23	=
LEAF_NODE	435:52	435:52	24	=
RVAL	435:53	435:53	23	1
FIELD	435:53	435:53	24	1
LEAF_NODE	435:53	435:53	25	1
LEAF_NODE	435:54	435:54	21	;
JUMP_STATEMENT	436:48	436:53	20	break DESTINATION ;
KEYWORD	436:48	436:48	21	break
LEAF_NODE	436:48	436:48	22	break
LEAF_NODE	0:0	0:0	21	DESTINATION
LEAF_NODE	436:53	436:53	21	;
LEAF_NODE	437:40	437:40	19	}
SELECTION	438:40	439:65	17	
KEYWORD	438:40	438:40	18	if
LEAF_NODE	438:40	438:40	19	if
LEAF_NODE	438:43	438:43	18	(
CONDITION	438:44	438:44	18	read ( fd , buf2 , scanlinesize ) != ( long ) scanlinesize
EXPR	438:44	439:51	19	read ( fd , buf2 , scanlinesize ) != ( long ) scanlinesize
FUNCTION_CALL	438:44	438:71	20	read ( fd , buf2 , scanlinesize )
CALLEE	438:44	438:44	21	read
LEAF_NODE	438:44	438:44	22	read
LEAF_NODE	438:48	438:48	21	(
ARGUMENT	438:49	438:49	21	fd
FIELD	438:49	438:49	22	fd
LEAF_NODE	438:49	438:49	23	fd
LEAF_NODE	438:51	438:51	21	,
ARGUMENT	438:53	438:53	21	buf2
FIELD	438:53	438:53	22	buf2
LEAF_NODE	438:53	438:53	23	buf2
LEAF_NODE	438:57	438:57	21	,
ARGUMENT	438:59	438:59	21	scanlinesize
FIELD	438:59	438:59	22	scanlinesize
LEAF_NODE	438:59	438:59	23	scanlinesize
LEAF_NODE	438:71	438:71	21	)
EQ_OPERATOR	438:73	438:73	20	!=
LEAF_NODE	438:73	438:73	21	!=
LEAF_NODE	439:44	439:44	20	(
TYPE_NAME	439:45	439:45	20	long
LEAF_NODE	439:45	439:45	21	long
LEAF_NODE	439:49	439:49	20	)
FIELD	439:51	439:51	20	scanlinesize
LEAF_NODE	439:51	439:51	21	scanlinesize
LEAF_NODE	439:63	439:63	18	)
STATEMENTS	439:65	443:40	18	
LEAF_NODE	439:65	439:65	19	{
STATEMENTS	440:48	442:48	19	
EXPR_STATEMENT	440:48	440:80	20	fprintf ( stderr , "read error.\n" ) ;
EXPR	440:48	440:48	21	fprintf ( stderr , "read error.\n" )
FUNCTION_CALL	440:48	440:79	22	fprintf ( stderr , "read error.\n" )
CALLEE	440:48	440:48	23	fprintf
LEAF_NODE	440:48	440:48	24	fprintf
LEAF_NODE	440:55	440:55	23	(
ARGUMENT	440:56	440:56	23	stderr
FIELD	440:56	440:56	24	stderr
LEAF_NODE	440:56	440:56	25	stderr
LEAF_NODE	440:62	440:62	23	,
ARGUMENT	440:64	440:64	23	"read error.\n"
FIELD	440:64	440:64	24	"read error.\n"
LEAF_NODE	440:64	440:64	25	"read error.\n"
LEAF_NODE	440:79	440:79	23	)
LEAF_NODE	440:80	440:80	21	;
EXPR_STATEMENT	441:48	441:54	20	fail = 1 ;
EXPR	441:48	441:48	21	fail = 1
ASSIGN	441:48	441:53	22	fail = 1
LVAL	441:48	441:48	23	fail
FIELD	441:48	441:48	24	fail
LEAF_NODE	441:48	441:48	25	fail
ASSIGN_OP	441:52	441:52	23	=
LEAF_NODE	441:52	441:52	24	=
RVAL	441:53	441:53	23	1
FIELD	441:53	441:53	24	1
LEAF_NODE	441:53	441:53	25	1
LEAF_NODE	441:54	441:54	21	;
JUMP_STATEMENT	442:48	442:53	20	break DESTINATION ;
KEYWORD	442:48	442:48	21	break
LEAF_NODE	442:48	442:48	22	break
LEAF_NODE	0:0	0:0	21	DESTINATION
LEAF_NODE	442:53	442:53	21	;
LEAF_NODE	443:40	443:40	19	}
SELECTION	444:40	444:50	17	
KEYWORD	444:40	444:40	18	if
LEAF_NODE	444:40	444:40	19	if
LEAF_NODE	444:43	444:43	18	(
CONDITION	444:44	444:44	18	swab
EXPR	444:44	444:44	19	swab
FIELD	444:44	444:44	20	swab
LEAF_NODE	444:44	444:44	21	swab
LEAF_NODE	444:48	444:48	18	)
STATEMENTS	444:50	447:40	18	
LEAF_NODE	444:50	444:50	19	{
STATEMENTS	445:48	446:48	19	
EXPR_STATEMENT	445:48	445:83	20	swapBytesInScanline ( buf1 , w , dtype ) ;
EXPR	445:48	445:48	21	swapBytesInScanline ( buf1 , w , dtype )
FUNCTION_CALL	445:48	445:82	22	swapBytesInScanline ( buf1 , w , dtype )
CALLEE	445:48	445:48	23	swapBytesInScanline
LEAF_NODE	445:48	445:48	24	swapBytesInScanline
LEAF_NODE	445:67	445:67	23	(
ARGUMENT	445:68	445:68	23	buf1
FIELD	445:68	445:68	24	buf1
LEAF_NODE	445:68	445:68	25	buf1
LEAF_NODE	445:72	445:72	23	,
ARGUMENT	445:74	445:74	23	w
FIELD	445:74	445:74	24	w
LEAF_NODE	445:74	445:74	25	w
LEAF_NODE	445:75	445:75	23	,
ARGUMENT	445:77	445:77	23	dtype
FIELD	445:77	445:77	24	dtype
LEAF_NODE	445:77	445:77	25	dtype
LEAF_NODE	445:82	445:82	23	)
LEAF_NODE	445:83	445:83	21	;
EXPR_STATEMENT	446:48	446:83	20	swapBytesInScanline ( buf2 , w , dtype ) ;
EXPR	446:48	446:48	21	swapBytesInScanline ( buf2 , w , dtype )
FUNCTION_CALL	446:48	446:82	22	swapBytesInScanline ( buf2 , w , dtype )
CALLEE	446:48	446:48	23	swapBytesInScanline
LEAF_NODE	446:48	446:48	24	swapBytesInScanline
LEAF_NODE	446:67	446:67	23	(
ARGUMENT	446:68	446:68	23	buf2
FIELD	446:68	446:68	24	buf2
LEAF_NODE	446:68	446:68	25	buf2
LEAF_NODE	446:72	446:72	23	,
ARGUMENT	446:74	446:74	23	w
FIELD	446:74	446:74	24	w
LEAF_NODE	446:74	446:74	25	w
LEAF_NODE	446:75	446:75	23	,
ARGUMENT	446:77	446:77	23	dtype
FIELD	446:77	446:77	24	dtype
LEAF_NODE	446:77	446:77	25	dtype
LEAF_NODE	446:82	446:82	23	)
LEAF_NODE	446:83	446:83	21	;
LEAF_NODE	447:40	447:40	19	}
EXPR_STATEMENT	448:40	449:81	17	tmp = ( float ) fabs ( correlation ( buf1 , buf2 , w , dtype ) ) ;
EXPR	448:40	448:40	18	tmp = ( float ) fabs ( correlation ( buf1 , buf2 , w , dtype ) )
ASSIGN	448:40	448:46	19	tmp = ( float ) fabs ( correlation ( buf1 , buf2 , w , dtype ) )
LVAL	448:40	448:40	20	tmp
FIELD	448:40	448:40	21	tmp
LEAF_NODE	448:40	448:40	22	tmp
ASSIGN_OP	448:44	448:44	20	=
LEAF_NODE	448:44	448:44	21	=
RVAL	448:46	448:54	20	( float ) fabs ( correlation ( buf1 , buf2 , w , dtype ) )
LEAF_NODE	448:46	448:46	21	(
TYPE_NAME	448:47	448:47	21	float
LEAF_NODE	448:47	448:47	22	float
LEAF_NODE	448:52	448:52	21	)
FUNCTION_CALL	448:54	449:80	21	fabs ( correlation ( buf1 , buf2 , w , dtype ) )
CALLEE	448:54	448:54	22	fabs
LEAF_NODE	448:54	448:54	23	fabs
LEAF_NODE	448:58	448:58	22	(
ARGUMENT	448:59	448:59	22	correlation ( buf1 , buf2 , w , dtype )
FUNCTION_CALL	448:59	449:79	23	correlation ( buf1 , buf2 , w , dtype )
CALLEE	448:59	448:59	24	correlation
LEAF_NODE	448:59	448:59	25	correlation
LEAF_NODE	448:70	448:70	24	(
ARGUMENT	448:71	448:71	24	buf1
FIELD	448:71	448:71	25	buf1
LEAF_NODE	448:71	448:71	26	buf1
LEAF_NODE	448:75	448:75	24	,
ARGUMENT	448:77	448:77	24	buf2
FIELD	448:77	448:77	25	buf2
LEAF_NODE	448:77	448:77	26	buf2
LEAF_NODE	448:81	448:81	24	,
ARGUMENT	449:71	449:71	24	w
FIELD	449:71	449:71	25	w
LEAF_NODE	449:71	449:71	26	w
LEAF_NODE	449:72	449:72	24	,
ARGUMENT	449:74	449:74	24	dtype
FIELD	449:74	449:74	25	dtype
LEAF_NODE	449:74	449:74	26	dtype
LEAF_NODE	449:79	449:79	24	)
LEAF_NODE	449:80	449:80	22	)
LEAF_NODE	449:81	449:81	18	;
SELECTION	450:40	450:60	17	
KEYWORD	450:40	450:40	18	if
LEAF_NODE	450:40	450:40	19	if
LEAF_NODE	450:43	450:43	18	(
CONDITION	450:44	450:44	18	tmp > cor_coef
EXPR	450:44	450:50	19	tmp > cor_coef
FIELD	450:44	450:44	20	tmp
LEAF_NODE	450:44	450:44	21	tmp
REL_OPERATOR	450:48	450:48	20	>
LEAF_NODE	450:48	450:48	21	>
FIELD	450:50	450:50	20	cor_coef
LEAF_NODE	450:50	450:50	21	cor_coef
LEAF_NODE	450:58	450:58	18	)
STATEMENTS	450:60	453:40	18	
LEAF_NODE	450:60	450:60	19	{
STATEMENTS	451:48	452:48	19	
EXPR_STATEMENT	451:48	451:62	20	cor_coef = tmp ;
EXPR	451:48	451:48	21	cor_coef = tmp
ASSIGN	451:48	451:59	22	cor_coef = tmp
LVAL	451:48	451:48	23	cor_coef
FIELD	451:48	451:48	24	cor_coef
LEAF_NODE	451:48	451:48	25	cor_coef
ASSIGN_OP	451:57	451:57	23	=
LEAF_NODE	451:57	451:57	24	=
RVAL	451:59	451:59	23	tmp
FIELD	451:59	451:59	24	tmp
LEAF_NODE	451:59	451:59	25	tmp
LEAF_NODE	451:62	451:62	21	;
EXPR_STATEMENT	452:48	452:71	20	* width = w , * length = h ;
EXPR	452:48	452:60	21	* width = w , * length = h
ASSIGN	452:48	452:57	22	* width = w
LVAL	452:48	452:48	23	* width
UNARY_EXPR	452:48	452:49	24	* width
UNARY_OPERATOR	452:48	452:48	25	*
LEAF_NODE	452:48	452:48	26	*
FIELD	452:49	452:49	25	width
LEAF_NODE	452:49	452:49	26	width
ASSIGN_OP	452:55	452:55	23	=
LEAF_NODE	452:55	452:55	24	=
RVAL	452:57	452:57	23	w
FIELD	452:57	452:57	24	w
LEAF_NODE	452:57	452:57	25	w
LEAF_NODE	452:58	452:58	22	,
ASSIGN	452:60	452:70	22	* length = h
LVAL	452:60	452:60	23	* length
UNARY_EXPR	452:60	452:61	24	* length
UNARY_OPERATOR	452:60	452:60	25	*
LEAF_NODE	452:60	452:60	26	*
FIELD	452:61	452:61	25	length
LEAF_NODE	452:61	452:61	26	length
ASSIGN_OP	452:68	452:68	23	=
LEAF_NODE	452:68	452:68	24	=
RVAL	452:70	452:70	23	h
FIELD	452:70	452:70	24	h
LEAF_NODE	452:70	452:70	25	h
LEAF_NODE	452:71	452:71	21	;
LEAF_NODE	453:40	453:40	19	}
LEAF_NODE	454:32	454:32	16	}
LEAF_NODE	454:43	454:43	14	;
EXPR_STATEMENT	456:32	456:47	14	_TIFFfree ( buf1 ) ;
EXPR	456:32	456:32	15	_TIFFfree ( buf1 )
FUNCTION_CALL	456:32	456:46	16	_TIFFfree ( buf1 )
CALLEE	456:32	456:32	17	_TIFFfree
LEAF_NODE	456:32	456:32	18	_TIFFfree
LEAF_NODE	456:41	456:41	17	(
ARGUMENT	456:42	456:42	17	buf1
FIELD	456:42	456:42	18	buf1
LEAF_NODE	456:42	456:42	19	buf1
LEAF_NODE	456:46	456:46	17	)
LEAF_NODE	456:47	456:47	15	;
EXPR_STATEMENT	457:4	457:19	14	_TIFFfree ( buf2 ) ;
EXPR	457:4	457:4	15	_TIFFfree ( buf2 )
FUNCTION_CALL	457:4	457:18	16	_TIFFfree ( buf2 )
CALLEE	457:4	457:4	17	_TIFFfree
LEAF_NODE	457:4	457:4	18	_TIFFfree
LEAF_NODE	457:13	457:13	17	(
ARGUMENT	457:14	457:14	17	buf2
FIELD	457:14	457:14	18	buf2
LEAF_NODE	457:14	457:14	19	buf2
LEAF_NODE	457:18	457:18	17	)
LEAF_NODE	457:19	457:19	15	;
LEAF_NODE	458:3	458:3	13	}
LEAF_NODE	459:2	459:2	10	}
SELECTION	461:16	461:26	8	
KEYWORD	461:16	461:16	9	if
LEAF_NODE	461:16	461:16	10	if
LEAF_NODE	461:19	461:19	9	(
CONDITION	461:20	461:20	9	fail
EXPR	461:20	461:20	10	fail
FIELD	461:20	461:20	11	fail
LEAF_NODE	461:20	461:20	12	fail
LEAF_NODE	461:24	461:24	9	)
STATEMENTS	461:26	463:16	9	
LEAF_NODE	461:26	461:26	10	{
STATEMENTS	462:24	462:24	10	
JUMP_STATEMENT	462:24	462:33	11	return - 1 ;
KEYWORD	462:24	462:24	12	return
LEAF_NODE	462:24	462:24	13	return
DESTINATION	462:31	462:31	12	- 1
EXPR	462:31	462:31	13	- 1
UNARY_EXPR	462:31	462:32	14	- 1
UNARY_OPERATOR	462:31	462:31	15	-
LEAF_NODE	462:31	462:31	16	-
FIELD	462:32	462:32	15	1
LEAF_NODE	462:32	462:32	16	1
LEAF_NODE	462:33	462:33	12	;
LEAF_NODE	463:16	463:16	10	}
EXPR_STATEMENT	465:2	467:49	8	fprintf ( stderr , "Width is guessed as %lu, height is guessed as %lu.\n" , ( unsigned long ) * width , ( unsigned long ) * length ) ;
EXPR	465:2	465:2	9	fprintf ( stderr , "Width is guessed as %lu, height is guessed as %lu.\n" , ( unsigned long ) * width , ( unsigned long ) * length )
FUNCTION_CALL	465:2	467:48	10	fprintf ( stderr , "Width is guessed as %lu, height is guessed as %lu.\n" , ( unsigned long ) * width , ( unsigned long ) * length )
CALLEE	465:2	465:2	11	fprintf
LEAF_NODE	465:2	465:2	12	fprintf
LEAF_NODE	465:9	465:9	11	(
ARGUMENT	465:10	465:10	11	stderr
FIELD	465:10	465:10	12	stderr
LEAF_NODE	465:10	465:10	13	stderr
LEAF_NODE	465:16	465:16	11	,
ARGUMENT	466:3	466:3	11	"Width is guessed as %lu, height is guessed as %lu.\n"
FIELD	466:3	466:3	12	"Width is guessed as %lu, height is guessed as %lu.\n"
LEAF_NODE	466:3	466:3	13	"Width is guessed as %lu, height is guessed as %lu.\n"
LEAF_NODE	466:57	466:57	11	,
ARGUMENT	467:3	467:18	11	( unsigned long ) * width
LEAF_NODE	467:3	467:3	12	(
TYPE_NAME	467:4	467:13	12	unsigned long
LEAF_NODE	467:4	467:4	13	unsigned
LEAF_NODE	467:13	467:13	13	long
LEAF_NODE	467:17	467:17	12	)
UNARY_EXPR	467:18	467:19	12	* width
UNARY_OPERATOR	467:18	467:18	13	*
LEAF_NODE	467:18	467:18	14	*
FIELD	467:19	467:19	13	width
LEAF_NODE	467:19	467:19	14	width
LEAF_NODE	467:24	467:24	11	,
ARGUMENT	467:26	467:41	11	( unsigned long ) * length
LEAF_NODE	467:26	467:26	12	(
TYPE_NAME	467:27	467:36	12	unsigned long
LEAF_NODE	467:27	467:27	13	unsigned
LEAF_NODE	467:36	467:36	13	long
LEAF_NODE	467:40	467:40	12	)
UNARY_EXPR	467:41	467:42	12	* length
UNARY_OPERATOR	467:41	467:41	13	*
LEAF_NODE	467:41	467:41	14	*
FIELD	467:42	467:42	13	length
LEAF_NODE	467:42	467:42	14	length
LEAF_NODE	467:48	467:48	11	)
LEAF_NODE	467:49	467:49	9	;
JUMP_STATEMENT	469:2	469:10	8	return 1 ;
KEYWORD	469:2	469:2	9	return
LEAF_NODE	469:2	469:2	10	return
DESTINATION	469:9	469:9	9	1
EXPR	469:9	469:9	10	1
FIELD	469:9	469:9	11	1
LEAF_NODE	469:9	469:9	12	1
LEAF_NODE	469:10	469:10	9	;
LEAF_NODE	470:1	470:1	7	}
SELECTION	470:3	470:8	3	
KEYWORD	470:3	470:3	4	else
LEAF_NODE	470:3	470:3	5	else
STATEMENTS	470:8	475:1	4	
LEAF_NODE	470:8	470:8	5	{
STATEMENTS	471:2	474:2	5	
LEAF_NODE	471:2	471:2	6	if
LEAF_NODE	471:5	471:5	6	(
LEAF_NODE	471:6	471:6	6	filestat
LEAF_NODE	471:14	471:14	6	.
LEAF_NODE	471:15	471:15	6	st_size
LEAF_NODE	471:22	471:22	6	<
LEAF_NODE	471:23	471:23	6	(
LEAF_NODE	471:24	471:24	6	_TIFF_off_t
LEAF_NODE	471:35	471:35	6	)
LEAF_NODE	471:36	471:36	6	(
LEAF_NODE	471:37	471:37	6	hdr_size
LEAF_NODE	471:45	471:45	6	+
LEAF_NODE	471:46	471:46	6	(
LEAF_NODE	471:47	471:47	6	*
LEAF_NODE	471:48	471:48	6	width
LEAF_NODE	471:53	471:53	6	)
LEAF_NODE	471:54	471:54	6	*
LEAF_NODE	471:55	471:55	6	(
LEAF_NODE	471:56	471:56	6	*
LEAF_NODE	471:57	471:57	6	length
LEAF_NODE	471:63	471:63	6	)
LEAF_NODE	471:64	471:64	6	*
LEAF_NODE	471:65	471:65	6	nbands
LEAF_NODE	471:71	471:71	6	*
LEAF_NODE	471:72	471:72	6	depth
LEAF_NODE	471:77	471:77	6	)
LEAF_NODE	471:78	471:78	6	)
LEAF_NODE	471:80	471:80	6	{
STATEMENTS	472:3	473:2	6	
EXPR_STATEMENT	472:3	472:45	7	fprintf ( stderr , "Input file too small.\n" ) ;
EXPR	472:3	472:3	8	fprintf ( stderr , "Input file too small.\n" )
FUNCTION_CALL	472:3	472:44	9	fprintf ( stderr , "Input file too small.\n" )
CALLEE	472:3	472:3	10	fprintf
LEAF_NODE	472:3	472:3	11	fprintf
LEAF_NODE	472:10	472:10	10	(
ARGUMENT	472:11	472:11	10	stderr
FIELD	472:11	472:11	11	stderr
LEAF_NODE	472:11	472:11	12	stderr
LEAF_NODE	472:17	472:17	10	,
ARGUMENT	472:19	472:19	10	"Input file too small.\n"
FIELD	472:19	472:19	11	"Input file too small.\n"
LEAF_NODE	472:19	472:19	12	"Input file too small.\n"
LEAF_NODE	472:44	472:44	10	)
LEAF_NODE	472:45	472:45	8	;
JUMP_STATEMENT	473:2	473:11	7	return - 1 ;
KEYWORD	473:2	473:2	8	return
LEAF_NODE	473:2	473:2	9	return
DESTINATION	473:9	473:9	8	- 1
EXPR	473:9	473:9	9	- 1
UNARY_EXPR	473:9	473:10	10	- 1
UNARY_OPERATOR	473:9	473:9	11	-
LEAF_NODE	473:9	473:9	12	-
FIELD	473:10	473:10	11	1
LEAF_NODE	473:10	473:10	12	1
LEAF_NODE	473:11	473:11	8	;
LEAF_NODE	474:2	474:2	6	}
LEAF_NODE	475:1	475:1	5	}
JUMP_STATEMENT	477:1	477:9	3	return 1 ;
KEYWORD	477:1	477:1	4	return
LEAF_NODE	477:1	477:1	5	return
DESTINATION	477:8	477:8	4	1
EXPR	477:8	477:8	5	1
FIELD	477:8	477:8	6	1
LEAF_NODE	477:8	477:8	7	1
LEAF_NODE	477:9	477:9	4	;
LEAF_NODE	478:0	478:0	2	}
FUNCTION_DEF	481:0	570:0	1	
RETURN_TYPE	481:0	481:7	2	static double
LEAF_NODE	481:0	481:0	3	static
TYPE_NAME	481:7	481:7	3	double
LEAF_NODE	481:7	481:7	4	double
FUNCTION_NAME	482:0	482:0	2	correlation
LEAF_NODE	482:0	482:0	3	correlation
PARAMETER_LIST	482:11	482:69	2	( void * buf1 , void * buf2 , uint32 n_elem , TIFFDataType dtype )
LEAF_NODE	482:11	482:11	3	(
PARAMETER_DECL	482:12	482:18	3	void * buf1
TYPE	482:12	482:17	4	void *
TYPE_NAME	482:12	482:12	5	void
LEAF_NODE	482:12	482:12	6	void
POINTER	482:17	482:17	5	*
LEAF_NODE	482:17	482:17	6	*
NAME	482:18	482:18	4	buf1
LEAF_NODE	482:18	482:18	5	buf1
LEAF_NODE	482:22	482:22	3	,
PARAMETER_DECL	482:24	482:30	3	void * buf2
TYPE	482:24	482:29	4	void *
TYPE_NAME	482:24	482:24	5	void
LEAF_NODE	482:24	482:24	6	void
POINTER	482:29	482:29	5	*
LEAF_NODE	482:29	482:29	6	*
NAME	482:30	482:30	4	buf2
LEAF_NODE	482:30	482:30	5	buf2
LEAF_NODE	482:34	482:34	3	,
PARAMETER_DECL	482:36	482:43	3	uint32 n_elem
TYPE	482:36	482:36	4	uint32
TYPE_NAME	482:36	482:36	5	uint32
LEAF_NODE	482:36	482:36	6	uint32
NAME	482:43	482:43	4	n_elem
LEAF_NODE	482:43	482:43	5	n_elem
LEAF_NODE	482:49	482:49	3	,
PARAMETER_DECL	482:51	482:64	3	TIFFDataType dtype
TYPE	482:51	482:51	4	TIFFDataType
TYPE_NAME	482:51	482:51	5	TIFFDataType
LEAF_NODE	482:51	482:51	6	TIFFDataType
NAME	482:64	482:64	4	dtype
LEAF_NODE	482:64	482:64	5	dtype
LEAF_NODE	482:69	482:69	3	)
LEAF_NODE	483:0	483:0	2	{
STATEMENTS	484:1	569:1	2	
SIMPLE_DECL	484:1	484:61	3	double X , double Y , double M1 ; M1 = 0.0 , double M2 ; M2 = 0.0 , double D1 ; D1 = 0.0 , double D2 ; D2 = 0.0 , double K ; K = 0.0 ;
INIT_DECL_LIST	484:1	484:1	4	double X , double Y , double M1 ; M1 = 0.0 , double M2 ; M2 = 0.0 , double D1 ; D1 = 0.0 , double D2 ; D2 = 0.0 , double K ; K = 0.0
VAR_DECL	484:1	484:8	5	double X
TYPE	484:1	484:1	6	double
TYPE_NAME	484:1	484:1	7	double
LEAF_NODE	484:1	484:1	8	double
NAME	484:8	484:8	6	X
LEAF_NODE	484:8	484:8	7	X
LEAF_NODE	484:9	484:9	5	,
INIT_DECL_LIST	484:1	484:1	5	double Y , double M1 ; M1 = 0.0 , double M2 ; M2 = 0.0 , double D1 ; D1 = 0.0 , double D2 ; D2 = 0.0 , double K ; K = 0.0
VAR_DECL	484:1	484:11	6	double Y
TYPE	484:1	484:1	7	double
TYPE_NAME	484:1	484:1	8	double
LEAF_NODE	484:1	484:1	9	double
NAME	484:11	484:11	7	Y
LEAF_NODE	484:11	484:11	8	Y
LEAF_NODE	484:12	484:12	6	,
INIT_DECL_LIST	484:1	484:1	6	double M1 ; M1 = 0.0 , double M2 ; M2 = 0.0 , double D1 ; D1 = 0.0 , double D2 ; D2 = 0.0 , double K ; K = 0.0
VAR_DECL	484:1	484:14	7	double M1 ; M1 = 0.0
TYPE	484:1	484:1	8	double
TYPE_NAME	484:1	484:1	9	double
LEAF_NODE	484:1	484:1	10	double
NAME	484:14	484:14	8	M1
LEAF_NODE	484:14	484:14	9	M1
LEAF_NODE	0:0	0:0	8	;
INIT	484:14	484:14	8	M1 = 0.0
ASSIGN	484:14	484:19	9	M1 = 0.0
LVAL	484:14	484:14	10	M1
NAME	484:14	484:14	11	M1
LEAF_NODE	484:14	484:14	12	M1
ASSIGN_OP	484:17	484:17	10	=
LEAF_NODE	484:17	484:17	11	=
RVAL	484:19	484:19	10	0.0
FIELD	484:19	484:19	11	0.0
LEAF_NODE	484:19	484:19	12	0.0
LEAF_NODE	484:22	484:22	7	,
INIT_DECL_LIST	484:1	484:1	7	double M2 ; M2 = 0.0 , double D1 ; D1 = 0.0 , double D2 ; D2 = 0.0 , double K ; K = 0.0
VAR_DECL	484:1	484:24	8	double M2 ; M2 = 0.0
TYPE	484:1	484:1	9	double
TYPE_NAME	484:1	484:1	10	double
LEAF_NODE	484:1	484:1	11	double
NAME	484:24	484:24	9	M2
LEAF_NODE	484:24	484:24	10	M2
LEAF_NODE	0:0	0:0	9	;
INIT	484:24	484:24	9	M2 = 0.0
ASSIGN	484:24	484:29	10	M2 = 0.0
LVAL	484:24	484:24	11	M2
NAME	484:24	484:24	12	M2
LEAF_NODE	484:24	484:24	13	M2
ASSIGN_OP	484:27	484:27	11	=
LEAF_NODE	484:27	484:27	12	=
RVAL	484:29	484:29	11	0.0
FIELD	484:29	484:29	12	0.0
LEAF_NODE	484:29	484:29	13	0.0
LEAF_NODE	484:32	484:32	8	,
INIT_DECL_LIST	484:1	484:1	8	double D1 ; D1 = 0.0 , double D2 ; D2 = 0.0 , double K ; K = 0.0
VAR_DECL	484:1	484:34	9	double D1 ; D1 = 0.0
TYPE	484:1	484:1	10	double
TYPE_NAME	484:1	484:1	11	double
LEAF_NODE	484:1	484:1	12	double
NAME	484:34	484:34	10	D1
LEAF_NODE	484:34	484:34	11	D1
LEAF_NODE	0:0	0:0	10	;
INIT	484:34	484:34	10	D1 = 0.0
ASSIGN	484:34	484:39	11	D1 = 0.0
LVAL	484:34	484:34	12	D1
NAME	484:34	484:34	13	D1
LEAF_NODE	484:34	484:34	14	D1
ASSIGN_OP	484:37	484:37	12	=
LEAF_NODE	484:37	484:37	13	=
RVAL	484:39	484:39	12	0.0
FIELD	484:39	484:39	13	0.0
LEAF_NODE	484:39	484:39	14	0.0
LEAF_NODE	484:42	484:42	9	,
INIT_DECL_LIST	484:1	484:1	9	double D2 ; D2 = 0.0 , double K ; K = 0.0
VAR_DECL	484:1	484:44	10	double D2 ; D2 = 0.0
TYPE	484:1	484:1	11	double
TYPE_NAME	484:1	484:1	12	double
LEAF_NODE	484:1	484:1	13	double
NAME	484:44	484:44	11	D2
LEAF_NODE	484:44	484:44	12	D2
LEAF_NODE	0:0	0:0	11	;
INIT	484:44	484:44	11	D2 = 0.0
ASSIGN	484:44	484:49	12	D2 = 0.0
LVAL	484:44	484:44	13	D2
NAME	484:44	484:44	14	D2
LEAF_NODE	484:44	484:44	15	D2
ASSIGN_OP	484:47	484:47	13	=
LEAF_NODE	484:47	484:47	14	=
RVAL	484:49	484:49	13	0.0
FIELD	484:49	484:49	14	0.0
LEAF_NODE	484:49	484:49	15	0.0
LEAF_NODE	484:52	484:52	10	,
VAR_DECL	484:1	484:54	10	double K ; K = 0.0
TYPE	484:1	484:1	11	double
TYPE_NAME	484:1	484:1	12	double
LEAF_NODE	484:1	484:1	13	double
NAME	484:54	484:54	11	K
LEAF_NODE	484:54	484:54	12	K
LEAF_NODE	0:0	0:0	11	;
INIT	484:54	484:54	11	K = 0.0
ASSIGN	484:54	484:58	12	K = 0.0
LVAL	484:54	484:54	13	K
NAME	484:54	484:54	14	K
LEAF_NODE	484:54	484:54	15	K
ASSIGN_OP	484:56	484:56	13	=
LEAF_NODE	484:56	484:56	14	=
RVAL	484:58	484:58	13	0.0
FIELD	484:58	484:58	14	0.0
LEAF_NODE	484:58	484:58	15	0.0
LEAF_NODE	484:61	484:61	4	;
SIMPLE_DECL	485:1	485:9	3	uint32 i ;
VAR_DECL	485:1	485:8	4	uint32 i
TYPE	485:1	485:1	5	uint32
TYPE_NAME	485:1	485:1	6	uint32
LEAF_NODE	485:1	485:1	7	uint32
NAME	485:8	485:8	5	i
LEAF_NODE	485:8	485:8	6	i
LEAF_NODE	485:9	485:9	4	;
SELECTION	487:1	487:16	3	
KEYWORD	487:1	487:1	4	switch
LEAF_NODE	487:1	487:1	5	switch
LEAF_NODE	487:8	487:8	4	(
CONDITION	487:9	487:9	4	dtype
EXPR	487:9	487:9	5	dtype
FIELD	487:9	487:9	6	dtype
LEAF_NODE	487:9	487:9	7	dtype
LEAF_NODE	487:14	487:14	4	)
STATEMENTS	487:16	561:1	4	
LEAF_NODE	487:16	487:16	5	{
STATEMENTS	488:2	560:3	5	
LABEL	488:2	488:16	6	case TIFF_BYTE :
LEAF_NODE	488:2	488:2	7	case
LEAF_NODE	488:7	488:7	7	TIFF_BYTE
LEAF_NODE	488:16	488:16	7	:
LABEL	489:2	489:9	6	default :
LEAF_NODE	489:2	489:2	7	default
LEAF_NODE	489:9	489:9	7	:
ITERATION	490:24	490:53	6	
KEYWORD	490:24	490:24	7	for
LEAF_NODE	490:24	490:24	8	for
LEAF_NODE	490:28	490:28	7	(
FOR_INIT	490:29	490:34	7	i = 0 ;
EXPR	490:29	490:29	8	i = 0
ASSIGN	490:29	490:33	9	i = 0
LVAL	490:29	490:29	10	i
FIELD	490:29	490:29	11	i
LEAF_NODE	490:29	490:29	12	i
ASSIGN_OP	490:31	490:31	10	=
LEAF_NODE	490:31	490:31	11	=
RVAL	490:33	490:33	10	0
FIELD	490:33	490:33	11	0
LEAF_NODE	490:33	490:33	12	0
LEAF_NODE	490:34	490:34	8	;
CONDITION	490:36	490:36	7	i < n_elem
EXPR	490:36	490:40	8	i < n_elem
FIELD	490:36	490:36	9	i
LEAF_NODE	490:36	490:36	10	i
REL_OPERATOR	490:38	490:38	9	<
LEAF_NODE	490:38	490:38	10	<
FIELD	490:40	490:40	9	n_elem
LEAF_NODE	490:40	490:40	10	n_elem
LEAF_NODE	490:46	490:46	7	;
FOR_EXPR	490:48	490:48	7	i ++
EXPR	490:48	490:48	8	i ++
FIELD	490:48	490:49	9	i ++
LEAF_NODE	490:48	490:48	10	i
LEAF_NODE	490:49	490:49	10	++
LEAF_NODE	490:51	490:51	7	)
STATEMENTS	490:53	496:24	7	
LEAF_NODE	490:53	490:53	8	{
STATEMENTS	491:4	495:4	8	
EXPR_STATEMENT	491:4	491:34	9	X = ( ( unsigned char * ) buf1 ) [ i ] ;
EXPR	491:4	491:4	10	X = ( ( unsigned char * ) buf1 ) [ i ]
ASSIGN	491:4	491:8	11	X = ( ( unsigned char * ) buf1 ) [ i ]
LVAL	491:4	491:4	12	X
FIELD	491:4	491:4	13	X
LEAF_NODE	491:4	491:4	14	X
ASSIGN_OP	491:6	491:6	12	=
LEAF_NODE	491:6	491:6	13	=
RVAL	491:8	491:33	12	( ( unsigned char * ) buf1 ) [ i ]
LEAF_NODE	491:8	491:8	13	(
LEAF_NODE	491:9	491:9	13	(
TYPE_NAME	491:10	491:19	13	unsigned char
LEAF_NODE	491:10	491:10	14	unsigned
LEAF_NODE	491:19	491:19	14	char
LEAF_NODE	491:24	491:24	13	*
LEAF_NODE	491:25	491:25	13	)
FIELD	491:26	491:26	13	buf1
LEAF_NODE	491:26	491:26	14	buf1
LEAF_NODE	491:30	491:30	13	)
LEAF_NODE	491:31	491:31	13	[
EXPR	491:32	491:32	13	i
FIELD	491:32	491:32	14	i
LEAF_NODE	491:32	491:32	15	i
LEAF_NODE	491:33	491:33	13	]
LEAF_NODE	491:34	491:34	10	;
EXPR_STATEMENT	492:4	492:34	9	Y = ( ( unsigned char * ) buf2 ) [ i ] ;
EXPR	492:4	492:4	10	Y = ( ( unsigned char * ) buf2 ) [ i ]
ASSIGN	492:4	492:8	11	Y = ( ( unsigned char * ) buf2 ) [ i ]
LVAL	492:4	492:4	12	Y
FIELD	492:4	492:4	13	Y
LEAF_NODE	492:4	492:4	14	Y
ASSIGN_OP	492:6	492:6	12	=
LEAF_NODE	492:6	492:6	13	=
RVAL	492:8	492:33	12	( ( unsigned char * ) buf2 ) [ i ]
LEAF_NODE	492:8	492:8	13	(
LEAF_NODE	492:9	492:9	13	(
TYPE_NAME	492:10	492:19	13	unsigned char
LEAF_NODE	492:10	492:10	14	unsigned
LEAF_NODE	492:19	492:19	14	char
LEAF_NODE	492:24	492:24	13	*
LEAF_NODE	492:25	492:25	13	)
FIELD	492:26	492:26	13	buf2
LEAF_NODE	492:26	492:26	14	buf2
LEAF_NODE	492:30	492:30	13	)
LEAF_NODE	492:31	492:31	13	[
EXPR	492:32	492:32	13	i
FIELD	492:32	492:32	14	i
LEAF_NODE	492:32	492:32	15	i
LEAF_NODE	492:33	492:33	13	]
LEAF_NODE	492:34	492:34	10	;
EXPR_STATEMENT	493:4	493:20	9	M1 += X , M2 += Y ;
EXPR	493:4	493:13	10	M1 += X , M2 += Y
ASSIGN	493:4	493:10	11	M1 += X
LVAL	493:4	493:4	12	M1
FIELD	493:4	493:4	13	M1
LEAF_NODE	493:4	493:4	14	M1
ASSIGN_OP	493:7	493:7	12	+=
LEAF_NODE	493:7	493:7	13	+=
RVAL	493:10	493:10	12	X
FIELD	493:10	493:10	13	X
LEAF_NODE	493:10	493:10	14	X
LEAF_NODE	493:11	493:11	11	,
ASSIGN	493:13	493:19	11	M2 += Y
LVAL	493:13	493:13	12	M2
FIELD	493:13	493:13	13	M2
LEAF_NODE	493:13	493:13	14	M2
ASSIGN_OP	493:16	493:16	12	+=
LEAF_NODE	493:16	493:16	13	+=
RVAL	493:19	493:19	12	Y
FIELD	493:19	493:19	13	Y
LEAF_NODE	493:19	493:19	14	Y
LEAF_NODE	493:20	493:20	10	;
EXPR_STATEMENT	494:4	494:28	9	D1 += X * X , D2 += Y * Y ;
EXPR	494:4	494:17	10	D1 += X * X , D2 += Y * Y
ASSIGN	494:4	494:10	11	D1 += X * X
LVAL	494:4	494:4	12	D1
FIELD	494:4	494:4	13	D1
LEAF_NODE	494:4	494:4	14	D1
ASSIGN_OP	494:7	494:7	12	+=
LEAF_NODE	494:7	494:7	13	+=
RVAL	494:10	494:14	12	X * X
FIELD	494:10	494:10	13	X
LEAF_NODE	494:10	494:10	14	X
LEAF_NODE	494:12	494:12	13	*
FIELD	494:14	494:14	13	X
LEAF_NODE	494:14	494:14	14	X
LEAF_NODE	494:15	494:15	11	,
ASSIGN	494:17	494:23	11	D2 += Y * Y
LVAL	494:17	494:17	12	D2
FIELD	494:17	494:17	13	D2
LEAF_NODE	494:17	494:17	14	D2
ASSIGN_OP	494:20	494:20	12	+=
LEAF_NODE	494:20	494:20	13	+=
RVAL	494:23	494:27	12	Y * Y
FIELD	494:23	494:23	13	Y
LEAF_NODE	494:23	494:23	14	Y
LEAF_NODE	494:25	494:25	13	*
FIELD	494:27	494:27	13	Y
LEAF_NODE	494:27	494:27	14	Y
LEAF_NODE	494:28	494:28	10	;
EXPR_STATEMENT	495:4	495:14	9	K += X * Y ;
EXPR	495:4	495:4	10	K += X * Y
ASSIGN	495:4	495:9	11	K += X * Y
LVAL	495:4	495:4	12	K
FIELD	495:4	495:4	13	K
LEAF_NODE	495:4	495:4	14	K
ASSIGN_OP	495:6	495:6	12	+=
LEAF_NODE	495:6	495:6	13	+=
RVAL	495:9	495:13	12	X * Y
FIELD	495:9	495:9	13	X
LEAF_NODE	495:9	495:9	14	X
LEAF_NODE	495:11	495:11	13	*
FIELD	495:13	495:13	13	Y
LEAF_NODE	495:13	495:13	14	Y
LEAF_NODE	495:14	495:14	10	;
LEAF_NODE	496:24	496:24	8	}
JUMP_STATEMENT	497:3	497:8	6	break DESTINATION ;
KEYWORD	497:3	497:3	7	break
LEAF_NODE	497:3	497:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	497:8	497:8	7	;
LABEL	498:2	498:17	6	case TIFF_SBYTE :
LEAF_NODE	498:2	498:2	7	case
LEAF_NODE	498:7	498:7	7	TIFF_SBYTE
LEAF_NODE	498:17	498:17	7	:
ITERATION	499:24	499:53	6	
KEYWORD	499:24	499:24	7	for
LEAF_NODE	499:24	499:24	8	for
LEAF_NODE	499:28	499:28	7	(
FOR_INIT	499:29	499:34	7	i = 0 ;
EXPR	499:29	499:29	8	i = 0
ASSIGN	499:29	499:33	9	i = 0
LVAL	499:29	499:29	10	i
FIELD	499:29	499:29	11	i
LEAF_NODE	499:29	499:29	12	i
ASSIGN_OP	499:31	499:31	10	=
LEAF_NODE	499:31	499:31	11	=
RVAL	499:33	499:33	10	0
FIELD	499:33	499:33	11	0
LEAF_NODE	499:33	499:33	12	0
LEAF_NODE	499:34	499:34	8	;
CONDITION	499:36	499:36	7	i < n_elem
EXPR	499:36	499:40	8	i < n_elem
FIELD	499:36	499:36	9	i
LEAF_NODE	499:36	499:36	10	i
REL_OPERATOR	499:38	499:38	9	<
LEAF_NODE	499:38	499:38	10	<
FIELD	499:40	499:40	9	n_elem
LEAF_NODE	499:40	499:40	10	n_elem
LEAF_NODE	499:46	499:46	7	;
FOR_EXPR	499:48	499:48	7	i ++
EXPR	499:48	499:48	8	i ++
FIELD	499:48	499:49	9	i ++
LEAF_NODE	499:48	499:48	10	i
LEAF_NODE	499:49	499:49	10	++
LEAF_NODE	499:51	499:51	7	)
STATEMENTS	499:53	505:24	7	
LEAF_NODE	499:53	499:53	8	{
STATEMENTS	500:4	504:4	8	
EXPR_STATEMENT	500:4	500:32	9	X = ( ( signed char * ) buf1 ) [ i ] ;
EXPR	500:4	500:4	10	X = ( ( signed char * ) buf1 ) [ i ]
ASSIGN	500:4	500:8	11	X = ( ( signed char * ) buf1 ) [ i ]
LVAL	500:4	500:4	12	X
FIELD	500:4	500:4	13	X
LEAF_NODE	500:4	500:4	14	X
ASSIGN_OP	500:6	500:6	12	=
LEAF_NODE	500:6	500:6	13	=
RVAL	500:8	500:31	12	( ( signed char * ) buf1 ) [ i ]
LEAF_NODE	500:8	500:8	13	(
LEAF_NODE	500:9	500:9	13	(
TYPE_NAME	500:10	500:17	13	signed char
LEAF_NODE	500:10	500:10	14	signed
LEAF_NODE	500:17	500:17	14	char
LEAF_NODE	500:22	500:22	13	*
LEAF_NODE	500:23	500:23	13	)
FIELD	500:24	500:24	13	buf1
LEAF_NODE	500:24	500:24	14	buf1
LEAF_NODE	500:28	500:28	13	)
LEAF_NODE	500:29	500:29	13	[
EXPR	500:30	500:30	13	i
FIELD	500:30	500:30	14	i
LEAF_NODE	500:30	500:30	15	i
LEAF_NODE	500:31	500:31	13	]
LEAF_NODE	500:32	500:32	10	;
EXPR_STATEMENT	501:4	501:32	9	Y = ( ( signed char * ) buf2 ) [ i ] ;
EXPR	501:4	501:4	10	Y = ( ( signed char * ) buf2 ) [ i ]
ASSIGN	501:4	501:8	11	Y = ( ( signed char * ) buf2 ) [ i ]
LVAL	501:4	501:4	12	Y
FIELD	501:4	501:4	13	Y
LEAF_NODE	501:4	501:4	14	Y
ASSIGN_OP	501:6	501:6	12	=
LEAF_NODE	501:6	501:6	13	=
RVAL	501:8	501:31	12	( ( signed char * ) buf2 ) [ i ]
LEAF_NODE	501:8	501:8	13	(
LEAF_NODE	501:9	501:9	13	(
TYPE_NAME	501:10	501:17	13	signed char
LEAF_NODE	501:10	501:10	14	signed
LEAF_NODE	501:17	501:17	14	char
LEAF_NODE	501:22	501:22	13	*
LEAF_NODE	501:23	501:23	13	)
FIELD	501:24	501:24	13	buf2
LEAF_NODE	501:24	501:24	14	buf2
LEAF_NODE	501:28	501:28	13	)
LEAF_NODE	501:29	501:29	13	[
EXPR	501:30	501:30	13	i
FIELD	501:30	501:30	14	i
LEAF_NODE	501:30	501:30	15	i
LEAF_NODE	501:31	501:31	13	]
LEAF_NODE	501:32	501:32	10	;
EXPR_STATEMENT	502:4	502:20	9	M1 += X , M2 += Y ;
EXPR	502:4	502:13	10	M1 += X , M2 += Y
ASSIGN	502:4	502:10	11	M1 += X
LVAL	502:4	502:4	12	M1
FIELD	502:4	502:4	13	M1
LEAF_NODE	502:4	502:4	14	M1
ASSIGN_OP	502:7	502:7	12	+=
LEAF_NODE	502:7	502:7	13	+=
RVAL	502:10	502:10	12	X
FIELD	502:10	502:10	13	X
LEAF_NODE	502:10	502:10	14	X
LEAF_NODE	502:11	502:11	11	,
ASSIGN	502:13	502:19	11	M2 += Y
LVAL	502:13	502:13	12	M2
FIELD	502:13	502:13	13	M2
LEAF_NODE	502:13	502:13	14	M2
ASSIGN_OP	502:16	502:16	12	+=
LEAF_NODE	502:16	502:16	13	+=
RVAL	502:19	502:19	12	Y
FIELD	502:19	502:19	13	Y
LEAF_NODE	502:19	502:19	14	Y
LEAF_NODE	502:20	502:20	10	;
EXPR_STATEMENT	503:4	503:28	9	D1 += X * X , D2 += Y * Y ;
EXPR	503:4	503:17	10	D1 += X * X , D2 += Y * Y
ASSIGN	503:4	503:10	11	D1 += X * X
LVAL	503:4	503:4	12	D1
FIELD	503:4	503:4	13	D1
LEAF_NODE	503:4	503:4	14	D1
ASSIGN_OP	503:7	503:7	12	+=
LEAF_NODE	503:7	503:7	13	+=
RVAL	503:10	503:14	12	X * X
FIELD	503:10	503:10	13	X
LEAF_NODE	503:10	503:10	14	X
LEAF_NODE	503:12	503:12	13	*
FIELD	503:14	503:14	13	X
LEAF_NODE	503:14	503:14	14	X
LEAF_NODE	503:15	503:15	11	,
ASSIGN	503:17	503:23	11	D2 += Y * Y
LVAL	503:17	503:17	12	D2
FIELD	503:17	503:17	13	D2
LEAF_NODE	503:17	503:17	14	D2
ASSIGN_OP	503:20	503:20	12	+=
LEAF_NODE	503:20	503:20	13	+=
RVAL	503:23	503:27	12	Y * Y
FIELD	503:23	503:23	13	Y
LEAF_NODE	503:23	503:23	14	Y
LEAF_NODE	503:25	503:25	13	*
FIELD	503:27	503:27	13	Y
LEAF_NODE	503:27	503:27	14	Y
LEAF_NODE	503:28	503:28	10	;
EXPR_STATEMENT	504:4	504:14	9	K += X * Y ;
EXPR	504:4	504:4	10	K += X * Y
ASSIGN	504:4	504:9	11	K += X * Y
LVAL	504:4	504:4	12	K
FIELD	504:4	504:4	13	K
LEAF_NODE	504:4	504:4	14	K
ASSIGN_OP	504:6	504:6	12	+=
LEAF_NODE	504:6	504:6	13	+=
RVAL	504:9	504:13	12	X * Y
FIELD	504:9	504:9	13	X
LEAF_NODE	504:9	504:9	14	X
LEAF_NODE	504:11	504:11	13	*
FIELD	504:13	504:13	13	Y
LEAF_NODE	504:13	504:13	14	Y
LEAF_NODE	504:14	504:14	10	;
LEAF_NODE	505:24	505:24	8	}
JUMP_STATEMENT	506:3	506:8	6	break DESTINATION ;
KEYWORD	506:3	506:3	7	break
LEAF_NODE	506:3	506:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	506:8	506:8	7	;
LABEL	507:2	507:17	6	case TIFF_SHORT :
LEAF_NODE	507:2	507:2	7	case
LEAF_NODE	507:7	507:7	7	TIFF_SHORT
LEAF_NODE	507:17	507:17	7	:
ITERATION	508:24	508:53	6	
KEYWORD	508:24	508:24	7	for
LEAF_NODE	508:24	508:24	8	for
LEAF_NODE	508:28	508:28	7	(
FOR_INIT	508:29	508:34	7	i = 0 ;
EXPR	508:29	508:29	8	i = 0
ASSIGN	508:29	508:33	9	i = 0
LVAL	508:29	508:29	10	i
FIELD	508:29	508:29	11	i
LEAF_NODE	508:29	508:29	12	i
ASSIGN_OP	508:31	508:31	10	=
LEAF_NODE	508:31	508:31	11	=
RVAL	508:33	508:33	10	0
FIELD	508:33	508:33	11	0
LEAF_NODE	508:33	508:33	12	0
LEAF_NODE	508:34	508:34	8	;
CONDITION	508:36	508:36	7	i < n_elem
EXPR	508:36	508:40	8	i < n_elem
FIELD	508:36	508:36	9	i
LEAF_NODE	508:36	508:36	10	i
REL_OPERATOR	508:38	508:38	9	<
LEAF_NODE	508:38	508:38	10	<
FIELD	508:40	508:40	9	n_elem
LEAF_NODE	508:40	508:40	10	n_elem
LEAF_NODE	508:46	508:46	7	;
FOR_EXPR	508:48	508:48	7	i ++
EXPR	508:48	508:48	8	i ++
FIELD	508:48	508:49	9	i ++
LEAF_NODE	508:48	508:48	10	i
LEAF_NODE	508:49	508:49	10	++
LEAF_NODE	508:51	508:51	7	)
STATEMENTS	508:53	514:24	7	
LEAF_NODE	508:53	508:53	8	{
STATEMENTS	509:4	513:4	8	
EXPR_STATEMENT	509:4	509:27	9	X = ( ( uint16 * ) buf1 ) [ i ] ;
EXPR	509:4	509:4	10	X = ( ( uint16 * ) buf1 ) [ i ]
ASSIGN	509:4	509:8	11	X = ( ( uint16 * ) buf1 ) [ i ]
LVAL	509:4	509:4	12	X
FIELD	509:4	509:4	13	X
LEAF_NODE	509:4	509:4	14	X
ASSIGN_OP	509:6	509:6	12	=
LEAF_NODE	509:6	509:6	13	=
RVAL	509:8	509:26	12	( ( uint16 * ) buf1 ) [ i ]
LEAF_NODE	509:8	509:8	13	(
LEAF_NODE	509:9	509:9	13	(
TYPE_NAME	509:10	509:10	13	uint16
LEAF_NODE	509:10	509:10	14	uint16
LEAF_NODE	509:17	509:17	13	*
LEAF_NODE	509:18	509:18	13	)
FIELD	509:19	509:19	13	buf1
LEAF_NODE	509:19	509:19	14	buf1
LEAF_NODE	509:23	509:23	13	)
LEAF_NODE	509:24	509:24	13	[
EXPR	509:25	509:25	13	i
FIELD	509:25	509:25	14	i
LEAF_NODE	509:25	509:25	15	i
LEAF_NODE	509:26	509:26	13	]
LEAF_NODE	509:27	509:27	10	;
EXPR_STATEMENT	510:4	510:27	9	Y = ( ( uint16 * ) buf2 ) [ i ] ;
EXPR	510:4	510:4	10	Y = ( ( uint16 * ) buf2 ) [ i ]
ASSIGN	510:4	510:8	11	Y = ( ( uint16 * ) buf2 ) [ i ]
LVAL	510:4	510:4	12	Y
FIELD	510:4	510:4	13	Y
LEAF_NODE	510:4	510:4	14	Y
ASSIGN_OP	510:6	510:6	12	=
LEAF_NODE	510:6	510:6	13	=
RVAL	510:8	510:26	12	( ( uint16 * ) buf2 ) [ i ]
LEAF_NODE	510:8	510:8	13	(
LEAF_NODE	510:9	510:9	13	(
TYPE_NAME	510:10	510:10	13	uint16
LEAF_NODE	510:10	510:10	14	uint16
LEAF_NODE	510:17	510:17	13	*
LEAF_NODE	510:18	510:18	13	)
FIELD	510:19	510:19	13	buf2
LEAF_NODE	510:19	510:19	14	buf2
LEAF_NODE	510:23	510:23	13	)
LEAF_NODE	510:24	510:24	13	[
EXPR	510:25	510:25	13	i
FIELD	510:25	510:25	14	i
LEAF_NODE	510:25	510:25	15	i
LEAF_NODE	510:26	510:26	13	]
LEAF_NODE	510:27	510:27	10	;
EXPR_STATEMENT	511:4	511:20	9	M1 += X , M2 += Y ;
EXPR	511:4	511:13	10	M1 += X , M2 += Y
ASSIGN	511:4	511:10	11	M1 += X
LVAL	511:4	511:4	12	M1
FIELD	511:4	511:4	13	M1
LEAF_NODE	511:4	511:4	14	M1
ASSIGN_OP	511:7	511:7	12	+=
LEAF_NODE	511:7	511:7	13	+=
RVAL	511:10	511:10	12	X
FIELD	511:10	511:10	13	X
LEAF_NODE	511:10	511:10	14	X
LEAF_NODE	511:11	511:11	11	,
ASSIGN	511:13	511:19	11	M2 += Y
LVAL	511:13	511:13	12	M2
FIELD	511:13	511:13	13	M2
LEAF_NODE	511:13	511:13	14	M2
ASSIGN_OP	511:16	511:16	12	+=
LEAF_NODE	511:16	511:16	13	+=
RVAL	511:19	511:19	12	Y
FIELD	511:19	511:19	13	Y
LEAF_NODE	511:19	511:19	14	Y
LEAF_NODE	511:20	511:20	10	;
EXPR_STATEMENT	512:4	512:28	9	D1 += X * X , D2 += Y * Y ;
EXPR	512:4	512:17	10	D1 += X * X , D2 += Y * Y
ASSIGN	512:4	512:10	11	D1 += X * X
LVAL	512:4	512:4	12	D1
FIELD	512:4	512:4	13	D1
LEAF_NODE	512:4	512:4	14	D1
ASSIGN_OP	512:7	512:7	12	+=
LEAF_NODE	512:7	512:7	13	+=
RVAL	512:10	512:14	12	X * X
FIELD	512:10	512:10	13	X
LEAF_NODE	512:10	512:10	14	X
LEAF_NODE	512:12	512:12	13	*
FIELD	512:14	512:14	13	X
LEAF_NODE	512:14	512:14	14	X
LEAF_NODE	512:15	512:15	11	,
ASSIGN	512:17	512:23	11	D2 += Y * Y
LVAL	512:17	512:17	12	D2
FIELD	512:17	512:17	13	D2
LEAF_NODE	512:17	512:17	14	D2
ASSIGN_OP	512:20	512:20	12	+=
LEAF_NODE	512:20	512:20	13	+=
RVAL	512:23	512:27	12	Y * Y
FIELD	512:23	512:23	13	Y
LEAF_NODE	512:23	512:23	14	Y
LEAF_NODE	512:25	512:25	13	*
FIELD	512:27	512:27	13	Y
LEAF_NODE	512:27	512:27	14	Y
LEAF_NODE	512:28	512:28	10	;
EXPR_STATEMENT	513:4	513:14	9	K += X * Y ;
EXPR	513:4	513:4	10	K += X * Y
ASSIGN	513:4	513:9	11	K += X * Y
LVAL	513:4	513:4	12	K
FIELD	513:4	513:4	13	K
LEAF_NODE	513:4	513:4	14	K
ASSIGN_OP	513:6	513:6	12	+=
LEAF_NODE	513:6	513:6	13	+=
RVAL	513:9	513:13	12	X * Y
FIELD	513:9	513:9	13	X
LEAF_NODE	513:9	513:9	14	X
LEAF_NODE	513:11	513:11	13	*
FIELD	513:13	513:13	13	Y
LEAF_NODE	513:13	513:13	14	Y
LEAF_NODE	513:14	513:14	10	;
LEAF_NODE	514:24	514:24	8	}
JUMP_STATEMENT	515:3	515:8	6	break DESTINATION ;
KEYWORD	515:3	515:3	7	break
LEAF_NODE	515:3	515:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	515:8	515:8	7	;
LABEL	516:2	516:18	6	case TIFF_SSHORT :
LEAF_NODE	516:2	516:2	7	case
LEAF_NODE	516:7	516:7	7	TIFF_SSHORT
LEAF_NODE	516:18	516:18	7	:
ITERATION	517:24	517:53	6	
KEYWORD	517:24	517:24	7	for
LEAF_NODE	517:24	517:24	8	for
LEAF_NODE	517:28	517:28	7	(
FOR_INIT	517:29	517:34	7	i = 0 ;
EXPR	517:29	517:29	8	i = 0
ASSIGN	517:29	517:33	9	i = 0
LVAL	517:29	517:29	10	i
FIELD	517:29	517:29	11	i
LEAF_NODE	517:29	517:29	12	i
ASSIGN_OP	517:31	517:31	10	=
LEAF_NODE	517:31	517:31	11	=
RVAL	517:33	517:33	10	0
FIELD	517:33	517:33	11	0
LEAF_NODE	517:33	517:33	12	0
LEAF_NODE	517:34	517:34	8	;
CONDITION	517:36	517:36	7	i < n_elem
EXPR	517:36	517:40	8	i < n_elem
FIELD	517:36	517:36	9	i
LEAF_NODE	517:36	517:36	10	i
REL_OPERATOR	517:38	517:38	9	<
LEAF_NODE	517:38	517:38	10	<
FIELD	517:40	517:40	9	n_elem
LEAF_NODE	517:40	517:40	10	n_elem
LEAF_NODE	517:46	517:46	7	;
FOR_EXPR	517:48	517:48	7	i ++
EXPR	517:48	517:48	8	i ++
FIELD	517:48	517:49	9	i ++
LEAF_NODE	517:48	517:48	10	i
LEAF_NODE	517:49	517:49	10	++
LEAF_NODE	517:51	517:51	7	)
STATEMENTS	517:53	523:24	7	
LEAF_NODE	517:53	517:53	8	{
STATEMENTS	518:4	522:4	8	
EXPR_STATEMENT	518:4	518:26	9	X = ( ( int16 * ) buf1 ) [ i ] ;
EXPR	518:4	518:4	10	X = ( ( int16 * ) buf1 ) [ i ]
ASSIGN	518:4	518:8	11	X = ( ( int16 * ) buf1 ) [ i ]
LVAL	518:4	518:4	12	X
FIELD	518:4	518:4	13	X
LEAF_NODE	518:4	518:4	14	X
ASSIGN_OP	518:6	518:6	12	=
LEAF_NODE	518:6	518:6	13	=
RVAL	518:8	518:25	12	( ( int16 * ) buf1 ) [ i ]
LEAF_NODE	518:8	518:8	13	(
LEAF_NODE	518:9	518:9	13	(
TYPE_NAME	518:10	518:10	13	int16
LEAF_NODE	518:10	518:10	14	int16
LEAF_NODE	518:16	518:16	13	*
LEAF_NODE	518:17	518:17	13	)
FIELD	518:18	518:18	13	buf1
LEAF_NODE	518:18	518:18	14	buf1
LEAF_NODE	518:22	518:22	13	)
LEAF_NODE	518:23	518:23	13	[
EXPR	518:24	518:24	13	i
FIELD	518:24	518:24	14	i
LEAF_NODE	518:24	518:24	15	i
LEAF_NODE	518:25	518:25	13	]
LEAF_NODE	518:26	518:26	10	;
EXPR_STATEMENT	519:4	519:26	9	Y = ( ( int16 * ) buf2 ) [ i ] ;
EXPR	519:4	519:4	10	Y = ( ( int16 * ) buf2 ) [ i ]
ASSIGN	519:4	519:8	11	Y = ( ( int16 * ) buf2 ) [ i ]
LVAL	519:4	519:4	12	Y
FIELD	519:4	519:4	13	Y
LEAF_NODE	519:4	519:4	14	Y
ASSIGN_OP	519:6	519:6	12	=
LEAF_NODE	519:6	519:6	13	=
RVAL	519:8	519:25	12	( ( int16 * ) buf2 ) [ i ]
LEAF_NODE	519:8	519:8	13	(
LEAF_NODE	519:9	519:9	13	(
TYPE_NAME	519:10	519:10	13	int16
LEAF_NODE	519:10	519:10	14	int16
LEAF_NODE	519:16	519:16	13	*
LEAF_NODE	519:17	519:17	13	)
FIELD	519:18	519:18	13	buf2
LEAF_NODE	519:18	519:18	14	buf2
LEAF_NODE	519:22	519:22	13	)
LEAF_NODE	519:23	519:23	13	[
EXPR	519:24	519:24	13	i
FIELD	519:24	519:24	14	i
LEAF_NODE	519:24	519:24	15	i
LEAF_NODE	519:25	519:25	13	]
LEAF_NODE	519:26	519:26	10	;
EXPR_STATEMENT	520:4	520:20	9	M1 += X , M2 += Y ;
EXPR	520:4	520:13	10	M1 += X , M2 += Y
ASSIGN	520:4	520:10	11	M1 += X
LVAL	520:4	520:4	12	M1
FIELD	520:4	520:4	13	M1
LEAF_NODE	520:4	520:4	14	M1
ASSIGN_OP	520:7	520:7	12	+=
LEAF_NODE	520:7	520:7	13	+=
RVAL	520:10	520:10	12	X
FIELD	520:10	520:10	13	X
LEAF_NODE	520:10	520:10	14	X
LEAF_NODE	520:11	520:11	11	,
ASSIGN	520:13	520:19	11	M2 += Y
LVAL	520:13	520:13	12	M2
FIELD	520:13	520:13	13	M2
LEAF_NODE	520:13	520:13	14	M2
ASSIGN_OP	520:16	520:16	12	+=
LEAF_NODE	520:16	520:16	13	+=
RVAL	520:19	520:19	12	Y
FIELD	520:19	520:19	13	Y
LEAF_NODE	520:19	520:19	14	Y
LEAF_NODE	520:20	520:20	10	;
EXPR_STATEMENT	521:4	521:28	9	D1 += X * X , D2 += Y * Y ;
EXPR	521:4	521:17	10	D1 += X * X , D2 += Y * Y
ASSIGN	521:4	521:10	11	D1 += X * X
LVAL	521:4	521:4	12	D1
FIELD	521:4	521:4	13	D1
LEAF_NODE	521:4	521:4	14	D1
ASSIGN_OP	521:7	521:7	12	+=
LEAF_NODE	521:7	521:7	13	+=
RVAL	521:10	521:14	12	X * X
FIELD	521:10	521:10	13	X
LEAF_NODE	521:10	521:10	14	X
LEAF_NODE	521:12	521:12	13	*
FIELD	521:14	521:14	13	X
LEAF_NODE	521:14	521:14	14	X
LEAF_NODE	521:15	521:15	11	,
ASSIGN	521:17	521:23	11	D2 += Y * Y
LVAL	521:17	521:17	12	D2
FIELD	521:17	521:17	13	D2
LEAF_NODE	521:17	521:17	14	D2
ASSIGN_OP	521:20	521:20	12	+=
LEAF_NODE	521:20	521:20	13	+=
RVAL	521:23	521:27	12	Y * Y
FIELD	521:23	521:23	13	Y
LEAF_NODE	521:23	521:23	14	Y
LEAF_NODE	521:25	521:25	13	*
FIELD	521:27	521:27	13	Y
LEAF_NODE	521:27	521:27	14	Y
LEAF_NODE	521:28	521:28	10	;
EXPR_STATEMENT	522:4	522:14	9	K += X * Y ;
EXPR	522:4	522:4	10	K += X * Y
ASSIGN	522:4	522:9	11	K += X * Y
LVAL	522:4	522:4	12	K
FIELD	522:4	522:4	13	K
LEAF_NODE	522:4	522:4	14	K
ASSIGN_OP	522:6	522:6	12	+=
LEAF_NODE	522:6	522:6	13	+=
RVAL	522:9	522:13	12	X * Y
FIELD	522:9	522:9	13	X
LEAF_NODE	522:9	522:9	14	X
LEAF_NODE	522:11	522:11	13	*
FIELD	522:13	522:13	13	Y
LEAF_NODE	522:13	522:13	14	Y
LEAF_NODE	522:14	522:14	10	;
LEAF_NODE	523:24	523:24	8	}
JUMP_STATEMENT	524:3	524:8	6	break DESTINATION ;
KEYWORD	524:3	524:3	7	break
LEAF_NODE	524:3	524:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	524:8	524:8	7	;
LABEL	525:2	525:16	6	case TIFF_LONG :
LEAF_NODE	525:2	525:2	7	case
LEAF_NODE	525:7	525:7	7	TIFF_LONG
LEAF_NODE	525:16	525:16	7	:
ITERATION	526:24	526:53	6	
KEYWORD	526:24	526:24	7	for
LEAF_NODE	526:24	526:24	8	for
LEAF_NODE	526:28	526:28	7	(
FOR_INIT	526:29	526:34	7	i = 0 ;
EXPR	526:29	526:29	8	i = 0
ASSIGN	526:29	526:33	9	i = 0
LVAL	526:29	526:29	10	i
FIELD	526:29	526:29	11	i
LEAF_NODE	526:29	526:29	12	i
ASSIGN_OP	526:31	526:31	10	=
LEAF_NODE	526:31	526:31	11	=
RVAL	526:33	526:33	10	0
FIELD	526:33	526:33	11	0
LEAF_NODE	526:33	526:33	12	0
LEAF_NODE	526:34	526:34	8	;
CONDITION	526:36	526:36	7	i < n_elem
EXPR	526:36	526:40	8	i < n_elem
FIELD	526:36	526:36	9	i
LEAF_NODE	526:36	526:36	10	i
REL_OPERATOR	526:38	526:38	9	<
LEAF_NODE	526:38	526:38	10	<
FIELD	526:40	526:40	9	n_elem
LEAF_NODE	526:40	526:40	10	n_elem
LEAF_NODE	526:46	526:46	7	;
FOR_EXPR	526:48	526:48	7	i ++
EXPR	526:48	526:48	8	i ++
FIELD	526:48	526:49	9	i ++
LEAF_NODE	526:48	526:48	10	i
LEAF_NODE	526:49	526:49	10	++
LEAF_NODE	526:51	526:51	7	)
STATEMENTS	526:53	532:24	7	
LEAF_NODE	526:53	526:53	8	{
STATEMENTS	527:4	531:4	8	
EXPR_STATEMENT	527:4	527:27	9	X = ( ( uint32 * ) buf1 ) [ i ] ;
EXPR	527:4	527:4	10	X = ( ( uint32 * ) buf1 ) [ i ]
ASSIGN	527:4	527:8	11	X = ( ( uint32 * ) buf1 ) [ i ]
LVAL	527:4	527:4	12	X
FIELD	527:4	527:4	13	X
LEAF_NODE	527:4	527:4	14	X
ASSIGN_OP	527:6	527:6	12	=
LEAF_NODE	527:6	527:6	13	=
RVAL	527:8	527:26	12	( ( uint32 * ) buf1 ) [ i ]
LEAF_NODE	527:8	527:8	13	(
LEAF_NODE	527:9	527:9	13	(
TYPE_NAME	527:10	527:10	13	uint32
LEAF_NODE	527:10	527:10	14	uint32
LEAF_NODE	527:17	527:17	13	*
LEAF_NODE	527:18	527:18	13	)
FIELD	527:19	527:19	13	buf1
LEAF_NODE	527:19	527:19	14	buf1
LEAF_NODE	527:23	527:23	13	)
LEAF_NODE	527:24	527:24	13	[
EXPR	527:25	527:25	13	i
FIELD	527:25	527:25	14	i
LEAF_NODE	527:25	527:25	15	i
LEAF_NODE	527:26	527:26	13	]
LEAF_NODE	527:27	527:27	10	;
EXPR_STATEMENT	528:4	528:27	9	Y = ( ( uint32 * ) buf2 ) [ i ] ;
EXPR	528:4	528:4	10	Y = ( ( uint32 * ) buf2 ) [ i ]
ASSIGN	528:4	528:8	11	Y = ( ( uint32 * ) buf2 ) [ i ]
LVAL	528:4	528:4	12	Y
FIELD	528:4	528:4	13	Y
LEAF_NODE	528:4	528:4	14	Y
ASSIGN_OP	528:6	528:6	12	=
LEAF_NODE	528:6	528:6	13	=
RVAL	528:8	528:26	12	( ( uint32 * ) buf2 ) [ i ]
LEAF_NODE	528:8	528:8	13	(
LEAF_NODE	528:9	528:9	13	(
TYPE_NAME	528:10	528:10	13	uint32
LEAF_NODE	528:10	528:10	14	uint32
LEAF_NODE	528:17	528:17	13	*
LEAF_NODE	528:18	528:18	13	)
FIELD	528:19	528:19	13	buf2
LEAF_NODE	528:19	528:19	14	buf2
LEAF_NODE	528:23	528:23	13	)
LEAF_NODE	528:24	528:24	13	[
EXPR	528:25	528:25	13	i
FIELD	528:25	528:25	14	i
LEAF_NODE	528:25	528:25	15	i
LEAF_NODE	528:26	528:26	13	]
LEAF_NODE	528:27	528:27	10	;
EXPR_STATEMENT	529:4	529:20	9	M1 += X , M2 += Y ;
EXPR	529:4	529:13	10	M1 += X , M2 += Y
ASSIGN	529:4	529:10	11	M1 += X
LVAL	529:4	529:4	12	M1
FIELD	529:4	529:4	13	M1
LEAF_NODE	529:4	529:4	14	M1
ASSIGN_OP	529:7	529:7	12	+=
LEAF_NODE	529:7	529:7	13	+=
RVAL	529:10	529:10	12	X
FIELD	529:10	529:10	13	X
LEAF_NODE	529:10	529:10	14	X
LEAF_NODE	529:11	529:11	11	,
ASSIGN	529:13	529:19	11	M2 += Y
LVAL	529:13	529:13	12	M2
FIELD	529:13	529:13	13	M2
LEAF_NODE	529:13	529:13	14	M2
ASSIGN_OP	529:16	529:16	12	+=
LEAF_NODE	529:16	529:16	13	+=
RVAL	529:19	529:19	12	Y
FIELD	529:19	529:19	13	Y
LEAF_NODE	529:19	529:19	14	Y
LEAF_NODE	529:20	529:20	10	;
EXPR_STATEMENT	530:4	530:28	9	D1 += X * X , D2 += Y * Y ;
EXPR	530:4	530:17	10	D1 += X * X , D2 += Y * Y
ASSIGN	530:4	530:10	11	D1 += X * X
LVAL	530:4	530:4	12	D1
FIELD	530:4	530:4	13	D1
LEAF_NODE	530:4	530:4	14	D1
ASSIGN_OP	530:7	530:7	12	+=
LEAF_NODE	530:7	530:7	13	+=
RVAL	530:10	530:14	12	X * X
FIELD	530:10	530:10	13	X
LEAF_NODE	530:10	530:10	14	X
LEAF_NODE	530:12	530:12	13	*
FIELD	530:14	530:14	13	X
LEAF_NODE	530:14	530:14	14	X
LEAF_NODE	530:15	530:15	11	,
ASSIGN	530:17	530:23	11	D2 += Y * Y
LVAL	530:17	530:17	12	D2
FIELD	530:17	530:17	13	D2
LEAF_NODE	530:17	530:17	14	D2
ASSIGN_OP	530:20	530:20	12	+=
LEAF_NODE	530:20	530:20	13	+=
RVAL	530:23	530:27	12	Y * Y
FIELD	530:23	530:23	13	Y
LEAF_NODE	530:23	530:23	14	Y
LEAF_NODE	530:25	530:25	13	*
FIELD	530:27	530:27	13	Y
LEAF_NODE	530:27	530:27	14	Y
LEAF_NODE	530:28	530:28	10	;
EXPR_STATEMENT	531:4	531:14	9	K += X * Y ;
EXPR	531:4	531:4	10	K += X * Y
ASSIGN	531:4	531:9	11	K += X * Y
LVAL	531:4	531:4	12	K
FIELD	531:4	531:4	13	K
LEAF_NODE	531:4	531:4	14	K
ASSIGN_OP	531:6	531:6	12	+=
LEAF_NODE	531:6	531:6	13	+=
RVAL	531:9	531:13	12	X * Y
FIELD	531:9	531:9	13	X
LEAF_NODE	531:9	531:9	14	X
LEAF_NODE	531:11	531:11	13	*
FIELD	531:13	531:13	13	Y
LEAF_NODE	531:13	531:13	14	Y
LEAF_NODE	531:14	531:14	10	;
LEAF_NODE	532:24	532:24	8	}
JUMP_STATEMENT	533:3	533:8	6	break DESTINATION ;
KEYWORD	533:3	533:3	7	break
LEAF_NODE	533:3	533:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	533:8	533:8	7	;
LABEL	534:2	534:17	6	case TIFF_SLONG :
LEAF_NODE	534:2	534:2	7	case
LEAF_NODE	534:7	534:7	7	TIFF_SLONG
LEAF_NODE	534:17	534:17	7	:
ITERATION	535:24	535:53	6	
KEYWORD	535:24	535:24	7	for
LEAF_NODE	535:24	535:24	8	for
LEAF_NODE	535:28	535:28	7	(
FOR_INIT	535:29	535:34	7	i = 0 ;
EXPR	535:29	535:29	8	i = 0
ASSIGN	535:29	535:33	9	i = 0
LVAL	535:29	535:29	10	i
FIELD	535:29	535:29	11	i
LEAF_NODE	535:29	535:29	12	i
ASSIGN_OP	535:31	535:31	10	=
LEAF_NODE	535:31	535:31	11	=
RVAL	535:33	535:33	10	0
FIELD	535:33	535:33	11	0
LEAF_NODE	535:33	535:33	12	0
LEAF_NODE	535:34	535:34	8	;
CONDITION	535:36	535:36	7	i < n_elem
EXPR	535:36	535:40	8	i < n_elem
FIELD	535:36	535:36	9	i
LEAF_NODE	535:36	535:36	10	i
REL_OPERATOR	535:38	535:38	9	<
LEAF_NODE	535:38	535:38	10	<
FIELD	535:40	535:40	9	n_elem
LEAF_NODE	535:40	535:40	10	n_elem
LEAF_NODE	535:46	535:46	7	;
FOR_EXPR	535:48	535:48	7	i ++
EXPR	535:48	535:48	8	i ++
FIELD	535:48	535:49	9	i ++
LEAF_NODE	535:48	535:48	10	i
LEAF_NODE	535:49	535:49	10	++
LEAF_NODE	535:51	535:51	7	)
STATEMENTS	535:53	541:24	7	
LEAF_NODE	535:53	535:53	8	{
STATEMENTS	536:4	540:4	8	
EXPR_STATEMENT	536:4	536:26	9	X = ( ( int32 * ) buf1 ) [ i ] ;
EXPR	536:4	536:4	10	X = ( ( int32 * ) buf1 ) [ i ]
ASSIGN	536:4	536:8	11	X = ( ( int32 * ) buf1 ) [ i ]
LVAL	536:4	536:4	12	X
FIELD	536:4	536:4	13	X
LEAF_NODE	536:4	536:4	14	X
ASSIGN_OP	536:6	536:6	12	=
LEAF_NODE	536:6	536:6	13	=
RVAL	536:8	536:25	12	( ( int32 * ) buf1 ) [ i ]
LEAF_NODE	536:8	536:8	13	(
LEAF_NODE	536:9	536:9	13	(
TYPE_NAME	536:10	536:10	13	int32
LEAF_NODE	536:10	536:10	14	int32
LEAF_NODE	536:16	536:16	13	*
LEAF_NODE	536:17	536:17	13	)
FIELD	536:18	536:18	13	buf1
LEAF_NODE	536:18	536:18	14	buf1
LEAF_NODE	536:22	536:22	13	)
LEAF_NODE	536:23	536:23	13	[
EXPR	536:24	536:24	13	i
FIELD	536:24	536:24	14	i
LEAF_NODE	536:24	536:24	15	i
LEAF_NODE	536:25	536:25	13	]
LEAF_NODE	536:26	536:26	10	;
EXPR_STATEMENT	537:4	537:26	9	Y = ( ( int32 * ) buf2 ) [ i ] ;
EXPR	537:4	537:4	10	Y = ( ( int32 * ) buf2 ) [ i ]
ASSIGN	537:4	537:8	11	Y = ( ( int32 * ) buf2 ) [ i ]
LVAL	537:4	537:4	12	Y
FIELD	537:4	537:4	13	Y
LEAF_NODE	537:4	537:4	14	Y
ASSIGN_OP	537:6	537:6	12	=
LEAF_NODE	537:6	537:6	13	=
RVAL	537:8	537:25	12	( ( int32 * ) buf2 ) [ i ]
LEAF_NODE	537:8	537:8	13	(
LEAF_NODE	537:9	537:9	13	(
TYPE_NAME	537:10	537:10	13	int32
LEAF_NODE	537:10	537:10	14	int32
LEAF_NODE	537:16	537:16	13	*
LEAF_NODE	537:17	537:17	13	)
FIELD	537:18	537:18	13	buf2
LEAF_NODE	537:18	537:18	14	buf2
LEAF_NODE	537:22	537:22	13	)
LEAF_NODE	537:23	537:23	13	[
EXPR	537:24	537:24	13	i
FIELD	537:24	537:24	14	i
LEAF_NODE	537:24	537:24	15	i
LEAF_NODE	537:25	537:25	13	]
LEAF_NODE	537:26	537:26	10	;
EXPR_STATEMENT	538:4	538:20	9	M1 += X , M2 += Y ;
EXPR	538:4	538:13	10	M1 += X , M2 += Y
ASSIGN	538:4	538:10	11	M1 += X
LVAL	538:4	538:4	12	M1
FIELD	538:4	538:4	13	M1
LEAF_NODE	538:4	538:4	14	M1
ASSIGN_OP	538:7	538:7	12	+=
LEAF_NODE	538:7	538:7	13	+=
RVAL	538:10	538:10	12	X
FIELD	538:10	538:10	13	X
LEAF_NODE	538:10	538:10	14	X
LEAF_NODE	538:11	538:11	11	,
ASSIGN	538:13	538:19	11	M2 += Y
LVAL	538:13	538:13	12	M2
FIELD	538:13	538:13	13	M2
LEAF_NODE	538:13	538:13	14	M2
ASSIGN_OP	538:16	538:16	12	+=
LEAF_NODE	538:16	538:16	13	+=
RVAL	538:19	538:19	12	Y
FIELD	538:19	538:19	13	Y
LEAF_NODE	538:19	538:19	14	Y
LEAF_NODE	538:20	538:20	10	;
EXPR_STATEMENT	539:4	539:28	9	D1 += X * X , D2 += Y * Y ;
EXPR	539:4	539:17	10	D1 += X * X , D2 += Y * Y
ASSIGN	539:4	539:10	11	D1 += X * X
LVAL	539:4	539:4	12	D1
FIELD	539:4	539:4	13	D1
LEAF_NODE	539:4	539:4	14	D1
ASSIGN_OP	539:7	539:7	12	+=
LEAF_NODE	539:7	539:7	13	+=
RVAL	539:10	539:14	12	X * X
FIELD	539:10	539:10	13	X
LEAF_NODE	539:10	539:10	14	X
LEAF_NODE	539:12	539:12	13	*
FIELD	539:14	539:14	13	X
LEAF_NODE	539:14	539:14	14	X
LEAF_NODE	539:15	539:15	11	,
ASSIGN	539:17	539:23	11	D2 += Y * Y
LVAL	539:17	539:17	12	D2
FIELD	539:17	539:17	13	D2
LEAF_NODE	539:17	539:17	14	D2
ASSIGN_OP	539:20	539:20	12	+=
LEAF_NODE	539:20	539:20	13	+=
RVAL	539:23	539:27	12	Y * Y
FIELD	539:23	539:23	13	Y
LEAF_NODE	539:23	539:23	14	Y
LEAF_NODE	539:25	539:25	13	*
FIELD	539:27	539:27	13	Y
LEAF_NODE	539:27	539:27	14	Y
LEAF_NODE	539:28	539:28	10	;
EXPR_STATEMENT	540:4	540:14	9	K += X * Y ;
EXPR	540:4	540:4	10	K += X * Y
ASSIGN	540:4	540:9	11	K += X * Y
LVAL	540:4	540:4	12	K
FIELD	540:4	540:4	13	K
LEAF_NODE	540:4	540:4	14	K
ASSIGN_OP	540:6	540:6	12	+=
LEAF_NODE	540:6	540:6	13	+=
RVAL	540:9	540:13	12	X * Y
FIELD	540:9	540:9	13	X
LEAF_NODE	540:9	540:9	14	X
LEAF_NODE	540:11	540:11	13	*
FIELD	540:13	540:13	13	Y
LEAF_NODE	540:13	540:13	14	Y
LEAF_NODE	540:14	540:14	10	;
LEAF_NODE	541:24	541:24	8	}
JUMP_STATEMENT	542:3	542:8	6	break DESTINATION ;
KEYWORD	542:3	542:3	7	break
LEAF_NODE	542:3	542:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	542:8	542:8	7	;
LABEL	543:2	543:17	6	case TIFF_FLOAT :
LEAF_NODE	543:2	543:2	7	case
LEAF_NODE	543:7	543:7	7	TIFF_FLOAT
LEAF_NODE	543:17	543:17	7	:
ITERATION	544:24	544:53	6	
KEYWORD	544:24	544:24	7	for
LEAF_NODE	544:24	544:24	8	for
LEAF_NODE	544:28	544:28	7	(
FOR_INIT	544:29	544:34	7	i = 0 ;
EXPR	544:29	544:29	8	i = 0
ASSIGN	544:29	544:33	9	i = 0
LVAL	544:29	544:29	10	i
FIELD	544:29	544:29	11	i
LEAF_NODE	544:29	544:29	12	i
ASSIGN_OP	544:31	544:31	10	=
LEAF_NODE	544:31	544:31	11	=
RVAL	544:33	544:33	10	0
FIELD	544:33	544:33	11	0
LEAF_NODE	544:33	544:33	12	0
LEAF_NODE	544:34	544:34	8	;
CONDITION	544:36	544:36	7	i < n_elem
EXPR	544:36	544:40	8	i < n_elem
FIELD	544:36	544:36	9	i
LEAF_NODE	544:36	544:36	10	i
REL_OPERATOR	544:38	544:38	9	<
LEAF_NODE	544:38	544:38	10	<
FIELD	544:40	544:40	9	n_elem
LEAF_NODE	544:40	544:40	10	n_elem
LEAF_NODE	544:46	544:46	7	;
FOR_EXPR	544:48	544:48	7	i ++
EXPR	544:48	544:48	8	i ++
FIELD	544:48	544:49	9	i ++
LEAF_NODE	544:48	544:48	10	i
LEAF_NODE	544:49	544:49	10	++
LEAF_NODE	544:51	544:51	7	)
STATEMENTS	544:53	550:24	7	
LEAF_NODE	544:53	544:53	8	{
STATEMENTS	545:4	549:4	8	
EXPR_STATEMENT	545:4	545:26	9	X = ( ( float * ) buf1 ) [ i ] ;
EXPR	545:4	545:4	10	X = ( ( float * ) buf1 ) [ i ]
ASSIGN	545:4	545:8	11	X = ( ( float * ) buf1 ) [ i ]
LVAL	545:4	545:4	12	X
FIELD	545:4	545:4	13	X
LEAF_NODE	545:4	545:4	14	X
ASSIGN_OP	545:6	545:6	12	=
LEAF_NODE	545:6	545:6	13	=
RVAL	545:8	545:25	12	( ( float * ) buf1 ) [ i ]
LEAF_NODE	545:8	545:8	13	(
LEAF_NODE	545:9	545:9	13	(
TYPE_NAME	545:10	545:10	13	float
LEAF_NODE	545:10	545:10	14	float
LEAF_NODE	545:16	545:16	13	*
LEAF_NODE	545:17	545:17	13	)
FIELD	545:18	545:18	13	buf1
LEAF_NODE	545:18	545:18	14	buf1
LEAF_NODE	545:22	545:22	13	)
LEAF_NODE	545:23	545:23	13	[
EXPR	545:24	545:24	13	i
FIELD	545:24	545:24	14	i
LEAF_NODE	545:24	545:24	15	i
LEAF_NODE	545:25	545:25	13	]
LEAF_NODE	545:26	545:26	10	;
EXPR_STATEMENT	546:4	546:26	9	Y = ( ( float * ) buf2 ) [ i ] ;
EXPR	546:4	546:4	10	Y = ( ( float * ) buf2 ) [ i ]
ASSIGN	546:4	546:8	11	Y = ( ( float * ) buf2 ) [ i ]
LVAL	546:4	546:4	12	Y
FIELD	546:4	546:4	13	Y
LEAF_NODE	546:4	546:4	14	Y
ASSIGN_OP	546:6	546:6	12	=
LEAF_NODE	546:6	546:6	13	=
RVAL	546:8	546:25	12	( ( float * ) buf2 ) [ i ]
LEAF_NODE	546:8	546:8	13	(
LEAF_NODE	546:9	546:9	13	(
TYPE_NAME	546:10	546:10	13	float
LEAF_NODE	546:10	546:10	14	float
LEAF_NODE	546:16	546:16	13	*
LEAF_NODE	546:17	546:17	13	)
FIELD	546:18	546:18	13	buf2
LEAF_NODE	546:18	546:18	14	buf2
LEAF_NODE	546:22	546:22	13	)
LEAF_NODE	546:23	546:23	13	[
EXPR	546:24	546:24	13	i
FIELD	546:24	546:24	14	i
LEAF_NODE	546:24	546:24	15	i
LEAF_NODE	546:25	546:25	13	]
LEAF_NODE	546:26	546:26	10	;
EXPR_STATEMENT	547:4	547:20	9	M1 += X , M2 += Y ;
EXPR	547:4	547:13	10	M1 += X , M2 += Y
ASSIGN	547:4	547:10	11	M1 += X
LVAL	547:4	547:4	12	M1
FIELD	547:4	547:4	13	M1
LEAF_NODE	547:4	547:4	14	M1
ASSIGN_OP	547:7	547:7	12	+=
LEAF_NODE	547:7	547:7	13	+=
RVAL	547:10	547:10	12	X
FIELD	547:10	547:10	13	X
LEAF_NODE	547:10	547:10	14	X
LEAF_NODE	547:11	547:11	11	,
ASSIGN	547:13	547:19	11	M2 += Y
LVAL	547:13	547:13	12	M2
FIELD	547:13	547:13	13	M2
LEAF_NODE	547:13	547:13	14	M2
ASSIGN_OP	547:16	547:16	12	+=
LEAF_NODE	547:16	547:16	13	+=
RVAL	547:19	547:19	12	Y
FIELD	547:19	547:19	13	Y
LEAF_NODE	547:19	547:19	14	Y
LEAF_NODE	547:20	547:20	10	;
EXPR_STATEMENT	548:4	548:28	9	D1 += X * X , D2 += Y * Y ;
EXPR	548:4	548:17	10	D1 += X * X , D2 += Y * Y
ASSIGN	548:4	548:10	11	D1 += X * X
LVAL	548:4	548:4	12	D1
FIELD	548:4	548:4	13	D1
LEAF_NODE	548:4	548:4	14	D1
ASSIGN_OP	548:7	548:7	12	+=
LEAF_NODE	548:7	548:7	13	+=
RVAL	548:10	548:14	12	X * X
FIELD	548:10	548:10	13	X
LEAF_NODE	548:10	548:10	14	X
LEAF_NODE	548:12	548:12	13	*
FIELD	548:14	548:14	13	X
LEAF_NODE	548:14	548:14	14	X
LEAF_NODE	548:15	548:15	11	,
ASSIGN	548:17	548:23	11	D2 += Y * Y
LVAL	548:17	548:17	12	D2
FIELD	548:17	548:17	13	D2
LEAF_NODE	548:17	548:17	14	D2
ASSIGN_OP	548:20	548:20	12	+=
LEAF_NODE	548:20	548:20	13	+=
RVAL	548:23	548:27	12	Y * Y
FIELD	548:23	548:23	13	Y
LEAF_NODE	548:23	548:23	14	Y
LEAF_NODE	548:25	548:25	13	*
FIELD	548:27	548:27	13	Y
LEAF_NODE	548:27	548:27	14	Y
LEAF_NODE	548:28	548:28	10	;
EXPR_STATEMENT	549:4	549:14	9	K += X * Y ;
EXPR	549:4	549:4	10	K += X * Y
ASSIGN	549:4	549:9	11	K += X * Y
LVAL	549:4	549:4	12	K
FIELD	549:4	549:4	13	K
LEAF_NODE	549:4	549:4	14	K
ASSIGN_OP	549:6	549:6	12	+=
LEAF_NODE	549:6	549:6	13	+=
RVAL	549:9	549:13	12	X * Y
FIELD	549:9	549:9	13	X
LEAF_NODE	549:9	549:9	14	X
LEAF_NODE	549:11	549:11	13	*
FIELD	549:13	549:13	13	Y
LEAF_NODE	549:13	549:13	14	Y
LEAF_NODE	549:14	549:14	10	;
LEAF_NODE	550:24	550:24	8	}
JUMP_STATEMENT	551:3	551:8	6	break DESTINATION ;
KEYWORD	551:3	551:3	7	break
LEAF_NODE	551:3	551:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	551:8	551:8	7	;
LABEL	552:2	552:18	6	case TIFF_DOUBLE :
LEAF_NODE	552:2	552:2	7	case
LEAF_NODE	552:7	552:7	7	TIFF_DOUBLE
LEAF_NODE	552:18	552:18	7	:
ITERATION	553:24	553:53	6	
KEYWORD	553:24	553:24	7	for
LEAF_NODE	553:24	553:24	8	for
LEAF_NODE	553:28	553:28	7	(
FOR_INIT	553:29	553:34	7	i = 0 ;
EXPR	553:29	553:29	8	i = 0
ASSIGN	553:29	553:33	9	i = 0
LVAL	553:29	553:29	10	i
FIELD	553:29	553:29	11	i
LEAF_NODE	553:29	553:29	12	i
ASSIGN_OP	553:31	553:31	10	=
LEAF_NODE	553:31	553:31	11	=
RVAL	553:33	553:33	10	0
FIELD	553:33	553:33	11	0
LEAF_NODE	553:33	553:33	12	0
LEAF_NODE	553:34	553:34	8	;
CONDITION	553:36	553:36	7	i < n_elem
EXPR	553:36	553:40	8	i < n_elem
FIELD	553:36	553:36	9	i
LEAF_NODE	553:36	553:36	10	i
REL_OPERATOR	553:38	553:38	9	<
LEAF_NODE	553:38	553:38	10	<
FIELD	553:40	553:40	9	n_elem
LEAF_NODE	553:40	553:40	10	n_elem
LEAF_NODE	553:46	553:46	7	;
FOR_EXPR	553:48	553:48	7	i ++
EXPR	553:48	553:48	8	i ++
FIELD	553:48	553:49	9	i ++
LEAF_NODE	553:48	553:48	10	i
LEAF_NODE	553:49	553:49	10	++
LEAF_NODE	553:51	553:51	7	)
STATEMENTS	553:53	559:24	7	
LEAF_NODE	553:53	553:53	8	{
STATEMENTS	554:4	558:4	8	
EXPR_STATEMENT	554:4	554:27	9	X = ( ( double * ) buf1 ) [ i ] ;
EXPR	554:4	554:4	10	X = ( ( double * ) buf1 ) [ i ]
ASSIGN	554:4	554:8	11	X = ( ( double * ) buf1 ) [ i ]
LVAL	554:4	554:4	12	X
FIELD	554:4	554:4	13	X
LEAF_NODE	554:4	554:4	14	X
ASSIGN_OP	554:6	554:6	12	=
LEAF_NODE	554:6	554:6	13	=
RVAL	554:8	554:26	12	( ( double * ) buf1 ) [ i ]
LEAF_NODE	554:8	554:8	13	(
LEAF_NODE	554:9	554:9	13	(
TYPE_NAME	554:10	554:10	13	double
LEAF_NODE	554:10	554:10	14	double
LEAF_NODE	554:17	554:17	13	*
LEAF_NODE	554:18	554:18	13	)
FIELD	554:19	554:19	13	buf1
LEAF_NODE	554:19	554:19	14	buf1
LEAF_NODE	554:23	554:23	13	)
LEAF_NODE	554:24	554:24	13	[
EXPR	554:25	554:25	13	i
FIELD	554:25	554:25	14	i
LEAF_NODE	554:25	554:25	15	i
LEAF_NODE	554:26	554:26	13	]
LEAF_NODE	554:27	554:27	10	;
EXPR_STATEMENT	555:4	555:27	9	Y = ( ( double * ) buf2 ) [ i ] ;
EXPR	555:4	555:4	10	Y = ( ( double * ) buf2 ) [ i ]
ASSIGN	555:4	555:8	11	Y = ( ( double * ) buf2 ) [ i ]
LVAL	555:4	555:4	12	Y
FIELD	555:4	555:4	13	Y
LEAF_NODE	555:4	555:4	14	Y
ASSIGN_OP	555:6	555:6	12	=
LEAF_NODE	555:6	555:6	13	=
RVAL	555:8	555:26	12	( ( double * ) buf2 ) [ i ]
LEAF_NODE	555:8	555:8	13	(
LEAF_NODE	555:9	555:9	13	(
TYPE_NAME	555:10	555:10	13	double
LEAF_NODE	555:10	555:10	14	double
LEAF_NODE	555:17	555:17	13	*
LEAF_NODE	555:18	555:18	13	)
FIELD	555:19	555:19	13	buf2
LEAF_NODE	555:19	555:19	14	buf2
LEAF_NODE	555:23	555:23	13	)
LEAF_NODE	555:24	555:24	13	[
EXPR	555:25	555:25	13	i
FIELD	555:25	555:25	14	i
LEAF_NODE	555:25	555:25	15	i
LEAF_NODE	555:26	555:26	13	]
LEAF_NODE	555:27	555:27	10	;
EXPR_STATEMENT	556:4	556:20	9	M1 += X , M2 += Y ;
EXPR	556:4	556:13	10	M1 += X , M2 += Y
ASSIGN	556:4	556:10	11	M1 += X
LVAL	556:4	556:4	12	M1
FIELD	556:4	556:4	13	M1
LEAF_NODE	556:4	556:4	14	M1
ASSIGN_OP	556:7	556:7	12	+=
LEAF_NODE	556:7	556:7	13	+=
RVAL	556:10	556:10	12	X
FIELD	556:10	556:10	13	X
LEAF_NODE	556:10	556:10	14	X
LEAF_NODE	556:11	556:11	11	,
ASSIGN	556:13	556:19	11	M2 += Y
LVAL	556:13	556:13	12	M2
FIELD	556:13	556:13	13	M2
LEAF_NODE	556:13	556:13	14	M2
ASSIGN_OP	556:16	556:16	12	+=
LEAF_NODE	556:16	556:16	13	+=
RVAL	556:19	556:19	12	Y
FIELD	556:19	556:19	13	Y
LEAF_NODE	556:19	556:19	14	Y
LEAF_NODE	556:20	556:20	10	;
EXPR_STATEMENT	557:4	557:28	9	D1 += X * X , D2 += Y * Y ;
EXPR	557:4	557:17	10	D1 += X * X , D2 += Y * Y
ASSIGN	557:4	557:10	11	D1 += X * X
LVAL	557:4	557:4	12	D1
FIELD	557:4	557:4	13	D1
LEAF_NODE	557:4	557:4	14	D1
ASSIGN_OP	557:7	557:7	12	+=
LEAF_NODE	557:7	557:7	13	+=
RVAL	557:10	557:14	12	X * X
FIELD	557:10	557:10	13	X
LEAF_NODE	557:10	557:10	14	X
LEAF_NODE	557:12	557:12	13	*
FIELD	557:14	557:14	13	X
LEAF_NODE	557:14	557:14	14	X
LEAF_NODE	557:15	557:15	11	,
ASSIGN	557:17	557:23	11	D2 += Y * Y
LVAL	557:17	557:17	12	D2
FIELD	557:17	557:17	13	D2
LEAF_NODE	557:17	557:17	14	D2
ASSIGN_OP	557:20	557:20	12	+=
LEAF_NODE	557:20	557:20	13	+=
RVAL	557:23	557:27	12	Y * Y
FIELD	557:23	557:23	13	Y
LEAF_NODE	557:23	557:23	14	Y
LEAF_NODE	557:25	557:25	13	*
FIELD	557:27	557:27	13	Y
LEAF_NODE	557:27	557:27	14	Y
LEAF_NODE	557:28	557:28	10	;
EXPR_STATEMENT	558:4	558:14	9	K += X * Y ;
EXPR	558:4	558:4	10	K += X * Y
ASSIGN	558:4	558:9	11	K += X * Y
LVAL	558:4	558:4	12	K
FIELD	558:4	558:4	13	K
LEAF_NODE	558:4	558:4	14	K
ASSIGN_OP	558:6	558:6	12	+=
LEAF_NODE	558:6	558:6	13	+=
RVAL	558:9	558:13	12	X * Y
FIELD	558:9	558:9	13	X
LEAF_NODE	558:9	558:9	14	X
LEAF_NODE	558:11	558:11	13	*
FIELD	558:13	558:13	13	Y
LEAF_NODE	558:13	558:13	14	Y
LEAF_NODE	558:14	558:14	10	;
LEAF_NODE	559:24	559:24	8	}
JUMP_STATEMENT	560:3	560:8	6	break DESTINATION ;
KEYWORD	560:3	560:3	7	break
LEAF_NODE	560:3	560:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	560:8	560:8	7	;
LEAF_NODE	561:1	561:1	5	}
EXPR_STATEMENT	563:1	563:13	3	M1 /= n_elem ;
EXPR	563:1	563:1	4	M1 /= n_elem
ASSIGN	563:1	563:7	5	M1 /= n_elem
LVAL	563:1	563:1	6	M1
FIELD	563:1	563:1	7	M1
LEAF_NODE	563:1	563:1	8	M1
ASSIGN_OP	563:4	563:4	6	/=
LEAF_NODE	563:4	563:4	7	/=
RVAL	563:7	563:7	6	n_elem
FIELD	563:7	563:7	7	n_elem
LEAF_NODE	563:7	563:7	8	n_elem
LEAF_NODE	563:13	563:13	4	;
EXPR_STATEMENT	564:1	564:13	3	M2 /= n_elem ;
EXPR	564:1	564:1	4	M2 /= n_elem
ASSIGN	564:1	564:7	5	M2 /= n_elem
LVAL	564:1	564:1	6	M2
FIELD	564:1	564:1	7	M2
LEAF_NODE	564:1	564:1	8	M2
ASSIGN_OP	564:4	564:4	6	/=
LEAF_NODE	564:4	564:4	7	/=
RVAL	564:7	564:7	6	n_elem
FIELD	564:7	564:7	7	n_elem
LEAF_NODE	564:7	564:7	8	n_elem
LEAF_NODE	564:13	564:13	4	;
LEAF_NODE	565:1	565:1	3	D1
LEAF_NODE	565:4	565:4	3	-=
LEAF_NODE	565:7	565:7	3	M1
EXPR_STATEMENT	565:10	565:23	3	* M1 * n_elem ;
EXPR	565:10	565:17	4	* M1 * n_elem
UNARY_EXPR	565:10	565:12	5	* M1
UNARY_OPERATOR	565:10	565:10	6	*
LEAF_NODE	565:10	565:10	7	*
FIELD	565:12	565:12	6	M1
LEAF_NODE	565:12	565:12	7	M1
LEAF_NODE	565:15	565:15	5	*
FIELD	565:17	565:17	5	n_elem
LEAF_NODE	565:17	565:17	6	n_elem
LEAF_NODE	565:23	565:23	4	;
LEAF_NODE	566:1	566:1	3	D2
LEAF_NODE	566:4	566:4	3	-=
LEAF_NODE	566:7	566:7	3	M2
EXPR_STATEMENT	566:10	566:23	3	* M2 * n_elem ;
EXPR	566:10	566:17	4	* M2 * n_elem
UNARY_EXPR	566:10	566:12	5	* M2
UNARY_OPERATOR	566:10	566:10	6	*
LEAF_NODE	566:10	566:10	7	*
FIELD	566:12	566:12	6	M2
LEAF_NODE	566:12	566:12	7	M2
LEAF_NODE	566:15	566:15	5	*
FIELD	566:17	566:17	5	n_elem
LEAF_NODE	566:17	566:17	6	n_elem
LEAF_NODE	566:23	566:23	4	;
LEAF_NODE	567:1	567:1	3	K
LEAF_NODE	567:3	567:3	3	=
LEAF_NODE	567:5	567:5	3	(
LEAF_NODE	567:6	567:6	3	K
LEAF_NODE	567:8	567:8	3	-
LEAF_NODE	567:10	567:10	3	M1
LEAF_NODE	567:13	567:13	3	*
LEAF_NODE	567:15	567:15	3	M2
LEAF_NODE	567:18	567:18	3	*
LEAF_NODE	567:20	567:20	3	n_elem
LEAF_NODE	567:26	567:26	3	)
LEAF_NODE	567:28	567:28	3	/
EXPR_STATEMENT	567:30	567:43	3	sqrt ( D1 * D2 ) ;
EXPR	567:30	567:30	4	sqrt ( D1 * D2 )
FUNCTION_CALL	567:30	567:42	5	sqrt ( D1 * D2 )
CALLEE	567:30	567:30	6	sqrt
LEAF_NODE	567:30	567:30	7	sqrt
LEAF_NODE	567:34	567:34	6	(
ARGUMENT	567:35	567:40	6	D1 * D2
FIELD	567:35	567:35	7	D1
LEAF_NODE	567:35	567:35	8	D1
LEAF_NODE	567:38	567:38	7	*
FIELD	567:40	567:40	7	D2
LEAF_NODE	567:40	567:40	8	D2
LEAF_NODE	567:42	567:42	6	)
LEAF_NODE	567:43	567:43	4	;
JUMP_STATEMENT	569:1	569:9	3	return K ;
KEYWORD	569:1	569:1	4	return
LEAF_NODE	569:1	569:1	5	return
DESTINATION	569:8	569:8	4	K
EXPR	569:8	569:8	5	K
FIELD	569:8	569:8	6	K
LEAF_NODE	569:8	569:8	7	K
LEAF_NODE	569:9	569:9	4	;
LEAF_NODE	570:0	570:0	2	}
FUNCTION_DEF	572:0	607:0	1	
RETURN_TYPE	572:0	572:7	2	static int
LEAF_NODE	572:0	572:0	3	static
TYPE_NAME	572:7	572:7	3	int
LEAF_NODE	572:7	572:7	4	int
FUNCTION_NAME	573:0	573:0	2	processCompressOptions
LEAF_NODE	573:0	573:0	3	processCompressOptions
PARAMETER_LIST	573:22	573:32	2	( char * opt )
LEAF_NODE	573:22	573:22	3	(
PARAMETER_DECL	573:23	573:29	3	char * opt
TYPE	573:23	573:27	4	char *
TYPE_NAME	573:23	573:23	5	char
LEAF_NODE	573:23	573:23	6	char
POINTER	573:27	573:27	5	*
LEAF_NODE	573:27	573:27	6	*
NAME	573:29	573:29	4	opt
LEAF_NODE	573:29	573:29	5	opt
LEAF_NODE	573:32	573:32	3	)
LEAF_NODE	574:0	574:0	2	{
STATEMENTS	575:1	606:1	2	
SELECTION	575:1	576:2	3	
KEYWORD	575:1	575:1	4	if
LEAF_NODE	575:1	575:1	5	if
LEAF_NODE	575:4	575:4	4	(
CONDITION	575:5	575:5	4	strcmp ( opt , "none" ) == 0
EXPR	575:5	575:28	5	strcmp ( opt , "none" ) == 0
FUNCTION_CALL	575:5	575:23	6	strcmp ( opt , "none" )
CALLEE	575:5	575:5	7	strcmp
LEAF_NODE	575:5	575:5	8	strcmp
LEAF_NODE	575:11	575:11	7	(
ARGUMENT	575:12	575:12	7	opt
FIELD	575:12	575:12	8	opt
LEAF_NODE	575:12	575:12	9	opt
LEAF_NODE	575:15	575:15	7	,
ARGUMENT	575:17	575:17	7	"none"
FIELD	575:17	575:17	8	"none"
LEAF_NODE	575:17	575:17	9	"none"
LEAF_NODE	575:23	575:23	7	)
EQ_OPERATOR	575:25	575:25	6	==
LEAF_NODE	575:25	575:25	7	==
FIELD	575:28	575:28	6	0
LEAF_NODE	575:28	575:28	7	0
LEAF_NODE	575:29	575:29	4	)
STATEMENTS	576:2	576:2	4	
EXPR_STATEMENT	576:2	576:32	5	compression = COMPRESSION_NONE ;
EXPR	576:2	576:2	6	compression = COMPRESSION_NONE
ASSIGN	576:2	576:16	7	compression = COMPRESSION_NONE
LVAL	576:2	576:2	8	compression
FIELD	576:2	576:2	9	compression
LEAF_NODE	576:2	576:2	10	compression
ASSIGN_OP	576:14	576:14	8	=
LEAF_NODE	576:14	576:14	9	=
RVAL	576:16	576:16	8	COMPRESSION_NONE
FIELD	576:16	576:16	9	COMPRESSION_NONE
LEAF_NODE	576:16	576:16	10	COMPRESSION_NONE
LEAF_NODE	576:32	576:32	6	;
SELECTION	577:1	577:6	3	
KEYWORD	577:1	577:1	4	else
LEAF_NODE	577:1	577:1	5	else
STATEMENTS	577:6	577:6	4	
SELECTION	577:6	578:2	5	
KEYWORD	577:6	577:6	6	if
LEAF_NODE	577:6	577:6	7	if
LEAF_NODE	577:9	577:9	6	(
CONDITION	577:10	577:10	6	strcmp ( opt , "packbits" ) == 0
EXPR	577:10	577:37	7	strcmp ( opt , "packbits" ) == 0
FUNCTION_CALL	577:10	577:32	8	strcmp ( opt , "packbits" )
CALLEE	577:10	577:10	9	strcmp
LEAF_NODE	577:10	577:10	10	strcmp
LEAF_NODE	577:16	577:16	9	(
ARGUMENT	577:17	577:17	9	opt
FIELD	577:17	577:17	10	opt
LEAF_NODE	577:17	577:17	11	opt
LEAF_NODE	577:20	577:20	9	,
ARGUMENT	577:22	577:22	9	"packbits"
FIELD	577:22	577:22	10	"packbits"
LEAF_NODE	577:22	577:22	11	"packbits"
LEAF_NODE	577:32	577:32	9	)
EQ_OPERATOR	577:34	577:34	8	==
LEAF_NODE	577:34	577:34	9	==
FIELD	577:37	577:37	8	0
LEAF_NODE	577:37	577:37	9	0
LEAF_NODE	577:38	577:38	6	)
STATEMENTS	578:2	578:2	6	
EXPR_STATEMENT	578:2	578:36	7	compression = COMPRESSION_PACKBITS ;
EXPR	578:2	578:2	8	compression = COMPRESSION_PACKBITS
ASSIGN	578:2	578:16	9	compression = COMPRESSION_PACKBITS
LVAL	578:2	578:2	10	compression
FIELD	578:2	578:2	11	compression
LEAF_NODE	578:2	578:2	12	compression
ASSIGN_OP	578:14	578:14	10	=
LEAF_NODE	578:14	578:14	11	=
RVAL	578:16	578:16	10	COMPRESSION_PACKBITS
FIELD	578:16	578:16	11	COMPRESSION_PACKBITS
LEAF_NODE	578:16	578:16	12	COMPRESSION_PACKBITS
LEAF_NODE	578:36	578:36	8	;
SELECTION	579:1	579:6	3	
KEYWORD	579:1	579:1	4	else
LEAF_NODE	579:1	579:1	5	else
STATEMENTS	579:6	579:6	4	
SELECTION	579:6	579:40	5	
KEYWORD	579:6	579:6	6	if
LEAF_NODE	579:6	579:6	7	if
LEAF_NODE	579:9	579:9	6	(
CONDITION	579:10	579:10	6	strncmp ( opt , "jpeg" , 4 ) == 0
EXPR	579:10	579:37	7	strncmp ( opt , "jpeg" , 4 ) == 0
FUNCTION_CALL	579:10	579:32	8	strncmp ( opt , "jpeg" , 4 )
CALLEE	579:10	579:10	9	strncmp
LEAF_NODE	579:10	579:10	10	strncmp
LEAF_NODE	579:17	579:17	9	(
ARGUMENT	579:18	579:18	9	opt
FIELD	579:18	579:18	10	opt
LEAF_NODE	579:18	579:18	11	opt
LEAF_NODE	579:21	579:21	9	,
ARGUMENT	579:23	579:23	9	"jpeg"
FIELD	579:23	579:23	10	"jpeg"
LEAF_NODE	579:23	579:23	11	"jpeg"
LEAF_NODE	579:29	579:29	9	,
ARGUMENT	579:31	579:31	9	4
FIELD	579:31	579:31	10	4
LEAF_NODE	579:31	579:31	11	4
LEAF_NODE	579:32	579:32	9	)
EQ_OPERATOR	579:34	579:34	8	==
LEAF_NODE	579:34	579:34	9	==
FIELD	579:37	579:37	8	0
LEAF_NODE	579:37	579:37	9	0
LEAF_NODE	579:38	579:38	6	)
STATEMENTS	579:40	594:1	6	
LEAF_NODE	579:40	579:40	7	{
STATEMENTS	580:2	583:16	7	
SIMPLE_DECL	580:2	580:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	580:2	580:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	580:2	580:6	10	char *
TYPE_NAME	580:2	580:2	11	char
LEAF_NODE	580:2	580:2	12	char
POINTER	580:6	580:6	11	*
LEAF_NODE	580:6	580:6	12	*
NAME	580:8	580:8	10	cp
LEAF_NODE	580:8	580:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	580:8	580:8	10	cp = strchr ( opt , ':' )
ASSIGN	580:8	580:13	11	cp = strchr ( opt , ':' )
LVAL	580:8	580:8	12	cp
NAME	580:8	580:8	13	cp
LEAF_NODE	580:8	580:8	14	cp
ASSIGN_OP	580:11	580:11	12	=
LEAF_NODE	580:11	580:11	13	=
RVAL	580:13	580:13	12	strchr ( opt , ':' )
FUNCTION_CALL	580:13	580:28	13	strchr ( opt , ':' )
CALLEE	580:13	580:13	14	strchr
LEAF_NODE	580:13	580:13	15	strchr
LEAF_NODE	580:19	580:19	14	(
ARGUMENT	580:20	580:20	14	opt
FIELD	580:20	580:20	15	opt
LEAF_NODE	580:20	580:20	16	opt
LEAF_NODE	580:23	580:23	14	,
ARGUMENT	580:25	580:25	14	':'
FIELD	580:25	580:25	15	':'
LEAF_NODE	580:25	580:25	16	':'
LEAF_NODE	580:28	580:28	14	)
LEAF_NODE	580:29	580:29	9	;
EXPR_STATEMENT	582:16	582:46	8	compression = COMPRESSION_JPEG ;
EXPR	582:16	582:16	9	compression = COMPRESSION_JPEG
ASSIGN	582:16	582:30	10	compression = COMPRESSION_JPEG
LVAL	582:16	582:16	11	compression
FIELD	582:16	582:16	12	compression
LEAF_NODE	582:16	582:16	13	compression
ASSIGN_OP	582:28	582:28	11	=
LEAF_NODE	582:28	582:28	12	=
RVAL	582:30	582:30	11	COMPRESSION_JPEG
FIELD	582:30	582:30	12	COMPRESSION_JPEG
LEAF_NODE	582:30	582:30	13	COMPRESSION_JPEG
LEAF_NODE	582:46	582:46	9	;
ITERATION	583:16	584:16	8	
KEYWORD	583:16	583:16	9	while
LEAF_NODE	583:16	583:16	10	while
LEAF_NODE	583:21	583:21	9	(
CONDITION	583:23	583:23	9	cp
EXPR	583:23	583:23	10	cp
FIELD	583:23	583:23	11	cp
LEAF_NODE	583:23	583:23	12	cp
LEAF_NODE	583:26	583:26	9	)
STATEMENTS	584:16	593:16	9	
LEAF_NODE	584:16	584:16	10	{
STATEMENTS	585:20	592:20	10	
SELECTION	585:20	586:3	11	
KEYWORD	585:20	585:20	12	if
LEAF_NODE	585:20	585:20	13	if
LEAF_NODE	585:23	585:23	12	(
CONDITION	585:24	585:24	12	isdigit ( ( int ) cp [ 1 ] )
EXPR	585:24	585:24	13	isdigit ( ( int ) cp [ 1 ] )
FUNCTION_CALL	585:24	585:42	14	isdigit ( ( int ) cp [ 1 ] )
CALLEE	585:24	585:24	15	isdigit
LEAF_NODE	585:24	585:24	16	isdigit
LEAF_NODE	585:31	585:31	15	(
ARGUMENT	585:32	585:37	15	( int ) cp [ 1 ]
LEAF_NODE	585:32	585:32	16	(
TYPE_NAME	585:33	585:33	16	int
LEAF_NODE	585:33	585:33	17	int
LEAF_NODE	585:36	585:36	16	)
FIELD	585:37	585:41	16	cp [ 1 ]
LEAF_NODE	585:37	585:37	17	cp
LEAF_NODE	585:39	585:39	17	[
EXPR	585:40	585:40	17	1
FIELD	585:40	585:40	18	1
LEAF_NODE	585:40	585:40	19	1
LEAF_NODE	585:41	585:41	17	]
LEAF_NODE	585:42	585:42	15	)
LEAF_NODE	585:43	585:43	12	)
STATEMENTS	586:3	586:3	12	
EXPR_STATEMENT	586:3	586:23	13	quality = atoi ( cp + 1 ) ;
EXPR	586:3	586:3	14	quality = atoi ( cp + 1 )
ASSIGN	586:3	586:13	15	quality = atoi ( cp + 1 )
LVAL	586:3	586:3	16	quality
FIELD	586:3	586:3	17	quality
LEAF_NODE	586:3	586:3	18	quality
ASSIGN_OP	586:11	586:11	16	=
LEAF_NODE	586:11	586:11	17	=
RVAL	586:13	586:13	16	atoi ( cp + 1 )
FUNCTION_CALL	586:13	586:22	17	atoi ( cp + 1 )
CALLEE	586:13	586:13	18	atoi
LEAF_NODE	586:13	586:13	19	atoi
LEAF_NODE	586:17	586:17	18	(
ARGUMENT	586:18	586:21	18	cp + 1
FIELD	586:18	586:18	19	cp
LEAF_NODE	586:18	586:18	20	cp
LEAF_NODE	586:20	586:20	19	+
FIELD	586:21	586:21	19	1
LEAF_NODE	586:21	586:21	20	1
LEAF_NODE	586:22	586:22	18	)
LEAF_NODE	586:23	586:23	14	;
SELECTION	587:20	587:25	11	
KEYWORD	587:20	587:20	12	else
LEAF_NODE	587:20	587:20	13	else
STATEMENTS	587:25	587:25	12	
SELECTION	587:25	588:3	13	
KEYWORD	587:25	587:25	14	if
LEAF_NODE	587:25	587:25	15	if
LEAF_NODE	587:28	587:28	14	(
CONDITION	587:29	587:29	14	cp [ 1 ] == 'r'
EXPR	587:29	587:38	15	cp [ 1 ] == 'r'
FIELD	587:29	587:33	16	cp [ 1 ]
LEAF_NODE	587:29	587:29	17	cp
LEAF_NODE	587:31	587:31	17	[
EXPR	587:32	587:32	17	1
FIELD	587:32	587:32	18	1
LEAF_NODE	587:32	587:32	19	1
LEAF_NODE	587:33	587:33	17	]
EQ_OPERATOR	587:35	587:35	16	==
LEAF_NODE	587:35	587:35	17	==
FIELD	587:38	587:38	16	'r'
LEAF_NODE	587:38	587:38	17	'r'
LEAF_NODE	587:42	587:42	14	)
STATEMENTS	588:3	588:3	14	
EXPR_STATEMENT	588:3	588:36	15	jpegcolormode = JPEGCOLORMODE_RAW ;
EXPR	588:3	588:3	16	jpegcolormode = JPEGCOLORMODE_RAW
ASSIGN	588:3	588:19	17	jpegcolormode = JPEGCOLORMODE_RAW
LVAL	588:3	588:3	18	jpegcolormode
FIELD	588:3	588:3	19	jpegcolormode
LEAF_NODE	588:3	588:3	20	jpegcolormode
ASSIGN_OP	588:17	588:17	18	=
LEAF_NODE	588:17	588:17	19	=
RVAL	588:19	588:19	18	JPEGCOLORMODE_RAW
FIELD	588:19	588:19	19	JPEGCOLORMODE_RAW
LEAF_NODE	588:19	588:19	20	JPEGCOLORMODE_RAW
LEAF_NODE	588:36	588:36	16	;
SELECTION	589:20	590:24	11	
KEYWORD	589:20	589:20	12	else
LEAF_NODE	589:20	589:20	13	else
STATEMENTS	590:24	590:24	12	
EXPR_STATEMENT	590:24	590:31	13	usage ( ) ;
EXPR	590:24	590:24	14	usage ( )
FUNCTION_CALL	590:24	590:30	15	usage ( )
CALLEE	590:24	590:24	16	usage
LEAF_NODE	590:24	590:24	17	usage
LEAF_NODE	590:29	590:29	16	(
LEAF_NODE	590:30	590:30	16	)
LEAF_NODE	590:31	590:31	14	;
EXPR_STATEMENT	592:20	592:41	11	cp = strchr ( cp + 1 , ':' ) ;
EXPR	592:20	592:20	12	cp = strchr ( cp + 1 , ':' )
ASSIGN	592:20	592:25	13	cp = strchr ( cp + 1 , ':' )
LVAL	592:20	592:20	14	cp
FIELD	592:20	592:20	15	cp
LEAF_NODE	592:20	592:20	16	cp
ASSIGN_OP	592:23	592:23	14	=
LEAF_NODE	592:23	592:23	15	=
RVAL	592:25	592:25	14	strchr ( cp + 1 , ':' )
FUNCTION_CALL	592:25	592:40	15	strchr ( cp + 1 , ':' )
CALLEE	592:25	592:25	16	strchr
LEAF_NODE	592:25	592:25	17	strchr
LEAF_NODE	592:31	592:31	16	(
ARGUMENT	592:32	592:35	16	cp + 1
FIELD	592:32	592:32	17	cp
LEAF_NODE	592:32	592:32	18	cp
LEAF_NODE	592:34	592:34	17	+
FIELD	592:35	592:35	17	1
LEAF_NODE	592:35	592:35	18	1
LEAF_NODE	592:36	592:36	16	,
ARGUMENT	592:37	592:37	16	':'
FIELD	592:37	592:37	17	':'
LEAF_NODE	592:37	592:37	18	':'
LEAF_NODE	592:40	592:40	16	)
LEAF_NODE	592:41	592:41	12	;
LEAF_NODE	593:16	593:16	10	}
LEAF_NODE	594:1	594:1	7	}
SELECTION	594:3	594:8	3	
KEYWORD	594:3	594:3	4	else
LEAF_NODE	594:3	594:3	5	else
STATEMENTS	594:8	594:8	4	
SELECTION	594:8	594:41	5	
KEYWORD	594:8	594:8	6	if
LEAF_NODE	594:8	594:8	7	if
LEAF_NODE	594:11	594:11	6	(
CONDITION	594:12	594:12	6	strncmp ( opt , "lzw" , 3 ) == 0
EXPR	594:12	594:38	7	strncmp ( opt , "lzw" , 3 ) == 0
FUNCTION_CALL	594:12	594:33	8	strncmp ( opt , "lzw" , 3 )
CALLEE	594:12	594:12	9	strncmp
LEAF_NODE	594:12	594:12	10	strncmp
LEAF_NODE	594:19	594:19	9	(
ARGUMENT	594:20	594:20	9	opt
FIELD	594:20	594:20	10	opt
LEAF_NODE	594:20	594:20	11	opt
LEAF_NODE	594:23	594:23	9	,
ARGUMENT	594:25	594:25	9	"lzw"
FIELD	594:25	594:25	10	"lzw"
LEAF_NODE	594:25	594:25	11	"lzw"
LEAF_NODE	594:30	594:30	9	,
ARGUMENT	594:32	594:32	9	3
FIELD	594:32	594:32	10	3
LEAF_NODE	594:32	594:32	11	3
LEAF_NODE	594:33	594:33	9	)
EQ_OPERATOR	594:35	594:35	8	==
LEAF_NODE	594:35	594:35	9	==
FIELD	594:38	594:38	8	0
LEAF_NODE	594:38	594:38	9	0
LEAF_NODE	594:39	594:39	6	)
STATEMENTS	594:41	599:1	6	
LEAF_NODE	594:41	594:41	7	{
STATEMENTS	595:2	598:2	7	
SIMPLE_DECL	595:2	595:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	595:2	595:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	595:2	595:6	10	char *
TYPE_NAME	595:2	595:2	11	char
LEAF_NODE	595:2	595:2	12	char
POINTER	595:6	595:6	11	*
LEAF_NODE	595:6	595:6	12	*
NAME	595:8	595:8	10	cp
LEAF_NODE	595:8	595:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	595:8	595:8	10	cp = strchr ( opt , ':' )
ASSIGN	595:8	595:13	11	cp = strchr ( opt , ':' )
LVAL	595:8	595:8	12	cp
NAME	595:8	595:8	13	cp
LEAF_NODE	595:8	595:8	14	cp
ASSIGN_OP	595:11	595:11	12	=
LEAF_NODE	595:11	595:11	13	=
RVAL	595:13	595:13	12	strchr ( opt , ':' )
FUNCTION_CALL	595:13	595:28	13	strchr ( opt , ':' )
CALLEE	595:13	595:13	14	strchr
LEAF_NODE	595:13	595:13	15	strchr
LEAF_NODE	595:19	595:19	14	(
ARGUMENT	595:20	595:20	14	opt
FIELD	595:20	595:20	15	opt
LEAF_NODE	595:20	595:20	16	opt
LEAF_NODE	595:23	595:23	14	,
ARGUMENT	595:25	595:25	14	':'
FIELD	595:25	595:25	15	':'
LEAF_NODE	595:25	595:25	16	':'
LEAF_NODE	595:28	595:28	14	)
LEAF_NODE	595:29	595:29	9	;
SELECTION	596:2	597:3	8	
KEYWORD	596:2	596:2	9	if
LEAF_NODE	596:2	596:2	10	if
LEAF_NODE	596:5	596:5	9	(
CONDITION	596:6	596:6	9	cp
EXPR	596:6	596:6	10	cp
FIELD	596:6	596:6	11	cp
LEAF_NODE	596:6	596:6	12	cp
LEAF_NODE	596:8	596:8	9	)
STATEMENTS	597:3	597:3	9	
EXPR_STATEMENT	597:3	597:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	597:3	597:3	11	predictor = atoi ( cp + 1 )
ASSIGN	597:3	597:15	12	predictor = atoi ( cp + 1 )
LVAL	597:3	597:3	13	predictor
FIELD	597:3	597:3	14	predictor
LEAF_NODE	597:3	597:3	15	predictor
ASSIGN_OP	597:13	597:13	13	=
LEAF_NODE	597:13	597:13	14	=
RVAL	597:15	597:15	13	atoi ( cp + 1 )
FUNCTION_CALL	597:15	597:24	14	atoi ( cp + 1 )
CALLEE	597:15	597:15	15	atoi
LEAF_NODE	597:15	597:15	16	atoi
LEAF_NODE	597:19	597:19	15	(
ARGUMENT	597:20	597:23	15	cp + 1
FIELD	597:20	597:20	16	cp
LEAF_NODE	597:20	597:20	17	cp
LEAF_NODE	597:22	597:22	16	+
FIELD	597:23	597:23	16	1
LEAF_NODE	597:23	597:23	17	1
LEAF_NODE	597:24	597:24	15	)
LEAF_NODE	597:25	597:25	11	;
EXPR_STATEMENT	598:2	598:31	8	compression = COMPRESSION_LZW ;
EXPR	598:2	598:2	9	compression = COMPRESSION_LZW
ASSIGN	598:2	598:16	10	compression = COMPRESSION_LZW
LVAL	598:2	598:2	11	compression
FIELD	598:2	598:2	12	compression
LEAF_NODE	598:2	598:2	13	compression
ASSIGN_OP	598:14	598:14	11	=
LEAF_NODE	598:14	598:14	12	=
RVAL	598:16	598:16	11	COMPRESSION_LZW
FIELD	598:16	598:16	12	COMPRESSION_LZW
LEAF_NODE	598:16	598:16	13	COMPRESSION_LZW
LEAF_NODE	598:31	598:31	9	;
LEAF_NODE	599:1	599:1	7	}
SELECTION	599:3	599:8	3	
KEYWORD	599:3	599:3	4	else
LEAF_NODE	599:3	599:3	5	else
STATEMENTS	599:8	599:8	4	
SELECTION	599:8	599:41	5	
KEYWORD	599:8	599:8	6	if
LEAF_NODE	599:8	599:8	7	if
LEAF_NODE	599:11	599:11	6	(
CONDITION	599:12	599:12	6	strncmp ( opt , "zip" , 3 ) == 0
EXPR	599:12	599:38	7	strncmp ( opt , "zip" , 3 ) == 0
FUNCTION_CALL	599:12	599:33	8	strncmp ( opt , "zip" , 3 )
CALLEE	599:12	599:12	9	strncmp
LEAF_NODE	599:12	599:12	10	strncmp
LEAF_NODE	599:19	599:19	9	(
ARGUMENT	599:20	599:20	9	opt
FIELD	599:20	599:20	10	opt
LEAF_NODE	599:20	599:20	11	opt
LEAF_NODE	599:23	599:23	9	,
ARGUMENT	599:25	599:25	9	"zip"
FIELD	599:25	599:25	10	"zip"
LEAF_NODE	599:25	599:25	11	"zip"
LEAF_NODE	599:30	599:30	9	,
ARGUMENT	599:32	599:32	9	3
FIELD	599:32	599:32	10	3
LEAF_NODE	599:32	599:32	11	3
LEAF_NODE	599:33	599:33	9	)
EQ_OPERATOR	599:35	599:35	8	==
LEAF_NODE	599:35	599:35	9	==
FIELD	599:38	599:38	8	0
LEAF_NODE	599:38	599:38	9	0
LEAF_NODE	599:39	599:39	6	)
STATEMENTS	599:41	604:1	6	
LEAF_NODE	599:41	599:41	7	{
STATEMENTS	600:2	603:2	7	
SIMPLE_DECL	600:2	600:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	600:2	600:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	600:2	600:6	10	char *
TYPE_NAME	600:2	600:2	11	char
LEAF_NODE	600:2	600:2	12	char
POINTER	600:6	600:6	11	*
LEAF_NODE	600:6	600:6	12	*
NAME	600:8	600:8	10	cp
LEAF_NODE	600:8	600:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	600:8	600:8	10	cp = strchr ( opt , ':' )
ASSIGN	600:8	600:13	11	cp = strchr ( opt , ':' )
LVAL	600:8	600:8	12	cp
NAME	600:8	600:8	13	cp
LEAF_NODE	600:8	600:8	14	cp
ASSIGN_OP	600:11	600:11	12	=
LEAF_NODE	600:11	600:11	13	=
RVAL	600:13	600:13	12	strchr ( opt , ':' )
FUNCTION_CALL	600:13	600:28	13	strchr ( opt , ':' )
CALLEE	600:13	600:13	14	strchr
LEAF_NODE	600:13	600:13	15	strchr
LEAF_NODE	600:19	600:19	14	(
ARGUMENT	600:20	600:20	14	opt
FIELD	600:20	600:20	15	opt
LEAF_NODE	600:20	600:20	16	opt
LEAF_NODE	600:23	600:23	14	,
ARGUMENT	600:25	600:25	14	':'
FIELD	600:25	600:25	15	':'
LEAF_NODE	600:25	600:25	16	':'
LEAF_NODE	600:28	600:28	14	)
LEAF_NODE	600:29	600:29	9	;
SELECTION	601:2	602:3	8	
KEYWORD	601:2	601:2	9	if
LEAF_NODE	601:2	601:2	10	if
LEAF_NODE	601:5	601:5	9	(
CONDITION	601:6	601:6	9	cp
EXPR	601:6	601:6	10	cp
FIELD	601:6	601:6	11	cp
LEAF_NODE	601:6	601:6	12	cp
LEAF_NODE	601:8	601:8	9	)
STATEMENTS	602:3	602:3	9	
EXPR_STATEMENT	602:3	602:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	602:3	602:3	11	predictor = atoi ( cp + 1 )
ASSIGN	602:3	602:15	12	predictor = atoi ( cp + 1 )
LVAL	602:3	602:3	13	predictor
FIELD	602:3	602:3	14	predictor
LEAF_NODE	602:3	602:3	15	predictor
ASSIGN_OP	602:13	602:13	13	=
LEAF_NODE	602:13	602:13	14	=
RVAL	602:15	602:15	13	atoi ( cp + 1 )
FUNCTION_CALL	602:15	602:24	14	atoi ( cp + 1 )
CALLEE	602:15	602:15	15	atoi
LEAF_NODE	602:15	602:15	16	atoi
LEAF_NODE	602:19	602:19	15	(
ARGUMENT	602:20	602:23	15	cp + 1
FIELD	602:20	602:20	16	cp
LEAF_NODE	602:20	602:20	17	cp
LEAF_NODE	602:22	602:22	16	+
FIELD	602:23	602:23	16	1
LEAF_NODE	602:23	602:23	17	1
LEAF_NODE	602:24	602:24	15	)
LEAF_NODE	602:25	602:25	11	;
EXPR_STATEMENT	603:2	603:35	8	compression = COMPRESSION_DEFLATE ;
EXPR	603:2	603:2	9	compression = COMPRESSION_DEFLATE
ASSIGN	603:2	603:16	10	compression = COMPRESSION_DEFLATE
LVAL	603:2	603:2	11	compression
FIELD	603:2	603:2	12	compression
LEAF_NODE	603:2	603:2	13	compression
ASSIGN_OP	603:14	603:14	11	=
LEAF_NODE	603:14	603:14	12	=
RVAL	603:16	603:16	11	COMPRESSION_DEFLATE
FIELD	603:16	603:16	12	COMPRESSION_DEFLATE
LEAF_NODE	603:16	603:16	13	COMPRESSION_DEFLATE
LEAF_NODE	603:35	603:35	9	;
LEAF_NODE	604:1	604:1	7	}
SELECTION	604:3	605:2	3	
KEYWORD	604:3	604:3	4	else
LEAF_NODE	604:3	604:3	5	else
STATEMENTS	605:2	605:2	4	
JUMP_STATEMENT	605:2	605:12	5	return ( 0 ) ;
KEYWORD	605:2	605:2	6	return
LEAF_NODE	605:2	605:2	7	return
DESTINATION	605:9	605:9	6	( 0 )
EXPR	605:9	605:11	7	( 0 )
LEAF_NODE	605:9	605:9	8	(
FIELD	605:10	605:10	8	0
LEAF_NODE	605:10	605:10	9	0
LEAF_NODE	605:11	605:11	8	)
LEAF_NODE	605:12	605:12	6	;
JUMP_STATEMENT	606:1	606:11	3	return ( 1 ) ;
KEYWORD	606:1	606:1	4	return
LEAF_NODE	606:1	606:1	5	return
DESTINATION	606:8	606:8	4	( 1 )
EXPR	606:8	606:10	5	( 1 )
LEAF_NODE	606:8	606:8	6	(
FIELD	606:9	606:9	6	1
LEAF_NODE	606:9	606:9	7	1
LEAF_NODE	606:10	606:10	6	)
LEAF_NODE	606:11	606:11	4	;
LEAF_NODE	607:0	607:0	2	}
FUNCTION_DEF	669:0	680:0	1	
RETURN_TYPE	669:0	669:7	2	static void
LEAF_NODE	669:0	669:0	3	static
TYPE_NAME	669:7	669:7	3	void
LEAF_NODE	669:7	669:7	4	void
FUNCTION_NAME	670:0	670:0	2	usage
LEAF_NODE	670:0	670:0	3	usage
PARAMETER_LIST	670:5	670:10	2	( void )
LEAF_NODE	670:5	670:5	3	(
PARAMETER_DECL	670:6	670:6	3	void
LEAF_NODE	670:6	670:6	4	void
LEAF_NODE	670:10	670:10	3	)
LEAF_NODE	671:0	671:0	2	{
STATEMENTS	672:1	679:1	2	
SIMPLE_DECL	672:1	672:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	672:1	672:6	4	char [ BUFSIZ ] buf
TYPE	672:1	672:9	5	char [ BUFSIZ ]
TYPE_NAME	672:1	672:1	6	char
LEAF_NODE	672:1	672:1	7	char
TYPE_SUFFIX	672:9	672:16	6	[ BUFSIZ ]
LEAF_NODE	672:9	672:9	7	[
FIELD	672:10	672:10	7	BUFSIZ
LEAF_NODE	672:10	672:10	8	BUFSIZ
LEAF_NODE	672:16	672:16	7	]
NAME	672:6	672:6	5	buf
LEAF_NODE	672:6	672:6	6	buf
LEAF_NODE	672:17	672:17	4	;
SIMPLE_DECL	673:1	673:6	3	int i ;
VAR_DECL	673:1	673:5	4	int i
TYPE	673:1	673:1	5	int
TYPE_NAME	673:1	673:1	6	int
LEAF_NODE	673:1	673:1	7	int
NAME	673:5	673:5	5	i
LEAF_NODE	673:5	673:5	6	i
LEAF_NODE	673:6	673:6	4	;
EXPR_STATEMENT	675:1	675:20	3	setbuf ( stderr , buf ) ;
EXPR	675:1	675:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	675:1	675:19	5	setbuf ( stderr , buf )
CALLEE	675:1	675:1	6	setbuf
LEAF_NODE	675:1	675:1	7	setbuf
LEAF_NODE	675:7	675:7	6	(
ARGUMENT	675:8	675:8	6	stderr
FIELD	675:8	675:8	7	stderr
LEAF_NODE	675:8	675:8	8	stderr
LEAF_NODE	675:14	675:14	6	,
ARGUMENT	675:16	675:16	6	buf
FIELD	675:16	675:16	7	buf
LEAF_NODE	675:16	675:16	8	buf
LEAF_NODE	675:19	675:19	6	)
LEAF_NODE	675:20	675:20	4	;
EXPR_STATEMENT	676:8	676:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	676:8	676:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	676:8	676:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	676:8	676:8	6	fprintf
LEAF_NODE	676:8	676:8	7	fprintf
LEAF_NODE	676:15	676:15	6	(
ARGUMENT	676:16	676:16	6	stderr
FIELD	676:16	676:16	7	stderr
LEAF_NODE	676:16	676:16	8	stderr
LEAF_NODE	676:22	676:22	6	,
ARGUMENT	676:24	676:24	6	"%s\n\n"
FIELD	676:24	676:24	7	"%s\n\n"
LEAF_NODE	676:24	676:24	8	"%s\n\n"
LEAF_NODE	676:32	676:32	6	,
ARGUMENT	676:34	676:34	6	TIFFGetVersion ( )
FUNCTION_CALL	676:34	676:49	7	TIFFGetVersion ( )
CALLEE	676:34	676:34	8	TIFFGetVersion
LEAF_NODE	676:34	676:34	9	TIFFGetVersion
LEAF_NODE	676:48	676:48	8	(
LEAF_NODE	676:49	676:49	8	)
LEAF_NODE	676:50	676:50	6	)
LEAF_NODE	676:51	676:51	4	;
ITERATION	677:1	678:2	3	
KEYWORD	677:1	677:1	4	for
LEAF_NODE	677:1	677:1	5	for
LEAF_NODE	677:5	677:5	4	(
FOR_INIT	677:6	677:11	4	i = 0 ;
EXPR	677:6	677:6	5	i = 0
ASSIGN	677:6	677:10	6	i = 0
LVAL	677:6	677:6	7	i
FIELD	677:6	677:6	8	i
LEAF_NODE	677:6	677:6	9	i
ASSIGN_OP	677:8	677:8	7	=
LEAF_NODE	677:8	677:8	8	=
RVAL	677:10	677:10	7	0
FIELD	677:10	677:10	8	0
LEAF_NODE	677:10	677:10	9	0
LEAF_NODE	677:11	677:11	5	;
CONDITION	677:13	677:13	4	stuff [ i ] != NULL
EXPR	677:13	677:25	5	stuff [ i ] != NULL
FIELD	677:13	677:20	6	stuff [ i ]
LEAF_NODE	677:13	677:13	7	stuff
LEAF_NODE	677:18	677:18	7	[
EXPR	677:19	677:19	7	i
FIELD	677:19	677:19	8	i
LEAF_NODE	677:19	677:19	9	i
LEAF_NODE	677:20	677:20	7	]
EQ_OPERATOR	677:22	677:22	6	!=
LEAF_NODE	677:22	677:22	7	!=
FIELD	677:25	677:25	6	NULL
LEAF_NODE	677:25	677:25	7	NULL
LEAF_NODE	677:29	677:29	4	;
FOR_EXPR	677:31	677:31	4	i ++
EXPR	677:31	677:31	5	i ++
FIELD	677:31	677:32	6	i ++
LEAF_NODE	677:31	677:31	7	i
LEAF_NODE	677:32	677:32	7	++
LEAF_NODE	677:34	677:34	4	)
STATEMENTS	678:2	678:2	4	
EXPR_STATEMENT	678:2	678:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	678:2	678:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	678:2	678:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	678:2	678:2	8	fprintf
LEAF_NODE	678:2	678:2	9	fprintf
LEAF_NODE	678:9	678:9	8	(
ARGUMENT	678:10	678:10	8	stderr
FIELD	678:10	678:10	9	stderr
LEAF_NODE	678:10	678:10	10	stderr
LEAF_NODE	678:16	678:16	8	,
ARGUMENT	678:18	678:18	8	"%s\n"
FIELD	678:18	678:18	9	"%s\n"
LEAF_NODE	678:18	678:18	10	"%s\n"
LEAF_NODE	678:24	678:24	8	,
ARGUMENT	678:26	678:26	8	stuff [ i ]
FIELD	678:26	678:33	9	stuff [ i ]
LEAF_NODE	678:26	678:26	10	stuff
LEAF_NODE	678:31	678:31	10	[
EXPR	678:32	678:32	10	i
FIELD	678:32	678:32	11	i
LEAF_NODE	678:32	678:32	12	i
LEAF_NODE	678:33	678:33	10	]
LEAF_NODE	678:34	678:34	8	)
LEAF_NODE	678:35	678:35	6	;
EXPR_STATEMENT	679:1	679:9	3	exit ( - 1 ) ;
EXPR	679:1	679:1	4	exit ( - 1 )
FUNCTION_CALL	679:1	679:8	5	exit ( - 1 )
CALLEE	679:1	679:1	6	exit
LEAF_NODE	679:1	679:1	7	exit
LEAF_NODE	679:5	679:5	6	(
ARGUMENT	679:6	679:6	6	- 1
UNARY_EXPR	679:6	679:7	7	- 1
UNARY_OPERATOR	679:6	679:6	8	-
LEAF_NODE	679:6	679:6	9	-
FIELD	679:7	679:7	8	1
LEAF_NODE	679:7	679:7	9	1
LEAF_NODE	679:8	679:8	6	)
LEAF_NODE	679:9	679:9	4	;
LEAF_NODE	680:0	680:0	2	}
