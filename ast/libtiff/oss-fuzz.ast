SOURCE_FILE	36:0	112:0	0	
SIMPLE_DECL	36:0	36:33	1	const uint64 MAX_SIZE ; MAX_SIZE = 500000000 ;
VAR_DECL	36:0	36:13	2	const uint64 MAX_SIZE ; MAX_SIZE = 500000000
TYPE	36:0	36:0	3	const uint64
TYPE_NAME	36:0	36:6	4	const uint64
LEAF_NODE	36:0	36:0	5	const
LEAF_NODE	36:6	36:6	5	uint64
NAME	36:13	36:13	3	MAX_SIZE
LEAF_NODE	36:13	36:13	4	MAX_SIZE
LEAF_NODE	0:0	0:0	3	;
INIT	36:13	36:13	3	MAX_SIZE = 500000000
ASSIGN	36:13	36:24	4	MAX_SIZE = 500000000
LVAL	36:13	36:13	5	MAX_SIZE
NAME	36:13	36:13	6	MAX_SIZE
LEAF_NODE	36:13	36:13	7	MAX_SIZE
ASSIGN_OP	36:22	36:22	5	=
LEAF_NODE	36:22	36:22	6	=
RVAL	36:24	36:24	5	500000000
FIELD	36:24	36:24	6	500000000
LEAF_NODE	36:24	36:24	7	500000000
LEAF_NODE	36:33	36:33	2	;
FUNCTION_DEF	38:11	40:0	1	
RETURN_TYPE	38:11	38:11	2	void
TYPE_NAME	38:11	38:11	3	void
LEAF_NODE	38:11	38:11	4	void
FUNCTION_NAME	38:16	38:16	2	handle_error
LEAF_NODE	38:16	38:16	3	handle_error
PARAMETER_LIST	38:28	38:85	2	( const char * unused , const char * unused2 , va_list unused3 )
LEAF_NODE	38:28	38:28	3	(
PARAMETER_DECL	38:29	38:41	3	const char * unused
TYPE	38:29	38:40	4	const char *
TYPE_NAME	38:29	38:35	5	const char
LEAF_NODE	38:29	38:29	6	const
LEAF_NODE	38:35	38:35	6	char
POINTER	38:40	38:40	5	*
LEAF_NODE	38:40	38:40	6	*
NAME	38:41	38:41	4	unused
LEAF_NODE	38:41	38:41	5	unused
LEAF_NODE	38:47	38:47	3	,
PARAMETER_DECL	38:49	38:61	3	const char * unused2
TYPE	38:49	38:60	4	const char *
TYPE_NAME	38:49	38:55	5	const char
LEAF_NODE	38:49	38:49	6	const
LEAF_NODE	38:55	38:55	6	char
POINTER	38:60	38:60	5	*
LEAF_NODE	38:60	38:60	6	*
NAME	38:61	38:61	4	unused2
LEAF_NODE	38:61	38:61	5	unused2
LEAF_NODE	38:68	38:68	3	,
PARAMETER_DECL	38:70	38:78	3	va_list unused3
TYPE	38:70	38:70	4	va_list
TYPE_NAME	38:70	38:70	5	va_list
LEAF_NODE	38:70	38:70	6	va_list
NAME	38:78	38:78	4	unused3
LEAF_NODE	38:78	38:78	5	unused3
LEAF_NODE	38:85	38:85	3	)
LEAF_NODE	38:87	38:87	2	{
STATEMENTS	39:4	39:4	2	
JUMP_STATEMENT	39:4	39:10	3	return DESTINATION ;
KEYWORD	39:4	39:4	4	return
LEAF_NODE	39:4	39:4	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	39:10	39:10	4	;
LEAF_NODE	40:0	40:0	2	}
FUNCTION_DEF	42:11	100:0	1	
RETURN_TYPE	42:11	42:11	2	int
TYPE_NAME	42:11	42:11	3	int
LEAF_NODE	42:11	42:11	4	int
FUNCTION_NAME	42:15	42:15	2	LLVMFuzzerTestOneInput
LEAF_NODE	42:15	42:15	3	LLVMFuzzerTestOneInput
PARAMETER_LIST	42:37	42:70	2	( const uint8_t * Data , size_t Size )
LEAF_NODE	42:37	42:37	3	(
PARAMETER_DECL	42:38	42:53	3	const uint8_t * Data
TYPE	42:38	42:52	4	const uint8_t *
TYPE_NAME	42:38	42:44	5	const uint8_t
LEAF_NODE	42:38	42:38	6	const
LEAF_NODE	42:44	42:44	6	uint8_t
POINTER	42:52	42:52	5	*
LEAF_NODE	42:52	42:52	6	*
NAME	42:53	42:53	4	Data
LEAF_NODE	42:53	42:53	5	Data
LEAF_NODE	42:57	42:57	3	,
PARAMETER_DECL	42:59	42:66	3	size_t Size
TYPE	42:59	42:59	4	size_t
TYPE_NAME	42:59	42:59	5	size_t
LEAF_NODE	42:59	42:59	6	size_t
NAME	42:66	42:66	4	Size
LEAF_NODE	42:66	42:66	5	Size
LEAF_NODE	42:70	42:70	3	)
LEAF_NODE	42:72	42:72	2	{
STATEMENTS	44:2	99:2	2	
EXPR_STATEMENT	44:2	44:35	3	TIFFSetErrorHandler ( handle_error ) ;
EXPR	44:2	44:2	4	TIFFSetErrorHandler ( handle_error )
FUNCTION_CALL	44:2	44:34	5	TIFFSetErrorHandler ( handle_error )
CALLEE	44:2	44:2	6	TIFFSetErrorHandler
LEAF_NODE	44:2	44:2	7	TIFFSetErrorHandler
LEAF_NODE	44:21	44:21	6	(
ARGUMENT	44:22	44:22	6	handle_error
FIELD	44:22	44:22	7	handle_error
LEAF_NODE	44:22	44:22	8	handle_error
LEAF_NODE	44:34	44:34	6	)
LEAF_NODE	44:35	44:35	4	;
EXPR_STATEMENT	45:2	45:37	3	TIFFSetWarningHandler ( handle_error ) ;
EXPR	45:2	45:2	4	TIFFSetWarningHandler ( handle_error )
FUNCTION_CALL	45:2	45:36	5	TIFFSetWarningHandler ( handle_error )
CALLEE	45:2	45:2	6	TIFFSetWarningHandler
LEAF_NODE	45:2	45:2	7	TIFFSetWarningHandler
LEAF_NODE	45:23	45:23	6	(
ARGUMENT	45:24	45:24	6	handle_error
FIELD	45:24	45:24	7	handle_error
LEAF_NODE	45:24	45:24	8	handle_error
LEAF_NODE	45:36	45:36	6	)
LEAF_NODE	45:37	45:37	4	;
EXPR_STATEMENT	52:2	52:35	3	setenv ( "JSIMD_FORCENONE" , "1" , 1 ) ;
EXPR	52:2	52:2	4	setenv ( "JSIMD_FORCENONE" , "1" , 1 )
FUNCTION_CALL	52:2	52:34	5	setenv ( "JSIMD_FORCENONE" , "1" , 1 )
CALLEE	52:2	52:2	6	setenv
LEAF_NODE	52:2	52:2	7	setenv
LEAF_NODE	52:8	52:8	6	(
ARGUMENT	52:9	52:9	6	"JSIMD_FORCENONE"
FIELD	52:9	52:9	7	"JSIMD_FORCENONE"
LEAF_NODE	52:9	52:9	8	"JSIMD_FORCENONE"
LEAF_NODE	52:27	52:27	6	,
ARGUMENT	52:28	52:28	6	"1"
FIELD	52:28	52:28	7	"1"
LEAF_NODE	52:28	52:28	8	"1"
LEAF_NODE	52:31	52:31	6	,
ARGUMENT	52:33	52:33	6	1
FIELD	52:33	52:33	7	1
LEAF_NODE	52:33	52:33	8	1
LEAF_NODE	52:34	52:34	6	)
LEAF_NODE	52:35	52:35	4	;
SIMPLE_DECL	55:2	55:51	3	std :: istringstream s ; s s ( std :: string ( Data , Data + Size ) ) ;
VAR_DECL	55:2	55:21	4	std :: istringstream s ; s s ( std :: string ( Data , Data + Size ) )
TYPE	55:2	55:2	5	std :: istringstream
TYPE_NAME	55:2	55:7	6	std :: istringstream
LEAF_NODE	55:2	55:2	7	std
LEAF_NODE	55:5	55:5	7	::
LEAF_NODE	55:7	55:7	7	istringstream
NAME	55:21	55:21	5	s
LEAF_NODE	55:21	55:21	6	s
LEAF_NODE	0:0	0:0	5	;
INIT	55:21	55:21	5	s s ( std :: string ( Data , Data + Size ) )
ASSIGN	55:21	55:22	6	s s ( std :: string ( Data , Data + Size ) )
LVAL	55:21	55:21	7	s
NAME	55:21	55:21	8	s
LEAF_NODE	55:21	55:21	9	s
ASSIGN_OP	55:21	55:21	7	s
NAME	55:21	55:21	8	s
LEAF_NODE	55:21	55:21	9	s
RVAL	55:22	55:50	7	( std :: string ( Data , Data + Size ) )
LEAF_NODE	55:22	55:22	8	(
EXPR	55:23	55:23	8	std :: string ( Data , Data + Size )
FUNCTION_CALL	55:23	55:49	9	std :: string ( Data , Data + Size )
CALLEE	55:23	55:28	10	std :: string
LEAF_NODE	55:23	55:23	11	std
LEAF_NODE	55:26	55:26	11	::
LEAF_NODE	55:28	55:28	11	string
LEAF_NODE	55:34	55:34	10	(
ARGUMENT	55:35	55:35	10	Data
FIELD	55:35	55:35	11	Data
LEAF_NODE	55:35	55:35	12	Data
LEAF_NODE	55:39	55:39	10	,
ARGUMENT	55:40	55:45	10	Data + Size
FIELD	55:40	55:40	11	Data
LEAF_NODE	55:40	55:40	12	Data
LEAF_NODE	55:44	55:44	11	+
FIELD	55:45	55:45	11	Size
LEAF_NODE	55:45	55:45	12	Size
LEAF_NODE	55:49	55:49	10	)
LEAF_NODE	55:50	55:50	8	)
LEAF_NODE	55:51	55:51	4	;
SIMPLE_DECL	56:2	56:43	3	TIFF * tif ; tif = TIFFStreamOpen ( "MemTIFF" , & s ) ;
VAR_DECL	56:2	56:8	4	TIFF * tif ; tif = TIFFStreamOpen ( "MemTIFF" , & s )
TYPE	56:2	56:6	5	TIFF *
TYPE_NAME	56:2	56:2	6	TIFF
LEAF_NODE	56:2	56:2	7	TIFF
POINTER	56:6	56:6	6	*
LEAF_NODE	56:6	56:6	7	*
NAME	56:8	56:8	5	tif
LEAF_NODE	56:8	56:8	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	56:8	56:8	5	tif = TIFFStreamOpen ( "MemTIFF" , & s )
ASSIGN	56:8	56:14	6	tif = TIFFStreamOpen ( "MemTIFF" , & s )
LVAL	56:8	56:8	7	tif
NAME	56:8	56:8	8	tif
LEAF_NODE	56:8	56:8	9	tif
ASSIGN_OP	56:12	56:12	7	=
LEAF_NODE	56:12	56:12	8	=
RVAL	56:14	56:14	7	TIFFStreamOpen ( "MemTIFF" , & s )
FUNCTION_CALL	56:14	56:42	8	TIFFStreamOpen ( "MemTIFF" , & s )
CALLEE	56:14	56:14	9	TIFFStreamOpen
LEAF_NODE	56:14	56:14	10	TIFFStreamOpen
LEAF_NODE	56:28	56:28	9	(
ARGUMENT	56:29	56:29	9	"MemTIFF"
FIELD	56:29	56:29	10	"MemTIFF"
LEAF_NODE	56:29	56:29	11	"MemTIFF"
LEAF_NODE	56:38	56:38	9	,
ARGUMENT	56:40	56:40	9	& s
UNARY_EXPR	56:40	56:41	10	& s
UNARY_OPERATOR	56:40	56:40	11	&
LEAF_NODE	56:40	56:40	12	&
FIELD	56:41	56:41	11	s
LEAF_NODE	56:41	56:41	12	s
LEAF_NODE	56:42	56:42	9	)
LEAF_NODE	56:43	56:43	4	;
SELECTION	57:2	57:12	3	
KEYWORD	57:2	57:2	4	if
LEAF_NODE	57:2	57:2	5	if
LEAF_NODE	57:5	57:5	4	(
CONDITION	57:6	57:6	4	! tif
EXPR	57:6	57:6	5	! tif
UNARY_EXPR	57:6	57:7	6	! tif
UNARY_OPERATOR	57:6	57:6	7	!
LEAF_NODE	57:6	57:6	8	!
FIELD	57:7	57:7	7	tif
LEAF_NODE	57:7	57:7	8	tif
LEAF_NODE	57:10	57:10	4	)
STATEMENTS	57:12	59:2	4	
LEAF_NODE	57:12	57:12	5	{
STATEMENTS	58:6	58:6	5	
JUMP_STATEMENT	58:6	58:14	6	return 0 ;
KEYWORD	58:6	58:6	7	return
LEAF_NODE	58:6	58:6	8	return
DESTINATION	58:13	58:13	7	0
EXPR	58:13	58:13	8	0
FIELD	58:13	58:13	9	0
LEAF_NODE	58:13	58:13	10	0
LEAF_NODE	58:14	58:14	7	;
LEAF_NODE	59:2	59:2	5	}
SIMPLE_DECL	60:2	60:13	3	uint32 w , uint32 h ;
INIT_DECL_LIST	60:2	60:2	4	uint32 w , uint32 h
VAR_DECL	60:2	60:9	5	uint32 w
TYPE	60:2	60:2	6	uint32
TYPE_NAME	60:2	60:2	7	uint32
LEAF_NODE	60:2	60:2	8	uint32
NAME	60:9	60:9	6	w
LEAF_NODE	60:9	60:9	7	w
LEAF_NODE	60:10	60:10	5	,
VAR_DECL	60:2	60:12	5	uint32 h
TYPE	60:2	60:2	6	uint32
TYPE_NAME	60:2	60:2	7	uint32
LEAF_NODE	60:2	60:2	8	uint32
NAME	60:12	60:12	6	h
LEAF_NODE	60:12	60:12	7	h
LEAF_NODE	60:13	60:13	4	;
SIMPLE_DECL	61:2	61:16	3	uint32 * raster ;
VAR_DECL	61:2	61:10	4	uint32 * raster
TYPE	61:2	61:8	5	uint32 *
TYPE_NAME	61:2	61:2	6	uint32
LEAF_NODE	61:2	61:2	7	uint32
POINTER	61:8	61:8	6	*
LEAF_NODE	61:8	61:8	7	*
NAME	61:10	61:10	5	raster
LEAF_NODE	61:10	61:10	6	raster
LEAF_NODE	61:16	61:16	4	;
EXPR_STATEMENT	63:2	63:43	3	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w ) ;
EXPR	63:2	63:2	4	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
FUNCTION_CALL	63:2	63:42	5	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
CALLEE	63:2	63:2	6	TIFFGetField
LEAF_NODE	63:2	63:2	7	TIFFGetField
LEAF_NODE	63:14	63:14	6	(
ARGUMENT	63:15	63:15	6	tif
FIELD	63:15	63:15	7	tif
LEAF_NODE	63:15	63:15	8	tif
LEAF_NODE	63:18	63:18	6	,
ARGUMENT	63:20	63:20	6	TIFFTAG_IMAGEWIDTH
FIELD	63:20	63:20	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	63:20	63:20	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	63:38	63:38	6	,
ARGUMENT	63:40	63:40	6	& w
UNARY_EXPR	63:40	63:41	7	& w
UNARY_OPERATOR	63:40	63:40	8	&
LEAF_NODE	63:40	63:40	9	&
FIELD	63:41	63:41	8	w
LEAF_NODE	63:41	63:41	9	w
LEAF_NODE	63:42	63:42	6	)
LEAF_NODE	63:43	63:43	4	;
EXPR_STATEMENT	64:2	64:44	3	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	64:2	64:2	4	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	64:2	64:43	5	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
CALLEE	64:2	64:2	6	TIFFGetField
LEAF_NODE	64:2	64:2	7	TIFFGetField
LEAF_NODE	64:14	64:14	6	(
ARGUMENT	64:15	64:15	6	tif
FIELD	64:15	64:15	7	tif
LEAF_NODE	64:15	64:15	8	tif
LEAF_NODE	64:18	64:18	6	,
ARGUMENT	64:20	64:20	6	TIFFTAG_IMAGELENGTH
FIELD	64:20	64:20	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	64:20	64:20	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	64:39	64:39	6	,
ARGUMENT	64:41	64:41	6	& h
UNARY_EXPR	64:41	64:42	7	& h
UNARY_OPERATOR	64:41	64:41	8	&
LEAF_NODE	64:41	64:41	9	&
FIELD	64:42	64:42	8	h
LEAF_NODE	64:42	64:42	9	h
LEAF_NODE	64:43	64:43	6	)
LEAF_NODE	64:44	64:44	4	;
SELECTION	66:2	66:38	3	
KEYWORD	66:2	66:2	4	if
LEAF_NODE	66:2	66:2	5	if
LEAF_NODE	66:5	66:5	4	(
CONDITION	66:6	66:6	4	TIFFTileSize64 ( tif ) > MAX_SIZE
EXPR	66:6	66:28	5	TIFFTileSize64 ( tif ) > MAX_SIZE
FUNCTION_CALL	66:6	66:24	6	TIFFTileSize64 ( tif )
CALLEE	66:6	66:6	7	TIFFTileSize64
LEAF_NODE	66:6	66:6	8	TIFFTileSize64
LEAF_NODE	66:20	66:20	7	(
ARGUMENT	66:21	66:21	7	tif
FIELD	66:21	66:21	8	tif
LEAF_NODE	66:21	66:21	9	tif
LEAF_NODE	66:24	66:24	7	)
REL_OPERATOR	66:26	66:26	6	>
LEAF_NODE	66:26	66:26	7	>
FIELD	66:28	66:28	6	MAX_SIZE
LEAF_NODE	66:28	66:28	7	MAX_SIZE
LEAF_NODE	66:36	66:36	4	)
STATEMENTS	66:38	69:2	4	
LEAF_NODE	66:38	66:38	5	{
STATEMENTS	67:6	68:6	5	
EXPR_STATEMENT	67:6	67:20	6	TIFFClose ( tif ) ;
EXPR	67:6	67:6	7	TIFFClose ( tif )
FUNCTION_CALL	67:6	67:19	8	TIFFClose ( tif )
CALLEE	67:6	67:6	9	TIFFClose
LEAF_NODE	67:6	67:6	10	TIFFClose
LEAF_NODE	67:15	67:15	9	(
ARGUMENT	67:16	67:16	9	tif
FIELD	67:16	67:16	10	tif
LEAF_NODE	67:16	67:16	11	tif
LEAF_NODE	67:19	67:19	9	)
LEAF_NODE	67:20	67:20	7	;
JUMP_STATEMENT	68:6	68:14	6	return 0 ;
KEYWORD	68:6	68:6	7	return
LEAF_NODE	68:6	68:6	8	return
DESTINATION	68:13	68:13	7	0
EXPR	68:13	68:13	8	0
FIELD	68:13	68:13	9	0
LEAF_NODE	68:13	68:13	10	0
LEAF_NODE	68:14	68:14	7	;
LEAF_NODE	69:2	69:2	5	}
SIMPLE_DECL	70:2	70:38	3	uint64 bufsize ; bufsize = TIFFTileSize64 ( tif ) ;
VAR_DECL	70:2	70:9	4	uint64 bufsize ; bufsize = TIFFTileSize64 ( tif )
TYPE	70:2	70:2	5	uint64
TYPE_NAME	70:2	70:2	6	uint64
LEAF_NODE	70:2	70:2	7	uint64
NAME	70:9	70:9	5	bufsize
LEAF_NODE	70:9	70:9	6	bufsize
LEAF_NODE	0:0	0:0	5	;
INIT	70:9	70:9	5	bufsize = TIFFTileSize64 ( tif )
ASSIGN	70:9	70:19	6	bufsize = TIFFTileSize64 ( tif )
LVAL	70:9	70:9	7	bufsize
NAME	70:9	70:9	8	bufsize
LEAF_NODE	70:9	70:9	9	bufsize
ASSIGN_OP	70:17	70:17	7	=
LEAF_NODE	70:17	70:17	8	=
RVAL	70:19	70:19	7	TIFFTileSize64 ( tif )
FUNCTION_CALL	70:19	70:37	8	TIFFTileSize64 ( tif )
CALLEE	70:19	70:19	9	TIFFTileSize64
LEAF_NODE	70:19	70:19	10	TIFFTileSize64
LEAF_NODE	70:33	70:33	9	(
ARGUMENT	70:34	70:34	9	tif
FIELD	70:34	70:34	10	tif
LEAF_NODE	70:34	70:34	11	tif
LEAF_NODE	70:37	70:37	9	)
LEAF_NODE	70:38	70:38	4	;
SELECTION	72:2	72:42	3	
KEYWORD	72:2	72:2	4	if
LEAF_NODE	72:2	72:2	5	if
LEAF_NODE	72:5	72:5	4	(
CONDITION	72:6	72:6	4	bufsize > MAX_SIZE || bufsize == 0
EXPR	72:6	72:6	5	bufsize > MAX_SIZE || bufsize == 0
OR	72:6	72:28	6	bufsize > MAX_SIZE || bufsize == 0
EXPR	72:6	72:16	7	bufsize > MAX_SIZE
FIELD	72:6	72:6	8	bufsize
LEAF_NODE	72:6	72:6	9	bufsize
REL_OPERATOR	72:14	72:14	8	>
LEAF_NODE	72:14	72:14	9	>
FIELD	72:16	72:16	8	MAX_SIZE
LEAF_NODE	72:16	72:16	9	MAX_SIZE
LEAF_NODE	72:25	72:25	7	||
EXPR	72:28	72:39	7	bufsize == 0
FIELD	72:28	72:28	8	bufsize
LEAF_NODE	72:28	72:28	9	bufsize
EQ_OPERATOR	72:36	72:36	8	==
LEAF_NODE	72:36	72:36	9	==
FIELD	72:39	72:39	8	0
LEAF_NODE	72:39	72:39	9	0
LEAF_NODE	72:40	72:40	4	)
STATEMENTS	72:42	75:2	4	
LEAF_NODE	72:42	72:42	5	{
STATEMENTS	73:6	74:6	5	
EXPR_STATEMENT	73:6	73:20	6	TIFFClose ( tif ) ;
EXPR	73:6	73:6	7	TIFFClose ( tif )
FUNCTION_CALL	73:6	73:19	8	TIFFClose ( tif )
CALLEE	73:6	73:6	9	TIFFClose
LEAF_NODE	73:6	73:6	10	TIFFClose
LEAF_NODE	73:15	73:15	9	(
ARGUMENT	73:16	73:16	9	tif
FIELD	73:16	73:16	10	tif
LEAF_NODE	73:16	73:16	11	tif
LEAF_NODE	73:19	73:19	9	)
LEAF_NODE	73:20	73:20	7	;
JUMP_STATEMENT	74:6	74:14	6	return 0 ;
KEYWORD	74:6	74:6	7	return
LEAF_NODE	74:6	74:6	8	return
DESTINATION	74:13	74:13	7	0
EXPR	74:13	74:13	8	0
FIELD	74:13	74:13	9	0
LEAF_NODE	74:13	74:13	10	0
LEAF_NODE	74:14	74:14	7	;
LEAF_NODE	75:2	75:2	5	}
SIMPLE_DECL	77:2	77:22	3	uint32 tilewidth ; tilewidth = 0 ;
VAR_DECL	77:2	77:9	4	uint32 tilewidth ; tilewidth = 0
TYPE	77:2	77:2	5	uint32
TYPE_NAME	77:2	77:2	6	uint32
LEAF_NODE	77:2	77:2	7	uint32
NAME	77:9	77:9	5	tilewidth
LEAF_NODE	77:9	77:9	6	tilewidth
LEAF_NODE	0:0	0:0	5	;
INIT	77:9	77:9	5	tilewidth = 0
ASSIGN	77:9	77:21	6	tilewidth = 0
LVAL	77:9	77:9	7	tilewidth
NAME	77:9	77:9	8	tilewidth
LEAF_NODE	77:9	77:9	9	tilewidth
ASSIGN_OP	77:19	77:19	7	=
LEAF_NODE	77:19	77:19	8	=
RVAL	77:21	77:21	7	0
FIELD	77:21	77:21	8	0
LEAF_NODE	77:21	77:21	9	0
LEAF_NODE	77:22	77:22	4	;
SIMPLE_DECL	78:2	78:23	3	uint32 imagewidth ; imagewidth = 0 ;
VAR_DECL	78:2	78:9	4	uint32 imagewidth ; imagewidth = 0
TYPE	78:2	78:2	5	uint32
TYPE_NAME	78:2	78:2	6	uint32
LEAF_NODE	78:2	78:2	7	uint32
NAME	78:9	78:9	5	imagewidth
LEAF_NODE	78:9	78:9	6	imagewidth
LEAF_NODE	0:0	0:0	5	;
INIT	78:9	78:9	5	imagewidth = 0
ASSIGN	78:9	78:22	6	imagewidth = 0
LVAL	78:9	78:9	7	imagewidth
NAME	78:9	78:9	8	imagewidth
LEAF_NODE	78:9	78:9	9	imagewidth
ASSIGN_OP	78:20	78:20	7	=
LEAF_NODE	78:20	78:20	8	=
RVAL	78:22	78:22	7	0
FIELD	78:22	78:22	8	0
LEAF_NODE	78:22	78:22	9	0
LEAF_NODE	78:23	78:23	4	;
EXPR_STATEMENT	79:2	79:50	3	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tilewidth ) ;
EXPR	79:2	79:2	4	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tilewidth )
FUNCTION_CALL	79:2	79:49	5	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tilewidth )
CALLEE	79:2	79:2	6	TIFFGetField
LEAF_NODE	79:2	79:2	7	TIFFGetField
LEAF_NODE	79:14	79:14	6	(
ARGUMENT	79:15	79:15	6	tif
FIELD	79:15	79:15	7	tif
LEAF_NODE	79:15	79:15	8	tif
LEAF_NODE	79:18	79:18	6	,
ARGUMENT	79:20	79:20	6	TIFFTAG_TILEWIDTH
FIELD	79:20	79:20	7	TIFFTAG_TILEWIDTH
LEAF_NODE	79:20	79:20	8	TIFFTAG_TILEWIDTH
LEAF_NODE	79:37	79:37	6	,
ARGUMENT	79:39	79:39	6	& tilewidth
UNARY_EXPR	79:39	79:40	7	& tilewidth
UNARY_OPERATOR	79:39	79:39	8	&
LEAF_NODE	79:39	79:39	9	&
FIELD	79:40	79:40	8	tilewidth
LEAF_NODE	79:40	79:40	9	tilewidth
LEAF_NODE	79:49	79:49	6	)
LEAF_NODE	79:50	79:50	4	;
EXPR_STATEMENT	80:2	80:52	3	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & imagewidth ) ;
EXPR	80:2	80:2	4	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & imagewidth )
FUNCTION_CALL	80:2	80:51	5	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & imagewidth )
CALLEE	80:2	80:2	6	TIFFGetField
LEAF_NODE	80:2	80:2	7	TIFFGetField
LEAF_NODE	80:14	80:14	6	(
ARGUMENT	80:15	80:15	6	tif
FIELD	80:15	80:15	7	tif
LEAF_NODE	80:15	80:15	8	tif
LEAF_NODE	80:18	80:18	6	,
ARGUMENT	80:20	80:20	6	TIFFTAG_IMAGEWIDTH
FIELD	80:20	80:20	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	80:20	80:20	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	80:38	80:38	6	,
ARGUMENT	80:40	80:40	6	& imagewidth
UNARY_EXPR	80:40	80:41	7	& imagewidth
UNARY_OPERATOR	80:40	80:40	8	&
LEAF_NODE	80:40	80:40	9	&
FIELD	80:41	80:41	8	imagewidth
LEAF_NODE	80:41	80:41	9	imagewidth
LEAF_NODE	80:51	80:51	6	)
LEAF_NODE	80:52	80:52	4	;
EXPR_STATEMENT	81:2	81:54	3	tilewidth = __TIFFSafeMultiply ( uint32 , tilewidth , 2 ) ;
EXPR	81:2	81:2	4	tilewidth = __TIFFSafeMultiply ( uint32 , tilewidth , 2 )
ASSIGN	81:2	81:14	5	tilewidth = __TIFFSafeMultiply ( uint32 , tilewidth , 2 )
LVAL	81:2	81:2	6	tilewidth
FIELD	81:2	81:2	7	tilewidth
LEAF_NODE	81:2	81:2	8	tilewidth
ASSIGN_OP	81:12	81:12	6	=
LEAF_NODE	81:12	81:12	7	=
RVAL	81:14	81:14	6	__TIFFSafeMultiply ( uint32 , tilewidth , 2 )
FUNCTION_CALL	81:14	81:53	7	__TIFFSafeMultiply ( uint32 , tilewidth , 2 )
CALLEE	81:14	81:14	8	__TIFFSafeMultiply
LEAF_NODE	81:14	81:14	9	__TIFFSafeMultiply
LEAF_NODE	81:32	81:32	8	(
ARGUMENT	81:33	81:33	8	uint32
FIELD	81:33	81:33	9	uint32
LEAF_NODE	81:33	81:33	10	uint32
LEAF_NODE	81:39	81:39	8	,
ARGUMENT	81:41	81:41	8	tilewidth
FIELD	81:41	81:41	9	tilewidth
LEAF_NODE	81:41	81:41	10	tilewidth
LEAF_NODE	81:50	81:50	8	,
ARGUMENT	81:52	81:52	8	2
FIELD	81:52	81:52	9	2
LEAF_NODE	81:52	81:52	10	2
LEAF_NODE	81:53	81:53	8	)
LEAF_NODE	81:54	81:54	4	;
EXPR_STATEMENT	82:2	82:56	3	imagewidth = __TIFFSafeMultiply ( uint32 , imagewidth , 2 ) ;
EXPR	82:2	82:2	4	imagewidth = __TIFFSafeMultiply ( uint32 , imagewidth , 2 )
ASSIGN	82:2	82:15	5	imagewidth = __TIFFSafeMultiply ( uint32 , imagewidth , 2 )
LVAL	82:2	82:2	6	imagewidth
FIELD	82:2	82:2	7	imagewidth
LEAF_NODE	82:2	82:2	8	imagewidth
ASSIGN_OP	82:13	82:13	6	=
LEAF_NODE	82:13	82:13	7	=
RVAL	82:15	82:15	6	__TIFFSafeMultiply ( uint32 , imagewidth , 2 )
FUNCTION_CALL	82:15	82:55	7	__TIFFSafeMultiply ( uint32 , imagewidth , 2 )
CALLEE	82:15	82:15	8	__TIFFSafeMultiply
LEAF_NODE	82:15	82:15	9	__TIFFSafeMultiply
LEAF_NODE	82:33	82:33	8	(
ARGUMENT	82:34	82:34	8	uint32
FIELD	82:34	82:34	9	uint32
LEAF_NODE	82:34	82:34	10	uint32
LEAF_NODE	82:40	82:40	8	,
ARGUMENT	82:42	82:42	8	imagewidth
FIELD	82:42	82:42	9	imagewidth
LEAF_NODE	82:42	82:42	10	imagewidth
LEAF_NODE	82:52	82:52	8	,
ARGUMENT	82:54	82:54	8	2
FIELD	82:54	82:54	9	2
LEAF_NODE	82:54	82:54	10	2
LEAF_NODE	82:55	82:55	8	)
LEAF_NODE	82:56	82:56	4	;
SELECTION	83:2	83:98	3	
KEYWORD	83:2	83:2	4	if
LEAF_NODE	83:2	83:2	5	if
LEAF_NODE	83:5	83:5	4	(
CONDITION	83:6	83:6	4	tilewidth * 2 > MAX_SIZE || imagewidth * 2 > MAX_SIZE || tilewidth == 0 || imagewidth == 0
EXPR	83:6	83:6	5	tilewidth * 2 > MAX_SIZE || imagewidth * 2 > MAX_SIZE || tilewidth == 0 || imagewidth == 0
OR	83:6	83:34	6	tilewidth * 2 > MAX_SIZE || imagewidth * 2 > MAX_SIZE || tilewidth == 0 || imagewidth == 0
EXPR	83:6	83:22	7	tilewidth * 2 > MAX_SIZE
FIELD	83:6	83:6	8	tilewidth
LEAF_NODE	83:6	83:6	9	tilewidth
LEAF_NODE	83:16	83:16	8	*
FIELD	83:18	83:18	8	2
LEAF_NODE	83:18	83:18	9	2
REL_OPERATOR	83:20	83:20	8	>
LEAF_NODE	83:20	83:20	9	>
FIELD	83:22	83:22	8	MAX_SIZE
LEAF_NODE	83:22	83:22	9	MAX_SIZE
LEAF_NODE	83:31	83:31	7	||
EXPR	83:34	83:34	7	imagewidth * 2 > MAX_SIZE || tilewidth == 0 || imagewidth == 0
OR	83:34	83:63	8	imagewidth * 2 > MAX_SIZE || tilewidth == 0 || imagewidth == 0
EXPR	83:34	83:51	9	imagewidth * 2 > MAX_SIZE
FIELD	83:34	83:34	10	imagewidth
LEAF_NODE	83:34	83:34	11	imagewidth
LEAF_NODE	83:45	83:45	10	*
FIELD	83:47	83:47	10	2
LEAF_NODE	83:47	83:47	11	2
REL_OPERATOR	83:49	83:49	10	>
LEAF_NODE	83:49	83:49	11	>
FIELD	83:51	83:51	10	MAX_SIZE
LEAF_NODE	83:51	83:51	11	MAX_SIZE
LEAF_NODE	83:60	83:60	9	||
EXPR	83:63	83:63	9	tilewidth == 0 || imagewidth == 0
OR	83:63	83:81	10	tilewidth == 0 || imagewidth == 0
EXPR	83:63	83:76	11	tilewidth == 0
FIELD	83:63	83:63	12	tilewidth
LEAF_NODE	83:63	83:63	13	tilewidth
EQ_OPERATOR	83:73	83:73	12	==
LEAF_NODE	83:73	83:73	13	==
FIELD	83:76	83:76	12	0
LEAF_NODE	83:76	83:76	13	0
LEAF_NODE	83:78	83:78	11	||
EXPR	83:81	83:95	11	imagewidth == 0
FIELD	83:81	83:81	12	imagewidth
LEAF_NODE	83:81	83:81	13	imagewidth
EQ_OPERATOR	83:92	83:92	12	==
LEAF_NODE	83:92	83:92	13	==
FIELD	83:95	83:95	12	0
LEAF_NODE	83:95	83:95	13	0
LEAF_NODE	83:96	83:96	4	)
STATEMENTS	83:98	86:2	4	
LEAF_NODE	83:98	83:98	5	{
STATEMENTS	84:6	85:6	5	
EXPR_STATEMENT	84:6	84:20	6	TIFFClose ( tif ) ;
EXPR	84:6	84:6	7	TIFFClose ( tif )
FUNCTION_CALL	84:6	84:19	8	TIFFClose ( tif )
CALLEE	84:6	84:6	9	TIFFClose
LEAF_NODE	84:6	84:6	10	TIFFClose
LEAF_NODE	84:15	84:15	9	(
ARGUMENT	84:16	84:16	9	tif
FIELD	84:16	84:16	10	tif
LEAF_NODE	84:16	84:16	11	tif
LEAF_NODE	84:19	84:19	9	)
LEAF_NODE	84:20	84:20	7	;
JUMP_STATEMENT	85:6	85:14	6	return 0 ;
KEYWORD	85:6	85:6	7	return
LEAF_NODE	85:6	85:6	8	return
DESTINATION	85:13	85:13	7	0
EXPR	85:13	85:13	8	0
FIELD	85:13	85:13	9	0
LEAF_NODE	85:13	85:13	10	0
LEAF_NODE	85:14	85:14	7	;
LEAF_NODE	86:2	86:2	5	}
SIMPLE_DECL	87:2	87:48	3	uint32 size ; size = __TIFFSafeMultiply ( uint32 , w , h ) ;
VAR_DECL	87:2	87:9	4	uint32 size ; size = __TIFFSafeMultiply ( uint32 , w , h )
TYPE	87:2	87:2	5	uint32
TYPE_NAME	87:2	87:2	6	uint32
LEAF_NODE	87:2	87:2	7	uint32
NAME	87:9	87:9	5	size
LEAF_NODE	87:9	87:9	6	size
LEAF_NODE	0:0	0:0	5	;
INIT	87:9	87:9	5	size = __TIFFSafeMultiply ( uint32 , w , h )
ASSIGN	87:9	87:16	6	size = __TIFFSafeMultiply ( uint32 , w , h )
LVAL	87:9	87:9	7	size
NAME	87:9	87:9	8	size
LEAF_NODE	87:9	87:9	9	size
ASSIGN_OP	87:14	87:14	7	=
LEAF_NODE	87:14	87:14	8	=
RVAL	87:16	87:16	7	__TIFFSafeMultiply ( uint32 , w , h )
FUNCTION_CALL	87:16	87:47	8	__TIFFSafeMultiply ( uint32 , w , h )
CALLEE	87:16	87:16	9	__TIFFSafeMultiply
LEAF_NODE	87:16	87:16	10	__TIFFSafeMultiply
LEAF_NODE	87:34	87:34	9	(
ARGUMENT	87:35	87:35	9	uint32
FIELD	87:35	87:35	10	uint32
LEAF_NODE	87:35	87:35	11	uint32
LEAF_NODE	87:41	87:41	9	,
ARGUMENT	87:43	87:43	9	w
FIELD	87:43	87:43	10	w
LEAF_NODE	87:43	87:43	11	w
LEAF_NODE	87:44	87:44	9	,
ARGUMENT	87:46	87:46	9	h
FIELD	87:46	87:46	10	h
LEAF_NODE	87:46	87:46	11	h
LEAF_NODE	87:47	87:47	9	)
LEAF_NODE	87:48	87:48	4	;
SELECTION	88:2	88:36	3	
KEYWORD	88:2	88:2	4	if
LEAF_NODE	88:2	88:2	5	if
LEAF_NODE	88:5	88:5	4	(
CONDITION	88:6	88:6	4	size > MAX_SIZE || size == 0
EXPR	88:6	88:6	5	size > MAX_SIZE || size == 0
OR	88:6	88:25	6	size > MAX_SIZE || size == 0
EXPR	88:6	88:13	7	size > MAX_SIZE
FIELD	88:6	88:6	8	size
LEAF_NODE	88:6	88:6	9	size
REL_OPERATOR	88:11	88:11	8	>
LEAF_NODE	88:11	88:11	9	>
FIELD	88:13	88:13	8	MAX_SIZE
LEAF_NODE	88:13	88:13	9	MAX_SIZE
LEAF_NODE	88:22	88:22	7	||
EXPR	88:25	88:33	7	size == 0
FIELD	88:25	88:25	8	size
LEAF_NODE	88:25	88:25	9	size
EQ_OPERATOR	88:30	88:30	8	==
LEAF_NODE	88:30	88:30	9	==
FIELD	88:33	88:33	8	0
LEAF_NODE	88:33	88:33	9	0
LEAF_NODE	88:34	88:34	4	)
STATEMENTS	88:36	91:2	4	
LEAF_NODE	88:36	88:36	5	{
STATEMENTS	89:6	90:6	5	
EXPR_STATEMENT	89:6	89:20	6	TIFFClose ( tif ) ;
EXPR	89:6	89:6	7	TIFFClose ( tif )
FUNCTION_CALL	89:6	89:19	8	TIFFClose ( tif )
CALLEE	89:6	89:6	9	TIFFClose
LEAF_NODE	89:6	89:6	10	TIFFClose
LEAF_NODE	89:15	89:15	9	(
ARGUMENT	89:16	89:16	9	tif
FIELD	89:16	89:16	10	tif
LEAF_NODE	89:16	89:16	11	tif
LEAF_NODE	89:19	89:19	9	)
LEAF_NODE	89:20	89:20	7	;
JUMP_STATEMENT	90:6	90:14	6	return 0 ;
KEYWORD	90:6	90:6	7	return
LEAF_NODE	90:6	90:6	8	return
DESTINATION	90:13	90:13	7	0
EXPR	90:13	90:13	8	0
FIELD	90:13	90:13	9	0
LEAF_NODE	90:13	90:13	10	0
LEAF_NODE	90:14	90:14	7	;
LEAF_NODE	91:2	91:2	5	}
EXPR_STATEMENT	92:2	92:56	3	raster = ( uint32 * ) _TIFFmalloc ( size * sizeof ( uint32 ) ) ;
EXPR	92:2	92:2	4	raster = ( uint32 * ) _TIFFmalloc ( size * sizeof ( uint32 ) )
ASSIGN	92:2	92:11	5	raster = ( uint32 * ) _TIFFmalloc ( size * sizeof ( uint32 ) )
LVAL	92:2	92:2	6	raster
FIELD	92:2	92:2	7	raster
LEAF_NODE	92:2	92:2	8	raster
ASSIGN_OP	92:9	92:9	6	=
LEAF_NODE	92:9	92:9	7	=
RVAL	92:11	92:21	6	( uint32 * ) _TIFFmalloc ( size * sizeof ( uint32 ) )
LEAF_NODE	92:11	92:11	7	(
TYPE_NAME	92:12	92:12	7	uint32
LEAF_NODE	92:12	92:12	8	uint32
LEAF_NODE	92:18	92:18	7	*
LEAF_NODE	92:19	92:19	7	)
FUNCTION_CALL	92:21	92:55	7	_TIFFmalloc ( size * sizeof ( uint32 ) )
CALLEE	92:21	92:21	8	_TIFFmalloc
LEAF_NODE	92:21	92:21	9	_TIFFmalloc
LEAF_NODE	92:32	92:32	8	(
ARGUMENT	92:33	92:40	8	size * sizeof ( uint32 )
FIELD	92:33	92:33	9	size
LEAF_NODE	92:33	92:33	10	size
LEAF_NODE	92:38	92:38	9	*
FUNCTION_CALL	92:40	92:54	9	sizeof ( uint32 )
CALLEE	92:40	92:40	10	sizeof
LEAF_NODE	92:40	92:40	11	sizeof
LEAF_NODE	92:47	92:47	10	(
ARGUMENT	92:48	92:48	10	uint32
FIELD	92:48	92:48	11	uint32
LEAF_NODE	92:48	92:48	12	uint32
LEAF_NODE	92:54	92:54	10	)
LEAF_NODE	92:55	92:55	8	)
LEAF_NODE	92:56	92:56	4	;
SELECTION	93:2	93:22	3	
KEYWORD	93:2	93:2	4	if
LEAF_NODE	93:2	93:2	5	if
LEAF_NODE	93:5	93:5	4	(
CONDITION	93:6	93:6	4	raster != NULL
EXPR	93:6	93:16	5	raster != NULL
FIELD	93:6	93:6	6	raster
LEAF_NODE	93:6	93:6	7	raster
EQ_OPERATOR	93:13	93:13	6	!=
LEAF_NODE	93:13	93:13	7	!=
FIELD	93:16	93:16	6	NULL
LEAF_NODE	93:16	93:16	7	NULL
LEAF_NODE	93:20	93:20	4	)
STATEMENTS	93:22	96:2	4	
LEAF_NODE	93:22	93:22	5	{
STATEMENTS	94:6	95:6	5	
EXPR_STATEMENT	94:6	94:45	6	TIFFReadRGBAImage ( tif , w , h , raster , 0 ) ;
EXPR	94:6	94:6	7	TIFFReadRGBAImage ( tif , w , h , raster , 0 )
FUNCTION_CALL	94:6	94:44	8	TIFFReadRGBAImage ( tif , w , h , raster , 0 )
CALLEE	94:6	94:6	9	TIFFReadRGBAImage
LEAF_NODE	94:6	94:6	10	TIFFReadRGBAImage
LEAF_NODE	94:23	94:23	9	(
ARGUMENT	94:24	94:24	9	tif
FIELD	94:24	94:24	10	tif
LEAF_NODE	94:24	94:24	11	tif
LEAF_NODE	94:27	94:27	9	,
ARGUMENT	94:29	94:29	9	w
FIELD	94:29	94:29	10	w
LEAF_NODE	94:29	94:29	11	w
LEAF_NODE	94:30	94:30	9	,
ARGUMENT	94:32	94:32	9	h
FIELD	94:32	94:32	10	h
LEAF_NODE	94:32	94:32	11	h
LEAF_NODE	94:33	94:33	9	,
ARGUMENT	94:35	94:35	9	raster
FIELD	94:35	94:35	10	raster
LEAF_NODE	94:35	94:35	11	raster
LEAF_NODE	94:41	94:41	9	,
ARGUMENT	94:43	94:43	9	0
FIELD	94:43	94:43	10	0
LEAF_NODE	94:43	94:43	11	0
LEAF_NODE	94:44	94:44	9	)
LEAF_NODE	94:45	94:45	7	;
EXPR_STATEMENT	95:6	95:23	6	_TIFFfree ( raster ) ;
EXPR	95:6	95:6	7	_TIFFfree ( raster )
FUNCTION_CALL	95:6	95:22	8	_TIFFfree ( raster )
CALLEE	95:6	95:6	9	_TIFFfree
LEAF_NODE	95:6	95:6	10	_TIFFfree
LEAF_NODE	95:15	95:15	9	(
ARGUMENT	95:16	95:16	9	raster
FIELD	95:16	95:16	10	raster
LEAF_NODE	95:16	95:16	11	raster
LEAF_NODE	95:22	95:22	9	)
LEAF_NODE	95:23	95:23	7	;
LEAF_NODE	96:2	96:2	5	}
EXPR_STATEMENT	97:2	97:16	3	TIFFClose ( tif ) ;
EXPR	97:2	97:2	4	TIFFClose ( tif )
FUNCTION_CALL	97:2	97:15	5	TIFFClose ( tif )
CALLEE	97:2	97:2	6	TIFFClose
LEAF_NODE	97:2	97:2	7	TIFFClose
LEAF_NODE	97:11	97:11	6	(
ARGUMENT	97:12	97:12	6	tif
FIELD	97:12	97:12	7	tif
LEAF_NODE	97:12	97:12	8	tif
LEAF_NODE	97:15	97:15	6	)
LEAF_NODE	97:16	97:16	4	;
JUMP_STATEMENT	99:2	99:10	3	return 0 ;
KEYWORD	99:2	99:2	4	return
LEAF_NODE	99:2	99:2	5	return
DESTINATION	99:9	99:9	4	0
EXPR	99:9	99:9	5	0
FIELD	99:9	99:9	6	0
LEAF_NODE	99:9	99:9	7	0
LEAF_NODE	99:10	99:10	4	;
LEAF_NODE	100:0	100:0	2	}
FUNCTION_DEF	104:0	104:53	1	
TEMPLATE_DECL_SPECIFIER	104:0	104:16	2	template < class T >
LEAF_NODE	104:0	104:0	3	template
LEAF_NODE	104:8	104:8	3	<
LEAF_NODE	104:9	104:9	3	class
LEAF_NODE	104:15	104:15	3	T
LEAF_NODE	104:16	104:16	3	>
RETURN_TYPE	104:18	104:25	2	static void
LEAF_NODE	104:18	104:18	3	static
TYPE_NAME	104:25	104:25	3	void
LEAF_NODE	104:25	104:25	4	void
FUNCTION_NAME	104:30	104:30	2	CPL_IGNORE_RET_VAL
LEAF_NODE	104:30	104:30	3	CPL_IGNORE_RET_VAL
PARAMETER_LIST	104:48	104:50	2	( T )
LEAF_NODE	104:48	104:48	3	(
PARAMETER_DECL	104:49	104:49	3	T
LEAF_NODE	104:49	104:49	4	T
LEAF_NODE	104:50	104:50	3	)
LEAF_NODE	104:52	104:52	2	{
LEAF_NODE	0:0	0:0	2	STATEMENTS
LEAF_NODE	104:53	104:53	2	}
FUNCTION_DEF	106:0	110:0	1	
RETURN_TYPE	106:0	106:7	2	static void
LEAF_NODE	106:0	106:0	3	static
TYPE_NAME	106:7	106:7	3	void
LEAF_NODE	106:7	106:7	4	void
FUNCTION_NAME	106:12	106:12	2	Usage
LEAF_NODE	106:12	106:12	3	Usage
PARAMETER_LIST	106:17	106:35	2	( int , char * [ ] argv )
LEAF_NODE	106:17	106:17	3	(
PARAMETER_DECL	106:18	106:18	3	int
LEAF_NODE	106:18	106:18	4	int
LEAF_NODE	106:21	106:21	3	,
PARAMETER_DECL	106:23	106:29	3	char * [ ] argv
TYPE	106:23	106:33	4	char * [ ]
TYPE_NAME	106:23	106:23	5	char
LEAF_NODE	106:23	106:23	6	char
POINTER	106:27	106:27	5	*
LEAF_NODE	106:27	106:27	6	*
TYPE_SUFFIX	106:33	106:34	5	[ ]
LEAF_NODE	106:33	106:33	6	[
LEAF_NODE	106:34	106:34	6	]
NAME	106:29	106:29	4	argv
LEAF_NODE	106:29	106:29	5	argv
LEAF_NODE	106:35	106:35	3	)
LEAF_NODE	107:0	107:0	2	{
STATEMENTS	108:4	109:4	2	
EXPR_STATEMENT	108:4	108:67	3	fprintf ( stderr , "%s [--help] [-repeat N] filename.\n" , argv [ 0 ] ) ;
EXPR	108:4	108:4	4	fprintf ( stderr , "%s [--help] [-repeat N] filename.\n" , argv [ 0 ] )
FUNCTION_CALL	108:4	108:66	5	fprintf ( stderr , "%s [--help] [-repeat N] filename.\n" , argv [ 0 ] )
CALLEE	108:4	108:4	6	fprintf
LEAF_NODE	108:4	108:4	7	fprintf
LEAF_NODE	108:11	108:11	6	(
ARGUMENT	108:12	108:12	6	stderr
FIELD	108:12	108:12	7	stderr
LEAF_NODE	108:12	108:12	8	stderr
LEAF_NODE	108:18	108:18	6	,
ARGUMENT	108:20	108:20	6	"%s [--help] [-repeat N] filename.\n"
FIELD	108:20	108:20	7	"%s [--help] [-repeat N] filename.\n"
LEAF_NODE	108:20	108:20	8	"%s [--help] [-repeat N] filename.\n"
LEAF_NODE	108:57	108:57	6	,
ARGUMENT	108:59	108:59	6	argv [ 0 ]
FIELD	108:59	108:65	7	argv [ 0 ]
LEAF_NODE	108:59	108:59	8	argv
LEAF_NODE	108:63	108:63	8	[
EXPR	108:64	108:64	8	0
FIELD	108:64	108:64	9	0
LEAF_NODE	108:64	108:64	10	0
LEAF_NODE	108:65	108:65	8	]
LEAF_NODE	108:66	108:66	6	)
LEAF_NODE	108:67	108:67	4	;
EXPR_STATEMENT	109:4	109:11	3	exit ( 1 ) ;
EXPR	109:4	109:4	4	exit ( 1 )
FUNCTION_CALL	109:4	109:10	5	exit ( 1 )
CALLEE	109:4	109:4	6	exit
LEAF_NODE	109:4	109:4	7	exit
LEAF_NODE	109:8	109:8	6	(
ARGUMENT	109:9	109:9	6	1
FIELD	109:9	109:9	7	1
LEAF_NODE	109:9	109:9	8	1
LEAF_NODE	109:10	109:10	6	)
LEAF_NODE	109:11	109:11	4	;
LEAF_NODE	110:0	110:0	2	}
FUNCTION_DEF	112:0	177:0	1	
RETURN_TYPE	112:0	112:0	2	int
TYPE_NAME	112:0	112:0	3	int
LEAF_NODE	112:0	112:0	4	int
FUNCTION_NAME	112:4	112:4	2	main
LEAF_NODE	112:4	112:4	3	main
PARAMETER_LIST	112:8	112:31	2	( int argc , char * [ ] argv )
LEAF_NODE	112:8	112:8	3	(
PARAMETER_DECL	112:9	112:13	3	int argc
TYPE	112:9	112:9	4	int
TYPE_NAME	112:9	112:9	5	int
LEAF_NODE	112:9	112:9	6	int
NAME	112:13	112:13	4	argc
LEAF_NODE	112:13	112:13	5	argc
LEAF_NODE	112:17	112:17	3	,
PARAMETER_DECL	112:19	112:25	3	char * [ ] argv
TYPE	112:19	112:29	4	char * [ ]
TYPE_NAME	112:19	112:19	5	char
LEAF_NODE	112:19	112:19	6	char
POINTER	112:23	112:23	5	*
LEAF_NODE	112:23	112:23	6	*
TYPE_SUFFIX	112:29	112:30	5	[ ]
LEAF_NODE	112:29	112:29	6	[
LEAF_NODE	112:30	112:30	6	]
NAME	112:25	112:25	4	argv
LEAF_NODE	112:25	112:25	5	argv
LEAF_NODE	112:31	112:31	3	)
LEAF_NODE	113:0	113:0	2	{
STATEMENTS	114:4	176:4	2	
SIMPLE_DECL	114:4	114:16	3	int nRet ; nRet = 0 ;
VAR_DECL	114:4	114:8	4	int nRet ; nRet = 0
TYPE	114:4	114:4	5	int
TYPE_NAME	114:4	114:4	6	int
LEAF_NODE	114:4	114:4	7	int
NAME	114:8	114:8	5	nRet
LEAF_NODE	114:8	114:8	6	nRet
LEAF_NODE	0:0	0:0	5	;
INIT	114:8	114:8	5	nRet = 0
ASSIGN	114:8	114:15	6	nRet = 0
LVAL	114:8	114:8	7	nRet
NAME	114:8	114:8	8	nRet
LEAF_NODE	114:8	114:8	9	nRet
ASSIGN_OP	114:13	114:13	7	=
LEAF_NODE	114:13	114:13	8	=
RVAL	114:15	114:15	7	0
FIELD	114:15	114:15	8	0
LEAF_NODE	114:15	114:15	9	0
LEAF_NODE	114:16	114:16	4	;
SIMPLE_DECL	115:4	115:20	3	void * buf ; buf = NULL ;
VAR_DECL	115:4	115:10	4	void * buf ; buf = NULL
TYPE	115:4	115:8	5	void *
TYPE_NAME	115:4	115:4	6	void
LEAF_NODE	115:4	115:4	7	void
POINTER	115:8	115:8	6	*
LEAF_NODE	115:8	115:8	7	*
NAME	115:10	115:10	5	buf
LEAF_NODE	115:10	115:10	6	buf
LEAF_NODE	0:0	0:0	5	;
INIT	115:10	115:10	5	buf = NULL
ASSIGN	115:10	115:16	6	buf = NULL
LVAL	115:10	115:10	7	buf
NAME	115:10	115:10	8	buf
LEAF_NODE	115:10	115:10	9	buf
ASSIGN_OP	115:14	115:14	7	=
LEAF_NODE	115:14	115:14	8	=
RVAL	115:16	115:16	7	NULL
FIELD	115:16	115:16	8	NULL
LEAF_NODE	115:16	115:16	9	NULL
LEAF_NODE	115:20	115:20	4	;
SIMPLE_DECL	116:4	116:16	3	int nLen ; nLen = 0 ;
VAR_DECL	116:4	116:8	4	int nLen ; nLen = 0
TYPE	116:4	116:4	5	int
TYPE_NAME	116:4	116:4	6	int
LEAF_NODE	116:4	116:4	7	int
NAME	116:8	116:8	5	nLen
LEAF_NODE	116:8	116:8	6	nLen
LEAF_NODE	0:0	0:0	5	;
INIT	116:8	116:8	5	nLen = 0
ASSIGN	116:8	116:15	6	nLen = 0
LVAL	116:8	116:8	7	nLen
NAME	116:8	116:8	8	nLen
LEAF_NODE	116:8	116:8	9	nLen
ASSIGN_OP	116:13	116:13	7	=
LEAF_NODE	116:13	116:13	8	=
RVAL	116:15	116:15	7	0
FIELD	116:15	116:15	8	0
LEAF_NODE	116:15	116:15	9	0
LEAF_NODE	116:16	116:16	4	;
SIMPLE_DECL	117:4	117:18	3	int nLoops ; nLoops = 1 ;
VAR_DECL	117:4	117:8	4	int nLoops ; nLoops = 1
TYPE	117:4	117:4	5	int
TYPE_NAME	117:4	117:4	6	int
LEAF_NODE	117:4	117:4	7	int
NAME	117:8	117:8	5	nLoops
LEAF_NODE	117:8	117:8	6	nLoops
LEAF_NODE	0:0	0:0	5	;
INIT	117:8	117:8	5	nLoops = 1
ASSIGN	117:8	117:17	6	nLoops = 1
LVAL	117:8	117:8	7	nLoops
NAME	117:8	117:8	8	nLoops
LEAF_NODE	117:8	117:8	9	nLoops
ASSIGN_OP	117:15	117:15	7	=
LEAF_NODE	117:15	117:15	8	=
RVAL	117:17	117:17	7	1
FIELD	117:17	117:17	8	1
LEAF_NODE	117:17	117:17	9	1
LEAF_NODE	117:18	117:18	4	;
SIMPLE_DECL	118:4	118:34	3	const char * pszFilename ; pszFilename = NULL ;
VAR_DECL	118:4	118:16	4	const char * pszFilename ; pszFilename = NULL
TYPE	118:4	118:14	5	const char *
TYPE_NAME	118:4	118:10	6	const char
LEAF_NODE	118:4	118:4	7	const
LEAF_NODE	118:10	118:10	7	char
POINTER	118:14	118:14	6	*
LEAF_NODE	118:14	118:14	7	*
NAME	118:16	118:16	5	pszFilename
LEAF_NODE	118:16	118:16	6	pszFilename
LEAF_NODE	0:0	0:0	5	;
INIT	118:16	118:16	5	pszFilename = NULL
ASSIGN	118:16	118:30	6	pszFilename = NULL
LVAL	118:16	118:16	7	pszFilename
NAME	118:16	118:16	8	pszFilename
LEAF_NODE	118:16	118:16	9	pszFilename
ASSIGN_OP	118:28	118:28	7	=
LEAF_NODE	118:28	118:28	8	=
RVAL	118:30	118:30	7	NULL
FIELD	118:30	118:30	8	NULL
LEAF_NODE	118:30	118:30	9	NULL
LEAF_NODE	118:34	118:34	4	;
ITERATION	120:4	121:4	3	
KEYWORD	120:4	120:4	4	for
LEAF_NODE	120:4	120:4	5	for
LEAF_NODE	120:7	120:7	4	(
FOR_INIT	120:8	120:8	4	int i ; i = 1 ;
SIMPLE_DECL	120:8	120:17	5	int i ; i = 1 ;
VAR_DECL	120:8	120:12	6	int i ; i = 1
TYPE	120:8	120:8	7	int
TYPE_NAME	120:8	120:8	8	int
LEAF_NODE	120:8	120:8	9	int
NAME	120:12	120:12	7	i
LEAF_NODE	120:12	120:12	8	i
LEAF_NODE	0:0	0:0	7	;
INIT	120:12	120:12	7	i = 1
ASSIGN	120:12	120:16	8	i = 1
LVAL	120:12	120:12	9	i
NAME	120:12	120:12	10	i
LEAF_NODE	120:12	120:12	11	i
ASSIGN_OP	120:14	120:14	9	=
LEAF_NODE	120:14	120:14	10	=
RVAL	120:16	120:16	9	1
FIELD	120:16	120:16	10	1
LEAF_NODE	120:16	120:16	11	1
LEAF_NODE	120:17	120:17	6	;
CONDITION	120:19	120:19	4	i < argc
EXPR	120:19	120:23	5	i < argc
FIELD	120:19	120:19	6	i
LEAF_NODE	120:19	120:19	7	i
REL_OPERATOR	120:21	120:21	6	<
LEAF_NODE	120:21	120:21	7	<
FIELD	120:23	120:23	6	argc
LEAF_NODE	120:23	120:23	7	argc
LEAF_NODE	120:27	120:27	4	;
FOR_EXPR	120:29	120:29	4	i ++
EXPR	120:29	120:29	5	i ++
FIELD	120:29	120:30	6	i ++
LEAF_NODE	120:29	120:29	7	i
LEAF_NODE	120:30	120:30	7	++
LEAF_NODE	120:33	120:33	4	)
STATEMENTS	121:4	145:4	4	
LEAF_NODE	121:4	121:4	5	{
STATEMENTS	122:8	141:8	5	
SELECTION	122:8	123:8	6	
KEYWORD	122:8	122:8	7	if
LEAF_NODE	122:8	122:8	8	if
LEAF_NODE	122:10	122:10	7	(
CONDITION	122:12	122:12	7	i + 1 < argc && strcmp ( argv [ i ] , "-repeat" ) == 0
EXPR	122:12	122:12	8	i + 1 < argc && strcmp ( argv [ i ] , "-repeat" ) == 0
AND	122:12	122:28	9	i + 1 < argc && strcmp ( argv [ i ] , "-repeat" ) == 0
EXPR	122:12	122:20	10	i + 1 < argc
FIELD	122:12	122:12	11	i
LEAF_NODE	122:12	122:12	12	i
LEAF_NODE	122:14	122:14	11	+
FIELD	122:16	122:16	11	1
LEAF_NODE	122:16	122:16	12	1
REL_OPERATOR	122:18	122:18	11	<
LEAF_NODE	122:18	122:18	12	<
FIELD	122:20	122:20	11	argc
LEAF_NODE	122:20	122:20	12	argc
LEAF_NODE	122:25	122:25	10	&&
EXPR	122:28	122:58	10	strcmp ( argv [ i ] , "-repeat" ) == 0
FUNCTION_CALL	122:28	122:53	11	strcmp ( argv [ i ] , "-repeat" )
CALLEE	122:28	122:28	12	strcmp
LEAF_NODE	122:28	122:28	13	strcmp
LEAF_NODE	122:34	122:34	12	(
ARGUMENT	122:35	122:35	12	argv [ i ]
FIELD	122:35	122:41	13	argv [ i ]
LEAF_NODE	122:35	122:35	14	argv
LEAF_NODE	122:39	122:39	14	[
EXPR	122:40	122:40	14	i
FIELD	122:40	122:40	15	i
LEAF_NODE	122:40	122:40	16	i
LEAF_NODE	122:41	122:41	14	]
LEAF_NODE	122:42	122:42	12	,
ARGUMENT	122:44	122:44	12	"-repeat"
FIELD	122:44	122:44	13	"-repeat"
LEAF_NODE	122:44	122:44	14	"-repeat"
LEAF_NODE	122:53	122:53	12	)
EQ_OPERATOR	122:55	122:55	11	==
LEAF_NODE	122:55	122:55	12	==
FIELD	122:58	122:58	11	0
LEAF_NODE	122:58	122:58	12	0
LEAF_NODE	122:60	122:60	7	)
STATEMENTS	123:8	126:8	7	
LEAF_NODE	123:8	123:8	8	{
STATEMENTS	124:12	125:12	8	
EXPR_STATEMENT	124:12	124:36	9	nLoops = atoi ( argv [ i + 1 ] ) ;
EXPR	124:12	124:12	10	nLoops = atoi ( argv [ i + 1 ] )
ASSIGN	124:12	124:21	11	nLoops = atoi ( argv [ i + 1 ] )
LVAL	124:12	124:12	12	nLoops
FIELD	124:12	124:12	13	nLoops
LEAF_NODE	124:12	124:12	14	nLoops
ASSIGN_OP	124:19	124:19	12	=
LEAF_NODE	124:19	124:19	13	=
RVAL	124:21	124:21	12	atoi ( argv [ i + 1 ] )
FUNCTION_CALL	124:21	124:35	13	atoi ( argv [ i + 1 ] )
CALLEE	124:21	124:21	14	atoi
LEAF_NODE	124:21	124:21	15	atoi
LEAF_NODE	124:25	124:25	14	(
ARGUMENT	124:26	124:26	14	argv [ i + 1 ]
FIELD	124:26	124:34	15	argv [ i + 1 ]
LEAF_NODE	124:26	124:26	16	argv
LEAF_NODE	124:30	124:30	16	[
EXPR	124:31	124:33	16	i + 1
FIELD	124:31	124:31	17	i
LEAF_NODE	124:31	124:31	18	i
LEAF_NODE	124:32	124:32	17	+
FIELD	124:33	124:33	17	1
LEAF_NODE	124:33	124:33	18	1
LEAF_NODE	124:34	124:34	16	]
LEAF_NODE	124:35	124:35	14	)
LEAF_NODE	124:36	124:36	10	;
EXPR_STATEMENT	125:12	125:15	9	i ++ ;
EXPR	125:12	125:12	10	i ++
FIELD	125:12	125:13	11	i ++
LEAF_NODE	125:12	125:12	12	i
LEAF_NODE	125:13	125:13	12	++
LEAF_NODE	125:15	125:15	10	;
LEAF_NODE	126:8	126:8	8	}
SELECTION	127:8	127:13	6	
KEYWORD	127:8	127:8	7	else
LEAF_NODE	127:8	127:8	8	else
STATEMENTS	127:13	127:13	7	
SELECTION	127:13	128:8	8	
KEYWORD	127:13	127:13	9	if
LEAF_NODE	127:13	127:13	10	if
LEAF_NODE	127:15	127:15	9	(
CONDITION	127:17	127:17	9	strcmp ( argv [ i ] , "-dummy" ) == 0
EXPR	127:17	127:46	10	strcmp ( argv [ i ] , "-dummy" ) == 0
FUNCTION_CALL	127:17	127:41	11	strcmp ( argv [ i ] , "-dummy" )
CALLEE	127:17	127:17	12	strcmp
LEAF_NODE	127:17	127:17	13	strcmp
LEAF_NODE	127:23	127:23	12	(
ARGUMENT	127:24	127:24	12	argv [ i ]
FIELD	127:24	127:30	13	argv [ i ]
LEAF_NODE	127:24	127:24	14	argv
LEAF_NODE	127:28	127:28	14	[
EXPR	127:29	127:29	14	i
FIELD	127:29	127:29	15	i
LEAF_NODE	127:29	127:29	16	i
LEAF_NODE	127:30	127:30	14	]
LEAF_NODE	127:31	127:31	12	,
ARGUMENT	127:33	127:33	12	"-dummy"
FIELD	127:33	127:33	13	"-dummy"
LEAF_NODE	127:33	127:33	14	"-dummy"
LEAF_NODE	127:41	127:41	12	)
EQ_OPERATOR	127:43	127:43	11	==
LEAF_NODE	127:43	127:43	12	==
FIELD	127:46	127:46	11	0
LEAF_NODE	127:46	127:46	12	0
LEAF_NODE	127:48	127:48	9	)
STATEMENTS	128:8	131:8	9	
LEAF_NODE	128:8	128:8	10	{
STATEMENTS	129:12	130:12	10	
SIMPLE_DECL	129:12	129:31	11	uint8_t dummy ; dummy = ' ' ;
VAR_DECL	129:12	129:20	12	uint8_t dummy ; dummy = ' '
TYPE	129:12	129:12	13	uint8_t
TYPE_NAME	129:12	129:12	14	uint8_t
LEAF_NODE	129:12	129:12	15	uint8_t
NAME	129:20	129:20	13	dummy
LEAF_NODE	129:20	129:20	14	dummy
LEAF_NODE	0:0	0:0	13	;
INIT	129:20	129:20	13	dummy = ' '
ASSIGN	129:20	129:28	14	dummy = ' '
LVAL	129:20	129:20	15	dummy
NAME	129:20	129:20	16	dummy
LEAF_NODE	129:20	129:20	17	dummy
ASSIGN_OP	129:26	129:26	15	=
LEAF_NODE	129:26	129:26	16	=
RVAL	129:28	129:28	15	' '
FIELD	129:28	129:28	16	' '
LEAF_NODE	129:28	129:28	17	' '
LEAF_NODE	129:31	129:31	12	;
JUMP_STATEMENT	130:12	130:52	11	return LLVMFuzzerTestOneInput ( & dummy , 1 ) ;
KEYWORD	130:12	130:12	12	return
LEAF_NODE	130:12	130:12	13	return
DESTINATION	130:19	130:19	12	LLVMFuzzerTestOneInput ( & dummy , 1 )
EXPR	130:19	130:19	13	LLVMFuzzerTestOneInput ( & dummy , 1 )
FUNCTION_CALL	130:19	130:51	14	LLVMFuzzerTestOneInput ( & dummy , 1 )
CALLEE	130:19	130:19	15	LLVMFuzzerTestOneInput
LEAF_NODE	130:19	130:19	16	LLVMFuzzerTestOneInput
LEAF_NODE	130:41	130:41	15	(
ARGUMENT	130:42	130:42	15	& dummy
UNARY_EXPR	130:42	130:43	16	& dummy
UNARY_OPERATOR	130:42	130:42	17	&
LEAF_NODE	130:42	130:42	18	&
FIELD	130:43	130:43	17	dummy
LEAF_NODE	130:43	130:43	18	dummy
LEAF_NODE	130:48	130:48	15	,
ARGUMENT	130:50	130:50	15	1
FIELD	130:50	130:50	16	1
LEAF_NODE	130:50	130:50	17	1
LEAF_NODE	130:51	130:51	15	)
LEAF_NODE	130:52	130:52	12	;
LEAF_NODE	131:8	131:8	10	}
SELECTION	132:8	132:13	6	
KEYWORD	132:8	132:8	7	else
LEAF_NODE	132:8	132:8	8	else
STATEMENTS	132:13	132:13	7	
SELECTION	132:13	133:8	8	
KEYWORD	132:13	132:13	9	if
LEAF_NODE	132:13	132:13	10	if
LEAF_NODE	132:15	132:15	9	(
CONDITION	132:17	132:17	9	strcmp ( argv [ i ] , "--help" ) == 0
EXPR	132:17	132:46	10	strcmp ( argv [ i ] , "--help" ) == 0
FUNCTION_CALL	132:17	132:41	11	strcmp ( argv [ i ] , "--help" )
CALLEE	132:17	132:17	12	strcmp
LEAF_NODE	132:17	132:17	13	strcmp
LEAF_NODE	132:23	132:23	12	(
ARGUMENT	132:24	132:24	12	argv [ i ]
FIELD	132:24	132:30	13	argv [ i ]
LEAF_NODE	132:24	132:24	14	argv
LEAF_NODE	132:28	132:28	14	[
EXPR	132:29	132:29	14	i
FIELD	132:29	132:29	15	i
LEAF_NODE	132:29	132:29	16	i
LEAF_NODE	132:30	132:30	14	]
LEAF_NODE	132:31	132:31	12	,
ARGUMENT	132:33	132:33	12	"--help"
FIELD	132:33	132:33	13	"--help"
LEAF_NODE	132:33	132:33	14	"--help"
LEAF_NODE	132:41	132:41	12	)
EQ_OPERATOR	132:43	132:43	11	==
LEAF_NODE	132:43	132:43	12	==
FIELD	132:46	132:46	11	0
LEAF_NODE	132:46	132:46	12	0
LEAF_NODE	132:48	132:48	9	)
STATEMENTS	133:8	135:8	9	
LEAF_NODE	133:8	133:8	10	{
STATEMENTS	134:12	134:12	10	
EXPR_STATEMENT	134:12	134:29	11	Usage ( argc , argv ) ;
EXPR	134:12	134:12	12	Usage ( argc , argv )
FUNCTION_CALL	134:12	134:28	13	Usage ( argc , argv )
CALLEE	134:12	134:12	14	Usage
LEAF_NODE	134:12	134:12	15	Usage
LEAF_NODE	134:17	134:17	14	(
ARGUMENT	134:18	134:18	14	argc
FIELD	134:18	134:18	15	argc
LEAF_NODE	134:18	134:18	16	argc
LEAF_NODE	134:22	134:22	14	,
ARGUMENT	134:24	134:24	14	argv
FIELD	134:24	134:24	15	argv
LEAF_NODE	134:24	134:24	16	argv
LEAF_NODE	134:28	134:28	14	)
LEAF_NODE	134:29	134:29	12	;
LEAF_NODE	135:8	135:8	10	}
SELECTION	136:8	136:13	6	
KEYWORD	136:8	136:8	7	else
LEAF_NODE	136:8	136:8	8	else
STATEMENTS	136:13	136:13	7	
SELECTION	136:13	137:8	8	
KEYWORD	136:13	136:13	9	if
LEAF_NODE	136:13	136:13	10	if
LEAF_NODE	136:15	136:15	9	(
CONDITION	136:17	136:17	9	argv [ i ] [ 0 ] == '-'
EXPR	136:17	136:31	10	argv [ i ] [ 0 ] == '-'
FIELD	136:17	136:26	11	argv [ i ] [ 0 ]
LEAF_NODE	136:17	136:17	12	argv
LEAF_NODE	136:21	136:21	12	[
EXPR	136:22	136:22	12	i
FIELD	136:22	136:22	13	i
LEAF_NODE	136:22	136:22	14	i
LEAF_NODE	136:23	136:23	12	]
LEAF_NODE	136:24	136:24	12	[
EXPR	136:25	136:25	12	0
FIELD	136:25	136:25	13	0
LEAF_NODE	136:25	136:25	14	0
LEAF_NODE	136:26	136:26	12	]
EQ_OPERATOR	136:28	136:28	11	==
LEAF_NODE	136:28	136:28	12	==
FIELD	136:31	136:31	11	'-'
LEAF_NODE	136:31	136:31	12	'-'
LEAF_NODE	136:35	136:35	9	)
STATEMENTS	137:8	140:8	9	
LEAF_NODE	137:8	137:8	10	{
STATEMENTS	138:12	139:12	10	
EXPR_STATEMENT	138:12	138:63	11	fprintf ( stderr , "Unrecognized option: %s" , argv [ i ] ) ;
EXPR	138:12	138:12	12	fprintf ( stderr , "Unrecognized option: %s" , argv [ i ] )
FUNCTION_CALL	138:12	138:62	13	fprintf ( stderr , "Unrecognized option: %s" , argv [ i ] )
CALLEE	138:12	138:12	14	fprintf
LEAF_NODE	138:12	138:12	15	fprintf
LEAF_NODE	138:19	138:19	14	(
ARGUMENT	138:20	138:20	14	stderr
FIELD	138:20	138:20	15	stderr
LEAF_NODE	138:20	138:20	16	stderr
LEAF_NODE	138:26	138:26	14	,
ARGUMENT	138:28	138:28	14	"Unrecognized option: %s"
FIELD	138:28	138:28	15	"Unrecognized option: %s"
LEAF_NODE	138:28	138:28	16	"Unrecognized option: %s"
LEAF_NODE	138:53	138:53	14	,
ARGUMENT	138:55	138:55	14	argv [ i ]
FIELD	138:55	138:61	15	argv [ i ]
LEAF_NODE	138:55	138:55	16	argv
LEAF_NODE	138:59	138:59	16	[
EXPR	138:60	138:60	16	i
FIELD	138:60	138:60	17	i
LEAF_NODE	138:60	138:60	18	i
LEAF_NODE	138:61	138:61	16	]
LEAF_NODE	138:62	138:62	14	)
LEAF_NODE	138:63	138:63	12	;
EXPR_STATEMENT	139:12	139:29	11	Usage ( argc , argv ) ;
EXPR	139:12	139:12	12	Usage ( argc , argv )
FUNCTION_CALL	139:12	139:28	13	Usage ( argc , argv )
CALLEE	139:12	139:12	14	Usage
LEAF_NODE	139:12	139:12	15	Usage
LEAF_NODE	139:17	139:17	14	(
ARGUMENT	139:18	139:18	14	argc
FIELD	139:18	139:18	15	argc
LEAF_NODE	139:18	139:18	16	argc
LEAF_NODE	139:22	139:22	14	,
ARGUMENT	139:24	139:24	14	argv
FIELD	139:24	139:24	15	argv
LEAF_NODE	139:24	139:24	16	argv
LEAF_NODE	139:28	139:28	14	)
LEAF_NODE	139:29	139:29	12	;
LEAF_NODE	140:8	140:8	10	}
SELECTION	141:8	142:8	6	
KEYWORD	141:8	141:8	7	else
LEAF_NODE	141:8	141:8	8	else
STATEMENTS	142:8	144:8	7	
LEAF_NODE	142:8	142:8	8	{
STATEMENTS	143:12	143:12	8	
EXPR_STATEMENT	143:12	143:33	9	pszFilename = argv [ i ] ;
EXPR	143:12	143:12	10	pszFilename = argv [ i ]
ASSIGN	143:12	143:26	11	pszFilename = argv [ i ]
LVAL	143:12	143:12	12	pszFilename
FIELD	143:12	143:12	13	pszFilename
LEAF_NODE	143:12	143:12	14	pszFilename
ASSIGN_OP	143:24	143:24	12	=
LEAF_NODE	143:24	143:24	13	=
RVAL	143:26	143:26	12	argv [ i ]
FIELD	143:26	143:32	13	argv [ i ]
LEAF_NODE	143:26	143:26	14	argv
LEAF_NODE	143:30	143:30	14	[
EXPR	143:31	143:31	14	i
FIELD	143:31	143:31	15	i
LEAF_NODE	143:31	143:31	16	i
LEAF_NODE	143:32	143:32	14	]
LEAF_NODE	143:33	143:33	10	;
LEAF_NODE	144:8	144:8	8	}
LEAF_NODE	145:4	145:4	5	}
SELECTION	146:4	147:4	3	
KEYWORD	146:4	146:4	4	if
LEAF_NODE	146:4	146:4	5	if
LEAF_NODE	146:6	146:6	4	(
CONDITION	146:8	146:8	4	pszFilename == nullptr
EXPR	146:8	146:23	5	pszFilename == nullptr
FIELD	146:8	146:8	6	pszFilename
LEAF_NODE	146:8	146:8	7	pszFilename
EQ_OPERATOR	146:20	146:20	6	==
LEAF_NODE	146:20	146:20	7	==
FIELD	146:23	146:23	6	nullptr
LEAF_NODE	146:23	146:23	7	nullptr
LEAF_NODE	146:31	146:31	4	)
STATEMENTS	147:4	150:4	4	
LEAF_NODE	147:4	147:4	5	{
STATEMENTS	148:8	149:8	5	
EXPR_STATEMENT	148:8	148:50	6	fprintf ( stderr , "No filename specified\n" ) ;
EXPR	148:8	148:8	7	fprintf ( stderr , "No filename specified\n" )
FUNCTION_CALL	148:8	148:49	8	fprintf ( stderr , "No filename specified\n" )
CALLEE	148:8	148:8	9	fprintf
LEAF_NODE	148:8	148:8	10	fprintf
LEAF_NODE	148:15	148:15	9	(
ARGUMENT	148:16	148:16	9	stderr
FIELD	148:16	148:16	10	stderr
LEAF_NODE	148:16	148:16	11	stderr
LEAF_NODE	148:22	148:22	9	,
ARGUMENT	148:24	148:24	9	"No filename specified\n"
FIELD	148:24	148:24	10	"No filename specified\n"
LEAF_NODE	148:24	148:24	11	"No filename specified\n"
LEAF_NODE	148:49	148:49	9	)
LEAF_NODE	148:50	148:50	7	;
EXPR_STATEMENT	149:8	149:25	6	Usage ( argc , argv ) ;
EXPR	149:8	149:8	7	Usage ( argc , argv )
FUNCTION_CALL	149:8	149:24	8	Usage ( argc , argv )
CALLEE	149:8	149:8	9	Usage
LEAF_NODE	149:8	149:8	10	Usage
LEAF_NODE	149:13	149:13	9	(
ARGUMENT	149:14	149:14	9	argc
FIELD	149:14	149:14	10	argc
LEAF_NODE	149:14	149:14	11	argc
LEAF_NODE	149:18	149:18	9	,
ARGUMENT	149:20	149:20	9	argv
FIELD	149:20	149:20	10	argv
LEAF_NODE	149:20	149:20	11	argv
LEAF_NODE	149:24	149:24	9	)
LEAF_NODE	149:25	149:25	7	;
LEAF_NODE	150:4	150:4	5	}
SIMPLE_DECL	151:4	151:38	3	FILE * f ; f = fopen ( pszFilename , "rb" ) ;
VAR_DECL	151:4	151:10	4	FILE * f ; f = fopen ( pszFilename , "rb" )
TYPE	151:4	151:8	5	FILE *
TYPE_NAME	151:4	151:4	6	FILE
LEAF_NODE	151:4	151:4	7	FILE
POINTER	151:8	151:8	6	*
LEAF_NODE	151:8	151:8	7	*
NAME	151:10	151:10	5	f
LEAF_NODE	151:10	151:10	6	f
LEAF_NODE	0:0	0:0	5	;
INIT	151:10	151:10	5	f = fopen ( pszFilename , "rb" )
ASSIGN	151:10	151:14	6	f = fopen ( pszFilename , "rb" )
LVAL	151:10	151:10	7	f
NAME	151:10	151:10	8	f
LEAF_NODE	151:10	151:10	9	f
ASSIGN_OP	151:12	151:12	7	=
LEAF_NODE	151:12	151:12	8	=
RVAL	151:14	151:14	7	fopen ( pszFilename , "rb" )
FUNCTION_CALL	151:14	151:37	8	fopen ( pszFilename , "rb" )
CALLEE	151:14	151:14	9	fopen
LEAF_NODE	151:14	151:14	10	fopen
LEAF_NODE	151:19	151:19	9	(
ARGUMENT	151:20	151:20	9	pszFilename
FIELD	151:20	151:20	10	pszFilename
LEAF_NODE	151:20	151:20	11	pszFilename
LEAF_NODE	151:31	151:31	9	,
ARGUMENT	151:33	151:33	9	"rb"
FIELD	151:33	151:33	10	"rb"
LEAF_NODE	151:33	151:33	11	"rb"
LEAF_NODE	151:37	151:37	9	)
LEAF_NODE	151:38	151:38	4	;
SELECTION	152:4	153:4	3	
KEYWORD	152:4	152:4	4	if
LEAF_NODE	152:4	152:4	5	if
LEAF_NODE	152:6	152:6	4	(
CONDITION	152:8	152:8	4	! f
EXPR	152:8	152:8	5	! f
UNARY_EXPR	152:8	152:9	6	! f
UNARY_OPERATOR	152:8	152:8	7	!
LEAF_NODE	152:8	152:8	8	!
FIELD	152:9	152:9	7	f
LEAF_NODE	152:9	152:9	8	f
LEAF_NODE	152:11	152:11	4	)
STATEMENTS	153:4	156:4	4	
LEAF_NODE	153:4	153:4	5	{
STATEMENTS	154:8	155:8	5	
EXPR_STATEMENT	154:8	154:60	6	fprintf ( stderr , "%s does not exist.\n" , pszFilename ) ;
EXPR	154:8	154:8	7	fprintf ( stderr , "%s does not exist.\n" , pszFilename )
FUNCTION_CALL	154:8	154:59	8	fprintf ( stderr , "%s does not exist.\n" , pszFilename )
CALLEE	154:8	154:8	9	fprintf
LEAF_NODE	154:8	154:8	10	fprintf
LEAF_NODE	154:15	154:15	9	(
ARGUMENT	154:16	154:16	9	stderr
FIELD	154:16	154:16	10	stderr
LEAF_NODE	154:16	154:16	11	stderr
LEAF_NODE	154:22	154:22	9	,
ARGUMENT	154:24	154:24	9	"%s does not exist.\n"
FIELD	154:24	154:24	10	"%s does not exist.\n"
LEAF_NODE	154:24	154:24	11	"%s does not exist.\n"
LEAF_NODE	154:46	154:46	9	,
ARGUMENT	154:48	154:48	9	pszFilename
FIELD	154:48	154:48	10	pszFilename
LEAF_NODE	154:48	154:48	11	pszFilename
LEAF_NODE	154:59	154:59	9	)
LEAF_NODE	154:60	154:60	7	;
EXPR_STATEMENT	155:8	155:15	6	exit ( 1 ) ;
EXPR	155:8	155:8	7	exit ( 1 )
FUNCTION_CALL	155:8	155:14	8	exit ( 1 )
CALLEE	155:8	155:8	9	exit
LEAF_NODE	155:8	155:8	10	exit
LEAF_NODE	155:12	155:12	9	(
ARGUMENT	155:13	155:13	9	1
FIELD	155:13	155:13	10	1
LEAF_NODE	155:13	155:13	11	1
LEAF_NODE	155:14	155:14	9	)
LEAF_NODE	155:15	155:15	7	;
LEAF_NODE	156:4	156:4	5	}
EXPR_STATEMENT	157:4	157:25	3	fseek ( f , 0 , SEEK_END ) ;
EXPR	157:4	157:4	4	fseek ( f , 0 , SEEK_END )
FUNCTION_CALL	157:4	157:24	5	fseek ( f , 0 , SEEK_END )
CALLEE	157:4	157:4	6	fseek
LEAF_NODE	157:4	157:4	7	fseek
LEAF_NODE	157:9	157:9	6	(
ARGUMENT	157:10	157:10	6	f
FIELD	157:10	157:10	7	f
LEAF_NODE	157:10	157:10	8	f
LEAF_NODE	157:11	157:11	6	,
ARGUMENT	157:13	157:13	6	0
FIELD	157:13	157:13	7	0
LEAF_NODE	157:13	157:13	8	0
LEAF_NODE	157:14	157:14	6	,
ARGUMENT	157:16	157:16	6	SEEK_END
FIELD	157:16	157:16	7	SEEK_END
LEAF_NODE	157:16	157:16	8	SEEK_END
LEAF_NODE	157:24	157:24	6	)
LEAF_NODE	157:25	157:25	4	;
EXPR_STATEMENT	158:4	158:24	3	nLen = ( int ) ftell ( f ) ;
EXPR	158:4	158:4	4	nLen = ( int ) ftell ( f )
ASSIGN	158:4	158:11	5	nLen = ( int ) ftell ( f )
LVAL	158:4	158:4	6	nLen
FIELD	158:4	158:4	7	nLen
LEAF_NODE	158:4	158:4	8	nLen
ASSIGN_OP	158:9	158:9	6	=
LEAF_NODE	158:9	158:9	7	=
RVAL	158:11	158:16	6	( int ) ftell ( f )
LEAF_NODE	158:11	158:11	7	(
TYPE_NAME	158:12	158:12	7	int
LEAF_NODE	158:12	158:12	8	int
LEAF_NODE	158:15	158:15	7	)
FUNCTION_CALL	158:16	158:23	7	ftell ( f )
CALLEE	158:16	158:16	8	ftell
LEAF_NODE	158:16	158:16	9	ftell
LEAF_NODE	158:21	158:21	8	(
ARGUMENT	158:22	158:22	8	f
FIELD	158:22	158:22	9	f
LEAF_NODE	158:22	158:22	10	f
LEAF_NODE	158:23	158:23	8	)
LEAF_NODE	158:24	158:24	4	;
EXPR_STATEMENT	159:4	159:25	3	fseek ( f , 0 , SEEK_SET ) ;
EXPR	159:4	159:4	4	fseek ( f , 0 , SEEK_SET )
FUNCTION_CALL	159:4	159:24	5	fseek ( f , 0 , SEEK_SET )
CALLEE	159:4	159:4	6	fseek
LEAF_NODE	159:4	159:4	7	fseek
LEAF_NODE	159:9	159:9	6	(
ARGUMENT	159:10	159:10	6	f
FIELD	159:10	159:10	7	f
LEAF_NODE	159:10	159:10	8	f
LEAF_NODE	159:11	159:11	6	,
ARGUMENT	159:13	159:13	6	0
FIELD	159:13	159:13	7	0
LEAF_NODE	159:13	159:13	8	0
LEAF_NODE	159:14	159:14	6	,
ARGUMENT	159:16	159:16	6	SEEK_SET
FIELD	159:16	159:16	7	SEEK_SET
LEAF_NODE	159:16	159:16	8	SEEK_SET
LEAF_NODE	159:24	159:24	6	)
LEAF_NODE	159:25	159:25	4	;
EXPR_STATEMENT	160:4	160:22	3	buf = malloc ( nLen ) ;
EXPR	160:4	160:4	4	buf = malloc ( nLen )
ASSIGN	160:4	160:10	5	buf = malloc ( nLen )
LVAL	160:4	160:4	6	buf
FIELD	160:4	160:4	7	buf
LEAF_NODE	160:4	160:4	8	buf
ASSIGN_OP	160:8	160:8	6	=
LEAF_NODE	160:8	160:8	7	=
RVAL	160:10	160:10	6	malloc ( nLen )
FUNCTION_CALL	160:10	160:21	7	malloc ( nLen )
CALLEE	160:10	160:10	8	malloc
LEAF_NODE	160:10	160:10	9	malloc
LEAF_NODE	160:16	160:16	8	(
ARGUMENT	160:17	160:17	8	nLen
FIELD	160:17	160:17	9	nLen
LEAF_NODE	160:17	160:17	10	nLen
LEAF_NODE	160:21	160:21	8	)
LEAF_NODE	160:22	160:22	4	;
SELECTION	161:4	162:4	3	
KEYWORD	161:4	161:4	4	if
LEAF_NODE	161:4	161:4	5	if
LEAF_NODE	161:6	161:6	4	(
CONDITION	161:8	161:8	4	! buf
EXPR	161:8	161:8	5	! buf
UNARY_EXPR	161:8	161:9	6	! buf
UNARY_OPERATOR	161:8	161:8	7	!
LEAF_NODE	161:8	161:8	8	!
FIELD	161:9	161:9	7	buf
LEAF_NODE	161:9	161:9	8	buf
LEAF_NODE	161:13	161:13	4	)
STATEMENTS	162:4	166:4	4	
LEAF_NODE	162:4	162:4	5	{
STATEMENTS	163:8	165:8	5	
EXPR_STATEMENT	163:8	163:43	6	fprintf ( stderr , "malloc failed.\n" ) ;
EXPR	163:8	163:8	7	fprintf ( stderr , "malloc failed.\n" )
FUNCTION_CALL	163:8	163:42	8	fprintf ( stderr , "malloc failed.\n" )
CALLEE	163:8	163:8	9	fprintf
LEAF_NODE	163:8	163:8	10	fprintf
LEAF_NODE	163:15	163:15	9	(
ARGUMENT	163:16	163:16	9	stderr
FIELD	163:16	163:16	10	stderr
LEAF_NODE	163:16	163:16	11	stderr
LEAF_NODE	163:22	163:22	9	,
ARGUMENT	163:24	163:24	9	"malloc failed.\n"
FIELD	163:24	163:24	10	"malloc failed.\n"
LEAF_NODE	163:24	163:24	11	"malloc failed.\n"
LEAF_NODE	163:42	163:42	9	)
LEAF_NODE	163:43	163:43	7	;
EXPR_STATEMENT	164:8	164:17	6	fclose ( f ) ;
EXPR	164:8	164:8	7	fclose ( f )
FUNCTION_CALL	164:8	164:16	8	fclose ( f )
CALLEE	164:8	164:8	9	fclose
LEAF_NODE	164:8	164:8	10	fclose
LEAF_NODE	164:14	164:14	9	(
ARGUMENT	164:15	164:15	9	f
FIELD	164:15	164:15	10	f
LEAF_NODE	164:15	164:15	11	f
LEAF_NODE	164:16	164:16	9	)
LEAF_NODE	164:17	164:17	7	;
EXPR_STATEMENT	165:8	165:15	6	exit ( 1 ) ;
EXPR	165:8	165:8	7	exit ( 1 )
FUNCTION_CALL	165:8	165:14	8	exit ( 1 )
CALLEE	165:8	165:8	9	exit
LEAF_NODE	165:8	165:8	10	exit
LEAF_NODE	165:12	165:12	9	(
ARGUMENT	165:13	165:13	9	1
FIELD	165:13	165:13	10	1
LEAF_NODE	165:13	165:13	11	1
LEAF_NODE	165:14	165:14	9	)
LEAF_NODE	165:15	165:15	7	;
LEAF_NODE	166:4	166:4	5	}
EXPR_STATEMENT	167:4	167:46	3	CPL_IGNORE_RET_VAL ( fread ( buf , nLen , 1 , f ) ) ;
EXPR	167:4	167:4	4	CPL_IGNORE_RET_VAL ( fread ( buf , nLen , 1 , f ) )
FUNCTION_CALL	167:4	167:45	5	CPL_IGNORE_RET_VAL ( fread ( buf , nLen , 1 , f ) )
CALLEE	167:4	167:4	6	CPL_IGNORE_RET_VAL
LEAF_NODE	167:4	167:4	7	CPL_IGNORE_RET_VAL
LEAF_NODE	167:22	167:22	6	(
ARGUMENT	167:23	167:23	6	fread ( buf , nLen , 1 , f )
FUNCTION_CALL	167:23	167:44	7	fread ( buf , nLen , 1 , f )
CALLEE	167:23	167:23	8	fread
LEAF_NODE	167:23	167:23	9	fread
LEAF_NODE	167:28	167:28	8	(
ARGUMENT	167:29	167:29	8	buf
FIELD	167:29	167:29	9	buf
LEAF_NODE	167:29	167:29	10	buf
LEAF_NODE	167:32	167:32	8	,
ARGUMENT	167:34	167:34	8	nLen
FIELD	167:34	167:34	9	nLen
LEAF_NODE	167:34	167:34	10	nLen
LEAF_NODE	167:38	167:38	8	,
ARGUMENT	167:40	167:40	8	1
FIELD	167:40	167:40	9	1
LEAF_NODE	167:40	167:40	10	1
LEAF_NODE	167:41	167:41	8	,
ARGUMENT	167:43	167:43	8	f
FIELD	167:43	167:43	9	f
LEAF_NODE	167:43	167:43	10	f
LEAF_NODE	167:44	167:44	8	)
LEAF_NODE	167:45	167:45	6	)
LEAF_NODE	167:46	167:46	4	;
EXPR_STATEMENT	168:4	168:13	3	fclose ( f ) ;
EXPR	168:4	168:4	4	fclose ( f )
FUNCTION_CALL	168:4	168:12	5	fclose ( f )
CALLEE	168:4	168:4	6	fclose
LEAF_NODE	168:4	168:4	7	fclose
LEAF_NODE	168:10	168:10	6	(
ARGUMENT	168:11	168:11	6	f
FIELD	168:11	168:11	7	f
LEAF_NODE	168:11	168:11	8	f
LEAF_NODE	168:12	168:12	6	)
LEAF_NODE	168:13	168:13	4	;
ITERATION	169:4	170:4	3	
KEYWORD	169:4	169:4	4	for
LEAF_NODE	169:4	169:4	5	for
LEAF_NODE	169:7	169:7	4	(
FOR_INIT	169:9	169:9	4	int i ; i = 0 ;
SIMPLE_DECL	169:9	169:18	5	int i ; i = 0 ;
VAR_DECL	169:9	169:13	6	int i ; i = 0
TYPE	169:9	169:9	7	int
TYPE_NAME	169:9	169:9	8	int
LEAF_NODE	169:9	169:9	9	int
NAME	169:13	169:13	7	i
LEAF_NODE	169:13	169:13	8	i
LEAF_NODE	0:0	0:0	7	;
INIT	169:13	169:13	7	i = 0
ASSIGN	169:13	169:17	8	i = 0
LVAL	169:13	169:13	9	i
NAME	169:13	169:13	10	i
LEAF_NODE	169:13	169:13	11	i
ASSIGN_OP	169:15	169:15	9	=
LEAF_NODE	169:15	169:15	10	=
RVAL	169:17	169:17	9	0
FIELD	169:17	169:17	10	0
LEAF_NODE	169:17	169:17	11	0
LEAF_NODE	169:18	169:18	6	;
CONDITION	169:20	169:20	4	i < nLoops
EXPR	169:20	169:24	5	i < nLoops
FIELD	169:20	169:20	6	i
LEAF_NODE	169:20	169:20	7	i
REL_OPERATOR	169:22	169:22	6	<
LEAF_NODE	169:22	169:22	7	<
FIELD	169:24	169:24	6	nLoops
LEAF_NODE	169:24	169:24	7	nLoops
LEAF_NODE	169:30	169:30	4	;
FOR_EXPR	169:32	169:32	4	i ++
EXPR	169:32	169:32	5	i ++
FIELD	169:32	169:33	6	i ++
LEAF_NODE	169:32	169:32	7	i
LEAF_NODE	169:33	169:33	7	++
LEAF_NODE	169:36	169:36	4	)
STATEMENTS	170:4	174:4	4	
LEAF_NODE	170:4	170:4	5	{
STATEMENTS	171:8	172:8	5	
EXPR_STATEMENT	171:8	171:77	6	nRet = LLVMFuzzerTestOneInput ( static_cast < const uint8_t * > ( buf ) , nLen ) ;
EXPR	171:8	171:8	7	nRet = LLVMFuzzerTestOneInput ( static_cast < const uint8_t * > ( buf ) , nLen )
ASSIGN	171:8	171:15	8	nRet = LLVMFuzzerTestOneInput ( static_cast < const uint8_t * > ( buf ) , nLen )
LVAL	171:8	171:8	9	nRet
FIELD	171:8	171:8	10	nRet
LEAF_NODE	171:8	171:8	11	nRet
ASSIGN_OP	171:13	171:13	9	=
LEAF_NODE	171:13	171:13	10	=
RVAL	171:15	171:15	9	LLVMFuzzerTestOneInput ( static_cast < const uint8_t * > ( buf ) , nLen )
FUNCTION_CALL	171:15	171:76	10	LLVMFuzzerTestOneInput ( static_cast < const uint8_t * > ( buf ) , nLen )
CALLEE	171:15	171:15	11	LLVMFuzzerTestOneInput
LEAF_NODE	171:15	171:15	12	LLVMFuzzerTestOneInput
LEAF_NODE	171:37	171:37	11	(
ARGUMENT	171:38	171:38	11	static_cast < const uint8_t * > ( buf )
FUNCTION_CALL	171:38	171:69	12	static_cast < const uint8_t * > ( buf )
CALLEE	171:38	171:38	13	static_cast
LEAF_NODE	171:38	171:38	14	static_cast
LEAF_NODE	171:49	171:49	13	<
LEAF_NODE	171:50	171:50	13	const
LEAF_NODE	171:56	171:56	13	uint8_t
LEAF_NODE	171:63	171:63	13	*
LEAF_NODE	171:64	171:64	13	>
LEAF_NODE	171:65	171:65	13	(
ARGUMENT	171:66	171:66	13	buf
FIELD	171:66	171:66	14	buf
LEAF_NODE	171:66	171:66	15	buf
LEAF_NODE	171:69	171:69	13	)
LEAF_NODE	171:70	171:70	11	,
ARGUMENT	171:72	171:72	11	nLen
FIELD	171:72	171:72	12	nLen
LEAF_NODE	171:72	171:72	13	nLen
LEAF_NODE	171:76	171:76	11	)
LEAF_NODE	171:77	171:77	7	;
SELECTION	172:8	173:12	6	
KEYWORD	172:8	172:8	7	if
LEAF_NODE	172:8	172:8	8	if
LEAF_NODE	172:10	172:10	7	(
CONDITION	172:12	172:12	7	nRet != 0
EXPR	172:12	172:20	8	nRet != 0
FIELD	172:12	172:12	9	nRet
LEAF_NODE	172:12	172:12	10	nRet
EQ_OPERATOR	172:17	172:17	9	!=
LEAF_NODE	172:17	172:17	10	!=
FIELD	172:20	172:20	9	0
LEAF_NODE	172:20	172:20	10	0
LEAF_NODE	172:22	172:22	7	)
STATEMENTS	173:12	173:12	7	
JUMP_STATEMENT	173:12	173:17	8	break DESTINATION ;
KEYWORD	173:12	173:12	9	break
LEAF_NODE	173:12	173:12	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	173:17	173:17	9	;
LEAF_NODE	174:4	174:4	5	}
EXPR_STATEMENT	175:4	175:13	3	free ( buf ) ;
EXPR	175:4	175:4	4	free ( buf )
FUNCTION_CALL	175:4	175:12	5	free ( buf )
CALLEE	175:4	175:4	6	free
LEAF_NODE	175:4	175:4	7	free
LEAF_NODE	175:8	175:8	6	(
ARGUMENT	175:9	175:9	6	buf
FIELD	175:9	175:9	7	buf
LEAF_NODE	175:9	175:9	8	buf
LEAF_NODE	175:12	175:12	6	)
LEAF_NODE	175:13	175:13	4	;
JUMP_STATEMENT	176:4	176:15	3	return nRet ;
KEYWORD	176:4	176:4	4	return
LEAF_NODE	176:4	176:4	5	return
DESTINATION	176:11	176:11	4	nRet
EXPR	176:11	176:11	5	nRet
FIELD	176:11	176:11	6	nRet
LEAF_NODE	176:11	176:11	7	nRet
LEAF_NODE	176:15	176:15	4	;
LEAF_NODE	177:0	177:0	2	}
