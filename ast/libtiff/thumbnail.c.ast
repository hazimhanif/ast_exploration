SOURCE_FILE	52:8	669:0	0	
SIMPLE_DECL	52:8	60:10	1	enum CLASS_NAME BASE_CLASSES { EXP50 , EXP60 , EXP70 , EXP80 , EXP90 , EXP , LINEAR } Contrast ;
VAR_DECL	52:8	60:2	2	enum CLASS_NAME BASE_CLASSES { EXP50 , EXP60 , EXP70 , EXP80 , EXP90 , EXP , LINEAR } Contrast
TYPE	52:8	52:8	3	enum CLASS_NAME BASE_CLASSES { EXP50 , EXP60 , EXP70 , EXP80 , EXP90 , EXP , LINEAR }
CLASS_DEF	52:8	60:0	4	enum CLASS_NAME BASE_CLASSES { EXP50 , EXP60 , EXP70 , EXP80 , EXP90 , EXP , LINEAR }
LEAF_NODE	52:8	52:8	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	52:13	52:13	5	{
CLASS_CONTENT	53:4	59:4	5	EXP50 , EXP60 , EXP70 , EXP80 , EXP90 , EXP , LINEAR
LEAF_NODE	53:4	53:4	6	EXP50
LEAF_NODE	53:9	53:9	6	,
LEAF_NODE	54:4	54:4	6	EXP60
LEAF_NODE	54:9	54:9	6	,
LEAF_NODE	55:4	55:4	6	EXP70
LEAF_NODE	55:9	55:9	6	,
LEAF_NODE	56:4	56:4	6	EXP80
LEAF_NODE	56:9	56:9	6	,
LEAF_NODE	57:4	57:4	6	EXP90
LEAF_NODE	57:9	57:9	6	,
LEAF_NODE	58:4	58:4	6	EXP
LEAF_NODE	58:7	58:7	6	,
LEAF_NODE	59:4	59:4	6	LINEAR
LEAF_NODE	60:0	60:0	5	}
NAME	60:2	60:2	3	Contrast
LEAF_NODE	60:2	60:2	4	Contrast
LEAF_NODE	60:10	60:10	2	;
SIMPLE_DECL	62:7	62:23	1	uint32 tnw ; tnw = 216 ;
VAR_DECL	62:7	62:14	2	uint32 tnw ; tnw = 216
TYPE	62:7	62:7	3	uint32
TYPE_NAME	62:7	62:7	4	uint32
LEAF_NODE	62:7	62:7	5	uint32
NAME	62:14	62:14	3	tnw
LEAF_NODE	62:14	62:14	4	tnw
LEAF_NODE	0:0	0:0	3	;
INIT	62:14	62:14	3	tnw = 216
ASSIGN	62:14	62:20	4	tnw = 216
LVAL	62:14	62:14	5	tnw
NAME	62:14	62:14	6	tnw
LEAF_NODE	62:14	62:14	7	tnw
ASSIGN_OP	62:18	62:18	5	=
LEAF_NODE	62:18	62:18	6	=
RVAL	62:20	62:20	5	216
FIELD	62:20	62:20	6	216
LEAF_NODE	62:20	62:20	7	216
LEAF_NODE	62:23	62:23	2	;
SIMPLE_DECL	63:7	63:23	1	uint32 tnh ; tnh = 274 ;
VAR_DECL	63:7	63:14	2	uint32 tnh ; tnh = 274
TYPE	63:7	63:7	3	uint32
TYPE_NAME	63:7	63:7	4	uint32
LEAF_NODE	63:7	63:7	5	uint32
NAME	63:14	63:14	3	tnh
LEAF_NODE	63:14	63:14	4	tnh
LEAF_NODE	0:0	0:0	3	;
INIT	63:14	63:14	3	tnh = 274
ASSIGN	63:14	63:20	4	tnh = 274
LVAL	63:14	63:14	5	tnh
NAME	63:14	63:14	6	tnh
LEAF_NODE	63:14	63:14	7	tnh
ASSIGN_OP	63:18	63:18	5	=
LEAF_NODE	63:18	63:18	6	=
RVAL	63:20	63:20	5	274
FIELD	63:20	63:20	6	274
LEAF_NODE	63:20	63:20	7	274
LEAF_NODE	63:23	63:23	2	;
SIMPLE_DECL	64:7	64:33	1	Contrast contrast ; contrast = LINEAR ;
VAR_DECL	64:7	64:16	2	Contrast contrast ; contrast = LINEAR
TYPE	64:7	64:7	3	Contrast
TYPE_NAME	64:7	64:7	4	Contrast
LEAF_NODE	64:7	64:7	5	Contrast
NAME	64:16	64:16	3	contrast
LEAF_NODE	64:16	64:16	4	contrast
LEAF_NODE	0:0	0:0	3	;
INIT	64:16	64:16	3	contrast = LINEAR
ASSIGN	64:16	64:27	4	contrast = LINEAR
LVAL	64:16	64:16	5	contrast
NAME	64:16	64:16	6	contrast
LEAF_NODE	64:16	64:16	7	contrast
ASSIGN_OP	64:25	64:25	5	=
LEAF_NODE	64:25	64:25	6	=
RVAL	64:27	64:27	5	LINEAR
FIELD	64:27	64:27	6	LINEAR
LEAF_NODE	64:27	64:27	7	LINEAR
LEAF_NODE	64:33	64:33	2	;
SIMPLE_DECL	65:7	65:23	1	uint8 * thumbnail ;
VAR_DECL	65:7	65:14	2	uint8 * thumbnail
TYPE	65:7	65:12	3	uint8 *
TYPE_NAME	65:7	65:7	4	uint8
LEAF_NODE	65:7	65:7	5	uint8
POINTER	65:12	65:12	4	*
LEAF_NODE	65:12	65:12	5	*
NAME	65:14	65:14	3	thumbnail
LEAF_NODE	65:14	65:14	4	thumbnail
LEAF_NODE	65:23	65:23	2	;
SIMPLE_DECL	69:7	69:23	1	void initScale ; initScale initScale ( ) ;
VAR_DECL	69:7	69:12	2	void initScale ; initScale initScale ( )
TYPE	69:7	69:7	3	void
TYPE_NAME	69:7	69:7	4	void
LEAF_NODE	69:7	69:7	5	void
NAME	69:12	69:12	3	initScale
LEAF_NODE	69:12	69:12	4	initScale
LEAF_NODE	0:0	0:0	3	;
INIT	69:12	69:12	3	initScale initScale ( )
ASSIGN	69:12	69:21	4	initScale initScale ( )
LVAL	69:12	69:12	5	initScale
NAME	69:12	69:12	6	initScale
LEAF_NODE	69:12	69:12	7	initScale
ASSIGN_OP	69:12	69:12	5	initScale
NAME	69:12	69:12	6	initScale
LEAF_NODE	69:12	69:12	7	initScale
RVAL	69:21	69:22	5	( )
LEAF_NODE	69:21	69:21	6	(
LEAF_NODE	69:22	69:22	6	)
LEAF_NODE	69:23	69:23	2	;
SIMPLE_DECL	70:7	70:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	70:7	70:12	2	void usage ; usage usage ( void )
TYPE	70:7	70:7	3	void
TYPE_NAME	70:7	70:7	4	void
LEAF_NODE	70:7	70:7	5	void
NAME	70:12	70:12	3	usage
LEAF_NODE	70:12	70:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	70:12	70:12	3	usage usage ( void )
ASSIGN	70:12	70:17	4	usage usage ( void )
LVAL	70:12	70:12	5	usage
NAME	70:12	70:12	6	usage
LEAF_NODE	70:12	70:12	7	usage
ASSIGN_OP	70:12	70:12	5	usage
NAME	70:12	70:12	6	usage
LEAF_NODE	70:12	70:12	7	usage
RVAL	70:17	70:22	5	( void )
LEAF_NODE	70:17	70:17	6	(
EXPR	70:18	70:18	6	void
FIELD	70:18	70:18	7	void
LEAF_NODE	70:18	70:18	8	void
LEAF_NODE	70:22	70:22	6	)
LEAF_NODE	70:23	70:23	2	;
SIMPLE_DECL	73:7	73:19	1	char * optarg ;
VAR_DECL	73:7	73:13	2	char * optarg
TYPE	73:7	73:11	3	char *
TYPE_NAME	73:7	73:7	4	char
LEAF_NODE	73:7	73:7	5	char
POINTER	73:11	73:11	4	*
LEAF_NODE	73:11	73:11	5	*
NAME	73:13	73:13	3	optarg
LEAF_NODE	73:13	73:13	4	optarg
LEAF_NODE	73:19	73:19	2	;
SIMPLE_DECL	74:7	74:17	1	int optind ;
VAR_DECL	74:7	74:11	2	int optind
TYPE	74:7	74:7	3	int
TYPE_NAME	74:7	74:7	4	int
LEAF_NODE	74:7	74:7	5	int
NAME	74:11	74:11	3	optind
LEAF_NODE	74:11	74:11	4	optind
LEAF_NODE	74:17	74:17	2	;
FUNCTION_DEF	77:0	132:0	1	
RETURN_TYPE	77:0	77:0	2	int
TYPE_NAME	77:0	77:0	3	int
LEAF_NODE	77:0	77:0	4	int
FUNCTION_NAME	78:0	78:0	2	main
LEAF_NODE	78:0	78:0	3	main
PARAMETER_LIST	78:4	78:27	2	( int argc , char * [ ] argv )
LEAF_NODE	78:4	78:4	3	(
PARAMETER_DECL	78:5	78:9	3	int argc
TYPE	78:5	78:5	4	int
TYPE_NAME	78:5	78:5	5	int
LEAF_NODE	78:5	78:5	6	int
NAME	78:9	78:9	4	argc
LEAF_NODE	78:9	78:9	5	argc
LEAF_NODE	78:13	78:13	3	,
PARAMETER_DECL	78:15	78:21	3	char * [ ] argv
TYPE	78:15	78:25	4	char * [ ]
TYPE_NAME	78:15	78:15	5	char
LEAF_NODE	78:15	78:15	6	char
POINTER	78:19	78:19	5	*
LEAF_NODE	78:19	78:19	6	*
TYPE_SUFFIX	78:25	78:26	5	[ ]
LEAF_NODE	78:25	78:25	6	[
LEAF_NODE	78:26	78:26	6	]
NAME	78:21	78:21	4	argv
LEAF_NODE	78:21	78:21	5	argv
LEAF_NODE	78:27	78:27	3	)
LEAF_NODE	79:0	79:0	2	{
STATEMENTS	80:4	131:4	2	
SIMPLE_DECL	80:4	80:12	3	TIFF * in ;
VAR_DECL	80:4	80:10	4	TIFF * in
TYPE	80:4	80:8	5	TIFF *
TYPE_NAME	80:4	80:4	6	TIFF
LEAF_NODE	80:4	80:4	7	TIFF
POINTER	80:8	80:8	6	*
LEAF_NODE	80:8	80:8	7	*
NAME	80:10	80:10	5	in
LEAF_NODE	80:10	80:10	6	in
LEAF_NODE	80:12	80:12	4	;
SIMPLE_DECL	81:4	81:13	3	TIFF * out ;
VAR_DECL	81:4	81:10	4	TIFF * out
TYPE	81:4	81:8	5	TIFF *
TYPE_NAME	81:4	81:4	6	TIFF
LEAF_NODE	81:4	81:4	7	TIFF
POINTER	81:8	81:8	6	*
LEAF_NODE	81:8	81:8	7	*
NAME	81:10	81:10	5	out
LEAF_NODE	81:10	81:10	6	out
LEAF_NODE	81:13	81:13	4	;
SIMPLE_DECL	82:4	82:9	3	int c ;
VAR_DECL	82:4	82:8	4	int c
TYPE	82:4	82:4	5	int
TYPE_NAME	82:4	82:4	6	int
LEAF_NODE	82:4	82:4	7	int
NAME	82:8	82:8	5	c
LEAF_NODE	82:8	82:8	6	c
LEAF_NODE	82:9	82:9	4	;
ITERATION	84:4	84:53	3	
KEYWORD	84:4	84:4	4	while
LEAF_NODE	84:4	84:4	5	while
LEAF_NODE	84:10	84:10	4	(
CONDITION	84:11	84:11	4	( c = getopt ( argc , argv , "w:h:c:" ) ) != - 1
EXPR	84:11	84:49	5	( c = getopt ( argc , argv , "w:h:c:" ) ) != - 1
LEAF_NODE	84:11	84:11	6	(
ASSIGN	84:12	84:16	6	c = getopt ( argc , argv , "w:h:c:" )
LVAL	84:12	84:12	7	c
FIELD	84:12	84:12	8	c
LEAF_NODE	84:12	84:12	9	c
ASSIGN_OP	84:14	84:14	7	=
LEAF_NODE	84:14	84:14	8	=
RVAL	84:16	84:16	7	getopt ( argc , argv , "w:h:c:" )
FUNCTION_CALL	84:16	84:43	8	getopt ( argc , argv , "w:h:c:" )
CALLEE	84:16	84:16	9	getopt
LEAF_NODE	84:16	84:16	10	getopt
LEAF_NODE	84:22	84:22	9	(
ARGUMENT	84:23	84:23	9	argc
FIELD	84:23	84:23	10	argc
LEAF_NODE	84:23	84:23	11	argc
LEAF_NODE	84:27	84:27	9	,
ARGUMENT	84:29	84:29	9	argv
FIELD	84:29	84:29	10	argv
LEAF_NODE	84:29	84:29	11	argv
LEAF_NODE	84:33	84:33	9	,
ARGUMENT	84:35	84:35	9	"w:h:c:"
FIELD	84:35	84:35	10	"w:h:c:"
LEAF_NODE	84:35	84:35	11	"w:h:c:"
LEAF_NODE	84:43	84:43	9	)
LEAF_NODE	84:44	84:44	6	)
EQ_OPERATOR	84:46	84:46	6	!=
LEAF_NODE	84:46	84:46	7	!=
UNARY_EXPR	84:49	84:50	6	- 1
UNARY_OPERATOR	84:49	84:49	7	-
LEAF_NODE	84:49	84:49	8	-
FIELD	84:50	84:50	7	1
LEAF_NODE	84:50	84:50	8	1
LEAF_NODE	84:51	84:51	4	)
STATEMENTS	84:53	99:4	4	
LEAF_NODE	84:53	84:53	5	{
STATEMENTS	85:1	85:1	5	
SELECTION	85:1	85:12	6	
KEYWORD	85:1	85:1	7	switch
LEAF_NODE	85:1	85:1	8	switch
LEAF_NODE	85:8	85:8	7	(
CONDITION	85:9	85:9	7	c
EXPR	85:9	85:9	8	c
FIELD	85:9	85:9	9	c
LEAF_NODE	85:9	85:9	10	c
LEAF_NODE	85:10	85:10	7	)
STATEMENTS	85:12	98:1	7	
LEAF_NODE	85:12	85:12	8	{
STATEMENTS	86:1	97:10	8	
LEAF_NODE	86:1	86:1	9	case
LEAF_NODE	86:6	86:6	9	'w'
LEAF_NODE	86:9	86:9	9	:
EXPR_STATEMENT	86:11	86:41	9	tnw = strtoul ( optarg , NULL , 0 ) ;
EXPR	86:11	86:11	10	tnw = strtoul ( optarg , NULL , 0 )
ASSIGN	86:11	86:17	11	tnw = strtoul ( optarg , NULL , 0 )
LVAL	86:11	86:11	12	tnw
FIELD	86:11	86:11	13	tnw
LEAF_NODE	86:11	86:11	14	tnw
ASSIGN_OP	86:15	86:15	12	=
LEAF_NODE	86:15	86:15	13	=
RVAL	86:17	86:17	12	strtoul ( optarg , NULL , 0 )
FUNCTION_CALL	86:17	86:40	13	strtoul ( optarg , NULL , 0 )
CALLEE	86:17	86:17	14	strtoul
LEAF_NODE	86:17	86:17	15	strtoul
LEAF_NODE	86:24	86:24	14	(
ARGUMENT	86:25	86:25	14	optarg
FIELD	86:25	86:25	15	optarg
LEAF_NODE	86:25	86:25	16	optarg
LEAF_NODE	86:31	86:31	14	,
ARGUMENT	86:33	86:33	14	NULL
FIELD	86:33	86:33	15	NULL
LEAF_NODE	86:33	86:33	16	NULL
LEAF_NODE	86:37	86:37	14	,
ARGUMENT	86:39	86:39	14	0
FIELD	86:39	86:39	15	0
LEAF_NODE	86:39	86:39	16	0
LEAF_NODE	86:40	86:40	14	)
LEAF_NODE	86:41	86:41	10	;
JUMP_STATEMENT	86:43	86:48	9	break DESTINATION ;
KEYWORD	86:43	86:43	10	break
LEAF_NODE	86:43	86:43	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	86:48	86:48	10	;
LEAF_NODE	87:1	87:1	9	case
LEAF_NODE	87:6	87:6	9	'h'
LEAF_NODE	87:9	87:9	9	:
EXPR_STATEMENT	87:11	87:41	9	tnh = strtoul ( optarg , NULL , 0 ) ;
EXPR	87:11	87:11	10	tnh = strtoul ( optarg , NULL , 0 )
ASSIGN	87:11	87:17	11	tnh = strtoul ( optarg , NULL , 0 )
LVAL	87:11	87:11	12	tnh
FIELD	87:11	87:11	13	tnh
LEAF_NODE	87:11	87:11	14	tnh
ASSIGN_OP	87:15	87:15	12	=
LEAF_NODE	87:15	87:15	13	=
RVAL	87:17	87:17	12	strtoul ( optarg , NULL , 0 )
FUNCTION_CALL	87:17	87:40	13	strtoul ( optarg , NULL , 0 )
CALLEE	87:17	87:17	14	strtoul
LEAF_NODE	87:17	87:17	15	strtoul
LEAF_NODE	87:24	87:24	14	(
ARGUMENT	87:25	87:25	14	optarg
FIELD	87:25	87:25	15	optarg
LEAF_NODE	87:25	87:25	16	optarg
LEAF_NODE	87:31	87:31	14	,
ARGUMENT	87:33	87:33	14	NULL
FIELD	87:33	87:33	15	NULL
LEAF_NODE	87:33	87:33	16	NULL
LEAF_NODE	87:37	87:37	14	,
ARGUMENT	87:39	87:39	14	0
FIELD	87:39	87:39	15	0
LEAF_NODE	87:39	87:39	16	0
LEAF_NODE	87:40	87:40	14	)
LEAF_NODE	87:41	87:41	10	;
JUMP_STATEMENT	87:43	87:48	9	break DESTINATION ;
KEYWORD	87:43	87:43	10	break
LEAF_NODE	87:43	87:43	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	87:48	87:48	10	;
LEAF_NODE	88:1	88:1	9	case
LEAF_NODE	88:6	88:6	9	'c'
LEAF_NODE	88:9	88:9	9	:
EXPR_STATEMENT	88:11	95:14	9	contrast = streq ( optarg , "exp50" ) ? EXP50 : streq ( optarg , "exp60" ) ? EXP60 : streq ( optarg , "exp70" ) ? EXP70 : streq ( optarg , "exp80" ) ? EXP80 : streq ( optarg , "exp90" ) ? EXP90 : streq ( optarg , "exp" ) ? EXP : streq ( optarg , "linear" ) ? LINEAR : EXP ;
EXPR	88:11	88:11	10	contrast = streq ( optarg , "exp50" ) ? EXP50 : streq ( optarg , "exp60" ) ? EXP60 : streq ( optarg , "exp70" ) ? EXP70 : streq ( optarg , "exp80" ) ? EXP80 : streq ( optarg , "exp90" ) ? EXP90 : streq ( optarg , "exp" ) ? EXP : streq ( optarg , "linear" ) ? LINEAR : EXP
ASSIGN	88:11	88:22	11	contrast = streq ( optarg , "exp50" ) ? EXP50 : streq ( optarg , "exp60" ) ? EXP60 : streq ( optarg , "exp70" ) ? EXP70 : streq ( optarg , "exp80" ) ? EXP80 : streq ( optarg , "exp90" ) ? EXP90 : streq ( optarg , "exp" ) ? EXP : streq ( optarg , "linear" ) ? LINEAR : EXP
LVAL	88:11	88:11	12	contrast
FIELD	88:11	88:11	13	contrast
LEAF_NODE	88:11	88:11	14	contrast
ASSIGN_OP	88:20	88:20	12	=
LEAF_NODE	88:20	88:20	13	=
RVAL	88:22	88:22	12	streq ( optarg , "exp50" ) ? EXP50 : streq ( optarg , "exp60" ) ? EXP60 : streq ( optarg , "exp70" ) ? EXP70 : streq ( optarg , "exp80" ) ? EXP80 : streq ( optarg , "exp90" ) ? EXP90 : streq ( optarg , "exp" ) ? EXP : streq ( optarg , "linear" ) ? LINEAR : EXP
COND_EXPR	88:22	89:7	13	streq ( optarg , "exp50" ) ? EXP50 : streq ( optarg , "exp60" ) ? EXP60 : streq ( optarg , "exp70" ) ? EXP70 : streq ( optarg , "exp80" ) ? EXP80 : streq ( optarg , "exp90" ) ? EXP90 : streq ( optarg , "exp" ) ? EXP : streq ( optarg , "linear" ) ? LINEAR : EXP
CONDITION	88:22	88:22	14	streq ( optarg , "exp50" )
FUNCTION_CALL	88:22	88:43	15	streq ( optarg , "exp50" )
CALLEE	88:22	88:22	16	streq
LEAF_NODE	88:22	88:22	17	streq
LEAF_NODE	88:27	88:27	16	(
ARGUMENT	88:28	88:28	16	optarg
FIELD	88:28	88:28	17	optarg
LEAF_NODE	88:28	88:28	18	optarg
LEAF_NODE	88:34	88:34	16	,
ARGUMENT	88:36	88:36	16	"exp50"
FIELD	88:36	88:36	17	"exp50"
LEAF_NODE	88:36	88:36	18	"exp50"
LEAF_NODE	88:43	88:43	16	)
LEAF_NODE	88:45	88:45	14	?
EXPR	88:47	88:47	14	EXP50
FIELD	88:47	88:47	15	EXP50
LEAF_NODE	88:47	88:47	16	EXP50
LEAF_NODE	88:53	88:53	14	:
COND_EXPR	89:7	90:7	14	streq ( optarg , "exp60" ) ? EXP60 : streq ( optarg , "exp70" ) ? EXP70 : streq ( optarg , "exp80" ) ? EXP80 : streq ( optarg , "exp90" ) ? EXP90 : streq ( optarg , "exp" ) ? EXP : streq ( optarg , "linear" ) ? LINEAR : EXP
CONDITION	89:7	89:7	15	streq ( optarg , "exp60" )
FUNCTION_CALL	89:7	89:28	16	streq ( optarg , "exp60" )
CALLEE	89:7	89:7	17	streq
LEAF_NODE	89:7	89:7	18	streq
LEAF_NODE	89:12	89:12	17	(
ARGUMENT	89:13	89:13	17	optarg
FIELD	89:13	89:13	18	optarg
LEAF_NODE	89:13	89:13	19	optarg
LEAF_NODE	89:19	89:19	17	,
ARGUMENT	89:21	89:21	17	"exp60"
FIELD	89:21	89:21	18	"exp60"
LEAF_NODE	89:21	89:21	19	"exp60"
LEAF_NODE	89:28	89:28	17	)
LEAF_NODE	89:30	89:30	15	?
EXPR	89:32	89:32	15	EXP60
FIELD	89:32	89:32	16	EXP60
LEAF_NODE	89:32	89:32	17	EXP60
LEAF_NODE	89:38	89:38	15	:
COND_EXPR	90:7	91:7	15	streq ( optarg , "exp70" ) ? EXP70 : streq ( optarg , "exp80" ) ? EXP80 : streq ( optarg , "exp90" ) ? EXP90 : streq ( optarg , "exp" ) ? EXP : streq ( optarg , "linear" ) ? LINEAR : EXP
CONDITION	90:7	90:7	16	streq ( optarg , "exp70" )
FUNCTION_CALL	90:7	90:28	17	streq ( optarg , "exp70" )
CALLEE	90:7	90:7	18	streq
LEAF_NODE	90:7	90:7	19	streq
LEAF_NODE	90:12	90:12	18	(
ARGUMENT	90:13	90:13	18	optarg
FIELD	90:13	90:13	19	optarg
LEAF_NODE	90:13	90:13	20	optarg
LEAF_NODE	90:19	90:19	18	,
ARGUMENT	90:21	90:21	18	"exp70"
FIELD	90:21	90:21	19	"exp70"
LEAF_NODE	90:21	90:21	20	"exp70"
LEAF_NODE	90:28	90:28	18	)
LEAF_NODE	90:30	90:30	16	?
EXPR	90:32	90:32	16	EXP70
FIELD	90:32	90:32	17	EXP70
LEAF_NODE	90:32	90:32	18	EXP70
LEAF_NODE	90:38	90:38	16	:
COND_EXPR	91:7	92:7	16	streq ( optarg , "exp80" ) ? EXP80 : streq ( optarg , "exp90" ) ? EXP90 : streq ( optarg , "exp" ) ? EXP : streq ( optarg , "linear" ) ? LINEAR : EXP
CONDITION	91:7	91:7	17	streq ( optarg , "exp80" )
FUNCTION_CALL	91:7	91:28	18	streq ( optarg , "exp80" )
CALLEE	91:7	91:7	19	streq
LEAF_NODE	91:7	91:7	20	streq
LEAF_NODE	91:12	91:12	19	(
ARGUMENT	91:13	91:13	19	optarg
FIELD	91:13	91:13	20	optarg
LEAF_NODE	91:13	91:13	21	optarg
LEAF_NODE	91:19	91:19	19	,
ARGUMENT	91:21	91:21	19	"exp80"
FIELD	91:21	91:21	20	"exp80"
LEAF_NODE	91:21	91:21	21	"exp80"
LEAF_NODE	91:28	91:28	19	)
LEAF_NODE	91:30	91:30	17	?
EXPR	91:32	91:32	17	EXP80
FIELD	91:32	91:32	18	EXP80
LEAF_NODE	91:32	91:32	19	EXP80
LEAF_NODE	91:38	91:38	17	:
COND_EXPR	92:7	93:7	17	streq ( optarg , "exp90" ) ? EXP90 : streq ( optarg , "exp" ) ? EXP : streq ( optarg , "linear" ) ? LINEAR : EXP
CONDITION	92:7	92:7	18	streq ( optarg , "exp90" )
FUNCTION_CALL	92:7	92:28	19	streq ( optarg , "exp90" )
CALLEE	92:7	92:7	20	streq
LEAF_NODE	92:7	92:7	21	streq
LEAF_NODE	92:12	92:12	20	(
ARGUMENT	92:13	92:13	20	optarg
FIELD	92:13	92:13	21	optarg
LEAF_NODE	92:13	92:13	22	optarg
LEAF_NODE	92:19	92:19	20	,
ARGUMENT	92:21	92:21	20	"exp90"
FIELD	92:21	92:21	21	"exp90"
LEAF_NODE	92:21	92:21	22	"exp90"
LEAF_NODE	92:28	92:28	20	)
LEAF_NODE	92:30	92:30	18	?
EXPR	92:32	92:32	18	EXP90
FIELD	92:32	92:32	19	EXP90
LEAF_NODE	92:32	92:32	20	EXP90
LEAF_NODE	92:38	92:38	18	:
COND_EXPR	93:7	94:7	18	streq ( optarg , "exp" ) ? EXP : streq ( optarg , "linear" ) ? LINEAR : EXP
CONDITION	93:7	93:7	19	streq ( optarg , "exp" )
FUNCTION_CALL	93:7	93:26	20	streq ( optarg , "exp" )
CALLEE	93:7	93:7	21	streq
LEAF_NODE	93:7	93:7	22	streq
LEAF_NODE	93:12	93:12	21	(
ARGUMENT	93:13	93:13	21	optarg
FIELD	93:13	93:13	22	optarg
LEAF_NODE	93:13	93:13	23	optarg
LEAF_NODE	93:19	93:19	21	,
ARGUMENT	93:21	93:21	21	"exp"
FIELD	93:21	93:21	22	"exp"
LEAF_NODE	93:21	93:21	23	"exp"
LEAF_NODE	93:26	93:26	21	)
LEAF_NODE	93:30	93:30	19	?
EXPR	93:32	93:32	19	EXP
FIELD	93:32	93:32	20	EXP
LEAF_NODE	93:32	93:32	21	EXP
LEAF_NODE	93:36	93:36	19	:
COND_EXPR	94:7	95:11	19	streq ( optarg , "linear" ) ? LINEAR : EXP
CONDITION	94:7	94:7	20	streq ( optarg , "linear" )
FUNCTION_CALL	94:7	94:29	21	streq ( optarg , "linear" )
CALLEE	94:7	94:7	22	streq
LEAF_NODE	94:7	94:7	23	streq
LEAF_NODE	94:12	94:12	22	(
ARGUMENT	94:13	94:13	22	optarg
FIELD	94:13	94:13	23	optarg
LEAF_NODE	94:13	94:13	24	optarg
LEAF_NODE	94:19	94:19	22	,
ARGUMENT	94:21	94:21	22	"linear"
FIELD	94:21	94:21	23	"linear"
LEAF_NODE	94:21	94:21	24	"linear"
LEAF_NODE	94:29	94:29	22	)
LEAF_NODE	94:30	94:30	20	?
EXPR	94:32	94:32	20	LINEAR
FIELD	94:32	94:32	21	LINEAR
LEAF_NODE	94:32	94:32	22	LINEAR
LEAF_NODE	94:39	94:39	20	:
FIELD	95:11	95:11	20	EXP
LEAF_NODE	95:11	95:11	21	EXP
LEAF_NODE	95:14	95:14	10	;
JUMP_STATEMENT	96:3	96:8	9	break DESTINATION ;
KEYWORD	96:3	96:3	10	break
LEAF_NODE	96:3	96:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	96:8	96:8	10	;
LABEL	97:1	97:8	9	default :
LEAF_NODE	97:1	97:1	10	default
LEAF_NODE	97:8	97:8	10	:
EXPR_STATEMENT	97:10	97:17	9	usage ( ) ;
EXPR	97:10	97:10	10	usage ( )
FUNCTION_CALL	97:10	97:16	11	usage ( )
CALLEE	97:10	97:10	12	usage
LEAF_NODE	97:10	97:10	13	usage
LEAF_NODE	97:15	97:15	12	(
LEAF_NODE	97:16	97:16	12	)
LEAF_NODE	97:17	97:17	10	;
LEAF_NODE	98:1	98:1	8	}
LEAF_NODE	99:4	99:4	5	}
SELECTION	100:4	101:1	3	
KEYWORD	100:4	100:4	4	if
LEAF_NODE	100:4	100:4	5	if
LEAF_NODE	100:7	100:7	4	(
CONDITION	100:8	100:8	4	argc - optind != 2
EXPR	100:8	100:23	5	argc - optind != 2
FIELD	100:8	100:8	6	argc
LEAF_NODE	100:8	100:8	7	argc
LEAF_NODE	100:12	100:12	6	-
FIELD	100:13	100:13	6	optind
LEAF_NODE	100:13	100:13	7	optind
EQ_OPERATOR	100:20	100:20	6	!=
LEAF_NODE	100:20	100:20	7	!=
FIELD	100:23	100:23	6	2
LEAF_NODE	100:23	100:23	7	2
LEAF_NODE	100:24	100:24	4	)
STATEMENTS	101:1	101:1	4	
EXPR_STATEMENT	101:1	101:8	5	usage ( ) ;
EXPR	101:1	101:1	6	usage ( )
FUNCTION_CALL	101:1	101:7	7	usage ( )
CALLEE	101:1	101:1	8	usage
LEAF_NODE	101:1	101:1	9	usage
LEAF_NODE	101:6	101:6	8	(
LEAF_NODE	101:7	101:7	8	)
LEAF_NODE	101:8	101:8	6	;
EXPR_STATEMENT	103:4	103:39	3	out = TIFFOpen ( argv [ optind + 1 ] , "w" ) ;
EXPR	103:4	103:4	4	out = TIFFOpen ( argv [ optind + 1 ] , "w" )
ASSIGN	103:4	103:10	5	out = TIFFOpen ( argv [ optind + 1 ] , "w" )
LVAL	103:4	103:4	6	out
FIELD	103:4	103:4	7	out
LEAF_NODE	103:4	103:4	8	out
ASSIGN_OP	103:8	103:8	6	=
LEAF_NODE	103:8	103:8	7	=
RVAL	103:10	103:10	6	TIFFOpen ( argv [ optind + 1 ] , "w" )
FUNCTION_CALL	103:10	103:38	7	TIFFOpen ( argv [ optind + 1 ] , "w" )
CALLEE	103:10	103:10	8	TIFFOpen
LEAF_NODE	103:10	103:10	9	TIFFOpen
LEAF_NODE	103:18	103:18	8	(
ARGUMENT	103:19	103:19	8	argv [ optind + 1 ]
FIELD	103:19	103:32	9	argv [ optind + 1 ]
LEAF_NODE	103:19	103:19	10	argv
LEAF_NODE	103:23	103:23	10	[
EXPR	103:24	103:31	10	optind + 1
FIELD	103:24	103:24	11	optind
LEAF_NODE	103:24	103:24	12	optind
LEAF_NODE	103:30	103:30	11	+
FIELD	103:31	103:31	11	1
LEAF_NODE	103:31	103:31	12	1
LEAF_NODE	103:32	103:32	10	]
LEAF_NODE	103:33	103:33	8	,
ARGUMENT	103:35	103:35	8	"w"
FIELD	103:35	103:35	9	"w"
LEAF_NODE	103:35	103:35	10	"w"
LEAF_NODE	103:38	103:38	8	)
LEAF_NODE	103:39	103:39	4	;
SELECTION	104:4	105:1	3	
KEYWORD	104:4	104:4	4	if
LEAF_NODE	104:4	104:4	5	if
LEAF_NODE	104:7	104:7	4	(
CONDITION	104:8	104:8	4	out == NULL
EXPR	104:8	104:15	5	out == NULL
FIELD	104:8	104:8	6	out
LEAF_NODE	104:8	104:8	7	out
EQ_OPERATOR	104:12	104:12	6	==
LEAF_NODE	104:12	104:12	7	==
FIELD	104:15	104:15	6	NULL
LEAF_NODE	104:15	104:15	7	NULL
LEAF_NODE	104:19	104:19	4	)
STATEMENTS	105:1	105:1	4	
JUMP_STATEMENT	105:1	105:9	5	return 2 ;
KEYWORD	105:1	105:1	6	return
LEAF_NODE	105:1	105:1	7	return
DESTINATION	105:8	105:8	6	2
EXPR	105:8	105:8	7	2
FIELD	105:8	105:8	8	2
LEAF_NODE	105:8	105:8	9	2
LEAF_NODE	105:9	105:9	6	;
EXPR_STATEMENT	106:4	106:36	3	in = TIFFOpen ( argv [ optind ] , "r" ) ;
EXPR	106:4	106:4	4	in = TIFFOpen ( argv [ optind ] , "r" )
ASSIGN	106:4	106:9	5	in = TIFFOpen ( argv [ optind ] , "r" )
LVAL	106:4	106:4	6	in
FIELD	106:4	106:4	7	in
LEAF_NODE	106:4	106:4	8	in
ASSIGN_OP	106:7	106:7	6	=
LEAF_NODE	106:7	106:7	7	=
RVAL	106:9	106:9	6	TIFFOpen ( argv [ optind ] , "r" )
FUNCTION_CALL	106:9	106:35	7	TIFFOpen ( argv [ optind ] , "r" )
CALLEE	106:9	106:9	8	TIFFOpen
LEAF_NODE	106:9	106:9	9	TIFFOpen
LEAF_NODE	106:17	106:17	8	(
ARGUMENT	106:18	106:18	8	argv [ optind ]
FIELD	106:18	106:29	9	argv [ optind ]
LEAF_NODE	106:18	106:18	10	argv
LEAF_NODE	106:22	106:22	10	[
EXPR	106:23	106:23	10	optind
FIELD	106:23	106:23	11	optind
LEAF_NODE	106:23	106:23	12	optind
LEAF_NODE	106:29	106:29	10	]
LEAF_NODE	106:30	106:30	8	,
ARGUMENT	106:32	106:32	8	"r"
FIELD	106:32	106:32	9	"r"
LEAF_NODE	106:32	106:32	10	"r"
LEAF_NODE	106:35	106:35	8	)
LEAF_NODE	106:36	106:36	4	;
SELECTION	107:4	108:8	3	
KEYWORD	107:4	107:4	4	if
LEAF_NODE	107:4	107:4	5	if
LEAF_NODE	107:6	107:6	4	(
CONDITION	107:8	107:8	4	in == NULL
EXPR	107:8	107:14	5	in == NULL
FIELD	107:8	107:8	6	in
LEAF_NODE	107:8	107:8	7	in
EQ_OPERATOR	107:11	107:11	6	==
LEAF_NODE	107:11	107:11	7	==
FIELD	107:14	107:14	6	NULL
LEAF_NODE	107:14	107:14	7	NULL
LEAF_NODE	107:19	107:19	4	)
STATEMENTS	108:8	108:8	4	
JUMP_STATEMENT	108:8	108:16	5	return 2 ;
KEYWORD	108:8	108:8	6	return
LEAF_NODE	108:8	108:8	7	return
DESTINATION	108:15	108:15	6	2
EXPR	108:15	108:15	7	2
FIELD	108:15	108:15	8	2
LEAF_NODE	108:15	108:15	9	2
LEAF_NODE	108:16	108:16	6	;
EXPR_STATEMENT	110:4	110:47	3	thumbnail = ( uint8 * ) _TIFFmalloc ( tnw * tnh ) ;
EXPR	110:4	110:4	4	thumbnail = ( uint8 * ) _TIFFmalloc ( tnw * tnh )
ASSIGN	110:4	110:16	5	thumbnail = ( uint8 * ) _TIFFmalloc ( tnw * tnh )
LVAL	110:4	110:4	6	thumbnail
FIELD	110:4	110:4	7	thumbnail
LEAF_NODE	110:4	110:4	8	thumbnail
ASSIGN_OP	110:14	110:14	6	=
LEAF_NODE	110:14	110:14	7	=
RVAL	110:16	110:25	6	( uint8 * ) _TIFFmalloc ( tnw * tnh )
LEAF_NODE	110:16	110:16	7	(
TYPE_NAME	110:17	110:17	7	uint8
LEAF_NODE	110:17	110:17	8	uint8
LEAF_NODE	110:22	110:22	7	*
LEAF_NODE	110:23	110:23	7	)
FUNCTION_CALL	110:25	110:46	7	_TIFFmalloc ( tnw * tnh )
CALLEE	110:25	110:25	8	_TIFFmalloc
LEAF_NODE	110:25	110:25	9	_TIFFmalloc
LEAF_NODE	110:36	110:36	8	(
ARGUMENT	110:37	110:43	8	tnw * tnh
FIELD	110:37	110:37	9	tnw
LEAF_NODE	110:37	110:37	10	tnw
LEAF_NODE	110:41	110:41	9	*
FIELD	110:43	110:43	9	tnh
LEAF_NODE	110:43	110:43	10	tnh
LEAF_NODE	110:46	110:46	8	)
LEAF_NODE	110:47	110:47	4	;
SELECTION	111:4	111:20	3	
KEYWORD	111:4	111:4	4	if
LEAF_NODE	111:4	111:4	5	if
LEAF_NODE	111:7	111:7	4	(
CONDITION	111:8	111:8	4	! thumbnail
EXPR	111:8	111:8	5	! thumbnail
UNARY_EXPR	111:8	111:9	6	! thumbnail
UNARY_OPERATOR	111:8	111:8	7	!
LEAF_NODE	111:8	111:8	8	!
FIELD	111:9	111:9	7	thumbnail
LEAF_NODE	111:9	111:9	8	thumbnail
LEAF_NODE	111:18	111:18	4	)
STATEMENTS	111:20	115:4	4	
LEAF_NODE	111:20	111:20	5	{
STATEMENTS	112:5	114:5	5	
EXPR_STATEMENT	112:5	113:53	6	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for thumbnail buffer." ) ;
EXPR	112:5	112:5	7	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for thumbnail buffer." )
FUNCTION_CALL	112:5	113:52	8	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for thumbnail buffer." )
CALLEE	112:5	112:5	9	TIFFError
LEAF_NODE	112:5	112:5	10	TIFFError
LEAF_NODE	112:14	112:14	9	(
ARGUMENT	112:15	112:15	9	TIFFFileName ( in )
FUNCTION_CALL	112:15	112:30	10	TIFFFileName ( in )
CALLEE	112:15	112:15	11	TIFFFileName
LEAF_NODE	112:15	112:15	12	TIFFFileName
LEAF_NODE	112:27	112:27	11	(
ARGUMENT	112:28	112:28	11	in
FIELD	112:28	112:28	12	in
LEAF_NODE	112:28	112:28	13	in
LEAF_NODE	112:30	112:30	11	)
LEAF_NODE	112:31	112:31	9	,
ARGUMENT	113:8	113:8	9	"Can't allocate space for thumbnail buffer."
FIELD	113:8	113:8	10	"Can't allocate space for thumbnail buffer."
LEAF_NODE	113:8	113:8	11	"Can't allocate space for thumbnail buffer."
LEAF_NODE	113:52	113:52	9	)
LEAF_NODE	113:53	113:53	7	;
JUMP_STATEMENT	114:5	114:13	6	return 1 ;
KEYWORD	114:5	114:5	7	return
LEAF_NODE	114:5	114:5	8	return
DESTINATION	114:12	114:12	7	1
EXPR	114:12	114:12	8	1
FIELD	114:12	114:12	9	1
LEAF_NODE	114:12	114:12	10	1
LEAF_NODE	114:13	114:13	7	;
LEAF_NODE	115:4	115:4	5	}
SELECTION	117:4	117:20	3	
KEYWORD	117:4	117:4	4	if
LEAF_NODE	117:4	117:4	5	if
LEAF_NODE	117:7	117:7	4	(
CONDITION	117:8	117:8	4	in != NULL
EXPR	117:8	117:14	5	in != NULL
FIELD	117:8	117:8	6	in
LEAF_NODE	117:8	117:8	7	in
EQ_OPERATOR	117:11	117:11	6	!=
LEAF_NODE	117:11	117:11	7	!=
FIELD	117:14	117:14	6	NULL
LEAF_NODE	117:14	117:14	7	NULL
LEAF_NODE	117:18	117:18	4	)
STATEMENTS	117:20	126:4	4	
LEAF_NODE	117:20	117:20	5	{
STATEMENTS	118:1	125:1	5	
EXPR_STATEMENT	118:1	118:12	6	initScale ( ) ;
EXPR	118:1	118:1	7	initScale ( )
FUNCTION_CALL	118:1	118:11	8	initScale ( )
CALLEE	118:1	118:1	9	initScale
LEAF_NODE	118:1	118:1	10	initScale
LEAF_NODE	118:10	118:10	9	(
LEAF_NODE	118:11	118:11	9	)
LEAF_NODE	118:12	118:12	7	;
ITERATION	119:1	119:4	6	
KEYWORD	119:1	119:1	7	do
LEAF_NODE	119:1	119:1	8	do
LEAF_NODE	124:9	124:9	7	(
CONDITION	124:10	124:10	7	TIFFReadDirectory ( in )
EXPR	124:10	124:10	8	TIFFReadDirectory ( in )
FUNCTION_CALL	124:10	124:30	9	TIFFReadDirectory ( in )
CALLEE	124:10	124:10	10	TIFFReadDirectory
LEAF_NODE	124:10	124:10	11	TIFFReadDirectory
LEAF_NODE	124:27	124:27	10	(
ARGUMENT	124:28	124:28	10	in
FIELD	124:28	124:28	11	in
LEAF_NODE	124:28	124:28	12	in
LEAF_NODE	124:30	124:30	10	)
LEAF_NODE	124:31	124:31	7	)
STATEMENTS	119:4	124:1	7	
LEAF_NODE	119:4	119:4	8	{
STATEMENTS	120:5	122:5	8	
SELECTION	120:5	121:2	9	
KEYWORD	120:5	120:5	10	if
LEAF_NODE	120:5	120:5	11	if
LEAF_NODE	120:8	120:8	10	(
CONDITION	120:9	120:9	10	! generateThumbnail ( in , out )
EXPR	120:9	120:9	11	! generateThumbnail ( in , out )
UNARY_EXPR	120:9	120:10	12	! generateThumbnail ( in , out )
UNARY_OPERATOR	120:9	120:9	13	!
LEAF_NODE	120:9	120:9	14	!
FUNCTION_CALL	120:10	120:35	13	generateThumbnail ( in , out )
CALLEE	120:10	120:10	14	generateThumbnail
LEAF_NODE	120:10	120:10	15	generateThumbnail
LEAF_NODE	120:27	120:27	14	(
ARGUMENT	120:28	120:28	14	in
FIELD	120:28	120:28	15	in
LEAF_NODE	120:28	120:28	16	in
LEAF_NODE	120:30	120:30	14	,
ARGUMENT	120:32	120:32	14	out
FIELD	120:32	120:32	15	out
LEAF_NODE	120:32	120:32	16	out
LEAF_NODE	120:35	120:35	14	)
LEAF_NODE	120:36	120:36	10	)
STATEMENTS	121:2	121:2	10	
JUMP_STATEMENT	121:2	121:10	11	goto bad ;
KEYWORD	121:2	121:2	12	goto
LEAF_NODE	121:2	121:2	13	goto
DESTINATION	121:7	121:7	12	bad
LEAF_NODE	121:7	121:7	13	bad
LEAF_NODE	121:10	121:10	12	;
SELECTION	122:5	123:2	9	
KEYWORD	122:5	122:5	10	if
LEAF_NODE	122:5	122:5	11	if
LEAF_NODE	122:8	122:8	10	(
CONDITION	122:9	122:9	10	! cpIFD ( in , out ) || ! TIFFWriteDirectory ( out )
EXPR	122:9	122:9	11	! cpIFD ( in , out ) || ! TIFFWriteDirectory ( out )
OR	122:9	122:28	12	! cpIFD ( in , out ) || ! TIFFWriteDirectory ( out )
EXPR	122:9	122:9	13	! cpIFD ( in , out )
UNARY_EXPR	122:9	122:10	14	! cpIFD ( in , out )
UNARY_OPERATOR	122:9	122:9	15	!
LEAF_NODE	122:9	122:9	16	!
FUNCTION_CALL	122:10	122:23	15	cpIFD ( in , out )
CALLEE	122:10	122:10	16	cpIFD
LEAF_NODE	122:10	122:10	17	cpIFD
LEAF_NODE	122:15	122:15	16	(
ARGUMENT	122:16	122:16	16	in
FIELD	122:16	122:16	17	in
LEAF_NODE	122:16	122:16	18	in
LEAF_NODE	122:18	122:18	16	,
ARGUMENT	122:20	122:20	16	out
FIELD	122:20	122:20	17	out
LEAF_NODE	122:20	122:20	18	out
LEAF_NODE	122:23	122:23	16	)
LEAF_NODE	122:25	122:25	13	||
EXPR	122:28	122:28	13	! TIFFWriteDirectory ( out )
UNARY_EXPR	122:28	122:29	14	! TIFFWriteDirectory ( out )
UNARY_OPERATOR	122:28	122:28	15	!
LEAF_NODE	122:28	122:28	16	!
FUNCTION_CALL	122:29	122:51	15	TIFFWriteDirectory ( out )
CALLEE	122:29	122:29	16	TIFFWriteDirectory
LEAF_NODE	122:29	122:29	17	TIFFWriteDirectory
LEAF_NODE	122:47	122:47	16	(
ARGUMENT	122:48	122:48	16	out
FIELD	122:48	122:48	17	out
LEAF_NODE	122:48	122:48	18	out
LEAF_NODE	122:51	122:51	16	)
LEAF_NODE	122:52	122:52	10	)
STATEMENTS	123:2	123:2	10	
JUMP_STATEMENT	123:2	123:10	11	goto bad ;
KEYWORD	123:2	123:2	12	goto
LEAF_NODE	123:2	123:2	13	goto
DESTINATION	123:7	123:7	12	bad
LEAF_NODE	123:7	123:7	13	bad
LEAF_NODE	123:10	123:10	12	;
LEAF_NODE	124:1	124:1	8	}
LEAF_NODE	124:32	124:32	6	;
EXPR_STATEMENT	125:1	125:21	6	( void ) TIFFClose ( in ) ;
EXPR	125:1	125:8	7	( void ) TIFFClose ( in )
LEAF_NODE	125:1	125:1	8	(
TYPE_NAME	125:2	125:2	8	void
LEAF_NODE	125:2	125:2	9	void
LEAF_NODE	125:6	125:6	8	)
FUNCTION_CALL	125:8	125:20	8	TIFFClose ( in )
CALLEE	125:8	125:8	9	TIFFClose
LEAF_NODE	125:8	125:8	10	TIFFClose
LEAF_NODE	125:17	125:17	9	(
ARGUMENT	125:18	125:18	9	in
FIELD	125:18	125:18	10	in
LEAF_NODE	125:18	125:18	11	in
LEAF_NODE	125:20	125:20	9	)
LEAF_NODE	125:21	125:21	7	;
LEAF_NODE	126:4	126:4	5	}
EXPR_STATEMENT	127:4	127:25	3	( void ) TIFFClose ( out ) ;
EXPR	127:4	127:11	4	( void ) TIFFClose ( out )
LEAF_NODE	127:4	127:4	5	(
TYPE_NAME	127:5	127:5	5	void
LEAF_NODE	127:5	127:5	6	void
LEAF_NODE	127:9	127:9	5	)
FUNCTION_CALL	127:11	127:24	5	TIFFClose ( out )
CALLEE	127:11	127:11	6	TIFFClose
LEAF_NODE	127:11	127:11	7	TIFFClose
LEAF_NODE	127:20	127:20	6	(
ARGUMENT	127:21	127:21	6	out
FIELD	127:21	127:21	7	out
LEAF_NODE	127:21	127:21	8	out
LEAF_NODE	127:24	127:24	6	)
LEAF_NODE	127:25	127:25	4	;
JUMP_STATEMENT	128:4	128:12	3	return 0 ;
KEYWORD	128:4	128:4	4	return
LEAF_NODE	128:4	128:4	5	return
DESTINATION	128:11	128:11	4	0
EXPR	128:11	128:11	5	0
FIELD	128:11	128:11	6	0
LEAF_NODE	128:11	128:11	7	0
LEAF_NODE	128:12	128:12	4	;
LABEL	129:0	129:3	3	bad :
LEAF_NODE	129:0	129:0	4	bad
LEAF_NODE	129:3	129:3	4	:
EXPR_STATEMENT	130:4	130:25	3	( void ) TIFFClose ( out ) ;
EXPR	130:4	130:11	4	( void ) TIFFClose ( out )
LEAF_NODE	130:4	130:4	5	(
TYPE_NAME	130:5	130:5	5	void
LEAF_NODE	130:5	130:5	6	void
LEAF_NODE	130:9	130:9	5	)
FUNCTION_CALL	130:11	130:24	5	TIFFClose ( out )
CALLEE	130:11	130:11	6	TIFFClose
LEAF_NODE	130:11	130:11	7	TIFFClose
LEAF_NODE	130:20	130:20	6	(
ARGUMENT	130:21	130:21	6	out
FIELD	130:21	130:21	7	out
LEAF_NODE	130:21	130:21	8	out
LEAF_NODE	130:24	130:24	6	)
LEAF_NODE	130:25	130:25	4	;
JUMP_STATEMENT	131:4	131:12	3	return 1 ;
KEYWORD	131:4	131:4	4	return
LEAF_NODE	131:4	131:4	5	return
DESTINATION	131:11	131:11	4	1
EXPR	131:11	131:11	5	1
FIELD	131:11	131:11	6	1
LEAF_NODE	131:11	131:11	7	1
LEAF_NODE	131:12	131:12	4	;
LEAF_NODE	132:0	132:0	2	}
FUNCTION_DEF	143:0	210:0	1	
RETURN_TYPE	143:0	143:7	2	static void
LEAF_NODE	143:0	143:0	3	static
TYPE_NAME	143:7	143:7	3	void
LEAF_NODE	143:7	143:7	4	void
FUNCTION_NAME	144:0	144:0	2	cpTag
LEAF_NODE	144:0	144:0	3	cpTag
PARAMETER_LIST	144:5	144:70	2	( TIFF * in , TIFF * out , uint16 tag , uint16 count , TIFFDataType type )
LEAF_NODE	144:5	144:5	3	(
PARAMETER_DECL	144:6	144:12	3	TIFF * in
TYPE	144:6	144:10	4	TIFF *
TYPE_NAME	144:6	144:6	5	TIFF
LEAF_NODE	144:6	144:6	6	TIFF
POINTER	144:10	144:10	5	*
LEAF_NODE	144:10	144:10	6	*
NAME	144:12	144:12	4	in
LEAF_NODE	144:12	144:12	5	in
LEAF_NODE	144:14	144:14	3	,
PARAMETER_DECL	144:16	144:22	3	TIFF * out
TYPE	144:16	144:20	4	TIFF *
TYPE_NAME	144:16	144:16	5	TIFF
LEAF_NODE	144:16	144:16	6	TIFF
POINTER	144:20	144:20	5	*
LEAF_NODE	144:20	144:20	6	*
NAME	144:22	144:22	4	out
LEAF_NODE	144:22	144:22	5	out
LEAF_NODE	144:25	144:25	3	,
PARAMETER_DECL	144:27	144:34	3	uint16 tag
TYPE	144:27	144:27	4	uint16
TYPE_NAME	144:27	144:27	5	uint16
LEAF_NODE	144:27	144:27	6	uint16
NAME	144:34	144:34	4	tag
LEAF_NODE	144:34	144:34	5	tag
LEAF_NODE	144:37	144:37	3	,
PARAMETER_DECL	144:39	144:46	3	uint16 count
TYPE	144:39	144:39	4	uint16
TYPE_NAME	144:39	144:39	5	uint16
LEAF_NODE	144:39	144:39	6	uint16
NAME	144:46	144:46	4	count
LEAF_NODE	144:46	144:46	5	count
LEAF_NODE	144:51	144:51	3	,
PARAMETER_DECL	144:53	144:66	3	TIFFDataType type
TYPE	144:53	144:53	4	TIFFDataType
TYPE_NAME	144:53	144:53	5	TIFFDataType
LEAF_NODE	144:53	144:53	6	TIFFDataType
NAME	144:66	144:66	4	type
LEAF_NODE	144:66	144:66	5	type
LEAF_NODE	144:70	144:70	3	)
LEAF_NODE	145:0	145:0	2	{
STATEMENTS	146:1	146:1	2	
SELECTION	146:1	146:15	3	
KEYWORD	146:1	146:1	4	switch
LEAF_NODE	146:1	146:1	5	switch
LEAF_NODE	146:8	146:8	4	(
CONDITION	146:9	146:9	4	type
EXPR	146:9	146:9	5	type
FIELD	146:9	146:9	6	type
LEAF_NODE	146:9	146:9	7	type
LEAF_NODE	146:13	146:13	4	)
STATEMENTS	146:15	209:1	4	
LEAF_NODE	146:15	146:15	5	{
STATEMENTS	147:1	206:16	5	
LABEL	147:1	147:16	6	case TIFF_SHORT :
LEAF_NODE	147:1	147:1	7	case
LEAF_NODE	147:6	147:6	7	TIFF_SHORT
LEAF_NODE	147:16	147:16	7	:
SELECTION	148:2	148:18	6	
KEYWORD	148:2	148:2	7	if
LEAF_NODE	148:2	148:2	8	if
LEAF_NODE	148:5	148:5	7	(
CONDITION	148:6	148:6	7	count == 1
EXPR	148:6	148:15	8	count == 1
FIELD	148:6	148:6	9	count
LEAF_NODE	148:6	148:6	10	count
EQ_OPERATOR	148:12	148:12	9	==
LEAF_NODE	148:12	148:12	10	==
FIELD	148:15	148:15	9	1
LEAF_NODE	148:15	148:15	10	1
LEAF_NODE	148:16	148:16	7	)
STATEMENTS	148:18	151:2	7	
LEAF_NODE	148:18	148:18	8	{
STATEMENTS	149:3	150:3	8	
SIMPLE_DECL	149:3	149:16	9	uint16 shortv ;
VAR_DECL	149:3	149:10	10	uint16 shortv
TYPE	149:3	149:3	11	uint16
TYPE_NAME	149:3	149:3	12	uint16
LEAF_NODE	149:3	149:3	13	uint16
NAME	149:10	149:10	11	shortv
LEAF_NODE	149:10	149:10	12	shortv
LEAF_NODE	149:16	149:16	10	;
EXPR_STATEMENT	150:3	150:25	9	CopyField ( tag , shortv ) ;
EXPR	150:3	150:3	10	CopyField ( tag , shortv )
FUNCTION_CALL	150:3	150:24	11	CopyField ( tag , shortv )
CALLEE	150:3	150:3	12	CopyField
LEAF_NODE	150:3	150:3	13	CopyField
LEAF_NODE	150:12	150:12	12	(
ARGUMENT	150:13	150:13	12	tag
FIELD	150:13	150:13	13	tag
LEAF_NODE	150:13	150:13	14	tag
LEAF_NODE	150:16	150:16	12	,
ARGUMENT	150:18	150:18	12	shortv
FIELD	150:18	150:18	13	shortv
LEAF_NODE	150:18	150:18	14	shortv
LEAF_NODE	150:24	150:24	12	)
LEAF_NODE	150:25	150:25	10	;
LEAF_NODE	151:2	151:2	8	}
SELECTION	151:4	151:9	6	
KEYWORD	151:4	151:4	7	else
LEAF_NODE	151:4	151:4	8	else
STATEMENTS	151:9	151:9	7	
SELECTION	151:9	151:25	8	
KEYWORD	151:9	151:9	9	if
LEAF_NODE	151:9	151:9	10	if
LEAF_NODE	151:12	151:12	9	(
CONDITION	151:13	151:13	9	count == 2
EXPR	151:13	151:22	10	count == 2
FIELD	151:13	151:13	11	count
LEAF_NODE	151:13	151:13	12	count
EQ_OPERATOR	151:19	151:19	11	==
LEAF_NODE	151:19	151:19	12	==
FIELD	151:22	151:22	11	2
LEAF_NODE	151:22	151:22	12	2
LEAF_NODE	151:23	151:23	9	)
STATEMENTS	151:25	154:2	9	
LEAF_NODE	151:25	151:25	10	{
STATEMENTS	152:3	153:3	10	
SIMPLE_DECL	152:3	152:26	11	uint16 shortv1 , uint16 shortv2 ;
INIT_DECL_LIST	152:3	152:3	12	uint16 shortv1 , uint16 shortv2
VAR_DECL	152:3	152:10	13	uint16 shortv1
TYPE	152:3	152:3	14	uint16
TYPE_NAME	152:3	152:3	15	uint16
LEAF_NODE	152:3	152:3	16	uint16
NAME	152:10	152:10	14	shortv1
LEAF_NODE	152:10	152:10	15	shortv1
LEAF_NODE	152:17	152:17	13	,
VAR_DECL	152:3	152:19	13	uint16 shortv2
TYPE	152:3	152:3	14	uint16
TYPE_NAME	152:3	152:3	15	uint16
LEAF_NODE	152:3	152:3	16	uint16
NAME	152:19	152:19	14	shortv2
LEAF_NODE	152:19	152:19	15	shortv2
LEAF_NODE	152:26	152:26	12	;
EXPR_STATEMENT	153:3	153:36	11	CopyField2 ( tag , shortv1 , shortv2 ) ;
EXPR	153:3	153:3	12	CopyField2 ( tag , shortv1 , shortv2 )
FUNCTION_CALL	153:3	153:35	13	CopyField2 ( tag , shortv1 , shortv2 )
CALLEE	153:3	153:3	14	CopyField2
LEAF_NODE	153:3	153:3	15	CopyField2
LEAF_NODE	153:13	153:13	14	(
ARGUMENT	153:14	153:14	14	tag
FIELD	153:14	153:14	15	tag
LEAF_NODE	153:14	153:14	16	tag
LEAF_NODE	153:17	153:17	14	,
ARGUMENT	153:19	153:19	14	shortv1
FIELD	153:19	153:19	15	shortv1
LEAF_NODE	153:19	153:19	16	shortv1
LEAF_NODE	153:26	153:26	14	,
ARGUMENT	153:28	153:28	14	shortv2
FIELD	153:28	153:28	15	shortv2
LEAF_NODE	153:28	153:28	16	shortv2
LEAF_NODE	153:35	153:35	14	)
LEAF_NODE	153:36	153:36	12	;
LEAF_NODE	154:2	154:2	10	}
SELECTION	154:4	154:9	6	
KEYWORD	154:4	154:4	7	else
LEAF_NODE	154:4	154:4	8	else
STATEMENTS	154:9	154:9	7	
SELECTION	154:9	154:25	8	
KEYWORD	154:9	154:9	9	if
LEAF_NODE	154:9	154:9	10	if
LEAF_NODE	154:12	154:12	9	(
CONDITION	154:13	154:13	9	count == 4
EXPR	154:13	154:22	10	count == 4
FIELD	154:13	154:13	11	count
LEAF_NODE	154:13	154:13	12	count
EQ_OPERATOR	154:19	154:19	11	==
LEAF_NODE	154:19	154:19	12	==
FIELD	154:22	154:22	11	4
LEAF_NODE	154:22	154:22	12	4
LEAF_NODE	154:23	154:23	9	)
STATEMENTS	154:25	157:2	9	
LEAF_NODE	154:25	154:25	10	{
STATEMENTS	155:3	156:3	10	
SIMPLE_DECL	155:3	155:28	11	uint16 * tr , uint16 * tg , uint16 * tb , uint16 * ta ;
INIT_DECL_LIST	155:3	155:3	12	uint16 * tr , uint16 * tg , uint16 * tb , uint16 * ta
VAR_DECL	155:3	155:11	13	uint16 * tr
TYPE	155:3	155:10	14	uint16 *
TYPE_NAME	155:3	155:3	15	uint16
LEAF_NODE	155:3	155:3	16	uint16
POINTER	155:10	155:10	15	*
LEAF_NODE	155:10	155:10	16	*
NAME	155:11	155:11	14	tr
LEAF_NODE	155:11	155:11	15	tr
LEAF_NODE	155:13	155:13	13	,
INIT_DECL_LIST	155:3	155:3	13	uint16 * tg , uint16 * tb , uint16 * ta
VAR_DECL	155:3	155:16	14	uint16 * tg
TYPE	155:3	155:15	15	uint16 *
TYPE_NAME	155:3	155:3	16	uint16
LEAF_NODE	155:3	155:3	17	uint16
POINTER	155:15	155:15	16	*
LEAF_NODE	155:15	155:15	17	*
NAME	155:16	155:16	15	tg
LEAF_NODE	155:16	155:16	16	tg
LEAF_NODE	155:18	155:18	14	,
INIT_DECL_LIST	155:3	155:3	14	uint16 * tb , uint16 * ta
VAR_DECL	155:3	155:21	15	uint16 * tb
TYPE	155:3	155:20	16	uint16 *
TYPE_NAME	155:3	155:3	17	uint16
LEAF_NODE	155:3	155:3	18	uint16
POINTER	155:20	155:20	17	*
LEAF_NODE	155:20	155:20	18	*
NAME	155:21	155:21	16	tb
LEAF_NODE	155:21	155:21	17	tb
LEAF_NODE	155:23	155:23	15	,
VAR_DECL	155:3	155:26	15	uint16 * ta
TYPE	155:3	155:25	16	uint16 *
TYPE_NAME	155:3	155:3	17	uint16
LEAF_NODE	155:3	155:3	18	uint16
POINTER	155:25	155:25	17	*
LEAF_NODE	155:25	155:25	18	*
NAME	155:26	155:26	16	ta
LEAF_NODE	155:26	155:26	17	ta
LEAF_NODE	155:28	155:28	12	;
EXPR_STATEMENT	156:3	156:34	11	CopyField4 ( tag , tr , tg , tb , ta ) ;
EXPR	156:3	156:3	12	CopyField4 ( tag , tr , tg , tb , ta )
FUNCTION_CALL	156:3	156:33	13	CopyField4 ( tag , tr , tg , tb , ta )
CALLEE	156:3	156:3	14	CopyField4
LEAF_NODE	156:3	156:3	15	CopyField4
LEAF_NODE	156:13	156:13	14	(
ARGUMENT	156:14	156:14	14	tag
FIELD	156:14	156:14	15	tag
LEAF_NODE	156:14	156:14	16	tag
LEAF_NODE	156:17	156:17	14	,
ARGUMENT	156:19	156:19	14	tr
FIELD	156:19	156:19	15	tr
LEAF_NODE	156:19	156:19	16	tr
LEAF_NODE	156:21	156:21	14	,
ARGUMENT	156:23	156:23	14	tg
FIELD	156:23	156:23	15	tg
LEAF_NODE	156:23	156:23	16	tg
LEAF_NODE	156:25	156:25	14	,
ARGUMENT	156:27	156:27	14	tb
FIELD	156:27	156:27	15	tb
LEAF_NODE	156:27	156:27	16	tb
LEAF_NODE	156:29	156:29	14	,
ARGUMENT	156:31	156:31	14	ta
FIELD	156:31	156:31	15	ta
LEAF_NODE	156:31	156:31	16	ta
LEAF_NODE	156:33	156:33	14	)
LEAF_NODE	156:34	156:34	12	;
LEAF_NODE	157:2	157:2	10	}
SELECTION	157:4	157:9	6	
KEYWORD	157:4	157:4	7	else
LEAF_NODE	157:4	157:4	8	else
STATEMENTS	157:9	157:9	7	
SELECTION	157:9	157:35	8	
KEYWORD	157:9	157:9	9	if
LEAF_NODE	157:9	157:9	10	if
LEAF_NODE	157:12	157:12	9	(
CONDITION	157:13	157:13	9	count == ( uint16 ) - 1
EXPR	157:13	157:31	10	count == ( uint16 ) - 1
FIELD	157:13	157:13	11	count
LEAF_NODE	157:13	157:13	12	count
EQ_OPERATOR	157:19	157:19	11	==
LEAF_NODE	157:19	157:19	12	==
LEAF_NODE	157:22	157:22	11	(
TYPE_NAME	157:23	157:23	11	uint16
LEAF_NODE	157:23	157:23	12	uint16
LEAF_NODE	157:29	157:29	11	)
UNARY_EXPR	157:31	157:32	11	- 1
UNARY_OPERATOR	157:31	157:31	12	-
LEAF_NODE	157:31	157:31	13	-
FIELD	157:32	157:32	12	1
LEAF_NODE	157:32	157:32	13	1
LEAF_NODE	157:33	157:33	9	)
STATEMENTS	157:35	161:2	9	
LEAF_NODE	157:35	157:35	10	{
STATEMENTS	158:3	160:3	10	
SIMPLE_DECL	158:3	158:17	11	uint16 shortv1 ;
VAR_DECL	158:3	158:10	12	uint16 shortv1
TYPE	158:3	158:3	13	uint16
TYPE_NAME	158:3	158:3	14	uint16
LEAF_NODE	158:3	158:3	15	uint16
NAME	158:10	158:10	13	shortv1
LEAF_NODE	158:10	158:10	14	shortv1
LEAF_NODE	158:17	158:17	12	;
SIMPLE_DECL	159:3	159:18	11	uint16 * shortav ;
VAR_DECL	159:3	159:11	12	uint16 * shortav
TYPE	159:3	159:9	13	uint16 *
TYPE_NAME	159:3	159:3	14	uint16
LEAF_NODE	159:3	159:3	15	uint16
POINTER	159:9	159:9	14	*
LEAF_NODE	159:9	159:9	15	*
NAME	159:11	159:11	13	shortav
LEAF_NODE	159:11	159:11	14	shortav
LEAF_NODE	159:18	159:18	12	;
EXPR_STATEMENT	160:3	160:36	11	CopyField2 ( tag , shortv1 , shortav ) ;
EXPR	160:3	160:3	12	CopyField2 ( tag , shortv1 , shortav )
FUNCTION_CALL	160:3	160:35	13	CopyField2 ( tag , shortv1 , shortav )
CALLEE	160:3	160:3	14	CopyField2
LEAF_NODE	160:3	160:3	15	CopyField2
LEAF_NODE	160:13	160:13	14	(
ARGUMENT	160:14	160:14	14	tag
FIELD	160:14	160:14	15	tag
LEAF_NODE	160:14	160:14	16	tag
LEAF_NODE	160:17	160:17	14	,
ARGUMENT	160:19	160:19	14	shortv1
FIELD	160:19	160:19	15	shortv1
LEAF_NODE	160:19	160:19	16	shortv1
LEAF_NODE	160:26	160:26	14	,
ARGUMENT	160:28	160:28	14	shortav
FIELD	160:28	160:28	15	shortav
LEAF_NODE	160:28	160:28	16	shortav
LEAF_NODE	160:35	160:35	14	)
LEAF_NODE	160:36	160:36	12	;
LEAF_NODE	161:2	161:2	10	}
JUMP_STATEMENT	162:2	162:7	6	break DESTINATION ;
KEYWORD	162:2	162:2	7	break
LEAF_NODE	162:2	162:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	162:7	162:7	7	;
LABEL	163:1	163:15	6	case TIFF_LONG :
LEAF_NODE	163:1	163:1	7	case
LEAF_NODE	163:6	163:6	7	TIFF_LONG
LEAF_NODE	163:15	163:15	7	:
LEAF_NODE	164:2	164:2	6	{
STATEMENTS	164:4	165:4	6	
SIMPLE_DECL	164:4	164:16	7	uint32 longv ;
VAR_DECL	164:4	164:11	8	uint32 longv
TYPE	164:4	164:4	9	uint32
TYPE_NAME	164:4	164:4	10	uint32
LEAF_NODE	164:4	164:4	11	uint32
NAME	164:11	164:11	9	longv
LEAF_NODE	164:11	164:11	10	longv
LEAF_NODE	164:16	164:16	8	;
EXPR_STATEMENT	165:4	165:25	7	CopyField ( tag , longv ) ;
EXPR	165:4	165:4	8	CopyField ( tag , longv )
FUNCTION_CALL	165:4	165:24	9	CopyField ( tag , longv )
CALLEE	165:4	165:4	10	CopyField
LEAF_NODE	165:4	165:4	11	CopyField
LEAF_NODE	165:13	165:13	10	(
ARGUMENT	165:14	165:14	10	tag
FIELD	165:14	165:14	11	tag
LEAF_NODE	165:14	165:14	12	tag
LEAF_NODE	165:17	165:17	10	,
ARGUMENT	165:19	165:19	10	longv
FIELD	165:19	165:19	11	longv
LEAF_NODE	165:19	165:19	12	longv
LEAF_NODE	165:24	165:24	10	)
LEAF_NODE	165:25	165:25	8	;
LEAF_NODE	166:2	166:2	6	}
JUMP_STATEMENT	167:2	167:7	6	break DESTINATION ;
KEYWORD	167:2	167:2	7	break
LEAF_NODE	167:2	167:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	167:7	167:7	7	;
LABEL	168:1	168:16	6	case TIFF_LONG8 :
LEAF_NODE	168:1	168:1	7	case
LEAF_NODE	168:6	168:6	7	TIFF_LONG8
LEAF_NODE	168:16	168:16	7	:
LEAF_NODE	169:2	169:2	6	{
STATEMENTS	169:4	170:4	6	
SIMPLE_DECL	169:4	169:17	7	uint64 longv8 ;
VAR_DECL	169:4	169:11	8	uint64 longv8
TYPE	169:4	169:4	9	uint64
TYPE_NAME	169:4	169:4	10	uint64
LEAF_NODE	169:4	169:4	11	uint64
NAME	169:11	169:11	9	longv8
LEAF_NODE	169:11	169:11	10	longv8
LEAF_NODE	169:17	169:17	8	;
EXPR_STATEMENT	170:4	170:26	7	CopyField ( tag , longv8 ) ;
EXPR	170:4	170:4	8	CopyField ( tag , longv8 )
FUNCTION_CALL	170:4	170:25	9	CopyField ( tag , longv8 )
CALLEE	170:4	170:4	10	CopyField
LEAF_NODE	170:4	170:4	11	CopyField
LEAF_NODE	170:13	170:13	10	(
ARGUMENT	170:14	170:14	10	tag
FIELD	170:14	170:14	11	tag
LEAF_NODE	170:14	170:14	12	tag
LEAF_NODE	170:17	170:17	10	,
ARGUMENT	170:19	170:19	10	longv8
FIELD	170:19	170:19	11	longv8
LEAF_NODE	170:19	170:19	12	longv8
LEAF_NODE	170:25	170:25	10	)
LEAF_NODE	170:26	170:26	8	;
LEAF_NODE	171:2	171:2	6	}
JUMP_STATEMENT	172:2	172:7	6	break DESTINATION ;
KEYWORD	172:2	172:2	7	break
LEAF_NODE	172:2	172:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	172:7	172:7	7	;
LABEL	173:1	173:17	6	case TIFF_SLONG8 :
LEAF_NODE	173:1	173:1	7	case
LEAF_NODE	173:6	173:6	7	TIFF_SLONG8
LEAF_NODE	173:17	173:17	7	:
LEAF_NODE	174:2	174:2	6	{
STATEMENTS	174:4	175:4	6	
SIMPLE_DECL	174:4	174:16	7	int64 longv8 ;
VAR_DECL	174:4	174:10	8	int64 longv8
TYPE	174:4	174:4	9	int64
TYPE_NAME	174:4	174:4	10	int64
LEAF_NODE	174:4	174:4	11	int64
NAME	174:10	174:10	9	longv8
LEAF_NODE	174:10	174:10	10	longv8
LEAF_NODE	174:16	174:16	8	;
EXPR_STATEMENT	175:4	175:26	7	CopyField ( tag , longv8 ) ;
EXPR	175:4	175:4	8	CopyField ( tag , longv8 )
FUNCTION_CALL	175:4	175:25	9	CopyField ( tag , longv8 )
CALLEE	175:4	175:4	10	CopyField
LEAF_NODE	175:4	175:4	11	CopyField
LEAF_NODE	175:13	175:13	10	(
ARGUMENT	175:14	175:14	10	tag
FIELD	175:14	175:14	11	tag
LEAF_NODE	175:14	175:14	12	tag
LEAF_NODE	175:17	175:17	10	,
ARGUMENT	175:19	175:19	10	longv8
FIELD	175:19	175:19	11	longv8
LEAF_NODE	175:19	175:19	12	longv8
LEAF_NODE	175:25	175:25	10	)
LEAF_NODE	175:26	175:26	8	;
LEAF_NODE	176:2	176:2	6	}
JUMP_STATEMENT	177:2	177:7	6	break DESTINATION ;
KEYWORD	177:2	177:2	7	break
LEAF_NODE	177:2	177:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	177:7	177:7	7	;
LABEL	178:1	178:19	6	case TIFF_RATIONAL :
LEAF_NODE	178:1	178:1	7	case
LEAF_NODE	178:6	178:6	7	TIFF_RATIONAL
LEAF_NODE	178:19	178:19	7	:
SELECTION	179:2	179:18	6	
KEYWORD	179:2	179:2	7	if
LEAF_NODE	179:2	179:2	8	if
LEAF_NODE	179:5	179:5	7	(
CONDITION	179:6	179:6	7	count == 1
EXPR	179:6	179:15	8	count == 1
FIELD	179:6	179:6	9	count
LEAF_NODE	179:6	179:6	10	count
EQ_OPERATOR	179:12	179:12	9	==
LEAF_NODE	179:12	179:12	10	==
FIELD	179:15	179:15	9	1
LEAF_NODE	179:15	179:15	10	1
LEAF_NODE	179:16	179:16	7	)
STATEMENTS	179:18	182:2	7	
LEAF_NODE	179:18	179:18	8	{
STATEMENTS	180:3	181:3	8	
SIMPLE_DECL	180:3	180:15	9	float floatv ;
VAR_DECL	180:3	180:9	10	float floatv
TYPE	180:3	180:3	11	float
TYPE_NAME	180:3	180:3	12	float
LEAF_NODE	180:3	180:3	13	float
NAME	180:9	180:9	11	floatv
LEAF_NODE	180:9	180:9	12	floatv
LEAF_NODE	180:15	180:15	10	;
EXPR_STATEMENT	181:3	181:25	9	CopyField ( tag , floatv ) ;
EXPR	181:3	181:3	10	CopyField ( tag , floatv )
FUNCTION_CALL	181:3	181:24	11	CopyField ( tag , floatv )
CALLEE	181:3	181:3	12	CopyField
LEAF_NODE	181:3	181:3	13	CopyField
LEAF_NODE	181:12	181:12	12	(
ARGUMENT	181:13	181:13	12	tag
FIELD	181:13	181:13	13	tag
LEAF_NODE	181:13	181:13	14	tag
LEAF_NODE	181:16	181:16	12	,
ARGUMENT	181:18	181:18	12	floatv
FIELD	181:18	181:18	13	floatv
LEAF_NODE	181:18	181:18	14	floatv
LEAF_NODE	181:24	181:24	12	)
LEAF_NODE	181:25	181:25	10	;
LEAF_NODE	182:2	182:2	8	}
SELECTION	182:4	182:9	6	
KEYWORD	182:4	182:4	7	else
LEAF_NODE	182:4	182:4	8	else
STATEMENTS	182:9	182:9	7	
SELECTION	182:9	182:35	8	
KEYWORD	182:9	182:9	9	if
LEAF_NODE	182:9	182:9	10	if
LEAF_NODE	182:12	182:12	9	(
CONDITION	182:13	182:13	9	count == ( uint16 ) - 1
EXPR	182:13	182:31	10	count == ( uint16 ) - 1
FIELD	182:13	182:13	11	count
LEAF_NODE	182:13	182:13	12	count
EQ_OPERATOR	182:19	182:19	11	==
LEAF_NODE	182:19	182:19	12	==
LEAF_NODE	182:22	182:22	11	(
TYPE_NAME	182:23	182:23	11	uint16
LEAF_NODE	182:23	182:23	12	uint16
LEAF_NODE	182:29	182:29	11	)
UNARY_EXPR	182:31	182:32	11	- 1
UNARY_OPERATOR	182:31	182:31	12	-
LEAF_NODE	182:31	182:31	13	-
FIELD	182:32	182:32	12	1
LEAF_NODE	182:32	182:32	13	1
LEAF_NODE	182:33	182:33	9	)
STATEMENTS	182:35	185:2	9	
LEAF_NODE	182:35	182:35	10	{
STATEMENTS	183:3	184:3	10	
SIMPLE_DECL	183:3	183:17	11	float * floatav ;
VAR_DECL	183:3	183:10	12	float * floatav
TYPE	183:3	183:8	13	float *
TYPE_NAME	183:3	183:3	14	float
LEAF_NODE	183:3	183:3	15	float
POINTER	183:8	183:8	14	*
LEAF_NODE	183:8	183:8	15	*
NAME	183:10	183:10	13	floatav
LEAF_NODE	183:10	183:10	14	floatav
LEAF_NODE	183:17	183:17	12	;
EXPR_STATEMENT	184:3	184:26	11	CopyField ( tag , floatav ) ;
EXPR	184:3	184:3	12	CopyField ( tag , floatav )
FUNCTION_CALL	184:3	184:25	13	CopyField ( tag , floatav )
CALLEE	184:3	184:3	14	CopyField
LEAF_NODE	184:3	184:3	15	CopyField
LEAF_NODE	184:12	184:12	14	(
ARGUMENT	184:13	184:13	14	tag
FIELD	184:13	184:13	15	tag
LEAF_NODE	184:13	184:13	16	tag
LEAF_NODE	184:16	184:16	14	,
ARGUMENT	184:18	184:18	14	floatav
FIELD	184:18	184:18	15	floatav
LEAF_NODE	184:18	184:18	16	floatav
LEAF_NODE	184:25	184:25	14	)
LEAF_NODE	184:26	184:26	12	;
LEAF_NODE	185:2	185:2	10	}
JUMP_STATEMENT	186:2	186:7	6	break DESTINATION ;
KEYWORD	186:2	186:2	7	break
LEAF_NODE	186:2	186:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	186:7	186:7	7	;
LABEL	187:1	187:16	6	case TIFF_ASCII :
LEAF_NODE	187:1	187:1	7	case
LEAF_NODE	187:6	187:6	7	TIFF_ASCII
LEAF_NODE	187:16	187:16	7	:
LEAF_NODE	188:2	188:2	6	{
STATEMENTS	188:4	189:4	6	
SIMPLE_DECL	188:4	188:17	7	char * stringv ;
VAR_DECL	188:4	188:10	8	char * stringv
TYPE	188:4	188:8	9	char *
TYPE_NAME	188:4	188:4	10	char
LEAF_NODE	188:4	188:4	11	char
POINTER	188:8	188:8	10	*
LEAF_NODE	188:8	188:8	11	*
NAME	188:10	188:10	9	stringv
LEAF_NODE	188:10	188:10	10	stringv
LEAF_NODE	188:17	188:17	8	;
EXPR_STATEMENT	189:4	189:27	7	CopyField ( tag , stringv ) ;
EXPR	189:4	189:4	8	CopyField ( tag , stringv )
FUNCTION_CALL	189:4	189:26	9	CopyField ( tag , stringv )
CALLEE	189:4	189:4	10	CopyField
LEAF_NODE	189:4	189:4	11	CopyField
LEAF_NODE	189:13	189:13	10	(
ARGUMENT	189:14	189:14	10	tag
FIELD	189:14	189:14	11	tag
LEAF_NODE	189:14	189:14	12	tag
LEAF_NODE	189:17	189:17	10	,
ARGUMENT	189:19	189:19	10	stringv
FIELD	189:19	189:19	11	stringv
LEAF_NODE	189:19	189:19	12	stringv
LEAF_NODE	189:26	189:26	10	)
LEAF_NODE	189:27	189:27	8	;
LEAF_NODE	190:2	190:2	6	}
JUMP_STATEMENT	191:2	191:7	6	break DESTINATION ;
KEYWORD	191:2	191:2	7	break
LEAF_NODE	191:2	191:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	191:7	191:7	7	;
LABEL	192:1	192:17	6	case TIFF_DOUBLE :
LEAF_NODE	192:1	192:1	7	case
LEAF_NODE	192:6	192:6	7	TIFF_DOUBLE
LEAF_NODE	192:17	192:17	7	:
SELECTION	193:2	193:18	6	
KEYWORD	193:2	193:2	7	if
LEAF_NODE	193:2	193:2	8	if
LEAF_NODE	193:5	193:5	7	(
CONDITION	193:6	193:6	7	count == 1
EXPR	193:6	193:15	8	count == 1
FIELD	193:6	193:6	9	count
LEAF_NODE	193:6	193:6	10	count
EQ_OPERATOR	193:12	193:12	9	==
LEAF_NODE	193:12	193:12	10	==
FIELD	193:15	193:15	9	1
LEAF_NODE	193:15	193:15	10	1
LEAF_NODE	193:16	193:16	7	)
STATEMENTS	193:18	196:2	7	
LEAF_NODE	193:18	193:18	8	{
STATEMENTS	194:3	195:3	8	
SIMPLE_DECL	194:3	194:17	9	double doublev ;
VAR_DECL	194:3	194:10	10	double doublev
TYPE	194:3	194:3	11	double
TYPE_NAME	194:3	194:3	12	double
LEAF_NODE	194:3	194:3	13	double
NAME	194:10	194:10	11	doublev
LEAF_NODE	194:10	194:10	12	doublev
LEAF_NODE	194:17	194:17	10	;
EXPR_STATEMENT	195:3	195:26	9	CopyField ( tag , doublev ) ;
EXPR	195:3	195:3	10	CopyField ( tag , doublev )
FUNCTION_CALL	195:3	195:25	11	CopyField ( tag , doublev )
CALLEE	195:3	195:3	12	CopyField
LEAF_NODE	195:3	195:3	13	CopyField
LEAF_NODE	195:12	195:12	12	(
ARGUMENT	195:13	195:13	12	tag
FIELD	195:13	195:13	13	tag
LEAF_NODE	195:13	195:13	14	tag
LEAF_NODE	195:16	195:16	12	,
ARGUMENT	195:18	195:18	12	doublev
FIELD	195:18	195:18	13	doublev
LEAF_NODE	195:18	195:18	14	doublev
LEAF_NODE	195:25	195:25	12	)
LEAF_NODE	195:26	195:26	10	;
LEAF_NODE	196:2	196:2	8	}
SELECTION	196:4	196:9	6	
KEYWORD	196:4	196:4	7	else
LEAF_NODE	196:4	196:4	8	else
STATEMENTS	196:9	196:9	7	
SELECTION	196:9	196:35	8	
KEYWORD	196:9	196:9	9	if
LEAF_NODE	196:9	196:9	10	if
LEAF_NODE	196:12	196:12	9	(
CONDITION	196:13	196:13	9	count == ( uint16 ) - 1
EXPR	196:13	196:31	10	count == ( uint16 ) - 1
FIELD	196:13	196:13	11	count
LEAF_NODE	196:13	196:13	12	count
EQ_OPERATOR	196:19	196:19	11	==
LEAF_NODE	196:19	196:19	12	==
LEAF_NODE	196:22	196:22	11	(
TYPE_NAME	196:23	196:23	11	uint16
LEAF_NODE	196:23	196:23	12	uint16
LEAF_NODE	196:29	196:29	11	)
UNARY_EXPR	196:31	196:32	11	- 1
UNARY_OPERATOR	196:31	196:31	12	-
LEAF_NODE	196:31	196:31	13	-
FIELD	196:32	196:32	12	1
LEAF_NODE	196:32	196:32	13	1
LEAF_NODE	196:33	196:33	9	)
STATEMENTS	196:35	199:2	9	
LEAF_NODE	196:35	196:35	10	{
STATEMENTS	197:3	198:3	10	
SIMPLE_DECL	197:3	197:19	11	double * doubleav ;
VAR_DECL	197:3	197:11	12	double * doubleav
TYPE	197:3	197:9	13	double *
TYPE_NAME	197:3	197:3	14	double
LEAF_NODE	197:3	197:3	15	double
POINTER	197:9	197:9	14	*
LEAF_NODE	197:9	197:9	15	*
NAME	197:11	197:11	13	doubleav
LEAF_NODE	197:11	197:11	14	doubleav
LEAF_NODE	197:19	197:19	12	;
EXPR_STATEMENT	198:3	198:27	11	CopyField ( tag , doubleav ) ;
EXPR	198:3	198:3	12	CopyField ( tag , doubleav )
FUNCTION_CALL	198:3	198:26	13	CopyField ( tag , doubleav )
CALLEE	198:3	198:3	14	CopyField
LEAF_NODE	198:3	198:3	15	CopyField
LEAF_NODE	198:12	198:12	14	(
ARGUMENT	198:13	198:13	14	tag
FIELD	198:13	198:13	15	tag
LEAF_NODE	198:13	198:13	16	tag
LEAF_NODE	198:16	198:16	14	,
ARGUMENT	198:18	198:18	14	doubleav
FIELD	198:18	198:18	15	doubleav
LEAF_NODE	198:18	198:18	16	doubleav
LEAF_NODE	198:26	198:26	14	)
LEAF_NODE	198:27	198:27	12	;
LEAF_NODE	199:2	199:2	10	}
JUMP_STATEMENT	200:2	200:7	6	break DESTINATION ;
KEYWORD	200:2	200:2	7	break
LEAF_NODE	200:2	200:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	200:7	200:7	7	;
LABEL	201:1	201:15	6	case TIFF_IFD8 :
LEAF_NODE	201:1	201:1	7	case
LEAF_NODE	201:6	201:6	7	TIFF_IFD8
LEAF_NODE	201:15	201:15	7	:
LEAF_NODE	202:2	202:2	6	{
STATEMENTS	202:4	203:4	6	
SIMPLE_DECL	202:4	202:15	7	toff_t ifd8 ;
VAR_DECL	202:4	202:11	8	toff_t ifd8
TYPE	202:4	202:4	9	toff_t
TYPE_NAME	202:4	202:4	10	toff_t
LEAF_NODE	202:4	202:4	11	toff_t
NAME	202:11	202:11	9	ifd8
LEAF_NODE	202:11	202:11	10	ifd8
LEAF_NODE	202:15	202:15	8	;
EXPR_STATEMENT	203:4	203:24	7	CopyField ( tag , ifd8 ) ;
EXPR	203:4	203:4	8	CopyField ( tag , ifd8 )
FUNCTION_CALL	203:4	203:23	9	CopyField ( tag , ifd8 )
CALLEE	203:4	203:4	10	CopyField
LEAF_NODE	203:4	203:4	11	CopyField
LEAF_NODE	203:13	203:13	10	(
ARGUMENT	203:14	203:14	10	tag
FIELD	203:14	203:14	11	tag
LEAF_NODE	203:14	203:14	12	tag
LEAF_NODE	203:17	203:17	10	,
ARGUMENT	203:19	203:19	10	ifd8
FIELD	203:19	203:19	11	ifd8
LEAF_NODE	203:19	203:19	12	ifd8
LEAF_NODE	203:23	203:23	10	)
LEAF_NODE	203:24	203:24	8	;
LEAF_NODE	204:2	204:2	6	}
JUMP_STATEMENT	205:2	205:7	6	break DESTINATION ;
KEYWORD	205:2	205:2	7	break
LEAF_NODE	205:2	205:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	205:7	205:7	7	;
LABEL	205:18	205:25	6	default :
LEAF_NODE	205:18	205:18	7	default
LEAF_NODE	205:25	205:25	7	:
EXPR_STATEMENT	206:16	208:36	6	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type ) ;
EXPR	206:16	206:16	7	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type )
FUNCTION_CALL	206:16	208:35	8	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type )
CALLEE	206:16	206:16	9	TIFFError
LEAF_NODE	206:16	206:16	10	TIFFError
LEAF_NODE	206:25	206:25	9	(
ARGUMENT	206:26	206:26	9	TIFFFileName ( in )
FUNCTION_CALL	206:26	206:41	10	TIFFFileName ( in )
CALLEE	206:26	206:26	11	TIFFFileName
LEAF_NODE	206:26	206:26	12	TIFFFileName
LEAF_NODE	206:38	206:38	11	(
ARGUMENT	206:39	206:39	11	in
FIELD	206:39	206:39	12	in
LEAF_NODE	206:39	206:39	13	in
LEAF_NODE	206:41	206:41	11	)
LEAF_NODE	206:42	206:42	9	,
ARGUMENT	207:26	207:26	9	"Data type %d is not supported, tag %d skipped."
FIELD	207:26	207:26	10	"Data type %d is not supported, tag %d skipped."
LEAF_NODE	207:26	207:26	11	"Data type %d is not supported, tag %d skipped."
LEAF_NODE	207:74	207:74	9	,
ARGUMENT	208:26	208:26	9	tag
FIELD	208:26	208:26	10	tag
LEAF_NODE	208:26	208:26	11	tag
LEAF_NODE	208:29	208:29	9	,
ARGUMENT	208:31	208:31	9	type
FIELD	208:31	208:31	10	type
LEAF_NODE	208:31	208:31	11	type
LEAF_NODE	208:35	208:35	9	)
LEAF_NODE	208:36	208:36	7	;
LEAF_NODE	209:1	209:1	5	}
LEAF_NODE	210:0	210:0	2	}
SIMPLE_DECL	218:4	218:14	1	uint16 tag ;
VAR_DECL	218:4	218:11	2	uint16 tag
TYPE	218:4	218:4	3	uint16
TYPE_NAME	218:4	218:4	4	uint16
LEAF_NODE	218:4	218:4	5	uint16
NAME	218:11	218:11	3	tag
LEAF_NODE	218:11	218:11	4	tag
LEAF_NODE	218:14	218:14	2	;
SIMPLE_DECL	219:4	219:16	1	uint16 count ;
VAR_DECL	219:4	219:11	2	uint16 count
TYPE	219:4	219:4	3	uint16
TYPE_NAME	219:4	219:4	4	uint16
LEAF_NODE	219:4	219:4	5	uint16
NAME	219:11	219:11	3	count
LEAF_NODE	219:11	219:11	4	count
LEAF_NODE	219:16	219:16	2	;
SIMPLE_DECL	220:4	220:21	1	TIFFDataType type ;
VAR_DECL	220:4	220:17	2	TIFFDataType type
TYPE	220:4	220:4	3	TIFFDataType
TYPE_NAME	220:4	220:4	4	TIFFDataType
LEAF_NODE	220:4	220:4	5	TIFFDataType
NAME	220:17	220:17	3	type
LEAF_NODE	220:17	220:17	4	type
LEAF_NODE	220:21	220:21	2	;
FUNCTION_DEF	272:0	297:0	1	
RETURN_TYPE	272:0	272:7	2	static void
LEAF_NODE	272:0	272:0	3	static
TYPE_NAME	272:7	272:7	3	void
LEAF_NODE	272:7	272:7	4	void
FUNCTION_NAME	273:0	273:0	2	cpTags
LEAF_NODE	273:0	273:0	3	cpTags
PARAMETER_LIST	273:6	273:26	2	( TIFF * in , TIFF * out )
LEAF_NODE	273:6	273:6	3	(
PARAMETER_DECL	273:7	273:13	3	TIFF * in
TYPE	273:7	273:11	4	TIFF *
TYPE_NAME	273:7	273:7	5	TIFF
LEAF_NODE	273:7	273:7	6	TIFF
POINTER	273:11	273:11	5	*
LEAF_NODE	273:11	273:11	6	*
NAME	273:13	273:13	4	in
LEAF_NODE	273:13	273:13	5	in
LEAF_NODE	273:15	273:15	3	,
PARAMETER_DECL	273:17	273:23	3	TIFF * out
TYPE	273:17	273:21	4	TIFF *
TYPE_NAME	273:17	273:17	5	TIFF
LEAF_NODE	273:17	273:17	6	TIFF
POINTER	273:21	273:21	5	*
LEAF_NODE	273:21	273:21	6	*
NAME	273:23	273:23	4	out
LEAF_NODE	273:23	273:23	5	out
LEAF_NODE	273:26	273:26	3	)
LEAF_NODE	274:0	274:0	2	{
STATEMENTS	275:4	276:4	2	
SIMPLE_DECL	275:4	275:19	3	struct cpTag * p ;
VAR_DECL	275:4	275:18	4	struct cpTag * p
TYPE	275:4	275:17	5	struct cpTag *
TYPE_NAME	275:4	275:11	6	struct cpTag
LEAF_NODE	275:4	275:4	7	struct
LEAF_NODE	275:11	275:11	7	cpTag
POINTER	275:17	275:17	6	*
LEAF_NODE	275:17	275:17	7	*
NAME	275:18	275:18	5	p
LEAF_NODE	275:18	275:18	6	p
LEAF_NODE	275:19	275:19	4	;
ITERATION	276:4	277:1	3	
KEYWORD	276:4	276:4	4	for
LEAF_NODE	276:4	276:4	5	for
LEAF_NODE	276:8	276:8	4	(
FOR_INIT	276:9	276:17	4	p = tags ;
EXPR	276:9	276:9	5	p = tags
ASSIGN	276:9	276:13	6	p = tags
LVAL	276:9	276:9	7	p
FIELD	276:9	276:9	8	p
LEAF_NODE	276:9	276:9	9	p
ASSIGN_OP	276:11	276:11	7	=
LEAF_NODE	276:11	276:11	8	=
RVAL	276:13	276:13	7	tags
FIELD	276:13	276:13	8	tags
LEAF_NODE	276:13	276:13	9	tags
LEAF_NODE	276:17	276:17	5	;
CONDITION	276:19	276:19	4	p < & tags [ NTAGS ]
EXPR	276:19	276:23	5	p < & tags [ NTAGS ]
FIELD	276:19	276:19	6	p
LEAF_NODE	276:19	276:19	7	p
REL_OPERATOR	276:21	276:21	6	<
LEAF_NODE	276:21	276:21	7	<
UNARY_EXPR	276:23	276:24	6	& tags [ NTAGS ]
UNARY_OPERATOR	276:23	276:23	7	&
LEAF_NODE	276:23	276:23	8	&
FIELD	276:24	276:34	7	tags [ NTAGS ]
LEAF_NODE	276:24	276:24	8	tags
LEAF_NODE	276:28	276:28	8	[
EXPR	276:29	276:29	8	NTAGS
FIELD	276:29	276:29	9	NTAGS
LEAF_NODE	276:29	276:29	10	NTAGS
LEAF_NODE	276:34	276:34	8	]
LEAF_NODE	276:35	276:35	4	;
FOR_EXPR	276:37	276:37	4	p ++
EXPR	276:37	276:37	5	p ++
FIELD	276:37	276:38	6	p ++
LEAF_NODE	276:37	276:37	7	p
LEAF_NODE	276:38	276:38	7	++
LEAF_NODE	276:40	276:40	4	)
STATEMENTS	277:1	296:1	4	
LEAF_NODE	277:1	277:1	5	{
STATEMENTS	281:2	295:2	5	
SELECTION	281:2	282:2	6	
KEYWORD	281:2	281:2	7	if
LEAF_NODE	281:2	281:2	8	if
LEAF_NODE	281:4	281:4	7	(
CONDITION	281:6	281:6	7	p -> tag == TIFFTAG_GROUP3OPTIONS
EXPR	281:6	281:16	8	p -> tag == TIFFTAG_GROUP3OPTIONS
FIELD	281:6	281:9	9	p -> tag
LEAF_NODE	281:6	281:6	10	p
LEAF_NODE	281:7	281:7	10	->
LEAF_NODE	281:9	281:9	10	tag
EQ_OPERATOR	281:13	281:13	9	==
LEAF_NODE	281:13	281:13	10	==
FIELD	281:16	281:16	9	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	281:16	281:16	10	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	281:38	281:38	7	)
STATEMENTS	282:2	287:2	7	
LEAF_NODE	282:2	282:2	8	{
STATEMENTS	283:3	284:3	8	
SIMPLE_DECL	283:3	283:21	9	uint16 compression ;
VAR_DECL	283:3	283:10	10	uint16 compression
TYPE	283:3	283:3	11	uint16
TYPE_NAME	283:3	283:3	12	uint16
LEAF_NODE	283:3	283:3	13	uint16
NAME	283:10	283:10	11	compression
LEAF_NODE	283:10	283:10	12	compression
LEAF_NODE	283:21	283:21	10	;
SELECTION	284:3	286:4	9	
KEYWORD	284:3	284:3	10	if
LEAF_NODE	284:3	284:3	11	if
LEAF_NODE	284:5	284:5	10	(
CONDITION	284:7	284:7	10	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX3
EXPR	284:7	284:7	11	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX3
OR	284:7	285:4	12	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX3
EXPR	284:7	284:7	13	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_EXPR	284:7	284:8	14	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_OPERATOR	284:7	284:7	15	!
LEAF_NODE	284:7	284:7	16	!
FUNCTION_CALL	284:8	284:58	15	TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
CALLEE	284:8	284:8	16	TIFFGetField
LEAF_NODE	284:8	284:8	17	TIFFGetField
LEAF_NODE	284:20	284:20	16	(
ARGUMENT	284:21	284:21	16	in
FIELD	284:21	284:21	17	in
LEAF_NODE	284:21	284:21	18	in
LEAF_NODE	284:23	284:23	16	,
ARGUMENT	284:25	284:25	16	TIFFTAG_COMPRESSION
FIELD	284:25	284:25	17	TIFFTAG_COMPRESSION
LEAF_NODE	284:25	284:25	18	TIFFTAG_COMPRESSION
LEAF_NODE	284:44	284:44	16	,
ARGUMENT	284:46	284:46	16	& compression
UNARY_EXPR	284:46	284:47	17	& compression
UNARY_OPERATOR	284:46	284:46	18	&
LEAF_NODE	284:46	284:46	19	&
FIELD	284:47	284:47	18	compression
LEAF_NODE	284:47	284:47	19	compression
LEAF_NODE	284:58	284:58	16	)
LEAF_NODE	284:60	284:60	13	||
EXPR	285:4	285:19	13	compression != COMPRESSION_CCITTFAX3
FIELD	285:4	285:4	14	compression
LEAF_NODE	285:4	285:4	15	compression
EQ_OPERATOR	285:16	285:16	14	!=
LEAF_NODE	285:16	285:16	15	!=
FIELD	285:19	285:19	14	COMPRESSION_CCITTFAX3
LEAF_NODE	285:19	285:19	15	COMPRESSION_CCITTFAX3
LEAF_NODE	285:41	285:41	10	)
STATEMENTS	286:4	286:4	10	
JUMP_STATEMENT	286:4	286:12	11	continue DESTINATION ;
KEYWORD	286:4	286:4	12	continue
LEAF_NODE	286:4	286:4	13	continue
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	286:12	286:12	12	;
LEAF_NODE	287:2	287:2	8	}
SELECTION	288:2	289:2	6	
KEYWORD	288:2	288:2	7	if
LEAF_NODE	288:2	288:2	8	if
LEAF_NODE	288:4	288:4	7	(
CONDITION	288:6	288:6	7	p -> tag == TIFFTAG_GROUP4OPTIONS
EXPR	288:6	288:16	8	p -> tag == TIFFTAG_GROUP4OPTIONS
FIELD	288:6	288:9	9	p -> tag
LEAF_NODE	288:6	288:6	10	p
LEAF_NODE	288:7	288:7	10	->
LEAF_NODE	288:9	288:9	10	tag
EQ_OPERATOR	288:13	288:13	9	==
LEAF_NODE	288:13	288:13	10	==
FIELD	288:16	288:16	9	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	288:16	288:16	10	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	288:38	288:38	7	)
STATEMENTS	289:2	294:2	7	
LEAF_NODE	289:2	289:2	8	{
STATEMENTS	290:3	291:3	8	
SIMPLE_DECL	290:3	290:21	9	uint16 compression ;
VAR_DECL	290:3	290:10	10	uint16 compression
TYPE	290:3	290:3	11	uint16
TYPE_NAME	290:3	290:3	12	uint16
LEAF_NODE	290:3	290:3	13	uint16
NAME	290:10	290:10	11	compression
LEAF_NODE	290:10	290:10	12	compression
LEAF_NODE	290:21	290:21	10	;
SELECTION	291:3	293:4	9	
KEYWORD	291:3	291:3	10	if
LEAF_NODE	291:3	291:3	11	if
LEAF_NODE	291:5	291:5	10	(
CONDITION	291:7	291:7	10	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX4
EXPR	291:7	291:7	11	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX4
OR	291:7	292:4	12	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX4
EXPR	291:7	291:7	13	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_EXPR	291:7	291:8	14	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_OPERATOR	291:7	291:7	15	!
LEAF_NODE	291:7	291:7	16	!
FUNCTION_CALL	291:8	291:58	15	TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
CALLEE	291:8	291:8	16	TIFFGetField
LEAF_NODE	291:8	291:8	17	TIFFGetField
LEAF_NODE	291:20	291:20	16	(
ARGUMENT	291:21	291:21	16	in
FIELD	291:21	291:21	17	in
LEAF_NODE	291:21	291:21	18	in
LEAF_NODE	291:23	291:23	16	,
ARGUMENT	291:25	291:25	16	TIFFTAG_COMPRESSION
FIELD	291:25	291:25	17	TIFFTAG_COMPRESSION
LEAF_NODE	291:25	291:25	18	TIFFTAG_COMPRESSION
LEAF_NODE	291:44	291:44	16	,
ARGUMENT	291:46	291:46	16	& compression
UNARY_EXPR	291:46	291:47	17	& compression
UNARY_OPERATOR	291:46	291:46	18	&
LEAF_NODE	291:46	291:46	19	&
FIELD	291:47	291:47	18	compression
LEAF_NODE	291:47	291:47	19	compression
LEAF_NODE	291:58	291:58	16	)
LEAF_NODE	291:60	291:60	13	||
EXPR	292:4	292:19	13	compression != COMPRESSION_CCITTFAX4
FIELD	292:4	292:4	14	compression
LEAF_NODE	292:4	292:4	15	compression
EQ_OPERATOR	292:16	292:16	14	!=
LEAF_NODE	292:16	292:16	15	!=
FIELD	292:19	292:19	14	COMPRESSION_CCITTFAX4
LEAF_NODE	292:19	292:19	15	COMPRESSION_CCITTFAX4
LEAF_NODE	292:41	292:41	10	)
STATEMENTS	293:4	293:4	10	
JUMP_STATEMENT	293:4	293:12	11	continue DESTINATION ;
KEYWORD	293:4	293:4	12	continue
LEAF_NODE	293:4	293:4	13	continue
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	293:12	293:12	12	;
LEAF_NODE	294:2	294:2	8	}
EXPR_STATEMENT	295:2	295:43	6	cpTag ( in , out , p -> tag , p -> count , p -> type ) ;
EXPR	295:2	295:2	7	cpTag ( in , out , p -> tag , p -> count , p -> type )
FUNCTION_CALL	295:2	295:42	8	cpTag ( in , out , p -> tag , p -> count , p -> type )
CALLEE	295:2	295:2	9	cpTag
LEAF_NODE	295:2	295:2	10	cpTag
LEAF_NODE	295:7	295:7	9	(
ARGUMENT	295:8	295:8	9	in
FIELD	295:8	295:8	10	in
LEAF_NODE	295:8	295:8	11	in
LEAF_NODE	295:10	295:10	9	,
ARGUMENT	295:12	295:12	9	out
FIELD	295:12	295:12	10	out
LEAF_NODE	295:12	295:12	11	out
LEAF_NODE	295:15	295:15	9	,
ARGUMENT	295:17	295:17	9	p -> tag
FIELD	295:17	295:20	10	p -> tag
LEAF_NODE	295:17	295:17	11	p
LEAF_NODE	295:18	295:18	11	->
LEAF_NODE	295:20	295:20	11	tag
LEAF_NODE	295:23	295:23	9	,
ARGUMENT	295:25	295:25	9	p -> count
FIELD	295:25	295:28	10	p -> count
LEAF_NODE	295:25	295:25	11	p
LEAF_NODE	295:26	295:26	11	->
LEAF_NODE	295:28	295:28	11	count
LEAF_NODE	295:33	295:33	9	,
ARGUMENT	295:35	295:35	9	p -> type
FIELD	295:35	295:38	10	p -> type
LEAF_NODE	295:35	295:35	11	p
LEAF_NODE	295:36	295:36	11	->
LEAF_NODE	295:38	295:38	11	type
LEAF_NODE	295:42	295:42	9	)
LEAF_NODE	295:43	295:43	7	;
LEAF_NODE	296:1	296:1	5	}
LEAF_NODE	297:0	297:0	2	}
FUNCTION_DEF	300:0	332:0	1	
RETURN_TYPE	300:0	300:7	2	static int
LEAF_NODE	300:0	300:0	3	static
TYPE_NAME	300:7	300:7	3	int
LEAF_NODE	300:7	300:7	4	int
FUNCTION_NAME	301:0	301:0	2	cpStrips
LEAF_NODE	301:0	301:0	3	cpStrips
PARAMETER_LIST	301:8	301:28	2	( TIFF * in , TIFF * out )
LEAF_NODE	301:8	301:8	3	(
PARAMETER_DECL	301:9	301:15	3	TIFF * in
TYPE	301:9	301:13	4	TIFF *
TYPE_NAME	301:9	301:9	5	TIFF
LEAF_NODE	301:9	301:9	6	TIFF
POINTER	301:13	301:13	5	*
LEAF_NODE	301:13	301:13	6	*
NAME	301:15	301:15	4	in
LEAF_NODE	301:15	301:15	5	in
LEAF_NODE	301:17	301:17	3	,
PARAMETER_DECL	301:19	301:25	3	TIFF * out
TYPE	301:19	301:23	4	TIFF *
TYPE_NAME	301:19	301:19	5	TIFF
LEAF_NODE	301:19	301:19	6	TIFF
POINTER	301:23	301:23	5	*
LEAF_NODE	301:23	301:23	6	*
NAME	301:25	301:25	4	out
LEAF_NODE	301:25	301:25	5	out
LEAF_NODE	301:28	301:28	3	)
LEAF_NODE	302:0	302:0	2	{
STATEMENTS	303:4	331:1	2	
SIMPLE_DECL	303:4	303:40	3	tsize_t bufsize ; bufsize = TIFFStripSize ( in ) ;
VAR_DECL	303:4	303:12	4	tsize_t bufsize ; bufsize = TIFFStripSize ( in )
TYPE	303:4	303:4	5	tsize_t
TYPE_NAME	303:4	303:4	6	tsize_t
LEAF_NODE	303:4	303:4	7	tsize_t
NAME	303:12	303:12	5	bufsize
LEAF_NODE	303:12	303:12	6	bufsize
LEAF_NODE	0:0	0:0	5	;
INIT	303:12	303:12	5	bufsize = TIFFStripSize ( in )
ASSIGN	303:12	303:23	6	bufsize = TIFFStripSize ( in )
LVAL	303:12	303:12	7	bufsize
NAME	303:12	303:12	8	bufsize
LEAF_NODE	303:12	303:12	9	bufsize
ASSIGN_OP	303:21	303:21	7	=
LEAF_NODE	303:21	303:21	8	=
RVAL	303:23	303:23	7	TIFFStripSize ( in )
FUNCTION_CALL	303:23	303:39	8	TIFFStripSize ( in )
CALLEE	303:23	303:23	9	TIFFStripSize
LEAF_NODE	303:23	303:23	10	TIFFStripSize
LEAF_NODE	303:36	303:36	9	(
ARGUMENT	303:37	303:37	9	in
FIELD	303:37	303:37	10	in
LEAF_NODE	303:37	303:37	11	in
LEAF_NODE	303:39	303:39	9	)
LEAF_NODE	303:40	303:40	4	;
SIMPLE_DECL	304:4	304:62	3	unsigned char * buf ; buf = ( unsigned char * ) _TIFFmalloc ( bufsize ) ;
VAR_DECL	304:4	304:19	4	unsigned char * buf ; buf = ( unsigned char * ) _TIFFmalloc ( bufsize )
TYPE	304:4	304:18	5	unsigned char *
TYPE_NAME	304:4	304:13	6	unsigned char
LEAF_NODE	304:4	304:4	7	unsigned
LEAF_NODE	304:13	304:13	7	char
POINTER	304:18	304:18	6	*
LEAF_NODE	304:18	304:18	7	*
NAME	304:19	304:19	5	buf
LEAF_NODE	304:19	304:19	6	buf
LEAF_NODE	0:0	0:0	5	;
INIT	304:19	304:19	5	buf = ( unsigned char * ) _TIFFmalloc ( bufsize )
ASSIGN	304:19	304:25	6	buf = ( unsigned char * ) _TIFFmalloc ( bufsize )
LVAL	304:19	304:19	7	buf
NAME	304:19	304:19	8	buf
LEAF_NODE	304:19	304:19	9	buf
ASSIGN_OP	304:23	304:23	7	=
LEAF_NODE	304:23	304:23	8	=
RVAL	304:25	304:42	7	( unsigned char * ) _TIFFmalloc ( bufsize )
LEAF_NODE	304:25	304:25	8	(
TYPE_NAME	304:26	304:35	8	unsigned char
LEAF_NODE	304:26	304:26	9	unsigned
LEAF_NODE	304:35	304:35	9	char
LEAF_NODE	304:40	304:40	8	*
LEAF_NODE	304:41	304:41	8	)
FUNCTION_CALL	304:42	304:61	8	_TIFFmalloc ( bufsize )
CALLEE	304:42	304:42	9	_TIFFmalloc
LEAF_NODE	304:42	304:42	10	_TIFFmalloc
LEAF_NODE	304:53	304:53	9	(
ARGUMENT	304:54	304:54	9	bufsize
FIELD	304:54	304:54	10	bufsize
LEAF_NODE	304:54	304:54	11	bufsize
LEAF_NODE	304:61	304:61	9	)
LEAF_NODE	304:62	304:62	4	;
SELECTION	306:4	306:13	3	
KEYWORD	306:4	306:4	4	if
LEAF_NODE	306:4	306:4	5	if
LEAF_NODE	306:7	306:7	4	(
CONDITION	306:8	306:8	4	buf
EXPR	306:8	306:8	5	buf
FIELD	306:8	306:8	6	buf
LEAF_NODE	306:8	306:8	7	buf
LEAF_NODE	306:11	306:11	4	)
STATEMENTS	306:13	326:4	4	
LEAF_NODE	306:13	306:13	5	{
STATEMENTS	307:1	325:1	5	
SIMPLE_DECL	307:1	307:40	6	tstrip_t s , tstrip_t ns ; ns = TIFFNumberOfStrips ( in ) ;
INIT_DECL_LIST	307:1	307:1	7	tstrip_t s , tstrip_t ns ; ns = TIFFNumberOfStrips ( in )
VAR_DECL	307:1	307:10	8	tstrip_t s
TYPE	307:1	307:1	9	tstrip_t
TYPE_NAME	307:1	307:1	10	tstrip_t
LEAF_NODE	307:1	307:1	11	tstrip_t
NAME	307:10	307:10	9	s
LEAF_NODE	307:10	307:10	10	s
LEAF_NODE	307:11	307:11	8	,
VAR_DECL	307:1	307:13	8	tstrip_t ns ; ns = TIFFNumberOfStrips ( in )
TYPE	307:1	307:1	9	tstrip_t
TYPE_NAME	307:1	307:1	10	tstrip_t
LEAF_NODE	307:1	307:1	11	tstrip_t
NAME	307:13	307:13	9	ns
LEAF_NODE	307:13	307:13	10	ns
LEAF_NODE	0:0	0:0	9	;
INIT	307:13	307:13	9	ns = TIFFNumberOfStrips ( in )
ASSIGN	307:13	307:18	10	ns = TIFFNumberOfStrips ( in )
LVAL	307:13	307:13	11	ns
NAME	307:13	307:13	12	ns
LEAF_NODE	307:13	307:13	13	ns
ASSIGN_OP	307:16	307:16	11	=
LEAF_NODE	307:16	307:16	12	=
RVAL	307:18	307:18	11	TIFFNumberOfStrips ( in )
FUNCTION_CALL	307:18	307:39	12	TIFFNumberOfStrips ( in )
CALLEE	307:18	307:18	13	TIFFNumberOfStrips
LEAF_NODE	307:18	307:18	14	TIFFNumberOfStrips
LEAF_NODE	307:36	307:36	13	(
ARGUMENT	307:37	307:37	13	in
FIELD	307:37	307:37	14	in
LEAF_NODE	307:37	307:37	15	in
LEAF_NODE	307:39	307:39	13	)
LEAF_NODE	307:40	307:40	7	;
SIMPLE_DECL	308:1	308:19	6	uint64 * bytecounts ;
VAR_DECL	308:1	308:9	7	uint64 * bytecounts
TYPE	308:1	308:8	8	uint64 *
TYPE_NAME	308:1	308:1	9	uint64
LEAF_NODE	308:1	308:1	10	uint64
POINTER	308:8	308:8	9	*
LEAF_NODE	308:8	308:8	10	*
NAME	308:9	308:9	8	bytecounts
LEAF_NODE	308:9	308:9	9	bytecounts
LEAF_NODE	308:19	308:19	7	;
EXPR_STATEMENT	310:1	310:55	6	TIFFGetField ( in , TIFFTAG_STRIPBYTECOUNTS , & bytecounts ) ;
EXPR	310:1	310:1	7	TIFFGetField ( in , TIFFTAG_STRIPBYTECOUNTS , & bytecounts )
FUNCTION_CALL	310:1	310:54	8	TIFFGetField ( in , TIFFTAG_STRIPBYTECOUNTS , & bytecounts )
CALLEE	310:1	310:1	9	TIFFGetField
LEAF_NODE	310:1	310:1	10	TIFFGetField
LEAF_NODE	310:13	310:13	9	(
ARGUMENT	310:14	310:14	9	in
FIELD	310:14	310:14	10	in
LEAF_NODE	310:14	310:14	11	in
LEAF_NODE	310:16	310:16	9	,
ARGUMENT	310:18	310:18	9	TIFFTAG_STRIPBYTECOUNTS
FIELD	310:18	310:18	10	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	310:18	310:18	11	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	310:41	310:41	9	,
ARGUMENT	310:43	310:43	9	& bytecounts
UNARY_EXPR	310:43	310:44	10	& bytecounts
UNARY_OPERATOR	310:43	310:43	11	&
LEAF_NODE	310:43	310:43	12	&
FIELD	310:44	310:44	11	bytecounts
LEAF_NODE	310:44	310:44	12	bytecounts
LEAF_NODE	310:54	310:54	9	)
LEAF_NODE	310:55	310:55	7	;
ITERATION	311:1	311:26	6	
KEYWORD	311:1	311:1	7	for
LEAF_NODE	311:1	311:1	8	for
LEAF_NODE	311:5	311:5	7	(
FOR_INIT	311:6	311:11	7	s = 0 ;
EXPR	311:6	311:6	8	s = 0
ASSIGN	311:6	311:10	9	s = 0
LVAL	311:6	311:6	10	s
FIELD	311:6	311:6	11	s
LEAF_NODE	311:6	311:6	12	s
ASSIGN_OP	311:8	311:8	10	=
LEAF_NODE	311:8	311:8	11	=
RVAL	311:10	311:10	10	0
FIELD	311:10	311:10	11	0
LEAF_NODE	311:10	311:10	12	0
LEAF_NODE	311:11	311:11	8	;
CONDITION	311:13	311:13	7	s < ns
EXPR	311:13	311:17	8	s < ns
FIELD	311:13	311:13	9	s
LEAF_NODE	311:13	311:13	10	s
REL_OPERATOR	311:15	311:15	9	<
LEAF_NODE	311:15	311:15	10	<
FIELD	311:17	311:17	9	ns
LEAF_NODE	311:17	311:17	10	ns
LEAF_NODE	311:19	311:19	7	;
FOR_EXPR	311:21	311:21	7	s ++
EXPR	311:21	311:21	8	s ++
FIELD	311:21	311:22	9	s ++
LEAF_NODE	311:21	311:21	10	s
LEAF_NODE	311:22	311:22	10	++
LEAF_NODE	311:24	311:24	7	)
STATEMENTS	311:26	323:1	7	
LEAF_NODE	311:26	311:26	8	{
STATEMENTS	312:3	318:5	8	
SELECTION	312:3	312:41	9	
KEYWORD	312:3	312:3	10	if
LEAF_NODE	312:3	312:3	11	if
LEAF_NODE	312:6	312:6	10	(
CONDITION	312:7	312:7	10	bytecounts [ s ] > ( uint64 ) bufsize
EXPR	312:7	312:32	11	bytecounts [ s ] > ( uint64 ) bufsize
FIELD	312:7	312:19	12	bytecounts [ s ]
LEAF_NODE	312:7	312:7	13	bytecounts
LEAF_NODE	312:17	312:17	13	[
EXPR	312:18	312:18	13	s
FIELD	312:18	312:18	14	s
LEAF_NODE	312:18	312:18	15	s
LEAF_NODE	312:19	312:19	13	]
REL_OPERATOR	312:21	312:21	12	>
LEAF_NODE	312:21	312:21	13	>
LEAF_NODE	312:23	312:23	12	(
TYPE_NAME	312:24	312:24	12	uint64
LEAF_NODE	312:24	312:24	13	uint64
LEAF_NODE	312:30	312:30	12	)
FIELD	312:32	312:32	12	bufsize
LEAF_NODE	312:32	312:32	13	bufsize
LEAF_NODE	312:39	312:39	10	)
STATEMENTS	312:41	317:5	10	
LEAF_NODE	312:41	312:41	11	{
STATEMENTS	313:2	316:2	11	
EXPR_STATEMENT	313:2	313:67	12	buf = ( unsigned char * ) _TIFFrealloc ( buf , ( tmsize_t ) bytecounts [ s ] ) ;
EXPR	313:2	313:2	13	buf = ( unsigned char * ) _TIFFrealloc ( buf , ( tmsize_t ) bytecounts [ s ] )
ASSIGN	313:2	313:8	14	buf = ( unsigned char * ) _TIFFrealloc ( buf , ( tmsize_t ) bytecounts [ s ] )
LVAL	313:2	313:2	15	buf
FIELD	313:2	313:2	16	buf
LEAF_NODE	313:2	313:2	17	buf
ASSIGN_OP	313:6	313:6	15	=
LEAF_NODE	313:6	313:6	16	=
RVAL	313:8	313:25	15	( unsigned char * ) _TIFFrealloc ( buf , ( tmsize_t ) bytecounts [ s ] )
LEAF_NODE	313:8	313:8	16	(
TYPE_NAME	313:9	313:18	16	unsigned char
LEAF_NODE	313:9	313:9	17	unsigned
LEAF_NODE	313:18	313:18	17	char
LEAF_NODE	313:23	313:23	16	*
LEAF_NODE	313:24	313:24	16	)
FUNCTION_CALL	313:25	313:66	16	_TIFFrealloc ( buf , ( tmsize_t ) bytecounts [ s ] )
CALLEE	313:25	313:25	17	_TIFFrealloc
LEAF_NODE	313:25	313:25	18	_TIFFrealloc
LEAF_NODE	313:37	313:37	17	(
ARGUMENT	313:38	313:38	17	buf
FIELD	313:38	313:38	18	buf
LEAF_NODE	313:38	313:38	19	buf
LEAF_NODE	313:41	313:41	17	,
ARGUMENT	313:43	313:53	17	( tmsize_t ) bytecounts [ s ]
LEAF_NODE	313:43	313:43	18	(
TYPE_NAME	313:44	313:44	18	tmsize_t
LEAF_NODE	313:44	313:44	19	tmsize_t
LEAF_NODE	313:52	313:52	18	)
FIELD	313:53	313:65	18	bytecounts [ s ]
LEAF_NODE	313:53	313:53	19	bytecounts
LEAF_NODE	313:63	313:63	19	[
EXPR	313:64	313:64	19	s
FIELD	313:64	313:64	20	s
LEAF_NODE	313:64	313:64	21	s
LEAF_NODE	313:65	313:65	19	]
LEAF_NODE	313:66	313:66	17	)
LEAF_NODE	313:67	313:67	13	;
SELECTION	314:2	315:6	12	
KEYWORD	314:2	314:2	13	if
LEAF_NODE	314:2	314:2	14	if
LEAF_NODE	314:5	314:5	13	(
CONDITION	314:6	314:6	13	! buf
EXPR	314:6	314:6	14	! buf
UNARY_EXPR	314:6	314:7	15	! buf
UNARY_OPERATOR	314:6	314:6	16	!
LEAF_NODE	314:6	314:6	17	!
FIELD	314:7	314:7	16	buf
LEAF_NODE	314:7	314:7	17	buf
LEAF_NODE	314:10	314:10	13	)
STATEMENTS	315:6	315:6	13	
JUMP_STATEMENT	315:6	315:14	14	goto bad ;
KEYWORD	315:6	315:6	15	goto
LEAF_NODE	315:6	315:6	16	goto
DESTINATION	315:11	315:11	15	bad
LEAF_NODE	315:11	315:11	16	bad
LEAF_NODE	315:14	315:14	15	;
EXPR_STATEMENT	316:2	316:35	12	bufsize = ( tmsize_t ) bytecounts [ s ] ;
EXPR	316:2	316:2	13	bufsize = ( tmsize_t ) bytecounts [ s ]
ASSIGN	316:2	316:12	14	bufsize = ( tmsize_t ) bytecounts [ s ]
LVAL	316:2	316:2	15	bufsize
FIELD	316:2	316:2	16	bufsize
LEAF_NODE	316:2	316:2	17	bufsize
ASSIGN_OP	316:10	316:10	15	=
LEAF_NODE	316:10	316:10	16	=
RVAL	316:12	316:22	15	( tmsize_t ) bytecounts [ s ]
LEAF_NODE	316:12	316:12	16	(
TYPE_NAME	316:13	316:13	16	tmsize_t
LEAF_NODE	316:13	316:13	17	tmsize_t
LEAF_NODE	316:21	316:21	16	)
FIELD	316:22	316:34	16	bytecounts [ s ]
LEAF_NODE	316:22	316:22	17	bytecounts
LEAF_NODE	316:32	316:32	17	[
EXPR	316:33	316:33	17	s
FIELD	316:33	316:33	18	s
LEAF_NODE	316:33	316:33	19	s
LEAF_NODE	316:34	316:34	17	]
LEAF_NODE	316:35	316:35	13	;
LEAF_NODE	317:5	317:5	11	}
SELECTION	318:5	319:63	9	
KEYWORD	318:5	318:5	10	if
LEAF_NODE	318:5	318:5	11	if
LEAF_NODE	318:8	318:8	10	(
CONDITION	318:9	318:9	10	TIFFReadRawStrip ( in , s , buf , ( tmsize_t ) bytecounts [ s ] ) < 0 || TIFFWriteRawStrip ( out , s , buf , ( tmsize_t ) bytecounts [ s ] ) < 0
EXPR	318:9	318:9	11	TIFFReadRawStrip ( in , s , buf , ( tmsize_t ) bytecounts [ s ] ) < 0 || TIFFWriteRawStrip ( out , s , buf , ( tmsize_t ) bytecounts [ s ] ) < 0
OR	318:9	319:2	12	TIFFReadRawStrip ( in , s , buf , ( tmsize_t ) bytecounts [ s ] ) < 0 || TIFFWriteRawStrip ( out , s , buf , ( tmsize_t ) bytecounts [ s ] ) < 0
EXPR	318:9	318:65	13	TIFFReadRawStrip ( in , s , buf , ( tmsize_t ) bytecounts [ s ] ) < 0
FUNCTION_CALL	318:9	318:61	14	TIFFReadRawStrip ( in , s , buf , ( tmsize_t ) bytecounts [ s ] )
CALLEE	318:9	318:9	15	TIFFReadRawStrip
LEAF_NODE	318:9	318:9	16	TIFFReadRawStrip
LEAF_NODE	318:25	318:25	15	(
ARGUMENT	318:26	318:26	15	in
FIELD	318:26	318:26	16	in
LEAF_NODE	318:26	318:26	17	in
LEAF_NODE	318:28	318:28	15	,
ARGUMENT	318:30	318:30	15	s
FIELD	318:30	318:30	16	s
LEAF_NODE	318:30	318:30	17	s
LEAF_NODE	318:31	318:31	15	,
ARGUMENT	318:33	318:33	15	buf
FIELD	318:33	318:33	16	buf
LEAF_NODE	318:33	318:33	17	buf
LEAF_NODE	318:36	318:36	15	,
ARGUMENT	318:38	318:48	15	( tmsize_t ) bytecounts [ s ]
LEAF_NODE	318:38	318:38	16	(
TYPE_NAME	318:39	318:39	16	tmsize_t
LEAF_NODE	318:39	318:39	17	tmsize_t
LEAF_NODE	318:47	318:47	16	)
FIELD	318:48	318:60	16	bytecounts [ s ]
LEAF_NODE	318:48	318:48	17	bytecounts
LEAF_NODE	318:58	318:58	17	[
EXPR	318:59	318:59	17	s
FIELD	318:59	318:59	18	s
LEAF_NODE	318:59	318:59	19	s
LEAF_NODE	318:60	318:60	17	]
LEAF_NODE	318:61	318:61	15	)
REL_OPERATOR	318:63	318:63	14	<
LEAF_NODE	318:63	318:63	15	<
FIELD	318:65	318:65	14	0
LEAF_NODE	318:65	318:65	15	0
LEAF_NODE	318:67	318:67	13	||
EXPR	319:2	319:60	13	TIFFWriteRawStrip ( out , s , buf , ( tmsize_t ) bytecounts [ s ] ) < 0
FUNCTION_CALL	319:2	319:56	14	TIFFWriteRawStrip ( out , s , buf , ( tmsize_t ) bytecounts [ s ] )
CALLEE	319:2	319:2	15	TIFFWriteRawStrip
LEAF_NODE	319:2	319:2	16	TIFFWriteRawStrip
LEAF_NODE	319:19	319:19	15	(
ARGUMENT	319:20	319:20	15	out
FIELD	319:20	319:20	16	out
LEAF_NODE	319:20	319:20	17	out
LEAF_NODE	319:23	319:23	15	,
ARGUMENT	319:25	319:25	15	s
FIELD	319:25	319:25	16	s
LEAF_NODE	319:25	319:25	17	s
LEAF_NODE	319:26	319:26	15	,
ARGUMENT	319:28	319:28	15	buf
FIELD	319:28	319:28	16	buf
LEAF_NODE	319:28	319:28	17	buf
LEAF_NODE	319:31	319:31	15	,
ARGUMENT	319:33	319:43	15	( tmsize_t ) bytecounts [ s ]
LEAF_NODE	319:33	319:33	16	(
TYPE_NAME	319:34	319:34	16	tmsize_t
LEAF_NODE	319:34	319:34	17	tmsize_t
LEAF_NODE	319:42	319:42	16	)
FIELD	319:43	319:55	16	bytecounts [ s ]
LEAF_NODE	319:43	319:43	17	bytecounts
LEAF_NODE	319:53	319:53	17	[
EXPR	319:54	319:54	17	s
FIELD	319:54	319:54	18	s
LEAF_NODE	319:54	319:54	19	s
LEAF_NODE	319:55	319:55	17	]
LEAF_NODE	319:56	319:56	15	)
REL_OPERATOR	319:58	319:58	14	<
LEAF_NODE	319:58	319:58	15	<
FIELD	319:60	319:60	14	0
LEAF_NODE	319:60	319:60	15	0
LEAF_NODE	319:61	319:61	10	)
STATEMENTS	319:63	322:5	10	
LEAF_NODE	319:63	319:63	11	{
STATEMENTS	320:2	321:2	11	
EXPR_STATEMENT	320:2	320:16	12	_TIFFfree ( buf ) ;
EXPR	320:2	320:2	13	_TIFFfree ( buf )
FUNCTION_CALL	320:2	320:15	14	_TIFFfree ( buf )
CALLEE	320:2	320:2	15	_TIFFfree
LEAF_NODE	320:2	320:2	16	_TIFFfree
LEAF_NODE	320:11	320:11	15	(
ARGUMENT	320:12	320:12	15	buf
FIELD	320:12	320:12	16	buf
LEAF_NODE	320:12	320:12	17	buf
LEAF_NODE	320:15	320:15	15	)
LEAF_NODE	320:16	320:16	13	;
JUMP_STATEMENT	321:2	321:10	12	return 0 ;
KEYWORD	321:2	321:2	13	return
LEAF_NODE	321:2	321:2	14	return
DESTINATION	321:9	321:9	13	0
EXPR	321:9	321:9	14	0
FIELD	321:9	321:9	15	0
LEAF_NODE	321:9	321:9	16	0
LEAF_NODE	321:10	321:10	13	;
LEAF_NODE	322:5	322:5	11	}
LEAF_NODE	323:1	323:1	8	}
EXPR_STATEMENT	324:1	324:15	6	_TIFFfree ( buf ) ;
EXPR	324:1	324:1	7	_TIFFfree ( buf )
FUNCTION_CALL	324:1	324:14	8	_TIFFfree ( buf )
CALLEE	324:1	324:1	9	_TIFFfree
LEAF_NODE	324:1	324:1	10	_TIFFfree
LEAF_NODE	324:10	324:10	9	(
ARGUMENT	324:11	324:11	9	buf
FIELD	324:11	324:11	10	buf
LEAF_NODE	324:11	324:11	11	buf
LEAF_NODE	324:14	324:14	9	)
LEAF_NODE	324:15	324:15	7	;
JUMP_STATEMENT	325:1	325:9	6	return 1 ;
KEYWORD	325:1	325:1	7	return
LEAF_NODE	325:1	325:1	8	return
DESTINATION	325:8	325:8	7	1
EXPR	325:8	325:8	8	1
FIELD	325:8	325:8	9	1
LEAF_NODE	325:8	325:8	10	1
LEAF_NODE	325:9	325:9	7	;
LEAF_NODE	326:4	326:4	5	}
LABEL	328:0	328:3	3	bad :
LEAF_NODE	328:0	328:0	4	bad
LEAF_NODE	328:3	328:3	4	:
EXPR_STATEMENT	329:1	330:45	3	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for strip buffer." ) ;
EXPR	329:1	329:1	4	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for strip buffer." )
FUNCTION_CALL	329:1	330:44	5	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for strip buffer." )
CALLEE	329:1	329:1	6	TIFFError
LEAF_NODE	329:1	329:1	7	TIFFError
LEAF_NODE	329:10	329:10	6	(
ARGUMENT	329:11	329:11	6	TIFFFileName ( in )
FUNCTION_CALL	329:11	329:26	7	TIFFFileName ( in )
CALLEE	329:11	329:11	8	TIFFFileName
LEAF_NODE	329:11	329:11	9	TIFFFileName
LEAF_NODE	329:23	329:23	8	(
ARGUMENT	329:24	329:24	8	in
FIELD	329:24	329:24	9	in
LEAF_NODE	329:24	329:24	10	in
LEAF_NODE	329:26	329:26	8	)
LEAF_NODE	329:27	329:27	6	,
ARGUMENT	330:4	330:4	6	"Can't allocate space for strip buffer."
FIELD	330:4	330:4	7	"Can't allocate space for strip buffer."
LEAF_NODE	330:4	330:4	8	"Can't allocate space for strip buffer."
LEAF_NODE	330:44	330:44	6	)
LEAF_NODE	330:45	330:45	4	;
JUMP_STATEMENT	331:1	331:9	3	return 0 ;
KEYWORD	331:1	331:1	4	return
LEAF_NODE	331:1	331:1	5	return
DESTINATION	331:8	331:8	4	0
EXPR	331:8	331:8	5	0
FIELD	331:8	331:8	6	0
LEAF_NODE	331:8	331:8	7	0
LEAF_NODE	331:9	331:9	4	;
LEAF_NODE	332:0	332:0	2	}
FUNCTION_DEF	334:0	366:0	1	
RETURN_TYPE	334:0	334:7	2	static int
LEAF_NODE	334:0	334:0	3	static
TYPE_NAME	334:7	334:7	3	int
LEAF_NODE	334:7	334:7	4	int
FUNCTION_NAME	335:0	335:0	2	cpTiles
LEAF_NODE	335:0	335:0	3	cpTiles
PARAMETER_LIST	335:7	335:27	2	( TIFF * in , TIFF * out )
LEAF_NODE	335:7	335:7	3	(
PARAMETER_DECL	335:8	335:14	3	TIFF * in
TYPE	335:8	335:12	4	TIFF *
TYPE_NAME	335:8	335:8	5	TIFF
LEAF_NODE	335:8	335:8	6	TIFF
POINTER	335:12	335:12	5	*
LEAF_NODE	335:12	335:12	6	*
NAME	335:14	335:14	4	in
LEAF_NODE	335:14	335:14	5	in
LEAF_NODE	335:16	335:16	3	,
PARAMETER_DECL	335:18	335:24	3	TIFF * out
TYPE	335:18	335:22	4	TIFF *
TYPE_NAME	335:18	335:18	5	TIFF
LEAF_NODE	335:18	335:18	6	TIFF
POINTER	335:22	335:22	5	*
LEAF_NODE	335:22	335:22	6	*
NAME	335:24	335:24	4	out
LEAF_NODE	335:24	335:24	5	out
LEAF_NODE	335:27	335:27	3	)
LEAF_NODE	336:0	336:0	2	{
STATEMENTS	337:4	365:1	2	
SIMPLE_DECL	337:4	337:38	3	tsize_t bufsize ; bufsize = TIFFTileSize ( in ) ;
VAR_DECL	337:4	337:12	4	tsize_t bufsize ; bufsize = TIFFTileSize ( in )
TYPE	337:4	337:4	5	tsize_t
TYPE_NAME	337:4	337:4	6	tsize_t
LEAF_NODE	337:4	337:4	7	tsize_t
NAME	337:12	337:12	5	bufsize
LEAF_NODE	337:12	337:12	6	bufsize
LEAF_NODE	0:0	0:0	5	;
INIT	337:12	337:12	5	bufsize = TIFFTileSize ( in )
ASSIGN	337:12	337:22	6	bufsize = TIFFTileSize ( in )
LVAL	337:12	337:12	7	bufsize
NAME	337:12	337:12	8	bufsize
LEAF_NODE	337:12	337:12	9	bufsize
ASSIGN_OP	337:20	337:20	7	=
LEAF_NODE	337:20	337:20	8	=
RVAL	337:22	337:22	7	TIFFTileSize ( in )
FUNCTION_CALL	337:22	337:37	8	TIFFTileSize ( in )
CALLEE	337:22	337:22	9	TIFFTileSize
LEAF_NODE	337:22	337:22	10	TIFFTileSize
LEAF_NODE	337:34	337:34	9	(
ARGUMENT	337:35	337:35	9	in
FIELD	337:35	337:35	10	in
LEAF_NODE	337:35	337:35	11	in
LEAF_NODE	337:37	337:37	9	)
LEAF_NODE	337:38	337:38	4	;
SIMPLE_DECL	338:4	338:62	3	unsigned char * buf ; buf = ( unsigned char * ) _TIFFmalloc ( bufsize ) ;
VAR_DECL	338:4	338:19	4	unsigned char * buf ; buf = ( unsigned char * ) _TIFFmalloc ( bufsize )
TYPE	338:4	338:18	5	unsigned char *
TYPE_NAME	338:4	338:13	6	unsigned char
LEAF_NODE	338:4	338:4	7	unsigned
LEAF_NODE	338:13	338:13	7	char
POINTER	338:18	338:18	6	*
LEAF_NODE	338:18	338:18	7	*
NAME	338:19	338:19	5	buf
LEAF_NODE	338:19	338:19	6	buf
LEAF_NODE	0:0	0:0	5	;
INIT	338:19	338:19	5	buf = ( unsigned char * ) _TIFFmalloc ( bufsize )
ASSIGN	338:19	338:25	6	buf = ( unsigned char * ) _TIFFmalloc ( bufsize )
LVAL	338:19	338:19	7	buf
NAME	338:19	338:19	8	buf
LEAF_NODE	338:19	338:19	9	buf
ASSIGN_OP	338:23	338:23	7	=
LEAF_NODE	338:23	338:23	8	=
RVAL	338:25	338:42	7	( unsigned char * ) _TIFFmalloc ( bufsize )
LEAF_NODE	338:25	338:25	8	(
TYPE_NAME	338:26	338:35	8	unsigned char
LEAF_NODE	338:26	338:26	9	unsigned
LEAF_NODE	338:35	338:35	9	char
LEAF_NODE	338:40	338:40	8	*
LEAF_NODE	338:41	338:41	8	)
FUNCTION_CALL	338:42	338:61	8	_TIFFmalloc ( bufsize )
CALLEE	338:42	338:42	9	_TIFFmalloc
LEAF_NODE	338:42	338:42	10	_TIFFmalloc
LEAF_NODE	338:53	338:53	9	(
ARGUMENT	338:54	338:54	9	bufsize
FIELD	338:54	338:54	10	bufsize
LEAF_NODE	338:54	338:54	11	bufsize
LEAF_NODE	338:61	338:61	9	)
LEAF_NODE	338:62	338:62	4	;
SELECTION	340:4	340:13	3	
KEYWORD	340:4	340:4	4	if
LEAF_NODE	340:4	340:4	5	if
LEAF_NODE	340:7	340:7	4	(
CONDITION	340:8	340:8	4	buf
EXPR	340:8	340:8	5	buf
FIELD	340:8	340:8	6	buf
LEAF_NODE	340:8	340:8	7	buf
LEAF_NODE	340:11	340:11	4	)
STATEMENTS	340:13	360:4	4	
LEAF_NODE	340:13	340:13	5	{
STATEMENTS	341:1	359:1	5	
SIMPLE_DECL	341:1	341:38	6	ttile_t t , ttile_t nt ; nt = TIFFNumberOfTiles ( in ) ;
INIT_DECL_LIST	341:1	341:1	7	ttile_t t , ttile_t nt ; nt = TIFFNumberOfTiles ( in )
VAR_DECL	341:1	341:9	8	ttile_t t
TYPE	341:1	341:1	9	ttile_t
TYPE_NAME	341:1	341:1	10	ttile_t
LEAF_NODE	341:1	341:1	11	ttile_t
NAME	341:9	341:9	9	t
LEAF_NODE	341:9	341:9	10	t
LEAF_NODE	341:10	341:10	8	,
VAR_DECL	341:1	341:12	8	ttile_t nt ; nt = TIFFNumberOfTiles ( in )
TYPE	341:1	341:1	9	ttile_t
TYPE_NAME	341:1	341:1	10	ttile_t
LEAF_NODE	341:1	341:1	11	ttile_t
NAME	341:12	341:12	9	nt
LEAF_NODE	341:12	341:12	10	nt
LEAF_NODE	0:0	0:0	9	;
INIT	341:12	341:12	9	nt = TIFFNumberOfTiles ( in )
ASSIGN	341:12	341:17	10	nt = TIFFNumberOfTiles ( in )
LVAL	341:12	341:12	11	nt
NAME	341:12	341:12	12	nt
LEAF_NODE	341:12	341:12	13	nt
ASSIGN_OP	341:15	341:15	11	=
LEAF_NODE	341:15	341:15	12	=
RVAL	341:17	341:17	11	TIFFNumberOfTiles ( in )
FUNCTION_CALL	341:17	341:37	12	TIFFNumberOfTiles ( in )
CALLEE	341:17	341:17	13	TIFFNumberOfTiles
LEAF_NODE	341:17	341:17	14	TIFFNumberOfTiles
LEAF_NODE	341:34	341:34	13	(
ARGUMENT	341:35	341:35	13	in
FIELD	341:35	341:35	14	in
LEAF_NODE	341:35	341:35	15	in
LEAF_NODE	341:37	341:37	13	)
LEAF_NODE	341:38	341:38	7	;
SIMPLE_DECL	342:1	342:19	6	uint64 * bytecounts ;
VAR_DECL	342:1	342:9	7	uint64 * bytecounts
TYPE	342:1	342:8	8	uint64 *
TYPE_NAME	342:1	342:1	9	uint64
LEAF_NODE	342:1	342:1	10	uint64
POINTER	342:8	342:8	9	*
LEAF_NODE	342:8	342:8	10	*
NAME	342:9	342:9	8	bytecounts
LEAF_NODE	342:9	342:9	9	bytecounts
LEAF_NODE	342:19	342:19	7	;
EXPR_STATEMENT	344:1	344:54	6	TIFFGetField ( in , TIFFTAG_TILEBYTECOUNTS , & bytecounts ) ;
EXPR	344:1	344:1	7	TIFFGetField ( in , TIFFTAG_TILEBYTECOUNTS , & bytecounts )
FUNCTION_CALL	344:1	344:53	8	TIFFGetField ( in , TIFFTAG_TILEBYTECOUNTS , & bytecounts )
CALLEE	344:1	344:1	9	TIFFGetField
LEAF_NODE	344:1	344:1	10	TIFFGetField
LEAF_NODE	344:13	344:13	9	(
ARGUMENT	344:14	344:14	9	in
FIELD	344:14	344:14	10	in
LEAF_NODE	344:14	344:14	11	in
LEAF_NODE	344:16	344:16	9	,
ARGUMENT	344:18	344:18	9	TIFFTAG_TILEBYTECOUNTS
FIELD	344:18	344:18	10	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	344:18	344:18	11	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	344:40	344:40	9	,
ARGUMENT	344:42	344:42	9	& bytecounts
UNARY_EXPR	344:42	344:43	10	& bytecounts
UNARY_OPERATOR	344:42	344:42	11	&
LEAF_NODE	344:42	344:42	12	&
FIELD	344:43	344:43	11	bytecounts
LEAF_NODE	344:43	344:43	12	bytecounts
LEAF_NODE	344:53	344:53	9	)
LEAF_NODE	344:54	344:54	7	;
ITERATION	345:1	345:26	6	
KEYWORD	345:1	345:1	7	for
LEAF_NODE	345:1	345:1	8	for
LEAF_NODE	345:5	345:5	7	(
FOR_INIT	345:6	345:11	7	t = 0 ;
EXPR	345:6	345:6	8	t = 0
ASSIGN	345:6	345:10	9	t = 0
LVAL	345:6	345:6	10	t
FIELD	345:6	345:6	11	t
LEAF_NODE	345:6	345:6	12	t
ASSIGN_OP	345:8	345:8	10	=
LEAF_NODE	345:8	345:8	11	=
RVAL	345:10	345:10	10	0
FIELD	345:10	345:10	11	0
LEAF_NODE	345:10	345:10	12	0
LEAF_NODE	345:11	345:11	8	;
CONDITION	345:13	345:13	7	t < nt
EXPR	345:13	345:17	8	t < nt
FIELD	345:13	345:13	9	t
LEAF_NODE	345:13	345:13	10	t
REL_OPERATOR	345:15	345:15	9	<
LEAF_NODE	345:15	345:15	10	<
FIELD	345:17	345:17	9	nt
LEAF_NODE	345:17	345:17	10	nt
LEAF_NODE	345:19	345:19	7	;
FOR_EXPR	345:21	345:21	7	t ++
EXPR	345:21	345:21	8	t ++
FIELD	345:21	345:22	9	t ++
LEAF_NODE	345:21	345:21	10	t
LEAF_NODE	345:22	345:22	10	++
LEAF_NODE	345:24	345:24	7	)
STATEMENTS	345:26	357:1	7	
LEAF_NODE	345:26	345:26	8	{
STATEMENTS	346:5	352:5	8	
SELECTION	346:5	346:43	9	
KEYWORD	346:5	346:5	10	if
LEAF_NODE	346:5	346:5	11	if
LEAF_NODE	346:8	346:8	10	(
CONDITION	346:9	346:9	10	bytecounts [ t ] > ( uint64 ) bufsize
EXPR	346:9	346:34	11	bytecounts [ t ] > ( uint64 ) bufsize
FIELD	346:9	346:21	12	bytecounts [ t ]
LEAF_NODE	346:9	346:9	13	bytecounts
LEAF_NODE	346:19	346:19	13	[
EXPR	346:20	346:20	13	t
FIELD	346:20	346:20	14	t
LEAF_NODE	346:20	346:20	15	t
LEAF_NODE	346:21	346:21	13	]
REL_OPERATOR	346:23	346:23	12	>
LEAF_NODE	346:23	346:23	13	>
LEAF_NODE	346:25	346:25	12	(
TYPE_NAME	346:26	346:26	12	uint64
LEAF_NODE	346:26	346:26	13	uint64
LEAF_NODE	346:32	346:32	12	)
FIELD	346:34	346:34	12	bufsize
LEAF_NODE	346:34	346:34	13	bufsize
LEAF_NODE	346:41	346:41	10	)
STATEMENTS	346:43	351:5	10	
LEAF_NODE	346:43	346:43	11	{
STATEMENTS	347:2	350:2	11	
EXPR_STATEMENT	347:2	347:67	12	buf = ( unsigned char * ) _TIFFrealloc ( buf , ( tmsize_t ) bytecounts [ t ] ) ;
EXPR	347:2	347:2	13	buf = ( unsigned char * ) _TIFFrealloc ( buf , ( tmsize_t ) bytecounts [ t ] )
ASSIGN	347:2	347:8	14	buf = ( unsigned char * ) _TIFFrealloc ( buf , ( tmsize_t ) bytecounts [ t ] )
LVAL	347:2	347:2	15	buf
FIELD	347:2	347:2	16	buf
LEAF_NODE	347:2	347:2	17	buf
ASSIGN_OP	347:6	347:6	15	=
LEAF_NODE	347:6	347:6	16	=
RVAL	347:8	347:25	15	( unsigned char * ) _TIFFrealloc ( buf , ( tmsize_t ) bytecounts [ t ] )
LEAF_NODE	347:8	347:8	16	(
TYPE_NAME	347:9	347:18	16	unsigned char
LEAF_NODE	347:9	347:9	17	unsigned
LEAF_NODE	347:18	347:18	17	char
LEAF_NODE	347:23	347:23	16	*
LEAF_NODE	347:24	347:24	16	)
FUNCTION_CALL	347:25	347:66	16	_TIFFrealloc ( buf , ( tmsize_t ) bytecounts [ t ] )
CALLEE	347:25	347:25	17	_TIFFrealloc
LEAF_NODE	347:25	347:25	18	_TIFFrealloc
LEAF_NODE	347:37	347:37	17	(
ARGUMENT	347:38	347:38	17	buf
FIELD	347:38	347:38	18	buf
LEAF_NODE	347:38	347:38	19	buf
LEAF_NODE	347:41	347:41	17	,
ARGUMENT	347:43	347:53	17	( tmsize_t ) bytecounts [ t ]
LEAF_NODE	347:43	347:43	18	(
TYPE_NAME	347:44	347:44	18	tmsize_t
LEAF_NODE	347:44	347:44	19	tmsize_t
LEAF_NODE	347:52	347:52	18	)
FIELD	347:53	347:65	18	bytecounts [ t ]
LEAF_NODE	347:53	347:53	19	bytecounts
LEAF_NODE	347:63	347:63	19	[
EXPR	347:64	347:64	19	t
FIELD	347:64	347:64	20	t
LEAF_NODE	347:64	347:64	21	t
LEAF_NODE	347:65	347:65	19	]
LEAF_NODE	347:66	347:66	17	)
LEAF_NODE	347:67	347:67	13	;
SELECTION	348:2	349:6	12	
KEYWORD	348:2	348:2	13	if
LEAF_NODE	348:2	348:2	14	if
LEAF_NODE	348:5	348:5	13	(
CONDITION	348:6	348:6	13	! buf
EXPR	348:6	348:6	14	! buf
UNARY_EXPR	348:6	348:7	15	! buf
UNARY_OPERATOR	348:6	348:6	16	!
LEAF_NODE	348:6	348:6	17	!
FIELD	348:7	348:7	16	buf
LEAF_NODE	348:7	348:7	17	buf
LEAF_NODE	348:10	348:10	13	)
STATEMENTS	349:6	349:6	13	
JUMP_STATEMENT	349:6	349:14	14	goto bad ;
KEYWORD	349:6	349:6	15	goto
LEAF_NODE	349:6	349:6	16	goto
DESTINATION	349:11	349:11	15	bad
LEAF_NODE	349:11	349:11	16	bad
LEAF_NODE	349:14	349:14	15	;
EXPR_STATEMENT	350:2	350:35	12	bufsize = ( tmsize_t ) bytecounts [ t ] ;
EXPR	350:2	350:2	13	bufsize = ( tmsize_t ) bytecounts [ t ]
ASSIGN	350:2	350:12	14	bufsize = ( tmsize_t ) bytecounts [ t ]
LVAL	350:2	350:2	15	bufsize
FIELD	350:2	350:2	16	bufsize
LEAF_NODE	350:2	350:2	17	bufsize
ASSIGN_OP	350:10	350:10	15	=
LEAF_NODE	350:10	350:10	16	=
RVAL	350:12	350:22	15	( tmsize_t ) bytecounts [ t ]
LEAF_NODE	350:12	350:12	16	(
TYPE_NAME	350:13	350:13	16	tmsize_t
LEAF_NODE	350:13	350:13	17	tmsize_t
LEAF_NODE	350:21	350:21	16	)
FIELD	350:22	350:34	16	bytecounts [ t ]
LEAF_NODE	350:22	350:22	17	bytecounts
LEAF_NODE	350:32	350:32	17	[
EXPR	350:33	350:33	17	t
FIELD	350:33	350:33	18	t
LEAF_NODE	350:33	350:33	19	t
LEAF_NODE	350:34	350:34	17	]
LEAF_NODE	350:35	350:35	13	;
LEAF_NODE	351:5	351:5	11	}
SELECTION	352:5	353:62	9	
KEYWORD	352:5	352:5	10	if
LEAF_NODE	352:5	352:5	11	if
LEAF_NODE	352:8	352:8	10	(
CONDITION	352:9	352:9	10	TIFFReadRawTile ( in , t , buf , ( tmsize_t ) bytecounts [ t ] ) < 0 || TIFFWriteRawTile ( out , t , buf , ( tmsize_t ) bytecounts [ t ] ) < 0
EXPR	352:9	352:9	11	TIFFReadRawTile ( in , t , buf , ( tmsize_t ) bytecounts [ t ] ) < 0 || TIFFWriteRawTile ( out , t , buf , ( tmsize_t ) bytecounts [ t ] ) < 0
OR	352:9	353:2	12	TIFFReadRawTile ( in , t , buf , ( tmsize_t ) bytecounts [ t ] ) < 0 || TIFFWriteRawTile ( out , t , buf , ( tmsize_t ) bytecounts [ t ] ) < 0
EXPR	352:9	352:64	13	TIFFReadRawTile ( in , t , buf , ( tmsize_t ) bytecounts [ t ] ) < 0
FUNCTION_CALL	352:9	352:60	14	TIFFReadRawTile ( in , t , buf , ( tmsize_t ) bytecounts [ t ] )
CALLEE	352:9	352:9	15	TIFFReadRawTile
LEAF_NODE	352:9	352:9	16	TIFFReadRawTile
LEAF_NODE	352:24	352:24	15	(
ARGUMENT	352:25	352:25	15	in
FIELD	352:25	352:25	16	in
LEAF_NODE	352:25	352:25	17	in
LEAF_NODE	352:27	352:27	15	,
ARGUMENT	352:29	352:29	15	t
FIELD	352:29	352:29	16	t
LEAF_NODE	352:29	352:29	17	t
LEAF_NODE	352:30	352:30	15	,
ARGUMENT	352:32	352:32	15	buf
FIELD	352:32	352:32	16	buf
LEAF_NODE	352:32	352:32	17	buf
LEAF_NODE	352:35	352:35	15	,
ARGUMENT	352:37	352:47	15	( tmsize_t ) bytecounts [ t ]
LEAF_NODE	352:37	352:37	16	(
TYPE_NAME	352:38	352:38	16	tmsize_t
LEAF_NODE	352:38	352:38	17	tmsize_t
LEAF_NODE	352:46	352:46	16	)
FIELD	352:47	352:59	16	bytecounts [ t ]
LEAF_NODE	352:47	352:47	17	bytecounts
LEAF_NODE	352:57	352:57	17	[
EXPR	352:58	352:58	17	t
FIELD	352:58	352:58	18	t
LEAF_NODE	352:58	352:58	19	t
LEAF_NODE	352:59	352:59	17	]
LEAF_NODE	352:60	352:60	15	)
REL_OPERATOR	352:62	352:62	14	<
LEAF_NODE	352:62	352:62	15	<
FIELD	352:64	352:64	14	0
LEAF_NODE	352:64	352:64	15	0
LEAF_NODE	352:66	352:66	13	||
EXPR	353:2	353:59	13	TIFFWriteRawTile ( out , t , buf , ( tmsize_t ) bytecounts [ t ] ) < 0
FUNCTION_CALL	353:2	353:55	14	TIFFWriteRawTile ( out , t , buf , ( tmsize_t ) bytecounts [ t ] )
CALLEE	353:2	353:2	15	TIFFWriteRawTile
LEAF_NODE	353:2	353:2	16	TIFFWriteRawTile
LEAF_NODE	353:18	353:18	15	(
ARGUMENT	353:19	353:19	15	out
FIELD	353:19	353:19	16	out
LEAF_NODE	353:19	353:19	17	out
LEAF_NODE	353:22	353:22	15	,
ARGUMENT	353:24	353:24	15	t
FIELD	353:24	353:24	16	t
LEAF_NODE	353:24	353:24	17	t
LEAF_NODE	353:25	353:25	15	,
ARGUMENT	353:27	353:27	15	buf
FIELD	353:27	353:27	16	buf
LEAF_NODE	353:27	353:27	17	buf
LEAF_NODE	353:30	353:30	15	,
ARGUMENT	353:32	353:42	15	( tmsize_t ) bytecounts [ t ]
LEAF_NODE	353:32	353:32	16	(
TYPE_NAME	353:33	353:33	16	tmsize_t
LEAF_NODE	353:33	353:33	17	tmsize_t
LEAF_NODE	353:41	353:41	16	)
FIELD	353:42	353:54	16	bytecounts [ t ]
LEAF_NODE	353:42	353:42	17	bytecounts
LEAF_NODE	353:52	353:52	17	[
EXPR	353:53	353:53	17	t
FIELD	353:53	353:53	18	t
LEAF_NODE	353:53	353:53	19	t
LEAF_NODE	353:54	353:54	17	]
LEAF_NODE	353:55	353:55	15	)
REL_OPERATOR	353:57	353:57	14	<
LEAF_NODE	353:57	353:57	15	<
FIELD	353:59	353:59	14	0
LEAF_NODE	353:59	353:59	15	0
LEAF_NODE	353:60	353:60	10	)
STATEMENTS	353:62	356:5	10	
LEAF_NODE	353:62	353:62	11	{
STATEMENTS	354:2	355:2	11	
EXPR_STATEMENT	354:2	354:16	12	_TIFFfree ( buf ) ;
EXPR	354:2	354:2	13	_TIFFfree ( buf )
FUNCTION_CALL	354:2	354:15	14	_TIFFfree ( buf )
CALLEE	354:2	354:2	15	_TIFFfree
LEAF_NODE	354:2	354:2	16	_TIFFfree
LEAF_NODE	354:11	354:11	15	(
ARGUMENT	354:12	354:12	15	buf
FIELD	354:12	354:12	16	buf
LEAF_NODE	354:12	354:12	17	buf
LEAF_NODE	354:15	354:15	15	)
LEAF_NODE	354:16	354:16	13	;
JUMP_STATEMENT	355:2	355:10	12	return 0 ;
KEYWORD	355:2	355:2	13	return
LEAF_NODE	355:2	355:2	14	return
DESTINATION	355:9	355:9	13	0
EXPR	355:9	355:9	14	0
FIELD	355:9	355:9	15	0
LEAF_NODE	355:9	355:9	16	0
LEAF_NODE	355:10	355:10	13	;
LEAF_NODE	356:5	356:5	11	}
LEAF_NODE	357:1	357:1	8	}
EXPR_STATEMENT	358:1	358:15	6	_TIFFfree ( buf ) ;
EXPR	358:1	358:1	7	_TIFFfree ( buf )
FUNCTION_CALL	358:1	358:14	8	_TIFFfree ( buf )
CALLEE	358:1	358:1	9	_TIFFfree
LEAF_NODE	358:1	358:1	10	_TIFFfree
LEAF_NODE	358:10	358:10	9	(
ARGUMENT	358:11	358:11	9	buf
FIELD	358:11	358:11	10	buf
LEAF_NODE	358:11	358:11	11	buf
LEAF_NODE	358:14	358:14	9	)
LEAF_NODE	358:15	358:15	7	;
JUMP_STATEMENT	359:1	359:9	6	return 1 ;
KEYWORD	359:1	359:1	7	return
LEAF_NODE	359:1	359:1	8	return
DESTINATION	359:8	359:8	7	1
EXPR	359:8	359:8	8	1
FIELD	359:8	359:8	9	1
LEAF_NODE	359:8	359:8	10	1
LEAF_NODE	359:9	359:9	7	;
LEAF_NODE	360:4	360:4	5	}
LABEL	362:0	362:3	3	bad :
LEAF_NODE	362:0	362:0	4	bad
LEAF_NODE	362:3	362:3	4	:
EXPR_STATEMENT	363:4	364:44	3	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for tile buffer." ) ;
EXPR	363:4	363:4	4	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for tile buffer." )
FUNCTION_CALL	363:4	364:43	5	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for tile buffer." )
CALLEE	363:4	363:4	6	TIFFError
LEAF_NODE	363:4	363:4	7	TIFFError
LEAF_NODE	363:13	363:13	6	(
ARGUMENT	363:14	363:14	6	TIFFFileName ( in )
FUNCTION_CALL	363:14	363:29	7	TIFFFileName ( in )
CALLEE	363:14	363:14	8	TIFFFileName
LEAF_NODE	363:14	363:14	9	TIFFFileName
LEAF_NODE	363:26	363:26	8	(
ARGUMENT	363:27	363:27	8	in
FIELD	363:27	363:27	9	in
LEAF_NODE	363:27	363:27	10	in
LEAF_NODE	363:29	363:29	8	)
LEAF_NODE	363:30	363:30	6	,
ARGUMENT	364:4	364:4	6	"Can't allocate space for tile buffer."
FIELD	364:4	364:4	7	"Can't allocate space for tile buffer."
LEAF_NODE	364:4	364:4	8	"Can't allocate space for tile buffer."
LEAF_NODE	364:43	364:43	6	)
LEAF_NODE	364:44	364:44	4	;
JUMP_STATEMENT	365:1	365:11	3	return ( 0 ) ;
KEYWORD	365:1	365:1	4	return
LEAF_NODE	365:1	365:1	5	return
DESTINATION	365:8	365:8	4	( 0 )
EXPR	365:8	365:10	5	( 0 )
LEAF_NODE	365:8	365:8	6	(
FIELD	365:9	365:9	6	0
LEAF_NODE	365:9	365:9	7	0
LEAF_NODE	365:10	365:10	6	)
LEAF_NODE	365:11	365:11	4	;
LEAF_NODE	366:0	366:0	2	}
FUNCTION_DEF	368:0	380:0	1	
RETURN_TYPE	368:0	368:7	2	static int
LEAF_NODE	368:0	368:0	3	static
TYPE_NAME	368:7	368:7	3	int
LEAF_NODE	368:7	368:7	4	int
FUNCTION_NAME	369:0	369:0	2	cpIFD
LEAF_NODE	369:0	369:0	3	cpIFD
PARAMETER_LIST	369:5	369:25	2	( TIFF * in , TIFF * out )
LEAF_NODE	369:5	369:5	3	(
PARAMETER_DECL	369:6	369:12	3	TIFF * in
TYPE	369:6	369:10	4	TIFF *
TYPE_NAME	369:6	369:6	5	TIFF
LEAF_NODE	369:6	369:6	6	TIFF
POINTER	369:10	369:10	5	*
LEAF_NODE	369:10	369:10	6	*
NAME	369:12	369:12	4	in
LEAF_NODE	369:12	369:12	5	in
LEAF_NODE	369:14	369:14	3	,
PARAMETER_DECL	369:16	369:22	3	TIFF * out
TYPE	369:16	369:20	4	TIFF *
TYPE_NAME	369:16	369:16	5	TIFF
LEAF_NODE	369:16	369:16	6	TIFF
POINTER	369:20	369:20	5	*
LEAF_NODE	369:20	369:20	6	*
NAME	369:22	369:22	4	out
LEAF_NODE	369:22	369:22	5	out
LEAF_NODE	369:25	369:25	3	)
LEAF_NODE	370:0	370:0	2	{
STATEMENTS	371:4	379:4	2	
EXPR_STATEMENT	371:4	371:19	3	cpTags ( in , out ) ;
EXPR	371:4	371:4	4	cpTags ( in , out )
FUNCTION_CALL	371:4	371:18	5	cpTags ( in , out )
CALLEE	371:4	371:4	6	cpTags
LEAF_NODE	371:4	371:4	7	cpTags
LEAF_NODE	371:10	371:10	6	(
ARGUMENT	371:11	371:11	6	in
FIELD	371:11	371:11	7	in
LEAF_NODE	371:11	371:11	8	in
LEAF_NODE	371:13	371:13	6	,
ARGUMENT	371:15	371:15	6	out
FIELD	371:15	371:15	7	out
LEAF_NODE	371:15	371:15	8	out
LEAF_NODE	371:18	371:18	6	)
LEAF_NODE	371:19	371:19	4	;
SELECTION	372:4	372:25	3	
KEYWORD	372:4	372:4	4	if
LEAF_NODE	372:4	372:4	5	if
LEAF_NODE	372:7	372:7	4	(
CONDITION	372:8	372:8	4	TIFFIsTiled ( in )
EXPR	372:8	372:8	5	TIFFIsTiled ( in )
FUNCTION_CALL	372:8	372:22	6	TIFFIsTiled ( in )
CALLEE	372:8	372:8	7	TIFFIsTiled
LEAF_NODE	372:8	372:8	8	TIFFIsTiled
LEAF_NODE	372:19	372:19	7	(
ARGUMENT	372:20	372:20	7	in
FIELD	372:20	372:20	8	in
LEAF_NODE	372:20	372:20	9	in
LEAF_NODE	372:22	372:22	7	)
LEAF_NODE	372:23	372:23	4	)
STATEMENTS	372:25	375:4	4	
LEAF_NODE	372:25	372:25	5	{
STATEMENTS	373:1	373:1	5	
SELECTION	373:1	374:5	6	
KEYWORD	373:1	373:1	7	if
LEAF_NODE	373:1	373:1	8	if
LEAF_NODE	373:4	373:4	7	(
CONDITION	373:5	373:5	7	! cpTiles ( in , out )
EXPR	373:5	373:5	8	! cpTiles ( in , out )
UNARY_EXPR	373:5	373:6	9	! cpTiles ( in , out )
UNARY_OPERATOR	373:5	373:5	10	!
LEAF_NODE	373:5	373:5	11	!
FUNCTION_CALL	373:6	373:21	10	cpTiles ( in , out )
CALLEE	373:6	373:6	11	cpTiles
LEAF_NODE	373:6	373:6	12	cpTiles
LEAF_NODE	373:13	373:13	11	(
ARGUMENT	373:14	373:14	11	in
FIELD	373:14	373:14	12	in
LEAF_NODE	373:14	373:14	13	in
LEAF_NODE	373:16	373:16	11	,
ARGUMENT	373:18	373:18	11	out
FIELD	373:18	373:18	12	out
LEAF_NODE	373:18	373:18	13	out
LEAF_NODE	373:21	373:21	11	)
LEAF_NODE	373:22	373:22	7	)
STATEMENTS	374:5	374:5	7	
JUMP_STATEMENT	374:5	374:15	8	return ( 0 ) ;
KEYWORD	374:5	374:5	9	return
LEAF_NODE	374:5	374:5	10	return
DESTINATION	374:12	374:12	9	( 0 )
EXPR	374:12	374:14	10	( 0 )
LEAF_NODE	374:12	374:12	11	(
FIELD	374:13	374:13	11	0
LEAF_NODE	374:13	374:13	12	0
LEAF_NODE	374:14	374:14	11	)
LEAF_NODE	374:15	374:15	9	;
LEAF_NODE	375:4	375:4	5	}
SELECTION	375:6	375:11	3	
KEYWORD	375:6	375:6	4	else
LEAF_NODE	375:6	375:6	5	else
STATEMENTS	375:11	378:4	4	
LEAF_NODE	375:11	375:11	5	{
STATEMENTS	376:1	376:1	5	
SELECTION	376:1	377:5	6	
KEYWORD	376:1	376:1	7	if
LEAF_NODE	376:1	376:1	8	if
LEAF_NODE	376:4	376:4	7	(
CONDITION	376:5	376:5	7	! cpStrips ( in , out )
EXPR	376:5	376:5	8	! cpStrips ( in , out )
UNARY_EXPR	376:5	376:6	9	! cpStrips ( in , out )
UNARY_OPERATOR	376:5	376:5	10	!
LEAF_NODE	376:5	376:5	11	!
FUNCTION_CALL	376:6	376:22	10	cpStrips ( in , out )
CALLEE	376:6	376:6	11	cpStrips
LEAF_NODE	376:6	376:6	12	cpStrips
LEAF_NODE	376:14	376:14	11	(
ARGUMENT	376:15	376:15	11	in
FIELD	376:15	376:15	12	in
LEAF_NODE	376:15	376:15	13	in
LEAF_NODE	376:17	376:17	11	,
ARGUMENT	376:19	376:19	11	out
FIELD	376:19	376:19	12	out
LEAF_NODE	376:19	376:19	13	out
LEAF_NODE	376:22	376:22	11	)
LEAF_NODE	376:23	376:23	7	)
STATEMENTS	377:5	377:5	7	
JUMP_STATEMENT	377:5	377:15	8	return ( 0 ) ;
KEYWORD	377:5	377:5	9	return
LEAF_NODE	377:5	377:5	10	return
DESTINATION	377:12	377:12	9	( 0 )
EXPR	377:12	377:14	10	( 0 )
LEAF_NODE	377:12	377:12	11	(
FIELD	377:13	377:13	11	0
LEAF_NODE	377:13	377:13	12	0
LEAF_NODE	377:14	377:14	11	)
LEAF_NODE	377:15	377:15	9	;
LEAF_NODE	378:4	378:4	5	}
JUMP_STATEMENT	379:4	379:14	3	return ( 1 ) ;
KEYWORD	379:4	379:4	4	return
LEAF_NODE	379:4	379:4	5	return
DESTINATION	379:11	379:11	4	( 1 )
EXPR	379:11	379:13	5	( 1 )
LEAF_NODE	379:11	379:11	6	(
FIELD	379:12	379:12	6	1
LEAF_NODE	379:12	379:12	7	1
LEAF_NODE	379:13	379:13	6	)
LEAF_NODE	379:14	379:14	4	;
LEAF_NODE	380:0	380:0	2	}
SIMPLE_DECL	382:7	382:25	1	uint16 photometric ;
VAR_DECL	382:7	382:14	2	uint16 photometric
TYPE	382:7	382:7	3	uint16
TYPE_NAME	382:7	382:7	4	uint16
LEAF_NODE	382:7	382:7	5	uint16
NAME	382:14	382:14	3	photometric
LEAF_NODE	382:14	382:14	4	photometric
LEAF_NODE	382:25	382:25	2	;
SIMPLE_DECL	383:7	383:25	1	uint16 filterWidth ;
VAR_DECL	383:7	383:14	2	uint16 filterWidth
TYPE	383:7	383:7	3	uint16
TYPE_NAME	383:7	383:7	4	uint16
LEAF_NODE	383:7	383:7	5	uint16
NAME	383:14	383:14	3	filterWidth
LEAF_NODE	383:14	383:14	4	filterWidth
LEAF_NODE	383:25	383:25	2	;
SIMPLE_DECL	384:7	384:26	1	uint32 stepSrcWidth ;
VAR_DECL	384:7	384:14	2	uint32 stepSrcWidth
TYPE	384:7	384:7	3	uint32
TYPE_NAME	384:7	384:7	4	uint32
LEAF_NODE	384:7	384:7	5	uint32
NAME	384:14	384:14	3	stepSrcWidth
LEAF_NODE	384:14	384:14	4	stepSrcWidth
LEAF_NODE	384:26	384:26	2	;
SIMPLE_DECL	385:7	385:26	1	uint32 stepDstWidth ;
VAR_DECL	385:7	385:14	2	uint32 stepDstWidth
TYPE	385:7	385:7	3	uint32
TYPE_NAME	385:7	385:7	4	uint32
LEAF_NODE	385:7	385:7	5	uint32
NAME	385:14	385:14	3	stepDstWidth
LEAF_NODE	385:14	385:14	4	stepDstWidth
LEAF_NODE	385:26	385:26	2	;
SIMPLE_DECL	386:7	386:18	1	uint8 * src0 ;
VAR_DECL	386:7	386:14	2	uint8 * src0
TYPE	386:7	386:12	3	uint8 *
TYPE_NAME	386:7	386:7	4	uint8
LEAF_NODE	386:7	386:7	5	uint8
POINTER	386:12	386:12	4	*
LEAF_NODE	386:12	386:12	5	*
NAME	386:14	386:14	3	src0
LEAF_NODE	386:14	386:14	4	src0
LEAF_NODE	386:18	386:18	2	;
SIMPLE_DECL	387:7	387:18	1	uint8 * src1 ;
VAR_DECL	387:7	387:14	2	uint8 * src1
TYPE	387:7	387:12	3	uint8 *
TYPE_NAME	387:7	387:7	4	uint8
LEAF_NODE	387:7	387:7	5	uint8
POINTER	387:12	387:12	4	*
LEAF_NODE	387:12	387:12	5	*
NAME	387:14	387:14	3	src1
LEAF_NODE	387:14	387:14	4	src1
LEAF_NODE	387:18	387:18	2	;
SIMPLE_DECL	388:7	388:18	1	uint8 * src2 ;
VAR_DECL	388:7	388:14	2	uint8 * src2
TYPE	388:7	388:12	3	uint8 *
TYPE_NAME	388:7	388:7	4	uint8
LEAF_NODE	388:7	388:7	5	uint8
POINTER	388:12	388:12	4	*
LEAF_NODE	388:12	388:12	5	*
NAME	388:14	388:14	3	src2
LEAF_NODE	388:14	388:14	4	src2
LEAF_NODE	388:18	388:18	2	;
SIMPLE_DECL	389:7	389:21	1	uint32 * rowoff ;
VAR_DECL	389:7	389:15	2	uint32 * rowoff
TYPE	389:7	389:13	3	uint32 *
TYPE_NAME	389:7	389:7	4	uint32
LEAF_NODE	389:7	389:7	5	uint32
POINTER	389:13	389:13	4	*
LEAF_NODE	389:13	389:13	5	*
NAME	389:15	389:15	3	rowoff
LEAF_NODE	389:15	389:15	4	rowoff
LEAF_NODE	389:21	389:21	2	;
SIMPLE_DECL	390:7	390:22	1	uint8 [ 256 ] cmap ;
VAR_DECL	390:7	390:13	2	uint8 [ 256 ] cmap
TYPE	390:7	390:17	3	uint8 [ 256 ]
TYPE_NAME	390:7	390:7	4	uint8
LEAF_NODE	390:7	390:7	5	uint8
TYPE_SUFFIX	390:17	390:21	4	[ 256 ]
LEAF_NODE	390:17	390:17	5	[
FIELD	390:18	390:18	5	256
LEAF_NODE	390:18	390:18	6	256
LEAF_NODE	390:21	390:21	5	]
NAME	390:13	390:13	3	cmap
LEAF_NODE	390:13	390:13	4	cmap
LEAF_NODE	390:22	390:22	2	;
SIMPLE_DECL	391:7	391:22	1	uint8 [ 256 ] bits ;
VAR_DECL	391:7	391:13	2	uint8 [ 256 ] bits
TYPE	391:7	391:17	3	uint8 [ 256 ]
TYPE_NAME	391:7	391:7	4	uint8
LEAF_NODE	391:7	391:7	5	uint8
TYPE_SUFFIX	391:17	391:21	4	[ 256 ]
LEAF_NODE	391:17	391:17	5	[
FIELD	391:18	391:18	5	256
LEAF_NODE	391:18	391:18	6	256
LEAF_NODE	391:21	391:21	5	]
NAME	391:13	391:13	3	bits
LEAF_NODE	391:13	391:13	4	bits
LEAF_NODE	391:22	391:22	2	;
FUNCTION_DEF	393:0	409:0	1	
RETURN_TYPE	393:0	393:7	2	static void
LEAF_NODE	393:0	393:0	3	static
TYPE_NAME	393:7	393:7	3	void
LEAF_NODE	393:7	393:7	4	void
FUNCTION_NAME	394:0	394:0	2	setupBitsTables
LEAF_NODE	394:0	394:0	3	setupBitsTables
PARAMETER_LIST	394:15	394:16	2	( )
LEAF_NODE	394:15	394:15	3	(
LEAF_NODE	394:16	394:16	3	)
LEAF_NODE	395:0	395:0	2	{
STATEMENTS	396:4	397:4	2	
SIMPLE_DECL	396:4	396:9	3	int i ;
VAR_DECL	396:4	396:8	4	int i
TYPE	396:4	396:4	5	int
TYPE_NAME	396:4	396:4	6	int
LEAF_NODE	396:4	396:4	7	int
NAME	396:8	396:8	5	i
LEAF_NODE	396:8	396:8	6	i
LEAF_NODE	396:9	396:9	4	;
ITERATION	397:4	397:30	3	
KEYWORD	397:4	397:4	4	for
LEAF_NODE	397:4	397:4	5	for
LEAF_NODE	397:8	397:8	4	(
FOR_INIT	397:9	397:14	4	i = 0 ;
EXPR	397:9	397:9	5	i = 0
ASSIGN	397:9	397:13	6	i = 0
LVAL	397:9	397:9	7	i
FIELD	397:9	397:9	8	i
LEAF_NODE	397:9	397:9	9	i
ASSIGN_OP	397:11	397:11	7	=
LEAF_NODE	397:11	397:11	8	=
RVAL	397:13	397:13	7	0
FIELD	397:13	397:13	8	0
LEAF_NODE	397:13	397:13	9	0
LEAF_NODE	397:14	397:14	5	;
CONDITION	397:16	397:16	4	i < 256
EXPR	397:16	397:20	5	i < 256
FIELD	397:16	397:16	6	i
LEAF_NODE	397:16	397:16	7	i
REL_OPERATOR	397:18	397:18	6	<
LEAF_NODE	397:18	397:18	7	<
FIELD	397:20	397:20	6	256
LEAF_NODE	397:20	397:20	7	256
LEAF_NODE	397:23	397:23	4	;
FOR_EXPR	397:25	397:25	4	i ++
EXPR	397:25	397:25	5	i ++
FIELD	397:25	397:26	6	i ++
LEAF_NODE	397:25	397:25	7	i
LEAF_NODE	397:26	397:26	7	++
LEAF_NODE	397:28	397:28	4	)
STATEMENTS	397:30	408:4	4	
LEAF_NODE	397:30	397:30	5	{
STATEMENTS	398:1	407:1	5	
SIMPLE_DECL	398:1	398:10	6	int n ; n = 0 ;
VAR_DECL	398:1	398:5	7	int n ; n = 0
TYPE	398:1	398:1	8	int
TYPE_NAME	398:1	398:1	9	int
LEAF_NODE	398:1	398:1	10	int
NAME	398:5	398:5	8	n
LEAF_NODE	398:5	398:5	9	n
LEAF_NODE	0:0	0:0	8	;
INIT	398:5	398:5	8	n = 0
ASSIGN	398:5	398:9	9	n = 0
LVAL	398:5	398:5	10	n
NAME	398:5	398:5	11	n
LEAF_NODE	398:5	398:5	12	n
ASSIGN_OP	398:7	398:7	10	=
LEAF_NODE	398:7	398:7	11	=
RVAL	398:9	398:9	10	0
FIELD	398:9	398:9	11	0
LEAF_NODE	398:9	398:9	12	0
LEAF_NODE	398:10	398:10	7	;
SELECTION	399:1	399:13	6	
KEYWORD	399:1	399:1	7	if
LEAF_NODE	399:1	399:1	8	if
LEAF_NODE	399:4	399:4	7	(
CONDITION	399:5	399:5	7	i & 0x01
EXPR	399:5	399:7	8	i & 0x01
FIELD	399:5	399:5	9	i
LEAF_NODE	399:5	399:5	10	i
LEAF_NODE	399:6	399:6	9	&
FIELD	399:7	399:7	9	0x01
LEAF_NODE	399:7	399:7	10	0x01
LEAF_NODE	399:11	399:11	7	)
STATEMENTS	399:13	399:13	7	
EXPR_STATEMENT	399:13	399:16	8	n ++ ;
EXPR	399:13	399:13	9	n ++
FIELD	399:13	399:14	10	n ++
LEAF_NODE	399:13	399:13	11	n
LEAF_NODE	399:14	399:14	11	++
LEAF_NODE	399:16	399:16	9	;
SELECTION	400:1	400:13	6	
KEYWORD	400:1	400:1	7	if
LEAF_NODE	400:1	400:1	8	if
LEAF_NODE	400:4	400:4	7	(
CONDITION	400:5	400:5	7	i & 0x02
EXPR	400:5	400:7	8	i & 0x02
FIELD	400:5	400:5	9	i
LEAF_NODE	400:5	400:5	10	i
LEAF_NODE	400:6	400:6	9	&
FIELD	400:7	400:7	9	0x02
LEAF_NODE	400:7	400:7	10	0x02
LEAF_NODE	400:11	400:11	7	)
STATEMENTS	400:13	400:13	7	
EXPR_STATEMENT	400:13	400:16	8	n ++ ;
EXPR	400:13	400:13	9	n ++
FIELD	400:13	400:14	10	n ++
LEAF_NODE	400:13	400:13	11	n
LEAF_NODE	400:14	400:14	11	++
LEAF_NODE	400:16	400:16	9	;
SELECTION	401:1	401:13	6	
KEYWORD	401:1	401:1	7	if
LEAF_NODE	401:1	401:1	8	if
LEAF_NODE	401:4	401:4	7	(
CONDITION	401:5	401:5	7	i & 0x04
EXPR	401:5	401:7	8	i & 0x04
FIELD	401:5	401:5	9	i
LEAF_NODE	401:5	401:5	10	i
LEAF_NODE	401:6	401:6	9	&
FIELD	401:7	401:7	9	0x04
LEAF_NODE	401:7	401:7	10	0x04
LEAF_NODE	401:11	401:11	7	)
STATEMENTS	401:13	401:13	7	
EXPR_STATEMENT	401:13	401:16	8	n ++ ;
EXPR	401:13	401:13	9	n ++
FIELD	401:13	401:14	10	n ++
LEAF_NODE	401:13	401:13	11	n
LEAF_NODE	401:14	401:14	11	++
LEAF_NODE	401:16	401:16	9	;
SELECTION	402:1	402:13	6	
KEYWORD	402:1	402:1	7	if
LEAF_NODE	402:1	402:1	8	if
LEAF_NODE	402:4	402:4	7	(
CONDITION	402:5	402:5	7	i & 0x08
EXPR	402:5	402:7	8	i & 0x08
FIELD	402:5	402:5	9	i
LEAF_NODE	402:5	402:5	10	i
LEAF_NODE	402:6	402:6	9	&
FIELD	402:7	402:7	9	0x08
LEAF_NODE	402:7	402:7	10	0x08
LEAF_NODE	402:11	402:11	7	)
STATEMENTS	402:13	402:13	7	
EXPR_STATEMENT	402:13	402:16	8	n ++ ;
EXPR	402:13	402:13	9	n ++
FIELD	402:13	402:14	10	n ++
LEAF_NODE	402:13	402:13	11	n
LEAF_NODE	402:14	402:14	11	++
LEAF_NODE	402:16	402:16	9	;
SELECTION	403:1	403:13	6	
KEYWORD	403:1	403:1	7	if
LEAF_NODE	403:1	403:1	8	if
LEAF_NODE	403:4	403:4	7	(
CONDITION	403:5	403:5	7	i & 0x10
EXPR	403:5	403:7	8	i & 0x10
FIELD	403:5	403:5	9	i
LEAF_NODE	403:5	403:5	10	i
LEAF_NODE	403:6	403:6	9	&
FIELD	403:7	403:7	9	0x10
LEAF_NODE	403:7	403:7	10	0x10
LEAF_NODE	403:11	403:11	7	)
STATEMENTS	403:13	403:13	7	
EXPR_STATEMENT	403:13	403:16	8	n ++ ;
EXPR	403:13	403:13	9	n ++
FIELD	403:13	403:14	10	n ++
LEAF_NODE	403:13	403:13	11	n
LEAF_NODE	403:14	403:14	11	++
LEAF_NODE	403:16	403:16	9	;
SELECTION	404:1	404:13	6	
KEYWORD	404:1	404:1	7	if
LEAF_NODE	404:1	404:1	8	if
LEAF_NODE	404:4	404:4	7	(
CONDITION	404:5	404:5	7	i & 0x20
EXPR	404:5	404:7	8	i & 0x20
FIELD	404:5	404:5	9	i
LEAF_NODE	404:5	404:5	10	i
LEAF_NODE	404:6	404:6	9	&
FIELD	404:7	404:7	9	0x20
LEAF_NODE	404:7	404:7	10	0x20
LEAF_NODE	404:11	404:11	7	)
STATEMENTS	404:13	404:13	7	
EXPR_STATEMENT	404:13	404:16	8	n ++ ;
EXPR	404:13	404:13	9	n ++
FIELD	404:13	404:14	10	n ++
LEAF_NODE	404:13	404:13	11	n
LEAF_NODE	404:14	404:14	11	++
LEAF_NODE	404:16	404:16	9	;
SELECTION	405:1	405:13	6	
KEYWORD	405:1	405:1	7	if
LEAF_NODE	405:1	405:1	8	if
LEAF_NODE	405:4	405:4	7	(
CONDITION	405:5	405:5	7	i & 0x40
EXPR	405:5	405:7	8	i & 0x40
FIELD	405:5	405:5	9	i
LEAF_NODE	405:5	405:5	10	i
LEAF_NODE	405:6	405:6	9	&
FIELD	405:7	405:7	9	0x40
LEAF_NODE	405:7	405:7	10	0x40
LEAF_NODE	405:11	405:11	7	)
STATEMENTS	405:13	405:13	7	
EXPR_STATEMENT	405:13	405:16	8	n ++ ;
EXPR	405:13	405:13	9	n ++
FIELD	405:13	405:14	10	n ++
LEAF_NODE	405:13	405:13	11	n
LEAF_NODE	405:14	405:14	11	++
LEAF_NODE	405:16	405:16	9	;
SELECTION	406:1	406:13	6	
KEYWORD	406:1	406:1	7	if
LEAF_NODE	406:1	406:1	8	if
LEAF_NODE	406:4	406:4	7	(
CONDITION	406:5	406:5	7	i & 0x80
EXPR	406:5	406:7	8	i & 0x80
FIELD	406:5	406:5	9	i
LEAF_NODE	406:5	406:5	10	i
LEAF_NODE	406:6	406:6	9	&
FIELD	406:7	406:7	9	0x80
LEAF_NODE	406:7	406:7	10	0x80
LEAF_NODE	406:11	406:11	7	)
STATEMENTS	406:13	406:13	7	
EXPR_STATEMENT	406:13	406:16	8	n ++ ;
EXPR	406:13	406:13	9	n ++
FIELD	406:13	406:14	10	n ++
LEAF_NODE	406:13	406:13	11	n
LEAF_NODE	406:14	406:14	11	++
LEAF_NODE	406:16	406:16	9	;
EXPR_STATEMENT	407:1	407:12	6	bits [ i ] = n ;
EXPR	407:1	407:1	7	bits [ i ] = n
ASSIGN	407:1	407:11	8	bits [ i ] = n
LVAL	407:1	407:1	9	bits [ i ]
FIELD	407:1	407:7	10	bits [ i ]
LEAF_NODE	407:1	407:1	11	bits
LEAF_NODE	407:5	407:5	11	[
EXPR	407:6	407:6	11	i
FIELD	407:6	407:6	12	i
LEAF_NODE	407:6	407:6	13	i
LEAF_NODE	407:7	407:7	11	]
ASSIGN_OP	407:9	407:9	9	=
LEAF_NODE	407:9	407:9	10	=
RVAL	407:11	407:11	9	n
FIELD	407:11	407:11	10	n
LEAF_NODE	407:11	407:11	11	n
LEAF_NODE	407:12	407:12	7	;
LEAF_NODE	408:4	408:4	5	}
LEAF_NODE	409:0	409:0	2	}
FUNCTION_DEF	411:0	412:57	1	
RETURN_TYPE	411:0	411:7	2	static int
LEAF_NODE	411:0	411:0	3	static
TYPE_NAME	411:7	411:7	3	int
LEAF_NODE	411:7	411:7	4	int
FUNCTION_NAME	411:11	411:11	2	clamp
LEAF_NODE	411:11	411:11	3	clamp
PARAMETER_LIST	411:16	411:43	2	( float v , int low , int high )
LEAF_NODE	411:16	411:16	3	(
PARAMETER_DECL	411:17	411:23	3	float v
TYPE	411:17	411:17	4	float
TYPE_NAME	411:17	411:17	5	float
LEAF_NODE	411:17	411:17	6	float
NAME	411:23	411:23	4	v
LEAF_NODE	411:23	411:23	5	v
LEAF_NODE	411:24	411:24	3	,
PARAMETER_DECL	411:26	411:30	3	int low
TYPE	411:26	411:26	4	int
TYPE_NAME	411:26	411:26	5	int
LEAF_NODE	411:26	411:26	6	int
NAME	411:30	411:30	4	low
LEAF_NODE	411:30	411:30	5	low
LEAF_NODE	411:33	411:33	3	,
PARAMETER_DECL	411:35	411:39	3	int high
TYPE	411:35	411:35	4	int
TYPE_NAME	411:35	411:35	5	int
LEAF_NODE	411:35	411:35	6	int
NAME	411:39	411:39	4	high
LEAF_NODE	411:39	411:39	5	high
LEAF_NODE	411:43	411:43	3	)
LEAF_NODE	412:4	412:4	2	{
STATEMENTS	412:6	412:6	2	
JUMP_STATEMENT	412:6	412:55	3	return ( v < low ? low : v > high ? high : ( int ) v ) ;
KEYWORD	412:6	412:6	4	return
LEAF_NODE	412:6	412:6	5	return
DESTINATION	412:13	412:13	4	( v < low ? low : v > high ? high : ( int ) v )
EXPR	412:13	412:54	5	( v < low ? low : v > high ? high : ( int ) v )
LEAF_NODE	412:13	412:13	6	(
COND_EXPR	412:14	412:30	6	v < low ? low : v > high ? high : ( int ) v
CONDITION	412:14	412:18	7	v < low
FIELD	412:14	412:14	8	v
LEAF_NODE	412:14	412:14	9	v
REL_OPERATOR	412:16	412:16	8	<
LEAF_NODE	412:16	412:16	9	<
FIELD	412:18	412:18	8	low
LEAF_NODE	412:18	412:18	9	low
LEAF_NODE	412:22	412:22	7	?
EXPR	412:24	412:24	7	low
FIELD	412:24	412:24	8	low
LEAF_NODE	412:24	412:24	9	low
LEAF_NODE	412:28	412:28	7	:
COND_EXPR	412:30	412:53	7	v > high ? high : ( int ) v
CONDITION	412:30	412:34	8	v > high
FIELD	412:30	412:30	9	v
LEAF_NODE	412:30	412:30	10	v
REL_OPERATOR	412:32	412:32	9	>
LEAF_NODE	412:32	412:32	10	>
FIELD	412:34	412:34	9	high
LEAF_NODE	412:34	412:34	10	high
LEAF_NODE	412:39	412:39	8	?
EXPR	412:41	412:41	8	high
FIELD	412:41	412:41	9	high
LEAF_NODE	412:41	412:41	10	high
LEAF_NODE	412:46	412:46	8	:
LEAF_NODE	412:48	412:48	8	(
TYPE_NAME	412:49	412:49	8	int
LEAF_NODE	412:49	412:49	9	int
LEAF_NODE	412:52	412:52	8	)
FIELD	412:53	412:53	8	v
LEAF_NODE	412:53	412:53	9	v
LEAF_NODE	412:54	412:54	6	)
LEAF_NODE	412:55	412:55	4	;
LEAF_NODE	412:57	412:57	2	}
FUNCTION_DEF	418:0	427:0	1	
RETURN_TYPE	418:0	418:7	2	static void
LEAF_NODE	418:0	418:0	3	static
TYPE_NAME	418:7	418:7	3	void
LEAF_NODE	418:7	418:7	4	void
FUNCTION_NAME	419:0	419:0	2	expFill
LEAF_NODE	419:0	419:0	3	expFill
PARAMETER_LIST	419:7	419:39	2	( float [ ] pct , uint32 p , uint32 n )
LEAF_NODE	419:7	419:7	3	(
PARAMETER_DECL	419:8	419:14	3	float [ ] pct
TYPE	419:8	419:17	4	float [ ]
TYPE_NAME	419:8	419:8	5	float
LEAF_NODE	419:8	419:8	6	float
TYPE_SUFFIX	419:17	419:18	5	[ ]
LEAF_NODE	419:17	419:17	6	[
LEAF_NODE	419:18	419:18	6	]
NAME	419:14	419:14	4	pct
LEAF_NODE	419:14	419:14	5	pct
LEAF_NODE	419:19	419:19	3	,
PARAMETER_DECL	419:21	419:28	3	uint32 p
TYPE	419:21	419:21	4	uint32
TYPE_NAME	419:21	419:21	5	uint32
LEAF_NODE	419:21	419:21	6	uint32
NAME	419:28	419:28	4	p
LEAF_NODE	419:28	419:28	5	p
LEAF_NODE	419:29	419:29	3	,
PARAMETER_DECL	419:31	419:38	3	uint32 n
TYPE	419:31	419:31	4	uint32
TYPE_NAME	419:31	419:31	5	uint32
LEAF_NODE	419:31	419:31	6	uint32
NAME	419:38	419:38	4	n
LEAF_NODE	419:38	419:38	5	n
LEAF_NODE	419:39	419:39	3	)
LEAF_NODE	420:0	420:0	2	{
STATEMENTS	421:4	425:4	2	
SIMPLE_DECL	421:4	421:12	3	uint32 i ;
VAR_DECL	421:4	421:11	4	uint32 i
TYPE	421:4	421:4	5	uint32
TYPE_NAME	421:4	421:4	6	uint32
LEAF_NODE	421:4	421:4	7	uint32
NAME	421:11	421:11	5	i
LEAF_NODE	421:11	421:11	6	i
LEAF_NODE	421:12	421:12	4	;
SIMPLE_DECL	422:4	422:28	3	uint32 c ; c = ( p * n ) / 100 ;
VAR_DECL	422:4	422:11	4	uint32 c ; c = ( p * n ) / 100
TYPE	422:4	422:4	5	uint32
TYPE_NAME	422:4	422:4	6	uint32
LEAF_NODE	422:4	422:4	7	uint32
NAME	422:11	422:11	5	c
LEAF_NODE	422:11	422:11	6	c
LEAF_NODE	0:0	0:0	5	;
INIT	422:11	422:11	5	c = ( p * n ) / 100
ASSIGN	422:11	422:15	6	c = ( p * n ) / 100
LVAL	422:11	422:11	7	c
NAME	422:11	422:11	8	c
LEAF_NODE	422:11	422:11	9	c
ASSIGN_OP	422:13	422:13	7	=
LEAF_NODE	422:13	422:13	8	=
RVAL	422:15	422:25	7	( p * n ) / 100
LEAF_NODE	422:15	422:15	8	(
FIELD	422:16	422:16	8	p
LEAF_NODE	422:16	422:16	9	p
LEAF_NODE	422:18	422:18	8	*
FIELD	422:20	422:20	8	n
LEAF_NODE	422:20	422:20	9	n
LEAF_NODE	422:21	422:21	8	)
LEAF_NODE	422:23	422:23	8	/
FIELD	422:25	422:25	8	100
LEAF_NODE	422:25	422:25	9	100
LEAF_NODE	422:28	422:28	4	;
ITERATION	423:4	424:1	3	
KEYWORD	423:4	423:4	4	for
LEAF_NODE	423:4	423:4	5	for
LEAF_NODE	423:8	423:8	4	(
FOR_INIT	423:9	423:14	4	i = 1 ;
EXPR	423:9	423:9	5	i = 1
ASSIGN	423:9	423:13	6	i = 1
LVAL	423:9	423:9	7	i
FIELD	423:9	423:9	8	i
LEAF_NODE	423:9	423:9	9	i
ASSIGN_OP	423:11	423:11	7	=
LEAF_NODE	423:11	423:11	8	=
RVAL	423:13	423:13	7	1
FIELD	423:13	423:13	8	1
LEAF_NODE	423:13	423:13	9	1
LEAF_NODE	423:14	423:14	5	;
CONDITION	423:16	423:16	4	i < c
EXPR	423:16	423:20	5	i < c
FIELD	423:16	423:16	6	i
LEAF_NODE	423:16	423:16	7	i
REL_OPERATOR	423:18	423:18	6	<
LEAF_NODE	423:18	423:18	7	<
FIELD	423:20	423:20	6	c
LEAF_NODE	423:20	423:20	7	c
LEAF_NODE	423:21	423:21	4	;
FOR_EXPR	423:23	423:23	4	i ++
EXPR	423:23	423:23	5	i ++
FIELD	423:23	423:24	6	i ++
LEAF_NODE	423:23	423:23	7	i
LEAF_NODE	423:24	423:24	7	++
LEAF_NODE	423:26	423:26	4	)
STATEMENTS	424:1	424:1	4	
EXPR_STATEMENT	424:1	424:49	5	pct [ i ] = ( float ) ( 1 - exp ( i / ( ( double ) ( n - 1 ) ) ) / M_E ) ;
EXPR	424:1	424:1	6	pct [ i ] = ( float ) ( 1 - exp ( i / ( ( double ) ( n - 1 ) ) ) / M_E )
ASSIGN	424:1	424:10	7	pct [ i ] = ( float ) ( 1 - exp ( i / ( ( double ) ( n - 1 ) ) ) / M_E )
LVAL	424:1	424:1	8	pct [ i ]
FIELD	424:1	424:6	9	pct [ i ]
LEAF_NODE	424:1	424:1	10	pct
LEAF_NODE	424:4	424:4	10	[
EXPR	424:5	424:5	10	i
FIELD	424:5	424:5	11	i
LEAF_NODE	424:5	424:5	12	i
LEAF_NODE	424:6	424:6	10	]
ASSIGN_OP	424:8	424:8	8	=
LEAF_NODE	424:8	424:8	9	=
RVAL	424:10	424:48	8	( float ) ( 1 - exp ( i / ( ( double ) ( n - 1 ) ) ) / M_E )
LEAF_NODE	424:10	424:10	9	(
TYPE_NAME	424:11	424:11	9	float
LEAF_NODE	424:11	424:11	10	float
LEAF_NODE	424:16	424:16	9	)
LEAF_NODE	424:18	424:18	9	(
FIELD	424:19	424:19	9	1
LEAF_NODE	424:19	424:19	10	1
LEAF_NODE	424:20	424:20	9	-
FUNCTION_CALL	424:21	424:42	9	exp ( i / ( ( double ) ( n - 1 ) ) )
CALLEE	424:21	424:21	10	exp
LEAF_NODE	424:21	424:21	11	exp
LEAF_NODE	424:24	424:24	10	(
ARGUMENT	424:25	424:41	10	i / ( ( double ) ( n - 1 ) )
FIELD	424:25	424:25	11	i
LEAF_NODE	424:25	424:25	12	i
LEAF_NODE	424:26	424:26	11	/
LEAF_NODE	424:27	424:27	11	(
LEAF_NODE	424:28	424:28	11	(
TYPE_NAME	424:29	424:29	11	double
LEAF_NODE	424:29	424:29	12	double
LEAF_NODE	424:35	424:35	11	)
LEAF_NODE	424:36	424:36	11	(
FIELD	424:37	424:37	11	n
LEAF_NODE	424:37	424:37	12	n
LEAF_NODE	424:38	424:38	11	-
FIELD	424:39	424:39	11	1
LEAF_NODE	424:39	424:39	12	1
LEAF_NODE	424:40	424:40	11	)
LEAF_NODE	424:41	424:41	11	)
LEAF_NODE	424:42	424:42	10	)
LEAF_NODE	424:43	424:43	9	/
FIELD	424:45	424:45	9	M_E
LEAF_NODE	424:45	424:45	10	M_E
LEAF_NODE	424:48	424:48	9	)
LEAF_NODE	424:49	424:49	6	;
ITERATION	425:4	426:1	3	
KEYWORD	425:4	425:4	4	for
LEAF_NODE	425:4	425:4	5	for
LEAF_NODE	425:8	425:8	4	(
FOR_INIT	425:9	425:9	4	;
LEAF_NODE	425:9	425:9	5	;
CONDITION	425:11	425:11	4	i < n
EXPR	425:11	425:15	5	i < n
FIELD	425:11	425:11	6	i
LEAF_NODE	425:11	425:11	7	i
REL_OPERATOR	425:13	425:13	6	<
LEAF_NODE	425:13	425:13	7	<
FIELD	425:15	425:15	6	n
LEAF_NODE	425:15	425:15	7	n
LEAF_NODE	425:16	425:16	4	;
FOR_EXPR	425:18	425:18	4	i ++
EXPR	425:18	425:18	5	i ++
FIELD	425:18	425:19	6	i ++
LEAF_NODE	425:18	425:18	7	i
LEAF_NODE	425:19	425:19	7	++
LEAF_NODE	425:21	425:21	4	)
STATEMENTS	426:1	426:1	4	
EXPR_STATEMENT	426:1	426:12	5	pct [ i ] = 0. ;
EXPR	426:1	426:1	6	pct [ i ] = 0.
ASSIGN	426:1	426:10	7	pct [ i ] = 0.
LVAL	426:1	426:1	8	pct [ i ]
FIELD	426:1	426:6	9	pct [ i ]
LEAF_NODE	426:1	426:1	10	pct
LEAF_NODE	426:4	426:4	10	[
EXPR	426:5	426:5	10	i
FIELD	426:5	426:5	11	i
LEAF_NODE	426:5	426:5	12	i
LEAF_NODE	426:6	426:6	10	]
ASSIGN_OP	426:8	426:8	8	=
LEAF_NODE	426:8	426:8	9	=
RVAL	426:10	426:10	8	0.
FIELD	426:10	426:10	9	0.
LEAF_NODE	426:10	426:10	10	0.
LEAF_NODE	426:12	426:12	6	;
LEAF_NODE	427:0	427:0	2	}
FUNCTION_DEF	429:0	457:0	1	
RETURN_TYPE	429:0	429:7	2	static void
LEAF_NODE	429:0	429:0	3	static
TYPE_NAME	429:7	429:7	3	void
LEAF_NODE	429:7	429:7	4	void
FUNCTION_NAME	430:0	430:0	2	setupCmap
LEAF_NODE	430:0	430:0	3	setupCmap
PARAMETER_LIST	430:9	430:10	2	( )
LEAF_NODE	430:9	430:9	3	(
LEAF_NODE	430:10	430:10	3	)
LEAF_NODE	431:0	431:0	2	{
STATEMENTS	432:4	447:4	2	
SIMPLE_DECL	432:4	432:18	3	float [ 256 ] pct ;
VAR_DECL	432:4	432:10	4	float [ 256 ] pct
TYPE	432:4	432:13	5	float [ 256 ]
TYPE_NAME	432:4	432:4	6	float
LEAF_NODE	432:4	432:4	7	float
TYPE_SUFFIX	432:13	432:17	6	[ 256 ]
LEAF_NODE	432:13	432:13	7	[
FIELD	432:14	432:14	7	256
LEAF_NODE	432:14	432:14	8	256
LEAF_NODE	432:17	432:17	7	]
NAME	432:10	432:10	5	pct
LEAF_NODE	432:10	432:10	6	pct
LEAF_NODE	432:18	432:18	4	;
SIMPLE_DECL	433:4	433:12	3	uint32 i ;
VAR_DECL	433:4	433:11	4	uint32 i
TYPE	433:4	433:4	5	uint32
TYPE_NAME	433:4	433:4	6	uint32
LEAF_NODE	433:4	433:4	7	uint32
NAME	433:11	433:11	5	i
LEAF_NODE	433:11	433:11	6	i
LEAF_NODE	433:12	433:12	4	;
EXPR_STATEMENT	434:4	434:14	3	pct [ 0 ] = 1 ;
EXPR	434:4	434:4	4	pct [ 0 ] = 1
ASSIGN	434:4	434:13	5	pct [ 0 ] = 1
LVAL	434:4	434:4	6	pct [ 0 ]
FIELD	434:4	434:9	7	pct [ 0 ]
LEAF_NODE	434:4	434:4	8	pct
LEAF_NODE	434:7	434:7	8	[
EXPR	434:8	434:8	8	0
FIELD	434:8	434:8	9	0
LEAF_NODE	434:8	434:8	10	0
LEAF_NODE	434:9	434:9	8	]
ASSIGN_OP	434:11	434:11	6	=
LEAF_NODE	434:11	434:11	7	=
RVAL	434:13	434:13	6	1
FIELD	434:13	434:13	7	1
LEAF_NODE	434:13	434:13	8	1
LEAF_NODE	434:14	434:14	4	;
SELECTION	435:4	435:22	3	
KEYWORD	435:4	435:4	4	switch
LEAF_NODE	435:4	435:4	5	switch
LEAF_NODE	435:11	435:11	4	(
CONDITION	435:12	435:12	4	contrast
EXPR	435:12	435:12	5	contrast
FIELD	435:12	435:12	6	contrast
LEAF_NODE	435:12	435:12	7	contrast
LEAF_NODE	435:20	435:20	4	)
STATEMENTS	435:22	446:4	4	
LEAF_NODE	435:22	435:22	5	{
STATEMENTS	436:4	445:1	5	
LABEL	436:4	436:14	6	case EXP50 :
LEAF_NODE	436:4	436:4	7	case
LEAF_NODE	436:9	436:9	7	EXP50
LEAF_NODE	436:14	436:14	7	:
EXPR_STATEMENT	436:16	436:37	6	expFill ( pct , 50 , 256 ) ;
EXPR	436:16	436:16	7	expFill ( pct , 50 , 256 )
FUNCTION_CALL	436:16	436:36	8	expFill ( pct , 50 , 256 )
CALLEE	436:16	436:16	9	expFill
LEAF_NODE	436:16	436:16	10	expFill
LEAF_NODE	436:23	436:23	9	(
ARGUMENT	436:24	436:24	9	pct
FIELD	436:24	436:24	10	pct
LEAF_NODE	436:24	436:24	11	pct
LEAF_NODE	436:27	436:27	9	,
ARGUMENT	436:29	436:29	9	50
FIELD	436:29	436:29	10	50
LEAF_NODE	436:29	436:29	11	50
LEAF_NODE	436:31	436:31	9	,
ARGUMENT	436:33	436:33	9	256
FIELD	436:33	436:33	10	256
LEAF_NODE	436:33	436:33	11	256
LEAF_NODE	436:36	436:36	9	)
LEAF_NODE	436:37	436:37	7	;
JUMP_STATEMENT	436:39	436:44	6	break DESTINATION ;
KEYWORD	436:39	436:39	7	break
LEAF_NODE	436:39	436:39	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	436:44	436:44	7	;
LABEL	437:4	437:14	6	case EXP60 :
LEAF_NODE	437:4	437:4	7	case
LEAF_NODE	437:9	437:9	7	EXP60
LEAF_NODE	437:14	437:14	7	:
EXPR_STATEMENT	437:16	437:37	6	expFill ( pct , 60 , 256 ) ;
EXPR	437:16	437:16	7	expFill ( pct , 60 , 256 )
FUNCTION_CALL	437:16	437:36	8	expFill ( pct , 60 , 256 )
CALLEE	437:16	437:16	9	expFill
LEAF_NODE	437:16	437:16	10	expFill
LEAF_NODE	437:23	437:23	9	(
ARGUMENT	437:24	437:24	9	pct
FIELD	437:24	437:24	10	pct
LEAF_NODE	437:24	437:24	11	pct
LEAF_NODE	437:27	437:27	9	,
ARGUMENT	437:29	437:29	9	60
FIELD	437:29	437:29	10	60
LEAF_NODE	437:29	437:29	11	60
LEAF_NODE	437:31	437:31	9	,
ARGUMENT	437:33	437:33	9	256
FIELD	437:33	437:33	10	256
LEAF_NODE	437:33	437:33	11	256
LEAF_NODE	437:36	437:36	9	)
LEAF_NODE	437:37	437:37	7	;
JUMP_STATEMENT	437:39	437:44	6	break DESTINATION ;
KEYWORD	437:39	437:39	7	break
LEAF_NODE	437:39	437:39	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	437:44	437:44	7	;
LABEL	438:4	438:14	6	case EXP70 :
LEAF_NODE	438:4	438:4	7	case
LEAF_NODE	438:9	438:9	7	EXP70
LEAF_NODE	438:14	438:14	7	:
EXPR_STATEMENT	438:16	438:37	6	expFill ( pct , 70 , 256 ) ;
EXPR	438:16	438:16	7	expFill ( pct , 70 , 256 )
FUNCTION_CALL	438:16	438:36	8	expFill ( pct , 70 , 256 )
CALLEE	438:16	438:16	9	expFill
LEAF_NODE	438:16	438:16	10	expFill
LEAF_NODE	438:23	438:23	9	(
ARGUMENT	438:24	438:24	9	pct
FIELD	438:24	438:24	10	pct
LEAF_NODE	438:24	438:24	11	pct
LEAF_NODE	438:27	438:27	9	,
ARGUMENT	438:29	438:29	9	70
FIELD	438:29	438:29	10	70
LEAF_NODE	438:29	438:29	11	70
LEAF_NODE	438:31	438:31	9	,
ARGUMENT	438:33	438:33	9	256
FIELD	438:33	438:33	10	256
LEAF_NODE	438:33	438:33	11	256
LEAF_NODE	438:36	438:36	9	)
LEAF_NODE	438:37	438:37	7	;
JUMP_STATEMENT	438:39	438:44	6	break DESTINATION ;
KEYWORD	438:39	438:39	7	break
LEAF_NODE	438:39	438:39	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	438:44	438:44	7	;
LABEL	439:4	439:14	6	case EXP80 :
LEAF_NODE	439:4	439:4	7	case
LEAF_NODE	439:9	439:9	7	EXP80
LEAF_NODE	439:14	439:14	7	:
EXPR_STATEMENT	439:16	439:37	6	expFill ( pct , 80 , 256 ) ;
EXPR	439:16	439:16	7	expFill ( pct , 80 , 256 )
FUNCTION_CALL	439:16	439:36	8	expFill ( pct , 80 , 256 )
CALLEE	439:16	439:16	9	expFill
LEAF_NODE	439:16	439:16	10	expFill
LEAF_NODE	439:23	439:23	9	(
ARGUMENT	439:24	439:24	9	pct
FIELD	439:24	439:24	10	pct
LEAF_NODE	439:24	439:24	11	pct
LEAF_NODE	439:27	439:27	9	,
ARGUMENT	439:29	439:29	9	80
FIELD	439:29	439:29	10	80
LEAF_NODE	439:29	439:29	11	80
LEAF_NODE	439:31	439:31	9	,
ARGUMENT	439:33	439:33	9	256
FIELD	439:33	439:33	10	256
LEAF_NODE	439:33	439:33	11	256
LEAF_NODE	439:36	439:36	9	)
LEAF_NODE	439:37	439:37	7	;
JUMP_STATEMENT	439:39	439:44	6	break DESTINATION ;
KEYWORD	439:39	439:39	7	break
LEAF_NODE	439:39	439:39	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	439:44	439:44	7	;
LABEL	440:4	440:14	6	case EXP90 :
LEAF_NODE	440:4	440:4	7	case
LEAF_NODE	440:9	440:9	7	EXP90
LEAF_NODE	440:14	440:14	7	:
EXPR_STATEMENT	440:16	440:37	6	expFill ( pct , 90 , 256 ) ;
EXPR	440:16	440:16	7	expFill ( pct , 90 , 256 )
FUNCTION_CALL	440:16	440:36	8	expFill ( pct , 90 , 256 )
CALLEE	440:16	440:16	9	expFill
LEAF_NODE	440:16	440:16	10	expFill
LEAF_NODE	440:23	440:23	9	(
ARGUMENT	440:24	440:24	9	pct
FIELD	440:24	440:24	10	pct
LEAF_NODE	440:24	440:24	11	pct
LEAF_NODE	440:27	440:27	9	,
ARGUMENT	440:29	440:29	9	90
FIELD	440:29	440:29	10	90
LEAF_NODE	440:29	440:29	11	90
LEAF_NODE	440:31	440:31	9	,
ARGUMENT	440:33	440:33	9	256
FIELD	440:33	440:33	10	256
LEAF_NODE	440:33	440:33	11	256
LEAF_NODE	440:36	440:36	9	)
LEAF_NODE	440:37	440:37	7	;
JUMP_STATEMENT	440:39	440:44	6	break DESTINATION ;
KEYWORD	440:39	440:39	7	break
LEAF_NODE	440:39	440:39	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	440:44	440:44	7	;
LABEL	441:4	441:12	6	case EXP :
LEAF_NODE	441:4	441:4	7	case
LEAF_NODE	441:9	441:9	7	EXP
LEAF_NODE	441:12	441:12	7	:
EXPR_STATEMENT	441:14	441:36	6	expFill ( pct , 100 , 256 ) ;
EXPR	441:14	441:14	7	expFill ( pct , 100 , 256 )
FUNCTION_CALL	441:14	441:35	8	expFill ( pct , 100 , 256 )
CALLEE	441:14	441:14	9	expFill
LEAF_NODE	441:14	441:14	10	expFill
LEAF_NODE	441:21	441:21	9	(
ARGUMENT	441:22	441:22	9	pct
FIELD	441:22	441:22	10	pct
LEAF_NODE	441:22	441:22	11	pct
LEAF_NODE	441:25	441:25	9	,
ARGUMENT	441:27	441:27	9	100
FIELD	441:27	441:27	10	100
LEAF_NODE	441:27	441:27	11	100
LEAF_NODE	441:30	441:30	9	,
ARGUMENT	441:32	441:32	9	256
FIELD	441:32	441:32	10	256
LEAF_NODE	441:32	441:32	11	256
LEAF_NODE	441:35	441:35	9	)
LEAF_NODE	441:36	441:36	7	;
JUMP_STATEMENT	441:38	441:43	6	break DESTINATION ;
KEYWORD	441:38	441:38	7	break
LEAF_NODE	441:38	441:38	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	441:43	441:43	7	;
LABEL	442:4	442:15	6	case LINEAR :
LEAF_NODE	442:4	442:4	7	case
LEAF_NODE	442:9	442:9	7	LINEAR
LEAF_NODE	442:15	442:15	7	:
ITERATION	443:1	444:5	6	
KEYWORD	443:1	443:1	7	for
LEAF_NODE	443:1	443:1	8	for
LEAF_NODE	443:5	443:5	7	(
FOR_INIT	443:6	443:11	7	i = 1 ;
EXPR	443:6	443:6	8	i = 1
ASSIGN	443:6	443:10	9	i = 1
LVAL	443:6	443:6	10	i
FIELD	443:6	443:6	11	i
LEAF_NODE	443:6	443:6	12	i
ASSIGN_OP	443:8	443:8	10	=
LEAF_NODE	443:8	443:8	11	=
RVAL	443:10	443:10	10	1
FIELD	443:10	443:10	11	1
LEAF_NODE	443:10	443:10	12	1
LEAF_NODE	443:11	443:11	8	;
CONDITION	443:13	443:13	7	i < 256
EXPR	443:13	443:17	8	i < 256
FIELD	443:13	443:13	9	i
LEAF_NODE	443:13	443:13	10	i
REL_OPERATOR	443:15	443:15	9	<
LEAF_NODE	443:15	443:15	10	<
FIELD	443:17	443:17	9	256
LEAF_NODE	443:17	443:17	10	256
LEAF_NODE	443:20	443:20	7	;
FOR_EXPR	443:22	443:22	7	i ++
EXPR	443:22	443:22	8	i ++
FIELD	443:22	443:23	9	i ++
LEAF_NODE	443:22	443:22	10	i
LEAF_NODE	443:23	443:23	10	++
LEAF_NODE	443:25	443:25	7	)
STATEMENTS	444:5	444:5	7	
EXPR_STATEMENT	444:5	444:34	8	pct [ i ] = 1 - ( ( float ) i ) / ( 256 - 1 ) ;
EXPR	444:5	444:5	9	pct [ i ] = 1 - ( ( float ) i ) / ( 256 - 1 )
ASSIGN	444:5	444:14	10	pct [ i ] = 1 - ( ( float ) i ) / ( 256 - 1 )
LVAL	444:5	444:5	11	pct [ i ]
FIELD	444:5	444:10	12	pct [ i ]
LEAF_NODE	444:5	444:5	13	pct
LEAF_NODE	444:8	444:8	13	[
EXPR	444:9	444:9	13	i
FIELD	444:9	444:9	14	i
LEAF_NODE	444:9	444:9	15	i
LEAF_NODE	444:10	444:10	13	]
ASSIGN_OP	444:12	444:12	11	=
LEAF_NODE	444:12	444:12	12	=
RVAL	444:14	444:33	11	1 - ( ( float ) i ) / ( 256 - 1 )
FIELD	444:14	444:14	12	1
LEAF_NODE	444:14	444:14	13	1
LEAF_NODE	444:15	444:15	12	-
LEAF_NODE	444:16	444:16	12	(
LEAF_NODE	444:17	444:17	12	(
TYPE_NAME	444:18	444:18	12	float
LEAF_NODE	444:18	444:18	13	float
LEAF_NODE	444:23	444:23	12	)
FIELD	444:24	444:24	12	i
LEAF_NODE	444:24	444:24	13	i
LEAF_NODE	444:25	444:25	12	)
LEAF_NODE	444:26	444:26	12	/
LEAF_NODE	444:27	444:27	12	(
FIELD	444:28	444:28	12	256
LEAF_NODE	444:28	444:28	13	256
LEAF_NODE	444:31	444:31	12	-
FIELD	444:32	444:32	12	1
LEAF_NODE	444:32	444:32	13	1
LEAF_NODE	444:33	444:33	12	)
LEAF_NODE	444:34	444:34	9	;
JUMP_STATEMENT	445:1	445:6	6	break DESTINATION ;
KEYWORD	445:1	445:1	7	break
LEAF_NODE	445:1	445:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	445:6	445:6	7	;
LEAF_NODE	446:4	446:4	5	}
SELECTION	447:4	447:25	3	
KEYWORD	447:4	447:4	4	switch
LEAF_NODE	447:4	447:4	5	switch
LEAF_NODE	447:11	447:11	4	(
CONDITION	447:12	447:12	4	photometric
EXPR	447:12	447:12	5	photometric
FIELD	447:12	447:12	6	photometric
LEAF_NODE	447:12	447:12	7	photometric
LEAF_NODE	447:23	447:23	4	)
STATEMENTS	447:25	456:4	4	
LEAF_NODE	447:25	447:25	5	{
STATEMENTS	448:4	455:1	5	
LABEL	448:4	448:31	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	448:4	448:4	7	case
LEAF_NODE	448:9	448:9	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	448:31	448:31	7	:
ITERATION	449:1	450:5	6	
KEYWORD	449:1	449:1	7	for
LEAF_NODE	449:1	449:1	8	for
LEAF_NODE	449:5	449:5	7	(
FOR_INIT	449:6	449:11	7	i = 0 ;
EXPR	449:6	449:6	8	i = 0
ASSIGN	449:6	449:10	9	i = 0
LVAL	449:6	449:6	10	i
FIELD	449:6	449:6	11	i
LEAF_NODE	449:6	449:6	12	i
ASSIGN_OP	449:8	449:8	10	=
LEAF_NODE	449:8	449:8	11	=
RVAL	449:10	449:10	10	0
FIELD	449:10	449:10	11	0
LEAF_NODE	449:10	449:10	12	0
LEAF_NODE	449:11	449:11	8	;
CONDITION	449:13	449:13	7	i < 256
EXPR	449:13	449:17	8	i < 256
FIELD	449:13	449:13	9	i
LEAF_NODE	449:13	449:13	10	i
REL_OPERATOR	449:15	449:15	9	<
LEAF_NODE	449:15	449:15	10	<
FIELD	449:17	449:17	9	256
LEAF_NODE	449:17	449:17	10	256
LEAF_NODE	449:20	449:20	7	;
FOR_EXPR	449:22	449:22	7	i ++
EXPR	449:22	449:22	8	i ++
FIELD	449:22	449:23	9	i ++
LEAF_NODE	449:22	449:22	10	i
LEAF_NODE	449:23	449:23	10	++
LEAF_NODE	449:25	449:25	7	)
STATEMENTS	450:5	450:5	7	
EXPR_STATEMENT	450:5	450:48	8	cmap [ i ] = clamp ( 255 * pct [ ( 256 - 1 ) - i ] , 0 , 255 ) ;
EXPR	450:5	450:5	9	cmap [ i ] = clamp ( 255 * pct [ ( 256 - 1 ) - i ] , 0 , 255 )
ASSIGN	450:5	450:15	10	cmap [ i ] = clamp ( 255 * pct [ ( 256 - 1 ) - i ] , 0 , 255 )
LVAL	450:5	450:5	11	cmap [ i ]
FIELD	450:5	450:11	12	cmap [ i ]
LEAF_NODE	450:5	450:5	13	cmap
LEAF_NODE	450:9	450:9	13	[
EXPR	450:10	450:10	13	i
FIELD	450:10	450:10	14	i
LEAF_NODE	450:10	450:10	15	i
LEAF_NODE	450:11	450:11	13	]
ASSIGN_OP	450:13	450:13	11	=
LEAF_NODE	450:13	450:13	12	=
RVAL	450:15	450:15	11	clamp ( 255 * pct [ ( 256 - 1 ) - i ] , 0 , 255 )
FUNCTION_CALL	450:15	450:47	12	clamp ( 255 * pct [ ( 256 - 1 ) - i ] , 0 , 255 )
CALLEE	450:15	450:15	13	clamp
LEAF_NODE	450:15	450:15	14	clamp
LEAF_NODE	450:20	450:20	13	(
ARGUMENT	450:21	450:25	13	255 * pct [ ( 256 - 1 ) - i ]
FIELD	450:21	450:21	14	255
LEAF_NODE	450:21	450:21	15	255
LEAF_NODE	450:24	450:24	14	*
FIELD	450:25	450:38	14	pct [ ( 256 - 1 ) - i ]
LEAF_NODE	450:25	450:25	15	pct
LEAF_NODE	450:28	450:28	15	[
EXPR	450:29	450:37	15	( 256 - 1 ) - i
LEAF_NODE	450:29	450:29	16	(
FIELD	450:30	450:30	16	256
LEAF_NODE	450:30	450:30	17	256
LEAF_NODE	450:33	450:33	16	-
FIELD	450:34	450:34	16	1
LEAF_NODE	450:34	450:34	17	1
LEAF_NODE	450:35	450:35	16	)
LEAF_NODE	450:36	450:36	16	-
FIELD	450:37	450:37	16	i
LEAF_NODE	450:37	450:37	17	i
LEAF_NODE	450:38	450:38	15	]
LEAF_NODE	450:39	450:39	13	,
ARGUMENT	450:41	450:41	13	0
FIELD	450:41	450:41	14	0
LEAF_NODE	450:41	450:41	15	0
LEAF_NODE	450:42	450:42	13	,
ARGUMENT	450:44	450:44	13	255
FIELD	450:44	450:44	14	255
LEAF_NODE	450:44	450:44	15	255
LEAF_NODE	450:47	450:47	13	)
LEAF_NODE	450:48	450:48	9	;
JUMP_STATEMENT	451:1	451:6	6	break DESTINATION ;
KEYWORD	451:1	451:1	7	break
LEAF_NODE	451:1	451:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	451:6	451:6	7	;
LABEL	452:4	452:31	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	452:4	452:4	7	case
LEAF_NODE	452:9	452:9	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	452:31	452:31	7	:
ITERATION	453:1	454:5	6	
KEYWORD	453:1	453:1	7	for
LEAF_NODE	453:1	453:1	8	for
LEAF_NODE	453:5	453:5	7	(
FOR_INIT	453:6	453:11	7	i = 0 ;
EXPR	453:6	453:6	8	i = 0
ASSIGN	453:6	453:10	9	i = 0
LVAL	453:6	453:6	10	i
FIELD	453:6	453:6	11	i
LEAF_NODE	453:6	453:6	12	i
ASSIGN_OP	453:8	453:8	10	=
LEAF_NODE	453:8	453:8	11	=
RVAL	453:10	453:10	10	0
FIELD	453:10	453:10	11	0
LEAF_NODE	453:10	453:10	12	0
LEAF_NODE	453:11	453:11	8	;
CONDITION	453:13	453:13	7	i < 256
EXPR	453:13	453:17	8	i < 256
FIELD	453:13	453:13	9	i
LEAF_NODE	453:13	453:13	10	i
REL_OPERATOR	453:15	453:15	9	<
LEAF_NODE	453:15	453:15	10	<
FIELD	453:17	453:17	9	256
LEAF_NODE	453:17	453:17	10	256
LEAF_NODE	453:20	453:20	7	;
FOR_EXPR	453:22	453:22	7	i ++
EXPR	453:22	453:22	8	i ++
FIELD	453:22	453:23	9	i ++
LEAF_NODE	453:22	453:22	10	i
LEAF_NODE	453:23	453:23	10	++
LEAF_NODE	453:25	453:25	7	)
STATEMENTS	454:5	454:5	7	
EXPR_STATEMENT	454:5	454:40	8	cmap [ i ] = clamp ( 255 * pct [ i ] , 0 , 255 ) ;
EXPR	454:5	454:5	9	cmap [ i ] = clamp ( 255 * pct [ i ] , 0 , 255 )
ASSIGN	454:5	454:15	10	cmap [ i ] = clamp ( 255 * pct [ i ] , 0 , 255 )
LVAL	454:5	454:5	11	cmap [ i ]
FIELD	454:5	454:11	12	cmap [ i ]
LEAF_NODE	454:5	454:5	13	cmap
LEAF_NODE	454:9	454:9	13	[
EXPR	454:10	454:10	13	i
FIELD	454:10	454:10	14	i
LEAF_NODE	454:10	454:10	15	i
LEAF_NODE	454:11	454:11	13	]
ASSIGN_OP	454:13	454:13	11	=
LEAF_NODE	454:13	454:13	12	=
RVAL	454:15	454:15	11	clamp ( 255 * pct [ i ] , 0 , 255 )
FUNCTION_CALL	454:15	454:39	12	clamp ( 255 * pct [ i ] , 0 , 255 )
CALLEE	454:15	454:15	13	clamp
LEAF_NODE	454:15	454:15	14	clamp
LEAF_NODE	454:20	454:20	13	(
ARGUMENT	454:21	454:25	13	255 * pct [ i ]
FIELD	454:21	454:21	14	255
LEAF_NODE	454:21	454:21	15	255
LEAF_NODE	454:24	454:24	14	*
FIELD	454:25	454:30	14	pct [ i ]
LEAF_NODE	454:25	454:25	15	pct
LEAF_NODE	454:28	454:28	15	[
EXPR	454:29	454:29	15	i
FIELD	454:29	454:29	16	i
LEAF_NODE	454:29	454:29	17	i
LEAF_NODE	454:30	454:30	15	]
LEAF_NODE	454:31	454:31	13	,
ARGUMENT	454:33	454:33	13	0
FIELD	454:33	454:33	14	0
LEAF_NODE	454:33	454:33	15	0
LEAF_NODE	454:34	454:34	13	,
ARGUMENT	454:36	454:36	13	255
FIELD	454:36	454:36	14	255
LEAF_NODE	454:36	454:36	15	255
LEAF_NODE	454:39	454:39	13	)
LEAF_NODE	454:40	454:40	9	;
JUMP_STATEMENT	455:1	455:6	6	break DESTINATION ;
KEYWORD	455:1	455:1	7	break
LEAF_NODE	455:1	455:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	455:6	455:6	7	;
LEAF_NODE	456:4	456:4	5	}
LEAF_NODE	457:0	457:0	2	}
FUNCTION_DEF	459:0	469:0	1	
RETURN_TYPE	459:0	459:7	2	static void
LEAF_NODE	459:0	459:0	3	static
TYPE_NAME	459:7	459:7	3	void
LEAF_NODE	459:7	459:7	4	void
FUNCTION_NAME	460:0	460:0	2	initScale
LEAF_NODE	460:0	460:0	3	initScale
PARAMETER_LIST	460:9	460:10	2	( )
LEAF_NODE	460:9	460:9	3	(
LEAF_NODE	460:10	460:10	3	)
LEAF_NODE	461:0	461:0	2	{
STATEMENTS	462:4	468:4	2	
EXPR_STATEMENT	462:4	462:53	3	src0 = ( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw ) ;
EXPR	462:4	462:4	4	src0 = ( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw )
ASSIGN	462:4	462:11	5	src0 = ( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw )
LVAL	462:4	462:4	6	src0
FIELD	462:4	462:4	7	src0
LEAF_NODE	462:4	462:4	8	src0
ASSIGN_OP	462:9	462:9	6	=
LEAF_NODE	462:9	462:9	7	=
RVAL	462:11	462:20	6	( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw )
LEAF_NODE	462:11	462:11	7	(
TYPE_NAME	462:12	462:12	7	uint8
LEAF_NODE	462:12	462:12	8	uint8
LEAF_NODE	462:17	462:17	7	*
LEAF_NODE	462:18	462:18	7	)
FUNCTION_CALL	462:20	462:52	7	_TIFFmalloc ( sizeof ( uint8 ) * tnw )
CALLEE	462:20	462:20	8	_TIFFmalloc
LEAF_NODE	462:20	462:20	9	_TIFFmalloc
LEAF_NODE	462:31	462:31	8	(
ARGUMENT	462:32	462:49	8	sizeof ( uint8 ) * tnw
FUNCTION_CALL	462:32	462:45	9	sizeof ( uint8 )
CALLEE	462:32	462:32	10	sizeof
LEAF_NODE	462:32	462:32	11	sizeof
LEAF_NODE	462:39	462:39	10	(
ARGUMENT	462:40	462:40	10	uint8
FIELD	462:40	462:40	11	uint8
LEAF_NODE	462:40	462:40	12	uint8
LEAF_NODE	462:45	462:45	10	)
LEAF_NODE	462:47	462:47	9	*
FIELD	462:49	462:49	9	tnw
LEAF_NODE	462:49	462:49	10	tnw
LEAF_NODE	462:52	462:52	8	)
LEAF_NODE	462:53	462:53	4	;
EXPR_STATEMENT	463:4	463:53	3	src1 = ( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw ) ;
EXPR	463:4	463:4	4	src1 = ( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw )
ASSIGN	463:4	463:11	5	src1 = ( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw )
LVAL	463:4	463:4	6	src1
FIELD	463:4	463:4	7	src1
LEAF_NODE	463:4	463:4	8	src1
ASSIGN_OP	463:9	463:9	6	=
LEAF_NODE	463:9	463:9	7	=
RVAL	463:11	463:20	6	( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw )
LEAF_NODE	463:11	463:11	7	(
TYPE_NAME	463:12	463:12	7	uint8
LEAF_NODE	463:12	463:12	8	uint8
LEAF_NODE	463:17	463:17	7	*
LEAF_NODE	463:18	463:18	7	)
FUNCTION_CALL	463:20	463:52	7	_TIFFmalloc ( sizeof ( uint8 ) * tnw )
CALLEE	463:20	463:20	8	_TIFFmalloc
LEAF_NODE	463:20	463:20	9	_TIFFmalloc
LEAF_NODE	463:31	463:31	8	(
ARGUMENT	463:32	463:49	8	sizeof ( uint8 ) * tnw
FUNCTION_CALL	463:32	463:45	9	sizeof ( uint8 )
CALLEE	463:32	463:32	10	sizeof
LEAF_NODE	463:32	463:32	11	sizeof
LEAF_NODE	463:39	463:39	10	(
ARGUMENT	463:40	463:40	10	uint8
FIELD	463:40	463:40	11	uint8
LEAF_NODE	463:40	463:40	12	uint8
LEAF_NODE	463:45	463:45	10	)
LEAF_NODE	463:47	463:47	9	*
FIELD	463:49	463:49	9	tnw
LEAF_NODE	463:49	463:49	10	tnw
LEAF_NODE	463:52	463:52	8	)
LEAF_NODE	463:53	463:53	4	;
EXPR_STATEMENT	464:4	464:53	3	src2 = ( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw ) ;
EXPR	464:4	464:4	4	src2 = ( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw )
ASSIGN	464:4	464:11	5	src2 = ( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw )
LVAL	464:4	464:4	6	src2
FIELD	464:4	464:4	7	src2
LEAF_NODE	464:4	464:4	8	src2
ASSIGN_OP	464:9	464:9	6	=
LEAF_NODE	464:9	464:9	7	=
RVAL	464:11	464:20	6	( uint8 * ) _TIFFmalloc ( sizeof ( uint8 ) * tnw )
LEAF_NODE	464:11	464:11	7	(
TYPE_NAME	464:12	464:12	7	uint8
LEAF_NODE	464:12	464:12	8	uint8
LEAF_NODE	464:17	464:17	7	*
LEAF_NODE	464:18	464:18	7	)
FUNCTION_CALL	464:20	464:52	7	_TIFFmalloc ( sizeof ( uint8 ) * tnw )
CALLEE	464:20	464:20	8	_TIFFmalloc
LEAF_NODE	464:20	464:20	9	_TIFFmalloc
LEAF_NODE	464:31	464:31	8	(
ARGUMENT	464:32	464:49	8	sizeof ( uint8 ) * tnw
FUNCTION_CALL	464:32	464:45	9	sizeof ( uint8 )
CALLEE	464:32	464:32	10	sizeof
LEAF_NODE	464:32	464:32	11	sizeof
LEAF_NODE	464:39	464:39	10	(
ARGUMENT	464:40	464:40	10	uint8
FIELD	464:40	464:40	11	uint8
LEAF_NODE	464:40	464:40	12	uint8
LEAF_NODE	464:45	464:45	10	)
LEAF_NODE	464:47	464:47	9	*
FIELD	464:49	464:49	9	tnw
LEAF_NODE	464:49	464:49	10	tnw
LEAF_NODE	464:52	464:52	8	)
LEAF_NODE	464:53	464:53	4	;
EXPR_STATEMENT	465:4	465:57	3	rowoff = ( uint32 * ) _TIFFmalloc ( sizeof ( uint32 ) * tnw ) ;
EXPR	465:4	465:4	4	rowoff = ( uint32 * ) _TIFFmalloc ( sizeof ( uint32 ) * tnw )
ASSIGN	465:4	465:13	5	rowoff = ( uint32 * ) _TIFFmalloc ( sizeof ( uint32 ) * tnw )
LVAL	465:4	465:4	6	rowoff
FIELD	465:4	465:4	7	rowoff
LEAF_NODE	465:4	465:4	8	rowoff
ASSIGN_OP	465:11	465:11	6	=
LEAF_NODE	465:11	465:11	7	=
RVAL	465:13	465:23	6	( uint32 * ) _TIFFmalloc ( sizeof ( uint32 ) * tnw )
LEAF_NODE	465:13	465:13	7	(
TYPE_NAME	465:14	465:14	7	uint32
LEAF_NODE	465:14	465:14	8	uint32
LEAF_NODE	465:20	465:20	7	*
LEAF_NODE	465:21	465:21	7	)
FUNCTION_CALL	465:23	465:56	7	_TIFFmalloc ( sizeof ( uint32 ) * tnw )
CALLEE	465:23	465:23	8	_TIFFmalloc
LEAF_NODE	465:23	465:23	9	_TIFFmalloc
LEAF_NODE	465:34	465:34	8	(
ARGUMENT	465:35	465:53	8	sizeof ( uint32 ) * tnw
FUNCTION_CALL	465:35	465:49	9	sizeof ( uint32 )
CALLEE	465:35	465:35	10	sizeof
LEAF_NODE	465:35	465:35	11	sizeof
LEAF_NODE	465:42	465:42	10	(
ARGUMENT	465:43	465:43	10	uint32
FIELD	465:43	465:43	11	uint32
LEAF_NODE	465:43	465:43	12	uint32
LEAF_NODE	465:49	465:49	10	)
LEAF_NODE	465:51	465:51	9	*
FIELD	465:53	465:53	9	tnw
LEAF_NODE	465:53	465:53	10	tnw
LEAF_NODE	465:56	465:56	8	)
LEAF_NODE	465:57	465:57	4	;
EXPR_STATEMENT	466:4	466:19	3	filterWidth = 0 ;
EXPR	466:4	466:4	4	filterWidth = 0
ASSIGN	466:4	466:18	5	filterWidth = 0
LVAL	466:4	466:4	6	filterWidth
FIELD	466:4	466:4	7	filterWidth
LEAF_NODE	466:4	466:4	8	filterWidth
ASSIGN_OP	466:16	466:16	6	=
LEAF_NODE	466:16	466:16	7	=
RVAL	466:18	466:18	6	0
FIELD	466:18	466:18	7	0
LEAF_NODE	466:18	466:18	8	0
LEAF_NODE	466:19	466:19	4	;
EXPR_STATEMENT	467:4	467:35	3	stepDstWidth = stepSrcWidth = 0 ;
EXPR	467:4	467:4	4	stepDstWidth = stepSrcWidth = 0
ASSIGN	467:4	467:19	5	stepDstWidth = stepSrcWidth = 0
LVAL	467:4	467:4	6	stepDstWidth
FIELD	467:4	467:4	7	stepDstWidth
LEAF_NODE	467:4	467:4	8	stepDstWidth
ASSIGN_OP	467:17	467:17	6	=
LEAF_NODE	467:17	467:17	7	=
RVAL	467:19	467:19	6	stepSrcWidth = 0
ASSIGN	467:19	467:34	7	stepSrcWidth = 0
LVAL	467:19	467:19	8	stepSrcWidth
FIELD	467:19	467:19	9	stepSrcWidth
LEAF_NODE	467:19	467:19	10	stepSrcWidth
ASSIGN_OP	467:32	467:32	8	=
LEAF_NODE	467:32	467:32	9	=
RVAL	467:34	467:34	8	0
FIELD	467:34	467:34	9	0
LEAF_NODE	467:34	467:34	10	0
LEAF_NODE	467:35	467:35	4	;
EXPR_STATEMENT	468:4	468:21	3	setupBitsTables ( ) ;
EXPR	468:4	468:4	4	setupBitsTables ( )
FUNCTION_CALL	468:4	468:20	5	setupBitsTables ( )
CALLEE	468:4	468:4	6	setupBitsTables
LEAF_NODE	468:4	468:4	7	setupBitsTables
LEAF_NODE	468:19	468:19	6	(
LEAF_NODE	468:20	468:20	6	)
LEAF_NODE	468:21	468:21	4	;
LEAF_NODE	469:0	469:0	2	}
FUNCTION_DEF	475:0	507:0	1	
RETURN_TYPE	475:0	475:7	2	static void
LEAF_NODE	475:0	475:0	3	static
TYPE_NAME	475:7	475:7	3	void
LEAF_NODE	475:7	475:7	4	void
FUNCTION_NAME	476:0	476:0	2	setupStepTables
LEAF_NODE	476:0	476:0	3	setupStepTables
PARAMETER_LIST	476:15	476:25	2	( uint32 sw )
LEAF_NODE	476:15	476:15	3	(
PARAMETER_DECL	476:16	476:23	3	uint32 sw
TYPE	476:16	476:16	4	uint32
TYPE_NAME	476:16	476:16	5	uint32
LEAF_NODE	476:16	476:16	6	uint32
NAME	476:23	476:23	4	sw
LEAF_NODE	476:23	476:23	5	sw
LEAF_NODE	476:25	476:25	3	)
LEAF_NODE	477:0	477:0	2	{
STATEMENTS	478:4	478:4	2	
SELECTION	478:4	478:51	3	
KEYWORD	478:4	478:4	4	if
LEAF_NODE	478:4	478:4	5	if
LEAF_NODE	478:7	478:7	4	(
CONDITION	478:8	478:8	4	stepSrcWidth != sw || stepDstWidth != tnw
EXPR	478:8	478:8	5	stepSrcWidth != sw || stepDstWidth != tnw
OR	478:8	478:30	6	stepSrcWidth != sw || stepDstWidth != tnw
EXPR	478:8	478:24	7	stepSrcWidth != sw
FIELD	478:8	478:8	8	stepSrcWidth
LEAF_NODE	478:8	478:8	9	stepSrcWidth
EQ_OPERATOR	478:21	478:21	8	!=
LEAF_NODE	478:21	478:21	9	!=
FIELD	478:24	478:24	8	sw
LEAF_NODE	478:24	478:24	9	sw
LEAF_NODE	478:27	478:27	7	||
EXPR	478:30	478:46	7	stepDstWidth != tnw
FIELD	478:30	478:30	8	stepDstWidth
LEAF_NODE	478:30	478:30	9	stepDstWidth
EQ_OPERATOR	478:43	478:43	8	!=
LEAF_NODE	478:43	478:43	9	!=
FIELD	478:46	478:46	8	tnw
LEAF_NODE	478:46	478:46	9	tnw
LEAF_NODE	478:49	478:49	4	)
STATEMENTS	478:51	506:4	4	
LEAF_NODE	478:51	478:51	5	{
STATEMENTS	479:1	505:1	5	
SIMPLE_DECL	479:1	479:14	6	int step ; step = sw ;
VAR_DECL	479:1	479:5	7	int step ; step = sw
TYPE	479:1	479:1	8	int
TYPE_NAME	479:1	479:1	9	int
LEAF_NODE	479:1	479:1	10	int
NAME	479:5	479:5	8	step
LEAF_NODE	479:5	479:5	9	step
LEAF_NODE	0:0	0:0	8	;
INIT	479:5	479:5	8	step = sw
ASSIGN	479:5	479:12	9	step = sw
LVAL	479:5	479:5	10	step
NAME	479:5	479:5	11	step
LEAF_NODE	479:5	479:5	12	step
ASSIGN_OP	479:10	479:10	10	=
LEAF_NODE	479:10	479:10	11	=
RVAL	479:12	479:12	10	sw
FIELD	479:12	479:12	11	sw
LEAF_NODE	479:12	479:12	12	sw
LEAF_NODE	479:14	479:14	7	;
SIMPLE_DECL	480:1	480:16	6	int limit ; limit = tnw ;
VAR_DECL	480:1	480:5	7	int limit ; limit = tnw
TYPE	480:1	480:1	8	int
TYPE_NAME	480:1	480:1	9	int
LEAF_NODE	480:1	480:1	10	int
NAME	480:5	480:5	8	limit
LEAF_NODE	480:5	480:5	9	limit
LEAF_NODE	0:0	0:0	8	;
INIT	480:5	480:5	8	limit = tnw
ASSIGN	480:5	480:13	9	limit = tnw
LVAL	480:5	480:5	10	limit
NAME	480:5	480:5	11	limit
LEAF_NODE	480:5	480:5	12	limit
ASSIGN_OP	480:11	480:11	10	=
LEAF_NODE	480:11	480:11	11	=
RVAL	480:13	480:13	10	tnw
FIELD	480:13	480:13	11	tnw
LEAF_NODE	480:13	480:13	12	tnw
LEAF_NODE	480:16	480:16	7	;
SIMPLE_DECL	481:1	481:12	6	int err ; err = 0 ;
VAR_DECL	481:1	481:5	7	int err ; err = 0
TYPE	481:1	481:1	8	int
TYPE_NAME	481:1	481:1	9	int
LEAF_NODE	481:1	481:1	10	int
NAME	481:5	481:5	8	err
LEAF_NODE	481:5	481:5	9	err
LEAF_NODE	0:0	0:0	8	;
INIT	481:5	481:5	8	err = 0
ASSIGN	481:5	481:11	9	err = 0
LVAL	481:5	481:5	10	err
NAME	481:5	481:5	11	err
LEAF_NODE	481:5	481:5	12	err
ASSIGN_OP	481:9	481:9	10	=
LEAF_NODE	481:9	481:9	11	=
RVAL	481:11	481:11	10	0
FIELD	481:11	481:11	11	0
LEAF_NODE	481:11	481:11	12	0
LEAF_NODE	481:12	481:12	7	;
SIMPLE_DECL	482:1	482:14	6	uint32 sx ; sx = 0 ;
VAR_DECL	482:1	482:8	7	uint32 sx ; sx = 0
TYPE	482:1	482:1	8	uint32
TYPE_NAME	482:1	482:1	9	uint32
LEAF_NODE	482:1	482:1	10	uint32
NAME	482:8	482:8	8	sx
LEAF_NODE	482:8	482:8	9	sx
LEAF_NODE	0:0	0:0	8	;
INIT	482:8	482:8	8	sx = 0
ASSIGN	482:8	482:13	9	sx = 0
LVAL	482:8	482:8	10	sx
NAME	482:8	482:8	11	sx
LEAF_NODE	482:8	482:8	12	sx
ASSIGN_OP	482:11	482:11	10	=
LEAF_NODE	482:11	482:11	11	=
RVAL	482:13	482:13	10	0
FIELD	482:13	482:13	11	0
LEAF_NODE	482:13	482:13	12	0
LEAF_NODE	482:14	482:14	7	;
SIMPLE_DECL	483:1	483:9	6	uint32 x ;
VAR_DECL	483:1	483:8	7	uint32 x
TYPE	483:1	483:1	8	uint32
TYPE_NAME	483:1	483:1	9	uint32
LEAF_NODE	483:1	483:1	10	uint32
NAME	483:8	483:8	8	x
LEAF_NODE	483:8	483:8	9	x
LEAF_NODE	483:9	483:9	7	;
SIMPLE_DECL	484:1	484:7	6	int fw ;
VAR_DECL	484:1	484:5	7	int fw
TYPE	484:1	484:1	8	int
TYPE_NAME	484:1	484:1	9	int
LEAF_NODE	484:1	484:1	10	int
NAME	484:5	484:5	8	fw
LEAF_NODE	484:5	484:5	9	fw
LEAF_NODE	484:7	484:7	7	;
SIMPLE_DECL	485:1	485:8	6	uint8 b ;
VAR_DECL	485:1	485:7	7	uint8 b
TYPE	485:1	485:1	8	uint8
TYPE_NAME	485:1	485:1	9	uint8
LEAF_NODE	485:1	485:1	10	uint8
NAME	485:7	485:7	8	b
LEAF_NODE	485:7	485:7	9	b
LEAF_NODE	485:8	485:8	7	;
ITERATION	486:1	486:27	6	
KEYWORD	486:1	486:1	7	for
LEAF_NODE	486:1	486:1	8	for
LEAF_NODE	486:5	486:5	7	(
FOR_INIT	486:6	486:11	7	x = 0 ;
EXPR	486:6	486:6	8	x = 0
ASSIGN	486:6	486:10	9	x = 0
LVAL	486:6	486:6	10	x
FIELD	486:6	486:6	11	x
LEAF_NODE	486:6	486:6	12	x
ASSIGN_OP	486:8	486:8	10	=
LEAF_NODE	486:8	486:8	11	=
RVAL	486:10	486:10	10	0
FIELD	486:10	486:10	11	0
LEAF_NODE	486:10	486:10	12	0
LEAF_NODE	486:11	486:11	8	;
CONDITION	486:13	486:13	7	x < tnw
EXPR	486:13	486:17	8	x < tnw
FIELD	486:13	486:13	9	x
LEAF_NODE	486:13	486:13	10	x
REL_OPERATOR	486:15	486:15	9	<
LEAF_NODE	486:15	486:15	10	<
FIELD	486:17	486:17	9	tnw
LEAF_NODE	486:17	486:17	10	tnw
LEAF_NODE	486:20	486:20	7	;
FOR_EXPR	486:22	486:22	7	x ++
EXPR	486:22	486:22	8	x ++
FIELD	486:22	486:23	9	x ++
LEAF_NODE	486:22	486:22	10	x
LEAF_NODE	486:23	486:23	10	++
LEAF_NODE	486:25	486:25	7	)
STATEMENTS	486:27	503:1	7	
LEAF_NODE	486:27	486:27	8	{
STATEMENTS	487:5	502:5	8	
SIMPLE_DECL	487:5	487:20	9	uint32 sx0 ; sx0 = sx ;
VAR_DECL	487:5	487:12	10	uint32 sx0 ; sx0 = sx
TYPE	487:5	487:5	11	uint32
TYPE_NAME	487:5	487:5	12	uint32
LEAF_NODE	487:5	487:5	13	uint32
NAME	487:12	487:12	11	sx0
LEAF_NODE	487:12	487:12	12	sx0
LEAF_NODE	0:0	0:0	11	;
INIT	487:12	487:12	11	sx0 = sx
ASSIGN	487:12	487:18	12	sx0 = sx
LVAL	487:12	487:12	13	sx0
NAME	487:12	487:12	14	sx0
LEAF_NODE	487:12	487:12	15	sx0
ASSIGN_OP	487:16	487:16	13	=
LEAF_NODE	487:16	487:16	14	=
RVAL	487:18	487:18	13	sx
FIELD	487:18	487:18	14	sx
LEAF_NODE	487:18	487:18	15	sx
LEAF_NODE	487:20	487:20	10	;
EXPR_STATEMENT	488:5	488:16	9	err += step ;
EXPR	488:5	488:5	10	err += step
ASSIGN	488:5	488:12	11	err += step
LVAL	488:5	488:5	12	err
FIELD	488:5	488:5	13	err
LEAF_NODE	488:5	488:5	14	err
ASSIGN_OP	488:9	488:9	12	+=
LEAF_NODE	488:9	488:9	13	+=
RVAL	488:12	488:12	12	step
FIELD	488:12	488:12	13	step
LEAF_NODE	488:12	488:12	14	step
LEAF_NODE	488:16	488:16	10	;
ITERATION	489:5	489:26	9	
KEYWORD	489:5	489:5	10	while
LEAF_NODE	489:5	489:5	11	while
LEAF_NODE	489:11	489:11	10	(
CONDITION	489:12	489:12	10	err >= limit
EXPR	489:12	489:19	11	err >= limit
FIELD	489:12	489:12	12	err
LEAF_NODE	489:12	489:12	13	err
REL_OPERATOR	489:16	489:16	12	>=
LEAF_NODE	489:16	489:16	13	>=
FIELD	489:19	489:19	12	limit
LEAF_NODE	489:19	489:19	13	limit
LEAF_NODE	489:24	489:24	10	)
STATEMENTS	489:26	492:5	10	
LEAF_NODE	489:26	489:26	11	{
STATEMENTS	490:2	491:2	11	
EXPR_STATEMENT	490:2	490:14	12	err -= limit ;
EXPR	490:2	490:2	13	err -= limit
ASSIGN	490:2	490:9	14	err -= limit
LVAL	490:2	490:2	15	err
FIELD	490:2	490:2	16	err
LEAF_NODE	490:2	490:2	17	err
ASSIGN_OP	490:6	490:6	15	-=
LEAF_NODE	490:6	490:6	16	-=
RVAL	490:9	490:9	15	limit
FIELD	490:9	490:9	16	limit
LEAF_NODE	490:9	490:9	17	limit
LEAF_NODE	490:14	490:14	13	;
EXPR_STATEMENT	491:2	491:6	12	sx ++ ;
EXPR	491:2	491:2	13	sx ++
FIELD	491:2	491:4	14	sx ++
LEAF_NODE	491:2	491:2	15	sx
LEAF_NODE	491:4	491:4	15	++
LEAF_NODE	491:6	491:6	13	;
LEAF_NODE	492:5	492:5	11	}
EXPR_STATEMENT	493:5	493:25	9	rowoff [ x ] = sx0 >> 3 ;
EXPR	493:5	493:5	10	rowoff [ x ] = sx0 >> 3
ASSIGN	493:5	493:17	11	rowoff [ x ] = sx0 >> 3
LVAL	493:5	493:5	12	rowoff [ x ]
FIELD	493:5	493:13	13	rowoff [ x ]
LEAF_NODE	493:5	493:5	14	rowoff
LEAF_NODE	493:11	493:11	14	[
EXPR	493:12	493:12	14	x
FIELD	493:12	493:12	15	x
LEAF_NODE	493:12	493:12	16	x
LEAF_NODE	493:13	493:13	14	]
ASSIGN_OP	493:15	493:15	12	=
LEAF_NODE	493:15	493:15	13	=
RVAL	493:17	493:24	12	sx0 >> 3
FIELD	493:17	493:17	13	sx0
LEAF_NODE	493:17	493:17	14	sx0
LEAF_NODE	493:21	493:21	13	>>
FIELD	493:24	493:24	13	3
LEAF_NODE	493:24	493:24	14	3
LEAF_NODE	493:25	493:25	10	;
EXPR_STATEMENT	494:5	494:18	9	fw = sx - sx0 ;
EXPR	494:5	494:5	10	fw = sx - sx0
ASSIGN	494:5	494:10	11	fw = sx - sx0
LVAL	494:5	494:5	12	fw
FIELD	494:5	494:5	13	fw
LEAF_NODE	494:5	494:5	14	fw
ASSIGN_OP	494:8	494:8	12	=
LEAF_NODE	494:8	494:8	13	=
RVAL	494:10	494:15	12	sx - sx0
FIELD	494:10	494:10	13	sx
LEAF_NODE	494:10	494:10	14	sx
LEAF_NODE	494:13	494:13	13	-
FIELD	494:15	494:15	13	sx0
LEAF_NODE	494:15	494:15	14	sx0
LEAF_NODE	494:18	494:18	10	;
EXPR_STATEMENT	495:5	495:39	9	b = ( fw < 8 ) ? 0xff << ( 8 - fw ) : 0xff ;
EXPR	495:5	495:5	10	b = ( fw < 8 ) ? 0xff << ( 8 - fw ) : 0xff
ASSIGN	495:5	495:9	11	b = ( fw < 8 ) ? 0xff << ( 8 - fw ) : 0xff
LVAL	495:5	495:5	12	b
FIELD	495:5	495:5	13	b
LEAF_NODE	495:5	495:5	14	b
ASSIGN_OP	495:7	495:7	12	=
LEAF_NODE	495:7	495:7	13	=
RVAL	495:9	495:9	12	( fw < 8 ) ? 0xff << ( 8 - fw ) : 0xff
COND_EXPR	495:9	495:35	13	( fw < 8 ) ? 0xff << ( 8 - fw ) : 0xff
CONDITION	495:9	495:16	14	( fw < 8 )
LEAF_NODE	495:9	495:9	15	(
FIELD	495:10	495:10	15	fw
LEAF_NODE	495:10	495:10	16	fw
REL_OPERATOR	495:13	495:13	15	<
LEAF_NODE	495:13	495:13	16	<
FIELD	495:15	495:15	15	8
LEAF_NODE	495:15	495:15	16	8
LEAF_NODE	495:16	495:16	15	)
LEAF_NODE	495:18	495:18	14	?
EXPR	495:20	495:31	14	0xff << ( 8 - fw )
FIELD	495:20	495:20	15	0xff
LEAF_NODE	495:20	495:20	16	0xff
LEAF_NODE	495:24	495:24	15	<<
LEAF_NODE	495:26	495:26	15	(
FIELD	495:27	495:27	15	8
LEAF_NODE	495:27	495:27	16	8
LEAF_NODE	495:28	495:28	15	-
FIELD	495:29	495:29	15	fw
LEAF_NODE	495:29	495:29	16	fw
LEAF_NODE	495:31	495:31	15	)
LEAF_NODE	495:33	495:33	14	:
FIELD	495:35	495:35	14	0xff
LEAF_NODE	495:35	495:35	15	0xff
LEAF_NODE	495:39	495:39	10	;
EXPR_STATEMENT	496:5	496:27	9	src0 [ x ] = b >> ( sx0 & 7 ) ;
EXPR	496:5	496:5	10	src0 [ x ] = b >> ( sx0 & 7 )
ASSIGN	496:5	496:15	11	src0 [ x ] = b >> ( sx0 & 7 )
LVAL	496:5	496:5	12	src0 [ x ]
FIELD	496:5	496:11	13	src0 [ x ]
LEAF_NODE	496:5	496:5	14	src0
LEAF_NODE	496:9	496:9	14	[
EXPR	496:10	496:10	14	x
FIELD	496:10	496:10	15	x
LEAF_NODE	496:10	496:10	16	x
LEAF_NODE	496:11	496:11	14	]
ASSIGN_OP	496:13	496:13	12	=
LEAF_NODE	496:13	496:13	13	=
RVAL	496:15	496:26	12	b >> ( sx0 & 7 )
FIELD	496:15	496:15	13	b
LEAF_NODE	496:15	496:15	14	b
LEAF_NODE	496:17	496:17	13	>>
LEAF_NODE	496:20	496:20	13	(
FIELD	496:21	496:21	13	sx0
LEAF_NODE	496:21	496:21	14	sx0
LEAF_NODE	496:24	496:24	13	&
FIELD	496:25	496:25	13	7
LEAF_NODE	496:25	496:25	14	7
LEAF_NODE	496:26	496:26	13	)
LEAF_NODE	496:27	496:27	10	;
EXPR_STATEMENT	497:5	497:22	9	fw -= 8 - ( sx0 & 7 ) ;
EXPR	497:5	497:5	10	fw -= 8 - ( sx0 & 7 )
ASSIGN	497:5	497:11	11	fw -= 8 - ( sx0 & 7 )
LVAL	497:5	497:5	12	fw
FIELD	497:5	497:5	13	fw
LEAF_NODE	497:5	497:5	14	fw
ASSIGN_OP	497:8	497:8	12	-=
LEAF_NODE	497:8	497:8	13	-=
RVAL	497:11	497:21	12	8 - ( sx0 & 7 )
FIELD	497:11	497:11	13	8
LEAF_NODE	497:11	497:11	14	8
LEAF_NODE	497:13	497:13	13	-
LEAF_NODE	497:15	497:15	13	(
FIELD	497:16	497:16	13	sx0
LEAF_NODE	497:16	497:16	14	sx0
LEAF_NODE	497:19	497:19	13	&
FIELD	497:20	497:20	13	7
LEAF_NODE	497:20	497:20	14	7
LEAF_NODE	497:21	497:21	13	)
LEAF_NODE	497:22	497:22	10	;
SELECTION	498:5	499:2	9	
KEYWORD	498:5	498:5	10	if
LEAF_NODE	498:5	498:5	11	if
LEAF_NODE	498:8	498:8	10	(
CONDITION	498:9	498:9	10	fw < 0
EXPR	498:9	498:14	11	fw < 0
FIELD	498:9	498:9	12	fw
LEAF_NODE	498:9	498:9	13	fw
REL_OPERATOR	498:12	498:12	12	<
LEAF_NODE	498:12	498:12	13	<
FIELD	498:14	498:14	12	0
LEAF_NODE	498:14	498:14	13	0
LEAF_NODE	498:15	498:15	10	)
STATEMENTS	499:2	499:2	10	
EXPR_STATEMENT	499:2	499:8	11	fw = 0 ;
EXPR	499:2	499:2	12	fw = 0
ASSIGN	499:2	499:7	13	fw = 0
LVAL	499:2	499:2	14	fw
FIELD	499:2	499:2	15	fw
LEAF_NODE	499:2	499:2	16	fw
ASSIGN_OP	499:5	499:5	14	=
LEAF_NODE	499:5	499:5	15	=
RVAL	499:7	499:7	14	0
FIELD	499:7	499:7	15	0
LEAF_NODE	499:7	499:7	16	0
LEAF_NODE	499:8	499:8	12	;
EXPR_STATEMENT	500:5	500:22	9	src1 [ x ] = fw >> 3 ;
EXPR	500:5	500:5	10	src1 [ x ] = fw >> 3
ASSIGN	500:5	500:15	11	src1 [ x ] = fw >> 3
LVAL	500:5	500:5	12	src1 [ x ]
FIELD	500:5	500:11	13	src1 [ x ]
LEAF_NODE	500:5	500:5	14	src1
LEAF_NODE	500:9	500:9	14	[
EXPR	500:10	500:10	14	x
FIELD	500:10	500:10	15	x
LEAF_NODE	500:10	500:10	16	x
LEAF_NODE	500:11	500:11	14	]
ASSIGN_OP	500:13	500:13	12	=
LEAF_NODE	500:13	500:13	13	=
RVAL	500:15	500:21	12	fw >> 3
FIELD	500:15	500:15	13	fw
LEAF_NODE	500:15	500:15	14	fw
LEAF_NODE	500:18	500:18	13	>>
FIELD	500:21	500:21	13	3
LEAF_NODE	500:21	500:21	14	3
LEAF_NODE	500:22	500:22	10	;
EXPR_STATEMENT	501:5	501:21	9	fw -= ( fw >> 3 ) << 3 ;
EXPR	501:5	501:5	10	fw -= ( fw >> 3 ) << 3
ASSIGN	501:5	501:11	11	fw -= ( fw >> 3 ) << 3
LVAL	501:5	501:5	12	fw
FIELD	501:5	501:5	13	fw
LEAF_NODE	501:5	501:5	14	fw
ASSIGN_OP	501:8	501:8	12	-=
LEAF_NODE	501:8	501:8	13	-=
RVAL	501:11	501:20	12	( fw >> 3 ) << 3
LEAF_NODE	501:11	501:11	13	(
FIELD	501:12	501:12	13	fw
LEAF_NODE	501:12	501:12	14	fw
LEAF_NODE	501:14	501:14	13	>>
FIELD	501:16	501:16	13	3
LEAF_NODE	501:16	501:16	14	3
LEAF_NODE	501:17	501:17	13	)
LEAF_NODE	501:18	501:18	13	<<
FIELD	501:20	501:20	13	3
LEAF_NODE	501:20	501:20	14	3
LEAF_NODE	501:21	501:21	10	;
EXPR_STATEMENT	502:5	502:29	9	src2 [ x ] = 0xff << ( 8 - fw ) ;
EXPR	502:5	502:5	10	src2 [ x ] = 0xff << ( 8 - fw )
ASSIGN	502:5	502:15	11	src2 [ x ] = 0xff << ( 8 - fw )
LVAL	502:5	502:5	12	src2 [ x ]
FIELD	502:5	502:11	13	src2 [ x ]
LEAF_NODE	502:5	502:5	14	src2
LEAF_NODE	502:9	502:9	14	[
EXPR	502:10	502:10	14	x
FIELD	502:10	502:10	15	x
LEAF_NODE	502:10	502:10	16	x
LEAF_NODE	502:11	502:11	14	]
ASSIGN_OP	502:13	502:13	12	=
LEAF_NODE	502:13	502:13	13	=
RVAL	502:15	502:28	12	0xff << ( 8 - fw )
FIELD	502:15	502:15	13	0xff
LEAF_NODE	502:15	502:15	14	0xff
LEAF_NODE	502:20	502:20	13	<<
LEAF_NODE	502:23	502:23	13	(
FIELD	502:24	502:24	13	8
LEAF_NODE	502:24	502:24	14	8
LEAF_NODE	502:25	502:25	13	-
FIELD	502:26	502:26	13	fw
LEAF_NODE	502:26	502:26	14	fw
LEAF_NODE	502:28	502:28	13	)
LEAF_NODE	502:29	502:29	10	;
LEAF_NODE	503:1	503:1	8	}
EXPR_STATEMENT	504:1	504:18	6	stepSrcWidth = sw ;
EXPR	504:1	504:1	7	stepSrcWidth = sw
ASSIGN	504:1	504:16	8	stepSrcWidth = sw
LVAL	504:1	504:1	9	stepSrcWidth
FIELD	504:1	504:1	10	stepSrcWidth
LEAF_NODE	504:1	504:1	11	stepSrcWidth
ASSIGN_OP	504:14	504:14	9	=
LEAF_NODE	504:14	504:14	10	=
RVAL	504:16	504:16	9	sw
FIELD	504:16	504:16	10	sw
LEAF_NODE	504:16	504:16	11	sw
LEAF_NODE	504:18	504:18	7	;
EXPR_STATEMENT	505:1	505:19	6	stepDstWidth = tnw ;
EXPR	505:1	505:1	7	stepDstWidth = tnw
ASSIGN	505:1	505:16	8	stepDstWidth = tnw
LVAL	505:1	505:1	9	stepDstWidth
FIELD	505:1	505:1	10	stepDstWidth
LEAF_NODE	505:1	505:1	11	stepDstWidth
ASSIGN_OP	505:14	505:14	9	=
LEAF_NODE	505:14	505:14	10	=
RVAL	505:16	505:16	9	tnw
FIELD	505:16	505:16	10	tnw
LEAF_NODE	505:16	505:16	11	tnw
LEAF_NODE	505:19	505:19	7	;
LEAF_NODE	506:4	506:4	5	}
LEAF_NODE	507:0	507:0	2	}
FUNCTION_DEF	509:0	543:0	1	
RETURN_TYPE	509:0	509:7	2	static void
LEAF_NODE	509:0	509:0	3	static
TYPE_NAME	509:7	509:7	3	void
LEAF_NODE	509:7	509:7	4	void
FUNCTION_NAME	510:0	510:0	2	setrow
LEAF_NODE	510:0	510:0	3	setrow
PARAMETER_LIST	510:6	510:52	2	( uint8 * row , uint32 nrows , const uint8 * [ ] rows )
LEAF_NODE	510:6	510:6	3	(
PARAMETER_DECL	510:7	510:14	3	uint8 * row
TYPE	510:7	510:12	4	uint8 *
TYPE_NAME	510:7	510:7	5	uint8
LEAF_NODE	510:7	510:7	6	uint8
POINTER	510:12	510:12	5	*
LEAF_NODE	510:12	510:12	6	*
NAME	510:14	510:14	4	row
LEAF_NODE	510:14	510:14	5	row
LEAF_NODE	510:17	510:17	3	,
PARAMETER_DECL	510:19	510:26	3	uint32 nrows
TYPE	510:19	510:19	4	uint32
TYPE_NAME	510:19	510:19	5	uint32
LEAF_NODE	510:19	510:19	6	uint32
NAME	510:26	510:26	4	nrows
LEAF_NODE	510:26	510:26	5	nrows
LEAF_NODE	510:31	510:31	3	,
PARAMETER_DECL	510:33	510:46	3	const uint8 * [ ] rows
TYPE	510:33	510:50	4	const uint8 * [ ]
TYPE_NAME	510:33	510:39	5	const uint8
LEAF_NODE	510:33	510:33	6	const
LEAF_NODE	510:39	510:39	6	uint8
POINTER	510:44	510:44	5	*
LEAF_NODE	510:44	510:44	6	*
TYPE_SUFFIX	510:50	510:51	5	[ ]
LEAF_NODE	510:50	510:50	6	[
LEAF_NODE	510:51	510:51	6	]
NAME	510:46	510:46	4	rows
LEAF_NODE	510:46	510:46	5	rows
LEAF_NODE	510:52	510:52	3	)
LEAF_NODE	511:0	511:0	2	{
STATEMENTS	512:4	514:4	2	
SIMPLE_DECL	512:4	512:12	3	uint32 x ;
VAR_DECL	512:4	512:11	4	uint32 x
TYPE	512:4	512:4	5	uint32
TYPE_NAME	512:4	512:4	6	uint32
LEAF_NODE	512:4	512:4	7	uint32
NAME	512:11	512:11	5	x
LEAF_NODE	512:11	512:11	6	x
LEAF_NODE	512:12	512:12	4	;
SIMPLE_DECL	513:4	513:37	3	uint32 area ; area = nrows * filterWidth ;
VAR_DECL	513:4	513:11	4	uint32 area ; area = nrows * filterWidth
TYPE	513:4	513:4	5	uint32
TYPE_NAME	513:4	513:4	6	uint32
LEAF_NODE	513:4	513:4	7	uint32
NAME	513:11	513:11	5	area
LEAF_NODE	513:11	513:11	6	area
LEAF_NODE	0:0	0:0	5	;
INIT	513:11	513:11	5	area = nrows * filterWidth
ASSIGN	513:11	513:18	6	area = nrows * filterWidth
LVAL	513:11	513:11	7	area
NAME	513:11	513:11	8	area
LEAF_NODE	513:11	513:11	9	area
ASSIGN_OP	513:16	513:16	7	=
LEAF_NODE	513:16	513:16	8	=
RVAL	513:18	513:26	7	nrows * filterWidth
FIELD	513:18	513:18	8	nrows
LEAF_NODE	513:18	513:18	9	nrows
LEAF_NODE	513:24	513:24	8	*
FIELD	513:26	513:26	8	filterWidth
LEAF_NODE	513:26	513:26	9	filterWidth
LEAF_NODE	513:37	513:37	4	;
ITERATION	514:4	514:30	3	
KEYWORD	514:4	514:4	4	for
LEAF_NODE	514:4	514:4	5	for
LEAF_NODE	514:8	514:8	4	(
FOR_INIT	514:9	514:14	4	x = 0 ;
EXPR	514:9	514:9	5	x = 0
ASSIGN	514:9	514:13	6	x = 0
LVAL	514:9	514:9	7	x
FIELD	514:9	514:9	8	x
LEAF_NODE	514:9	514:9	9	x
ASSIGN_OP	514:11	514:11	7	=
LEAF_NODE	514:11	514:11	8	=
RVAL	514:13	514:13	7	0
FIELD	514:13	514:13	8	0
LEAF_NODE	514:13	514:13	9	0
LEAF_NODE	514:14	514:14	5	;
CONDITION	514:16	514:16	4	x < tnw
EXPR	514:16	514:20	5	x < tnw
FIELD	514:16	514:16	6	x
LEAF_NODE	514:16	514:16	7	x
REL_OPERATOR	514:18	514:18	6	<
LEAF_NODE	514:18	514:18	7	<
FIELD	514:20	514:20	6	tnw
LEAF_NODE	514:20	514:20	7	tnw
LEAF_NODE	514:23	514:23	4	;
FOR_EXPR	514:25	514:25	4	x ++
EXPR	514:25	514:25	5	x ++
FIELD	514:25	514:26	6	x ++
LEAF_NODE	514:25	514:25	7	x
LEAF_NODE	514:26	514:26	7	++
LEAF_NODE	514:28	514:28	4	)
STATEMENTS	514:30	542:4	4	
LEAF_NODE	514:30	514:30	5	{
STATEMENTS	515:1	541:1	5	
SIMPLE_DECL	515:1	515:23	6	uint32 mask0 ; mask0 = src0 [ x ] ;
VAR_DECL	515:1	515:8	7	uint32 mask0 ; mask0 = src0 [ x ]
TYPE	515:1	515:1	8	uint32
TYPE_NAME	515:1	515:1	9	uint32
LEAF_NODE	515:1	515:1	10	uint32
NAME	515:8	515:8	8	mask0
LEAF_NODE	515:8	515:8	9	mask0
LEAF_NODE	0:0	0:0	8	;
INIT	515:8	515:8	8	mask0 = src0 [ x ]
ASSIGN	515:8	515:16	9	mask0 = src0 [ x ]
LVAL	515:8	515:8	10	mask0
NAME	515:8	515:8	11	mask0
LEAF_NODE	515:8	515:8	12	mask0
ASSIGN_OP	515:14	515:14	10	=
LEAF_NODE	515:14	515:14	11	=
RVAL	515:16	515:16	10	src0 [ x ]
FIELD	515:16	515:22	11	src0 [ x ]
LEAF_NODE	515:16	515:16	12	src0
LEAF_NODE	515:20	515:20	12	[
EXPR	515:21	515:21	12	x
FIELD	515:21	515:21	13	x
LEAF_NODE	515:21	515:21	14	x
LEAF_NODE	515:22	515:22	12	]
LEAF_NODE	515:23	515:23	7	;
SIMPLE_DECL	516:1	516:20	6	uint32 fw ; fw = src1 [ x ] ;
VAR_DECL	516:1	516:8	7	uint32 fw ; fw = src1 [ x ]
TYPE	516:1	516:1	8	uint32
TYPE_NAME	516:1	516:1	9	uint32
LEAF_NODE	516:1	516:1	10	uint32
NAME	516:8	516:8	8	fw
LEAF_NODE	516:8	516:8	9	fw
LEAF_NODE	0:0	0:0	8	;
INIT	516:8	516:8	8	fw = src1 [ x ]
ASSIGN	516:8	516:13	9	fw = src1 [ x ]
LVAL	516:8	516:8	10	fw
NAME	516:8	516:8	11	fw
LEAF_NODE	516:8	516:8	12	fw
ASSIGN_OP	516:11	516:11	10	=
LEAF_NODE	516:11	516:11	11	=
RVAL	516:13	516:13	10	src1 [ x ]
FIELD	516:13	516:19	11	src1 [ x ]
LEAF_NODE	516:13	516:13	12	src1
LEAF_NODE	516:17	516:17	12	[
EXPR	516:18	516:18	12	x
FIELD	516:18	516:18	13	x
LEAF_NODE	516:18	516:18	14	x
LEAF_NODE	516:19	516:19	12	]
LEAF_NODE	516:20	516:20	7	;
SIMPLE_DECL	517:1	517:23	6	uint32 mask1 ; mask1 = src1 [ x ] ;
VAR_DECL	517:1	517:8	7	uint32 mask1 ; mask1 = src1 [ x ]
TYPE	517:1	517:1	8	uint32
TYPE_NAME	517:1	517:1	9	uint32
LEAF_NODE	517:1	517:1	10	uint32
NAME	517:8	517:8	8	mask1
LEAF_NODE	517:8	517:8	9	mask1
LEAF_NODE	0:0	0:0	8	;
INIT	517:8	517:8	8	mask1 = src1 [ x ]
ASSIGN	517:8	517:16	9	mask1 = src1 [ x ]
LVAL	517:8	517:8	10	mask1
NAME	517:8	517:8	11	mask1
LEAF_NODE	517:8	517:8	12	mask1
ASSIGN_OP	517:14	517:14	10	=
LEAF_NODE	517:14	517:14	11	=
RVAL	517:16	517:16	10	src1 [ x ]
FIELD	517:16	517:22	11	src1 [ x ]
LEAF_NODE	517:16	517:16	12	src1
LEAF_NODE	517:20	517:20	12	[
EXPR	517:21	517:21	12	x
FIELD	517:21	517:21	13	x
LEAF_NODE	517:21	517:21	14	x
LEAF_NODE	517:22	517:22	12	]
LEAF_NODE	517:23	517:23	7	;
SIMPLE_DECL	518:1	518:23	6	uint32 off ; off = rowoff [ x ] ;
VAR_DECL	518:1	518:8	7	uint32 off ; off = rowoff [ x ]
TYPE	518:1	518:1	8	uint32
TYPE_NAME	518:1	518:1	9	uint32
LEAF_NODE	518:1	518:1	10	uint32
NAME	518:8	518:8	8	off
LEAF_NODE	518:8	518:8	9	off
LEAF_NODE	0:0	0:0	8	;
INIT	518:8	518:8	8	off = rowoff [ x ]
ASSIGN	518:8	518:14	9	off = rowoff [ x ]
LVAL	518:8	518:8	10	off
NAME	518:8	518:8	11	off
LEAF_NODE	518:8	518:8	12	off
ASSIGN_OP	518:12	518:12	10	=
LEAF_NODE	518:12	518:12	11	=
RVAL	518:14	518:14	10	rowoff [ x ]
FIELD	518:14	518:22	11	rowoff [ x ]
LEAF_NODE	518:14	518:14	12	rowoff
LEAF_NODE	518:20	518:20	12	[
EXPR	518:21	518:21	12	x
FIELD	518:21	518:21	13	x
LEAF_NODE	518:21	518:21	14	x
LEAF_NODE	518:22	518:22	12	]
LEAF_NODE	518:23	518:23	7	;
SIMPLE_DECL	519:1	519:15	6	uint32 acc ; acc = 0 ;
VAR_DECL	519:1	519:8	7	uint32 acc ; acc = 0
TYPE	519:1	519:1	8	uint32
TYPE_NAME	519:1	519:1	9	uint32
LEAF_NODE	519:1	519:1	10	uint32
NAME	519:8	519:8	8	acc
LEAF_NODE	519:8	519:8	9	acc
LEAF_NODE	0:0	0:0	8	;
INIT	519:8	519:8	8	acc = 0
ASSIGN	519:8	519:14	9	acc = 0
LVAL	519:8	519:8	10	acc
NAME	519:8	519:8	11	acc
LEAF_NODE	519:8	519:8	12	acc
ASSIGN_OP	519:12	519:12	10	=
LEAF_NODE	519:12	519:12	11	=
RVAL	519:14	519:14	10	0
FIELD	519:14	519:14	11	0
LEAF_NODE	519:14	519:14	12	0
LEAF_NODE	519:15	519:15	7	;
SIMPLE_DECL	520:1	520:12	6	uint32 y , uint32 i ;
INIT_DECL_LIST	520:1	520:1	7	uint32 y , uint32 i
VAR_DECL	520:1	520:8	8	uint32 y
TYPE	520:1	520:1	9	uint32
TYPE_NAME	520:1	520:1	10	uint32
LEAF_NODE	520:1	520:1	11	uint32
NAME	520:8	520:8	9	y
LEAF_NODE	520:8	520:8	10	y
LEAF_NODE	520:9	520:9	8	,
VAR_DECL	520:1	520:11	8	uint32 i
TYPE	520:1	520:1	9	uint32
TYPE_NAME	520:1	520:1	10	uint32
LEAF_NODE	520:1	520:1	11	uint32
NAME	520:11	520:11	9	i
LEAF_NODE	520:11	520:11	10	i
LEAF_NODE	520:12	520:12	7	;
ITERATION	521:1	521:29	6	
KEYWORD	521:1	521:1	7	for
LEAF_NODE	521:1	521:1	8	for
LEAF_NODE	521:5	521:5	7	(
FOR_INIT	521:6	521:11	7	y = 0 ;
EXPR	521:6	521:6	8	y = 0
ASSIGN	521:6	521:10	9	y = 0
LVAL	521:6	521:6	10	y
FIELD	521:6	521:6	11	y
LEAF_NODE	521:6	521:6	12	y
ASSIGN_OP	521:8	521:8	10	=
LEAF_NODE	521:8	521:8	11	=
RVAL	521:10	521:10	10	0
FIELD	521:10	521:10	11	0
LEAF_NODE	521:10	521:10	12	0
LEAF_NODE	521:11	521:11	8	;
CONDITION	521:13	521:13	7	y < nrows
EXPR	521:13	521:17	8	y < nrows
FIELD	521:13	521:13	9	y
LEAF_NODE	521:13	521:13	10	y
REL_OPERATOR	521:15	521:15	9	<
LEAF_NODE	521:15	521:15	10	<
FIELD	521:17	521:17	9	nrows
LEAF_NODE	521:17	521:17	10	nrows
LEAF_NODE	521:22	521:22	7	;
FOR_EXPR	521:24	521:24	7	y ++
EXPR	521:24	521:24	8	y ++
FIELD	521:24	521:25	9	y ++
LEAF_NODE	521:24	521:24	10	y
LEAF_NODE	521:25	521:25	10	++
LEAF_NODE	521:27	521:27	7	)
STATEMENTS	521:29	540:1	7	
LEAF_NODE	521:29	521:29	8	{
STATEMENTS	522:5	539:5	8	
SIMPLE_DECL	522:5	522:37	9	const uint8 * src ; src = rows [ y ] + off ;
VAR_DECL	522:5	522:18	10	const uint8 * src ; src = rows [ y ] + off
TYPE	522:5	522:16	11	const uint8 *
TYPE_NAME	522:5	522:11	12	const uint8
LEAF_NODE	522:5	522:5	13	const
LEAF_NODE	522:11	522:11	13	uint8
POINTER	522:16	522:16	12	*
LEAF_NODE	522:16	522:16	13	*
NAME	522:18	522:18	11	src
LEAF_NODE	522:18	522:18	12	src
LEAF_NODE	0:0	0:0	11	;
INIT	522:18	522:18	11	src = rows [ y ] + off
ASSIGN	522:18	522:24	12	src = rows [ y ] + off
LVAL	522:18	522:18	13	src
NAME	522:18	522:18	14	src
LEAF_NODE	522:18	522:18	15	src
ASSIGN_OP	522:22	522:22	13	=
LEAF_NODE	522:22	522:22	14	=
RVAL	522:24	522:34	13	rows [ y ] + off
FIELD	522:24	522:30	14	rows [ y ]
LEAF_NODE	522:24	522:24	15	rows
LEAF_NODE	522:28	522:28	15	[
EXPR	522:29	522:29	15	y
FIELD	522:29	522:29	16	y
LEAF_NODE	522:29	522:29	17	y
LEAF_NODE	522:30	522:30	15	]
LEAF_NODE	522:32	522:32	14	+
FIELD	522:34	522:34	14	off
LEAF_NODE	522:34	522:34	15	off
LEAF_NODE	522:37	522:37	10	;
EXPR_STATEMENT	523:5	523:32	9	acc += bits [ * src ++ & mask0 ] ;
EXPR	523:5	523:5	10	acc += bits [ * src ++ & mask0 ]
ASSIGN	523:5	523:12	11	acc += bits [ * src ++ & mask0 ]
LVAL	523:5	523:5	12	acc
FIELD	523:5	523:5	13	acc
LEAF_NODE	523:5	523:5	14	acc
ASSIGN_OP	523:9	523:9	12	+=
LEAF_NODE	523:9	523:9	13	+=
RVAL	523:12	523:12	12	bits [ * src ++ & mask0 ]
FIELD	523:12	523:31	13	bits [ * src ++ & mask0 ]
LEAF_NODE	523:12	523:12	14	bits
LEAF_NODE	523:16	523:16	14	[
EXPR	523:17	523:26	14	* src ++ & mask0
UNARY_EXPR	523:17	523:18	15	* src ++
UNARY_OPERATOR	523:17	523:17	16	*
LEAF_NODE	523:17	523:17	17	*
FIELD	523:18	523:21	16	src ++
LEAF_NODE	523:18	523:18	17	src
LEAF_NODE	523:21	523:21	17	++
LEAF_NODE	523:24	523:24	15	&
FIELD	523:26	523:26	15	mask0
LEAF_NODE	523:26	523:26	16	mask0
LEAF_NODE	523:31	523:31	14	]
LEAF_NODE	523:32	523:32	10	;
SELECTION	524:5	524:17	9	
KEYWORD	524:5	524:5	10	switch
LEAF_NODE	524:5	524:5	11	switch
LEAF_NODE	524:12	524:12	10	(
CONDITION	524:13	524:13	10	fw
EXPR	524:13	524:13	11	fw
FIELD	524:13	524:13	12	fw
LEAF_NODE	524:13	524:13	13	fw
LEAF_NODE	524:15	524:15	10	)
STATEMENTS	524:17	538:5	10	
LEAF_NODE	524:17	524:17	11	{
STATEMENTS	525:5	537:13	11	
LABEL	525:5	525:12	12	default :
LEAF_NODE	525:5	525:5	13	default
LEAF_NODE	525:12	525:12	13	:
ITERATION	526:2	527:6	12	
KEYWORD	526:2	526:2	13	for
LEAF_NODE	526:2	526:2	14	for
LEAF_NODE	526:6	526:6	13	(
FOR_INIT	526:7	526:13	13	i = fw ;
EXPR	526:7	526:7	14	i = fw
ASSIGN	526:7	526:11	15	i = fw
LVAL	526:7	526:7	16	i
FIELD	526:7	526:7	17	i
LEAF_NODE	526:7	526:7	18	i
ASSIGN_OP	526:9	526:9	16	=
LEAF_NODE	526:9	526:9	17	=
RVAL	526:11	526:11	16	fw
FIELD	526:11	526:11	17	fw
LEAF_NODE	526:11	526:11	18	fw
LEAF_NODE	526:13	526:13	14	;
CONDITION	526:15	526:15	13	i > 8
EXPR	526:15	526:19	14	i > 8
FIELD	526:15	526:15	15	i
LEAF_NODE	526:15	526:15	16	i
REL_OPERATOR	526:17	526:17	15	>
LEAF_NODE	526:17	526:17	16	>
FIELD	526:19	526:19	15	8
LEAF_NODE	526:19	526:19	16	8
LEAF_NODE	526:20	526:20	13	;
FOR_EXPR	526:22	526:22	13	i --
EXPR	526:22	526:22	14	i --
FIELD	526:22	526:23	15	i --
LEAF_NODE	526:22	526:22	16	i
LEAF_NODE	526:23	526:23	16	--
LEAF_NODE	526:25	526:25	13	)
STATEMENTS	527:6	527:6	13	
EXPR_STATEMENT	527:6	527:25	14	acc += bits [ * src ++ ] ;
EXPR	527:6	527:6	15	acc += bits [ * src ++ ]
ASSIGN	527:6	527:13	16	acc += bits [ * src ++ ]
LVAL	527:6	527:6	17	acc
FIELD	527:6	527:6	18	acc
LEAF_NODE	527:6	527:6	19	acc
ASSIGN_OP	527:10	527:10	17	+=
LEAF_NODE	527:10	527:10	18	+=
RVAL	527:13	527:13	17	bits [ * src ++ ]
FIELD	527:13	527:24	18	bits [ * src ++ ]
LEAF_NODE	527:13	527:13	19	bits
LEAF_NODE	527:17	527:17	19	[
EXPR	527:18	527:18	19	* src ++
UNARY_EXPR	527:18	527:19	20	* src ++
UNARY_OPERATOR	527:18	527:18	21	*
LEAF_NODE	527:18	527:18	22	*
FIELD	527:19	527:22	21	src ++
LEAF_NODE	527:19	527:19	22	src
LEAF_NODE	527:22	527:22	22	++
LEAF_NODE	527:24	527:24	19	]
LEAF_NODE	527:25	527:25	15	;
LABEL	529:5	529:11	12	case 8 :
LEAF_NODE	529:5	529:5	13	case
LEAF_NODE	529:10	529:10	13	8
LEAF_NODE	529:11	529:11	13	:
EXPR_STATEMENT	529:13	529:32	12	acc += bits [ * src ++ ] ;
EXPR	529:13	529:13	13	acc += bits [ * src ++ ]
ASSIGN	529:13	529:20	14	acc += bits [ * src ++ ]
LVAL	529:13	529:13	15	acc
FIELD	529:13	529:13	16	acc
LEAF_NODE	529:13	529:13	17	acc
ASSIGN_OP	529:17	529:17	15	+=
LEAF_NODE	529:17	529:17	16	+=
RVAL	529:20	529:20	15	bits [ * src ++ ]
FIELD	529:20	529:31	16	bits [ * src ++ ]
LEAF_NODE	529:20	529:20	17	bits
LEAF_NODE	529:24	529:24	17	[
EXPR	529:25	529:25	17	* src ++
UNARY_EXPR	529:25	529:26	18	* src ++
UNARY_OPERATOR	529:25	529:25	19	*
LEAF_NODE	529:25	529:25	20	*
FIELD	529:26	529:29	19	src ++
LEAF_NODE	529:26	529:26	20	src
LEAF_NODE	529:29	529:29	20	++
LEAF_NODE	529:31	529:31	17	]
LEAF_NODE	529:32	529:32	13	;
LABEL	530:5	530:11	12	case 7 :
LEAF_NODE	530:5	530:5	13	case
LEAF_NODE	530:10	530:10	13	7
LEAF_NODE	530:11	530:11	13	:
EXPR_STATEMENT	530:13	530:32	12	acc += bits [ * src ++ ] ;
EXPR	530:13	530:13	13	acc += bits [ * src ++ ]
ASSIGN	530:13	530:20	14	acc += bits [ * src ++ ]
LVAL	530:13	530:13	15	acc
FIELD	530:13	530:13	16	acc
LEAF_NODE	530:13	530:13	17	acc
ASSIGN_OP	530:17	530:17	15	+=
LEAF_NODE	530:17	530:17	16	+=
RVAL	530:20	530:20	15	bits [ * src ++ ]
FIELD	530:20	530:31	16	bits [ * src ++ ]
LEAF_NODE	530:20	530:20	17	bits
LEAF_NODE	530:24	530:24	17	[
EXPR	530:25	530:25	17	* src ++
UNARY_EXPR	530:25	530:26	18	* src ++
UNARY_OPERATOR	530:25	530:25	19	*
LEAF_NODE	530:25	530:25	20	*
FIELD	530:26	530:29	19	src ++
LEAF_NODE	530:26	530:26	20	src
LEAF_NODE	530:29	530:29	20	++
LEAF_NODE	530:31	530:31	17	]
LEAF_NODE	530:32	530:32	13	;
LABEL	531:5	531:11	12	case 6 :
LEAF_NODE	531:5	531:5	13	case
LEAF_NODE	531:10	531:10	13	6
LEAF_NODE	531:11	531:11	13	:
EXPR_STATEMENT	531:13	531:32	12	acc += bits [ * src ++ ] ;
EXPR	531:13	531:13	13	acc += bits [ * src ++ ]
ASSIGN	531:13	531:20	14	acc += bits [ * src ++ ]
LVAL	531:13	531:13	15	acc
FIELD	531:13	531:13	16	acc
LEAF_NODE	531:13	531:13	17	acc
ASSIGN_OP	531:17	531:17	15	+=
LEAF_NODE	531:17	531:17	16	+=
RVAL	531:20	531:20	15	bits [ * src ++ ]
FIELD	531:20	531:31	16	bits [ * src ++ ]
LEAF_NODE	531:20	531:20	17	bits
LEAF_NODE	531:24	531:24	17	[
EXPR	531:25	531:25	17	* src ++
UNARY_EXPR	531:25	531:26	18	* src ++
UNARY_OPERATOR	531:25	531:25	19	*
LEAF_NODE	531:25	531:25	20	*
FIELD	531:26	531:29	19	src ++
LEAF_NODE	531:26	531:26	20	src
LEAF_NODE	531:29	531:29	20	++
LEAF_NODE	531:31	531:31	17	]
LEAF_NODE	531:32	531:32	13	;
LABEL	532:5	532:11	12	case 5 :
LEAF_NODE	532:5	532:5	13	case
LEAF_NODE	532:10	532:10	13	5
LEAF_NODE	532:11	532:11	13	:
EXPR_STATEMENT	532:13	532:32	12	acc += bits [ * src ++ ] ;
EXPR	532:13	532:13	13	acc += bits [ * src ++ ]
ASSIGN	532:13	532:20	14	acc += bits [ * src ++ ]
LVAL	532:13	532:13	15	acc
FIELD	532:13	532:13	16	acc
LEAF_NODE	532:13	532:13	17	acc
ASSIGN_OP	532:17	532:17	15	+=
LEAF_NODE	532:17	532:17	16	+=
RVAL	532:20	532:20	15	bits [ * src ++ ]
FIELD	532:20	532:31	16	bits [ * src ++ ]
LEAF_NODE	532:20	532:20	17	bits
LEAF_NODE	532:24	532:24	17	[
EXPR	532:25	532:25	17	* src ++
UNARY_EXPR	532:25	532:26	18	* src ++
UNARY_OPERATOR	532:25	532:25	19	*
LEAF_NODE	532:25	532:25	20	*
FIELD	532:26	532:29	19	src ++
LEAF_NODE	532:26	532:26	20	src
LEAF_NODE	532:29	532:29	20	++
LEAF_NODE	532:31	532:31	17	]
LEAF_NODE	532:32	532:32	13	;
LABEL	533:5	533:11	12	case 4 :
LEAF_NODE	533:5	533:5	13	case
LEAF_NODE	533:10	533:10	13	4
LEAF_NODE	533:11	533:11	13	:
EXPR_STATEMENT	533:13	533:32	12	acc += bits [ * src ++ ] ;
EXPR	533:13	533:13	13	acc += bits [ * src ++ ]
ASSIGN	533:13	533:20	14	acc += bits [ * src ++ ]
LVAL	533:13	533:13	15	acc
FIELD	533:13	533:13	16	acc
LEAF_NODE	533:13	533:13	17	acc
ASSIGN_OP	533:17	533:17	15	+=
LEAF_NODE	533:17	533:17	16	+=
RVAL	533:20	533:20	15	bits [ * src ++ ]
FIELD	533:20	533:31	16	bits [ * src ++ ]
LEAF_NODE	533:20	533:20	17	bits
LEAF_NODE	533:24	533:24	17	[
EXPR	533:25	533:25	17	* src ++
UNARY_EXPR	533:25	533:26	18	* src ++
UNARY_OPERATOR	533:25	533:25	19	*
LEAF_NODE	533:25	533:25	20	*
FIELD	533:26	533:29	19	src ++
LEAF_NODE	533:26	533:26	20	src
LEAF_NODE	533:29	533:29	20	++
LEAF_NODE	533:31	533:31	17	]
LEAF_NODE	533:32	533:32	13	;
LABEL	534:5	534:11	12	case 3 :
LEAF_NODE	534:5	534:5	13	case
LEAF_NODE	534:10	534:10	13	3
LEAF_NODE	534:11	534:11	13	:
EXPR_STATEMENT	534:13	534:32	12	acc += bits [ * src ++ ] ;
EXPR	534:13	534:13	13	acc += bits [ * src ++ ]
ASSIGN	534:13	534:20	14	acc += bits [ * src ++ ]
LVAL	534:13	534:13	15	acc
FIELD	534:13	534:13	16	acc
LEAF_NODE	534:13	534:13	17	acc
ASSIGN_OP	534:17	534:17	15	+=
LEAF_NODE	534:17	534:17	16	+=
RVAL	534:20	534:20	15	bits [ * src ++ ]
FIELD	534:20	534:31	16	bits [ * src ++ ]
LEAF_NODE	534:20	534:20	17	bits
LEAF_NODE	534:24	534:24	17	[
EXPR	534:25	534:25	17	* src ++
UNARY_EXPR	534:25	534:26	18	* src ++
UNARY_OPERATOR	534:25	534:25	19	*
LEAF_NODE	534:25	534:25	20	*
FIELD	534:26	534:29	19	src ++
LEAF_NODE	534:26	534:26	20	src
LEAF_NODE	534:29	534:29	20	++
LEAF_NODE	534:31	534:31	17	]
LEAF_NODE	534:32	534:32	13	;
LABEL	535:5	535:11	12	case 2 :
LEAF_NODE	535:5	535:5	13	case
LEAF_NODE	535:10	535:10	13	2
LEAF_NODE	535:11	535:11	13	:
EXPR_STATEMENT	535:13	535:32	12	acc += bits [ * src ++ ] ;
EXPR	535:13	535:13	13	acc += bits [ * src ++ ]
ASSIGN	535:13	535:20	14	acc += bits [ * src ++ ]
LVAL	535:13	535:13	15	acc
FIELD	535:13	535:13	16	acc
LEAF_NODE	535:13	535:13	17	acc
ASSIGN_OP	535:17	535:17	15	+=
LEAF_NODE	535:17	535:17	16	+=
RVAL	535:20	535:20	15	bits [ * src ++ ]
FIELD	535:20	535:31	16	bits [ * src ++ ]
LEAF_NODE	535:20	535:20	17	bits
LEAF_NODE	535:24	535:24	17	[
EXPR	535:25	535:25	17	* src ++
UNARY_EXPR	535:25	535:26	18	* src ++
UNARY_OPERATOR	535:25	535:25	19	*
LEAF_NODE	535:25	535:25	20	*
FIELD	535:26	535:29	19	src ++
LEAF_NODE	535:26	535:26	20	src
LEAF_NODE	535:29	535:29	20	++
LEAF_NODE	535:31	535:31	17	]
LEAF_NODE	535:32	535:32	13	;
LABEL	536:5	536:11	12	case 1 :
LEAF_NODE	536:5	536:5	13	case
LEAF_NODE	536:10	536:10	13	1
LEAF_NODE	536:11	536:11	13	:
EXPR_STATEMENT	536:13	536:32	12	acc += bits [ * src ++ ] ;
EXPR	536:13	536:13	13	acc += bits [ * src ++ ]
ASSIGN	536:13	536:20	14	acc += bits [ * src ++ ]
LVAL	536:13	536:13	15	acc
FIELD	536:13	536:13	16	acc
LEAF_NODE	536:13	536:13	17	acc
ASSIGN_OP	536:17	536:17	15	+=
LEAF_NODE	536:17	536:17	16	+=
RVAL	536:20	536:20	15	bits [ * src ++ ]
FIELD	536:20	536:31	16	bits [ * src ++ ]
LEAF_NODE	536:20	536:20	17	bits
LEAF_NODE	536:24	536:24	17	[
EXPR	536:25	536:25	17	* src ++
UNARY_EXPR	536:25	536:26	18	* src ++
UNARY_OPERATOR	536:25	536:25	19	*
LEAF_NODE	536:25	536:25	20	*
FIELD	536:26	536:29	19	src ++
LEAF_NODE	536:26	536:26	20	src
LEAF_NODE	536:29	536:29	20	++
LEAF_NODE	536:31	536:31	17	]
LEAF_NODE	536:32	536:32	13	;
LABEL	537:5	537:11	12	case 0 :
LEAF_NODE	537:5	537:5	13	case
LEAF_NODE	537:10	537:10	13	0
LEAF_NODE	537:11	537:11	13	:
JUMP_STATEMENT	537:13	537:18	12	break DESTINATION ;
KEYWORD	537:13	537:13	13	break
LEAF_NODE	537:13	537:13	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	537:18	537:18	13	;
LEAF_NODE	538:5	538:5	11	}
EXPR_STATEMENT	539:5	539:30	9	acc += bits [ * src & mask1 ] ;
EXPR	539:5	539:5	10	acc += bits [ * src & mask1 ]
ASSIGN	539:5	539:12	11	acc += bits [ * src & mask1 ]
LVAL	539:5	539:5	12	acc
FIELD	539:5	539:5	13	acc
LEAF_NODE	539:5	539:5	14	acc
ASSIGN_OP	539:9	539:9	12	+=
LEAF_NODE	539:9	539:9	13	+=
RVAL	539:12	539:12	12	bits [ * src & mask1 ]
FIELD	539:12	539:29	13	bits [ * src & mask1 ]
LEAF_NODE	539:12	539:12	14	bits
LEAF_NODE	539:16	539:16	14	[
EXPR	539:17	539:24	14	* src & mask1
UNARY_EXPR	539:17	539:18	15	* src
UNARY_OPERATOR	539:17	539:17	16	*
LEAF_NODE	539:17	539:17	17	*
FIELD	539:18	539:18	16	src
LEAF_NODE	539:18	539:18	17	src
LEAF_NODE	539:22	539:22	15	&
FIELD	539:24	539:24	15	mask1
LEAF_NODE	539:24	539:24	16	mask1
LEAF_NODE	539:29	539:29	14	]
LEAF_NODE	539:30	539:30	10	;
LEAF_NODE	540:1	540:1	8	}
EXPR_STATEMENT	541:1	541:30	6	* row ++ = cmap [ ( 255 * acc ) / area ] ;
EXPR	541:1	541:1	7	* row ++ = cmap [ ( 255 * acc ) / area ]
ASSIGN	541:1	541:10	8	* row ++ = cmap [ ( 255 * acc ) / area ]
LVAL	541:1	541:1	9	* row ++
UNARY_EXPR	541:1	541:2	10	* row ++
UNARY_OPERATOR	541:1	541:1	11	*
LEAF_NODE	541:1	541:1	12	*
FIELD	541:2	541:5	11	row ++
LEAF_NODE	541:2	541:2	12	row
LEAF_NODE	541:5	541:5	12	++
ASSIGN_OP	541:8	541:8	9	=
LEAF_NODE	541:8	541:8	10	=
RVAL	541:10	541:10	9	cmap [ ( 255 * acc ) / area ]
FIELD	541:10	541:29	10	cmap [ ( 255 * acc ) / area ]
LEAF_NODE	541:10	541:10	11	cmap
LEAF_NODE	541:14	541:14	11	[
EXPR	541:15	541:25	11	( 255 * acc ) / area
LEAF_NODE	541:15	541:15	12	(
FIELD	541:16	541:16	12	255
LEAF_NODE	541:16	541:16	13	255
LEAF_NODE	541:19	541:19	12	*
FIELD	541:20	541:20	12	acc
LEAF_NODE	541:20	541:20	13	acc
LEAF_NODE	541:23	541:23	12	)
LEAF_NODE	541:24	541:24	12	/
FIELD	541:25	541:25	12	area
LEAF_NODE	541:25	541:25	13	area
LEAF_NODE	541:29	541:29	11	]
LEAF_NODE	541:30	541:30	7	;
LEAF_NODE	542:4	542:4	5	}
LEAF_NODE	543:0	543:0	2	}
FUNCTION_DEF	551:0	582:0	1	
RETURN_TYPE	551:0	551:7	2	static void
LEAF_NODE	551:0	551:0	3	static
TYPE_NAME	551:7	551:7	3	void
LEAF_NODE	551:7	551:7	4	void
FUNCTION_NAME	552:0	552:0	2	setImage1
LEAF_NODE	552:0	552:0	3	setImage1
PARAMETER_LIST	552:9	552:47	2	( const uint8 * br , uint32 rw , uint32 rh )
LEAF_NODE	552:9	552:9	3	(
PARAMETER_DECL	552:10	552:23	3	const uint8 * br
TYPE	552:10	552:21	4	const uint8 *
TYPE_NAME	552:10	552:16	5	const uint8
LEAF_NODE	552:10	552:10	6	const
LEAF_NODE	552:16	552:16	6	uint8
POINTER	552:21	552:21	5	*
LEAF_NODE	552:21	552:21	6	*
NAME	552:23	552:23	4	br
LEAF_NODE	552:23	552:23	5	br
LEAF_NODE	552:25	552:25	3	,
PARAMETER_DECL	552:27	552:34	3	uint32 rw
TYPE	552:27	552:27	4	uint32
TYPE_NAME	552:27	552:27	5	uint32
LEAF_NODE	552:27	552:27	6	uint32
NAME	552:34	552:34	4	rw
LEAF_NODE	552:34	552:34	5	rw
LEAF_NODE	552:36	552:36	3	,
PARAMETER_DECL	552:38	552:45	3	uint32 rh
TYPE	552:38	552:38	4	uint32
TYPE_NAME	552:38	552:38	5	uint32
LEAF_NODE	552:38	552:38	6	uint32
NAME	552:45	552:45	4	rh
LEAF_NODE	552:45	552:45	5	rh
LEAF_NODE	552:47	552:47	3	)
LEAF_NODE	553:0	553:0	2	{
STATEMENTS	554:4	561:4	2	
SIMPLE_DECL	554:4	554:17	3	int step ; step = rh ;
VAR_DECL	554:4	554:8	4	int step ; step = rh
TYPE	554:4	554:4	5	int
TYPE_NAME	554:4	554:4	6	int
LEAF_NODE	554:4	554:4	7	int
NAME	554:8	554:8	5	step
LEAF_NODE	554:8	554:8	6	step
LEAF_NODE	0:0	0:0	5	;
INIT	554:8	554:8	5	step = rh
ASSIGN	554:8	554:15	6	step = rh
LVAL	554:8	554:8	7	step
NAME	554:8	554:8	8	step
LEAF_NODE	554:8	554:8	9	step
ASSIGN_OP	554:13	554:13	7	=
LEAF_NODE	554:13	554:13	8	=
RVAL	554:15	554:15	7	rh
FIELD	554:15	554:15	8	rh
LEAF_NODE	554:15	554:15	9	rh
LEAF_NODE	554:17	554:17	4	;
SIMPLE_DECL	555:4	555:19	3	int limit ; limit = tnh ;
VAR_DECL	555:4	555:8	4	int limit ; limit = tnh
TYPE	555:4	555:4	5	int
TYPE_NAME	555:4	555:4	6	int
LEAF_NODE	555:4	555:4	7	int
NAME	555:8	555:8	5	limit
LEAF_NODE	555:8	555:8	6	limit
LEAF_NODE	0:0	0:0	5	;
INIT	555:8	555:8	5	limit = tnh
ASSIGN	555:8	555:16	6	limit = tnh
LVAL	555:8	555:8	7	limit
NAME	555:8	555:8	8	limit
LEAF_NODE	555:8	555:8	9	limit
ASSIGN_OP	555:14	555:14	7	=
LEAF_NODE	555:14	555:14	8	=
RVAL	555:16	555:16	7	tnh
FIELD	555:16	555:16	8	tnh
LEAF_NODE	555:16	555:16	9	tnh
LEAF_NODE	555:19	555:19	4	;
SIMPLE_DECL	556:4	556:15	3	int err ; err = 0 ;
VAR_DECL	556:4	556:8	4	int err ; err = 0
TYPE	556:4	556:4	5	int
TYPE_NAME	556:4	556:4	6	int
LEAF_NODE	556:4	556:4	7	int
NAME	556:8	556:8	5	err
LEAF_NODE	556:8	556:8	6	err
LEAF_NODE	0:0	0:0	5	;
INIT	556:8	556:8	5	err = 0
ASSIGN	556:8	556:14	6	err = 0
LVAL	556:8	556:8	7	err
NAME	556:8	556:8	8	err
LEAF_NODE	556:8	556:8	9	err
ASSIGN_OP	556:12	556:12	7	=
LEAF_NODE	556:12	556:12	8	=
RVAL	556:14	556:14	7	0
FIELD	556:14	556:14	8	0
LEAF_NODE	556:14	556:14	9	0
LEAF_NODE	556:15	556:15	4	;
SIMPLE_DECL	557:4	557:30	3	int bpr ; bpr = TIFFhowmany8 ( rw ) ;
VAR_DECL	557:4	557:8	4	int bpr ; bpr = TIFFhowmany8 ( rw )
TYPE	557:4	557:4	5	int
TYPE_NAME	557:4	557:4	6	int
LEAF_NODE	557:4	557:4	7	int
NAME	557:8	557:8	5	bpr
LEAF_NODE	557:8	557:8	6	bpr
LEAF_NODE	0:0	0:0	5	;
INIT	557:8	557:8	5	bpr = TIFFhowmany8 ( rw )
ASSIGN	557:8	557:14	6	bpr = TIFFhowmany8 ( rw )
LVAL	557:8	557:8	7	bpr
NAME	557:8	557:8	8	bpr
LEAF_NODE	557:8	557:8	9	bpr
ASSIGN_OP	557:12	557:12	7	=
LEAF_NODE	557:12	557:12	8	=
RVAL	557:14	557:14	7	TIFFhowmany8 ( rw )
FUNCTION_CALL	557:14	557:29	8	TIFFhowmany8 ( rw )
CALLEE	557:14	557:14	9	TIFFhowmany8
LEAF_NODE	557:14	557:14	10	TIFFhowmany8
LEAF_NODE	557:26	557:26	9	(
ARGUMENT	557:27	557:27	9	rw
FIELD	557:27	557:27	10	rw
LEAF_NODE	557:27	557:27	11	rw
LEAF_NODE	557:29	557:29	9	)
LEAF_NODE	557:30	557:30	4	;
SIMPLE_DECL	558:4	558:14	3	int sy ; sy = 0 ;
VAR_DECL	558:4	558:8	4	int sy ; sy = 0
TYPE	558:4	558:4	5	int
TYPE_NAME	558:4	558:4	6	int
LEAF_NODE	558:4	558:4	7	int
NAME	558:8	558:8	5	sy
LEAF_NODE	558:8	558:8	6	sy
LEAF_NODE	0:0	0:0	5	;
INIT	558:8	558:8	5	sy = 0
ASSIGN	558:8	558:13	6	sy = 0
LVAL	558:8	558:8	7	sy
NAME	558:8	558:8	8	sy
LEAF_NODE	558:8	558:8	9	sy
ASSIGN_OP	558:11	558:11	7	=
LEAF_NODE	558:11	558:11	8	=
RVAL	558:13	558:13	7	0
FIELD	558:13	558:13	8	0
LEAF_NODE	558:13	558:13	9	0
LEAF_NODE	558:14	558:14	4	;
SIMPLE_DECL	559:4	559:26	3	uint8 * row ; row = thumbnail ;
VAR_DECL	559:4	559:11	4	uint8 * row ; row = thumbnail
TYPE	559:4	559:9	5	uint8 *
TYPE_NAME	559:4	559:4	6	uint8
LEAF_NODE	559:4	559:4	7	uint8
POINTER	559:9	559:9	6	*
LEAF_NODE	559:9	559:9	7	*
NAME	559:11	559:11	5	row
LEAF_NODE	559:11	559:11	6	row
LEAF_NODE	0:0	0:0	5	;
INIT	559:11	559:11	5	row = thumbnail
ASSIGN	559:11	559:17	6	row = thumbnail
LVAL	559:11	559:11	7	row
NAME	559:11	559:11	8	row
LEAF_NODE	559:11	559:11	9	row
ASSIGN_OP	559:15	559:15	7	=
LEAF_NODE	559:15	559:15	8	=
RVAL	559:17	559:17	7	thumbnail
FIELD	559:17	559:17	8	thumbnail
LEAF_NODE	559:17	559:17	9	thumbnail
LEAF_NODE	559:26	559:26	4	;
SIMPLE_DECL	560:4	560:13	3	uint32 dy ;
VAR_DECL	560:4	560:11	4	uint32 dy
TYPE	560:4	560:4	5	uint32
TYPE_NAME	560:4	560:4	6	uint32
LEAF_NODE	560:4	560:4	7	uint32
NAME	560:11	560:11	5	dy
LEAF_NODE	560:11	560:11	6	dy
LEAF_NODE	560:13	560:13	4	;
ITERATION	561:4	561:33	3	
KEYWORD	561:4	561:4	4	for
LEAF_NODE	561:4	561:4	5	for
LEAF_NODE	561:8	561:8	4	(
FOR_INIT	561:9	561:15	4	dy = 0 ;
EXPR	561:9	561:9	5	dy = 0
ASSIGN	561:9	561:14	6	dy = 0
LVAL	561:9	561:9	7	dy
FIELD	561:9	561:9	8	dy
LEAF_NODE	561:9	561:9	9	dy
ASSIGN_OP	561:12	561:12	7	=
LEAF_NODE	561:12	561:12	8	=
RVAL	561:14	561:14	7	0
FIELD	561:14	561:14	8	0
LEAF_NODE	561:14	561:14	9	0
LEAF_NODE	561:15	561:15	5	;
CONDITION	561:17	561:17	4	dy < tnh
EXPR	561:17	561:22	5	dy < tnh
FIELD	561:17	561:17	6	dy
LEAF_NODE	561:17	561:17	7	dy
REL_OPERATOR	561:20	561:20	6	<
LEAF_NODE	561:20	561:20	7	<
FIELD	561:22	561:22	6	tnh
LEAF_NODE	561:22	561:22	7	tnh
LEAF_NODE	561:25	561:25	4	;
FOR_EXPR	561:27	561:27	4	dy ++
EXPR	561:27	561:27	5	dy ++
FIELD	561:27	561:29	6	dy ++
LEAF_NODE	561:27	561:27	7	dy
LEAF_NODE	561:29	561:29	7	++
LEAF_NODE	561:31	561:31	4	)
STATEMENTS	561:33	581:4	4	
LEAF_NODE	561:33	561:33	5	{
STATEMENTS	562:1	580:1	5	
SIMPLE_DECL	562:1	562:23	6	const uint8 * [ 256 ] rows ;
VAR_DECL	562:1	562:14	7	const uint8 * [ 256 ] rows
TYPE	562:1	562:18	8	const uint8 * [ 256 ]
TYPE_NAME	562:1	562:7	9	const uint8
LEAF_NODE	562:1	562:1	10	const
LEAF_NODE	562:7	562:7	10	uint8
POINTER	562:12	562:12	9	*
LEAF_NODE	562:12	562:12	10	*
TYPE_SUFFIX	562:18	562:22	9	[ 256 ]
LEAF_NODE	562:18	562:18	10	[
FIELD	562:19	562:19	10	256
LEAF_NODE	562:19	562:19	11	256
LEAF_NODE	562:22	562:22	10	]
NAME	562:14	562:14	8	rows
LEAF_NODE	562:14	562:14	9	rows
LEAF_NODE	562:23	562:23	7	;
SIMPLE_DECL	563:1	563:17	6	uint32 nrows ; nrows = 1 ;
VAR_DECL	563:1	563:8	7	uint32 nrows ; nrows = 1
TYPE	563:1	563:1	8	uint32
TYPE_NAME	563:1	563:1	9	uint32
LEAF_NODE	563:1	563:1	10	uint32
NAME	563:8	563:8	8	nrows
LEAF_NODE	563:8	563:8	9	nrows
LEAF_NODE	0:0	0:0	8	;
INIT	563:8	563:8	8	nrows = 1
ASSIGN	563:8	563:16	9	nrows = 1
LVAL	563:8	563:8	10	nrows
NAME	563:8	563:8	11	nrows
LEAF_NODE	563:8	563:8	12	nrows
ASSIGN_OP	563:14	563:14	10	=
LEAF_NODE	563:14	563:14	11	=
RVAL	563:16	563:16	10	1
FIELD	563:16	563:16	11	1
LEAF_NODE	563:16	563:16	12	1
LEAF_NODE	563:17	563:17	7	;
EXPR_STATEMENT	564:1	564:63	6	fprintf ( stderr , "bpr=%d, sy=%d, bpr*sy=%d\n" , bpr , sy , bpr * sy ) ;
EXPR	564:1	564:1	7	fprintf ( stderr , "bpr=%d, sy=%d, bpr*sy=%d\n" , bpr , sy , bpr * sy )
FUNCTION_CALL	564:1	564:62	8	fprintf ( stderr , "bpr=%d, sy=%d, bpr*sy=%d\n" , bpr , sy , bpr * sy )
CALLEE	564:1	564:1	9	fprintf
LEAF_NODE	564:1	564:1	10	fprintf
LEAF_NODE	564:8	564:8	9	(
ARGUMENT	564:9	564:9	9	stderr
FIELD	564:9	564:9	10	stderr
LEAF_NODE	564:9	564:9	11	stderr
LEAF_NODE	564:15	564:15	9	,
ARGUMENT	564:17	564:17	9	"bpr=%d, sy=%d, bpr*sy=%d\n"
FIELD	564:17	564:17	10	"bpr=%d, sy=%d, bpr*sy=%d\n"
LEAF_NODE	564:17	564:17	11	"bpr=%d, sy=%d, bpr*sy=%d\n"
LEAF_NODE	564:45	564:45	9	,
ARGUMENT	564:47	564:47	9	bpr
FIELD	564:47	564:47	10	bpr
LEAF_NODE	564:47	564:47	11	bpr
LEAF_NODE	564:50	564:50	9	,
ARGUMENT	564:52	564:52	9	sy
FIELD	564:52	564:52	10	sy
LEAF_NODE	564:52	564:52	11	sy
LEAF_NODE	564:54	564:54	9	,
ARGUMENT	564:56	564:60	9	bpr * sy
FIELD	564:56	564:56	10	bpr
LEAF_NODE	564:56	564:56	11	bpr
LEAF_NODE	564:59	564:59	10	*
FIELD	564:60	564:60	10	sy
LEAF_NODE	564:60	564:60	11	sy
LEAF_NODE	564:62	564:62	9	)
LEAF_NODE	564:63	564:63	7	;
EXPR_STATEMENT	565:1	565:22	6	rows [ 0 ] = br + bpr * sy ;
EXPR	565:1	565:1	7	rows [ 0 ] = br + bpr * sy
ASSIGN	565:1	565:11	8	rows [ 0 ] = br + bpr * sy
LVAL	565:1	565:1	9	rows [ 0 ]
FIELD	565:1	565:7	10	rows [ 0 ]
LEAF_NODE	565:1	565:1	11	rows
LEAF_NODE	565:5	565:5	11	[
EXPR	565:6	565:6	11	0
FIELD	565:6	565:6	12	0
LEAF_NODE	565:6	565:6	13	0
LEAF_NODE	565:7	565:7	11	]
ASSIGN_OP	565:9	565:9	9	=
LEAF_NODE	565:9	565:9	10	=
RVAL	565:11	565:20	9	br + bpr * sy
FIELD	565:11	565:11	10	br
LEAF_NODE	565:11	565:11	11	br
LEAF_NODE	565:14	565:14	10	+
FIELD	565:16	565:16	10	bpr
LEAF_NODE	565:16	565:16	11	bpr
LEAF_NODE	565:19	565:19	10	*
FIELD	565:20	565:20	10	sy
LEAF_NODE	565:20	565:20	11	sy
LEAF_NODE	565:22	565:22	7	;
EXPR_STATEMENT	566:1	566:12	6	err += step ;
EXPR	566:1	566:1	7	err += step
ASSIGN	566:1	566:8	8	err += step
LVAL	566:1	566:1	9	err
FIELD	566:1	566:1	10	err
LEAF_NODE	566:1	566:1	11	err
ASSIGN_OP	566:5	566:5	9	+=
LEAF_NODE	566:5	566:5	10	+=
RVAL	566:8	566:8	9	step
FIELD	566:8	566:8	10	step
LEAF_NODE	566:8	566:8	11	step
LEAF_NODE	566:12	566:12	7	;
ITERATION	567:1	567:22	6	
KEYWORD	567:1	567:1	7	while
LEAF_NODE	567:1	567:1	8	while
LEAF_NODE	567:7	567:7	7	(
CONDITION	567:8	567:8	7	err >= limit
EXPR	567:8	567:15	8	err >= limit
FIELD	567:8	567:8	9	err
LEAF_NODE	567:8	567:8	10	err
REL_OPERATOR	567:12	567:12	9	>=
LEAF_NODE	567:12	567:12	10	>=
FIELD	567:15	567:15	9	limit
LEAF_NODE	567:15	567:15	10	limit
LEAF_NODE	567:20	567:20	7	)
STATEMENTS	567:22	578:1	7	
LEAF_NODE	567:22	567:22	8	{
STATEMENTS	568:5	570:5	8	
EXPR_STATEMENT	568:5	568:17	9	err -= limit ;
EXPR	568:5	568:5	10	err -= limit
ASSIGN	568:5	568:12	11	err -= limit
LVAL	568:5	568:5	12	err
FIELD	568:5	568:5	13	err
LEAF_NODE	568:5	568:5	14	err
ASSIGN_OP	568:9	568:9	12	-=
LEAF_NODE	568:9	568:9	13	-=
RVAL	568:12	568:12	12	limit
FIELD	568:12	568:12	13	limit
LEAF_NODE	568:12	568:12	14	limit
LEAF_NODE	568:17	568:17	10	;
EXPR_STATEMENT	569:5	569:9	9	sy ++ ;
EXPR	569:5	569:5	10	sy ++
FIELD	569:5	569:7	11	sy ++
LEAF_NODE	569:5	569:5	12	sy
LEAF_NODE	569:7	569:7	12	++
LEAF_NODE	569:9	569:9	10	;
SELECTION	570:5	571:2	9	
KEYWORD	570:5	570:5	10	if
LEAF_NODE	570:5	570:5	11	if
LEAF_NODE	570:8	570:8	10	(
CONDITION	570:9	570:9	10	err >= limit
EXPR	570:9	570:16	11	err >= limit
FIELD	570:9	570:9	12	err
LEAF_NODE	570:9	570:9	13	err
REL_OPERATOR	570:13	570:13	12	>=
LEAF_NODE	570:13	570:13	13	>=
FIELD	570:16	570:16	12	limit
LEAF_NODE	570:16	570:16	13	limit
LEAF_NODE	570:21	570:21	10	)
STATEMENTS	571:2	577:2	10	
LEAF_NODE	571:2	571:2	11	{
STATEMENTS	574:3	576:3	11	
SELECTION	574:3	575:4	12	
KEYWORD	574:3	574:3	13	if
LEAF_NODE	574:3	574:3	14	if
LEAF_NODE	574:5	574:5	13	(
CONDITION	574:7	574:7	13	nrows == 256
EXPR	574:7	574:16	14	nrows == 256
FIELD	574:7	574:7	15	nrows
LEAF_NODE	574:7	574:7	16	nrows
EQ_OPERATOR	574:13	574:13	15	==
LEAF_NODE	574:13	574:13	16	==
FIELD	574:16	574:16	15	256
LEAF_NODE	574:16	574:16	16	256
LEAF_NODE	574:20	574:20	13	)
STATEMENTS	575:4	575:4	13	
JUMP_STATEMENT	575:4	575:9	14	break DESTINATION ;
KEYWORD	575:4	575:4	15	break
LEAF_NODE	575:4	575:4	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	575:9	575:9	15	;
EXPR_STATEMENT	576:3	576:30	12	rows [ nrows ++ ] = br + bpr * sy ;
EXPR	576:3	576:3	13	rows [ nrows ++ ] = br + bpr * sy
ASSIGN	576:3	576:19	14	rows [ nrows ++ ] = br + bpr * sy
LVAL	576:3	576:3	15	rows [ nrows ++ ]
FIELD	576:3	576:15	16	rows [ nrows ++ ]
LEAF_NODE	576:3	576:3	17	rows
LEAF_NODE	576:7	576:7	17	[
EXPR	576:8	576:8	17	nrows ++
FIELD	576:8	576:13	18	nrows ++
LEAF_NODE	576:8	576:8	19	nrows
LEAF_NODE	576:13	576:13	19	++
LEAF_NODE	576:15	576:15	17	]
ASSIGN_OP	576:17	576:17	15	=
LEAF_NODE	576:17	576:17	16	=
RVAL	576:19	576:28	15	br + bpr * sy
FIELD	576:19	576:19	16	br
LEAF_NODE	576:19	576:19	17	br
LEAF_NODE	576:22	576:22	16	+
FIELD	576:24	576:24	16	bpr
LEAF_NODE	576:24	576:24	17	bpr
LEAF_NODE	576:27	576:27	16	*
FIELD	576:28	576:28	16	sy
LEAF_NODE	576:28	576:28	17	sy
LEAF_NODE	576:30	576:30	13	;
LEAF_NODE	577:2	577:2	11	}
LEAF_NODE	578:1	578:1	8	}
EXPR_STATEMENT	579:1	579:25	6	setrow ( row , nrows , rows ) ;
EXPR	579:1	579:1	7	setrow ( row , nrows , rows )
FUNCTION_CALL	579:1	579:24	8	setrow ( row , nrows , rows )
CALLEE	579:1	579:1	9	setrow
LEAF_NODE	579:1	579:1	10	setrow
LEAF_NODE	579:7	579:7	9	(
ARGUMENT	579:8	579:8	9	row
FIELD	579:8	579:8	10	row
LEAF_NODE	579:8	579:8	11	row
LEAF_NODE	579:11	579:11	9	,
ARGUMENT	579:13	579:13	9	nrows
FIELD	579:13	579:13	10	nrows
LEAF_NODE	579:13	579:13	11	nrows
LEAF_NODE	579:18	579:18	9	,
ARGUMENT	579:20	579:20	9	rows
FIELD	579:20	579:20	10	rows
LEAF_NODE	579:20	579:20	11	rows
LEAF_NODE	579:24	579:24	9	)
LEAF_NODE	579:25	579:25	7	;
EXPR_STATEMENT	580:1	580:11	6	row += tnw ;
EXPR	580:1	580:1	7	row += tnw
ASSIGN	580:1	580:8	8	row += tnw
LVAL	580:1	580:1	9	row
FIELD	580:1	580:1	10	row
LEAF_NODE	580:1	580:1	11	row
ASSIGN_OP	580:5	580:5	9	+=
LEAF_NODE	580:5	580:5	10	+=
RVAL	580:8	580:8	9	tnw
FIELD	580:8	580:8	10	tnw
LEAF_NODE	580:8	580:8	11	tnw
LEAF_NODE	580:11	580:11	7	;
LEAF_NODE	581:4	581:4	5	}
LEAF_NODE	582:0	582:0	2	}
FUNCTION_DEF	584:0	590:0	1	
RETURN_TYPE	584:0	584:7	2	static void
LEAF_NODE	584:0	584:0	3	static
TYPE_NAME	584:7	584:7	3	void
LEAF_NODE	584:7	584:7	4	void
FUNCTION_NAME	585:0	585:0	2	setImage
LEAF_NODE	585:0	585:0	3	setImage
PARAMETER_LIST	585:8	585:46	2	( const uint8 * br , uint32 rw , uint32 rh )
LEAF_NODE	585:8	585:8	3	(
PARAMETER_DECL	585:9	585:22	3	const uint8 * br
TYPE	585:9	585:20	4	const uint8 *
TYPE_NAME	585:9	585:15	5	const uint8
LEAF_NODE	585:9	585:9	6	const
LEAF_NODE	585:15	585:15	6	uint8
POINTER	585:20	585:20	5	*
LEAF_NODE	585:20	585:20	6	*
NAME	585:22	585:22	4	br
LEAF_NODE	585:22	585:22	5	br
LEAF_NODE	585:24	585:24	3	,
PARAMETER_DECL	585:26	585:33	3	uint32 rw
TYPE	585:26	585:26	4	uint32
TYPE_NAME	585:26	585:26	5	uint32
LEAF_NODE	585:26	585:26	6	uint32
NAME	585:33	585:33	4	rw
LEAF_NODE	585:33	585:33	5	rw
LEAF_NODE	585:35	585:35	3	,
PARAMETER_DECL	585:37	585:44	3	uint32 rh
TYPE	585:37	585:37	4	uint32
TYPE_NAME	585:37	585:37	5	uint32
LEAF_NODE	585:37	585:37	6	uint32
NAME	585:44	585:44	4	rh
LEAF_NODE	585:44	585:44	5	rh
LEAF_NODE	585:46	585:46	3	)
LEAF_NODE	586:0	586:0	2	{
STATEMENTS	587:4	589:4	2	
EXPR_STATEMENT	587:4	587:59	3	filterWidth = ( uint16 ) ceil ( ( double ) rw / ( double ) tnw ) ;
EXPR	587:4	587:4	4	filterWidth = ( uint16 ) ceil ( ( double ) rw / ( double ) tnw )
ASSIGN	587:4	587:18	5	filterWidth = ( uint16 ) ceil ( ( double ) rw / ( double ) tnw )
LVAL	587:4	587:4	6	filterWidth
FIELD	587:4	587:4	7	filterWidth
LEAF_NODE	587:4	587:4	8	filterWidth
ASSIGN_OP	587:16	587:16	6	=
LEAF_NODE	587:16	587:16	7	=
RVAL	587:18	587:27	6	( uint16 ) ceil ( ( double ) rw / ( double ) tnw )
LEAF_NODE	587:18	587:18	7	(
TYPE_NAME	587:19	587:19	7	uint16
LEAF_NODE	587:19	587:19	8	uint16
LEAF_NODE	587:25	587:25	7	)
FUNCTION_CALL	587:27	587:58	7	ceil ( ( double ) rw / ( double ) tnw )
CALLEE	587:27	587:27	8	ceil
LEAF_NODE	587:27	587:27	9	ceil
LEAF_NODE	587:31	587:31	8	(
ARGUMENT	587:32	587:55	8	( double ) rw / ( double ) tnw
LEAF_NODE	587:32	587:32	9	(
TYPE_NAME	587:33	587:33	9	double
LEAF_NODE	587:33	587:33	10	double
LEAF_NODE	587:39	587:39	9	)
FIELD	587:41	587:41	9	rw
LEAF_NODE	587:41	587:41	10	rw
LEAF_NODE	587:44	587:44	9	/
LEAF_NODE	587:46	587:46	9	(
TYPE_NAME	587:47	587:47	9	double
LEAF_NODE	587:47	587:47	10	double
LEAF_NODE	587:53	587:53	9	)
FIELD	587:55	587:55	9	tnw
LEAF_NODE	587:55	587:55	10	tnw
LEAF_NODE	587:58	587:58	8	)
LEAF_NODE	587:59	587:59	4	;
EXPR_STATEMENT	588:4	588:23	3	setupStepTables ( rw ) ;
EXPR	588:4	588:4	4	setupStepTables ( rw )
FUNCTION_CALL	588:4	588:22	5	setupStepTables ( rw )
CALLEE	588:4	588:4	6	setupStepTables
LEAF_NODE	588:4	588:4	7	setupStepTables
LEAF_NODE	588:19	588:19	6	(
ARGUMENT	588:20	588:20	6	rw
FIELD	588:20	588:20	7	rw
LEAF_NODE	588:20	588:20	8	rw
LEAF_NODE	588:22	588:22	6	)
LEAF_NODE	588:23	588:23	4	;
EXPR_STATEMENT	589:4	589:25	3	setImage1 ( br , rw , rh ) ;
EXPR	589:4	589:4	4	setImage1 ( br , rw , rh )
FUNCTION_CALL	589:4	589:24	5	setImage1 ( br , rw , rh )
CALLEE	589:4	589:4	6	setImage1
LEAF_NODE	589:4	589:4	7	setImage1
LEAF_NODE	589:13	589:13	6	(
ARGUMENT	589:14	589:14	6	br
FIELD	589:14	589:14	7	br
LEAF_NODE	589:14	589:14	8	br
LEAF_NODE	589:16	589:16	6	,
ARGUMENT	589:18	589:18	6	rw
FIELD	589:18	589:18	7	rw
LEAF_NODE	589:18	589:18	8	rw
LEAF_NODE	589:20	589:20	6	,
ARGUMENT	589:22	589:22	6	rh
FIELD	589:22	589:22	7	rh
LEAF_NODE	589:22	589:22	8	rh
LEAF_NODE	589:24	589:24	6	)
LEAF_NODE	589:25	589:25	4	;
LEAF_NODE	590:0	590:0	2	}
FUNCTION_DEF	592:0	651:0	1	
RETURN_TYPE	592:0	592:7	2	static int
LEAF_NODE	592:0	592:0	3	static
TYPE_NAME	592:7	592:7	3	int
LEAF_NODE	592:7	592:7	4	int
FUNCTION_NAME	593:0	593:0	2	generateThumbnail
LEAF_NODE	593:0	593:0	3	generateThumbnail
PARAMETER_LIST	593:17	593:37	2	( TIFF * in , TIFF * out )
LEAF_NODE	593:17	593:17	3	(
PARAMETER_DECL	593:18	593:24	3	TIFF * in
TYPE	593:18	593:22	4	TIFF *
TYPE_NAME	593:18	593:18	5	TIFF
LEAF_NODE	593:18	593:18	6	TIFF
POINTER	593:22	593:22	5	*
LEAF_NODE	593:22	593:22	6	*
NAME	593:24	593:24	4	in
LEAF_NODE	593:24	593:24	5	in
LEAF_NODE	593:26	593:26	3	,
PARAMETER_DECL	593:28	593:34	3	TIFF * out
TYPE	593:28	593:32	4	TIFF *
TYPE_NAME	593:28	593:28	5	TIFF
LEAF_NODE	593:28	593:28	6	TIFF
POINTER	593:32	593:32	5	*
LEAF_NODE	593:32	593:32	6	*
NAME	593:34	593:34	4	out
LEAF_NODE	593:34	593:34	5	out
LEAF_NODE	593:37	593:37	3	)
LEAF_NODE	594:0	594:0	2	{
STATEMENTS	595:4	649:4	2	
SIMPLE_DECL	595:4	595:25	3	unsigned char * raster ;
VAR_DECL	595:4	595:19	4	unsigned char * raster
TYPE	595:4	595:17	5	unsigned char *
TYPE_NAME	595:4	595:13	6	unsigned char
LEAF_NODE	595:4	595:4	7	unsigned
LEAF_NODE	595:13	595:13	7	char
POINTER	595:17	595:17	6	*
LEAF_NODE	595:17	595:17	7	*
NAME	595:19	595:19	5	raster
LEAF_NODE	595:19	595:19	6	raster
LEAF_NODE	595:25	595:25	4	;
SIMPLE_DECL	596:4	596:21	3	unsigned char * rp ;
VAR_DECL	596:4	596:19	4	unsigned char * rp
TYPE	596:4	596:17	5	unsigned char *
TYPE_NAME	596:4	596:13	6	unsigned char
LEAF_NODE	596:4	596:4	7	unsigned
LEAF_NODE	596:13	596:13	7	char
POINTER	596:17	596:17	6	*
LEAF_NODE	596:17	596:17	7	*
NAME	596:19	596:19	5	rp
LEAF_NODE	596:19	596:19	6	rp
LEAF_NODE	596:21	596:21	4	;
SIMPLE_DECL	597:4	597:22	3	uint32 sw , uint32 sh , uint32 rps ;
INIT_DECL_LIST	597:4	597:4	4	uint32 sw , uint32 sh , uint32 rps
VAR_DECL	597:4	597:11	5	uint32 sw
TYPE	597:4	597:4	6	uint32
TYPE_NAME	597:4	597:4	7	uint32
LEAF_NODE	597:4	597:4	8	uint32
NAME	597:11	597:11	6	sw
LEAF_NODE	597:11	597:11	7	sw
LEAF_NODE	597:13	597:13	5	,
INIT_DECL_LIST	597:4	597:4	5	uint32 sh , uint32 rps
VAR_DECL	597:4	597:15	6	uint32 sh
TYPE	597:4	597:4	7	uint32
TYPE_NAME	597:4	597:4	8	uint32
LEAF_NODE	597:4	597:4	9	uint32
NAME	597:15	597:15	7	sh
LEAF_NODE	597:15	597:15	8	sh
LEAF_NODE	597:17	597:17	6	,
VAR_DECL	597:4	597:19	6	uint32 rps
TYPE	597:4	597:4	7	uint32
TYPE_NAME	597:4	597:4	8	uint32
LEAF_NODE	597:4	597:4	9	uint32
NAME	597:19	597:19	7	rps
LEAF_NODE	597:19	597:19	8	rps
LEAF_NODE	597:22	597:22	4	;
SIMPLE_DECL	598:4	598:19	3	uint16 bps , uint16 spp ;
INIT_DECL_LIST	598:4	598:4	4	uint16 bps , uint16 spp
VAR_DECL	598:4	598:11	5	uint16 bps
TYPE	598:4	598:4	6	uint16
TYPE_NAME	598:4	598:4	7	uint16
LEAF_NODE	598:4	598:4	8	uint16
NAME	598:11	598:11	6	bps
LEAF_NODE	598:11	598:11	7	bps
LEAF_NODE	598:14	598:14	5	,
VAR_DECL	598:4	598:16	5	uint16 spp
TYPE	598:4	598:4	6	uint16
TYPE_NAME	598:4	598:4	7	uint16
LEAF_NODE	598:4	598:4	8	uint16
NAME	598:16	598:16	6	spp
LEAF_NODE	598:16	598:16	7	spp
LEAF_NODE	598:19	598:19	4	;
SIMPLE_DECL	599:4	599:31	3	tsize_t rowsize , tsize_t rastersize ;
INIT_DECL_LIST	599:4	599:4	4	tsize_t rowsize , tsize_t rastersize
VAR_DECL	599:4	599:12	5	tsize_t rowsize
TYPE	599:4	599:4	6	tsize_t
TYPE_NAME	599:4	599:4	7	tsize_t
LEAF_NODE	599:4	599:4	8	tsize_t
NAME	599:12	599:12	6	rowsize
LEAF_NODE	599:12	599:12	7	rowsize
LEAF_NODE	599:19	599:19	5	,
VAR_DECL	599:4	599:21	5	tsize_t rastersize
TYPE	599:4	599:4	6	tsize_t
TYPE_NAME	599:4	599:4	7	tsize_t
LEAF_NODE	599:4	599:4	8	tsize_t
NAME	599:21	599:21	6	rastersize
LEAF_NODE	599:21	599:21	7	rastersize
LEAF_NODE	599:31	599:31	4	;
SIMPLE_DECL	600:4	600:43	3	tstrip_t s , tstrip_t ns ; ns = TIFFNumberOfStrips ( in ) ;
INIT_DECL_LIST	600:4	600:4	4	tstrip_t s , tstrip_t ns ; ns = TIFFNumberOfStrips ( in )
VAR_DECL	600:4	600:13	5	tstrip_t s
TYPE	600:4	600:4	6	tstrip_t
TYPE_NAME	600:4	600:4	7	tstrip_t
LEAF_NODE	600:4	600:4	8	tstrip_t
NAME	600:13	600:13	6	s
LEAF_NODE	600:13	600:13	7	s
LEAF_NODE	600:14	600:14	5	,
VAR_DECL	600:4	600:16	5	tstrip_t ns ; ns = TIFFNumberOfStrips ( in )
TYPE	600:4	600:4	6	tstrip_t
TYPE_NAME	600:4	600:4	7	tstrip_t
LEAF_NODE	600:4	600:4	8	tstrip_t
NAME	600:16	600:16	6	ns
LEAF_NODE	600:16	600:16	7	ns
LEAF_NODE	0:0	0:0	6	;
INIT	600:16	600:16	6	ns = TIFFNumberOfStrips ( in )
ASSIGN	600:16	600:21	7	ns = TIFFNumberOfStrips ( in )
LVAL	600:16	600:16	8	ns
NAME	600:16	600:16	9	ns
LEAF_NODE	600:16	600:16	10	ns
ASSIGN_OP	600:19	600:19	8	=
LEAF_NODE	600:19	600:19	9	=
RVAL	600:21	600:21	8	TIFFNumberOfStrips ( in )
FUNCTION_CALL	600:21	600:42	9	TIFFNumberOfStrips ( in )
CALLEE	600:21	600:21	10	TIFFNumberOfStrips
LEAF_NODE	600:21	600:21	11	TIFFNumberOfStrips
LEAF_NODE	600:39	600:39	10	(
ARGUMENT	600:40	600:40	10	in
FIELD	600:40	600:40	11	in
LEAF_NODE	600:40	600:40	12	in
LEAF_NODE	600:42	600:42	10	)
LEAF_NODE	600:43	600:43	4	;
SIMPLE_DECL	601:4	601:20	3	toff_t [ 1 ] diroff ;
VAR_DECL	601:4	601:11	4	toff_t [ 1 ] diroff
TYPE	601:4	601:17	5	toff_t [ 1 ]
TYPE_NAME	601:4	601:4	6	toff_t
LEAF_NODE	601:4	601:4	7	toff_t
TYPE_SUFFIX	601:17	601:19	6	[ 1 ]
LEAF_NODE	601:17	601:17	7	[
FIELD	601:18	601:18	7	1
LEAF_NODE	601:18	601:18	8	1
LEAF_NODE	601:19	601:19	7	]
NAME	601:11	601:11	5	diroff
LEAF_NODE	601:11	601:11	6	diroff
LEAF_NODE	601:20	601:20	4	;
EXPR_STATEMENT	603:4	603:45	3	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & sw ) ;
EXPR	603:4	603:4	4	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & sw )
FUNCTION_CALL	603:4	603:44	5	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & sw )
CALLEE	603:4	603:4	6	TIFFGetField
LEAF_NODE	603:4	603:4	7	TIFFGetField
LEAF_NODE	603:16	603:16	6	(
ARGUMENT	603:17	603:17	6	in
FIELD	603:17	603:17	7	in
LEAF_NODE	603:17	603:17	8	in
LEAF_NODE	603:19	603:19	6	,
ARGUMENT	603:21	603:21	6	TIFFTAG_IMAGEWIDTH
FIELD	603:21	603:21	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	603:21	603:21	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	603:39	603:39	6	,
ARGUMENT	603:41	603:41	6	& sw
UNARY_EXPR	603:41	603:42	7	& sw
UNARY_OPERATOR	603:41	603:41	8	&
LEAF_NODE	603:41	603:41	9	&
FIELD	603:42	603:42	8	sw
LEAF_NODE	603:42	603:42	9	sw
LEAF_NODE	603:44	603:44	6	)
LEAF_NODE	603:45	603:45	4	;
EXPR_STATEMENT	604:4	604:46	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & sh ) ;
EXPR	604:4	604:4	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & sh )
FUNCTION_CALL	604:4	604:45	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & sh )
CALLEE	604:4	604:4	6	TIFFGetField
LEAF_NODE	604:4	604:4	7	TIFFGetField
LEAF_NODE	604:16	604:16	6	(
ARGUMENT	604:17	604:17	6	in
FIELD	604:17	604:17	7	in
LEAF_NODE	604:17	604:17	8	in
LEAF_NODE	604:19	604:19	6	,
ARGUMENT	604:21	604:21	6	TIFFTAG_IMAGELENGTH
FIELD	604:21	604:21	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	604:21	604:21	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	604:40	604:40	6	,
ARGUMENT	604:42	604:42	6	& sh
UNARY_EXPR	604:42	604:43	7	& sh
UNARY_OPERATOR	604:42	604:42	8	&
LEAF_NODE	604:42	604:42	9	&
FIELD	604:43	604:43	8	sh
LEAF_NODE	604:43	604:43	9	sh
LEAF_NODE	604:45	604:45	6	)
LEAF_NODE	604:46	604:46	4	;
EXPR_STATEMENT	605:4	605:58	3	TIFFGetFieldDefaulted ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ;
EXPR	605:4	605:4	4	TIFFGetFieldDefaulted ( in , TIFFTAG_BITSPERSAMPLE , & bps )
FUNCTION_CALL	605:4	605:57	5	TIFFGetFieldDefaulted ( in , TIFFTAG_BITSPERSAMPLE , & bps )
CALLEE	605:4	605:4	6	TIFFGetFieldDefaulted
LEAF_NODE	605:4	605:4	7	TIFFGetFieldDefaulted
LEAF_NODE	605:25	605:25	6	(
ARGUMENT	605:26	605:26	6	in
FIELD	605:26	605:26	7	in
LEAF_NODE	605:26	605:26	8	in
LEAF_NODE	605:28	605:28	6	,
ARGUMENT	605:30	605:30	6	TIFFTAG_BITSPERSAMPLE
FIELD	605:30	605:30	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	605:30	605:30	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	605:51	605:51	6	,
ARGUMENT	605:53	605:53	6	& bps
UNARY_EXPR	605:53	605:54	7	& bps
UNARY_OPERATOR	605:53	605:53	8	&
LEAF_NODE	605:53	605:53	9	&
FIELD	605:54	605:54	8	bps
LEAF_NODE	605:54	605:54	9	bps
LEAF_NODE	605:57	605:57	6	)
LEAF_NODE	605:58	605:58	4	;
EXPR_STATEMENT	606:4	606:60	3	TIFFGetFieldDefaulted ( in , TIFFTAG_SAMPLESPERPIXEL , & spp ) ;
EXPR	606:4	606:4	4	TIFFGetFieldDefaulted ( in , TIFFTAG_SAMPLESPERPIXEL , & spp )
FUNCTION_CALL	606:4	606:59	5	TIFFGetFieldDefaulted ( in , TIFFTAG_SAMPLESPERPIXEL , & spp )
CALLEE	606:4	606:4	6	TIFFGetFieldDefaulted
LEAF_NODE	606:4	606:4	7	TIFFGetFieldDefaulted
LEAF_NODE	606:25	606:25	6	(
ARGUMENT	606:26	606:26	6	in
FIELD	606:26	606:26	7	in
LEAF_NODE	606:26	606:26	8	in
LEAF_NODE	606:28	606:28	6	,
ARGUMENT	606:30	606:30	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	606:30	606:30	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	606:30	606:30	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	606:53	606:53	6	,
ARGUMENT	606:55	606:55	6	& spp
UNARY_EXPR	606:55	606:56	7	& spp
UNARY_OPERATOR	606:55	606:55	8	&
LEAF_NODE	606:55	606:55	9	&
FIELD	606:56	606:56	8	spp
LEAF_NODE	606:56	606:56	9	spp
LEAF_NODE	606:59	606:59	6	)
LEAF_NODE	606:60	606:60	4	;
EXPR_STATEMENT	607:4	607:57	3	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps ) ;
EXPR	607:4	607:4	4	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps )
FUNCTION_CALL	607:4	607:56	5	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps )
CALLEE	607:4	607:4	6	TIFFGetFieldDefaulted
LEAF_NODE	607:4	607:4	7	TIFFGetFieldDefaulted
LEAF_NODE	607:25	607:25	6	(
ARGUMENT	607:26	607:26	6	in
FIELD	607:26	607:26	7	in
LEAF_NODE	607:26	607:26	8	in
LEAF_NODE	607:28	607:28	6	,
ARGUMENT	607:30	607:30	6	TIFFTAG_ROWSPERSTRIP
FIELD	607:30	607:30	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	607:30	607:30	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	607:50	607:50	6	,
ARGUMENT	607:52	607:52	6	& rps
UNARY_EXPR	607:52	607:53	7	& rps
UNARY_OPERATOR	607:52	607:52	8	&
LEAF_NODE	607:52	607:52	9	&
FIELD	607:53	607:53	8	rps
LEAF_NODE	607:53	607:53	9	rps
LEAF_NODE	607:56	607:56	6	)
LEAF_NODE	607:57	607:57	4	;
SELECTION	608:4	609:1	3	
KEYWORD	608:4	608:4	4	if
LEAF_NODE	608:4	608:4	5	if
LEAF_NODE	608:7	608:7	4	(
CONDITION	608:8	608:8	4	spp != 1 || bps != 1
EXPR	608:8	608:8	5	spp != 1 || bps != 1
OR	608:8	608:20	6	spp != 1 || bps != 1
EXPR	608:8	608:15	7	spp != 1
FIELD	608:8	608:8	8	spp
LEAF_NODE	608:8	608:8	9	spp
EQ_OPERATOR	608:12	608:12	8	!=
LEAF_NODE	608:12	608:12	9	!=
FIELD	608:15	608:15	8	1
LEAF_NODE	608:15	608:15	9	1
LEAF_NODE	608:17	608:17	7	||
EXPR	608:20	608:27	7	bps != 1
FIELD	608:20	608:20	8	bps
LEAF_NODE	608:20	608:20	9	bps
EQ_OPERATOR	608:24	608:24	8	!=
LEAF_NODE	608:24	608:24	9	!=
FIELD	608:27	608:27	8	1
LEAF_NODE	608:27	608:27	9	1
LEAF_NODE	608:28	608:28	4	)
STATEMENTS	609:1	609:1	4	
JUMP_STATEMENT	609:1	609:9	5	return 0 ;
KEYWORD	609:1	609:1	6	return
LEAF_NODE	609:1	609:1	7	return
DESTINATION	609:8	609:8	6	0
EXPR	609:8	609:8	7	0
FIELD	609:8	609:8	8	0
LEAF_NODE	609:8	609:8	9	0
LEAF_NODE	609:9	609:9	6	;
EXPR_STATEMENT	610:4	610:34	3	rowsize = TIFFScanlineSize ( in ) ;
EXPR	610:4	610:4	4	rowsize = TIFFScanlineSize ( in )
ASSIGN	610:4	610:14	5	rowsize = TIFFScanlineSize ( in )
LVAL	610:4	610:4	6	rowsize
FIELD	610:4	610:4	7	rowsize
LEAF_NODE	610:4	610:4	8	rowsize
ASSIGN_OP	610:12	610:12	6	=
LEAF_NODE	610:12	610:12	7	=
RVAL	610:14	610:14	6	TIFFScanlineSize ( in )
FUNCTION_CALL	610:14	610:33	7	TIFFScanlineSize ( in )
CALLEE	610:14	610:14	8	TIFFScanlineSize
LEAF_NODE	610:14	610:14	9	TIFFScanlineSize
LEAF_NODE	610:30	610:30	8	(
ARGUMENT	610:31	610:31	8	in
FIELD	610:31	610:31	9	in
LEAF_NODE	610:31	610:31	10	in
LEAF_NODE	610:33	610:33	8	)
LEAF_NODE	610:34	610:34	4	;
EXPR_STATEMENT	611:4	611:29	3	rastersize = sh * rowsize ;
EXPR	611:4	611:4	4	rastersize = sh * rowsize
ASSIGN	611:4	611:17	5	rastersize = sh * rowsize
LVAL	611:4	611:4	6	rastersize
FIELD	611:4	611:4	7	rastersize
LEAF_NODE	611:4	611:4	8	rastersize
ASSIGN_OP	611:15	611:15	6	=
LEAF_NODE	611:15	611:15	7	=
RVAL	611:17	611:22	6	sh * rowsize
FIELD	611:17	611:17	7	sh
LEAF_NODE	611:17	611:17	8	sh
LEAF_NODE	611:20	611:20	7	*
FIELD	611:22	611:22	7	rowsize
LEAF_NODE	611:22	611:22	8	rowsize
LEAF_NODE	611:29	611:29	4	;
EXPR_STATEMENT	612:4	612:64	3	fprintf ( stderr , "rastersize=%u\n" , ( unsigned int ) rastersize ) ;
EXPR	612:4	612:4	4	fprintf ( stderr , "rastersize=%u\n" , ( unsigned int ) rastersize )
FUNCTION_CALL	612:4	612:63	5	fprintf ( stderr , "rastersize=%u\n" , ( unsigned int ) rastersize )
CALLEE	612:4	612:4	6	fprintf
LEAF_NODE	612:4	612:4	7	fprintf
LEAF_NODE	612:11	612:11	6	(
ARGUMENT	612:12	612:12	6	stderr
FIELD	612:12	612:12	7	stderr
LEAF_NODE	612:12	612:12	8	stderr
LEAF_NODE	612:18	612:18	6	,
ARGUMENT	612:20	612:20	6	"rastersize=%u\n"
FIELD	612:20	612:20	7	"rastersize=%u\n"
LEAF_NODE	612:20	612:20	8	"rastersize=%u\n"
LEAF_NODE	612:37	612:37	6	,
ARGUMENT	612:39	612:53	6	( unsigned int ) rastersize
LEAF_NODE	612:39	612:39	7	(
TYPE_NAME	612:40	612:49	7	unsigned int
LEAF_NODE	612:40	612:40	8	unsigned
LEAF_NODE	612:49	612:49	8	int
LEAF_NODE	612:52	612:52	7	)
FIELD	612:53	612:53	7	rastersize
LEAF_NODE	612:53	612:53	8	rastersize
LEAF_NODE	612:63	612:63	6	)
LEAF_NODE	612:64	612:64	4	;
EXPR_STATEMENT	615:4	615:54	3	raster = ( unsigned char * ) _TIFFmalloc ( rastersize + 3 ) ;
EXPR	615:4	615:4	4	raster = ( unsigned char * ) _TIFFmalloc ( rastersize + 3 )
ASSIGN	615:4	615:13	5	raster = ( unsigned char * ) _TIFFmalloc ( rastersize + 3 )
LVAL	615:4	615:4	6	raster
FIELD	615:4	615:4	7	raster
LEAF_NODE	615:4	615:4	8	raster
ASSIGN_OP	615:11	615:11	6	=
LEAF_NODE	615:11	615:11	7	=
RVAL	615:13	615:29	6	( unsigned char * ) _TIFFmalloc ( rastersize + 3 )
LEAF_NODE	615:13	615:13	7	(
TYPE_NAME	615:14	615:23	7	unsigned char
LEAF_NODE	615:14	615:14	8	unsigned
LEAF_NODE	615:23	615:23	8	char
LEAF_NODE	615:27	615:27	7	*
LEAF_NODE	615:28	615:28	7	)
FUNCTION_CALL	615:29	615:53	7	_TIFFmalloc ( rastersize + 3 )
CALLEE	615:29	615:29	8	_TIFFmalloc
LEAF_NODE	615:29	615:29	9	_TIFFmalloc
LEAF_NODE	615:40	615:40	8	(
ARGUMENT	615:41	615:52	8	rastersize + 3
FIELD	615:41	615:41	9	rastersize
LEAF_NODE	615:41	615:41	10	rastersize
LEAF_NODE	615:51	615:51	9	+
FIELD	615:52	615:52	9	3
LEAF_NODE	615:52	615:52	10	3
LEAF_NODE	615:53	615:53	8	)
LEAF_NODE	615:54	615:54	4	;
SELECTION	616:4	616:17	3	
KEYWORD	616:4	616:4	4	if
LEAF_NODE	616:4	616:4	5	if
LEAF_NODE	616:7	616:7	4	(
CONDITION	616:8	616:8	4	! raster
EXPR	616:8	616:8	5	! raster
UNARY_EXPR	616:8	616:9	6	! raster
UNARY_OPERATOR	616:8	616:8	7	!
LEAF_NODE	616:8	616:8	8	!
FIELD	616:9	616:9	7	raster
LEAF_NODE	616:9	616:9	8	raster
LEAF_NODE	616:15	616:15	4	)
STATEMENTS	616:17	620:4	4	
LEAF_NODE	616:17	616:17	5	{
STATEMENTS	617:5	619:5	5	
EXPR_STATEMENT	617:5	618:50	6	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for raster buffer." ) ;
EXPR	617:5	617:5	7	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for raster buffer." )
FUNCTION_CALL	617:5	618:49	8	TIFFError ( TIFFFileName ( in ) , "Can't allocate space for raster buffer." )
CALLEE	617:5	617:5	9	TIFFError
LEAF_NODE	617:5	617:5	10	TIFFError
LEAF_NODE	617:14	617:14	9	(
ARGUMENT	617:15	617:15	9	TIFFFileName ( in )
FUNCTION_CALL	617:15	617:30	10	TIFFFileName ( in )
CALLEE	617:15	617:15	11	TIFFFileName
LEAF_NODE	617:15	617:15	12	TIFFFileName
LEAF_NODE	617:27	617:27	11	(
ARGUMENT	617:28	617:28	11	in
FIELD	617:28	617:28	12	in
LEAF_NODE	617:28	617:28	13	in
LEAF_NODE	617:30	617:30	11	)
LEAF_NODE	617:31	617:31	9	,
ARGUMENT	618:8	618:8	9	"Can't allocate space for raster buffer."
FIELD	618:8	618:8	10	"Can't allocate space for raster buffer."
LEAF_NODE	618:8	618:8	11	"Can't allocate space for raster buffer."
LEAF_NODE	618:49	618:49	9	)
LEAF_NODE	618:50	618:50	7	;
JUMP_STATEMENT	619:5	619:13	6	return 0 ;
KEYWORD	619:5	619:5	7	return
LEAF_NODE	619:5	619:5	8	return
DESTINATION	619:12	619:12	7	0
EXPR	619:12	619:12	8	0
FIELD	619:12	619:12	9	0
LEAF_NODE	619:12	619:12	10	0
LEAF_NODE	619:13	619:13	7	;
LEAF_NODE	620:4	620:4	5	}
EXPR_STATEMENT	621:4	621:26	3	raster [ rastersize ] = 0 ;
EXPR	621:4	621:4	4	raster [ rastersize ] = 0
ASSIGN	621:4	621:25	5	raster [ rastersize ] = 0
LVAL	621:4	621:4	6	raster [ rastersize ]
FIELD	621:4	621:21	7	raster [ rastersize ]
LEAF_NODE	621:4	621:4	8	raster
LEAF_NODE	621:10	621:10	8	[
EXPR	621:11	621:11	8	rastersize
FIELD	621:11	621:11	9	rastersize
LEAF_NODE	621:11	621:11	10	rastersize
LEAF_NODE	621:21	621:21	8	]
ASSIGN_OP	621:23	621:23	6	=
LEAF_NODE	621:23	621:23	7	=
RVAL	621:25	621:25	6	0
FIELD	621:25	621:25	7	0
LEAF_NODE	621:25	621:25	8	0
LEAF_NODE	621:26	621:26	4	;
EXPR_STATEMENT	622:4	622:28	3	raster [ rastersize + 1 ] = 0 ;
EXPR	622:4	622:4	4	raster [ rastersize + 1 ] = 0
ASSIGN	622:4	622:27	5	raster [ rastersize + 1 ] = 0
LVAL	622:4	622:4	6	raster [ rastersize + 1 ]
FIELD	622:4	622:23	7	raster [ rastersize + 1 ]
LEAF_NODE	622:4	622:4	8	raster
LEAF_NODE	622:10	622:10	8	[
EXPR	622:11	622:22	8	rastersize + 1
FIELD	622:11	622:11	9	rastersize
LEAF_NODE	622:11	622:11	10	rastersize
LEAF_NODE	622:21	622:21	9	+
FIELD	622:22	622:22	9	1
LEAF_NODE	622:22	622:22	10	1
LEAF_NODE	622:23	622:23	8	]
ASSIGN_OP	622:25	622:25	6	=
LEAF_NODE	622:25	622:25	7	=
RVAL	622:27	622:27	6	0
FIELD	622:27	622:27	7	0
LEAF_NODE	622:27	622:27	8	0
LEAF_NODE	622:28	622:28	4	;
EXPR_STATEMENT	623:4	623:28	3	raster [ rastersize + 2 ] = 0 ;
EXPR	623:4	623:4	4	raster [ rastersize + 2 ] = 0
ASSIGN	623:4	623:27	5	raster [ rastersize + 2 ] = 0
LVAL	623:4	623:4	6	raster [ rastersize + 2 ]
FIELD	623:4	623:23	7	raster [ rastersize + 2 ]
LEAF_NODE	623:4	623:4	8	raster
LEAF_NODE	623:10	623:10	8	[
EXPR	623:11	623:22	8	rastersize + 2
FIELD	623:11	623:11	9	rastersize
LEAF_NODE	623:11	623:11	10	rastersize
LEAF_NODE	623:21	623:21	9	+
FIELD	623:22	623:22	9	2
LEAF_NODE	623:22	623:22	10	2
LEAF_NODE	623:23	623:23	8	]
ASSIGN_OP	623:25	623:25	6	=
LEAF_NODE	623:25	623:25	7	=
RVAL	623:27	623:27	6	0
FIELD	623:27	623:27	7	0
LEAF_NODE	623:27	623:27	8	0
LEAF_NODE	623:28	623:28	4	;
EXPR_STATEMENT	624:4	624:15	3	rp = raster ;
EXPR	624:4	624:4	4	rp = raster
ASSIGN	624:4	624:9	5	rp = raster
LVAL	624:4	624:4	6	rp
FIELD	624:4	624:4	7	rp
LEAF_NODE	624:4	624:4	8	rp
ASSIGN_OP	624:7	624:7	6	=
LEAF_NODE	624:7	624:7	7	=
RVAL	624:9	624:9	6	raster
FIELD	624:9	624:9	7	raster
LEAF_NODE	624:9	624:9	8	raster
LEAF_NODE	624:15	624:15	4	;
ITERATION	625:4	625:29	3	
KEYWORD	625:4	625:4	4	for
LEAF_NODE	625:4	625:4	5	for
LEAF_NODE	625:8	625:8	4	(
FOR_INIT	625:9	625:14	4	s = 0 ;
EXPR	625:9	625:9	5	s = 0
ASSIGN	625:9	625:13	6	s = 0
LVAL	625:9	625:9	7	s
FIELD	625:9	625:9	8	s
LEAF_NODE	625:9	625:9	9	s
ASSIGN_OP	625:11	625:11	7	=
LEAF_NODE	625:11	625:11	8	=
RVAL	625:13	625:13	7	0
FIELD	625:13	625:13	8	0
LEAF_NODE	625:13	625:13	9	0
LEAF_NODE	625:14	625:14	5	;
CONDITION	625:16	625:16	4	s < ns
EXPR	625:16	625:20	5	s < ns
FIELD	625:16	625:16	6	s
LEAF_NODE	625:16	625:16	7	s
REL_OPERATOR	625:18	625:18	6	<
LEAF_NODE	625:18	625:18	7	<
FIELD	625:20	625:20	6	ns
LEAF_NODE	625:20	625:20	7	ns
LEAF_NODE	625:22	625:22	4	;
FOR_EXPR	625:24	625:24	4	s ++
EXPR	625:24	625:24	5	s ++
FIELD	625:24	625:25	6	s ++
LEAF_NODE	625:24	625:24	7	s
LEAF_NODE	625:25	625:25	7	++
LEAF_NODE	625:27	625:27	4	)
STATEMENTS	625:29	628:4	4	
LEAF_NODE	625:29	625:29	5	{
STATEMENTS	626:1	627:1	5	
EXPR_STATEMENT	626:1	626:43	6	( void ) TIFFReadEncodedStrip ( in , s , rp , - 1 ) ;
EXPR	626:1	626:8	7	( void ) TIFFReadEncodedStrip ( in , s , rp , - 1 )
LEAF_NODE	626:1	626:1	8	(
TYPE_NAME	626:2	626:2	8	void
LEAF_NODE	626:2	626:2	9	void
LEAF_NODE	626:6	626:6	8	)
FUNCTION_CALL	626:8	626:42	8	TIFFReadEncodedStrip ( in , s , rp , - 1 )
CALLEE	626:8	626:8	9	TIFFReadEncodedStrip
LEAF_NODE	626:8	626:8	10	TIFFReadEncodedStrip
LEAF_NODE	626:28	626:28	9	(
ARGUMENT	626:29	626:29	9	in
FIELD	626:29	626:29	10	in
LEAF_NODE	626:29	626:29	11	in
LEAF_NODE	626:31	626:31	9	,
ARGUMENT	626:33	626:33	9	s
FIELD	626:33	626:33	10	s
LEAF_NODE	626:33	626:33	11	s
LEAF_NODE	626:34	626:34	9	,
ARGUMENT	626:36	626:36	9	rp
FIELD	626:36	626:36	10	rp
LEAF_NODE	626:36	626:36	11	rp
LEAF_NODE	626:38	626:38	9	,
ARGUMENT	626:40	626:40	9	- 1
UNARY_EXPR	626:40	626:41	10	- 1
UNARY_OPERATOR	626:40	626:40	11	-
LEAF_NODE	626:40	626:40	12	-
FIELD	626:41	626:41	11	1
LEAF_NODE	626:41	626:41	12	1
LEAF_NODE	626:42	626:42	9	)
LEAF_NODE	626:43	626:43	7	;
EXPR_STATEMENT	627:1	627:20	6	rp += rps * rowsize ;
EXPR	627:1	627:1	7	rp += rps * rowsize
ASSIGN	627:1	627:7	8	rp += rps * rowsize
LVAL	627:1	627:1	9	rp
FIELD	627:1	627:1	10	rp
LEAF_NODE	627:1	627:1	11	rp
ASSIGN_OP	627:4	627:4	9	+=
LEAF_NODE	627:4	627:4	10	+=
RVAL	627:7	627:13	9	rps * rowsize
FIELD	627:7	627:7	10	rps
LEAF_NODE	627:7	627:7	11	rps
LEAF_NODE	627:11	627:11	10	*
FIELD	627:13	627:13	10	rowsize
LEAF_NODE	627:13	627:13	11	rowsize
LEAF_NODE	627:20	627:20	7	;
LEAF_NODE	628:4	628:4	5	}
EXPR_STATEMENT	629:4	629:55	3	TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric ) ;
EXPR	629:4	629:4	4	TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric )
FUNCTION_CALL	629:4	629:54	5	TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric )
CALLEE	629:4	629:4	6	TIFFGetField
LEAF_NODE	629:4	629:4	7	TIFFGetField
LEAF_NODE	629:16	629:16	6	(
ARGUMENT	629:17	629:17	6	in
FIELD	629:17	629:17	7	in
LEAF_NODE	629:17	629:17	8	in
LEAF_NODE	629:19	629:19	6	,
ARGUMENT	629:21	629:21	6	TIFFTAG_PHOTOMETRIC
FIELD	629:21	629:21	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	629:21	629:21	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	629:40	629:40	6	,
ARGUMENT	629:42	629:42	6	& photometric
UNARY_EXPR	629:42	629:43	7	& photometric
UNARY_OPERATOR	629:42	629:42	8	&
LEAF_NODE	629:42	629:42	9	&
FIELD	629:43	629:43	8	photometric
LEAF_NODE	629:43	629:43	9	photometric
LEAF_NODE	629:54	629:54	6	)
LEAF_NODE	629:55	629:55	4	;
EXPR_STATEMENT	630:4	630:15	3	setupCmap ( ) ;
EXPR	630:4	630:4	4	setupCmap ( )
FUNCTION_CALL	630:4	630:14	5	setupCmap ( )
CALLEE	630:4	630:4	6	setupCmap
LEAF_NODE	630:4	630:4	7	setupCmap
LEAF_NODE	630:13	630:13	6	(
LEAF_NODE	630:14	630:14	6	)
LEAF_NODE	630:15	630:15	4	;
EXPR_STATEMENT	631:4	631:28	3	setImage ( raster , sw , sh ) ;
EXPR	631:4	631:4	4	setImage ( raster , sw , sh )
FUNCTION_CALL	631:4	631:27	5	setImage ( raster , sw , sh )
CALLEE	631:4	631:4	6	setImage
LEAF_NODE	631:4	631:4	7	setImage
LEAF_NODE	631:12	631:12	6	(
ARGUMENT	631:13	631:13	6	raster
FIELD	631:13	631:13	7	raster
LEAF_NODE	631:13	631:13	8	raster
LEAF_NODE	631:19	631:19	6	,
ARGUMENT	631:21	631:21	6	sw
FIELD	631:21	631:21	7	sw
LEAF_NODE	631:21	631:21	8	sw
LEAF_NODE	631:23	631:23	6	,
ARGUMENT	631:25	631:25	6	sh
FIELD	631:25	631:25	7	sh
LEAF_NODE	631:25	631:25	8	sh
LEAF_NODE	631:27	631:27	6	)
LEAF_NODE	631:28	631:28	4	;
EXPR_STATEMENT	632:4	632:21	3	_TIFFfree ( raster ) ;
EXPR	632:4	632:4	4	_TIFFfree ( raster )
FUNCTION_CALL	632:4	632:20	5	_TIFFfree ( raster )
CALLEE	632:4	632:4	6	_TIFFfree
LEAF_NODE	632:4	632:4	7	_TIFFfree
LEAF_NODE	632:13	632:13	6	(
ARGUMENT	632:14	632:14	6	raster
FIELD	632:14	632:14	7	raster
LEAF_NODE	632:14	632:14	8	raster
LEAF_NODE	632:20	632:20	6	)
LEAF_NODE	632:21	632:21	4	;
EXPR_STATEMENT	634:4	634:65	3	TIFFSetField ( out , TIFFTAG_SUBFILETYPE , FILETYPE_REDUCEDIMAGE ) ;
EXPR	634:4	634:4	4	TIFFSetField ( out , TIFFTAG_SUBFILETYPE , FILETYPE_REDUCEDIMAGE )
FUNCTION_CALL	634:4	634:64	5	TIFFSetField ( out , TIFFTAG_SUBFILETYPE , FILETYPE_REDUCEDIMAGE )
CALLEE	634:4	634:4	6	TIFFSetField
LEAF_NODE	634:4	634:4	7	TIFFSetField
LEAF_NODE	634:16	634:16	6	(
ARGUMENT	634:17	634:17	6	out
FIELD	634:17	634:17	7	out
LEAF_NODE	634:17	634:17	8	out
LEAF_NODE	634:20	634:20	6	,
ARGUMENT	634:22	634:22	6	TIFFTAG_SUBFILETYPE
FIELD	634:22	634:22	7	TIFFTAG_SUBFILETYPE
LEAF_NODE	634:22	634:22	8	TIFFTAG_SUBFILETYPE
LEAF_NODE	634:41	634:41	6	,
ARGUMENT	634:43	634:43	6	FILETYPE_REDUCEDIMAGE
FIELD	634:43	634:43	7	FILETYPE_REDUCEDIMAGE
LEAF_NODE	634:43	634:43	8	FILETYPE_REDUCEDIMAGE
LEAF_NODE	634:64	634:64	6	)
LEAF_NODE	634:65	634:65	4	;
EXPR_STATEMENT	635:4	635:55	3	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , ( uint32 ) tnw ) ;
EXPR	635:4	635:4	4	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , ( uint32 ) tnw )
FUNCTION_CALL	635:4	635:54	5	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , ( uint32 ) tnw )
CALLEE	635:4	635:4	6	TIFFSetField
LEAF_NODE	635:4	635:4	7	TIFFSetField
LEAF_NODE	635:16	635:16	6	(
ARGUMENT	635:17	635:17	6	out
FIELD	635:17	635:17	7	out
LEAF_NODE	635:17	635:17	8	out
LEAF_NODE	635:20	635:20	6	,
ARGUMENT	635:22	635:22	6	TIFFTAG_IMAGEWIDTH
FIELD	635:22	635:22	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	635:22	635:22	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	635:40	635:40	6	,
ARGUMENT	635:42	635:51	6	( uint32 ) tnw
LEAF_NODE	635:42	635:42	7	(
TYPE_NAME	635:43	635:43	7	uint32
LEAF_NODE	635:43	635:43	8	uint32
LEAF_NODE	635:49	635:49	7	)
FIELD	635:51	635:51	7	tnw
LEAF_NODE	635:51	635:51	8	tnw
LEAF_NODE	635:54	635:54	6	)
LEAF_NODE	635:55	635:55	4	;
EXPR_STATEMENT	636:4	636:56	3	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , ( uint32 ) tnh ) ;
EXPR	636:4	636:4	4	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , ( uint32 ) tnh )
FUNCTION_CALL	636:4	636:55	5	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , ( uint32 ) tnh )
CALLEE	636:4	636:4	6	TIFFSetField
LEAF_NODE	636:4	636:4	7	TIFFSetField
LEAF_NODE	636:16	636:16	6	(
ARGUMENT	636:17	636:17	6	out
FIELD	636:17	636:17	7	out
LEAF_NODE	636:17	636:17	8	out
LEAF_NODE	636:20	636:20	6	,
ARGUMENT	636:22	636:22	6	TIFFTAG_IMAGELENGTH
FIELD	636:22	636:22	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	636:22	636:22	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	636:41	636:41	6	,
ARGUMENT	636:43	636:52	6	( uint32 ) tnh
LEAF_NODE	636:43	636:43	7	(
TYPE_NAME	636:44	636:44	7	uint32
LEAF_NODE	636:44	636:44	8	uint32
LEAF_NODE	636:50	636:50	7	)
FIELD	636:52	636:52	7	tnh
LEAF_NODE	636:52	636:52	8	tnh
LEAF_NODE	636:55	636:55	6	)
LEAF_NODE	636:56	636:56	4	;
EXPR_STATEMENT	637:4	637:56	3	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , ( uint16 ) 8 ) ;
EXPR	637:4	637:4	4	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , ( uint16 ) 8 )
FUNCTION_CALL	637:4	637:55	5	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , ( uint16 ) 8 )
CALLEE	637:4	637:4	6	TIFFSetField
LEAF_NODE	637:4	637:4	7	TIFFSetField
LEAF_NODE	637:16	637:16	6	(
ARGUMENT	637:17	637:17	6	out
FIELD	637:17	637:17	7	out
LEAF_NODE	637:17	637:17	8	out
LEAF_NODE	637:20	637:20	6	,
ARGUMENT	637:22	637:22	6	TIFFTAG_BITSPERSAMPLE
FIELD	637:22	637:22	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	637:22	637:22	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	637:43	637:43	6	,
ARGUMENT	637:45	637:54	6	( uint16 ) 8
LEAF_NODE	637:45	637:45	7	(
TYPE_NAME	637:46	637:46	7	uint16
LEAF_NODE	637:46	637:46	8	uint16
LEAF_NODE	637:52	637:52	7	)
FIELD	637:54	637:54	7	8
LEAF_NODE	637:54	637:54	8	8
LEAF_NODE	637:55	637:55	6	)
LEAF_NODE	637:56	637:56	4	;
EXPR_STATEMENT	638:4	638:58	3	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , ( uint16 ) 1 ) ;
EXPR	638:4	638:4	4	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , ( uint16 ) 1 )
FUNCTION_CALL	638:4	638:57	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , ( uint16 ) 1 )
CALLEE	638:4	638:4	6	TIFFSetField
LEAF_NODE	638:4	638:4	7	TIFFSetField
LEAF_NODE	638:16	638:16	6	(
ARGUMENT	638:17	638:17	6	out
FIELD	638:17	638:17	7	out
LEAF_NODE	638:17	638:17	8	out
LEAF_NODE	638:20	638:20	6	,
ARGUMENT	638:22	638:22	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	638:22	638:22	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	638:22	638:22	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	638:45	638:45	6	,
ARGUMENT	638:47	638:56	6	( uint16 ) 1
LEAF_NODE	638:47	638:47	7	(
TYPE_NAME	638:48	638:48	7	uint16
LEAF_NODE	638:48	638:48	8	uint16
LEAF_NODE	638:54	638:54	7	)
FIELD	638:56	638:56	7	1
LEAF_NODE	638:56	638:56	8	1
LEAF_NODE	638:57	638:57	6	)
LEAF_NODE	638:58	638:58	4	;
EXPR_STATEMENT	639:4	639:64	3	TIFFSetField ( out , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS ) ;
EXPR	639:4	639:4	4	TIFFSetField ( out , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS )
FUNCTION_CALL	639:4	639:63	5	TIFFSetField ( out , TIFFTAG_COMPRESSION , COMPRESSION_PACKBITS )
CALLEE	639:4	639:4	6	TIFFSetField
LEAF_NODE	639:4	639:4	7	TIFFSetField
LEAF_NODE	639:16	639:16	6	(
ARGUMENT	639:17	639:17	6	out
FIELD	639:17	639:17	7	out
LEAF_NODE	639:17	639:17	8	out
LEAF_NODE	639:20	639:20	6	,
ARGUMENT	639:22	639:22	6	TIFFTAG_COMPRESSION
FIELD	639:22	639:22	7	TIFFTAG_COMPRESSION
LEAF_NODE	639:22	639:22	8	TIFFTAG_COMPRESSION
LEAF_NODE	639:41	639:41	6	,
ARGUMENT	639:43	639:43	6	COMPRESSION_PACKBITS
FIELD	639:43	639:43	7	COMPRESSION_PACKBITS
LEAF_NODE	639:43	639:43	8	COMPRESSION_PACKBITS
LEAF_NODE	639:63	639:63	6	)
LEAF_NODE	639:64	639:64	4	;
EXPR_STATEMENT	640:4	640:66	3	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_MINISWHITE ) ;
EXPR	640:4	640:4	4	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_MINISWHITE )
FUNCTION_CALL	640:4	640:65	5	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_MINISWHITE )
CALLEE	640:4	640:4	6	TIFFSetField
LEAF_NODE	640:4	640:4	7	TIFFSetField
LEAF_NODE	640:16	640:16	6	(
ARGUMENT	640:17	640:17	6	out
FIELD	640:17	640:17	7	out
LEAF_NODE	640:17	640:17	8	out
LEAF_NODE	640:20	640:20	6	,
ARGUMENT	640:22	640:22	6	TIFFTAG_PHOTOMETRIC
FIELD	640:22	640:22	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	640:22	640:22	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	640:41	640:41	6	,
ARGUMENT	640:43	640:43	6	PHOTOMETRIC_MINISWHITE
FIELD	640:43	640:43	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	640:43	640:43	8	PHOTOMETRIC_MINISWHITE
LEAF_NODE	640:65	640:65	6	)
LEAF_NODE	640:66	640:66	4	;
EXPR_STATEMENT	641:4	641:64	3	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	641:4	641:4	4	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	641:4	641:63	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	641:4	641:4	6	TIFFSetField
LEAF_NODE	641:4	641:4	7	TIFFSetField
LEAF_NODE	641:16	641:16	6	(
ARGUMENT	641:17	641:17	6	out
FIELD	641:17	641:17	7	out
LEAF_NODE	641:17	641:17	8	out
LEAF_NODE	641:20	641:20	6	,
ARGUMENT	641:22	641:22	6	TIFFTAG_PLANARCONFIG
FIELD	641:22	641:22	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	641:22	641:22	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	641:42	641:42	6	,
ARGUMENT	641:44	641:44	6	PLANARCONFIG_CONTIG
FIELD	641:44	641:44	7	PLANARCONFIG_CONTIG
LEAF_NODE	641:44	641:44	8	PLANARCONFIG_CONTIG
LEAF_NODE	641:63	641:63	6	)
LEAF_NODE	641:64	641:64	4	;
EXPR_STATEMENT	642:4	642:63	3	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT ) ;
EXPR	642:4	642:4	4	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
FUNCTION_CALL	642:4	642:62	5	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
CALLEE	642:4	642:4	6	TIFFSetField
LEAF_NODE	642:4	642:4	7	TIFFSetField
LEAF_NODE	642:16	642:16	6	(
ARGUMENT	642:17	642:17	6	out
FIELD	642:17	642:17	7	out
LEAF_NODE	642:17	642:17	8	out
LEAF_NODE	642:20	642:20	6	,
ARGUMENT	642:22	642:22	6	TIFFTAG_ORIENTATION
FIELD	642:22	642:22	7	TIFFTAG_ORIENTATION
LEAF_NODE	642:22	642:22	8	TIFFTAG_ORIENTATION
LEAF_NODE	642:41	642:41	6	,
ARGUMENT	642:43	642:43	6	ORIENTATION_TOPLEFT
FIELD	642:43	642:43	7	ORIENTATION_TOPLEFT
LEAF_NODE	642:43	642:43	8	ORIENTATION_TOPLEFT
LEAF_NODE	642:62	642:62	6	)
LEAF_NODE	642:63	642:63	4	;
EXPR_STATEMENT	643:4	643:62	3	cpTag ( in , out , TIFFTAG_SOFTWARE , ( uint16 ) - 1 , TIFF_ASCII ) ;
EXPR	643:4	643:4	4	cpTag ( in , out , TIFFTAG_SOFTWARE , ( uint16 ) - 1 , TIFF_ASCII )
FUNCTION_CALL	643:4	643:61	5	cpTag ( in , out , TIFFTAG_SOFTWARE , ( uint16 ) - 1 , TIFF_ASCII )
CALLEE	643:4	643:4	6	cpTag
LEAF_NODE	643:4	643:4	7	cpTag
LEAF_NODE	643:9	643:9	6	(
ARGUMENT	643:10	643:10	6	in
FIELD	643:10	643:10	7	in
LEAF_NODE	643:10	643:10	8	in
LEAF_NODE	643:12	643:12	6	,
ARGUMENT	643:14	643:14	6	out
FIELD	643:14	643:14	7	out
LEAF_NODE	643:14	643:14	8	out
LEAF_NODE	643:17	643:17	6	,
ARGUMENT	643:19	643:19	6	TIFFTAG_SOFTWARE
FIELD	643:19	643:19	7	TIFFTAG_SOFTWARE
LEAF_NODE	643:19	643:19	8	TIFFTAG_SOFTWARE
LEAF_NODE	643:35	643:35	6	,
ARGUMENT	643:38	643:47	6	( uint16 ) - 1
LEAF_NODE	643:38	643:38	7	(
TYPE_NAME	643:39	643:39	7	uint16
LEAF_NODE	643:39	643:39	8	uint16
LEAF_NODE	643:45	643:45	7	)
UNARY_EXPR	643:47	643:48	7	- 1
UNARY_OPERATOR	643:47	643:47	8	-
LEAF_NODE	643:47	643:47	9	-
FIELD	643:48	643:48	8	1
LEAF_NODE	643:48	643:48	9	1
LEAF_NODE	643:49	643:49	6	,
ARGUMENT	643:51	643:51	6	TIFF_ASCII
FIELD	643:51	643:51	7	TIFF_ASCII
LEAF_NODE	643:51	643:51	8	TIFF_ASCII
LEAF_NODE	643:61	643:61	6	)
LEAF_NODE	643:62	643:62	4	;
EXPR_STATEMENT	644:4	644:69	3	cpTag ( in , out , TIFFTAG_IMAGEDESCRIPTION , ( uint16 ) - 1 , TIFF_ASCII ) ;
EXPR	644:4	644:4	4	cpTag ( in , out , TIFFTAG_IMAGEDESCRIPTION , ( uint16 ) - 1 , TIFF_ASCII )
FUNCTION_CALL	644:4	644:68	5	cpTag ( in , out , TIFFTAG_IMAGEDESCRIPTION , ( uint16 ) - 1 , TIFF_ASCII )
CALLEE	644:4	644:4	6	cpTag
LEAF_NODE	644:4	644:4	7	cpTag
LEAF_NODE	644:9	644:9	6	(
ARGUMENT	644:10	644:10	6	in
FIELD	644:10	644:10	7	in
LEAF_NODE	644:10	644:10	8	in
LEAF_NODE	644:12	644:12	6	,
ARGUMENT	644:14	644:14	6	out
FIELD	644:14	644:14	7	out
LEAF_NODE	644:14	644:14	8	out
LEAF_NODE	644:17	644:17	6	,
ARGUMENT	644:19	644:19	6	TIFFTAG_IMAGEDESCRIPTION
FIELD	644:19	644:19	7	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	644:19	644:19	8	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	644:43	644:43	6	,
ARGUMENT	644:45	644:54	6	( uint16 ) - 1
LEAF_NODE	644:45	644:45	7	(
TYPE_NAME	644:46	644:46	7	uint16
LEAF_NODE	644:46	644:46	8	uint16
LEAF_NODE	644:52	644:52	7	)
UNARY_EXPR	644:54	644:55	7	- 1
UNARY_OPERATOR	644:54	644:54	8	-
LEAF_NODE	644:54	644:54	9	-
FIELD	644:55	644:55	8	1
LEAF_NODE	644:55	644:55	9	1
LEAF_NODE	644:56	644:56	6	,
ARGUMENT	644:58	644:58	6	TIFF_ASCII
FIELD	644:58	644:58	7	TIFF_ASCII
LEAF_NODE	644:58	644:58	8	TIFF_ASCII
LEAF_NODE	644:68	644:68	6	)
LEAF_NODE	644:69	644:69	4	;
EXPR_STATEMENT	645:4	645:62	3	cpTag ( in , out , TIFFTAG_DATETIME , ( uint16 ) - 1 , TIFF_ASCII ) ;
EXPR	645:4	645:4	4	cpTag ( in , out , TIFFTAG_DATETIME , ( uint16 ) - 1 , TIFF_ASCII )
FUNCTION_CALL	645:4	645:61	5	cpTag ( in , out , TIFFTAG_DATETIME , ( uint16 ) - 1 , TIFF_ASCII )
CALLEE	645:4	645:4	6	cpTag
LEAF_NODE	645:4	645:4	7	cpTag
LEAF_NODE	645:9	645:9	6	(
ARGUMENT	645:10	645:10	6	in
FIELD	645:10	645:10	7	in
LEAF_NODE	645:10	645:10	8	in
LEAF_NODE	645:12	645:12	6	,
ARGUMENT	645:14	645:14	6	out
FIELD	645:14	645:14	7	out
LEAF_NODE	645:14	645:14	8	out
LEAF_NODE	645:17	645:17	6	,
ARGUMENT	645:19	645:19	6	TIFFTAG_DATETIME
FIELD	645:19	645:19	7	TIFFTAG_DATETIME
LEAF_NODE	645:19	645:19	8	TIFFTAG_DATETIME
LEAF_NODE	645:35	645:35	6	,
ARGUMENT	645:38	645:47	6	( uint16 ) - 1
LEAF_NODE	645:38	645:38	7	(
TYPE_NAME	645:39	645:39	7	uint16
LEAF_NODE	645:39	645:39	8	uint16
LEAF_NODE	645:45	645:45	7	)
UNARY_EXPR	645:47	645:48	7	- 1
UNARY_OPERATOR	645:47	645:47	8	-
LEAF_NODE	645:47	645:47	9	-
FIELD	645:48	645:48	8	1
LEAF_NODE	645:48	645:48	9	1
LEAF_NODE	645:49	645:49	6	,
ARGUMENT	645:51	645:51	6	TIFF_ASCII
FIELD	645:51	645:51	7	TIFF_ASCII
LEAF_NODE	645:51	645:51	8	TIFF_ASCII
LEAF_NODE	645:61	645:61	6	)
LEAF_NODE	645:62	645:62	4	;
EXPR_STATEMENT	646:4	646:65	3	cpTag ( in , out , TIFFTAG_HOSTCOMPUTER , ( uint16 ) - 1 , TIFF_ASCII ) ;
EXPR	646:4	646:4	4	cpTag ( in , out , TIFFTAG_HOSTCOMPUTER , ( uint16 ) - 1 , TIFF_ASCII )
FUNCTION_CALL	646:4	646:64	5	cpTag ( in , out , TIFFTAG_HOSTCOMPUTER , ( uint16 ) - 1 , TIFF_ASCII )
CALLEE	646:4	646:4	6	cpTag
LEAF_NODE	646:4	646:4	7	cpTag
LEAF_NODE	646:9	646:9	6	(
ARGUMENT	646:10	646:10	6	in
FIELD	646:10	646:10	7	in
LEAF_NODE	646:10	646:10	8	in
LEAF_NODE	646:12	646:12	6	,
ARGUMENT	646:14	646:14	6	out
FIELD	646:14	646:14	7	out
LEAF_NODE	646:14	646:14	8	out
LEAF_NODE	646:17	646:17	6	,
ARGUMENT	646:19	646:19	6	TIFFTAG_HOSTCOMPUTER
FIELD	646:19	646:19	7	TIFFTAG_HOSTCOMPUTER
LEAF_NODE	646:19	646:19	8	TIFFTAG_HOSTCOMPUTER
LEAF_NODE	646:39	646:39	6	,
ARGUMENT	646:41	646:50	6	( uint16 ) - 1
LEAF_NODE	646:41	646:41	7	(
TYPE_NAME	646:42	646:42	7	uint16
LEAF_NODE	646:42	646:42	8	uint16
LEAF_NODE	646:48	646:48	7	)
UNARY_EXPR	646:50	646:51	7	- 1
UNARY_OPERATOR	646:50	646:50	8	-
LEAF_NODE	646:50	646:50	9	-
FIELD	646:51	646:51	8	1
LEAF_NODE	646:51	646:51	9	1
LEAF_NODE	646:52	646:52	6	,
ARGUMENT	646:54	646:54	6	TIFF_ASCII
FIELD	646:54	646:54	7	TIFF_ASCII
LEAF_NODE	646:54	646:54	8	TIFF_ASCII
LEAF_NODE	646:64	646:64	6	)
LEAF_NODE	646:65	646:65	4	;
EXPR_STATEMENT	647:4	647:19	3	diroff [ 0 ] = 0UL ;
EXPR	647:4	647:4	4	diroff [ 0 ] = 0UL
ASSIGN	647:4	647:16	5	diroff [ 0 ] = 0UL
LVAL	647:4	647:4	6	diroff [ 0 ]
FIELD	647:4	647:12	7	diroff [ 0 ]
LEAF_NODE	647:4	647:4	8	diroff
LEAF_NODE	647:10	647:10	8	[
EXPR	647:11	647:11	8	0
FIELD	647:11	647:11	9	0
LEAF_NODE	647:11	647:11	10	0
LEAF_NODE	647:12	647:12	8	]
ASSIGN_OP	647:14	647:14	6	=
LEAF_NODE	647:14	647:14	7	=
RVAL	647:16	647:16	6	0UL
FIELD	647:16	647:16	7	0UL
LEAF_NODE	647:16	647:16	8	0UL
LEAF_NODE	647:19	647:19	4	;
EXPR_STATEMENT	648:4	648:48	3	TIFFSetField ( out , TIFFTAG_SUBIFD , 1 , diroff ) ;
EXPR	648:4	648:4	4	TIFFSetField ( out , TIFFTAG_SUBIFD , 1 , diroff )
FUNCTION_CALL	648:4	648:47	5	TIFFSetField ( out , TIFFTAG_SUBIFD , 1 , diroff )
CALLEE	648:4	648:4	6	TIFFSetField
LEAF_NODE	648:4	648:4	7	TIFFSetField
LEAF_NODE	648:16	648:16	6	(
ARGUMENT	648:17	648:17	6	out
FIELD	648:17	648:17	7	out
LEAF_NODE	648:17	648:17	8	out
LEAF_NODE	648:20	648:20	6	,
ARGUMENT	648:22	648:22	6	TIFFTAG_SUBIFD
FIELD	648:22	648:22	7	TIFFTAG_SUBIFD
LEAF_NODE	648:22	648:22	8	TIFFTAG_SUBIFD
LEAF_NODE	648:36	648:36	6	,
ARGUMENT	648:38	648:38	6	1
FIELD	648:38	648:38	7	1
LEAF_NODE	648:38	648:38	8	1
LEAF_NODE	648:39	648:39	6	,
ARGUMENT	648:41	648:41	6	diroff
FIELD	648:41	648:41	7	diroff
LEAF_NODE	648:41	648:41	8	diroff
LEAF_NODE	648:47	648:47	6	)
LEAF_NODE	648:48	648:48	4	;
JUMP_STATEMENT	649:4	650:42	3	return ( TIFFWriteEncodedStrip ( out , 0 , thumbnail , tnw * tnh ) != - 1 && TIFFWriteDirectory ( out ) != - 1 ) ;
KEYWORD	649:4	649:4	4	return
LEAF_NODE	649:4	649:4	5	return
DESTINATION	649:11	649:11	4	( TIFFWriteEncodedStrip ( out , 0 , thumbnail , tnw * tnh ) != - 1 && TIFFWriteDirectory ( out ) != - 1 )
EXPR	649:11	650:41	5	( TIFFWriteEncodedStrip ( out , 0 , thumbnail , tnw * tnh ) != - 1 && TIFFWriteDirectory ( out ) != - 1 )
LEAF_NODE	649:11	649:11	6	(
AND	649:12	650:12	6	TIFFWriteEncodedStrip ( out , 0 , thumbnail , tnw * tnh ) != - 1 && TIFFWriteDirectory ( out ) != - 1
EXPR	649:12	649:65	7	TIFFWriteEncodedStrip ( out , 0 , thumbnail , tnw * tnh ) != - 1
FUNCTION_CALL	649:12	649:60	8	TIFFWriteEncodedStrip ( out , 0 , thumbnail , tnw * tnh )
CALLEE	649:12	649:12	9	TIFFWriteEncodedStrip
LEAF_NODE	649:12	649:12	10	TIFFWriteEncodedStrip
LEAF_NODE	649:33	649:33	9	(
ARGUMENT	649:34	649:34	9	out
FIELD	649:34	649:34	10	out
LEAF_NODE	649:34	649:34	11	out
LEAF_NODE	649:37	649:37	9	,
ARGUMENT	649:39	649:39	9	0
FIELD	649:39	649:39	10	0
LEAF_NODE	649:39	649:39	11	0
LEAF_NODE	649:40	649:40	9	,
ARGUMENT	649:42	649:42	9	thumbnail
FIELD	649:42	649:42	10	thumbnail
LEAF_NODE	649:42	649:42	11	thumbnail
LEAF_NODE	649:51	649:51	9	,
ARGUMENT	649:53	649:57	9	tnw * tnh
FIELD	649:53	649:53	10	tnw
LEAF_NODE	649:53	649:53	11	tnw
LEAF_NODE	649:56	649:56	10	*
FIELD	649:57	649:57	10	tnh
LEAF_NODE	649:57	649:57	11	tnh
LEAF_NODE	649:60	649:60	9	)
EQ_OPERATOR	649:62	649:62	8	!=
LEAF_NODE	649:62	649:62	9	!=
UNARY_EXPR	649:65	649:66	8	- 1
UNARY_OPERATOR	649:65	649:65	9	-
LEAF_NODE	649:65	649:65	10	-
FIELD	649:66	649:66	9	1
LEAF_NODE	649:66	649:66	10	1
LEAF_NODE	649:68	649:68	7	&&
EXPR	650:12	650:39	7	TIFFWriteDirectory ( out ) != - 1
FUNCTION_CALL	650:12	650:34	8	TIFFWriteDirectory ( out )
CALLEE	650:12	650:12	9	TIFFWriteDirectory
LEAF_NODE	650:12	650:12	10	TIFFWriteDirectory
LEAF_NODE	650:30	650:30	9	(
ARGUMENT	650:31	650:31	9	out
FIELD	650:31	650:31	10	out
LEAF_NODE	650:31	650:31	11	out
LEAF_NODE	650:34	650:34	9	)
EQ_OPERATOR	650:36	650:36	8	!=
LEAF_NODE	650:36	650:36	9	!=
UNARY_EXPR	650:39	650:40	8	- 1
UNARY_OPERATOR	650:39	650:39	9	-
LEAF_NODE	650:39	650:39	10	-
FIELD	650:40	650:40	9	1
LEAF_NODE	650:40	650:40	10	1
LEAF_NODE	650:41	650:41	6	)
LEAF_NODE	650:42	650:42	4	;
LEAF_NODE	651:0	651:0	2	}
FUNCTION_DEF	669:0	680:0	1	
RETURN_TYPE	669:0	669:7	2	static void
LEAF_NODE	669:0	669:0	3	static
TYPE_NAME	669:7	669:7	3	void
LEAF_NODE	669:7	669:7	4	void
FUNCTION_NAME	670:0	670:0	2	usage
LEAF_NODE	670:0	670:0	3	usage
PARAMETER_LIST	670:5	670:10	2	( void )
LEAF_NODE	670:5	670:5	3	(
PARAMETER_DECL	670:6	670:6	3	void
LEAF_NODE	670:6	670:6	4	void
LEAF_NODE	670:10	670:10	3	)
LEAF_NODE	671:0	671:0	2	{
STATEMENTS	672:1	679:1	2	
SIMPLE_DECL	672:1	672:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	672:1	672:6	4	char [ BUFSIZ ] buf
TYPE	672:1	672:9	5	char [ BUFSIZ ]
TYPE_NAME	672:1	672:1	6	char
LEAF_NODE	672:1	672:1	7	char
TYPE_SUFFIX	672:9	672:16	6	[ BUFSIZ ]
LEAF_NODE	672:9	672:9	7	[
FIELD	672:10	672:10	7	BUFSIZ
LEAF_NODE	672:10	672:10	8	BUFSIZ
LEAF_NODE	672:16	672:16	7	]
NAME	672:6	672:6	5	buf
LEAF_NODE	672:6	672:6	6	buf
LEAF_NODE	672:17	672:17	4	;
SIMPLE_DECL	673:1	673:6	3	int i ;
VAR_DECL	673:1	673:5	4	int i
TYPE	673:1	673:1	5	int
TYPE_NAME	673:1	673:1	6	int
LEAF_NODE	673:1	673:1	7	int
NAME	673:5	673:5	5	i
LEAF_NODE	673:5	673:5	6	i
LEAF_NODE	673:6	673:6	4	;
EXPR_STATEMENT	675:1	675:20	3	setbuf ( stderr , buf ) ;
EXPR	675:1	675:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	675:1	675:19	5	setbuf ( stderr , buf )
CALLEE	675:1	675:1	6	setbuf
LEAF_NODE	675:1	675:1	7	setbuf
LEAF_NODE	675:7	675:7	6	(
ARGUMENT	675:8	675:8	6	stderr
FIELD	675:8	675:8	7	stderr
LEAF_NODE	675:8	675:8	8	stderr
LEAF_NODE	675:14	675:14	6	,
ARGUMENT	675:16	675:16	6	buf
FIELD	675:16	675:16	7	buf
LEAF_NODE	675:16	675:16	8	buf
LEAF_NODE	675:19	675:19	6	)
LEAF_NODE	675:20	675:20	4	;
EXPR_STATEMENT	676:8	676:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	676:8	676:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	676:8	676:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	676:8	676:8	6	fprintf
LEAF_NODE	676:8	676:8	7	fprintf
LEAF_NODE	676:15	676:15	6	(
ARGUMENT	676:16	676:16	6	stderr
FIELD	676:16	676:16	7	stderr
LEAF_NODE	676:16	676:16	8	stderr
LEAF_NODE	676:22	676:22	6	,
ARGUMENT	676:24	676:24	6	"%s\n\n"
FIELD	676:24	676:24	7	"%s\n\n"
LEAF_NODE	676:24	676:24	8	"%s\n\n"
LEAF_NODE	676:32	676:32	6	,
ARGUMENT	676:34	676:34	6	TIFFGetVersion ( )
FUNCTION_CALL	676:34	676:49	7	TIFFGetVersion ( )
CALLEE	676:34	676:34	8	TIFFGetVersion
LEAF_NODE	676:34	676:34	9	TIFFGetVersion
LEAF_NODE	676:48	676:48	8	(
LEAF_NODE	676:49	676:49	8	)
LEAF_NODE	676:50	676:50	6	)
LEAF_NODE	676:51	676:51	4	;
ITERATION	677:1	678:2	3	
KEYWORD	677:1	677:1	4	for
LEAF_NODE	677:1	677:1	5	for
LEAF_NODE	677:5	677:5	4	(
FOR_INIT	677:6	677:11	4	i = 0 ;
EXPR	677:6	677:6	5	i = 0
ASSIGN	677:6	677:10	6	i = 0
LVAL	677:6	677:6	7	i
FIELD	677:6	677:6	8	i
LEAF_NODE	677:6	677:6	9	i
ASSIGN_OP	677:8	677:8	7	=
LEAF_NODE	677:8	677:8	8	=
RVAL	677:10	677:10	7	0
FIELD	677:10	677:10	8	0
LEAF_NODE	677:10	677:10	9	0
LEAF_NODE	677:11	677:11	5	;
CONDITION	677:13	677:13	4	stuff [ i ] != NULL
EXPR	677:13	677:25	5	stuff [ i ] != NULL
FIELD	677:13	677:20	6	stuff [ i ]
LEAF_NODE	677:13	677:13	7	stuff
LEAF_NODE	677:18	677:18	7	[
EXPR	677:19	677:19	7	i
FIELD	677:19	677:19	8	i
LEAF_NODE	677:19	677:19	9	i
LEAF_NODE	677:20	677:20	7	]
EQ_OPERATOR	677:22	677:22	6	!=
LEAF_NODE	677:22	677:22	7	!=
FIELD	677:25	677:25	6	NULL
LEAF_NODE	677:25	677:25	7	NULL
LEAF_NODE	677:29	677:29	4	;
FOR_EXPR	677:31	677:31	4	i ++
EXPR	677:31	677:31	5	i ++
FIELD	677:31	677:32	6	i ++
LEAF_NODE	677:31	677:31	7	i
LEAF_NODE	677:32	677:32	7	++
LEAF_NODE	677:34	677:34	4	)
STATEMENTS	678:2	678:2	4	
EXPR_STATEMENT	678:2	678:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	678:2	678:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	678:2	678:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	678:2	678:2	8	fprintf
LEAF_NODE	678:2	678:2	9	fprintf
LEAF_NODE	678:9	678:9	8	(
ARGUMENT	678:10	678:10	8	stderr
FIELD	678:10	678:10	9	stderr
LEAF_NODE	678:10	678:10	10	stderr
LEAF_NODE	678:16	678:16	8	,
ARGUMENT	678:18	678:18	8	"%s\n"
FIELD	678:18	678:18	9	"%s\n"
LEAF_NODE	678:18	678:18	10	"%s\n"
LEAF_NODE	678:24	678:24	8	,
ARGUMENT	678:26	678:26	8	stuff [ i ]
FIELD	678:26	678:33	9	stuff [ i ]
LEAF_NODE	678:26	678:26	10	stuff
LEAF_NODE	678:31	678:31	10	[
EXPR	678:32	678:32	10	i
FIELD	678:32	678:32	11	i
LEAF_NODE	678:32	678:32	12	i
LEAF_NODE	678:33	678:33	10	]
LEAF_NODE	678:34	678:34	8	)
LEAF_NODE	678:35	678:35	6	;
EXPR_STATEMENT	679:1	679:9	3	exit ( - 1 ) ;
EXPR	679:1	679:1	4	exit ( - 1 )
FUNCTION_CALL	679:1	679:8	5	exit ( - 1 )
CALLEE	679:1	679:1	6	exit
LEAF_NODE	679:1	679:1	7	exit
LEAF_NODE	679:5	679:5	6	(
ARGUMENT	679:6	679:6	6	- 1
UNARY_EXPR	679:6	679:7	7	- 1
UNARY_OPERATOR	679:6	679:6	8	-
LEAF_NODE	679:6	679:6	9	-
FIELD	679:7	679:7	8	1
LEAF_NODE	679:7	679:7	9	1
LEAF_NODE	679:8	679:8	6	)
LEAF_NODE	679:9	679:9	4	;
LEAF_NODE	680:0	680:0	2	}
